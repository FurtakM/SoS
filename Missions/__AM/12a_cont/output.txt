// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitVariables ;
  11: CALL 130 0 0
// CreateNature ;
  15: CALL 9187 0 0
// PrepareAlliance ;
  19: CALL 344 0 0
// PrepareFriends ;
  23: CALL 3654 0 0
// PrepareAmerican ;
  27: CALL 781 0 0
// PlaceSeeing ( 91 , 70 , 7 , - 32178 ) ;
  31: LD_INT 91
  33: PPUSH
  34: LD_INT 70
  36: PPUSH
  37: LD_INT 7
  39: PPUSH
  40: LD_INT 32178
  42: NEG
  43: PPUSH
  44: CALL_OW 330
// RemoveSeeing ( 91 , 70 , 7 ) ;
  48: LD_INT 91
  50: PPUSH
  51: LD_INT 70
  53: PPUSH
  54: LD_INT 7
  56: PPUSH
  57: CALL_OW 331
// if debug then
  61: LD_EXP 1
  65: IFFALSE 113
// begin SetAttitude ( 1 , 7 , att_enemy , true ) ;
  67: LD_INT 1
  69: PPUSH
  70: LD_INT 7
  72: PPUSH
  73: LD_INT 2
  75: PPUSH
  76: LD_INT 1
  78: PPUSH
  79: CALL_OW 80
// RemoveUnit ( Powell ) ;
  83: LD_EXP 16
  87: PPUSH
  88: CALL_OW 64
// DoNotAttack ( 1 , JMM ) ;
  92: LD_INT 1
  94: PPUSH
  95: LD_EXP 14
  99: PPUSH
 100: CALL_OW 471
// FogOff ( 1 ) ;
 104: LD_INT 1
 106: PPUSH
 107: CALL_OW 344
// end else
 111: GO 117
// Action ;
 113: CALL 9523 0 0
// PreparePatrol ;
 117: CALL 1246 0 0
// game := true ;
 121: LD_ADDR_EXP 2
 125: PUSH
 126: LD_INT 1
 128: ST_TO_ADDR
// end ;
 129: END
// export debug , game , selected , friends , reached_lab , can_escape , on_hill , friends_kill_counter , team_kill_counter , gamma_commander , extra_patrol , invis_used , alert ; export function InitVariables ; begin
 130: LD_INT 0
 132: PPUSH
// debug := false ;
 133: LD_ADDR_EXP 1
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// friends := [ ] ;
 141: LD_ADDR_EXP 4
 145: PUSH
 146: EMPTY
 147: ST_TO_ADDR
// selected := [ ] ;
 148: LD_ADDR_EXP 3
 152: PUSH
 153: EMPTY
 154: ST_TO_ADDR
// reached_lab := false ;
 155: LD_ADDR_EXP 5
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// can_escape := false ;
 163: LD_ADDR_EXP 6
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// game := false ;
 171: LD_ADDR_EXP 2
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// gamma_commander := LoadVariable ( GammaCommander , 2 ) ;
 179: LD_ADDR_EXP 10
 183: PUSH
 184: LD_STRING GammaCommander
 186: PPUSH
 187: LD_INT 2
 189: PPUSH
 190: CALL_OW 30
 194: ST_TO_ADDR
// friends_kill_counter := 0 ;
 195: LD_ADDR_EXP 8
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// team_kill_counter := 0 ;
 203: LD_ADDR_EXP 9
 207: PUSH
 208: LD_INT 0
 210: ST_TO_ADDR
// extra_patrol := true ;
 211: LD_ADDR_EXP 11
 215: PUSH
 216: LD_INT 1
 218: ST_TO_ADDR
// on_hill := false ;
 219: LD_ADDR_EXP 7
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// invis_used := false ;
 227: LD_ADDR_EXP 12
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// alert := false ;
 235: LD_ADDR_EXP 13
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// end ;
 243: LD_VAR 0 1
 247: RET
// every 0 0$1 trigger on_hill do
 248: LD_EXP 7
 252: IFFALSE 264
 254: GO 256
 256: DISABLE
// SetAchievement ( ACH_EYE ) ;
 257: LD_STRING ACH_EYE
 259: PPUSH
 260: CALL_OW 543
 264: END
// every 0 0$1 trigger not invis_used do var i ;
 265: LD_EXP 12
 269: NOT
 270: IFFALSE 341
 272: GO 274
 274: DISABLE
 275: LD_INT 0
 277: PPUSH
// begin enable ;
 278: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do
 279: LD_ADDR_VAR 0 1
 283: PUSH
 284: LD_INT 22
 286: PUSH
 287: LD_INT 7
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PUSH
 294: LD_INT 21
 296: PUSH
 297: LD_INT 1
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: PUSH
 304: EMPTY
 305: LIST
 306: LIST
 307: PPUSH
 308: CALL_OW 69
 312: PUSH
 313: FOR_IN
 314: IFFALSE 339
// if IsInvisible ( i ) then
 316: LD_VAR 0 1
 320: PPUSH
 321: CALL_OW 571
 325: IFFALSE 337
// begin invis_used := true ;
 327: LD_ADDR_EXP 12
 331: PUSH
 332: LD_INT 1
 334: ST_TO_ADDR
// break ;
 335: GO 339
// end ;
 337: GO 313
 339: POP
 340: POP
// end ; end_of_file
 341: PPOPN 1
 343: END
// export JMM , Roth ; export function PrepareAlliance ; var cargo ; begin
 344: LD_INT 0
 346: PPUSH
 347: PPUSH
// uc_side := 7 ;
 348: LD_ADDR_OWVAR 20
 352: PUSH
 353: LD_INT 7
 355: ST_TO_ADDR
// uc_nation := 1 ;
 356: LD_ADDR_OWVAR 21
 360: PUSH
 361: LD_INT 1
 363: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 11_ ) ;
 364: LD_ADDR_EXP 14
 368: PUSH
 369: LD_STRING JMM
 371: PPUSH
 372: LD_EXP 1
 376: NOT
 377: PPUSH
 378: LD_STRING 11_
 380: PPUSH
 381: CALL 35131 0 3
 385: ST_TO_ADDR
// uc_side := 4 ;
 386: LD_ADDR_OWVAR 20
 390: PUSH
 391: LD_INT 4
 393: ST_TO_ADDR
// Roth := NewCharacter ( Roth ) ;
 394: LD_ADDR_EXP 15
 398: PUSH
 399: LD_STRING Roth
 401: PPUSH
 402: CALL_OW 25
 406: ST_TO_ADDR
// SetDir ( JMM , 1 ) ;
 407: LD_EXP 14
 411: PPUSH
 412: LD_INT 1
 414: PPUSH
 415: CALL_OW 233
// SetClass ( JMM , 1 ) ;
 419: LD_EXP 14
 423: PPUSH
 424: LD_INT 1
 426: PPUSH
 427: CALL_OW 336
// PlaceUnitXY ( JMM , 105 , 10 , false ) ;
 431: LD_EXP 14
 435: PPUSH
 436: LD_INT 105
 438: PPUSH
 439: LD_INT 10
 441: PPUSH
 442: LD_INT 0
 444: PPUSH
 445: CALL_OW 48
// SetDir ( Roth , 4 ) ;
 449: LD_EXP 15
 453: PPUSH
 454: LD_INT 4
 456: PPUSH
 457: CALL_OW 233
// PlaceUnitXY ( Roth , 109 , 10 , false ) ;
 461: LD_EXP 15
 465: PPUSH
 466: LD_INT 109
 468: PPUSH
 469: LD_INT 10
 471: PPUSH
 472: LD_INT 0
 474: PPUSH
 475: CALL_OW 48
// ComTurnUnit ( JMM , Roth ) ;
 479: LD_EXP 14
 483: PPUSH
 484: LD_EXP 15
 488: PPUSH
 489: CALL_OW 119
// ComTurnUnit ( Roth , JMM ) ;
 493: LD_EXP 15
 497: PPUSH
 498: LD_EXP 14
 502: PPUSH
 503: CALL_OW 119
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
 507: LD_INT 3
 509: PPUSH
 510: LD_INT 3
 512: PPUSH
 513: LD_INT 3
 515: PPUSH
 516: LD_INT 12
 518: PPUSH
 519: LD_INT 100
 521: PPUSH
 522: CALL 40148 0 5
// cargo := CreateVehicle ;
 526: LD_ADDR_VAR 0 2
 530: PUSH
 531: CALL_OW 45
 535: ST_TO_ADDR
// SetDir ( cargo , 1 ) ;
 536: LD_VAR 0 2
 540: PPUSH
 541: LD_INT 1
 543: PPUSH
 544: CALL_OW 233
// PlaceUnitXY ( cargo , 179 , 45 , false ) ;
 548: LD_VAR 0 2
 552: PPUSH
 553: LD_INT 179
 555: PPUSH
 556: LD_INT 45
 558: PPUSH
 559: LD_INT 0
 561: PPUSH
 562: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 30 ) ;
 566: LD_VAR 0 2
 570: PPUSH
 571: LD_INT 4
 573: PPUSH
 574: LD_INT 30
 576: PPUSH
 577: CALL_OW 290
// if LoadVariable ( 11_artifact_captured , 0 ) then
 581: LD_STRING 11_artifact_captured
 583: PPUSH
 584: LD_INT 0
 586: PPUSH
 587: CALL_OW 30
 591: IFFALSE 648
// begin cargo := CreateVehicle ;
 593: LD_ADDR_VAR 0 2
 597: PUSH
 598: CALL_OW 45
 602: ST_TO_ADDR
// SetDir ( cargo , 0 ) ;
 603: LD_VAR 0 2
 607: PPUSH
 608: LD_INT 0
 610: PPUSH
 611: CALL_OW 233
// PlaceUnitXY ( cargo , 171 , 85 , false ) ;
 615: LD_VAR 0 2
 619: PPUSH
 620: LD_INT 171
 622: PPUSH
 623: LD_INT 85
 625: PPUSH
 626: LD_INT 0
 628: PPUSH
 629: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 50 ) ;
 633: LD_VAR 0 2
 637: PPUSH
 638: LD_INT 4
 640: PPUSH
 641: LD_INT 50
 643: PPUSH
 644: CALL_OW 290
// end ; SetSide ( amlab , 7 ) ;
 648: LD_INT 47
 650: PPUSH
 651: LD_INT 7
 653: PPUSH
 654: CALL_OW 235
// DoNotAttack ( 1 , amlab ) ;
 658: LD_INT 1
 660: PPUSH
 661: LD_INT 47
 663: PPUSH
 664: CALL_OW 471
// end ;
 668: LD_VAR 0 1
 672: RET
// every 0 0$1 trigger FilterUnitsInArea ( hill , [ f_side , 7 ] ) and not on_hill do
 673: LD_INT 38
 675: PPUSH
 676: LD_INT 22
 678: PUSH
 679: LD_INT 7
 681: PUSH
 682: EMPTY
 683: LIST
 684: LIST
 685: PPUSH
 686: CALL_OW 70
 690: PUSH
 691: LD_EXP 7
 695: NOT
 696: AND
 697: IFFALSE 728
 699: GO 701
 701: DISABLE
// begin enable ;
 702: ENABLE
// on_hill := true ;
 703: LD_ADDR_EXP 7
 707: PUSH
 708: LD_INT 1
 710: ST_TO_ADDR
// PlaceSeeing ( 126 , 13 , 7 , - 90 ) ;
 711: LD_INT 126
 713: PPUSH
 714: LD_INT 13
 716: PPUSH
 717: LD_INT 7
 719: PPUSH
 720: LD_INT 90
 722: NEG
 723: PPUSH
 724: CALL_OW 330
// end ;
 728: END
// every 0 0$1 trigger not FilterUnitsInArea ( hill , [ f_side , 7 ] ) and on_hill do
 729: LD_INT 38
 731: PPUSH
 732: LD_INT 22
 734: PUSH
 735: LD_INT 7
 737: PUSH
 738: EMPTY
 739: LIST
 740: LIST
 741: PPUSH
 742: CALL_OW 70
 746: NOT
 747: PUSH
 748: LD_EXP 7
 752: AND
 753: IFFALSE 780
 755: GO 757
 757: DISABLE
// begin enable ;
 758: ENABLE
// on_hill := false ;
 759: LD_ADDR_EXP 7
 763: PUSH
 764: LD_INT 0
 766: ST_TO_ADDR
// RemoveSeeing ( 126 , 13 , 7 ) ;
 767: LD_INT 126
 769: PPUSH
 770: LD_INT 13
 772: PPUSH
 773: LD_INT 7
 775: PPUSH
 776: CALL_OW 331
// end ; end_of_file
 780: END
// export Powell , mobile_patrol , mobile_points , powell_guards , defenders , defcon , defcon_wave ; export function PrepareAmerican ; var i , j , b , un , tmp ; begin
 781: LD_INT 0
 783: PPUSH
 784: PPUSH
 785: PPUSH
 786: PPUSH
 787: PPUSH
 788: PPUSH
// if Difficulty = 1 then
 789: LD_OWVAR 67
 793: PUSH
 794: LD_INT 1
 796: EQUAL
 797: IFFALSE 905
// begin tmp := [ [ 155 , 77 ] , [ 193 , 93 ] , [ 188 , 81 ] , [ 56 , 85 ] , [ 98 , 87 ] ] ;
 799: LD_ADDR_VAR 0 6
 803: PUSH
 804: LD_INT 155
 806: PUSH
 807: LD_INT 77
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: PUSH
 814: LD_INT 193
 816: PUSH
 817: LD_INT 93
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PUSH
 824: LD_INT 188
 826: PUSH
 827: LD_INT 81
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: PUSH
 834: LD_INT 56
 836: PUSH
 837: LD_INT 85
 839: PUSH
 840: EMPTY
 841: LIST
 842: LIST
 843: PUSH
 844: LD_INT 98
 846: PUSH
 847: LD_INT 87
 849: PUSH
 850: EMPTY
 851: LIST
 852: LIST
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: ST_TO_ADDR
// for i in tmp do
 861: LD_ADDR_VAR 0 2
 865: PUSH
 866: LD_VAR 0 6
 870: PUSH
 871: FOR_IN
 872: IFFALSE 903
// RemoveUnit ( HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
 874: LD_VAR 0 2
 878: PUSH
 879: LD_INT 1
 881: ARRAY
 882: PPUSH
 883: LD_VAR 0 2
 887: PUSH
 888: LD_INT 2
 890: ARRAY
 891: PPUSH
 892: CALL_OW 428
 896: PPUSH
 897: CALL_OW 64
 901: GO 871
 903: POP
 904: POP
// end ; defcon := 0 ;
 905: LD_ADDR_EXP 21
 909: PUSH
 910: LD_INT 0
 912: ST_TO_ADDR
// defcon_wave := 0 ;
 913: LD_ADDR_EXP 22
 917: PUSH
 918: LD_INT 0
 920: ST_TO_ADDR
// defenders := [ ] ;
 921: LD_ADDR_EXP 20
 925: PUSH
 926: EMPTY
 927: ST_TO_ADDR
// SetBName ( alfa , alpha ) ;
 928: LD_INT 5
 930: PPUSH
 931: LD_STRING alpha
 933: PPUSH
 934: CALL_OW 500
// uc_side := 1 ;
 938: LD_ADDR_OWVAR 20
 942: PUSH
 943: LD_INT 1
 945: ST_TO_ADDR
// uc_nation := 1 ;
 946: LD_ADDR_OWVAR 21
 950: PUSH
 951: LD_INT 1
 953: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
 954: LD_ADDR_EXP 16
 958: PUSH
 959: LD_STRING Powell
 961: PPUSH
 962: CALL_OW 25
 966: ST_TO_ADDR
// PlaceUnitXY ( Powell , 110 , 26 , false ) ;
 967: LD_EXP 16
 971: PPUSH
 972: LD_INT 110
 974: PPUSH
 975: LD_INT 26
 977: PPUSH
 978: LD_INT 0
 980: PPUSH
 981: CALL_OW 48
// ComHold ( Powell ) ;
 985: LD_EXP 16
 989: PPUSH
 990: CALL_OW 140
// for i = 1 to 5 do
 994: LD_ADDR_VAR 0 2
 998: PUSH
 999: DOUBLE
1000: LD_INT 1
1002: DEC
1003: ST_TO_ADDR
1004: LD_INT 5
1006: PUSH
1007: FOR_TO
1008: IFFALSE 1064
// begin PrepareHuman ( false , 1 , 10 ) ;
1010: LD_INT 0
1012: PPUSH
1013: LD_INT 1
1015: PPUSH
1016: LD_INT 10
1018: PPUSH
1019: CALL_OW 380
// powell_guards := Insert ( powell_guards , 1 , CreateHuman ) ;
1023: LD_ADDR_EXP 19
1027: PUSH
1028: LD_EXP 19
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: CALL_OW 44
1040: PPUSH
1041: CALL_OW 2
1045: ST_TO_ADDR
// PlaceHumanInUnit ( powell_guards [ 1 ] , ambar0 ) ;
1046: LD_EXP 19
1050: PUSH
1051: LD_INT 1
1053: ARRAY
1054: PPUSH
1055: LD_INT 18
1057: PPUSH
1058: CALL_OW 52
// end ;
1062: GO 1007
1064: POP
1065: POP
// if Difficulty > 2 then
1066: LD_OWVAR 67
1070: PUSH
1071: LD_INT 2
1073: GREATER
1074: IFFALSE 1123
// begin bc_type := b_turret ;
1076: LD_ADDR_OWVAR 42
1080: PUSH
1081: LD_INT 33
1083: ST_TO_ADDR
// bc_level := 7 ;
1084: LD_ADDR_OWVAR 43
1088: PUSH
1089: LD_INT 7
1091: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 107 , 55 , 5 ) ;
1092: LD_ADDR_VAR 0 4
1096: PUSH
1097: LD_INT 107
1099: PPUSH
1100: LD_INT 55
1102: PPUSH
1103: LD_INT 5
1105: PPUSH
1106: CALL_OW 47
1110: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_rocket_launcher ) ;
1111: LD_VAR 0 4
1115: PPUSH
1116: LD_INT 7
1118: PPUSH
1119: CALL_OW 431
// end ; for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ^ FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) do
1123: LD_ADDR_VAR 0 2
1127: PUSH
1128: LD_INT 22
1130: PUSH
1131: LD_INT 1
1133: PUSH
1134: EMPTY
1135: LIST
1136: LIST
1137: PUSH
1138: LD_INT 30
1140: PUSH
1141: LD_INT 3
1143: PUSH
1144: EMPTY
1145: LIST
1146: LIST
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: PPUSH
1152: CALL_OW 69
1156: PUSH
1157: LD_INT 22
1159: PUSH
1160: LD_INT 1
1162: PUSH
1163: EMPTY
1164: LIST
1165: LIST
1166: PUSH
1167: LD_INT 30
1169: PUSH
1170: LD_INT 36
1172: PUSH
1173: EMPTY
1174: LIST
1175: LIST
1176: PUSH
1177: EMPTY
1178: LIST
1179: LIST
1180: PPUSH
1181: CALL_OW 69
1185: ADD
1186: PUSH
1187: FOR_IN
1188: IFFALSE 1239
// for j = 1 to 3 do
1190: LD_ADDR_VAR 0 3
1194: PUSH
1195: DOUBLE
1196: LD_INT 1
1198: DEC
1199: ST_TO_ADDR
1200: LD_INT 3
1202: PUSH
1203: FOR_TO
1204: IFFALSE 1235
// begin PrepareHuman ( false , 3 , 6 ) ;
1206: LD_INT 0
1208: PPUSH
1209: LD_INT 3
1211: PPUSH
1212: LD_INT 6
1214: PPUSH
1215: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
1219: CALL_OW 44
1223: PPUSH
1224: LD_VAR 0 2
1228: PPUSH
1229: CALL_OW 52
// end ;
1233: GO 1203
1235: POP
1236: POP
1237: GO 1187
1239: POP
1240: POP
// end ;
1241: LD_VAR 0 1
1245: RET
// export function PreparePatrol ; var i , un ; begin
1246: LD_INT 0
1248: PPUSH
1249: PPUSH
1250: PPUSH
// uc_side := 1 ;
1251: LD_ADDR_OWVAR 20
1255: PUSH
1256: LD_INT 1
1258: ST_TO_ADDR
// uc_nation := 1 ;
1259: LD_ADDR_OWVAR 21
1263: PUSH
1264: LD_INT 1
1266: ST_TO_ADDR
// mobile_points := [ [ [ 99 , 55 ] , [ 113 , 67 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 103 , 41 ] ] , [ [ 27 , 49 ] , [ 46 , 49 ] , [ 87 , 70 ] , [ 99 , 79 ] , [ 118 , 111 ] , [ 99 , 79 ] , [ 87 , 70 ] , [ 46 , 49 ] ] , [ [ 200 , 88 ] , [ 175 , 80 ] , [ 135 , 62 ] , [ 117 , 53 ] , [ 103 , 41 ] , [ 99 , 24 ] , [ 85 , 3 ] , [ 99 , 24 ] , [ 103 , 41 ] , [ 98 , 47 ] , [ 99 , 56 ] , [ 96 , 66 ] , [ 99 , 56 ] , [ 112 , 66 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 156 , 71 ] , [ 168 , 76 ] , [ 168 , 61 ] , [ 168 , 75 ] , [ 185 , 85 ] ] ] ;
1267: LD_ADDR_EXP 18
1271: PUSH
1272: LD_INT 99
1274: PUSH
1275: LD_INT 55
1277: PUSH
1278: EMPTY
1279: LIST
1280: LIST
1281: PUSH
1282: LD_INT 113
1284: PUSH
1285: LD_INT 67
1287: PUSH
1288: EMPTY
1289: LIST
1290: LIST
1291: PUSH
1292: LD_INT 129
1294: PUSH
1295: LD_INT 68
1297: PUSH
1298: EMPTY
1299: LIST
1300: LIST
1301: PUSH
1302: LD_INT 135
1304: PUSH
1305: LD_INT 62
1307: PUSH
1308: EMPTY
1309: LIST
1310: LIST
1311: PUSH
1312: LD_INT 103
1314: PUSH
1315: LD_INT 41
1317: PUSH
1318: EMPTY
1319: LIST
1320: LIST
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: PUSH
1329: LD_INT 27
1331: PUSH
1332: LD_INT 49
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: PUSH
1339: LD_INT 46
1341: PUSH
1342: LD_INT 49
1344: PUSH
1345: EMPTY
1346: LIST
1347: LIST
1348: PUSH
1349: LD_INT 87
1351: PUSH
1352: LD_INT 70
1354: PUSH
1355: EMPTY
1356: LIST
1357: LIST
1358: PUSH
1359: LD_INT 99
1361: PUSH
1362: LD_INT 79
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: PUSH
1369: LD_INT 118
1371: PUSH
1372: LD_INT 111
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: LD_INT 99
1381: PUSH
1382: LD_INT 79
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: PUSH
1389: LD_INT 87
1391: PUSH
1392: LD_INT 70
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: PUSH
1399: LD_INT 46
1401: PUSH
1402: LD_INT 49
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: PUSH
1419: LD_INT 200
1421: PUSH
1422: LD_INT 88
1424: PUSH
1425: EMPTY
1426: LIST
1427: LIST
1428: PUSH
1429: LD_INT 175
1431: PUSH
1432: LD_INT 80
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: PUSH
1439: LD_INT 135
1441: PUSH
1442: LD_INT 62
1444: PUSH
1445: EMPTY
1446: LIST
1447: LIST
1448: PUSH
1449: LD_INT 117
1451: PUSH
1452: LD_INT 53
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: PUSH
1459: LD_INT 103
1461: PUSH
1462: LD_INT 41
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: PUSH
1469: LD_INT 99
1471: PUSH
1472: LD_INT 24
1474: PUSH
1475: EMPTY
1476: LIST
1477: LIST
1478: PUSH
1479: LD_INT 85
1481: PUSH
1482: LD_INT 3
1484: PUSH
1485: EMPTY
1486: LIST
1487: LIST
1488: PUSH
1489: LD_INT 99
1491: PUSH
1492: LD_INT 24
1494: PUSH
1495: EMPTY
1496: LIST
1497: LIST
1498: PUSH
1499: LD_INT 103
1501: PUSH
1502: LD_INT 41
1504: PUSH
1505: EMPTY
1506: LIST
1507: LIST
1508: PUSH
1509: LD_INT 98
1511: PUSH
1512: LD_INT 47
1514: PUSH
1515: EMPTY
1516: LIST
1517: LIST
1518: PUSH
1519: LD_INT 99
1521: PUSH
1522: LD_INT 56
1524: PUSH
1525: EMPTY
1526: LIST
1527: LIST
1528: PUSH
1529: LD_INT 96
1531: PUSH
1532: LD_INT 66
1534: PUSH
1535: EMPTY
1536: LIST
1537: LIST
1538: PUSH
1539: LD_INT 99
1541: PUSH
1542: LD_INT 56
1544: PUSH
1545: EMPTY
1546: LIST
1547: LIST
1548: PUSH
1549: LD_INT 112
1551: PUSH
1552: LD_INT 66
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: PUSH
1559: LD_INT 129
1561: PUSH
1562: LD_INT 68
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: PUSH
1569: LD_INT 135
1571: PUSH
1572: LD_INT 62
1574: PUSH
1575: EMPTY
1576: LIST
1577: LIST
1578: PUSH
1579: LD_INT 156
1581: PUSH
1582: LD_INT 71
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PUSH
1589: LD_INT 168
1591: PUSH
1592: LD_INT 76
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: PUSH
1599: LD_INT 168
1601: PUSH
1602: LD_INT 61
1604: PUSH
1605: EMPTY
1606: LIST
1607: LIST
1608: PUSH
1609: LD_INT 168
1611: PUSH
1612: LD_INT 75
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: PUSH
1619: LD_INT 185
1621: PUSH
1622: LD_INT 85
1624: PUSH
1625: EMPTY
1626: LIST
1627: LIST
1628: PUSH
1629: EMPTY
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: LIST
1645: LIST
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: LIST
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: LIST
1656: ST_TO_ADDR
// mobile_patrol := [ ] ;
1657: LD_ADDR_EXP 17
1661: PUSH
1662: EMPTY
1663: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1664: LD_INT 3
1666: PPUSH
1667: LD_INT 1
1669: PPUSH
1670: LD_INT 3
1672: PPUSH
1673: LD_INT 4
1675: PPUSH
1676: LD_INT 100
1678: PPUSH
1679: CALL 40148 0 5
// mobile_patrol := Insert ( mobile_patrol , 1 , CreateVehicle ) ;
1683: LD_ADDR_EXP 17
1687: PUSH
1688: LD_EXP 17
1692: PPUSH
1693: LD_INT 1
1695: PPUSH
1696: CALL_OW 45
1700: PPUSH
1701: CALL_OW 2
1705: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 1 ] , 99 , 55 , false ) ;
1706: LD_EXP 17
1710: PUSH
1711: LD_INT 1
1713: ARRAY
1714: PPUSH
1715: LD_INT 99
1717: PPUSH
1718: LD_INT 55
1720: PPUSH
1721: LD_INT 0
1723: PPUSH
1724: CALL_OW 48
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1728: LD_INT 2
1730: PPUSH
1731: LD_INT 1
1733: PPUSH
1734: LD_INT 3
1736: PPUSH
1737: LD_INT 4
1739: PPUSH
1740: LD_INT 100
1742: PPUSH
1743: CALL 40148 0 5
// mobile_patrol := Insert ( mobile_patrol , 2 , CreateVehicle ) ;
1747: LD_ADDR_EXP 17
1751: PUSH
1752: LD_EXP 17
1756: PPUSH
1757: LD_INT 2
1759: PPUSH
1760: CALL_OW 45
1764: PPUSH
1765: CALL_OW 2
1769: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 2 ] , 27 , 49 , false ) ;
1770: LD_EXP 17
1774: PUSH
1775: LD_INT 2
1777: ARRAY
1778: PPUSH
1779: LD_INT 27
1781: PPUSH
1782: LD_INT 49
1784: PPUSH
1785: LD_INT 0
1787: PPUSH
1788: CALL_OW 48
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , [ us_laser , us_rocket_launcher , us_rocket_launcher , us_rocket_launcher ] [ Difficulty ] , 100 ) ;
1792: LD_INT 3
1794: PPUSH
1795: LD_INT 1
1797: PPUSH
1798: LD_INT 3
1800: PPUSH
1801: LD_INT 9
1803: PUSH
1804: LD_INT 7
1806: PUSH
1807: LD_INT 7
1809: PUSH
1810: LD_INT 7
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: PUSH
1819: LD_OWVAR 67
1823: ARRAY
1824: PPUSH
1825: LD_INT 100
1827: PPUSH
1828: CALL 40148 0 5
// mobile_patrol := Insert ( mobile_patrol , 3 , CreateVehicle ) ;
1832: LD_ADDR_EXP 17
1836: PUSH
1837: LD_EXP 17
1841: PPUSH
1842: LD_INT 3
1844: PPUSH
1845: CALL_OW 45
1849: PPUSH
1850: CALL_OW 2
1854: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 3 ] , 200 , 88 , false ) ;
1855: LD_EXP 17
1859: PUSH
1860: LD_INT 3
1862: ARRAY
1863: PPUSH
1864: LD_INT 200
1866: PPUSH
1867: LD_INT 88
1869: PPUSH
1870: LD_INT 0
1872: PPUSH
1873: CALL_OW 48
// for i = mobile_patrol downto 1 do
1877: LD_ADDR_VAR 0 2
1881: PUSH
1882: DOUBLE
1883: LD_EXP 17
1887: INC
1888: ST_TO_ADDR
1889: LD_INT 1
1891: PUSH
1892: FOR_DOWNTO
1893: IFFALSE 1904
// RaiseSailEvent ( 1 ) ;
1895: LD_INT 1
1897: PPUSH
1898: CALL_OW 427
1902: GO 1892
1904: POP
1905: POP
// end ;
1906: LD_VAR 0 1
1910: RET
// export function SpawnCargo ( ) ; var i , c , k , areas , road , tmp , veh ; begin
1911: LD_INT 0
1913: PPUSH
1914: PPUSH
1915: PPUSH
1916: PPUSH
1917: PPUSH
1918: PPUSH
1919: PPUSH
1920: PPUSH
// areas := [ [ road_east , 4 ] , [ road_south , 5 ] , [ road_west , 1 ] ] ;
1921: LD_ADDR_VAR 0 5
1925: PUSH
1926: LD_INT 20
1928: PUSH
1929: LD_INT 4
1931: PUSH
1932: EMPTY
1933: LIST
1934: LIST
1935: PUSH
1936: LD_INT 21
1938: PUSH
1939: LD_INT 5
1941: PUSH
1942: EMPTY
1943: LIST
1944: LIST
1945: PUSH
1946: LD_INT 22
1948: PUSH
1949: LD_INT 1
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: PUSH
1956: EMPTY
1957: LIST
1958: LIST
1959: LIST
1960: ST_TO_ADDR
// road := [ [ 176 , 81 , 135 , 62 , 114 , 67 , 93 , 71 , 76 , 67 ] , [ 107 , 92 , 92 , 72 , 77 , 68 ] , [ 45 , 49 , 67 , 59 , 77 , 68 ] ] ;
1961: LD_ADDR_VAR 0 6
1965: PUSH
1966: LD_INT 176
1968: PUSH
1969: LD_INT 81
1971: PUSH
1972: LD_INT 135
1974: PUSH
1975: LD_INT 62
1977: PUSH
1978: LD_INT 114
1980: PUSH
1981: LD_INT 67
1983: PUSH
1984: LD_INT 93
1986: PUSH
1987: LD_INT 71
1989: PUSH
1990: LD_INT 76
1992: PUSH
1993: LD_INT 67
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: LIST
2000: LIST
2001: LIST
2002: LIST
2003: LIST
2004: LIST
2005: LIST
2006: LIST
2007: PUSH
2008: LD_INT 107
2010: PUSH
2011: LD_INT 92
2013: PUSH
2014: LD_INT 92
2016: PUSH
2017: LD_INT 72
2019: PUSH
2020: LD_INT 77
2022: PUSH
2023: LD_INT 68
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: LIST
2030: LIST
2031: LIST
2032: LIST
2033: PUSH
2034: LD_INT 45
2036: PUSH
2037: LD_INT 49
2039: PUSH
2040: LD_INT 67
2042: PUSH
2043: LD_INT 59
2045: PUSH
2046: LD_INT 77
2048: PUSH
2049: LD_INT 68
2051: PUSH
2052: EMPTY
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: LIST
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: LIST
2064: ST_TO_ADDR
// k := rand ( 1 , areas ) ;
2065: LD_ADDR_VAR 0 4
2069: PUSH
2070: LD_INT 1
2072: PPUSH
2073: LD_VAR 0 5
2077: PPUSH
2078: CALL_OW 12
2082: ST_TO_ADDR
// c := rand ( 1 , 2 ) ;
2083: LD_ADDR_VAR 0 3
2087: PUSH
2088: LD_INT 1
2090: PPUSH
2091: LD_INT 2
2093: PPUSH
2094: CALL_OW 12
2098: ST_TO_ADDR
// uc_side := 1 ;
2099: LD_ADDR_OWVAR 20
2103: PUSH
2104: LD_INT 1
2106: ST_TO_ADDR
// uc_nation := 1 ;
2107: LD_ADDR_OWVAR 21
2111: PUSH
2112: LD_INT 1
2114: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
2115: LD_INT 2
2117: PPUSH
2118: LD_INT 3
2120: PPUSH
2121: LD_INT 3
2123: PPUSH
2124: LD_INT 12
2126: PPUSH
2127: LD_INT 100
2129: PPUSH
2130: CALL 40148 0 5
// veh := CreateVehicle ;
2134: LD_ADDR_VAR 0 8
2138: PUSH
2139: CALL_OW 45
2143: ST_TO_ADDR
// SetDir ( veh , areas [ k ] [ 2 ] ) ;
2144: LD_VAR 0 8
2148: PPUSH
2149: LD_VAR 0 5
2153: PUSH
2154: LD_VAR 0 4
2158: ARRAY
2159: PUSH
2160: LD_INT 2
2162: ARRAY
2163: PPUSH
2164: CALL_OW 233
// PlaceUnitArea ( veh , areas [ k ] [ 1 ] , false ) ;
2168: LD_VAR 0 8
2172: PPUSH
2173: LD_VAR 0 5
2177: PUSH
2178: LD_VAR 0 4
2182: ARRAY
2183: PUSH
2184: LD_INT 1
2186: ARRAY
2187: PPUSH
2188: LD_INT 0
2190: PPUSH
2191: CALL_OW 49
// SetCargo ( veh , [ mat_cans , mat_siberit ] [ c ] , 100 ) ;
2195: LD_VAR 0 8
2199: PPUSH
2200: LD_INT 1
2202: PUSH
2203: LD_INT 3
2205: PUSH
2206: EMPTY
2207: LIST
2208: LIST
2209: PUSH
2210: LD_VAR 0 3
2214: ARRAY
2215: PPUSH
2216: LD_INT 100
2218: PPUSH
2219: CALL_OW 290
// tmp := road [ k ] ;
2223: LD_ADDR_VAR 0 7
2227: PUSH
2228: LD_VAR 0 6
2232: PUSH
2233: LD_VAR 0 4
2237: ARRAY
2238: ST_TO_ADDR
// for i = 1 to tmp div 2 do
2239: LD_ADDR_VAR 0 2
2243: PUSH
2244: DOUBLE
2245: LD_INT 1
2247: DEC
2248: ST_TO_ADDR
2249: LD_VAR 0 7
2253: PUSH
2254: LD_INT 2
2256: DIV
2257: PUSH
2258: FOR_TO
2259: IFFALSE 2306
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2261: LD_VAR 0 8
2265: PPUSH
2266: LD_VAR 0 7
2270: PUSH
2271: LD_VAR 0 2
2275: PUSH
2276: LD_INT 2
2278: MUL
2279: PUSH
2280: LD_INT 1
2282: MINUS
2283: ARRAY
2284: PPUSH
2285: LD_VAR 0 7
2289: PUSH
2290: LD_VAR 0 2
2294: PUSH
2295: LD_INT 2
2297: MUL
2298: ARRAY
2299: PPUSH
2300: CALL_OW 171
2304: GO 2258
2306: POP
2307: POP
// AddComGive ( veh , alfa ) ;
2308: LD_VAR 0 8
2312: PPUSH
2313: LD_INT 5
2315: PPUSH
2316: CALL_OW 221
// AddComWait ( veh , 0 0$2 ) ;
2320: LD_VAR 0 8
2324: PPUSH
2325: LD_INT 70
2327: PPUSH
2328: CALL_OW 202
// for i = tmp div 2 downto 1 do
2332: LD_ADDR_VAR 0 2
2336: PUSH
2337: DOUBLE
2338: LD_VAR 0 7
2342: PUSH
2343: LD_INT 2
2345: DIV
2346: INC
2347: ST_TO_ADDR
2348: LD_INT 1
2350: PUSH
2351: FOR_DOWNTO
2352: IFFALSE 2399
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2354: LD_VAR 0 8
2358: PPUSH
2359: LD_VAR 0 7
2363: PUSH
2364: LD_VAR 0 2
2368: PUSH
2369: LD_INT 2
2371: MUL
2372: PUSH
2373: LD_INT 1
2375: MINUS
2376: ARRAY
2377: PPUSH
2378: LD_VAR 0 7
2382: PUSH
2383: LD_VAR 0 2
2387: PUSH
2388: LD_INT 2
2390: MUL
2391: ARRAY
2392: PPUSH
2393: CALL_OW 171
2397: GO 2351
2399: POP
2400: POP
// AddComMoveToArea ( veh , areas [ k ] [ 1 ] ) ;
2401: LD_VAR 0 8
2405: PPUSH
2406: LD_VAR 0 5
2410: PUSH
2411: LD_VAR 0 4
2415: ARRAY
2416: PUSH
2417: LD_INT 1
2419: ARRAY
2420: PPUSH
2421: CALL_OW 173
// repeat wait ( 0 0$1 ) ;
2425: LD_INT 35
2427: PPUSH
2428: CALL_OW 67
// until IsInArea ( veh , areas [ k ] [ 1 ] ) and GetCargo ( veh , c ) = 0 ;
2432: LD_VAR 0 8
2436: PPUSH
2437: LD_VAR 0 5
2441: PUSH
2442: LD_VAR 0 4
2446: ARRAY
2447: PUSH
2448: LD_INT 1
2450: ARRAY
2451: PPUSH
2452: CALL_OW 308
2456: PUSH
2457: LD_VAR 0 8
2461: PPUSH
2462: LD_VAR 0 3
2466: PPUSH
2467: CALL_OW 289
2471: PUSH
2472: LD_INT 0
2474: EQUAL
2475: AND
2476: IFFALSE 2425
// RemoveUnit ( veh ) ;
2478: LD_VAR 0 8
2482: PPUSH
2483: CALL_OW 64
// end ;
2487: LD_VAR 0 1
2491: RET
// every 3 3$00 do
2492: GO 2494
2494: DISABLE
// begin enable ;
2495: ENABLE
// SpawnCargo ;
2496: CALL 1911 0 0
// end ;
2500: END
// export function PrepareDefenders ; var i , tmp ; begin
2501: LD_INT 0
2503: PPUSH
2504: PPUSH
2505: PPUSH
// if defenders then
2506: LD_EXP 20
2510: IFFALSE 2514
// exit ;
2512: GO 2786
// for i = 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
2514: LD_ADDR_VAR 0 2
2518: PUSH
2519: DOUBLE
2520: LD_INT 1
2522: DEC
2523: ST_TO_ADDR
2524: LD_INT 4
2526: PUSH
2527: LD_INT 5
2529: PUSH
2530: LD_INT 6
2532: PUSH
2533: LD_INT 7
2535: PUSH
2536: EMPTY
2537: LIST
2538: LIST
2539: LIST
2540: LIST
2541: PUSH
2542: LD_OWVAR 67
2546: ARRAY
2547: PUSH
2548: FOR_TO
2549: IFFALSE 2688
// begin tmp := Produce ( amfac2 , [ us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_remote , [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ) ;
2551: LD_ADDR_VAR 0 3
2555: PUSH
2556: LD_INT 6
2558: PPUSH
2559: LD_INT 2
2561: PUSH
2562: LD_INT 3
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: PUSH
2569: LD_INT 1
2571: PPUSH
2572: LD_INT 2
2574: PPUSH
2575: CALL_OW 12
2579: ARRAY
2580: PPUSH
2581: LD_INT 1
2583: PUSH
2584: LD_INT 3
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: PUSH
2591: LD_INT 1
2593: PPUSH
2594: LD_INT 2
2596: PPUSH
2597: CALL_OW 12
2601: ARRAY
2602: PPUSH
2603: LD_INT 2
2605: PPUSH
2606: LD_INT 4
2608: PUSH
2609: LD_INT 5
2611: PUSH
2612: LD_INT 9
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: LIST
2619: PUSH
2620: LD_INT 1
2622: PPUSH
2623: LD_INT 3
2625: PPUSH
2626: CALL_OW 12
2630: ARRAY
2631: PPUSH
2632: CALL 37766 0 5
2636: ST_TO_ADDR
// if tmp then
2637: LD_VAR 0 3
2641: IFFALSE 2686
// AddComConstruct ( amfac2 , tmp [ 1 ] , tmp [ 2 ] , tmp [ 3 ] , tmp [ 4 ] ) ;
2643: LD_INT 6
2645: PPUSH
2646: LD_VAR 0 3
2650: PUSH
2651: LD_INT 1
2653: ARRAY
2654: PPUSH
2655: LD_VAR 0 3
2659: PUSH
2660: LD_INT 2
2662: ARRAY
2663: PPUSH
2664: LD_VAR 0 3
2668: PUSH
2669: LD_INT 3
2671: ARRAY
2672: PPUSH
2673: LD_VAR 0 3
2677: PUSH
2678: LD_INT 4
2680: ARRAY
2681: PPUSH
2682: CALL_OW 185
// end ;
2686: GO 2548
2688: POP
2689: POP
// repeat wait ( 0 0$1 ) ;
2690: LD_INT 35
2692: PPUSH
2693: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
2697: LD_INT 22
2699: PUSH
2700: LD_INT 1
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: PUSH
2707: LD_INT 33
2709: PUSH
2710: LD_INT 2
2712: PUSH
2713: EMPTY
2714: LIST
2715: LIST
2716: PUSH
2717: EMPTY
2718: LIST
2719: LIST
2720: PPUSH
2721: CALL_OW 69
2725: PUSH
2726: LD_INT 4
2728: PUSH
2729: LD_INT 5
2731: PUSH
2732: LD_INT 6
2734: PUSH
2735: LD_INT 7
2737: PUSH
2738: EMPTY
2739: LIST
2740: LIST
2741: LIST
2742: LIST
2743: PUSH
2744: LD_OWVAR 67
2748: ARRAY
2749: GREATEREQUAL
2750: IFFALSE 2690
// defenders := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ;
2752: LD_ADDR_EXP 20
2756: PUSH
2757: LD_INT 22
2759: PUSH
2760: LD_INT 1
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: PUSH
2767: LD_INT 33
2769: PUSH
2770: LD_INT 2
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: PUSH
2777: EMPTY
2778: LIST
2779: LIST
2780: PPUSH
2781: CALL_OW 69
2785: ST_TO_ADDR
// end ;
2786: LD_VAR 0 1
2790: RET
// export function Defend ; var i , un , veh , tmp ; begin
2791: LD_INT 0
2793: PPUSH
2794: PPUSH
2795: PPUSH
2796: PPUSH
2797: PPUSH
// defcon_wave := defcon_wave + 1 ;
2798: LD_ADDR_EXP 22
2802: PUSH
2803: LD_EXP 22
2807: PUSH
2808: LD_INT 1
2810: PLUS
2811: ST_TO_ADDR
// if not defenders then
2812: LD_EXP 20
2816: NOT
2817: IFFALSE 2823
// PrepareDefenders ;
2819: CALL 2501 0 0
// if defcon_wave > 1 then
2823: LD_EXP 22
2827: PUSH
2828: LD_INT 1
2830: GREATER
2831: IFFALSE 3089
// begin for i = 1 to defcon_wave + 2 do
2833: LD_ADDR_VAR 0 2
2837: PUSH
2838: DOUBLE
2839: LD_INT 1
2841: DEC
2842: ST_TO_ADDR
2843: LD_EXP 22
2847: PUSH
2848: LD_INT 2
2850: PLUS
2851: PUSH
2852: FOR_TO
2853: IFFALSE 2995
// begin uc_side := 1 ;
2855: LD_ADDR_OWVAR 20
2859: PUSH
2860: LD_INT 1
2862: ST_TO_ADDR
// uc_nation := 1 ;
2863: LD_ADDR_OWVAR 21
2867: PUSH
2868: LD_INT 1
2870: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_siberite , control_manual , [ us_gatling_gun , us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
2871: LD_INT 4
2873: PPUSH
2874: LD_INT 3
2876: PPUSH
2877: LD_INT 1
2879: PPUSH
2880: LD_INT 4
2882: PUSH
2883: LD_INT 6
2885: PUSH
2886: LD_INT 7
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: LIST
2893: PUSH
2894: LD_INT 1
2896: PPUSH
2897: LD_INT 3
2899: PPUSH
2900: CALL_OW 12
2904: ARRAY
2905: PPUSH
2906: LD_INT 100
2908: PPUSH
2909: CALL 40148 0 5
// veh := CreateVehicle ;
2913: LD_ADDR_VAR 0 4
2917: PUSH
2918: CALL_OW 45
2922: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2923: LD_VAR 0 4
2927: PPUSH
2928: LD_INT 1
2930: PPUSH
2931: CALL_OW 233
// defenders := defenders ^ veh ;
2935: LD_ADDR_EXP 20
2939: PUSH
2940: LD_EXP 20
2944: PUSH
2945: LD_VAR 0 4
2949: ADD
2950: ST_TO_ADDR
// PrepareHuman ( false , 3 , 9 ) ;
2951: LD_INT 0
2953: PPUSH
2954: LD_INT 3
2956: PPUSH
2957: LD_INT 9
2959: PPUSH
2960: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2964: CALL_OW 44
2968: PPUSH
2969: LD_VAR 0 4
2973: PPUSH
2974: CALL_OW 52
// PlaceUnitArea ( veh , west_spawn , false ) ;
2978: LD_VAR 0 4
2982: PPUSH
2983: LD_INT 25
2985: PPUSH
2986: LD_INT 0
2988: PPUSH
2989: CALL_OW 49
// end ;
2993: GO 2852
2995: POP
2996: POP
// for i = 1 to defcon_wave do
2997: LD_ADDR_VAR 0 2
3001: PUSH
3002: DOUBLE
3003: LD_INT 1
3005: DEC
3006: ST_TO_ADDR
3007: LD_EXP 22
3011: PUSH
3012: FOR_TO
3013: IFFALSE 3087
// begin uc_side := 1 ;
3015: LD_ADDR_OWVAR 20
3019: PUSH
3020: LD_INT 1
3022: ST_TO_ADDR
// uc_nation := 1 ;
3023: LD_ADDR_OWVAR 21
3027: PUSH
3028: LD_INT 1
3030: ST_TO_ADDR
// PrepareHuman ( false , 5 , 9 ) ;
3031: LD_INT 0
3033: PPUSH
3034: LD_INT 5
3036: PPUSH
3037: LD_INT 9
3039: PPUSH
3040: CALL_OW 380
// un := CreateHuman ;
3044: LD_ADDR_VAR 0 3
3048: PUSH
3049: CALL_OW 44
3053: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
3054: LD_VAR 0 3
3058: PPUSH
3059: LD_INT 25
3061: PPUSH
3062: LD_INT 0
3064: PPUSH
3065: CALL_OW 49
// defenders := defenders ^ un ;
3069: LD_ADDR_EXP 20
3073: PUSH
3074: LD_EXP 20
3078: PUSH
3079: LD_VAR 0 3
3083: ADD
3084: ST_TO_ADDR
// end ;
3085: GO 3012
3087: POP
3088: POP
// end ; repeat wait ( 0 0$1 ) ;
3089: LD_INT 35
3091: PPUSH
3092: CALL_OW 67
// for i in defenders do
3096: LD_ADDR_VAR 0 2
3100: PUSH
3101: LD_EXP 20
3105: PUSH
3106: FOR_IN
3107: IFFALSE 3189
// begin if defcon and GetDistUnitXY ( i , defcon [ 1 ] , defcon [ 2 ] ) > 10 and not HasTask ( i ) then
3109: LD_EXP 21
3113: PUSH
3114: LD_VAR 0 2
3118: PPUSH
3119: LD_EXP 21
3123: PUSH
3124: LD_INT 1
3126: ARRAY
3127: PPUSH
3128: LD_EXP 21
3132: PUSH
3133: LD_INT 2
3135: ARRAY
3136: PPUSH
3137: CALL_OW 297
3141: PUSH
3142: LD_INT 10
3144: GREATER
3145: AND
3146: PUSH
3147: LD_VAR 0 2
3151: PPUSH
3152: CALL_OW 314
3156: NOT
3157: AND
3158: IFFALSE 3187
// ComAgressiveMove ( i , defcon [ 1 ] , defcon [ 2 ] ) ;
3160: LD_VAR 0 2
3164: PPUSH
3165: LD_EXP 21
3169: PUSH
3170: LD_INT 1
3172: ARRAY
3173: PPUSH
3174: LD_EXP 21
3178: PUSH
3179: LD_INT 2
3181: ARRAY
3182: PPUSH
3183: CALL_OW 114
// end ;
3187: GO 3106
3189: POP
3190: POP
// until not defenders ;
3191: LD_EXP 20
3195: NOT
3196: IFFALSE 3089
// end ;
3198: LD_VAR 0 1
3202: RET
// every 0 0$1 do var radar , i ;
3203: GO 3205
3205: DISABLE
3206: LD_INT 0
3208: PPUSH
3209: PPUSH
// begin uc_side := 1 ;
3210: LD_ADDR_OWVAR 20
3214: PUSH
3215: LD_INT 1
3217: ST_TO_ADDR
// uc_nation := 1 ;
3218: LD_ADDR_OWVAR 21
3222: PUSH
3223: LD_INT 1
3225: ST_TO_ADDR
// PrepareVehicle ( us_light_wheeled , engine_solar , control_computer , us_radar , 100 ) ;
3226: LD_INT 1
3228: PPUSH
3229: LD_INT 2
3231: PPUSH
3232: LD_INT 3
3234: PPUSH
3235: LD_INT 11
3237: PPUSH
3238: LD_INT 100
3240: PPUSH
3241: CALL 40148 0 5
// radar := CreateVehicle ;
3245: LD_ADDR_VAR 0 1
3249: PUSH
3250: CALL_OW 45
3254: ST_TO_ADDR
// SetDir ( radar , 4 ) ;
3255: LD_VAR 0 1
3259: PPUSH
3260: LD_INT 4
3262: PPUSH
3263: CALL_OW 233
// PlaceUnitXY ( radar , 51 , 45 , false ) ;
3267: LD_VAR 0 1
3271: PPUSH
3272: LD_INT 51
3274: PPUSH
3275: LD_INT 45
3277: PPUSH
3278: LD_INT 0
3280: PPUSH
3281: CALL_OW 48
// repeat AddComWait ( radar , 0 0$20 ) ;
3285: LD_VAR 0 1
3289: PPUSH
3290: LD_INT 700
3292: PPUSH
3293: CALL_OW 202
// AddComMoveXY ( radar , 65 , 75 ) ;
3297: LD_VAR 0 1
3301: PPUSH
3302: LD_INT 65
3304: PPUSH
3305: LD_INT 75
3307: PPUSH
3308: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3312: LD_VAR 0 1
3316: PPUSH
3317: LD_INT 350
3319: PPUSH
3320: CALL_OW 202
// AddComMoveXY ( radar , 83 , 87 ) ;
3324: LD_VAR 0 1
3328: PPUSH
3329: LD_INT 83
3331: PPUSH
3332: LD_INT 87
3334: PPUSH
3335: CALL_OW 171
// AddComWait ( radar , 0 0$15 ) ;
3339: LD_VAR 0 1
3343: PPUSH
3344: LD_INT 525
3346: PPUSH
3347: CALL_OW 202
// AddComMoveXY ( radar , 94 , 81 ) ;
3351: LD_VAR 0 1
3355: PPUSH
3356: LD_INT 94
3358: PPUSH
3359: LD_INT 81
3361: PPUSH
3362: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3366: LD_VAR 0 1
3370: PPUSH
3371: LD_INT 350
3373: PPUSH
3374: CALL_OW 202
// AddComMoveXY ( radar , 55 , 48 ) ;
3378: LD_VAR 0 1
3382: PPUSH
3383: LD_INT 55
3385: PPUSH
3386: LD_INT 48
3388: PPUSH
3389: CALL_OW 171
// wait ( 1 1$00 ) ;
3393: LD_INT 2100
3395: PPUSH
3396: CALL_OW 67
// until not IsOk ( radar ) ;
3400: LD_VAR 0 1
3404: PPUSH
3405: CALL_OW 302
3409: NOT
3410: IFFALSE 3285
// end ;
3412: PPOPN 2
3414: END
// every 7 7$30 trigger Difficulty > 1 and extra_patrol do var un ;
3415: LD_OWVAR 67
3419: PUSH
3420: LD_INT 1
3422: GREATER
3423: PUSH
3424: LD_EXP 11
3428: AND
3429: IFFALSE 3651
3431: GO 3433
3433: DISABLE
3434: LD_INT 0
3436: PPUSH
// begin enable ;
3437: ENABLE
// uc_side := 1 ;
3438: LD_ADDR_OWVAR 20
3442: PUSH
3443: LD_INT 1
3445: ST_TO_ADDR
// uc_nation := 1 ;
3446: LD_ADDR_OWVAR 21
3450: PUSH
3451: LD_INT 1
3453: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_gatling_gun , 100 ) ;
3454: LD_INT 5
3456: PPUSH
3457: LD_INT 3
3459: PPUSH
3460: LD_INT 3
3462: PPUSH
3463: LD_INT 4
3465: PPUSH
3466: LD_INT 100
3468: PPUSH
3469: CALL 40148 0 5
// un := CreateVehicle ;
3473: LD_ADDR_VAR 0 1
3477: PUSH
3478: CALL_OW 45
3482: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3483: LD_VAR 0 1
3487: PPUSH
3488: LD_INT 3
3490: PPUSH
3491: CALL_OW 233
// PlaceUnitXY ( un , 155 , 2 , false ) ;
3495: LD_VAR 0 1
3499: PPUSH
3500: LD_INT 155
3502: PPUSH
3503: LD_INT 2
3505: PPUSH
3506: LD_INT 0
3508: PPUSH
3509: CALL_OW 48
// ComAgressiveMove ( un , 169 , 77 ) ;
3513: LD_VAR 0 1
3517: PPUSH
3518: LD_INT 169
3520: PPUSH
3521: LD_INT 77
3523: PPUSH
3524: CALL_OW 114
// AddComWait ( un , 0 0$2 ) ;
3528: LD_VAR 0 1
3532: PPUSH
3533: LD_INT 70
3535: PPUSH
3536: CALL_OW 202
// AddComAgressiveMove ( un , 134 , 62 ) ;
3540: LD_VAR 0 1
3544: PPUSH
3545: LD_INT 134
3547: PPUSH
3548: LD_INT 62
3550: PPUSH
3551: CALL_OW 174
// AddComAgressiveMove ( un , 103 , 42 ) ;
3555: LD_VAR 0 1
3559: PPUSH
3560: LD_INT 103
3562: PPUSH
3563: LD_INT 42
3565: PPUSH
3566: CALL_OW 174
// AddComWait ( un , 0 0$2 ) ;
3570: LD_VAR 0 1
3574: PPUSH
3575: LD_INT 70
3577: PPUSH
3578: CALL_OW 202
// AddComAgressiveMove ( un , 84 , 2 ) ;
3582: LD_VAR 0 1
3586: PPUSH
3587: LD_INT 84
3589: PPUSH
3590: LD_INT 2
3592: PPUSH
3593: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
3597: LD_INT 35
3599: PPUSH
3600: CALL_OW 67
// if IsDead ( un ) then
3604: LD_VAR 0 1
3608: PPUSH
3609: CALL_OW 301
3613: IFFALSE 3625
// begin extra_patrol := false ;
3615: LD_ADDR_EXP 11
3619: PUSH
3620: LD_INT 0
3622: ST_TO_ADDR
// exit ;
3623: GO 3651
// end ; until IsAt ( un , 84 , 2 ) ;
3625: LD_VAR 0 1
3629: PPUSH
3630: LD_INT 84
3632: PPUSH
3633: LD_INT 2
3635: PPUSH
3636: CALL_OW 307
3640: IFFALSE 3597
// RemoveUnit ( un ) ;
3642: LD_VAR 0 1
3646: PPUSH
3647: CALL_OW 64
// end ; end_of_file
3651: PPOPN 1
3653: END
// export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor ; export function PrepareFriends ; var i , tmp , buildings , areas , bunkers , cl ; begin
3654: LD_INT 0
3656: PPUSH
3657: PPUSH
3658: PPUSH
3659: PPUSH
3660: PPUSH
3661: PPUSH
3662: PPUSH
// uc_side := 4 ;
3663: LD_ADDR_OWVAR 20
3667: PUSH
3668: LD_INT 4
3670: ST_TO_ADDR
// uc_nation := 1 ;
3671: LD_ADDR_OWVAR 21
3675: PUSH
3676: LD_INT 1
3678: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 10c_ ) ;
3679: LD_ADDR_EXP 37
3683: PUSH
3684: LD_STRING DeltaDoctor
3686: PPUSH
3687: LD_EXP 1
3691: NOT
3692: PPUSH
3693: LD_STRING 10c_
3695: PPUSH
3696: CALL 35131 0 3
3700: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 10c_ ) ;
3701: LD_ADDR_EXP 36
3705: PUSH
3706: LD_STRING Joan
3708: PPUSH
3709: LD_EXP 1
3713: NOT
3714: PPUSH
3715: LD_STRING 10c_
3717: PPUSH
3718: CALL 35131 0 3
3722: ST_TO_ADDR
// if Joan then
3723: LD_EXP 36
3727: IFFALSE 3758
// friends := Insert ( friends , friends + 1 , Joan ) ;
3729: LD_ADDR_EXP 4
3733: PUSH
3734: LD_EXP 4
3738: PPUSH
3739: LD_EXP 4
3743: PUSH
3744: LD_INT 1
3746: PLUS
3747: PPUSH
3748: LD_EXP 36
3752: PPUSH
3753: CALL_OW 2
3757: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 10c_ ) ;
3758: LD_ADDR_EXP 35
3762: PUSH
3763: LD_STRING Simms
3765: PPUSH
3766: LD_EXP 1
3770: NOT
3771: PPUSH
3772: LD_STRING 10c_
3774: PPUSH
3775: CALL 35131 0 3
3779: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 11_ ) ;
3780: LD_ADDR_EXP 34
3784: PUSH
3785: LD_STRING Kikuchi
3787: PPUSH
3788: LD_EXP 1
3792: NOT
3793: PPUSH
3794: LD_STRING 11_
3796: PPUSH
3797: CALL 35131 0 3
3801: ST_TO_ADDR
// if Kikuchi then
3802: LD_EXP 34
3806: IFFALSE 3837
// friends := Insert ( friends , friends + 1 , Kikuchi ) ;
3808: LD_ADDR_EXP 4
3812: PUSH
3813: LD_EXP 4
3817: PPUSH
3818: LD_EXP 4
3822: PUSH
3823: LD_INT 1
3825: PLUS
3826: PPUSH
3827: LD_EXP 34
3831: PPUSH
3832: CALL_OW 2
3836: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 11_ ) ;
3837: LD_ADDR_EXP 33
3841: PUSH
3842: LD_STRING Frank
3844: PPUSH
3845: LD_EXP 1
3849: NOT
3850: PPUSH
3851: LD_STRING 11_
3853: PPUSH
3854: CALL 35131 0 3
3858: ST_TO_ADDR
// if Frank then
3859: LD_EXP 33
3863: IFFALSE 3894
// friends := Insert ( friends , friends + 1 , Frank ) ;
3865: LD_ADDR_EXP 4
3869: PUSH
3870: LD_EXP 4
3874: PPUSH
3875: LD_EXP 4
3879: PUSH
3880: LD_INT 1
3882: PLUS
3883: PPUSH
3884: LD_EXP 33
3888: PPUSH
3889: CALL_OW 2
3893: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , 11_ ) ;
3894: LD_ADDR_EXP 32
3898: PUSH
3899: LD_STRING Gary
3901: PPUSH
3902: LD_EXP 1
3906: NOT
3907: PPUSH
3908: LD_STRING 11_
3910: PPUSH
3911: CALL 35131 0 3
3915: ST_TO_ADDR
// if Gary then
3916: LD_EXP 32
3920: IFFALSE 3951
// friends := Insert ( friends , friends + 1 , Gary ) ;
3922: LD_ADDR_EXP 4
3926: PUSH
3927: LD_EXP 4
3931: PPUSH
3932: LD_EXP 4
3936: PUSH
3937: LD_INT 1
3939: PLUS
3940: PPUSH
3941: LD_EXP 32
3945: PPUSH
3946: CALL_OW 2
3950: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , ( not debug ) , 11_ ) ;
3951: LD_ADDR_EXP 31
3955: PUSH
3956: LD_STRING Cornell
3958: PPUSH
3959: LD_EXP 1
3963: NOT
3964: PPUSH
3965: LD_STRING 11_
3967: PPUSH
3968: CALL 35131 0 3
3972: ST_TO_ADDR
// if Cornel then
3973: LD_EXP 31
3977: IFFALSE 4008
// friends := Insert ( friends , friends + 1 , Cornel ) ;
3979: LD_ADDR_EXP 4
3983: PUSH
3984: LD_EXP 4
3988: PPUSH
3989: LD_EXP 4
3993: PUSH
3994: LD_INT 1
3996: PLUS
3997: PPUSH
3998: LD_EXP 31
4002: PPUSH
4003: CALL_OW 2
4007: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , 11_ ) ;
4008: LD_ADDR_EXP 30
4012: PUSH
4013: LD_STRING Houten
4015: PPUSH
4016: LD_EXP 1
4020: NOT
4021: PPUSH
4022: LD_STRING 11_
4024: PPUSH
4025: CALL 35131 0 3
4029: ST_TO_ADDR
// if Houten then
4030: LD_EXP 30
4034: IFFALSE 4065
// friends := Insert ( friends , friends + 1 , Houten ) ;
4036: LD_ADDR_EXP 4
4040: PUSH
4041: LD_EXP 4
4045: PPUSH
4046: LD_EXP 4
4050: PUSH
4051: LD_INT 1
4053: PLUS
4054: PPUSH
4055: LD_EXP 30
4059: PPUSH
4060: CALL_OW 2
4064: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 11_ ) ;
4065: LD_ADDR_EXP 29
4069: PUSH
4070: LD_STRING Gladstone
4072: PPUSH
4073: LD_EXP 1
4077: NOT
4078: PPUSH
4079: LD_STRING 11_
4081: PPUSH
4082: CALL 35131 0 3
4086: ST_TO_ADDR
// if Gladstone then
4087: LD_EXP 29
4091: IFFALSE 4122
// friends := Insert ( friends , friends + 1 , Gladstone ) ;
4093: LD_ADDR_EXP 4
4097: PUSH
4098: LD_EXP 4
4102: PPUSH
4103: LD_EXP 4
4107: PUSH
4108: LD_INT 1
4110: PLUS
4111: PPUSH
4112: LD_EXP 29
4116: PPUSH
4117: CALL_OW 2
4121: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 11_ ) ;
4122: LD_ADDR_EXP 23
4126: PUSH
4127: LD_STRING Lisa
4129: PPUSH
4130: LD_EXP 1
4134: NOT
4135: PPUSH
4136: LD_STRING 11_
4138: PPUSH
4139: CALL 35131 0 3
4143: ST_TO_ADDR
// if Lisa then
4144: LD_EXP 23
4148: IFFALSE 4173
// friends := Insert ( friends , 1 , Lisa ) ;
4150: LD_ADDR_EXP 4
4154: PUSH
4155: LD_EXP 4
4159: PPUSH
4160: LD_INT 1
4162: PPUSH
4163: LD_EXP 23
4167: PPUSH
4168: CALL_OW 2
4172: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 11_ ) ;
4173: LD_ADDR_EXP 24
4177: PUSH
4178: LD_STRING Donaldson
4180: PPUSH
4181: LD_EXP 1
4185: NOT
4186: PPUSH
4187: LD_STRING 11_
4189: PPUSH
4190: CALL 35131 0 3
4194: ST_TO_ADDR
// if Donaldson then
4195: LD_EXP 24
4199: IFFALSE 4230
// friends := Insert ( friends , friends + 1 , Donaldson ) ;
4201: LD_ADDR_EXP 4
4205: PUSH
4206: LD_EXP 4
4210: PPUSH
4211: LD_EXP 4
4215: PUSH
4216: LD_INT 1
4218: PLUS
4219: PPUSH
4220: LD_EXP 24
4224: PPUSH
4225: CALL_OW 2
4229: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 11_ ) ;
4230: LD_ADDR_EXP 25
4234: PUSH
4235: LD_STRING Bobby
4237: PPUSH
4238: LD_EXP 1
4242: NOT
4243: PPUSH
4244: LD_STRING 11_
4246: PPUSH
4247: CALL 35131 0 3
4251: ST_TO_ADDR
// if Bobby then
4252: LD_EXP 25
4256: IFFALSE 4287
// friends := Insert ( friends , friends + 1 , Bobby ) ;
4258: LD_ADDR_EXP 4
4262: PUSH
4263: LD_EXP 4
4267: PPUSH
4268: LD_EXP 4
4272: PUSH
4273: LD_INT 1
4275: PLUS
4276: PPUSH
4277: LD_EXP 25
4281: PPUSH
4282: CALL_OW 2
4286: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 11_ ) ;
4287: LD_ADDR_EXP 26
4291: PUSH
4292: LD_STRING Cyrus
4294: PPUSH
4295: LD_EXP 1
4299: NOT
4300: PPUSH
4301: LD_STRING 11_
4303: PPUSH
4304: CALL 35131 0 3
4308: ST_TO_ADDR
// if Cyrus then
4309: LD_EXP 26
4313: IFFALSE 4344
// friends := Insert ( friends , friends + 1 , Cyrus ) ;
4315: LD_ADDR_EXP 4
4319: PUSH
4320: LD_EXP 4
4324: PPUSH
4325: LD_EXP 4
4329: PUSH
4330: LD_INT 1
4332: PLUS
4333: PPUSH
4334: LD_EXP 26
4338: PPUSH
4339: CALL_OW 2
4343: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 11_ ) ;
4344: LD_ADDR_EXP 27
4348: PUSH
4349: LD_STRING Denis
4351: PPUSH
4352: LD_EXP 1
4356: NOT
4357: PPUSH
4358: LD_STRING 11_
4360: PPUSH
4361: CALL 35131 0 3
4365: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , 11_ ) ;
4366: LD_ADDR_EXP 28
4370: PUSH
4371: LD_STRING Brown
4373: PPUSH
4374: LD_EXP 1
4378: NOT
4379: PPUSH
4380: LD_STRING 11_
4382: PPUSH
4383: CALL 35131 0 3
4387: ST_TO_ADDR
// if Brown then
4388: LD_EXP 28
4392: IFFALSE 4423
// friends := Insert ( friends , friends + 1 , Brown ) ;
4394: LD_ADDR_EXP 4
4398: PUSH
4399: LD_EXP 4
4403: PPUSH
4404: LD_EXP 4
4408: PUSH
4409: LD_INT 1
4411: PLUS
4412: PPUSH
4413: LD_EXP 28
4417: PPUSH
4418: CALL_OW 2
4422: ST_TO_ADDR
// friends := friends ^ CreateCharacterSet ( 11c_others ) ^ CreateCharacterSet ( 11_others ) ;
4423: LD_ADDR_EXP 4
4427: PUSH
4428: LD_EXP 4
4432: PUSH
4433: LD_STRING 11c_others
4435: PPUSH
4436: CALL_OW 31
4440: ADD
4441: PUSH
4442: LD_STRING 11_others
4444: PPUSH
4445: CALL_OW 31
4449: ADD
4450: ST_TO_ADDR
// if friends < 18 then
4451: LD_EXP 4
4455: PUSH
4456: LD_INT 18
4458: LESS
4459: IFFALSE 4531
// for i = 1 to 18 do
4461: LD_ADDR_VAR 0 2
4465: PUSH
4466: DOUBLE
4467: LD_INT 1
4469: DEC
4470: ST_TO_ADDR
4471: LD_INT 18
4473: PUSH
4474: FOR_TO
4475: IFFALSE 4529
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 7 ) ;
4477: LD_INT 0
4479: PPUSH
4480: LD_INT 1
4482: PPUSH
4483: LD_INT 4
4485: PPUSH
4486: CALL_OW 12
4490: PPUSH
4491: LD_INT 7
4493: PPUSH
4494: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
4498: LD_ADDR_EXP 4
4502: PUSH
4503: LD_EXP 4
4507: PPUSH
4508: LD_EXP 4
4512: PUSH
4513: LD_INT 1
4515: PLUS
4516: PPUSH
4517: CALL_OW 44
4521: PPUSH
4522: CALL_OW 2
4526: ST_TO_ADDR
// end ;
4527: GO 4474
4529: POP
4530: POP
// for i in friends do
4531: LD_ADDR_VAR 0 2
4535: PUSH
4536: LD_EXP 4
4540: PUSH
4541: FOR_IN
4542: IFFALSE 4600
// if GetSkill ( i , 1 ) >= GetSkill ( i , 4 ) then
4544: LD_VAR 0 2
4548: PPUSH
4549: LD_INT 1
4551: PPUSH
4552: CALL_OW 259
4556: PUSH
4557: LD_VAR 0 2
4561: PPUSH
4562: LD_INT 4
4564: PPUSH
4565: CALL_OW 259
4569: GREATEREQUAL
4570: IFFALSE 4586
// SetClass ( i , class_soldier ) else
4572: LD_VAR 0 2
4576: PPUSH
4577: LD_INT 1
4579: PPUSH
4580: CALL_OW 336
4584: GO 4598
// SetClass ( i , class_scientistic ) ;
4586: LD_VAR 0 2
4590: PPUSH
4591: LD_INT 4
4593: PPUSH
4594: CALL_OW 336
4598: GO 4541
4600: POP
4601: POP
// if Frank then
4602: LD_EXP 33
4606: IFFALSE 4620
// SetClass ( Frank , class_sniper ) ;
4608: LD_EXP 33
4612: PPUSH
4613: LD_INT 5
4615: PPUSH
4616: CALL_OW 336
// SetClass ( [ Joan , Denis , DeltaDoctor , Simms ] , class_scientistic ) ;
4620: LD_EXP 36
4624: PUSH
4625: LD_EXP 27
4629: PUSH
4630: LD_EXP 37
4634: PUSH
4635: LD_EXP 35
4639: PUSH
4640: EMPTY
4641: LIST
4642: LIST
4643: LIST
4644: LIST
4645: PPUSH
4646: LD_INT 4
4648: PPUSH
4649: CALL_OW 336
// selected = CharacterSelection (  , 7 , 7 , [ sel_dont_change_class , JMM , Roth , Simms , Denis , DeltaDoctor , sel_not_hired , sel_changeable , sel_change_class ] ^ friends , [ class_soldier , [ class_scientistic , 2 ] , [ class_sniper , 0 , 3 ] ] ) ;
4653: LD_ADDR_EXP 3
4657: PUSH
4658: LD_STRING 
4660: PPUSH
4661: LD_INT 7
4663: PPUSH
4664: LD_INT 7
4666: PPUSH
4667: LD_INT -6
4669: PUSH
4670: LD_EXP 14
4674: PUSH
4675: LD_EXP 15
4679: PUSH
4680: LD_EXP 35
4684: PUSH
4685: LD_EXP 27
4689: PUSH
4690: LD_EXP 37
4694: PUSH
4695: LD_INT -2
4697: PUSH
4698: LD_INT -3
4700: PUSH
4701: LD_INT -5
4703: PUSH
4704: EMPTY
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: LIST
4714: PUSH
4715: LD_EXP 4
4719: ADD
4720: PPUSH
4721: LD_INT 1
4723: PUSH
4724: LD_INT 4
4726: PUSH
4727: LD_INT 2
4729: PUSH
4730: EMPTY
4731: LIST
4732: LIST
4733: PUSH
4734: LD_INT 5
4736: PUSH
4737: LD_INT 0
4739: PUSH
4740: LD_INT 3
4742: PUSH
4743: EMPTY
4744: LIST
4745: LIST
4746: LIST
4747: PUSH
4748: EMPTY
4749: LIST
4750: LIST
4751: LIST
4752: PPUSH
4753: CALL_OW 42
4757: ST_TO_ADDR
// if Simms then
4758: LD_EXP 35
4762: IFFALSE 4780
// selected := selected ^ Simms ;
4764: LD_ADDR_EXP 3
4768: PUSH
4769: LD_EXP 3
4773: PUSH
4774: LD_EXP 35
4778: ADD
4779: ST_TO_ADDR
// if Denis then
4780: LD_EXP 27
4784: IFFALSE 4802
// selected := selected ^ Denis ;
4786: LD_ADDR_EXP 3
4790: PUSH
4791: LD_EXP 3
4795: PUSH
4796: LD_EXP 27
4800: ADD
4801: ST_TO_ADDR
// if DeltaDoctor then
4802: LD_EXP 37
4806: IFFALSE 4824
// selected := selected ^ DeltaDoctor ;
4808: LD_ADDR_EXP 3
4812: PUSH
4813: LD_EXP 3
4817: PUSH
4818: LD_EXP 37
4822: ADD
4823: ST_TO_ADDR
// friends := friends diff selected ;
4824: LD_ADDR_EXP 4
4828: PUSH
4829: LD_EXP 4
4833: PUSH
4834: LD_EXP 3
4838: DIFF
4839: ST_TO_ADDR
// buildings := [ [ ambar1 , ambar2 , ambar3 ] , [ amlab2 , amlab3 , amlab4 ] ] ;
4840: LD_ADDR_VAR 0 4
4844: PUSH
4845: LD_INT 111
4847: PUSH
4848: LD_INT 137
4850: PUSH
4851: LD_INT 51
4853: PUSH
4854: EMPTY
4855: LIST
4856: LIST
4857: LIST
4858: PUSH
4859: LD_INT 147
4861: PUSH
4862: LD_INT 129
4864: PUSH
4865: LD_INT 25
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: LIST
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: ST_TO_ADDR
// areas := [ friends_spawn_1 , friends_spawn_2 , friends_spawn_3 , friends_spawn_4 , friends_spawn_5 , friends_spawn_6 ] ;
4877: LD_ADDR_VAR 0 5
4881: PUSH
4882: LD_INT 5
4884: PUSH
4885: LD_INT 6
4887: PUSH
4888: LD_INT 7
4890: PUSH
4891: LD_INT 8
4893: PUSH
4894: LD_INT 17
4896: PUSH
4897: LD_INT 18
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: LIST
4904: LIST
4905: LIST
4906: LIST
4907: ST_TO_ADDR
// for i in buildings do
4908: LD_ADDR_VAR 0 2
4912: PUSH
4913: LD_VAR 0 4
4917: PUSH
4918: FOR_IN
4919: IFFALSE 4935
// SetSide ( i , 4 ) ;
4921: LD_VAR 0 2
4925: PPUSH
4926: LD_INT 4
4928: PPUSH
4929: CALL_OW 235
4933: GO 4918
4935: POP
4936: POP
// for i in selected do
4937: LD_ADDR_VAR 0 2
4941: PUSH
4942: LD_EXP 3
4946: PUSH
4947: FOR_IN
4948: IFFALSE 5288
// begin if GetClass ( i ) in [ 1 , 5 ] then
4950: LD_VAR 0 2
4954: PPUSH
4955: CALL_OW 257
4959: PUSH
4960: LD_INT 1
4962: PUSH
4963: LD_INT 5
4965: PUSH
4966: EMPTY
4967: LIST
4968: LIST
4969: IN
4970: IFFALSE 5130
// begin if buildings [ 1 ] then
4972: LD_VAR 0 4
4976: PUSH
4977: LD_INT 1
4979: ARRAY
4980: IFFALSE 5041
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
4982: LD_VAR 0 2
4986: PPUSH
4987: LD_VAR 0 4
4991: PUSH
4992: LD_INT 1
4994: ARRAY
4995: PUSH
4996: LD_INT 1
4998: ARRAY
4999: PPUSH
5000: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
5004: LD_ADDR_VAR 0 4
5008: PUSH
5009: LD_VAR 0 4
5013: PPUSH
5014: LD_INT 1
5016: PPUSH
5017: LD_VAR 0 4
5021: PUSH
5022: LD_INT 1
5024: ARRAY
5025: PPUSH
5026: LD_INT 1
5028: PPUSH
5029: CALL_OW 3
5033: PPUSH
5034: CALL_OW 1
5038: ST_TO_ADDR
// end else
5039: GO 5128
// begin if not areas then
5041: LD_VAR 0 5
5045: NOT
5046: IFFALSE 5080
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5048: LD_VAR 0 2
5052: PPUSH
5053: LD_INT 87
5055: PPUSH
5056: LD_INT 68
5058: PPUSH
5059: LD_INT 8
5061: PPUSH
5062: LD_INT 0
5064: PPUSH
5065: CALL_OW 50
// ComHold ( i ) ;
5069: LD_VAR 0 2
5073: PPUSH
5074: CALL_OW 140
// end else
5078: GO 5128
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5080: LD_VAR 0 2
5084: PPUSH
5085: LD_VAR 0 5
5089: PUSH
5090: LD_INT 1
5092: ARRAY
5093: PPUSH
5094: LD_INT 0
5096: PPUSH
5097: CALL_OW 49
// ComHold ( i ) ;
5101: LD_VAR 0 2
5105: PPUSH
5106: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5110: LD_ADDR_VAR 0 5
5114: PUSH
5115: LD_VAR 0 5
5119: PPUSH
5120: LD_INT 1
5122: PPUSH
5123: CALL_OW 3
5127: ST_TO_ADDR
// end ; end ; end else
5128: GO 5286
// begin if buildings [ 2 ] then
5130: LD_VAR 0 4
5134: PUSH
5135: LD_INT 2
5137: ARRAY
5138: IFFALSE 5199
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
5140: LD_VAR 0 2
5144: PPUSH
5145: LD_VAR 0 4
5149: PUSH
5150: LD_INT 2
5152: ARRAY
5153: PUSH
5154: LD_INT 1
5156: ARRAY
5157: PPUSH
5158: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
5162: LD_ADDR_VAR 0 4
5166: PUSH
5167: LD_VAR 0 4
5171: PPUSH
5172: LD_INT 2
5174: PPUSH
5175: LD_VAR 0 4
5179: PUSH
5180: LD_INT 2
5182: ARRAY
5183: PPUSH
5184: LD_INT 1
5186: PPUSH
5187: CALL_OW 3
5191: PPUSH
5192: CALL_OW 1
5196: ST_TO_ADDR
// end else
5197: GO 5286
// begin if not areas then
5199: LD_VAR 0 5
5203: NOT
5204: IFFALSE 5238
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5206: LD_VAR 0 2
5210: PPUSH
5211: LD_INT 87
5213: PPUSH
5214: LD_INT 68
5216: PPUSH
5217: LD_INT 8
5219: PPUSH
5220: LD_INT 0
5222: PPUSH
5223: CALL_OW 50
// ComHold ( i ) ;
5227: LD_VAR 0 2
5231: PPUSH
5232: CALL_OW 140
// end else
5236: GO 5286
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5238: LD_VAR 0 2
5242: PPUSH
5243: LD_VAR 0 5
5247: PUSH
5248: LD_INT 1
5250: ARRAY
5251: PPUSH
5252: LD_INT 0
5254: PPUSH
5255: CALL_OW 49
// ComHold ( i ) ;
5259: LD_VAR 0 2
5263: PPUSH
5264: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5268: LD_ADDR_VAR 0 5
5272: PUSH
5273: LD_VAR 0 5
5277: PPUSH
5278: LD_INT 1
5280: PPUSH
5281: CALL_OW 3
5285: ST_TO_ADDR
// end ; end ; end ; end ;
5286: GO 4947
5288: POP
5289: POP
// bunkers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) ;
5290: LD_ADDR_VAR 0 6
5294: PUSH
5295: LD_INT 22
5297: PUSH
5298: LD_INT 1
5300: PUSH
5301: EMPTY
5302: LIST
5303: LIST
5304: PUSH
5305: LD_INT 30
5307: PUSH
5308: LD_INT 32
5310: PUSH
5311: EMPTY
5312: LIST
5313: LIST
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: PPUSH
5319: CALL_OW 69
5323: ST_TO_ADDR
// for i = bunkers - friends downto 1 do
5324: LD_ADDR_VAR 0 2
5328: PUSH
5329: DOUBLE
5330: LD_VAR 0 6
5334: PUSH
5335: LD_EXP 4
5339: MINUS
5340: INC
5341: ST_TO_ADDR
5342: LD_INT 1
5344: PUSH
5345: FOR_DOWNTO
5346: IFFALSE 5413
// begin PrepareHuman ( false , 1 , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
5348: LD_INT 0
5350: PPUSH
5351: LD_INT 1
5353: PPUSH
5354: LD_INT 7
5356: PUSH
5357: LD_INT 8
5359: PUSH
5360: LD_INT 9
5362: PUSH
5363: LD_INT 10
5365: PUSH
5366: EMPTY
5367: LIST
5368: LIST
5369: LIST
5370: LIST
5371: PUSH
5372: LD_OWVAR 67
5376: ARRAY
5377: PPUSH
5378: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
5382: LD_ADDR_EXP 4
5386: PUSH
5387: LD_EXP 4
5391: PPUSH
5392: LD_EXP 4
5396: PUSH
5397: LD_INT 1
5399: PLUS
5400: PPUSH
5401: CALL_OW 44
5405: PPUSH
5406: CALL_OW 2
5410: ST_TO_ADDR
// end ;
5411: GO 5345
5413: POP
5414: POP
// if friends then
5415: LD_EXP 4
5419: IFFALSE 5535
// begin tmp := friends ;
5421: LD_ADDR_VAR 0 3
5425: PUSH
5426: LD_EXP 4
5430: ST_TO_ADDR
// for i = 1 to bunkers do
5431: LD_ADDR_VAR 0 2
5435: PUSH
5436: DOUBLE
5437: LD_INT 1
5439: DEC
5440: ST_TO_ADDR
5441: LD_VAR 0 6
5445: PUSH
5446: FOR_TO
5447: IFFALSE 5533
// begin SetSide ( tmp [ tmp ] , 1 ) ;
5449: LD_VAR 0 3
5453: PUSH
5454: LD_VAR 0 3
5458: ARRAY
5459: PPUSH
5460: LD_INT 1
5462: PPUSH
5463: CALL_OW 235
// SetClass ( tmp [ tmp ] , 1 ) ;
5467: LD_VAR 0 3
5471: PUSH
5472: LD_VAR 0 3
5476: ARRAY
5477: PPUSH
5478: LD_INT 1
5480: PPUSH
5481: CALL_OW 336
// PlaceHumanInUnit ( tmp [ tmp ] , bunkers [ i ] ) ;
5485: LD_VAR 0 3
5489: PUSH
5490: LD_VAR 0 3
5494: ARRAY
5495: PPUSH
5496: LD_VAR 0 6
5500: PUSH
5501: LD_VAR 0 2
5505: ARRAY
5506: PPUSH
5507: CALL_OW 52
// tmp := Delete ( tmp , tmp ) ;
5511: LD_ADDR_VAR 0 3
5515: PUSH
5516: LD_VAR 0 3
5520: PPUSH
5521: LD_VAR 0 3
5525: PPUSH
5526: CALL_OW 3
5530: ST_TO_ADDR
// end ;
5531: GO 5446
5533: POP
5534: POP
// end ; areas := areas union [ guard_spawn_1 , guard_spawn_2 , guard_spawn_3 , guard_spawn_4 , guard_spawn_5 , guard_spawn_6 , guard_spawn_7 , guard_spawn_8 , guard_spawn_9 , guard_spawn_10 , guard_spawn_11 , guard_spawn_12 , guard_spawn_13 , guard_spawn_14 , guard_spawn_15 , guard_spawn_16 , guard_spawn_17 , guard_spawn_18 , guard_spawn_19 , guard_spawn_20 ] ;
5535: LD_ADDR_VAR 0 5
5539: PUSH
5540: LD_VAR 0 5
5544: PUSH
5545: LD_INT 9
5547: PUSH
5548: LD_INT 10
5550: PUSH
5551: LD_INT 11
5553: PUSH
5554: LD_INT 12
5556: PUSH
5557: LD_INT 13
5559: PUSH
5560: LD_INT 14
5562: PUSH
5563: LD_INT 15
5565: PUSH
5566: LD_INT 16
5568: PUSH
5569: LD_INT 26
5571: PUSH
5572: LD_INT 27
5574: PUSH
5575: LD_INT 28
5577: PUSH
5578: LD_INT 29
5580: PUSH
5581: LD_INT 30
5583: PUSH
5584: LD_INT 31
5586: PUSH
5587: LD_INT 32
5589: PUSH
5590: LD_INT 33
5592: PUSH
5593: LD_INT 34
5595: PUSH
5596: LD_INT 35
5598: PUSH
5599: LD_INT 36
5601: PUSH
5602: LD_INT 37
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: LIST
5609: LIST
5610: LIST
5611: LIST
5612: LIST
5613: LIST
5614: LIST
5615: LIST
5616: LIST
5617: LIST
5618: LIST
5619: LIST
5620: LIST
5621: LIST
5622: LIST
5623: LIST
5624: LIST
5625: LIST
5626: UNION
5627: ST_TO_ADDR
// for i in friends do
5628: LD_ADDR_VAR 0 2
5632: PUSH
5633: LD_EXP 4
5637: PUSH
5638: FOR_IN
5639: IFFALSE 5926
// begin SetTag ( i , 2 ) ;
5641: LD_VAR 0 2
5645: PPUSH
5646: LD_INT 2
5648: PPUSH
5649: CALL_OW 109
// if not GetClass ( i ) in [ class_soldier , class_scientistic , class_sniper ] then
5653: LD_VAR 0 2
5657: PPUSH
5658: CALL_OW 257
5662: PUSH
5663: LD_INT 1
5665: PUSH
5666: LD_INT 4
5668: PUSH
5669: LD_INT 5
5671: PUSH
5672: EMPTY
5673: LIST
5674: LIST
5675: LIST
5676: IN
5677: NOT
5678: IFFALSE 5692
// SetClass ( i , 1 ) ;
5680: LD_VAR 0 2
5684: PPUSH
5685: LD_INT 1
5687: PPUSH
5688: CALL_OW 336
// if GetClass ( i ) in [ class_soldier , class_sniper ] and buildings [ 1 ] then
5692: LD_VAR 0 2
5696: PPUSH
5697: CALL_OW 257
5701: PUSH
5702: LD_INT 1
5704: PUSH
5705: LD_INT 5
5707: PUSH
5708: EMPTY
5709: LIST
5710: LIST
5711: IN
5712: PUSH
5713: LD_VAR 0 4
5717: PUSH
5718: LD_INT 1
5720: ARRAY
5721: AND
5722: IFFALSE 5783
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
5724: LD_VAR 0 2
5728: PPUSH
5729: LD_VAR 0 4
5733: PUSH
5734: LD_INT 1
5736: ARRAY
5737: PUSH
5738: LD_INT 1
5740: ARRAY
5741: PPUSH
5742: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
5746: LD_ADDR_VAR 0 4
5750: PUSH
5751: LD_VAR 0 4
5755: PPUSH
5756: LD_INT 1
5758: PPUSH
5759: LD_VAR 0 4
5763: PUSH
5764: LD_INT 1
5766: ARRAY
5767: PPUSH
5768: LD_INT 1
5770: PPUSH
5771: CALL_OW 3
5775: PPUSH
5776: CALL_OW 1
5780: ST_TO_ADDR
// continue ;
5781: GO 5638
// end ; if GetClass ( i ) = class_scientistic and buildings [ 2 ] then
5783: LD_VAR 0 2
5787: PPUSH
5788: CALL_OW 257
5792: PUSH
5793: LD_INT 4
5795: EQUAL
5796: PUSH
5797: LD_VAR 0 4
5801: PUSH
5802: LD_INT 2
5804: ARRAY
5805: AND
5806: IFFALSE 5867
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
5808: LD_VAR 0 2
5812: PPUSH
5813: LD_VAR 0 4
5817: PUSH
5818: LD_INT 2
5820: ARRAY
5821: PUSH
5822: LD_INT 1
5824: ARRAY
5825: PPUSH
5826: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
5830: LD_ADDR_VAR 0 4
5834: PUSH
5835: LD_VAR 0 4
5839: PPUSH
5840: LD_INT 2
5842: PPUSH
5843: LD_VAR 0 4
5847: PUSH
5848: LD_INT 2
5850: ARRAY
5851: PPUSH
5852: LD_INT 1
5854: PPUSH
5855: CALL_OW 3
5859: PPUSH
5860: CALL_OW 1
5864: ST_TO_ADDR
// continue ;
5865: GO 5638
// end ; PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5867: LD_VAR 0 2
5871: PPUSH
5872: LD_VAR 0 5
5876: PUSH
5877: LD_INT 1
5879: ARRAY
5880: PPUSH
5881: LD_INT 0
5883: PPUSH
5884: CALL_OW 49
// areas := Delete ( areas , 1 ) ;
5888: LD_ADDR_VAR 0 5
5892: PUSH
5893: LD_VAR 0 5
5897: PPUSH
5898: LD_INT 1
5900: PPUSH
5901: CALL_OW 3
5905: ST_TO_ADDR
// ComHold ( i ) ;
5906: LD_VAR 0 2
5910: PPUSH
5911: CALL_OW 140
// if not areas then
5915: LD_VAR 0 5
5919: NOT
5920: IFFALSE 5924
// break ;
5922: GO 5926
// end ;
5924: GO 5638
5926: POP
5927: POP
// if UnitFilter ( friends , [ f_not , [ f_placed ] ] ) then
5928: LD_EXP 4
5932: PPUSH
5933: LD_INT 3
5935: PUSH
5936: LD_INT 52
5938: PUSH
5939: EMPTY
5940: LIST
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: PPUSH
5946: CALL_OW 72
5950: IFFALSE 6017
// for i in UnitFilter ( friends , [ f_not , [ f_placed ] ] ) do
5952: LD_ADDR_VAR 0 2
5956: PUSH
5957: LD_EXP 4
5961: PPUSH
5962: LD_INT 3
5964: PUSH
5965: LD_INT 52
5967: PUSH
5968: EMPTY
5969: LIST
5970: PUSH
5971: EMPTY
5972: LIST
5973: LIST
5974: PPUSH
5975: CALL_OW 72
5979: PUSH
5980: FOR_IN
5981: IFFALSE 6015
// begin PlaceUnitXYR ( i , 65 , 58 , 7 , false ) ;
5983: LD_VAR 0 2
5987: PPUSH
5988: LD_INT 65
5990: PPUSH
5991: LD_INT 58
5993: PPUSH
5994: LD_INT 7
5996: PPUSH
5997: LD_INT 0
5999: PPUSH
6000: CALL_OW 50
// ComHold ( i ) ;
6004: LD_VAR 0 2
6008: PPUSH
6009: CALL_OW 140
// end ;
6013: GO 5980
6015: POP
6016: POP
// if Frank then
6017: LD_EXP 33
6021: IFFALSE 6035
// SetClass ( Frank , class_sniper ) ;
6023: LD_EXP 33
6027: PPUSH
6028: LD_INT 5
6030: PPUSH
6031: CALL_OW 336
// end ; end_of_file
6035: LD_VAR 0 1
6039: RET
// export function CanSayRand ( side ) ; begin
6040: LD_INT 0
6042: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6043: LD_ADDR_VAR 0 2
6047: PUSH
6048: LD_INT 52
6050: PUSH
6051: EMPTY
6052: LIST
6053: PUSH
6054: LD_INT 22
6056: PUSH
6057: LD_VAR 0 1
6061: PUSH
6062: EMPTY
6063: LIST
6064: LIST
6065: PUSH
6066: LD_INT 2
6068: PUSH
6069: LD_INT 25
6071: PUSH
6072: LD_INT 1
6074: PUSH
6075: EMPTY
6076: LIST
6077: LIST
6078: PUSH
6079: LD_INT 25
6081: PUSH
6082: LD_INT 2
6084: PUSH
6085: EMPTY
6086: LIST
6087: LIST
6088: PUSH
6089: LD_INT 25
6091: PUSH
6092: LD_INT 3
6094: PUSH
6095: EMPTY
6096: LIST
6097: LIST
6098: PUSH
6099: LD_INT 25
6101: PUSH
6102: LD_INT 4
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: PUSH
6109: EMPTY
6110: LIST
6111: LIST
6112: LIST
6113: LIST
6114: LIST
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: LIST
6120: PPUSH
6121: CALL_OW 69
6125: PUSH
6126: LD_EXP 14
6130: PUSH
6131: LD_EXP 33
6135: PUSH
6136: LD_EXP 23
6140: PUSH
6141: LD_EXP 24
6145: PUSH
6146: LD_EXP 25
6150: PUSH
6151: LD_EXP 26
6155: PUSH
6156: LD_EXP 27
6160: PUSH
6161: LD_EXP 28
6165: PUSH
6166: LD_EXP 29
6170: PUSH
6171: LD_EXP 30
6175: PUSH
6176: LD_EXP 16
6180: PUSH
6181: LD_EXP 31
6185: PUSH
6186: LD_EXP 32
6190: PUSH
6191: LD_EXP 34
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: LIST
6202: LIST
6203: LIST
6204: LIST
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: LIST
6211: DIFF
6212: ST_TO_ADDR
// end ;
6213: LD_VAR 0 2
6217: RET
// export function SayRand ( sex , dial ) ; begin
6218: LD_INT 0
6220: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6221: LD_ADDR_VAR 0 3
6225: PUSH
6226: LD_INT 52
6228: PUSH
6229: EMPTY
6230: LIST
6231: PUSH
6232: LD_INT 22
6234: PUSH
6235: LD_INT 1
6237: PUSH
6238: EMPTY
6239: LIST
6240: LIST
6241: PUSH
6242: LD_INT 26
6244: PUSH
6245: LD_VAR 0 1
6249: PUSH
6250: EMPTY
6251: LIST
6252: LIST
6253: PUSH
6254: LD_INT 2
6256: PUSH
6257: LD_INT 25
6259: PUSH
6260: LD_INT 1
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: PUSH
6267: LD_INT 25
6269: PUSH
6270: LD_INT 2
6272: PUSH
6273: EMPTY
6274: LIST
6275: LIST
6276: PUSH
6277: LD_INT 25
6279: PUSH
6280: LD_INT 3
6282: PUSH
6283: EMPTY
6284: LIST
6285: LIST
6286: PUSH
6287: LD_INT 25
6289: PUSH
6290: LD_INT 4
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: LIST
6308: LIST
6309: PPUSH
6310: CALL_OW 69
6314: PUSH
6315: LD_EXP 14
6319: PUSH
6320: LD_EXP 33
6324: PUSH
6325: LD_EXP 23
6329: PUSH
6330: LD_EXP 24
6334: PUSH
6335: LD_EXP 25
6339: PUSH
6340: LD_EXP 26
6344: PUSH
6345: LD_EXP 27
6349: PUSH
6350: LD_EXP 28
6354: PUSH
6355: LD_EXP 29
6359: PUSH
6360: LD_EXP 30
6364: PUSH
6365: LD_EXP 16
6369: PUSH
6370: LD_EXP 31
6374: PUSH
6375: LD_EXP 32
6379: PUSH
6380: LD_EXP 34
6384: PUSH
6385: EMPTY
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: LIST
6396: LIST
6397: LIST
6398: LIST
6399: LIST
6400: DIFF
6401: ST_TO_ADDR
// if not result then
6402: LD_VAR 0 3
6406: NOT
6407: IFFALSE 6411
// exit ;
6409: GO 6439
// result := result [ 1 ] ;
6411: LD_ADDR_VAR 0 3
6415: PUSH
6416: LD_VAR 0 3
6420: PUSH
6421: LD_INT 1
6423: ARRAY
6424: ST_TO_ADDR
// Say ( result , dial ) ;
6425: LD_VAR 0 3
6429: PPUSH
6430: LD_VAR 0 2
6434: PPUSH
6435: CALL_OW 88
// end ;
6439: LD_VAR 0 3
6443: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
6444: LD_INT 0
6446: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
6447: LD_ADDR_VAR 0 4
6451: PUSH
6452: LD_INT 22
6454: PUSH
6455: LD_INT 1
6457: PUSH
6458: EMPTY
6459: LIST
6460: LIST
6461: PUSH
6462: LD_INT 26
6464: PUSH
6465: LD_VAR 0 1
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: PUSH
6474: LD_INT 2
6476: PUSH
6477: LD_INT 25
6479: PUSH
6480: LD_INT 1
6482: PUSH
6483: EMPTY
6484: LIST
6485: LIST
6486: PUSH
6487: LD_INT 25
6489: PUSH
6490: LD_INT 2
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: PUSH
6497: LD_INT 25
6499: PUSH
6500: LD_INT 3
6502: PUSH
6503: EMPTY
6504: LIST
6505: LIST
6506: PUSH
6507: LD_INT 25
6509: PUSH
6510: LD_INT 4
6512: PUSH
6513: EMPTY
6514: LIST
6515: LIST
6516: PUSH
6517: EMPTY
6518: LIST
6519: LIST
6520: LIST
6521: LIST
6522: LIST
6523: PUSH
6524: EMPTY
6525: LIST
6526: LIST
6527: LIST
6528: PPUSH
6529: CALL_OW 69
6533: PUSH
6534: LD_EXP 14
6538: PUSH
6539: LD_EXP 33
6543: PUSH
6544: LD_EXP 23
6548: PUSH
6549: LD_EXP 24
6553: PUSH
6554: LD_EXP 25
6558: PUSH
6559: LD_EXP 26
6563: PUSH
6564: LD_EXP 27
6568: PUSH
6569: LD_EXP 28
6573: PUSH
6574: LD_EXP 29
6578: PUSH
6579: LD_EXP 30
6583: PUSH
6584: LD_EXP 16
6588: PUSH
6589: LD_EXP 31
6593: PUSH
6594: LD_EXP 32
6598: PUSH
6599: LD_EXP 34
6603: PUSH
6604: EMPTY
6605: LIST
6606: LIST
6607: LIST
6608: LIST
6609: LIST
6610: LIST
6611: LIST
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: PUSH
6620: LD_VAR 0 3
6624: ADD
6625: DIFF
6626: ST_TO_ADDR
// if not result then
6627: LD_VAR 0 4
6631: NOT
6632: IFFALSE 6636
// exit ;
6634: GO 6664
// result := result [ 1 ] ;
6636: LD_ADDR_VAR 0 4
6640: PUSH
6641: LD_VAR 0 4
6645: PUSH
6646: LD_INT 1
6648: ARRAY
6649: ST_TO_ADDR
// Say ( result , dial ) ;
6650: LD_VAR 0 4
6654: PPUSH
6655: LD_VAR 0 2
6659: PPUSH
6660: CALL_OW 88
// end ;
6664: LD_VAR 0 4
6668: RET
// export function Patrol ( unit , path , flags ) ; var i , x , y , c , p , station , tmp_path , status , enemy , e , spot_dist , safe_place , chase_range , need_refuel ; begin
6669: LD_INT 0
6671: PPUSH
6672: PPUSH
6673: PPUSH
6674: PPUSH
6675: PPUSH
6676: PPUSH
6677: PPUSH
6678: PPUSH
6679: PPUSH
6680: PPUSH
6681: PPUSH
6682: PPUSH
6683: PPUSH
6684: PPUSH
6685: PPUSH
// if not unit or not path or GetType ( unit ) = unit_building then
6686: LD_VAR 0 1
6690: NOT
6691: PUSH
6692: LD_VAR 0 2
6696: NOT
6697: OR
6698: PUSH
6699: LD_VAR 0 1
6703: PPUSH
6704: CALL_OW 247
6708: PUSH
6709: LD_INT 3
6711: EQUAL
6712: OR
6713: IFFALSE 6717
// exit ;
6715: GO 8256
// for i = path downto 1 do
6717: LD_ADDR_VAR 0 5
6721: PUSH
6722: DOUBLE
6723: LD_VAR 0 2
6727: INC
6728: ST_TO_ADDR
6729: LD_INT 1
6731: PUSH
6732: FOR_DOWNTO
6733: IFFALSE 6794
// begin if not ValidHex ( path [ i ] [ 1 ] , path [ i ] [ 2 ] ) then
6735: LD_VAR 0 2
6739: PUSH
6740: LD_VAR 0 5
6744: ARRAY
6745: PUSH
6746: LD_INT 1
6748: ARRAY
6749: PPUSH
6750: LD_VAR 0 2
6754: PUSH
6755: LD_VAR 0 5
6759: ARRAY
6760: PUSH
6761: LD_INT 2
6763: ARRAY
6764: PPUSH
6765: CALL_OW 488
6769: NOT
6770: IFFALSE 6792
// path = Delete ( path , i ) ;
6772: LD_ADDR_VAR 0 2
6776: PUSH
6777: LD_VAR 0 2
6781: PPUSH
6782: LD_VAR 0 5
6786: PPUSH
6787: CALL_OW 3
6791: ST_TO_ADDR
// end ;
6792: GO 6732
6794: POP
6795: POP
// if not path then
6796: LD_VAR 0 2
6800: NOT
6801: IFFALSE 6805
// exit ;
6803: GO 8256
// tmp_path := [ ] ;
6805: LD_ADDR_VAR 0 11
6809: PUSH
6810: EMPTY
6811: ST_TO_ADDR
// if flags then
6812: LD_VAR 0 3
6816: IFFALSE 6890
// begin if flags [ 1 ] then
6818: LD_VAR 0 3
6822: PUSH
6823: LD_INT 1
6825: ARRAY
6826: IFFALSE 6842
// safe_place = flags [ 1 ] ;
6828: LD_ADDR_VAR 0 16
6832: PUSH
6833: LD_VAR 0 3
6837: PUSH
6838: LD_INT 1
6840: ARRAY
6841: ST_TO_ADDR
// if flags [ 2 ] then
6842: LD_VAR 0 3
6846: PUSH
6847: LD_INT 2
6849: ARRAY
6850: IFFALSE 6866
// spot_dist = flags [ 2 ] ;
6852: LD_ADDR_VAR 0 15
6856: PUSH
6857: LD_VAR 0 3
6861: PUSH
6862: LD_INT 2
6864: ARRAY
6865: ST_TO_ADDR
// if flags [ 3 ] then
6866: LD_VAR 0 3
6870: PUSH
6871: LD_INT 3
6873: ARRAY
6874: IFFALSE 6890
// chase_range = flags [ 3 ] ;
6876: LD_ADDR_VAR 0 17
6880: PUSH
6881: LD_VAR 0 3
6885: PUSH
6886: LD_INT 3
6888: ARRAY
6889: ST_TO_ADDR
// end ; if not chase_range then
6890: LD_VAR 0 17
6894: NOT
6895: IFFALSE 6905
// chase_range = 8 ;
6897: LD_ADDR_VAR 0 17
6901: PUSH
6902: LD_INT 8
6904: ST_TO_ADDR
// if not spot_dist then
6905: LD_VAR 0 15
6909: NOT
6910: IFFALSE 6920
// spot_dist := 8 ;
6912: LD_ADDR_VAR 0 15
6916: PUSH
6917: LD_INT 8
6919: ST_TO_ADDR
// need_refuel = ( GetType ( unit ) = unit_vehicle and GetEngine ( unit ) <> engine_siberite ) ;
6920: LD_ADDR_VAR 0 18
6924: PUSH
6925: LD_VAR 0 1
6929: PPUSH
6930: CALL_OW 247
6934: PUSH
6935: LD_INT 2
6937: EQUAL
6938: PUSH
6939: LD_VAR 0 1
6943: PPUSH
6944: CALL_OW 262
6948: PUSH
6949: LD_INT 3
6951: NONEQUAL
6952: AND
6953: ST_TO_ADDR
// status = 1 ;
6954: LD_ADDR_VAR 0 12
6958: PUSH
6959: LD_INT 1
6961: ST_TO_ADDR
// tmp_path = [ 1 , path [ 1 ] ] ;
6962: LD_ADDR_VAR 0 11
6966: PUSH
6967: LD_INT 1
6969: PUSH
6970: LD_VAR 0 2
6974: PUSH
6975: LD_INT 1
6977: ARRAY
6978: PUSH
6979: EMPTY
6980: LIST
6981: LIST
6982: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6983: LD_INT 35
6985: PPUSH
6986: CALL_OW 67
// if need_refuel and GetFuel ( unit ) < 20 then
6990: LD_VAR 0 18
6994: PUSH
6995: LD_VAR 0 1
6999: PPUSH
7000: CALL_OW 261
7004: PUSH
7005: LD_INT 20
7007: LESS
7008: AND
7009: IFFALSE 7202
// begin station := FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_oil_mine ] , [ f_btype , b_factory ] ] ] ) ;
7011: LD_ADDR_VAR 0 10
7015: PUSH
7016: LD_INT 22
7018: PUSH
7019: LD_VAR 0 1
7023: PPUSH
7024: CALL_OW 255
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: PUSH
7033: LD_INT 2
7035: PUSH
7036: LD_INT 30
7038: PUSH
7039: LD_INT 0
7041: PUSH
7042: EMPTY
7043: LIST
7044: LIST
7045: PUSH
7046: LD_INT 30
7048: PUSH
7049: LD_INT 1
7051: PUSH
7052: EMPTY
7053: LIST
7054: LIST
7055: PUSH
7056: LD_INT 30
7058: PUSH
7059: LD_INT 29
7061: PUSH
7062: EMPTY
7063: LIST
7064: LIST
7065: PUSH
7066: LD_INT 30
7068: PUSH
7069: LD_INT 3
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: LIST
7080: LIST
7081: LIST
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: PPUSH
7087: CALL_OW 69
7091: ST_TO_ADDR
// if not station then
7092: LD_VAR 0 10
7096: NOT
7097: IFFALSE 7113
// begin SetFuel ( unit , 40 ) ;
7099: LD_VAR 0 1
7103: PPUSH
7104: LD_INT 40
7106: PPUSH
7107: CALL_OW 240
// continue ;
7111: GO 6983
// end ; status := 6 ;
7113: LD_ADDR_VAR 0 12
7117: PUSH
7118: LD_INT 6
7120: ST_TO_ADDR
// station := NearestUnitToUnit ( station , unit ) ;
7121: LD_ADDR_VAR 0 10
7125: PUSH
7126: LD_VAR 0 10
7130: PPUSH
7131: LD_VAR 0 1
7135: PPUSH
7136: CALL_OW 74
7140: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7141: LD_INT 35
7143: PPUSH
7144: CALL_OW 67
// ComMoveUnit ( unit , station ) ;
7148: LD_VAR 0 1
7152: PPUSH
7153: LD_VAR 0 10
7157: PPUSH
7158: CALL_OW 112
// until GetDistUnits ( unit , station ) < 6 ;
7162: LD_VAR 0 1
7166: PPUSH
7167: LD_VAR 0 10
7171: PPUSH
7172: CALL_OW 296
7176: PUSH
7177: LD_INT 6
7179: LESS
7180: IFFALSE 7141
// SetFuel ( unit , 100 ) ;
7182: LD_VAR 0 1
7186: PPUSH
7187: LD_INT 100
7189: PPUSH
7190: CALL_OW 240
// status := 5 ;
7194: LD_ADDR_VAR 0 12
7198: PUSH
7199: LD_INT 5
7201: ST_TO_ADDR
// end ; if status = 1 then
7202: LD_VAR 0 12
7206: PUSH
7207: LD_INT 1
7209: EQUAL
7210: IFFALSE 7586
// begin enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] , [ f_dist , unit , spot_dist ] , [ f_see , 1 ] ] ) ;
7212: LD_ADDR_VAR 0 13
7216: PUSH
7217: LD_INT 81
7219: PUSH
7220: LD_VAR 0 1
7224: PPUSH
7225: CALL_OW 255
7229: PUSH
7230: EMPTY
7231: LIST
7232: LIST
7233: PUSH
7234: LD_INT 3
7236: PUSH
7237: LD_INT 21
7239: PUSH
7240: LD_INT 3
7242: PUSH
7243: EMPTY
7244: LIST
7245: LIST
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: PUSH
7251: LD_INT 91
7253: PUSH
7254: LD_VAR 0 1
7258: PUSH
7259: LD_VAR 0 15
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: LIST
7268: PUSH
7269: LD_INT 101
7271: PUSH
7272: LD_INT 1
7274: PUSH
7275: EMPTY
7276: LIST
7277: LIST
7278: PUSH
7279: EMPTY
7280: LIST
7281: LIST
7282: LIST
7283: LIST
7284: PPUSH
7285: CALL_OW 69
7289: ST_TO_ADDR
// for i in enemy do
7290: LD_ADDR_VAR 0 5
7294: PUSH
7295: LD_VAR 0 13
7299: PUSH
7300: FOR_IN
7301: IFFALSE 7332
// if IsInvisible ( i ) then
7303: LD_VAR 0 5
7307: PPUSH
7308: CALL_OW 571
7312: IFFALSE 7330
// enemy := enemy diff i ;
7314: LD_ADDR_VAR 0 13
7318: PUSH
7319: LD_VAR 0 13
7323: PUSH
7324: LD_VAR 0 5
7328: DIFF
7329: ST_TO_ADDR
7330: GO 7300
7332: POP
7333: POP
// if enemy then
7334: LD_VAR 0 13
7338: IFFALSE 7388
// begin SetRememberedX ( unit , GetX ( unit ) ) ;
7340: LD_VAR 0 1
7344: PPUSH
7345: LD_VAR 0 1
7349: PPUSH
7350: CALL_OW 250
7354: PPUSH
7355: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
7359: LD_VAR 0 1
7363: PPUSH
7364: LD_VAR 0 1
7368: PPUSH
7369: CALL_OW 251
7373: PPUSH
7374: CALL_OW 232
// status = 2 ;
7378: LD_ADDR_VAR 0 12
7382: PUSH
7383: LD_INT 2
7385: ST_TO_ADDR
// end else
7386: GO 7586
// begin if IsAt ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) or not HasTask ( unit ) then
7388: LD_VAR 0 1
7392: PPUSH
7393: LD_VAR 0 11
7397: PUSH
7398: LD_INT 2
7400: ARRAY
7401: PUSH
7402: LD_INT 1
7404: ARRAY
7405: PPUSH
7406: LD_VAR 0 11
7410: PUSH
7411: LD_INT 2
7413: ARRAY
7414: PUSH
7415: LD_INT 2
7417: ARRAY
7418: PPUSH
7419: CALL_OW 307
7423: PUSH
7424: LD_VAR 0 1
7428: PPUSH
7429: CALL_OW 314
7433: NOT
7434: OR
7435: IFFALSE 7586
// begin wait ( 0 0$2 ) ;
7437: LD_INT 70
7439: PPUSH
7440: CALL_OW 67
// if tmp_path [ 1 ] + 1 > path then
7444: LD_VAR 0 11
7448: PUSH
7449: LD_INT 1
7451: ARRAY
7452: PUSH
7453: LD_INT 1
7455: PLUS
7456: PUSH
7457: LD_VAR 0 2
7461: GREATER
7462: IFFALSE 7487
// tmp_path := Replace ( tmp_path , 1 , 1 ) else
7464: LD_ADDR_VAR 0 11
7468: PUSH
7469: LD_VAR 0 11
7473: PPUSH
7474: LD_INT 1
7476: PPUSH
7477: LD_INT 1
7479: PPUSH
7480: CALL_OW 1
7484: ST_TO_ADDR
7485: GO 7518
// tmp_path := Replace ( tmp_path , 1 , tmp_path [ 1 ] + 1 ) ;
7487: LD_ADDR_VAR 0 11
7491: PUSH
7492: LD_VAR 0 11
7496: PPUSH
7497: LD_INT 1
7499: PPUSH
7500: LD_VAR 0 11
7504: PUSH
7505: LD_INT 1
7507: ARRAY
7508: PUSH
7509: LD_INT 1
7511: PLUS
7512: PPUSH
7513: CALL_OW 1
7517: ST_TO_ADDR
// tmp_path := Replace ( tmp_path , 2 , path [ tmp_path [ 1 ] ] ) ;
7518: LD_ADDR_VAR 0 11
7522: PUSH
7523: LD_VAR 0 11
7527: PPUSH
7528: LD_INT 2
7530: PPUSH
7531: LD_VAR 0 2
7535: PUSH
7536: LD_VAR 0 11
7540: PUSH
7541: LD_INT 1
7543: ARRAY
7544: ARRAY
7545: PPUSH
7546: CALL_OW 1
7550: ST_TO_ADDR
// ComAgressiveMove ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) ;
7551: LD_VAR 0 1
7555: PPUSH
7556: LD_VAR 0 11
7560: PUSH
7561: LD_INT 2
7563: ARRAY
7564: PUSH
7565: LD_INT 1
7567: ARRAY
7568: PPUSH
7569: LD_VAR 0 11
7573: PUSH
7574: LD_INT 2
7576: ARRAY
7577: PUSH
7578: LD_INT 2
7580: ARRAY
7581: PPUSH
7582: CALL_OW 114
// end ; end ; end ; if status = 2 then
7586: LD_VAR 0 12
7590: PUSH
7591: LD_INT 2
7593: EQUAL
7594: IFFALSE 7815
// begin if GetLives ( unit ) < 650 and safe_place then
7596: LD_VAR 0 1
7600: PPUSH
7601: CALL_OW 256
7605: PUSH
7606: LD_INT 650
7608: LESS
7609: PUSH
7610: LD_VAR 0 16
7614: AND
7615: IFFALSE 7627
// begin status = 3 ;
7617: LD_ADDR_VAR 0 12
7621: PUSH
7622: LD_INT 3
7624: ST_TO_ADDR
// continue ;
7625: GO 6983
// end ; x := GetRememberedX ( unit ) ;
7627: LD_ADDR_VAR 0 6
7631: PUSH
7632: LD_VAR 0 1
7636: PPUSH
7637: CALL_OW 252
7641: ST_TO_ADDR
// y := GetRememberedY ( unit ) ;
7642: LD_ADDR_VAR 0 7
7646: PUSH
7647: LD_VAR 0 1
7651: PPUSH
7652: CALL_OW 253
7656: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_distxy , x , y , spot_dist ] , [ f_see , 1 ] ] ) ;
7657: LD_ADDR_VAR 0 13
7661: PUSH
7662: LD_INT 81
7664: PUSH
7665: LD_VAR 0 1
7669: PPUSH
7670: CALL_OW 255
7674: PUSH
7675: EMPTY
7676: LIST
7677: LIST
7678: PUSH
7679: LD_INT 92
7681: PUSH
7682: LD_VAR 0 6
7686: PUSH
7687: LD_VAR 0 7
7691: PUSH
7692: LD_VAR 0 15
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: LIST
7701: LIST
7702: PUSH
7703: LD_INT 101
7705: PUSH
7706: LD_INT 1
7708: PUSH
7709: EMPTY
7710: LIST
7711: LIST
7712: PUSH
7713: EMPTY
7714: LIST
7715: LIST
7716: LIST
7717: PPUSH
7718: CALL_OW 69
7722: ST_TO_ADDR
// if enemy then
7723: LD_VAR 0 13
7727: IFFALSE 7798
// begin e := NearestUnitToUnit ( enemy , unit ) ;
7729: LD_ADDR_VAR 0 14
7733: PUSH
7734: LD_VAR 0 13
7738: PPUSH
7739: LD_VAR 0 1
7743: PPUSH
7744: CALL_OW 74
7748: ST_TO_ADDR
// if GetDistUnitXY ( e , x , y ) < spot_dist + chase_range then
7749: LD_VAR 0 14
7753: PPUSH
7754: LD_VAR 0 6
7758: PPUSH
7759: LD_VAR 0 7
7763: PPUSH
7764: CALL_OW 297
7768: PUSH
7769: LD_VAR 0 15
7773: PUSH
7774: LD_VAR 0 17
7778: PLUS
7779: LESS
7780: IFFALSE 7796
// ComAttackUnit ( unit , e ) ;
7782: LD_VAR 0 1
7786: PPUSH
7787: LD_VAR 0 14
7791: PPUSH
7792: CALL_OW 115
// end else
7796: GO 7815
// begin ComStop ( unit ) ;
7798: LD_VAR 0 1
7802: PPUSH
7803: CALL_OW 141
// status = 5 ;
7807: LD_ADDR_VAR 0 12
7811: PUSH
7812: LD_INT 5
7814: ST_TO_ADDR
// end ; end ; if status = 3 and safe_place then
7815: LD_VAR 0 12
7819: PUSH
7820: LD_INT 3
7822: EQUAL
7823: PUSH
7824: LD_VAR 0 16
7828: AND
7829: IFFALSE 7915
// begin repeat ComMoveXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) ;
7831: LD_VAR 0 1
7835: PPUSH
7836: LD_VAR 0 16
7840: PUSH
7841: LD_INT 1
7843: ARRAY
7844: PPUSH
7845: LD_VAR 0 16
7849: PUSH
7850: LD_INT 2
7852: ARRAY
7853: PPUSH
7854: CALL_OW 111
// wait ( 0 0$1 ) ;
7858: LD_INT 35
7860: PPUSH
7861: CALL_OW 67
// until GetDistUnitXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) < 4 ;
7865: LD_VAR 0 1
7869: PPUSH
7870: LD_VAR 0 16
7874: PUSH
7875: LD_INT 1
7877: ARRAY
7878: PPUSH
7879: LD_VAR 0 16
7883: PUSH
7884: LD_INT 2
7886: ARRAY
7887: PPUSH
7888: CALL_OW 297
7892: PUSH
7893: LD_INT 4
7895: LESS
7896: IFFALSE 7831
// ComStop ( unit ) ;
7898: LD_VAR 0 1
7902: PPUSH
7903: CALL_OW 141
// status = 4 ;
7907: LD_ADDR_VAR 0 12
7911: PUSH
7912: LD_INT 4
7914: ST_TO_ADDR
// end ; if status = 4 then
7915: LD_VAR 0 12
7919: PUSH
7920: LD_INT 4
7922: EQUAL
7923: IFFALSE 7955
// begin repeat wait ( 0 0$1 ) ;
7925: LD_INT 35
7927: PPUSH
7928: CALL_OW 67
// until GetLives ( unit ) = 1000 ;
7932: LD_VAR 0 1
7936: PPUSH
7937: CALL_OW 256
7941: PUSH
7942: LD_INT 1000
7944: EQUAL
7945: IFFALSE 7925
// status = 5 ;
7947: LD_ADDR_VAR 0 12
7951: PUSH
7952: LD_INT 5
7954: ST_TO_ADDR
// end ; if status = 5 then
7955: LD_VAR 0 12
7959: PUSH
7960: LD_INT 5
7962: EQUAL
7963: IFFALSE 8245
// begin p := 999 ;
7965: LD_ADDR_VAR 0 9
7969: PUSH
7970: LD_INT 999
7972: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ] ;
7973: LD_ADDR_VAR 0 14
7977: PUSH
7978: LD_VAR 0 11
7982: PUSH
7983: LD_INT 2
7985: ARRAY
7986: PUSH
7987: LD_INT 1
7989: ARRAY
7990: PUSH
7991: LD_VAR 0 11
7995: PUSH
7996: LD_INT 2
7998: ARRAY
7999: PUSH
8000: LD_INT 2
8002: ARRAY
8003: PUSH
8004: EMPTY
8005: LIST
8006: LIST
8007: ST_TO_ADDR
// c := 1 ;
8008: LD_ADDR_VAR 0 8
8012: PUSH
8013: LD_INT 1
8015: ST_TO_ADDR
// for i = 1 to tmp_path [ 2 ] div 2 do
8016: LD_ADDR_VAR 0 5
8020: PUSH
8021: DOUBLE
8022: LD_INT 1
8024: DEC
8025: ST_TO_ADDR
8026: LD_VAR 0 11
8030: PUSH
8031: LD_INT 2
8033: ARRAY
8034: PUSH
8035: LD_INT 2
8037: DIV
8038: PUSH
8039: FOR_TO
8040: IFFALSE 8172
// begin x := GetDistUnitXY ( unit , tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ) ;
8042: LD_ADDR_VAR 0 6
8046: PUSH
8047: LD_VAR 0 1
8051: PPUSH
8052: LD_VAR 0 11
8056: PUSH
8057: LD_INT 2
8059: ARRAY
8060: PUSH
8061: LD_VAR 0 8
8065: ARRAY
8066: PPUSH
8067: LD_VAR 0 11
8071: PUSH
8072: LD_INT 2
8074: ARRAY
8075: PUSH
8076: LD_VAR 0 8
8080: PUSH
8081: LD_INT 1
8083: PLUS
8084: ARRAY
8085: PPUSH
8086: CALL_OW 297
8090: ST_TO_ADDR
// if x < p then
8091: LD_VAR 0 6
8095: PUSH
8096: LD_VAR 0 9
8100: LESS
8101: IFFALSE 8156
// begin p := x ;
8103: LD_ADDR_VAR 0 9
8107: PUSH
8108: LD_VAR 0 6
8112: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ] ;
8113: LD_ADDR_VAR 0 14
8117: PUSH
8118: LD_VAR 0 11
8122: PUSH
8123: LD_INT 2
8125: ARRAY
8126: PUSH
8127: LD_VAR 0 8
8131: ARRAY
8132: PUSH
8133: LD_VAR 0 11
8137: PUSH
8138: LD_INT 2
8140: ARRAY
8141: PUSH
8142: LD_VAR 0 8
8146: PUSH
8147: LD_INT 1
8149: PLUS
8150: ARRAY
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: ST_TO_ADDR
// end ; c = c + 2 ;
8156: LD_ADDR_VAR 0 8
8160: PUSH
8161: LD_VAR 0 8
8165: PUSH
8166: LD_INT 2
8168: PLUS
8169: ST_TO_ADDR
// end ;
8170: GO 8039
8172: POP
8173: POP
// repeat ComMoveXY ( unit , e [ 1 ] , e [ 2 ] ) ;
8174: LD_VAR 0 1
8178: PPUSH
8179: LD_VAR 0 14
8183: PUSH
8184: LD_INT 1
8186: ARRAY
8187: PPUSH
8188: LD_VAR 0 14
8192: PUSH
8193: LD_INT 2
8195: ARRAY
8196: PPUSH
8197: CALL_OW 111
// wait ( 0 0$1 ) ;
8201: LD_INT 35
8203: PPUSH
8204: CALL_OW 67
// until IsAt ( unit , e [ 1 ] , e [ 2 ] ) ;
8208: LD_VAR 0 1
8212: PPUSH
8213: LD_VAR 0 14
8217: PUSH
8218: LD_INT 1
8220: ARRAY
8221: PPUSH
8222: LD_VAR 0 14
8226: PUSH
8227: LD_INT 2
8229: ARRAY
8230: PPUSH
8231: CALL_OW 307
8235: IFFALSE 8174
// status = 1 ;
8237: LD_ADDR_VAR 0 12
8241: PUSH
8242: LD_INT 1
8244: ST_TO_ADDR
// end ; until IsDead ( unit ) ;
8245: LD_VAR 0 1
8249: PPUSH
8250: CALL_OW 301
8254: IFFALSE 6983
// end ;
8256: LD_VAR 0 4
8260: RET
// export function Talk ( units , type , sequence , sex , class , id , order_id ) ; var i , unit , tmp , unit_id , dialog_id , sex_id , class_id ; begin
8261: LD_INT 0
8263: PPUSH
8264: PPUSH
8265: PPUSH
8266: PPUSH
8267: PPUSH
8268: PPUSH
8269: PPUSH
8270: PPUSH
// if not units or not sequence or not sex in [ sex_male , sex_female , 0 ] or not id or not order_id then
8271: LD_VAR 0 1
8275: NOT
8276: PUSH
8277: LD_VAR 0 3
8281: NOT
8282: OR
8283: PUSH
8284: LD_VAR 0 4
8288: PUSH
8289: LD_INT 1
8291: PUSH
8292: LD_INT 2
8294: PUSH
8295: LD_INT 0
8297: PUSH
8298: EMPTY
8299: LIST
8300: LIST
8301: LIST
8302: IN
8303: NOT
8304: OR
8305: PUSH
8306: LD_VAR 0 6
8310: NOT
8311: OR
8312: PUSH
8313: LD_VAR 0 7
8317: NOT
8318: OR
8319: IFFALSE 8323
// exit ;
8321: GO 8714
// sex_id :=  ;
8323: LD_ADDR_VAR 0 14
8327: PUSH
8328: LD_STRING 
8330: ST_TO_ADDR
// case class of 1 :
8331: LD_VAR 0 5
8335: PUSH
8336: LD_INT 1
8338: DOUBLE
8339: EQUAL
8340: IFTRUE 8344
8342: GO 8355
8344: POP
// class_id := Sol ; 2 :
8345: LD_ADDR_VAR 0 15
8349: PUSH
8350: LD_STRING Sol
8352: ST_TO_ADDR
8353: GO 8413
8355: LD_INT 2
8357: DOUBLE
8358: EQUAL
8359: IFTRUE 8363
8361: GO 8374
8363: POP
// class_id := Eng ; 3 :
8364: LD_ADDR_VAR 0 15
8368: PUSH
8369: LD_STRING Eng
8371: ST_TO_ADDR
8372: GO 8413
8374: LD_INT 3
8376: DOUBLE
8377: EQUAL
8378: IFTRUE 8382
8380: GO 8393
8382: POP
// class_id := Mech ; 4 :
8383: LD_ADDR_VAR 0 15
8387: PUSH
8388: LD_STRING Mech
8390: ST_TO_ADDR
8391: GO 8413
8393: LD_INT 4
8395: DOUBLE
8396: EQUAL
8397: IFTRUE 8401
8399: GO 8412
8401: POP
// class_id := Sci ; end ;
8402: LD_ADDR_VAR 0 15
8406: PUSH
8407: LD_STRING Sci
8409: ST_TO_ADDR
8410: GO 8413
8412: POP
// tmp := UnitFilter ( units , [ f_class , class ] ) ;
8413: LD_ADDR_VAR 0 11
8417: PUSH
8418: LD_VAR 0 1
8422: PPUSH
8423: LD_INT 25
8425: PUSH
8426: LD_VAR 0 5
8430: PUSH
8431: EMPTY
8432: LIST
8433: LIST
8434: PPUSH
8435: CALL_OW 72
8439: ST_TO_ADDR
// if tmp then
8440: LD_VAR 0 11
8444: IFFALSE 8456
// units := tmp ;
8446: LD_ADDR_VAR 0 1
8450: PUSH
8451: LD_VAR 0 11
8455: ST_TO_ADDR
// if sex then
8456: LD_VAR 0 4
8460: IFFALSE 8516
// begin if sex = sex_female then
8462: LD_VAR 0 4
8466: PUSH
8467: LD_INT 2
8469: EQUAL
8470: IFFALSE 8480
// sex_id := F ;
8472: LD_ADDR_VAR 0 14
8476: PUSH
8477: LD_STRING F
8479: ST_TO_ADDR
// units := UnitFilter ( units , [ f_sex , sex ] ) ;
8480: LD_ADDR_VAR 0 1
8484: PUSH
8485: LD_VAR 0 1
8489: PPUSH
8490: LD_INT 26
8492: PUSH
8493: LD_VAR 0 4
8497: PUSH
8498: EMPTY
8499: LIST
8500: LIST
8501: PPUSH
8502: CALL_OW 72
8506: ST_TO_ADDR
// if not units then
8507: LD_VAR 0 1
8511: NOT
8512: IFFALSE 8516
// exit ;
8514: GO 8714
// end ; unit_id := id ;
8516: LD_ADDR_VAR 0 12
8520: PUSH
8521: LD_VAR 0 6
8525: ST_TO_ADDR
// if unit_id > units then
8526: LD_VAR 0 12
8530: PUSH
8531: LD_VAR 0 1
8535: GREATER
8536: IFFALSE 8546
// unit_id := 1 ;
8538: LD_ADDR_VAR 0 12
8542: PUSH
8543: LD_INT 1
8545: ST_TO_ADDR
// if not units [ unit_id ] then
8546: LD_VAR 0 1
8550: PUSH
8551: LD_VAR 0 12
8555: ARRAY
8556: NOT
8557: IFFALSE 8561
// exit ;
8559: GO 8714
// unit := units [ unit_id ] ;
8561: LD_ADDR_VAR 0 10
8565: PUSH
8566: LD_VAR 0 1
8570: PUSH
8571: LD_VAR 0 12
8575: ARRAY
8576: ST_TO_ADDR
// dialog_id := D & sequence & - & sex_id & class_id & id & - & order_id ;
8577: LD_ADDR_VAR 0 13
8581: PUSH
8582: LD_STRING D
8584: PUSH
8585: LD_VAR 0 3
8589: STR
8590: PUSH
8591: LD_STRING -
8593: STR
8594: PUSH
8595: LD_VAR 0 14
8599: STR
8600: PUSH
8601: LD_VAR 0 15
8605: STR
8606: PUSH
8607: LD_VAR 0 6
8611: STR
8612: PUSH
8613: LD_STRING -
8615: STR
8616: PUSH
8617: LD_VAR 0 7
8621: STR
8622: ST_TO_ADDR
// case type of 0 :
8623: LD_VAR 0 2
8627: PUSH
8628: LD_INT 0
8630: DOUBLE
8631: EQUAL
8632: IFTRUE 8636
8634: GO 8653
8636: POP
// Say ( unit , dialog_id ) ; 1 :
8637: LD_VAR 0 10
8641: PPUSH
8642: LD_VAR 0 13
8646: PPUSH
8647: CALL_OW 88
8651: GO 8704
8653: LD_INT 1
8655: DOUBLE
8656: EQUAL
8657: IFTRUE 8661
8659: GO 8678
8661: POP
// SayRadio ( unit , dialog_id ) ; 2 :
8662: LD_VAR 0 10
8666: PPUSH
8667: LD_VAR 0 13
8671: PPUSH
8672: CALL_OW 94
8676: GO 8704
8678: LD_INT 2
8680: DOUBLE
8681: EQUAL
8682: IFTRUE 8686
8684: GO 8703
8686: POP
// ForceSay ( unit , dialog_id ) ; end ;
8687: LD_VAR 0 10
8691: PPUSH
8692: LD_VAR 0 13
8696: PPUSH
8697: CALL_OW 91
8701: GO 8704
8703: POP
// result := unit ;
8704: LD_ADDR_VAR 0 8
8708: PUSH
8709: LD_VAR 0 10
8713: ST_TO_ADDR
// end ;
8714: LD_VAR 0 8
8718: RET
// export function IsNearbyEntrance ( unit , building , distance ) ; var i , entrance ; begin
8719: LD_INT 0
8721: PPUSH
8722: PPUSH
8723: PPUSH
// result := false ;
8724: LD_ADDR_VAR 0 4
8728: PUSH
8729: LD_INT 0
8731: ST_TO_ADDR
// if not unit or not building or IsInUnit ( unit ) then
8732: LD_VAR 0 1
8736: NOT
8737: PUSH
8738: LD_VAR 0 2
8742: NOT
8743: OR
8744: PUSH
8745: LD_VAR 0 1
8749: PPUSH
8750: CALL_OW 310
8754: OR
8755: IFFALSE 8759
// exit ;
8757: GO 8963
// if distance < 0 then
8759: LD_VAR 0 3
8763: PUSH
8764: LD_INT 0
8766: LESS
8767: IFFALSE 8777
// distance := 0 ;
8769: LD_ADDR_VAR 0 3
8773: PUSH
8774: LD_INT 0
8776: ST_TO_ADDR
// entrance := GetBuildingHexes ( GetBType ( building ) , GetX ( building ) , GetY ( building ) , GetDir ( building ) , GetNation ( building ) , 1 ) ;
8777: LD_ADDR_VAR 0 6
8781: PUSH
8782: LD_VAR 0 2
8786: PPUSH
8787: CALL_OW 266
8791: PPUSH
8792: LD_VAR 0 2
8796: PPUSH
8797: CALL_OW 250
8801: PPUSH
8802: LD_VAR 0 2
8806: PPUSH
8807: CALL_OW 251
8811: PPUSH
8812: LD_VAR 0 2
8816: PPUSH
8817: CALL_OW 254
8821: PPUSH
8822: LD_VAR 0 2
8826: PPUSH
8827: CALL_OW 248
8831: PPUSH
8832: LD_INT 1
8834: PPUSH
8835: CALL 49225 0 6
8839: ST_TO_ADDR
// if not entrance then
8840: LD_VAR 0 6
8844: NOT
8845: IFFALSE 8849
// exit ;
8847: GO 8963
// for i in entrance do
8849: LD_ADDR_VAR 0 5
8853: PUSH
8854: LD_VAR 0 6
8858: PUSH
8859: FOR_IN
8860: IFFALSE 8961
// begin if not distance then
8862: LD_VAR 0 3
8866: NOT
8867: IFFALSE 8912
// begin if IsAt ( unit , i [ 1 ] , i [ 2 ] ) then
8869: LD_VAR 0 1
8873: PPUSH
8874: LD_VAR 0 5
8878: PUSH
8879: LD_INT 1
8881: ARRAY
8882: PPUSH
8883: LD_VAR 0 5
8887: PUSH
8888: LD_INT 2
8890: ARRAY
8891: PPUSH
8892: CALL_OW 307
8896: IFFALSE 8910
// begin result := true ;
8898: LD_ADDR_VAR 0 4
8902: PUSH
8903: LD_INT 1
8905: ST_TO_ADDR
// exit ;
8906: POP
8907: POP
8908: GO 8963
// end ; end else
8910: GO 8959
// begin if GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) <= distance then
8912: LD_VAR 0 1
8916: PPUSH
8917: LD_VAR 0 5
8921: PUSH
8922: LD_INT 1
8924: ARRAY
8925: PPUSH
8926: LD_VAR 0 5
8930: PUSH
8931: LD_INT 2
8933: ARRAY
8934: PPUSH
8935: CALL_OW 297
8939: PUSH
8940: LD_VAR 0 3
8944: LESSEQUAL
8945: IFFALSE 8959
// begin result := true ;
8947: LD_ADDR_VAR 0 4
8951: PUSH
8952: LD_INT 1
8954: ST_TO_ADDR
// exit ;
8955: POP
8956: POP
8957: GO 8963
// end ; end ; end ;
8959: GO 8859
8961: POP
8962: POP
// end ;
8963: LD_VAR 0 4
8967: RET
// export function CanSpot ( unit , unit2 ) ; var i , building ; begin
8968: LD_INT 0
8970: PPUSH
8971: PPUSH
8972: PPUSH
// result := false ;
8973: LD_ADDR_VAR 0 3
8977: PUSH
8978: LD_INT 0
8980: ST_TO_ADDR
// if not unit or not unit2 or not IsOk ( unit ) or not IsOk ( unit2 ) then
8981: LD_VAR 0 1
8985: NOT
8986: PUSH
8987: LD_VAR 0 2
8991: NOT
8992: OR
8993: PUSH
8994: LD_VAR 0 1
8998: PPUSH
8999: CALL_OW 302
9003: NOT
9004: OR
9005: PUSH
9006: LD_VAR 0 2
9010: PPUSH
9011: CALL_OW 302
9015: NOT
9016: OR
9017: IFFALSE 9021
// exit ;
9019: GO 9182
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] ] ) , unit ) ) < 8 then
9021: LD_VAR 0 1
9025: PPUSH
9026: LD_INT 81
9028: PUSH
9029: LD_VAR 0 1
9033: PPUSH
9034: CALL_OW 255
9038: PUSH
9039: EMPTY
9040: LIST
9041: LIST
9042: PUSH
9043: LD_INT 3
9045: PUSH
9046: LD_INT 21
9048: PUSH
9049: LD_INT 3
9051: PUSH
9052: EMPTY
9053: LIST
9054: LIST
9055: PUSH
9056: EMPTY
9057: LIST
9058: LIST
9059: PUSH
9060: EMPTY
9061: LIST
9062: LIST
9063: PPUSH
9064: CALL_OW 69
9068: PPUSH
9069: LD_VAR 0 1
9073: PPUSH
9074: CALL_OW 74
9078: PPUSH
9079: CALL_OW 296
9083: PUSH
9084: LD_INT 8
9086: LESS
9087: IFFALSE 9091
// exit ;
9089: GO 9182
// building := IsInUnit ( unit2 ) ;
9091: LD_ADDR_VAR 0 5
9095: PUSH
9096: LD_VAR 0 2
9100: PPUSH
9101: CALL_OW 310
9105: ST_TO_ADDR
// if building then
9106: LD_VAR 0 5
9110: IFFALSE 9137
// result := IsNearbyEntrance ( unit , building , 2 ) else
9112: LD_ADDR_VAR 0 3
9116: PUSH
9117: LD_VAR 0 1
9121: PPUSH
9122: LD_VAR 0 5
9126: PPUSH
9127: LD_INT 2
9129: PPUSH
9130: CALL 8719 0 3
9134: ST_TO_ADDR
9135: GO 9182
// result := ( GetDistUnits ( unit , unit2 ) < 6 and See ( GetSide ( unit2 ) , unit ) ) ;
9137: LD_ADDR_VAR 0 3
9141: PUSH
9142: LD_VAR 0 1
9146: PPUSH
9147: LD_VAR 0 2
9151: PPUSH
9152: CALL_OW 296
9156: PUSH
9157: LD_INT 6
9159: LESS
9160: PUSH
9161: LD_VAR 0 2
9165: PPUSH
9166: CALL_OW 255
9170: PPUSH
9171: LD_VAR 0 1
9175: PPUSH
9176: CALL_OW 292
9180: AND
9181: ST_TO_ADDR
// end ;
9182: LD_VAR 0 3
9186: RET
// export function CreateNature ; var i , animal , nat_area ; begin
9187: LD_INT 0
9189: PPUSH
9190: PPUSH
9191: PPUSH
9192: PPUSH
// uc_side = 0 ;
9193: LD_ADDR_OWVAR 20
9197: PUSH
9198: LD_INT 0
9200: ST_TO_ADDR
// uc_nation = 0 ;
9201: LD_ADDR_OWVAR 21
9205: PUSH
9206: LD_INT 0
9208: ST_TO_ADDR
// nat_area := nature_area ;
9209: LD_ADDR_VAR 0 4
9213: PUSH
9214: LD_INT 24
9216: ST_TO_ADDR
// InitHc ;
9217: CALL_OW 19
// for i = 1 to 4 do
9221: LD_ADDR_VAR 0 2
9225: PUSH
9226: DOUBLE
9227: LD_INT 1
9229: DEC
9230: ST_TO_ADDR
9231: LD_INT 4
9233: PUSH
9234: FOR_TO
9235: IFFALSE 9282
// begin hc_class = 18 ;
9237: LD_ADDR_OWVAR 28
9241: PUSH
9242: LD_INT 18
9244: ST_TO_ADDR
// hc_gallery =  ;
9245: LD_ADDR_OWVAR 33
9249: PUSH
9250: LD_STRING 
9252: ST_TO_ADDR
// animal := CreateHuman ;
9253: LD_ADDR_VAR 0 3
9257: PUSH
9258: CALL_OW 44
9262: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9263: LD_VAR 0 3
9267: PPUSH
9268: LD_VAR 0 4
9272: PPUSH
9273: LD_INT 0
9275: PPUSH
9276: CALL_OW 49
// end ;
9280: GO 9234
9282: POP
9283: POP
// for i = 1 to 3 do
9284: LD_ADDR_VAR 0 2
9288: PUSH
9289: DOUBLE
9290: LD_INT 1
9292: DEC
9293: ST_TO_ADDR
9294: LD_INT 3
9296: PUSH
9297: FOR_TO
9298: IFFALSE 9392
// begin hc_class = class_apeman ;
9300: LD_ADDR_OWVAR 28
9304: PUSH
9305: LD_INT 12
9307: ST_TO_ADDR
// hc_gallery =  ;
9308: LD_ADDR_OWVAR 33
9312: PUSH
9313: LD_STRING 
9315: ST_TO_ADDR
// hc_agressivity = 0 ;
9316: LD_ADDR_OWVAR 35
9320: PUSH
9321: LD_INT 0
9323: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
9324: LD_ADDR_OWVAR 31
9328: PUSH
9329: LD_INT 1
9331: PPUSH
9332: LD_INT 3
9334: PPUSH
9335: CALL_OW 12
9339: PUSH
9340: LD_INT 1
9342: PPUSH
9343: LD_INT 3
9345: PPUSH
9346: CALL_OW 12
9350: PUSH
9351: LD_INT 0
9353: PUSH
9354: LD_INT 0
9356: PUSH
9357: EMPTY
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: ST_TO_ADDR
// animal := CreateHuman ;
9363: LD_ADDR_VAR 0 3
9367: PUSH
9368: CALL_OW 44
9372: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9373: LD_VAR 0 3
9377: PPUSH
9378: LD_VAR 0 4
9382: PPUSH
9383: LD_INT 0
9385: PPUSH
9386: CALL_OW 49
// end ;
9390: GO 9297
9392: POP
9393: POP
// for i = 1 to 3 do
9394: LD_ADDR_VAR 0 2
9398: PUSH
9399: DOUBLE
9400: LD_INT 1
9402: DEC
9403: ST_TO_ADDR
9404: LD_INT 3
9406: PUSH
9407: FOR_TO
9408: IFFALSE 9455
// begin hc_class = 13 ;
9410: LD_ADDR_OWVAR 28
9414: PUSH
9415: LD_INT 13
9417: ST_TO_ADDR
// hc_gallery =  ;
9418: LD_ADDR_OWVAR 33
9422: PUSH
9423: LD_STRING 
9425: ST_TO_ADDR
// animal := CreateHuman ;
9426: LD_ADDR_VAR 0 3
9430: PUSH
9431: CALL_OW 44
9435: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9436: LD_VAR 0 3
9440: PPUSH
9441: LD_VAR 0 4
9445: PPUSH
9446: LD_INT 0
9448: PPUSH
9449: CALL_OW 49
// end ;
9453: GO 9407
9455: POP
9456: POP
// for i = 1 to 3 do
9457: LD_ADDR_VAR 0 2
9461: PUSH
9462: DOUBLE
9463: LD_INT 1
9465: DEC
9466: ST_TO_ADDR
9467: LD_INT 3
9469: PUSH
9470: FOR_TO
9471: IFFALSE 9516
// begin hc_class = 20 ;
9473: LD_ADDR_OWVAR 28
9477: PUSH
9478: LD_INT 20
9480: ST_TO_ADDR
// hc_gallery =  ;
9481: LD_ADDR_OWVAR 33
9485: PUSH
9486: LD_STRING 
9488: ST_TO_ADDR
// animal := CreateHuman ;
9489: LD_ADDR_VAR 0 3
9493: PUSH
9494: CALL_OW 44
9498: ST_TO_ADDR
// PlaceUnitArea ( animal , lake_area , false ) ;
9499: LD_VAR 0 3
9503: PPUSH
9504: LD_INT 4
9506: PPUSH
9507: LD_INT 0
9509: PPUSH
9510: CALL_OW 49
// end ;
9514: GO 9470
9516: POP
9517: POP
// end ; end_of_file
9518: LD_VAR 0 1
9522: RET
// export function Action ; begin
9523: LD_INT 0
9525: PPUSH
// InGameOn ;
9526: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
9530: LD_EXP 14
9534: PPUSH
9535: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
9539: LD_EXP 14
9543: PPUSH
9544: LD_STRING D1-JMM-1
9546: PPUSH
9547: CALL_OW 88
// Say ( Roth , D1-Roth-1 ) ;
9551: LD_EXP 15
9555: PPUSH
9556: LD_STRING D1-Roth-1
9558: PPUSH
9559: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
9563: LD_EXP 14
9567: PPUSH
9568: LD_STRING D1-JMM-2
9570: PPUSH
9571: CALL_OW 88
// Say ( Roth , D1-Roth-2 ) ;
9575: LD_EXP 15
9579: PPUSH
9580: LD_STRING D1-Roth-2
9582: PPUSH
9583: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9587: LD_EXP 14
9591: PPUSH
9592: LD_STRING D1-JMM-3
9594: PPUSH
9595: CALL_OW 88
// Say ( Roth , D1-Roth-3 ) ;
9599: LD_EXP 15
9603: PPUSH
9604: LD_STRING D1-Roth-3
9606: PPUSH
9607: CALL_OW 88
// ComInvisible ( Roth ) ;
9611: LD_EXP 15
9615: PPUSH
9616: CALL_OW 152
// wait ( 0 0$1.3 ) ;
9620: LD_INT 46
9622: PPUSH
9623: CALL_OW 67
// Say ( JMM , D1-JMM-4 ) ;
9627: LD_EXP 14
9631: PPUSH
9632: LD_STRING D1-JMM-4
9634: PPUSH
9635: CALL_OW 88
// wait ( 0 0$0.3 ) ;
9639: LD_INT 10
9641: PPUSH
9642: CALL_OW 67
// ComTurnUnit ( Roth , JMM ) ;
9646: LD_EXP 15
9650: PPUSH
9651: LD_EXP 14
9655: PPUSH
9656: CALL_OW 119
// Say ( JMM , D1-JMM-4a ) ;
9660: LD_EXP 14
9664: PPUSH
9665: LD_STRING D1-JMM-4a
9667: PPUSH
9668: CALL_OW 88
// Say ( Roth , D1-Roth-4 ) ;
9672: LD_EXP 15
9676: PPUSH
9677: LD_STRING D1-Roth-4
9679: PPUSH
9680: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
9684: LD_EXP 14
9688: PPUSH
9689: LD_STRING D1-JMM-5
9691: PPUSH
9692: CALL_OW 88
// Say ( Roth , D1-Roth-5 ) ;
9696: LD_EXP 15
9700: PPUSH
9701: LD_STRING D1-Roth-5
9703: PPUSH
9704: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
9708: LD_EXP 14
9712: PPUSH
9713: LD_STRING D1-JMM-6
9715: PPUSH
9716: CALL_OW 88
// Say ( Roth , D1-Roth-6 ) ;
9720: LD_EXP 15
9724: PPUSH
9725: LD_STRING D1-Roth-6
9727: PPUSH
9728: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
9732: LD_EXP 14
9736: PPUSH
9737: LD_STRING D1-JMM-7
9739: PPUSH
9740: CALL_OW 88
// ComMoveXY ( Powell , GetX ( JMM ) , GetY ( JMM ) ) ;
9744: LD_EXP 16
9748: PPUSH
9749: LD_EXP 14
9753: PPUSH
9754: CALL_OW 250
9758: PPUSH
9759: LD_EXP 14
9763: PPUSH
9764: CALL_OW 251
9768: PPUSH
9769: CALL_OW 111
// Say ( Roth , D1-Roth-7 ) ;
9773: LD_EXP 15
9777: PPUSH
9778: LD_STRING D1-Roth-7
9780: PPUSH
9781: CALL_OW 88
// repeat wait ( 0 0$0.3 ) ;
9785: LD_INT 10
9787: PPUSH
9788: CALL_OW 67
// until GetDistUnits ( Powell , JMM ) < 6 ;
9792: LD_EXP 16
9796: PPUSH
9797: LD_EXP 14
9801: PPUSH
9802: CALL_OW 296
9806: PUSH
9807: LD_INT 6
9809: LESS
9810: IFFALSE 9785
// ComTurnUnit ( Powell , JMM ) ;
9812: LD_EXP 16
9816: PPUSH
9817: LD_EXP 14
9821: PPUSH
9822: CALL_OW 119
// Say ( Powell , D1-Pow-7 ) ;
9826: LD_EXP 16
9830: PPUSH
9831: LD_STRING D1-Pow-7
9833: PPUSH
9834: CALL_OW 88
// ComTurnUnit ( JMM , Powell ) ;
9838: LD_EXP 14
9842: PPUSH
9843: LD_EXP 16
9847: PPUSH
9848: CALL_OW 119
// ComTurnUnit ( Roth , Powell ) ;
9852: LD_EXP 15
9856: PPUSH
9857: LD_EXP 16
9861: PPUSH
9862: CALL_OW 119
// Say ( JMM , D1-JMM-8 ) ;
9866: LD_EXP 14
9870: PPUSH
9871: LD_STRING D1-JMM-8
9873: PPUSH
9874: CALL_OW 88
// Say ( Powell , D1-Pow-8 ) ;
9878: LD_EXP 16
9882: PPUSH
9883: LD_STRING D1-Pow-8
9885: PPUSH
9886: CALL_OW 88
// Say ( JMM , D1-JMM-9 ) ;
9890: LD_EXP 14
9894: PPUSH
9895: LD_STRING D1-JMM-9
9897: PPUSH
9898: CALL_OW 88
// ComMoveXY ( Powell , 124 , 61 ) ;
9902: LD_EXP 16
9906: PPUSH
9907: LD_INT 124
9909: PPUSH
9910: LD_INT 61
9912: PPUSH
9913: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9917: LD_INT 35
9919: PPUSH
9920: CALL_OW 67
// until GetDistUnits ( JMM , Powell ) > 6 ;
9924: LD_EXP 14
9928: PPUSH
9929: LD_EXP 16
9933: PPUSH
9934: CALL_OW 296
9938: PUSH
9939: LD_INT 6
9941: GREATER
9942: IFFALSE 9917
// SayRadio ( Powell , D1-Pow-9 ) ;
9944: LD_EXP 16
9948: PPUSH
9949: LD_STRING D1-Pow-9
9951: PPUSH
9952: CALL_OW 94
// RemoveUnit ( Powell ) ;
9956: LD_EXP 16
9960: PPUSH
9961: CALL_OW 64
// PlaceHumanInUnit ( Powell , ambar0 ) ;
9965: LD_EXP 16
9969: PPUSH
9970: LD_INT 18
9972: PPUSH
9973: CALL_OW 52
// if Joan and not Joan in selected then
9977: LD_EXP 36
9981: PUSH
9982: LD_EXP 36
9986: PUSH
9987: LD_EXP 3
9991: IN
9992: NOT
9993: AND
9994: IFFALSE 10008
// SayRadio ( Joan , D1-Joan-9 ) ;
9996: LD_EXP 36
10000: PPUSH
10001: LD_STRING D1-Joan-9
10003: PPUSH
10004: CALL_OW 94
// ComTurnUnit ( Roth , JMM ) ;
10008: LD_EXP 15
10012: PPUSH
10013: LD_EXP 14
10017: PPUSH
10018: CALL_OW 119
// ComTurnUnit ( JMM , Roth ) ;
10022: LD_EXP 14
10026: PPUSH
10027: LD_EXP 15
10031: PPUSH
10032: CALL_OW 119
// Say ( Roth , D1-Roth-9 ) ;
10036: LD_EXP 15
10040: PPUSH
10041: LD_STRING D1-Roth-9
10043: PPUSH
10044: CALL_OW 88
// Say ( JMM , D1-JMM-10 ) ;
10048: LD_EXP 14
10052: PPUSH
10053: LD_STRING D1-JMM-10
10055: PPUSH
10056: CALL_OW 88
// InGameOff ;
10060: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
10064: LD_STRING M1
10066: PPUSH
10067: CALL_OW 337
// if Difficulty < 3 then
10071: LD_OWVAR 67
10075: PUSH
10076: LD_INT 3
10078: LESS
10079: IFFALSE 10091
// ChangeSideFog ( 4 , 7 ) ;
10081: LD_INT 4
10083: PPUSH
10084: LD_INT 7
10086: PPUSH
10087: CALL_OW 343
// SaveForQuickRestart ;
10091: CALL_OW 22
// SetAttitude ( 7 , 1 , att_enemy , true ) ;
10095: LD_INT 7
10097: PPUSH
10098: LD_INT 1
10100: PPUSH
10101: LD_INT 2
10103: PPUSH
10104: LD_INT 1
10106: PPUSH
10107: CALL_OW 80
// wait ( 0 0$3 ) ;
10111: LD_INT 105
10113: PPUSH
10114: CALL_OW 67
// ComMoveXY ( Roth , 124 , 18 ) ;
10118: LD_EXP 15
10122: PPUSH
10123: LD_INT 124
10125: PPUSH
10126: LD_INT 18
10128: PPUSH
10129: CALL_OW 111
// AddComInvisible ( Roth ) ;
10133: LD_EXP 15
10137: PPUSH
10138: CALL_OW 212
// wait ( 0 0$30 ) ;
10142: LD_INT 1050
10144: PPUSH
10145: CALL_OW 67
// AddComWait ( Roth , 1 1$00 ) ;
10149: LD_EXP 15
10153: PPUSH
10154: LD_INT 2100
10156: PPUSH
10157: CALL_OW 202
// AddComMoveXY ( Roth , 156 , 20 ) ;
10161: LD_EXP 15
10165: PPUSH
10166: LD_INT 156
10168: PPUSH
10169: LD_INT 20
10171: PPUSH
10172: CALL_OW 171
// AddComMoveXY ( Roth , 178 , 42 ) ;
10176: LD_EXP 15
10180: PPUSH
10181: LD_INT 178
10183: PPUSH
10184: LD_INT 42
10186: PPUSH
10187: CALL_OW 171
// AddComInvisible ( Roth ) ;
10191: LD_EXP 15
10195: PPUSH
10196: CALL_OW 212
// end ;
10200: LD_VAR 0 1
10204: RET
// every 0 0$1 do var i , tmp ;
10205: GO 10207
10207: DISABLE
10208: LD_INT 0
10210: PPUSH
10211: PPUSH
// begin tmp := selected union friends ;
10212: LD_ADDR_VAR 0 2
10216: PUSH
10217: LD_EXP 3
10221: PUSH
10222: LD_EXP 4
10226: UNION
10227: ST_TO_ADDR
// if not tmp then
10228: LD_VAR 0 2
10232: NOT
10233: IFFALSE 10237
// exit ;
10235: GO 10309
// repeat wait ( 0 0$1 ) ;
10237: LD_INT 35
10239: PPUSH
10240: CALL_OW 67
// for i in tmp do
10244: LD_ADDR_VAR 0 1
10248: PUSH
10249: LD_VAR 0 2
10253: PUSH
10254: FOR_IN
10255: IFFALSE 10300
// if CanSpot ( JMM , i ) then
10257: LD_EXP 14
10261: PPUSH
10262: LD_VAR 0 1
10266: PPUSH
10267: CALL 8968 0 2
10271: IFFALSE 10298
// begin tmp := tmp diff i ;
10273: LD_ADDR_VAR 0 2
10277: PUSH
10278: LD_VAR 0 2
10282: PUSH
10283: LD_VAR 0 1
10287: DIFF
10288: ST_TO_ADDR
// Spot ( i ) ;
10289: LD_VAR 0 1
10293: PPUSH
10294: CALL 10312 0 1
// end ;
10298: GO 10254
10300: POP
10301: POP
// until not tmp ;
10302: LD_VAR 0 2
10306: NOT
10307: IFFALSE 10237
// end ;
10309: PPOPN 2
10311: END
// export function Spot ( unit ) ; var building , side , joined ; begin
10312: LD_INT 0
10314: PPUSH
10315: PPUSH
10316: PPUSH
10317: PPUSH
// if not unit or GetSide ( unit ) <> 4 or IsSleeping ( unit ) or not IsOk ( unit ) then
10318: LD_VAR 0 1
10322: NOT
10323: PUSH
10324: LD_VAR 0 1
10328: PPUSH
10329: CALL_OW 255
10333: PUSH
10334: LD_INT 4
10336: NONEQUAL
10337: OR
10338: PUSH
10339: LD_VAR 0 1
10343: PPUSH
10344: CALL_OW 555
10348: OR
10349: PUSH
10350: LD_VAR 0 1
10354: PPUSH
10355: CALL_OW 302
10359: NOT
10360: OR
10361: IFFALSE 10365
// exit ;
10363: GO 12247
// InGameOn ;
10365: CALL_OW 8
// side := 7 ;
10369: LD_ADDR_VAR 0 4
10373: PUSH
10374: LD_INT 7
10376: ST_TO_ADDR
// joined := false ;
10377: LD_ADDR_VAR 0 5
10381: PUSH
10382: LD_INT 0
10384: ST_TO_ADDR
// building := IsInUnit ( unit ) ;
10385: LD_ADDR_VAR 0 3
10389: PUSH
10390: LD_VAR 0 1
10394: PPUSH
10395: CALL_OW 310
10399: ST_TO_ADDR
// if building then
10400: LD_VAR 0 3
10404: IFFALSE 10463
// begin SetSide ( JMM , GetSide ( unit ) ) ;
10406: LD_EXP 14
10410: PPUSH
10411: LD_VAR 0 1
10415: PPUSH
10416: CALL_OW 255
10420: PPUSH
10421: CALL_OW 235
// ComEnterUnit ( JMM , building ) ;
10425: LD_EXP 14
10429: PPUSH
10430: LD_VAR 0 3
10434: PPUSH
10435: CALL_OW 120
// repeat wait ( 3 ) ;
10439: LD_INT 3
10441: PPUSH
10442: CALL_OW 67
// until IsInUnit ( JMM ) ;
10446: LD_EXP 14
10450: PPUSH
10451: CALL_OW 310
10455: IFFALSE 10439
// DialogueOn ;
10457: CALL_OW 6
// end else
10461: GO 10495
// begin ComTurnUnit ( JMM , unit ) ;
10463: LD_EXP 14
10467: PPUSH
10468: LD_VAR 0 1
10472: PPUSH
10473: CALL_OW 119
// ComTurnUnit ( unit , JMM ) ;
10477: LD_VAR 0 1
10481: PPUSH
10482: LD_EXP 14
10486: PPUSH
10487: CALL_OW 119
// DialogueOn ;
10491: CALL_OW 6
// end ; if unit = Joan then
10495: LD_VAR 0 1
10499: PUSH
10500: LD_EXP 36
10504: EQUAL
10505: IFFALSE 10615
// begin joined := true ;
10507: LD_ADDR_VAR 0 5
10511: PUSH
10512: LD_INT 1
10514: ST_TO_ADDR
// if Joan in selected then
10515: LD_EXP 36
10519: PUSH
10520: LD_EXP 3
10524: IN
10525: IFFALSE 10553
// begin Say ( Joan , D3-Joan-Joan-1 ) ;
10527: LD_EXP 36
10531: PPUSH
10532: LD_STRING D3-Joan-Joan-1
10534: PPUSH
10535: CALL_OW 88
// Say ( JMM , D3-Joan-JMM-1 ) ;
10539: LD_EXP 14
10543: PPUSH
10544: LD_STRING D3-Joan-JMM-1
10546: PPUSH
10547: CALL_OW 88
// end else
10551: GO 10613
// begin Say ( Joan , D4-Joan-Joan-1 ) ;
10553: LD_EXP 36
10557: PPUSH
10558: LD_STRING D4-Joan-Joan-1
10560: PPUSH
10561: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-1 ) ;
10565: LD_EXP 14
10569: PPUSH
10570: LD_STRING D4-Joan-JMM-1
10572: PPUSH
10573: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-2 ) ;
10577: LD_EXP 36
10581: PPUSH
10582: LD_STRING D4-Joan-Joan-2
10584: PPUSH
10585: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-2 ) ;
10589: LD_EXP 14
10593: PPUSH
10594: LD_STRING D4-Joan-JMM-2
10596: PPUSH
10597: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-3 ) ;
10601: LD_EXP 36
10605: PPUSH
10606: LD_STRING D4-Joan-Joan-3
10608: PPUSH
10609: CALL_OW 88
// end ; end else
10613: GO 12055
// if unit = Lisa then
10615: LD_VAR 0 1
10619: PUSH
10620: LD_EXP 23
10624: EQUAL
10625: IFFALSE 10817
// begin if Lisa in selected then
10627: LD_EXP 23
10631: PUSH
10632: LD_EXP 3
10636: IN
10637: IFFALSE 10750
// begin if GetSide ( Joan ) = 7 then
10639: LD_EXP 36
10643: PPUSH
10644: CALL_OW 255
10648: PUSH
10649: LD_INT 7
10651: EQUAL
10652: IFFALSE 10716
// begin Say ( Lisa , D3-LisaJ-Lisa-1 ) ;
10654: LD_EXP 23
10658: PPUSH
10659: LD_STRING D3-LisaJ-Lisa-1
10661: PPUSH
10662: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-1 ) ;
10666: LD_EXP 14
10670: PPUSH
10671: LD_STRING D3-LisaJ-JMM-1
10673: PPUSH
10674: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-2 ) ;
10678: LD_EXP 23
10682: PPUSH
10683: LD_STRING D3-LisaJ-Lisa-2
10685: PPUSH
10686: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-2 ) ;
10690: LD_EXP 14
10694: PPUSH
10695: LD_STRING D3-LisaJ-JMM-2
10697: PPUSH
10698: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-3 ) ;
10702: LD_EXP 23
10706: PPUSH
10707: LD_STRING D3-LisaJ-Lisa-3
10709: PPUSH
10710: CALL_OW 88
// end else
10714: GO 10748
// begin Say ( Lisa , D3-LisaL-Lisa-1 ) ;
10716: LD_EXP 23
10720: PPUSH
10721: LD_STRING D3-LisaL-Lisa-1
10723: PPUSH
10724: CALL_OW 88
// Say ( JMM , D3-LisaL-JMM-1 ) ;
10728: LD_EXP 14
10732: PPUSH
10733: LD_STRING D3-LisaL-JMM-1
10735: PPUSH
10736: CALL_OW 88
// joined := true ;
10740: LD_ADDR_VAR 0 5
10744: PUSH
10745: LD_INT 1
10747: ST_TO_ADDR
// end ; end else
10748: GO 10815
// begin if GetSide ( Joan ) = 7 then
10750: LD_EXP 36
10754: PPUSH
10755: CALL_OW 255
10759: PUSH
10760: LD_INT 7
10762: EQUAL
10763: IFFALSE 10803
// begin Say ( Lisa , D4-LisaJ-Lisa-1 ) ;
10765: LD_EXP 23
10769: PPUSH
10770: LD_STRING D4-LisaJ-Lisa-1
10772: PPUSH
10773: CALL_OW 88
// Say ( JMM , D4-LisaJ-JMM-1 ) ;
10777: LD_EXP 14
10781: PPUSH
10782: LD_STRING D4-LisaJ-JMM-1
10784: PPUSH
10785: CALL_OW 88
// Say ( Lisa , D4-LisaJ-Lisa-2 ) ;
10789: LD_EXP 23
10793: PPUSH
10794: LD_STRING D4-LisaJ-Lisa-2
10796: PPUSH
10797: CALL_OW 88
// end else
10801: GO 10815
// begin Say ( Lisa , D4-LisaL-Lisa-1 ) ;
10803: LD_EXP 23
10807: PPUSH
10808: LD_STRING D4-LisaL-Lisa-1
10810: PPUSH
10811: CALL_OW 88
// end ; end ; end else
10815: GO 12055
// if unit = Frank then
10817: LD_VAR 0 1
10821: PUSH
10822: LD_EXP 33
10826: EQUAL
10827: IFFALSE 10967
// begin joined := true ;
10829: LD_ADDR_VAR 0 5
10833: PUSH
10834: LD_INT 1
10836: ST_TO_ADDR
// if Frank in selected then
10837: LD_EXP 33
10841: PUSH
10842: LD_EXP 3
10846: IN
10847: IFFALSE 10917
// begin Say ( Frank , D3-Frank-Frank-1 ) ;
10849: LD_EXP 33
10853: PPUSH
10854: LD_STRING D3-Frank-Frank-1
10856: PPUSH
10857: CALL_OW 88
// Say ( JMM , D3-Frank-JMM-1 ) ;
10861: LD_EXP 14
10865: PPUSH
10866: LD_STRING D3-Frank-JMM-1
10868: PPUSH
10869: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-2 ) ;
10873: LD_EXP 33
10877: PPUSH
10878: LD_STRING D3-Frank-Frank-2
10880: PPUSH
10881: CALL_OW 88
// if reached_lab then
10885: LD_EXP 5
10889: IFFALSE 10915
// begin Say ( JMM , D3-Frank-JMM-2 ) ;
10891: LD_EXP 14
10895: PPUSH
10896: LD_STRING D3-Frank-JMM-2
10898: PPUSH
10899: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-3 ) ;
10903: LD_EXP 33
10907: PPUSH
10908: LD_STRING D3-Frank-Frank-3
10910: PPUSH
10911: CALL_OW 88
// end ; end else
10915: GO 10965
// begin Say ( Frank , D4-Frank-Frank-1 ) ;
10917: LD_EXP 33
10921: PPUSH
10922: LD_STRING D4-Frank-Frank-1
10924: PPUSH
10925: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-1 ) ;
10929: LD_EXP 14
10933: PPUSH
10934: LD_STRING D4-Frank-JMM-1
10936: PPUSH
10937: CALL_OW 88
// Say ( Frank , D4-Frank-Frank-2 ) ;
10941: LD_EXP 33
10945: PPUSH
10946: LD_STRING D4-Frank-Frank-2
10948: PPUSH
10949: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-2 ) ;
10953: LD_EXP 14
10957: PPUSH
10958: LD_STRING D4-Frank-JMM-2
10960: PPUSH
10961: CALL_OW 88
// end ; end else
10965: GO 12055
// if unit = Brown then
10967: LD_VAR 0 1
10971: PUSH
10972: LD_EXP 28
10976: EQUAL
10977: IFFALSE 11073
// begin if Brown in selected or gamma_commander = 2 then
10979: LD_EXP 28
10983: PUSH
10984: LD_EXP 3
10988: IN
10989: PUSH
10990: LD_EXP 10
10994: PUSH
10995: LD_INT 2
10997: EQUAL
10998: OR
10999: IFFALSE 11035
// begin Say ( Brown , D3-Soldier1-Sol1-1 ) ;
11001: LD_EXP 28
11005: PPUSH
11006: LD_STRING D3-Soldier1-Sol1-1
11008: PPUSH
11009: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
11013: LD_EXP 14
11017: PPUSH
11018: LD_STRING D3-Soldier1-JMM-1
11020: PPUSH
11021: CALL_OW 88
// joined := true ;
11025: LD_ADDR_VAR 0 5
11029: PUSH
11030: LD_INT 1
11032: ST_TO_ADDR
// end else
11033: GO 11071
// begin Say ( Brown , D4-Soldier2-Sol1-1 ) ;
11035: LD_EXP 28
11039: PPUSH
11040: LD_STRING D4-Soldier2-Sol1-1
11042: PPUSH
11043: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11047: LD_EXP 14
11051: PPUSH
11052: LD_STRING D4-Soldier1-JMM-1
11054: PPUSH
11055: CALL_OW 88
// Say ( Brown , D4-Soldier2-Sol1-2 ) ;
11059: LD_EXP 28
11063: PPUSH
11064: LD_STRING D4-Soldier2-Sol1-2
11066: PPUSH
11067: CALL_OW 88
// end ; end else
11071: GO 12055
// if unit = Donaldson then
11073: LD_VAR 0 1
11077: PUSH
11078: LD_EXP 24
11082: EQUAL
11083: IFFALSE 11179
// begin if Donaldson in selected or gamma_commander = 1 then
11085: LD_EXP 24
11089: PUSH
11090: LD_EXP 3
11094: IN
11095: PUSH
11096: LD_EXP 10
11100: PUSH
11101: LD_INT 1
11103: EQUAL
11104: OR
11105: IFFALSE 11141
// begin Say ( Donaldson , D3-Soldier2-FSol2-1 ) ;
11107: LD_EXP 24
11111: PPUSH
11112: LD_STRING D3-Soldier2-FSol2-1
11114: PPUSH
11115: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11119: LD_EXP 14
11123: PPUSH
11124: LD_STRING D3-Soldier2-JMM-1
11126: PPUSH
11127: CALL_OW 88
// joined := true ;
11131: LD_ADDR_VAR 0 5
11135: PUSH
11136: LD_INT 1
11138: ST_TO_ADDR
// end else
11139: GO 11177
// begin Say ( unit , D4-Soldier1-FSol1-1 ) ;
11141: LD_VAR 0 1
11145: PPUSH
11146: LD_STRING D4-Soldier1-FSol1-1
11148: PPUSH
11149: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11153: LD_EXP 14
11157: PPUSH
11158: LD_STRING D4-Soldier1-JMM-1
11160: PPUSH
11161: CALL_OW 88
// Say ( unit , D4-Soldier1-FSol1-2 ) ;
11165: LD_VAR 0 1
11169: PPUSH
11170: LD_STRING D4-Soldier1-FSol1-2
11172: PPUSH
11173: CALL_OW 88
// end ; end else
11177: GO 12055
// if unit = Cyrus then
11179: LD_VAR 0 1
11183: PUSH
11184: LD_EXP 26
11188: EQUAL
11189: IFFALSE 11263
// begin if Cyrus in selected then
11191: LD_EXP 26
11195: PUSH
11196: LD_EXP 3
11200: IN
11201: IFFALSE 11237
// begin Say ( Cyrus , D3-Cyrus-Cyrus-1 ) ;
11203: LD_EXP 26
11207: PPUSH
11208: LD_STRING D3-Cyrus-Cyrus-1
11210: PPUSH
11211: CALL_OW 88
// Say ( JMM , D3-Cyrus-JMM-1 ) ;
11215: LD_EXP 14
11219: PPUSH
11220: LD_STRING D3-Cyrus-JMM-1
11222: PPUSH
11223: CALL_OW 88
// joined := true ;
11227: LD_ADDR_VAR 0 5
11231: PUSH
11232: LD_INT 1
11234: ST_TO_ADDR
// end else
11235: GO 11261
// begin Say ( Cyrus , D4-Cyrus-Cyrus-1 ) ;
11237: LD_EXP 26
11241: PPUSH
11242: LD_STRING D4-Cyrus-Cyrus-1
11244: PPUSH
11245: CALL_OW 88
// Say ( JMM , D4-Cyrus-JMM-1 ) ;
11249: LD_EXP 14
11253: PPUSH
11254: LD_STRING D4-Cyrus-JMM-1
11256: PPUSH
11257: CALL_OW 88
// end ; end else
11261: GO 12055
// if unit = Bobby then
11263: LD_VAR 0 1
11267: PUSH
11268: LD_EXP 25
11272: EQUAL
11273: IFFALSE 11359
// begin if Bobby in selected then
11275: LD_EXP 25
11279: PUSH
11280: LD_EXP 3
11284: IN
11285: IFFALSE 11321
// begin Say ( Bobby , D3-Bobby-Bobby-1 ) ;
11287: LD_EXP 25
11291: PPUSH
11292: LD_STRING D3-Bobby-Bobby-1
11294: PPUSH
11295: CALL_OW 88
// Say ( JMM , D3-Bobby-JMM-1 ) ;
11299: LD_EXP 14
11303: PPUSH
11304: LD_STRING D3-Bobby-JMM-1
11306: PPUSH
11307: CALL_OW 88
// joined := true ;
11311: LD_ADDR_VAR 0 5
11315: PUSH
11316: LD_INT 1
11318: ST_TO_ADDR
// end else
11319: GO 11357
// begin Say ( Bobby , D4-Bobby-Bobby-1 ) ;
11321: LD_EXP 25
11325: PPUSH
11326: LD_STRING D4-Bobby-Bobby-1
11328: PPUSH
11329: CALL_OW 88
// Say ( JMM , D4-Bobby-JMM-1 ) ;
11333: LD_EXP 14
11337: PPUSH
11338: LD_STRING D4-Bobby-JMM-1
11340: PPUSH
11341: CALL_OW 88
// Say ( Bobby , D4-Bobby-Bobby-2 ) ;
11345: LD_EXP 25
11349: PPUSH
11350: LD_STRING D4-Bobby-Bobby-2
11352: PPUSH
11353: CALL_OW 88
// end ; end else
11357: GO 12055
// if unit = Cornel then
11359: LD_VAR 0 1
11363: PUSH
11364: LD_EXP 31
11368: EQUAL
11369: IFFALSE 11467
// begin if Cornel in selected then
11371: LD_EXP 31
11375: PUSH
11376: LD_EXP 3
11380: IN
11381: IFFALSE 11429
// begin Say ( Cornel , D3-Mark-Corn-1 ) ;
11383: LD_EXP 31
11387: PPUSH
11388: LD_STRING D3-Mark-Corn-1
11390: PPUSH
11391: CALL_OW 88
// Say ( JMM , D3-Mark-JMM-1 ) ;
11395: LD_EXP 14
11399: PPUSH
11400: LD_STRING D3-Mark-JMM-1
11402: PPUSH
11403: CALL_OW 88
// Say ( Cornel , D3-Mark-Corn-2 ) ;
11407: LD_EXP 31
11411: PPUSH
11412: LD_STRING D3-Mark-Corn-2
11414: PPUSH
11415: CALL_OW 88
// joined := true ;
11419: LD_ADDR_VAR 0 5
11423: PUSH
11424: LD_INT 1
11426: ST_TO_ADDR
// end else
11427: GO 11465
// begin Say ( Cornel , D4-Mark-Corn-1 ) ;
11429: LD_EXP 31
11433: PPUSH
11434: LD_STRING D4-Mark-Corn-1
11436: PPUSH
11437: CALL_OW 88
// Say ( JMM , D3-Joan-JMM-1 ) ;
11441: LD_EXP 14
11445: PPUSH
11446: LD_STRING D3-Joan-JMM-1
11448: PPUSH
11449: CALL_OW 88
// Say ( Cornel , D4-Mark-Corn-2 ) ;
11453: LD_EXP 31
11457: PPUSH
11458: LD_STRING D4-Mark-Corn-2
11460: PPUSH
11461: CALL_OW 88
// end ; end else
11465: GO 12055
// if unit = Gary then
11467: LD_VAR 0 1
11471: PUSH
11472: LD_EXP 32
11476: EQUAL
11477: IFFALSE 11561
// begin if Gary in selected then
11479: LD_EXP 32
11483: PUSH
11484: LD_EXP 3
11488: IN
11489: IFFALSE 11525
// begin Say ( Gary , D3-Gary-Gary-1 ) ;
11491: LD_EXP 32
11495: PPUSH
11496: LD_STRING D3-Gary-Gary-1
11498: PPUSH
11499: CALL_OW 88
// Say ( JMM , D3-Gary-JMM-1 ) ;
11503: LD_EXP 14
11507: PPUSH
11508: LD_STRING D3-Gary-JMM-1
11510: PPUSH
11511: CALL_OW 88
// joined := true ;
11515: LD_ADDR_VAR 0 5
11519: PUSH
11520: LD_INT 1
11522: ST_TO_ADDR
// end else
11523: GO 11559
// begin Say ( Gary , D4-Gary-Gary-1 ) ;
11525: LD_EXP 32
11529: PPUSH
11530: LD_STRING D4-Gary-Gary-1
11532: PPUSH
11533: CALL_OW 88
// SetSide ( Gary , 1 ) ;
11537: LD_EXP 32
11541: PPUSH
11542: LD_INT 1
11544: PPUSH
11545: CALL_OW 235
// DialogueOff ;
11549: CALL_OW 7
// InGameOff ;
11553: CALL_OW 9
// exit ;
11557: GO 12247
// end ; end else
11559: GO 12055
// if unit = Kikuchi then
11561: LD_VAR 0 1
11565: PUSH
11566: LD_EXP 34
11570: EQUAL
11571: IFFALSE 11655
// begin if Kikuchi in selected then
11573: LD_EXP 34
11577: PUSH
11578: LD_EXP 3
11582: IN
11583: IFFALSE 11619
// begin Say ( Kikuchi , D3-Yamako-Yam-1 ) ;
11585: LD_EXP 34
11589: PPUSH
11590: LD_STRING D3-Yamako-Yam-1
11592: PPUSH
11593: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11597: LD_EXP 14
11601: PPUSH
11602: LD_STRING D3-Soldier2-JMM-1
11604: PPUSH
11605: CALL_OW 88
// joined := true ;
11609: LD_ADDR_VAR 0 5
11613: PUSH
11614: LD_INT 1
11616: ST_TO_ADDR
// end else
11617: GO 11653
// begin Say ( Kikuchi , D4-Yamako-Yam-1 ) ;
11619: LD_EXP 34
11623: PPUSH
11624: LD_STRING D4-Yamako-Yam-1
11626: PPUSH
11627: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
11631: LD_EXP 34
11635: PPUSH
11636: LD_INT 1
11638: PPUSH
11639: CALL_OW 235
// DialogueOff ;
11643: CALL_OW 7
// InGameOff ;
11647: CALL_OW 9
// exit ;
11651: GO 12247
// end ; end else
11653: GO 12055
// if unit = Gladstone then
11655: LD_VAR 0 1
11659: PUSH
11660: LD_EXP 29
11664: EQUAL
11665: IFFALSE 11739
// begin if Gladstone in selected then
11667: LD_EXP 29
11671: PUSH
11672: LD_EXP 3
11676: IN
11677: IFFALSE 11713
// begin joined := true ;
11679: LD_ADDR_VAR 0 5
11683: PUSH
11684: LD_INT 1
11686: ST_TO_ADDR
// Say ( JMM , D3-Tim-JMM-1 ) ;
11687: LD_EXP 14
11691: PPUSH
11692: LD_STRING D3-Tim-JMM-1
11694: PPUSH
11695: CALL_OW 88
// Say ( Gladstone , D3-Tim-Glad-1 ) ;
11699: LD_EXP 29
11703: PPUSH
11704: LD_STRING D3-Tim-Glad-1
11706: PPUSH
11707: CALL_OW 88
// end else
11711: GO 11737
// begin Say ( JMM , D4-Tim-JMM-1 ) ;
11713: LD_EXP 14
11717: PPUSH
11718: LD_STRING D4-Tim-JMM-1
11720: PPUSH
11721: CALL_OW 88
// Say ( Gladstone , D4-Tim-Glad-1 ) ;
11725: LD_EXP 29
11729: PPUSH
11730: LD_STRING D4-Tim-Glad-1
11732: PPUSH
11733: CALL_OW 88
// end ; end else
11737: GO 12055
// if unit = Denis then
11739: LD_VAR 0 1
11743: PUSH
11744: LD_EXP 27
11748: EQUAL
11749: IFFALSE 11785
// begin joined := true ;
11751: LD_ADDR_VAR 0 5
11755: PUSH
11756: LD_INT 1
11758: ST_TO_ADDR
// Say ( Denis , D3-Denis-Den-1 ) ;
11759: LD_EXP 27
11763: PPUSH
11764: LD_STRING D3-Denis-Den-1
11766: PPUSH
11767: CALL_OW 88
// Say ( JMM , D3-Denis-JMM-1 ) ;
11771: LD_EXP 14
11775: PPUSH
11776: LD_STRING D3-Denis-JMM-1
11778: PPUSH
11779: CALL_OW 88
// end else
11783: GO 12055
// if unit = Simms then
11785: LD_VAR 0 1
11789: PUSH
11790: LD_EXP 35
11794: EQUAL
11795: IFFALSE 11831
// begin joined := true ;
11797: LD_ADDR_VAR 0 5
11801: PUSH
11802: LD_INT 1
11804: ST_TO_ADDR
// Say ( Simms , D3-Simms-Sim-1 ) ;
11805: LD_EXP 35
11809: PPUSH
11810: LD_STRING D3-Simms-Sim-1
11812: PPUSH
11813: CALL_OW 88
// Say ( JMM , D3-Simms-JMM-1 ) ;
11817: LD_EXP 14
11821: PPUSH
11822: LD_STRING D3-Simms-JMM-1
11824: PPUSH
11825: CALL_OW 88
// end else
11829: GO 12055
// if unit = DeltaDoctor then
11831: LD_VAR 0 1
11835: PUSH
11836: LD_EXP 37
11840: EQUAL
11841: IFFALSE 11877
// begin joined := true ;
11843: LD_ADDR_VAR 0 5
11847: PUSH
11848: LD_INT 1
11850: ST_TO_ADDR
// Say ( DeltaDoctor , D3-Soldier1-Sol1-1 ) ;
11851: LD_EXP 37
11855: PPUSH
11856: LD_STRING D3-Soldier1-Sol1-1
11858: PPUSH
11859: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
11863: LD_EXP 14
11867: PPUSH
11868: LD_STRING D3-Soldier1-JMM-1
11870: PPUSH
11871: CALL_OW 88
// end else
11875: GO 12055
// begin joined := unit in selected ;
11877: LD_ADDR_VAR 0 5
11881: PUSH
11882: LD_VAR 0 1
11886: PUSH
11887: LD_EXP 3
11891: IN
11892: ST_TO_ADDR
// if joined then
11893: LD_VAR 0 5
11897: IFFALSE 11966
// begin if GetSex ( unit ) = sex_male then
11899: LD_VAR 0 1
11903: PPUSH
11904: CALL_OW 258
11908: PUSH
11909: LD_INT 1
11911: EQUAL
11912: IFFALSE 11940
// begin Say ( unit , D3-Soldier1-Sol1-1 ) ;
11914: LD_VAR 0 1
11918: PPUSH
11919: LD_STRING D3-Soldier1-Sol1-1
11921: PPUSH
11922: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
11926: LD_EXP 14
11930: PPUSH
11931: LD_STRING D3-Soldier1-JMM-1
11933: PPUSH
11934: CALL_OW 88
// end else
11938: GO 11964
// begin Say ( unit , D3-Soldier2-FSol2-1 ) ;
11940: LD_VAR 0 1
11944: PPUSH
11945: LD_STRING D3-Soldier2-FSol2-1
11947: PPUSH
11948: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11952: LD_EXP 14
11956: PPUSH
11957: LD_STRING D3-Soldier2-JMM-1
11959: PPUSH
11960: CALL_OW 88
// end ; end else
11964: GO 12055
// begin if GetSex ( unit ) = sex_male then
11966: LD_VAR 0 1
11970: PPUSH
11971: CALL_OW 258
11975: PUSH
11976: LD_INT 1
11978: EQUAL
11979: IFFALSE 12019
// begin Say ( unit , D4-Soldier2-Sol1-1 ) ;
11981: LD_VAR 0 1
11985: PPUSH
11986: LD_STRING D4-Soldier2-Sol1-1
11988: PPUSH
11989: CALL_OW 88
// Say ( JMM , D4-Soldier2-JMM-1 ) ;
11993: LD_EXP 14
11997: PPUSH
11998: LD_STRING D4-Soldier2-JMM-1
12000: PPUSH
12001: CALL_OW 88
// Say ( unit , D4-Soldier2-Sol2-1 ) ;
12005: LD_VAR 0 1
12009: PPUSH
12010: LD_STRING D4-Soldier2-Sol2-1
12012: PPUSH
12013: CALL_OW 88
// end else
12017: GO 12055
// begin Say ( unit , D4-Soldier1-FSol1-1 ) ;
12019: LD_VAR 0 1
12023: PPUSH
12024: LD_STRING D4-Soldier1-FSol1-1
12026: PPUSH
12027: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
12031: LD_EXP 14
12035: PPUSH
12036: LD_STRING D4-Soldier1-JMM-1
12038: PPUSH
12039: CALL_OW 88
// Say ( unit , D4-Soldier1-FSol1-2 ) ;
12043: LD_VAR 0 1
12047: PPUSH
12048: LD_STRING D4-Soldier1-FSol1-2
12050: PPUSH
12051: CALL_OW 88
// end ; end ; end ; DialogueOff ;
12055: CALL_OW 7
// InGameOff ;
12059: CALL_OW 9
// if building then
12063: LD_VAR 0 3
12067: IFFALSE 12168
// begin SetSide ( JMM , side ) ;
12069: LD_EXP 14
12073: PPUSH
12074: LD_VAR 0 4
12078: PPUSH
12079: CALL_OW 235
// ComExitBuilding ( JMM ) ;
12083: LD_EXP 14
12087: PPUSH
12088: CALL_OW 122
// if joined then
12092: LD_VAR 0 5
12096: IFFALSE 12135
// begin SetSide ( unit , side ) ;
12098: LD_VAR 0 1
12102: PPUSH
12103: LD_VAR 0 4
12107: PPUSH
12108: CALL_OW 235
// SetSide ( building , 1 ) ;
12112: LD_VAR 0 3
12116: PPUSH
12117: LD_INT 1
12119: PPUSH
12120: CALL_OW 235
// ComExitBuilding ( unit ) ;
12124: LD_VAR 0 1
12128: PPUSH
12129: CALL_OW 122
// end else
12133: GO 12166
// begin wait ( 0 0$10 ) ;
12135: LD_INT 350
12137: PPUSH
12138: CALL_OW 67
// SetSide ( unit , 1 ) ;
12142: LD_VAR 0 1
12146: PPUSH
12147: LD_INT 1
12149: PPUSH
12150: CALL_OW 235
// SetSide ( building , 1 ) ;
12154: LD_VAR 0 3
12158: PPUSH
12159: LD_INT 1
12161: PPUSH
12162: CALL_OW 235
// end ; end else
12166: GO 12247
// begin ComStop ( [ JMM , unit ] ) ;
12168: LD_EXP 14
12172: PUSH
12173: LD_VAR 0 1
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: PPUSH
12182: CALL_OW 141
// if joined then
12186: LD_VAR 0 5
12190: IFFALSE 12208
// SetSide ( unit , side ) else
12192: LD_VAR 0 1
12196: PPUSH
12197: LD_VAR 0 4
12201: PPUSH
12202: CALL_OW 235
12206: GO 12247
// begin repeat wait ( 0 0$1 ) ;
12208: LD_INT 35
12210: PPUSH
12211: CALL_OW 67
// until GetDistUnits ( JMM , unit ) > 11 ;
12215: LD_EXP 14
12219: PPUSH
12220: LD_VAR 0 1
12224: PPUSH
12225: CALL_OW 296
12229: PUSH
12230: LD_INT 11
12232: GREATER
12233: IFFALSE 12208
// SetSide ( unit , 1 ) ;
12235: LD_VAR 0 1
12239: PPUSH
12240: LD_INT 1
12242: PPUSH
12243: CALL_OW 235
// end ; end ; end ;
12247: LD_VAR 0 2
12251: RET
// every 0 0$01 trigger IsInUnit ( JMM ) = amlab do
12252: LD_EXP 14
12256: PPUSH
12257: CALL_OW 310
12261: PUSH
12262: LD_INT 47
12264: EQUAL
12265: IFFALSE 12333
12267: GO 12269
12269: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
12270: LD_STRING M1a
12272: PPUSH
12273: CALL_OW 337
// SetTech ( tech_Soporific , 7 , state_researched ) ;
12277: LD_INT 13
12279: PPUSH
12280: LD_INT 7
12282: PPUSH
12283: LD_INT 2
12285: PPUSH
12286: CALL_OW 322
// SetTech ( tech_SpacAnom , 7 , state_researched ) ;
12290: LD_INT 29
12292: PPUSH
12293: LD_INT 7
12295: PPUSH
12296: LD_INT 2
12298: PPUSH
12299: CALL_OW 322
// SetClass ( JMM , class_bazooker ) ;
12303: LD_EXP 14
12307: PPUSH
12308: LD_INT 9
12310: PPUSH
12311: CALL_OW 336
// can_escape := true ;
12315: LD_ADDR_EXP 6
12319: PUSH
12320: LD_INT 1
12322: ST_TO_ADDR
// SetAreaMapShow ( escape_area , 1 ) ;
12323: LD_INT 19
12325: PPUSH
12326: LD_INT 1
12328: PPUSH
12329: CALL_OW 424
// end ;
12333: END
// every 0 0$1 trigger GetLives ( Powell ) < 999 do
12334: LD_EXP 16
12338: PPUSH
12339: CALL_OW 256
12343: PUSH
12344: LD_INT 999
12346: LESS
12347: IFFALSE 12398
12349: GO 12351
12351: DISABLE
// begin enable ;
12352: ENABLE
// if HexInfo ( 25 , 48 ) = Powell then
12353: LD_INT 25
12355: PPUSH
12356: LD_INT 48
12358: PPUSH
12359: CALL_OW 428
12363: PUSH
12364: LD_EXP 16
12368: EQUAL
12369: IFFALSE 12383
// begin RemoveUnit ( Powell ) ;
12371: LD_EXP 16
12375: PPUSH
12376: CALL_OW 64
// disable ;
12380: DISABLE
// end else
12381: GO 12398
// ComMoveXY ( Powell , 25 , 48 ) ;
12383: LD_EXP 16
12387: PPUSH
12388: LD_INT 25
12390: PPUSH
12391: LD_INT 48
12393: PPUSH
12394: CALL_OW 111
// end ;
12398: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do var i ;
12399: LD_INT 22
12401: PUSH
12402: LD_INT 4
12404: PUSH
12405: EMPTY
12406: LIST
12407: LIST
12408: PUSH
12409: LD_INT 21
12411: PUSH
12412: LD_INT 1
12414: PUSH
12415: EMPTY
12416: LIST
12417: LIST
12418: PUSH
12419: LD_INT 3
12421: PUSH
12422: LD_INT 24
12424: PUSH
12425: LD_INT 990
12427: PUSH
12428: EMPTY
12429: LIST
12430: LIST
12431: PUSH
12432: EMPTY
12433: LIST
12434: LIST
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: LIST
12440: PPUSH
12441: CALL_OW 69
12445: PUSH
12446: LD_EXP 15
12450: DIFF
12451: IFFALSE 12595
12453: GO 12455
12455: DISABLE
12456: LD_INT 0
12458: PPUSH
// begin enable ;
12459: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do
12460: LD_ADDR_VAR 0 1
12464: PUSH
12465: LD_INT 22
12467: PUSH
12468: LD_INT 4
12470: PUSH
12471: EMPTY
12472: LIST
12473: LIST
12474: PUSH
12475: LD_INT 21
12477: PUSH
12478: LD_INT 1
12480: PUSH
12481: EMPTY
12482: LIST
12483: LIST
12484: PUSH
12485: LD_INT 3
12487: PUSH
12488: LD_INT 24
12490: PUSH
12491: LD_INT 990
12493: PUSH
12494: EMPTY
12495: LIST
12496: LIST
12497: PUSH
12498: EMPTY
12499: LIST
12500: LIST
12501: PUSH
12502: EMPTY
12503: LIST
12504: LIST
12505: LIST
12506: PPUSH
12507: CALL_OW 69
12511: PUSH
12512: LD_EXP 15
12516: DIFF
12517: PUSH
12518: FOR_IN
12519: IFFALSE 12593
// begin ComFree ( i ) ;
12521: LD_VAR 0 1
12525: PPUSH
12526: CALL_OW 139
// SetSide ( i , 1 ) ;
12530: LD_VAR 0 1
12534: PPUSH
12535: LD_INT 1
12537: PPUSH
12538: CALL_OW 235
// if GetDistUnits ( i , JMM ) < 14 then
12542: LD_VAR 0 1
12546: PPUSH
12547: LD_EXP 14
12551: PPUSH
12552: CALL_OW 296
12556: PUSH
12557: LD_INT 14
12559: LESS
12560: IFFALSE 12591
// ComAgressiveMove ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
12562: LD_VAR 0 1
12566: PPUSH
12567: LD_EXP 14
12571: PPUSH
12572: CALL_OW 250
12576: PPUSH
12577: LD_EXP 14
12581: PPUSH
12582: CALL_OW 251
12586: PPUSH
12587: CALL_OW 114
// end ;
12591: GO 12518
12593: POP
12594: POP
// end ;
12595: PPOPN 1
12597: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var i ;
12598: LD_INT 22
12600: PUSH
12601: LD_INT 4
12603: PUSH
12604: EMPTY
12605: LIST
12606: LIST
12607: PUSH
12608: LD_INT 34
12610: PUSH
12611: LD_INT 12
12613: PUSH
12614: EMPTY
12615: LIST
12616: LIST
12617: PUSH
12618: EMPTY
12619: LIST
12620: LIST
12621: PPUSH
12622: CALL_OW 69
12626: IFFALSE 12708
12628: GO 12630
12630: DISABLE
12631: LD_INT 0
12633: PPUSH
// begin enable ;
12634: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do
12635: LD_ADDR_VAR 0 1
12639: PUSH
12640: LD_INT 22
12642: PUSH
12643: LD_INT 4
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: PUSH
12650: LD_INT 34
12652: PUSH
12653: LD_INT 12
12655: PUSH
12656: EMPTY
12657: LIST
12658: LIST
12659: PUSH
12660: EMPTY
12661: LIST
12662: LIST
12663: PPUSH
12664: CALL_OW 69
12668: PUSH
12669: FOR_IN
12670: IFFALSE 12706
// if GetDistUnits ( i , JMM ) < 6 then
12672: LD_VAR 0 1
12676: PPUSH
12677: LD_EXP 14
12681: PPUSH
12682: CALL_OW 296
12686: PUSH
12687: LD_INT 6
12689: LESS
12690: IFFALSE 12704
// SetSide ( i , 7 ) ;
12692: LD_VAR 0 1
12696: PPUSH
12697: LD_INT 7
12699: PPUSH
12700: CALL_OW 235
12704: GO 12669
12706: POP
12707: POP
// end ;
12708: PPOPN 1
12710: END
// every 0 0$01 trigger can_escape and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) do var all_taken , tmp , m1 , m2 , m3 ;
12711: LD_EXP 6
12715: PUSH
12716: LD_INT 19
12718: PPUSH
12719: LD_INT 22
12721: PUSH
12722: LD_INT 7
12724: PUSH
12725: EMPTY
12726: LIST
12727: LIST
12728: PUSH
12729: LD_INT 21
12731: PUSH
12732: LD_INT 1
12734: PUSH
12735: EMPTY
12736: LIST
12737: LIST
12738: PUSH
12739: EMPTY
12740: LIST
12741: LIST
12742: PPUSH
12743: CALL_OW 71
12747: NOT
12748: AND
12749: PUSH
12750: LD_INT 3
12752: PPUSH
12753: CALL_OW 469
12757: NOT
12758: AND
12759: PUSH
12760: LD_INT 5
12762: PPUSH
12763: CALL_OW 469
12767: NOT
12768: AND
12769: IFFALSE 14399
12771: GO 12773
12773: DISABLE
12774: LD_INT 0
12776: PPUSH
12777: PPUSH
12778: PPUSH
12779: PPUSH
12780: PPUSH
// begin m1 := false ;
12781: LD_ADDR_VAR 0 3
12785: PUSH
12786: LD_INT 0
12788: ST_TO_ADDR
// m2 := false ;
12789: LD_ADDR_VAR 0 4
12793: PUSH
12794: LD_INT 0
12796: ST_TO_ADDR
// m3 := false ;
12797: LD_ADDR_VAR 0 5
12801: PUSH
12802: LD_INT 0
12804: ST_TO_ADDR
// all_taken := ( UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 ) ;
12805: LD_ADDR_VAR 0 1
12809: PUSH
12810: LD_EXP 3
12814: PPUSH
12815: LD_INT 22
12817: PUSH
12818: LD_INT 4
12820: PUSH
12821: EMPTY
12822: LIST
12823: LIST
12824: PUSH
12825: LD_INT 21
12827: PUSH
12828: LD_INT 1
12830: PUSH
12831: EMPTY
12832: LIST
12833: LIST
12834: PUSH
12835: EMPTY
12836: LIST
12837: LIST
12838: PPUSH
12839: CALL_OW 72
12843: PUSH
12844: LD_INT 0
12846: EQUAL
12847: ST_TO_ADDR
// if not all_taken then
12848: LD_VAR 0 1
12852: NOT
12853: IFFALSE 12994
// case query ( Q1 ) of 1 :
12855: LD_STRING Q1
12857: PPUSH
12858: CALL_OW 97
12862: PUSH
12863: LD_INT 1
12865: DOUBLE
12866: EQUAL
12867: IFTRUE 12871
12869: GO 12982
12871: POP
// begin repeat wait ( 0 0$1 ) ;
12872: LD_INT 35
12874: PPUSH
12875: CALL_OW 67
// until UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) ;
12879: LD_EXP 3
12883: PPUSH
12884: LD_INT 22
12886: PUSH
12887: LD_INT 4
12889: PUSH
12890: EMPTY
12891: LIST
12892: LIST
12893: PUSH
12894: LD_INT 21
12896: PUSH
12897: LD_INT 1
12899: PUSH
12900: EMPTY
12901: LIST
12902: LIST
12903: PUSH
12904: EMPTY
12905: LIST
12906: LIST
12907: PPUSH
12908: CALL_OW 72
12912: PUSH
12913: LD_INT 0
12915: EQUAL
12916: PUSH
12917: LD_INT 19
12919: PPUSH
12920: LD_INT 22
12922: PUSH
12923: LD_INT 7
12925: PUSH
12926: EMPTY
12927: LIST
12928: LIST
12929: PUSH
12930: LD_INT 21
12932: PUSH
12933: LD_INT 1
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: PUSH
12940: EMPTY
12941: LIST
12942: LIST
12943: PPUSH
12944: CALL_OW 71
12948: NOT
12949: AND
12950: PUSH
12951: LD_INT 3
12953: PPUSH
12954: CALL_OW 469
12958: NOT
12959: AND
12960: PUSH
12961: LD_INT 5
12963: PPUSH
12964: CALL_OW 469
12968: NOT
12969: AND
12970: IFFALSE 12872
// all_taken := true ;
12972: LD_ADDR_VAR 0 1
12976: PUSH
12977: LD_INT 1
12979: ST_TO_ADDR
// end ; 2 :
12980: GO 12994
12982: LD_INT 2
12984: DOUBLE
12985: EQUAL
12986: IFTRUE 12990
12988: GO 12993
12990: POP
// ; end ;
12991: GO 12994
12993: POP
// if team_kill_counter = 0 then
12994: LD_EXP 9
12998: PUSH
12999: LD_INT 0
13001: EQUAL
13002: IFFALSE 13018
// Say ( JMM , D5-JMM-1 ) else
13004: LD_EXP 14
13008: PPUSH
13009: LD_STRING D5-JMM-1
13011: PPUSH
13012: CALL_OW 88
13016: GO 13030
// Say ( JMM , D5-JMM-1a ) ;
13018: LD_EXP 14
13022: PPUSH
13023: LD_STRING D5-JMM-1a
13025: PPUSH
13026: CALL_OW 88
// if ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Roth ] ) >= 10 then
13030: LD_INT 22
13032: PUSH
13033: LD_INT 7
13035: PUSH
13036: EMPTY
13037: LIST
13038: LIST
13039: PUSH
13040: LD_INT 21
13042: PUSH
13043: LD_INT 1
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: PUSH
13050: LD_INT 23
13052: PUSH
13053: LD_INT 1
13055: PUSH
13056: EMPTY
13057: LIST
13058: LIST
13059: PUSH
13060: EMPTY
13061: LIST
13062: LIST
13063: LIST
13064: PPUSH
13065: CALL_OW 69
13069: PUSH
13070: LD_EXP 14
13074: PUSH
13075: LD_EXP 15
13079: PUSH
13080: EMPTY
13081: LIST
13082: LIST
13083: DIFF
13084: PUSH
13085: LD_INT 10
13087: GREATEREQUAL
13088: IFFALSE 13097
// SetAchievement ( ACH_TEAM ) ;
13090: LD_STRING ACH_TEAM
13092: PPUSH
13093: CALL_OW 543
// if not invis_used then
13097: LD_EXP 12
13101: NOT
13102: IFFALSE 13118
// begin wait ( 3 ) ;
13104: LD_INT 3
13106: PPUSH
13107: CALL_OW 67
// SetAchievement ( ACH_NOINVIS ) ;
13111: LD_STRING ACH_NOINVIS
13113: PPUSH
13114: CALL_OW 543
// end ; if not alert then
13118: LD_EXP 13
13122: NOT
13123: IFFALSE 13139
// begin wait ( 3 ) ;
13125: LD_INT 3
13127: PPUSH
13128: CALL_OW 67
// SetAchievement ( ACH_ALARM ) ;
13132: LD_STRING ACH_ALARM
13134: PPUSH
13135: CALL_OW 543
// end ; if tick < 15 15$00 then
13139: LD_OWVAR 1
13143: PUSH
13144: LD_INT 31500
13146: LESS
13147: IFFALSE 13163
// begin wait ( 3 ) ;
13149: LD_INT 3
13151: PPUSH
13152: CALL_OW 67
// SetAchievement ( ACH_ASPEED_16 ) ;
13156: LD_STRING ACH_ASPEED_16
13158: PPUSH
13159: CALL_OW 543
// end ; if all_taken then
13163: LD_VAR 0 1
13167: IFFALSE 13189
// begin AddMedal ( All , 1 ) ;
13169: LD_STRING All
13171: PPUSH
13172: LD_INT 1
13174: PPUSH
13175: CALL_OW 101
// m1 := true ;
13179: LD_ADDR_VAR 0 3
13183: PUSH
13184: LD_INT 1
13186: ST_TO_ADDR
// end else
13187: GO 13200
// AddMedal ( All , - 1 ) ;
13189: LD_STRING All
13191: PPUSH
13192: LD_INT 1
13194: NEG
13195: PPUSH
13196: CALL_OW 101
// if team_kill_counter then
13200: LD_EXP 9
13204: IFFALSE 13219
// AddMedal ( Save , - 1 ) else
13206: LD_STRING Save
13208: PPUSH
13209: LD_INT 1
13211: NEG
13212: PPUSH
13213: CALL_OW 101
13217: GO 13237
// begin AddMedal ( Save , 1 ) ;
13219: LD_STRING Save
13221: PPUSH
13222: LD_INT 1
13224: PPUSH
13225: CALL_OW 101
// m2 := true ;
13229: LD_ADDR_VAR 0 4
13233: PUSH
13234: LD_INT 1
13236: ST_TO_ADDR
// end ; if friends_kill_counter >= [ 2 , 2 , 1 , 1 ] [ Difficulty ] then
13237: LD_EXP 8
13241: PUSH
13242: LD_INT 2
13244: PUSH
13245: LD_INT 2
13247: PUSH
13248: LD_INT 1
13250: PUSH
13251: LD_INT 1
13253: PUSH
13254: EMPTY
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: PUSH
13260: LD_OWVAR 67
13264: ARRAY
13265: GREATEREQUAL
13266: IFFALSE 13281
// AddMedal ( Friendship , - 1 ) else
13268: LD_STRING Friendship
13270: PPUSH
13271: LD_INT 1
13273: NEG
13274: PPUSH
13275: CALL_OW 101
13279: GO 13299
// begin AddMedal ( Friendship , 1 ) ;
13281: LD_STRING Friendship
13283: PPUSH
13284: LD_INT 1
13286: PPUSH
13287: CALL_OW 101
// m3 := true ;
13291: LD_ADDR_VAR 0 5
13295: PUSH
13296: LD_INT 1
13298: ST_TO_ADDR
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
13299: LD_VAR 0 3
13303: PUSH
13304: LD_VAR 0 4
13308: AND
13309: PUSH
13310: LD_VAR 0 5
13314: AND
13315: PUSH
13316: LD_OWVAR 67
13320: PUSH
13321: LD_INT 3
13323: GREATEREQUAL
13324: AND
13325: IFFALSE 13337
// SetAchievementEX ( ACH_AMER , 16 ) ;
13327: LD_STRING ACH_AMER
13329: PPUSH
13330: LD_INT 16
13332: PPUSH
13333: CALL_OW 564
// GiveMedals ( MAIN ) ;
13337: LD_STRING MAIN
13339: PPUSH
13340: CALL_OW 102
// tmp := FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ] ) ;
13344: LD_ADDR_VAR 0 2
13348: PUSH
13349: LD_INT 22
13351: PUSH
13352: LD_INT 7
13354: PUSH
13355: EMPTY
13356: LIST
13357: LIST
13358: PUSH
13359: LD_INT 2
13361: PUSH
13362: LD_INT 25
13364: PUSH
13365: LD_INT 1
13367: PUSH
13368: EMPTY
13369: LIST
13370: LIST
13371: PUSH
13372: LD_INT 25
13374: PUSH
13375: LD_INT 2
13377: PUSH
13378: EMPTY
13379: LIST
13380: LIST
13381: PUSH
13382: LD_INT 25
13384: PUSH
13385: LD_INT 3
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: PUSH
13392: LD_INT 25
13394: PUSH
13395: LD_INT 4
13397: PUSH
13398: EMPTY
13399: LIST
13400: LIST
13401: PUSH
13402: LD_INT 25
13404: PUSH
13405: LD_INT 5
13407: PUSH
13408: EMPTY
13409: LIST
13410: LIST
13411: PUSH
13412: LD_INT 25
13414: PUSH
13415: LD_INT 8
13417: PUSH
13418: EMPTY
13419: LIST
13420: LIST
13421: PUSH
13422: LD_INT 25
13424: PUSH
13425: LD_INT 9
13427: PUSH
13428: EMPTY
13429: LIST
13430: LIST
13431: PUSH
13432: EMPTY
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: PUSH
13446: EMPTY
13447: LIST
13448: PPUSH
13449: CALL_OW 69
13453: ST_TO_ADDR
// RewardPeople ( tmp ^ Roth ) ;
13454: LD_VAR 0 2
13458: PUSH
13459: LD_EXP 15
13463: ADD
13464: PPUSH
13465: CALL_OW 43
// SaveCharacters ( JMM , 12a_JMM ) ;
13469: LD_EXP 14
13473: PPUSH
13474: LD_STRING 12a_JMM
13476: PPUSH
13477: CALL_OW 38
// if IsLive ( Roth ) then
13481: LD_EXP 15
13485: PPUSH
13486: CALL_OW 300
13490: IFFALSE 13504
// SaveCharacters ( Roth , 12a_Roth ) ;
13492: LD_EXP 15
13496: PPUSH
13497: LD_STRING 12a_Roth
13499: PPUSH
13500: CALL_OW 38
// if Lisa in tmp then
13504: LD_EXP 23
13508: PUSH
13509: LD_VAR 0 2
13513: IN
13514: IFFALSE 13530
// SaveCharacters ( Lisa , 12a_Lisa ) else
13516: LD_EXP 23
13520: PPUSH
13521: LD_STRING 12a_Lisa
13523: PPUSH
13524: CALL_OW 38
13528: GO 13548
// if Lisa then
13530: LD_EXP 23
13534: IFFALSE 13548
// SaveCharacters ( Lisa , 12p_Lisa ) ;
13536: LD_EXP 23
13540: PPUSH
13541: LD_STRING 12p_Lisa
13543: PPUSH
13544: CALL_OW 38
// if Donaldson in tmp then
13548: LD_EXP 24
13552: PUSH
13553: LD_VAR 0 2
13557: IN
13558: IFFALSE 13574
// SaveCharacters ( Donaldson , 12a_Donaldson ) else
13560: LD_EXP 24
13564: PPUSH
13565: LD_STRING 12a_Donaldson
13567: PPUSH
13568: CALL_OW 38
13572: GO 13592
// if Donaldson then
13574: LD_EXP 24
13578: IFFALSE 13592
// SaveCharacters ( Donaldson , 12p_Donaldson ) ;
13580: LD_EXP 24
13584: PPUSH
13585: LD_STRING 12p_Donaldson
13587: PPUSH
13588: CALL_OW 38
// if Bobby in tmp then
13592: LD_EXP 25
13596: PUSH
13597: LD_VAR 0 2
13601: IN
13602: IFFALSE 13618
// SaveCharacters ( Bobby , 12a_Bobby ) else
13604: LD_EXP 25
13608: PPUSH
13609: LD_STRING 12a_Bobby
13611: PPUSH
13612: CALL_OW 38
13616: GO 13636
// if Bobby then
13618: LD_EXP 25
13622: IFFALSE 13636
// SaveCharacters ( Bobby , 12p_Bobby ) ;
13624: LD_EXP 25
13628: PPUSH
13629: LD_STRING 12p_Bobby
13631: PPUSH
13632: CALL_OW 38
// if Cyrus in tmp then
13636: LD_EXP 26
13640: PUSH
13641: LD_VAR 0 2
13645: IN
13646: IFFALSE 13662
// SaveCharacters ( Cyrus , 12a_Cyrus ) else
13648: LD_EXP 26
13652: PPUSH
13653: LD_STRING 12a_Cyrus
13655: PPUSH
13656: CALL_OW 38
13660: GO 13680
// if Cyrus then
13662: LD_EXP 26
13666: IFFALSE 13680
// SaveCharacters ( Cyrus , 12p_Cyrus ) ;
13668: LD_EXP 26
13672: PPUSH
13673: LD_STRING 12p_Cyrus
13675: PPUSH
13676: CALL_OW 38
// if Denis in tmp then
13680: LD_EXP 27
13684: PUSH
13685: LD_VAR 0 2
13689: IN
13690: IFFALSE 13704
// SaveCharacters ( Denis , 12a_Denis ) ;
13692: LD_EXP 27
13696: PPUSH
13697: LD_STRING 12a_Denis
13699: PPUSH
13700: CALL_OW 38
// if Brown in tmp then
13704: LD_EXP 28
13708: PUSH
13709: LD_VAR 0 2
13713: IN
13714: IFFALSE 13730
// SaveCharacters ( Brown , 12a_Brown ) else
13716: LD_EXP 28
13720: PPUSH
13721: LD_STRING 12a_Brown
13723: PPUSH
13724: CALL_OW 38
13728: GO 13754
// if Brown in tmp then
13730: LD_EXP 28
13734: PUSH
13735: LD_VAR 0 2
13739: IN
13740: IFFALSE 13754
// SaveCharacters ( Brown , 12p_Brown ) ;
13742: LD_EXP 28
13746: PPUSH
13747: LD_STRING 12p_Brown
13749: PPUSH
13750: CALL_OW 38
// if Gladstone in tmp then
13754: LD_EXP 29
13758: PUSH
13759: LD_VAR 0 2
13763: IN
13764: IFFALSE 13780
// SaveCharacters ( Gladstone , 12a_Gladstone ) else
13766: LD_EXP 29
13770: PPUSH
13771: LD_STRING 12a_Gladstone
13773: PPUSH
13774: CALL_OW 38
13778: GO 13798
// if Gladstone then
13780: LD_EXP 29
13784: IFFALSE 13798
// SaveCharacters ( Gladstone , 12p_Gladstone ) ;
13786: LD_EXP 29
13790: PPUSH
13791: LD_STRING 12p_Gladstone
13793: PPUSH
13794: CALL_OW 38
// if Houten in tmp then
13798: LD_EXP 30
13802: PUSH
13803: LD_VAR 0 2
13807: IN
13808: IFFALSE 13824
// SaveCharacters ( Houten , 12a_Houten ) else
13810: LD_EXP 30
13814: PPUSH
13815: LD_STRING 12a_Houten
13817: PPUSH
13818: CALL_OW 38
13822: GO 13842
// if Houten then
13824: LD_EXP 30
13828: IFFALSE 13842
// SaveCharacters ( Houten , 12p_Houten ) ;
13830: LD_EXP 30
13834: PPUSH
13835: LD_STRING 12p_Houten
13837: PPUSH
13838: CALL_OW 38
// if Cornel in tmp then
13842: LD_EXP 31
13846: PUSH
13847: LD_VAR 0 2
13851: IN
13852: IFFALSE 13868
// SaveCharacters ( Cornel , 12a_Cornell ) else
13854: LD_EXP 31
13858: PPUSH
13859: LD_STRING 12a_Cornell
13861: PPUSH
13862: CALL_OW 38
13866: GO 13886
// if Cornel then
13868: LD_EXP 31
13872: IFFALSE 13886
// SaveCharacters ( Cornel , 12p_Cornell ) ;
13874: LD_EXP 31
13878: PPUSH
13879: LD_STRING 12p_Cornell
13881: PPUSH
13882: CALL_OW 38
// if Gary in tmp then
13886: LD_EXP 32
13890: PUSH
13891: LD_VAR 0 2
13895: IN
13896: IFFALSE 13912
// SaveCharacters ( Gary , 12a_Gary ) else
13898: LD_EXP 32
13902: PPUSH
13903: LD_STRING 12a_Gary
13905: PPUSH
13906: CALL_OW 38
13910: GO 13930
// if Gary then
13912: LD_EXP 32
13916: IFFALSE 13930
// SaveCharacters ( Gary , 12p_Gary ) ;
13918: LD_EXP 32
13922: PPUSH
13923: LD_STRING 12p_Gary
13925: PPUSH
13926: CALL_OW 38
// if Frank in tmp then
13930: LD_EXP 33
13934: PUSH
13935: LD_VAR 0 2
13939: IN
13940: IFFALSE 13954
// SaveCharacters ( Frank , 12a_Frank ) ;
13942: LD_EXP 33
13946: PPUSH
13947: LD_STRING 12a_Frank
13949: PPUSH
13950: CALL_OW 38
// if Kikuchi in tmp then
13954: LD_EXP 34
13958: PUSH
13959: LD_VAR 0 2
13963: IN
13964: IFFALSE 13980
// SaveCharacters ( Kikuchi , 12a_Kikuchi ) else
13966: LD_EXP 34
13970: PPUSH
13971: LD_STRING 12a_Kikuchi
13973: PPUSH
13974: CALL_OW 38
13978: GO 13998
// if Kikuchi then
13980: LD_EXP 34
13984: IFFALSE 13998
// SaveCharacters ( Kikuchi , 12p_Kikuchi ) ;
13986: LD_EXP 34
13990: PPUSH
13991: LD_STRING 12p_Kikuchi
13993: PPUSH
13994: CALL_OW 38
// if Simms in tmp then
13998: LD_EXP 35
14002: PUSH
14003: LD_VAR 0 2
14007: IN
14008: IFFALSE 14022
// SaveCharacters ( Simms , 12a_Simms ) ;
14010: LD_EXP 35
14014: PPUSH
14015: LD_STRING 12a_Simms
14017: PPUSH
14018: CALL_OW 38
// if Joan in tmp then
14022: LD_EXP 36
14026: PUSH
14027: LD_VAR 0 2
14031: IN
14032: IFFALSE 14046
// SaveCharacters ( Joan , 12a_Joan ) ;
14034: LD_EXP 36
14038: PPUSH
14039: LD_STRING 12a_Joan
14041: PPUSH
14042: CALL_OW 38
// if DeltaDoctor in tmp then
14046: LD_EXP 37
14050: PUSH
14051: LD_VAR 0 2
14055: IN
14056: IFFALSE 14070
// SaveCharacters ( DeltaDoctor , 12a_DeltaDoctor ) ;
14058: LD_EXP 37
14062: PPUSH
14063: LD_STRING 12a_DeltaDoctor
14065: PPUSH
14066: CALL_OW 38
// tmp := tmp diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor ] ;
14070: LD_ADDR_VAR 0 2
14074: PUSH
14075: LD_VAR 0 2
14079: PUSH
14080: LD_EXP 14
14084: PUSH
14085: LD_EXP 15
14089: PUSH
14090: LD_EXP 23
14094: PUSH
14095: LD_EXP 24
14099: PUSH
14100: LD_EXP 25
14104: PUSH
14105: LD_EXP 26
14109: PUSH
14110: LD_EXP 27
14114: PUSH
14115: LD_EXP 28
14119: PUSH
14120: LD_EXP 29
14124: PUSH
14125: LD_EXP 30
14129: PUSH
14130: LD_EXP 31
14134: PUSH
14135: LD_EXP 32
14139: PUSH
14140: LD_EXP 33
14144: PUSH
14145: LD_EXP 34
14149: PUSH
14150: LD_EXP 35
14154: PUSH
14155: LD_EXP 36
14159: PUSH
14160: LD_EXP 37
14164: PUSH
14165: EMPTY
14166: LIST
14167: LIST
14168: LIST
14169: LIST
14170: LIST
14171: LIST
14172: LIST
14173: LIST
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: DIFF
14184: ST_TO_ADDR
// if tmp then
14185: LD_VAR 0 2
14189: IFFALSE 14203
// SaveCharacters ( tmp , 12a_others ) ;
14191: LD_VAR 0 2
14195: PPUSH
14196: LD_STRING 12a_others
14198: PPUSH
14199: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_side , 1 ] , [ f_side , 4 ] ] ] ) diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Powell ] ;
14203: LD_ADDR_VAR 0 2
14207: PUSH
14208: LD_INT 21
14210: PUSH
14211: LD_INT 1
14213: PUSH
14214: EMPTY
14215: LIST
14216: LIST
14217: PUSH
14218: LD_INT 23
14220: PUSH
14221: LD_INT 1
14223: PUSH
14224: EMPTY
14225: LIST
14226: LIST
14227: PUSH
14228: LD_INT 2
14230: PUSH
14231: LD_INT 22
14233: PUSH
14234: LD_INT 1
14236: PUSH
14237: EMPTY
14238: LIST
14239: LIST
14240: PUSH
14241: LD_INT 22
14243: PUSH
14244: LD_INT 4
14246: PUSH
14247: EMPTY
14248: LIST
14249: LIST
14250: PUSH
14251: EMPTY
14252: LIST
14253: LIST
14254: LIST
14255: PUSH
14256: EMPTY
14257: LIST
14258: LIST
14259: LIST
14260: PPUSH
14261: CALL_OW 69
14265: PUSH
14266: LD_EXP 14
14270: PUSH
14271: LD_EXP 15
14275: PUSH
14276: LD_EXP 23
14280: PUSH
14281: LD_EXP 24
14285: PUSH
14286: LD_EXP 25
14290: PUSH
14291: LD_EXP 26
14295: PUSH
14296: LD_EXP 27
14300: PUSH
14301: LD_EXP 28
14305: PUSH
14306: LD_EXP 29
14310: PUSH
14311: LD_EXP 30
14315: PUSH
14316: LD_EXP 31
14320: PUSH
14321: LD_EXP 32
14325: PUSH
14326: LD_EXP 33
14330: PUSH
14331: LD_EXP 34
14335: PUSH
14336: LD_EXP 35
14340: PUSH
14341: LD_EXP 36
14345: PUSH
14346: LD_EXP 37
14350: PUSH
14351: LD_EXP 16
14355: PUSH
14356: EMPTY
14357: LIST
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: DIFF
14376: ST_TO_ADDR
// if tmp then
14377: LD_VAR 0 2
14381: IFFALSE 14395
// SaveCharacters ( tmp , 12p_others ) ;
14383: LD_VAR 0 2
14387: PPUSH
14388: LD_STRING 12p_others
14390: PPUSH
14391: CALL_OW 38
// YouWin ;
14395: CALL_OW 103
// end ; end_of_file
14399: PPOPN 5
14401: END
// on SailEvent ( event ) do var tmp ;
14402: LD_INT 0
14404: PPUSH
// begin if event = 1 then
14405: LD_VAR 0 1
14409: PUSH
14410: LD_INT 1
14412: EQUAL
14413: IFFALSE 14486
// begin if not mobile_patrol then
14415: LD_EXP 17
14419: NOT
14420: IFFALSE 14424
// exit ;
14422: GO 14486
// tmp := mobile_patrol [ mobile_patrol ] ;
14424: LD_ADDR_VAR 0 2
14428: PUSH
14429: LD_EXP 17
14433: PUSH
14434: LD_EXP 17
14438: ARRAY
14439: ST_TO_ADDR
// mobile_patrol := Delete ( mobile_patrol , mobile_patrol ) ;
14440: LD_ADDR_EXP 17
14444: PUSH
14445: LD_EXP 17
14449: PPUSH
14450: LD_EXP 17
14454: PPUSH
14455: CALL_OW 3
14459: ST_TO_ADDR
// Patrol ( tmp , mobile_points [ mobile_patrol + 1 ] , [ ] ) ;
14460: LD_VAR 0 2
14464: PPUSH
14465: LD_EXP 18
14469: PUSH
14470: LD_EXP 17
14474: PUSH
14475: LD_INT 1
14477: PLUS
14478: ARRAY
14479: PPUSH
14480: EMPTY
14481: PPUSH
14482: CALL 6669 0 3
// end ; end ;
14486: PPOPN 2
14488: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
14489: LD_VAR 0 1
14493: PPUSH
14494: CALL 30820 0 1
// if un = JMM then
14498: LD_VAR 0 1
14502: PUSH
14503: LD_EXP 14
14507: EQUAL
14508: IFFALSE 14517
// YouLost ( JMM ) ;
14510: LD_STRING JMM
14512: PPUSH
14513: CALL_OW 104
// if GetSide ( un ) = 7 and GetWeapon ( un ) = us_cargo_bay then
14517: LD_VAR 0 1
14521: PPUSH
14522: CALL_OW 255
14526: PUSH
14527: LD_INT 7
14529: EQUAL
14530: PUSH
14531: LD_VAR 0 1
14535: PPUSH
14536: CALL_OW 264
14540: PUSH
14541: LD_INT 12
14543: EQUAL
14544: AND
14545: IFFALSE 14554
// YouLost ( Artifact ) ;
14547: LD_STRING Artifact
14549: PPUSH
14550: CALL_OW 104
// if ( GetSide ( un ) = 7 and GetType ( un ) = unit_human ) or un = Roth then
14554: LD_VAR 0 1
14558: PPUSH
14559: CALL_OW 255
14563: PUSH
14564: LD_INT 7
14566: EQUAL
14567: PUSH
14568: LD_VAR 0 1
14572: PPUSH
14573: CALL_OW 247
14577: PUSH
14578: LD_INT 1
14580: EQUAL
14581: AND
14582: PUSH
14583: LD_VAR 0 1
14587: PUSH
14588: LD_EXP 15
14592: EQUAL
14593: OR
14594: IFFALSE 14610
// team_kill_counter := team_kill_counter + 1 ;
14596: LD_ADDR_EXP 9
14600: PUSH
14601: LD_EXP 9
14605: PUSH
14606: LD_INT 1
14608: PLUS
14609: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetType ( un ) = unit_human then
14610: LD_VAR 0 1
14614: PPUSH
14615: CALL_OW 255
14619: PUSH
14620: LD_INT 1
14622: EQUAL
14623: PUSH
14624: LD_VAR 0 1
14628: PPUSH
14629: CALL_OW 247
14633: PUSH
14634: LD_INT 1
14636: EQUAL
14637: AND
14638: IFFALSE 14654
// friends_kill_counter := friends_kill_counter + 1 ;
14640: LD_ADDR_EXP 8
14644: PUSH
14645: LD_EXP 8
14649: PUSH
14650: LD_INT 1
14652: PLUS
14653: ST_TO_ADDR
// if GetSide ( un ) <> 1 then
14654: LD_VAR 0 1
14658: PPUSH
14659: CALL_OW 255
14663: PUSH
14664: LD_INT 1
14666: NONEQUAL
14667: IFFALSE 14671
// exit ;
14669: GO 14748
// if GetControl ( un ) = control_remote then
14671: LD_VAR 0 1
14675: PPUSH
14676: CALL_OW 263
14680: PUSH
14681: LD_INT 2
14683: EQUAL
14684: IFFALSE 14702
// defenders := defenders diff un ;
14686: LD_ADDR_EXP 20
14690: PUSH
14691: LD_EXP 20
14695: PUSH
14696: LD_VAR 0 1
14700: DIFF
14701: ST_TO_ADDR
// if not un in defenders then
14702: LD_VAR 0 1
14706: PUSH
14707: LD_EXP 20
14711: IN
14712: NOT
14713: IFFALSE 14748
// begin defcon := [ GetX ( un ) , GetY ( un ) ] ;
14715: LD_ADDR_EXP 21
14719: PUSH
14720: LD_VAR 0 1
14724: PPUSH
14725: CALL_OW 250
14729: PUSH
14730: LD_VAR 0 1
14734: PPUSH
14735: CALL_OW 251
14739: PUSH
14740: EMPTY
14741: LIST
14742: LIST
14743: ST_TO_ADDR
// Defend ;
14744: CALL 2791 0 0
// end ; end ;
14748: PPOPN 1
14750: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
14751: LD_VAR 0 1
14755: PPUSH
14756: LD_VAR 0 2
14760: PPUSH
14761: CALL 30942 0 2
// if GetSide ( veh ) <> 1 then
14765: LD_VAR 0 1
14769: PPUSH
14770: CALL_OW 255
14774: PUSH
14775: LD_INT 1
14777: NONEQUAL
14778: IFFALSE 14782
// exit ;
14780: GO 14806
// if GetControl ( veh ) = control_remote then
14782: LD_VAR 0 1
14786: PPUSH
14787: CALL_OW 263
14791: PUSH
14792: LD_INT 2
14794: EQUAL
14795: IFFALSE 14806
// Connect ( veh ) ;
14797: LD_VAR 0 1
14801: PPUSH
14802: CALL 43241 0 1
// end ;
14806: PPOPN 2
14808: END
// on UnitGoesToRed ( un ) do var i , veh ;
14809: LD_INT 0
14811: PPUSH
14812: PPUSH
// begin if GetSide ( un ) = 1 and GetControl ( un ) = control_remote then
14813: LD_VAR 0 1
14817: PPUSH
14818: CALL_OW 255
14822: PUSH
14823: LD_INT 1
14825: EQUAL
14826: PUSH
14827: LD_VAR 0 1
14831: PPUSH
14832: CALL_OW 263
14836: PUSH
14837: LD_INT 2
14839: EQUAL
14840: AND
14841: IFFALSE 14852
// ComUnlink ( un ) ;
14843: LD_VAR 0 1
14847: PPUSH
14848: CALL_OW 136
// if un = ambar0 then
14852: LD_VAR 0 1
14856: PUSH
14857: LD_INT 18
14859: EQUAL
14860: IFFALSE 14970
// begin uc_side := 1 ;
14862: LD_ADDR_OWVAR 20
14866: PUSH
14867: LD_INT 1
14869: ST_TO_ADDR
// uc_nation := 1 ;
14870: LD_ADDR_OWVAR 21
14874: PUSH
14875: LD_INT 1
14877: ST_TO_ADDR
// for i = 1 to 6 do
14878: LD_ADDR_VAR 0 2
14882: PUSH
14883: DOUBLE
14884: LD_INT 1
14886: DEC
14887: ST_TO_ADDR
14888: LD_INT 6
14890: PUSH
14891: FOR_TO
14892: IFFALSE 14968
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
14894: LD_INT 3
14896: PPUSH
14897: LD_INT 1
14899: PPUSH
14900: LD_INT 3
14902: PPUSH
14903: LD_INT 4
14905: PPUSH
14906: LD_INT 100
14908: PPUSH
14909: CALL 40148 0 5
// veh := CreateVehicle ;
14913: LD_ADDR_VAR 0 3
14917: PUSH
14918: CALL_OW 45
14922: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
14923: LD_VAR 0 3
14927: PPUSH
14928: LD_INT 1
14930: PPUSH
14931: CALL_OW 233
// PlaceUnitArea ( veh , west_spawn , false ) ;
14935: LD_VAR 0 3
14939: PPUSH
14940: LD_INT 25
14942: PPUSH
14943: LD_INT 0
14945: PPUSH
14946: CALL_OW 49
// defenders := defenders ^ veh ;
14950: LD_ADDR_EXP 20
14954: PUSH
14955: LD_EXP 20
14959: PUSH
14960: LD_VAR 0 3
14964: ADD
14965: ST_TO_ADDR
// end ;
14966: GO 14891
14968: POP
14969: POP
// end ; end ;
14970: PPOPN 3
14972: END
// on EnterBuilding ( building , unit ) do begin if unit = Powell then
14973: LD_VAR 0 2
14977: PUSH
14978: LD_EXP 16
14982: EQUAL
14983: IFFALSE 14994
// RemoveUnit ( Powell ) ;
14985: LD_EXP 16
14989: PPUSH
14990: CALL_OW 64
// end ;
14994: PPOPN 2
14996: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
14997: LD_VAR 0 1
15001: PPUSH
15002: CALL 30926 0 1
// end ; end_of_file
15006: PPOPN 1
15008: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
15009: LD_INT 0
15011: PPUSH
// ar_miner := 81 ;
15012: LD_ADDR_EXP 45
15016: PUSH
15017: LD_INT 81
15019: ST_TO_ADDR
// ar_crane := 88 ;
15020: LD_ADDR_EXP 44
15024: PUSH
15025: LD_INT 88
15027: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
15028: LD_ADDR_EXP 39
15032: PUSH
15033: LD_INT 89
15035: ST_TO_ADDR
// us_hack := 99 ;
15036: LD_ADDR_EXP 40
15040: PUSH
15041: LD_INT 99
15043: ST_TO_ADDR
// us_artillery := 97 ;
15044: LD_ADDR_EXP 41
15048: PUSH
15049: LD_INT 97
15051: ST_TO_ADDR
// ar_bio_bomb := 91 ;
15052: LD_ADDR_EXP 42
15056: PUSH
15057: LD_INT 91
15059: ST_TO_ADDR
// ar_mortar := 92 ;
15060: LD_ADDR_EXP 43
15064: PUSH
15065: LD_INT 92
15067: ST_TO_ADDR
// ru_flamethrower := 93 ;
15068: LD_ADDR_EXP 46
15072: PUSH
15073: LD_INT 93
15075: ST_TO_ADDR
// ru_radar := 98 ;
15076: LD_ADDR_EXP 38
15080: PUSH
15081: LD_INT 98
15083: ST_TO_ADDR
// tech_Artillery := 80 ;
15084: LD_ADDR_EXP 47
15088: PUSH
15089: LD_INT 80
15091: ST_TO_ADDR
// tech_RadMat := 81 ;
15092: LD_ADDR_EXP 48
15096: PUSH
15097: LD_INT 81
15099: ST_TO_ADDR
// tech_BasicTools := 82 ;
15100: LD_ADDR_EXP 49
15104: PUSH
15105: LD_INT 82
15107: ST_TO_ADDR
// tech_Cargo := 83 ;
15108: LD_ADDR_EXP 50
15112: PUSH
15113: LD_INT 83
15115: ST_TO_ADDR
// tech_Track := 84 ;
15116: LD_ADDR_EXP 51
15120: PUSH
15121: LD_INT 84
15123: ST_TO_ADDR
// tech_Crane := 85 ;
15124: LD_ADDR_EXP 52
15128: PUSH
15129: LD_INT 85
15131: ST_TO_ADDR
// tech_Bulldozer := 86 ;
15132: LD_ADDR_EXP 53
15136: PUSH
15137: LD_INT 86
15139: ST_TO_ADDR
// tech_Hovercraft := 87 ;
15140: LD_ADDR_EXP 54
15144: PUSH
15145: LD_INT 87
15147: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
15148: LD_ADDR_EXP 55
15152: PUSH
15153: LD_INT 88
15155: ST_TO_ADDR
// end ;
15156: LD_VAR 0 1
15160: RET
// every 1 do
15161: GO 15163
15163: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
15164: CALL 15009 0 0
15168: END
// every 0 0$1 do
15169: GO 15171
15171: DISABLE
// begin enable ;
15172: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
15173: LD_STRING updateTimer(
15175: PUSH
15176: LD_OWVAR 1
15180: STR
15181: PUSH
15182: LD_STRING );
15184: STR
15185: PPUSH
15186: CALL_OW 559
// end ;
15190: END
// export function SOS_MapStart ( ) ; begin
15191: LD_INT 0
15193: PPUSH
// if streamModeActive then
15194: LD_EXP 56
15198: IFFALSE 15207
// DefineStreamItems ( true ) ;
15200: LD_INT 1
15202: PPUSH
15203: CALL 16861 0 1
// UpdateFactoryWaypoints ( ) ;
15207: CALL 29722 0 0
// UpdateWarehouseGatheringPoints ( ) ;
15211: CALL 29979 0 0
// end ;
15215: LD_VAR 0 1
15219: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15220: LD_INT 0
15222: PPUSH
// if p2 = 100 then
15223: LD_VAR 0 2
15227: PUSH
15228: LD_INT 100
15230: EQUAL
15231: IFFALSE 16234
// begin if not StreamModeActive then
15233: LD_EXP 56
15237: NOT
15238: IFFALSE 15248
// StreamModeActive := true ;
15240: LD_ADDR_EXP 56
15244: PUSH
15245: LD_INT 1
15247: ST_TO_ADDR
// if p3 = 0 then
15248: LD_VAR 0 3
15252: PUSH
15253: LD_INT 0
15255: EQUAL
15256: IFFALSE 15262
// InitStreamMode ;
15258: CALL 16397 0 0
// if p3 = 1 then
15262: LD_VAR 0 3
15266: PUSH
15267: LD_INT 1
15269: EQUAL
15270: IFFALSE 15280
// sRocket := true ;
15272: LD_ADDR_EXP 61
15276: PUSH
15277: LD_INT 1
15279: ST_TO_ADDR
// if p3 = 2 then
15280: LD_VAR 0 3
15284: PUSH
15285: LD_INT 2
15287: EQUAL
15288: IFFALSE 15298
// sSpeed := true ;
15290: LD_ADDR_EXP 60
15294: PUSH
15295: LD_INT 1
15297: ST_TO_ADDR
// if p3 = 3 then
15298: LD_VAR 0 3
15302: PUSH
15303: LD_INT 3
15305: EQUAL
15306: IFFALSE 15316
// sEngine := true ;
15308: LD_ADDR_EXP 62
15312: PUSH
15313: LD_INT 1
15315: ST_TO_ADDR
// if p3 = 4 then
15316: LD_VAR 0 3
15320: PUSH
15321: LD_INT 4
15323: EQUAL
15324: IFFALSE 15334
// sSpec := true ;
15326: LD_ADDR_EXP 59
15330: PUSH
15331: LD_INT 1
15333: ST_TO_ADDR
// if p3 = 5 then
15334: LD_VAR 0 3
15338: PUSH
15339: LD_INT 5
15341: EQUAL
15342: IFFALSE 15352
// sLevel := true ;
15344: LD_ADDR_EXP 63
15348: PUSH
15349: LD_INT 1
15351: ST_TO_ADDR
// if p3 = 6 then
15352: LD_VAR 0 3
15356: PUSH
15357: LD_INT 6
15359: EQUAL
15360: IFFALSE 15370
// sArmoury := true ;
15362: LD_ADDR_EXP 64
15366: PUSH
15367: LD_INT 1
15369: ST_TO_ADDR
// if p3 = 7 then
15370: LD_VAR 0 3
15374: PUSH
15375: LD_INT 7
15377: EQUAL
15378: IFFALSE 15388
// sRadar := true ;
15380: LD_ADDR_EXP 65
15384: PUSH
15385: LD_INT 1
15387: ST_TO_ADDR
// if p3 = 8 then
15388: LD_VAR 0 3
15392: PUSH
15393: LD_INT 8
15395: EQUAL
15396: IFFALSE 15406
// sBunker := true ;
15398: LD_ADDR_EXP 66
15402: PUSH
15403: LD_INT 1
15405: ST_TO_ADDR
// if p3 = 9 then
15406: LD_VAR 0 3
15410: PUSH
15411: LD_INT 9
15413: EQUAL
15414: IFFALSE 15424
// sHack := true ;
15416: LD_ADDR_EXP 67
15420: PUSH
15421: LD_INT 1
15423: ST_TO_ADDR
// if p3 = 10 then
15424: LD_VAR 0 3
15428: PUSH
15429: LD_INT 10
15431: EQUAL
15432: IFFALSE 15442
// sFire := true ;
15434: LD_ADDR_EXP 68
15438: PUSH
15439: LD_INT 1
15441: ST_TO_ADDR
// if p3 = 11 then
15442: LD_VAR 0 3
15446: PUSH
15447: LD_INT 11
15449: EQUAL
15450: IFFALSE 15460
// sRefresh := true ;
15452: LD_ADDR_EXP 69
15456: PUSH
15457: LD_INT 1
15459: ST_TO_ADDR
// if p3 = 12 then
15460: LD_VAR 0 3
15464: PUSH
15465: LD_INT 12
15467: EQUAL
15468: IFFALSE 15478
// sExp := true ;
15470: LD_ADDR_EXP 70
15474: PUSH
15475: LD_INT 1
15477: ST_TO_ADDR
// if p3 = 13 then
15478: LD_VAR 0 3
15482: PUSH
15483: LD_INT 13
15485: EQUAL
15486: IFFALSE 15496
// sDepot := true ;
15488: LD_ADDR_EXP 71
15492: PUSH
15493: LD_INT 1
15495: ST_TO_ADDR
// if p3 = 14 then
15496: LD_VAR 0 3
15500: PUSH
15501: LD_INT 14
15503: EQUAL
15504: IFFALSE 15514
// sFlag := true ;
15506: LD_ADDR_EXP 72
15510: PUSH
15511: LD_INT 1
15513: ST_TO_ADDR
// if p3 = 15 then
15514: LD_VAR 0 3
15518: PUSH
15519: LD_INT 15
15521: EQUAL
15522: IFFALSE 15532
// sKamikadze := true ;
15524: LD_ADDR_EXP 80
15528: PUSH
15529: LD_INT 1
15531: ST_TO_ADDR
// if p3 = 16 then
15532: LD_VAR 0 3
15536: PUSH
15537: LD_INT 16
15539: EQUAL
15540: IFFALSE 15550
// sTroll := true ;
15542: LD_ADDR_EXP 81
15546: PUSH
15547: LD_INT 1
15549: ST_TO_ADDR
// if p3 = 17 then
15550: LD_VAR 0 3
15554: PUSH
15555: LD_INT 17
15557: EQUAL
15558: IFFALSE 15568
// sSlow := true ;
15560: LD_ADDR_EXP 82
15564: PUSH
15565: LD_INT 1
15567: ST_TO_ADDR
// if p3 = 18 then
15568: LD_VAR 0 3
15572: PUSH
15573: LD_INT 18
15575: EQUAL
15576: IFFALSE 15586
// sLack := true ;
15578: LD_ADDR_EXP 83
15582: PUSH
15583: LD_INT 1
15585: ST_TO_ADDR
// if p3 = 19 then
15586: LD_VAR 0 3
15590: PUSH
15591: LD_INT 19
15593: EQUAL
15594: IFFALSE 15604
// sTank := true ;
15596: LD_ADDR_EXP 85
15600: PUSH
15601: LD_INT 1
15603: ST_TO_ADDR
// if p3 = 20 then
15604: LD_VAR 0 3
15608: PUSH
15609: LD_INT 20
15611: EQUAL
15612: IFFALSE 15622
// sRemote := true ;
15614: LD_ADDR_EXP 86
15618: PUSH
15619: LD_INT 1
15621: ST_TO_ADDR
// if p3 = 21 then
15622: LD_VAR 0 3
15626: PUSH
15627: LD_INT 21
15629: EQUAL
15630: IFFALSE 15640
// sPowell := true ;
15632: LD_ADDR_EXP 87
15636: PUSH
15637: LD_INT 1
15639: ST_TO_ADDR
// if p3 = 22 then
15640: LD_VAR 0 3
15644: PUSH
15645: LD_INT 22
15647: EQUAL
15648: IFFALSE 15658
// sTeleport := true ;
15650: LD_ADDR_EXP 90
15654: PUSH
15655: LD_INT 1
15657: ST_TO_ADDR
// if p3 = 23 then
15658: LD_VAR 0 3
15662: PUSH
15663: LD_INT 23
15665: EQUAL
15666: IFFALSE 15676
// sOilTower := true ;
15668: LD_ADDR_EXP 92
15672: PUSH
15673: LD_INT 1
15675: ST_TO_ADDR
// if p3 = 24 then
15676: LD_VAR 0 3
15680: PUSH
15681: LD_INT 24
15683: EQUAL
15684: IFFALSE 15694
// sShovel := true ;
15686: LD_ADDR_EXP 93
15690: PUSH
15691: LD_INT 1
15693: ST_TO_ADDR
// if p3 = 25 then
15694: LD_VAR 0 3
15698: PUSH
15699: LD_INT 25
15701: EQUAL
15702: IFFALSE 15712
// sSheik := true ;
15704: LD_ADDR_EXP 94
15708: PUSH
15709: LD_INT 1
15711: ST_TO_ADDR
// if p3 = 26 then
15712: LD_VAR 0 3
15716: PUSH
15717: LD_INT 26
15719: EQUAL
15720: IFFALSE 15730
// sEarthquake := true ;
15722: LD_ADDR_EXP 96
15726: PUSH
15727: LD_INT 1
15729: ST_TO_ADDR
// if p3 = 27 then
15730: LD_VAR 0 3
15734: PUSH
15735: LD_INT 27
15737: EQUAL
15738: IFFALSE 15748
// sAI := true ;
15740: LD_ADDR_EXP 97
15744: PUSH
15745: LD_INT 1
15747: ST_TO_ADDR
// if p3 = 28 then
15748: LD_VAR 0 3
15752: PUSH
15753: LD_INT 28
15755: EQUAL
15756: IFFALSE 15766
// sCargo := true ;
15758: LD_ADDR_EXP 100
15762: PUSH
15763: LD_INT 1
15765: ST_TO_ADDR
// if p3 = 29 then
15766: LD_VAR 0 3
15770: PUSH
15771: LD_INT 29
15773: EQUAL
15774: IFFALSE 15784
// sDLaser := true ;
15776: LD_ADDR_EXP 101
15780: PUSH
15781: LD_INT 1
15783: ST_TO_ADDR
// if p3 = 30 then
15784: LD_VAR 0 3
15788: PUSH
15789: LD_INT 30
15791: EQUAL
15792: IFFALSE 15802
// sExchange := true ;
15794: LD_ADDR_EXP 102
15798: PUSH
15799: LD_INT 1
15801: ST_TO_ADDR
// if p3 = 31 then
15802: LD_VAR 0 3
15806: PUSH
15807: LD_INT 31
15809: EQUAL
15810: IFFALSE 15820
// sFac := true ;
15812: LD_ADDR_EXP 103
15816: PUSH
15817: LD_INT 1
15819: ST_TO_ADDR
// if p3 = 32 then
15820: LD_VAR 0 3
15824: PUSH
15825: LD_INT 32
15827: EQUAL
15828: IFFALSE 15838
// sPower := true ;
15830: LD_ADDR_EXP 104
15834: PUSH
15835: LD_INT 1
15837: ST_TO_ADDR
// if p3 = 33 then
15838: LD_VAR 0 3
15842: PUSH
15843: LD_INT 33
15845: EQUAL
15846: IFFALSE 15856
// sRandom := true ;
15848: LD_ADDR_EXP 105
15852: PUSH
15853: LD_INT 1
15855: ST_TO_ADDR
// if p3 = 34 then
15856: LD_VAR 0 3
15860: PUSH
15861: LD_INT 34
15863: EQUAL
15864: IFFALSE 15874
// sShield := true ;
15866: LD_ADDR_EXP 106
15870: PUSH
15871: LD_INT 1
15873: ST_TO_ADDR
// if p3 = 35 then
15874: LD_VAR 0 3
15878: PUSH
15879: LD_INT 35
15881: EQUAL
15882: IFFALSE 15892
// sTime := true ;
15884: LD_ADDR_EXP 107
15888: PUSH
15889: LD_INT 1
15891: ST_TO_ADDR
// if p3 = 36 then
15892: LD_VAR 0 3
15896: PUSH
15897: LD_INT 36
15899: EQUAL
15900: IFFALSE 15910
// sTools := true ;
15902: LD_ADDR_EXP 108
15906: PUSH
15907: LD_INT 1
15909: ST_TO_ADDR
// if p3 = 101 then
15910: LD_VAR 0 3
15914: PUSH
15915: LD_INT 101
15917: EQUAL
15918: IFFALSE 15928
// sSold := true ;
15920: LD_ADDR_EXP 73
15924: PUSH
15925: LD_INT 1
15927: ST_TO_ADDR
// if p3 = 102 then
15928: LD_VAR 0 3
15932: PUSH
15933: LD_INT 102
15935: EQUAL
15936: IFFALSE 15946
// sDiff := true ;
15938: LD_ADDR_EXP 74
15942: PUSH
15943: LD_INT 1
15945: ST_TO_ADDR
// if p3 = 103 then
15946: LD_VAR 0 3
15950: PUSH
15951: LD_INT 103
15953: EQUAL
15954: IFFALSE 15964
// sFog := true ;
15956: LD_ADDR_EXP 77
15960: PUSH
15961: LD_INT 1
15963: ST_TO_ADDR
// if p3 = 104 then
15964: LD_VAR 0 3
15968: PUSH
15969: LD_INT 104
15971: EQUAL
15972: IFFALSE 15982
// sReset := true ;
15974: LD_ADDR_EXP 78
15978: PUSH
15979: LD_INT 1
15981: ST_TO_ADDR
// if p3 = 105 then
15982: LD_VAR 0 3
15986: PUSH
15987: LD_INT 105
15989: EQUAL
15990: IFFALSE 16000
// sSun := true ;
15992: LD_ADDR_EXP 79
15996: PUSH
15997: LD_INT 1
15999: ST_TO_ADDR
// if p3 = 106 then
16000: LD_VAR 0 3
16004: PUSH
16005: LD_INT 106
16007: EQUAL
16008: IFFALSE 16018
// sTiger := true ;
16010: LD_ADDR_EXP 75
16014: PUSH
16015: LD_INT 1
16017: ST_TO_ADDR
// if p3 = 107 then
16018: LD_VAR 0 3
16022: PUSH
16023: LD_INT 107
16025: EQUAL
16026: IFFALSE 16036
// sBomb := true ;
16028: LD_ADDR_EXP 76
16032: PUSH
16033: LD_INT 1
16035: ST_TO_ADDR
// if p3 = 108 then
16036: LD_VAR 0 3
16040: PUSH
16041: LD_INT 108
16043: EQUAL
16044: IFFALSE 16054
// sWound := true ;
16046: LD_ADDR_EXP 84
16050: PUSH
16051: LD_INT 1
16053: ST_TO_ADDR
// if p3 = 109 then
16054: LD_VAR 0 3
16058: PUSH
16059: LD_INT 109
16061: EQUAL
16062: IFFALSE 16072
// sBetray := true ;
16064: LD_ADDR_EXP 88
16068: PUSH
16069: LD_INT 1
16071: ST_TO_ADDR
// if p3 = 110 then
16072: LD_VAR 0 3
16076: PUSH
16077: LD_INT 110
16079: EQUAL
16080: IFFALSE 16090
// sContamin := true ;
16082: LD_ADDR_EXP 89
16086: PUSH
16087: LD_INT 1
16089: ST_TO_ADDR
// if p3 = 111 then
16090: LD_VAR 0 3
16094: PUSH
16095: LD_INT 111
16097: EQUAL
16098: IFFALSE 16108
// sOil := true ;
16100: LD_ADDR_EXP 91
16104: PUSH
16105: LD_INT 1
16107: ST_TO_ADDR
// if p3 = 112 then
16108: LD_VAR 0 3
16112: PUSH
16113: LD_INT 112
16115: EQUAL
16116: IFFALSE 16126
// sStu := true ;
16118: LD_ADDR_EXP 95
16122: PUSH
16123: LD_INT 1
16125: ST_TO_ADDR
// if p3 = 113 then
16126: LD_VAR 0 3
16130: PUSH
16131: LD_INT 113
16133: EQUAL
16134: IFFALSE 16144
// sBazooka := true ;
16136: LD_ADDR_EXP 98
16140: PUSH
16141: LD_INT 1
16143: ST_TO_ADDR
// if p3 = 114 then
16144: LD_VAR 0 3
16148: PUSH
16149: LD_INT 114
16151: EQUAL
16152: IFFALSE 16162
// sMortar := true ;
16154: LD_ADDR_EXP 99
16158: PUSH
16159: LD_INT 1
16161: ST_TO_ADDR
// if p3 = 115 then
16162: LD_VAR 0 3
16166: PUSH
16167: LD_INT 115
16169: EQUAL
16170: IFFALSE 16180
// sRanger := true ;
16172: LD_ADDR_EXP 109
16176: PUSH
16177: LD_INT 1
16179: ST_TO_ADDR
// if p3 = 116 then
16180: LD_VAR 0 3
16184: PUSH
16185: LD_INT 116
16187: EQUAL
16188: IFFALSE 16198
// sComputer := true ;
16190: LD_ADDR_EXP 110
16194: PUSH
16195: LD_INT 1
16197: ST_TO_ADDR
// if p3 = 117 then
16198: LD_VAR 0 3
16202: PUSH
16203: LD_INT 117
16205: EQUAL
16206: IFFALSE 16216
// s30 := true ;
16208: LD_ADDR_EXP 111
16212: PUSH
16213: LD_INT 1
16215: ST_TO_ADDR
// if p3 = 118 then
16216: LD_VAR 0 3
16220: PUSH
16221: LD_INT 118
16223: EQUAL
16224: IFFALSE 16234
// s60 := true ;
16226: LD_ADDR_EXP 112
16230: PUSH
16231: LD_INT 1
16233: ST_TO_ADDR
// end ; if p2 = 101 then
16234: LD_VAR 0 2
16238: PUSH
16239: LD_INT 101
16241: EQUAL
16242: IFFALSE 16370
// begin case p3 of 1 :
16244: LD_VAR 0 3
16248: PUSH
16249: LD_INT 1
16251: DOUBLE
16252: EQUAL
16253: IFTRUE 16257
16255: GO 16264
16257: POP
// hHackUnlimitedResources ; 2 :
16258: CALL 28468 0 0
16262: GO 16370
16264: LD_INT 2
16266: DOUBLE
16267: EQUAL
16268: IFTRUE 16272
16270: GO 16279
16272: POP
// hHackSetLevel10 ; 3 :
16273: CALL 28601 0 0
16277: GO 16370
16279: LD_INT 3
16281: DOUBLE
16282: EQUAL
16283: IFTRUE 16287
16285: GO 16294
16287: POP
// hHackSetLevel10YourUnits ; 4 :
16288: CALL 28686 0 0
16292: GO 16370
16294: LD_INT 4
16296: DOUBLE
16297: EQUAL
16298: IFTRUE 16302
16300: GO 16309
16302: POP
// hHackInvincible ; 5 :
16303: CALL 29134 0 0
16307: GO 16370
16309: LD_INT 5
16311: DOUBLE
16312: EQUAL
16313: IFTRUE 16317
16315: GO 16324
16317: POP
// hHackInvisible ; 6 :
16318: CALL 29245 0 0
16322: GO 16370
16324: LD_INT 6
16326: DOUBLE
16327: EQUAL
16328: IFTRUE 16332
16330: GO 16339
16332: POP
// hHackChangeYourSide ; 7 :
16333: CALL 29302 0 0
16337: GO 16370
16339: LD_INT 7
16341: DOUBLE
16342: EQUAL
16343: IFTRUE 16347
16345: GO 16354
16347: POP
// hHackChangeUnitSide ; 8 :
16348: CALL 29344 0 0
16352: GO 16370
16354: LD_INT 8
16356: DOUBLE
16357: EQUAL
16358: IFTRUE 16362
16360: GO 16369
16362: POP
// hHackFog ; end ;
16363: CALL 29445 0 0
16367: GO 16370
16369: POP
// end ; end ;
16370: LD_VAR 0 7
16374: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
16375: GO 16377
16377: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
16378: LD_STRING initStreamRollete();
16380: PPUSH
16381: CALL_OW 559
// InitStreamMode ;
16385: CALL 16397 0 0
// DefineStreamItems ( false ) ;
16389: LD_INT 0
16391: PPUSH
16392: CALL 16861 0 1
// end ;
16396: END
// function InitStreamMode ; begin
16397: LD_INT 0
16399: PPUSH
// streamModeActive := false ;
16400: LD_ADDR_EXP 56
16404: PUSH
16405: LD_INT 0
16407: ST_TO_ADDR
// normalCounter := 36 ;
16408: LD_ADDR_EXP 57
16412: PUSH
16413: LD_INT 36
16415: ST_TO_ADDR
// hardcoreCounter := 18 ;
16416: LD_ADDR_EXP 58
16420: PUSH
16421: LD_INT 18
16423: ST_TO_ADDR
// sRocket := false ;
16424: LD_ADDR_EXP 61
16428: PUSH
16429: LD_INT 0
16431: ST_TO_ADDR
// sSpeed := false ;
16432: LD_ADDR_EXP 60
16436: PUSH
16437: LD_INT 0
16439: ST_TO_ADDR
// sEngine := false ;
16440: LD_ADDR_EXP 62
16444: PUSH
16445: LD_INT 0
16447: ST_TO_ADDR
// sSpec := false ;
16448: LD_ADDR_EXP 59
16452: PUSH
16453: LD_INT 0
16455: ST_TO_ADDR
// sLevel := false ;
16456: LD_ADDR_EXP 63
16460: PUSH
16461: LD_INT 0
16463: ST_TO_ADDR
// sArmoury := false ;
16464: LD_ADDR_EXP 64
16468: PUSH
16469: LD_INT 0
16471: ST_TO_ADDR
// sRadar := false ;
16472: LD_ADDR_EXP 65
16476: PUSH
16477: LD_INT 0
16479: ST_TO_ADDR
// sBunker := false ;
16480: LD_ADDR_EXP 66
16484: PUSH
16485: LD_INT 0
16487: ST_TO_ADDR
// sHack := false ;
16488: LD_ADDR_EXP 67
16492: PUSH
16493: LD_INT 0
16495: ST_TO_ADDR
// sFire := false ;
16496: LD_ADDR_EXP 68
16500: PUSH
16501: LD_INT 0
16503: ST_TO_ADDR
// sRefresh := false ;
16504: LD_ADDR_EXP 69
16508: PUSH
16509: LD_INT 0
16511: ST_TO_ADDR
// sExp := false ;
16512: LD_ADDR_EXP 70
16516: PUSH
16517: LD_INT 0
16519: ST_TO_ADDR
// sDepot := false ;
16520: LD_ADDR_EXP 71
16524: PUSH
16525: LD_INT 0
16527: ST_TO_ADDR
// sFlag := false ;
16528: LD_ADDR_EXP 72
16532: PUSH
16533: LD_INT 0
16535: ST_TO_ADDR
// sKamikadze := false ;
16536: LD_ADDR_EXP 80
16540: PUSH
16541: LD_INT 0
16543: ST_TO_ADDR
// sTroll := false ;
16544: LD_ADDR_EXP 81
16548: PUSH
16549: LD_INT 0
16551: ST_TO_ADDR
// sSlow := false ;
16552: LD_ADDR_EXP 82
16556: PUSH
16557: LD_INT 0
16559: ST_TO_ADDR
// sLack := false ;
16560: LD_ADDR_EXP 83
16564: PUSH
16565: LD_INT 0
16567: ST_TO_ADDR
// sTank := false ;
16568: LD_ADDR_EXP 85
16572: PUSH
16573: LD_INT 0
16575: ST_TO_ADDR
// sRemote := false ;
16576: LD_ADDR_EXP 86
16580: PUSH
16581: LD_INT 0
16583: ST_TO_ADDR
// sPowell := false ;
16584: LD_ADDR_EXP 87
16588: PUSH
16589: LD_INT 0
16591: ST_TO_ADDR
// sTeleport := false ;
16592: LD_ADDR_EXP 90
16596: PUSH
16597: LD_INT 0
16599: ST_TO_ADDR
// sOilTower := false ;
16600: LD_ADDR_EXP 92
16604: PUSH
16605: LD_INT 0
16607: ST_TO_ADDR
// sShovel := false ;
16608: LD_ADDR_EXP 93
16612: PUSH
16613: LD_INT 0
16615: ST_TO_ADDR
// sSheik := false ;
16616: LD_ADDR_EXP 94
16620: PUSH
16621: LD_INT 0
16623: ST_TO_ADDR
// sEarthquake := false ;
16624: LD_ADDR_EXP 96
16628: PUSH
16629: LD_INT 0
16631: ST_TO_ADDR
// sAI := false ;
16632: LD_ADDR_EXP 97
16636: PUSH
16637: LD_INT 0
16639: ST_TO_ADDR
// sCargo := false ;
16640: LD_ADDR_EXP 100
16644: PUSH
16645: LD_INT 0
16647: ST_TO_ADDR
// sDLaser := false ;
16648: LD_ADDR_EXP 101
16652: PUSH
16653: LD_INT 0
16655: ST_TO_ADDR
// sExchange := false ;
16656: LD_ADDR_EXP 102
16660: PUSH
16661: LD_INT 0
16663: ST_TO_ADDR
// sFac := false ;
16664: LD_ADDR_EXP 103
16668: PUSH
16669: LD_INT 0
16671: ST_TO_ADDR
// sPower := false ;
16672: LD_ADDR_EXP 104
16676: PUSH
16677: LD_INT 0
16679: ST_TO_ADDR
// sRandom := false ;
16680: LD_ADDR_EXP 105
16684: PUSH
16685: LD_INT 0
16687: ST_TO_ADDR
// sShield := false ;
16688: LD_ADDR_EXP 106
16692: PUSH
16693: LD_INT 0
16695: ST_TO_ADDR
// sTime := false ;
16696: LD_ADDR_EXP 107
16700: PUSH
16701: LD_INT 0
16703: ST_TO_ADDR
// sTools := false ;
16704: LD_ADDR_EXP 108
16708: PUSH
16709: LD_INT 0
16711: ST_TO_ADDR
// sSold := false ;
16712: LD_ADDR_EXP 73
16716: PUSH
16717: LD_INT 0
16719: ST_TO_ADDR
// sDiff := false ;
16720: LD_ADDR_EXP 74
16724: PUSH
16725: LD_INT 0
16727: ST_TO_ADDR
// sFog := false ;
16728: LD_ADDR_EXP 77
16732: PUSH
16733: LD_INT 0
16735: ST_TO_ADDR
// sReset := false ;
16736: LD_ADDR_EXP 78
16740: PUSH
16741: LD_INT 0
16743: ST_TO_ADDR
// sSun := false ;
16744: LD_ADDR_EXP 79
16748: PUSH
16749: LD_INT 0
16751: ST_TO_ADDR
// sTiger := false ;
16752: LD_ADDR_EXP 75
16756: PUSH
16757: LD_INT 0
16759: ST_TO_ADDR
// sBomb := false ;
16760: LD_ADDR_EXP 76
16764: PUSH
16765: LD_INT 0
16767: ST_TO_ADDR
// sWound := false ;
16768: LD_ADDR_EXP 84
16772: PUSH
16773: LD_INT 0
16775: ST_TO_ADDR
// sBetray := false ;
16776: LD_ADDR_EXP 88
16780: PUSH
16781: LD_INT 0
16783: ST_TO_ADDR
// sContamin := false ;
16784: LD_ADDR_EXP 89
16788: PUSH
16789: LD_INT 0
16791: ST_TO_ADDR
// sOil := false ;
16792: LD_ADDR_EXP 91
16796: PUSH
16797: LD_INT 0
16799: ST_TO_ADDR
// sStu := false ;
16800: LD_ADDR_EXP 95
16804: PUSH
16805: LD_INT 0
16807: ST_TO_ADDR
// sBazooka := false ;
16808: LD_ADDR_EXP 98
16812: PUSH
16813: LD_INT 0
16815: ST_TO_ADDR
// sMortar := false ;
16816: LD_ADDR_EXP 99
16820: PUSH
16821: LD_INT 0
16823: ST_TO_ADDR
// sRanger := false ;
16824: LD_ADDR_EXP 109
16828: PUSH
16829: LD_INT 0
16831: ST_TO_ADDR
// sComputer := false ;
16832: LD_ADDR_EXP 110
16836: PUSH
16837: LD_INT 0
16839: ST_TO_ADDR
// s30 := false ;
16840: LD_ADDR_EXP 111
16844: PUSH
16845: LD_INT 0
16847: ST_TO_ADDR
// s60 := false ;
16848: LD_ADDR_EXP 112
16852: PUSH
16853: LD_INT 0
16855: ST_TO_ADDR
// end ;
16856: LD_VAR 0 1
16860: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
16861: LD_INT 0
16863: PPUSH
16864: PPUSH
16865: PPUSH
16866: PPUSH
16867: PPUSH
16868: PPUSH
16869: PPUSH
// result := [ ] ;
16870: LD_ADDR_VAR 0 2
16874: PUSH
16875: EMPTY
16876: ST_TO_ADDR
// if campaign_id = 1 then
16877: LD_OWVAR 69
16881: PUSH
16882: LD_INT 1
16884: EQUAL
16885: IFFALSE 20051
// begin case mission_number of 1 :
16887: LD_OWVAR 70
16891: PUSH
16892: LD_INT 1
16894: DOUBLE
16895: EQUAL
16896: IFTRUE 16900
16898: GO 16976
16900: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
16901: LD_ADDR_VAR 0 2
16905: PUSH
16906: LD_INT 2
16908: PUSH
16909: LD_INT 4
16911: PUSH
16912: LD_INT 11
16914: PUSH
16915: LD_INT 12
16917: PUSH
16918: LD_INT 15
16920: PUSH
16921: LD_INT 16
16923: PUSH
16924: LD_INT 22
16926: PUSH
16927: LD_INT 23
16929: PUSH
16930: LD_INT 26
16932: PUSH
16933: EMPTY
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: LIST
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: PUSH
16944: LD_INT 101
16946: PUSH
16947: LD_INT 102
16949: PUSH
16950: LD_INT 106
16952: PUSH
16953: LD_INT 116
16955: PUSH
16956: LD_INT 117
16958: PUSH
16959: LD_INT 118
16961: PUSH
16962: EMPTY
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: PUSH
16970: EMPTY
16971: LIST
16972: LIST
16973: ST_TO_ADDR
16974: GO 20049
16976: LD_INT 2
16978: DOUBLE
16979: EQUAL
16980: IFTRUE 16984
16982: GO 17068
16984: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
16985: LD_ADDR_VAR 0 2
16989: PUSH
16990: LD_INT 2
16992: PUSH
16993: LD_INT 4
16995: PUSH
16996: LD_INT 11
16998: PUSH
16999: LD_INT 12
17001: PUSH
17002: LD_INT 15
17004: PUSH
17005: LD_INT 16
17007: PUSH
17008: LD_INT 22
17010: PUSH
17011: LD_INT 23
17013: PUSH
17014: LD_INT 26
17016: PUSH
17017: EMPTY
17018: LIST
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: LIST
17026: LIST
17027: PUSH
17028: LD_INT 101
17030: PUSH
17031: LD_INT 102
17033: PUSH
17034: LD_INT 105
17036: PUSH
17037: LD_INT 106
17039: PUSH
17040: LD_INT 108
17042: PUSH
17043: LD_INT 116
17045: PUSH
17046: LD_INT 117
17048: PUSH
17049: LD_INT 118
17051: PUSH
17052: EMPTY
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: LIST
17060: LIST
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: ST_TO_ADDR
17066: GO 20049
17068: LD_INT 3
17070: DOUBLE
17071: EQUAL
17072: IFTRUE 17076
17074: GO 17164
17076: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
17077: LD_ADDR_VAR 0 2
17081: PUSH
17082: LD_INT 2
17084: PUSH
17085: LD_INT 4
17087: PUSH
17088: LD_INT 5
17090: PUSH
17091: LD_INT 11
17093: PUSH
17094: LD_INT 12
17096: PUSH
17097: LD_INT 15
17099: PUSH
17100: LD_INT 16
17102: PUSH
17103: LD_INT 22
17105: PUSH
17106: LD_INT 26
17108: PUSH
17109: LD_INT 36
17111: PUSH
17112: EMPTY
17113: LIST
17114: LIST
17115: LIST
17116: LIST
17117: LIST
17118: LIST
17119: LIST
17120: LIST
17121: LIST
17122: LIST
17123: PUSH
17124: LD_INT 101
17126: PUSH
17127: LD_INT 102
17129: PUSH
17130: LD_INT 105
17132: PUSH
17133: LD_INT 106
17135: PUSH
17136: LD_INT 108
17138: PUSH
17139: LD_INT 116
17141: PUSH
17142: LD_INT 117
17144: PUSH
17145: LD_INT 118
17147: PUSH
17148: EMPTY
17149: LIST
17150: LIST
17151: LIST
17152: LIST
17153: LIST
17154: LIST
17155: LIST
17156: LIST
17157: PUSH
17158: EMPTY
17159: LIST
17160: LIST
17161: ST_TO_ADDR
17162: GO 20049
17164: LD_INT 4
17166: DOUBLE
17167: EQUAL
17168: IFTRUE 17172
17170: GO 17268
17172: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
17173: LD_ADDR_VAR 0 2
17177: PUSH
17178: LD_INT 2
17180: PUSH
17181: LD_INT 4
17183: PUSH
17184: LD_INT 5
17186: PUSH
17187: LD_INT 8
17189: PUSH
17190: LD_INT 11
17192: PUSH
17193: LD_INT 12
17195: PUSH
17196: LD_INT 15
17198: PUSH
17199: LD_INT 16
17201: PUSH
17202: LD_INT 22
17204: PUSH
17205: LD_INT 23
17207: PUSH
17208: LD_INT 26
17210: PUSH
17211: LD_INT 36
17213: PUSH
17214: EMPTY
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: LIST
17225: LIST
17226: LIST
17227: PUSH
17228: LD_INT 101
17230: PUSH
17231: LD_INT 102
17233: PUSH
17234: LD_INT 105
17236: PUSH
17237: LD_INT 106
17239: PUSH
17240: LD_INT 108
17242: PUSH
17243: LD_INT 116
17245: PUSH
17246: LD_INT 117
17248: PUSH
17249: LD_INT 118
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: PUSH
17262: EMPTY
17263: LIST
17264: LIST
17265: ST_TO_ADDR
17266: GO 20049
17268: LD_INT 5
17270: DOUBLE
17271: EQUAL
17272: IFTRUE 17276
17274: GO 17388
17276: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
17277: LD_ADDR_VAR 0 2
17281: PUSH
17282: LD_INT 2
17284: PUSH
17285: LD_INT 4
17287: PUSH
17288: LD_INT 5
17290: PUSH
17291: LD_INT 6
17293: PUSH
17294: LD_INT 8
17296: PUSH
17297: LD_INT 11
17299: PUSH
17300: LD_INT 12
17302: PUSH
17303: LD_INT 15
17305: PUSH
17306: LD_INT 16
17308: PUSH
17309: LD_INT 22
17311: PUSH
17312: LD_INT 23
17314: PUSH
17315: LD_INT 25
17317: PUSH
17318: LD_INT 26
17320: PUSH
17321: LD_INT 36
17323: PUSH
17324: EMPTY
17325: LIST
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: LIST
17331: LIST
17332: LIST
17333: LIST
17334: LIST
17335: LIST
17336: LIST
17337: LIST
17338: LIST
17339: PUSH
17340: LD_INT 101
17342: PUSH
17343: LD_INT 102
17345: PUSH
17346: LD_INT 105
17348: PUSH
17349: LD_INT 106
17351: PUSH
17352: LD_INT 108
17354: PUSH
17355: LD_INT 109
17357: PUSH
17358: LD_INT 112
17360: PUSH
17361: LD_INT 116
17363: PUSH
17364: LD_INT 117
17366: PUSH
17367: LD_INT 118
17369: PUSH
17370: EMPTY
17371: LIST
17372: LIST
17373: LIST
17374: LIST
17375: LIST
17376: LIST
17377: LIST
17378: LIST
17379: LIST
17380: LIST
17381: PUSH
17382: EMPTY
17383: LIST
17384: LIST
17385: ST_TO_ADDR
17386: GO 20049
17388: LD_INT 6
17390: DOUBLE
17391: EQUAL
17392: IFTRUE 17396
17394: GO 17528
17396: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
17397: LD_ADDR_VAR 0 2
17401: PUSH
17402: LD_INT 2
17404: PUSH
17405: LD_INT 4
17407: PUSH
17408: LD_INT 5
17410: PUSH
17411: LD_INT 6
17413: PUSH
17414: LD_INT 8
17416: PUSH
17417: LD_INT 11
17419: PUSH
17420: LD_INT 12
17422: PUSH
17423: LD_INT 15
17425: PUSH
17426: LD_INT 16
17428: PUSH
17429: LD_INT 20
17431: PUSH
17432: LD_INT 21
17434: PUSH
17435: LD_INT 22
17437: PUSH
17438: LD_INT 23
17440: PUSH
17441: LD_INT 25
17443: PUSH
17444: LD_INT 26
17446: PUSH
17447: LD_INT 30
17449: PUSH
17450: LD_INT 31
17452: PUSH
17453: LD_INT 32
17455: PUSH
17456: LD_INT 36
17458: PUSH
17459: EMPTY
17460: LIST
17461: LIST
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: PUSH
17480: LD_INT 101
17482: PUSH
17483: LD_INT 102
17485: PUSH
17486: LD_INT 105
17488: PUSH
17489: LD_INT 106
17491: PUSH
17492: LD_INT 108
17494: PUSH
17495: LD_INT 109
17497: PUSH
17498: LD_INT 112
17500: PUSH
17501: LD_INT 116
17503: PUSH
17504: LD_INT 117
17506: PUSH
17507: LD_INT 118
17509: PUSH
17510: EMPTY
17511: LIST
17512: LIST
17513: LIST
17514: LIST
17515: LIST
17516: LIST
17517: LIST
17518: LIST
17519: LIST
17520: LIST
17521: PUSH
17522: EMPTY
17523: LIST
17524: LIST
17525: ST_TO_ADDR
17526: GO 20049
17528: LD_INT 7
17530: DOUBLE
17531: EQUAL
17532: IFTRUE 17536
17534: GO 17648
17536: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
17537: LD_ADDR_VAR 0 2
17541: PUSH
17542: LD_INT 2
17544: PUSH
17545: LD_INT 4
17547: PUSH
17548: LD_INT 5
17550: PUSH
17551: LD_INT 7
17553: PUSH
17554: LD_INT 11
17556: PUSH
17557: LD_INT 12
17559: PUSH
17560: LD_INT 15
17562: PUSH
17563: LD_INT 16
17565: PUSH
17566: LD_INT 20
17568: PUSH
17569: LD_INT 21
17571: PUSH
17572: LD_INT 22
17574: PUSH
17575: LD_INT 23
17577: PUSH
17578: LD_INT 25
17580: PUSH
17581: LD_INT 26
17583: PUSH
17584: EMPTY
17585: LIST
17586: LIST
17587: LIST
17588: LIST
17589: LIST
17590: LIST
17591: LIST
17592: LIST
17593: LIST
17594: LIST
17595: LIST
17596: LIST
17597: LIST
17598: LIST
17599: PUSH
17600: LD_INT 101
17602: PUSH
17603: LD_INT 102
17605: PUSH
17606: LD_INT 103
17608: PUSH
17609: LD_INT 105
17611: PUSH
17612: LD_INT 106
17614: PUSH
17615: LD_INT 108
17617: PUSH
17618: LD_INT 112
17620: PUSH
17621: LD_INT 116
17623: PUSH
17624: LD_INT 117
17626: PUSH
17627: LD_INT 118
17629: PUSH
17630: EMPTY
17631: LIST
17632: LIST
17633: LIST
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: LIST
17639: LIST
17640: LIST
17641: PUSH
17642: EMPTY
17643: LIST
17644: LIST
17645: ST_TO_ADDR
17646: GO 20049
17648: LD_INT 8
17650: DOUBLE
17651: EQUAL
17652: IFTRUE 17656
17654: GO 17796
17656: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
17657: LD_ADDR_VAR 0 2
17661: PUSH
17662: LD_INT 2
17664: PUSH
17665: LD_INT 4
17667: PUSH
17668: LD_INT 5
17670: PUSH
17671: LD_INT 6
17673: PUSH
17674: LD_INT 7
17676: PUSH
17677: LD_INT 8
17679: PUSH
17680: LD_INT 11
17682: PUSH
17683: LD_INT 12
17685: PUSH
17686: LD_INT 15
17688: PUSH
17689: LD_INT 16
17691: PUSH
17692: LD_INT 20
17694: PUSH
17695: LD_INT 21
17697: PUSH
17698: LD_INT 22
17700: PUSH
17701: LD_INT 23
17703: PUSH
17704: LD_INT 25
17706: PUSH
17707: LD_INT 26
17709: PUSH
17710: LD_INT 30
17712: PUSH
17713: LD_INT 31
17715: PUSH
17716: LD_INT 32
17718: PUSH
17719: LD_INT 36
17721: PUSH
17722: EMPTY
17723: LIST
17724: LIST
17725: LIST
17726: LIST
17727: LIST
17728: LIST
17729: LIST
17730: LIST
17731: LIST
17732: LIST
17733: LIST
17734: LIST
17735: LIST
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: PUSH
17744: LD_INT 101
17746: PUSH
17747: LD_INT 102
17749: PUSH
17750: LD_INT 103
17752: PUSH
17753: LD_INT 105
17755: PUSH
17756: LD_INT 106
17758: PUSH
17759: LD_INT 108
17761: PUSH
17762: LD_INT 109
17764: PUSH
17765: LD_INT 112
17767: PUSH
17768: LD_INT 116
17770: PUSH
17771: LD_INT 117
17773: PUSH
17774: LD_INT 118
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: LIST
17781: LIST
17782: LIST
17783: LIST
17784: LIST
17785: LIST
17786: LIST
17787: LIST
17788: LIST
17789: PUSH
17790: EMPTY
17791: LIST
17792: LIST
17793: ST_TO_ADDR
17794: GO 20049
17796: LD_INT 9
17798: DOUBLE
17799: EQUAL
17800: IFTRUE 17804
17802: GO 17952
17804: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
17805: LD_ADDR_VAR 0 2
17809: PUSH
17810: LD_INT 2
17812: PUSH
17813: LD_INT 4
17815: PUSH
17816: LD_INT 5
17818: PUSH
17819: LD_INT 6
17821: PUSH
17822: LD_INT 7
17824: PUSH
17825: LD_INT 8
17827: PUSH
17828: LD_INT 11
17830: PUSH
17831: LD_INT 12
17833: PUSH
17834: LD_INT 15
17836: PUSH
17837: LD_INT 16
17839: PUSH
17840: LD_INT 20
17842: PUSH
17843: LD_INT 21
17845: PUSH
17846: LD_INT 22
17848: PUSH
17849: LD_INT 23
17851: PUSH
17852: LD_INT 25
17854: PUSH
17855: LD_INT 26
17857: PUSH
17858: LD_INT 28
17860: PUSH
17861: LD_INT 30
17863: PUSH
17864: LD_INT 31
17866: PUSH
17867: LD_INT 32
17869: PUSH
17870: LD_INT 36
17872: PUSH
17873: EMPTY
17874: LIST
17875: LIST
17876: LIST
17877: LIST
17878: LIST
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: LIST
17884: LIST
17885: LIST
17886: LIST
17887: LIST
17888: LIST
17889: LIST
17890: LIST
17891: LIST
17892: LIST
17893: LIST
17894: LIST
17895: PUSH
17896: LD_INT 101
17898: PUSH
17899: LD_INT 102
17901: PUSH
17902: LD_INT 103
17904: PUSH
17905: LD_INT 105
17907: PUSH
17908: LD_INT 106
17910: PUSH
17911: LD_INT 108
17913: PUSH
17914: LD_INT 109
17916: PUSH
17917: LD_INT 112
17919: PUSH
17920: LD_INT 114
17922: PUSH
17923: LD_INT 116
17925: PUSH
17926: LD_INT 117
17928: PUSH
17929: LD_INT 118
17931: PUSH
17932: EMPTY
17933: LIST
17934: LIST
17935: LIST
17936: LIST
17937: LIST
17938: LIST
17939: LIST
17940: LIST
17941: LIST
17942: LIST
17943: LIST
17944: LIST
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: ST_TO_ADDR
17950: GO 20049
17952: LD_INT 10
17954: DOUBLE
17955: EQUAL
17956: IFTRUE 17960
17958: GO 18156
17960: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
17961: LD_ADDR_VAR 0 2
17965: PUSH
17966: LD_INT 2
17968: PUSH
17969: LD_INT 4
17971: PUSH
17972: LD_INT 5
17974: PUSH
17975: LD_INT 6
17977: PUSH
17978: LD_INT 7
17980: PUSH
17981: LD_INT 8
17983: PUSH
17984: LD_INT 9
17986: PUSH
17987: LD_INT 10
17989: PUSH
17990: LD_INT 11
17992: PUSH
17993: LD_INT 12
17995: PUSH
17996: LD_INT 13
17998: PUSH
17999: LD_INT 14
18001: PUSH
18002: LD_INT 15
18004: PUSH
18005: LD_INT 16
18007: PUSH
18008: LD_INT 17
18010: PUSH
18011: LD_INT 18
18013: PUSH
18014: LD_INT 19
18016: PUSH
18017: LD_INT 20
18019: PUSH
18020: LD_INT 21
18022: PUSH
18023: LD_INT 22
18025: PUSH
18026: LD_INT 23
18028: PUSH
18029: LD_INT 24
18031: PUSH
18032: LD_INT 25
18034: PUSH
18035: LD_INT 26
18037: PUSH
18038: LD_INT 28
18040: PUSH
18041: LD_INT 30
18043: PUSH
18044: LD_INT 31
18046: PUSH
18047: LD_INT 32
18049: PUSH
18050: LD_INT 36
18052: PUSH
18053: EMPTY
18054: LIST
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: LIST
18063: LIST
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: LIST
18078: LIST
18079: LIST
18080: LIST
18081: LIST
18082: LIST
18083: PUSH
18084: LD_INT 101
18086: PUSH
18087: LD_INT 102
18089: PUSH
18090: LD_INT 103
18092: PUSH
18093: LD_INT 104
18095: PUSH
18096: LD_INT 105
18098: PUSH
18099: LD_INT 106
18101: PUSH
18102: LD_INT 107
18104: PUSH
18105: LD_INT 108
18107: PUSH
18108: LD_INT 109
18110: PUSH
18111: LD_INT 110
18113: PUSH
18114: LD_INT 111
18116: PUSH
18117: LD_INT 112
18119: PUSH
18120: LD_INT 114
18122: PUSH
18123: LD_INT 116
18125: PUSH
18126: LD_INT 117
18128: PUSH
18129: LD_INT 118
18131: PUSH
18132: EMPTY
18133: LIST
18134: LIST
18135: LIST
18136: LIST
18137: LIST
18138: LIST
18139: LIST
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: ST_TO_ADDR
18154: GO 20049
18156: LD_INT 11
18158: DOUBLE
18159: EQUAL
18160: IFTRUE 18164
18162: GO 18368
18164: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
18165: LD_ADDR_VAR 0 2
18169: PUSH
18170: LD_INT 2
18172: PUSH
18173: LD_INT 3
18175: PUSH
18176: LD_INT 4
18178: PUSH
18179: LD_INT 5
18181: PUSH
18182: LD_INT 6
18184: PUSH
18185: LD_INT 7
18187: PUSH
18188: LD_INT 8
18190: PUSH
18191: LD_INT 9
18193: PUSH
18194: LD_INT 10
18196: PUSH
18197: LD_INT 11
18199: PUSH
18200: LD_INT 12
18202: PUSH
18203: LD_INT 13
18205: PUSH
18206: LD_INT 14
18208: PUSH
18209: LD_INT 15
18211: PUSH
18212: LD_INT 16
18214: PUSH
18215: LD_INT 17
18217: PUSH
18218: LD_INT 18
18220: PUSH
18221: LD_INT 19
18223: PUSH
18224: LD_INT 20
18226: PUSH
18227: LD_INT 21
18229: PUSH
18230: LD_INT 22
18232: PUSH
18233: LD_INT 23
18235: PUSH
18236: LD_INT 24
18238: PUSH
18239: LD_INT 25
18241: PUSH
18242: LD_INT 26
18244: PUSH
18245: LD_INT 28
18247: PUSH
18248: LD_INT 30
18250: PUSH
18251: LD_INT 31
18253: PUSH
18254: LD_INT 32
18256: PUSH
18257: LD_INT 34
18259: PUSH
18260: LD_INT 36
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: LIST
18267: LIST
18268: LIST
18269: LIST
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: LIST
18275: LIST
18276: LIST
18277: LIST
18278: LIST
18279: LIST
18280: LIST
18281: LIST
18282: LIST
18283: LIST
18284: LIST
18285: LIST
18286: LIST
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: LIST
18294: LIST
18295: PUSH
18296: LD_INT 101
18298: PUSH
18299: LD_INT 102
18301: PUSH
18302: LD_INT 103
18304: PUSH
18305: LD_INT 104
18307: PUSH
18308: LD_INT 105
18310: PUSH
18311: LD_INT 106
18313: PUSH
18314: LD_INT 107
18316: PUSH
18317: LD_INT 108
18319: PUSH
18320: LD_INT 109
18322: PUSH
18323: LD_INT 110
18325: PUSH
18326: LD_INT 111
18328: PUSH
18329: LD_INT 112
18331: PUSH
18332: LD_INT 114
18334: PUSH
18335: LD_INT 116
18337: PUSH
18338: LD_INT 117
18340: PUSH
18341: LD_INT 118
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: LIST
18348: LIST
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: LIST
18354: LIST
18355: LIST
18356: LIST
18357: LIST
18358: LIST
18359: LIST
18360: LIST
18361: PUSH
18362: EMPTY
18363: LIST
18364: LIST
18365: ST_TO_ADDR
18366: GO 20049
18368: LD_INT 12
18370: DOUBLE
18371: EQUAL
18372: IFTRUE 18376
18374: GO 18596
18376: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
18377: LD_ADDR_VAR 0 2
18381: PUSH
18382: LD_INT 1
18384: PUSH
18385: LD_INT 2
18387: PUSH
18388: LD_INT 3
18390: PUSH
18391: LD_INT 4
18393: PUSH
18394: LD_INT 5
18396: PUSH
18397: LD_INT 6
18399: PUSH
18400: LD_INT 7
18402: PUSH
18403: LD_INT 8
18405: PUSH
18406: LD_INT 9
18408: PUSH
18409: LD_INT 10
18411: PUSH
18412: LD_INT 11
18414: PUSH
18415: LD_INT 12
18417: PUSH
18418: LD_INT 13
18420: PUSH
18421: LD_INT 14
18423: PUSH
18424: LD_INT 15
18426: PUSH
18427: LD_INT 16
18429: PUSH
18430: LD_INT 17
18432: PUSH
18433: LD_INT 18
18435: PUSH
18436: LD_INT 19
18438: PUSH
18439: LD_INT 20
18441: PUSH
18442: LD_INT 21
18444: PUSH
18445: LD_INT 22
18447: PUSH
18448: LD_INT 23
18450: PUSH
18451: LD_INT 24
18453: PUSH
18454: LD_INT 25
18456: PUSH
18457: LD_INT 26
18459: PUSH
18460: LD_INT 27
18462: PUSH
18463: LD_INT 28
18465: PUSH
18466: LD_INT 30
18468: PUSH
18469: LD_INT 31
18471: PUSH
18472: LD_INT 32
18474: PUSH
18475: LD_INT 33
18477: PUSH
18478: LD_INT 34
18480: PUSH
18481: LD_INT 36
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: LIST
18495: LIST
18496: LIST
18497: LIST
18498: LIST
18499: LIST
18500: LIST
18501: LIST
18502: LIST
18503: LIST
18504: LIST
18505: LIST
18506: LIST
18507: LIST
18508: LIST
18509: LIST
18510: LIST
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: LIST
18516: LIST
18517: LIST
18518: LIST
18519: PUSH
18520: LD_INT 101
18522: PUSH
18523: LD_INT 102
18525: PUSH
18526: LD_INT 103
18528: PUSH
18529: LD_INT 104
18531: PUSH
18532: LD_INT 105
18534: PUSH
18535: LD_INT 106
18537: PUSH
18538: LD_INT 107
18540: PUSH
18541: LD_INT 108
18543: PUSH
18544: LD_INT 109
18546: PUSH
18547: LD_INT 110
18549: PUSH
18550: LD_INT 111
18552: PUSH
18553: LD_INT 112
18555: PUSH
18556: LD_INT 113
18558: PUSH
18559: LD_INT 114
18561: PUSH
18562: LD_INT 116
18564: PUSH
18565: LD_INT 117
18567: PUSH
18568: LD_INT 118
18570: PUSH
18571: EMPTY
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: ST_TO_ADDR
18594: GO 20049
18596: LD_INT 13
18598: DOUBLE
18599: EQUAL
18600: IFTRUE 18604
18602: GO 18812
18604: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
18605: LD_ADDR_VAR 0 2
18609: PUSH
18610: LD_INT 1
18612: PUSH
18613: LD_INT 2
18615: PUSH
18616: LD_INT 3
18618: PUSH
18619: LD_INT 4
18621: PUSH
18622: LD_INT 5
18624: PUSH
18625: LD_INT 8
18627: PUSH
18628: LD_INT 9
18630: PUSH
18631: LD_INT 10
18633: PUSH
18634: LD_INT 11
18636: PUSH
18637: LD_INT 12
18639: PUSH
18640: LD_INT 14
18642: PUSH
18643: LD_INT 15
18645: PUSH
18646: LD_INT 16
18648: PUSH
18649: LD_INT 17
18651: PUSH
18652: LD_INT 18
18654: PUSH
18655: LD_INT 19
18657: PUSH
18658: LD_INT 20
18660: PUSH
18661: LD_INT 21
18663: PUSH
18664: LD_INT 22
18666: PUSH
18667: LD_INT 23
18669: PUSH
18670: LD_INT 24
18672: PUSH
18673: LD_INT 25
18675: PUSH
18676: LD_INT 26
18678: PUSH
18679: LD_INT 27
18681: PUSH
18682: LD_INT 28
18684: PUSH
18685: LD_INT 30
18687: PUSH
18688: LD_INT 31
18690: PUSH
18691: LD_INT 32
18693: PUSH
18694: LD_INT 33
18696: PUSH
18697: LD_INT 34
18699: PUSH
18700: LD_INT 36
18702: PUSH
18703: EMPTY
18704: LIST
18705: LIST
18706: LIST
18707: LIST
18708: LIST
18709: LIST
18710: LIST
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: LIST
18717: LIST
18718: LIST
18719: LIST
18720: LIST
18721: LIST
18722: LIST
18723: LIST
18724: LIST
18725: LIST
18726: LIST
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: LIST
18734: LIST
18735: PUSH
18736: LD_INT 101
18738: PUSH
18739: LD_INT 102
18741: PUSH
18742: LD_INT 103
18744: PUSH
18745: LD_INT 104
18747: PUSH
18748: LD_INT 105
18750: PUSH
18751: LD_INT 106
18753: PUSH
18754: LD_INT 107
18756: PUSH
18757: LD_INT 108
18759: PUSH
18760: LD_INT 109
18762: PUSH
18763: LD_INT 110
18765: PUSH
18766: LD_INT 111
18768: PUSH
18769: LD_INT 112
18771: PUSH
18772: LD_INT 113
18774: PUSH
18775: LD_INT 114
18777: PUSH
18778: LD_INT 116
18780: PUSH
18781: LD_INT 117
18783: PUSH
18784: LD_INT 118
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: LIST
18791: LIST
18792: LIST
18793: LIST
18794: LIST
18795: LIST
18796: LIST
18797: LIST
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: PUSH
18806: EMPTY
18807: LIST
18808: LIST
18809: ST_TO_ADDR
18810: GO 20049
18812: LD_INT 14
18814: DOUBLE
18815: EQUAL
18816: IFTRUE 18820
18818: GO 19044
18820: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
18821: LD_ADDR_VAR 0 2
18825: PUSH
18826: LD_INT 1
18828: PUSH
18829: LD_INT 2
18831: PUSH
18832: LD_INT 3
18834: PUSH
18835: LD_INT 4
18837: PUSH
18838: LD_INT 5
18840: PUSH
18841: LD_INT 6
18843: PUSH
18844: LD_INT 7
18846: PUSH
18847: LD_INT 8
18849: PUSH
18850: LD_INT 9
18852: PUSH
18853: LD_INT 10
18855: PUSH
18856: LD_INT 11
18858: PUSH
18859: LD_INT 12
18861: PUSH
18862: LD_INT 13
18864: PUSH
18865: LD_INT 14
18867: PUSH
18868: LD_INT 15
18870: PUSH
18871: LD_INT 16
18873: PUSH
18874: LD_INT 17
18876: PUSH
18877: LD_INT 18
18879: PUSH
18880: LD_INT 19
18882: PUSH
18883: LD_INT 20
18885: PUSH
18886: LD_INT 21
18888: PUSH
18889: LD_INT 22
18891: PUSH
18892: LD_INT 23
18894: PUSH
18895: LD_INT 24
18897: PUSH
18898: LD_INT 25
18900: PUSH
18901: LD_INT 26
18903: PUSH
18904: LD_INT 27
18906: PUSH
18907: LD_INT 28
18909: PUSH
18910: LD_INT 29
18912: PUSH
18913: LD_INT 30
18915: PUSH
18916: LD_INT 31
18918: PUSH
18919: LD_INT 32
18921: PUSH
18922: LD_INT 33
18924: PUSH
18925: LD_INT 34
18927: PUSH
18928: LD_INT 36
18930: PUSH
18931: EMPTY
18932: LIST
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: LIST
18941: LIST
18942: LIST
18943: LIST
18944: LIST
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: LIST
18956: LIST
18957: LIST
18958: LIST
18959: LIST
18960: LIST
18961: LIST
18962: LIST
18963: LIST
18964: LIST
18965: LIST
18966: LIST
18967: PUSH
18968: LD_INT 101
18970: PUSH
18971: LD_INT 102
18973: PUSH
18974: LD_INT 103
18976: PUSH
18977: LD_INT 104
18979: PUSH
18980: LD_INT 105
18982: PUSH
18983: LD_INT 106
18985: PUSH
18986: LD_INT 107
18988: PUSH
18989: LD_INT 108
18991: PUSH
18992: LD_INT 109
18994: PUSH
18995: LD_INT 110
18997: PUSH
18998: LD_INT 111
19000: PUSH
19001: LD_INT 112
19003: PUSH
19004: LD_INT 113
19006: PUSH
19007: LD_INT 114
19009: PUSH
19010: LD_INT 116
19012: PUSH
19013: LD_INT 117
19015: PUSH
19016: LD_INT 118
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: LIST
19023: LIST
19024: LIST
19025: LIST
19026: LIST
19027: LIST
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: PUSH
19038: EMPTY
19039: LIST
19040: LIST
19041: ST_TO_ADDR
19042: GO 20049
19044: LD_INT 15
19046: DOUBLE
19047: EQUAL
19048: IFTRUE 19052
19050: GO 19276
19052: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
19053: LD_ADDR_VAR 0 2
19057: PUSH
19058: LD_INT 1
19060: PUSH
19061: LD_INT 2
19063: PUSH
19064: LD_INT 3
19066: PUSH
19067: LD_INT 4
19069: PUSH
19070: LD_INT 5
19072: PUSH
19073: LD_INT 6
19075: PUSH
19076: LD_INT 7
19078: PUSH
19079: LD_INT 8
19081: PUSH
19082: LD_INT 9
19084: PUSH
19085: LD_INT 10
19087: PUSH
19088: LD_INT 11
19090: PUSH
19091: LD_INT 12
19093: PUSH
19094: LD_INT 13
19096: PUSH
19097: LD_INT 14
19099: PUSH
19100: LD_INT 15
19102: PUSH
19103: LD_INT 16
19105: PUSH
19106: LD_INT 17
19108: PUSH
19109: LD_INT 18
19111: PUSH
19112: LD_INT 19
19114: PUSH
19115: LD_INT 20
19117: PUSH
19118: LD_INT 21
19120: PUSH
19121: LD_INT 22
19123: PUSH
19124: LD_INT 23
19126: PUSH
19127: LD_INT 24
19129: PUSH
19130: LD_INT 25
19132: PUSH
19133: LD_INT 26
19135: PUSH
19136: LD_INT 27
19138: PUSH
19139: LD_INT 28
19141: PUSH
19142: LD_INT 29
19144: PUSH
19145: LD_INT 30
19147: PUSH
19148: LD_INT 31
19150: PUSH
19151: LD_INT 32
19153: PUSH
19154: LD_INT 33
19156: PUSH
19157: LD_INT 34
19159: PUSH
19160: LD_INT 36
19162: PUSH
19163: EMPTY
19164: LIST
19165: LIST
19166: LIST
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: LIST
19188: LIST
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: LIST
19194: LIST
19195: LIST
19196: LIST
19197: LIST
19198: LIST
19199: PUSH
19200: LD_INT 101
19202: PUSH
19203: LD_INT 102
19205: PUSH
19206: LD_INT 103
19208: PUSH
19209: LD_INT 104
19211: PUSH
19212: LD_INT 105
19214: PUSH
19215: LD_INT 106
19217: PUSH
19218: LD_INT 107
19220: PUSH
19221: LD_INT 108
19223: PUSH
19224: LD_INT 109
19226: PUSH
19227: LD_INT 110
19229: PUSH
19230: LD_INT 111
19232: PUSH
19233: LD_INT 112
19235: PUSH
19236: LD_INT 113
19238: PUSH
19239: LD_INT 114
19241: PUSH
19242: LD_INT 116
19244: PUSH
19245: LD_INT 117
19247: PUSH
19248: LD_INT 118
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: LIST
19255: LIST
19256: LIST
19257: LIST
19258: LIST
19259: LIST
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: PUSH
19270: EMPTY
19271: LIST
19272: LIST
19273: ST_TO_ADDR
19274: GO 20049
19276: LD_INT 16
19278: DOUBLE
19279: EQUAL
19280: IFTRUE 19284
19282: GO 19420
19284: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
19285: LD_ADDR_VAR 0 2
19289: PUSH
19290: LD_INT 2
19292: PUSH
19293: LD_INT 4
19295: PUSH
19296: LD_INT 5
19298: PUSH
19299: LD_INT 7
19301: PUSH
19302: LD_INT 11
19304: PUSH
19305: LD_INT 12
19307: PUSH
19308: LD_INT 15
19310: PUSH
19311: LD_INT 16
19313: PUSH
19314: LD_INT 20
19316: PUSH
19317: LD_INT 21
19319: PUSH
19320: LD_INT 22
19322: PUSH
19323: LD_INT 23
19325: PUSH
19326: LD_INT 25
19328: PUSH
19329: LD_INT 26
19331: PUSH
19332: LD_INT 30
19334: PUSH
19335: LD_INT 31
19337: PUSH
19338: LD_INT 32
19340: PUSH
19341: LD_INT 33
19343: PUSH
19344: LD_INT 34
19346: PUSH
19347: EMPTY
19348: LIST
19349: LIST
19350: LIST
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: LIST
19356: LIST
19357: LIST
19358: LIST
19359: LIST
19360: LIST
19361: LIST
19362: LIST
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: PUSH
19368: LD_INT 101
19370: PUSH
19371: LD_INT 102
19373: PUSH
19374: LD_INT 103
19376: PUSH
19377: LD_INT 106
19379: PUSH
19380: LD_INT 108
19382: PUSH
19383: LD_INT 112
19385: PUSH
19386: LD_INT 113
19388: PUSH
19389: LD_INT 114
19391: PUSH
19392: LD_INT 116
19394: PUSH
19395: LD_INT 117
19397: PUSH
19398: LD_INT 118
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: LIST
19411: LIST
19412: LIST
19413: PUSH
19414: EMPTY
19415: LIST
19416: LIST
19417: ST_TO_ADDR
19418: GO 20049
19420: LD_INT 17
19422: DOUBLE
19423: EQUAL
19424: IFTRUE 19428
19426: GO 19652
19428: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
19429: LD_ADDR_VAR 0 2
19433: PUSH
19434: LD_INT 1
19436: PUSH
19437: LD_INT 2
19439: PUSH
19440: LD_INT 3
19442: PUSH
19443: LD_INT 4
19445: PUSH
19446: LD_INT 5
19448: PUSH
19449: LD_INT 6
19451: PUSH
19452: LD_INT 7
19454: PUSH
19455: LD_INT 8
19457: PUSH
19458: LD_INT 9
19460: PUSH
19461: LD_INT 10
19463: PUSH
19464: LD_INT 11
19466: PUSH
19467: LD_INT 12
19469: PUSH
19470: LD_INT 13
19472: PUSH
19473: LD_INT 14
19475: PUSH
19476: LD_INT 15
19478: PUSH
19479: LD_INT 16
19481: PUSH
19482: LD_INT 17
19484: PUSH
19485: LD_INT 18
19487: PUSH
19488: LD_INT 19
19490: PUSH
19491: LD_INT 20
19493: PUSH
19494: LD_INT 21
19496: PUSH
19497: LD_INT 22
19499: PUSH
19500: LD_INT 23
19502: PUSH
19503: LD_INT 24
19505: PUSH
19506: LD_INT 25
19508: PUSH
19509: LD_INT 26
19511: PUSH
19512: LD_INT 27
19514: PUSH
19515: LD_INT 28
19517: PUSH
19518: LD_INT 29
19520: PUSH
19521: LD_INT 30
19523: PUSH
19524: LD_INT 31
19526: PUSH
19527: LD_INT 32
19529: PUSH
19530: LD_INT 33
19532: PUSH
19533: LD_INT 34
19535: PUSH
19536: LD_INT 36
19538: PUSH
19539: EMPTY
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: LIST
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: PUSH
19576: LD_INT 101
19578: PUSH
19579: LD_INT 102
19581: PUSH
19582: LD_INT 103
19584: PUSH
19585: LD_INT 104
19587: PUSH
19588: LD_INT 105
19590: PUSH
19591: LD_INT 106
19593: PUSH
19594: LD_INT 107
19596: PUSH
19597: LD_INT 108
19599: PUSH
19600: LD_INT 109
19602: PUSH
19603: LD_INT 110
19605: PUSH
19606: LD_INT 111
19608: PUSH
19609: LD_INT 112
19611: PUSH
19612: LD_INT 113
19614: PUSH
19615: LD_INT 114
19617: PUSH
19618: LD_INT 116
19620: PUSH
19621: LD_INT 117
19623: PUSH
19624: LD_INT 118
19626: PUSH
19627: EMPTY
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: PUSH
19646: EMPTY
19647: LIST
19648: LIST
19649: ST_TO_ADDR
19650: GO 20049
19652: LD_INT 18
19654: DOUBLE
19655: EQUAL
19656: IFTRUE 19660
19658: GO 19808
19660: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
19661: LD_ADDR_VAR 0 2
19665: PUSH
19666: LD_INT 2
19668: PUSH
19669: LD_INT 4
19671: PUSH
19672: LD_INT 5
19674: PUSH
19675: LD_INT 7
19677: PUSH
19678: LD_INT 11
19680: PUSH
19681: LD_INT 12
19683: PUSH
19684: LD_INT 15
19686: PUSH
19687: LD_INT 16
19689: PUSH
19690: LD_INT 20
19692: PUSH
19693: LD_INT 21
19695: PUSH
19696: LD_INT 22
19698: PUSH
19699: LD_INT 23
19701: PUSH
19702: LD_INT 25
19704: PUSH
19705: LD_INT 26
19707: PUSH
19708: LD_INT 30
19710: PUSH
19711: LD_INT 31
19713: PUSH
19714: LD_INT 32
19716: PUSH
19717: LD_INT 33
19719: PUSH
19720: LD_INT 34
19722: PUSH
19723: LD_INT 35
19725: PUSH
19726: LD_INT 36
19728: PUSH
19729: EMPTY
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: PUSH
19752: LD_INT 101
19754: PUSH
19755: LD_INT 102
19757: PUSH
19758: LD_INT 103
19760: PUSH
19761: LD_INT 106
19763: PUSH
19764: LD_INT 108
19766: PUSH
19767: LD_INT 112
19769: PUSH
19770: LD_INT 113
19772: PUSH
19773: LD_INT 114
19775: PUSH
19776: LD_INT 115
19778: PUSH
19779: LD_INT 116
19781: PUSH
19782: LD_INT 117
19784: PUSH
19785: LD_INT 118
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: PUSH
19802: EMPTY
19803: LIST
19804: LIST
19805: ST_TO_ADDR
19806: GO 20049
19808: LD_INT 19
19810: DOUBLE
19811: EQUAL
19812: IFTRUE 19816
19814: GO 20048
19816: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
19817: LD_ADDR_VAR 0 2
19821: PUSH
19822: LD_INT 1
19824: PUSH
19825: LD_INT 2
19827: PUSH
19828: LD_INT 3
19830: PUSH
19831: LD_INT 4
19833: PUSH
19834: LD_INT 5
19836: PUSH
19837: LD_INT 6
19839: PUSH
19840: LD_INT 7
19842: PUSH
19843: LD_INT 8
19845: PUSH
19846: LD_INT 9
19848: PUSH
19849: LD_INT 10
19851: PUSH
19852: LD_INT 11
19854: PUSH
19855: LD_INT 12
19857: PUSH
19858: LD_INT 13
19860: PUSH
19861: LD_INT 14
19863: PUSH
19864: LD_INT 15
19866: PUSH
19867: LD_INT 16
19869: PUSH
19870: LD_INT 17
19872: PUSH
19873: LD_INT 18
19875: PUSH
19876: LD_INT 19
19878: PUSH
19879: LD_INT 20
19881: PUSH
19882: LD_INT 21
19884: PUSH
19885: LD_INT 22
19887: PUSH
19888: LD_INT 23
19890: PUSH
19891: LD_INT 24
19893: PUSH
19894: LD_INT 25
19896: PUSH
19897: LD_INT 26
19899: PUSH
19900: LD_INT 27
19902: PUSH
19903: LD_INT 28
19905: PUSH
19906: LD_INT 29
19908: PUSH
19909: LD_INT 30
19911: PUSH
19912: LD_INT 31
19914: PUSH
19915: LD_INT 32
19917: PUSH
19918: LD_INT 33
19920: PUSH
19921: LD_INT 34
19923: PUSH
19924: LD_INT 35
19926: PUSH
19927: LD_INT 36
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: LIST
19934: LIST
19935: LIST
19936: LIST
19937: LIST
19938: LIST
19939: LIST
19940: LIST
19941: LIST
19942: LIST
19943: LIST
19944: LIST
19945: LIST
19946: LIST
19947: LIST
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: PUSH
19968: LD_INT 101
19970: PUSH
19971: LD_INT 102
19973: PUSH
19974: LD_INT 103
19976: PUSH
19977: LD_INT 104
19979: PUSH
19980: LD_INT 105
19982: PUSH
19983: LD_INT 106
19985: PUSH
19986: LD_INT 107
19988: PUSH
19989: LD_INT 108
19991: PUSH
19992: LD_INT 109
19994: PUSH
19995: LD_INT 110
19997: PUSH
19998: LD_INT 111
20000: PUSH
20001: LD_INT 112
20003: PUSH
20004: LD_INT 113
20006: PUSH
20007: LD_INT 114
20009: PUSH
20010: LD_INT 115
20012: PUSH
20013: LD_INT 116
20015: PUSH
20016: LD_INT 117
20018: PUSH
20019: LD_INT 118
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: LIST
20026: LIST
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: LIST
20040: LIST
20041: PUSH
20042: EMPTY
20043: LIST
20044: LIST
20045: ST_TO_ADDR
20046: GO 20049
20048: POP
// end else
20049: GO 20280
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
20051: LD_ADDR_VAR 0 2
20055: PUSH
20056: LD_INT 1
20058: PUSH
20059: LD_INT 2
20061: PUSH
20062: LD_INT 3
20064: PUSH
20065: LD_INT 4
20067: PUSH
20068: LD_INT 5
20070: PUSH
20071: LD_INT 6
20073: PUSH
20074: LD_INT 7
20076: PUSH
20077: LD_INT 8
20079: PUSH
20080: LD_INT 9
20082: PUSH
20083: LD_INT 10
20085: PUSH
20086: LD_INT 11
20088: PUSH
20089: LD_INT 12
20091: PUSH
20092: LD_INT 13
20094: PUSH
20095: LD_INT 14
20097: PUSH
20098: LD_INT 15
20100: PUSH
20101: LD_INT 16
20103: PUSH
20104: LD_INT 17
20106: PUSH
20107: LD_INT 18
20109: PUSH
20110: LD_INT 19
20112: PUSH
20113: LD_INT 20
20115: PUSH
20116: LD_INT 21
20118: PUSH
20119: LD_INT 22
20121: PUSH
20122: LD_INT 23
20124: PUSH
20125: LD_INT 24
20127: PUSH
20128: LD_INT 25
20130: PUSH
20131: LD_INT 26
20133: PUSH
20134: LD_INT 27
20136: PUSH
20137: LD_INT 28
20139: PUSH
20140: LD_INT 29
20142: PUSH
20143: LD_INT 30
20145: PUSH
20146: LD_INT 31
20148: PUSH
20149: LD_INT 32
20151: PUSH
20152: LD_INT 33
20154: PUSH
20155: LD_INT 34
20157: PUSH
20158: LD_INT 35
20160: PUSH
20161: LD_INT 36
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: LIST
20168: LIST
20169: LIST
20170: LIST
20171: LIST
20172: LIST
20173: LIST
20174: LIST
20175: LIST
20176: LIST
20177: LIST
20178: LIST
20179: LIST
20180: LIST
20181: LIST
20182: LIST
20183: LIST
20184: LIST
20185: LIST
20186: LIST
20187: LIST
20188: LIST
20189: LIST
20190: LIST
20191: LIST
20192: LIST
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: LIST
20199: LIST
20200: LIST
20201: PUSH
20202: LD_INT 101
20204: PUSH
20205: LD_INT 102
20207: PUSH
20208: LD_INT 103
20210: PUSH
20211: LD_INT 104
20213: PUSH
20214: LD_INT 105
20216: PUSH
20217: LD_INT 106
20219: PUSH
20220: LD_INT 107
20222: PUSH
20223: LD_INT 108
20225: PUSH
20226: LD_INT 109
20228: PUSH
20229: LD_INT 110
20231: PUSH
20232: LD_INT 111
20234: PUSH
20235: LD_INT 112
20237: PUSH
20238: LD_INT 113
20240: PUSH
20241: LD_INT 114
20243: PUSH
20244: LD_INT 115
20246: PUSH
20247: LD_INT 116
20249: PUSH
20250: LD_INT 117
20252: PUSH
20253: LD_INT 118
20255: PUSH
20256: EMPTY
20257: LIST
20258: LIST
20259: LIST
20260: LIST
20261: LIST
20262: LIST
20263: LIST
20264: LIST
20265: LIST
20266: LIST
20267: LIST
20268: LIST
20269: LIST
20270: LIST
20271: LIST
20272: LIST
20273: LIST
20274: LIST
20275: PUSH
20276: EMPTY
20277: LIST
20278: LIST
20279: ST_TO_ADDR
// if result then
20280: LD_VAR 0 2
20284: IFFALSE 21070
// begin normal :=  ;
20286: LD_ADDR_VAR 0 5
20290: PUSH
20291: LD_STRING 
20293: ST_TO_ADDR
// hardcore :=  ;
20294: LD_ADDR_VAR 0 6
20298: PUSH
20299: LD_STRING 
20301: ST_TO_ADDR
// active :=  ;
20302: LD_ADDR_VAR 0 7
20306: PUSH
20307: LD_STRING 
20309: ST_TO_ADDR
// for i = 1 to normalCounter do
20310: LD_ADDR_VAR 0 8
20314: PUSH
20315: DOUBLE
20316: LD_INT 1
20318: DEC
20319: ST_TO_ADDR
20320: LD_EXP 57
20324: PUSH
20325: FOR_TO
20326: IFFALSE 20427
// begin tmp := 0 ;
20328: LD_ADDR_VAR 0 3
20332: PUSH
20333: LD_STRING 0
20335: ST_TO_ADDR
// if result [ 1 ] then
20336: LD_VAR 0 2
20340: PUSH
20341: LD_INT 1
20343: ARRAY
20344: IFFALSE 20409
// if result [ 1 ] [ 1 ] = i then
20346: LD_VAR 0 2
20350: PUSH
20351: LD_INT 1
20353: ARRAY
20354: PUSH
20355: LD_INT 1
20357: ARRAY
20358: PUSH
20359: LD_VAR 0 8
20363: EQUAL
20364: IFFALSE 20409
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
20366: LD_ADDR_VAR 0 2
20370: PUSH
20371: LD_VAR 0 2
20375: PPUSH
20376: LD_INT 1
20378: PPUSH
20379: LD_VAR 0 2
20383: PUSH
20384: LD_INT 1
20386: ARRAY
20387: PPUSH
20388: LD_INT 1
20390: PPUSH
20391: CALL_OW 3
20395: PPUSH
20396: CALL_OW 1
20400: ST_TO_ADDR
// tmp := 1 ;
20401: LD_ADDR_VAR 0 3
20405: PUSH
20406: LD_STRING 1
20408: ST_TO_ADDR
// end ; normal := normal & tmp ;
20409: LD_ADDR_VAR 0 5
20413: PUSH
20414: LD_VAR 0 5
20418: PUSH
20419: LD_VAR 0 3
20423: STR
20424: ST_TO_ADDR
// end ;
20425: GO 20325
20427: POP
20428: POP
// for i = 1 to hardcoreCounter do
20429: LD_ADDR_VAR 0 8
20433: PUSH
20434: DOUBLE
20435: LD_INT 1
20437: DEC
20438: ST_TO_ADDR
20439: LD_EXP 58
20443: PUSH
20444: FOR_TO
20445: IFFALSE 20550
// begin tmp := 0 ;
20447: LD_ADDR_VAR 0 3
20451: PUSH
20452: LD_STRING 0
20454: ST_TO_ADDR
// if result [ 2 ] then
20455: LD_VAR 0 2
20459: PUSH
20460: LD_INT 2
20462: ARRAY
20463: IFFALSE 20532
// if result [ 2 ] [ 1 ] = 100 + i then
20465: LD_VAR 0 2
20469: PUSH
20470: LD_INT 2
20472: ARRAY
20473: PUSH
20474: LD_INT 1
20476: ARRAY
20477: PUSH
20478: LD_INT 100
20480: PUSH
20481: LD_VAR 0 8
20485: PLUS
20486: EQUAL
20487: IFFALSE 20532
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
20489: LD_ADDR_VAR 0 2
20493: PUSH
20494: LD_VAR 0 2
20498: PPUSH
20499: LD_INT 2
20501: PPUSH
20502: LD_VAR 0 2
20506: PUSH
20507: LD_INT 2
20509: ARRAY
20510: PPUSH
20511: LD_INT 1
20513: PPUSH
20514: CALL_OW 3
20518: PPUSH
20519: CALL_OW 1
20523: ST_TO_ADDR
// tmp := 1 ;
20524: LD_ADDR_VAR 0 3
20528: PUSH
20529: LD_STRING 1
20531: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
20532: LD_ADDR_VAR 0 6
20536: PUSH
20537: LD_VAR 0 6
20541: PUSH
20542: LD_VAR 0 3
20546: STR
20547: ST_TO_ADDR
// end ;
20548: GO 20444
20550: POP
20551: POP
// if isGameLoad then
20552: LD_VAR 0 1
20556: IFFALSE 21031
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
20558: LD_ADDR_VAR 0 4
20562: PUSH
20563: LD_EXP 61
20567: PUSH
20568: LD_EXP 60
20572: PUSH
20573: LD_EXP 62
20577: PUSH
20578: LD_EXP 59
20582: PUSH
20583: LD_EXP 63
20587: PUSH
20588: LD_EXP 64
20592: PUSH
20593: LD_EXP 65
20597: PUSH
20598: LD_EXP 66
20602: PUSH
20603: LD_EXP 67
20607: PUSH
20608: LD_EXP 68
20612: PUSH
20613: LD_EXP 69
20617: PUSH
20618: LD_EXP 70
20622: PUSH
20623: LD_EXP 71
20627: PUSH
20628: LD_EXP 72
20632: PUSH
20633: LD_EXP 80
20637: PUSH
20638: LD_EXP 81
20642: PUSH
20643: LD_EXP 82
20647: PUSH
20648: LD_EXP 83
20652: PUSH
20653: LD_EXP 85
20657: PUSH
20658: LD_EXP 86
20662: PUSH
20663: LD_EXP 87
20667: PUSH
20668: LD_EXP 90
20672: PUSH
20673: LD_EXP 92
20677: PUSH
20678: LD_EXP 93
20682: PUSH
20683: LD_EXP 94
20687: PUSH
20688: LD_EXP 96
20692: PUSH
20693: LD_EXP 97
20697: PUSH
20698: LD_EXP 100
20702: PUSH
20703: LD_EXP 101
20707: PUSH
20708: LD_EXP 102
20712: PUSH
20713: LD_EXP 103
20717: PUSH
20718: LD_EXP 104
20722: PUSH
20723: LD_EXP 105
20727: PUSH
20728: LD_EXP 106
20732: PUSH
20733: LD_EXP 107
20737: PUSH
20738: LD_EXP 108
20742: PUSH
20743: LD_EXP 73
20747: PUSH
20748: LD_EXP 74
20752: PUSH
20753: LD_EXP 77
20757: PUSH
20758: LD_EXP 78
20762: PUSH
20763: LD_EXP 79
20767: PUSH
20768: LD_EXP 75
20772: PUSH
20773: LD_EXP 76
20777: PUSH
20778: LD_EXP 84
20782: PUSH
20783: LD_EXP 88
20787: PUSH
20788: LD_EXP 89
20792: PUSH
20793: LD_EXP 91
20797: PUSH
20798: LD_EXP 95
20802: PUSH
20803: LD_EXP 98
20807: PUSH
20808: LD_EXP 99
20812: PUSH
20813: LD_EXP 109
20817: PUSH
20818: LD_EXP 110
20822: PUSH
20823: LD_EXP 111
20827: PUSH
20828: LD_EXP 112
20832: PUSH
20833: EMPTY
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: LIST
20885: LIST
20886: LIST
20887: LIST
20888: ST_TO_ADDR
// tmp :=  ;
20889: LD_ADDR_VAR 0 3
20893: PUSH
20894: LD_STRING 
20896: ST_TO_ADDR
// for i = 1 to normalCounter do
20897: LD_ADDR_VAR 0 8
20901: PUSH
20902: DOUBLE
20903: LD_INT 1
20905: DEC
20906: ST_TO_ADDR
20907: LD_EXP 57
20911: PUSH
20912: FOR_TO
20913: IFFALSE 20949
// begin if flags [ i ] then
20915: LD_VAR 0 4
20919: PUSH
20920: LD_VAR 0 8
20924: ARRAY
20925: IFFALSE 20947
// tmp := tmp & i & ; ;
20927: LD_ADDR_VAR 0 3
20931: PUSH
20932: LD_VAR 0 3
20936: PUSH
20937: LD_VAR 0 8
20941: STR
20942: PUSH
20943: LD_STRING ;
20945: STR
20946: ST_TO_ADDR
// end ;
20947: GO 20912
20949: POP
20950: POP
// for i = 1 to hardcoreCounter do
20951: LD_ADDR_VAR 0 8
20955: PUSH
20956: DOUBLE
20957: LD_INT 1
20959: DEC
20960: ST_TO_ADDR
20961: LD_EXP 58
20965: PUSH
20966: FOR_TO
20967: IFFALSE 21013
// begin if flags [ normalCounter + i ] then
20969: LD_VAR 0 4
20973: PUSH
20974: LD_EXP 57
20978: PUSH
20979: LD_VAR 0 8
20983: PLUS
20984: ARRAY
20985: IFFALSE 21011
// tmp := tmp & ( 100 + i ) & ; ;
20987: LD_ADDR_VAR 0 3
20991: PUSH
20992: LD_VAR 0 3
20996: PUSH
20997: LD_INT 100
20999: PUSH
21000: LD_VAR 0 8
21004: PLUS
21005: STR
21006: PUSH
21007: LD_STRING ;
21009: STR
21010: ST_TO_ADDR
// end ;
21011: GO 20966
21013: POP
21014: POP
// if tmp then
21015: LD_VAR 0 3
21019: IFFALSE 21031
// active := tmp ;
21021: LD_ADDR_VAR 0 7
21025: PUSH
21026: LD_VAR 0 3
21030: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
21031: LD_STRING getStreamItemsFromMission("
21033: PUSH
21034: LD_VAR 0 5
21038: STR
21039: PUSH
21040: LD_STRING ","
21042: STR
21043: PUSH
21044: LD_VAR 0 6
21048: STR
21049: PUSH
21050: LD_STRING ","
21052: STR
21053: PUSH
21054: LD_VAR 0 7
21058: STR
21059: PUSH
21060: LD_STRING ")
21062: STR
21063: PPUSH
21064: CALL_OW 559
// end else
21068: GO 21077
// ToLua ( getStreamItemsFromMission("","","") ) ;
21070: LD_STRING getStreamItemsFromMission("","","")
21072: PPUSH
21073: CALL_OW 559
// end ;
21077: LD_VAR 0 2
21081: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
21082: LD_EXP 56
21086: PUSH
21087: LD_EXP 61
21091: AND
21092: IFFALSE 21216
21094: GO 21096
21096: DISABLE
21097: LD_INT 0
21099: PPUSH
21100: PPUSH
// begin enable ;
21101: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
21102: LD_ADDR_VAR 0 2
21106: PUSH
21107: LD_INT 22
21109: PUSH
21110: LD_OWVAR 2
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: PUSH
21119: LD_INT 2
21121: PUSH
21122: LD_INT 34
21124: PUSH
21125: LD_INT 7
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: PUSH
21132: LD_INT 34
21134: PUSH
21135: LD_INT 45
21137: PUSH
21138: EMPTY
21139: LIST
21140: LIST
21141: PUSH
21142: LD_INT 34
21144: PUSH
21145: LD_INT 28
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: PUSH
21152: LD_INT 34
21154: PUSH
21155: LD_INT 47
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: PUSH
21169: EMPTY
21170: LIST
21171: LIST
21172: PPUSH
21173: CALL_OW 69
21177: ST_TO_ADDR
// if not tmp then
21178: LD_VAR 0 2
21182: NOT
21183: IFFALSE 21187
// exit ;
21185: GO 21216
// for i in tmp do
21187: LD_ADDR_VAR 0 1
21191: PUSH
21192: LD_VAR 0 2
21196: PUSH
21197: FOR_IN
21198: IFFALSE 21214
// begin SetLives ( i , 0 ) ;
21200: LD_VAR 0 1
21204: PPUSH
21205: LD_INT 0
21207: PPUSH
21208: CALL_OW 234
// end ;
21212: GO 21197
21214: POP
21215: POP
// end ;
21216: PPOPN 2
21218: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
21219: LD_EXP 56
21223: PUSH
21224: LD_EXP 62
21228: AND
21229: IFFALSE 21313
21231: GO 21233
21233: DISABLE
21234: LD_INT 0
21236: PPUSH
21237: PPUSH
// begin enable ;
21238: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
21239: LD_ADDR_VAR 0 2
21243: PUSH
21244: LD_INT 22
21246: PUSH
21247: LD_OWVAR 2
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: PUSH
21256: LD_INT 32
21258: PUSH
21259: LD_INT 3
21261: PUSH
21262: EMPTY
21263: LIST
21264: LIST
21265: PUSH
21266: EMPTY
21267: LIST
21268: LIST
21269: PPUSH
21270: CALL_OW 69
21274: ST_TO_ADDR
// if not tmp then
21275: LD_VAR 0 2
21279: NOT
21280: IFFALSE 21284
// exit ;
21282: GO 21313
// for i in tmp do
21284: LD_ADDR_VAR 0 1
21288: PUSH
21289: LD_VAR 0 2
21293: PUSH
21294: FOR_IN
21295: IFFALSE 21311
// begin SetLives ( i , 0 ) ;
21297: LD_VAR 0 1
21301: PPUSH
21302: LD_INT 0
21304: PPUSH
21305: CALL_OW 234
// end ;
21309: GO 21294
21311: POP
21312: POP
// end ;
21313: PPOPN 2
21315: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
21316: LD_EXP 56
21320: PUSH
21321: LD_EXP 59
21325: AND
21326: IFFALSE 21419
21328: GO 21330
21330: DISABLE
21331: LD_INT 0
21333: PPUSH
// begin enable ;
21334: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
21335: LD_ADDR_VAR 0 1
21339: PUSH
21340: LD_INT 22
21342: PUSH
21343: LD_OWVAR 2
21347: PUSH
21348: EMPTY
21349: LIST
21350: LIST
21351: PUSH
21352: LD_INT 2
21354: PUSH
21355: LD_INT 25
21357: PUSH
21358: LD_INT 5
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: PUSH
21365: LD_INT 25
21367: PUSH
21368: LD_INT 9
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: PUSH
21375: LD_INT 25
21377: PUSH
21378: LD_INT 8
21380: PUSH
21381: EMPTY
21382: LIST
21383: LIST
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: PUSH
21391: EMPTY
21392: LIST
21393: LIST
21394: PPUSH
21395: CALL_OW 69
21399: PUSH
21400: FOR_IN
21401: IFFALSE 21417
// begin SetClass ( i , 1 ) ;
21403: LD_VAR 0 1
21407: PPUSH
21408: LD_INT 1
21410: PPUSH
21411: CALL_OW 336
// end ;
21415: GO 21400
21417: POP
21418: POP
// end ;
21419: PPOPN 1
21421: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
21422: LD_EXP 56
21426: PUSH
21427: LD_EXP 60
21431: AND
21432: PUSH
21433: LD_OWVAR 65
21437: PUSH
21438: LD_INT 7
21440: LESS
21441: AND
21442: IFFALSE 21456
21444: GO 21446
21446: DISABLE
// begin enable ;
21447: ENABLE
// game_speed := 7 ;
21448: LD_ADDR_OWVAR 65
21452: PUSH
21453: LD_INT 7
21455: ST_TO_ADDR
// end ;
21456: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
21457: LD_EXP 56
21461: PUSH
21462: LD_EXP 63
21466: AND
21467: IFFALSE 21669
21469: GO 21471
21471: DISABLE
21472: LD_INT 0
21474: PPUSH
21475: PPUSH
21476: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21477: LD_ADDR_VAR 0 3
21481: PUSH
21482: LD_INT 81
21484: PUSH
21485: LD_OWVAR 2
21489: PUSH
21490: EMPTY
21491: LIST
21492: LIST
21493: PUSH
21494: LD_INT 21
21496: PUSH
21497: LD_INT 1
21499: PUSH
21500: EMPTY
21501: LIST
21502: LIST
21503: PUSH
21504: EMPTY
21505: LIST
21506: LIST
21507: PPUSH
21508: CALL_OW 69
21512: ST_TO_ADDR
// if not tmp then
21513: LD_VAR 0 3
21517: NOT
21518: IFFALSE 21522
// exit ;
21520: GO 21669
// if tmp > 5 then
21522: LD_VAR 0 3
21526: PUSH
21527: LD_INT 5
21529: GREATER
21530: IFFALSE 21542
// k := 5 else
21532: LD_ADDR_VAR 0 2
21536: PUSH
21537: LD_INT 5
21539: ST_TO_ADDR
21540: GO 21552
// k := tmp ;
21542: LD_ADDR_VAR 0 2
21546: PUSH
21547: LD_VAR 0 3
21551: ST_TO_ADDR
// for i := 1 to k do
21552: LD_ADDR_VAR 0 1
21556: PUSH
21557: DOUBLE
21558: LD_INT 1
21560: DEC
21561: ST_TO_ADDR
21562: LD_VAR 0 2
21566: PUSH
21567: FOR_TO
21568: IFFALSE 21667
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
21570: LD_VAR 0 3
21574: PUSH
21575: LD_VAR 0 1
21579: ARRAY
21580: PPUSH
21581: LD_VAR 0 1
21585: PUSH
21586: LD_INT 4
21588: MOD
21589: PUSH
21590: LD_INT 1
21592: PLUS
21593: PPUSH
21594: CALL_OW 259
21598: PUSH
21599: LD_INT 10
21601: LESS
21602: IFFALSE 21665
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
21604: LD_VAR 0 3
21608: PUSH
21609: LD_VAR 0 1
21613: ARRAY
21614: PPUSH
21615: LD_VAR 0 1
21619: PUSH
21620: LD_INT 4
21622: MOD
21623: PUSH
21624: LD_INT 1
21626: PLUS
21627: PPUSH
21628: LD_VAR 0 3
21632: PUSH
21633: LD_VAR 0 1
21637: ARRAY
21638: PPUSH
21639: LD_VAR 0 1
21643: PUSH
21644: LD_INT 4
21646: MOD
21647: PUSH
21648: LD_INT 1
21650: PLUS
21651: PPUSH
21652: CALL_OW 259
21656: PUSH
21657: LD_INT 1
21659: PLUS
21660: PPUSH
21661: CALL_OW 237
21665: GO 21567
21667: POP
21668: POP
// end ;
21669: PPOPN 3
21671: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
21672: LD_EXP 56
21676: PUSH
21677: LD_EXP 64
21681: AND
21682: IFFALSE 21702
21684: GO 21686
21686: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
21687: LD_INT 4
21689: PPUSH
21690: LD_OWVAR 2
21694: PPUSH
21695: LD_INT 0
21697: PPUSH
21698: CALL_OW 324
21702: END
// every 0 0$1 trigger StreamModeActive and sShovel do
21703: LD_EXP 56
21707: PUSH
21708: LD_EXP 93
21712: AND
21713: IFFALSE 21733
21715: GO 21717
21717: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
21718: LD_INT 19
21720: PPUSH
21721: LD_OWVAR 2
21725: PPUSH
21726: LD_INT 0
21728: PPUSH
21729: CALL_OW 324
21733: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
21734: LD_EXP 56
21738: PUSH
21739: LD_EXP 65
21743: AND
21744: IFFALSE 21846
21746: GO 21748
21748: DISABLE
21749: LD_INT 0
21751: PPUSH
21752: PPUSH
// begin enable ;
21753: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
21754: LD_ADDR_VAR 0 2
21758: PUSH
21759: LD_INT 22
21761: PUSH
21762: LD_OWVAR 2
21766: PUSH
21767: EMPTY
21768: LIST
21769: LIST
21770: PUSH
21771: LD_INT 2
21773: PUSH
21774: LD_INT 34
21776: PUSH
21777: LD_INT 11
21779: PUSH
21780: EMPTY
21781: LIST
21782: LIST
21783: PUSH
21784: LD_INT 34
21786: PUSH
21787: LD_INT 30
21789: PUSH
21790: EMPTY
21791: LIST
21792: LIST
21793: PUSH
21794: EMPTY
21795: LIST
21796: LIST
21797: LIST
21798: PUSH
21799: EMPTY
21800: LIST
21801: LIST
21802: PPUSH
21803: CALL_OW 69
21807: ST_TO_ADDR
// if not tmp then
21808: LD_VAR 0 2
21812: NOT
21813: IFFALSE 21817
// exit ;
21815: GO 21846
// for i in tmp do
21817: LD_ADDR_VAR 0 1
21821: PUSH
21822: LD_VAR 0 2
21826: PUSH
21827: FOR_IN
21828: IFFALSE 21844
// begin SetLives ( i , 0 ) ;
21830: LD_VAR 0 1
21834: PPUSH
21835: LD_INT 0
21837: PPUSH
21838: CALL_OW 234
// end ;
21842: GO 21827
21844: POP
21845: POP
// end ;
21846: PPOPN 2
21848: END
// every 0 0$1 trigger StreamModeActive and sBunker do
21849: LD_EXP 56
21853: PUSH
21854: LD_EXP 66
21858: AND
21859: IFFALSE 21879
21861: GO 21863
21863: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
21864: LD_INT 32
21866: PPUSH
21867: LD_OWVAR 2
21871: PPUSH
21872: LD_INT 0
21874: PPUSH
21875: CALL_OW 324
21879: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
21880: LD_EXP 56
21884: PUSH
21885: LD_EXP 67
21889: AND
21890: IFFALSE 22071
21892: GO 21894
21894: DISABLE
21895: LD_INT 0
21897: PPUSH
21898: PPUSH
21899: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
21900: LD_ADDR_VAR 0 2
21904: PUSH
21905: LD_INT 22
21907: PUSH
21908: LD_OWVAR 2
21912: PUSH
21913: EMPTY
21914: LIST
21915: LIST
21916: PUSH
21917: LD_INT 33
21919: PUSH
21920: LD_INT 3
21922: PUSH
21923: EMPTY
21924: LIST
21925: LIST
21926: PUSH
21927: EMPTY
21928: LIST
21929: LIST
21930: PPUSH
21931: CALL_OW 69
21935: ST_TO_ADDR
// if not tmp then
21936: LD_VAR 0 2
21940: NOT
21941: IFFALSE 21945
// exit ;
21943: GO 22071
// side := 0 ;
21945: LD_ADDR_VAR 0 3
21949: PUSH
21950: LD_INT 0
21952: ST_TO_ADDR
// for i := 1 to 8 do
21953: LD_ADDR_VAR 0 1
21957: PUSH
21958: DOUBLE
21959: LD_INT 1
21961: DEC
21962: ST_TO_ADDR
21963: LD_INT 8
21965: PUSH
21966: FOR_TO
21967: IFFALSE 22015
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
21969: LD_OWVAR 2
21973: PUSH
21974: LD_VAR 0 1
21978: NONEQUAL
21979: PUSH
21980: LD_OWVAR 2
21984: PPUSH
21985: LD_VAR 0 1
21989: PPUSH
21990: CALL_OW 81
21994: PUSH
21995: LD_INT 2
21997: EQUAL
21998: AND
21999: IFFALSE 22013
// begin side := i ;
22001: LD_ADDR_VAR 0 3
22005: PUSH
22006: LD_VAR 0 1
22010: ST_TO_ADDR
// break ;
22011: GO 22015
// end ;
22013: GO 21966
22015: POP
22016: POP
// if not side then
22017: LD_VAR 0 3
22021: NOT
22022: IFFALSE 22026
// exit ;
22024: GO 22071
// for i := 1 to tmp do
22026: LD_ADDR_VAR 0 1
22030: PUSH
22031: DOUBLE
22032: LD_INT 1
22034: DEC
22035: ST_TO_ADDR
22036: LD_VAR 0 2
22040: PUSH
22041: FOR_TO
22042: IFFALSE 22069
// if Prob ( 60 ) then
22044: LD_INT 60
22046: PPUSH
22047: CALL_OW 13
22051: IFFALSE 22067
// SetSide ( i , side ) ;
22053: LD_VAR 0 1
22057: PPUSH
22058: LD_VAR 0 3
22062: PPUSH
22063: CALL_OW 235
22067: GO 22041
22069: POP
22070: POP
// end ;
22071: PPOPN 3
22073: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
22074: LD_EXP 56
22078: PUSH
22079: LD_EXP 69
22083: AND
22084: IFFALSE 22203
22086: GO 22088
22088: DISABLE
22089: LD_INT 0
22091: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
22092: LD_ADDR_VAR 0 1
22096: PUSH
22097: LD_INT 22
22099: PUSH
22100: LD_OWVAR 2
22104: PUSH
22105: EMPTY
22106: LIST
22107: LIST
22108: PUSH
22109: LD_INT 21
22111: PUSH
22112: LD_INT 1
22114: PUSH
22115: EMPTY
22116: LIST
22117: LIST
22118: PUSH
22119: LD_INT 3
22121: PUSH
22122: LD_INT 23
22124: PUSH
22125: LD_INT 0
22127: PUSH
22128: EMPTY
22129: LIST
22130: LIST
22131: PUSH
22132: EMPTY
22133: LIST
22134: LIST
22135: PUSH
22136: EMPTY
22137: LIST
22138: LIST
22139: LIST
22140: PPUSH
22141: CALL_OW 69
22145: PUSH
22146: FOR_IN
22147: IFFALSE 22201
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
22149: LD_VAR 0 1
22153: PPUSH
22154: CALL_OW 257
22158: PUSH
22159: LD_INT 1
22161: PUSH
22162: LD_INT 2
22164: PUSH
22165: LD_INT 3
22167: PUSH
22168: LD_INT 4
22170: PUSH
22171: EMPTY
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: IN
22177: IFFALSE 22199
// SetClass ( un , rand ( 1 , 4 ) ) ;
22179: LD_VAR 0 1
22183: PPUSH
22184: LD_INT 1
22186: PPUSH
22187: LD_INT 4
22189: PPUSH
22190: CALL_OW 12
22194: PPUSH
22195: CALL_OW 336
22199: GO 22146
22201: POP
22202: POP
// end ;
22203: PPOPN 1
22205: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
22206: LD_EXP 56
22210: PUSH
22211: LD_EXP 68
22215: AND
22216: IFFALSE 22295
22218: GO 22220
22220: DISABLE
22221: LD_INT 0
22223: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22224: LD_ADDR_VAR 0 1
22228: PUSH
22229: LD_INT 22
22231: PUSH
22232: LD_OWVAR 2
22236: PUSH
22237: EMPTY
22238: LIST
22239: LIST
22240: PUSH
22241: LD_INT 21
22243: PUSH
22244: LD_INT 3
22246: PUSH
22247: EMPTY
22248: LIST
22249: LIST
22250: PUSH
22251: EMPTY
22252: LIST
22253: LIST
22254: PPUSH
22255: CALL_OW 69
22259: ST_TO_ADDR
// if not tmp then
22260: LD_VAR 0 1
22264: NOT
22265: IFFALSE 22269
// exit ;
22267: GO 22295
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
22269: LD_VAR 0 1
22273: PUSH
22274: LD_INT 1
22276: PPUSH
22277: LD_VAR 0 1
22281: PPUSH
22282: CALL_OW 12
22286: ARRAY
22287: PPUSH
22288: LD_INT 100
22290: PPUSH
22291: CALL_OW 234
// end ;
22295: PPOPN 1
22297: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
22298: LD_EXP 56
22302: PUSH
22303: LD_EXP 70
22307: AND
22308: IFFALSE 22406
22310: GO 22312
22312: DISABLE
22313: LD_INT 0
22315: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22316: LD_ADDR_VAR 0 1
22320: PUSH
22321: LD_INT 22
22323: PUSH
22324: LD_OWVAR 2
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: PUSH
22333: LD_INT 21
22335: PUSH
22336: LD_INT 1
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: PUSH
22343: EMPTY
22344: LIST
22345: LIST
22346: PPUSH
22347: CALL_OW 69
22351: ST_TO_ADDR
// if not tmp then
22352: LD_VAR 0 1
22356: NOT
22357: IFFALSE 22361
// exit ;
22359: GO 22406
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
22361: LD_VAR 0 1
22365: PUSH
22366: LD_INT 1
22368: PPUSH
22369: LD_VAR 0 1
22373: PPUSH
22374: CALL_OW 12
22378: ARRAY
22379: PPUSH
22380: LD_INT 1
22382: PPUSH
22383: LD_INT 4
22385: PPUSH
22386: CALL_OW 12
22390: PPUSH
22391: LD_INT 3000
22393: PPUSH
22394: LD_INT 9000
22396: PPUSH
22397: CALL_OW 12
22401: PPUSH
22402: CALL_OW 492
// end ;
22406: PPOPN 1
22408: END
// every 0 0$1 trigger StreamModeActive and sDepot do
22409: LD_EXP 56
22413: PUSH
22414: LD_EXP 71
22418: AND
22419: IFFALSE 22439
22421: GO 22423
22423: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
22424: LD_INT 1
22426: PPUSH
22427: LD_OWVAR 2
22431: PPUSH
22432: LD_INT 0
22434: PPUSH
22435: CALL_OW 324
22439: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
22440: LD_EXP 56
22444: PUSH
22445: LD_EXP 72
22449: AND
22450: IFFALSE 22533
22452: GO 22454
22454: DISABLE
22455: LD_INT 0
22457: PPUSH
22458: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22459: LD_ADDR_VAR 0 2
22463: PUSH
22464: LD_INT 22
22466: PUSH
22467: LD_OWVAR 2
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: PUSH
22476: LD_INT 21
22478: PUSH
22479: LD_INT 3
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: PUSH
22486: EMPTY
22487: LIST
22488: LIST
22489: PPUSH
22490: CALL_OW 69
22494: ST_TO_ADDR
// if not tmp then
22495: LD_VAR 0 2
22499: NOT
22500: IFFALSE 22504
// exit ;
22502: GO 22533
// for i in tmp do
22504: LD_ADDR_VAR 0 1
22508: PUSH
22509: LD_VAR 0 2
22513: PUSH
22514: FOR_IN
22515: IFFALSE 22531
// SetBLevel ( i , 10 ) ;
22517: LD_VAR 0 1
22521: PPUSH
22522: LD_INT 10
22524: PPUSH
22525: CALL_OW 241
22529: GO 22514
22531: POP
22532: POP
// end ;
22533: PPOPN 2
22535: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
22536: LD_EXP 56
22540: PUSH
22541: LD_EXP 73
22545: AND
22546: IFFALSE 22657
22548: GO 22550
22550: DISABLE
22551: LD_INT 0
22553: PPUSH
22554: PPUSH
22555: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22556: LD_ADDR_VAR 0 3
22560: PUSH
22561: LD_INT 22
22563: PUSH
22564: LD_OWVAR 2
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: PUSH
22573: LD_INT 25
22575: PUSH
22576: LD_INT 1
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: PUSH
22583: EMPTY
22584: LIST
22585: LIST
22586: PPUSH
22587: CALL_OW 69
22591: ST_TO_ADDR
// if not tmp then
22592: LD_VAR 0 3
22596: NOT
22597: IFFALSE 22601
// exit ;
22599: GO 22657
// un := tmp [ rand ( 1 , tmp ) ] ;
22601: LD_ADDR_VAR 0 2
22605: PUSH
22606: LD_VAR 0 3
22610: PUSH
22611: LD_INT 1
22613: PPUSH
22614: LD_VAR 0 3
22618: PPUSH
22619: CALL_OW 12
22623: ARRAY
22624: ST_TO_ADDR
// if Crawls ( un ) then
22625: LD_VAR 0 2
22629: PPUSH
22630: CALL_OW 318
22634: IFFALSE 22645
// ComWalk ( un ) ;
22636: LD_VAR 0 2
22640: PPUSH
22641: CALL_OW 138
// SetClass ( un , class_sniper ) ;
22645: LD_VAR 0 2
22649: PPUSH
22650: LD_INT 5
22652: PPUSH
22653: CALL_OW 336
// end ;
22657: PPOPN 3
22659: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
22660: LD_EXP 56
22664: PUSH
22665: LD_EXP 74
22669: AND
22670: PUSH
22671: LD_OWVAR 67
22675: PUSH
22676: LD_INT 4
22678: LESS
22679: AND
22680: IFFALSE 22699
22682: GO 22684
22684: DISABLE
// begin Difficulty := Difficulty + 1 ;
22685: LD_ADDR_OWVAR 67
22689: PUSH
22690: LD_OWVAR 67
22694: PUSH
22695: LD_INT 1
22697: PLUS
22698: ST_TO_ADDR
// end ;
22699: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
22700: LD_EXP 56
22704: PUSH
22705: LD_EXP 75
22709: AND
22710: IFFALSE 22813
22712: GO 22714
22714: DISABLE
22715: LD_INT 0
22717: PPUSH
// begin for i := 1 to 5 do
22718: LD_ADDR_VAR 0 1
22722: PUSH
22723: DOUBLE
22724: LD_INT 1
22726: DEC
22727: ST_TO_ADDR
22728: LD_INT 5
22730: PUSH
22731: FOR_TO
22732: IFFALSE 22811
// begin uc_nation := nation_nature ;
22734: LD_ADDR_OWVAR 21
22738: PUSH
22739: LD_INT 0
22741: ST_TO_ADDR
// uc_side := 0 ;
22742: LD_ADDR_OWVAR 20
22746: PUSH
22747: LD_INT 0
22749: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22750: LD_ADDR_OWVAR 29
22754: PUSH
22755: LD_INT 12
22757: PUSH
22758: LD_INT 12
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: ST_TO_ADDR
// hc_agressivity := 20 ;
22765: LD_ADDR_OWVAR 35
22769: PUSH
22770: LD_INT 20
22772: ST_TO_ADDR
// hc_class := class_tiger ;
22773: LD_ADDR_OWVAR 28
22777: PUSH
22778: LD_INT 14
22780: ST_TO_ADDR
// hc_gallery :=  ;
22781: LD_ADDR_OWVAR 33
22785: PUSH
22786: LD_STRING 
22788: ST_TO_ADDR
// hc_name :=  ;
22789: LD_ADDR_OWVAR 26
22793: PUSH
22794: LD_STRING 
22796: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
22797: CALL_OW 44
22801: PPUSH
22802: LD_INT 0
22804: PPUSH
22805: CALL_OW 51
// end ;
22809: GO 22731
22811: POP
22812: POP
// end ;
22813: PPOPN 1
22815: END
// every 0 0$1 trigger StreamModeActive and sBomb do
22816: LD_EXP 56
22820: PUSH
22821: LD_EXP 76
22825: AND
22826: IFFALSE 22835
22828: GO 22830
22830: DISABLE
// StreamSibBomb ;
22831: CALL 22836 0 0
22835: END
// export function StreamSibBomb ; var i , x , y ; begin
22836: LD_INT 0
22838: PPUSH
22839: PPUSH
22840: PPUSH
22841: PPUSH
// result := false ;
22842: LD_ADDR_VAR 0 1
22846: PUSH
22847: LD_INT 0
22849: ST_TO_ADDR
// for i := 1 to 16 do
22850: LD_ADDR_VAR 0 2
22854: PUSH
22855: DOUBLE
22856: LD_INT 1
22858: DEC
22859: ST_TO_ADDR
22860: LD_INT 16
22862: PUSH
22863: FOR_TO
22864: IFFALSE 23063
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22866: LD_ADDR_VAR 0 3
22870: PUSH
22871: LD_INT 10
22873: PUSH
22874: LD_INT 20
22876: PUSH
22877: LD_INT 30
22879: PUSH
22880: LD_INT 40
22882: PUSH
22883: LD_INT 50
22885: PUSH
22886: LD_INT 60
22888: PUSH
22889: LD_INT 70
22891: PUSH
22892: LD_INT 80
22894: PUSH
22895: LD_INT 90
22897: PUSH
22898: LD_INT 100
22900: PUSH
22901: LD_INT 110
22903: PUSH
22904: LD_INT 120
22906: PUSH
22907: LD_INT 130
22909: PUSH
22910: LD_INT 140
22912: PUSH
22913: LD_INT 150
22915: PUSH
22916: EMPTY
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: PUSH
22933: LD_INT 1
22935: PPUSH
22936: LD_INT 15
22938: PPUSH
22939: CALL_OW 12
22943: ARRAY
22944: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22945: LD_ADDR_VAR 0 4
22949: PUSH
22950: LD_INT 10
22952: PUSH
22953: LD_INT 20
22955: PUSH
22956: LD_INT 30
22958: PUSH
22959: LD_INT 40
22961: PUSH
22962: LD_INT 50
22964: PUSH
22965: LD_INT 60
22967: PUSH
22968: LD_INT 70
22970: PUSH
22971: LD_INT 80
22973: PUSH
22974: LD_INT 90
22976: PUSH
22977: LD_INT 100
22979: PUSH
22980: LD_INT 110
22982: PUSH
22983: LD_INT 120
22985: PUSH
22986: LD_INT 130
22988: PUSH
22989: LD_INT 140
22991: PUSH
22992: LD_INT 150
22994: PUSH
22995: EMPTY
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: PUSH
23012: LD_INT 1
23014: PPUSH
23015: LD_INT 15
23017: PPUSH
23018: CALL_OW 12
23022: ARRAY
23023: ST_TO_ADDR
// if ValidHex ( x , y ) then
23024: LD_VAR 0 3
23028: PPUSH
23029: LD_VAR 0 4
23033: PPUSH
23034: CALL_OW 488
23038: IFFALSE 23061
// begin result := [ x , y ] ;
23040: LD_ADDR_VAR 0 1
23044: PUSH
23045: LD_VAR 0 3
23049: PUSH
23050: LD_VAR 0 4
23054: PUSH
23055: EMPTY
23056: LIST
23057: LIST
23058: ST_TO_ADDR
// break ;
23059: GO 23063
// end ; end ;
23061: GO 22863
23063: POP
23064: POP
// if result then
23065: LD_VAR 0 1
23069: IFFALSE 23129
// begin ToLua ( playSibBomb() ) ;
23071: LD_STRING playSibBomb()
23073: PPUSH
23074: CALL_OW 559
// wait ( 0 0$14 ) ;
23078: LD_INT 490
23080: PPUSH
23081: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
23085: LD_VAR 0 1
23089: PUSH
23090: LD_INT 1
23092: ARRAY
23093: PPUSH
23094: LD_VAR 0 1
23098: PUSH
23099: LD_INT 2
23101: ARRAY
23102: PPUSH
23103: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
23107: LD_VAR 0 1
23111: PUSH
23112: LD_INT 1
23114: ARRAY
23115: PPUSH
23116: LD_VAR 0 1
23120: PUSH
23121: LD_INT 2
23123: ARRAY
23124: PPUSH
23125: CALL_OW 429
// end ; end ;
23129: LD_VAR 0 1
23133: RET
// every 0 0$1 trigger StreamModeActive and sReset do
23134: LD_EXP 56
23138: PUSH
23139: LD_EXP 78
23143: AND
23144: IFFALSE 23156
23146: GO 23148
23148: DISABLE
// YouLost (  ) ;
23149: LD_STRING 
23151: PPUSH
23152: CALL_OW 104
23156: END
// every 0 0$1 trigger StreamModeActive and sFog do
23157: LD_EXP 56
23161: PUSH
23162: LD_EXP 77
23166: AND
23167: IFFALSE 23181
23169: GO 23171
23171: DISABLE
// FogOff ( your_side ) ;
23172: LD_OWVAR 2
23176: PPUSH
23177: CALL_OW 344
23181: END
// every 0 0$1 trigger StreamModeActive and sSun do
23182: LD_EXP 56
23186: PUSH
23187: LD_EXP 79
23191: AND
23192: IFFALSE 23220
23194: GO 23196
23196: DISABLE
// begin solar_recharge_percent := 0 ;
23197: LD_ADDR_OWVAR 79
23201: PUSH
23202: LD_INT 0
23204: ST_TO_ADDR
// wait ( 5 5$00 ) ;
23205: LD_INT 10500
23207: PPUSH
23208: CALL_OW 67
// solar_recharge_percent := 100 ;
23212: LD_ADDR_OWVAR 79
23216: PUSH
23217: LD_INT 100
23219: ST_TO_ADDR
// end ;
23220: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
23221: LD_EXP 56
23225: PUSH
23226: LD_EXP 80
23230: AND
23231: IFFALSE 23470
23233: GO 23235
23235: DISABLE
23236: LD_INT 0
23238: PPUSH
23239: PPUSH
23240: PPUSH
// begin tmp := [ ] ;
23241: LD_ADDR_VAR 0 3
23245: PUSH
23246: EMPTY
23247: ST_TO_ADDR
// for i := 1 to 6 do
23248: LD_ADDR_VAR 0 1
23252: PUSH
23253: DOUBLE
23254: LD_INT 1
23256: DEC
23257: ST_TO_ADDR
23258: LD_INT 6
23260: PUSH
23261: FOR_TO
23262: IFFALSE 23367
// begin uc_nation := nation_nature ;
23264: LD_ADDR_OWVAR 21
23268: PUSH
23269: LD_INT 0
23271: ST_TO_ADDR
// uc_side := 0 ;
23272: LD_ADDR_OWVAR 20
23276: PUSH
23277: LD_INT 0
23279: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23280: LD_ADDR_OWVAR 29
23284: PUSH
23285: LD_INT 12
23287: PUSH
23288: LD_INT 12
23290: PUSH
23291: EMPTY
23292: LIST
23293: LIST
23294: ST_TO_ADDR
// hc_agressivity := 20 ;
23295: LD_ADDR_OWVAR 35
23299: PUSH
23300: LD_INT 20
23302: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
23303: LD_ADDR_OWVAR 28
23307: PUSH
23308: LD_INT 17
23310: ST_TO_ADDR
// hc_gallery :=  ;
23311: LD_ADDR_OWVAR 33
23315: PUSH
23316: LD_STRING 
23318: ST_TO_ADDR
// hc_name :=  ;
23319: LD_ADDR_OWVAR 26
23323: PUSH
23324: LD_STRING 
23326: ST_TO_ADDR
// un := CreateHuman ;
23327: LD_ADDR_VAR 0 2
23331: PUSH
23332: CALL_OW 44
23336: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
23337: LD_VAR 0 2
23341: PPUSH
23342: LD_INT 1
23344: PPUSH
23345: CALL_OW 51
// tmp := tmp ^ un ;
23349: LD_ADDR_VAR 0 3
23353: PUSH
23354: LD_VAR 0 3
23358: PUSH
23359: LD_VAR 0 2
23363: ADD
23364: ST_TO_ADDR
// end ;
23365: GO 23261
23367: POP
23368: POP
// repeat wait ( 0 0$1 ) ;
23369: LD_INT 35
23371: PPUSH
23372: CALL_OW 67
// for un in tmp do
23376: LD_ADDR_VAR 0 2
23380: PUSH
23381: LD_VAR 0 3
23385: PUSH
23386: FOR_IN
23387: IFFALSE 23461
// begin if IsDead ( un ) then
23389: LD_VAR 0 2
23393: PPUSH
23394: CALL_OW 301
23398: IFFALSE 23418
// begin tmp := tmp diff un ;
23400: LD_ADDR_VAR 0 3
23404: PUSH
23405: LD_VAR 0 3
23409: PUSH
23410: LD_VAR 0 2
23414: DIFF
23415: ST_TO_ADDR
// continue ;
23416: GO 23386
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
23418: LD_VAR 0 2
23422: PPUSH
23423: LD_INT 3
23425: PUSH
23426: LD_INT 22
23428: PUSH
23429: LD_INT 0
23431: PUSH
23432: EMPTY
23433: LIST
23434: LIST
23435: PUSH
23436: EMPTY
23437: LIST
23438: LIST
23439: PPUSH
23440: CALL_OW 69
23444: PPUSH
23445: LD_VAR 0 2
23449: PPUSH
23450: CALL_OW 74
23454: PPUSH
23455: CALL_OW 115
// end ;
23459: GO 23386
23461: POP
23462: POP
// until not tmp ;
23463: LD_VAR 0 3
23467: NOT
23468: IFFALSE 23369
// end ;
23470: PPOPN 3
23472: END
// every 0 0$1 trigger StreamModeActive and sTroll do
23473: LD_EXP 56
23477: PUSH
23478: LD_EXP 81
23482: AND
23483: IFFALSE 23537
23485: GO 23487
23487: DISABLE
// begin ToLua ( displayTroll(); ) ;
23488: LD_STRING displayTroll();
23490: PPUSH
23491: CALL_OW 559
// wait ( 3 3$00 ) ;
23495: LD_INT 6300
23497: PPUSH
23498: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23502: LD_STRING hideTroll();
23504: PPUSH
23505: CALL_OW 559
// wait ( 1 1$00 ) ;
23509: LD_INT 2100
23511: PPUSH
23512: CALL_OW 67
// ToLua ( displayTroll(); ) ;
23516: LD_STRING displayTroll();
23518: PPUSH
23519: CALL_OW 559
// wait ( 1 1$00 ) ;
23523: LD_INT 2100
23525: PPUSH
23526: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23530: LD_STRING hideTroll();
23532: PPUSH
23533: CALL_OW 559
// end ;
23537: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
23538: LD_EXP 56
23542: PUSH
23543: LD_EXP 82
23547: AND
23548: IFFALSE 23611
23550: GO 23552
23552: DISABLE
23553: LD_INT 0
23555: PPUSH
// begin p := 0 ;
23556: LD_ADDR_VAR 0 1
23560: PUSH
23561: LD_INT 0
23563: ST_TO_ADDR
// repeat game_speed := 1 ;
23564: LD_ADDR_OWVAR 65
23568: PUSH
23569: LD_INT 1
23571: ST_TO_ADDR
// wait ( 0 0$1 ) ;
23572: LD_INT 35
23574: PPUSH
23575: CALL_OW 67
// p := p + 1 ;
23579: LD_ADDR_VAR 0 1
23583: PUSH
23584: LD_VAR 0 1
23588: PUSH
23589: LD_INT 1
23591: PLUS
23592: ST_TO_ADDR
// until p >= 60 ;
23593: LD_VAR 0 1
23597: PUSH
23598: LD_INT 60
23600: GREATEREQUAL
23601: IFFALSE 23564
// game_speed := 4 ;
23603: LD_ADDR_OWVAR 65
23607: PUSH
23608: LD_INT 4
23610: ST_TO_ADDR
// end ;
23611: PPOPN 1
23613: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
23614: LD_EXP 56
23618: PUSH
23619: LD_EXP 83
23623: AND
23624: IFFALSE 23770
23626: GO 23628
23628: DISABLE
23629: LD_INT 0
23631: PPUSH
23632: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23633: LD_ADDR_VAR 0 1
23637: PUSH
23638: LD_INT 22
23640: PUSH
23641: LD_OWVAR 2
23645: PUSH
23646: EMPTY
23647: LIST
23648: LIST
23649: PUSH
23650: LD_INT 2
23652: PUSH
23653: LD_INT 30
23655: PUSH
23656: LD_INT 0
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: PUSH
23663: LD_INT 30
23665: PUSH
23666: LD_INT 1
23668: PUSH
23669: EMPTY
23670: LIST
23671: LIST
23672: PUSH
23673: EMPTY
23674: LIST
23675: LIST
23676: LIST
23677: PUSH
23678: EMPTY
23679: LIST
23680: LIST
23681: PPUSH
23682: CALL_OW 69
23686: ST_TO_ADDR
// if not depot then
23687: LD_VAR 0 1
23691: NOT
23692: IFFALSE 23696
// exit ;
23694: GO 23770
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
23696: LD_ADDR_VAR 0 2
23700: PUSH
23701: LD_VAR 0 1
23705: PUSH
23706: LD_INT 1
23708: PPUSH
23709: LD_VAR 0 1
23713: PPUSH
23714: CALL_OW 12
23718: ARRAY
23719: PPUSH
23720: CALL_OW 274
23724: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
23725: LD_VAR 0 2
23729: PPUSH
23730: LD_INT 1
23732: PPUSH
23733: LD_INT 0
23735: PPUSH
23736: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
23740: LD_VAR 0 2
23744: PPUSH
23745: LD_INT 2
23747: PPUSH
23748: LD_INT 0
23750: PPUSH
23751: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
23755: LD_VAR 0 2
23759: PPUSH
23760: LD_INT 3
23762: PPUSH
23763: LD_INT 0
23765: PPUSH
23766: CALL_OW 277
// end ;
23770: PPOPN 2
23772: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
23773: LD_EXP 56
23777: PUSH
23778: LD_EXP 84
23782: AND
23783: IFFALSE 23880
23785: GO 23787
23787: DISABLE
23788: LD_INT 0
23790: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23791: LD_ADDR_VAR 0 1
23795: PUSH
23796: LD_INT 22
23798: PUSH
23799: LD_OWVAR 2
23803: PUSH
23804: EMPTY
23805: LIST
23806: LIST
23807: PUSH
23808: LD_INT 21
23810: PUSH
23811: LD_INT 1
23813: PUSH
23814: EMPTY
23815: LIST
23816: LIST
23817: PUSH
23818: LD_INT 3
23820: PUSH
23821: LD_INT 23
23823: PUSH
23824: LD_INT 0
23826: PUSH
23827: EMPTY
23828: LIST
23829: LIST
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: PUSH
23835: EMPTY
23836: LIST
23837: LIST
23838: LIST
23839: PPUSH
23840: CALL_OW 69
23844: ST_TO_ADDR
// if not tmp then
23845: LD_VAR 0 1
23849: NOT
23850: IFFALSE 23854
// exit ;
23852: GO 23880
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
23854: LD_VAR 0 1
23858: PUSH
23859: LD_INT 1
23861: PPUSH
23862: LD_VAR 0 1
23866: PPUSH
23867: CALL_OW 12
23871: ARRAY
23872: PPUSH
23873: LD_INT 200
23875: PPUSH
23876: CALL_OW 234
// end ;
23880: PPOPN 1
23882: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
23883: LD_EXP 56
23887: PUSH
23888: LD_EXP 85
23892: AND
23893: IFFALSE 23972
23895: GO 23897
23897: DISABLE
23898: LD_INT 0
23900: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
23901: LD_ADDR_VAR 0 1
23905: PUSH
23906: LD_INT 22
23908: PUSH
23909: LD_OWVAR 2
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: PUSH
23918: LD_INT 21
23920: PUSH
23921: LD_INT 2
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: PPUSH
23932: CALL_OW 69
23936: ST_TO_ADDR
// if not tmp then
23937: LD_VAR 0 1
23941: NOT
23942: IFFALSE 23946
// exit ;
23944: GO 23972
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
23946: LD_VAR 0 1
23950: PUSH
23951: LD_INT 1
23953: PPUSH
23954: LD_VAR 0 1
23958: PPUSH
23959: CALL_OW 12
23963: ARRAY
23964: PPUSH
23965: LD_INT 60
23967: PPUSH
23968: CALL_OW 234
// end ;
23972: PPOPN 1
23974: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
23975: LD_EXP 56
23979: PUSH
23980: LD_EXP 86
23984: AND
23985: IFFALSE 24084
23987: GO 23989
23989: DISABLE
23990: LD_INT 0
23992: PPUSH
23993: PPUSH
// begin enable ;
23994: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
23995: LD_ADDR_VAR 0 1
23999: PUSH
24000: LD_INT 22
24002: PUSH
24003: LD_OWVAR 2
24007: PUSH
24008: EMPTY
24009: LIST
24010: LIST
24011: PUSH
24012: LD_INT 61
24014: PUSH
24015: EMPTY
24016: LIST
24017: PUSH
24018: LD_INT 33
24020: PUSH
24021: LD_INT 2
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: PUSH
24028: EMPTY
24029: LIST
24030: LIST
24031: LIST
24032: PPUSH
24033: CALL_OW 69
24037: ST_TO_ADDR
// if not tmp then
24038: LD_VAR 0 1
24042: NOT
24043: IFFALSE 24047
// exit ;
24045: GO 24084
// for i in tmp do
24047: LD_ADDR_VAR 0 2
24051: PUSH
24052: LD_VAR 0 1
24056: PUSH
24057: FOR_IN
24058: IFFALSE 24082
// if IsControledBy ( i ) then
24060: LD_VAR 0 2
24064: PPUSH
24065: CALL_OW 312
24069: IFFALSE 24080
// ComUnlink ( i ) ;
24071: LD_VAR 0 2
24075: PPUSH
24076: CALL_OW 136
24080: GO 24057
24082: POP
24083: POP
// end ;
24084: PPOPN 2
24086: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
24087: LD_EXP 56
24091: PUSH
24092: LD_EXP 87
24096: AND
24097: IFFALSE 24237
24099: GO 24101
24101: DISABLE
24102: LD_INT 0
24104: PPUSH
24105: PPUSH
// begin ToLua ( displayPowell(); ) ;
24106: LD_STRING displayPowell();
24108: PPUSH
24109: CALL_OW 559
// uc_side := 0 ;
24113: LD_ADDR_OWVAR 20
24117: PUSH
24118: LD_INT 0
24120: ST_TO_ADDR
// uc_nation := 2 ;
24121: LD_ADDR_OWVAR 21
24125: PUSH
24126: LD_INT 2
24128: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
24129: LD_ADDR_OWVAR 37
24133: PUSH
24134: LD_INT 14
24136: ST_TO_ADDR
// vc_engine := engine_siberite ;
24137: LD_ADDR_OWVAR 39
24141: PUSH
24142: LD_INT 3
24144: ST_TO_ADDR
// vc_control := control_apeman ;
24145: LD_ADDR_OWVAR 38
24149: PUSH
24150: LD_INT 5
24152: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
24153: LD_ADDR_OWVAR 40
24157: PUSH
24158: LD_INT 29
24160: ST_TO_ADDR
// un := CreateVehicle ;
24161: LD_ADDR_VAR 0 2
24165: PUSH
24166: CALL_OW 45
24170: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24171: LD_VAR 0 2
24175: PPUSH
24176: LD_INT 1
24178: PPUSH
24179: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24183: LD_INT 35
24185: PPUSH
24186: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24190: LD_VAR 0 2
24194: PPUSH
24195: LD_INT 22
24197: PUSH
24198: LD_OWVAR 2
24202: PUSH
24203: EMPTY
24204: LIST
24205: LIST
24206: PPUSH
24207: CALL_OW 69
24211: PPUSH
24212: LD_VAR 0 2
24216: PPUSH
24217: CALL_OW 74
24221: PPUSH
24222: CALL_OW 115
// until IsDead ( un ) ;
24226: LD_VAR 0 2
24230: PPUSH
24231: CALL_OW 301
24235: IFFALSE 24183
// end ;
24237: PPOPN 2
24239: END
// every 0 0$1 trigger StreamModeActive and sStu do
24240: LD_EXP 56
24244: PUSH
24245: LD_EXP 95
24249: AND
24250: IFFALSE 24266
24252: GO 24254
24254: DISABLE
// begin ToLua ( displayStucuk(); ) ;
24255: LD_STRING displayStucuk();
24257: PPUSH
24258: CALL_OW 559
// ResetFog ;
24262: CALL_OW 335
// end ;
24266: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
24267: LD_EXP 56
24271: PUSH
24272: LD_EXP 88
24276: AND
24277: IFFALSE 24418
24279: GO 24281
24281: DISABLE
24282: LD_INT 0
24284: PPUSH
24285: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24286: LD_ADDR_VAR 0 2
24290: PUSH
24291: LD_INT 22
24293: PUSH
24294: LD_OWVAR 2
24298: PUSH
24299: EMPTY
24300: LIST
24301: LIST
24302: PUSH
24303: LD_INT 21
24305: PUSH
24306: LD_INT 1
24308: PUSH
24309: EMPTY
24310: LIST
24311: LIST
24312: PUSH
24313: EMPTY
24314: LIST
24315: LIST
24316: PPUSH
24317: CALL_OW 69
24321: ST_TO_ADDR
// if not tmp then
24322: LD_VAR 0 2
24326: NOT
24327: IFFALSE 24331
// exit ;
24329: GO 24418
// un := tmp [ rand ( 1 , tmp ) ] ;
24331: LD_ADDR_VAR 0 1
24335: PUSH
24336: LD_VAR 0 2
24340: PUSH
24341: LD_INT 1
24343: PPUSH
24344: LD_VAR 0 2
24348: PPUSH
24349: CALL_OW 12
24353: ARRAY
24354: ST_TO_ADDR
// SetSide ( un , 0 ) ;
24355: LD_VAR 0 1
24359: PPUSH
24360: LD_INT 0
24362: PPUSH
24363: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
24367: LD_VAR 0 1
24371: PPUSH
24372: LD_OWVAR 3
24376: PUSH
24377: LD_VAR 0 1
24381: DIFF
24382: PPUSH
24383: LD_VAR 0 1
24387: PPUSH
24388: CALL_OW 74
24392: PPUSH
24393: CALL_OW 115
// wait ( 0 0$20 ) ;
24397: LD_INT 700
24399: PPUSH
24400: CALL_OW 67
// SetSide ( un , your_side ) ;
24404: LD_VAR 0 1
24408: PPUSH
24409: LD_OWVAR 2
24413: PPUSH
24414: CALL_OW 235
// end ;
24418: PPOPN 2
24420: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
24421: LD_EXP 56
24425: PUSH
24426: LD_EXP 89
24430: AND
24431: IFFALSE 24537
24433: GO 24435
24435: DISABLE
24436: LD_INT 0
24438: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24439: LD_ADDR_VAR 0 1
24443: PUSH
24444: LD_INT 22
24446: PUSH
24447: LD_OWVAR 2
24451: PUSH
24452: EMPTY
24453: LIST
24454: LIST
24455: PUSH
24456: LD_INT 2
24458: PUSH
24459: LD_INT 30
24461: PUSH
24462: LD_INT 0
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: PUSH
24469: LD_INT 30
24471: PUSH
24472: LD_INT 1
24474: PUSH
24475: EMPTY
24476: LIST
24477: LIST
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: LIST
24483: PUSH
24484: EMPTY
24485: LIST
24486: LIST
24487: PPUSH
24488: CALL_OW 69
24492: ST_TO_ADDR
// if not depot then
24493: LD_VAR 0 1
24497: NOT
24498: IFFALSE 24502
// exit ;
24500: GO 24537
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
24502: LD_VAR 0 1
24506: PUSH
24507: LD_INT 1
24509: ARRAY
24510: PPUSH
24511: CALL_OW 250
24515: PPUSH
24516: LD_VAR 0 1
24520: PUSH
24521: LD_INT 1
24523: ARRAY
24524: PPUSH
24525: CALL_OW 251
24529: PPUSH
24530: LD_INT 70
24532: PPUSH
24533: CALL_OW 495
// end ;
24537: PPOPN 1
24539: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
24540: LD_EXP 56
24544: PUSH
24545: LD_EXP 90
24549: AND
24550: IFFALSE 24761
24552: GO 24554
24554: DISABLE
24555: LD_INT 0
24557: PPUSH
24558: PPUSH
24559: PPUSH
24560: PPUSH
24561: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24562: LD_ADDR_VAR 0 5
24566: PUSH
24567: LD_INT 22
24569: PUSH
24570: LD_OWVAR 2
24574: PUSH
24575: EMPTY
24576: LIST
24577: LIST
24578: PUSH
24579: LD_INT 21
24581: PUSH
24582: LD_INT 1
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: PUSH
24589: EMPTY
24590: LIST
24591: LIST
24592: PPUSH
24593: CALL_OW 69
24597: ST_TO_ADDR
// if not tmp then
24598: LD_VAR 0 5
24602: NOT
24603: IFFALSE 24607
// exit ;
24605: GO 24761
// for i in tmp do
24607: LD_ADDR_VAR 0 1
24611: PUSH
24612: LD_VAR 0 5
24616: PUSH
24617: FOR_IN
24618: IFFALSE 24759
// begin d := rand ( 0 , 5 ) ;
24620: LD_ADDR_VAR 0 4
24624: PUSH
24625: LD_INT 0
24627: PPUSH
24628: LD_INT 5
24630: PPUSH
24631: CALL_OW 12
24635: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
24636: LD_ADDR_VAR 0 2
24640: PUSH
24641: LD_VAR 0 1
24645: PPUSH
24646: CALL_OW 250
24650: PPUSH
24651: LD_VAR 0 4
24655: PPUSH
24656: LD_INT 3
24658: PPUSH
24659: LD_INT 12
24661: PPUSH
24662: CALL_OW 12
24666: PPUSH
24667: CALL_OW 272
24671: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
24672: LD_ADDR_VAR 0 3
24676: PUSH
24677: LD_VAR 0 1
24681: PPUSH
24682: CALL_OW 251
24686: PPUSH
24687: LD_VAR 0 4
24691: PPUSH
24692: LD_INT 3
24694: PPUSH
24695: LD_INT 12
24697: PPUSH
24698: CALL_OW 12
24702: PPUSH
24703: CALL_OW 273
24707: ST_TO_ADDR
// if ValidHex ( x , y ) then
24708: LD_VAR 0 2
24712: PPUSH
24713: LD_VAR 0 3
24717: PPUSH
24718: CALL_OW 488
24722: IFFALSE 24757
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
24724: LD_VAR 0 1
24728: PPUSH
24729: LD_VAR 0 2
24733: PPUSH
24734: LD_VAR 0 3
24738: PPUSH
24739: LD_INT 3
24741: PPUSH
24742: LD_INT 6
24744: PPUSH
24745: CALL_OW 12
24749: PPUSH
24750: LD_INT 1
24752: PPUSH
24753: CALL_OW 483
// end ;
24757: GO 24617
24759: POP
24760: POP
// end ;
24761: PPOPN 5
24763: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
24764: LD_EXP 56
24768: PUSH
24769: LD_EXP 91
24773: AND
24774: IFFALSE 24868
24776: GO 24778
24778: DISABLE
24779: LD_INT 0
24781: PPUSH
24782: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
24783: LD_ADDR_VAR 0 2
24787: PUSH
24788: LD_INT 22
24790: PUSH
24791: LD_OWVAR 2
24795: PUSH
24796: EMPTY
24797: LIST
24798: LIST
24799: PUSH
24800: LD_INT 32
24802: PUSH
24803: LD_INT 1
24805: PUSH
24806: EMPTY
24807: LIST
24808: LIST
24809: PUSH
24810: LD_INT 21
24812: PUSH
24813: LD_INT 2
24815: PUSH
24816: EMPTY
24817: LIST
24818: LIST
24819: PUSH
24820: EMPTY
24821: LIST
24822: LIST
24823: LIST
24824: PPUSH
24825: CALL_OW 69
24829: ST_TO_ADDR
// if not tmp then
24830: LD_VAR 0 2
24834: NOT
24835: IFFALSE 24839
// exit ;
24837: GO 24868
// for i in tmp do
24839: LD_ADDR_VAR 0 1
24843: PUSH
24844: LD_VAR 0 2
24848: PUSH
24849: FOR_IN
24850: IFFALSE 24866
// SetFuel ( i , 0 ) ;
24852: LD_VAR 0 1
24856: PPUSH
24857: LD_INT 0
24859: PPUSH
24860: CALL_OW 240
24864: GO 24849
24866: POP
24867: POP
// end ;
24868: PPOPN 2
24870: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
24871: LD_EXP 56
24875: PUSH
24876: LD_EXP 92
24880: AND
24881: IFFALSE 24947
24883: GO 24885
24885: DISABLE
24886: LD_INT 0
24888: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24889: LD_ADDR_VAR 0 1
24893: PUSH
24894: LD_INT 22
24896: PUSH
24897: LD_OWVAR 2
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: PUSH
24906: LD_INT 30
24908: PUSH
24909: LD_INT 29
24911: PUSH
24912: EMPTY
24913: LIST
24914: LIST
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: PPUSH
24920: CALL_OW 69
24924: ST_TO_ADDR
// if not tmp then
24925: LD_VAR 0 1
24929: NOT
24930: IFFALSE 24934
// exit ;
24932: GO 24947
// DestroyUnit ( tmp [ 1 ] ) ;
24934: LD_VAR 0 1
24938: PUSH
24939: LD_INT 1
24941: ARRAY
24942: PPUSH
24943: CALL_OW 65
// end ;
24947: PPOPN 1
24949: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
24950: LD_EXP 56
24954: PUSH
24955: LD_EXP 94
24959: AND
24960: IFFALSE 25089
24962: GO 24964
24964: DISABLE
24965: LD_INT 0
24967: PPUSH
// begin uc_side := 0 ;
24968: LD_ADDR_OWVAR 20
24972: PUSH
24973: LD_INT 0
24975: ST_TO_ADDR
// uc_nation := nation_arabian ;
24976: LD_ADDR_OWVAR 21
24980: PUSH
24981: LD_INT 2
24983: ST_TO_ADDR
// hc_gallery :=  ;
24984: LD_ADDR_OWVAR 33
24988: PUSH
24989: LD_STRING 
24991: ST_TO_ADDR
// hc_name :=  ;
24992: LD_ADDR_OWVAR 26
24996: PUSH
24997: LD_STRING 
24999: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
25000: LD_INT 1
25002: PPUSH
25003: LD_INT 11
25005: PPUSH
25006: LD_INT 10
25008: PPUSH
25009: CALL_OW 380
// un := CreateHuman ;
25013: LD_ADDR_VAR 0 1
25017: PUSH
25018: CALL_OW 44
25022: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25023: LD_VAR 0 1
25027: PPUSH
25028: LD_INT 1
25030: PPUSH
25031: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25035: LD_INT 35
25037: PPUSH
25038: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25042: LD_VAR 0 1
25046: PPUSH
25047: LD_INT 22
25049: PUSH
25050: LD_OWVAR 2
25054: PUSH
25055: EMPTY
25056: LIST
25057: LIST
25058: PPUSH
25059: CALL_OW 69
25063: PPUSH
25064: LD_VAR 0 1
25068: PPUSH
25069: CALL_OW 74
25073: PPUSH
25074: CALL_OW 115
// until IsDead ( un ) ;
25078: LD_VAR 0 1
25082: PPUSH
25083: CALL_OW 301
25087: IFFALSE 25035
// end ;
25089: PPOPN 1
25091: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
25092: LD_EXP 56
25096: PUSH
25097: LD_EXP 96
25101: AND
25102: IFFALSE 25114
25104: GO 25106
25106: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
25107: LD_STRING earthquake(getX(game), 0, 32)
25109: PPUSH
25110: CALL_OW 559
25114: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
25115: LD_EXP 56
25119: PUSH
25120: LD_EXP 97
25124: AND
25125: IFFALSE 25216
25127: GO 25129
25129: DISABLE
25130: LD_INT 0
25132: PPUSH
// begin enable ;
25133: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
25134: LD_ADDR_VAR 0 1
25138: PUSH
25139: LD_INT 22
25141: PUSH
25142: LD_OWVAR 2
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: PUSH
25151: LD_INT 21
25153: PUSH
25154: LD_INT 2
25156: PUSH
25157: EMPTY
25158: LIST
25159: LIST
25160: PUSH
25161: LD_INT 33
25163: PUSH
25164: LD_INT 3
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: PUSH
25171: EMPTY
25172: LIST
25173: LIST
25174: LIST
25175: PPUSH
25176: CALL_OW 69
25180: ST_TO_ADDR
// if not tmp then
25181: LD_VAR 0 1
25185: NOT
25186: IFFALSE 25190
// exit ;
25188: GO 25216
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25190: LD_VAR 0 1
25194: PUSH
25195: LD_INT 1
25197: PPUSH
25198: LD_VAR 0 1
25202: PPUSH
25203: CALL_OW 12
25207: ARRAY
25208: PPUSH
25209: LD_INT 1
25211: PPUSH
25212: CALL_OW 234
// end ;
25216: PPOPN 1
25218: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
25219: LD_EXP 56
25223: PUSH
25224: LD_EXP 98
25228: AND
25229: IFFALSE 25370
25231: GO 25233
25233: DISABLE
25234: LD_INT 0
25236: PPUSH
25237: PPUSH
25238: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25239: LD_ADDR_VAR 0 3
25243: PUSH
25244: LD_INT 22
25246: PUSH
25247: LD_OWVAR 2
25251: PUSH
25252: EMPTY
25253: LIST
25254: LIST
25255: PUSH
25256: LD_INT 25
25258: PUSH
25259: LD_INT 1
25261: PUSH
25262: EMPTY
25263: LIST
25264: LIST
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: PPUSH
25270: CALL_OW 69
25274: ST_TO_ADDR
// if not tmp then
25275: LD_VAR 0 3
25279: NOT
25280: IFFALSE 25284
// exit ;
25282: GO 25370
// un := tmp [ rand ( 1 , tmp ) ] ;
25284: LD_ADDR_VAR 0 2
25288: PUSH
25289: LD_VAR 0 3
25293: PUSH
25294: LD_INT 1
25296: PPUSH
25297: LD_VAR 0 3
25301: PPUSH
25302: CALL_OW 12
25306: ARRAY
25307: ST_TO_ADDR
// if Crawls ( un ) then
25308: LD_VAR 0 2
25312: PPUSH
25313: CALL_OW 318
25317: IFFALSE 25328
// ComWalk ( un ) ;
25319: LD_VAR 0 2
25323: PPUSH
25324: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
25328: LD_VAR 0 2
25332: PPUSH
25333: LD_INT 9
25335: PPUSH
25336: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
25340: LD_INT 28
25342: PPUSH
25343: LD_OWVAR 2
25347: PPUSH
25348: LD_INT 2
25350: PPUSH
25351: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
25355: LD_INT 29
25357: PPUSH
25358: LD_OWVAR 2
25362: PPUSH
25363: LD_INT 2
25365: PPUSH
25366: CALL_OW 322
// end ;
25370: PPOPN 3
25372: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
25373: LD_EXP 56
25377: PUSH
25378: LD_EXP 99
25382: AND
25383: IFFALSE 25494
25385: GO 25387
25387: DISABLE
25388: LD_INT 0
25390: PPUSH
25391: PPUSH
25392: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25393: LD_ADDR_VAR 0 3
25397: PUSH
25398: LD_INT 22
25400: PUSH
25401: LD_OWVAR 2
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: PUSH
25410: LD_INT 25
25412: PUSH
25413: LD_INT 1
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: PPUSH
25424: CALL_OW 69
25428: ST_TO_ADDR
// if not tmp then
25429: LD_VAR 0 3
25433: NOT
25434: IFFALSE 25438
// exit ;
25436: GO 25494
// un := tmp [ rand ( 1 , tmp ) ] ;
25438: LD_ADDR_VAR 0 2
25442: PUSH
25443: LD_VAR 0 3
25447: PUSH
25448: LD_INT 1
25450: PPUSH
25451: LD_VAR 0 3
25455: PPUSH
25456: CALL_OW 12
25460: ARRAY
25461: ST_TO_ADDR
// if Crawls ( un ) then
25462: LD_VAR 0 2
25466: PPUSH
25467: CALL_OW 318
25471: IFFALSE 25482
// ComWalk ( un ) ;
25473: LD_VAR 0 2
25477: PPUSH
25478: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25482: LD_VAR 0 2
25486: PPUSH
25487: LD_INT 8
25489: PPUSH
25490: CALL_OW 336
// end ;
25494: PPOPN 3
25496: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
25497: LD_EXP 56
25501: PUSH
25502: LD_EXP 100
25506: AND
25507: IFFALSE 25651
25509: GO 25511
25511: DISABLE
25512: LD_INT 0
25514: PPUSH
25515: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
25516: LD_ADDR_VAR 0 2
25520: PUSH
25521: LD_INT 22
25523: PUSH
25524: LD_OWVAR 2
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PUSH
25533: LD_INT 21
25535: PUSH
25536: LD_INT 2
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: PUSH
25543: LD_INT 2
25545: PUSH
25546: LD_INT 34
25548: PUSH
25549: LD_INT 12
25551: PUSH
25552: EMPTY
25553: LIST
25554: LIST
25555: PUSH
25556: LD_INT 34
25558: PUSH
25559: LD_INT 51
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: PUSH
25566: LD_INT 34
25568: PUSH
25569: LD_INT 32
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: PUSH
25576: EMPTY
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: LIST
25586: PPUSH
25587: CALL_OW 69
25591: ST_TO_ADDR
// if not tmp then
25592: LD_VAR 0 2
25596: NOT
25597: IFFALSE 25601
// exit ;
25599: GO 25651
// for i in tmp do
25601: LD_ADDR_VAR 0 1
25605: PUSH
25606: LD_VAR 0 2
25610: PUSH
25611: FOR_IN
25612: IFFALSE 25649
// if GetCargo ( i , mat_artifact ) = 0 then
25614: LD_VAR 0 1
25618: PPUSH
25619: LD_INT 4
25621: PPUSH
25622: CALL_OW 289
25626: PUSH
25627: LD_INT 0
25629: EQUAL
25630: IFFALSE 25647
// SetCargo ( i , mat_siberit , 100 ) ;
25632: LD_VAR 0 1
25636: PPUSH
25637: LD_INT 3
25639: PPUSH
25640: LD_INT 100
25642: PPUSH
25643: CALL_OW 290
25647: GO 25611
25649: POP
25650: POP
// end ;
25651: PPOPN 2
25653: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
25654: LD_EXP 56
25658: PUSH
25659: LD_EXP 101
25663: AND
25664: IFFALSE 25847
25666: GO 25668
25668: DISABLE
25669: LD_INT 0
25671: PPUSH
25672: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25673: LD_ADDR_VAR 0 2
25677: PUSH
25678: LD_INT 22
25680: PUSH
25681: LD_OWVAR 2
25685: PUSH
25686: EMPTY
25687: LIST
25688: LIST
25689: PPUSH
25690: CALL_OW 69
25694: ST_TO_ADDR
// if not tmp then
25695: LD_VAR 0 2
25699: NOT
25700: IFFALSE 25704
// exit ;
25702: GO 25847
// for i := 1 to 2 do
25704: LD_ADDR_VAR 0 1
25708: PUSH
25709: DOUBLE
25710: LD_INT 1
25712: DEC
25713: ST_TO_ADDR
25714: LD_INT 2
25716: PUSH
25717: FOR_TO
25718: IFFALSE 25845
// begin uc_side := your_side ;
25720: LD_ADDR_OWVAR 20
25724: PUSH
25725: LD_OWVAR 2
25729: ST_TO_ADDR
// uc_nation := nation_american ;
25730: LD_ADDR_OWVAR 21
25734: PUSH
25735: LD_INT 1
25737: ST_TO_ADDR
// vc_chassis := us_morphling ;
25738: LD_ADDR_OWVAR 37
25742: PUSH
25743: LD_INT 5
25745: ST_TO_ADDR
// vc_engine := engine_siberite ;
25746: LD_ADDR_OWVAR 39
25750: PUSH
25751: LD_INT 3
25753: ST_TO_ADDR
// vc_control := control_computer ;
25754: LD_ADDR_OWVAR 38
25758: PUSH
25759: LD_INT 3
25761: ST_TO_ADDR
// vc_weapon := us_double_laser ;
25762: LD_ADDR_OWVAR 40
25766: PUSH
25767: LD_INT 10
25769: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
25770: LD_VAR 0 2
25774: PUSH
25775: LD_INT 1
25777: ARRAY
25778: PPUSH
25779: CALL_OW 310
25783: NOT
25784: IFFALSE 25831
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
25786: CALL_OW 45
25790: PPUSH
25791: LD_VAR 0 2
25795: PUSH
25796: LD_INT 1
25798: ARRAY
25799: PPUSH
25800: CALL_OW 250
25804: PPUSH
25805: LD_VAR 0 2
25809: PUSH
25810: LD_INT 1
25812: ARRAY
25813: PPUSH
25814: CALL_OW 251
25818: PPUSH
25819: LD_INT 12
25821: PPUSH
25822: LD_INT 1
25824: PPUSH
25825: CALL_OW 50
25829: GO 25843
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
25831: CALL_OW 45
25835: PPUSH
25836: LD_INT 1
25838: PPUSH
25839: CALL_OW 51
// end ;
25843: GO 25717
25845: POP
25846: POP
// end ;
25847: PPOPN 2
25849: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
25850: LD_EXP 56
25854: PUSH
25855: LD_EXP 102
25859: AND
25860: IFFALSE 26082
25862: GO 25864
25864: DISABLE
25865: LD_INT 0
25867: PPUSH
25868: PPUSH
25869: PPUSH
25870: PPUSH
25871: PPUSH
25872: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25873: LD_ADDR_VAR 0 6
25877: PUSH
25878: LD_INT 22
25880: PUSH
25881: LD_OWVAR 2
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: PUSH
25890: LD_INT 21
25892: PUSH
25893: LD_INT 1
25895: PUSH
25896: EMPTY
25897: LIST
25898: LIST
25899: PUSH
25900: LD_INT 3
25902: PUSH
25903: LD_INT 23
25905: PUSH
25906: LD_INT 0
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: LIST
25921: PPUSH
25922: CALL_OW 69
25926: ST_TO_ADDR
// if not tmp then
25927: LD_VAR 0 6
25931: NOT
25932: IFFALSE 25936
// exit ;
25934: GO 26082
// s1 := rand ( 1 , 4 ) ;
25936: LD_ADDR_VAR 0 2
25940: PUSH
25941: LD_INT 1
25943: PPUSH
25944: LD_INT 4
25946: PPUSH
25947: CALL_OW 12
25951: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
25952: LD_ADDR_VAR 0 4
25956: PUSH
25957: LD_VAR 0 6
25961: PUSH
25962: LD_INT 1
25964: ARRAY
25965: PPUSH
25966: LD_VAR 0 2
25970: PPUSH
25971: CALL_OW 259
25975: ST_TO_ADDR
// if s1 = 1 then
25976: LD_VAR 0 2
25980: PUSH
25981: LD_INT 1
25983: EQUAL
25984: IFFALSE 26004
// s2 := rand ( 2 , 4 ) else
25986: LD_ADDR_VAR 0 3
25990: PUSH
25991: LD_INT 2
25993: PPUSH
25994: LD_INT 4
25996: PPUSH
25997: CALL_OW 12
26001: ST_TO_ADDR
26002: GO 26012
// s2 := 1 ;
26004: LD_ADDR_VAR 0 3
26008: PUSH
26009: LD_INT 1
26011: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
26012: LD_ADDR_VAR 0 5
26016: PUSH
26017: LD_VAR 0 6
26021: PUSH
26022: LD_INT 1
26024: ARRAY
26025: PPUSH
26026: LD_VAR 0 3
26030: PPUSH
26031: CALL_OW 259
26035: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
26036: LD_VAR 0 6
26040: PUSH
26041: LD_INT 1
26043: ARRAY
26044: PPUSH
26045: LD_VAR 0 2
26049: PPUSH
26050: LD_VAR 0 5
26054: PPUSH
26055: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
26059: LD_VAR 0 6
26063: PUSH
26064: LD_INT 1
26066: ARRAY
26067: PPUSH
26068: LD_VAR 0 3
26072: PPUSH
26073: LD_VAR 0 4
26077: PPUSH
26078: CALL_OW 237
// end ;
26082: PPOPN 6
26084: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
26085: LD_EXP 56
26089: PUSH
26090: LD_EXP 103
26094: AND
26095: IFFALSE 26174
26097: GO 26099
26099: DISABLE
26100: LD_INT 0
26102: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
26103: LD_ADDR_VAR 0 1
26107: PUSH
26108: LD_INT 22
26110: PUSH
26111: LD_OWVAR 2
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: LD_INT 30
26122: PUSH
26123: LD_INT 3
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: PUSH
26130: EMPTY
26131: LIST
26132: LIST
26133: PPUSH
26134: CALL_OW 69
26138: ST_TO_ADDR
// if not tmp then
26139: LD_VAR 0 1
26143: NOT
26144: IFFALSE 26148
// exit ;
26146: GO 26174
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26148: LD_VAR 0 1
26152: PUSH
26153: LD_INT 1
26155: PPUSH
26156: LD_VAR 0 1
26160: PPUSH
26161: CALL_OW 12
26165: ARRAY
26166: PPUSH
26167: LD_INT 1
26169: PPUSH
26170: CALL_OW 234
// end ;
26174: PPOPN 1
26176: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
26177: LD_EXP 56
26181: PUSH
26182: LD_EXP 104
26186: AND
26187: IFFALSE 26299
26189: GO 26191
26191: DISABLE
26192: LD_INT 0
26194: PPUSH
26195: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
26196: LD_ADDR_VAR 0 2
26200: PUSH
26201: LD_INT 22
26203: PUSH
26204: LD_OWVAR 2
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: PUSH
26213: LD_INT 2
26215: PUSH
26216: LD_INT 30
26218: PUSH
26219: LD_INT 27
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: PUSH
26226: LD_INT 30
26228: PUSH
26229: LD_INT 26
26231: PUSH
26232: EMPTY
26233: LIST
26234: LIST
26235: PUSH
26236: LD_INT 30
26238: PUSH
26239: LD_INT 28
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: PUSH
26252: EMPTY
26253: LIST
26254: LIST
26255: PPUSH
26256: CALL_OW 69
26260: ST_TO_ADDR
// if not tmp then
26261: LD_VAR 0 2
26265: NOT
26266: IFFALSE 26270
// exit ;
26268: GO 26299
// for i in tmp do
26270: LD_ADDR_VAR 0 1
26274: PUSH
26275: LD_VAR 0 2
26279: PUSH
26280: FOR_IN
26281: IFFALSE 26297
// SetLives ( i , 1 ) ;
26283: LD_VAR 0 1
26287: PPUSH
26288: LD_INT 1
26290: PPUSH
26291: CALL_OW 234
26295: GO 26280
26297: POP
26298: POP
// end ;
26299: PPOPN 2
26301: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
26302: LD_EXP 56
26306: PUSH
26307: LD_EXP 105
26311: AND
26312: IFFALSE 26599
26314: GO 26316
26316: DISABLE
26317: LD_INT 0
26319: PPUSH
26320: PPUSH
26321: PPUSH
// begin i := rand ( 1 , 7 ) ;
26322: LD_ADDR_VAR 0 1
26326: PUSH
26327: LD_INT 1
26329: PPUSH
26330: LD_INT 7
26332: PPUSH
26333: CALL_OW 12
26337: ST_TO_ADDR
// case i of 1 :
26338: LD_VAR 0 1
26342: PUSH
26343: LD_INT 1
26345: DOUBLE
26346: EQUAL
26347: IFTRUE 26351
26349: GO 26361
26351: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
26352: LD_STRING earthquake(getX(game), 0, 32)
26354: PPUSH
26355: CALL_OW 559
26359: GO 26599
26361: LD_INT 2
26363: DOUBLE
26364: EQUAL
26365: IFTRUE 26369
26367: GO 26383
26369: POP
// begin ToLua ( displayStucuk(); ) ;
26370: LD_STRING displayStucuk();
26372: PPUSH
26373: CALL_OW 559
// ResetFog ;
26377: CALL_OW 335
// end ; 3 :
26381: GO 26599
26383: LD_INT 3
26385: DOUBLE
26386: EQUAL
26387: IFTRUE 26391
26389: GO 26495
26391: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26392: LD_ADDR_VAR 0 2
26396: PUSH
26397: LD_INT 22
26399: PUSH
26400: LD_OWVAR 2
26404: PUSH
26405: EMPTY
26406: LIST
26407: LIST
26408: PUSH
26409: LD_INT 25
26411: PUSH
26412: LD_INT 1
26414: PUSH
26415: EMPTY
26416: LIST
26417: LIST
26418: PUSH
26419: EMPTY
26420: LIST
26421: LIST
26422: PPUSH
26423: CALL_OW 69
26427: ST_TO_ADDR
// if not tmp then
26428: LD_VAR 0 2
26432: NOT
26433: IFFALSE 26437
// exit ;
26435: GO 26599
// un := tmp [ rand ( 1 , tmp ) ] ;
26437: LD_ADDR_VAR 0 3
26441: PUSH
26442: LD_VAR 0 2
26446: PUSH
26447: LD_INT 1
26449: PPUSH
26450: LD_VAR 0 2
26454: PPUSH
26455: CALL_OW 12
26459: ARRAY
26460: ST_TO_ADDR
// if Crawls ( un ) then
26461: LD_VAR 0 3
26465: PPUSH
26466: CALL_OW 318
26470: IFFALSE 26481
// ComWalk ( un ) ;
26472: LD_VAR 0 3
26476: PPUSH
26477: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26481: LD_VAR 0 3
26485: PPUSH
26486: LD_INT 8
26488: PPUSH
26489: CALL_OW 336
// end ; 4 :
26493: GO 26599
26495: LD_INT 4
26497: DOUBLE
26498: EQUAL
26499: IFTRUE 26503
26501: GO 26577
26503: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26504: LD_ADDR_VAR 0 2
26508: PUSH
26509: LD_INT 22
26511: PUSH
26512: LD_OWVAR 2
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: PUSH
26521: LD_INT 30
26523: PUSH
26524: LD_INT 29
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PPUSH
26535: CALL_OW 69
26539: ST_TO_ADDR
// if not tmp then
26540: LD_VAR 0 2
26544: NOT
26545: IFFALSE 26549
// exit ;
26547: GO 26599
// CenterNowOnUnits ( tmp [ 1 ] ) ;
26549: LD_VAR 0 2
26553: PUSH
26554: LD_INT 1
26556: ARRAY
26557: PPUSH
26558: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
26562: LD_VAR 0 2
26566: PUSH
26567: LD_INT 1
26569: ARRAY
26570: PPUSH
26571: CALL_OW 65
// end ; 5 .. 7 :
26575: GO 26599
26577: LD_INT 5
26579: DOUBLE
26580: GREATEREQUAL
26581: IFFALSE 26589
26583: LD_INT 7
26585: DOUBLE
26586: LESSEQUAL
26587: IFTRUE 26591
26589: GO 26598
26591: POP
// StreamSibBomb ; end ;
26592: CALL 22836 0 0
26596: GO 26599
26598: POP
// end ;
26599: PPOPN 3
26601: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
26602: LD_EXP 56
26606: PUSH
26607: LD_EXP 106
26611: AND
26612: IFFALSE 26768
26614: GO 26616
26616: DISABLE
26617: LD_INT 0
26619: PPUSH
26620: PPUSH
26621: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
26622: LD_ADDR_VAR 0 2
26626: PUSH
26627: LD_INT 81
26629: PUSH
26630: LD_OWVAR 2
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: PUSH
26639: LD_INT 2
26641: PUSH
26642: LD_INT 21
26644: PUSH
26645: LD_INT 1
26647: PUSH
26648: EMPTY
26649: LIST
26650: LIST
26651: PUSH
26652: LD_INT 21
26654: PUSH
26655: LD_INT 2
26657: PUSH
26658: EMPTY
26659: LIST
26660: LIST
26661: PUSH
26662: EMPTY
26663: LIST
26664: LIST
26665: LIST
26666: PUSH
26667: EMPTY
26668: LIST
26669: LIST
26670: PPUSH
26671: CALL_OW 69
26675: ST_TO_ADDR
// if not tmp then
26676: LD_VAR 0 2
26680: NOT
26681: IFFALSE 26685
// exit ;
26683: GO 26768
// p := 0 ;
26685: LD_ADDR_VAR 0 3
26689: PUSH
26690: LD_INT 0
26692: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26693: LD_INT 35
26695: PPUSH
26696: CALL_OW 67
// p := p + 1 ;
26700: LD_ADDR_VAR 0 3
26704: PUSH
26705: LD_VAR 0 3
26709: PUSH
26710: LD_INT 1
26712: PLUS
26713: ST_TO_ADDR
// for i in tmp do
26714: LD_ADDR_VAR 0 1
26718: PUSH
26719: LD_VAR 0 2
26723: PUSH
26724: FOR_IN
26725: IFFALSE 26756
// if GetLives ( i ) < 1000 then
26727: LD_VAR 0 1
26731: PPUSH
26732: CALL_OW 256
26736: PUSH
26737: LD_INT 1000
26739: LESS
26740: IFFALSE 26754
// SetLives ( i , 1000 ) ;
26742: LD_VAR 0 1
26746: PPUSH
26747: LD_INT 1000
26749: PPUSH
26750: CALL_OW 234
26754: GO 26724
26756: POP
26757: POP
// until p > 20 ;
26758: LD_VAR 0 3
26762: PUSH
26763: LD_INT 20
26765: GREATER
26766: IFFALSE 26693
// end ;
26768: PPOPN 3
26770: END
// every 0 0$1 trigger StreamModeActive and sTime do
26771: LD_EXP 56
26775: PUSH
26776: LD_EXP 107
26780: AND
26781: IFFALSE 26816
26783: GO 26785
26785: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
26786: LD_INT 28
26788: PPUSH
26789: LD_OWVAR 2
26793: PPUSH
26794: LD_INT 2
26796: PPUSH
26797: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
26801: LD_INT 30
26803: PPUSH
26804: LD_OWVAR 2
26808: PPUSH
26809: LD_INT 2
26811: PPUSH
26812: CALL_OW 322
// end ;
26816: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
26817: LD_EXP 56
26821: PUSH
26822: LD_EXP 108
26826: AND
26827: IFFALSE 26948
26829: GO 26831
26831: DISABLE
26832: LD_INT 0
26834: PPUSH
26835: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26836: LD_ADDR_VAR 0 2
26840: PUSH
26841: LD_INT 22
26843: PUSH
26844: LD_OWVAR 2
26848: PUSH
26849: EMPTY
26850: LIST
26851: LIST
26852: PUSH
26853: LD_INT 21
26855: PUSH
26856: LD_INT 1
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: PUSH
26863: LD_INT 3
26865: PUSH
26866: LD_INT 23
26868: PUSH
26869: LD_INT 0
26871: PUSH
26872: EMPTY
26873: LIST
26874: LIST
26875: PUSH
26876: EMPTY
26877: LIST
26878: LIST
26879: PUSH
26880: EMPTY
26881: LIST
26882: LIST
26883: LIST
26884: PPUSH
26885: CALL_OW 69
26889: ST_TO_ADDR
// if not tmp then
26890: LD_VAR 0 2
26894: NOT
26895: IFFALSE 26899
// exit ;
26897: GO 26948
// for i in tmp do
26899: LD_ADDR_VAR 0 1
26903: PUSH
26904: LD_VAR 0 2
26908: PUSH
26909: FOR_IN
26910: IFFALSE 26946
// begin if Crawls ( i ) then
26912: LD_VAR 0 1
26916: PPUSH
26917: CALL_OW 318
26921: IFFALSE 26932
// ComWalk ( i ) ;
26923: LD_VAR 0 1
26927: PPUSH
26928: CALL_OW 138
// SetClass ( i , 2 ) ;
26932: LD_VAR 0 1
26936: PPUSH
26937: LD_INT 2
26939: PPUSH
26940: CALL_OW 336
// end ;
26944: GO 26909
26946: POP
26947: POP
// end ;
26948: PPOPN 2
26950: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
26951: LD_EXP 56
26955: PUSH
26956: LD_EXP 109
26960: AND
26961: IFFALSE 27249
26963: GO 26965
26965: DISABLE
26966: LD_INT 0
26968: PPUSH
26969: PPUSH
26970: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
26971: LD_OWVAR 2
26975: PPUSH
26976: LD_INT 9
26978: PPUSH
26979: LD_INT 1
26981: PPUSH
26982: LD_INT 1
26984: PPUSH
26985: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
26989: LD_INT 9
26991: PPUSH
26992: LD_OWVAR 2
26996: PPUSH
26997: CALL_OW 343
// uc_side := 9 ;
27001: LD_ADDR_OWVAR 20
27005: PUSH
27006: LD_INT 9
27008: ST_TO_ADDR
// uc_nation := 2 ;
27009: LD_ADDR_OWVAR 21
27013: PUSH
27014: LD_INT 2
27016: ST_TO_ADDR
// hc_name := Dark Warrior ;
27017: LD_ADDR_OWVAR 26
27021: PUSH
27022: LD_STRING Dark Warrior
27024: ST_TO_ADDR
// hc_gallery :=  ;
27025: LD_ADDR_OWVAR 33
27029: PUSH
27030: LD_STRING 
27032: ST_TO_ADDR
// hc_noskilllimit := true ;
27033: LD_ADDR_OWVAR 76
27037: PUSH
27038: LD_INT 1
27040: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
27041: LD_ADDR_OWVAR 31
27045: PUSH
27046: LD_INT 30
27048: PUSH
27049: LD_INT 30
27051: PUSH
27052: LD_INT 30
27054: PUSH
27055: LD_INT 30
27057: PUSH
27058: EMPTY
27059: LIST
27060: LIST
27061: LIST
27062: LIST
27063: ST_TO_ADDR
// un := CreateHuman ;
27064: LD_ADDR_VAR 0 3
27068: PUSH
27069: CALL_OW 44
27073: ST_TO_ADDR
// hc_noskilllimit := false ;
27074: LD_ADDR_OWVAR 76
27078: PUSH
27079: LD_INT 0
27081: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27082: LD_VAR 0 3
27086: PPUSH
27087: LD_INT 1
27089: PPUSH
27090: CALL_OW 51
// ToLua ( playRanger() ) ;
27094: LD_STRING playRanger()
27096: PPUSH
27097: CALL_OW 559
// p := 0 ;
27101: LD_ADDR_VAR 0 2
27105: PUSH
27106: LD_INT 0
27108: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27109: LD_INT 35
27111: PPUSH
27112: CALL_OW 67
// p := p + 1 ;
27116: LD_ADDR_VAR 0 2
27120: PUSH
27121: LD_VAR 0 2
27125: PUSH
27126: LD_INT 1
27128: PLUS
27129: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
27130: LD_VAR 0 3
27134: PPUSH
27135: CALL_OW 256
27139: PUSH
27140: LD_INT 1000
27142: LESS
27143: IFFALSE 27157
// SetLives ( un , 1000 ) ;
27145: LD_VAR 0 3
27149: PPUSH
27150: LD_INT 1000
27152: PPUSH
27153: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
27157: LD_VAR 0 3
27161: PPUSH
27162: LD_INT 81
27164: PUSH
27165: LD_OWVAR 2
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: PUSH
27174: LD_INT 91
27176: PUSH
27177: LD_VAR 0 3
27181: PUSH
27182: LD_INT 30
27184: PUSH
27185: EMPTY
27186: LIST
27187: LIST
27188: LIST
27189: PUSH
27190: EMPTY
27191: LIST
27192: LIST
27193: PPUSH
27194: CALL_OW 69
27198: PPUSH
27199: LD_VAR 0 3
27203: PPUSH
27204: CALL_OW 74
27208: PPUSH
27209: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
27213: LD_VAR 0 2
27217: PUSH
27218: LD_INT 80
27220: GREATER
27221: PUSH
27222: LD_VAR 0 3
27226: PPUSH
27227: CALL_OW 301
27231: OR
27232: IFFALSE 27109
// if un then
27234: LD_VAR 0 3
27238: IFFALSE 27249
// RemoveUnit ( un ) ;
27240: LD_VAR 0 3
27244: PPUSH
27245: CALL_OW 64
// end ;
27249: PPOPN 3
27251: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
27252: LD_EXP 110
27256: IFFALSE 27372
27258: GO 27260
27260: DISABLE
27261: LD_INT 0
27263: PPUSH
27264: PPUSH
27265: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27266: LD_ADDR_VAR 0 2
27270: PUSH
27271: LD_INT 81
27273: PUSH
27274: LD_OWVAR 2
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PUSH
27283: LD_INT 21
27285: PUSH
27286: LD_INT 1
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: PUSH
27293: EMPTY
27294: LIST
27295: LIST
27296: PPUSH
27297: CALL_OW 69
27301: ST_TO_ADDR
// ToLua ( playComputer() ) ;
27302: LD_STRING playComputer()
27304: PPUSH
27305: CALL_OW 559
// if not tmp then
27309: LD_VAR 0 2
27313: NOT
27314: IFFALSE 27318
// exit ;
27316: GO 27372
// for i in tmp do
27318: LD_ADDR_VAR 0 1
27322: PUSH
27323: LD_VAR 0 2
27327: PUSH
27328: FOR_IN
27329: IFFALSE 27370
// for j := 1 to 4 do
27331: LD_ADDR_VAR 0 3
27335: PUSH
27336: DOUBLE
27337: LD_INT 1
27339: DEC
27340: ST_TO_ADDR
27341: LD_INT 4
27343: PUSH
27344: FOR_TO
27345: IFFALSE 27366
// SetSkill ( i , j , 10 ) ;
27347: LD_VAR 0 1
27351: PPUSH
27352: LD_VAR 0 3
27356: PPUSH
27357: LD_INT 10
27359: PPUSH
27360: CALL_OW 237
27364: GO 27344
27366: POP
27367: POP
27368: GO 27328
27370: POP
27371: POP
// end ;
27372: PPOPN 3
27374: END
// every 0 0$1 trigger s30 do var i , tmp ;
27375: LD_EXP 111
27379: IFFALSE 27448
27381: GO 27383
27383: DISABLE
27384: LD_INT 0
27386: PPUSH
27387: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27388: LD_ADDR_VAR 0 2
27392: PUSH
27393: LD_INT 22
27395: PUSH
27396: LD_OWVAR 2
27400: PUSH
27401: EMPTY
27402: LIST
27403: LIST
27404: PPUSH
27405: CALL_OW 69
27409: ST_TO_ADDR
// if not tmp then
27410: LD_VAR 0 2
27414: NOT
27415: IFFALSE 27419
// exit ;
27417: GO 27448
// for i in tmp do
27419: LD_ADDR_VAR 0 1
27423: PUSH
27424: LD_VAR 0 2
27428: PUSH
27429: FOR_IN
27430: IFFALSE 27446
// SetLives ( i , 300 ) ;
27432: LD_VAR 0 1
27436: PPUSH
27437: LD_INT 300
27439: PPUSH
27440: CALL_OW 234
27444: GO 27429
27446: POP
27447: POP
// end ;
27448: PPOPN 2
27450: END
// every 0 0$1 trigger s60 do var i , tmp ;
27451: LD_EXP 112
27455: IFFALSE 27524
27457: GO 27459
27459: DISABLE
27460: LD_INT 0
27462: PPUSH
27463: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27464: LD_ADDR_VAR 0 2
27468: PUSH
27469: LD_INT 22
27471: PUSH
27472: LD_OWVAR 2
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: PPUSH
27481: CALL_OW 69
27485: ST_TO_ADDR
// if not tmp then
27486: LD_VAR 0 2
27490: NOT
27491: IFFALSE 27495
// exit ;
27493: GO 27524
// for i in tmp do
27495: LD_ADDR_VAR 0 1
27499: PUSH
27500: LD_VAR 0 2
27504: PUSH
27505: FOR_IN
27506: IFFALSE 27522
// SetLives ( i , 600 ) ;
27508: LD_VAR 0 1
27512: PPUSH
27513: LD_INT 600
27515: PPUSH
27516: CALL_OW 234
27520: GO 27505
27522: POP
27523: POP
// end ;
27524: PPOPN 2
27526: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
27527: LD_INT 0
27529: PPUSH
// case cmd of 301 :
27530: LD_VAR 0 1
27534: PUSH
27535: LD_INT 301
27537: DOUBLE
27538: EQUAL
27539: IFTRUE 27543
27541: GO 27575
27543: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
27544: LD_VAR 0 6
27548: PPUSH
27549: LD_VAR 0 7
27553: PPUSH
27554: LD_VAR 0 8
27558: PPUSH
27559: LD_VAR 0 4
27563: PPUSH
27564: LD_VAR 0 5
27568: PPUSH
27569: CALL 28776 0 5
27573: GO 27696
27575: LD_INT 302
27577: DOUBLE
27578: EQUAL
27579: IFTRUE 27583
27581: GO 27620
27583: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
27584: LD_VAR 0 6
27588: PPUSH
27589: LD_VAR 0 7
27593: PPUSH
27594: LD_VAR 0 8
27598: PPUSH
27599: LD_VAR 0 9
27603: PPUSH
27604: LD_VAR 0 4
27608: PPUSH
27609: LD_VAR 0 5
27613: PPUSH
27614: CALL 28867 0 6
27618: GO 27696
27620: LD_INT 303
27622: DOUBLE
27623: EQUAL
27624: IFTRUE 27628
27626: GO 27665
27628: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
27629: LD_VAR 0 6
27633: PPUSH
27634: LD_VAR 0 7
27638: PPUSH
27639: LD_VAR 0 8
27643: PPUSH
27644: LD_VAR 0 9
27648: PPUSH
27649: LD_VAR 0 4
27653: PPUSH
27654: LD_VAR 0 5
27658: PPUSH
27659: CALL 27701 0 6
27663: GO 27696
27665: LD_INT 304
27667: DOUBLE
27668: EQUAL
27669: IFTRUE 27673
27671: GO 27695
27673: POP
// hHackTeleport ( unit , x , y ) ; end ;
27674: LD_VAR 0 2
27678: PPUSH
27679: LD_VAR 0 4
27683: PPUSH
27684: LD_VAR 0 5
27688: PPUSH
27689: CALL 29460 0 3
27693: GO 27696
27695: POP
// end ;
27696: LD_VAR 0 12
27700: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
27701: LD_INT 0
27703: PPUSH
27704: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
27705: LD_VAR 0 1
27709: PUSH
27710: LD_INT 1
27712: LESS
27713: PUSH
27714: LD_VAR 0 1
27718: PUSH
27719: LD_INT 3
27721: GREATER
27722: OR
27723: PUSH
27724: LD_VAR 0 5
27728: PPUSH
27729: LD_VAR 0 6
27733: PPUSH
27734: CALL_OW 428
27738: OR
27739: IFFALSE 27743
// exit ;
27741: GO 28463
// uc_side := your_side ;
27743: LD_ADDR_OWVAR 20
27747: PUSH
27748: LD_OWVAR 2
27752: ST_TO_ADDR
// uc_nation := nation ;
27753: LD_ADDR_OWVAR 21
27757: PUSH
27758: LD_VAR 0 1
27762: ST_TO_ADDR
// bc_level = 1 ;
27763: LD_ADDR_OWVAR 43
27767: PUSH
27768: LD_INT 1
27770: ST_TO_ADDR
// case btype of 1 :
27771: LD_VAR 0 2
27775: PUSH
27776: LD_INT 1
27778: DOUBLE
27779: EQUAL
27780: IFTRUE 27784
27782: GO 27795
27784: POP
// bc_type := b_depot ; 2 :
27785: LD_ADDR_OWVAR 42
27789: PUSH
27790: LD_INT 0
27792: ST_TO_ADDR
27793: GO 28407
27795: LD_INT 2
27797: DOUBLE
27798: EQUAL
27799: IFTRUE 27803
27801: GO 27814
27803: POP
// bc_type := b_warehouse ; 3 :
27804: LD_ADDR_OWVAR 42
27808: PUSH
27809: LD_INT 1
27811: ST_TO_ADDR
27812: GO 28407
27814: LD_INT 3
27816: DOUBLE
27817: EQUAL
27818: IFTRUE 27822
27820: GO 27833
27822: POP
// bc_type := b_lab ; 4 .. 9 :
27823: LD_ADDR_OWVAR 42
27827: PUSH
27828: LD_INT 6
27830: ST_TO_ADDR
27831: GO 28407
27833: LD_INT 4
27835: DOUBLE
27836: GREATEREQUAL
27837: IFFALSE 27845
27839: LD_INT 9
27841: DOUBLE
27842: LESSEQUAL
27843: IFTRUE 27847
27845: GO 27899
27847: POP
// begin bc_type := b_lab_half ;
27848: LD_ADDR_OWVAR 42
27852: PUSH
27853: LD_INT 7
27855: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
27856: LD_ADDR_OWVAR 44
27860: PUSH
27861: LD_INT 10
27863: PUSH
27864: LD_INT 11
27866: PUSH
27867: LD_INT 12
27869: PUSH
27870: LD_INT 15
27872: PUSH
27873: LD_INT 14
27875: PUSH
27876: LD_INT 13
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: LIST
27883: LIST
27884: LIST
27885: LIST
27886: PUSH
27887: LD_VAR 0 2
27891: PUSH
27892: LD_INT 3
27894: MINUS
27895: ARRAY
27896: ST_TO_ADDR
// end ; 10 .. 13 :
27897: GO 28407
27899: LD_INT 10
27901: DOUBLE
27902: GREATEREQUAL
27903: IFFALSE 27911
27905: LD_INT 13
27907: DOUBLE
27908: LESSEQUAL
27909: IFTRUE 27913
27911: GO 27990
27913: POP
// begin bc_type := b_lab_full ;
27914: LD_ADDR_OWVAR 42
27918: PUSH
27919: LD_INT 8
27921: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
27922: LD_ADDR_OWVAR 44
27926: PUSH
27927: LD_INT 10
27929: PUSH
27930: LD_INT 12
27932: PUSH
27933: LD_INT 14
27935: PUSH
27936: LD_INT 13
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: PUSH
27945: LD_VAR 0 2
27949: PUSH
27950: LD_INT 9
27952: MINUS
27953: ARRAY
27954: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
27955: LD_ADDR_OWVAR 45
27959: PUSH
27960: LD_INT 11
27962: PUSH
27963: LD_INT 15
27965: PUSH
27966: LD_INT 12
27968: PUSH
27969: LD_INT 15
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: LIST
27976: LIST
27977: PUSH
27978: LD_VAR 0 2
27982: PUSH
27983: LD_INT 9
27985: MINUS
27986: ARRAY
27987: ST_TO_ADDR
// end ; 14 :
27988: GO 28407
27990: LD_INT 14
27992: DOUBLE
27993: EQUAL
27994: IFTRUE 27998
27996: GO 28009
27998: POP
// bc_type := b_workshop ; 15 :
27999: LD_ADDR_OWVAR 42
28003: PUSH
28004: LD_INT 2
28006: ST_TO_ADDR
28007: GO 28407
28009: LD_INT 15
28011: DOUBLE
28012: EQUAL
28013: IFTRUE 28017
28015: GO 28028
28017: POP
// bc_type := b_factory ; 16 :
28018: LD_ADDR_OWVAR 42
28022: PUSH
28023: LD_INT 3
28025: ST_TO_ADDR
28026: GO 28407
28028: LD_INT 16
28030: DOUBLE
28031: EQUAL
28032: IFTRUE 28036
28034: GO 28047
28036: POP
// bc_type := b_ext_gun ; 17 :
28037: LD_ADDR_OWVAR 42
28041: PUSH
28042: LD_INT 17
28044: ST_TO_ADDR
28045: GO 28407
28047: LD_INT 17
28049: DOUBLE
28050: EQUAL
28051: IFTRUE 28055
28053: GO 28083
28055: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
28056: LD_ADDR_OWVAR 42
28060: PUSH
28061: LD_INT 19
28063: PUSH
28064: LD_INT 23
28066: PUSH
28067: LD_INT 19
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: LIST
28074: PUSH
28075: LD_VAR 0 1
28079: ARRAY
28080: ST_TO_ADDR
28081: GO 28407
28083: LD_INT 18
28085: DOUBLE
28086: EQUAL
28087: IFTRUE 28091
28089: GO 28102
28091: POP
// bc_type := b_ext_radar ; 19 :
28092: LD_ADDR_OWVAR 42
28096: PUSH
28097: LD_INT 20
28099: ST_TO_ADDR
28100: GO 28407
28102: LD_INT 19
28104: DOUBLE
28105: EQUAL
28106: IFTRUE 28110
28108: GO 28121
28110: POP
// bc_type := b_ext_radio ; 20 :
28111: LD_ADDR_OWVAR 42
28115: PUSH
28116: LD_INT 22
28118: ST_TO_ADDR
28119: GO 28407
28121: LD_INT 20
28123: DOUBLE
28124: EQUAL
28125: IFTRUE 28129
28127: GO 28140
28129: POP
// bc_type := b_ext_siberium ; 21 :
28130: LD_ADDR_OWVAR 42
28134: PUSH
28135: LD_INT 21
28137: ST_TO_ADDR
28138: GO 28407
28140: LD_INT 21
28142: DOUBLE
28143: EQUAL
28144: IFTRUE 28148
28146: GO 28159
28148: POP
// bc_type := b_ext_computer ; 22 :
28149: LD_ADDR_OWVAR 42
28153: PUSH
28154: LD_INT 24
28156: ST_TO_ADDR
28157: GO 28407
28159: LD_INT 22
28161: DOUBLE
28162: EQUAL
28163: IFTRUE 28167
28165: GO 28178
28167: POP
// bc_type := b_ext_track ; 23 :
28168: LD_ADDR_OWVAR 42
28172: PUSH
28173: LD_INT 16
28175: ST_TO_ADDR
28176: GO 28407
28178: LD_INT 23
28180: DOUBLE
28181: EQUAL
28182: IFTRUE 28186
28184: GO 28197
28186: POP
// bc_type := b_ext_laser ; 24 :
28187: LD_ADDR_OWVAR 42
28191: PUSH
28192: LD_INT 25
28194: ST_TO_ADDR
28195: GO 28407
28197: LD_INT 24
28199: DOUBLE
28200: EQUAL
28201: IFTRUE 28205
28203: GO 28216
28205: POP
// bc_type := b_control_tower ; 25 :
28206: LD_ADDR_OWVAR 42
28210: PUSH
28211: LD_INT 36
28213: ST_TO_ADDR
28214: GO 28407
28216: LD_INT 25
28218: DOUBLE
28219: EQUAL
28220: IFTRUE 28224
28222: GO 28235
28224: POP
// bc_type := b_breastwork ; 26 :
28225: LD_ADDR_OWVAR 42
28229: PUSH
28230: LD_INT 31
28232: ST_TO_ADDR
28233: GO 28407
28235: LD_INT 26
28237: DOUBLE
28238: EQUAL
28239: IFTRUE 28243
28241: GO 28254
28243: POP
// bc_type := b_bunker ; 27 :
28244: LD_ADDR_OWVAR 42
28248: PUSH
28249: LD_INT 32
28251: ST_TO_ADDR
28252: GO 28407
28254: LD_INT 27
28256: DOUBLE
28257: EQUAL
28258: IFTRUE 28262
28260: GO 28273
28262: POP
// bc_type := b_turret ; 28 :
28263: LD_ADDR_OWVAR 42
28267: PUSH
28268: LD_INT 33
28270: ST_TO_ADDR
28271: GO 28407
28273: LD_INT 28
28275: DOUBLE
28276: EQUAL
28277: IFTRUE 28281
28279: GO 28292
28281: POP
// bc_type := b_armoury ; 29 :
28282: LD_ADDR_OWVAR 42
28286: PUSH
28287: LD_INT 4
28289: ST_TO_ADDR
28290: GO 28407
28292: LD_INT 29
28294: DOUBLE
28295: EQUAL
28296: IFTRUE 28300
28298: GO 28311
28300: POP
// bc_type := b_barracks ; 30 :
28301: LD_ADDR_OWVAR 42
28305: PUSH
28306: LD_INT 5
28308: ST_TO_ADDR
28309: GO 28407
28311: LD_INT 30
28313: DOUBLE
28314: EQUAL
28315: IFTRUE 28319
28317: GO 28330
28319: POP
// bc_type := b_solar_power ; 31 :
28320: LD_ADDR_OWVAR 42
28324: PUSH
28325: LD_INT 27
28327: ST_TO_ADDR
28328: GO 28407
28330: LD_INT 31
28332: DOUBLE
28333: EQUAL
28334: IFTRUE 28338
28336: GO 28349
28338: POP
// bc_type := b_oil_power ; 32 :
28339: LD_ADDR_OWVAR 42
28343: PUSH
28344: LD_INT 26
28346: ST_TO_ADDR
28347: GO 28407
28349: LD_INT 32
28351: DOUBLE
28352: EQUAL
28353: IFTRUE 28357
28355: GO 28368
28357: POP
// bc_type := b_siberite_power ; 33 :
28358: LD_ADDR_OWVAR 42
28362: PUSH
28363: LD_INT 28
28365: ST_TO_ADDR
28366: GO 28407
28368: LD_INT 33
28370: DOUBLE
28371: EQUAL
28372: IFTRUE 28376
28374: GO 28387
28376: POP
// bc_type := b_oil_mine ; 34 :
28377: LD_ADDR_OWVAR 42
28381: PUSH
28382: LD_INT 29
28384: ST_TO_ADDR
28385: GO 28407
28387: LD_INT 34
28389: DOUBLE
28390: EQUAL
28391: IFTRUE 28395
28393: GO 28406
28395: POP
// bc_type := b_siberite_mine ; end ;
28396: LD_ADDR_OWVAR 42
28400: PUSH
28401: LD_INT 30
28403: ST_TO_ADDR
28404: GO 28407
28406: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
28407: LD_ADDR_VAR 0 8
28411: PUSH
28412: LD_VAR 0 5
28416: PPUSH
28417: LD_VAR 0 6
28421: PPUSH
28422: LD_VAR 0 3
28426: PPUSH
28427: CALL_OW 47
28431: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
28432: LD_OWVAR 42
28436: PUSH
28437: LD_INT 32
28439: PUSH
28440: LD_INT 33
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: IN
28447: IFFALSE 28463
// PlaceWeaponTurret ( b , weapon ) ;
28449: LD_VAR 0 8
28453: PPUSH
28454: LD_VAR 0 4
28458: PPUSH
28459: CALL_OW 431
// end ;
28463: LD_VAR 0 7
28467: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
28468: LD_INT 0
28470: PPUSH
28471: PPUSH
28472: PPUSH
28473: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28474: LD_ADDR_VAR 0 4
28478: PUSH
28479: LD_INT 22
28481: PUSH
28482: LD_OWVAR 2
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: PUSH
28491: LD_INT 2
28493: PUSH
28494: LD_INT 30
28496: PUSH
28497: LD_INT 0
28499: PUSH
28500: EMPTY
28501: LIST
28502: LIST
28503: PUSH
28504: LD_INT 30
28506: PUSH
28507: LD_INT 1
28509: PUSH
28510: EMPTY
28511: LIST
28512: LIST
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: LIST
28518: PUSH
28519: EMPTY
28520: LIST
28521: LIST
28522: PPUSH
28523: CALL_OW 69
28527: ST_TO_ADDR
// if not tmp then
28528: LD_VAR 0 4
28532: NOT
28533: IFFALSE 28537
// exit ;
28535: GO 28596
// for i in tmp do
28537: LD_ADDR_VAR 0 2
28541: PUSH
28542: LD_VAR 0 4
28546: PUSH
28547: FOR_IN
28548: IFFALSE 28594
// for j = 1 to 3 do
28550: LD_ADDR_VAR 0 3
28554: PUSH
28555: DOUBLE
28556: LD_INT 1
28558: DEC
28559: ST_TO_ADDR
28560: LD_INT 3
28562: PUSH
28563: FOR_TO
28564: IFFALSE 28590
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
28566: LD_VAR 0 2
28570: PPUSH
28571: CALL_OW 274
28575: PPUSH
28576: LD_VAR 0 3
28580: PPUSH
28581: LD_INT 99999
28583: PPUSH
28584: CALL_OW 277
28588: GO 28563
28590: POP
28591: POP
28592: GO 28547
28594: POP
28595: POP
// end ;
28596: LD_VAR 0 1
28600: RET
// export function hHackSetLevel10 ; var i , j ; begin
28601: LD_INT 0
28603: PPUSH
28604: PPUSH
28605: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28606: LD_ADDR_VAR 0 2
28610: PUSH
28611: LD_INT 21
28613: PUSH
28614: LD_INT 1
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PPUSH
28621: CALL_OW 69
28625: PUSH
28626: FOR_IN
28627: IFFALSE 28679
// if IsSelected ( i ) then
28629: LD_VAR 0 2
28633: PPUSH
28634: CALL_OW 306
28638: IFFALSE 28677
// begin for j := 1 to 4 do
28640: LD_ADDR_VAR 0 3
28644: PUSH
28645: DOUBLE
28646: LD_INT 1
28648: DEC
28649: ST_TO_ADDR
28650: LD_INT 4
28652: PUSH
28653: FOR_TO
28654: IFFALSE 28675
// SetSkill ( i , j , 10 ) ;
28656: LD_VAR 0 2
28660: PPUSH
28661: LD_VAR 0 3
28665: PPUSH
28666: LD_INT 10
28668: PPUSH
28669: CALL_OW 237
28673: GO 28653
28675: POP
28676: POP
// end ;
28677: GO 28626
28679: POP
28680: POP
// end ;
28681: LD_VAR 0 1
28685: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
28686: LD_INT 0
28688: PPUSH
28689: PPUSH
28690: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
28691: LD_ADDR_VAR 0 2
28695: PUSH
28696: LD_INT 22
28698: PUSH
28699: LD_OWVAR 2
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: PUSH
28708: LD_INT 21
28710: PUSH
28711: LD_INT 1
28713: PUSH
28714: EMPTY
28715: LIST
28716: LIST
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: PPUSH
28722: CALL_OW 69
28726: PUSH
28727: FOR_IN
28728: IFFALSE 28769
// begin for j := 1 to 4 do
28730: LD_ADDR_VAR 0 3
28734: PUSH
28735: DOUBLE
28736: LD_INT 1
28738: DEC
28739: ST_TO_ADDR
28740: LD_INT 4
28742: PUSH
28743: FOR_TO
28744: IFFALSE 28765
// SetSkill ( i , j , 10 ) ;
28746: LD_VAR 0 2
28750: PPUSH
28751: LD_VAR 0 3
28755: PPUSH
28756: LD_INT 10
28758: PPUSH
28759: CALL_OW 237
28763: GO 28743
28765: POP
28766: POP
// end ;
28767: GO 28727
28769: POP
28770: POP
// end ;
28771: LD_VAR 0 1
28775: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
28776: LD_INT 0
28778: PPUSH
// uc_side := your_side ;
28779: LD_ADDR_OWVAR 20
28783: PUSH
28784: LD_OWVAR 2
28788: ST_TO_ADDR
// uc_nation := nation ;
28789: LD_ADDR_OWVAR 21
28793: PUSH
28794: LD_VAR 0 1
28798: ST_TO_ADDR
// InitHc ;
28799: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
28803: LD_INT 0
28805: PPUSH
28806: LD_VAR 0 2
28810: PPUSH
28811: LD_VAR 0 3
28815: PPUSH
28816: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
28820: LD_VAR 0 4
28824: PPUSH
28825: LD_VAR 0 5
28829: PPUSH
28830: CALL_OW 428
28834: PUSH
28835: LD_INT 0
28837: EQUAL
28838: IFFALSE 28862
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
28840: CALL_OW 44
28844: PPUSH
28845: LD_VAR 0 4
28849: PPUSH
28850: LD_VAR 0 5
28854: PPUSH
28855: LD_INT 1
28857: PPUSH
28858: CALL_OW 48
// end ;
28862: LD_VAR 0 6
28866: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
28867: LD_INT 0
28869: PPUSH
28870: PPUSH
// uc_side := your_side ;
28871: LD_ADDR_OWVAR 20
28875: PUSH
28876: LD_OWVAR 2
28880: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
28881: LD_VAR 0 1
28885: PUSH
28886: LD_INT 1
28888: PUSH
28889: LD_INT 2
28891: PUSH
28892: LD_INT 3
28894: PUSH
28895: LD_INT 4
28897: PUSH
28898: LD_INT 5
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: LIST
28905: LIST
28906: LIST
28907: IN
28908: IFFALSE 28920
// uc_nation := nation_american else
28910: LD_ADDR_OWVAR 21
28914: PUSH
28915: LD_INT 1
28917: ST_TO_ADDR
28918: GO 28963
// if chassis in [ 11 , 12 , 13 , 14 ] then
28920: LD_VAR 0 1
28924: PUSH
28925: LD_INT 11
28927: PUSH
28928: LD_INT 12
28930: PUSH
28931: LD_INT 13
28933: PUSH
28934: LD_INT 14
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: LIST
28941: LIST
28942: IN
28943: IFFALSE 28955
// uc_nation := nation_arabian else
28945: LD_ADDR_OWVAR 21
28949: PUSH
28950: LD_INT 2
28952: ST_TO_ADDR
28953: GO 28963
// uc_nation := nation_russian ;
28955: LD_ADDR_OWVAR 21
28959: PUSH
28960: LD_INT 3
28962: ST_TO_ADDR
// vc_chassis := chassis ;
28963: LD_ADDR_OWVAR 37
28967: PUSH
28968: LD_VAR 0 1
28972: ST_TO_ADDR
// vc_engine := engine ;
28973: LD_ADDR_OWVAR 39
28977: PUSH
28978: LD_VAR 0 2
28982: ST_TO_ADDR
// vc_control := control ;
28983: LD_ADDR_OWVAR 38
28987: PUSH
28988: LD_VAR 0 3
28992: ST_TO_ADDR
// vc_weapon := weapon ;
28993: LD_ADDR_OWVAR 40
28997: PUSH
28998: LD_VAR 0 4
29002: ST_TO_ADDR
// un := CreateVehicle ;
29003: LD_ADDR_VAR 0 8
29007: PUSH
29008: CALL_OW 45
29012: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
29013: LD_VAR 0 8
29017: PPUSH
29018: LD_INT 0
29020: PPUSH
29021: LD_INT 5
29023: PPUSH
29024: CALL_OW 12
29028: PPUSH
29029: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
29033: LD_VAR 0 8
29037: PPUSH
29038: LD_VAR 0 5
29042: PPUSH
29043: LD_VAR 0 6
29047: PPUSH
29048: LD_INT 1
29050: PPUSH
29051: CALL_OW 48
// end ;
29055: LD_VAR 0 7
29059: RET
// export hInvincible ; every 1 do
29060: GO 29062
29062: DISABLE
// hInvincible := [ ] ;
29063: LD_ADDR_EXP 113
29067: PUSH
29068: EMPTY
29069: ST_TO_ADDR
29070: END
// every 10 do var i ;
29071: GO 29073
29073: DISABLE
29074: LD_INT 0
29076: PPUSH
// begin enable ;
29077: ENABLE
// if not hInvincible then
29078: LD_EXP 113
29082: NOT
29083: IFFALSE 29087
// exit ;
29085: GO 29131
// for i in hInvincible do
29087: LD_ADDR_VAR 0 1
29091: PUSH
29092: LD_EXP 113
29096: PUSH
29097: FOR_IN
29098: IFFALSE 29129
// if GetLives ( i ) < 1000 then
29100: LD_VAR 0 1
29104: PPUSH
29105: CALL_OW 256
29109: PUSH
29110: LD_INT 1000
29112: LESS
29113: IFFALSE 29127
// SetLives ( i , 1000 ) ;
29115: LD_VAR 0 1
29119: PPUSH
29120: LD_INT 1000
29122: PPUSH
29123: CALL_OW 234
29127: GO 29097
29129: POP
29130: POP
// end ;
29131: PPOPN 1
29133: END
// export function hHackInvincible ; var i ; begin
29134: LD_INT 0
29136: PPUSH
29137: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
29138: LD_ADDR_VAR 0 2
29142: PUSH
29143: LD_INT 2
29145: PUSH
29146: LD_INT 21
29148: PUSH
29149: LD_INT 1
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: PUSH
29156: LD_INT 21
29158: PUSH
29159: LD_INT 2
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: PUSH
29166: EMPTY
29167: LIST
29168: LIST
29169: LIST
29170: PPUSH
29171: CALL_OW 69
29175: PUSH
29176: FOR_IN
29177: IFFALSE 29238
// if IsSelected ( i ) then
29179: LD_VAR 0 2
29183: PPUSH
29184: CALL_OW 306
29188: IFFALSE 29236
// begin if i in hInvincible then
29190: LD_VAR 0 2
29194: PUSH
29195: LD_EXP 113
29199: IN
29200: IFFALSE 29220
// hInvincible := hInvincible diff i else
29202: LD_ADDR_EXP 113
29206: PUSH
29207: LD_EXP 113
29211: PUSH
29212: LD_VAR 0 2
29216: DIFF
29217: ST_TO_ADDR
29218: GO 29236
// hInvincible := hInvincible union i ;
29220: LD_ADDR_EXP 113
29224: PUSH
29225: LD_EXP 113
29229: PUSH
29230: LD_VAR 0 2
29234: UNION
29235: ST_TO_ADDR
// end ;
29236: GO 29176
29238: POP
29239: POP
// end ;
29240: LD_VAR 0 1
29244: RET
// export function hHackInvisible ; var i , j ; begin
29245: LD_INT 0
29247: PPUSH
29248: PPUSH
29249: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29250: LD_ADDR_VAR 0 2
29254: PUSH
29255: LD_INT 21
29257: PUSH
29258: LD_INT 1
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: PPUSH
29265: CALL_OW 69
29269: PUSH
29270: FOR_IN
29271: IFFALSE 29295
// if IsSelected ( i ) then
29273: LD_VAR 0 2
29277: PPUSH
29278: CALL_OW 306
29282: IFFALSE 29293
// ComForceInvisible ( i ) ;
29284: LD_VAR 0 2
29288: PPUSH
29289: CALL_OW 496
29293: GO 29270
29295: POP
29296: POP
// end ;
29297: LD_VAR 0 1
29301: RET
// export function hHackChangeYourSide ; begin
29302: LD_INT 0
29304: PPUSH
// if your_side = 8 then
29305: LD_OWVAR 2
29309: PUSH
29310: LD_INT 8
29312: EQUAL
29313: IFFALSE 29325
// your_side := 0 else
29315: LD_ADDR_OWVAR 2
29319: PUSH
29320: LD_INT 0
29322: ST_TO_ADDR
29323: GO 29339
// your_side := your_side + 1 ;
29325: LD_ADDR_OWVAR 2
29329: PUSH
29330: LD_OWVAR 2
29334: PUSH
29335: LD_INT 1
29337: PLUS
29338: ST_TO_ADDR
// end ;
29339: LD_VAR 0 1
29343: RET
// export function hHackChangeUnitSide ; var i , j ; begin
29344: LD_INT 0
29346: PPUSH
29347: PPUSH
29348: PPUSH
// for i in all_units do
29349: LD_ADDR_VAR 0 2
29353: PUSH
29354: LD_OWVAR 3
29358: PUSH
29359: FOR_IN
29360: IFFALSE 29438
// if IsSelected ( i ) then
29362: LD_VAR 0 2
29366: PPUSH
29367: CALL_OW 306
29371: IFFALSE 29436
// begin j := GetSide ( i ) ;
29373: LD_ADDR_VAR 0 3
29377: PUSH
29378: LD_VAR 0 2
29382: PPUSH
29383: CALL_OW 255
29387: ST_TO_ADDR
// if j = 8 then
29388: LD_VAR 0 3
29392: PUSH
29393: LD_INT 8
29395: EQUAL
29396: IFFALSE 29408
// j := 0 else
29398: LD_ADDR_VAR 0 3
29402: PUSH
29403: LD_INT 0
29405: ST_TO_ADDR
29406: GO 29422
// j := j + 1 ;
29408: LD_ADDR_VAR 0 3
29412: PUSH
29413: LD_VAR 0 3
29417: PUSH
29418: LD_INT 1
29420: PLUS
29421: ST_TO_ADDR
// SetSide ( i , j ) ;
29422: LD_VAR 0 2
29426: PPUSH
29427: LD_VAR 0 3
29431: PPUSH
29432: CALL_OW 235
// end ;
29436: GO 29359
29438: POP
29439: POP
// end ;
29440: LD_VAR 0 1
29444: RET
// export function hHackFog ; begin
29445: LD_INT 0
29447: PPUSH
// FogOff ( true ) ;
29448: LD_INT 1
29450: PPUSH
29451: CALL_OW 344
// end ;
29455: LD_VAR 0 1
29459: RET
// export function hHackTeleport ( unit , x , y ) ; begin
29460: LD_INT 0
29462: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
29463: LD_VAR 0 1
29467: PPUSH
29468: LD_VAR 0 2
29472: PPUSH
29473: LD_VAR 0 3
29477: PPUSH
29478: LD_INT 1
29480: PPUSH
29481: LD_INT 1
29483: PPUSH
29484: CALL_OW 483
// CenterOnXY ( x , y ) ;
29488: LD_VAR 0 2
29492: PPUSH
29493: LD_VAR 0 3
29497: PPUSH
29498: CALL_OW 84
// end ;
29502: LD_VAR 0 4
29506: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
29507: LD_INT 0
29509: PPUSH
29510: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
29511: LD_VAR 0 1
29515: NOT
29516: PUSH
29517: LD_VAR 0 2
29521: PPUSH
29522: LD_VAR 0 3
29526: PPUSH
29527: CALL_OW 488
29531: NOT
29532: OR
29533: PUSH
29534: LD_VAR 0 1
29538: PPUSH
29539: CALL_OW 266
29543: PUSH
29544: LD_INT 3
29546: NONEQUAL
29547: PUSH
29548: LD_VAR 0 1
29552: PPUSH
29553: CALL_OW 247
29557: PUSH
29558: LD_INT 1
29560: EQUAL
29561: NOT
29562: AND
29563: OR
29564: IFFALSE 29568
// exit ;
29566: GO 29717
// if GetType ( factory ) = unit_human then
29568: LD_VAR 0 1
29572: PPUSH
29573: CALL_OW 247
29577: PUSH
29578: LD_INT 1
29580: EQUAL
29581: IFFALSE 29598
// factory := IsInUnit ( factory ) ;
29583: LD_ADDR_VAR 0 1
29587: PUSH
29588: LD_VAR 0 1
29592: PPUSH
29593: CALL_OW 310
29597: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
29598: LD_VAR 0 1
29602: PPUSH
29603: CALL_OW 266
29607: PUSH
29608: LD_INT 3
29610: NONEQUAL
29611: IFFALSE 29615
// exit ;
29613: GO 29717
// if HexInfo ( x , y ) = factory then
29615: LD_VAR 0 2
29619: PPUSH
29620: LD_VAR 0 3
29624: PPUSH
29625: CALL_OW 428
29629: PUSH
29630: LD_VAR 0 1
29634: EQUAL
29635: IFFALSE 29662
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
29637: LD_ADDR_EXP 114
29641: PUSH
29642: LD_EXP 114
29646: PPUSH
29647: LD_VAR 0 1
29651: PPUSH
29652: LD_INT 0
29654: PPUSH
29655: CALL_OW 1
29659: ST_TO_ADDR
29660: GO 29713
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
29662: LD_ADDR_EXP 114
29666: PUSH
29667: LD_EXP 114
29671: PPUSH
29672: LD_VAR 0 1
29676: PPUSH
29677: LD_VAR 0 1
29681: PPUSH
29682: CALL_OW 255
29686: PUSH
29687: LD_VAR 0 1
29691: PUSH
29692: LD_VAR 0 2
29696: PUSH
29697: LD_VAR 0 3
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: LIST
29706: LIST
29707: PPUSH
29708: CALL_OW 1
29712: ST_TO_ADDR
// UpdateFactoryWaypoints ;
29713: CALL 29722 0 0
// end ;
29717: LD_VAR 0 4
29721: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
29722: LD_INT 0
29724: PPUSH
29725: PPUSH
29726: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
29727: LD_STRING resetFactoryWaypoint();
29729: PPUSH
29730: CALL_OW 559
// if factoryWaypoints then
29734: LD_EXP 114
29738: IFFALSE 29864
// begin list := PrepareArray ( factoryWaypoints ) ;
29740: LD_ADDR_VAR 0 3
29744: PUSH
29745: LD_EXP 114
29749: PPUSH
29750: CALL 76296 0 1
29754: ST_TO_ADDR
// for i := 1 to list do
29755: LD_ADDR_VAR 0 2
29759: PUSH
29760: DOUBLE
29761: LD_INT 1
29763: DEC
29764: ST_TO_ADDR
29765: LD_VAR 0 3
29769: PUSH
29770: FOR_TO
29771: IFFALSE 29862
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
29773: LD_STRING setFactoryWaypointXY(
29775: PUSH
29776: LD_VAR 0 3
29780: PUSH
29781: LD_VAR 0 2
29785: ARRAY
29786: PUSH
29787: LD_INT 1
29789: ARRAY
29790: STR
29791: PUSH
29792: LD_STRING ,
29794: STR
29795: PUSH
29796: LD_VAR 0 3
29800: PUSH
29801: LD_VAR 0 2
29805: ARRAY
29806: PUSH
29807: LD_INT 2
29809: ARRAY
29810: STR
29811: PUSH
29812: LD_STRING ,
29814: STR
29815: PUSH
29816: LD_VAR 0 3
29820: PUSH
29821: LD_VAR 0 2
29825: ARRAY
29826: PUSH
29827: LD_INT 3
29829: ARRAY
29830: STR
29831: PUSH
29832: LD_STRING ,
29834: STR
29835: PUSH
29836: LD_VAR 0 3
29840: PUSH
29841: LD_VAR 0 2
29845: ARRAY
29846: PUSH
29847: LD_INT 4
29849: ARRAY
29850: STR
29851: PUSH
29852: LD_STRING )
29854: STR
29855: PPUSH
29856: CALL_OW 559
29860: GO 29770
29862: POP
29863: POP
// end ; end ;
29864: LD_VAR 0 1
29868: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
29869: LD_INT 0
29871: PPUSH
// if HexInfo ( x , y ) = warehouse then
29872: LD_VAR 0 2
29876: PPUSH
29877: LD_VAR 0 3
29881: PPUSH
29882: CALL_OW 428
29886: PUSH
29887: LD_VAR 0 1
29891: EQUAL
29892: IFFALSE 29919
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
29894: LD_ADDR_EXP 115
29898: PUSH
29899: LD_EXP 115
29903: PPUSH
29904: LD_VAR 0 1
29908: PPUSH
29909: LD_INT 0
29911: PPUSH
29912: CALL_OW 1
29916: ST_TO_ADDR
29917: GO 29970
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
29919: LD_ADDR_EXP 115
29923: PUSH
29924: LD_EXP 115
29928: PPUSH
29929: LD_VAR 0 1
29933: PPUSH
29934: LD_VAR 0 1
29938: PPUSH
29939: CALL_OW 255
29943: PUSH
29944: LD_VAR 0 1
29948: PUSH
29949: LD_VAR 0 2
29953: PUSH
29954: LD_VAR 0 3
29958: PUSH
29959: EMPTY
29960: LIST
29961: LIST
29962: LIST
29963: LIST
29964: PPUSH
29965: CALL_OW 1
29969: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
29970: CALL 29979 0 0
// end ;
29974: LD_VAR 0 4
29978: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
29979: LD_INT 0
29981: PPUSH
29982: PPUSH
29983: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
29984: LD_STRING resetWarehouseGatheringPoints();
29986: PPUSH
29987: CALL_OW 559
// if warehouseGatheringPoints then
29991: LD_EXP 115
29995: IFFALSE 30121
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
29997: LD_ADDR_VAR 0 3
30001: PUSH
30002: LD_EXP 115
30006: PPUSH
30007: CALL 76296 0 1
30011: ST_TO_ADDR
// for i := 1 to list do
30012: LD_ADDR_VAR 0 2
30016: PUSH
30017: DOUBLE
30018: LD_INT 1
30020: DEC
30021: ST_TO_ADDR
30022: LD_VAR 0 3
30026: PUSH
30027: FOR_TO
30028: IFFALSE 30119
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
30030: LD_STRING setWarehouseGatheringPointXY(
30032: PUSH
30033: LD_VAR 0 3
30037: PUSH
30038: LD_VAR 0 2
30042: ARRAY
30043: PUSH
30044: LD_INT 1
30046: ARRAY
30047: STR
30048: PUSH
30049: LD_STRING ,
30051: STR
30052: PUSH
30053: LD_VAR 0 3
30057: PUSH
30058: LD_VAR 0 2
30062: ARRAY
30063: PUSH
30064: LD_INT 2
30066: ARRAY
30067: STR
30068: PUSH
30069: LD_STRING ,
30071: STR
30072: PUSH
30073: LD_VAR 0 3
30077: PUSH
30078: LD_VAR 0 2
30082: ARRAY
30083: PUSH
30084: LD_INT 3
30086: ARRAY
30087: STR
30088: PUSH
30089: LD_STRING ,
30091: STR
30092: PUSH
30093: LD_VAR 0 3
30097: PUSH
30098: LD_VAR 0 2
30102: ARRAY
30103: PUSH
30104: LD_INT 4
30106: ARRAY
30107: STR
30108: PUSH
30109: LD_STRING )
30111: STR
30112: PPUSH
30113: CALL_OW 559
30117: GO 30027
30119: POP
30120: POP
// end ; end ;
30121: LD_VAR 0 1
30125: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
30126: LD_EXP 115
30130: IFFALSE 30817
30132: GO 30134
30134: DISABLE
30135: LD_INT 0
30137: PPUSH
30138: PPUSH
30139: PPUSH
30140: PPUSH
30141: PPUSH
30142: PPUSH
30143: PPUSH
30144: PPUSH
30145: PPUSH
// begin enable ;
30146: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
30147: LD_ADDR_VAR 0 3
30151: PUSH
30152: LD_EXP 115
30156: PPUSH
30157: CALL 76296 0 1
30161: ST_TO_ADDR
// if not list then
30162: LD_VAR 0 3
30166: NOT
30167: IFFALSE 30171
// exit ;
30169: GO 30817
// for i := 1 to list do
30171: LD_ADDR_VAR 0 1
30175: PUSH
30176: DOUBLE
30177: LD_INT 1
30179: DEC
30180: ST_TO_ADDR
30181: LD_VAR 0 3
30185: PUSH
30186: FOR_TO
30187: IFFALSE 30815
// begin depot := list [ i ] [ 2 ] ;
30189: LD_ADDR_VAR 0 8
30193: PUSH
30194: LD_VAR 0 3
30198: PUSH
30199: LD_VAR 0 1
30203: ARRAY
30204: PUSH
30205: LD_INT 2
30207: ARRAY
30208: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
30209: LD_ADDR_VAR 0 5
30213: PUSH
30214: LD_VAR 0 3
30218: PUSH
30219: LD_VAR 0 1
30223: ARRAY
30224: PUSH
30225: LD_INT 1
30227: ARRAY
30228: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
30229: LD_VAR 0 8
30233: PPUSH
30234: CALL_OW 301
30238: PUSH
30239: LD_VAR 0 5
30243: PUSH
30244: LD_VAR 0 8
30248: PPUSH
30249: CALL_OW 255
30253: NONEQUAL
30254: OR
30255: IFFALSE 30284
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
30257: LD_ADDR_EXP 115
30261: PUSH
30262: LD_EXP 115
30266: PPUSH
30267: LD_VAR 0 8
30271: PPUSH
30272: LD_INT 0
30274: PPUSH
30275: CALL_OW 1
30279: ST_TO_ADDR
// exit ;
30280: POP
30281: POP
30282: GO 30817
// end ; x := list [ i ] [ 3 ] ;
30284: LD_ADDR_VAR 0 6
30288: PUSH
30289: LD_VAR 0 3
30293: PUSH
30294: LD_VAR 0 1
30298: ARRAY
30299: PUSH
30300: LD_INT 3
30302: ARRAY
30303: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
30304: LD_ADDR_VAR 0 7
30308: PUSH
30309: LD_VAR 0 3
30313: PUSH
30314: LD_VAR 0 1
30318: ARRAY
30319: PUSH
30320: LD_INT 4
30322: ARRAY
30323: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
30324: LD_ADDR_VAR 0 9
30328: PUSH
30329: LD_VAR 0 6
30333: PPUSH
30334: LD_VAR 0 7
30338: PPUSH
30339: LD_INT 16
30341: PPUSH
30342: CALL 74880 0 3
30346: ST_TO_ADDR
// if not cratesNearbyPoint then
30347: LD_VAR 0 9
30351: NOT
30352: IFFALSE 30358
// exit ;
30354: POP
30355: POP
30356: GO 30817
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
30358: LD_ADDR_VAR 0 4
30362: PUSH
30363: LD_INT 22
30365: PUSH
30366: LD_VAR 0 5
30370: PUSH
30371: EMPTY
30372: LIST
30373: LIST
30374: PUSH
30375: LD_INT 3
30377: PUSH
30378: LD_INT 60
30380: PUSH
30381: EMPTY
30382: LIST
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: PUSH
30388: LD_INT 91
30390: PUSH
30391: LD_VAR 0 8
30395: PUSH
30396: LD_INT 6
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: LIST
30403: PUSH
30404: LD_INT 2
30406: PUSH
30407: LD_INT 25
30409: PUSH
30410: LD_INT 2
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: PUSH
30417: LD_INT 25
30419: PUSH
30420: LD_INT 16
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: LIST
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: LIST
30436: LIST
30437: PPUSH
30438: CALL_OW 69
30442: PUSH
30443: LD_VAR 0 8
30447: PPUSH
30448: CALL_OW 313
30452: PPUSH
30453: LD_INT 3
30455: PUSH
30456: LD_INT 60
30458: PUSH
30459: EMPTY
30460: LIST
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: PUSH
30466: LD_INT 2
30468: PUSH
30469: LD_INT 25
30471: PUSH
30472: LD_INT 2
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PUSH
30479: LD_INT 25
30481: PUSH
30482: LD_INT 16
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: LIST
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: PPUSH
30498: CALL_OW 72
30502: UNION
30503: ST_TO_ADDR
// if tmp then
30504: LD_VAR 0 4
30508: IFFALSE 30588
// begin tmp := ShrinkArray ( tmp , 3 ) ;
30510: LD_ADDR_VAR 0 4
30514: PUSH
30515: LD_VAR 0 4
30519: PPUSH
30520: LD_INT 3
30522: PPUSH
30523: CALL 72847 0 2
30527: ST_TO_ADDR
// for j in tmp do
30528: LD_ADDR_VAR 0 2
30532: PUSH
30533: LD_VAR 0 4
30537: PUSH
30538: FOR_IN
30539: IFFALSE 30582
// begin if IsInUnit ( j ) then
30541: LD_VAR 0 2
30545: PPUSH
30546: CALL_OW 310
30550: IFFALSE 30561
// ComExit ( j ) ;
30552: LD_VAR 0 2
30556: PPUSH
30557: CALL 72930 0 1
// AddComCollect ( j , x , y ) ;
30561: LD_VAR 0 2
30565: PPUSH
30566: LD_VAR 0 6
30570: PPUSH
30571: LD_VAR 0 7
30575: PPUSH
30576: CALL_OW 177
// end ;
30580: GO 30538
30582: POP
30583: POP
// exit ;
30584: POP
30585: POP
30586: GO 30817
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
30588: LD_ADDR_VAR 0 4
30592: PUSH
30593: LD_INT 22
30595: PUSH
30596: LD_VAR 0 5
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: PUSH
30605: LD_INT 91
30607: PUSH
30608: LD_VAR 0 8
30612: PUSH
30613: LD_INT 8
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: LIST
30620: PUSH
30621: LD_INT 2
30623: PUSH
30624: LD_INT 34
30626: PUSH
30627: LD_INT 12
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: PUSH
30634: LD_INT 34
30636: PUSH
30637: LD_INT 51
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: PUSH
30644: LD_INT 34
30646: PUSH
30647: LD_INT 32
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: PUSH
30654: LD_INT 34
30656: PUSH
30657: LD_EXP 39
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: LIST
30677: PPUSH
30678: CALL_OW 69
30682: ST_TO_ADDR
// if tmp then
30683: LD_VAR 0 4
30687: IFFALSE 30813
// begin for j in tmp do
30689: LD_ADDR_VAR 0 2
30693: PUSH
30694: LD_VAR 0 4
30698: PUSH
30699: FOR_IN
30700: IFFALSE 30811
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
30702: LD_VAR 0 2
30706: PPUSH
30707: CALL_OW 262
30711: PUSH
30712: LD_INT 3
30714: EQUAL
30715: PUSH
30716: LD_VAR 0 2
30720: PPUSH
30721: CALL_OW 261
30725: PUSH
30726: LD_INT 20
30728: GREATER
30729: OR
30730: PUSH
30731: LD_VAR 0 2
30735: PPUSH
30736: CALL_OW 314
30740: NOT
30741: AND
30742: PUSH
30743: LD_VAR 0 2
30747: PPUSH
30748: CALL_OW 263
30752: PUSH
30753: LD_INT 1
30755: NONEQUAL
30756: PUSH
30757: LD_VAR 0 2
30761: PPUSH
30762: CALL_OW 311
30766: OR
30767: AND
30768: IFFALSE 30809
// begin ComCollect ( j , x , y ) ;
30770: LD_VAR 0 2
30774: PPUSH
30775: LD_VAR 0 6
30779: PPUSH
30780: LD_VAR 0 7
30784: PPUSH
30785: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
30789: LD_VAR 0 2
30793: PPUSH
30794: LD_VAR 0 8
30798: PPUSH
30799: CALL_OW 172
// exit ;
30803: POP
30804: POP
30805: POP
30806: POP
30807: GO 30817
// end ;
30809: GO 30699
30811: POP
30812: POP
// end ; end ;
30813: GO 30186
30815: POP
30816: POP
// end ; end_of_file
30817: PPOPN 9
30819: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
30820: LD_INT 0
30822: PPUSH
30823: PPUSH
30824: PPUSH
30825: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
30826: LD_VAR 0 1
30830: PPUSH
30831: CALL_OW 264
30835: PUSH
30836: LD_EXP 42
30840: EQUAL
30841: IFFALSE 30913
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
30843: LD_INT 68
30845: PPUSH
30846: LD_VAR 0 1
30850: PPUSH
30851: CALL_OW 255
30855: PPUSH
30856: CALL_OW 321
30860: PUSH
30861: LD_INT 2
30863: EQUAL
30864: IFFALSE 30876
// eff := 70 else
30866: LD_ADDR_VAR 0 4
30870: PUSH
30871: LD_INT 70
30873: ST_TO_ADDR
30874: GO 30884
// eff := 30 ;
30876: LD_ADDR_VAR 0 4
30880: PUSH
30881: LD_INT 30
30883: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
30884: LD_VAR 0 1
30888: PPUSH
30889: CALL_OW 250
30893: PPUSH
30894: LD_VAR 0 1
30898: PPUSH
30899: CALL_OW 251
30903: PPUSH
30904: LD_VAR 0 4
30908: PPUSH
30909: CALL_OW 495
// end ; end ;
30913: LD_VAR 0 2
30917: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
30918: LD_INT 0
30920: PPUSH
// end ;
30921: LD_VAR 0 4
30925: RET
// export function SOS_Command ( cmd ) ; begin
30926: LD_INT 0
30928: PPUSH
// end ;
30929: LD_VAR 0 2
30933: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
30934: LD_INT 0
30936: PPUSH
// end ;
30937: LD_VAR 0 6
30941: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
30942: LD_INT 0
30944: PPUSH
30945: PPUSH
// if not vehicle or not factory then
30946: LD_VAR 0 1
30950: NOT
30951: PUSH
30952: LD_VAR 0 2
30956: NOT
30957: OR
30958: IFFALSE 30962
// exit ;
30960: GO 31193
// if factoryWaypoints >= factory then
30962: LD_EXP 114
30966: PUSH
30967: LD_VAR 0 2
30971: GREATEREQUAL
30972: IFFALSE 31193
// if factoryWaypoints [ factory ] then
30974: LD_EXP 114
30978: PUSH
30979: LD_VAR 0 2
30983: ARRAY
30984: IFFALSE 31193
// begin if GetControl ( vehicle ) = control_manual then
30986: LD_VAR 0 1
30990: PPUSH
30991: CALL_OW 263
30995: PUSH
30996: LD_INT 1
30998: EQUAL
30999: IFFALSE 31080
// begin driver := IsDrivenBy ( vehicle ) ;
31001: LD_ADDR_VAR 0 4
31005: PUSH
31006: LD_VAR 0 1
31010: PPUSH
31011: CALL_OW 311
31015: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
31016: LD_VAR 0 4
31020: PPUSH
31021: LD_EXP 114
31025: PUSH
31026: LD_VAR 0 2
31030: ARRAY
31031: PUSH
31032: LD_INT 3
31034: ARRAY
31035: PPUSH
31036: LD_EXP 114
31040: PUSH
31041: LD_VAR 0 2
31045: ARRAY
31046: PUSH
31047: LD_INT 4
31049: ARRAY
31050: PPUSH
31051: CALL_OW 171
// AddComExitVehicle ( driver ) ;
31055: LD_VAR 0 4
31059: PPUSH
31060: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
31064: LD_VAR 0 4
31068: PPUSH
31069: LD_VAR 0 2
31073: PPUSH
31074: CALL_OW 180
// end else
31078: GO 31193
// if GetControl ( vehicle ) = control_remote then
31080: LD_VAR 0 1
31084: PPUSH
31085: CALL_OW 263
31089: PUSH
31090: LD_INT 2
31092: EQUAL
31093: IFFALSE 31154
// begin wait ( 0 0$2 ) ;
31095: LD_INT 70
31097: PPUSH
31098: CALL_OW 67
// if Connect ( vehicle ) then
31102: LD_VAR 0 1
31106: PPUSH
31107: CALL 43241 0 1
31111: IFFALSE 31152
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
31113: LD_VAR 0 1
31117: PPUSH
31118: LD_EXP 114
31122: PUSH
31123: LD_VAR 0 2
31127: ARRAY
31128: PUSH
31129: LD_INT 3
31131: ARRAY
31132: PPUSH
31133: LD_EXP 114
31137: PUSH
31138: LD_VAR 0 2
31142: ARRAY
31143: PUSH
31144: LD_INT 4
31146: ARRAY
31147: PPUSH
31148: CALL_OW 171
// end else
31152: GO 31193
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
31154: LD_VAR 0 1
31158: PPUSH
31159: LD_EXP 114
31163: PUSH
31164: LD_VAR 0 2
31168: ARRAY
31169: PUSH
31170: LD_INT 3
31172: ARRAY
31173: PPUSH
31174: LD_EXP 114
31178: PUSH
31179: LD_VAR 0 2
31183: ARRAY
31184: PUSH
31185: LD_INT 4
31187: ARRAY
31188: PPUSH
31189: CALL_OW 171
// end ; end ;
31193: LD_VAR 0 3
31197: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
31198: LD_INT 0
31200: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
31201: LD_VAR 0 1
31205: PUSH
31206: LD_INT 250
31208: EQUAL
31209: PUSH
31210: LD_VAR 0 2
31214: PPUSH
31215: CALL_OW 264
31219: PUSH
31220: LD_EXP 45
31224: EQUAL
31225: AND
31226: IFFALSE 31247
// MinerPlaceMine ( unit , x , y ) ;
31228: LD_VAR 0 2
31232: PPUSH
31233: LD_VAR 0 4
31237: PPUSH
31238: LD_VAR 0 5
31242: PPUSH
31243: CALL 33646 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
31247: LD_VAR 0 1
31251: PUSH
31252: LD_INT 251
31254: EQUAL
31255: PUSH
31256: LD_VAR 0 2
31260: PPUSH
31261: CALL_OW 264
31265: PUSH
31266: LD_EXP 45
31270: EQUAL
31271: AND
31272: IFFALSE 31293
// MinerDetonateMine ( unit , x , y ) ;
31274: LD_VAR 0 2
31278: PPUSH
31279: LD_VAR 0 4
31283: PPUSH
31284: LD_VAR 0 5
31288: PPUSH
31289: CALL 33923 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
31293: LD_VAR 0 1
31297: PUSH
31298: LD_INT 252
31300: EQUAL
31301: PUSH
31302: LD_VAR 0 2
31306: PPUSH
31307: CALL_OW 264
31311: PUSH
31312: LD_EXP 45
31316: EQUAL
31317: AND
31318: IFFALSE 31339
// MinerCreateMinefield ( unit , x , y ) ;
31320: LD_VAR 0 2
31324: PPUSH
31325: LD_VAR 0 4
31329: PPUSH
31330: LD_VAR 0 5
31334: PPUSH
31335: CALL 34340 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
31339: LD_VAR 0 1
31343: PUSH
31344: LD_INT 253
31346: EQUAL
31347: PUSH
31348: LD_VAR 0 2
31352: PPUSH
31353: CALL_OW 257
31357: PUSH
31358: LD_INT 5
31360: EQUAL
31361: AND
31362: IFFALSE 31383
// ComBinocular ( unit , x , y ) ;
31364: LD_VAR 0 2
31368: PPUSH
31369: LD_VAR 0 4
31373: PPUSH
31374: LD_VAR 0 5
31378: PPUSH
31379: CALL 34711 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
31383: LD_VAR 0 1
31387: PUSH
31388: LD_INT 254
31390: EQUAL
31391: PUSH
31392: LD_VAR 0 2
31396: PPUSH
31397: CALL_OW 264
31401: PUSH
31402: LD_EXP 40
31406: EQUAL
31407: AND
31408: PUSH
31409: LD_VAR 0 3
31413: PPUSH
31414: CALL_OW 263
31418: PUSH
31419: LD_INT 3
31421: EQUAL
31422: AND
31423: IFFALSE 31439
// HackDestroyVehicle ( unit , selectedUnit ) ;
31425: LD_VAR 0 2
31429: PPUSH
31430: LD_VAR 0 3
31434: PPUSH
31435: CALL 33006 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
31439: LD_VAR 0 1
31443: PUSH
31444: LD_INT 255
31446: EQUAL
31447: PUSH
31448: LD_VAR 0 2
31452: PPUSH
31453: CALL_OW 264
31457: PUSH
31458: LD_INT 14
31460: PUSH
31461: LD_INT 53
31463: PUSH
31464: EMPTY
31465: LIST
31466: LIST
31467: IN
31468: AND
31469: PUSH
31470: LD_VAR 0 4
31474: PPUSH
31475: LD_VAR 0 5
31479: PPUSH
31480: CALL_OW 488
31484: AND
31485: IFFALSE 31509
// CutTreeXYR ( unit , x , y , 12 ) ;
31487: LD_VAR 0 2
31491: PPUSH
31492: LD_VAR 0 4
31496: PPUSH
31497: LD_VAR 0 5
31501: PPUSH
31502: LD_INT 12
31504: PPUSH
31505: CALL 31572 0 4
// if cmd = 256 then
31509: LD_VAR 0 1
31513: PUSH
31514: LD_INT 256
31516: EQUAL
31517: IFFALSE 31538
// SetFactoryWaypoint ( unit , x , y ) ;
31519: LD_VAR 0 2
31523: PPUSH
31524: LD_VAR 0 4
31528: PPUSH
31529: LD_VAR 0 5
31533: PPUSH
31534: CALL 29507 0 3
// if cmd = 257 then
31538: LD_VAR 0 1
31542: PUSH
31543: LD_INT 257
31545: EQUAL
31546: IFFALSE 31567
// SetWarehouseGatheringPoint ( unit , x , y ) ;
31548: LD_VAR 0 2
31552: PPUSH
31553: LD_VAR 0 4
31557: PPUSH
31558: LD_VAR 0 5
31562: PPUSH
31563: CALL 29869 0 3
// end ;
31567: LD_VAR 0 6
31571: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
31572: LD_INT 0
31574: PPUSH
31575: PPUSH
31576: PPUSH
31577: PPUSH
31578: PPUSH
31579: PPUSH
31580: PPUSH
31581: PPUSH
31582: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
31583: LD_VAR 0 1
31587: NOT
31588: PUSH
31589: LD_VAR 0 2
31593: PPUSH
31594: LD_VAR 0 3
31598: PPUSH
31599: CALL_OW 488
31603: NOT
31604: OR
31605: PUSH
31606: LD_VAR 0 4
31610: NOT
31611: OR
31612: IFFALSE 31616
// exit ;
31614: GO 31956
// list := [ ] ;
31616: LD_ADDR_VAR 0 13
31620: PUSH
31621: EMPTY
31622: ST_TO_ADDR
// if x - r < 0 then
31623: LD_VAR 0 2
31627: PUSH
31628: LD_VAR 0 4
31632: MINUS
31633: PUSH
31634: LD_INT 0
31636: LESS
31637: IFFALSE 31649
// min_x := 0 else
31639: LD_ADDR_VAR 0 7
31643: PUSH
31644: LD_INT 0
31646: ST_TO_ADDR
31647: GO 31665
// min_x := x - r ;
31649: LD_ADDR_VAR 0 7
31653: PUSH
31654: LD_VAR 0 2
31658: PUSH
31659: LD_VAR 0 4
31663: MINUS
31664: ST_TO_ADDR
// if y - r < 0 then
31665: LD_VAR 0 3
31669: PUSH
31670: LD_VAR 0 4
31674: MINUS
31675: PUSH
31676: LD_INT 0
31678: LESS
31679: IFFALSE 31691
// min_y := 0 else
31681: LD_ADDR_VAR 0 8
31685: PUSH
31686: LD_INT 0
31688: ST_TO_ADDR
31689: GO 31707
// min_y := y - r ;
31691: LD_ADDR_VAR 0 8
31695: PUSH
31696: LD_VAR 0 3
31700: PUSH
31701: LD_VAR 0 4
31705: MINUS
31706: ST_TO_ADDR
// max_x := x + r ;
31707: LD_ADDR_VAR 0 9
31711: PUSH
31712: LD_VAR 0 2
31716: PUSH
31717: LD_VAR 0 4
31721: PLUS
31722: ST_TO_ADDR
// max_y := y + r ;
31723: LD_ADDR_VAR 0 10
31727: PUSH
31728: LD_VAR 0 3
31732: PUSH
31733: LD_VAR 0 4
31737: PLUS
31738: ST_TO_ADDR
// for _x = min_x to max_x do
31739: LD_ADDR_VAR 0 11
31743: PUSH
31744: DOUBLE
31745: LD_VAR 0 7
31749: DEC
31750: ST_TO_ADDR
31751: LD_VAR 0 9
31755: PUSH
31756: FOR_TO
31757: IFFALSE 31874
// for _y = min_y to max_y do
31759: LD_ADDR_VAR 0 12
31763: PUSH
31764: DOUBLE
31765: LD_VAR 0 8
31769: DEC
31770: ST_TO_ADDR
31771: LD_VAR 0 10
31775: PUSH
31776: FOR_TO
31777: IFFALSE 31870
// begin if not ValidHex ( _x , _y ) then
31779: LD_VAR 0 11
31783: PPUSH
31784: LD_VAR 0 12
31788: PPUSH
31789: CALL_OW 488
31793: NOT
31794: IFFALSE 31798
// continue ;
31796: GO 31776
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
31798: LD_VAR 0 11
31802: PPUSH
31803: LD_VAR 0 12
31807: PPUSH
31808: CALL_OW 351
31812: PUSH
31813: LD_VAR 0 11
31817: PPUSH
31818: LD_VAR 0 12
31822: PPUSH
31823: CALL_OW 554
31827: AND
31828: IFFALSE 31868
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
31830: LD_ADDR_VAR 0 13
31834: PUSH
31835: LD_VAR 0 13
31839: PPUSH
31840: LD_VAR 0 13
31844: PUSH
31845: LD_INT 1
31847: PLUS
31848: PPUSH
31849: LD_VAR 0 11
31853: PUSH
31854: LD_VAR 0 12
31858: PUSH
31859: EMPTY
31860: LIST
31861: LIST
31862: PPUSH
31863: CALL_OW 2
31867: ST_TO_ADDR
// end ;
31868: GO 31776
31870: POP
31871: POP
31872: GO 31756
31874: POP
31875: POP
// if not list then
31876: LD_VAR 0 13
31880: NOT
31881: IFFALSE 31885
// exit ;
31883: GO 31956
// for i in list do
31885: LD_ADDR_VAR 0 6
31889: PUSH
31890: LD_VAR 0 13
31894: PUSH
31895: FOR_IN
31896: IFFALSE 31954
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
31898: LD_VAR 0 1
31902: PPUSH
31903: LD_STRING M
31905: PUSH
31906: LD_VAR 0 6
31910: PUSH
31911: LD_INT 1
31913: ARRAY
31914: PUSH
31915: LD_VAR 0 6
31919: PUSH
31920: LD_INT 2
31922: ARRAY
31923: PUSH
31924: LD_INT 0
31926: PUSH
31927: LD_INT 0
31929: PUSH
31930: LD_INT 0
31932: PUSH
31933: LD_INT 0
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: LIST
31940: LIST
31941: LIST
31942: LIST
31943: LIST
31944: PUSH
31945: EMPTY
31946: LIST
31947: PPUSH
31948: CALL_OW 447
31952: GO 31895
31954: POP
31955: POP
// end ;
31956: LD_VAR 0 5
31960: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
31961: LD_EXP 117
31965: NOT
31966: IFFALSE 32016
31968: GO 31970
31970: DISABLE
// begin initHack := true ;
31971: LD_ADDR_EXP 117
31975: PUSH
31976: LD_INT 1
31978: ST_TO_ADDR
// hackTanks := [ ] ;
31979: LD_ADDR_EXP 118
31983: PUSH
31984: EMPTY
31985: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
31986: LD_ADDR_EXP 119
31990: PUSH
31991: EMPTY
31992: ST_TO_ADDR
// hackLimit := 3 ;
31993: LD_ADDR_EXP 120
31997: PUSH
31998: LD_INT 3
32000: ST_TO_ADDR
// hackDist := 12 ;
32001: LD_ADDR_EXP 121
32005: PUSH
32006: LD_INT 12
32008: ST_TO_ADDR
// hackCounter := [ ] ;
32009: LD_ADDR_EXP 122
32013: PUSH
32014: EMPTY
32015: ST_TO_ADDR
// end ;
32016: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
32017: LD_EXP 117
32021: PUSH
32022: LD_INT 34
32024: PUSH
32025: LD_EXP 40
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PPUSH
32034: CALL_OW 69
32038: AND
32039: IFFALSE 32294
32041: GO 32043
32043: DISABLE
32044: LD_INT 0
32046: PPUSH
32047: PPUSH
// begin enable ;
32048: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
32049: LD_ADDR_VAR 0 1
32053: PUSH
32054: LD_INT 34
32056: PUSH
32057: LD_EXP 40
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: PPUSH
32066: CALL_OW 69
32070: PUSH
32071: FOR_IN
32072: IFFALSE 32292
// begin if not i in hackTanks then
32074: LD_VAR 0 1
32078: PUSH
32079: LD_EXP 118
32083: IN
32084: NOT
32085: IFFALSE 32168
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
32087: LD_ADDR_EXP 118
32091: PUSH
32092: LD_EXP 118
32096: PPUSH
32097: LD_EXP 118
32101: PUSH
32102: LD_INT 1
32104: PLUS
32105: PPUSH
32106: LD_VAR 0 1
32110: PPUSH
32111: CALL_OW 1
32115: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
32116: LD_ADDR_EXP 119
32120: PUSH
32121: LD_EXP 119
32125: PPUSH
32126: LD_EXP 119
32130: PUSH
32131: LD_INT 1
32133: PLUS
32134: PPUSH
32135: EMPTY
32136: PPUSH
32137: CALL_OW 1
32141: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
32142: LD_ADDR_EXP 122
32146: PUSH
32147: LD_EXP 122
32151: PPUSH
32152: LD_EXP 122
32156: PUSH
32157: LD_INT 1
32159: PLUS
32160: PPUSH
32161: EMPTY
32162: PPUSH
32163: CALL_OW 1
32167: ST_TO_ADDR
// end ; if not IsOk ( i ) then
32168: LD_VAR 0 1
32172: PPUSH
32173: CALL_OW 302
32177: NOT
32178: IFFALSE 32191
// begin HackUnlinkAll ( i ) ;
32180: LD_VAR 0 1
32184: PPUSH
32185: CALL 32297 0 1
// continue ;
32189: GO 32071
// end ; HackCheckCapturedStatus ( i ) ;
32191: LD_VAR 0 1
32195: PPUSH
32196: CALL 32740 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
32200: LD_ADDR_VAR 0 2
32204: PUSH
32205: LD_INT 81
32207: PUSH
32208: LD_VAR 0 1
32212: PPUSH
32213: CALL_OW 255
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: PUSH
32222: LD_INT 33
32224: PUSH
32225: LD_INT 3
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: PUSH
32232: LD_INT 91
32234: PUSH
32235: LD_VAR 0 1
32239: PUSH
32240: LD_EXP 121
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: LIST
32249: PUSH
32250: LD_INT 50
32252: PUSH
32253: EMPTY
32254: LIST
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: PPUSH
32262: CALL_OW 69
32266: ST_TO_ADDR
// if not tmp then
32267: LD_VAR 0 2
32271: NOT
32272: IFFALSE 32276
// continue ;
32274: GO 32071
// HackLink ( i , tmp ) ;
32276: LD_VAR 0 1
32280: PPUSH
32281: LD_VAR 0 2
32285: PPUSH
32286: CALL 32433 0 2
// end ;
32290: GO 32071
32292: POP
32293: POP
// end ;
32294: PPOPN 2
32296: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
32297: LD_INT 0
32299: PPUSH
32300: PPUSH
32301: PPUSH
// if not hack in hackTanks then
32302: LD_VAR 0 1
32306: PUSH
32307: LD_EXP 118
32311: IN
32312: NOT
32313: IFFALSE 32317
// exit ;
32315: GO 32428
// index := GetElementIndex ( hackTanks , hack ) ;
32317: LD_ADDR_VAR 0 4
32321: PUSH
32322: LD_EXP 118
32326: PPUSH
32327: LD_VAR 0 1
32331: PPUSH
32332: CALL 40055 0 2
32336: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
32337: LD_EXP 119
32341: PUSH
32342: LD_VAR 0 4
32346: ARRAY
32347: IFFALSE 32428
// begin for i in hackTanksCaptured [ index ] do
32349: LD_ADDR_VAR 0 3
32353: PUSH
32354: LD_EXP 119
32358: PUSH
32359: LD_VAR 0 4
32363: ARRAY
32364: PUSH
32365: FOR_IN
32366: IFFALSE 32392
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
32368: LD_VAR 0 3
32372: PUSH
32373: LD_INT 1
32375: ARRAY
32376: PPUSH
32377: LD_VAR 0 3
32381: PUSH
32382: LD_INT 2
32384: ARRAY
32385: PPUSH
32386: CALL_OW 235
32390: GO 32365
32392: POP
32393: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
32394: LD_ADDR_EXP 119
32398: PUSH
32399: LD_EXP 119
32403: PPUSH
32404: LD_VAR 0 4
32408: PPUSH
32409: EMPTY
32410: PPUSH
32411: CALL_OW 1
32415: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
32416: LD_VAR 0 1
32420: PPUSH
32421: LD_INT 0
32423: PPUSH
32424: CALL_OW 505
// end ; end ;
32428: LD_VAR 0 2
32432: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
32433: LD_INT 0
32435: PPUSH
32436: PPUSH
32437: PPUSH
// if not hack in hackTanks or not vehicles then
32438: LD_VAR 0 1
32442: PUSH
32443: LD_EXP 118
32447: IN
32448: NOT
32449: PUSH
32450: LD_VAR 0 2
32454: NOT
32455: OR
32456: IFFALSE 32460
// exit ;
32458: GO 32735
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
32460: LD_ADDR_VAR 0 2
32464: PUSH
32465: LD_VAR 0 1
32469: PPUSH
32470: LD_VAR 0 2
32474: PPUSH
32475: LD_INT 1
32477: PPUSH
32478: LD_INT 1
32480: PPUSH
32481: CALL 40705 0 4
32485: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
32486: LD_ADDR_VAR 0 5
32490: PUSH
32491: LD_EXP 118
32495: PPUSH
32496: LD_VAR 0 1
32500: PPUSH
32501: CALL 40055 0 2
32505: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
32506: LD_EXP 119
32510: PUSH
32511: LD_VAR 0 5
32515: ARRAY
32516: PUSH
32517: LD_EXP 120
32521: LESS
32522: IFFALSE 32711
// begin for i := 1 to vehicles do
32524: LD_ADDR_VAR 0 4
32528: PUSH
32529: DOUBLE
32530: LD_INT 1
32532: DEC
32533: ST_TO_ADDR
32534: LD_VAR 0 2
32538: PUSH
32539: FOR_TO
32540: IFFALSE 32709
// begin if hackTanksCaptured [ index ] = hackLimit then
32542: LD_EXP 119
32546: PUSH
32547: LD_VAR 0 5
32551: ARRAY
32552: PUSH
32553: LD_EXP 120
32557: EQUAL
32558: IFFALSE 32562
// break ;
32560: GO 32709
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
32562: LD_ADDR_EXP 122
32566: PUSH
32567: LD_EXP 122
32571: PPUSH
32572: LD_VAR 0 5
32576: PPUSH
32577: LD_EXP 122
32581: PUSH
32582: LD_VAR 0 5
32586: ARRAY
32587: PUSH
32588: LD_INT 1
32590: PLUS
32591: PPUSH
32592: CALL_OW 1
32596: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
32597: LD_ADDR_EXP 119
32601: PUSH
32602: LD_EXP 119
32606: PPUSH
32607: LD_VAR 0 5
32611: PUSH
32612: LD_EXP 119
32616: PUSH
32617: LD_VAR 0 5
32621: ARRAY
32622: PUSH
32623: LD_INT 1
32625: PLUS
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: PPUSH
32631: LD_VAR 0 2
32635: PUSH
32636: LD_VAR 0 4
32640: ARRAY
32641: PUSH
32642: LD_VAR 0 2
32646: PUSH
32647: LD_VAR 0 4
32651: ARRAY
32652: PPUSH
32653: CALL_OW 255
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PPUSH
32662: CALL 40270 0 3
32666: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
32667: LD_VAR 0 2
32671: PUSH
32672: LD_VAR 0 4
32676: ARRAY
32677: PPUSH
32678: LD_VAR 0 1
32682: PPUSH
32683: CALL_OW 255
32687: PPUSH
32688: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
32692: LD_VAR 0 2
32696: PUSH
32697: LD_VAR 0 4
32701: ARRAY
32702: PPUSH
32703: CALL_OW 141
// end ;
32707: GO 32539
32709: POP
32710: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
32711: LD_VAR 0 1
32715: PPUSH
32716: LD_EXP 119
32720: PUSH
32721: LD_VAR 0 5
32725: ARRAY
32726: PUSH
32727: LD_INT 0
32729: PLUS
32730: PPUSH
32731: CALL_OW 505
// end ;
32735: LD_VAR 0 3
32739: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
32740: LD_INT 0
32742: PPUSH
32743: PPUSH
32744: PPUSH
32745: PPUSH
// if not hack in hackTanks then
32746: LD_VAR 0 1
32750: PUSH
32751: LD_EXP 118
32755: IN
32756: NOT
32757: IFFALSE 32761
// exit ;
32759: GO 33001
// index := GetElementIndex ( hackTanks , hack ) ;
32761: LD_ADDR_VAR 0 4
32765: PUSH
32766: LD_EXP 118
32770: PPUSH
32771: LD_VAR 0 1
32775: PPUSH
32776: CALL 40055 0 2
32780: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
32781: LD_ADDR_VAR 0 3
32785: PUSH
32786: DOUBLE
32787: LD_EXP 119
32791: PUSH
32792: LD_VAR 0 4
32796: ARRAY
32797: INC
32798: ST_TO_ADDR
32799: LD_INT 1
32801: PUSH
32802: FOR_DOWNTO
32803: IFFALSE 32975
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
32805: LD_ADDR_VAR 0 5
32809: PUSH
32810: LD_EXP 119
32814: PUSH
32815: LD_VAR 0 4
32819: ARRAY
32820: PUSH
32821: LD_VAR 0 3
32825: ARRAY
32826: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
32827: LD_VAR 0 5
32831: PUSH
32832: LD_INT 1
32834: ARRAY
32835: PPUSH
32836: CALL_OW 302
32840: NOT
32841: PUSH
32842: LD_VAR 0 5
32846: PUSH
32847: LD_INT 1
32849: ARRAY
32850: PPUSH
32851: CALL_OW 255
32855: PUSH
32856: LD_VAR 0 1
32860: PPUSH
32861: CALL_OW 255
32865: NONEQUAL
32866: OR
32867: IFFALSE 32973
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
32869: LD_VAR 0 5
32873: PUSH
32874: LD_INT 1
32876: ARRAY
32877: PPUSH
32878: CALL_OW 305
32882: PUSH
32883: LD_VAR 0 5
32887: PUSH
32888: LD_INT 1
32890: ARRAY
32891: PPUSH
32892: CALL_OW 255
32896: PUSH
32897: LD_VAR 0 1
32901: PPUSH
32902: CALL_OW 255
32906: EQUAL
32907: AND
32908: IFFALSE 32932
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
32910: LD_VAR 0 5
32914: PUSH
32915: LD_INT 1
32917: ARRAY
32918: PPUSH
32919: LD_VAR 0 5
32923: PUSH
32924: LD_INT 2
32926: ARRAY
32927: PPUSH
32928: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
32932: LD_ADDR_EXP 119
32936: PUSH
32937: LD_EXP 119
32941: PPUSH
32942: LD_VAR 0 4
32946: PPUSH
32947: LD_EXP 119
32951: PUSH
32952: LD_VAR 0 4
32956: ARRAY
32957: PPUSH
32958: LD_VAR 0 3
32962: PPUSH
32963: CALL_OW 3
32967: PPUSH
32968: CALL_OW 1
32972: ST_TO_ADDR
// end ; end ;
32973: GO 32802
32975: POP
32976: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
32977: LD_VAR 0 1
32981: PPUSH
32982: LD_EXP 119
32986: PUSH
32987: LD_VAR 0 4
32991: ARRAY
32992: PUSH
32993: LD_INT 0
32995: PLUS
32996: PPUSH
32997: CALL_OW 505
// end ;
33001: LD_VAR 0 2
33005: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
33006: LD_INT 0
33008: PPUSH
33009: PPUSH
33010: PPUSH
33011: PPUSH
// if not hack in hackTanks then
33012: LD_VAR 0 1
33016: PUSH
33017: LD_EXP 118
33021: IN
33022: NOT
33023: IFFALSE 33027
// exit ;
33025: GO 33112
// index := GetElementIndex ( hackTanks , hack ) ;
33027: LD_ADDR_VAR 0 5
33031: PUSH
33032: LD_EXP 118
33036: PPUSH
33037: LD_VAR 0 1
33041: PPUSH
33042: CALL 40055 0 2
33046: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
33047: LD_ADDR_VAR 0 4
33051: PUSH
33052: DOUBLE
33053: LD_INT 1
33055: DEC
33056: ST_TO_ADDR
33057: LD_EXP 119
33061: PUSH
33062: LD_VAR 0 5
33066: ARRAY
33067: PUSH
33068: FOR_TO
33069: IFFALSE 33110
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
33071: LD_EXP 119
33075: PUSH
33076: LD_VAR 0 5
33080: ARRAY
33081: PUSH
33082: LD_VAR 0 4
33086: ARRAY
33087: PUSH
33088: LD_INT 1
33090: ARRAY
33091: PUSH
33092: LD_VAR 0 2
33096: EQUAL
33097: IFFALSE 33108
// KillUnit ( vehicle ) ;
33099: LD_VAR 0 2
33103: PPUSH
33104: CALL_OW 66
33108: GO 33068
33110: POP
33111: POP
// end ;
33112: LD_VAR 0 3
33116: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
33117: LD_EXP 123
33121: NOT
33122: IFFALSE 33157
33124: GO 33126
33126: DISABLE
// begin initMiner := true ;
33127: LD_ADDR_EXP 123
33131: PUSH
33132: LD_INT 1
33134: ST_TO_ADDR
// minersList := [ ] ;
33135: LD_ADDR_EXP 124
33139: PUSH
33140: EMPTY
33141: ST_TO_ADDR
// minerMinesList := [ ] ;
33142: LD_ADDR_EXP 125
33146: PUSH
33147: EMPTY
33148: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
33149: LD_ADDR_EXP 126
33153: PUSH
33154: LD_INT 5
33156: ST_TO_ADDR
// end ;
33157: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
33158: LD_EXP 123
33162: PUSH
33163: LD_INT 34
33165: PUSH
33166: LD_EXP 45
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PPUSH
33175: CALL_OW 69
33179: AND
33180: IFFALSE 33643
33182: GO 33184
33184: DISABLE
33185: LD_INT 0
33187: PPUSH
33188: PPUSH
33189: PPUSH
33190: PPUSH
// begin enable ;
33191: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
33192: LD_ADDR_VAR 0 1
33196: PUSH
33197: LD_INT 34
33199: PUSH
33200: LD_EXP 45
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PPUSH
33209: CALL_OW 69
33213: PUSH
33214: FOR_IN
33215: IFFALSE 33287
// begin if not i in minersList then
33217: LD_VAR 0 1
33221: PUSH
33222: LD_EXP 124
33226: IN
33227: NOT
33228: IFFALSE 33285
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
33230: LD_ADDR_EXP 124
33234: PUSH
33235: LD_EXP 124
33239: PPUSH
33240: LD_EXP 124
33244: PUSH
33245: LD_INT 1
33247: PLUS
33248: PPUSH
33249: LD_VAR 0 1
33253: PPUSH
33254: CALL_OW 1
33258: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
33259: LD_ADDR_EXP 125
33263: PUSH
33264: LD_EXP 125
33268: PPUSH
33269: LD_EXP 125
33273: PUSH
33274: LD_INT 1
33276: PLUS
33277: PPUSH
33278: EMPTY
33279: PPUSH
33280: CALL_OW 1
33284: ST_TO_ADDR
// end end ;
33285: GO 33214
33287: POP
33288: POP
// for i := minerMinesList downto 1 do
33289: LD_ADDR_VAR 0 1
33293: PUSH
33294: DOUBLE
33295: LD_EXP 125
33299: INC
33300: ST_TO_ADDR
33301: LD_INT 1
33303: PUSH
33304: FOR_DOWNTO
33305: IFFALSE 33641
// begin if IsLive ( minersList [ i ] ) then
33307: LD_EXP 124
33311: PUSH
33312: LD_VAR 0 1
33316: ARRAY
33317: PPUSH
33318: CALL_OW 300
33322: IFFALSE 33350
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
33324: LD_EXP 124
33328: PUSH
33329: LD_VAR 0 1
33333: ARRAY
33334: PPUSH
33335: LD_EXP 125
33339: PUSH
33340: LD_VAR 0 1
33344: ARRAY
33345: PPUSH
33346: CALL_OW 505
// if not minerMinesList [ i ] then
33350: LD_EXP 125
33354: PUSH
33355: LD_VAR 0 1
33359: ARRAY
33360: NOT
33361: IFFALSE 33365
// continue ;
33363: GO 33304
// for j := minerMinesList [ i ] downto 1 do
33365: LD_ADDR_VAR 0 2
33369: PUSH
33370: DOUBLE
33371: LD_EXP 125
33375: PUSH
33376: LD_VAR 0 1
33380: ARRAY
33381: INC
33382: ST_TO_ADDR
33383: LD_INT 1
33385: PUSH
33386: FOR_DOWNTO
33387: IFFALSE 33637
// begin side := GetSide ( minersList [ i ] ) ;
33389: LD_ADDR_VAR 0 3
33393: PUSH
33394: LD_EXP 124
33398: PUSH
33399: LD_VAR 0 1
33403: ARRAY
33404: PPUSH
33405: CALL_OW 255
33409: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
33410: LD_ADDR_VAR 0 4
33414: PUSH
33415: LD_EXP 125
33419: PUSH
33420: LD_VAR 0 1
33424: ARRAY
33425: PUSH
33426: LD_VAR 0 2
33430: ARRAY
33431: PUSH
33432: LD_INT 1
33434: ARRAY
33435: PPUSH
33436: LD_EXP 125
33440: PUSH
33441: LD_VAR 0 1
33445: ARRAY
33446: PUSH
33447: LD_VAR 0 2
33451: ARRAY
33452: PUSH
33453: LD_INT 2
33455: ARRAY
33456: PPUSH
33457: CALL_OW 428
33461: ST_TO_ADDR
// if not tmp then
33462: LD_VAR 0 4
33466: NOT
33467: IFFALSE 33471
// continue ;
33469: GO 33386
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
33471: LD_VAR 0 4
33475: PUSH
33476: LD_INT 81
33478: PUSH
33479: LD_VAR 0 3
33483: PUSH
33484: EMPTY
33485: LIST
33486: LIST
33487: PPUSH
33488: CALL_OW 69
33492: IN
33493: PUSH
33494: LD_EXP 125
33498: PUSH
33499: LD_VAR 0 1
33503: ARRAY
33504: PUSH
33505: LD_VAR 0 2
33509: ARRAY
33510: PUSH
33511: LD_INT 1
33513: ARRAY
33514: PPUSH
33515: LD_EXP 125
33519: PUSH
33520: LD_VAR 0 1
33524: ARRAY
33525: PUSH
33526: LD_VAR 0 2
33530: ARRAY
33531: PUSH
33532: LD_INT 2
33534: ARRAY
33535: PPUSH
33536: CALL_OW 458
33540: AND
33541: IFFALSE 33635
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
33543: LD_EXP 125
33547: PUSH
33548: LD_VAR 0 1
33552: ARRAY
33553: PUSH
33554: LD_VAR 0 2
33558: ARRAY
33559: PUSH
33560: LD_INT 1
33562: ARRAY
33563: PPUSH
33564: LD_EXP 125
33568: PUSH
33569: LD_VAR 0 1
33573: ARRAY
33574: PUSH
33575: LD_VAR 0 2
33579: ARRAY
33580: PUSH
33581: LD_INT 2
33583: ARRAY
33584: PPUSH
33585: LD_VAR 0 3
33589: PPUSH
33590: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
33594: LD_ADDR_EXP 125
33598: PUSH
33599: LD_EXP 125
33603: PPUSH
33604: LD_VAR 0 1
33608: PPUSH
33609: LD_EXP 125
33613: PUSH
33614: LD_VAR 0 1
33618: ARRAY
33619: PPUSH
33620: LD_VAR 0 2
33624: PPUSH
33625: CALL_OW 3
33629: PPUSH
33630: CALL_OW 1
33634: ST_TO_ADDR
// end ; end ;
33635: GO 33386
33637: POP
33638: POP
// end ;
33639: GO 33304
33641: POP
33642: POP
// end ;
33643: PPOPN 4
33645: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
33646: LD_INT 0
33648: PPUSH
33649: PPUSH
// result := false ;
33650: LD_ADDR_VAR 0 4
33654: PUSH
33655: LD_INT 0
33657: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
33658: LD_VAR 0 1
33662: PPUSH
33663: CALL_OW 264
33667: PUSH
33668: LD_EXP 45
33672: EQUAL
33673: NOT
33674: IFFALSE 33678
// exit ;
33676: GO 33918
// index := GetElementIndex ( minersList , unit ) ;
33678: LD_ADDR_VAR 0 5
33682: PUSH
33683: LD_EXP 124
33687: PPUSH
33688: LD_VAR 0 1
33692: PPUSH
33693: CALL 40055 0 2
33697: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
33698: LD_EXP 125
33702: PUSH
33703: LD_VAR 0 5
33707: ARRAY
33708: PUSH
33709: LD_EXP 126
33713: GREATEREQUAL
33714: IFFALSE 33718
// exit ;
33716: GO 33918
// ComMoveXY ( unit , x , y ) ;
33718: LD_VAR 0 1
33722: PPUSH
33723: LD_VAR 0 2
33727: PPUSH
33728: LD_VAR 0 3
33732: PPUSH
33733: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
33737: LD_INT 35
33739: PPUSH
33740: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
33744: LD_VAR 0 1
33748: PPUSH
33749: LD_VAR 0 2
33753: PPUSH
33754: LD_VAR 0 3
33758: PPUSH
33759: CALL 71341 0 3
33763: NOT
33764: PUSH
33765: LD_VAR 0 1
33769: PPUSH
33770: CALL_OW 314
33774: AND
33775: IFFALSE 33779
// exit ;
33777: GO 33918
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
33779: LD_VAR 0 2
33783: PPUSH
33784: LD_VAR 0 3
33788: PPUSH
33789: CALL_OW 428
33793: PUSH
33794: LD_VAR 0 1
33798: EQUAL
33799: PUSH
33800: LD_VAR 0 1
33804: PPUSH
33805: CALL_OW 314
33809: NOT
33810: AND
33811: IFFALSE 33737
// PlaySoundXY ( x , y , PlantMine ) ;
33813: LD_VAR 0 2
33817: PPUSH
33818: LD_VAR 0 3
33822: PPUSH
33823: LD_STRING PlantMine
33825: PPUSH
33826: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
33830: LD_VAR 0 2
33834: PPUSH
33835: LD_VAR 0 3
33839: PPUSH
33840: LD_VAR 0 1
33844: PPUSH
33845: CALL_OW 255
33849: PPUSH
33850: LD_INT 0
33852: PPUSH
33853: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
33857: LD_ADDR_EXP 125
33861: PUSH
33862: LD_EXP 125
33866: PPUSH
33867: LD_VAR 0 5
33871: PUSH
33872: LD_EXP 125
33876: PUSH
33877: LD_VAR 0 5
33881: ARRAY
33882: PUSH
33883: LD_INT 1
33885: PLUS
33886: PUSH
33887: EMPTY
33888: LIST
33889: LIST
33890: PPUSH
33891: LD_VAR 0 2
33895: PUSH
33896: LD_VAR 0 3
33900: PUSH
33901: EMPTY
33902: LIST
33903: LIST
33904: PPUSH
33905: CALL 40270 0 3
33909: ST_TO_ADDR
// result := true ;
33910: LD_ADDR_VAR 0 4
33914: PUSH
33915: LD_INT 1
33917: ST_TO_ADDR
// end ;
33918: LD_VAR 0 4
33922: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
33923: LD_INT 0
33925: PPUSH
33926: PPUSH
33927: PPUSH
// if not unit in minersList then
33928: LD_VAR 0 1
33932: PUSH
33933: LD_EXP 124
33937: IN
33938: NOT
33939: IFFALSE 33943
// exit ;
33941: GO 34335
// index := GetElementIndex ( minersList , unit ) ;
33943: LD_ADDR_VAR 0 6
33947: PUSH
33948: LD_EXP 124
33952: PPUSH
33953: LD_VAR 0 1
33957: PPUSH
33958: CALL 40055 0 2
33962: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
33963: LD_ADDR_VAR 0 5
33967: PUSH
33968: DOUBLE
33969: LD_EXP 125
33973: PUSH
33974: LD_VAR 0 6
33978: ARRAY
33979: INC
33980: ST_TO_ADDR
33981: LD_INT 1
33983: PUSH
33984: FOR_DOWNTO
33985: IFFALSE 34146
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
33987: LD_EXP 125
33991: PUSH
33992: LD_VAR 0 6
33996: ARRAY
33997: PUSH
33998: LD_VAR 0 5
34002: ARRAY
34003: PUSH
34004: LD_INT 1
34006: ARRAY
34007: PUSH
34008: LD_VAR 0 2
34012: EQUAL
34013: PUSH
34014: LD_EXP 125
34018: PUSH
34019: LD_VAR 0 6
34023: ARRAY
34024: PUSH
34025: LD_VAR 0 5
34029: ARRAY
34030: PUSH
34031: LD_INT 2
34033: ARRAY
34034: PUSH
34035: LD_VAR 0 3
34039: EQUAL
34040: AND
34041: IFFALSE 34144
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
34043: LD_EXP 125
34047: PUSH
34048: LD_VAR 0 6
34052: ARRAY
34053: PUSH
34054: LD_VAR 0 5
34058: ARRAY
34059: PUSH
34060: LD_INT 1
34062: ARRAY
34063: PPUSH
34064: LD_EXP 125
34068: PUSH
34069: LD_VAR 0 6
34073: ARRAY
34074: PUSH
34075: LD_VAR 0 5
34079: ARRAY
34080: PUSH
34081: LD_INT 2
34083: ARRAY
34084: PPUSH
34085: LD_VAR 0 1
34089: PPUSH
34090: CALL_OW 255
34094: PPUSH
34095: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
34099: LD_ADDR_EXP 125
34103: PUSH
34104: LD_EXP 125
34108: PPUSH
34109: LD_VAR 0 6
34113: PPUSH
34114: LD_EXP 125
34118: PUSH
34119: LD_VAR 0 6
34123: ARRAY
34124: PPUSH
34125: LD_VAR 0 5
34129: PPUSH
34130: CALL_OW 3
34134: PPUSH
34135: CALL_OW 1
34139: ST_TO_ADDR
// exit ;
34140: POP
34141: POP
34142: GO 34335
// end ; end ;
34144: GO 33984
34146: POP
34147: POP
// for i := minerMinesList [ index ] downto 1 do
34148: LD_ADDR_VAR 0 5
34152: PUSH
34153: DOUBLE
34154: LD_EXP 125
34158: PUSH
34159: LD_VAR 0 6
34163: ARRAY
34164: INC
34165: ST_TO_ADDR
34166: LD_INT 1
34168: PUSH
34169: FOR_DOWNTO
34170: IFFALSE 34333
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
34172: LD_EXP 125
34176: PUSH
34177: LD_VAR 0 6
34181: ARRAY
34182: PUSH
34183: LD_VAR 0 5
34187: ARRAY
34188: PUSH
34189: LD_INT 1
34191: ARRAY
34192: PPUSH
34193: LD_EXP 125
34197: PUSH
34198: LD_VAR 0 6
34202: ARRAY
34203: PUSH
34204: LD_VAR 0 5
34208: ARRAY
34209: PUSH
34210: LD_INT 2
34212: ARRAY
34213: PPUSH
34214: LD_VAR 0 2
34218: PPUSH
34219: LD_VAR 0 3
34223: PPUSH
34224: CALL_OW 298
34228: PUSH
34229: LD_INT 6
34231: LESS
34232: IFFALSE 34331
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
34234: LD_EXP 125
34238: PUSH
34239: LD_VAR 0 6
34243: ARRAY
34244: PUSH
34245: LD_VAR 0 5
34249: ARRAY
34250: PUSH
34251: LD_INT 1
34253: ARRAY
34254: PPUSH
34255: LD_EXP 125
34259: PUSH
34260: LD_VAR 0 6
34264: ARRAY
34265: PUSH
34266: LD_VAR 0 5
34270: ARRAY
34271: PUSH
34272: LD_INT 2
34274: ARRAY
34275: PPUSH
34276: LD_VAR 0 1
34280: PPUSH
34281: CALL_OW 255
34285: PPUSH
34286: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
34290: LD_ADDR_EXP 125
34294: PUSH
34295: LD_EXP 125
34299: PPUSH
34300: LD_VAR 0 6
34304: PPUSH
34305: LD_EXP 125
34309: PUSH
34310: LD_VAR 0 6
34314: ARRAY
34315: PPUSH
34316: LD_VAR 0 5
34320: PPUSH
34321: CALL_OW 3
34325: PPUSH
34326: CALL_OW 1
34330: ST_TO_ADDR
// end ; end ;
34331: GO 34169
34333: POP
34334: POP
// end ;
34335: LD_VAR 0 4
34339: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
34340: LD_INT 0
34342: PPUSH
34343: PPUSH
34344: PPUSH
34345: PPUSH
34346: PPUSH
34347: PPUSH
34348: PPUSH
34349: PPUSH
34350: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
34351: LD_VAR 0 1
34355: PPUSH
34356: CALL_OW 264
34360: PUSH
34361: LD_EXP 45
34365: EQUAL
34366: NOT
34367: PUSH
34368: LD_VAR 0 1
34372: PUSH
34373: LD_EXP 124
34377: IN
34378: NOT
34379: OR
34380: IFFALSE 34384
// exit ;
34382: GO 34706
// index := GetElementIndex ( minersList , unit ) ;
34384: LD_ADDR_VAR 0 6
34388: PUSH
34389: LD_EXP 124
34393: PPUSH
34394: LD_VAR 0 1
34398: PPUSH
34399: CALL 40055 0 2
34403: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
34404: LD_ADDR_VAR 0 8
34408: PUSH
34409: LD_EXP 126
34413: PUSH
34414: LD_EXP 125
34418: PUSH
34419: LD_VAR 0 6
34423: ARRAY
34424: MINUS
34425: ST_TO_ADDR
// if not minesFreeAmount then
34426: LD_VAR 0 8
34430: NOT
34431: IFFALSE 34435
// exit ;
34433: GO 34706
// tmp := [ ] ;
34435: LD_ADDR_VAR 0 7
34439: PUSH
34440: EMPTY
34441: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
34442: LD_ADDR_VAR 0 5
34446: PUSH
34447: DOUBLE
34448: LD_INT 1
34450: DEC
34451: ST_TO_ADDR
34452: LD_VAR 0 8
34456: PUSH
34457: FOR_TO
34458: IFFALSE 34653
// begin _d := rand ( 0 , 5 ) ;
34460: LD_ADDR_VAR 0 11
34464: PUSH
34465: LD_INT 0
34467: PPUSH
34468: LD_INT 5
34470: PPUSH
34471: CALL_OW 12
34475: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
34476: LD_ADDR_VAR 0 12
34480: PUSH
34481: LD_INT 2
34483: PPUSH
34484: LD_INT 6
34486: PPUSH
34487: CALL_OW 12
34491: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
34492: LD_ADDR_VAR 0 9
34496: PUSH
34497: LD_VAR 0 2
34501: PPUSH
34502: LD_VAR 0 11
34506: PPUSH
34507: LD_VAR 0 12
34511: PPUSH
34512: CALL_OW 272
34516: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
34517: LD_ADDR_VAR 0 10
34521: PUSH
34522: LD_VAR 0 3
34526: PPUSH
34527: LD_VAR 0 11
34531: PPUSH
34532: LD_VAR 0 12
34536: PPUSH
34537: CALL_OW 273
34541: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
34542: LD_VAR 0 9
34546: PPUSH
34547: LD_VAR 0 10
34551: PPUSH
34552: CALL_OW 488
34556: PUSH
34557: LD_VAR 0 9
34561: PUSH
34562: LD_VAR 0 10
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: PUSH
34571: LD_VAR 0 7
34575: IN
34576: NOT
34577: AND
34578: PUSH
34579: LD_VAR 0 9
34583: PPUSH
34584: LD_VAR 0 10
34588: PPUSH
34589: CALL_OW 458
34593: NOT
34594: AND
34595: IFFALSE 34637
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
34597: LD_ADDR_VAR 0 7
34601: PUSH
34602: LD_VAR 0 7
34606: PPUSH
34607: LD_VAR 0 7
34611: PUSH
34612: LD_INT 1
34614: PLUS
34615: PPUSH
34616: LD_VAR 0 9
34620: PUSH
34621: LD_VAR 0 10
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: PPUSH
34630: CALL_OW 1
34634: ST_TO_ADDR
34635: GO 34651
// i := i - 1 ;
34637: LD_ADDR_VAR 0 5
34641: PUSH
34642: LD_VAR 0 5
34646: PUSH
34647: LD_INT 1
34649: MINUS
34650: ST_TO_ADDR
// end ;
34651: GO 34457
34653: POP
34654: POP
// for i in tmp do
34655: LD_ADDR_VAR 0 5
34659: PUSH
34660: LD_VAR 0 7
34664: PUSH
34665: FOR_IN
34666: IFFALSE 34704
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
34668: LD_VAR 0 1
34672: PPUSH
34673: LD_VAR 0 5
34677: PUSH
34678: LD_INT 1
34680: ARRAY
34681: PPUSH
34682: LD_VAR 0 5
34686: PUSH
34687: LD_INT 2
34689: ARRAY
34690: PPUSH
34691: CALL 33646 0 3
34695: NOT
34696: IFFALSE 34702
// exit ;
34698: POP
34699: POP
34700: GO 34706
34702: GO 34665
34704: POP
34705: POP
// end ;
34706: LD_VAR 0 4
34710: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
34711: LD_INT 0
34713: PPUSH
34714: PPUSH
34715: PPUSH
34716: PPUSH
34717: PPUSH
34718: PPUSH
34719: PPUSH
// if not GetClass ( unit ) = class_sniper then
34720: LD_VAR 0 1
34724: PPUSH
34725: CALL_OW 257
34729: PUSH
34730: LD_INT 5
34732: EQUAL
34733: NOT
34734: IFFALSE 34738
// exit ;
34736: GO 35126
// dist := 8 ;
34738: LD_ADDR_VAR 0 5
34742: PUSH
34743: LD_INT 8
34745: ST_TO_ADDR
// viewRange := 12 ;
34746: LD_ADDR_VAR 0 7
34750: PUSH
34751: LD_INT 12
34753: ST_TO_ADDR
// side := GetSide ( unit ) ;
34754: LD_ADDR_VAR 0 6
34758: PUSH
34759: LD_VAR 0 1
34763: PPUSH
34764: CALL_OW 255
34768: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
34769: LD_INT 61
34771: PPUSH
34772: LD_VAR 0 6
34776: PPUSH
34777: CALL_OW 321
34781: PUSH
34782: LD_INT 2
34784: EQUAL
34785: IFFALSE 34795
// viewRange := 16 ;
34787: LD_ADDR_VAR 0 7
34791: PUSH
34792: LD_INT 16
34794: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
34795: LD_VAR 0 1
34799: PPUSH
34800: LD_VAR 0 2
34804: PPUSH
34805: LD_VAR 0 3
34809: PPUSH
34810: CALL_OW 297
34814: PUSH
34815: LD_VAR 0 5
34819: GREATER
34820: IFFALSE 34899
// begin ComMoveXY ( unit , x , y ) ;
34822: LD_VAR 0 1
34826: PPUSH
34827: LD_VAR 0 2
34831: PPUSH
34832: LD_VAR 0 3
34836: PPUSH
34837: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
34841: LD_INT 35
34843: PPUSH
34844: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
34848: LD_VAR 0 1
34852: PPUSH
34853: LD_VAR 0 2
34857: PPUSH
34858: LD_VAR 0 3
34862: PPUSH
34863: CALL 71341 0 3
34867: NOT
34868: IFFALSE 34872
// exit ;
34870: GO 35126
// until GetDistUnitXY ( unit , x , y ) < dist ;
34872: LD_VAR 0 1
34876: PPUSH
34877: LD_VAR 0 2
34881: PPUSH
34882: LD_VAR 0 3
34886: PPUSH
34887: CALL_OW 297
34891: PUSH
34892: LD_VAR 0 5
34896: LESS
34897: IFFALSE 34841
// end ; ComTurnXY ( unit , x , y ) ;
34899: LD_VAR 0 1
34903: PPUSH
34904: LD_VAR 0 2
34908: PPUSH
34909: LD_VAR 0 3
34913: PPUSH
34914: CALL_OW 118
// wait ( 5 ) ;
34918: LD_INT 5
34920: PPUSH
34921: CALL_OW 67
// _d := GetDir ( unit ) ;
34925: LD_ADDR_VAR 0 10
34929: PUSH
34930: LD_VAR 0 1
34934: PPUSH
34935: CALL_OW 254
34939: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
34940: LD_ADDR_VAR 0 8
34944: PUSH
34945: LD_VAR 0 1
34949: PPUSH
34950: CALL_OW 250
34954: PPUSH
34955: LD_VAR 0 10
34959: PPUSH
34960: LD_VAR 0 5
34964: PPUSH
34965: CALL_OW 272
34969: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
34970: LD_ADDR_VAR 0 9
34974: PUSH
34975: LD_VAR 0 1
34979: PPUSH
34980: CALL_OW 251
34984: PPUSH
34985: LD_VAR 0 10
34989: PPUSH
34990: LD_VAR 0 5
34994: PPUSH
34995: CALL_OW 273
34999: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35000: LD_VAR 0 8
35004: PPUSH
35005: LD_VAR 0 9
35009: PPUSH
35010: CALL_OW 488
35014: NOT
35015: IFFALSE 35019
// exit ;
35017: GO 35126
// ComAnimCustom ( unit , 1 ) ;
35019: LD_VAR 0 1
35023: PPUSH
35024: LD_INT 1
35026: PPUSH
35027: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
35031: LD_VAR 0 8
35035: PPUSH
35036: LD_VAR 0 9
35040: PPUSH
35041: LD_VAR 0 6
35045: PPUSH
35046: LD_VAR 0 7
35050: PPUSH
35051: CALL_OW 330
// repeat wait ( 1 ) ;
35055: LD_INT 1
35057: PPUSH
35058: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
35062: LD_VAR 0 1
35066: PPUSH
35067: CALL_OW 316
35071: PUSH
35072: LD_VAR 0 1
35076: PPUSH
35077: CALL_OW 314
35081: OR
35082: PUSH
35083: LD_VAR 0 1
35087: PPUSH
35088: CALL_OW 302
35092: NOT
35093: OR
35094: PUSH
35095: LD_VAR 0 1
35099: PPUSH
35100: CALL_OW 301
35104: OR
35105: IFFALSE 35055
// RemoveSeeing ( _x , _y , side ) ;
35107: LD_VAR 0 8
35111: PPUSH
35112: LD_VAR 0 9
35116: PPUSH
35117: LD_VAR 0 6
35121: PPUSH
35122: CALL_OW 331
// end ; end_of_file
35126: LD_VAR 0 4
35130: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
35131: LD_INT 0
35133: PPUSH
35134: PPUSH
// if exist_mode then
35135: LD_VAR 0 2
35139: IFFALSE 35164
// unit := CreateCharacter ( prefix & ident ) else
35141: LD_ADDR_VAR 0 5
35145: PUSH
35146: LD_VAR 0 3
35150: PUSH
35151: LD_VAR 0 1
35155: STR
35156: PPUSH
35157: CALL_OW 34
35161: ST_TO_ADDR
35162: GO 35179
// unit := NewCharacter ( ident ) ;
35164: LD_ADDR_VAR 0 5
35168: PUSH
35169: LD_VAR 0 1
35173: PPUSH
35174: CALL_OW 25
35178: ST_TO_ADDR
// result := unit ;
35179: LD_ADDR_VAR 0 4
35183: PUSH
35184: LD_VAR 0 5
35188: ST_TO_ADDR
// end ;
35189: LD_VAR 0 4
35193: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
35194: LD_INT 0
35196: PPUSH
35197: PPUSH
// if not side or not nation then
35198: LD_VAR 0 1
35202: NOT
35203: PUSH
35204: LD_VAR 0 2
35208: NOT
35209: OR
35210: IFFALSE 35214
// exit ;
35212: GO 35982
// case nation of nation_american :
35214: LD_VAR 0 2
35218: PUSH
35219: LD_INT 1
35221: DOUBLE
35222: EQUAL
35223: IFTRUE 35227
35225: GO 35441
35227: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
35228: LD_ADDR_VAR 0 4
35232: PUSH
35233: LD_INT 35
35235: PUSH
35236: LD_INT 45
35238: PUSH
35239: LD_INT 46
35241: PUSH
35242: LD_INT 47
35244: PUSH
35245: LD_INT 82
35247: PUSH
35248: LD_INT 83
35250: PUSH
35251: LD_INT 84
35253: PUSH
35254: LD_INT 85
35256: PUSH
35257: LD_INT 86
35259: PUSH
35260: LD_INT 1
35262: PUSH
35263: LD_INT 2
35265: PUSH
35266: LD_INT 6
35268: PUSH
35269: LD_INT 15
35271: PUSH
35272: LD_INT 16
35274: PUSH
35275: LD_INT 7
35277: PUSH
35278: LD_INT 12
35280: PUSH
35281: LD_INT 13
35283: PUSH
35284: LD_INT 10
35286: PUSH
35287: LD_INT 14
35289: PUSH
35290: LD_INT 20
35292: PUSH
35293: LD_INT 21
35295: PUSH
35296: LD_INT 22
35298: PUSH
35299: LD_INT 25
35301: PUSH
35302: LD_INT 32
35304: PUSH
35305: LD_INT 27
35307: PUSH
35308: LD_INT 36
35310: PUSH
35311: LD_INT 69
35313: PUSH
35314: LD_INT 39
35316: PUSH
35317: LD_INT 34
35319: PUSH
35320: LD_INT 40
35322: PUSH
35323: LD_INT 48
35325: PUSH
35326: LD_INT 49
35328: PUSH
35329: LD_INT 50
35331: PUSH
35332: LD_INT 51
35334: PUSH
35335: LD_INT 52
35337: PUSH
35338: LD_INT 53
35340: PUSH
35341: LD_INT 54
35343: PUSH
35344: LD_INT 55
35346: PUSH
35347: LD_INT 56
35349: PUSH
35350: LD_INT 57
35352: PUSH
35353: LD_INT 58
35355: PUSH
35356: LD_INT 59
35358: PUSH
35359: LD_INT 60
35361: PUSH
35362: LD_INT 61
35364: PUSH
35365: LD_INT 62
35367: PUSH
35368: LD_INT 80
35370: PUSH
35371: LD_INT 82
35373: PUSH
35374: LD_INT 83
35376: PUSH
35377: LD_INT 84
35379: PUSH
35380: LD_INT 85
35382: PUSH
35383: LD_INT 86
35385: PUSH
35386: EMPTY
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: LIST
35395: LIST
35396: LIST
35397: LIST
35398: LIST
35399: LIST
35400: LIST
35401: LIST
35402: LIST
35403: LIST
35404: LIST
35405: LIST
35406: LIST
35407: LIST
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: LIST
35416: LIST
35417: LIST
35418: LIST
35419: LIST
35420: LIST
35421: LIST
35422: LIST
35423: LIST
35424: LIST
35425: LIST
35426: LIST
35427: LIST
35428: LIST
35429: LIST
35430: LIST
35431: LIST
35432: LIST
35433: LIST
35434: LIST
35435: LIST
35436: LIST
35437: LIST
35438: ST_TO_ADDR
35439: GO 35906
35441: LD_INT 2
35443: DOUBLE
35444: EQUAL
35445: IFTRUE 35449
35447: GO 35675
35449: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
35450: LD_ADDR_VAR 0 4
35454: PUSH
35455: LD_INT 35
35457: PUSH
35458: LD_INT 45
35460: PUSH
35461: LD_INT 46
35463: PUSH
35464: LD_INT 47
35466: PUSH
35467: LD_INT 82
35469: PUSH
35470: LD_INT 83
35472: PUSH
35473: LD_INT 84
35475: PUSH
35476: LD_INT 85
35478: PUSH
35479: LD_INT 87
35481: PUSH
35482: LD_INT 70
35484: PUSH
35485: LD_INT 1
35487: PUSH
35488: LD_INT 11
35490: PUSH
35491: LD_INT 3
35493: PUSH
35494: LD_INT 4
35496: PUSH
35497: LD_INT 5
35499: PUSH
35500: LD_INT 6
35502: PUSH
35503: LD_INT 15
35505: PUSH
35506: LD_INT 18
35508: PUSH
35509: LD_INT 7
35511: PUSH
35512: LD_INT 17
35514: PUSH
35515: LD_INT 8
35517: PUSH
35518: LD_INT 20
35520: PUSH
35521: LD_INT 21
35523: PUSH
35524: LD_INT 22
35526: PUSH
35527: LD_INT 72
35529: PUSH
35530: LD_INT 26
35532: PUSH
35533: LD_INT 69
35535: PUSH
35536: LD_INT 39
35538: PUSH
35539: LD_INT 40
35541: PUSH
35542: LD_INT 41
35544: PUSH
35545: LD_INT 42
35547: PUSH
35548: LD_INT 43
35550: PUSH
35551: LD_INT 48
35553: PUSH
35554: LD_INT 49
35556: PUSH
35557: LD_INT 50
35559: PUSH
35560: LD_INT 51
35562: PUSH
35563: LD_INT 52
35565: PUSH
35566: LD_INT 53
35568: PUSH
35569: LD_INT 54
35571: PUSH
35572: LD_INT 55
35574: PUSH
35575: LD_INT 56
35577: PUSH
35578: LD_INT 60
35580: PUSH
35581: LD_INT 61
35583: PUSH
35584: LD_INT 62
35586: PUSH
35587: LD_INT 66
35589: PUSH
35590: LD_INT 67
35592: PUSH
35593: LD_INT 68
35595: PUSH
35596: LD_INT 81
35598: PUSH
35599: LD_INT 82
35601: PUSH
35602: LD_INT 83
35604: PUSH
35605: LD_INT 84
35607: PUSH
35608: LD_INT 85
35610: PUSH
35611: LD_INT 87
35613: PUSH
35614: LD_INT 88
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: LIST
35644: LIST
35645: LIST
35646: LIST
35647: LIST
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: LIST
35653: LIST
35654: LIST
35655: LIST
35656: LIST
35657: LIST
35658: LIST
35659: LIST
35660: LIST
35661: LIST
35662: LIST
35663: LIST
35664: LIST
35665: LIST
35666: LIST
35667: LIST
35668: LIST
35669: LIST
35670: LIST
35671: LIST
35672: ST_TO_ADDR
35673: GO 35906
35675: LD_INT 3
35677: DOUBLE
35678: EQUAL
35679: IFTRUE 35683
35681: GO 35905
35683: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
35684: LD_ADDR_VAR 0 4
35688: PUSH
35689: LD_INT 46
35691: PUSH
35692: LD_INT 47
35694: PUSH
35695: LD_INT 1
35697: PUSH
35698: LD_INT 2
35700: PUSH
35701: LD_INT 82
35703: PUSH
35704: LD_INT 83
35706: PUSH
35707: LD_INT 84
35709: PUSH
35710: LD_INT 85
35712: PUSH
35713: LD_INT 86
35715: PUSH
35716: LD_INT 11
35718: PUSH
35719: LD_INT 9
35721: PUSH
35722: LD_INT 20
35724: PUSH
35725: LD_INT 19
35727: PUSH
35728: LD_INT 21
35730: PUSH
35731: LD_INT 24
35733: PUSH
35734: LD_INT 22
35736: PUSH
35737: LD_INT 25
35739: PUSH
35740: LD_INT 28
35742: PUSH
35743: LD_INT 29
35745: PUSH
35746: LD_INT 30
35748: PUSH
35749: LD_INT 31
35751: PUSH
35752: LD_INT 37
35754: PUSH
35755: LD_INT 38
35757: PUSH
35758: LD_INT 32
35760: PUSH
35761: LD_INT 27
35763: PUSH
35764: LD_INT 33
35766: PUSH
35767: LD_INT 69
35769: PUSH
35770: LD_INT 39
35772: PUSH
35773: LD_INT 34
35775: PUSH
35776: LD_INT 40
35778: PUSH
35779: LD_INT 71
35781: PUSH
35782: LD_INT 23
35784: PUSH
35785: LD_INT 44
35787: PUSH
35788: LD_INT 48
35790: PUSH
35791: LD_INT 49
35793: PUSH
35794: LD_INT 50
35796: PUSH
35797: LD_INT 51
35799: PUSH
35800: LD_INT 52
35802: PUSH
35803: LD_INT 53
35805: PUSH
35806: LD_INT 54
35808: PUSH
35809: LD_INT 55
35811: PUSH
35812: LD_INT 56
35814: PUSH
35815: LD_INT 57
35817: PUSH
35818: LD_INT 58
35820: PUSH
35821: LD_INT 59
35823: PUSH
35824: LD_INT 63
35826: PUSH
35827: LD_INT 64
35829: PUSH
35830: LD_INT 65
35832: PUSH
35833: LD_INT 82
35835: PUSH
35836: LD_INT 83
35838: PUSH
35839: LD_INT 84
35841: PUSH
35842: LD_INT 85
35844: PUSH
35845: LD_INT 86
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: LIST
35870: LIST
35871: LIST
35872: LIST
35873: LIST
35874: LIST
35875: LIST
35876: LIST
35877: LIST
35878: LIST
35879: LIST
35880: LIST
35881: LIST
35882: LIST
35883: LIST
35884: LIST
35885: LIST
35886: LIST
35887: LIST
35888: LIST
35889: LIST
35890: LIST
35891: LIST
35892: LIST
35893: LIST
35894: LIST
35895: LIST
35896: LIST
35897: LIST
35898: LIST
35899: LIST
35900: LIST
35901: LIST
35902: ST_TO_ADDR
35903: GO 35906
35905: POP
// if state > - 1 and state < 3 then
35906: LD_VAR 0 3
35910: PUSH
35911: LD_INT 1
35913: NEG
35914: GREATER
35915: PUSH
35916: LD_VAR 0 3
35920: PUSH
35921: LD_INT 3
35923: LESS
35924: AND
35925: IFFALSE 35982
// for i in result do
35927: LD_ADDR_VAR 0 5
35931: PUSH
35932: LD_VAR 0 4
35936: PUSH
35937: FOR_IN
35938: IFFALSE 35980
// if GetTech ( i , side ) <> state then
35940: LD_VAR 0 5
35944: PPUSH
35945: LD_VAR 0 1
35949: PPUSH
35950: CALL_OW 321
35954: PUSH
35955: LD_VAR 0 3
35959: NONEQUAL
35960: IFFALSE 35978
// result := result diff i ;
35962: LD_ADDR_VAR 0 4
35966: PUSH
35967: LD_VAR 0 4
35971: PUSH
35972: LD_VAR 0 5
35976: DIFF
35977: ST_TO_ADDR
35978: GO 35937
35980: POP
35981: POP
// end ;
35982: LD_VAR 0 4
35986: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
35987: LD_INT 0
35989: PPUSH
35990: PPUSH
35991: PPUSH
// result := true ;
35992: LD_ADDR_VAR 0 3
35996: PUSH
35997: LD_INT 1
35999: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
36000: LD_ADDR_VAR 0 5
36004: PUSH
36005: LD_VAR 0 2
36009: PPUSH
36010: CALL_OW 480
36014: ST_TO_ADDR
// if not tmp then
36015: LD_VAR 0 5
36019: NOT
36020: IFFALSE 36024
// exit ;
36022: GO 36073
// for i in tmp do
36024: LD_ADDR_VAR 0 4
36028: PUSH
36029: LD_VAR 0 5
36033: PUSH
36034: FOR_IN
36035: IFFALSE 36071
// if GetTech ( i , side ) <> state_researched then
36037: LD_VAR 0 4
36041: PPUSH
36042: LD_VAR 0 1
36046: PPUSH
36047: CALL_OW 321
36051: PUSH
36052: LD_INT 2
36054: NONEQUAL
36055: IFFALSE 36069
// begin result := false ;
36057: LD_ADDR_VAR 0 3
36061: PUSH
36062: LD_INT 0
36064: ST_TO_ADDR
// exit ;
36065: POP
36066: POP
36067: GO 36073
// end ;
36069: GO 36034
36071: POP
36072: POP
// end ;
36073: LD_VAR 0 3
36077: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
36078: LD_INT 0
36080: PPUSH
36081: PPUSH
36082: PPUSH
36083: PPUSH
36084: PPUSH
36085: PPUSH
36086: PPUSH
36087: PPUSH
36088: PPUSH
36089: PPUSH
36090: PPUSH
36091: PPUSH
36092: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
36093: LD_VAR 0 1
36097: NOT
36098: PUSH
36099: LD_VAR 0 1
36103: PPUSH
36104: CALL_OW 257
36108: PUSH
36109: LD_INT 9
36111: NONEQUAL
36112: OR
36113: IFFALSE 36117
// exit ;
36115: GO 36690
// side := GetSide ( unit ) ;
36117: LD_ADDR_VAR 0 9
36121: PUSH
36122: LD_VAR 0 1
36126: PPUSH
36127: CALL_OW 255
36131: ST_TO_ADDR
// tech_space := tech_spacanom ;
36132: LD_ADDR_VAR 0 12
36136: PUSH
36137: LD_INT 29
36139: ST_TO_ADDR
// tech_time := tech_taurad ;
36140: LD_ADDR_VAR 0 13
36144: PUSH
36145: LD_INT 28
36147: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
36148: LD_ADDR_VAR 0 11
36152: PUSH
36153: LD_VAR 0 1
36157: PPUSH
36158: CALL_OW 310
36162: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
36163: LD_VAR 0 11
36167: PPUSH
36168: CALL_OW 247
36172: PUSH
36173: LD_INT 2
36175: EQUAL
36176: IFFALSE 36180
// exit ;
36178: GO 36690
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36180: LD_ADDR_VAR 0 8
36184: PUSH
36185: LD_INT 81
36187: PUSH
36188: LD_VAR 0 9
36192: PUSH
36193: EMPTY
36194: LIST
36195: LIST
36196: PUSH
36197: LD_INT 3
36199: PUSH
36200: LD_INT 21
36202: PUSH
36203: LD_INT 3
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: PPUSH
36218: CALL_OW 69
36222: ST_TO_ADDR
// if not tmp then
36223: LD_VAR 0 8
36227: NOT
36228: IFFALSE 36232
// exit ;
36230: GO 36690
// if in_unit then
36232: LD_VAR 0 11
36236: IFFALSE 36260
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
36238: LD_ADDR_VAR 0 10
36242: PUSH
36243: LD_VAR 0 8
36247: PPUSH
36248: LD_VAR 0 11
36252: PPUSH
36253: CALL_OW 74
36257: ST_TO_ADDR
36258: GO 36280
// enemy := NearestUnitToUnit ( tmp , unit ) ;
36260: LD_ADDR_VAR 0 10
36264: PUSH
36265: LD_VAR 0 8
36269: PPUSH
36270: LD_VAR 0 1
36274: PPUSH
36275: CALL_OW 74
36279: ST_TO_ADDR
// if not enemy then
36280: LD_VAR 0 10
36284: NOT
36285: IFFALSE 36289
// exit ;
36287: GO 36690
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
36289: LD_VAR 0 11
36293: PUSH
36294: LD_VAR 0 11
36298: PPUSH
36299: LD_VAR 0 10
36303: PPUSH
36304: CALL_OW 296
36308: PUSH
36309: LD_INT 13
36311: GREATER
36312: AND
36313: PUSH
36314: LD_VAR 0 1
36318: PPUSH
36319: LD_VAR 0 10
36323: PPUSH
36324: CALL_OW 296
36328: PUSH
36329: LD_INT 12
36331: GREATER
36332: OR
36333: IFFALSE 36337
// exit ;
36335: GO 36690
// missile := [ 1 ] ;
36337: LD_ADDR_VAR 0 14
36341: PUSH
36342: LD_INT 1
36344: PUSH
36345: EMPTY
36346: LIST
36347: ST_TO_ADDR
// if Researched ( side , tech_space ) then
36348: LD_VAR 0 9
36352: PPUSH
36353: LD_VAR 0 12
36357: PPUSH
36358: CALL_OW 325
36362: IFFALSE 36391
// missile := Replace ( missile , missile + 1 , 2 ) ;
36364: LD_ADDR_VAR 0 14
36368: PUSH
36369: LD_VAR 0 14
36373: PPUSH
36374: LD_VAR 0 14
36378: PUSH
36379: LD_INT 1
36381: PLUS
36382: PPUSH
36383: LD_INT 2
36385: PPUSH
36386: CALL_OW 1
36390: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
36391: LD_VAR 0 9
36395: PPUSH
36396: LD_VAR 0 13
36400: PPUSH
36401: CALL_OW 325
36405: PUSH
36406: LD_VAR 0 10
36410: PPUSH
36411: CALL_OW 255
36415: PPUSH
36416: LD_VAR 0 13
36420: PPUSH
36421: CALL_OW 325
36425: NOT
36426: AND
36427: IFFALSE 36456
// missile := Replace ( missile , missile + 1 , 3 ) ;
36429: LD_ADDR_VAR 0 14
36433: PUSH
36434: LD_VAR 0 14
36438: PPUSH
36439: LD_VAR 0 14
36443: PUSH
36444: LD_INT 1
36446: PLUS
36447: PPUSH
36448: LD_INT 3
36450: PPUSH
36451: CALL_OW 1
36455: ST_TO_ADDR
// if missile < 2 then
36456: LD_VAR 0 14
36460: PUSH
36461: LD_INT 2
36463: LESS
36464: IFFALSE 36468
// exit ;
36466: GO 36690
// x := GetX ( enemy ) ;
36468: LD_ADDR_VAR 0 4
36472: PUSH
36473: LD_VAR 0 10
36477: PPUSH
36478: CALL_OW 250
36482: ST_TO_ADDR
// y := GetY ( enemy ) ;
36483: LD_ADDR_VAR 0 5
36487: PUSH
36488: LD_VAR 0 10
36492: PPUSH
36493: CALL_OW 251
36497: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
36498: LD_ADDR_VAR 0 6
36502: PUSH
36503: LD_VAR 0 4
36507: PUSH
36508: LD_INT 1
36510: NEG
36511: PPUSH
36512: LD_INT 1
36514: PPUSH
36515: CALL_OW 12
36519: PLUS
36520: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
36521: LD_ADDR_VAR 0 7
36525: PUSH
36526: LD_VAR 0 5
36530: PUSH
36531: LD_INT 1
36533: NEG
36534: PPUSH
36535: LD_INT 1
36537: PPUSH
36538: CALL_OW 12
36542: PLUS
36543: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36544: LD_VAR 0 6
36548: PPUSH
36549: LD_VAR 0 7
36553: PPUSH
36554: CALL_OW 488
36558: NOT
36559: IFFALSE 36581
// begin _x := x ;
36561: LD_ADDR_VAR 0 6
36565: PUSH
36566: LD_VAR 0 4
36570: ST_TO_ADDR
// _y := y ;
36571: LD_ADDR_VAR 0 7
36575: PUSH
36576: LD_VAR 0 5
36580: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
36581: LD_ADDR_VAR 0 3
36585: PUSH
36586: LD_INT 1
36588: PPUSH
36589: LD_VAR 0 14
36593: PPUSH
36594: CALL_OW 12
36598: ST_TO_ADDR
// case i of 1 :
36599: LD_VAR 0 3
36603: PUSH
36604: LD_INT 1
36606: DOUBLE
36607: EQUAL
36608: IFTRUE 36612
36610: GO 36629
36612: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
36613: LD_VAR 0 1
36617: PPUSH
36618: LD_VAR 0 10
36622: PPUSH
36623: CALL_OW 115
36627: GO 36690
36629: LD_INT 2
36631: DOUBLE
36632: EQUAL
36633: IFTRUE 36637
36635: GO 36659
36637: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
36638: LD_VAR 0 1
36642: PPUSH
36643: LD_VAR 0 6
36647: PPUSH
36648: LD_VAR 0 7
36652: PPUSH
36653: CALL_OW 153
36657: GO 36690
36659: LD_INT 3
36661: DOUBLE
36662: EQUAL
36663: IFTRUE 36667
36665: GO 36689
36667: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
36668: LD_VAR 0 1
36672: PPUSH
36673: LD_VAR 0 6
36677: PPUSH
36678: LD_VAR 0 7
36682: PPUSH
36683: CALL_OW 154
36687: GO 36690
36689: POP
// end ;
36690: LD_VAR 0 2
36694: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
36695: LD_INT 0
36697: PPUSH
36698: PPUSH
36699: PPUSH
36700: PPUSH
36701: PPUSH
36702: PPUSH
// if not unit or not building then
36703: LD_VAR 0 1
36707: NOT
36708: PUSH
36709: LD_VAR 0 2
36713: NOT
36714: OR
36715: IFFALSE 36719
// exit ;
36717: GO 36877
// x := GetX ( building ) ;
36719: LD_ADDR_VAR 0 5
36723: PUSH
36724: LD_VAR 0 2
36728: PPUSH
36729: CALL_OW 250
36733: ST_TO_ADDR
// y := GetY ( building ) ;
36734: LD_ADDR_VAR 0 6
36738: PUSH
36739: LD_VAR 0 2
36743: PPUSH
36744: CALL_OW 251
36748: ST_TO_ADDR
// for i = 0 to 5 do
36749: LD_ADDR_VAR 0 4
36753: PUSH
36754: DOUBLE
36755: LD_INT 0
36757: DEC
36758: ST_TO_ADDR
36759: LD_INT 5
36761: PUSH
36762: FOR_TO
36763: IFFALSE 36875
// begin _x := ShiftX ( x , i , 3 ) ;
36765: LD_ADDR_VAR 0 7
36769: PUSH
36770: LD_VAR 0 5
36774: PPUSH
36775: LD_VAR 0 4
36779: PPUSH
36780: LD_INT 3
36782: PPUSH
36783: CALL_OW 272
36787: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
36788: LD_ADDR_VAR 0 8
36792: PUSH
36793: LD_VAR 0 6
36797: PPUSH
36798: LD_VAR 0 4
36802: PPUSH
36803: LD_INT 3
36805: PPUSH
36806: CALL_OW 273
36810: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36811: LD_VAR 0 7
36815: PPUSH
36816: LD_VAR 0 8
36820: PPUSH
36821: CALL_OW 488
36825: NOT
36826: IFFALSE 36830
// continue ;
36828: GO 36762
// if HexInfo ( _x , _y ) = 0 then
36830: LD_VAR 0 7
36834: PPUSH
36835: LD_VAR 0 8
36839: PPUSH
36840: CALL_OW 428
36844: PUSH
36845: LD_INT 0
36847: EQUAL
36848: IFFALSE 36873
// begin ComMoveXY ( unit , _x , _y ) ;
36850: LD_VAR 0 1
36854: PPUSH
36855: LD_VAR 0 7
36859: PPUSH
36860: LD_VAR 0 8
36864: PPUSH
36865: CALL_OW 111
// exit ;
36869: POP
36870: POP
36871: GO 36877
// end ; end ;
36873: GO 36762
36875: POP
36876: POP
// end ;
36877: LD_VAR 0 3
36881: RET
// export function ScanBase ( side , base_area ) ; begin
36882: LD_INT 0
36884: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
36885: LD_ADDR_VAR 0 3
36889: PUSH
36890: LD_VAR 0 2
36894: PPUSH
36895: LD_INT 81
36897: PUSH
36898: LD_VAR 0 1
36902: PUSH
36903: EMPTY
36904: LIST
36905: LIST
36906: PPUSH
36907: CALL_OW 70
36911: ST_TO_ADDR
// end ;
36912: LD_VAR 0 3
36916: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
36917: LD_INT 0
36919: PPUSH
36920: PPUSH
36921: PPUSH
36922: PPUSH
// result := false ;
36923: LD_ADDR_VAR 0 2
36927: PUSH
36928: LD_INT 0
36930: ST_TO_ADDR
// side := GetSide ( unit ) ;
36931: LD_ADDR_VAR 0 3
36935: PUSH
36936: LD_VAR 0 1
36940: PPUSH
36941: CALL_OW 255
36945: ST_TO_ADDR
// nat := GetNation ( unit ) ;
36946: LD_ADDR_VAR 0 4
36950: PUSH
36951: LD_VAR 0 1
36955: PPUSH
36956: CALL_OW 248
36960: ST_TO_ADDR
// case nat of 1 :
36961: LD_VAR 0 4
36965: PUSH
36966: LD_INT 1
36968: DOUBLE
36969: EQUAL
36970: IFTRUE 36974
36972: GO 36985
36974: POP
// tech := tech_lassight ; 2 :
36975: LD_ADDR_VAR 0 5
36979: PUSH
36980: LD_INT 12
36982: ST_TO_ADDR
36983: GO 37024
36985: LD_INT 2
36987: DOUBLE
36988: EQUAL
36989: IFTRUE 36993
36991: GO 37004
36993: POP
// tech := tech_mortar ; 3 :
36994: LD_ADDR_VAR 0 5
36998: PUSH
36999: LD_INT 41
37001: ST_TO_ADDR
37002: GO 37024
37004: LD_INT 3
37006: DOUBLE
37007: EQUAL
37008: IFTRUE 37012
37010: GO 37023
37012: POP
// tech := tech_bazooka ; end ;
37013: LD_ADDR_VAR 0 5
37017: PUSH
37018: LD_INT 44
37020: ST_TO_ADDR
37021: GO 37024
37023: POP
// if Researched ( side , tech ) then
37024: LD_VAR 0 3
37028: PPUSH
37029: LD_VAR 0 5
37033: PPUSH
37034: CALL_OW 325
37038: IFFALSE 37065
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
37040: LD_ADDR_VAR 0 2
37044: PUSH
37045: LD_INT 5
37047: PUSH
37048: LD_INT 8
37050: PUSH
37051: LD_INT 9
37053: PUSH
37054: EMPTY
37055: LIST
37056: LIST
37057: LIST
37058: PUSH
37059: LD_VAR 0 4
37063: ARRAY
37064: ST_TO_ADDR
// end ;
37065: LD_VAR 0 2
37069: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
37070: LD_INT 0
37072: PPUSH
37073: PPUSH
37074: PPUSH
// if not mines then
37075: LD_VAR 0 2
37079: NOT
37080: IFFALSE 37084
// exit ;
37082: GO 37228
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37084: LD_ADDR_VAR 0 5
37088: PUSH
37089: LD_INT 81
37091: PUSH
37092: LD_VAR 0 1
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: LD_INT 3
37103: PUSH
37104: LD_INT 21
37106: PUSH
37107: LD_INT 3
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: PPUSH
37122: CALL_OW 69
37126: ST_TO_ADDR
// for i in mines do
37127: LD_ADDR_VAR 0 4
37131: PUSH
37132: LD_VAR 0 2
37136: PUSH
37137: FOR_IN
37138: IFFALSE 37226
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
37140: LD_VAR 0 4
37144: PUSH
37145: LD_INT 1
37147: ARRAY
37148: PPUSH
37149: LD_VAR 0 4
37153: PUSH
37154: LD_INT 2
37156: ARRAY
37157: PPUSH
37158: CALL_OW 458
37162: NOT
37163: IFFALSE 37167
// continue ;
37165: GO 37137
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
37167: LD_VAR 0 4
37171: PUSH
37172: LD_INT 1
37174: ARRAY
37175: PPUSH
37176: LD_VAR 0 4
37180: PUSH
37181: LD_INT 2
37183: ARRAY
37184: PPUSH
37185: CALL_OW 428
37189: PUSH
37190: LD_VAR 0 5
37194: IN
37195: IFFALSE 37224
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
37197: LD_VAR 0 4
37201: PUSH
37202: LD_INT 1
37204: ARRAY
37205: PPUSH
37206: LD_VAR 0 4
37210: PUSH
37211: LD_INT 2
37213: ARRAY
37214: PPUSH
37215: LD_VAR 0 1
37219: PPUSH
37220: CALL_OW 456
// end ;
37224: GO 37137
37226: POP
37227: POP
// end ;
37228: LD_VAR 0 3
37232: RET
// export function Count ( array ) ; var i ; begin
37233: LD_INT 0
37235: PPUSH
37236: PPUSH
// result := 0 ;
37237: LD_ADDR_VAR 0 2
37241: PUSH
37242: LD_INT 0
37244: ST_TO_ADDR
// for i in array do
37245: LD_ADDR_VAR 0 3
37249: PUSH
37250: LD_VAR 0 1
37254: PUSH
37255: FOR_IN
37256: IFFALSE 37280
// if i then
37258: LD_VAR 0 3
37262: IFFALSE 37278
// result := result + 1 ;
37264: LD_ADDR_VAR 0 2
37268: PUSH
37269: LD_VAR 0 2
37273: PUSH
37274: LD_INT 1
37276: PLUS
37277: ST_TO_ADDR
37278: GO 37255
37280: POP
37281: POP
// end ;
37282: LD_VAR 0 2
37286: RET
// export function IsEmpty ( building ) ; begin
37287: LD_INT 0
37289: PPUSH
// if not building then
37290: LD_VAR 0 1
37294: NOT
37295: IFFALSE 37299
// exit ;
37297: GO 37342
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
37299: LD_ADDR_VAR 0 2
37303: PUSH
37304: LD_VAR 0 1
37308: PUSH
37309: LD_INT 22
37311: PUSH
37312: LD_VAR 0 1
37316: PPUSH
37317: CALL_OW 255
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: PUSH
37326: LD_INT 58
37328: PUSH
37329: EMPTY
37330: LIST
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: PPUSH
37336: CALL_OW 69
37340: IN
37341: ST_TO_ADDR
// end ;
37342: LD_VAR 0 2
37346: RET
// export function IsNotFull ( building ) ; var places ; begin
37347: LD_INT 0
37349: PPUSH
37350: PPUSH
// if not building then
37351: LD_VAR 0 1
37355: NOT
37356: IFFALSE 37360
// exit ;
37358: GO 37531
// result := false ;
37360: LD_ADDR_VAR 0 2
37364: PUSH
37365: LD_INT 0
37367: ST_TO_ADDR
// places := 0 ;
37368: LD_ADDR_VAR 0 3
37372: PUSH
37373: LD_INT 0
37375: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
37376: LD_VAR 0 1
37380: PPUSH
37381: CALL_OW 266
37385: PUSH
37386: LD_INT 0
37388: DOUBLE
37389: EQUAL
37390: IFTRUE 37448
37392: LD_INT 1
37394: DOUBLE
37395: EQUAL
37396: IFTRUE 37448
37398: LD_INT 6
37400: DOUBLE
37401: EQUAL
37402: IFTRUE 37448
37404: LD_INT 7
37406: DOUBLE
37407: EQUAL
37408: IFTRUE 37448
37410: LD_INT 8
37412: DOUBLE
37413: EQUAL
37414: IFTRUE 37448
37416: LD_INT 4
37418: DOUBLE
37419: EQUAL
37420: IFTRUE 37448
37422: LD_INT 5
37424: DOUBLE
37425: EQUAL
37426: IFTRUE 37448
37428: LD_INT 2
37430: DOUBLE
37431: EQUAL
37432: IFTRUE 37448
37434: LD_INT 3
37436: DOUBLE
37437: EQUAL
37438: IFTRUE 37448
37440: LD_INT 35
37442: DOUBLE
37443: EQUAL
37444: IFTRUE 37448
37446: GO 37459
37448: POP
// places := 6 ; b_bunker , b_breastwork :
37449: LD_ADDR_VAR 0 3
37453: PUSH
37454: LD_INT 6
37456: ST_TO_ADDR
37457: GO 37504
37459: LD_INT 32
37461: DOUBLE
37462: EQUAL
37463: IFTRUE 37473
37465: LD_INT 31
37467: DOUBLE
37468: EQUAL
37469: IFTRUE 37473
37471: GO 37484
37473: POP
// places := 1 ; b_control_tower :
37474: LD_ADDR_VAR 0 3
37478: PUSH
37479: LD_INT 1
37481: ST_TO_ADDR
37482: GO 37504
37484: LD_INT 36
37486: DOUBLE
37487: EQUAL
37488: IFTRUE 37492
37490: GO 37503
37492: POP
// places := 3 ; end ;
37493: LD_ADDR_VAR 0 3
37497: PUSH
37498: LD_INT 3
37500: ST_TO_ADDR
37501: GO 37504
37503: POP
// if places then
37504: LD_VAR 0 3
37508: IFFALSE 37531
// result := UnitsInside ( building ) < places ;
37510: LD_ADDR_VAR 0 2
37514: PUSH
37515: LD_VAR 0 1
37519: PPUSH
37520: CALL_OW 313
37524: PUSH
37525: LD_VAR 0 3
37529: LESS
37530: ST_TO_ADDR
// end ;
37531: LD_VAR 0 2
37535: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
37536: LD_INT 0
37538: PPUSH
37539: PPUSH
37540: PPUSH
37541: PPUSH
// tmp := [ ] ;
37542: LD_ADDR_VAR 0 3
37546: PUSH
37547: EMPTY
37548: ST_TO_ADDR
// list := [ ] ;
37549: LD_ADDR_VAR 0 5
37553: PUSH
37554: EMPTY
37555: ST_TO_ADDR
// for i = 16 to 25 do
37556: LD_ADDR_VAR 0 4
37560: PUSH
37561: DOUBLE
37562: LD_INT 16
37564: DEC
37565: ST_TO_ADDR
37566: LD_INT 25
37568: PUSH
37569: FOR_TO
37570: IFFALSE 37643
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
37572: LD_ADDR_VAR 0 3
37576: PUSH
37577: LD_VAR 0 3
37581: PUSH
37582: LD_INT 22
37584: PUSH
37585: LD_VAR 0 1
37589: PPUSH
37590: CALL_OW 255
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: PUSH
37599: LD_INT 91
37601: PUSH
37602: LD_VAR 0 1
37606: PUSH
37607: LD_INT 6
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: LIST
37614: PUSH
37615: LD_INT 30
37617: PUSH
37618: LD_VAR 0 4
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: LIST
37631: PUSH
37632: EMPTY
37633: LIST
37634: PPUSH
37635: CALL_OW 69
37639: ADD
37640: ST_TO_ADDR
37641: GO 37569
37643: POP
37644: POP
// for i = 1 to tmp do
37645: LD_ADDR_VAR 0 4
37649: PUSH
37650: DOUBLE
37651: LD_INT 1
37653: DEC
37654: ST_TO_ADDR
37655: LD_VAR 0 3
37659: PUSH
37660: FOR_TO
37661: IFFALSE 37749
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
37663: LD_ADDR_VAR 0 5
37667: PUSH
37668: LD_VAR 0 5
37672: PUSH
37673: LD_VAR 0 3
37677: PUSH
37678: LD_VAR 0 4
37682: ARRAY
37683: PPUSH
37684: CALL_OW 266
37688: PUSH
37689: LD_VAR 0 3
37693: PUSH
37694: LD_VAR 0 4
37698: ARRAY
37699: PPUSH
37700: CALL_OW 250
37704: PUSH
37705: LD_VAR 0 3
37709: PUSH
37710: LD_VAR 0 4
37714: ARRAY
37715: PPUSH
37716: CALL_OW 251
37720: PUSH
37721: LD_VAR 0 3
37725: PUSH
37726: LD_VAR 0 4
37730: ARRAY
37731: PPUSH
37732: CALL_OW 254
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: LIST
37741: LIST
37742: PUSH
37743: EMPTY
37744: LIST
37745: ADD
37746: ST_TO_ADDR
37747: GO 37660
37749: POP
37750: POP
// result := list ;
37751: LD_ADDR_VAR 0 2
37755: PUSH
37756: LD_VAR 0 5
37760: ST_TO_ADDR
// end ;
37761: LD_VAR 0 2
37765: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
37766: LD_INT 0
37768: PPUSH
37769: PPUSH
37770: PPUSH
37771: PPUSH
37772: PPUSH
37773: PPUSH
37774: PPUSH
// if not factory then
37775: LD_VAR 0 1
37779: NOT
37780: IFFALSE 37784
// exit ;
37782: GO 38377
// if control = control_apeman then
37784: LD_VAR 0 4
37788: PUSH
37789: LD_INT 5
37791: EQUAL
37792: IFFALSE 37901
// begin tmp := UnitsInside ( factory ) ;
37794: LD_ADDR_VAR 0 8
37798: PUSH
37799: LD_VAR 0 1
37803: PPUSH
37804: CALL_OW 313
37808: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
37809: LD_VAR 0 8
37813: PPUSH
37814: LD_INT 25
37816: PUSH
37817: LD_INT 12
37819: PUSH
37820: EMPTY
37821: LIST
37822: LIST
37823: PPUSH
37824: CALL_OW 72
37828: NOT
37829: IFFALSE 37839
// control := control_manual ;
37831: LD_ADDR_VAR 0 4
37835: PUSH
37836: LD_INT 1
37838: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
37839: LD_ADDR_VAR 0 8
37843: PUSH
37844: LD_VAR 0 1
37848: PPUSH
37849: CALL 37536 0 1
37853: ST_TO_ADDR
// if tmp then
37854: LD_VAR 0 8
37858: IFFALSE 37901
// begin for i in tmp do
37860: LD_ADDR_VAR 0 7
37864: PUSH
37865: LD_VAR 0 8
37869: PUSH
37870: FOR_IN
37871: IFFALSE 37899
// if i [ 1 ] = b_ext_radio then
37873: LD_VAR 0 7
37877: PUSH
37878: LD_INT 1
37880: ARRAY
37881: PUSH
37882: LD_INT 22
37884: EQUAL
37885: IFFALSE 37897
// begin control := control_remote ;
37887: LD_ADDR_VAR 0 4
37891: PUSH
37892: LD_INT 2
37894: ST_TO_ADDR
// break ;
37895: GO 37899
// end ;
37897: GO 37870
37899: POP
37900: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
37901: LD_VAR 0 1
37905: PPUSH
37906: LD_VAR 0 2
37910: PPUSH
37911: LD_VAR 0 3
37915: PPUSH
37916: LD_VAR 0 4
37920: PPUSH
37921: LD_VAR 0 5
37925: PPUSH
37926: CALL_OW 448
37930: IFFALSE 37965
// begin result := [ chassis , engine , control , weapon ] ;
37932: LD_ADDR_VAR 0 6
37936: PUSH
37937: LD_VAR 0 2
37941: PUSH
37942: LD_VAR 0 3
37946: PUSH
37947: LD_VAR 0 4
37951: PUSH
37952: LD_VAR 0 5
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: LIST
37961: LIST
37962: ST_TO_ADDR
// exit ;
37963: GO 38377
// end ; _chassis := AvailableChassisList ( factory ) ;
37965: LD_ADDR_VAR 0 9
37969: PUSH
37970: LD_VAR 0 1
37974: PPUSH
37975: CALL_OW 475
37979: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
37980: LD_ADDR_VAR 0 11
37984: PUSH
37985: LD_VAR 0 1
37989: PPUSH
37990: CALL_OW 476
37994: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
37995: LD_ADDR_VAR 0 12
37999: PUSH
38000: LD_VAR 0 1
38004: PPUSH
38005: CALL_OW 477
38009: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
38010: LD_ADDR_VAR 0 10
38014: PUSH
38015: LD_VAR 0 1
38019: PPUSH
38020: CALL_OW 478
38024: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
38025: LD_VAR 0 9
38029: NOT
38030: PUSH
38031: LD_VAR 0 11
38035: NOT
38036: OR
38037: PUSH
38038: LD_VAR 0 12
38042: NOT
38043: OR
38044: PUSH
38045: LD_VAR 0 10
38049: NOT
38050: OR
38051: IFFALSE 38086
// begin result := [ chassis , engine , control , weapon ] ;
38053: LD_ADDR_VAR 0 6
38057: PUSH
38058: LD_VAR 0 2
38062: PUSH
38063: LD_VAR 0 3
38067: PUSH
38068: LD_VAR 0 4
38072: PUSH
38073: LD_VAR 0 5
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: LIST
38082: LIST
38083: ST_TO_ADDR
// exit ;
38084: GO 38377
// end ; if not chassis in _chassis then
38086: LD_VAR 0 2
38090: PUSH
38091: LD_VAR 0 9
38095: IN
38096: NOT
38097: IFFALSE 38123
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
38099: LD_ADDR_VAR 0 2
38103: PUSH
38104: LD_VAR 0 9
38108: PUSH
38109: LD_INT 1
38111: PPUSH
38112: LD_VAR 0 9
38116: PPUSH
38117: CALL_OW 12
38121: ARRAY
38122: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
38123: LD_VAR 0 2
38127: PPUSH
38128: LD_VAR 0 3
38132: PPUSH
38133: CALL 38382 0 2
38137: NOT
38138: IFFALSE 38197
// repeat engine := _engine [ 1 ] ;
38140: LD_ADDR_VAR 0 3
38144: PUSH
38145: LD_VAR 0 11
38149: PUSH
38150: LD_INT 1
38152: ARRAY
38153: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
38154: LD_ADDR_VAR 0 11
38158: PUSH
38159: LD_VAR 0 11
38163: PPUSH
38164: LD_INT 1
38166: PPUSH
38167: CALL_OW 3
38171: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
38172: LD_VAR 0 2
38176: PPUSH
38177: LD_VAR 0 3
38181: PPUSH
38182: CALL 38382 0 2
38186: PUSH
38187: LD_VAR 0 11
38191: PUSH
38192: EMPTY
38193: EQUAL
38194: OR
38195: IFFALSE 38140
// if not control in _control then
38197: LD_VAR 0 4
38201: PUSH
38202: LD_VAR 0 12
38206: IN
38207: NOT
38208: IFFALSE 38234
// control := _control [ rand ( 1 , _control ) ] ;
38210: LD_ADDR_VAR 0 4
38214: PUSH
38215: LD_VAR 0 12
38219: PUSH
38220: LD_INT 1
38222: PPUSH
38223: LD_VAR 0 12
38227: PPUSH
38228: CALL_OW 12
38232: ARRAY
38233: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
38234: LD_VAR 0 2
38238: PPUSH
38239: LD_VAR 0 5
38243: PPUSH
38244: CALL 38602 0 2
38248: NOT
38249: IFFALSE 38308
// repeat weapon := _weapon [ 1 ] ;
38251: LD_ADDR_VAR 0 5
38255: PUSH
38256: LD_VAR 0 10
38260: PUSH
38261: LD_INT 1
38263: ARRAY
38264: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
38265: LD_ADDR_VAR 0 10
38269: PUSH
38270: LD_VAR 0 10
38274: PPUSH
38275: LD_INT 1
38277: PPUSH
38278: CALL_OW 3
38282: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
38283: LD_VAR 0 2
38287: PPUSH
38288: LD_VAR 0 5
38292: PPUSH
38293: CALL 38602 0 2
38297: PUSH
38298: LD_VAR 0 10
38302: PUSH
38303: EMPTY
38304: EQUAL
38305: OR
38306: IFFALSE 38251
// result := [ ] ;
38308: LD_ADDR_VAR 0 6
38312: PUSH
38313: EMPTY
38314: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38315: LD_VAR 0 1
38319: PPUSH
38320: LD_VAR 0 2
38324: PPUSH
38325: LD_VAR 0 3
38329: PPUSH
38330: LD_VAR 0 4
38334: PPUSH
38335: LD_VAR 0 5
38339: PPUSH
38340: CALL_OW 448
38344: IFFALSE 38377
// result := [ chassis , engine , control , weapon ] ;
38346: LD_ADDR_VAR 0 6
38350: PUSH
38351: LD_VAR 0 2
38355: PUSH
38356: LD_VAR 0 3
38360: PUSH
38361: LD_VAR 0 4
38365: PUSH
38366: LD_VAR 0 5
38370: PUSH
38371: EMPTY
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: ST_TO_ADDR
// end ;
38377: LD_VAR 0 6
38381: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
38382: LD_INT 0
38384: PPUSH
// if not chassis or not engine then
38385: LD_VAR 0 1
38389: NOT
38390: PUSH
38391: LD_VAR 0 2
38395: NOT
38396: OR
38397: IFFALSE 38401
// exit ;
38399: GO 38597
// case engine of engine_solar :
38401: LD_VAR 0 2
38405: PUSH
38406: LD_INT 2
38408: DOUBLE
38409: EQUAL
38410: IFTRUE 38414
38412: GO 38452
38414: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
38415: LD_ADDR_VAR 0 3
38419: PUSH
38420: LD_INT 11
38422: PUSH
38423: LD_INT 12
38425: PUSH
38426: LD_INT 13
38428: PUSH
38429: LD_INT 14
38431: PUSH
38432: LD_INT 1
38434: PUSH
38435: LD_INT 2
38437: PUSH
38438: LD_INT 3
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: ST_TO_ADDR
38450: GO 38581
38452: LD_INT 1
38454: DOUBLE
38455: EQUAL
38456: IFTRUE 38460
38458: GO 38522
38460: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
38461: LD_ADDR_VAR 0 3
38465: PUSH
38466: LD_INT 11
38468: PUSH
38469: LD_INT 12
38471: PUSH
38472: LD_INT 13
38474: PUSH
38475: LD_INT 14
38477: PUSH
38478: LD_INT 1
38480: PUSH
38481: LD_INT 2
38483: PUSH
38484: LD_INT 3
38486: PUSH
38487: LD_INT 4
38489: PUSH
38490: LD_INT 5
38492: PUSH
38493: LD_INT 21
38495: PUSH
38496: LD_INT 23
38498: PUSH
38499: LD_INT 22
38501: PUSH
38502: LD_INT 24
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: LIST
38509: LIST
38510: LIST
38511: LIST
38512: LIST
38513: LIST
38514: LIST
38515: LIST
38516: LIST
38517: LIST
38518: LIST
38519: ST_TO_ADDR
38520: GO 38581
38522: LD_INT 3
38524: DOUBLE
38525: EQUAL
38526: IFTRUE 38530
38528: GO 38580
38530: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38531: LD_ADDR_VAR 0 3
38535: PUSH
38536: LD_INT 13
38538: PUSH
38539: LD_INT 14
38541: PUSH
38542: LD_INT 2
38544: PUSH
38545: LD_INT 3
38547: PUSH
38548: LD_INT 4
38550: PUSH
38551: LD_INT 5
38553: PUSH
38554: LD_INT 21
38556: PUSH
38557: LD_INT 22
38559: PUSH
38560: LD_INT 23
38562: PUSH
38563: LD_INT 24
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: LIST
38570: LIST
38571: LIST
38572: LIST
38573: LIST
38574: LIST
38575: LIST
38576: LIST
38577: ST_TO_ADDR
38578: GO 38581
38580: POP
// result := ( chassis in result ) ;
38581: LD_ADDR_VAR 0 3
38585: PUSH
38586: LD_VAR 0 1
38590: PUSH
38591: LD_VAR 0 3
38595: IN
38596: ST_TO_ADDR
// end ;
38597: LD_VAR 0 3
38601: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
38602: LD_INT 0
38604: PPUSH
// if not chassis or not weapon then
38605: LD_VAR 0 1
38609: NOT
38610: PUSH
38611: LD_VAR 0 2
38615: NOT
38616: OR
38617: IFFALSE 38621
// exit ;
38619: GO 39683
// case weapon of us_machine_gun :
38621: LD_VAR 0 2
38625: PUSH
38626: LD_INT 2
38628: DOUBLE
38629: EQUAL
38630: IFTRUE 38634
38632: GO 38664
38634: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
38635: LD_ADDR_VAR 0 3
38639: PUSH
38640: LD_INT 1
38642: PUSH
38643: LD_INT 2
38645: PUSH
38646: LD_INT 3
38648: PUSH
38649: LD_INT 4
38651: PUSH
38652: LD_INT 5
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: LIST
38659: LIST
38660: LIST
38661: ST_TO_ADDR
38662: GO 39667
38664: LD_INT 3
38666: DOUBLE
38667: EQUAL
38668: IFTRUE 38672
38670: GO 38702
38672: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
38673: LD_ADDR_VAR 0 3
38677: PUSH
38678: LD_INT 1
38680: PUSH
38681: LD_INT 2
38683: PUSH
38684: LD_INT 3
38686: PUSH
38687: LD_INT 4
38689: PUSH
38690: LD_INT 5
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: LIST
38697: LIST
38698: LIST
38699: ST_TO_ADDR
38700: GO 39667
38702: LD_INT 11
38704: DOUBLE
38705: EQUAL
38706: IFTRUE 38710
38708: GO 38740
38710: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
38711: LD_ADDR_VAR 0 3
38715: PUSH
38716: LD_INT 1
38718: PUSH
38719: LD_INT 2
38721: PUSH
38722: LD_INT 3
38724: PUSH
38725: LD_INT 4
38727: PUSH
38728: LD_INT 5
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: LIST
38735: LIST
38736: LIST
38737: ST_TO_ADDR
38738: GO 39667
38740: LD_INT 4
38742: DOUBLE
38743: EQUAL
38744: IFTRUE 38748
38746: GO 38774
38748: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
38749: LD_ADDR_VAR 0 3
38753: PUSH
38754: LD_INT 2
38756: PUSH
38757: LD_INT 3
38759: PUSH
38760: LD_INT 4
38762: PUSH
38763: LD_INT 5
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: LIST
38770: LIST
38771: ST_TO_ADDR
38772: GO 39667
38774: LD_INT 5
38776: DOUBLE
38777: EQUAL
38778: IFTRUE 38782
38780: GO 38808
38782: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
38783: LD_ADDR_VAR 0 3
38787: PUSH
38788: LD_INT 2
38790: PUSH
38791: LD_INT 3
38793: PUSH
38794: LD_INT 4
38796: PUSH
38797: LD_INT 5
38799: PUSH
38800: EMPTY
38801: LIST
38802: LIST
38803: LIST
38804: LIST
38805: ST_TO_ADDR
38806: GO 39667
38808: LD_INT 9
38810: DOUBLE
38811: EQUAL
38812: IFTRUE 38816
38814: GO 38842
38816: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
38817: LD_ADDR_VAR 0 3
38821: PUSH
38822: LD_INT 2
38824: PUSH
38825: LD_INT 3
38827: PUSH
38828: LD_INT 4
38830: PUSH
38831: LD_INT 5
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: ST_TO_ADDR
38840: GO 39667
38842: LD_INT 7
38844: DOUBLE
38845: EQUAL
38846: IFTRUE 38850
38848: GO 38876
38850: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
38851: LD_ADDR_VAR 0 3
38855: PUSH
38856: LD_INT 2
38858: PUSH
38859: LD_INT 3
38861: PUSH
38862: LD_INT 4
38864: PUSH
38865: LD_INT 5
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: LIST
38872: LIST
38873: ST_TO_ADDR
38874: GO 39667
38876: LD_INT 12
38878: DOUBLE
38879: EQUAL
38880: IFTRUE 38884
38882: GO 38910
38884: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
38885: LD_ADDR_VAR 0 3
38889: PUSH
38890: LD_INT 2
38892: PUSH
38893: LD_INT 3
38895: PUSH
38896: LD_INT 4
38898: PUSH
38899: LD_INT 5
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: LIST
38906: LIST
38907: ST_TO_ADDR
38908: GO 39667
38910: LD_INT 13
38912: DOUBLE
38913: EQUAL
38914: IFTRUE 38918
38916: GO 38944
38918: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
38919: LD_ADDR_VAR 0 3
38923: PUSH
38924: LD_INT 2
38926: PUSH
38927: LD_INT 3
38929: PUSH
38930: LD_INT 4
38932: PUSH
38933: LD_INT 5
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: ST_TO_ADDR
38942: GO 39667
38944: LD_INT 14
38946: DOUBLE
38947: EQUAL
38948: IFTRUE 38952
38950: GO 38970
38952: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
38953: LD_ADDR_VAR 0 3
38957: PUSH
38958: LD_INT 4
38960: PUSH
38961: LD_INT 5
38963: PUSH
38964: EMPTY
38965: LIST
38966: LIST
38967: ST_TO_ADDR
38968: GO 39667
38970: LD_INT 6
38972: DOUBLE
38973: EQUAL
38974: IFTRUE 38978
38976: GO 38996
38978: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
38979: LD_ADDR_VAR 0 3
38983: PUSH
38984: LD_INT 4
38986: PUSH
38987: LD_INT 5
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: ST_TO_ADDR
38994: GO 39667
38996: LD_INT 10
38998: DOUBLE
38999: EQUAL
39000: IFTRUE 39004
39002: GO 39022
39004: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
39005: LD_ADDR_VAR 0 3
39009: PUSH
39010: LD_INT 4
39012: PUSH
39013: LD_INT 5
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: ST_TO_ADDR
39020: GO 39667
39022: LD_INT 22
39024: DOUBLE
39025: EQUAL
39026: IFTRUE 39030
39028: GO 39056
39030: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
39031: LD_ADDR_VAR 0 3
39035: PUSH
39036: LD_INT 11
39038: PUSH
39039: LD_INT 12
39041: PUSH
39042: LD_INT 13
39044: PUSH
39045: LD_INT 14
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: LIST
39052: LIST
39053: ST_TO_ADDR
39054: GO 39667
39056: LD_INT 23
39058: DOUBLE
39059: EQUAL
39060: IFTRUE 39064
39062: GO 39090
39064: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
39065: LD_ADDR_VAR 0 3
39069: PUSH
39070: LD_INT 11
39072: PUSH
39073: LD_INT 12
39075: PUSH
39076: LD_INT 13
39078: PUSH
39079: LD_INT 14
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: LIST
39086: LIST
39087: ST_TO_ADDR
39088: GO 39667
39090: LD_INT 24
39092: DOUBLE
39093: EQUAL
39094: IFTRUE 39098
39096: GO 39124
39098: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
39099: LD_ADDR_VAR 0 3
39103: PUSH
39104: LD_INT 11
39106: PUSH
39107: LD_INT 12
39109: PUSH
39110: LD_INT 13
39112: PUSH
39113: LD_INT 14
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: ST_TO_ADDR
39122: GO 39667
39124: LD_INT 30
39126: DOUBLE
39127: EQUAL
39128: IFTRUE 39132
39130: GO 39158
39132: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
39133: LD_ADDR_VAR 0 3
39137: PUSH
39138: LD_INT 11
39140: PUSH
39141: LD_INT 12
39143: PUSH
39144: LD_INT 13
39146: PUSH
39147: LD_INT 14
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: ST_TO_ADDR
39156: GO 39667
39158: LD_INT 25
39160: DOUBLE
39161: EQUAL
39162: IFTRUE 39166
39164: GO 39184
39166: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
39167: LD_ADDR_VAR 0 3
39171: PUSH
39172: LD_INT 13
39174: PUSH
39175: LD_INT 14
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: ST_TO_ADDR
39182: GO 39667
39184: LD_INT 27
39186: DOUBLE
39187: EQUAL
39188: IFTRUE 39192
39190: GO 39210
39192: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
39193: LD_ADDR_VAR 0 3
39197: PUSH
39198: LD_INT 13
39200: PUSH
39201: LD_INT 14
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: ST_TO_ADDR
39208: GO 39667
39210: LD_EXP 43
39214: DOUBLE
39215: EQUAL
39216: IFTRUE 39220
39218: GO 39246
39220: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
39221: LD_ADDR_VAR 0 3
39225: PUSH
39226: LD_INT 11
39228: PUSH
39229: LD_INT 12
39231: PUSH
39232: LD_INT 13
39234: PUSH
39235: LD_INT 14
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: ST_TO_ADDR
39244: GO 39667
39246: LD_INT 28
39248: DOUBLE
39249: EQUAL
39250: IFTRUE 39254
39252: GO 39272
39254: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
39255: LD_ADDR_VAR 0 3
39259: PUSH
39260: LD_INT 13
39262: PUSH
39263: LD_INT 14
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: ST_TO_ADDR
39270: GO 39667
39272: LD_INT 29
39274: DOUBLE
39275: EQUAL
39276: IFTRUE 39280
39278: GO 39298
39280: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
39281: LD_ADDR_VAR 0 3
39285: PUSH
39286: LD_INT 13
39288: PUSH
39289: LD_INT 14
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: ST_TO_ADDR
39296: GO 39667
39298: LD_INT 31
39300: DOUBLE
39301: EQUAL
39302: IFTRUE 39306
39304: GO 39324
39306: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
39307: LD_ADDR_VAR 0 3
39311: PUSH
39312: LD_INT 13
39314: PUSH
39315: LD_INT 14
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: ST_TO_ADDR
39322: GO 39667
39324: LD_INT 26
39326: DOUBLE
39327: EQUAL
39328: IFTRUE 39332
39330: GO 39350
39332: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
39333: LD_ADDR_VAR 0 3
39337: PUSH
39338: LD_INT 13
39340: PUSH
39341: LD_INT 14
39343: PUSH
39344: EMPTY
39345: LIST
39346: LIST
39347: ST_TO_ADDR
39348: GO 39667
39350: LD_INT 42
39352: DOUBLE
39353: EQUAL
39354: IFTRUE 39358
39356: GO 39384
39358: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
39359: LD_ADDR_VAR 0 3
39363: PUSH
39364: LD_INT 21
39366: PUSH
39367: LD_INT 22
39369: PUSH
39370: LD_INT 23
39372: PUSH
39373: LD_INT 24
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: LIST
39380: LIST
39381: ST_TO_ADDR
39382: GO 39667
39384: LD_INT 43
39386: DOUBLE
39387: EQUAL
39388: IFTRUE 39392
39390: GO 39418
39392: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
39393: LD_ADDR_VAR 0 3
39397: PUSH
39398: LD_INT 21
39400: PUSH
39401: LD_INT 22
39403: PUSH
39404: LD_INT 23
39406: PUSH
39407: LD_INT 24
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: ST_TO_ADDR
39416: GO 39667
39418: LD_INT 44
39420: DOUBLE
39421: EQUAL
39422: IFTRUE 39426
39424: GO 39452
39426: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
39427: LD_ADDR_VAR 0 3
39431: PUSH
39432: LD_INT 21
39434: PUSH
39435: LD_INT 22
39437: PUSH
39438: LD_INT 23
39440: PUSH
39441: LD_INT 24
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: LIST
39448: LIST
39449: ST_TO_ADDR
39450: GO 39667
39452: LD_INT 45
39454: DOUBLE
39455: EQUAL
39456: IFTRUE 39460
39458: GO 39486
39460: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
39461: LD_ADDR_VAR 0 3
39465: PUSH
39466: LD_INT 21
39468: PUSH
39469: LD_INT 22
39471: PUSH
39472: LD_INT 23
39474: PUSH
39475: LD_INT 24
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: LIST
39482: LIST
39483: ST_TO_ADDR
39484: GO 39667
39486: LD_INT 49
39488: DOUBLE
39489: EQUAL
39490: IFTRUE 39494
39492: GO 39520
39494: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
39495: LD_ADDR_VAR 0 3
39499: PUSH
39500: LD_INT 21
39502: PUSH
39503: LD_INT 22
39505: PUSH
39506: LD_INT 23
39508: PUSH
39509: LD_INT 24
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: ST_TO_ADDR
39518: GO 39667
39520: LD_INT 51
39522: DOUBLE
39523: EQUAL
39524: IFTRUE 39528
39526: GO 39554
39528: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
39529: LD_ADDR_VAR 0 3
39533: PUSH
39534: LD_INT 21
39536: PUSH
39537: LD_INT 22
39539: PUSH
39540: LD_INT 23
39542: PUSH
39543: LD_INT 24
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: ST_TO_ADDR
39552: GO 39667
39554: LD_INT 52
39556: DOUBLE
39557: EQUAL
39558: IFTRUE 39562
39560: GO 39588
39562: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
39563: LD_ADDR_VAR 0 3
39567: PUSH
39568: LD_INT 21
39570: PUSH
39571: LD_INT 22
39573: PUSH
39574: LD_INT 23
39576: PUSH
39577: LD_INT 24
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: ST_TO_ADDR
39586: GO 39667
39588: LD_INT 53
39590: DOUBLE
39591: EQUAL
39592: IFTRUE 39596
39594: GO 39614
39596: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
39597: LD_ADDR_VAR 0 3
39601: PUSH
39602: LD_INT 23
39604: PUSH
39605: LD_INT 24
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: ST_TO_ADDR
39612: GO 39667
39614: LD_INT 46
39616: DOUBLE
39617: EQUAL
39618: IFTRUE 39622
39620: GO 39640
39622: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
39623: LD_ADDR_VAR 0 3
39627: PUSH
39628: LD_INT 23
39630: PUSH
39631: LD_INT 24
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: ST_TO_ADDR
39638: GO 39667
39640: LD_INT 47
39642: DOUBLE
39643: EQUAL
39644: IFTRUE 39648
39646: GO 39666
39648: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39649: LD_ADDR_VAR 0 3
39653: PUSH
39654: LD_INT 23
39656: PUSH
39657: LD_INT 24
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: ST_TO_ADDR
39664: GO 39667
39666: POP
// result := ( chassis in result ) ;
39667: LD_ADDR_VAR 0 3
39671: PUSH
39672: LD_VAR 0 1
39676: PUSH
39677: LD_VAR 0 3
39681: IN
39682: ST_TO_ADDR
// end ;
39683: LD_VAR 0 3
39687: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
39688: LD_INT 0
39690: PPUSH
39691: PPUSH
39692: PPUSH
39693: PPUSH
39694: PPUSH
39695: PPUSH
39696: PPUSH
// result := array ;
39697: LD_ADDR_VAR 0 5
39701: PUSH
39702: LD_VAR 0 1
39706: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
39707: LD_VAR 0 1
39711: NOT
39712: PUSH
39713: LD_VAR 0 2
39717: NOT
39718: OR
39719: PUSH
39720: LD_VAR 0 3
39724: NOT
39725: OR
39726: PUSH
39727: LD_VAR 0 2
39731: PUSH
39732: LD_VAR 0 1
39736: GREATER
39737: OR
39738: PUSH
39739: LD_VAR 0 3
39743: PUSH
39744: LD_VAR 0 1
39748: GREATER
39749: OR
39750: IFFALSE 39754
// exit ;
39752: GO 40050
// if direction then
39754: LD_VAR 0 4
39758: IFFALSE 39822
// begin d := 1 ;
39760: LD_ADDR_VAR 0 9
39764: PUSH
39765: LD_INT 1
39767: ST_TO_ADDR
// if i_from > i_to then
39768: LD_VAR 0 2
39772: PUSH
39773: LD_VAR 0 3
39777: GREATER
39778: IFFALSE 39804
// length := ( array - i_from ) + i_to else
39780: LD_ADDR_VAR 0 11
39784: PUSH
39785: LD_VAR 0 1
39789: PUSH
39790: LD_VAR 0 2
39794: MINUS
39795: PUSH
39796: LD_VAR 0 3
39800: PLUS
39801: ST_TO_ADDR
39802: GO 39820
// length := i_to - i_from ;
39804: LD_ADDR_VAR 0 11
39808: PUSH
39809: LD_VAR 0 3
39813: PUSH
39814: LD_VAR 0 2
39818: MINUS
39819: ST_TO_ADDR
// end else
39820: GO 39883
// begin d := - 1 ;
39822: LD_ADDR_VAR 0 9
39826: PUSH
39827: LD_INT 1
39829: NEG
39830: ST_TO_ADDR
// if i_from > i_to then
39831: LD_VAR 0 2
39835: PUSH
39836: LD_VAR 0 3
39840: GREATER
39841: IFFALSE 39861
// length := i_from - i_to else
39843: LD_ADDR_VAR 0 11
39847: PUSH
39848: LD_VAR 0 2
39852: PUSH
39853: LD_VAR 0 3
39857: MINUS
39858: ST_TO_ADDR
39859: GO 39883
// length := ( array - i_to ) + i_from ;
39861: LD_ADDR_VAR 0 11
39865: PUSH
39866: LD_VAR 0 1
39870: PUSH
39871: LD_VAR 0 3
39875: MINUS
39876: PUSH
39877: LD_VAR 0 2
39881: PLUS
39882: ST_TO_ADDR
// end ; if not length then
39883: LD_VAR 0 11
39887: NOT
39888: IFFALSE 39892
// exit ;
39890: GO 40050
// tmp := array ;
39892: LD_ADDR_VAR 0 10
39896: PUSH
39897: LD_VAR 0 1
39901: ST_TO_ADDR
// for i = 1 to length do
39902: LD_ADDR_VAR 0 6
39906: PUSH
39907: DOUBLE
39908: LD_INT 1
39910: DEC
39911: ST_TO_ADDR
39912: LD_VAR 0 11
39916: PUSH
39917: FOR_TO
39918: IFFALSE 40038
// begin for j = 1 to array do
39920: LD_ADDR_VAR 0 7
39924: PUSH
39925: DOUBLE
39926: LD_INT 1
39928: DEC
39929: ST_TO_ADDR
39930: LD_VAR 0 1
39934: PUSH
39935: FOR_TO
39936: IFFALSE 40024
// begin k := j + d ;
39938: LD_ADDR_VAR 0 8
39942: PUSH
39943: LD_VAR 0 7
39947: PUSH
39948: LD_VAR 0 9
39952: PLUS
39953: ST_TO_ADDR
// if k > array then
39954: LD_VAR 0 8
39958: PUSH
39959: LD_VAR 0 1
39963: GREATER
39964: IFFALSE 39974
// k := 1 ;
39966: LD_ADDR_VAR 0 8
39970: PUSH
39971: LD_INT 1
39973: ST_TO_ADDR
// if not k then
39974: LD_VAR 0 8
39978: NOT
39979: IFFALSE 39991
// k := array ;
39981: LD_ADDR_VAR 0 8
39985: PUSH
39986: LD_VAR 0 1
39990: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
39991: LD_ADDR_VAR 0 10
39995: PUSH
39996: LD_VAR 0 10
40000: PPUSH
40001: LD_VAR 0 8
40005: PPUSH
40006: LD_VAR 0 1
40010: PUSH
40011: LD_VAR 0 7
40015: ARRAY
40016: PPUSH
40017: CALL_OW 1
40021: ST_TO_ADDR
// end ;
40022: GO 39935
40024: POP
40025: POP
// array := tmp ;
40026: LD_ADDR_VAR 0 1
40030: PUSH
40031: LD_VAR 0 10
40035: ST_TO_ADDR
// end ;
40036: GO 39917
40038: POP
40039: POP
// result := array ;
40040: LD_ADDR_VAR 0 5
40044: PUSH
40045: LD_VAR 0 1
40049: ST_TO_ADDR
// end ;
40050: LD_VAR 0 5
40054: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
40055: LD_INT 0
40057: PPUSH
40058: PPUSH
// result := 0 ;
40059: LD_ADDR_VAR 0 3
40063: PUSH
40064: LD_INT 0
40066: ST_TO_ADDR
// if not array or not value in array then
40067: LD_VAR 0 1
40071: NOT
40072: PUSH
40073: LD_VAR 0 2
40077: PUSH
40078: LD_VAR 0 1
40082: IN
40083: NOT
40084: OR
40085: IFFALSE 40089
// exit ;
40087: GO 40143
// for i = 1 to array do
40089: LD_ADDR_VAR 0 4
40093: PUSH
40094: DOUBLE
40095: LD_INT 1
40097: DEC
40098: ST_TO_ADDR
40099: LD_VAR 0 1
40103: PUSH
40104: FOR_TO
40105: IFFALSE 40141
// if value = array [ i ] then
40107: LD_VAR 0 2
40111: PUSH
40112: LD_VAR 0 1
40116: PUSH
40117: LD_VAR 0 4
40121: ARRAY
40122: EQUAL
40123: IFFALSE 40139
// begin result := i ;
40125: LD_ADDR_VAR 0 3
40129: PUSH
40130: LD_VAR 0 4
40134: ST_TO_ADDR
// exit ;
40135: POP
40136: POP
40137: GO 40143
// end ;
40139: GO 40104
40141: POP
40142: POP
// end ;
40143: LD_VAR 0 3
40147: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
40148: LD_INT 0
40150: PPUSH
// vc_chassis := chassis ;
40151: LD_ADDR_OWVAR 37
40155: PUSH
40156: LD_VAR 0 1
40160: ST_TO_ADDR
// vc_engine := engine ;
40161: LD_ADDR_OWVAR 39
40165: PUSH
40166: LD_VAR 0 2
40170: ST_TO_ADDR
// vc_control := control ;
40171: LD_ADDR_OWVAR 38
40175: PUSH
40176: LD_VAR 0 3
40180: ST_TO_ADDR
// vc_weapon := weapon ;
40181: LD_ADDR_OWVAR 40
40185: PUSH
40186: LD_VAR 0 4
40190: ST_TO_ADDR
// vc_fuel_battery := fuel ;
40191: LD_ADDR_OWVAR 41
40195: PUSH
40196: LD_VAR 0 5
40200: ST_TO_ADDR
// end ;
40201: LD_VAR 0 6
40205: RET
// export function WantPlant ( unit ) ; var task ; begin
40206: LD_INT 0
40208: PPUSH
40209: PPUSH
// result := false ;
40210: LD_ADDR_VAR 0 2
40214: PUSH
40215: LD_INT 0
40217: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
40218: LD_ADDR_VAR 0 3
40222: PUSH
40223: LD_VAR 0 1
40227: PPUSH
40228: CALL_OW 437
40232: ST_TO_ADDR
// if task then
40233: LD_VAR 0 3
40237: IFFALSE 40265
// if task [ 1 ] [ 1 ] = p then
40239: LD_VAR 0 3
40243: PUSH
40244: LD_INT 1
40246: ARRAY
40247: PUSH
40248: LD_INT 1
40250: ARRAY
40251: PUSH
40252: LD_STRING p
40254: EQUAL
40255: IFFALSE 40265
// result := true ;
40257: LD_ADDR_VAR 0 2
40261: PUSH
40262: LD_INT 1
40264: ST_TO_ADDR
// end ;
40265: LD_VAR 0 2
40269: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
40270: LD_INT 0
40272: PPUSH
40273: PPUSH
40274: PPUSH
40275: PPUSH
// if pos < 1 then
40276: LD_VAR 0 2
40280: PUSH
40281: LD_INT 1
40283: LESS
40284: IFFALSE 40288
// exit ;
40286: GO 40591
// if pos = 1 then
40288: LD_VAR 0 2
40292: PUSH
40293: LD_INT 1
40295: EQUAL
40296: IFFALSE 40329
// result := Replace ( arr , pos [ 1 ] , value ) else
40298: LD_ADDR_VAR 0 4
40302: PUSH
40303: LD_VAR 0 1
40307: PPUSH
40308: LD_VAR 0 2
40312: PUSH
40313: LD_INT 1
40315: ARRAY
40316: PPUSH
40317: LD_VAR 0 3
40321: PPUSH
40322: CALL_OW 1
40326: ST_TO_ADDR
40327: GO 40591
// begin tmp := arr ;
40329: LD_ADDR_VAR 0 6
40333: PUSH
40334: LD_VAR 0 1
40338: ST_TO_ADDR
// s_arr := [ tmp ] ;
40339: LD_ADDR_VAR 0 7
40343: PUSH
40344: LD_VAR 0 6
40348: PUSH
40349: EMPTY
40350: LIST
40351: ST_TO_ADDR
// for i = 1 to pos - 1 do
40352: LD_ADDR_VAR 0 5
40356: PUSH
40357: DOUBLE
40358: LD_INT 1
40360: DEC
40361: ST_TO_ADDR
40362: LD_VAR 0 2
40366: PUSH
40367: LD_INT 1
40369: MINUS
40370: PUSH
40371: FOR_TO
40372: IFFALSE 40417
// begin tmp := tmp [ pos [ i ] ] ;
40374: LD_ADDR_VAR 0 6
40378: PUSH
40379: LD_VAR 0 6
40383: PUSH
40384: LD_VAR 0 2
40388: PUSH
40389: LD_VAR 0 5
40393: ARRAY
40394: ARRAY
40395: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
40396: LD_ADDR_VAR 0 7
40400: PUSH
40401: LD_VAR 0 7
40405: PUSH
40406: LD_VAR 0 6
40410: PUSH
40411: EMPTY
40412: LIST
40413: ADD
40414: ST_TO_ADDR
// end ;
40415: GO 40371
40417: POP
40418: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
40419: LD_ADDR_VAR 0 6
40423: PUSH
40424: LD_VAR 0 6
40428: PPUSH
40429: LD_VAR 0 2
40433: PUSH
40434: LD_VAR 0 2
40438: ARRAY
40439: PPUSH
40440: LD_VAR 0 3
40444: PPUSH
40445: CALL_OW 1
40449: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
40450: LD_ADDR_VAR 0 7
40454: PUSH
40455: LD_VAR 0 7
40459: PPUSH
40460: LD_VAR 0 7
40464: PPUSH
40465: LD_VAR 0 6
40469: PPUSH
40470: CALL_OW 1
40474: ST_TO_ADDR
// for i = s_arr downto 2 do
40475: LD_ADDR_VAR 0 5
40479: PUSH
40480: DOUBLE
40481: LD_VAR 0 7
40485: INC
40486: ST_TO_ADDR
40487: LD_INT 2
40489: PUSH
40490: FOR_DOWNTO
40491: IFFALSE 40575
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
40493: LD_ADDR_VAR 0 6
40497: PUSH
40498: LD_VAR 0 7
40502: PUSH
40503: LD_VAR 0 5
40507: PUSH
40508: LD_INT 1
40510: MINUS
40511: ARRAY
40512: PPUSH
40513: LD_VAR 0 2
40517: PUSH
40518: LD_VAR 0 5
40522: PUSH
40523: LD_INT 1
40525: MINUS
40526: ARRAY
40527: PPUSH
40528: LD_VAR 0 7
40532: PUSH
40533: LD_VAR 0 5
40537: ARRAY
40538: PPUSH
40539: CALL_OW 1
40543: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
40544: LD_ADDR_VAR 0 7
40548: PUSH
40549: LD_VAR 0 7
40553: PPUSH
40554: LD_VAR 0 5
40558: PUSH
40559: LD_INT 1
40561: MINUS
40562: PPUSH
40563: LD_VAR 0 6
40567: PPUSH
40568: CALL_OW 1
40572: ST_TO_ADDR
// end ;
40573: GO 40490
40575: POP
40576: POP
// result := s_arr [ 1 ] ;
40577: LD_ADDR_VAR 0 4
40581: PUSH
40582: LD_VAR 0 7
40586: PUSH
40587: LD_INT 1
40589: ARRAY
40590: ST_TO_ADDR
// end ; end ;
40591: LD_VAR 0 4
40595: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
40596: LD_INT 0
40598: PPUSH
40599: PPUSH
// if not list then
40600: LD_VAR 0 1
40604: NOT
40605: IFFALSE 40609
// exit ;
40607: GO 40700
// i := list [ pos1 ] ;
40609: LD_ADDR_VAR 0 5
40613: PUSH
40614: LD_VAR 0 1
40618: PUSH
40619: LD_VAR 0 2
40623: ARRAY
40624: ST_TO_ADDR
// if not i then
40625: LD_VAR 0 5
40629: NOT
40630: IFFALSE 40634
// exit ;
40632: GO 40700
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
40634: LD_ADDR_VAR 0 1
40638: PUSH
40639: LD_VAR 0 1
40643: PPUSH
40644: LD_VAR 0 2
40648: PPUSH
40649: LD_VAR 0 1
40653: PUSH
40654: LD_VAR 0 3
40658: ARRAY
40659: PPUSH
40660: CALL_OW 1
40664: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
40665: LD_ADDR_VAR 0 1
40669: PUSH
40670: LD_VAR 0 1
40674: PPUSH
40675: LD_VAR 0 3
40679: PPUSH
40680: LD_VAR 0 5
40684: PPUSH
40685: CALL_OW 1
40689: ST_TO_ADDR
// result := list ;
40690: LD_ADDR_VAR 0 4
40694: PUSH
40695: LD_VAR 0 1
40699: ST_TO_ADDR
// end ;
40700: LD_VAR 0 4
40704: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
40705: LD_INT 0
40707: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
40708: LD_ADDR_VAR 0 5
40712: PUSH
40713: LD_VAR 0 1
40717: PPUSH
40718: CALL_OW 250
40722: PPUSH
40723: LD_VAR 0 1
40727: PPUSH
40728: CALL_OW 251
40732: PPUSH
40733: LD_VAR 0 2
40737: PPUSH
40738: LD_VAR 0 3
40742: PPUSH
40743: LD_VAR 0 4
40747: PPUSH
40748: CALL 40758 0 5
40752: ST_TO_ADDR
// end ;
40753: LD_VAR 0 5
40757: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
40758: LD_INT 0
40760: PPUSH
40761: PPUSH
40762: PPUSH
40763: PPUSH
// if not list then
40764: LD_VAR 0 3
40768: NOT
40769: IFFALSE 40773
// exit ;
40771: GO 41161
// result := [ ] ;
40773: LD_ADDR_VAR 0 6
40777: PUSH
40778: EMPTY
40779: ST_TO_ADDR
// for i in list do
40780: LD_ADDR_VAR 0 7
40784: PUSH
40785: LD_VAR 0 3
40789: PUSH
40790: FOR_IN
40791: IFFALSE 40993
// begin tmp := GetDistUnitXY ( i , x , y ) ;
40793: LD_ADDR_VAR 0 9
40797: PUSH
40798: LD_VAR 0 7
40802: PPUSH
40803: LD_VAR 0 1
40807: PPUSH
40808: LD_VAR 0 2
40812: PPUSH
40813: CALL_OW 297
40817: ST_TO_ADDR
// if not result then
40818: LD_VAR 0 6
40822: NOT
40823: IFFALSE 40849
// result := [ [ i , tmp ] ] else
40825: LD_ADDR_VAR 0 6
40829: PUSH
40830: LD_VAR 0 7
40834: PUSH
40835: LD_VAR 0 9
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: PUSH
40844: EMPTY
40845: LIST
40846: ST_TO_ADDR
40847: GO 40991
// begin if result [ result ] [ 2 ] < tmp then
40849: LD_VAR 0 6
40853: PUSH
40854: LD_VAR 0 6
40858: ARRAY
40859: PUSH
40860: LD_INT 2
40862: ARRAY
40863: PUSH
40864: LD_VAR 0 9
40868: LESS
40869: IFFALSE 40911
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
40871: LD_ADDR_VAR 0 6
40875: PUSH
40876: LD_VAR 0 6
40880: PPUSH
40881: LD_VAR 0 6
40885: PUSH
40886: LD_INT 1
40888: PLUS
40889: PPUSH
40890: LD_VAR 0 7
40894: PUSH
40895: LD_VAR 0 9
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PPUSH
40904: CALL_OW 2
40908: ST_TO_ADDR
40909: GO 40991
// for j = 1 to result do
40911: LD_ADDR_VAR 0 8
40915: PUSH
40916: DOUBLE
40917: LD_INT 1
40919: DEC
40920: ST_TO_ADDR
40921: LD_VAR 0 6
40925: PUSH
40926: FOR_TO
40927: IFFALSE 40989
// begin if tmp < result [ j ] [ 2 ] then
40929: LD_VAR 0 9
40933: PUSH
40934: LD_VAR 0 6
40938: PUSH
40939: LD_VAR 0 8
40943: ARRAY
40944: PUSH
40945: LD_INT 2
40947: ARRAY
40948: LESS
40949: IFFALSE 40987
// begin result := Insert ( result , j , [ i , tmp ] ) ;
40951: LD_ADDR_VAR 0 6
40955: PUSH
40956: LD_VAR 0 6
40960: PPUSH
40961: LD_VAR 0 8
40965: PPUSH
40966: LD_VAR 0 7
40970: PUSH
40971: LD_VAR 0 9
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PPUSH
40980: CALL_OW 2
40984: ST_TO_ADDR
// break ;
40985: GO 40989
// end ; end ;
40987: GO 40926
40989: POP
40990: POP
// end ; end ;
40991: GO 40790
40993: POP
40994: POP
// if result and not asc then
40995: LD_VAR 0 6
40999: PUSH
41000: LD_VAR 0 4
41004: NOT
41005: AND
41006: IFFALSE 41081
// begin tmp := result ;
41008: LD_ADDR_VAR 0 9
41012: PUSH
41013: LD_VAR 0 6
41017: ST_TO_ADDR
// for i = tmp downto 1 do
41018: LD_ADDR_VAR 0 7
41022: PUSH
41023: DOUBLE
41024: LD_VAR 0 9
41028: INC
41029: ST_TO_ADDR
41030: LD_INT 1
41032: PUSH
41033: FOR_DOWNTO
41034: IFFALSE 41079
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
41036: LD_ADDR_VAR 0 6
41040: PUSH
41041: LD_VAR 0 6
41045: PPUSH
41046: LD_VAR 0 9
41050: PUSH
41051: LD_VAR 0 7
41055: MINUS
41056: PUSH
41057: LD_INT 1
41059: PLUS
41060: PPUSH
41061: LD_VAR 0 9
41065: PUSH
41066: LD_VAR 0 7
41070: ARRAY
41071: PPUSH
41072: CALL_OW 1
41076: ST_TO_ADDR
41077: GO 41033
41079: POP
41080: POP
// end ; tmp := [ ] ;
41081: LD_ADDR_VAR 0 9
41085: PUSH
41086: EMPTY
41087: ST_TO_ADDR
// if mode then
41088: LD_VAR 0 5
41092: IFFALSE 41161
// begin for i = 1 to result do
41094: LD_ADDR_VAR 0 7
41098: PUSH
41099: DOUBLE
41100: LD_INT 1
41102: DEC
41103: ST_TO_ADDR
41104: LD_VAR 0 6
41108: PUSH
41109: FOR_TO
41110: IFFALSE 41149
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
41112: LD_ADDR_VAR 0 9
41116: PUSH
41117: LD_VAR 0 9
41121: PPUSH
41122: LD_VAR 0 7
41126: PPUSH
41127: LD_VAR 0 6
41131: PUSH
41132: LD_VAR 0 7
41136: ARRAY
41137: PUSH
41138: LD_INT 1
41140: ARRAY
41141: PPUSH
41142: CALL_OW 1
41146: ST_TO_ADDR
41147: GO 41109
41149: POP
41150: POP
// result := tmp ;
41151: LD_ADDR_VAR 0 6
41155: PUSH
41156: LD_VAR 0 9
41160: ST_TO_ADDR
// end ; end ;
41161: LD_VAR 0 6
41165: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
41166: LD_INT 0
41168: PPUSH
41169: PPUSH
41170: PPUSH
41171: PPUSH
41172: PPUSH
41173: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
41174: LD_ADDR_VAR 0 5
41178: PUSH
41179: LD_INT 0
41181: PUSH
41182: LD_INT 0
41184: PUSH
41185: LD_INT 0
41187: PUSH
41188: EMPTY
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: ST_TO_ADDR
// if not x or not y then
41196: LD_VAR 0 2
41200: NOT
41201: PUSH
41202: LD_VAR 0 3
41206: NOT
41207: OR
41208: IFFALSE 41212
// exit ;
41210: GO 42864
// if not range then
41212: LD_VAR 0 4
41216: NOT
41217: IFFALSE 41227
// range := 10 ;
41219: LD_ADDR_VAR 0 4
41223: PUSH
41224: LD_INT 10
41226: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41227: LD_ADDR_VAR 0 8
41231: PUSH
41232: LD_INT 81
41234: PUSH
41235: LD_VAR 0 1
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 92
41246: PUSH
41247: LD_VAR 0 2
41251: PUSH
41252: LD_VAR 0 3
41256: PUSH
41257: LD_VAR 0 4
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: LIST
41266: LIST
41267: PUSH
41268: LD_INT 3
41270: PUSH
41271: LD_INT 21
41273: PUSH
41274: LD_INT 3
41276: PUSH
41277: EMPTY
41278: LIST
41279: LIST
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: LIST
41289: PPUSH
41290: CALL_OW 69
41294: ST_TO_ADDR
// if not tmp then
41295: LD_VAR 0 8
41299: NOT
41300: IFFALSE 41304
// exit ;
41302: GO 42864
// for i in tmp do
41304: LD_ADDR_VAR 0 6
41308: PUSH
41309: LD_VAR 0 8
41313: PUSH
41314: FOR_IN
41315: IFFALSE 42839
// begin points := [ 0 , 0 , 0 ] ;
41317: LD_ADDR_VAR 0 9
41321: PUSH
41322: LD_INT 0
41324: PUSH
41325: LD_INT 0
41327: PUSH
41328: LD_INT 0
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: LIST
41335: ST_TO_ADDR
// bpoints := 1 ;
41336: LD_ADDR_VAR 0 10
41340: PUSH
41341: LD_INT 1
41343: ST_TO_ADDR
// case GetType ( i ) of unit_human :
41344: LD_VAR 0 6
41348: PPUSH
41349: CALL_OW 247
41353: PUSH
41354: LD_INT 1
41356: DOUBLE
41357: EQUAL
41358: IFTRUE 41362
41360: GO 41940
41362: POP
// begin if GetClass ( i ) = 1 then
41363: LD_VAR 0 6
41367: PPUSH
41368: CALL_OW 257
41372: PUSH
41373: LD_INT 1
41375: EQUAL
41376: IFFALSE 41397
// points := [ 10 , 5 , 3 ] ;
41378: LD_ADDR_VAR 0 9
41382: PUSH
41383: LD_INT 10
41385: PUSH
41386: LD_INT 5
41388: PUSH
41389: LD_INT 3
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: LIST
41396: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
41397: LD_VAR 0 6
41401: PPUSH
41402: CALL_OW 257
41406: PUSH
41407: LD_INT 2
41409: PUSH
41410: LD_INT 3
41412: PUSH
41413: LD_INT 4
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: LIST
41420: IN
41421: IFFALSE 41442
// points := [ 3 , 2 , 1 ] ;
41423: LD_ADDR_VAR 0 9
41427: PUSH
41428: LD_INT 3
41430: PUSH
41431: LD_INT 2
41433: PUSH
41434: LD_INT 1
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: LIST
41441: ST_TO_ADDR
// if GetClass ( i ) = 5 then
41442: LD_VAR 0 6
41446: PPUSH
41447: CALL_OW 257
41451: PUSH
41452: LD_INT 5
41454: EQUAL
41455: IFFALSE 41476
// points := [ 130 , 5 , 2 ] ;
41457: LD_ADDR_VAR 0 9
41461: PUSH
41462: LD_INT 130
41464: PUSH
41465: LD_INT 5
41467: PUSH
41468: LD_INT 2
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: LIST
41475: ST_TO_ADDR
// if GetClass ( i ) = 8 then
41476: LD_VAR 0 6
41480: PPUSH
41481: CALL_OW 257
41485: PUSH
41486: LD_INT 8
41488: EQUAL
41489: IFFALSE 41510
// points := [ 35 , 35 , 30 ] ;
41491: LD_ADDR_VAR 0 9
41495: PUSH
41496: LD_INT 35
41498: PUSH
41499: LD_INT 35
41501: PUSH
41502: LD_INT 30
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: LIST
41509: ST_TO_ADDR
// if GetClass ( i ) = 9 then
41510: LD_VAR 0 6
41514: PPUSH
41515: CALL_OW 257
41519: PUSH
41520: LD_INT 9
41522: EQUAL
41523: IFFALSE 41544
// points := [ 20 , 55 , 40 ] ;
41525: LD_ADDR_VAR 0 9
41529: PUSH
41530: LD_INT 20
41532: PUSH
41533: LD_INT 55
41535: PUSH
41536: LD_INT 40
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: LIST
41543: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
41544: LD_VAR 0 6
41548: PPUSH
41549: CALL_OW 257
41553: PUSH
41554: LD_INT 12
41556: PUSH
41557: LD_INT 16
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: IN
41564: IFFALSE 41585
// points := [ 5 , 3 , 2 ] ;
41566: LD_ADDR_VAR 0 9
41570: PUSH
41571: LD_INT 5
41573: PUSH
41574: LD_INT 3
41576: PUSH
41577: LD_INT 2
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: LIST
41584: ST_TO_ADDR
// if GetClass ( i ) = 17 then
41585: LD_VAR 0 6
41589: PPUSH
41590: CALL_OW 257
41594: PUSH
41595: LD_INT 17
41597: EQUAL
41598: IFFALSE 41619
// points := [ 100 , 50 , 75 ] ;
41600: LD_ADDR_VAR 0 9
41604: PUSH
41605: LD_INT 100
41607: PUSH
41608: LD_INT 50
41610: PUSH
41611: LD_INT 75
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: LIST
41618: ST_TO_ADDR
// if GetClass ( i ) = 15 then
41619: LD_VAR 0 6
41623: PPUSH
41624: CALL_OW 257
41628: PUSH
41629: LD_INT 15
41631: EQUAL
41632: IFFALSE 41653
// points := [ 10 , 5 , 3 ] ;
41634: LD_ADDR_VAR 0 9
41638: PUSH
41639: LD_INT 10
41641: PUSH
41642: LD_INT 5
41644: PUSH
41645: LD_INT 3
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: LIST
41652: ST_TO_ADDR
// if GetClass ( i ) = 14 then
41653: LD_VAR 0 6
41657: PPUSH
41658: CALL_OW 257
41662: PUSH
41663: LD_INT 14
41665: EQUAL
41666: IFFALSE 41687
// points := [ 10 , 0 , 0 ] ;
41668: LD_ADDR_VAR 0 9
41672: PUSH
41673: LD_INT 10
41675: PUSH
41676: LD_INT 0
41678: PUSH
41679: LD_INT 0
41681: PUSH
41682: EMPTY
41683: LIST
41684: LIST
41685: LIST
41686: ST_TO_ADDR
// if GetClass ( i ) = 11 then
41687: LD_VAR 0 6
41691: PPUSH
41692: CALL_OW 257
41696: PUSH
41697: LD_INT 11
41699: EQUAL
41700: IFFALSE 41721
// points := [ 30 , 10 , 5 ] ;
41702: LD_ADDR_VAR 0 9
41706: PUSH
41707: LD_INT 30
41709: PUSH
41710: LD_INT 10
41712: PUSH
41713: LD_INT 5
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: LIST
41720: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
41721: LD_VAR 0 1
41725: PPUSH
41726: LD_INT 5
41728: PPUSH
41729: CALL_OW 321
41733: PUSH
41734: LD_INT 2
41736: EQUAL
41737: IFFALSE 41754
// bpoints := bpoints * 1.8 ;
41739: LD_ADDR_VAR 0 10
41743: PUSH
41744: LD_VAR 0 10
41748: PUSH
41749: LD_REAL  1.80000000000000E+0000
41752: MUL
41753: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
41754: LD_VAR 0 6
41758: PPUSH
41759: CALL_OW 257
41763: PUSH
41764: LD_INT 1
41766: PUSH
41767: LD_INT 2
41769: PUSH
41770: LD_INT 3
41772: PUSH
41773: LD_INT 4
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: LIST
41780: LIST
41781: IN
41782: PUSH
41783: LD_VAR 0 1
41787: PPUSH
41788: LD_INT 51
41790: PPUSH
41791: CALL_OW 321
41795: PUSH
41796: LD_INT 2
41798: EQUAL
41799: AND
41800: IFFALSE 41817
// bpoints := bpoints * 1.2 ;
41802: LD_ADDR_VAR 0 10
41806: PUSH
41807: LD_VAR 0 10
41811: PUSH
41812: LD_REAL  1.20000000000000E+0000
41815: MUL
41816: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
41817: LD_VAR 0 6
41821: PPUSH
41822: CALL_OW 257
41826: PUSH
41827: LD_INT 5
41829: PUSH
41830: LD_INT 7
41832: PUSH
41833: LD_INT 9
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: LIST
41840: IN
41841: PUSH
41842: LD_VAR 0 1
41846: PPUSH
41847: LD_INT 52
41849: PPUSH
41850: CALL_OW 321
41854: PUSH
41855: LD_INT 2
41857: EQUAL
41858: AND
41859: IFFALSE 41876
// bpoints := bpoints * 1.5 ;
41861: LD_ADDR_VAR 0 10
41865: PUSH
41866: LD_VAR 0 10
41870: PUSH
41871: LD_REAL  1.50000000000000E+0000
41874: MUL
41875: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
41876: LD_VAR 0 1
41880: PPUSH
41881: LD_INT 66
41883: PPUSH
41884: CALL_OW 321
41888: PUSH
41889: LD_INT 2
41891: EQUAL
41892: IFFALSE 41909
// bpoints := bpoints * 1.1 ;
41894: LD_ADDR_VAR 0 10
41898: PUSH
41899: LD_VAR 0 10
41903: PUSH
41904: LD_REAL  1.10000000000000E+0000
41907: MUL
41908: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
41909: LD_ADDR_VAR 0 10
41913: PUSH
41914: LD_VAR 0 10
41918: PUSH
41919: LD_VAR 0 6
41923: PPUSH
41924: LD_INT 1
41926: PPUSH
41927: CALL_OW 259
41931: PUSH
41932: LD_REAL  1.15000000000000E+0000
41935: MUL
41936: MUL
41937: ST_TO_ADDR
// end ; unit_vehicle :
41938: GO 42768
41940: LD_INT 2
41942: DOUBLE
41943: EQUAL
41944: IFTRUE 41948
41946: GO 42756
41948: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
41949: LD_VAR 0 6
41953: PPUSH
41954: CALL_OW 264
41958: PUSH
41959: LD_INT 2
41961: PUSH
41962: LD_INT 42
41964: PUSH
41965: LD_INT 24
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: LIST
41972: IN
41973: IFFALSE 41994
// points := [ 25 , 5 , 3 ] ;
41975: LD_ADDR_VAR 0 9
41979: PUSH
41980: LD_INT 25
41982: PUSH
41983: LD_INT 5
41985: PUSH
41986: LD_INT 3
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: LIST
41993: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
41994: LD_VAR 0 6
41998: PPUSH
41999: CALL_OW 264
42003: PUSH
42004: LD_INT 4
42006: PUSH
42007: LD_INT 43
42009: PUSH
42010: LD_INT 25
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: LIST
42017: IN
42018: IFFALSE 42039
// points := [ 40 , 15 , 5 ] ;
42020: LD_ADDR_VAR 0 9
42024: PUSH
42025: LD_INT 40
42027: PUSH
42028: LD_INT 15
42030: PUSH
42031: LD_INT 5
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: LIST
42038: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
42039: LD_VAR 0 6
42043: PPUSH
42044: CALL_OW 264
42048: PUSH
42049: LD_INT 3
42051: PUSH
42052: LD_INT 23
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: IN
42059: IFFALSE 42080
// points := [ 7 , 25 , 8 ] ;
42061: LD_ADDR_VAR 0 9
42065: PUSH
42066: LD_INT 7
42068: PUSH
42069: LD_INT 25
42071: PUSH
42072: LD_INT 8
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: LIST
42079: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
42080: LD_VAR 0 6
42084: PPUSH
42085: CALL_OW 264
42089: PUSH
42090: LD_INT 5
42092: PUSH
42093: LD_INT 27
42095: PUSH
42096: LD_INT 44
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: LIST
42103: IN
42104: IFFALSE 42125
// points := [ 14 , 50 , 16 ] ;
42106: LD_ADDR_VAR 0 9
42110: PUSH
42111: LD_INT 14
42113: PUSH
42114: LD_INT 50
42116: PUSH
42117: LD_INT 16
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: LIST
42124: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
42125: LD_VAR 0 6
42129: PPUSH
42130: CALL_OW 264
42134: PUSH
42135: LD_INT 6
42137: PUSH
42138: LD_INT 46
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: IN
42145: IFFALSE 42166
// points := [ 32 , 120 , 70 ] ;
42147: LD_ADDR_VAR 0 9
42151: PUSH
42152: LD_INT 32
42154: PUSH
42155: LD_INT 120
42157: PUSH
42158: LD_INT 70
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: LIST
42165: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
42166: LD_VAR 0 6
42170: PPUSH
42171: CALL_OW 264
42175: PUSH
42176: LD_INT 7
42178: PUSH
42179: LD_INT 28
42181: PUSH
42182: LD_INT 45
42184: PUSH
42185: LD_EXP 43
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: LIST
42194: LIST
42195: IN
42196: IFFALSE 42217
// points := [ 35 , 20 , 45 ] ;
42198: LD_ADDR_VAR 0 9
42202: PUSH
42203: LD_INT 35
42205: PUSH
42206: LD_INT 20
42208: PUSH
42209: LD_INT 45
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: LIST
42216: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
42217: LD_VAR 0 6
42221: PPUSH
42222: CALL_OW 264
42226: PUSH
42227: LD_INT 47
42229: PUSH
42230: EMPTY
42231: LIST
42232: IN
42233: IFFALSE 42254
// points := [ 67 , 45 , 75 ] ;
42235: LD_ADDR_VAR 0 9
42239: PUSH
42240: LD_INT 67
42242: PUSH
42243: LD_INT 45
42245: PUSH
42246: LD_INT 75
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: LIST
42253: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
42254: LD_VAR 0 6
42258: PPUSH
42259: CALL_OW 264
42263: PUSH
42264: LD_INT 26
42266: PUSH
42267: EMPTY
42268: LIST
42269: IN
42270: IFFALSE 42291
// points := [ 120 , 30 , 80 ] ;
42272: LD_ADDR_VAR 0 9
42276: PUSH
42277: LD_INT 120
42279: PUSH
42280: LD_INT 30
42282: PUSH
42283: LD_INT 80
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: LIST
42290: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
42291: LD_VAR 0 6
42295: PPUSH
42296: CALL_OW 264
42300: PUSH
42301: LD_INT 22
42303: PUSH
42304: EMPTY
42305: LIST
42306: IN
42307: IFFALSE 42328
// points := [ 40 , 1 , 1 ] ;
42309: LD_ADDR_VAR 0 9
42313: PUSH
42314: LD_INT 40
42316: PUSH
42317: LD_INT 1
42319: PUSH
42320: LD_INT 1
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: LIST
42327: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
42328: LD_VAR 0 6
42332: PPUSH
42333: CALL_OW 264
42337: PUSH
42338: LD_INT 29
42340: PUSH
42341: EMPTY
42342: LIST
42343: IN
42344: IFFALSE 42365
// points := [ 70 , 200 , 400 ] ;
42346: LD_ADDR_VAR 0 9
42350: PUSH
42351: LD_INT 70
42353: PUSH
42354: LD_INT 200
42356: PUSH
42357: LD_INT 400
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: LIST
42364: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
42365: LD_VAR 0 6
42369: PPUSH
42370: CALL_OW 264
42374: PUSH
42375: LD_INT 14
42377: PUSH
42378: LD_INT 53
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: IN
42385: IFFALSE 42406
// points := [ 40 , 10 , 20 ] ;
42387: LD_ADDR_VAR 0 9
42391: PUSH
42392: LD_INT 40
42394: PUSH
42395: LD_INT 10
42397: PUSH
42398: LD_INT 20
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: LIST
42405: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
42406: LD_VAR 0 6
42410: PPUSH
42411: CALL_OW 264
42415: PUSH
42416: LD_INT 9
42418: PUSH
42419: EMPTY
42420: LIST
42421: IN
42422: IFFALSE 42443
// points := [ 5 , 70 , 20 ] ;
42424: LD_ADDR_VAR 0 9
42428: PUSH
42429: LD_INT 5
42431: PUSH
42432: LD_INT 70
42434: PUSH
42435: LD_INT 20
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: LIST
42442: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
42443: LD_VAR 0 6
42447: PPUSH
42448: CALL_OW 264
42452: PUSH
42453: LD_INT 10
42455: PUSH
42456: EMPTY
42457: LIST
42458: IN
42459: IFFALSE 42480
// points := [ 35 , 110 , 70 ] ;
42461: LD_ADDR_VAR 0 9
42465: PUSH
42466: LD_INT 35
42468: PUSH
42469: LD_INT 110
42471: PUSH
42472: LD_INT 70
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: LIST
42479: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
42480: LD_VAR 0 6
42484: PPUSH
42485: CALL_OW 265
42489: PUSH
42490: LD_INT 25
42492: EQUAL
42493: IFFALSE 42514
// points := [ 80 , 65 , 100 ] ;
42495: LD_ADDR_VAR 0 9
42499: PUSH
42500: LD_INT 80
42502: PUSH
42503: LD_INT 65
42505: PUSH
42506: LD_INT 100
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: LIST
42513: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
42514: LD_VAR 0 6
42518: PPUSH
42519: CALL_OW 263
42523: PUSH
42524: LD_INT 1
42526: EQUAL
42527: IFFALSE 42562
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
42529: LD_ADDR_VAR 0 10
42533: PUSH
42534: LD_VAR 0 10
42538: PUSH
42539: LD_VAR 0 6
42543: PPUSH
42544: CALL_OW 311
42548: PPUSH
42549: LD_INT 3
42551: PPUSH
42552: CALL_OW 259
42556: PUSH
42557: LD_INT 4
42559: MUL
42560: MUL
42561: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
42562: LD_VAR 0 6
42566: PPUSH
42567: CALL_OW 263
42571: PUSH
42572: LD_INT 2
42574: EQUAL
42575: IFFALSE 42626
// begin j := IsControledBy ( i ) ;
42577: LD_ADDR_VAR 0 7
42581: PUSH
42582: LD_VAR 0 6
42586: PPUSH
42587: CALL_OW 312
42591: ST_TO_ADDR
// if j then
42592: LD_VAR 0 7
42596: IFFALSE 42626
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
42598: LD_ADDR_VAR 0 10
42602: PUSH
42603: LD_VAR 0 10
42607: PUSH
42608: LD_VAR 0 7
42612: PPUSH
42613: LD_INT 3
42615: PPUSH
42616: CALL_OW 259
42620: PUSH
42621: LD_INT 3
42623: MUL
42624: MUL
42625: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
42626: LD_VAR 0 6
42630: PPUSH
42631: CALL_OW 264
42635: PUSH
42636: LD_INT 5
42638: PUSH
42639: LD_INT 6
42641: PUSH
42642: LD_INT 46
42644: PUSH
42645: LD_INT 44
42647: PUSH
42648: LD_INT 47
42650: PUSH
42651: LD_INT 45
42653: PUSH
42654: LD_INT 28
42656: PUSH
42657: LD_INT 7
42659: PUSH
42660: LD_INT 27
42662: PUSH
42663: LD_INT 29
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: LIST
42670: LIST
42671: LIST
42672: LIST
42673: LIST
42674: LIST
42675: LIST
42676: LIST
42677: IN
42678: PUSH
42679: LD_VAR 0 1
42683: PPUSH
42684: LD_INT 52
42686: PPUSH
42687: CALL_OW 321
42691: PUSH
42692: LD_INT 2
42694: EQUAL
42695: AND
42696: IFFALSE 42713
// bpoints := bpoints * 1.2 ;
42698: LD_ADDR_VAR 0 10
42702: PUSH
42703: LD_VAR 0 10
42707: PUSH
42708: LD_REAL  1.20000000000000E+0000
42711: MUL
42712: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
42713: LD_VAR 0 6
42717: PPUSH
42718: CALL_OW 264
42722: PUSH
42723: LD_INT 6
42725: PUSH
42726: LD_INT 46
42728: PUSH
42729: LD_INT 47
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: LIST
42736: IN
42737: IFFALSE 42754
// bpoints := bpoints * 1.2 ;
42739: LD_ADDR_VAR 0 10
42743: PUSH
42744: LD_VAR 0 10
42748: PUSH
42749: LD_REAL  1.20000000000000E+0000
42752: MUL
42753: ST_TO_ADDR
// end ; unit_building :
42754: GO 42768
42756: LD_INT 3
42758: DOUBLE
42759: EQUAL
42760: IFTRUE 42764
42762: GO 42767
42764: POP
// ; end ;
42765: GO 42768
42767: POP
// for j = 1 to 3 do
42768: LD_ADDR_VAR 0 7
42772: PUSH
42773: DOUBLE
42774: LD_INT 1
42776: DEC
42777: ST_TO_ADDR
42778: LD_INT 3
42780: PUSH
42781: FOR_TO
42782: IFFALSE 42835
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
42784: LD_ADDR_VAR 0 5
42788: PUSH
42789: LD_VAR 0 5
42793: PPUSH
42794: LD_VAR 0 7
42798: PPUSH
42799: LD_VAR 0 5
42803: PUSH
42804: LD_VAR 0 7
42808: ARRAY
42809: PUSH
42810: LD_VAR 0 9
42814: PUSH
42815: LD_VAR 0 7
42819: ARRAY
42820: PUSH
42821: LD_VAR 0 10
42825: MUL
42826: PLUS
42827: PPUSH
42828: CALL_OW 1
42832: ST_TO_ADDR
42833: GO 42781
42835: POP
42836: POP
// end ;
42837: GO 41314
42839: POP
42840: POP
// result := Replace ( result , 4 , tmp ) ;
42841: LD_ADDR_VAR 0 5
42845: PUSH
42846: LD_VAR 0 5
42850: PPUSH
42851: LD_INT 4
42853: PPUSH
42854: LD_VAR 0 8
42858: PPUSH
42859: CALL_OW 1
42863: ST_TO_ADDR
// end ;
42864: LD_VAR 0 5
42868: RET
// export function DangerAtRange ( unit , range ) ; begin
42869: LD_INT 0
42871: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
42872: LD_ADDR_VAR 0 3
42876: PUSH
42877: LD_VAR 0 1
42881: PPUSH
42882: CALL_OW 255
42886: PPUSH
42887: LD_VAR 0 1
42891: PPUSH
42892: CALL_OW 250
42896: PPUSH
42897: LD_VAR 0 1
42901: PPUSH
42902: CALL_OW 251
42906: PPUSH
42907: LD_VAR 0 2
42911: PPUSH
42912: CALL 41166 0 4
42916: ST_TO_ADDR
// end ;
42917: LD_VAR 0 3
42921: RET
// export function DangerInArea ( side , area ) ; begin
42922: LD_INT 0
42924: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
42925: LD_ADDR_VAR 0 3
42929: PUSH
42930: LD_VAR 0 2
42934: PPUSH
42935: LD_INT 81
42937: PUSH
42938: LD_VAR 0 1
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: PPUSH
42947: CALL_OW 70
42951: ST_TO_ADDR
// end ;
42952: LD_VAR 0 3
42956: RET
// export function IsExtension ( b ) ; begin
42957: LD_INT 0
42959: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
42960: LD_ADDR_VAR 0 2
42964: PUSH
42965: LD_VAR 0 1
42969: PUSH
42970: LD_INT 23
42972: PUSH
42973: LD_INT 20
42975: PUSH
42976: LD_INT 22
42978: PUSH
42979: LD_INT 17
42981: PUSH
42982: LD_INT 24
42984: PUSH
42985: LD_INT 21
42987: PUSH
42988: LD_INT 19
42990: PUSH
42991: LD_INT 16
42993: PUSH
42994: LD_INT 25
42996: PUSH
42997: LD_INT 18
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: LIST
43010: LIST
43011: IN
43012: ST_TO_ADDR
// end ;
43013: LD_VAR 0 2
43017: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
43018: LD_INT 0
43020: PPUSH
43021: PPUSH
43022: PPUSH
// result := [ ] ;
43023: LD_ADDR_VAR 0 4
43027: PUSH
43028: EMPTY
43029: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
43030: LD_ADDR_VAR 0 5
43034: PUSH
43035: LD_VAR 0 2
43039: PPUSH
43040: LD_INT 21
43042: PUSH
43043: LD_INT 3
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PPUSH
43050: CALL_OW 70
43054: ST_TO_ADDR
// if not tmp then
43055: LD_VAR 0 5
43059: NOT
43060: IFFALSE 43064
// exit ;
43062: GO 43128
// if checkLink then
43064: LD_VAR 0 3
43068: IFFALSE 43118
// begin for i in tmp do
43070: LD_ADDR_VAR 0 6
43074: PUSH
43075: LD_VAR 0 5
43079: PUSH
43080: FOR_IN
43081: IFFALSE 43116
// if GetBase ( i ) <> base then
43083: LD_VAR 0 6
43087: PPUSH
43088: CALL_OW 274
43092: PUSH
43093: LD_VAR 0 1
43097: NONEQUAL
43098: IFFALSE 43114
// ComLinkToBase ( base , i ) ;
43100: LD_VAR 0 1
43104: PPUSH
43105: LD_VAR 0 6
43109: PPUSH
43110: CALL_OW 169
43114: GO 43080
43116: POP
43117: POP
// end ; result := tmp ;
43118: LD_ADDR_VAR 0 4
43122: PUSH
43123: LD_VAR 0 5
43127: ST_TO_ADDR
// end ;
43128: LD_VAR 0 4
43132: RET
// export function ComComplete ( units , b ) ; var i ; begin
43133: LD_INT 0
43135: PPUSH
43136: PPUSH
// if not units then
43137: LD_VAR 0 1
43141: NOT
43142: IFFALSE 43146
// exit ;
43144: GO 43236
// for i in units do
43146: LD_ADDR_VAR 0 4
43150: PUSH
43151: LD_VAR 0 1
43155: PUSH
43156: FOR_IN
43157: IFFALSE 43234
// if BuildingStatus ( b ) = bs_build then
43159: LD_VAR 0 2
43163: PPUSH
43164: CALL_OW 461
43168: PUSH
43169: LD_INT 1
43171: EQUAL
43172: IFFALSE 43232
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
43174: LD_VAR 0 4
43178: PPUSH
43179: LD_STRING h
43181: PUSH
43182: LD_VAR 0 2
43186: PPUSH
43187: CALL_OW 250
43191: PUSH
43192: LD_VAR 0 2
43196: PPUSH
43197: CALL_OW 251
43201: PUSH
43202: LD_VAR 0 2
43206: PUSH
43207: LD_INT 0
43209: PUSH
43210: LD_INT 0
43212: PUSH
43213: LD_INT 0
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: PUSH
43225: EMPTY
43226: LIST
43227: PPUSH
43228: CALL_OW 446
43232: GO 43156
43234: POP
43235: POP
// end ;
43236: LD_VAR 0 3
43240: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
43241: LD_INT 0
43243: PPUSH
43244: PPUSH
43245: PPUSH
43246: PPUSH
43247: PPUSH
43248: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
43249: LD_VAR 0 1
43253: NOT
43254: PUSH
43255: LD_VAR 0 1
43259: PPUSH
43260: CALL_OW 263
43264: PUSH
43265: LD_INT 2
43267: NONEQUAL
43268: OR
43269: IFFALSE 43273
// exit ;
43271: GO 43589
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
43273: LD_ADDR_VAR 0 6
43277: PUSH
43278: LD_INT 22
43280: PUSH
43281: LD_VAR 0 1
43285: PPUSH
43286: CALL_OW 255
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: LD_INT 2
43297: PUSH
43298: LD_INT 30
43300: PUSH
43301: LD_INT 36
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 34
43310: PUSH
43311: LD_INT 31
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: LIST
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PPUSH
43327: CALL_OW 69
43331: ST_TO_ADDR
// if not tmp then
43332: LD_VAR 0 6
43336: NOT
43337: IFFALSE 43341
// exit ;
43339: GO 43589
// result := [ ] ;
43341: LD_ADDR_VAR 0 2
43345: PUSH
43346: EMPTY
43347: ST_TO_ADDR
// for i in tmp do
43348: LD_ADDR_VAR 0 3
43352: PUSH
43353: LD_VAR 0 6
43357: PUSH
43358: FOR_IN
43359: IFFALSE 43430
// begin t := UnitsInside ( i ) ;
43361: LD_ADDR_VAR 0 4
43365: PUSH
43366: LD_VAR 0 3
43370: PPUSH
43371: CALL_OW 313
43375: ST_TO_ADDR
// if t then
43376: LD_VAR 0 4
43380: IFFALSE 43428
// for j in t do
43382: LD_ADDR_VAR 0 7
43386: PUSH
43387: LD_VAR 0 4
43391: PUSH
43392: FOR_IN
43393: IFFALSE 43426
// result := Replace ( result , result + 1 , j ) ;
43395: LD_ADDR_VAR 0 2
43399: PUSH
43400: LD_VAR 0 2
43404: PPUSH
43405: LD_VAR 0 2
43409: PUSH
43410: LD_INT 1
43412: PLUS
43413: PPUSH
43414: LD_VAR 0 7
43418: PPUSH
43419: CALL_OW 1
43423: ST_TO_ADDR
43424: GO 43392
43426: POP
43427: POP
// end ;
43428: GO 43358
43430: POP
43431: POP
// if not result then
43432: LD_VAR 0 2
43436: NOT
43437: IFFALSE 43441
// exit ;
43439: GO 43589
// mech := result [ 1 ] ;
43441: LD_ADDR_VAR 0 5
43445: PUSH
43446: LD_VAR 0 2
43450: PUSH
43451: LD_INT 1
43453: ARRAY
43454: ST_TO_ADDR
// if result > 1 then
43455: LD_VAR 0 2
43459: PUSH
43460: LD_INT 1
43462: GREATER
43463: IFFALSE 43575
// begin for i = 2 to result do
43465: LD_ADDR_VAR 0 3
43469: PUSH
43470: DOUBLE
43471: LD_INT 2
43473: DEC
43474: ST_TO_ADDR
43475: LD_VAR 0 2
43479: PUSH
43480: FOR_TO
43481: IFFALSE 43573
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
43483: LD_ADDR_VAR 0 4
43487: PUSH
43488: LD_VAR 0 2
43492: PUSH
43493: LD_VAR 0 3
43497: ARRAY
43498: PPUSH
43499: LD_INT 3
43501: PPUSH
43502: CALL_OW 259
43506: PUSH
43507: LD_VAR 0 2
43511: PUSH
43512: LD_VAR 0 3
43516: ARRAY
43517: PPUSH
43518: CALL_OW 432
43522: MINUS
43523: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
43524: LD_VAR 0 4
43528: PUSH
43529: LD_VAR 0 5
43533: PPUSH
43534: LD_INT 3
43536: PPUSH
43537: CALL_OW 259
43541: PUSH
43542: LD_VAR 0 5
43546: PPUSH
43547: CALL_OW 432
43551: MINUS
43552: GREATEREQUAL
43553: IFFALSE 43571
// mech := result [ i ] ;
43555: LD_ADDR_VAR 0 5
43559: PUSH
43560: LD_VAR 0 2
43564: PUSH
43565: LD_VAR 0 3
43569: ARRAY
43570: ST_TO_ADDR
// end ;
43571: GO 43480
43573: POP
43574: POP
// end ; ComLinkTo ( vehicle , mech ) ;
43575: LD_VAR 0 1
43579: PPUSH
43580: LD_VAR 0 5
43584: PPUSH
43585: CALL_OW 135
// end ;
43589: LD_VAR 0 2
43593: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
43594: LD_INT 0
43596: PPUSH
43597: PPUSH
43598: PPUSH
43599: PPUSH
43600: PPUSH
43601: PPUSH
43602: PPUSH
43603: PPUSH
43604: PPUSH
43605: PPUSH
43606: PPUSH
43607: PPUSH
43608: PPUSH
// result := [ ] ;
43609: LD_ADDR_VAR 0 7
43613: PUSH
43614: EMPTY
43615: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
43616: LD_VAR 0 1
43620: PPUSH
43621: CALL_OW 266
43625: PUSH
43626: LD_INT 0
43628: PUSH
43629: LD_INT 1
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: IN
43636: NOT
43637: IFFALSE 43641
// exit ;
43639: GO 45275
// if name then
43641: LD_VAR 0 3
43645: IFFALSE 43661
// SetBName ( base_dep , name ) ;
43647: LD_VAR 0 1
43651: PPUSH
43652: LD_VAR 0 3
43656: PPUSH
43657: CALL_OW 500
// base := GetBase ( base_dep ) ;
43661: LD_ADDR_VAR 0 15
43665: PUSH
43666: LD_VAR 0 1
43670: PPUSH
43671: CALL_OW 274
43675: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
43676: LD_ADDR_VAR 0 16
43680: PUSH
43681: LD_VAR 0 1
43685: PPUSH
43686: CALL_OW 255
43690: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
43691: LD_ADDR_VAR 0 17
43695: PUSH
43696: LD_VAR 0 1
43700: PPUSH
43701: CALL_OW 248
43705: ST_TO_ADDR
// if sources then
43706: LD_VAR 0 5
43710: IFFALSE 43757
// for i = 1 to 3 do
43712: LD_ADDR_VAR 0 8
43716: PUSH
43717: DOUBLE
43718: LD_INT 1
43720: DEC
43721: ST_TO_ADDR
43722: LD_INT 3
43724: PUSH
43725: FOR_TO
43726: IFFALSE 43755
// AddResourceType ( base , i , sources [ i ] ) ;
43728: LD_VAR 0 15
43732: PPUSH
43733: LD_VAR 0 8
43737: PPUSH
43738: LD_VAR 0 5
43742: PUSH
43743: LD_VAR 0 8
43747: ARRAY
43748: PPUSH
43749: CALL_OW 276
43753: GO 43725
43755: POP
43756: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
43757: LD_ADDR_VAR 0 18
43761: PUSH
43762: LD_VAR 0 15
43766: PPUSH
43767: LD_VAR 0 2
43771: PPUSH
43772: LD_INT 1
43774: PPUSH
43775: CALL 43018 0 3
43779: ST_TO_ADDR
// InitHc ;
43780: CALL_OW 19
// InitUc ;
43784: CALL_OW 18
// uc_side := side ;
43788: LD_ADDR_OWVAR 20
43792: PUSH
43793: LD_VAR 0 16
43797: ST_TO_ADDR
// uc_nation := nation ;
43798: LD_ADDR_OWVAR 21
43802: PUSH
43803: LD_VAR 0 17
43807: ST_TO_ADDR
// if buildings then
43808: LD_VAR 0 18
43812: IFFALSE 45134
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
43814: LD_ADDR_VAR 0 19
43818: PUSH
43819: LD_VAR 0 18
43823: PPUSH
43824: LD_INT 2
43826: PUSH
43827: LD_INT 30
43829: PUSH
43830: LD_INT 29
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: LD_INT 30
43839: PUSH
43840: LD_INT 30
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: LIST
43851: PPUSH
43852: CALL_OW 72
43856: ST_TO_ADDR
// if tmp then
43857: LD_VAR 0 19
43861: IFFALSE 43909
// for i in tmp do
43863: LD_ADDR_VAR 0 8
43867: PUSH
43868: LD_VAR 0 19
43872: PUSH
43873: FOR_IN
43874: IFFALSE 43907
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
43876: LD_VAR 0 8
43880: PPUSH
43881: CALL_OW 250
43885: PPUSH
43886: LD_VAR 0 8
43890: PPUSH
43891: CALL_OW 251
43895: PPUSH
43896: LD_VAR 0 16
43900: PPUSH
43901: CALL_OW 441
43905: GO 43873
43907: POP
43908: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
43909: LD_VAR 0 18
43913: PPUSH
43914: LD_INT 2
43916: PUSH
43917: LD_INT 30
43919: PUSH
43920: LD_INT 32
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: LD_INT 30
43929: PUSH
43930: LD_INT 33
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: LIST
43941: PPUSH
43942: CALL_OW 72
43946: IFFALSE 44034
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
43948: LD_ADDR_VAR 0 8
43952: PUSH
43953: LD_VAR 0 18
43957: PPUSH
43958: LD_INT 2
43960: PUSH
43961: LD_INT 30
43963: PUSH
43964: LD_INT 32
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PUSH
43971: LD_INT 30
43973: PUSH
43974: LD_INT 33
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: LIST
43985: PPUSH
43986: CALL_OW 72
43990: PUSH
43991: FOR_IN
43992: IFFALSE 44032
// begin if not GetBWeapon ( i ) then
43994: LD_VAR 0 8
43998: PPUSH
43999: CALL_OW 269
44003: NOT
44004: IFFALSE 44030
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
44006: LD_VAR 0 8
44010: PPUSH
44011: LD_VAR 0 8
44015: PPUSH
44016: LD_VAR 0 2
44020: PPUSH
44021: CALL 45280 0 2
44025: PPUSH
44026: CALL_OW 431
// end ;
44030: GO 43991
44032: POP
44033: POP
// end ; for i = 1 to personel do
44034: LD_ADDR_VAR 0 8
44038: PUSH
44039: DOUBLE
44040: LD_INT 1
44042: DEC
44043: ST_TO_ADDR
44044: LD_VAR 0 6
44048: PUSH
44049: FOR_TO
44050: IFFALSE 45114
// begin if i > 4 then
44052: LD_VAR 0 8
44056: PUSH
44057: LD_INT 4
44059: GREATER
44060: IFFALSE 44064
// break ;
44062: GO 45114
// case i of 1 :
44064: LD_VAR 0 8
44068: PUSH
44069: LD_INT 1
44071: DOUBLE
44072: EQUAL
44073: IFTRUE 44077
44075: GO 44157
44077: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
44078: LD_ADDR_VAR 0 12
44082: PUSH
44083: LD_VAR 0 18
44087: PPUSH
44088: LD_INT 22
44090: PUSH
44091: LD_VAR 0 16
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: LD_INT 58
44102: PUSH
44103: EMPTY
44104: LIST
44105: PUSH
44106: LD_INT 2
44108: PUSH
44109: LD_INT 30
44111: PUSH
44112: LD_INT 32
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 30
44121: PUSH
44122: LD_INT 4
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 30
44131: PUSH
44132: LD_INT 5
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: LIST
44149: PPUSH
44150: CALL_OW 72
44154: ST_TO_ADDR
44155: GO 44379
44157: LD_INT 2
44159: DOUBLE
44160: EQUAL
44161: IFTRUE 44165
44163: GO 44227
44165: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
44166: LD_ADDR_VAR 0 12
44170: PUSH
44171: LD_VAR 0 18
44175: PPUSH
44176: LD_INT 22
44178: PUSH
44179: LD_VAR 0 16
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: PUSH
44188: LD_INT 2
44190: PUSH
44191: LD_INT 30
44193: PUSH
44194: LD_INT 0
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 30
44203: PUSH
44204: LD_INT 1
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: LIST
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PPUSH
44220: CALL_OW 72
44224: ST_TO_ADDR
44225: GO 44379
44227: LD_INT 3
44229: DOUBLE
44230: EQUAL
44231: IFTRUE 44235
44233: GO 44297
44235: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
44236: LD_ADDR_VAR 0 12
44240: PUSH
44241: LD_VAR 0 18
44245: PPUSH
44246: LD_INT 22
44248: PUSH
44249: LD_VAR 0 16
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 2
44260: PUSH
44261: LD_INT 30
44263: PUSH
44264: LD_INT 2
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 30
44273: PUSH
44274: LD_INT 3
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: LIST
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PPUSH
44290: CALL_OW 72
44294: ST_TO_ADDR
44295: GO 44379
44297: LD_INT 4
44299: DOUBLE
44300: EQUAL
44301: IFTRUE 44305
44303: GO 44378
44305: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
44306: LD_ADDR_VAR 0 12
44310: PUSH
44311: LD_VAR 0 18
44315: PPUSH
44316: LD_INT 22
44318: PUSH
44319: LD_VAR 0 16
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PUSH
44328: LD_INT 2
44330: PUSH
44331: LD_INT 30
44333: PUSH
44334: LD_INT 6
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 30
44343: PUSH
44344: LD_INT 7
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 30
44353: PUSH
44354: LD_INT 8
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: LIST
44365: LIST
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PPUSH
44371: CALL_OW 72
44375: ST_TO_ADDR
44376: GO 44379
44378: POP
// if i = 1 then
44379: LD_VAR 0 8
44383: PUSH
44384: LD_INT 1
44386: EQUAL
44387: IFFALSE 44498
// begin tmp := [ ] ;
44389: LD_ADDR_VAR 0 19
44393: PUSH
44394: EMPTY
44395: ST_TO_ADDR
// for j in f do
44396: LD_ADDR_VAR 0 9
44400: PUSH
44401: LD_VAR 0 12
44405: PUSH
44406: FOR_IN
44407: IFFALSE 44480
// if GetBType ( j ) = b_bunker then
44409: LD_VAR 0 9
44413: PPUSH
44414: CALL_OW 266
44418: PUSH
44419: LD_INT 32
44421: EQUAL
44422: IFFALSE 44449
// tmp := Insert ( tmp , 1 , j ) else
44424: LD_ADDR_VAR 0 19
44428: PUSH
44429: LD_VAR 0 19
44433: PPUSH
44434: LD_INT 1
44436: PPUSH
44437: LD_VAR 0 9
44441: PPUSH
44442: CALL_OW 2
44446: ST_TO_ADDR
44447: GO 44478
// tmp := Insert ( tmp , tmp + 1 , j ) ;
44449: LD_ADDR_VAR 0 19
44453: PUSH
44454: LD_VAR 0 19
44458: PPUSH
44459: LD_VAR 0 19
44463: PUSH
44464: LD_INT 1
44466: PLUS
44467: PPUSH
44468: LD_VAR 0 9
44472: PPUSH
44473: CALL_OW 2
44477: ST_TO_ADDR
44478: GO 44406
44480: POP
44481: POP
// if tmp then
44482: LD_VAR 0 19
44486: IFFALSE 44498
// f := tmp ;
44488: LD_ADDR_VAR 0 12
44492: PUSH
44493: LD_VAR 0 19
44497: ST_TO_ADDR
// end ; x := personel [ i ] ;
44498: LD_ADDR_VAR 0 13
44502: PUSH
44503: LD_VAR 0 6
44507: PUSH
44508: LD_VAR 0 8
44512: ARRAY
44513: ST_TO_ADDR
// if x = - 1 then
44514: LD_VAR 0 13
44518: PUSH
44519: LD_INT 1
44521: NEG
44522: EQUAL
44523: IFFALSE 44732
// begin for j in f do
44525: LD_ADDR_VAR 0 9
44529: PUSH
44530: LD_VAR 0 12
44534: PUSH
44535: FOR_IN
44536: IFFALSE 44728
// repeat InitHc ;
44538: CALL_OW 19
// if GetBType ( j ) = b_barracks then
44542: LD_VAR 0 9
44546: PPUSH
44547: CALL_OW 266
44551: PUSH
44552: LD_INT 5
44554: EQUAL
44555: IFFALSE 44625
// begin if UnitsInside ( j ) < 3 then
44557: LD_VAR 0 9
44561: PPUSH
44562: CALL_OW 313
44566: PUSH
44567: LD_INT 3
44569: LESS
44570: IFFALSE 44606
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44572: LD_INT 0
44574: PPUSH
44575: LD_INT 5
44577: PUSH
44578: LD_INT 8
44580: PUSH
44581: LD_INT 9
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: LIST
44588: PUSH
44589: LD_VAR 0 17
44593: ARRAY
44594: PPUSH
44595: LD_VAR 0 4
44599: PPUSH
44600: CALL_OW 380
44604: GO 44623
// PrepareHuman ( false , i , skill ) ;
44606: LD_INT 0
44608: PPUSH
44609: LD_VAR 0 8
44613: PPUSH
44614: LD_VAR 0 4
44618: PPUSH
44619: CALL_OW 380
// end else
44623: GO 44642
// PrepareHuman ( false , i , skill ) ;
44625: LD_INT 0
44627: PPUSH
44628: LD_VAR 0 8
44632: PPUSH
44633: LD_VAR 0 4
44637: PPUSH
44638: CALL_OW 380
// un := CreateHuman ;
44642: LD_ADDR_VAR 0 14
44646: PUSH
44647: CALL_OW 44
44651: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44652: LD_ADDR_VAR 0 7
44656: PUSH
44657: LD_VAR 0 7
44661: PPUSH
44662: LD_INT 1
44664: PPUSH
44665: LD_VAR 0 14
44669: PPUSH
44670: CALL_OW 2
44674: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
44675: LD_VAR 0 14
44679: PPUSH
44680: LD_VAR 0 9
44684: PPUSH
44685: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
44689: LD_VAR 0 9
44693: PPUSH
44694: CALL_OW 313
44698: PUSH
44699: LD_INT 6
44701: EQUAL
44702: PUSH
44703: LD_VAR 0 9
44707: PPUSH
44708: CALL_OW 266
44712: PUSH
44713: LD_INT 32
44715: PUSH
44716: LD_INT 31
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: IN
44723: OR
44724: IFFALSE 44538
44726: GO 44535
44728: POP
44729: POP
// end else
44730: GO 45112
// for j = 1 to x do
44732: LD_ADDR_VAR 0 9
44736: PUSH
44737: DOUBLE
44738: LD_INT 1
44740: DEC
44741: ST_TO_ADDR
44742: LD_VAR 0 13
44746: PUSH
44747: FOR_TO
44748: IFFALSE 45110
// begin InitHc ;
44750: CALL_OW 19
// if not f then
44754: LD_VAR 0 12
44758: NOT
44759: IFFALSE 44848
// begin PrepareHuman ( false , i , skill ) ;
44761: LD_INT 0
44763: PPUSH
44764: LD_VAR 0 8
44768: PPUSH
44769: LD_VAR 0 4
44773: PPUSH
44774: CALL_OW 380
// un := CreateHuman ;
44778: LD_ADDR_VAR 0 14
44782: PUSH
44783: CALL_OW 44
44787: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44788: LD_ADDR_VAR 0 7
44792: PUSH
44793: LD_VAR 0 7
44797: PPUSH
44798: LD_INT 1
44800: PPUSH
44801: LD_VAR 0 14
44805: PPUSH
44806: CALL_OW 2
44810: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
44811: LD_VAR 0 14
44815: PPUSH
44816: LD_VAR 0 1
44820: PPUSH
44821: CALL_OW 250
44825: PPUSH
44826: LD_VAR 0 1
44830: PPUSH
44831: CALL_OW 251
44835: PPUSH
44836: LD_INT 10
44838: PPUSH
44839: LD_INT 0
44841: PPUSH
44842: CALL_OW 50
// continue ;
44846: GO 44747
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
44848: LD_VAR 0 12
44852: PUSH
44853: LD_INT 1
44855: ARRAY
44856: PPUSH
44857: CALL_OW 313
44861: PUSH
44862: LD_VAR 0 12
44866: PUSH
44867: LD_INT 1
44869: ARRAY
44870: PPUSH
44871: CALL_OW 266
44875: PUSH
44876: LD_INT 32
44878: PUSH
44879: LD_INT 31
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: IN
44886: AND
44887: PUSH
44888: LD_VAR 0 12
44892: PUSH
44893: LD_INT 1
44895: ARRAY
44896: PPUSH
44897: CALL_OW 313
44901: PUSH
44902: LD_INT 6
44904: EQUAL
44905: OR
44906: IFFALSE 44926
// f := Delete ( f , 1 ) ;
44908: LD_ADDR_VAR 0 12
44912: PUSH
44913: LD_VAR 0 12
44917: PPUSH
44918: LD_INT 1
44920: PPUSH
44921: CALL_OW 3
44925: ST_TO_ADDR
// if not f then
44926: LD_VAR 0 12
44930: NOT
44931: IFFALSE 44949
// begin x := x + 2 ;
44933: LD_ADDR_VAR 0 13
44937: PUSH
44938: LD_VAR 0 13
44942: PUSH
44943: LD_INT 2
44945: PLUS
44946: ST_TO_ADDR
// continue ;
44947: GO 44747
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
44949: LD_VAR 0 12
44953: PUSH
44954: LD_INT 1
44956: ARRAY
44957: PPUSH
44958: CALL_OW 266
44962: PUSH
44963: LD_INT 5
44965: EQUAL
44966: IFFALSE 45040
// begin if UnitsInside ( f [ 1 ] ) < 3 then
44968: LD_VAR 0 12
44972: PUSH
44973: LD_INT 1
44975: ARRAY
44976: PPUSH
44977: CALL_OW 313
44981: PUSH
44982: LD_INT 3
44984: LESS
44985: IFFALSE 45021
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44987: LD_INT 0
44989: PPUSH
44990: LD_INT 5
44992: PUSH
44993: LD_INT 8
44995: PUSH
44996: LD_INT 9
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: LIST
45003: PUSH
45004: LD_VAR 0 17
45008: ARRAY
45009: PPUSH
45010: LD_VAR 0 4
45014: PPUSH
45015: CALL_OW 380
45019: GO 45038
// PrepareHuman ( false , i , skill ) ;
45021: LD_INT 0
45023: PPUSH
45024: LD_VAR 0 8
45028: PPUSH
45029: LD_VAR 0 4
45033: PPUSH
45034: CALL_OW 380
// end else
45038: GO 45057
// PrepareHuman ( false , i , skill ) ;
45040: LD_INT 0
45042: PPUSH
45043: LD_VAR 0 8
45047: PPUSH
45048: LD_VAR 0 4
45052: PPUSH
45053: CALL_OW 380
// un := CreateHuman ;
45057: LD_ADDR_VAR 0 14
45061: PUSH
45062: CALL_OW 44
45066: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45067: LD_ADDR_VAR 0 7
45071: PUSH
45072: LD_VAR 0 7
45076: PPUSH
45077: LD_INT 1
45079: PPUSH
45080: LD_VAR 0 14
45084: PPUSH
45085: CALL_OW 2
45089: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
45090: LD_VAR 0 14
45094: PPUSH
45095: LD_VAR 0 12
45099: PUSH
45100: LD_INT 1
45102: ARRAY
45103: PPUSH
45104: CALL_OW 52
// end ;
45108: GO 44747
45110: POP
45111: POP
// end ;
45112: GO 44049
45114: POP
45115: POP
// result := result ^ buildings ;
45116: LD_ADDR_VAR 0 7
45120: PUSH
45121: LD_VAR 0 7
45125: PUSH
45126: LD_VAR 0 18
45130: ADD
45131: ST_TO_ADDR
// end else
45132: GO 45275
// begin for i = 1 to personel do
45134: LD_ADDR_VAR 0 8
45138: PUSH
45139: DOUBLE
45140: LD_INT 1
45142: DEC
45143: ST_TO_ADDR
45144: LD_VAR 0 6
45148: PUSH
45149: FOR_TO
45150: IFFALSE 45273
// begin if i > 4 then
45152: LD_VAR 0 8
45156: PUSH
45157: LD_INT 4
45159: GREATER
45160: IFFALSE 45164
// break ;
45162: GO 45273
// x := personel [ i ] ;
45164: LD_ADDR_VAR 0 13
45168: PUSH
45169: LD_VAR 0 6
45173: PUSH
45174: LD_VAR 0 8
45178: ARRAY
45179: ST_TO_ADDR
// if x = - 1 then
45180: LD_VAR 0 13
45184: PUSH
45185: LD_INT 1
45187: NEG
45188: EQUAL
45189: IFFALSE 45193
// continue ;
45191: GO 45149
// PrepareHuman ( false , i , skill ) ;
45193: LD_INT 0
45195: PPUSH
45196: LD_VAR 0 8
45200: PPUSH
45201: LD_VAR 0 4
45205: PPUSH
45206: CALL_OW 380
// un := CreateHuman ;
45210: LD_ADDR_VAR 0 14
45214: PUSH
45215: CALL_OW 44
45219: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45220: LD_VAR 0 14
45224: PPUSH
45225: LD_VAR 0 1
45229: PPUSH
45230: CALL_OW 250
45234: PPUSH
45235: LD_VAR 0 1
45239: PPUSH
45240: CALL_OW 251
45244: PPUSH
45245: LD_INT 10
45247: PPUSH
45248: LD_INT 0
45250: PPUSH
45251: CALL_OW 50
// result := result ^ un ;
45255: LD_ADDR_VAR 0 7
45259: PUSH
45260: LD_VAR 0 7
45264: PUSH
45265: LD_VAR 0 14
45269: ADD
45270: ST_TO_ADDR
// end ;
45271: GO 45149
45273: POP
45274: POP
// end ; end ;
45275: LD_VAR 0 7
45279: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
45280: LD_INT 0
45282: PPUSH
45283: PPUSH
45284: PPUSH
45285: PPUSH
45286: PPUSH
45287: PPUSH
45288: PPUSH
45289: PPUSH
45290: PPUSH
45291: PPUSH
45292: PPUSH
45293: PPUSH
45294: PPUSH
45295: PPUSH
45296: PPUSH
45297: PPUSH
// result := false ;
45298: LD_ADDR_VAR 0 3
45302: PUSH
45303: LD_INT 0
45305: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
45306: LD_VAR 0 1
45310: NOT
45311: PUSH
45312: LD_VAR 0 1
45316: PPUSH
45317: CALL_OW 266
45321: PUSH
45322: LD_INT 32
45324: PUSH
45325: LD_INT 33
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: IN
45332: NOT
45333: OR
45334: IFFALSE 45338
// exit ;
45336: GO 46447
// nat := GetNation ( tower ) ;
45338: LD_ADDR_VAR 0 12
45342: PUSH
45343: LD_VAR 0 1
45347: PPUSH
45348: CALL_OW 248
45352: ST_TO_ADDR
// side := GetSide ( tower ) ;
45353: LD_ADDR_VAR 0 16
45357: PUSH
45358: LD_VAR 0 1
45362: PPUSH
45363: CALL_OW 255
45367: ST_TO_ADDR
// x := GetX ( tower ) ;
45368: LD_ADDR_VAR 0 10
45372: PUSH
45373: LD_VAR 0 1
45377: PPUSH
45378: CALL_OW 250
45382: ST_TO_ADDR
// y := GetY ( tower ) ;
45383: LD_ADDR_VAR 0 11
45387: PUSH
45388: LD_VAR 0 1
45392: PPUSH
45393: CALL_OW 251
45397: ST_TO_ADDR
// if not x or not y then
45398: LD_VAR 0 10
45402: NOT
45403: PUSH
45404: LD_VAR 0 11
45408: NOT
45409: OR
45410: IFFALSE 45414
// exit ;
45412: GO 46447
// weapon := 0 ;
45414: LD_ADDR_VAR 0 18
45418: PUSH
45419: LD_INT 0
45421: ST_TO_ADDR
// fac_list := [ ] ;
45422: LD_ADDR_VAR 0 17
45426: PUSH
45427: EMPTY
45428: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
45429: LD_ADDR_VAR 0 6
45433: PUSH
45434: LD_VAR 0 1
45438: PPUSH
45439: CALL_OW 274
45443: PPUSH
45444: LD_VAR 0 2
45448: PPUSH
45449: LD_INT 0
45451: PPUSH
45452: CALL 43018 0 3
45456: PPUSH
45457: LD_INT 30
45459: PUSH
45460: LD_INT 3
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PPUSH
45467: CALL_OW 72
45471: ST_TO_ADDR
// if not factories then
45472: LD_VAR 0 6
45476: NOT
45477: IFFALSE 45481
// exit ;
45479: GO 46447
// for i in factories do
45481: LD_ADDR_VAR 0 8
45485: PUSH
45486: LD_VAR 0 6
45490: PUSH
45491: FOR_IN
45492: IFFALSE 45517
// fac_list := fac_list union AvailableWeaponList ( i ) ;
45494: LD_ADDR_VAR 0 17
45498: PUSH
45499: LD_VAR 0 17
45503: PUSH
45504: LD_VAR 0 8
45508: PPUSH
45509: CALL_OW 478
45513: UNION
45514: ST_TO_ADDR
45515: GO 45491
45517: POP
45518: POP
// if not fac_list then
45519: LD_VAR 0 17
45523: NOT
45524: IFFALSE 45528
// exit ;
45526: GO 46447
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
45528: LD_ADDR_VAR 0 5
45532: PUSH
45533: LD_INT 4
45535: PUSH
45536: LD_INT 5
45538: PUSH
45539: LD_INT 9
45541: PUSH
45542: LD_INT 10
45544: PUSH
45545: LD_INT 6
45547: PUSH
45548: LD_INT 7
45550: PUSH
45551: LD_INT 11
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 27
45565: PUSH
45566: LD_INT 28
45568: PUSH
45569: LD_INT 26
45571: PUSH
45572: LD_INT 30
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 43
45583: PUSH
45584: LD_INT 44
45586: PUSH
45587: LD_INT 46
45589: PUSH
45590: LD_INT 45
45592: PUSH
45593: LD_INT 47
45595: PUSH
45596: LD_INT 49
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: LIST
45611: PUSH
45612: LD_VAR 0 12
45616: ARRAY
45617: ST_TO_ADDR
// list := list isect fac_list ;
45618: LD_ADDR_VAR 0 5
45622: PUSH
45623: LD_VAR 0 5
45627: PUSH
45628: LD_VAR 0 17
45632: ISECT
45633: ST_TO_ADDR
// if not list then
45634: LD_VAR 0 5
45638: NOT
45639: IFFALSE 45643
// exit ;
45641: GO 46447
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
45643: LD_VAR 0 12
45647: PUSH
45648: LD_INT 3
45650: EQUAL
45651: PUSH
45652: LD_INT 49
45654: PUSH
45655: LD_VAR 0 5
45659: IN
45660: AND
45661: PUSH
45662: LD_INT 31
45664: PPUSH
45665: LD_VAR 0 16
45669: PPUSH
45670: CALL_OW 321
45674: PUSH
45675: LD_INT 2
45677: EQUAL
45678: AND
45679: IFFALSE 45739
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
45681: LD_INT 22
45683: PUSH
45684: LD_VAR 0 16
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 35
45695: PUSH
45696: LD_INT 49
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 91
45705: PUSH
45706: LD_VAR 0 1
45710: PUSH
45711: LD_INT 10
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: LIST
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: LIST
45723: PPUSH
45724: CALL_OW 69
45728: NOT
45729: IFFALSE 45739
// weapon := ru_time_lapser ;
45731: LD_ADDR_VAR 0 18
45735: PUSH
45736: LD_INT 49
45738: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
45739: LD_VAR 0 12
45743: PUSH
45744: LD_INT 1
45746: PUSH
45747: LD_INT 2
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: IN
45754: PUSH
45755: LD_INT 11
45757: PUSH
45758: LD_VAR 0 5
45762: IN
45763: PUSH
45764: LD_INT 30
45766: PUSH
45767: LD_VAR 0 5
45771: IN
45772: OR
45773: AND
45774: PUSH
45775: LD_INT 6
45777: PPUSH
45778: LD_VAR 0 16
45782: PPUSH
45783: CALL_OW 321
45787: PUSH
45788: LD_INT 2
45790: EQUAL
45791: AND
45792: IFFALSE 45957
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
45794: LD_INT 22
45796: PUSH
45797: LD_VAR 0 16
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 2
45808: PUSH
45809: LD_INT 35
45811: PUSH
45812: LD_INT 11
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 35
45821: PUSH
45822: LD_INT 30
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 91
45836: PUSH
45837: LD_VAR 0 1
45841: PUSH
45842: LD_INT 18
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: LIST
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: LIST
45854: PPUSH
45855: CALL_OW 69
45859: NOT
45860: PUSH
45861: LD_INT 22
45863: PUSH
45864: LD_VAR 0 16
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 2
45875: PUSH
45876: LD_INT 30
45878: PUSH
45879: LD_INT 32
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 30
45888: PUSH
45889: LD_INT 33
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 91
45903: PUSH
45904: LD_VAR 0 1
45908: PUSH
45909: LD_INT 12
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: LIST
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: LIST
45921: PUSH
45922: EMPTY
45923: LIST
45924: PPUSH
45925: CALL_OW 69
45929: PUSH
45930: LD_INT 2
45932: GREATER
45933: AND
45934: IFFALSE 45957
// weapon := [ us_radar , ar_radar ] [ nat ] ;
45936: LD_ADDR_VAR 0 18
45940: PUSH
45941: LD_INT 11
45943: PUSH
45944: LD_INT 30
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_VAR 0 12
45955: ARRAY
45956: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
45957: LD_VAR 0 18
45961: NOT
45962: PUSH
45963: LD_INT 40
45965: PPUSH
45966: LD_VAR 0 16
45970: PPUSH
45971: CALL_OW 321
45975: PUSH
45976: LD_INT 2
45978: EQUAL
45979: AND
45980: PUSH
45981: LD_INT 7
45983: PUSH
45984: LD_VAR 0 5
45988: IN
45989: PUSH
45990: LD_INT 28
45992: PUSH
45993: LD_VAR 0 5
45997: IN
45998: OR
45999: PUSH
46000: LD_INT 45
46002: PUSH
46003: LD_VAR 0 5
46007: IN
46008: OR
46009: AND
46010: IFFALSE 46264
// begin hex := GetHexInfo ( x , y ) ;
46012: LD_ADDR_VAR 0 4
46016: PUSH
46017: LD_VAR 0 10
46021: PPUSH
46022: LD_VAR 0 11
46026: PPUSH
46027: CALL_OW 546
46031: ST_TO_ADDR
// if hex [ 1 ] then
46032: LD_VAR 0 4
46036: PUSH
46037: LD_INT 1
46039: ARRAY
46040: IFFALSE 46044
// exit ;
46042: GO 46447
// height := hex [ 2 ] ;
46044: LD_ADDR_VAR 0 15
46048: PUSH
46049: LD_VAR 0 4
46053: PUSH
46054: LD_INT 2
46056: ARRAY
46057: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
46058: LD_ADDR_VAR 0 14
46062: PUSH
46063: LD_INT 0
46065: PUSH
46066: LD_INT 2
46068: PUSH
46069: LD_INT 3
46071: PUSH
46072: LD_INT 5
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: ST_TO_ADDR
// for i in tmp do
46081: LD_ADDR_VAR 0 8
46085: PUSH
46086: LD_VAR 0 14
46090: PUSH
46091: FOR_IN
46092: IFFALSE 46262
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
46094: LD_ADDR_VAR 0 9
46098: PUSH
46099: LD_VAR 0 10
46103: PPUSH
46104: LD_VAR 0 8
46108: PPUSH
46109: LD_INT 5
46111: PPUSH
46112: CALL_OW 272
46116: PUSH
46117: LD_VAR 0 11
46121: PPUSH
46122: LD_VAR 0 8
46126: PPUSH
46127: LD_INT 5
46129: PPUSH
46130: CALL_OW 273
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
46139: LD_VAR 0 9
46143: PUSH
46144: LD_INT 1
46146: ARRAY
46147: PPUSH
46148: LD_VAR 0 9
46152: PUSH
46153: LD_INT 2
46155: ARRAY
46156: PPUSH
46157: CALL_OW 488
46161: IFFALSE 46260
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
46163: LD_ADDR_VAR 0 4
46167: PUSH
46168: LD_VAR 0 9
46172: PUSH
46173: LD_INT 1
46175: ARRAY
46176: PPUSH
46177: LD_VAR 0 9
46181: PUSH
46182: LD_INT 2
46184: ARRAY
46185: PPUSH
46186: CALL_OW 546
46190: ST_TO_ADDR
// if hex [ 1 ] then
46191: LD_VAR 0 4
46195: PUSH
46196: LD_INT 1
46198: ARRAY
46199: IFFALSE 46203
// continue ;
46201: GO 46091
// h := hex [ 2 ] ;
46203: LD_ADDR_VAR 0 13
46207: PUSH
46208: LD_VAR 0 4
46212: PUSH
46213: LD_INT 2
46215: ARRAY
46216: ST_TO_ADDR
// if h + 7 < height then
46217: LD_VAR 0 13
46221: PUSH
46222: LD_INT 7
46224: PLUS
46225: PUSH
46226: LD_VAR 0 15
46230: LESS
46231: IFFALSE 46260
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
46233: LD_ADDR_VAR 0 18
46237: PUSH
46238: LD_INT 7
46240: PUSH
46241: LD_INT 28
46243: PUSH
46244: LD_INT 45
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: LIST
46251: PUSH
46252: LD_VAR 0 12
46256: ARRAY
46257: ST_TO_ADDR
// break ;
46258: GO 46262
// end ; end ; end ;
46260: GO 46091
46262: POP
46263: POP
// end ; if not weapon then
46264: LD_VAR 0 18
46268: NOT
46269: IFFALSE 46329
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
46271: LD_ADDR_VAR 0 5
46275: PUSH
46276: LD_VAR 0 5
46280: PUSH
46281: LD_INT 11
46283: PUSH
46284: LD_INT 30
46286: PUSH
46287: LD_INT 49
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: LIST
46294: DIFF
46295: ST_TO_ADDR
// if not list then
46296: LD_VAR 0 5
46300: NOT
46301: IFFALSE 46305
// exit ;
46303: GO 46447
// weapon := list [ rand ( 1 , list ) ] ;
46305: LD_ADDR_VAR 0 18
46309: PUSH
46310: LD_VAR 0 5
46314: PUSH
46315: LD_INT 1
46317: PPUSH
46318: LD_VAR 0 5
46322: PPUSH
46323: CALL_OW 12
46327: ARRAY
46328: ST_TO_ADDR
// end ; if weapon then
46329: LD_VAR 0 18
46333: IFFALSE 46447
// begin tmp := CostOfWeapon ( weapon ) ;
46335: LD_ADDR_VAR 0 14
46339: PUSH
46340: LD_VAR 0 18
46344: PPUSH
46345: CALL_OW 451
46349: ST_TO_ADDR
// j := GetBase ( tower ) ;
46350: LD_ADDR_VAR 0 9
46354: PUSH
46355: LD_VAR 0 1
46359: PPUSH
46360: CALL_OW 274
46364: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
46365: LD_VAR 0 9
46369: PPUSH
46370: LD_INT 1
46372: PPUSH
46373: CALL_OW 275
46377: PUSH
46378: LD_VAR 0 14
46382: PUSH
46383: LD_INT 1
46385: ARRAY
46386: GREATEREQUAL
46387: PUSH
46388: LD_VAR 0 9
46392: PPUSH
46393: LD_INT 2
46395: PPUSH
46396: CALL_OW 275
46400: PUSH
46401: LD_VAR 0 14
46405: PUSH
46406: LD_INT 2
46408: ARRAY
46409: GREATEREQUAL
46410: AND
46411: PUSH
46412: LD_VAR 0 9
46416: PPUSH
46417: LD_INT 3
46419: PPUSH
46420: CALL_OW 275
46424: PUSH
46425: LD_VAR 0 14
46429: PUSH
46430: LD_INT 3
46432: ARRAY
46433: GREATEREQUAL
46434: AND
46435: IFFALSE 46447
// result := weapon ;
46437: LD_ADDR_VAR 0 3
46441: PUSH
46442: LD_VAR 0 18
46446: ST_TO_ADDR
// end ; end ;
46447: LD_VAR 0 3
46451: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
46452: LD_INT 0
46454: PPUSH
46455: PPUSH
// result := true ;
46456: LD_ADDR_VAR 0 3
46460: PUSH
46461: LD_INT 1
46463: ST_TO_ADDR
// if array1 = array2 then
46464: LD_VAR 0 1
46468: PUSH
46469: LD_VAR 0 2
46473: EQUAL
46474: IFFALSE 46534
// begin for i = 1 to array1 do
46476: LD_ADDR_VAR 0 4
46480: PUSH
46481: DOUBLE
46482: LD_INT 1
46484: DEC
46485: ST_TO_ADDR
46486: LD_VAR 0 1
46490: PUSH
46491: FOR_TO
46492: IFFALSE 46530
// if array1 [ i ] <> array2 [ i ] then
46494: LD_VAR 0 1
46498: PUSH
46499: LD_VAR 0 4
46503: ARRAY
46504: PUSH
46505: LD_VAR 0 2
46509: PUSH
46510: LD_VAR 0 4
46514: ARRAY
46515: NONEQUAL
46516: IFFALSE 46528
// begin result := false ;
46518: LD_ADDR_VAR 0 3
46522: PUSH
46523: LD_INT 0
46525: ST_TO_ADDR
// break ;
46526: GO 46530
// end ;
46528: GO 46491
46530: POP
46531: POP
// end else
46532: GO 46542
// result := false ;
46534: LD_ADDR_VAR 0 3
46538: PUSH
46539: LD_INT 0
46541: ST_TO_ADDR
// end ;
46542: LD_VAR 0 3
46546: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
46547: LD_INT 0
46549: PPUSH
46550: PPUSH
// if not array1 or not array2 then
46551: LD_VAR 0 1
46555: NOT
46556: PUSH
46557: LD_VAR 0 2
46561: NOT
46562: OR
46563: IFFALSE 46567
// exit ;
46565: GO 46631
// result := true ;
46567: LD_ADDR_VAR 0 3
46571: PUSH
46572: LD_INT 1
46574: ST_TO_ADDR
// for i = 1 to array1 do
46575: LD_ADDR_VAR 0 4
46579: PUSH
46580: DOUBLE
46581: LD_INT 1
46583: DEC
46584: ST_TO_ADDR
46585: LD_VAR 0 1
46589: PUSH
46590: FOR_TO
46591: IFFALSE 46629
// if array1 [ i ] <> array2 [ i ] then
46593: LD_VAR 0 1
46597: PUSH
46598: LD_VAR 0 4
46602: ARRAY
46603: PUSH
46604: LD_VAR 0 2
46608: PUSH
46609: LD_VAR 0 4
46613: ARRAY
46614: NONEQUAL
46615: IFFALSE 46627
// begin result := false ;
46617: LD_ADDR_VAR 0 3
46621: PUSH
46622: LD_INT 0
46624: ST_TO_ADDR
// break ;
46625: GO 46629
// end ;
46627: GO 46590
46629: POP
46630: POP
// end ;
46631: LD_VAR 0 3
46635: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
46636: LD_INT 0
46638: PPUSH
46639: PPUSH
46640: PPUSH
// pom := GetBase ( fac ) ;
46641: LD_ADDR_VAR 0 5
46645: PUSH
46646: LD_VAR 0 1
46650: PPUSH
46651: CALL_OW 274
46655: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
46656: LD_ADDR_VAR 0 4
46660: PUSH
46661: LD_VAR 0 2
46665: PUSH
46666: LD_INT 1
46668: ARRAY
46669: PPUSH
46670: LD_VAR 0 2
46674: PUSH
46675: LD_INT 2
46677: ARRAY
46678: PPUSH
46679: LD_VAR 0 2
46683: PUSH
46684: LD_INT 3
46686: ARRAY
46687: PPUSH
46688: LD_VAR 0 2
46692: PUSH
46693: LD_INT 4
46695: ARRAY
46696: PPUSH
46697: CALL_OW 449
46701: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46702: LD_ADDR_VAR 0 3
46706: PUSH
46707: LD_VAR 0 5
46711: PPUSH
46712: LD_INT 1
46714: PPUSH
46715: CALL_OW 275
46719: PUSH
46720: LD_VAR 0 4
46724: PUSH
46725: LD_INT 1
46727: ARRAY
46728: GREATEREQUAL
46729: PUSH
46730: LD_VAR 0 5
46734: PPUSH
46735: LD_INT 2
46737: PPUSH
46738: CALL_OW 275
46742: PUSH
46743: LD_VAR 0 4
46747: PUSH
46748: LD_INT 2
46750: ARRAY
46751: GREATEREQUAL
46752: AND
46753: PUSH
46754: LD_VAR 0 5
46758: PPUSH
46759: LD_INT 3
46761: PPUSH
46762: CALL_OW 275
46766: PUSH
46767: LD_VAR 0 4
46771: PUSH
46772: LD_INT 3
46774: ARRAY
46775: GREATEREQUAL
46776: AND
46777: ST_TO_ADDR
// end ;
46778: LD_VAR 0 3
46782: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
46783: LD_INT 0
46785: PPUSH
46786: PPUSH
46787: PPUSH
46788: PPUSH
// pom := GetBase ( building ) ;
46789: LD_ADDR_VAR 0 3
46793: PUSH
46794: LD_VAR 0 1
46798: PPUSH
46799: CALL_OW 274
46803: ST_TO_ADDR
// if not pom then
46804: LD_VAR 0 3
46808: NOT
46809: IFFALSE 46813
// exit ;
46811: GO 46983
// btype := GetBType ( building ) ;
46813: LD_ADDR_VAR 0 5
46817: PUSH
46818: LD_VAR 0 1
46822: PPUSH
46823: CALL_OW 266
46827: ST_TO_ADDR
// if btype = b_armoury then
46828: LD_VAR 0 5
46832: PUSH
46833: LD_INT 4
46835: EQUAL
46836: IFFALSE 46846
// btype := b_barracks ;
46838: LD_ADDR_VAR 0 5
46842: PUSH
46843: LD_INT 5
46845: ST_TO_ADDR
// if btype = b_depot then
46846: LD_VAR 0 5
46850: PUSH
46851: LD_INT 0
46853: EQUAL
46854: IFFALSE 46864
// btype := b_warehouse ;
46856: LD_ADDR_VAR 0 5
46860: PUSH
46861: LD_INT 1
46863: ST_TO_ADDR
// if btype = b_workshop then
46864: LD_VAR 0 5
46868: PUSH
46869: LD_INT 2
46871: EQUAL
46872: IFFALSE 46882
// btype := b_factory ;
46874: LD_ADDR_VAR 0 5
46878: PUSH
46879: LD_INT 3
46881: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46882: LD_ADDR_VAR 0 4
46886: PUSH
46887: LD_VAR 0 5
46891: PPUSH
46892: LD_VAR 0 1
46896: PPUSH
46897: CALL_OW 248
46901: PPUSH
46902: CALL_OW 450
46906: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46907: LD_ADDR_VAR 0 2
46911: PUSH
46912: LD_VAR 0 3
46916: PPUSH
46917: LD_INT 1
46919: PPUSH
46920: CALL_OW 275
46924: PUSH
46925: LD_VAR 0 4
46929: PUSH
46930: LD_INT 1
46932: ARRAY
46933: GREATEREQUAL
46934: PUSH
46935: LD_VAR 0 3
46939: PPUSH
46940: LD_INT 2
46942: PPUSH
46943: CALL_OW 275
46947: PUSH
46948: LD_VAR 0 4
46952: PUSH
46953: LD_INT 2
46955: ARRAY
46956: GREATEREQUAL
46957: AND
46958: PUSH
46959: LD_VAR 0 3
46963: PPUSH
46964: LD_INT 3
46966: PPUSH
46967: CALL_OW 275
46971: PUSH
46972: LD_VAR 0 4
46976: PUSH
46977: LD_INT 3
46979: ARRAY
46980: GREATEREQUAL
46981: AND
46982: ST_TO_ADDR
// end ;
46983: LD_VAR 0 2
46987: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
46988: LD_INT 0
46990: PPUSH
46991: PPUSH
46992: PPUSH
// pom := GetBase ( building ) ;
46993: LD_ADDR_VAR 0 4
46997: PUSH
46998: LD_VAR 0 1
47002: PPUSH
47003: CALL_OW 274
47007: ST_TO_ADDR
// if not pom then
47008: LD_VAR 0 4
47012: NOT
47013: IFFALSE 47017
// exit ;
47015: GO 47118
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47017: LD_ADDR_VAR 0 5
47021: PUSH
47022: LD_VAR 0 2
47026: PPUSH
47027: LD_VAR 0 1
47031: PPUSH
47032: CALL_OW 248
47036: PPUSH
47037: CALL_OW 450
47041: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47042: LD_ADDR_VAR 0 3
47046: PUSH
47047: LD_VAR 0 4
47051: PPUSH
47052: LD_INT 1
47054: PPUSH
47055: CALL_OW 275
47059: PUSH
47060: LD_VAR 0 5
47064: PUSH
47065: LD_INT 1
47067: ARRAY
47068: GREATEREQUAL
47069: PUSH
47070: LD_VAR 0 4
47074: PPUSH
47075: LD_INT 2
47077: PPUSH
47078: CALL_OW 275
47082: PUSH
47083: LD_VAR 0 5
47087: PUSH
47088: LD_INT 2
47090: ARRAY
47091: GREATEREQUAL
47092: AND
47093: PUSH
47094: LD_VAR 0 4
47098: PPUSH
47099: LD_INT 3
47101: PPUSH
47102: CALL_OW 275
47106: PUSH
47107: LD_VAR 0 5
47111: PUSH
47112: LD_INT 3
47114: ARRAY
47115: GREATEREQUAL
47116: AND
47117: ST_TO_ADDR
// end ;
47118: LD_VAR 0 3
47122: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
47123: LD_INT 0
47125: PPUSH
47126: PPUSH
47127: PPUSH
47128: PPUSH
47129: PPUSH
47130: PPUSH
47131: PPUSH
47132: PPUSH
47133: PPUSH
47134: PPUSH
47135: PPUSH
// result := false ;
47136: LD_ADDR_VAR 0 8
47140: PUSH
47141: LD_INT 0
47143: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
47144: LD_VAR 0 5
47148: NOT
47149: PUSH
47150: LD_VAR 0 1
47154: NOT
47155: OR
47156: PUSH
47157: LD_VAR 0 2
47161: NOT
47162: OR
47163: PUSH
47164: LD_VAR 0 3
47168: NOT
47169: OR
47170: IFFALSE 47174
// exit ;
47172: GO 47988
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
47174: LD_ADDR_VAR 0 14
47178: PUSH
47179: LD_VAR 0 1
47183: PPUSH
47184: LD_VAR 0 2
47188: PPUSH
47189: LD_VAR 0 3
47193: PPUSH
47194: LD_VAR 0 4
47198: PPUSH
47199: LD_VAR 0 5
47203: PUSH
47204: LD_INT 1
47206: ARRAY
47207: PPUSH
47208: CALL_OW 248
47212: PPUSH
47213: LD_INT 0
47215: PPUSH
47216: CALL 49225 0 6
47220: ST_TO_ADDR
// if not hexes then
47221: LD_VAR 0 14
47225: NOT
47226: IFFALSE 47230
// exit ;
47228: GO 47988
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47230: LD_ADDR_VAR 0 17
47234: PUSH
47235: LD_VAR 0 5
47239: PPUSH
47240: LD_INT 22
47242: PUSH
47243: LD_VAR 0 13
47247: PPUSH
47248: CALL_OW 255
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 2
47259: PUSH
47260: LD_INT 30
47262: PUSH
47263: LD_INT 0
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 30
47272: PUSH
47273: LD_INT 1
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: LIST
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PPUSH
47289: CALL_OW 72
47293: ST_TO_ADDR
// for i = 1 to hexes do
47294: LD_ADDR_VAR 0 9
47298: PUSH
47299: DOUBLE
47300: LD_INT 1
47302: DEC
47303: ST_TO_ADDR
47304: LD_VAR 0 14
47308: PUSH
47309: FOR_TO
47310: IFFALSE 47986
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47312: LD_ADDR_VAR 0 13
47316: PUSH
47317: LD_VAR 0 14
47321: PUSH
47322: LD_VAR 0 9
47326: ARRAY
47327: PUSH
47328: LD_INT 1
47330: ARRAY
47331: PPUSH
47332: LD_VAR 0 14
47336: PUSH
47337: LD_VAR 0 9
47341: ARRAY
47342: PUSH
47343: LD_INT 2
47345: ARRAY
47346: PPUSH
47347: CALL_OW 428
47351: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
47352: LD_VAR 0 14
47356: PUSH
47357: LD_VAR 0 9
47361: ARRAY
47362: PUSH
47363: LD_INT 1
47365: ARRAY
47366: PPUSH
47367: LD_VAR 0 14
47371: PUSH
47372: LD_VAR 0 9
47376: ARRAY
47377: PUSH
47378: LD_INT 2
47380: ARRAY
47381: PPUSH
47382: CALL_OW 351
47386: PUSH
47387: LD_VAR 0 14
47391: PUSH
47392: LD_VAR 0 9
47396: ARRAY
47397: PUSH
47398: LD_INT 1
47400: ARRAY
47401: PPUSH
47402: LD_VAR 0 14
47406: PUSH
47407: LD_VAR 0 9
47411: ARRAY
47412: PUSH
47413: LD_INT 2
47415: ARRAY
47416: PPUSH
47417: CALL_OW 488
47421: NOT
47422: OR
47423: PUSH
47424: LD_VAR 0 13
47428: PPUSH
47429: CALL_OW 247
47433: PUSH
47434: LD_INT 3
47436: EQUAL
47437: OR
47438: IFFALSE 47444
// exit ;
47440: POP
47441: POP
47442: GO 47988
// if not tmp then
47444: LD_VAR 0 13
47448: NOT
47449: IFFALSE 47453
// continue ;
47451: GO 47309
// result := true ;
47453: LD_ADDR_VAR 0 8
47457: PUSH
47458: LD_INT 1
47460: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
47461: LD_VAR 0 6
47465: PUSH
47466: LD_VAR 0 13
47470: PPUSH
47471: CALL_OW 247
47475: PUSH
47476: LD_INT 2
47478: EQUAL
47479: AND
47480: PUSH
47481: LD_VAR 0 13
47485: PPUSH
47486: CALL_OW 263
47490: PUSH
47491: LD_INT 1
47493: EQUAL
47494: AND
47495: IFFALSE 47659
// begin if IsDrivenBy ( tmp ) then
47497: LD_VAR 0 13
47501: PPUSH
47502: CALL_OW 311
47506: IFFALSE 47510
// continue ;
47508: GO 47309
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
47510: LD_VAR 0 6
47514: PPUSH
47515: LD_INT 3
47517: PUSH
47518: LD_INT 60
47520: PUSH
47521: EMPTY
47522: LIST
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 3
47530: PUSH
47531: LD_INT 55
47533: PUSH
47534: EMPTY
47535: LIST
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PPUSH
47545: CALL_OW 72
47549: IFFALSE 47657
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
47551: LD_ADDR_VAR 0 18
47555: PUSH
47556: LD_VAR 0 6
47560: PPUSH
47561: LD_INT 3
47563: PUSH
47564: LD_INT 60
47566: PUSH
47567: EMPTY
47568: LIST
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 3
47576: PUSH
47577: LD_INT 55
47579: PUSH
47580: EMPTY
47581: LIST
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PPUSH
47591: CALL_OW 72
47595: PUSH
47596: LD_INT 1
47598: ARRAY
47599: ST_TO_ADDR
// if IsInUnit ( driver ) then
47600: LD_VAR 0 18
47604: PPUSH
47605: CALL_OW 310
47609: IFFALSE 47620
// ComExit ( driver ) ;
47611: LD_VAR 0 18
47615: PPUSH
47616: CALL 72930 0 1
// AddComEnterUnit ( driver , tmp ) ;
47620: LD_VAR 0 18
47624: PPUSH
47625: LD_VAR 0 13
47629: PPUSH
47630: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
47634: LD_VAR 0 18
47638: PPUSH
47639: LD_VAR 0 7
47643: PPUSH
47644: CALL_OW 173
// AddComExitVehicle ( driver ) ;
47648: LD_VAR 0 18
47652: PPUSH
47653: CALL_OW 181
// end ; continue ;
47657: GO 47309
// end ; if not cleaners or not tmp in cleaners then
47659: LD_VAR 0 6
47663: NOT
47664: PUSH
47665: LD_VAR 0 13
47669: PUSH
47670: LD_VAR 0 6
47674: IN
47675: NOT
47676: OR
47677: IFFALSE 47984
// begin if dep then
47679: LD_VAR 0 17
47683: IFFALSE 47819
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
47685: LD_ADDR_VAR 0 16
47689: PUSH
47690: LD_VAR 0 17
47694: PUSH
47695: LD_INT 1
47697: ARRAY
47698: PPUSH
47699: CALL_OW 250
47703: PPUSH
47704: LD_VAR 0 17
47708: PUSH
47709: LD_INT 1
47711: ARRAY
47712: PPUSH
47713: CALL_OW 254
47717: PPUSH
47718: LD_INT 5
47720: PPUSH
47721: CALL_OW 272
47725: PUSH
47726: LD_VAR 0 17
47730: PUSH
47731: LD_INT 1
47733: ARRAY
47734: PPUSH
47735: CALL_OW 251
47739: PPUSH
47740: LD_VAR 0 17
47744: PUSH
47745: LD_INT 1
47747: ARRAY
47748: PPUSH
47749: CALL_OW 254
47753: PPUSH
47754: LD_INT 5
47756: PPUSH
47757: CALL_OW 273
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
47766: LD_VAR 0 16
47770: PUSH
47771: LD_INT 1
47773: ARRAY
47774: PPUSH
47775: LD_VAR 0 16
47779: PUSH
47780: LD_INT 2
47782: ARRAY
47783: PPUSH
47784: CALL_OW 488
47788: IFFALSE 47819
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
47790: LD_VAR 0 13
47794: PPUSH
47795: LD_VAR 0 16
47799: PUSH
47800: LD_INT 1
47802: ARRAY
47803: PPUSH
47804: LD_VAR 0 16
47808: PUSH
47809: LD_INT 2
47811: ARRAY
47812: PPUSH
47813: CALL_OW 111
// continue ;
47817: GO 47309
// end ; end ; r := GetDir ( tmp ) ;
47819: LD_ADDR_VAR 0 15
47823: PUSH
47824: LD_VAR 0 13
47828: PPUSH
47829: CALL_OW 254
47833: ST_TO_ADDR
// if r = 5 then
47834: LD_VAR 0 15
47838: PUSH
47839: LD_INT 5
47841: EQUAL
47842: IFFALSE 47852
// r := 0 ;
47844: LD_ADDR_VAR 0 15
47848: PUSH
47849: LD_INT 0
47851: ST_TO_ADDR
// for j = r to 5 do
47852: LD_ADDR_VAR 0 10
47856: PUSH
47857: DOUBLE
47858: LD_VAR 0 15
47862: DEC
47863: ST_TO_ADDR
47864: LD_INT 5
47866: PUSH
47867: FOR_TO
47868: IFFALSE 47982
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
47870: LD_ADDR_VAR 0 11
47874: PUSH
47875: LD_VAR 0 13
47879: PPUSH
47880: CALL_OW 250
47884: PPUSH
47885: LD_VAR 0 10
47889: PPUSH
47890: LD_INT 2
47892: PPUSH
47893: CALL_OW 272
47897: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
47898: LD_ADDR_VAR 0 12
47902: PUSH
47903: LD_VAR 0 13
47907: PPUSH
47908: CALL_OW 251
47912: PPUSH
47913: LD_VAR 0 10
47917: PPUSH
47918: LD_INT 2
47920: PPUSH
47921: CALL_OW 273
47925: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
47926: LD_VAR 0 11
47930: PPUSH
47931: LD_VAR 0 12
47935: PPUSH
47936: CALL_OW 488
47940: PUSH
47941: LD_VAR 0 11
47945: PPUSH
47946: LD_VAR 0 12
47950: PPUSH
47951: CALL_OW 428
47955: NOT
47956: AND
47957: IFFALSE 47980
// begin ComMoveXY ( tmp , _x , _y ) ;
47959: LD_VAR 0 13
47963: PPUSH
47964: LD_VAR 0 11
47968: PPUSH
47969: LD_VAR 0 12
47973: PPUSH
47974: CALL_OW 111
// break ;
47978: GO 47982
// end ; end ;
47980: GO 47867
47982: POP
47983: POP
// end ; end ;
47984: GO 47309
47986: POP
47987: POP
// end ;
47988: LD_VAR 0 8
47992: RET
// export function BuildingTechInvented ( side , btype ) ; begin
47993: LD_INT 0
47995: PPUSH
// result := true ;
47996: LD_ADDR_VAR 0 3
48000: PUSH
48001: LD_INT 1
48003: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
48004: LD_VAR 0 2
48008: PUSH
48009: LD_INT 24
48011: DOUBLE
48012: EQUAL
48013: IFTRUE 48023
48015: LD_INT 33
48017: DOUBLE
48018: EQUAL
48019: IFTRUE 48023
48021: GO 48048
48023: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
48024: LD_ADDR_VAR 0 3
48028: PUSH
48029: LD_INT 32
48031: PPUSH
48032: LD_VAR 0 1
48036: PPUSH
48037: CALL_OW 321
48041: PUSH
48042: LD_INT 2
48044: EQUAL
48045: ST_TO_ADDR
48046: GO 48368
48048: LD_INT 20
48050: DOUBLE
48051: EQUAL
48052: IFTRUE 48056
48054: GO 48081
48056: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
48057: LD_ADDR_VAR 0 3
48061: PUSH
48062: LD_INT 6
48064: PPUSH
48065: LD_VAR 0 1
48069: PPUSH
48070: CALL_OW 321
48074: PUSH
48075: LD_INT 2
48077: EQUAL
48078: ST_TO_ADDR
48079: GO 48368
48081: LD_INT 22
48083: DOUBLE
48084: EQUAL
48085: IFTRUE 48095
48087: LD_INT 36
48089: DOUBLE
48090: EQUAL
48091: IFTRUE 48095
48093: GO 48120
48095: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
48096: LD_ADDR_VAR 0 3
48100: PUSH
48101: LD_INT 15
48103: PPUSH
48104: LD_VAR 0 1
48108: PPUSH
48109: CALL_OW 321
48113: PUSH
48114: LD_INT 2
48116: EQUAL
48117: ST_TO_ADDR
48118: GO 48368
48120: LD_INT 30
48122: DOUBLE
48123: EQUAL
48124: IFTRUE 48128
48126: GO 48153
48128: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
48129: LD_ADDR_VAR 0 3
48133: PUSH
48134: LD_INT 20
48136: PPUSH
48137: LD_VAR 0 1
48141: PPUSH
48142: CALL_OW 321
48146: PUSH
48147: LD_INT 2
48149: EQUAL
48150: ST_TO_ADDR
48151: GO 48368
48153: LD_INT 28
48155: DOUBLE
48156: EQUAL
48157: IFTRUE 48167
48159: LD_INT 21
48161: DOUBLE
48162: EQUAL
48163: IFTRUE 48167
48165: GO 48192
48167: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
48168: LD_ADDR_VAR 0 3
48172: PUSH
48173: LD_INT 21
48175: PPUSH
48176: LD_VAR 0 1
48180: PPUSH
48181: CALL_OW 321
48185: PUSH
48186: LD_INT 2
48188: EQUAL
48189: ST_TO_ADDR
48190: GO 48368
48192: LD_INT 16
48194: DOUBLE
48195: EQUAL
48196: IFTRUE 48200
48198: GO 48227
48200: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
48201: LD_ADDR_VAR 0 3
48205: PUSH
48206: LD_EXP 51
48210: PPUSH
48211: LD_VAR 0 1
48215: PPUSH
48216: CALL_OW 321
48220: PUSH
48221: LD_INT 2
48223: EQUAL
48224: ST_TO_ADDR
48225: GO 48368
48227: LD_INT 19
48229: DOUBLE
48230: EQUAL
48231: IFTRUE 48241
48233: LD_INT 23
48235: DOUBLE
48236: EQUAL
48237: IFTRUE 48241
48239: GO 48268
48241: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
48242: LD_ADDR_VAR 0 3
48246: PUSH
48247: LD_EXP 50
48251: PPUSH
48252: LD_VAR 0 1
48256: PPUSH
48257: CALL_OW 321
48261: PUSH
48262: LD_INT 2
48264: EQUAL
48265: ST_TO_ADDR
48266: GO 48368
48268: LD_INT 17
48270: DOUBLE
48271: EQUAL
48272: IFTRUE 48276
48274: GO 48301
48276: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
48277: LD_ADDR_VAR 0 3
48281: PUSH
48282: LD_INT 39
48284: PPUSH
48285: LD_VAR 0 1
48289: PPUSH
48290: CALL_OW 321
48294: PUSH
48295: LD_INT 2
48297: EQUAL
48298: ST_TO_ADDR
48299: GO 48368
48301: LD_INT 18
48303: DOUBLE
48304: EQUAL
48305: IFTRUE 48309
48307: GO 48334
48309: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
48310: LD_ADDR_VAR 0 3
48314: PUSH
48315: LD_INT 40
48317: PPUSH
48318: LD_VAR 0 1
48322: PPUSH
48323: CALL_OW 321
48327: PUSH
48328: LD_INT 2
48330: EQUAL
48331: ST_TO_ADDR
48332: GO 48368
48334: LD_INT 27
48336: DOUBLE
48337: EQUAL
48338: IFTRUE 48342
48340: GO 48367
48342: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
48343: LD_ADDR_VAR 0 3
48347: PUSH
48348: LD_INT 35
48350: PPUSH
48351: LD_VAR 0 1
48355: PPUSH
48356: CALL_OW 321
48360: PUSH
48361: LD_INT 2
48363: EQUAL
48364: ST_TO_ADDR
48365: GO 48368
48367: POP
// end ;
48368: LD_VAR 0 3
48372: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
48373: LD_INT 0
48375: PPUSH
48376: PPUSH
48377: PPUSH
48378: PPUSH
48379: PPUSH
48380: PPUSH
48381: PPUSH
48382: PPUSH
48383: PPUSH
48384: PPUSH
48385: PPUSH
// result := false ;
48386: LD_ADDR_VAR 0 6
48390: PUSH
48391: LD_INT 0
48393: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
48394: LD_VAR 0 1
48398: NOT
48399: PUSH
48400: LD_VAR 0 1
48404: PPUSH
48405: CALL_OW 266
48409: PUSH
48410: LD_INT 0
48412: PUSH
48413: LD_INT 1
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: IN
48420: NOT
48421: OR
48422: PUSH
48423: LD_VAR 0 2
48427: NOT
48428: OR
48429: PUSH
48430: LD_VAR 0 5
48434: PUSH
48435: LD_INT 0
48437: PUSH
48438: LD_INT 1
48440: PUSH
48441: LD_INT 2
48443: PUSH
48444: LD_INT 3
48446: PUSH
48447: LD_INT 4
48449: PUSH
48450: LD_INT 5
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: IN
48461: NOT
48462: OR
48463: PUSH
48464: LD_VAR 0 3
48468: PPUSH
48469: LD_VAR 0 4
48473: PPUSH
48474: CALL_OW 488
48478: NOT
48479: OR
48480: IFFALSE 48484
// exit ;
48482: GO 49220
// side := GetSide ( depot ) ;
48484: LD_ADDR_VAR 0 9
48488: PUSH
48489: LD_VAR 0 1
48493: PPUSH
48494: CALL_OW 255
48498: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
48499: LD_VAR 0 9
48503: PPUSH
48504: LD_VAR 0 2
48508: PPUSH
48509: CALL 47993 0 2
48513: NOT
48514: IFFALSE 48518
// exit ;
48516: GO 49220
// pom := GetBase ( depot ) ;
48518: LD_ADDR_VAR 0 10
48522: PUSH
48523: LD_VAR 0 1
48527: PPUSH
48528: CALL_OW 274
48532: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
48533: LD_ADDR_VAR 0 11
48537: PUSH
48538: LD_VAR 0 2
48542: PPUSH
48543: LD_VAR 0 1
48547: PPUSH
48548: CALL_OW 248
48552: PPUSH
48553: CALL_OW 450
48557: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
48558: LD_VAR 0 10
48562: PPUSH
48563: LD_INT 1
48565: PPUSH
48566: CALL_OW 275
48570: PUSH
48571: LD_VAR 0 11
48575: PUSH
48576: LD_INT 1
48578: ARRAY
48579: GREATEREQUAL
48580: PUSH
48581: LD_VAR 0 10
48585: PPUSH
48586: LD_INT 2
48588: PPUSH
48589: CALL_OW 275
48593: PUSH
48594: LD_VAR 0 11
48598: PUSH
48599: LD_INT 2
48601: ARRAY
48602: GREATEREQUAL
48603: AND
48604: PUSH
48605: LD_VAR 0 10
48609: PPUSH
48610: LD_INT 3
48612: PPUSH
48613: CALL_OW 275
48617: PUSH
48618: LD_VAR 0 11
48622: PUSH
48623: LD_INT 3
48625: ARRAY
48626: GREATEREQUAL
48627: AND
48628: NOT
48629: IFFALSE 48633
// exit ;
48631: GO 49220
// if GetBType ( depot ) = b_depot then
48633: LD_VAR 0 1
48637: PPUSH
48638: CALL_OW 266
48642: PUSH
48643: LD_INT 0
48645: EQUAL
48646: IFFALSE 48658
// dist := 28 else
48648: LD_ADDR_VAR 0 14
48652: PUSH
48653: LD_INT 28
48655: ST_TO_ADDR
48656: GO 48666
// dist := 36 ;
48658: LD_ADDR_VAR 0 14
48662: PUSH
48663: LD_INT 36
48665: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
48666: LD_VAR 0 1
48670: PPUSH
48671: LD_VAR 0 3
48675: PPUSH
48676: LD_VAR 0 4
48680: PPUSH
48681: CALL_OW 297
48685: PUSH
48686: LD_VAR 0 14
48690: GREATER
48691: IFFALSE 48695
// exit ;
48693: GO 49220
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
48695: LD_ADDR_VAR 0 12
48699: PUSH
48700: LD_VAR 0 2
48704: PPUSH
48705: LD_VAR 0 3
48709: PPUSH
48710: LD_VAR 0 4
48714: PPUSH
48715: LD_VAR 0 5
48719: PPUSH
48720: LD_VAR 0 1
48724: PPUSH
48725: CALL_OW 248
48729: PPUSH
48730: LD_INT 0
48732: PPUSH
48733: CALL 49225 0 6
48737: ST_TO_ADDR
// if not hexes then
48738: LD_VAR 0 12
48742: NOT
48743: IFFALSE 48747
// exit ;
48745: GO 49220
// hex := GetHexInfo ( x , y ) ;
48747: LD_ADDR_VAR 0 15
48751: PUSH
48752: LD_VAR 0 3
48756: PPUSH
48757: LD_VAR 0 4
48761: PPUSH
48762: CALL_OW 546
48766: ST_TO_ADDR
// if hex [ 1 ] then
48767: LD_VAR 0 15
48771: PUSH
48772: LD_INT 1
48774: ARRAY
48775: IFFALSE 48779
// exit ;
48777: GO 49220
// height := hex [ 2 ] ;
48779: LD_ADDR_VAR 0 13
48783: PUSH
48784: LD_VAR 0 15
48788: PUSH
48789: LD_INT 2
48791: ARRAY
48792: ST_TO_ADDR
// for i = 1 to hexes do
48793: LD_ADDR_VAR 0 7
48797: PUSH
48798: DOUBLE
48799: LD_INT 1
48801: DEC
48802: ST_TO_ADDR
48803: LD_VAR 0 12
48807: PUSH
48808: FOR_TO
48809: IFFALSE 49139
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
48811: LD_VAR 0 12
48815: PUSH
48816: LD_VAR 0 7
48820: ARRAY
48821: PUSH
48822: LD_INT 1
48824: ARRAY
48825: PPUSH
48826: LD_VAR 0 12
48830: PUSH
48831: LD_VAR 0 7
48835: ARRAY
48836: PUSH
48837: LD_INT 2
48839: ARRAY
48840: PPUSH
48841: CALL_OW 488
48845: NOT
48846: PUSH
48847: LD_VAR 0 12
48851: PUSH
48852: LD_VAR 0 7
48856: ARRAY
48857: PUSH
48858: LD_INT 1
48860: ARRAY
48861: PPUSH
48862: LD_VAR 0 12
48866: PUSH
48867: LD_VAR 0 7
48871: ARRAY
48872: PUSH
48873: LD_INT 2
48875: ARRAY
48876: PPUSH
48877: CALL_OW 428
48881: PUSH
48882: LD_INT 0
48884: GREATER
48885: OR
48886: PUSH
48887: LD_VAR 0 12
48891: PUSH
48892: LD_VAR 0 7
48896: ARRAY
48897: PUSH
48898: LD_INT 1
48900: ARRAY
48901: PPUSH
48902: LD_VAR 0 12
48906: PUSH
48907: LD_VAR 0 7
48911: ARRAY
48912: PUSH
48913: LD_INT 2
48915: ARRAY
48916: PPUSH
48917: CALL_OW 351
48921: OR
48922: IFFALSE 48928
// exit ;
48924: POP
48925: POP
48926: GO 49220
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48928: LD_ADDR_VAR 0 8
48932: PUSH
48933: LD_VAR 0 12
48937: PUSH
48938: LD_VAR 0 7
48942: ARRAY
48943: PUSH
48944: LD_INT 1
48946: ARRAY
48947: PPUSH
48948: LD_VAR 0 12
48952: PUSH
48953: LD_VAR 0 7
48957: ARRAY
48958: PUSH
48959: LD_INT 2
48961: ARRAY
48962: PPUSH
48963: CALL_OW 546
48967: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
48968: LD_VAR 0 8
48972: PUSH
48973: LD_INT 1
48975: ARRAY
48976: PUSH
48977: LD_VAR 0 8
48981: PUSH
48982: LD_INT 2
48984: ARRAY
48985: PUSH
48986: LD_VAR 0 13
48990: PUSH
48991: LD_INT 2
48993: PLUS
48994: GREATER
48995: OR
48996: PUSH
48997: LD_VAR 0 8
49001: PUSH
49002: LD_INT 2
49004: ARRAY
49005: PUSH
49006: LD_VAR 0 13
49010: PUSH
49011: LD_INT 2
49013: MINUS
49014: LESS
49015: OR
49016: PUSH
49017: LD_VAR 0 8
49021: PUSH
49022: LD_INT 3
49024: ARRAY
49025: PUSH
49026: LD_INT 0
49028: PUSH
49029: LD_INT 8
49031: PUSH
49032: LD_INT 9
49034: PUSH
49035: LD_INT 10
49037: PUSH
49038: LD_INT 11
49040: PUSH
49041: LD_INT 12
49043: PUSH
49044: LD_INT 13
49046: PUSH
49047: LD_INT 16
49049: PUSH
49050: LD_INT 17
49052: PUSH
49053: LD_INT 18
49055: PUSH
49056: LD_INT 19
49058: PUSH
49059: LD_INT 20
49061: PUSH
49062: LD_INT 21
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: IN
49080: NOT
49081: OR
49082: PUSH
49083: LD_VAR 0 8
49087: PUSH
49088: LD_INT 5
49090: ARRAY
49091: NOT
49092: OR
49093: PUSH
49094: LD_VAR 0 8
49098: PUSH
49099: LD_INT 6
49101: ARRAY
49102: PUSH
49103: LD_INT 1
49105: PUSH
49106: LD_INT 2
49108: PUSH
49109: LD_INT 7
49111: PUSH
49112: LD_INT 9
49114: PUSH
49115: LD_INT 10
49117: PUSH
49118: LD_INT 11
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: IN
49129: NOT
49130: OR
49131: IFFALSE 49137
// exit ;
49133: POP
49134: POP
49135: GO 49220
// end ;
49137: GO 48808
49139: POP
49140: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
49141: LD_VAR 0 9
49145: PPUSH
49146: LD_VAR 0 3
49150: PPUSH
49151: LD_VAR 0 4
49155: PPUSH
49156: LD_INT 20
49158: PPUSH
49159: CALL 41166 0 4
49163: PUSH
49164: LD_INT 4
49166: ARRAY
49167: IFFALSE 49171
// exit ;
49169: GO 49220
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
49171: LD_VAR 0 2
49175: PUSH
49176: LD_INT 29
49178: PUSH
49179: LD_INT 30
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: IN
49186: PUSH
49187: LD_VAR 0 3
49191: PPUSH
49192: LD_VAR 0 4
49196: PPUSH
49197: LD_VAR 0 9
49201: PPUSH
49202: CALL_OW 440
49206: NOT
49207: AND
49208: IFFALSE 49212
// exit ;
49210: GO 49220
// result := true ;
49212: LD_ADDR_VAR 0 6
49216: PUSH
49217: LD_INT 1
49219: ST_TO_ADDR
// end ;
49220: LD_VAR 0 6
49224: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
49225: LD_INT 0
49227: PPUSH
49228: PPUSH
49229: PPUSH
49230: PPUSH
49231: PPUSH
49232: PPUSH
49233: PPUSH
49234: PPUSH
49235: PPUSH
49236: PPUSH
49237: PPUSH
49238: PPUSH
49239: PPUSH
49240: PPUSH
49241: PPUSH
49242: PPUSH
49243: PPUSH
49244: PPUSH
49245: PPUSH
49246: PPUSH
49247: PPUSH
49248: PPUSH
49249: PPUSH
49250: PPUSH
49251: PPUSH
49252: PPUSH
49253: PPUSH
49254: PPUSH
49255: PPUSH
49256: PPUSH
49257: PPUSH
49258: PPUSH
49259: PPUSH
49260: PPUSH
49261: PPUSH
49262: PPUSH
49263: PPUSH
49264: PPUSH
49265: PPUSH
49266: PPUSH
49267: PPUSH
49268: PPUSH
49269: PPUSH
49270: PPUSH
49271: PPUSH
49272: PPUSH
49273: PPUSH
49274: PPUSH
49275: PPUSH
49276: PPUSH
49277: PPUSH
49278: PPUSH
49279: PPUSH
49280: PPUSH
49281: PPUSH
49282: PPUSH
49283: PPUSH
49284: PPUSH
// result = [ ] ;
49285: LD_ADDR_VAR 0 7
49289: PUSH
49290: EMPTY
49291: ST_TO_ADDR
// temp_list = [ ] ;
49292: LD_ADDR_VAR 0 9
49296: PUSH
49297: EMPTY
49298: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
49299: LD_VAR 0 4
49303: PUSH
49304: LD_INT 0
49306: PUSH
49307: LD_INT 1
49309: PUSH
49310: LD_INT 2
49312: PUSH
49313: LD_INT 3
49315: PUSH
49316: LD_INT 4
49318: PUSH
49319: LD_INT 5
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: LIST
49326: LIST
49327: LIST
49328: LIST
49329: IN
49330: NOT
49331: PUSH
49332: LD_VAR 0 1
49336: PUSH
49337: LD_INT 0
49339: PUSH
49340: LD_INT 1
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: IN
49347: PUSH
49348: LD_VAR 0 5
49352: PUSH
49353: LD_INT 1
49355: PUSH
49356: LD_INT 2
49358: PUSH
49359: LD_INT 3
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: LIST
49366: IN
49367: NOT
49368: AND
49369: OR
49370: IFFALSE 49374
// exit ;
49372: GO 67765
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
49374: LD_VAR 0 1
49378: PUSH
49379: LD_INT 6
49381: PUSH
49382: LD_INT 7
49384: PUSH
49385: LD_INT 8
49387: PUSH
49388: LD_INT 13
49390: PUSH
49391: LD_INT 12
49393: PUSH
49394: LD_INT 15
49396: PUSH
49397: LD_INT 11
49399: PUSH
49400: LD_INT 14
49402: PUSH
49403: LD_INT 10
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: IN
49417: IFFALSE 49427
// btype = b_lab ;
49419: LD_ADDR_VAR 0 1
49423: PUSH
49424: LD_INT 6
49426: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
49427: LD_VAR 0 6
49431: PUSH
49432: LD_INT 0
49434: PUSH
49435: LD_INT 1
49437: PUSH
49438: LD_INT 2
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: LIST
49445: IN
49446: NOT
49447: PUSH
49448: LD_VAR 0 1
49452: PUSH
49453: LD_INT 0
49455: PUSH
49456: LD_INT 1
49458: PUSH
49459: LD_INT 2
49461: PUSH
49462: LD_INT 3
49464: PUSH
49465: LD_INT 6
49467: PUSH
49468: LD_INT 36
49470: PUSH
49471: LD_INT 4
49473: PUSH
49474: LD_INT 5
49476: PUSH
49477: LD_INT 31
49479: PUSH
49480: LD_INT 32
49482: PUSH
49483: LD_INT 33
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: IN
49499: NOT
49500: PUSH
49501: LD_VAR 0 6
49505: PUSH
49506: LD_INT 1
49508: EQUAL
49509: AND
49510: OR
49511: PUSH
49512: LD_VAR 0 1
49516: PUSH
49517: LD_INT 2
49519: PUSH
49520: LD_INT 3
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: IN
49527: NOT
49528: PUSH
49529: LD_VAR 0 6
49533: PUSH
49534: LD_INT 2
49536: EQUAL
49537: AND
49538: OR
49539: IFFALSE 49549
// mode = 0 ;
49541: LD_ADDR_VAR 0 6
49545: PUSH
49546: LD_INT 0
49548: ST_TO_ADDR
// case mode of 0 :
49549: LD_VAR 0 6
49553: PUSH
49554: LD_INT 0
49556: DOUBLE
49557: EQUAL
49558: IFTRUE 49562
49560: GO 61015
49562: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49563: LD_ADDR_VAR 0 11
49567: PUSH
49568: LD_INT 0
49570: PUSH
49571: LD_INT 0
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 0
49580: PUSH
49581: LD_INT 1
49583: NEG
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 1
49591: PUSH
49592: LD_INT 0
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 1
49601: PUSH
49602: LD_INT 1
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 0
49611: PUSH
49612: LD_INT 1
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 1
49621: NEG
49622: PUSH
49623: LD_INT 0
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 1
49632: NEG
49633: PUSH
49634: LD_INT 1
49636: NEG
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 1
49644: NEG
49645: PUSH
49646: LD_INT 2
49648: NEG
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 0
49656: PUSH
49657: LD_INT 2
49659: NEG
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 1
49667: PUSH
49668: LD_INT 1
49670: NEG
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 1
49678: PUSH
49679: LD_INT 2
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 0
49688: PUSH
49689: LD_INT 2
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 1
49698: NEG
49699: PUSH
49700: LD_INT 1
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 1
49709: PUSH
49710: LD_INT 3
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: LD_INT 0
49719: PUSH
49720: LD_INT 3
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: PUSH
49727: LD_INT 1
49729: NEG
49730: PUSH
49731: LD_INT 2
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49756: LD_ADDR_VAR 0 12
49760: PUSH
49761: LD_INT 0
49763: PUSH
49764: LD_INT 0
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 0
49773: PUSH
49774: LD_INT 1
49776: NEG
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 1
49784: PUSH
49785: LD_INT 0
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 1
49794: PUSH
49795: LD_INT 1
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 0
49804: PUSH
49805: LD_INT 1
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 1
49814: NEG
49815: PUSH
49816: LD_INT 0
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 1
49825: NEG
49826: PUSH
49827: LD_INT 1
49829: NEG
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 1
49837: PUSH
49838: LD_INT 1
49840: NEG
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 2
49848: PUSH
49849: LD_INT 0
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 2
49858: PUSH
49859: LD_INT 1
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 1
49868: NEG
49869: PUSH
49870: LD_INT 1
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 2
49879: NEG
49880: PUSH
49881: LD_INT 0
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 2
49890: NEG
49891: PUSH
49892: LD_INT 1
49894: NEG
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 2
49902: NEG
49903: PUSH
49904: LD_INT 1
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 3
49913: NEG
49914: PUSH
49915: LD_INT 0
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 3
49924: NEG
49925: PUSH
49926: LD_INT 1
49928: NEG
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49952: LD_ADDR_VAR 0 13
49956: PUSH
49957: LD_INT 0
49959: PUSH
49960: LD_INT 0
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 0
49969: PUSH
49970: LD_INT 1
49972: NEG
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 1
49980: PUSH
49981: LD_INT 0
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 1
49990: PUSH
49991: LD_INT 1
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 0
50000: PUSH
50001: LD_INT 1
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 1
50010: NEG
50011: PUSH
50012: LD_INT 0
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 1
50021: NEG
50022: PUSH
50023: LD_INT 1
50025: NEG
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 1
50033: NEG
50034: PUSH
50035: LD_INT 2
50037: NEG
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 2
50045: PUSH
50046: LD_INT 1
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 2
50055: PUSH
50056: LD_INT 2
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 1
50065: PUSH
50066: LD_INT 2
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 2
50075: NEG
50076: PUSH
50077: LD_INT 1
50079: NEG
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 2
50087: NEG
50088: PUSH
50089: LD_INT 2
50091: NEG
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 2
50099: NEG
50100: PUSH
50101: LD_INT 3
50103: NEG
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 3
50111: NEG
50112: PUSH
50113: LD_INT 2
50115: NEG
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 3
50123: NEG
50124: PUSH
50125: LD_INT 3
50127: NEG
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50151: LD_ADDR_VAR 0 14
50155: PUSH
50156: LD_INT 0
50158: PUSH
50159: LD_INT 0
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 0
50168: PUSH
50169: LD_INT 1
50171: NEG
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 1
50179: PUSH
50180: LD_INT 0
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 1
50189: PUSH
50190: LD_INT 1
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 0
50199: PUSH
50200: LD_INT 1
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 1
50209: NEG
50210: PUSH
50211: LD_INT 0
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 1
50220: NEG
50221: PUSH
50222: LD_INT 1
50224: NEG
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 1
50232: NEG
50233: PUSH
50234: LD_INT 2
50236: NEG
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 0
50244: PUSH
50245: LD_INT 2
50247: NEG
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 1
50255: PUSH
50256: LD_INT 1
50258: NEG
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 1
50266: PUSH
50267: LD_INT 2
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 0
50276: PUSH
50277: LD_INT 2
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 1
50286: NEG
50287: PUSH
50288: LD_INT 1
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 1
50297: NEG
50298: PUSH
50299: LD_INT 3
50301: NEG
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 0
50309: PUSH
50310: LD_INT 3
50312: NEG
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 1
50320: PUSH
50321: LD_INT 2
50323: NEG
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50347: LD_ADDR_VAR 0 15
50351: PUSH
50352: LD_INT 0
50354: PUSH
50355: LD_INT 0
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 0
50364: PUSH
50365: LD_INT 1
50367: NEG
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 1
50375: PUSH
50376: LD_INT 0
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 1
50385: PUSH
50386: LD_INT 1
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 0
50395: PUSH
50396: LD_INT 1
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 1
50405: NEG
50406: PUSH
50407: LD_INT 0
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 1
50416: NEG
50417: PUSH
50418: LD_INT 1
50420: NEG
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 1
50428: PUSH
50429: LD_INT 1
50431: NEG
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 2
50439: PUSH
50440: LD_INT 0
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 2
50449: PUSH
50450: LD_INT 1
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 1
50459: NEG
50460: PUSH
50461: LD_INT 1
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 2
50470: NEG
50471: PUSH
50472: LD_INT 0
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 2
50481: NEG
50482: PUSH
50483: LD_INT 1
50485: NEG
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 2
50493: PUSH
50494: LD_INT 1
50496: NEG
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 3
50504: PUSH
50505: LD_INT 0
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 3
50514: PUSH
50515: LD_INT 1
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50540: LD_ADDR_VAR 0 16
50544: PUSH
50545: LD_INT 0
50547: PUSH
50548: LD_INT 0
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 0
50557: PUSH
50558: LD_INT 1
50560: NEG
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 1
50568: PUSH
50569: LD_INT 0
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 1
50578: PUSH
50579: LD_INT 1
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 0
50588: PUSH
50589: LD_INT 1
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 1
50598: NEG
50599: PUSH
50600: LD_INT 0
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 1
50609: NEG
50610: PUSH
50611: LD_INT 1
50613: NEG
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 1
50621: NEG
50622: PUSH
50623: LD_INT 2
50625: NEG
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 2
50633: PUSH
50634: LD_INT 1
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 2
50643: PUSH
50644: LD_INT 2
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 1
50653: PUSH
50654: LD_INT 2
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 2
50663: NEG
50664: PUSH
50665: LD_INT 1
50667: NEG
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 2
50675: NEG
50676: PUSH
50677: LD_INT 2
50679: NEG
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 3
50687: PUSH
50688: LD_INT 2
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: LD_INT 3
50697: PUSH
50698: LD_INT 3
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 2
50707: PUSH
50708: LD_INT 3
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50733: LD_ADDR_VAR 0 17
50737: PUSH
50738: LD_INT 0
50740: PUSH
50741: LD_INT 0
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 0
50750: PUSH
50751: LD_INT 1
50753: NEG
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 1
50761: PUSH
50762: LD_INT 0
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 1
50771: PUSH
50772: LD_INT 1
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 0
50781: PUSH
50782: LD_INT 1
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 1
50791: NEG
50792: PUSH
50793: LD_INT 0
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 1
50802: NEG
50803: PUSH
50804: LD_INT 1
50806: NEG
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 1
50814: NEG
50815: PUSH
50816: LD_INT 2
50818: NEG
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 0
50826: PUSH
50827: LD_INT 2
50829: NEG
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 1
50837: PUSH
50838: LD_INT 1
50840: NEG
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 2
50848: PUSH
50849: LD_INT 0
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 2
50858: PUSH
50859: LD_INT 1
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 2
50868: PUSH
50869: LD_INT 2
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 1
50878: PUSH
50879: LD_INT 2
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 0
50888: PUSH
50889: LD_INT 2
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 1
50898: NEG
50899: PUSH
50900: LD_INT 1
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 2
50909: NEG
50910: PUSH
50911: LD_INT 0
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 2
50920: NEG
50921: PUSH
50922: LD_INT 1
50924: NEG
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 2
50932: NEG
50933: PUSH
50934: LD_INT 2
50936: NEG
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50963: LD_ADDR_VAR 0 18
50967: PUSH
50968: LD_INT 0
50970: PUSH
50971: LD_INT 0
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 0
50980: PUSH
50981: LD_INT 1
50983: NEG
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 1
50991: PUSH
50992: LD_INT 0
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 1
51001: PUSH
51002: LD_INT 1
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 0
51011: PUSH
51012: LD_INT 1
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 1
51021: NEG
51022: PUSH
51023: LD_INT 0
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 1
51032: NEG
51033: PUSH
51034: LD_INT 1
51036: NEG
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 1
51044: NEG
51045: PUSH
51046: LD_INT 2
51048: NEG
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 0
51056: PUSH
51057: LD_INT 2
51059: NEG
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 1
51067: PUSH
51068: LD_INT 1
51070: NEG
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 2
51078: PUSH
51079: LD_INT 0
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 2
51088: PUSH
51089: LD_INT 1
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 2
51098: PUSH
51099: LD_INT 2
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 1
51108: PUSH
51109: LD_INT 2
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 0
51118: PUSH
51119: LD_INT 2
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 1
51128: NEG
51129: PUSH
51130: LD_INT 1
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 2
51139: NEG
51140: PUSH
51141: LD_INT 0
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 2
51150: NEG
51151: PUSH
51152: LD_INT 1
51154: NEG
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 2
51162: NEG
51163: PUSH
51164: LD_INT 2
51166: NEG
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51193: LD_ADDR_VAR 0 19
51197: PUSH
51198: LD_INT 0
51200: PUSH
51201: LD_INT 0
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 0
51210: PUSH
51211: LD_INT 1
51213: NEG
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 1
51221: PUSH
51222: LD_INT 0
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 1
51231: PUSH
51232: LD_INT 1
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 0
51241: PUSH
51242: LD_INT 1
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 1
51251: NEG
51252: PUSH
51253: LD_INT 0
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 1
51262: NEG
51263: PUSH
51264: LD_INT 1
51266: NEG
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 1
51274: NEG
51275: PUSH
51276: LD_INT 2
51278: NEG
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 0
51286: PUSH
51287: LD_INT 2
51289: NEG
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 1
51297: PUSH
51298: LD_INT 1
51300: NEG
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 2
51308: PUSH
51309: LD_INT 0
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 2
51318: PUSH
51319: LD_INT 1
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 2
51328: PUSH
51329: LD_INT 2
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 1
51338: PUSH
51339: LD_INT 2
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 0
51348: PUSH
51349: LD_INT 2
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 1
51358: NEG
51359: PUSH
51360: LD_INT 1
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 2
51369: NEG
51370: PUSH
51371: LD_INT 0
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 2
51380: NEG
51381: PUSH
51382: LD_INT 1
51384: NEG
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 2
51392: NEG
51393: PUSH
51394: LD_INT 2
51396: NEG
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51423: LD_ADDR_VAR 0 20
51427: PUSH
51428: LD_INT 0
51430: PUSH
51431: LD_INT 0
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 0
51440: PUSH
51441: LD_INT 1
51443: NEG
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 1
51451: PUSH
51452: LD_INT 0
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 1
51461: PUSH
51462: LD_INT 1
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 0
51471: PUSH
51472: LD_INT 1
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 1
51481: NEG
51482: PUSH
51483: LD_INT 0
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 1
51492: NEG
51493: PUSH
51494: LD_INT 1
51496: NEG
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 1
51504: NEG
51505: PUSH
51506: LD_INT 2
51508: NEG
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 0
51516: PUSH
51517: LD_INT 2
51519: NEG
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 1
51527: PUSH
51528: LD_INT 1
51530: NEG
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 2
51538: PUSH
51539: LD_INT 0
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 2
51548: PUSH
51549: LD_INT 1
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 2
51558: PUSH
51559: LD_INT 2
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 1
51568: PUSH
51569: LD_INT 2
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 0
51578: PUSH
51579: LD_INT 2
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 1
51588: NEG
51589: PUSH
51590: LD_INT 1
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 2
51599: NEG
51600: PUSH
51601: LD_INT 0
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 2
51610: NEG
51611: PUSH
51612: LD_INT 1
51614: NEG
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 2
51622: NEG
51623: PUSH
51624: LD_INT 2
51626: NEG
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51653: LD_ADDR_VAR 0 21
51657: PUSH
51658: LD_INT 0
51660: PUSH
51661: LD_INT 0
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 0
51670: PUSH
51671: LD_INT 1
51673: NEG
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 1
51681: PUSH
51682: LD_INT 0
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 1
51691: PUSH
51692: LD_INT 1
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 0
51701: PUSH
51702: LD_INT 1
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 1
51711: NEG
51712: PUSH
51713: LD_INT 0
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 1
51722: NEG
51723: PUSH
51724: LD_INT 1
51726: NEG
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 1
51734: NEG
51735: PUSH
51736: LD_INT 2
51738: NEG
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 0
51746: PUSH
51747: LD_INT 2
51749: NEG
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 1
51757: PUSH
51758: LD_INT 1
51760: NEG
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 2
51768: PUSH
51769: LD_INT 0
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 2
51778: PUSH
51779: LD_INT 1
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 2
51788: PUSH
51789: LD_INT 2
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 1
51798: PUSH
51799: LD_INT 2
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 0
51808: PUSH
51809: LD_INT 2
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 1
51818: NEG
51819: PUSH
51820: LD_INT 1
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 2
51829: NEG
51830: PUSH
51831: LD_INT 0
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 2
51840: NEG
51841: PUSH
51842: LD_INT 1
51844: NEG
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 2
51852: NEG
51853: PUSH
51854: LD_INT 2
51856: NEG
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51883: LD_ADDR_VAR 0 22
51887: PUSH
51888: LD_INT 0
51890: PUSH
51891: LD_INT 0
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 0
51900: PUSH
51901: LD_INT 1
51903: NEG
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 1
51911: PUSH
51912: LD_INT 0
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 1
51921: PUSH
51922: LD_INT 1
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 0
51931: PUSH
51932: LD_INT 1
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 1
51941: NEG
51942: PUSH
51943: LD_INT 0
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 1
51952: NEG
51953: PUSH
51954: LD_INT 1
51956: NEG
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 1
51964: NEG
51965: PUSH
51966: LD_INT 2
51968: NEG
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 0
51976: PUSH
51977: LD_INT 2
51979: NEG
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: LD_INT 1
51987: PUSH
51988: LD_INT 1
51990: NEG
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 2
51998: PUSH
51999: LD_INT 0
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 2
52008: PUSH
52009: LD_INT 1
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 2
52018: PUSH
52019: LD_INT 2
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 1
52028: PUSH
52029: LD_INT 2
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 0
52038: PUSH
52039: LD_INT 2
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 1
52048: NEG
52049: PUSH
52050: LD_INT 1
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 2
52059: NEG
52060: PUSH
52061: LD_INT 0
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: LD_INT 2
52070: NEG
52071: PUSH
52072: LD_INT 1
52074: NEG
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 2
52082: NEG
52083: PUSH
52084: LD_INT 2
52086: NEG
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52113: LD_ADDR_VAR 0 23
52117: PUSH
52118: LD_INT 0
52120: PUSH
52121: LD_INT 0
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 0
52130: PUSH
52131: LD_INT 1
52133: NEG
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 1
52141: PUSH
52142: LD_INT 0
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 1
52151: PUSH
52152: LD_INT 1
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 0
52161: PUSH
52162: LD_INT 1
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 1
52171: NEG
52172: PUSH
52173: LD_INT 0
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 1
52182: NEG
52183: PUSH
52184: LD_INT 1
52186: NEG
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 1
52194: NEG
52195: PUSH
52196: LD_INT 2
52198: NEG
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 0
52206: PUSH
52207: LD_INT 2
52209: NEG
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 1
52217: PUSH
52218: LD_INT 1
52220: NEG
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 2
52228: PUSH
52229: LD_INT 0
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 2
52238: PUSH
52239: LD_INT 1
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 2
52248: PUSH
52249: LD_INT 2
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 1
52258: PUSH
52259: LD_INT 2
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 0
52268: PUSH
52269: LD_INT 2
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 1
52278: NEG
52279: PUSH
52280: LD_INT 1
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: LD_INT 2
52289: NEG
52290: PUSH
52291: LD_INT 0
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 2
52300: NEG
52301: PUSH
52302: LD_INT 1
52304: NEG
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 2
52312: NEG
52313: PUSH
52314: LD_INT 2
52316: NEG
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 2
52324: NEG
52325: PUSH
52326: LD_INT 3
52328: NEG
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 1
52336: NEG
52337: PUSH
52338: LD_INT 3
52340: NEG
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 1
52348: PUSH
52349: LD_INT 2
52351: NEG
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 2
52359: PUSH
52360: LD_INT 1
52362: NEG
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: LIST
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
52393: LD_ADDR_VAR 0 24
52397: PUSH
52398: LD_INT 0
52400: PUSH
52401: LD_INT 0
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 0
52410: PUSH
52411: LD_INT 1
52413: NEG
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 1
52421: PUSH
52422: LD_INT 0
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 1
52431: PUSH
52432: LD_INT 1
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 0
52441: PUSH
52442: LD_INT 1
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 1
52451: NEG
52452: PUSH
52453: LD_INT 0
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 1
52462: NEG
52463: PUSH
52464: LD_INT 1
52466: NEG
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 1
52474: NEG
52475: PUSH
52476: LD_INT 2
52478: NEG
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 0
52486: PUSH
52487: LD_INT 2
52489: NEG
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 1
52497: PUSH
52498: LD_INT 1
52500: NEG
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 2
52508: PUSH
52509: LD_INT 0
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 2
52518: PUSH
52519: LD_INT 1
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 2
52528: PUSH
52529: LD_INT 2
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 1
52538: PUSH
52539: LD_INT 2
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 0
52548: PUSH
52549: LD_INT 2
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 1
52558: NEG
52559: PUSH
52560: LD_INT 1
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 2
52569: NEG
52570: PUSH
52571: LD_INT 0
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 2
52580: NEG
52581: PUSH
52582: LD_INT 1
52584: NEG
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 2
52592: NEG
52593: PUSH
52594: LD_INT 2
52596: NEG
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 1
52604: PUSH
52605: LD_INT 2
52607: NEG
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 2
52615: PUSH
52616: LD_INT 1
52618: NEG
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 3
52626: PUSH
52627: LD_INT 1
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 3
52636: PUSH
52637: LD_INT 2
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
52669: LD_ADDR_VAR 0 25
52673: PUSH
52674: LD_INT 0
52676: PUSH
52677: LD_INT 0
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 0
52686: PUSH
52687: LD_INT 1
52689: NEG
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: LD_INT 1
52697: PUSH
52698: LD_INT 0
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 1
52707: PUSH
52708: LD_INT 1
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 0
52717: PUSH
52718: LD_INT 1
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 1
52727: NEG
52728: PUSH
52729: LD_INT 0
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: LD_INT 1
52738: NEG
52739: PUSH
52740: LD_INT 1
52742: NEG
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 1
52750: NEG
52751: PUSH
52752: LD_INT 2
52754: NEG
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 0
52762: PUSH
52763: LD_INT 2
52765: NEG
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 1
52773: PUSH
52774: LD_INT 1
52776: NEG
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 2
52784: PUSH
52785: LD_INT 0
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 2
52794: PUSH
52795: LD_INT 1
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 2
52804: PUSH
52805: LD_INT 2
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 1
52814: PUSH
52815: LD_INT 2
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 0
52824: PUSH
52825: LD_INT 2
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 1
52834: NEG
52835: PUSH
52836: LD_INT 1
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 2
52845: NEG
52846: PUSH
52847: LD_INT 0
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 2
52856: NEG
52857: PUSH
52858: LD_INT 1
52860: NEG
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 2
52868: NEG
52869: PUSH
52870: LD_INT 2
52872: NEG
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 3
52880: PUSH
52881: LD_INT 1
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 3
52890: PUSH
52891: LD_INT 2
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 2
52900: PUSH
52901: LD_INT 3
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 1
52910: PUSH
52911: LD_INT 3
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52943: LD_ADDR_VAR 0 26
52947: PUSH
52948: LD_INT 0
52950: PUSH
52951: LD_INT 0
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 0
52960: PUSH
52961: LD_INT 1
52963: NEG
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 1
52971: PUSH
52972: LD_INT 0
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 1
52981: PUSH
52982: LD_INT 1
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 0
52991: PUSH
52992: LD_INT 1
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 1
53001: NEG
53002: PUSH
53003: LD_INT 0
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 1
53012: NEG
53013: PUSH
53014: LD_INT 1
53016: NEG
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 1
53024: NEG
53025: PUSH
53026: LD_INT 2
53028: NEG
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 0
53036: PUSH
53037: LD_INT 2
53039: NEG
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 1
53047: PUSH
53048: LD_INT 1
53050: NEG
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 2
53058: PUSH
53059: LD_INT 0
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 2
53068: PUSH
53069: LD_INT 1
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 2
53078: PUSH
53079: LD_INT 2
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 1
53088: PUSH
53089: LD_INT 2
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 0
53098: PUSH
53099: LD_INT 2
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 1
53108: NEG
53109: PUSH
53110: LD_INT 1
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 2
53119: NEG
53120: PUSH
53121: LD_INT 0
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 2
53130: NEG
53131: PUSH
53132: LD_INT 1
53134: NEG
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 2
53142: NEG
53143: PUSH
53144: LD_INT 2
53146: NEG
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 2
53154: PUSH
53155: LD_INT 3
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 1
53164: PUSH
53165: LD_INT 3
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 1
53174: NEG
53175: PUSH
53176: LD_INT 2
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 2
53185: NEG
53186: PUSH
53187: LD_INT 1
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53219: LD_ADDR_VAR 0 27
53223: PUSH
53224: LD_INT 0
53226: PUSH
53227: LD_INT 0
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 0
53236: PUSH
53237: LD_INT 1
53239: NEG
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 1
53247: PUSH
53248: LD_INT 0
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 1
53257: PUSH
53258: LD_INT 1
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 0
53267: PUSH
53268: LD_INT 1
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 1
53277: NEG
53278: PUSH
53279: LD_INT 0
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 1
53288: NEG
53289: PUSH
53290: LD_INT 1
53292: NEG
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 1
53300: NEG
53301: PUSH
53302: LD_INT 2
53304: NEG
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 0
53312: PUSH
53313: LD_INT 2
53315: NEG
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 1
53323: PUSH
53324: LD_INT 1
53326: NEG
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 2
53334: PUSH
53335: LD_INT 0
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 2
53344: PUSH
53345: LD_INT 1
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 2
53354: PUSH
53355: LD_INT 2
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 1
53364: PUSH
53365: LD_INT 2
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 0
53374: PUSH
53375: LD_INT 2
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 1
53384: NEG
53385: PUSH
53386: LD_INT 1
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 2
53395: NEG
53396: PUSH
53397: LD_INT 0
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 2
53406: NEG
53407: PUSH
53408: LD_INT 1
53410: NEG
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 2
53418: NEG
53419: PUSH
53420: LD_INT 2
53422: NEG
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 1
53430: NEG
53431: PUSH
53432: LD_INT 2
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 2
53441: NEG
53442: PUSH
53443: LD_INT 1
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 3
53452: NEG
53453: PUSH
53454: LD_INT 1
53456: NEG
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 3
53464: NEG
53465: PUSH
53466: LD_INT 2
53468: NEG
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53499: LD_ADDR_VAR 0 28
53503: PUSH
53504: LD_INT 0
53506: PUSH
53507: LD_INT 0
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 0
53516: PUSH
53517: LD_INT 1
53519: NEG
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 1
53527: PUSH
53528: LD_INT 0
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 1
53537: PUSH
53538: LD_INT 1
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 0
53547: PUSH
53548: LD_INT 1
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 1
53557: NEG
53558: PUSH
53559: LD_INT 0
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 1
53568: NEG
53569: PUSH
53570: LD_INT 1
53572: NEG
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 1
53580: NEG
53581: PUSH
53582: LD_INT 2
53584: NEG
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 0
53592: PUSH
53593: LD_INT 2
53595: NEG
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 1
53603: PUSH
53604: LD_INT 1
53606: NEG
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 2
53614: PUSH
53615: LD_INT 0
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 2
53624: PUSH
53625: LD_INT 1
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 2
53634: PUSH
53635: LD_INT 2
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 1
53644: PUSH
53645: LD_INT 2
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 0
53654: PUSH
53655: LD_INT 2
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 1
53664: NEG
53665: PUSH
53666: LD_INT 1
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 2
53675: NEG
53676: PUSH
53677: LD_INT 0
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 2
53686: NEG
53687: PUSH
53688: LD_INT 1
53690: NEG
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 2
53698: NEG
53699: PUSH
53700: LD_INT 2
53702: NEG
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 2
53710: NEG
53711: PUSH
53712: LD_INT 3
53714: NEG
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 1
53722: NEG
53723: PUSH
53724: LD_INT 3
53726: NEG
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 3
53734: NEG
53735: PUSH
53736: LD_INT 1
53738: NEG
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 3
53746: NEG
53747: PUSH
53748: LD_INT 2
53750: NEG
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53781: LD_ADDR_VAR 0 29
53785: PUSH
53786: LD_INT 0
53788: PUSH
53789: LD_INT 0
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 0
53798: PUSH
53799: LD_INT 1
53801: NEG
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 1
53809: PUSH
53810: LD_INT 0
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 1
53819: PUSH
53820: LD_INT 1
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 0
53829: PUSH
53830: LD_INT 1
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 1
53839: NEG
53840: PUSH
53841: LD_INT 0
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 1
53850: NEG
53851: PUSH
53852: LD_INT 1
53854: NEG
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 1
53862: NEG
53863: PUSH
53864: LD_INT 2
53866: NEG
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 0
53874: PUSH
53875: LD_INT 2
53877: NEG
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 1
53885: PUSH
53886: LD_INT 1
53888: NEG
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 2
53896: PUSH
53897: LD_INT 0
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 2
53906: PUSH
53907: LD_INT 1
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 1
53916: PUSH
53917: LD_INT 2
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 0
53926: PUSH
53927: LD_INT 2
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 1
53936: NEG
53937: PUSH
53938: LD_INT 1
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 2
53947: NEG
53948: PUSH
53949: LD_INT 1
53951: NEG
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 2
53959: NEG
53960: PUSH
53961: LD_INT 2
53963: NEG
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 2
53971: NEG
53972: PUSH
53973: LD_INT 3
53975: NEG
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 2
53983: PUSH
53984: LD_INT 1
53986: NEG
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 3
53994: PUSH
53995: LD_INT 1
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 1
54004: PUSH
54005: LD_INT 3
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 1
54014: NEG
54015: PUSH
54016: LD_INT 2
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 3
54025: NEG
54026: PUSH
54027: LD_INT 2
54029: NEG
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54060: LD_ADDR_VAR 0 30
54064: PUSH
54065: LD_INT 0
54067: PUSH
54068: LD_INT 0
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 0
54077: PUSH
54078: LD_INT 1
54080: NEG
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 1
54088: PUSH
54089: LD_INT 0
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 1
54098: PUSH
54099: LD_INT 1
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 0
54108: PUSH
54109: LD_INT 1
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 1
54118: NEG
54119: PUSH
54120: LD_INT 0
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 1
54129: NEG
54130: PUSH
54131: LD_INT 1
54133: NEG
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 1
54141: NEG
54142: PUSH
54143: LD_INT 2
54145: NEG
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 0
54153: PUSH
54154: LD_INT 2
54156: NEG
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 1
54164: PUSH
54165: LD_INT 1
54167: NEG
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 2
54175: PUSH
54176: LD_INT 0
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 2
54185: PUSH
54186: LD_INT 1
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 2
54195: PUSH
54196: LD_INT 2
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 1
54205: PUSH
54206: LD_INT 2
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 1
54215: NEG
54216: PUSH
54217: LD_INT 1
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 2
54226: NEG
54227: PUSH
54228: LD_INT 0
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 2
54237: NEG
54238: PUSH
54239: LD_INT 1
54241: NEG
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 1
54249: NEG
54250: PUSH
54251: LD_INT 3
54253: NEG
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 1
54261: PUSH
54262: LD_INT 2
54264: NEG
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 3
54272: PUSH
54273: LD_INT 2
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 2
54282: PUSH
54283: LD_INT 3
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 2
54292: NEG
54293: PUSH
54294: LD_INT 1
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 3
54303: NEG
54304: PUSH
54305: LD_INT 1
54307: NEG
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54338: LD_ADDR_VAR 0 31
54342: PUSH
54343: LD_INT 0
54345: PUSH
54346: LD_INT 0
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 0
54355: PUSH
54356: LD_INT 1
54358: NEG
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 1
54366: PUSH
54367: LD_INT 0
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 1
54376: PUSH
54377: LD_INT 1
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 0
54386: PUSH
54387: LD_INT 1
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 1
54396: NEG
54397: PUSH
54398: LD_INT 0
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 1
54407: NEG
54408: PUSH
54409: LD_INT 1
54411: NEG
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 1
54419: NEG
54420: PUSH
54421: LD_INT 2
54423: NEG
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 1
54431: PUSH
54432: LD_INT 1
54434: NEG
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 2
54442: PUSH
54443: LD_INT 0
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 2
54452: PUSH
54453: LD_INT 1
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 2
54462: PUSH
54463: LD_INT 2
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 1
54472: PUSH
54473: LD_INT 2
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 0
54482: PUSH
54483: LD_INT 2
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 1
54492: NEG
54493: PUSH
54494: LD_INT 1
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 2
54503: NEG
54504: PUSH
54505: LD_INT 1
54507: NEG
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 2
54515: NEG
54516: PUSH
54517: LD_INT 2
54519: NEG
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 2
54527: NEG
54528: PUSH
54529: LD_INT 3
54531: NEG
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 2
54539: PUSH
54540: LD_INT 1
54542: NEG
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 3
54550: PUSH
54551: LD_INT 1
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 1
54560: PUSH
54561: LD_INT 3
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 1
54570: NEG
54571: PUSH
54572: LD_INT 2
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 3
54581: NEG
54582: PUSH
54583: LD_INT 2
54585: NEG
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54616: LD_ADDR_VAR 0 32
54620: PUSH
54621: LD_INT 0
54623: PUSH
54624: LD_INT 0
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 0
54633: PUSH
54634: LD_INT 1
54636: NEG
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 1
54644: PUSH
54645: LD_INT 0
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 1
54654: PUSH
54655: LD_INT 1
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 0
54664: PUSH
54665: LD_INT 1
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 1
54674: NEG
54675: PUSH
54676: LD_INT 0
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 1
54685: NEG
54686: PUSH
54687: LD_INT 1
54689: NEG
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 1
54697: NEG
54698: PUSH
54699: LD_INT 2
54701: NEG
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 0
54709: PUSH
54710: LD_INT 2
54712: NEG
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 1
54720: PUSH
54721: LD_INT 1
54723: NEG
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 2
54731: PUSH
54732: LD_INT 1
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 2
54741: PUSH
54742: LD_INT 2
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 1
54751: PUSH
54752: LD_INT 2
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 0
54761: PUSH
54762: LD_INT 2
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 1
54771: NEG
54772: PUSH
54773: LD_INT 1
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 2
54782: NEG
54783: PUSH
54784: LD_INT 0
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 2
54793: NEG
54794: PUSH
54795: LD_INT 1
54797: NEG
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 1
54805: NEG
54806: PUSH
54807: LD_INT 3
54809: NEG
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 1
54817: PUSH
54818: LD_INT 2
54820: NEG
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 3
54828: PUSH
54829: LD_INT 2
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 2
54838: PUSH
54839: LD_INT 3
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 2
54848: NEG
54849: PUSH
54850: LD_INT 1
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 3
54859: NEG
54860: PUSH
54861: LD_INT 1
54863: NEG
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54894: LD_ADDR_VAR 0 33
54898: PUSH
54899: LD_INT 0
54901: PUSH
54902: LD_INT 0
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 0
54911: PUSH
54912: LD_INT 1
54914: NEG
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 1
54922: PUSH
54923: LD_INT 0
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 1
54932: PUSH
54933: LD_INT 1
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 0
54942: PUSH
54943: LD_INT 1
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 1
54952: NEG
54953: PUSH
54954: LD_INT 0
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 1
54963: NEG
54964: PUSH
54965: LD_INT 1
54967: NEG
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 1
54975: NEG
54976: PUSH
54977: LD_INT 2
54979: NEG
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 1
54987: PUSH
54988: LD_INT 1
54990: NEG
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 2
54998: PUSH
54999: LD_INT 0
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 2
55008: PUSH
55009: LD_INT 1
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 1
55018: PUSH
55019: LD_INT 2
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 0
55028: PUSH
55029: LD_INT 2
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 1
55038: NEG
55039: PUSH
55040: LD_INT 1
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 2
55049: NEG
55050: PUSH
55051: LD_INT 0
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 2
55060: NEG
55061: PUSH
55062: LD_INT 1
55064: NEG
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 2
55072: NEG
55073: PUSH
55074: LD_INT 2
55076: NEG
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 2
55084: NEG
55085: PUSH
55086: LD_INT 3
55088: NEG
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 2
55096: PUSH
55097: LD_INT 1
55099: NEG
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 3
55107: PUSH
55108: LD_INT 1
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 1
55117: PUSH
55118: LD_INT 3
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 1
55127: NEG
55128: PUSH
55129: LD_INT 2
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 3
55138: NEG
55139: PUSH
55140: LD_INT 2
55142: NEG
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55173: LD_ADDR_VAR 0 34
55177: PUSH
55178: LD_INT 0
55180: PUSH
55181: LD_INT 0
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 0
55190: PUSH
55191: LD_INT 1
55193: NEG
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 1
55201: PUSH
55202: LD_INT 0
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 1
55211: PUSH
55212: LD_INT 1
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 0
55221: PUSH
55222: LD_INT 1
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 1
55231: NEG
55232: PUSH
55233: LD_INT 0
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 1
55242: NEG
55243: PUSH
55244: LD_INT 1
55246: NEG
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 1
55254: NEG
55255: PUSH
55256: LD_INT 2
55258: NEG
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 0
55266: PUSH
55267: LD_INT 2
55269: NEG
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 1
55277: PUSH
55278: LD_INT 1
55280: NEG
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 2
55288: PUSH
55289: LD_INT 1
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 2
55298: PUSH
55299: LD_INT 2
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 1
55308: PUSH
55309: LD_INT 2
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 1
55318: NEG
55319: PUSH
55320: LD_INT 1
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 2
55329: NEG
55330: PUSH
55331: LD_INT 0
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 2
55340: NEG
55341: PUSH
55342: LD_INT 1
55344: NEG
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 2
55352: NEG
55353: PUSH
55354: LD_INT 2
55356: NEG
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 1
55364: NEG
55365: PUSH
55366: LD_INT 3
55368: NEG
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 1
55376: PUSH
55377: LD_INT 2
55379: NEG
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: LD_INT 3
55387: PUSH
55388: LD_INT 2
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 2
55397: PUSH
55398: LD_INT 3
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 2
55407: NEG
55408: PUSH
55409: LD_INT 1
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: LD_INT 3
55418: NEG
55419: PUSH
55420: LD_INT 1
55422: NEG
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55453: LD_ADDR_VAR 0 35
55457: PUSH
55458: LD_INT 0
55460: PUSH
55461: LD_INT 0
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 0
55470: PUSH
55471: LD_INT 1
55473: NEG
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 1
55481: PUSH
55482: LD_INT 0
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 1
55491: PUSH
55492: LD_INT 1
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 0
55501: PUSH
55502: LD_INT 1
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 1
55511: NEG
55512: PUSH
55513: LD_INT 0
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 1
55522: NEG
55523: PUSH
55524: LD_INT 1
55526: NEG
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 2
55534: PUSH
55535: LD_INT 1
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 2
55544: NEG
55545: PUSH
55546: LD_INT 1
55548: NEG
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55565: LD_ADDR_VAR 0 36
55569: PUSH
55570: LD_INT 0
55572: PUSH
55573: LD_INT 0
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 0
55582: PUSH
55583: LD_INT 1
55585: NEG
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 1
55593: PUSH
55594: LD_INT 0
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 1
55603: PUSH
55604: LD_INT 1
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: LD_INT 0
55613: PUSH
55614: LD_INT 1
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 1
55623: NEG
55624: PUSH
55625: LD_INT 0
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 1
55634: NEG
55635: PUSH
55636: LD_INT 1
55638: NEG
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 1
55646: NEG
55647: PUSH
55648: LD_INT 2
55650: NEG
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 1
55658: PUSH
55659: LD_INT 2
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55677: LD_ADDR_VAR 0 37
55681: PUSH
55682: LD_INT 0
55684: PUSH
55685: LD_INT 0
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 0
55694: PUSH
55695: LD_INT 1
55697: NEG
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 1
55705: PUSH
55706: LD_INT 0
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 1
55715: PUSH
55716: LD_INT 1
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 0
55725: PUSH
55726: LD_INT 1
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 1
55735: NEG
55736: PUSH
55737: LD_INT 0
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 1
55746: NEG
55747: PUSH
55748: LD_INT 1
55750: NEG
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 1
55758: PUSH
55759: LD_INT 1
55761: NEG
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 1
55769: NEG
55770: PUSH
55771: LD_INT 1
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55789: LD_ADDR_VAR 0 38
55793: PUSH
55794: LD_INT 0
55796: PUSH
55797: LD_INT 0
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 0
55806: PUSH
55807: LD_INT 1
55809: NEG
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 1
55817: PUSH
55818: LD_INT 0
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 1
55827: PUSH
55828: LD_INT 1
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: LD_INT 0
55837: PUSH
55838: LD_INT 1
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 1
55847: NEG
55848: PUSH
55849: LD_INT 0
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 1
55858: NEG
55859: PUSH
55860: LD_INT 1
55862: NEG
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 2
55870: PUSH
55871: LD_INT 1
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 2
55880: NEG
55881: PUSH
55882: LD_INT 1
55884: NEG
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55901: LD_ADDR_VAR 0 39
55905: PUSH
55906: LD_INT 0
55908: PUSH
55909: LD_INT 0
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 0
55918: PUSH
55919: LD_INT 1
55921: NEG
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 1
55929: PUSH
55930: LD_INT 0
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 1
55939: PUSH
55940: LD_INT 1
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 0
55949: PUSH
55950: LD_INT 1
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 1
55959: NEG
55960: PUSH
55961: LD_INT 0
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 1
55970: NEG
55971: PUSH
55972: LD_INT 1
55974: NEG
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 1
55982: NEG
55983: PUSH
55984: LD_INT 2
55986: NEG
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 1
55994: PUSH
55995: LD_INT 2
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56013: LD_ADDR_VAR 0 40
56017: PUSH
56018: LD_INT 0
56020: PUSH
56021: LD_INT 0
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 0
56030: PUSH
56031: LD_INT 1
56033: NEG
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 1
56041: PUSH
56042: LD_INT 0
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 1
56051: PUSH
56052: LD_INT 1
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 0
56061: PUSH
56062: LD_INT 1
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 1
56071: NEG
56072: PUSH
56073: LD_INT 0
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 1
56082: NEG
56083: PUSH
56084: LD_INT 1
56086: NEG
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 1
56094: PUSH
56095: LD_INT 1
56097: NEG
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 1
56105: NEG
56106: PUSH
56107: LD_INT 1
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56125: LD_ADDR_VAR 0 41
56129: PUSH
56130: LD_INT 0
56132: PUSH
56133: LD_INT 0
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 0
56142: PUSH
56143: LD_INT 1
56145: NEG
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 1
56153: PUSH
56154: LD_INT 0
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 1
56163: PUSH
56164: LD_INT 1
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 0
56173: PUSH
56174: LD_INT 1
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 1
56183: NEG
56184: PUSH
56185: LD_INT 0
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 1
56194: NEG
56195: PUSH
56196: LD_INT 1
56198: NEG
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 1
56206: NEG
56207: PUSH
56208: LD_INT 2
56210: NEG
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 1
56218: PUSH
56219: LD_INT 1
56221: NEG
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 2
56229: PUSH
56230: LD_INT 0
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 2
56239: PUSH
56240: LD_INT 1
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 2
56249: PUSH
56250: LD_INT 2
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 1
56259: PUSH
56260: LD_INT 2
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 1
56269: NEG
56270: PUSH
56271: LD_INT 1
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 2
56280: NEG
56281: PUSH
56282: LD_INT 0
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 2
56291: NEG
56292: PUSH
56293: LD_INT 1
56295: NEG
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 2
56303: NEG
56304: PUSH
56305: LD_INT 2
56307: NEG
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 2
56315: NEG
56316: PUSH
56317: LD_INT 3
56319: NEG
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 2
56327: PUSH
56328: LD_INT 1
56330: NEG
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 3
56338: PUSH
56339: LD_INT 0
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 3
56348: PUSH
56349: LD_INT 1
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 3
56358: PUSH
56359: LD_INT 2
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 3
56368: PUSH
56369: LD_INT 3
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 2
56378: PUSH
56379: LD_INT 3
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 2
56388: NEG
56389: PUSH
56390: LD_INT 1
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 3
56399: NEG
56400: PUSH
56401: LD_INT 0
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 3
56410: NEG
56411: PUSH
56412: LD_INT 1
56414: NEG
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 3
56422: NEG
56423: PUSH
56424: LD_INT 2
56426: NEG
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 3
56434: NEG
56435: PUSH
56436: LD_INT 3
56438: NEG
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56475: LD_ADDR_VAR 0 42
56479: PUSH
56480: LD_INT 0
56482: PUSH
56483: LD_INT 0
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 0
56492: PUSH
56493: LD_INT 1
56495: NEG
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 1
56503: PUSH
56504: LD_INT 0
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 1
56513: PUSH
56514: LD_INT 1
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 0
56523: PUSH
56524: LD_INT 1
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 1
56533: NEG
56534: PUSH
56535: LD_INT 0
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 1
56544: NEG
56545: PUSH
56546: LD_INT 1
56548: NEG
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 1
56556: NEG
56557: PUSH
56558: LD_INT 2
56560: NEG
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 0
56568: PUSH
56569: LD_INT 2
56571: NEG
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 1
56579: PUSH
56580: LD_INT 1
56582: NEG
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 2
56590: PUSH
56591: LD_INT 1
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 2
56600: PUSH
56601: LD_INT 2
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 1
56610: PUSH
56611: LD_INT 2
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 0
56620: PUSH
56621: LD_INT 2
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 1
56630: NEG
56631: PUSH
56632: LD_INT 1
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 2
56641: NEG
56642: PUSH
56643: LD_INT 1
56645: NEG
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 2
56653: NEG
56654: PUSH
56655: LD_INT 2
56657: NEG
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 2
56665: NEG
56666: PUSH
56667: LD_INT 3
56669: NEG
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 1
56677: NEG
56678: PUSH
56679: LD_INT 3
56681: NEG
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 0
56689: PUSH
56690: LD_INT 3
56692: NEG
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 1
56700: PUSH
56701: LD_INT 2
56703: NEG
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 3
56711: PUSH
56712: LD_INT 2
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 3
56721: PUSH
56722: LD_INT 3
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 2
56731: PUSH
56732: LD_INT 3
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 1
56741: PUSH
56742: LD_INT 3
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 0
56751: PUSH
56752: LD_INT 3
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 1
56761: NEG
56762: PUSH
56763: LD_INT 2
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 3
56772: NEG
56773: PUSH
56774: LD_INT 2
56776: NEG
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 3
56784: NEG
56785: PUSH
56786: LD_INT 3
56788: NEG
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56825: LD_ADDR_VAR 0 43
56829: PUSH
56830: LD_INT 0
56832: PUSH
56833: LD_INT 0
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 0
56842: PUSH
56843: LD_INT 1
56845: NEG
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 1
56853: PUSH
56854: LD_INT 0
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 1
56863: PUSH
56864: LD_INT 1
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 0
56873: PUSH
56874: LD_INT 1
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 1
56883: NEG
56884: PUSH
56885: LD_INT 0
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 1
56894: NEG
56895: PUSH
56896: LD_INT 1
56898: NEG
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 1
56906: NEG
56907: PUSH
56908: LD_INT 2
56910: NEG
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 0
56918: PUSH
56919: LD_INT 2
56921: NEG
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 1
56929: PUSH
56930: LD_INT 1
56932: NEG
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 2
56940: PUSH
56941: LD_INT 0
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 2
56950: PUSH
56951: LD_INT 1
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 1
56960: PUSH
56961: LD_INT 2
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 0
56970: PUSH
56971: LD_INT 2
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 1
56980: NEG
56981: PUSH
56982: LD_INT 1
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 2
56991: NEG
56992: PUSH
56993: LD_INT 0
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 2
57002: NEG
57003: PUSH
57004: LD_INT 1
57006: NEG
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 1
57014: NEG
57015: PUSH
57016: LD_INT 3
57018: NEG
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 0
57026: PUSH
57027: LD_INT 3
57029: NEG
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 1
57037: PUSH
57038: LD_INT 2
57040: NEG
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 2
57048: PUSH
57049: LD_INT 1
57051: NEG
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 3
57059: PUSH
57060: LD_INT 0
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 3
57069: PUSH
57070: LD_INT 1
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 1
57079: PUSH
57080: LD_INT 3
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 0
57089: PUSH
57090: LD_INT 3
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 1
57099: NEG
57100: PUSH
57101: LD_INT 2
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 2
57110: NEG
57111: PUSH
57112: LD_INT 1
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 3
57121: NEG
57122: PUSH
57123: LD_INT 0
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 3
57132: NEG
57133: PUSH
57134: LD_INT 1
57136: NEG
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: LIST
57170: LIST
57171: LIST
57172: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57173: LD_ADDR_VAR 0 44
57177: PUSH
57178: LD_INT 0
57180: PUSH
57181: LD_INT 0
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 0
57190: PUSH
57191: LD_INT 1
57193: NEG
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 1
57201: PUSH
57202: LD_INT 0
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 1
57211: PUSH
57212: LD_INT 1
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 0
57221: PUSH
57222: LD_INT 1
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 1
57231: NEG
57232: PUSH
57233: LD_INT 0
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 1
57242: NEG
57243: PUSH
57244: LD_INT 1
57246: NEG
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: LD_INT 1
57254: NEG
57255: PUSH
57256: LD_INT 2
57258: NEG
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 1
57266: PUSH
57267: LD_INT 1
57269: NEG
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 2
57277: PUSH
57278: LD_INT 0
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: LD_INT 2
57287: PUSH
57288: LD_INT 1
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 2
57297: PUSH
57298: LD_INT 2
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 1
57307: PUSH
57308: LD_INT 2
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 1
57317: NEG
57318: PUSH
57319: LD_INT 1
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: LD_INT 2
57328: NEG
57329: PUSH
57330: LD_INT 0
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 2
57339: NEG
57340: PUSH
57341: LD_INT 1
57343: NEG
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 2
57351: NEG
57352: PUSH
57353: LD_INT 2
57355: NEG
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 2
57363: NEG
57364: PUSH
57365: LD_INT 3
57367: NEG
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 2
57375: PUSH
57376: LD_INT 1
57378: NEG
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 3
57386: PUSH
57387: LD_INT 0
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 3
57396: PUSH
57397: LD_INT 1
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 3
57406: PUSH
57407: LD_INT 2
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 3
57416: PUSH
57417: LD_INT 3
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 2
57426: PUSH
57427: LD_INT 3
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 2
57436: NEG
57437: PUSH
57438: LD_INT 1
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 3
57447: NEG
57448: PUSH
57449: LD_INT 0
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 3
57458: NEG
57459: PUSH
57460: LD_INT 1
57462: NEG
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 3
57470: NEG
57471: PUSH
57472: LD_INT 2
57474: NEG
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 3
57482: NEG
57483: PUSH
57484: LD_INT 3
57486: NEG
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57523: LD_ADDR_VAR 0 45
57527: PUSH
57528: LD_INT 0
57530: PUSH
57531: LD_INT 0
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 0
57540: PUSH
57541: LD_INT 1
57543: NEG
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 1
57551: PUSH
57552: LD_INT 0
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 1
57561: PUSH
57562: LD_INT 1
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 0
57571: PUSH
57572: LD_INT 1
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 1
57581: NEG
57582: PUSH
57583: LD_INT 0
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 1
57592: NEG
57593: PUSH
57594: LD_INT 1
57596: NEG
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 1
57604: NEG
57605: PUSH
57606: LD_INT 2
57608: NEG
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 0
57616: PUSH
57617: LD_INT 2
57619: NEG
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: LD_INT 1
57627: PUSH
57628: LD_INT 1
57630: NEG
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 2
57638: PUSH
57639: LD_INT 1
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 2
57648: PUSH
57649: LD_INT 2
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 1
57658: PUSH
57659: LD_INT 2
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 0
57668: PUSH
57669: LD_INT 2
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 1
57678: NEG
57679: PUSH
57680: LD_INT 1
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 2
57689: NEG
57690: PUSH
57691: LD_INT 1
57693: NEG
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 2
57701: NEG
57702: PUSH
57703: LD_INT 2
57705: NEG
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 2
57713: NEG
57714: PUSH
57715: LD_INT 3
57717: NEG
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 1
57725: NEG
57726: PUSH
57727: LD_INT 3
57729: NEG
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 0
57737: PUSH
57738: LD_INT 3
57740: NEG
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 1
57748: PUSH
57749: LD_INT 2
57751: NEG
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 3
57759: PUSH
57760: LD_INT 2
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 3
57769: PUSH
57770: LD_INT 3
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 2
57779: PUSH
57780: LD_INT 3
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 1
57789: PUSH
57790: LD_INT 3
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 0
57799: PUSH
57800: LD_INT 3
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 1
57809: NEG
57810: PUSH
57811: LD_INT 2
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 3
57820: NEG
57821: PUSH
57822: LD_INT 2
57824: NEG
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 3
57832: NEG
57833: PUSH
57834: LD_INT 3
57836: NEG
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57873: LD_ADDR_VAR 0 46
57877: PUSH
57878: LD_INT 0
57880: PUSH
57881: LD_INT 0
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: LD_INT 0
57890: PUSH
57891: LD_INT 1
57893: NEG
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 1
57901: PUSH
57902: LD_INT 0
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 1
57911: PUSH
57912: LD_INT 1
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 0
57921: PUSH
57922: LD_INT 1
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: LD_INT 1
57931: NEG
57932: PUSH
57933: LD_INT 0
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 1
57942: NEG
57943: PUSH
57944: LD_INT 1
57946: NEG
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 1
57954: NEG
57955: PUSH
57956: LD_INT 2
57958: NEG
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 0
57966: PUSH
57967: LD_INT 2
57969: NEG
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 1
57977: PUSH
57978: LD_INT 1
57980: NEG
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 2
57988: PUSH
57989: LD_INT 0
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 2
57998: PUSH
57999: LD_INT 1
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 1
58008: PUSH
58009: LD_INT 2
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 0
58018: PUSH
58019: LD_INT 2
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 1
58028: NEG
58029: PUSH
58030: LD_INT 1
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 2
58039: NEG
58040: PUSH
58041: LD_INT 0
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 2
58050: NEG
58051: PUSH
58052: LD_INT 1
58054: NEG
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 1
58062: NEG
58063: PUSH
58064: LD_INT 3
58066: NEG
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 0
58074: PUSH
58075: LD_INT 3
58077: NEG
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 1
58085: PUSH
58086: LD_INT 2
58088: NEG
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 2
58096: PUSH
58097: LD_INT 1
58099: NEG
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: LD_INT 3
58107: PUSH
58108: LD_INT 0
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: PUSH
58115: LD_INT 3
58117: PUSH
58118: LD_INT 1
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 1
58127: PUSH
58128: LD_INT 3
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 0
58137: PUSH
58138: LD_INT 3
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 1
58147: NEG
58148: PUSH
58149: LD_INT 2
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 2
58158: NEG
58159: PUSH
58160: LD_INT 1
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 3
58169: NEG
58170: PUSH
58171: LD_INT 0
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 3
58180: NEG
58181: PUSH
58182: LD_INT 1
58184: NEG
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58221: LD_ADDR_VAR 0 47
58225: PUSH
58226: LD_INT 0
58228: PUSH
58229: LD_INT 0
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 0
58238: PUSH
58239: LD_INT 1
58241: NEG
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 1
58249: PUSH
58250: LD_INT 0
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 1
58259: PUSH
58260: LD_INT 1
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 0
58269: PUSH
58270: LD_INT 1
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 1
58279: NEG
58280: PUSH
58281: LD_INT 0
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: LD_INT 1
58290: NEG
58291: PUSH
58292: LD_INT 1
58294: NEG
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 1
58302: NEG
58303: PUSH
58304: LD_INT 2
58306: NEG
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 0
58314: PUSH
58315: LD_INT 2
58317: NEG
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 1
58325: PUSH
58326: LD_INT 1
58328: NEG
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 2
58336: NEG
58337: PUSH
58338: LD_INT 1
58340: NEG
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 2
58348: NEG
58349: PUSH
58350: LD_INT 2
58352: NEG
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: LIST
58368: LIST
58369: LIST
58370: LIST
58371: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58372: LD_ADDR_VAR 0 48
58376: PUSH
58377: LD_INT 0
58379: PUSH
58380: LD_INT 0
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 0
58389: PUSH
58390: LD_INT 1
58392: NEG
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 1
58400: PUSH
58401: LD_INT 0
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 1
58410: PUSH
58411: LD_INT 1
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 0
58420: PUSH
58421: LD_INT 1
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 1
58430: NEG
58431: PUSH
58432: LD_INT 0
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 1
58441: NEG
58442: PUSH
58443: LD_INT 1
58445: NEG
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 1
58453: NEG
58454: PUSH
58455: LD_INT 2
58457: NEG
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 0
58465: PUSH
58466: LD_INT 2
58468: NEG
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 1
58476: PUSH
58477: LD_INT 1
58479: NEG
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 2
58487: PUSH
58488: LD_INT 0
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: LD_INT 2
58497: PUSH
58498: LD_INT 1
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58519: LD_ADDR_VAR 0 49
58523: PUSH
58524: LD_INT 0
58526: PUSH
58527: LD_INT 0
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 0
58536: PUSH
58537: LD_INT 1
58539: NEG
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: PUSH
58545: LD_INT 1
58547: PUSH
58548: LD_INT 0
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 1
58557: PUSH
58558: LD_INT 1
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: LD_INT 0
58567: PUSH
58568: LD_INT 1
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 1
58577: NEG
58578: PUSH
58579: LD_INT 0
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 1
58588: NEG
58589: PUSH
58590: LD_INT 1
58592: NEG
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 1
58600: PUSH
58601: LD_INT 1
58603: NEG
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 2
58611: PUSH
58612: LD_INT 0
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 2
58621: PUSH
58622: LD_INT 1
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 2
58631: PUSH
58632: LD_INT 2
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 1
58641: PUSH
58642: LD_INT 2
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58663: LD_ADDR_VAR 0 50
58667: PUSH
58668: LD_INT 0
58670: PUSH
58671: LD_INT 0
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 0
58680: PUSH
58681: LD_INT 1
58683: NEG
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: LD_INT 1
58691: PUSH
58692: LD_INT 0
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 1
58701: PUSH
58702: LD_INT 1
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: LD_INT 0
58711: PUSH
58712: LD_INT 1
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 1
58721: NEG
58722: PUSH
58723: LD_INT 0
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 1
58732: NEG
58733: PUSH
58734: LD_INT 1
58736: NEG
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 2
58744: PUSH
58745: LD_INT 1
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 2
58754: PUSH
58755: LD_INT 2
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 1
58764: PUSH
58765: LD_INT 2
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 0
58774: PUSH
58775: LD_INT 2
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 1
58784: NEG
58785: PUSH
58786: LD_INT 1
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: LIST
58803: LIST
58804: LIST
58805: LIST
58806: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58807: LD_ADDR_VAR 0 51
58811: PUSH
58812: LD_INT 0
58814: PUSH
58815: LD_INT 0
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 0
58824: PUSH
58825: LD_INT 1
58827: NEG
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 1
58835: PUSH
58836: LD_INT 0
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 1
58845: PUSH
58846: LD_INT 1
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 0
58855: PUSH
58856: LD_INT 1
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_INT 1
58865: NEG
58866: PUSH
58867: LD_INT 0
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 1
58876: NEG
58877: PUSH
58878: LD_INT 1
58880: NEG
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 1
58888: PUSH
58889: LD_INT 2
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 0
58898: PUSH
58899: LD_INT 2
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: LD_INT 1
58908: NEG
58909: PUSH
58910: LD_INT 1
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 2
58919: NEG
58920: PUSH
58921: LD_INT 0
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 2
58930: NEG
58931: PUSH
58932: LD_INT 1
58934: NEG
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58954: LD_ADDR_VAR 0 52
58958: PUSH
58959: LD_INT 0
58961: PUSH
58962: LD_INT 0
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 0
58971: PUSH
58972: LD_INT 1
58974: NEG
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 1
58982: PUSH
58983: LD_INT 0
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 1
58992: PUSH
58993: LD_INT 1
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 0
59002: PUSH
59003: LD_INT 1
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 1
59012: NEG
59013: PUSH
59014: LD_INT 0
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 1
59023: NEG
59024: PUSH
59025: LD_INT 1
59027: NEG
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 1
59035: NEG
59036: PUSH
59037: LD_INT 2
59039: NEG
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 1
59047: NEG
59048: PUSH
59049: LD_INT 1
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 2
59058: NEG
59059: PUSH
59060: LD_INT 0
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 2
59069: NEG
59070: PUSH
59071: LD_INT 1
59073: NEG
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PUSH
59079: LD_INT 2
59081: NEG
59082: PUSH
59083: LD_INT 2
59085: NEG
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: LIST
59095: LIST
59096: LIST
59097: LIST
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59105: LD_ADDR_VAR 0 53
59109: PUSH
59110: LD_INT 0
59112: PUSH
59113: LD_INT 0
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 0
59122: PUSH
59123: LD_INT 1
59125: NEG
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 1
59133: PUSH
59134: LD_INT 0
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 1
59143: PUSH
59144: LD_INT 1
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 0
59153: PUSH
59154: LD_INT 1
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 1
59163: NEG
59164: PUSH
59165: LD_INT 0
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: LD_INT 1
59174: NEG
59175: PUSH
59176: LD_INT 1
59178: NEG
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 1
59186: NEG
59187: PUSH
59188: LD_INT 2
59190: NEG
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 0
59198: PUSH
59199: LD_INT 2
59201: NEG
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 1
59209: PUSH
59210: LD_INT 1
59212: NEG
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 2
59220: PUSH
59221: LD_INT 0
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 2
59230: PUSH
59231: LD_INT 1
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 2
59240: PUSH
59241: LD_INT 2
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: LD_INT 1
59250: PUSH
59251: LD_INT 2
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 0
59260: PUSH
59261: LD_INT 2
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 1
59270: NEG
59271: PUSH
59272: LD_INT 1
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 2
59281: NEG
59282: PUSH
59283: LD_INT 0
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 2
59292: NEG
59293: PUSH
59294: LD_INT 1
59296: NEG
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 2
59304: NEG
59305: PUSH
59306: LD_INT 2
59308: NEG
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59335: LD_ADDR_VAR 0 54
59339: PUSH
59340: LD_INT 0
59342: PUSH
59343: LD_INT 0
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 0
59352: PUSH
59353: LD_INT 1
59355: NEG
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 1
59363: PUSH
59364: LD_INT 0
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 1
59373: PUSH
59374: LD_INT 1
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 0
59383: PUSH
59384: LD_INT 1
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: LD_INT 1
59393: NEG
59394: PUSH
59395: LD_INT 0
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 1
59404: NEG
59405: PUSH
59406: LD_INT 1
59408: NEG
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 1
59416: NEG
59417: PUSH
59418: LD_INT 2
59420: NEG
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 0
59428: PUSH
59429: LD_INT 2
59431: NEG
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 1
59439: PUSH
59440: LD_INT 1
59442: NEG
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 2
59450: PUSH
59451: LD_INT 0
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 2
59460: PUSH
59461: LD_INT 1
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 2
59470: PUSH
59471: LD_INT 2
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 1
59480: PUSH
59481: LD_INT 2
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 0
59490: PUSH
59491: LD_INT 2
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 1
59500: NEG
59501: PUSH
59502: LD_INT 1
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 2
59511: NEG
59512: PUSH
59513: LD_INT 0
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 2
59522: NEG
59523: PUSH
59524: LD_INT 1
59526: NEG
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 2
59534: NEG
59535: PUSH
59536: LD_INT 2
59538: NEG
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59565: LD_ADDR_VAR 0 55
59569: PUSH
59570: LD_INT 0
59572: PUSH
59573: LD_INT 0
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 0
59582: PUSH
59583: LD_INT 1
59585: NEG
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: LD_INT 1
59593: PUSH
59594: LD_INT 0
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: LD_INT 1
59603: PUSH
59604: LD_INT 1
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 0
59613: PUSH
59614: LD_INT 1
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 1
59623: NEG
59624: PUSH
59625: LD_INT 0
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 1
59634: NEG
59635: PUSH
59636: LD_INT 1
59638: NEG
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 1
59646: NEG
59647: PUSH
59648: LD_INT 2
59650: NEG
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 0
59658: PUSH
59659: LD_INT 2
59661: NEG
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 1
59669: PUSH
59670: LD_INT 1
59672: NEG
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 2
59680: PUSH
59681: LD_INT 0
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 2
59690: PUSH
59691: LD_INT 1
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: LD_INT 2
59700: PUSH
59701: LD_INT 2
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 1
59710: PUSH
59711: LD_INT 2
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 0
59720: PUSH
59721: LD_INT 2
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 1
59730: NEG
59731: PUSH
59732: LD_INT 1
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: LD_INT 2
59741: NEG
59742: PUSH
59743: LD_INT 0
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 2
59752: NEG
59753: PUSH
59754: LD_INT 1
59756: NEG
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 2
59764: NEG
59765: PUSH
59766: LD_INT 2
59768: NEG
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: LIST
59778: LIST
59779: LIST
59780: LIST
59781: LIST
59782: LIST
59783: LIST
59784: LIST
59785: LIST
59786: LIST
59787: LIST
59788: LIST
59789: LIST
59790: LIST
59791: LIST
59792: LIST
59793: LIST
59794: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59795: LD_ADDR_VAR 0 56
59799: PUSH
59800: LD_INT 0
59802: PUSH
59803: LD_INT 0
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 0
59812: PUSH
59813: LD_INT 1
59815: NEG
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 1
59823: PUSH
59824: LD_INT 0
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 1
59833: PUSH
59834: LD_INT 1
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 0
59843: PUSH
59844: LD_INT 1
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: LD_INT 1
59853: NEG
59854: PUSH
59855: LD_INT 0
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: LD_INT 1
59864: NEG
59865: PUSH
59866: LD_INT 1
59868: NEG
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 1
59876: NEG
59877: PUSH
59878: LD_INT 2
59880: NEG
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 0
59888: PUSH
59889: LD_INT 2
59891: NEG
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_INT 1
59899: PUSH
59900: LD_INT 1
59902: NEG
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: LD_INT 2
59910: PUSH
59911: LD_INT 0
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: LD_INT 2
59920: PUSH
59921: LD_INT 1
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 2
59930: PUSH
59931: LD_INT 2
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 1
59940: PUSH
59941: LD_INT 2
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 0
59950: PUSH
59951: LD_INT 2
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 1
59960: NEG
59961: PUSH
59962: LD_INT 1
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 2
59971: NEG
59972: PUSH
59973: LD_INT 0
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: LD_INT 2
59982: NEG
59983: PUSH
59984: LD_INT 1
59986: NEG
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 2
59994: NEG
59995: PUSH
59996: LD_INT 2
59998: NEG
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: LIST
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: LIST
60015: LIST
60016: LIST
60017: LIST
60018: LIST
60019: LIST
60020: LIST
60021: LIST
60022: LIST
60023: LIST
60024: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60025: LD_ADDR_VAR 0 57
60029: PUSH
60030: LD_INT 0
60032: PUSH
60033: LD_INT 0
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 0
60042: PUSH
60043: LD_INT 1
60045: NEG
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 1
60053: PUSH
60054: LD_INT 0
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 1
60063: PUSH
60064: LD_INT 1
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: LD_INT 0
60073: PUSH
60074: LD_INT 1
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 1
60083: NEG
60084: PUSH
60085: LD_INT 0
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 1
60094: NEG
60095: PUSH
60096: LD_INT 1
60098: NEG
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 1
60106: NEG
60107: PUSH
60108: LD_INT 2
60110: NEG
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 0
60118: PUSH
60119: LD_INT 2
60121: NEG
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: LD_INT 1
60129: PUSH
60130: LD_INT 1
60132: NEG
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: LD_INT 2
60140: PUSH
60141: LD_INT 0
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_INT 2
60150: PUSH
60151: LD_INT 1
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: PUSH
60158: LD_INT 2
60160: PUSH
60161: LD_INT 2
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 1
60170: PUSH
60171: LD_INT 2
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 0
60180: PUSH
60181: LD_INT 2
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 1
60190: NEG
60191: PUSH
60192: LD_INT 1
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 2
60201: NEG
60202: PUSH
60203: LD_INT 0
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 2
60212: NEG
60213: PUSH
60214: LD_INT 1
60216: NEG
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 2
60224: NEG
60225: PUSH
60226: LD_INT 2
60228: NEG
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: LIST
60241: LIST
60242: LIST
60243: LIST
60244: LIST
60245: LIST
60246: LIST
60247: LIST
60248: LIST
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60255: LD_ADDR_VAR 0 58
60259: PUSH
60260: LD_INT 0
60262: PUSH
60263: LD_INT 0
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 0
60272: PUSH
60273: LD_INT 1
60275: NEG
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 1
60283: PUSH
60284: LD_INT 0
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 1
60293: PUSH
60294: LD_INT 1
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 0
60303: PUSH
60304: LD_INT 1
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 1
60313: NEG
60314: PUSH
60315: LD_INT 0
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 1
60324: NEG
60325: PUSH
60326: LD_INT 1
60328: NEG
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 1
60336: NEG
60337: PUSH
60338: LD_INT 2
60340: NEG
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 0
60348: PUSH
60349: LD_INT 2
60351: NEG
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 1
60359: PUSH
60360: LD_INT 1
60362: NEG
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 2
60370: PUSH
60371: LD_INT 0
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: PUSH
60378: LD_INT 2
60380: PUSH
60381: LD_INT 1
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: PUSH
60388: LD_INT 2
60390: PUSH
60391: LD_INT 2
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: PUSH
60398: LD_INT 1
60400: PUSH
60401: LD_INT 2
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: LD_INT 0
60410: PUSH
60411: LD_INT 2
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 1
60420: NEG
60421: PUSH
60422: LD_INT 1
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 2
60431: NEG
60432: PUSH
60433: LD_INT 0
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 2
60442: NEG
60443: PUSH
60444: LD_INT 1
60446: NEG
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 2
60454: NEG
60455: PUSH
60456: LD_INT 2
60458: NEG
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60485: LD_ADDR_VAR 0 59
60489: PUSH
60490: LD_INT 0
60492: PUSH
60493: LD_INT 0
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 0
60502: PUSH
60503: LD_INT 1
60505: NEG
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 1
60513: PUSH
60514: LD_INT 0
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 1
60523: PUSH
60524: LD_INT 1
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 0
60533: PUSH
60534: LD_INT 1
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 1
60543: NEG
60544: PUSH
60545: LD_INT 0
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: LD_INT 1
60554: NEG
60555: PUSH
60556: LD_INT 1
60558: NEG
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: LIST
60568: LIST
60569: LIST
60570: LIST
60571: LIST
60572: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60573: LD_ADDR_VAR 0 60
60577: PUSH
60578: LD_INT 0
60580: PUSH
60581: LD_INT 0
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: PUSH
60588: LD_INT 0
60590: PUSH
60591: LD_INT 1
60593: NEG
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 1
60601: PUSH
60602: LD_INT 0
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 1
60611: PUSH
60612: LD_INT 1
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: LD_INT 0
60621: PUSH
60622: LD_INT 1
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 1
60631: NEG
60632: PUSH
60633: LD_INT 0
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 1
60642: NEG
60643: PUSH
60644: LD_INT 1
60646: NEG
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60661: LD_ADDR_VAR 0 61
60665: PUSH
60666: LD_INT 0
60668: PUSH
60669: LD_INT 0
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: PUSH
60676: LD_INT 0
60678: PUSH
60679: LD_INT 1
60681: NEG
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: LD_INT 1
60689: PUSH
60690: LD_INT 0
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 1
60699: PUSH
60700: LD_INT 1
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 0
60709: PUSH
60710: LD_INT 1
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 1
60719: NEG
60720: PUSH
60721: LD_INT 0
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 1
60730: NEG
60731: PUSH
60732: LD_INT 1
60734: NEG
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: LIST
60744: LIST
60745: LIST
60746: LIST
60747: LIST
60748: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60749: LD_ADDR_VAR 0 62
60753: PUSH
60754: LD_INT 0
60756: PUSH
60757: LD_INT 0
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 0
60766: PUSH
60767: LD_INT 1
60769: NEG
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 1
60777: PUSH
60778: LD_INT 0
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 1
60787: PUSH
60788: LD_INT 1
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 0
60797: PUSH
60798: LD_INT 1
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 1
60807: NEG
60808: PUSH
60809: LD_INT 0
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 1
60818: NEG
60819: PUSH
60820: LD_INT 1
60822: NEG
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60837: LD_ADDR_VAR 0 63
60841: PUSH
60842: LD_INT 0
60844: PUSH
60845: LD_INT 0
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: LD_INT 0
60854: PUSH
60855: LD_INT 1
60857: NEG
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 1
60865: PUSH
60866: LD_INT 0
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 1
60875: PUSH
60876: LD_INT 1
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 0
60885: PUSH
60886: LD_INT 1
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 1
60895: NEG
60896: PUSH
60897: LD_INT 0
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 1
60906: NEG
60907: PUSH
60908: LD_INT 1
60910: NEG
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60925: LD_ADDR_VAR 0 64
60929: PUSH
60930: LD_INT 0
60932: PUSH
60933: LD_INT 0
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: PUSH
60940: LD_INT 0
60942: PUSH
60943: LD_INT 1
60945: NEG
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 1
60953: PUSH
60954: LD_INT 0
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 1
60963: PUSH
60964: LD_INT 1
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 0
60973: PUSH
60974: LD_INT 1
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 1
60983: NEG
60984: PUSH
60985: LD_INT 0
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PUSH
60992: LD_INT 1
60994: NEG
60995: PUSH
60996: LD_INT 1
60998: NEG
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: LIST
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: ST_TO_ADDR
// end ; 1 :
61013: GO 66910
61015: LD_INT 1
61017: DOUBLE
61018: EQUAL
61019: IFTRUE 61023
61021: GO 63646
61023: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61024: LD_ADDR_VAR 0 11
61028: PUSH
61029: LD_INT 1
61031: NEG
61032: PUSH
61033: LD_INT 3
61035: NEG
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 0
61043: PUSH
61044: LD_INT 3
61046: NEG
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 1
61054: PUSH
61055: LD_INT 2
61057: NEG
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: LIST
61067: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61068: LD_ADDR_VAR 0 12
61072: PUSH
61073: LD_INT 2
61075: PUSH
61076: LD_INT 1
61078: NEG
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: PUSH
61084: LD_INT 3
61086: PUSH
61087: LD_INT 0
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: LD_INT 3
61096: PUSH
61097: LD_INT 1
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: LIST
61108: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61109: LD_ADDR_VAR 0 13
61113: PUSH
61114: LD_INT 3
61116: PUSH
61117: LD_INT 2
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 3
61126: PUSH
61127: LD_INT 3
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 2
61136: PUSH
61137: LD_INT 3
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: LIST
61148: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61149: LD_ADDR_VAR 0 14
61153: PUSH
61154: LD_INT 1
61156: PUSH
61157: LD_INT 3
61159: PUSH
61160: EMPTY
61161: LIST
61162: LIST
61163: PUSH
61164: LD_INT 0
61166: PUSH
61167: LD_INT 3
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: PUSH
61174: LD_INT 1
61176: NEG
61177: PUSH
61178: LD_INT 2
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: LIST
61189: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61190: LD_ADDR_VAR 0 15
61194: PUSH
61195: LD_INT 2
61197: NEG
61198: PUSH
61199: LD_INT 1
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: LD_INT 3
61208: NEG
61209: PUSH
61210: LD_INT 0
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: LD_INT 3
61219: NEG
61220: PUSH
61221: LD_INT 1
61223: NEG
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: LIST
61233: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61234: LD_ADDR_VAR 0 16
61238: PUSH
61239: LD_INT 2
61241: NEG
61242: PUSH
61243: LD_INT 3
61245: NEG
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 3
61253: NEG
61254: PUSH
61255: LD_INT 2
61257: NEG
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 3
61265: NEG
61266: PUSH
61267: LD_INT 3
61269: NEG
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: LIST
61279: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61280: LD_ADDR_VAR 0 17
61284: PUSH
61285: LD_INT 1
61287: NEG
61288: PUSH
61289: LD_INT 3
61291: NEG
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 0
61299: PUSH
61300: LD_INT 3
61302: NEG
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 1
61310: PUSH
61311: LD_INT 2
61313: NEG
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: LIST
61323: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61324: LD_ADDR_VAR 0 18
61328: PUSH
61329: LD_INT 2
61331: PUSH
61332: LD_INT 1
61334: NEG
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: PUSH
61340: LD_INT 3
61342: PUSH
61343: LD_INT 0
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: PUSH
61350: LD_INT 3
61352: PUSH
61353: LD_INT 1
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: LIST
61364: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61365: LD_ADDR_VAR 0 19
61369: PUSH
61370: LD_INT 3
61372: PUSH
61373: LD_INT 2
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: LD_INT 3
61382: PUSH
61383: LD_INT 3
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 2
61392: PUSH
61393: LD_INT 3
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: LIST
61404: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61405: LD_ADDR_VAR 0 20
61409: PUSH
61410: LD_INT 1
61412: PUSH
61413: LD_INT 3
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 0
61422: PUSH
61423: LD_INT 3
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: LD_INT 1
61432: NEG
61433: PUSH
61434: LD_INT 2
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: LIST
61445: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61446: LD_ADDR_VAR 0 21
61450: PUSH
61451: LD_INT 2
61453: NEG
61454: PUSH
61455: LD_INT 1
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 3
61464: NEG
61465: PUSH
61466: LD_INT 0
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PUSH
61473: LD_INT 3
61475: NEG
61476: PUSH
61477: LD_INT 1
61479: NEG
61480: PUSH
61481: EMPTY
61482: LIST
61483: LIST
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: LIST
61489: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61490: LD_ADDR_VAR 0 22
61494: PUSH
61495: LD_INT 2
61497: NEG
61498: PUSH
61499: LD_INT 3
61501: NEG
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 3
61509: NEG
61510: PUSH
61511: LD_INT 2
61513: NEG
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 3
61521: NEG
61522: PUSH
61523: LD_INT 3
61525: NEG
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: LIST
61535: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
61536: LD_ADDR_VAR 0 23
61540: PUSH
61541: LD_INT 0
61543: PUSH
61544: LD_INT 3
61546: NEG
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 1
61554: NEG
61555: PUSH
61556: LD_INT 4
61558: NEG
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: LD_INT 1
61566: PUSH
61567: LD_INT 3
61569: NEG
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: LIST
61579: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
61580: LD_ADDR_VAR 0 24
61584: PUSH
61585: LD_INT 3
61587: PUSH
61588: LD_INT 0
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: PUSH
61595: LD_INT 3
61597: PUSH
61598: LD_INT 1
61600: NEG
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 4
61608: PUSH
61609: LD_INT 1
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: EMPTY
61617: LIST
61618: LIST
61619: LIST
61620: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
61621: LD_ADDR_VAR 0 25
61625: PUSH
61626: LD_INT 3
61628: PUSH
61629: LD_INT 3
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 4
61638: PUSH
61639: LD_INT 3
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: LD_INT 3
61648: PUSH
61649: LD_INT 4
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: LIST
61660: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
61661: LD_ADDR_VAR 0 26
61665: PUSH
61666: LD_INT 0
61668: PUSH
61669: LD_INT 3
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: LD_INT 1
61678: PUSH
61679: LD_INT 4
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: PUSH
61686: LD_INT 1
61688: NEG
61689: PUSH
61690: LD_INT 3
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: LIST
61701: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
61702: LD_ADDR_VAR 0 27
61706: PUSH
61707: LD_INT 3
61709: NEG
61710: PUSH
61711: LD_INT 0
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 3
61720: NEG
61721: PUSH
61722: LD_INT 1
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PUSH
61729: LD_INT 4
61731: NEG
61732: PUSH
61733: LD_INT 1
61735: NEG
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: LIST
61745: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
61746: LD_ADDR_VAR 0 28
61750: PUSH
61751: LD_INT 3
61753: NEG
61754: PUSH
61755: LD_INT 3
61757: NEG
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: LD_INT 3
61765: NEG
61766: PUSH
61767: LD_INT 4
61769: NEG
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: LD_INT 4
61777: NEG
61778: PUSH
61779: LD_INT 3
61781: NEG
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: LIST
61791: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
61792: LD_ADDR_VAR 0 29
61796: PUSH
61797: LD_INT 1
61799: NEG
61800: PUSH
61801: LD_INT 3
61803: NEG
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: PUSH
61809: LD_INT 0
61811: PUSH
61812: LD_INT 3
61814: NEG
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: PUSH
61820: LD_INT 1
61822: PUSH
61823: LD_INT 2
61825: NEG
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: LD_INT 1
61833: NEG
61834: PUSH
61835: LD_INT 4
61837: NEG
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 0
61845: PUSH
61846: LD_INT 4
61848: NEG
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: LD_INT 1
61856: PUSH
61857: LD_INT 3
61859: NEG
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: LD_INT 1
61867: NEG
61868: PUSH
61869: LD_INT 5
61871: NEG
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: PUSH
61877: LD_INT 0
61879: PUSH
61880: LD_INT 5
61882: NEG
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: PUSH
61888: LD_INT 1
61890: PUSH
61891: LD_INT 4
61893: NEG
61894: PUSH
61895: EMPTY
61896: LIST
61897: LIST
61898: PUSH
61899: LD_INT 1
61901: NEG
61902: PUSH
61903: LD_INT 6
61905: NEG
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: PUSH
61911: LD_INT 0
61913: PUSH
61914: LD_INT 6
61916: NEG
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: LD_INT 1
61924: PUSH
61925: LD_INT 5
61927: NEG
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: LIST
61944: LIST
61945: LIST
61946: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
61947: LD_ADDR_VAR 0 30
61951: PUSH
61952: LD_INT 2
61954: PUSH
61955: LD_INT 1
61957: NEG
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: LD_INT 3
61965: PUSH
61966: LD_INT 0
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: LD_INT 3
61975: PUSH
61976: LD_INT 1
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: LD_INT 3
61985: PUSH
61986: LD_INT 1
61988: NEG
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: PUSH
61994: LD_INT 4
61996: PUSH
61997: LD_INT 0
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_INT 4
62006: PUSH
62007: LD_INT 1
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PUSH
62014: LD_INT 4
62016: PUSH
62017: LD_INT 1
62019: NEG
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: LD_INT 5
62027: PUSH
62028: LD_INT 0
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 5
62037: PUSH
62038: LD_INT 1
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: LD_INT 5
62047: PUSH
62048: LD_INT 1
62050: NEG
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 6
62058: PUSH
62059: LD_INT 0
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 6
62068: PUSH
62069: LD_INT 1
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: LIST
62080: LIST
62081: LIST
62082: LIST
62083: LIST
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: LIST
62089: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
62090: LD_ADDR_VAR 0 31
62094: PUSH
62095: LD_INT 3
62097: PUSH
62098: LD_INT 2
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: LD_INT 3
62107: PUSH
62108: LD_INT 3
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: LD_INT 2
62117: PUSH
62118: LD_INT 3
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: PUSH
62125: LD_INT 4
62127: PUSH
62128: LD_INT 3
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PUSH
62135: LD_INT 4
62137: PUSH
62138: LD_INT 4
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: PUSH
62145: LD_INT 3
62147: PUSH
62148: LD_INT 4
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 5
62157: PUSH
62158: LD_INT 4
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: LD_INT 5
62167: PUSH
62168: LD_INT 5
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 4
62177: PUSH
62178: LD_INT 5
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: PUSH
62185: LD_INT 6
62187: PUSH
62188: LD_INT 5
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: LD_INT 6
62197: PUSH
62198: LD_INT 6
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 5
62207: PUSH
62208: LD_INT 6
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
62229: LD_ADDR_VAR 0 32
62233: PUSH
62234: LD_INT 1
62236: PUSH
62237: LD_INT 3
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: PUSH
62244: LD_INT 0
62246: PUSH
62247: LD_INT 3
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: LD_INT 1
62256: NEG
62257: PUSH
62258: LD_INT 2
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: PUSH
62265: LD_INT 1
62267: PUSH
62268: LD_INT 4
62270: PUSH
62271: EMPTY
62272: LIST
62273: LIST
62274: PUSH
62275: LD_INT 0
62277: PUSH
62278: LD_INT 4
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: PUSH
62285: LD_INT 1
62287: NEG
62288: PUSH
62289: LD_INT 3
62291: PUSH
62292: EMPTY
62293: LIST
62294: LIST
62295: PUSH
62296: LD_INT 1
62298: PUSH
62299: LD_INT 5
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 0
62308: PUSH
62309: LD_INT 5
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: PUSH
62316: LD_INT 1
62318: NEG
62319: PUSH
62320: LD_INT 4
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: PUSH
62327: LD_INT 1
62329: PUSH
62330: LD_INT 6
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 0
62339: PUSH
62340: LD_INT 6
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 1
62349: NEG
62350: PUSH
62351: LD_INT 5
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: LIST
62362: LIST
62363: LIST
62364: LIST
62365: LIST
62366: LIST
62367: LIST
62368: LIST
62369: LIST
62370: LIST
62371: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
62372: LD_ADDR_VAR 0 33
62376: PUSH
62377: LD_INT 2
62379: NEG
62380: PUSH
62381: LD_INT 1
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: PUSH
62388: LD_INT 3
62390: NEG
62391: PUSH
62392: LD_INT 0
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: LD_INT 3
62401: NEG
62402: PUSH
62403: LD_INT 1
62405: NEG
62406: PUSH
62407: EMPTY
62408: LIST
62409: LIST
62410: PUSH
62411: LD_INT 3
62413: NEG
62414: PUSH
62415: LD_INT 1
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: LD_INT 4
62424: NEG
62425: PUSH
62426: LD_INT 0
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: LD_INT 4
62435: NEG
62436: PUSH
62437: LD_INT 1
62439: NEG
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PUSH
62445: LD_INT 4
62447: NEG
62448: PUSH
62449: LD_INT 1
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: LD_INT 5
62458: NEG
62459: PUSH
62460: LD_INT 0
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PUSH
62467: LD_INT 5
62469: NEG
62470: PUSH
62471: LD_INT 1
62473: NEG
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 5
62481: NEG
62482: PUSH
62483: LD_INT 1
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: LD_INT 6
62492: NEG
62493: PUSH
62494: LD_INT 0
62496: PUSH
62497: EMPTY
62498: LIST
62499: LIST
62500: PUSH
62501: LD_INT 6
62503: NEG
62504: PUSH
62505: LD_INT 1
62507: NEG
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: LIST
62517: LIST
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: LIST
62523: LIST
62524: LIST
62525: LIST
62526: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
62527: LD_ADDR_VAR 0 34
62531: PUSH
62532: LD_INT 2
62534: NEG
62535: PUSH
62536: LD_INT 3
62538: NEG
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: PUSH
62544: LD_INT 3
62546: NEG
62547: PUSH
62548: LD_INT 2
62550: NEG
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: PUSH
62556: LD_INT 3
62558: NEG
62559: PUSH
62560: LD_INT 3
62562: NEG
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: PUSH
62568: LD_INT 3
62570: NEG
62571: PUSH
62572: LD_INT 4
62574: NEG
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: PUSH
62580: LD_INT 4
62582: NEG
62583: PUSH
62584: LD_INT 3
62586: NEG
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: PUSH
62592: LD_INT 4
62594: NEG
62595: PUSH
62596: LD_INT 4
62598: NEG
62599: PUSH
62600: EMPTY
62601: LIST
62602: LIST
62603: PUSH
62604: LD_INT 4
62606: NEG
62607: PUSH
62608: LD_INT 5
62610: NEG
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: PUSH
62616: LD_INT 5
62618: NEG
62619: PUSH
62620: LD_INT 4
62622: NEG
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PUSH
62628: LD_INT 5
62630: NEG
62631: PUSH
62632: LD_INT 5
62634: NEG
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: PUSH
62640: LD_INT 5
62642: NEG
62643: PUSH
62644: LD_INT 6
62646: NEG
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_INT 6
62654: NEG
62655: PUSH
62656: LD_INT 5
62658: NEG
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: LD_INT 6
62666: NEG
62667: PUSH
62668: LD_INT 6
62670: NEG
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: LIST
62680: LIST
62681: LIST
62682: LIST
62683: LIST
62684: LIST
62685: LIST
62686: LIST
62687: LIST
62688: LIST
62689: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
62690: LD_ADDR_VAR 0 41
62694: PUSH
62695: LD_INT 0
62697: PUSH
62698: LD_INT 2
62700: NEG
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: PUSH
62706: LD_INT 1
62708: NEG
62709: PUSH
62710: LD_INT 3
62712: NEG
62713: PUSH
62714: EMPTY
62715: LIST
62716: LIST
62717: PUSH
62718: LD_INT 1
62720: PUSH
62721: LD_INT 2
62723: NEG
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: LIST
62733: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
62734: LD_ADDR_VAR 0 42
62738: PUSH
62739: LD_INT 2
62741: PUSH
62742: LD_INT 0
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: PUSH
62749: LD_INT 2
62751: PUSH
62752: LD_INT 1
62754: NEG
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_INT 3
62762: PUSH
62763: LD_INT 1
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: LIST
62774: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
62775: LD_ADDR_VAR 0 43
62779: PUSH
62780: LD_INT 2
62782: PUSH
62783: LD_INT 2
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: PUSH
62790: LD_INT 3
62792: PUSH
62793: LD_INT 2
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 2
62802: PUSH
62803: LD_INT 3
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: LIST
62814: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
62815: LD_ADDR_VAR 0 44
62819: PUSH
62820: LD_INT 0
62822: PUSH
62823: LD_INT 2
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 1
62832: PUSH
62833: LD_INT 3
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: PUSH
62840: LD_INT 1
62842: NEG
62843: PUSH
62844: LD_INT 2
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: LIST
62855: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62856: LD_ADDR_VAR 0 45
62860: PUSH
62861: LD_INT 2
62863: NEG
62864: PUSH
62865: LD_INT 0
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: PUSH
62872: LD_INT 2
62874: NEG
62875: PUSH
62876: LD_INT 1
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: PUSH
62883: LD_INT 3
62885: NEG
62886: PUSH
62887: LD_INT 1
62889: NEG
62890: PUSH
62891: EMPTY
62892: LIST
62893: LIST
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: LIST
62899: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
62900: LD_ADDR_VAR 0 46
62904: PUSH
62905: LD_INT 2
62907: NEG
62908: PUSH
62909: LD_INT 2
62911: NEG
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: PUSH
62917: LD_INT 2
62919: NEG
62920: PUSH
62921: LD_INT 3
62923: NEG
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: PUSH
62929: LD_INT 3
62931: NEG
62932: PUSH
62933: LD_INT 2
62935: NEG
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: LIST
62945: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
62946: LD_ADDR_VAR 0 47
62950: PUSH
62951: LD_INT 2
62953: NEG
62954: PUSH
62955: LD_INT 3
62957: NEG
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: PUSH
62963: LD_INT 1
62965: NEG
62966: PUSH
62967: LD_INT 3
62969: NEG
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
62979: LD_ADDR_VAR 0 48
62983: PUSH
62984: LD_INT 1
62986: PUSH
62987: LD_INT 2
62989: NEG
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: PUSH
62995: LD_INT 2
62997: PUSH
62998: LD_INT 1
63000: NEG
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
63010: LD_ADDR_VAR 0 49
63014: PUSH
63015: LD_INT 3
63017: PUSH
63018: LD_INT 1
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: PUSH
63025: LD_INT 3
63027: PUSH
63028: LD_INT 2
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
63039: LD_ADDR_VAR 0 50
63043: PUSH
63044: LD_INT 2
63046: PUSH
63047: LD_INT 3
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: PUSH
63054: LD_INT 1
63056: PUSH
63057: LD_INT 3
63059: PUSH
63060: EMPTY
63061: LIST
63062: LIST
63063: PUSH
63064: EMPTY
63065: LIST
63066: LIST
63067: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
63068: LD_ADDR_VAR 0 51
63072: PUSH
63073: LD_INT 1
63075: NEG
63076: PUSH
63077: LD_INT 2
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: PUSH
63084: LD_INT 2
63086: NEG
63087: PUSH
63088: LD_INT 1
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
63099: LD_ADDR_VAR 0 52
63103: PUSH
63104: LD_INT 3
63106: NEG
63107: PUSH
63108: LD_INT 1
63110: NEG
63111: PUSH
63112: EMPTY
63113: LIST
63114: LIST
63115: PUSH
63116: LD_INT 3
63118: NEG
63119: PUSH
63120: LD_INT 2
63122: NEG
63123: PUSH
63124: EMPTY
63125: LIST
63126: LIST
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63132: LD_ADDR_VAR 0 53
63136: PUSH
63137: LD_INT 1
63139: NEG
63140: PUSH
63141: LD_INT 3
63143: NEG
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: PUSH
63149: LD_INT 0
63151: PUSH
63152: LD_INT 3
63154: NEG
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: LD_INT 1
63162: PUSH
63163: LD_INT 2
63165: NEG
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: EMPTY
63172: LIST
63173: LIST
63174: LIST
63175: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63176: LD_ADDR_VAR 0 54
63180: PUSH
63181: LD_INT 2
63183: PUSH
63184: LD_INT 1
63186: NEG
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PUSH
63192: LD_INT 3
63194: PUSH
63195: LD_INT 0
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: LD_INT 3
63204: PUSH
63205: LD_INT 1
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: LIST
63216: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63217: LD_ADDR_VAR 0 55
63221: PUSH
63222: LD_INT 3
63224: PUSH
63225: LD_INT 2
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PUSH
63232: LD_INT 3
63234: PUSH
63235: LD_INT 3
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: PUSH
63242: LD_INT 2
63244: PUSH
63245: LD_INT 3
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: LIST
63256: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63257: LD_ADDR_VAR 0 56
63261: PUSH
63262: LD_INT 1
63264: PUSH
63265: LD_INT 3
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: PUSH
63272: LD_INT 0
63274: PUSH
63275: LD_INT 3
63277: PUSH
63278: EMPTY
63279: LIST
63280: LIST
63281: PUSH
63282: LD_INT 1
63284: NEG
63285: PUSH
63286: LD_INT 2
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: PUSH
63293: EMPTY
63294: LIST
63295: LIST
63296: LIST
63297: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63298: LD_ADDR_VAR 0 57
63302: PUSH
63303: LD_INT 2
63305: NEG
63306: PUSH
63307: LD_INT 1
63309: PUSH
63310: EMPTY
63311: LIST
63312: LIST
63313: PUSH
63314: LD_INT 3
63316: NEG
63317: PUSH
63318: LD_INT 0
63320: PUSH
63321: EMPTY
63322: LIST
63323: LIST
63324: PUSH
63325: LD_INT 3
63327: NEG
63328: PUSH
63329: LD_INT 1
63331: NEG
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: LIST
63341: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63342: LD_ADDR_VAR 0 58
63346: PUSH
63347: LD_INT 2
63349: NEG
63350: PUSH
63351: LD_INT 3
63353: NEG
63354: PUSH
63355: EMPTY
63356: LIST
63357: LIST
63358: PUSH
63359: LD_INT 3
63361: NEG
63362: PUSH
63363: LD_INT 2
63365: NEG
63366: PUSH
63367: EMPTY
63368: LIST
63369: LIST
63370: PUSH
63371: LD_INT 3
63373: NEG
63374: PUSH
63375: LD_INT 3
63377: NEG
63378: PUSH
63379: EMPTY
63380: LIST
63381: LIST
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: LIST
63387: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
63388: LD_ADDR_VAR 0 59
63392: PUSH
63393: LD_INT 1
63395: NEG
63396: PUSH
63397: LD_INT 2
63399: NEG
63400: PUSH
63401: EMPTY
63402: LIST
63403: LIST
63404: PUSH
63405: LD_INT 0
63407: PUSH
63408: LD_INT 2
63410: NEG
63411: PUSH
63412: EMPTY
63413: LIST
63414: LIST
63415: PUSH
63416: LD_INT 1
63418: PUSH
63419: LD_INT 1
63421: NEG
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: LIST
63431: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63432: LD_ADDR_VAR 0 60
63436: PUSH
63437: LD_INT 1
63439: PUSH
63440: LD_INT 1
63442: NEG
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: PUSH
63448: LD_INT 2
63450: PUSH
63451: LD_INT 0
63453: PUSH
63454: EMPTY
63455: LIST
63456: LIST
63457: PUSH
63458: LD_INT 2
63460: PUSH
63461: LD_INT 1
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: LIST
63472: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63473: LD_ADDR_VAR 0 61
63477: PUSH
63478: LD_INT 2
63480: PUSH
63481: LD_INT 1
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: LD_INT 2
63490: PUSH
63491: LD_INT 2
63493: PUSH
63494: EMPTY
63495: LIST
63496: LIST
63497: PUSH
63498: LD_INT 1
63500: PUSH
63501: LD_INT 2
63503: PUSH
63504: EMPTY
63505: LIST
63506: LIST
63507: PUSH
63508: EMPTY
63509: LIST
63510: LIST
63511: LIST
63512: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63513: LD_ADDR_VAR 0 62
63517: PUSH
63518: LD_INT 1
63520: PUSH
63521: LD_INT 2
63523: PUSH
63524: EMPTY
63525: LIST
63526: LIST
63527: PUSH
63528: LD_INT 0
63530: PUSH
63531: LD_INT 2
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: PUSH
63538: LD_INT 1
63540: NEG
63541: PUSH
63542: LD_INT 1
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: LIST
63553: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63554: LD_ADDR_VAR 0 63
63558: PUSH
63559: LD_INT 1
63561: NEG
63562: PUSH
63563: LD_INT 1
63565: PUSH
63566: EMPTY
63567: LIST
63568: LIST
63569: PUSH
63570: LD_INT 2
63572: NEG
63573: PUSH
63574: LD_INT 0
63576: PUSH
63577: EMPTY
63578: LIST
63579: LIST
63580: PUSH
63581: LD_INT 2
63583: NEG
63584: PUSH
63585: LD_INT 1
63587: NEG
63588: PUSH
63589: EMPTY
63590: LIST
63591: LIST
63592: PUSH
63593: EMPTY
63594: LIST
63595: LIST
63596: LIST
63597: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63598: LD_ADDR_VAR 0 64
63602: PUSH
63603: LD_INT 1
63605: NEG
63606: PUSH
63607: LD_INT 2
63609: NEG
63610: PUSH
63611: EMPTY
63612: LIST
63613: LIST
63614: PUSH
63615: LD_INT 2
63617: NEG
63618: PUSH
63619: LD_INT 1
63621: NEG
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: PUSH
63627: LD_INT 2
63629: NEG
63630: PUSH
63631: LD_INT 2
63633: NEG
63634: PUSH
63635: EMPTY
63636: LIST
63637: LIST
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: LIST
63643: ST_TO_ADDR
// end ; 2 :
63644: GO 66910
63646: LD_INT 2
63648: DOUBLE
63649: EQUAL
63650: IFTRUE 63654
63652: GO 66909
63654: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
63655: LD_ADDR_VAR 0 29
63659: PUSH
63660: LD_INT 4
63662: PUSH
63663: LD_INT 0
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: PUSH
63670: LD_INT 4
63672: PUSH
63673: LD_INT 1
63675: NEG
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: PUSH
63681: LD_INT 5
63683: PUSH
63684: LD_INT 0
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: PUSH
63691: LD_INT 5
63693: PUSH
63694: LD_INT 1
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: PUSH
63701: LD_INT 4
63703: PUSH
63704: LD_INT 1
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: PUSH
63711: LD_INT 3
63713: PUSH
63714: LD_INT 0
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: PUSH
63721: LD_INT 3
63723: PUSH
63724: LD_INT 1
63726: NEG
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: PUSH
63732: LD_INT 3
63734: PUSH
63735: LD_INT 2
63737: NEG
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: PUSH
63743: LD_INT 5
63745: PUSH
63746: LD_INT 2
63748: PUSH
63749: EMPTY
63750: LIST
63751: LIST
63752: PUSH
63753: LD_INT 3
63755: PUSH
63756: LD_INT 3
63758: PUSH
63759: EMPTY
63760: LIST
63761: LIST
63762: PUSH
63763: LD_INT 3
63765: PUSH
63766: LD_INT 2
63768: PUSH
63769: EMPTY
63770: LIST
63771: LIST
63772: PUSH
63773: LD_INT 4
63775: PUSH
63776: LD_INT 3
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: PUSH
63783: LD_INT 4
63785: PUSH
63786: LD_INT 4
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: PUSH
63793: LD_INT 3
63795: PUSH
63796: LD_INT 4
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: PUSH
63803: LD_INT 2
63805: PUSH
63806: LD_INT 3
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: LD_INT 2
63815: PUSH
63816: LD_INT 2
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: PUSH
63823: LD_INT 4
63825: PUSH
63826: LD_INT 2
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: PUSH
63833: LD_INT 2
63835: PUSH
63836: LD_INT 4
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: PUSH
63843: LD_INT 0
63845: PUSH
63846: LD_INT 4
63848: PUSH
63849: EMPTY
63850: LIST
63851: LIST
63852: PUSH
63853: LD_INT 0
63855: PUSH
63856: LD_INT 3
63858: PUSH
63859: EMPTY
63860: LIST
63861: LIST
63862: PUSH
63863: LD_INT 1
63865: PUSH
63866: LD_INT 4
63868: PUSH
63869: EMPTY
63870: LIST
63871: LIST
63872: PUSH
63873: LD_INT 1
63875: PUSH
63876: LD_INT 5
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: PUSH
63883: LD_INT 0
63885: PUSH
63886: LD_INT 5
63888: PUSH
63889: EMPTY
63890: LIST
63891: LIST
63892: PUSH
63893: LD_INT 1
63895: NEG
63896: PUSH
63897: LD_INT 4
63899: PUSH
63900: EMPTY
63901: LIST
63902: LIST
63903: PUSH
63904: LD_INT 1
63906: NEG
63907: PUSH
63908: LD_INT 3
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: PUSH
63915: LD_INT 2
63917: PUSH
63918: LD_INT 5
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: PUSH
63925: LD_INT 2
63927: NEG
63928: PUSH
63929: LD_INT 3
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: PUSH
63936: LD_INT 3
63938: NEG
63939: PUSH
63940: LD_INT 0
63942: PUSH
63943: EMPTY
63944: LIST
63945: LIST
63946: PUSH
63947: LD_INT 3
63949: NEG
63950: PUSH
63951: LD_INT 1
63953: NEG
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: PUSH
63959: LD_INT 2
63961: NEG
63962: PUSH
63963: LD_INT 0
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: PUSH
63970: LD_INT 2
63972: NEG
63973: PUSH
63974: LD_INT 1
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: PUSH
63981: LD_INT 3
63983: NEG
63984: PUSH
63985: LD_INT 1
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: PUSH
63992: LD_INT 4
63994: NEG
63995: PUSH
63996: LD_INT 0
63998: PUSH
63999: EMPTY
64000: LIST
64001: LIST
64002: PUSH
64003: LD_INT 4
64005: NEG
64006: PUSH
64007: LD_INT 1
64009: NEG
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: PUSH
64015: LD_INT 4
64017: NEG
64018: PUSH
64019: LD_INT 2
64021: NEG
64022: PUSH
64023: EMPTY
64024: LIST
64025: LIST
64026: PUSH
64027: LD_INT 2
64029: NEG
64030: PUSH
64031: LD_INT 2
64033: PUSH
64034: EMPTY
64035: LIST
64036: LIST
64037: PUSH
64038: LD_INT 4
64040: NEG
64041: PUSH
64042: LD_INT 4
64044: NEG
64045: PUSH
64046: EMPTY
64047: LIST
64048: LIST
64049: PUSH
64050: LD_INT 4
64052: NEG
64053: PUSH
64054: LD_INT 5
64056: NEG
64057: PUSH
64058: EMPTY
64059: LIST
64060: LIST
64061: PUSH
64062: LD_INT 3
64064: NEG
64065: PUSH
64066: LD_INT 4
64068: NEG
64069: PUSH
64070: EMPTY
64071: LIST
64072: LIST
64073: PUSH
64074: LD_INT 3
64076: NEG
64077: PUSH
64078: LD_INT 3
64080: NEG
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: PUSH
64086: LD_INT 4
64088: NEG
64089: PUSH
64090: LD_INT 3
64092: NEG
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: PUSH
64098: LD_INT 5
64100: NEG
64101: PUSH
64102: LD_INT 4
64104: NEG
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PUSH
64110: LD_INT 5
64112: NEG
64113: PUSH
64114: LD_INT 5
64116: NEG
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: PUSH
64122: LD_INT 3
64124: NEG
64125: PUSH
64126: LD_INT 5
64128: NEG
64129: PUSH
64130: EMPTY
64131: LIST
64132: LIST
64133: PUSH
64134: LD_INT 5
64136: NEG
64137: PUSH
64138: LD_INT 3
64140: NEG
64141: PUSH
64142: EMPTY
64143: LIST
64144: LIST
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: LIST
64150: LIST
64151: LIST
64152: LIST
64153: LIST
64154: LIST
64155: LIST
64156: LIST
64157: LIST
64158: LIST
64159: LIST
64160: LIST
64161: LIST
64162: LIST
64163: LIST
64164: LIST
64165: LIST
64166: LIST
64167: LIST
64168: LIST
64169: LIST
64170: LIST
64171: LIST
64172: LIST
64173: LIST
64174: LIST
64175: LIST
64176: LIST
64177: LIST
64178: LIST
64179: LIST
64180: LIST
64181: LIST
64182: LIST
64183: LIST
64184: LIST
64185: LIST
64186: LIST
64187: LIST
64188: LIST
64189: LIST
64190: LIST
64191: LIST
64192: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
64193: LD_ADDR_VAR 0 30
64197: PUSH
64198: LD_INT 4
64200: PUSH
64201: LD_INT 4
64203: PUSH
64204: EMPTY
64205: LIST
64206: LIST
64207: PUSH
64208: LD_INT 4
64210: PUSH
64211: LD_INT 3
64213: PUSH
64214: EMPTY
64215: LIST
64216: LIST
64217: PUSH
64218: LD_INT 5
64220: PUSH
64221: LD_INT 4
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: PUSH
64228: LD_INT 5
64230: PUSH
64231: LD_INT 5
64233: PUSH
64234: EMPTY
64235: LIST
64236: LIST
64237: PUSH
64238: LD_INT 4
64240: PUSH
64241: LD_INT 5
64243: PUSH
64244: EMPTY
64245: LIST
64246: LIST
64247: PUSH
64248: LD_INT 3
64250: PUSH
64251: LD_INT 4
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: PUSH
64258: LD_INT 3
64260: PUSH
64261: LD_INT 3
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PUSH
64268: LD_INT 5
64270: PUSH
64271: LD_INT 3
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: PUSH
64278: LD_INT 3
64280: PUSH
64281: LD_INT 5
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: PUSH
64288: LD_INT 0
64290: PUSH
64291: LD_INT 3
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: PUSH
64298: LD_INT 0
64300: PUSH
64301: LD_INT 2
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: PUSH
64308: LD_INT 1
64310: PUSH
64311: LD_INT 3
64313: PUSH
64314: EMPTY
64315: LIST
64316: LIST
64317: PUSH
64318: LD_INT 1
64320: PUSH
64321: LD_INT 4
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: PUSH
64328: LD_INT 0
64330: PUSH
64331: LD_INT 4
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: PUSH
64338: LD_INT 1
64340: NEG
64341: PUSH
64342: LD_INT 3
64344: PUSH
64345: EMPTY
64346: LIST
64347: LIST
64348: PUSH
64349: LD_INT 1
64351: NEG
64352: PUSH
64353: LD_INT 2
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: LD_INT 2
64362: PUSH
64363: LD_INT 4
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PUSH
64370: LD_INT 2
64372: NEG
64373: PUSH
64374: LD_INT 2
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: PUSH
64381: LD_INT 4
64383: NEG
64384: PUSH
64385: LD_INT 0
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: PUSH
64392: LD_INT 4
64394: NEG
64395: PUSH
64396: LD_INT 1
64398: NEG
64399: PUSH
64400: EMPTY
64401: LIST
64402: LIST
64403: PUSH
64404: LD_INT 3
64406: NEG
64407: PUSH
64408: LD_INT 0
64410: PUSH
64411: EMPTY
64412: LIST
64413: LIST
64414: PUSH
64415: LD_INT 3
64417: NEG
64418: PUSH
64419: LD_INT 1
64421: PUSH
64422: EMPTY
64423: LIST
64424: LIST
64425: PUSH
64426: LD_INT 4
64428: NEG
64429: PUSH
64430: LD_INT 1
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: PUSH
64437: LD_INT 5
64439: NEG
64440: PUSH
64441: LD_INT 0
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: PUSH
64448: LD_INT 5
64450: NEG
64451: PUSH
64452: LD_INT 1
64454: NEG
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: PUSH
64460: LD_INT 5
64462: NEG
64463: PUSH
64464: LD_INT 2
64466: NEG
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: PUSH
64472: LD_INT 3
64474: NEG
64475: PUSH
64476: LD_INT 2
64478: PUSH
64479: EMPTY
64480: LIST
64481: LIST
64482: PUSH
64483: LD_INT 3
64485: NEG
64486: PUSH
64487: LD_INT 3
64489: NEG
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: PUSH
64495: LD_INT 3
64497: NEG
64498: PUSH
64499: LD_INT 4
64501: NEG
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: PUSH
64507: LD_INT 2
64509: NEG
64510: PUSH
64511: LD_INT 3
64513: NEG
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: PUSH
64519: LD_INT 2
64521: NEG
64522: PUSH
64523: LD_INT 2
64525: NEG
64526: PUSH
64527: EMPTY
64528: LIST
64529: LIST
64530: PUSH
64531: LD_INT 3
64533: NEG
64534: PUSH
64535: LD_INT 2
64537: NEG
64538: PUSH
64539: EMPTY
64540: LIST
64541: LIST
64542: PUSH
64543: LD_INT 4
64545: NEG
64546: PUSH
64547: LD_INT 3
64549: NEG
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: PUSH
64555: LD_INT 4
64557: NEG
64558: PUSH
64559: LD_INT 4
64561: NEG
64562: PUSH
64563: EMPTY
64564: LIST
64565: LIST
64566: PUSH
64567: LD_INT 2
64569: NEG
64570: PUSH
64571: LD_INT 4
64573: NEG
64574: PUSH
64575: EMPTY
64576: LIST
64577: LIST
64578: PUSH
64579: LD_INT 4
64581: NEG
64582: PUSH
64583: LD_INT 2
64585: NEG
64586: PUSH
64587: EMPTY
64588: LIST
64589: LIST
64590: PUSH
64591: LD_INT 0
64593: PUSH
64594: LD_INT 4
64596: NEG
64597: PUSH
64598: EMPTY
64599: LIST
64600: LIST
64601: PUSH
64602: LD_INT 0
64604: PUSH
64605: LD_INT 5
64607: NEG
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: PUSH
64613: LD_INT 1
64615: PUSH
64616: LD_INT 4
64618: NEG
64619: PUSH
64620: EMPTY
64621: LIST
64622: LIST
64623: PUSH
64624: LD_INT 1
64626: PUSH
64627: LD_INT 3
64629: NEG
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PUSH
64635: LD_INT 0
64637: PUSH
64638: LD_INT 3
64640: NEG
64641: PUSH
64642: EMPTY
64643: LIST
64644: LIST
64645: PUSH
64646: LD_INT 1
64648: NEG
64649: PUSH
64650: LD_INT 4
64652: NEG
64653: PUSH
64654: EMPTY
64655: LIST
64656: LIST
64657: PUSH
64658: LD_INT 1
64660: NEG
64661: PUSH
64662: LD_INT 5
64664: NEG
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: PUSH
64670: LD_INT 2
64672: PUSH
64673: LD_INT 3
64675: NEG
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: PUSH
64681: LD_INT 2
64683: NEG
64684: PUSH
64685: LD_INT 5
64687: NEG
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: PUSH
64693: EMPTY
64694: LIST
64695: LIST
64696: LIST
64697: LIST
64698: LIST
64699: LIST
64700: LIST
64701: LIST
64702: LIST
64703: LIST
64704: LIST
64705: LIST
64706: LIST
64707: LIST
64708: LIST
64709: LIST
64710: LIST
64711: LIST
64712: LIST
64713: LIST
64714: LIST
64715: LIST
64716: LIST
64717: LIST
64718: LIST
64719: LIST
64720: LIST
64721: LIST
64722: LIST
64723: LIST
64724: LIST
64725: LIST
64726: LIST
64727: LIST
64728: LIST
64729: LIST
64730: LIST
64731: LIST
64732: LIST
64733: LIST
64734: LIST
64735: LIST
64736: LIST
64737: LIST
64738: LIST
64739: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
64740: LD_ADDR_VAR 0 31
64744: PUSH
64745: LD_INT 0
64747: PUSH
64748: LD_INT 4
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: PUSH
64755: LD_INT 0
64757: PUSH
64758: LD_INT 3
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: PUSH
64765: LD_INT 1
64767: PUSH
64768: LD_INT 4
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: PUSH
64775: LD_INT 1
64777: PUSH
64778: LD_INT 5
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: PUSH
64785: LD_INT 0
64787: PUSH
64788: LD_INT 5
64790: PUSH
64791: EMPTY
64792: LIST
64793: LIST
64794: PUSH
64795: LD_INT 1
64797: NEG
64798: PUSH
64799: LD_INT 4
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: PUSH
64806: LD_INT 1
64808: NEG
64809: PUSH
64810: LD_INT 3
64812: PUSH
64813: EMPTY
64814: LIST
64815: LIST
64816: PUSH
64817: LD_INT 2
64819: PUSH
64820: LD_INT 5
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: PUSH
64827: LD_INT 2
64829: NEG
64830: PUSH
64831: LD_INT 3
64833: PUSH
64834: EMPTY
64835: LIST
64836: LIST
64837: PUSH
64838: LD_INT 3
64840: NEG
64841: PUSH
64842: LD_INT 0
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: PUSH
64849: LD_INT 3
64851: NEG
64852: PUSH
64853: LD_INT 1
64855: NEG
64856: PUSH
64857: EMPTY
64858: LIST
64859: LIST
64860: PUSH
64861: LD_INT 2
64863: NEG
64864: PUSH
64865: LD_INT 0
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: PUSH
64872: LD_INT 2
64874: NEG
64875: PUSH
64876: LD_INT 1
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: PUSH
64883: LD_INT 3
64885: NEG
64886: PUSH
64887: LD_INT 1
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: PUSH
64894: LD_INT 4
64896: NEG
64897: PUSH
64898: LD_INT 0
64900: PUSH
64901: EMPTY
64902: LIST
64903: LIST
64904: PUSH
64905: LD_INT 4
64907: NEG
64908: PUSH
64909: LD_INT 1
64911: NEG
64912: PUSH
64913: EMPTY
64914: LIST
64915: LIST
64916: PUSH
64917: LD_INT 4
64919: NEG
64920: PUSH
64921: LD_INT 2
64923: NEG
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: PUSH
64929: LD_INT 2
64931: NEG
64932: PUSH
64933: LD_INT 2
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: PUSH
64940: LD_INT 4
64942: NEG
64943: PUSH
64944: LD_INT 4
64946: NEG
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: PUSH
64952: LD_INT 4
64954: NEG
64955: PUSH
64956: LD_INT 5
64958: NEG
64959: PUSH
64960: EMPTY
64961: LIST
64962: LIST
64963: PUSH
64964: LD_INT 3
64966: NEG
64967: PUSH
64968: LD_INT 4
64970: NEG
64971: PUSH
64972: EMPTY
64973: LIST
64974: LIST
64975: PUSH
64976: LD_INT 3
64978: NEG
64979: PUSH
64980: LD_INT 3
64982: NEG
64983: PUSH
64984: EMPTY
64985: LIST
64986: LIST
64987: PUSH
64988: LD_INT 4
64990: NEG
64991: PUSH
64992: LD_INT 3
64994: NEG
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: PUSH
65000: LD_INT 5
65002: NEG
65003: PUSH
65004: LD_INT 4
65006: NEG
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: PUSH
65012: LD_INT 5
65014: NEG
65015: PUSH
65016: LD_INT 5
65018: NEG
65019: PUSH
65020: EMPTY
65021: LIST
65022: LIST
65023: PUSH
65024: LD_INT 3
65026: NEG
65027: PUSH
65028: LD_INT 5
65030: NEG
65031: PUSH
65032: EMPTY
65033: LIST
65034: LIST
65035: PUSH
65036: LD_INT 5
65038: NEG
65039: PUSH
65040: LD_INT 3
65042: NEG
65043: PUSH
65044: EMPTY
65045: LIST
65046: LIST
65047: PUSH
65048: LD_INT 0
65050: PUSH
65051: LD_INT 3
65053: NEG
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PUSH
65059: LD_INT 0
65061: PUSH
65062: LD_INT 4
65064: NEG
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: PUSH
65070: LD_INT 1
65072: PUSH
65073: LD_INT 3
65075: NEG
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: PUSH
65081: LD_INT 1
65083: PUSH
65084: LD_INT 2
65086: NEG
65087: PUSH
65088: EMPTY
65089: LIST
65090: LIST
65091: PUSH
65092: LD_INT 0
65094: PUSH
65095: LD_INT 2
65097: NEG
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: PUSH
65103: LD_INT 1
65105: NEG
65106: PUSH
65107: LD_INT 3
65109: NEG
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: PUSH
65115: LD_INT 1
65117: NEG
65118: PUSH
65119: LD_INT 4
65121: NEG
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: PUSH
65127: LD_INT 2
65129: PUSH
65130: LD_INT 2
65132: NEG
65133: PUSH
65134: EMPTY
65135: LIST
65136: LIST
65137: PUSH
65138: LD_INT 2
65140: NEG
65141: PUSH
65142: LD_INT 4
65144: NEG
65145: PUSH
65146: EMPTY
65147: LIST
65148: LIST
65149: PUSH
65150: LD_INT 4
65152: PUSH
65153: LD_INT 0
65155: PUSH
65156: EMPTY
65157: LIST
65158: LIST
65159: PUSH
65160: LD_INT 4
65162: PUSH
65163: LD_INT 1
65165: NEG
65166: PUSH
65167: EMPTY
65168: LIST
65169: LIST
65170: PUSH
65171: LD_INT 5
65173: PUSH
65174: LD_INT 0
65176: PUSH
65177: EMPTY
65178: LIST
65179: LIST
65180: PUSH
65181: LD_INT 5
65183: PUSH
65184: LD_INT 1
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: PUSH
65191: LD_INT 4
65193: PUSH
65194: LD_INT 1
65196: PUSH
65197: EMPTY
65198: LIST
65199: LIST
65200: PUSH
65201: LD_INT 3
65203: PUSH
65204: LD_INT 0
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: PUSH
65211: LD_INT 3
65213: PUSH
65214: LD_INT 1
65216: NEG
65217: PUSH
65218: EMPTY
65219: LIST
65220: LIST
65221: PUSH
65222: LD_INT 3
65224: PUSH
65225: LD_INT 2
65227: NEG
65228: PUSH
65229: EMPTY
65230: LIST
65231: LIST
65232: PUSH
65233: LD_INT 5
65235: PUSH
65236: LD_INT 2
65238: PUSH
65239: EMPTY
65240: LIST
65241: LIST
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: LIST
65247: LIST
65248: LIST
65249: LIST
65250: LIST
65251: LIST
65252: LIST
65253: LIST
65254: LIST
65255: LIST
65256: LIST
65257: LIST
65258: LIST
65259: LIST
65260: LIST
65261: LIST
65262: LIST
65263: LIST
65264: LIST
65265: LIST
65266: LIST
65267: LIST
65268: LIST
65269: LIST
65270: LIST
65271: LIST
65272: LIST
65273: LIST
65274: LIST
65275: LIST
65276: LIST
65277: LIST
65278: LIST
65279: LIST
65280: LIST
65281: LIST
65282: LIST
65283: LIST
65284: LIST
65285: LIST
65286: LIST
65287: LIST
65288: LIST
65289: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
65290: LD_ADDR_VAR 0 32
65294: PUSH
65295: LD_INT 4
65297: NEG
65298: PUSH
65299: LD_INT 0
65301: PUSH
65302: EMPTY
65303: LIST
65304: LIST
65305: PUSH
65306: LD_INT 4
65308: NEG
65309: PUSH
65310: LD_INT 1
65312: NEG
65313: PUSH
65314: EMPTY
65315: LIST
65316: LIST
65317: PUSH
65318: LD_INT 3
65320: NEG
65321: PUSH
65322: LD_INT 0
65324: PUSH
65325: EMPTY
65326: LIST
65327: LIST
65328: PUSH
65329: LD_INT 3
65331: NEG
65332: PUSH
65333: LD_INT 1
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: PUSH
65340: LD_INT 4
65342: NEG
65343: PUSH
65344: LD_INT 1
65346: PUSH
65347: EMPTY
65348: LIST
65349: LIST
65350: PUSH
65351: LD_INT 5
65353: NEG
65354: PUSH
65355: LD_INT 0
65357: PUSH
65358: EMPTY
65359: LIST
65360: LIST
65361: PUSH
65362: LD_INT 5
65364: NEG
65365: PUSH
65366: LD_INT 1
65368: NEG
65369: PUSH
65370: EMPTY
65371: LIST
65372: LIST
65373: PUSH
65374: LD_INT 5
65376: NEG
65377: PUSH
65378: LD_INT 2
65380: NEG
65381: PUSH
65382: EMPTY
65383: LIST
65384: LIST
65385: PUSH
65386: LD_INT 3
65388: NEG
65389: PUSH
65390: LD_INT 2
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: PUSH
65397: LD_INT 3
65399: NEG
65400: PUSH
65401: LD_INT 3
65403: NEG
65404: PUSH
65405: EMPTY
65406: LIST
65407: LIST
65408: PUSH
65409: LD_INT 3
65411: NEG
65412: PUSH
65413: LD_INT 4
65415: NEG
65416: PUSH
65417: EMPTY
65418: LIST
65419: LIST
65420: PUSH
65421: LD_INT 2
65423: NEG
65424: PUSH
65425: LD_INT 3
65427: NEG
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: PUSH
65433: LD_INT 2
65435: NEG
65436: PUSH
65437: LD_INT 2
65439: NEG
65440: PUSH
65441: EMPTY
65442: LIST
65443: LIST
65444: PUSH
65445: LD_INT 3
65447: NEG
65448: PUSH
65449: LD_INT 2
65451: NEG
65452: PUSH
65453: EMPTY
65454: LIST
65455: LIST
65456: PUSH
65457: LD_INT 4
65459: NEG
65460: PUSH
65461: LD_INT 3
65463: NEG
65464: PUSH
65465: EMPTY
65466: LIST
65467: LIST
65468: PUSH
65469: LD_INT 4
65471: NEG
65472: PUSH
65473: LD_INT 4
65475: NEG
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: PUSH
65481: LD_INT 2
65483: NEG
65484: PUSH
65485: LD_INT 4
65487: NEG
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: PUSH
65493: LD_INT 4
65495: NEG
65496: PUSH
65497: LD_INT 2
65499: NEG
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: PUSH
65505: LD_INT 0
65507: PUSH
65508: LD_INT 4
65510: NEG
65511: PUSH
65512: EMPTY
65513: LIST
65514: LIST
65515: PUSH
65516: LD_INT 0
65518: PUSH
65519: LD_INT 5
65521: NEG
65522: PUSH
65523: EMPTY
65524: LIST
65525: LIST
65526: PUSH
65527: LD_INT 1
65529: PUSH
65530: LD_INT 4
65532: NEG
65533: PUSH
65534: EMPTY
65535: LIST
65536: LIST
65537: PUSH
65538: LD_INT 1
65540: PUSH
65541: LD_INT 3
65543: NEG
65544: PUSH
65545: EMPTY
65546: LIST
65547: LIST
65548: PUSH
65549: LD_INT 0
65551: PUSH
65552: LD_INT 3
65554: NEG
65555: PUSH
65556: EMPTY
65557: LIST
65558: LIST
65559: PUSH
65560: LD_INT 1
65562: NEG
65563: PUSH
65564: LD_INT 4
65566: NEG
65567: PUSH
65568: EMPTY
65569: LIST
65570: LIST
65571: PUSH
65572: LD_INT 1
65574: NEG
65575: PUSH
65576: LD_INT 5
65578: NEG
65579: PUSH
65580: EMPTY
65581: LIST
65582: LIST
65583: PUSH
65584: LD_INT 2
65586: PUSH
65587: LD_INT 3
65589: NEG
65590: PUSH
65591: EMPTY
65592: LIST
65593: LIST
65594: PUSH
65595: LD_INT 2
65597: NEG
65598: PUSH
65599: LD_INT 5
65601: NEG
65602: PUSH
65603: EMPTY
65604: LIST
65605: LIST
65606: PUSH
65607: LD_INT 3
65609: PUSH
65610: LD_INT 0
65612: PUSH
65613: EMPTY
65614: LIST
65615: LIST
65616: PUSH
65617: LD_INT 3
65619: PUSH
65620: LD_INT 1
65622: NEG
65623: PUSH
65624: EMPTY
65625: LIST
65626: LIST
65627: PUSH
65628: LD_INT 4
65630: PUSH
65631: LD_INT 0
65633: PUSH
65634: EMPTY
65635: LIST
65636: LIST
65637: PUSH
65638: LD_INT 4
65640: PUSH
65641: LD_INT 1
65643: PUSH
65644: EMPTY
65645: LIST
65646: LIST
65647: PUSH
65648: LD_INT 3
65650: PUSH
65651: LD_INT 1
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: PUSH
65658: LD_INT 2
65660: PUSH
65661: LD_INT 0
65663: PUSH
65664: EMPTY
65665: LIST
65666: LIST
65667: PUSH
65668: LD_INT 2
65670: PUSH
65671: LD_INT 1
65673: NEG
65674: PUSH
65675: EMPTY
65676: LIST
65677: LIST
65678: PUSH
65679: LD_INT 2
65681: PUSH
65682: LD_INT 2
65684: NEG
65685: PUSH
65686: EMPTY
65687: LIST
65688: LIST
65689: PUSH
65690: LD_INT 4
65692: PUSH
65693: LD_INT 2
65695: PUSH
65696: EMPTY
65697: LIST
65698: LIST
65699: PUSH
65700: LD_INT 4
65702: PUSH
65703: LD_INT 4
65705: PUSH
65706: EMPTY
65707: LIST
65708: LIST
65709: PUSH
65710: LD_INT 4
65712: PUSH
65713: LD_INT 3
65715: PUSH
65716: EMPTY
65717: LIST
65718: LIST
65719: PUSH
65720: LD_INT 5
65722: PUSH
65723: LD_INT 4
65725: PUSH
65726: EMPTY
65727: LIST
65728: LIST
65729: PUSH
65730: LD_INT 5
65732: PUSH
65733: LD_INT 5
65735: PUSH
65736: EMPTY
65737: LIST
65738: LIST
65739: PUSH
65740: LD_INT 4
65742: PUSH
65743: LD_INT 5
65745: PUSH
65746: EMPTY
65747: LIST
65748: LIST
65749: PUSH
65750: LD_INT 3
65752: PUSH
65753: LD_INT 4
65755: PUSH
65756: EMPTY
65757: LIST
65758: LIST
65759: PUSH
65760: LD_INT 3
65762: PUSH
65763: LD_INT 3
65765: PUSH
65766: EMPTY
65767: LIST
65768: LIST
65769: PUSH
65770: LD_INT 5
65772: PUSH
65773: LD_INT 3
65775: PUSH
65776: EMPTY
65777: LIST
65778: LIST
65779: PUSH
65780: LD_INT 3
65782: PUSH
65783: LD_INT 5
65785: PUSH
65786: EMPTY
65787: LIST
65788: LIST
65789: PUSH
65790: EMPTY
65791: LIST
65792: LIST
65793: LIST
65794: LIST
65795: LIST
65796: LIST
65797: LIST
65798: LIST
65799: LIST
65800: LIST
65801: LIST
65802: LIST
65803: LIST
65804: LIST
65805: LIST
65806: LIST
65807: LIST
65808: LIST
65809: LIST
65810: LIST
65811: LIST
65812: LIST
65813: LIST
65814: LIST
65815: LIST
65816: LIST
65817: LIST
65818: LIST
65819: LIST
65820: LIST
65821: LIST
65822: LIST
65823: LIST
65824: LIST
65825: LIST
65826: LIST
65827: LIST
65828: LIST
65829: LIST
65830: LIST
65831: LIST
65832: LIST
65833: LIST
65834: LIST
65835: LIST
65836: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
65837: LD_ADDR_VAR 0 33
65841: PUSH
65842: LD_INT 4
65844: NEG
65845: PUSH
65846: LD_INT 4
65848: NEG
65849: PUSH
65850: EMPTY
65851: LIST
65852: LIST
65853: PUSH
65854: LD_INT 4
65856: NEG
65857: PUSH
65858: LD_INT 5
65860: NEG
65861: PUSH
65862: EMPTY
65863: LIST
65864: LIST
65865: PUSH
65866: LD_INT 3
65868: NEG
65869: PUSH
65870: LD_INT 4
65872: NEG
65873: PUSH
65874: EMPTY
65875: LIST
65876: LIST
65877: PUSH
65878: LD_INT 3
65880: NEG
65881: PUSH
65882: LD_INT 3
65884: NEG
65885: PUSH
65886: EMPTY
65887: LIST
65888: LIST
65889: PUSH
65890: LD_INT 4
65892: NEG
65893: PUSH
65894: LD_INT 3
65896: NEG
65897: PUSH
65898: EMPTY
65899: LIST
65900: LIST
65901: PUSH
65902: LD_INT 5
65904: NEG
65905: PUSH
65906: LD_INT 4
65908: NEG
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: PUSH
65914: LD_INT 5
65916: NEG
65917: PUSH
65918: LD_INT 5
65920: NEG
65921: PUSH
65922: EMPTY
65923: LIST
65924: LIST
65925: PUSH
65926: LD_INT 3
65928: NEG
65929: PUSH
65930: LD_INT 5
65932: NEG
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: PUSH
65938: LD_INT 5
65940: NEG
65941: PUSH
65942: LD_INT 3
65944: NEG
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: PUSH
65950: LD_INT 0
65952: PUSH
65953: LD_INT 3
65955: NEG
65956: PUSH
65957: EMPTY
65958: LIST
65959: LIST
65960: PUSH
65961: LD_INT 0
65963: PUSH
65964: LD_INT 4
65966: NEG
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: PUSH
65972: LD_INT 1
65974: PUSH
65975: LD_INT 3
65977: NEG
65978: PUSH
65979: EMPTY
65980: LIST
65981: LIST
65982: PUSH
65983: LD_INT 1
65985: PUSH
65986: LD_INT 2
65988: NEG
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: PUSH
65994: LD_INT 0
65996: PUSH
65997: LD_INT 2
65999: NEG
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: PUSH
66005: LD_INT 1
66007: NEG
66008: PUSH
66009: LD_INT 3
66011: NEG
66012: PUSH
66013: EMPTY
66014: LIST
66015: LIST
66016: PUSH
66017: LD_INT 1
66019: NEG
66020: PUSH
66021: LD_INT 4
66023: NEG
66024: PUSH
66025: EMPTY
66026: LIST
66027: LIST
66028: PUSH
66029: LD_INT 2
66031: PUSH
66032: LD_INT 2
66034: NEG
66035: PUSH
66036: EMPTY
66037: LIST
66038: LIST
66039: PUSH
66040: LD_INT 2
66042: NEG
66043: PUSH
66044: LD_INT 4
66046: NEG
66047: PUSH
66048: EMPTY
66049: LIST
66050: LIST
66051: PUSH
66052: LD_INT 4
66054: PUSH
66055: LD_INT 0
66057: PUSH
66058: EMPTY
66059: LIST
66060: LIST
66061: PUSH
66062: LD_INT 4
66064: PUSH
66065: LD_INT 1
66067: NEG
66068: PUSH
66069: EMPTY
66070: LIST
66071: LIST
66072: PUSH
66073: LD_INT 5
66075: PUSH
66076: LD_INT 0
66078: PUSH
66079: EMPTY
66080: LIST
66081: LIST
66082: PUSH
66083: LD_INT 5
66085: PUSH
66086: LD_INT 1
66088: PUSH
66089: EMPTY
66090: LIST
66091: LIST
66092: PUSH
66093: LD_INT 4
66095: PUSH
66096: LD_INT 1
66098: PUSH
66099: EMPTY
66100: LIST
66101: LIST
66102: PUSH
66103: LD_INT 3
66105: PUSH
66106: LD_INT 0
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: PUSH
66113: LD_INT 3
66115: PUSH
66116: LD_INT 1
66118: NEG
66119: PUSH
66120: EMPTY
66121: LIST
66122: LIST
66123: PUSH
66124: LD_INT 3
66126: PUSH
66127: LD_INT 2
66129: NEG
66130: PUSH
66131: EMPTY
66132: LIST
66133: LIST
66134: PUSH
66135: LD_INT 5
66137: PUSH
66138: LD_INT 2
66140: PUSH
66141: EMPTY
66142: LIST
66143: LIST
66144: PUSH
66145: LD_INT 3
66147: PUSH
66148: LD_INT 3
66150: PUSH
66151: EMPTY
66152: LIST
66153: LIST
66154: PUSH
66155: LD_INT 3
66157: PUSH
66158: LD_INT 2
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: PUSH
66165: LD_INT 4
66167: PUSH
66168: LD_INT 3
66170: PUSH
66171: EMPTY
66172: LIST
66173: LIST
66174: PUSH
66175: LD_INT 4
66177: PUSH
66178: LD_INT 4
66180: PUSH
66181: EMPTY
66182: LIST
66183: LIST
66184: PUSH
66185: LD_INT 3
66187: PUSH
66188: LD_INT 4
66190: PUSH
66191: EMPTY
66192: LIST
66193: LIST
66194: PUSH
66195: LD_INT 2
66197: PUSH
66198: LD_INT 3
66200: PUSH
66201: EMPTY
66202: LIST
66203: LIST
66204: PUSH
66205: LD_INT 2
66207: PUSH
66208: LD_INT 2
66210: PUSH
66211: EMPTY
66212: LIST
66213: LIST
66214: PUSH
66215: LD_INT 4
66217: PUSH
66218: LD_INT 2
66220: PUSH
66221: EMPTY
66222: LIST
66223: LIST
66224: PUSH
66225: LD_INT 2
66227: PUSH
66228: LD_INT 4
66230: PUSH
66231: EMPTY
66232: LIST
66233: LIST
66234: PUSH
66235: LD_INT 0
66237: PUSH
66238: LD_INT 4
66240: PUSH
66241: EMPTY
66242: LIST
66243: LIST
66244: PUSH
66245: LD_INT 0
66247: PUSH
66248: LD_INT 3
66250: PUSH
66251: EMPTY
66252: LIST
66253: LIST
66254: PUSH
66255: LD_INT 1
66257: PUSH
66258: LD_INT 4
66260: PUSH
66261: EMPTY
66262: LIST
66263: LIST
66264: PUSH
66265: LD_INT 1
66267: PUSH
66268: LD_INT 5
66270: PUSH
66271: EMPTY
66272: LIST
66273: LIST
66274: PUSH
66275: LD_INT 0
66277: PUSH
66278: LD_INT 5
66280: PUSH
66281: EMPTY
66282: LIST
66283: LIST
66284: PUSH
66285: LD_INT 1
66287: NEG
66288: PUSH
66289: LD_INT 4
66291: PUSH
66292: EMPTY
66293: LIST
66294: LIST
66295: PUSH
66296: LD_INT 1
66298: NEG
66299: PUSH
66300: LD_INT 3
66302: PUSH
66303: EMPTY
66304: LIST
66305: LIST
66306: PUSH
66307: LD_INT 2
66309: PUSH
66310: LD_INT 5
66312: PUSH
66313: EMPTY
66314: LIST
66315: LIST
66316: PUSH
66317: LD_INT 2
66319: NEG
66320: PUSH
66321: LD_INT 3
66323: PUSH
66324: EMPTY
66325: LIST
66326: LIST
66327: PUSH
66328: EMPTY
66329: LIST
66330: LIST
66331: LIST
66332: LIST
66333: LIST
66334: LIST
66335: LIST
66336: LIST
66337: LIST
66338: LIST
66339: LIST
66340: LIST
66341: LIST
66342: LIST
66343: LIST
66344: LIST
66345: LIST
66346: LIST
66347: LIST
66348: LIST
66349: LIST
66350: LIST
66351: LIST
66352: LIST
66353: LIST
66354: LIST
66355: LIST
66356: LIST
66357: LIST
66358: LIST
66359: LIST
66360: LIST
66361: LIST
66362: LIST
66363: LIST
66364: LIST
66365: LIST
66366: LIST
66367: LIST
66368: LIST
66369: LIST
66370: LIST
66371: LIST
66372: LIST
66373: LIST
66374: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
66375: LD_ADDR_VAR 0 34
66379: PUSH
66380: LD_INT 0
66382: PUSH
66383: LD_INT 4
66385: NEG
66386: PUSH
66387: EMPTY
66388: LIST
66389: LIST
66390: PUSH
66391: LD_INT 0
66393: PUSH
66394: LD_INT 5
66396: NEG
66397: PUSH
66398: EMPTY
66399: LIST
66400: LIST
66401: PUSH
66402: LD_INT 1
66404: PUSH
66405: LD_INT 4
66407: NEG
66408: PUSH
66409: EMPTY
66410: LIST
66411: LIST
66412: PUSH
66413: LD_INT 1
66415: PUSH
66416: LD_INT 3
66418: NEG
66419: PUSH
66420: EMPTY
66421: LIST
66422: LIST
66423: PUSH
66424: LD_INT 0
66426: PUSH
66427: LD_INT 3
66429: NEG
66430: PUSH
66431: EMPTY
66432: LIST
66433: LIST
66434: PUSH
66435: LD_INT 1
66437: NEG
66438: PUSH
66439: LD_INT 4
66441: NEG
66442: PUSH
66443: EMPTY
66444: LIST
66445: LIST
66446: PUSH
66447: LD_INT 1
66449: NEG
66450: PUSH
66451: LD_INT 5
66453: NEG
66454: PUSH
66455: EMPTY
66456: LIST
66457: LIST
66458: PUSH
66459: LD_INT 2
66461: PUSH
66462: LD_INT 3
66464: NEG
66465: PUSH
66466: EMPTY
66467: LIST
66468: LIST
66469: PUSH
66470: LD_INT 2
66472: NEG
66473: PUSH
66474: LD_INT 5
66476: NEG
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: PUSH
66482: LD_INT 3
66484: PUSH
66485: LD_INT 0
66487: PUSH
66488: EMPTY
66489: LIST
66490: LIST
66491: PUSH
66492: LD_INT 3
66494: PUSH
66495: LD_INT 1
66497: NEG
66498: PUSH
66499: EMPTY
66500: LIST
66501: LIST
66502: PUSH
66503: LD_INT 4
66505: PUSH
66506: LD_INT 0
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: PUSH
66513: LD_INT 4
66515: PUSH
66516: LD_INT 1
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PUSH
66523: LD_INT 3
66525: PUSH
66526: LD_INT 1
66528: PUSH
66529: EMPTY
66530: LIST
66531: LIST
66532: PUSH
66533: LD_INT 2
66535: PUSH
66536: LD_INT 0
66538: PUSH
66539: EMPTY
66540: LIST
66541: LIST
66542: PUSH
66543: LD_INT 2
66545: PUSH
66546: LD_INT 1
66548: NEG
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: PUSH
66554: LD_INT 2
66556: PUSH
66557: LD_INT 2
66559: NEG
66560: PUSH
66561: EMPTY
66562: LIST
66563: LIST
66564: PUSH
66565: LD_INT 4
66567: PUSH
66568: LD_INT 2
66570: PUSH
66571: EMPTY
66572: LIST
66573: LIST
66574: PUSH
66575: LD_INT 4
66577: PUSH
66578: LD_INT 4
66580: PUSH
66581: EMPTY
66582: LIST
66583: LIST
66584: PUSH
66585: LD_INT 4
66587: PUSH
66588: LD_INT 3
66590: PUSH
66591: EMPTY
66592: LIST
66593: LIST
66594: PUSH
66595: LD_INT 5
66597: PUSH
66598: LD_INT 4
66600: PUSH
66601: EMPTY
66602: LIST
66603: LIST
66604: PUSH
66605: LD_INT 5
66607: PUSH
66608: LD_INT 5
66610: PUSH
66611: EMPTY
66612: LIST
66613: LIST
66614: PUSH
66615: LD_INT 4
66617: PUSH
66618: LD_INT 5
66620: PUSH
66621: EMPTY
66622: LIST
66623: LIST
66624: PUSH
66625: LD_INT 3
66627: PUSH
66628: LD_INT 4
66630: PUSH
66631: EMPTY
66632: LIST
66633: LIST
66634: PUSH
66635: LD_INT 3
66637: PUSH
66638: LD_INT 3
66640: PUSH
66641: EMPTY
66642: LIST
66643: LIST
66644: PUSH
66645: LD_INT 5
66647: PUSH
66648: LD_INT 3
66650: PUSH
66651: EMPTY
66652: LIST
66653: LIST
66654: PUSH
66655: LD_INT 3
66657: PUSH
66658: LD_INT 5
66660: PUSH
66661: EMPTY
66662: LIST
66663: LIST
66664: PUSH
66665: LD_INT 0
66667: PUSH
66668: LD_INT 3
66670: PUSH
66671: EMPTY
66672: LIST
66673: LIST
66674: PUSH
66675: LD_INT 0
66677: PUSH
66678: LD_INT 2
66680: PUSH
66681: EMPTY
66682: LIST
66683: LIST
66684: PUSH
66685: LD_INT 1
66687: PUSH
66688: LD_INT 3
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: PUSH
66695: LD_INT 1
66697: PUSH
66698: LD_INT 4
66700: PUSH
66701: EMPTY
66702: LIST
66703: LIST
66704: PUSH
66705: LD_INT 0
66707: PUSH
66708: LD_INT 4
66710: PUSH
66711: EMPTY
66712: LIST
66713: LIST
66714: PUSH
66715: LD_INT 1
66717: NEG
66718: PUSH
66719: LD_INT 3
66721: PUSH
66722: EMPTY
66723: LIST
66724: LIST
66725: PUSH
66726: LD_INT 1
66728: NEG
66729: PUSH
66730: LD_INT 2
66732: PUSH
66733: EMPTY
66734: LIST
66735: LIST
66736: PUSH
66737: LD_INT 2
66739: PUSH
66740: LD_INT 4
66742: PUSH
66743: EMPTY
66744: LIST
66745: LIST
66746: PUSH
66747: LD_INT 2
66749: NEG
66750: PUSH
66751: LD_INT 2
66753: PUSH
66754: EMPTY
66755: LIST
66756: LIST
66757: PUSH
66758: LD_INT 4
66760: NEG
66761: PUSH
66762: LD_INT 0
66764: PUSH
66765: EMPTY
66766: LIST
66767: LIST
66768: PUSH
66769: LD_INT 4
66771: NEG
66772: PUSH
66773: LD_INT 1
66775: NEG
66776: PUSH
66777: EMPTY
66778: LIST
66779: LIST
66780: PUSH
66781: LD_INT 3
66783: NEG
66784: PUSH
66785: LD_INT 0
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: PUSH
66792: LD_INT 3
66794: NEG
66795: PUSH
66796: LD_INT 1
66798: PUSH
66799: EMPTY
66800: LIST
66801: LIST
66802: PUSH
66803: LD_INT 4
66805: NEG
66806: PUSH
66807: LD_INT 1
66809: PUSH
66810: EMPTY
66811: LIST
66812: LIST
66813: PUSH
66814: LD_INT 5
66816: NEG
66817: PUSH
66818: LD_INT 0
66820: PUSH
66821: EMPTY
66822: LIST
66823: LIST
66824: PUSH
66825: LD_INT 5
66827: NEG
66828: PUSH
66829: LD_INT 1
66831: NEG
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: PUSH
66837: LD_INT 5
66839: NEG
66840: PUSH
66841: LD_INT 2
66843: NEG
66844: PUSH
66845: EMPTY
66846: LIST
66847: LIST
66848: PUSH
66849: LD_INT 3
66851: NEG
66852: PUSH
66853: LD_INT 2
66855: PUSH
66856: EMPTY
66857: LIST
66858: LIST
66859: PUSH
66860: EMPTY
66861: LIST
66862: LIST
66863: LIST
66864: LIST
66865: LIST
66866: LIST
66867: LIST
66868: LIST
66869: LIST
66870: LIST
66871: LIST
66872: LIST
66873: LIST
66874: LIST
66875: LIST
66876: LIST
66877: LIST
66878: LIST
66879: LIST
66880: LIST
66881: LIST
66882: LIST
66883: LIST
66884: LIST
66885: LIST
66886: LIST
66887: LIST
66888: LIST
66889: LIST
66890: LIST
66891: LIST
66892: LIST
66893: LIST
66894: LIST
66895: LIST
66896: LIST
66897: LIST
66898: LIST
66899: LIST
66900: LIST
66901: LIST
66902: LIST
66903: LIST
66904: LIST
66905: LIST
66906: ST_TO_ADDR
// end ; end ;
66907: GO 66910
66909: POP
// case btype of b_depot , b_warehouse :
66910: LD_VAR 0 1
66914: PUSH
66915: LD_INT 0
66917: DOUBLE
66918: EQUAL
66919: IFTRUE 66929
66921: LD_INT 1
66923: DOUBLE
66924: EQUAL
66925: IFTRUE 66929
66927: GO 67130
66929: POP
// case nation of nation_american :
66930: LD_VAR 0 5
66934: PUSH
66935: LD_INT 1
66937: DOUBLE
66938: EQUAL
66939: IFTRUE 66943
66941: GO 66999
66943: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
66944: LD_ADDR_VAR 0 9
66948: PUSH
66949: LD_VAR 0 11
66953: PUSH
66954: LD_VAR 0 12
66958: PUSH
66959: LD_VAR 0 13
66963: PUSH
66964: LD_VAR 0 14
66968: PUSH
66969: LD_VAR 0 15
66973: PUSH
66974: LD_VAR 0 16
66978: PUSH
66979: EMPTY
66980: LIST
66981: LIST
66982: LIST
66983: LIST
66984: LIST
66985: LIST
66986: PUSH
66987: LD_VAR 0 4
66991: PUSH
66992: LD_INT 1
66994: PLUS
66995: ARRAY
66996: ST_TO_ADDR
66997: GO 67128
66999: LD_INT 2
67001: DOUBLE
67002: EQUAL
67003: IFTRUE 67007
67005: GO 67063
67007: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
67008: LD_ADDR_VAR 0 9
67012: PUSH
67013: LD_VAR 0 17
67017: PUSH
67018: LD_VAR 0 18
67022: PUSH
67023: LD_VAR 0 19
67027: PUSH
67028: LD_VAR 0 20
67032: PUSH
67033: LD_VAR 0 21
67037: PUSH
67038: LD_VAR 0 22
67042: PUSH
67043: EMPTY
67044: LIST
67045: LIST
67046: LIST
67047: LIST
67048: LIST
67049: LIST
67050: PUSH
67051: LD_VAR 0 4
67055: PUSH
67056: LD_INT 1
67058: PLUS
67059: ARRAY
67060: ST_TO_ADDR
67061: GO 67128
67063: LD_INT 3
67065: DOUBLE
67066: EQUAL
67067: IFTRUE 67071
67069: GO 67127
67071: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
67072: LD_ADDR_VAR 0 9
67076: PUSH
67077: LD_VAR 0 23
67081: PUSH
67082: LD_VAR 0 24
67086: PUSH
67087: LD_VAR 0 25
67091: PUSH
67092: LD_VAR 0 26
67096: PUSH
67097: LD_VAR 0 27
67101: PUSH
67102: LD_VAR 0 28
67106: PUSH
67107: EMPTY
67108: LIST
67109: LIST
67110: LIST
67111: LIST
67112: LIST
67113: LIST
67114: PUSH
67115: LD_VAR 0 4
67119: PUSH
67120: LD_INT 1
67122: PLUS
67123: ARRAY
67124: ST_TO_ADDR
67125: GO 67128
67127: POP
67128: GO 67683
67130: LD_INT 2
67132: DOUBLE
67133: EQUAL
67134: IFTRUE 67144
67136: LD_INT 3
67138: DOUBLE
67139: EQUAL
67140: IFTRUE 67144
67142: GO 67200
67144: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
67145: LD_ADDR_VAR 0 9
67149: PUSH
67150: LD_VAR 0 29
67154: PUSH
67155: LD_VAR 0 30
67159: PUSH
67160: LD_VAR 0 31
67164: PUSH
67165: LD_VAR 0 32
67169: PUSH
67170: LD_VAR 0 33
67174: PUSH
67175: LD_VAR 0 34
67179: PUSH
67180: EMPTY
67181: LIST
67182: LIST
67183: LIST
67184: LIST
67185: LIST
67186: LIST
67187: PUSH
67188: LD_VAR 0 4
67192: PUSH
67193: LD_INT 1
67195: PLUS
67196: ARRAY
67197: ST_TO_ADDR
67198: GO 67683
67200: LD_INT 16
67202: DOUBLE
67203: EQUAL
67204: IFTRUE 67262
67206: LD_INT 17
67208: DOUBLE
67209: EQUAL
67210: IFTRUE 67262
67212: LD_INT 18
67214: DOUBLE
67215: EQUAL
67216: IFTRUE 67262
67218: LD_INT 19
67220: DOUBLE
67221: EQUAL
67222: IFTRUE 67262
67224: LD_INT 22
67226: DOUBLE
67227: EQUAL
67228: IFTRUE 67262
67230: LD_INT 20
67232: DOUBLE
67233: EQUAL
67234: IFTRUE 67262
67236: LD_INT 21
67238: DOUBLE
67239: EQUAL
67240: IFTRUE 67262
67242: LD_INT 23
67244: DOUBLE
67245: EQUAL
67246: IFTRUE 67262
67248: LD_INT 24
67250: DOUBLE
67251: EQUAL
67252: IFTRUE 67262
67254: LD_INT 25
67256: DOUBLE
67257: EQUAL
67258: IFTRUE 67262
67260: GO 67318
67262: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
67263: LD_ADDR_VAR 0 9
67267: PUSH
67268: LD_VAR 0 35
67272: PUSH
67273: LD_VAR 0 36
67277: PUSH
67278: LD_VAR 0 37
67282: PUSH
67283: LD_VAR 0 38
67287: PUSH
67288: LD_VAR 0 39
67292: PUSH
67293: LD_VAR 0 40
67297: PUSH
67298: EMPTY
67299: LIST
67300: LIST
67301: LIST
67302: LIST
67303: LIST
67304: LIST
67305: PUSH
67306: LD_VAR 0 4
67310: PUSH
67311: LD_INT 1
67313: PLUS
67314: ARRAY
67315: ST_TO_ADDR
67316: GO 67683
67318: LD_INT 6
67320: DOUBLE
67321: EQUAL
67322: IFTRUE 67374
67324: LD_INT 7
67326: DOUBLE
67327: EQUAL
67328: IFTRUE 67374
67330: LD_INT 8
67332: DOUBLE
67333: EQUAL
67334: IFTRUE 67374
67336: LD_INT 13
67338: DOUBLE
67339: EQUAL
67340: IFTRUE 67374
67342: LD_INT 12
67344: DOUBLE
67345: EQUAL
67346: IFTRUE 67374
67348: LD_INT 15
67350: DOUBLE
67351: EQUAL
67352: IFTRUE 67374
67354: LD_INT 11
67356: DOUBLE
67357: EQUAL
67358: IFTRUE 67374
67360: LD_INT 14
67362: DOUBLE
67363: EQUAL
67364: IFTRUE 67374
67366: LD_INT 10
67368: DOUBLE
67369: EQUAL
67370: IFTRUE 67374
67372: GO 67430
67374: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
67375: LD_ADDR_VAR 0 9
67379: PUSH
67380: LD_VAR 0 41
67384: PUSH
67385: LD_VAR 0 42
67389: PUSH
67390: LD_VAR 0 43
67394: PUSH
67395: LD_VAR 0 44
67399: PUSH
67400: LD_VAR 0 45
67404: PUSH
67405: LD_VAR 0 46
67409: PUSH
67410: EMPTY
67411: LIST
67412: LIST
67413: LIST
67414: LIST
67415: LIST
67416: LIST
67417: PUSH
67418: LD_VAR 0 4
67422: PUSH
67423: LD_INT 1
67425: PLUS
67426: ARRAY
67427: ST_TO_ADDR
67428: GO 67683
67430: LD_INT 36
67432: DOUBLE
67433: EQUAL
67434: IFTRUE 67438
67436: GO 67494
67438: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
67439: LD_ADDR_VAR 0 9
67443: PUSH
67444: LD_VAR 0 47
67448: PUSH
67449: LD_VAR 0 48
67453: PUSH
67454: LD_VAR 0 49
67458: PUSH
67459: LD_VAR 0 50
67463: PUSH
67464: LD_VAR 0 51
67468: PUSH
67469: LD_VAR 0 52
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: LIST
67478: LIST
67479: LIST
67480: LIST
67481: PUSH
67482: LD_VAR 0 4
67486: PUSH
67487: LD_INT 1
67489: PLUS
67490: ARRAY
67491: ST_TO_ADDR
67492: GO 67683
67494: LD_INT 4
67496: DOUBLE
67497: EQUAL
67498: IFTRUE 67520
67500: LD_INT 5
67502: DOUBLE
67503: EQUAL
67504: IFTRUE 67520
67506: LD_INT 34
67508: DOUBLE
67509: EQUAL
67510: IFTRUE 67520
67512: LD_INT 37
67514: DOUBLE
67515: EQUAL
67516: IFTRUE 67520
67518: GO 67576
67520: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
67521: LD_ADDR_VAR 0 9
67525: PUSH
67526: LD_VAR 0 53
67530: PUSH
67531: LD_VAR 0 54
67535: PUSH
67536: LD_VAR 0 55
67540: PUSH
67541: LD_VAR 0 56
67545: PUSH
67546: LD_VAR 0 57
67550: PUSH
67551: LD_VAR 0 58
67555: PUSH
67556: EMPTY
67557: LIST
67558: LIST
67559: LIST
67560: LIST
67561: LIST
67562: LIST
67563: PUSH
67564: LD_VAR 0 4
67568: PUSH
67569: LD_INT 1
67571: PLUS
67572: ARRAY
67573: ST_TO_ADDR
67574: GO 67683
67576: LD_INT 31
67578: DOUBLE
67579: EQUAL
67580: IFTRUE 67626
67582: LD_INT 32
67584: DOUBLE
67585: EQUAL
67586: IFTRUE 67626
67588: LD_INT 33
67590: DOUBLE
67591: EQUAL
67592: IFTRUE 67626
67594: LD_INT 27
67596: DOUBLE
67597: EQUAL
67598: IFTRUE 67626
67600: LD_INT 26
67602: DOUBLE
67603: EQUAL
67604: IFTRUE 67626
67606: LD_INT 28
67608: DOUBLE
67609: EQUAL
67610: IFTRUE 67626
67612: LD_INT 29
67614: DOUBLE
67615: EQUAL
67616: IFTRUE 67626
67618: LD_INT 30
67620: DOUBLE
67621: EQUAL
67622: IFTRUE 67626
67624: GO 67682
67626: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
67627: LD_ADDR_VAR 0 9
67631: PUSH
67632: LD_VAR 0 59
67636: PUSH
67637: LD_VAR 0 60
67641: PUSH
67642: LD_VAR 0 61
67646: PUSH
67647: LD_VAR 0 62
67651: PUSH
67652: LD_VAR 0 63
67656: PUSH
67657: LD_VAR 0 64
67661: PUSH
67662: EMPTY
67663: LIST
67664: LIST
67665: LIST
67666: LIST
67667: LIST
67668: LIST
67669: PUSH
67670: LD_VAR 0 4
67674: PUSH
67675: LD_INT 1
67677: PLUS
67678: ARRAY
67679: ST_TO_ADDR
67680: GO 67683
67682: POP
// temp_list2 = [ ] ;
67683: LD_ADDR_VAR 0 10
67687: PUSH
67688: EMPTY
67689: ST_TO_ADDR
// for i in temp_list do
67690: LD_ADDR_VAR 0 8
67694: PUSH
67695: LD_VAR 0 9
67699: PUSH
67700: FOR_IN
67701: IFFALSE 67753
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
67703: LD_ADDR_VAR 0 10
67707: PUSH
67708: LD_VAR 0 10
67712: PUSH
67713: LD_VAR 0 8
67717: PUSH
67718: LD_INT 1
67720: ARRAY
67721: PUSH
67722: LD_VAR 0 2
67726: PLUS
67727: PUSH
67728: LD_VAR 0 8
67732: PUSH
67733: LD_INT 2
67735: ARRAY
67736: PUSH
67737: LD_VAR 0 3
67741: PLUS
67742: PUSH
67743: EMPTY
67744: LIST
67745: LIST
67746: PUSH
67747: EMPTY
67748: LIST
67749: ADD
67750: ST_TO_ADDR
67751: GO 67700
67753: POP
67754: POP
// result = temp_list2 ;
67755: LD_ADDR_VAR 0 7
67759: PUSH
67760: LD_VAR 0 10
67764: ST_TO_ADDR
// end ;
67765: LD_VAR 0 7
67769: RET
// export function EnemyInRange ( unit , dist ) ; begin
67770: LD_INT 0
67772: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
67773: LD_ADDR_VAR 0 3
67777: PUSH
67778: LD_VAR 0 1
67782: PPUSH
67783: CALL_OW 255
67787: PPUSH
67788: LD_VAR 0 1
67792: PPUSH
67793: CALL_OW 250
67797: PPUSH
67798: LD_VAR 0 1
67802: PPUSH
67803: CALL_OW 251
67807: PPUSH
67808: LD_VAR 0 2
67812: PPUSH
67813: CALL 41166 0 4
67817: PUSH
67818: LD_INT 4
67820: ARRAY
67821: ST_TO_ADDR
// end ;
67822: LD_VAR 0 3
67826: RET
// export function PlayerSeeMe ( unit ) ; begin
67827: LD_INT 0
67829: PPUSH
// result := See ( your_side , unit ) ;
67830: LD_ADDR_VAR 0 2
67834: PUSH
67835: LD_OWVAR 2
67839: PPUSH
67840: LD_VAR 0 1
67844: PPUSH
67845: CALL_OW 292
67849: ST_TO_ADDR
// end ;
67850: LD_VAR 0 2
67854: RET
// export function ReverseDir ( unit ) ; begin
67855: LD_INT 0
67857: PPUSH
// if not unit then
67858: LD_VAR 0 1
67862: NOT
67863: IFFALSE 67867
// exit ;
67865: GO 67890
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
67867: LD_ADDR_VAR 0 2
67871: PUSH
67872: LD_VAR 0 1
67876: PPUSH
67877: CALL_OW 254
67881: PUSH
67882: LD_INT 3
67884: PLUS
67885: PUSH
67886: LD_INT 6
67888: MOD
67889: ST_TO_ADDR
// end ;
67890: LD_VAR 0 2
67894: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
67895: LD_INT 0
67897: PPUSH
67898: PPUSH
67899: PPUSH
67900: PPUSH
67901: PPUSH
// if not hexes then
67902: LD_VAR 0 2
67906: NOT
67907: IFFALSE 67911
// exit ;
67909: GO 68059
// dist := 9999 ;
67911: LD_ADDR_VAR 0 5
67915: PUSH
67916: LD_INT 9999
67918: ST_TO_ADDR
// for i = 1 to hexes do
67919: LD_ADDR_VAR 0 4
67923: PUSH
67924: DOUBLE
67925: LD_INT 1
67927: DEC
67928: ST_TO_ADDR
67929: LD_VAR 0 2
67933: PUSH
67934: FOR_TO
67935: IFFALSE 68047
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
67937: LD_VAR 0 1
67941: PPUSH
67942: LD_VAR 0 2
67946: PUSH
67947: LD_VAR 0 4
67951: ARRAY
67952: PUSH
67953: LD_INT 1
67955: ARRAY
67956: PPUSH
67957: LD_VAR 0 2
67961: PUSH
67962: LD_VAR 0 4
67966: ARRAY
67967: PUSH
67968: LD_INT 2
67970: ARRAY
67971: PPUSH
67972: CALL_OW 297
67976: PUSH
67977: LD_VAR 0 5
67981: LESS
67982: IFFALSE 68045
// begin hex := hexes [ i ] ;
67984: LD_ADDR_VAR 0 7
67988: PUSH
67989: LD_VAR 0 2
67993: PUSH
67994: LD_VAR 0 4
67998: ARRAY
67999: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
68000: LD_ADDR_VAR 0 5
68004: PUSH
68005: LD_VAR 0 1
68009: PPUSH
68010: LD_VAR 0 2
68014: PUSH
68015: LD_VAR 0 4
68019: ARRAY
68020: PUSH
68021: LD_INT 1
68023: ARRAY
68024: PPUSH
68025: LD_VAR 0 2
68029: PUSH
68030: LD_VAR 0 4
68034: ARRAY
68035: PUSH
68036: LD_INT 2
68038: ARRAY
68039: PPUSH
68040: CALL_OW 297
68044: ST_TO_ADDR
// end ; end ;
68045: GO 67934
68047: POP
68048: POP
// result := hex ;
68049: LD_ADDR_VAR 0 3
68053: PUSH
68054: LD_VAR 0 7
68058: ST_TO_ADDR
// end ;
68059: LD_VAR 0 3
68063: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
68064: LD_INT 0
68066: PPUSH
68067: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
68068: LD_VAR 0 1
68072: NOT
68073: PUSH
68074: LD_VAR 0 1
68078: PUSH
68079: LD_INT 21
68081: PUSH
68082: LD_INT 2
68084: PUSH
68085: EMPTY
68086: LIST
68087: LIST
68088: PUSH
68089: LD_INT 23
68091: PUSH
68092: LD_INT 2
68094: PUSH
68095: EMPTY
68096: LIST
68097: LIST
68098: PUSH
68099: EMPTY
68100: LIST
68101: LIST
68102: PPUSH
68103: CALL_OW 69
68107: IN
68108: NOT
68109: OR
68110: IFFALSE 68114
// exit ;
68112: GO 68161
// for i = 1 to 3 do
68114: LD_ADDR_VAR 0 3
68118: PUSH
68119: DOUBLE
68120: LD_INT 1
68122: DEC
68123: ST_TO_ADDR
68124: LD_INT 3
68126: PUSH
68127: FOR_TO
68128: IFFALSE 68159
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
68130: LD_VAR 0 1
68134: PPUSH
68135: CALL_OW 250
68139: PPUSH
68140: LD_VAR 0 1
68144: PPUSH
68145: CALL_OW 251
68149: PPUSH
68150: LD_INT 1
68152: PPUSH
68153: CALL_OW 453
68157: GO 68127
68159: POP
68160: POP
// end ;
68161: LD_VAR 0 2
68165: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
68166: LD_INT 0
68168: PPUSH
68169: PPUSH
68170: PPUSH
68171: PPUSH
68172: PPUSH
68173: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
68174: LD_VAR 0 1
68178: NOT
68179: PUSH
68180: LD_VAR 0 2
68184: NOT
68185: OR
68186: PUSH
68187: LD_VAR 0 1
68191: PPUSH
68192: CALL_OW 314
68196: OR
68197: IFFALSE 68201
// exit ;
68199: GO 68642
// x := GetX ( enemy_unit ) ;
68201: LD_ADDR_VAR 0 7
68205: PUSH
68206: LD_VAR 0 2
68210: PPUSH
68211: CALL_OW 250
68215: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
68216: LD_ADDR_VAR 0 8
68220: PUSH
68221: LD_VAR 0 2
68225: PPUSH
68226: CALL_OW 251
68230: ST_TO_ADDR
// if not x or not y then
68231: LD_VAR 0 7
68235: NOT
68236: PUSH
68237: LD_VAR 0 8
68241: NOT
68242: OR
68243: IFFALSE 68247
// exit ;
68245: GO 68642
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
68247: LD_ADDR_VAR 0 6
68251: PUSH
68252: LD_VAR 0 7
68256: PPUSH
68257: LD_INT 0
68259: PPUSH
68260: LD_INT 4
68262: PPUSH
68263: CALL_OW 272
68267: PUSH
68268: LD_VAR 0 8
68272: PPUSH
68273: LD_INT 0
68275: PPUSH
68276: LD_INT 4
68278: PPUSH
68279: CALL_OW 273
68283: PUSH
68284: EMPTY
68285: LIST
68286: LIST
68287: PUSH
68288: LD_VAR 0 7
68292: PPUSH
68293: LD_INT 1
68295: PPUSH
68296: LD_INT 4
68298: PPUSH
68299: CALL_OW 272
68303: PUSH
68304: LD_VAR 0 8
68308: PPUSH
68309: LD_INT 1
68311: PPUSH
68312: LD_INT 4
68314: PPUSH
68315: CALL_OW 273
68319: PUSH
68320: EMPTY
68321: LIST
68322: LIST
68323: PUSH
68324: LD_VAR 0 7
68328: PPUSH
68329: LD_INT 2
68331: PPUSH
68332: LD_INT 4
68334: PPUSH
68335: CALL_OW 272
68339: PUSH
68340: LD_VAR 0 8
68344: PPUSH
68345: LD_INT 2
68347: PPUSH
68348: LD_INT 4
68350: PPUSH
68351: CALL_OW 273
68355: PUSH
68356: EMPTY
68357: LIST
68358: LIST
68359: PUSH
68360: LD_VAR 0 7
68364: PPUSH
68365: LD_INT 3
68367: PPUSH
68368: LD_INT 4
68370: PPUSH
68371: CALL_OW 272
68375: PUSH
68376: LD_VAR 0 8
68380: PPUSH
68381: LD_INT 3
68383: PPUSH
68384: LD_INT 4
68386: PPUSH
68387: CALL_OW 273
68391: PUSH
68392: EMPTY
68393: LIST
68394: LIST
68395: PUSH
68396: LD_VAR 0 7
68400: PPUSH
68401: LD_INT 4
68403: PPUSH
68404: LD_INT 4
68406: PPUSH
68407: CALL_OW 272
68411: PUSH
68412: LD_VAR 0 8
68416: PPUSH
68417: LD_INT 4
68419: PPUSH
68420: LD_INT 4
68422: PPUSH
68423: CALL_OW 273
68427: PUSH
68428: EMPTY
68429: LIST
68430: LIST
68431: PUSH
68432: LD_VAR 0 7
68436: PPUSH
68437: LD_INT 5
68439: PPUSH
68440: LD_INT 4
68442: PPUSH
68443: CALL_OW 272
68447: PUSH
68448: LD_VAR 0 8
68452: PPUSH
68453: LD_INT 5
68455: PPUSH
68456: LD_INT 4
68458: PPUSH
68459: CALL_OW 273
68463: PUSH
68464: EMPTY
68465: LIST
68466: LIST
68467: PUSH
68468: EMPTY
68469: LIST
68470: LIST
68471: LIST
68472: LIST
68473: LIST
68474: LIST
68475: ST_TO_ADDR
// for i = tmp downto 1 do
68476: LD_ADDR_VAR 0 4
68480: PUSH
68481: DOUBLE
68482: LD_VAR 0 6
68486: INC
68487: ST_TO_ADDR
68488: LD_INT 1
68490: PUSH
68491: FOR_DOWNTO
68492: IFFALSE 68593
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
68494: LD_VAR 0 6
68498: PUSH
68499: LD_VAR 0 4
68503: ARRAY
68504: PUSH
68505: LD_INT 1
68507: ARRAY
68508: PPUSH
68509: LD_VAR 0 6
68513: PUSH
68514: LD_VAR 0 4
68518: ARRAY
68519: PUSH
68520: LD_INT 2
68522: ARRAY
68523: PPUSH
68524: CALL_OW 488
68528: NOT
68529: PUSH
68530: LD_VAR 0 6
68534: PUSH
68535: LD_VAR 0 4
68539: ARRAY
68540: PUSH
68541: LD_INT 1
68543: ARRAY
68544: PPUSH
68545: LD_VAR 0 6
68549: PUSH
68550: LD_VAR 0 4
68554: ARRAY
68555: PUSH
68556: LD_INT 2
68558: ARRAY
68559: PPUSH
68560: CALL_OW 428
68564: PUSH
68565: LD_INT 0
68567: NONEQUAL
68568: OR
68569: IFFALSE 68591
// tmp := Delete ( tmp , i ) ;
68571: LD_ADDR_VAR 0 6
68575: PUSH
68576: LD_VAR 0 6
68580: PPUSH
68581: LD_VAR 0 4
68585: PPUSH
68586: CALL_OW 3
68590: ST_TO_ADDR
68591: GO 68491
68593: POP
68594: POP
// j := GetClosestHex ( unit , tmp ) ;
68595: LD_ADDR_VAR 0 5
68599: PUSH
68600: LD_VAR 0 1
68604: PPUSH
68605: LD_VAR 0 6
68609: PPUSH
68610: CALL 67895 0 2
68614: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
68615: LD_VAR 0 1
68619: PPUSH
68620: LD_VAR 0 5
68624: PUSH
68625: LD_INT 1
68627: ARRAY
68628: PPUSH
68629: LD_VAR 0 5
68633: PUSH
68634: LD_INT 2
68636: ARRAY
68637: PPUSH
68638: CALL_OW 111
// end ;
68642: LD_VAR 0 3
68646: RET
// export function PrepareApemanSoldier ( ) ; begin
68647: LD_INT 0
68649: PPUSH
// uc_nation := 0 ;
68650: LD_ADDR_OWVAR 21
68654: PUSH
68655: LD_INT 0
68657: ST_TO_ADDR
// hc_sex := sex_male ;
68658: LD_ADDR_OWVAR 27
68662: PUSH
68663: LD_INT 1
68665: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
68666: LD_ADDR_OWVAR 28
68670: PUSH
68671: LD_INT 15
68673: ST_TO_ADDR
// hc_gallery :=  ;
68674: LD_ADDR_OWVAR 33
68678: PUSH
68679: LD_STRING 
68681: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68682: LD_ADDR_OWVAR 31
68686: PUSH
68687: LD_INT 0
68689: PPUSH
68690: LD_INT 3
68692: PPUSH
68693: CALL_OW 12
68697: PUSH
68698: LD_INT 0
68700: PPUSH
68701: LD_INT 3
68703: PPUSH
68704: CALL_OW 12
68708: PUSH
68709: LD_INT 0
68711: PUSH
68712: LD_INT 0
68714: PUSH
68715: EMPTY
68716: LIST
68717: LIST
68718: LIST
68719: LIST
68720: ST_TO_ADDR
// end ;
68721: LD_VAR 0 1
68725: RET
// export function PrepareApemanEngineer ( ) ; begin
68726: LD_INT 0
68728: PPUSH
// uc_nation := 0 ;
68729: LD_ADDR_OWVAR 21
68733: PUSH
68734: LD_INT 0
68736: ST_TO_ADDR
// hc_sex := sex_male ;
68737: LD_ADDR_OWVAR 27
68741: PUSH
68742: LD_INT 1
68744: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
68745: LD_ADDR_OWVAR 28
68749: PUSH
68750: LD_INT 16
68752: ST_TO_ADDR
// hc_gallery :=  ;
68753: LD_ADDR_OWVAR 33
68757: PUSH
68758: LD_STRING 
68760: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68761: LD_ADDR_OWVAR 31
68765: PUSH
68766: LD_INT 0
68768: PPUSH
68769: LD_INT 3
68771: PPUSH
68772: CALL_OW 12
68776: PUSH
68777: LD_INT 0
68779: PPUSH
68780: LD_INT 3
68782: PPUSH
68783: CALL_OW 12
68787: PUSH
68788: LD_INT 0
68790: PUSH
68791: LD_INT 0
68793: PUSH
68794: EMPTY
68795: LIST
68796: LIST
68797: LIST
68798: LIST
68799: ST_TO_ADDR
// end ;
68800: LD_VAR 0 1
68804: RET
// export function PrepareApeman ( agressivity ) ; begin
68805: LD_INT 0
68807: PPUSH
// uc_side := 0 ;
68808: LD_ADDR_OWVAR 20
68812: PUSH
68813: LD_INT 0
68815: ST_TO_ADDR
// uc_nation := 0 ;
68816: LD_ADDR_OWVAR 21
68820: PUSH
68821: LD_INT 0
68823: ST_TO_ADDR
// hc_sex := sex_male ;
68824: LD_ADDR_OWVAR 27
68828: PUSH
68829: LD_INT 1
68831: ST_TO_ADDR
// hc_class := class_apeman ;
68832: LD_ADDR_OWVAR 28
68836: PUSH
68837: LD_INT 12
68839: ST_TO_ADDR
// hc_gallery :=  ;
68840: LD_ADDR_OWVAR 33
68844: PUSH
68845: LD_STRING 
68847: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
68848: LD_ADDR_OWVAR 35
68852: PUSH
68853: LD_VAR 0 1
68857: NEG
68858: PPUSH
68859: LD_VAR 0 1
68863: PPUSH
68864: CALL_OW 12
68868: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68869: LD_ADDR_OWVAR 31
68873: PUSH
68874: LD_INT 0
68876: PPUSH
68877: LD_INT 3
68879: PPUSH
68880: CALL_OW 12
68884: PUSH
68885: LD_INT 0
68887: PPUSH
68888: LD_INT 3
68890: PPUSH
68891: CALL_OW 12
68895: PUSH
68896: LD_INT 0
68898: PUSH
68899: LD_INT 0
68901: PUSH
68902: EMPTY
68903: LIST
68904: LIST
68905: LIST
68906: LIST
68907: ST_TO_ADDR
// end ;
68908: LD_VAR 0 2
68912: RET
// export function PrepareTiger ( agressivity ) ; begin
68913: LD_INT 0
68915: PPUSH
// uc_side := 0 ;
68916: LD_ADDR_OWVAR 20
68920: PUSH
68921: LD_INT 0
68923: ST_TO_ADDR
// uc_nation := 0 ;
68924: LD_ADDR_OWVAR 21
68928: PUSH
68929: LD_INT 0
68931: ST_TO_ADDR
// hc_class := class_tiger ;
68932: LD_ADDR_OWVAR 28
68936: PUSH
68937: LD_INT 14
68939: ST_TO_ADDR
// hc_gallery :=  ;
68940: LD_ADDR_OWVAR 33
68944: PUSH
68945: LD_STRING 
68947: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
68948: LD_ADDR_OWVAR 35
68952: PUSH
68953: LD_VAR 0 1
68957: NEG
68958: PPUSH
68959: LD_VAR 0 1
68963: PPUSH
68964: CALL_OW 12
68968: ST_TO_ADDR
// end ;
68969: LD_VAR 0 2
68973: RET
// export function PrepareEnchidna ( ) ; begin
68974: LD_INT 0
68976: PPUSH
// uc_side := 0 ;
68977: LD_ADDR_OWVAR 20
68981: PUSH
68982: LD_INT 0
68984: ST_TO_ADDR
// uc_nation := 0 ;
68985: LD_ADDR_OWVAR 21
68989: PUSH
68990: LD_INT 0
68992: ST_TO_ADDR
// hc_class := class_baggie ;
68993: LD_ADDR_OWVAR 28
68997: PUSH
68998: LD_INT 13
69000: ST_TO_ADDR
// hc_gallery :=  ;
69001: LD_ADDR_OWVAR 33
69005: PUSH
69006: LD_STRING 
69008: ST_TO_ADDR
// end ;
69009: LD_VAR 0 1
69013: RET
// export function PrepareFrog ( ) ; begin
69014: LD_INT 0
69016: PPUSH
// uc_side := 0 ;
69017: LD_ADDR_OWVAR 20
69021: PUSH
69022: LD_INT 0
69024: ST_TO_ADDR
// uc_nation := 0 ;
69025: LD_ADDR_OWVAR 21
69029: PUSH
69030: LD_INT 0
69032: ST_TO_ADDR
// hc_class := class_frog ;
69033: LD_ADDR_OWVAR 28
69037: PUSH
69038: LD_INT 19
69040: ST_TO_ADDR
// hc_gallery :=  ;
69041: LD_ADDR_OWVAR 33
69045: PUSH
69046: LD_STRING 
69048: ST_TO_ADDR
// end ;
69049: LD_VAR 0 1
69053: RET
// export function PrepareFish ( ) ; begin
69054: LD_INT 0
69056: PPUSH
// uc_side := 0 ;
69057: LD_ADDR_OWVAR 20
69061: PUSH
69062: LD_INT 0
69064: ST_TO_ADDR
// uc_nation := 0 ;
69065: LD_ADDR_OWVAR 21
69069: PUSH
69070: LD_INT 0
69072: ST_TO_ADDR
// hc_class := class_fish ;
69073: LD_ADDR_OWVAR 28
69077: PUSH
69078: LD_INT 20
69080: ST_TO_ADDR
// hc_gallery :=  ;
69081: LD_ADDR_OWVAR 33
69085: PUSH
69086: LD_STRING 
69088: ST_TO_ADDR
// end ;
69089: LD_VAR 0 1
69093: RET
// export function PrepareBird ( ) ; begin
69094: LD_INT 0
69096: PPUSH
// uc_side := 0 ;
69097: LD_ADDR_OWVAR 20
69101: PUSH
69102: LD_INT 0
69104: ST_TO_ADDR
// uc_nation := 0 ;
69105: LD_ADDR_OWVAR 21
69109: PUSH
69110: LD_INT 0
69112: ST_TO_ADDR
// hc_class := class_phororhacos ;
69113: LD_ADDR_OWVAR 28
69117: PUSH
69118: LD_INT 18
69120: ST_TO_ADDR
// hc_gallery :=  ;
69121: LD_ADDR_OWVAR 33
69125: PUSH
69126: LD_STRING 
69128: ST_TO_ADDR
// end ;
69129: LD_VAR 0 1
69133: RET
// export function PrepareHorse ( ) ; begin
69134: LD_INT 0
69136: PPUSH
// uc_side := 0 ;
69137: LD_ADDR_OWVAR 20
69141: PUSH
69142: LD_INT 0
69144: ST_TO_ADDR
// uc_nation := 0 ;
69145: LD_ADDR_OWVAR 21
69149: PUSH
69150: LD_INT 0
69152: ST_TO_ADDR
// hc_class := class_horse ;
69153: LD_ADDR_OWVAR 28
69157: PUSH
69158: LD_INT 21
69160: ST_TO_ADDR
// hc_gallery :=  ;
69161: LD_ADDR_OWVAR 33
69165: PUSH
69166: LD_STRING 
69168: ST_TO_ADDR
// end ;
69169: LD_VAR 0 1
69173: RET
// export function PrepareMastodont ( ) ; begin
69174: LD_INT 0
69176: PPUSH
// uc_side := 0 ;
69177: LD_ADDR_OWVAR 20
69181: PUSH
69182: LD_INT 0
69184: ST_TO_ADDR
// uc_nation := 0 ;
69185: LD_ADDR_OWVAR 21
69189: PUSH
69190: LD_INT 0
69192: ST_TO_ADDR
// vc_chassis := class_mastodont ;
69193: LD_ADDR_OWVAR 37
69197: PUSH
69198: LD_INT 31
69200: ST_TO_ADDR
// vc_control := control_rider ;
69201: LD_ADDR_OWVAR 38
69205: PUSH
69206: LD_INT 4
69208: ST_TO_ADDR
// end ;
69209: LD_VAR 0 1
69213: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
69214: LD_INT 0
69216: PPUSH
69217: PPUSH
69218: PPUSH
// uc_side = 0 ;
69219: LD_ADDR_OWVAR 20
69223: PUSH
69224: LD_INT 0
69226: ST_TO_ADDR
// uc_nation = 0 ;
69227: LD_ADDR_OWVAR 21
69231: PUSH
69232: LD_INT 0
69234: ST_TO_ADDR
// InitHc_All ( ) ;
69235: CALL_OW 584
// InitVc ;
69239: CALL_OW 20
// if mastodonts then
69243: LD_VAR 0 6
69247: IFFALSE 69314
// for i = 1 to mastodonts do
69249: LD_ADDR_VAR 0 11
69253: PUSH
69254: DOUBLE
69255: LD_INT 1
69257: DEC
69258: ST_TO_ADDR
69259: LD_VAR 0 6
69263: PUSH
69264: FOR_TO
69265: IFFALSE 69312
// begin vc_chassis := 31 ;
69267: LD_ADDR_OWVAR 37
69271: PUSH
69272: LD_INT 31
69274: ST_TO_ADDR
// vc_control := control_rider ;
69275: LD_ADDR_OWVAR 38
69279: PUSH
69280: LD_INT 4
69282: ST_TO_ADDR
// animal := CreateVehicle ;
69283: LD_ADDR_VAR 0 12
69287: PUSH
69288: CALL_OW 45
69292: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69293: LD_VAR 0 12
69297: PPUSH
69298: LD_VAR 0 8
69302: PPUSH
69303: LD_INT 0
69305: PPUSH
69306: CALL 71449 0 3
// end ;
69310: GO 69264
69312: POP
69313: POP
// if horses then
69314: LD_VAR 0 5
69318: IFFALSE 69385
// for i = 1 to horses do
69320: LD_ADDR_VAR 0 11
69324: PUSH
69325: DOUBLE
69326: LD_INT 1
69328: DEC
69329: ST_TO_ADDR
69330: LD_VAR 0 5
69334: PUSH
69335: FOR_TO
69336: IFFALSE 69383
// begin hc_class := 21 ;
69338: LD_ADDR_OWVAR 28
69342: PUSH
69343: LD_INT 21
69345: ST_TO_ADDR
// hc_gallery :=  ;
69346: LD_ADDR_OWVAR 33
69350: PUSH
69351: LD_STRING 
69353: ST_TO_ADDR
// animal := CreateHuman ;
69354: LD_ADDR_VAR 0 12
69358: PUSH
69359: CALL_OW 44
69363: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69364: LD_VAR 0 12
69368: PPUSH
69369: LD_VAR 0 8
69373: PPUSH
69374: LD_INT 0
69376: PPUSH
69377: CALL 71449 0 3
// end ;
69381: GO 69335
69383: POP
69384: POP
// if birds then
69385: LD_VAR 0 1
69389: IFFALSE 69456
// for i = 1 to birds do
69391: LD_ADDR_VAR 0 11
69395: PUSH
69396: DOUBLE
69397: LD_INT 1
69399: DEC
69400: ST_TO_ADDR
69401: LD_VAR 0 1
69405: PUSH
69406: FOR_TO
69407: IFFALSE 69454
// begin hc_class = 18 ;
69409: LD_ADDR_OWVAR 28
69413: PUSH
69414: LD_INT 18
69416: ST_TO_ADDR
// hc_gallery =  ;
69417: LD_ADDR_OWVAR 33
69421: PUSH
69422: LD_STRING 
69424: ST_TO_ADDR
// animal := CreateHuman ;
69425: LD_ADDR_VAR 0 12
69429: PUSH
69430: CALL_OW 44
69434: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69435: LD_VAR 0 12
69439: PPUSH
69440: LD_VAR 0 8
69444: PPUSH
69445: LD_INT 0
69447: PPUSH
69448: CALL 71449 0 3
// end ;
69452: GO 69406
69454: POP
69455: POP
// if tigers then
69456: LD_VAR 0 2
69460: IFFALSE 69544
// for i = 1 to tigers do
69462: LD_ADDR_VAR 0 11
69466: PUSH
69467: DOUBLE
69468: LD_INT 1
69470: DEC
69471: ST_TO_ADDR
69472: LD_VAR 0 2
69476: PUSH
69477: FOR_TO
69478: IFFALSE 69542
// begin hc_class = class_tiger ;
69480: LD_ADDR_OWVAR 28
69484: PUSH
69485: LD_INT 14
69487: ST_TO_ADDR
// hc_gallery =  ;
69488: LD_ADDR_OWVAR 33
69492: PUSH
69493: LD_STRING 
69495: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
69496: LD_ADDR_OWVAR 35
69500: PUSH
69501: LD_INT 7
69503: NEG
69504: PPUSH
69505: LD_INT 7
69507: PPUSH
69508: CALL_OW 12
69512: ST_TO_ADDR
// animal := CreateHuman ;
69513: LD_ADDR_VAR 0 12
69517: PUSH
69518: CALL_OW 44
69522: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69523: LD_VAR 0 12
69527: PPUSH
69528: LD_VAR 0 8
69532: PPUSH
69533: LD_INT 0
69535: PPUSH
69536: CALL 71449 0 3
// end ;
69540: GO 69477
69542: POP
69543: POP
// if apemans then
69544: LD_VAR 0 3
69548: IFFALSE 69671
// for i = 1 to apemans do
69550: LD_ADDR_VAR 0 11
69554: PUSH
69555: DOUBLE
69556: LD_INT 1
69558: DEC
69559: ST_TO_ADDR
69560: LD_VAR 0 3
69564: PUSH
69565: FOR_TO
69566: IFFALSE 69669
// begin hc_class = class_apeman ;
69568: LD_ADDR_OWVAR 28
69572: PUSH
69573: LD_INT 12
69575: ST_TO_ADDR
// hc_gallery =  ;
69576: LD_ADDR_OWVAR 33
69580: PUSH
69581: LD_STRING 
69583: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
69584: LD_ADDR_OWVAR 35
69588: PUSH
69589: LD_INT 2
69591: NEG
69592: PPUSH
69593: LD_INT 2
69595: PPUSH
69596: CALL_OW 12
69600: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
69601: LD_ADDR_OWVAR 31
69605: PUSH
69606: LD_INT 1
69608: PPUSH
69609: LD_INT 3
69611: PPUSH
69612: CALL_OW 12
69616: PUSH
69617: LD_INT 1
69619: PPUSH
69620: LD_INT 3
69622: PPUSH
69623: CALL_OW 12
69627: PUSH
69628: LD_INT 0
69630: PUSH
69631: LD_INT 0
69633: PUSH
69634: EMPTY
69635: LIST
69636: LIST
69637: LIST
69638: LIST
69639: ST_TO_ADDR
// animal := CreateHuman ;
69640: LD_ADDR_VAR 0 12
69644: PUSH
69645: CALL_OW 44
69649: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69650: LD_VAR 0 12
69654: PPUSH
69655: LD_VAR 0 8
69659: PPUSH
69660: LD_INT 0
69662: PPUSH
69663: CALL 71449 0 3
// end ;
69667: GO 69565
69669: POP
69670: POP
// if enchidnas then
69671: LD_VAR 0 4
69675: IFFALSE 69742
// for i = 1 to enchidnas do
69677: LD_ADDR_VAR 0 11
69681: PUSH
69682: DOUBLE
69683: LD_INT 1
69685: DEC
69686: ST_TO_ADDR
69687: LD_VAR 0 4
69691: PUSH
69692: FOR_TO
69693: IFFALSE 69740
// begin hc_class = 13 ;
69695: LD_ADDR_OWVAR 28
69699: PUSH
69700: LD_INT 13
69702: ST_TO_ADDR
// hc_gallery =  ;
69703: LD_ADDR_OWVAR 33
69707: PUSH
69708: LD_STRING 
69710: ST_TO_ADDR
// animal := CreateHuman ;
69711: LD_ADDR_VAR 0 12
69715: PUSH
69716: CALL_OW 44
69720: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69721: LD_VAR 0 12
69725: PPUSH
69726: LD_VAR 0 8
69730: PPUSH
69731: LD_INT 0
69733: PPUSH
69734: CALL 71449 0 3
// end ;
69738: GO 69692
69740: POP
69741: POP
// if fishes then
69742: LD_VAR 0 7
69746: IFFALSE 69813
// for i = 1 to fishes do
69748: LD_ADDR_VAR 0 11
69752: PUSH
69753: DOUBLE
69754: LD_INT 1
69756: DEC
69757: ST_TO_ADDR
69758: LD_VAR 0 7
69762: PUSH
69763: FOR_TO
69764: IFFALSE 69811
// begin hc_class = 20 ;
69766: LD_ADDR_OWVAR 28
69770: PUSH
69771: LD_INT 20
69773: ST_TO_ADDR
// hc_gallery =  ;
69774: LD_ADDR_OWVAR 33
69778: PUSH
69779: LD_STRING 
69781: ST_TO_ADDR
// animal := CreateHuman ;
69782: LD_ADDR_VAR 0 12
69786: PUSH
69787: CALL_OW 44
69791: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
69792: LD_VAR 0 12
69796: PPUSH
69797: LD_VAR 0 9
69801: PPUSH
69802: LD_INT 0
69804: PPUSH
69805: CALL 71449 0 3
// end ;
69809: GO 69763
69811: POP
69812: POP
// end ;
69813: LD_VAR 0 10
69817: RET
// export function WantHeal ( sci , unit ) ; begin
69818: LD_INT 0
69820: PPUSH
// if GetTaskList ( sci ) > 0 then
69821: LD_VAR 0 1
69825: PPUSH
69826: CALL_OW 437
69830: PUSH
69831: LD_INT 0
69833: GREATER
69834: IFFALSE 69904
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
69836: LD_VAR 0 1
69840: PPUSH
69841: CALL_OW 437
69845: PUSH
69846: LD_INT 1
69848: ARRAY
69849: PUSH
69850: LD_INT 1
69852: ARRAY
69853: PUSH
69854: LD_STRING l
69856: EQUAL
69857: PUSH
69858: LD_VAR 0 1
69862: PPUSH
69863: CALL_OW 437
69867: PUSH
69868: LD_INT 1
69870: ARRAY
69871: PUSH
69872: LD_INT 4
69874: ARRAY
69875: PUSH
69876: LD_VAR 0 2
69880: EQUAL
69881: AND
69882: IFFALSE 69894
// result := true else
69884: LD_ADDR_VAR 0 3
69888: PUSH
69889: LD_INT 1
69891: ST_TO_ADDR
69892: GO 69902
// result := false ;
69894: LD_ADDR_VAR 0 3
69898: PUSH
69899: LD_INT 0
69901: ST_TO_ADDR
// end else
69902: GO 69912
// result := false ;
69904: LD_ADDR_VAR 0 3
69908: PUSH
69909: LD_INT 0
69911: ST_TO_ADDR
// end ;
69912: LD_VAR 0 3
69916: RET
// export function HealTarget ( sci ) ; begin
69917: LD_INT 0
69919: PPUSH
// if not sci then
69920: LD_VAR 0 1
69924: NOT
69925: IFFALSE 69929
// exit ;
69927: GO 69994
// result := 0 ;
69929: LD_ADDR_VAR 0 2
69933: PUSH
69934: LD_INT 0
69936: ST_TO_ADDR
// if GetTaskList ( sci ) then
69937: LD_VAR 0 1
69941: PPUSH
69942: CALL_OW 437
69946: IFFALSE 69994
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
69948: LD_VAR 0 1
69952: PPUSH
69953: CALL_OW 437
69957: PUSH
69958: LD_INT 1
69960: ARRAY
69961: PUSH
69962: LD_INT 1
69964: ARRAY
69965: PUSH
69966: LD_STRING l
69968: EQUAL
69969: IFFALSE 69994
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
69971: LD_ADDR_VAR 0 2
69975: PUSH
69976: LD_VAR 0 1
69980: PPUSH
69981: CALL_OW 437
69985: PUSH
69986: LD_INT 1
69988: ARRAY
69989: PUSH
69990: LD_INT 4
69992: ARRAY
69993: ST_TO_ADDR
// end ;
69994: LD_VAR 0 2
69998: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
69999: LD_INT 0
70001: PPUSH
70002: PPUSH
70003: PPUSH
70004: PPUSH
// if not base_units then
70005: LD_VAR 0 1
70009: NOT
70010: IFFALSE 70014
// exit ;
70012: GO 70101
// result := false ;
70014: LD_ADDR_VAR 0 2
70018: PUSH
70019: LD_INT 0
70021: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
70022: LD_ADDR_VAR 0 5
70026: PUSH
70027: LD_VAR 0 1
70031: PPUSH
70032: LD_INT 21
70034: PUSH
70035: LD_INT 3
70037: PUSH
70038: EMPTY
70039: LIST
70040: LIST
70041: PPUSH
70042: CALL_OW 72
70046: ST_TO_ADDR
// if not tmp then
70047: LD_VAR 0 5
70051: NOT
70052: IFFALSE 70056
// exit ;
70054: GO 70101
// for i in tmp do
70056: LD_ADDR_VAR 0 3
70060: PUSH
70061: LD_VAR 0 5
70065: PUSH
70066: FOR_IN
70067: IFFALSE 70099
// begin result := EnemyInRange ( i , 22 ) ;
70069: LD_ADDR_VAR 0 2
70073: PUSH
70074: LD_VAR 0 3
70078: PPUSH
70079: LD_INT 22
70081: PPUSH
70082: CALL 67770 0 2
70086: ST_TO_ADDR
// if result then
70087: LD_VAR 0 2
70091: IFFALSE 70097
// exit ;
70093: POP
70094: POP
70095: GO 70101
// end ;
70097: GO 70066
70099: POP
70100: POP
// end ;
70101: LD_VAR 0 2
70105: RET
// export function FilterByTag ( units , tag ) ; begin
70106: LD_INT 0
70108: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
70109: LD_ADDR_VAR 0 3
70113: PUSH
70114: LD_VAR 0 1
70118: PPUSH
70119: LD_INT 120
70121: PUSH
70122: LD_VAR 0 2
70126: PUSH
70127: EMPTY
70128: LIST
70129: LIST
70130: PPUSH
70131: CALL_OW 72
70135: ST_TO_ADDR
// end ;
70136: LD_VAR 0 3
70140: RET
// export function IsDriver ( un ) ; begin
70141: LD_INT 0
70143: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
70144: LD_ADDR_VAR 0 2
70148: PUSH
70149: LD_VAR 0 1
70153: PUSH
70154: LD_INT 55
70156: PUSH
70157: EMPTY
70158: LIST
70159: PPUSH
70160: CALL_OW 69
70164: IN
70165: ST_TO_ADDR
// end ;
70166: LD_VAR 0 2
70170: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
70171: LD_INT 0
70173: PPUSH
70174: PPUSH
// list := [ ] ;
70175: LD_ADDR_VAR 0 5
70179: PUSH
70180: EMPTY
70181: ST_TO_ADDR
// case d of 0 :
70182: LD_VAR 0 3
70186: PUSH
70187: LD_INT 0
70189: DOUBLE
70190: EQUAL
70191: IFTRUE 70195
70193: GO 70328
70195: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
70196: LD_ADDR_VAR 0 5
70200: PUSH
70201: LD_VAR 0 1
70205: PUSH
70206: LD_INT 4
70208: MINUS
70209: PUSH
70210: LD_VAR 0 2
70214: PUSH
70215: LD_INT 4
70217: MINUS
70218: PUSH
70219: LD_INT 2
70221: PUSH
70222: EMPTY
70223: LIST
70224: LIST
70225: LIST
70226: PUSH
70227: LD_VAR 0 1
70231: PUSH
70232: LD_INT 3
70234: MINUS
70235: PUSH
70236: LD_VAR 0 2
70240: PUSH
70241: LD_INT 1
70243: PUSH
70244: EMPTY
70245: LIST
70246: LIST
70247: LIST
70248: PUSH
70249: LD_VAR 0 1
70253: PUSH
70254: LD_INT 4
70256: PLUS
70257: PUSH
70258: LD_VAR 0 2
70262: PUSH
70263: LD_INT 4
70265: PUSH
70266: EMPTY
70267: LIST
70268: LIST
70269: LIST
70270: PUSH
70271: LD_VAR 0 1
70275: PUSH
70276: LD_INT 3
70278: PLUS
70279: PUSH
70280: LD_VAR 0 2
70284: PUSH
70285: LD_INT 3
70287: PLUS
70288: PUSH
70289: LD_INT 5
70291: PUSH
70292: EMPTY
70293: LIST
70294: LIST
70295: LIST
70296: PUSH
70297: LD_VAR 0 1
70301: PUSH
70302: LD_VAR 0 2
70306: PUSH
70307: LD_INT 4
70309: PLUS
70310: PUSH
70311: LD_INT 0
70313: PUSH
70314: EMPTY
70315: LIST
70316: LIST
70317: LIST
70318: PUSH
70319: EMPTY
70320: LIST
70321: LIST
70322: LIST
70323: LIST
70324: LIST
70325: ST_TO_ADDR
// end ; 1 :
70326: GO 71026
70328: LD_INT 1
70330: DOUBLE
70331: EQUAL
70332: IFTRUE 70336
70334: GO 70469
70336: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
70337: LD_ADDR_VAR 0 5
70341: PUSH
70342: LD_VAR 0 1
70346: PUSH
70347: LD_VAR 0 2
70351: PUSH
70352: LD_INT 4
70354: MINUS
70355: PUSH
70356: LD_INT 3
70358: PUSH
70359: EMPTY
70360: LIST
70361: LIST
70362: LIST
70363: PUSH
70364: LD_VAR 0 1
70368: PUSH
70369: LD_INT 3
70371: MINUS
70372: PUSH
70373: LD_VAR 0 2
70377: PUSH
70378: LD_INT 3
70380: MINUS
70381: PUSH
70382: LD_INT 2
70384: PUSH
70385: EMPTY
70386: LIST
70387: LIST
70388: LIST
70389: PUSH
70390: LD_VAR 0 1
70394: PUSH
70395: LD_INT 4
70397: MINUS
70398: PUSH
70399: LD_VAR 0 2
70403: PUSH
70404: LD_INT 1
70406: PUSH
70407: EMPTY
70408: LIST
70409: LIST
70410: LIST
70411: PUSH
70412: LD_VAR 0 1
70416: PUSH
70417: LD_VAR 0 2
70421: PUSH
70422: LD_INT 3
70424: PLUS
70425: PUSH
70426: LD_INT 0
70428: PUSH
70429: EMPTY
70430: LIST
70431: LIST
70432: LIST
70433: PUSH
70434: LD_VAR 0 1
70438: PUSH
70439: LD_INT 4
70441: PLUS
70442: PUSH
70443: LD_VAR 0 2
70447: PUSH
70448: LD_INT 4
70450: PLUS
70451: PUSH
70452: LD_INT 5
70454: PUSH
70455: EMPTY
70456: LIST
70457: LIST
70458: LIST
70459: PUSH
70460: EMPTY
70461: LIST
70462: LIST
70463: LIST
70464: LIST
70465: LIST
70466: ST_TO_ADDR
// end ; 2 :
70467: GO 71026
70469: LD_INT 2
70471: DOUBLE
70472: EQUAL
70473: IFTRUE 70477
70475: GO 70606
70477: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
70478: LD_ADDR_VAR 0 5
70482: PUSH
70483: LD_VAR 0 1
70487: PUSH
70488: LD_VAR 0 2
70492: PUSH
70493: LD_INT 3
70495: MINUS
70496: PUSH
70497: LD_INT 3
70499: PUSH
70500: EMPTY
70501: LIST
70502: LIST
70503: LIST
70504: PUSH
70505: LD_VAR 0 1
70509: PUSH
70510: LD_INT 4
70512: PLUS
70513: PUSH
70514: LD_VAR 0 2
70518: PUSH
70519: LD_INT 4
70521: PUSH
70522: EMPTY
70523: LIST
70524: LIST
70525: LIST
70526: PUSH
70527: LD_VAR 0 1
70531: PUSH
70532: LD_VAR 0 2
70536: PUSH
70537: LD_INT 4
70539: PLUS
70540: PUSH
70541: LD_INT 0
70543: PUSH
70544: EMPTY
70545: LIST
70546: LIST
70547: LIST
70548: PUSH
70549: LD_VAR 0 1
70553: PUSH
70554: LD_INT 3
70556: MINUS
70557: PUSH
70558: LD_VAR 0 2
70562: PUSH
70563: LD_INT 1
70565: PUSH
70566: EMPTY
70567: LIST
70568: LIST
70569: LIST
70570: PUSH
70571: LD_VAR 0 1
70575: PUSH
70576: LD_INT 4
70578: MINUS
70579: PUSH
70580: LD_VAR 0 2
70584: PUSH
70585: LD_INT 4
70587: MINUS
70588: PUSH
70589: LD_INT 2
70591: PUSH
70592: EMPTY
70593: LIST
70594: LIST
70595: LIST
70596: PUSH
70597: EMPTY
70598: LIST
70599: LIST
70600: LIST
70601: LIST
70602: LIST
70603: ST_TO_ADDR
// end ; 3 :
70604: GO 71026
70606: LD_INT 3
70608: DOUBLE
70609: EQUAL
70610: IFTRUE 70614
70612: GO 70747
70614: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
70615: LD_ADDR_VAR 0 5
70619: PUSH
70620: LD_VAR 0 1
70624: PUSH
70625: LD_INT 3
70627: PLUS
70628: PUSH
70629: LD_VAR 0 2
70633: PUSH
70634: LD_INT 4
70636: PUSH
70637: EMPTY
70638: LIST
70639: LIST
70640: LIST
70641: PUSH
70642: LD_VAR 0 1
70646: PUSH
70647: LD_INT 4
70649: PLUS
70650: PUSH
70651: LD_VAR 0 2
70655: PUSH
70656: LD_INT 4
70658: PLUS
70659: PUSH
70660: LD_INT 5
70662: PUSH
70663: EMPTY
70664: LIST
70665: LIST
70666: LIST
70667: PUSH
70668: LD_VAR 0 1
70672: PUSH
70673: LD_INT 4
70675: MINUS
70676: PUSH
70677: LD_VAR 0 2
70681: PUSH
70682: LD_INT 1
70684: PUSH
70685: EMPTY
70686: LIST
70687: LIST
70688: LIST
70689: PUSH
70690: LD_VAR 0 1
70694: PUSH
70695: LD_VAR 0 2
70699: PUSH
70700: LD_INT 4
70702: MINUS
70703: PUSH
70704: LD_INT 3
70706: PUSH
70707: EMPTY
70708: LIST
70709: LIST
70710: LIST
70711: PUSH
70712: LD_VAR 0 1
70716: PUSH
70717: LD_INT 3
70719: MINUS
70720: PUSH
70721: LD_VAR 0 2
70725: PUSH
70726: LD_INT 3
70728: MINUS
70729: PUSH
70730: LD_INT 2
70732: PUSH
70733: EMPTY
70734: LIST
70735: LIST
70736: LIST
70737: PUSH
70738: EMPTY
70739: LIST
70740: LIST
70741: LIST
70742: LIST
70743: LIST
70744: ST_TO_ADDR
// end ; 4 :
70745: GO 71026
70747: LD_INT 4
70749: DOUBLE
70750: EQUAL
70751: IFTRUE 70755
70753: GO 70888
70755: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
70756: LD_ADDR_VAR 0 5
70760: PUSH
70761: LD_VAR 0 1
70765: PUSH
70766: LD_VAR 0 2
70770: PUSH
70771: LD_INT 4
70773: PLUS
70774: PUSH
70775: LD_INT 0
70777: PUSH
70778: EMPTY
70779: LIST
70780: LIST
70781: LIST
70782: PUSH
70783: LD_VAR 0 1
70787: PUSH
70788: LD_INT 3
70790: PLUS
70791: PUSH
70792: LD_VAR 0 2
70796: PUSH
70797: LD_INT 3
70799: PLUS
70800: PUSH
70801: LD_INT 5
70803: PUSH
70804: EMPTY
70805: LIST
70806: LIST
70807: LIST
70808: PUSH
70809: LD_VAR 0 1
70813: PUSH
70814: LD_INT 4
70816: PLUS
70817: PUSH
70818: LD_VAR 0 2
70822: PUSH
70823: LD_INT 4
70825: PUSH
70826: EMPTY
70827: LIST
70828: LIST
70829: LIST
70830: PUSH
70831: LD_VAR 0 1
70835: PUSH
70836: LD_VAR 0 2
70840: PUSH
70841: LD_INT 3
70843: MINUS
70844: PUSH
70845: LD_INT 3
70847: PUSH
70848: EMPTY
70849: LIST
70850: LIST
70851: LIST
70852: PUSH
70853: LD_VAR 0 1
70857: PUSH
70858: LD_INT 4
70860: MINUS
70861: PUSH
70862: LD_VAR 0 2
70866: PUSH
70867: LD_INT 4
70869: MINUS
70870: PUSH
70871: LD_INT 2
70873: PUSH
70874: EMPTY
70875: LIST
70876: LIST
70877: LIST
70878: PUSH
70879: EMPTY
70880: LIST
70881: LIST
70882: LIST
70883: LIST
70884: LIST
70885: ST_TO_ADDR
// end ; 5 :
70886: GO 71026
70888: LD_INT 5
70890: DOUBLE
70891: EQUAL
70892: IFTRUE 70896
70894: GO 71025
70896: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
70897: LD_ADDR_VAR 0 5
70901: PUSH
70902: LD_VAR 0 1
70906: PUSH
70907: LD_INT 4
70909: MINUS
70910: PUSH
70911: LD_VAR 0 2
70915: PUSH
70916: LD_INT 1
70918: PUSH
70919: EMPTY
70920: LIST
70921: LIST
70922: LIST
70923: PUSH
70924: LD_VAR 0 1
70928: PUSH
70929: LD_VAR 0 2
70933: PUSH
70934: LD_INT 4
70936: MINUS
70937: PUSH
70938: LD_INT 3
70940: PUSH
70941: EMPTY
70942: LIST
70943: LIST
70944: LIST
70945: PUSH
70946: LD_VAR 0 1
70950: PUSH
70951: LD_INT 4
70953: PLUS
70954: PUSH
70955: LD_VAR 0 2
70959: PUSH
70960: LD_INT 4
70962: PLUS
70963: PUSH
70964: LD_INT 5
70966: PUSH
70967: EMPTY
70968: LIST
70969: LIST
70970: LIST
70971: PUSH
70972: LD_VAR 0 1
70976: PUSH
70977: LD_INT 3
70979: PLUS
70980: PUSH
70981: LD_VAR 0 2
70985: PUSH
70986: LD_INT 4
70988: PUSH
70989: EMPTY
70990: LIST
70991: LIST
70992: LIST
70993: PUSH
70994: LD_VAR 0 1
70998: PUSH
70999: LD_VAR 0 2
71003: PUSH
71004: LD_INT 3
71006: PLUS
71007: PUSH
71008: LD_INT 0
71010: PUSH
71011: EMPTY
71012: LIST
71013: LIST
71014: LIST
71015: PUSH
71016: EMPTY
71017: LIST
71018: LIST
71019: LIST
71020: LIST
71021: LIST
71022: ST_TO_ADDR
// end ; end ;
71023: GO 71026
71025: POP
// result := list ;
71026: LD_ADDR_VAR 0 4
71030: PUSH
71031: LD_VAR 0 5
71035: ST_TO_ADDR
// end ;
71036: LD_VAR 0 4
71040: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
71041: LD_INT 0
71043: PPUSH
71044: PPUSH
71045: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
71046: LD_VAR 0 1
71050: NOT
71051: PUSH
71052: LD_VAR 0 2
71056: PUSH
71057: LD_INT 1
71059: PUSH
71060: LD_INT 2
71062: PUSH
71063: LD_INT 3
71065: PUSH
71066: LD_INT 4
71068: PUSH
71069: EMPTY
71070: LIST
71071: LIST
71072: LIST
71073: LIST
71074: IN
71075: NOT
71076: OR
71077: IFFALSE 71081
// exit ;
71079: GO 71173
// tmp := [ ] ;
71081: LD_ADDR_VAR 0 5
71085: PUSH
71086: EMPTY
71087: ST_TO_ADDR
// for i in units do
71088: LD_ADDR_VAR 0 4
71092: PUSH
71093: LD_VAR 0 1
71097: PUSH
71098: FOR_IN
71099: IFFALSE 71142
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
71101: LD_ADDR_VAR 0 5
71105: PUSH
71106: LD_VAR 0 5
71110: PPUSH
71111: LD_VAR 0 5
71115: PUSH
71116: LD_INT 1
71118: PLUS
71119: PPUSH
71120: LD_VAR 0 4
71124: PPUSH
71125: LD_VAR 0 2
71129: PPUSH
71130: CALL_OW 259
71134: PPUSH
71135: CALL_OW 2
71139: ST_TO_ADDR
71140: GO 71098
71142: POP
71143: POP
// if not tmp then
71144: LD_VAR 0 5
71148: NOT
71149: IFFALSE 71153
// exit ;
71151: GO 71173
// result := SortListByListDesc ( units , tmp ) ;
71153: LD_ADDR_VAR 0 3
71157: PUSH
71158: LD_VAR 0 1
71162: PPUSH
71163: LD_VAR 0 5
71167: PPUSH
71168: CALL_OW 77
71172: ST_TO_ADDR
// end ;
71173: LD_VAR 0 3
71177: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
71178: LD_INT 0
71180: PPUSH
71181: PPUSH
71182: PPUSH
// result := false ;
71183: LD_ADDR_VAR 0 3
71187: PUSH
71188: LD_INT 0
71190: ST_TO_ADDR
// x := GetX ( building ) ;
71191: LD_ADDR_VAR 0 4
71195: PUSH
71196: LD_VAR 0 2
71200: PPUSH
71201: CALL_OW 250
71205: ST_TO_ADDR
// y := GetY ( building ) ;
71206: LD_ADDR_VAR 0 5
71210: PUSH
71211: LD_VAR 0 2
71215: PPUSH
71216: CALL_OW 251
71220: ST_TO_ADDR
// if not building or not x or not y then
71221: LD_VAR 0 2
71225: NOT
71226: PUSH
71227: LD_VAR 0 4
71231: NOT
71232: OR
71233: PUSH
71234: LD_VAR 0 5
71238: NOT
71239: OR
71240: IFFALSE 71244
// exit ;
71242: GO 71336
// if GetTaskList ( unit ) then
71244: LD_VAR 0 1
71248: PPUSH
71249: CALL_OW 437
71253: IFFALSE 71336
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71255: LD_STRING e
71257: PUSH
71258: LD_VAR 0 1
71262: PPUSH
71263: CALL_OW 437
71267: PUSH
71268: LD_INT 1
71270: ARRAY
71271: PUSH
71272: LD_INT 1
71274: ARRAY
71275: EQUAL
71276: PUSH
71277: LD_VAR 0 4
71281: PUSH
71282: LD_VAR 0 1
71286: PPUSH
71287: CALL_OW 437
71291: PUSH
71292: LD_INT 1
71294: ARRAY
71295: PUSH
71296: LD_INT 2
71298: ARRAY
71299: EQUAL
71300: AND
71301: PUSH
71302: LD_VAR 0 5
71306: PUSH
71307: LD_VAR 0 1
71311: PPUSH
71312: CALL_OW 437
71316: PUSH
71317: LD_INT 1
71319: ARRAY
71320: PUSH
71321: LD_INT 3
71323: ARRAY
71324: EQUAL
71325: AND
71326: IFFALSE 71336
// result := true end ;
71328: LD_ADDR_VAR 0 3
71332: PUSH
71333: LD_INT 1
71335: ST_TO_ADDR
// end ;
71336: LD_VAR 0 3
71340: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
71341: LD_INT 0
71343: PPUSH
// result := false ;
71344: LD_ADDR_VAR 0 4
71348: PUSH
71349: LD_INT 0
71351: ST_TO_ADDR
// if GetTaskList ( unit ) then
71352: LD_VAR 0 1
71356: PPUSH
71357: CALL_OW 437
71361: IFFALSE 71444
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71363: LD_STRING M
71365: PUSH
71366: LD_VAR 0 1
71370: PPUSH
71371: CALL_OW 437
71375: PUSH
71376: LD_INT 1
71378: ARRAY
71379: PUSH
71380: LD_INT 1
71382: ARRAY
71383: EQUAL
71384: PUSH
71385: LD_VAR 0 2
71389: PUSH
71390: LD_VAR 0 1
71394: PPUSH
71395: CALL_OW 437
71399: PUSH
71400: LD_INT 1
71402: ARRAY
71403: PUSH
71404: LD_INT 2
71406: ARRAY
71407: EQUAL
71408: AND
71409: PUSH
71410: LD_VAR 0 3
71414: PUSH
71415: LD_VAR 0 1
71419: PPUSH
71420: CALL_OW 437
71424: PUSH
71425: LD_INT 1
71427: ARRAY
71428: PUSH
71429: LD_INT 3
71431: ARRAY
71432: EQUAL
71433: AND
71434: IFFALSE 71444
// result := true ;
71436: LD_ADDR_VAR 0 4
71440: PUSH
71441: LD_INT 1
71443: ST_TO_ADDR
// end ; end ;
71444: LD_VAR 0 4
71448: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
71449: LD_INT 0
71451: PPUSH
71452: PPUSH
71453: PPUSH
71454: PPUSH
// if not unit or not area then
71455: LD_VAR 0 1
71459: NOT
71460: PUSH
71461: LD_VAR 0 2
71465: NOT
71466: OR
71467: IFFALSE 71471
// exit ;
71469: GO 71635
// tmp := AreaToList ( area , i ) ;
71471: LD_ADDR_VAR 0 6
71475: PUSH
71476: LD_VAR 0 2
71480: PPUSH
71481: LD_VAR 0 5
71485: PPUSH
71486: CALL_OW 517
71490: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
71491: LD_ADDR_VAR 0 5
71495: PUSH
71496: DOUBLE
71497: LD_INT 1
71499: DEC
71500: ST_TO_ADDR
71501: LD_VAR 0 6
71505: PUSH
71506: LD_INT 1
71508: ARRAY
71509: PUSH
71510: FOR_TO
71511: IFFALSE 71633
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
71513: LD_ADDR_VAR 0 7
71517: PUSH
71518: LD_VAR 0 6
71522: PUSH
71523: LD_INT 1
71525: ARRAY
71526: PUSH
71527: LD_VAR 0 5
71531: ARRAY
71532: PUSH
71533: LD_VAR 0 6
71537: PUSH
71538: LD_INT 2
71540: ARRAY
71541: PUSH
71542: LD_VAR 0 5
71546: ARRAY
71547: PUSH
71548: EMPTY
71549: LIST
71550: LIST
71551: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
71552: LD_VAR 0 7
71556: PUSH
71557: LD_INT 1
71559: ARRAY
71560: PPUSH
71561: LD_VAR 0 7
71565: PUSH
71566: LD_INT 2
71568: ARRAY
71569: PPUSH
71570: CALL_OW 428
71574: PUSH
71575: LD_INT 0
71577: EQUAL
71578: IFFALSE 71631
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
71580: LD_VAR 0 1
71584: PPUSH
71585: LD_VAR 0 7
71589: PUSH
71590: LD_INT 1
71592: ARRAY
71593: PPUSH
71594: LD_VAR 0 7
71598: PUSH
71599: LD_INT 2
71601: ARRAY
71602: PPUSH
71603: LD_VAR 0 3
71607: PPUSH
71608: CALL_OW 48
// result := IsPlaced ( unit ) ;
71612: LD_ADDR_VAR 0 4
71616: PUSH
71617: LD_VAR 0 1
71621: PPUSH
71622: CALL_OW 305
71626: ST_TO_ADDR
// exit ;
71627: POP
71628: POP
71629: GO 71635
// end ; end ;
71631: GO 71510
71633: POP
71634: POP
// end ;
71635: LD_VAR 0 4
71639: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
71640: LD_INT 0
71642: PPUSH
71643: PPUSH
71644: PPUSH
// if not side or side > 8 then
71645: LD_VAR 0 1
71649: NOT
71650: PUSH
71651: LD_VAR 0 1
71655: PUSH
71656: LD_INT 8
71658: GREATER
71659: OR
71660: IFFALSE 71664
// exit ;
71662: GO 71851
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
71664: LD_ADDR_VAR 0 4
71668: PUSH
71669: LD_INT 22
71671: PUSH
71672: LD_VAR 0 1
71676: PUSH
71677: EMPTY
71678: LIST
71679: LIST
71680: PUSH
71681: LD_INT 21
71683: PUSH
71684: LD_INT 3
71686: PUSH
71687: EMPTY
71688: LIST
71689: LIST
71690: PUSH
71691: EMPTY
71692: LIST
71693: LIST
71694: PPUSH
71695: CALL_OW 69
71699: ST_TO_ADDR
// if not tmp then
71700: LD_VAR 0 4
71704: NOT
71705: IFFALSE 71709
// exit ;
71707: GO 71851
// enable_addtolog := true ;
71709: LD_ADDR_OWVAR 81
71713: PUSH
71714: LD_INT 1
71716: ST_TO_ADDR
// AddToLog ( [ ) ;
71717: LD_STRING [
71719: PPUSH
71720: CALL_OW 561
// for i in tmp do
71724: LD_ADDR_VAR 0 3
71728: PUSH
71729: LD_VAR 0 4
71733: PUSH
71734: FOR_IN
71735: IFFALSE 71842
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
71737: LD_STRING [
71739: PUSH
71740: LD_VAR 0 3
71744: PPUSH
71745: CALL_OW 266
71749: STR
71750: PUSH
71751: LD_STRING , 
71753: STR
71754: PUSH
71755: LD_VAR 0 3
71759: PPUSH
71760: CALL_OW 250
71764: STR
71765: PUSH
71766: LD_STRING , 
71768: STR
71769: PUSH
71770: LD_VAR 0 3
71774: PPUSH
71775: CALL_OW 251
71779: STR
71780: PUSH
71781: LD_STRING , 
71783: STR
71784: PUSH
71785: LD_VAR 0 3
71789: PPUSH
71790: CALL_OW 254
71794: STR
71795: PUSH
71796: LD_STRING , 
71798: STR
71799: PUSH
71800: LD_VAR 0 3
71804: PPUSH
71805: LD_INT 1
71807: PPUSH
71808: CALL_OW 268
71812: STR
71813: PUSH
71814: LD_STRING , 
71816: STR
71817: PUSH
71818: LD_VAR 0 3
71822: PPUSH
71823: LD_INT 2
71825: PPUSH
71826: CALL_OW 268
71830: STR
71831: PUSH
71832: LD_STRING ],
71834: STR
71835: PPUSH
71836: CALL_OW 561
// end ;
71840: GO 71734
71842: POP
71843: POP
// AddToLog ( ]; ) ;
71844: LD_STRING ];
71846: PPUSH
71847: CALL_OW 561
// end ;
71851: LD_VAR 0 2
71855: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
71856: LD_INT 0
71858: PPUSH
71859: PPUSH
71860: PPUSH
71861: PPUSH
71862: PPUSH
// if not area or not rate or not max then
71863: LD_VAR 0 1
71867: NOT
71868: PUSH
71869: LD_VAR 0 2
71873: NOT
71874: OR
71875: PUSH
71876: LD_VAR 0 4
71880: NOT
71881: OR
71882: IFFALSE 71886
// exit ;
71884: GO 72075
// while 1 do
71886: LD_INT 1
71888: IFFALSE 72075
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
71890: LD_ADDR_VAR 0 9
71894: PUSH
71895: LD_VAR 0 1
71899: PPUSH
71900: LD_INT 1
71902: PPUSH
71903: CALL_OW 287
71907: PUSH
71908: LD_INT 10
71910: MUL
71911: ST_TO_ADDR
// r := rate / 10 ;
71912: LD_ADDR_VAR 0 7
71916: PUSH
71917: LD_VAR 0 2
71921: PUSH
71922: LD_INT 10
71924: DIVREAL
71925: ST_TO_ADDR
// time := 1 1$00 ;
71926: LD_ADDR_VAR 0 8
71930: PUSH
71931: LD_INT 2100
71933: ST_TO_ADDR
// if amount < min then
71934: LD_VAR 0 9
71938: PUSH
71939: LD_VAR 0 3
71943: LESS
71944: IFFALSE 71962
// r := r * 2 else
71946: LD_ADDR_VAR 0 7
71950: PUSH
71951: LD_VAR 0 7
71955: PUSH
71956: LD_INT 2
71958: MUL
71959: ST_TO_ADDR
71960: GO 71988
// if amount > max then
71962: LD_VAR 0 9
71966: PUSH
71967: LD_VAR 0 4
71971: GREATER
71972: IFFALSE 71988
// r := r / 2 ;
71974: LD_ADDR_VAR 0 7
71978: PUSH
71979: LD_VAR 0 7
71983: PUSH
71984: LD_INT 2
71986: DIVREAL
71987: ST_TO_ADDR
// time := time / r ;
71988: LD_ADDR_VAR 0 8
71992: PUSH
71993: LD_VAR 0 8
71997: PUSH
71998: LD_VAR 0 7
72002: DIVREAL
72003: ST_TO_ADDR
// if time < 0 then
72004: LD_VAR 0 8
72008: PUSH
72009: LD_INT 0
72011: LESS
72012: IFFALSE 72029
// time := time * - 1 ;
72014: LD_ADDR_VAR 0 8
72018: PUSH
72019: LD_VAR 0 8
72023: PUSH
72024: LD_INT 1
72026: NEG
72027: MUL
72028: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
72029: LD_VAR 0 8
72033: PUSH
72034: LD_INT 35
72036: PPUSH
72037: LD_INT 875
72039: PPUSH
72040: CALL_OW 12
72044: PLUS
72045: PPUSH
72046: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
72050: LD_INT 1
72052: PPUSH
72053: LD_INT 5
72055: PPUSH
72056: CALL_OW 12
72060: PPUSH
72061: LD_VAR 0 1
72065: PPUSH
72066: LD_INT 1
72068: PPUSH
72069: CALL_OW 55
// end ;
72073: GO 71886
// end ;
72075: LD_VAR 0 5
72079: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
72080: LD_INT 0
72082: PPUSH
72083: PPUSH
72084: PPUSH
72085: PPUSH
72086: PPUSH
72087: PPUSH
72088: PPUSH
72089: PPUSH
// if not turrets or not factories then
72090: LD_VAR 0 1
72094: NOT
72095: PUSH
72096: LD_VAR 0 2
72100: NOT
72101: OR
72102: IFFALSE 72106
// exit ;
72104: GO 72413
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
72106: LD_ADDR_VAR 0 10
72110: PUSH
72111: LD_INT 5
72113: PUSH
72114: LD_INT 6
72116: PUSH
72117: EMPTY
72118: LIST
72119: LIST
72120: PUSH
72121: LD_INT 2
72123: PUSH
72124: LD_INT 4
72126: PUSH
72127: EMPTY
72128: LIST
72129: LIST
72130: PUSH
72131: LD_INT 3
72133: PUSH
72134: LD_INT 5
72136: PUSH
72137: EMPTY
72138: LIST
72139: LIST
72140: PUSH
72141: EMPTY
72142: LIST
72143: LIST
72144: LIST
72145: PUSH
72146: LD_INT 24
72148: PUSH
72149: LD_INT 25
72151: PUSH
72152: EMPTY
72153: LIST
72154: LIST
72155: PUSH
72156: LD_INT 23
72158: PUSH
72159: LD_INT 27
72161: PUSH
72162: EMPTY
72163: LIST
72164: LIST
72165: PUSH
72166: EMPTY
72167: LIST
72168: LIST
72169: PUSH
72170: LD_INT 42
72172: PUSH
72173: LD_INT 43
72175: PUSH
72176: EMPTY
72177: LIST
72178: LIST
72179: PUSH
72180: LD_INT 44
72182: PUSH
72183: LD_INT 46
72185: PUSH
72186: EMPTY
72187: LIST
72188: LIST
72189: PUSH
72190: LD_INT 45
72192: PUSH
72193: LD_INT 47
72195: PUSH
72196: EMPTY
72197: LIST
72198: LIST
72199: PUSH
72200: EMPTY
72201: LIST
72202: LIST
72203: LIST
72204: PUSH
72205: EMPTY
72206: LIST
72207: LIST
72208: LIST
72209: ST_TO_ADDR
// result := [ ] ;
72210: LD_ADDR_VAR 0 3
72214: PUSH
72215: EMPTY
72216: ST_TO_ADDR
// for i in turrets do
72217: LD_ADDR_VAR 0 4
72221: PUSH
72222: LD_VAR 0 1
72226: PUSH
72227: FOR_IN
72228: IFFALSE 72411
// begin nat := GetNation ( i ) ;
72230: LD_ADDR_VAR 0 7
72234: PUSH
72235: LD_VAR 0 4
72239: PPUSH
72240: CALL_OW 248
72244: ST_TO_ADDR
// weapon := 0 ;
72245: LD_ADDR_VAR 0 8
72249: PUSH
72250: LD_INT 0
72252: ST_TO_ADDR
// if not nat then
72253: LD_VAR 0 7
72257: NOT
72258: IFFALSE 72262
// continue ;
72260: GO 72227
// for j in list [ nat ] do
72262: LD_ADDR_VAR 0 5
72266: PUSH
72267: LD_VAR 0 10
72271: PUSH
72272: LD_VAR 0 7
72276: ARRAY
72277: PUSH
72278: FOR_IN
72279: IFFALSE 72320
// if GetBWeapon ( i ) = j [ 1 ] then
72281: LD_VAR 0 4
72285: PPUSH
72286: CALL_OW 269
72290: PUSH
72291: LD_VAR 0 5
72295: PUSH
72296: LD_INT 1
72298: ARRAY
72299: EQUAL
72300: IFFALSE 72318
// begin weapon := j [ 2 ] ;
72302: LD_ADDR_VAR 0 8
72306: PUSH
72307: LD_VAR 0 5
72311: PUSH
72312: LD_INT 2
72314: ARRAY
72315: ST_TO_ADDR
// break ;
72316: GO 72320
// end ;
72318: GO 72278
72320: POP
72321: POP
// if not weapon then
72322: LD_VAR 0 8
72326: NOT
72327: IFFALSE 72331
// continue ;
72329: GO 72227
// for k in factories do
72331: LD_ADDR_VAR 0 6
72335: PUSH
72336: LD_VAR 0 2
72340: PUSH
72341: FOR_IN
72342: IFFALSE 72407
// begin weapons := AvailableWeaponList ( k ) ;
72344: LD_ADDR_VAR 0 9
72348: PUSH
72349: LD_VAR 0 6
72353: PPUSH
72354: CALL_OW 478
72358: ST_TO_ADDR
// if not weapons then
72359: LD_VAR 0 9
72363: NOT
72364: IFFALSE 72368
// continue ;
72366: GO 72341
// if weapon in weapons then
72368: LD_VAR 0 8
72372: PUSH
72373: LD_VAR 0 9
72377: IN
72378: IFFALSE 72405
// begin result := [ i , weapon ] ;
72380: LD_ADDR_VAR 0 3
72384: PUSH
72385: LD_VAR 0 4
72389: PUSH
72390: LD_VAR 0 8
72394: PUSH
72395: EMPTY
72396: LIST
72397: LIST
72398: ST_TO_ADDR
// exit ;
72399: POP
72400: POP
72401: POP
72402: POP
72403: GO 72413
// end ; end ;
72405: GO 72341
72407: POP
72408: POP
// end ;
72409: GO 72227
72411: POP
72412: POP
// end ;
72413: LD_VAR 0 3
72417: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
72418: LD_INT 0
72420: PPUSH
// if not side or side > 8 then
72421: LD_VAR 0 3
72425: NOT
72426: PUSH
72427: LD_VAR 0 3
72431: PUSH
72432: LD_INT 8
72434: GREATER
72435: OR
72436: IFFALSE 72440
// exit ;
72438: GO 72499
// if not range then
72440: LD_VAR 0 4
72444: NOT
72445: IFFALSE 72456
// range := - 12 ;
72447: LD_ADDR_VAR 0 4
72451: PUSH
72452: LD_INT 12
72454: NEG
72455: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
72456: LD_VAR 0 1
72460: PPUSH
72461: LD_VAR 0 2
72465: PPUSH
72466: LD_VAR 0 3
72470: PPUSH
72471: LD_VAR 0 4
72475: PPUSH
72476: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
72480: LD_VAR 0 1
72484: PPUSH
72485: LD_VAR 0 2
72489: PPUSH
72490: LD_VAR 0 3
72494: PPUSH
72495: CALL_OW 331
// end ;
72499: LD_VAR 0 5
72503: RET
// export function Video ( mode ) ; begin
72504: LD_INT 0
72506: PPUSH
// ingame_video = mode ;
72507: LD_ADDR_OWVAR 52
72511: PUSH
72512: LD_VAR 0 1
72516: ST_TO_ADDR
// interface_hidden = mode ;
72517: LD_ADDR_OWVAR 54
72521: PUSH
72522: LD_VAR 0 1
72526: ST_TO_ADDR
// end ;
72527: LD_VAR 0 2
72531: RET
// export function Join ( array , element ) ; begin
72532: LD_INT 0
72534: PPUSH
// result := Replace ( array , array + 1 , element ) ;
72535: LD_ADDR_VAR 0 3
72539: PUSH
72540: LD_VAR 0 1
72544: PPUSH
72545: LD_VAR 0 1
72549: PUSH
72550: LD_INT 1
72552: PLUS
72553: PPUSH
72554: LD_VAR 0 2
72558: PPUSH
72559: CALL_OW 1
72563: ST_TO_ADDR
// end ;
72564: LD_VAR 0 3
72568: RET
// export function JoinUnion ( array , element ) ; begin
72569: LD_INT 0
72571: PPUSH
// result := array union element ;
72572: LD_ADDR_VAR 0 3
72576: PUSH
72577: LD_VAR 0 1
72581: PUSH
72582: LD_VAR 0 2
72586: UNION
72587: ST_TO_ADDR
// end ;
72588: LD_VAR 0 3
72592: RET
// export function GetBehemoths ( side ) ; begin
72593: LD_INT 0
72595: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
72596: LD_ADDR_VAR 0 2
72600: PUSH
72601: LD_INT 22
72603: PUSH
72604: LD_VAR 0 1
72608: PUSH
72609: EMPTY
72610: LIST
72611: LIST
72612: PUSH
72613: LD_INT 31
72615: PUSH
72616: LD_INT 25
72618: PUSH
72619: EMPTY
72620: LIST
72621: LIST
72622: PUSH
72623: EMPTY
72624: LIST
72625: LIST
72626: PPUSH
72627: CALL_OW 69
72631: ST_TO_ADDR
// end ;
72632: LD_VAR 0 2
72636: RET
// export function Shuffle ( array ) ; var i , index ; begin
72637: LD_INT 0
72639: PPUSH
72640: PPUSH
72641: PPUSH
// result := [ ] ;
72642: LD_ADDR_VAR 0 2
72646: PUSH
72647: EMPTY
72648: ST_TO_ADDR
// if not array then
72649: LD_VAR 0 1
72653: NOT
72654: IFFALSE 72658
// exit ;
72656: GO 72757
// Randomize ;
72658: CALL_OW 10
// for i = array downto 1 do
72662: LD_ADDR_VAR 0 3
72666: PUSH
72667: DOUBLE
72668: LD_VAR 0 1
72672: INC
72673: ST_TO_ADDR
72674: LD_INT 1
72676: PUSH
72677: FOR_DOWNTO
72678: IFFALSE 72755
// begin index := rand ( 1 , array ) ;
72680: LD_ADDR_VAR 0 4
72684: PUSH
72685: LD_INT 1
72687: PPUSH
72688: LD_VAR 0 1
72692: PPUSH
72693: CALL_OW 12
72697: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
72698: LD_ADDR_VAR 0 2
72702: PUSH
72703: LD_VAR 0 2
72707: PPUSH
72708: LD_VAR 0 2
72712: PUSH
72713: LD_INT 1
72715: PLUS
72716: PPUSH
72717: LD_VAR 0 1
72721: PUSH
72722: LD_VAR 0 4
72726: ARRAY
72727: PPUSH
72728: CALL_OW 2
72732: ST_TO_ADDR
// array := Delete ( array , index ) ;
72733: LD_ADDR_VAR 0 1
72737: PUSH
72738: LD_VAR 0 1
72742: PPUSH
72743: LD_VAR 0 4
72747: PPUSH
72748: CALL_OW 3
72752: ST_TO_ADDR
// end ;
72753: GO 72677
72755: POP
72756: POP
// end ;
72757: LD_VAR 0 2
72761: RET
// export function GetBaseMaterials ( base ) ; begin
72762: LD_INT 0
72764: PPUSH
// result := [ 0 , 0 , 0 ] ;
72765: LD_ADDR_VAR 0 2
72769: PUSH
72770: LD_INT 0
72772: PUSH
72773: LD_INT 0
72775: PUSH
72776: LD_INT 0
72778: PUSH
72779: EMPTY
72780: LIST
72781: LIST
72782: LIST
72783: ST_TO_ADDR
// if not base then
72784: LD_VAR 0 1
72788: NOT
72789: IFFALSE 72793
// exit ;
72791: GO 72842
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
72793: LD_ADDR_VAR 0 2
72797: PUSH
72798: LD_VAR 0 1
72802: PPUSH
72803: LD_INT 1
72805: PPUSH
72806: CALL_OW 275
72810: PUSH
72811: LD_VAR 0 1
72815: PPUSH
72816: LD_INT 2
72818: PPUSH
72819: CALL_OW 275
72823: PUSH
72824: LD_VAR 0 1
72828: PPUSH
72829: LD_INT 3
72831: PPUSH
72832: CALL_OW 275
72836: PUSH
72837: EMPTY
72838: LIST
72839: LIST
72840: LIST
72841: ST_TO_ADDR
// end ;
72842: LD_VAR 0 2
72846: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
72847: LD_INT 0
72849: PPUSH
72850: PPUSH
// result := array ;
72851: LD_ADDR_VAR 0 3
72855: PUSH
72856: LD_VAR 0 1
72860: ST_TO_ADDR
// if size >= result then
72861: LD_VAR 0 2
72865: PUSH
72866: LD_VAR 0 3
72870: GREATEREQUAL
72871: IFFALSE 72875
// exit ;
72873: GO 72925
// if size then
72875: LD_VAR 0 2
72879: IFFALSE 72925
// for i := array downto size do
72881: LD_ADDR_VAR 0 4
72885: PUSH
72886: DOUBLE
72887: LD_VAR 0 1
72891: INC
72892: ST_TO_ADDR
72893: LD_VAR 0 2
72897: PUSH
72898: FOR_DOWNTO
72899: IFFALSE 72923
// result := Delete ( result , result ) ;
72901: LD_ADDR_VAR 0 3
72905: PUSH
72906: LD_VAR 0 3
72910: PPUSH
72911: LD_VAR 0 3
72915: PPUSH
72916: CALL_OW 3
72920: ST_TO_ADDR
72921: GO 72898
72923: POP
72924: POP
// end ;
72925: LD_VAR 0 3
72929: RET
// export function ComExit ( unit ) ; var tmp ; begin
72930: LD_INT 0
72932: PPUSH
72933: PPUSH
// if not IsInUnit ( unit ) then
72934: LD_VAR 0 1
72938: PPUSH
72939: CALL_OW 310
72943: NOT
72944: IFFALSE 72948
// exit ;
72946: GO 73008
// tmp := IsInUnit ( unit ) ;
72948: LD_ADDR_VAR 0 3
72952: PUSH
72953: LD_VAR 0 1
72957: PPUSH
72958: CALL_OW 310
72962: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
72963: LD_VAR 0 3
72967: PPUSH
72968: CALL_OW 247
72972: PUSH
72973: LD_INT 2
72975: EQUAL
72976: IFFALSE 72989
// ComExitVehicle ( unit ) else
72978: LD_VAR 0 1
72982: PPUSH
72983: CALL_OW 121
72987: GO 72998
// ComExitBuilding ( unit ) ;
72989: LD_VAR 0 1
72993: PPUSH
72994: CALL_OW 122
// result := tmp ;
72998: LD_ADDR_VAR 0 2
73002: PUSH
73003: LD_VAR 0 3
73007: ST_TO_ADDR
// end ;
73008: LD_VAR 0 2
73012: RET
// export function ComExitAll ( units ) ; var i ; begin
73013: LD_INT 0
73015: PPUSH
73016: PPUSH
// if not units then
73017: LD_VAR 0 1
73021: NOT
73022: IFFALSE 73026
// exit ;
73024: GO 73052
// for i in units do
73026: LD_ADDR_VAR 0 3
73030: PUSH
73031: LD_VAR 0 1
73035: PUSH
73036: FOR_IN
73037: IFFALSE 73050
// ComExit ( i ) ;
73039: LD_VAR 0 3
73043: PPUSH
73044: CALL 72930 0 1
73048: GO 73036
73050: POP
73051: POP
// end ;
73052: LD_VAR 0 2
73056: RET
// export function ResetHc ; begin
73057: LD_INT 0
73059: PPUSH
// InitHc ;
73060: CALL_OW 19
// hc_importance := 0 ;
73064: LD_ADDR_OWVAR 32
73068: PUSH
73069: LD_INT 0
73071: ST_TO_ADDR
// end ;
73072: LD_VAR 0 1
73076: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
73077: LD_INT 0
73079: PPUSH
73080: PPUSH
73081: PPUSH
// _x := ( x1 + x2 ) div 2 ;
73082: LD_ADDR_VAR 0 6
73086: PUSH
73087: LD_VAR 0 1
73091: PUSH
73092: LD_VAR 0 3
73096: PLUS
73097: PUSH
73098: LD_INT 2
73100: DIV
73101: ST_TO_ADDR
// if _x < 0 then
73102: LD_VAR 0 6
73106: PUSH
73107: LD_INT 0
73109: LESS
73110: IFFALSE 73127
// _x := _x * - 1 ;
73112: LD_ADDR_VAR 0 6
73116: PUSH
73117: LD_VAR 0 6
73121: PUSH
73122: LD_INT 1
73124: NEG
73125: MUL
73126: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
73127: LD_ADDR_VAR 0 7
73131: PUSH
73132: LD_VAR 0 2
73136: PUSH
73137: LD_VAR 0 4
73141: PLUS
73142: PUSH
73143: LD_INT 2
73145: DIV
73146: ST_TO_ADDR
// if _y < 0 then
73147: LD_VAR 0 7
73151: PUSH
73152: LD_INT 0
73154: LESS
73155: IFFALSE 73172
// _y := _y * - 1 ;
73157: LD_ADDR_VAR 0 7
73161: PUSH
73162: LD_VAR 0 7
73166: PUSH
73167: LD_INT 1
73169: NEG
73170: MUL
73171: ST_TO_ADDR
// result := [ _x , _y ] ;
73172: LD_ADDR_VAR 0 5
73176: PUSH
73177: LD_VAR 0 6
73181: PUSH
73182: LD_VAR 0 7
73186: PUSH
73187: EMPTY
73188: LIST
73189: LIST
73190: ST_TO_ADDR
// end ;
73191: LD_VAR 0 5
73195: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
73196: LD_INT 0
73198: PPUSH
73199: PPUSH
73200: PPUSH
73201: PPUSH
// task := GetTaskList ( unit ) ;
73202: LD_ADDR_VAR 0 7
73206: PUSH
73207: LD_VAR 0 1
73211: PPUSH
73212: CALL_OW 437
73216: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
73217: LD_VAR 0 7
73221: NOT
73222: PUSH
73223: LD_VAR 0 1
73227: PPUSH
73228: LD_VAR 0 2
73232: PPUSH
73233: CALL_OW 308
73237: NOT
73238: AND
73239: IFFALSE 73243
// exit ;
73241: GO 73361
// if IsInArea ( unit , area ) then
73243: LD_VAR 0 1
73247: PPUSH
73248: LD_VAR 0 2
73252: PPUSH
73253: CALL_OW 308
73257: IFFALSE 73275
// begin ComMoveToArea ( unit , goAway ) ;
73259: LD_VAR 0 1
73263: PPUSH
73264: LD_VAR 0 3
73268: PPUSH
73269: CALL_OW 113
// exit ;
73273: GO 73361
// end ; if task [ 1 ] [ 1 ] <> M then
73275: LD_VAR 0 7
73279: PUSH
73280: LD_INT 1
73282: ARRAY
73283: PUSH
73284: LD_INT 1
73286: ARRAY
73287: PUSH
73288: LD_STRING M
73290: NONEQUAL
73291: IFFALSE 73295
// exit ;
73293: GO 73361
// x := task [ 1 ] [ 2 ] ;
73295: LD_ADDR_VAR 0 5
73299: PUSH
73300: LD_VAR 0 7
73304: PUSH
73305: LD_INT 1
73307: ARRAY
73308: PUSH
73309: LD_INT 2
73311: ARRAY
73312: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
73313: LD_ADDR_VAR 0 6
73317: PUSH
73318: LD_VAR 0 7
73322: PUSH
73323: LD_INT 1
73325: ARRAY
73326: PUSH
73327: LD_INT 3
73329: ARRAY
73330: ST_TO_ADDR
// if InArea ( x , y , area ) then
73331: LD_VAR 0 5
73335: PPUSH
73336: LD_VAR 0 6
73340: PPUSH
73341: LD_VAR 0 2
73345: PPUSH
73346: CALL_OW 309
73350: IFFALSE 73361
// ComStop ( unit ) ;
73352: LD_VAR 0 1
73356: PPUSH
73357: CALL_OW 141
// end ;
73361: LD_VAR 0 4
73365: RET
// export function Abs ( value ) ; begin
73366: LD_INT 0
73368: PPUSH
// result := value ;
73369: LD_ADDR_VAR 0 2
73373: PUSH
73374: LD_VAR 0 1
73378: ST_TO_ADDR
// if value < 0 then
73379: LD_VAR 0 1
73383: PUSH
73384: LD_INT 0
73386: LESS
73387: IFFALSE 73404
// result := value * - 1 ;
73389: LD_ADDR_VAR 0 2
73393: PUSH
73394: LD_VAR 0 1
73398: PUSH
73399: LD_INT 1
73401: NEG
73402: MUL
73403: ST_TO_ADDR
// end ;
73404: LD_VAR 0 2
73408: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
73409: LD_INT 0
73411: PPUSH
73412: PPUSH
73413: PPUSH
73414: PPUSH
73415: PPUSH
73416: PPUSH
73417: PPUSH
73418: PPUSH
// if not unit or not building then
73419: LD_VAR 0 1
73423: NOT
73424: PUSH
73425: LD_VAR 0 2
73429: NOT
73430: OR
73431: IFFALSE 73435
// exit ;
73433: GO 73661
// x := GetX ( building ) ;
73435: LD_ADDR_VAR 0 4
73439: PUSH
73440: LD_VAR 0 2
73444: PPUSH
73445: CALL_OW 250
73449: ST_TO_ADDR
// y := GetY ( building ) ;
73450: LD_ADDR_VAR 0 6
73454: PUSH
73455: LD_VAR 0 2
73459: PPUSH
73460: CALL_OW 251
73464: ST_TO_ADDR
// d := GetDir ( building ) ;
73465: LD_ADDR_VAR 0 8
73469: PUSH
73470: LD_VAR 0 2
73474: PPUSH
73475: CALL_OW 254
73479: ST_TO_ADDR
// r := 4 ;
73480: LD_ADDR_VAR 0 9
73484: PUSH
73485: LD_INT 4
73487: ST_TO_ADDR
// for i := 1 to 5 do
73488: LD_ADDR_VAR 0 10
73492: PUSH
73493: DOUBLE
73494: LD_INT 1
73496: DEC
73497: ST_TO_ADDR
73498: LD_INT 5
73500: PUSH
73501: FOR_TO
73502: IFFALSE 73659
// begin _x := ShiftX ( x , d , r + i ) ;
73504: LD_ADDR_VAR 0 5
73508: PUSH
73509: LD_VAR 0 4
73513: PPUSH
73514: LD_VAR 0 8
73518: PPUSH
73519: LD_VAR 0 9
73523: PUSH
73524: LD_VAR 0 10
73528: PLUS
73529: PPUSH
73530: CALL_OW 272
73534: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
73535: LD_ADDR_VAR 0 7
73539: PUSH
73540: LD_VAR 0 6
73544: PPUSH
73545: LD_VAR 0 8
73549: PPUSH
73550: LD_VAR 0 9
73554: PUSH
73555: LD_VAR 0 10
73559: PLUS
73560: PPUSH
73561: CALL_OW 273
73565: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
73566: LD_VAR 0 5
73570: PPUSH
73571: LD_VAR 0 7
73575: PPUSH
73576: CALL_OW 488
73580: PUSH
73581: LD_VAR 0 5
73585: PPUSH
73586: LD_VAR 0 7
73590: PPUSH
73591: CALL_OW 428
73595: PPUSH
73596: CALL_OW 247
73600: PUSH
73601: LD_INT 3
73603: PUSH
73604: LD_INT 2
73606: PUSH
73607: EMPTY
73608: LIST
73609: LIST
73610: IN
73611: NOT
73612: AND
73613: IFFALSE 73657
// begin ComMoveXY ( unit , _x , _y ) ;
73615: LD_VAR 0 1
73619: PPUSH
73620: LD_VAR 0 5
73624: PPUSH
73625: LD_VAR 0 7
73629: PPUSH
73630: CALL_OW 111
// result := [ _x , _y ] ;
73634: LD_ADDR_VAR 0 3
73638: PUSH
73639: LD_VAR 0 5
73643: PUSH
73644: LD_VAR 0 7
73648: PUSH
73649: EMPTY
73650: LIST
73651: LIST
73652: ST_TO_ADDR
// exit ;
73653: POP
73654: POP
73655: GO 73661
// end ; end ;
73657: GO 73501
73659: POP
73660: POP
// end ;
73661: LD_VAR 0 3
73665: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
73666: LD_INT 0
73668: PPUSH
73669: PPUSH
73670: PPUSH
// result := 0 ;
73671: LD_ADDR_VAR 0 3
73675: PUSH
73676: LD_INT 0
73678: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
73679: LD_VAR 0 1
73683: PUSH
73684: LD_INT 0
73686: LESS
73687: PUSH
73688: LD_VAR 0 1
73692: PUSH
73693: LD_INT 8
73695: GREATER
73696: OR
73697: PUSH
73698: LD_VAR 0 2
73702: PUSH
73703: LD_INT 0
73705: LESS
73706: OR
73707: PUSH
73708: LD_VAR 0 2
73712: PUSH
73713: LD_INT 8
73715: GREATER
73716: OR
73717: IFFALSE 73721
// exit ;
73719: GO 73796
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
73721: LD_ADDR_VAR 0 4
73725: PUSH
73726: LD_INT 22
73728: PUSH
73729: LD_VAR 0 2
73733: PUSH
73734: EMPTY
73735: LIST
73736: LIST
73737: PPUSH
73738: CALL_OW 69
73742: PUSH
73743: FOR_IN
73744: IFFALSE 73794
// begin un := UnitShoot ( i ) ;
73746: LD_ADDR_VAR 0 5
73750: PUSH
73751: LD_VAR 0 4
73755: PPUSH
73756: CALL_OW 504
73760: ST_TO_ADDR
// if GetSide ( un ) = side1 then
73761: LD_VAR 0 5
73765: PPUSH
73766: CALL_OW 255
73770: PUSH
73771: LD_VAR 0 1
73775: EQUAL
73776: IFFALSE 73792
// begin result := un ;
73778: LD_ADDR_VAR 0 3
73782: PUSH
73783: LD_VAR 0 5
73787: ST_TO_ADDR
// exit ;
73788: POP
73789: POP
73790: GO 73796
// end ; end ;
73792: GO 73743
73794: POP
73795: POP
// end ;
73796: LD_VAR 0 3
73800: RET
// export function GetCargoBay ( units ) ; begin
73801: LD_INT 0
73803: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
73804: LD_ADDR_VAR 0 2
73808: PUSH
73809: LD_VAR 0 1
73813: PPUSH
73814: LD_INT 2
73816: PUSH
73817: LD_INT 34
73819: PUSH
73820: LD_INT 12
73822: PUSH
73823: EMPTY
73824: LIST
73825: LIST
73826: PUSH
73827: LD_INT 34
73829: PUSH
73830: LD_INT 51
73832: PUSH
73833: EMPTY
73834: LIST
73835: LIST
73836: PUSH
73837: LD_INT 34
73839: PUSH
73840: LD_INT 32
73842: PUSH
73843: EMPTY
73844: LIST
73845: LIST
73846: PUSH
73847: LD_INT 34
73849: PUSH
73850: LD_EXP 39
73854: PUSH
73855: EMPTY
73856: LIST
73857: LIST
73858: PUSH
73859: EMPTY
73860: LIST
73861: LIST
73862: LIST
73863: LIST
73864: LIST
73865: PPUSH
73866: CALL_OW 72
73870: ST_TO_ADDR
// end ;
73871: LD_VAR 0 2
73875: RET
// export function Negate ( value ) ; begin
73876: LD_INT 0
73878: PPUSH
// result := not value ;
73879: LD_ADDR_VAR 0 2
73883: PUSH
73884: LD_VAR 0 1
73888: NOT
73889: ST_TO_ADDR
// end ;
73890: LD_VAR 0 2
73894: RET
// export function Inc ( value ) ; begin
73895: LD_INT 0
73897: PPUSH
// result := value + 1 ;
73898: LD_ADDR_VAR 0 2
73902: PUSH
73903: LD_VAR 0 1
73907: PUSH
73908: LD_INT 1
73910: PLUS
73911: ST_TO_ADDR
// end ;
73912: LD_VAR 0 2
73916: RET
// export function Dec ( value ) ; begin
73917: LD_INT 0
73919: PPUSH
// result := value - 1 ;
73920: LD_ADDR_VAR 0 2
73924: PUSH
73925: LD_VAR 0 1
73929: PUSH
73930: LD_INT 1
73932: MINUS
73933: ST_TO_ADDR
// end ;
73934: LD_VAR 0 2
73938: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
73939: LD_INT 0
73941: PPUSH
73942: PPUSH
73943: PPUSH
73944: PPUSH
73945: PPUSH
73946: PPUSH
73947: PPUSH
73948: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
73949: LD_VAR 0 1
73953: PPUSH
73954: LD_VAR 0 2
73958: PPUSH
73959: CALL_OW 488
73963: NOT
73964: PUSH
73965: LD_VAR 0 3
73969: PPUSH
73970: LD_VAR 0 4
73974: PPUSH
73975: CALL_OW 488
73979: NOT
73980: OR
73981: IFFALSE 73994
// begin result := - 1 ;
73983: LD_ADDR_VAR 0 5
73987: PUSH
73988: LD_INT 1
73990: NEG
73991: ST_TO_ADDR
// exit ;
73992: GO 74229
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
73994: LD_ADDR_VAR 0 12
73998: PUSH
73999: LD_VAR 0 1
74003: PPUSH
74004: LD_VAR 0 2
74008: PPUSH
74009: LD_VAR 0 3
74013: PPUSH
74014: LD_VAR 0 4
74018: PPUSH
74019: CALL 73077 0 4
74023: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
74024: LD_ADDR_VAR 0 11
74028: PUSH
74029: LD_VAR 0 1
74033: PPUSH
74034: LD_VAR 0 2
74038: PPUSH
74039: LD_VAR 0 12
74043: PUSH
74044: LD_INT 1
74046: ARRAY
74047: PPUSH
74048: LD_VAR 0 12
74052: PUSH
74053: LD_INT 2
74055: ARRAY
74056: PPUSH
74057: CALL_OW 298
74061: ST_TO_ADDR
// distance := 9999 ;
74062: LD_ADDR_VAR 0 10
74066: PUSH
74067: LD_INT 9999
74069: ST_TO_ADDR
// for i := 0 to 5 do
74070: LD_ADDR_VAR 0 6
74074: PUSH
74075: DOUBLE
74076: LD_INT 0
74078: DEC
74079: ST_TO_ADDR
74080: LD_INT 5
74082: PUSH
74083: FOR_TO
74084: IFFALSE 74227
// begin _x := ShiftX ( x1 , i , centerDist ) ;
74086: LD_ADDR_VAR 0 7
74090: PUSH
74091: LD_VAR 0 1
74095: PPUSH
74096: LD_VAR 0 6
74100: PPUSH
74101: LD_VAR 0 11
74105: PPUSH
74106: CALL_OW 272
74110: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
74111: LD_ADDR_VAR 0 8
74115: PUSH
74116: LD_VAR 0 2
74120: PPUSH
74121: LD_VAR 0 6
74125: PPUSH
74126: LD_VAR 0 11
74130: PPUSH
74131: CALL_OW 273
74135: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
74136: LD_VAR 0 7
74140: PPUSH
74141: LD_VAR 0 8
74145: PPUSH
74146: CALL_OW 488
74150: NOT
74151: IFFALSE 74155
// continue ;
74153: GO 74083
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
74155: LD_ADDR_VAR 0 9
74159: PUSH
74160: LD_VAR 0 12
74164: PUSH
74165: LD_INT 1
74167: ARRAY
74168: PPUSH
74169: LD_VAR 0 12
74173: PUSH
74174: LD_INT 2
74176: ARRAY
74177: PPUSH
74178: LD_VAR 0 7
74182: PPUSH
74183: LD_VAR 0 8
74187: PPUSH
74188: CALL_OW 298
74192: ST_TO_ADDR
// if tmp < distance then
74193: LD_VAR 0 9
74197: PUSH
74198: LD_VAR 0 10
74202: LESS
74203: IFFALSE 74225
// begin result := i ;
74205: LD_ADDR_VAR 0 5
74209: PUSH
74210: LD_VAR 0 6
74214: ST_TO_ADDR
// distance := tmp ;
74215: LD_ADDR_VAR 0 10
74219: PUSH
74220: LD_VAR 0 9
74224: ST_TO_ADDR
// end ; end ;
74225: GO 74083
74227: POP
74228: POP
// end ;
74229: LD_VAR 0 5
74233: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74234: LD_INT 0
74236: PPUSH
74237: PPUSH
// if not driver or not IsInUnit ( driver ) then
74238: LD_VAR 0 1
74242: NOT
74243: PUSH
74244: LD_VAR 0 1
74248: PPUSH
74249: CALL_OW 310
74253: NOT
74254: OR
74255: IFFALSE 74259
// exit ;
74257: GO 74349
// vehicle := IsInUnit ( driver ) ;
74259: LD_ADDR_VAR 0 3
74263: PUSH
74264: LD_VAR 0 1
74268: PPUSH
74269: CALL_OW 310
74273: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74274: LD_VAR 0 1
74278: PPUSH
74279: LD_STRING \
74281: PUSH
74282: LD_INT 0
74284: PUSH
74285: LD_INT 0
74287: PUSH
74288: LD_INT 0
74290: PUSH
74291: LD_INT 0
74293: PUSH
74294: LD_INT 0
74296: PUSH
74297: LD_INT 0
74299: PUSH
74300: EMPTY
74301: LIST
74302: LIST
74303: LIST
74304: LIST
74305: LIST
74306: LIST
74307: LIST
74308: PUSH
74309: LD_STRING E
74311: PUSH
74312: LD_INT 0
74314: PUSH
74315: LD_INT 0
74317: PUSH
74318: LD_VAR 0 3
74322: PUSH
74323: LD_INT 0
74325: PUSH
74326: LD_INT 0
74328: PUSH
74329: LD_INT 0
74331: PUSH
74332: EMPTY
74333: LIST
74334: LIST
74335: LIST
74336: LIST
74337: LIST
74338: LIST
74339: LIST
74340: PUSH
74341: EMPTY
74342: LIST
74343: LIST
74344: PPUSH
74345: CALL_OW 446
// end ;
74349: LD_VAR 0 2
74353: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74354: LD_INT 0
74356: PPUSH
74357: PPUSH
// if not driver or not IsInUnit ( driver ) then
74358: LD_VAR 0 1
74362: NOT
74363: PUSH
74364: LD_VAR 0 1
74368: PPUSH
74369: CALL_OW 310
74373: NOT
74374: OR
74375: IFFALSE 74379
// exit ;
74377: GO 74469
// vehicle := IsInUnit ( driver ) ;
74379: LD_ADDR_VAR 0 3
74383: PUSH
74384: LD_VAR 0 1
74388: PPUSH
74389: CALL_OW 310
74393: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74394: LD_VAR 0 1
74398: PPUSH
74399: LD_STRING \
74401: PUSH
74402: LD_INT 0
74404: PUSH
74405: LD_INT 0
74407: PUSH
74408: LD_INT 0
74410: PUSH
74411: LD_INT 0
74413: PUSH
74414: LD_INT 0
74416: PUSH
74417: LD_INT 0
74419: PUSH
74420: EMPTY
74421: LIST
74422: LIST
74423: LIST
74424: LIST
74425: LIST
74426: LIST
74427: LIST
74428: PUSH
74429: LD_STRING E
74431: PUSH
74432: LD_INT 0
74434: PUSH
74435: LD_INT 0
74437: PUSH
74438: LD_VAR 0 3
74442: PUSH
74443: LD_INT 0
74445: PUSH
74446: LD_INT 0
74448: PUSH
74449: LD_INT 0
74451: PUSH
74452: EMPTY
74453: LIST
74454: LIST
74455: LIST
74456: LIST
74457: LIST
74458: LIST
74459: LIST
74460: PUSH
74461: EMPTY
74462: LIST
74463: LIST
74464: PPUSH
74465: CALL_OW 447
// end ;
74469: LD_VAR 0 2
74473: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
74474: LD_INT 0
74476: PPUSH
74477: PPUSH
74478: PPUSH
// tmp := [ ] ;
74479: LD_ADDR_VAR 0 5
74483: PUSH
74484: EMPTY
74485: ST_TO_ADDR
// for i in units do
74486: LD_ADDR_VAR 0 4
74490: PUSH
74491: LD_VAR 0 1
74495: PUSH
74496: FOR_IN
74497: IFFALSE 74535
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
74499: LD_ADDR_VAR 0 5
74503: PUSH
74504: LD_VAR 0 5
74508: PPUSH
74509: LD_VAR 0 5
74513: PUSH
74514: LD_INT 1
74516: PLUS
74517: PPUSH
74518: LD_VAR 0 4
74522: PPUSH
74523: CALL_OW 256
74527: PPUSH
74528: CALL_OW 2
74532: ST_TO_ADDR
74533: GO 74496
74535: POP
74536: POP
// if not tmp then
74537: LD_VAR 0 5
74541: NOT
74542: IFFALSE 74546
// exit ;
74544: GO 74594
// if asc then
74546: LD_VAR 0 2
74550: IFFALSE 74574
// result := SortListByListAsc ( units , tmp ) else
74552: LD_ADDR_VAR 0 3
74556: PUSH
74557: LD_VAR 0 1
74561: PPUSH
74562: LD_VAR 0 5
74566: PPUSH
74567: CALL_OW 76
74571: ST_TO_ADDR
74572: GO 74594
// result := SortListByListDesc ( units , tmp ) ;
74574: LD_ADDR_VAR 0 3
74578: PUSH
74579: LD_VAR 0 1
74583: PPUSH
74584: LD_VAR 0 5
74588: PPUSH
74589: CALL_OW 77
74593: ST_TO_ADDR
// end ;
74594: LD_VAR 0 3
74598: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
74599: LD_INT 0
74601: PPUSH
74602: PPUSH
// task := GetTaskList ( mech ) ;
74603: LD_ADDR_VAR 0 4
74607: PUSH
74608: LD_VAR 0 1
74612: PPUSH
74613: CALL_OW 437
74617: ST_TO_ADDR
// if not task then
74618: LD_VAR 0 4
74622: NOT
74623: IFFALSE 74627
// exit ;
74625: GO 74669
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
74627: LD_ADDR_VAR 0 3
74631: PUSH
74632: LD_VAR 0 4
74636: PUSH
74637: LD_INT 1
74639: ARRAY
74640: PUSH
74641: LD_INT 1
74643: ARRAY
74644: PUSH
74645: LD_STRING r
74647: EQUAL
74648: PUSH
74649: LD_VAR 0 4
74653: PUSH
74654: LD_INT 1
74656: ARRAY
74657: PUSH
74658: LD_INT 4
74660: ARRAY
74661: PUSH
74662: LD_VAR 0 2
74666: EQUAL
74667: AND
74668: ST_TO_ADDR
// end ;
74669: LD_VAR 0 3
74673: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
74674: LD_INT 0
74676: PPUSH
// SetDir ( unit , d ) ;
74677: LD_VAR 0 1
74681: PPUSH
74682: LD_VAR 0 4
74686: PPUSH
74687: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
74691: LD_VAR 0 1
74695: PPUSH
74696: LD_VAR 0 2
74700: PPUSH
74701: LD_VAR 0 3
74705: PPUSH
74706: LD_VAR 0 5
74710: PPUSH
74711: CALL_OW 48
// end ;
74715: LD_VAR 0 6
74719: RET
// export function ToNaturalNumber ( number ) ; begin
74720: LD_INT 0
74722: PPUSH
// result := number div 1 ;
74723: LD_ADDR_VAR 0 2
74727: PUSH
74728: LD_VAR 0 1
74732: PUSH
74733: LD_INT 1
74735: DIV
74736: ST_TO_ADDR
// if number < 0 then
74737: LD_VAR 0 1
74741: PUSH
74742: LD_INT 0
74744: LESS
74745: IFFALSE 74755
// result := 0 ;
74747: LD_ADDR_VAR 0 2
74751: PUSH
74752: LD_INT 0
74754: ST_TO_ADDR
// end ;
74755: LD_VAR 0 2
74759: RET
// export function SortByClass ( units , class ) ; var un ; begin
74760: LD_INT 0
74762: PPUSH
74763: PPUSH
// if not units or not class then
74764: LD_VAR 0 1
74768: NOT
74769: PUSH
74770: LD_VAR 0 2
74774: NOT
74775: OR
74776: IFFALSE 74780
// exit ;
74778: GO 74875
// result := [ ] ;
74780: LD_ADDR_VAR 0 3
74784: PUSH
74785: EMPTY
74786: ST_TO_ADDR
// for un in units do
74787: LD_ADDR_VAR 0 4
74791: PUSH
74792: LD_VAR 0 1
74796: PUSH
74797: FOR_IN
74798: IFFALSE 74873
// if GetClass ( un ) = class then
74800: LD_VAR 0 4
74804: PPUSH
74805: CALL_OW 257
74809: PUSH
74810: LD_VAR 0 2
74814: EQUAL
74815: IFFALSE 74842
// result := Insert ( result , 1 , un ) else
74817: LD_ADDR_VAR 0 3
74821: PUSH
74822: LD_VAR 0 3
74826: PPUSH
74827: LD_INT 1
74829: PPUSH
74830: LD_VAR 0 4
74834: PPUSH
74835: CALL_OW 2
74839: ST_TO_ADDR
74840: GO 74871
// result := Replace ( result , result + 1 , un ) ;
74842: LD_ADDR_VAR 0 3
74846: PUSH
74847: LD_VAR 0 3
74851: PPUSH
74852: LD_VAR 0 3
74856: PUSH
74857: LD_INT 1
74859: PLUS
74860: PPUSH
74861: LD_VAR 0 4
74865: PPUSH
74866: CALL_OW 1
74870: ST_TO_ADDR
74871: GO 74797
74873: POP
74874: POP
// end ;
74875: LD_VAR 0 3
74879: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
74880: LD_INT 0
74882: PPUSH
74883: PPUSH
74884: PPUSH
74885: PPUSH
74886: PPUSH
74887: PPUSH
74888: PPUSH
// result := [ ] ;
74889: LD_ADDR_VAR 0 4
74893: PUSH
74894: EMPTY
74895: ST_TO_ADDR
// if x - r < 0 then
74896: LD_VAR 0 1
74900: PUSH
74901: LD_VAR 0 3
74905: MINUS
74906: PUSH
74907: LD_INT 0
74909: LESS
74910: IFFALSE 74922
// min_x := 0 else
74912: LD_ADDR_VAR 0 8
74916: PUSH
74917: LD_INT 0
74919: ST_TO_ADDR
74920: GO 74938
// min_x := x - r ;
74922: LD_ADDR_VAR 0 8
74926: PUSH
74927: LD_VAR 0 1
74931: PUSH
74932: LD_VAR 0 3
74936: MINUS
74937: ST_TO_ADDR
// if y - r < 0 then
74938: LD_VAR 0 2
74942: PUSH
74943: LD_VAR 0 3
74947: MINUS
74948: PUSH
74949: LD_INT 0
74951: LESS
74952: IFFALSE 74964
// min_y := 0 else
74954: LD_ADDR_VAR 0 7
74958: PUSH
74959: LD_INT 0
74961: ST_TO_ADDR
74962: GO 74980
// min_y := y - r ;
74964: LD_ADDR_VAR 0 7
74968: PUSH
74969: LD_VAR 0 2
74973: PUSH
74974: LD_VAR 0 3
74978: MINUS
74979: ST_TO_ADDR
// max_x := x + r ;
74980: LD_ADDR_VAR 0 9
74984: PUSH
74985: LD_VAR 0 1
74989: PUSH
74990: LD_VAR 0 3
74994: PLUS
74995: ST_TO_ADDR
// max_y := y + r ;
74996: LD_ADDR_VAR 0 10
75000: PUSH
75001: LD_VAR 0 2
75005: PUSH
75006: LD_VAR 0 3
75010: PLUS
75011: ST_TO_ADDR
// for _x = min_x to max_x do
75012: LD_ADDR_VAR 0 5
75016: PUSH
75017: DOUBLE
75018: LD_VAR 0 8
75022: DEC
75023: ST_TO_ADDR
75024: LD_VAR 0 9
75028: PUSH
75029: FOR_TO
75030: IFFALSE 75131
// for _y = min_y to max_y do
75032: LD_ADDR_VAR 0 6
75036: PUSH
75037: DOUBLE
75038: LD_VAR 0 7
75042: DEC
75043: ST_TO_ADDR
75044: LD_VAR 0 10
75048: PUSH
75049: FOR_TO
75050: IFFALSE 75127
// begin if not ValidHex ( _x , _y ) then
75052: LD_VAR 0 5
75056: PPUSH
75057: LD_VAR 0 6
75061: PPUSH
75062: CALL_OW 488
75066: NOT
75067: IFFALSE 75071
// continue ;
75069: GO 75049
// if GetResourceTypeXY ( _x , _y ) then
75071: LD_VAR 0 5
75075: PPUSH
75076: LD_VAR 0 6
75080: PPUSH
75081: CALL_OW 283
75085: IFFALSE 75125
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
75087: LD_ADDR_VAR 0 4
75091: PUSH
75092: LD_VAR 0 4
75096: PPUSH
75097: LD_VAR 0 4
75101: PUSH
75102: LD_INT 1
75104: PLUS
75105: PPUSH
75106: LD_VAR 0 5
75110: PUSH
75111: LD_VAR 0 6
75115: PUSH
75116: EMPTY
75117: LIST
75118: LIST
75119: PPUSH
75120: CALL_OW 1
75124: ST_TO_ADDR
// end ;
75125: GO 75049
75127: POP
75128: POP
75129: GO 75029
75131: POP
75132: POP
// end ;
75133: LD_VAR 0 4
75137: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
75138: LD_INT 0
75140: PPUSH
75141: PPUSH
75142: PPUSH
75143: PPUSH
75144: PPUSH
75145: PPUSH
75146: PPUSH
75147: PPUSH
// if not units then
75148: LD_VAR 0 1
75152: NOT
75153: IFFALSE 75157
// exit ;
75155: GO 75683
// result := UnitFilter ( units , [ f_ok ] ) ;
75157: LD_ADDR_VAR 0 3
75161: PUSH
75162: LD_VAR 0 1
75166: PPUSH
75167: LD_INT 50
75169: PUSH
75170: EMPTY
75171: LIST
75172: PPUSH
75173: CALL_OW 72
75177: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
75178: LD_ADDR_VAR 0 8
75182: PUSH
75183: LD_VAR 0 1
75187: PUSH
75188: LD_INT 1
75190: ARRAY
75191: PPUSH
75192: CALL_OW 255
75196: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
75197: LD_ADDR_VAR 0 10
75201: PUSH
75202: LD_INT 29
75204: PUSH
75205: LD_EXP 42
75209: PUSH
75210: LD_INT 49
75212: PUSH
75213: EMPTY
75214: LIST
75215: LIST
75216: LIST
75217: ST_TO_ADDR
// if not result then
75218: LD_VAR 0 3
75222: NOT
75223: IFFALSE 75227
// exit ;
75225: GO 75683
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
75227: LD_ADDR_VAR 0 5
75231: PUSH
75232: LD_INT 81
75234: PUSH
75235: LD_VAR 0 8
75239: PUSH
75240: EMPTY
75241: LIST
75242: LIST
75243: PPUSH
75244: CALL_OW 69
75248: ST_TO_ADDR
// for i in result do
75249: LD_ADDR_VAR 0 4
75253: PUSH
75254: LD_VAR 0 3
75258: PUSH
75259: FOR_IN
75260: IFFALSE 75681
// begin tag := GetTag ( i ) + 1 ;
75262: LD_ADDR_VAR 0 9
75266: PUSH
75267: LD_VAR 0 4
75271: PPUSH
75272: CALL_OW 110
75276: PUSH
75277: LD_INT 1
75279: PLUS
75280: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
75281: LD_ADDR_VAR 0 7
75285: PUSH
75286: LD_VAR 0 4
75290: PPUSH
75291: CALL_OW 250
75295: PPUSH
75296: LD_VAR 0 4
75300: PPUSH
75301: CALL_OW 251
75305: PPUSH
75306: LD_INT 6
75308: PPUSH
75309: CALL 74880 0 3
75313: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
75314: LD_VAR 0 4
75318: PPUSH
75319: CALL_OW 247
75323: PUSH
75324: LD_INT 2
75326: EQUAL
75327: PUSH
75328: LD_VAR 0 7
75332: AND
75333: PUSH
75334: LD_VAR 0 4
75338: PPUSH
75339: CALL_OW 264
75343: PUSH
75344: LD_VAR 0 10
75348: IN
75349: NOT
75350: AND
75351: IFFALSE 75390
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
75353: LD_VAR 0 4
75357: PPUSH
75358: LD_VAR 0 7
75362: PUSH
75363: LD_INT 1
75365: ARRAY
75366: PUSH
75367: LD_INT 1
75369: ARRAY
75370: PPUSH
75371: LD_VAR 0 7
75375: PUSH
75376: LD_INT 1
75378: ARRAY
75379: PUSH
75380: LD_INT 2
75382: ARRAY
75383: PPUSH
75384: CALL_OW 116
75388: GO 75679
// if path > tag then
75390: LD_VAR 0 2
75394: PUSH
75395: LD_VAR 0 9
75399: GREATER
75400: IFFALSE 75608
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
75402: LD_ADDR_VAR 0 6
75406: PUSH
75407: LD_VAR 0 5
75411: PPUSH
75412: LD_INT 91
75414: PUSH
75415: LD_VAR 0 4
75419: PUSH
75420: LD_INT 8
75422: PUSH
75423: EMPTY
75424: LIST
75425: LIST
75426: LIST
75427: PPUSH
75428: CALL_OW 72
75432: ST_TO_ADDR
// if nearEnemy then
75433: LD_VAR 0 6
75437: IFFALSE 75506
// begin if GetWeapon ( i ) = ru_time_lapser then
75439: LD_VAR 0 4
75443: PPUSH
75444: CALL_OW 264
75448: PUSH
75449: LD_INT 49
75451: EQUAL
75452: IFFALSE 75480
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
75454: LD_VAR 0 4
75458: PPUSH
75459: LD_VAR 0 6
75463: PPUSH
75464: LD_VAR 0 4
75468: PPUSH
75469: CALL_OW 74
75473: PPUSH
75474: CALL_OW 112
75478: GO 75504
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
75480: LD_VAR 0 4
75484: PPUSH
75485: LD_VAR 0 6
75489: PPUSH
75490: LD_VAR 0 4
75494: PPUSH
75495: CALL_OW 74
75499: PPUSH
75500: CALL_OW 115
// end else
75504: GO 75606
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
75506: LD_VAR 0 4
75510: PPUSH
75511: LD_VAR 0 2
75515: PUSH
75516: LD_VAR 0 9
75520: ARRAY
75521: PUSH
75522: LD_INT 1
75524: ARRAY
75525: PPUSH
75526: LD_VAR 0 2
75530: PUSH
75531: LD_VAR 0 9
75535: ARRAY
75536: PUSH
75537: LD_INT 2
75539: ARRAY
75540: PPUSH
75541: CALL_OW 297
75545: PUSH
75546: LD_INT 6
75548: GREATER
75549: IFFALSE 75592
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
75551: LD_VAR 0 4
75555: PPUSH
75556: LD_VAR 0 2
75560: PUSH
75561: LD_VAR 0 9
75565: ARRAY
75566: PUSH
75567: LD_INT 1
75569: ARRAY
75570: PPUSH
75571: LD_VAR 0 2
75575: PUSH
75576: LD_VAR 0 9
75580: ARRAY
75581: PUSH
75582: LD_INT 2
75584: ARRAY
75585: PPUSH
75586: CALL_OW 114
75590: GO 75606
// SetTag ( i , tag ) ;
75592: LD_VAR 0 4
75596: PPUSH
75597: LD_VAR 0 9
75601: PPUSH
75602: CALL_OW 109
// end else
75606: GO 75679
// if enemy then
75608: LD_VAR 0 5
75612: IFFALSE 75679
// begin if GetWeapon ( i ) = ru_time_lapser then
75614: LD_VAR 0 4
75618: PPUSH
75619: CALL_OW 264
75623: PUSH
75624: LD_INT 49
75626: EQUAL
75627: IFFALSE 75655
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
75629: LD_VAR 0 4
75633: PPUSH
75634: LD_VAR 0 5
75638: PPUSH
75639: LD_VAR 0 4
75643: PPUSH
75644: CALL_OW 74
75648: PPUSH
75649: CALL_OW 112
75653: GO 75679
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
75655: LD_VAR 0 4
75659: PPUSH
75660: LD_VAR 0 5
75664: PPUSH
75665: LD_VAR 0 4
75669: PPUSH
75670: CALL_OW 74
75674: PPUSH
75675: CALL_OW 115
// end ; end ;
75679: GO 75259
75681: POP
75682: POP
// end ;
75683: LD_VAR 0 3
75687: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
75688: LD_INT 0
75690: PPUSH
75691: PPUSH
75692: PPUSH
// if not unit or IsInUnit ( unit ) then
75693: LD_VAR 0 1
75697: NOT
75698: PUSH
75699: LD_VAR 0 1
75703: PPUSH
75704: CALL_OW 310
75708: OR
75709: IFFALSE 75713
// exit ;
75711: GO 75804
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
75713: LD_ADDR_VAR 0 4
75717: PUSH
75718: LD_VAR 0 1
75722: PPUSH
75723: CALL_OW 250
75727: PPUSH
75728: LD_VAR 0 2
75732: PPUSH
75733: LD_INT 1
75735: PPUSH
75736: CALL_OW 272
75740: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
75741: LD_ADDR_VAR 0 5
75745: PUSH
75746: LD_VAR 0 1
75750: PPUSH
75751: CALL_OW 251
75755: PPUSH
75756: LD_VAR 0 2
75760: PPUSH
75761: LD_INT 1
75763: PPUSH
75764: CALL_OW 273
75768: ST_TO_ADDR
// if ValidHex ( x , y ) then
75769: LD_VAR 0 4
75773: PPUSH
75774: LD_VAR 0 5
75778: PPUSH
75779: CALL_OW 488
75783: IFFALSE 75804
// ComTurnXY ( unit , x , y ) ;
75785: LD_VAR 0 1
75789: PPUSH
75790: LD_VAR 0 4
75794: PPUSH
75795: LD_VAR 0 5
75799: PPUSH
75800: CALL_OW 118
// end ;
75804: LD_VAR 0 3
75808: RET
// export function SeeUnits ( side , units ) ; var i ; begin
75809: LD_INT 0
75811: PPUSH
75812: PPUSH
// result := false ;
75813: LD_ADDR_VAR 0 3
75817: PUSH
75818: LD_INT 0
75820: ST_TO_ADDR
// if not units then
75821: LD_VAR 0 2
75825: NOT
75826: IFFALSE 75830
// exit ;
75828: GO 75875
// for i in units do
75830: LD_ADDR_VAR 0 4
75834: PUSH
75835: LD_VAR 0 2
75839: PUSH
75840: FOR_IN
75841: IFFALSE 75873
// if See ( side , i ) then
75843: LD_VAR 0 1
75847: PPUSH
75848: LD_VAR 0 4
75852: PPUSH
75853: CALL_OW 292
75857: IFFALSE 75871
// begin result := true ;
75859: LD_ADDR_VAR 0 3
75863: PUSH
75864: LD_INT 1
75866: ST_TO_ADDR
// exit ;
75867: POP
75868: POP
75869: GO 75875
// end ;
75871: GO 75840
75873: POP
75874: POP
// end ;
75875: LD_VAR 0 3
75879: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
75880: LD_INT 0
75882: PPUSH
75883: PPUSH
75884: PPUSH
75885: PPUSH
// if not unit or not points then
75886: LD_VAR 0 1
75890: NOT
75891: PUSH
75892: LD_VAR 0 2
75896: NOT
75897: OR
75898: IFFALSE 75902
// exit ;
75900: GO 75992
// dist := 99999 ;
75902: LD_ADDR_VAR 0 5
75906: PUSH
75907: LD_INT 99999
75909: ST_TO_ADDR
// for i in points do
75910: LD_ADDR_VAR 0 4
75914: PUSH
75915: LD_VAR 0 2
75919: PUSH
75920: FOR_IN
75921: IFFALSE 75990
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
75923: LD_ADDR_VAR 0 6
75927: PUSH
75928: LD_VAR 0 1
75932: PPUSH
75933: LD_VAR 0 4
75937: PUSH
75938: LD_INT 1
75940: ARRAY
75941: PPUSH
75942: LD_VAR 0 4
75946: PUSH
75947: LD_INT 2
75949: ARRAY
75950: PPUSH
75951: CALL_OW 297
75955: ST_TO_ADDR
// if tmpDist < dist then
75956: LD_VAR 0 6
75960: PUSH
75961: LD_VAR 0 5
75965: LESS
75966: IFFALSE 75988
// begin result := i ;
75968: LD_ADDR_VAR 0 3
75972: PUSH
75973: LD_VAR 0 4
75977: ST_TO_ADDR
// dist := tmpDist ;
75978: LD_ADDR_VAR 0 5
75982: PUSH
75983: LD_VAR 0 6
75987: ST_TO_ADDR
// end ; end ;
75988: GO 75920
75990: POP
75991: POP
// end ;
75992: LD_VAR 0 3
75996: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
75997: LD_INT 0
75999: PPUSH
// uc_side := side ;
76000: LD_ADDR_OWVAR 20
76004: PUSH
76005: LD_VAR 0 1
76009: ST_TO_ADDR
// uc_nation := 3 ;
76010: LD_ADDR_OWVAR 21
76014: PUSH
76015: LD_INT 3
76017: ST_TO_ADDR
// vc_chassis := 25 ;
76018: LD_ADDR_OWVAR 37
76022: PUSH
76023: LD_INT 25
76025: ST_TO_ADDR
// vc_engine := engine_siberite ;
76026: LD_ADDR_OWVAR 39
76030: PUSH
76031: LD_INT 3
76033: ST_TO_ADDR
// vc_control := control_computer ;
76034: LD_ADDR_OWVAR 38
76038: PUSH
76039: LD_INT 3
76041: ST_TO_ADDR
// vc_weapon := 59 ;
76042: LD_ADDR_OWVAR 40
76046: PUSH
76047: LD_INT 59
76049: ST_TO_ADDR
// result := CreateVehicle ;
76050: LD_ADDR_VAR 0 5
76054: PUSH
76055: CALL_OW 45
76059: ST_TO_ADDR
// SetDir ( result , d ) ;
76060: LD_VAR 0 5
76064: PPUSH
76065: LD_VAR 0 4
76069: PPUSH
76070: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
76074: LD_VAR 0 5
76078: PPUSH
76079: LD_VAR 0 2
76083: PPUSH
76084: LD_VAR 0 3
76088: PPUSH
76089: LD_INT 0
76091: PPUSH
76092: CALL_OW 48
// end ;
76096: LD_VAR 0 5
76100: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
76101: LD_INT 0
76103: PPUSH
76104: PPUSH
76105: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
76106: LD_ADDR_VAR 0 2
76110: PUSH
76111: LD_INT 0
76113: PUSH
76114: LD_INT 0
76116: PUSH
76117: LD_INT 0
76119: PUSH
76120: LD_INT 0
76122: PUSH
76123: EMPTY
76124: LIST
76125: LIST
76126: LIST
76127: LIST
76128: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
76129: LD_VAR 0 1
76133: NOT
76134: PUSH
76135: LD_VAR 0 1
76139: PPUSH
76140: CALL_OW 264
76144: PUSH
76145: LD_INT 12
76147: PUSH
76148: LD_INT 51
76150: PUSH
76151: LD_INT 32
76153: PUSH
76154: LD_EXP 39
76158: PUSH
76159: EMPTY
76160: LIST
76161: LIST
76162: LIST
76163: LIST
76164: IN
76165: NOT
76166: OR
76167: IFFALSE 76171
// exit ;
76169: GO 76269
// for i := 1 to 3 do
76171: LD_ADDR_VAR 0 3
76175: PUSH
76176: DOUBLE
76177: LD_INT 1
76179: DEC
76180: ST_TO_ADDR
76181: LD_INT 3
76183: PUSH
76184: FOR_TO
76185: IFFALSE 76267
// begin tmp := GetCargo ( cargo , i ) ;
76187: LD_ADDR_VAR 0 4
76191: PUSH
76192: LD_VAR 0 1
76196: PPUSH
76197: LD_VAR 0 3
76201: PPUSH
76202: CALL_OW 289
76206: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
76207: LD_ADDR_VAR 0 2
76211: PUSH
76212: LD_VAR 0 2
76216: PPUSH
76217: LD_VAR 0 3
76221: PPUSH
76222: LD_VAR 0 4
76226: PPUSH
76227: CALL_OW 1
76231: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
76232: LD_ADDR_VAR 0 2
76236: PUSH
76237: LD_VAR 0 2
76241: PPUSH
76242: LD_INT 4
76244: PPUSH
76245: LD_VAR 0 2
76249: PUSH
76250: LD_INT 4
76252: ARRAY
76253: PUSH
76254: LD_VAR 0 4
76258: PLUS
76259: PPUSH
76260: CALL_OW 1
76264: ST_TO_ADDR
// end ;
76265: GO 76184
76267: POP
76268: POP
// end ;
76269: LD_VAR 0 2
76273: RET
// export function Length ( array ) ; begin
76274: LD_INT 0
76276: PPUSH
// result := array + 0 ;
76277: LD_ADDR_VAR 0 2
76281: PUSH
76282: LD_VAR 0 1
76286: PUSH
76287: LD_INT 0
76289: PLUS
76290: ST_TO_ADDR
// end ;
76291: LD_VAR 0 2
76295: RET
// export function PrepareArray ( array ) ; begin
76296: LD_INT 0
76298: PPUSH
// result := array diff 0 ;
76299: LD_ADDR_VAR 0 2
76303: PUSH
76304: LD_VAR 0 1
76308: PUSH
76309: LD_INT 0
76311: DIFF
76312: ST_TO_ADDR
// if not result [ 1 ] then
76313: LD_VAR 0 2
76317: PUSH
76318: LD_INT 1
76320: ARRAY
76321: NOT
76322: IFFALSE 76342
// result := Delete ( result , 1 ) ;
76324: LD_ADDR_VAR 0 2
76328: PUSH
76329: LD_VAR 0 2
76333: PPUSH
76334: LD_INT 1
76336: PPUSH
76337: CALL_OW 3
76341: ST_TO_ADDR
// end ; end_of_file
76342: LD_VAR 0 2
76346: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
76347: LD_VAR 0 1
76351: PUSH
76352: LD_INT 200
76354: DOUBLE
76355: GREATEREQUAL
76356: IFFALSE 76364
76358: LD_INT 299
76360: DOUBLE
76361: LESSEQUAL
76362: IFTRUE 76366
76364: GO 76398
76366: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
76367: LD_VAR 0 1
76371: PPUSH
76372: LD_VAR 0 2
76376: PPUSH
76377: LD_VAR 0 3
76381: PPUSH
76382: LD_VAR 0 4
76386: PPUSH
76387: LD_VAR 0 5
76391: PPUSH
76392: CALL 31198 0 5
76396: GO 76475
76398: LD_INT 300
76400: DOUBLE
76401: GREATEREQUAL
76402: IFFALSE 76410
76404: LD_INT 399
76406: DOUBLE
76407: LESSEQUAL
76408: IFTRUE 76412
76410: GO 76474
76412: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
76413: LD_VAR 0 1
76417: PPUSH
76418: LD_VAR 0 2
76422: PPUSH
76423: LD_VAR 0 3
76427: PPUSH
76428: LD_VAR 0 4
76432: PPUSH
76433: LD_VAR 0 5
76437: PPUSH
76438: LD_VAR 0 6
76442: PPUSH
76443: LD_VAR 0 7
76447: PPUSH
76448: LD_VAR 0 8
76452: PPUSH
76453: LD_VAR 0 9
76457: PPUSH
76458: LD_VAR 0 10
76462: PPUSH
76463: LD_VAR 0 11
76467: PPUSH
76468: CALL 27527 0 11
76472: GO 76475
76474: POP
// end ;
76475: PPOPN 11
76477: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
76478: LD_VAR 0 1
76482: PPUSH
76483: LD_VAR 0 2
76487: PPUSH
76488: LD_VAR 0 3
76492: PPUSH
76493: LD_VAR 0 4
76497: PPUSH
76498: LD_VAR 0 5
76502: PPUSH
76503: CALL 30934 0 5
// end ; end_of_file
76507: PPOPN 5
76509: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
76510: LD_VAR 0 1
76514: PPUSH
76515: LD_VAR 0 2
76519: PPUSH
76520: LD_VAR 0 3
76524: PPUSH
76525: LD_VAR 0 4
76529: PPUSH
76530: LD_VAR 0 5
76534: PPUSH
76535: LD_VAR 0 6
76539: PPUSH
76540: CALL 15220 0 6
// end ;
76544: PPOPN 6
76546: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
76547: LD_INT 0
76549: PPUSH
// begin if not units then
76550: LD_VAR 0 1
76554: NOT
76555: IFFALSE 76559
// exit ;
76557: GO 76559
// end ;
76559: PPOPN 7
76561: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
76562: CALL 15191 0 0
// end ;
76566: PPOPN 1
76568: END
