// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitVariables ;
  11: CALL 130 0 0
// CreateNature ;
  15: CALL 9595 0 0
// PrepareAlliance ;
  19: CALL 352 0 0
// PrepareFriends ;
  23: CALL 3833 0 0
// PrepareAmerican ;
  27: CALL 793 0 0
// PlaceSeeing ( 91 , 70 , 7 , - 32178 ) ;
  31: LD_INT 91
  33: PPUSH
  34: LD_INT 70
  36: PPUSH
  37: LD_INT 7
  39: PPUSH
  40: LD_INT 32178
  42: NEG
  43: PPUSH
  44: CALL_OW 330
// RemoveSeeing ( 91 , 70 , 7 ) ;
  48: LD_INT 91
  50: PPUSH
  51: LD_INT 70
  53: PPUSH
  54: LD_INT 7
  56: PPUSH
  57: CALL_OW 331
// if debug then
  61: LD_EXP 1
  65: IFFALSE 113
// begin SetAttitude ( 1 , 7 , att_enemy , true ) ;
  67: LD_INT 1
  69: PPUSH
  70: LD_INT 7
  72: PPUSH
  73: LD_INT 2
  75: PPUSH
  76: LD_INT 1
  78: PPUSH
  79: CALL_OW 80
// RemoveUnit ( Powell ) ;
  83: LD_EXP 17
  87: PPUSH
  88: CALL_OW 64
// DoNotAttack ( 1 , JMM ) ;
  92: LD_INT 1
  94: PPUSH
  95: LD_EXP 15
  99: PPUSH
 100: CALL_OW 471
// FogOff ( 1 ) ;
 104: LD_INT 1
 106: PPUSH
 107: CALL_OW 344
// end else
 111: GO 117
// Action ;
 113: CALL 9931 0 0
// PreparePatrol ;
 117: CALL 1417 0 0
// game := true ;
 121: LD_ADDR_EXP 2
 125: PUSH
 126: LD_INT 1
 128: ST_TO_ADDR
// end ;
 129: END
// export debug , game , selected , friends , reached_lab , can_escape , on_hill , friends_kill_counter , team_kill_counter , gamma_commander , extra_patrol , invis_used , alert , def_counter ; export function InitVariables ; begin
 130: LD_INT 0
 132: PPUSH
// debug := false ;
 133: LD_ADDR_EXP 1
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// friends := [ ] ;
 141: LD_ADDR_EXP 4
 145: PUSH
 146: EMPTY
 147: ST_TO_ADDR
// selected := [ ] ;
 148: LD_ADDR_EXP 3
 152: PUSH
 153: EMPTY
 154: ST_TO_ADDR
// reached_lab := false ;
 155: LD_ADDR_EXP 5
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// can_escape := false ;
 163: LD_ADDR_EXP 6
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// game := false ;
 171: LD_ADDR_EXP 2
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// gamma_commander := LoadVariable ( GammaCommander , 1 ) ;
 179: LD_ADDR_EXP 10
 183: PUSH
 184: LD_STRING GammaCommander
 186: PPUSH
 187: LD_INT 1
 189: PPUSH
 190: CALL_OW 30
 194: ST_TO_ADDR
// friends_kill_counter := 0 ;
 195: LD_ADDR_EXP 8
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// team_kill_counter := 0 ;
 203: LD_ADDR_EXP 9
 207: PUSH
 208: LD_INT 0
 210: ST_TO_ADDR
// extra_patrol := true ;
 211: LD_ADDR_EXP 11
 215: PUSH
 216: LD_INT 1
 218: ST_TO_ADDR
// on_hill := false ;
 219: LD_ADDR_EXP 7
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// invis_used := false ;
 227: LD_ADDR_EXP 12
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// alert := false ;
 235: LD_ADDR_EXP 13
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// def_counter := 0 ;
 243: LD_ADDR_EXP 14
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// end ;
 251: LD_VAR 0 1
 255: RET
// every 0 0$1 trigger on_hill do
 256: LD_EXP 7
 260: IFFALSE 272
 262: GO 264
 264: DISABLE
// SetAchievement ( ACH_EYE ) ;
 265: LD_STRING ACH_EYE
 267: PPUSH
 268: CALL_OW 543
 272: END
// every 0 0$1 trigger not invis_used do var i ;
 273: LD_EXP 12
 277: NOT
 278: IFFALSE 349
 280: GO 282
 282: DISABLE
 283: LD_INT 0
 285: PPUSH
// begin enable ;
 286: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do
 287: LD_ADDR_VAR 0 1
 291: PUSH
 292: LD_INT 22
 294: PUSH
 295: LD_INT 7
 297: PUSH
 298: EMPTY
 299: LIST
 300: LIST
 301: PUSH
 302: LD_INT 21
 304: PUSH
 305: LD_INT 1
 307: PUSH
 308: EMPTY
 309: LIST
 310: LIST
 311: PUSH
 312: EMPTY
 313: LIST
 314: LIST
 315: PPUSH
 316: CALL_OW 69
 320: PUSH
 321: FOR_IN
 322: IFFALSE 347
// if IsInvisible ( i ) then
 324: LD_VAR 0 1
 328: PPUSH
 329: CALL_OW 571
 333: IFFALSE 345
// begin invis_used := true ;
 335: LD_ADDR_EXP 12
 339: PUSH
 340: LD_INT 1
 342: ST_TO_ADDR
// break ;
 343: GO 347
// end ;
 345: GO 321
 347: POP
 348: POP
// end ; end_of_file
 349: PPOPN 1
 351: END
// export JMM , Roth ; export function PrepareAlliance ; var cargo ; begin
 352: LD_INT 0
 354: PPUSH
 355: PPUSH
// uc_side := 7 ;
 356: LD_ADDR_OWVAR 20
 360: PUSH
 361: LD_INT 7
 363: ST_TO_ADDR
// uc_nation := 1 ;
 364: LD_ADDR_OWVAR 21
 368: PUSH
 369: LD_INT 1
 371: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 11_ ) ;
 372: LD_ADDR_EXP 15
 376: PUSH
 377: LD_STRING JMM
 379: PPUSH
 380: LD_EXP 1
 384: NOT
 385: PPUSH
 386: LD_STRING 11_
 388: PPUSH
 389: CALL 38070 0 3
 393: ST_TO_ADDR
// uc_side := 4 ;
 394: LD_ADDR_OWVAR 20
 398: PUSH
 399: LD_INT 4
 401: ST_TO_ADDR
// Roth := NewCharacter ( Roth ) ;
 402: LD_ADDR_EXP 16
 406: PUSH
 407: LD_STRING Roth
 409: PPUSH
 410: CALL_OW 25
 414: ST_TO_ADDR
// SetDir ( JMM , 1 ) ;
 415: LD_EXP 15
 419: PPUSH
 420: LD_INT 1
 422: PPUSH
 423: CALL_OW 233
// SetClass ( JMM , 1 ) ;
 427: LD_EXP 15
 431: PPUSH
 432: LD_INT 1
 434: PPUSH
 435: CALL_OW 336
// PlaceUnitXY ( JMM , 105 , 10 , false ) ;
 439: LD_EXP 15
 443: PPUSH
 444: LD_INT 105
 446: PPUSH
 447: LD_INT 10
 449: PPUSH
 450: LD_INT 0
 452: PPUSH
 453: CALL_OW 48
// SetDir ( Roth , 4 ) ;
 457: LD_EXP 16
 461: PPUSH
 462: LD_INT 4
 464: PPUSH
 465: CALL_OW 233
// PlaceUnitXY ( Roth , 109 , 10 , false ) ;
 469: LD_EXP 16
 473: PPUSH
 474: LD_INT 109
 476: PPUSH
 477: LD_INT 10
 479: PPUSH
 480: LD_INT 0
 482: PPUSH
 483: CALL_OW 48
// ComTurnUnit ( JMM , Roth ) ;
 487: LD_EXP 15
 491: PPUSH
 492: LD_EXP 16
 496: PPUSH
 497: CALL_OW 119
// ComTurnUnit ( Roth , JMM ) ;
 501: LD_EXP 16
 505: PPUSH
 506: LD_EXP 15
 510: PPUSH
 511: CALL_OW 119
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
 515: LD_INT 3
 517: PPUSH
 518: LD_INT 3
 520: PPUSH
 521: LD_INT 3
 523: PPUSH
 524: LD_INT 12
 526: PPUSH
 527: LD_INT 100
 529: PPUSH
 530: CALL 43056 0 5
// cargo := CreateVehicle ;
 534: LD_ADDR_VAR 0 2
 538: PUSH
 539: CALL_OW 45
 543: ST_TO_ADDR
// SetDir ( cargo , 1 ) ;
 544: LD_VAR 0 2
 548: PPUSH
 549: LD_INT 1
 551: PPUSH
 552: CALL_OW 233
// PlaceUnitXY ( cargo , 179 , 45 , false ) ;
 556: LD_VAR 0 2
 560: PPUSH
 561: LD_INT 179
 563: PPUSH
 564: LD_INT 45
 566: PPUSH
 567: LD_INT 0
 569: PPUSH
 570: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 30 ) ;
 574: LD_VAR 0 2
 578: PPUSH
 579: LD_INT 4
 581: PPUSH
 582: LD_INT 30
 584: PPUSH
 585: CALL_OW 290
// if LoadVariable ( 11_artifact_captured , 0 ) then
 589: LD_STRING 11_artifact_captured
 591: PPUSH
 592: LD_INT 0
 594: PPUSH
 595: CALL_OW 30
 599: IFFALSE 656
// begin cargo := CreateVehicle ;
 601: LD_ADDR_VAR 0 2
 605: PUSH
 606: CALL_OW 45
 610: ST_TO_ADDR
// SetDir ( cargo , 0 ) ;
 611: LD_VAR 0 2
 615: PPUSH
 616: LD_INT 0
 618: PPUSH
 619: CALL_OW 233
// PlaceUnitXY ( cargo , 171 , 85 , false ) ;
 623: LD_VAR 0 2
 627: PPUSH
 628: LD_INT 171
 630: PPUSH
 631: LD_INT 85
 633: PPUSH
 634: LD_INT 0
 636: PPUSH
 637: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 50 ) ;
 641: LD_VAR 0 2
 645: PPUSH
 646: LD_INT 4
 648: PPUSH
 649: LD_INT 50
 651: PPUSH
 652: CALL_OW 290
// end ; SetSide ( amlab , 7 ) ;
 656: LD_INT 47
 658: PPUSH
 659: LD_INT 7
 661: PPUSH
 662: CALL_OW 235
// DoNotAttack ( 1 , amlab ) ;
 666: LD_INT 1
 668: PPUSH
 669: LD_INT 47
 671: PPUSH
 672: CALL_OW 471
// end ;
 676: LD_VAR 0 1
 680: RET
// every 0 0$1 trigger FilterUnitsInArea ( hill , [ f_side , 7 ] ) and not on_hill do
 681: LD_INT 38
 683: PPUSH
 684: LD_INT 22
 686: PUSH
 687: LD_INT 7
 689: PUSH
 690: EMPTY
 691: LIST
 692: LIST
 693: PPUSH
 694: CALL_OW 70
 698: IFFALSE 707
 700: PUSH
 701: LD_EXP 7
 705: NOT
 706: AND
 707: IFFALSE 738
 709: GO 711
 711: DISABLE
// begin enable ;
 712: ENABLE
// on_hill := true ;
 713: LD_ADDR_EXP 7
 717: PUSH
 718: LD_INT 1
 720: ST_TO_ADDR
// PlaceSeeing ( 126 , 13 , 7 , - 90 ) ;
 721: LD_INT 126
 723: PPUSH
 724: LD_INT 13
 726: PPUSH
 727: LD_INT 7
 729: PPUSH
 730: LD_INT 90
 732: NEG
 733: PPUSH
 734: CALL_OW 330
// end ;
 738: END
// every 0 0$1 trigger not FilterUnitsInArea ( hill , [ f_side , 7 ] ) and on_hill do
 739: LD_INT 38
 741: PPUSH
 742: LD_INT 22
 744: PUSH
 745: LD_INT 7
 747: PUSH
 748: EMPTY
 749: LIST
 750: LIST
 751: PPUSH
 752: CALL_OW 70
 756: NOT
 757: IFFALSE 765
 759: PUSH
 760: LD_EXP 7
 764: AND
 765: IFFALSE 792
 767: GO 769
 769: DISABLE
// begin enable ;
 770: ENABLE
// on_hill := false ;
 771: LD_ADDR_EXP 7
 775: PUSH
 776: LD_INT 0
 778: ST_TO_ADDR
// RemoveSeeing ( 126 , 13 , 7 ) ;
 779: LD_INT 126
 781: PPUSH
 782: LD_INT 13
 784: PPUSH
 785: LD_INT 7
 787: PPUSH
 788: CALL_OW 331
// end ; end_of_file
 792: END
// export Powell , mobile_patrol , mobile_points , powell_guards , defenders , defcon , defcon_wave ; export function PrepareAmerican ; var i , j , b , un , tmp ; begin
 793: LD_INT 0
 795: PPUSH
 796: PPUSH
 797: PPUSH
 798: PPUSH
 799: PPUSH
 800: PPUSH
// if Difficulty = 1 then
 801: LD_OWVAR 67
 805: PUSH
 806: LD_INT 1
 808: EQUAL
 809: IFFALSE 917
// begin tmp := [ [ 155 , 77 ] , [ 193 , 93 ] , [ 188 , 81 ] , [ 56 , 85 ] , [ 98 , 87 ] ] ;
 811: LD_ADDR_VAR 0 6
 815: PUSH
 816: LD_INT 155
 818: PUSH
 819: LD_INT 77
 821: PUSH
 822: EMPTY
 823: LIST
 824: LIST
 825: PUSH
 826: LD_INT 193
 828: PUSH
 829: LD_INT 93
 831: PUSH
 832: EMPTY
 833: LIST
 834: LIST
 835: PUSH
 836: LD_INT 188
 838: PUSH
 839: LD_INT 81
 841: PUSH
 842: EMPTY
 843: LIST
 844: LIST
 845: PUSH
 846: LD_INT 56
 848: PUSH
 849: LD_INT 85
 851: PUSH
 852: EMPTY
 853: LIST
 854: LIST
 855: PUSH
 856: LD_INT 98
 858: PUSH
 859: LD_INT 87
 861: PUSH
 862: EMPTY
 863: LIST
 864: LIST
 865: PUSH
 866: EMPTY
 867: LIST
 868: LIST
 869: LIST
 870: LIST
 871: LIST
 872: ST_TO_ADDR
// for i in tmp do
 873: LD_ADDR_VAR 0 2
 877: PUSH
 878: LD_VAR 0 6
 882: PUSH
 883: FOR_IN
 884: IFFALSE 915
// RemoveUnit ( HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
 886: LD_VAR 0 2
 890: PUSH
 891: LD_INT 1
 893: ARRAY
 894: PPUSH
 895: LD_VAR 0 2
 899: PUSH
 900: LD_INT 2
 902: ARRAY
 903: PPUSH
 904: CALL_OW 428
 908: PPUSH
 909: CALL_OW 64
 913: GO 883
 915: POP
 916: POP
// end ; defcon := 0 ;
 917: LD_ADDR_EXP 22
 921: PUSH
 922: LD_INT 0
 924: ST_TO_ADDR
// defcon_wave := 0 ;
 925: LD_ADDR_EXP 23
 929: PUSH
 930: LD_INT 0
 932: ST_TO_ADDR
// defenders := [ ] ;
 933: LD_ADDR_EXP 21
 937: PUSH
 938: EMPTY
 939: ST_TO_ADDR
// SetBName ( alfa , alfa ) ;
 940: LD_INT 5
 942: PPUSH
 943: LD_STRING alfa
 945: PPUSH
 946: CALL_OW 500
// uc_side := 1 ;
 950: LD_ADDR_OWVAR 20
 954: PUSH
 955: LD_INT 1
 957: ST_TO_ADDR
// uc_nation := 1 ;
 958: LD_ADDR_OWVAR 21
 962: PUSH
 963: LD_INT 1
 965: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
 966: LD_ADDR_EXP 17
 970: PUSH
 971: LD_STRING Powell
 973: PPUSH
 974: CALL_OW 25
 978: ST_TO_ADDR
// PlaceUnitXY ( Powell , 110 , 26 , false ) ;
 979: LD_EXP 17
 983: PPUSH
 984: LD_INT 110
 986: PPUSH
 987: LD_INT 26
 989: PPUSH
 990: LD_INT 0
 992: PPUSH
 993: CALL_OW 48
// ComHold ( Powell ) ;
 997: LD_EXP 17
1001: PPUSH
1002: CALL_OW 140
// for i := 1 to 5 do
1006: LD_ADDR_VAR 0 2
1010: PUSH
1011: DOUBLE
1012: LD_INT 1
1014: DEC
1015: ST_TO_ADDR
1016: LD_INT 5
1018: PUSH
1019: FOR_TO
1020: IFFALSE 1076
// begin PrepareHuman ( false , 1 , 10 ) ;
1022: LD_INT 0
1024: PPUSH
1025: LD_INT 1
1027: PPUSH
1028: LD_INT 10
1030: PPUSH
1031: CALL_OW 380
// powell_guards := Insert ( powell_guards , 1 , CreateHuman ) ;
1035: LD_ADDR_EXP 20
1039: PUSH
1040: LD_EXP 20
1044: PPUSH
1045: LD_INT 1
1047: PPUSH
1048: CALL_OW 44
1052: PPUSH
1053: CALL_OW 2
1057: ST_TO_ADDR
// PlaceHumanInUnit ( powell_guards [ 1 ] , ambar0 ) ;
1058: LD_EXP 20
1062: PUSH
1063: LD_INT 1
1065: ARRAY
1066: PPUSH
1067: LD_INT 18
1069: PPUSH
1070: CALL_OW 52
// end ;
1074: GO 1019
1076: POP
1077: POP
// if Difficulty > 1 then
1078: LD_OWVAR 67
1082: PUSH
1083: LD_INT 1
1085: GREATER
1086: IFFALSE 1237
// begin tmp := [ [ 81 , 33 ] , [ 134 , 114 ] , [ 193 , 102 ] ] ;
1088: LD_ADDR_VAR 0 6
1092: PUSH
1093: LD_INT 81
1095: PUSH
1096: LD_INT 33
1098: PUSH
1099: EMPTY
1100: LIST
1101: LIST
1102: PUSH
1103: LD_INT 134
1105: PUSH
1106: LD_INT 114
1108: PUSH
1109: EMPTY
1110: LIST
1111: LIST
1112: PUSH
1113: LD_INT 193
1115: PUSH
1116: LD_INT 102
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: PUSH
1123: EMPTY
1124: LIST
1125: LIST
1126: LIST
1127: ST_TO_ADDR
// for i := 1 to Difficulty - 1 do
1128: LD_ADDR_VAR 0 2
1132: PUSH
1133: DOUBLE
1134: LD_INT 1
1136: DEC
1137: ST_TO_ADDR
1138: LD_OWVAR 67
1142: PUSH
1143: LD_INT 1
1145: MINUS
1146: PUSH
1147: FOR_TO
1148: IFFALSE 1235
// begin PrepareSoldier ( false , 10 ) ;
1150: LD_INT 0
1152: PPUSH
1153: LD_INT 10
1155: PPUSH
1156: CALL_OW 381
// un := CreateHuman ;
1160: LD_ADDR_VAR 0 5
1164: PUSH
1165: CALL_OW 44
1169: ST_TO_ADDR
// SetClass ( un , class_sniper ) ;
1170: LD_VAR 0 5
1174: PPUSH
1175: LD_INT 5
1177: PPUSH
1178: CALL_OW 336
// PlaceUnitXY ( un , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
1182: LD_VAR 0 5
1186: PPUSH
1187: LD_VAR 0 6
1191: PUSH
1192: LD_VAR 0 2
1196: ARRAY
1197: PUSH
1198: LD_INT 1
1200: ARRAY
1201: PPUSH
1202: LD_VAR 0 6
1206: PUSH
1207: LD_VAR 0 2
1211: ARRAY
1212: PUSH
1213: LD_INT 2
1215: ARRAY
1216: PPUSH
1217: LD_INT 0
1219: PPUSH
1220: CALL_OW 48
// ComHold ( un ) ;
1224: LD_VAR 0 5
1228: PPUSH
1229: CALL_OW 140
// end ;
1233: GO 1147
1235: POP
1236: POP
// end ; if Difficulty > 2 then
1237: LD_OWVAR 67
1241: PUSH
1242: LD_INT 2
1244: GREATER
1245: IFFALSE 1294
// begin bc_type := b_turret ;
1247: LD_ADDR_OWVAR 42
1251: PUSH
1252: LD_INT 33
1254: ST_TO_ADDR
// bc_level := 7 ;
1255: LD_ADDR_OWVAR 43
1259: PUSH
1260: LD_INT 7
1262: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 107 , 55 , 5 ) ;
1263: LD_ADDR_VAR 0 4
1267: PUSH
1268: LD_INT 107
1270: PPUSH
1271: LD_INT 55
1273: PPUSH
1274: LD_INT 5
1276: PPUSH
1277: CALL_OW 47
1281: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_rocket_launcher ) ;
1282: LD_VAR 0 4
1286: PPUSH
1287: LD_INT 7
1289: PPUSH
1290: CALL_OW 431
// end ; for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ^ FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) do
1294: LD_ADDR_VAR 0 2
1298: PUSH
1299: LD_INT 22
1301: PUSH
1302: LD_INT 1
1304: PUSH
1305: EMPTY
1306: LIST
1307: LIST
1308: PUSH
1309: LD_INT 30
1311: PUSH
1312: LD_INT 3
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: PUSH
1319: EMPTY
1320: LIST
1321: LIST
1322: PPUSH
1323: CALL_OW 69
1327: PUSH
1328: LD_INT 22
1330: PUSH
1331: LD_INT 1
1333: PUSH
1334: EMPTY
1335: LIST
1336: LIST
1337: PUSH
1338: LD_INT 30
1340: PUSH
1341: LD_INT 36
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: PPUSH
1352: CALL_OW 69
1356: ADD
1357: PUSH
1358: FOR_IN
1359: IFFALSE 1410
// for j = 1 to 3 do
1361: LD_ADDR_VAR 0 3
1365: PUSH
1366: DOUBLE
1367: LD_INT 1
1369: DEC
1370: ST_TO_ADDR
1371: LD_INT 3
1373: PUSH
1374: FOR_TO
1375: IFFALSE 1406
// begin PrepareHuman ( false , 3 , 6 ) ;
1377: LD_INT 0
1379: PPUSH
1380: LD_INT 3
1382: PPUSH
1383: LD_INT 6
1385: PPUSH
1386: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
1390: CALL_OW 44
1394: PPUSH
1395: LD_VAR 0 2
1399: PPUSH
1400: CALL_OW 52
// end ;
1404: GO 1374
1406: POP
1407: POP
1408: GO 1358
1410: POP
1411: POP
// end ;
1412: LD_VAR 0 1
1416: RET
// export function PreparePatrol ; var i , un ; begin
1417: LD_INT 0
1419: PPUSH
1420: PPUSH
1421: PPUSH
// uc_side := 1 ;
1422: LD_ADDR_OWVAR 20
1426: PUSH
1427: LD_INT 1
1429: ST_TO_ADDR
// uc_nation := 1 ;
1430: LD_ADDR_OWVAR 21
1434: PUSH
1435: LD_INT 1
1437: ST_TO_ADDR
// mobile_points := [ [ [ 99 , 55 ] , [ 113 , 67 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 103 , 41 ] ] , [ [ 27 , 49 ] , [ 46 , 49 ] , [ 87 , 70 ] , [ 99 , 79 ] , [ 118 , 111 ] , [ 99 , 79 ] , [ 87 , 70 ] , [ 46 , 49 ] ] , [ [ 200 , 88 ] , [ 175 , 80 ] , [ 135 , 62 ] , [ 117 , 53 ] , [ 103 , 41 ] , [ 99 , 24 ] , [ 85 , 3 ] , [ 99 , 24 ] , [ 103 , 41 ] , [ 98 , 47 ] , [ 99 , 56 ] , [ 96 , 66 ] , [ 99 , 56 ] , [ 112 , 66 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 156 , 71 ] , [ 168 , 76 ] , [ 168 , 61 ] , [ 168 , 75 ] , [ 185 , 85 ] ] ] ;
1438: LD_ADDR_EXP 19
1442: PUSH
1443: LD_INT 99
1445: PUSH
1446: LD_INT 55
1448: PUSH
1449: EMPTY
1450: LIST
1451: LIST
1452: PUSH
1453: LD_INT 113
1455: PUSH
1456: LD_INT 67
1458: PUSH
1459: EMPTY
1460: LIST
1461: LIST
1462: PUSH
1463: LD_INT 129
1465: PUSH
1466: LD_INT 68
1468: PUSH
1469: EMPTY
1470: LIST
1471: LIST
1472: PUSH
1473: LD_INT 135
1475: PUSH
1476: LD_INT 62
1478: PUSH
1479: EMPTY
1480: LIST
1481: LIST
1482: PUSH
1483: LD_INT 103
1485: PUSH
1486: LD_INT 41
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: PUSH
1493: EMPTY
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: LIST
1499: PUSH
1500: LD_INT 27
1502: PUSH
1503: LD_INT 49
1505: PUSH
1506: EMPTY
1507: LIST
1508: LIST
1509: PUSH
1510: LD_INT 46
1512: PUSH
1513: LD_INT 49
1515: PUSH
1516: EMPTY
1517: LIST
1518: LIST
1519: PUSH
1520: LD_INT 87
1522: PUSH
1523: LD_INT 70
1525: PUSH
1526: EMPTY
1527: LIST
1528: LIST
1529: PUSH
1530: LD_INT 99
1532: PUSH
1533: LD_INT 79
1535: PUSH
1536: EMPTY
1537: LIST
1538: LIST
1539: PUSH
1540: LD_INT 118
1542: PUSH
1543: LD_INT 111
1545: PUSH
1546: EMPTY
1547: LIST
1548: LIST
1549: PUSH
1550: LD_INT 99
1552: PUSH
1553: LD_INT 79
1555: PUSH
1556: EMPTY
1557: LIST
1558: LIST
1559: PUSH
1560: LD_INT 87
1562: PUSH
1563: LD_INT 70
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: PUSH
1570: LD_INT 46
1572: PUSH
1573: LD_INT 49
1575: PUSH
1576: EMPTY
1577: LIST
1578: LIST
1579: PUSH
1580: EMPTY
1581: LIST
1582: LIST
1583: LIST
1584: LIST
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: PUSH
1590: LD_INT 200
1592: PUSH
1593: LD_INT 88
1595: PUSH
1596: EMPTY
1597: LIST
1598: LIST
1599: PUSH
1600: LD_INT 175
1602: PUSH
1603: LD_INT 80
1605: PUSH
1606: EMPTY
1607: LIST
1608: LIST
1609: PUSH
1610: LD_INT 135
1612: PUSH
1613: LD_INT 62
1615: PUSH
1616: EMPTY
1617: LIST
1618: LIST
1619: PUSH
1620: LD_INT 117
1622: PUSH
1623: LD_INT 53
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: PUSH
1630: LD_INT 103
1632: PUSH
1633: LD_INT 41
1635: PUSH
1636: EMPTY
1637: LIST
1638: LIST
1639: PUSH
1640: LD_INT 99
1642: PUSH
1643: LD_INT 24
1645: PUSH
1646: EMPTY
1647: LIST
1648: LIST
1649: PUSH
1650: LD_INT 85
1652: PUSH
1653: LD_INT 3
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: PUSH
1660: LD_INT 99
1662: PUSH
1663: LD_INT 24
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: PUSH
1670: LD_INT 103
1672: PUSH
1673: LD_INT 41
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: PUSH
1680: LD_INT 98
1682: PUSH
1683: LD_INT 47
1685: PUSH
1686: EMPTY
1687: LIST
1688: LIST
1689: PUSH
1690: LD_INT 99
1692: PUSH
1693: LD_INT 56
1695: PUSH
1696: EMPTY
1697: LIST
1698: LIST
1699: PUSH
1700: LD_INT 96
1702: PUSH
1703: LD_INT 66
1705: PUSH
1706: EMPTY
1707: LIST
1708: LIST
1709: PUSH
1710: LD_INT 99
1712: PUSH
1713: LD_INT 56
1715: PUSH
1716: EMPTY
1717: LIST
1718: LIST
1719: PUSH
1720: LD_INT 112
1722: PUSH
1723: LD_INT 66
1725: PUSH
1726: EMPTY
1727: LIST
1728: LIST
1729: PUSH
1730: LD_INT 129
1732: PUSH
1733: LD_INT 68
1735: PUSH
1736: EMPTY
1737: LIST
1738: LIST
1739: PUSH
1740: LD_INT 135
1742: PUSH
1743: LD_INT 62
1745: PUSH
1746: EMPTY
1747: LIST
1748: LIST
1749: PUSH
1750: LD_INT 156
1752: PUSH
1753: LD_INT 71
1755: PUSH
1756: EMPTY
1757: LIST
1758: LIST
1759: PUSH
1760: LD_INT 168
1762: PUSH
1763: LD_INT 76
1765: PUSH
1766: EMPTY
1767: LIST
1768: LIST
1769: PUSH
1770: LD_INT 168
1772: PUSH
1773: LD_INT 61
1775: PUSH
1776: EMPTY
1777: LIST
1778: LIST
1779: PUSH
1780: LD_INT 168
1782: PUSH
1783: LD_INT 75
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: PUSH
1790: LD_INT 185
1792: PUSH
1793: LD_INT 85
1795: PUSH
1796: EMPTY
1797: LIST
1798: LIST
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: LIST
1819: LIST
1820: LIST
1821: LIST
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: LIST
1827: ST_TO_ADDR
// mobile_patrol := [ ] ;
1828: LD_ADDR_EXP 18
1832: PUSH
1833: EMPTY
1834: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1835: LD_INT 3
1837: PPUSH
1838: LD_INT 1
1840: PPUSH
1841: LD_INT 3
1843: PPUSH
1844: LD_INT 4
1846: PPUSH
1847: LD_INT 100
1849: PPUSH
1850: CALL 43056 0 5
// mobile_patrol := Insert ( mobile_patrol , 1 , CreateVehicle ) ;
1854: LD_ADDR_EXP 18
1858: PUSH
1859: LD_EXP 18
1863: PPUSH
1864: LD_INT 1
1866: PPUSH
1867: CALL_OW 45
1871: PPUSH
1872: CALL_OW 2
1876: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 1 ] , 99 , 55 , false ) ;
1877: LD_EXP 18
1881: PUSH
1882: LD_INT 1
1884: ARRAY
1885: PPUSH
1886: LD_INT 99
1888: PPUSH
1889: LD_INT 55
1891: PPUSH
1892: LD_INT 0
1894: PPUSH
1895: CALL_OW 48
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1899: LD_INT 2
1901: PPUSH
1902: LD_INT 1
1904: PPUSH
1905: LD_INT 3
1907: PPUSH
1908: LD_INT 4
1910: PPUSH
1911: LD_INT 100
1913: PPUSH
1914: CALL 43056 0 5
// mobile_patrol := Insert ( mobile_patrol , 2 , CreateVehicle ) ;
1918: LD_ADDR_EXP 18
1922: PUSH
1923: LD_EXP 18
1927: PPUSH
1928: LD_INT 2
1930: PPUSH
1931: CALL_OW 45
1935: PPUSH
1936: CALL_OW 2
1940: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 2 ] , 27 , 49 , false ) ;
1941: LD_EXP 18
1945: PUSH
1946: LD_INT 2
1948: ARRAY
1949: PPUSH
1950: LD_INT 27
1952: PPUSH
1953: LD_INT 49
1955: PPUSH
1956: LD_INT 0
1958: PPUSH
1959: CALL_OW 48
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , [ us_laser , us_rocket_launcher , us_rocket_launcher , us_rocket_launcher ] [ Difficulty ] , 100 ) ;
1963: LD_INT 3
1965: PPUSH
1966: LD_INT 1
1968: PPUSH
1969: LD_INT 3
1971: PPUSH
1972: LD_INT 9
1974: PUSH
1975: LD_INT 7
1977: PUSH
1978: LD_INT 7
1980: PUSH
1981: LD_INT 7
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: LIST
1988: LIST
1989: PUSH
1990: LD_OWVAR 67
1994: ARRAY
1995: PPUSH
1996: LD_INT 100
1998: PPUSH
1999: CALL 43056 0 5
// mobile_patrol := Insert ( mobile_patrol , 3 , CreateVehicle ) ;
2003: LD_ADDR_EXP 18
2007: PUSH
2008: LD_EXP 18
2012: PPUSH
2013: LD_INT 3
2015: PPUSH
2016: CALL_OW 45
2020: PPUSH
2021: CALL_OW 2
2025: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 3 ] , 200 , 88 , false ) ;
2026: LD_EXP 18
2030: PUSH
2031: LD_INT 3
2033: ARRAY
2034: PPUSH
2035: LD_INT 200
2037: PPUSH
2038: LD_INT 88
2040: PPUSH
2041: LD_INT 0
2043: PPUSH
2044: CALL_OW 48
// for i := mobile_patrol downto 1 do
2048: LD_ADDR_VAR 0 2
2052: PUSH
2053: DOUBLE
2054: LD_EXP 18
2058: INC
2059: ST_TO_ADDR
2060: LD_INT 1
2062: PUSH
2063: FOR_DOWNTO
2064: IFFALSE 2075
// RaiseSailEvent ( 1 ) ;
2066: LD_INT 1
2068: PPUSH
2069: CALL_OW 427
2073: GO 2063
2075: POP
2076: POP
// end ;
2077: LD_VAR 0 1
2081: RET
// export function SpawnCargo ( ) ; var i , c , k , areas , road , tmp , veh ; begin
2082: LD_INT 0
2084: PPUSH
2085: PPUSH
2086: PPUSH
2087: PPUSH
2088: PPUSH
2089: PPUSH
2090: PPUSH
2091: PPUSH
// areas := [ [ road_east , 4 ] , [ road_south , 5 ] , [ road_west , 1 ] ] ;
2092: LD_ADDR_VAR 0 5
2096: PUSH
2097: LD_INT 20
2099: PUSH
2100: LD_INT 4
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: PUSH
2107: LD_INT 21
2109: PUSH
2110: LD_INT 5
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: LD_INT 22
2119: PUSH
2120: LD_INT 1
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: PUSH
2127: EMPTY
2128: LIST
2129: LIST
2130: LIST
2131: ST_TO_ADDR
// road := [ [ 176 , 81 , 135 , 62 , 114 , 67 , 93 , 71 , 76 , 67 ] , [ 107 , 92 , 92 , 72 , 77 , 68 ] , [ 45 , 49 , 67 , 59 , 77 , 68 ] ] ;
2132: LD_ADDR_VAR 0 6
2136: PUSH
2137: LD_INT 176
2139: PUSH
2140: LD_INT 81
2142: PUSH
2143: LD_INT 135
2145: PUSH
2146: LD_INT 62
2148: PUSH
2149: LD_INT 114
2151: PUSH
2152: LD_INT 67
2154: PUSH
2155: LD_INT 93
2157: PUSH
2158: LD_INT 71
2160: PUSH
2161: LD_INT 76
2163: PUSH
2164: LD_INT 67
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: PUSH
2179: LD_INT 107
2181: PUSH
2182: LD_INT 92
2184: PUSH
2185: LD_INT 92
2187: PUSH
2188: LD_INT 72
2190: PUSH
2191: LD_INT 77
2193: PUSH
2194: LD_INT 68
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: LIST
2201: LIST
2202: LIST
2203: LIST
2204: PUSH
2205: LD_INT 45
2207: PUSH
2208: LD_INT 49
2210: PUSH
2211: LD_INT 67
2213: PUSH
2214: LD_INT 59
2216: PUSH
2217: LD_INT 77
2219: PUSH
2220: LD_INT 68
2222: PUSH
2223: EMPTY
2224: LIST
2225: LIST
2226: LIST
2227: LIST
2228: LIST
2229: LIST
2230: PUSH
2231: EMPTY
2232: LIST
2233: LIST
2234: LIST
2235: ST_TO_ADDR
// k := rand ( 1 , areas ) ;
2236: LD_ADDR_VAR 0 4
2240: PUSH
2241: LD_INT 1
2243: PPUSH
2244: LD_VAR 0 5
2248: PPUSH
2249: CALL_OW 12
2253: ST_TO_ADDR
// c := rand ( 1 , 2 ) ;
2254: LD_ADDR_VAR 0 3
2258: PUSH
2259: LD_INT 1
2261: PPUSH
2262: LD_INT 2
2264: PPUSH
2265: CALL_OW 12
2269: ST_TO_ADDR
// uc_side := 1 ;
2270: LD_ADDR_OWVAR 20
2274: PUSH
2275: LD_INT 1
2277: ST_TO_ADDR
// uc_nation := 1 ;
2278: LD_ADDR_OWVAR 21
2282: PUSH
2283: LD_INT 1
2285: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
2286: LD_INT 2
2288: PPUSH
2289: LD_INT 3
2291: PPUSH
2292: LD_INT 3
2294: PPUSH
2295: LD_INT 12
2297: PPUSH
2298: LD_INT 100
2300: PPUSH
2301: CALL 43056 0 5
// veh := CreateVehicle ;
2305: LD_ADDR_VAR 0 8
2309: PUSH
2310: CALL_OW 45
2314: ST_TO_ADDR
// SetDir ( veh , areas [ k ] [ 2 ] ) ;
2315: LD_VAR 0 8
2319: PPUSH
2320: LD_VAR 0 5
2324: PUSH
2325: LD_VAR 0 4
2329: ARRAY
2330: PUSH
2331: LD_INT 2
2333: ARRAY
2334: PPUSH
2335: CALL_OW 233
// PlaceUnitArea ( veh , areas [ k ] [ 1 ] , false ) ;
2339: LD_VAR 0 8
2343: PPUSH
2344: LD_VAR 0 5
2348: PUSH
2349: LD_VAR 0 4
2353: ARRAY
2354: PUSH
2355: LD_INT 1
2357: ARRAY
2358: PPUSH
2359: LD_INT 0
2361: PPUSH
2362: CALL_OW 49
// SetCargo ( veh , [ mat_cans , mat_siberit ] [ c ] , 100 ) ;
2366: LD_VAR 0 8
2370: PPUSH
2371: LD_INT 1
2373: PUSH
2374: LD_INT 3
2376: PUSH
2377: EMPTY
2378: LIST
2379: LIST
2380: PUSH
2381: LD_VAR 0 3
2385: ARRAY
2386: PPUSH
2387: LD_INT 100
2389: PPUSH
2390: CALL_OW 290
// tmp := road [ k ] ;
2394: LD_ADDR_VAR 0 7
2398: PUSH
2399: LD_VAR 0 6
2403: PUSH
2404: LD_VAR 0 4
2408: ARRAY
2409: ST_TO_ADDR
// for i = 1 to tmp div 2 do
2410: LD_ADDR_VAR 0 2
2414: PUSH
2415: DOUBLE
2416: LD_INT 1
2418: DEC
2419: ST_TO_ADDR
2420: LD_VAR 0 7
2424: PUSH
2425: LD_INT 2
2427: DIV
2428: PUSH
2429: FOR_TO
2430: IFFALSE 2477
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2432: LD_VAR 0 8
2436: PPUSH
2437: LD_VAR 0 7
2441: PUSH
2442: LD_VAR 0 2
2446: PUSH
2447: LD_INT 2
2449: MUL
2450: PUSH
2451: LD_INT 1
2453: MINUS
2454: ARRAY
2455: PPUSH
2456: LD_VAR 0 7
2460: PUSH
2461: LD_VAR 0 2
2465: PUSH
2466: LD_INT 2
2468: MUL
2469: ARRAY
2470: PPUSH
2471: CALL_OW 171
2475: GO 2429
2477: POP
2478: POP
// AddComGive ( veh , alfa ) ;
2479: LD_VAR 0 8
2483: PPUSH
2484: LD_INT 5
2486: PPUSH
2487: CALL_OW 221
// AddComWait ( veh , 0 0$2 ) ;
2491: LD_VAR 0 8
2495: PPUSH
2496: LD_INT 70
2498: PPUSH
2499: CALL_OW 202
// for i = tmp div 2 downto 1 do
2503: LD_ADDR_VAR 0 2
2507: PUSH
2508: DOUBLE
2509: LD_VAR 0 7
2513: PUSH
2514: LD_INT 2
2516: DIV
2517: INC
2518: ST_TO_ADDR
2519: LD_INT 1
2521: PUSH
2522: FOR_DOWNTO
2523: IFFALSE 2570
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2525: LD_VAR 0 8
2529: PPUSH
2530: LD_VAR 0 7
2534: PUSH
2535: LD_VAR 0 2
2539: PUSH
2540: LD_INT 2
2542: MUL
2543: PUSH
2544: LD_INT 1
2546: MINUS
2547: ARRAY
2548: PPUSH
2549: LD_VAR 0 7
2553: PUSH
2554: LD_VAR 0 2
2558: PUSH
2559: LD_INT 2
2561: MUL
2562: ARRAY
2563: PPUSH
2564: CALL_OW 171
2568: GO 2522
2570: POP
2571: POP
// AddComMoveToArea ( veh , areas [ k ] [ 1 ] ) ;
2572: LD_VAR 0 8
2576: PPUSH
2577: LD_VAR 0 5
2581: PUSH
2582: LD_VAR 0 4
2586: ARRAY
2587: PUSH
2588: LD_INT 1
2590: ARRAY
2591: PPUSH
2592: CALL_OW 173
// repeat wait ( 0 0$1 ) ;
2596: LD_INT 35
2598: PPUSH
2599: CALL_OW 67
// until IsInArea ( veh , areas [ k ] [ 1 ] ) and GetCargo ( veh , c ) = 0 ;
2603: LD_VAR 0 8
2607: PPUSH
2608: LD_VAR 0 5
2612: PUSH
2613: LD_VAR 0 4
2617: ARRAY
2618: PUSH
2619: LD_INT 1
2621: ARRAY
2622: PPUSH
2623: CALL_OW 308
2627: IFFALSE 2649
2629: PUSH
2630: LD_VAR 0 8
2634: PPUSH
2635: LD_VAR 0 3
2639: PPUSH
2640: CALL_OW 289
2644: PUSH
2645: LD_INT 0
2647: EQUAL
2648: AND
2649: IFFALSE 2596
// RemoveUnit ( veh ) ;
2651: LD_VAR 0 8
2655: PPUSH
2656: CALL_OW 64
// end ;
2660: LD_VAR 0 1
2664: RET
// every 3 3$00 do
2665: GO 2667
2667: DISABLE
// begin enable ;
2668: ENABLE
// SpawnCargo ;
2669: CALL 2082 0 0
// end ;
2673: END
// export function PrepareDefenders ; var i , tmp ; begin
2674: LD_INT 0
2676: PPUSH
2677: PPUSH
2678: PPUSH
// if defenders then
2679: LD_EXP 21
2683: IFFALSE 2687
// exit ;
2685: GO 2959
// for i = 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
2687: LD_ADDR_VAR 0 2
2691: PUSH
2692: DOUBLE
2693: LD_INT 1
2695: DEC
2696: ST_TO_ADDR
2697: LD_INT 4
2699: PUSH
2700: LD_INT 5
2702: PUSH
2703: LD_INT 6
2705: PUSH
2706: LD_INT 7
2708: PUSH
2709: EMPTY
2710: LIST
2711: LIST
2712: LIST
2713: LIST
2714: PUSH
2715: LD_OWVAR 67
2719: ARRAY
2720: PUSH
2721: FOR_TO
2722: IFFALSE 2861
// begin tmp := Produce ( amfac2 , [ us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_remote , [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ) ;
2724: LD_ADDR_VAR 0 3
2728: PUSH
2729: LD_INT 6
2731: PPUSH
2732: LD_INT 2
2734: PUSH
2735: LD_INT 3
2737: PUSH
2738: EMPTY
2739: LIST
2740: LIST
2741: PUSH
2742: LD_INT 1
2744: PPUSH
2745: LD_INT 2
2747: PPUSH
2748: CALL_OW 12
2752: ARRAY
2753: PPUSH
2754: LD_INT 1
2756: PUSH
2757: LD_INT 3
2759: PUSH
2760: EMPTY
2761: LIST
2762: LIST
2763: PUSH
2764: LD_INT 1
2766: PPUSH
2767: LD_INT 2
2769: PPUSH
2770: CALL_OW 12
2774: ARRAY
2775: PPUSH
2776: LD_INT 2
2778: PPUSH
2779: LD_INT 4
2781: PUSH
2782: LD_INT 5
2784: PUSH
2785: LD_INT 9
2787: PUSH
2788: EMPTY
2789: LIST
2790: LIST
2791: LIST
2792: PUSH
2793: LD_INT 1
2795: PPUSH
2796: LD_INT 3
2798: PPUSH
2799: CALL_OW 12
2803: ARRAY
2804: PPUSH
2805: CALL 40652 0 5
2809: ST_TO_ADDR
// if tmp then
2810: LD_VAR 0 3
2814: IFFALSE 2859
// AddComConstruct ( amfac2 , tmp [ 1 ] , tmp [ 2 ] , tmp [ 3 ] , tmp [ 4 ] ) ;
2816: LD_INT 6
2818: PPUSH
2819: LD_VAR 0 3
2823: PUSH
2824: LD_INT 1
2826: ARRAY
2827: PPUSH
2828: LD_VAR 0 3
2832: PUSH
2833: LD_INT 2
2835: ARRAY
2836: PPUSH
2837: LD_VAR 0 3
2841: PUSH
2842: LD_INT 3
2844: ARRAY
2845: PPUSH
2846: LD_VAR 0 3
2850: PUSH
2851: LD_INT 4
2853: ARRAY
2854: PPUSH
2855: CALL_OW 185
// end ;
2859: GO 2721
2861: POP
2862: POP
// repeat wait ( 0 0$1 ) ;
2863: LD_INT 35
2865: PPUSH
2866: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
2870: LD_INT 22
2872: PUSH
2873: LD_INT 1
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: PUSH
2880: LD_INT 33
2882: PUSH
2883: LD_INT 2
2885: PUSH
2886: EMPTY
2887: LIST
2888: LIST
2889: PUSH
2890: EMPTY
2891: LIST
2892: LIST
2893: PPUSH
2894: CALL_OW 69
2898: PUSH
2899: LD_INT 4
2901: PUSH
2902: LD_INT 5
2904: PUSH
2905: LD_INT 6
2907: PUSH
2908: LD_INT 7
2910: PUSH
2911: EMPTY
2912: LIST
2913: LIST
2914: LIST
2915: LIST
2916: PUSH
2917: LD_OWVAR 67
2921: ARRAY
2922: GREATEREQUAL
2923: IFFALSE 2863
// defenders := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ;
2925: LD_ADDR_EXP 21
2929: PUSH
2930: LD_INT 22
2932: PUSH
2933: LD_INT 1
2935: PUSH
2936: EMPTY
2937: LIST
2938: LIST
2939: PUSH
2940: LD_INT 33
2942: PUSH
2943: LD_INT 2
2945: PUSH
2946: EMPTY
2947: LIST
2948: LIST
2949: PUSH
2950: EMPTY
2951: LIST
2952: LIST
2953: PPUSH
2954: CALL_OW 69
2958: ST_TO_ADDR
// end ;
2959: LD_VAR 0 1
2963: RET
// export function Defend ; var i , un , veh , tmp ; begin
2964: LD_INT 0
2966: PPUSH
2967: PPUSH
2968: PPUSH
2969: PPUSH
2970: PPUSH
// defcon_wave := defcon_wave + 1 ;
2971: LD_ADDR_EXP 23
2975: PUSH
2976: LD_EXP 23
2980: PUSH
2981: LD_INT 1
2983: PLUS
2984: ST_TO_ADDR
// if not defenders then
2985: LD_EXP 21
2989: NOT
2990: IFFALSE 2996
// PrepareDefenders ;
2992: CALL 2674 0 0
// if defcon_wave > 1 then
2996: LD_EXP 23
3000: PUSH
3001: LD_INT 1
3003: GREATER
3004: IFFALSE 3262
// begin for i = 1 to defcon_wave + 2 do
3006: LD_ADDR_VAR 0 2
3010: PUSH
3011: DOUBLE
3012: LD_INT 1
3014: DEC
3015: ST_TO_ADDR
3016: LD_EXP 23
3020: PUSH
3021: LD_INT 2
3023: PLUS
3024: PUSH
3025: FOR_TO
3026: IFFALSE 3168
// begin uc_side := 1 ;
3028: LD_ADDR_OWVAR 20
3032: PUSH
3033: LD_INT 1
3035: ST_TO_ADDR
// uc_nation := 1 ;
3036: LD_ADDR_OWVAR 21
3040: PUSH
3041: LD_INT 1
3043: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_siberite , control_manual , [ us_gatling_gun , us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
3044: LD_INT 4
3046: PPUSH
3047: LD_INT 3
3049: PPUSH
3050: LD_INT 1
3052: PPUSH
3053: LD_INT 4
3055: PUSH
3056: LD_INT 6
3058: PUSH
3059: LD_INT 7
3061: PUSH
3062: EMPTY
3063: LIST
3064: LIST
3065: LIST
3066: PUSH
3067: LD_INT 1
3069: PPUSH
3070: LD_INT 3
3072: PPUSH
3073: CALL_OW 12
3077: ARRAY
3078: PPUSH
3079: LD_INT 100
3081: PPUSH
3082: CALL 43056 0 5
// veh := CreateVehicle ;
3086: LD_ADDR_VAR 0 4
3090: PUSH
3091: CALL_OW 45
3095: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
3096: LD_VAR 0 4
3100: PPUSH
3101: LD_INT 1
3103: PPUSH
3104: CALL_OW 233
// defenders := defenders ^ veh ;
3108: LD_ADDR_EXP 21
3112: PUSH
3113: LD_EXP 21
3117: PUSH
3118: LD_VAR 0 4
3122: ADD
3123: ST_TO_ADDR
// PrepareHuman ( false , 3 , 9 ) ;
3124: LD_INT 0
3126: PPUSH
3127: LD_INT 3
3129: PPUSH
3130: LD_INT 9
3132: PPUSH
3133: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3137: CALL_OW 44
3141: PPUSH
3142: LD_VAR 0 4
3146: PPUSH
3147: CALL_OW 52
// PlaceUnitArea ( veh , west_spawn , false ) ;
3151: LD_VAR 0 4
3155: PPUSH
3156: LD_INT 25
3158: PPUSH
3159: LD_INT 0
3161: PPUSH
3162: CALL_OW 49
// end ;
3166: GO 3025
3168: POP
3169: POP
// for i = 1 to defcon_wave do
3170: LD_ADDR_VAR 0 2
3174: PUSH
3175: DOUBLE
3176: LD_INT 1
3178: DEC
3179: ST_TO_ADDR
3180: LD_EXP 23
3184: PUSH
3185: FOR_TO
3186: IFFALSE 3260
// begin uc_side := 1 ;
3188: LD_ADDR_OWVAR 20
3192: PUSH
3193: LD_INT 1
3195: ST_TO_ADDR
// uc_nation := 1 ;
3196: LD_ADDR_OWVAR 21
3200: PUSH
3201: LD_INT 1
3203: ST_TO_ADDR
// PrepareHuman ( false , 5 , 9 ) ;
3204: LD_INT 0
3206: PPUSH
3207: LD_INT 5
3209: PPUSH
3210: LD_INT 9
3212: PPUSH
3213: CALL_OW 380
// un := CreateHuman ;
3217: LD_ADDR_VAR 0 3
3221: PUSH
3222: CALL_OW 44
3226: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
3227: LD_VAR 0 3
3231: PPUSH
3232: LD_INT 25
3234: PPUSH
3235: LD_INT 0
3237: PPUSH
3238: CALL_OW 49
// defenders := defenders ^ un ;
3242: LD_ADDR_EXP 21
3246: PUSH
3247: LD_EXP 21
3251: PUSH
3252: LD_VAR 0 3
3256: ADD
3257: ST_TO_ADDR
// end ;
3258: GO 3185
3260: POP
3261: POP
// end ; repeat wait ( 0 0$1 ) ;
3262: LD_INT 35
3264: PPUSH
3265: CALL_OW 67
// for i in defenders do
3269: LD_ADDR_VAR 0 2
3273: PUSH
3274: LD_EXP 21
3278: PUSH
3279: FOR_IN
3280: IFFALSE 3366
// begin if defcon and GetDistUnitXY ( i , defcon [ 1 ] , defcon [ 2 ] ) > 10 and not HasTask ( i ) then
3282: LD_EXP 22
3286: IFFALSE 3321
3288: PUSH
3289: LD_VAR 0 2
3293: PPUSH
3294: LD_EXP 22
3298: PUSH
3299: LD_INT 1
3301: ARRAY
3302: PPUSH
3303: LD_EXP 22
3307: PUSH
3308: LD_INT 2
3310: ARRAY
3311: PPUSH
3312: CALL_OW 297
3316: PUSH
3317: LD_INT 10
3319: GREATER
3320: AND
3321: IFFALSE 3335
3323: PUSH
3324: LD_VAR 0 2
3328: PPUSH
3329: CALL_OW 314
3333: NOT
3334: AND
3335: IFFALSE 3364
// ComAgressiveMove ( i , defcon [ 1 ] , defcon [ 2 ] ) ;
3337: LD_VAR 0 2
3341: PPUSH
3342: LD_EXP 22
3346: PUSH
3347: LD_INT 1
3349: ARRAY
3350: PPUSH
3351: LD_EXP 22
3355: PUSH
3356: LD_INT 2
3358: ARRAY
3359: PPUSH
3360: CALL_OW 114
// end ;
3364: GO 3279
3366: POP
3367: POP
// until not defenders ;
3368: LD_EXP 21
3372: NOT
3373: IFFALSE 3262
// end ;
3375: LD_VAR 0 1
3379: RET
// every 0 0$1 do var radar , i ;
3380: GO 3382
3382: DISABLE
3383: LD_INT 0
3385: PPUSH
3386: PPUSH
// begin uc_side := 1 ;
3387: LD_ADDR_OWVAR 20
3391: PUSH
3392: LD_INT 1
3394: ST_TO_ADDR
// uc_nation := 1 ;
3395: LD_ADDR_OWVAR 21
3399: PUSH
3400: LD_INT 1
3402: ST_TO_ADDR
// PrepareVehicle ( us_light_wheeled , engine_solar , control_computer , us_radar , 100 ) ;
3403: LD_INT 1
3405: PPUSH
3406: LD_INT 2
3408: PPUSH
3409: LD_INT 3
3411: PPUSH
3412: LD_INT 11
3414: PPUSH
3415: LD_INT 100
3417: PPUSH
3418: CALL 43056 0 5
// radar := CreateVehicle ;
3422: LD_ADDR_VAR 0 1
3426: PUSH
3427: CALL_OW 45
3431: ST_TO_ADDR
// SetDir ( radar , 4 ) ;
3432: LD_VAR 0 1
3436: PPUSH
3437: LD_INT 4
3439: PPUSH
3440: CALL_OW 233
// PlaceUnitXY ( radar , 51 , 45 , false ) ;
3444: LD_VAR 0 1
3448: PPUSH
3449: LD_INT 51
3451: PPUSH
3452: LD_INT 45
3454: PPUSH
3455: LD_INT 0
3457: PPUSH
3458: CALL_OW 48
// repeat AddComWait ( radar , 0 0$20 ) ;
3462: LD_VAR 0 1
3466: PPUSH
3467: LD_INT 700
3469: PPUSH
3470: CALL_OW 202
// AddComMoveXY ( radar , 65 , 75 ) ;
3474: LD_VAR 0 1
3478: PPUSH
3479: LD_INT 65
3481: PPUSH
3482: LD_INT 75
3484: PPUSH
3485: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3489: LD_VAR 0 1
3493: PPUSH
3494: LD_INT 350
3496: PPUSH
3497: CALL_OW 202
// AddComMoveXY ( radar , 83 , 87 ) ;
3501: LD_VAR 0 1
3505: PPUSH
3506: LD_INT 83
3508: PPUSH
3509: LD_INT 87
3511: PPUSH
3512: CALL_OW 171
// AddComWait ( radar , 0 0$15 ) ;
3516: LD_VAR 0 1
3520: PPUSH
3521: LD_INT 525
3523: PPUSH
3524: CALL_OW 202
// AddComMoveXY ( radar , 94 , 81 ) ;
3528: LD_VAR 0 1
3532: PPUSH
3533: LD_INT 94
3535: PPUSH
3536: LD_INT 81
3538: PPUSH
3539: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3543: LD_VAR 0 1
3547: PPUSH
3548: LD_INT 350
3550: PPUSH
3551: CALL_OW 202
// AddComMoveXY ( radar , 55 , 48 ) ;
3555: LD_VAR 0 1
3559: PPUSH
3560: LD_INT 55
3562: PPUSH
3563: LD_INT 48
3565: PPUSH
3566: CALL_OW 171
// wait ( 1 1$00 ) ;
3570: LD_INT 2100
3572: PPUSH
3573: CALL_OW 67
// until not IsOk ( radar ) ;
3577: LD_VAR 0 1
3581: PPUSH
3582: CALL_OW 302
3586: NOT
3587: IFFALSE 3462
// end ;
3589: PPOPN 2
3591: END
// every 7 7$30 trigger Difficulty > 1 and extra_patrol do var un ;
3592: LD_OWVAR 67
3596: PUSH
3597: LD_INT 1
3599: GREATER
3600: IFFALSE 3608
3602: PUSH
3603: LD_EXP 11
3607: AND
3608: IFFALSE 3830
3610: GO 3612
3612: DISABLE
3613: LD_INT 0
3615: PPUSH
// begin enable ;
3616: ENABLE
// uc_side := 1 ;
3617: LD_ADDR_OWVAR 20
3621: PUSH
3622: LD_INT 1
3624: ST_TO_ADDR
// uc_nation := 1 ;
3625: LD_ADDR_OWVAR 21
3629: PUSH
3630: LD_INT 1
3632: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_gatling_gun , 100 ) ;
3633: LD_INT 5
3635: PPUSH
3636: LD_INT 3
3638: PPUSH
3639: LD_INT 3
3641: PPUSH
3642: LD_INT 4
3644: PPUSH
3645: LD_INT 100
3647: PPUSH
3648: CALL 43056 0 5
// un := CreateVehicle ;
3652: LD_ADDR_VAR 0 1
3656: PUSH
3657: CALL_OW 45
3661: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3662: LD_VAR 0 1
3666: PPUSH
3667: LD_INT 3
3669: PPUSH
3670: CALL_OW 233
// PlaceUnitXY ( un , 155 , 2 , false ) ;
3674: LD_VAR 0 1
3678: PPUSH
3679: LD_INT 155
3681: PPUSH
3682: LD_INT 2
3684: PPUSH
3685: LD_INT 0
3687: PPUSH
3688: CALL_OW 48
// ComAgressiveMove ( un , 169 , 77 ) ;
3692: LD_VAR 0 1
3696: PPUSH
3697: LD_INT 169
3699: PPUSH
3700: LD_INT 77
3702: PPUSH
3703: CALL_OW 114
// AddComWait ( un , 0 0$2 ) ;
3707: LD_VAR 0 1
3711: PPUSH
3712: LD_INT 70
3714: PPUSH
3715: CALL_OW 202
// AddComAgressiveMove ( un , 134 , 62 ) ;
3719: LD_VAR 0 1
3723: PPUSH
3724: LD_INT 134
3726: PPUSH
3727: LD_INT 62
3729: PPUSH
3730: CALL_OW 174
// AddComAgressiveMove ( un , 103 , 42 ) ;
3734: LD_VAR 0 1
3738: PPUSH
3739: LD_INT 103
3741: PPUSH
3742: LD_INT 42
3744: PPUSH
3745: CALL_OW 174
// AddComWait ( un , 0 0$2 ) ;
3749: LD_VAR 0 1
3753: PPUSH
3754: LD_INT 70
3756: PPUSH
3757: CALL_OW 202
// AddComAgressiveMove ( un , 84 , 2 ) ;
3761: LD_VAR 0 1
3765: PPUSH
3766: LD_INT 84
3768: PPUSH
3769: LD_INT 2
3771: PPUSH
3772: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
3776: LD_INT 35
3778: PPUSH
3779: CALL_OW 67
// if IsDead ( un ) then
3783: LD_VAR 0 1
3787: PPUSH
3788: CALL_OW 301
3792: IFFALSE 3804
// begin extra_patrol := false ;
3794: LD_ADDR_EXP 11
3798: PUSH
3799: LD_INT 0
3801: ST_TO_ADDR
// exit ;
3802: GO 3830
// end ; until IsAt ( un , 84 , 2 ) ;
3804: LD_VAR 0 1
3808: PPUSH
3809: LD_INT 84
3811: PPUSH
3812: LD_INT 2
3814: PPUSH
3815: CALL_OW 307
3819: IFFALSE 3776
// RemoveUnit ( un ) ;
3821: LD_VAR 0 1
3825: PPUSH
3826: CALL_OW 64
// end ; end_of_file
3830: PPOPN 1
3832: END
// export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Mike ; export function PrepareFriends ; var i , tmp , buildings , areas , bunkers , cl , gammaCommander ; begin
3833: LD_INT 0
3835: PPUSH
3836: PPUSH
3837: PPUSH
3838: PPUSH
3839: PPUSH
3840: PPUSH
3841: PPUSH
3842: PPUSH
// uc_side := 4 ;
3843: LD_ADDR_OWVAR 20
3847: PUSH
3848: LD_INT 4
3850: ST_TO_ADDR
// uc_nation := 1 ;
3851: LD_ADDR_OWVAR 21
3855: PUSH
3856: LD_INT 1
3858: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 10c_ ) ;
3859: LD_ADDR_EXP 38
3863: PUSH
3864: LD_STRING DeltaDoctor
3866: PPUSH
3867: LD_EXP 1
3871: NOT
3872: PPUSH
3873: LD_STRING 10c_
3875: PPUSH
3876: CALL 38070 0 3
3880: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 10c_ ) ;
3881: LD_ADDR_EXP 37
3885: PUSH
3886: LD_STRING Joan
3888: PPUSH
3889: LD_EXP 1
3893: NOT
3894: PPUSH
3895: LD_STRING 10c_
3897: PPUSH
3898: CALL 38070 0 3
3902: ST_TO_ADDR
// if Joan then
3903: LD_EXP 37
3907: IFFALSE 3938
// friends := Insert ( friends , friends + 1 , Joan ) ;
3909: LD_ADDR_EXP 4
3913: PUSH
3914: LD_EXP 4
3918: PPUSH
3919: LD_EXP 4
3923: PUSH
3924: LD_INT 1
3926: PLUS
3927: PPUSH
3928: LD_EXP 37
3932: PPUSH
3933: CALL_OW 2
3937: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 10c_ ) ;
3938: LD_ADDR_EXP 36
3942: PUSH
3943: LD_STRING Simms
3945: PPUSH
3946: LD_EXP 1
3950: NOT
3951: PPUSH
3952: LD_STRING 10c_
3954: PPUSH
3955: CALL 38070 0 3
3959: ST_TO_ADDR
// if debug then
3960: LD_EXP 1
3964: IFFALSE 3981
// Kikuchi := NewCharacter ( Yamoko ) else
3966: LD_ADDR_EXP 35
3970: PUSH
3971: LD_STRING Yamoko
3973: PPUSH
3974: CALL_OW 25
3978: ST_TO_ADDR
3979: GO 4003
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 11_ ) ;
3981: LD_ADDR_EXP 35
3985: PUSH
3986: LD_STRING Kikuchi
3988: PPUSH
3989: LD_EXP 1
3993: NOT
3994: PPUSH
3995: LD_STRING 11_
3997: PPUSH
3998: CALL 38070 0 3
4002: ST_TO_ADDR
// if Kikuchi then
4003: LD_EXP 35
4007: IFFALSE 4038
// friends := Insert ( friends , friends + 1 , Kikuchi ) ;
4009: LD_ADDR_EXP 4
4013: PUSH
4014: LD_EXP 4
4018: PPUSH
4019: LD_EXP 4
4023: PUSH
4024: LD_INT 1
4026: PLUS
4027: PPUSH
4028: LD_EXP 35
4032: PPUSH
4033: CALL_OW 2
4037: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 11_ ) ;
4038: LD_ADDR_EXP 34
4042: PUSH
4043: LD_STRING Frank
4045: PPUSH
4046: LD_EXP 1
4050: NOT
4051: PPUSH
4052: LD_STRING 11_
4054: PPUSH
4055: CALL 38070 0 3
4059: ST_TO_ADDR
// if Frank then
4060: LD_EXP 34
4064: IFFALSE 4095
// friends := Insert ( friends , friends + 1 , Frank ) ;
4066: LD_ADDR_EXP 4
4070: PUSH
4071: LD_EXP 4
4075: PPUSH
4076: LD_EXP 4
4080: PUSH
4081: LD_INT 1
4083: PLUS
4084: PPUSH
4085: LD_EXP 34
4089: PPUSH
4090: CALL_OW 2
4094: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , 11_ ) ;
4095: LD_ADDR_EXP 33
4099: PUSH
4100: LD_STRING Gary
4102: PPUSH
4103: LD_EXP 1
4107: NOT
4108: PPUSH
4109: LD_STRING 11_
4111: PPUSH
4112: CALL 38070 0 3
4116: ST_TO_ADDR
// if Gary then
4117: LD_EXP 33
4121: IFFALSE 4152
// friends := Insert ( friends , friends + 1 , Gary ) ;
4123: LD_ADDR_EXP 4
4127: PUSH
4128: LD_EXP 4
4132: PPUSH
4133: LD_EXP 4
4137: PUSH
4138: LD_INT 1
4140: PLUS
4141: PPUSH
4142: LD_EXP 33
4146: PPUSH
4147: CALL_OW 2
4151: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , ( not debug ) , 11_ ) ;
4152: LD_ADDR_EXP 32
4156: PUSH
4157: LD_STRING Cornell
4159: PPUSH
4160: LD_EXP 1
4164: NOT
4165: PPUSH
4166: LD_STRING 11_
4168: PPUSH
4169: CALL 38070 0 3
4173: ST_TO_ADDR
// if Cornel then
4174: LD_EXP 32
4178: IFFALSE 4209
// friends := Insert ( friends , friends + 1 , Cornel ) ;
4180: LD_ADDR_EXP 4
4184: PUSH
4185: LD_EXP 4
4189: PPUSH
4190: LD_EXP 4
4194: PUSH
4195: LD_INT 1
4197: PLUS
4198: PPUSH
4199: LD_EXP 32
4203: PPUSH
4204: CALL_OW 2
4208: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , 11_ ) ;
4209: LD_ADDR_EXP 31
4213: PUSH
4214: LD_STRING Houten
4216: PPUSH
4217: LD_EXP 1
4221: NOT
4222: PPUSH
4223: LD_STRING 11_
4225: PPUSH
4226: CALL 38070 0 3
4230: ST_TO_ADDR
// if Houten then
4231: LD_EXP 31
4235: IFFALSE 4266
// friends := Insert ( friends , friends + 1 , Houten ) ;
4237: LD_ADDR_EXP 4
4241: PUSH
4242: LD_EXP 4
4246: PPUSH
4247: LD_EXP 4
4251: PUSH
4252: LD_INT 1
4254: PLUS
4255: PPUSH
4256: LD_EXP 31
4260: PPUSH
4261: CALL_OW 2
4265: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 11_ ) ;
4266: LD_ADDR_EXP 30
4270: PUSH
4271: LD_STRING Gladstone
4273: PPUSH
4274: LD_EXP 1
4278: NOT
4279: PPUSH
4280: LD_STRING 11_
4282: PPUSH
4283: CALL 38070 0 3
4287: ST_TO_ADDR
// if Gladstone then
4288: LD_EXP 30
4292: IFFALSE 4323
// friends := Insert ( friends , friends + 1 , Gladstone ) ;
4294: LD_ADDR_EXP 4
4298: PUSH
4299: LD_EXP 4
4303: PPUSH
4304: LD_EXP 4
4308: PUSH
4309: LD_INT 1
4311: PLUS
4312: PPUSH
4313: LD_EXP 30
4317: PPUSH
4318: CALL_OW 2
4322: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 11_ ) ;
4323: LD_ADDR_EXP 24
4327: PUSH
4328: LD_STRING Lisa
4330: PPUSH
4331: LD_EXP 1
4335: NOT
4336: PPUSH
4337: LD_STRING 11_
4339: PPUSH
4340: CALL 38070 0 3
4344: ST_TO_ADDR
// if Lisa then
4345: LD_EXP 24
4349: IFFALSE 4374
// friends := Insert ( friends , 1 , Lisa ) ;
4351: LD_ADDR_EXP 4
4355: PUSH
4356: LD_EXP 4
4360: PPUSH
4361: LD_INT 1
4363: PPUSH
4364: LD_EXP 24
4368: PPUSH
4369: CALL_OW 2
4373: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 11_ ) ;
4374: LD_ADDR_EXP 25
4378: PUSH
4379: LD_STRING Donaldson
4381: PPUSH
4382: LD_EXP 1
4386: NOT
4387: PPUSH
4388: LD_STRING 11_
4390: PPUSH
4391: CALL 38070 0 3
4395: ST_TO_ADDR
// if Donaldson then
4396: LD_EXP 25
4400: IFFALSE 4431
// friends := Insert ( friends , friends + 1 , Donaldson ) ;
4402: LD_ADDR_EXP 4
4406: PUSH
4407: LD_EXP 4
4411: PPUSH
4412: LD_EXP 4
4416: PUSH
4417: LD_INT 1
4419: PLUS
4420: PPUSH
4421: LD_EXP 25
4425: PPUSH
4426: CALL_OW 2
4430: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 11_ ) ;
4431: LD_ADDR_EXP 26
4435: PUSH
4436: LD_STRING Bobby
4438: PPUSH
4439: LD_EXP 1
4443: NOT
4444: PPUSH
4445: LD_STRING 11_
4447: PPUSH
4448: CALL 38070 0 3
4452: ST_TO_ADDR
// if Bobby then
4453: LD_EXP 26
4457: IFFALSE 4488
// friends := Insert ( friends , friends + 1 , Bobby ) ;
4459: LD_ADDR_EXP 4
4463: PUSH
4464: LD_EXP 4
4468: PPUSH
4469: LD_EXP 4
4473: PUSH
4474: LD_INT 1
4476: PLUS
4477: PPUSH
4478: LD_EXP 26
4482: PPUSH
4483: CALL_OW 2
4487: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 11_ ) ;
4488: LD_ADDR_EXP 27
4492: PUSH
4493: LD_STRING Cyrus
4495: PPUSH
4496: LD_EXP 1
4500: NOT
4501: PPUSH
4502: LD_STRING 11_
4504: PPUSH
4505: CALL 38070 0 3
4509: ST_TO_ADDR
// if Cyrus then
4510: LD_EXP 27
4514: IFFALSE 4545
// friends := Insert ( friends , friends + 1 , Cyrus ) ;
4516: LD_ADDR_EXP 4
4520: PUSH
4521: LD_EXP 4
4525: PPUSH
4526: LD_EXP 4
4530: PUSH
4531: LD_INT 1
4533: PLUS
4534: PPUSH
4535: LD_EXP 27
4539: PPUSH
4540: CALL_OW 2
4544: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 11_ ) ;
4545: LD_ADDR_EXP 28
4549: PUSH
4550: LD_STRING Denis
4552: PPUSH
4553: LD_EXP 1
4557: NOT
4558: PPUSH
4559: LD_STRING 11_
4561: PPUSH
4562: CALL 38070 0 3
4566: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , 11_ ) ;
4567: LD_ADDR_EXP 29
4571: PUSH
4572: LD_STRING Brown
4574: PPUSH
4575: LD_EXP 1
4579: NOT
4580: PPUSH
4581: LD_STRING 11_
4583: PPUSH
4584: CALL 38070 0 3
4588: ST_TO_ADDR
// if Brown then
4589: LD_EXP 29
4593: IFFALSE 4624
// friends := Insert ( friends , friends + 1 , Brown ) ;
4595: LD_ADDR_EXP 4
4599: PUSH
4600: LD_EXP 4
4604: PPUSH
4605: LD_EXP 4
4609: PUSH
4610: LD_INT 1
4612: PLUS
4613: PPUSH
4614: LD_EXP 29
4618: PPUSH
4619: CALL_OW 2
4623: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , 10c_ ) ;
4624: LD_ADDR_EXP 39
4628: PUSH
4629: LD_STRING Mike
4631: PPUSH
4632: LD_EXP 1
4636: NOT
4637: PPUSH
4638: LD_STRING 10c_
4640: PPUSH
4641: CALL 38070 0 3
4645: ST_TO_ADDR
// if Mike then
4646: LD_EXP 39
4650: IFFALSE 4691
// begin SetClass ( Mike , class_apeman_engineer ) ;
4652: LD_EXP 39
4656: PPUSH
4657: LD_INT 16
4659: PPUSH
4660: CALL_OW 336
// PlaceUnitXY ( Mike , 180 , 87 , false ) ;
4664: LD_EXP 39
4668: PPUSH
4669: LD_INT 180
4671: PPUSH
4672: LD_INT 87
4674: PPUSH
4675: LD_INT 0
4677: PPUSH
4678: CALL_OW 48
// ComHold ( Mike ) ;
4682: LD_EXP 39
4686: PPUSH
4687: CALL_OW 140
// end ; friends := friends ^ CreateCharacterSet ( 11c_others ) ^ CreateCharacterSet ( 11_others ) ;
4691: LD_ADDR_EXP 4
4695: PUSH
4696: LD_EXP 4
4700: PUSH
4701: LD_STRING 11c_others
4703: PPUSH
4704: CALL_OW 31
4708: ADD
4709: PUSH
4710: LD_STRING 11_others
4712: PPUSH
4713: CALL_OW 31
4717: ADD
4718: ST_TO_ADDR
// if friends < 18 then
4719: LD_EXP 4
4723: PUSH
4724: LD_INT 18
4726: LESS
4727: IFFALSE 4799
// for i = 1 to 18 do
4729: LD_ADDR_VAR 0 2
4733: PUSH
4734: DOUBLE
4735: LD_INT 1
4737: DEC
4738: ST_TO_ADDR
4739: LD_INT 18
4741: PUSH
4742: FOR_TO
4743: IFFALSE 4797
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 7 ) ;
4745: LD_INT 0
4747: PPUSH
4748: LD_INT 1
4750: PPUSH
4751: LD_INT 4
4753: PPUSH
4754: CALL_OW 12
4758: PPUSH
4759: LD_INT 7
4761: PPUSH
4762: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
4766: LD_ADDR_EXP 4
4770: PUSH
4771: LD_EXP 4
4775: PPUSH
4776: LD_EXP 4
4780: PUSH
4781: LD_INT 1
4783: PLUS
4784: PPUSH
4785: CALL_OW 44
4789: PPUSH
4790: CALL_OW 2
4794: ST_TO_ADDR
// end ;
4795: GO 4742
4797: POP
4798: POP
// for i in friends do
4799: LD_ADDR_VAR 0 2
4803: PUSH
4804: LD_EXP 4
4808: PUSH
4809: FOR_IN
4810: IFFALSE 4885
// if GetNation ( i ) = nation_american and GetSkill ( i , 1 ) >= GetSkill ( i , 4 ) then
4812: LD_VAR 0 2
4816: PPUSH
4817: CALL_OW 248
4821: PUSH
4822: LD_INT 1
4824: EQUAL
4825: IFFALSE 4855
4827: PUSH
4828: LD_VAR 0 2
4832: PPUSH
4833: LD_INT 1
4835: PPUSH
4836: CALL_OW 259
4840: PUSH
4841: LD_VAR 0 2
4845: PPUSH
4846: LD_INT 4
4848: PPUSH
4849: CALL_OW 259
4853: GREATEREQUAL
4854: AND
4855: IFFALSE 4871
// SetClass ( i , class_soldier ) else
4857: LD_VAR 0 2
4861: PPUSH
4862: LD_INT 1
4864: PPUSH
4865: CALL_OW 336
4869: GO 4883
// SetClass ( i , class_scientistic ) ;
4871: LD_VAR 0 2
4875: PPUSH
4876: LD_INT 4
4878: PPUSH
4879: CALL_OW 336
4883: GO 4809
4885: POP
4886: POP
// if Frank then
4887: LD_EXP 34
4891: IFFALSE 4905
// SetClass ( Frank , class_sniper ) ;
4893: LD_EXP 34
4897: PPUSH
4898: LD_INT 5
4900: PPUSH
4901: CALL_OW 336
// SetClass ( [ Joan , Denis , DeltaDoctor , Simms ] , class_scientistic ) ;
4905: LD_EXP 37
4909: PUSH
4910: LD_EXP 28
4914: PUSH
4915: LD_EXP 38
4919: PUSH
4920: LD_EXP 36
4924: PUSH
4925: EMPTY
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: PPUSH
4931: LD_INT 4
4933: PPUSH
4934: CALL_OW 336
// selected = CharacterSelection (  , 7 , 7 , [ sel_dont_change_class , JMM , Roth , Simms , Denis , DeltaDoctor , sel_not_hired , sel_changeable , sel_change_class ] ^ friends , [ [ class_soldier , 3 ] , [ class_scientistic , 2 , 5 ] , [ class_sniper , 0 , 2 ] ] ) ;
4938: LD_ADDR_EXP 3
4942: PUSH
4943: LD_STRING 
4945: PPUSH
4946: LD_INT 7
4948: PPUSH
4949: LD_INT 7
4951: PPUSH
4952: LD_INT -6
4954: PUSH
4955: LD_EXP 15
4959: PUSH
4960: LD_EXP 16
4964: PUSH
4965: LD_EXP 36
4969: PUSH
4970: LD_EXP 28
4974: PUSH
4975: LD_EXP 38
4979: PUSH
4980: LD_INT -2
4982: PUSH
4983: LD_INT -3
4985: PUSH
4986: LD_INT -5
4988: PUSH
4989: EMPTY
4990: LIST
4991: LIST
4992: LIST
4993: LIST
4994: LIST
4995: LIST
4996: LIST
4997: LIST
4998: LIST
4999: PUSH
5000: LD_EXP 4
5004: ADD
5005: PPUSH
5006: LD_INT 1
5008: PUSH
5009: LD_INT 3
5011: PUSH
5012: EMPTY
5013: LIST
5014: LIST
5015: PUSH
5016: LD_INT 4
5018: PUSH
5019: LD_INT 2
5021: PUSH
5022: LD_INT 5
5024: PUSH
5025: EMPTY
5026: LIST
5027: LIST
5028: LIST
5029: PUSH
5030: LD_INT 5
5032: PUSH
5033: LD_INT 0
5035: PUSH
5036: LD_INT 2
5038: PUSH
5039: EMPTY
5040: LIST
5041: LIST
5042: LIST
5043: PUSH
5044: EMPTY
5045: LIST
5046: LIST
5047: LIST
5048: PPUSH
5049: CALL_OW 42
5053: ST_TO_ADDR
// if Simms then
5054: LD_EXP 36
5058: IFFALSE 5076
// selected := selected ^ Simms ;
5060: LD_ADDR_EXP 3
5064: PUSH
5065: LD_EXP 3
5069: PUSH
5070: LD_EXP 36
5074: ADD
5075: ST_TO_ADDR
// if Denis then
5076: LD_EXP 28
5080: IFFALSE 5098
// selected := selected ^ Denis ;
5082: LD_ADDR_EXP 3
5086: PUSH
5087: LD_EXP 3
5091: PUSH
5092: LD_EXP 28
5096: ADD
5097: ST_TO_ADDR
// if DeltaDoctor then
5098: LD_EXP 38
5102: IFFALSE 5120
// selected := selected ^ DeltaDoctor ;
5104: LD_ADDR_EXP 3
5108: PUSH
5109: LD_EXP 3
5113: PUSH
5114: LD_EXP 38
5118: ADD
5119: ST_TO_ADDR
// if gamma_commander = 1 and Donaldson then
5120: LD_EXP 10
5124: PUSH
5125: LD_INT 1
5127: EQUAL
5128: IFFALSE 5136
5130: PUSH
5131: LD_EXP 25
5135: AND
5136: IFFALSE 5148
// gammaCommander := Donaldson ;
5138: LD_ADDR_VAR 0 8
5142: PUSH
5143: LD_EXP 25
5147: ST_TO_ADDR
// if gamma_commander = 2 and Brown then
5148: LD_EXP 10
5152: PUSH
5153: LD_INT 2
5155: EQUAL
5156: IFFALSE 5164
5158: PUSH
5159: LD_EXP 29
5163: AND
5164: IFFALSE 5176
// gammaCommander := Brown ;
5166: LD_ADDR_VAR 0 8
5170: PUSH
5171: LD_EXP 29
5175: ST_TO_ADDR
// friends := friends diff selected ;
5176: LD_ADDR_EXP 4
5180: PUSH
5181: LD_EXP 4
5185: PUSH
5186: LD_EXP 3
5190: DIFF
5191: ST_TO_ADDR
// friends := friends diff gammaCommander ;
5192: LD_ADDR_EXP 4
5196: PUSH
5197: LD_EXP 4
5201: PUSH
5202: LD_VAR 0 8
5206: DIFF
5207: ST_TO_ADDR
// buildings := [ [ ambar1 , ambar2 , ambar3 ] , [ amlab2 , amlab3 , amlab4 ] ] ;
5208: LD_ADDR_VAR 0 4
5212: PUSH
5213: LD_INT 111
5215: PUSH
5216: LD_INT 137
5218: PUSH
5219: LD_INT 51
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: LIST
5226: PUSH
5227: LD_INT 147
5229: PUSH
5230: LD_INT 129
5232: PUSH
5233: LD_INT 25
5235: PUSH
5236: EMPTY
5237: LIST
5238: LIST
5239: LIST
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: ST_TO_ADDR
// areas := [ friends_spawn_1 , friends_spawn_2 , friends_spawn_3 , friends_spawn_4 , friends_spawn_5 , friends_spawn_6 ] ;
5245: LD_ADDR_VAR 0 5
5249: PUSH
5250: LD_INT 5
5252: PUSH
5253: LD_INT 6
5255: PUSH
5256: LD_INT 7
5258: PUSH
5259: LD_INT 8
5261: PUSH
5262: LD_INT 17
5264: PUSH
5265: LD_INT 18
5267: PUSH
5268: EMPTY
5269: LIST
5270: LIST
5271: LIST
5272: LIST
5273: LIST
5274: LIST
5275: ST_TO_ADDR
// for i in buildings do
5276: LD_ADDR_VAR 0 2
5280: PUSH
5281: LD_VAR 0 4
5285: PUSH
5286: FOR_IN
5287: IFFALSE 5303
// SetSide ( i , 4 ) ;
5289: LD_VAR 0 2
5293: PPUSH
5294: LD_INT 4
5296: PPUSH
5297: CALL_OW 235
5301: GO 5286
5303: POP
5304: POP
// for i in selected union gammaCommander do
5305: LD_ADDR_VAR 0 2
5309: PUSH
5310: LD_EXP 3
5314: PUSH
5315: LD_VAR 0 8
5319: UNION
5320: PUSH
5321: FOR_IN
5322: IFFALSE 5662
// begin if GetClass ( i ) in [ 1 , 5 ] then
5324: LD_VAR 0 2
5328: PPUSH
5329: CALL_OW 257
5333: PUSH
5334: LD_INT 1
5336: PUSH
5337: LD_INT 5
5339: PUSH
5340: EMPTY
5341: LIST
5342: LIST
5343: IN
5344: IFFALSE 5504
// begin if buildings [ 1 ] then
5346: LD_VAR 0 4
5350: PUSH
5351: LD_INT 1
5353: ARRAY
5354: IFFALSE 5415
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
5356: LD_VAR 0 2
5360: PPUSH
5361: LD_VAR 0 4
5365: PUSH
5366: LD_INT 1
5368: ARRAY
5369: PUSH
5370: LD_INT 1
5372: ARRAY
5373: PPUSH
5374: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
5378: LD_ADDR_VAR 0 4
5382: PUSH
5383: LD_VAR 0 4
5387: PPUSH
5388: LD_INT 1
5390: PPUSH
5391: LD_VAR 0 4
5395: PUSH
5396: LD_INT 1
5398: ARRAY
5399: PPUSH
5400: LD_INT 1
5402: PPUSH
5403: CALL_OW 3
5407: PPUSH
5408: CALL_OW 1
5412: ST_TO_ADDR
// end else
5413: GO 5502
// begin if not areas then
5415: LD_VAR 0 5
5419: NOT
5420: IFFALSE 5454
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5422: LD_VAR 0 2
5426: PPUSH
5427: LD_INT 87
5429: PPUSH
5430: LD_INT 68
5432: PPUSH
5433: LD_INT 8
5435: PPUSH
5436: LD_INT 0
5438: PPUSH
5439: CALL_OW 50
// ComHold ( i ) ;
5443: LD_VAR 0 2
5447: PPUSH
5448: CALL_OW 140
// end else
5452: GO 5502
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5454: LD_VAR 0 2
5458: PPUSH
5459: LD_VAR 0 5
5463: PUSH
5464: LD_INT 1
5466: ARRAY
5467: PPUSH
5468: LD_INT 0
5470: PPUSH
5471: CALL_OW 49
// ComHold ( i ) ;
5475: LD_VAR 0 2
5479: PPUSH
5480: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5484: LD_ADDR_VAR 0 5
5488: PUSH
5489: LD_VAR 0 5
5493: PPUSH
5494: LD_INT 1
5496: PPUSH
5497: CALL_OW 3
5501: ST_TO_ADDR
// end ; end ; end else
5502: GO 5660
// begin if buildings [ 2 ] then
5504: LD_VAR 0 4
5508: PUSH
5509: LD_INT 2
5511: ARRAY
5512: IFFALSE 5573
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
5514: LD_VAR 0 2
5518: PPUSH
5519: LD_VAR 0 4
5523: PUSH
5524: LD_INT 2
5526: ARRAY
5527: PUSH
5528: LD_INT 1
5530: ARRAY
5531: PPUSH
5532: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
5536: LD_ADDR_VAR 0 4
5540: PUSH
5541: LD_VAR 0 4
5545: PPUSH
5546: LD_INT 2
5548: PPUSH
5549: LD_VAR 0 4
5553: PUSH
5554: LD_INT 2
5556: ARRAY
5557: PPUSH
5558: LD_INT 1
5560: PPUSH
5561: CALL_OW 3
5565: PPUSH
5566: CALL_OW 1
5570: ST_TO_ADDR
// end else
5571: GO 5660
// begin if not areas then
5573: LD_VAR 0 5
5577: NOT
5578: IFFALSE 5612
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5580: LD_VAR 0 2
5584: PPUSH
5585: LD_INT 87
5587: PPUSH
5588: LD_INT 68
5590: PPUSH
5591: LD_INT 8
5593: PPUSH
5594: LD_INT 0
5596: PPUSH
5597: CALL_OW 50
// ComHold ( i ) ;
5601: LD_VAR 0 2
5605: PPUSH
5606: CALL_OW 140
// end else
5610: GO 5660
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5612: LD_VAR 0 2
5616: PPUSH
5617: LD_VAR 0 5
5621: PUSH
5622: LD_INT 1
5624: ARRAY
5625: PPUSH
5626: LD_INT 0
5628: PPUSH
5629: CALL_OW 49
// ComHold ( i ) ;
5633: LD_VAR 0 2
5637: PPUSH
5638: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5642: LD_ADDR_VAR 0 5
5646: PUSH
5647: LD_VAR 0 5
5651: PPUSH
5652: LD_INT 1
5654: PPUSH
5655: CALL_OW 3
5659: ST_TO_ADDR
// end ; end ; end ; end ;
5660: GO 5321
5662: POP
5663: POP
// bunkers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) ;
5664: LD_ADDR_VAR 0 6
5668: PUSH
5669: LD_INT 22
5671: PUSH
5672: LD_INT 1
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: PUSH
5679: LD_INT 30
5681: PUSH
5682: LD_INT 32
5684: PUSH
5685: EMPTY
5686: LIST
5687: LIST
5688: PUSH
5689: EMPTY
5690: LIST
5691: LIST
5692: PPUSH
5693: CALL_OW 69
5697: ST_TO_ADDR
// for i = bunkers - friends downto 1 do
5698: LD_ADDR_VAR 0 2
5702: PUSH
5703: DOUBLE
5704: LD_VAR 0 6
5708: PUSH
5709: LD_EXP 4
5713: MINUS
5714: INC
5715: ST_TO_ADDR
5716: LD_INT 1
5718: PUSH
5719: FOR_DOWNTO
5720: IFFALSE 5787
// begin PrepareHuman ( false , 1 , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
5722: LD_INT 0
5724: PPUSH
5725: LD_INT 1
5727: PPUSH
5728: LD_INT 7
5730: PUSH
5731: LD_INT 8
5733: PUSH
5734: LD_INT 9
5736: PUSH
5737: LD_INT 10
5739: PUSH
5740: EMPTY
5741: LIST
5742: LIST
5743: LIST
5744: LIST
5745: PUSH
5746: LD_OWVAR 67
5750: ARRAY
5751: PPUSH
5752: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
5756: LD_ADDR_EXP 4
5760: PUSH
5761: LD_EXP 4
5765: PPUSH
5766: LD_EXP 4
5770: PUSH
5771: LD_INT 1
5773: PLUS
5774: PPUSH
5775: CALL_OW 44
5779: PPUSH
5780: CALL_OW 2
5784: ST_TO_ADDR
// end ;
5785: GO 5719
5787: POP
5788: POP
// if friends then
5789: LD_EXP 4
5793: IFFALSE 5909
// begin tmp := friends ;
5795: LD_ADDR_VAR 0 3
5799: PUSH
5800: LD_EXP 4
5804: ST_TO_ADDR
// for i = 1 to bunkers do
5805: LD_ADDR_VAR 0 2
5809: PUSH
5810: DOUBLE
5811: LD_INT 1
5813: DEC
5814: ST_TO_ADDR
5815: LD_VAR 0 6
5819: PUSH
5820: FOR_TO
5821: IFFALSE 5907
// begin SetSide ( tmp [ tmp ] , 1 ) ;
5823: LD_VAR 0 3
5827: PUSH
5828: LD_VAR 0 3
5832: ARRAY
5833: PPUSH
5834: LD_INT 1
5836: PPUSH
5837: CALL_OW 235
// SetClass ( tmp [ tmp ] , 1 ) ;
5841: LD_VAR 0 3
5845: PUSH
5846: LD_VAR 0 3
5850: ARRAY
5851: PPUSH
5852: LD_INT 1
5854: PPUSH
5855: CALL_OW 336
// PlaceHumanInUnit ( tmp [ tmp ] , bunkers [ i ] ) ;
5859: LD_VAR 0 3
5863: PUSH
5864: LD_VAR 0 3
5868: ARRAY
5869: PPUSH
5870: LD_VAR 0 6
5874: PUSH
5875: LD_VAR 0 2
5879: ARRAY
5880: PPUSH
5881: CALL_OW 52
// tmp := Delete ( tmp , tmp ) ;
5885: LD_ADDR_VAR 0 3
5889: PUSH
5890: LD_VAR 0 3
5894: PPUSH
5895: LD_VAR 0 3
5899: PPUSH
5900: CALL_OW 3
5904: ST_TO_ADDR
// end ;
5905: GO 5820
5907: POP
5908: POP
// end ; areas := areas union [ guard_spawn_1 , guard_spawn_2 , guard_spawn_3 , guard_spawn_4 , guard_spawn_5 , guard_spawn_6 , guard_spawn_7 , guard_spawn_8 , guard_spawn_9 , guard_spawn_10 , guard_spawn_11 , guard_spawn_12 , guard_spawn_13 , guard_spawn_14 , guard_spawn_15 , guard_spawn_16 , guard_spawn_17 , guard_spawn_18 , guard_spawn_19 , guard_spawn_20 ] ;
5909: LD_ADDR_VAR 0 5
5913: PUSH
5914: LD_VAR 0 5
5918: PUSH
5919: LD_INT 9
5921: PUSH
5922: LD_INT 10
5924: PUSH
5925: LD_INT 11
5927: PUSH
5928: LD_INT 12
5930: PUSH
5931: LD_INT 13
5933: PUSH
5934: LD_INT 14
5936: PUSH
5937: LD_INT 15
5939: PUSH
5940: LD_INT 16
5942: PUSH
5943: LD_INT 26
5945: PUSH
5946: LD_INT 27
5948: PUSH
5949: LD_INT 28
5951: PUSH
5952: LD_INT 29
5954: PUSH
5955: LD_INT 30
5957: PUSH
5958: LD_INT 31
5960: PUSH
5961: LD_INT 32
5963: PUSH
5964: LD_INT 33
5966: PUSH
5967: LD_INT 34
5969: PUSH
5970: LD_INT 35
5972: PUSH
5973: LD_INT 36
5975: PUSH
5976: LD_INT 37
5978: PUSH
5979: EMPTY
5980: LIST
5981: LIST
5982: LIST
5983: LIST
5984: LIST
5985: LIST
5986: LIST
5987: LIST
5988: LIST
5989: LIST
5990: LIST
5991: LIST
5992: LIST
5993: LIST
5994: LIST
5995: LIST
5996: LIST
5997: LIST
5998: LIST
5999: LIST
6000: UNION
6001: ST_TO_ADDR
// for i in friends do
6002: LD_ADDR_VAR 0 2
6006: PUSH
6007: LD_EXP 4
6011: PUSH
6012: FOR_IN
6013: IFFALSE 6300
// begin SetTag ( i , 2 ) ;
6015: LD_VAR 0 2
6019: PPUSH
6020: LD_INT 2
6022: PPUSH
6023: CALL_OW 109
// if not GetClass ( i ) in [ class_soldier , class_sniper ] then
6027: LD_VAR 0 2
6031: PPUSH
6032: CALL_OW 257
6036: PUSH
6037: LD_INT 1
6039: PUSH
6040: LD_INT 5
6042: PUSH
6043: EMPTY
6044: LIST
6045: LIST
6046: IN
6047: NOT
6048: IFFALSE 6062
// SetClass ( i , 1 ) ;
6050: LD_VAR 0 2
6054: PPUSH
6055: LD_INT 1
6057: PPUSH
6058: CALL_OW 336
// if GetClass ( i ) in [ class_soldier , class_sniper ] and buildings [ 1 ] then
6062: LD_VAR 0 2
6066: PPUSH
6067: CALL_OW 257
6071: PUSH
6072: LD_INT 1
6074: PUSH
6075: LD_INT 5
6077: PUSH
6078: EMPTY
6079: LIST
6080: LIST
6081: IN
6082: IFFALSE 6094
6084: PUSH
6085: LD_VAR 0 4
6089: PUSH
6090: LD_INT 1
6092: ARRAY
6093: AND
6094: IFFALSE 6155
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
6096: LD_VAR 0 2
6100: PPUSH
6101: LD_VAR 0 4
6105: PUSH
6106: LD_INT 1
6108: ARRAY
6109: PUSH
6110: LD_INT 1
6112: ARRAY
6113: PPUSH
6114: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
6118: LD_ADDR_VAR 0 4
6122: PUSH
6123: LD_VAR 0 4
6127: PPUSH
6128: LD_INT 1
6130: PPUSH
6131: LD_VAR 0 4
6135: PUSH
6136: LD_INT 1
6138: ARRAY
6139: PPUSH
6140: LD_INT 1
6142: PPUSH
6143: CALL_OW 3
6147: PPUSH
6148: CALL_OW 1
6152: ST_TO_ADDR
// continue ;
6153: GO 6012
// end ; if GetClass ( i ) = class_scientistic and buildings [ 2 ] then
6155: LD_VAR 0 2
6159: PPUSH
6160: CALL_OW 257
6164: PUSH
6165: LD_INT 4
6167: EQUAL
6168: IFFALSE 6180
6170: PUSH
6171: LD_VAR 0 4
6175: PUSH
6176: LD_INT 2
6178: ARRAY
6179: AND
6180: IFFALSE 6241
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
6182: LD_VAR 0 2
6186: PPUSH
6187: LD_VAR 0 4
6191: PUSH
6192: LD_INT 2
6194: ARRAY
6195: PUSH
6196: LD_INT 1
6198: ARRAY
6199: PPUSH
6200: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
6204: LD_ADDR_VAR 0 4
6208: PUSH
6209: LD_VAR 0 4
6213: PPUSH
6214: LD_INT 2
6216: PPUSH
6217: LD_VAR 0 4
6221: PUSH
6222: LD_INT 2
6224: ARRAY
6225: PPUSH
6226: LD_INT 1
6228: PPUSH
6229: CALL_OW 3
6233: PPUSH
6234: CALL_OW 1
6238: ST_TO_ADDR
// continue ;
6239: GO 6012
// end ; PlaceUnitArea ( i , areas [ 1 ] , false ) ;
6241: LD_VAR 0 2
6245: PPUSH
6246: LD_VAR 0 5
6250: PUSH
6251: LD_INT 1
6253: ARRAY
6254: PPUSH
6255: LD_INT 0
6257: PPUSH
6258: CALL_OW 49
// areas := Delete ( areas , 1 ) ;
6262: LD_ADDR_VAR 0 5
6266: PUSH
6267: LD_VAR 0 5
6271: PPUSH
6272: LD_INT 1
6274: PPUSH
6275: CALL_OW 3
6279: ST_TO_ADDR
// ComHold ( i ) ;
6280: LD_VAR 0 2
6284: PPUSH
6285: CALL_OW 140
// if not areas then
6289: LD_VAR 0 5
6293: NOT
6294: IFFALSE 6298
// break ;
6296: GO 6300
// end ;
6298: GO 6012
6300: POP
6301: POP
// if UnitFilter ( friends , [ f_not , [ f_placed ] ] ) then
6302: LD_EXP 4
6306: PPUSH
6307: LD_INT 3
6309: PUSH
6310: LD_INT 52
6312: PUSH
6313: EMPTY
6314: LIST
6315: PUSH
6316: EMPTY
6317: LIST
6318: LIST
6319: PPUSH
6320: CALL_OW 72
6324: IFFALSE 6391
// for i in UnitFilter ( friends , [ f_not , [ f_placed ] ] ) do
6326: LD_ADDR_VAR 0 2
6330: PUSH
6331: LD_EXP 4
6335: PPUSH
6336: LD_INT 3
6338: PUSH
6339: LD_INT 52
6341: PUSH
6342: EMPTY
6343: LIST
6344: PUSH
6345: EMPTY
6346: LIST
6347: LIST
6348: PPUSH
6349: CALL_OW 72
6353: PUSH
6354: FOR_IN
6355: IFFALSE 6389
// begin PlaceUnitXYR ( i , 65 , 58 , 7 , false ) ;
6357: LD_VAR 0 2
6361: PPUSH
6362: LD_INT 65
6364: PPUSH
6365: LD_INT 58
6367: PPUSH
6368: LD_INT 7
6370: PPUSH
6371: LD_INT 0
6373: PPUSH
6374: CALL_OW 50
// ComHold ( i ) ;
6378: LD_VAR 0 2
6382: PPUSH
6383: CALL_OW 140
// end ;
6387: GO 6354
6389: POP
6390: POP
// if Frank then
6391: LD_EXP 34
6395: IFFALSE 6409
// SetClass ( Frank , class_sniper ) ;
6397: LD_EXP 34
6401: PPUSH
6402: LD_INT 5
6404: PPUSH
6405: CALL_OW 336
// end ; end_of_file
6409: LD_VAR 0 1
6413: RET
// export function CanSayRand ( side ) ; begin
6414: LD_INT 0
6416: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6417: LD_ADDR_VAR 0 2
6421: PUSH
6422: LD_INT 52
6424: PUSH
6425: EMPTY
6426: LIST
6427: PUSH
6428: LD_INT 22
6430: PUSH
6431: LD_VAR 0 1
6435: PUSH
6436: EMPTY
6437: LIST
6438: LIST
6439: PUSH
6440: LD_INT 2
6442: PUSH
6443: LD_INT 25
6445: PUSH
6446: LD_INT 1
6448: PUSH
6449: EMPTY
6450: LIST
6451: LIST
6452: PUSH
6453: LD_INT 25
6455: PUSH
6456: LD_INT 2
6458: PUSH
6459: EMPTY
6460: LIST
6461: LIST
6462: PUSH
6463: LD_INT 25
6465: PUSH
6466: LD_INT 3
6468: PUSH
6469: EMPTY
6470: LIST
6471: LIST
6472: PUSH
6473: LD_INT 25
6475: PUSH
6476: LD_INT 4
6478: PUSH
6479: EMPTY
6480: LIST
6481: LIST
6482: PUSH
6483: EMPTY
6484: LIST
6485: LIST
6486: LIST
6487: LIST
6488: LIST
6489: PUSH
6490: EMPTY
6491: LIST
6492: LIST
6493: LIST
6494: PPUSH
6495: CALL_OW 69
6499: PUSH
6500: LD_EXP 15
6504: PUSH
6505: LD_EXP 34
6509: PUSH
6510: LD_EXP 24
6514: PUSH
6515: LD_EXP 25
6519: PUSH
6520: LD_EXP 26
6524: PUSH
6525: LD_EXP 27
6529: PUSH
6530: LD_EXP 28
6534: PUSH
6535: LD_EXP 29
6539: PUSH
6540: LD_EXP 30
6544: PUSH
6545: LD_EXP 31
6549: PUSH
6550: LD_EXP 17
6554: PUSH
6555: LD_EXP 32
6559: PUSH
6560: LD_EXP 33
6564: PUSH
6565: LD_EXP 35
6569: PUSH
6570: EMPTY
6571: LIST
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: LIST
6577: LIST
6578: LIST
6579: LIST
6580: LIST
6581: LIST
6582: LIST
6583: LIST
6584: LIST
6585: DIFF
6586: ST_TO_ADDR
// end ;
6587: LD_VAR 0 2
6591: RET
// export function SayRand ( sex , dial ) ; begin
6592: LD_INT 0
6594: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6595: LD_ADDR_VAR 0 3
6599: PUSH
6600: LD_INT 52
6602: PUSH
6603: EMPTY
6604: LIST
6605: PUSH
6606: LD_INT 22
6608: PUSH
6609: LD_INT 1
6611: PUSH
6612: EMPTY
6613: LIST
6614: LIST
6615: PUSH
6616: LD_INT 26
6618: PUSH
6619: LD_VAR 0 1
6623: PUSH
6624: EMPTY
6625: LIST
6626: LIST
6627: PUSH
6628: LD_INT 2
6630: PUSH
6631: LD_INT 25
6633: PUSH
6634: LD_INT 1
6636: PUSH
6637: EMPTY
6638: LIST
6639: LIST
6640: PUSH
6641: LD_INT 25
6643: PUSH
6644: LD_INT 2
6646: PUSH
6647: EMPTY
6648: LIST
6649: LIST
6650: PUSH
6651: LD_INT 25
6653: PUSH
6654: LD_INT 3
6656: PUSH
6657: EMPTY
6658: LIST
6659: LIST
6660: PUSH
6661: LD_INT 25
6663: PUSH
6664: LD_INT 4
6666: PUSH
6667: EMPTY
6668: LIST
6669: LIST
6670: PUSH
6671: EMPTY
6672: LIST
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: PUSH
6678: EMPTY
6679: LIST
6680: LIST
6681: LIST
6682: LIST
6683: PPUSH
6684: CALL_OW 69
6688: PUSH
6689: LD_EXP 15
6693: PUSH
6694: LD_EXP 34
6698: PUSH
6699: LD_EXP 24
6703: PUSH
6704: LD_EXP 25
6708: PUSH
6709: LD_EXP 26
6713: PUSH
6714: LD_EXP 27
6718: PUSH
6719: LD_EXP 28
6723: PUSH
6724: LD_EXP 29
6728: PUSH
6729: LD_EXP 30
6733: PUSH
6734: LD_EXP 31
6738: PUSH
6739: LD_EXP 17
6743: PUSH
6744: LD_EXP 32
6748: PUSH
6749: LD_EXP 33
6753: PUSH
6754: LD_EXP 35
6758: PUSH
6759: EMPTY
6760: LIST
6761: LIST
6762: LIST
6763: LIST
6764: LIST
6765: LIST
6766: LIST
6767: LIST
6768: LIST
6769: LIST
6770: LIST
6771: LIST
6772: LIST
6773: LIST
6774: DIFF
6775: ST_TO_ADDR
// if not result then
6776: LD_VAR 0 3
6780: NOT
6781: IFFALSE 6785
// exit ;
6783: GO 6813
// result := result [ 1 ] ;
6785: LD_ADDR_VAR 0 3
6789: PUSH
6790: LD_VAR 0 3
6794: PUSH
6795: LD_INT 1
6797: ARRAY
6798: ST_TO_ADDR
// Say ( result , dial ) ;
6799: LD_VAR 0 3
6803: PPUSH
6804: LD_VAR 0 2
6808: PPUSH
6809: CALL_OW 88
// end ;
6813: LD_VAR 0 3
6817: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
6818: LD_INT 0
6820: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
6821: LD_ADDR_VAR 0 4
6825: PUSH
6826: LD_INT 22
6828: PUSH
6829: LD_INT 1
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: PUSH
6836: LD_INT 26
6838: PUSH
6839: LD_VAR 0 1
6843: PUSH
6844: EMPTY
6845: LIST
6846: LIST
6847: PUSH
6848: LD_INT 2
6850: PUSH
6851: LD_INT 25
6853: PUSH
6854: LD_INT 1
6856: PUSH
6857: EMPTY
6858: LIST
6859: LIST
6860: PUSH
6861: LD_INT 25
6863: PUSH
6864: LD_INT 2
6866: PUSH
6867: EMPTY
6868: LIST
6869: LIST
6870: PUSH
6871: LD_INT 25
6873: PUSH
6874: LD_INT 3
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: PUSH
6881: LD_INT 25
6883: PUSH
6884: LD_INT 4
6886: PUSH
6887: EMPTY
6888: LIST
6889: LIST
6890: PUSH
6891: EMPTY
6892: LIST
6893: LIST
6894: LIST
6895: LIST
6896: LIST
6897: PUSH
6898: EMPTY
6899: LIST
6900: LIST
6901: LIST
6902: PPUSH
6903: CALL_OW 69
6907: PUSH
6908: LD_EXP 15
6912: PUSH
6913: LD_EXP 34
6917: PUSH
6918: LD_EXP 24
6922: PUSH
6923: LD_EXP 25
6927: PUSH
6928: LD_EXP 26
6932: PUSH
6933: LD_EXP 27
6937: PUSH
6938: LD_EXP 28
6942: PUSH
6943: LD_EXP 29
6947: PUSH
6948: LD_EXP 30
6952: PUSH
6953: LD_EXP 31
6957: PUSH
6958: LD_EXP 17
6962: PUSH
6963: LD_EXP 32
6967: PUSH
6968: LD_EXP 33
6972: PUSH
6973: LD_EXP 35
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: LIST
6982: LIST
6983: LIST
6984: LIST
6985: LIST
6986: LIST
6987: LIST
6988: LIST
6989: LIST
6990: LIST
6991: LIST
6992: LIST
6993: PUSH
6994: LD_VAR 0 3
6998: ADD
6999: DIFF
7000: ST_TO_ADDR
// if not result then
7001: LD_VAR 0 4
7005: NOT
7006: IFFALSE 7010
// exit ;
7008: GO 7038
// result := result [ 1 ] ;
7010: LD_ADDR_VAR 0 4
7014: PUSH
7015: LD_VAR 0 4
7019: PUSH
7020: LD_INT 1
7022: ARRAY
7023: ST_TO_ADDR
// Say ( result , dial ) ;
7024: LD_VAR 0 4
7028: PPUSH
7029: LD_VAR 0 2
7033: PPUSH
7034: CALL_OW 88
// end ;
7038: LD_VAR 0 4
7042: RET
// export function Patrol ( unit , path , flags ) ; var i , x , y , c , p , station , tmp_path , status , enemy , e , spot_dist , safe_place , chase_range , need_refuel ; begin
7043: LD_INT 0
7045: PPUSH
7046: PPUSH
7047: PPUSH
7048: PPUSH
7049: PPUSH
7050: PPUSH
7051: PPUSH
7052: PPUSH
7053: PPUSH
7054: PPUSH
7055: PPUSH
7056: PPUSH
7057: PPUSH
7058: PPUSH
7059: PPUSH
// if not unit or not path or GetType ( unit ) = unit_building then
7060: LD_VAR 0 1
7064: NOT
7065: IFTRUE 7074
7067: PUSH
7068: LD_VAR 0 2
7072: NOT
7073: OR
7074: IFTRUE 7091
7076: PUSH
7077: LD_VAR 0 1
7081: PPUSH
7082: CALL_OW 247
7086: PUSH
7087: LD_INT 3
7089: EQUAL
7090: OR
7091: IFFALSE 7095
// exit ;
7093: GO 8644
// for i = path downto 1 do
7095: LD_ADDR_VAR 0 5
7099: PUSH
7100: DOUBLE
7101: LD_VAR 0 2
7105: INC
7106: ST_TO_ADDR
7107: LD_INT 1
7109: PUSH
7110: FOR_DOWNTO
7111: IFFALSE 7172
// begin if not ValidHex ( path [ i ] [ 1 ] , path [ i ] [ 2 ] ) then
7113: LD_VAR 0 2
7117: PUSH
7118: LD_VAR 0 5
7122: ARRAY
7123: PUSH
7124: LD_INT 1
7126: ARRAY
7127: PPUSH
7128: LD_VAR 0 2
7132: PUSH
7133: LD_VAR 0 5
7137: ARRAY
7138: PUSH
7139: LD_INT 2
7141: ARRAY
7142: PPUSH
7143: CALL_OW 488
7147: NOT
7148: IFFALSE 7170
// path = Delete ( path , i ) ;
7150: LD_ADDR_VAR 0 2
7154: PUSH
7155: LD_VAR 0 2
7159: PPUSH
7160: LD_VAR 0 5
7164: PPUSH
7165: CALL_OW 3
7169: ST_TO_ADDR
// end ;
7170: GO 7110
7172: POP
7173: POP
// if not path then
7174: LD_VAR 0 2
7178: NOT
7179: IFFALSE 7183
// exit ;
7181: GO 8644
// tmp_path := [ ] ;
7183: LD_ADDR_VAR 0 11
7187: PUSH
7188: EMPTY
7189: ST_TO_ADDR
// if flags then
7190: LD_VAR 0 3
7194: IFFALSE 7268
// begin if flags [ 1 ] then
7196: LD_VAR 0 3
7200: PUSH
7201: LD_INT 1
7203: ARRAY
7204: IFFALSE 7220
// safe_place = flags [ 1 ] ;
7206: LD_ADDR_VAR 0 16
7210: PUSH
7211: LD_VAR 0 3
7215: PUSH
7216: LD_INT 1
7218: ARRAY
7219: ST_TO_ADDR
// if flags [ 2 ] then
7220: LD_VAR 0 3
7224: PUSH
7225: LD_INT 2
7227: ARRAY
7228: IFFALSE 7244
// spot_dist = flags [ 2 ] ;
7230: LD_ADDR_VAR 0 15
7234: PUSH
7235: LD_VAR 0 3
7239: PUSH
7240: LD_INT 2
7242: ARRAY
7243: ST_TO_ADDR
// if flags [ 3 ] then
7244: LD_VAR 0 3
7248: PUSH
7249: LD_INT 3
7251: ARRAY
7252: IFFALSE 7268
// chase_range = flags [ 3 ] ;
7254: LD_ADDR_VAR 0 17
7258: PUSH
7259: LD_VAR 0 3
7263: PUSH
7264: LD_INT 3
7266: ARRAY
7267: ST_TO_ADDR
// end ; if not chase_range then
7268: LD_VAR 0 17
7272: NOT
7273: IFFALSE 7283
// chase_range = 8 ;
7275: LD_ADDR_VAR 0 17
7279: PUSH
7280: LD_INT 8
7282: ST_TO_ADDR
// if not spot_dist then
7283: LD_VAR 0 15
7287: NOT
7288: IFFALSE 7298
// spot_dist := 8 ;
7290: LD_ADDR_VAR 0 15
7294: PUSH
7295: LD_INT 8
7297: ST_TO_ADDR
// need_refuel = ( GetType ( unit ) = unit_vehicle and GetEngine ( unit ) <> engine_siberite ) ;
7298: LD_ADDR_VAR 0 18
7302: PUSH
7303: LD_VAR 0 1
7307: PPUSH
7308: CALL_OW 247
7312: PUSH
7313: LD_INT 2
7315: EQUAL
7316: IFFALSE 7333
7318: PUSH
7319: LD_VAR 0 1
7323: PPUSH
7324: CALL_OW 262
7328: PUSH
7329: LD_INT 3
7331: NONEQUAL
7332: AND
7333: ST_TO_ADDR
// status = 1 ;
7334: LD_ADDR_VAR 0 12
7338: PUSH
7339: LD_INT 1
7341: ST_TO_ADDR
// tmp_path = [ 1 , path [ 1 ] ] ;
7342: LD_ADDR_VAR 0 11
7346: PUSH
7347: LD_INT 1
7349: PUSH
7350: LD_VAR 0 2
7354: PUSH
7355: LD_INT 1
7357: ARRAY
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7363: LD_INT 35
7365: PPUSH
7366: CALL_OW 67
// if need_refuel and GetFuel ( unit ) < 20 then
7370: LD_VAR 0 18
7374: IFFALSE 7391
7376: PUSH
7377: LD_VAR 0 1
7381: PPUSH
7382: CALL_OW 261
7386: PUSH
7387: LD_INT 20
7389: LESS
7390: AND
7391: IFFALSE 7584
// begin station := FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_oil_mine ] , [ f_btype , b_factory ] ] ] ) ;
7393: LD_ADDR_VAR 0 10
7397: PUSH
7398: LD_INT 22
7400: PUSH
7401: LD_VAR 0 1
7405: PPUSH
7406: CALL_OW 255
7410: PUSH
7411: EMPTY
7412: LIST
7413: LIST
7414: PUSH
7415: LD_INT 2
7417: PUSH
7418: LD_INT 30
7420: PUSH
7421: LD_INT 0
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: PUSH
7428: LD_INT 30
7430: PUSH
7431: LD_INT 1
7433: PUSH
7434: EMPTY
7435: LIST
7436: LIST
7437: PUSH
7438: LD_INT 30
7440: PUSH
7441: LD_INT 29
7443: PUSH
7444: EMPTY
7445: LIST
7446: LIST
7447: PUSH
7448: LD_INT 30
7450: PUSH
7451: LD_INT 3
7453: PUSH
7454: EMPTY
7455: LIST
7456: LIST
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: LIST
7462: LIST
7463: LIST
7464: PUSH
7465: EMPTY
7466: LIST
7467: LIST
7468: PPUSH
7469: CALL_OW 69
7473: ST_TO_ADDR
// if not station then
7474: LD_VAR 0 10
7478: NOT
7479: IFFALSE 7495
// begin SetFuel ( unit , 40 ) ;
7481: LD_VAR 0 1
7485: PPUSH
7486: LD_INT 40
7488: PPUSH
7489: CALL_OW 240
// continue ;
7493: GO 7363
// end ; status := 6 ;
7495: LD_ADDR_VAR 0 12
7499: PUSH
7500: LD_INT 6
7502: ST_TO_ADDR
// station := NearestUnitToUnit ( station , unit ) ;
7503: LD_ADDR_VAR 0 10
7507: PUSH
7508: LD_VAR 0 10
7512: PPUSH
7513: LD_VAR 0 1
7517: PPUSH
7518: CALL_OW 74
7522: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7523: LD_INT 35
7525: PPUSH
7526: CALL_OW 67
// ComMoveUnit ( unit , station ) ;
7530: LD_VAR 0 1
7534: PPUSH
7535: LD_VAR 0 10
7539: PPUSH
7540: CALL_OW 112
// until GetDistUnits ( unit , station ) < 6 ;
7544: LD_VAR 0 1
7548: PPUSH
7549: LD_VAR 0 10
7553: PPUSH
7554: CALL_OW 296
7558: PUSH
7559: LD_INT 6
7561: LESS
7562: IFFALSE 7523
// SetFuel ( unit , 100 ) ;
7564: LD_VAR 0 1
7568: PPUSH
7569: LD_INT 100
7571: PPUSH
7572: CALL_OW 240
// status := 5 ;
7576: LD_ADDR_VAR 0 12
7580: PUSH
7581: LD_INT 5
7583: ST_TO_ADDR
// end ; if status = 1 then
7584: LD_VAR 0 12
7588: PUSH
7589: LD_INT 1
7591: EQUAL
7592: IFFALSE 7970
// begin enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] , [ f_dist , unit , spot_dist ] , [ f_see , 1 ] ] ) ;
7594: LD_ADDR_VAR 0 13
7598: PUSH
7599: LD_INT 81
7601: PUSH
7602: LD_VAR 0 1
7606: PPUSH
7607: CALL_OW 255
7611: PUSH
7612: EMPTY
7613: LIST
7614: LIST
7615: PUSH
7616: LD_INT 3
7618: PUSH
7619: LD_INT 21
7621: PUSH
7622: LD_INT 3
7624: PUSH
7625: EMPTY
7626: LIST
7627: LIST
7628: PUSH
7629: EMPTY
7630: LIST
7631: LIST
7632: PUSH
7633: LD_INT 91
7635: PUSH
7636: LD_VAR 0 1
7640: PUSH
7641: LD_VAR 0 15
7645: PUSH
7646: EMPTY
7647: LIST
7648: LIST
7649: LIST
7650: PUSH
7651: LD_INT 101
7653: PUSH
7654: LD_INT 1
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: PUSH
7661: EMPTY
7662: LIST
7663: LIST
7664: LIST
7665: LIST
7666: PPUSH
7667: CALL_OW 69
7671: ST_TO_ADDR
// for i in enemy do
7672: LD_ADDR_VAR 0 5
7676: PUSH
7677: LD_VAR 0 13
7681: PUSH
7682: FOR_IN
7683: IFFALSE 7714
// if IsInvisible ( i ) then
7685: LD_VAR 0 5
7689: PPUSH
7690: CALL_OW 571
7694: IFFALSE 7712
// enemy := enemy diff i ;
7696: LD_ADDR_VAR 0 13
7700: PUSH
7701: LD_VAR 0 13
7705: PUSH
7706: LD_VAR 0 5
7710: DIFF
7711: ST_TO_ADDR
7712: GO 7682
7714: POP
7715: POP
// if enemy then
7716: LD_VAR 0 13
7720: IFFALSE 7770
// begin SetRememberedX ( unit , GetX ( unit ) ) ;
7722: LD_VAR 0 1
7726: PPUSH
7727: LD_VAR 0 1
7731: PPUSH
7732: CALL_OW 250
7736: PPUSH
7737: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
7741: LD_VAR 0 1
7745: PPUSH
7746: LD_VAR 0 1
7750: PPUSH
7751: CALL_OW 251
7755: PPUSH
7756: CALL_OW 232
// status = 2 ;
7760: LD_ADDR_VAR 0 12
7764: PUSH
7765: LD_INT 2
7767: ST_TO_ADDR
// end else
7768: GO 7970
// begin if IsAt ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) or not HasTask ( unit ) then
7770: LD_VAR 0 1
7774: PPUSH
7775: LD_VAR 0 11
7779: PUSH
7780: LD_INT 2
7782: ARRAY
7783: PUSH
7784: LD_INT 1
7786: ARRAY
7787: PPUSH
7788: LD_VAR 0 11
7792: PUSH
7793: LD_INT 2
7795: ARRAY
7796: PUSH
7797: LD_INT 2
7799: ARRAY
7800: PPUSH
7801: CALL_OW 307
7805: IFTRUE 7819
7807: PUSH
7808: LD_VAR 0 1
7812: PPUSH
7813: CALL_OW 314
7817: NOT
7818: OR
7819: IFFALSE 7970
// begin wait ( 0 0$2 ) ;
7821: LD_INT 70
7823: PPUSH
7824: CALL_OW 67
// if tmp_path [ 1 ] + 1 > path then
7828: LD_VAR 0 11
7832: PUSH
7833: LD_INT 1
7835: ARRAY
7836: PUSH
7837: LD_INT 1
7839: PLUS
7840: PUSH
7841: LD_VAR 0 2
7845: GREATER
7846: IFFALSE 7871
// tmp_path := Replace ( tmp_path , 1 , 1 ) else
7848: LD_ADDR_VAR 0 11
7852: PUSH
7853: LD_VAR 0 11
7857: PPUSH
7858: LD_INT 1
7860: PPUSH
7861: LD_INT 1
7863: PPUSH
7864: CALL_OW 1
7868: ST_TO_ADDR
7869: GO 7902
// tmp_path := Replace ( tmp_path , 1 , tmp_path [ 1 ] + 1 ) ;
7871: LD_ADDR_VAR 0 11
7875: PUSH
7876: LD_VAR 0 11
7880: PPUSH
7881: LD_INT 1
7883: PPUSH
7884: LD_VAR 0 11
7888: PUSH
7889: LD_INT 1
7891: ARRAY
7892: PUSH
7893: LD_INT 1
7895: PLUS
7896: PPUSH
7897: CALL_OW 1
7901: ST_TO_ADDR
// tmp_path := Replace ( tmp_path , 2 , path [ tmp_path [ 1 ] ] ) ;
7902: LD_ADDR_VAR 0 11
7906: PUSH
7907: LD_VAR 0 11
7911: PPUSH
7912: LD_INT 2
7914: PPUSH
7915: LD_VAR 0 2
7919: PUSH
7920: LD_VAR 0 11
7924: PUSH
7925: LD_INT 1
7927: ARRAY
7928: ARRAY
7929: PPUSH
7930: CALL_OW 1
7934: ST_TO_ADDR
// ComAgressiveMove ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) ;
7935: LD_VAR 0 1
7939: PPUSH
7940: LD_VAR 0 11
7944: PUSH
7945: LD_INT 2
7947: ARRAY
7948: PUSH
7949: LD_INT 1
7951: ARRAY
7952: PPUSH
7953: LD_VAR 0 11
7957: PUSH
7958: LD_INT 2
7960: ARRAY
7961: PUSH
7962: LD_INT 2
7964: ARRAY
7965: PPUSH
7966: CALL_OW 114
// end ; end ; end ; if status = 2 then
7970: LD_VAR 0 12
7974: PUSH
7975: LD_INT 2
7977: EQUAL
7978: IFFALSE 8201
// begin if GetLives ( unit ) < 650 and safe_place then
7980: LD_VAR 0 1
7984: PPUSH
7985: CALL_OW 256
7989: PUSH
7990: LD_INT 650
7992: LESS
7993: IFFALSE 8001
7995: PUSH
7996: LD_VAR 0 16
8000: AND
8001: IFFALSE 8013
// begin status = 3 ;
8003: LD_ADDR_VAR 0 12
8007: PUSH
8008: LD_INT 3
8010: ST_TO_ADDR
// continue ;
8011: GO 7363
// end ; x := GetRememberedX ( unit ) ;
8013: LD_ADDR_VAR 0 6
8017: PUSH
8018: LD_VAR 0 1
8022: PPUSH
8023: CALL_OW 252
8027: ST_TO_ADDR
// y := GetRememberedY ( unit ) ;
8028: LD_ADDR_VAR 0 7
8032: PUSH
8033: LD_VAR 0 1
8037: PPUSH
8038: CALL_OW 253
8042: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_distxy , x , y , spot_dist ] , [ f_see , 1 ] ] ) ;
8043: LD_ADDR_VAR 0 13
8047: PUSH
8048: LD_INT 81
8050: PUSH
8051: LD_VAR 0 1
8055: PPUSH
8056: CALL_OW 255
8060: PUSH
8061: EMPTY
8062: LIST
8063: LIST
8064: PUSH
8065: LD_INT 92
8067: PUSH
8068: LD_VAR 0 6
8072: PUSH
8073: LD_VAR 0 7
8077: PUSH
8078: LD_VAR 0 15
8082: PUSH
8083: EMPTY
8084: LIST
8085: LIST
8086: LIST
8087: LIST
8088: PUSH
8089: LD_INT 101
8091: PUSH
8092: LD_INT 1
8094: PUSH
8095: EMPTY
8096: LIST
8097: LIST
8098: PUSH
8099: EMPTY
8100: LIST
8101: LIST
8102: LIST
8103: PPUSH
8104: CALL_OW 69
8108: ST_TO_ADDR
// if enemy then
8109: LD_VAR 0 13
8113: IFFALSE 8184
// begin e := NearestUnitToUnit ( enemy , unit ) ;
8115: LD_ADDR_VAR 0 14
8119: PUSH
8120: LD_VAR 0 13
8124: PPUSH
8125: LD_VAR 0 1
8129: PPUSH
8130: CALL_OW 74
8134: ST_TO_ADDR
// if GetDistUnitXY ( e , x , y ) < spot_dist + chase_range then
8135: LD_VAR 0 14
8139: PPUSH
8140: LD_VAR 0 6
8144: PPUSH
8145: LD_VAR 0 7
8149: PPUSH
8150: CALL_OW 297
8154: PUSH
8155: LD_VAR 0 15
8159: PUSH
8160: LD_VAR 0 17
8164: PLUS
8165: LESS
8166: IFFALSE 8182
// ComAttackUnit ( unit , e ) ;
8168: LD_VAR 0 1
8172: PPUSH
8173: LD_VAR 0 14
8177: PPUSH
8178: CALL_OW 115
// end else
8182: GO 8201
// begin ComStop ( unit ) ;
8184: LD_VAR 0 1
8188: PPUSH
8189: CALL_OW 141
// status = 5 ;
8193: LD_ADDR_VAR 0 12
8197: PUSH
8198: LD_INT 5
8200: ST_TO_ADDR
// end ; end ; if status = 3 and safe_place then
8201: LD_VAR 0 12
8205: PUSH
8206: LD_INT 3
8208: EQUAL
8209: IFFALSE 8217
8211: PUSH
8212: LD_VAR 0 16
8216: AND
8217: IFFALSE 8303
// begin repeat ComMoveXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) ;
8219: LD_VAR 0 1
8223: PPUSH
8224: LD_VAR 0 16
8228: PUSH
8229: LD_INT 1
8231: ARRAY
8232: PPUSH
8233: LD_VAR 0 16
8237: PUSH
8238: LD_INT 2
8240: ARRAY
8241: PPUSH
8242: CALL_OW 111
// wait ( 0 0$1 ) ;
8246: LD_INT 35
8248: PPUSH
8249: CALL_OW 67
// until GetDistUnitXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) < 4 ;
8253: LD_VAR 0 1
8257: PPUSH
8258: LD_VAR 0 16
8262: PUSH
8263: LD_INT 1
8265: ARRAY
8266: PPUSH
8267: LD_VAR 0 16
8271: PUSH
8272: LD_INT 2
8274: ARRAY
8275: PPUSH
8276: CALL_OW 297
8280: PUSH
8281: LD_INT 4
8283: LESS
8284: IFFALSE 8219
// ComStop ( unit ) ;
8286: LD_VAR 0 1
8290: PPUSH
8291: CALL_OW 141
// status = 4 ;
8295: LD_ADDR_VAR 0 12
8299: PUSH
8300: LD_INT 4
8302: ST_TO_ADDR
// end ; if status = 4 then
8303: LD_VAR 0 12
8307: PUSH
8308: LD_INT 4
8310: EQUAL
8311: IFFALSE 8343
// begin repeat wait ( 0 0$1 ) ;
8313: LD_INT 35
8315: PPUSH
8316: CALL_OW 67
// until GetLives ( unit ) = 1000 ;
8320: LD_VAR 0 1
8324: PPUSH
8325: CALL_OW 256
8329: PUSH
8330: LD_INT 1000
8332: EQUAL
8333: IFFALSE 8313
// status = 5 ;
8335: LD_ADDR_VAR 0 12
8339: PUSH
8340: LD_INT 5
8342: ST_TO_ADDR
// end ; if status = 5 then
8343: LD_VAR 0 12
8347: PUSH
8348: LD_INT 5
8350: EQUAL
8351: IFFALSE 8633
// begin p := 999 ;
8353: LD_ADDR_VAR 0 9
8357: PUSH
8358: LD_INT 999
8360: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ] ;
8361: LD_ADDR_VAR 0 14
8365: PUSH
8366: LD_VAR 0 11
8370: PUSH
8371: LD_INT 2
8373: ARRAY
8374: PUSH
8375: LD_INT 1
8377: ARRAY
8378: PUSH
8379: LD_VAR 0 11
8383: PUSH
8384: LD_INT 2
8386: ARRAY
8387: PUSH
8388: LD_INT 2
8390: ARRAY
8391: PUSH
8392: EMPTY
8393: LIST
8394: LIST
8395: ST_TO_ADDR
// c := 1 ;
8396: LD_ADDR_VAR 0 8
8400: PUSH
8401: LD_INT 1
8403: ST_TO_ADDR
// for i = 1 to tmp_path [ 2 ] div 2 do
8404: LD_ADDR_VAR 0 5
8408: PUSH
8409: DOUBLE
8410: LD_INT 1
8412: DEC
8413: ST_TO_ADDR
8414: LD_VAR 0 11
8418: PUSH
8419: LD_INT 2
8421: ARRAY
8422: PUSH
8423: LD_INT 2
8425: DIV
8426: PUSH
8427: FOR_TO
8428: IFFALSE 8560
// begin x := GetDistUnitXY ( unit , tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ) ;
8430: LD_ADDR_VAR 0 6
8434: PUSH
8435: LD_VAR 0 1
8439: PPUSH
8440: LD_VAR 0 11
8444: PUSH
8445: LD_INT 2
8447: ARRAY
8448: PUSH
8449: LD_VAR 0 8
8453: ARRAY
8454: PPUSH
8455: LD_VAR 0 11
8459: PUSH
8460: LD_INT 2
8462: ARRAY
8463: PUSH
8464: LD_VAR 0 8
8468: PUSH
8469: LD_INT 1
8471: PLUS
8472: ARRAY
8473: PPUSH
8474: CALL_OW 297
8478: ST_TO_ADDR
// if x < p then
8479: LD_VAR 0 6
8483: PUSH
8484: LD_VAR 0 9
8488: LESS
8489: IFFALSE 8544
// begin p := x ;
8491: LD_ADDR_VAR 0 9
8495: PUSH
8496: LD_VAR 0 6
8500: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ] ;
8501: LD_ADDR_VAR 0 14
8505: PUSH
8506: LD_VAR 0 11
8510: PUSH
8511: LD_INT 2
8513: ARRAY
8514: PUSH
8515: LD_VAR 0 8
8519: ARRAY
8520: PUSH
8521: LD_VAR 0 11
8525: PUSH
8526: LD_INT 2
8528: ARRAY
8529: PUSH
8530: LD_VAR 0 8
8534: PUSH
8535: LD_INT 1
8537: PLUS
8538: ARRAY
8539: PUSH
8540: EMPTY
8541: LIST
8542: LIST
8543: ST_TO_ADDR
// end ; c = c + 2 ;
8544: LD_ADDR_VAR 0 8
8548: PUSH
8549: LD_VAR 0 8
8553: PUSH
8554: LD_INT 2
8556: PLUS
8557: ST_TO_ADDR
// end ;
8558: GO 8427
8560: POP
8561: POP
// repeat ComMoveXY ( unit , e [ 1 ] , e [ 2 ] ) ;
8562: LD_VAR 0 1
8566: PPUSH
8567: LD_VAR 0 14
8571: PUSH
8572: LD_INT 1
8574: ARRAY
8575: PPUSH
8576: LD_VAR 0 14
8580: PUSH
8581: LD_INT 2
8583: ARRAY
8584: PPUSH
8585: CALL_OW 111
// wait ( 0 0$1 ) ;
8589: LD_INT 35
8591: PPUSH
8592: CALL_OW 67
// until IsAt ( unit , e [ 1 ] , e [ 2 ] ) ;
8596: LD_VAR 0 1
8600: PPUSH
8601: LD_VAR 0 14
8605: PUSH
8606: LD_INT 1
8608: ARRAY
8609: PPUSH
8610: LD_VAR 0 14
8614: PUSH
8615: LD_INT 2
8617: ARRAY
8618: PPUSH
8619: CALL_OW 307
8623: IFFALSE 8562
// status = 1 ;
8625: LD_ADDR_VAR 0 12
8629: PUSH
8630: LD_INT 1
8632: ST_TO_ADDR
// end ; until IsDead ( unit ) ;
8633: LD_VAR 0 1
8637: PPUSH
8638: CALL_OW 301
8642: IFFALSE 7363
// end ;
8644: LD_VAR 0 4
8648: RET
// export function Talk ( units , type , sequence , sex , class , id , order_id ) ; var i , unit , tmp , unit_id , dialog_id , sex_id , class_id ; begin
8649: LD_INT 0
8651: PPUSH
8652: PPUSH
8653: PPUSH
8654: PPUSH
8655: PPUSH
8656: PPUSH
8657: PPUSH
8658: PPUSH
// if not units or not sequence or not sex in [ sex_male , sex_female , 0 ] or not id or not order_id then
8659: LD_VAR 0 1
8663: NOT
8664: IFTRUE 8673
8666: PUSH
8667: LD_VAR 0 3
8671: NOT
8672: OR
8673: IFTRUE 8697
8675: PUSH
8676: LD_VAR 0 4
8680: PUSH
8681: LD_INT 1
8683: PUSH
8684: LD_INT 2
8686: PUSH
8687: LD_INT 0
8689: PUSH
8690: EMPTY
8691: LIST
8692: LIST
8693: LIST
8694: IN
8695: NOT
8696: OR
8697: IFTRUE 8706
8699: PUSH
8700: LD_VAR 0 6
8704: NOT
8705: OR
8706: IFTRUE 8715
8708: PUSH
8709: LD_VAR 0 7
8713: NOT
8714: OR
8715: IFFALSE 8719
// exit ;
8717: GO 9110
// sex_id :=  ;
8719: LD_ADDR_VAR 0 14
8723: PUSH
8724: LD_STRING 
8726: ST_TO_ADDR
// case class of 1 :
8727: LD_VAR 0 5
8731: PUSH
8732: LD_INT 1
8734: DOUBLE
8735: EQUAL
8736: IFTRUE 8740
8738: GO 8751
8740: POP
// class_id := Sol ; 2 :
8741: LD_ADDR_VAR 0 15
8745: PUSH
8746: LD_STRING Sol
8748: ST_TO_ADDR
8749: GO 8809
8751: LD_INT 2
8753: DOUBLE
8754: EQUAL
8755: IFTRUE 8759
8757: GO 8770
8759: POP
// class_id := Eng ; 3 :
8760: LD_ADDR_VAR 0 15
8764: PUSH
8765: LD_STRING Eng
8767: ST_TO_ADDR
8768: GO 8809
8770: LD_INT 3
8772: DOUBLE
8773: EQUAL
8774: IFTRUE 8778
8776: GO 8789
8778: POP
// class_id := Mech ; 4 :
8779: LD_ADDR_VAR 0 15
8783: PUSH
8784: LD_STRING Mech
8786: ST_TO_ADDR
8787: GO 8809
8789: LD_INT 4
8791: DOUBLE
8792: EQUAL
8793: IFTRUE 8797
8795: GO 8808
8797: POP
// class_id := Sci ; end ;
8798: LD_ADDR_VAR 0 15
8802: PUSH
8803: LD_STRING Sci
8805: ST_TO_ADDR
8806: GO 8809
8808: POP
// tmp := UnitFilter ( units , [ f_class , class ] ) ;
8809: LD_ADDR_VAR 0 11
8813: PUSH
8814: LD_VAR 0 1
8818: PPUSH
8819: LD_INT 25
8821: PUSH
8822: LD_VAR 0 5
8826: PUSH
8827: EMPTY
8828: LIST
8829: LIST
8830: PPUSH
8831: CALL_OW 72
8835: ST_TO_ADDR
// if tmp then
8836: LD_VAR 0 11
8840: IFFALSE 8852
// units := tmp ;
8842: LD_ADDR_VAR 0 1
8846: PUSH
8847: LD_VAR 0 11
8851: ST_TO_ADDR
// if sex then
8852: LD_VAR 0 4
8856: IFFALSE 8912
// begin if sex = sex_female then
8858: LD_VAR 0 4
8862: PUSH
8863: LD_INT 2
8865: EQUAL
8866: IFFALSE 8876
// sex_id := F ;
8868: LD_ADDR_VAR 0 14
8872: PUSH
8873: LD_STRING F
8875: ST_TO_ADDR
// units := UnitFilter ( units , [ f_sex , sex ] ) ;
8876: LD_ADDR_VAR 0 1
8880: PUSH
8881: LD_VAR 0 1
8885: PPUSH
8886: LD_INT 26
8888: PUSH
8889: LD_VAR 0 4
8893: PUSH
8894: EMPTY
8895: LIST
8896: LIST
8897: PPUSH
8898: CALL_OW 72
8902: ST_TO_ADDR
// if not units then
8903: LD_VAR 0 1
8907: NOT
8908: IFFALSE 8912
// exit ;
8910: GO 9110
// end ; unit_id := id ;
8912: LD_ADDR_VAR 0 12
8916: PUSH
8917: LD_VAR 0 6
8921: ST_TO_ADDR
// if unit_id > units then
8922: LD_VAR 0 12
8926: PUSH
8927: LD_VAR 0 1
8931: GREATER
8932: IFFALSE 8942
// unit_id := 1 ;
8934: LD_ADDR_VAR 0 12
8938: PUSH
8939: LD_INT 1
8941: ST_TO_ADDR
// if not units [ unit_id ] then
8942: LD_VAR 0 1
8946: PUSH
8947: LD_VAR 0 12
8951: ARRAY
8952: NOT
8953: IFFALSE 8957
// exit ;
8955: GO 9110
// unit := units [ unit_id ] ;
8957: LD_ADDR_VAR 0 10
8961: PUSH
8962: LD_VAR 0 1
8966: PUSH
8967: LD_VAR 0 12
8971: ARRAY
8972: ST_TO_ADDR
// dialog_id := D & sequence & - & sex_id & class_id & id & - & order_id ;
8973: LD_ADDR_VAR 0 13
8977: PUSH
8978: LD_STRING D
8980: PUSH
8981: LD_VAR 0 3
8985: STR
8986: PUSH
8987: LD_STRING -
8989: STR
8990: PUSH
8991: LD_VAR 0 14
8995: STR
8996: PUSH
8997: LD_VAR 0 15
9001: STR
9002: PUSH
9003: LD_VAR 0 6
9007: STR
9008: PUSH
9009: LD_STRING -
9011: STR
9012: PUSH
9013: LD_VAR 0 7
9017: STR
9018: ST_TO_ADDR
// case type of 0 :
9019: LD_VAR 0 2
9023: PUSH
9024: LD_INT 0
9026: DOUBLE
9027: EQUAL
9028: IFTRUE 9032
9030: GO 9049
9032: POP
// Say ( unit , dialog_id ) ; 1 :
9033: LD_VAR 0 10
9037: PPUSH
9038: LD_VAR 0 13
9042: PPUSH
9043: CALL_OW 88
9047: GO 9100
9049: LD_INT 1
9051: DOUBLE
9052: EQUAL
9053: IFTRUE 9057
9055: GO 9074
9057: POP
// SayRadio ( unit , dialog_id ) ; 2 :
9058: LD_VAR 0 10
9062: PPUSH
9063: LD_VAR 0 13
9067: PPUSH
9068: CALL_OW 94
9072: GO 9100
9074: LD_INT 2
9076: DOUBLE
9077: EQUAL
9078: IFTRUE 9082
9080: GO 9099
9082: POP
// ForceSay ( unit , dialog_id ) ; end ;
9083: LD_VAR 0 10
9087: PPUSH
9088: LD_VAR 0 13
9092: PPUSH
9093: CALL_OW 91
9097: GO 9100
9099: POP
// result := unit ;
9100: LD_ADDR_VAR 0 8
9104: PUSH
9105: LD_VAR 0 10
9109: ST_TO_ADDR
// end ;
9110: LD_VAR 0 8
9114: RET
// export function IsNearbyEntrance ( unit , building , distance ) ; var i , entrance ; begin
9115: LD_INT 0
9117: PPUSH
9118: PPUSH
9119: PPUSH
// result := false ;
9120: LD_ADDR_VAR 0 4
9124: PUSH
9125: LD_INT 0
9127: ST_TO_ADDR
// if not unit or not building or IsInUnit ( unit ) then
9128: LD_VAR 0 1
9132: NOT
9133: IFTRUE 9142
9135: PUSH
9136: LD_VAR 0 2
9140: NOT
9141: OR
9142: IFTRUE 9155
9144: PUSH
9145: LD_VAR 0 1
9149: PPUSH
9150: CALL_OW 310
9154: OR
9155: IFFALSE 9159
// exit ;
9157: GO 9363
// if distance < 0 then
9159: LD_VAR 0 3
9163: PUSH
9164: LD_INT 0
9166: LESS
9167: IFFALSE 9177
// distance := 0 ;
9169: LD_ADDR_VAR 0 3
9173: PUSH
9174: LD_INT 0
9176: ST_TO_ADDR
// entrance := GetBuildingHexes ( GetBType ( building ) , GetX ( building ) , GetY ( building ) , GetDir ( building ) , GetNation ( building ) , 1 ) ;
9177: LD_ADDR_VAR 0 6
9181: PUSH
9182: LD_VAR 0 2
9186: PPUSH
9187: CALL_OW 266
9191: PPUSH
9192: LD_VAR 0 2
9196: PPUSH
9197: CALL_OW 250
9201: PPUSH
9202: LD_VAR 0 2
9206: PPUSH
9207: CALL_OW 251
9211: PPUSH
9212: LD_VAR 0 2
9216: PPUSH
9217: CALL_OW 254
9221: PPUSH
9222: LD_VAR 0 2
9226: PPUSH
9227: CALL_OW 248
9231: PPUSH
9232: LD_INT 1
9234: PPUSH
9235: CALL 52634 0 6
9239: ST_TO_ADDR
// if not entrance then
9240: LD_VAR 0 6
9244: NOT
9245: IFFALSE 9249
// exit ;
9247: GO 9363
// for i in entrance do
9249: LD_ADDR_VAR 0 5
9253: PUSH
9254: LD_VAR 0 6
9258: PUSH
9259: FOR_IN
9260: IFFALSE 9361
// begin if not distance then
9262: LD_VAR 0 3
9266: NOT
9267: IFFALSE 9312
// begin if IsAt ( unit , i [ 1 ] , i [ 2 ] ) then
9269: LD_VAR 0 1
9273: PPUSH
9274: LD_VAR 0 5
9278: PUSH
9279: LD_INT 1
9281: ARRAY
9282: PPUSH
9283: LD_VAR 0 5
9287: PUSH
9288: LD_INT 2
9290: ARRAY
9291: PPUSH
9292: CALL_OW 307
9296: IFFALSE 9310
// begin result := true ;
9298: LD_ADDR_VAR 0 4
9302: PUSH
9303: LD_INT 1
9305: ST_TO_ADDR
// exit ;
9306: POP
9307: POP
9308: GO 9363
// end ; end else
9310: GO 9359
// begin if GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) <= distance then
9312: LD_VAR 0 1
9316: PPUSH
9317: LD_VAR 0 5
9321: PUSH
9322: LD_INT 1
9324: ARRAY
9325: PPUSH
9326: LD_VAR 0 5
9330: PUSH
9331: LD_INT 2
9333: ARRAY
9334: PPUSH
9335: CALL_OW 297
9339: PUSH
9340: LD_VAR 0 3
9344: LESSEQUAL
9345: IFFALSE 9359
// begin result := true ;
9347: LD_ADDR_VAR 0 4
9351: PUSH
9352: LD_INT 1
9354: ST_TO_ADDR
// exit ;
9355: POP
9356: POP
9357: GO 9363
// end ; end ; end ;
9359: GO 9259
9361: POP
9362: POP
// end ;
9363: LD_VAR 0 4
9367: RET
// export function CanSpot ( unit , unit2 ) ; var i , building ; begin
9368: LD_INT 0
9370: PPUSH
9371: PPUSH
9372: PPUSH
// result := false ;
9373: LD_ADDR_VAR 0 3
9377: PUSH
9378: LD_INT 0
9380: ST_TO_ADDR
// if not unit or not unit2 or not IsOk ( unit ) or not IsOk ( unit2 ) then
9381: LD_VAR 0 1
9385: NOT
9386: IFTRUE 9395
9388: PUSH
9389: LD_VAR 0 2
9393: NOT
9394: OR
9395: IFTRUE 9409
9397: PUSH
9398: LD_VAR 0 1
9402: PPUSH
9403: CALL_OW 302
9407: NOT
9408: OR
9409: IFTRUE 9423
9411: PUSH
9412: LD_VAR 0 2
9416: PPUSH
9417: CALL_OW 302
9421: NOT
9422: OR
9423: IFFALSE 9427
// exit ;
9425: GO 9590
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] ] ) , unit ) ) < 8 then
9427: LD_VAR 0 1
9431: PPUSH
9432: LD_INT 81
9434: PUSH
9435: LD_VAR 0 1
9439: PPUSH
9440: CALL_OW 255
9444: PUSH
9445: EMPTY
9446: LIST
9447: LIST
9448: PUSH
9449: LD_INT 3
9451: PUSH
9452: LD_INT 21
9454: PUSH
9455: LD_INT 3
9457: PUSH
9458: EMPTY
9459: LIST
9460: LIST
9461: PUSH
9462: EMPTY
9463: LIST
9464: LIST
9465: PUSH
9466: EMPTY
9467: LIST
9468: LIST
9469: PPUSH
9470: CALL_OW 69
9474: PPUSH
9475: LD_VAR 0 1
9479: PPUSH
9480: CALL_OW 74
9484: PPUSH
9485: CALL_OW 296
9489: PUSH
9490: LD_INT 8
9492: LESS
9493: IFFALSE 9497
// exit ;
9495: GO 9590
// building := IsInUnit ( unit2 ) ;
9497: LD_ADDR_VAR 0 5
9501: PUSH
9502: LD_VAR 0 2
9506: PPUSH
9507: CALL_OW 310
9511: ST_TO_ADDR
// if building then
9512: LD_VAR 0 5
9516: IFFALSE 9543
// result := IsNearbyEntrance ( unit , building , 2 ) else
9518: LD_ADDR_VAR 0 3
9522: PUSH
9523: LD_VAR 0 1
9527: PPUSH
9528: LD_VAR 0 5
9532: PPUSH
9533: LD_INT 2
9535: PPUSH
9536: CALL 9115 0 3
9540: ST_TO_ADDR
9541: GO 9590
// result := ( GetDistUnits ( unit , unit2 ) < 6 and See ( GetSide ( unit2 ) , unit ) ) ;
9543: LD_ADDR_VAR 0 3
9547: PUSH
9548: LD_VAR 0 1
9552: PPUSH
9553: LD_VAR 0 2
9557: PPUSH
9558: CALL_OW 296
9562: PUSH
9563: LD_INT 6
9565: LESS
9566: IFFALSE 9589
9568: PUSH
9569: LD_VAR 0 2
9573: PPUSH
9574: CALL_OW 255
9578: PPUSH
9579: LD_VAR 0 1
9583: PPUSH
9584: CALL_OW 292
9588: AND
9589: ST_TO_ADDR
// end ;
9590: LD_VAR 0 3
9594: RET
// export function CreateNature ; var i , animal , nat_area ; begin
9595: LD_INT 0
9597: PPUSH
9598: PPUSH
9599: PPUSH
9600: PPUSH
// uc_side = 0 ;
9601: LD_ADDR_OWVAR 20
9605: PUSH
9606: LD_INT 0
9608: ST_TO_ADDR
// uc_nation = 0 ;
9609: LD_ADDR_OWVAR 21
9613: PUSH
9614: LD_INT 0
9616: ST_TO_ADDR
// nat_area := nature_area ;
9617: LD_ADDR_VAR 0 4
9621: PUSH
9622: LD_INT 24
9624: ST_TO_ADDR
// InitHc ;
9625: CALL_OW 19
// for i = 1 to 4 do
9629: LD_ADDR_VAR 0 2
9633: PUSH
9634: DOUBLE
9635: LD_INT 1
9637: DEC
9638: ST_TO_ADDR
9639: LD_INT 4
9641: PUSH
9642: FOR_TO
9643: IFFALSE 9690
// begin hc_class = 18 ;
9645: LD_ADDR_OWVAR 28
9649: PUSH
9650: LD_INT 18
9652: ST_TO_ADDR
// hc_gallery =  ;
9653: LD_ADDR_OWVAR 33
9657: PUSH
9658: LD_STRING 
9660: ST_TO_ADDR
// animal := CreateHuman ;
9661: LD_ADDR_VAR 0 3
9665: PUSH
9666: CALL_OW 44
9670: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9671: LD_VAR 0 3
9675: PPUSH
9676: LD_VAR 0 4
9680: PPUSH
9681: LD_INT 0
9683: PPUSH
9684: CALL_OW 49
// end ;
9688: GO 9642
9690: POP
9691: POP
// for i = 1 to 3 do
9692: LD_ADDR_VAR 0 2
9696: PUSH
9697: DOUBLE
9698: LD_INT 1
9700: DEC
9701: ST_TO_ADDR
9702: LD_INT 3
9704: PUSH
9705: FOR_TO
9706: IFFALSE 9800
// begin hc_class = class_apeman ;
9708: LD_ADDR_OWVAR 28
9712: PUSH
9713: LD_INT 12
9715: ST_TO_ADDR
// hc_gallery =  ;
9716: LD_ADDR_OWVAR 33
9720: PUSH
9721: LD_STRING 
9723: ST_TO_ADDR
// hc_agressivity = 0 ;
9724: LD_ADDR_OWVAR 35
9728: PUSH
9729: LD_INT 0
9731: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
9732: LD_ADDR_OWVAR 31
9736: PUSH
9737: LD_INT 1
9739: PPUSH
9740: LD_INT 3
9742: PPUSH
9743: CALL_OW 12
9747: PUSH
9748: LD_INT 1
9750: PPUSH
9751: LD_INT 3
9753: PPUSH
9754: CALL_OW 12
9758: PUSH
9759: LD_INT 0
9761: PUSH
9762: LD_INT 0
9764: PUSH
9765: EMPTY
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: ST_TO_ADDR
// animal := CreateHuman ;
9771: LD_ADDR_VAR 0 3
9775: PUSH
9776: CALL_OW 44
9780: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9781: LD_VAR 0 3
9785: PPUSH
9786: LD_VAR 0 4
9790: PPUSH
9791: LD_INT 0
9793: PPUSH
9794: CALL_OW 49
// end ;
9798: GO 9705
9800: POP
9801: POP
// for i = 1 to 3 do
9802: LD_ADDR_VAR 0 2
9806: PUSH
9807: DOUBLE
9808: LD_INT 1
9810: DEC
9811: ST_TO_ADDR
9812: LD_INT 3
9814: PUSH
9815: FOR_TO
9816: IFFALSE 9863
// begin hc_class = 13 ;
9818: LD_ADDR_OWVAR 28
9822: PUSH
9823: LD_INT 13
9825: ST_TO_ADDR
// hc_gallery =  ;
9826: LD_ADDR_OWVAR 33
9830: PUSH
9831: LD_STRING 
9833: ST_TO_ADDR
// animal := CreateHuman ;
9834: LD_ADDR_VAR 0 3
9838: PUSH
9839: CALL_OW 44
9843: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9844: LD_VAR 0 3
9848: PPUSH
9849: LD_VAR 0 4
9853: PPUSH
9854: LD_INT 0
9856: PPUSH
9857: CALL_OW 49
// end ;
9861: GO 9815
9863: POP
9864: POP
// for i = 1 to 3 do
9865: LD_ADDR_VAR 0 2
9869: PUSH
9870: DOUBLE
9871: LD_INT 1
9873: DEC
9874: ST_TO_ADDR
9875: LD_INT 3
9877: PUSH
9878: FOR_TO
9879: IFFALSE 9924
// begin hc_class = 20 ;
9881: LD_ADDR_OWVAR 28
9885: PUSH
9886: LD_INT 20
9888: ST_TO_ADDR
// hc_gallery =  ;
9889: LD_ADDR_OWVAR 33
9893: PUSH
9894: LD_STRING 
9896: ST_TO_ADDR
// animal := CreateHuman ;
9897: LD_ADDR_VAR 0 3
9901: PUSH
9902: CALL_OW 44
9906: ST_TO_ADDR
// PlaceUnitArea ( animal , lake_area , false ) ;
9907: LD_VAR 0 3
9911: PPUSH
9912: LD_INT 4
9914: PPUSH
9915: LD_INT 0
9917: PPUSH
9918: CALL_OW 49
// end ;
9922: GO 9878
9924: POP
9925: POP
// end ; end_of_file
9926: LD_VAR 0 1
9930: RET
// export function Action ; begin
9931: LD_INT 0
9933: PPUSH
// InGameOn ;
9934: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
9938: LD_EXP 15
9942: PPUSH
9943: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
9947: LD_EXP 15
9951: PPUSH
9952: LD_STRING D1-JMM-1
9954: PPUSH
9955: CALL_OW 88
// Say ( Roth , D1-Roth-1 ) ;
9959: LD_EXP 16
9963: PPUSH
9964: LD_STRING D1-Roth-1
9966: PPUSH
9967: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
9971: LD_EXP 15
9975: PPUSH
9976: LD_STRING D1-JMM-2
9978: PPUSH
9979: CALL_OW 88
// Say ( Roth , D1-Roth-2 ) ;
9983: LD_EXP 16
9987: PPUSH
9988: LD_STRING D1-Roth-2
9990: PPUSH
9991: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9995: LD_EXP 15
9999: PPUSH
10000: LD_STRING D1-JMM-3
10002: PPUSH
10003: CALL_OW 88
// Say ( Roth , D1-Roth-3 ) ;
10007: LD_EXP 16
10011: PPUSH
10012: LD_STRING D1-Roth-3
10014: PPUSH
10015: CALL_OW 88
// ComInvisible ( Roth ) ;
10019: LD_EXP 16
10023: PPUSH
10024: CALL_OW 152
// wait ( 0 0$1.3 ) ;
10028: LD_INT 46
10030: PPUSH
10031: CALL_OW 67
// Say ( JMM , D1-JMM-4 ) ;
10035: LD_EXP 15
10039: PPUSH
10040: LD_STRING D1-JMM-4
10042: PPUSH
10043: CALL_OW 88
// wait ( 0 0$0.3 ) ;
10047: LD_INT 10
10049: PPUSH
10050: CALL_OW 67
// ComTurnUnit ( Roth , JMM ) ;
10054: LD_EXP 16
10058: PPUSH
10059: LD_EXP 15
10063: PPUSH
10064: CALL_OW 119
// Say ( JMM , D1-JMM-4a ) ;
10068: LD_EXP 15
10072: PPUSH
10073: LD_STRING D1-JMM-4a
10075: PPUSH
10076: CALL_OW 88
// Say ( Roth , D1-Roth-4 ) ;
10080: LD_EXP 16
10084: PPUSH
10085: LD_STRING D1-Roth-4
10087: PPUSH
10088: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
10092: LD_EXP 15
10096: PPUSH
10097: LD_STRING D1-JMM-5
10099: PPUSH
10100: CALL_OW 88
// Say ( Roth , D1-Roth-5 ) ;
10104: LD_EXP 16
10108: PPUSH
10109: LD_STRING D1-Roth-5
10111: PPUSH
10112: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
10116: LD_EXP 15
10120: PPUSH
10121: LD_STRING D1-JMM-6
10123: PPUSH
10124: CALL_OW 88
// Say ( Roth , D1-Roth-6 ) ;
10128: LD_EXP 16
10132: PPUSH
10133: LD_STRING D1-Roth-6
10135: PPUSH
10136: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
10140: LD_EXP 15
10144: PPUSH
10145: LD_STRING D1-JMM-7
10147: PPUSH
10148: CALL_OW 88
// ComMoveXY ( Powell , GetX ( JMM ) , GetY ( JMM ) ) ;
10152: LD_EXP 17
10156: PPUSH
10157: LD_EXP 15
10161: PPUSH
10162: CALL_OW 250
10166: PPUSH
10167: LD_EXP 15
10171: PPUSH
10172: CALL_OW 251
10176: PPUSH
10177: CALL_OW 111
// Say ( Roth , D1-Roth-7 ) ;
10181: LD_EXP 16
10185: PPUSH
10186: LD_STRING D1-Roth-7
10188: PPUSH
10189: CALL_OW 88
// repeat wait ( 0 0$0.3 ) ;
10193: LD_INT 10
10195: PPUSH
10196: CALL_OW 67
// until GetDistUnits ( Powell , JMM ) < 6 ;
10200: LD_EXP 17
10204: PPUSH
10205: LD_EXP 15
10209: PPUSH
10210: CALL_OW 296
10214: PUSH
10215: LD_INT 6
10217: LESS
10218: IFFALSE 10193
// ComTurnUnit ( Powell , JMM ) ;
10220: LD_EXP 17
10224: PPUSH
10225: LD_EXP 15
10229: PPUSH
10230: CALL_OW 119
// Say ( Powell , D1-Pow-7 ) ;
10234: LD_EXP 17
10238: PPUSH
10239: LD_STRING D1-Pow-7
10241: PPUSH
10242: CALL_OW 88
// ComTurnUnit ( JMM , Powell ) ;
10246: LD_EXP 15
10250: PPUSH
10251: LD_EXP 17
10255: PPUSH
10256: CALL_OW 119
// ComTurnUnit ( Roth , Powell ) ;
10260: LD_EXP 16
10264: PPUSH
10265: LD_EXP 17
10269: PPUSH
10270: CALL_OW 119
// Say ( JMM , D1-JMM-8 ) ;
10274: LD_EXP 15
10278: PPUSH
10279: LD_STRING D1-JMM-8
10281: PPUSH
10282: CALL_OW 88
// Say ( Powell , D1-Pow-8 ) ;
10286: LD_EXP 17
10290: PPUSH
10291: LD_STRING D1-Pow-8
10293: PPUSH
10294: CALL_OW 88
// Say ( JMM , D1-JMM-9 ) ;
10298: LD_EXP 15
10302: PPUSH
10303: LD_STRING D1-JMM-9
10305: PPUSH
10306: CALL_OW 88
// ComMoveXY ( Powell , 124 , 61 ) ;
10310: LD_EXP 17
10314: PPUSH
10315: LD_INT 124
10317: PPUSH
10318: LD_INT 61
10320: PPUSH
10321: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10325: LD_INT 35
10327: PPUSH
10328: CALL_OW 67
// until GetDistUnits ( JMM , Powell ) > 6 ;
10332: LD_EXP 15
10336: PPUSH
10337: LD_EXP 17
10341: PPUSH
10342: CALL_OW 296
10346: PUSH
10347: LD_INT 6
10349: GREATER
10350: IFFALSE 10325
// SayRadio ( Powell , D1-Pow-9 ) ;
10352: LD_EXP 17
10356: PPUSH
10357: LD_STRING D1-Pow-9
10359: PPUSH
10360: CALL_OW 94
// RemoveUnit ( Powell ) ;
10364: LD_EXP 17
10368: PPUSH
10369: CALL_OW 64
// PlaceHumanInUnit ( Powell , ambar0 ) ;
10373: LD_EXP 17
10377: PPUSH
10378: LD_INT 18
10380: PPUSH
10381: CALL_OW 52
// if Joan and not Joan in selected then
10385: LD_EXP 37
10389: IFFALSE 10404
10391: PUSH
10392: LD_EXP 37
10396: PUSH
10397: LD_EXP 3
10401: IN
10402: NOT
10403: AND
10404: IFFALSE 10418
// SayRadio ( Joan , D1-Joan-9 ) ;
10406: LD_EXP 37
10410: PPUSH
10411: LD_STRING D1-Joan-9
10413: PPUSH
10414: CALL_OW 94
// ComTurnUnit ( Roth , JMM ) ;
10418: LD_EXP 16
10422: PPUSH
10423: LD_EXP 15
10427: PPUSH
10428: CALL_OW 119
// ComTurnUnit ( JMM , Roth ) ;
10432: LD_EXP 15
10436: PPUSH
10437: LD_EXP 16
10441: PPUSH
10442: CALL_OW 119
// Say ( Roth , D1-Roth-9 ) ;
10446: LD_EXP 16
10450: PPUSH
10451: LD_STRING D1-Roth-9
10453: PPUSH
10454: CALL_OW 88
// Say ( JMM , D1-JMM-10 ) ;
10458: LD_EXP 15
10462: PPUSH
10463: LD_STRING D1-JMM-10
10465: PPUSH
10466: CALL_OW 88
// InGameOff ;
10470: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
10474: LD_STRING M1
10476: PPUSH
10477: CALL_OW 337
// if Difficulty < 3 then
10481: LD_OWVAR 67
10485: PUSH
10486: LD_INT 3
10488: LESS
10489: IFFALSE 10501
// ChangeSideFog ( 4 , 7 ) ;
10491: LD_INT 4
10493: PPUSH
10494: LD_INT 7
10496: PPUSH
10497: CALL_OW 343
// ToLua ( enableBioCharacter(BIO_ROTH) ) ;
10501: LD_STRING enableBioCharacter(BIO_ROTH)
10503: PPUSH
10504: CALL_OW 559
// SaveForQuickRestart ;
10508: CALL_OW 22
// SetAttitude ( 7 , 1 , att_enemy , true ) ;
10512: LD_INT 7
10514: PPUSH
10515: LD_INT 1
10517: PPUSH
10518: LD_INT 2
10520: PPUSH
10521: LD_INT 1
10523: PPUSH
10524: CALL_OW 80
// wait ( 0 0$3 ) ;
10528: LD_INT 105
10530: PPUSH
10531: CALL_OW 67
// ComMoveXY ( Roth , 124 , 18 ) ;
10535: LD_EXP 16
10539: PPUSH
10540: LD_INT 124
10542: PPUSH
10543: LD_INT 18
10545: PPUSH
10546: CALL_OW 111
// AddComInvisible ( Roth ) ;
10550: LD_EXP 16
10554: PPUSH
10555: CALL_OW 212
// wait ( 0 0$30 ) ;
10559: LD_INT 1050
10561: PPUSH
10562: CALL_OW 67
// AddComWait ( Roth , 1 1$00 ) ;
10566: LD_EXP 16
10570: PPUSH
10571: LD_INT 2100
10573: PPUSH
10574: CALL_OW 202
// AddComMoveXY ( Roth , 156 , 20 ) ;
10578: LD_EXP 16
10582: PPUSH
10583: LD_INT 156
10585: PPUSH
10586: LD_INT 20
10588: PPUSH
10589: CALL_OW 171
// AddComMoveXY ( Roth , 178 , 42 ) ;
10593: LD_EXP 16
10597: PPUSH
10598: LD_INT 178
10600: PPUSH
10601: LD_INT 42
10603: PPUSH
10604: CALL_OW 171
// AddComInvisible ( Roth ) ;
10608: LD_EXP 16
10612: PPUSH
10613: CALL_OW 212
// end ;
10617: LD_VAR 0 1
10621: RET
// every 0 0$1 do var i , tmp ;
10622: GO 10624
10624: DISABLE
10625: LD_INT 0
10627: PPUSH
10628: PPUSH
// begin tmp := selected union friends ;
10629: LD_ADDR_VAR 0 2
10633: PUSH
10634: LD_EXP 3
10638: PUSH
10639: LD_EXP 4
10643: UNION
10644: ST_TO_ADDR
// if gamma_commander = 1 then
10645: LD_EXP 10
10649: PUSH
10650: LD_INT 1
10652: EQUAL
10653: IFFALSE 10671
// tmp := tmp union Donaldson ;
10655: LD_ADDR_VAR 0 2
10659: PUSH
10660: LD_VAR 0 2
10664: PUSH
10665: LD_EXP 25
10669: UNION
10670: ST_TO_ADDR
// if gamma_commander = 2 then
10671: LD_EXP 10
10675: PUSH
10676: LD_INT 2
10678: EQUAL
10679: IFFALSE 10697
// tmp := tmp union Brown ;
10681: LD_ADDR_VAR 0 2
10685: PUSH
10686: LD_VAR 0 2
10690: PUSH
10691: LD_EXP 29
10695: UNION
10696: ST_TO_ADDR
// if not tmp then
10697: LD_VAR 0 2
10701: NOT
10702: IFFALSE 10706
// exit ;
10704: GO 10778
// repeat wait ( 0 0$1 ) ;
10706: LD_INT 35
10708: PPUSH
10709: CALL_OW 67
// for i in tmp do
10713: LD_ADDR_VAR 0 1
10717: PUSH
10718: LD_VAR 0 2
10722: PUSH
10723: FOR_IN
10724: IFFALSE 10769
// if CanSpot ( JMM , i ) then
10726: LD_EXP 15
10730: PPUSH
10731: LD_VAR 0 1
10735: PPUSH
10736: CALL 9368 0 2
10740: IFFALSE 10767
// begin tmp := tmp diff i ;
10742: LD_ADDR_VAR 0 2
10746: PUSH
10747: LD_VAR 0 2
10751: PUSH
10752: LD_VAR 0 1
10756: DIFF
10757: ST_TO_ADDR
// Spot ( i ) ;
10758: LD_VAR 0 1
10762: PPUSH
10763: CALL 10781 0 1
// end ;
10767: GO 10723
10769: POP
10770: POP
// until not tmp ;
10771: LD_VAR 0 2
10775: NOT
10776: IFFALSE 10706
// end ;
10778: PPOPN 2
10780: END
// export function Spot ( unit ) ; var building , side , joined ; begin
10781: LD_INT 0
10783: PPUSH
10784: PPUSH
10785: PPUSH
10786: PPUSH
// if not unit or GetSide ( unit ) <> 4 or IsSleeping ( unit ) or not IsOk ( unit ) then
10787: LD_VAR 0 1
10791: NOT
10792: IFTRUE 10809
10794: PUSH
10795: LD_VAR 0 1
10799: PPUSH
10800: CALL_OW 255
10804: PUSH
10805: LD_INT 4
10807: NONEQUAL
10808: OR
10809: IFTRUE 10822
10811: PUSH
10812: LD_VAR 0 1
10816: PPUSH
10817: CALL_OW 555
10821: OR
10822: IFTRUE 10836
10824: PUSH
10825: LD_VAR 0 1
10829: PPUSH
10830: CALL_OW 302
10834: NOT
10835: OR
10836: IFFALSE 10840
// exit ;
10838: GO 12754
// InGameOn ;
10840: CALL_OW 8
// side := 7 ;
10844: LD_ADDR_VAR 0 4
10848: PUSH
10849: LD_INT 7
10851: ST_TO_ADDR
// joined := false ;
10852: LD_ADDR_VAR 0 5
10856: PUSH
10857: LD_INT 0
10859: ST_TO_ADDR
// building := IsInUnit ( unit ) ;
10860: LD_ADDR_VAR 0 3
10864: PUSH
10865: LD_VAR 0 1
10869: PPUSH
10870: CALL_OW 310
10874: ST_TO_ADDR
// if building then
10875: LD_VAR 0 3
10879: IFFALSE 10938
// begin SetSide ( JMM , GetSide ( unit ) ) ;
10881: LD_EXP 15
10885: PPUSH
10886: LD_VAR 0 1
10890: PPUSH
10891: CALL_OW 255
10895: PPUSH
10896: CALL_OW 235
// ComEnterUnit ( JMM , building ) ;
10900: LD_EXP 15
10904: PPUSH
10905: LD_VAR 0 3
10909: PPUSH
10910: CALL_OW 120
// repeat wait ( 3 ) ;
10914: LD_INT 3
10916: PPUSH
10917: CALL_OW 67
// until IsInUnit ( JMM ) ;
10921: LD_EXP 15
10925: PPUSH
10926: CALL_OW 310
10930: IFFALSE 10914
// DialogueOn ;
10932: CALL_OW 6
// end else
10936: GO 10970
// begin ComTurnUnit ( JMM , unit ) ;
10938: LD_EXP 15
10942: PPUSH
10943: LD_VAR 0 1
10947: PPUSH
10948: CALL_OW 119
// ComTurnUnit ( unit , JMM ) ;
10952: LD_VAR 0 1
10956: PPUSH
10957: LD_EXP 15
10961: PPUSH
10962: CALL_OW 119
// DialogueOn ;
10966: CALL_OW 6
// end ; if unit = Joan then
10970: LD_VAR 0 1
10974: PUSH
10975: LD_EXP 37
10979: EQUAL
10980: IFFALSE 11090
// begin joined := true ;
10982: LD_ADDR_VAR 0 5
10986: PUSH
10987: LD_INT 1
10989: ST_TO_ADDR
// if Joan in selected then
10990: LD_EXP 37
10994: PUSH
10995: LD_EXP 3
10999: IN
11000: IFFALSE 11028
// begin Say ( Joan , D3-Joan-Joan-1 ) ;
11002: LD_EXP 37
11006: PPUSH
11007: LD_STRING D3-Joan-Joan-1
11009: PPUSH
11010: CALL_OW 88
// Say ( JMM , D3-Joan-JMM-1 ) ;
11014: LD_EXP 15
11018: PPUSH
11019: LD_STRING D3-Joan-JMM-1
11021: PPUSH
11022: CALL_OW 88
// end else
11026: GO 11088
// begin Say ( Joan , D4-Joan-Joan-1 ) ;
11028: LD_EXP 37
11032: PPUSH
11033: LD_STRING D4-Joan-Joan-1
11035: PPUSH
11036: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-1 ) ;
11040: LD_EXP 15
11044: PPUSH
11045: LD_STRING D4-Joan-JMM-1
11047: PPUSH
11048: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-2 ) ;
11052: LD_EXP 37
11056: PPUSH
11057: LD_STRING D4-Joan-Joan-2
11059: PPUSH
11060: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-2 ) ;
11064: LD_EXP 15
11068: PPUSH
11069: LD_STRING D4-Joan-JMM-2
11071: PPUSH
11072: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-3 ) ;
11076: LD_EXP 37
11080: PPUSH
11081: LD_STRING D4-Joan-Joan-3
11083: PPUSH
11084: CALL_OW 88
// end ; end else
11088: GO 12562
// if unit = Lisa then
11090: LD_VAR 0 1
11094: PUSH
11095: LD_EXP 24
11099: EQUAL
11100: IFFALSE 11292
// begin if Lisa in selected then
11102: LD_EXP 24
11106: PUSH
11107: LD_EXP 3
11111: IN
11112: IFFALSE 11225
// begin if GetSide ( Joan ) = 7 then
11114: LD_EXP 37
11118: PPUSH
11119: CALL_OW 255
11123: PUSH
11124: LD_INT 7
11126: EQUAL
11127: IFFALSE 11191
// begin Say ( Lisa , D3-LisaJ-Lisa-1 ) ;
11129: LD_EXP 24
11133: PPUSH
11134: LD_STRING D3-LisaJ-Lisa-1
11136: PPUSH
11137: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-1 ) ;
11141: LD_EXP 15
11145: PPUSH
11146: LD_STRING D3-LisaJ-JMM-1
11148: PPUSH
11149: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-2 ) ;
11153: LD_EXP 24
11157: PPUSH
11158: LD_STRING D3-LisaJ-Lisa-2
11160: PPUSH
11161: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-2 ) ;
11165: LD_EXP 15
11169: PPUSH
11170: LD_STRING D3-LisaJ-JMM-2
11172: PPUSH
11173: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-3 ) ;
11177: LD_EXP 24
11181: PPUSH
11182: LD_STRING D3-LisaJ-Lisa-3
11184: PPUSH
11185: CALL_OW 88
// end else
11189: GO 11223
// begin Say ( Lisa , D3-LisaL-Lisa-1 ) ;
11191: LD_EXP 24
11195: PPUSH
11196: LD_STRING D3-LisaL-Lisa-1
11198: PPUSH
11199: CALL_OW 88
// Say ( JMM , D3-LisaL-JMM-1 ) ;
11203: LD_EXP 15
11207: PPUSH
11208: LD_STRING D3-LisaL-JMM-1
11210: PPUSH
11211: CALL_OW 88
// joined := true ;
11215: LD_ADDR_VAR 0 5
11219: PUSH
11220: LD_INT 1
11222: ST_TO_ADDR
// end ; end else
11223: GO 11290
// begin if GetSide ( Joan ) = 7 then
11225: LD_EXP 37
11229: PPUSH
11230: CALL_OW 255
11234: PUSH
11235: LD_INT 7
11237: EQUAL
11238: IFFALSE 11278
// begin Say ( Lisa , D4-LisaJ-Lisa-1 ) ;
11240: LD_EXP 24
11244: PPUSH
11245: LD_STRING D4-LisaJ-Lisa-1
11247: PPUSH
11248: CALL_OW 88
// Say ( JMM , D4-LisaJ-JMM-1 ) ;
11252: LD_EXP 15
11256: PPUSH
11257: LD_STRING D4-LisaJ-JMM-1
11259: PPUSH
11260: CALL_OW 88
// Say ( Lisa , D4-LisaJ-Lisa-2 ) ;
11264: LD_EXP 24
11268: PPUSH
11269: LD_STRING D4-LisaJ-Lisa-2
11271: PPUSH
11272: CALL_OW 88
// end else
11276: GO 11290
// begin Say ( Lisa , D4-LisaL-Lisa-1 ) ;
11278: LD_EXP 24
11282: PPUSH
11283: LD_STRING D4-LisaL-Lisa-1
11285: PPUSH
11286: CALL_OW 88
// end ; end ; end else
11290: GO 12562
// if unit = Frank then
11292: LD_VAR 0 1
11296: PUSH
11297: LD_EXP 34
11301: EQUAL
11302: IFFALSE 11442
// begin joined := true ;
11304: LD_ADDR_VAR 0 5
11308: PUSH
11309: LD_INT 1
11311: ST_TO_ADDR
// if Frank in selected then
11312: LD_EXP 34
11316: PUSH
11317: LD_EXP 3
11321: IN
11322: IFFALSE 11392
// begin Say ( Frank , D3-Frank-Frank-1 ) ;
11324: LD_EXP 34
11328: PPUSH
11329: LD_STRING D3-Frank-Frank-1
11331: PPUSH
11332: CALL_OW 88
// Say ( JMM , D3-Frank-JMM-1 ) ;
11336: LD_EXP 15
11340: PPUSH
11341: LD_STRING D3-Frank-JMM-1
11343: PPUSH
11344: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-2 ) ;
11348: LD_EXP 34
11352: PPUSH
11353: LD_STRING D3-Frank-Frank-2
11355: PPUSH
11356: CALL_OW 88
// if reached_lab then
11360: LD_EXP 5
11364: IFFALSE 11390
// begin Say ( JMM , D3-Frank-JMM-2 ) ;
11366: LD_EXP 15
11370: PPUSH
11371: LD_STRING D3-Frank-JMM-2
11373: PPUSH
11374: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-3 ) ;
11378: LD_EXP 34
11382: PPUSH
11383: LD_STRING D3-Frank-Frank-3
11385: PPUSH
11386: CALL_OW 88
// end ; end else
11390: GO 11440
// begin Say ( Frank , D4-Frank-Frank-1 ) ;
11392: LD_EXP 34
11396: PPUSH
11397: LD_STRING D4-Frank-Frank-1
11399: PPUSH
11400: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-1 ) ;
11404: LD_EXP 15
11408: PPUSH
11409: LD_STRING D4-Frank-JMM-1
11411: PPUSH
11412: CALL_OW 88
// Say ( Frank , D4-Frank-Frank-2 ) ;
11416: LD_EXP 34
11420: PPUSH
11421: LD_STRING D4-Frank-Frank-2
11423: PPUSH
11424: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-2 ) ;
11428: LD_EXP 15
11432: PPUSH
11433: LD_STRING D4-Frank-JMM-2
11435: PPUSH
11436: CALL_OW 88
// end ; end else
11440: GO 12562
// if unit = Brown then
11442: LD_VAR 0 1
11446: PUSH
11447: LD_EXP 29
11451: EQUAL
11452: IFFALSE 11550
// begin if Brown in selected or gamma_commander = 2 then
11454: LD_EXP 29
11458: PUSH
11459: LD_EXP 3
11463: IN
11464: IFTRUE 11476
11466: PUSH
11467: LD_EXP 10
11471: PUSH
11472: LD_INT 2
11474: EQUAL
11475: OR
11476: IFFALSE 11512
// begin Say ( Brown , D3-Soldier1-Sol1-1 ) ;
11478: LD_EXP 29
11482: PPUSH
11483: LD_STRING D3-Soldier1-Sol1-1
11485: PPUSH
11486: CALL_OW 88
// Say ( JMM , D6-JMM-Brown-1 ) ;
11490: LD_EXP 15
11494: PPUSH
11495: LD_STRING D6-JMM-Brown-1
11497: PPUSH
11498: CALL_OW 88
// joined := true ;
11502: LD_ADDR_VAR 0 5
11506: PUSH
11507: LD_INT 1
11509: ST_TO_ADDR
// end else
11510: GO 11548
// begin Say ( Brown , D4-Soldier2-Sol1-1 ) ;
11512: LD_EXP 29
11516: PPUSH
11517: LD_STRING D4-Soldier2-Sol1-1
11519: PPUSH
11520: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11524: LD_EXP 15
11528: PPUSH
11529: LD_STRING D4-Soldier1-JMM-1
11531: PPUSH
11532: CALL_OW 88
// Say ( Brown , D4-Soldier2-Sol1-2 ) ;
11536: LD_EXP 29
11540: PPUSH
11541: LD_STRING D4-Soldier2-Sol1-2
11543: PPUSH
11544: CALL_OW 88
// end ; end else
11548: GO 12562
// if unit = Donaldson then
11550: LD_VAR 0 1
11554: PUSH
11555: LD_EXP 25
11559: EQUAL
11560: IFFALSE 11658
// begin if Donaldson in selected or gamma_commander = 1 then
11562: LD_EXP 25
11566: PUSH
11567: LD_EXP 3
11571: IN
11572: IFTRUE 11584
11574: PUSH
11575: LD_EXP 10
11579: PUSH
11580: LD_INT 1
11582: EQUAL
11583: OR
11584: IFFALSE 11620
// begin Say ( Donaldson , D3-Soldier2-FSol2-1 ) ;
11586: LD_EXP 25
11590: PPUSH
11591: LD_STRING D3-Soldier2-FSol2-1
11593: PPUSH
11594: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11598: LD_EXP 15
11602: PPUSH
11603: LD_STRING D3-Soldier2-JMM-1
11605: PPUSH
11606: CALL_OW 88
// joined := true ;
11610: LD_ADDR_VAR 0 5
11614: PUSH
11615: LD_INT 1
11617: ST_TO_ADDR
// end else
11618: GO 11656
// begin Say ( Donaldson , D4-Soldier1-FSol1-1 ) ;
11620: LD_EXP 25
11624: PPUSH
11625: LD_STRING D4-Soldier1-FSol1-1
11627: PPUSH
11628: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11632: LD_EXP 15
11636: PPUSH
11637: LD_STRING D4-Soldier1-JMM-1
11639: PPUSH
11640: CALL_OW 88
// Say ( Donaldson , D4-Soldier1-FSol1-2 ) ;
11644: LD_EXP 25
11648: PPUSH
11649: LD_STRING D4-Soldier1-FSol1-2
11651: PPUSH
11652: CALL_OW 88
// end ; end else
11656: GO 12562
// if unit = Cyrus then
11658: LD_VAR 0 1
11662: PUSH
11663: LD_EXP 27
11667: EQUAL
11668: IFFALSE 11742
// begin if Cyrus in selected then
11670: LD_EXP 27
11674: PUSH
11675: LD_EXP 3
11679: IN
11680: IFFALSE 11716
// begin Say ( Cyrus , D3-Cyrus-Cyrus-1 ) ;
11682: LD_EXP 27
11686: PPUSH
11687: LD_STRING D3-Cyrus-Cyrus-1
11689: PPUSH
11690: CALL_OW 88
// Say ( JMM , D3-Cyrus-JMM-1 ) ;
11694: LD_EXP 15
11698: PPUSH
11699: LD_STRING D3-Cyrus-JMM-1
11701: PPUSH
11702: CALL_OW 88
// joined := true ;
11706: LD_ADDR_VAR 0 5
11710: PUSH
11711: LD_INT 1
11713: ST_TO_ADDR
// end else
11714: GO 11740
// begin Say ( Cyrus , D4-Cyrus-Cyrus-1 ) ;
11716: LD_EXP 27
11720: PPUSH
11721: LD_STRING D4-Cyrus-Cyrus-1
11723: PPUSH
11724: CALL_OW 88
// Say ( JMM , D4-Cyrus-JMM-1 ) ;
11728: LD_EXP 15
11732: PPUSH
11733: LD_STRING D4-Cyrus-JMM-1
11735: PPUSH
11736: CALL_OW 88
// end ; end else
11740: GO 12562
// if unit = Bobby then
11742: LD_VAR 0 1
11746: PUSH
11747: LD_EXP 26
11751: EQUAL
11752: IFFALSE 11838
// begin if Bobby in selected then
11754: LD_EXP 26
11758: PUSH
11759: LD_EXP 3
11763: IN
11764: IFFALSE 11800
// begin Say ( Bobby , D3-Bobby-Bobby-1 ) ;
11766: LD_EXP 26
11770: PPUSH
11771: LD_STRING D3-Bobby-Bobby-1
11773: PPUSH
11774: CALL_OW 88
// Say ( JMM , D3-Bobby-JMM-1 ) ;
11778: LD_EXP 15
11782: PPUSH
11783: LD_STRING D3-Bobby-JMM-1
11785: PPUSH
11786: CALL_OW 88
// joined := true ;
11790: LD_ADDR_VAR 0 5
11794: PUSH
11795: LD_INT 1
11797: ST_TO_ADDR
// end else
11798: GO 11836
// begin Say ( Bobby , D4-Bobby-Bobby-1 ) ;
11800: LD_EXP 26
11804: PPUSH
11805: LD_STRING D4-Bobby-Bobby-1
11807: PPUSH
11808: CALL_OW 88
// Say ( JMM , D4-Bobby-JMM-1 ) ;
11812: LD_EXP 15
11816: PPUSH
11817: LD_STRING D4-Bobby-JMM-1
11819: PPUSH
11820: CALL_OW 88
// Say ( Bobby , D4-Bobby-Bobby-2 ) ;
11824: LD_EXP 26
11828: PPUSH
11829: LD_STRING D4-Bobby-Bobby-2
11831: PPUSH
11832: CALL_OW 88
// end ; end else
11836: GO 12562
// if unit = Cornel then
11838: LD_VAR 0 1
11842: PUSH
11843: LD_EXP 32
11847: EQUAL
11848: IFFALSE 11946
// begin if Cornel in selected then
11850: LD_EXP 32
11854: PUSH
11855: LD_EXP 3
11859: IN
11860: IFFALSE 11908
// begin Say ( Cornel , D3-Mark-Corn-1 ) ;
11862: LD_EXP 32
11866: PPUSH
11867: LD_STRING D3-Mark-Corn-1
11869: PPUSH
11870: CALL_OW 88
// Say ( JMM , D3-Mark-JMM-1 ) ;
11874: LD_EXP 15
11878: PPUSH
11879: LD_STRING D3-Mark-JMM-1
11881: PPUSH
11882: CALL_OW 88
// Say ( Cornel , D3-Mark-Corn-2 ) ;
11886: LD_EXP 32
11890: PPUSH
11891: LD_STRING D3-Mark-Corn-2
11893: PPUSH
11894: CALL_OW 88
// joined := true ;
11898: LD_ADDR_VAR 0 5
11902: PUSH
11903: LD_INT 1
11905: ST_TO_ADDR
// end else
11906: GO 11944
// begin Say ( Cornel , D4-Mark-Corn-1 ) ;
11908: LD_EXP 32
11912: PPUSH
11913: LD_STRING D4-Mark-Corn-1
11915: PPUSH
11916: CALL_OW 88
// Say ( JMM , D4-Mark-JMM-1 ) ;
11920: LD_EXP 15
11924: PPUSH
11925: LD_STRING D4-Mark-JMM-1
11927: PPUSH
11928: CALL_OW 88
// Say ( Cornel , D4-Mark-Corn-2 ) ;
11932: LD_EXP 32
11936: PPUSH
11937: LD_STRING D4-Mark-Corn-2
11939: PPUSH
11940: CALL_OW 88
// end ; end else
11944: GO 12562
// if unit = Gary then
11946: LD_VAR 0 1
11950: PUSH
11951: LD_EXP 33
11955: EQUAL
11956: IFFALSE 12054
// begin if Gary in selected then
11958: LD_EXP 33
11962: PUSH
11963: LD_EXP 3
11967: IN
11968: IFFALSE 12004
// begin Say ( Gary , D3-Gary-Gary-1 ) ;
11970: LD_EXP 33
11974: PPUSH
11975: LD_STRING D3-Gary-Gary-1
11977: PPUSH
11978: CALL_OW 88
// Say ( JMM , D3-Gary-JMM-1 ) ;
11982: LD_EXP 15
11986: PPUSH
11987: LD_STRING D3-Gary-JMM-1
11989: PPUSH
11990: CALL_OW 88
// joined := true ;
11994: LD_ADDR_VAR 0 5
11998: PUSH
11999: LD_INT 1
12001: ST_TO_ADDR
// end else
12002: GO 12052
// begin Say ( Gary , D4-Gary-Gary-1 ) ;
12004: LD_EXP 33
12008: PPUSH
12009: LD_STRING D4-Gary-Gary-1
12011: PPUSH
12012: CALL_OW 88
// SetSide ( Gary , 1 ) ;
12016: LD_EXP 33
12020: PPUSH
12021: LD_INT 1
12023: PPUSH
12024: CALL_OW 235
// DialogueOff ;
12028: CALL_OW 7
// InGameOff ;
12032: CALL_OW 9
// SetSide ( JMM , side ) ;
12036: LD_EXP 15
12040: PPUSH
12041: LD_VAR 0 4
12045: PPUSH
12046: CALL_OW 235
// exit ;
12050: GO 12754
// end ; end else
12052: GO 12562
// if unit = Kikuchi then
12054: LD_VAR 0 1
12058: PUSH
12059: LD_EXP 35
12063: EQUAL
12064: IFFALSE 12162
// begin if Kikuchi in selected then
12066: LD_EXP 35
12070: PUSH
12071: LD_EXP 3
12075: IN
12076: IFFALSE 12112
// begin Say ( Kikuchi , D3-Yamako-Yam-1 ) ;
12078: LD_EXP 35
12082: PPUSH
12083: LD_STRING D3-Yamako-Yam-1
12085: PPUSH
12086: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
12090: LD_EXP 15
12094: PPUSH
12095: LD_STRING D3-Soldier2-JMM-1
12097: PPUSH
12098: CALL_OW 88
// joined := true ;
12102: LD_ADDR_VAR 0 5
12106: PUSH
12107: LD_INT 1
12109: ST_TO_ADDR
// end else
12110: GO 12160
// begin Say ( Kikuchi , D4-Yamako-Yam-1 ) ;
12112: LD_EXP 35
12116: PPUSH
12117: LD_STRING D4-Yamako-Yam-1
12119: PPUSH
12120: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
12124: LD_EXP 35
12128: PPUSH
12129: LD_INT 1
12131: PPUSH
12132: CALL_OW 235
// DialogueOff ;
12136: CALL_OW 7
// InGameOff ;
12140: CALL_OW 9
// SetSide ( JMM , side ) ;
12144: LD_EXP 15
12148: PPUSH
12149: LD_VAR 0 4
12153: PPUSH
12154: CALL_OW 235
// exit ;
12158: GO 12754
// end ; end else
12160: GO 12562
// if unit = Gladstone then
12162: LD_VAR 0 1
12166: PUSH
12167: LD_EXP 30
12171: EQUAL
12172: IFFALSE 12246
// begin if Gladstone in selected then
12174: LD_EXP 30
12178: PUSH
12179: LD_EXP 3
12183: IN
12184: IFFALSE 12220
// begin joined := true ;
12186: LD_ADDR_VAR 0 5
12190: PUSH
12191: LD_INT 1
12193: ST_TO_ADDR
// Say ( JMM , D3-Tim-JMM-1 ) ;
12194: LD_EXP 15
12198: PPUSH
12199: LD_STRING D3-Tim-JMM-1
12201: PPUSH
12202: CALL_OW 88
// Say ( Gladstone , D3-Tim-Glad-1 ) ;
12206: LD_EXP 30
12210: PPUSH
12211: LD_STRING D3-Tim-Glad-1
12213: PPUSH
12214: CALL_OW 88
// end else
12218: GO 12244
// begin Say ( JMM , D4-Tim-JMM-1 ) ;
12220: LD_EXP 15
12224: PPUSH
12225: LD_STRING D4-Tim-JMM-1
12227: PPUSH
12228: CALL_OW 88
// Say ( Gladstone , D4-Tim-Glad-1 ) ;
12232: LD_EXP 30
12236: PPUSH
12237: LD_STRING D4-Tim-Glad-1
12239: PPUSH
12240: CALL_OW 88
// end ; end else
12244: GO 12562
// if unit = Denis then
12246: LD_VAR 0 1
12250: PUSH
12251: LD_EXP 28
12255: EQUAL
12256: IFFALSE 12292
// begin joined := true ;
12258: LD_ADDR_VAR 0 5
12262: PUSH
12263: LD_INT 1
12265: ST_TO_ADDR
// Say ( Denis , D3-Denis-Den-1 ) ;
12266: LD_EXP 28
12270: PPUSH
12271: LD_STRING D3-Denis-Den-1
12273: PPUSH
12274: CALL_OW 88
// Say ( JMM , D3-Denis-JMM-1 ) ;
12278: LD_EXP 15
12282: PPUSH
12283: LD_STRING D3-Denis-JMM-1
12285: PPUSH
12286: CALL_OW 88
// end else
12290: GO 12562
// if unit = Simms then
12292: LD_VAR 0 1
12296: PUSH
12297: LD_EXP 36
12301: EQUAL
12302: IFFALSE 12338
// begin joined := true ;
12304: LD_ADDR_VAR 0 5
12308: PUSH
12309: LD_INT 1
12311: ST_TO_ADDR
// Say ( Simms , D3-Simms-Sim-1 ) ;
12312: LD_EXP 36
12316: PPUSH
12317: LD_STRING D3-Simms-Sim-1
12319: PPUSH
12320: CALL_OW 88
// Say ( JMM , D3-Simms-JMM-1 ) ;
12324: LD_EXP 15
12328: PPUSH
12329: LD_STRING D3-Simms-JMM-1
12331: PPUSH
12332: CALL_OW 88
// end else
12336: GO 12562
// if unit = DeltaDoctor then
12338: LD_VAR 0 1
12342: PUSH
12343: LD_EXP 38
12347: EQUAL
12348: IFFALSE 12384
// begin joined := true ;
12350: LD_ADDR_VAR 0 5
12354: PUSH
12355: LD_INT 1
12357: ST_TO_ADDR
// Say ( DeltaDoctor , D3-Soldier1-Sol1-1 ) ;
12358: LD_EXP 38
12362: PPUSH
12363: LD_STRING D3-Soldier1-Sol1-1
12365: PPUSH
12366: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
12370: LD_EXP 15
12374: PPUSH
12375: LD_STRING D3-Soldier1-JMM-1
12377: PPUSH
12378: CALL_OW 88
// end else
12382: GO 12562
// begin joined := unit in selected ;
12384: LD_ADDR_VAR 0 5
12388: PUSH
12389: LD_VAR 0 1
12393: PUSH
12394: LD_EXP 3
12398: IN
12399: ST_TO_ADDR
// if joined then
12400: LD_VAR 0 5
12404: IFFALSE 12473
// begin if GetSex ( unit ) = sex_male then
12406: LD_VAR 0 1
12410: PPUSH
12411: CALL_OW 258
12415: PUSH
12416: LD_INT 1
12418: EQUAL
12419: IFFALSE 12447
// begin Say ( unit , D3-Soldier1-Sol1-1 ) ;
12421: LD_VAR 0 1
12425: PPUSH
12426: LD_STRING D3-Soldier1-Sol1-1
12428: PPUSH
12429: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
12433: LD_EXP 15
12437: PPUSH
12438: LD_STRING D3-Soldier1-JMM-1
12440: PPUSH
12441: CALL_OW 88
// end else
12445: GO 12471
// begin Say ( unit , D3-Soldier2-FSol2-1 ) ;
12447: LD_VAR 0 1
12451: PPUSH
12452: LD_STRING D3-Soldier2-FSol2-1
12454: PPUSH
12455: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
12459: LD_EXP 15
12463: PPUSH
12464: LD_STRING D3-Soldier2-JMM-1
12466: PPUSH
12467: CALL_OW 88
// end ; end else
12471: GO 12562
// begin if GetSex ( unit ) = sex_male then
12473: LD_VAR 0 1
12477: PPUSH
12478: CALL_OW 258
12482: PUSH
12483: LD_INT 1
12485: EQUAL
12486: IFFALSE 12526
// begin Say ( unit , D4-Soldier2-Sol1-1 ) ;
12488: LD_VAR 0 1
12492: PPUSH
12493: LD_STRING D4-Soldier2-Sol1-1
12495: PPUSH
12496: CALL_OW 88
// Say ( JMM , D4-Soldier2-JMM-1 ) ;
12500: LD_EXP 15
12504: PPUSH
12505: LD_STRING D4-Soldier2-JMM-1
12507: PPUSH
12508: CALL_OW 88
// Say ( unit , D4-Soldier2-Sol2-1 ) ;
12512: LD_VAR 0 1
12516: PPUSH
12517: LD_STRING D4-Soldier2-Sol2-1
12519: PPUSH
12520: CALL_OW 88
// end else
12524: GO 12562
// begin Say ( unit , D4-Soldier1-FSol1-1 ) ;
12526: LD_VAR 0 1
12530: PPUSH
12531: LD_STRING D4-Soldier1-FSol1-1
12533: PPUSH
12534: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
12538: LD_EXP 15
12542: PPUSH
12543: LD_STRING D4-Soldier1-JMM-1
12545: PPUSH
12546: CALL_OW 88
// Say ( unit , D4-Soldier1-FSol1-2 ) ;
12550: LD_VAR 0 1
12554: PPUSH
12555: LD_STRING D4-Soldier1-FSol1-2
12557: PPUSH
12558: CALL_OW 88
// end ; end ; end ; DialogueOff ;
12562: CALL_OW 7
// InGameOff ;
12566: CALL_OW 9
// if building then
12570: LD_VAR 0 3
12574: IFFALSE 12675
// begin SetSide ( JMM , side ) ;
12576: LD_EXP 15
12580: PPUSH
12581: LD_VAR 0 4
12585: PPUSH
12586: CALL_OW 235
// ComExitBuilding ( JMM ) ;
12590: LD_EXP 15
12594: PPUSH
12595: CALL_OW 122
// if joined then
12599: LD_VAR 0 5
12603: IFFALSE 12642
// begin SetSide ( unit , side ) ;
12605: LD_VAR 0 1
12609: PPUSH
12610: LD_VAR 0 4
12614: PPUSH
12615: CALL_OW 235
// SetSide ( building , 1 ) ;
12619: LD_VAR 0 3
12623: PPUSH
12624: LD_INT 1
12626: PPUSH
12627: CALL_OW 235
// ComExitBuilding ( unit ) ;
12631: LD_VAR 0 1
12635: PPUSH
12636: CALL_OW 122
// end else
12640: GO 12673
// begin wait ( 0 0$10 ) ;
12642: LD_INT 350
12644: PPUSH
12645: CALL_OW 67
// SetSide ( unit , 1 ) ;
12649: LD_VAR 0 1
12653: PPUSH
12654: LD_INT 1
12656: PPUSH
12657: CALL_OW 235
// SetSide ( building , 1 ) ;
12661: LD_VAR 0 3
12665: PPUSH
12666: LD_INT 1
12668: PPUSH
12669: CALL_OW 235
// end ; end else
12673: GO 12754
// begin ComStop ( [ JMM , unit ] ) ;
12675: LD_EXP 15
12679: PUSH
12680: LD_VAR 0 1
12684: PUSH
12685: EMPTY
12686: LIST
12687: LIST
12688: PPUSH
12689: CALL_OW 141
// if joined then
12693: LD_VAR 0 5
12697: IFFALSE 12715
// SetSide ( unit , side ) else
12699: LD_VAR 0 1
12703: PPUSH
12704: LD_VAR 0 4
12708: PPUSH
12709: CALL_OW 235
12713: GO 12754
// begin repeat wait ( 0 0$1 ) ;
12715: LD_INT 35
12717: PPUSH
12718: CALL_OW 67
// until GetDistUnits ( JMM , unit ) > 11 ;
12722: LD_EXP 15
12726: PPUSH
12727: LD_VAR 0 1
12731: PPUSH
12732: CALL_OW 296
12736: PUSH
12737: LD_INT 11
12739: GREATER
12740: IFFALSE 12715
// SetSide ( unit , 1 ) ;
12742: LD_VAR 0 1
12746: PPUSH
12747: LD_INT 1
12749: PPUSH
12750: CALL_OW 235
// end ; end ; end ;
12754: LD_VAR 0 2
12758: RET
// every 0 0$1 trigger GetDistUnits ( JMM , Mike ) < 6 and See ( 7 , Mike ) do
12759: LD_EXP 15
12763: PPUSH
12764: LD_EXP 39
12768: PPUSH
12769: CALL_OW 296
12773: PUSH
12774: LD_INT 6
12776: LESS
12777: IFFALSE 12793
12779: PUSH
12780: LD_INT 7
12782: PPUSH
12783: LD_EXP 39
12787: PPUSH
12788: CALL_OW 292
12792: AND
12793: IFFALSE 12851
12795: GO 12797
12797: DISABLE
// begin DialogueOn ;
12798: CALL_OW 6
// CenterNowOnUnits ( Mike ) ;
12802: LD_EXP 39
12806: PPUSH
12807: CALL_OW 87
// Say ( JMM , D6-JMM-Mike-1 ) ;
12811: LD_EXP 15
12815: PPUSH
12816: LD_STRING D6-JMM-Mike-1
12818: PPUSH
12819: CALL_OW 88
// Say ( Mike , D6-Mike-1 ) ;
12823: LD_EXP 39
12827: PPUSH
12828: LD_STRING D6-Mike-1
12830: PPUSH
12831: CALL_OW 88
// SetSide ( Mike , 7 ) ;
12835: LD_EXP 39
12839: PPUSH
12840: LD_INT 7
12842: PPUSH
12843: CALL_OW 235
// DialogueOff ;
12847: CALL_OW 7
// end ;
12851: END
// every 0 0$01 trigger IsInUnit ( JMM ) = amlab do
12852: LD_EXP 15
12856: PPUSH
12857: CALL_OW 310
12861: PUSH
12862: LD_INT 47
12864: EQUAL
12865: IFFALSE 12933
12867: GO 12869
12869: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
12870: LD_STRING M1a
12872: PPUSH
12873: CALL_OW 337
// SetTech ( tech_Soporific , 7 , state_researched ) ;
12877: LD_INT 13
12879: PPUSH
12880: LD_INT 7
12882: PPUSH
12883: LD_INT 2
12885: PPUSH
12886: CALL_OW 322
// SetTech ( tech_SpacAnom , 7 , state_researched ) ;
12890: LD_INT 29
12892: PPUSH
12893: LD_INT 7
12895: PPUSH
12896: LD_INT 2
12898: PPUSH
12899: CALL_OW 322
// SetClass ( JMM , class_bazooker ) ;
12903: LD_EXP 15
12907: PPUSH
12908: LD_INT 9
12910: PPUSH
12911: CALL_OW 336
// can_escape := true ;
12915: LD_ADDR_EXP 6
12919: PUSH
12920: LD_INT 1
12922: ST_TO_ADDR
// SetAreaMapShow ( escape_area , 1 ) ;
12923: LD_INT 19
12925: PPUSH
12926: LD_INT 1
12928: PPUSH
12929: CALL_OW 424
// end ;
12933: END
// every 0 0$1 trigger GetLives ( Powell ) < 999 do
12934: LD_EXP 17
12938: PPUSH
12939: CALL_OW 256
12943: PUSH
12944: LD_INT 999
12946: LESS
12947: IFFALSE 12998
12949: GO 12951
12951: DISABLE
// begin enable ;
12952: ENABLE
// if HexInfo ( 25 , 48 ) = Powell then
12953: LD_INT 25
12955: PPUSH
12956: LD_INT 48
12958: PPUSH
12959: CALL_OW 428
12963: PUSH
12964: LD_EXP 17
12968: EQUAL
12969: IFFALSE 12983
// begin RemoveUnit ( Powell ) ;
12971: LD_EXP 17
12975: PPUSH
12976: CALL_OW 64
// disable ;
12980: DISABLE
// end else
12981: GO 12998
// ComMoveXY ( Powell , 25 , 48 ) ;
12983: LD_EXP 17
12987: PPUSH
12988: LD_INT 25
12990: PPUSH
12991: LD_INT 48
12993: PPUSH
12994: CALL_OW 111
// end ;
12998: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do var i ;
12999: LD_INT 22
13001: PUSH
13002: LD_INT 4
13004: PUSH
13005: EMPTY
13006: LIST
13007: LIST
13008: PUSH
13009: LD_INT 21
13011: PUSH
13012: LD_INT 1
13014: PUSH
13015: EMPTY
13016: LIST
13017: LIST
13018: PUSH
13019: LD_INT 3
13021: PUSH
13022: LD_INT 24
13024: PUSH
13025: LD_INT 990
13027: PUSH
13028: EMPTY
13029: LIST
13030: LIST
13031: PUSH
13032: EMPTY
13033: LIST
13034: LIST
13035: PUSH
13036: EMPTY
13037: LIST
13038: LIST
13039: LIST
13040: PPUSH
13041: CALL_OW 69
13045: PUSH
13046: LD_EXP 16
13050: DIFF
13051: IFFALSE 13195
13053: GO 13055
13055: DISABLE
13056: LD_INT 0
13058: PPUSH
// begin enable ;
13059: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do
13060: LD_ADDR_VAR 0 1
13064: PUSH
13065: LD_INT 22
13067: PUSH
13068: LD_INT 4
13070: PUSH
13071: EMPTY
13072: LIST
13073: LIST
13074: PUSH
13075: LD_INT 21
13077: PUSH
13078: LD_INT 1
13080: PUSH
13081: EMPTY
13082: LIST
13083: LIST
13084: PUSH
13085: LD_INT 3
13087: PUSH
13088: LD_INT 24
13090: PUSH
13091: LD_INT 990
13093: PUSH
13094: EMPTY
13095: LIST
13096: LIST
13097: PUSH
13098: EMPTY
13099: LIST
13100: LIST
13101: PUSH
13102: EMPTY
13103: LIST
13104: LIST
13105: LIST
13106: PPUSH
13107: CALL_OW 69
13111: PUSH
13112: LD_EXP 16
13116: DIFF
13117: PUSH
13118: FOR_IN
13119: IFFALSE 13193
// begin ComFree ( i ) ;
13121: LD_VAR 0 1
13125: PPUSH
13126: CALL_OW 139
// SetSide ( i , 1 ) ;
13130: LD_VAR 0 1
13134: PPUSH
13135: LD_INT 1
13137: PPUSH
13138: CALL_OW 235
// if GetDistUnits ( i , JMM ) < 14 then
13142: LD_VAR 0 1
13146: PPUSH
13147: LD_EXP 15
13151: PPUSH
13152: CALL_OW 296
13156: PUSH
13157: LD_INT 14
13159: LESS
13160: IFFALSE 13191
// ComAgressiveMove ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
13162: LD_VAR 0 1
13166: PPUSH
13167: LD_EXP 15
13171: PPUSH
13172: CALL_OW 250
13176: PPUSH
13177: LD_EXP 15
13181: PPUSH
13182: CALL_OW 251
13186: PPUSH
13187: CALL_OW 114
// end ;
13191: GO 13118
13193: POP
13194: POP
// end ;
13195: PPOPN 1
13197: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var i ;
13198: LD_INT 22
13200: PUSH
13201: LD_INT 4
13203: PUSH
13204: EMPTY
13205: LIST
13206: LIST
13207: PUSH
13208: LD_INT 34
13210: PUSH
13211: LD_INT 12
13213: PUSH
13214: EMPTY
13215: LIST
13216: LIST
13217: PUSH
13218: EMPTY
13219: LIST
13220: LIST
13221: PPUSH
13222: CALL_OW 69
13226: IFFALSE 13308
13228: GO 13230
13230: DISABLE
13231: LD_INT 0
13233: PPUSH
// begin enable ;
13234: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do
13235: LD_ADDR_VAR 0 1
13239: PUSH
13240: LD_INT 22
13242: PUSH
13243: LD_INT 4
13245: PUSH
13246: EMPTY
13247: LIST
13248: LIST
13249: PUSH
13250: LD_INT 34
13252: PUSH
13253: LD_INT 12
13255: PUSH
13256: EMPTY
13257: LIST
13258: LIST
13259: PUSH
13260: EMPTY
13261: LIST
13262: LIST
13263: PPUSH
13264: CALL_OW 69
13268: PUSH
13269: FOR_IN
13270: IFFALSE 13306
// if GetDistUnits ( i , JMM ) < 6 then
13272: LD_VAR 0 1
13276: PPUSH
13277: LD_EXP 15
13281: PPUSH
13282: CALL_OW 296
13286: PUSH
13287: LD_INT 6
13289: LESS
13290: IFFALSE 13304
// SetSide ( i , 7 ) ;
13292: LD_VAR 0 1
13296: PPUSH
13297: LD_INT 7
13299: PPUSH
13300: CALL_OW 235
13304: GO 13269
13306: POP
13307: POP
// end ;
13308: PPOPN 1
13310: END
// every 0 0$01 trigger can_escape and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_ok ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) do var all_taken , tmp , m1 , m2 , m3 ;
13311: LD_EXP 6
13315: IFFALSE 13358
13317: PUSH
13318: LD_INT 19
13320: PPUSH
13321: LD_INT 22
13323: PUSH
13324: LD_INT 7
13326: PUSH
13327: EMPTY
13328: LIST
13329: LIST
13330: PUSH
13331: LD_INT 50
13333: PUSH
13334: EMPTY
13335: LIST
13336: PUSH
13337: LD_INT 21
13339: PUSH
13340: LD_INT 1
13342: PUSH
13343: EMPTY
13344: LIST
13345: LIST
13346: PUSH
13347: EMPTY
13348: LIST
13349: LIST
13350: LIST
13351: PPUSH
13352: CALL_OW 71
13356: NOT
13357: AND
13358: IFFALSE 13370
13360: PUSH
13361: LD_INT 3
13363: PPUSH
13364: CALL_OW 469
13368: NOT
13369: AND
13370: IFFALSE 13382
13372: PUSH
13373: LD_INT 5
13375: PPUSH
13376: CALL_OW 469
13380: NOT
13381: AND
13382: IFFALSE 15121
13384: GO 13386
13386: DISABLE
13387: LD_INT 0
13389: PPUSH
13390: PPUSH
13391: PPUSH
13392: PPUSH
13393: PPUSH
// begin m1 := false ;
13394: LD_ADDR_VAR 0 3
13398: PUSH
13399: LD_INT 0
13401: ST_TO_ADDR
// m2 := false ;
13402: LD_ADDR_VAR 0 4
13406: PUSH
13407: LD_INT 0
13409: ST_TO_ADDR
// m3 := false ;
13410: LD_ADDR_VAR 0 5
13414: PUSH
13415: LD_INT 0
13417: ST_TO_ADDR
// all_taken := ( UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 ) ;
13418: LD_ADDR_VAR 0 1
13422: PUSH
13423: LD_EXP 3
13427: PPUSH
13428: LD_INT 22
13430: PUSH
13431: LD_INT 4
13433: PUSH
13434: EMPTY
13435: LIST
13436: LIST
13437: PUSH
13438: LD_INT 21
13440: PUSH
13441: LD_INT 1
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: PUSH
13448: EMPTY
13449: LIST
13450: LIST
13451: PPUSH
13452: CALL_OW 72
13456: PUSH
13457: LD_INT 0
13459: EQUAL
13460: ST_TO_ADDR
// if not all_taken then
13461: LD_VAR 0 1
13465: NOT
13466: IFFALSE 13602
// begin if Query ( Q1 ) = 1 then
13468: LD_STRING Q1
13470: PPUSH
13471: CALL_OW 97
13475: PUSH
13476: LD_INT 1
13478: EQUAL
13479: IFFALSE 13602
// begin repeat wait ( 0 0$1 ) ;
13481: LD_INT 35
13483: PPUSH
13484: CALL_OW 67
// until UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_ok ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) ;
13488: LD_EXP 3
13492: PPUSH
13493: LD_INT 22
13495: PUSH
13496: LD_INT 4
13498: PUSH
13499: EMPTY
13500: LIST
13501: LIST
13502: PUSH
13503: LD_INT 21
13505: PUSH
13506: LD_INT 1
13508: PUSH
13509: EMPTY
13510: LIST
13511: LIST
13512: PUSH
13513: EMPTY
13514: LIST
13515: LIST
13516: PPUSH
13517: CALL_OW 72
13521: PUSH
13522: LD_INT 0
13524: EQUAL
13525: IFFALSE 13568
13527: PUSH
13528: LD_INT 19
13530: PPUSH
13531: LD_INT 22
13533: PUSH
13534: LD_INT 7
13536: PUSH
13537: EMPTY
13538: LIST
13539: LIST
13540: PUSH
13541: LD_INT 50
13543: PUSH
13544: EMPTY
13545: LIST
13546: PUSH
13547: LD_INT 21
13549: PUSH
13550: LD_INT 1
13552: PUSH
13553: EMPTY
13554: LIST
13555: LIST
13556: PUSH
13557: EMPTY
13558: LIST
13559: LIST
13560: LIST
13561: PPUSH
13562: CALL_OW 71
13566: NOT
13567: AND
13568: IFFALSE 13580
13570: PUSH
13571: LD_INT 3
13573: PPUSH
13574: CALL_OW 469
13578: NOT
13579: AND
13580: IFFALSE 13592
13582: PUSH
13583: LD_INT 5
13585: PPUSH
13586: CALL_OW 469
13590: NOT
13591: AND
13592: IFFALSE 13481
// all_taken := true ;
13594: LD_ADDR_VAR 0 1
13598: PUSH
13599: LD_INT 1
13601: ST_TO_ADDR
// end ; end ; if Count ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ) < 6 then
13602: LD_INT 22
13604: PUSH
13605: LD_INT 7
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: PUSH
13612: LD_INT 21
13614: PUSH
13615: LD_INT 1
13617: PUSH
13618: EMPTY
13619: LIST
13620: LIST
13621: PUSH
13622: LD_INT 50
13624: PUSH
13625: EMPTY
13626: LIST
13627: PUSH
13628: EMPTY
13629: LIST
13630: LIST
13631: LIST
13632: PPUSH
13633: CALL_OW 69
13637: PPUSH
13638: CALL 40294 0 1
13642: PUSH
13643: LD_INT 6
13645: LESS
13646: IFFALSE 13657
// begin YouLost ( AlliesLost ) ;
13648: LD_STRING AlliesLost
13650: PPUSH
13651: CALL_OW 104
// exit ;
13655: GO 15121
// end ; if team_kill_counter < 3 then
13657: LD_EXP 9
13661: PUSH
13662: LD_INT 3
13664: LESS
13665: IFFALSE 13681
// Say ( JMM , D5-JMM-1 ) else
13667: LD_EXP 15
13671: PPUSH
13672: LD_STRING D5-JMM-1
13674: PPUSH
13675: CALL_OW 88
13679: GO 13693
// Say ( JMM , D5-JMM-1a ) ;
13681: LD_EXP 15
13685: PPUSH
13686: LD_STRING D5-JMM-1a
13688: PPUSH
13689: CALL_OW 88
// if ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Roth ] ) >= 10 then
13693: LD_INT 22
13695: PUSH
13696: LD_INT 7
13698: PUSH
13699: EMPTY
13700: LIST
13701: LIST
13702: PUSH
13703: LD_INT 21
13705: PUSH
13706: LD_INT 1
13708: PUSH
13709: EMPTY
13710: LIST
13711: LIST
13712: PUSH
13713: LD_INT 23
13715: PUSH
13716: LD_INT 1
13718: PUSH
13719: EMPTY
13720: LIST
13721: LIST
13722: PUSH
13723: EMPTY
13724: LIST
13725: LIST
13726: LIST
13727: PPUSH
13728: CALL_OW 69
13732: PUSH
13733: LD_EXP 15
13737: PUSH
13738: LD_EXP 16
13742: PUSH
13743: EMPTY
13744: LIST
13745: LIST
13746: DIFF
13747: PUSH
13748: LD_INT 10
13750: GREATEREQUAL
13751: IFFALSE 13760
// SetAchievement ( ACH_TEAM ) ;
13753: LD_STRING ACH_TEAM
13755: PPUSH
13756: CALL_OW 543
// if not invis_used then
13760: LD_EXP 12
13764: NOT
13765: IFFALSE 13781
// begin wait ( 3 ) ;
13767: LD_INT 3
13769: PPUSH
13770: CALL_OW 67
// SetAchievement ( ACH_NOINVIS ) ;
13774: LD_STRING ACH_NOINVIS
13776: PPUSH
13777: CALL_OW 543
// end ; if not alert then
13781: LD_EXP 13
13785: NOT
13786: IFFALSE 13802
// begin wait ( 3 ) ;
13788: LD_INT 3
13790: PPUSH
13791: CALL_OW 67
// SetAchievement ( ACH_ALARM ) ;
13795: LD_STRING ACH_ALARM
13797: PPUSH
13798: CALL_OW 543
// end ; if tick < 15 15$00 then
13802: LD_OWVAR 1
13806: PUSH
13807: LD_INT 31500
13809: LESS
13810: IFFALSE 13826
// begin wait ( 3 ) ;
13812: LD_INT 3
13814: PPUSH
13815: CALL_OW 67
// SetAchievement ( ACH_ASPEED_16 ) ;
13819: LD_STRING ACH_ASPEED_16
13821: PPUSH
13822: CALL_OW 543
// end ; if all_taken then
13826: LD_VAR 0 1
13830: IFFALSE 13852
// begin AddMedal ( All , 1 ) ;
13832: LD_STRING All
13834: PPUSH
13835: LD_INT 1
13837: PPUSH
13838: CALL_OW 101
// m1 := true ;
13842: LD_ADDR_VAR 0 3
13846: PUSH
13847: LD_INT 1
13849: ST_TO_ADDR
// end else
13850: GO 13863
// AddMedal ( All , - 1 ) ;
13852: LD_STRING All
13854: PPUSH
13855: LD_INT 1
13857: NEG
13858: PPUSH
13859: CALL_OW 101
// if team_kill_counter then
13863: LD_EXP 9
13867: IFFALSE 13882
// AddMedal ( Save , - 1 ) else
13869: LD_STRING Save
13871: PPUSH
13872: LD_INT 1
13874: NEG
13875: PPUSH
13876: CALL_OW 101
13880: GO 13900
// begin AddMedal ( Save , 1 ) ;
13882: LD_STRING Save
13884: PPUSH
13885: LD_INT 1
13887: PPUSH
13888: CALL_OW 101
// m2 := true ;
13892: LD_ADDR_VAR 0 4
13896: PUSH
13897: LD_INT 1
13899: ST_TO_ADDR
// end ; if friends_kill_counter >= [ 2 , 2 , 1 , 1 ] [ Difficulty ] then
13900: LD_EXP 8
13904: PUSH
13905: LD_INT 2
13907: PUSH
13908: LD_INT 2
13910: PUSH
13911: LD_INT 1
13913: PUSH
13914: LD_INT 1
13916: PUSH
13917: EMPTY
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: PUSH
13923: LD_OWVAR 67
13927: ARRAY
13928: GREATEREQUAL
13929: IFFALSE 13944
// AddMedal ( Friendship , - 1 ) else
13931: LD_STRING Friendship
13933: PPUSH
13934: LD_INT 1
13936: NEG
13937: PPUSH
13938: CALL_OW 101
13942: GO 13962
// begin AddMedal ( Friendship , 1 ) ;
13944: LD_STRING Friendship
13946: PPUSH
13947: LD_INT 1
13949: PPUSH
13950: CALL_OW 101
// m3 := true ;
13954: LD_ADDR_VAR 0 5
13958: PUSH
13959: LD_INT 1
13961: ST_TO_ADDR
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
13962: LD_VAR 0 3
13966: IFFALSE 13974
13968: PUSH
13969: LD_VAR 0 4
13973: AND
13974: IFFALSE 13982
13976: PUSH
13977: LD_VAR 0 5
13981: AND
13982: IFFALSE 13994
13984: PUSH
13985: LD_OWVAR 67
13989: PUSH
13990: LD_INT 3
13992: GREATEREQUAL
13993: AND
13994: IFFALSE 14006
// SetAchievementEX ( ACH_AMER , 16 ) ;
13996: LD_STRING ACH_AMER
13998: PPUSH
13999: LD_INT 16
14001: PPUSH
14002: CALL_OW 564
// GiveMedals ( MAIN ) ;
14006: LD_STRING MAIN
14008: PPUSH
14009: CALL_OW 102
// tmp := FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] , [ f_class , class_apeman_engineer ] ] ] ] ) ;
14013: LD_ADDR_VAR 0 2
14017: PUSH
14018: LD_INT 22
14020: PUSH
14021: LD_INT 7
14023: PUSH
14024: EMPTY
14025: LIST
14026: LIST
14027: PUSH
14028: LD_INT 2
14030: PUSH
14031: LD_INT 25
14033: PUSH
14034: LD_INT 1
14036: PUSH
14037: EMPTY
14038: LIST
14039: LIST
14040: PUSH
14041: LD_INT 25
14043: PUSH
14044: LD_INT 2
14046: PUSH
14047: EMPTY
14048: LIST
14049: LIST
14050: PUSH
14051: LD_INT 25
14053: PUSH
14054: LD_INT 3
14056: PUSH
14057: EMPTY
14058: LIST
14059: LIST
14060: PUSH
14061: LD_INT 25
14063: PUSH
14064: LD_INT 4
14066: PUSH
14067: EMPTY
14068: LIST
14069: LIST
14070: PUSH
14071: LD_INT 25
14073: PUSH
14074: LD_INT 5
14076: PUSH
14077: EMPTY
14078: LIST
14079: LIST
14080: PUSH
14081: LD_INT 25
14083: PUSH
14084: LD_INT 8
14086: PUSH
14087: EMPTY
14088: LIST
14089: LIST
14090: PUSH
14091: LD_INT 25
14093: PUSH
14094: LD_INT 9
14096: PUSH
14097: EMPTY
14098: LIST
14099: LIST
14100: PUSH
14101: LD_INT 25
14103: PUSH
14104: LD_INT 16
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: PUSH
14111: EMPTY
14112: LIST
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: PUSH
14122: EMPTY
14123: LIST
14124: LIST
14125: PUSH
14126: EMPTY
14127: LIST
14128: PPUSH
14129: CALL_OW 69
14133: ST_TO_ADDR
// RewardPeople ( tmp union Roth diff Mike ) ;
14134: LD_VAR 0 2
14138: PUSH
14139: LD_EXP 16
14143: UNION
14144: PUSH
14145: LD_EXP 39
14149: DIFF
14150: PPUSH
14151: CALL_OW 43
// SaveCharacters ( JMM , 12a_JMM ) ;
14155: LD_EXP 15
14159: PPUSH
14160: LD_STRING 12a_JMM
14162: PPUSH
14163: CALL_OW 38
// if IsLive ( Roth ) then
14167: LD_EXP 16
14171: PPUSH
14172: CALL_OW 300
14176: IFFALSE 14190
// SaveCharacters ( Roth , 12a_Roth ) ;
14178: LD_EXP 16
14182: PPUSH
14183: LD_STRING 12a_Roth
14185: PPUSH
14186: CALL_OW 38
// if Lisa in tmp then
14190: LD_EXP 24
14194: PUSH
14195: LD_VAR 0 2
14199: IN
14200: IFFALSE 14216
// SaveCharacters ( Lisa , 12a_Lisa ) else
14202: LD_EXP 24
14206: PPUSH
14207: LD_STRING 12a_Lisa
14209: PPUSH
14210: CALL_OW 38
14214: GO 14234
// if Lisa then
14216: LD_EXP 24
14220: IFFALSE 14234
// SaveCharacters ( Lisa , 12p_Lisa ) ;
14222: LD_EXP 24
14226: PPUSH
14227: LD_STRING 12p_Lisa
14229: PPUSH
14230: CALL_OW 38
// if Mike in tmp then
14234: LD_EXP 39
14238: PUSH
14239: LD_VAR 0 2
14243: IN
14244: IFFALSE 14258
// SaveCharacters ( Mike , 12a_Mike ) ;
14246: LD_EXP 39
14250: PPUSH
14251: LD_STRING 12a_Mike
14253: PPUSH
14254: CALL_OW 38
// if Donaldson in tmp then
14258: LD_EXP 25
14262: PUSH
14263: LD_VAR 0 2
14267: IN
14268: IFFALSE 14284
// SaveCharacters ( Donaldson , 12a_Donaldson ) else
14270: LD_EXP 25
14274: PPUSH
14275: LD_STRING 12a_Donaldson
14277: PPUSH
14278: CALL_OW 38
14282: GO 14302
// if Donaldson then
14284: LD_EXP 25
14288: IFFALSE 14302
// SaveCharacters ( Donaldson , 12p_Donaldson ) ;
14290: LD_EXP 25
14294: PPUSH
14295: LD_STRING 12p_Donaldson
14297: PPUSH
14298: CALL_OW 38
// if Bobby in tmp then
14302: LD_EXP 26
14306: PUSH
14307: LD_VAR 0 2
14311: IN
14312: IFFALSE 14328
// SaveCharacters ( Bobby , 12a_Bobby ) else
14314: LD_EXP 26
14318: PPUSH
14319: LD_STRING 12a_Bobby
14321: PPUSH
14322: CALL_OW 38
14326: GO 14346
// if Bobby then
14328: LD_EXP 26
14332: IFFALSE 14346
// SaveCharacters ( Bobby , 12p_Bobby ) ;
14334: LD_EXP 26
14338: PPUSH
14339: LD_STRING 12p_Bobby
14341: PPUSH
14342: CALL_OW 38
// if Cyrus in tmp then
14346: LD_EXP 27
14350: PUSH
14351: LD_VAR 0 2
14355: IN
14356: IFFALSE 14372
// SaveCharacters ( Cyrus , 12a_Cyrus ) else
14358: LD_EXP 27
14362: PPUSH
14363: LD_STRING 12a_Cyrus
14365: PPUSH
14366: CALL_OW 38
14370: GO 14390
// if Cyrus then
14372: LD_EXP 27
14376: IFFALSE 14390
// SaveCharacters ( Cyrus , 12p_Cyrus ) ;
14378: LD_EXP 27
14382: PPUSH
14383: LD_STRING 12p_Cyrus
14385: PPUSH
14386: CALL_OW 38
// if Denis in tmp then
14390: LD_EXP 28
14394: PUSH
14395: LD_VAR 0 2
14399: IN
14400: IFFALSE 14414
// SaveCharacters ( Denis , 12a_Denis ) ;
14402: LD_EXP 28
14406: PPUSH
14407: LD_STRING 12a_Denis
14409: PPUSH
14410: CALL_OW 38
// if Brown in tmp then
14414: LD_EXP 29
14418: PUSH
14419: LD_VAR 0 2
14423: IN
14424: IFFALSE 14440
// SaveCharacters ( Brown , 12a_Brown ) else
14426: LD_EXP 29
14430: PPUSH
14431: LD_STRING 12a_Brown
14433: PPUSH
14434: CALL_OW 38
14438: GO 14464
// if Brown in tmp then
14440: LD_EXP 29
14444: PUSH
14445: LD_VAR 0 2
14449: IN
14450: IFFALSE 14464
// SaveCharacters ( Brown , 12p_Brown ) ;
14452: LD_EXP 29
14456: PPUSH
14457: LD_STRING 12p_Brown
14459: PPUSH
14460: CALL_OW 38
// if Gladstone in tmp then
14464: LD_EXP 30
14468: PUSH
14469: LD_VAR 0 2
14473: IN
14474: IFFALSE 14490
// SaveCharacters ( Gladstone , 12a_Gladstone ) else
14476: LD_EXP 30
14480: PPUSH
14481: LD_STRING 12a_Gladstone
14483: PPUSH
14484: CALL_OW 38
14488: GO 14508
// if Gladstone then
14490: LD_EXP 30
14494: IFFALSE 14508
// SaveCharacters ( Gladstone , 12p_Gladstone ) ;
14496: LD_EXP 30
14500: PPUSH
14501: LD_STRING 12p_Gladstone
14503: PPUSH
14504: CALL_OW 38
// if Houten in tmp then
14508: LD_EXP 31
14512: PUSH
14513: LD_VAR 0 2
14517: IN
14518: IFFALSE 14534
// SaveCharacters ( Houten , 12a_Houten ) else
14520: LD_EXP 31
14524: PPUSH
14525: LD_STRING 12a_Houten
14527: PPUSH
14528: CALL_OW 38
14532: GO 14552
// if Houten then
14534: LD_EXP 31
14538: IFFALSE 14552
// SaveCharacters ( Houten , 12p_Houten ) ;
14540: LD_EXP 31
14544: PPUSH
14545: LD_STRING 12p_Houten
14547: PPUSH
14548: CALL_OW 38
// if Cornel in tmp then
14552: LD_EXP 32
14556: PUSH
14557: LD_VAR 0 2
14561: IN
14562: IFFALSE 14578
// SaveCharacters ( Cornel , 12a_Cornell ) else
14564: LD_EXP 32
14568: PPUSH
14569: LD_STRING 12a_Cornell
14571: PPUSH
14572: CALL_OW 38
14576: GO 14596
// if Cornel then
14578: LD_EXP 32
14582: IFFALSE 14596
// SaveCharacters ( Cornel , 12p_Cornell ) ;
14584: LD_EXP 32
14588: PPUSH
14589: LD_STRING 12p_Cornell
14591: PPUSH
14592: CALL_OW 38
// if Gary in tmp then
14596: LD_EXP 33
14600: PUSH
14601: LD_VAR 0 2
14605: IN
14606: IFFALSE 14622
// SaveCharacters ( Gary , 12a_Gary ) else
14608: LD_EXP 33
14612: PPUSH
14613: LD_STRING 12a_Gary
14615: PPUSH
14616: CALL_OW 38
14620: GO 14640
// if Gary then
14622: LD_EXP 33
14626: IFFALSE 14640
// SaveCharacters ( Gary , 12p_Gary ) ;
14628: LD_EXP 33
14632: PPUSH
14633: LD_STRING 12p_Gary
14635: PPUSH
14636: CALL_OW 38
// if Frank in tmp then
14640: LD_EXP 34
14644: PUSH
14645: LD_VAR 0 2
14649: IN
14650: IFFALSE 14664
// SaveCharacters ( Frank , 12a_Frank ) ;
14652: LD_EXP 34
14656: PPUSH
14657: LD_STRING 12a_Frank
14659: PPUSH
14660: CALL_OW 38
// if Kikuchi in tmp then
14664: LD_EXP 35
14668: PUSH
14669: LD_VAR 0 2
14673: IN
14674: IFFALSE 14690
// SaveCharacters ( Kikuchi , 12a_Kikuchi ) else
14676: LD_EXP 35
14680: PPUSH
14681: LD_STRING 12a_Kikuchi
14683: PPUSH
14684: CALL_OW 38
14688: GO 14708
// if Kikuchi then
14690: LD_EXP 35
14694: IFFALSE 14708
// SaveCharacters ( Kikuchi , 12p_Kikuchi ) ;
14696: LD_EXP 35
14700: PPUSH
14701: LD_STRING 12p_Kikuchi
14703: PPUSH
14704: CALL_OW 38
// if Simms in tmp then
14708: LD_EXP 36
14712: PUSH
14713: LD_VAR 0 2
14717: IN
14718: IFFALSE 14732
// SaveCharacters ( Simms , 12a_Simms ) ;
14720: LD_EXP 36
14724: PPUSH
14725: LD_STRING 12a_Simms
14727: PPUSH
14728: CALL_OW 38
// if Joan in tmp then
14732: LD_EXP 37
14736: PUSH
14737: LD_VAR 0 2
14741: IN
14742: IFFALSE 14756
// SaveCharacters ( Joan , 12a_Joan ) ;
14744: LD_EXP 37
14748: PPUSH
14749: LD_STRING 12a_Joan
14751: PPUSH
14752: CALL_OW 38
// if DeltaDoctor in tmp then
14756: LD_EXP 38
14760: PUSH
14761: LD_VAR 0 2
14765: IN
14766: IFFALSE 14780
// SaveCharacters ( DeltaDoctor , 12a_DeltaDoctor ) ;
14768: LD_EXP 38
14772: PPUSH
14773: LD_STRING 12a_DeltaDoctor
14775: PPUSH
14776: CALL_OW 38
// tmp := tmp diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Mike ] ;
14780: LD_ADDR_VAR 0 2
14784: PUSH
14785: LD_VAR 0 2
14789: PUSH
14790: LD_EXP 15
14794: PUSH
14795: LD_EXP 16
14799: PUSH
14800: LD_EXP 24
14804: PUSH
14805: LD_EXP 25
14809: PUSH
14810: LD_EXP 26
14814: PUSH
14815: LD_EXP 27
14819: PUSH
14820: LD_EXP 28
14824: PUSH
14825: LD_EXP 29
14829: PUSH
14830: LD_EXP 30
14834: PUSH
14835: LD_EXP 31
14839: PUSH
14840: LD_EXP 32
14844: PUSH
14845: LD_EXP 33
14849: PUSH
14850: LD_EXP 34
14854: PUSH
14855: LD_EXP 35
14859: PUSH
14860: LD_EXP 36
14864: PUSH
14865: LD_EXP 37
14869: PUSH
14870: LD_EXP 38
14874: PUSH
14875: LD_EXP 39
14879: PUSH
14880: EMPTY
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: DIFF
14900: ST_TO_ADDR
// if tmp then
14901: LD_VAR 0 2
14905: IFFALSE 14919
// SaveCharacters ( tmp , 12a_others ) ;
14907: LD_VAR 0 2
14911: PPUSH
14912: LD_STRING 12a_others
14914: PPUSH
14915: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_side , 1 ] , [ f_side , 4 ] ] ] ) diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Powell , Mike ] ;
14919: LD_ADDR_VAR 0 2
14923: PUSH
14924: LD_INT 21
14926: PUSH
14927: LD_INT 1
14929: PUSH
14930: EMPTY
14931: LIST
14932: LIST
14933: PUSH
14934: LD_INT 23
14936: PUSH
14937: LD_INT 1
14939: PUSH
14940: EMPTY
14941: LIST
14942: LIST
14943: PUSH
14944: LD_INT 2
14946: PUSH
14947: LD_INT 22
14949: PUSH
14950: LD_INT 1
14952: PUSH
14953: EMPTY
14954: LIST
14955: LIST
14956: PUSH
14957: LD_INT 22
14959: PUSH
14960: LD_INT 4
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: PUSH
14967: EMPTY
14968: LIST
14969: LIST
14970: LIST
14971: PUSH
14972: EMPTY
14973: LIST
14974: LIST
14975: LIST
14976: PPUSH
14977: CALL_OW 69
14981: PUSH
14982: LD_EXP 15
14986: PUSH
14987: LD_EXP 16
14991: PUSH
14992: LD_EXP 24
14996: PUSH
14997: LD_EXP 25
15001: PUSH
15002: LD_EXP 26
15006: PUSH
15007: LD_EXP 27
15011: PUSH
15012: LD_EXP 28
15016: PUSH
15017: LD_EXP 29
15021: PUSH
15022: LD_EXP 30
15026: PUSH
15027: LD_EXP 31
15031: PUSH
15032: LD_EXP 32
15036: PUSH
15037: LD_EXP 33
15041: PUSH
15042: LD_EXP 34
15046: PUSH
15047: LD_EXP 35
15051: PUSH
15052: LD_EXP 36
15056: PUSH
15057: LD_EXP 37
15061: PUSH
15062: LD_EXP 38
15066: PUSH
15067: LD_EXP 17
15071: PUSH
15072: LD_EXP 39
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: LIST
15081: LIST
15082: LIST
15083: LIST
15084: LIST
15085: LIST
15086: LIST
15087: LIST
15088: LIST
15089: LIST
15090: LIST
15091: LIST
15092: LIST
15093: LIST
15094: LIST
15095: LIST
15096: LIST
15097: DIFF
15098: ST_TO_ADDR
// if tmp then
15099: LD_VAR 0 2
15103: IFFALSE 15117
// SaveCharacters ( tmp , 12p_others ) ;
15105: LD_VAR 0 2
15109: PPUSH
15110: LD_STRING 12p_others
15112: PPUSH
15113: CALL_OW 38
// YouWin ;
15117: CALL_OW 103
// end ; end_of_file
15121: PPOPN 5
15123: END
// on SailEvent ( event ) do var tmp ;
15124: LD_INT 0
15126: PPUSH
// begin if event = 1 then
15127: LD_VAR 0 1
15131: PUSH
15132: LD_INT 1
15134: EQUAL
15135: IFFALSE 15208
// begin if not mobile_patrol then
15137: LD_EXP 18
15141: NOT
15142: IFFALSE 15146
// exit ;
15144: GO 15208
// tmp := mobile_patrol [ mobile_patrol ] ;
15146: LD_ADDR_VAR 0 2
15150: PUSH
15151: LD_EXP 18
15155: PUSH
15156: LD_EXP 18
15160: ARRAY
15161: ST_TO_ADDR
// mobile_patrol := Delete ( mobile_patrol , mobile_patrol ) ;
15162: LD_ADDR_EXP 18
15166: PUSH
15167: LD_EXP 18
15171: PPUSH
15172: LD_EXP 18
15176: PPUSH
15177: CALL_OW 3
15181: ST_TO_ADDR
// Patrol ( tmp , mobile_points [ mobile_patrol + 1 ] , [ ] ) ;
15182: LD_VAR 0 2
15186: PPUSH
15187: LD_EXP 19
15191: PUSH
15192: LD_EXP 18
15196: PUSH
15197: LD_INT 1
15199: PLUS
15200: ARRAY
15201: PPUSH
15202: EMPTY
15203: PPUSH
15204: CALL 7043 0 3
// end ; end ;
15208: PPOPN 2
15210: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
15211: LD_VAR 0 1
15215: PPUSH
15216: CALL 31867 0 1
// if un = JMM then
15220: LD_VAR 0 1
15224: PUSH
15225: LD_EXP 15
15229: EQUAL
15230: IFFALSE 15239
// YouLost ( JMM ) ;
15232: LD_STRING JMM
15234: PPUSH
15235: CALL_OW 104
// if un = Powell then
15239: LD_VAR 0 1
15243: PUSH
15244: LD_EXP 17
15248: EQUAL
15249: IFFALSE 15261
// SaveVariable ( true , 12a_PowellKilled ) ;
15251: LD_INT 1
15253: PPUSH
15254: LD_STRING 12a_PowellKilled
15256: PPUSH
15257: CALL_OW 39
// if GetSide ( un ) = 7 and GetWeapon ( un ) = us_cargo_bay then
15261: LD_VAR 0 1
15265: PPUSH
15266: CALL_OW 255
15270: PUSH
15271: LD_INT 7
15273: EQUAL
15274: IFFALSE 15291
15276: PUSH
15277: LD_VAR 0 1
15281: PPUSH
15282: CALL_OW 264
15286: PUSH
15287: LD_INT 12
15289: EQUAL
15290: AND
15291: IFFALSE 15300
// YouLost ( Artifact ) ;
15293: LD_STRING Artifact
15295: PPUSH
15296: CALL_OW 104
// if ( GetSide ( un ) = 7 and GetType ( un ) = unit_human ) or un = Roth then
15300: LD_VAR 0 1
15304: PPUSH
15305: CALL_OW 255
15309: PUSH
15310: LD_INT 7
15312: EQUAL
15313: IFFALSE 15330
15315: PUSH
15316: LD_VAR 0 1
15320: PPUSH
15321: CALL_OW 247
15325: PUSH
15326: LD_INT 1
15328: EQUAL
15329: AND
15330: IFTRUE 15344
15332: PUSH
15333: LD_VAR 0 1
15337: PUSH
15338: LD_EXP 16
15342: EQUAL
15343: OR
15344: IFFALSE 15360
// team_kill_counter := team_kill_counter + 1 ;
15346: LD_ADDR_EXP 9
15350: PUSH
15351: LD_EXP 9
15355: PUSH
15356: LD_INT 1
15358: PLUS
15359: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetType ( un ) = unit_human then
15360: LD_VAR 0 1
15364: PPUSH
15365: CALL_OW 255
15369: PUSH
15370: LD_INT 1
15372: EQUAL
15373: IFFALSE 15390
15375: PUSH
15376: LD_VAR 0 1
15380: PPUSH
15381: CALL_OW 247
15385: PUSH
15386: LD_INT 1
15388: EQUAL
15389: AND
15390: IFFALSE 15406
// friends_kill_counter := friends_kill_counter + 1 ;
15392: LD_ADDR_EXP 8
15396: PUSH
15397: LD_EXP 8
15401: PUSH
15402: LD_INT 1
15404: PLUS
15405: ST_TO_ADDR
// if GetSide ( un ) <> 1 then
15406: LD_VAR 0 1
15410: PPUSH
15411: CALL_OW 255
15415: PUSH
15416: LD_INT 1
15418: NONEQUAL
15419: IFFALSE 15423
// exit ;
15421: GO 15525
// if GetControl ( un ) = control_remote then
15423: LD_VAR 0 1
15427: PPUSH
15428: CALL_OW 263
15432: PUSH
15433: LD_INT 2
15435: EQUAL
15436: IFFALSE 15454
// defenders := defenders diff un ;
15438: LD_ADDR_EXP 21
15442: PUSH
15443: LD_EXP 21
15447: PUSH
15448: LD_VAR 0 1
15452: DIFF
15453: ST_TO_ADDR
// if not un in defenders then
15454: LD_VAR 0 1
15458: PUSH
15459: LD_EXP 21
15463: IN
15464: NOT
15465: IFFALSE 15525
// begin defcon := [ GetX ( un ) , GetY ( un ) ] ;
15467: LD_ADDR_EXP 22
15471: PUSH
15472: LD_VAR 0 1
15476: PPUSH
15477: CALL_OW 250
15481: PUSH
15482: LD_VAR 0 1
15486: PPUSH
15487: CALL_OW 251
15491: PUSH
15492: EMPTY
15493: LIST
15494: LIST
15495: ST_TO_ADDR
// def_counter := Inc ( def_counter ) ;
15496: LD_ADDR_EXP 14
15500: PUSH
15501: LD_EXP 14
15505: PPUSH
15506: CALL 77599 0 1
15510: ST_TO_ADDR
// if def_counter < 4 then
15511: LD_EXP 14
15515: PUSH
15516: LD_INT 4
15518: LESS
15519: IFFALSE 15525
// Defend ;
15521: CALL 2964 0 0
// end ; end ;
15525: PPOPN 1
15527: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
15528: LD_VAR 0 1
15532: PPUSH
15533: LD_VAR 0 2
15537: PPUSH
15538: CALL 31925 0 2
// if GetSide ( veh ) <> 1 then
15542: LD_VAR 0 1
15546: PPUSH
15547: CALL_OW 255
15551: PUSH
15552: LD_INT 1
15554: NONEQUAL
15555: IFFALSE 15559
// exit ;
15557: GO 15583
// if GetControl ( veh ) = control_remote then
15559: LD_VAR 0 1
15563: PPUSH
15564: CALL_OW 263
15568: PUSH
15569: LD_INT 2
15571: EQUAL
15572: IFFALSE 15583
// Connect ( veh ) ;
15574: LD_VAR 0 1
15578: PPUSH
15579: CALL 46538 0 1
// end ;
15583: PPOPN 2
15585: END
// on UnitGoesToRed ( un ) do var i , veh ;
15586: LD_INT 0
15588: PPUSH
15589: PPUSH
// begin if GetSide ( un ) = 1 and GetControl ( un ) = control_remote then
15590: LD_VAR 0 1
15594: PPUSH
15595: CALL_OW 255
15599: PUSH
15600: LD_INT 1
15602: EQUAL
15603: IFFALSE 15620
15605: PUSH
15606: LD_VAR 0 1
15610: PPUSH
15611: CALL_OW 263
15615: PUSH
15616: LD_INT 2
15618: EQUAL
15619: AND
15620: IFFALSE 15631
// ComUnlink ( un ) ;
15622: LD_VAR 0 1
15626: PPUSH
15627: CALL_OW 136
// if un = ambar0 then
15631: LD_VAR 0 1
15635: PUSH
15636: LD_INT 18
15638: EQUAL
15639: IFFALSE 15749
// begin uc_side := 1 ;
15641: LD_ADDR_OWVAR 20
15645: PUSH
15646: LD_INT 1
15648: ST_TO_ADDR
// uc_nation := 1 ;
15649: LD_ADDR_OWVAR 21
15653: PUSH
15654: LD_INT 1
15656: ST_TO_ADDR
// for i = 1 to 6 do
15657: LD_ADDR_VAR 0 2
15661: PUSH
15662: DOUBLE
15663: LD_INT 1
15665: DEC
15666: ST_TO_ADDR
15667: LD_INT 6
15669: PUSH
15670: FOR_TO
15671: IFFALSE 15747
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
15673: LD_INT 3
15675: PPUSH
15676: LD_INT 1
15678: PPUSH
15679: LD_INT 3
15681: PPUSH
15682: LD_INT 4
15684: PPUSH
15685: LD_INT 100
15687: PPUSH
15688: CALL 43056 0 5
// veh := CreateVehicle ;
15692: LD_ADDR_VAR 0 3
15696: PUSH
15697: CALL_OW 45
15701: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
15702: LD_VAR 0 3
15706: PPUSH
15707: LD_INT 1
15709: PPUSH
15710: CALL_OW 233
// PlaceUnitArea ( veh , west_spawn , false ) ;
15714: LD_VAR 0 3
15718: PPUSH
15719: LD_INT 25
15721: PPUSH
15722: LD_INT 0
15724: PPUSH
15725: CALL_OW 49
// defenders := defenders ^ veh ;
15729: LD_ADDR_EXP 21
15733: PUSH
15734: LD_EXP 21
15738: PUSH
15739: LD_VAR 0 3
15743: ADD
15744: ST_TO_ADDR
// end ;
15745: GO 15670
15747: POP
15748: POP
// end ; end ;
15749: PPOPN 3
15751: END
// on EnterBuilding ( building , unit ) do begin if unit = Powell then
15752: LD_VAR 0 2
15756: PUSH
15757: LD_EXP 17
15761: EQUAL
15762: IFFALSE 15773
// RemoveUnit ( Powell ) ;
15764: LD_EXP 17
15768: PPUSH
15769: CALL_OW 64
// end ;
15773: PPOPN 2
15775: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
15776: LD_VAR 0 1
15780: PPUSH
15781: CALL 31909 0 1
// end ; end_of_file end_of_file
15785: PPOPN 1
15787: END
// export globalGameSaveCounter ; every 0 0$1 do
15788: GO 15790
15790: DISABLE
// begin enable ;
15791: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
15792: LD_STRING updateTimer(
15794: PUSH
15795: LD_OWVAR 1
15799: STR
15800: PUSH
15801: LD_STRING );
15803: STR
15804: PPUSH
15805: CALL_OW 559
// end ;
15809: END
// every 0 0$1 do
15810: GO 15812
15812: DISABLE
// begin globalGameSaveCounter := 0 ;
15813: LD_ADDR_EXP 40
15817: PUSH
15818: LD_INT 0
15820: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
15821: LD_STRING setGameSaveCounter(0)
15823: PPUSH
15824: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
15828: LD_STRING initStreamRollete();
15830: PPUSH
15831: CALL_OW 559
// InitStreamMode ;
15835: CALL 17180 0 0
// DefineStreamItems ( false ) ;
15839: LD_INT 0
15841: PPUSH
15842: CALL 17644 0 1
// end ;
15846: END
// export function SOS_MapStart ( ) ; begin
15847: LD_INT 0
15849: PPUSH
// if streamModeActive then
15850: LD_EXP 41
15854: IFFALSE 15863
// DefineStreamItems ( true ) ;
15856: LD_INT 1
15858: PPUSH
15859: CALL 17644 0 1
// UpdateLuaVariables ( ) ;
15863: CALL 15880 0 0
// UpdateFactoryWaypoints ( ) ;
15867: CALL 30766 0 0
// UpdateWarehouseGatheringPoints ( ) ;
15871: CALL 31018 0 0
// end ;
15875: LD_VAR 0 1
15879: RET
// function UpdateLuaVariables ( ) ; begin
15880: LD_INT 0
15882: PPUSH
// if globalGameSaveCounter then
15883: LD_EXP 40
15887: IFFALSE 15921
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
15889: LD_ADDR_EXP 40
15893: PUSH
15894: LD_EXP 40
15898: PPUSH
15899: CALL 77599 0 1
15903: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
15904: LD_STRING setGameSaveCounter(
15906: PUSH
15907: LD_EXP 40
15911: STR
15912: PUSH
15913: LD_STRING )
15915: STR
15916: PPUSH
15917: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
15921: LD_STRING setGameDifficulty(
15923: PUSH
15924: LD_OWVAR 67
15928: STR
15929: PUSH
15930: LD_STRING )
15932: STR
15933: PPUSH
15934: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
15938: LD_STRING displayDifficulty(
15940: PUSH
15941: LD_OWVAR 67
15945: STR
15946: PUSH
15947: LD_STRING )
15949: STR
15950: PPUSH
15951: CALL_OW 559
// end ;
15955: LD_VAR 0 1
15959: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15960: LD_INT 0
15962: PPUSH
// if p2 = stream_mode then
15963: LD_VAR 0 2
15967: PUSH
15968: LD_INT 100
15970: EQUAL
15971: IFFALSE 16974
// begin if not StreamModeActive then
15973: LD_EXP 41
15977: NOT
15978: IFFALSE 15988
// StreamModeActive := true ;
15980: LD_ADDR_EXP 41
15984: PUSH
15985: LD_INT 1
15987: ST_TO_ADDR
// if p3 = 0 then
15988: LD_VAR 0 3
15992: PUSH
15993: LD_INT 0
15995: EQUAL
15996: IFFALSE 16002
// InitStreamMode ;
15998: CALL 17180 0 0
// if p3 = 1 then
16002: LD_VAR 0 3
16006: PUSH
16007: LD_INT 1
16009: EQUAL
16010: IFFALSE 16020
// sRocket := true ;
16012: LD_ADDR_EXP 46
16016: PUSH
16017: LD_INT 1
16019: ST_TO_ADDR
// if p3 = 2 then
16020: LD_VAR 0 3
16024: PUSH
16025: LD_INT 2
16027: EQUAL
16028: IFFALSE 16038
// sSpeed := true ;
16030: LD_ADDR_EXP 45
16034: PUSH
16035: LD_INT 1
16037: ST_TO_ADDR
// if p3 = 3 then
16038: LD_VAR 0 3
16042: PUSH
16043: LD_INT 3
16045: EQUAL
16046: IFFALSE 16056
// sEngine := true ;
16048: LD_ADDR_EXP 47
16052: PUSH
16053: LD_INT 1
16055: ST_TO_ADDR
// if p3 = 4 then
16056: LD_VAR 0 3
16060: PUSH
16061: LD_INT 4
16063: EQUAL
16064: IFFALSE 16074
// sSpec := true ;
16066: LD_ADDR_EXP 44
16070: PUSH
16071: LD_INT 1
16073: ST_TO_ADDR
// if p3 = 5 then
16074: LD_VAR 0 3
16078: PUSH
16079: LD_INT 5
16081: EQUAL
16082: IFFALSE 16092
// sLevel := true ;
16084: LD_ADDR_EXP 48
16088: PUSH
16089: LD_INT 1
16091: ST_TO_ADDR
// if p3 = 6 then
16092: LD_VAR 0 3
16096: PUSH
16097: LD_INT 6
16099: EQUAL
16100: IFFALSE 16110
// sArmoury := true ;
16102: LD_ADDR_EXP 49
16106: PUSH
16107: LD_INT 1
16109: ST_TO_ADDR
// if p3 = 7 then
16110: LD_VAR 0 3
16114: PUSH
16115: LD_INT 7
16117: EQUAL
16118: IFFALSE 16128
// sRadar := true ;
16120: LD_ADDR_EXP 50
16124: PUSH
16125: LD_INT 1
16127: ST_TO_ADDR
// if p3 = 8 then
16128: LD_VAR 0 3
16132: PUSH
16133: LD_INT 8
16135: EQUAL
16136: IFFALSE 16146
// sBunker := true ;
16138: LD_ADDR_EXP 51
16142: PUSH
16143: LD_INT 1
16145: ST_TO_ADDR
// if p3 = 9 then
16146: LD_VAR 0 3
16150: PUSH
16151: LD_INT 9
16153: EQUAL
16154: IFFALSE 16164
// sHack := true ;
16156: LD_ADDR_EXP 52
16160: PUSH
16161: LD_INT 1
16163: ST_TO_ADDR
// if p3 = 10 then
16164: LD_VAR 0 3
16168: PUSH
16169: LD_INT 10
16171: EQUAL
16172: IFFALSE 16182
// sFire := true ;
16174: LD_ADDR_EXP 53
16178: PUSH
16179: LD_INT 1
16181: ST_TO_ADDR
// if p3 = 11 then
16182: LD_VAR 0 3
16186: PUSH
16187: LD_INT 11
16189: EQUAL
16190: IFFALSE 16200
// sRefresh := true ;
16192: LD_ADDR_EXP 54
16196: PUSH
16197: LD_INT 1
16199: ST_TO_ADDR
// if p3 = 12 then
16200: LD_VAR 0 3
16204: PUSH
16205: LD_INT 12
16207: EQUAL
16208: IFFALSE 16218
// sExp := true ;
16210: LD_ADDR_EXP 55
16214: PUSH
16215: LD_INT 1
16217: ST_TO_ADDR
// if p3 = 13 then
16218: LD_VAR 0 3
16222: PUSH
16223: LD_INT 13
16225: EQUAL
16226: IFFALSE 16236
// sDepot := true ;
16228: LD_ADDR_EXP 56
16232: PUSH
16233: LD_INT 1
16235: ST_TO_ADDR
// if p3 = 14 then
16236: LD_VAR 0 3
16240: PUSH
16241: LD_INT 14
16243: EQUAL
16244: IFFALSE 16254
// sFlag := true ;
16246: LD_ADDR_EXP 57
16250: PUSH
16251: LD_INT 1
16253: ST_TO_ADDR
// if p3 = 15 then
16254: LD_VAR 0 3
16258: PUSH
16259: LD_INT 15
16261: EQUAL
16262: IFFALSE 16272
// sKamikadze := true ;
16264: LD_ADDR_EXP 65
16268: PUSH
16269: LD_INT 1
16271: ST_TO_ADDR
// if p3 = 16 then
16272: LD_VAR 0 3
16276: PUSH
16277: LD_INT 16
16279: EQUAL
16280: IFFALSE 16290
// sTroll := true ;
16282: LD_ADDR_EXP 66
16286: PUSH
16287: LD_INT 1
16289: ST_TO_ADDR
// if p3 = 17 then
16290: LD_VAR 0 3
16294: PUSH
16295: LD_INT 17
16297: EQUAL
16298: IFFALSE 16308
// sSlow := true ;
16300: LD_ADDR_EXP 67
16304: PUSH
16305: LD_INT 1
16307: ST_TO_ADDR
// if p3 = 18 then
16308: LD_VAR 0 3
16312: PUSH
16313: LD_INT 18
16315: EQUAL
16316: IFFALSE 16326
// sLack := true ;
16318: LD_ADDR_EXP 68
16322: PUSH
16323: LD_INT 1
16325: ST_TO_ADDR
// if p3 = 19 then
16326: LD_VAR 0 3
16330: PUSH
16331: LD_INT 19
16333: EQUAL
16334: IFFALSE 16344
// sTank := true ;
16336: LD_ADDR_EXP 70
16340: PUSH
16341: LD_INT 1
16343: ST_TO_ADDR
// if p3 = 20 then
16344: LD_VAR 0 3
16348: PUSH
16349: LD_INT 20
16351: EQUAL
16352: IFFALSE 16362
// sRemote := true ;
16354: LD_ADDR_EXP 71
16358: PUSH
16359: LD_INT 1
16361: ST_TO_ADDR
// if p3 = 21 then
16362: LD_VAR 0 3
16366: PUSH
16367: LD_INT 21
16369: EQUAL
16370: IFFALSE 16380
// sPowell := true ;
16372: LD_ADDR_EXP 72
16376: PUSH
16377: LD_INT 1
16379: ST_TO_ADDR
// if p3 = 22 then
16380: LD_VAR 0 3
16384: PUSH
16385: LD_INT 22
16387: EQUAL
16388: IFFALSE 16398
// sTeleport := true ;
16390: LD_ADDR_EXP 75
16394: PUSH
16395: LD_INT 1
16397: ST_TO_ADDR
// if p3 = 23 then
16398: LD_VAR 0 3
16402: PUSH
16403: LD_INT 23
16405: EQUAL
16406: IFFALSE 16416
// sOilTower := true ;
16408: LD_ADDR_EXP 77
16412: PUSH
16413: LD_INT 1
16415: ST_TO_ADDR
// if p3 = 24 then
16416: LD_VAR 0 3
16420: PUSH
16421: LD_INT 24
16423: EQUAL
16424: IFFALSE 16434
// sShovel := true ;
16426: LD_ADDR_EXP 78
16430: PUSH
16431: LD_INT 1
16433: ST_TO_ADDR
// if p3 = 25 then
16434: LD_VAR 0 3
16438: PUSH
16439: LD_INT 25
16441: EQUAL
16442: IFFALSE 16452
// sSheik := true ;
16444: LD_ADDR_EXP 79
16448: PUSH
16449: LD_INT 1
16451: ST_TO_ADDR
// if p3 = 26 then
16452: LD_VAR 0 3
16456: PUSH
16457: LD_INT 26
16459: EQUAL
16460: IFFALSE 16470
// sEarthquake := true ;
16462: LD_ADDR_EXP 81
16466: PUSH
16467: LD_INT 1
16469: ST_TO_ADDR
// if p3 = 27 then
16470: LD_VAR 0 3
16474: PUSH
16475: LD_INT 27
16477: EQUAL
16478: IFFALSE 16488
// sAI := true ;
16480: LD_ADDR_EXP 82
16484: PUSH
16485: LD_INT 1
16487: ST_TO_ADDR
// if p3 = 28 then
16488: LD_VAR 0 3
16492: PUSH
16493: LD_INT 28
16495: EQUAL
16496: IFFALSE 16506
// sCargo := true ;
16498: LD_ADDR_EXP 85
16502: PUSH
16503: LD_INT 1
16505: ST_TO_ADDR
// if p3 = 29 then
16506: LD_VAR 0 3
16510: PUSH
16511: LD_INT 29
16513: EQUAL
16514: IFFALSE 16524
// sDLaser := true ;
16516: LD_ADDR_EXP 86
16520: PUSH
16521: LD_INT 1
16523: ST_TO_ADDR
// if p3 = 30 then
16524: LD_VAR 0 3
16528: PUSH
16529: LD_INT 30
16531: EQUAL
16532: IFFALSE 16542
// sExchange := true ;
16534: LD_ADDR_EXP 87
16538: PUSH
16539: LD_INT 1
16541: ST_TO_ADDR
// if p3 = 31 then
16542: LD_VAR 0 3
16546: PUSH
16547: LD_INT 31
16549: EQUAL
16550: IFFALSE 16560
// sFac := true ;
16552: LD_ADDR_EXP 88
16556: PUSH
16557: LD_INT 1
16559: ST_TO_ADDR
// if p3 = 32 then
16560: LD_VAR 0 3
16564: PUSH
16565: LD_INT 32
16567: EQUAL
16568: IFFALSE 16578
// sPower := true ;
16570: LD_ADDR_EXP 89
16574: PUSH
16575: LD_INT 1
16577: ST_TO_ADDR
// if p3 = 33 then
16578: LD_VAR 0 3
16582: PUSH
16583: LD_INT 33
16585: EQUAL
16586: IFFALSE 16596
// sRandom := true ;
16588: LD_ADDR_EXP 90
16592: PUSH
16593: LD_INT 1
16595: ST_TO_ADDR
// if p3 = 34 then
16596: LD_VAR 0 3
16600: PUSH
16601: LD_INT 34
16603: EQUAL
16604: IFFALSE 16614
// sShield := true ;
16606: LD_ADDR_EXP 91
16610: PUSH
16611: LD_INT 1
16613: ST_TO_ADDR
// if p3 = 35 then
16614: LD_VAR 0 3
16618: PUSH
16619: LD_INT 35
16621: EQUAL
16622: IFFALSE 16632
// sTime := true ;
16624: LD_ADDR_EXP 92
16628: PUSH
16629: LD_INT 1
16631: ST_TO_ADDR
// if p3 = 36 then
16632: LD_VAR 0 3
16636: PUSH
16637: LD_INT 36
16639: EQUAL
16640: IFFALSE 16650
// sTools := true ;
16642: LD_ADDR_EXP 93
16646: PUSH
16647: LD_INT 1
16649: ST_TO_ADDR
// if p3 = 101 then
16650: LD_VAR 0 3
16654: PUSH
16655: LD_INT 101
16657: EQUAL
16658: IFFALSE 16668
// sSold := true ;
16660: LD_ADDR_EXP 58
16664: PUSH
16665: LD_INT 1
16667: ST_TO_ADDR
// if p3 = 102 then
16668: LD_VAR 0 3
16672: PUSH
16673: LD_INT 102
16675: EQUAL
16676: IFFALSE 16686
// sDiff := true ;
16678: LD_ADDR_EXP 59
16682: PUSH
16683: LD_INT 1
16685: ST_TO_ADDR
// if p3 = 103 then
16686: LD_VAR 0 3
16690: PUSH
16691: LD_INT 103
16693: EQUAL
16694: IFFALSE 16704
// sFog := true ;
16696: LD_ADDR_EXP 62
16700: PUSH
16701: LD_INT 1
16703: ST_TO_ADDR
// if p3 = 104 then
16704: LD_VAR 0 3
16708: PUSH
16709: LD_INT 104
16711: EQUAL
16712: IFFALSE 16722
// sReset := true ;
16714: LD_ADDR_EXP 63
16718: PUSH
16719: LD_INT 1
16721: ST_TO_ADDR
// if p3 = 105 then
16722: LD_VAR 0 3
16726: PUSH
16727: LD_INT 105
16729: EQUAL
16730: IFFALSE 16740
// sSun := true ;
16732: LD_ADDR_EXP 64
16736: PUSH
16737: LD_INT 1
16739: ST_TO_ADDR
// if p3 = 106 then
16740: LD_VAR 0 3
16744: PUSH
16745: LD_INT 106
16747: EQUAL
16748: IFFALSE 16758
// sTiger := true ;
16750: LD_ADDR_EXP 60
16754: PUSH
16755: LD_INT 1
16757: ST_TO_ADDR
// if p3 = 107 then
16758: LD_VAR 0 3
16762: PUSH
16763: LD_INT 107
16765: EQUAL
16766: IFFALSE 16776
// sBomb := true ;
16768: LD_ADDR_EXP 61
16772: PUSH
16773: LD_INT 1
16775: ST_TO_ADDR
// if p3 = 108 then
16776: LD_VAR 0 3
16780: PUSH
16781: LD_INT 108
16783: EQUAL
16784: IFFALSE 16794
// sWound := true ;
16786: LD_ADDR_EXP 69
16790: PUSH
16791: LD_INT 1
16793: ST_TO_ADDR
// if p3 = 109 then
16794: LD_VAR 0 3
16798: PUSH
16799: LD_INT 109
16801: EQUAL
16802: IFFALSE 16812
// sBetray := true ;
16804: LD_ADDR_EXP 73
16808: PUSH
16809: LD_INT 1
16811: ST_TO_ADDR
// if p3 = 110 then
16812: LD_VAR 0 3
16816: PUSH
16817: LD_INT 110
16819: EQUAL
16820: IFFALSE 16830
// sContamin := true ;
16822: LD_ADDR_EXP 74
16826: PUSH
16827: LD_INT 1
16829: ST_TO_ADDR
// if p3 = 111 then
16830: LD_VAR 0 3
16834: PUSH
16835: LD_INT 111
16837: EQUAL
16838: IFFALSE 16848
// sOil := true ;
16840: LD_ADDR_EXP 76
16844: PUSH
16845: LD_INT 1
16847: ST_TO_ADDR
// if p3 = 112 then
16848: LD_VAR 0 3
16852: PUSH
16853: LD_INT 112
16855: EQUAL
16856: IFFALSE 16866
// sStu := true ;
16858: LD_ADDR_EXP 80
16862: PUSH
16863: LD_INT 1
16865: ST_TO_ADDR
// if p3 = 113 then
16866: LD_VAR 0 3
16870: PUSH
16871: LD_INT 113
16873: EQUAL
16874: IFFALSE 16884
// sBazooka := true ;
16876: LD_ADDR_EXP 83
16880: PUSH
16881: LD_INT 1
16883: ST_TO_ADDR
// if p3 = 114 then
16884: LD_VAR 0 3
16888: PUSH
16889: LD_INT 114
16891: EQUAL
16892: IFFALSE 16902
// sMortar := true ;
16894: LD_ADDR_EXP 84
16898: PUSH
16899: LD_INT 1
16901: ST_TO_ADDR
// if p3 = 115 then
16902: LD_VAR 0 3
16906: PUSH
16907: LD_INT 115
16909: EQUAL
16910: IFFALSE 16920
// sRanger := true ;
16912: LD_ADDR_EXP 94
16916: PUSH
16917: LD_INT 1
16919: ST_TO_ADDR
// if p3 = 116 then
16920: LD_VAR 0 3
16924: PUSH
16925: LD_INT 116
16927: EQUAL
16928: IFFALSE 16938
// sComputer := true ;
16930: LD_ADDR_EXP 95
16934: PUSH
16935: LD_INT 1
16937: ST_TO_ADDR
// if p3 = 117 then
16938: LD_VAR 0 3
16942: PUSH
16943: LD_INT 117
16945: EQUAL
16946: IFFALSE 16956
// s30 := true ;
16948: LD_ADDR_EXP 96
16952: PUSH
16953: LD_INT 1
16955: ST_TO_ADDR
// if p3 = 118 then
16956: LD_VAR 0 3
16960: PUSH
16961: LD_INT 118
16963: EQUAL
16964: IFFALSE 16974
// s60 := true ;
16966: LD_ADDR_EXP 97
16970: PUSH
16971: LD_INT 1
16973: ST_TO_ADDR
// end ; if p2 = hack_mode then
16974: LD_VAR 0 2
16978: PUSH
16979: LD_INT 101
16981: EQUAL
16982: IFFALSE 17110
// begin case p3 of 1 :
16984: LD_VAR 0 3
16988: PUSH
16989: LD_INT 1
16991: DOUBLE
16992: EQUAL
16993: IFTRUE 16997
16995: GO 17004
16997: POP
// hHackUnlimitedResources ; 2 :
16998: CALL 29373 0 0
17002: GO 17110
17004: LD_INT 2
17006: DOUBLE
17007: EQUAL
17008: IFTRUE 17012
17010: GO 17019
17012: POP
// hHackSetLevel10 ; 3 :
17013: CALL 29506 0 0
17017: GO 17110
17019: LD_INT 3
17021: DOUBLE
17022: EQUAL
17023: IFTRUE 17027
17025: GO 17034
17027: POP
// hHackSetLevel10YourUnits ; 4 :
17028: CALL 29591 0 0
17032: GO 17110
17034: LD_INT 4
17036: DOUBLE
17037: EQUAL
17038: IFTRUE 17042
17040: GO 17049
17042: POP
// hHackInvincible ; 5 :
17043: CALL 30039 0 0
17047: GO 17110
17049: LD_INT 5
17051: DOUBLE
17052: EQUAL
17053: IFTRUE 17057
17055: GO 17064
17057: POP
// hHackInvisible ; 6 :
17058: CALL 30150 0 0
17062: GO 17110
17064: LD_INT 6
17066: DOUBLE
17067: EQUAL
17068: IFTRUE 17072
17070: GO 17079
17072: POP
// hHackChangeYourSide ; 7 :
17073: CALL 30207 0 0
17077: GO 17110
17079: LD_INT 7
17081: DOUBLE
17082: EQUAL
17083: IFTRUE 17087
17085: GO 17094
17087: POP
// hHackChangeUnitSide ; 8 :
17088: CALL 30249 0 0
17092: GO 17110
17094: LD_INT 8
17096: DOUBLE
17097: EQUAL
17098: IFTRUE 17102
17100: GO 17109
17102: POP
// hHackFog ; end ;
17103: CALL 30350 0 0
17107: GO 17110
17109: POP
// end ; if p2 = game_save_mode then
17110: LD_VAR 0 2
17114: PUSH
17115: LD_INT 102
17117: EQUAL
17118: IFFALSE 17175
// begin if p3 = 1 then
17120: LD_VAR 0 3
17124: PUSH
17125: LD_INT 1
17127: EQUAL
17128: IFFALSE 17140
// globalGameSaveCounter := p4 ;
17130: LD_ADDR_EXP 40
17134: PUSH
17135: LD_VAR 0 4
17139: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
17140: LD_VAR 0 3
17144: PUSH
17145: LD_INT 2
17147: EQUAL
17148: IFFALSE 17156
17150: PUSH
17151: LD_EXP 40
17155: AND
17156: IFFALSE 17175
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
17158: LD_STRING setGameSaveCounter(
17160: PUSH
17161: LD_EXP 40
17165: STR
17166: PUSH
17167: LD_STRING )
17169: STR
17170: PPUSH
17171: CALL_OW 559
// end ; end ;
17175: LD_VAR 0 7
17179: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
17180: LD_INT 0
17182: PPUSH
// streamModeActive := false ;
17183: LD_ADDR_EXP 41
17187: PUSH
17188: LD_INT 0
17190: ST_TO_ADDR
// normalCounter := 36 ;
17191: LD_ADDR_EXP 42
17195: PUSH
17196: LD_INT 36
17198: ST_TO_ADDR
// hardcoreCounter := 18 ;
17199: LD_ADDR_EXP 43
17203: PUSH
17204: LD_INT 18
17206: ST_TO_ADDR
// sRocket := false ;
17207: LD_ADDR_EXP 46
17211: PUSH
17212: LD_INT 0
17214: ST_TO_ADDR
// sSpeed := false ;
17215: LD_ADDR_EXP 45
17219: PUSH
17220: LD_INT 0
17222: ST_TO_ADDR
// sEngine := false ;
17223: LD_ADDR_EXP 47
17227: PUSH
17228: LD_INT 0
17230: ST_TO_ADDR
// sSpec := false ;
17231: LD_ADDR_EXP 44
17235: PUSH
17236: LD_INT 0
17238: ST_TO_ADDR
// sLevel := false ;
17239: LD_ADDR_EXP 48
17243: PUSH
17244: LD_INT 0
17246: ST_TO_ADDR
// sArmoury := false ;
17247: LD_ADDR_EXP 49
17251: PUSH
17252: LD_INT 0
17254: ST_TO_ADDR
// sRadar := false ;
17255: LD_ADDR_EXP 50
17259: PUSH
17260: LD_INT 0
17262: ST_TO_ADDR
// sBunker := false ;
17263: LD_ADDR_EXP 51
17267: PUSH
17268: LD_INT 0
17270: ST_TO_ADDR
// sHack := false ;
17271: LD_ADDR_EXP 52
17275: PUSH
17276: LD_INT 0
17278: ST_TO_ADDR
// sFire := false ;
17279: LD_ADDR_EXP 53
17283: PUSH
17284: LD_INT 0
17286: ST_TO_ADDR
// sRefresh := false ;
17287: LD_ADDR_EXP 54
17291: PUSH
17292: LD_INT 0
17294: ST_TO_ADDR
// sExp := false ;
17295: LD_ADDR_EXP 55
17299: PUSH
17300: LD_INT 0
17302: ST_TO_ADDR
// sDepot := false ;
17303: LD_ADDR_EXP 56
17307: PUSH
17308: LD_INT 0
17310: ST_TO_ADDR
// sFlag := false ;
17311: LD_ADDR_EXP 57
17315: PUSH
17316: LD_INT 0
17318: ST_TO_ADDR
// sKamikadze := false ;
17319: LD_ADDR_EXP 65
17323: PUSH
17324: LD_INT 0
17326: ST_TO_ADDR
// sTroll := false ;
17327: LD_ADDR_EXP 66
17331: PUSH
17332: LD_INT 0
17334: ST_TO_ADDR
// sSlow := false ;
17335: LD_ADDR_EXP 67
17339: PUSH
17340: LD_INT 0
17342: ST_TO_ADDR
// sLack := false ;
17343: LD_ADDR_EXP 68
17347: PUSH
17348: LD_INT 0
17350: ST_TO_ADDR
// sTank := false ;
17351: LD_ADDR_EXP 70
17355: PUSH
17356: LD_INT 0
17358: ST_TO_ADDR
// sRemote := false ;
17359: LD_ADDR_EXP 71
17363: PUSH
17364: LD_INT 0
17366: ST_TO_ADDR
// sPowell := false ;
17367: LD_ADDR_EXP 72
17371: PUSH
17372: LD_INT 0
17374: ST_TO_ADDR
// sTeleport := false ;
17375: LD_ADDR_EXP 75
17379: PUSH
17380: LD_INT 0
17382: ST_TO_ADDR
// sOilTower := false ;
17383: LD_ADDR_EXP 77
17387: PUSH
17388: LD_INT 0
17390: ST_TO_ADDR
// sShovel := false ;
17391: LD_ADDR_EXP 78
17395: PUSH
17396: LD_INT 0
17398: ST_TO_ADDR
// sSheik := false ;
17399: LD_ADDR_EXP 79
17403: PUSH
17404: LD_INT 0
17406: ST_TO_ADDR
// sEarthquake := false ;
17407: LD_ADDR_EXP 81
17411: PUSH
17412: LD_INT 0
17414: ST_TO_ADDR
// sAI := false ;
17415: LD_ADDR_EXP 82
17419: PUSH
17420: LD_INT 0
17422: ST_TO_ADDR
// sCargo := false ;
17423: LD_ADDR_EXP 85
17427: PUSH
17428: LD_INT 0
17430: ST_TO_ADDR
// sDLaser := false ;
17431: LD_ADDR_EXP 86
17435: PUSH
17436: LD_INT 0
17438: ST_TO_ADDR
// sExchange := false ;
17439: LD_ADDR_EXP 87
17443: PUSH
17444: LD_INT 0
17446: ST_TO_ADDR
// sFac := false ;
17447: LD_ADDR_EXP 88
17451: PUSH
17452: LD_INT 0
17454: ST_TO_ADDR
// sPower := false ;
17455: LD_ADDR_EXP 89
17459: PUSH
17460: LD_INT 0
17462: ST_TO_ADDR
// sRandom := false ;
17463: LD_ADDR_EXP 90
17467: PUSH
17468: LD_INT 0
17470: ST_TO_ADDR
// sShield := false ;
17471: LD_ADDR_EXP 91
17475: PUSH
17476: LD_INT 0
17478: ST_TO_ADDR
// sTime := false ;
17479: LD_ADDR_EXP 92
17483: PUSH
17484: LD_INT 0
17486: ST_TO_ADDR
// sTools := false ;
17487: LD_ADDR_EXP 93
17491: PUSH
17492: LD_INT 0
17494: ST_TO_ADDR
// sSold := false ;
17495: LD_ADDR_EXP 58
17499: PUSH
17500: LD_INT 0
17502: ST_TO_ADDR
// sDiff := false ;
17503: LD_ADDR_EXP 59
17507: PUSH
17508: LD_INT 0
17510: ST_TO_ADDR
// sFog := false ;
17511: LD_ADDR_EXP 62
17515: PUSH
17516: LD_INT 0
17518: ST_TO_ADDR
// sReset := false ;
17519: LD_ADDR_EXP 63
17523: PUSH
17524: LD_INT 0
17526: ST_TO_ADDR
// sSun := false ;
17527: LD_ADDR_EXP 64
17531: PUSH
17532: LD_INT 0
17534: ST_TO_ADDR
// sTiger := false ;
17535: LD_ADDR_EXP 60
17539: PUSH
17540: LD_INT 0
17542: ST_TO_ADDR
// sBomb := false ;
17543: LD_ADDR_EXP 61
17547: PUSH
17548: LD_INT 0
17550: ST_TO_ADDR
// sWound := false ;
17551: LD_ADDR_EXP 69
17555: PUSH
17556: LD_INT 0
17558: ST_TO_ADDR
// sBetray := false ;
17559: LD_ADDR_EXP 73
17563: PUSH
17564: LD_INT 0
17566: ST_TO_ADDR
// sContamin := false ;
17567: LD_ADDR_EXP 74
17571: PUSH
17572: LD_INT 0
17574: ST_TO_ADDR
// sOil := false ;
17575: LD_ADDR_EXP 76
17579: PUSH
17580: LD_INT 0
17582: ST_TO_ADDR
// sStu := false ;
17583: LD_ADDR_EXP 80
17587: PUSH
17588: LD_INT 0
17590: ST_TO_ADDR
// sBazooka := false ;
17591: LD_ADDR_EXP 83
17595: PUSH
17596: LD_INT 0
17598: ST_TO_ADDR
// sMortar := false ;
17599: LD_ADDR_EXP 84
17603: PUSH
17604: LD_INT 0
17606: ST_TO_ADDR
// sRanger := false ;
17607: LD_ADDR_EXP 94
17611: PUSH
17612: LD_INT 0
17614: ST_TO_ADDR
// sComputer := false ;
17615: LD_ADDR_EXP 95
17619: PUSH
17620: LD_INT 0
17622: ST_TO_ADDR
// s30 := false ;
17623: LD_ADDR_EXP 96
17627: PUSH
17628: LD_INT 0
17630: ST_TO_ADDR
// s60 := false ;
17631: LD_ADDR_EXP 97
17635: PUSH
17636: LD_INT 0
17638: ST_TO_ADDR
// end ;
17639: LD_VAR 0 1
17643: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
17644: LD_INT 0
17646: PPUSH
17647: PPUSH
17648: PPUSH
17649: PPUSH
17650: PPUSH
17651: PPUSH
17652: PPUSH
// result := [ ] ;
17653: LD_ADDR_VAR 0 2
17657: PUSH
17658: EMPTY
17659: ST_TO_ADDR
// if campaign_id = 1 then
17660: LD_OWVAR 69
17664: PUSH
17665: LD_INT 1
17667: EQUAL
17668: IFFALSE 20834
// begin case mission_number of 1 :
17670: LD_OWVAR 70
17674: PUSH
17675: LD_INT 1
17677: DOUBLE
17678: EQUAL
17679: IFTRUE 17683
17681: GO 17759
17683: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
17684: LD_ADDR_VAR 0 2
17688: PUSH
17689: LD_INT 2
17691: PUSH
17692: LD_INT 4
17694: PUSH
17695: LD_INT 11
17697: PUSH
17698: LD_INT 12
17700: PUSH
17701: LD_INT 15
17703: PUSH
17704: LD_INT 16
17706: PUSH
17707: LD_INT 22
17709: PUSH
17710: LD_INT 23
17712: PUSH
17713: LD_INT 26
17715: PUSH
17716: EMPTY
17717: LIST
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: LIST
17723: LIST
17724: LIST
17725: LIST
17726: PUSH
17727: LD_INT 101
17729: PUSH
17730: LD_INT 102
17732: PUSH
17733: LD_INT 106
17735: PUSH
17736: LD_INT 116
17738: PUSH
17739: LD_INT 117
17741: PUSH
17742: LD_INT 118
17744: PUSH
17745: EMPTY
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: PUSH
17753: EMPTY
17754: LIST
17755: LIST
17756: ST_TO_ADDR
17757: GO 20832
17759: LD_INT 2
17761: DOUBLE
17762: EQUAL
17763: IFTRUE 17767
17765: GO 17851
17767: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
17768: LD_ADDR_VAR 0 2
17772: PUSH
17773: LD_INT 2
17775: PUSH
17776: LD_INT 4
17778: PUSH
17779: LD_INT 11
17781: PUSH
17782: LD_INT 12
17784: PUSH
17785: LD_INT 15
17787: PUSH
17788: LD_INT 16
17790: PUSH
17791: LD_INT 22
17793: PUSH
17794: LD_INT 23
17796: PUSH
17797: LD_INT 26
17799: PUSH
17800: EMPTY
17801: LIST
17802: LIST
17803: LIST
17804: LIST
17805: LIST
17806: LIST
17807: LIST
17808: LIST
17809: LIST
17810: PUSH
17811: LD_INT 101
17813: PUSH
17814: LD_INT 102
17816: PUSH
17817: LD_INT 105
17819: PUSH
17820: LD_INT 106
17822: PUSH
17823: LD_INT 108
17825: PUSH
17826: LD_INT 116
17828: PUSH
17829: LD_INT 117
17831: PUSH
17832: LD_INT 118
17834: PUSH
17835: EMPTY
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: LIST
17841: LIST
17842: LIST
17843: LIST
17844: PUSH
17845: EMPTY
17846: LIST
17847: LIST
17848: ST_TO_ADDR
17849: GO 20832
17851: LD_INT 3
17853: DOUBLE
17854: EQUAL
17855: IFTRUE 17859
17857: GO 17947
17859: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
17860: LD_ADDR_VAR 0 2
17864: PUSH
17865: LD_INT 2
17867: PUSH
17868: LD_INT 4
17870: PUSH
17871: LD_INT 5
17873: PUSH
17874: LD_INT 11
17876: PUSH
17877: LD_INT 12
17879: PUSH
17880: LD_INT 15
17882: PUSH
17883: LD_INT 16
17885: PUSH
17886: LD_INT 22
17888: PUSH
17889: LD_INT 26
17891: PUSH
17892: LD_INT 36
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: LIST
17899: LIST
17900: LIST
17901: LIST
17902: LIST
17903: LIST
17904: LIST
17905: LIST
17906: PUSH
17907: LD_INT 101
17909: PUSH
17910: LD_INT 102
17912: PUSH
17913: LD_INT 105
17915: PUSH
17916: LD_INT 106
17918: PUSH
17919: LD_INT 108
17921: PUSH
17922: LD_INT 116
17924: PUSH
17925: LD_INT 117
17927: PUSH
17928: LD_INT 118
17930: PUSH
17931: EMPTY
17932: LIST
17933: LIST
17934: LIST
17935: LIST
17936: LIST
17937: LIST
17938: LIST
17939: LIST
17940: PUSH
17941: EMPTY
17942: LIST
17943: LIST
17944: ST_TO_ADDR
17945: GO 20832
17947: LD_INT 4
17949: DOUBLE
17950: EQUAL
17951: IFTRUE 17955
17953: GO 18051
17955: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
17956: LD_ADDR_VAR 0 2
17960: PUSH
17961: LD_INT 2
17963: PUSH
17964: LD_INT 4
17966: PUSH
17967: LD_INT 5
17969: PUSH
17970: LD_INT 8
17972: PUSH
17973: LD_INT 11
17975: PUSH
17976: LD_INT 12
17978: PUSH
17979: LD_INT 15
17981: PUSH
17982: LD_INT 16
17984: PUSH
17985: LD_INT 22
17987: PUSH
17988: LD_INT 23
17990: PUSH
17991: LD_INT 26
17993: PUSH
17994: LD_INT 36
17996: PUSH
17997: EMPTY
17998: LIST
17999: LIST
18000: LIST
18001: LIST
18002: LIST
18003: LIST
18004: LIST
18005: LIST
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: PUSH
18011: LD_INT 101
18013: PUSH
18014: LD_INT 102
18016: PUSH
18017: LD_INT 105
18019: PUSH
18020: LD_INT 106
18022: PUSH
18023: LD_INT 108
18025: PUSH
18026: LD_INT 116
18028: PUSH
18029: LD_INT 117
18031: PUSH
18032: LD_INT 118
18034: PUSH
18035: EMPTY
18036: LIST
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: LIST
18042: LIST
18043: LIST
18044: PUSH
18045: EMPTY
18046: LIST
18047: LIST
18048: ST_TO_ADDR
18049: GO 20832
18051: LD_INT 5
18053: DOUBLE
18054: EQUAL
18055: IFTRUE 18059
18057: GO 18171
18059: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
18060: LD_ADDR_VAR 0 2
18064: PUSH
18065: LD_INT 2
18067: PUSH
18068: LD_INT 4
18070: PUSH
18071: LD_INT 5
18073: PUSH
18074: LD_INT 6
18076: PUSH
18077: LD_INT 8
18079: PUSH
18080: LD_INT 11
18082: PUSH
18083: LD_INT 12
18085: PUSH
18086: LD_INT 15
18088: PUSH
18089: LD_INT 16
18091: PUSH
18092: LD_INT 22
18094: PUSH
18095: LD_INT 23
18097: PUSH
18098: LD_INT 25
18100: PUSH
18101: LD_INT 26
18103: PUSH
18104: LD_INT 36
18106: PUSH
18107: EMPTY
18108: LIST
18109: LIST
18110: LIST
18111: LIST
18112: LIST
18113: LIST
18114: LIST
18115: LIST
18116: LIST
18117: LIST
18118: LIST
18119: LIST
18120: LIST
18121: LIST
18122: PUSH
18123: LD_INT 101
18125: PUSH
18126: LD_INT 102
18128: PUSH
18129: LD_INT 105
18131: PUSH
18132: LD_INT 106
18134: PUSH
18135: LD_INT 108
18137: PUSH
18138: LD_INT 109
18140: PUSH
18141: LD_INT 112
18143: PUSH
18144: LD_INT 116
18146: PUSH
18147: LD_INT 117
18149: PUSH
18150: LD_INT 118
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: PUSH
18165: EMPTY
18166: LIST
18167: LIST
18168: ST_TO_ADDR
18169: GO 20832
18171: LD_INT 6
18173: DOUBLE
18174: EQUAL
18175: IFTRUE 18179
18177: GO 18311
18179: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
18180: LD_ADDR_VAR 0 2
18184: PUSH
18185: LD_INT 2
18187: PUSH
18188: LD_INT 4
18190: PUSH
18191: LD_INT 5
18193: PUSH
18194: LD_INT 6
18196: PUSH
18197: LD_INT 8
18199: PUSH
18200: LD_INT 11
18202: PUSH
18203: LD_INT 12
18205: PUSH
18206: LD_INT 15
18208: PUSH
18209: LD_INT 16
18211: PUSH
18212: LD_INT 20
18214: PUSH
18215: LD_INT 21
18217: PUSH
18218: LD_INT 22
18220: PUSH
18221: LD_INT 23
18223: PUSH
18224: LD_INT 25
18226: PUSH
18227: LD_INT 26
18229: PUSH
18230: LD_INT 30
18232: PUSH
18233: LD_INT 31
18235: PUSH
18236: LD_INT 32
18238: PUSH
18239: LD_INT 36
18241: PUSH
18242: EMPTY
18243: LIST
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: LIST
18249: LIST
18250: LIST
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: PUSH
18263: LD_INT 101
18265: PUSH
18266: LD_INT 102
18268: PUSH
18269: LD_INT 105
18271: PUSH
18272: LD_INT 106
18274: PUSH
18275: LD_INT 108
18277: PUSH
18278: LD_INT 109
18280: PUSH
18281: LD_INT 112
18283: PUSH
18284: LD_INT 116
18286: PUSH
18287: LD_INT 117
18289: PUSH
18290: LD_INT 118
18292: PUSH
18293: EMPTY
18294: LIST
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: LIST
18300: LIST
18301: LIST
18302: LIST
18303: LIST
18304: PUSH
18305: EMPTY
18306: LIST
18307: LIST
18308: ST_TO_ADDR
18309: GO 20832
18311: LD_INT 7
18313: DOUBLE
18314: EQUAL
18315: IFTRUE 18319
18317: GO 18431
18319: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
18320: LD_ADDR_VAR 0 2
18324: PUSH
18325: LD_INT 2
18327: PUSH
18328: LD_INT 4
18330: PUSH
18331: LD_INT 5
18333: PUSH
18334: LD_INT 7
18336: PUSH
18337: LD_INT 11
18339: PUSH
18340: LD_INT 12
18342: PUSH
18343: LD_INT 15
18345: PUSH
18346: LD_INT 16
18348: PUSH
18349: LD_INT 20
18351: PUSH
18352: LD_INT 21
18354: PUSH
18355: LD_INT 22
18357: PUSH
18358: LD_INT 23
18360: PUSH
18361: LD_INT 25
18363: PUSH
18364: LD_INT 26
18366: PUSH
18367: EMPTY
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: LIST
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: LIST
18378: LIST
18379: LIST
18380: LIST
18381: LIST
18382: PUSH
18383: LD_INT 101
18385: PUSH
18386: LD_INT 102
18388: PUSH
18389: LD_INT 103
18391: PUSH
18392: LD_INT 105
18394: PUSH
18395: LD_INT 106
18397: PUSH
18398: LD_INT 108
18400: PUSH
18401: LD_INT 112
18403: PUSH
18404: LD_INT 116
18406: PUSH
18407: LD_INT 117
18409: PUSH
18410: LD_INT 118
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: LIST
18417: LIST
18418: LIST
18419: LIST
18420: LIST
18421: LIST
18422: LIST
18423: LIST
18424: PUSH
18425: EMPTY
18426: LIST
18427: LIST
18428: ST_TO_ADDR
18429: GO 20832
18431: LD_INT 8
18433: DOUBLE
18434: EQUAL
18435: IFTRUE 18439
18437: GO 18579
18439: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
18440: LD_ADDR_VAR 0 2
18444: PUSH
18445: LD_INT 2
18447: PUSH
18448: LD_INT 4
18450: PUSH
18451: LD_INT 5
18453: PUSH
18454: LD_INT 6
18456: PUSH
18457: LD_INT 7
18459: PUSH
18460: LD_INT 8
18462: PUSH
18463: LD_INT 11
18465: PUSH
18466: LD_INT 12
18468: PUSH
18469: LD_INT 15
18471: PUSH
18472: LD_INT 16
18474: PUSH
18475: LD_INT 20
18477: PUSH
18478: LD_INT 21
18480: PUSH
18481: LD_INT 22
18483: PUSH
18484: LD_INT 23
18486: PUSH
18487: LD_INT 25
18489: PUSH
18490: LD_INT 26
18492: PUSH
18493: LD_INT 30
18495: PUSH
18496: LD_INT 31
18498: PUSH
18499: LD_INT 32
18501: PUSH
18502: LD_INT 36
18504: PUSH
18505: EMPTY
18506: LIST
18507: LIST
18508: LIST
18509: LIST
18510: LIST
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: LIST
18516: LIST
18517: LIST
18518: LIST
18519: LIST
18520: LIST
18521: LIST
18522: LIST
18523: LIST
18524: LIST
18525: LIST
18526: PUSH
18527: LD_INT 101
18529: PUSH
18530: LD_INT 102
18532: PUSH
18533: LD_INT 103
18535: PUSH
18536: LD_INT 105
18538: PUSH
18539: LD_INT 106
18541: PUSH
18542: LD_INT 108
18544: PUSH
18545: LD_INT 109
18547: PUSH
18548: LD_INT 112
18550: PUSH
18551: LD_INT 116
18553: PUSH
18554: LD_INT 117
18556: PUSH
18557: LD_INT 118
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: PUSH
18573: EMPTY
18574: LIST
18575: LIST
18576: ST_TO_ADDR
18577: GO 20832
18579: LD_INT 9
18581: DOUBLE
18582: EQUAL
18583: IFTRUE 18587
18585: GO 18735
18587: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
18588: LD_ADDR_VAR 0 2
18592: PUSH
18593: LD_INT 2
18595: PUSH
18596: LD_INT 4
18598: PUSH
18599: LD_INT 5
18601: PUSH
18602: LD_INT 6
18604: PUSH
18605: LD_INT 7
18607: PUSH
18608: LD_INT 8
18610: PUSH
18611: LD_INT 11
18613: PUSH
18614: LD_INT 12
18616: PUSH
18617: LD_INT 15
18619: PUSH
18620: LD_INT 16
18622: PUSH
18623: LD_INT 20
18625: PUSH
18626: LD_INT 21
18628: PUSH
18629: LD_INT 22
18631: PUSH
18632: LD_INT 23
18634: PUSH
18635: LD_INT 25
18637: PUSH
18638: LD_INT 26
18640: PUSH
18641: LD_INT 28
18643: PUSH
18644: LD_INT 30
18646: PUSH
18647: LD_INT 31
18649: PUSH
18650: LD_INT 32
18652: PUSH
18653: LD_INT 36
18655: PUSH
18656: EMPTY
18657: LIST
18658: LIST
18659: LIST
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: LIST
18668: LIST
18669: LIST
18670: LIST
18671: LIST
18672: LIST
18673: LIST
18674: LIST
18675: LIST
18676: LIST
18677: LIST
18678: PUSH
18679: LD_INT 101
18681: PUSH
18682: LD_INT 102
18684: PUSH
18685: LD_INT 103
18687: PUSH
18688: LD_INT 105
18690: PUSH
18691: LD_INT 106
18693: PUSH
18694: LD_INT 108
18696: PUSH
18697: LD_INT 109
18699: PUSH
18700: LD_INT 112
18702: PUSH
18703: LD_INT 114
18705: PUSH
18706: LD_INT 116
18708: PUSH
18709: LD_INT 117
18711: PUSH
18712: LD_INT 118
18714: PUSH
18715: EMPTY
18716: LIST
18717: LIST
18718: LIST
18719: LIST
18720: LIST
18721: LIST
18722: LIST
18723: LIST
18724: LIST
18725: LIST
18726: LIST
18727: LIST
18728: PUSH
18729: EMPTY
18730: LIST
18731: LIST
18732: ST_TO_ADDR
18733: GO 20832
18735: LD_INT 10
18737: DOUBLE
18738: EQUAL
18739: IFTRUE 18743
18741: GO 18939
18743: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
18744: LD_ADDR_VAR 0 2
18748: PUSH
18749: LD_INT 2
18751: PUSH
18752: LD_INT 4
18754: PUSH
18755: LD_INT 5
18757: PUSH
18758: LD_INT 6
18760: PUSH
18761: LD_INT 7
18763: PUSH
18764: LD_INT 8
18766: PUSH
18767: LD_INT 9
18769: PUSH
18770: LD_INT 10
18772: PUSH
18773: LD_INT 11
18775: PUSH
18776: LD_INT 12
18778: PUSH
18779: LD_INT 13
18781: PUSH
18782: LD_INT 14
18784: PUSH
18785: LD_INT 15
18787: PUSH
18788: LD_INT 16
18790: PUSH
18791: LD_INT 17
18793: PUSH
18794: LD_INT 18
18796: PUSH
18797: LD_INT 19
18799: PUSH
18800: LD_INT 20
18802: PUSH
18803: LD_INT 21
18805: PUSH
18806: LD_INT 22
18808: PUSH
18809: LD_INT 23
18811: PUSH
18812: LD_INT 24
18814: PUSH
18815: LD_INT 25
18817: PUSH
18818: LD_INT 26
18820: PUSH
18821: LD_INT 28
18823: PUSH
18824: LD_INT 30
18826: PUSH
18827: LD_INT 31
18829: PUSH
18830: LD_INT 32
18832: PUSH
18833: LD_INT 36
18835: PUSH
18836: EMPTY
18837: LIST
18838: LIST
18839: LIST
18840: LIST
18841: LIST
18842: LIST
18843: LIST
18844: LIST
18845: LIST
18846: LIST
18847: LIST
18848: LIST
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: PUSH
18867: LD_INT 101
18869: PUSH
18870: LD_INT 102
18872: PUSH
18873: LD_INT 103
18875: PUSH
18876: LD_INT 104
18878: PUSH
18879: LD_INT 105
18881: PUSH
18882: LD_INT 106
18884: PUSH
18885: LD_INT 107
18887: PUSH
18888: LD_INT 108
18890: PUSH
18891: LD_INT 109
18893: PUSH
18894: LD_INT 110
18896: PUSH
18897: LD_INT 111
18899: PUSH
18900: LD_INT 112
18902: PUSH
18903: LD_INT 114
18905: PUSH
18906: LD_INT 116
18908: PUSH
18909: LD_INT 117
18911: PUSH
18912: LD_INT 118
18914: PUSH
18915: EMPTY
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: PUSH
18933: EMPTY
18934: LIST
18935: LIST
18936: ST_TO_ADDR
18937: GO 20832
18939: LD_INT 11
18941: DOUBLE
18942: EQUAL
18943: IFTRUE 18947
18945: GO 19151
18947: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
18948: LD_ADDR_VAR 0 2
18952: PUSH
18953: LD_INT 2
18955: PUSH
18956: LD_INT 3
18958: PUSH
18959: LD_INT 4
18961: PUSH
18962: LD_INT 5
18964: PUSH
18965: LD_INT 6
18967: PUSH
18968: LD_INT 7
18970: PUSH
18971: LD_INT 8
18973: PUSH
18974: LD_INT 9
18976: PUSH
18977: LD_INT 10
18979: PUSH
18980: LD_INT 11
18982: PUSH
18983: LD_INT 12
18985: PUSH
18986: LD_INT 13
18988: PUSH
18989: LD_INT 14
18991: PUSH
18992: LD_INT 15
18994: PUSH
18995: LD_INT 16
18997: PUSH
18998: LD_INT 17
19000: PUSH
19001: LD_INT 18
19003: PUSH
19004: LD_INT 19
19006: PUSH
19007: LD_INT 20
19009: PUSH
19010: LD_INT 21
19012: PUSH
19013: LD_INT 22
19015: PUSH
19016: LD_INT 23
19018: PUSH
19019: LD_INT 24
19021: PUSH
19022: LD_INT 25
19024: PUSH
19025: LD_INT 26
19027: PUSH
19028: LD_INT 28
19030: PUSH
19031: LD_INT 30
19033: PUSH
19034: LD_INT 31
19036: PUSH
19037: LD_INT 32
19039: PUSH
19040: LD_INT 34
19042: PUSH
19043: LD_INT 36
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: LIST
19050: LIST
19051: LIST
19052: LIST
19053: LIST
19054: LIST
19055: LIST
19056: LIST
19057: LIST
19058: LIST
19059: LIST
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: LIST
19065: LIST
19066: LIST
19067: LIST
19068: LIST
19069: LIST
19070: LIST
19071: LIST
19072: LIST
19073: LIST
19074: LIST
19075: LIST
19076: LIST
19077: LIST
19078: PUSH
19079: LD_INT 101
19081: PUSH
19082: LD_INT 102
19084: PUSH
19085: LD_INT 103
19087: PUSH
19088: LD_INT 104
19090: PUSH
19091: LD_INT 105
19093: PUSH
19094: LD_INT 106
19096: PUSH
19097: LD_INT 107
19099: PUSH
19100: LD_INT 108
19102: PUSH
19103: LD_INT 109
19105: PUSH
19106: LD_INT 110
19108: PUSH
19109: LD_INT 111
19111: PUSH
19112: LD_INT 112
19114: PUSH
19115: LD_INT 114
19117: PUSH
19118: LD_INT 116
19120: PUSH
19121: LD_INT 117
19123: PUSH
19124: LD_INT 118
19126: PUSH
19127: EMPTY
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: ST_TO_ADDR
19149: GO 20832
19151: LD_INT 12
19153: DOUBLE
19154: EQUAL
19155: IFTRUE 19159
19157: GO 19379
19159: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
19160: LD_ADDR_VAR 0 2
19164: PUSH
19165: LD_INT 1
19167: PUSH
19168: LD_INT 2
19170: PUSH
19171: LD_INT 3
19173: PUSH
19174: LD_INT 4
19176: PUSH
19177: LD_INT 5
19179: PUSH
19180: LD_INT 6
19182: PUSH
19183: LD_INT 7
19185: PUSH
19186: LD_INT 8
19188: PUSH
19189: LD_INT 9
19191: PUSH
19192: LD_INT 10
19194: PUSH
19195: LD_INT 11
19197: PUSH
19198: LD_INT 12
19200: PUSH
19201: LD_INT 13
19203: PUSH
19204: LD_INT 14
19206: PUSH
19207: LD_INT 15
19209: PUSH
19210: LD_INT 16
19212: PUSH
19213: LD_INT 17
19215: PUSH
19216: LD_INT 18
19218: PUSH
19219: LD_INT 19
19221: PUSH
19222: LD_INT 20
19224: PUSH
19225: LD_INT 21
19227: PUSH
19228: LD_INT 22
19230: PUSH
19231: LD_INT 23
19233: PUSH
19234: LD_INT 24
19236: PUSH
19237: LD_INT 25
19239: PUSH
19240: LD_INT 26
19242: PUSH
19243: LD_INT 27
19245: PUSH
19246: LD_INT 28
19248: PUSH
19249: LD_INT 30
19251: PUSH
19252: LD_INT 31
19254: PUSH
19255: LD_INT 32
19257: PUSH
19258: LD_INT 33
19260: PUSH
19261: LD_INT 34
19263: PUSH
19264: LD_INT 36
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: LIST
19277: LIST
19278: LIST
19279: LIST
19280: LIST
19281: LIST
19282: LIST
19283: LIST
19284: LIST
19285: LIST
19286: LIST
19287: LIST
19288: LIST
19289: LIST
19290: LIST
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: LIST
19300: LIST
19301: LIST
19302: PUSH
19303: LD_INT 101
19305: PUSH
19306: LD_INT 102
19308: PUSH
19309: LD_INT 103
19311: PUSH
19312: LD_INT 104
19314: PUSH
19315: LD_INT 105
19317: PUSH
19318: LD_INT 106
19320: PUSH
19321: LD_INT 107
19323: PUSH
19324: LD_INT 108
19326: PUSH
19327: LD_INT 109
19329: PUSH
19330: LD_INT 110
19332: PUSH
19333: LD_INT 111
19335: PUSH
19336: LD_INT 112
19338: PUSH
19339: LD_INT 113
19341: PUSH
19342: LD_INT 114
19344: PUSH
19345: LD_INT 116
19347: PUSH
19348: LD_INT 117
19350: PUSH
19351: LD_INT 118
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: LIST
19358: LIST
19359: LIST
19360: LIST
19361: LIST
19362: LIST
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: LIST
19368: LIST
19369: LIST
19370: LIST
19371: LIST
19372: PUSH
19373: EMPTY
19374: LIST
19375: LIST
19376: ST_TO_ADDR
19377: GO 20832
19379: LD_INT 13
19381: DOUBLE
19382: EQUAL
19383: IFTRUE 19387
19385: GO 19595
19387: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
19388: LD_ADDR_VAR 0 2
19392: PUSH
19393: LD_INT 1
19395: PUSH
19396: LD_INT 2
19398: PUSH
19399: LD_INT 3
19401: PUSH
19402: LD_INT 4
19404: PUSH
19405: LD_INT 5
19407: PUSH
19408: LD_INT 8
19410: PUSH
19411: LD_INT 9
19413: PUSH
19414: LD_INT 10
19416: PUSH
19417: LD_INT 11
19419: PUSH
19420: LD_INT 12
19422: PUSH
19423: LD_INT 14
19425: PUSH
19426: LD_INT 15
19428: PUSH
19429: LD_INT 16
19431: PUSH
19432: LD_INT 17
19434: PUSH
19435: LD_INT 18
19437: PUSH
19438: LD_INT 19
19440: PUSH
19441: LD_INT 20
19443: PUSH
19444: LD_INT 21
19446: PUSH
19447: LD_INT 22
19449: PUSH
19450: LD_INT 23
19452: PUSH
19453: LD_INT 24
19455: PUSH
19456: LD_INT 25
19458: PUSH
19459: LD_INT 26
19461: PUSH
19462: LD_INT 27
19464: PUSH
19465: LD_INT 28
19467: PUSH
19468: LD_INT 30
19470: PUSH
19471: LD_INT 31
19473: PUSH
19474: LD_INT 32
19476: PUSH
19477: LD_INT 33
19479: PUSH
19480: LD_INT 34
19482: PUSH
19483: LD_INT 36
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: LIST
19490: LIST
19491: LIST
19492: LIST
19493: LIST
19494: LIST
19495: LIST
19496: LIST
19497: LIST
19498: LIST
19499: LIST
19500: LIST
19501: LIST
19502: LIST
19503: LIST
19504: LIST
19505: LIST
19506: LIST
19507: LIST
19508: LIST
19509: LIST
19510: LIST
19511: LIST
19512: LIST
19513: LIST
19514: LIST
19515: LIST
19516: LIST
19517: LIST
19518: PUSH
19519: LD_INT 101
19521: PUSH
19522: LD_INT 102
19524: PUSH
19525: LD_INT 103
19527: PUSH
19528: LD_INT 104
19530: PUSH
19531: LD_INT 105
19533: PUSH
19534: LD_INT 106
19536: PUSH
19537: LD_INT 107
19539: PUSH
19540: LD_INT 108
19542: PUSH
19543: LD_INT 109
19545: PUSH
19546: LD_INT 110
19548: PUSH
19549: LD_INT 111
19551: PUSH
19552: LD_INT 112
19554: PUSH
19555: LD_INT 113
19557: PUSH
19558: LD_INT 114
19560: PUSH
19561: LD_INT 116
19563: PUSH
19564: LD_INT 117
19566: PUSH
19567: LD_INT 118
19569: PUSH
19570: EMPTY
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: PUSH
19589: EMPTY
19590: LIST
19591: LIST
19592: ST_TO_ADDR
19593: GO 20832
19595: LD_INT 14
19597: DOUBLE
19598: EQUAL
19599: IFTRUE 19603
19601: GO 19827
19603: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
19604: LD_ADDR_VAR 0 2
19608: PUSH
19609: LD_INT 1
19611: PUSH
19612: LD_INT 2
19614: PUSH
19615: LD_INT 3
19617: PUSH
19618: LD_INT 4
19620: PUSH
19621: LD_INT 5
19623: PUSH
19624: LD_INT 6
19626: PUSH
19627: LD_INT 7
19629: PUSH
19630: LD_INT 8
19632: PUSH
19633: LD_INT 9
19635: PUSH
19636: LD_INT 10
19638: PUSH
19639: LD_INT 11
19641: PUSH
19642: LD_INT 12
19644: PUSH
19645: LD_INT 13
19647: PUSH
19648: LD_INT 14
19650: PUSH
19651: LD_INT 15
19653: PUSH
19654: LD_INT 16
19656: PUSH
19657: LD_INT 17
19659: PUSH
19660: LD_INT 18
19662: PUSH
19663: LD_INT 19
19665: PUSH
19666: LD_INT 20
19668: PUSH
19669: LD_INT 21
19671: PUSH
19672: LD_INT 22
19674: PUSH
19675: LD_INT 23
19677: PUSH
19678: LD_INT 24
19680: PUSH
19681: LD_INT 25
19683: PUSH
19684: LD_INT 26
19686: PUSH
19687: LD_INT 27
19689: PUSH
19690: LD_INT 28
19692: PUSH
19693: LD_INT 29
19695: PUSH
19696: LD_INT 30
19698: PUSH
19699: LD_INT 31
19701: PUSH
19702: LD_INT 32
19704: PUSH
19705: LD_INT 33
19707: PUSH
19708: LD_INT 34
19710: PUSH
19711: LD_INT 36
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: LIST
19718: LIST
19719: LIST
19720: LIST
19721: LIST
19722: LIST
19723: LIST
19724: LIST
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: PUSH
19751: LD_INT 101
19753: PUSH
19754: LD_INT 102
19756: PUSH
19757: LD_INT 103
19759: PUSH
19760: LD_INT 104
19762: PUSH
19763: LD_INT 105
19765: PUSH
19766: LD_INT 106
19768: PUSH
19769: LD_INT 107
19771: PUSH
19772: LD_INT 108
19774: PUSH
19775: LD_INT 109
19777: PUSH
19778: LD_INT 110
19780: PUSH
19781: LD_INT 111
19783: PUSH
19784: LD_INT 112
19786: PUSH
19787: LD_INT 113
19789: PUSH
19790: LD_INT 114
19792: PUSH
19793: LD_INT 116
19795: PUSH
19796: LD_INT 117
19798: PUSH
19799: LD_INT 118
19801: PUSH
19802: EMPTY
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: LIST
19810: LIST
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: LIST
19817: LIST
19818: LIST
19819: LIST
19820: PUSH
19821: EMPTY
19822: LIST
19823: LIST
19824: ST_TO_ADDR
19825: GO 20832
19827: LD_INT 15
19829: DOUBLE
19830: EQUAL
19831: IFTRUE 19835
19833: GO 20059
19835: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
19836: LD_ADDR_VAR 0 2
19840: PUSH
19841: LD_INT 1
19843: PUSH
19844: LD_INT 2
19846: PUSH
19847: LD_INT 3
19849: PUSH
19850: LD_INT 4
19852: PUSH
19853: LD_INT 5
19855: PUSH
19856: LD_INT 6
19858: PUSH
19859: LD_INT 7
19861: PUSH
19862: LD_INT 8
19864: PUSH
19865: LD_INT 9
19867: PUSH
19868: LD_INT 10
19870: PUSH
19871: LD_INT 11
19873: PUSH
19874: LD_INT 12
19876: PUSH
19877: LD_INT 13
19879: PUSH
19880: LD_INT 14
19882: PUSH
19883: LD_INT 15
19885: PUSH
19886: LD_INT 16
19888: PUSH
19889: LD_INT 17
19891: PUSH
19892: LD_INT 18
19894: PUSH
19895: LD_INT 19
19897: PUSH
19898: LD_INT 20
19900: PUSH
19901: LD_INT 21
19903: PUSH
19904: LD_INT 22
19906: PUSH
19907: LD_INT 23
19909: PUSH
19910: LD_INT 24
19912: PUSH
19913: LD_INT 25
19915: PUSH
19916: LD_INT 26
19918: PUSH
19919: LD_INT 27
19921: PUSH
19922: LD_INT 28
19924: PUSH
19925: LD_INT 29
19927: PUSH
19928: LD_INT 30
19930: PUSH
19931: LD_INT 31
19933: PUSH
19934: LD_INT 32
19936: PUSH
19937: LD_INT 33
19939: PUSH
19940: LD_INT 34
19942: PUSH
19943: LD_INT 36
19945: PUSH
19946: EMPTY
19947: LIST
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: PUSH
19983: LD_INT 101
19985: PUSH
19986: LD_INT 102
19988: PUSH
19989: LD_INT 103
19991: PUSH
19992: LD_INT 104
19994: PUSH
19995: LD_INT 105
19997: PUSH
19998: LD_INT 106
20000: PUSH
20001: LD_INT 107
20003: PUSH
20004: LD_INT 108
20006: PUSH
20007: LD_INT 109
20009: PUSH
20010: LD_INT 110
20012: PUSH
20013: LD_INT 111
20015: PUSH
20016: LD_INT 112
20018: PUSH
20019: LD_INT 113
20021: PUSH
20022: LD_INT 114
20024: PUSH
20025: LD_INT 116
20027: PUSH
20028: LD_INT 117
20030: PUSH
20031: LD_INT 118
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: LIST
20040: LIST
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: LIST
20052: PUSH
20053: EMPTY
20054: LIST
20055: LIST
20056: ST_TO_ADDR
20057: GO 20832
20059: LD_INT 16
20061: DOUBLE
20062: EQUAL
20063: IFTRUE 20067
20065: GO 20203
20067: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
20068: LD_ADDR_VAR 0 2
20072: PUSH
20073: LD_INT 2
20075: PUSH
20076: LD_INT 4
20078: PUSH
20079: LD_INT 5
20081: PUSH
20082: LD_INT 7
20084: PUSH
20085: LD_INT 11
20087: PUSH
20088: LD_INT 12
20090: PUSH
20091: LD_INT 15
20093: PUSH
20094: LD_INT 16
20096: PUSH
20097: LD_INT 20
20099: PUSH
20100: LD_INT 21
20102: PUSH
20103: LD_INT 22
20105: PUSH
20106: LD_INT 23
20108: PUSH
20109: LD_INT 25
20111: PUSH
20112: LD_INT 26
20114: PUSH
20115: LD_INT 30
20117: PUSH
20118: LD_INT 31
20120: PUSH
20121: LD_INT 32
20123: PUSH
20124: LD_INT 33
20126: PUSH
20127: LD_INT 34
20129: PUSH
20130: EMPTY
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: PUSH
20151: LD_INT 101
20153: PUSH
20154: LD_INT 102
20156: PUSH
20157: LD_INT 103
20159: PUSH
20160: LD_INT 106
20162: PUSH
20163: LD_INT 108
20165: PUSH
20166: LD_INT 112
20168: PUSH
20169: LD_INT 113
20171: PUSH
20172: LD_INT 114
20174: PUSH
20175: LD_INT 116
20177: PUSH
20178: LD_INT 117
20180: PUSH
20181: LD_INT 118
20183: PUSH
20184: EMPTY
20185: LIST
20186: LIST
20187: LIST
20188: LIST
20189: LIST
20190: LIST
20191: LIST
20192: LIST
20193: LIST
20194: LIST
20195: LIST
20196: PUSH
20197: EMPTY
20198: LIST
20199: LIST
20200: ST_TO_ADDR
20201: GO 20832
20203: LD_INT 17
20205: DOUBLE
20206: EQUAL
20207: IFTRUE 20211
20209: GO 20435
20211: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
20212: LD_ADDR_VAR 0 2
20216: PUSH
20217: LD_INT 1
20219: PUSH
20220: LD_INT 2
20222: PUSH
20223: LD_INT 3
20225: PUSH
20226: LD_INT 4
20228: PUSH
20229: LD_INT 5
20231: PUSH
20232: LD_INT 6
20234: PUSH
20235: LD_INT 7
20237: PUSH
20238: LD_INT 8
20240: PUSH
20241: LD_INT 9
20243: PUSH
20244: LD_INT 10
20246: PUSH
20247: LD_INT 11
20249: PUSH
20250: LD_INT 12
20252: PUSH
20253: LD_INT 13
20255: PUSH
20256: LD_INT 14
20258: PUSH
20259: LD_INT 15
20261: PUSH
20262: LD_INT 16
20264: PUSH
20265: LD_INT 17
20267: PUSH
20268: LD_INT 18
20270: PUSH
20271: LD_INT 19
20273: PUSH
20274: LD_INT 20
20276: PUSH
20277: LD_INT 21
20279: PUSH
20280: LD_INT 22
20282: PUSH
20283: LD_INT 23
20285: PUSH
20286: LD_INT 24
20288: PUSH
20289: LD_INT 25
20291: PUSH
20292: LD_INT 26
20294: PUSH
20295: LD_INT 27
20297: PUSH
20298: LD_INT 28
20300: PUSH
20301: LD_INT 29
20303: PUSH
20304: LD_INT 30
20306: PUSH
20307: LD_INT 31
20309: PUSH
20310: LD_INT 32
20312: PUSH
20313: LD_INT 33
20315: PUSH
20316: LD_INT 34
20318: PUSH
20319: LD_INT 36
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: LIST
20326: LIST
20327: LIST
20328: LIST
20329: LIST
20330: LIST
20331: LIST
20332: LIST
20333: LIST
20334: LIST
20335: LIST
20336: LIST
20337: LIST
20338: LIST
20339: LIST
20340: LIST
20341: LIST
20342: LIST
20343: LIST
20344: LIST
20345: LIST
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: LIST
20355: LIST
20356: LIST
20357: LIST
20358: PUSH
20359: LD_INT 101
20361: PUSH
20362: LD_INT 102
20364: PUSH
20365: LD_INT 103
20367: PUSH
20368: LD_INT 104
20370: PUSH
20371: LD_INT 105
20373: PUSH
20374: LD_INT 106
20376: PUSH
20377: LD_INT 107
20379: PUSH
20380: LD_INT 108
20382: PUSH
20383: LD_INT 109
20385: PUSH
20386: LD_INT 110
20388: PUSH
20389: LD_INT 111
20391: PUSH
20392: LD_INT 112
20394: PUSH
20395: LD_INT 113
20397: PUSH
20398: LD_INT 114
20400: PUSH
20401: LD_INT 116
20403: PUSH
20404: LD_INT 117
20406: PUSH
20407: LD_INT 118
20409: PUSH
20410: EMPTY
20411: LIST
20412: LIST
20413: LIST
20414: LIST
20415: LIST
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: LIST
20421: LIST
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: ST_TO_ADDR
20433: GO 20832
20435: LD_INT 18
20437: DOUBLE
20438: EQUAL
20439: IFTRUE 20443
20441: GO 20591
20443: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
20444: LD_ADDR_VAR 0 2
20448: PUSH
20449: LD_INT 2
20451: PUSH
20452: LD_INT 4
20454: PUSH
20455: LD_INT 5
20457: PUSH
20458: LD_INT 7
20460: PUSH
20461: LD_INT 11
20463: PUSH
20464: LD_INT 12
20466: PUSH
20467: LD_INT 15
20469: PUSH
20470: LD_INT 16
20472: PUSH
20473: LD_INT 20
20475: PUSH
20476: LD_INT 21
20478: PUSH
20479: LD_INT 22
20481: PUSH
20482: LD_INT 23
20484: PUSH
20485: LD_INT 25
20487: PUSH
20488: LD_INT 26
20490: PUSH
20491: LD_INT 30
20493: PUSH
20494: LD_INT 31
20496: PUSH
20497: LD_INT 32
20499: PUSH
20500: LD_INT 33
20502: PUSH
20503: LD_INT 34
20505: PUSH
20506: LD_INT 35
20508: PUSH
20509: LD_INT 36
20511: PUSH
20512: EMPTY
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: PUSH
20535: LD_INT 101
20537: PUSH
20538: LD_INT 102
20540: PUSH
20541: LD_INT 103
20543: PUSH
20544: LD_INT 106
20546: PUSH
20547: LD_INT 108
20549: PUSH
20550: LD_INT 112
20552: PUSH
20553: LD_INT 113
20555: PUSH
20556: LD_INT 114
20558: PUSH
20559: LD_INT 115
20561: PUSH
20562: LD_INT 116
20564: PUSH
20565: LD_INT 117
20567: PUSH
20568: LD_INT 118
20570: PUSH
20571: EMPTY
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: PUSH
20585: EMPTY
20586: LIST
20587: LIST
20588: ST_TO_ADDR
20589: GO 20832
20591: LD_INT 19
20593: DOUBLE
20594: EQUAL
20595: IFTRUE 20599
20597: GO 20831
20599: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
20600: LD_ADDR_VAR 0 2
20604: PUSH
20605: LD_INT 1
20607: PUSH
20608: LD_INT 2
20610: PUSH
20611: LD_INT 3
20613: PUSH
20614: LD_INT 4
20616: PUSH
20617: LD_INT 5
20619: PUSH
20620: LD_INT 6
20622: PUSH
20623: LD_INT 7
20625: PUSH
20626: LD_INT 8
20628: PUSH
20629: LD_INT 9
20631: PUSH
20632: LD_INT 10
20634: PUSH
20635: LD_INT 11
20637: PUSH
20638: LD_INT 12
20640: PUSH
20641: LD_INT 13
20643: PUSH
20644: LD_INT 14
20646: PUSH
20647: LD_INT 15
20649: PUSH
20650: LD_INT 16
20652: PUSH
20653: LD_INT 17
20655: PUSH
20656: LD_INT 18
20658: PUSH
20659: LD_INT 19
20661: PUSH
20662: LD_INT 20
20664: PUSH
20665: LD_INT 21
20667: PUSH
20668: LD_INT 22
20670: PUSH
20671: LD_INT 23
20673: PUSH
20674: LD_INT 24
20676: PUSH
20677: LD_INT 25
20679: PUSH
20680: LD_INT 26
20682: PUSH
20683: LD_INT 27
20685: PUSH
20686: LD_INT 28
20688: PUSH
20689: LD_INT 29
20691: PUSH
20692: LD_INT 30
20694: PUSH
20695: LD_INT 31
20697: PUSH
20698: LD_INT 32
20700: PUSH
20701: LD_INT 33
20703: PUSH
20704: LD_INT 34
20706: PUSH
20707: LD_INT 35
20709: PUSH
20710: LD_INT 36
20712: PUSH
20713: EMPTY
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: LIST
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: PUSH
20751: LD_INT 101
20753: PUSH
20754: LD_INT 102
20756: PUSH
20757: LD_INT 103
20759: PUSH
20760: LD_INT 104
20762: PUSH
20763: LD_INT 105
20765: PUSH
20766: LD_INT 106
20768: PUSH
20769: LD_INT 107
20771: PUSH
20772: LD_INT 108
20774: PUSH
20775: LD_INT 109
20777: PUSH
20778: LD_INT 110
20780: PUSH
20781: LD_INT 111
20783: PUSH
20784: LD_INT 112
20786: PUSH
20787: LD_INT 113
20789: PUSH
20790: LD_INT 114
20792: PUSH
20793: LD_INT 115
20795: PUSH
20796: LD_INT 116
20798: PUSH
20799: LD_INT 117
20801: PUSH
20802: LD_INT 118
20804: PUSH
20805: EMPTY
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: PUSH
20825: EMPTY
20826: LIST
20827: LIST
20828: ST_TO_ADDR
20829: GO 20832
20831: POP
// end else
20832: GO 21063
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
20834: LD_ADDR_VAR 0 2
20838: PUSH
20839: LD_INT 1
20841: PUSH
20842: LD_INT 2
20844: PUSH
20845: LD_INT 3
20847: PUSH
20848: LD_INT 4
20850: PUSH
20851: LD_INT 5
20853: PUSH
20854: LD_INT 6
20856: PUSH
20857: LD_INT 7
20859: PUSH
20860: LD_INT 8
20862: PUSH
20863: LD_INT 9
20865: PUSH
20866: LD_INT 10
20868: PUSH
20869: LD_INT 11
20871: PUSH
20872: LD_INT 12
20874: PUSH
20875: LD_INT 13
20877: PUSH
20878: LD_INT 14
20880: PUSH
20881: LD_INT 15
20883: PUSH
20884: LD_INT 16
20886: PUSH
20887: LD_INT 17
20889: PUSH
20890: LD_INT 18
20892: PUSH
20893: LD_INT 19
20895: PUSH
20896: LD_INT 20
20898: PUSH
20899: LD_INT 21
20901: PUSH
20902: LD_INT 22
20904: PUSH
20905: LD_INT 23
20907: PUSH
20908: LD_INT 24
20910: PUSH
20911: LD_INT 25
20913: PUSH
20914: LD_INT 26
20916: PUSH
20917: LD_INT 27
20919: PUSH
20920: LD_INT 28
20922: PUSH
20923: LD_INT 29
20925: PUSH
20926: LD_INT 30
20928: PUSH
20929: LD_INT 31
20931: PUSH
20932: LD_INT 32
20934: PUSH
20935: LD_INT 33
20937: PUSH
20938: LD_INT 34
20940: PUSH
20941: LD_INT 35
20943: PUSH
20944: LD_INT 36
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: PUSH
20985: LD_INT 101
20987: PUSH
20988: LD_INT 102
20990: PUSH
20991: LD_INT 103
20993: PUSH
20994: LD_INT 104
20996: PUSH
20997: LD_INT 105
20999: PUSH
21000: LD_INT 106
21002: PUSH
21003: LD_INT 107
21005: PUSH
21006: LD_INT 108
21008: PUSH
21009: LD_INT 109
21011: PUSH
21012: LD_INT 110
21014: PUSH
21015: LD_INT 111
21017: PUSH
21018: LD_INT 112
21020: PUSH
21021: LD_INT 113
21023: PUSH
21024: LD_INT 114
21026: PUSH
21027: LD_INT 115
21029: PUSH
21030: LD_INT 116
21032: PUSH
21033: LD_INT 117
21035: PUSH
21036: LD_INT 118
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: PUSH
21059: EMPTY
21060: LIST
21061: LIST
21062: ST_TO_ADDR
// if result then
21063: LD_VAR 0 2
21067: IFFALSE 21853
// begin normal :=  ;
21069: LD_ADDR_VAR 0 5
21073: PUSH
21074: LD_STRING 
21076: ST_TO_ADDR
// hardcore :=  ;
21077: LD_ADDR_VAR 0 6
21081: PUSH
21082: LD_STRING 
21084: ST_TO_ADDR
// active :=  ;
21085: LD_ADDR_VAR 0 7
21089: PUSH
21090: LD_STRING 
21092: ST_TO_ADDR
// for i = 1 to normalCounter do
21093: LD_ADDR_VAR 0 8
21097: PUSH
21098: DOUBLE
21099: LD_INT 1
21101: DEC
21102: ST_TO_ADDR
21103: LD_EXP 42
21107: PUSH
21108: FOR_TO
21109: IFFALSE 21210
// begin tmp := 0 ;
21111: LD_ADDR_VAR 0 3
21115: PUSH
21116: LD_STRING 0
21118: ST_TO_ADDR
// if result [ 1 ] then
21119: LD_VAR 0 2
21123: PUSH
21124: LD_INT 1
21126: ARRAY
21127: IFFALSE 21192
// if result [ 1 ] [ 1 ] = i then
21129: LD_VAR 0 2
21133: PUSH
21134: LD_INT 1
21136: ARRAY
21137: PUSH
21138: LD_INT 1
21140: ARRAY
21141: PUSH
21142: LD_VAR 0 8
21146: EQUAL
21147: IFFALSE 21192
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
21149: LD_ADDR_VAR 0 2
21153: PUSH
21154: LD_VAR 0 2
21158: PPUSH
21159: LD_INT 1
21161: PPUSH
21162: LD_VAR 0 2
21166: PUSH
21167: LD_INT 1
21169: ARRAY
21170: PPUSH
21171: LD_INT 1
21173: PPUSH
21174: CALL_OW 3
21178: PPUSH
21179: CALL_OW 1
21183: ST_TO_ADDR
// tmp := 1 ;
21184: LD_ADDR_VAR 0 3
21188: PUSH
21189: LD_STRING 1
21191: ST_TO_ADDR
// end ; normal := normal & tmp ;
21192: LD_ADDR_VAR 0 5
21196: PUSH
21197: LD_VAR 0 5
21201: PUSH
21202: LD_VAR 0 3
21206: STR
21207: ST_TO_ADDR
// end ;
21208: GO 21108
21210: POP
21211: POP
// for i = 1 to hardcoreCounter do
21212: LD_ADDR_VAR 0 8
21216: PUSH
21217: DOUBLE
21218: LD_INT 1
21220: DEC
21221: ST_TO_ADDR
21222: LD_EXP 43
21226: PUSH
21227: FOR_TO
21228: IFFALSE 21333
// begin tmp := 0 ;
21230: LD_ADDR_VAR 0 3
21234: PUSH
21235: LD_STRING 0
21237: ST_TO_ADDR
// if result [ 2 ] then
21238: LD_VAR 0 2
21242: PUSH
21243: LD_INT 2
21245: ARRAY
21246: IFFALSE 21315
// if result [ 2 ] [ 1 ] = 100 + i then
21248: LD_VAR 0 2
21252: PUSH
21253: LD_INT 2
21255: ARRAY
21256: PUSH
21257: LD_INT 1
21259: ARRAY
21260: PUSH
21261: LD_INT 100
21263: PUSH
21264: LD_VAR 0 8
21268: PLUS
21269: EQUAL
21270: IFFALSE 21315
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
21272: LD_ADDR_VAR 0 2
21276: PUSH
21277: LD_VAR 0 2
21281: PPUSH
21282: LD_INT 2
21284: PPUSH
21285: LD_VAR 0 2
21289: PUSH
21290: LD_INT 2
21292: ARRAY
21293: PPUSH
21294: LD_INT 1
21296: PPUSH
21297: CALL_OW 3
21301: PPUSH
21302: CALL_OW 1
21306: ST_TO_ADDR
// tmp := 1 ;
21307: LD_ADDR_VAR 0 3
21311: PUSH
21312: LD_STRING 1
21314: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
21315: LD_ADDR_VAR 0 6
21319: PUSH
21320: LD_VAR 0 6
21324: PUSH
21325: LD_VAR 0 3
21329: STR
21330: ST_TO_ADDR
// end ;
21331: GO 21227
21333: POP
21334: POP
// if isGameLoad then
21335: LD_VAR 0 1
21339: IFFALSE 21814
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
21341: LD_ADDR_VAR 0 4
21345: PUSH
21346: LD_EXP 46
21350: PUSH
21351: LD_EXP 45
21355: PUSH
21356: LD_EXP 47
21360: PUSH
21361: LD_EXP 44
21365: PUSH
21366: LD_EXP 48
21370: PUSH
21371: LD_EXP 49
21375: PUSH
21376: LD_EXP 50
21380: PUSH
21381: LD_EXP 51
21385: PUSH
21386: LD_EXP 52
21390: PUSH
21391: LD_EXP 53
21395: PUSH
21396: LD_EXP 54
21400: PUSH
21401: LD_EXP 55
21405: PUSH
21406: LD_EXP 56
21410: PUSH
21411: LD_EXP 57
21415: PUSH
21416: LD_EXP 65
21420: PUSH
21421: LD_EXP 66
21425: PUSH
21426: LD_EXP 67
21430: PUSH
21431: LD_EXP 68
21435: PUSH
21436: LD_EXP 70
21440: PUSH
21441: LD_EXP 71
21445: PUSH
21446: LD_EXP 72
21450: PUSH
21451: LD_EXP 75
21455: PUSH
21456: LD_EXP 77
21460: PUSH
21461: LD_EXP 78
21465: PUSH
21466: LD_EXP 79
21470: PUSH
21471: LD_EXP 81
21475: PUSH
21476: LD_EXP 82
21480: PUSH
21481: LD_EXP 85
21485: PUSH
21486: LD_EXP 86
21490: PUSH
21491: LD_EXP 87
21495: PUSH
21496: LD_EXP 88
21500: PUSH
21501: LD_EXP 89
21505: PUSH
21506: LD_EXP 90
21510: PUSH
21511: LD_EXP 91
21515: PUSH
21516: LD_EXP 92
21520: PUSH
21521: LD_EXP 93
21525: PUSH
21526: LD_EXP 58
21530: PUSH
21531: LD_EXP 59
21535: PUSH
21536: LD_EXP 62
21540: PUSH
21541: LD_EXP 63
21545: PUSH
21546: LD_EXP 64
21550: PUSH
21551: LD_EXP 60
21555: PUSH
21556: LD_EXP 61
21560: PUSH
21561: LD_EXP 69
21565: PUSH
21566: LD_EXP 73
21570: PUSH
21571: LD_EXP 74
21575: PUSH
21576: LD_EXP 76
21580: PUSH
21581: LD_EXP 80
21585: PUSH
21586: LD_EXP 83
21590: PUSH
21591: LD_EXP 84
21595: PUSH
21596: LD_EXP 94
21600: PUSH
21601: LD_EXP 95
21605: PUSH
21606: LD_EXP 96
21610: PUSH
21611: LD_EXP 97
21615: PUSH
21616: EMPTY
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: ST_TO_ADDR
// tmp :=  ;
21672: LD_ADDR_VAR 0 3
21676: PUSH
21677: LD_STRING 
21679: ST_TO_ADDR
// for i = 1 to normalCounter do
21680: LD_ADDR_VAR 0 8
21684: PUSH
21685: DOUBLE
21686: LD_INT 1
21688: DEC
21689: ST_TO_ADDR
21690: LD_EXP 42
21694: PUSH
21695: FOR_TO
21696: IFFALSE 21732
// begin if flags [ i ] then
21698: LD_VAR 0 4
21702: PUSH
21703: LD_VAR 0 8
21707: ARRAY
21708: IFFALSE 21730
// tmp := tmp & i & ; ;
21710: LD_ADDR_VAR 0 3
21714: PUSH
21715: LD_VAR 0 3
21719: PUSH
21720: LD_VAR 0 8
21724: STR
21725: PUSH
21726: LD_STRING ;
21728: STR
21729: ST_TO_ADDR
// end ;
21730: GO 21695
21732: POP
21733: POP
// for i = 1 to hardcoreCounter do
21734: LD_ADDR_VAR 0 8
21738: PUSH
21739: DOUBLE
21740: LD_INT 1
21742: DEC
21743: ST_TO_ADDR
21744: LD_EXP 43
21748: PUSH
21749: FOR_TO
21750: IFFALSE 21796
// begin if flags [ normalCounter + i ] then
21752: LD_VAR 0 4
21756: PUSH
21757: LD_EXP 42
21761: PUSH
21762: LD_VAR 0 8
21766: PLUS
21767: ARRAY
21768: IFFALSE 21794
// tmp := tmp & ( 100 + i ) & ; ;
21770: LD_ADDR_VAR 0 3
21774: PUSH
21775: LD_VAR 0 3
21779: PUSH
21780: LD_INT 100
21782: PUSH
21783: LD_VAR 0 8
21787: PLUS
21788: STR
21789: PUSH
21790: LD_STRING ;
21792: STR
21793: ST_TO_ADDR
// end ;
21794: GO 21749
21796: POP
21797: POP
// if tmp then
21798: LD_VAR 0 3
21802: IFFALSE 21814
// active := tmp ;
21804: LD_ADDR_VAR 0 7
21808: PUSH
21809: LD_VAR 0 3
21813: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
21814: LD_STRING getStreamItemsFromMission("
21816: PUSH
21817: LD_VAR 0 5
21821: STR
21822: PUSH
21823: LD_STRING ","
21825: STR
21826: PUSH
21827: LD_VAR 0 6
21831: STR
21832: PUSH
21833: LD_STRING ","
21835: STR
21836: PUSH
21837: LD_VAR 0 7
21841: STR
21842: PUSH
21843: LD_STRING ")
21845: STR
21846: PPUSH
21847: CALL_OW 559
// end else
21851: GO 21860
// ToLua ( getStreamItemsFromMission("","","") ) ;
21853: LD_STRING getStreamItemsFromMission("","","")
21855: PPUSH
21856: CALL_OW 559
// end ;
21860: LD_VAR 0 2
21864: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
21865: LD_EXP 41
21869: IFFALSE 21877
21871: PUSH
21872: LD_EXP 46
21876: AND
21877: IFFALSE 22001
21879: GO 21881
21881: DISABLE
21882: LD_INT 0
21884: PPUSH
21885: PPUSH
// begin enable ;
21886: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
21887: LD_ADDR_VAR 0 2
21891: PUSH
21892: LD_INT 22
21894: PUSH
21895: LD_OWVAR 2
21899: PUSH
21900: EMPTY
21901: LIST
21902: LIST
21903: PUSH
21904: LD_INT 2
21906: PUSH
21907: LD_INT 34
21909: PUSH
21910: LD_INT 7
21912: PUSH
21913: EMPTY
21914: LIST
21915: LIST
21916: PUSH
21917: LD_INT 34
21919: PUSH
21920: LD_INT 45
21922: PUSH
21923: EMPTY
21924: LIST
21925: LIST
21926: PUSH
21927: LD_INT 34
21929: PUSH
21930: LD_INT 28
21932: PUSH
21933: EMPTY
21934: LIST
21935: LIST
21936: PUSH
21937: LD_INT 34
21939: PUSH
21940: LD_INT 47
21942: PUSH
21943: EMPTY
21944: LIST
21945: LIST
21946: PUSH
21947: EMPTY
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: PPUSH
21958: CALL_OW 69
21962: ST_TO_ADDR
// if not tmp then
21963: LD_VAR 0 2
21967: NOT
21968: IFFALSE 21972
// exit ;
21970: GO 22001
// for i in tmp do
21972: LD_ADDR_VAR 0 1
21976: PUSH
21977: LD_VAR 0 2
21981: PUSH
21982: FOR_IN
21983: IFFALSE 21999
// begin SetLives ( i , 0 ) ;
21985: LD_VAR 0 1
21989: PPUSH
21990: LD_INT 0
21992: PPUSH
21993: CALL_OW 234
// end ;
21997: GO 21982
21999: POP
22000: POP
// end ;
22001: PPOPN 2
22003: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
22004: LD_EXP 41
22008: IFFALSE 22016
22010: PUSH
22011: LD_EXP 47
22015: AND
22016: IFFALSE 22100
22018: GO 22020
22020: DISABLE
22021: LD_INT 0
22023: PPUSH
22024: PPUSH
// begin enable ;
22025: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
22026: LD_ADDR_VAR 0 2
22030: PUSH
22031: LD_INT 22
22033: PUSH
22034: LD_OWVAR 2
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: PUSH
22043: LD_INT 32
22045: PUSH
22046: LD_INT 3
22048: PUSH
22049: EMPTY
22050: LIST
22051: LIST
22052: PUSH
22053: EMPTY
22054: LIST
22055: LIST
22056: PPUSH
22057: CALL_OW 69
22061: ST_TO_ADDR
// if not tmp then
22062: LD_VAR 0 2
22066: NOT
22067: IFFALSE 22071
// exit ;
22069: GO 22100
// for i in tmp do
22071: LD_ADDR_VAR 0 1
22075: PUSH
22076: LD_VAR 0 2
22080: PUSH
22081: FOR_IN
22082: IFFALSE 22098
// begin SetLives ( i , 0 ) ;
22084: LD_VAR 0 1
22088: PPUSH
22089: LD_INT 0
22091: PPUSH
22092: CALL_OW 234
// end ;
22096: GO 22081
22098: POP
22099: POP
// end ;
22100: PPOPN 2
22102: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
22103: LD_EXP 41
22107: IFFALSE 22115
22109: PUSH
22110: LD_EXP 44
22114: AND
22115: IFFALSE 22208
22117: GO 22119
22119: DISABLE
22120: LD_INT 0
22122: PPUSH
// begin enable ;
22123: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
22124: LD_ADDR_VAR 0 1
22128: PUSH
22129: LD_INT 22
22131: PUSH
22132: LD_OWVAR 2
22136: PUSH
22137: EMPTY
22138: LIST
22139: LIST
22140: PUSH
22141: LD_INT 2
22143: PUSH
22144: LD_INT 25
22146: PUSH
22147: LD_INT 5
22149: PUSH
22150: EMPTY
22151: LIST
22152: LIST
22153: PUSH
22154: LD_INT 25
22156: PUSH
22157: LD_INT 9
22159: PUSH
22160: EMPTY
22161: LIST
22162: LIST
22163: PUSH
22164: LD_INT 25
22166: PUSH
22167: LD_INT 8
22169: PUSH
22170: EMPTY
22171: LIST
22172: LIST
22173: PUSH
22174: EMPTY
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: PUSH
22180: EMPTY
22181: LIST
22182: LIST
22183: PPUSH
22184: CALL_OW 69
22188: PUSH
22189: FOR_IN
22190: IFFALSE 22206
// begin SetClass ( i , 1 ) ;
22192: LD_VAR 0 1
22196: PPUSH
22197: LD_INT 1
22199: PPUSH
22200: CALL_OW 336
// end ;
22204: GO 22189
22206: POP
22207: POP
// end ;
22208: PPOPN 1
22210: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
22211: LD_EXP 41
22215: IFFALSE 22223
22217: PUSH
22218: LD_EXP 45
22222: AND
22223: IFFALSE 22235
22225: PUSH
22226: LD_OWVAR 65
22230: PUSH
22231: LD_INT 7
22233: LESS
22234: AND
22235: IFFALSE 22249
22237: GO 22239
22239: DISABLE
// begin enable ;
22240: ENABLE
// game_speed := 7 ;
22241: LD_ADDR_OWVAR 65
22245: PUSH
22246: LD_INT 7
22248: ST_TO_ADDR
// end ;
22249: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
22250: LD_EXP 41
22254: IFFALSE 22262
22256: PUSH
22257: LD_EXP 48
22261: AND
22262: IFFALSE 22464
22264: GO 22266
22266: DISABLE
22267: LD_INT 0
22269: PPUSH
22270: PPUSH
22271: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22272: LD_ADDR_VAR 0 3
22276: PUSH
22277: LD_INT 81
22279: PUSH
22280: LD_OWVAR 2
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PUSH
22289: LD_INT 21
22291: PUSH
22292: LD_INT 1
22294: PUSH
22295: EMPTY
22296: LIST
22297: LIST
22298: PUSH
22299: EMPTY
22300: LIST
22301: LIST
22302: PPUSH
22303: CALL_OW 69
22307: ST_TO_ADDR
// if not tmp then
22308: LD_VAR 0 3
22312: NOT
22313: IFFALSE 22317
// exit ;
22315: GO 22464
// if tmp > 5 then
22317: LD_VAR 0 3
22321: PUSH
22322: LD_INT 5
22324: GREATER
22325: IFFALSE 22337
// k := 5 else
22327: LD_ADDR_VAR 0 2
22331: PUSH
22332: LD_INT 5
22334: ST_TO_ADDR
22335: GO 22347
// k := tmp ;
22337: LD_ADDR_VAR 0 2
22341: PUSH
22342: LD_VAR 0 3
22346: ST_TO_ADDR
// for i := 1 to k do
22347: LD_ADDR_VAR 0 1
22351: PUSH
22352: DOUBLE
22353: LD_INT 1
22355: DEC
22356: ST_TO_ADDR
22357: LD_VAR 0 2
22361: PUSH
22362: FOR_TO
22363: IFFALSE 22462
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
22365: LD_VAR 0 3
22369: PUSH
22370: LD_VAR 0 1
22374: ARRAY
22375: PPUSH
22376: LD_VAR 0 1
22380: PUSH
22381: LD_INT 4
22383: MOD
22384: PUSH
22385: LD_INT 1
22387: PLUS
22388: PPUSH
22389: CALL_OW 259
22393: PUSH
22394: LD_INT 10
22396: LESS
22397: IFFALSE 22460
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
22399: LD_VAR 0 3
22403: PUSH
22404: LD_VAR 0 1
22408: ARRAY
22409: PPUSH
22410: LD_VAR 0 1
22414: PUSH
22415: LD_INT 4
22417: MOD
22418: PUSH
22419: LD_INT 1
22421: PLUS
22422: PPUSH
22423: LD_VAR 0 3
22427: PUSH
22428: LD_VAR 0 1
22432: ARRAY
22433: PPUSH
22434: LD_VAR 0 1
22438: PUSH
22439: LD_INT 4
22441: MOD
22442: PUSH
22443: LD_INT 1
22445: PLUS
22446: PPUSH
22447: CALL_OW 259
22451: PUSH
22452: LD_INT 1
22454: PLUS
22455: PPUSH
22456: CALL_OW 237
22460: GO 22362
22462: POP
22463: POP
// end ;
22464: PPOPN 3
22466: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
22467: LD_EXP 41
22471: IFFALSE 22479
22473: PUSH
22474: LD_EXP 49
22478: AND
22479: IFFALSE 22499
22481: GO 22483
22483: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
22484: LD_INT 4
22486: PPUSH
22487: LD_OWVAR 2
22491: PPUSH
22492: LD_INT 0
22494: PPUSH
22495: CALL_OW 324
22499: END
// every 0 0$1 trigger StreamModeActive and sShovel do
22500: LD_EXP 41
22504: IFFALSE 22512
22506: PUSH
22507: LD_EXP 78
22511: AND
22512: IFFALSE 22532
22514: GO 22516
22516: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
22517: LD_INT 19
22519: PPUSH
22520: LD_OWVAR 2
22524: PPUSH
22525: LD_INT 0
22527: PPUSH
22528: CALL_OW 324
22532: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
22533: LD_EXP 41
22537: IFFALSE 22545
22539: PUSH
22540: LD_EXP 50
22544: AND
22545: IFFALSE 22647
22547: GO 22549
22549: DISABLE
22550: LD_INT 0
22552: PPUSH
22553: PPUSH
// begin enable ;
22554: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
22555: LD_ADDR_VAR 0 2
22559: PUSH
22560: LD_INT 22
22562: PUSH
22563: LD_OWVAR 2
22567: PUSH
22568: EMPTY
22569: LIST
22570: LIST
22571: PUSH
22572: LD_INT 2
22574: PUSH
22575: LD_INT 34
22577: PUSH
22578: LD_INT 11
22580: PUSH
22581: EMPTY
22582: LIST
22583: LIST
22584: PUSH
22585: LD_INT 34
22587: PUSH
22588: LD_INT 30
22590: PUSH
22591: EMPTY
22592: LIST
22593: LIST
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: LIST
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PPUSH
22604: CALL_OW 69
22608: ST_TO_ADDR
// if not tmp then
22609: LD_VAR 0 2
22613: NOT
22614: IFFALSE 22618
// exit ;
22616: GO 22647
// for i in tmp do
22618: LD_ADDR_VAR 0 1
22622: PUSH
22623: LD_VAR 0 2
22627: PUSH
22628: FOR_IN
22629: IFFALSE 22645
// begin SetLives ( i , 0 ) ;
22631: LD_VAR 0 1
22635: PPUSH
22636: LD_INT 0
22638: PPUSH
22639: CALL_OW 234
// end ;
22643: GO 22628
22645: POP
22646: POP
// end ;
22647: PPOPN 2
22649: END
// every 0 0$1 trigger StreamModeActive and sBunker do
22650: LD_EXP 41
22654: IFFALSE 22662
22656: PUSH
22657: LD_EXP 51
22661: AND
22662: IFFALSE 22682
22664: GO 22666
22666: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
22667: LD_INT 32
22669: PPUSH
22670: LD_OWVAR 2
22674: PPUSH
22675: LD_INT 0
22677: PPUSH
22678: CALL_OW 324
22682: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
22683: LD_EXP 41
22687: IFFALSE 22695
22689: PUSH
22690: LD_EXP 52
22694: AND
22695: IFFALSE 22878
22697: GO 22699
22699: DISABLE
22700: LD_INT 0
22702: PPUSH
22703: PPUSH
22704: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
22705: LD_ADDR_VAR 0 2
22709: PUSH
22710: LD_INT 22
22712: PUSH
22713: LD_OWVAR 2
22717: PUSH
22718: EMPTY
22719: LIST
22720: LIST
22721: PUSH
22722: LD_INT 33
22724: PUSH
22725: LD_INT 3
22727: PUSH
22728: EMPTY
22729: LIST
22730: LIST
22731: PUSH
22732: EMPTY
22733: LIST
22734: LIST
22735: PPUSH
22736: CALL_OW 69
22740: ST_TO_ADDR
// if not tmp then
22741: LD_VAR 0 2
22745: NOT
22746: IFFALSE 22750
// exit ;
22748: GO 22878
// side := 0 ;
22750: LD_ADDR_VAR 0 3
22754: PUSH
22755: LD_INT 0
22757: ST_TO_ADDR
// for i := 1 to 8 do
22758: LD_ADDR_VAR 0 1
22762: PUSH
22763: DOUBLE
22764: LD_INT 1
22766: DEC
22767: ST_TO_ADDR
22768: LD_INT 8
22770: PUSH
22771: FOR_TO
22772: IFFALSE 22822
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
22774: LD_OWVAR 2
22778: PUSH
22779: LD_VAR 0 1
22783: NONEQUAL
22784: IFFALSE 22806
22786: PUSH
22787: LD_OWVAR 2
22791: PPUSH
22792: LD_VAR 0 1
22796: PPUSH
22797: CALL_OW 81
22801: PUSH
22802: LD_INT 2
22804: EQUAL
22805: AND
22806: IFFALSE 22820
// begin side := i ;
22808: LD_ADDR_VAR 0 3
22812: PUSH
22813: LD_VAR 0 1
22817: ST_TO_ADDR
// break ;
22818: GO 22822
// end ;
22820: GO 22771
22822: POP
22823: POP
// if not side then
22824: LD_VAR 0 3
22828: NOT
22829: IFFALSE 22833
// exit ;
22831: GO 22878
// for i := 1 to tmp do
22833: LD_ADDR_VAR 0 1
22837: PUSH
22838: DOUBLE
22839: LD_INT 1
22841: DEC
22842: ST_TO_ADDR
22843: LD_VAR 0 2
22847: PUSH
22848: FOR_TO
22849: IFFALSE 22876
// if Prob ( 60 ) then
22851: LD_INT 60
22853: PPUSH
22854: CALL_OW 13
22858: IFFALSE 22874
// SetSide ( i , side ) ;
22860: LD_VAR 0 1
22864: PPUSH
22865: LD_VAR 0 3
22869: PPUSH
22870: CALL_OW 235
22874: GO 22848
22876: POP
22877: POP
// end ;
22878: PPOPN 3
22880: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
22881: LD_EXP 41
22885: IFFALSE 22893
22887: PUSH
22888: LD_EXP 54
22892: AND
22893: IFFALSE 23012
22895: GO 22897
22897: DISABLE
22898: LD_INT 0
22900: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
22901: LD_ADDR_VAR 0 1
22905: PUSH
22906: LD_INT 22
22908: PUSH
22909: LD_OWVAR 2
22913: PUSH
22914: EMPTY
22915: LIST
22916: LIST
22917: PUSH
22918: LD_INT 21
22920: PUSH
22921: LD_INT 1
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: PUSH
22928: LD_INT 3
22930: PUSH
22931: LD_INT 23
22933: PUSH
22934: LD_INT 0
22936: PUSH
22937: EMPTY
22938: LIST
22939: LIST
22940: PUSH
22941: EMPTY
22942: LIST
22943: LIST
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: LIST
22949: PPUSH
22950: CALL_OW 69
22954: PUSH
22955: FOR_IN
22956: IFFALSE 23010
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
22958: LD_VAR 0 1
22962: PPUSH
22963: CALL_OW 257
22967: PUSH
22968: LD_INT 1
22970: PUSH
22971: LD_INT 2
22973: PUSH
22974: LD_INT 3
22976: PUSH
22977: LD_INT 4
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: IN
22986: IFFALSE 23008
// SetClass ( un , rand ( 1 , 4 ) ) ;
22988: LD_VAR 0 1
22992: PPUSH
22993: LD_INT 1
22995: PPUSH
22996: LD_INT 4
22998: PPUSH
22999: CALL_OW 12
23003: PPUSH
23004: CALL_OW 336
23008: GO 22955
23010: POP
23011: POP
// end ;
23012: PPOPN 1
23014: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
23015: LD_EXP 41
23019: IFFALSE 23027
23021: PUSH
23022: LD_EXP 53
23026: AND
23027: IFFALSE 23106
23029: GO 23031
23031: DISABLE
23032: LD_INT 0
23034: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23035: LD_ADDR_VAR 0 1
23039: PUSH
23040: LD_INT 22
23042: PUSH
23043: LD_OWVAR 2
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: PUSH
23052: LD_INT 21
23054: PUSH
23055: LD_INT 3
23057: PUSH
23058: EMPTY
23059: LIST
23060: LIST
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: PPUSH
23066: CALL_OW 69
23070: ST_TO_ADDR
// if not tmp then
23071: LD_VAR 0 1
23075: NOT
23076: IFFALSE 23080
// exit ;
23078: GO 23106
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
23080: LD_VAR 0 1
23084: PUSH
23085: LD_INT 1
23087: PPUSH
23088: LD_VAR 0 1
23092: PPUSH
23093: CALL_OW 12
23097: ARRAY
23098: PPUSH
23099: LD_INT 100
23101: PPUSH
23102: CALL_OW 234
// end ;
23106: PPOPN 1
23108: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
23109: LD_EXP 41
23113: IFFALSE 23121
23115: PUSH
23116: LD_EXP 55
23120: AND
23121: IFFALSE 23219
23123: GO 23125
23125: DISABLE
23126: LD_INT 0
23128: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23129: LD_ADDR_VAR 0 1
23133: PUSH
23134: LD_INT 22
23136: PUSH
23137: LD_OWVAR 2
23141: PUSH
23142: EMPTY
23143: LIST
23144: LIST
23145: PUSH
23146: LD_INT 21
23148: PUSH
23149: LD_INT 1
23151: PUSH
23152: EMPTY
23153: LIST
23154: LIST
23155: PUSH
23156: EMPTY
23157: LIST
23158: LIST
23159: PPUSH
23160: CALL_OW 69
23164: ST_TO_ADDR
// if not tmp then
23165: LD_VAR 0 1
23169: NOT
23170: IFFALSE 23174
// exit ;
23172: GO 23219
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
23174: LD_VAR 0 1
23178: PUSH
23179: LD_INT 1
23181: PPUSH
23182: LD_VAR 0 1
23186: PPUSH
23187: CALL_OW 12
23191: ARRAY
23192: PPUSH
23193: LD_INT 1
23195: PPUSH
23196: LD_INT 4
23198: PPUSH
23199: CALL_OW 12
23203: PPUSH
23204: LD_INT 3000
23206: PPUSH
23207: LD_INT 9000
23209: PPUSH
23210: CALL_OW 12
23214: PPUSH
23215: CALL_OW 492
// end ;
23219: PPOPN 1
23221: END
// every 0 0$1 trigger StreamModeActive and sDepot do
23222: LD_EXP 41
23226: IFFALSE 23234
23228: PUSH
23229: LD_EXP 56
23233: AND
23234: IFFALSE 23254
23236: GO 23238
23238: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
23239: LD_INT 1
23241: PPUSH
23242: LD_OWVAR 2
23246: PPUSH
23247: LD_INT 0
23249: PPUSH
23250: CALL_OW 324
23254: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
23255: LD_EXP 41
23259: IFFALSE 23267
23261: PUSH
23262: LD_EXP 57
23266: AND
23267: IFFALSE 23350
23269: GO 23271
23271: DISABLE
23272: LD_INT 0
23274: PPUSH
23275: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23276: LD_ADDR_VAR 0 2
23280: PUSH
23281: LD_INT 22
23283: PUSH
23284: LD_OWVAR 2
23288: PUSH
23289: EMPTY
23290: LIST
23291: LIST
23292: PUSH
23293: LD_INT 21
23295: PUSH
23296: LD_INT 3
23298: PUSH
23299: EMPTY
23300: LIST
23301: LIST
23302: PUSH
23303: EMPTY
23304: LIST
23305: LIST
23306: PPUSH
23307: CALL_OW 69
23311: ST_TO_ADDR
// if not tmp then
23312: LD_VAR 0 2
23316: NOT
23317: IFFALSE 23321
// exit ;
23319: GO 23350
// for i in tmp do
23321: LD_ADDR_VAR 0 1
23325: PUSH
23326: LD_VAR 0 2
23330: PUSH
23331: FOR_IN
23332: IFFALSE 23348
// SetBLevel ( i , 10 ) ;
23334: LD_VAR 0 1
23338: PPUSH
23339: LD_INT 10
23341: PPUSH
23342: CALL_OW 241
23346: GO 23331
23348: POP
23349: POP
// end ;
23350: PPOPN 2
23352: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
23353: LD_EXP 41
23357: IFFALSE 23365
23359: PUSH
23360: LD_EXP 58
23364: AND
23365: IFFALSE 23476
23367: GO 23369
23369: DISABLE
23370: LD_INT 0
23372: PPUSH
23373: PPUSH
23374: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23375: LD_ADDR_VAR 0 3
23379: PUSH
23380: LD_INT 22
23382: PUSH
23383: LD_OWVAR 2
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: PUSH
23392: LD_INT 25
23394: PUSH
23395: LD_INT 1
23397: PUSH
23398: EMPTY
23399: LIST
23400: LIST
23401: PUSH
23402: EMPTY
23403: LIST
23404: LIST
23405: PPUSH
23406: CALL_OW 69
23410: ST_TO_ADDR
// if not tmp then
23411: LD_VAR 0 3
23415: NOT
23416: IFFALSE 23420
// exit ;
23418: GO 23476
// un := tmp [ rand ( 1 , tmp ) ] ;
23420: LD_ADDR_VAR 0 2
23424: PUSH
23425: LD_VAR 0 3
23429: PUSH
23430: LD_INT 1
23432: PPUSH
23433: LD_VAR 0 3
23437: PPUSH
23438: CALL_OW 12
23442: ARRAY
23443: ST_TO_ADDR
// if Crawls ( un ) then
23444: LD_VAR 0 2
23448: PPUSH
23449: CALL_OW 318
23453: IFFALSE 23464
// ComWalk ( un ) ;
23455: LD_VAR 0 2
23459: PPUSH
23460: CALL_OW 138
// SetClass ( un , class_sniper ) ;
23464: LD_VAR 0 2
23468: PPUSH
23469: LD_INT 5
23471: PPUSH
23472: CALL_OW 336
// end ;
23476: PPOPN 3
23478: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
23479: LD_EXP 41
23483: IFFALSE 23491
23485: PUSH
23486: LD_EXP 59
23490: AND
23491: IFFALSE 23503
23493: PUSH
23494: LD_OWVAR 67
23498: PUSH
23499: LD_INT 4
23501: LESS
23502: AND
23503: IFFALSE 23522
23505: GO 23507
23507: DISABLE
// begin Difficulty := Difficulty + 1 ;
23508: LD_ADDR_OWVAR 67
23512: PUSH
23513: LD_OWVAR 67
23517: PUSH
23518: LD_INT 1
23520: PLUS
23521: ST_TO_ADDR
// end ;
23522: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
23523: LD_EXP 41
23527: IFFALSE 23535
23529: PUSH
23530: LD_EXP 60
23534: AND
23535: IFFALSE 23638
23537: GO 23539
23539: DISABLE
23540: LD_INT 0
23542: PPUSH
// begin for i := 1 to 5 do
23543: LD_ADDR_VAR 0 1
23547: PUSH
23548: DOUBLE
23549: LD_INT 1
23551: DEC
23552: ST_TO_ADDR
23553: LD_INT 5
23555: PUSH
23556: FOR_TO
23557: IFFALSE 23636
// begin uc_nation := nation_nature ;
23559: LD_ADDR_OWVAR 21
23563: PUSH
23564: LD_INT 0
23566: ST_TO_ADDR
// uc_side := 0 ;
23567: LD_ADDR_OWVAR 20
23571: PUSH
23572: LD_INT 0
23574: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23575: LD_ADDR_OWVAR 29
23579: PUSH
23580: LD_INT 12
23582: PUSH
23583: LD_INT 12
23585: PUSH
23586: EMPTY
23587: LIST
23588: LIST
23589: ST_TO_ADDR
// hc_agressivity := 20 ;
23590: LD_ADDR_OWVAR 35
23594: PUSH
23595: LD_INT 20
23597: ST_TO_ADDR
// hc_class := class_tiger ;
23598: LD_ADDR_OWVAR 28
23602: PUSH
23603: LD_INT 14
23605: ST_TO_ADDR
// hc_gallery :=  ;
23606: LD_ADDR_OWVAR 33
23610: PUSH
23611: LD_STRING 
23613: ST_TO_ADDR
// hc_name :=  ;
23614: LD_ADDR_OWVAR 26
23618: PUSH
23619: LD_STRING 
23621: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
23622: CALL_OW 44
23626: PPUSH
23627: LD_INT 0
23629: PPUSH
23630: CALL_OW 51
// end ;
23634: GO 23556
23636: POP
23637: POP
// end ;
23638: PPOPN 1
23640: END
// every 0 0$1 trigger StreamModeActive and sBomb do
23641: LD_EXP 41
23645: IFFALSE 23653
23647: PUSH
23648: LD_EXP 61
23652: AND
23653: IFFALSE 23662
23655: GO 23657
23657: DISABLE
// StreamSibBomb ;
23658: CALL 23663 0 0
23662: END
// export function StreamSibBomb ; var i , x , y ; begin
23663: LD_INT 0
23665: PPUSH
23666: PPUSH
23667: PPUSH
23668: PPUSH
// result := false ;
23669: LD_ADDR_VAR 0 1
23673: PUSH
23674: LD_INT 0
23676: ST_TO_ADDR
// for i := 1 to 16 do
23677: LD_ADDR_VAR 0 2
23681: PUSH
23682: DOUBLE
23683: LD_INT 1
23685: DEC
23686: ST_TO_ADDR
23687: LD_INT 16
23689: PUSH
23690: FOR_TO
23691: IFFALSE 23890
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23693: LD_ADDR_VAR 0 3
23697: PUSH
23698: LD_INT 10
23700: PUSH
23701: LD_INT 20
23703: PUSH
23704: LD_INT 30
23706: PUSH
23707: LD_INT 40
23709: PUSH
23710: LD_INT 50
23712: PUSH
23713: LD_INT 60
23715: PUSH
23716: LD_INT 70
23718: PUSH
23719: LD_INT 80
23721: PUSH
23722: LD_INT 90
23724: PUSH
23725: LD_INT 100
23727: PUSH
23728: LD_INT 110
23730: PUSH
23731: LD_INT 120
23733: PUSH
23734: LD_INT 130
23736: PUSH
23737: LD_INT 140
23739: PUSH
23740: LD_INT 150
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: PUSH
23760: LD_INT 1
23762: PPUSH
23763: LD_INT 15
23765: PPUSH
23766: CALL_OW 12
23770: ARRAY
23771: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23772: LD_ADDR_VAR 0 4
23776: PUSH
23777: LD_INT 10
23779: PUSH
23780: LD_INT 20
23782: PUSH
23783: LD_INT 30
23785: PUSH
23786: LD_INT 40
23788: PUSH
23789: LD_INT 50
23791: PUSH
23792: LD_INT 60
23794: PUSH
23795: LD_INT 70
23797: PUSH
23798: LD_INT 80
23800: PUSH
23801: LD_INT 90
23803: PUSH
23804: LD_INT 100
23806: PUSH
23807: LD_INT 110
23809: PUSH
23810: LD_INT 120
23812: PUSH
23813: LD_INT 130
23815: PUSH
23816: LD_INT 140
23818: PUSH
23819: LD_INT 150
23821: PUSH
23822: EMPTY
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: PUSH
23839: LD_INT 1
23841: PPUSH
23842: LD_INT 15
23844: PPUSH
23845: CALL_OW 12
23849: ARRAY
23850: ST_TO_ADDR
// if ValidHex ( x , y ) then
23851: LD_VAR 0 3
23855: PPUSH
23856: LD_VAR 0 4
23860: PPUSH
23861: CALL_OW 488
23865: IFFALSE 23888
// begin result := [ x , y ] ;
23867: LD_ADDR_VAR 0 1
23871: PUSH
23872: LD_VAR 0 3
23876: PUSH
23877: LD_VAR 0 4
23881: PUSH
23882: EMPTY
23883: LIST
23884: LIST
23885: ST_TO_ADDR
// break ;
23886: GO 23890
// end ; end ;
23888: GO 23690
23890: POP
23891: POP
// if result then
23892: LD_VAR 0 1
23896: IFFALSE 23956
// begin ToLua ( playSibBomb() ) ;
23898: LD_STRING playSibBomb()
23900: PPUSH
23901: CALL_OW 559
// wait ( 0 0$14 ) ;
23905: LD_INT 490
23907: PPUSH
23908: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
23912: LD_VAR 0 1
23916: PUSH
23917: LD_INT 1
23919: ARRAY
23920: PPUSH
23921: LD_VAR 0 1
23925: PUSH
23926: LD_INT 2
23928: ARRAY
23929: PPUSH
23930: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
23934: LD_VAR 0 1
23938: PUSH
23939: LD_INT 1
23941: ARRAY
23942: PPUSH
23943: LD_VAR 0 1
23947: PUSH
23948: LD_INT 2
23950: ARRAY
23951: PPUSH
23952: CALL_OW 429
// end ; end ;
23956: LD_VAR 0 1
23960: RET
// every 0 0$1 trigger StreamModeActive and sReset do
23961: LD_EXP 41
23965: IFFALSE 23973
23967: PUSH
23968: LD_EXP 63
23972: AND
23973: IFFALSE 23985
23975: GO 23977
23977: DISABLE
// YouLost (  ) ;
23978: LD_STRING 
23980: PPUSH
23981: CALL_OW 104
23985: END
// every 0 0$1 trigger StreamModeActive and sFog do
23986: LD_EXP 41
23990: IFFALSE 23998
23992: PUSH
23993: LD_EXP 62
23997: AND
23998: IFFALSE 24012
24000: GO 24002
24002: DISABLE
// FogOff ( your_side ) ;
24003: LD_OWVAR 2
24007: PPUSH
24008: CALL_OW 344
24012: END
// every 0 0$1 trigger StreamModeActive and sSun do
24013: LD_EXP 41
24017: IFFALSE 24025
24019: PUSH
24020: LD_EXP 64
24024: AND
24025: IFFALSE 24053
24027: GO 24029
24029: DISABLE
// begin solar_recharge_percent := 0 ;
24030: LD_ADDR_OWVAR 79
24034: PUSH
24035: LD_INT 0
24037: ST_TO_ADDR
// wait ( 5 5$00 ) ;
24038: LD_INT 10500
24040: PPUSH
24041: CALL_OW 67
// solar_recharge_percent := 100 ;
24045: LD_ADDR_OWVAR 79
24049: PUSH
24050: LD_INT 100
24052: ST_TO_ADDR
// end ;
24053: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
24054: LD_EXP 41
24058: IFFALSE 24066
24060: PUSH
24061: LD_EXP 65
24065: AND
24066: IFFALSE 24305
24068: GO 24070
24070: DISABLE
24071: LD_INT 0
24073: PPUSH
24074: PPUSH
24075: PPUSH
// begin tmp := [ ] ;
24076: LD_ADDR_VAR 0 3
24080: PUSH
24081: EMPTY
24082: ST_TO_ADDR
// for i := 1 to 6 do
24083: LD_ADDR_VAR 0 1
24087: PUSH
24088: DOUBLE
24089: LD_INT 1
24091: DEC
24092: ST_TO_ADDR
24093: LD_INT 6
24095: PUSH
24096: FOR_TO
24097: IFFALSE 24202
// begin uc_nation := nation_nature ;
24099: LD_ADDR_OWVAR 21
24103: PUSH
24104: LD_INT 0
24106: ST_TO_ADDR
// uc_side := 0 ;
24107: LD_ADDR_OWVAR 20
24111: PUSH
24112: LD_INT 0
24114: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24115: LD_ADDR_OWVAR 29
24119: PUSH
24120: LD_INT 12
24122: PUSH
24123: LD_INT 12
24125: PUSH
24126: EMPTY
24127: LIST
24128: LIST
24129: ST_TO_ADDR
// hc_agressivity := 20 ;
24130: LD_ADDR_OWVAR 35
24134: PUSH
24135: LD_INT 20
24137: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
24138: LD_ADDR_OWVAR 28
24142: PUSH
24143: LD_INT 17
24145: ST_TO_ADDR
// hc_gallery :=  ;
24146: LD_ADDR_OWVAR 33
24150: PUSH
24151: LD_STRING 
24153: ST_TO_ADDR
// hc_name :=  ;
24154: LD_ADDR_OWVAR 26
24158: PUSH
24159: LD_STRING 
24161: ST_TO_ADDR
// un := CreateHuman ;
24162: LD_ADDR_VAR 0 2
24166: PUSH
24167: CALL_OW 44
24171: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
24172: LD_VAR 0 2
24176: PPUSH
24177: LD_INT 1
24179: PPUSH
24180: CALL_OW 51
// tmp := tmp ^ un ;
24184: LD_ADDR_VAR 0 3
24188: PUSH
24189: LD_VAR 0 3
24193: PUSH
24194: LD_VAR 0 2
24198: ADD
24199: ST_TO_ADDR
// end ;
24200: GO 24096
24202: POP
24203: POP
// repeat wait ( 0 0$1 ) ;
24204: LD_INT 35
24206: PPUSH
24207: CALL_OW 67
// for un in tmp do
24211: LD_ADDR_VAR 0 2
24215: PUSH
24216: LD_VAR 0 3
24220: PUSH
24221: FOR_IN
24222: IFFALSE 24296
// begin if IsDead ( un ) then
24224: LD_VAR 0 2
24228: PPUSH
24229: CALL_OW 301
24233: IFFALSE 24253
// begin tmp := tmp diff un ;
24235: LD_ADDR_VAR 0 3
24239: PUSH
24240: LD_VAR 0 3
24244: PUSH
24245: LD_VAR 0 2
24249: DIFF
24250: ST_TO_ADDR
// continue ;
24251: GO 24221
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
24253: LD_VAR 0 2
24257: PPUSH
24258: LD_INT 3
24260: PUSH
24261: LD_INT 22
24263: PUSH
24264: LD_INT 0
24266: PUSH
24267: EMPTY
24268: LIST
24269: LIST
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: PPUSH
24275: CALL_OW 69
24279: PPUSH
24280: LD_VAR 0 2
24284: PPUSH
24285: CALL_OW 74
24289: PPUSH
24290: CALL_OW 115
// end ;
24294: GO 24221
24296: POP
24297: POP
// until not tmp ;
24298: LD_VAR 0 3
24302: NOT
24303: IFFALSE 24204
// end ;
24305: PPOPN 3
24307: END
// every 0 0$1 trigger StreamModeActive and sTroll do
24308: LD_EXP 41
24312: IFFALSE 24320
24314: PUSH
24315: LD_EXP 66
24319: AND
24320: IFFALSE 24374
24322: GO 24324
24324: DISABLE
// begin ToLua ( displayTroll(); ) ;
24325: LD_STRING displayTroll();
24327: PPUSH
24328: CALL_OW 559
// wait ( 3 3$00 ) ;
24332: LD_INT 6300
24334: PPUSH
24335: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24339: LD_STRING hideTroll();
24341: PPUSH
24342: CALL_OW 559
// wait ( 1 1$00 ) ;
24346: LD_INT 2100
24348: PPUSH
24349: CALL_OW 67
// ToLua ( displayTroll(); ) ;
24353: LD_STRING displayTroll();
24355: PPUSH
24356: CALL_OW 559
// wait ( 1 1$00 ) ;
24360: LD_INT 2100
24362: PPUSH
24363: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24367: LD_STRING hideTroll();
24369: PPUSH
24370: CALL_OW 559
// end ;
24374: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
24375: LD_EXP 41
24379: IFFALSE 24387
24381: PUSH
24382: LD_EXP 67
24386: AND
24387: IFFALSE 24450
24389: GO 24391
24391: DISABLE
24392: LD_INT 0
24394: PPUSH
// begin p := 0 ;
24395: LD_ADDR_VAR 0 1
24399: PUSH
24400: LD_INT 0
24402: ST_TO_ADDR
// repeat game_speed := 1 ;
24403: LD_ADDR_OWVAR 65
24407: PUSH
24408: LD_INT 1
24410: ST_TO_ADDR
// wait ( 0 0$1 ) ;
24411: LD_INT 35
24413: PPUSH
24414: CALL_OW 67
// p := p + 1 ;
24418: LD_ADDR_VAR 0 1
24422: PUSH
24423: LD_VAR 0 1
24427: PUSH
24428: LD_INT 1
24430: PLUS
24431: ST_TO_ADDR
// until p >= 60 ;
24432: LD_VAR 0 1
24436: PUSH
24437: LD_INT 60
24439: GREATEREQUAL
24440: IFFALSE 24403
// game_speed := 4 ;
24442: LD_ADDR_OWVAR 65
24446: PUSH
24447: LD_INT 4
24449: ST_TO_ADDR
// end ;
24450: PPOPN 1
24452: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
24453: LD_EXP 41
24457: IFFALSE 24465
24459: PUSH
24460: LD_EXP 68
24464: AND
24465: IFFALSE 24611
24467: GO 24469
24469: DISABLE
24470: LD_INT 0
24472: PPUSH
24473: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24474: LD_ADDR_VAR 0 1
24478: PUSH
24479: LD_INT 22
24481: PUSH
24482: LD_OWVAR 2
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: PUSH
24491: LD_INT 2
24493: PUSH
24494: LD_INT 30
24496: PUSH
24497: LD_INT 0
24499: PUSH
24500: EMPTY
24501: LIST
24502: LIST
24503: PUSH
24504: LD_INT 30
24506: PUSH
24507: LD_INT 1
24509: PUSH
24510: EMPTY
24511: LIST
24512: LIST
24513: PUSH
24514: EMPTY
24515: LIST
24516: LIST
24517: LIST
24518: PUSH
24519: EMPTY
24520: LIST
24521: LIST
24522: PPUSH
24523: CALL_OW 69
24527: ST_TO_ADDR
// if not depot then
24528: LD_VAR 0 1
24532: NOT
24533: IFFALSE 24537
// exit ;
24535: GO 24611
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
24537: LD_ADDR_VAR 0 2
24541: PUSH
24542: LD_VAR 0 1
24546: PUSH
24547: LD_INT 1
24549: PPUSH
24550: LD_VAR 0 1
24554: PPUSH
24555: CALL_OW 12
24559: ARRAY
24560: PPUSH
24561: CALL_OW 274
24565: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
24566: LD_VAR 0 2
24570: PPUSH
24571: LD_INT 1
24573: PPUSH
24574: LD_INT 0
24576: PPUSH
24577: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
24581: LD_VAR 0 2
24585: PPUSH
24586: LD_INT 2
24588: PPUSH
24589: LD_INT 0
24591: PPUSH
24592: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
24596: LD_VAR 0 2
24600: PPUSH
24601: LD_INT 3
24603: PPUSH
24604: LD_INT 0
24606: PPUSH
24607: CALL_OW 277
// end ;
24611: PPOPN 2
24613: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
24614: LD_EXP 41
24618: IFFALSE 24626
24620: PUSH
24621: LD_EXP 69
24625: AND
24626: IFFALSE 24723
24628: GO 24630
24630: DISABLE
24631: LD_INT 0
24633: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24634: LD_ADDR_VAR 0 1
24638: PUSH
24639: LD_INT 22
24641: PUSH
24642: LD_OWVAR 2
24646: PUSH
24647: EMPTY
24648: LIST
24649: LIST
24650: PUSH
24651: LD_INT 21
24653: PUSH
24654: LD_INT 1
24656: PUSH
24657: EMPTY
24658: LIST
24659: LIST
24660: PUSH
24661: LD_INT 3
24663: PUSH
24664: LD_INT 23
24666: PUSH
24667: LD_INT 0
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: PUSH
24674: EMPTY
24675: LIST
24676: LIST
24677: PUSH
24678: EMPTY
24679: LIST
24680: LIST
24681: LIST
24682: PPUSH
24683: CALL_OW 69
24687: ST_TO_ADDR
// if not tmp then
24688: LD_VAR 0 1
24692: NOT
24693: IFFALSE 24697
// exit ;
24695: GO 24723
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
24697: LD_VAR 0 1
24701: PUSH
24702: LD_INT 1
24704: PPUSH
24705: LD_VAR 0 1
24709: PPUSH
24710: CALL_OW 12
24714: ARRAY
24715: PPUSH
24716: LD_INT 200
24718: PPUSH
24719: CALL_OW 234
// end ;
24723: PPOPN 1
24725: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
24726: LD_EXP 41
24730: IFFALSE 24738
24732: PUSH
24733: LD_EXP 70
24737: AND
24738: IFFALSE 24817
24740: GO 24742
24742: DISABLE
24743: LD_INT 0
24745: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
24746: LD_ADDR_VAR 0 1
24750: PUSH
24751: LD_INT 22
24753: PUSH
24754: LD_OWVAR 2
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: PUSH
24763: LD_INT 21
24765: PUSH
24766: LD_INT 2
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: PPUSH
24777: CALL_OW 69
24781: ST_TO_ADDR
// if not tmp then
24782: LD_VAR 0 1
24786: NOT
24787: IFFALSE 24791
// exit ;
24789: GO 24817
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
24791: LD_VAR 0 1
24795: PUSH
24796: LD_INT 1
24798: PPUSH
24799: LD_VAR 0 1
24803: PPUSH
24804: CALL_OW 12
24808: ARRAY
24809: PPUSH
24810: LD_INT 60
24812: PPUSH
24813: CALL_OW 234
// end ;
24817: PPOPN 1
24819: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
24820: LD_EXP 41
24824: IFFALSE 24832
24826: PUSH
24827: LD_EXP 71
24831: AND
24832: IFFALSE 24931
24834: GO 24836
24836: DISABLE
24837: LD_INT 0
24839: PPUSH
24840: PPUSH
// begin enable ;
24841: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
24842: LD_ADDR_VAR 0 1
24846: PUSH
24847: LD_INT 22
24849: PUSH
24850: LD_OWVAR 2
24854: PUSH
24855: EMPTY
24856: LIST
24857: LIST
24858: PUSH
24859: LD_INT 61
24861: PUSH
24862: EMPTY
24863: LIST
24864: PUSH
24865: LD_INT 33
24867: PUSH
24868: LD_INT 2
24870: PUSH
24871: EMPTY
24872: LIST
24873: LIST
24874: PUSH
24875: EMPTY
24876: LIST
24877: LIST
24878: LIST
24879: PPUSH
24880: CALL_OW 69
24884: ST_TO_ADDR
// if not tmp then
24885: LD_VAR 0 1
24889: NOT
24890: IFFALSE 24894
// exit ;
24892: GO 24931
// for i in tmp do
24894: LD_ADDR_VAR 0 2
24898: PUSH
24899: LD_VAR 0 1
24903: PUSH
24904: FOR_IN
24905: IFFALSE 24929
// if IsControledBy ( i ) then
24907: LD_VAR 0 2
24911: PPUSH
24912: CALL_OW 312
24916: IFFALSE 24927
// ComUnlink ( i ) ;
24918: LD_VAR 0 2
24922: PPUSH
24923: CALL_OW 136
24927: GO 24904
24929: POP
24930: POP
// end ;
24931: PPOPN 2
24933: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
24934: LD_EXP 41
24938: IFFALSE 24946
24940: PUSH
24941: LD_EXP 72
24945: AND
24946: IFFALSE 25086
24948: GO 24950
24950: DISABLE
24951: LD_INT 0
24953: PPUSH
24954: PPUSH
// begin ToLua ( displayPowell(); ) ;
24955: LD_STRING displayPowell();
24957: PPUSH
24958: CALL_OW 559
// uc_side := 0 ;
24962: LD_ADDR_OWVAR 20
24966: PUSH
24967: LD_INT 0
24969: ST_TO_ADDR
// uc_nation := 2 ;
24970: LD_ADDR_OWVAR 21
24974: PUSH
24975: LD_INT 2
24977: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
24978: LD_ADDR_OWVAR 37
24982: PUSH
24983: LD_INT 14
24985: ST_TO_ADDR
// vc_engine := engine_siberite ;
24986: LD_ADDR_OWVAR 39
24990: PUSH
24991: LD_INT 3
24993: ST_TO_ADDR
// vc_control := control_apeman ;
24994: LD_ADDR_OWVAR 38
24998: PUSH
24999: LD_INT 5
25001: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
25002: LD_ADDR_OWVAR 40
25006: PUSH
25007: LD_INT 29
25009: ST_TO_ADDR
// un := CreateVehicle ;
25010: LD_ADDR_VAR 0 2
25014: PUSH
25015: CALL_OW 45
25019: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25020: LD_VAR 0 2
25024: PPUSH
25025: LD_INT 1
25027: PPUSH
25028: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25032: LD_INT 35
25034: PPUSH
25035: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25039: LD_VAR 0 2
25043: PPUSH
25044: LD_INT 22
25046: PUSH
25047: LD_OWVAR 2
25051: PUSH
25052: EMPTY
25053: LIST
25054: LIST
25055: PPUSH
25056: CALL_OW 69
25060: PPUSH
25061: LD_VAR 0 2
25065: PPUSH
25066: CALL_OW 74
25070: PPUSH
25071: CALL_OW 115
// until IsDead ( un ) ;
25075: LD_VAR 0 2
25079: PPUSH
25080: CALL_OW 301
25084: IFFALSE 25032
// end ;
25086: PPOPN 2
25088: END
// every 0 0$1 trigger StreamModeActive and sStu do
25089: LD_EXP 41
25093: IFFALSE 25101
25095: PUSH
25096: LD_EXP 80
25100: AND
25101: IFFALSE 25117
25103: GO 25105
25105: DISABLE
// begin ToLua ( displayStucuk(); ) ;
25106: LD_STRING displayStucuk();
25108: PPUSH
25109: CALL_OW 559
// ResetFog ;
25113: CALL_OW 335
// end ;
25117: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
25118: LD_EXP 41
25122: IFFALSE 25130
25124: PUSH
25125: LD_EXP 73
25129: AND
25130: IFFALSE 25271
25132: GO 25134
25134: DISABLE
25135: LD_INT 0
25137: PPUSH
25138: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25139: LD_ADDR_VAR 0 2
25143: PUSH
25144: LD_INT 22
25146: PUSH
25147: LD_OWVAR 2
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: PUSH
25156: LD_INT 21
25158: PUSH
25159: LD_INT 1
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: PUSH
25166: EMPTY
25167: LIST
25168: LIST
25169: PPUSH
25170: CALL_OW 69
25174: ST_TO_ADDR
// if not tmp then
25175: LD_VAR 0 2
25179: NOT
25180: IFFALSE 25184
// exit ;
25182: GO 25271
// un := tmp [ rand ( 1 , tmp ) ] ;
25184: LD_ADDR_VAR 0 1
25188: PUSH
25189: LD_VAR 0 2
25193: PUSH
25194: LD_INT 1
25196: PPUSH
25197: LD_VAR 0 2
25201: PPUSH
25202: CALL_OW 12
25206: ARRAY
25207: ST_TO_ADDR
// SetSide ( un , 0 ) ;
25208: LD_VAR 0 1
25212: PPUSH
25213: LD_INT 0
25215: PPUSH
25216: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
25220: LD_VAR 0 1
25224: PPUSH
25225: LD_OWVAR 3
25229: PUSH
25230: LD_VAR 0 1
25234: DIFF
25235: PPUSH
25236: LD_VAR 0 1
25240: PPUSH
25241: CALL_OW 74
25245: PPUSH
25246: CALL_OW 115
// wait ( 0 0$20 ) ;
25250: LD_INT 700
25252: PPUSH
25253: CALL_OW 67
// SetSide ( un , your_side ) ;
25257: LD_VAR 0 1
25261: PPUSH
25262: LD_OWVAR 2
25266: PPUSH
25267: CALL_OW 235
// end ;
25271: PPOPN 2
25273: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
25274: LD_EXP 41
25278: IFFALSE 25286
25280: PUSH
25281: LD_EXP 74
25285: AND
25286: IFFALSE 25392
25288: GO 25290
25290: DISABLE
25291: LD_INT 0
25293: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25294: LD_ADDR_VAR 0 1
25298: PUSH
25299: LD_INT 22
25301: PUSH
25302: LD_OWVAR 2
25306: PUSH
25307: EMPTY
25308: LIST
25309: LIST
25310: PUSH
25311: LD_INT 2
25313: PUSH
25314: LD_INT 30
25316: PUSH
25317: LD_INT 0
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: PUSH
25324: LD_INT 30
25326: PUSH
25327: LD_INT 1
25329: PUSH
25330: EMPTY
25331: LIST
25332: LIST
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: LIST
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: PPUSH
25343: CALL_OW 69
25347: ST_TO_ADDR
// if not depot then
25348: LD_VAR 0 1
25352: NOT
25353: IFFALSE 25357
// exit ;
25355: GO 25392
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
25357: LD_VAR 0 1
25361: PUSH
25362: LD_INT 1
25364: ARRAY
25365: PPUSH
25366: CALL_OW 250
25370: PPUSH
25371: LD_VAR 0 1
25375: PUSH
25376: LD_INT 1
25378: ARRAY
25379: PPUSH
25380: CALL_OW 251
25384: PPUSH
25385: LD_INT 70
25387: PPUSH
25388: CALL_OW 495
// end ;
25392: PPOPN 1
25394: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
25395: LD_EXP 41
25399: IFFALSE 25407
25401: PUSH
25402: LD_EXP 75
25406: AND
25407: IFFALSE 25618
25409: GO 25411
25411: DISABLE
25412: LD_INT 0
25414: PPUSH
25415: PPUSH
25416: PPUSH
25417: PPUSH
25418: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25419: LD_ADDR_VAR 0 5
25423: PUSH
25424: LD_INT 22
25426: PUSH
25427: LD_OWVAR 2
25431: PUSH
25432: EMPTY
25433: LIST
25434: LIST
25435: PUSH
25436: LD_INT 21
25438: PUSH
25439: LD_INT 1
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: PPUSH
25450: CALL_OW 69
25454: ST_TO_ADDR
// if not tmp then
25455: LD_VAR 0 5
25459: NOT
25460: IFFALSE 25464
// exit ;
25462: GO 25618
// for i in tmp do
25464: LD_ADDR_VAR 0 1
25468: PUSH
25469: LD_VAR 0 5
25473: PUSH
25474: FOR_IN
25475: IFFALSE 25616
// begin d := rand ( 0 , 5 ) ;
25477: LD_ADDR_VAR 0 4
25481: PUSH
25482: LD_INT 0
25484: PPUSH
25485: LD_INT 5
25487: PPUSH
25488: CALL_OW 12
25492: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
25493: LD_ADDR_VAR 0 2
25497: PUSH
25498: LD_VAR 0 1
25502: PPUSH
25503: CALL_OW 250
25507: PPUSH
25508: LD_VAR 0 4
25512: PPUSH
25513: LD_INT 3
25515: PPUSH
25516: LD_INT 12
25518: PPUSH
25519: CALL_OW 12
25523: PPUSH
25524: CALL_OW 272
25528: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
25529: LD_ADDR_VAR 0 3
25533: PUSH
25534: LD_VAR 0 1
25538: PPUSH
25539: CALL_OW 251
25543: PPUSH
25544: LD_VAR 0 4
25548: PPUSH
25549: LD_INT 3
25551: PPUSH
25552: LD_INT 12
25554: PPUSH
25555: CALL_OW 12
25559: PPUSH
25560: CALL_OW 273
25564: ST_TO_ADDR
// if ValidHex ( x , y ) then
25565: LD_VAR 0 2
25569: PPUSH
25570: LD_VAR 0 3
25574: PPUSH
25575: CALL_OW 488
25579: IFFALSE 25614
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
25581: LD_VAR 0 1
25585: PPUSH
25586: LD_VAR 0 2
25590: PPUSH
25591: LD_VAR 0 3
25595: PPUSH
25596: LD_INT 3
25598: PPUSH
25599: LD_INT 6
25601: PPUSH
25602: CALL_OW 12
25606: PPUSH
25607: LD_INT 1
25609: PPUSH
25610: CALL_OW 483
// end ;
25614: GO 25474
25616: POP
25617: POP
// end ;
25618: PPOPN 5
25620: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
25621: LD_EXP 41
25625: IFFALSE 25633
25627: PUSH
25628: LD_EXP 76
25632: AND
25633: IFFALSE 25727
25635: GO 25637
25637: DISABLE
25638: LD_INT 0
25640: PPUSH
25641: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
25642: LD_ADDR_VAR 0 2
25646: PUSH
25647: LD_INT 22
25649: PUSH
25650: LD_OWVAR 2
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: PUSH
25659: LD_INT 32
25661: PUSH
25662: LD_INT 1
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: PUSH
25669: LD_INT 21
25671: PUSH
25672: LD_INT 2
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: PUSH
25679: EMPTY
25680: LIST
25681: LIST
25682: LIST
25683: PPUSH
25684: CALL_OW 69
25688: ST_TO_ADDR
// if not tmp then
25689: LD_VAR 0 2
25693: NOT
25694: IFFALSE 25698
// exit ;
25696: GO 25727
// for i in tmp do
25698: LD_ADDR_VAR 0 1
25702: PUSH
25703: LD_VAR 0 2
25707: PUSH
25708: FOR_IN
25709: IFFALSE 25725
// SetFuel ( i , 0 ) ;
25711: LD_VAR 0 1
25715: PPUSH
25716: LD_INT 0
25718: PPUSH
25719: CALL_OW 240
25723: GO 25708
25725: POP
25726: POP
// end ;
25727: PPOPN 2
25729: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
25730: LD_EXP 41
25734: IFFALSE 25742
25736: PUSH
25737: LD_EXP 77
25741: AND
25742: IFFALSE 25808
25744: GO 25746
25746: DISABLE
25747: LD_INT 0
25749: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25750: LD_ADDR_VAR 0 1
25754: PUSH
25755: LD_INT 22
25757: PUSH
25758: LD_OWVAR 2
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: PUSH
25767: LD_INT 30
25769: PUSH
25770: LD_INT 29
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: PPUSH
25781: CALL_OW 69
25785: ST_TO_ADDR
// if not tmp then
25786: LD_VAR 0 1
25790: NOT
25791: IFFALSE 25795
// exit ;
25793: GO 25808
// DestroyUnit ( tmp [ 1 ] ) ;
25795: LD_VAR 0 1
25799: PUSH
25800: LD_INT 1
25802: ARRAY
25803: PPUSH
25804: CALL_OW 65
// end ;
25808: PPOPN 1
25810: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
25811: LD_EXP 41
25815: IFFALSE 25823
25817: PUSH
25818: LD_EXP 79
25822: AND
25823: IFFALSE 25952
25825: GO 25827
25827: DISABLE
25828: LD_INT 0
25830: PPUSH
// begin uc_side := 0 ;
25831: LD_ADDR_OWVAR 20
25835: PUSH
25836: LD_INT 0
25838: ST_TO_ADDR
// uc_nation := nation_arabian ;
25839: LD_ADDR_OWVAR 21
25843: PUSH
25844: LD_INT 2
25846: ST_TO_ADDR
// hc_gallery :=  ;
25847: LD_ADDR_OWVAR 33
25851: PUSH
25852: LD_STRING 
25854: ST_TO_ADDR
// hc_name :=  ;
25855: LD_ADDR_OWVAR 26
25859: PUSH
25860: LD_STRING 
25862: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
25863: LD_INT 1
25865: PPUSH
25866: LD_INT 11
25868: PPUSH
25869: LD_INT 10
25871: PPUSH
25872: CALL_OW 380
// un := CreateHuman ;
25876: LD_ADDR_VAR 0 1
25880: PUSH
25881: CALL_OW 44
25885: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25886: LD_VAR 0 1
25890: PPUSH
25891: LD_INT 1
25893: PPUSH
25894: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25898: LD_INT 35
25900: PPUSH
25901: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25905: LD_VAR 0 1
25909: PPUSH
25910: LD_INT 22
25912: PUSH
25913: LD_OWVAR 2
25917: PUSH
25918: EMPTY
25919: LIST
25920: LIST
25921: PPUSH
25922: CALL_OW 69
25926: PPUSH
25927: LD_VAR 0 1
25931: PPUSH
25932: CALL_OW 74
25936: PPUSH
25937: CALL_OW 115
// until IsDead ( un ) ;
25941: LD_VAR 0 1
25945: PPUSH
25946: CALL_OW 301
25950: IFFALSE 25898
// end ;
25952: PPOPN 1
25954: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
25955: LD_EXP 41
25959: IFFALSE 25967
25961: PUSH
25962: LD_EXP 81
25966: AND
25967: IFFALSE 25979
25969: GO 25971
25971: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
25972: LD_STRING earthquake(getX(game), 0, 32)
25974: PPUSH
25975: CALL_OW 559
25979: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
25980: LD_EXP 41
25984: IFFALSE 25992
25986: PUSH
25987: LD_EXP 82
25991: AND
25992: IFFALSE 26083
25994: GO 25996
25996: DISABLE
25997: LD_INT 0
25999: PPUSH
// begin enable ;
26000: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
26001: LD_ADDR_VAR 0 1
26005: PUSH
26006: LD_INT 22
26008: PUSH
26009: LD_OWVAR 2
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: PUSH
26018: LD_INT 21
26020: PUSH
26021: LD_INT 2
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: PUSH
26028: LD_INT 33
26030: PUSH
26031: LD_INT 3
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: LIST
26042: PPUSH
26043: CALL_OW 69
26047: ST_TO_ADDR
// if not tmp then
26048: LD_VAR 0 1
26052: NOT
26053: IFFALSE 26057
// exit ;
26055: GO 26083
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26057: LD_VAR 0 1
26061: PUSH
26062: LD_INT 1
26064: PPUSH
26065: LD_VAR 0 1
26069: PPUSH
26070: CALL_OW 12
26074: ARRAY
26075: PPUSH
26076: LD_INT 1
26078: PPUSH
26079: CALL_OW 234
// end ;
26083: PPOPN 1
26085: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
26086: LD_EXP 41
26090: IFFALSE 26098
26092: PUSH
26093: LD_EXP 83
26097: AND
26098: IFFALSE 26239
26100: GO 26102
26102: DISABLE
26103: LD_INT 0
26105: PPUSH
26106: PPUSH
26107: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26108: LD_ADDR_VAR 0 3
26112: PUSH
26113: LD_INT 22
26115: PUSH
26116: LD_OWVAR 2
26120: PUSH
26121: EMPTY
26122: LIST
26123: LIST
26124: PUSH
26125: LD_INT 25
26127: PUSH
26128: LD_INT 1
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PPUSH
26139: CALL_OW 69
26143: ST_TO_ADDR
// if not tmp then
26144: LD_VAR 0 3
26148: NOT
26149: IFFALSE 26153
// exit ;
26151: GO 26239
// un := tmp [ rand ( 1 , tmp ) ] ;
26153: LD_ADDR_VAR 0 2
26157: PUSH
26158: LD_VAR 0 3
26162: PUSH
26163: LD_INT 1
26165: PPUSH
26166: LD_VAR 0 3
26170: PPUSH
26171: CALL_OW 12
26175: ARRAY
26176: ST_TO_ADDR
// if Crawls ( un ) then
26177: LD_VAR 0 2
26181: PPUSH
26182: CALL_OW 318
26186: IFFALSE 26197
// ComWalk ( un ) ;
26188: LD_VAR 0 2
26192: PPUSH
26193: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
26197: LD_VAR 0 2
26201: PPUSH
26202: LD_INT 9
26204: PPUSH
26205: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
26209: LD_INT 28
26211: PPUSH
26212: LD_OWVAR 2
26216: PPUSH
26217: LD_INT 2
26219: PPUSH
26220: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
26224: LD_INT 29
26226: PPUSH
26227: LD_OWVAR 2
26231: PPUSH
26232: LD_INT 2
26234: PPUSH
26235: CALL_OW 322
// end ;
26239: PPOPN 3
26241: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
26242: LD_EXP 41
26246: IFFALSE 26254
26248: PUSH
26249: LD_EXP 84
26253: AND
26254: IFFALSE 26365
26256: GO 26258
26258: DISABLE
26259: LD_INT 0
26261: PPUSH
26262: PPUSH
26263: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26264: LD_ADDR_VAR 0 3
26268: PUSH
26269: LD_INT 22
26271: PUSH
26272: LD_OWVAR 2
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: PUSH
26281: LD_INT 25
26283: PUSH
26284: LD_INT 1
26286: PUSH
26287: EMPTY
26288: LIST
26289: LIST
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: PPUSH
26295: CALL_OW 69
26299: ST_TO_ADDR
// if not tmp then
26300: LD_VAR 0 3
26304: NOT
26305: IFFALSE 26309
// exit ;
26307: GO 26365
// un := tmp [ rand ( 1 , tmp ) ] ;
26309: LD_ADDR_VAR 0 2
26313: PUSH
26314: LD_VAR 0 3
26318: PUSH
26319: LD_INT 1
26321: PPUSH
26322: LD_VAR 0 3
26326: PPUSH
26327: CALL_OW 12
26331: ARRAY
26332: ST_TO_ADDR
// if Crawls ( un ) then
26333: LD_VAR 0 2
26337: PPUSH
26338: CALL_OW 318
26342: IFFALSE 26353
// ComWalk ( un ) ;
26344: LD_VAR 0 2
26348: PPUSH
26349: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26353: LD_VAR 0 2
26357: PPUSH
26358: LD_INT 8
26360: PPUSH
26361: CALL_OW 336
// end ;
26365: PPOPN 3
26367: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
26368: LD_EXP 41
26372: IFFALSE 26380
26374: PUSH
26375: LD_EXP 85
26379: AND
26380: IFFALSE 26524
26382: GO 26384
26384: DISABLE
26385: LD_INT 0
26387: PPUSH
26388: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
26389: LD_ADDR_VAR 0 2
26393: PUSH
26394: LD_INT 22
26396: PUSH
26397: LD_OWVAR 2
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: PUSH
26406: LD_INT 21
26408: PUSH
26409: LD_INT 2
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: PUSH
26416: LD_INT 2
26418: PUSH
26419: LD_INT 34
26421: PUSH
26422: LD_INT 12
26424: PUSH
26425: EMPTY
26426: LIST
26427: LIST
26428: PUSH
26429: LD_INT 34
26431: PUSH
26432: LD_INT 51
26434: PUSH
26435: EMPTY
26436: LIST
26437: LIST
26438: PUSH
26439: LD_INT 34
26441: PUSH
26442: LD_INT 32
26444: PUSH
26445: EMPTY
26446: LIST
26447: LIST
26448: PUSH
26449: EMPTY
26450: LIST
26451: LIST
26452: LIST
26453: LIST
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: LIST
26459: PPUSH
26460: CALL_OW 69
26464: ST_TO_ADDR
// if not tmp then
26465: LD_VAR 0 2
26469: NOT
26470: IFFALSE 26474
// exit ;
26472: GO 26524
// for i in tmp do
26474: LD_ADDR_VAR 0 1
26478: PUSH
26479: LD_VAR 0 2
26483: PUSH
26484: FOR_IN
26485: IFFALSE 26522
// if GetCargo ( i , mat_artifact ) = 0 then
26487: LD_VAR 0 1
26491: PPUSH
26492: LD_INT 4
26494: PPUSH
26495: CALL_OW 289
26499: PUSH
26500: LD_INT 0
26502: EQUAL
26503: IFFALSE 26520
// SetCargo ( i , mat_siberit , 100 ) ;
26505: LD_VAR 0 1
26509: PPUSH
26510: LD_INT 3
26512: PPUSH
26513: LD_INT 100
26515: PPUSH
26516: CALL_OW 290
26520: GO 26484
26522: POP
26523: POP
// end ;
26524: PPOPN 2
26526: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
26527: LD_EXP 41
26531: IFFALSE 26539
26533: PUSH
26534: LD_EXP 86
26538: AND
26539: IFFALSE 26722
26541: GO 26543
26543: DISABLE
26544: LD_INT 0
26546: PPUSH
26547: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26548: LD_ADDR_VAR 0 2
26552: PUSH
26553: LD_INT 22
26555: PUSH
26556: LD_OWVAR 2
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: PPUSH
26565: CALL_OW 69
26569: ST_TO_ADDR
// if not tmp then
26570: LD_VAR 0 2
26574: NOT
26575: IFFALSE 26579
// exit ;
26577: GO 26722
// for i := 1 to 2 do
26579: LD_ADDR_VAR 0 1
26583: PUSH
26584: DOUBLE
26585: LD_INT 1
26587: DEC
26588: ST_TO_ADDR
26589: LD_INT 2
26591: PUSH
26592: FOR_TO
26593: IFFALSE 26720
// begin uc_side := your_side ;
26595: LD_ADDR_OWVAR 20
26599: PUSH
26600: LD_OWVAR 2
26604: ST_TO_ADDR
// uc_nation := nation_american ;
26605: LD_ADDR_OWVAR 21
26609: PUSH
26610: LD_INT 1
26612: ST_TO_ADDR
// vc_chassis := us_morphling ;
26613: LD_ADDR_OWVAR 37
26617: PUSH
26618: LD_INT 5
26620: ST_TO_ADDR
// vc_engine := engine_siberite ;
26621: LD_ADDR_OWVAR 39
26625: PUSH
26626: LD_INT 3
26628: ST_TO_ADDR
// vc_control := control_computer ;
26629: LD_ADDR_OWVAR 38
26633: PUSH
26634: LD_INT 3
26636: ST_TO_ADDR
// vc_weapon := us_double_laser ;
26637: LD_ADDR_OWVAR 40
26641: PUSH
26642: LD_INT 10
26644: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
26645: LD_VAR 0 2
26649: PUSH
26650: LD_INT 1
26652: ARRAY
26653: PPUSH
26654: CALL_OW 310
26658: NOT
26659: IFFALSE 26706
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
26661: CALL_OW 45
26665: PPUSH
26666: LD_VAR 0 2
26670: PUSH
26671: LD_INT 1
26673: ARRAY
26674: PPUSH
26675: CALL_OW 250
26679: PPUSH
26680: LD_VAR 0 2
26684: PUSH
26685: LD_INT 1
26687: ARRAY
26688: PPUSH
26689: CALL_OW 251
26693: PPUSH
26694: LD_INT 12
26696: PPUSH
26697: LD_INT 1
26699: PPUSH
26700: CALL_OW 50
26704: GO 26718
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
26706: CALL_OW 45
26710: PPUSH
26711: LD_INT 1
26713: PPUSH
26714: CALL_OW 51
// end ;
26718: GO 26592
26720: POP
26721: POP
// end ;
26722: PPOPN 2
26724: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
26725: LD_EXP 41
26729: IFFALSE 26737
26731: PUSH
26732: LD_EXP 87
26736: AND
26737: IFFALSE 26959
26739: GO 26741
26741: DISABLE
26742: LD_INT 0
26744: PPUSH
26745: PPUSH
26746: PPUSH
26747: PPUSH
26748: PPUSH
26749: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26750: LD_ADDR_VAR 0 6
26754: PUSH
26755: LD_INT 22
26757: PUSH
26758: LD_OWVAR 2
26762: PUSH
26763: EMPTY
26764: LIST
26765: LIST
26766: PUSH
26767: LD_INT 21
26769: PUSH
26770: LD_INT 1
26772: PUSH
26773: EMPTY
26774: LIST
26775: LIST
26776: PUSH
26777: LD_INT 3
26779: PUSH
26780: LD_INT 23
26782: PUSH
26783: LD_INT 0
26785: PUSH
26786: EMPTY
26787: LIST
26788: LIST
26789: PUSH
26790: EMPTY
26791: LIST
26792: LIST
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: LIST
26798: PPUSH
26799: CALL_OW 69
26803: ST_TO_ADDR
// if not tmp then
26804: LD_VAR 0 6
26808: NOT
26809: IFFALSE 26813
// exit ;
26811: GO 26959
// s1 := rand ( 1 , 4 ) ;
26813: LD_ADDR_VAR 0 2
26817: PUSH
26818: LD_INT 1
26820: PPUSH
26821: LD_INT 4
26823: PPUSH
26824: CALL_OW 12
26828: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
26829: LD_ADDR_VAR 0 4
26833: PUSH
26834: LD_VAR 0 6
26838: PUSH
26839: LD_INT 1
26841: ARRAY
26842: PPUSH
26843: LD_VAR 0 2
26847: PPUSH
26848: CALL_OW 259
26852: ST_TO_ADDR
// if s1 = 1 then
26853: LD_VAR 0 2
26857: PUSH
26858: LD_INT 1
26860: EQUAL
26861: IFFALSE 26881
// s2 := rand ( 2 , 4 ) else
26863: LD_ADDR_VAR 0 3
26867: PUSH
26868: LD_INT 2
26870: PPUSH
26871: LD_INT 4
26873: PPUSH
26874: CALL_OW 12
26878: ST_TO_ADDR
26879: GO 26889
// s2 := 1 ;
26881: LD_ADDR_VAR 0 3
26885: PUSH
26886: LD_INT 1
26888: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
26889: LD_ADDR_VAR 0 5
26893: PUSH
26894: LD_VAR 0 6
26898: PUSH
26899: LD_INT 1
26901: ARRAY
26902: PPUSH
26903: LD_VAR 0 3
26907: PPUSH
26908: CALL_OW 259
26912: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
26913: LD_VAR 0 6
26917: PUSH
26918: LD_INT 1
26920: ARRAY
26921: PPUSH
26922: LD_VAR 0 2
26926: PPUSH
26927: LD_VAR 0 5
26931: PPUSH
26932: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
26936: LD_VAR 0 6
26940: PUSH
26941: LD_INT 1
26943: ARRAY
26944: PPUSH
26945: LD_VAR 0 3
26949: PPUSH
26950: LD_VAR 0 4
26954: PPUSH
26955: CALL_OW 237
// end ;
26959: PPOPN 6
26961: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
26962: LD_EXP 41
26966: IFFALSE 26974
26968: PUSH
26969: LD_EXP 88
26973: AND
26974: IFFALSE 27053
26976: GO 26978
26978: DISABLE
26979: LD_INT 0
26981: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
26982: LD_ADDR_VAR 0 1
26986: PUSH
26987: LD_INT 22
26989: PUSH
26990: LD_OWVAR 2
26994: PUSH
26995: EMPTY
26996: LIST
26997: LIST
26998: PUSH
26999: LD_INT 30
27001: PUSH
27002: LD_INT 3
27004: PUSH
27005: EMPTY
27006: LIST
27007: LIST
27008: PUSH
27009: EMPTY
27010: LIST
27011: LIST
27012: PPUSH
27013: CALL_OW 69
27017: ST_TO_ADDR
// if not tmp then
27018: LD_VAR 0 1
27022: NOT
27023: IFFALSE 27027
// exit ;
27025: GO 27053
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27027: LD_VAR 0 1
27031: PUSH
27032: LD_INT 1
27034: PPUSH
27035: LD_VAR 0 1
27039: PPUSH
27040: CALL_OW 12
27044: ARRAY
27045: PPUSH
27046: LD_INT 1
27048: PPUSH
27049: CALL_OW 234
// end ;
27053: PPOPN 1
27055: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
27056: LD_EXP 41
27060: IFFALSE 27068
27062: PUSH
27063: LD_EXP 89
27067: AND
27068: IFFALSE 27180
27070: GO 27072
27072: DISABLE
27073: LD_INT 0
27075: PPUSH
27076: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
27077: LD_ADDR_VAR 0 2
27081: PUSH
27082: LD_INT 22
27084: PUSH
27085: LD_OWVAR 2
27089: PUSH
27090: EMPTY
27091: LIST
27092: LIST
27093: PUSH
27094: LD_INT 2
27096: PUSH
27097: LD_INT 30
27099: PUSH
27100: LD_INT 27
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: PUSH
27107: LD_INT 30
27109: PUSH
27110: LD_INT 26
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: PUSH
27117: LD_INT 30
27119: PUSH
27120: LD_INT 28
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: EMPTY
27128: LIST
27129: LIST
27130: LIST
27131: LIST
27132: PUSH
27133: EMPTY
27134: LIST
27135: LIST
27136: PPUSH
27137: CALL_OW 69
27141: ST_TO_ADDR
// if not tmp then
27142: LD_VAR 0 2
27146: NOT
27147: IFFALSE 27151
// exit ;
27149: GO 27180
// for i in tmp do
27151: LD_ADDR_VAR 0 1
27155: PUSH
27156: LD_VAR 0 2
27160: PUSH
27161: FOR_IN
27162: IFFALSE 27178
// SetLives ( i , 1 ) ;
27164: LD_VAR 0 1
27168: PPUSH
27169: LD_INT 1
27171: PPUSH
27172: CALL_OW 234
27176: GO 27161
27178: POP
27179: POP
// end ;
27180: PPOPN 2
27182: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
27183: LD_EXP 41
27187: IFFALSE 27195
27189: PUSH
27190: LD_EXP 90
27194: AND
27195: IFFALSE 27482
27197: GO 27199
27199: DISABLE
27200: LD_INT 0
27202: PPUSH
27203: PPUSH
27204: PPUSH
// begin i := rand ( 1 , 7 ) ;
27205: LD_ADDR_VAR 0 1
27209: PUSH
27210: LD_INT 1
27212: PPUSH
27213: LD_INT 7
27215: PPUSH
27216: CALL_OW 12
27220: ST_TO_ADDR
// case i of 1 :
27221: LD_VAR 0 1
27225: PUSH
27226: LD_INT 1
27228: DOUBLE
27229: EQUAL
27230: IFTRUE 27234
27232: GO 27244
27234: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
27235: LD_STRING earthquake(getX(game), 0, 32)
27237: PPUSH
27238: CALL_OW 559
27242: GO 27482
27244: LD_INT 2
27246: DOUBLE
27247: EQUAL
27248: IFTRUE 27252
27250: GO 27266
27252: POP
// begin ToLua ( displayStucuk(); ) ;
27253: LD_STRING displayStucuk();
27255: PPUSH
27256: CALL_OW 559
// ResetFog ;
27260: CALL_OW 335
// end ; 3 :
27264: GO 27482
27266: LD_INT 3
27268: DOUBLE
27269: EQUAL
27270: IFTRUE 27274
27272: GO 27378
27274: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27275: LD_ADDR_VAR 0 2
27279: PUSH
27280: LD_INT 22
27282: PUSH
27283: LD_OWVAR 2
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: PUSH
27292: LD_INT 25
27294: PUSH
27295: LD_INT 1
27297: PUSH
27298: EMPTY
27299: LIST
27300: LIST
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PPUSH
27306: CALL_OW 69
27310: ST_TO_ADDR
// if not tmp then
27311: LD_VAR 0 2
27315: NOT
27316: IFFALSE 27320
// exit ;
27318: GO 27482
// un := tmp [ rand ( 1 , tmp ) ] ;
27320: LD_ADDR_VAR 0 3
27324: PUSH
27325: LD_VAR 0 2
27329: PUSH
27330: LD_INT 1
27332: PPUSH
27333: LD_VAR 0 2
27337: PPUSH
27338: CALL_OW 12
27342: ARRAY
27343: ST_TO_ADDR
// if Crawls ( un ) then
27344: LD_VAR 0 3
27348: PPUSH
27349: CALL_OW 318
27353: IFFALSE 27364
// ComWalk ( un ) ;
27355: LD_VAR 0 3
27359: PPUSH
27360: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27364: LD_VAR 0 3
27368: PPUSH
27369: LD_INT 8
27371: PPUSH
27372: CALL_OW 336
// end ; 4 :
27376: GO 27482
27378: LD_INT 4
27380: DOUBLE
27381: EQUAL
27382: IFTRUE 27386
27384: GO 27460
27386: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27387: LD_ADDR_VAR 0 2
27391: PUSH
27392: LD_INT 22
27394: PUSH
27395: LD_OWVAR 2
27399: PUSH
27400: EMPTY
27401: LIST
27402: LIST
27403: PUSH
27404: LD_INT 30
27406: PUSH
27407: LD_INT 29
27409: PUSH
27410: EMPTY
27411: LIST
27412: LIST
27413: PUSH
27414: EMPTY
27415: LIST
27416: LIST
27417: PPUSH
27418: CALL_OW 69
27422: ST_TO_ADDR
// if not tmp then
27423: LD_VAR 0 2
27427: NOT
27428: IFFALSE 27432
// exit ;
27430: GO 27482
// CenterNowOnUnits ( tmp [ 1 ] ) ;
27432: LD_VAR 0 2
27436: PUSH
27437: LD_INT 1
27439: ARRAY
27440: PPUSH
27441: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
27445: LD_VAR 0 2
27449: PUSH
27450: LD_INT 1
27452: ARRAY
27453: PPUSH
27454: CALL_OW 65
// end ; 5 .. 7 :
27458: GO 27482
27460: LD_INT 5
27462: DOUBLE
27463: GREATEREQUAL
27464: IFFALSE 27472
27466: LD_INT 7
27468: DOUBLE
27469: LESSEQUAL
27470: IFTRUE 27474
27472: GO 27481
27474: POP
// StreamSibBomb ; end ;
27475: CALL 23663 0 0
27479: GO 27482
27481: POP
// end ;
27482: PPOPN 3
27484: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
27485: LD_EXP 41
27489: IFFALSE 27497
27491: PUSH
27492: LD_EXP 91
27496: AND
27497: IFFALSE 27653
27499: GO 27501
27501: DISABLE
27502: LD_INT 0
27504: PPUSH
27505: PPUSH
27506: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
27507: LD_ADDR_VAR 0 2
27511: PUSH
27512: LD_INT 81
27514: PUSH
27515: LD_OWVAR 2
27519: PUSH
27520: EMPTY
27521: LIST
27522: LIST
27523: PUSH
27524: LD_INT 2
27526: PUSH
27527: LD_INT 21
27529: PUSH
27530: LD_INT 1
27532: PUSH
27533: EMPTY
27534: LIST
27535: LIST
27536: PUSH
27537: LD_INT 21
27539: PUSH
27540: LD_INT 2
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: PUSH
27547: EMPTY
27548: LIST
27549: LIST
27550: LIST
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: PPUSH
27556: CALL_OW 69
27560: ST_TO_ADDR
// if not tmp then
27561: LD_VAR 0 2
27565: NOT
27566: IFFALSE 27570
// exit ;
27568: GO 27653
// p := 0 ;
27570: LD_ADDR_VAR 0 3
27574: PUSH
27575: LD_INT 0
27577: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27578: LD_INT 35
27580: PPUSH
27581: CALL_OW 67
// p := p + 1 ;
27585: LD_ADDR_VAR 0 3
27589: PUSH
27590: LD_VAR 0 3
27594: PUSH
27595: LD_INT 1
27597: PLUS
27598: ST_TO_ADDR
// for i in tmp do
27599: LD_ADDR_VAR 0 1
27603: PUSH
27604: LD_VAR 0 2
27608: PUSH
27609: FOR_IN
27610: IFFALSE 27641
// if GetLives ( i ) < 1000 then
27612: LD_VAR 0 1
27616: PPUSH
27617: CALL_OW 256
27621: PUSH
27622: LD_INT 1000
27624: LESS
27625: IFFALSE 27639
// SetLives ( i , 1000 ) ;
27627: LD_VAR 0 1
27631: PPUSH
27632: LD_INT 1000
27634: PPUSH
27635: CALL_OW 234
27639: GO 27609
27641: POP
27642: POP
// until p > 20 ;
27643: LD_VAR 0 3
27647: PUSH
27648: LD_INT 20
27650: GREATER
27651: IFFALSE 27578
// end ;
27653: PPOPN 3
27655: END
// every 0 0$1 trigger StreamModeActive and sTime do
27656: LD_EXP 41
27660: IFFALSE 27668
27662: PUSH
27663: LD_EXP 92
27667: AND
27668: IFFALSE 27703
27670: GO 27672
27672: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
27673: LD_INT 28
27675: PPUSH
27676: LD_OWVAR 2
27680: PPUSH
27681: LD_INT 2
27683: PPUSH
27684: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
27688: LD_INT 30
27690: PPUSH
27691: LD_OWVAR 2
27695: PPUSH
27696: LD_INT 2
27698: PPUSH
27699: CALL_OW 322
// end ;
27703: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
27704: LD_EXP 41
27708: IFFALSE 27716
27710: PUSH
27711: LD_EXP 93
27715: AND
27716: IFFALSE 27837
27718: GO 27720
27720: DISABLE
27721: LD_INT 0
27723: PPUSH
27724: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27725: LD_ADDR_VAR 0 2
27729: PUSH
27730: LD_INT 22
27732: PUSH
27733: LD_OWVAR 2
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: PUSH
27742: LD_INT 21
27744: PUSH
27745: LD_INT 1
27747: PUSH
27748: EMPTY
27749: LIST
27750: LIST
27751: PUSH
27752: LD_INT 3
27754: PUSH
27755: LD_INT 23
27757: PUSH
27758: LD_INT 0
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: LIST
27773: PPUSH
27774: CALL_OW 69
27778: ST_TO_ADDR
// if not tmp then
27779: LD_VAR 0 2
27783: NOT
27784: IFFALSE 27788
// exit ;
27786: GO 27837
// for i in tmp do
27788: LD_ADDR_VAR 0 1
27792: PUSH
27793: LD_VAR 0 2
27797: PUSH
27798: FOR_IN
27799: IFFALSE 27835
// begin if Crawls ( i ) then
27801: LD_VAR 0 1
27805: PPUSH
27806: CALL_OW 318
27810: IFFALSE 27821
// ComWalk ( i ) ;
27812: LD_VAR 0 1
27816: PPUSH
27817: CALL_OW 138
// SetClass ( i , 2 ) ;
27821: LD_VAR 0 1
27825: PPUSH
27826: LD_INT 2
27828: PPUSH
27829: CALL_OW 336
// end ;
27833: GO 27798
27835: POP
27836: POP
// end ;
27837: PPOPN 2
27839: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
27840: LD_EXP 41
27844: IFFALSE 27852
27846: PUSH
27847: LD_EXP 94
27851: AND
27852: IFFALSE 28142
27854: GO 27856
27856: DISABLE
27857: LD_INT 0
27859: PPUSH
27860: PPUSH
27861: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
27862: LD_OWVAR 2
27866: PPUSH
27867: LD_INT 9
27869: PPUSH
27870: LD_INT 1
27872: PPUSH
27873: LD_INT 1
27875: PPUSH
27876: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
27880: LD_INT 9
27882: PPUSH
27883: LD_OWVAR 2
27887: PPUSH
27888: CALL_OW 343
// uc_side := 9 ;
27892: LD_ADDR_OWVAR 20
27896: PUSH
27897: LD_INT 9
27899: ST_TO_ADDR
// uc_nation := 2 ;
27900: LD_ADDR_OWVAR 21
27904: PUSH
27905: LD_INT 2
27907: ST_TO_ADDR
// hc_name := Dark Warrior ;
27908: LD_ADDR_OWVAR 26
27912: PUSH
27913: LD_STRING Dark Warrior
27915: ST_TO_ADDR
// hc_gallery :=  ;
27916: LD_ADDR_OWVAR 33
27920: PUSH
27921: LD_STRING 
27923: ST_TO_ADDR
// hc_noskilllimit := true ;
27924: LD_ADDR_OWVAR 76
27928: PUSH
27929: LD_INT 1
27931: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
27932: LD_ADDR_OWVAR 31
27936: PUSH
27937: LD_INT 30
27939: PUSH
27940: LD_INT 30
27942: PUSH
27943: LD_INT 30
27945: PUSH
27946: LD_INT 30
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: LIST
27953: LIST
27954: ST_TO_ADDR
// un := CreateHuman ;
27955: LD_ADDR_VAR 0 3
27959: PUSH
27960: CALL_OW 44
27964: ST_TO_ADDR
// hc_noskilllimit := false ;
27965: LD_ADDR_OWVAR 76
27969: PUSH
27970: LD_INT 0
27972: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27973: LD_VAR 0 3
27977: PPUSH
27978: LD_INT 1
27980: PPUSH
27981: CALL_OW 51
// ToLua ( playRanger() ) ;
27985: LD_STRING playRanger()
27987: PPUSH
27988: CALL_OW 559
// p := 0 ;
27992: LD_ADDR_VAR 0 2
27996: PUSH
27997: LD_INT 0
27999: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28000: LD_INT 35
28002: PPUSH
28003: CALL_OW 67
// p := p + 1 ;
28007: LD_ADDR_VAR 0 2
28011: PUSH
28012: LD_VAR 0 2
28016: PUSH
28017: LD_INT 1
28019: PLUS
28020: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
28021: LD_VAR 0 3
28025: PPUSH
28026: CALL_OW 256
28030: PUSH
28031: LD_INT 1000
28033: LESS
28034: IFFALSE 28048
// SetLives ( un , 1000 ) ;
28036: LD_VAR 0 3
28040: PPUSH
28041: LD_INT 1000
28043: PPUSH
28044: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
28048: LD_VAR 0 3
28052: PPUSH
28053: LD_INT 81
28055: PUSH
28056: LD_OWVAR 2
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: PUSH
28065: LD_INT 91
28067: PUSH
28068: LD_VAR 0 3
28072: PUSH
28073: LD_INT 30
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: LIST
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: PPUSH
28085: CALL_OW 69
28089: PPUSH
28090: LD_VAR 0 3
28094: PPUSH
28095: CALL_OW 74
28099: PPUSH
28100: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
28104: LD_VAR 0 2
28108: PUSH
28109: LD_INT 80
28111: GREATER
28112: IFTRUE 28125
28114: PUSH
28115: LD_VAR 0 3
28119: PPUSH
28120: CALL_OW 301
28124: OR
28125: IFFALSE 28000
// if un then
28127: LD_VAR 0 3
28131: IFFALSE 28142
// RemoveUnit ( un ) ;
28133: LD_VAR 0 3
28137: PPUSH
28138: CALL_OW 64
// end ;
28142: PPOPN 3
28144: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
28145: LD_EXP 95
28149: IFFALSE 28265
28151: GO 28153
28153: DISABLE
28154: LD_INT 0
28156: PPUSH
28157: PPUSH
28158: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
28159: LD_ADDR_VAR 0 2
28163: PUSH
28164: LD_INT 81
28166: PUSH
28167: LD_OWVAR 2
28171: PUSH
28172: EMPTY
28173: LIST
28174: LIST
28175: PUSH
28176: LD_INT 21
28178: PUSH
28179: LD_INT 1
28181: PUSH
28182: EMPTY
28183: LIST
28184: LIST
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: PPUSH
28190: CALL_OW 69
28194: ST_TO_ADDR
// ToLua ( playComputer() ) ;
28195: LD_STRING playComputer()
28197: PPUSH
28198: CALL_OW 559
// if not tmp then
28202: LD_VAR 0 2
28206: NOT
28207: IFFALSE 28211
// exit ;
28209: GO 28265
// for i in tmp do
28211: LD_ADDR_VAR 0 1
28215: PUSH
28216: LD_VAR 0 2
28220: PUSH
28221: FOR_IN
28222: IFFALSE 28263
// for j := 1 to 4 do
28224: LD_ADDR_VAR 0 3
28228: PUSH
28229: DOUBLE
28230: LD_INT 1
28232: DEC
28233: ST_TO_ADDR
28234: LD_INT 4
28236: PUSH
28237: FOR_TO
28238: IFFALSE 28259
// SetSkill ( i , j , 10 ) ;
28240: LD_VAR 0 1
28244: PPUSH
28245: LD_VAR 0 3
28249: PPUSH
28250: LD_INT 10
28252: PPUSH
28253: CALL_OW 237
28257: GO 28237
28259: POP
28260: POP
28261: GO 28221
28263: POP
28264: POP
// end ;
28265: PPOPN 3
28267: END
// every 0 0$1 trigger s30 do var i , tmp ;
28268: LD_EXP 96
28272: IFFALSE 28341
28274: GO 28276
28276: DISABLE
28277: LD_INT 0
28279: PPUSH
28280: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28281: LD_ADDR_VAR 0 2
28285: PUSH
28286: LD_INT 22
28288: PUSH
28289: LD_OWVAR 2
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: PPUSH
28298: CALL_OW 69
28302: ST_TO_ADDR
// if not tmp then
28303: LD_VAR 0 2
28307: NOT
28308: IFFALSE 28312
// exit ;
28310: GO 28341
// for i in tmp do
28312: LD_ADDR_VAR 0 1
28316: PUSH
28317: LD_VAR 0 2
28321: PUSH
28322: FOR_IN
28323: IFFALSE 28339
// SetLives ( i , 300 ) ;
28325: LD_VAR 0 1
28329: PPUSH
28330: LD_INT 300
28332: PPUSH
28333: CALL_OW 234
28337: GO 28322
28339: POP
28340: POP
// end ;
28341: PPOPN 2
28343: END
// every 0 0$1 trigger s60 do var i , tmp ;
28344: LD_EXP 97
28348: IFFALSE 28417
28350: GO 28352
28352: DISABLE
28353: LD_INT 0
28355: PPUSH
28356: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28357: LD_ADDR_VAR 0 2
28361: PUSH
28362: LD_INT 22
28364: PUSH
28365: LD_OWVAR 2
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: PPUSH
28374: CALL_OW 69
28378: ST_TO_ADDR
// if not tmp then
28379: LD_VAR 0 2
28383: NOT
28384: IFFALSE 28388
// exit ;
28386: GO 28417
// for i in tmp do
28388: LD_ADDR_VAR 0 1
28392: PUSH
28393: LD_VAR 0 2
28397: PUSH
28398: FOR_IN
28399: IFFALSE 28415
// SetLives ( i , 600 ) ;
28401: LD_VAR 0 1
28405: PPUSH
28406: LD_INT 600
28408: PPUSH
28409: CALL_OW 234
28413: GO 28398
28415: POP
28416: POP
// end ;
28417: PPOPN 2
28419: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
28420: LD_INT 0
28422: PPUSH
// case cmd of 301 :
28423: LD_VAR 0 1
28427: PUSH
28428: LD_INT 301
28430: DOUBLE
28431: EQUAL
28432: IFTRUE 28436
28434: GO 28468
28436: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
28437: LD_VAR 0 6
28441: PPUSH
28442: LD_VAR 0 7
28446: PPUSH
28447: LD_VAR 0 8
28451: PPUSH
28452: LD_VAR 0 4
28456: PPUSH
28457: LD_VAR 0 5
28461: PPUSH
28462: CALL 29681 0 5
28466: GO 28589
28468: LD_INT 302
28470: DOUBLE
28471: EQUAL
28472: IFTRUE 28476
28474: GO 28513
28476: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
28477: LD_VAR 0 6
28481: PPUSH
28482: LD_VAR 0 7
28486: PPUSH
28487: LD_VAR 0 8
28491: PPUSH
28492: LD_VAR 0 9
28496: PPUSH
28497: LD_VAR 0 4
28501: PPUSH
28502: LD_VAR 0 5
28506: PPUSH
28507: CALL 29772 0 6
28511: GO 28589
28513: LD_INT 303
28515: DOUBLE
28516: EQUAL
28517: IFTRUE 28521
28519: GO 28558
28521: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
28522: LD_VAR 0 6
28526: PPUSH
28527: LD_VAR 0 7
28531: PPUSH
28532: LD_VAR 0 8
28536: PPUSH
28537: LD_VAR 0 9
28541: PPUSH
28542: LD_VAR 0 4
28546: PPUSH
28547: LD_VAR 0 5
28551: PPUSH
28552: CALL 28594 0 6
28556: GO 28589
28558: LD_INT 304
28560: DOUBLE
28561: EQUAL
28562: IFTRUE 28566
28564: GO 28588
28566: POP
// hHackTeleport ( unit , x , y ) ; end ;
28567: LD_VAR 0 2
28571: PPUSH
28572: LD_VAR 0 4
28576: PPUSH
28577: LD_VAR 0 5
28581: PPUSH
28582: CALL 30365 0 3
28586: GO 28589
28588: POP
// end ;
28589: LD_VAR 0 12
28593: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
28594: LD_INT 0
28596: PPUSH
28597: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
28598: LD_VAR 0 1
28602: PUSH
28603: LD_INT 1
28605: LESS
28606: IFTRUE 28618
28608: PUSH
28609: LD_VAR 0 1
28613: PUSH
28614: LD_INT 3
28616: GREATER
28617: OR
28618: IFTRUE 28636
28620: PUSH
28621: LD_VAR 0 5
28625: PPUSH
28626: LD_VAR 0 6
28630: PPUSH
28631: CALL_OW 428
28635: OR
28636: IFFALSE 28640
// exit ;
28638: GO 29368
// uc_side := your_side ;
28640: LD_ADDR_OWVAR 20
28644: PUSH
28645: LD_OWVAR 2
28649: ST_TO_ADDR
// uc_nation := nation ;
28650: LD_ADDR_OWVAR 21
28654: PUSH
28655: LD_VAR 0 1
28659: ST_TO_ADDR
// bc_level = 1 ;
28660: LD_ADDR_OWVAR 43
28664: PUSH
28665: LD_INT 1
28667: ST_TO_ADDR
// case btype of 1 :
28668: LD_VAR 0 2
28672: PUSH
28673: LD_INT 1
28675: DOUBLE
28676: EQUAL
28677: IFTRUE 28681
28679: GO 28692
28681: POP
// bc_type := b_depot ; 2 :
28682: LD_ADDR_OWVAR 42
28686: PUSH
28687: LD_INT 0
28689: ST_TO_ADDR
28690: GO 29312
28692: LD_INT 2
28694: DOUBLE
28695: EQUAL
28696: IFTRUE 28700
28698: GO 28711
28700: POP
// bc_type := b_warehouse ; 3 :
28701: LD_ADDR_OWVAR 42
28705: PUSH
28706: LD_INT 1
28708: ST_TO_ADDR
28709: GO 29312
28711: LD_INT 3
28713: DOUBLE
28714: EQUAL
28715: IFTRUE 28719
28717: GO 28730
28719: POP
// bc_type := b_lab ; 4 .. 9 :
28720: LD_ADDR_OWVAR 42
28724: PUSH
28725: LD_INT 6
28727: ST_TO_ADDR
28728: GO 29312
28730: LD_INT 4
28732: DOUBLE
28733: GREATEREQUAL
28734: IFFALSE 28742
28736: LD_INT 9
28738: DOUBLE
28739: LESSEQUAL
28740: IFTRUE 28744
28742: GO 28804
28744: POP
// begin bc_type := b_lab_half ;
28745: LD_ADDR_OWVAR 42
28749: PUSH
28750: LD_INT 7
28752: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
28753: LD_ADDR_OWVAR 44
28757: PUSH
28758: LD_INT 10
28760: PUSH
28761: LD_INT 11
28763: PUSH
28764: LD_INT 12
28766: PUSH
28767: LD_INT 15
28769: PUSH
28770: LD_INT 14
28772: PUSH
28773: LD_INT 13
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: LIST
28780: LIST
28781: LIST
28782: LIST
28783: PUSH
28784: LD_VAR 0 2
28788: PUSH
28789: LD_INT 3
28791: MINUS
28792: ARRAY
28793: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
28794: LD_ADDR_OWVAR 45
28798: PUSH
28799: LD_INT 9
28801: ST_TO_ADDR
// end ; 10 .. 13 :
28802: GO 29312
28804: LD_INT 10
28806: DOUBLE
28807: GREATEREQUAL
28808: IFFALSE 28816
28810: LD_INT 13
28812: DOUBLE
28813: LESSEQUAL
28814: IFTRUE 28818
28816: GO 28895
28818: POP
// begin bc_type := b_lab_full ;
28819: LD_ADDR_OWVAR 42
28823: PUSH
28824: LD_INT 8
28826: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
28827: LD_ADDR_OWVAR 44
28831: PUSH
28832: LD_INT 10
28834: PUSH
28835: LD_INT 12
28837: PUSH
28838: LD_INT 14
28840: PUSH
28841: LD_INT 13
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: LIST
28848: LIST
28849: PUSH
28850: LD_VAR 0 2
28854: PUSH
28855: LD_INT 9
28857: MINUS
28858: ARRAY
28859: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
28860: LD_ADDR_OWVAR 45
28864: PUSH
28865: LD_INT 11
28867: PUSH
28868: LD_INT 15
28870: PUSH
28871: LD_INT 12
28873: PUSH
28874: LD_INT 15
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: LIST
28881: LIST
28882: PUSH
28883: LD_VAR 0 2
28887: PUSH
28888: LD_INT 9
28890: MINUS
28891: ARRAY
28892: ST_TO_ADDR
// end ; 14 :
28893: GO 29312
28895: LD_INT 14
28897: DOUBLE
28898: EQUAL
28899: IFTRUE 28903
28901: GO 28914
28903: POP
// bc_type := b_workshop ; 15 :
28904: LD_ADDR_OWVAR 42
28908: PUSH
28909: LD_INT 2
28911: ST_TO_ADDR
28912: GO 29312
28914: LD_INT 15
28916: DOUBLE
28917: EQUAL
28918: IFTRUE 28922
28920: GO 28933
28922: POP
// bc_type := b_factory ; 16 :
28923: LD_ADDR_OWVAR 42
28927: PUSH
28928: LD_INT 3
28930: ST_TO_ADDR
28931: GO 29312
28933: LD_INT 16
28935: DOUBLE
28936: EQUAL
28937: IFTRUE 28941
28939: GO 28952
28941: POP
// bc_type := b_ext_gun ; 17 :
28942: LD_ADDR_OWVAR 42
28946: PUSH
28947: LD_INT 17
28949: ST_TO_ADDR
28950: GO 29312
28952: LD_INT 17
28954: DOUBLE
28955: EQUAL
28956: IFTRUE 28960
28958: GO 28988
28960: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
28961: LD_ADDR_OWVAR 42
28965: PUSH
28966: LD_INT 19
28968: PUSH
28969: LD_INT 23
28971: PUSH
28972: LD_INT 19
28974: PUSH
28975: EMPTY
28976: LIST
28977: LIST
28978: LIST
28979: PUSH
28980: LD_VAR 0 1
28984: ARRAY
28985: ST_TO_ADDR
28986: GO 29312
28988: LD_INT 18
28990: DOUBLE
28991: EQUAL
28992: IFTRUE 28996
28994: GO 29007
28996: POP
// bc_type := b_ext_radar ; 19 :
28997: LD_ADDR_OWVAR 42
29001: PUSH
29002: LD_INT 20
29004: ST_TO_ADDR
29005: GO 29312
29007: LD_INT 19
29009: DOUBLE
29010: EQUAL
29011: IFTRUE 29015
29013: GO 29026
29015: POP
// bc_type := b_ext_radio ; 20 :
29016: LD_ADDR_OWVAR 42
29020: PUSH
29021: LD_INT 22
29023: ST_TO_ADDR
29024: GO 29312
29026: LD_INT 20
29028: DOUBLE
29029: EQUAL
29030: IFTRUE 29034
29032: GO 29045
29034: POP
// bc_type := b_ext_siberium ; 21 :
29035: LD_ADDR_OWVAR 42
29039: PUSH
29040: LD_INT 21
29042: ST_TO_ADDR
29043: GO 29312
29045: LD_INT 21
29047: DOUBLE
29048: EQUAL
29049: IFTRUE 29053
29051: GO 29064
29053: POP
// bc_type := b_ext_computer ; 22 :
29054: LD_ADDR_OWVAR 42
29058: PUSH
29059: LD_INT 24
29061: ST_TO_ADDR
29062: GO 29312
29064: LD_INT 22
29066: DOUBLE
29067: EQUAL
29068: IFTRUE 29072
29070: GO 29083
29072: POP
// bc_type := b_ext_track ; 23 :
29073: LD_ADDR_OWVAR 42
29077: PUSH
29078: LD_INT 16
29080: ST_TO_ADDR
29081: GO 29312
29083: LD_INT 23
29085: DOUBLE
29086: EQUAL
29087: IFTRUE 29091
29089: GO 29102
29091: POP
// bc_type := b_ext_laser ; 24 :
29092: LD_ADDR_OWVAR 42
29096: PUSH
29097: LD_INT 25
29099: ST_TO_ADDR
29100: GO 29312
29102: LD_INT 24
29104: DOUBLE
29105: EQUAL
29106: IFTRUE 29110
29108: GO 29121
29110: POP
// bc_type := b_control_tower ; 25 :
29111: LD_ADDR_OWVAR 42
29115: PUSH
29116: LD_INT 36
29118: ST_TO_ADDR
29119: GO 29312
29121: LD_INT 25
29123: DOUBLE
29124: EQUAL
29125: IFTRUE 29129
29127: GO 29140
29129: POP
// bc_type := b_breastwork ; 26 :
29130: LD_ADDR_OWVAR 42
29134: PUSH
29135: LD_INT 31
29137: ST_TO_ADDR
29138: GO 29312
29140: LD_INT 26
29142: DOUBLE
29143: EQUAL
29144: IFTRUE 29148
29146: GO 29159
29148: POP
// bc_type := b_bunker ; 27 :
29149: LD_ADDR_OWVAR 42
29153: PUSH
29154: LD_INT 32
29156: ST_TO_ADDR
29157: GO 29312
29159: LD_INT 27
29161: DOUBLE
29162: EQUAL
29163: IFTRUE 29167
29165: GO 29178
29167: POP
// bc_type := b_turret ; 28 :
29168: LD_ADDR_OWVAR 42
29172: PUSH
29173: LD_INT 33
29175: ST_TO_ADDR
29176: GO 29312
29178: LD_INT 28
29180: DOUBLE
29181: EQUAL
29182: IFTRUE 29186
29184: GO 29197
29186: POP
// bc_type := b_armoury ; 29 :
29187: LD_ADDR_OWVAR 42
29191: PUSH
29192: LD_INT 4
29194: ST_TO_ADDR
29195: GO 29312
29197: LD_INT 29
29199: DOUBLE
29200: EQUAL
29201: IFTRUE 29205
29203: GO 29216
29205: POP
// bc_type := b_barracks ; 30 :
29206: LD_ADDR_OWVAR 42
29210: PUSH
29211: LD_INT 5
29213: ST_TO_ADDR
29214: GO 29312
29216: LD_INT 30
29218: DOUBLE
29219: EQUAL
29220: IFTRUE 29224
29222: GO 29235
29224: POP
// bc_type := b_solar_power ; 31 :
29225: LD_ADDR_OWVAR 42
29229: PUSH
29230: LD_INT 27
29232: ST_TO_ADDR
29233: GO 29312
29235: LD_INT 31
29237: DOUBLE
29238: EQUAL
29239: IFTRUE 29243
29241: GO 29254
29243: POP
// bc_type := b_oil_power ; 32 :
29244: LD_ADDR_OWVAR 42
29248: PUSH
29249: LD_INT 26
29251: ST_TO_ADDR
29252: GO 29312
29254: LD_INT 32
29256: DOUBLE
29257: EQUAL
29258: IFTRUE 29262
29260: GO 29273
29262: POP
// bc_type := b_siberite_power ; 33 :
29263: LD_ADDR_OWVAR 42
29267: PUSH
29268: LD_INT 28
29270: ST_TO_ADDR
29271: GO 29312
29273: LD_INT 33
29275: DOUBLE
29276: EQUAL
29277: IFTRUE 29281
29279: GO 29292
29281: POP
// bc_type := b_oil_mine ; 34 :
29282: LD_ADDR_OWVAR 42
29286: PUSH
29287: LD_INT 29
29289: ST_TO_ADDR
29290: GO 29312
29292: LD_INT 34
29294: DOUBLE
29295: EQUAL
29296: IFTRUE 29300
29298: GO 29311
29300: POP
// bc_type := b_siberite_mine ; end ;
29301: LD_ADDR_OWVAR 42
29305: PUSH
29306: LD_INT 30
29308: ST_TO_ADDR
29309: GO 29312
29311: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
29312: LD_ADDR_VAR 0 8
29316: PUSH
29317: LD_VAR 0 5
29321: PPUSH
29322: LD_VAR 0 6
29326: PPUSH
29327: LD_VAR 0 3
29331: PPUSH
29332: CALL_OW 47
29336: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
29337: LD_OWVAR 42
29341: PUSH
29342: LD_INT 32
29344: PUSH
29345: LD_INT 33
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: IN
29352: IFFALSE 29368
// PlaceWeaponTurret ( b , weapon ) ;
29354: LD_VAR 0 8
29358: PPUSH
29359: LD_VAR 0 4
29363: PPUSH
29364: CALL_OW 431
// end ;
29368: LD_VAR 0 7
29372: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
29373: LD_INT 0
29375: PPUSH
29376: PPUSH
29377: PPUSH
29378: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29379: LD_ADDR_VAR 0 4
29383: PUSH
29384: LD_INT 22
29386: PUSH
29387: LD_OWVAR 2
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: PUSH
29396: LD_INT 2
29398: PUSH
29399: LD_INT 30
29401: PUSH
29402: LD_INT 0
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PUSH
29409: LD_INT 30
29411: PUSH
29412: LD_INT 1
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: LIST
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: PPUSH
29428: CALL_OW 69
29432: ST_TO_ADDR
// if not tmp then
29433: LD_VAR 0 4
29437: NOT
29438: IFFALSE 29442
// exit ;
29440: GO 29501
// for i in tmp do
29442: LD_ADDR_VAR 0 2
29446: PUSH
29447: LD_VAR 0 4
29451: PUSH
29452: FOR_IN
29453: IFFALSE 29499
// for j = 1 to 3 do
29455: LD_ADDR_VAR 0 3
29459: PUSH
29460: DOUBLE
29461: LD_INT 1
29463: DEC
29464: ST_TO_ADDR
29465: LD_INT 3
29467: PUSH
29468: FOR_TO
29469: IFFALSE 29495
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
29471: LD_VAR 0 2
29475: PPUSH
29476: CALL_OW 274
29480: PPUSH
29481: LD_VAR 0 3
29485: PPUSH
29486: LD_INT 99999
29488: PPUSH
29489: CALL_OW 277
29493: GO 29468
29495: POP
29496: POP
29497: GO 29452
29499: POP
29500: POP
// end ;
29501: LD_VAR 0 1
29505: RET
// export function hHackSetLevel10 ; var i , j ; begin
29506: LD_INT 0
29508: PPUSH
29509: PPUSH
29510: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29511: LD_ADDR_VAR 0 2
29515: PUSH
29516: LD_INT 21
29518: PUSH
29519: LD_INT 1
29521: PUSH
29522: EMPTY
29523: LIST
29524: LIST
29525: PPUSH
29526: CALL_OW 69
29530: PUSH
29531: FOR_IN
29532: IFFALSE 29584
// if IsSelected ( i ) then
29534: LD_VAR 0 2
29538: PPUSH
29539: CALL_OW 306
29543: IFFALSE 29582
// begin for j := 1 to 4 do
29545: LD_ADDR_VAR 0 3
29549: PUSH
29550: DOUBLE
29551: LD_INT 1
29553: DEC
29554: ST_TO_ADDR
29555: LD_INT 4
29557: PUSH
29558: FOR_TO
29559: IFFALSE 29580
// SetSkill ( i , j , 10 ) ;
29561: LD_VAR 0 2
29565: PPUSH
29566: LD_VAR 0 3
29570: PPUSH
29571: LD_INT 10
29573: PPUSH
29574: CALL_OW 237
29578: GO 29558
29580: POP
29581: POP
// end ;
29582: GO 29531
29584: POP
29585: POP
// end ;
29586: LD_VAR 0 1
29590: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
29591: LD_INT 0
29593: PPUSH
29594: PPUSH
29595: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
29596: LD_ADDR_VAR 0 2
29600: PUSH
29601: LD_INT 22
29603: PUSH
29604: LD_OWVAR 2
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: PUSH
29613: LD_INT 21
29615: PUSH
29616: LD_INT 1
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: PUSH
29623: EMPTY
29624: LIST
29625: LIST
29626: PPUSH
29627: CALL_OW 69
29631: PUSH
29632: FOR_IN
29633: IFFALSE 29674
// begin for j := 1 to 4 do
29635: LD_ADDR_VAR 0 3
29639: PUSH
29640: DOUBLE
29641: LD_INT 1
29643: DEC
29644: ST_TO_ADDR
29645: LD_INT 4
29647: PUSH
29648: FOR_TO
29649: IFFALSE 29670
// SetSkill ( i , j , 10 ) ;
29651: LD_VAR 0 2
29655: PPUSH
29656: LD_VAR 0 3
29660: PPUSH
29661: LD_INT 10
29663: PPUSH
29664: CALL_OW 237
29668: GO 29648
29670: POP
29671: POP
// end ;
29672: GO 29632
29674: POP
29675: POP
// end ;
29676: LD_VAR 0 1
29680: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
29681: LD_INT 0
29683: PPUSH
// uc_side := your_side ;
29684: LD_ADDR_OWVAR 20
29688: PUSH
29689: LD_OWVAR 2
29693: ST_TO_ADDR
// uc_nation := nation ;
29694: LD_ADDR_OWVAR 21
29698: PUSH
29699: LD_VAR 0 1
29703: ST_TO_ADDR
// InitHc ;
29704: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
29708: LD_INT 0
29710: PPUSH
29711: LD_VAR 0 2
29715: PPUSH
29716: LD_VAR 0 3
29720: PPUSH
29721: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
29725: LD_VAR 0 4
29729: PPUSH
29730: LD_VAR 0 5
29734: PPUSH
29735: CALL_OW 428
29739: PUSH
29740: LD_INT 0
29742: EQUAL
29743: IFFALSE 29767
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
29745: CALL_OW 44
29749: PPUSH
29750: LD_VAR 0 4
29754: PPUSH
29755: LD_VAR 0 5
29759: PPUSH
29760: LD_INT 1
29762: PPUSH
29763: CALL_OW 48
// end ;
29767: LD_VAR 0 6
29771: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
29772: LD_INT 0
29774: PPUSH
29775: PPUSH
// uc_side := your_side ;
29776: LD_ADDR_OWVAR 20
29780: PUSH
29781: LD_OWVAR 2
29785: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
29786: LD_VAR 0 1
29790: PUSH
29791: LD_INT 1
29793: PUSH
29794: LD_INT 2
29796: PUSH
29797: LD_INT 3
29799: PUSH
29800: LD_INT 4
29802: PUSH
29803: LD_INT 5
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: LIST
29810: LIST
29811: LIST
29812: IN
29813: IFFALSE 29825
// uc_nation := nation_american else
29815: LD_ADDR_OWVAR 21
29819: PUSH
29820: LD_INT 1
29822: ST_TO_ADDR
29823: GO 29868
// if chassis in [ 11 , 12 , 13 , 14 ] then
29825: LD_VAR 0 1
29829: PUSH
29830: LD_INT 11
29832: PUSH
29833: LD_INT 12
29835: PUSH
29836: LD_INT 13
29838: PUSH
29839: LD_INT 14
29841: PUSH
29842: EMPTY
29843: LIST
29844: LIST
29845: LIST
29846: LIST
29847: IN
29848: IFFALSE 29860
// uc_nation := nation_arabian else
29850: LD_ADDR_OWVAR 21
29854: PUSH
29855: LD_INT 2
29857: ST_TO_ADDR
29858: GO 29868
// uc_nation := nation_russian ;
29860: LD_ADDR_OWVAR 21
29864: PUSH
29865: LD_INT 3
29867: ST_TO_ADDR
// vc_chassis := chassis ;
29868: LD_ADDR_OWVAR 37
29872: PUSH
29873: LD_VAR 0 1
29877: ST_TO_ADDR
// vc_engine := engine ;
29878: LD_ADDR_OWVAR 39
29882: PUSH
29883: LD_VAR 0 2
29887: ST_TO_ADDR
// vc_control := control ;
29888: LD_ADDR_OWVAR 38
29892: PUSH
29893: LD_VAR 0 3
29897: ST_TO_ADDR
// vc_weapon := weapon ;
29898: LD_ADDR_OWVAR 40
29902: PUSH
29903: LD_VAR 0 4
29907: ST_TO_ADDR
// un := CreateVehicle ;
29908: LD_ADDR_VAR 0 8
29912: PUSH
29913: CALL_OW 45
29917: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
29918: LD_VAR 0 8
29922: PPUSH
29923: LD_INT 0
29925: PPUSH
29926: LD_INT 5
29928: PPUSH
29929: CALL_OW 12
29933: PPUSH
29934: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
29938: LD_VAR 0 8
29942: PPUSH
29943: LD_VAR 0 5
29947: PPUSH
29948: LD_VAR 0 6
29952: PPUSH
29953: LD_INT 1
29955: PPUSH
29956: CALL_OW 48
// end ;
29960: LD_VAR 0 7
29964: RET
// export hInvincible ; every 1 do
29965: GO 29967
29967: DISABLE
// hInvincible := [ ] ;
29968: LD_ADDR_EXP 98
29972: PUSH
29973: EMPTY
29974: ST_TO_ADDR
29975: END
// every 10 do var i ;
29976: GO 29978
29978: DISABLE
29979: LD_INT 0
29981: PPUSH
// begin enable ;
29982: ENABLE
// if not hInvincible then
29983: LD_EXP 98
29987: NOT
29988: IFFALSE 29992
// exit ;
29990: GO 30036
// for i in hInvincible do
29992: LD_ADDR_VAR 0 1
29996: PUSH
29997: LD_EXP 98
30001: PUSH
30002: FOR_IN
30003: IFFALSE 30034
// if GetLives ( i ) < 1000 then
30005: LD_VAR 0 1
30009: PPUSH
30010: CALL_OW 256
30014: PUSH
30015: LD_INT 1000
30017: LESS
30018: IFFALSE 30032
// SetLives ( i , 1000 ) ;
30020: LD_VAR 0 1
30024: PPUSH
30025: LD_INT 1000
30027: PPUSH
30028: CALL_OW 234
30032: GO 30002
30034: POP
30035: POP
// end ;
30036: PPOPN 1
30038: END
// export function hHackInvincible ; var i ; begin
30039: LD_INT 0
30041: PPUSH
30042: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
30043: LD_ADDR_VAR 0 2
30047: PUSH
30048: LD_INT 2
30050: PUSH
30051: LD_INT 21
30053: PUSH
30054: LD_INT 1
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: PUSH
30061: LD_INT 21
30063: PUSH
30064: LD_INT 2
30066: PUSH
30067: EMPTY
30068: LIST
30069: LIST
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: LIST
30075: PPUSH
30076: CALL_OW 69
30080: PUSH
30081: FOR_IN
30082: IFFALSE 30143
// if IsSelected ( i ) then
30084: LD_VAR 0 2
30088: PPUSH
30089: CALL_OW 306
30093: IFFALSE 30141
// begin if i in hInvincible then
30095: LD_VAR 0 2
30099: PUSH
30100: LD_EXP 98
30104: IN
30105: IFFALSE 30125
// hInvincible := hInvincible diff i else
30107: LD_ADDR_EXP 98
30111: PUSH
30112: LD_EXP 98
30116: PUSH
30117: LD_VAR 0 2
30121: DIFF
30122: ST_TO_ADDR
30123: GO 30141
// hInvincible := hInvincible union i ;
30125: LD_ADDR_EXP 98
30129: PUSH
30130: LD_EXP 98
30134: PUSH
30135: LD_VAR 0 2
30139: UNION
30140: ST_TO_ADDR
// end ;
30141: GO 30081
30143: POP
30144: POP
// end ;
30145: LD_VAR 0 1
30149: RET
// export function hHackInvisible ; var i , j ; begin
30150: LD_INT 0
30152: PPUSH
30153: PPUSH
30154: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30155: LD_ADDR_VAR 0 2
30159: PUSH
30160: LD_INT 21
30162: PUSH
30163: LD_INT 1
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PPUSH
30170: CALL_OW 69
30174: PUSH
30175: FOR_IN
30176: IFFALSE 30200
// if IsSelected ( i ) then
30178: LD_VAR 0 2
30182: PPUSH
30183: CALL_OW 306
30187: IFFALSE 30198
// ComForceInvisible ( i ) ;
30189: LD_VAR 0 2
30193: PPUSH
30194: CALL_OW 496
30198: GO 30175
30200: POP
30201: POP
// end ;
30202: LD_VAR 0 1
30206: RET
// export function hHackChangeYourSide ; begin
30207: LD_INT 0
30209: PPUSH
// if your_side = 8 then
30210: LD_OWVAR 2
30214: PUSH
30215: LD_INT 8
30217: EQUAL
30218: IFFALSE 30230
// your_side := 0 else
30220: LD_ADDR_OWVAR 2
30224: PUSH
30225: LD_INT 0
30227: ST_TO_ADDR
30228: GO 30244
// your_side := your_side + 1 ;
30230: LD_ADDR_OWVAR 2
30234: PUSH
30235: LD_OWVAR 2
30239: PUSH
30240: LD_INT 1
30242: PLUS
30243: ST_TO_ADDR
// end ;
30244: LD_VAR 0 1
30248: RET
// export function hHackChangeUnitSide ; var i , j ; begin
30249: LD_INT 0
30251: PPUSH
30252: PPUSH
30253: PPUSH
// for i in all_units do
30254: LD_ADDR_VAR 0 2
30258: PUSH
30259: LD_OWVAR 3
30263: PUSH
30264: FOR_IN
30265: IFFALSE 30343
// if IsSelected ( i ) then
30267: LD_VAR 0 2
30271: PPUSH
30272: CALL_OW 306
30276: IFFALSE 30341
// begin j := GetSide ( i ) ;
30278: LD_ADDR_VAR 0 3
30282: PUSH
30283: LD_VAR 0 2
30287: PPUSH
30288: CALL_OW 255
30292: ST_TO_ADDR
// if j = 8 then
30293: LD_VAR 0 3
30297: PUSH
30298: LD_INT 8
30300: EQUAL
30301: IFFALSE 30313
// j := 0 else
30303: LD_ADDR_VAR 0 3
30307: PUSH
30308: LD_INT 0
30310: ST_TO_ADDR
30311: GO 30327
// j := j + 1 ;
30313: LD_ADDR_VAR 0 3
30317: PUSH
30318: LD_VAR 0 3
30322: PUSH
30323: LD_INT 1
30325: PLUS
30326: ST_TO_ADDR
// SetSide ( i , j ) ;
30327: LD_VAR 0 2
30331: PPUSH
30332: LD_VAR 0 3
30336: PPUSH
30337: CALL_OW 235
// end ;
30341: GO 30264
30343: POP
30344: POP
// end ;
30345: LD_VAR 0 1
30349: RET
// export function hHackFog ; begin
30350: LD_INT 0
30352: PPUSH
// FogOff ( true ) ;
30353: LD_INT 1
30355: PPUSH
30356: CALL_OW 344
// end ;
30360: LD_VAR 0 1
30364: RET
// export function hHackTeleport ( unit , x , y ) ; begin
30365: LD_INT 0
30367: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
30368: LD_VAR 0 1
30372: PPUSH
30373: LD_VAR 0 2
30377: PPUSH
30378: LD_VAR 0 3
30382: PPUSH
30383: LD_INT 1
30385: PPUSH
30386: LD_INT 1
30388: PPUSH
30389: CALL_OW 483
// CenterOnXY ( x , y ) ;
30393: LD_VAR 0 2
30397: PPUSH
30398: LD_VAR 0 3
30402: PPUSH
30403: CALL_OW 84
// end ;
30407: LD_VAR 0 4
30411: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
30412: LD_INT 0
30414: PPUSH
30415: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
30416: LD_VAR 0 1
30420: NOT
30421: IFTRUE 30440
30423: PUSH
30424: LD_VAR 0 2
30428: PPUSH
30429: LD_VAR 0 3
30433: PPUSH
30434: CALL_OW 488
30438: NOT
30439: OR
30440: IFTRUE 30475
30442: PUSH
30443: LD_VAR 0 1
30447: PPUSH
30448: CALL_OW 266
30452: PUSH
30453: LD_INT 3
30455: NONEQUAL
30456: IFFALSE 30474
30458: PUSH
30459: LD_VAR 0 1
30463: PPUSH
30464: CALL_OW 247
30468: PUSH
30469: LD_INT 1
30471: EQUAL
30472: NOT
30473: AND
30474: OR
30475: IFFALSE 30479
// exit ;
30477: GO 30761
// if GetType ( factory ) = unit_human then
30479: LD_VAR 0 1
30483: PPUSH
30484: CALL_OW 247
30488: PUSH
30489: LD_INT 1
30491: EQUAL
30492: IFFALSE 30509
// factory := IsInUnit ( factory ) ;
30494: LD_ADDR_VAR 0 1
30498: PUSH
30499: LD_VAR 0 1
30503: PPUSH
30504: CALL_OW 310
30508: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
30509: LD_VAR 0 1
30513: PPUSH
30514: CALL_OW 266
30518: PUSH
30519: LD_INT 3
30521: NONEQUAL
30522: IFFALSE 30526
// exit ;
30524: GO 30761
// for i := 1 to Count ( factoryWaypoints ) do
30526: LD_ADDR_VAR 0 5
30530: PUSH
30531: DOUBLE
30532: LD_INT 1
30534: DEC
30535: ST_TO_ADDR
30536: LD_EXP 99
30540: PPUSH
30541: CALL 40294 0 1
30545: PUSH
30546: FOR_TO
30547: IFFALSE 30709
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
30549: LD_VAR 0 2
30553: PPUSH
30554: LD_VAR 0 3
30558: PPUSH
30559: CALL_OW 428
30563: PUSH
30564: LD_EXP 99
30568: PUSH
30569: LD_VAR 0 5
30573: ARRAY
30574: PUSH
30575: LD_INT 2
30577: ARRAY
30578: EQUAL
30579: IFFALSE 30611
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
30581: LD_ADDR_EXP 99
30585: PUSH
30586: LD_EXP 99
30590: PPUSH
30591: LD_VAR 0 5
30595: PPUSH
30596: CALL_OW 3
30600: ST_TO_ADDR
// UpdateFactoryWaypoints ;
30601: CALL 30766 0 0
// exit ;
30605: POP
30606: POP
30607: GO 30761
// end else
30609: GO 30707
// if factory = factoryWaypoints [ i ] [ 2 ] then
30611: LD_VAR 0 1
30615: PUSH
30616: LD_EXP 99
30620: PUSH
30621: LD_VAR 0 5
30625: ARRAY
30626: PUSH
30627: LD_INT 2
30629: ARRAY
30630: EQUAL
30631: IFFALSE 30707
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
30633: LD_ADDR_EXP 99
30637: PUSH
30638: LD_EXP 99
30642: PPUSH
30643: LD_VAR 0 5
30647: PPUSH
30648: CALL_OW 3
30652: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
30653: LD_ADDR_EXP 99
30657: PUSH
30658: LD_EXP 99
30662: PPUSH
30663: LD_VAR 0 1
30667: PPUSH
30668: CALL_OW 255
30672: PUSH
30673: LD_VAR 0 1
30677: PUSH
30678: LD_VAR 0 2
30682: PUSH
30683: LD_VAR 0 3
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: PPUSH
30694: CALL 76226 0 2
30698: ST_TO_ADDR
// UpdateFactoryWaypoints ;
30699: CALL 30766 0 0
// exit ;
30703: POP
30704: POP
30705: GO 30761
// end ; end ;
30707: GO 30546
30709: POP
30710: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
30711: LD_ADDR_EXP 99
30715: PUSH
30716: LD_EXP 99
30720: PPUSH
30721: LD_VAR 0 1
30725: PPUSH
30726: CALL_OW 255
30730: PUSH
30731: LD_VAR 0 1
30735: PUSH
30736: LD_VAR 0 2
30740: PUSH
30741: LD_VAR 0 3
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: LIST
30750: LIST
30751: PPUSH
30752: CALL 76226 0 2
30756: ST_TO_ADDR
// UpdateFactoryWaypoints ;
30757: CALL 30766 0 0
// end ;
30761: LD_VAR 0 4
30765: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
30766: LD_INT 0
30768: PPUSH
30769: PPUSH
30770: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
30771: LD_STRING resetFactoryWaypoint();
30773: PPUSH
30774: CALL_OW 559
// if factoryWaypoints then
30778: LD_EXP 99
30782: IFFALSE 30903
// begin list := factoryWaypoints ;
30784: LD_ADDR_VAR 0 3
30788: PUSH
30789: LD_EXP 99
30793: ST_TO_ADDR
// for i := 1 to list do
30794: LD_ADDR_VAR 0 2
30798: PUSH
30799: DOUBLE
30800: LD_INT 1
30802: DEC
30803: ST_TO_ADDR
30804: LD_VAR 0 3
30808: PUSH
30809: FOR_TO
30810: IFFALSE 30901
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
30812: LD_STRING setFactoryWaypointXY(
30814: PUSH
30815: LD_VAR 0 3
30819: PUSH
30820: LD_VAR 0 2
30824: ARRAY
30825: PUSH
30826: LD_INT 1
30828: ARRAY
30829: STR
30830: PUSH
30831: LD_STRING ,
30833: STR
30834: PUSH
30835: LD_VAR 0 3
30839: PUSH
30840: LD_VAR 0 2
30844: ARRAY
30845: PUSH
30846: LD_INT 2
30848: ARRAY
30849: STR
30850: PUSH
30851: LD_STRING ,
30853: STR
30854: PUSH
30855: LD_VAR 0 3
30859: PUSH
30860: LD_VAR 0 2
30864: ARRAY
30865: PUSH
30866: LD_INT 3
30868: ARRAY
30869: STR
30870: PUSH
30871: LD_STRING ,
30873: STR
30874: PUSH
30875: LD_VAR 0 3
30879: PUSH
30880: LD_VAR 0 2
30884: ARRAY
30885: PUSH
30886: LD_INT 4
30888: ARRAY
30889: STR
30890: PUSH
30891: LD_STRING )
30893: STR
30894: PPUSH
30895: CALL_OW 559
30899: GO 30809
30901: POP
30902: POP
// end ; end ;
30903: LD_VAR 0 1
30907: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
30908: LD_INT 0
30910: PPUSH
// if HexInfo ( x , y ) = warehouse then
30911: LD_VAR 0 2
30915: PPUSH
30916: LD_VAR 0 3
30920: PPUSH
30921: CALL_OW 428
30925: PUSH
30926: LD_VAR 0 1
30930: EQUAL
30931: IFFALSE 30958
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
30933: LD_ADDR_EXP 101
30937: PUSH
30938: LD_EXP 101
30942: PPUSH
30943: LD_VAR 0 1
30947: PPUSH
30948: LD_INT 0
30950: PPUSH
30951: CALL_OW 1
30955: ST_TO_ADDR
30956: GO 31009
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
30958: LD_ADDR_EXP 101
30962: PUSH
30963: LD_EXP 101
30967: PPUSH
30968: LD_VAR 0 1
30972: PPUSH
30973: LD_VAR 0 1
30977: PPUSH
30978: CALL_OW 255
30982: PUSH
30983: LD_VAR 0 1
30987: PUSH
30988: LD_VAR 0 2
30992: PUSH
30993: LD_VAR 0 3
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: LIST
31002: LIST
31003: PPUSH
31004: CALL_OW 1
31008: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
31009: CALL 31018 0 0
// end ;
31013: LD_VAR 0 4
31017: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
31018: LD_INT 0
31020: PPUSH
31021: PPUSH
31022: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
31023: LD_STRING resetWarehouseGatheringPoints();
31025: PPUSH
31026: CALL_OW 559
// if warehouseGatheringPoints then
31030: LD_EXP 101
31034: IFFALSE 31160
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
31036: LD_ADDR_VAR 0 3
31040: PUSH
31041: LD_EXP 101
31045: PPUSH
31046: CALL 80160 0 1
31050: ST_TO_ADDR
// for i := 1 to list do
31051: LD_ADDR_VAR 0 2
31055: PUSH
31056: DOUBLE
31057: LD_INT 1
31059: DEC
31060: ST_TO_ADDR
31061: LD_VAR 0 3
31065: PUSH
31066: FOR_TO
31067: IFFALSE 31158
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
31069: LD_STRING setWarehouseGatheringPointXY(
31071: PUSH
31072: LD_VAR 0 3
31076: PUSH
31077: LD_VAR 0 2
31081: ARRAY
31082: PUSH
31083: LD_INT 1
31085: ARRAY
31086: STR
31087: PUSH
31088: LD_STRING ,
31090: STR
31091: PUSH
31092: LD_VAR 0 3
31096: PUSH
31097: LD_VAR 0 2
31101: ARRAY
31102: PUSH
31103: LD_INT 2
31105: ARRAY
31106: STR
31107: PUSH
31108: LD_STRING ,
31110: STR
31111: PUSH
31112: LD_VAR 0 3
31116: PUSH
31117: LD_VAR 0 2
31121: ARRAY
31122: PUSH
31123: LD_INT 3
31125: ARRAY
31126: STR
31127: PUSH
31128: LD_STRING ,
31130: STR
31131: PUSH
31132: LD_VAR 0 3
31136: PUSH
31137: LD_VAR 0 2
31141: ARRAY
31142: PUSH
31143: LD_INT 4
31145: ARRAY
31146: STR
31147: PUSH
31148: LD_STRING )
31150: STR
31151: PPUSH
31152: CALL_OW 559
31156: GO 31066
31158: POP
31159: POP
// end ; end ;
31160: LD_VAR 0 1
31164: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
31165: LD_EXP 101
31169: IFFALSE 31864
31171: GO 31173
31173: DISABLE
31174: LD_INT 0
31176: PPUSH
31177: PPUSH
31178: PPUSH
31179: PPUSH
31180: PPUSH
31181: PPUSH
31182: PPUSH
31183: PPUSH
31184: PPUSH
// begin enable ;
31185: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
31186: LD_ADDR_VAR 0 3
31190: PUSH
31191: LD_EXP 101
31195: PPUSH
31196: CALL 80160 0 1
31200: ST_TO_ADDR
// if not list then
31201: LD_VAR 0 3
31205: NOT
31206: IFFALSE 31210
// exit ;
31208: GO 31864
// for i := 1 to list do
31210: LD_ADDR_VAR 0 1
31214: PUSH
31215: DOUBLE
31216: LD_INT 1
31218: DEC
31219: ST_TO_ADDR
31220: LD_VAR 0 3
31224: PUSH
31225: FOR_TO
31226: IFFALSE 31862
// begin depot := list [ i ] [ 2 ] ;
31228: LD_ADDR_VAR 0 8
31232: PUSH
31233: LD_VAR 0 3
31237: PUSH
31238: LD_VAR 0 1
31242: ARRAY
31243: PUSH
31244: LD_INT 2
31246: ARRAY
31247: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
31248: LD_ADDR_VAR 0 5
31252: PUSH
31253: LD_VAR 0 3
31257: PUSH
31258: LD_VAR 0 1
31262: ARRAY
31263: PUSH
31264: LD_INT 1
31266: ARRAY
31267: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
31268: LD_VAR 0 8
31272: PPUSH
31273: CALL_OW 301
31277: IFTRUE 31296
31279: PUSH
31280: LD_VAR 0 5
31284: PUSH
31285: LD_VAR 0 8
31289: PPUSH
31290: CALL_OW 255
31294: NONEQUAL
31295: OR
31296: IFFALSE 31325
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
31298: LD_ADDR_EXP 101
31302: PUSH
31303: LD_EXP 101
31307: PPUSH
31308: LD_VAR 0 8
31312: PPUSH
31313: LD_INT 0
31315: PPUSH
31316: CALL_OW 1
31320: ST_TO_ADDR
// exit ;
31321: POP
31322: POP
31323: GO 31864
// end ; x := list [ i ] [ 3 ] ;
31325: LD_ADDR_VAR 0 6
31329: PUSH
31330: LD_VAR 0 3
31334: PUSH
31335: LD_VAR 0 1
31339: ARRAY
31340: PUSH
31341: LD_INT 3
31343: ARRAY
31344: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
31345: LD_ADDR_VAR 0 7
31349: PUSH
31350: LD_VAR 0 3
31354: PUSH
31355: LD_VAR 0 1
31359: ARRAY
31360: PUSH
31361: LD_INT 4
31363: ARRAY
31364: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
31365: LD_ADDR_VAR 0 9
31369: PUSH
31370: LD_VAR 0 6
31374: PPUSH
31375: LD_VAR 0 7
31379: PPUSH
31380: LD_INT 16
31382: PPUSH
31383: CALL 78734 0 3
31387: ST_TO_ADDR
// if not cratesNearbyPoint then
31388: LD_VAR 0 9
31392: NOT
31393: IFFALSE 31399
// exit ;
31395: POP
31396: POP
31397: GO 31864
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
31399: LD_ADDR_VAR 0 4
31403: PUSH
31404: LD_INT 22
31406: PUSH
31407: LD_VAR 0 5
31411: PUSH
31412: EMPTY
31413: LIST
31414: LIST
31415: PUSH
31416: LD_INT 3
31418: PUSH
31419: LD_INT 60
31421: PUSH
31422: EMPTY
31423: LIST
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: LD_INT 91
31431: PUSH
31432: LD_VAR 0 8
31436: PUSH
31437: LD_INT 6
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: LIST
31444: PUSH
31445: LD_INT 2
31447: PUSH
31448: LD_INT 25
31450: PUSH
31451: LD_INT 2
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: PUSH
31458: LD_INT 25
31460: PUSH
31461: LD_INT 16
31463: PUSH
31464: EMPTY
31465: LIST
31466: LIST
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: LIST
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: LIST
31477: LIST
31478: PPUSH
31479: CALL_OW 69
31483: PUSH
31484: LD_VAR 0 8
31488: PPUSH
31489: CALL_OW 313
31493: PPUSH
31494: LD_INT 3
31496: PUSH
31497: LD_INT 60
31499: PUSH
31500: EMPTY
31501: LIST
31502: PUSH
31503: EMPTY
31504: LIST
31505: LIST
31506: PUSH
31507: LD_INT 2
31509: PUSH
31510: LD_INT 25
31512: PUSH
31513: LD_INT 2
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 25
31522: PUSH
31523: LD_INT 16
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: LIST
31534: PUSH
31535: EMPTY
31536: LIST
31537: LIST
31538: PPUSH
31539: CALL_OW 72
31543: UNION
31544: ST_TO_ADDR
// if tmp then
31545: LD_VAR 0 4
31549: IFFALSE 31629
// begin tmp := ShrinkArray ( tmp , 3 ) ;
31551: LD_ADDR_VAR 0 4
31555: PUSH
31556: LD_VAR 0 4
31560: PPUSH
31561: LD_INT 3
31563: PPUSH
31564: CALL 76541 0 2
31568: ST_TO_ADDR
// for j in tmp do
31569: LD_ADDR_VAR 0 2
31573: PUSH
31574: LD_VAR 0 4
31578: PUSH
31579: FOR_IN
31580: IFFALSE 31623
// begin if IsInUnit ( j ) then
31582: LD_VAR 0 2
31586: PPUSH
31587: CALL_OW 310
31591: IFFALSE 31602
// ComExit ( j ) ;
31593: LD_VAR 0 2
31597: PPUSH
31598: CALL 76624 0 1
// AddComCollect ( j , x , y ) ;
31602: LD_VAR 0 2
31606: PPUSH
31607: LD_VAR 0 6
31611: PPUSH
31612: LD_VAR 0 7
31616: PPUSH
31617: CALL_OW 177
// end ;
31621: GO 31579
31623: POP
31624: POP
// exit ;
31625: POP
31626: POP
31627: GO 31864
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
31629: LD_ADDR_VAR 0 4
31633: PUSH
31634: LD_INT 22
31636: PUSH
31637: LD_VAR 0 5
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: PUSH
31646: LD_INT 91
31648: PUSH
31649: LD_VAR 0 8
31653: PUSH
31654: LD_INT 8
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: LIST
31661: PUSH
31662: LD_INT 2
31664: PUSH
31665: LD_INT 34
31667: PUSH
31668: LD_INT 12
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: PUSH
31675: LD_INT 34
31677: PUSH
31678: LD_INT 51
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: PUSH
31685: LD_INT 34
31687: PUSH
31688: LD_INT 32
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: LD_INT 34
31697: PUSH
31698: LD_INT 89
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: LIST
31709: LIST
31710: LIST
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: LIST
31716: PPUSH
31717: CALL_OW 69
31721: ST_TO_ADDR
// if tmp then
31722: LD_VAR 0 4
31726: IFFALSE 31860
// begin for j in tmp do
31728: LD_ADDR_VAR 0 2
31732: PUSH
31733: LD_VAR 0 4
31737: PUSH
31738: FOR_IN
31739: IFFALSE 31858
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
31741: LD_VAR 0 2
31745: PPUSH
31746: CALL_OW 262
31750: PUSH
31751: LD_INT 3
31753: EQUAL
31754: IFTRUE 31771
31756: PUSH
31757: LD_VAR 0 2
31761: PPUSH
31762: CALL_OW 261
31766: PUSH
31767: LD_INT 20
31769: GREATER
31770: OR
31771: IFFALSE 31785
31773: PUSH
31774: LD_VAR 0 2
31778: PPUSH
31779: CALL_OW 314
31783: NOT
31784: AND
31785: IFFALSE 31815
31787: PUSH
31788: LD_VAR 0 2
31792: PPUSH
31793: CALL_OW 263
31797: PUSH
31798: LD_INT 1
31800: NONEQUAL
31801: IFTRUE 31814
31803: PUSH
31804: LD_VAR 0 2
31808: PPUSH
31809: CALL_OW 311
31813: OR
31814: AND
31815: IFFALSE 31856
// begin ComCollect ( j , x , y ) ;
31817: LD_VAR 0 2
31821: PPUSH
31822: LD_VAR 0 6
31826: PPUSH
31827: LD_VAR 0 7
31831: PPUSH
31832: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
31836: LD_VAR 0 2
31840: PPUSH
31841: LD_VAR 0 8
31845: PPUSH
31846: CALL_OW 172
// exit ;
31850: POP
31851: POP
31852: POP
31853: POP
31854: GO 31864
// end ;
31856: GO 31738
31858: POP
31859: POP
// end ; end ;
31860: GO 31225
31862: POP
31863: POP
// end ; end_of_file
31864: PPOPN 9
31866: END
// export function SOS_UnitDestroyed ( un ) ; begin
31867: LD_INT 0
31869: PPUSH
// ComRadiation ( un ) ;
31870: LD_VAR 0 1
31874: PPUSH
31875: CALL 32956 0 1
// end ;
31879: LD_VAR 0 2
31883: RET
// export function SOS_UnitKamikazed ( un ) ; begin
31884: LD_INT 0
31886: PPUSH
// ComRadiation ( un ) ;
31887: LD_VAR 0 1
31891: PPUSH
31892: CALL 32956 0 1
// end ;
31896: LD_VAR 0 2
31900: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
31901: LD_INT 0
31903: PPUSH
// end ;
31904: LD_VAR 0 4
31908: RET
// export function SOS_Command ( cmd ) ; begin
31909: LD_INT 0
31911: PPUSH
// end ;
31912: LD_VAR 0 2
31916: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
31917: LD_INT 0
31919: PPUSH
// end ;
31920: LD_VAR 0 6
31924: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
31925: LD_INT 0
31927: PPUSH
31928: PPUSH
31929: PPUSH
31930: PPUSH
// if not vehicle or not factory then
31931: LD_VAR 0 1
31935: NOT
31936: IFTRUE 31945
31938: PUSH
31939: LD_VAR 0 2
31943: NOT
31944: OR
31945: IFFALSE 31949
// exit ;
31947: GO 32531
// if not factoryWaypoints then
31949: LD_EXP 99
31953: NOT
31954: IFFALSE 31958
// exit ;
31956: GO 32531
// for i := 1 to Count ( factoryWaypoints ) do
31958: LD_ADDR_VAR 0 4
31962: PUSH
31963: DOUBLE
31964: LD_INT 1
31966: DEC
31967: ST_TO_ADDR
31968: LD_EXP 99
31972: PPUSH
31973: CALL 40294 0 1
31977: PUSH
31978: FOR_TO
31979: IFFALSE 32529
// if factoryWaypoints [ i ] [ 2 ] = factory then
31981: LD_EXP 99
31985: PUSH
31986: LD_VAR 0 4
31990: ARRAY
31991: PUSH
31992: LD_INT 2
31994: ARRAY
31995: PUSH
31996: LD_VAR 0 2
32000: EQUAL
32001: IFFALSE 32527
// begin if GetControl ( vehicle ) = control_manual then
32003: LD_VAR 0 1
32007: PPUSH
32008: CALL_OW 263
32012: PUSH
32013: LD_INT 1
32015: EQUAL
32016: IFFALSE 32380
// begin driver := IsDrivenBy ( vehicle ) ;
32018: LD_ADDR_VAR 0 5
32022: PUSH
32023: LD_VAR 0 1
32027: PPUSH
32028: CALL_OW 311
32032: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
32033: LD_VAR 0 5
32037: PUSH
32038: LD_EXP 100
32042: IN
32043: IFTRUE 32057
32045: PUSH
32046: LD_VAR 0 1
32050: PUSH
32051: LD_EXP 100
32055: IN
32056: OR
32057: IFFALSE 32063
// exit ;
32059: POP
32060: POP
32061: GO 32531
// if not HasTask ( driver ) then
32063: LD_VAR 0 5
32067: PPUSH
32068: CALL_OW 314
32072: NOT
32073: IFFALSE 32378
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
32075: LD_ADDR_EXP 100
32079: PUSH
32080: LD_EXP 100
32084: PPUSH
32085: LD_VAR 0 5
32089: PPUSH
32090: CALL 76226 0 2
32094: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
32095: LD_ADDR_EXP 100
32099: PUSH
32100: LD_EXP 100
32104: PPUSH
32105: LD_VAR 0 1
32109: PPUSH
32110: CALL 76226 0 2
32114: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
32115: LD_ADDR_VAR 0 6
32119: PUSH
32120: LD_EXP 99
32124: PUSH
32125: LD_VAR 0 4
32129: ARRAY
32130: PUSH
32131: LD_INT 3
32133: ARRAY
32134: PPUSH
32135: LD_EXP 99
32139: PUSH
32140: LD_VAR 0 4
32144: ARRAY
32145: PUSH
32146: LD_INT 4
32148: ARRAY
32149: PPUSH
32150: CALL_OW 428
32154: ST_TO_ADDR
// if hex then
32155: LD_VAR 0 6
32159: IFFALSE 32177
// ComMoveUnit ( driver , hex ) else
32161: LD_VAR 0 5
32165: PPUSH
32166: LD_VAR 0 6
32170: PPUSH
32171: CALL_OW 112
32175: GO 32261
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
32177: LD_VAR 0 1
32181: PPUSH
32182: LD_EXP 99
32186: PUSH
32187: LD_VAR 0 4
32191: ARRAY
32192: PUSH
32193: LD_INT 3
32195: ARRAY
32196: PPUSH
32197: LD_EXP 99
32201: PUSH
32202: LD_VAR 0 4
32206: ARRAY
32207: PUSH
32208: LD_INT 4
32210: ARRAY
32211: PPUSH
32212: CALL_OW 297
32216: PUSH
32217: LD_INT 0
32219: GREATER
32220: IFFALSE 32261
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
32222: LD_VAR 0 5
32226: PPUSH
32227: LD_EXP 99
32231: PUSH
32232: LD_VAR 0 4
32236: ARRAY
32237: PUSH
32238: LD_INT 3
32240: ARRAY
32241: PPUSH
32242: LD_EXP 99
32246: PUSH
32247: LD_VAR 0 4
32251: ARRAY
32252: PUSH
32253: LD_INT 4
32255: ARRAY
32256: PPUSH
32257: CALL_OW 111
// AddComExitVehicle ( driver ) ;
32261: LD_VAR 0 5
32265: PPUSH
32266: CALL_OW 181
// if Multiplayer then
32270: LD_OWVAR 4
32274: IFFALSE 32323
// begin repeat wait ( 10 ) ;
32276: LD_INT 10
32278: PPUSH
32279: CALL_OW 67
// until not IsInUnit ( driver ) ;
32283: LD_VAR 0 5
32287: PPUSH
32288: CALL_OW 310
32292: NOT
32293: IFFALSE 32276
// if not HasTask ( driver ) then
32295: LD_VAR 0 5
32299: PPUSH
32300: CALL_OW 314
32304: NOT
32305: IFFALSE 32321
// ComEnterUnit ( driver , factory ) ;
32307: LD_VAR 0 5
32311: PPUSH
32312: LD_VAR 0 2
32316: PPUSH
32317: CALL_OW 120
// end else
32321: GO 32337
// AddComEnterUnit ( driver , factory ) ;
32323: LD_VAR 0 5
32327: PPUSH
32328: LD_VAR 0 2
32332: PPUSH
32333: CALL_OW 180
// wait ( 0 0$1 ) ;
32337: LD_INT 35
32339: PPUSH
32340: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
32344: LD_ADDR_EXP 100
32348: PUSH
32349: LD_EXP 100
32353: PUSH
32354: LD_VAR 0 5
32358: DIFF
32359: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
32360: LD_ADDR_EXP 100
32364: PUSH
32365: LD_EXP 100
32369: PUSH
32370: LD_VAR 0 1
32374: DIFF
32375: ST_TO_ADDR
// break ;
32376: GO 32529
// end ; end else
32378: GO 32527
// if GetControl ( vehicle ) = control_remote then
32380: LD_VAR 0 1
32384: PPUSH
32385: CALL_OW 263
32389: PUSH
32390: LD_INT 2
32392: EQUAL
32393: IFFALSE 32479
// begin wait ( 0 0$2 ) ;
32395: LD_INT 70
32397: PPUSH
32398: CALL_OW 67
// repeat wait ( 10 ) ;
32402: LD_INT 10
32404: PPUSH
32405: CALL_OW 67
// Connect ( vehicle ) ;
32409: LD_VAR 0 1
32413: PPUSH
32414: CALL 46538 0 1
// until IsControledBy ( vehicle ) ;
32418: LD_VAR 0 1
32422: PPUSH
32423: CALL_OW 312
32427: IFFALSE 32402
// wait ( 10 ) ;
32429: LD_INT 10
32431: PPUSH
32432: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
32436: LD_VAR 0 1
32440: PPUSH
32441: LD_EXP 99
32445: PUSH
32446: LD_VAR 0 4
32450: ARRAY
32451: PUSH
32452: LD_INT 3
32454: ARRAY
32455: PPUSH
32456: LD_EXP 99
32460: PUSH
32461: LD_VAR 0 4
32465: ARRAY
32466: PUSH
32467: LD_INT 4
32469: ARRAY
32470: PPUSH
32471: CALL_OW 111
// break ;
32475: GO 32529
// end else
32477: GO 32527
// begin wait ( 0 0$3 ) ;
32479: LD_INT 105
32481: PPUSH
32482: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
32486: LD_VAR 0 1
32490: PPUSH
32491: LD_EXP 99
32495: PUSH
32496: LD_VAR 0 4
32500: ARRAY
32501: PUSH
32502: LD_INT 3
32504: ARRAY
32505: PPUSH
32506: LD_EXP 99
32510: PUSH
32511: LD_VAR 0 4
32515: ARRAY
32516: PUSH
32517: LD_INT 4
32519: ARRAY
32520: PPUSH
32521: CALL_OW 111
// break ;
32525: GO 32529
// end ; end ;
32527: GO 31978
32529: POP
32530: POP
// end ;
32531: LD_VAR 0 3
32535: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
32536: LD_INT 0
32538: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
32539: LD_VAR 0 1
32543: PUSH
32544: LD_INT 250
32546: EQUAL
32547: IFFALSE 32564
32549: PUSH
32550: LD_VAR 0 2
32554: PPUSH
32555: CALL_OW 264
32559: PUSH
32560: LD_INT 81
32562: EQUAL
32563: AND
32564: IFFALSE 32585
// MinerPlaceMine ( unit , x , y ) ;
32566: LD_VAR 0 2
32570: PPUSH
32571: LD_VAR 0 4
32575: PPUSH
32576: LD_VAR 0 5
32580: PPUSH
32581: CALL 35717 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32585: LD_VAR 0 1
32589: PUSH
32590: LD_INT 251
32592: EQUAL
32593: IFFALSE 32610
32595: PUSH
32596: LD_VAR 0 2
32600: PPUSH
32601: CALL_OW 264
32605: PUSH
32606: LD_INT 81
32608: EQUAL
32609: AND
32610: IFFALSE 32631
// MinerDetonateMine ( unit , x , y ) ;
32612: LD_VAR 0 2
32616: PPUSH
32617: LD_VAR 0 4
32621: PPUSH
32622: LD_VAR 0 5
32626: PPUSH
32627: CALL 35996 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
32631: LD_VAR 0 1
32635: PUSH
32636: LD_INT 252
32638: EQUAL
32639: IFFALSE 32656
32641: PUSH
32642: LD_VAR 0 2
32646: PPUSH
32647: CALL_OW 264
32651: PUSH
32652: LD_INT 81
32654: EQUAL
32655: AND
32656: IFFALSE 32677
// MinerCreateMinefield ( unit , x , y ) ;
32658: LD_VAR 0 2
32662: PPUSH
32663: LD_VAR 0 4
32667: PPUSH
32668: LD_VAR 0 5
32672: PPUSH
32673: CALL 36415 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
32677: LD_VAR 0 1
32681: PUSH
32682: LD_INT 253
32684: EQUAL
32685: IFFALSE 32702
32687: PUSH
32688: LD_VAR 0 2
32692: PPUSH
32693: CALL_OW 257
32697: PUSH
32698: LD_INT 5
32700: EQUAL
32701: AND
32702: IFFALSE 32723
// ComBinocular ( unit , x , y ) ;
32704: LD_VAR 0 2
32708: PPUSH
32709: LD_VAR 0 4
32713: PPUSH
32714: LD_VAR 0 5
32718: PPUSH
32719: CALL 36790 0 3
// if selectedUnit then
32723: LD_VAR 0 3
32727: IFFALSE 32787
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
32729: LD_VAR 0 1
32733: PUSH
32734: LD_INT 254
32736: EQUAL
32737: IFFALSE 32754
32739: PUSH
32740: LD_VAR 0 2
32744: PPUSH
32745: CALL_OW 264
32749: PUSH
32750: LD_INT 99
32752: EQUAL
32753: AND
32754: IFFALSE 32771
32756: PUSH
32757: LD_VAR 0 3
32761: PPUSH
32762: CALL_OW 263
32766: PUSH
32767: LD_INT 3
32769: EQUAL
32770: AND
32771: IFFALSE 32787
// HackDestroyVehicle ( unit , selectedUnit ) ;
32773: LD_VAR 0 2
32777: PPUSH
32778: LD_VAR 0 3
32782: PPUSH
32783: CALL 35077 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
32787: LD_VAR 0 1
32791: PUSH
32792: LD_INT 255
32794: EQUAL
32795: IFFALSE 32819
32797: PUSH
32798: LD_VAR 0 2
32802: PPUSH
32803: CALL_OW 264
32807: PUSH
32808: LD_INT 14
32810: PUSH
32811: LD_INT 53
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: IN
32818: AND
32819: IFFALSE 32837
32821: PUSH
32822: LD_VAR 0 4
32826: PPUSH
32827: LD_VAR 0 5
32831: PPUSH
32832: CALL_OW 488
32836: AND
32837: IFFALSE 32861
// CutTreeXYR ( unit , x , y , 12 ) ;
32839: LD_VAR 0 2
32843: PPUSH
32844: LD_VAR 0 4
32848: PPUSH
32849: LD_VAR 0 5
32853: PPUSH
32854: LD_INT 12
32856: PPUSH
32857: CALL 33052 0 4
// if cmd = 256 then
32861: LD_VAR 0 1
32865: PUSH
32866: LD_INT 256
32868: EQUAL
32869: IFFALSE 32890
// SetFactoryWaypoint ( unit , x , y ) ;
32871: LD_VAR 0 2
32875: PPUSH
32876: LD_VAR 0 4
32880: PPUSH
32881: LD_VAR 0 5
32885: PPUSH
32886: CALL 30412 0 3
// if cmd = 257 then
32890: LD_VAR 0 1
32894: PUSH
32895: LD_INT 257
32897: EQUAL
32898: IFFALSE 32919
// SetWarehouseGatheringPoint ( unit , x , y ) ;
32900: LD_VAR 0 2
32904: PPUSH
32905: LD_VAR 0 4
32909: PPUSH
32910: LD_VAR 0 5
32914: PPUSH
32915: CALL 30908 0 3
// if cmd = 258 then
32919: LD_VAR 0 1
32923: PUSH
32924: LD_INT 258
32926: EQUAL
32927: IFFALSE 32951
// BurnTreeXYR ( unit , x , y , 8 ) ;
32929: LD_VAR 0 2
32933: PPUSH
32934: LD_VAR 0 4
32938: PPUSH
32939: LD_VAR 0 5
32943: PPUSH
32944: LD_INT 8
32946: PPUSH
32947: CALL 33452 0 4
// end ;
32951: LD_VAR 0 6
32955: RET
// export function ComRadiation ( un ) ; var eff ; begin
32956: LD_INT 0
32958: PPUSH
32959: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
32960: LD_VAR 0 1
32964: PPUSH
32965: CALL_OW 264
32969: PUSH
32970: LD_INT 91
32972: NONEQUAL
32973: IFFALSE 32977
// exit ;
32975: GO 33047
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
32977: LD_INT 68
32979: PPUSH
32980: LD_VAR 0 1
32984: PPUSH
32985: CALL_OW 255
32989: PPUSH
32990: CALL_OW 321
32994: PUSH
32995: LD_INT 2
32997: EQUAL
32998: IFFALSE 33010
// eff := 50 else
33000: LD_ADDR_VAR 0 3
33004: PUSH
33005: LD_INT 50
33007: ST_TO_ADDR
33008: GO 33018
// eff := 25 ;
33010: LD_ADDR_VAR 0 3
33014: PUSH
33015: LD_INT 25
33017: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
33018: LD_VAR 0 1
33022: PPUSH
33023: CALL_OW 250
33027: PPUSH
33028: LD_VAR 0 1
33032: PPUSH
33033: CALL_OW 251
33037: PPUSH
33038: LD_VAR 0 3
33042: PPUSH
33043: CALL_OW 495
// end ;
33047: LD_VAR 0 2
33051: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
33052: LD_INT 0
33054: PPUSH
33055: PPUSH
33056: PPUSH
33057: PPUSH
33058: PPUSH
33059: PPUSH
33060: PPUSH
33061: PPUSH
33062: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
33063: LD_VAR 0 1
33067: PPUSH
33068: CALL_OW 302
33072: NOT
33073: IFTRUE 33092
33075: PUSH
33076: LD_VAR 0 2
33080: PPUSH
33081: LD_VAR 0 3
33085: PPUSH
33086: CALL_OW 488
33090: NOT
33091: OR
33092: IFTRUE 33101
33094: PUSH
33095: LD_VAR 0 4
33099: NOT
33100: OR
33101: IFFALSE 33105
// exit ;
33103: GO 33447
// list := [ ] ;
33105: LD_ADDR_VAR 0 13
33109: PUSH
33110: EMPTY
33111: ST_TO_ADDR
// if x - r < 0 then
33112: LD_VAR 0 2
33116: PUSH
33117: LD_VAR 0 4
33121: MINUS
33122: PUSH
33123: LD_INT 0
33125: LESS
33126: IFFALSE 33138
// min_x := 0 else
33128: LD_ADDR_VAR 0 7
33132: PUSH
33133: LD_INT 0
33135: ST_TO_ADDR
33136: GO 33154
// min_x := x - r ;
33138: LD_ADDR_VAR 0 7
33142: PUSH
33143: LD_VAR 0 2
33147: PUSH
33148: LD_VAR 0 4
33152: MINUS
33153: ST_TO_ADDR
// if y - r < 0 then
33154: LD_VAR 0 3
33158: PUSH
33159: LD_VAR 0 4
33163: MINUS
33164: PUSH
33165: LD_INT 0
33167: LESS
33168: IFFALSE 33180
// min_y := 0 else
33170: LD_ADDR_VAR 0 8
33174: PUSH
33175: LD_INT 0
33177: ST_TO_ADDR
33178: GO 33196
// min_y := y - r ;
33180: LD_ADDR_VAR 0 8
33184: PUSH
33185: LD_VAR 0 3
33189: PUSH
33190: LD_VAR 0 4
33194: MINUS
33195: ST_TO_ADDR
// max_x := x + r ;
33196: LD_ADDR_VAR 0 9
33200: PUSH
33201: LD_VAR 0 2
33205: PUSH
33206: LD_VAR 0 4
33210: PLUS
33211: ST_TO_ADDR
// max_y := y + r ;
33212: LD_ADDR_VAR 0 10
33216: PUSH
33217: LD_VAR 0 3
33221: PUSH
33222: LD_VAR 0 4
33226: PLUS
33227: ST_TO_ADDR
// for _x = min_x to max_x do
33228: LD_ADDR_VAR 0 11
33232: PUSH
33233: DOUBLE
33234: LD_VAR 0 7
33238: DEC
33239: ST_TO_ADDR
33240: LD_VAR 0 9
33244: PUSH
33245: FOR_TO
33246: IFFALSE 33365
// for _y = min_y to max_y do
33248: LD_ADDR_VAR 0 12
33252: PUSH
33253: DOUBLE
33254: LD_VAR 0 8
33258: DEC
33259: ST_TO_ADDR
33260: LD_VAR 0 10
33264: PUSH
33265: FOR_TO
33266: IFFALSE 33361
// begin if not ValidHex ( _x , _y ) then
33268: LD_VAR 0 11
33272: PPUSH
33273: LD_VAR 0 12
33277: PPUSH
33278: CALL_OW 488
33282: NOT
33283: IFFALSE 33287
// continue ;
33285: GO 33265
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33287: LD_VAR 0 11
33291: PPUSH
33292: LD_VAR 0 12
33296: PPUSH
33297: CALL_OW 351
33301: IFFALSE 33319
33303: PUSH
33304: LD_VAR 0 11
33308: PPUSH
33309: LD_VAR 0 12
33313: PPUSH
33314: CALL_OW 554
33318: AND
33319: IFFALSE 33359
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33321: LD_ADDR_VAR 0 13
33325: PUSH
33326: LD_VAR 0 13
33330: PPUSH
33331: LD_VAR 0 13
33335: PUSH
33336: LD_INT 1
33338: PLUS
33339: PPUSH
33340: LD_VAR 0 11
33344: PUSH
33345: LD_VAR 0 12
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PPUSH
33354: CALL_OW 2
33358: ST_TO_ADDR
// end ;
33359: GO 33265
33361: POP
33362: POP
33363: GO 33245
33365: POP
33366: POP
// if not list then
33367: LD_VAR 0 13
33371: NOT
33372: IFFALSE 33376
// exit ;
33374: GO 33447
// for i in list do
33376: LD_ADDR_VAR 0 6
33380: PUSH
33381: LD_VAR 0 13
33385: PUSH
33386: FOR_IN
33387: IFFALSE 33445
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
33389: LD_VAR 0 1
33393: PPUSH
33394: LD_STRING M
33396: PUSH
33397: LD_VAR 0 6
33401: PUSH
33402: LD_INT 1
33404: ARRAY
33405: PUSH
33406: LD_VAR 0 6
33410: PUSH
33411: LD_INT 2
33413: ARRAY
33414: PUSH
33415: LD_INT 0
33417: PUSH
33418: LD_INT 0
33420: PUSH
33421: LD_INT 0
33423: PUSH
33424: LD_INT 0
33426: PUSH
33427: EMPTY
33428: LIST
33429: LIST
33430: LIST
33431: LIST
33432: LIST
33433: LIST
33434: LIST
33435: PUSH
33436: EMPTY
33437: LIST
33438: PPUSH
33439: CALL_OW 447
33443: GO 33386
33445: POP
33446: POP
// end ;
33447: LD_VAR 0 5
33451: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
33452: LD_INT 0
33454: PPUSH
33455: PPUSH
33456: PPUSH
33457: PPUSH
33458: PPUSH
33459: PPUSH
33460: PPUSH
33461: PPUSH
33462: PPUSH
33463: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
33464: LD_VAR 0 1
33468: PPUSH
33469: CALL_OW 302
33473: NOT
33474: IFTRUE 33493
33476: PUSH
33477: LD_VAR 0 2
33481: PPUSH
33482: LD_VAR 0 3
33486: PPUSH
33487: CALL_OW 488
33491: NOT
33492: OR
33493: IFTRUE 33502
33495: PUSH
33496: LD_VAR 0 4
33500: NOT
33501: OR
33502: IFFALSE 33506
// exit ;
33504: GO 34023
// list := [ ] ;
33506: LD_ADDR_VAR 0 13
33510: PUSH
33511: EMPTY
33512: ST_TO_ADDR
// if x - r < 0 then
33513: LD_VAR 0 2
33517: PUSH
33518: LD_VAR 0 4
33522: MINUS
33523: PUSH
33524: LD_INT 0
33526: LESS
33527: IFFALSE 33539
// min_x := 0 else
33529: LD_ADDR_VAR 0 7
33533: PUSH
33534: LD_INT 0
33536: ST_TO_ADDR
33537: GO 33555
// min_x := x - r ;
33539: LD_ADDR_VAR 0 7
33543: PUSH
33544: LD_VAR 0 2
33548: PUSH
33549: LD_VAR 0 4
33553: MINUS
33554: ST_TO_ADDR
// if y - r < 0 then
33555: LD_VAR 0 3
33559: PUSH
33560: LD_VAR 0 4
33564: MINUS
33565: PUSH
33566: LD_INT 0
33568: LESS
33569: IFFALSE 33581
// min_y := 0 else
33571: LD_ADDR_VAR 0 8
33575: PUSH
33576: LD_INT 0
33578: ST_TO_ADDR
33579: GO 33597
// min_y := y - r ;
33581: LD_ADDR_VAR 0 8
33585: PUSH
33586: LD_VAR 0 3
33590: PUSH
33591: LD_VAR 0 4
33595: MINUS
33596: ST_TO_ADDR
// max_x := x + r ;
33597: LD_ADDR_VAR 0 9
33601: PUSH
33602: LD_VAR 0 2
33606: PUSH
33607: LD_VAR 0 4
33611: PLUS
33612: ST_TO_ADDR
// max_y := y + r ;
33613: LD_ADDR_VAR 0 10
33617: PUSH
33618: LD_VAR 0 3
33622: PUSH
33623: LD_VAR 0 4
33627: PLUS
33628: ST_TO_ADDR
// for _x = min_x to max_x do
33629: LD_ADDR_VAR 0 11
33633: PUSH
33634: DOUBLE
33635: LD_VAR 0 7
33639: DEC
33640: ST_TO_ADDR
33641: LD_VAR 0 9
33645: PUSH
33646: FOR_TO
33647: IFFALSE 33766
// for _y = min_y to max_y do
33649: LD_ADDR_VAR 0 12
33653: PUSH
33654: DOUBLE
33655: LD_VAR 0 8
33659: DEC
33660: ST_TO_ADDR
33661: LD_VAR 0 10
33665: PUSH
33666: FOR_TO
33667: IFFALSE 33762
// begin if not ValidHex ( _x , _y ) then
33669: LD_VAR 0 11
33673: PPUSH
33674: LD_VAR 0 12
33678: PPUSH
33679: CALL_OW 488
33683: NOT
33684: IFFALSE 33688
// continue ;
33686: GO 33666
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33688: LD_VAR 0 11
33692: PPUSH
33693: LD_VAR 0 12
33697: PPUSH
33698: CALL_OW 351
33702: IFFALSE 33720
33704: PUSH
33705: LD_VAR 0 11
33709: PPUSH
33710: LD_VAR 0 12
33714: PPUSH
33715: CALL_OW 554
33719: AND
33720: IFFALSE 33760
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33722: LD_ADDR_VAR 0 13
33726: PUSH
33727: LD_VAR 0 13
33731: PPUSH
33732: LD_VAR 0 13
33736: PUSH
33737: LD_INT 1
33739: PLUS
33740: PPUSH
33741: LD_VAR 0 11
33745: PUSH
33746: LD_VAR 0 12
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PPUSH
33755: CALL_OW 2
33759: ST_TO_ADDR
// end ;
33760: GO 33666
33762: POP
33763: POP
33764: GO 33646
33766: POP
33767: POP
// if not list then
33768: LD_VAR 0 13
33772: NOT
33773: IFFALSE 33777
// exit ;
33775: GO 34023
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
33777: LD_ADDR_VAR 0 13
33781: PUSH
33782: LD_VAR 0 1
33786: PPUSH
33787: LD_VAR 0 13
33791: PPUSH
33792: LD_INT 1
33794: PPUSH
33795: LD_INT 1
33797: PPUSH
33798: CALL 43666 0 4
33802: ST_TO_ADDR
// ComStop ( flame ) ;
33803: LD_VAR 0 1
33807: PPUSH
33808: CALL_OW 141
// for i in list do
33812: LD_ADDR_VAR 0 6
33816: PUSH
33817: LD_VAR 0 13
33821: PUSH
33822: FOR_IN
33823: IFFALSE 33854
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
33825: LD_VAR 0 1
33829: PPUSH
33830: LD_VAR 0 6
33834: PUSH
33835: LD_INT 1
33837: ARRAY
33838: PPUSH
33839: LD_VAR 0 6
33843: PUSH
33844: LD_INT 2
33846: ARRAY
33847: PPUSH
33848: CALL_OW 176
33852: GO 33822
33854: POP
33855: POP
// repeat wait ( 0 0$1 ) ;
33856: LD_INT 35
33858: PPUSH
33859: CALL_OW 67
// task := GetTaskList ( flame ) ;
33863: LD_ADDR_VAR 0 14
33867: PUSH
33868: LD_VAR 0 1
33872: PPUSH
33873: CALL_OW 437
33877: ST_TO_ADDR
// if not task then
33878: LD_VAR 0 14
33882: NOT
33883: IFFALSE 33887
// exit ;
33885: GO 34023
// if task [ 1 ] [ 1 ] <> | then
33887: LD_VAR 0 14
33891: PUSH
33892: LD_INT 1
33894: ARRAY
33895: PUSH
33896: LD_INT 1
33898: ARRAY
33899: PUSH
33900: LD_STRING |
33902: NONEQUAL
33903: IFFALSE 33907
// exit ;
33905: GO 34023
// _x := task [ 1 ] [ 2 ] ;
33907: LD_ADDR_VAR 0 11
33911: PUSH
33912: LD_VAR 0 14
33916: PUSH
33917: LD_INT 1
33919: ARRAY
33920: PUSH
33921: LD_INT 2
33923: ARRAY
33924: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
33925: LD_ADDR_VAR 0 12
33929: PUSH
33930: LD_VAR 0 14
33934: PUSH
33935: LD_INT 1
33937: ARRAY
33938: PUSH
33939: LD_INT 3
33941: ARRAY
33942: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
33943: LD_VAR 0 11
33947: PPUSH
33948: LD_VAR 0 12
33952: PPUSH
33953: CALL_OW 351
33957: NOT
33958: IFTRUE 33977
33960: PUSH
33961: LD_VAR 0 11
33965: PPUSH
33966: LD_VAR 0 12
33970: PPUSH
33971: CALL_OW 554
33975: NOT
33976: OR
33977: IFFALSE 34011
// begin task := Delete ( task , 1 ) ;
33979: LD_ADDR_VAR 0 14
33983: PUSH
33984: LD_VAR 0 14
33988: PPUSH
33989: LD_INT 1
33991: PPUSH
33992: CALL_OW 3
33996: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
33997: LD_VAR 0 1
34001: PPUSH
34002: LD_VAR 0 14
34006: PPUSH
34007: CALL_OW 446
// end ; until not HasTask ( flame ) ;
34011: LD_VAR 0 1
34015: PPUSH
34016: CALL_OW 314
34020: NOT
34021: IFFALSE 33856
// end ;
34023: LD_VAR 0 5
34027: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
34028: LD_EXP 103
34032: NOT
34033: IFFALSE 34083
34035: GO 34037
34037: DISABLE
// begin initHack := true ;
34038: LD_ADDR_EXP 103
34042: PUSH
34043: LD_INT 1
34045: ST_TO_ADDR
// hackTanks := [ ] ;
34046: LD_ADDR_EXP 104
34050: PUSH
34051: EMPTY
34052: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
34053: LD_ADDR_EXP 105
34057: PUSH
34058: EMPTY
34059: ST_TO_ADDR
// hackLimit := 3 ;
34060: LD_ADDR_EXP 106
34064: PUSH
34065: LD_INT 3
34067: ST_TO_ADDR
// hackDist := 12 ;
34068: LD_ADDR_EXP 107
34072: PUSH
34073: LD_INT 12
34075: ST_TO_ADDR
// hackCounter := [ ] ;
34076: LD_ADDR_EXP 108
34080: PUSH
34081: EMPTY
34082: ST_TO_ADDR
// end ;
34083: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
34084: LD_EXP 103
34088: IFFALSE 34106
34090: PUSH
34091: LD_INT 34
34093: PUSH
34094: LD_INT 99
34096: PUSH
34097: EMPTY
34098: LIST
34099: LIST
34100: PPUSH
34101: CALL_OW 69
34105: AND
34106: IFFALSE 34359
34108: GO 34110
34110: DISABLE
34111: LD_INT 0
34113: PPUSH
34114: PPUSH
// begin enable ;
34115: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
34116: LD_ADDR_VAR 0 1
34120: PUSH
34121: LD_INT 34
34123: PUSH
34124: LD_INT 99
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: PPUSH
34131: CALL_OW 69
34135: PUSH
34136: FOR_IN
34137: IFFALSE 34357
// begin if not i in hackTanks then
34139: LD_VAR 0 1
34143: PUSH
34144: LD_EXP 104
34148: IN
34149: NOT
34150: IFFALSE 34233
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
34152: LD_ADDR_EXP 104
34156: PUSH
34157: LD_EXP 104
34161: PPUSH
34162: LD_EXP 104
34166: PUSH
34167: LD_INT 1
34169: PLUS
34170: PPUSH
34171: LD_VAR 0 1
34175: PPUSH
34176: CALL_OW 1
34180: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
34181: LD_ADDR_EXP 105
34185: PUSH
34186: LD_EXP 105
34190: PPUSH
34191: LD_EXP 105
34195: PUSH
34196: LD_INT 1
34198: PLUS
34199: PPUSH
34200: EMPTY
34201: PPUSH
34202: CALL_OW 1
34206: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
34207: LD_ADDR_EXP 108
34211: PUSH
34212: LD_EXP 108
34216: PPUSH
34217: LD_EXP 108
34221: PUSH
34222: LD_INT 1
34224: PLUS
34225: PPUSH
34226: EMPTY
34227: PPUSH
34228: CALL_OW 1
34232: ST_TO_ADDR
// end ; if not IsOk ( i ) then
34233: LD_VAR 0 1
34237: PPUSH
34238: CALL_OW 302
34242: NOT
34243: IFFALSE 34256
// begin HackUnlinkAll ( i ) ;
34245: LD_VAR 0 1
34249: PPUSH
34250: CALL 34362 0 1
// continue ;
34254: GO 34136
// end ; HackCheckCapturedStatus ( i ) ;
34256: LD_VAR 0 1
34260: PPUSH
34261: CALL 34807 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
34265: LD_ADDR_VAR 0 2
34269: PUSH
34270: LD_INT 81
34272: PUSH
34273: LD_VAR 0 1
34277: PPUSH
34278: CALL_OW 255
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: PUSH
34287: LD_INT 33
34289: PUSH
34290: LD_INT 3
34292: PUSH
34293: EMPTY
34294: LIST
34295: LIST
34296: PUSH
34297: LD_INT 91
34299: PUSH
34300: LD_VAR 0 1
34304: PUSH
34305: LD_EXP 107
34309: PUSH
34310: EMPTY
34311: LIST
34312: LIST
34313: LIST
34314: PUSH
34315: LD_INT 50
34317: PUSH
34318: EMPTY
34319: LIST
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: LIST
34325: LIST
34326: PPUSH
34327: CALL_OW 69
34331: ST_TO_ADDR
// if not tmp then
34332: LD_VAR 0 2
34336: NOT
34337: IFFALSE 34341
// continue ;
34339: GO 34136
// HackLink ( i , tmp ) ;
34341: LD_VAR 0 1
34345: PPUSH
34346: LD_VAR 0 2
34350: PPUSH
34351: CALL 34498 0 2
// end ;
34355: GO 34136
34357: POP
34358: POP
// end ;
34359: PPOPN 2
34361: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
34362: LD_INT 0
34364: PPUSH
34365: PPUSH
34366: PPUSH
// if not hack in hackTanks then
34367: LD_VAR 0 1
34371: PUSH
34372: LD_EXP 104
34376: IN
34377: NOT
34378: IFFALSE 34382
// exit ;
34380: GO 34493
// index := GetElementIndex ( hackTanks , hack ) ;
34382: LD_ADDR_VAR 0 4
34386: PUSH
34387: LD_EXP 104
34391: PPUSH
34392: LD_VAR 0 1
34396: PPUSH
34397: CALL 42961 0 2
34401: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
34402: LD_EXP 105
34406: PUSH
34407: LD_VAR 0 4
34411: ARRAY
34412: IFFALSE 34493
// begin for i in hackTanksCaptured [ index ] do
34414: LD_ADDR_VAR 0 3
34418: PUSH
34419: LD_EXP 105
34423: PUSH
34424: LD_VAR 0 4
34428: ARRAY
34429: PUSH
34430: FOR_IN
34431: IFFALSE 34457
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
34433: LD_VAR 0 3
34437: PUSH
34438: LD_INT 1
34440: ARRAY
34441: PPUSH
34442: LD_VAR 0 3
34446: PUSH
34447: LD_INT 2
34449: ARRAY
34450: PPUSH
34451: CALL_OW 235
34455: GO 34430
34457: POP
34458: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
34459: LD_ADDR_EXP 105
34463: PUSH
34464: LD_EXP 105
34468: PPUSH
34469: LD_VAR 0 4
34473: PPUSH
34474: EMPTY
34475: PPUSH
34476: CALL_OW 1
34480: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
34481: LD_VAR 0 1
34485: PPUSH
34486: LD_INT 0
34488: PPUSH
34489: CALL_OW 505
// end ; end ;
34493: LD_VAR 0 2
34497: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
34498: LD_INT 0
34500: PPUSH
34501: PPUSH
34502: PPUSH
// if not hack in hackTanks or not vehicles then
34503: LD_VAR 0 1
34507: PUSH
34508: LD_EXP 104
34512: IN
34513: NOT
34514: IFTRUE 34523
34516: PUSH
34517: LD_VAR 0 2
34521: NOT
34522: OR
34523: IFFALSE 34527
// exit ;
34525: GO 34802
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
34527: LD_ADDR_VAR 0 2
34531: PUSH
34532: LD_VAR 0 1
34536: PPUSH
34537: LD_VAR 0 2
34541: PPUSH
34542: LD_INT 1
34544: PPUSH
34545: LD_INT 1
34547: PPUSH
34548: CALL 43613 0 4
34552: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
34553: LD_ADDR_VAR 0 5
34557: PUSH
34558: LD_EXP 104
34562: PPUSH
34563: LD_VAR 0 1
34567: PPUSH
34568: CALL 42961 0 2
34572: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
34573: LD_EXP 105
34577: PUSH
34578: LD_VAR 0 5
34582: ARRAY
34583: PUSH
34584: LD_EXP 106
34588: LESS
34589: IFFALSE 34778
// begin for i := 1 to vehicles do
34591: LD_ADDR_VAR 0 4
34595: PUSH
34596: DOUBLE
34597: LD_INT 1
34599: DEC
34600: ST_TO_ADDR
34601: LD_VAR 0 2
34605: PUSH
34606: FOR_TO
34607: IFFALSE 34776
// begin if hackTanksCaptured [ index ] = hackLimit then
34609: LD_EXP 105
34613: PUSH
34614: LD_VAR 0 5
34618: ARRAY
34619: PUSH
34620: LD_EXP 106
34624: EQUAL
34625: IFFALSE 34629
// break ;
34627: GO 34776
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
34629: LD_ADDR_EXP 108
34633: PUSH
34634: LD_EXP 108
34638: PPUSH
34639: LD_VAR 0 5
34643: PPUSH
34644: LD_EXP 108
34648: PUSH
34649: LD_VAR 0 5
34653: ARRAY
34654: PUSH
34655: LD_INT 1
34657: PLUS
34658: PPUSH
34659: CALL_OW 1
34663: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
34664: LD_ADDR_EXP 105
34668: PUSH
34669: LD_EXP 105
34673: PPUSH
34674: LD_VAR 0 5
34678: PUSH
34679: LD_EXP 105
34683: PUSH
34684: LD_VAR 0 5
34688: ARRAY
34689: PUSH
34690: LD_INT 1
34692: PLUS
34693: PUSH
34694: EMPTY
34695: LIST
34696: LIST
34697: PPUSH
34698: LD_VAR 0 2
34702: PUSH
34703: LD_VAR 0 4
34707: ARRAY
34708: PUSH
34709: LD_VAR 0 2
34713: PUSH
34714: LD_VAR 0 4
34718: ARRAY
34719: PPUSH
34720: CALL_OW 255
34724: PUSH
34725: EMPTY
34726: LIST
34727: LIST
34728: PPUSH
34729: CALL 43178 0 3
34733: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
34734: LD_VAR 0 2
34738: PUSH
34739: LD_VAR 0 4
34743: ARRAY
34744: PPUSH
34745: LD_VAR 0 1
34749: PPUSH
34750: CALL_OW 255
34754: PPUSH
34755: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
34759: LD_VAR 0 2
34763: PUSH
34764: LD_VAR 0 4
34768: ARRAY
34769: PPUSH
34770: CALL_OW 141
// end ;
34774: GO 34606
34776: POP
34777: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34778: LD_VAR 0 1
34782: PPUSH
34783: LD_EXP 105
34787: PUSH
34788: LD_VAR 0 5
34792: ARRAY
34793: PUSH
34794: LD_INT 0
34796: PLUS
34797: PPUSH
34798: CALL_OW 505
// end ;
34802: LD_VAR 0 3
34806: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
34807: LD_INT 0
34809: PPUSH
34810: PPUSH
34811: PPUSH
34812: PPUSH
// if not hack in hackTanks then
34813: LD_VAR 0 1
34817: PUSH
34818: LD_EXP 104
34822: IN
34823: NOT
34824: IFFALSE 34828
// exit ;
34826: GO 35072
// index := GetElementIndex ( hackTanks , hack ) ;
34828: LD_ADDR_VAR 0 4
34832: PUSH
34833: LD_EXP 104
34837: PPUSH
34838: LD_VAR 0 1
34842: PPUSH
34843: CALL 42961 0 2
34847: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
34848: LD_ADDR_VAR 0 3
34852: PUSH
34853: DOUBLE
34854: LD_EXP 105
34858: PUSH
34859: LD_VAR 0 4
34863: ARRAY
34864: INC
34865: ST_TO_ADDR
34866: LD_INT 1
34868: PUSH
34869: FOR_DOWNTO
34870: IFFALSE 35046
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
34872: LD_ADDR_VAR 0 5
34876: PUSH
34877: LD_EXP 105
34881: PUSH
34882: LD_VAR 0 4
34886: ARRAY
34887: PUSH
34888: LD_VAR 0 3
34892: ARRAY
34893: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
34894: LD_VAR 0 5
34898: PUSH
34899: LD_INT 1
34901: ARRAY
34902: PPUSH
34903: CALL_OW 302
34907: NOT
34908: IFTRUE 34936
34910: PUSH
34911: LD_VAR 0 5
34915: PUSH
34916: LD_INT 1
34918: ARRAY
34919: PPUSH
34920: CALL_OW 255
34924: PUSH
34925: LD_VAR 0 1
34929: PPUSH
34930: CALL_OW 255
34934: NONEQUAL
34935: OR
34936: IFFALSE 35044
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
34938: LD_VAR 0 5
34942: PUSH
34943: LD_INT 1
34945: ARRAY
34946: PPUSH
34947: CALL_OW 305
34951: IFFALSE 34979
34953: PUSH
34954: LD_VAR 0 5
34958: PUSH
34959: LD_INT 1
34961: ARRAY
34962: PPUSH
34963: CALL_OW 255
34967: PUSH
34968: LD_VAR 0 1
34972: PPUSH
34973: CALL_OW 255
34977: EQUAL
34978: AND
34979: IFFALSE 35003
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
34981: LD_VAR 0 5
34985: PUSH
34986: LD_INT 1
34988: ARRAY
34989: PPUSH
34990: LD_VAR 0 5
34994: PUSH
34995: LD_INT 2
34997: ARRAY
34998: PPUSH
34999: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
35003: LD_ADDR_EXP 105
35007: PUSH
35008: LD_EXP 105
35012: PPUSH
35013: LD_VAR 0 4
35017: PPUSH
35018: LD_EXP 105
35022: PUSH
35023: LD_VAR 0 4
35027: ARRAY
35028: PPUSH
35029: LD_VAR 0 3
35033: PPUSH
35034: CALL_OW 3
35038: PPUSH
35039: CALL_OW 1
35043: ST_TO_ADDR
// end ; end ;
35044: GO 34869
35046: POP
35047: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35048: LD_VAR 0 1
35052: PPUSH
35053: LD_EXP 105
35057: PUSH
35058: LD_VAR 0 4
35062: ARRAY
35063: PUSH
35064: LD_INT 0
35066: PLUS
35067: PPUSH
35068: CALL_OW 505
// end ;
35072: LD_VAR 0 2
35076: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
35077: LD_INT 0
35079: PPUSH
35080: PPUSH
35081: PPUSH
35082: PPUSH
// if not hack in hackTanks then
35083: LD_VAR 0 1
35087: PUSH
35088: LD_EXP 104
35092: IN
35093: NOT
35094: IFFALSE 35098
// exit ;
35096: GO 35183
// index := GetElementIndex ( hackTanks , hack ) ;
35098: LD_ADDR_VAR 0 5
35102: PUSH
35103: LD_EXP 104
35107: PPUSH
35108: LD_VAR 0 1
35112: PPUSH
35113: CALL 42961 0 2
35117: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
35118: LD_ADDR_VAR 0 4
35122: PUSH
35123: DOUBLE
35124: LD_INT 1
35126: DEC
35127: ST_TO_ADDR
35128: LD_EXP 105
35132: PUSH
35133: LD_VAR 0 5
35137: ARRAY
35138: PUSH
35139: FOR_TO
35140: IFFALSE 35181
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
35142: LD_EXP 105
35146: PUSH
35147: LD_VAR 0 5
35151: ARRAY
35152: PUSH
35153: LD_VAR 0 4
35157: ARRAY
35158: PUSH
35159: LD_INT 1
35161: ARRAY
35162: PUSH
35163: LD_VAR 0 2
35167: EQUAL
35168: IFFALSE 35179
// KillUnit ( vehicle ) ;
35170: LD_VAR 0 2
35174: PPUSH
35175: CALL_OW 66
35179: GO 35139
35181: POP
35182: POP
// end ;
35183: LD_VAR 0 3
35187: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
35188: LD_EXP 109
35192: NOT
35193: IFFALSE 35228
35195: GO 35197
35197: DISABLE
// begin initMiner := true ;
35198: LD_ADDR_EXP 109
35202: PUSH
35203: LD_INT 1
35205: ST_TO_ADDR
// minersList := [ ] ;
35206: LD_ADDR_EXP 110
35210: PUSH
35211: EMPTY
35212: ST_TO_ADDR
// minerMinesList := [ ] ;
35213: LD_ADDR_EXP 111
35217: PUSH
35218: EMPTY
35219: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
35220: LD_ADDR_EXP 112
35224: PUSH
35225: LD_INT 5
35227: ST_TO_ADDR
// end ;
35228: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
35229: LD_EXP 109
35233: IFFALSE 35251
35235: PUSH
35236: LD_INT 34
35238: PUSH
35239: LD_INT 81
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: PPUSH
35246: CALL_OW 69
35250: AND
35251: IFFALSE 35714
35253: GO 35255
35255: DISABLE
35256: LD_INT 0
35258: PPUSH
35259: PPUSH
35260: PPUSH
35261: PPUSH
// begin enable ;
35262: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
35263: LD_ADDR_VAR 0 1
35267: PUSH
35268: LD_INT 34
35270: PUSH
35271: LD_INT 81
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PPUSH
35278: CALL_OW 69
35282: PUSH
35283: FOR_IN
35284: IFFALSE 35356
// begin if not i in minersList then
35286: LD_VAR 0 1
35290: PUSH
35291: LD_EXP 110
35295: IN
35296: NOT
35297: IFFALSE 35354
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
35299: LD_ADDR_EXP 110
35303: PUSH
35304: LD_EXP 110
35308: PPUSH
35309: LD_EXP 110
35313: PUSH
35314: LD_INT 1
35316: PLUS
35317: PPUSH
35318: LD_VAR 0 1
35322: PPUSH
35323: CALL_OW 1
35327: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
35328: LD_ADDR_EXP 111
35332: PUSH
35333: LD_EXP 111
35337: PPUSH
35338: LD_EXP 111
35342: PUSH
35343: LD_INT 1
35345: PLUS
35346: PPUSH
35347: EMPTY
35348: PPUSH
35349: CALL_OW 1
35353: ST_TO_ADDR
// end end ;
35354: GO 35283
35356: POP
35357: POP
// for i := minerMinesList downto 1 do
35358: LD_ADDR_VAR 0 1
35362: PUSH
35363: DOUBLE
35364: LD_EXP 111
35368: INC
35369: ST_TO_ADDR
35370: LD_INT 1
35372: PUSH
35373: FOR_DOWNTO
35374: IFFALSE 35712
// begin if IsLive ( minersList [ i ] ) then
35376: LD_EXP 110
35380: PUSH
35381: LD_VAR 0 1
35385: ARRAY
35386: PPUSH
35387: CALL_OW 300
35391: IFFALSE 35419
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
35393: LD_EXP 110
35397: PUSH
35398: LD_VAR 0 1
35402: ARRAY
35403: PPUSH
35404: LD_EXP 111
35408: PUSH
35409: LD_VAR 0 1
35413: ARRAY
35414: PPUSH
35415: CALL_OW 505
// if not minerMinesList [ i ] then
35419: LD_EXP 111
35423: PUSH
35424: LD_VAR 0 1
35428: ARRAY
35429: NOT
35430: IFFALSE 35434
// continue ;
35432: GO 35373
// for j := minerMinesList [ i ] downto 1 do
35434: LD_ADDR_VAR 0 2
35438: PUSH
35439: DOUBLE
35440: LD_EXP 111
35444: PUSH
35445: LD_VAR 0 1
35449: ARRAY
35450: INC
35451: ST_TO_ADDR
35452: LD_INT 1
35454: PUSH
35455: FOR_DOWNTO
35456: IFFALSE 35708
// begin side := GetSide ( minersList [ i ] ) ;
35458: LD_ADDR_VAR 0 3
35462: PUSH
35463: LD_EXP 110
35467: PUSH
35468: LD_VAR 0 1
35472: ARRAY
35473: PPUSH
35474: CALL_OW 255
35478: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
35479: LD_ADDR_VAR 0 4
35483: PUSH
35484: LD_EXP 111
35488: PUSH
35489: LD_VAR 0 1
35493: ARRAY
35494: PUSH
35495: LD_VAR 0 2
35499: ARRAY
35500: PUSH
35501: LD_INT 1
35503: ARRAY
35504: PPUSH
35505: LD_EXP 111
35509: PUSH
35510: LD_VAR 0 1
35514: ARRAY
35515: PUSH
35516: LD_VAR 0 2
35520: ARRAY
35521: PUSH
35522: LD_INT 2
35524: ARRAY
35525: PPUSH
35526: CALL_OW 428
35530: ST_TO_ADDR
// if not tmp then
35531: LD_VAR 0 4
35535: NOT
35536: IFFALSE 35540
// continue ;
35538: GO 35455
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
35540: LD_VAR 0 4
35544: PUSH
35545: LD_INT 81
35547: PUSH
35548: LD_VAR 0 3
35552: PUSH
35553: EMPTY
35554: LIST
35555: LIST
35556: PPUSH
35557: CALL_OW 69
35561: IN
35562: IFFALSE 35612
35564: PUSH
35565: LD_EXP 111
35569: PUSH
35570: LD_VAR 0 1
35574: ARRAY
35575: PUSH
35576: LD_VAR 0 2
35580: ARRAY
35581: PUSH
35582: LD_INT 1
35584: ARRAY
35585: PPUSH
35586: LD_EXP 111
35590: PUSH
35591: LD_VAR 0 1
35595: ARRAY
35596: PUSH
35597: LD_VAR 0 2
35601: ARRAY
35602: PUSH
35603: LD_INT 2
35605: ARRAY
35606: PPUSH
35607: CALL_OW 458
35611: AND
35612: IFFALSE 35706
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
35614: LD_EXP 111
35618: PUSH
35619: LD_VAR 0 1
35623: ARRAY
35624: PUSH
35625: LD_VAR 0 2
35629: ARRAY
35630: PUSH
35631: LD_INT 1
35633: ARRAY
35634: PPUSH
35635: LD_EXP 111
35639: PUSH
35640: LD_VAR 0 1
35644: ARRAY
35645: PUSH
35646: LD_VAR 0 2
35650: ARRAY
35651: PUSH
35652: LD_INT 2
35654: ARRAY
35655: PPUSH
35656: LD_VAR 0 3
35660: PPUSH
35661: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
35665: LD_ADDR_EXP 111
35669: PUSH
35670: LD_EXP 111
35674: PPUSH
35675: LD_VAR 0 1
35679: PPUSH
35680: LD_EXP 111
35684: PUSH
35685: LD_VAR 0 1
35689: ARRAY
35690: PPUSH
35691: LD_VAR 0 2
35695: PPUSH
35696: CALL_OW 3
35700: PPUSH
35701: CALL_OW 1
35705: ST_TO_ADDR
// end ; end ;
35706: GO 35455
35708: POP
35709: POP
// end ;
35710: GO 35373
35712: POP
35713: POP
// end ;
35714: PPOPN 4
35716: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
35717: LD_INT 0
35719: PPUSH
35720: PPUSH
// result := false ;
35721: LD_ADDR_VAR 0 4
35725: PUSH
35726: LD_INT 0
35728: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
35729: LD_VAR 0 1
35733: PPUSH
35734: CALL_OW 264
35738: PUSH
35739: LD_INT 81
35741: EQUAL
35742: NOT
35743: IFFALSE 35747
// exit ;
35745: GO 35991
// index := GetElementIndex ( minersList , unit ) ;
35747: LD_ADDR_VAR 0 5
35751: PUSH
35752: LD_EXP 110
35756: PPUSH
35757: LD_VAR 0 1
35761: PPUSH
35762: CALL 42961 0 2
35766: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
35767: LD_EXP 111
35771: PUSH
35772: LD_VAR 0 5
35776: ARRAY
35777: PUSH
35778: LD_EXP 112
35782: GREATEREQUAL
35783: IFFALSE 35787
// exit ;
35785: GO 35991
// ComMoveXY ( unit , x , y ) ;
35787: LD_VAR 0 1
35791: PPUSH
35792: LD_VAR 0 2
35796: PPUSH
35797: LD_VAR 0 3
35801: PPUSH
35802: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35806: LD_INT 35
35808: PPUSH
35809: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
35813: LD_VAR 0 1
35817: PPUSH
35818: LD_VAR 0 2
35822: PPUSH
35823: LD_VAR 0 3
35827: PPUSH
35828: CALL 75007 0 3
35832: NOT
35833: IFFALSE 35846
35835: PUSH
35836: LD_VAR 0 1
35840: PPUSH
35841: CALL_OW 314
35845: AND
35846: IFFALSE 35850
// exit ;
35848: GO 35991
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
35850: LD_VAR 0 2
35854: PPUSH
35855: LD_VAR 0 3
35859: PPUSH
35860: CALL_OW 428
35864: PUSH
35865: LD_VAR 0 1
35869: EQUAL
35870: IFFALSE 35884
35872: PUSH
35873: LD_VAR 0 1
35877: PPUSH
35878: CALL_OW 314
35882: NOT
35883: AND
35884: IFFALSE 35806
// PlaySoundXY ( x , y , PlantMine ) ;
35886: LD_VAR 0 2
35890: PPUSH
35891: LD_VAR 0 3
35895: PPUSH
35896: LD_STRING PlantMine
35898: PPUSH
35899: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
35903: LD_VAR 0 2
35907: PPUSH
35908: LD_VAR 0 3
35912: PPUSH
35913: LD_VAR 0 1
35917: PPUSH
35918: CALL_OW 255
35922: PPUSH
35923: LD_INT 0
35925: PPUSH
35926: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
35930: LD_ADDR_EXP 111
35934: PUSH
35935: LD_EXP 111
35939: PPUSH
35940: LD_VAR 0 5
35944: PUSH
35945: LD_EXP 111
35949: PUSH
35950: LD_VAR 0 5
35954: ARRAY
35955: PUSH
35956: LD_INT 1
35958: PLUS
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: PPUSH
35964: LD_VAR 0 2
35968: PUSH
35969: LD_VAR 0 3
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: PPUSH
35978: CALL 43178 0 3
35982: ST_TO_ADDR
// result := true ;
35983: LD_ADDR_VAR 0 4
35987: PUSH
35988: LD_INT 1
35990: ST_TO_ADDR
// end ;
35991: LD_VAR 0 4
35995: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
35996: LD_INT 0
35998: PPUSH
35999: PPUSH
36000: PPUSH
// if not unit in minersList then
36001: LD_VAR 0 1
36005: PUSH
36006: LD_EXP 110
36010: IN
36011: NOT
36012: IFFALSE 36016
// exit ;
36014: GO 36410
// index := GetElementIndex ( minersList , unit ) ;
36016: LD_ADDR_VAR 0 6
36020: PUSH
36021: LD_EXP 110
36025: PPUSH
36026: LD_VAR 0 1
36030: PPUSH
36031: CALL 42961 0 2
36035: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
36036: LD_ADDR_VAR 0 5
36040: PUSH
36041: DOUBLE
36042: LD_EXP 111
36046: PUSH
36047: LD_VAR 0 6
36051: ARRAY
36052: INC
36053: ST_TO_ADDR
36054: LD_INT 1
36056: PUSH
36057: FOR_DOWNTO
36058: IFFALSE 36221
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
36060: LD_EXP 111
36064: PUSH
36065: LD_VAR 0 6
36069: ARRAY
36070: PUSH
36071: LD_VAR 0 5
36075: ARRAY
36076: PUSH
36077: LD_INT 1
36079: ARRAY
36080: PUSH
36081: LD_VAR 0 2
36085: EQUAL
36086: IFFALSE 36116
36088: PUSH
36089: LD_EXP 111
36093: PUSH
36094: LD_VAR 0 6
36098: ARRAY
36099: PUSH
36100: LD_VAR 0 5
36104: ARRAY
36105: PUSH
36106: LD_INT 2
36108: ARRAY
36109: PUSH
36110: LD_VAR 0 3
36114: EQUAL
36115: AND
36116: IFFALSE 36219
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36118: LD_EXP 111
36122: PUSH
36123: LD_VAR 0 6
36127: ARRAY
36128: PUSH
36129: LD_VAR 0 5
36133: ARRAY
36134: PUSH
36135: LD_INT 1
36137: ARRAY
36138: PPUSH
36139: LD_EXP 111
36143: PUSH
36144: LD_VAR 0 6
36148: ARRAY
36149: PUSH
36150: LD_VAR 0 5
36154: ARRAY
36155: PUSH
36156: LD_INT 2
36158: ARRAY
36159: PPUSH
36160: LD_VAR 0 1
36164: PPUSH
36165: CALL_OW 255
36169: PPUSH
36170: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36174: LD_ADDR_EXP 111
36178: PUSH
36179: LD_EXP 111
36183: PPUSH
36184: LD_VAR 0 6
36188: PPUSH
36189: LD_EXP 111
36193: PUSH
36194: LD_VAR 0 6
36198: ARRAY
36199: PPUSH
36200: LD_VAR 0 5
36204: PPUSH
36205: CALL_OW 3
36209: PPUSH
36210: CALL_OW 1
36214: ST_TO_ADDR
// exit ;
36215: POP
36216: POP
36217: GO 36410
// end ; end ;
36219: GO 36057
36221: POP
36222: POP
// for i := minerMinesList [ index ] downto 1 do
36223: LD_ADDR_VAR 0 5
36227: PUSH
36228: DOUBLE
36229: LD_EXP 111
36233: PUSH
36234: LD_VAR 0 6
36238: ARRAY
36239: INC
36240: ST_TO_ADDR
36241: LD_INT 1
36243: PUSH
36244: FOR_DOWNTO
36245: IFFALSE 36408
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
36247: LD_EXP 111
36251: PUSH
36252: LD_VAR 0 6
36256: ARRAY
36257: PUSH
36258: LD_VAR 0 5
36262: ARRAY
36263: PUSH
36264: LD_INT 1
36266: ARRAY
36267: PPUSH
36268: LD_EXP 111
36272: PUSH
36273: LD_VAR 0 6
36277: ARRAY
36278: PUSH
36279: LD_VAR 0 5
36283: ARRAY
36284: PUSH
36285: LD_INT 2
36287: ARRAY
36288: PPUSH
36289: LD_VAR 0 2
36293: PPUSH
36294: LD_VAR 0 3
36298: PPUSH
36299: CALL_OW 298
36303: PUSH
36304: LD_INT 6
36306: LESS
36307: IFFALSE 36406
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36309: LD_EXP 111
36313: PUSH
36314: LD_VAR 0 6
36318: ARRAY
36319: PUSH
36320: LD_VAR 0 5
36324: ARRAY
36325: PUSH
36326: LD_INT 1
36328: ARRAY
36329: PPUSH
36330: LD_EXP 111
36334: PUSH
36335: LD_VAR 0 6
36339: ARRAY
36340: PUSH
36341: LD_VAR 0 5
36345: ARRAY
36346: PUSH
36347: LD_INT 2
36349: ARRAY
36350: PPUSH
36351: LD_VAR 0 1
36355: PPUSH
36356: CALL_OW 255
36360: PPUSH
36361: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36365: LD_ADDR_EXP 111
36369: PUSH
36370: LD_EXP 111
36374: PPUSH
36375: LD_VAR 0 6
36379: PPUSH
36380: LD_EXP 111
36384: PUSH
36385: LD_VAR 0 6
36389: ARRAY
36390: PPUSH
36391: LD_VAR 0 5
36395: PPUSH
36396: CALL_OW 3
36400: PPUSH
36401: CALL_OW 1
36405: ST_TO_ADDR
// end ; end ;
36406: GO 36244
36408: POP
36409: POP
// end ;
36410: LD_VAR 0 4
36414: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
36415: LD_INT 0
36417: PPUSH
36418: PPUSH
36419: PPUSH
36420: PPUSH
36421: PPUSH
36422: PPUSH
36423: PPUSH
36424: PPUSH
36425: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
36426: LD_VAR 0 1
36430: PPUSH
36431: CALL_OW 264
36435: PUSH
36436: LD_INT 81
36438: EQUAL
36439: NOT
36440: IFTRUE 36455
36442: PUSH
36443: LD_VAR 0 1
36447: PUSH
36448: LD_EXP 110
36452: IN
36453: NOT
36454: OR
36455: IFFALSE 36459
// exit ;
36457: GO 36785
// index := GetElementIndex ( minersList , unit ) ;
36459: LD_ADDR_VAR 0 6
36463: PUSH
36464: LD_EXP 110
36468: PPUSH
36469: LD_VAR 0 1
36473: PPUSH
36474: CALL 42961 0 2
36478: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
36479: LD_ADDR_VAR 0 8
36483: PUSH
36484: LD_EXP 112
36488: PUSH
36489: LD_EXP 111
36493: PUSH
36494: LD_VAR 0 6
36498: ARRAY
36499: MINUS
36500: ST_TO_ADDR
// if not minesFreeAmount then
36501: LD_VAR 0 8
36505: NOT
36506: IFFALSE 36510
// exit ;
36508: GO 36785
// tmp := [ ] ;
36510: LD_ADDR_VAR 0 7
36514: PUSH
36515: EMPTY
36516: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
36517: LD_ADDR_VAR 0 5
36521: PUSH
36522: DOUBLE
36523: LD_INT 1
36525: DEC
36526: ST_TO_ADDR
36527: LD_VAR 0 8
36531: PUSH
36532: FOR_TO
36533: IFFALSE 36732
// begin _d := rand ( 0 , 5 ) ;
36535: LD_ADDR_VAR 0 11
36539: PUSH
36540: LD_INT 0
36542: PPUSH
36543: LD_INT 5
36545: PPUSH
36546: CALL_OW 12
36550: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
36551: LD_ADDR_VAR 0 12
36555: PUSH
36556: LD_INT 2
36558: PPUSH
36559: LD_INT 6
36561: PPUSH
36562: CALL_OW 12
36566: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
36567: LD_ADDR_VAR 0 9
36571: PUSH
36572: LD_VAR 0 2
36576: PPUSH
36577: LD_VAR 0 11
36581: PPUSH
36582: LD_VAR 0 12
36586: PPUSH
36587: CALL_OW 272
36591: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
36592: LD_ADDR_VAR 0 10
36596: PUSH
36597: LD_VAR 0 3
36601: PPUSH
36602: LD_VAR 0 11
36606: PPUSH
36607: LD_VAR 0 12
36611: PPUSH
36612: CALL_OW 273
36616: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
36617: LD_VAR 0 9
36621: PPUSH
36622: LD_VAR 0 10
36626: PPUSH
36627: CALL_OW 488
36631: IFFALSE 36655
36633: PUSH
36634: LD_VAR 0 9
36638: PUSH
36639: LD_VAR 0 10
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: PUSH
36648: LD_VAR 0 7
36652: IN
36653: NOT
36654: AND
36655: IFFALSE 36674
36657: PUSH
36658: LD_VAR 0 9
36662: PPUSH
36663: LD_VAR 0 10
36667: PPUSH
36668: CALL_OW 458
36672: NOT
36673: AND
36674: IFFALSE 36716
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
36676: LD_ADDR_VAR 0 7
36680: PUSH
36681: LD_VAR 0 7
36685: PPUSH
36686: LD_VAR 0 7
36690: PUSH
36691: LD_INT 1
36693: PLUS
36694: PPUSH
36695: LD_VAR 0 9
36699: PUSH
36700: LD_VAR 0 10
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: PPUSH
36709: CALL_OW 1
36713: ST_TO_ADDR
36714: GO 36730
// i := i - 1 ;
36716: LD_ADDR_VAR 0 5
36720: PUSH
36721: LD_VAR 0 5
36725: PUSH
36726: LD_INT 1
36728: MINUS
36729: ST_TO_ADDR
// end ;
36730: GO 36532
36732: POP
36733: POP
// for i in tmp do
36734: LD_ADDR_VAR 0 5
36738: PUSH
36739: LD_VAR 0 7
36743: PUSH
36744: FOR_IN
36745: IFFALSE 36783
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
36747: LD_VAR 0 1
36751: PPUSH
36752: LD_VAR 0 5
36756: PUSH
36757: LD_INT 1
36759: ARRAY
36760: PPUSH
36761: LD_VAR 0 5
36765: PUSH
36766: LD_INT 2
36768: ARRAY
36769: PPUSH
36770: CALL 35717 0 3
36774: NOT
36775: IFFALSE 36781
// exit ;
36777: POP
36778: POP
36779: GO 36785
36781: GO 36744
36783: POP
36784: POP
// end ;
36785: LD_VAR 0 4
36789: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
36790: LD_INT 0
36792: PPUSH
36793: PPUSH
36794: PPUSH
36795: PPUSH
36796: PPUSH
36797: PPUSH
36798: PPUSH
36799: PPUSH
36800: PPUSH
// if GetClass ( unit ) <> class_sniper then
36801: LD_VAR 0 1
36805: PPUSH
36806: CALL_OW 257
36810: PUSH
36811: LD_INT 5
36813: NONEQUAL
36814: IFFALSE 36818
// exit ;
36816: GO 37288
// dist := 8 ;
36818: LD_ADDR_VAR 0 5
36822: PUSH
36823: LD_INT 8
36825: ST_TO_ADDR
// viewRange := 12 ;
36826: LD_ADDR_VAR 0 8
36830: PUSH
36831: LD_INT 12
36833: ST_TO_ADDR
// side := GetSide ( unit ) ;
36834: LD_ADDR_VAR 0 6
36838: PUSH
36839: LD_VAR 0 1
36843: PPUSH
36844: CALL_OW 255
36848: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
36849: LD_INT 61
36851: PPUSH
36852: LD_VAR 0 6
36856: PPUSH
36857: CALL_OW 321
36861: PUSH
36862: LD_INT 2
36864: EQUAL
36865: IFFALSE 36875
// viewRange := 16 ;
36867: LD_ADDR_VAR 0 8
36871: PUSH
36872: LD_INT 16
36874: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
36875: LD_VAR 0 1
36879: PPUSH
36880: LD_VAR 0 2
36884: PPUSH
36885: LD_VAR 0 3
36889: PPUSH
36890: CALL_OW 297
36894: PUSH
36895: LD_VAR 0 5
36899: GREATER
36900: IFFALSE 36979
// begin ComMoveXY ( unit , x , y ) ;
36902: LD_VAR 0 1
36906: PPUSH
36907: LD_VAR 0 2
36911: PPUSH
36912: LD_VAR 0 3
36916: PPUSH
36917: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36921: LD_INT 35
36923: PPUSH
36924: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
36928: LD_VAR 0 1
36932: PPUSH
36933: LD_VAR 0 2
36937: PPUSH
36938: LD_VAR 0 3
36942: PPUSH
36943: CALL 75007 0 3
36947: NOT
36948: IFFALSE 36952
// exit ;
36950: GO 37288
// until GetDistUnitXY ( unit , x , y ) < dist ;
36952: LD_VAR 0 1
36956: PPUSH
36957: LD_VAR 0 2
36961: PPUSH
36962: LD_VAR 0 3
36966: PPUSH
36967: CALL_OW 297
36971: PUSH
36972: LD_VAR 0 5
36976: LESS
36977: IFFALSE 36921
// end ; ComTurnXY ( unit , x , y ) ;
36979: LD_VAR 0 1
36983: PPUSH
36984: LD_VAR 0 2
36988: PPUSH
36989: LD_VAR 0 3
36993: PPUSH
36994: CALL_OW 118
// repeat if Multiplayer then
36998: LD_OWVAR 4
37002: IFFALSE 37013
// wait ( 35 ) else
37004: LD_INT 35
37006: PPUSH
37007: CALL_OW 67
37011: GO 37020
// wait ( 5 ) ;
37013: LD_INT 5
37015: PPUSH
37016: CALL_OW 67
// _d := GetDir ( unit ) ;
37020: LD_ADDR_VAR 0 11
37024: PUSH
37025: LD_VAR 0 1
37029: PPUSH
37030: CALL_OW 254
37034: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
37035: LD_ADDR_VAR 0 7
37039: PUSH
37040: LD_VAR 0 1
37044: PPUSH
37045: CALL_OW 250
37049: PPUSH
37050: LD_VAR 0 1
37054: PPUSH
37055: CALL_OW 251
37059: PPUSH
37060: LD_VAR 0 2
37064: PPUSH
37065: LD_VAR 0 3
37069: PPUSH
37070: CALL 77643 0 4
37074: ST_TO_ADDR
// until dir = _d ;
37075: LD_VAR 0 7
37079: PUSH
37080: LD_VAR 0 11
37084: EQUAL
37085: IFFALSE 36998
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
37087: LD_ADDR_VAR 0 9
37091: PUSH
37092: LD_VAR 0 1
37096: PPUSH
37097: CALL_OW 250
37101: PPUSH
37102: LD_VAR 0 7
37106: PPUSH
37107: LD_VAR 0 5
37111: PPUSH
37112: CALL_OW 272
37116: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
37117: LD_ADDR_VAR 0 10
37121: PUSH
37122: LD_VAR 0 1
37126: PPUSH
37127: CALL_OW 251
37131: PPUSH
37132: LD_VAR 0 7
37136: PPUSH
37137: LD_VAR 0 5
37141: PPUSH
37142: CALL_OW 273
37146: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37147: LD_VAR 0 9
37151: PPUSH
37152: LD_VAR 0 10
37156: PPUSH
37157: CALL_OW 488
37161: NOT
37162: IFFALSE 37166
// exit ;
37164: GO 37288
// ComAnimCustom ( unit , 1 ) ;
37166: LD_VAR 0 1
37170: PPUSH
37171: LD_INT 1
37173: PPUSH
37174: CALL_OW 592
// p := 0 ;
37178: LD_ADDR_VAR 0 12
37182: PUSH
37183: LD_INT 0
37185: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
37186: LD_VAR 0 9
37190: PPUSH
37191: LD_VAR 0 10
37195: PPUSH
37196: LD_VAR 0 6
37200: PPUSH
37201: LD_VAR 0 8
37205: PPUSH
37206: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
37210: LD_INT 35
37212: PPUSH
37213: CALL_OW 67
// p := Inc ( p ) ;
37217: LD_ADDR_VAR 0 12
37221: PUSH
37222: LD_VAR 0 12
37226: PPUSH
37227: CALL 77599 0 1
37231: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
37232: LD_VAR 0 12
37236: PUSH
37237: LD_INT 3
37239: EQUAL
37240: IFTRUE 37254
37242: PUSH
37243: LD_VAR 0 1
37247: PPUSH
37248: CALL_OW 302
37252: NOT
37253: OR
37254: IFTRUE 37267
37256: PUSH
37257: LD_VAR 0 1
37261: PPUSH
37262: CALL_OW 301
37266: OR
37267: IFFALSE 37210
// RemoveSeeing ( _x , _y , side ) ;
37269: LD_VAR 0 9
37273: PPUSH
37274: LD_VAR 0 10
37278: PPUSH
37279: LD_VAR 0 6
37283: PPUSH
37284: CALL_OW 331
// end ;
37288: LD_VAR 0 4
37292: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
37293: LD_INT 0
37295: PPUSH
37296: PPUSH
37297: PPUSH
37298: PPUSH
37299: PPUSH
37300: PPUSH
37301: PPUSH
37302: PPUSH
37303: PPUSH
37304: PPUSH
37305: PPUSH
// if not unit then
37306: LD_VAR 0 1
37310: NOT
37311: IFFALSE 37315
// exit ;
37313: GO 37586
// side := GetSide ( unit ) ;
37315: LD_ADDR_VAR 0 3
37319: PUSH
37320: LD_VAR 0 1
37324: PPUSH
37325: CALL_OW 255
37329: ST_TO_ADDR
// x := GetX ( unit ) ;
37330: LD_ADDR_VAR 0 5
37334: PUSH
37335: LD_VAR 0 1
37339: PPUSH
37340: CALL_OW 250
37344: ST_TO_ADDR
// y := GetY ( unit ) ;
37345: LD_ADDR_VAR 0 6
37349: PUSH
37350: LD_VAR 0 1
37354: PPUSH
37355: CALL_OW 251
37359: ST_TO_ADDR
// r := 8 ;
37360: LD_ADDR_VAR 0 4
37364: PUSH
37365: LD_INT 8
37367: ST_TO_ADDR
// if x - r < 0 then
37368: LD_VAR 0 5
37372: PUSH
37373: LD_VAR 0 4
37377: MINUS
37378: PUSH
37379: LD_INT 0
37381: LESS
37382: IFFALSE 37394
// min_x := 0 else
37384: LD_ADDR_VAR 0 7
37388: PUSH
37389: LD_INT 0
37391: ST_TO_ADDR
37392: GO 37410
// min_x := x - r ;
37394: LD_ADDR_VAR 0 7
37398: PUSH
37399: LD_VAR 0 5
37403: PUSH
37404: LD_VAR 0 4
37408: MINUS
37409: ST_TO_ADDR
// if y - r < 0 then
37410: LD_VAR 0 6
37414: PUSH
37415: LD_VAR 0 4
37419: MINUS
37420: PUSH
37421: LD_INT 0
37423: LESS
37424: IFFALSE 37436
// min_y := 0 else
37426: LD_ADDR_VAR 0 8
37430: PUSH
37431: LD_INT 0
37433: ST_TO_ADDR
37434: GO 37452
// min_y := y - r ;
37436: LD_ADDR_VAR 0 8
37440: PUSH
37441: LD_VAR 0 6
37445: PUSH
37446: LD_VAR 0 4
37450: MINUS
37451: ST_TO_ADDR
// max_x := x + r ;
37452: LD_ADDR_VAR 0 9
37456: PUSH
37457: LD_VAR 0 5
37461: PUSH
37462: LD_VAR 0 4
37466: PLUS
37467: ST_TO_ADDR
// max_y := y + r ;
37468: LD_ADDR_VAR 0 10
37472: PUSH
37473: LD_VAR 0 6
37477: PUSH
37478: LD_VAR 0 4
37482: PLUS
37483: ST_TO_ADDR
// for _x = min_x to max_x do
37484: LD_ADDR_VAR 0 11
37488: PUSH
37489: DOUBLE
37490: LD_VAR 0 7
37494: DEC
37495: ST_TO_ADDR
37496: LD_VAR 0 9
37500: PUSH
37501: FOR_TO
37502: IFFALSE 37584
// for _y = min_y to max_y do
37504: LD_ADDR_VAR 0 12
37508: PUSH
37509: DOUBLE
37510: LD_VAR 0 8
37514: DEC
37515: ST_TO_ADDR
37516: LD_VAR 0 10
37520: PUSH
37521: FOR_TO
37522: IFFALSE 37580
// begin if not ValidHex ( _x , _y ) then
37524: LD_VAR 0 11
37528: PPUSH
37529: LD_VAR 0 12
37533: PPUSH
37534: CALL_OW 488
37538: NOT
37539: IFFALSE 37543
// continue ;
37541: GO 37521
// if MineAtPos ( _x , _y ) then
37543: LD_VAR 0 11
37547: PPUSH
37548: LD_VAR 0 12
37552: PPUSH
37553: CALL_OW 458
37557: IFFALSE 37578
// ViewMineAtPos ( _x , _y , side ) ;
37559: LD_VAR 0 11
37563: PPUSH
37564: LD_VAR 0 12
37568: PPUSH
37569: LD_VAR 0 3
37573: PPUSH
37574: CALL_OW 457
// end ;
37578: GO 37521
37580: POP
37581: POP
37582: GO 37501
37584: POP
37585: POP
// end ;
37586: LD_VAR 0 2
37590: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
37591: LD_INT 0
37593: PPUSH
37594: PPUSH
37595: PPUSH
37596: PPUSH
37597: PPUSH
37598: PPUSH
// if not units then
37599: LD_VAR 0 1
37603: NOT
37604: IFFALSE 37608
// exit ;
37606: GO 38038
// scaners := [ ] ;
37608: LD_ADDR_VAR 0 6
37612: PUSH
37613: EMPTY
37614: ST_TO_ADDR
// for i in units do
37615: LD_ADDR_VAR 0 3
37619: PUSH
37620: LD_VAR 0 1
37624: PUSH
37625: FOR_IN
37626: IFFALSE 37783
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
37628: LD_VAR 0 3
37632: PPUSH
37633: CALL_OW 264
37637: PUSH
37638: LD_INT 11
37640: NONEQUAL
37641: IFTRUE 37655
37643: PUSH
37644: LD_VAR 0 3
37648: PPUSH
37649: CALL_OW 302
37653: NOT
37654: OR
37655: IFTRUE 37672
37657: PUSH
37658: LD_VAR 0 3
37662: PPUSH
37663: CALL_OW 110
37667: PUSH
37668: LD_INT 502
37670: EQUAL
37671: OR
37672: IFFALSE 37676
// continue ;
37674: GO 37625
// ComStop ( i ) ;
37676: LD_VAR 0 3
37680: PPUSH
37681: CALL_OW 141
// x := GetX ( i ) ;
37685: LD_ADDR_VAR 0 4
37689: PUSH
37690: LD_VAR 0 3
37694: PPUSH
37695: CALL_OW 250
37699: ST_TO_ADDR
// y := GetY ( i ) ;
37700: LD_ADDR_VAR 0 5
37704: PUSH
37705: LD_VAR 0 3
37709: PPUSH
37710: CALL_OW 251
37714: ST_TO_ADDR
// if GetSide ( i ) = your_side then
37715: LD_VAR 0 3
37719: PPUSH
37720: CALL_OW 255
37724: PUSH
37725: LD_OWVAR 2
37729: EQUAL
37730: IFFALSE 37749
// PlaySoundXY ( x , y , mineDetector ) ;
37732: LD_VAR 0 4
37736: PPUSH
37737: LD_VAR 0 5
37741: PPUSH
37742: LD_STRING mineDetector
37744: PPUSH
37745: CALL_OW 366
// scaners := Join ( scaners , i ) ;
37749: LD_ADDR_VAR 0 6
37753: PUSH
37754: LD_VAR 0 6
37758: PPUSH
37759: LD_VAR 0 3
37763: PPUSH
37764: CALL 76226 0 2
37768: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
37769: LD_VAR 0 3
37773: PPUSH
37774: LD_INT 502
37776: PPUSH
37777: CALL_OW 109
// end ;
37781: GO 37625
37783: POP
37784: POP
// if not scaners then
37785: LD_VAR 0 6
37789: NOT
37790: IFFALSE 37794
// exit ;
37792: GO 38038
// wait ( 3 ) ;
37794: LD_INT 3
37796: PPUSH
37797: CALL_OW 67
// timer := 6 ;
37801: LD_ADDR_VAR 0 7
37805: PUSH
37806: LD_INT 6
37808: ST_TO_ADDR
// repeat for i in scaners do
37809: LD_ADDR_VAR 0 3
37813: PUSH
37814: LD_VAR 0 6
37818: PUSH
37819: FOR_IN
37820: IFFALSE 37936
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
37822: LD_VAR 0 3
37826: PPUSH
37827: CALL_OW 302
37831: NOT
37832: IFTRUE 37845
37834: PUSH
37835: LD_VAR 0 3
37839: PPUSH
37840: CALL_OW 314
37844: OR
37845: IFTRUE 37876
37847: PUSH
37848: LD_VAR 0 3
37852: PPUSH
37853: CALL_OW 263
37857: PUSH
37858: LD_INT 1
37860: EQUAL
37861: IFFALSE 37875
37863: PUSH
37864: LD_VAR 0 3
37868: PPUSH
37869: CALL_OW 311
37873: NOT
37874: AND
37875: OR
37876: IFFALSE 37920
// begin SetUnitDisplayNumber ( i , 0 ) ;
37878: LD_VAR 0 3
37882: PPUSH
37883: LD_INT 0
37885: PPUSH
37886: CALL_OW 505
// SetTag ( i , 0 ) ;
37890: LD_VAR 0 3
37894: PPUSH
37895: LD_INT 0
37897: PPUSH
37898: CALL_OW 109
// scaners := scaners diff i ;
37902: LD_ADDR_VAR 0 6
37906: PUSH
37907: LD_VAR 0 6
37911: PUSH
37912: LD_VAR 0 3
37916: DIFF
37917: ST_TO_ADDR
// continue ;
37918: GO 37819
// end ; SetUnitDisplayNumber ( i , timer ) ;
37920: LD_VAR 0 3
37924: PPUSH
37925: LD_VAR 0 7
37929: PPUSH
37930: CALL_OW 505
// end ;
37934: GO 37819
37936: POP
37937: POP
// if not scaners then
37938: LD_VAR 0 6
37942: NOT
37943: IFFALSE 37947
// exit ;
37945: GO 38038
// timer := Dec ( timer ) ;
37947: LD_ADDR_VAR 0 7
37951: PUSH
37952: LD_VAR 0 7
37956: PPUSH
37957: CALL 77621 0 1
37961: ST_TO_ADDR
// wait ( 0 0$1 ) ;
37962: LD_INT 35
37964: PPUSH
37965: CALL_OW 67
// until timer = 0 ;
37969: LD_VAR 0 7
37973: PUSH
37974: LD_INT 0
37976: EQUAL
37977: IFFALSE 37809
// if not scaners then
37979: LD_VAR 0 6
37983: NOT
37984: IFFALSE 37988
// exit ;
37986: GO 38038
// for i in scaners do
37988: LD_ADDR_VAR 0 3
37992: PUSH
37993: LD_VAR 0 6
37997: PUSH
37998: FOR_IN
37999: IFFALSE 38036
// begin SetUnitDisplayNumber ( i , 0 ) ;
38001: LD_VAR 0 3
38005: PPUSH
38006: LD_INT 0
38008: PPUSH
38009: CALL_OW 505
// SetTag ( i , 0 ) ;
38013: LD_VAR 0 3
38017: PPUSH
38018: LD_INT 0
38020: PPUSH
38021: CALL_OW 109
// RevealDetectorMine ( i ) ;
38025: LD_VAR 0 3
38029: PPUSH
38030: CALL 37293 0 1
// end ;
38034: GO 37998
38036: POP
38037: POP
// end ;
38038: LD_VAR 0 2
38042: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
38043: LD_INT 0
38045: PPUSH
// if p1 = mine_detector_mode then
38046: LD_VAR 0 2
38050: PUSH
38051: LD_INT 103
38053: EQUAL
38054: IFFALSE 38065
// DetectMine ( units ) ;
38056: LD_VAR 0 1
38060: PPUSH
38061: CALL 37591 0 1
// end ; end_of_file
38065: LD_VAR 0 7
38069: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
38070: LD_INT 0
38072: PPUSH
38073: PPUSH
// if exist_mode then
38074: LD_VAR 0 2
38078: IFFALSE 38124
// begin unit := CreateCharacter ( prefix & ident ) ;
38080: LD_ADDR_VAR 0 5
38084: PUSH
38085: LD_VAR 0 3
38089: PUSH
38090: LD_VAR 0 1
38094: STR
38095: PPUSH
38096: CALL_OW 34
38100: ST_TO_ADDR
// if unit then
38101: LD_VAR 0 5
38105: IFFALSE 38122
// DeleteCharacters ( prefix & ident ) ;
38107: LD_VAR 0 3
38111: PUSH
38112: LD_VAR 0 1
38116: STR
38117: PPUSH
38118: CALL_OW 40
// end else
38122: GO 38139
// unit := NewCharacter ( ident ) ;
38124: LD_ADDR_VAR 0 5
38128: PUSH
38129: LD_VAR 0 1
38133: PPUSH
38134: CALL_OW 25
38138: ST_TO_ADDR
// result := unit ;
38139: LD_ADDR_VAR 0 4
38143: PUSH
38144: LD_VAR 0 5
38148: ST_TO_ADDR
// end ;
38149: LD_VAR 0 4
38153: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
38154: LD_INT 0
38156: PPUSH
38157: PPUSH
// if exist_mode then
38158: LD_VAR 0 2
38162: IFFALSE 38187
// unit := CreateCharacter ( prefix & ident ) else
38164: LD_ADDR_VAR 0 5
38168: PUSH
38169: LD_VAR 0 3
38173: PUSH
38174: LD_VAR 0 1
38178: STR
38179: PPUSH
38180: CALL_OW 34
38184: ST_TO_ADDR
38185: GO 38202
// unit := NewCharacter ( ident ) ;
38187: LD_ADDR_VAR 0 5
38191: PUSH
38192: LD_VAR 0 1
38196: PPUSH
38197: CALL_OW 25
38201: ST_TO_ADDR
// result := unit ;
38202: LD_ADDR_VAR 0 4
38206: PUSH
38207: LD_VAR 0 5
38211: ST_TO_ADDR
// end ;
38212: LD_VAR 0 4
38216: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
38217: LD_INT 0
38219: PPUSH
38220: PPUSH
// if not side or not nation then
38221: LD_VAR 0 1
38225: NOT
38226: IFTRUE 38235
38228: PUSH
38229: LD_VAR 0 2
38233: NOT
38234: OR
38235: IFFALSE 38239
// exit ;
38237: GO 39033
// case nation of nation_american :
38239: LD_VAR 0 2
38243: PUSH
38244: LD_INT 1
38246: DOUBLE
38247: EQUAL
38248: IFTRUE 38252
38250: GO 38474
38252: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
38253: LD_ADDR_VAR 0 4
38257: PUSH
38258: LD_INT 35
38260: PUSH
38261: LD_INT 45
38263: PUSH
38264: LD_INT 46
38266: PUSH
38267: LD_INT 47
38269: PUSH
38270: LD_INT 82
38272: PUSH
38273: LD_INT 83
38275: PUSH
38276: LD_INT 84
38278: PUSH
38279: LD_INT 85
38281: PUSH
38282: LD_INT 86
38284: PUSH
38285: LD_INT 1
38287: PUSH
38288: LD_INT 2
38290: PUSH
38291: LD_INT 6
38293: PUSH
38294: LD_INT 15
38296: PUSH
38297: LD_INT 16
38299: PUSH
38300: LD_INT 7
38302: PUSH
38303: LD_INT 12
38305: PUSH
38306: LD_INT 13
38308: PUSH
38309: LD_INT 10
38311: PUSH
38312: LD_INT 14
38314: PUSH
38315: LD_INT 20
38317: PUSH
38318: LD_INT 21
38320: PUSH
38321: LD_INT 22
38323: PUSH
38324: LD_INT 25
38326: PUSH
38327: LD_INT 32
38329: PUSH
38330: LD_INT 27
38332: PUSH
38333: LD_INT 36
38335: PUSH
38336: LD_INT 69
38338: PUSH
38339: LD_INT 39
38341: PUSH
38342: LD_INT 34
38344: PUSH
38345: LD_INT 40
38347: PUSH
38348: LD_INT 48
38350: PUSH
38351: LD_INT 49
38353: PUSH
38354: LD_INT 50
38356: PUSH
38357: LD_INT 51
38359: PUSH
38360: LD_INT 52
38362: PUSH
38363: LD_INT 53
38365: PUSH
38366: LD_INT 54
38368: PUSH
38369: LD_INT 55
38371: PUSH
38372: LD_INT 56
38374: PUSH
38375: LD_INT 57
38377: PUSH
38378: LD_INT 58
38380: PUSH
38381: LD_INT 59
38383: PUSH
38384: LD_INT 60
38386: PUSH
38387: LD_INT 61
38389: PUSH
38390: LD_INT 62
38392: PUSH
38393: LD_INT 80
38395: PUSH
38396: LD_INT 82
38398: PUSH
38399: LD_INT 83
38401: PUSH
38402: LD_INT 84
38404: PUSH
38405: LD_INT 85
38407: PUSH
38408: LD_INT 86
38410: PUSH
38411: LD_INT 90
38413: PUSH
38414: LD_INT 93
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: ST_TO_ADDR
38472: GO 38955
38474: LD_INT 2
38476: DOUBLE
38477: EQUAL
38478: IFTRUE 38482
38480: GO 38716
38482: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
38483: LD_ADDR_VAR 0 4
38487: PUSH
38488: LD_INT 35
38490: PUSH
38491: LD_INT 45
38493: PUSH
38494: LD_INT 46
38496: PUSH
38497: LD_INT 47
38499: PUSH
38500: LD_INT 82
38502: PUSH
38503: LD_INT 83
38505: PUSH
38506: LD_INT 84
38508: PUSH
38509: LD_INT 85
38511: PUSH
38512: LD_INT 87
38514: PUSH
38515: LD_INT 70
38517: PUSH
38518: LD_INT 1
38520: PUSH
38521: LD_INT 11
38523: PUSH
38524: LD_INT 3
38526: PUSH
38527: LD_INT 4
38529: PUSH
38530: LD_INT 5
38532: PUSH
38533: LD_INT 6
38535: PUSH
38536: LD_INT 15
38538: PUSH
38539: LD_INT 18
38541: PUSH
38542: LD_INT 7
38544: PUSH
38545: LD_INT 17
38547: PUSH
38548: LD_INT 8
38550: PUSH
38551: LD_INT 20
38553: PUSH
38554: LD_INT 21
38556: PUSH
38557: LD_INT 22
38559: PUSH
38560: LD_INT 72
38562: PUSH
38563: LD_INT 26
38565: PUSH
38566: LD_INT 69
38568: PUSH
38569: LD_INT 39
38571: PUSH
38572: LD_INT 40
38574: PUSH
38575: LD_INT 41
38577: PUSH
38578: LD_INT 42
38580: PUSH
38581: LD_INT 43
38583: PUSH
38584: LD_INT 48
38586: PUSH
38587: LD_INT 49
38589: PUSH
38590: LD_INT 50
38592: PUSH
38593: LD_INT 51
38595: PUSH
38596: LD_INT 52
38598: PUSH
38599: LD_INT 53
38601: PUSH
38602: LD_INT 54
38604: PUSH
38605: LD_INT 55
38607: PUSH
38608: LD_INT 56
38610: PUSH
38611: LD_INT 60
38613: PUSH
38614: LD_INT 61
38616: PUSH
38617: LD_INT 62
38619: PUSH
38620: LD_INT 66
38622: PUSH
38623: LD_INT 67
38625: PUSH
38626: LD_INT 68
38628: PUSH
38629: LD_INT 81
38631: PUSH
38632: LD_INT 82
38634: PUSH
38635: LD_INT 83
38637: PUSH
38638: LD_INT 84
38640: PUSH
38641: LD_INT 85
38643: PUSH
38644: LD_INT 87
38646: PUSH
38647: LD_INT 88
38649: PUSH
38650: LD_INT 92
38652: PUSH
38653: LD_INT 94
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: LIST
38660: LIST
38661: LIST
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: LIST
38680: LIST
38681: LIST
38682: LIST
38683: LIST
38684: LIST
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: LIST
38690: LIST
38691: LIST
38692: LIST
38693: LIST
38694: LIST
38695: LIST
38696: LIST
38697: LIST
38698: LIST
38699: LIST
38700: LIST
38701: LIST
38702: LIST
38703: LIST
38704: LIST
38705: LIST
38706: LIST
38707: LIST
38708: LIST
38709: LIST
38710: LIST
38711: LIST
38712: LIST
38713: ST_TO_ADDR
38714: GO 38955
38716: LD_INT 3
38718: DOUBLE
38719: EQUAL
38720: IFTRUE 38724
38722: GO 38954
38724: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
38725: LD_ADDR_VAR 0 4
38729: PUSH
38730: LD_INT 46
38732: PUSH
38733: LD_INT 47
38735: PUSH
38736: LD_INT 1
38738: PUSH
38739: LD_INT 2
38741: PUSH
38742: LD_INT 82
38744: PUSH
38745: LD_INT 83
38747: PUSH
38748: LD_INT 84
38750: PUSH
38751: LD_INT 85
38753: PUSH
38754: LD_INT 86
38756: PUSH
38757: LD_INT 11
38759: PUSH
38760: LD_INT 9
38762: PUSH
38763: LD_INT 20
38765: PUSH
38766: LD_INT 19
38768: PUSH
38769: LD_INT 21
38771: PUSH
38772: LD_INT 24
38774: PUSH
38775: LD_INT 22
38777: PUSH
38778: LD_INT 25
38780: PUSH
38781: LD_INT 28
38783: PUSH
38784: LD_INT 29
38786: PUSH
38787: LD_INT 30
38789: PUSH
38790: LD_INT 31
38792: PUSH
38793: LD_INT 37
38795: PUSH
38796: LD_INT 38
38798: PUSH
38799: LD_INT 32
38801: PUSH
38802: LD_INT 27
38804: PUSH
38805: LD_INT 33
38807: PUSH
38808: LD_INT 69
38810: PUSH
38811: LD_INT 39
38813: PUSH
38814: LD_INT 34
38816: PUSH
38817: LD_INT 40
38819: PUSH
38820: LD_INT 71
38822: PUSH
38823: LD_INT 23
38825: PUSH
38826: LD_INT 44
38828: PUSH
38829: LD_INT 48
38831: PUSH
38832: LD_INT 49
38834: PUSH
38835: LD_INT 50
38837: PUSH
38838: LD_INT 51
38840: PUSH
38841: LD_INT 52
38843: PUSH
38844: LD_INT 53
38846: PUSH
38847: LD_INT 54
38849: PUSH
38850: LD_INT 55
38852: PUSH
38853: LD_INT 56
38855: PUSH
38856: LD_INT 57
38858: PUSH
38859: LD_INT 58
38861: PUSH
38862: LD_INT 59
38864: PUSH
38865: LD_INT 63
38867: PUSH
38868: LD_INT 64
38870: PUSH
38871: LD_INT 65
38873: PUSH
38874: LD_INT 82
38876: PUSH
38877: LD_INT 83
38879: PUSH
38880: LD_INT 84
38882: PUSH
38883: LD_INT 85
38885: PUSH
38886: LD_INT 86
38888: PUSH
38889: LD_INT 89
38891: PUSH
38892: LD_INT 91
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: LIST
38899: LIST
38900: LIST
38901: LIST
38902: LIST
38903: LIST
38904: LIST
38905: LIST
38906: LIST
38907: LIST
38908: LIST
38909: LIST
38910: LIST
38911: LIST
38912: LIST
38913: LIST
38914: LIST
38915: LIST
38916: LIST
38917: LIST
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: LIST
38925: LIST
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: ST_TO_ADDR
38952: GO 38955
38954: POP
// if state > - 1 and state < 3 then
38955: LD_VAR 0 3
38959: PUSH
38960: LD_INT 1
38962: NEG
38963: GREATER
38964: IFFALSE 38976
38966: PUSH
38967: LD_VAR 0 3
38971: PUSH
38972: LD_INT 3
38974: LESS
38975: AND
38976: IFFALSE 39033
// for i in result do
38978: LD_ADDR_VAR 0 5
38982: PUSH
38983: LD_VAR 0 4
38987: PUSH
38988: FOR_IN
38989: IFFALSE 39031
// if GetTech ( i , side ) <> state then
38991: LD_VAR 0 5
38995: PPUSH
38996: LD_VAR 0 1
39000: PPUSH
39001: CALL_OW 321
39005: PUSH
39006: LD_VAR 0 3
39010: NONEQUAL
39011: IFFALSE 39029
// result := result diff i ;
39013: LD_ADDR_VAR 0 4
39017: PUSH
39018: LD_VAR 0 4
39022: PUSH
39023: LD_VAR 0 5
39027: DIFF
39028: ST_TO_ADDR
39029: GO 38988
39031: POP
39032: POP
// end ;
39033: LD_VAR 0 4
39037: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39038: LD_INT 0
39040: PPUSH
39041: PPUSH
39042: PPUSH
// result := true ;
39043: LD_ADDR_VAR 0 3
39047: PUSH
39048: LD_INT 1
39050: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39051: LD_ADDR_VAR 0 5
39055: PUSH
39056: LD_VAR 0 2
39060: PPUSH
39061: CALL_OW 480
39065: ST_TO_ADDR
// if not tmp then
39066: LD_VAR 0 5
39070: NOT
39071: IFFALSE 39075
// exit ;
39073: GO 39124
// for i in tmp do
39075: LD_ADDR_VAR 0 4
39079: PUSH
39080: LD_VAR 0 5
39084: PUSH
39085: FOR_IN
39086: IFFALSE 39122
// if GetTech ( i , side ) <> state_researched then
39088: LD_VAR 0 4
39092: PPUSH
39093: LD_VAR 0 1
39097: PPUSH
39098: CALL_OW 321
39102: PUSH
39103: LD_INT 2
39105: NONEQUAL
39106: IFFALSE 39120
// begin result := false ;
39108: LD_ADDR_VAR 0 3
39112: PUSH
39113: LD_INT 0
39115: ST_TO_ADDR
// exit ;
39116: POP
39117: POP
39118: GO 39124
// end ;
39120: GO 39085
39122: POP
39123: POP
// end ;
39124: LD_VAR 0 3
39128: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
39129: LD_INT 0
39131: PPUSH
39132: PPUSH
39133: PPUSH
39134: PPUSH
39135: PPUSH
39136: PPUSH
39137: PPUSH
39138: PPUSH
39139: PPUSH
39140: PPUSH
39141: PPUSH
39142: PPUSH
39143: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
39144: LD_VAR 0 1
39148: NOT
39149: IFTRUE 39166
39151: PUSH
39152: LD_VAR 0 1
39156: PPUSH
39157: CALL_OW 257
39161: PUSH
39162: LD_INT 9
39164: NONEQUAL
39165: OR
39166: IFFALSE 39170
// exit ;
39168: GO 39749
// side := GetSide ( unit ) ;
39170: LD_ADDR_VAR 0 9
39174: PUSH
39175: LD_VAR 0 1
39179: PPUSH
39180: CALL_OW 255
39184: ST_TO_ADDR
// tech_space := tech_spacanom ;
39185: LD_ADDR_VAR 0 12
39189: PUSH
39190: LD_INT 29
39192: ST_TO_ADDR
// tech_time := tech_taurad ;
39193: LD_ADDR_VAR 0 13
39197: PUSH
39198: LD_INT 28
39200: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
39201: LD_ADDR_VAR 0 11
39205: PUSH
39206: LD_VAR 0 1
39210: PPUSH
39211: CALL_OW 310
39215: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
39216: LD_VAR 0 11
39220: PPUSH
39221: CALL_OW 247
39225: PUSH
39226: LD_INT 2
39228: EQUAL
39229: IFFALSE 39233
// exit ;
39231: GO 39749
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39233: LD_ADDR_VAR 0 8
39237: PUSH
39238: LD_INT 81
39240: PUSH
39241: LD_VAR 0 9
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 3
39252: PUSH
39253: LD_INT 21
39255: PUSH
39256: LD_INT 3
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: PPUSH
39271: CALL_OW 69
39275: ST_TO_ADDR
// if not tmp then
39276: LD_VAR 0 8
39280: NOT
39281: IFFALSE 39285
// exit ;
39283: GO 39749
// if in_unit then
39285: LD_VAR 0 11
39289: IFFALSE 39313
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39291: LD_ADDR_VAR 0 10
39295: PUSH
39296: LD_VAR 0 8
39300: PPUSH
39301: LD_VAR 0 11
39305: PPUSH
39306: CALL_OW 74
39310: ST_TO_ADDR
39311: GO 39333
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39313: LD_ADDR_VAR 0 10
39317: PUSH
39318: LD_VAR 0 8
39322: PPUSH
39323: LD_VAR 0 1
39327: PPUSH
39328: CALL_OW 74
39332: ST_TO_ADDR
// if not enemy then
39333: LD_VAR 0 10
39337: NOT
39338: IFFALSE 39342
// exit ;
39340: GO 39749
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
39342: LD_VAR 0 11
39346: IFFALSE 39368
39348: PUSH
39349: LD_VAR 0 11
39353: PPUSH
39354: LD_VAR 0 10
39358: PPUSH
39359: CALL_OW 296
39363: PUSH
39364: LD_INT 13
39366: GREATER
39367: AND
39368: IFTRUE 39390
39370: PUSH
39371: LD_VAR 0 1
39375: PPUSH
39376: LD_VAR 0 10
39380: PPUSH
39381: CALL_OW 296
39385: PUSH
39386: LD_INT 12
39388: GREATER
39389: OR
39390: IFFALSE 39394
// exit ;
39392: GO 39749
// missile := [ 1 ] ;
39394: LD_ADDR_VAR 0 14
39398: PUSH
39399: LD_INT 1
39401: PUSH
39402: EMPTY
39403: LIST
39404: ST_TO_ADDR
// if Researched ( side , tech_space ) then
39405: LD_VAR 0 9
39409: PPUSH
39410: LD_VAR 0 12
39414: PPUSH
39415: CALL_OW 325
39419: IFFALSE 39448
// missile := Replace ( missile , missile + 1 , 2 ) ;
39421: LD_ADDR_VAR 0 14
39425: PUSH
39426: LD_VAR 0 14
39430: PPUSH
39431: LD_VAR 0 14
39435: PUSH
39436: LD_INT 1
39438: PLUS
39439: PPUSH
39440: LD_INT 2
39442: PPUSH
39443: CALL_OW 1
39447: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
39448: LD_VAR 0 9
39452: PPUSH
39453: LD_VAR 0 13
39457: PPUSH
39458: CALL_OW 325
39462: IFFALSE 39486
39464: PUSH
39465: LD_VAR 0 10
39469: PPUSH
39470: CALL_OW 255
39474: PPUSH
39475: LD_VAR 0 13
39479: PPUSH
39480: CALL_OW 325
39484: NOT
39485: AND
39486: IFFALSE 39515
// missile := Replace ( missile , missile + 1 , 3 ) ;
39488: LD_ADDR_VAR 0 14
39492: PUSH
39493: LD_VAR 0 14
39497: PPUSH
39498: LD_VAR 0 14
39502: PUSH
39503: LD_INT 1
39505: PLUS
39506: PPUSH
39507: LD_INT 3
39509: PPUSH
39510: CALL_OW 1
39514: ST_TO_ADDR
// if missile < 2 then
39515: LD_VAR 0 14
39519: PUSH
39520: LD_INT 2
39522: LESS
39523: IFFALSE 39527
// exit ;
39525: GO 39749
// x := GetX ( enemy ) ;
39527: LD_ADDR_VAR 0 4
39531: PUSH
39532: LD_VAR 0 10
39536: PPUSH
39537: CALL_OW 250
39541: ST_TO_ADDR
// y := GetY ( enemy ) ;
39542: LD_ADDR_VAR 0 5
39546: PUSH
39547: LD_VAR 0 10
39551: PPUSH
39552: CALL_OW 251
39556: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
39557: LD_ADDR_VAR 0 6
39561: PUSH
39562: LD_VAR 0 4
39566: PUSH
39567: LD_INT 1
39569: NEG
39570: PPUSH
39571: LD_INT 1
39573: PPUSH
39574: CALL_OW 12
39578: PLUS
39579: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
39580: LD_ADDR_VAR 0 7
39584: PUSH
39585: LD_VAR 0 5
39589: PUSH
39590: LD_INT 1
39592: NEG
39593: PPUSH
39594: LD_INT 1
39596: PPUSH
39597: CALL_OW 12
39601: PLUS
39602: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39603: LD_VAR 0 6
39607: PPUSH
39608: LD_VAR 0 7
39612: PPUSH
39613: CALL_OW 488
39617: NOT
39618: IFFALSE 39640
// begin _x := x ;
39620: LD_ADDR_VAR 0 6
39624: PUSH
39625: LD_VAR 0 4
39629: ST_TO_ADDR
// _y := y ;
39630: LD_ADDR_VAR 0 7
39634: PUSH
39635: LD_VAR 0 5
39639: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
39640: LD_ADDR_VAR 0 3
39644: PUSH
39645: LD_INT 1
39647: PPUSH
39648: LD_VAR 0 14
39652: PPUSH
39653: CALL_OW 12
39657: ST_TO_ADDR
// case i of 1 :
39658: LD_VAR 0 3
39662: PUSH
39663: LD_INT 1
39665: DOUBLE
39666: EQUAL
39667: IFTRUE 39671
39669: GO 39688
39671: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
39672: LD_VAR 0 1
39676: PPUSH
39677: LD_VAR 0 10
39681: PPUSH
39682: CALL_OW 115
39686: GO 39749
39688: LD_INT 2
39690: DOUBLE
39691: EQUAL
39692: IFTRUE 39696
39694: GO 39718
39696: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
39697: LD_VAR 0 1
39701: PPUSH
39702: LD_VAR 0 6
39706: PPUSH
39707: LD_VAR 0 7
39711: PPUSH
39712: CALL_OW 153
39716: GO 39749
39718: LD_INT 3
39720: DOUBLE
39721: EQUAL
39722: IFTRUE 39726
39724: GO 39748
39726: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
39727: LD_VAR 0 1
39731: PPUSH
39732: LD_VAR 0 6
39736: PPUSH
39737: LD_VAR 0 7
39741: PPUSH
39742: CALL_OW 154
39746: GO 39749
39748: POP
// end ;
39749: LD_VAR 0 2
39753: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
39754: LD_INT 0
39756: PPUSH
39757: PPUSH
39758: PPUSH
39759: PPUSH
39760: PPUSH
39761: PPUSH
// if not unit or not building then
39762: LD_VAR 0 1
39766: NOT
39767: IFTRUE 39776
39769: PUSH
39770: LD_VAR 0 2
39774: NOT
39775: OR
39776: IFFALSE 39780
// exit ;
39778: GO 39938
// x := GetX ( building ) ;
39780: LD_ADDR_VAR 0 5
39784: PUSH
39785: LD_VAR 0 2
39789: PPUSH
39790: CALL_OW 250
39794: ST_TO_ADDR
// y := GetY ( building ) ;
39795: LD_ADDR_VAR 0 6
39799: PUSH
39800: LD_VAR 0 2
39804: PPUSH
39805: CALL_OW 251
39809: ST_TO_ADDR
// for i := 0 to 5 do
39810: LD_ADDR_VAR 0 4
39814: PUSH
39815: DOUBLE
39816: LD_INT 0
39818: DEC
39819: ST_TO_ADDR
39820: LD_INT 5
39822: PUSH
39823: FOR_TO
39824: IFFALSE 39936
// begin _x := ShiftX ( x , i , 3 ) ;
39826: LD_ADDR_VAR 0 7
39830: PUSH
39831: LD_VAR 0 5
39835: PPUSH
39836: LD_VAR 0 4
39840: PPUSH
39841: LD_INT 3
39843: PPUSH
39844: CALL_OW 272
39848: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
39849: LD_ADDR_VAR 0 8
39853: PUSH
39854: LD_VAR 0 6
39858: PPUSH
39859: LD_VAR 0 4
39863: PPUSH
39864: LD_INT 3
39866: PPUSH
39867: CALL_OW 273
39871: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39872: LD_VAR 0 7
39876: PPUSH
39877: LD_VAR 0 8
39881: PPUSH
39882: CALL_OW 488
39886: NOT
39887: IFFALSE 39891
// continue ;
39889: GO 39823
// if HexInfo ( _x , _y ) = 0 then
39891: LD_VAR 0 7
39895: PPUSH
39896: LD_VAR 0 8
39900: PPUSH
39901: CALL_OW 428
39905: PUSH
39906: LD_INT 0
39908: EQUAL
39909: IFFALSE 39934
// begin ComMoveXY ( unit , _x , _y ) ;
39911: LD_VAR 0 1
39915: PPUSH
39916: LD_VAR 0 7
39920: PPUSH
39921: LD_VAR 0 8
39925: PPUSH
39926: CALL_OW 111
// exit ;
39930: POP
39931: POP
39932: GO 39938
// end ; end ;
39934: GO 39823
39936: POP
39937: POP
// end ;
39938: LD_VAR 0 3
39942: RET
// export function ScanBase ( side , base_area ) ; begin
39943: LD_INT 0
39945: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
39946: LD_ADDR_VAR 0 3
39950: PUSH
39951: LD_VAR 0 2
39955: PPUSH
39956: LD_INT 81
39958: PUSH
39959: LD_VAR 0 1
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PPUSH
39968: CALL_OW 70
39972: ST_TO_ADDR
// end ;
39973: LD_VAR 0 3
39977: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
39978: LD_INT 0
39980: PPUSH
39981: PPUSH
39982: PPUSH
39983: PPUSH
// result := false ;
39984: LD_ADDR_VAR 0 2
39988: PUSH
39989: LD_INT 0
39991: ST_TO_ADDR
// side := GetSide ( unit ) ;
39992: LD_ADDR_VAR 0 3
39996: PUSH
39997: LD_VAR 0 1
40001: PPUSH
40002: CALL_OW 255
40006: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40007: LD_ADDR_VAR 0 4
40011: PUSH
40012: LD_VAR 0 1
40016: PPUSH
40017: CALL_OW 248
40021: ST_TO_ADDR
// case nat of 1 :
40022: LD_VAR 0 4
40026: PUSH
40027: LD_INT 1
40029: DOUBLE
40030: EQUAL
40031: IFTRUE 40035
40033: GO 40046
40035: POP
// tech := tech_lassight ; 2 :
40036: LD_ADDR_VAR 0 5
40040: PUSH
40041: LD_INT 12
40043: ST_TO_ADDR
40044: GO 40085
40046: LD_INT 2
40048: DOUBLE
40049: EQUAL
40050: IFTRUE 40054
40052: GO 40065
40054: POP
// tech := tech_mortar ; 3 :
40055: LD_ADDR_VAR 0 5
40059: PUSH
40060: LD_INT 41
40062: ST_TO_ADDR
40063: GO 40085
40065: LD_INT 3
40067: DOUBLE
40068: EQUAL
40069: IFTRUE 40073
40071: GO 40084
40073: POP
// tech := tech_bazooka ; end ;
40074: LD_ADDR_VAR 0 5
40078: PUSH
40079: LD_INT 44
40081: ST_TO_ADDR
40082: GO 40085
40084: POP
// if Researched ( side , tech ) then
40085: LD_VAR 0 3
40089: PPUSH
40090: LD_VAR 0 5
40094: PPUSH
40095: CALL_OW 325
40099: IFFALSE 40126
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40101: LD_ADDR_VAR 0 2
40105: PUSH
40106: LD_INT 5
40108: PUSH
40109: LD_INT 8
40111: PUSH
40112: LD_INT 9
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: LIST
40119: PUSH
40120: LD_VAR 0 4
40124: ARRAY
40125: ST_TO_ADDR
// end ;
40126: LD_VAR 0 2
40130: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
40131: LD_INT 0
40133: PPUSH
40134: PPUSH
40135: PPUSH
// if not mines then
40136: LD_VAR 0 2
40140: NOT
40141: IFFALSE 40145
// exit ;
40143: GO 40289
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40145: LD_ADDR_VAR 0 5
40149: PUSH
40150: LD_INT 81
40152: PUSH
40153: LD_VAR 0 1
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 3
40164: PUSH
40165: LD_INT 21
40167: PUSH
40168: LD_INT 3
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: PPUSH
40183: CALL_OW 69
40187: ST_TO_ADDR
// for i in mines do
40188: LD_ADDR_VAR 0 4
40192: PUSH
40193: LD_VAR 0 2
40197: PUSH
40198: FOR_IN
40199: IFFALSE 40287
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
40201: LD_VAR 0 4
40205: PUSH
40206: LD_INT 1
40208: ARRAY
40209: PPUSH
40210: LD_VAR 0 4
40214: PUSH
40215: LD_INT 2
40217: ARRAY
40218: PPUSH
40219: CALL_OW 458
40223: NOT
40224: IFFALSE 40228
// continue ;
40226: GO 40198
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
40228: LD_VAR 0 4
40232: PUSH
40233: LD_INT 1
40235: ARRAY
40236: PPUSH
40237: LD_VAR 0 4
40241: PUSH
40242: LD_INT 2
40244: ARRAY
40245: PPUSH
40246: CALL_OW 428
40250: PUSH
40251: LD_VAR 0 5
40255: IN
40256: IFFALSE 40285
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
40258: LD_VAR 0 4
40262: PUSH
40263: LD_INT 1
40265: ARRAY
40266: PPUSH
40267: LD_VAR 0 4
40271: PUSH
40272: LD_INT 2
40274: ARRAY
40275: PPUSH
40276: LD_VAR 0 1
40280: PPUSH
40281: CALL_OW 456
// end ;
40285: GO 40198
40287: POP
40288: POP
// end ;
40289: LD_VAR 0 3
40293: RET
// export function Count ( array ) ; begin
40294: LD_INT 0
40296: PPUSH
// result := array + 0 ;
40297: LD_ADDR_VAR 0 2
40301: PUSH
40302: LD_VAR 0 1
40306: PUSH
40307: LD_INT 0
40309: PLUS
40310: ST_TO_ADDR
// end ;
40311: LD_VAR 0 2
40315: RET
// export function IsEmpty ( building ) ; begin
40316: LD_INT 0
40318: PPUSH
// if not building then
40319: LD_VAR 0 1
40323: NOT
40324: IFFALSE 40328
// exit ;
40326: GO 40371
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
40328: LD_ADDR_VAR 0 2
40332: PUSH
40333: LD_VAR 0 1
40337: PUSH
40338: LD_INT 22
40340: PUSH
40341: LD_VAR 0 1
40345: PPUSH
40346: CALL_OW 255
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 58
40357: PUSH
40358: EMPTY
40359: LIST
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PPUSH
40365: CALL_OW 69
40369: IN
40370: ST_TO_ADDR
// end ;
40371: LD_VAR 0 2
40375: RET
// export function IsNotFull ( building ) ; var places ; begin
40376: LD_INT 0
40378: PPUSH
40379: PPUSH
// if not building then
40380: LD_VAR 0 1
40384: NOT
40385: IFFALSE 40389
// exit ;
40387: GO 40417
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
40389: LD_ADDR_VAR 0 2
40393: PUSH
40394: LD_VAR 0 1
40398: PPUSH
40399: LD_INT 3
40401: PUSH
40402: LD_INT 62
40404: PUSH
40405: EMPTY
40406: LIST
40407: PUSH
40408: EMPTY
40409: LIST
40410: LIST
40411: PPUSH
40412: CALL_OW 72
40416: ST_TO_ADDR
// end ;
40417: LD_VAR 0 2
40421: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
40422: LD_INT 0
40424: PPUSH
40425: PPUSH
40426: PPUSH
40427: PPUSH
// tmp := [ ] ;
40428: LD_ADDR_VAR 0 3
40432: PUSH
40433: EMPTY
40434: ST_TO_ADDR
// list := [ ] ;
40435: LD_ADDR_VAR 0 5
40439: PUSH
40440: EMPTY
40441: ST_TO_ADDR
// for i = 16 to 25 do
40442: LD_ADDR_VAR 0 4
40446: PUSH
40447: DOUBLE
40448: LD_INT 16
40450: DEC
40451: ST_TO_ADDR
40452: LD_INT 25
40454: PUSH
40455: FOR_TO
40456: IFFALSE 40529
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
40458: LD_ADDR_VAR 0 3
40462: PUSH
40463: LD_VAR 0 3
40467: PUSH
40468: LD_INT 22
40470: PUSH
40471: LD_VAR 0 1
40475: PPUSH
40476: CALL_OW 255
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PUSH
40485: LD_INT 91
40487: PUSH
40488: LD_VAR 0 1
40492: PUSH
40493: LD_INT 6
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: LIST
40500: PUSH
40501: LD_INT 30
40503: PUSH
40504: LD_VAR 0 4
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: LIST
40517: PUSH
40518: EMPTY
40519: LIST
40520: PPUSH
40521: CALL_OW 69
40525: ADD
40526: ST_TO_ADDR
40527: GO 40455
40529: POP
40530: POP
// for i = 1 to tmp do
40531: LD_ADDR_VAR 0 4
40535: PUSH
40536: DOUBLE
40537: LD_INT 1
40539: DEC
40540: ST_TO_ADDR
40541: LD_VAR 0 3
40545: PUSH
40546: FOR_TO
40547: IFFALSE 40635
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
40549: LD_ADDR_VAR 0 5
40553: PUSH
40554: LD_VAR 0 5
40558: PUSH
40559: LD_VAR 0 3
40563: PUSH
40564: LD_VAR 0 4
40568: ARRAY
40569: PPUSH
40570: CALL_OW 266
40574: PUSH
40575: LD_VAR 0 3
40579: PUSH
40580: LD_VAR 0 4
40584: ARRAY
40585: PPUSH
40586: CALL_OW 250
40590: PUSH
40591: LD_VAR 0 3
40595: PUSH
40596: LD_VAR 0 4
40600: ARRAY
40601: PPUSH
40602: CALL_OW 251
40606: PUSH
40607: LD_VAR 0 3
40611: PUSH
40612: LD_VAR 0 4
40616: ARRAY
40617: PPUSH
40618: CALL_OW 254
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: PUSH
40629: EMPTY
40630: LIST
40631: ADD
40632: ST_TO_ADDR
40633: GO 40546
40635: POP
40636: POP
// result := list ;
40637: LD_ADDR_VAR 0 2
40641: PUSH
40642: LD_VAR 0 5
40646: ST_TO_ADDR
// end ;
40647: LD_VAR 0 2
40651: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
40652: LD_INT 0
40654: PPUSH
40655: PPUSH
40656: PPUSH
40657: PPUSH
40658: PPUSH
40659: PPUSH
40660: PPUSH
// if not factory then
40661: LD_VAR 0 1
40665: NOT
40666: IFFALSE 40670
// exit ;
40668: GO 41273
// if control = control_apeman then
40670: LD_VAR 0 4
40674: PUSH
40675: LD_INT 5
40677: EQUAL
40678: IFFALSE 40787
// begin tmp := UnitsInside ( factory ) ;
40680: LD_ADDR_VAR 0 8
40684: PUSH
40685: LD_VAR 0 1
40689: PPUSH
40690: CALL_OW 313
40694: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
40695: LD_VAR 0 8
40699: PPUSH
40700: LD_INT 25
40702: PUSH
40703: LD_INT 12
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PPUSH
40710: CALL_OW 72
40714: NOT
40715: IFFALSE 40725
// control := control_manual ;
40717: LD_ADDR_VAR 0 4
40721: PUSH
40722: LD_INT 1
40724: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
40725: LD_ADDR_VAR 0 8
40729: PUSH
40730: LD_VAR 0 1
40734: PPUSH
40735: CALL 40422 0 1
40739: ST_TO_ADDR
// if tmp then
40740: LD_VAR 0 8
40744: IFFALSE 40787
// begin for i in tmp do
40746: LD_ADDR_VAR 0 7
40750: PUSH
40751: LD_VAR 0 8
40755: PUSH
40756: FOR_IN
40757: IFFALSE 40785
// if i [ 1 ] = b_ext_radio then
40759: LD_VAR 0 7
40763: PUSH
40764: LD_INT 1
40766: ARRAY
40767: PUSH
40768: LD_INT 22
40770: EQUAL
40771: IFFALSE 40783
// begin control := control_remote ;
40773: LD_ADDR_VAR 0 4
40777: PUSH
40778: LD_INT 2
40780: ST_TO_ADDR
// break ;
40781: GO 40785
// end ;
40783: GO 40756
40785: POP
40786: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40787: LD_VAR 0 1
40791: PPUSH
40792: LD_VAR 0 2
40796: PPUSH
40797: LD_VAR 0 3
40801: PPUSH
40802: LD_VAR 0 4
40806: PPUSH
40807: LD_VAR 0 5
40811: PPUSH
40812: CALL_OW 448
40816: IFFALSE 40851
// begin result := [ chassis , engine , control , weapon ] ;
40818: LD_ADDR_VAR 0 6
40822: PUSH
40823: LD_VAR 0 2
40827: PUSH
40828: LD_VAR 0 3
40832: PUSH
40833: LD_VAR 0 4
40837: PUSH
40838: LD_VAR 0 5
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: LIST
40847: LIST
40848: ST_TO_ADDR
// exit ;
40849: GO 41273
// end ; _chassis := AvailableChassisList ( factory ) ;
40851: LD_ADDR_VAR 0 9
40855: PUSH
40856: LD_VAR 0 1
40860: PPUSH
40861: CALL_OW 475
40865: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
40866: LD_ADDR_VAR 0 11
40870: PUSH
40871: LD_VAR 0 1
40875: PPUSH
40876: CALL_OW 476
40880: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
40881: LD_ADDR_VAR 0 12
40885: PUSH
40886: LD_VAR 0 1
40890: PPUSH
40891: CALL_OW 477
40895: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
40896: LD_ADDR_VAR 0 10
40900: PUSH
40901: LD_VAR 0 1
40905: PPUSH
40906: CALL_OW 478
40910: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
40911: LD_VAR 0 9
40915: NOT
40916: IFTRUE 40925
40918: PUSH
40919: LD_VAR 0 11
40923: NOT
40924: OR
40925: IFTRUE 40934
40927: PUSH
40928: LD_VAR 0 12
40932: NOT
40933: OR
40934: IFTRUE 40943
40936: PUSH
40937: LD_VAR 0 10
40941: NOT
40942: OR
40943: IFFALSE 40978
// begin result := [ chassis , engine , control , weapon ] ;
40945: LD_ADDR_VAR 0 6
40949: PUSH
40950: LD_VAR 0 2
40954: PUSH
40955: LD_VAR 0 3
40959: PUSH
40960: LD_VAR 0 4
40964: PUSH
40965: LD_VAR 0 5
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: ST_TO_ADDR
// exit ;
40976: GO 41273
// end ; if not chassis in _chassis then
40978: LD_VAR 0 2
40982: PUSH
40983: LD_VAR 0 9
40987: IN
40988: NOT
40989: IFFALSE 41015
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
40991: LD_ADDR_VAR 0 2
40995: PUSH
40996: LD_VAR 0 9
41000: PUSH
41001: LD_INT 1
41003: PPUSH
41004: LD_VAR 0 9
41008: PPUSH
41009: CALL_OW 12
41013: ARRAY
41014: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
41015: LD_VAR 0 2
41019: PPUSH
41020: LD_VAR 0 3
41024: PPUSH
41025: CALL 41278 0 2
41029: NOT
41030: IFFALSE 41091
// repeat engine := _engine [ 1 ] ;
41032: LD_ADDR_VAR 0 3
41036: PUSH
41037: LD_VAR 0 11
41041: PUSH
41042: LD_INT 1
41044: ARRAY
41045: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
41046: LD_ADDR_VAR 0 11
41050: PUSH
41051: LD_VAR 0 11
41055: PPUSH
41056: LD_INT 1
41058: PPUSH
41059: CALL_OW 3
41063: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
41064: LD_VAR 0 2
41068: PPUSH
41069: LD_VAR 0 3
41073: PPUSH
41074: CALL 41278 0 2
41078: IFTRUE 41089
41080: PUSH
41081: LD_VAR 0 11
41085: PUSH
41086: EMPTY
41087: EQUAL
41088: OR
41089: IFFALSE 41032
// if not control in _control then
41091: LD_VAR 0 4
41095: PUSH
41096: LD_VAR 0 12
41100: IN
41101: NOT
41102: IFFALSE 41128
// control := _control [ rand ( 1 , _control ) ] ;
41104: LD_ADDR_VAR 0 4
41108: PUSH
41109: LD_VAR 0 12
41113: PUSH
41114: LD_INT 1
41116: PPUSH
41117: LD_VAR 0 12
41121: PPUSH
41122: CALL_OW 12
41126: ARRAY
41127: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
41128: LD_VAR 0 2
41132: PPUSH
41133: LD_VAR 0 5
41137: PPUSH
41138: CALL 41500 0 2
41142: NOT
41143: IFFALSE 41204
// repeat weapon := _weapon [ 1 ] ;
41145: LD_ADDR_VAR 0 5
41149: PUSH
41150: LD_VAR 0 10
41154: PUSH
41155: LD_INT 1
41157: ARRAY
41158: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
41159: LD_ADDR_VAR 0 10
41163: PUSH
41164: LD_VAR 0 10
41168: PPUSH
41169: LD_INT 1
41171: PPUSH
41172: CALL_OW 3
41176: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
41177: LD_VAR 0 2
41181: PPUSH
41182: LD_VAR 0 5
41186: PPUSH
41187: CALL 41500 0 2
41191: IFTRUE 41202
41193: PUSH
41194: LD_VAR 0 10
41198: PUSH
41199: EMPTY
41200: EQUAL
41201: OR
41202: IFFALSE 41145
// result := [ ] ;
41204: LD_ADDR_VAR 0 6
41208: PUSH
41209: EMPTY
41210: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41211: LD_VAR 0 1
41215: PPUSH
41216: LD_VAR 0 2
41220: PPUSH
41221: LD_VAR 0 3
41225: PPUSH
41226: LD_VAR 0 4
41230: PPUSH
41231: LD_VAR 0 5
41235: PPUSH
41236: CALL_OW 448
41240: IFFALSE 41273
// result := [ chassis , engine , control , weapon ] ;
41242: LD_ADDR_VAR 0 6
41246: PUSH
41247: LD_VAR 0 2
41251: PUSH
41252: LD_VAR 0 3
41256: PUSH
41257: LD_VAR 0 4
41261: PUSH
41262: LD_VAR 0 5
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: LIST
41271: LIST
41272: ST_TO_ADDR
// end ;
41273: LD_VAR 0 6
41277: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
41278: LD_INT 0
41280: PPUSH
// if not chassis or not engine then
41281: LD_VAR 0 1
41285: NOT
41286: IFTRUE 41295
41288: PUSH
41289: LD_VAR 0 2
41293: NOT
41294: OR
41295: IFFALSE 41299
// exit ;
41297: GO 41495
// case engine of engine_solar :
41299: LD_VAR 0 2
41303: PUSH
41304: LD_INT 2
41306: DOUBLE
41307: EQUAL
41308: IFTRUE 41312
41310: GO 41350
41312: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
41313: LD_ADDR_VAR 0 3
41317: PUSH
41318: LD_INT 11
41320: PUSH
41321: LD_INT 12
41323: PUSH
41324: LD_INT 13
41326: PUSH
41327: LD_INT 14
41329: PUSH
41330: LD_INT 1
41332: PUSH
41333: LD_INT 2
41335: PUSH
41336: LD_INT 3
41338: PUSH
41339: EMPTY
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: ST_TO_ADDR
41348: GO 41479
41350: LD_INT 1
41352: DOUBLE
41353: EQUAL
41354: IFTRUE 41358
41356: GO 41420
41358: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
41359: LD_ADDR_VAR 0 3
41363: PUSH
41364: LD_INT 11
41366: PUSH
41367: LD_INT 12
41369: PUSH
41370: LD_INT 13
41372: PUSH
41373: LD_INT 14
41375: PUSH
41376: LD_INT 1
41378: PUSH
41379: LD_INT 2
41381: PUSH
41382: LD_INT 3
41384: PUSH
41385: LD_INT 4
41387: PUSH
41388: LD_INT 5
41390: PUSH
41391: LD_INT 21
41393: PUSH
41394: LD_INT 23
41396: PUSH
41397: LD_INT 22
41399: PUSH
41400: LD_INT 24
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: ST_TO_ADDR
41418: GO 41479
41420: LD_INT 3
41422: DOUBLE
41423: EQUAL
41424: IFTRUE 41428
41426: GO 41478
41428: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41429: LD_ADDR_VAR 0 3
41433: PUSH
41434: LD_INT 13
41436: PUSH
41437: LD_INT 14
41439: PUSH
41440: LD_INT 2
41442: PUSH
41443: LD_INT 3
41445: PUSH
41446: LD_INT 4
41448: PUSH
41449: LD_INT 5
41451: PUSH
41452: LD_INT 21
41454: PUSH
41455: LD_INT 22
41457: PUSH
41458: LD_INT 23
41460: PUSH
41461: LD_INT 24
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: LIST
41468: LIST
41469: LIST
41470: LIST
41471: LIST
41472: LIST
41473: LIST
41474: LIST
41475: ST_TO_ADDR
41476: GO 41479
41478: POP
// result := ( chassis in result ) ;
41479: LD_ADDR_VAR 0 3
41483: PUSH
41484: LD_VAR 0 1
41488: PUSH
41489: LD_VAR 0 3
41493: IN
41494: ST_TO_ADDR
// end ;
41495: LD_VAR 0 3
41499: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
41500: LD_INT 0
41502: PPUSH
// if not chassis or not weapon then
41503: LD_VAR 0 1
41507: NOT
41508: IFTRUE 41517
41510: PUSH
41511: LD_VAR 0 2
41515: NOT
41516: OR
41517: IFFALSE 41521
// exit ;
41519: GO 42581
// case weapon of us_machine_gun :
41521: LD_VAR 0 2
41525: PUSH
41526: LD_INT 2
41528: DOUBLE
41529: EQUAL
41530: IFTRUE 41534
41532: GO 41564
41534: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
41535: LD_ADDR_VAR 0 3
41539: PUSH
41540: LD_INT 1
41542: PUSH
41543: LD_INT 2
41545: PUSH
41546: LD_INT 3
41548: PUSH
41549: LD_INT 4
41551: PUSH
41552: LD_INT 5
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: ST_TO_ADDR
41562: GO 42565
41564: LD_INT 3
41566: DOUBLE
41567: EQUAL
41568: IFTRUE 41572
41570: GO 41602
41572: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
41573: LD_ADDR_VAR 0 3
41577: PUSH
41578: LD_INT 1
41580: PUSH
41581: LD_INT 2
41583: PUSH
41584: LD_INT 3
41586: PUSH
41587: LD_INT 4
41589: PUSH
41590: LD_INT 5
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: LIST
41599: ST_TO_ADDR
41600: GO 42565
41602: LD_INT 11
41604: DOUBLE
41605: EQUAL
41606: IFTRUE 41610
41608: GO 41640
41610: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
41611: LD_ADDR_VAR 0 3
41615: PUSH
41616: LD_INT 1
41618: PUSH
41619: LD_INT 2
41621: PUSH
41622: LD_INT 3
41624: PUSH
41625: LD_INT 4
41627: PUSH
41628: LD_INT 5
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: ST_TO_ADDR
41638: GO 42565
41640: LD_INT 4
41642: DOUBLE
41643: EQUAL
41644: IFTRUE 41648
41646: GO 41674
41648: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
41649: LD_ADDR_VAR 0 3
41653: PUSH
41654: LD_INT 2
41656: PUSH
41657: LD_INT 3
41659: PUSH
41660: LD_INT 4
41662: PUSH
41663: LD_INT 5
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: ST_TO_ADDR
41672: GO 42565
41674: LD_INT 5
41676: DOUBLE
41677: EQUAL
41678: IFTRUE 41682
41680: GO 41708
41682: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
41683: LD_ADDR_VAR 0 3
41687: PUSH
41688: LD_INT 2
41690: PUSH
41691: LD_INT 3
41693: PUSH
41694: LD_INT 4
41696: PUSH
41697: LD_INT 5
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: ST_TO_ADDR
41706: GO 42565
41708: LD_INT 9
41710: DOUBLE
41711: EQUAL
41712: IFTRUE 41716
41714: GO 41742
41716: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
41717: LD_ADDR_VAR 0 3
41721: PUSH
41722: LD_INT 2
41724: PUSH
41725: LD_INT 3
41727: PUSH
41728: LD_INT 4
41730: PUSH
41731: LD_INT 5
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: ST_TO_ADDR
41740: GO 42565
41742: LD_INT 7
41744: DOUBLE
41745: EQUAL
41746: IFTRUE 41750
41748: GO 41776
41750: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
41751: LD_ADDR_VAR 0 3
41755: PUSH
41756: LD_INT 2
41758: PUSH
41759: LD_INT 3
41761: PUSH
41762: LD_INT 4
41764: PUSH
41765: LD_INT 5
41767: PUSH
41768: EMPTY
41769: LIST
41770: LIST
41771: LIST
41772: LIST
41773: ST_TO_ADDR
41774: GO 42565
41776: LD_INT 12
41778: DOUBLE
41779: EQUAL
41780: IFTRUE 41784
41782: GO 41810
41784: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
41785: LD_ADDR_VAR 0 3
41789: PUSH
41790: LD_INT 2
41792: PUSH
41793: LD_INT 3
41795: PUSH
41796: LD_INT 4
41798: PUSH
41799: LD_INT 5
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: ST_TO_ADDR
41808: GO 42565
41810: LD_INT 13
41812: DOUBLE
41813: EQUAL
41814: IFTRUE 41818
41816: GO 41844
41818: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
41819: LD_ADDR_VAR 0 3
41823: PUSH
41824: LD_INT 2
41826: PUSH
41827: LD_INT 3
41829: PUSH
41830: LD_INT 4
41832: PUSH
41833: LD_INT 5
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: ST_TO_ADDR
41842: GO 42565
41844: LD_INT 14
41846: DOUBLE
41847: EQUAL
41848: IFTRUE 41852
41850: GO 41870
41852: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
41853: LD_ADDR_VAR 0 3
41857: PUSH
41858: LD_INT 4
41860: PUSH
41861: LD_INT 5
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: ST_TO_ADDR
41868: GO 42565
41870: LD_INT 6
41872: DOUBLE
41873: EQUAL
41874: IFTRUE 41878
41876: GO 41896
41878: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
41879: LD_ADDR_VAR 0 3
41883: PUSH
41884: LD_INT 4
41886: PUSH
41887: LD_INT 5
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: ST_TO_ADDR
41894: GO 42565
41896: LD_INT 10
41898: DOUBLE
41899: EQUAL
41900: IFTRUE 41904
41902: GO 41922
41904: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
41905: LD_ADDR_VAR 0 3
41909: PUSH
41910: LD_INT 4
41912: PUSH
41913: LD_INT 5
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: ST_TO_ADDR
41920: GO 42565
41922: LD_INT 22
41924: DOUBLE
41925: EQUAL
41926: IFTRUE 41930
41928: GO 41956
41930: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
41931: LD_ADDR_VAR 0 3
41935: PUSH
41936: LD_INT 11
41938: PUSH
41939: LD_INT 12
41941: PUSH
41942: LD_INT 13
41944: PUSH
41945: LD_INT 14
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: ST_TO_ADDR
41954: GO 42565
41956: LD_INT 23
41958: DOUBLE
41959: EQUAL
41960: IFTRUE 41964
41962: GO 41990
41964: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
41965: LD_ADDR_VAR 0 3
41969: PUSH
41970: LD_INT 11
41972: PUSH
41973: LD_INT 12
41975: PUSH
41976: LD_INT 13
41978: PUSH
41979: LD_INT 14
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: LIST
41986: LIST
41987: ST_TO_ADDR
41988: GO 42565
41990: LD_INT 24
41992: DOUBLE
41993: EQUAL
41994: IFTRUE 41998
41996: GO 42024
41998: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
41999: LD_ADDR_VAR 0 3
42003: PUSH
42004: LD_INT 11
42006: PUSH
42007: LD_INT 12
42009: PUSH
42010: LD_INT 13
42012: PUSH
42013: LD_INT 14
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: ST_TO_ADDR
42022: GO 42565
42024: LD_INT 30
42026: DOUBLE
42027: EQUAL
42028: IFTRUE 42032
42030: GO 42058
42032: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
42033: LD_ADDR_VAR 0 3
42037: PUSH
42038: LD_INT 11
42040: PUSH
42041: LD_INT 12
42043: PUSH
42044: LD_INT 13
42046: PUSH
42047: LD_INT 14
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: ST_TO_ADDR
42056: GO 42565
42058: LD_INT 25
42060: DOUBLE
42061: EQUAL
42062: IFTRUE 42066
42064: GO 42084
42066: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
42067: LD_ADDR_VAR 0 3
42071: PUSH
42072: LD_INT 13
42074: PUSH
42075: LD_INT 14
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: ST_TO_ADDR
42082: GO 42565
42084: LD_INT 27
42086: DOUBLE
42087: EQUAL
42088: IFTRUE 42092
42090: GO 42110
42092: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
42093: LD_ADDR_VAR 0 3
42097: PUSH
42098: LD_INT 13
42100: PUSH
42101: LD_INT 14
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: ST_TO_ADDR
42108: GO 42565
42110: LD_INT 92
42112: DOUBLE
42113: EQUAL
42114: IFTRUE 42118
42116: GO 42144
42118: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
42119: LD_ADDR_VAR 0 3
42123: PUSH
42124: LD_INT 11
42126: PUSH
42127: LD_INT 12
42129: PUSH
42130: LD_INT 13
42132: PUSH
42133: LD_INT 14
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: LIST
42140: LIST
42141: ST_TO_ADDR
42142: GO 42565
42144: LD_INT 28
42146: DOUBLE
42147: EQUAL
42148: IFTRUE 42152
42150: GO 42170
42152: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
42153: LD_ADDR_VAR 0 3
42157: PUSH
42158: LD_INT 13
42160: PUSH
42161: LD_INT 14
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: ST_TO_ADDR
42168: GO 42565
42170: LD_INT 29
42172: DOUBLE
42173: EQUAL
42174: IFTRUE 42178
42176: GO 42196
42178: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
42179: LD_ADDR_VAR 0 3
42183: PUSH
42184: LD_INT 13
42186: PUSH
42187: LD_INT 14
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: ST_TO_ADDR
42194: GO 42565
42196: LD_INT 31
42198: DOUBLE
42199: EQUAL
42200: IFTRUE 42204
42202: GO 42222
42204: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
42205: LD_ADDR_VAR 0 3
42209: PUSH
42210: LD_INT 13
42212: PUSH
42213: LD_INT 14
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: ST_TO_ADDR
42220: GO 42565
42222: LD_INT 26
42224: DOUBLE
42225: EQUAL
42226: IFTRUE 42230
42228: GO 42248
42230: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
42231: LD_ADDR_VAR 0 3
42235: PUSH
42236: LD_INT 13
42238: PUSH
42239: LD_INT 14
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: ST_TO_ADDR
42246: GO 42565
42248: LD_INT 42
42250: DOUBLE
42251: EQUAL
42252: IFTRUE 42256
42254: GO 42282
42256: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
42257: LD_ADDR_VAR 0 3
42261: PUSH
42262: LD_INT 21
42264: PUSH
42265: LD_INT 22
42267: PUSH
42268: LD_INT 23
42270: PUSH
42271: LD_INT 24
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: ST_TO_ADDR
42280: GO 42565
42282: LD_INT 43
42284: DOUBLE
42285: EQUAL
42286: IFTRUE 42290
42288: GO 42316
42290: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
42291: LD_ADDR_VAR 0 3
42295: PUSH
42296: LD_INT 21
42298: PUSH
42299: LD_INT 22
42301: PUSH
42302: LD_INT 23
42304: PUSH
42305: LD_INT 24
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: LIST
42312: LIST
42313: ST_TO_ADDR
42314: GO 42565
42316: LD_INT 44
42318: DOUBLE
42319: EQUAL
42320: IFTRUE 42324
42322: GO 42350
42324: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
42325: LD_ADDR_VAR 0 3
42329: PUSH
42330: LD_INT 21
42332: PUSH
42333: LD_INT 22
42335: PUSH
42336: LD_INT 23
42338: PUSH
42339: LD_INT 24
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: ST_TO_ADDR
42348: GO 42565
42350: LD_INT 45
42352: DOUBLE
42353: EQUAL
42354: IFTRUE 42358
42356: GO 42384
42358: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
42359: LD_ADDR_VAR 0 3
42363: PUSH
42364: LD_INT 21
42366: PUSH
42367: LD_INT 22
42369: PUSH
42370: LD_INT 23
42372: PUSH
42373: LD_INT 24
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: ST_TO_ADDR
42382: GO 42565
42384: LD_INT 49
42386: DOUBLE
42387: EQUAL
42388: IFTRUE 42392
42390: GO 42418
42392: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
42393: LD_ADDR_VAR 0 3
42397: PUSH
42398: LD_INT 21
42400: PUSH
42401: LD_INT 22
42403: PUSH
42404: LD_INT 23
42406: PUSH
42407: LD_INT 24
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: LIST
42414: LIST
42415: ST_TO_ADDR
42416: GO 42565
42418: LD_INT 51
42420: DOUBLE
42421: EQUAL
42422: IFTRUE 42426
42424: GO 42452
42426: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
42427: LD_ADDR_VAR 0 3
42431: PUSH
42432: LD_INT 21
42434: PUSH
42435: LD_INT 22
42437: PUSH
42438: LD_INT 23
42440: PUSH
42441: LD_INT 24
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: ST_TO_ADDR
42450: GO 42565
42452: LD_INT 52
42454: DOUBLE
42455: EQUAL
42456: IFTRUE 42460
42458: GO 42486
42460: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
42461: LD_ADDR_VAR 0 3
42465: PUSH
42466: LD_INT 21
42468: PUSH
42469: LD_INT 22
42471: PUSH
42472: LD_INT 23
42474: PUSH
42475: LD_INT 24
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: ST_TO_ADDR
42484: GO 42565
42486: LD_INT 53
42488: DOUBLE
42489: EQUAL
42490: IFTRUE 42494
42492: GO 42512
42494: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
42495: LD_ADDR_VAR 0 3
42499: PUSH
42500: LD_INT 23
42502: PUSH
42503: LD_INT 24
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: ST_TO_ADDR
42510: GO 42565
42512: LD_INT 46
42514: DOUBLE
42515: EQUAL
42516: IFTRUE 42520
42518: GO 42538
42520: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
42521: LD_ADDR_VAR 0 3
42525: PUSH
42526: LD_INT 23
42528: PUSH
42529: LD_INT 24
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: ST_TO_ADDR
42536: GO 42565
42538: LD_INT 47
42540: DOUBLE
42541: EQUAL
42542: IFTRUE 42546
42544: GO 42564
42546: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42547: LD_ADDR_VAR 0 3
42551: PUSH
42552: LD_INT 23
42554: PUSH
42555: LD_INT 24
42557: PUSH
42558: EMPTY
42559: LIST
42560: LIST
42561: ST_TO_ADDR
42562: GO 42565
42564: POP
// result := ( chassis in result ) ;
42565: LD_ADDR_VAR 0 3
42569: PUSH
42570: LD_VAR 0 1
42574: PUSH
42575: LD_VAR 0 3
42579: IN
42580: ST_TO_ADDR
// end ;
42581: LD_VAR 0 3
42585: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
42586: LD_INT 0
42588: PPUSH
42589: PPUSH
42590: PPUSH
42591: PPUSH
42592: PPUSH
42593: PPUSH
42594: PPUSH
// result := array ;
42595: LD_ADDR_VAR 0 5
42599: PUSH
42600: LD_VAR 0 1
42604: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
42605: LD_VAR 0 1
42609: NOT
42610: IFTRUE 42619
42612: PUSH
42613: LD_VAR 0 2
42617: NOT
42618: OR
42619: IFTRUE 42628
42621: PUSH
42622: LD_VAR 0 3
42626: NOT
42627: OR
42628: IFTRUE 42642
42630: PUSH
42631: LD_VAR 0 2
42635: PUSH
42636: LD_VAR 0 1
42640: GREATER
42641: OR
42642: IFTRUE 42656
42644: PUSH
42645: LD_VAR 0 3
42649: PUSH
42650: LD_VAR 0 1
42654: GREATER
42655: OR
42656: IFFALSE 42660
// exit ;
42658: GO 42956
// if direction then
42660: LD_VAR 0 4
42664: IFFALSE 42728
// begin d := 1 ;
42666: LD_ADDR_VAR 0 9
42670: PUSH
42671: LD_INT 1
42673: ST_TO_ADDR
// if i_from > i_to then
42674: LD_VAR 0 2
42678: PUSH
42679: LD_VAR 0 3
42683: GREATER
42684: IFFALSE 42710
// length := ( array - i_from ) + i_to else
42686: LD_ADDR_VAR 0 11
42690: PUSH
42691: LD_VAR 0 1
42695: PUSH
42696: LD_VAR 0 2
42700: MINUS
42701: PUSH
42702: LD_VAR 0 3
42706: PLUS
42707: ST_TO_ADDR
42708: GO 42726
// length := i_to - i_from ;
42710: LD_ADDR_VAR 0 11
42714: PUSH
42715: LD_VAR 0 3
42719: PUSH
42720: LD_VAR 0 2
42724: MINUS
42725: ST_TO_ADDR
// end else
42726: GO 42789
// begin d := - 1 ;
42728: LD_ADDR_VAR 0 9
42732: PUSH
42733: LD_INT 1
42735: NEG
42736: ST_TO_ADDR
// if i_from > i_to then
42737: LD_VAR 0 2
42741: PUSH
42742: LD_VAR 0 3
42746: GREATER
42747: IFFALSE 42767
// length := i_from - i_to else
42749: LD_ADDR_VAR 0 11
42753: PUSH
42754: LD_VAR 0 2
42758: PUSH
42759: LD_VAR 0 3
42763: MINUS
42764: ST_TO_ADDR
42765: GO 42789
// length := ( array - i_to ) + i_from ;
42767: LD_ADDR_VAR 0 11
42771: PUSH
42772: LD_VAR 0 1
42776: PUSH
42777: LD_VAR 0 3
42781: MINUS
42782: PUSH
42783: LD_VAR 0 2
42787: PLUS
42788: ST_TO_ADDR
// end ; if not length then
42789: LD_VAR 0 11
42793: NOT
42794: IFFALSE 42798
// exit ;
42796: GO 42956
// tmp := array ;
42798: LD_ADDR_VAR 0 10
42802: PUSH
42803: LD_VAR 0 1
42807: ST_TO_ADDR
// for i = 1 to length do
42808: LD_ADDR_VAR 0 6
42812: PUSH
42813: DOUBLE
42814: LD_INT 1
42816: DEC
42817: ST_TO_ADDR
42818: LD_VAR 0 11
42822: PUSH
42823: FOR_TO
42824: IFFALSE 42944
// begin for j = 1 to array do
42826: LD_ADDR_VAR 0 7
42830: PUSH
42831: DOUBLE
42832: LD_INT 1
42834: DEC
42835: ST_TO_ADDR
42836: LD_VAR 0 1
42840: PUSH
42841: FOR_TO
42842: IFFALSE 42930
// begin k := j + d ;
42844: LD_ADDR_VAR 0 8
42848: PUSH
42849: LD_VAR 0 7
42853: PUSH
42854: LD_VAR 0 9
42858: PLUS
42859: ST_TO_ADDR
// if k > array then
42860: LD_VAR 0 8
42864: PUSH
42865: LD_VAR 0 1
42869: GREATER
42870: IFFALSE 42880
// k := 1 ;
42872: LD_ADDR_VAR 0 8
42876: PUSH
42877: LD_INT 1
42879: ST_TO_ADDR
// if not k then
42880: LD_VAR 0 8
42884: NOT
42885: IFFALSE 42897
// k := array ;
42887: LD_ADDR_VAR 0 8
42891: PUSH
42892: LD_VAR 0 1
42896: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
42897: LD_ADDR_VAR 0 10
42901: PUSH
42902: LD_VAR 0 10
42906: PPUSH
42907: LD_VAR 0 8
42911: PPUSH
42912: LD_VAR 0 1
42916: PUSH
42917: LD_VAR 0 7
42921: ARRAY
42922: PPUSH
42923: CALL_OW 1
42927: ST_TO_ADDR
// end ;
42928: GO 42841
42930: POP
42931: POP
// array := tmp ;
42932: LD_ADDR_VAR 0 1
42936: PUSH
42937: LD_VAR 0 10
42941: ST_TO_ADDR
// end ;
42942: GO 42823
42944: POP
42945: POP
// result := array ;
42946: LD_ADDR_VAR 0 5
42950: PUSH
42951: LD_VAR 0 1
42955: ST_TO_ADDR
// end ;
42956: LD_VAR 0 5
42960: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
42961: LD_INT 0
42963: PPUSH
42964: PPUSH
// result := 0 ;
42965: LD_ADDR_VAR 0 3
42969: PUSH
42970: LD_INT 0
42972: ST_TO_ADDR
// if not array or not value in array then
42973: LD_VAR 0 1
42977: NOT
42978: IFTRUE 42993
42980: PUSH
42981: LD_VAR 0 2
42985: PUSH
42986: LD_VAR 0 1
42990: IN
42991: NOT
42992: OR
42993: IFFALSE 42997
// exit ;
42995: GO 43051
// for i = 1 to array do
42997: LD_ADDR_VAR 0 4
43001: PUSH
43002: DOUBLE
43003: LD_INT 1
43005: DEC
43006: ST_TO_ADDR
43007: LD_VAR 0 1
43011: PUSH
43012: FOR_TO
43013: IFFALSE 43049
// if value = array [ i ] then
43015: LD_VAR 0 2
43019: PUSH
43020: LD_VAR 0 1
43024: PUSH
43025: LD_VAR 0 4
43029: ARRAY
43030: EQUAL
43031: IFFALSE 43047
// begin result := i ;
43033: LD_ADDR_VAR 0 3
43037: PUSH
43038: LD_VAR 0 4
43042: ST_TO_ADDR
// exit ;
43043: POP
43044: POP
43045: GO 43051
// end ;
43047: GO 43012
43049: POP
43050: POP
// end ;
43051: LD_VAR 0 3
43055: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
43056: LD_INT 0
43058: PPUSH
// vc_chassis := chassis ;
43059: LD_ADDR_OWVAR 37
43063: PUSH
43064: LD_VAR 0 1
43068: ST_TO_ADDR
// vc_engine := engine ;
43069: LD_ADDR_OWVAR 39
43073: PUSH
43074: LD_VAR 0 2
43078: ST_TO_ADDR
// vc_control := control ;
43079: LD_ADDR_OWVAR 38
43083: PUSH
43084: LD_VAR 0 3
43088: ST_TO_ADDR
// vc_weapon := weapon ;
43089: LD_ADDR_OWVAR 40
43093: PUSH
43094: LD_VAR 0 4
43098: ST_TO_ADDR
// vc_fuel_battery := fuel ;
43099: LD_ADDR_OWVAR 41
43103: PUSH
43104: LD_VAR 0 5
43108: ST_TO_ADDR
// end ;
43109: LD_VAR 0 6
43113: RET
// export function WantPlant ( unit ) ; var task ; begin
43114: LD_INT 0
43116: PPUSH
43117: PPUSH
// result := false ;
43118: LD_ADDR_VAR 0 2
43122: PUSH
43123: LD_INT 0
43125: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
43126: LD_ADDR_VAR 0 3
43130: PUSH
43131: LD_VAR 0 1
43135: PPUSH
43136: CALL_OW 437
43140: ST_TO_ADDR
// if task then
43141: LD_VAR 0 3
43145: IFFALSE 43173
// if task [ 1 ] [ 1 ] = p then
43147: LD_VAR 0 3
43151: PUSH
43152: LD_INT 1
43154: ARRAY
43155: PUSH
43156: LD_INT 1
43158: ARRAY
43159: PUSH
43160: LD_STRING p
43162: EQUAL
43163: IFFALSE 43173
// result := true ;
43165: LD_ADDR_VAR 0 2
43169: PUSH
43170: LD_INT 1
43172: ST_TO_ADDR
// end ;
43173: LD_VAR 0 2
43177: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
43178: LD_INT 0
43180: PPUSH
43181: PPUSH
43182: PPUSH
43183: PPUSH
// if pos < 1 then
43184: LD_VAR 0 2
43188: PUSH
43189: LD_INT 1
43191: LESS
43192: IFFALSE 43196
// exit ;
43194: GO 43499
// if pos = 1 then
43196: LD_VAR 0 2
43200: PUSH
43201: LD_INT 1
43203: EQUAL
43204: IFFALSE 43237
// result := Replace ( arr , pos [ 1 ] , value ) else
43206: LD_ADDR_VAR 0 4
43210: PUSH
43211: LD_VAR 0 1
43215: PPUSH
43216: LD_VAR 0 2
43220: PUSH
43221: LD_INT 1
43223: ARRAY
43224: PPUSH
43225: LD_VAR 0 3
43229: PPUSH
43230: CALL_OW 1
43234: ST_TO_ADDR
43235: GO 43499
// begin tmp := arr ;
43237: LD_ADDR_VAR 0 6
43241: PUSH
43242: LD_VAR 0 1
43246: ST_TO_ADDR
// s_arr := [ tmp ] ;
43247: LD_ADDR_VAR 0 7
43251: PUSH
43252: LD_VAR 0 6
43256: PUSH
43257: EMPTY
43258: LIST
43259: ST_TO_ADDR
// for i = 1 to pos - 1 do
43260: LD_ADDR_VAR 0 5
43264: PUSH
43265: DOUBLE
43266: LD_INT 1
43268: DEC
43269: ST_TO_ADDR
43270: LD_VAR 0 2
43274: PUSH
43275: LD_INT 1
43277: MINUS
43278: PUSH
43279: FOR_TO
43280: IFFALSE 43325
// begin tmp := tmp [ pos [ i ] ] ;
43282: LD_ADDR_VAR 0 6
43286: PUSH
43287: LD_VAR 0 6
43291: PUSH
43292: LD_VAR 0 2
43296: PUSH
43297: LD_VAR 0 5
43301: ARRAY
43302: ARRAY
43303: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
43304: LD_ADDR_VAR 0 7
43308: PUSH
43309: LD_VAR 0 7
43313: PUSH
43314: LD_VAR 0 6
43318: PUSH
43319: EMPTY
43320: LIST
43321: ADD
43322: ST_TO_ADDR
// end ;
43323: GO 43279
43325: POP
43326: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
43327: LD_ADDR_VAR 0 6
43331: PUSH
43332: LD_VAR 0 6
43336: PPUSH
43337: LD_VAR 0 2
43341: PUSH
43342: LD_VAR 0 2
43346: ARRAY
43347: PPUSH
43348: LD_VAR 0 3
43352: PPUSH
43353: CALL_OW 1
43357: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
43358: LD_ADDR_VAR 0 7
43362: PUSH
43363: LD_VAR 0 7
43367: PPUSH
43368: LD_VAR 0 7
43372: PPUSH
43373: LD_VAR 0 6
43377: PPUSH
43378: CALL_OW 1
43382: ST_TO_ADDR
// for i = s_arr downto 2 do
43383: LD_ADDR_VAR 0 5
43387: PUSH
43388: DOUBLE
43389: LD_VAR 0 7
43393: INC
43394: ST_TO_ADDR
43395: LD_INT 2
43397: PUSH
43398: FOR_DOWNTO
43399: IFFALSE 43483
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
43401: LD_ADDR_VAR 0 6
43405: PUSH
43406: LD_VAR 0 7
43410: PUSH
43411: LD_VAR 0 5
43415: PUSH
43416: LD_INT 1
43418: MINUS
43419: ARRAY
43420: PPUSH
43421: LD_VAR 0 2
43425: PUSH
43426: LD_VAR 0 5
43430: PUSH
43431: LD_INT 1
43433: MINUS
43434: ARRAY
43435: PPUSH
43436: LD_VAR 0 7
43440: PUSH
43441: LD_VAR 0 5
43445: ARRAY
43446: PPUSH
43447: CALL_OW 1
43451: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
43452: LD_ADDR_VAR 0 7
43456: PUSH
43457: LD_VAR 0 7
43461: PPUSH
43462: LD_VAR 0 5
43466: PUSH
43467: LD_INT 1
43469: MINUS
43470: PPUSH
43471: LD_VAR 0 6
43475: PPUSH
43476: CALL_OW 1
43480: ST_TO_ADDR
// end ;
43481: GO 43398
43483: POP
43484: POP
// result := s_arr [ 1 ] ;
43485: LD_ADDR_VAR 0 4
43489: PUSH
43490: LD_VAR 0 7
43494: PUSH
43495: LD_INT 1
43497: ARRAY
43498: ST_TO_ADDR
// end ; end ;
43499: LD_VAR 0 4
43503: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
43504: LD_INT 0
43506: PPUSH
43507: PPUSH
// if not list then
43508: LD_VAR 0 1
43512: NOT
43513: IFFALSE 43517
// exit ;
43515: GO 43608
// i := list [ pos1 ] ;
43517: LD_ADDR_VAR 0 5
43521: PUSH
43522: LD_VAR 0 1
43526: PUSH
43527: LD_VAR 0 2
43531: ARRAY
43532: ST_TO_ADDR
// if not i then
43533: LD_VAR 0 5
43537: NOT
43538: IFFALSE 43542
// exit ;
43540: GO 43608
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
43542: LD_ADDR_VAR 0 1
43546: PUSH
43547: LD_VAR 0 1
43551: PPUSH
43552: LD_VAR 0 2
43556: PPUSH
43557: LD_VAR 0 1
43561: PUSH
43562: LD_VAR 0 3
43566: ARRAY
43567: PPUSH
43568: CALL_OW 1
43572: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
43573: LD_ADDR_VAR 0 1
43577: PUSH
43578: LD_VAR 0 1
43582: PPUSH
43583: LD_VAR 0 3
43587: PPUSH
43588: LD_VAR 0 5
43592: PPUSH
43593: CALL_OW 1
43597: ST_TO_ADDR
// result := list ;
43598: LD_ADDR_VAR 0 4
43602: PUSH
43603: LD_VAR 0 1
43607: ST_TO_ADDR
// end ;
43608: LD_VAR 0 4
43612: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
43613: LD_INT 0
43615: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
43616: LD_ADDR_VAR 0 5
43620: PUSH
43621: LD_VAR 0 1
43625: PPUSH
43626: CALL_OW 250
43630: PPUSH
43631: LD_VAR 0 1
43635: PPUSH
43636: CALL_OW 251
43640: PPUSH
43641: LD_VAR 0 2
43645: PPUSH
43646: LD_VAR 0 3
43650: PPUSH
43651: LD_VAR 0 4
43655: PPUSH
43656: CALL 44038 0 5
43660: ST_TO_ADDR
// end ;
43661: LD_VAR 0 5
43665: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
43666: LD_INT 0
43668: PPUSH
43669: PPUSH
43670: PPUSH
43671: PPUSH
// if not list or not unit then
43672: LD_VAR 0 2
43676: NOT
43677: IFTRUE 43686
43679: PUSH
43680: LD_VAR 0 1
43684: NOT
43685: OR
43686: IFFALSE 43690
// exit ;
43688: GO 44033
// result := [ ] ;
43690: LD_ADDR_VAR 0 5
43694: PUSH
43695: EMPTY
43696: ST_TO_ADDR
// for i in list do
43697: LD_ADDR_VAR 0 6
43701: PUSH
43702: LD_VAR 0 2
43706: PUSH
43707: FOR_IN
43708: IFFALSE 43926
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
43710: LD_ADDR_VAR 0 8
43714: PUSH
43715: LD_VAR 0 1
43719: PPUSH
43720: LD_VAR 0 6
43724: PUSH
43725: LD_INT 1
43727: ARRAY
43728: PPUSH
43729: LD_VAR 0 6
43733: PUSH
43734: LD_INT 2
43736: ARRAY
43737: PPUSH
43738: CALL_OW 297
43742: ST_TO_ADDR
// if not Count ( result ) then
43743: LD_VAR 0 5
43747: PPUSH
43748: CALL 40294 0 1
43752: NOT
43753: IFFALSE 43786
// begin result := Join ( result , [ i , tmp ] ) ;
43755: LD_ADDR_VAR 0 5
43759: PUSH
43760: LD_VAR 0 5
43764: PPUSH
43765: LD_VAR 0 6
43769: PUSH
43770: LD_VAR 0 8
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PPUSH
43779: CALL 76226 0 2
43783: ST_TO_ADDR
// continue ;
43784: GO 43707
// end ; if result [ result ] [ 2 ] <= tmp then
43786: LD_VAR 0 5
43790: PUSH
43791: LD_VAR 0 5
43795: ARRAY
43796: PUSH
43797: LD_INT 2
43799: ARRAY
43800: PUSH
43801: LD_VAR 0 8
43805: LESSEQUAL
43806: IFFALSE 43839
// result := Join ( result , [ i , tmp ] ) else
43808: LD_ADDR_VAR 0 5
43812: PUSH
43813: LD_VAR 0 5
43817: PPUSH
43818: LD_VAR 0 6
43822: PUSH
43823: LD_VAR 0 8
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PPUSH
43832: CALL 76226 0 2
43836: ST_TO_ADDR
43837: GO 43924
// begin for j := 1 to Count ( result ) do
43839: LD_ADDR_VAR 0 7
43843: PUSH
43844: DOUBLE
43845: LD_INT 1
43847: DEC
43848: ST_TO_ADDR
43849: LD_VAR 0 5
43853: PPUSH
43854: CALL 40294 0 1
43858: PUSH
43859: FOR_TO
43860: IFFALSE 43922
// begin if tmp < result [ j ] [ 2 ] then
43862: LD_VAR 0 8
43866: PUSH
43867: LD_VAR 0 5
43871: PUSH
43872: LD_VAR 0 7
43876: ARRAY
43877: PUSH
43878: LD_INT 2
43880: ARRAY
43881: LESS
43882: IFFALSE 43920
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43884: LD_ADDR_VAR 0 5
43888: PUSH
43889: LD_VAR 0 5
43893: PPUSH
43894: LD_VAR 0 7
43898: PPUSH
43899: LD_VAR 0 6
43903: PUSH
43904: LD_VAR 0 8
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PPUSH
43913: CALL_OW 2
43917: ST_TO_ADDR
// break ;
43918: GO 43922
// end ; end ;
43920: GO 43859
43922: POP
43923: POP
// end ; end ;
43924: GO 43707
43926: POP
43927: POP
// if result and not asc then
43928: LD_VAR 0 5
43932: IFFALSE 43941
43934: PUSH
43935: LD_VAR 0 3
43939: NOT
43940: AND
43941: IFFALSE 43958
// result := ReverseArray ( result ) ;
43943: LD_ADDR_VAR 0 5
43947: PUSH
43948: LD_VAR 0 5
43952: PPUSH
43953: CALL 71316 0 1
43957: ST_TO_ADDR
// tmp := [ ] ;
43958: LD_ADDR_VAR 0 8
43962: PUSH
43963: EMPTY
43964: ST_TO_ADDR
// if mode then
43965: LD_VAR 0 4
43969: IFFALSE 44033
// begin for i := 1 to result do
43971: LD_ADDR_VAR 0 6
43975: PUSH
43976: DOUBLE
43977: LD_INT 1
43979: DEC
43980: ST_TO_ADDR
43981: LD_VAR 0 5
43985: PUSH
43986: FOR_TO
43987: IFFALSE 44021
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
43989: LD_ADDR_VAR 0 8
43993: PUSH
43994: LD_VAR 0 8
43998: PPUSH
43999: LD_VAR 0 5
44003: PUSH
44004: LD_VAR 0 6
44008: ARRAY
44009: PUSH
44010: LD_INT 1
44012: ARRAY
44013: PPUSH
44014: CALL 76226 0 2
44018: ST_TO_ADDR
44019: GO 43986
44021: POP
44022: POP
// result := tmp ;
44023: LD_ADDR_VAR 0 5
44027: PUSH
44028: LD_VAR 0 8
44032: ST_TO_ADDR
// end ; end ;
44033: LD_VAR 0 5
44037: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44038: LD_INT 0
44040: PPUSH
44041: PPUSH
44042: PPUSH
44043: PPUSH
// if not list then
44044: LD_VAR 0 3
44048: NOT
44049: IFFALSE 44053
// exit ;
44051: GO 44443
// result := [ ] ;
44053: LD_ADDR_VAR 0 6
44057: PUSH
44058: EMPTY
44059: ST_TO_ADDR
// for i in list do
44060: LD_ADDR_VAR 0 7
44064: PUSH
44065: LD_VAR 0 3
44069: PUSH
44070: FOR_IN
44071: IFFALSE 44273
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44073: LD_ADDR_VAR 0 9
44077: PUSH
44078: LD_VAR 0 7
44082: PPUSH
44083: LD_VAR 0 1
44087: PPUSH
44088: LD_VAR 0 2
44092: PPUSH
44093: CALL_OW 297
44097: ST_TO_ADDR
// if not result then
44098: LD_VAR 0 6
44102: NOT
44103: IFFALSE 44129
// result := [ [ i , tmp ] ] else
44105: LD_ADDR_VAR 0 6
44109: PUSH
44110: LD_VAR 0 7
44114: PUSH
44115: LD_VAR 0 9
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: PUSH
44124: EMPTY
44125: LIST
44126: ST_TO_ADDR
44127: GO 44271
// begin if result [ result ] [ 2 ] <= tmp then
44129: LD_VAR 0 6
44133: PUSH
44134: LD_VAR 0 6
44138: ARRAY
44139: PUSH
44140: LD_INT 2
44142: ARRAY
44143: PUSH
44144: LD_VAR 0 9
44148: LESSEQUAL
44149: IFFALSE 44191
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44151: LD_ADDR_VAR 0 6
44155: PUSH
44156: LD_VAR 0 6
44160: PPUSH
44161: LD_VAR 0 6
44165: PUSH
44166: LD_INT 1
44168: PLUS
44169: PPUSH
44170: LD_VAR 0 7
44174: PUSH
44175: LD_VAR 0 9
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PPUSH
44184: CALL_OW 2
44188: ST_TO_ADDR
44189: GO 44271
// for j := 1 to result do
44191: LD_ADDR_VAR 0 8
44195: PUSH
44196: DOUBLE
44197: LD_INT 1
44199: DEC
44200: ST_TO_ADDR
44201: LD_VAR 0 6
44205: PUSH
44206: FOR_TO
44207: IFFALSE 44269
// begin if tmp < result [ j ] [ 2 ] then
44209: LD_VAR 0 9
44213: PUSH
44214: LD_VAR 0 6
44218: PUSH
44219: LD_VAR 0 8
44223: ARRAY
44224: PUSH
44225: LD_INT 2
44227: ARRAY
44228: LESS
44229: IFFALSE 44267
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44231: LD_ADDR_VAR 0 6
44235: PUSH
44236: LD_VAR 0 6
44240: PPUSH
44241: LD_VAR 0 8
44245: PPUSH
44246: LD_VAR 0 7
44250: PUSH
44251: LD_VAR 0 9
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PPUSH
44260: CALL_OW 2
44264: ST_TO_ADDR
// break ;
44265: GO 44269
// end ; end ;
44267: GO 44206
44269: POP
44270: POP
// end ; end ;
44271: GO 44070
44273: POP
44274: POP
// if result and not asc then
44275: LD_VAR 0 6
44279: IFFALSE 44288
44281: PUSH
44282: LD_VAR 0 4
44286: NOT
44287: AND
44288: IFFALSE 44363
// begin tmp := result ;
44290: LD_ADDR_VAR 0 9
44294: PUSH
44295: LD_VAR 0 6
44299: ST_TO_ADDR
// for i = tmp downto 1 do
44300: LD_ADDR_VAR 0 7
44304: PUSH
44305: DOUBLE
44306: LD_VAR 0 9
44310: INC
44311: ST_TO_ADDR
44312: LD_INT 1
44314: PUSH
44315: FOR_DOWNTO
44316: IFFALSE 44361
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44318: LD_ADDR_VAR 0 6
44322: PUSH
44323: LD_VAR 0 6
44327: PPUSH
44328: LD_VAR 0 9
44332: PUSH
44333: LD_VAR 0 7
44337: MINUS
44338: PUSH
44339: LD_INT 1
44341: PLUS
44342: PPUSH
44343: LD_VAR 0 9
44347: PUSH
44348: LD_VAR 0 7
44352: ARRAY
44353: PPUSH
44354: CALL_OW 1
44358: ST_TO_ADDR
44359: GO 44315
44361: POP
44362: POP
// end ; tmp := [ ] ;
44363: LD_ADDR_VAR 0 9
44367: PUSH
44368: EMPTY
44369: ST_TO_ADDR
// if mode then
44370: LD_VAR 0 5
44374: IFFALSE 44443
// begin for i = 1 to result do
44376: LD_ADDR_VAR 0 7
44380: PUSH
44381: DOUBLE
44382: LD_INT 1
44384: DEC
44385: ST_TO_ADDR
44386: LD_VAR 0 6
44390: PUSH
44391: FOR_TO
44392: IFFALSE 44431
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
44394: LD_ADDR_VAR 0 9
44398: PUSH
44399: LD_VAR 0 9
44403: PPUSH
44404: LD_VAR 0 7
44408: PPUSH
44409: LD_VAR 0 6
44413: PUSH
44414: LD_VAR 0 7
44418: ARRAY
44419: PUSH
44420: LD_INT 1
44422: ARRAY
44423: PPUSH
44424: CALL_OW 1
44428: ST_TO_ADDR
44429: GO 44391
44431: POP
44432: POP
// result := tmp ;
44433: LD_ADDR_VAR 0 6
44437: PUSH
44438: LD_VAR 0 9
44442: ST_TO_ADDR
// end ; end ;
44443: LD_VAR 0 6
44447: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
44448: LD_INT 0
44450: PPUSH
44451: PPUSH
44452: PPUSH
44453: PPUSH
44454: PPUSH
44455: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
44456: LD_ADDR_VAR 0 5
44460: PUSH
44461: LD_INT 0
44463: PUSH
44464: LD_INT 0
44466: PUSH
44467: LD_INT 0
44469: PUSH
44470: EMPTY
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: ST_TO_ADDR
// if not x or not y then
44478: LD_VAR 0 2
44482: NOT
44483: IFTRUE 44492
44485: PUSH
44486: LD_VAR 0 3
44490: NOT
44491: OR
44492: IFFALSE 44496
// exit ;
44494: GO 46152
// if not range then
44496: LD_VAR 0 4
44500: NOT
44501: IFFALSE 44511
// range := 10 ;
44503: LD_ADDR_VAR 0 4
44507: PUSH
44508: LD_INT 10
44510: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44511: LD_ADDR_VAR 0 8
44515: PUSH
44516: LD_INT 81
44518: PUSH
44519: LD_VAR 0 1
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: LD_INT 92
44530: PUSH
44531: LD_VAR 0 2
44535: PUSH
44536: LD_VAR 0 3
44540: PUSH
44541: LD_VAR 0 4
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: PUSH
44552: LD_INT 3
44554: PUSH
44555: LD_INT 21
44557: PUSH
44558: LD_INT 3
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: LIST
44573: PPUSH
44574: CALL_OW 69
44578: ST_TO_ADDR
// if not tmp then
44579: LD_VAR 0 8
44583: NOT
44584: IFFALSE 44588
// exit ;
44586: GO 46152
// for i in tmp do
44588: LD_ADDR_VAR 0 6
44592: PUSH
44593: LD_VAR 0 8
44597: PUSH
44598: FOR_IN
44599: IFFALSE 46127
// begin points := [ 0 , 0 , 0 ] ;
44601: LD_ADDR_VAR 0 9
44605: PUSH
44606: LD_INT 0
44608: PUSH
44609: LD_INT 0
44611: PUSH
44612: LD_INT 0
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: LIST
44619: ST_TO_ADDR
// bpoints := 1 ;
44620: LD_ADDR_VAR 0 10
44624: PUSH
44625: LD_INT 1
44627: ST_TO_ADDR
// case GetType ( i ) of unit_human :
44628: LD_VAR 0 6
44632: PPUSH
44633: CALL_OW 247
44637: PUSH
44638: LD_INT 1
44640: DOUBLE
44641: EQUAL
44642: IFTRUE 44646
44644: GO 45228
44646: POP
// begin if GetClass ( i ) = 1 then
44647: LD_VAR 0 6
44651: PPUSH
44652: CALL_OW 257
44656: PUSH
44657: LD_INT 1
44659: EQUAL
44660: IFFALSE 44681
// points := [ 10 , 5 , 3 ] ;
44662: LD_ADDR_VAR 0 9
44666: PUSH
44667: LD_INT 10
44669: PUSH
44670: LD_INT 5
44672: PUSH
44673: LD_INT 3
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: LIST
44680: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
44681: LD_VAR 0 6
44685: PPUSH
44686: CALL_OW 257
44690: PUSH
44691: LD_INT 2
44693: PUSH
44694: LD_INT 3
44696: PUSH
44697: LD_INT 4
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: LIST
44704: IN
44705: IFFALSE 44726
// points := [ 3 , 2 , 1 ] ;
44707: LD_ADDR_VAR 0 9
44711: PUSH
44712: LD_INT 3
44714: PUSH
44715: LD_INT 2
44717: PUSH
44718: LD_INT 1
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: LIST
44725: ST_TO_ADDR
// if GetClass ( i ) = 5 then
44726: LD_VAR 0 6
44730: PPUSH
44731: CALL_OW 257
44735: PUSH
44736: LD_INT 5
44738: EQUAL
44739: IFFALSE 44760
// points := [ 130 , 5 , 2 ] ;
44741: LD_ADDR_VAR 0 9
44745: PUSH
44746: LD_INT 130
44748: PUSH
44749: LD_INT 5
44751: PUSH
44752: LD_INT 2
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: LIST
44759: ST_TO_ADDR
// if GetClass ( i ) = 8 then
44760: LD_VAR 0 6
44764: PPUSH
44765: CALL_OW 257
44769: PUSH
44770: LD_INT 8
44772: EQUAL
44773: IFFALSE 44794
// points := [ 35 , 35 , 30 ] ;
44775: LD_ADDR_VAR 0 9
44779: PUSH
44780: LD_INT 35
44782: PUSH
44783: LD_INT 35
44785: PUSH
44786: LD_INT 30
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: LIST
44793: ST_TO_ADDR
// if GetClass ( i ) = 9 then
44794: LD_VAR 0 6
44798: PPUSH
44799: CALL_OW 257
44803: PUSH
44804: LD_INT 9
44806: EQUAL
44807: IFFALSE 44828
// points := [ 20 , 55 , 40 ] ;
44809: LD_ADDR_VAR 0 9
44813: PUSH
44814: LD_INT 20
44816: PUSH
44817: LD_INT 55
44819: PUSH
44820: LD_INT 40
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: LIST
44827: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
44828: LD_VAR 0 6
44832: PPUSH
44833: CALL_OW 257
44837: PUSH
44838: LD_INT 12
44840: PUSH
44841: LD_INT 16
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: IN
44848: IFFALSE 44869
// points := [ 5 , 3 , 2 ] ;
44850: LD_ADDR_VAR 0 9
44854: PUSH
44855: LD_INT 5
44857: PUSH
44858: LD_INT 3
44860: PUSH
44861: LD_INT 2
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: LIST
44868: ST_TO_ADDR
// if GetClass ( i ) = 17 then
44869: LD_VAR 0 6
44873: PPUSH
44874: CALL_OW 257
44878: PUSH
44879: LD_INT 17
44881: EQUAL
44882: IFFALSE 44903
// points := [ 100 , 50 , 75 ] ;
44884: LD_ADDR_VAR 0 9
44888: PUSH
44889: LD_INT 100
44891: PUSH
44892: LD_INT 50
44894: PUSH
44895: LD_INT 75
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: LIST
44902: ST_TO_ADDR
// if GetClass ( i ) = 15 then
44903: LD_VAR 0 6
44907: PPUSH
44908: CALL_OW 257
44912: PUSH
44913: LD_INT 15
44915: EQUAL
44916: IFFALSE 44937
// points := [ 10 , 5 , 3 ] ;
44918: LD_ADDR_VAR 0 9
44922: PUSH
44923: LD_INT 10
44925: PUSH
44926: LD_INT 5
44928: PUSH
44929: LD_INT 3
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: LIST
44936: ST_TO_ADDR
// if GetClass ( i ) = 14 then
44937: LD_VAR 0 6
44941: PPUSH
44942: CALL_OW 257
44946: PUSH
44947: LD_INT 14
44949: EQUAL
44950: IFFALSE 44971
// points := [ 10 , 0 , 0 ] ;
44952: LD_ADDR_VAR 0 9
44956: PUSH
44957: LD_INT 10
44959: PUSH
44960: LD_INT 0
44962: PUSH
44963: LD_INT 0
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: LIST
44970: ST_TO_ADDR
// if GetClass ( i ) = 11 then
44971: LD_VAR 0 6
44975: PPUSH
44976: CALL_OW 257
44980: PUSH
44981: LD_INT 11
44983: EQUAL
44984: IFFALSE 45005
// points := [ 30 , 10 , 5 ] ;
44986: LD_ADDR_VAR 0 9
44990: PUSH
44991: LD_INT 30
44993: PUSH
44994: LD_INT 10
44996: PUSH
44997: LD_INT 5
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: LIST
45004: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45005: LD_VAR 0 1
45009: PPUSH
45010: LD_INT 5
45012: PPUSH
45013: CALL_OW 321
45017: PUSH
45018: LD_INT 2
45020: EQUAL
45021: IFFALSE 45038
// bpoints := bpoints * 1.8 ;
45023: LD_ADDR_VAR 0 10
45027: PUSH
45028: LD_VAR 0 10
45032: PUSH
45033: LD_REAL  1.80000000000000E+0000
45036: MUL
45037: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45038: LD_VAR 0 6
45042: PPUSH
45043: CALL_OW 257
45047: PUSH
45048: LD_INT 1
45050: PUSH
45051: LD_INT 2
45053: PUSH
45054: LD_INT 3
45056: PUSH
45057: LD_INT 4
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: IN
45066: IFFALSE 45086
45068: PUSH
45069: LD_VAR 0 1
45073: PPUSH
45074: LD_INT 51
45076: PPUSH
45077: CALL_OW 321
45081: PUSH
45082: LD_INT 2
45084: EQUAL
45085: AND
45086: IFFALSE 45103
// bpoints := bpoints * 1.2 ;
45088: LD_ADDR_VAR 0 10
45092: PUSH
45093: LD_VAR 0 10
45097: PUSH
45098: LD_REAL  1.20000000000000E+0000
45101: MUL
45102: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45103: LD_VAR 0 6
45107: PPUSH
45108: CALL_OW 257
45112: PUSH
45113: LD_INT 5
45115: PUSH
45116: LD_INT 7
45118: PUSH
45119: LD_INT 9
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: LIST
45126: IN
45127: IFFALSE 45147
45129: PUSH
45130: LD_VAR 0 1
45134: PPUSH
45135: LD_INT 52
45137: PPUSH
45138: CALL_OW 321
45142: PUSH
45143: LD_INT 2
45145: EQUAL
45146: AND
45147: IFFALSE 45164
// bpoints := bpoints * 1.5 ;
45149: LD_ADDR_VAR 0 10
45153: PUSH
45154: LD_VAR 0 10
45158: PUSH
45159: LD_REAL  1.50000000000000E+0000
45162: MUL
45163: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45164: LD_VAR 0 1
45168: PPUSH
45169: LD_INT 66
45171: PPUSH
45172: CALL_OW 321
45176: PUSH
45177: LD_INT 2
45179: EQUAL
45180: IFFALSE 45197
// bpoints := bpoints * 1.1 ;
45182: LD_ADDR_VAR 0 10
45186: PUSH
45187: LD_VAR 0 10
45191: PUSH
45192: LD_REAL  1.10000000000000E+0000
45195: MUL
45196: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45197: LD_ADDR_VAR 0 10
45201: PUSH
45202: LD_VAR 0 10
45206: PUSH
45207: LD_VAR 0 6
45211: PPUSH
45212: LD_INT 1
45214: PPUSH
45215: CALL_OW 259
45219: PUSH
45220: LD_REAL  1.15000000000000E+0000
45223: MUL
45224: MUL
45225: ST_TO_ADDR
// end ; unit_vehicle :
45226: GO 46056
45228: LD_INT 2
45230: DOUBLE
45231: EQUAL
45232: IFTRUE 45236
45234: GO 46044
45236: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45237: LD_VAR 0 6
45241: PPUSH
45242: CALL_OW 264
45246: PUSH
45247: LD_INT 2
45249: PUSH
45250: LD_INT 42
45252: PUSH
45253: LD_INT 24
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: LIST
45260: IN
45261: IFFALSE 45282
// points := [ 25 , 5 , 3 ] ;
45263: LD_ADDR_VAR 0 9
45267: PUSH
45268: LD_INT 25
45270: PUSH
45271: LD_INT 5
45273: PUSH
45274: LD_INT 3
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: LIST
45281: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45282: LD_VAR 0 6
45286: PPUSH
45287: CALL_OW 264
45291: PUSH
45292: LD_INT 4
45294: PUSH
45295: LD_INT 43
45297: PUSH
45298: LD_INT 25
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: LIST
45305: IN
45306: IFFALSE 45327
// points := [ 40 , 15 , 5 ] ;
45308: LD_ADDR_VAR 0 9
45312: PUSH
45313: LD_INT 40
45315: PUSH
45316: LD_INT 15
45318: PUSH
45319: LD_INT 5
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: LIST
45326: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45327: LD_VAR 0 6
45331: PPUSH
45332: CALL_OW 264
45336: PUSH
45337: LD_INT 3
45339: PUSH
45340: LD_INT 23
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: IN
45347: IFFALSE 45368
// points := [ 7 , 25 , 8 ] ;
45349: LD_ADDR_VAR 0 9
45353: PUSH
45354: LD_INT 7
45356: PUSH
45357: LD_INT 25
45359: PUSH
45360: LD_INT 8
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: LIST
45367: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
45368: LD_VAR 0 6
45372: PPUSH
45373: CALL_OW 264
45377: PUSH
45378: LD_INT 5
45380: PUSH
45381: LD_INT 27
45383: PUSH
45384: LD_INT 44
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: LIST
45391: IN
45392: IFFALSE 45413
// points := [ 14 , 50 , 16 ] ;
45394: LD_ADDR_VAR 0 9
45398: PUSH
45399: LD_INT 14
45401: PUSH
45402: LD_INT 50
45404: PUSH
45405: LD_INT 16
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: LIST
45412: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
45413: LD_VAR 0 6
45417: PPUSH
45418: CALL_OW 264
45422: PUSH
45423: LD_INT 6
45425: PUSH
45426: LD_INT 46
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: IN
45433: IFFALSE 45454
// points := [ 32 , 120 , 70 ] ;
45435: LD_ADDR_VAR 0 9
45439: PUSH
45440: LD_INT 32
45442: PUSH
45443: LD_INT 120
45445: PUSH
45446: LD_INT 70
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: LIST
45453: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
45454: LD_VAR 0 6
45458: PPUSH
45459: CALL_OW 264
45463: PUSH
45464: LD_INT 7
45466: PUSH
45467: LD_INT 28
45469: PUSH
45470: LD_INT 45
45472: PUSH
45473: LD_INT 92
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: IN
45482: IFFALSE 45503
// points := [ 35 , 20 , 45 ] ;
45484: LD_ADDR_VAR 0 9
45488: PUSH
45489: LD_INT 35
45491: PUSH
45492: LD_INT 20
45494: PUSH
45495: LD_INT 45
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: LIST
45502: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
45503: LD_VAR 0 6
45507: PPUSH
45508: CALL_OW 264
45512: PUSH
45513: LD_INT 47
45515: PUSH
45516: EMPTY
45517: LIST
45518: IN
45519: IFFALSE 45540
// points := [ 67 , 45 , 75 ] ;
45521: LD_ADDR_VAR 0 9
45525: PUSH
45526: LD_INT 67
45528: PUSH
45529: LD_INT 45
45531: PUSH
45532: LD_INT 75
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: LIST
45539: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
45540: LD_VAR 0 6
45544: PPUSH
45545: CALL_OW 264
45549: PUSH
45550: LD_INT 26
45552: PUSH
45553: EMPTY
45554: LIST
45555: IN
45556: IFFALSE 45577
// points := [ 120 , 30 , 80 ] ;
45558: LD_ADDR_VAR 0 9
45562: PUSH
45563: LD_INT 120
45565: PUSH
45566: LD_INT 30
45568: PUSH
45569: LD_INT 80
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: LIST
45576: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
45577: LD_VAR 0 6
45581: PPUSH
45582: CALL_OW 264
45586: PUSH
45587: LD_INT 22
45589: PUSH
45590: EMPTY
45591: LIST
45592: IN
45593: IFFALSE 45614
// points := [ 40 , 1 , 1 ] ;
45595: LD_ADDR_VAR 0 9
45599: PUSH
45600: LD_INT 40
45602: PUSH
45603: LD_INT 1
45605: PUSH
45606: LD_INT 1
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: LIST
45613: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
45614: LD_VAR 0 6
45618: PPUSH
45619: CALL_OW 264
45623: PUSH
45624: LD_INT 29
45626: PUSH
45627: EMPTY
45628: LIST
45629: IN
45630: IFFALSE 45651
// points := [ 70 , 200 , 400 ] ;
45632: LD_ADDR_VAR 0 9
45636: PUSH
45637: LD_INT 70
45639: PUSH
45640: LD_INT 200
45642: PUSH
45643: LD_INT 400
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: LIST
45650: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
45651: LD_VAR 0 6
45655: PPUSH
45656: CALL_OW 264
45660: PUSH
45661: LD_INT 14
45663: PUSH
45664: LD_INT 53
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: IN
45671: IFFALSE 45692
// points := [ 40 , 10 , 20 ] ;
45673: LD_ADDR_VAR 0 9
45677: PUSH
45678: LD_INT 40
45680: PUSH
45681: LD_INT 10
45683: PUSH
45684: LD_INT 20
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: LIST
45691: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
45692: LD_VAR 0 6
45696: PPUSH
45697: CALL_OW 264
45701: PUSH
45702: LD_INT 9
45704: PUSH
45705: EMPTY
45706: LIST
45707: IN
45708: IFFALSE 45729
// points := [ 5 , 70 , 20 ] ;
45710: LD_ADDR_VAR 0 9
45714: PUSH
45715: LD_INT 5
45717: PUSH
45718: LD_INT 70
45720: PUSH
45721: LD_INT 20
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: LIST
45728: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
45729: LD_VAR 0 6
45733: PPUSH
45734: CALL_OW 264
45738: PUSH
45739: LD_INT 10
45741: PUSH
45742: EMPTY
45743: LIST
45744: IN
45745: IFFALSE 45766
// points := [ 35 , 110 , 70 ] ;
45747: LD_ADDR_VAR 0 9
45751: PUSH
45752: LD_INT 35
45754: PUSH
45755: LD_INT 110
45757: PUSH
45758: LD_INT 70
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: LIST
45765: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
45766: LD_VAR 0 6
45770: PPUSH
45771: CALL_OW 265
45775: PUSH
45776: LD_INT 25
45778: EQUAL
45779: IFFALSE 45800
// points := [ 80 , 65 , 100 ] ;
45781: LD_ADDR_VAR 0 9
45785: PUSH
45786: LD_INT 80
45788: PUSH
45789: LD_INT 65
45791: PUSH
45792: LD_INT 100
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: LIST
45799: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
45800: LD_VAR 0 6
45804: PPUSH
45805: CALL_OW 263
45809: PUSH
45810: LD_INT 1
45812: EQUAL
45813: IFFALSE 45848
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
45815: LD_ADDR_VAR 0 10
45819: PUSH
45820: LD_VAR 0 10
45824: PUSH
45825: LD_VAR 0 6
45829: PPUSH
45830: CALL_OW 311
45834: PPUSH
45835: LD_INT 3
45837: PPUSH
45838: CALL_OW 259
45842: PUSH
45843: LD_INT 4
45845: MUL
45846: MUL
45847: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
45848: LD_VAR 0 6
45852: PPUSH
45853: CALL_OW 263
45857: PUSH
45858: LD_INT 2
45860: EQUAL
45861: IFFALSE 45912
// begin j := IsControledBy ( i ) ;
45863: LD_ADDR_VAR 0 7
45867: PUSH
45868: LD_VAR 0 6
45872: PPUSH
45873: CALL_OW 312
45877: ST_TO_ADDR
// if j then
45878: LD_VAR 0 7
45882: IFFALSE 45912
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
45884: LD_ADDR_VAR 0 10
45888: PUSH
45889: LD_VAR 0 10
45893: PUSH
45894: LD_VAR 0 7
45898: PPUSH
45899: LD_INT 3
45901: PPUSH
45902: CALL_OW 259
45906: PUSH
45907: LD_INT 3
45909: MUL
45910: MUL
45911: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
45912: LD_VAR 0 6
45916: PPUSH
45917: CALL_OW 264
45921: PUSH
45922: LD_INT 5
45924: PUSH
45925: LD_INT 6
45927: PUSH
45928: LD_INT 46
45930: PUSH
45931: LD_INT 44
45933: PUSH
45934: LD_INT 47
45936: PUSH
45937: LD_INT 45
45939: PUSH
45940: LD_INT 28
45942: PUSH
45943: LD_INT 7
45945: PUSH
45946: LD_INT 27
45948: PUSH
45949: LD_INT 29
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: IN
45964: IFFALSE 45984
45966: PUSH
45967: LD_VAR 0 1
45971: PPUSH
45972: LD_INT 52
45974: PPUSH
45975: CALL_OW 321
45979: PUSH
45980: LD_INT 2
45982: EQUAL
45983: AND
45984: IFFALSE 46001
// bpoints := bpoints * 1.2 ;
45986: LD_ADDR_VAR 0 10
45990: PUSH
45991: LD_VAR 0 10
45995: PUSH
45996: LD_REAL  1.20000000000000E+0000
45999: MUL
46000: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46001: LD_VAR 0 6
46005: PPUSH
46006: CALL_OW 264
46010: PUSH
46011: LD_INT 6
46013: PUSH
46014: LD_INT 46
46016: PUSH
46017: LD_INT 47
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: LIST
46024: IN
46025: IFFALSE 46042
// bpoints := bpoints * 1.2 ;
46027: LD_ADDR_VAR 0 10
46031: PUSH
46032: LD_VAR 0 10
46036: PUSH
46037: LD_REAL  1.20000000000000E+0000
46040: MUL
46041: ST_TO_ADDR
// end ; unit_building :
46042: GO 46056
46044: LD_INT 3
46046: DOUBLE
46047: EQUAL
46048: IFTRUE 46052
46050: GO 46055
46052: POP
// ; end ;
46053: GO 46056
46055: POP
// for j = 1 to 3 do
46056: LD_ADDR_VAR 0 7
46060: PUSH
46061: DOUBLE
46062: LD_INT 1
46064: DEC
46065: ST_TO_ADDR
46066: LD_INT 3
46068: PUSH
46069: FOR_TO
46070: IFFALSE 46123
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46072: LD_ADDR_VAR 0 5
46076: PUSH
46077: LD_VAR 0 5
46081: PPUSH
46082: LD_VAR 0 7
46086: PPUSH
46087: LD_VAR 0 5
46091: PUSH
46092: LD_VAR 0 7
46096: ARRAY
46097: PUSH
46098: LD_VAR 0 9
46102: PUSH
46103: LD_VAR 0 7
46107: ARRAY
46108: PUSH
46109: LD_VAR 0 10
46113: MUL
46114: PLUS
46115: PPUSH
46116: CALL_OW 1
46120: ST_TO_ADDR
46121: GO 46069
46123: POP
46124: POP
// end ;
46125: GO 44598
46127: POP
46128: POP
// result := Replace ( result , 4 , tmp ) ;
46129: LD_ADDR_VAR 0 5
46133: PUSH
46134: LD_VAR 0 5
46138: PPUSH
46139: LD_INT 4
46141: PPUSH
46142: LD_VAR 0 8
46146: PPUSH
46147: CALL_OW 1
46151: ST_TO_ADDR
// end ;
46152: LD_VAR 0 5
46156: RET
// export function DangerAtRange ( unit , range ) ; begin
46157: LD_INT 0
46159: PPUSH
// if not unit then
46160: LD_VAR 0 1
46164: NOT
46165: IFFALSE 46169
// exit ;
46167: GO 46214
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46169: LD_ADDR_VAR 0 3
46173: PUSH
46174: LD_VAR 0 1
46178: PPUSH
46179: CALL_OW 255
46183: PPUSH
46184: LD_VAR 0 1
46188: PPUSH
46189: CALL_OW 250
46193: PPUSH
46194: LD_VAR 0 1
46198: PPUSH
46199: CALL_OW 251
46203: PPUSH
46204: LD_VAR 0 2
46208: PPUSH
46209: CALL 44448 0 4
46213: ST_TO_ADDR
// end ;
46214: LD_VAR 0 3
46218: RET
// export function DangerInArea ( side , area ) ; begin
46219: LD_INT 0
46221: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46222: LD_ADDR_VAR 0 3
46226: PUSH
46227: LD_VAR 0 2
46231: PPUSH
46232: LD_INT 81
46234: PUSH
46235: LD_VAR 0 1
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PPUSH
46244: CALL_OW 70
46248: ST_TO_ADDR
// end ;
46249: LD_VAR 0 3
46253: RET
// export function IsExtension ( b ) ; begin
46254: LD_INT 0
46256: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46257: LD_ADDR_VAR 0 2
46261: PUSH
46262: LD_VAR 0 1
46266: PUSH
46267: LD_INT 23
46269: PUSH
46270: LD_INT 20
46272: PUSH
46273: LD_INT 22
46275: PUSH
46276: LD_INT 17
46278: PUSH
46279: LD_INT 24
46281: PUSH
46282: LD_INT 21
46284: PUSH
46285: LD_INT 19
46287: PUSH
46288: LD_INT 16
46290: PUSH
46291: LD_INT 25
46293: PUSH
46294: LD_INT 18
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: LIST
46304: LIST
46305: LIST
46306: LIST
46307: LIST
46308: IN
46309: ST_TO_ADDR
// end ;
46310: LD_VAR 0 2
46314: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46315: LD_INT 0
46317: PPUSH
46318: PPUSH
46319: PPUSH
// result := [ ] ;
46320: LD_ADDR_VAR 0 4
46324: PUSH
46325: EMPTY
46326: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46327: LD_ADDR_VAR 0 5
46331: PUSH
46332: LD_VAR 0 2
46336: PPUSH
46337: LD_INT 21
46339: PUSH
46340: LD_INT 3
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PPUSH
46347: CALL_OW 70
46351: ST_TO_ADDR
// if not tmp then
46352: LD_VAR 0 5
46356: NOT
46357: IFFALSE 46361
// exit ;
46359: GO 46425
// if checkLink then
46361: LD_VAR 0 3
46365: IFFALSE 46415
// begin for i in tmp do
46367: LD_ADDR_VAR 0 6
46371: PUSH
46372: LD_VAR 0 5
46376: PUSH
46377: FOR_IN
46378: IFFALSE 46413
// if GetBase ( i ) <> base then
46380: LD_VAR 0 6
46384: PPUSH
46385: CALL_OW 274
46389: PUSH
46390: LD_VAR 0 1
46394: NONEQUAL
46395: IFFALSE 46411
// ComLinkToBase ( base , i ) ;
46397: LD_VAR 0 1
46401: PPUSH
46402: LD_VAR 0 6
46406: PPUSH
46407: CALL_OW 169
46411: GO 46377
46413: POP
46414: POP
// end ; result := tmp ;
46415: LD_ADDR_VAR 0 4
46419: PUSH
46420: LD_VAR 0 5
46424: ST_TO_ADDR
// end ;
46425: LD_VAR 0 4
46429: RET
// export function ComComplete ( units , b ) ; var i ; begin
46430: LD_INT 0
46432: PPUSH
46433: PPUSH
// if not units then
46434: LD_VAR 0 1
46438: NOT
46439: IFFALSE 46443
// exit ;
46441: GO 46533
// for i in units do
46443: LD_ADDR_VAR 0 4
46447: PUSH
46448: LD_VAR 0 1
46452: PUSH
46453: FOR_IN
46454: IFFALSE 46531
// if BuildingStatus ( b ) = bs_build then
46456: LD_VAR 0 2
46460: PPUSH
46461: CALL_OW 461
46465: PUSH
46466: LD_INT 1
46468: EQUAL
46469: IFFALSE 46529
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
46471: LD_VAR 0 4
46475: PPUSH
46476: LD_STRING h
46478: PUSH
46479: LD_VAR 0 2
46483: PPUSH
46484: CALL_OW 250
46488: PUSH
46489: LD_VAR 0 2
46493: PPUSH
46494: CALL_OW 251
46498: PUSH
46499: LD_VAR 0 2
46503: PUSH
46504: LD_INT 0
46506: PUSH
46507: LD_INT 0
46509: PUSH
46510: LD_INT 0
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: PUSH
46522: EMPTY
46523: LIST
46524: PPUSH
46525: CALL_OW 446
46529: GO 46453
46531: POP
46532: POP
// end ;
46533: LD_VAR 0 3
46537: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
46538: LD_INT 0
46540: PPUSH
46541: PPUSH
46542: PPUSH
46543: PPUSH
46544: PPUSH
46545: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
46546: LD_VAR 0 1
46550: NOT
46551: IFTRUE 46568
46553: PUSH
46554: LD_VAR 0 1
46558: PPUSH
46559: CALL_OW 263
46563: PUSH
46564: LD_INT 2
46566: NONEQUAL
46567: OR
46568: IFFALSE 46572
// exit ;
46570: GO 46888
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
46572: LD_ADDR_VAR 0 6
46576: PUSH
46577: LD_INT 22
46579: PUSH
46580: LD_VAR 0 1
46584: PPUSH
46585: CALL_OW 255
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 2
46596: PUSH
46597: LD_INT 30
46599: PUSH
46600: LD_INT 36
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 34
46609: PUSH
46610: LD_INT 31
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: LIST
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PPUSH
46626: CALL_OW 69
46630: ST_TO_ADDR
// if not tmp then
46631: LD_VAR 0 6
46635: NOT
46636: IFFALSE 46640
// exit ;
46638: GO 46888
// result := [ ] ;
46640: LD_ADDR_VAR 0 2
46644: PUSH
46645: EMPTY
46646: ST_TO_ADDR
// for i in tmp do
46647: LD_ADDR_VAR 0 3
46651: PUSH
46652: LD_VAR 0 6
46656: PUSH
46657: FOR_IN
46658: IFFALSE 46729
// begin t := UnitsInside ( i ) ;
46660: LD_ADDR_VAR 0 4
46664: PUSH
46665: LD_VAR 0 3
46669: PPUSH
46670: CALL_OW 313
46674: ST_TO_ADDR
// if t then
46675: LD_VAR 0 4
46679: IFFALSE 46727
// for j in t do
46681: LD_ADDR_VAR 0 7
46685: PUSH
46686: LD_VAR 0 4
46690: PUSH
46691: FOR_IN
46692: IFFALSE 46725
// result := Replace ( result , result + 1 , j ) ;
46694: LD_ADDR_VAR 0 2
46698: PUSH
46699: LD_VAR 0 2
46703: PPUSH
46704: LD_VAR 0 2
46708: PUSH
46709: LD_INT 1
46711: PLUS
46712: PPUSH
46713: LD_VAR 0 7
46717: PPUSH
46718: CALL_OW 1
46722: ST_TO_ADDR
46723: GO 46691
46725: POP
46726: POP
// end ;
46727: GO 46657
46729: POP
46730: POP
// if not result then
46731: LD_VAR 0 2
46735: NOT
46736: IFFALSE 46740
// exit ;
46738: GO 46888
// mech := result [ 1 ] ;
46740: LD_ADDR_VAR 0 5
46744: PUSH
46745: LD_VAR 0 2
46749: PUSH
46750: LD_INT 1
46752: ARRAY
46753: ST_TO_ADDR
// if result > 1 then
46754: LD_VAR 0 2
46758: PUSH
46759: LD_INT 1
46761: GREATER
46762: IFFALSE 46874
// begin for i = 2 to result do
46764: LD_ADDR_VAR 0 3
46768: PUSH
46769: DOUBLE
46770: LD_INT 2
46772: DEC
46773: ST_TO_ADDR
46774: LD_VAR 0 2
46778: PUSH
46779: FOR_TO
46780: IFFALSE 46872
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
46782: LD_ADDR_VAR 0 4
46786: PUSH
46787: LD_VAR 0 2
46791: PUSH
46792: LD_VAR 0 3
46796: ARRAY
46797: PPUSH
46798: LD_INT 3
46800: PPUSH
46801: CALL_OW 259
46805: PUSH
46806: LD_VAR 0 2
46810: PUSH
46811: LD_VAR 0 3
46815: ARRAY
46816: PPUSH
46817: CALL_OW 432
46821: MINUS
46822: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
46823: LD_VAR 0 4
46827: PUSH
46828: LD_VAR 0 5
46832: PPUSH
46833: LD_INT 3
46835: PPUSH
46836: CALL_OW 259
46840: PUSH
46841: LD_VAR 0 5
46845: PPUSH
46846: CALL_OW 432
46850: MINUS
46851: GREATEREQUAL
46852: IFFALSE 46870
// mech := result [ i ] ;
46854: LD_ADDR_VAR 0 5
46858: PUSH
46859: LD_VAR 0 2
46863: PUSH
46864: LD_VAR 0 3
46868: ARRAY
46869: ST_TO_ADDR
// end ;
46870: GO 46779
46872: POP
46873: POP
// end ; ComLinkTo ( vehicle , mech ) ;
46874: LD_VAR 0 1
46878: PPUSH
46879: LD_VAR 0 5
46883: PPUSH
46884: CALL_OW 135
// end ;
46888: LD_VAR 0 2
46892: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
46893: LD_INT 0
46895: PPUSH
46896: PPUSH
46897: PPUSH
46898: PPUSH
46899: PPUSH
46900: PPUSH
46901: PPUSH
46902: PPUSH
46903: PPUSH
46904: PPUSH
46905: PPUSH
46906: PPUSH
46907: PPUSH
// result := [ ] ;
46908: LD_ADDR_VAR 0 7
46912: PUSH
46913: EMPTY
46914: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
46915: LD_VAR 0 1
46919: PPUSH
46920: CALL_OW 266
46924: PUSH
46925: LD_INT 0
46927: PUSH
46928: LD_INT 1
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: IN
46935: NOT
46936: IFFALSE 46940
// exit ;
46938: GO 48580
// if name then
46940: LD_VAR 0 3
46944: IFFALSE 46960
// SetBName ( base_dep , name ) ;
46946: LD_VAR 0 1
46950: PPUSH
46951: LD_VAR 0 3
46955: PPUSH
46956: CALL_OW 500
// base := GetBase ( base_dep ) ;
46960: LD_ADDR_VAR 0 15
46964: PUSH
46965: LD_VAR 0 1
46969: PPUSH
46970: CALL_OW 274
46974: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
46975: LD_ADDR_VAR 0 16
46979: PUSH
46980: LD_VAR 0 1
46984: PPUSH
46985: CALL_OW 255
46989: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
46990: LD_ADDR_VAR 0 17
46994: PUSH
46995: LD_VAR 0 1
46999: PPUSH
47000: CALL_OW 248
47004: ST_TO_ADDR
// if sources then
47005: LD_VAR 0 5
47009: IFFALSE 47056
// for i = 1 to 3 do
47011: LD_ADDR_VAR 0 8
47015: PUSH
47016: DOUBLE
47017: LD_INT 1
47019: DEC
47020: ST_TO_ADDR
47021: LD_INT 3
47023: PUSH
47024: FOR_TO
47025: IFFALSE 47054
// AddResourceType ( base , i , sources [ i ] ) ;
47027: LD_VAR 0 15
47031: PPUSH
47032: LD_VAR 0 8
47036: PPUSH
47037: LD_VAR 0 5
47041: PUSH
47042: LD_VAR 0 8
47046: ARRAY
47047: PPUSH
47048: CALL_OW 276
47052: GO 47024
47054: POP
47055: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47056: LD_ADDR_VAR 0 18
47060: PUSH
47061: LD_VAR 0 15
47065: PPUSH
47066: LD_VAR 0 2
47070: PPUSH
47071: LD_INT 1
47073: PPUSH
47074: CALL 46315 0 3
47078: ST_TO_ADDR
// InitHc ;
47079: CALL_OW 19
// InitUc ;
47083: CALL_OW 18
// uc_side := side ;
47087: LD_ADDR_OWVAR 20
47091: PUSH
47092: LD_VAR 0 16
47096: ST_TO_ADDR
// uc_nation := nation ;
47097: LD_ADDR_OWVAR 21
47101: PUSH
47102: LD_VAR 0 17
47106: ST_TO_ADDR
// if buildings then
47107: LD_VAR 0 18
47111: IFFALSE 48439
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47113: LD_ADDR_VAR 0 19
47117: PUSH
47118: LD_VAR 0 18
47122: PPUSH
47123: LD_INT 2
47125: PUSH
47126: LD_INT 30
47128: PUSH
47129: LD_INT 29
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 30
47138: PUSH
47139: LD_INT 30
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: LIST
47150: PPUSH
47151: CALL_OW 72
47155: ST_TO_ADDR
// if tmp then
47156: LD_VAR 0 19
47160: IFFALSE 47208
// for i in tmp do
47162: LD_ADDR_VAR 0 8
47166: PUSH
47167: LD_VAR 0 19
47171: PUSH
47172: FOR_IN
47173: IFFALSE 47206
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47175: LD_VAR 0 8
47179: PPUSH
47180: CALL_OW 250
47184: PPUSH
47185: LD_VAR 0 8
47189: PPUSH
47190: CALL_OW 251
47194: PPUSH
47195: LD_VAR 0 16
47199: PPUSH
47200: CALL_OW 441
47204: GO 47172
47206: POP
47207: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47208: LD_VAR 0 18
47212: PPUSH
47213: LD_INT 2
47215: PUSH
47216: LD_INT 30
47218: PUSH
47219: LD_INT 32
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 30
47228: PUSH
47229: LD_INT 33
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: LIST
47240: PPUSH
47241: CALL_OW 72
47245: IFFALSE 47333
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47247: LD_ADDR_VAR 0 8
47251: PUSH
47252: LD_VAR 0 18
47256: PPUSH
47257: LD_INT 2
47259: PUSH
47260: LD_INT 30
47262: PUSH
47263: LD_INT 32
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 30
47272: PUSH
47273: LD_INT 33
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: LIST
47284: PPUSH
47285: CALL_OW 72
47289: PUSH
47290: FOR_IN
47291: IFFALSE 47331
// begin if not GetBWeapon ( i ) then
47293: LD_VAR 0 8
47297: PPUSH
47298: CALL_OW 269
47302: NOT
47303: IFFALSE 47329
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47305: LD_VAR 0 8
47309: PPUSH
47310: LD_VAR 0 8
47314: PPUSH
47315: LD_VAR 0 2
47319: PPUSH
47320: CALL 48585 0 2
47324: PPUSH
47325: CALL_OW 431
// end ;
47329: GO 47290
47331: POP
47332: POP
// end ; for i = 1 to personel do
47333: LD_ADDR_VAR 0 8
47337: PUSH
47338: DOUBLE
47339: LD_INT 1
47341: DEC
47342: ST_TO_ADDR
47343: LD_VAR 0 6
47347: PUSH
47348: FOR_TO
47349: IFFALSE 48419
// begin if i > 4 then
47351: LD_VAR 0 8
47355: PUSH
47356: LD_INT 4
47358: GREATER
47359: IFFALSE 47363
// break ;
47361: GO 48419
// case i of 1 :
47363: LD_VAR 0 8
47367: PUSH
47368: LD_INT 1
47370: DOUBLE
47371: EQUAL
47372: IFTRUE 47376
47374: GO 47456
47376: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
47377: LD_ADDR_VAR 0 12
47381: PUSH
47382: LD_VAR 0 18
47386: PPUSH
47387: LD_INT 22
47389: PUSH
47390: LD_VAR 0 16
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 58
47401: PUSH
47402: EMPTY
47403: LIST
47404: PUSH
47405: LD_INT 2
47407: PUSH
47408: LD_INT 30
47410: PUSH
47411: LD_INT 32
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 30
47420: PUSH
47421: LD_INT 4
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 30
47430: PUSH
47431: LD_INT 5
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: LIST
47448: PPUSH
47449: CALL_OW 72
47453: ST_TO_ADDR
47454: GO 47678
47456: LD_INT 2
47458: DOUBLE
47459: EQUAL
47460: IFTRUE 47464
47462: GO 47526
47464: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
47465: LD_ADDR_VAR 0 12
47469: PUSH
47470: LD_VAR 0 18
47474: PPUSH
47475: LD_INT 22
47477: PUSH
47478: LD_VAR 0 16
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 2
47489: PUSH
47490: LD_INT 30
47492: PUSH
47493: LD_INT 0
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 30
47502: PUSH
47503: LD_INT 1
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: LIST
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PPUSH
47519: CALL_OW 72
47523: ST_TO_ADDR
47524: GO 47678
47526: LD_INT 3
47528: DOUBLE
47529: EQUAL
47530: IFTRUE 47534
47532: GO 47596
47534: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47535: LD_ADDR_VAR 0 12
47539: PUSH
47540: LD_VAR 0 18
47544: PPUSH
47545: LD_INT 22
47547: PUSH
47548: LD_VAR 0 16
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 2
47559: PUSH
47560: LD_INT 30
47562: PUSH
47563: LD_INT 2
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 30
47572: PUSH
47573: LD_INT 3
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: LIST
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PPUSH
47589: CALL_OW 72
47593: ST_TO_ADDR
47594: GO 47678
47596: LD_INT 4
47598: DOUBLE
47599: EQUAL
47600: IFTRUE 47604
47602: GO 47677
47604: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
47605: LD_ADDR_VAR 0 12
47609: PUSH
47610: LD_VAR 0 18
47614: PPUSH
47615: LD_INT 22
47617: PUSH
47618: LD_VAR 0 16
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 2
47629: PUSH
47630: LD_INT 30
47632: PUSH
47633: LD_INT 6
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 30
47642: PUSH
47643: LD_INT 7
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 30
47652: PUSH
47653: LD_INT 8
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: LIST
47664: LIST
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PPUSH
47670: CALL_OW 72
47674: ST_TO_ADDR
47675: GO 47678
47677: POP
// if i = 1 then
47678: LD_VAR 0 8
47682: PUSH
47683: LD_INT 1
47685: EQUAL
47686: IFFALSE 47797
// begin tmp := [ ] ;
47688: LD_ADDR_VAR 0 19
47692: PUSH
47693: EMPTY
47694: ST_TO_ADDR
// for j in f do
47695: LD_ADDR_VAR 0 9
47699: PUSH
47700: LD_VAR 0 12
47704: PUSH
47705: FOR_IN
47706: IFFALSE 47779
// if GetBType ( j ) = b_bunker then
47708: LD_VAR 0 9
47712: PPUSH
47713: CALL_OW 266
47717: PUSH
47718: LD_INT 32
47720: EQUAL
47721: IFFALSE 47748
// tmp := Insert ( tmp , 1 , j ) else
47723: LD_ADDR_VAR 0 19
47727: PUSH
47728: LD_VAR 0 19
47732: PPUSH
47733: LD_INT 1
47735: PPUSH
47736: LD_VAR 0 9
47740: PPUSH
47741: CALL_OW 2
47745: ST_TO_ADDR
47746: GO 47777
// tmp := Insert ( tmp , tmp + 1 , j ) ;
47748: LD_ADDR_VAR 0 19
47752: PUSH
47753: LD_VAR 0 19
47757: PPUSH
47758: LD_VAR 0 19
47762: PUSH
47763: LD_INT 1
47765: PLUS
47766: PPUSH
47767: LD_VAR 0 9
47771: PPUSH
47772: CALL_OW 2
47776: ST_TO_ADDR
47777: GO 47705
47779: POP
47780: POP
// if tmp then
47781: LD_VAR 0 19
47785: IFFALSE 47797
// f := tmp ;
47787: LD_ADDR_VAR 0 12
47791: PUSH
47792: LD_VAR 0 19
47796: ST_TO_ADDR
// end ; x := personel [ i ] ;
47797: LD_ADDR_VAR 0 13
47801: PUSH
47802: LD_VAR 0 6
47806: PUSH
47807: LD_VAR 0 8
47811: ARRAY
47812: ST_TO_ADDR
// if x = - 1 then
47813: LD_VAR 0 13
47817: PUSH
47818: LD_INT 1
47820: NEG
47821: EQUAL
47822: IFFALSE 48033
// begin for j in f do
47824: LD_ADDR_VAR 0 9
47828: PUSH
47829: LD_VAR 0 12
47833: PUSH
47834: FOR_IN
47835: IFFALSE 48029
// repeat InitHc ;
47837: CALL_OW 19
// if GetBType ( j ) = b_barracks then
47841: LD_VAR 0 9
47845: PPUSH
47846: CALL_OW 266
47850: PUSH
47851: LD_INT 5
47853: EQUAL
47854: IFFALSE 47924
// begin if UnitsInside ( j ) < 3 then
47856: LD_VAR 0 9
47860: PPUSH
47861: CALL_OW 313
47865: PUSH
47866: LD_INT 3
47868: LESS
47869: IFFALSE 47905
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47871: LD_INT 0
47873: PPUSH
47874: LD_INT 5
47876: PUSH
47877: LD_INT 8
47879: PUSH
47880: LD_INT 9
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: LIST
47887: PUSH
47888: LD_VAR 0 17
47892: ARRAY
47893: PPUSH
47894: LD_VAR 0 4
47898: PPUSH
47899: CALL_OW 380
47903: GO 47922
// PrepareHuman ( false , i , skill ) ;
47905: LD_INT 0
47907: PPUSH
47908: LD_VAR 0 8
47912: PPUSH
47913: LD_VAR 0 4
47917: PPUSH
47918: CALL_OW 380
// end else
47922: GO 47941
// PrepareHuman ( false , i , skill ) ;
47924: LD_INT 0
47926: PPUSH
47927: LD_VAR 0 8
47931: PPUSH
47932: LD_VAR 0 4
47936: PPUSH
47937: CALL_OW 380
// un := CreateHuman ;
47941: LD_ADDR_VAR 0 14
47945: PUSH
47946: CALL_OW 44
47950: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47951: LD_ADDR_VAR 0 7
47955: PUSH
47956: LD_VAR 0 7
47960: PPUSH
47961: LD_INT 1
47963: PPUSH
47964: LD_VAR 0 14
47968: PPUSH
47969: CALL_OW 2
47973: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
47974: LD_VAR 0 14
47978: PPUSH
47979: LD_VAR 0 9
47983: PPUSH
47984: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
47988: LD_VAR 0 9
47992: PPUSH
47993: CALL_OW 313
47997: PUSH
47998: LD_INT 6
48000: EQUAL
48001: IFTRUE 48025
48003: PUSH
48004: LD_VAR 0 9
48008: PPUSH
48009: CALL_OW 266
48013: PUSH
48014: LD_INT 32
48016: PUSH
48017: LD_INT 31
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: IN
48024: OR
48025: IFFALSE 47837
48027: GO 47834
48029: POP
48030: POP
// end else
48031: GO 48417
// for j = 1 to x do
48033: LD_ADDR_VAR 0 9
48037: PUSH
48038: DOUBLE
48039: LD_INT 1
48041: DEC
48042: ST_TO_ADDR
48043: LD_VAR 0 13
48047: PUSH
48048: FOR_TO
48049: IFFALSE 48415
// begin InitHc ;
48051: CALL_OW 19
// if not f then
48055: LD_VAR 0 12
48059: NOT
48060: IFFALSE 48149
// begin PrepareHuman ( false , i , skill ) ;
48062: LD_INT 0
48064: PPUSH
48065: LD_VAR 0 8
48069: PPUSH
48070: LD_VAR 0 4
48074: PPUSH
48075: CALL_OW 380
// un := CreateHuman ;
48079: LD_ADDR_VAR 0 14
48083: PUSH
48084: CALL_OW 44
48088: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48089: LD_ADDR_VAR 0 7
48093: PUSH
48094: LD_VAR 0 7
48098: PPUSH
48099: LD_INT 1
48101: PPUSH
48102: LD_VAR 0 14
48106: PPUSH
48107: CALL_OW 2
48111: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48112: LD_VAR 0 14
48116: PPUSH
48117: LD_VAR 0 1
48121: PPUSH
48122: CALL_OW 250
48126: PPUSH
48127: LD_VAR 0 1
48131: PPUSH
48132: CALL_OW 251
48136: PPUSH
48137: LD_INT 10
48139: PPUSH
48140: LD_INT 0
48142: PPUSH
48143: CALL_OW 50
// continue ;
48147: GO 48048
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48149: LD_VAR 0 12
48153: PUSH
48154: LD_INT 1
48156: ARRAY
48157: PPUSH
48158: CALL_OW 313
48162: IFFALSE 48190
48164: PUSH
48165: LD_VAR 0 12
48169: PUSH
48170: LD_INT 1
48172: ARRAY
48173: PPUSH
48174: CALL_OW 266
48178: PUSH
48179: LD_INT 32
48181: PUSH
48182: LD_INT 31
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: IN
48189: AND
48190: IFTRUE 48211
48192: PUSH
48193: LD_VAR 0 12
48197: PUSH
48198: LD_INT 1
48200: ARRAY
48201: PPUSH
48202: CALL_OW 313
48206: PUSH
48207: LD_INT 6
48209: EQUAL
48210: OR
48211: IFFALSE 48231
// f := Delete ( f , 1 ) ;
48213: LD_ADDR_VAR 0 12
48217: PUSH
48218: LD_VAR 0 12
48222: PPUSH
48223: LD_INT 1
48225: PPUSH
48226: CALL_OW 3
48230: ST_TO_ADDR
// if not f then
48231: LD_VAR 0 12
48235: NOT
48236: IFFALSE 48254
// begin x := x + 2 ;
48238: LD_ADDR_VAR 0 13
48242: PUSH
48243: LD_VAR 0 13
48247: PUSH
48248: LD_INT 2
48250: PLUS
48251: ST_TO_ADDR
// continue ;
48252: GO 48048
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48254: LD_VAR 0 12
48258: PUSH
48259: LD_INT 1
48261: ARRAY
48262: PPUSH
48263: CALL_OW 266
48267: PUSH
48268: LD_INT 5
48270: EQUAL
48271: IFFALSE 48345
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48273: LD_VAR 0 12
48277: PUSH
48278: LD_INT 1
48280: ARRAY
48281: PPUSH
48282: CALL_OW 313
48286: PUSH
48287: LD_INT 3
48289: LESS
48290: IFFALSE 48326
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48292: LD_INT 0
48294: PPUSH
48295: LD_INT 5
48297: PUSH
48298: LD_INT 8
48300: PUSH
48301: LD_INT 9
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: LIST
48308: PUSH
48309: LD_VAR 0 17
48313: ARRAY
48314: PPUSH
48315: LD_VAR 0 4
48319: PPUSH
48320: CALL_OW 380
48324: GO 48343
// PrepareHuman ( false , i , skill ) ;
48326: LD_INT 0
48328: PPUSH
48329: LD_VAR 0 8
48333: PPUSH
48334: LD_VAR 0 4
48338: PPUSH
48339: CALL_OW 380
// end else
48343: GO 48362
// PrepareHuman ( false , i , skill ) ;
48345: LD_INT 0
48347: PPUSH
48348: LD_VAR 0 8
48352: PPUSH
48353: LD_VAR 0 4
48357: PPUSH
48358: CALL_OW 380
// un := CreateHuman ;
48362: LD_ADDR_VAR 0 14
48366: PUSH
48367: CALL_OW 44
48371: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48372: LD_ADDR_VAR 0 7
48376: PUSH
48377: LD_VAR 0 7
48381: PPUSH
48382: LD_INT 1
48384: PPUSH
48385: LD_VAR 0 14
48389: PPUSH
48390: CALL_OW 2
48394: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48395: LD_VAR 0 14
48399: PPUSH
48400: LD_VAR 0 12
48404: PUSH
48405: LD_INT 1
48407: ARRAY
48408: PPUSH
48409: CALL_OW 52
// end ;
48413: GO 48048
48415: POP
48416: POP
// end ;
48417: GO 47348
48419: POP
48420: POP
// result := result ^ buildings ;
48421: LD_ADDR_VAR 0 7
48425: PUSH
48426: LD_VAR 0 7
48430: PUSH
48431: LD_VAR 0 18
48435: ADD
48436: ST_TO_ADDR
// end else
48437: GO 48580
// begin for i = 1 to personel do
48439: LD_ADDR_VAR 0 8
48443: PUSH
48444: DOUBLE
48445: LD_INT 1
48447: DEC
48448: ST_TO_ADDR
48449: LD_VAR 0 6
48453: PUSH
48454: FOR_TO
48455: IFFALSE 48578
// begin if i > 4 then
48457: LD_VAR 0 8
48461: PUSH
48462: LD_INT 4
48464: GREATER
48465: IFFALSE 48469
// break ;
48467: GO 48578
// x := personel [ i ] ;
48469: LD_ADDR_VAR 0 13
48473: PUSH
48474: LD_VAR 0 6
48478: PUSH
48479: LD_VAR 0 8
48483: ARRAY
48484: ST_TO_ADDR
// if x = - 1 then
48485: LD_VAR 0 13
48489: PUSH
48490: LD_INT 1
48492: NEG
48493: EQUAL
48494: IFFALSE 48498
// continue ;
48496: GO 48454
// PrepareHuman ( false , i , skill ) ;
48498: LD_INT 0
48500: PPUSH
48501: LD_VAR 0 8
48505: PPUSH
48506: LD_VAR 0 4
48510: PPUSH
48511: CALL_OW 380
// un := CreateHuman ;
48515: LD_ADDR_VAR 0 14
48519: PUSH
48520: CALL_OW 44
48524: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48525: LD_VAR 0 14
48529: PPUSH
48530: LD_VAR 0 1
48534: PPUSH
48535: CALL_OW 250
48539: PPUSH
48540: LD_VAR 0 1
48544: PPUSH
48545: CALL_OW 251
48549: PPUSH
48550: LD_INT 10
48552: PPUSH
48553: LD_INT 0
48555: PPUSH
48556: CALL_OW 50
// result := result ^ un ;
48560: LD_ADDR_VAR 0 7
48564: PUSH
48565: LD_VAR 0 7
48569: PUSH
48570: LD_VAR 0 14
48574: ADD
48575: ST_TO_ADDR
// end ;
48576: GO 48454
48578: POP
48579: POP
// end ; end ;
48580: LD_VAR 0 7
48584: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
48585: LD_INT 0
48587: PPUSH
48588: PPUSH
48589: PPUSH
48590: PPUSH
48591: PPUSH
48592: PPUSH
48593: PPUSH
48594: PPUSH
48595: PPUSH
48596: PPUSH
48597: PPUSH
48598: PPUSH
48599: PPUSH
48600: PPUSH
48601: PPUSH
48602: PPUSH
// result := false ;
48603: LD_ADDR_VAR 0 3
48607: PUSH
48608: LD_INT 0
48610: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
48611: LD_VAR 0 1
48615: NOT
48616: IFTRUE 48641
48618: PUSH
48619: LD_VAR 0 1
48623: PPUSH
48624: CALL_OW 266
48628: PUSH
48629: LD_INT 32
48631: PUSH
48632: LD_INT 33
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: IN
48639: NOT
48640: OR
48641: IFFALSE 48645
// exit ;
48643: GO 49780
// nat := GetNation ( tower ) ;
48645: LD_ADDR_VAR 0 12
48649: PUSH
48650: LD_VAR 0 1
48654: PPUSH
48655: CALL_OW 248
48659: ST_TO_ADDR
// side := GetSide ( tower ) ;
48660: LD_ADDR_VAR 0 16
48664: PUSH
48665: LD_VAR 0 1
48669: PPUSH
48670: CALL_OW 255
48674: ST_TO_ADDR
// x := GetX ( tower ) ;
48675: LD_ADDR_VAR 0 10
48679: PUSH
48680: LD_VAR 0 1
48684: PPUSH
48685: CALL_OW 250
48689: ST_TO_ADDR
// y := GetY ( tower ) ;
48690: LD_ADDR_VAR 0 11
48694: PUSH
48695: LD_VAR 0 1
48699: PPUSH
48700: CALL_OW 251
48704: ST_TO_ADDR
// if not x or not y then
48705: LD_VAR 0 10
48709: NOT
48710: IFTRUE 48719
48712: PUSH
48713: LD_VAR 0 11
48717: NOT
48718: OR
48719: IFFALSE 48723
// exit ;
48721: GO 49780
// weapon := 0 ;
48723: LD_ADDR_VAR 0 18
48727: PUSH
48728: LD_INT 0
48730: ST_TO_ADDR
// fac_list := [ ] ;
48731: LD_ADDR_VAR 0 17
48735: PUSH
48736: EMPTY
48737: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
48738: LD_ADDR_VAR 0 6
48742: PUSH
48743: LD_VAR 0 1
48747: PPUSH
48748: CALL_OW 274
48752: PPUSH
48753: LD_VAR 0 2
48757: PPUSH
48758: LD_INT 0
48760: PPUSH
48761: CALL 46315 0 3
48765: PPUSH
48766: LD_INT 30
48768: PUSH
48769: LD_INT 3
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PPUSH
48776: CALL_OW 72
48780: ST_TO_ADDR
// if not factories then
48781: LD_VAR 0 6
48785: NOT
48786: IFFALSE 48790
// exit ;
48788: GO 49780
// for i in factories do
48790: LD_ADDR_VAR 0 8
48794: PUSH
48795: LD_VAR 0 6
48799: PUSH
48800: FOR_IN
48801: IFFALSE 48826
// fac_list := fac_list union AvailableWeaponList ( i ) ;
48803: LD_ADDR_VAR 0 17
48807: PUSH
48808: LD_VAR 0 17
48812: PUSH
48813: LD_VAR 0 8
48817: PPUSH
48818: CALL_OW 478
48822: UNION
48823: ST_TO_ADDR
48824: GO 48800
48826: POP
48827: POP
// if not fac_list then
48828: LD_VAR 0 17
48832: NOT
48833: IFFALSE 48837
// exit ;
48835: GO 49780
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
48837: LD_ADDR_VAR 0 5
48841: PUSH
48842: LD_INT 4
48844: PUSH
48845: LD_INT 5
48847: PUSH
48848: LD_INT 9
48850: PUSH
48851: LD_INT 10
48853: PUSH
48854: LD_INT 6
48856: PUSH
48857: LD_INT 7
48859: PUSH
48860: LD_INT 11
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 27
48874: PUSH
48875: LD_INT 28
48877: PUSH
48878: LD_INT 26
48880: PUSH
48881: LD_INT 30
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 43
48892: PUSH
48893: LD_INT 44
48895: PUSH
48896: LD_INT 46
48898: PUSH
48899: LD_INT 45
48901: PUSH
48902: LD_INT 47
48904: PUSH
48905: LD_INT 49
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: LIST
48920: PUSH
48921: LD_VAR 0 12
48925: ARRAY
48926: ST_TO_ADDR
// list := list isect fac_list ;
48927: LD_ADDR_VAR 0 5
48931: PUSH
48932: LD_VAR 0 5
48936: PUSH
48937: LD_VAR 0 17
48941: ISECT
48942: ST_TO_ADDR
// if not list then
48943: LD_VAR 0 5
48947: NOT
48948: IFFALSE 48952
// exit ;
48950: GO 49780
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
48952: LD_VAR 0 12
48956: PUSH
48957: LD_INT 3
48959: EQUAL
48960: IFFALSE 48972
48962: PUSH
48963: LD_INT 49
48965: PUSH
48966: LD_VAR 0 5
48970: IN
48971: AND
48972: IFFALSE 48992
48974: PUSH
48975: LD_INT 31
48977: PPUSH
48978: LD_VAR 0 16
48982: PPUSH
48983: CALL_OW 321
48987: PUSH
48988: LD_INT 2
48990: EQUAL
48991: AND
48992: IFFALSE 49052
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
48994: LD_INT 22
48996: PUSH
48997: LD_VAR 0 16
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 35
49008: PUSH
49009: LD_INT 49
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 91
49018: PUSH
49019: LD_VAR 0 1
49023: PUSH
49024: LD_INT 10
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: LIST
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: LIST
49036: PPUSH
49037: CALL_OW 69
49041: NOT
49042: IFFALSE 49052
// weapon := ru_time_lapser ;
49044: LD_ADDR_VAR 0 18
49048: PUSH
49049: LD_INT 49
49051: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49052: LD_VAR 0 12
49056: PUSH
49057: LD_INT 1
49059: PUSH
49060: LD_INT 2
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: IN
49067: IFFALSE 49091
49069: PUSH
49070: LD_INT 11
49072: PUSH
49073: LD_VAR 0 5
49077: IN
49078: IFTRUE 49090
49080: PUSH
49081: LD_INT 30
49083: PUSH
49084: LD_VAR 0 5
49088: IN
49089: OR
49090: AND
49091: IFFALSE 49111
49093: PUSH
49094: LD_INT 6
49096: PPUSH
49097: LD_VAR 0 16
49101: PPUSH
49102: CALL_OW 321
49106: PUSH
49107: LD_INT 2
49109: EQUAL
49110: AND
49111: IFFALSE 49278
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49113: LD_INT 22
49115: PUSH
49116: LD_VAR 0 16
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 2
49127: PUSH
49128: LD_INT 35
49130: PUSH
49131: LD_INT 11
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 35
49140: PUSH
49141: LD_INT 30
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 91
49155: PUSH
49156: LD_VAR 0 1
49160: PUSH
49161: LD_INT 18
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: LIST
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: LIST
49173: PPUSH
49174: CALL_OW 69
49178: NOT
49179: IFFALSE 49255
49181: PUSH
49182: LD_INT 22
49184: PUSH
49185: LD_VAR 0 16
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 2
49196: PUSH
49197: LD_INT 30
49199: PUSH
49200: LD_INT 32
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 30
49209: PUSH
49210: LD_INT 33
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 91
49224: PUSH
49225: LD_VAR 0 1
49229: PUSH
49230: LD_INT 12
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: LIST
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: LIST
49242: PUSH
49243: EMPTY
49244: LIST
49245: PPUSH
49246: CALL_OW 69
49250: PUSH
49251: LD_INT 2
49253: GREATER
49254: AND
49255: IFFALSE 49278
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49257: LD_ADDR_VAR 0 18
49261: PUSH
49262: LD_INT 11
49264: PUSH
49265: LD_INT 30
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_VAR 0 12
49276: ARRAY
49277: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49278: LD_VAR 0 18
49282: NOT
49283: IFFALSE 49303
49285: PUSH
49286: LD_INT 40
49288: PPUSH
49289: LD_VAR 0 16
49293: PPUSH
49294: CALL_OW 321
49298: PUSH
49299: LD_INT 2
49301: EQUAL
49302: AND
49303: IFFALSE 49339
49305: PUSH
49306: LD_INT 7
49308: PUSH
49309: LD_VAR 0 5
49313: IN
49314: IFTRUE 49326
49316: PUSH
49317: LD_INT 28
49319: PUSH
49320: LD_VAR 0 5
49324: IN
49325: OR
49326: IFTRUE 49338
49328: PUSH
49329: LD_INT 45
49331: PUSH
49332: LD_VAR 0 5
49336: IN
49337: OR
49338: AND
49339: IFFALSE 49593
// begin hex := GetHexInfo ( x , y ) ;
49341: LD_ADDR_VAR 0 4
49345: PUSH
49346: LD_VAR 0 10
49350: PPUSH
49351: LD_VAR 0 11
49355: PPUSH
49356: CALL_OW 546
49360: ST_TO_ADDR
// if hex [ 1 ] then
49361: LD_VAR 0 4
49365: PUSH
49366: LD_INT 1
49368: ARRAY
49369: IFFALSE 49373
// exit ;
49371: GO 49780
// height := hex [ 2 ] ;
49373: LD_ADDR_VAR 0 15
49377: PUSH
49378: LD_VAR 0 4
49382: PUSH
49383: LD_INT 2
49385: ARRAY
49386: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
49387: LD_ADDR_VAR 0 14
49391: PUSH
49392: LD_INT 0
49394: PUSH
49395: LD_INT 2
49397: PUSH
49398: LD_INT 3
49400: PUSH
49401: LD_INT 5
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: ST_TO_ADDR
// for i in tmp do
49410: LD_ADDR_VAR 0 8
49414: PUSH
49415: LD_VAR 0 14
49419: PUSH
49420: FOR_IN
49421: IFFALSE 49591
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49423: LD_ADDR_VAR 0 9
49427: PUSH
49428: LD_VAR 0 10
49432: PPUSH
49433: LD_VAR 0 8
49437: PPUSH
49438: LD_INT 5
49440: PPUSH
49441: CALL_OW 272
49445: PUSH
49446: LD_VAR 0 11
49450: PPUSH
49451: LD_VAR 0 8
49455: PPUSH
49456: LD_INT 5
49458: PPUSH
49459: CALL_OW 273
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49468: LD_VAR 0 9
49472: PUSH
49473: LD_INT 1
49475: ARRAY
49476: PPUSH
49477: LD_VAR 0 9
49481: PUSH
49482: LD_INT 2
49484: ARRAY
49485: PPUSH
49486: CALL_OW 488
49490: IFFALSE 49589
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
49492: LD_ADDR_VAR 0 4
49496: PUSH
49497: LD_VAR 0 9
49501: PUSH
49502: LD_INT 1
49504: ARRAY
49505: PPUSH
49506: LD_VAR 0 9
49510: PUSH
49511: LD_INT 2
49513: ARRAY
49514: PPUSH
49515: CALL_OW 546
49519: ST_TO_ADDR
// if hex [ 1 ] then
49520: LD_VAR 0 4
49524: PUSH
49525: LD_INT 1
49527: ARRAY
49528: IFFALSE 49532
// continue ;
49530: GO 49420
// h := hex [ 2 ] ;
49532: LD_ADDR_VAR 0 13
49536: PUSH
49537: LD_VAR 0 4
49541: PUSH
49542: LD_INT 2
49544: ARRAY
49545: ST_TO_ADDR
// if h + 7 < height then
49546: LD_VAR 0 13
49550: PUSH
49551: LD_INT 7
49553: PLUS
49554: PUSH
49555: LD_VAR 0 15
49559: LESS
49560: IFFALSE 49589
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49562: LD_ADDR_VAR 0 18
49566: PUSH
49567: LD_INT 7
49569: PUSH
49570: LD_INT 28
49572: PUSH
49573: LD_INT 45
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: LIST
49580: PUSH
49581: LD_VAR 0 12
49585: ARRAY
49586: ST_TO_ADDR
// break ;
49587: GO 49591
// end ; end ; end ;
49589: GO 49420
49591: POP
49592: POP
// end ; if not weapon then
49593: LD_VAR 0 18
49597: NOT
49598: IFFALSE 49658
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
49600: LD_ADDR_VAR 0 5
49604: PUSH
49605: LD_VAR 0 5
49609: PUSH
49610: LD_INT 11
49612: PUSH
49613: LD_INT 30
49615: PUSH
49616: LD_INT 49
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: LIST
49623: DIFF
49624: ST_TO_ADDR
// if not list then
49625: LD_VAR 0 5
49629: NOT
49630: IFFALSE 49634
// exit ;
49632: GO 49780
// weapon := list [ rand ( 1 , list ) ] ;
49634: LD_ADDR_VAR 0 18
49638: PUSH
49639: LD_VAR 0 5
49643: PUSH
49644: LD_INT 1
49646: PPUSH
49647: LD_VAR 0 5
49651: PPUSH
49652: CALL_OW 12
49656: ARRAY
49657: ST_TO_ADDR
// end ; if weapon then
49658: LD_VAR 0 18
49662: IFFALSE 49780
// begin tmp := CostOfWeapon ( weapon ) ;
49664: LD_ADDR_VAR 0 14
49668: PUSH
49669: LD_VAR 0 18
49673: PPUSH
49674: CALL_OW 451
49678: ST_TO_ADDR
// j := GetBase ( tower ) ;
49679: LD_ADDR_VAR 0 9
49683: PUSH
49684: LD_VAR 0 1
49688: PPUSH
49689: CALL_OW 274
49693: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
49694: LD_VAR 0 9
49698: PPUSH
49699: LD_INT 1
49701: PPUSH
49702: CALL_OW 275
49706: PUSH
49707: LD_VAR 0 14
49711: PUSH
49712: LD_INT 1
49714: ARRAY
49715: GREATEREQUAL
49716: IFFALSE 49742
49718: PUSH
49719: LD_VAR 0 9
49723: PPUSH
49724: LD_INT 2
49726: PPUSH
49727: CALL_OW 275
49731: PUSH
49732: LD_VAR 0 14
49736: PUSH
49737: LD_INT 2
49739: ARRAY
49740: GREATEREQUAL
49741: AND
49742: IFFALSE 49768
49744: PUSH
49745: LD_VAR 0 9
49749: PPUSH
49750: LD_INT 3
49752: PPUSH
49753: CALL_OW 275
49757: PUSH
49758: LD_VAR 0 14
49762: PUSH
49763: LD_INT 3
49765: ARRAY
49766: GREATEREQUAL
49767: AND
49768: IFFALSE 49780
// result := weapon ;
49770: LD_ADDR_VAR 0 3
49774: PUSH
49775: LD_VAR 0 18
49779: ST_TO_ADDR
// end ; end ;
49780: LD_VAR 0 3
49784: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
49785: LD_INT 0
49787: PPUSH
49788: PPUSH
// result := true ;
49789: LD_ADDR_VAR 0 3
49793: PUSH
49794: LD_INT 1
49796: ST_TO_ADDR
// if array1 = array2 then
49797: LD_VAR 0 1
49801: PUSH
49802: LD_VAR 0 2
49806: EQUAL
49807: IFFALSE 49867
// begin for i = 1 to array1 do
49809: LD_ADDR_VAR 0 4
49813: PUSH
49814: DOUBLE
49815: LD_INT 1
49817: DEC
49818: ST_TO_ADDR
49819: LD_VAR 0 1
49823: PUSH
49824: FOR_TO
49825: IFFALSE 49863
// if array1 [ i ] <> array2 [ i ] then
49827: LD_VAR 0 1
49831: PUSH
49832: LD_VAR 0 4
49836: ARRAY
49837: PUSH
49838: LD_VAR 0 2
49842: PUSH
49843: LD_VAR 0 4
49847: ARRAY
49848: NONEQUAL
49849: IFFALSE 49861
// begin result := false ;
49851: LD_ADDR_VAR 0 3
49855: PUSH
49856: LD_INT 0
49858: ST_TO_ADDR
// break ;
49859: GO 49863
// end ;
49861: GO 49824
49863: POP
49864: POP
// end else
49865: GO 49875
// result := false ;
49867: LD_ADDR_VAR 0 3
49871: PUSH
49872: LD_INT 0
49874: ST_TO_ADDR
// end ;
49875: LD_VAR 0 3
49879: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
49880: LD_INT 0
49882: PPUSH
49883: PPUSH
// if not array1 or not array2 then
49884: LD_VAR 0 1
49888: NOT
49889: IFTRUE 49898
49891: PUSH
49892: LD_VAR 0 2
49896: NOT
49897: OR
49898: IFFALSE 49902
// exit ;
49900: GO 49966
// result := true ;
49902: LD_ADDR_VAR 0 3
49906: PUSH
49907: LD_INT 1
49909: ST_TO_ADDR
// for i = 1 to array1 do
49910: LD_ADDR_VAR 0 4
49914: PUSH
49915: DOUBLE
49916: LD_INT 1
49918: DEC
49919: ST_TO_ADDR
49920: LD_VAR 0 1
49924: PUSH
49925: FOR_TO
49926: IFFALSE 49964
// if array1 [ i ] <> array2 [ i ] then
49928: LD_VAR 0 1
49932: PUSH
49933: LD_VAR 0 4
49937: ARRAY
49938: PUSH
49939: LD_VAR 0 2
49943: PUSH
49944: LD_VAR 0 4
49948: ARRAY
49949: NONEQUAL
49950: IFFALSE 49962
// begin result := false ;
49952: LD_ADDR_VAR 0 3
49956: PUSH
49957: LD_INT 0
49959: ST_TO_ADDR
// break ;
49960: GO 49964
// end ;
49962: GO 49925
49964: POP
49965: POP
// end ;
49966: LD_VAR 0 3
49970: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
49971: LD_INT 0
49973: PPUSH
49974: PPUSH
49975: PPUSH
// pom := GetBase ( fac ) ;
49976: LD_ADDR_VAR 0 5
49980: PUSH
49981: LD_VAR 0 1
49985: PPUSH
49986: CALL_OW 274
49990: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
49991: LD_ADDR_VAR 0 4
49995: PUSH
49996: LD_VAR 0 2
50000: PUSH
50001: LD_INT 1
50003: ARRAY
50004: PPUSH
50005: LD_VAR 0 2
50009: PUSH
50010: LD_INT 2
50012: ARRAY
50013: PPUSH
50014: LD_VAR 0 2
50018: PUSH
50019: LD_INT 3
50021: ARRAY
50022: PPUSH
50023: LD_VAR 0 2
50027: PUSH
50028: LD_INT 4
50030: ARRAY
50031: PPUSH
50032: CALL_OW 449
50036: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50037: LD_ADDR_VAR 0 3
50041: PUSH
50042: LD_VAR 0 5
50046: PPUSH
50047: LD_INT 1
50049: PPUSH
50050: CALL_OW 275
50054: PUSH
50055: LD_VAR 0 4
50059: PUSH
50060: LD_INT 1
50062: ARRAY
50063: GREATEREQUAL
50064: IFFALSE 50090
50066: PUSH
50067: LD_VAR 0 5
50071: PPUSH
50072: LD_INT 2
50074: PPUSH
50075: CALL_OW 275
50079: PUSH
50080: LD_VAR 0 4
50084: PUSH
50085: LD_INT 2
50087: ARRAY
50088: GREATEREQUAL
50089: AND
50090: IFFALSE 50116
50092: PUSH
50093: LD_VAR 0 5
50097: PPUSH
50098: LD_INT 3
50100: PPUSH
50101: CALL_OW 275
50105: PUSH
50106: LD_VAR 0 4
50110: PUSH
50111: LD_INT 3
50113: ARRAY
50114: GREATEREQUAL
50115: AND
50116: ST_TO_ADDR
// end ;
50117: LD_VAR 0 3
50121: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50122: LD_INT 0
50124: PPUSH
50125: PPUSH
50126: PPUSH
50127: PPUSH
// pom := GetBase ( building ) ;
50128: LD_ADDR_VAR 0 3
50132: PUSH
50133: LD_VAR 0 1
50137: PPUSH
50138: CALL_OW 274
50142: ST_TO_ADDR
// if not pom then
50143: LD_VAR 0 3
50147: NOT
50148: IFFALSE 50152
// exit ;
50150: GO 50326
// btype := GetBType ( building ) ;
50152: LD_ADDR_VAR 0 5
50156: PUSH
50157: LD_VAR 0 1
50161: PPUSH
50162: CALL_OW 266
50166: ST_TO_ADDR
// if btype = b_armoury then
50167: LD_VAR 0 5
50171: PUSH
50172: LD_INT 4
50174: EQUAL
50175: IFFALSE 50185
// btype := b_barracks ;
50177: LD_ADDR_VAR 0 5
50181: PUSH
50182: LD_INT 5
50184: ST_TO_ADDR
// if btype = b_depot then
50185: LD_VAR 0 5
50189: PUSH
50190: LD_INT 0
50192: EQUAL
50193: IFFALSE 50203
// btype := b_warehouse ;
50195: LD_ADDR_VAR 0 5
50199: PUSH
50200: LD_INT 1
50202: ST_TO_ADDR
// if btype = b_workshop then
50203: LD_VAR 0 5
50207: PUSH
50208: LD_INT 2
50210: EQUAL
50211: IFFALSE 50221
// btype := b_factory ;
50213: LD_ADDR_VAR 0 5
50217: PUSH
50218: LD_INT 3
50220: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50221: LD_ADDR_VAR 0 4
50225: PUSH
50226: LD_VAR 0 5
50230: PPUSH
50231: LD_VAR 0 1
50235: PPUSH
50236: CALL_OW 248
50240: PPUSH
50241: CALL_OW 450
50245: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50246: LD_ADDR_VAR 0 2
50250: PUSH
50251: LD_VAR 0 3
50255: PPUSH
50256: LD_INT 1
50258: PPUSH
50259: CALL_OW 275
50263: PUSH
50264: LD_VAR 0 4
50268: PUSH
50269: LD_INT 1
50271: ARRAY
50272: GREATEREQUAL
50273: IFFALSE 50299
50275: PUSH
50276: LD_VAR 0 3
50280: PPUSH
50281: LD_INT 2
50283: PPUSH
50284: CALL_OW 275
50288: PUSH
50289: LD_VAR 0 4
50293: PUSH
50294: LD_INT 2
50296: ARRAY
50297: GREATEREQUAL
50298: AND
50299: IFFALSE 50325
50301: PUSH
50302: LD_VAR 0 3
50306: PPUSH
50307: LD_INT 3
50309: PPUSH
50310: CALL_OW 275
50314: PUSH
50315: LD_VAR 0 4
50319: PUSH
50320: LD_INT 3
50322: ARRAY
50323: GREATEREQUAL
50324: AND
50325: ST_TO_ADDR
// end ;
50326: LD_VAR 0 2
50330: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50331: LD_INT 0
50333: PPUSH
50334: PPUSH
50335: PPUSH
// pom := GetBase ( building ) ;
50336: LD_ADDR_VAR 0 4
50340: PUSH
50341: LD_VAR 0 1
50345: PPUSH
50346: CALL_OW 274
50350: ST_TO_ADDR
// if not pom then
50351: LD_VAR 0 4
50355: NOT
50356: IFFALSE 50360
// exit ;
50358: GO 50465
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50360: LD_ADDR_VAR 0 5
50364: PUSH
50365: LD_VAR 0 2
50369: PPUSH
50370: LD_VAR 0 1
50374: PPUSH
50375: CALL_OW 248
50379: PPUSH
50380: CALL_OW 450
50384: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50385: LD_ADDR_VAR 0 3
50389: PUSH
50390: LD_VAR 0 4
50394: PPUSH
50395: LD_INT 1
50397: PPUSH
50398: CALL_OW 275
50402: PUSH
50403: LD_VAR 0 5
50407: PUSH
50408: LD_INT 1
50410: ARRAY
50411: GREATEREQUAL
50412: IFFALSE 50438
50414: PUSH
50415: LD_VAR 0 4
50419: PPUSH
50420: LD_INT 2
50422: PPUSH
50423: CALL_OW 275
50427: PUSH
50428: LD_VAR 0 5
50432: PUSH
50433: LD_INT 2
50435: ARRAY
50436: GREATEREQUAL
50437: AND
50438: IFFALSE 50464
50440: PUSH
50441: LD_VAR 0 4
50445: PPUSH
50446: LD_INT 3
50448: PPUSH
50449: CALL_OW 275
50453: PUSH
50454: LD_VAR 0 5
50458: PUSH
50459: LD_INT 3
50461: ARRAY
50462: GREATEREQUAL
50463: AND
50464: ST_TO_ADDR
// end ;
50465: LD_VAR 0 3
50469: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
50470: LD_INT 0
50472: PPUSH
50473: PPUSH
50474: PPUSH
50475: PPUSH
50476: PPUSH
50477: PPUSH
50478: PPUSH
50479: PPUSH
50480: PPUSH
50481: PPUSH
50482: PPUSH
// result := false ;
50483: LD_ADDR_VAR 0 8
50487: PUSH
50488: LD_INT 0
50490: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
50491: LD_VAR 0 5
50495: NOT
50496: IFTRUE 50505
50498: PUSH
50499: LD_VAR 0 1
50503: NOT
50504: OR
50505: IFTRUE 50514
50507: PUSH
50508: LD_VAR 0 2
50512: NOT
50513: OR
50514: IFTRUE 50523
50516: PUSH
50517: LD_VAR 0 3
50521: NOT
50522: OR
50523: IFFALSE 50527
// exit ;
50525: GO 51353
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
50527: LD_ADDR_VAR 0 14
50531: PUSH
50532: LD_VAR 0 1
50536: PPUSH
50537: LD_VAR 0 2
50541: PPUSH
50542: LD_VAR 0 3
50546: PPUSH
50547: LD_VAR 0 4
50551: PPUSH
50552: LD_VAR 0 5
50556: PUSH
50557: LD_INT 1
50559: ARRAY
50560: PPUSH
50561: CALL_OW 248
50565: PPUSH
50566: LD_INT 0
50568: PPUSH
50569: CALL 52634 0 6
50573: ST_TO_ADDR
// if not hexes then
50574: LD_VAR 0 14
50578: NOT
50579: IFFALSE 50583
// exit ;
50581: GO 51353
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50583: LD_ADDR_VAR 0 17
50587: PUSH
50588: LD_VAR 0 5
50592: PPUSH
50593: LD_INT 22
50595: PUSH
50596: LD_VAR 0 13
50600: PPUSH
50601: CALL_OW 255
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 2
50612: PUSH
50613: LD_INT 30
50615: PUSH
50616: LD_INT 0
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 30
50625: PUSH
50626: LD_INT 1
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: LIST
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PPUSH
50642: CALL_OW 72
50646: ST_TO_ADDR
// for i = 1 to hexes do
50647: LD_ADDR_VAR 0 9
50651: PUSH
50652: DOUBLE
50653: LD_INT 1
50655: DEC
50656: ST_TO_ADDR
50657: LD_VAR 0 14
50661: PUSH
50662: FOR_TO
50663: IFFALSE 51351
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50665: LD_ADDR_VAR 0 13
50669: PUSH
50670: LD_VAR 0 14
50674: PUSH
50675: LD_VAR 0 9
50679: ARRAY
50680: PUSH
50681: LD_INT 1
50683: ARRAY
50684: PPUSH
50685: LD_VAR 0 14
50689: PUSH
50690: LD_VAR 0 9
50694: ARRAY
50695: PUSH
50696: LD_INT 2
50698: ARRAY
50699: PPUSH
50700: CALL_OW 428
50704: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
50705: LD_VAR 0 14
50709: PUSH
50710: LD_VAR 0 9
50714: ARRAY
50715: PUSH
50716: LD_INT 1
50718: ARRAY
50719: PPUSH
50720: LD_VAR 0 14
50724: PUSH
50725: LD_VAR 0 9
50729: ARRAY
50730: PUSH
50731: LD_INT 2
50733: ARRAY
50734: PPUSH
50735: CALL_OW 351
50739: IFTRUE 50778
50741: PUSH
50742: LD_VAR 0 14
50746: PUSH
50747: LD_VAR 0 9
50751: ARRAY
50752: PUSH
50753: LD_INT 1
50755: ARRAY
50756: PPUSH
50757: LD_VAR 0 14
50761: PUSH
50762: LD_VAR 0 9
50766: ARRAY
50767: PUSH
50768: LD_INT 2
50770: ARRAY
50771: PPUSH
50772: CALL_OW 488
50776: NOT
50777: OR
50778: IFTRUE 50795
50780: PUSH
50781: LD_VAR 0 13
50785: PPUSH
50786: CALL_OW 247
50790: PUSH
50791: LD_INT 3
50793: EQUAL
50794: OR
50795: IFFALSE 50801
// exit ;
50797: POP
50798: POP
50799: GO 51353
// if not tmp then
50801: LD_VAR 0 13
50805: NOT
50806: IFFALSE 50810
// continue ;
50808: GO 50662
// result := true ;
50810: LD_ADDR_VAR 0 8
50814: PUSH
50815: LD_INT 1
50817: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
50818: LD_VAR 0 6
50822: IFFALSE 50839
50824: PUSH
50825: LD_VAR 0 13
50829: PPUSH
50830: CALL_OW 247
50834: PUSH
50835: LD_INT 2
50837: EQUAL
50838: AND
50839: IFFALSE 50856
50841: PUSH
50842: LD_VAR 0 13
50846: PPUSH
50847: CALL_OW 263
50851: PUSH
50852: LD_INT 1
50854: EQUAL
50855: AND
50856: IFFALSE 51020
// begin if IsDrivenBy ( tmp ) then
50858: LD_VAR 0 13
50862: PPUSH
50863: CALL_OW 311
50867: IFFALSE 50871
// continue ;
50869: GO 50662
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
50871: LD_VAR 0 6
50875: PPUSH
50876: LD_INT 3
50878: PUSH
50879: LD_INT 60
50881: PUSH
50882: EMPTY
50883: LIST
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 3
50891: PUSH
50892: LD_INT 55
50894: PUSH
50895: EMPTY
50896: LIST
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PPUSH
50906: CALL_OW 72
50910: IFFALSE 51018
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
50912: LD_ADDR_VAR 0 18
50916: PUSH
50917: LD_VAR 0 6
50921: PPUSH
50922: LD_INT 3
50924: PUSH
50925: LD_INT 60
50927: PUSH
50928: EMPTY
50929: LIST
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 3
50937: PUSH
50938: LD_INT 55
50940: PUSH
50941: EMPTY
50942: LIST
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PPUSH
50952: CALL_OW 72
50956: PUSH
50957: LD_INT 1
50959: ARRAY
50960: ST_TO_ADDR
// if IsInUnit ( driver ) then
50961: LD_VAR 0 18
50965: PPUSH
50966: CALL_OW 310
50970: IFFALSE 50981
// ComExit ( driver ) ;
50972: LD_VAR 0 18
50976: PPUSH
50977: CALL 76624 0 1
// AddComEnterUnit ( driver , tmp ) ;
50981: LD_VAR 0 18
50985: PPUSH
50986: LD_VAR 0 13
50990: PPUSH
50991: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
50995: LD_VAR 0 18
50999: PPUSH
51000: LD_VAR 0 7
51004: PPUSH
51005: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51009: LD_VAR 0 18
51013: PPUSH
51014: CALL_OW 181
// end ; continue ;
51018: GO 50662
// end ; if not cleaners or not tmp in cleaners then
51020: LD_VAR 0 6
51024: NOT
51025: IFTRUE 51040
51027: PUSH
51028: LD_VAR 0 13
51032: PUSH
51033: LD_VAR 0 6
51037: IN
51038: NOT
51039: OR
51040: IFFALSE 51349
// begin if dep then
51042: LD_VAR 0 17
51046: IFFALSE 51182
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51048: LD_ADDR_VAR 0 16
51052: PUSH
51053: LD_VAR 0 17
51057: PUSH
51058: LD_INT 1
51060: ARRAY
51061: PPUSH
51062: CALL_OW 250
51066: PPUSH
51067: LD_VAR 0 17
51071: PUSH
51072: LD_INT 1
51074: ARRAY
51075: PPUSH
51076: CALL_OW 254
51080: PPUSH
51081: LD_INT 5
51083: PPUSH
51084: CALL_OW 272
51088: PUSH
51089: LD_VAR 0 17
51093: PUSH
51094: LD_INT 1
51096: ARRAY
51097: PPUSH
51098: CALL_OW 251
51102: PPUSH
51103: LD_VAR 0 17
51107: PUSH
51108: LD_INT 1
51110: ARRAY
51111: PPUSH
51112: CALL_OW 254
51116: PPUSH
51117: LD_INT 5
51119: PPUSH
51120: CALL_OW 273
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51129: LD_VAR 0 16
51133: PUSH
51134: LD_INT 1
51136: ARRAY
51137: PPUSH
51138: LD_VAR 0 16
51142: PUSH
51143: LD_INT 2
51145: ARRAY
51146: PPUSH
51147: CALL_OW 488
51151: IFFALSE 51182
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51153: LD_VAR 0 13
51157: PPUSH
51158: LD_VAR 0 16
51162: PUSH
51163: LD_INT 1
51165: ARRAY
51166: PPUSH
51167: LD_VAR 0 16
51171: PUSH
51172: LD_INT 2
51174: ARRAY
51175: PPUSH
51176: CALL_OW 111
// continue ;
51180: GO 50662
// end ; end ; r := GetDir ( tmp ) ;
51182: LD_ADDR_VAR 0 15
51186: PUSH
51187: LD_VAR 0 13
51191: PPUSH
51192: CALL_OW 254
51196: ST_TO_ADDR
// if r = 5 then
51197: LD_VAR 0 15
51201: PUSH
51202: LD_INT 5
51204: EQUAL
51205: IFFALSE 51215
// r := 0 ;
51207: LD_ADDR_VAR 0 15
51211: PUSH
51212: LD_INT 0
51214: ST_TO_ADDR
// for j = r to 5 do
51215: LD_ADDR_VAR 0 10
51219: PUSH
51220: DOUBLE
51221: LD_VAR 0 15
51225: DEC
51226: ST_TO_ADDR
51227: LD_INT 5
51229: PUSH
51230: FOR_TO
51231: IFFALSE 51347
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51233: LD_ADDR_VAR 0 11
51237: PUSH
51238: LD_VAR 0 13
51242: PPUSH
51243: CALL_OW 250
51247: PPUSH
51248: LD_VAR 0 10
51252: PPUSH
51253: LD_INT 2
51255: PPUSH
51256: CALL_OW 272
51260: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51261: LD_ADDR_VAR 0 12
51265: PUSH
51266: LD_VAR 0 13
51270: PPUSH
51271: CALL_OW 251
51275: PPUSH
51276: LD_VAR 0 10
51280: PPUSH
51281: LD_INT 2
51283: PPUSH
51284: CALL_OW 273
51288: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51289: LD_VAR 0 11
51293: PPUSH
51294: LD_VAR 0 12
51298: PPUSH
51299: CALL_OW 488
51303: IFFALSE 51322
51305: PUSH
51306: LD_VAR 0 11
51310: PPUSH
51311: LD_VAR 0 12
51315: PPUSH
51316: CALL_OW 428
51320: NOT
51321: AND
51322: IFFALSE 51345
// begin ComMoveXY ( tmp , _x , _y ) ;
51324: LD_VAR 0 13
51328: PPUSH
51329: LD_VAR 0 11
51333: PPUSH
51334: LD_VAR 0 12
51338: PPUSH
51339: CALL_OW 111
// break ;
51343: GO 51347
// end ; end ;
51345: GO 51230
51347: POP
51348: POP
// end ; end ;
51349: GO 50662
51351: POP
51352: POP
// end ;
51353: LD_VAR 0 8
51357: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51358: LD_INT 0
51360: PPUSH
// result := true ;
51361: LD_ADDR_VAR 0 3
51365: PUSH
51366: LD_INT 1
51368: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51369: LD_VAR 0 2
51373: PUSH
51374: LD_INT 24
51376: DOUBLE
51377: EQUAL
51378: IFTRUE 51388
51380: LD_INT 33
51382: DOUBLE
51383: EQUAL
51384: IFTRUE 51388
51386: GO 51413
51388: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
51389: LD_ADDR_VAR 0 3
51393: PUSH
51394: LD_INT 32
51396: PPUSH
51397: LD_VAR 0 1
51401: PPUSH
51402: CALL_OW 321
51406: PUSH
51407: LD_INT 2
51409: EQUAL
51410: ST_TO_ADDR
51411: GO 51729
51413: LD_INT 20
51415: DOUBLE
51416: EQUAL
51417: IFTRUE 51421
51419: GO 51446
51421: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
51422: LD_ADDR_VAR 0 3
51426: PUSH
51427: LD_INT 6
51429: PPUSH
51430: LD_VAR 0 1
51434: PPUSH
51435: CALL_OW 321
51439: PUSH
51440: LD_INT 2
51442: EQUAL
51443: ST_TO_ADDR
51444: GO 51729
51446: LD_INT 22
51448: DOUBLE
51449: EQUAL
51450: IFTRUE 51460
51452: LD_INT 36
51454: DOUBLE
51455: EQUAL
51456: IFTRUE 51460
51458: GO 51485
51460: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
51461: LD_ADDR_VAR 0 3
51465: PUSH
51466: LD_INT 15
51468: PPUSH
51469: LD_VAR 0 1
51473: PPUSH
51474: CALL_OW 321
51478: PUSH
51479: LD_INT 2
51481: EQUAL
51482: ST_TO_ADDR
51483: GO 51729
51485: LD_INT 30
51487: DOUBLE
51488: EQUAL
51489: IFTRUE 51493
51491: GO 51518
51493: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
51494: LD_ADDR_VAR 0 3
51498: PUSH
51499: LD_INT 20
51501: PPUSH
51502: LD_VAR 0 1
51506: PPUSH
51507: CALL_OW 321
51511: PUSH
51512: LD_INT 2
51514: EQUAL
51515: ST_TO_ADDR
51516: GO 51729
51518: LD_INT 28
51520: DOUBLE
51521: EQUAL
51522: IFTRUE 51532
51524: LD_INT 21
51526: DOUBLE
51527: EQUAL
51528: IFTRUE 51532
51530: GO 51557
51532: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
51533: LD_ADDR_VAR 0 3
51537: PUSH
51538: LD_INT 21
51540: PPUSH
51541: LD_VAR 0 1
51545: PPUSH
51546: CALL_OW 321
51550: PUSH
51551: LD_INT 2
51553: EQUAL
51554: ST_TO_ADDR
51555: GO 51729
51557: LD_INT 16
51559: DOUBLE
51560: EQUAL
51561: IFTRUE 51565
51563: GO 51590
51565: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
51566: LD_ADDR_VAR 0 3
51570: PUSH
51571: LD_INT 84
51573: PPUSH
51574: LD_VAR 0 1
51578: PPUSH
51579: CALL_OW 321
51583: PUSH
51584: LD_INT 2
51586: EQUAL
51587: ST_TO_ADDR
51588: GO 51729
51590: LD_INT 19
51592: DOUBLE
51593: EQUAL
51594: IFTRUE 51604
51596: LD_INT 23
51598: DOUBLE
51599: EQUAL
51600: IFTRUE 51604
51602: GO 51629
51604: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
51605: LD_ADDR_VAR 0 3
51609: PUSH
51610: LD_INT 83
51612: PPUSH
51613: LD_VAR 0 1
51617: PPUSH
51618: CALL_OW 321
51622: PUSH
51623: LD_INT 2
51625: EQUAL
51626: ST_TO_ADDR
51627: GO 51729
51629: LD_INT 17
51631: DOUBLE
51632: EQUAL
51633: IFTRUE 51637
51635: GO 51662
51637: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
51638: LD_ADDR_VAR 0 3
51642: PUSH
51643: LD_INT 39
51645: PPUSH
51646: LD_VAR 0 1
51650: PPUSH
51651: CALL_OW 321
51655: PUSH
51656: LD_INT 2
51658: EQUAL
51659: ST_TO_ADDR
51660: GO 51729
51662: LD_INT 18
51664: DOUBLE
51665: EQUAL
51666: IFTRUE 51670
51668: GO 51695
51670: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
51671: LD_ADDR_VAR 0 3
51675: PUSH
51676: LD_INT 40
51678: PPUSH
51679: LD_VAR 0 1
51683: PPUSH
51684: CALL_OW 321
51688: PUSH
51689: LD_INT 2
51691: EQUAL
51692: ST_TO_ADDR
51693: GO 51729
51695: LD_INT 27
51697: DOUBLE
51698: EQUAL
51699: IFTRUE 51703
51701: GO 51728
51703: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
51704: LD_ADDR_VAR 0 3
51708: PUSH
51709: LD_INT 35
51711: PPUSH
51712: LD_VAR 0 1
51716: PPUSH
51717: CALL_OW 321
51721: PUSH
51722: LD_INT 2
51724: EQUAL
51725: ST_TO_ADDR
51726: GO 51729
51728: POP
// end ;
51729: LD_VAR 0 3
51733: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
51734: LD_INT 0
51736: PPUSH
51737: PPUSH
51738: PPUSH
51739: PPUSH
51740: PPUSH
51741: PPUSH
51742: PPUSH
51743: PPUSH
51744: PPUSH
51745: PPUSH
51746: PPUSH
// result := false ;
51747: LD_ADDR_VAR 0 6
51751: PUSH
51752: LD_INT 0
51754: ST_TO_ADDR
// if btype = b_depot then
51755: LD_VAR 0 2
51759: PUSH
51760: LD_INT 0
51762: EQUAL
51763: IFFALSE 51775
// begin result := true ;
51765: LD_ADDR_VAR 0 6
51769: PUSH
51770: LD_INT 1
51772: ST_TO_ADDR
// exit ;
51773: GO 52629
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
51775: LD_VAR 0 1
51779: NOT
51780: IFTRUE 51805
51782: PUSH
51783: LD_VAR 0 1
51787: PPUSH
51788: CALL_OW 266
51792: PUSH
51793: LD_INT 0
51795: PUSH
51796: LD_INT 1
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: IN
51803: NOT
51804: OR
51805: IFTRUE 51814
51807: PUSH
51808: LD_VAR 0 2
51812: NOT
51813: OR
51814: IFTRUE 51850
51816: PUSH
51817: LD_VAR 0 5
51821: PUSH
51822: LD_INT 0
51824: PUSH
51825: LD_INT 1
51827: PUSH
51828: LD_INT 2
51830: PUSH
51831: LD_INT 3
51833: PUSH
51834: LD_INT 4
51836: PUSH
51837: LD_INT 5
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: IN
51848: NOT
51849: OR
51850: IFTRUE 51869
51852: PUSH
51853: LD_VAR 0 3
51857: PPUSH
51858: LD_VAR 0 4
51862: PPUSH
51863: CALL_OW 488
51867: NOT
51868: OR
51869: IFFALSE 51873
// exit ;
51871: GO 52629
// side := GetSide ( depot ) ;
51873: LD_ADDR_VAR 0 9
51877: PUSH
51878: LD_VAR 0 1
51882: PPUSH
51883: CALL_OW 255
51887: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
51888: LD_VAR 0 9
51892: PPUSH
51893: LD_VAR 0 2
51897: PPUSH
51898: CALL 51358 0 2
51902: NOT
51903: IFFALSE 51907
// exit ;
51905: GO 52629
// pom := GetBase ( depot ) ;
51907: LD_ADDR_VAR 0 10
51911: PUSH
51912: LD_VAR 0 1
51916: PPUSH
51917: CALL_OW 274
51921: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
51922: LD_ADDR_VAR 0 11
51926: PUSH
51927: LD_VAR 0 2
51931: PPUSH
51932: LD_VAR 0 1
51936: PPUSH
51937: CALL_OW 248
51941: PPUSH
51942: CALL_OW 450
51946: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
51947: LD_VAR 0 10
51951: PPUSH
51952: LD_INT 1
51954: PPUSH
51955: CALL_OW 275
51959: PUSH
51960: LD_VAR 0 11
51964: PUSH
51965: LD_INT 1
51967: ARRAY
51968: GREATEREQUAL
51969: IFFALSE 51995
51971: PUSH
51972: LD_VAR 0 10
51976: PPUSH
51977: LD_INT 2
51979: PPUSH
51980: CALL_OW 275
51984: PUSH
51985: LD_VAR 0 11
51989: PUSH
51990: LD_INT 2
51992: ARRAY
51993: GREATEREQUAL
51994: AND
51995: IFFALSE 52021
51997: PUSH
51998: LD_VAR 0 10
52002: PPUSH
52003: LD_INT 3
52005: PPUSH
52006: CALL_OW 275
52010: PUSH
52011: LD_VAR 0 11
52015: PUSH
52016: LD_INT 3
52018: ARRAY
52019: GREATEREQUAL
52020: AND
52021: NOT
52022: IFFALSE 52026
// exit ;
52024: GO 52629
// if GetBType ( depot ) = b_depot then
52026: LD_VAR 0 1
52030: PPUSH
52031: CALL_OW 266
52035: PUSH
52036: LD_INT 0
52038: EQUAL
52039: IFFALSE 52051
// dist := 28 else
52041: LD_ADDR_VAR 0 14
52045: PUSH
52046: LD_INT 28
52048: ST_TO_ADDR
52049: GO 52059
// dist := 36 ;
52051: LD_ADDR_VAR 0 14
52055: PUSH
52056: LD_INT 36
52058: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52059: LD_VAR 0 1
52063: PPUSH
52064: LD_VAR 0 3
52068: PPUSH
52069: LD_VAR 0 4
52073: PPUSH
52074: CALL_OW 297
52078: PUSH
52079: LD_VAR 0 14
52083: GREATER
52084: IFFALSE 52088
// exit ;
52086: GO 52629
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52088: LD_ADDR_VAR 0 12
52092: PUSH
52093: LD_VAR 0 2
52097: PPUSH
52098: LD_VAR 0 3
52102: PPUSH
52103: LD_VAR 0 4
52107: PPUSH
52108: LD_VAR 0 5
52112: PPUSH
52113: LD_VAR 0 1
52117: PPUSH
52118: CALL_OW 248
52122: PPUSH
52123: LD_INT 0
52125: PPUSH
52126: CALL 52634 0 6
52130: ST_TO_ADDR
// if not hexes then
52131: LD_VAR 0 12
52135: NOT
52136: IFFALSE 52140
// exit ;
52138: GO 52629
// hex := GetHexInfo ( x , y ) ;
52140: LD_ADDR_VAR 0 15
52144: PUSH
52145: LD_VAR 0 3
52149: PPUSH
52150: LD_VAR 0 4
52154: PPUSH
52155: CALL_OW 546
52159: ST_TO_ADDR
// if hex [ 1 ] then
52160: LD_VAR 0 15
52164: PUSH
52165: LD_INT 1
52167: ARRAY
52168: IFFALSE 52172
// exit ;
52170: GO 52629
// height := hex [ 2 ] ;
52172: LD_ADDR_VAR 0 13
52176: PUSH
52177: LD_VAR 0 15
52181: PUSH
52182: LD_INT 2
52184: ARRAY
52185: ST_TO_ADDR
// for i = 1 to hexes do
52186: LD_ADDR_VAR 0 7
52190: PUSH
52191: DOUBLE
52192: LD_INT 1
52194: DEC
52195: ST_TO_ADDR
52196: LD_VAR 0 12
52200: PUSH
52201: FOR_TO
52202: IFFALSE 52546
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52204: LD_VAR 0 12
52208: PUSH
52209: LD_VAR 0 7
52213: ARRAY
52214: PUSH
52215: LD_INT 1
52217: ARRAY
52218: PPUSH
52219: LD_VAR 0 12
52223: PUSH
52224: LD_VAR 0 7
52228: ARRAY
52229: PUSH
52230: LD_INT 2
52232: ARRAY
52233: PPUSH
52234: CALL_OW 488
52238: NOT
52239: IFTRUE 52281
52241: PUSH
52242: LD_VAR 0 12
52246: PUSH
52247: LD_VAR 0 7
52251: ARRAY
52252: PUSH
52253: LD_INT 1
52255: ARRAY
52256: PPUSH
52257: LD_VAR 0 12
52261: PUSH
52262: LD_VAR 0 7
52266: ARRAY
52267: PUSH
52268: LD_INT 2
52270: ARRAY
52271: PPUSH
52272: CALL_OW 428
52276: PUSH
52277: LD_INT 0
52279: GREATER
52280: OR
52281: IFTRUE 52319
52283: PUSH
52284: LD_VAR 0 12
52288: PUSH
52289: LD_VAR 0 7
52293: ARRAY
52294: PUSH
52295: LD_INT 1
52297: ARRAY
52298: PPUSH
52299: LD_VAR 0 12
52303: PUSH
52304: LD_VAR 0 7
52308: ARRAY
52309: PUSH
52310: LD_INT 2
52312: ARRAY
52313: PPUSH
52314: CALL_OW 351
52318: OR
52319: IFFALSE 52325
// exit ;
52321: POP
52322: POP
52323: GO 52629
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52325: LD_ADDR_VAR 0 8
52329: PUSH
52330: LD_VAR 0 12
52334: PUSH
52335: LD_VAR 0 7
52339: ARRAY
52340: PUSH
52341: LD_INT 1
52343: ARRAY
52344: PPUSH
52345: LD_VAR 0 12
52349: PUSH
52350: LD_VAR 0 7
52354: ARRAY
52355: PUSH
52356: LD_INT 2
52358: ARRAY
52359: PPUSH
52360: CALL_OW 546
52364: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52365: LD_VAR 0 8
52369: PUSH
52370: LD_INT 1
52372: ARRAY
52373: IFTRUE 52395
52375: PUSH
52376: LD_VAR 0 8
52380: PUSH
52381: LD_INT 2
52383: ARRAY
52384: PUSH
52385: LD_VAR 0 13
52389: PUSH
52390: LD_INT 2
52392: PLUS
52393: GREATER
52394: OR
52395: IFTRUE 52417
52397: PUSH
52398: LD_VAR 0 8
52402: PUSH
52403: LD_INT 2
52405: ARRAY
52406: PUSH
52407: LD_VAR 0 13
52411: PUSH
52412: LD_INT 2
52414: MINUS
52415: LESS
52416: OR
52417: IFTRUE 52485
52419: PUSH
52420: LD_VAR 0 8
52424: PUSH
52425: LD_INT 3
52427: ARRAY
52428: PUSH
52429: LD_INT 0
52431: PUSH
52432: LD_INT 8
52434: PUSH
52435: LD_INT 9
52437: PUSH
52438: LD_INT 10
52440: PUSH
52441: LD_INT 11
52443: PUSH
52444: LD_INT 12
52446: PUSH
52447: LD_INT 13
52449: PUSH
52450: LD_INT 16
52452: PUSH
52453: LD_INT 17
52455: PUSH
52456: LD_INT 18
52458: PUSH
52459: LD_INT 19
52461: PUSH
52462: LD_INT 20
52464: PUSH
52465: LD_INT 21
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: IN
52483: NOT
52484: OR
52485: IFTRUE 52498
52487: PUSH
52488: LD_VAR 0 8
52492: PUSH
52493: LD_INT 5
52495: ARRAY
52496: NOT
52497: OR
52498: IFTRUE 52538
52500: PUSH
52501: LD_VAR 0 8
52505: PUSH
52506: LD_INT 6
52508: ARRAY
52509: PUSH
52510: LD_INT 1
52512: PUSH
52513: LD_INT 2
52515: PUSH
52516: LD_INT 7
52518: PUSH
52519: LD_INT 9
52521: PUSH
52522: LD_INT 10
52524: PUSH
52525: LD_INT 11
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: IN
52536: NOT
52537: OR
52538: IFFALSE 52544
// exit ;
52540: POP
52541: POP
52542: GO 52629
// end ;
52544: GO 52201
52546: POP
52547: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
52548: LD_VAR 0 9
52552: PPUSH
52553: LD_VAR 0 3
52557: PPUSH
52558: LD_VAR 0 4
52562: PPUSH
52563: LD_INT 20
52565: PPUSH
52566: CALL 44448 0 4
52570: PUSH
52571: LD_INT 4
52573: ARRAY
52574: IFFALSE 52578
// exit ;
52576: GO 52629
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
52578: LD_VAR 0 2
52582: PUSH
52583: LD_INT 29
52585: PUSH
52586: LD_INT 30
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: IN
52593: IFFALSE 52617
52595: PUSH
52596: LD_VAR 0 3
52600: PPUSH
52601: LD_VAR 0 4
52605: PPUSH
52606: LD_VAR 0 9
52610: PPUSH
52611: CALL_OW 440
52615: NOT
52616: AND
52617: IFFALSE 52621
// exit ;
52619: GO 52629
// result := true ;
52621: LD_ADDR_VAR 0 6
52625: PUSH
52626: LD_INT 1
52628: ST_TO_ADDR
// end ;
52629: LD_VAR 0 6
52633: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
52634: LD_INT 0
52636: PPUSH
52637: PPUSH
52638: PPUSH
52639: PPUSH
52640: PPUSH
52641: PPUSH
52642: PPUSH
52643: PPUSH
52644: PPUSH
52645: PPUSH
52646: PPUSH
52647: PPUSH
52648: PPUSH
52649: PPUSH
52650: PPUSH
52651: PPUSH
52652: PPUSH
52653: PPUSH
52654: PPUSH
52655: PPUSH
52656: PPUSH
52657: PPUSH
52658: PPUSH
52659: PPUSH
52660: PPUSH
52661: PPUSH
52662: PPUSH
52663: PPUSH
52664: PPUSH
52665: PPUSH
52666: PPUSH
52667: PPUSH
52668: PPUSH
52669: PPUSH
52670: PPUSH
52671: PPUSH
52672: PPUSH
52673: PPUSH
52674: PPUSH
52675: PPUSH
52676: PPUSH
52677: PPUSH
52678: PPUSH
52679: PPUSH
52680: PPUSH
52681: PPUSH
52682: PPUSH
52683: PPUSH
52684: PPUSH
52685: PPUSH
52686: PPUSH
52687: PPUSH
52688: PPUSH
52689: PPUSH
52690: PPUSH
52691: PPUSH
52692: PPUSH
52693: PPUSH
// result = [ ] ;
52694: LD_ADDR_VAR 0 7
52698: PUSH
52699: EMPTY
52700: ST_TO_ADDR
// temp_list = [ ] ;
52701: LD_ADDR_VAR 0 9
52705: PUSH
52706: EMPTY
52707: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
52708: LD_VAR 0 4
52712: PUSH
52713: LD_INT 0
52715: PUSH
52716: LD_INT 1
52718: PUSH
52719: LD_INT 2
52721: PUSH
52722: LD_INT 3
52724: PUSH
52725: LD_INT 4
52727: PUSH
52728: LD_INT 5
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: IN
52739: NOT
52740: IFTRUE 52783
52742: PUSH
52743: LD_VAR 0 1
52747: PUSH
52748: LD_INT 0
52750: PUSH
52751: LD_INT 1
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: IN
52758: IFFALSE 52782
52760: PUSH
52761: LD_VAR 0 5
52765: PUSH
52766: LD_INT 1
52768: PUSH
52769: LD_INT 2
52771: PUSH
52772: LD_INT 3
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: LIST
52779: IN
52780: NOT
52781: AND
52782: OR
52783: IFFALSE 52787
// exit ;
52785: GO 71186
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
52787: LD_VAR 0 1
52791: PUSH
52792: LD_INT 6
52794: PUSH
52795: LD_INT 7
52797: PUSH
52798: LD_INT 8
52800: PUSH
52801: LD_INT 13
52803: PUSH
52804: LD_INT 12
52806: PUSH
52807: LD_INT 15
52809: PUSH
52810: LD_INT 11
52812: PUSH
52813: LD_INT 14
52815: PUSH
52816: LD_INT 10
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: IN
52830: IFFALSE 52840
// btype = b_lab ;
52832: LD_ADDR_VAR 0 1
52836: PUSH
52837: LD_INT 6
52839: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
52840: LD_VAR 0 6
52844: PUSH
52845: LD_INT 0
52847: PUSH
52848: LD_INT 1
52850: PUSH
52851: LD_INT 2
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: LIST
52858: IN
52859: NOT
52860: IFTRUE 52928
52862: PUSH
52863: LD_VAR 0 1
52867: PUSH
52868: LD_INT 0
52870: PUSH
52871: LD_INT 1
52873: PUSH
52874: LD_INT 2
52876: PUSH
52877: LD_INT 3
52879: PUSH
52880: LD_INT 6
52882: PUSH
52883: LD_INT 36
52885: PUSH
52886: LD_INT 4
52888: PUSH
52889: LD_INT 5
52891: PUSH
52892: LD_INT 31
52894: PUSH
52895: LD_INT 32
52897: PUSH
52898: LD_INT 33
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: IN
52914: NOT
52915: IFFALSE 52927
52917: PUSH
52918: LD_VAR 0 6
52922: PUSH
52923: LD_INT 1
52925: EQUAL
52926: AND
52927: OR
52928: IFTRUE 52960
52930: PUSH
52931: LD_VAR 0 1
52935: PUSH
52936: LD_INT 2
52938: PUSH
52939: LD_INT 3
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: IN
52946: NOT
52947: IFFALSE 52959
52949: PUSH
52950: LD_VAR 0 6
52954: PUSH
52955: LD_INT 2
52957: EQUAL
52958: AND
52959: OR
52960: IFFALSE 52970
// mode = 0 ;
52962: LD_ADDR_VAR 0 6
52966: PUSH
52967: LD_INT 0
52969: ST_TO_ADDR
// case mode of 0 :
52970: LD_VAR 0 6
52974: PUSH
52975: LD_INT 0
52977: DOUBLE
52978: EQUAL
52979: IFTRUE 52983
52981: GO 64436
52983: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52984: LD_ADDR_VAR 0 11
52988: PUSH
52989: LD_INT 0
52991: PUSH
52992: LD_INT 0
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 0
53001: PUSH
53002: LD_INT 1
53004: NEG
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 1
53012: PUSH
53013: LD_INT 0
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 1
53022: PUSH
53023: LD_INT 1
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 0
53032: PUSH
53033: LD_INT 1
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 1
53042: NEG
53043: PUSH
53044: LD_INT 0
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 1
53053: NEG
53054: PUSH
53055: LD_INT 1
53057: NEG
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 1
53065: NEG
53066: PUSH
53067: LD_INT 2
53069: NEG
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: LD_INT 0
53077: PUSH
53078: LD_INT 2
53080: NEG
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 1
53088: PUSH
53089: LD_INT 1
53091: NEG
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 1
53099: PUSH
53100: LD_INT 2
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 0
53109: PUSH
53110: LD_INT 2
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 1
53119: NEG
53120: PUSH
53121: LD_INT 1
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 1
53130: PUSH
53131: LD_INT 3
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 0
53140: PUSH
53141: LD_INT 3
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 1
53150: NEG
53151: PUSH
53152: LD_INT 2
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53177: LD_ADDR_VAR 0 12
53181: PUSH
53182: LD_INT 0
53184: PUSH
53185: LD_INT 0
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: LD_INT 0
53194: PUSH
53195: LD_INT 1
53197: NEG
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 1
53205: PUSH
53206: LD_INT 0
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 1
53215: PUSH
53216: LD_INT 1
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 0
53225: PUSH
53226: LD_INT 1
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 1
53235: NEG
53236: PUSH
53237: LD_INT 0
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 1
53246: NEG
53247: PUSH
53248: LD_INT 1
53250: NEG
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 1
53258: PUSH
53259: LD_INT 1
53261: NEG
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 2
53269: PUSH
53270: LD_INT 0
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 2
53279: PUSH
53280: LD_INT 1
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 1
53289: NEG
53290: PUSH
53291: LD_INT 1
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 2
53300: NEG
53301: PUSH
53302: LD_INT 0
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 2
53311: NEG
53312: PUSH
53313: LD_INT 1
53315: NEG
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 2
53323: NEG
53324: PUSH
53325: LD_INT 1
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 3
53334: NEG
53335: PUSH
53336: LD_INT 0
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 3
53345: NEG
53346: PUSH
53347: LD_INT 1
53349: NEG
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53373: LD_ADDR_VAR 0 13
53377: PUSH
53378: LD_INT 0
53380: PUSH
53381: LD_INT 0
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 0
53390: PUSH
53391: LD_INT 1
53393: NEG
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 1
53401: PUSH
53402: LD_INT 0
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 1
53411: PUSH
53412: LD_INT 1
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 0
53421: PUSH
53422: LD_INT 1
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 1
53431: NEG
53432: PUSH
53433: LD_INT 0
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 1
53442: NEG
53443: PUSH
53444: LD_INT 1
53446: NEG
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 1
53454: NEG
53455: PUSH
53456: LD_INT 2
53458: NEG
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 2
53466: PUSH
53467: LD_INT 1
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 2
53476: PUSH
53477: LD_INT 2
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 1
53486: PUSH
53487: LD_INT 2
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 2
53496: NEG
53497: PUSH
53498: LD_INT 1
53500: NEG
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 2
53508: NEG
53509: PUSH
53510: LD_INT 2
53512: NEG
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 2
53520: NEG
53521: PUSH
53522: LD_INT 3
53524: NEG
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 3
53532: NEG
53533: PUSH
53534: LD_INT 2
53536: NEG
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 3
53544: NEG
53545: PUSH
53546: LD_INT 3
53548: NEG
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53572: LD_ADDR_VAR 0 14
53576: PUSH
53577: LD_INT 0
53579: PUSH
53580: LD_INT 0
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 0
53589: PUSH
53590: LD_INT 1
53592: NEG
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 1
53600: PUSH
53601: LD_INT 0
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 1
53610: PUSH
53611: LD_INT 1
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 0
53620: PUSH
53621: LD_INT 1
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 1
53630: NEG
53631: PUSH
53632: LD_INT 0
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 1
53641: NEG
53642: PUSH
53643: LD_INT 1
53645: NEG
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 1
53653: NEG
53654: PUSH
53655: LD_INT 2
53657: NEG
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 0
53665: PUSH
53666: LD_INT 2
53668: NEG
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 1
53676: PUSH
53677: LD_INT 1
53679: NEG
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 1
53687: PUSH
53688: LD_INT 2
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 0
53697: PUSH
53698: LD_INT 2
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 1
53707: NEG
53708: PUSH
53709: LD_INT 1
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 1
53718: NEG
53719: PUSH
53720: LD_INT 3
53722: NEG
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 0
53730: PUSH
53731: LD_INT 3
53733: NEG
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 1
53741: PUSH
53742: LD_INT 2
53744: NEG
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53768: LD_ADDR_VAR 0 15
53772: PUSH
53773: LD_INT 0
53775: PUSH
53776: LD_INT 0
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: LD_INT 0
53785: PUSH
53786: LD_INT 1
53788: NEG
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 1
53796: PUSH
53797: LD_INT 0
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 1
53806: PUSH
53807: LD_INT 1
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 0
53816: PUSH
53817: LD_INT 1
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 1
53826: NEG
53827: PUSH
53828: LD_INT 0
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 1
53837: NEG
53838: PUSH
53839: LD_INT 1
53841: NEG
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 1
53849: PUSH
53850: LD_INT 1
53852: NEG
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 2
53860: PUSH
53861: LD_INT 0
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 2
53870: PUSH
53871: LD_INT 1
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 1
53880: NEG
53881: PUSH
53882: LD_INT 1
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 2
53891: NEG
53892: PUSH
53893: LD_INT 0
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 2
53902: NEG
53903: PUSH
53904: LD_INT 1
53906: NEG
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 2
53914: PUSH
53915: LD_INT 1
53917: NEG
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 3
53925: PUSH
53926: LD_INT 0
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 3
53935: PUSH
53936: LD_INT 1
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53961: LD_ADDR_VAR 0 16
53965: PUSH
53966: LD_INT 0
53968: PUSH
53969: LD_INT 0
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 0
53978: PUSH
53979: LD_INT 1
53981: NEG
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 1
53989: PUSH
53990: LD_INT 0
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 1
53999: PUSH
54000: LD_INT 1
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 0
54009: PUSH
54010: LD_INT 1
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 1
54019: NEG
54020: PUSH
54021: LD_INT 0
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 1
54030: NEG
54031: PUSH
54032: LD_INT 1
54034: NEG
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 1
54042: NEG
54043: PUSH
54044: LD_INT 2
54046: NEG
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 2
54054: PUSH
54055: LD_INT 1
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 2
54064: PUSH
54065: LD_INT 2
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 1
54074: PUSH
54075: LD_INT 2
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 2
54084: NEG
54085: PUSH
54086: LD_INT 1
54088: NEG
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 2
54096: NEG
54097: PUSH
54098: LD_INT 2
54100: NEG
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 3
54108: PUSH
54109: LD_INT 2
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 3
54118: PUSH
54119: LD_INT 3
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 2
54128: PUSH
54129: LD_INT 3
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54154: LD_ADDR_VAR 0 17
54158: PUSH
54159: LD_INT 0
54161: PUSH
54162: LD_INT 0
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 0
54171: PUSH
54172: LD_INT 1
54174: NEG
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 1
54182: PUSH
54183: LD_INT 0
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 1
54192: PUSH
54193: LD_INT 1
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 0
54202: PUSH
54203: LD_INT 1
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 1
54212: NEG
54213: PUSH
54214: LD_INT 0
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 1
54223: NEG
54224: PUSH
54225: LD_INT 1
54227: NEG
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 1
54235: NEG
54236: PUSH
54237: LD_INT 2
54239: NEG
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 0
54247: PUSH
54248: LD_INT 2
54250: NEG
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 1
54258: PUSH
54259: LD_INT 1
54261: NEG
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 2
54269: PUSH
54270: LD_INT 0
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 2
54279: PUSH
54280: LD_INT 1
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 2
54289: PUSH
54290: LD_INT 2
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 1
54299: PUSH
54300: LD_INT 2
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 0
54309: PUSH
54310: LD_INT 2
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 1
54319: NEG
54320: PUSH
54321: LD_INT 1
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 2
54330: NEG
54331: PUSH
54332: LD_INT 0
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 2
54341: NEG
54342: PUSH
54343: LD_INT 1
54345: NEG
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 2
54353: NEG
54354: PUSH
54355: LD_INT 2
54357: NEG
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54384: LD_ADDR_VAR 0 18
54388: PUSH
54389: LD_INT 0
54391: PUSH
54392: LD_INT 0
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 0
54401: PUSH
54402: LD_INT 1
54404: NEG
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 1
54412: PUSH
54413: LD_INT 0
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 1
54422: PUSH
54423: LD_INT 1
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 0
54432: PUSH
54433: LD_INT 1
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 1
54442: NEG
54443: PUSH
54444: LD_INT 0
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 1
54453: NEG
54454: PUSH
54455: LD_INT 1
54457: NEG
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 1
54465: NEG
54466: PUSH
54467: LD_INT 2
54469: NEG
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 0
54477: PUSH
54478: LD_INT 2
54480: NEG
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 1
54488: PUSH
54489: LD_INT 1
54491: NEG
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 2
54499: PUSH
54500: LD_INT 0
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 2
54509: PUSH
54510: LD_INT 1
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 2
54519: PUSH
54520: LD_INT 2
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 1
54529: PUSH
54530: LD_INT 2
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 0
54539: PUSH
54540: LD_INT 2
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 1
54549: NEG
54550: PUSH
54551: LD_INT 1
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 2
54560: NEG
54561: PUSH
54562: LD_INT 0
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 2
54571: NEG
54572: PUSH
54573: LD_INT 1
54575: NEG
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 2
54583: NEG
54584: PUSH
54585: LD_INT 2
54587: NEG
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54614: LD_ADDR_VAR 0 19
54618: PUSH
54619: LD_INT 0
54621: PUSH
54622: LD_INT 0
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 0
54631: PUSH
54632: LD_INT 1
54634: NEG
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 1
54642: PUSH
54643: LD_INT 0
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 1
54652: PUSH
54653: LD_INT 1
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 0
54662: PUSH
54663: LD_INT 1
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 1
54672: NEG
54673: PUSH
54674: LD_INT 0
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 1
54683: NEG
54684: PUSH
54685: LD_INT 1
54687: NEG
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 1
54695: NEG
54696: PUSH
54697: LD_INT 2
54699: NEG
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 0
54707: PUSH
54708: LD_INT 2
54710: NEG
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 1
54718: PUSH
54719: LD_INT 1
54721: NEG
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 2
54729: PUSH
54730: LD_INT 0
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 2
54739: PUSH
54740: LD_INT 1
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 2
54749: PUSH
54750: LD_INT 2
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 1
54759: PUSH
54760: LD_INT 2
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 0
54769: PUSH
54770: LD_INT 2
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 1
54779: NEG
54780: PUSH
54781: LD_INT 1
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 2
54790: NEG
54791: PUSH
54792: LD_INT 0
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 2
54801: NEG
54802: PUSH
54803: LD_INT 1
54805: NEG
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 2
54813: NEG
54814: PUSH
54815: LD_INT 2
54817: NEG
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54844: LD_ADDR_VAR 0 20
54848: PUSH
54849: LD_INT 0
54851: PUSH
54852: LD_INT 0
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 0
54861: PUSH
54862: LD_INT 1
54864: NEG
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 1
54872: PUSH
54873: LD_INT 0
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 1
54882: PUSH
54883: LD_INT 1
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 0
54892: PUSH
54893: LD_INT 1
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 1
54902: NEG
54903: PUSH
54904: LD_INT 0
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 1
54913: NEG
54914: PUSH
54915: LD_INT 1
54917: NEG
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 1
54925: NEG
54926: PUSH
54927: LD_INT 2
54929: NEG
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 0
54937: PUSH
54938: LD_INT 2
54940: NEG
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 1
54948: PUSH
54949: LD_INT 1
54951: NEG
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 2
54959: PUSH
54960: LD_INT 0
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 2
54969: PUSH
54970: LD_INT 1
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 2
54979: PUSH
54980: LD_INT 2
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 1
54989: PUSH
54990: LD_INT 2
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 0
54999: PUSH
55000: LD_INT 2
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 1
55009: NEG
55010: PUSH
55011: LD_INT 1
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 2
55020: NEG
55021: PUSH
55022: LD_INT 0
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 2
55031: NEG
55032: PUSH
55033: LD_INT 1
55035: NEG
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 2
55043: NEG
55044: PUSH
55045: LD_INT 2
55047: NEG
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55074: LD_ADDR_VAR 0 21
55078: PUSH
55079: LD_INT 0
55081: PUSH
55082: LD_INT 0
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 0
55091: PUSH
55092: LD_INT 1
55094: NEG
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 1
55102: PUSH
55103: LD_INT 0
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 1
55112: PUSH
55113: LD_INT 1
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 0
55122: PUSH
55123: LD_INT 1
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 1
55132: NEG
55133: PUSH
55134: LD_INT 0
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 1
55143: NEG
55144: PUSH
55145: LD_INT 1
55147: NEG
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 1
55155: NEG
55156: PUSH
55157: LD_INT 2
55159: NEG
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 0
55167: PUSH
55168: LD_INT 2
55170: NEG
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 1
55178: PUSH
55179: LD_INT 1
55181: NEG
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 2
55189: PUSH
55190: LD_INT 0
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 2
55199: PUSH
55200: LD_INT 1
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 2
55209: PUSH
55210: LD_INT 2
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 1
55219: PUSH
55220: LD_INT 2
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 0
55229: PUSH
55230: LD_INT 2
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 1
55239: NEG
55240: PUSH
55241: LD_INT 1
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 2
55250: NEG
55251: PUSH
55252: LD_INT 0
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 2
55261: NEG
55262: PUSH
55263: LD_INT 1
55265: NEG
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 2
55273: NEG
55274: PUSH
55275: LD_INT 2
55277: NEG
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: LIST
55297: LIST
55298: LIST
55299: LIST
55300: LIST
55301: LIST
55302: LIST
55303: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55304: LD_ADDR_VAR 0 22
55308: PUSH
55309: LD_INT 0
55311: PUSH
55312: LD_INT 0
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 0
55321: PUSH
55322: LD_INT 1
55324: NEG
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 1
55332: PUSH
55333: LD_INT 0
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 1
55342: PUSH
55343: LD_INT 1
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 0
55352: PUSH
55353: LD_INT 1
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 1
55362: NEG
55363: PUSH
55364: LD_INT 0
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 1
55373: NEG
55374: PUSH
55375: LD_INT 1
55377: NEG
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 1
55385: NEG
55386: PUSH
55387: LD_INT 2
55389: NEG
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 0
55397: PUSH
55398: LD_INT 2
55400: NEG
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 1
55408: PUSH
55409: LD_INT 1
55411: NEG
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 2
55419: PUSH
55420: LD_INT 0
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 2
55429: PUSH
55430: LD_INT 1
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 2
55439: PUSH
55440: LD_INT 2
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 1
55449: PUSH
55450: LD_INT 2
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 0
55459: PUSH
55460: LD_INT 2
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 1
55469: NEG
55470: PUSH
55471: LD_INT 1
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 2
55480: NEG
55481: PUSH
55482: LD_INT 0
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 2
55491: NEG
55492: PUSH
55493: LD_INT 1
55495: NEG
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 2
55503: NEG
55504: PUSH
55505: LD_INT 2
55507: NEG
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55534: LD_ADDR_VAR 0 23
55538: PUSH
55539: LD_INT 0
55541: PUSH
55542: LD_INT 0
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 0
55551: PUSH
55552: LD_INT 1
55554: NEG
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 1
55562: PUSH
55563: LD_INT 0
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 1
55572: PUSH
55573: LD_INT 1
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 0
55582: PUSH
55583: LD_INT 1
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 1
55592: NEG
55593: PUSH
55594: LD_INT 0
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 1
55603: NEG
55604: PUSH
55605: LD_INT 1
55607: NEG
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 1
55615: NEG
55616: PUSH
55617: LD_INT 2
55619: NEG
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 0
55627: PUSH
55628: LD_INT 2
55630: NEG
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 1
55638: PUSH
55639: LD_INT 1
55641: NEG
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 2
55649: PUSH
55650: LD_INT 0
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 2
55659: PUSH
55660: LD_INT 1
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 2
55669: PUSH
55670: LD_INT 2
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 1
55679: PUSH
55680: LD_INT 2
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 0
55689: PUSH
55690: LD_INT 2
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 1
55699: NEG
55700: PUSH
55701: LD_INT 1
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 2
55710: NEG
55711: PUSH
55712: LD_INT 0
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 2
55721: NEG
55722: PUSH
55723: LD_INT 1
55725: NEG
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 2
55733: NEG
55734: PUSH
55735: LD_INT 2
55737: NEG
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 2
55745: NEG
55746: PUSH
55747: LD_INT 3
55749: NEG
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 1
55757: NEG
55758: PUSH
55759: LD_INT 3
55761: NEG
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 1
55769: PUSH
55770: LD_INT 2
55772: NEG
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 2
55780: PUSH
55781: LD_INT 1
55783: NEG
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
55814: LD_ADDR_VAR 0 24
55818: PUSH
55819: LD_INT 0
55821: PUSH
55822: LD_INT 0
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 0
55831: PUSH
55832: LD_INT 1
55834: NEG
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 1
55842: PUSH
55843: LD_INT 0
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 1
55852: PUSH
55853: LD_INT 1
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 0
55862: PUSH
55863: LD_INT 1
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 1
55872: NEG
55873: PUSH
55874: LD_INT 0
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 1
55883: NEG
55884: PUSH
55885: LD_INT 1
55887: NEG
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 1
55895: NEG
55896: PUSH
55897: LD_INT 2
55899: NEG
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 0
55907: PUSH
55908: LD_INT 2
55910: NEG
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 1
55918: PUSH
55919: LD_INT 1
55921: NEG
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 2
55929: PUSH
55930: LD_INT 0
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 2
55939: PUSH
55940: LD_INT 1
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 2
55949: PUSH
55950: LD_INT 2
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 1
55959: PUSH
55960: LD_INT 2
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 0
55969: PUSH
55970: LD_INT 2
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 1
55979: NEG
55980: PUSH
55981: LD_INT 1
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 2
55990: NEG
55991: PUSH
55992: LD_INT 0
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 2
56001: NEG
56002: PUSH
56003: LD_INT 1
56005: NEG
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 2
56013: NEG
56014: PUSH
56015: LD_INT 2
56017: NEG
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 1
56025: PUSH
56026: LD_INT 2
56028: NEG
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 2
56036: PUSH
56037: LD_INT 1
56039: NEG
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 3
56047: PUSH
56048: LD_INT 1
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 3
56057: PUSH
56058: LD_INT 2
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56090: LD_ADDR_VAR 0 25
56094: PUSH
56095: LD_INT 0
56097: PUSH
56098: LD_INT 0
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 0
56107: PUSH
56108: LD_INT 1
56110: NEG
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 1
56118: PUSH
56119: LD_INT 0
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 1
56128: PUSH
56129: LD_INT 1
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 0
56138: PUSH
56139: LD_INT 1
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 1
56148: NEG
56149: PUSH
56150: LD_INT 0
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 1
56159: NEG
56160: PUSH
56161: LD_INT 1
56163: NEG
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 1
56171: NEG
56172: PUSH
56173: LD_INT 2
56175: NEG
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 0
56183: PUSH
56184: LD_INT 2
56186: NEG
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 1
56194: PUSH
56195: LD_INT 1
56197: NEG
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 2
56205: PUSH
56206: LD_INT 0
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 2
56215: PUSH
56216: LD_INT 1
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 2
56225: PUSH
56226: LD_INT 2
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 1
56235: PUSH
56236: LD_INT 2
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 0
56245: PUSH
56246: LD_INT 2
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 1
56255: NEG
56256: PUSH
56257: LD_INT 1
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 2
56266: NEG
56267: PUSH
56268: LD_INT 0
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 2
56277: NEG
56278: PUSH
56279: LD_INT 1
56281: NEG
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 2
56289: NEG
56290: PUSH
56291: LD_INT 2
56293: NEG
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 3
56301: PUSH
56302: LD_INT 1
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 3
56311: PUSH
56312: LD_INT 2
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 2
56321: PUSH
56322: LD_INT 3
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 1
56331: PUSH
56332: LD_INT 3
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56364: LD_ADDR_VAR 0 26
56368: PUSH
56369: LD_INT 0
56371: PUSH
56372: LD_INT 0
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 0
56381: PUSH
56382: LD_INT 1
56384: NEG
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 1
56392: PUSH
56393: LD_INT 0
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 1
56402: PUSH
56403: LD_INT 1
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 0
56412: PUSH
56413: LD_INT 1
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 1
56422: NEG
56423: PUSH
56424: LD_INT 0
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 1
56433: NEG
56434: PUSH
56435: LD_INT 1
56437: NEG
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 1
56445: NEG
56446: PUSH
56447: LD_INT 2
56449: NEG
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 0
56457: PUSH
56458: LD_INT 2
56460: NEG
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 1
56468: PUSH
56469: LD_INT 1
56471: NEG
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 2
56479: PUSH
56480: LD_INT 0
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 2
56489: PUSH
56490: LD_INT 1
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 2
56499: PUSH
56500: LD_INT 2
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 1
56509: PUSH
56510: LD_INT 2
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 0
56519: PUSH
56520: LD_INT 2
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 1
56529: NEG
56530: PUSH
56531: LD_INT 1
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 2
56540: NEG
56541: PUSH
56542: LD_INT 0
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 2
56551: NEG
56552: PUSH
56553: LD_INT 1
56555: NEG
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 2
56563: NEG
56564: PUSH
56565: LD_INT 2
56567: NEG
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 2
56575: PUSH
56576: LD_INT 3
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 1
56585: PUSH
56586: LD_INT 3
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 1
56595: NEG
56596: PUSH
56597: LD_INT 2
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 2
56606: NEG
56607: PUSH
56608: LD_INT 1
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56640: LD_ADDR_VAR 0 27
56644: PUSH
56645: LD_INT 0
56647: PUSH
56648: LD_INT 0
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 0
56657: PUSH
56658: LD_INT 1
56660: NEG
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 1
56668: PUSH
56669: LD_INT 0
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 1
56678: PUSH
56679: LD_INT 1
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 0
56688: PUSH
56689: LD_INT 1
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 1
56698: NEG
56699: PUSH
56700: LD_INT 0
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 1
56709: NEG
56710: PUSH
56711: LD_INT 1
56713: NEG
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 1
56721: NEG
56722: PUSH
56723: LD_INT 2
56725: NEG
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 0
56733: PUSH
56734: LD_INT 2
56736: NEG
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 1
56744: PUSH
56745: LD_INT 1
56747: NEG
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 2
56755: PUSH
56756: LD_INT 0
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 2
56765: PUSH
56766: LD_INT 1
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 2
56775: PUSH
56776: LD_INT 2
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 1
56785: PUSH
56786: LD_INT 2
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 0
56795: PUSH
56796: LD_INT 2
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 1
56805: NEG
56806: PUSH
56807: LD_INT 1
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 2
56816: NEG
56817: PUSH
56818: LD_INT 0
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 2
56827: NEG
56828: PUSH
56829: LD_INT 1
56831: NEG
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 2
56839: NEG
56840: PUSH
56841: LD_INT 2
56843: NEG
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 1
56851: NEG
56852: PUSH
56853: LD_INT 2
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 2
56862: NEG
56863: PUSH
56864: LD_INT 1
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 3
56873: NEG
56874: PUSH
56875: LD_INT 1
56877: NEG
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 3
56885: NEG
56886: PUSH
56887: LD_INT 2
56889: NEG
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56920: LD_ADDR_VAR 0 28
56924: PUSH
56925: LD_INT 0
56927: PUSH
56928: LD_INT 0
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: LD_INT 0
56937: PUSH
56938: LD_INT 1
56940: NEG
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 1
56948: PUSH
56949: LD_INT 0
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 1
56958: PUSH
56959: LD_INT 1
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 0
56968: PUSH
56969: LD_INT 1
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 1
56978: NEG
56979: PUSH
56980: LD_INT 0
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 1
56989: NEG
56990: PUSH
56991: LD_INT 1
56993: NEG
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 1
57001: NEG
57002: PUSH
57003: LD_INT 2
57005: NEG
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 0
57013: PUSH
57014: LD_INT 2
57016: NEG
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 1
57024: PUSH
57025: LD_INT 1
57027: NEG
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 2
57035: PUSH
57036: LD_INT 0
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 2
57045: PUSH
57046: LD_INT 1
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 2
57055: PUSH
57056: LD_INT 2
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 1
57065: PUSH
57066: LD_INT 2
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 0
57075: PUSH
57076: LD_INT 2
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 1
57085: NEG
57086: PUSH
57087: LD_INT 1
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 2
57096: NEG
57097: PUSH
57098: LD_INT 0
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 2
57107: NEG
57108: PUSH
57109: LD_INT 1
57111: NEG
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 2
57119: NEG
57120: PUSH
57121: LD_INT 2
57123: NEG
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 2
57131: NEG
57132: PUSH
57133: LD_INT 3
57135: NEG
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 1
57143: NEG
57144: PUSH
57145: LD_INT 3
57147: NEG
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 3
57155: NEG
57156: PUSH
57157: LD_INT 1
57159: NEG
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 3
57167: NEG
57168: PUSH
57169: LD_INT 2
57171: NEG
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: LIST
57181: LIST
57182: LIST
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57202: LD_ADDR_VAR 0 29
57206: PUSH
57207: LD_INT 0
57209: PUSH
57210: LD_INT 0
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 0
57219: PUSH
57220: LD_INT 1
57222: NEG
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 1
57230: PUSH
57231: LD_INT 0
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 1
57240: PUSH
57241: LD_INT 1
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 0
57250: PUSH
57251: LD_INT 1
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 1
57260: NEG
57261: PUSH
57262: LD_INT 0
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: LD_INT 1
57271: NEG
57272: PUSH
57273: LD_INT 1
57275: NEG
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 1
57283: NEG
57284: PUSH
57285: LD_INT 2
57287: NEG
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 0
57295: PUSH
57296: LD_INT 2
57298: NEG
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 1
57306: PUSH
57307: LD_INT 1
57309: NEG
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 2
57317: PUSH
57318: LD_INT 0
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 2
57327: PUSH
57328: LD_INT 1
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 1
57337: PUSH
57338: LD_INT 2
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 0
57347: PUSH
57348: LD_INT 2
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 1
57357: NEG
57358: PUSH
57359: LD_INT 1
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 2
57368: NEG
57369: PUSH
57370: LD_INT 1
57372: NEG
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 2
57380: NEG
57381: PUSH
57382: LD_INT 2
57384: NEG
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 2
57392: NEG
57393: PUSH
57394: LD_INT 3
57396: NEG
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 2
57404: PUSH
57405: LD_INT 1
57407: NEG
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 3
57415: PUSH
57416: LD_INT 1
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_INT 1
57425: PUSH
57426: LD_INT 3
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 1
57435: NEG
57436: PUSH
57437: LD_INT 2
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 3
57446: NEG
57447: PUSH
57448: LD_INT 2
57450: NEG
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57481: LD_ADDR_VAR 0 30
57485: PUSH
57486: LD_INT 0
57488: PUSH
57489: LD_INT 0
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 0
57498: PUSH
57499: LD_INT 1
57501: NEG
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 1
57509: PUSH
57510: LD_INT 0
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 1
57519: PUSH
57520: LD_INT 1
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 0
57529: PUSH
57530: LD_INT 1
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 1
57539: NEG
57540: PUSH
57541: LD_INT 0
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 1
57550: NEG
57551: PUSH
57552: LD_INT 1
57554: NEG
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 1
57562: NEG
57563: PUSH
57564: LD_INT 2
57566: NEG
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 0
57574: PUSH
57575: LD_INT 2
57577: NEG
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 1
57585: PUSH
57586: LD_INT 1
57588: NEG
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 2
57596: PUSH
57597: LD_INT 0
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: LD_INT 2
57606: PUSH
57607: LD_INT 1
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 2
57616: PUSH
57617: LD_INT 2
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 1
57626: PUSH
57627: LD_INT 2
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 1
57636: NEG
57637: PUSH
57638: LD_INT 1
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 2
57647: NEG
57648: PUSH
57649: LD_INT 0
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 2
57658: NEG
57659: PUSH
57660: LD_INT 1
57662: NEG
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 1
57670: NEG
57671: PUSH
57672: LD_INT 3
57674: NEG
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 1
57682: PUSH
57683: LD_INT 2
57685: NEG
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 3
57693: PUSH
57694: LD_INT 2
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 2
57703: PUSH
57704: LD_INT 3
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 2
57713: NEG
57714: PUSH
57715: LD_INT 1
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 3
57724: NEG
57725: PUSH
57726: LD_INT 1
57728: NEG
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57759: LD_ADDR_VAR 0 31
57763: PUSH
57764: LD_INT 0
57766: PUSH
57767: LD_INT 0
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 0
57776: PUSH
57777: LD_INT 1
57779: NEG
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 1
57787: PUSH
57788: LD_INT 0
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 1
57797: PUSH
57798: LD_INT 1
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 0
57807: PUSH
57808: LD_INT 1
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 1
57817: NEG
57818: PUSH
57819: LD_INT 0
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 1
57828: NEG
57829: PUSH
57830: LD_INT 1
57832: NEG
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: LD_INT 1
57840: NEG
57841: PUSH
57842: LD_INT 2
57844: NEG
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 1
57852: PUSH
57853: LD_INT 1
57855: NEG
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 2
57863: PUSH
57864: LD_INT 0
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 2
57873: PUSH
57874: LD_INT 1
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 2
57883: PUSH
57884: LD_INT 2
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 1
57893: PUSH
57894: LD_INT 2
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 0
57903: PUSH
57904: LD_INT 2
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 1
57913: NEG
57914: PUSH
57915: LD_INT 1
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 2
57924: NEG
57925: PUSH
57926: LD_INT 1
57928: NEG
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 2
57936: NEG
57937: PUSH
57938: LD_INT 2
57940: NEG
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 2
57948: NEG
57949: PUSH
57950: LD_INT 3
57952: NEG
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 2
57960: PUSH
57961: LD_INT 1
57963: NEG
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 3
57971: PUSH
57972: LD_INT 1
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 1
57981: PUSH
57982: LD_INT 3
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 1
57991: NEG
57992: PUSH
57993: LD_INT 2
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 3
58002: NEG
58003: PUSH
58004: LD_INT 2
58006: NEG
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58037: LD_ADDR_VAR 0 32
58041: PUSH
58042: LD_INT 0
58044: PUSH
58045: LD_INT 0
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 0
58054: PUSH
58055: LD_INT 1
58057: NEG
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 1
58065: PUSH
58066: LD_INT 0
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 1
58075: PUSH
58076: LD_INT 1
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 0
58085: PUSH
58086: LD_INT 1
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 1
58095: NEG
58096: PUSH
58097: LD_INT 0
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 1
58106: NEG
58107: PUSH
58108: LD_INT 1
58110: NEG
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 1
58118: NEG
58119: PUSH
58120: LD_INT 2
58122: NEG
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 0
58130: PUSH
58131: LD_INT 2
58133: NEG
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 1
58141: PUSH
58142: LD_INT 1
58144: NEG
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 2
58152: PUSH
58153: LD_INT 1
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: LD_INT 2
58162: PUSH
58163: LD_INT 2
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 1
58172: PUSH
58173: LD_INT 2
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 0
58182: PUSH
58183: LD_INT 2
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 1
58192: NEG
58193: PUSH
58194: LD_INT 1
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: LD_INT 2
58203: NEG
58204: PUSH
58205: LD_INT 0
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 2
58214: NEG
58215: PUSH
58216: LD_INT 1
58218: NEG
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 1
58226: NEG
58227: PUSH
58228: LD_INT 3
58230: NEG
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 1
58238: PUSH
58239: LD_INT 2
58241: NEG
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 3
58249: PUSH
58250: LD_INT 2
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 2
58259: PUSH
58260: LD_INT 3
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 2
58269: NEG
58270: PUSH
58271: LD_INT 1
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_INT 3
58280: NEG
58281: PUSH
58282: LD_INT 1
58284: NEG
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58315: LD_ADDR_VAR 0 33
58319: PUSH
58320: LD_INT 0
58322: PUSH
58323: LD_INT 0
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 0
58332: PUSH
58333: LD_INT 1
58335: NEG
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 1
58343: PUSH
58344: LD_INT 0
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 1
58353: PUSH
58354: LD_INT 1
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 0
58363: PUSH
58364: LD_INT 1
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 1
58373: NEG
58374: PUSH
58375: LD_INT 0
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 1
58384: NEG
58385: PUSH
58386: LD_INT 1
58388: NEG
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 1
58396: NEG
58397: PUSH
58398: LD_INT 2
58400: NEG
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 1
58408: PUSH
58409: LD_INT 1
58411: NEG
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: LD_INT 2
58419: PUSH
58420: LD_INT 0
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 2
58429: PUSH
58430: LD_INT 1
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 1
58439: PUSH
58440: LD_INT 2
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 0
58449: PUSH
58450: LD_INT 2
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 1
58459: NEG
58460: PUSH
58461: LD_INT 1
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 2
58470: NEG
58471: PUSH
58472: LD_INT 0
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 2
58481: NEG
58482: PUSH
58483: LD_INT 1
58485: NEG
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 2
58493: NEG
58494: PUSH
58495: LD_INT 2
58497: NEG
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 2
58505: NEG
58506: PUSH
58507: LD_INT 3
58509: NEG
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: LD_INT 2
58517: PUSH
58518: LD_INT 1
58520: NEG
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 3
58528: PUSH
58529: LD_INT 1
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 1
58538: PUSH
58539: LD_INT 3
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 1
58548: NEG
58549: PUSH
58550: LD_INT 2
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 3
58559: NEG
58560: PUSH
58561: LD_INT 2
58563: NEG
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58594: LD_ADDR_VAR 0 34
58598: PUSH
58599: LD_INT 0
58601: PUSH
58602: LD_INT 0
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 0
58611: PUSH
58612: LD_INT 1
58614: NEG
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 1
58622: PUSH
58623: LD_INT 0
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 1
58632: PUSH
58633: LD_INT 1
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 0
58642: PUSH
58643: LD_INT 1
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: LD_INT 1
58652: NEG
58653: PUSH
58654: LD_INT 0
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 1
58663: NEG
58664: PUSH
58665: LD_INT 1
58667: NEG
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 1
58675: NEG
58676: PUSH
58677: LD_INT 2
58679: NEG
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 0
58687: PUSH
58688: LD_INT 2
58690: NEG
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 1
58698: PUSH
58699: LD_INT 1
58701: NEG
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 2
58709: PUSH
58710: LD_INT 1
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 2
58719: PUSH
58720: LD_INT 2
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 1
58729: PUSH
58730: LD_INT 2
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 1
58739: NEG
58740: PUSH
58741: LD_INT 1
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 2
58750: NEG
58751: PUSH
58752: LD_INT 0
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 2
58761: NEG
58762: PUSH
58763: LD_INT 1
58765: NEG
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 2
58773: NEG
58774: PUSH
58775: LD_INT 2
58777: NEG
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 1
58785: NEG
58786: PUSH
58787: LD_INT 3
58789: NEG
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: LD_INT 1
58797: PUSH
58798: LD_INT 2
58800: NEG
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 3
58808: PUSH
58809: LD_INT 2
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 2
58818: PUSH
58819: LD_INT 3
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 2
58828: NEG
58829: PUSH
58830: LD_INT 1
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 3
58839: NEG
58840: PUSH
58841: LD_INT 1
58843: NEG
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: LIST
58859: LIST
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58874: LD_ADDR_VAR 0 35
58878: PUSH
58879: LD_INT 0
58881: PUSH
58882: LD_INT 0
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 0
58891: PUSH
58892: LD_INT 1
58894: NEG
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 1
58902: PUSH
58903: LD_INT 0
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: LD_INT 1
58912: PUSH
58913: LD_INT 1
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 0
58922: PUSH
58923: LD_INT 1
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: LD_INT 1
58932: NEG
58933: PUSH
58934: LD_INT 0
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: LD_INT 1
58943: NEG
58944: PUSH
58945: LD_INT 1
58947: NEG
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: LD_INT 2
58955: PUSH
58956: LD_INT 1
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 2
58965: NEG
58966: PUSH
58967: LD_INT 1
58969: NEG
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58986: LD_ADDR_VAR 0 36
58990: PUSH
58991: LD_INT 0
58993: PUSH
58994: LD_INT 0
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 0
59003: PUSH
59004: LD_INT 1
59006: NEG
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 1
59014: PUSH
59015: LD_INT 0
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 1
59024: PUSH
59025: LD_INT 1
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 0
59034: PUSH
59035: LD_INT 1
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 1
59044: NEG
59045: PUSH
59046: LD_INT 0
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 1
59055: NEG
59056: PUSH
59057: LD_INT 1
59059: NEG
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 1
59067: NEG
59068: PUSH
59069: LD_INT 2
59071: NEG
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 1
59079: PUSH
59080: LD_INT 2
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: LIST
59091: LIST
59092: LIST
59093: LIST
59094: LIST
59095: LIST
59096: LIST
59097: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59098: LD_ADDR_VAR 0 37
59102: PUSH
59103: LD_INT 0
59105: PUSH
59106: LD_INT 0
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 0
59115: PUSH
59116: LD_INT 1
59118: NEG
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: LD_INT 1
59126: PUSH
59127: LD_INT 0
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 1
59136: PUSH
59137: LD_INT 1
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 0
59146: PUSH
59147: LD_INT 1
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 1
59156: NEG
59157: PUSH
59158: LD_INT 0
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 1
59167: NEG
59168: PUSH
59169: LD_INT 1
59171: NEG
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 1
59179: PUSH
59180: LD_INT 1
59182: NEG
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 1
59190: NEG
59191: PUSH
59192: LD_INT 1
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59210: LD_ADDR_VAR 0 38
59214: PUSH
59215: LD_INT 0
59217: PUSH
59218: LD_INT 0
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 0
59227: PUSH
59228: LD_INT 1
59230: NEG
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: LD_INT 1
59238: PUSH
59239: LD_INT 0
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 1
59248: PUSH
59249: LD_INT 1
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 0
59258: PUSH
59259: LD_INT 1
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 1
59268: NEG
59269: PUSH
59270: LD_INT 0
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: LD_INT 1
59279: NEG
59280: PUSH
59281: LD_INT 1
59283: NEG
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: PUSH
59289: LD_INT 2
59291: PUSH
59292: LD_INT 1
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 2
59301: NEG
59302: PUSH
59303: LD_INT 1
59305: NEG
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59322: LD_ADDR_VAR 0 39
59326: PUSH
59327: LD_INT 0
59329: PUSH
59330: LD_INT 0
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: LD_INT 0
59339: PUSH
59340: LD_INT 1
59342: NEG
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 1
59350: PUSH
59351: LD_INT 0
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: LD_INT 1
59360: PUSH
59361: LD_INT 1
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: PUSH
59368: LD_INT 0
59370: PUSH
59371: LD_INT 1
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 1
59380: NEG
59381: PUSH
59382: LD_INT 0
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 1
59391: NEG
59392: PUSH
59393: LD_INT 1
59395: NEG
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 1
59403: NEG
59404: PUSH
59405: LD_INT 2
59407: NEG
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 1
59415: PUSH
59416: LD_INT 2
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: LIST
59427: LIST
59428: LIST
59429: LIST
59430: LIST
59431: LIST
59432: LIST
59433: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59434: LD_ADDR_VAR 0 40
59438: PUSH
59439: LD_INT 0
59441: PUSH
59442: LD_INT 0
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 0
59451: PUSH
59452: LD_INT 1
59454: NEG
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 1
59462: PUSH
59463: LD_INT 0
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 1
59472: PUSH
59473: LD_INT 1
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 0
59482: PUSH
59483: LD_INT 1
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 1
59492: NEG
59493: PUSH
59494: LD_INT 0
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 1
59503: NEG
59504: PUSH
59505: LD_INT 1
59507: NEG
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 1
59515: PUSH
59516: LD_INT 1
59518: NEG
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 1
59526: NEG
59527: PUSH
59528: LD_INT 1
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59546: LD_ADDR_VAR 0 41
59550: PUSH
59551: LD_INT 0
59553: PUSH
59554: LD_INT 0
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 0
59563: PUSH
59564: LD_INT 1
59566: NEG
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 1
59574: PUSH
59575: LD_INT 0
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 1
59584: PUSH
59585: LD_INT 1
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 0
59594: PUSH
59595: LD_INT 1
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 1
59604: NEG
59605: PUSH
59606: LD_INT 0
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 1
59615: NEG
59616: PUSH
59617: LD_INT 1
59619: NEG
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 1
59627: NEG
59628: PUSH
59629: LD_INT 2
59631: NEG
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 1
59639: PUSH
59640: LD_INT 1
59642: NEG
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 2
59650: PUSH
59651: LD_INT 0
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: LD_INT 2
59660: PUSH
59661: LD_INT 1
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 2
59670: PUSH
59671: LD_INT 2
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 1
59680: PUSH
59681: LD_INT 2
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 1
59690: NEG
59691: PUSH
59692: LD_INT 1
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 2
59701: NEG
59702: PUSH
59703: LD_INT 0
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 2
59712: NEG
59713: PUSH
59714: LD_INT 1
59716: NEG
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: LD_INT 2
59724: NEG
59725: PUSH
59726: LD_INT 2
59728: NEG
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 2
59736: NEG
59737: PUSH
59738: LD_INT 3
59740: NEG
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 2
59748: PUSH
59749: LD_INT 1
59751: NEG
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 3
59759: PUSH
59760: LD_INT 0
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 3
59769: PUSH
59770: LD_INT 1
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 3
59779: PUSH
59780: LD_INT 2
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 3
59789: PUSH
59790: LD_INT 3
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: LD_INT 2
59799: PUSH
59800: LD_INT 3
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: LD_INT 2
59809: NEG
59810: PUSH
59811: LD_INT 1
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 3
59820: NEG
59821: PUSH
59822: LD_INT 0
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: LD_INT 3
59831: NEG
59832: PUSH
59833: LD_INT 1
59835: NEG
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 3
59843: NEG
59844: PUSH
59845: LD_INT 2
59847: NEG
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 3
59855: NEG
59856: PUSH
59857: LD_INT 3
59859: NEG
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: LIST
59875: LIST
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: LIST
59886: LIST
59887: LIST
59888: LIST
59889: LIST
59890: LIST
59891: LIST
59892: LIST
59893: LIST
59894: LIST
59895: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59896: LD_ADDR_VAR 0 42
59900: PUSH
59901: LD_INT 0
59903: PUSH
59904: LD_INT 0
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 0
59913: PUSH
59914: LD_INT 1
59916: NEG
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: LD_INT 1
59924: PUSH
59925: LD_INT 0
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: LD_INT 1
59934: PUSH
59935: LD_INT 1
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PUSH
59942: LD_INT 0
59944: PUSH
59945: LD_INT 1
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 1
59954: NEG
59955: PUSH
59956: LD_INT 0
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: LD_INT 1
59965: NEG
59966: PUSH
59967: LD_INT 1
59969: NEG
59970: PUSH
59971: EMPTY
59972: LIST
59973: LIST
59974: PUSH
59975: LD_INT 1
59977: NEG
59978: PUSH
59979: LD_INT 2
59981: NEG
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 0
59989: PUSH
59990: LD_INT 2
59992: NEG
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 1
60000: PUSH
60001: LD_INT 1
60003: NEG
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: LD_INT 2
60011: PUSH
60012: LD_INT 1
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 2
60021: PUSH
60022: LD_INT 2
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 1
60031: PUSH
60032: LD_INT 2
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 0
60041: PUSH
60042: LD_INT 2
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 1
60051: NEG
60052: PUSH
60053: LD_INT 1
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 2
60062: NEG
60063: PUSH
60064: LD_INT 1
60066: NEG
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 2
60074: NEG
60075: PUSH
60076: LD_INT 2
60078: NEG
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 2
60086: NEG
60087: PUSH
60088: LD_INT 3
60090: NEG
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 1
60098: NEG
60099: PUSH
60100: LD_INT 3
60102: NEG
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 0
60110: PUSH
60111: LD_INT 3
60113: NEG
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 1
60121: PUSH
60122: LD_INT 2
60124: NEG
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 3
60132: PUSH
60133: LD_INT 2
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 3
60142: PUSH
60143: LD_INT 3
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 2
60152: PUSH
60153: LD_INT 3
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: LD_INT 1
60162: PUSH
60163: LD_INT 3
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: PUSH
60170: LD_INT 0
60172: PUSH
60173: LD_INT 3
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: PUSH
60180: LD_INT 1
60182: NEG
60183: PUSH
60184: LD_INT 2
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: PUSH
60191: LD_INT 3
60193: NEG
60194: PUSH
60195: LD_INT 2
60197: NEG
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 3
60205: NEG
60206: PUSH
60207: LD_INT 3
60209: NEG
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: LIST
60241: LIST
60242: LIST
60243: LIST
60244: LIST
60245: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60246: LD_ADDR_VAR 0 43
60250: PUSH
60251: LD_INT 0
60253: PUSH
60254: LD_INT 0
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 0
60263: PUSH
60264: LD_INT 1
60266: NEG
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 1
60274: PUSH
60275: LD_INT 0
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: LD_INT 1
60284: PUSH
60285: LD_INT 1
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 0
60294: PUSH
60295: LD_INT 1
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 1
60304: NEG
60305: PUSH
60306: LD_INT 0
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 1
60315: NEG
60316: PUSH
60317: LD_INT 1
60319: NEG
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 1
60327: NEG
60328: PUSH
60329: LD_INT 2
60331: NEG
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 0
60339: PUSH
60340: LD_INT 2
60342: NEG
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 1
60350: PUSH
60351: LD_INT 1
60353: NEG
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 2
60361: PUSH
60362: LD_INT 0
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 2
60371: PUSH
60372: LD_INT 1
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 1
60381: PUSH
60382: LD_INT 2
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 0
60391: PUSH
60392: LD_INT 2
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 1
60401: NEG
60402: PUSH
60403: LD_INT 1
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 2
60412: NEG
60413: PUSH
60414: LD_INT 0
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 2
60423: NEG
60424: PUSH
60425: LD_INT 1
60427: NEG
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 1
60435: NEG
60436: PUSH
60437: LD_INT 3
60439: NEG
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: LD_INT 0
60447: PUSH
60448: LD_INT 3
60450: NEG
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: PUSH
60456: LD_INT 1
60458: PUSH
60459: LD_INT 2
60461: NEG
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 2
60469: PUSH
60470: LD_INT 1
60472: NEG
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: LD_INT 3
60480: PUSH
60481: LD_INT 0
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 3
60490: PUSH
60491: LD_INT 1
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 1
60500: PUSH
60501: LD_INT 3
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: LD_INT 0
60510: PUSH
60511: LD_INT 3
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 1
60520: NEG
60521: PUSH
60522: LD_INT 2
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 2
60531: NEG
60532: PUSH
60533: LD_INT 1
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 3
60542: NEG
60543: PUSH
60544: LD_INT 0
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: LD_INT 3
60553: NEG
60554: PUSH
60555: LD_INT 1
60557: NEG
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: LIST
60567: LIST
60568: LIST
60569: LIST
60570: LIST
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60594: LD_ADDR_VAR 0 44
60598: PUSH
60599: LD_INT 0
60601: PUSH
60602: LD_INT 0
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 0
60611: PUSH
60612: LD_INT 1
60614: NEG
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: PUSH
60620: LD_INT 1
60622: PUSH
60623: LD_INT 0
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PUSH
60630: LD_INT 1
60632: PUSH
60633: LD_INT 1
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 0
60642: PUSH
60643: LD_INT 1
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: LD_INT 1
60652: NEG
60653: PUSH
60654: LD_INT 0
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 1
60663: NEG
60664: PUSH
60665: LD_INT 1
60667: NEG
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 1
60675: NEG
60676: PUSH
60677: LD_INT 2
60679: NEG
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 1
60687: PUSH
60688: LD_INT 1
60690: NEG
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 2
60698: PUSH
60699: LD_INT 0
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: LD_INT 2
60708: PUSH
60709: LD_INT 1
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 2
60718: PUSH
60719: LD_INT 2
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: LD_INT 1
60728: PUSH
60729: LD_INT 2
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 1
60738: NEG
60739: PUSH
60740: LD_INT 1
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: LD_INT 2
60749: NEG
60750: PUSH
60751: LD_INT 0
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: PUSH
60758: LD_INT 2
60760: NEG
60761: PUSH
60762: LD_INT 1
60764: NEG
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: LD_INT 2
60772: NEG
60773: PUSH
60774: LD_INT 2
60776: NEG
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 2
60784: NEG
60785: PUSH
60786: LD_INT 3
60788: NEG
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 2
60796: PUSH
60797: LD_INT 1
60799: NEG
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 3
60807: PUSH
60808: LD_INT 0
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 3
60817: PUSH
60818: LD_INT 1
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: PUSH
60825: LD_INT 3
60827: PUSH
60828: LD_INT 2
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: PUSH
60835: LD_INT 3
60837: PUSH
60838: LD_INT 3
60840: PUSH
60841: EMPTY
60842: LIST
60843: LIST
60844: PUSH
60845: LD_INT 2
60847: PUSH
60848: LD_INT 3
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: LD_INT 2
60857: NEG
60858: PUSH
60859: LD_INT 1
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 3
60868: NEG
60869: PUSH
60870: LD_INT 0
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 3
60879: NEG
60880: PUSH
60881: LD_INT 1
60883: NEG
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 3
60891: NEG
60892: PUSH
60893: LD_INT 2
60895: NEG
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 3
60903: NEG
60904: PUSH
60905: LD_INT 3
60907: NEG
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: LIST
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60944: LD_ADDR_VAR 0 45
60948: PUSH
60949: LD_INT 0
60951: PUSH
60952: LD_INT 0
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: LD_INT 0
60961: PUSH
60962: LD_INT 1
60964: NEG
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 1
60972: PUSH
60973: LD_INT 0
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 1
60982: PUSH
60983: LD_INT 1
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 0
60992: PUSH
60993: LD_INT 1
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 1
61002: NEG
61003: PUSH
61004: LD_INT 0
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 1
61013: NEG
61014: PUSH
61015: LD_INT 1
61017: NEG
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: PUSH
61023: LD_INT 1
61025: NEG
61026: PUSH
61027: LD_INT 2
61029: NEG
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 0
61037: PUSH
61038: LD_INT 2
61040: NEG
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: LD_INT 1
61048: PUSH
61049: LD_INT 1
61051: NEG
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 2
61059: PUSH
61060: LD_INT 1
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 2
61069: PUSH
61070: LD_INT 2
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: LD_INT 1
61079: PUSH
61080: LD_INT 2
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: LD_INT 0
61089: PUSH
61090: LD_INT 2
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 1
61099: NEG
61100: PUSH
61101: LD_INT 1
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 2
61110: NEG
61111: PUSH
61112: LD_INT 1
61114: NEG
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: PUSH
61120: LD_INT 2
61122: NEG
61123: PUSH
61124: LD_INT 2
61126: NEG
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PUSH
61132: LD_INT 2
61134: NEG
61135: PUSH
61136: LD_INT 3
61138: NEG
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 1
61146: NEG
61147: PUSH
61148: LD_INT 3
61150: NEG
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 0
61158: PUSH
61159: LD_INT 3
61161: NEG
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 1
61169: PUSH
61170: LD_INT 2
61172: NEG
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: PUSH
61178: LD_INT 3
61180: PUSH
61181: LD_INT 2
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: LD_INT 3
61190: PUSH
61191: LD_INT 3
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 2
61200: PUSH
61201: LD_INT 3
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: PUSH
61208: LD_INT 1
61210: PUSH
61211: LD_INT 3
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: PUSH
61218: LD_INT 0
61220: PUSH
61221: LD_INT 3
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: LD_INT 1
61230: NEG
61231: PUSH
61232: LD_INT 2
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_INT 3
61241: NEG
61242: PUSH
61243: LD_INT 2
61245: NEG
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 3
61253: NEG
61254: PUSH
61255: LD_INT 3
61257: NEG
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61294: LD_ADDR_VAR 0 46
61298: PUSH
61299: LD_INT 0
61301: PUSH
61302: LD_INT 0
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: PUSH
61309: LD_INT 0
61311: PUSH
61312: LD_INT 1
61314: NEG
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: PUSH
61320: LD_INT 1
61322: PUSH
61323: LD_INT 0
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 1
61332: PUSH
61333: LD_INT 1
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: PUSH
61340: LD_INT 0
61342: PUSH
61343: LD_INT 1
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: PUSH
61350: LD_INT 1
61352: NEG
61353: PUSH
61354: LD_INT 0
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 1
61363: NEG
61364: PUSH
61365: LD_INT 1
61367: NEG
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: PUSH
61373: LD_INT 1
61375: NEG
61376: PUSH
61377: LD_INT 2
61379: NEG
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 0
61387: PUSH
61388: LD_INT 2
61390: NEG
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 1
61398: PUSH
61399: LD_INT 1
61401: NEG
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: PUSH
61407: LD_INT 2
61409: PUSH
61410: LD_INT 0
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: LD_INT 2
61419: PUSH
61420: LD_INT 1
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: PUSH
61427: LD_INT 1
61429: PUSH
61430: LD_INT 2
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: PUSH
61437: LD_INT 0
61439: PUSH
61440: LD_INT 2
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 1
61449: NEG
61450: PUSH
61451: LD_INT 1
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: PUSH
61458: LD_INT 2
61460: NEG
61461: PUSH
61462: LD_INT 0
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: PUSH
61469: LD_INT 2
61471: NEG
61472: PUSH
61473: LD_INT 1
61475: NEG
61476: PUSH
61477: EMPTY
61478: LIST
61479: LIST
61480: PUSH
61481: LD_INT 1
61483: NEG
61484: PUSH
61485: LD_INT 3
61487: NEG
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 0
61495: PUSH
61496: LD_INT 3
61498: NEG
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 1
61506: PUSH
61507: LD_INT 2
61509: NEG
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 2
61517: PUSH
61518: LD_INT 1
61520: NEG
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: LD_INT 3
61528: PUSH
61529: LD_INT 0
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 3
61538: PUSH
61539: LD_INT 1
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 1
61548: PUSH
61549: LD_INT 3
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: LD_INT 0
61558: PUSH
61559: LD_INT 3
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_INT 1
61568: NEG
61569: PUSH
61570: LD_INT 2
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 2
61579: NEG
61580: PUSH
61581: LD_INT 1
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 3
61590: NEG
61591: PUSH
61592: LD_INT 0
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: LD_INT 3
61601: NEG
61602: PUSH
61603: LD_INT 1
61605: NEG
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: LIST
61615: LIST
61616: LIST
61617: LIST
61618: LIST
61619: LIST
61620: LIST
61621: LIST
61622: LIST
61623: LIST
61624: LIST
61625: LIST
61626: LIST
61627: LIST
61628: LIST
61629: LIST
61630: LIST
61631: LIST
61632: LIST
61633: LIST
61634: LIST
61635: LIST
61636: LIST
61637: LIST
61638: LIST
61639: LIST
61640: LIST
61641: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61642: LD_ADDR_VAR 0 47
61646: PUSH
61647: LD_INT 0
61649: PUSH
61650: LD_INT 0
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: LD_INT 0
61659: PUSH
61660: LD_INT 1
61662: NEG
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: LD_INT 1
61670: PUSH
61671: LD_INT 0
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: PUSH
61678: LD_INT 1
61680: PUSH
61681: LD_INT 1
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: LD_INT 0
61690: PUSH
61691: LD_INT 1
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: LD_INT 1
61700: NEG
61701: PUSH
61702: LD_INT 0
61704: PUSH
61705: EMPTY
61706: LIST
61707: LIST
61708: PUSH
61709: LD_INT 1
61711: NEG
61712: PUSH
61713: LD_INT 1
61715: NEG
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 1
61723: NEG
61724: PUSH
61725: LD_INT 2
61727: NEG
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: LD_INT 0
61735: PUSH
61736: LD_INT 2
61738: NEG
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 1
61746: PUSH
61747: LD_INT 1
61749: NEG
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: LD_INT 2
61757: NEG
61758: PUSH
61759: LD_INT 1
61761: NEG
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 2
61769: NEG
61770: PUSH
61771: LD_INT 2
61773: NEG
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61793: LD_ADDR_VAR 0 48
61797: PUSH
61798: LD_INT 0
61800: PUSH
61801: LD_INT 0
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 0
61810: PUSH
61811: LD_INT 1
61813: NEG
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 1
61821: PUSH
61822: LD_INT 0
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: PUSH
61829: LD_INT 1
61831: PUSH
61832: LD_INT 1
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: LD_INT 0
61841: PUSH
61842: LD_INT 1
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: PUSH
61849: LD_INT 1
61851: NEG
61852: PUSH
61853: LD_INT 0
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PUSH
61860: LD_INT 1
61862: NEG
61863: PUSH
61864: LD_INT 1
61866: NEG
61867: PUSH
61868: EMPTY
61869: LIST
61870: LIST
61871: PUSH
61872: LD_INT 1
61874: NEG
61875: PUSH
61876: LD_INT 2
61878: NEG
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 0
61886: PUSH
61887: LD_INT 2
61889: NEG
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: PUSH
61895: LD_INT 1
61897: PUSH
61898: LD_INT 1
61900: NEG
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PUSH
61906: LD_INT 2
61908: PUSH
61909: LD_INT 0
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 2
61918: PUSH
61919: LD_INT 1
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61940: LD_ADDR_VAR 0 49
61944: PUSH
61945: LD_INT 0
61947: PUSH
61948: LD_INT 0
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: LD_INT 0
61957: PUSH
61958: LD_INT 1
61960: NEG
61961: PUSH
61962: EMPTY
61963: LIST
61964: LIST
61965: PUSH
61966: LD_INT 1
61968: PUSH
61969: LD_INT 0
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: PUSH
61976: LD_INT 1
61978: PUSH
61979: LD_INT 1
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: PUSH
61986: LD_INT 0
61988: PUSH
61989: LD_INT 1
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: PUSH
61996: LD_INT 1
61998: NEG
61999: PUSH
62000: LD_INT 0
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: LD_INT 1
62009: NEG
62010: PUSH
62011: LD_INT 1
62013: NEG
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 1
62021: PUSH
62022: LD_INT 1
62024: NEG
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: PUSH
62030: LD_INT 2
62032: PUSH
62033: LD_INT 0
62035: PUSH
62036: EMPTY
62037: LIST
62038: LIST
62039: PUSH
62040: LD_INT 2
62042: PUSH
62043: LD_INT 1
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: PUSH
62050: LD_INT 2
62052: PUSH
62053: LD_INT 2
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: PUSH
62060: LD_INT 1
62062: PUSH
62063: LD_INT 2
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: LIST
62074: LIST
62075: LIST
62076: LIST
62077: LIST
62078: LIST
62079: LIST
62080: LIST
62081: LIST
62082: LIST
62083: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62084: LD_ADDR_VAR 0 50
62088: PUSH
62089: LD_INT 0
62091: PUSH
62092: LD_INT 0
62094: PUSH
62095: EMPTY
62096: LIST
62097: LIST
62098: PUSH
62099: LD_INT 0
62101: PUSH
62102: LD_INT 1
62104: NEG
62105: PUSH
62106: EMPTY
62107: LIST
62108: LIST
62109: PUSH
62110: LD_INT 1
62112: PUSH
62113: LD_INT 0
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: PUSH
62120: LD_INT 1
62122: PUSH
62123: LD_INT 1
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: PUSH
62130: LD_INT 0
62132: PUSH
62133: LD_INT 1
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 1
62142: NEG
62143: PUSH
62144: LD_INT 0
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 1
62153: NEG
62154: PUSH
62155: LD_INT 1
62157: NEG
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: LD_INT 2
62165: PUSH
62166: LD_INT 1
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 2
62175: PUSH
62176: LD_INT 2
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 1
62185: PUSH
62186: LD_INT 2
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: LD_INT 0
62195: PUSH
62196: LD_INT 2
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 1
62205: NEG
62206: PUSH
62207: LD_INT 1
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: PUSH
62214: EMPTY
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62228: LD_ADDR_VAR 0 51
62232: PUSH
62233: LD_INT 0
62235: PUSH
62236: LD_INT 0
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 0
62245: PUSH
62246: LD_INT 1
62248: NEG
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: LD_INT 1
62256: PUSH
62257: LD_INT 0
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: PUSH
62264: LD_INT 1
62266: PUSH
62267: LD_INT 1
62269: PUSH
62270: EMPTY
62271: LIST
62272: LIST
62273: PUSH
62274: LD_INT 0
62276: PUSH
62277: LD_INT 1
62279: PUSH
62280: EMPTY
62281: LIST
62282: LIST
62283: PUSH
62284: LD_INT 1
62286: NEG
62287: PUSH
62288: LD_INT 0
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: PUSH
62295: LD_INT 1
62297: NEG
62298: PUSH
62299: LD_INT 1
62301: NEG
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: PUSH
62307: LD_INT 1
62309: PUSH
62310: LD_INT 2
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: PUSH
62317: LD_INT 0
62319: PUSH
62320: LD_INT 2
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: PUSH
62327: LD_INT 1
62329: NEG
62330: PUSH
62331: LD_INT 1
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: PUSH
62338: LD_INT 2
62340: NEG
62341: PUSH
62342: LD_INT 0
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: LD_INT 2
62351: NEG
62352: PUSH
62353: LD_INT 1
62355: NEG
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: LIST
62365: LIST
62366: LIST
62367: LIST
62368: LIST
62369: LIST
62370: LIST
62371: LIST
62372: LIST
62373: LIST
62374: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62375: LD_ADDR_VAR 0 52
62379: PUSH
62380: LD_INT 0
62382: PUSH
62383: LD_INT 0
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PUSH
62390: LD_INT 0
62392: PUSH
62393: LD_INT 1
62395: NEG
62396: PUSH
62397: EMPTY
62398: LIST
62399: LIST
62400: PUSH
62401: LD_INT 1
62403: PUSH
62404: LD_INT 0
62406: PUSH
62407: EMPTY
62408: LIST
62409: LIST
62410: PUSH
62411: LD_INT 1
62413: PUSH
62414: LD_INT 1
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: PUSH
62421: LD_INT 0
62423: PUSH
62424: LD_INT 1
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: PUSH
62431: LD_INT 1
62433: NEG
62434: PUSH
62435: LD_INT 0
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: PUSH
62442: LD_INT 1
62444: NEG
62445: PUSH
62446: LD_INT 1
62448: NEG
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: PUSH
62454: LD_INT 1
62456: NEG
62457: PUSH
62458: LD_INT 2
62460: NEG
62461: PUSH
62462: EMPTY
62463: LIST
62464: LIST
62465: PUSH
62466: LD_INT 1
62468: NEG
62469: PUSH
62470: LD_INT 1
62472: PUSH
62473: EMPTY
62474: LIST
62475: LIST
62476: PUSH
62477: LD_INT 2
62479: NEG
62480: PUSH
62481: LD_INT 0
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: LD_INT 2
62490: NEG
62491: PUSH
62492: LD_INT 1
62494: NEG
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: PUSH
62500: LD_INT 2
62502: NEG
62503: PUSH
62504: LD_INT 2
62506: NEG
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: LIST
62516: LIST
62517: LIST
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: LIST
62523: LIST
62524: LIST
62525: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62526: LD_ADDR_VAR 0 53
62530: PUSH
62531: LD_INT 0
62533: PUSH
62534: LD_INT 0
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: PUSH
62541: LD_INT 0
62543: PUSH
62544: LD_INT 1
62546: NEG
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 1
62554: PUSH
62555: LD_INT 0
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: PUSH
62562: LD_INT 1
62564: PUSH
62565: LD_INT 1
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: LD_INT 0
62574: PUSH
62575: LD_INT 1
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: PUSH
62582: LD_INT 1
62584: NEG
62585: PUSH
62586: LD_INT 0
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_INT 1
62595: NEG
62596: PUSH
62597: LD_INT 1
62599: NEG
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: PUSH
62605: LD_INT 1
62607: NEG
62608: PUSH
62609: LD_INT 2
62611: NEG
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: LD_INT 0
62619: PUSH
62620: LD_INT 2
62622: NEG
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PUSH
62628: LD_INT 1
62630: PUSH
62631: LD_INT 1
62633: NEG
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: LD_INT 2
62641: PUSH
62642: LD_INT 0
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: PUSH
62649: LD_INT 2
62651: PUSH
62652: LD_INT 1
62654: PUSH
62655: EMPTY
62656: LIST
62657: LIST
62658: PUSH
62659: LD_INT 2
62661: PUSH
62662: LD_INT 2
62664: PUSH
62665: EMPTY
62666: LIST
62667: LIST
62668: PUSH
62669: LD_INT 1
62671: PUSH
62672: LD_INT 2
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PUSH
62679: LD_INT 0
62681: PUSH
62682: LD_INT 2
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: PUSH
62689: LD_INT 1
62691: NEG
62692: PUSH
62693: LD_INT 1
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: LD_INT 2
62702: NEG
62703: PUSH
62704: LD_INT 0
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 2
62713: NEG
62714: PUSH
62715: LD_INT 1
62717: NEG
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: LD_INT 2
62725: NEG
62726: PUSH
62727: LD_INT 2
62729: NEG
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: LIST
62739: LIST
62740: LIST
62741: LIST
62742: LIST
62743: LIST
62744: LIST
62745: LIST
62746: LIST
62747: LIST
62748: LIST
62749: LIST
62750: LIST
62751: LIST
62752: LIST
62753: LIST
62754: LIST
62755: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62756: LD_ADDR_VAR 0 54
62760: PUSH
62761: LD_INT 0
62763: PUSH
62764: LD_INT 0
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: LD_INT 0
62773: PUSH
62774: LD_INT 1
62776: NEG
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: PUSH
62782: LD_INT 1
62784: PUSH
62785: LD_INT 0
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: PUSH
62792: LD_INT 1
62794: PUSH
62795: LD_INT 1
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: LD_INT 0
62804: PUSH
62805: LD_INT 1
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: PUSH
62812: LD_INT 1
62814: NEG
62815: PUSH
62816: LD_INT 0
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: PUSH
62823: LD_INT 1
62825: NEG
62826: PUSH
62827: LD_INT 1
62829: NEG
62830: PUSH
62831: EMPTY
62832: LIST
62833: LIST
62834: PUSH
62835: LD_INT 1
62837: NEG
62838: PUSH
62839: LD_INT 2
62841: NEG
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: PUSH
62847: LD_INT 0
62849: PUSH
62850: LD_INT 2
62852: NEG
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: LD_INT 1
62860: PUSH
62861: LD_INT 1
62863: NEG
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: LD_INT 2
62871: PUSH
62872: LD_INT 0
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: LD_INT 2
62881: PUSH
62882: LD_INT 1
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: PUSH
62889: LD_INT 2
62891: PUSH
62892: LD_INT 2
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: LD_INT 1
62901: PUSH
62902: LD_INT 2
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PUSH
62909: LD_INT 0
62911: PUSH
62912: LD_INT 2
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: PUSH
62919: LD_INT 1
62921: NEG
62922: PUSH
62923: LD_INT 1
62925: PUSH
62926: EMPTY
62927: LIST
62928: LIST
62929: PUSH
62930: LD_INT 2
62932: NEG
62933: PUSH
62934: LD_INT 0
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 2
62943: NEG
62944: PUSH
62945: LD_INT 1
62947: NEG
62948: PUSH
62949: EMPTY
62950: LIST
62951: LIST
62952: PUSH
62953: LD_INT 2
62955: NEG
62956: PUSH
62957: LD_INT 2
62959: NEG
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: LIST
62969: LIST
62970: LIST
62971: LIST
62972: LIST
62973: LIST
62974: LIST
62975: LIST
62976: LIST
62977: LIST
62978: LIST
62979: LIST
62980: LIST
62981: LIST
62982: LIST
62983: LIST
62984: LIST
62985: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62986: LD_ADDR_VAR 0 55
62990: PUSH
62991: LD_INT 0
62993: PUSH
62994: LD_INT 0
62996: PUSH
62997: EMPTY
62998: LIST
62999: LIST
63000: PUSH
63001: LD_INT 0
63003: PUSH
63004: LD_INT 1
63006: NEG
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: PUSH
63012: LD_INT 1
63014: PUSH
63015: LD_INT 0
63017: PUSH
63018: EMPTY
63019: LIST
63020: LIST
63021: PUSH
63022: LD_INT 1
63024: PUSH
63025: LD_INT 1
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: PUSH
63032: LD_INT 0
63034: PUSH
63035: LD_INT 1
63037: PUSH
63038: EMPTY
63039: LIST
63040: LIST
63041: PUSH
63042: LD_INT 1
63044: NEG
63045: PUSH
63046: LD_INT 0
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: PUSH
63053: LD_INT 1
63055: NEG
63056: PUSH
63057: LD_INT 1
63059: NEG
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: LD_INT 1
63067: NEG
63068: PUSH
63069: LD_INT 2
63071: NEG
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: PUSH
63077: LD_INT 0
63079: PUSH
63080: LD_INT 2
63082: NEG
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: LD_INT 1
63090: PUSH
63091: LD_INT 1
63093: NEG
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: LD_INT 2
63101: PUSH
63102: LD_INT 0
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: LD_INT 2
63111: PUSH
63112: LD_INT 1
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: PUSH
63119: LD_INT 2
63121: PUSH
63122: LD_INT 2
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: PUSH
63129: LD_INT 1
63131: PUSH
63132: LD_INT 2
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: PUSH
63139: LD_INT 0
63141: PUSH
63142: LD_INT 2
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: PUSH
63149: LD_INT 1
63151: NEG
63152: PUSH
63153: LD_INT 1
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: LD_INT 2
63162: NEG
63163: PUSH
63164: LD_INT 0
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 2
63173: NEG
63174: PUSH
63175: LD_INT 1
63177: NEG
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: LD_INT 2
63185: NEG
63186: PUSH
63187: LD_INT 2
63189: NEG
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: LIST
63199: LIST
63200: LIST
63201: LIST
63202: LIST
63203: LIST
63204: LIST
63205: LIST
63206: LIST
63207: LIST
63208: LIST
63209: LIST
63210: LIST
63211: LIST
63212: LIST
63213: LIST
63214: LIST
63215: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63216: LD_ADDR_VAR 0 56
63220: PUSH
63221: LD_INT 0
63223: PUSH
63224: LD_INT 0
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_INT 0
63233: PUSH
63234: LD_INT 1
63236: NEG
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: PUSH
63242: LD_INT 1
63244: PUSH
63245: LD_INT 0
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: LD_INT 1
63254: PUSH
63255: LD_INT 1
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: PUSH
63262: LD_INT 0
63264: PUSH
63265: LD_INT 1
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: PUSH
63272: LD_INT 1
63274: NEG
63275: PUSH
63276: LD_INT 0
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: PUSH
63283: LD_INT 1
63285: NEG
63286: PUSH
63287: LD_INT 1
63289: NEG
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 1
63297: NEG
63298: PUSH
63299: LD_INT 2
63301: NEG
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: PUSH
63307: LD_INT 0
63309: PUSH
63310: LD_INT 2
63312: NEG
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PUSH
63318: LD_INT 1
63320: PUSH
63321: LD_INT 1
63323: NEG
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: PUSH
63329: LD_INT 2
63331: PUSH
63332: LD_INT 0
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: PUSH
63339: LD_INT 2
63341: PUSH
63342: LD_INT 1
63344: PUSH
63345: EMPTY
63346: LIST
63347: LIST
63348: PUSH
63349: LD_INT 2
63351: PUSH
63352: LD_INT 2
63354: PUSH
63355: EMPTY
63356: LIST
63357: LIST
63358: PUSH
63359: LD_INT 1
63361: PUSH
63362: LD_INT 2
63364: PUSH
63365: EMPTY
63366: LIST
63367: LIST
63368: PUSH
63369: LD_INT 0
63371: PUSH
63372: LD_INT 2
63374: PUSH
63375: EMPTY
63376: LIST
63377: LIST
63378: PUSH
63379: LD_INT 1
63381: NEG
63382: PUSH
63383: LD_INT 1
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: LD_INT 2
63392: NEG
63393: PUSH
63394: LD_INT 0
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: PUSH
63401: LD_INT 2
63403: NEG
63404: PUSH
63405: LD_INT 1
63407: NEG
63408: PUSH
63409: EMPTY
63410: LIST
63411: LIST
63412: PUSH
63413: LD_INT 2
63415: NEG
63416: PUSH
63417: LD_INT 2
63419: NEG
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: EMPTY
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: LIST
63431: LIST
63432: LIST
63433: LIST
63434: LIST
63435: LIST
63436: LIST
63437: LIST
63438: LIST
63439: LIST
63440: LIST
63441: LIST
63442: LIST
63443: LIST
63444: LIST
63445: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63446: LD_ADDR_VAR 0 57
63450: PUSH
63451: LD_INT 0
63453: PUSH
63454: LD_INT 0
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: PUSH
63461: LD_INT 0
63463: PUSH
63464: LD_INT 1
63466: NEG
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: PUSH
63472: LD_INT 1
63474: PUSH
63475: LD_INT 0
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: PUSH
63482: LD_INT 1
63484: PUSH
63485: LD_INT 1
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: PUSH
63492: LD_INT 0
63494: PUSH
63495: LD_INT 1
63497: PUSH
63498: EMPTY
63499: LIST
63500: LIST
63501: PUSH
63502: LD_INT 1
63504: NEG
63505: PUSH
63506: LD_INT 0
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: PUSH
63513: LD_INT 1
63515: NEG
63516: PUSH
63517: LD_INT 1
63519: NEG
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: PUSH
63525: LD_INT 1
63527: NEG
63528: PUSH
63529: LD_INT 2
63531: NEG
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: PUSH
63537: LD_INT 0
63539: PUSH
63540: LD_INT 2
63542: NEG
63543: PUSH
63544: EMPTY
63545: LIST
63546: LIST
63547: PUSH
63548: LD_INT 1
63550: PUSH
63551: LD_INT 1
63553: NEG
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PUSH
63559: LD_INT 2
63561: PUSH
63562: LD_INT 0
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: PUSH
63569: LD_INT 2
63571: PUSH
63572: LD_INT 1
63574: PUSH
63575: EMPTY
63576: LIST
63577: LIST
63578: PUSH
63579: LD_INT 2
63581: PUSH
63582: LD_INT 2
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: PUSH
63589: LD_INT 1
63591: PUSH
63592: LD_INT 2
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PUSH
63599: LD_INT 0
63601: PUSH
63602: LD_INT 2
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: PUSH
63609: LD_INT 1
63611: NEG
63612: PUSH
63613: LD_INT 1
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: PUSH
63620: LD_INT 2
63622: NEG
63623: PUSH
63624: LD_INT 0
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: LD_INT 2
63633: NEG
63634: PUSH
63635: LD_INT 1
63637: NEG
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: PUSH
63643: LD_INT 2
63645: NEG
63646: PUSH
63647: LD_INT 2
63649: NEG
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: EMPTY
63656: LIST
63657: LIST
63658: LIST
63659: LIST
63660: LIST
63661: LIST
63662: LIST
63663: LIST
63664: LIST
63665: LIST
63666: LIST
63667: LIST
63668: LIST
63669: LIST
63670: LIST
63671: LIST
63672: LIST
63673: LIST
63674: LIST
63675: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63676: LD_ADDR_VAR 0 58
63680: PUSH
63681: LD_INT 0
63683: PUSH
63684: LD_INT 0
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: PUSH
63691: LD_INT 0
63693: PUSH
63694: LD_INT 1
63696: NEG
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: LD_INT 1
63704: PUSH
63705: LD_INT 0
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: LD_INT 1
63714: PUSH
63715: LD_INT 1
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: LD_INT 0
63724: PUSH
63725: LD_INT 1
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: PUSH
63732: LD_INT 1
63734: NEG
63735: PUSH
63736: LD_INT 0
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: PUSH
63743: LD_INT 1
63745: NEG
63746: PUSH
63747: LD_INT 1
63749: NEG
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: PUSH
63755: LD_INT 1
63757: NEG
63758: PUSH
63759: LD_INT 2
63761: NEG
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: PUSH
63767: LD_INT 0
63769: PUSH
63770: LD_INT 2
63772: NEG
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: PUSH
63778: LD_INT 1
63780: PUSH
63781: LD_INT 1
63783: NEG
63784: PUSH
63785: EMPTY
63786: LIST
63787: LIST
63788: PUSH
63789: LD_INT 2
63791: PUSH
63792: LD_INT 0
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: PUSH
63799: LD_INT 2
63801: PUSH
63802: LD_INT 1
63804: PUSH
63805: EMPTY
63806: LIST
63807: LIST
63808: PUSH
63809: LD_INT 2
63811: PUSH
63812: LD_INT 2
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: PUSH
63819: LD_INT 1
63821: PUSH
63822: LD_INT 2
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: PUSH
63829: LD_INT 0
63831: PUSH
63832: LD_INT 2
63834: PUSH
63835: EMPTY
63836: LIST
63837: LIST
63838: PUSH
63839: LD_INT 1
63841: NEG
63842: PUSH
63843: LD_INT 1
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: PUSH
63850: LD_INT 2
63852: NEG
63853: PUSH
63854: LD_INT 0
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: PUSH
63861: LD_INT 2
63863: NEG
63864: PUSH
63865: LD_INT 1
63867: NEG
63868: PUSH
63869: EMPTY
63870: LIST
63871: LIST
63872: PUSH
63873: LD_INT 2
63875: NEG
63876: PUSH
63877: LD_INT 2
63879: NEG
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: LIST
63889: LIST
63890: LIST
63891: LIST
63892: LIST
63893: LIST
63894: LIST
63895: LIST
63896: LIST
63897: LIST
63898: LIST
63899: LIST
63900: LIST
63901: LIST
63902: LIST
63903: LIST
63904: LIST
63905: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63906: LD_ADDR_VAR 0 59
63910: PUSH
63911: LD_INT 0
63913: PUSH
63914: LD_INT 0
63916: PUSH
63917: EMPTY
63918: LIST
63919: LIST
63920: PUSH
63921: LD_INT 0
63923: PUSH
63924: LD_INT 1
63926: NEG
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: PUSH
63932: LD_INT 1
63934: PUSH
63935: LD_INT 0
63937: PUSH
63938: EMPTY
63939: LIST
63940: LIST
63941: PUSH
63942: LD_INT 1
63944: PUSH
63945: LD_INT 1
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: PUSH
63952: LD_INT 0
63954: PUSH
63955: LD_INT 1
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: PUSH
63962: LD_INT 1
63964: NEG
63965: PUSH
63966: LD_INT 0
63968: PUSH
63969: EMPTY
63970: LIST
63971: LIST
63972: PUSH
63973: LD_INT 1
63975: NEG
63976: PUSH
63977: LD_INT 1
63979: NEG
63980: PUSH
63981: EMPTY
63982: LIST
63983: LIST
63984: PUSH
63985: EMPTY
63986: LIST
63987: LIST
63988: LIST
63989: LIST
63990: LIST
63991: LIST
63992: LIST
63993: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63994: LD_ADDR_VAR 0 60
63998: PUSH
63999: LD_INT 0
64001: PUSH
64002: LD_INT 0
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: LD_INT 0
64011: PUSH
64012: LD_INT 1
64014: NEG
64015: PUSH
64016: EMPTY
64017: LIST
64018: LIST
64019: PUSH
64020: LD_INT 1
64022: PUSH
64023: LD_INT 0
64025: PUSH
64026: EMPTY
64027: LIST
64028: LIST
64029: PUSH
64030: LD_INT 1
64032: PUSH
64033: LD_INT 1
64035: PUSH
64036: EMPTY
64037: LIST
64038: LIST
64039: PUSH
64040: LD_INT 0
64042: PUSH
64043: LD_INT 1
64045: PUSH
64046: EMPTY
64047: LIST
64048: LIST
64049: PUSH
64050: LD_INT 1
64052: NEG
64053: PUSH
64054: LD_INT 0
64056: PUSH
64057: EMPTY
64058: LIST
64059: LIST
64060: PUSH
64061: LD_INT 1
64063: NEG
64064: PUSH
64065: LD_INT 1
64067: NEG
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: LIST
64077: LIST
64078: LIST
64079: LIST
64080: LIST
64081: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64082: LD_ADDR_VAR 0 61
64086: PUSH
64087: LD_INT 0
64089: PUSH
64090: LD_INT 0
64092: PUSH
64093: EMPTY
64094: LIST
64095: LIST
64096: PUSH
64097: LD_INT 0
64099: PUSH
64100: LD_INT 1
64102: NEG
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: LD_INT 1
64110: PUSH
64111: LD_INT 0
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PUSH
64118: LD_INT 1
64120: PUSH
64121: LD_INT 1
64123: PUSH
64124: EMPTY
64125: LIST
64126: LIST
64127: PUSH
64128: LD_INT 0
64130: PUSH
64131: LD_INT 1
64133: PUSH
64134: EMPTY
64135: LIST
64136: LIST
64137: PUSH
64138: LD_INT 1
64140: NEG
64141: PUSH
64142: LD_INT 0
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: PUSH
64149: LD_INT 1
64151: NEG
64152: PUSH
64153: LD_INT 1
64155: NEG
64156: PUSH
64157: EMPTY
64158: LIST
64159: LIST
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: LIST
64165: LIST
64166: LIST
64167: LIST
64168: LIST
64169: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64170: LD_ADDR_VAR 0 62
64174: PUSH
64175: LD_INT 0
64177: PUSH
64178: LD_INT 0
64180: PUSH
64181: EMPTY
64182: LIST
64183: LIST
64184: PUSH
64185: LD_INT 0
64187: PUSH
64188: LD_INT 1
64190: NEG
64191: PUSH
64192: EMPTY
64193: LIST
64194: LIST
64195: PUSH
64196: LD_INT 1
64198: PUSH
64199: LD_INT 0
64201: PUSH
64202: EMPTY
64203: LIST
64204: LIST
64205: PUSH
64206: LD_INT 1
64208: PUSH
64209: LD_INT 1
64211: PUSH
64212: EMPTY
64213: LIST
64214: LIST
64215: PUSH
64216: LD_INT 0
64218: PUSH
64219: LD_INT 1
64221: PUSH
64222: EMPTY
64223: LIST
64224: LIST
64225: PUSH
64226: LD_INT 1
64228: NEG
64229: PUSH
64230: LD_INT 0
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: PUSH
64237: LD_INT 1
64239: NEG
64240: PUSH
64241: LD_INT 1
64243: NEG
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: PUSH
64249: EMPTY
64250: LIST
64251: LIST
64252: LIST
64253: LIST
64254: LIST
64255: LIST
64256: LIST
64257: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64258: LD_ADDR_VAR 0 63
64262: PUSH
64263: LD_INT 0
64265: PUSH
64266: LD_INT 0
64268: PUSH
64269: EMPTY
64270: LIST
64271: LIST
64272: PUSH
64273: LD_INT 0
64275: PUSH
64276: LD_INT 1
64278: NEG
64279: PUSH
64280: EMPTY
64281: LIST
64282: LIST
64283: PUSH
64284: LD_INT 1
64286: PUSH
64287: LD_INT 0
64289: PUSH
64290: EMPTY
64291: LIST
64292: LIST
64293: PUSH
64294: LD_INT 1
64296: PUSH
64297: LD_INT 1
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: PUSH
64304: LD_INT 0
64306: PUSH
64307: LD_INT 1
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PUSH
64314: LD_INT 1
64316: NEG
64317: PUSH
64318: LD_INT 0
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: PUSH
64325: LD_INT 1
64327: NEG
64328: PUSH
64329: LD_INT 1
64331: NEG
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: PUSH
64337: EMPTY
64338: LIST
64339: LIST
64340: LIST
64341: LIST
64342: LIST
64343: LIST
64344: LIST
64345: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64346: LD_ADDR_VAR 0 64
64350: PUSH
64351: LD_INT 0
64353: PUSH
64354: LD_INT 0
64356: PUSH
64357: EMPTY
64358: LIST
64359: LIST
64360: PUSH
64361: LD_INT 0
64363: PUSH
64364: LD_INT 1
64366: NEG
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: PUSH
64372: LD_INT 1
64374: PUSH
64375: LD_INT 0
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: PUSH
64382: LD_INT 1
64384: PUSH
64385: LD_INT 1
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: PUSH
64392: LD_INT 0
64394: PUSH
64395: LD_INT 1
64397: PUSH
64398: EMPTY
64399: LIST
64400: LIST
64401: PUSH
64402: LD_INT 1
64404: NEG
64405: PUSH
64406: LD_INT 0
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: PUSH
64413: LD_INT 1
64415: NEG
64416: PUSH
64417: LD_INT 1
64419: NEG
64420: PUSH
64421: EMPTY
64422: LIST
64423: LIST
64424: PUSH
64425: EMPTY
64426: LIST
64427: LIST
64428: LIST
64429: LIST
64430: LIST
64431: LIST
64432: LIST
64433: ST_TO_ADDR
// end ; 1 :
64434: GO 70331
64436: LD_INT 1
64438: DOUBLE
64439: EQUAL
64440: IFTRUE 64444
64442: GO 67067
64444: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64445: LD_ADDR_VAR 0 11
64449: PUSH
64450: LD_INT 1
64452: NEG
64453: PUSH
64454: LD_INT 3
64456: NEG
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: PUSH
64462: LD_INT 0
64464: PUSH
64465: LD_INT 3
64467: NEG
64468: PUSH
64469: EMPTY
64470: LIST
64471: LIST
64472: PUSH
64473: LD_INT 1
64475: PUSH
64476: LD_INT 2
64478: NEG
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: LIST
64488: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64489: LD_ADDR_VAR 0 12
64493: PUSH
64494: LD_INT 2
64496: PUSH
64497: LD_INT 1
64499: NEG
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: PUSH
64505: LD_INT 3
64507: PUSH
64508: LD_INT 0
64510: PUSH
64511: EMPTY
64512: LIST
64513: LIST
64514: PUSH
64515: LD_INT 3
64517: PUSH
64518: LD_INT 1
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: PUSH
64525: EMPTY
64526: LIST
64527: LIST
64528: LIST
64529: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64530: LD_ADDR_VAR 0 13
64534: PUSH
64535: LD_INT 3
64537: PUSH
64538: LD_INT 2
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: PUSH
64545: LD_INT 3
64547: PUSH
64548: LD_INT 3
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: PUSH
64555: LD_INT 2
64557: PUSH
64558: LD_INT 3
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: LIST
64569: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64570: LD_ADDR_VAR 0 14
64574: PUSH
64575: LD_INT 1
64577: PUSH
64578: LD_INT 3
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: PUSH
64585: LD_INT 0
64587: PUSH
64588: LD_INT 3
64590: PUSH
64591: EMPTY
64592: LIST
64593: LIST
64594: PUSH
64595: LD_INT 1
64597: NEG
64598: PUSH
64599: LD_INT 2
64601: PUSH
64602: EMPTY
64603: LIST
64604: LIST
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: LIST
64610: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64611: LD_ADDR_VAR 0 15
64615: PUSH
64616: LD_INT 2
64618: NEG
64619: PUSH
64620: LD_INT 1
64622: PUSH
64623: EMPTY
64624: LIST
64625: LIST
64626: PUSH
64627: LD_INT 3
64629: NEG
64630: PUSH
64631: LD_INT 0
64633: PUSH
64634: EMPTY
64635: LIST
64636: LIST
64637: PUSH
64638: LD_INT 3
64640: NEG
64641: PUSH
64642: LD_INT 1
64644: NEG
64645: PUSH
64646: EMPTY
64647: LIST
64648: LIST
64649: PUSH
64650: EMPTY
64651: LIST
64652: LIST
64653: LIST
64654: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64655: LD_ADDR_VAR 0 16
64659: PUSH
64660: LD_INT 2
64662: NEG
64663: PUSH
64664: LD_INT 3
64666: NEG
64667: PUSH
64668: EMPTY
64669: LIST
64670: LIST
64671: PUSH
64672: LD_INT 3
64674: NEG
64675: PUSH
64676: LD_INT 2
64678: NEG
64679: PUSH
64680: EMPTY
64681: LIST
64682: LIST
64683: PUSH
64684: LD_INT 3
64686: NEG
64687: PUSH
64688: LD_INT 3
64690: NEG
64691: PUSH
64692: EMPTY
64693: LIST
64694: LIST
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: LIST
64700: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64701: LD_ADDR_VAR 0 17
64705: PUSH
64706: LD_INT 1
64708: NEG
64709: PUSH
64710: LD_INT 3
64712: NEG
64713: PUSH
64714: EMPTY
64715: LIST
64716: LIST
64717: PUSH
64718: LD_INT 0
64720: PUSH
64721: LD_INT 3
64723: NEG
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: PUSH
64729: LD_INT 1
64731: PUSH
64732: LD_INT 2
64734: NEG
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: PUSH
64740: EMPTY
64741: LIST
64742: LIST
64743: LIST
64744: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64745: LD_ADDR_VAR 0 18
64749: PUSH
64750: LD_INT 2
64752: PUSH
64753: LD_INT 1
64755: NEG
64756: PUSH
64757: EMPTY
64758: LIST
64759: LIST
64760: PUSH
64761: LD_INT 3
64763: PUSH
64764: LD_INT 0
64766: PUSH
64767: EMPTY
64768: LIST
64769: LIST
64770: PUSH
64771: LD_INT 3
64773: PUSH
64774: LD_INT 1
64776: PUSH
64777: EMPTY
64778: LIST
64779: LIST
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: LIST
64785: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64786: LD_ADDR_VAR 0 19
64790: PUSH
64791: LD_INT 3
64793: PUSH
64794: LD_INT 2
64796: PUSH
64797: EMPTY
64798: LIST
64799: LIST
64800: PUSH
64801: LD_INT 3
64803: PUSH
64804: LD_INT 3
64806: PUSH
64807: EMPTY
64808: LIST
64809: LIST
64810: PUSH
64811: LD_INT 2
64813: PUSH
64814: LD_INT 3
64816: PUSH
64817: EMPTY
64818: LIST
64819: LIST
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: LIST
64825: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64826: LD_ADDR_VAR 0 20
64830: PUSH
64831: LD_INT 1
64833: PUSH
64834: LD_INT 3
64836: PUSH
64837: EMPTY
64838: LIST
64839: LIST
64840: PUSH
64841: LD_INT 0
64843: PUSH
64844: LD_INT 3
64846: PUSH
64847: EMPTY
64848: LIST
64849: LIST
64850: PUSH
64851: LD_INT 1
64853: NEG
64854: PUSH
64855: LD_INT 2
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: LIST
64866: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64867: LD_ADDR_VAR 0 21
64871: PUSH
64872: LD_INT 2
64874: NEG
64875: PUSH
64876: LD_INT 1
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: PUSH
64883: LD_INT 3
64885: NEG
64886: PUSH
64887: LD_INT 0
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: PUSH
64894: LD_INT 3
64896: NEG
64897: PUSH
64898: LD_INT 1
64900: NEG
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: PUSH
64906: EMPTY
64907: LIST
64908: LIST
64909: LIST
64910: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64911: LD_ADDR_VAR 0 22
64915: PUSH
64916: LD_INT 2
64918: NEG
64919: PUSH
64920: LD_INT 3
64922: NEG
64923: PUSH
64924: EMPTY
64925: LIST
64926: LIST
64927: PUSH
64928: LD_INT 3
64930: NEG
64931: PUSH
64932: LD_INT 2
64934: NEG
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: PUSH
64940: LD_INT 3
64942: NEG
64943: PUSH
64944: LD_INT 3
64946: NEG
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: LIST
64956: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
64957: LD_ADDR_VAR 0 23
64961: PUSH
64962: LD_INT 0
64964: PUSH
64965: LD_INT 3
64967: NEG
64968: PUSH
64969: EMPTY
64970: LIST
64971: LIST
64972: PUSH
64973: LD_INT 1
64975: NEG
64976: PUSH
64977: LD_INT 4
64979: NEG
64980: PUSH
64981: EMPTY
64982: LIST
64983: LIST
64984: PUSH
64985: LD_INT 1
64987: PUSH
64988: LD_INT 3
64990: NEG
64991: PUSH
64992: EMPTY
64993: LIST
64994: LIST
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: LIST
65000: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65001: LD_ADDR_VAR 0 24
65005: PUSH
65006: LD_INT 3
65008: PUSH
65009: LD_INT 0
65011: PUSH
65012: EMPTY
65013: LIST
65014: LIST
65015: PUSH
65016: LD_INT 3
65018: PUSH
65019: LD_INT 1
65021: NEG
65022: PUSH
65023: EMPTY
65024: LIST
65025: LIST
65026: PUSH
65027: LD_INT 4
65029: PUSH
65030: LD_INT 1
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: LIST
65041: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65042: LD_ADDR_VAR 0 25
65046: PUSH
65047: LD_INT 3
65049: PUSH
65050: LD_INT 3
65052: PUSH
65053: EMPTY
65054: LIST
65055: LIST
65056: PUSH
65057: LD_INT 4
65059: PUSH
65060: LD_INT 3
65062: PUSH
65063: EMPTY
65064: LIST
65065: LIST
65066: PUSH
65067: LD_INT 3
65069: PUSH
65070: LD_INT 4
65072: PUSH
65073: EMPTY
65074: LIST
65075: LIST
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: LIST
65081: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65082: LD_ADDR_VAR 0 26
65086: PUSH
65087: LD_INT 0
65089: PUSH
65090: LD_INT 3
65092: PUSH
65093: EMPTY
65094: LIST
65095: LIST
65096: PUSH
65097: LD_INT 1
65099: PUSH
65100: LD_INT 4
65102: PUSH
65103: EMPTY
65104: LIST
65105: LIST
65106: PUSH
65107: LD_INT 1
65109: NEG
65110: PUSH
65111: LD_INT 3
65113: PUSH
65114: EMPTY
65115: LIST
65116: LIST
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: LIST
65122: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65123: LD_ADDR_VAR 0 27
65127: PUSH
65128: LD_INT 3
65130: NEG
65131: PUSH
65132: LD_INT 0
65134: PUSH
65135: EMPTY
65136: LIST
65137: LIST
65138: PUSH
65139: LD_INT 3
65141: NEG
65142: PUSH
65143: LD_INT 1
65145: PUSH
65146: EMPTY
65147: LIST
65148: LIST
65149: PUSH
65150: LD_INT 4
65152: NEG
65153: PUSH
65154: LD_INT 1
65156: NEG
65157: PUSH
65158: EMPTY
65159: LIST
65160: LIST
65161: PUSH
65162: EMPTY
65163: LIST
65164: LIST
65165: LIST
65166: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65167: LD_ADDR_VAR 0 28
65171: PUSH
65172: LD_INT 3
65174: NEG
65175: PUSH
65176: LD_INT 3
65178: NEG
65179: PUSH
65180: EMPTY
65181: LIST
65182: LIST
65183: PUSH
65184: LD_INT 3
65186: NEG
65187: PUSH
65188: LD_INT 4
65190: NEG
65191: PUSH
65192: EMPTY
65193: LIST
65194: LIST
65195: PUSH
65196: LD_INT 4
65198: NEG
65199: PUSH
65200: LD_INT 3
65202: NEG
65203: PUSH
65204: EMPTY
65205: LIST
65206: LIST
65207: PUSH
65208: EMPTY
65209: LIST
65210: LIST
65211: LIST
65212: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65213: LD_ADDR_VAR 0 29
65217: PUSH
65218: LD_INT 1
65220: NEG
65221: PUSH
65222: LD_INT 3
65224: NEG
65225: PUSH
65226: EMPTY
65227: LIST
65228: LIST
65229: PUSH
65230: LD_INT 0
65232: PUSH
65233: LD_INT 3
65235: NEG
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: PUSH
65241: LD_INT 1
65243: PUSH
65244: LD_INT 2
65246: NEG
65247: PUSH
65248: EMPTY
65249: LIST
65250: LIST
65251: PUSH
65252: LD_INT 1
65254: NEG
65255: PUSH
65256: LD_INT 4
65258: NEG
65259: PUSH
65260: EMPTY
65261: LIST
65262: LIST
65263: PUSH
65264: LD_INT 0
65266: PUSH
65267: LD_INT 4
65269: NEG
65270: PUSH
65271: EMPTY
65272: LIST
65273: LIST
65274: PUSH
65275: LD_INT 1
65277: PUSH
65278: LD_INT 3
65280: NEG
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: PUSH
65286: LD_INT 1
65288: NEG
65289: PUSH
65290: LD_INT 5
65292: NEG
65293: PUSH
65294: EMPTY
65295: LIST
65296: LIST
65297: PUSH
65298: LD_INT 0
65300: PUSH
65301: LD_INT 5
65303: NEG
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: PUSH
65309: LD_INT 1
65311: PUSH
65312: LD_INT 4
65314: NEG
65315: PUSH
65316: EMPTY
65317: LIST
65318: LIST
65319: PUSH
65320: LD_INT 1
65322: NEG
65323: PUSH
65324: LD_INT 6
65326: NEG
65327: PUSH
65328: EMPTY
65329: LIST
65330: LIST
65331: PUSH
65332: LD_INT 0
65334: PUSH
65335: LD_INT 6
65337: NEG
65338: PUSH
65339: EMPTY
65340: LIST
65341: LIST
65342: PUSH
65343: LD_INT 1
65345: PUSH
65346: LD_INT 5
65348: NEG
65349: PUSH
65350: EMPTY
65351: LIST
65352: LIST
65353: PUSH
65354: EMPTY
65355: LIST
65356: LIST
65357: LIST
65358: LIST
65359: LIST
65360: LIST
65361: LIST
65362: LIST
65363: LIST
65364: LIST
65365: LIST
65366: LIST
65367: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65368: LD_ADDR_VAR 0 30
65372: PUSH
65373: LD_INT 2
65375: PUSH
65376: LD_INT 1
65378: NEG
65379: PUSH
65380: EMPTY
65381: LIST
65382: LIST
65383: PUSH
65384: LD_INT 3
65386: PUSH
65387: LD_INT 0
65389: PUSH
65390: EMPTY
65391: LIST
65392: LIST
65393: PUSH
65394: LD_INT 3
65396: PUSH
65397: LD_INT 1
65399: PUSH
65400: EMPTY
65401: LIST
65402: LIST
65403: PUSH
65404: LD_INT 3
65406: PUSH
65407: LD_INT 1
65409: NEG
65410: PUSH
65411: EMPTY
65412: LIST
65413: LIST
65414: PUSH
65415: LD_INT 4
65417: PUSH
65418: LD_INT 0
65420: PUSH
65421: EMPTY
65422: LIST
65423: LIST
65424: PUSH
65425: LD_INT 4
65427: PUSH
65428: LD_INT 1
65430: PUSH
65431: EMPTY
65432: LIST
65433: LIST
65434: PUSH
65435: LD_INT 4
65437: PUSH
65438: LD_INT 1
65440: NEG
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: PUSH
65446: LD_INT 5
65448: PUSH
65449: LD_INT 0
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: PUSH
65456: LD_INT 5
65458: PUSH
65459: LD_INT 1
65461: PUSH
65462: EMPTY
65463: LIST
65464: LIST
65465: PUSH
65466: LD_INT 5
65468: PUSH
65469: LD_INT 1
65471: NEG
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: PUSH
65477: LD_INT 6
65479: PUSH
65480: LD_INT 0
65482: PUSH
65483: EMPTY
65484: LIST
65485: LIST
65486: PUSH
65487: LD_INT 6
65489: PUSH
65490: LD_INT 1
65492: PUSH
65493: EMPTY
65494: LIST
65495: LIST
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: LIST
65501: LIST
65502: LIST
65503: LIST
65504: LIST
65505: LIST
65506: LIST
65507: LIST
65508: LIST
65509: LIST
65510: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65511: LD_ADDR_VAR 0 31
65515: PUSH
65516: LD_INT 3
65518: PUSH
65519: LD_INT 2
65521: PUSH
65522: EMPTY
65523: LIST
65524: LIST
65525: PUSH
65526: LD_INT 3
65528: PUSH
65529: LD_INT 3
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: PUSH
65536: LD_INT 2
65538: PUSH
65539: LD_INT 3
65541: PUSH
65542: EMPTY
65543: LIST
65544: LIST
65545: PUSH
65546: LD_INT 4
65548: PUSH
65549: LD_INT 3
65551: PUSH
65552: EMPTY
65553: LIST
65554: LIST
65555: PUSH
65556: LD_INT 4
65558: PUSH
65559: LD_INT 4
65561: PUSH
65562: EMPTY
65563: LIST
65564: LIST
65565: PUSH
65566: LD_INT 3
65568: PUSH
65569: LD_INT 4
65571: PUSH
65572: EMPTY
65573: LIST
65574: LIST
65575: PUSH
65576: LD_INT 5
65578: PUSH
65579: LD_INT 4
65581: PUSH
65582: EMPTY
65583: LIST
65584: LIST
65585: PUSH
65586: LD_INT 5
65588: PUSH
65589: LD_INT 5
65591: PUSH
65592: EMPTY
65593: LIST
65594: LIST
65595: PUSH
65596: LD_INT 4
65598: PUSH
65599: LD_INT 5
65601: PUSH
65602: EMPTY
65603: LIST
65604: LIST
65605: PUSH
65606: LD_INT 6
65608: PUSH
65609: LD_INT 5
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: PUSH
65616: LD_INT 6
65618: PUSH
65619: LD_INT 6
65621: PUSH
65622: EMPTY
65623: LIST
65624: LIST
65625: PUSH
65626: LD_INT 5
65628: PUSH
65629: LD_INT 6
65631: PUSH
65632: EMPTY
65633: LIST
65634: LIST
65635: PUSH
65636: EMPTY
65637: LIST
65638: LIST
65639: LIST
65640: LIST
65641: LIST
65642: LIST
65643: LIST
65644: LIST
65645: LIST
65646: LIST
65647: LIST
65648: LIST
65649: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
65650: LD_ADDR_VAR 0 32
65654: PUSH
65655: LD_INT 1
65657: PUSH
65658: LD_INT 3
65660: PUSH
65661: EMPTY
65662: LIST
65663: LIST
65664: PUSH
65665: LD_INT 0
65667: PUSH
65668: LD_INT 3
65670: PUSH
65671: EMPTY
65672: LIST
65673: LIST
65674: PUSH
65675: LD_INT 1
65677: NEG
65678: PUSH
65679: LD_INT 2
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: PUSH
65686: LD_INT 1
65688: PUSH
65689: LD_INT 4
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: PUSH
65696: LD_INT 0
65698: PUSH
65699: LD_INT 4
65701: PUSH
65702: EMPTY
65703: LIST
65704: LIST
65705: PUSH
65706: LD_INT 1
65708: NEG
65709: PUSH
65710: LD_INT 3
65712: PUSH
65713: EMPTY
65714: LIST
65715: LIST
65716: PUSH
65717: LD_INT 1
65719: PUSH
65720: LD_INT 5
65722: PUSH
65723: EMPTY
65724: LIST
65725: LIST
65726: PUSH
65727: LD_INT 0
65729: PUSH
65730: LD_INT 5
65732: PUSH
65733: EMPTY
65734: LIST
65735: LIST
65736: PUSH
65737: LD_INT 1
65739: NEG
65740: PUSH
65741: LD_INT 4
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: PUSH
65748: LD_INT 1
65750: PUSH
65751: LD_INT 6
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: PUSH
65758: LD_INT 0
65760: PUSH
65761: LD_INT 6
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: PUSH
65768: LD_INT 1
65770: NEG
65771: PUSH
65772: LD_INT 5
65774: PUSH
65775: EMPTY
65776: LIST
65777: LIST
65778: PUSH
65779: EMPTY
65780: LIST
65781: LIST
65782: LIST
65783: LIST
65784: LIST
65785: LIST
65786: LIST
65787: LIST
65788: LIST
65789: LIST
65790: LIST
65791: LIST
65792: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
65793: LD_ADDR_VAR 0 33
65797: PUSH
65798: LD_INT 2
65800: NEG
65801: PUSH
65802: LD_INT 1
65804: PUSH
65805: EMPTY
65806: LIST
65807: LIST
65808: PUSH
65809: LD_INT 3
65811: NEG
65812: PUSH
65813: LD_INT 0
65815: PUSH
65816: EMPTY
65817: LIST
65818: LIST
65819: PUSH
65820: LD_INT 3
65822: NEG
65823: PUSH
65824: LD_INT 1
65826: NEG
65827: PUSH
65828: EMPTY
65829: LIST
65830: LIST
65831: PUSH
65832: LD_INT 3
65834: NEG
65835: PUSH
65836: LD_INT 1
65838: PUSH
65839: EMPTY
65840: LIST
65841: LIST
65842: PUSH
65843: LD_INT 4
65845: NEG
65846: PUSH
65847: LD_INT 0
65849: PUSH
65850: EMPTY
65851: LIST
65852: LIST
65853: PUSH
65854: LD_INT 4
65856: NEG
65857: PUSH
65858: LD_INT 1
65860: NEG
65861: PUSH
65862: EMPTY
65863: LIST
65864: LIST
65865: PUSH
65866: LD_INT 4
65868: NEG
65869: PUSH
65870: LD_INT 1
65872: PUSH
65873: EMPTY
65874: LIST
65875: LIST
65876: PUSH
65877: LD_INT 5
65879: NEG
65880: PUSH
65881: LD_INT 0
65883: PUSH
65884: EMPTY
65885: LIST
65886: LIST
65887: PUSH
65888: LD_INT 5
65890: NEG
65891: PUSH
65892: LD_INT 1
65894: NEG
65895: PUSH
65896: EMPTY
65897: LIST
65898: LIST
65899: PUSH
65900: LD_INT 5
65902: NEG
65903: PUSH
65904: LD_INT 1
65906: PUSH
65907: EMPTY
65908: LIST
65909: LIST
65910: PUSH
65911: LD_INT 6
65913: NEG
65914: PUSH
65915: LD_INT 0
65917: PUSH
65918: EMPTY
65919: LIST
65920: LIST
65921: PUSH
65922: LD_INT 6
65924: NEG
65925: PUSH
65926: LD_INT 1
65928: NEG
65929: PUSH
65930: EMPTY
65931: LIST
65932: LIST
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: LIST
65938: LIST
65939: LIST
65940: LIST
65941: LIST
65942: LIST
65943: LIST
65944: LIST
65945: LIST
65946: LIST
65947: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
65948: LD_ADDR_VAR 0 34
65952: PUSH
65953: LD_INT 2
65955: NEG
65956: PUSH
65957: LD_INT 3
65959: NEG
65960: PUSH
65961: EMPTY
65962: LIST
65963: LIST
65964: PUSH
65965: LD_INT 3
65967: NEG
65968: PUSH
65969: LD_INT 2
65971: NEG
65972: PUSH
65973: EMPTY
65974: LIST
65975: LIST
65976: PUSH
65977: LD_INT 3
65979: NEG
65980: PUSH
65981: LD_INT 3
65983: NEG
65984: PUSH
65985: EMPTY
65986: LIST
65987: LIST
65988: PUSH
65989: LD_INT 3
65991: NEG
65992: PUSH
65993: LD_INT 4
65995: NEG
65996: PUSH
65997: EMPTY
65998: LIST
65999: LIST
66000: PUSH
66001: LD_INT 4
66003: NEG
66004: PUSH
66005: LD_INT 3
66007: NEG
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: PUSH
66013: LD_INT 4
66015: NEG
66016: PUSH
66017: LD_INT 4
66019: NEG
66020: PUSH
66021: EMPTY
66022: LIST
66023: LIST
66024: PUSH
66025: LD_INT 4
66027: NEG
66028: PUSH
66029: LD_INT 5
66031: NEG
66032: PUSH
66033: EMPTY
66034: LIST
66035: LIST
66036: PUSH
66037: LD_INT 5
66039: NEG
66040: PUSH
66041: LD_INT 4
66043: NEG
66044: PUSH
66045: EMPTY
66046: LIST
66047: LIST
66048: PUSH
66049: LD_INT 5
66051: NEG
66052: PUSH
66053: LD_INT 5
66055: NEG
66056: PUSH
66057: EMPTY
66058: LIST
66059: LIST
66060: PUSH
66061: LD_INT 5
66063: NEG
66064: PUSH
66065: LD_INT 6
66067: NEG
66068: PUSH
66069: EMPTY
66070: LIST
66071: LIST
66072: PUSH
66073: LD_INT 6
66075: NEG
66076: PUSH
66077: LD_INT 5
66079: NEG
66080: PUSH
66081: EMPTY
66082: LIST
66083: LIST
66084: PUSH
66085: LD_INT 6
66087: NEG
66088: PUSH
66089: LD_INT 6
66091: NEG
66092: PUSH
66093: EMPTY
66094: LIST
66095: LIST
66096: PUSH
66097: EMPTY
66098: LIST
66099: LIST
66100: LIST
66101: LIST
66102: LIST
66103: LIST
66104: LIST
66105: LIST
66106: LIST
66107: LIST
66108: LIST
66109: LIST
66110: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66111: LD_ADDR_VAR 0 41
66115: PUSH
66116: LD_INT 0
66118: PUSH
66119: LD_INT 2
66121: NEG
66122: PUSH
66123: EMPTY
66124: LIST
66125: LIST
66126: PUSH
66127: LD_INT 1
66129: NEG
66130: PUSH
66131: LD_INT 3
66133: NEG
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: PUSH
66139: LD_INT 1
66141: PUSH
66142: LD_INT 2
66144: NEG
66145: PUSH
66146: EMPTY
66147: LIST
66148: LIST
66149: PUSH
66150: EMPTY
66151: LIST
66152: LIST
66153: LIST
66154: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66155: LD_ADDR_VAR 0 42
66159: PUSH
66160: LD_INT 2
66162: PUSH
66163: LD_INT 0
66165: PUSH
66166: EMPTY
66167: LIST
66168: LIST
66169: PUSH
66170: LD_INT 2
66172: PUSH
66173: LD_INT 1
66175: NEG
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: PUSH
66181: LD_INT 3
66183: PUSH
66184: LD_INT 1
66186: PUSH
66187: EMPTY
66188: LIST
66189: LIST
66190: PUSH
66191: EMPTY
66192: LIST
66193: LIST
66194: LIST
66195: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66196: LD_ADDR_VAR 0 43
66200: PUSH
66201: LD_INT 2
66203: PUSH
66204: LD_INT 2
66206: PUSH
66207: EMPTY
66208: LIST
66209: LIST
66210: PUSH
66211: LD_INT 3
66213: PUSH
66214: LD_INT 2
66216: PUSH
66217: EMPTY
66218: LIST
66219: LIST
66220: PUSH
66221: LD_INT 2
66223: PUSH
66224: LD_INT 3
66226: PUSH
66227: EMPTY
66228: LIST
66229: LIST
66230: PUSH
66231: EMPTY
66232: LIST
66233: LIST
66234: LIST
66235: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66236: LD_ADDR_VAR 0 44
66240: PUSH
66241: LD_INT 0
66243: PUSH
66244: LD_INT 2
66246: PUSH
66247: EMPTY
66248: LIST
66249: LIST
66250: PUSH
66251: LD_INT 1
66253: PUSH
66254: LD_INT 3
66256: PUSH
66257: EMPTY
66258: LIST
66259: LIST
66260: PUSH
66261: LD_INT 1
66263: NEG
66264: PUSH
66265: LD_INT 2
66267: PUSH
66268: EMPTY
66269: LIST
66270: LIST
66271: PUSH
66272: EMPTY
66273: LIST
66274: LIST
66275: LIST
66276: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66277: LD_ADDR_VAR 0 45
66281: PUSH
66282: LD_INT 2
66284: NEG
66285: PUSH
66286: LD_INT 0
66288: PUSH
66289: EMPTY
66290: LIST
66291: LIST
66292: PUSH
66293: LD_INT 2
66295: NEG
66296: PUSH
66297: LD_INT 1
66299: PUSH
66300: EMPTY
66301: LIST
66302: LIST
66303: PUSH
66304: LD_INT 3
66306: NEG
66307: PUSH
66308: LD_INT 1
66310: NEG
66311: PUSH
66312: EMPTY
66313: LIST
66314: LIST
66315: PUSH
66316: EMPTY
66317: LIST
66318: LIST
66319: LIST
66320: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66321: LD_ADDR_VAR 0 46
66325: PUSH
66326: LD_INT 2
66328: NEG
66329: PUSH
66330: LD_INT 2
66332: NEG
66333: PUSH
66334: EMPTY
66335: LIST
66336: LIST
66337: PUSH
66338: LD_INT 2
66340: NEG
66341: PUSH
66342: LD_INT 3
66344: NEG
66345: PUSH
66346: EMPTY
66347: LIST
66348: LIST
66349: PUSH
66350: LD_INT 3
66352: NEG
66353: PUSH
66354: LD_INT 2
66356: NEG
66357: PUSH
66358: EMPTY
66359: LIST
66360: LIST
66361: PUSH
66362: EMPTY
66363: LIST
66364: LIST
66365: LIST
66366: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66367: LD_ADDR_VAR 0 47
66371: PUSH
66372: LD_INT 2
66374: NEG
66375: PUSH
66376: LD_INT 3
66378: NEG
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: PUSH
66384: LD_INT 1
66386: NEG
66387: PUSH
66388: LD_INT 3
66390: NEG
66391: PUSH
66392: EMPTY
66393: LIST
66394: LIST
66395: PUSH
66396: EMPTY
66397: LIST
66398: LIST
66399: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66400: LD_ADDR_VAR 0 48
66404: PUSH
66405: LD_INT 1
66407: PUSH
66408: LD_INT 2
66410: NEG
66411: PUSH
66412: EMPTY
66413: LIST
66414: LIST
66415: PUSH
66416: LD_INT 2
66418: PUSH
66419: LD_INT 1
66421: NEG
66422: PUSH
66423: EMPTY
66424: LIST
66425: LIST
66426: PUSH
66427: EMPTY
66428: LIST
66429: LIST
66430: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66431: LD_ADDR_VAR 0 49
66435: PUSH
66436: LD_INT 3
66438: PUSH
66439: LD_INT 1
66441: PUSH
66442: EMPTY
66443: LIST
66444: LIST
66445: PUSH
66446: LD_INT 3
66448: PUSH
66449: LD_INT 2
66451: PUSH
66452: EMPTY
66453: LIST
66454: LIST
66455: PUSH
66456: EMPTY
66457: LIST
66458: LIST
66459: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66460: LD_ADDR_VAR 0 50
66464: PUSH
66465: LD_INT 2
66467: PUSH
66468: LD_INT 3
66470: PUSH
66471: EMPTY
66472: LIST
66473: LIST
66474: PUSH
66475: LD_INT 1
66477: PUSH
66478: LD_INT 3
66480: PUSH
66481: EMPTY
66482: LIST
66483: LIST
66484: PUSH
66485: EMPTY
66486: LIST
66487: LIST
66488: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66489: LD_ADDR_VAR 0 51
66493: PUSH
66494: LD_INT 1
66496: NEG
66497: PUSH
66498: LD_INT 2
66500: PUSH
66501: EMPTY
66502: LIST
66503: LIST
66504: PUSH
66505: LD_INT 2
66507: NEG
66508: PUSH
66509: LD_INT 1
66511: PUSH
66512: EMPTY
66513: LIST
66514: LIST
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66520: LD_ADDR_VAR 0 52
66524: PUSH
66525: LD_INT 3
66527: NEG
66528: PUSH
66529: LD_INT 1
66531: NEG
66532: PUSH
66533: EMPTY
66534: LIST
66535: LIST
66536: PUSH
66537: LD_INT 3
66539: NEG
66540: PUSH
66541: LD_INT 2
66543: NEG
66544: PUSH
66545: EMPTY
66546: LIST
66547: LIST
66548: PUSH
66549: EMPTY
66550: LIST
66551: LIST
66552: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66553: LD_ADDR_VAR 0 53
66557: PUSH
66558: LD_INT 1
66560: NEG
66561: PUSH
66562: LD_INT 3
66564: NEG
66565: PUSH
66566: EMPTY
66567: LIST
66568: LIST
66569: PUSH
66570: LD_INT 0
66572: PUSH
66573: LD_INT 3
66575: NEG
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: PUSH
66581: LD_INT 1
66583: PUSH
66584: LD_INT 2
66586: NEG
66587: PUSH
66588: EMPTY
66589: LIST
66590: LIST
66591: PUSH
66592: EMPTY
66593: LIST
66594: LIST
66595: LIST
66596: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66597: LD_ADDR_VAR 0 54
66601: PUSH
66602: LD_INT 2
66604: PUSH
66605: LD_INT 1
66607: NEG
66608: PUSH
66609: EMPTY
66610: LIST
66611: LIST
66612: PUSH
66613: LD_INT 3
66615: PUSH
66616: LD_INT 0
66618: PUSH
66619: EMPTY
66620: LIST
66621: LIST
66622: PUSH
66623: LD_INT 3
66625: PUSH
66626: LD_INT 1
66628: PUSH
66629: EMPTY
66630: LIST
66631: LIST
66632: PUSH
66633: EMPTY
66634: LIST
66635: LIST
66636: LIST
66637: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66638: LD_ADDR_VAR 0 55
66642: PUSH
66643: LD_INT 3
66645: PUSH
66646: LD_INT 2
66648: PUSH
66649: EMPTY
66650: LIST
66651: LIST
66652: PUSH
66653: LD_INT 3
66655: PUSH
66656: LD_INT 3
66658: PUSH
66659: EMPTY
66660: LIST
66661: LIST
66662: PUSH
66663: LD_INT 2
66665: PUSH
66666: LD_INT 3
66668: PUSH
66669: EMPTY
66670: LIST
66671: LIST
66672: PUSH
66673: EMPTY
66674: LIST
66675: LIST
66676: LIST
66677: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66678: LD_ADDR_VAR 0 56
66682: PUSH
66683: LD_INT 1
66685: PUSH
66686: LD_INT 3
66688: PUSH
66689: EMPTY
66690: LIST
66691: LIST
66692: PUSH
66693: LD_INT 0
66695: PUSH
66696: LD_INT 3
66698: PUSH
66699: EMPTY
66700: LIST
66701: LIST
66702: PUSH
66703: LD_INT 1
66705: NEG
66706: PUSH
66707: LD_INT 2
66709: PUSH
66710: EMPTY
66711: LIST
66712: LIST
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: LIST
66718: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66719: LD_ADDR_VAR 0 57
66723: PUSH
66724: LD_INT 2
66726: NEG
66727: PUSH
66728: LD_INT 1
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: PUSH
66735: LD_INT 3
66737: NEG
66738: PUSH
66739: LD_INT 0
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: PUSH
66746: LD_INT 3
66748: NEG
66749: PUSH
66750: LD_INT 1
66752: NEG
66753: PUSH
66754: EMPTY
66755: LIST
66756: LIST
66757: PUSH
66758: EMPTY
66759: LIST
66760: LIST
66761: LIST
66762: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66763: LD_ADDR_VAR 0 58
66767: PUSH
66768: LD_INT 2
66770: NEG
66771: PUSH
66772: LD_INT 3
66774: NEG
66775: PUSH
66776: EMPTY
66777: LIST
66778: LIST
66779: PUSH
66780: LD_INT 3
66782: NEG
66783: PUSH
66784: LD_INT 2
66786: NEG
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: PUSH
66792: LD_INT 3
66794: NEG
66795: PUSH
66796: LD_INT 3
66798: NEG
66799: PUSH
66800: EMPTY
66801: LIST
66802: LIST
66803: PUSH
66804: EMPTY
66805: LIST
66806: LIST
66807: LIST
66808: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
66809: LD_ADDR_VAR 0 59
66813: PUSH
66814: LD_INT 1
66816: NEG
66817: PUSH
66818: LD_INT 2
66820: NEG
66821: PUSH
66822: EMPTY
66823: LIST
66824: LIST
66825: PUSH
66826: LD_INT 0
66828: PUSH
66829: LD_INT 2
66831: NEG
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: PUSH
66837: LD_INT 1
66839: PUSH
66840: LD_INT 1
66842: NEG
66843: PUSH
66844: EMPTY
66845: LIST
66846: LIST
66847: PUSH
66848: EMPTY
66849: LIST
66850: LIST
66851: LIST
66852: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66853: LD_ADDR_VAR 0 60
66857: PUSH
66858: LD_INT 1
66860: PUSH
66861: LD_INT 1
66863: NEG
66864: PUSH
66865: EMPTY
66866: LIST
66867: LIST
66868: PUSH
66869: LD_INT 2
66871: PUSH
66872: LD_INT 0
66874: PUSH
66875: EMPTY
66876: LIST
66877: LIST
66878: PUSH
66879: LD_INT 2
66881: PUSH
66882: LD_INT 1
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: LIST
66893: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66894: LD_ADDR_VAR 0 61
66898: PUSH
66899: LD_INT 2
66901: PUSH
66902: LD_INT 1
66904: PUSH
66905: EMPTY
66906: LIST
66907: LIST
66908: PUSH
66909: LD_INT 2
66911: PUSH
66912: LD_INT 2
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: PUSH
66919: LD_INT 1
66921: PUSH
66922: LD_INT 2
66924: PUSH
66925: EMPTY
66926: LIST
66927: LIST
66928: PUSH
66929: EMPTY
66930: LIST
66931: LIST
66932: LIST
66933: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66934: LD_ADDR_VAR 0 62
66938: PUSH
66939: LD_INT 1
66941: PUSH
66942: LD_INT 2
66944: PUSH
66945: EMPTY
66946: LIST
66947: LIST
66948: PUSH
66949: LD_INT 0
66951: PUSH
66952: LD_INT 2
66954: PUSH
66955: EMPTY
66956: LIST
66957: LIST
66958: PUSH
66959: LD_INT 1
66961: NEG
66962: PUSH
66963: LD_INT 1
66965: PUSH
66966: EMPTY
66967: LIST
66968: LIST
66969: PUSH
66970: EMPTY
66971: LIST
66972: LIST
66973: LIST
66974: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66975: LD_ADDR_VAR 0 63
66979: PUSH
66980: LD_INT 1
66982: NEG
66983: PUSH
66984: LD_INT 1
66986: PUSH
66987: EMPTY
66988: LIST
66989: LIST
66990: PUSH
66991: LD_INT 2
66993: NEG
66994: PUSH
66995: LD_INT 0
66997: PUSH
66998: EMPTY
66999: LIST
67000: LIST
67001: PUSH
67002: LD_INT 2
67004: NEG
67005: PUSH
67006: LD_INT 1
67008: NEG
67009: PUSH
67010: EMPTY
67011: LIST
67012: LIST
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: LIST
67018: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67019: LD_ADDR_VAR 0 64
67023: PUSH
67024: LD_INT 1
67026: NEG
67027: PUSH
67028: LD_INT 2
67030: NEG
67031: PUSH
67032: EMPTY
67033: LIST
67034: LIST
67035: PUSH
67036: LD_INT 2
67038: NEG
67039: PUSH
67040: LD_INT 1
67042: NEG
67043: PUSH
67044: EMPTY
67045: LIST
67046: LIST
67047: PUSH
67048: LD_INT 2
67050: NEG
67051: PUSH
67052: LD_INT 2
67054: NEG
67055: PUSH
67056: EMPTY
67057: LIST
67058: LIST
67059: PUSH
67060: EMPTY
67061: LIST
67062: LIST
67063: LIST
67064: ST_TO_ADDR
// end ; 2 :
67065: GO 70331
67067: LD_INT 2
67069: DOUBLE
67070: EQUAL
67071: IFTRUE 67075
67073: GO 70330
67075: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67076: LD_ADDR_VAR 0 29
67080: PUSH
67081: LD_INT 4
67083: PUSH
67084: LD_INT 0
67086: PUSH
67087: EMPTY
67088: LIST
67089: LIST
67090: PUSH
67091: LD_INT 4
67093: PUSH
67094: LD_INT 1
67096: NEG
67097: PUSH
67098: EMPTY
67099: LIST
67100: LIST
67101: PUSH
67102: LD_INT 5
67104: PUSH
67105: LD_INT 0
67107: PUSH
67108: EMPTY
67109: LIST
67110: LIST
67111: PUSH
67112: LD_INT 5
67114: PUSH
67115: LD_INT 1
67117: PUSH
67118: EMPTY
67119: LIST
67120: LIST
67121: PUSH
67122: LD_INT 4
67124: PUSH
67125: LD_INT 1
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: PUSH
67132: LD_INT 3
67134: PUSH
67135: LD_INT 0
67137: PUSH
67138: EMPTY
67139: LIST
67140: LIST
67141: PUSH
67142: LD_INT 3
67144: PUSH
67145: LD_INT 1
67147: NEG
67148: PUSH
67149: EMPTY
67150: LIST
67151: LIST
67152: PUSH
67153: LD_INT 3
67155: PUSH
67156: LD_INT 2
67158: NEG
67159: PUSH
67160: EMPTY
67161: LIST
67162: LIST
67163: PUSH
67164: LD_INT 5
67166: PUSH
67167: LD_INT 2
67169: PUSH
67170: EMPTY
67171: LIST
67172: LIST
67173: PUSH
67174: LD_INT 3
67176: PUSH
67177: LD_INT 3
67179: PUSH
67180: EMPTY
67181: LIST
67182: LIST
67183: PUSH
67184: LD_INT 3
67186: PUSH
67187: LD_INT 2
67189: PUSH
67190: EMPTY
67191: LIST
67192: LIST
67193: PUSH
67194: LD_INT 4
67196: PUSH
67197: LD_INT 3
67199: PUSH
67200: EMPTY
67201: LIST
67202: LIST
67203: PUSH
67204: LD_INT 4
67206: PUSH
67207: LD_INT 4
67209: PUSH
67210: EMPTY
67211: LIST
67212: LIST
67213: PUSH
67214: LD_INT 3
67216: PUSH
67217: LD_INT 4
67219: PUSH
67220: EMPTY
67221: LIST
67222: LIST
67223: PUSH
67224: LD_INT 2
67226: PUSH
67227: LD_INT 3
67229: PUSH
67230: EMPTY
67231: LIST
67232: LIST
67233: PUSH
67234: LD_INT 2
67236: PUSH
67237: LD_INT 2
67239: PUSH
67240: EMPTY
67241: LIST
67242: LIST
67243: PUSH
67244: LD_INT 4
67246: PUSH
67247: LD_INT 2
67249: PUSH
67250: EMPTY
67251: LIST
67252: LIST
67253: PUSH
67254: LD_INT 2
67256: PUSH
67257: LD_INT 4
67259: PUSH
67260: EMPTY
67261: LIST
67262: LIST
67263: PUSH
67264: LD_INT 0
67266: PUSH
67267: LD_INT 4
67269: PUSH
67270: EMPTY
67271: LIST
67272: LIST
67273: PUSH
67274: LD_INT 0
67276: PUSH
67277: LD_INT 3
67279: PUSH
67280: EMPTY
67281: LIST
67282: LIST
67283: PUSH
67284: LD_INT 1
67286: PUSH
67287: LD_INT 4
67289: PUSH
67290: EMPTY
67291: LIST
67292: LIST
67293: PUSH
67294: LD_INT 1
67296: PUSH
67297: LD_INT 5
67299: PUSH
67300: EMPTY
67301: LIST
67302: LIST
67303: PUSH
67304: LD_INT 0
67306: PUSH
67307: LD_INT 5
67309: PUSH
67310: EMPTY
67311: LIST
67312: LIST
67313: PUSH
67314: LD_INT 1
67316: NEG
67317: PUSH
67318: LD_INT 4
67320: PUSH
67321: EMPTY
67322: LIST
67323: LIST
67324: PUSH
67325: LD_INT 1
67327: NEG
67328: PUSH
67329: LD_INT 3
67331: PUSH
67332: EMPTY
67333: LIST
67334: LIST
67335: PUSH
67336: LD_INT 2
67338: PUSH
67339: LD_INT 5
67341: PUSH
67342: EMPTY
67343: LIST
67344: LIST
67345: PUSH
67346: LD_INT 2
67348: NEG
67349: PUSH
67350: LD_INT 3
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: PUSH
67357: LD_INT 3
67359: NEG
67360: PUSH
67361: LD_INT 0
67363: PUSH
67364: EMPTY
67365: LIST
67366: LIST
67367: PUSH
67368: LD_INT 3
67370: NEG
67371: PUSH
67372: LD_INT 1
67374: NEG
67375: PUSH
67376: EMPTY
67377: LIST
67378: LIST
67379: PUSH
67380: LD_INT 2
67382: NEG
67383: PUSH
67384: LD_INT 0
67386: PUSH
67387: EMPTY
67388: LIST
67389: LIST
67390: PUSH
67391: LD_INT 2
67393: NEG
67394: PUSH
67395: LD_INT 1
67397: PUSH
67398: EMPTY
67399: LIST
67400: LIST
67401: PUSH
67402: LD_INT 3
67404: NEG
67405: PUSH
67406: LD_INT 1
67408: PUSH
67409: EMPTY
67410: LIST
67411: LIST
67412: PUSH
67413: LD_INT 4
67415: NEG
67416: PUSH
67417: LD_INT 0
67419: PUSH
67420: EMPTY
67421: LIST
67422: LIST
67423: PUSH
67424: LD_INT 4
67426: NEG
67427: PUSH
67428: LD_INT 1
67430: NEG
67431: PUSH
67432: EMPTY
67433: LIST
67434: LIST
67435: PUSH
67436: LD_INT 4
67438: NEG
67439: PUSH
67440: LD_INT 2
67442: NEG
67443: PUSH
67444: EMPTY
67445: LIST
67446: LIST
67447: PUSH
67448: LD_INT 2
67450: NEG
67451: PUSH
67452: LD_INT 2
67454: PUSH
67455: EMPTY
67456: LIST
67457: LIST
67458: PUSH
67459: LD_INT 4
67461: NEG
67462: PUSH
67463: LD_INT 4
67465: NEG
67466: PUSH
67467: EMPTY
67468: LIST
67469: LIST
67470: PUSH
67471: LD_INT 4
67473: NEG
67474: PUSH
67475: LD_INT 5
67477: NEG
67478: PUSH
67479: EMPTY
67480: LIST
67481: LIST
67482: PUSH
67483: LD_INT 3
67485: NEG
67486: PUSH
67487: LD_INT 4
67489: NEG
67490: PUSH
67491: EMPTY
67492: LIST
67493: LIST
67494: PUSH
67495: LD_INT 3
67497: NEG
67498: PUSH
67499: LD_INT 3
67501: NEG
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: PUSH
67507: LD_INT 4
67509: NEG
67510: PUSH
67511: LD_INT 3
67513: NEG
67514: PUSH
67515: EMPTY
67516: LIST
67517: LIST
67518: PUSH
67519: LD_INT 5
67521: NEG
67522: PUSH
67523: LD_INT 4
67525: NEG
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: PUSH
67531: LD_INT 5
67533: NEG
67534: PUSH
67535: LD_INT 5
67537: NEG
67538: PUSH
67539: EMPTY
67540: LIST
67541: LIST
67542: PUSH
67543: LD_INT 3
67545: NEG
67546: PUSH
67547: LD_INT 5
67549: NEG
67550: PUSH
67551: EMPTY
67552: LIST
67553: LIST
67554: PUSH
67555: LD_INT 5
67557: NEG
67558: PUSH
67559: LD_INT 3
67561: NEG
67562: PUSH
67563: EMPTY
67564: LIST
67565: LIST
67566: PUSH
67567: EMPTY
67568: LIST
67569: LIST
67570: LIST
67571: LIST
67572: LIST
67573: LIST
67574: LIST
67575: LIST
67576: LIST
67577: LIST
67578: LIST
67579: LIST
67580: LIST
67581: LIST
67582: LIST
67583: LIST
67584: LIST
67585: LIST
67586: LIST
67587: LIST
67588: LIST
67589: LIST
67590: LIST
67591: LIST
67592: LIST
67593: LIST
67594: LIST
67595: LIST
67596: LIST
67597: LIST
67598: LIST
67599: LIST
67600: LIST
67601: LIST
67602: LIST
67603: LIST
67604: LIST
67605: LIST
67606: LIST
67607: LIST
67608: LIST
67609: LIST
67610: LIST
67611: LIST
67612: LIST
67613: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
67614: LD_ADDR_VAR 0 30
67618: PUSH
67619: LD_INT 4
67621: PUSH
67622: LD_INT 4
67624: PUSH
67625: EMPTY
67626: LIST
67627: LIST
67628: PUSH
67629: LD_INT 4
67631: PUSH
67632: LD_INT 3
67634: PUSH
67635: EMPTY
67636: LIST
67637: LIST
67638: PUSH
67639: LD_INT 5
67641: PUSH
67642: LD_INT 4
67644: PUSH
67645: EMPTY
67646: LIST
67647: LIST
67648: PUSH
67649: LD_INT 5
67651: PUSH
67652: LD_INT 5
67654: PUSH
67655: EMPTY
67656: LIST
67657: LIST
67658: PUSH
67659: LD_INT 4
67661: PUSH
67662: LD_INT 5
67664: PUSH
67665: EMPTY
67666: LIST
67667: LIST
67668: PUSH
67669: LD_INT 3
67671: PUSH
67672: LD_INT 4
67674: PUSH
67675: EMPTY
67676: LIST
67677: LIST
67678: PUSH
67679: LD_INT 3
67681: PUSH
67682: LD_INT 3
67684: PUSH
67685: EMPTY
67686: LIST
67687: LIST
67688: PUSH
67689: LD_INT 5
67691: PUSH
67692: LD_INT 3
67694: PUSH
67695: EMPTY
67696: LIST
67697: LIST
67698: PUSH
67699: LD_INT 3
67701: PUSH
67702: LD_INT 5
67704: PUSH
67705: EMPTY
67706: LIST
67707: LIST
67708: PUSH
67709: LD_INT 0
67711: PUSH
67712: LD_INT 3
67714: PUSH
67715: EMPTY
67716: LIST
67717: LIST
67718: PUSH
67719: LD_INT 0
67721: PUSH
67722: LD_INT 2
67724: PUSH
67725: EMPTY
67726: LIST
67727: LIST
67728: PUSH
67729: LD_INT 1
67731: PUSH
67732: LD_INT 3
67734: PUSH
67735: EMPTY
67736: LIST
67737: LIST
67738: PUSH
67739: LD_INT 1
67741: PUSH
67742: LD_INT 4
67744: PUSH
67745: EMPTY
67746: LIST
67747: LIST
67748: PUSH
67749: LD_INT 0
67751: PUSH
67752: LD_INT 4
67754: PUSH
67755: EMPTY
67756: LIST
67757: LIST
67758: PUSH
67759: LD_INT 1
67761: NEG
67762: PUSH
67763: LD_INT 3
67765: PUSH
67766: EMPTY
67767: LIST
67768: LIST
67769: PUSH
67770: LD_INT 1
67772: NEG
67773: PUSH
67774: LD_INT 2
67776: PUSH
67777: EMPTY
67778: LIST
67779: LIST
67780: PUSH
67781: LD_INT 2
67783: PUSH
67784: LD_INT 4
67786: PUSH
67787: EMPTY
67788: LIST
67789: LIST
67790: PUSH
67791: LD_INT 2
67793: NEG
67794: PUSH
67795: LD_INT 2
67797: PUSH
67798: EMPTY
67799: LIST
67800: LIST
67801: PUSH
67802: LD_INT 4
67804: NEG
67805: PUSH
67806: LD_INT 0
67808: PUSH
67809: EMPTY
67810: LIST
67811: LIST
67812: PUSH
67813: LD_INT 4
67815: NEG
67816: PUSH
67817: LD_INT 1
67819: NEG
67820: PUSH
67821: EMPTY
67822: LIST
67823: LIST
67824: PUSH
67825: LD_INT 3
67827: NEG
67828: PUSH
67829: LD_INT 0
67831: PUSH
67832: EMPTY
67833: LIST
67834: LIST
67835: PUSH
67836: LD_INT 3
67838: NEG
67839: PUSH
67840: LD_INT 1
67842: PUSH
67843: EMPTY
67844: LIST
67845: LIST
67846: PUSH
67847: LD_INT 4
67849: NEG
67850: PUSH
67851: LD_INT 1
67853: PUSH
67854: EMPTY
67855: LIST
67856: LIST
67857: PUSH
67858: LD_INT 5
67860: NEG
67861: PUSH
67862: LD_INT 0
67864: PUSH
67865: EMPTY
67866: LIST
67867: LIST
67868: PUSH
67869: LD_INT 5
67871: NEG
67872: PUSH
67873: LD_INT 1
67875: NEG
67876: PUSH
67877: EMPTY
67878: LIST
67879: LIST
67880: PUSH
67881: LD_INT 5
67883: NEG
67884: PUSH
67885: LD_INT 2
67887: NEG
67888: PUSH
67889: EMPTY
67890: LIST
67891: LIST
67892: PUSH
67893: LD_INT 3
67895: NEG
67896: PUSH
67897: LD_INT 2
67899: PUSH
67900: EMPTY
67901: LIST
67902: LIST
67903: PUSH
67904: LD_INT 3
67906: NEG
67907: PUSH
67908: LD_INT 3
67910: NEG
67911: PUSH
67912: EMPTY
67913: LIST
67914: LIST
67915: PUSH
67916: LD_INT 3
67918: NEG
67919: PUSH
67920: LD_INT 4
67922: NEG
67923: PUSH
67924: EMPTY
67925: LIST
67926: LIST
67927: PUSH
67928: LD_INT 2
67930: NEG
67931: PUSH
67932: LD_INT 3
67934: NEG
67935: PUSH
67936: EMPTY
67937: LIST
67938: LIST
67939: PUSH
67940: LD_INT 2
67942: NEG
67943: PUSH
67944: LD_INT 2
67946: NEG
67947: PUSH
67948: EMPTY
67949: LIST
67950: LIST
67951: PUSH
67952: LD_INT 3
67954: NEG
67955: PUSH
67956: LD_INT 2
67958: NEG
67959: PUSH
67960: EMPTY
67961: LIST
67962: LIST
67963: PUSH
67964: LD_INT 4
67966: NEG
67967: PUSH
67968: LD_INT 3
67970: NEG
67971: PUSH
67972: EMPTY
67973: LIST
67974: LIST
67975: PUSH
67976: LD_INT 4
67978: NEG
67979: PUSH
67980: LD_INT 4
67982: NEG
67983: PUSH
67984: EMPTY
67985: LIST
67986: LIST
67987: PUSH
67988: LD_INT 2
67990: NEG
67991: PUSH
67992: LD_INT 4
67994: NEG
67995: PUSH
67996: EMPTY
67997: LIST
67998: LIST
67999: PUSH
68000: LD_INT 4
68002: NEG
68003: PUSH
68004: LD_INT 2
68006: NEG
68007: PUSH
68008: EMPTY
68009: LIST
68010: LIST
68011: PUSH
68012: LD_INT 0
68014: PUSH
68015: LD_INT 4
68017: NEG
68018: PUSH
68019: EMPTY
68020: LIST
68021: LIST
68022: PUSH
68023: LD_INT 0
68025: PUSH
68026: LD_INT 5
68028: NEG
68029: PUSH
68030: EMPTY
68031: LIST
68032: LIST
68033: PUSH
68034: LD_INT 1
68036: PUSH
68037: LD_INT 4
68039: NEG
68040: PUSH
68041: EMPTY
68042: LIST
68043: LIST
68044: PUSH
68045: LD_INT 1
68047: PUSH
68048: LD_INT 3
68050: NEG
68051: PUSH
68052: EMPTY
68053: LIST
68054: LIST
68055: PUSH
68056: LD_INT 0
68058: PUSH
68059: LD_INT 3
68061: NEG
68062: PUSH
68063: EMPTY
68064: LIST
68065: LIST
68066: PUSH
68067: LD_INT 1
68069: NEG
68070: PUSH
68071: LD_INT 4
68073: NEG
68074: PUSH
68075: EMPTY
68076: LIST
68077: LIST
68078: PUSH
68079: LD_INT 1
68081: NEG
68082: PUSH
68083: LD_INT 5
68085: NEG
68086: PUSH
68087: EMPTY
68088: LIST
68089: LIST
68090: PUSH
68091: LD_INT 2
68093: PUSH
68094: LD_INT 3
68096: NEG
68097: PUSH
68098: EMPTY
68099: LIST
68100: LIST
68101: PUSH
68102: LD_INT 2
68104: NEG
68105: PUSH
68106: LD_INT 5
68108: NEG
68109: PUSH
68110: EMPTY
68111: LIST
68112: LIST
68113: PUSH
68114: EMPTY
68115: LIST
68116: LIST
68117: LIST
68118: LIST
68119: LIST
68120: LIST
68121: LIST
68122: LIST
68123: LIST
68124: LIST
68125: LIST
68126: LIST
68127: LIST
68128: LIST
68129: LIST
68130: LIST
68131: LIST
68132: LIST
68133: LIST
68134: LIST
68135: LIST
68136: LIST
68137: LIST
68138: LIST
68139: LIST
68140: LIST
68141: LIST
68142: LIST
68143: LIST
68144: LIST
68145: LIST
68146: LIST
68147: LIST
68148: LIST
68149: LIST
68150: LIST
68151: LIST
68152: LIST
68153: LIST
68154: LIST
68155: LIST
68156: LIST
68157: LIST
68158: LIST
68159: LIST
68160: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68161: LD_ADDR_VAR 0 31
68165: PUSH
68166: LD_INT 0
68168: PUSH
68169: LD_INT 4
68171: PUSH
68172: EMPTY
68173: LIST
68174: LIST
68175: PUSH
68176: LD_INT 0
68178: PUSH
68179: LD_INT 3
68181: PUSH
68182: EMPTY
68183: LIST
68184: LIST
68185: PUSH
68186: LD_INT 1
68188: PUSH
68189: LD_INT 4
68191: PUSH
68192: EMPTY
68193: LIST
68194: LIST
68195: PUSH
68196: LD_INT 1
68198: PUSH
68199: LD_INT 5
68201: PUSH
68202: EMPTY
68203: LIST
68204: LIST
68205: PUSH
68206: LD_INT 0
68208: PUSH
68209: LD_INT 5
68211: PUSH
68212: EMPTY
68213: LIST
68214: LIST
68215: PUSH
68216: LD_INT 1
68218: NEG
68219: PUSH
68220: LD_INT 4
68222: PUSH
68223: EMPTY
68224: LIST
68225: LIST
68226: PUSH
68227: LD_INT 1
68229: NEG
68230: PUSH
68231: LD_INT 3
68233: PUSH
68234: EMPTY
68235: LIST
68236: LIST
68237: PUSH
68238: LD_INT 2
68240: PUSH
68241: LD_INT 5
68243: PUSH
68244: EMPTY
68245: LIST
68246: LIST
68247: PUSH
68248: LD_INT 2
68250: NEG
68251: PUSH
68252: LD_INT 3
68254: PUSH
68255: EMPTY
68256: LIST
68257: LIST
68258: PUSH
68259: LD_INT 3
68261: NEG
68262: PUSH
68263: LD_INT 0
68265: PUSH
68266: EMPTY
68267: LIST
68268: LIST
68269: PUSH
68270: LD_INT 3
68272: NEG
68273: PUSH
68274: LD_INT 1
68276: NEG
68277: PUSH
68278: EMPTY
68279: LIST
68280: LIST
68281: PUSH
68282: LD_INT 2
68284: NEG
68285: PUSH
68286: LD_INT 0
68288: PUSH
68289: EMPTY
68290: LIST
68291: LIST
68292: PUSH
68293: LD_INT 2
68295: NEG
68296: PUSH
68297: LD_INT 1
68299: PUSH
68300: EMPTY
68301: LIST
68302: LIST
68303: PUSH
68304: LD_INT 3
68306: NEG
68307: PUSH
68308: LD_INT 1
68310: PUSH
68311: EMPTY
68312: LIST
68313: LIST
68314: PUSH
68315: LD_INT 4
68317: NEG
68318: PUSH
68319: LD_INT 0
68321: PUSH
68322: EMPTY
68323: LIST
68324: LIST
68325: PUSH
68326: LD_INT 4
68328: NEG
68329: PUSH
68330: LD_INT 1
68332: NEG
68333: PUSH
68334: EMPTY
68335: LIST
68336: LIST
68337: PUSH
68338: LD_INT 4
68340: NEG
68341: PUSH
68342: LD_INT 2
68344: NEG
68345: PUSH
68346: EMPTY
68347: LIST
68348: LIST
68349: PUSH
68350: LD_INT 2
68352: NEG
68353: PUSH
68354: LD_INT 2
68356: PUSH
68357: EMPTY
68358: LIST
68359: LIST
68360: PUSH
68361: LD_INT 4
68363: NEG
68364: PUSH
68365: LD_INT 4
68367: NEG
68368: PUSH
68369: EMPTY
68370: LIST
68371: LIST
68372: PUSH
68373: LD_INT 4
68375: NEG
68376: PUSH
68377: LD_INT 5
68379: NEG
68380: PUSH
68381: EMPTY
68382: LIST
68383: LIST
68384: PUSH
68385: LD_INT 3
68387: NEG
68388: PUSH
68389: LD_INT 4
68391: NEG
68392: PUSH
68393: EMPTY
68394: LIST
68395: LIST
68396: PUSH
68397: LD_INT 3
68399: NEG
68400: PUSH
68401: LD_INT 3
68403: NEG
68404: PUSH
68405: EMPTY
68406: LIST
68407: LIST
68408: PUSH
68409: LD_INT 4
68411: NEG
68412: PUSH
68413: LD_INT 3
68415: NEG
68416: PUSH
68417: EMPTY
68418: LIST
68419: LIST
68420: PUSH
68421: LD_INT 5
68423: NEG
68424: PUSH
68425: LD_INT 4
68427: NEG
68428: PUSH
68429: EMPTY
68430: LIST
68431: LIST
68432: PUSH
68433: LD_INT 5
68435: NEG
68436: PUSH
68437: LD_INT 5
68439: NEG
68440: PUSH
68441: EMPTY
68442: LIST
68443: LIST
68444: PUSH
68445: LD_INT 3
68447: NEG
68448: PUSH
68449: LD_INT 5
68451: NEG
68452: PUSH
68453: EMPTY
68454: LIST
68455: LIST
68456: PUSH
68457: LD_INT 5
68459: NEG
68460: PUSH
68461: LD_INT 3
68463: NEG
68464: PUSH
68465: EMPTY
68466: LIST
68467: LIST
68468: PUSH
68469: LD_INT 0
68471: PUSH
68472: LD_INT 3
68474: NEG
68475: PUSH
68476: EMPTY
68477: LIST
68478: LIST
68479: PUSH
68480: LD_INT 0
68482: PUSH
68483: LD_INT 4
68485: NEG
68486: PUSH
68487: EMPTY
68488: LIST
68489: LIST
68490: PUSH
68491: LD_INT 1
68493: PUSH
68494: LD_INT 3
68496: NEG
68497: PUSH
68498: EMPTY
68499: LIST
68500: LIST
68501: PUSH
68502: LD_INT 1
68504: PUSH
68505: LD_INT 2
68507: NEG
68508: PUSH
68509: EMPTY
68510: LIST
68511: LIST
68512: PUSH
68513: LD_INT 0
68515: PUSH
68516: LD_INT 2
68518: NEG
68519: PUSH
68520: EMPTY
68521: LIST
68522: LIST
68523: PUSH
68524: LD_INT 1
68526: NEG
68527: PUSH
68528: LD_INT 3
68530: NEG
68531: PUSH
68532: EMPTY
68533: LIST
68534: LIST
68535: PUSH
68536: LD_INT 1
68538: NEG
68539: PUSH
68540: LD_INT 4
68542: NEG
68543: PUSH
68544: EMPTY
68545: LIST
68546: LIST
68547: PUSH
68548: LD_INT 2
68550: PUSH
68551: LD_INT 2
68553: NEG
68554: PUSH
68555: EMPTY
68556: LIST
68557: LIST
68558: PUSH
68559: LD_INT 2
68561: NEG
68562: PUSH
68563: LD_INT 4
68565: NEG
68566: PUSH
68567: EMPTY
68568: LIST
68569: LIST
68570: PUSH
68571: LD_INT 4
68573: PUSH
68574: LD_INT 0
68576: PUSH
68577: EMPTY
68578: LIST
68579: LIST
68580: PUSH
68581: LD_INT 4
68583: PUSH
68584: LD_INT 1
68586: NEG
68587: PUSH
68588: EMPTY
68589: LIST
68590: LIST
68591: PUSH
68592: LD_INT 5
68594: PUSH
68595: LD_INT 0
68597: PUSH
68598: EMPTY
68599: LIST
68600: LIST
68601: PUSH
68602: LD_INT 5
68604: PUSH
68605: LD_INT 1
68607: PUSH
68608: EMPTY
68609: LIST
68610: LIST
68611: PUSH
68612: LD_INT 4
68614: PUSH
68615: LD_INT 1
68617: PUSH
68618: EMPTY
68619: LIST
68620: LIST
68621: PUSH
68622: LD_INT 3
68624: PUSH
68625: LD_INT 0
68627: PUSH
68628: EMPTY
68629: LIST
68630: LIST
68631: PUSH
68632: LD_INT 3
68634: PUSH
68635: LD_INT 1
68637: NEG
68638: PUSH
68639: EMPTY
68640: LIST
68641: LIST
68642: PUSH
68643: LD_INT 3
68645: PUSH
68646: LD_INT 2
68648: NEG
68649: PUSH
68650: EMPTY
68651: LIST
68652: LIST
68653: PUSH
68654: LD_INT 5
68656: PUSH
68657: LD_INT 2
68659: PUSH
68660: EMPTY
68661: LIST
68662: LIST
68663: PUSH
68664: EMPTY
68665: LIST
68666: LIST
68667: LIST
68668: LIST
68669: LIST
68670: LIST
68671: LIST
68672: LIST
68673: LIST
68674: LIST
68675: LIST
68676: LIST
68677: LIST
68678: LIST
68679: LIST
68680: LIST
68681: LIST
68682: LIST
68683: LIST
68684: LIST
68685: LIST
68686: LIST
68687: LIST
68688: LIST
68689: LIST
68690: LIST
68691: LIST
68692: LIST
68693: LIST
68694: LIST
68695: LIST
68696: LIST
68697: LIST
68698: LIST
68699: LIST
68700: LIST
68701: LIST
68702: LIST
68703: LIST
68704: LIST
68705: LIST
68706: LIST
68707: LIST
68708: LIST
68709: LIST
68710: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
68711: LD_ADDR_VAR 0 32
68715: PUSH
68716: LD_INT 4
68718: NEG
68719: PUSH
68720: LD_INT 0
68722: PUSH
68723: EMPTY
68724: LIST
68725: LIST
68726: PUSH
68727: LD_INT 4
68729: NEG
68730: PUSH
68731: LD_INT 1
68733: NEG
68734: PUSH
68735: EMPTY
68736: LIST
68737: LIST
68738: PUSH
68739: LD_INT 3
68741: NEG
68742: PUSH
68743: LD_INT 0
68745: PUSH
68746: EMPTY
68747: LIST
68748: LIST
68749: PUSH
68750: LD_INT 3
68752: NEG
68753: PUSH
68754: LD_INT 1
68756: PUSH
68757: EMPTY
68758: LIST
68759: LIST
68760: PUSH
68761: LD_INT 4
68763: NEG
68764: PUSH
68765: LD_INT 1
68767: PUSH
68768: EMPTY
68769: LIST
68770: LIST
68771: PUSH
68772: LD_INT 5
68774: NEG
68775: PUSH
68776: LD_INT 0
68778: PUSH
68779: EMPTY
68780: LIST
68781: LIST
68782: PUSH
68783: LD_INT 5
68785: NEG
68786: PUSH
68787: LD_INT 1
68789: NEG
68790: PUSH
68791: EMPTY
68792: LIST
68793: LIST
68794: PUSH
68795: LD_INT 5
68797: NEG
68798: PUSH
68799: LD_INT 2
68801: NEG
68802: PUSH
68803: EMPTY
68804: LIST
68805: LIST
68806: PUSH
68807: LD_INT 3
68809: NEG
68810: PUSH
68811: LD_INT 2
68813: PUSH
68814: EMPTY
68815: LIST
68816: LIST
68817: PUSH
68818: LD_INT 3
68820: NEG
68821: PUSH
68822: LD_INT 3
68824: NEG
68825: PUSH
68826: EMPTY
68827: LIST
68828: LIST
68829: PUSH
68830: LD_INT 3
68832: NEG
68833: PUSH
68834: LD_INT 4
68836: NEG
68837: PUSH
68838: EMPTY
68839: LIST
68840: LIST
68841: PUSH
68842: LD_INT 2
68844: NEG
68845: PUSH
68846: LD_INT 3
68848: NEG
68849: PUSH
68850: EMPTY
68851: LIST
68852: LIST
68853: PUSH
68854: LD_INT 2
68856: NEG
68857: PUSH
68858: LD_INT 2
68860: NEG
68861: PUSH
68862: EMPTY
68863: LIST
68864: LIST
68865: PUSH
68866: LD_INT 3
68868: NEG
68869: PUSH
68870: LD_INT 2
68872: NEG
68873: PUSH
68874: EMPTY
68875: LIST
68876: LIST
68877: PUSH
68878: LD_INT 4
68880: NEG
68881: PUSH
68882: LD_INT 3
68884: NEG
68885: PUSH
68886: EMPTY
68887: LIST
68888: LIST
68889: PUSH
68890: LD_INT 4
68892: NEG
68893: PUSH
68894: LD_INT 4
68896: NEG
68897: PUSH
68898: EMPTY
68899: LIST
68900: LIST
68901: PUSH
68902: LD_INT 2
68904: NEG
68905: PUSH
68906: LD_INT 4
68908: NEG
68909: PUSH
68910: EMPTY
68911: LIST
68912: LIST
68913: PUSH
68914: LD_INT 4
68916: NEG
68917: PUSH
68918: LD_INT 2
68920: NEG
68921: PUSH
68922: EMPTY
68923: LIST
68924: LIST
68925: PUSH
68926: LD_INT 0
68928: PUSH
68929: LD_INT 4
68931: NEG
68932: PUSH
68933: EMPTY
68934: LIST
68935: LIST
68936: PUSH
68937: LD_INT 0
68939: PUSH
68940: LD_INT 5
68942: NEG
68943: PUSH
68944: EMPTY
68945: LIST
68946: LIST
68947: PUSH
68948: LD_INT 1
68950: PUSH
68951: LD_INT 4
68953: NEG
68954: PUSH
68955: EMPTY
68956: LIST
68957: LIST
68958: PUSH
68959: LD_INT 1
68961: PUSH
68962: LD_INT 3
68964: NEG
68965: PUSH
68966: EMPTY
68967: LIST
68968: LIST
68969: PUSH
68970: LD_INT 0
68972: PUSH
68973: LD_INT 3
68975: NEG
68976: PUSH
68977: EMPTY
68978: LIST
68979: LIST
68980: PUSH
68981: LD_INT 1
68983: NEG
68984: PUSH
68985: LD_INT 4
68987: NEG
68988: PUSH
68989: EMPTY
68990: LIST
68991: LIST
68992: PUSH
68993: LD_INT 1
68995: NEG
68996: PUSH
68997: LD_INT 5
68999: NEG
69000: PUSH
69001: EMPTY
69002: LIST
69003: LIST
69004: PUSH
69005: LD_INT 2
69007: PUSH
69008: LD_INT 3
69010: NEG
69011: PUSH
69012: EMPTY
69013: LIST
69014: LIST
69015: PUSH
69016: LD_INT 2
69018: NEG
69019: PUSH
69020: LD_INT 5
69022: NEG
69023: PUSH
69024: EMPTY
69025: LIST
69026: LIST
69027: PUSH
69028: LD_INT 3
69030: PUSH
69031: LD_INT 0
69033: PUSH
69034: EMPTY
69035: LIST
69036: LIST
69037: PUSH
69038: LD_INT 3
69040: PUSH
69041: LD_INT 1
69043: NEG
69044: PUSH
69045: EMPTY
69046: LIST
69047: LIST
69048: PUSH
69049: LD_INT 4
69051: PUSH
69052: LD_INT 0
69054: PUSH
69055: EMPTY
69056: LIST
69057: LIST
69058: PUSH
69059: LD_INT 4
69061: PUSH
69062: LD_INT 1
69064: PUSH
69065: EMPTY
69066: LIST
69067: LIST
69068: PUSH
69069: LD_INT 3
69071: PUSH
69072: LD_INT 1
69074: PUSH
69075: EMPTY
69076: LIST
69077: LIST
69078: PUSH
69079: LD_INT 2
69081: PUSH
69082: LD_INT 0
69084: PUSH
69085: EMPTY
69086: LIST
69087: LIST
69088: PUSH
69089: LD_INT 2
69091: PUSH
69092: LD_INT 1
69094: NEG
69095: PUSH
69096: EMPTY
69097: LIST
69098: LIST
69099: PUSH
69100: LD_INT 2
69102: PUSH
69103: LD_INT 2
69105: NEG
69106: PUSH
69107: EMPTY
69108: LIST
69109: LIST
69110: PUSH
69111: LD_INT 4
69113: PUSH
69114: LD_INT 2
69116: PUSH
69117: EMPTY
69118: LIST
69119: LIST
69120: PUSH
69121: LD_INT 4
69123: PUSH
69124: LD_INT 4
69126: PUSH
69127: EMPTY
69128: LIST
69129: LIST
69130: PUSH
69131: LD_INT 4
69133: PUSH
69134: LD_INT 3
69136: PUSH
69137: EMPTY
69138: LIST
69139: LIST
69140: PUSH
69141: LD_INT 5
69143: PUSH
69144: LD_INT 4
69146: PUSH
69147: EMPTY
69148: LIST
69149: LIST
69150: PUSH
69151: LD_INT 5
69153: PUSH
69154: LD_INT 5
69156: PUSH
69157: EMPTY
69158: LIST
69159: LIST
69160: PUSH
69161: LD_INT 4
69163: PUSH
69164: LD_INT 5
69166: PUSH
69167: EMPTY
69168: LIST
69169: LIST
69170: PUSH
69171: LD_INT 3
69173: PUSH
69174: LD_INT 4
69176: PUSH
69177: EMPTY
69178: LIST
69179: LIST
69180: PUSH
69181: LD_INT 3
69183: PUSH
69184: LD_INT 3
69186: PUSH
69187: EMPTY
69188: LIST
69189: LIST
69190: PUSH
69191: LD_INT 5
69193: PUSH
69194: LD_INT 3
69196: PUSH
69197: EMPTY
69198: LIST
69199: LIST
69200: PUSH
69201: LD_INT 3
69203: PUSH
69204: LD_INT 5
69206: PUSH
69207: EMPTY
69208: LIST
69209: LIST
69210: PUSH
69211: EMPTY
69212: LIST
69213: LIST
69214: LIST
69215: LIST
69216: LIST
69217: LIST
69218: LIST
69219: LIST
69220: LIST
69221: LIST
69222: LIST
69223: LIST
69224: LIST
69225: LIST
69226: LIST
69227: LIST
69228: LIST
69229: LIST
69230: LIST
69231: LIST
69232: LIST
69233: LIST
69234: LIST
69235: LIST
69236: LIST
69237: LIST
69238: LIST
69239: LIST
69240: LIST
69241: LIST
69242: LIST
69243: LIST
69244: LIST
69245: LIST
69246: LIST
69247: LIST
69248: LIST
69249: LIST
69250: LIST
69251: LIST
69252: LIST
69253: LIST
69254: LIST
69255: LIST
69256: LIST
69257: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69258: LD_ADDR_VAR 0 33
69262: PUSH
69263: LD_INT 4
69265: NEG
69266: PUSH
69267: LD_INT 4
69269: NEG
69270: PUSH
69271: EMPTY
69272: LIST
69273: LIST
69274: PUSH
69275: LD_INT 4
69277: NEG
69278: PUSH
69279: LD_INT 5
69281: NEG
69282: PUSH
69283: EMPTY
69284: LIST
69285: LIST
69286: PUSH
69287: LD_INT 3
69289: NEG
69290: PUSH
69291: LD_INT 4
69293: NEG
69294: PUSH
69295: EMPTY
69296: LIST
69297: LIST
69298: PUSH
69299: LD_INT 3
69301: NEG
69302: PUSH
69303: LD_INT 3
69305: NEG
69306: PUSH
69307: EMPTY
69308: LIST
69309: LIST
69310: PUSH
69311: LD_INT 4
69313: NEG
69314: PUSH
69315: LD_INT 3
69317: NEG
69318: PUSH
69319: EMPTY
69320: LIST
69321: LIST
69322: PUSH
69323: LD_INT 5
69325: NEG
69326: PUSH
69327: LD_INT 4
69329: NEG
69330: PUSH
69331: EMPTY
69332: LIST
69333: LIST
69334: PUSH
69335: LD_INT 5
69337: NEG
69338: PUSH
69339: LD_INT 5
69341: NEG
69342: PUSH
69343: EMPTY
69344: LIST
69345: LIST
69346: PUSH
69347: LD_INT 3
69349: NEG
69350: PUSH
69351: LD_INT 5
69353: NEG
69354: PUSH
69355: EMPTY
69356: LIST
69357: LIST
69358: PUSH
69359: LD_INT 5
69361: NEG
69362: PUSH
69363: LD_INT 3
69365: NEG
69366: PUSH
69367: EMPTY
69368: LIST
69369: LIST
69370: PUSH
69371: LD_INT 0
69373: PUSH
69374: LD_INT 3
69376: NEG
69377: PUSH
69378: EMPTY
69379: LIST
69380: LIST
69381: PUSH
69382: LD_INT 0
69384: PUSH
69385: LD_INT 4
69387: NEG
69388: PUSH
69389: EMPTY
69390: LIST
69391: LIST
69392: PUSH
69393: LD_INT 1
69395: PUSH
69396: LD_INT 3
69398: NEG
69399: PUSH
69400: EMPTY
69401: LIST
69402: LIST
69403: PUSH
69404: LD_INT 1
69406: PUSH
69407: LD_INT 2
69409: NEG
69410: PUSH
69411: EMPTY
69412: LIST
69413: LIST
69414: PUSH
69415: LD_INT 0
69417: PUSH
69418: LD_INT 2
69420: NEG
69421: PUSH
69422: EMPTY
69423: LIST
69424: LIST
69425: PUSH
69426: LD_INT 1
69428: NEG
69429: PUSH
69430: LD_INT 3
69432: NEG
69433: PUSH
69434: EMPTY
69435: LIST
69436: LIST
69437: PUSH
69438: LD_INT 1
69440: NEG
69441: PUSH
69442: LD_INT 4
69444: NEG
69445: PUSH
69446: EMPTY
69447: LIST
69448: LIST
69449: PUSH
69450: LD_INT 2
69452: PUSH
69453: LD_INT 2
69455: NEG
69456: PUSH
69457: EMPTY
69458: LIST
69459: LIST
69460: PUSH
69461: LD_INT 2
69463: NEG
69464: PUSH
69465: LD_INT 4
69467: NEG
69468: PUSH
69469: EMPTY
69470: LIST
69471: LIST
69472: PUSH
69473: LD_INT 4
69475: PUSH
69476: LD_INT 0
69478: PUSH
69479: EMPTY
69480: LIST
69481: LIST
69482: PUSH
69483: LD_INT 4
69485: PUSH
69486: LD_INT 1
69488: NEG
69489: PUSH
69490: EMPTY
69491: LIST
69492: LIST
69493: PUSH
69494: LD_INT 5
69496: PUSH
69497: LD_INT 0
69499: PUSH
69500: EMPTY
69501: LIST
69502: LIST
69503: PUSH
69504: LD_INT 5
69506: PUSH
69507: LD_INT 1
69509: PUSH
69510: EMPTY
69511: LIST
69512: LIST
69513: PUSH
69514: LD_INT 4
69516: PUSH
69517: LD_INT 1
69519: PUSH
69520: EMPTY
69521: LIST
69522: LIST
69523: PUSH
69524: LD_INT 3
69526: PUSH
69527: LD_INT 0
69529: PUSH
69530: EMPTY
69531: LIST
69532: LIST
69533: PUSH
69534: LD_INT 3
69536: PUSH
69537: LD_INT 1
69539: NEG
69540: PUSH
69541: EMPTY
69542: LIST
69543: LIST
69544: PUSH
69545: LD_INT 3
69547: PUSH
69548: LD_INT 2
69550: NEG
69551: PUSH
69552: EMPTY
69553: LIST
69554: LIST
69555: PUSH
69556: LD_INT 5
69558: PUSH
69559: LD_INT 2
69561: PUSH
69562: EMPTY
69563: LIST
69564: LIST
69565: PUSH
69566: LD_INT 3
69568: PUSH
69569: LD_INT 3
69571: PUSH
69572: EMPTY
69573: LIST
69574: LIST
69575: PUSH
69576: LD_INT 3
69578: PUSH
69579: LD_INT 2
69581: PUSH
69582: EMPTY
69583: LIST
69584: LIST
69585: PUSH
69586: LD_INT 4
69588: PUSH
69589: LD_INT 3
69591: PUSH
69592: EMPTY
69593: LIST
69594: LIST
69595: PUSH
69596: LD_INT 4
69598: PUSH
69599: LD_INT 4
69601: PUSH
69602: EMPTY
69603: LIST
69604: LIST
69605: PUSH
69606: LD_INT 3
69608: PUSH
69609: LD_INT 4
69611: PUSH
69612: EMPTY
69613: LIST
69614: LIST
69615: PUSH
69616: LD_INT 2
69618: PUSH
69619: LD_INT 3
69621: PUSH
69622: EMPTY
69623: LIST
69624: LIST
69625: PUSH
69626: LD_INT 2
69628: PUSH
69629: LD_INT 2
69631: PUSH
69632: EMPTY
69633: LIST
69634: LIST
69635: PUSH
69636: LD_INT 4
69638: PUSH
69639: LD_INT 2
69641: PUSH
69642: EMPTY
69643: LIST
69644: LIST
69645: PUSH
69646: LD_INT 2
69648: PUSH
69649: LD_INT 4
69651: PUSH
69652: EMPTY
69653: LIST
69654: LIST
69655: PUSH
69656: LD_INT 0
69658: PUSH
69659: LD_INT 4
69661: PUSH
69662: EMPTY
69663: LIST
69664: LIST
69665: PUSH
69666: LD_INT 0
69668: PUSH
69669: LD_INT 3
69671: PUSH
69672: EMPTY
69673: LIST
69674: LIST
69675: PUSH
69676: LD_INT 1
69678: PUSH
69679: LD_INT 4
69681: PUSH
69682: EMPTY
69683: LIST
69684: LIST
69685: PUSH
69686: LD_INT 1
69688: PUSH
69689: LD_INT 5
69691: PUSH
69692: EMPTY
69693: LIST
69694: LIST
69695: PUSH
69696: LD_INT 0
69698: PUSH
69699: LD_INT 5
69701: PUSH
69702: EMPTY
69703: LIST
69704: LIST
69705: PUSH
69706: LD_INT 1
69708: NEG
69709: PUSH
69710: LD_INT 4
69712: PUSH
69713: EMPTY
69714: LIST
69715: LIST
69716: PUSH
69717: LD_INT 1
69719: NEG
69720: PUSH
69721: LD_INT 3
69723: PUSH
69724: EMPTY
69725: LIST
69726: LIST
69727: PUSH
69728: LD_INT 2
69730: PUSH
69731: LD_INT 5
69733: PUSH
69734: EMPTY
69735: LIST
69736: LIST
69737: PUSH
69738: LD_INT 2
69740: NEG
69741: PUSH
69742: LD_INT 3
69744: PUSH
69745: EMPTY
69746: LIST
69747: LIST
69748: PUSH
69749: EMPTY
69750: LIST
69751: LIST
69752: LIST
69753: LIST
69754: LIST
69755: LIST
69756: LIST
69757: LIST
69758: LIST
69759: LIST
69760: LIST
69761: LIST
69762: LIST
69763: LIST
69764: LIST
69765: LIST
69766: LIST
69767: LIST
69768: LIST
69769: LIST
69770: LIST
69771: LIST
69772: LIST
69773: LIST
69774: LIST
69775: LIST
69776: LIST
69777: LIST
69778: LIST
69779: LIST
69780: LIST
69781: LIST
69782: LIST
69783: LIST
69784: LIST
69785: LIST
69786: LIST
69787: LIST
69788: LIST
69789: LIST
69790: LIST
69791: LIST
69792: LIST
69793: LIST
69794: LIST
69795: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
69796: LD_ADDR_VAR 0 34
69800: PUSH
69801: LD_INT 0
69803: PUSH
69804: LD_INT 4
69806: NEG
69807: PUSH
69808: EMPTY
69809: LIST
69810: LIST
69811: PUSH
69812: LD_INT 0
69814: PUSH
69815: LD_INT 5
69817: NEG
69818: PUSH
69819: EMPTY
69820: LIST
69821: LIST
69822: PUSH
69823: LD_INT 1
69825: PUSH
69826: LD_INT 4
69828: NEG
69829: PUSH
69830: EMPTY
69831: LIST
69832: LIST
69833: PUSH
69834: LD_INT 1
69836: PUSH
69837: LD_INT 3
69839: NEG
69840: PUSH
69841: EMPTY
69842: LIST
69843: LIST
69844: PUSH
69845: LD_INT 0
69847: PUSH
69848: LD_INT 3
69850: NEG
69851: PUSH
69852: EMPTY
69853: LIST
69854: LIST
69855: PUSH
69856: LD_INT 1
69858: NEG
69859: PUSH
69860: LD_INT 4
69862: NEG
69863: PUSH
69864: EMPTY
69865: LIST
69866: LIST
69867: PUSH
69868: LD_INT 1
69870: NEG
69871: PUSH
69872: LD_INT 5
69874: NEG
69875: PUSH
69876: EMPTY
69877: LIST
69878: LIST
69879: PUSH
69880: LD_INT 2
69882: PUSH
69883: LD_INT 3
69885: NEG
69886: PUSH
69887: EMPTY
69888: LIST
69889: LIST
69890: PUSH
69891: LD_INT 2
69893: NEG
69894: PUSH
69895: LD_INT 5
69897: NEG
69898: PUSH
69899: EMPTY
69900: LIST
69901: LIST
69902: PUSH
69903: LD_INT 3
69905: PUSH
69906: LD_INT 0
69908: PUSH
69909: EMPTY
69910: LIST
69911: LIST
69912: PUSH
69913: LD_INT 3
69915: PUSH
69916: LD_INT 1
69918: NEG
69919: PUSH
69920: EMPTY
69921: LIST
69922: LIST
69923: PUSH
69924: LD_INT 4
69926: PUSH
69927: LD_INT 0
69929: PUSH
69930: EMPTY
69931: LIST
69932: LIST
69933: PUSH
69934: LD_INT 4
69936: PUSH
69937: LD_INT 1
69939: PUSH
69940: EMPTY
69941: LIST
69942: LIST
69943: PUSH
69944: LD_INT 3
69946: PUSH
69947: LD_INT 1
69949: PUSH
69950: EMPTY
69951: LIST
69952: LIST
69953: PUSH
69954: LD_INT 2
69956: PUSH
69957: LD_INT 0
69959: PUSH
69960: EMPTY
69961: LIST
69962: LIST
69963: PUSH
69964: LD_INT 2
69966: PUSH
69967: LD_INT 1
69969: NEG
69970: PUSH
69971: EMPTY
69972: LIST
69973: LIST
69974: PUSH
69975: LD_INT 2
69977: PUSH
69978: LD_INT 2
69980: NEG
69981: PUSH
69982: EMPTY
69983: LIST
69984: LIST
69985: PUSH
69986: LD_INT 4
69988: PUSH
69989: LD_INT 2
69991: PUSH
69992: EMPTY
69993: LIST
69994: LIST
69995: PUSH
69996: LD_INT 4
69998: PUSH
69999: LD_INT 4
70001: PUSH
70002: EMPTY
70003: LIST
70004: LIST
70005: PUSH
70006: LD_INT 4
70008: PUSH
70009: LD_INT 3
70011: PUSH
70012: EMPTY
70013: LIST
70014: LIST
70015: PUSH
70016: LD_INT 5
70018: PUSH
70019: LD_INT 4
70021: PUSH
70022: EMPTY
70023: LIST
70024: LIST
70025: PUSH
70026: LD_INT 5
70028: PUSH
70029: LD_INT 5
70031: PUSH
70032: EMPTY
70033: LIST
70034: LIST
70035: PUSH
70036: LD_INT 4
70038: PUSH
70039: LD_INT 5
70041: PUSH
70042: EMPTY
70043: LIST
70044: LIST
70045: PUSH
70046: LD_INT 3
70048: PUSH
70049: LD_INT 4
70051: PUSH
70052: EMPTY
70053: LIST
70054: LIST
70055: PUSH
70056: LD_INT 3
70058: PUSH
70059: LD_INT 3
70061: PUSH
70062: EMPTY
70063: LIST
70064: LIST
70065: PUSH
70066: LD_INT 5
70068: PUSH
70069: LD_INT 3
70071: PUSH
70072: EMPTY
70073: LIST
70074: LIST
70075: PUSH
70076: LD_INT 3
70078: PUSH
70079: LD_INT 5
70081: PUSH
70082: EMPTY
70083: LIST
70084: LIST
70085: PUSH
70086: LD_INT 0
70088: PUSH
70089: LD_INT 3
70091: PUSH
70092: EMPTY
70093: LIST
70094: LIST
70095: PUSH
70096: LD_INT 0
70098: PUSH
70099: LD_INT 2
70101: PUSH
70102: EMPTY
70103: LIST
70104: LIST
70105: PUSH
70106: LD_INT 1
70108: PUSH
70109: LD_INT 3
70111: PUSH
70112: EMPTY
70113: LIST
70114: LIST
70115: PUSH
70116: LD_INT 1
70118: PUSH
70119: LD_INT 4
70121: PUSH
70122: EMPTY
70123: LIST
70124: LIST
70125: PUSH
70126: LD_INT 0
70128: PUSH
70129: LD_INT 4
70131: PUSH
70132: EMPTY
70133: LIST
70134: LIST
70135: PUSH
70136: LD_INT 1
70138: NEG
70139: PUSH
70140: LD_INT 3
70142: PUSH
70143: EMPTY
70144: LIST
70145: LIST
70146: PUSH
70147: LD_INT 1
70149: NEG
70150: PUSH
70151: LD_INT 2
70153: PUSH
70154: EMPTY
70155: LIST
70156: LIST
70157: PUSH
70158: LD_INT 2
70160: PUSH
70161: LD_INT 4
70163: PUSH
70164: EMPTY
70165: LIST
70166: LIST
70167: PUSH
70168: LD_INT 2
70170: NEG
70171: PUSH
70172: LD_INT 2
70174: PUSH
70175: EMPTY
70176: LIST
70177: LIST
70178: PUSH
70179: LD_INT 4
70181: NEG
70182: PUSH
70183: LD_INT 0
70185: PUSH
70186: EMPTY
70187: LIST
70188: LIST
70189: PUSH
70190: LD_INT 4
70192: NEG
70193: PUSH
70194: LD_INT 1
70196: NEG
70197: PUSH
70198: EMPTY
70199: LIST
70200: LIST
70201: PUSH
70202: LD_INT 3
70204: NEG
70205: PUSH
70206: LD_INT 0
70208: PUSH
70209: EMPTY
70210: LIST
70211: LIST
70212: PUSH
70213: LD_INT 3
70215: NEG
70216: PUSH
70217: LD_INT 1
70219: PUSH
70220: EMPTY
70221: LIST
70222: LIST
70223: PUSH
70224: LD_INT 4
70226: NEG
70227: PUSH
70228: LD_INT 1
70230: PUSH
70231: EMPTY
70232: LIST
70233: LIST
70234: PUSH
70235: LD_INT 5
70237: NEG
70238: PUSH
70239: LD_INT 0
70241: PUSH
70242: EMPTY
70243: LIST
70244: LIST
70245: PUSH
70246: LD_INT 5
70248: NEG
70249: PUSH
70250: LD_INT 1
70252: NEG
70253: PUSH
70254: EMPTY
70255: LIST
70256: LIST
70257: PUSH
70258: LD_INT 5
70260: NEG
70261: PUSH
70262: LD_INT 2
70264: NEG
70265: PUSH
70266: EMPTY
70267: LIST
70268: LIST
70269: PUSH
70270: LD_INT 3
70272: NEG
70273: PUSH
70274: LD_INT 2
70276: PUSH
70277: EMPTY
70278: LIST
70279: LIST
70280: PUSH
70281: EMPTY
70282: LIST
70283: LIST
70284: LIST
70285: LIST
70286: LIST
70287: LIST
70288: LIST
70289: LIST
70290: LIST
70291: LIST
70292: LIST
70293: LIST
70294: LIST
70295: LIST
70296: LIST
70297: LIST
70298: LIST
70299: LIST
70300: LIST
70301: LIST
70302: LIST
70303: LIST
70304: LIST
70305: LIST
70306: LIST
70307: LIST
70308: LIST
70309: LIST
70310: LIST
70311: LIST
70312: LIST
70313: LIST
70314: LIST
70315: LIST
70316: LIST
70317: LIST
70318: LIST
70319: LIST
70320: LIST
70321: LIST
70322: LIST
70323: LIST
70324: LIST
70325: LIST
70326: LIST
70327: ST_TO_ADDR
// end ; end ;
70328: GO 70331
70330: POP
// case btype of b_depot , b_warehouse :
70331: LD_VAR 0 1
70335: PUSH
70336: LD_INT 0
70338: DOUBLE
70339: EQUAL
70340: IFTRUE 70350
70342: LD_INT 1
70344: DOUBLE
70345: EQUAL
70346: IFTRUE 70350
70348: GO 70551
70350: POP
// case nation of nation_american :
70351: LD_VAR 0 5
70355: PUSH
70356: LD_INT 1
70358: DOUBLE
70359: EQUAL
70360: IFTRUE 70364
70362: GO 70420
70364: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70365: LD_ADDR_VAR 0 9
70369: PUSH
70370: LD_VAR 0 11
70374: PUSH
70375: LD_VAR 0 12
70379: PUSH
70380: LD_VAR 0 13
70384: PUSH
70385: LD_VAR 0 14
70389: PUSH
70390: LD_VAR 0 15
70394: PUSH
70395: LD_VAR 0 16
70399: PUSH
70400: EMPTY
70401: LIST
70402: LIST
70403: LIST
70404: LIST
70405: LIST
70406: LIST
70407: PUSH
70408: LD_VAR 0 4
70412: PUSH
70413: LD_INT 1
70415: PLUS
70416: ARRAY
70417: ST_TO_ADDR
70418: GO 70549
70420: LD_INT 2
70422: DOUBLE
70423: EQUAL
70424: IFTRUE 70428
70426: GO 70484
70428: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70429: LD_ADDR_VAR 0 9
70433: PUSH
70434: LD_VAR 0 17
70438: PUSH
70439: LD_VAR 0 18
70443: PUSH
70444: LD_VAR 0 19
70448: PUSH
70449: LD_VAR 0 20
70453: PUSH
70454: LD_VAR 0 21
70458: PUSH
70459: LD_VAR 0 22
70463: PUSH
70464: EMPTY
70465: LIST
70466: LIST
70467: LIST
70468: LIST
70469: LIST
70470: LIST
70471: PUSH
70472: LD_VAR 0 4
70476: PUSH
70477: LD_INT 1
70479: PLUS
70480: ARRAY
70481: ST_TO_ADDR
70482: GO 70549
70484: LD_INT 3
70486: DOUBLE
70487: EQUAL
70488: IFTRUE 70492
70490: GO 70548
70492: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70493: LD_ADDR_VAR 0 9
70497: PUSH
70498: LD_VAR 0 23
70502: PUSH
70503: LD_VAR 0 24
70507: PUSH
70508: LD_VAR 0 25
70512: PUSH
70513: LD_VAR 0 26
70517: PUSH
70518: LD_VAR 0 27
70522: PUSH
70523: LD_VAR 0 28
70527: PUSH
70528: EMPTY
70529: LIST
70530: LIST
70531: LIST
70532: LIST
70533: LIST
70534: LIST
70535: PUSH
70536: LD_VAR 0 4
70540: PUSH
70541: LD_INT 1
70543: PLUS
70544: ARRAY
70545: ST_TO_ADDR
70546: GO 70549
70548: POP
70549: GO 71104
70551: LD_INT 2
70553: DOUBLE
70554: EQUAL
70555: IFTRUE 70565
70557: LD_INT 3
70559: DOUBLE
70560: EQUAL
70561: IFTRUE 70565
70563: GO 70621
70565: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70566: LD_ADDR_VAR 0 9
70570: PUSH
70571: LD_VAR 0 29
70575: PUSH
70576: LD_VAR 0 30
70580: PUSH
70581: LD_VAR 0 31
70585: PUSH
70586: LD_VAR 0 32
70590: PUSH
70591: LD_VAR 0 33
70595: PUSH
70596: LD_VAR 0 34
70600: PUSH
70601: EMPTY
70602: LIST
70603: LIST
70604: LIST
70605: LIST
70606: LIST
70607: LIST
70608: PUSH
70609: LD_VAR 0 4
70613: PUSH
70614: LD_INT 1
70616: PLUS
70617: ARRAY
70618: ST_TO_ADDR
70619: GO 71104
70621: LD_INT 16
70623: DOUBLE
70624: EQUAL
70625: IFTRUE 70683
70627: LD_INT 17
70629: DOUBLE
70630: EQUAL
70631: IFTRUE 70683
70633: LD_INT 18
70635: DOUBLE
70636: EQUAL
70637: IFTRUE 70683
70639: LD_INT 19
70641: DOUBLE
70642: EQUAL
70643: IFTRUE 70683
70645: LD_INT 22
70647: DOUBLE
70648: EQUAL
70649: IFTRUE 70683
70651: LD_INT 20
70653: DOUBLE
70654: EQUAL
70655: IFTRUE 70683
70657: LD_INT 21
70659: DOUBLE
70660: EQUAL
70661: IFTRUE 70683
70663: LD_INT 23
70665: DOUBLE
70666: EQUAL
70667: IFTRUE 70683
70669: LD_INT 24
70671: DOUBLE
70672: EQUAL
70673: IFTRUE 70683
70675: LD_INT 25
70677: DOUBLE
70678: EQUAL
70679: IFTRUE 70683
70681: GO 70739
70683: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
70684: LD_ADDR_VAR 0 9
70688: PUSH
70689: LD_VAR 0 35
70693: PUSH
70694: LD_VAR 0 36
70698: PUSH
70699: LD_VAR 0 37
70703: PUSH
70704: LD_VAR 0 38
70708: PUSH
70709: LD_VAR 0 39
70713: PUSH
70714: LD_VAR 0 40
70718: PUSH
70719: EMPTY
70720: LIST
70721: LIST
70722: LIST
70723: LIST
70724: LIST
70725: LIST
70726: PUSH
70727: LD_VAR 0 4
70731: PUSH
70732: LD_INT 1
70734: PLUS
70735: ARRAY
70736: ST_TO_ADDR
70737: GO 71104
70739: LD_INT 6
70741: DOUBLE
70742: EQUAL
70743: IFTRUE 70795
70745: LD_INT 7
70747: DOUBLE
70748: EQUAL
70749: IFTRUE 70795
70751: LD_INT 8
70753: DOUBLE
70754: EQUAL
70755: IFTRUE 70795
70757: LD_INT 13
70759: DOUBLE
70760: EQUAL
70761: IFTRUE 70795
70763: LD_INT 12
70765: DOUBLE
70766: EQUAL
70767: IFTRUE 70795
70769: LD_INT 15
70771: DOUBLE
70772: EQUAL
70773: IFTRUE 70795
70775: LD_INT 11
70777: DOUBLE
70778: EQUAL
70779: IFTRUE 70795
70781: LD_INT 14
70783: DOUBLE
70784: EQUAL
70785: IFTRUE 70795
70787: LD_INT 10
70789: DOUBLE
70790: EQUAL
70791: IFTRUE 70795
70793: GO 70851
70795: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
70796: LD_ADDR_VAR 0 9
70800: PUSH
70801: LD_VAR 0 41
70805: PUSH
70806: LD_VAR 0 42
70810: PUSH
70811: LD_VAR 0 43
70815: PUSH
70816: LD_VAR 0 44
70820: PUSH
70821: LD_VAR 0 45
70825: PUSH
70826: LD_VAR 0 46
70830: PUSH
70831: EMPTY
70832: LIST
70833: LIST
70834: LIST
70835: LIST
70836: LIST
70837: LIST
70838: PUSH
70839: LD_VAR 0 4
70843: PUSH
70844: LD_INT 1
70846: PLUS
70847: ARRAY
70848: ST_TO_ADDR
70849: GO 71104
70851: LD_INT 36
70853: DOUBLE
70854: EQUAL
70855: IFTRUE 70859
70857: GO 70915
70859: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
70860: LD_ADDR_VAR 0 9
70864: PUSH
70865: LD_VAR 0 47
70869: PUSH
70870: LD_VAR 0 48
70874: PUSH
70875: LD_VAR 0 49
70879: PUSH
70880: LD_VAR 0 50
70884: PUSH
70885: LD_VAR 0 51
70889: PUSH
70890: LD_VAR 0 52
70894: PUSH
70895: EMPTY
70896: LIST
70897: LIST
70898: LIST
70899: LIST
70900: LIST
70901: LIST
70902: PUSH
70903: LD_VAR 0 4
70907: PUSH
70908: LD_INT 1
70910: PLUS
70911: ARRAY
70912: ST_TO_ADDR
70913: GO 71104
70915: LD_INT 4
70917: DOUBLE
70918: EQUAL
70919: IFTRUE 70941
70921: LD_INT 5
70923: DOUBLE
70924: EQUAL
70925: IFTRUE 70941
70927: LD_INT 34
70929: DOUBLE
70930: EQUAL
70931: IFTRUE 70941
70933: LD_INT 37
70935: DOUBLE
70936: EQUAL
70937: IFTRUE 70941
70939: GO 70997
70941: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
70942: LD_ADDR_VAR 0 9
70946: PUSH
70947: LD_VAR 0 53
70951: PUSH
70952: LD_VAR 0 54
70956: PUSH
70957: LD_VAR 0 55
70961: PUSH
70962: LD_VAR 0 56
70966: PUSH
70967: LD_VAR 0 57
70971: PUSH
70972: LD_VAR 0 58
70976: PUSH
70977: EMPTY
70978: LIST
70979: LIST
70980: LIST
70981: LIST
70982: LIST
70983: LIST
70984: PUSH
70985: LD_VAR 0 4
70989: PUSH
70990: LD_INT 1
70992: PLUS
70993: ARRAY
70994: ST_TO_ADDR
70995: GO 71104
70997: LD_INT 31
70999: DOUBLE
71000: EQUAL
71001: IFTRUE 71047
71003: LD_INT 32
71005: DOUBLE
71006: EQUAL
71007: IFTRUE 71047
71009: LD_INT 33
71011: DOUBLE
71012: EQUAL
71013: IFTRUE 71047
71015: LD_INT 27
71017: DOUBLE
71018: EQUAL
71019: IFTRUE 71047
71021: LD_INT 26
71023: DOUBLE
71024: EQUAL
71025: IFTRUE 71047
71027: LD_INT 28
71029: DOUBLE
71030: EQUAL
71031: IFTRUE 71047
71033: LD_INT 29
71035: DOUBLE
71036: EQUAL
71037: IFTRUE 71047
71039: LD_INT 30
71041: DOUBLE
71042: EQUAL
71043: IFTRUE 71047
71045: GO 71103
71047: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71048: LD_ADDR_VAR 0 9
71052: PUSH
71053: LD_VAR 0 59
71057: PUSH
71058: LD_VAR 0 60
71062: PUSH
71063: LD_VAR 0 61
71067: PUSH
71068: LD_VAR 0 62
71072: PUSH
71073: LD_VAR 0 63
71077: PUSH
71078: LD_VAR 0 64
71082: PUSH
71083: EMPTY
71084: LIST
71085: LIST
71086: LIST
71087: LIST
71088: LIST
71089: LIST
71090: PUSH
71091: LD_VAR 0 4
71095: PUSH
71096: LD_INT 1
71098: PLUS
71099: ARRAY
71100: ST_TO_ADDR
71101: GO 71104
71103: POP
// temp_list2 = [ ] ;
71104: LD_ADDR_VAR 0 10
71108: PUSH
71109: EMPTY
71110: ST_TO_ADDR
// for i in temp_list do
71111: LD_ADDR_VAR 0 8
71115: PUSH
71116: LD_VAR 0 9
71120: PUSH
71121: FOR_IN
71122: IFFALSE 71174
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71124: LD_ADDR_VAR 0 10
71128: PUSH
71129: LD_VAR 0 10
71133: PUSH
71134: LD_VAR 0 8
71138: PUSH
71139: LD_INT 1
71141: ARRAY
71142: PUSH
71143: LD_VAR 0 2
71147: PLUS
71148: PUSH
71149: LD_VAR 0 8
71153: PUSH
71154: LD_INT 2
71156: ARRAY
71157: PUSH
71158: LD_VAR 0 3
71162: PLUS
71163: PUSH
71164: EMPTY
71165: LIST
71166: LIST
71167: PUSH
71168: EMPTY
71169: LIST
71170: ADD
71171: ST_TO_ADDR
71172: GO 71121
71174: POP
71175: POP
// result = temp_list2 ;
71176: LD_ADDR_VAR 0 7
71180: PUSH
71181: LD_VAR 0 10
71185: ST_TO_ADDR
// end ;
71186: LD_VAR 0 7
71190: RET
// export function EnemyInRange ( unit , dist ) ; begin
71191: LD_INT 0
71193: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71194: LD_ADDR_VAR 0 3
71198: PUSH
71199: LD_VAR 0 1
71203: PPUSH
71204: CALL_OW 255
71208: PPUSH
71209: LD_VAR 0 1
71213: PPUSH
71214: CALL_OW 250
71218: PPUSH
71219: LD_VAR 0 1
71223: PPUSH
71224: CALL_OW 251
71228: PPUSH
71229: LD_VAR 0 2
71233: PPUSH
71234: CALL 44448 0 4
71238: PUSH
71239: LD_INT 4
71241: ARRAY
71242: ST_TO_ADDR
// end ;
71243: LD_VAR 0 3
71247: RET
// export function PlayerSeeMe ( unit ) ; begin
71248: LD_INT 0
71250: PPUSH
// result := See ( your_side , unit ) ;
71251: LD_ADDR_VAR 0 2
71255: PUSH
71256: LD_OWVAR 2
71260: PPUSH
71261: LD_VAR 0 1
71265: PPUSH
71266: CALL_OW 292
71270: ST_TO_ADDR
// end ;
71271: LD_VAR 0 2
71275: RET
// export function ReverseDir ( unit ) ; begin
71276: LD_INT 0
71278: PPUSH
// if not unit then
71279: LD_VAR 0 1
71283: NOT
71284: IFFALSE 71288
// exit ;
71286: GO 71311
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71288: LD_ADDR_VAR 0 2
71292: PUSH
71293: LD_VAR 0 1
71297: PPUSH
71298: CALL_OW 254
71302: PUSH
71303: LD_INT 3
71305: PLUS
71306: PUSH
71307: LD_INT 6
71309: MOD
71310: ST_TO_ADDR
// end ;
71311: LD_VAR 0 2
71315: RET
// export function ReverseArray ( array ) ; var i ; begin
71316: LD_INT 0
71318: PPUSH
71319: PPUSH
// if not array then
71320: LD_VAR 0 1
71324: NOT
71325: IFFALSE 71329
// exit ;
71327: GO 71384
// result := [ ] ;
71329: LD_ADDR_VAR 0 2
71333: PUSH
71334: EMPTY
71335: ST_TO_ADDR
// for i := array downto 1 do
71336: LD_ADDR_VAR 0 3
71340: PUSH
71341: DOUBLE
71342: LD_VAR 0 1
71346: INC
71347: ST_TO_ADDR
71348: LD_INT 1
71350: PUSH
71351: FOR_DOWNTO
71352: IFFALSE 71382
// result := Join ( result , array [ i ] ) ;
71354: LD_ADDR_VAR 0 2
71358: PUSH
71359: LD_VAR 0 2
71363: PPUSH
71364: LD_VAR 0 1
71368: PUSH
71369: LD_VAR 0 3
71373: ARRAY
71374: PPUSH
71375: CALL 76226 0 2
71379: ST_TO_ADDR
71380: GO 71351
71382: POP
71383: POP
// end ;
71384: LD_VAR 0 2
71388: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
71389: LD_INT 0
71391: PPUSH
71392: PPUSH
71393: PPUSH
71394: PPUSH
71395: PPUSH
71396: PPUSH
// if not unit or not hexes then
71397: LD_VAR 0 1
71401: NOT
71402: IFTRUE 71411
71404: PUSH
71405: LD_VAR 0 2
71409: NOT
71410: OR
71411: IFFALSE 71415
// exit ;
71413: GO 71538
// dist := 9999 ;
71415: LD_ADDR_VAR 0 5
71419: PUSH
71420: LD_INT 9999
71422: ST_TO_ADDR
// for i = 1 to hexes do
71423: LD_ADDR_VAR 0 4
71427: PUSH
71428: DOUBLE
71429: LD_INT 1
71431: DEC
71432: ST_TO_ADDR
71433: LD_VAR 0 2
71437: PUSH
71438: FOR_TO
71439: IFFALSE 71526
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71441: LD_ADDR_VAR 0 6
71445: PUSH
71446: LD_VAR 0 1
71450: PPUSH
71451: LD_VAR 0 2
71455: PUSH
71456: LD_VAR 0 4
71460: ARRAY
71461: PUSH
71462: LD_INT 1
71464: ARRAY
71465: PPUSH
71466: LD_VAR 0 2
71470: PUSH
71471: LD_VAR 0 4
71475: ARRAY
71476: PUSH
71477: LD_INT 2
71479: ARRAY
71480: PPUSH
71481: CALL_OW 297
71485: ST_TO_ADDR
// if tdist < dist then
71486: LD_VAR 0 6
71490: PUSH
71491: LD_VAR 0 5
71495: LESS
71496: IFFALSE 71524
// begin hex := hexes [ i ] ;
71498: LD_ADDR_VAR 0 8
71502: PUSH
71503: LD_VAR 0 2
71507: PUSH
71508: LD_VAR 0 4
71512: ARRAY
71513: ST_TO_ADDR
// dist := tdist ;
71514: LD_ADDR_VAR 0 5
71518: PUSH
71519: LD_VAR 0 6
71523: ST_TO_ADDR
// end ; end ;
71524: GO 71438
71526: POP
71527: POP
// result := hex ;
71528: LD_ADDR_VAR 0 3
71532: PUSH
71533: LD_VAR 0 8
71537: ST_TO_ADDR
// end ;
71538: LD_VAR 0 3
71542: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
71543: LD_INT 0
71545: PPUSH
71546: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
71547: LD_VAR 0 1
71551: NOT
71552: IFTRUE 71591
71554: PUSH
71555: LD_VAR 0 1
71559: PUSH
71560: LD_INT 21
71562: PUSH
71563: LD_INT 2
71565: PUSH
71566: EMPTY
71567: LIST
71568: LIST
71569: PUSH
71570: LD_INT 23
71572: PUSH
71573: LD_INT 2
71575: PUSH
71576: EMPTY
71577: LIST
71578: LIST
71579: PUSH
71580: EMPTY
71581: LIST
71582: LIST
71583: PPUSH
71584: CALL_OW 69
71588: IN
71589: NOT
71590: OR
71591: IFFALSE 71595
// exit ;
71593: GO 71642
// for i = 1 to 3 do
71595: LD_ADDR_VAR 0 3
71599: PUSH
71600: DOUBLE
71601: LD_INT 1
71603: DEC
71604: ST_TO_ADDR
71605: LD_INT 3
71607: PUSH
71608: FOR_TO
71609: IFFALSE 71640
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
71611: LD_VAR 0 1
71615: PPUSH
71616: CALL_OW 250
71620: PPUSH
71621: LD_VAR 0 1
71625: PPUSH
71626: CALL_OW 251
71630: PPUSH
71631: LD_INT 1
71633: PPUSH
71634: CALL_OW 453
71638: GO 71608
71640: POP
71641: POP
// end ;
71642: LD_VAR 0 2
71646: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
71647: LD_INT 0
71649: PPUSH
71650: PPUSH
71651: PPUSH
71652: PPUSH
71653: PPUSH
71654: PPUSH
// if not unit or not enemy_unit then
71655: LD_VAR 0 1
71659: NOT
71660: IFTRUE 71669
71662: PUSH
71663: LD_VAR 0 2
71667: NOT
71668: OR
71669: IFFALSE 71673
// exit ;
71671: GO 72144
// if GetLives ( i ) < 250 then
71673: LD_VAR 0 4
71677: PPUSH
71678: CALL_OW 256
71682: PUSH
71683: LD_INT 250
71685: LESS
71686: IFFALSE 71699
// begin ComAutodestruct ( i ) ;
71688: LD_VAR 0 4
71692: PPUSH
71693: CALL 71543 0 1
// exit ;
71697: GO 72144
// end ; x := GetX ( enemy_unit ) ;
71699: LD_ADDR_VAR 0 7
71703: PUSH
71704: LD_VAR 0 2
71708: PPUSH
71709: CALL_OW 250
71713: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
71714: LD_ADDR_VAR 0 8
71718: PUSH
71719: LD_VAR 0 2
71723: PPUSH
71724: CALL_OW 251
71728: ST_TO_ADDR
// if not x or not y then
71729: LD_VAR 0 7
71733: NOT
71734: IFTRUE 71743
71736: PUSH
71737: LD_VAR 0 8
71741: NOT
71742: OR
71743: IFFALSE 71747
// exit ;
71745: GO 72144
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
71747: LD_ADDR_VAR 0 6
71751: PUSH
71752: LD_VAR 0 7
71756: PPUSH
71757: LD_INT 0
71759: PPUSH
71760: LD_INT 4
71762: PPUSH
71763: CALL_OW 272
71767: PUSH
71768: LD_VAR 0 8
71772: PPUSH
71773: LD_INT 0
71775: PPUSH
71776: LD_INT 4
71778: PPUSH
71779: CALL_OW 273
71783: PUSH
71784: EMPTY
71785: LIST
71786: LIST
71787: PUSH
71788: LD_VAR 0 7
71792: PPUSH
71793: LD_INT 1
71795: PPUSH
71796: LD_INT 4
71798: PPUSH
71799: CALL_OW 272
71803: PUSH
71804: LD_VAR 0 8
71808: PPUSH
71809: LD_INT 1
71811: PPUSH
71812: LD_INT 4
71814: PPUSH
71815: CALL_OW 273
71819: PUSH
71820: EMPTY
71821: LIST
71822: LIST
71823: PUSH
71824: LD_VAR 0 7
71828: PPUSH
71829: LD_INT 2
71831: PPUSH
71832: LD_INT 4
71834: PPUSH
71835: CALL_OW 272
71839: PUSH
71840: LD_VAR 0 8
71844: PPUSH
71845: LD_INT 2
71847: PPUSH
71848: LD_INT 4
71850: PPUSH
71851: CALL_OW 273
71855: PUSH
71856: EMPTY
71857: LIST
71858: LIST
71859: PUSH
71860: LD_VAR 0 7
71864: PPUSH
71865: LD_INT 3
71867: PPUSH
71868: LD_INT 4
71870: PPUSH
71871: CALL_OW 272
71875: PUSH
71876: LD_VAR 0 8
71880: PPUSH
71881: LD_INT 3
71883: PPUSH
71884: LD_INT 4
71886: PPUSH
71887: CALL_OW 273
71891: PUSH
71892: EMPTY
71893: LIST
71894: LIST
71895: PUSH
71896: LD_VAR 0 7
71900: PPUSH
71901: LD_INT 4
71903: PPUSH
71904: LD_INT 4
71906: PPUSH
71907: CALL_OW 272
71911: PUSH
71912: LD_VAR 0 8
71916: PPUSH
71917: LD_INT 4
71919: PPUSH
71920: LD_INT 4
71922: PPUSH
71923: CALL_OW 273
71927: PUSH
71928: EMPTY
71929: LIST
71930: LIST
71931: PUSH
71932: LD_VAR 0 7
71936: PPUSH
71937: LD_INT 5
71939: PPUSH
71940: LD_INT 4
71942: PPUSH
71943: CALL_OW 272
71947: PUSH
71948: LD_VAR 0 8
71952: PPUSH
71953: LD_INT 5
71955: PPUSH
71956: LD_INT 4
71958: PPUSH
71959: CALL_OW 273
71963: PUSH
71964: EMPTY
71965: LIST
71966: LIST
71967: PUSH
71968: EMPTY
71969: LIST
71970: LIST
71971: LIST
71972: LIST
71973: LIST
71974: LIST
71975: ST_TO_ADDR
// for i = tmp downto 1 do
71976: LD_ADDR_VAR 0 4
71980: PUSH
71981: DOUBLE
71982: LD_VAR 0 6
71986: INC
71987: ST_TO_ADDR
71988: LD_INT 1
71990: PUSH
71991: FOR_DOWNTO
71992: IFFALSE 72095
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
71994: LD_VAR 0 6
71998: PUSH
71999: LD_VAR 0 4
72003: ARRAY
72004: PUSH
72005: LD_INT 1
72007: ARRAY
72008: PPUSH
72009: LD_VAR 0 6
72013: PUSH
72014: LD_VAR 0 4
72018: ARRAY
72019: PUSH
72020: LD_INT 2
72022: ARRAY
72023: PPUSH
72024: CALL_OW 488
72028: NOT
72029: IFTRUE 72071
72031: PUSH
72032: LD_VAR 0 6
72036: PUSH
72037: LD_VAR 0 4
72041: ARRAY
72042: PUSH
72043: LD_INT 1
72045: ARRAY
72046: PPUSH
72047: LD_VAR 0 6
72051: PUSH
72052: LD_VAR 0 4
72056: ARRAY
72057: PUSH
72058: LD_INT 2
72060: ARRAY
72061: PPUSH
72062: CALL_OW 428
72066: PUSH
72067: LD_INT 0
72069: NONEQUAL
72070: OR
72071: IFFALSE 72093
// tmp := Delete ( tmp , i ) ;
72073: LD_ADDR_VAR 0 6
72077: PUSH
72078: LD_VAR 0 6
72082: PPUSH
72083: LD_VAR 0 4
72087: PPUSH
72088: CALL_OW 3
72092: ST_TO_ADDR
72093: GO 71991
72095: POP
72096: POP
// j := GetClosestHex ( unit , tmp ) ;
72097: LD_ADDR_VAR 0 5
72101: PUSH
72102: LD_VAR 0 1
72106: PPUSH
72107: LD_VAR 0 6
72111: PPUSH
72112: CALL 71389 0 2
72116: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72117: LD_VAR 0 1
72121: PPUSH
72122: LD_VAR 0 5
72126: PUSH
72127: LD_INT 1
72129: ARRAY
72130: PPUSH
72131: LD_VAR 0 5
72135: PUSH
72136: LD_INT 2
72138: ARRAY
72139: PPUSH
72140: CALL_OW 111
// end ;
72144: LD_VAR 0 3
72148: RET
// export function PrepareApemanSoldier ( ) ; begin
72149: LD_INT 0
72151: PPUSH
// uc_nation := 0 ;
72152: LD_ADDR_OWVAR 21
72156: PUSH
72157: LD_INT 0
72159: ST_TO_ADDR
// hc_sex := sex_male ;
72160: LD_ADDR_OWVAR 27
72164: PUSH
72165: LD_INT 1
72167: ST_TO_ADDR
// hc_name :=  ;
72168: LD_ADDR_OWVAR 26
72172: PUSH
72173: LD_STRING 
72175: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
72176: LD_ADDR_OWVAR 28
72180: PUSH
72181: LD_INT 15
72183: ST_TO_ADDR
// hc_gallery :=  ;
72184: LD_ADDR_OWVAR 33
72188: PUSH
72189: LD_STRING 
72191: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72192: LD_ADDR_OWVAR 31
72196: PUSH
72197: LD_INT 0
72199: PPUSH
72200: LD_INT 3
72202: PPUSH
72203: CALL_OW 12
72207: PUSH
72208: LD_INT 0
72210: PPUSH
72211: LD_INT 3
72213: PPUSH
72214: CALL_OW 12
72218: PUSH
72219: LD_INT 0
72221: PUSH
72222: LD_INT 0
72224: PUSH
72225: EMPTY
72226: LIST
72227: LIST
72228: LIST
72229: LIST
72230: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
72231: LD_ADDR_OWVAR 29
72235: PUSH
72236: LD_INT 12
72238: PUSH
72239: LD_INT 12
72241: PUSH
72242: EMPTY
72243: LIST
72244: LIST
72245: ST_TO_ADDR
// end ;
72246: LD_VAR 0 1
72250: RET
// export function PrepareApemanEngineer ( ) ; begin
72251: LD_INT 0
72253: PPUSH
// uc_nation := 0 ;
72254: LD_ADDR_OWVAR 21
72258: PUSH
72259: LD_INT 0
72261: ST_TO_ADDR
// hc_sex := sex_male ;
72262: LD_ADDR_OWVAR 27
72266: PUSH
72267: LD_INT 1
72269: ST_TO_ADDR
// hc_name :=  ;
72270: LD_ADDR_OWVAR 26
72274: PUSH
72275: LD_STRING 
72277: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
72278: LD_ADDR_OWVAR 28
72282: PUSH
72283: LD_INT 16
72285: ST_TO_ADDR
// hc_gallery :=  ;
72286: LD_ADDR_OWVAR 33
72290: PUSH
72291: LD_STRING 
72293: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72294: LD_ADDR_OWVAR 31
72298: PUSH
72299: LD_INT 0
72301: PPUSH
72302: LD_INT 3
72304: PPUSH
72305: CALL_OW 12
72309: PUSH
72310: LD_INT 0
72312: PPUSH
72313: LD_INT 3
72315: PPUSH
72316: CALL_OW 12
72320: PUSH
72321: LD_INT 0
72323: PUSH
72324: LD_INT 0
72326: PUSH
72327: EMPTY
72328: LIST
72329: LIST
72330: LIST
72331: LIST
72332: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
72333: LD_ADDR_OWVAR 29
72337: PUSH
72338: LD_INT 12
72340: PUSH
72341: LD_INT 12
72343: PUSH
72344: EMPTY
72345: LIST
72346: LIST
72347: ST_TO_ADDR
// end ;
72348: LD_VAR 0 1
72352: RET
// export function PrepareApeman ( agressivity ) ; begin
72353: LD_INT 0
72355: PPUSH
// uc_side := 0 ;
72356: LD_ADDR_OWVAR 20
72360: PUSH
72361: LD_INT 0
72363: ST_TO_ADDR
// uc_nation := 0 ;
72364: LD_ADDR_OWVAR 21
72368: PUSH
72369: LD_INT 0
72371: ST_TO_ADDR
// hc_sex := sex_male ;
72372: LD_ADDR_OWVAR 27
72376: PUSH
72377: LD_INT 1
72379: ST_TO_ADDR
// hc_class := class_apeman ;
72380: LD_ADDR_OWVAR 28
72384: PUSH
72385: LD_INT 12
72387: ST_TO_ADDR
// hc_gallery :=  ;
72388: LD_ADDR_OWVAR 33
72392: PUSH
72393: LD_STRING 
72395: ST_TO_ADDR
// hc_name :=  ;
72396: LD_ADDR_OWVAR 26
72400: PUSH
72401: LD_STRING 
72403: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
72404: LD_ADDR_OWVAR 29
72408: PUSH
72409: LD_INT 12
72411: PUSH
72412: LD_INT 12
72414: PUSH
72415: EMPTY
72416: LIST
72417: LIST
72418: ST_TO_ADDR
// if agressivity = 0 then
72419: LD_VAR 0 1
72423: PUSH
72424: LD_INT 0
72426: EQUAL
72427: IFFALSE 72439
// hc_agressivity := 0 else
72429: LD_ADDR_OWVAR 35
72433: PUSH
72434: LD_INT 0
72436: ST_TO_ADDR
72437: GO 72460
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72439: LD_ADDR_OWVAR 35
72443: PUSH
72444: LD_VAR 0 1
72448: NEG
72449: PPUSH
72450: LD_VAR 0 1
72454: PPUSH
72455: CALL_OW 12
72459: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72460: LD_ADDR_OWVAR 31
72464: PUSH
72465: LD_INT 0
72467: PPUSH
72468: LD_INT 3
72470: PPUSH
72471: CALL_OW 12
72475: PUSH
72476: LD_INT 0
72478: PPUSH
72479: LD_INT 3
72481: PPUSH
72482: CALL_OW 12
72486: PUSH
72487: LD_INT 0
72489: PUSH
72490: LD_INT 0
72492: PUSH
72493: EMPTY
72494: LIST
72495: LIST
72496: LIST
72497: LIST
72498: ST_TO_ADDR
// end ;
72499: LD_VAR 0 2
72503: RET
// export function PrepareTiger ( agressivity ) ; begin
72504: LD_INT 0
72506: PPUSH
// uc_side := 0 ;
72507: LD_ADDR_OWVAR 20
72511: PUSH
72512: LD_INT 0
72514: ST_TO_ADDR
// uc_nation := 0 ;
72515: LD_ADDR_OWVAR 21
72519: PUSH
72520: LD_INT 0
72522: ST_TO_ADDR
// InitHc ;
72523: CALL_OW 19
// hc_class := class_tiger ;
72527: LD_ADDR_OWVAR 28
72531: PUSH
72532: LD_INT 14
72534: ST_TO_ADDR
// hc_gallery :=  ;
72535: LD_ADDR_OWVAR 33
72539: PUSH
72540: LD_STRING 
72542: ST_TO_ADDR
// hc_name :=  ;
72543: LD_ADDR_OWVAR 26
72547: PUSH
72548: LD_STRING 
72550: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72551: LD_ADDR_OWVAR 35
72555: PUSH
72556: LD_VAR 0 1
72560: NEG
72561: PPUSH
72562: LD_VAR 0 1
72566: PPUSH
72567: CALL_OW 12
72571: ST_TO_ADDR
// end ;
72572: LD_VAR 0 2
72576: RET
// export function PrepareEnchidna ( ) ; begin
72577: LD_INT 0
72579: PPUSH
// uc_side := 0 ;
72580: LD_ADDR_OWVAR 20
72584: PUSH
72585: LD_INT 0
72587: ST_TO_ADDR
// uc_nation := 0 ;
72588: LD_ADDR_OWVAR 21
72592: PUSH
72593: LD_INT 0
72595: ST_TO_ADDR
// InitHc ;
72596: CALL_OW 19
// hc_class := class_baggie ;
72600: LD_ADDR_OWVAR 28
72604: PUSH
72605: LD_INT 13
72607: ST_TO_ADDR
// hc_gallery :=  ;
72608: LD_ADDR_OWVAR 33
72612: PUSH
72613: LD_STRING 
72615: ST_TO_ADDR
// hc_name :=  ;
72616: LD_ADDR_OWVAR 26
72620: PUSH
72621: LD_STRING 
72623: ST_TO_ADDR
// end ;
72624: LD_VAR 0 1
72628: RET
// export function PrepareFrog ( ) ; begin
72629: LD_INT 0
72631: PPUSH
// uc_side := 0 ;
72632: LD_ADDR_OWVAR 20
72636: PUSH
72637: LD_INT 0
72639: ST_TO_ADDR
// uc_nation := 0 ;
72640: LD_ADDR_OWVAR 21
72644: PUSH
72645: LD_INT 0
72647: ST_TO_ADDR
// InitHc ;
72648: CALL_OW 19
// hc_class := class_frog ;
72652: LD_ADDR_OWVAR 28
72656: PUSH
72657: LD_INT 19
72659: ST_TO_ADDR
// hc_gallery :=  ;
72660: LD_ADDR_OWVAR 33
72664: PUSH
72665: LD_STRING 
72667: ST_TO_ADDR
// hc_name :=  ;
72668: LD_ADDR_OWVAR 26
72672: PUSH
72673: LD_STRING 
72675: ST_TO_ADDR
// end ;
72676: LD_VAR 0 1
72680: RET
// export function PrepareFish ( ) ; begin
72681: LD_INT 0
72683: PPUSH
// uc_side := 0 ;
72684: LD_ADDR_OWVAR 20
72688: PUSH
72689: LD_INT 0
72691: ST_TO_ADDR
// uc_nation := 0 ;
72692: LD_ADDR_OWVAR 21
72696: PUSH
72697: LD_INT 0
72699: ST_TO_ADDR
// InitHc ;
72700: CALL_OW 19
// hc_class := class_fish ;
72704: LD_ADDR_OWVAR 28
72708: PUSH
72709: LD_INT 20
72711: ST_TO_ADDR
// hc_gallery :=  ;
72712: LD_ADDR_OWVAR 33
72716: PUSH
72717: LD_STRING 
72719: ST_TO_ADDR
// hc_name :=  ;
72720: LD_ADDR_OWVAR 26
72724: PUSH
72725: LD_STRING 
72727: ST_TO_ADDR
// end ;
72728: LD_VAR 0 1
72732: RET
// export function PrepareBird ( ) ; begin
72733: LD_INT 0
72735: PPUSH
// uc_side := 0 ;
72736: LD_ADDR_OWVAR 20
72740: PUSH
72741: LD_INT 0
72743: ST_TO_ADDR
// uc_nation := 0 ;
72744: LD_ADDR_OWVAR 21
72748: PUSH
72749: LD_INT 0
72751: ST_TO_ADDR
// InitHc ;
72752: CALL_OW 19
// hc_class := class_phororhacos ;
72756: LD_ADDR_OWVAR 28
72760: PUSH
72761: LD_INT 18
72763: ST_TO_ADDR
// hc_gallery :=  ;
72764: LD_ADDR_OWVAR 33
72768: PUSH
72769: LD_STRING 
72771: ST_TO_ADDR
// hc_name :=  ;
72772: LD_ADDR_OWVAR 26
72776: PUSH
72777: LD_STRING 
72779: ST_TO_ADDR
// end ;
72780: LD_VAR 0 1
72784: RET
// export function PrepareHorse ( ) ; begin
72785: LD_INT 0
72787: PPUSH
// uc_side := 0 ;
72788: LD_ADDR_OWVAR 20
72792: PUSH
72793: LD_INT 0
72795: ST_TO_ADDR
// uc_nation := 0 ;
72796: LD_ADDR_OWVAR 21
72800: PUSH
72801: LD_INT 0
72803: ST_TO_ADDR
// InitHc ;
72804: CALL_OW 19
// hc_class := class_horse ;
72808: LD_ADDR_OWVAR 28
72812: PUSH
72813: LD_INT 21
72815: ST_TO_ADDR
// hc_gallery :=  ;
72816: LD_ADDR_OWVAR 33
72820: PUSH
72821: LD_STRING 
72823: ST_TO_ADDR
// hc_name :=  ;
72824: LD_ADDR_OWVAR 26
72828: PUSH
72829: LD_STRING 
72831: ST_TO_ADDR
// end ;
72832: LD_VAR 0 1
72836: RET
// export function PrepareMastodont ( ) ; begin
72837: LD_INT 0
72839: PPUSH
// uc_side := 0 ;
72840: LD_ADDR_OWVAR 20
72844: PUSH
72845: LD_INT 0
72847: ST_TO_ADDR
// uc_nation := 0 ;
72848: LD_ADDR_OWVAR 21
72852: PUSH
72853: LD_INT 0
72855: ST_TO_ADDR
// vc_chassis := class_mastodont ;
72856: LD_ADDR_OWVAR 37
72860: PUSH
72861: LD_INT 31
72863: ST_TO_ADDR
// vc_control := control_rider ;
72864: LD_ADDR_OWVAR 38
72868: PUSH
72869: LD_INT 4
72871: ST_TO_ADDR
// end ;
72872: LD_VAR 0 1
72876: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
72877: LD_INT 0
72879: PPUSH
72880: PPUSH
72881: PPUSH
// uc_side = 0 ;
72882: LD_ADDR_OWVAR 20
72886: PUSH
72887: LD_INT 0
72889: ST_TO_ADDR
// uc_nation = 0 ;
72890: LD_ADDR_OWVAR 21
72894: PUSH
72895: LD_INT 0
72897: ST_TO_ADDR
// InitHc_All ( ) ;
72898: CALL_OW 584
// InitVc ;
72902: CALL_OW 20
// if mastodonts then
72906: LD_VAR 0 6
72910: IFFALSE 72977
// for i = 1 to mastodonts do
72912: LD_ADDR_VAR 0 11
72916: PUSH
72917: DOUBLE
72918: LD_INT 1
72920: DEC
72921: ST_TO_ADDR
72922: LD_VAR 0 6
72926: PUSH
72927: FOR_TO
72928: IFFALSE 72975
// begin vc_chassis := 31 ;
72930: LD_ADDR_OWVAR 37
72934: PUSH
72935: LD_INT 31
72937: ST_TO_ADDR
// vc_control := control_rider ;
72938: LD_ADDR_OWVAR 38
72942: PUSH
72943: LD_INT 4
72945: ST_TO_ADDR
// animal := CreateVehicle ;
72946: LD_ADDR_VAR 0 12
72950: PUSH
72951: CALL_OW 45
72955: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72956: LD_VAR 0 12
72960: PPUSH
72961: LD_VAR 0 8
72965: PPUSH
72966: LD_INT 0
72968: PPUSH
72969: CALL 75119 0 3
// end ;
72973: GO 72927
72975: POP
72976: POP
// if horses then
72977: LD_VAR 0 5
72981: IFFALSE 73048
// for i = 1 to horses do
72983: LD_ADDR_VAR 0 11
72987: PUSH
72988: DOUBLE
72989: LD_INT 1
72991: DEC
72992: ST_TO_ADDR
72993: LD_VAR 0 5
72997: PUSH
72998: FOR_TO
72999: IFFALSE 73046
// begin hc_class := 21 ;
73001: LD_ADDR_OWVAR 28
73005: PUSH
73006: LD_INT 21
73008: ST_TO_ADDR
// hc_gallery :=  ;
73009: LD_ADDR_OWVAR 33
73013: PUSH
73014: LD_STRING 
73016: ST_TO_ADDR
// animal := CreateHuman ;
73017: LD_ADDR_VAR 0 12
73021: PUSH
73022: CALL_OW 44
73026: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73027: LD_VAR 0 12
73031: PPUSH
73032: LD_VAR 0 8
73036: PPUSH
73037: LD_INT 0
73039: PPUSH
73040: CALL 75119 0 3
// end ;
73044: GO 72998
73046: POP
73047: POP
// if birds then
73048: LD_VAR 0 1
73052: IFFALSE 73119
// for i = 1 to birds do
73054: LD_ADDR_VAR 0 11
73058: PUSH
73059: DOUBLE
73060: LD_INT 1
73062: DEC
73063: ST_TO_ADDR
73064: LD_VAR 0 1
73068: PUSH
73069: FOR_TO
73070: IFFALSE 73117
// begin hc_class := 18 ;
73072: LD_ADDR_OWVAR 28
73076: PUSH
73077: LD_INT 18
73079: ST_TO_ADDR
// hc_gallery =  ;
73080: LD_ADDR_OWVAR 33
73084: PUSH
73085: LD_STRING 
73087: ST_TO_ADDR
// animal := CreateHuman ;
73088: LD_ADDR_VAR 0 12
73092: PUSH
73093: CALL_OW 44
73097: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73098: LD_VAR 0 12
73102: PPUSH
73103: LD_VAR 0 8
73107: PPUSH
73108: LD_INT 0
73110: PPUSH
73111: CALL 75119 0 3
// end ;
73115: GO 73069
73117: POP
73118: POP
// if tigers then
73119: LD_VAR 0 2
73123: IFFALSE 73207
// for i = 1 to tigers do
73125: LD_ADDR_VAR 0 11
73129: PUSH
73130: DOUBLE
73131: LD_INT 1
73133: DEC
73134: ST_TO_ADDR
73135: LD_VAR 0 2
73139: PUSH
73140: FOR_TO
73141: IFFALSE 73205
// begin hc_class = class_tiger ;
73143: LD_ADDR_OWVAR 28
73147: PUSH
73148: LD_INT 14
73150: ST_TO_ADDR
// hc_gallery =  ;
73151: LD_ADDR_OWVAR 33
73155: PUSH
73156: LD_STRING 
73158: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
73159: LD_ADDR_OWVAR 35
73163: PUSH
73164: LD_INT 7
73166: NEG
73167: PPUSH
73168: LD_INT 7
73170: PPUSH
73171: CALL_OW 12
73175: ST_TO_ADDR
// animal := CreateHuman ;
73176: LD_ADDR_VAR 0 12
73180: PUSH
73181: CALL_OW 44
73185: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73186: LD_VAR 0 12
73190: PPUSH
73191: LD_VAR 0 8
73195: PPUSH
73196: LD_INT 0
73198: PPUSH
73199: CALL 75119 0 3
// end ;
73203: GO 73140
73205: POP
73206: POP
// if apemans then
73207: LD_VAR 0 3
73211: IFFALSE 73334
// for i = 1 to apemans do
73213: LD_ADDR_VAR 0 11
73217: PUSH
73218: DOUBLE
73219: LD_INT 1
73221: DEC
73222: ST_TO_ADDR
73223: LD_VAR 0 3
73227: PUSH
73228: FOR_TO
73229: IFFALSE 73332
// begin hc_class = class_apeman ;
73231: LD_ADDR_OWVAR 28
73235: PUSH
73236: LD_INT 12
73238: ST_TO_ADDR
// hc_gallery =  ;
73239: LD_ADDR_OWVAR 33
73243: PUSH
73244: LD_STRING 
73246: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
73247: LD_ADDR_OWVAR 35
73251: PUSH
73252: LD_INT 2
73254: NEG
73255: PPUSH
73256: LD_INT 2
73258: PPUSH
73259: CALL_OW 12
73263: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
73264: LD_ADDR_OWVAR 31
73268: PUSH
73269: LD_INT 1
73271: PPUSH
73272: LD_INT 3
73274: PPUSH
73275: CALL_OW 12
73279: PUSH
73280: LD_INT 1
73282: PPUSH
73283: LD_INT 3
73285: PPUSH
73286: CALL_OW 12
73290: PUSH
73291: LD_INT 0
73293: PUSH
73294: LD_INT 0
73296: PUSH
73297: EMPTY
73298: LIST
73299: LIST
73300: LIST
73301: LIST
73302: ST_TO_ADDR
// animal := CreateHuman ;
73303: LD_ADDR_VAR 0 12
73307: PUSH
73308: CALL_OW 44
73312: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73313: LD_VAR 0 12
73317: PPUSH
73318: LD_VAR 0 8
73322: PPUSH
73323: LD_INT 0
73325: PPUSH
73326: CALL 75119 0 3
// end ;
73330: GO 73228
73332: POP
73333: POP
// if enchidnas then
73334: LD_VAR 0 4
73338: IFFALSE 73405
// for i = 1 to enchidnas do
73340: LD_ADDR_VAR 0 11
73344: PUSH
73345: DOUBLE
73346: LD_INT 1
73348: DEC
73349: ST_TO_ADDR
73350: LD_VAR 0 4
73354: PUSH
73355: FOR_TO
73356: IFFALSE 73403
// begin hc_class = 13 ;
73358: LD_ADDR_OWVAR 28
73362: PUSH
73363: LD_INT 13
73365: ST_TO_ADDR
// hc_gallery =  ;
73366: LD_ADDR_OWVAR 33
73370: PUSH
73371: LD_STRING 
73373: ST_TO_ADDR
// animal := CreateHuman ;
73374: LD_ADDR_VAR 0 12
73378: PUSH
73379: CALL_OW 44
73383: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73384: LD_VAR 0 12
73388: PPUSH
73389: LD_VAR 0 8
73393: PPUSH
73394: LD_INT 0
73396: PPUSH
73397: CALL 75119 0 3
// end ;
73401: GO 73355
73403: POP
73404: POP
// if fishes then
73405: LD_VAR 0 7
73409: IFFALSE 73476
// for i = 1 to fishes do
73411: LD_ADDR_VAR 0 11
73415: PUSH
73416: DOUBLE
73417: LD_INT 1
73419: DEC
73420: ST_TO_ADDR
73421: LD_VAR 0 7
73425: PUSH
73426: FOR_TO
73427: IFFALSE 73474
// begin hc_class = 20 ;
73429: LD_ADDR_OWVAR 28
73433: PUSH
73434: LD_INT 20
73436: ST_TO_ADDR
// hc_gallery =  ;
73437: LD_ADDR_OWVAR 33
73441: PUSH
73442: LD_STRING 
73444: ST_TO_ADDR
// animal := CreateHuman ;
73445: LD_ADDR_VAR 0 12
73449: PUSH
73450: CALL_OW 44
73454: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
73455: LD_VAR 0 12
73459: PPUSH
73460: LD_VAR 0 9
73464: PPUSH
73465: LD_INT 0
73467: PPUSH
73468: CALL 75119 0 3
// end ;
73472: GO 73426
73474: POP
73475: POP
// end ;
73476: LD_VAR 0 10
73480: RET
// export function WantHeal ( sci , unit ) ; begin
73481: LD_INT 0
73483: PPUSH
// if GetTaskList ( sci ) > 0 then
73484: LD_VAR 0 1
73488: PPUSH
73489: CALL_OW 437
73493: PUSH
73494: LD_INT 0
73496: GREATER
73497: IFFALSE 73569
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
73499: LD_VAR 0 1
73503: PPUSH
73504: CALL_OW 437
73508: PUSH
73509: LD_INT 1
73511: ARRAY
73512: PUSH
73513: LD_INT 1
73515: ARRAY
73516: PUSH
73517: LD_STRING l
73519: EQUAL
73520: IFFALSE 73547
73522: PUSH
73523: LD_VAR 0 1
73527: PPUSH
73528: CALL_OW 437
73532: PUSH
73533: LD_INT 1
73535: ARRAY
73536: PUSH
73537: LD_INT 4
73539: ARRAY
73540: PUSH
73541: LD_VAR 0 2
73545: EQUAL
73546: AND
73547: IFFALSE 73559
// result := true else
73549: LD_ADDR_VAR 0 3
73553: PUSH
73554: LD_INT 1
73556: ST_TO_ADDR
73557: GO 73567
// result := false ;
73559: LD_ADDR_VAR 0 3
73563: PUSH
73564: LD_INT 0
73566: ST_TO_ADDR
// end else
73567: GO 73577
// result := false ;
73569: LD_ADDR_VAR 0 3
73573: PUSH
73574: LD_INT 0
73576: ST_TO_ADDR
// end ;
73577: LD_VAR 0 3
73581: RET
// export function HealTarget ( sci ) ; begin
73582: LD_INT 0
73584: PPUSH
// if not sci then
73585: LD_VAR 0 1
73589: NOT
73590: IFFALSE 73594
// exit ;
73592: GO 73659
// result := 0 ;
73594: LD_ADDR_VAR 0 2
73598: PUSH
73599: LD_INT 0
73601: ST_TO_ADDR
// if GetTaskList ( sci ) then
73602: LD_VAR 0 1
73606: PPUSH
73607: CALL_OW 437
73611: IFFALSE 73659
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
73613: LD_VAR 0 1
73617: PPUSH
73618: CALL_OW 437
73622: PUSH
73623: LD_INT 1
73625: ARRAY
73626: PUSH
73627: LD_INT 1
73629: ARRAY
73630: PUSH
73631: LD_STRING l
73633: EQUAL
73634: IFFALSE 73659
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
73636: LD_ADDR_VAR 0 2
73640: PUSH
73641: LD_VAR 0 1
73645: PPUSH
73646: CALL_OW 437
73650: PUSH
73651: LD_INT 1
73653: ARRAY
73654: PUSH
73655: LD_INT 4
73657: ARRAY
73658: ST_TO_ADDR
// end ;
73659: LD_VAR 0 2
73663: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
73664: LD_INT 0
73666: PPUSH
73667: PPUSH
73668: PPUSH
73669: PPUSH
// if not base_units then
73670: LD_VAR 0 1
73674: NOT
73675: IFFALSE 73679
// exit ;
73677: GO 73766
// result := false ;
73679: LD_ADDR_VAR 0 2
73683: PUSH
73684: LD_INT 0
73686: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
73687: LD_ADDR_VAR 0 5
73691: PUSH
73692: LD_VAR 0 1
73696: PPUSH
73697: LD_INT 21
73699: PUSH
73700: LD_INT 3
73702: PUSH
73703: EMPTY
73704: LIST
73705: LIST
73706: PPUSH
73707: CALL_OW 72
73711: ST_TO_ADDR
// if not tmp then
73712: LD_VAR 0 5
73716: NOT
73717: IFFALSE 73721
// exit ;
73719: GO 73766
// for i in tmp do
73721: LD_ADDR_VAR 0 3
73725: PUSH
73726: LD_VAR 0 5
73730: PUSH
73731: FOR_IN
73732: IFFALSE 73764
// begin result := EnemyInRange ( i , 22 ) ;
73734: LD_ADDR_VAR 0 2
73738: PUSH
73739: LD_VAR 0 3
73743: PPUSH
73744: LD_INT 22
73746: PPUSH
73747: CALL 71191 0 2
73751: ST_TO_ADDR
// if result then
73752: LD_VAR 0 2
73756: IFFALSE 73762
// exit ;
73758: POP
73759: POP
73760: GO 73766
// end ;
73762: GO 73731
73764: POP
73765: POP
// end ;
73766: LD_VAR 0 2
73770: RET
// export function FilterByTag ( units , tag ) ; begin
73771: LD_INT 0
73773: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
73774: LD_ADDR_VAR 0 3
73778: PUSH
73779: LD_VAR 0 1
73783: PPUSH
73784: LD_INT 120
73786: PUSH
73787: LD_VAR 0 2
73791: PUSH
73792: EMPTY
73793: LIST
73794: LIST
73795: PPUSH
73796: CALL_OW 72
73800: ST_TO_ADDR
// end ;
73801: LD_VAR 0 3
73805: RET
// export function IsDriver ( un ) ; begin
73806: LD_INT 0
73808: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
73809: LD_ADDR_VAR 0 2
73813: PUSH
73814: LD_VAR 0 1
73818: PUSH
73819: LD_INT 55
73821: PUSH
73822: EMPTY
73823: LIST
73824: PPUSH
73825: CALL_OW 69
73829: IN
73830: ST_TO_ADDR
// end ;
73831: LD_VAR 0 2
73835: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
73836: LD_INT 0
73838: PPUSH
73839: PPUSH
// list := [ ] ;
73840: LD_ADDR_VAR 0 5
73844: PUSH
73845: EMPTY
73846: ST_TO_ADDR
// case d of 0 :
73847: LD_VAR 0 3
73851: PUSH
73852: LD_INT 0
73854: DOUBLE
73855: EQUAL
73856: IFTRUE 73860
73858: GO 73993
73860: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
73861: LD_ADDR_VAR 0 5
73865: PUSH
73866: LD_VAR 0 1
73870: PUSH
73871: LD_INT 4
73873: MINUS
73874: PUSH
73875: LD_VAR 0 2
73879: PUSH
73880: LD_INT 4
73882: MINUS
73883: PUSH
73884: LD_INT 2
73886: PUSH
73887: EMPTY
73888: LIST
73889: LIST
73890: LIST
73891: PUSH
73892: LD_VAR 0 1
73896: PUSH
73897: LD_INT 3
73899: MINUS
73900: PUSH
73901: LD_VAR 0 2
73905: PUSH
73906: LD_INT 1
73908: PUSH
73909: EMPTY
73910: LIST
73911: LIST
73912: LIST
73913: PUSH
73914: LD_VAR 0 1
73918: PUSH
73919: LD_INT 4
73921: PLUS
73922: PUSH
73923: LD_VAR 0 2
73927: PUSH
73928: LD_INT 4
73930: PUSH
73931: EMPTY
73932: LIST
73933: LIST
73934: LIST
73935: PUSH
73936: LD_VAR 0 1
73940: PUSH
73941: LD_INT 3
73943: PLUS
73944: PUSH
73945: LD_VAR 0 2
73949: PUSH
73950: LD_INT 3
73952: PLUS
73953: PUSH
73954: LD_INT 5
73956: PUSH
73957: EMPTY
73958: LIST
73959: LIST
73960: LIST
73961: PUSH
73962: LD_VAR 0 1
73966: PUSH
73967: LD_VAR 0 2
73971: PUSH
73972: LD_INT 4
73974: PLUS
73975: PUSH
73976: LD_INT 0
73978: PUSH
73979: EMPTY
73980: LIST
73981: LIST
73982: LIST
73983: PUSH
73984: EMPTY
73985: LIST
73986: LIST
73987: LIST
73988: LIST
73989: LIST
73990: ST_TO_ADDR
// end ; 1 :
73991: GO 74691
73993: LD_INT 1
73995: DOUBLE
73996: EQUAL
73997: IFTRUE 74001
73999: GO 74134
74001: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74002: LD_ADDR_VAR 0 5
74006: PUSH
74007: LD_VAR 0 1
74011: PUSH
74012: LD_VAR 0 2
74016: PUSH
74017: LD_INT 4
74019: MINUS
74020: PUSH
74021: LD_INT 3
74023: PUSH
74024: EMPTY
74025: LIST
74026: LIST
74027: LIST
74028: PUSH
74029: LD_VAR 0 1
74033: PUSH
74034: LD_INT 3
74036: MINUS
74037: PUSH
74038: LD_VAR 0 2
74042: PUSH
74043: LD_INT 3
74045: MINUS
74046: PUSH
74047: LD_INT 2
74049: PUSH
74050: EMPTY
74051: LIST
74052: LIST
74053: LIST
74054: PUSH
74055: LD_VAR 0 1
74059: PUSH
74060: LD_INT 4
74062: MINUS
74063: PUSH
74064: LD_VAR 0 2
74068: PUSH
74069: LD_INT 1
74071: PUSH
74072: EMPTY
74073: LIST
74074: LIST
74075: LIST
74076: PUSH
74077: LD_VAR 0 1
74081: PUSH
74082: LD_VAR 0 2
74086: PUSH
74087: LD_INT 3
74089: PLUS
74090: PUSH
74091: LD_INT 0
74093: PUSH
74094: EMPTY
74095: LIST
74096: LIST
74097: LIST
74098: PUSH
74099: LD_VAR 0 1
74103: PUSH
74104: LD_INT 4
74106: PLUS
74107: PUSH
74108: LD_VAR 0 2
74112: PUSH
74113: LD_INT 4
74115: PLUS
74116: PUSH
74117: LD_INT 5
74119: PUSH
74120: EMPTY
74121: LIST
74122: LIST
74123: LIST
74124: PUSH
74125: EMPTY
74126: LIST
74127: LIST
74128: LIST
74129: LIST
74130: LIST
74131: ST_TO_ADDR
// end ; 2 :
74132: GO 74691
74134: LD_INT 2
74136: DOUBLE
74137: EQUAL
74138: IFTRUE 74142
74140: GO 74271
74142: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74143: LD_ADDR_VAR 0 5
74147: PUSH
74148: LD_VAR 0 1
74152: PUSH
74153: LD_VAR 0 2
74157: PUSH
74158: LD_INT 3
74160: MINUS
74161: PUSH
74162: LD_INT 3
74164: PUSH
74165: EMPTY
74166: LIST
74167: LIST
74168: LIST
74169: PUSH
74170: LD_VAR 0 1
74174: PUSH
74175: LD_INT 4
74177: PLUS
74178: PUSH
74179: LD_VAR 0 2
74183: PUSH
74184: LD_INT 4
74186: PUSH
74187: EMPTY
74188: LIST
74189: LIST
74190: LIST
74191: PUSH
74192: LD_VAR 0 1
74196: PUSH
74197: LD_VAR 0 2
74201: PUSH
74202: LD_INT 4
74204: PLUS
74205: PUSH
74206: LD_INT 0
74208: PUSH
74209: EMPTY
74210: LIST
74211: LIST
74212: LIST
74213: PUSH
74214: LD_VAR 0 1
74218: PUSH
74219: LD_INT 3
74221: MINUS
74222: PUSH
74223: LD_VAR 0 2
74227: PUSH
74228: LD_INT 1
74230: PUSH
74231: EMPTY
74232: LIST
74233: LIST
74234: LIST
74235: PUSH
74236: LD_VAR 0 1
74240: PUSH
74241: LD_INT 4
74243: MINUS
74244: PUSH
74245: LD_VAR 0 2
74249: PUSH
74250: LD_INT 4
74252: MINUS
74253: PUSH
74254: LD_INT 2
74256: PUSH
74257: EMPTY
74258: LIST
74259: LIST
74260: LIST
74261: PUSH
74262: EMPTY
74263: LIST
74264: LIST
74265: LIST
74266: LIST
74267: LIST
74268: ST_TO_ADDR
// end ; 3 :
74269: GO 74691
74271: LD_INT 3
74273: DOUBLE
74274: EQUAL
74275: IFTRUE 74279
74277: GO 74412
74279: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74280: LD_ADDR_VAR 0 5
74284: PUSH
74285: LD_VAR 0 1
74289: PUSH
74290: LD_INT 3
74292: PLUS
74293: PUSH
74294: LD_VAR 0 2
74298: PUSH
74299: LD_INT 4
74301: PUSH
74302: EMPTY
74303: LIST
74304: LIST
74305: LIST
74306: PUSH
74307: LD_VAR 0 1
74311: PUSH
74312: LD_INT 4
74314: PLUS
74315: PUSH
74316: LD_VAR 0 2
74320: PUSH
74321: LD_INT 4
74323: PLUS
74324: PUSH
74325: LD_INT 5
74327: PUSH
74328: EMPTY
74329: LIST
74330: LIST
74331: LIST
74332: PUSH
74333: LD_VAR 0 1
74337: PUSH
74338: LD_INT 4
74340: MINUS
74341: PUSH
74342: LD_VAR 0 2
74346: PUSH
74347: LD_INT 1
74349: PUSH
74350: EMPTY
74351: LIST
74352: LIST
74353: LIST
74354: PUSH
74355: LD_VAR 0 1
74359: PUSH
74360: LD_VAR 0 2
74364: PUSH
74365: LD_INT 4
74367: MINUS
74368: PUSH
74369: LD_INT 3
74371: PUSH
74372: EMPTY
74373: LIST
74374: LIST
74375: LIST
74376: PUSH
74377: LD_VAR 0 1
74381: PUSH
74382: LD_INT 3
74384: MINUS
74385: PUSH
74386: LD_VAR 0 2
74390: PUSH
74391: LD_INT 3
74393: MINUS
74394: PUSH
74395: LD_INT 2
74397: PUSH
74398: EMPTY
74399: LIST
74400: LIST
74401: LIST
74402: PUSH
74403: EMPTY
74404: LIST
74405: LIST
74406: LIST
74407: LIST
74408: LIST
74409: ST_TO_ADDR
// end ; 4 :
74410: GO 74691
74412: LD_INT 4
74414: DOUBLE
74415: EQUAL
74416: IFTRUE 74420
74418: GO 74553
74420: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
74421: LD_ADDR_VAR 0 5
74425: PUSH
74426: LD_VAR 0 1
74430: PUSH
74431: LD_VAR 0 2
74435: PUSH
74436: LD_INT 4
74438: PLUS
74439: PUSH
74440: LD_INT 0
74442: PUSH
74443: EMPTY
74444: LIST
74445: LIST
74446: LIST
74447: PUSH
74448: LD_VAR 0 1
74452: PUSH
74453: LD_INT 3
74455: PLUS
74456: PUSH
74457: LD_VAR 0 2
74461: PUSH
74462: LD_INT 3
74464: PLUS
74465: PUSH
74466: LD_INT 5
74468: PUSH
74469: EMPTY
74470: LIST
74471: LIST
74472: LIST
74473: PUSH
74474: LD_VAR 0 1
74478: PUSH
74479: LD_INT 4
74481: PLUS
74482: PUSH
74483: LD_VAR 0 2
74487: PUSH
74488: LD_INT 4
74490: PUSH
74491: EMPTY
74492: LIST
74493: LIST
74494: LIST
74495: PUSH
74496: LD_VAR 0 1
74500: PUSH
74501: LD_VAR 0 2
74505: PUSH
74506: LD_INT 3
74508: MINUS
74509: PUSH
74510: LD_INT 3
74512: PUSH
74513: EMPTY
74514: LIST
74515: LIST
74516: LIST
74517: PUSH
74518: LD_VAR 0 1
74522: PUSH
74523: LD_INT 4
74525: MINUS
74526: PUSH
74527: LD_VAR 0 2
74531: PUSH
74532: LD_INT 4
74534: MINUS
74535: PUSH
74536: LD_INT 2
74538: PUSH
74539: EMPTY
74540: LIST
74541: LIST
74542: LIST
74543: PUSH
74544: EMPTY
74545: LIST
74546: LIST
74547: LIST
74548: LIST
74549: LIST
74550: ST_TO_ADDR
// end ; 5 :
74551: GO 74691
74553: LD_INT 5
74555: DOUBLE
74556: EQUAL
74557: IFTRUE 74561
74559: GO 74690
74561: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
74562: LD_ADDR_VAR 0 5
74566: PUSH
74567: LD_VAR 0 1
74571: PUSH
74572: LD_INT 4
74574: MINUS
74575: PUSH
74576: LD_VAR 0 2
74580: PUSH
74581: LD_INT 1
74583: PUSH
74584: EMPTY
74585: LIST
74586: LIST
74587: LIST
74588: PUSH
74589: LD_VAR 0 1
74593: PUSH
74594: LD_VAR 0 2
74598: PUSH
74599: LD_INT 4
74601: MINUS
74602: PUSH
74603: LD_INT 3
74605: PUSH
74606: EMPTY
74607: LIST
74608: LIST
74609: LIST
74610: PUSH
74611: LD_VAR 0 1
74615: PUSH
74616: LD_INT 4
74618: PLUS
74619: PUSH
74620: LD_VAR 0 2
74624: PUSH
74625: LD_INT 4
74627: PLUS
74628: PUSH
74629: LD_INT 5
74631: PUSH
74632: EMPTY
74633: LIST
74634: LIST
74635: LIST
74636: PUSH
74637: LD_VAR 0 1
74641: PUSH
74642: LD_INT 3
74644: PLUS
74645: PUSH
74646: LD_VAR 0 2
74650: PUSH
74651: LD_INT 4
74653: PUSH
74654: EMPTY
74655: LIST
74656: LIST
74657: LIST
74658: PUSH
74659: LD_VAR 0 1
74663: PUSH
74664: LD_VAR 0 2
74668: PUSH
74669: LD_INT 3
74671: PLUS
74672: PUSH
74673: LD_INT 0
74675: PUSH
74676: EMPTY
74677: LIST
74678: LIST
74679: LIST
74680: PUSH
74681: EMPTY
74682: LIST
74683: LIST
74684: LIST
74685: LIST
74686: LIST
74687: ST_TO_ADDR
// end ; end ;
74688: GO 74691
74690: POP
// result := list ;
74691: LD_ADDR_VAR 0 4
74695: PUSH
74696: LD_VAR 0 5
74700: ST_TO_ADDR
// end ;
74701: LD_VAR 0 4
74705: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
74706: LD_INT 0
74708: PPUSH
74709: PPUSH
74710: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
74711: LD_VAR 0 1
74715: NOT
74716: IFTRUE 74744
74718: PUSH
74719: LD_VAR 0 2
74723: PUSH
74724: LD_INT 1
74726: PUSH
74727: LD_INT 2
74729: PUSH
74730: LD_INT 3
74732: PUSH
74733: LD_INT 4
74735: PUSH
74736: EMPTY
74737: LIST
74738: LIST
74739: LIST
74740: LIST
74741: IN
74742: NOT
74743: OR
74744: IFFALSE 74748
// exit ;
74746: GO 74831
// tmp := [ ] ;
74748: LD_ADDR_VAR 0 5
74752: PUSH
74753: EMPTY
74754: ST_TO_ADDR
// for i in units do
74755: LD_ADDR_VAR 0 4
74759: PUSH
74760: LD_VAR 0 1
74764: PUSH
74765: FOR_IN
74766: IFFALSE 74800
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
74768: LD_ADDR_VAR 0 5
74772: PUSH
74773: LD_VAR 0 5
74777: PPUSH
74778: LD_VAR 0 4
74782: PPUSH
74783: LD_VAR 0 2
74787: PPUSH
74788: CALL_OW 259
74792: PPUSH
74793: CALL 76226 0 2
74797: ST_TO_ADDR
74798: GO 74765
74800: POP
74801: POP
// if not tmp then
74802: LD_VAR 0 5
74806: NOT
74807: IFFALSE 74811
// exit ;
74809: GO 74831
// result := SortListByListDesc ( units , tmp ) ;
74811: LD_ADDR_VAR 0 3
74815: PUSH
74816: LD_VAR 0 1
74820: PPUSH
74821: LD_VAR 0 5
74825: PPUSH
74826: CALL_OW 77
74830: ST_TO_ADDR
// end ;
74831: LD_VAR 0 3
74835: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
74836: LD_INT 0
74838: PPUSH
74839: PPUSH
74840: PPUSH
// result := false ;
74841: LD_ADDR_VAR 0 3
74845: PUSH
74846: LD_INT 0
74848: ST_TO_ADDR
// if not building then
74849: LD_VAR 0 2
74853: NOT
74854: IFFALSE 74858
// exit ;
74856: GO 75002
// x := GetX ( building ) ;
74858: LD_ADDR_VAR 0 4
74862: PUSH
74863: LD_VAR 0 2
74867: PPUSH
74868: CALL_OW 250
74872: ST_TO_ADDR
// y := GetY ( building ) ;
74873: LD_ADDR_VAR 0 5
74877: PUSH
74878: LD_VAR 0 2
74882: PPUSH
74883: CALL_OW 251
74887: ST_TO_ADDR
// if not x or not y then
74888: LD_VAR 0 4
74892: NOT
74893: IFTRUE 74902
74895: PUSH
74896: LD_VAR 0 5
74900: NOT
74901: OR
74902: IFFALSE 74906
// exit ;
74904: GO 75002
// if GetTaskList ( unit ) then
74906: LD_VAR 0 1
74910: PPUSH
74911: CALL_OW 437
74915: IFFALSE 75002
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74917: LD_STRING e
74919: PUSH
74920: LD_VAR 0 1
74924: PPUSH
74925: CALL_OW 437
74929: PUSH
74930: LD_INT 1
74932: ARRAY
74933: PUSH
74934: LD_INT 1
74936: ARRAY
74937: EQUAL
74938: IFFALSE 74965
74940: PUSH
74941: LD_VAR 0 4
74945: PUSH
74946: LD_VAR 0 1
74950: PPUSH
74951: CALL_OW 437
74955: PUSH
74956: LD_INT 1
74958: ARRAY
74959: PUSH
74960: LD_INT 2
74962: ARRAY
74963: EQUAL
74964: AND
74965: IFFALSE 74992
74967: PUSH
74968: LD_VAR 0 5
74972: PUSH
74973: LD_VAR 0 1
74977: PPUSH
74978: CALL_OW 437
74982: PUSH
74983: LD_INT 1
74985: ARRAY
74986: PUSH
74987: LD_INT 3
74989: ARRAY
74990: EQUAL
74991: AND
74992: IFFALSE 75002
// result := true end ;
74994: LD_ADDR_VAR 0 3
74998: PUSH
74999: LD_INT 1
75001: ST_TO_ADDR
// end ;
75002: LD_VAR 0 3
75006: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75007: LD_INT 0
75009: PPUSH
// result := false ;
75010: LD_ADDR_VAR 0 4
75014: PUSH
75015: LD_INT 0
75017: ST_TO_ADDR
// if GetTaskList ( unit ) then
75018: LD_VAR 0 1
75022: PPUSH
75023: CALL_OW 437
75027: IFFALSE 75114
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75029: LD_STRING M
75031: PUSH
75032: LD_VAR 0 1
75036: PPUSH
75037: CALL_OW 437
75041: PUSH
75042: LD_INT 1
75044: ARRAY
75045: PUSH
75046: LD_INT 1
75048: ARRAY
75049: EQUAL
75050: IFFALSE 75077
75052: PUSH
75053: LD_VAR 0 2
75057: PUSH
75058: LD_VAR 0 1
75062: PPUSH
75063: CALL_OW 437
75067: PUSH
75068: LD_INT 1
75070: ARRAY
75071: PUSH
75072: LD_INT 2
75074: ARRAY
75075: EQUAL
75076: AND
75077: IFFALSE 75104
75079: PUSH
75080: LD_VAR 0 3
75084: PUSH
75085: LD_VAR 0 1
75089: PPUSH
75090: CALL_OW 437
75094: PUSH
75095: LD_INT 1
75097: ARRAY
75098: PUSH
75099: LD_INT 3
75101: ARRAY
75102: EQUAL
75103: AND
75104: IFFALSE 75114
// result := true ;
75106: LD_ADDR_VAR 0 4
75110: PUSH
75111: LD_INT 1
75113: ST_TO_ADDR
// end ; end ;
75114: LD_VAR 0 4
75118: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75119: LD_INT 0
75121: PPUSH
75122: PPUSH
75123: PPUSH
75124: PPUSH
// if not unit or not area then
75125: LD_VAR 0 1
75129: NOT
75130: IFTRUE 75139
75132: PUSH
75133: LD_VAR 0 2
75137: NOT
75138: OR
75139: IFFALSE 75143
// exit ;
75141: GO 75319
// tmp := AreaToList ( area , i ) ;
75143: LD_ADDR_VAR 0 6
75147: PUSH
75148: LD_VAR 0 2
75152: PPUSH
75153: LD_VAR 0 5
75157: PPUSH
75158: CALL_OW 517
75162: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
75163: LD_ADDR_VAR 0 5
75167: PUSH
75168: DOUBLE
75169: LD_INT 1
75171: DEC
75172: ST_TO_ADDR
75173: LD_VAR 0 6
75177: PUSH
75178: LD_INT 1
75180: ARRAY
75181: PUSH
75182: FOR_TO
75183: IFFALSE 75317
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
75185: LD_ADDR_VAR 0 7
75189: PUSH
75190: LD_VAR 0 6
75194: PUSH
75195: LD_INT 1
75197: ARRAY
75198: PUSH
75199: LD_VAR 0 5
75203: ARRAY
75204: PUSH
75205: LD_VAR 0 6
75209: PUSH
75210: LD_INT 2
75212: ARRAY
75213: PUSH
75214: LD_VAR 0 5
75218: ARRAY
75219: PUSH
75220: EMPTY
75221: LIST
75222: LIST
75223: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
75224: LD_INT 92
75226: PUSH
75227: LD_VAR 0 7
75231: PUSH
75232: LD_INT 1
75234: ARRAY
75235: PUSH
75236: LD_VAR 0 7
75240: PUSH
75241: LD_INT 2
75243: ARRAY
75244: PUSH
75245: LD_INT 2
75247: PUSH
75248: EMPTY
75249: LIST
75250: LIST
75251: LIST
75252: LIST
75253: PPUSH
75254: CALL_OW 69
75258: PUSH
75259: LD_INT 0
75261: EQUAL
75262: IFFALSE 75315
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
75264: LD_VAR 0 1
75268: PPUSH
75269: LD_VAR 0 7
75273: PUSH
75274: LD_INT 1
75276: ARRAY
75277: PPUSH
75278: LD_VAR 0 7
75282: PUSH
75283: LD_INT 2
75285: ARRAY
75286: PPUSH
75287: LD_VAR 0 3
75291: PPUSH
75292: CALL_OW 48
// result := IsPlaced ( unit ) ;
75296: LD_ADDR_VAR 0 4
75300: PUSH
75301: LD_VAR 0 1
75305: PPUSH
75306: CALL_OW 305
75310: ST_TO_ADDR
// exit ;
75311: POP
75312: POP
75313: GO 75319
// end ; end ;
75315: GO 75182
75317: POP
75318: POP
// end ;
75319: LD_VAR 0 4
75323: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75324: LD_INT 0
75326: PPUSH
75327: PPUSH
75328: PPUSH
// if not side or side > 8 then
75329: LD_VAR 0 1
75333: NOT
75334: IFTRUE 75346
75336: PUSH
75337: LD_VAR 0 1
75341: PUSH
75342: LD_INT 8
75344: GREATER
75345: OR
75346: IFFALSE 75350
// exit ;
75348: GO 75537
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75350: LD_ADDR_VAR 0 4
75354: PUSH
75355: LD_INT 22
75357: PUSH
75358: LD_VAR 0 1
75362: PUSH
75363: EMPTY
75364: LIST
75365: LIST
75366: PUSH
75367: LD_INT 21
75369: PUSH
75370: LD_INT 3
75372: PUSH
75373: EMPTY
75374: LIST
75375: LIST
75376: PUSH
75377: EMPTY
75378: LIST
75379: LIST
75380: PPUSH
75381: CALL_OW 69
75385: ST_TO_ADDR
// if not tmp then
75386: LD_VAR 0 4
75390: NOT
75391: IFFALSE 75395
// exit ;
75393: GO 75537
// enable_addtolog := true ;
75395: LD_ADDR_OWVAR 81
75399: PUSH
75400: LD_INT 1
75402: ST_TO_ADDR
// AddToLog ( [ ) ;
75403: LD_STRING [
75405: PPUSH
75406: CALL_OW 561
// for i in tmp do
75410: LD_ADDR_VAR 0 3
75414: PUSH
75415: LD_VAR 0 4
75419: PUSH
75420: FOR_IN
75421: IFFALSE 75528
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
75423: LD_STRING [
75425: PUSH
75426: LD_VAR 0 3
75430: PPUSH
75431: CALL_OW 266
75435: STR
75436: PUSH
75437: LD_STRING , 
75439: STR
75440: PUSH
75441: LD_VAR 0 3
75445: PPUSH
75446: CALL_OW 250
75450: STR
75451: PUSH
75452: LD_STRING , 
75454: STR
75455: PUSH
75456: LD_VAR 0 3
75460: PPUSH
75461: CALL_OW 251
75465: STR
75466: PUSH
75467: LD_STRING , 
75469: STR
75470: PUSH
75471: LD_VAR 0 3
75475: PPUSH
75476: CALL_OW 254
75480: STR
75481: PUSH
75482: LD_STRING , 
75484: STR
75485: PUSH
75486: LD_VAR 0 3
75490: PPUSH
75491: LD_INT 1
75493: PPUSH
75494: CALL_OW 268
75498: STR
75499: PUSH
75500: LD_STRING , 
75502: STR
75503: PUSH
75504: LD_VAR 0 3
75508: PPUSH
75509: LD_INT 2
75511: PPUSH
75512: CALL_OW 268
75516: STR
75517: PUSH
75518: LD_STRING ],
75520: STR
75521: PPUSH
75522: CALL_OW 561
// end ;
75526: GO 75420
75528: POP
75529: POP
// AddToLog ( ]; ) ;
75530: LD_STRING ];
75532: PPUSH
75533: CALL_OW 561
// end ;
75537: LD_VAR 0 2
75541: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
75542: LD_INT 0
75544: PPUSH
75545: PPUSH
75546: PPUSH
75547: PPUSH
75548: PPUSH
// if not area or not rate or not max then
75549: LD_VAR 0 1
75553: NOT
75554: IFTRUE 75563
75556: PUSH
75557: LD_VAR 0 2
75561: NOT
75562: OR
75563: IFTRUE 75572
75565: PUSH
75566: LD_VAR 0 4
75570: NOT
75571: OR
75572: IFFALSE 75576
// exit ;
75574: GO 75765
// while 1 do
75576: LD_INT 1
75578: IFFALSE 75765
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
75580: LD_ADDR_VAR 0 9
75584: PUSH
75585: LD_VAR 0 1
75589: PPUSH
75590: LD_INT 1
75592: PPUSH
75593: CALL_OW 287
75597: PUSH
75598: LD_INT 10
75600: MUL
75601: ST_TO_ADDR
// r := rate / 10 ;
75602: LD_ADDR_VAR 0 7
75606: PUSH
75607: LD_VAR 0 2
75611: PUSH
75612: LD_INT 10
75614: DIVREAL
75615: ST_TO_ADDR
// time := 1 1$00 ;
75616: LD_ADDR_VAR 0 8
75620: PUSH
75621: LD_INT 2100
75623: ST_TO_ADDR
// if amount < min then
75624: LD_VAR 0 9
75628: PUSH
75629: LD_VAR 0 3
75633: LESS
75634: IFFALSE 75652
// r := r * 2 else
75636: LD_ADDR_VAR 0 7
75640: PUSH
75641: LD_VAR 0 7
75645: PUSH
75646: LD_INT 2
75648: MUL
75649: ST_TO_ADDR
75650: GO 75678
// if amount > max then
75652: LD_VAR 0 9
75656: PUSH
75657: LD_VAR 0 4
75661: GREATER
75662: IFFALSE 75678
// r := r / 2 ;
75664: LD_ADDR_VAR 0 7
75668: PUSH
75669: LD_VAR 0 7
75673: PUSH
75674: LD_INT 2
75676: DIVREAL
75677: ST_TO_ADDR
// time := time / r ;
75678: LD_ADDR_VAR 0 8
75682: PUSH
75683: LD_VAR 0 8
75687: PUSH
75688: LD_VAR 0 7
75692: DIVREAL
75693: ST_TO_ADDR
// if time < 0 then
75694: LD_VAR 0 8
75698: PUSH
75699: LD_INT 0
75701: LESS
75702: IFFALSE 75719
// time := time * - 1 ;
75704: LD_ADDR_VAR 0 8
75708: PUSH
75709: LD_VAR 0 8
75713: PUSH
75714: LD_INT 1
75716: NEG
75717: MUL
75718: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
75719: LD_VAR 0 8
75723: PUSH
75724: LD_INT 35
75726: PPUSH
75727: LD_INT 875
75729: PPUSH
75730: CALL_OW 12
75734: PLUS
75735: PPUSH
75736: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
75740: LD_INT 1
75742: PPUSH
75743: LD_INT 5
75745: PPUSH
75746: CALL_OW 12
75750: PPUSH
75751: LD_VAR 0 1
75755: PPUSH
75756: LD_INT 1
75758: PPUSH
75759: CALL_OW 55
// end ;
75763: GO 75576
// end ;
75765: LD_VAR 0 5
75769: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
75770: LD_INT 0
75772: PPUSH
75773: PPUSH
75774: PPUSH
75775: PPUSH
75776: PPUSH
75777: PPUSH
75778: PPUSH
75779: PPUSH
// if not turrets or not factories then
75780: LD_VAR 0 1
75784: NOT
75785: IFTRUE 75794
75787: PUSH
75788: LD_VAR 0 2
75792: NOT
75793: OR
75794: IFFALSE 75798
// exit ;
75796: GO 76105
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
75798: LD_ADDR_VAR 0 10
75802: PUSH
75803: LD_INT 5
75805: PUSH
75806: LD_INT 6
75808: PUSH
75809: EMPTY
75810: LIST
75811: LIST
75812: PUSH
75813: LD_INT 2
75815: PUSH
75816: LD_INT 4
75818: PUSH
75819: EMPTY
75820: LIST
75821: LIST
75822: PUSH
75823: LD_INT 3
75825: PUSH
75826: LD_INT 5
75828: PUSH
75829: EMPTY
75830: LIST
75831: LIST
75832: PUSH
75833: EMPTY
75834: LIST
75835: LIST
75836: LIST
75837: PUSH
75838: LD_INT 24
75840: PUSH
75841: LD_INT 25
75843: PUSH
75844: EMPTY
75845: LIST
75846: LIST
75847: PUSH
75848: LD_INT 23
75850: PUSH
75851: LD_INT 27
75853: PUSH
75854: EMPTY
75855: LIST
75856: LIST
75857: PUSH
75858: EMPTY
75859: LIST
75860: LIST
75861: PUSH
75862: LD_INT 42
75864: PUSH
75865: LD_INT 43
75867: PUSH
75868: EMPTY
75869: LIST
75870: LIST
75871: PUSH
75872: LD_INT 44
75874: PUSH
75875: LD_INT 46
75877: PUSH
75878: EMPTY
75879: LIST
75880: LIST
75881: PUSH
75882: LD_INT 45
75884: PUSH
75885: LD_INT 47
75887: PUSH
75888: EMPTY
75889: LIST
75890: LIST
75891: PUSH
75892: EMPTY
75893: LIST
75894: LIST
75895: LIST
75896: PUSH
75897: EMPTY
75898: LIST
75899: LIST
75900: LIST
75901: ST_TO_ADDR
// result := [ ] ;
75902: LD_ADDR_VAR 0 3
75906: PUSH
75907: EMPTY
75908: ST_TO_ADDR
// for i in turrets do
75909: LD_ADDR_VAR 0 4
75913: PUSH
75914: LD_VAR 0 1
75918: PUSH
75919: FOR_IN
75920: IFFALSE 76103
// begin nat := GetNation ( i ) ;
75922: LD_ADDR_VAR 0 7
75926: PUSH
75927: LD_VAR 0 4
75931: PPUSH
75932: CALL_OW 248
75936: ST_TO_ADDR
// weapon := 0 ;
75937: LD_ADDR_VAR 0 8
75941: PUSH
75942: LD_INT 0
75944: ST_TO_ADDR
// if not nat then
75945: LD_VAR 0 7
75949: NOT
75950: IFFALSE 75954
// continue ;
75952: GO 75919
// for j in list [ nat ] do
75954: LD_ADDR_VAR 0 5
75958: PUSH
75959: LD_VAR 0 10
75963: PUSH
75964: LD_VAR 0 7
75968: ARRAY
75969: PUSH
75970: FOR_IN
75971: IFFALSE 76012
// if GetBWeapon ( i ) = j [ 1 ] then
75973: LD_VAR 0 4
75977: PPUSH
75978: CALL_OW 269
75982: PUSH
75983: LD_VAR 0 5
75987: PUSH
75988: LD_INT 1
75990: ARRAY
75991: EQUAL
75992: IFFALSE 76010
// begin weapon := j [ 2 ] ;
75994: LD_ADDR_VAR 0 8
75998: PUSH
75999: LD_VAR 0 5
76003: PUSH
76004: LD_INT 2
76006: ARRAY
76007: ST_TO_ADDR
// break ;
76008: GO 76012
// end ;
76010: GO 75970
76012: POP
76013: POP
// if not weapon then
76014: LD_VAR 0 8
76018: NOT
76019: IFFALSE 76023
// continue ;
76021: GO 75919
// for k in factories do
76023: LD_ADDR_VAR 0 6
76027: PUSH
76028: LD_VAR 0 2
76032: PUSH
76033: FOR_IN
76034: IFFALSE 76099
// begin weapons := AvailableWeaponList ( k ) ;
76036: LD_ADDR_VAR 0 9
76040: PUSH
76041: LD_VAR 0 6
76045: PPUSH
76046: CALL_OW 478
76050: ST_TO_ADDR
// if not weapons then
76051: LD_VAR 0 9
76055: NOT
76056: IFFALSE 76060
// continue ;
76058: GO 76033
// if weapon in weapons then
76060: LD_VAR 0 8
76064: PUSH
76065: LD_VAR 0 9
76069: IN
76070: IFFALSE 76097
// begin result := [ i , weapon ] ;
76072: LD_ADDR_VAR 0 3
76076: PUSH
76077: LD_VAR 0 4
76081: PUSH
76082: LD_VAR 0 8
76086: PUSH
76087: EMPTY
76088: LIST
76089: LIST
76090: ST_TO_ADDR
// exit ;
76091: POP
76092: POP
76093: POP
76094: POP
76095: GO 76105
// end ; end ;
76097: GO 76033
76099: POP
76100: POP
// end ;
76101: GO 75919
76103: POP
76104: POP
// end ;
76105: LD_VAR 0 3
76109: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76110: LD_INT 0
76112: PPUSH
// if not side or side > 8 then
76113: LD_VAR 0 3
76117: NOT
76118: IFTRUE 76130
76120: PUSH
76121: LD_VAR 0 3
76125: PUSH
76126: LD_INT 8
76128: GREATER
76129: OR
76130: IFFALSE 76134
// exit ;
76132: GO 76193
// if not range then
76134: LD_VAR 0 4
76138: NOT
76139: IFFALSE 76150
// range := - 12 ;
76141: LD_ADDR_VAR 0 4
76145: PUSH
76146: LD_INT 12
76148: NEG
76149: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76150: LD_VAR 0 1
76154: PPUSH
76155: LD_VAR 0 2
76159: PPUSH
76160: LD_VAR 0 3
76164: PPUSH
76165: LD_VAR 0 4
76169: PPUSH
76170: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76174: LD_VAR 0 1
76178: PPUSH
76179: LD_VAR 0 2
76183: PPUSH
76184: LD_VAR 0 3
76188: PPUSH
76189: CALL_OW 331
// end ;
76193: LD_VAR 0 5
76197: RET
// export function Video ( mode ) ; begin
76198: LD_INT 0
76200: PPUSH
// ingame_video = mode ;
76201: LD_ADDR_OWVAR 52
76205: PUSH
76206: LD_VAR 0 1
76210: ST_TO_ADDR
// interface_hidden = mode ;
76211: LD_ADDR_OWVAR 54
76215: PUSH
76216: LD_VAR 0 1
76220: ST_TO_ADDR
// end ;
76221: LD_VAR 0 2
76225: RET
// export function Join ( array , element ) ; begin
76226: LD_INT 0
76228: PPUSH
// result := Replace ( array , array + 1 , element ) ;
76229: LD_ADDR_VAR 0 3
76233: PUSH
76234: LD_VAR 0 1
76238: PPUSH
76239: LD_VAR 0 1
76243: PUSH
76244: LD_INT 1
76246: PLUS
76247: PPUSH
76248: LD_VAR 0 2
76252: PPUSH
76253: CALL_OW 1
76257: ST_TO_ADDR
// end ;
76258: LD_VAR 0 3
76262: RET
// export function JoinUnion ( array , element ) ; begin
76263: LD_INT 0
76265: PPUSH
// result := array union element ;
76266: LD_ADDR_VAR 0 3
76270: PUSH
76271: LD_VAR 0 1
76275: PUSH
76276: LD_VAR 0 2
76280: UNION
76281: ST_TO_ADDR
// end ;
76282: LD_VAR 0 3
76286: RET
// export function GetBehemoths ( side ) ; begin
76287: LD_INT 0
76289: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
76290: LD_ADDR_VAR 0 2
76294: PUSH
76295: LD_INT 22
76297: PUSH
76298: LD_VAR 0 1
76302: PUSH
76303: EMPTY
76304: LIST
76305: LIST
76306: PUSH
76307: LD_INT 31
76309: PUSH
76310: LD_INT 25
76312: PUSH
76313: EMPTY
76314: LIST
76315: LIST
76316: PUSH
76317: EMPTY
76318: LIST
76319: LIST
76320: PPUSH
76321: CALL_OW 69
76325: ST_TO_ADDR
// end ;
76326: LD_VAR 0 2
76330: RET
// export function Shuffle ( array ) ; var i , index ; begin
76331: LD_INT 0
76333: PPUSH
76334: PPUSH
76335: PPUSH
// result := [ ] ;
76336: LD_ADDR_VAR 0 2
76340: PUSH
76341: EMPTY
76342: ST_TO_ADDR
// if not array then
76343: LD_VAR 0 1
76347: NOT
76348: IFFALSE 76352
// exit ;
76350: GO 76451
// Randomize ;
76352: CALL_OW 10
// for i = array downto 1 do
76356: LD_ADDR_VAR 0 3
76360: PUSH
76361: DOUBLE
76362: LD_VAR 0 1
76366: INC
76367: ST_TO_ADDR
76368: LD_INT 1
76370: PUSH
76371: FOR_DOWNTO
76372: IFFALSE 76449
// begin index := rand ( 1 , array ) ;
76374: LD_ADDR_VAR 0 4
76378: PUSH
76379: LD_INT 1
76381: PPUSH
76382: LD_VAR 0 1
76386: PPUSH
76387: CALL_OW 12
76391: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
76392: LD_ADDR_VAR 0 2
76396: PUSH
76397: LD_VAR 0 2
76401: PPUSH
76402: LD_VAR 0 2
76406: PUSH
76407: LD_INT 1
76409: PLUS
76410: PPUSH
76411: LD_VAR 0 1
76415: PUSH
76416: LD_VAR 0 4
76420: ARRAY
76421: PPUSH
76422: CALL_OW 2
76426: ST_TO_ADDR
// array := Delete ( array , index ) ;
76427: LD_ADDR_VAR 0 1
76431: PUSH
76432: LD_VAR 0 1
76436: PPUSH
76437: LD_VAR 0 4
76441: PPUSH
76442: CALL_OW 3
76446: ST_TO_ADDR
// end ;
76447: GO 76371
76449: POP
76450: POP
// end ;
76451: LD_VAR 0 2
76455: RET
// export function GetBaseMaterials ( base ) ; begin
76456: LD_INT 0
76458: PPUSH
// result := [ 0 , 0 , 0 ] ;
76459: LD_ADDR_VAR 0 2
76463: PUSH
76464: LD_INT 0
76466: PUSH
76467: LD_INT 0
76469: PUSH
76470: LD_INT 0
76472: PUSH
76473: EMPTY
76474: LIST
76475: LIST
76476: LIST
76477: ST_TO_ADDR
// if not base then
76478: LD_VAR 0 1
76482: NOT
76483: IFFALSE 76487
// exit ;
76485: GO 76536
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
76487: LD_ADDR_VAR 0 2
76491: PUSH
76492: LD_VAR 0 1
76496: PPUSH
76497: LD_INT 1
76499: PPUSH
76500: CALL_OW 275
76504: PUSH
76505: LD_VAR 0 1
76509: PPUSH
76510: LD_INT 2
76512: PPUSH
76513: CALL_OW 275
76517: PUSH
76518: LD_VAR 0 1
76522: PPUSH
76523: LD_INT 3
76525: PPUSH
76526: CALL_OW 275
76530: PUSH
76531: EMPTY
76532: LIST
76533: LIST
76534: LIST
76535: ST_TO_ADDR
// end ;
76536: LD_VAR 0 2
76540: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
76541: LD_INT 0
76543: PPUSH
76544: PPUSH
// result := array ;
76545: LD_ADDR_VAR 0 3
76549: PUSH
76550: LD_VAR 0 1
76554: ST_TO_ADDR
// if size >= result then
76555: LD_VAR 0 2
76559: PUSH
76560: LD_VAR 0 3
76564: GREATEREQUAL
76565: IFFALSE 76569
// exit ;
76567: GO 76619
// if size then
76569: LD_VAR 0 2
76573: IFFALSE 76619
// for i := array downto size do
76575: LD_ADDR_VAR 0 4
76579: PUSH
76580: DOUBLE
76581: LD_VAR 0 1
76585: INC
76586: ST_TO_ADDR
76587: LD_VAR 0 2
76591: PUSH
76592: FOR_DOWNTO
76593: IFFALSE 76617
// result := Delete ( result , result ) ;
76595: LD_ADDR_VAR 0 3
76599: PUSH
76600: LD_VAR 0 3
76604: PPUSH
76605: LD_VAR 0 3
76609: PPUSH
76610: CALL_OW 3
76614: ST_TO_ADDR
76615: GO 76592
76617: POP
76618: POP
// end ;
76619: LD_VAR 0 3
76623: RET
// export function ComExit ( unit ) ; var tmp ; begin
76624: LD_INT 0
76626: PPUSH
76627: PPUSH
// if not IsInUnit ( unit ) then
76628: LD_VAR 0 1
76632: PPUSH
76633: CALL_OW 310
76637: NOT
76638: IFFALSE 76642
// exit ;
76640: GO 76702
// tmp := IsInUnit ( unit ) ;
76642: LD_ADDR_VAR 0 3
76646: PUSH
76647: LD_VAR 0 1
76651: PPUSH
76652: CALL_OW 310
76656: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
76657: LD_VAR 0 3
76661: PPUSH
76662: CALL_OW 247
76666: PUSH
76667: LD_INT 2
76669: EQUAL
76670: IFFALSE 76683
// ComExitVehicle ( unit ) else
76672: LD_VAR 0 1
76676: PPUSH
76677: CALL_OW 121
76681: GO 76692
// ComExitBuilding ( unit ) ;
76683: LD_VAR 0 1
76687: PPUSH
76688: CALL_OW 122
// result := tmp ;
76692: LD_ADDR_VAR 0 2
76696: PUSH
76697: LD_VAR 0 3
76701: ST_TO_ADDR
// end ;
76702: LD_VAR 0 2
76706: RET
// export function ComExitAll ( units ) ; var i ; begin
76707: LD_INT 0
76709: PPUSH
76710: PPUSH
// if not units then
76711: LD_VAR 0 1
76715: NOT
76716: IFFALSE 76720
// exit ;
76718: GO 76746
// for i in units do
76720: LD_ADDR_VAR 0 3
76724: PUSH
76725: LD_VAR 0 1
76729: PUSH
76730: FOR_IN
76731: IFFALSE 76744
// ComExit ( i ) ;
76733: LD_VAR 0 3
76737: PPUSH
76738: CALL 76624 0 1
76742: GO 76730
76744: POP
76745: POP
// end ;
76746: LD_VAR 0 2
76750: RET
// export function ResetHc ; begin
76751: LD_INT 0
76753: PPUSH
// InitHc ;
76754: CALL_OW 19
// hc_importance := 0 ;
76758: LD_ADDR_OWVAR 32
76762: PUSH
76763: LD_INT 0
76765: ST_TO_ADDR
// end ;
76766: LD_VAR 0 1
76770: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
76771: LD_INT 0
76773: PPUSH
76774: PPUSH
76775: PPUSH
// _x := ( x1 + x2 ) div 2 ;
76776: LD_ADDR_VAR 0 6
76780: PUSH
76781: LD_VAR 0 1
76785: PUSH
76786: LD_VAR 0 3
76790: PLUS
76791: PUSH
76792: LD_INT 2
76794: DIV
76795: ST_TO_ADDR
// if _x < 0 then
76796: LD_VAR 0 6
76800: PUSH
76801: LD_INT 0
76803: LESS
76804: IFFALSE 76821
// _x := _x * - 1 ;
76806: LD_ADDR_VAR 0 6
76810: PUSH
76811: LD_VAR 0 6
76815: PUSH
76816: LD_INT 1
76818: NEG
76819: MUL
76820: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
76821: LD_ADDR_VAR 0 7
76825: PUSH
76826: LD_VAR 0 2
76830: PUSH
76831: LD_VAR 0 4
76835: PLUS
76836: PUSH
76837: LD_INT 2
76839: DIV
76840: ST_TO_ADDR
// if _y < 0 then
76841: LD_VAR 0 7
76845: PUSH
76846: LD_INT 0
76848: LESS
76849: IFFALSE 76866
// _y := _y * - 1 ;
76851: LD_ADDR_VAR 0 7
76855: PUSH
76856: LD_VAR 0 7
76860: PUSH
76861: LD_INT 1
76863: NEG
76864: MUL
76865: ST_TO_ADDR
// result := [ _x , _y ] ;
76866: LD_ADDR_VAR 0 5
76870: PUSH
76871: LD_VAR 0 6
76875: PUSH
76876: LD_VAR 0 7
76880: PUSH
76881: EMPTY
76882: LIST
76883: LIST
76884: ST_TO_ADDR
// end ;
76885: LD_VAR 0 5
76889: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
76890: LD_INT 0
76892: PPUSH
76893: PPUSH
76894: PPUSH
76895: PPUSH
// task := GetTaskList ( unit ) ;
76896: LD_ADDR_VAR 0 7
76900: PUSH
76901: LD_VAR 0 1
76905: PPUSH
76906: CALL_OW 437
76910: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
76911: LD_VAR 0 7
76915: NOT
76916: IFFALSE 76935
76918: PUSH
76919: LD_VAR 0 1
76923: PPUSH
76924: LD_VAR 0 2
76928: PPUSH
76929: CALL_OW 308
76933: NOT
76934: AND
76935: IFFALSE 76939
// exit ;
76937: GO 77057
// if IsInArea ( unit , area ) then
76939: LD_VAR 0 1
76943: PPUSH
76944: LD_VAR 0 2
76948: PPUSH
76949: CALL_OW 308
76953: IFFALSE 76971
// begin ComMoveToArea ( unit , goAway ) ;
76955: LD_VAR 0 1
76959: PPUSH
76960: LD_VAR 0 3
76964: PPUSH
76965: CALL_OW 113
// exit ;
76969: GO 77057
// end ; if task [ 1 ] [ 1 ] <> M then
76971: LD_VAR 0 7
76975: PUSH
76976: LD_INT 1
76978: ARRAY
76979: PUSH
76980: LD_INT 1
76982: ARRAY
76983: PUSH
76984: LD_STRING M
76986: NONEQUAL
76987: IFFALSE 76991
// exit ;
76989: GO 77057
// x := task [ 1 ] [ 2 ] ;
76991: LD_ADDR_VAR 0 5
76995: PUSH
76996: LD_VAR 0 7
77000: PUSH
77001: LD_INT 1
77003: ARRAY
77004: PUSH
77005: LD_INT 2
77007: ARRAY
77008: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77009: LD_ADDR_VAR 0 6
77013: PUSH
77014: LD_VAR 0 7
77018: PUSH
77019: LD_INT 1
77021: ARRAY
77022: PUSH
77023: LD_INT 3
77025: ARRAY
77026: ST_TO_ADDR
// if InArea ( x , y , area ) then
77027: LD_VAR 0 5
77031: PPUSH
77032: LD_VAR 0 6
77036: PPUSH
77037: LD_VAR 0 2
77041: PPUSH
77042: CALL_OW 309
77046: IFFALSE 77057
// ComStop ( unit ) ;
77048: LD_VAR 0 1
77052: PPUSH
77053: CALL_OW 141
// end ;
77057: LD_VAR 0 4
77061: RET
// export function Abs ( value ) ; begin
77062: LD_INT 0
77064: PPUSH
// result := value ;
77065: LD_ADDR_VAR 0 2
77069: PUSH
77070: LD_VAR 0 1
77074: ST_TO_ADDR
// if value < 0 then
77075: LD_VAR 0 1
77079: PUSH
77080: LD_INT 0
77082: LESS
77083: IFFALSE 77100
// result := value * - 1 ;
77085: LD_ADDR_VAR 0 2
77089: PUSH
77090: LD_VAR 0 1
77094: PUSH
77095: LD_INT 1
77097: NEG
77098: MUL
77099: ST_TO_ADDR
// end ;
77100: LD_VAR 0 2
77104: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77105: LD_INT 0
77107: PPUSH
77108: PPUSH
77109: PPUSH
77110: PPUSH
77111: PPUSH
77112: PPUSH
77113: PPUSH
77114: PPUSH
// if not unit or not building then
77115: LD_VAR 0 1
77119: NOT
77120: IFTRUE 77129
77122: PUSH
77123: LD_VAR 0 2
77127: NOT
77128: OR
77129: IFFALSE 77133
// exit ;
77131: GO 77361
// x := GetX ( building ) ;
77133: LD_ADDR_VAR 0 4
77137: PUSH
77138: LD_VAR 0 2
77142: PPUSH
77143: CALL_OW 250
77147: ST_TO_ADDR
// y := GetY ( building ) ;
77148: LD_ADDR_VAR 0 6
77152: PUSH
77153: LD_VAR 0 2
77157: PPUSH
77158: CALL_OW 251
77162: ST_TO_ADDR
// d := GetDir ( building ) ;
77163: LD_ADDR_VAR 0 8
77167: PUSH
77168: LD_VAR 0 2
77172: PPUSH
77173: CALL_OW 254
77177: ST_TO_ADDR
// r := 4 ;
77178: LD_ADDR_VAR 0 9
77182: PUSH
77183: LD_INT 4
77185: ST_TO_ADDR
// for i := 1 to 5 do
77186: LD_ADDR_VAR 0 10
77190: PUSH
77191: DOUBLE
77192: LD_INT 1
77194: DEC
77195: ST_TO_ADDR
77196: LD_INT 5
77198: PUSH
77199: FOR_TO
77200: IFFALSE 77359
// begin _x := ShiftX ( x , d , r + i ) ;
77202: LD_ADDR_VAR 0 5
77206: PUSH
77207: LD_VAR 0 4
77211: PPUSH
77212: LD_VAR 0 8
77216: PPUSH
77217: LD_VAR 0 9
77221: PUSH
77222: LD_VAR 0 10
77226: PLUS
77227: PPUSH
77228: CALL_OW 272
77232: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77233: LD_ADDR_VAR 0 7
77237: PUSH
77238: LD_VAR 0 6
77242: PPUSH
77243: LD_VAR 0 8
77247: PPUSH
77248: LD_VAR 0 9
77252: PUSH
77253: LD_VAR 0 10
77257: PLUS
77258: PPUSH
77259: CALL_OW 273
77263: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
77264: LD_VAR 0 5
77268: PPUSH
77269: LD_VAR 0 7
77273: PPUSH
77274: CALL_OW 488
77278: IFFALSE 77313
77280: PUSH
77281: LD_VAR 0 5
77285: PPUSH
77286: LD_VAR 0 7
77290: PPUSH
77291: CALL_OW 428
77295: PPUSH
77296: CALL_OW 247
77300: PUSH
77301: LD_INT 3
77303: PUSH
77304: LD_INT 2
77306: PUSH
77307: EMPTY
77308: LIST
77309: LIST
77310: IN
77311: NOT
77312: AND
77313: IFFALSE 77357
// begin ComMoveXY ( unit , _x , _y ) ;
77315: LD_VAR 0 1
77319: PPUSH
77320: LD_VAR 0 5
77324: PPUSH
77325: LD_VAR 0 7
77329: PPUSH
77330: CALL_OW 111
// result := [ _x , _y ] ;
77334: LD_ADDR_VAR 0 3
77338: PUSH
77339: LD_VAR 0 5
77343: PUSH
77344: LD_VAR 0 7
77348: PUSH
77349: EMPTY
77350: LIST
77351: LIST
77352: ST_TO_ADDR
// exit ;
77353: POP
77354: POP
77355: GO 77361
// end ; end ;
77357: GO 77199
77359: POP
77360: POP
// end ;
77361: LD_VAR 0 3
77365: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
77366: LD_INT 0
77368: PPUSH
77369: PPUSH
77370: PPUSH
// result := 0 ;
77371: LD_ADDR_VAR 0 3
77375: PUSH
77376: LD_INT 0
77378: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
77379: LD_VAR 0 1
77383: PUSH
77384: LD_INT 0
77386: LESS
77387: IFTRUE 77399
77389: PUSH
77390: LD_VAR 0 1
77394: PUSH
77395: LD_INT 8
77397: GREATER
77398: OR
77399: IFTRUE 77411
77401: PUSH
77402: LD_VAR 0 2
77406: PUSH
77407: LD_INT 0
77409: LESS
77410: OR
77411: IFTRUE 77423
77413: PUSH
77414: LD_VAR 0 2
77418: PUSH
77419: LD_INT 8
77421: GREATER
77422: OR
77423: IFFALSE 77427
// exit ;
77425: GO 77502
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
77427: LD_ADDR_VAR 0 4
77431: PUSH
77432: LD_INT 22
77434: PUSH
77435: LD_VAR 0 2
77439: PUSH
77440: EMPTY
77441: LIST
77442: LIST
77443: PPUSH
77444: CALL_OW 69
77448: PUSH
77449: FOR_IN
77450: IFFALSE 77500
// begin un := UnitShoot ( i ) ;
77452: LD_ADDR_VAR 0 5
77456: PUSH
77457: LD_VAR 0 4
77461: PPUSH
77462: CALL_OW 504
77466: ST_TO_ADDR
// if GetSide ( un ) = side1 then
77467: LD_VAR 0 5
77471: PPUSH
77472: CALL_OW 255
77476: PUSH
77477: LD_VAR 0 1
77481: EQUAL
77482: IFFALSE 77498
// begin result := un ;
77484: LD_ADDR_VAR 0 3
77488: PUSH
77489: LD_VAR 0 5
77493: ST_TO_ADDR
// exit ;
77494: POP
77495: POP
77496: GO 77502
// end ; end ;
77498: GO 77449
77500: POP
77501: POP
// end ;
77502: LD_VAR 0 3
77506: RET
// export function GetCargoBay ( units ) ; begin
77507: LD_INT 0
77509: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
77510: LD_ADDR_VAR 0 2
77514: PUSH
77515: LD_VAR 0 1
77519: PPUSH
77520: LD_INT 2
77522: PUSH
77523: LD_INT 34
77525: PUSH
77526: LD_INT 12
77528: PUSH
77529: EMPTY
77530: LIST
77531: LIST
77532: PUSH
77533: LD_INT 34
77535: PUSH
77536: LD_INT 51
77538: PUSH
77539: EMPTY
77540: LIST
77541: LIST
77542: PUSH
77543: LD_INT 34
77545: PUSH
77546: LD_INT 32
77548: PUSH
77549: EMPTY
77550: LIST
77551: LIST
77552: PUSH
77553: LD_INT 34
77555: PUSH
77556: LD_INT 89
77558: PUSH
77559: EMPTY
77560: LIST
77561: LIST
77562: PUSH
77563: EMPTY
77564: LIST
77565: LIST
77566: LIST
77567: LIST
77568: LIST
77569: PPUSH
77570: CALL_OW 72
77574: ST_TO_ADDR
// end ;
77575: LD_VAR 0 2
77579: RET
// export function Negate ( value ) ; begin
77580: LD_INT 0
77582: PPUSH
// result := not value ;
77583: LD_ADDR_VAR 0 2
77587: PUSH
77588: LD_VAR 0 1
77592: NOT
77593: ST_TO_ADDR
// end ;
77594: LD_VAR 0 2
77598: RET
// export function Inc ( value ) ; begin
77599: LD_INT 0
77601: PPUSH
// result := value + 1 ;
77602: LD_ADDR_VAR 0 2
77606: PUSH
77607: LD_VAR 0 1
77611: PUSH
77612: LD_INT 1
77614: PLUS
77615: ST_TO_ADDR
// end ;
77616: LD_VAR 0 2
77620: RET
// export function Dec ( value ) ; begin
77621: LD_INT 0
77623: PPUSH
// result := value - 1 ;
77624: LD_ADDR_VAR 0 2
77628: PUSH
77629: LD_VAR 0 1
77633: PUSH
77634: LD_INT 1
77636: MINUS
77637: ST_TO_ADDR
// end ;
77638: LD_VAR 0 2
77642: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
77643: LD_INT 0
77645: PPUSH
77646: PPUSH
77647: PPUSH
77648: PPUSH
77649: PPUSH
77650: PPUSH
77651: PPUSH
77652: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
77653: LD_VAR 0 1
77657: PPUSH
77658: LD_VAR 0 2
77662: PPUSH
77663: CALL_OW 488
77667: NOT
77668: IFTRUE 77687
77670: PUSH
77671: LD_VAR 0 3
77675: PPUSH
77676: LD_VAR 0 4
77680: PPUSH
77681: CALL_OW 488
77685: NOT
77686: OR
77687: IFFALSE 77700
// begin result := - 1 ;
77689: LD_ADDR_VAR 0 5
77693: PUSH
77694: LD_INT 1
77696: NEG
77697: ST_TO_ADDR
// exit ;
77698: GO 77935
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
77700: LD_ADDR_VAR 0 12
77704: PUSH
77705: LD_VAR 0 1
77709: PPUSH
77710: LD_VAR 0 2
77714: PPUSH
77715: LD_VAR 0 3
77719: PPUSH
77720: LD_VAR 0 4
77724: PPUSH
77725: CALL 76771 0 4
77729: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
77730: LD_ADDR_VAR 0 11
77734: PUSH
77735: LD_VAR 0 1
77739: PPUSH
77740: LD_VAR 0 2
77744: PPUSH
77745: LD_VAR 0 12
77749: PUSH
77750: LD_INT 1
77752: ARRAY
77753: PPUSH
77754: LD_VAR 0 12
77758: PUSH
77759: LD_INT 2
77761: ARRAY
77762: PPUSH
77763: CALL_OW 298
77767: ST_TO_ADDR
// distance := 9999 ;
77768: LD_ADDR_VAR 0 10
77772: PUSH
77773: LD_INT 9999
77775: ST_TO_ADDR
// for i := 0 to 5 do
77776: LD_ADDR_VAR 0 6
77780: PUSH
77781: DOUBLE
77782: LD_INT 0
77784: DEC
77785: ST_TO_ADDR
77786: LD_INT 5
77788: PUSH
77789: FOR_TO
77790: IFFALSE 77933
// begin _x := ShiftX ( x1 , i , centerDist ) ;
77792: LD_ADDR_VAR 0 7
77796: PUSH
77797: LD_VAR 0 1
77801: PPUSH
77802: LD_VAR 0 6
77806: PPUSH
77807: LD_VAR 0 11
77811: PPUSH
77812: CALL_OW 272
77816: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
77817: LD_ADDR_VAR 0 8
77821: PUSH
77822: LD_VAR 0 2
77826: PPUSH
77827: LD_VAR 0 6
77831: PPUSH
77832: LD_VAR 0 11
77836: PPUSH
77837: CALL_OW 273
77841: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
77842: LD_VAR 0 7
77846: PPUSH
77847: LD_VAR 0 8
77851: PPUSH
77852: CALL_OW 488
77856: NOT
77857: IFFALSE 77861
// continue ;
77859: GO 77789
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
77861: LD_ADDR_VAR 0 9
77865: PUSH
77866: LD_VAR 0 12
77870: PUSH
77871: LD_INT 1
77873: ARRAY
77874: PPUSH
77875: LD_VAR 0 12
77879: PUSH
77880: LD_INT 2
77882: ARRAY
77883: PPUSH
77884: LD_VAR 0 7
77888: PPUSH
77889: LD_VAR 0 8
77893: PPUSH
77894: CALL_OW 298
77898: ST_TO_ADDR
// if tmp < distance then
77899: LD_VAR 0 9
77903: PUSH
77904: LD_VAR 0 10
77908: LESS
77909: IFFALSE 77931
// begin result := i ;
77911: LD_ADDR_VAR 0 5
77915: PUSH
77916: LD_VAR 0 6
77920: ST_TO_ADDR
// distance := tmp ;
77921: LD_ADDR_VAR 0 10
77925: PUSH
77926: LD_VAR 0 9
77930: ST_TO_ADDR
// end ; end ;
77931: GO 77789
77933: POP
77934: POP
// end ;
77935: LD_VAR 0 5
77939: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77940: LD_INT 0
77942: PPUSH
77943: PPUSH
// if not driver or not IsInUnit ( driver ) then
77944: LD_VAR 0 1
77948: NOT
77949: IFTRUE 77963
77951: PUSH
77952: LD_VAR 0 1
77956: PPUSH
77957: CALL_OW 310
77961: NOT
77962: OR
77963: IFFALSE 77967
// exit ;
77965: GO 78057
// vehicle := IsInUnit ( driver ) ;
77967: LD_ADDR_VAR 0 3
77971: PUSH
77972: LD_VAR 0 1
77976: PPUSH
77977: CALL_OW 310
77981: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77982: LD_VAR 0 1
77986: PPUSH
77987: LD_STRING \
77989: PUSH
77990: LD_INT 0
77992: PUSH
77993: LD_INT 0
77995: PUSH
77996: LD_INT 0
77998: PUSH
77999: LD_INT 0
78001: PUSH
78002: LD_INT 0
78004: PUSH
78005: LD_INT 0
78007: PUSH
78008: EMPTY
78009: LIST
78010: LIST
78011: LIST
78012: LIST
78013: LIST
78014: LIST
78015: LIST
78016: PUSH
78017: LD_STRING E
78019: PUSH
78020: LD_INT 0
78022: PUSH
78023: LD_INT 0
78025: PUSH
78026: LD_VAR 0 3
78030: PUSH
78031: LD_INT 0
78033: PUSH
78034: LD_INT 0
78036: PUSH
78037: LD_INT 0
78039: PUSH
78040: EMPTY
78041: LIST
78042: LIST
78043: LIST
78044: LIST
78045: LIST
78046: LIST
78047: LIST
78048: PUSH
78049: EMPTY
78050: LIST
78051: LIST
78052: PPUSH
78053: CALL_OW 446
// end ;
78057: LD_VAR 0 2
78061: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78062: LD_INT 0
78064: PPUSH
78065: PPUSH
// if not driver or not IsInUnit ( driver ) then
78066: LD_VAR 0 1
78070: NOT
78071: IFTRUE 78085
78073: PUSH
78074: LD_VAR 0 1
78078: PPUSH
78079: CALL_OW 310
78083: NOT
78084: OR
78085: IFFALSE 78089
// exit ;
78087: GO 78179
// vehicle := IsInUnit ( driver ) ;
78089: LD_ADDR_VAR 0 3
78093: PUSH
78094: LD_VAR 0 1
78098: PPUSH
78099: CALL_OW 310
78103: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78104: LD_VAR 0 1
78108: PPUSH
78109: LD_STRING \
78111: PUSH
78112: LD_INT 0
78114: PUSH
78115: LD_INT 0
78117: PUSH
78118: LD_INT 0
78120: PUSH
78121: LD_INT 0
78123: PUSH
78124: LD_INT 0
78126: PUSH
78127: LD_INT 0
78129: PUSH
78130: EMPTY
78131: LIST
78132: LIST
78133: LIST
78134: LIST
78135: LIST
78136: LIST
78137: LIST
78138: PUSH
78139: LD_STRING E
78141: PUSH
78142: LD_INT 0
78144: PUSH
78145: LD_INT 0
78147: PUSH
78148: LD_VAR 0 3
78152: PUSH
78153: LD_INT 0
78155: PUSH
78156: LD_INT 0
78158: PUSH
78159: LD_INT 0
78161: PUSH
78162: EMPTY
78163: LIST
78164: LIST
78165: LIST
78166: LIST
78167: LIST
78168: LIST
78169: LIST
78170: PUSH
78171: EMPTY
78172: LIST
78173: LIST
78174: PPUSH
78175: CALL_OW 447
// end ;
78179: LD_VAR 0 2
78183: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
78184: LD_INT 0
78186: PPUSH
78187: PPUSH
78188: PPUSH
// tmp := [ ] ;
78189: LD_ADDR_VAR 0 5
78193: PUSH
78194: EMPTY
78195: ST_TO_ADDR
// for i in units do
78196: LD_ADDR_VAR 0 4
78200: PUSH
78201: LD_VAR 0 1
78205: PUSH
78206: FOR_IN
78207: IFFALSE 78245
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
78209: LD_ADDR_VAR 0 5
78213: PUSH
78214: LD_VAR 0 5
78218: PPUSH
78219: LD_VAR 0 5
78223: PUSH
78224: LD_INT 1
78226: PLUS
78227: PPUSH
78228: LD_VAR 0 4
78232: PPUSH
78233: CALL_OW 256
78237: PPUSH
78238: CALL_OW 2
78242: ST_TO_ADDR
78243: GO 78206
78245: POP
78246: POP
// if not tmp then
78247: LD_VAR 0 5
78251: NOT
78252: IFFALSE 78256
// exit ;
78254: GO 78304
// if asc then
78256: LD_VAR 0 2
78260: IFFALSE 78284
// result := SortListByListAsc ( units , tmp ) else
78262: LD_ADDR_VAR 0 3
78266: PUSH
78267: LD_VAR 0 1
78271: PPUSH
78272: LD_VAR 0 5
78276: PPUSH
78277: CALL_OW 76
78281: ST_TO_ADDR
78282: GO 78304
// result := SortListByListDesc ( units , tmp ) ;
78284: LD_ADDR_VAR 0 3
78288: PUSH
78289: LD_VAR 0 1
78293: PPUSH
78294: LD_VAR 0 5
78298: PPUSH
78299: CALL_OW 77
78303: ST_TO_ADDR
// end ;
78304: LD_VAR 0 3
78308: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
78309: LD_INT 0
78311: PPUSH
78312: PPUSH
// task := GetTaskList ( mech ) ;
78313: LD_ADDR_VAR 0 4
78317: PUSH
78318: LD_VAR 0 1
78322: PPUSH
78323: CALL_OW 437
78327: ST_TO_ADDR
// if not task then
78328: LD_VAR 0 4
78332: NOT
78333: IFFALSE 78337
// exit ;
78335: GO 78381
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
78337: LD_ADDR_VAR 0 3
78341: PUSH
78342: LD_VAR 0 4
78346: PUSH
78347: LD_INT 1
78349: ARRAY
78350: PUSH
78351: LD_INT 1
78353: ARRAY
78354: PUSH
78355: LD_STRING r
78357: EQUAL
78358: IFFALSE 78380
78360: PUSH
78361: LD_VAR 0 4
78365: PUSH
78366: LD_INT 1
78368: ARRAY
78369: PUSH
78370: LD_INT 4
78372: ARRAY
78373: PUSH
78374: LD_VAR 0 2
78378: EQUAL
78379: AND
78380: ST_TO_ADDR
// end ;
78381: LD_VAR 0 3
78385: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
78386: LD_INT 0
78388: PPUSH
// SetDir ( unit , d ) ;
78389: LD_VAR 0 1
78393: PPUSH
78394: LD_VAR 0 4
78398: PPUSH
78399: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
78403: LD_ADDR_VAR 0 6
78407: PUSH
78408: LD_VAR 0 1
78412: PPUSH
78413: LD_VAR 0 2
78417: PPUSH
78418: LD_VAR 0 3
78422: PPUSH
78423: LD_VAR 0 5
78427: PPUSH
78428: CALL_OW 48
78432: ST_TO_ADDR
// end ;
78433: LD_VAR 0 6
78437: RET
// export function ToNaturalNumber ( number ) ; begin
78438: LD_INT 0
78440: PPUSH
// result := number div 1 ;
78441: LD_ADDR_VAR 0 2
78445: PUSH
78446: LD_VAR 0 1
78450: PUSH
78451: LD_INT 1
78453: DIV
78454: ST_TO_ADDR
// if number < 0 then
78455: LD_VAR 0 1
78459: PUSH
78460: LD_INT 0
78462: LESS
78463: IFFALSE 78473
// result := 0 ;
78465: LD_ADDR_VAR 0 2
78469: PUSH
78470: LD_INT 0
78472: ST_TO_ADDR
// end ;
78473: LD_VAR 0 2
78477: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
78478: LD_INT 0
78480: PPUSH
78481: PPUSH
78482: PPUSH
// if not buildings then
78483: LD_VAR 0 1
78487: NOT
78488: IFFALSE 78492
// exit ;
78490: GO 78607
// tmp := [ ] ;
78492: LD_ADDR_VAR 0 5
78496: PUSH
78497: EMPTY
78498: ST_TO_ADDR
// for b in buildings do
78499: LD_ADDR_VAR 0 4
78503: PUSH
78504: LD_VAR 0 1
78508: PUSH
78509: FOR_IN
78510: IFFALSE 78548
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
78512: LD_ADDR_VAR 0 5
78516: PUSH
78517: LD_VAR 0 5
78521: PPUSH
78522: LD_VAR 0 5
78526: PUSH
78527: LD_INT 1
78529: PLUS
78530: PPUSH
78531: LD_VAR 0 4
78535: PPUSH
78536: CALL_OW 266
78540: PPUSH
78541: CALL_OW 1
78545: ST_TO_ADDR
78546: GO 78509
78548: POP
78549: POP
// if not tmp then
78550: LD_VAR 0 5
78554: NOT
78555: IFFALSE 78559
// exit ;
78557: GO 78607
// if asc then
78559: LD_VAR 0 2
78563: IFFALSE 78587
// result := SortListByListAsc ( buildings , tmp ) else
78565: LD_ADDR_VAR 0 3
78569: PUSH
78570: LD_VAR 0 1
78574: PPUSH
78575: LD_VAR 0 5
78579: PPUSH
78580: CALL_OW 76
78584: ST_TO_ADDR
78585: GO 78607
// result := SortListByListDesc ( buildings , tmp ) ;
78587: LD_ADDR_VAR 0 3
78591: PUSH
78592: LD_VAR 0 1
78596: PPUSH
78597: LD_VAR 0 5
78601: PPUSH
78602: CALL_OW 77
78606: ST_TO_ADDR
// end ;
78607: LD_VAR 0 3
78611: RET
// export function SortByClass ( units , class ) ; var un ; begin
78612: LD_INT 0
78614: PPUSH
78615: PPUSH
// if not units or not class then
78616: LD_VAR 0 1
78620: NOT
78621: IFTRUE 78630
78623: PUSH
78624: LD_VAR 0 2
78628: NOT
78629: OR
78630: IFFALSE 78634
// exit ;
78632: GO 78729
// result := [ ] ;
78634: LD_ADDR_VAR 0 3
78638: PUSH
78639: EMPTY
78640: ST_TO_ADDR
// for un in units do
78641: LD_ADDR_VAR 0 4
78645: PUSH
78646: LD_VAR 0 1
78650: PUSH
78651: FOR_IN
78652: IFFALSE 78727
// if GetClass ( un ) = class then
78654: LD_VAR 0 4
78658: PPUSH
78659: CALL_OW 257
78663: PUSH
78664: LD_VAR 0 2
78668: EQUAL
78669: IFFALSE 78696
// result := Insert ( result , 1 , un ) else
78671: LD_ADDR_VAR 0 3
78675: PUSH
78676: LD_VAR 0 3
78680: PPUSH
78681: LD_INT 1
78683: PPUSH
78684: LD_VAR 0 4
78688: PPUSH
78689: CALL_OW 2
78693: ST_TO_ADDR
78694: GO 78725
// result := Replace ( result , result + 1 , un ) ;
78696: LD_ADDR_VAR 0 3
78700: PUSH
78701: LD_VAR 0 3
78705: PPUSH
78706: LD_VAR 0 3
78710: PUSH
78711: LD_INT 1
78713: PLUS
78714: PPUSH
78715: LD_VAR 0 4
78719: PPUSH
78720: CALL_OW 1
78724: ST_TO_ADDR
78725: GO 78651
78727: POP
78728: POP
// end ;
78729: LD_VAR 0 3
78733: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
78734: LD_INT 0
78736: PPUSH
78737: PPUSH
78738: PPUSH
78739: PPUSH
78740: PPUSH
78741: PPUSH
78742: PPUSH
// result := [ ] ;
78743: LD_ADDR_VAR 0 4
78747: PUSH
78748: EMPTY
78749: ST_TO_ADDR
// if x - r < 0 then
78750: LD_VAR 0 1
78754: PUSH
78755: LD_VAR 0 3
78759: MINUS
78760: PUSH
78761: LD_INT 0
78763: LESS
78764: IFFALSE 78776
// min_x := 0 else
78766: LD_ADDR_VAR 0 8
78770: PUSH
78771: LD_INT 0
78773: ST_TO_ADDR
78774: GO 78792
// min_x := x - r ;
78776: LD_ADDR_VAR 0 8
78780: PUSH
78781: LD_VAR 0 1
78785: PUSH
78786: LD_VAR 0 3
78790: MINUS
78791: ST_TO_ADDR
// if y - r < 0 then
78792: LD_VAR 0 2
78796: PUSH
78797: LD_VAR 0 3
78801: MINUS
78802: PUSH
78803: LD_INT 0
78805: LESS
78806: IFFALSE 78818
// min_y := 0 else
78808: LD_ADDR_VAR 0 7
78812: PUSH
78813: LD_INT 0
78815: ST_TO_ADDR
78816: GO 78834
// min_y := y - r ;
78818: LD_ADDR_VAR 0 7
78822: PUSH
78823: LD_VAR 0 2
78827: PUSH
78828: LD_VAR 0 3
78832: MINUS
78833: ST_TO_ADDR
// max_x := x + r ;
78834: LD_ADDR_VAR 0 9
78838: PUSH
78839: LD_VAR 0 1
78843: PUSH
78844: LD_VAR 0 3
78848: PLUS
78849: ST_TO_ADDR
// max_y := y + r ;
78850: LD_ADDR_VAR 0 10
78854: PUSH
78855: LD_VAR 0 2
78859: PUSH
78860: LD_VAR 0 3
78864: PLUS
78865: ST_TO_ADDR
// for _x = min_x to max_x do
78866: LD_ADDR_VAR 0 5
78870: PUSH
78871: DOUBLE
78872: LD_VAR 0 8
78876: DEC
78877: ST_TO_ADDR
78878: LD_VAR 0 9
78882: PUSH
78883: FOR_TO
78884: IFFALSE 78985
// for _y = min_y to max_y do
78886: LD_ADDR_VAR 0 6
78890: PUSH
78891: DOUBLE
78892: LD_VAR 0 7
78896: DEC
78897: ST_TO_ADDR
78898: LD_VAR 0 10
78902: PUSH
78903: FOR_TO
78904: IFFALSE 78981
// begin if not ValidHex ( _x , _y ) then
78906: LD_VAR 0 5
78910: PPUSH
78911: LD_VAR 0 6
78915: PPUSH
78916: CALL_OW 488
78920: NOT
78921: IFFALSE 78925
// continue ;
78923: GO 78903
// if GetResourceTypeXY ( _x , _y ) then
78925: LD_VAR 0 5
78929: PPUSH
78930: LD_VAR 0 6
78934: PPUSH
78935: CALL_OW 283
78939: IFFALSE 78979
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
78941: LD_ADDR_VAR 0 4
78945: PUSH
78946: LD_VAR 0 4
78950: PPUSH
78951: LD_VAR 0 4
78955: PUSH
78956: LD_INT 1
78958: PLUS
78959: PPUSH
78960: LD_VAR 0 5
78964: PUSH
78965: LD_VAR 0 6
78969: PUSH
78970: EMPTY
78971: LIST
78972: LIST
78973: PPUSH
78974: CALL_OW 1
78978: ST_TO_ADDR
// end ;
78979: GO 78903
78981: POP
78982: POP
78983: GO 78883
78985: POP
78986: POP
// end ;
78987: LD_VAR 0 4
78991: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
78992: LD_INT 0
78994: PPUSH
78995: PPUSH
78996: PPUSH
78997: PPUSH
78998: PPUSH
78999: PPUSH
79000: PPUSH
79001: PPUSH
// if not units then
79002: LD_VAR 0 1
79006: NOT
79007: IFFALSE 79011
// exit ;
79009: GO 79543
// result := UnitFilter ( units , [ f_ok ] ) ;
79011: LD_ADDR_VAR 0 3
79015: PUSH
79016: LD_VAR 0 1
79020: PPUSH
79021: LD_INT 50
79023: PUSH
79024: EMPTY
79025: LIST
79026: PPUSH
79027: CALL_OW 72
79031: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
79032: LD_ADDR_VAR 0 8
79036: PUSH
79037: LD_VAR 0 1
79041: PUSH
79042: LD_INT 1
79044: ARRAY
79045: PPUSH
79046: CALL_OW 255
79050: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
79051: LD_ADDR_VAR 0 10
79055: PUSH
79056: LD_INT 29
79058: PUSH
79059: LD_INT 91
79061: PUSH
79062: LD_INT 49
79064: PUSH
79065: EMPTY
79066: LIST
79067: LIST
79068: LIST
79069: ST_TO_ADDR
// if not result then
79070: LD_VAR 0 3
79074: NOT
79075: IFFALSE 79079
// exit ;
79077: GO 79543
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
79079: LD_ADDR_VAR 0 5
79083: PUSH
79084: LD_INT 81
79086: PUSH
79087: LD_VAR 0 8
79091: PUSH
79092: EMPTY
79093: LIST
79094: LIST
79095: PPUSH
79096: CALL_OW 69
79100: ST_TO_ADDR
// for i in result do
79101: LD_ADDR_VAR 0 4
79105: PUSH
79106: LD_VAR 0 3
79110: PUSH
79111: FOR_IN
79112: IFFALSE 79541
// begin tag := GetTag ( i ) + 1 ;
79114: LD_ADDR_VAR 0 9
79118: PUSH
79119: LD_VAR 0 4
79123: PPUSH
79124: CALL_OW 110
79128: PUSH
79129: LD_INT 1
79131: PLUS
79132: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
79133: LD_ADDR_VAR 0 7
79137: PUSH
79138: LD_VAR 0 4
79142: PPUSH
79143: CALL_OW 250
79147: PPUSH
79148: LD_VAR 0 4
79152: PPUSH
79153: CALL_OW 251
79157: PPUSH
79158: LD_INT 4
79160: PPUSH
79161: CALL 78734 0 3
79165: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
79166: LD_VAR 0 4
79170: PPUSH
79171: CALL_OW 247
79175: PUSH
79176: LD_INT 2
79178: EQUAL
79179: IFFALSE 79191
79181: PUSH
79182: LD_VAR 0 7
79186: PUSH
79187: LD_INT 2
79189: GREATER
79190: AND
79191: IFFALSE 79211
79193: PUSH
79194: LD_VAR 0 4
79198: PPUSH
79199: CALL_OW 264
79203: PUSH
79204: LD_VAR 0 10
79208: IN
79209: NOT
79210: AND
79211: IFFALSE 79250
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
79213: LD_VAR 0 4
79217: PPUSH
79218: LD_VAR 0 7
79222: PUSH
79223: LD_INT 1
79225: ARRAY
79226: PUSH
79227: LD_INT 1
79229: ARRAY
79230: PPUSH
79231: LD_VAR 0 7
79235: PUSH
79236: LD_INT 1
79238: ARRAY
79239: PUSH
79240: LD_INT 2
79242: ARRAY
79243: PPUSH
79244: CALL_OW 116
79248: GO 79539
// if path > tag then
79250: LD_VAR 0 2
79254: PUSH
79255: LD_VAR 0 9
79259: GREATER
79260: IFFALSE 79468
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
79262: LD_ADDR_VAR 0 6
79266: PUSH
79267: LD_VAR 0 5
79271: PPUSH
79272: LD_INT 91
79274: PUSH
79275: LD_VAR 0 4
79279: PUSH
79280: LD_INT 8
79282: PUSH
79283: EMPTY
79284: LIST
79285: LIST
79286: LIST
79287: PPUSH
79288: CALL_OW 72
79292: ST_TO_ADDR
// if nearEnemy then
79293: LD_VAR 0 6
79297: IFFALSE 79366
// begin if GetWeapon ( i ) = ru_time_lapser then
79299: LD_VAR 0 4
79303: PPUSH
79304: CALL_OW 264
79308: PUSH
79309: LD_INT 49
79311: EQUAL
79312: IFFALSE 79340
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
79314: LD_VAR 0 4
79318: PPUSH
79319: LD_VAR 0 6
79323: PPUSH
79324: LD_VAR 0 4
79328: PPUSH
79329: CALL_OW 74
79333: PPUSH
79334: CALL_OW 112
79338: GO 79364
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
79340: LD_VAR 0 4
79344: PPUSH
79345: LD_VAR 0 6
79349: PPUSH
79350: LD_VAR 0 4
79354: PPUSH
79355: CALL_OW 74
79359: PPUSH
79360: CALL 80624 0 2
// end else
79364: GO 79466
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
79366: LD_VAR 0 4
79370: PPUSH
79371: LD_VAR 0 2
79375: PUSH
79376: LD_VAR 0 9
79380: ARRAY
79381: PUSH
79382: LD_INT 1
79384: ARRAY
79385: PPUSH
79386: LD_VAR 0 2
79390: PUSH
79391: LD_VAR 0 9
79395: ARRAY
79396: PUSH
79397: LD_INT 2
79399: ARRAY
79400: PPUSH
79401: CALL_OW 297
79405: PUSH
79406: LD_INT 6
79408: GREATER
79409: IFFALSE 79452
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
79411: LD_VAR 0 4
79415: PPUSH
79416: LD_VAR 0 2
79420: PUSH
79421: LD_VAR 0 9
79425: ARRAY
79426: PUSH
79427: LD_INT 1
79429: ARRAY
79430: PPUSH
79431: LD_VAR 0 2
79435: PUSH
79436: LD_VAR 0 9
79440: ARRAY
79441: PUSH
79442: LD_INT 2
79444: ARRAY
79445: PPUSH
79446: CALL_OW 114
79450: GO 79466
// SetTag ( i , tag ) ;
79452: LD_VAR 0 4
79456: PPUSH
79457: LD_VAR 0 9
79461: PPUSH
79462: CALL_OW 109
// end else
79466: GO 79539
// if enemy then
79468: LD_VAR 0 5
79472: IFFALSE 79539
// begin if GetWeapon ( i ) = ru_time_lapser then
79474: LD_VAR 0 4
79478: PPUSH
79479: CALL_OW 264
79483: PUSH
79484: LD_INT 49
79486: EQUAL
79487: IFFALSE 79515
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
79489: LD_VAR 0 4
79493: PPUSH
79494: LD_VAR 0 5
79498: PPUSH
79499: LD_VAR 0 4
79503: PPUSH
79504: CALL_OW 74
79508: PPUSH
79509: CALL_OW 112
79513: GO 79539
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
79515: LD_VAR 0 4
79519: PPUSH
79520: LD_VAR 0 5
79524: PPUSH
79525: LD_VAR 0 4
79529: PPUSH
79530: CALL_OW 74
79534: PPUSH
79535: CALL 80624 0 2
// end ; end ;
79539: GO 79111
79541: POP
79542: POP
// end ;
79543: LD_VAR 0 3
79547: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
79548: LD_INT 0
79550: PPUSH
79551: PPUSH
79552: PPUSH
// if not unit or IsInUnit ( unit ) then
79553: LD_VAR 0 1
79557: NOT
79558: IFTRUE 79571
79560: PUSH
79561: LD_VAR 0 1
79565: PPUSH
79566: CALL_OW 310
79570: OR
79571: IFFALSE 79575
// exit ;
79573: GO 79666
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
79575: LD_ADDR_VAR 0 4
79579: PUSH
79580: LD_VAR 0 1
79584: PPUSH
79585: CALL_OW 250
79589: PPUSH
79590: LD_VAR 0 2
79594: PPUSH
79595: LD_INT 1
79597: PPUSH
79598: CALL_OW 272
79602: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
79603: LD_ADDR_VAR 0 5
79607: PUSH
79608: LD_VAR 0 1
79612: PPUSH
79613: CALL_OW 251
79617: PPUSH
79618: LD_VAR 0 2
79622: PPUSH
79623: LD_INT 1
79625: PPUSH
79626: CALL_OW 273
79630: ST_TO_ADDR
// if ValidHex ( x , y ) then
79631: LD_VAR 0 4
79635: PPUSH
79636: LD_VAR 0 5
79640: PPUSH
79641: CALL_OW 488
79645: IFFALSE 79666
// ComTurnXY ( unit , x , y ) ;
79647: LD_VAR 0 1
79651: PPUSH
79652: LD_VAR 0 4
79656: PPUSH
79657: LD_VAR 0 5
79661: PPUSH
79662: CALL_OW 118
// end ;
79666: LD_VAR 0 3
79670: RET
// export function SeeUnits ( side , units ) ; var i ; begin
79671: LD_INT 0
79673: PPUSH
79674: PPUSH
// result := false ;
79675: LD_ADDR_VAR 0 3
79679: PUSH
79680: LD_INT 0
79682: ST_TO_ADDR
// if not units then
79683: LD_VAR 0 2
79687: NOT
79688: IFFALSE 79692
// exit ;
79690: GO 79737
// for i in units do
79692: LD_ADDR_VAR 0 4
79696: PUSH
79697: LD_VAR 0 2
79701: PUSH
79702: FOR_IN
79703: IFFALSE 79735
// if See ( side , i ) then
79705: LD_VAR 0 1
79709: PPUSH
79710: LD_VAR 0 4
79714: PPUSH
79715: CALL_OW 292
79719: IFFALSE 79733
// begin result := true ;
79721: LD_ADDR_VAR 0 3
79725: PUSH
79726: LD_INT 1
79728: ST_TO_ADDR
// exit ;
79729: POP
79730: POP
79731: GO 79737
// end ;
79733: GO 79702
79735: POP
79736: POP
// end ;
79737: LD_VAR 0 3
79741: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
79742: LD_INT 0
79744: PPUSH
79745: PPUSH
79746: PPUSH
79747: PPUSH
// if not unit or not points then
79748: LD_VAR 0 1
79752: NOT
79753: IFTRUE 79762
79755: PUSH
79756: LD_VAR 0 2
79760: NOT
79761: OR
79762: IFFALSE 79766
// exit ;
79764: GO 79856
// dist := 99999 ;
79766: LD_ADDR_VAR 0 5
79770: PUSH
79771: LD_INT 99999
79773: ST_TO_ADDR
// for i in points do
79774: LD_ADDR_VAR 0 4
79778: PUSH
79779: LD_VAR 0 2
79783: PUSH
79784: FOR_IN
79785: IFFALSE 79854
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
79787: LD_ADDR_VAR 0 6
79791: PUSH
79792: LD_VAR 0 1
79796: PPUSH
79797: LD_VAR 0 4
79801: PUSH
79802: LD_INT 1
79804: ARRAY
79805: PPUSH
79806: LD_VAR 0 4
79810: PUSH
79811: LD_INT 2
79813: ARRAY
79814: PPUSH
79815: CALL_OW 297
79819: ST_TO_ADDR
// if tmpDist < dist then
79820: LD_VAR 0 6
79824: PUSH
79825: LD_VAR 0 5
79829: LESS
79830: IFFALSE 79852
// begin result := i ;
79832: LD_ADDR_VAR 0 3
79836: PUSH
79837: LD_VAR 0 4
79841: ST_TO_ADDR
// dist := tmpDist ;
79842: LD_ADDR_VAR 0 5
79846: PUSH
79847: LD_VAR 0 6
79851: ST_TO_ADDR
// end ; end ;
79852: GO 79784
79854: POP
79855: POP
// end ;
79856: LD_VAR 0 3
79860: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
79861: LD_INT 0
79863: PPUSH
// uc_side := side ;
79864: LD_ADDR_OWVAR 20
79868: PUSH
79869: LD_VAR 0 1
79873: ST_TO_ADDR
// uc_nation := 3 ;
79874: LD_ADDR_OWVAR 21
79878: PUSH
79879: LD_INT 3
79881: ST_TO_ADDR
// vc_chassis := 25 ;
79882: LD_ADDR_OWVAR 37
79886: PUSH
79887: LD_INT 25
79889: ST_TO_ADDR
// vc_engine := engine_siberite ;
79890: LD_ADDR_OWVAR 39
79894: PUSH
79895: LD_INT 3
79897: ST_TO_ADDR
// vc_control := control_computer ;
79898: LD_ADDR_OWVAR 38
79902: PUSH
79903: LD_INT 3
79905: ST_TO_ADDR
// vc_weapon := 59 ;
79906: LD_ADDR_OWVAR 40
79910: PUSH
79911: LD_INT 59
79913: ST_TO_ADDR
// result := CreateVehicle ;
79914: LD_ADDR_VAR 0 5
79918: PUSH
79919: CALL_OW 45
79923: ST_TO_ADDR
// SetDir ( result , d ) ;
79924: LD_VAR 0 5
79928: PPUSH
79929: LD_VAR 0 4
79933: PPUSH
79934: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
79938: LD_VAR 0 5
79942: PPUSH
79943: LD_VAR 0 2
79947: PPUSH
79948: LD_VAR 0 3
79952: PPUSH
79953: LD_INT 0
79955: PPUSH
79956: CALL_OW 48
// end ;
79960: LD_VAR 0 5
79964: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
79965: LD_INT 0
79967: PPUSH
79968: PPUSH
79969: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
79970: LD_ADDR_VAR 0 2
79974: PUSH
79975: LD_INT 0
79977: PUSH
79978: LD_INT 0
79980: PUSH
79981: LD_INT 0
79983: PUSH
79984: LD_INT 0
79986: PUSH
79987: EMPTY
79988: LIST
79989: LIST
79990: LIST
79991: LIST
79992: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
79993: LD_VAR 0 1
79997: NOT
79998: IFTRUE 80031
80000: PUSH
80001: LD_VAR 0 1
80005: PPUSH
80006: CALL_OW 264
80010: PUSH
80011: LD_INT 12
80013: PUSH
80014: LD_INT 51
80016: PUSH
80017: LD_INT 32
80019: PUSH
80020: LD_INT 89
80022: PUSH
80023: EMPTY
80024: LIST
80025: LIST
80026: LIST
80027: LIST
80028: IN
80029: NOT
80030: OR
80031: IFFALSE 80035
// exit ;
80033: GO 80133
// for i := 1 to 3 do
80035: LD_ADDR_VAR 0 3
80039: PUSH
80040: DOUBLE
80041: LD_INT 1
80043: DEC
80044: ST_TO_ADDR
80045: LD_INT 3
80047: PUSH
80048: FOR_TO
80049: IFFALSE 80131
// begin tmp := GetCargo ( cargo , i ) ;
80051: LD_ADDR_VAR 0 4
80055: PUSH
80056: LD_VAR 0 1
80060: PPUSH
80061: LD_VAR 0 3
80065: PPUSH
80066: CALL_OW 289
80070: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
80071: LD_ADDR_VAR 0 2
80075: PUSH
80076: LD_VAR 0 2
80080: PPUSH
80081: LD_VAR 0 3
80085: PPUSH
80086: LD_VAR 0 4
80090: PPUSH
80091: CALL_OW 1
80095: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
80096: LD_ADDR_VAR 0 2
80100: PUSH
80101: LD_VAR 0 2
80105: PPUSH
80106: LD_INT 4
80108: PPUSH
80109: LD_VAR 0 2
80113: PUSH
80114: LD_INT 4
80116: ARRAY
80117: PUSH
80118: LD_VAR 0 4
80122: PLUS
80123: PPUSH
80124: CALL_OW 1
80128: ST_TO_ADDR
// end ;
80129: GO 80048
80131: POP
80132: POP
// end ;
80133: LD_VAR 0 2
80137: RET
// export function Length ( array ) ; begin
80138: LD_INT 0
80140: PPUSH
// result := array + 0 ;
80141: LD_ADDR_VAR 0 2
80145: PUSH
80146: LD_VAR 0 1
80150: PUSH
80151: LD_INT 0
80153: PLUS
80154: ST_TO_ADDR
// end ;
80155: LD_VAR 0 2
80159: RET
// export function PrepareArray ( array ) ; begin
80160: LD_INT 0
80162: PPUSH
// result := array diff 0 ;
80163: LD_ADDR_VAR 0 2
80167: PUSH
80168: LD_VAR 0 1
80172: PUSH
80173: LD_INT 0
80175: DIFF
80176: ST_TO_ADDR
// if not result [ 1 ] then
80177: LD_VAR 0 2
80181: PUSH
80182: LD_INT 1
80184: ARRAY
80185: NOT
80186: IFFALSE 80206
// result := Delete ( result , 1 ) ;
80188: LD_ADDR_VAR 0 2
80192: PUSH
80193: LD_VAR 0 2
80197: PPUSH
80198: LD_INT 1
80200: PPUSH
80201: CALL_OW 3
80205: ST_TO_ADDR
// end ;
80206: LD_VAR 0 2
80210: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
80211: LD_INT 0
80213: PPUSH
80214: PPUSH
80215: PPUSH
80216: PPUSH
// sibRocketRange := 25 ;
80217: LD_ADDR_VAR 0 6
80221: PUSH
80222: LD_INT 25
80224: ST_TO_ADDR
// result := false ;
80225: LD_ADDR_VAR 0 4
80229: PUSH
80230: LD_INT 0
80232: ST_TO_ADDR
// for i := 0 to 5 do
80233: LD_ADDR_VAR 0 5
80237: PUSH
80238: DOUBLE
80239: LD_INT 0
80241: DEC
80242: ST_TO_ADDR
80243: LD_INT 5
80245: PUSH
80246: FOR_TO
80247: IFFALSE 80314
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
80249: LD_VAR 0 1
80253: PPUSH
80254: LD_VAR 0 5
80258: PPUSH
80259: LD_VAR 0 6
80263: PPUSH
80264: CALL_OW 272
80268: PPUSH
80269: LD_VAR 0 2
80273: PPUSH
80274: LD_VAR 0 5
80278: PPUSH
80279: LD_VAR 0 6
80283: PPUSH
80284: CALL_OW 273
80288: PPUSH
80289: LD_VAR 0 3
80293: PPUSH
80294: CALL_OW 309
80298: IFFALSE 80312
// begin result := true ;
80300: LD_ADDR_VAR 0 4
80304: PUSH
80305: LD_INT 1
80307: ST_TO_ADDR
// exit ;
80308: POP
80309: POP
80310: GO 80316
// end ;
80312: GO 80246
80314: POP
80315: POP
// end ;
80316: LD_VAR 0 4
80320: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
80321: LD_INT 0
80323: PPUSH
80324: PPUSH
80325: PPUSH
// if btype = b_depot then
80326: LD_VAR 0 2
80330: PUSH
80331: LD_INT 0
80333: EQUAL
80334: IFFALSE 80346
// begin result := true ;
80336: LD_ADDR_VAR 0 3
80340: PUSH
80341: LD_INT 1
80343: ST_TO_ADDR
// exit ;
80344: GO 80466
// end ; pom := GetBase ( depot ) ;
80346: LD_ADDR_VAR 0 4
80350: PUSH
80351: LD_VAR 0 1
80355: PPUSH
80356: CALL_OW 274
80360: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
80361: LD_ADDR_VAR 0 5
80365: PUSH
80366: LD_VAR 0 2
80370: PPUSH
80371: LD_VAR 0 1
80375: PPUSH
80376: CALL_OW 248
80380: PPUSH
80381: CALL_OW 450
80385: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
80386: LD_ADDR_VAR 0 3
80390: PUSH
80391: LD_VAR 0 4
80395: PPUSH
80396: LD_INT 1
80398: PPUSH
80399: CALL_OW 275
80403: PUSH
80404: LD_VAR 0 5
80408: PUSH
80409: LD_INT 1
80411: ARRAY
80412: GREATEREQUAL
80413: IFFALSE 80439
80415: PUSH
80416: LD_VAR 0 4
80420: PPUSH
80421: LD_INT 2
80423: PPUSH
80424: CALL_OW 275
80428: PUSH
80429: LD_VAR 0 5
80433: PUSH
80434: LD_INT 2
80436: ARRAY
80437: GREATEREQUAL
80438: AND
80439: IFFALSE 80465
80441: PUSH
80442: LD_VAR 0 4
80446: PPUSH
80447: LD_INT 3
80449: PPUSH
80450: CALL_OW 275
80454: PUSH
80455: LD_VAR 0 5
80459: PUSH
80460: LD_INT 3
80462: ARRAY
80463: GREATEREQUAL
80464: AND
80465: ST_TO_ADDR
// end ;
80466: LD_VAR 0 3
80470: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
80471: LD_INT 0
80473: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
80474: LD_VAR 0 1
80478: PPUSH
80479: LD_VAR 0 2
80483: PPUSH
80484: LD_INT 0
80486: PPUSH
80487: LD_INT 0
80489: PPUSH
80490: LD_INT 1
80492: PPUSH
80493: LD_INT 0
80495: PPUSH
80496: CALL_OW 587
// end ;
80500: LD_VAR 0 3
80504: RET
// export function CenterOnNow ( unit ) ; begin
80505: LD_INT 0
80507: PPUSH
// result := IsInUnit ( unit ) ;
80508: LD_ADDR_VAR 0 2
80512: PUSH
80513: LD_VAR 0 1
80517: PPUSH
80518: CALL_OW 310
80522: ST_TO_ADDR
// if not result then
80523: LD_VAR 0 2
80527: NOT
80528: IFFALSE 80540
// result := unit ;
80530: LD_ADDR_VAR 0 2
80534: PUSH
80535: LD_VAR 0 1
80539: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
80540: LD_VAR 0 1
80544: PPUSH
80545: CALL_OW 87
// end ;
80549: LD_VAR 0 2
80553: RET
// export function ComMoveHex ( unit , hex ) ; begin
80554: LD_INT 0
80556: PPUSH
// if not hex then
80557: LD_VAR 0 2
80561: NOT
80562: IFFALSE 80566
// exit ;
80564: GO 80619
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
80566: LD_VAR 0 2
80570: PUSH
80571: LD_INT 1
80573: ARRAY
80574: PPUSH
80575: LD_VAR 0 2
80579: PUSH
80580: LD_INT 2
80582: ARRAY
80583: PPUSH
80584: CALL_OW 428
80588: IFFALSE 80592
// exit ;
80590: GO 80619
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
80592: LD_VAR 0 1
80596: PPUSH
80597: LD_VAR 0 2
80601: PUSH
80602: LD_INT 1
80604: ARRAY
80605: PPUSH
80606: LD_VAR 0 2
80610: PUSH
80611: LD_INT 2
80613: ARRAY
80614: PPUSH
80615: CALL_OW 111
// end ;
80619: LD_VAR 0 3
80623: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
80624: LD_INT 0
80626: PPUSH
80627: PPUSH
80628: PPUSH
// if not unit or not enemy then
80629: LD_VAR 0 1
80633: NOT
80634: IFTRUE 80643
80636: PUSH
80637: LD_VAR 0 2
80641: NOT
80642: OR
80643: IFFALSE 80647
// exit ;
80645: GO 80773
// x := GetX ( enemy ) ;
80647: LD_ADDR_VAR 0 4
80651: PUSH
80652: LD_VAR 0 2
80656: PPUSH
80657: CALL_OW 250
80661: ST_TO_ADDR
// y := GetY ( enemy ) ;
80662: LD_ADDR_VAR 0 5
80666: PUSH
80667: LD_VAR 0 2
80671: PPUSH
80672: CALL_OW 251
80676: ST_TO_ADDR
// if ValidHex ( x , y ) then
80677: LD_VAR 0 4
80681: PPUSH
80682: LD_VAR 0 5
80686: PPUSH
80687: CALL_OW 488
80691: IFFALSE 80773
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
80693: LD_VAR 0 2
80697: PPUSH
80698: CALL_OW 247
80702: PUSH
80703: LD_INT 3
80705: PUSH
80706: LD_INT 2
80708: PUSH
80709: EMPTY
80710: LIST
80711: LIST
80712: IN
80713: IFTRUE 80736
80715: PUSH
80716: LD_VAR 0 1
80720: PPUSH
80721: CALL_OW 255
80725: PPUSH
80726: LD_VAR 0 2
80730: PPUSH
80731: CALL_OW 292
80735: OR
80736: IFFALSE 80754
// ComAttackUnit ( unit , enemy ) else
80738: LD_VAR 0 1
80742: PPUSH
80743: LD_VAR 0 2
80747: PPUSH
80748: CALL_OW 115
80752: GO 80773
// ComAgressiveMove ( unit , x , y ) ;
80754: LD_VAR 0 1
80758: PPUSH
80759: LD_VAR 0 4
80763: PPUSH
80764: LD_VAR 0 5
80768: PPUSH
80769: CALL_OW 114
// end ;
80773: LD_VAR 0 3
80777: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
80778: LD_INT 0
80780: PPUSH
80781: PPUSH
80782: PPUSH
// list := AreaToList ( area , 0 ) ;
80783: LD_ADDR_VAR 0 5
80787: PUSH
80788: LD_VAR 0 1
80792: PPUSH
80793: LD_INT 0
80795: PPUSH
80796: CALL_OW 517
80800: ST_TO_ADDR
// if not list then
80801: LD_VAR 0 5
80805: NOT
80806: IFFALSE 80810
// exit ;
80808: GO 80940
// if all then
80810: LD_VAR 0 2
80814: IFFALSE 80902
// begin for i := 1 to list [ 1 ] do
80816: LD_ADDR_VAR 0 4
80820: PUSH
80821: DOUBLE
80822: LD_INT 1
80824: DEC
80825: ST_TO_ADDR
80826: LD_VAR 0 5
80830: PUSH
80831: LD_INT 1
80833: ARRAY
80834: PUSH
80835: FOR_TO
80836: IFFALSE 80898
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
80838: LD_ADDR_VAR 0 3
80842: PUSH
80843: LD_VAR 0 3
80847: PPUSH
80848: LD_VAR 0 3
80852: PUSH
80853: LD_INT 1
80855: PLUS
80856: PPUSH
80857: LD_VAR 0 5
80861: PUSH
80862: LD_INT 1
80864: ARRAY
80865: PUSH
80866: LD_VAR 0 4
80870: ARRAY
80871: PUSH
80872: LD_VAR 0 5
80876: PUSH
80877: LD_INT 2
80879: ARRAY
80880: PUSH
80881: LD_VAR 0 4
80885: ARRAY
80886: PUSH
80887: EMPTY
80888: LIST
80889: LIST
80890: PPUSH
80891: CALL_OW 1
80895: ST_TO_ADDR
80896: GO 80835
80898: POP
80899: POP
// exit ;
80900: GO 80940
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
80902: LD_ADDR_VAR 0 3
80906: PUSH
80907: LD_VAR 0 5
80911: PUSH
80912: LD_INT 1
80914: ARRAY
80915: PUSH
80916: LD_INT 1
80918: ARRAY
80919: PUSH
80920: LD_VAR 0 5
80924: PUSH
80925: LD_INT 2
80927: ARRAY
80928: PUSH
80929: LD_INT 1
80931: ARRAY
80932: PUSH
80933: EMPTY
80934: LIST
80935: LIST
80936: PUSH
80937: EMPTY
80938: LIST
80939: ST_TO_ADDR
// end ;
80940: LD_VAR 0 3
80944: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
80945: LD_INT 0
80947: PPUSH
80948: PPUSH
// list := AreaToList ( area , 0 ) ;
80949: LD_ADDR_VAR 0 4
80953: PUSH
80954: LD_VAR 0 1
80958: PPUSH
80959: LD_INT 0
80961: PPUSH
80962: CALL_OW 517
80966: ST_TO_ADDR
// if not list then
80967: LD_VAR 0 4
80971: NOT
80972: IFFALSE 80976
// exit ;
80974: GO 81017
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
80976: LD_ADDR_VAR 0 3
80980: PUSH
80981: LD_VAR 0 4
80985: PUSH
80986: LD_INT 1
80988: ARRAY
80989: PUSH
80990: LD_INT 1
80992: ARRAY
80993: PUSH
80994: LD_VAR 0 4
80998: PUSH
80999: LD_INT 2
81001: ARRAY
81002: PUSH
81003: LD_INT 1
81005: ARRAY
81006: PUSH
81007: LD_VAR 0 2
81011: PUSH
81012: EMPTY
81013: LIST
81014: LIST
81015: LIST
81016: ST_TO_ADDR
// end ;
81017: LD_VAR 0 3
81021: RET
// export function First ( array ) ; begin
81022: LD_INT 0
81024: PPUSH
// if not array then
81025: LD_VAR 0 1
81029: NOT
81030: IFFALSE 81034
// exit ;
81032: GO 81048
// result := array [ 1 ] ;
81034: LD_ADDR_VAR 0 2
81038: PUSH
81039: LD_VAR 0 1
81043: PUSH
81044: LD_INT 1
81046: ARRAY
81047: ST_TO_ADDR
// end ;
81048: LD_VAR 0 2
81052: RET
// export function Last ( array ) ; begin
81053: LD_INT 0
81055: PPUSH
// if not array then
81056: LD_VAR 0 1
81060: NOT
81061: IFFALSE 81065
// exit ;
81063: GO 81081
// result := array [ array ] ;
81065: LD_ADDR_VAR 0 2
81069: PUSH
81070: LD_VAR 0 1
81074: PUSH
81075: LD_VAR 0 1
81079: ARRAY
81080: ST_TO_ADDR
// end ;
81081: LD_VAR 0 2
81085: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
81086: LD_INT 0
81088: PPUSH
81089: PPUSH
// result := [ ] ;
81090: LD_ADDR_VAR 0 5
81094: PUSH
81095: EMPTY
81096: ST_TO_ADDR
// if not array then
81097: LD_VAR 0 1
81101: NOT
81102: IFFALSE 81106
// exit ;
81104: GO 81218
// for i := 1 to array do
81106: LD_ADDR_VAR 0 6
81110: PUSH
81111: DOUBLE
81112: LD_INT 1
81114: DEC
81115: ST_TO_ADDR
81116: LD_VAR 0 1
81120: PUSH
81121: FOR_TO
81122: IFFALSE 81216
// if array [ i ] [ index ] = value then
81124: LD_VAR 0 1
81128: PUSH
81129: LD_VAR 0 6
81133: ARRAY
81134: PUSH
81135: LD_VAR 0 2
81139: ARRAY
81140: PUSH
81141: LD_VAR 0 3
81145: EQUAL
81146: IFFALSE 81214
// begin if indexColumn then
81148: LD_VAR 0 4
81152: IFFALSE 81188
// result := Join ( result , array [ i ] [ indexColumn ] ) else
81154: LD_ADDR_VAR 0 5
81158: PUSH
81159: LD_VAR 0 5
81163: PPUSH
81164: LD_VAR 0 1
81168: PUSH
81169: LD_VAR 0 6
81173: ARRAY
81174: PUSH
81175: LD_VAR 0 4
81179: ARRAY
81180: PPUSH
81181: CALL 76226 0 2
81185: ST_TO_ADDR
81186: GO 81214
// result := Join ( result , array [ i ] ) ;
81188: LD_ADDR_VAR 0 5
81192: PUSH
81193: LD_VAR 0 5
81197: PPUSH
81198: LD_VAR 0 1
81202: PUSH
81203: LD_VAR 0 6
81207: ARRAY
81208: PPUSH
81209: CALL 76226 0 2
81213: ST_TO_ADDR
// end ;
81214: GO 81121
81216: POP
81217: POP
// end ;
81218: LD_VAR 0 5
81222: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
81223: LD_INT 0
81225: PPUSH
// if not vehicles or not parkingPoint then
81226: LD_VAR 0 1
81230: NOT
81231: IFTRUE 81240
81233: PUSH
81234: LD_VAR 0 2
81238: NOT
81239: OR
81240: IFFALSE 81244
// exit ;
81242: GO 81342
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
81244: LD_ADDR_VAR 0 1
81248: PUSH
81249: LD_VAR 0 1
81253: PPUSH
81254: LD_INT 50
81256: PUSH
81257: EMPTY
81258: LIST
81259: PUSH
81260: LD_INT 3
81262: PUSH
81263: LD_INT 92
81265: PUSH
81266: LD_VAR 0 2
81270: PUSH
81271: LD_INT 1
81273: ARRAY
81274: PUSH
81275: LD_VAR 0 2
81279: PUSH
81280: LD_INT 2
81282: ARRAY
81283: PUSH
81284: LD_INT 8
81286: PUSH
81287: EMPTY
81288: LIST
81289: LIST
81290: LIST
81291: LIST
81292: PUSH
81293: EMPTY
81294: LIST
81295: LIST
81296: PUSH
81297: EMPTY
81298: LIST
81299: LIST
81300: PPUSH
81301: CALL_OW 72
81305: ST_TO_ADDR
// if not vehicles then
81306: LD_VAR 0 1
81310: NOT
81311: IFFALSE 81315
// exit ;
81313: GO 81342
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
81315: LD_VAR 0 1
81319: PPUSH
81320: LD_VAR 0 2
81324: PUSH
81325: LD_INT 1
81327: ARRAY
81328: PPUSH
81329: LD_VAR 0 2
81333: PUSH
81334: LD_INT 2
81336: ARRAY
81337: PPUSH
81338: CALL_OW 111
// end ;
81342: LD_VAR 0 3
81346: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
81347: LD_INT 0
81349: PPUSH
81350: PPUSH
81351: PPUSH
// if not side or not area then
81352: LD_VAR 0 1
81356: NOT
81357: IFTRUE 81366
81359: PUSH
81360: LD_VAR 0 2
81364: NOT
81365: OR
81366: IFFALSE 81370
// exit ;
81368: GO 81489
// tmp := AreaToList ( area , 0 ) ;
81370: LD_ADDR_VAR 0 5
81374: PUSH
81375: LD_VAR 0 2
81379: PPUSH
81380: LD_INT 0
81382: PPUSH
81383: CALL_OW 517
81387: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
81388: LD_ADDR_VAR 0 4
81392: PUSH
81393: DOUBLE
81394: LD_INT 1
81396: DEC
81397: ST_TO_ADDR
81398: LD_VAR 0 5
81402: PUSH
81403: LD_INT 1
81405: ARRAY
81406: PUSH
81407: FOR_TO
81408: IFFALSE 81487
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
81410: LD_VAR 0 5
81414: PUSH
81415: LD_INT 1
81417: ARRAY
81418: PUSH
81419: LD_VAR 0 4
81423: ARRAY
81424: PPUSH
81425: LD_VAR 0 5
81429: PUSH
81430: LD_INT 2
81432: ARRAY
81433: PUSH
81434: LD_VAR 0 4
81438: ARRAY
81439: PPUSH
81440: CALL_OW 351
81444: IFFALSE 81485
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
81446: LD_VAR 0 5
81450: PUSH
81451: LD_INT 1
81453: ARRAY
81454: PUSH
81455: LD_VAR 0 4
81459: ARRAY
81460: PPUSH
81461: LD_VAR 0 5
81465: PUSH
81466: LD_INT 2
81468: ARRAY
81469: PUSH
81470: LD_VAR 0 4
81474: ARRAY
81475: PPUSH
81476: LD_VAR 0 1
81480: PPUSH
81481: CALL_OW 244
// end ;
81485: GO 81407
81487: POP
81488: POP
// end ;
81489: LD_VAR 0 3
81493: RET
// export function UniqueArray ( array ) ; var i ; begin
81494: LD_INT 0
81496: PPUSH
81497: PPUSH
// result := [ ] ;
81498: LD_ADDR_VAR 0 2
81502: PUSH
81503: EMPTY
81504: ST_TO_ADDR
// if not array then
81505: LD_VAR 0 1
81509: NOT
81510: IFFALSE 81514
// exit ;
81512: GO 81575
// for i := 1 to array do
81514: LD_ADDR_VAR 0 3
81518: PUSH
81519: DOUBLE
81520: LD_INT 1
81522: DEC
81523: ST_TO_ADDR
81524: LD_VAR 0 1
81528: PUSH
81529: FOR_TO
81530: IFFALSE 81573
// if not array [ i ] in result then
81532: LD_VAR 0 1
81536: PUSH
81537: LD_VAR 0 3
81541: ARRAY
81542: PUSH
81543: LD_VAR 0 2
81547: IN
81548: NOT
81549: IFFALSE 81571
// result := Join ( result , i ) ;
81551: LD_ADDR_VAR 0 2
81555: PUSH
81556: LD_VAR 0 2
81560: PPUSH
81561: LD_VAR 0 3
81565: PPUSH
81566: CALL 76226 0 2
81570: ST_TO_ADDR
81571: GO 81529
81573: POP
81574: POP
// end ; end_of_file
81575: LD_VAR 0 2
81579: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
81580: LD_VAR 0 1
81584: PUSH
81585: LD_INT 200
81587: DOUBLE
81588: GREATEREQUAL
81589: IFFALSE 81597
81591: LD_INT 299
81593: DOUBLE
81594: LESSEQUAL
81595: IFTRUE 81599
81597: GO 81631
81599: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
81600: LD_VAR 0 1
81604: PPUSH
81605: LD_VAR 0 2
81609: PPUSH
81610: LD_VAR 0 3
81614: PPUSH
81615: LD_VAR 0 4
81619: PPUSH
81620: LD_VAR 0 5
81624: PPUSH
81625: CALL 32536 0 5
81629: GO 81708
81631: LD_INT 300
81633: DOUBLE
81634: GREATEREQUAL
81635: IFFALSE 81643
81637: LD_INT 399
81639: DOUBLE
81640: LESSEQUAL
81641: IFTRUE 81645
81643: GO 81707
81645: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
81646: LD_VAR 0 1
81650: PPUSH
81651: LD_VAR 0 2
81655: PPUSH
81656: LD_VAR 0 3
81660: PPUSH
81661: LD_VAR 0 4
81665: PPUSH
81666: LD_VAR 0 5
81670: PPUSH
81671: LD_VAR 0 6
81675: PPUSH
81676: LD_VAR 0 7
81680: PPUSH
81681: LD_VAR 0 8
81685: PPUSH
81686: LD_VAR 0 9
81690: PPUSH
81691: LD_VAR 0 10
81695: PPUSH
81696: LD_VAR 0 11
81700: PPUSH
81701: CALL 28420 0 11
81705: GO 81708
81707: POP
// end ;
81708: PPOPN 11
81710: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
81711: LD_VAR 0 1
81715: PPUSH
81716: LD_VAR 0 2
81720: PPUSH
81721: LD_VAR 0 3
81725: PPUSH
81726: LD_VAR 0 4
81730: PPUSH
81731: LD_VAR 0 5
81735: PPUSH
81736: CALL 31917 0 5
// end ; end_of_file
81740: PPOPN 5
81742: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
81743: LD_VAR 0 1
81747: PPUSH
81748: LD_VAR 0 2
81752: PPUSH
81753: LD_VAR 0 3
81757: PPUSH
81758: LD_VAR 0 4
81762: PPUSH
81763: LD_VAR 0 5
81767: PPUSH
81768: LD_VAR 0 6
81772: PPUSH
81773: CALL 15960 0 6
// end ;
81777: PPOPN 6
81779: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
81780: LD_INT 0
81782: PPUSH
// begin if not units then
81783: LD_VAR 0 1
81787: NOT
81788: IFFALSE 81792
// exit ;
81790: GO 81826
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
81792: LD_VAR 0 1
81796: PPUSH
81797: LD_VAR 0 2
81801: PPUSH
81802: LD_VAR 0 3
81806: PPUSH
81807: LD_VAR 0 4
81811: PPUSH
81812: LD_VAR 0 5
81816: PPUSH
81817: LD_VAR 0 6
81821: PPUSH
81822: CALL 38043 0 6
// end ;
81826: PPOPN 7
81828: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
81829: CALL 15847 0 0
// end ;
81833: PPOPN 1
81835: END
