// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitVariables ;
  11: CALL 130 0 0
// CreateNature ;
  15: CALL 9187 0 0
// PrepareAlliance ;
  19: CALL 344 0 0
// PrepareFriends ;
  23: CALL 3654 0 0
// PrepareAmerican ;
  27: CALL 781 0 0
// PlaceSeeing ( 91 , 70 , 7 , - 32178 ) ;
  31: LD_INT 91
  33: PPUSH
  34: LD_INT 70
  36: PPUSH
  37: LD_INT 7
  39: PPUSH
  40: LD_INT 32178
  42: NEG
  43: PPUSH
  44: CALL_OW 330
// RemoveSeeing ( 91 , 70 , 7 ) ;
  48: LD_INT 91
  50: PPUSH
  51: LD_INT 70
  53: PPUSH
  54: LD_INT 7
  56: PPUSH
  57: CALL_OW 331
// if debug then
  61: LD_EXP 1
  65: IFFALSE 113
// begin SetAttitude ( 1 , 7 , att_enemy , true ) ;
  67: LD_INT 1
  69: PPUSH
  70: LD_INT 7
  72: PPUSH
  73: LD_INT 2
  75: PPUSH
  76: LD_INT 1
  78: PPUSH
  79: CALL_OW 80
// RemoveUnit ( Powell ) ;
  83: LD_EXP 16
  87: PPUSH
  88: CALL_OW 64
// DoNotAttack ( 1 , JMM ) ;
  92: LD_INT 1
  94: PPUSH
  95: LD_EXP 14
  99: PPUSH
 100: CALL_OW 471
// FogOff ( 1 ) ;
 104: LD_INT 1
 106: PPUSH
 107: CALL_OW 344
// end else
 111: GO 117
// Action ;
 113: CALL 9523 0 0
// PreparePatrol ;
 117: CALL 1246 0 0
// game := true ;
 121: LD_ADDR_EXP 2
 125: PUSH
 126: LD_INT 1
 128: ST_TO_ADDR
// end ;
 129: END
// export debug , game , selected , friends , reached_lab , can_escape , on_hill , friends_kill_counter , team_kill_counter , gamma_commander , extra_patrol , invis_used , alert ; export function InitVariables ; begin
 130: LD_INT 0
 132: PPUSH
// debug := false ;
 133: LD_ADDR_EXP 1
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// friends := [ ] ;
 141: LD_ADDR_EXP 4
 145: PUSH
 146: EMPTY
 147: ST_TO_ADDR
// selected := [ ] ;
 148: LD_ADDR_EXP 3
 152: PUSH
 153: EMPTY
 154: ST_TO_ADDR
// reached_lab := false ;
 155: LD_ADDR_EXP 5
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// can_escape := false ;
 163: LD_ADDR_EXP 6
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// game := false ;
 171: LD_ADDR_EXP 2
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// gamma_commander := LoadVariable ( GammaCommander , 2 ) ;
 179: LD_ADDR_EXP 10
 183: PUSH
 184: LD_STRING GammaCommander
 186: PPUSH
 187: LD_INT 2
 189: PPUSH
 190: CALL_OW 30
 194: ST_TO_ADDR
// friends_kill_counter := 0 ;
 195: LD_ADDR_EXP 8
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// team_kill_counter := 0 ;
 203: LD_ADDR_EXP 9
 207: PUSH
 208: LD_INT 0
 210: ST_TO_ADDR
// extra_patrol := true ;
 211: LD_ADDR_EXP 11
 215: PUSH
 216: LD_INT 1
 218: ST_TO_ADDR
// on_hill := false ;
 219: LD_ADDR_EXP 7
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// invis_used := false ;
 227: LD_ADDR_EXP 12
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// alert := false ;
 235: LD_ADDR_EXP 13
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// end ;
 243: LD_VAR 0 1
 247: RET
// every 0 0$1 trigger on_hill do
 248: LD_EXP 7
 252: IFFALSE 264
 254: GO 256
 256: DISABLE
// SetAchievement ( ACH_EYE ) ;
 257: LD_STRING ACH_EYE
 259: PPUSH
 260: CALL_OW 543
 264: END
// every 0 0$1 trigger not invis_used do var i ;
 265: LD_EXP 12
 269: NOT
 270: IFFALSE 341
 272: GO 274
 274: DISABLE
 275: LD_INT 0
 277: PPUSH
// begin enable ;
 278: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do
 279: LD_ADDR_VAR 0 1
 283: PUSH
 284: LD_INT 22
 286: PUSH
 287: LD_INT 7
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PUSH
 294: LD_INT 21
 296: PUSH
 297: LD_INT 1
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: PUSH
 304: EMPTY
 305: LIST
 306: LIST
 307: PPUSH
 308: CALL_OW 69
 312: PUSH
 313: FOR_IN
 314: IFFALSE 339
// if IsInvisible ( i ) then
 316: LD_VAR 0 1
 320: PPUSH
 321: CALL_OW 571
 325: IFFALSE 337
// begin invis_used := true ;
 327: LD_ADDR_EXP 12
 331: PUSH
 332: LD_INT 1
 334: ST_TO_ADDR
// break ;
 335: GO 339
// end ;
 337: GO 313
 339: POP
 340: POP
// end ; end_of_file
 341: PPOPN 1
 343: END
// export JMM , Roth ; export function PrepareAlliance ; var cargo ; begin
 344: LD_INT 0
 346: PPUSH
 347: PPUSH
// uc_side := 7 ;
 348: LD_ADDR_OWVAR 20
 352: PUSH
 353: LD_INT 7
 355: ST_TO_ADDR
// uc_nation := 1 ;
 356: LD_ADDR_OWVAR 21
 360: PUSH
 361: LD_INT 1
 363: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 11_ ) ;
 364: LD_ADDR_EXP 14
 368: PUSH
 369: LD_STRING JMM
 371: PPUSH
 372: LD_EXP 1
 376: NOT
 377: PPUSH
 378: LD_STRING 11_
 380: PPUSH
 381: CALL 32969 0 3
 385: ST_TO_ADDR
// uc_side := 4 ;
 386: LD_ADDR_OWVAR 20
 390: PUSH
 391: LD_INT 4
 393: ST_TO_ADDR
// Roth := NewCharacter ( Roth ) ;
 394: LD_ADDR_EXP 15
 398: PUSH
 399: LD_STRING Roth
 401: PPUSH
 402: CALL_OW 25
 406: ST_TO_ADDR
// SetDir ( JMM , 1 ) ;
 407: LD_EXP 14
 411: PPUSH
 412: LD_INT 1
 414: PPUSH
 415: CALL_OW 233
// SetClass ( JMM , 1 ) ;
 419: LD_EXP 14
 423: PPUSH
 424: LD_INT 1
 426: PPUSH
 427: CALL_OW 336
// PlaceUnitXY ( JMM , 105 , 10 , false ) ;
 431: LD_EXP 14
 435: PPUSH
 436: LD_INT 105
 438: PPUSH
 439: LD_INT 10
 441: PPUSH
 442: LD_INT 0
 444: PPUSH
 445: CALL_OW 48
// SetDir ( Roth , 4 ) ;
 449: LD_EXP 15
 453: PPUSH
 454: LD_INT 4
 456: PPUSH
 457: CALL_OW 233
// PlaceUnitXY ( Roth , 109 , 10 , false ) ;
 461: LD_EXP 15
 465: PPUSH
 466: LD_INT 109
 468: PPUSH
 469: LD_INT 10
 471: PPUSH
 472: LD_INT 0
 474: PPUSH
 475: CALL_OW 48
// ComTurnUnit ( JMM , Roth ) ;
 479: LD_EXP 14
 483: PPUSH
 484: LD_EXP 15
 488: PPUSH
 489: CALL_OW 119
// ComTurnUnit ( Roth , JMM ) ;
 493: LD_EXP 15
 497: PPUSH
 498: LD_EXP 14
 502: PPUSH
 503: CALL_OW 119
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
 507: LD_INT 3
 509: PPUSH
 510: LD_INT 3
 512: PPUSH
 513: LD_INT 3
 515: PPUSH
 516: LD_INT 12
 518: PPUSH
 519: LD_INT 100
 521: PPUSH
 522: CALL 37833 0 5
// cargo := CreateVehicle ;
 526: LD_ADDR_VAR 0 2
 530: PUSH
 531: CALL_OW 45
 535: ST_TO_ADDR
// SetDir ( cargo , 1 ) ;
 536: LD_VAR 0 2
 540: PPUSH
 541: LD_INT 1
 543: PPUSH
 544: CALL_OW 233
// PlaceUnitXY ( cargo , 179 , 45 , false ) ;
 548: LD_VAR 0 2
 552: PPUSH
 553: LD_INT 179
 555: PPUSH
 556: LD_INT 45
 558: PPUSH
 559: LD_INT 0
 561: PPUSH
 562: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 30 ) ;
 566: LD_VAR 0 2
 570: PPUSH
 571: LD_INT 4
 573: PPUSH
 574: LD_INT 30
 576: PPUSH
 577: CALL_OW 290
// if LoadVariable ( 11_artifact_captured , 0 ) then
 581: LD_STRING 11_artifact_captured
 583: PPUSH
 584: LD_INT 0
 586: PPUSH
 587: CALL_OW 30
 591: IFFALSE 648
// begin cargo := CreateVehicle ;
 593: LD_ADDR_VAR 0 2
 597: PUSH
 598: CALL_OW 45
 602: ST_TO_ADDR
// SetDir ( cargo , 0 ) ;
 603: LD_VAR 0 2
 607: PPUSH
 608: LD_INT 0
 610: PPUSH
 611: CALL_OW 233
// PlaceUnitXY ( cargo , 171 , 85 , false ) ;
 615: LD_VAR 0 2
 619: PPUSH
 620: LD_INT 171
 622: PPUSH
 623: LD_INT 85
 625: PPUSH
 626: LD_INT 0
 628: PPUSH
 629: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 50 ) ;
 633: LD_VAR 0 2
 637: PPUSH
 638: LD_INT 4
 640: PPUSH
 641: LD_INT 50
 643: PPUSH
 644: CALL_OW 290
// end ; SetSide ( amlab , 7 ) ;
 648: LD_INT 47
 650: PPUSH
 651: LD_INT 7
 653: PPUSH
 654: CALL_OW 235
// DoNotAttack ( 1 , amlab ) ;
 658: LD_INT 1
 660: PPUSH
 661: LD_INT 47
 663: PPUSH
 664: CALL_OW 471
// end ;
 668: LD_VAR 0 1
 672: RET
// every 0 0$1 trigger FilterUnitsInArea ( hill , [ f_side , 7 ] ) and not on_hill do
 673: LD_INT 38
 675: PPUSH
 676: LD_INT 22
 678: PUSH
 679: LD_INT 7
 681: PUSH
 682: EMPTY
 683: LIST
 684: LIST
 685: PPUSH
 686: CALL_OW 70
 690: PUSH
 691: LD_EXP 7
 695: NOT
 696: AND
 697: IFFALSE 728
 699: GO 701
 701: DISABLE
// begin enable ;
 702: ENABLE
// on_hill := true ;
 703: LD_ADDR_EXP 7
 707: PUSH
 708: LD_INT 1
 710: ST_TO_ADDR
// PlaceSeeing ( 126 , 13 , 7 , - 90 ) ;
 711: LD_INT 126
 713: PPUSH
 714: LD_INT 13
 716: PPUSH
 717: LD_INT 7
 719: PPUSH
 720: LD_INT 90
 722: NEG
 723: PPUSH
 724: CALL_OW 330
// end ;
 728: END
// every 0 0$1 trigger not FilterUnitsInArea ( hill , [ f_side , 7 ] ) and on_hill do
 729: LD_INT 38
 731: PPUSH
 732: LD_INT 22
 734: PUSH
 735: LD_INT 7
 737: PUSH
 738: EMPTY
 739: LIST
 740: LIST
 741: PPUSH
 742: CALL_OW 70
 746: NOT
 747: PUSH
 748: LD_EXP 7
 752: AND
 753: IFFALSE 780
 755: GO 757
 757: DISABLE
// begin enable ;
 758: ENABLE
// on_hill := false ;
 759: LD_ADDR_EXP 7
 763: PUSH
 764: LD_INT 0
 766: ST_TO_ADDR
// RemoveSeeing ( 126 , 13 , 7 ) ;
 767: LD_INT 126
 769: PPUSH
 770: LD_INT 13
 772: PPUSH
 773: LD_INT 7
 775: PPUSH
 776: CALL_OW 331
// end ; end_of_file
 780: END
// export Powell , mobile_patrol , mobile_points , powell_guards , defenders , defcon , defcon_wave ; export function PrepareAmerican ; var i , j , b , un , tmp ; begin
 781: LD_INT 0
 783: PPUSH
 784: PPUSH
 785: PPUSH
 786: PPUSH
 787: PPUSH
 788: PPUSH
// if Difficulty = 1 then
 789: LD_OWVAR 67
 793: PUSH
 794: LD_INT 1
 796: EQUAL
 797: IFFALSE 905
// begin tmp := [ [ 155 , 77 ] , [ 193 , 93 ] , [ 188 , 81 ] , [ 56 , 85 ] , [ 98 , 87 ] ] ;
 799: LD_ADDR_VAR 0 6
 803: PUSH
 804: LD_INT 155
 806: PUSH
 807: LD_INT 77
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: PUSH
 814: LD_INT 193
 816: PUSH
 817: LD_INT 93
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PUSH
 824: LD_INT 188
 826: PUSH
 827: LD_INT 81
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: PUSH
 834: LD_INT 56
 836: PUSH
 837: LD_INT 85
 839: PUSH
 840: EMPTY
 841: LIST
 842: LIST
 843: PUSH
 844: LD_INT 98
 846: PUSH
 847: LD_INT 87
 849: PUSH
 850: EMPTY
 851: LIST
 852: LIST
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: ST_TO_ADDR
// for i in tmp do
 861: LD_ADDR_VAR 0 2
 865: PUSH
 866: LD_VAR 0 6
 870: PUSH
 871: FOR_IN
 872: IFFALSE 903
// RemoveUnit ( HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
 874: LD_VAR 0 2
 878: PUSH
 879: LD_INT 1
 881: ARRAY
 882: PPUSH
 883: LD_VAR 0 2
 887: PUSH
 888: LD_INT 2
 890: ARRAY
 891: PPUSH
 892: CALL_OW 428
 896: PPUSH
 897: CALL_OW 64
 901: GO 871
 903: POP
 904: POP
// end ; defcon := 0 ;
 905: LD_ADDR_EXP 21
 909: PUSH
 910: LD_INT 0
 912: ST_TO_ADDR
// defcon_wave := 0 ;
 913: LD_ADDR_EXP 22
 917: PUSH
 918: LD_INT 0
 920: ST_TO_ADDR
// defenders := [ ] ;
 921: LD_ADDR_EXP 20
 925: PUSH
 926: EMPTY
 927: ST_TO_ADDR
// SetBName ( alfa , alpha ) ;
 928: LD_INT 5
 930: PPUSH
 931: LD_STRING alpha
 933: PPUSH
 934: CALL_OW 500
// uc_side := 1 ;
 938: LD_ADDR_OWVAR 20
 942: PUSH
 943: LD_INT 1
 945: ST_TO_ADDR
// uc_nation := 1 ;
 946: LD_ADDR_OWVAR 21
 950: PUSH
 951: LD_INT 1
 953: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
 954: LD_ADDR_EXP 16
 958: PUSH
 959: LD_STRING Powell
 961: PPUSH
 962: CALL_OW 25
 966: ST_TO_ADDR
// PlaceUnitXY ( Powell , 110 , 26 , false ) ;
 967: LD_EXP 16
 971: PPUSH
 972: LD_INT 110
 974: PPUSH
 975: LD_INT 26
 977: PPUSH
 978: LD_INT 0
 980: PPUSH
 981: CALL_OW 48
// ComHold ( Powell ) ;
 985: LD_EXP 16
 989: PPUSH
 990: CALL_OW 140
// for i = 1 to 5 do
 994: LD_ADDR_VAR 0 2
 998: PUSH
 999: DOUBLE
1000: LD_INT 1
1002: DEC
1003: ST_TO_ADDR
1004: LD_INT 5
1006: PUSH
1007: FOR_TO
1008: IFFALSE 1064
// begin PrepareHuman ( false , 1 , 10 ) ;
1010: LD_INT 0
1012: PPUSH
1013: LD_INT 1
1015: PPUSH
1016: LD_INT 10
1018: PPUSH
1019: CALL_OW 380
// powell_guards := Insert ( powell_guards , 1 , CreateHuman ) ;
1023: LD_ADDR_EXP 19
1027: PUSH
1028: LD_EXP 19
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: CALL_OW 44
1040: PPUSH
1041: CALL_OW 2
1045: ST_TO_ADDR
// PlaceHumanInUnit ( powell_guards [ 1 ] , ambar0 ) ;
1046: LD_EXP 19
1050: PUSH
1051: LD_INT 1
1053: ARRAY
1054: PPUSH
1055: LD_INT 18
1057: PPUSH
1058: CALL_OW 52
// end ;
1062: GO 1007
1064: POP
1065: POP
// if Difficulty > 2 then
1066: LD_OWVAR 67
1070: PUSH
1071: LD_INT 2
1073: GREATER
1074: IFFALSE 1123
// begin bc_type := b_turret ;
1076: LD_ADDR_OWVAR 42
1080: PUSH
1081: LD_INT 33
1083: ST_TO_ADDR
// bc_level := 7 ;
1084: LD_ADDR_OWVAR 43
1088: PUSH
1089: LD_INT 7
1091: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 107 , 55 , 5 ) ;
1092: LD_ADDR_VAR 0 4
1096: PUSH
1097: LD_INT 107
1099: PPUSH
1100: LD_INT 55
1102: PPUSH
1103: LD_INT 5
1105: PPUSH
1106: CALL_OW 47
1110: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_rocket_launcher ) ;
1111: LD_VAR 0 4
1115: PPUSH
1116: LD_INT 7
1118: PPUSH
1119: CALL_OW 431
// end ; for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ^ FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) do
1123: LD_ADDR_VAR 0 2
1127: PUSH
1128: LD_INT 22
1130: PUSH
1131: LD_INT 1
1133: PUSH
1134: EMPTY
1135: LIST
1136: LIST
1137: PUSH
1138: LD_INT 30
1140: PUSH
1141: LD_INT 3
1143: PUSH
1144: EMPTY
1145: LIST
1146: LIST
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: PPUSH
1152: CALL_OW 69
1156: PUSH
1157: LD_INT 22
1159: PUSH
1160: LD_INT 1
1162: PUSH
1163: EMPTY
1164: LIST
1165: LIST
1166: PUSH
1167: LD_INT 30
1169: PUSH
1170: LD_INT 36
1172: PUSH
1173: EMPTY
1174: LIST
1175: LIST
1176: PUSH
1177: EMPTY
1178: LIST
1179: LIST
1180: PPUSH
1181: CALL_OW 69
1185: ADD
1186: PUSH
1187: FOR_IN
1188: IFFALSE 1239
// for j = 1 to 3 do
1190: LD_ADDR_VAR 0 3
1194: PUSH
1195: DOUBLE
1196: LD_INT 1
1198: DEC
1199: ST_TO_ADDR
1200: LD_INT 3
1202: PUSH
1203: FOR_TO
1204: IFFALSE 1235
// begin PrepareHuman ( false , 3 , 6 ) ;
1206: LD_INT 0
1208: PPUSH
1209: LD_INT 3
1211: PPUSH
1212: LD_INT 6
1214: PPUSH
1215: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
1219: CALL_OW 44
1223: PPUSH
1224: LD_VAR 0 2
1228: PPUSH
1229: CALL_OW 52
// end ;
1233: GO 1203
1235: POP
1236: POP
1237: GO 1187
1239: POP
1240: POP
// end ;
1241: LD_VAR 0 1
1245: RET
// export function PreparePatrol ; var i , un ; begin
1246: LD_INT 0
1248: PPUSH
1249: PPUSH
1250: PPUSH
// uc_side := 1 ;
1251: LD_ADDR_OWVAR 20
1255: PUSH
1256: LD_INT 1
1258: ST_TO_ADDR
// uc_nation := 1 ;
1259: LD_ADDR_OWVAR 21
1263: PUSH
1264: LD_INT 1
1266: ST_TO_ADDR
// mobile_points := [ [ [ 99 , 55 ] , [ 113 , 67 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 103 , 41 ] ] , [ [ 27 , 49 ] , [ 46 , 49 ] , [ 87 , 70 ] , [ 99 , 79 ] , [ 118 , 111 ] , [ 99 , 79 ] , [ 87 , 70 ] , [ 46 , 49 ] ] , [ [ 200 , 88 ] , [ 175 , 80 ] , [ 135 , 62 ] , [ 117 , 53 ] , [ 103 , 41 ] , [ 99 , 24 ] , [ 85 , 3 ] , [ 99 , 24 ] , [ 103 , 41 ] , [ 98 , 47 ] , [ 99 , 56 ] , [ 96 , 66 ] , [ 99 , 56 ] , [ 112 , 66 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 156 , 71 ] , [ 168 , 76 ] , [ 168 , 61 ] , [ 168 , 75 ] , [ 185 , 85 ] ] ] ;
1267: LD_ADDR_EXP 18
1271: PUSH
1272: LD_INT 99
1274: PUSH
1275: LD_INT 55
1277: PUSH
1278: EMPTY
1279: LIST
1280: LIST
1281: PUSH
1282: LD_INT 113
1284: PUSH
1285: LD_INT 67
1287: PUSH
1288: EMPTY
1289: LIST
1290: LIST
1291: PUSH
1292: LD_INT 129
1294: PUSH
1295: LD_INT 68
1297: PUSH
1298: EMPTY
1299: LIST
1300: LIST
1301: PUSH
1302: LD_INT 135
1304: PUSH
1305: LD_INT 62
1307: PUSH
1308: EMPTY
1309: LIST
1310: LIST
1311: PUSH
1312: LD_INT 103
1314: PUSH
1315: LD_INT 41
1317: PUSH
1318: EMPTY
1319: LIST
1320: LIST
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: PUSH
1329: LD_INT 27
1331: PUSH
1332: LD_INT 49
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: PUSH
1339: LD_INT 46
1341: PUSH
1342: LD_INT 49
1344: PUSH
1345: EMPTY
1346: LIST
1347: LIST
1348: PUSH
1349: LD_INT 87
1351: PUSH
1352: LD_INT 70
1354: PUSH
1355: EMPTY
1356: LIST
1357: LIST
1358: PUSH
1359: LD_INT 99
1361: PUSH
1362: LD_INT 79
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: PUSH
1369: LD_INT 118
1371: PUSH
1372: LD_INT 111
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: LD_INT 99
1381: PUSH
1382: LD_INT 79
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: PUSH
1389: LD_INT 87
1391: PUSH
1392: LD_INT 70
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: PUSH
1399: LD_INT 46
1401: PUSH
1402: LD_INT 49
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: PUSH
1419: LD_INT 200
1421: PUSH
1422: LD_INT 88
1424: PUSH
1425: EMPTY
1426: LIST
1427: LIST
1428: PUSH
1429: LD_INT 175
1431: PUSH
1432: LD_INT 80
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: PUSH
1439: LD_INT 135
1441: PUSH
1442: LD_INT 62
1444: PUSH
1445: EMPTY
1446: LIST
1447: LIST
1448: PUSH
1449: LD_INT 117
1451: PUSH
1452: LD_INT 53
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: PUSH
1459: LD_INT 103
1461: PUSH
1462: LD_INT 41
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: PUSH
1469: LD_INT 99
1471: PUSH
1472: LD_INT 24
1474: PUSH
1475: EMPTY
1476: LIST
1477: LIST
1478: PUSH
1479: LD_INT 85
1481: PUSH
1482: LD_INT 3
1484: PUSH
1485: EMPTY
1486: LIST
1487: LIST
1488: PUSH
1489: LD_INT 99
1491: PUSH
1492: LD_INT 24
1494: PUSH
1495: EMPTY
1496: LIST
1497: LIST
1498: PUSH
1499: LD_INT 103
1501: PUSH
1502: LD_INT 41
1504: PUSH
1505: EMPTY
1506: LIST
1507: LIST
1508: PUSH
1509: LD_INT 98
1511: PUSH
1512: LD_INT 47
1514: PUSH
1515: EMPTY
1516: LIST
1517: LIST
1518: PUSH
1519: LD_INT 99
1521: PUSH
1522: LD_INT 56
1524: PUSH
1525: EMPTY
1526: LIST
1527: LIST
1528: PUSH
1529: LD_INT 96
1531: PUSH
1532: LD_INT 66
1534: PUSH
1535: EMPTY
1536: LIST
1537: LIST
1538: PUSH
1539: LD_INT 99
1541: PUSH
1542: LD_INT 56
1544: PUSH
1545: EMPTY
1546: LIST
1547: LIST
1548: PUSH
1549: LD_INT 112
1551: PUSH
1552: LD_INT 66
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: PUSH
1559: LD_INT 129
1561: PUSH
1562: LD_INT 68
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: PUSH
1569: LD_INT 135
1571: PUSH
1572: LD_INT 62
1574: PUSH
1575: EMPTY
1576: LIST
1577: LIST
1578: PUSH
1579: LD_INT 156
1581: PUSH
1582: LD_INT 71
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PUSH
1589: LD_INT 168
1591: PUSH
1592: LD_INT 76
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: PUSH
1599: LD_INT 168
1601: PUSH
1602: LD_INT 61
1604: PUSH
1605: EMPTY
1606: LIST
1607: LIST
1608: PUSH
1609: LD_INT 168
1611: PUSH
1612: LD_INT 75
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: PUSH
1619: LD_INT 185
1621: PUSH
1622: LD_INT 85
1624: PUSH
1625: EMPTY
1626: LIST
1627: LIST
1628: PUSH
1629: EMPTY
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: LIST
1645: LIST
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: LIST
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: LIST
1656: ST_TO_ADDR
// mobile_patrol := [ ] ;
1657: LD_ADDR_EXP 17
1661: PUSH
1662: EMPTY
1663: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1664: LD_INT 3
1666: PPUSH
1667: LD_INT 1
1669: PPUSH
1670: LD_INT 3
1672: PPUSH
1673: LD_INT 4
1675: PPUSH
1676: LD_INT 100
1678: PPUSH
1679: CALL 37833 0 5
// mobile_patrol := Insert ( mobile_patrol , 1 , CreateVehicle ) ;
1683: LD_ADDR_EXP 17
1687: PUSH
1688: LD_EXP 17
1692: PPUSH
1693: LD_INT 1
1695: PPUSH
1696: CALL_OW 45
1700: PPUSH
1701: CALL_OW 2
1705: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 1 ] , 99 , 55 , false ) ;
1706: LD_EXP 17
1710: PUSH
1711: LD_INT 1
1713: ARRAY
1714: PPUSH
1715: LD_INT 99
1717: PPUSH
1718: LD_INT 55
1720: PPUSH
1721: LD_INT 0
1723: PPUSH
1724: CALL_OW 48
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1728: LD_INT 2
1730: PPUSH
1731: LD_INT 1
1733: PPUSH
1734: LD_INT 3
1736: PPUSH
1737: LD_INT 4
1739: PPUSH
1740: LD_INT 100
1742: PPUSH
1743: CALL 37833 0 5
// mobile_patrol := Insert ( mobile_patrol , 2 , CreateVehicle ) ;
1747: LD_ADDR_EXP 17
1751: PUSH
1752: LD_EXP 17
1756: PPUSH
1757: LD_INT 2
1759: PPUSH
1760: CALL_OW 45
1764: PPUSH
1765: CALL_OW 2
1769: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 2 ] , 27 , 49 , false ) ;
1770: LD_EXP 17
1774: PUSH
1775: LD_INT 2
1777: ARRAY
1778: PPUSH
1779: LD_INT 27
1781: PPUSH
1782: LD_INT 49
1784: PPUSH
1785: LD_INT 0
1787: PPUSH
1788: CALL_OW 48
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , [ us_laser , us_rocket_launcher , us_rocket_launcher , us_rocket_launcher ] [ Difficulty ] , 100 ) ;
1792: LD_INT 3
1794: PPUSH
1795: LD_INT 1
1797: PPUSH
1798: LD_INT 3
1800: PPUSH
1801: LD_INT 9
1803: PUSH
1804: LD_INT 7
1806: PUSH
1807: LD_INT 7
1809: PUSH
1810: LD_INT 7
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: PUSH
1819: LD_OWVAR 67
1823: ARRAY
1824: PPUSH
1825: LD_INT 100
1827: PPUSH
1828: CALL 37833 0 5
// mobile_patrol := Insert ( mobile_patrol , 3 , CreateVehicle ) ;
1832: LD_ADDR_EXP 17
1836: PUSH
1837: LD_EXP 17
1841: PPUSH
1842: LD_INT 3
1844: PPUSH
1845: CALL_OW 45
1849: PPUSH
1850: CALL_OW 2
1854: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 3 ] , 200 , 88 , false ) ;
1855: LD_EXP 17
1859: PUSH
1860: LD_INT 3
1862: ARRAY
1863: PPUSH
1864: LD_INT 200
1866: PPUSH
1867: LD_INT 88
1869: PPUSH
1870: LD_INT 0
1872: PPUSH
1873: CALL_OW 48
// for i = mobile_patrol downto 1 do
1877: LD_ADDR_VAR 0 2
1881: PUSH
1882: DOUBLE
1883: LD_EXP 17
1887: INC
1888: ST_TO_ADDR
1889: LD_INT 1
1891: PUSH
1892: FOR_DOWNTO
1893: IFFALSE 1904
// RaiseSailEvent ( 1 ) ;
1895: LD_INT 1
1897: PPUSH
1898: CALL_OW 427
1902: GO 1892
1904: POP
1905: POP
// end ;
1906: LD_VAR 0 1
1910: RET
// export function SpawnCargo ( ) ; var i , c , k , areas , road , tmp , veh ; begin
1911: LD_INT 0
1913: PPUSH
1914: PPUSH
1915: PPUSH
1916: PPUSH
1917: PPUSH
1918: PPUSH
1919: PPUSH
1920: PPUSH
// areas := [ [ road_east , 4 ] , [ road_south , 5 ] , [ road_west , 1 ] ] ;
1921: LD_ADDR_VAR 0 5
1925: PUSH
1926: LD_INT 20
1928: PUSH
1929: LD_INT 4
1931: PUSH
1932: EMPTY
1933: LIST
1934: LIST
1935: PUSH
1936: LD_INT 21
1938: PUSH
1939: LD_INT 5
1941: PUSH
1942: EMPTY
1943: LIST
1944: LIST
1945: PUSH
1946: LD_INT 22
1948: PUSH
1949: LD_INT 1
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: PUSH
1956: EMPTY
1957: LIST
1958: LIST
1959: LIST
1960: ST_TO_ADDR
// road := [ [ 176 , 81 , 135 , 62 , 114 , 67 , 93 , 71 , 76 , 67 ] , [ 107 , 92 , 92 , 72 , 77 , 68 ] , [ 45 , 49 , 67 , 59 , 77 , 68 ] ] ;
1961: LD_ADDR_VAR 0 6
1965: PUSH
1966: LD_INT 176
1968: PUSH
1969: LD_INT 81
1971: PUSH
1972: LD_INT 135
1974: PUSH
1975: LD_INT 62
1977: PUSH
1978: LD_INT 114
1980: PUSH
1981: LD_INT 67
1983: PUSH
1984: LD_INT 93
1986: PUSH
1987: LD_INT 71
1989: PUSH
1990: LD_INT 76
1992: PUSH
1993: LD_INT 67
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: LIST
2000: LIST
2001: LIST
2002: LIST
2003: LIST
2004: LIST
2005: LIST
2006: LIST
2007: PUSH
2008: LD_INT 107
2010: PUSH
2011: LD_INT 92
2013: PUSH
2014: LD_INT 92
2016: PUSH
2017: LD_INT 72
2019: PUSH
2020: LD_INT 77
2022: PUSH
2023: LD_INT 68
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: LIST
2030: LIST
2031: LIST
2032: LIST
2033: PUSH
2034: LD_INT 45
2036: PUSH
2037: LD_INT 49
2039: PUSH
2040: LD_INT 67
2042: PUSH
2043: LD_INT 59
2045: PUSH
2046: LD_INT 77
2048: PUSH
2049: LD_INT 68
2051: PUSH
2052: EMPTY
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: LIST
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: LIST
2064: ST_TO_ADDR
// k := rand ( 1 , areas ) ;
2065: LD_ADDR_VAR 0 4
2069: PUSH
2070: LD_INT 1
2072: PPUSH
2073: LD_VAR 0 5
2077: PPUSH
2078: CALL_OW 12
2082: ST_TO_ADDR
// c := rand ( 1 , 2 ) ;
2083: LD_ADDR_VAR 0 3
2087: PUSH
2088: LD_INT 1
2090: PPUSH
2091: LD_INT 2
2093: PPUSH
2094: CALL_OW 12
2098: ST_TO_ADDR
// uc_side := 1 ;
2099: LD_ADDR_OWVAR 20
2103: PUSH
2104: LD_INT 1
2106: ST_TO_ADDR
// uc_nation := 1 ;
2107: LD_ADDR_OWVAR 21
2111: PUSH
2112: LD_INT 1
2114: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
2115: LD_INT 2
2117: PPUSH
2118: LD_INT 3
2120: PPUSH
2121: LD_INT 3
2123: PPUSH
2124: LD_INT 12
2126: PPUSH
2127: LD_INT 100
2129: PPUSH
2130: CALL 37833 0 5
// veh := CreateVehicle ;
2134: LD_ADDR_VAR 0 8
2138: PUSH
2139: CALL_OW 45
2143: ST_TO_ADDR
// SetDir ( veh , areas [ k ] [ 2 ] ) ;
2144: LD_VAR 0 8
2148: PPUSH
2149: LD_VAR 0 5
2153: PUSH
2154: LD_VAR 0 4
2158: ARRAY
2159: PUSH
2160: LD_INT 2
2162: ARRAY
2163: PPUSH
2164: CALL_OW 233
// PlaceUnitArea ( veh , areas [ k ] [ 1 ] , false ) ;
2168: LD_VAR 0 8
2172: PPUSH
2173: LD_VAR 0 5
2177: PUSH
2178: LD_VAR 0 4
2182: ARRAY
2183: PUSH
2184: LD_INT 1
2186: ARRAY
2187: PPUSH
2188: LD_INT 0
2190: PPUSH
2191: CALL_OW 49
// SetCargo ( veh , [ mat_cans , mat_siberit ] [ c ] , 100 ) ;
2195: LD_VAR 0 8
2199: PPUSH
2200: LD_INT 1
2202: PUSH
2203: LD_INT 3
2205: PUSH
2206: EMPTY
2207: LIST
2208: LIST
2209: PUSH
2210: LD_VAR 0 3
2214: ARRAY
2215: PPUSH
2216: LD_INT 100
2218: PPUSH
2219: CALL_OW 290
// tmp := road [ k ] ;
2223: LD_ADDR_VAR 0 7
2227: PUSH
2228: LD_VAR 0 6
2232: PUSH
2233: LD_VAR 0 4
2237: ARRAY
2238: ST_TO_ADDR
// for i = 1 to tmp div 2 do
2239: LD_ADDR_VAR 0 2
2243: PUSH
2244: DOUBLE
2245: LD_INT 1
2247: DEC
2248: ST_TO_ADDR
2249: LD_VAR 0 7
2253: PUSH
2254: LD_INT 2
2256: DIV
2257: PUSH
2258: FOR_TO
2259: IFFALSE 2306
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2261: LD_VAR 0 8
2265: PPUSH
2266: LD_VAR 0 7
2270: PUSH
2271: LD_VAR 0 2
2275: PUSH
2276: LD_INT 2
2278: MUL
2279: PUSH
2280: LD_INT 1
2282: MINUS
2283: ARRAY
2284: PPUSH
2285: LD_VAR 0 7
2289: PUSH
2290: LD_VAR 0 2
2294: PUSH
2295: LD_INT 2
2297: MUL
2298: ARRAY
2299: PPUSH
2300: CALL_OW 171
2304: GO 2258
2306: POP
2307: POP
// AddComGive ( veh , alfa ) ;
2308: LD_VAR 0 8
2312: PPUSH
2313: LD_INT 5
2315: PPUSH
2316: CALL_OW 221
// AddComWait ( veh , 0 0$2 ) ;
2320: LD_VAR 0 8
2324: PPUSH
2325: LD_INT 70
2327: PPUSH
2328: CALL_OW 202
// for i = tmp div 2 downto 1 do
2332: LD_ADDR_VAR 0 2
2336: PUSH
2337: DOUBLE
2338: LD_VAR 0 7
2342: PUSH
2343: LD_INT 2
2345: DIV
2346: INC
2347: ST_TO_ADDR
2348: LD_INT 1
2350: PUSH
2351: FOR_DOWNTO
2352: IFFALSE 2399
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2354: LD_VAR 0 8
2358: PPUSH
2359: LD_VAR 0 7
2363: PUSH
2364: LD_VAR 0 2
2368: PUSH
2369: LD_INT 2
2371: MUL
2372: PUSH
2373: LD_INT 1
2375: MINUS
2376: ARRAY
2377: PPUSH
2378: LD_VAR 0 7
2382: PUSH
2383: LD_VAR 0 2
2387: PUSH
2388: LD_INT 2
2390: MUL
2391: ARRAY
2392: PPUSH
2393: CALL_OW 171
2397: GO 2351
2399: POP
2400: POP
// AddComMoveToArea ( veh , areas [ k ] [ 1 ] ) ;
2401: LD_VAR 0 8
2405: PPUSH
2406: LD_VAR 0 5
2410: PUSH
2411: LD_VAR 0 4
2415: ARRAY
2416: PUSH
2417: LD_INT 1
2419: ARRAY
2420: PPUSH
2421: CALL_OW 173
// repeat wait ( 0 0$1 ) ;
2425: LD_INT 35
2427: PPUSH
2428: CALL_OW 67
// until IsInArea ( veh , areas [ k ] [ 1 ] ) and GetCargo ( veh , c ) = 0 ;
2432: LD_VAR 0 8
2436: PPUSH
2437: LD_VAR 0 5
2441: PUSH
2442: LD_VAR 0 4
2446: ARRAY
2447: PUSH
2448: LD_INT 1
2450: ARRAY
2451: PPUSH
2452: CALL_OW 308
2456: PUSH
2457: LD_VAR 0 8
2461: PPUSH
2462: LD_VAR 0 3
2466: PPUSH
2467: CALL_OW 289
2471: PUSH
2472: LD_INT 0
2474: EQUAL
2475: AND
2476: IFFALSE 2425
// RemoveUnit ( veh ) ;
2478: LD_VAR 0 8
2482: PPUSH
2483: CALL_OW 64
// end ;
2487: LD_VAR 0 1
2491: RET
// every 3 3$00 do
2492: GO 2494
2494: DISABLE
// begin enable ;
2495: ENABLE
// SpawnCargo ;
2496: CALL 1911 0 0
// end ;
2500: END
// export function PrepareDefenders ; var i , tmp ; begin
2501: LD_INT 0
2503: PPUSH
2504: PPUSH
2505: PPUSH
// if defenders then
2506: LD_EXP 20
2510: IFFALSE 2514
// exit ;
2512: GO 2786
// for i = 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
2514: LD_ADDR_VAR 0 2
2518: PUSH
2519: DOUBLE
2520: LD_INT 1
2522: DEC
2523: ST_TO_ADDR
2524: LD_INT 4
2526: PUSH
2527: LD_INT 5
2529: PUSH
2530: LD_INT 6
2532: PUSH
2533: LD_INT 7
2535: PUSH
2536: EMPTY
2537: LIST
2538: LIST
2539: LIST
2540: LIST
2541: PUSH
2542: LD_OWVAR 67
2546: ARRAY
2547: PUSH
2548: FOR_TO
2549: IFFALSE 2688
// begin tmp := Produce ( amfac2 , [ us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_remote , [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ) ;
2551: LD_ADDR_VAR 0 3
2555: PUSH
2556: LD_INT 6
2558: PPUSH
2559: LD_INT 2
2561: PUSH
2562: LD_INT 3
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: PUSH
2569: LD_INT 1
2571: PPUSH
2572: LD_INT 2
2574: PPUSH
2575: CALL_OW 12
2579: ARRAY
2580: PPUSH
2581: LD_INT 1
2583: PUSH
2584: LD_INT 3
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: PUSH
2591: LD_INT 1
2593: PPUSH
2594: LD_INT 2
2596: PPUSH
2597: CALL_OW 12
2601: ARRAY
2602: PPUSH
2603: LD_INT 2
2605: PPUSH
2606: LD_INT 4
2608: PUSH
2609: LD_INT 5
2611: PUSH
2612: LD_INT 9
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: LIST
2619: PUSH
2620: LD_INT 1
2622: PPUSH
2623: LD_INT 3
2625: PPUSH
2626: CALL_OW 12
2630: ARRAY
2631: PPUSH
2632: CALL 35451 0 5
2636: ST_TO_ADDR
// if tmp then
2637: LD_VAR 0 3
2641: IFFALSE 2686
// AddComConstruct ( amfac2 , tmp [ 1 ] , tmp [ 2 ] , tmp [ 3 ] , tmp [ 4 ] ) ;
2643: LD_INT 6
2645: PPUSH
2646: LD_VAR 0 3
2650: PUSH
2651: LD_INT 1
2653: ARRAY
2654: PPUSH
2655: LD_VAR 0 3
2659: PUSH
2660: LD_INT 2
2662: ARRAY
2663: PPUSH
2664: LD_VAR 0 3
2668: PUSH
2669: LD_INT 3
2671: ARRAY
2672: PPUSH
2673: LD_VAR 0 3
2677: PUSH
2678: LD_INT 4
2680: ARRAY
2681: PPUSH
2682: CALL_OW 185
// end ;
2686: GO 2548
2688: POP
2689: POP
// repeat wait ( 0 0$1 ) ;
2690: LD_INT 35
2692: PPUSH
2693: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
2697: LD_INT 22
2699: PUSH
2700: LD_INT 1
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: PUSH
2707: LD_INT 33
2709: PUSH
2710: LD_INT 2
2712: PUSH
2713: EMPTY
2714: LIST
2715: LIST
2716: PUSH
2717: EMPTY
2718: LIST
2719: LIST
2720: PPUSH
2721: CALL_OW 69
2725: PUSH
2726: LD_INT 4
2728: PUSH
2729: LD_INT 5
2731: PUSH
2732: LD_INT 6
2734: PUSH
2735: LD_INT 7
2737: PUSH
2738: EMPTY
2739: LIST
2740: LIST
2741: LIST
2742: LIST
2743: PUSH
2744: LD_OWVAR 67
2748: ARRAY
2749: GREATEREQUAL
2750: IFFALSE 2690
// defenders := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ;
2752: LD_ADDR_EXP 20
2756: PUSH
2757: LD_INT 22
2759: PUSH
2760: LD_INT 1
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: PUSH
2767: LD_INT 33
2769: PUSH
2770: LD_INT 2
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: PUSH
2777: EMPTY
2778: LIST
2779: LIST
2780: PPUSH
2781: CALL_OW 69
2785: ST_TO_ADDR
// end ;
2786: LD_VAR 0 1
2790: RET
// export function Defend ; var i , un , veh , tmp ; begin
2791: LD_INT 0
2793: PPUSH
2794: PPUSH
2795: PPUSH
2796: PPUSH
2797: PPUSH
// defcon_wave := defcon_wave + 1 ;
2798: LD_ADDR_EXP 22
2802: PUSH
2803: LD_EXP 22
2807: PUSH
2808: LD_INT 1
2810: PLUS
2811: ST_TO_ADDR
// if not defenders then
2812: LD_EXP 20
2816: NOT
2817: IFFALSE 2823
// PrepareDefenders ;
2819: CALL 2501 0 0
// if defcon_wave > 1 then
2823: LD_EXP 22
2827: PUSH
2828: LD_INT 1
2830: GREATER
2831: IFFALSE 3089
// begin for i = 1 to defcon_wave + 2 do
2833: LD_ADDR_VAR 0 2
2837: PUSH
2838: DOUBLE
2839: LD_INT 1
2841: DEC
2842: ST_TO_ADDR
2843: LD_EXP 22
2847: PUSH
2848: LD_INT 2
2850: PLUS
2851: PUSH
2852: FOR_TO
2853: IFFALSE 2995
// begin uc_side := 1 ;
2855: LD_ADDR_OWVAR 20
2859: PUSH
2860: LD_INT 1
2862: ST_TO_ADDR
// uc_nation := 1 ;
2863: LD_ADDR_OWVAR 21
2867: PUSH
2868: LD_INT 1
2870: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_siberite , control_manual , [ us_gatling_gun , us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
2871: LD_INT 4
2873: PPUSH
2874: LD_INT 3
2876: PPUSH
2877: LD_INT 1
2879: PPUSH
2880: LD_INT 4
2882: PUSH
2883: LD_INT 6
2885: PUSH
2886: LD_INT 7
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: LIST
2893: PUSH
2894: LD_INT 1
2896: PPUSH
2897: LD_INT 3
2899: PPUSH
2900: CALL_OW 12
2904: ARRAY
2905: PPUSH
2906: LD_INT 100
2908: PPUSH
2909: CALL 37833 0 5
// veh := CreateVehicle ;
2913: LD_ADDR_VAR 0 4
2917: PUSH
2918: CALL_OW 45
2922: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2923: LD_VAR 0 4
2927: PPUSH
2928: LD_INT 1
2930: PPUSH
2931: CALL_OW 233
// defenders := defenders ^ veh ;
2935: LD_ADDR_EXP 20
2939: PUSH
2940: LD_EXP 20
2944: PUSH
2945: LD_VAR 0 4
2949: ADD
2950: ST_TO_ADDR
// PrepareHuman ( false , 3 , 9 ) ;
2951: LD_INT 0
2953: PPUSH
2954: LD_INT 3
2956: PPUSH
2957: LD_INT 9
2959: PPUSH
2960: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2964: CALL_OW 44
2968: PPUSH
2969: LD_VAR 0 4
2973: PPUSH
2974: CALL_OW 52
// PlaceUnitArea ( veh , west_spawn , false ) ;
2978: LD_VAR 0 4
2982: PPUSH
2983: LD_INT 25
2985: PPUSH
2986: LD_INT 0
2988: PPUSH
2989: CALL_OW 49
// end ;
2993: GO 2852
2995: POP
2996: POP
// for i = 1 to defcon_wave do
2997: LD_ADDR_VAR 0 2
3001: PUSH
3002: DOUBLE
3003: LD_INT 1
3005: DEC
3006: ST_TO_ADDR
3007: LD_EXP 22
3011: PUSH
3012: FOR_TO
3013: IFFALSE 3087
// begin uc_side := 1 ;
3015: LD_ADDR_OWVAR 20
3019: PUSH
3020: LD_INT 1
3022: ST_TO_ADDR
// uc_nation := 1 ;
3023: LD_ADDR_OWVAR 21
3027: PUSH
3028: LD_INT 1
3030: ST_TO_ADDR
// PrepareHuman ( false , 5 , 9 ) ;
3031: LD_INT 0
3033: PPUSH
3034: LD_INT 5
3036: PPUSH
3037: LD_INT 9
3039: PPUSH
3040: CALL_OW 380
// un := CreateHuman ;
3044: LD_ADDR_VAR 0 3
3048: PUSH
3049: CALL_OW 44
3053: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
3054: LD_VAR 0 3
3058: PPUSH
3059: LD_INT 25
3061: PPUSH
3062: LD_INT 0
3064: PPUSH
3065: CALL_OW 49
// defenders := defenders ^ un ;
3069: LD_ADDR_EXP 20
3073: PUSH
3074: LD_EXP 20
3078: PUSH
3079: LD_VAR 0 3
3083: ADD
3084: ST_TO_ADDR
// end ;
3085: GO 3012
3087: POP
3088: POP
// end ; repeat wait ( 0 0$1 ) ;
3089: LD_INT 35
3091: PPUSH
3092: CALL_OW 67
// for i in defenders do
3096: LD_ADDR_VAR 0 2
3100: PUSH
3101: LD_EXP 20
3105: PUSH
3106: FOR_IN
3107: IFFALSE 3189
// begin if defcon and GetDistUnitXY ( i , defcon [ 1 ] , defcon [ 2 ] ) > 10 and not HasTask ( i ) then
3109: LD_EXP 21
3113: PUSH
3114: LD_VAR 0 2
3118: PPUSH
3119: LD_EXP 21
3123: PUSH
3124: LD_INT 1
3126: ARRAY
3127: PPUSH
3128: LD_EXP 21
3132: PUSH
3133: LD_INT 2
3135: ARRAY
3136: PPUSH
3137: CALL_OW 297
3141: PUSH
3142: LD_INT 10
3144: GREATER
3145: AND
3146: PUSH
3147: LD_VAR 0 2
3151: PPUSH
3152: CALL_OW 314
3156: NOT
3157: AND
3158: IFFALSE 3187
// ComAgressiveMove ( i , defcon [ 1 ] , defcon [ 2 ] ) ;
3160: LD_VAR 0 2
3164: PPUSH
3165: LD_EXP 21
3169: PUSH
3170: LD_INT 1
3172: ARRAY
3173: PPUSH
3174: LD_EXP 21
3178: PUSH
3179: LD_INT 2
3181: ARRAY
3182: PPUSH
3183: CALL_OW 114
// end ;
3187: GO 3106
3189: POP
3190: POP
// until not defenders ;
3191: LD_EXP 20
3195: NOT
3196: IFFALSE 3089
// end ;
3198: LD_VAR 0 1
3202: RET
// every 0 0$1 do var radar , i ;
3203: GO 3205
3205: DISABLE
3206: LD_INT 0
3208: PPUSH
3209: PPUSH
// begin uc_side := 1 ;
3210: LD_ADDR_OWVAR 20
3214: PUSH
3215: LD_INT 1
3217: ST_TO_ADDR
// uc_nation := 1 ;
3218: LD_ADDR_OWVAR 21
3222: PUSH
3223: LD_INT 1
3225: ST_TO_ADDR
// PrepareVehicle ( us_light_wheeled , engine_solar , control_computer , us_radar , 100 ) ;
3226: LD_INT 1
3228: PPUSH
3229: LD_INT 2
3231: PPUSH
3232: LD_INT 3
3234: PPUSH
3235: LD_INT 11
3237: PPUSH
3238: LD_INT 100
3240: PPUSH
3241: CALL 37833 0 5
// radar := CreateVehicle ;
3245: LD_ADDR_VAR 0 1
3249: PUSH
3250: CALL_OW 45
3254: ST_TO_ADDR
// SetDir ( radar , 4 ) ;
3255: LD_VAR 0 1
3259: PPUSH
3260: LD_INT 4
3262: PPUSH
3263: CALL_OW 233
// PlaceUnitXY ( radar , 51 , 45 , false ) ;
3267: LD_VAR 0 1
3271: PPUSH
3272: LD_INT 51
3274: PPUSH
3275: LD_INT 45
3277: PPUSH
3278: LD_INT 0
3280: PPUSH
3281: CALL_OW 48
// repeat AddComWait ( radar , 0 0$20 ) ;
3285: LD_VAR 0 1
3289: PPUSH
3290: LD_INT 700
3292: PPUSH
3293: CALL_OW 202
// AddComMoveXY ( radar , 65 , 75 ) ;
3297: LD_VAR 0 1
3301: PPUSH
3302: LD_INT 65
3304: PPUSH
3305: LD_INT 75
3307: PPUSH
3308: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3312: LD_VAR 0 1
3316: PPUSH
3317: LD_INT 350
3319: PPUSH
3320: CALL_OW 202
// AddComMoveXY ( radar , 83 , 87 ) ;
3324: LD_VAR 0 1
3328: PPUSH
3329: LD_INT 83
3331: PPUSH
3332: LD_INT 87
3334: PPUSH
3335: CALL_OW 171
// AddComWait ( radar , 0 0$15 ) ;
3339: LD_VAR 0 1
3343: PPUSH
3344: LD_INT 525
3346: PPUSH
3347: CALL_OW 202
// AddComMoveXY ( radar , 94 , 81 ) ;
3351: LD_VAR 0 1
3355: PPUSH
3356: LD_INT 94
3358: PPUSH
3359: LD_INT 81
3361: PPUSH
3362: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3366: LD_VAR 0 1
3370: PPUSH
3371: LD_INT 350
3373: PPUSH
3374: CALL_OW 202
// AddComMoveXY ( radar , 55 , 48 ) ;
3378: LD_VAR 0 1
3382: PPUSH
3383: LD_INT 55
3385: PPUSH
3386: LD_INT 48
3388: PPUSH
3389: CALL_OW 171
// wait ( 1 1$00 ) ;
3393: LD_INT 2100
3395: PPUSH
3396: CALL_OW 67
// until not IsOk ( radar ) ;
3400: LD_VAR 0 1
3404: PPUSH
3405: CALL_OW 302
3409: NOT
3410: IFFALSE 3285
// end ;
3412: PPOPN 2
3414: END
// every 7 7$30 trigger Difficulty > 1 and extra_patrol do var un ;
3415: LD_OWVAR 67
3419: PUSH
3420: LD_INT 1
3422: GREATER
3423: PUSH
3424: LD_EXP 11
3428: AND
3429: IFFALSE 3651
3431: GO 3433
3433: DISABLE
3434: LD_INT 0
3436: PPUSH
// begin enable ;
3437: ENABLE
// uc_side := 1 ;
3438: LD_ADDR_OWVAR 20
3442: PUSH
3443: LD_INT 1
3445: ST_TO_ADDR
// uc_nation := 1 ;
3446: LD_ADDR_OWVAR 21
3450: PUSH
3451: LD_INT 1
3453: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_gatling_gun , 100 ) ;
3454: LD_INT 5
3456: PPUSH
3457: LD_INT 3
3459: PPUSH
3460: LD_INT 3
3462: PPUSH
3463: LD_INT 4
3465: PPUSH
3466: LD_INT 100
3468: PPUSH
3469: CALL 37833 0 5
// un := CreateVehicle ;
3473: LD_ADDR_VAR 0 1
3477: PUSH
3478: CALL_OW 45
3482: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3483: LD_VAR 0 1
3487: PPUSH
3488: LD_INT 3
3490: PPUSH
3491: CALL_OW 233
// PlaceUnitXY ( un , 155 , 2 , false ) ;
3495: LD_VAR 0 1
3499: PPUSH
3500: LD_INT 155
3502: PPUSH
3503: LD_INT 2
3505: PPUSH
3506: LD_INT 0
3508: PPUSH
3509: CALL_OW 48
// ComAgressiveMove ( un , 169 , 77 ) ;
3513: LD_VAR 0 1
3517: PPUSH
3518: LD_INT 169
3520: PPUSH
3521: LD_INT 77
3523: PPUSH
3524: CALL_OW 114
// AddComWait ( un , 0 0$2 ) ;
3528: LD_VAR 0 1
3532: PPUSH
3533: LD_INT 70
3535: PPUSH
3536: CALL_OW 202
// AddComAgressiveMove ( un , 134 , 62 ) ;
3540: LD_VAR 0 1
3544: PPUSH
3545: LD_INT 134
3547: PPUSH
3548: LD_INT 62
3550: PPUSH
3551: CALL_OW 174
// AddComAgressiveMove ( un , 103 , 42 ) ;
3555: LD_VAR 0 1
3559: PPUSH
3560: LD_INT 103
3562: PPUSH
3563: LD_INT 42
3565: PPUSH
3566: CALL_OW 174
// AddComWait ( un , 0 0$2 ) ;
3570: LD_VAR 0 1
3574: PPUSH
3575: LD_INT 70
3577: PPUSH
3578: CALL_OW 202
// AddComAgressiveMove ( un , 84 , 2 ) ;
3582: LD_VAR 0 1
3586: PPUSH
3587: LD_INT 84
3589: PPUSH
3590: LD_INT 2
3592: PPUSH
3593: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
3597: LD_INT 35
3599: PPUSH
3600: CALL_OW 67
// if IsDead ( un ) then
3604: LD_VAR 0 1
3608: PPUSH
3609: CALL_OW 301
3613: IFFALSE 3625
// begin extra_patrol := false ;
3615: LD_ADDR_EXP 11
3619: PUSH
3620: LD_INT 0
3622: ST_TO_ADDR
// exit ;
3623: GO 3651
// end ; until IsAt ( un , 84 , 2 ) ;
3625: LD_VAR 0 1
3629: PPUSH
3630: LD_INT 84
3632: PPUSH
3633: LD_INT 2
3635: PPUSH
3636: CALL_OW 307
3640: IFFALSE 3597
// RemoveUnit ( un ) ;
3642: LD_VAR 0 1
3646: PPUSH
3647: CALL_OW 64
// end ; end_of_file
3651: PPOPN 1
3653: END
// export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor ; export function PrepareFriends ; var i , tmp , buildings , areas , bunkers , cl ; begin
3654: LD_INT 0
3656: PPUSH
3657: PPUSH
3658: PPUSH
3659: PPUSH
3660: PPUSH
3661: PPUSH
3662: PPUSH
// uc_side := 4 ;
3663: LD_ADDR_OWVAR 20
3667: PUSH
3668: LD_INT 4
3670: ST_TO_ADDR
// uc_nation := 1 ;
3671: LD_ADDR_OWVAR 21
3675: PUSH
3676: LD_INT 1
3678: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 10c_ ) ;
3679: LD_ADDR_EXP 37
3683: PUSH
3684: LD_STRING DeltaDoctor
3686: PPUSH
3687: LD_EXP 1
3691: NOT
3692: PPUSH
3693: LD_STRING 10c_
3695: PPUSH
3696: CALL 32969 0 3
3700: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 10c_ ) ;
3701: LD_ADDR_EXP 36
3705: PUSH
3706: LD_STRING Joan
3708: PPUSH
3709: LD_EXP 1
3713: NOT
3714: PPUSH
3715: LD_STRING 10c_
3717: PPUSH
3718: CALL 32969 0 3
3722: ST_TO_ADDR
// if Joan then
3723: LD_EXP 36
3727: IFFALSE 3758
// friends := Insert ( friends , friends + 1 , Joan ) ;
3729: LD_ADDR_EXP 4
3733: PUSH
3734: LD_EXP 4
3738: PPUSH
3739: LD_EXP 4
3743: PUSH
3744: LD_INT 1
3746: PLUS
3747: PPUSH
3748: LD_EXP 36
3752: PPUSH
3753: CALL_OW 2
3757: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 10c_ ) ;
3758: LD_ADDR_EXP 35
3762: PUSH
3763: LD_STRING Simms
3765: PPUSH
3766: LD_EXP 1
3770: NOT
3771: PPUSH
3772: LD_STRING 10c_
3774: PPUSH
3775: CALL 32969 0 3
3779: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 11_ ) ;
3780: LD_ADDR_EXP 34
3784: PUSH
3785: LD_STRING Kikuchi
3787: PPUSH
3788: LD_EXP 1
3792: NOT
3793: PPUSH
3794: LD_STRING 11_
3796: PPUSH
3797: CALL 32969 0 3
3801: ST_TO_ADDR
// if Kikuchi then
3802: LD_EXP 34
3806: IFFALSE 3837
// friends := Insert ( friends , friends + 1 , Kikuchi ) ;
3808: LD_ADDR_EXP 4
3812: PUSH
3813: LD_EXP 4
3817: PPUSH
3818: LD_EXP 4
3822: PUSH
3823: LD_INT 1
3825: PLUS
3826: PPUSH
3827: LD_EXP 34
3831: PPUSH
3832: CALL_OW 2
3836: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 11_ ) ;
3837: LD_ADDR_EXP 33
3841: PUSH
3842: LD_STRING Frank
3844: PPUSH
3845: LD_EXP 1
3849: NOT
3850: PPUSH
3851: LD_STRING 11_
3853: PPUSH
3854: CALL 32969 0 3
3858: ST_TO_ADDR
// if Frank then
3859: LD_EXP 33
3863: IFFALSE 3894
// friends := Insert ( friends , friends + 1 , Frank ) ;
3865: LD_ADDR_EXP 4
3869: PUSH
3870: LD_EXP 4
3874: PPUSH
3875: LD_EXP 4
3879: PUSH
3880: LD_INT 1
3882: PLUS
3883: PPUSH
3884: LD_EXP 33
3888: PPUSH
3889: CALL_OW 2
3893: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , 11_ ) ;
3894: LD_ADDR_EXP 32
3898: PUSH
3899: LD_STRING Gary
3901: PPUSH
3902: LD_EXP 1
3906: NOT
3907: PPUSH
3908: LD_STRING 11_
3910: PPUSH
3911: CALL 32969 0 3
3915: ST_TO_ADDR
// if Gary then
3916: LD_EXP 32
3920: IFFALSE 3951
// friends := Insert ( friends , friends + 1 , Gary ) ;
3922: LD_ADDR_EXP 4
3926: PUSH
3927: LD_EXP 4
3931: PPUSH
3932: LD_EXP 4
3936: PUSH
3937: LD_INT 1
3939: PLUS
3940: PPUSH
3941: LD_EXP 32
3945: PPUSH
3946: CALL_OW 2
3950: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , ( not debug ) , 11_ ) ;
3951: LD_ADDR_EXP 31
3955: PUSH
3956: LD_STRING Cornell
3958: PPUSH
3959: LD_EXP 1
3963: NOT
3964: PPUSH
3965: LD_STRING 11_
3967: PPUSH
3968: CALL 32969 0 3
3972: ST_TO_ADDR
// if Cornel then
3973: LD_EXP 31
3977: IFFALSE 4008
// friends := Insert ( friends , friends + 1 , Cornel ) ;
3979: LD_ADDR_EXP 4
3983: PUSH
3984: LD_EXP 4
3988: PPUSH
3989: LD_EXP 4
3993: PUSH
3994: LD_INT 1
3996: PLUS
3997: PPUSH
3998: LD_EXP 31
4002: PPUSH
4003: CALL_OW 2
4007: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , 11_ ) ;
4008: LD_ADDR_EXP 30
4012: PUSH
4013: LD_STRING Houten
4015: PPUSH
4016: LD_EXP 1
4020: NOT
4021: PPUSH
4022: LD_STRING 11_
4024: PPUSH
4025: CALL 32969 0 3
4029: ST_TO_ADDR
// if Houten then
4030: LD_EXP 30
4034: IFFALSE 4065
// friends := Insert ( friends , friends + 1 , Houten ) ;
4036: LD_ADDR_EXP 4
4040: PUSH
4041: LD_EXP 4
4045: PPUSH
4046: LD_EXP 4
4050: PUSH
4051: LD_INT 1
4053: PLUS
4054: PPUSH
4055: LD_EXP 30
4059: PPUSH
4060: CALL_OW 2
4064: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 11_ ) ;
4065: LD_ADDR_EXP 29
4069: PUSH
4070: LD_STRING Gladstone
4072: PPUSH
4073: LD_EXP 1
4077: NOT
4078: PPUSH
4079: LD_STRING 11_
4081: PPUSH
4082: CALL 32969 0 3
4086: ST_TO_ADDR
// if Gladstone then
4087: LD_EXP 29
4091: IFFALSE 4122
// friends := Insert ( friends , friends + 1 , Gladstone ) ;
4093: LD_ADDR_EXP 4
4097: PUSH
4098: LD_EXP 4
4102: PPUSH
4103: LD_EXP 4
4107: PUSH
4108: LD_INT 1
4110: PLUS
4111: PPUSH
4112: LD_EXP 29
4116: PPUSH
4117: CALL_OW 2
4121: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 11_ ) ;
4122: LD_ADDR_EXP 23
4126: PUSH
4127: LD_STRING Lisa
4129: PPUSH
4130: LD_EXP 1
4134: NOT
4135: PPUSH
4136: LD_STRING 11_
4138: PPUSH
4139: CALL 32969 0 3
4143: ST_TO_ADDR
// if Lisa then
4144: LD_EXP 23
4148: IFFALSE 4173
// friends := Insert ( friends , 1 , Lisa ) ;
4150: LD_ADDR_EXP 4
4154: PUSH
4155: LD_EXP 4
4159: PPUSH
4160: LD_INT 1
4162: PPUSH
4163: LD_EXP 23
4167: PPUSH
4168: CALL_OW 2
4172: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 11_ ) ;
4173: LD_ADDR_EXP 24
4177: PUSH
4178: LD_STRING Donaldson
4180: PPUSH
4181: LD_EXP 1
4185: NOT
4186: PPUSH
4187: LD_STRING 11_
4189: PPUSH
4190: CALL 32969 0 3
4194: ST_TO_ADDR
// if Donaldson then
4195: LD_EXP 24
4199: IFFALSE 4230
// friends := Insert ( friends , friends + 1 , Donaldson ) ;
4201: LD_ADDR_EXP 4
4205: PUSH
4206: LD_EXP 4
4210: PPUSH
4211: LD_EXP 4
4215: PUSH
4216: LD_INT 1
4218: PLUS
4219: PPUSH
4220: LD_EXP 24
4224: PPUSH
4225: CALL_OW 2
4229: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 11_ ) ;
4230: LD_ADDR_EXP 25
4234: PUSH
4235: LD_STRING Bobby
4237: PPUSH
4238: LD_EXP 1
4242: NOT
4243: PPUSH
4244: LD_STRING 11_
4246: PPUSH
4247: CALL 32969 0 3
4251: ST_TO_ADDR
// if Bobby then
4252: LD_EXP 25
4256: IFFALSE 4287
// friends := Insert ( friends , friends + 1 , Bobby ) ;
4258: LD_ADDR_EXP 4
4262: PUSH
4263: LD_EXP 4
4267: PPUSH
4268: LD_EXP 4
4272: PUSH
4273: LD_INT 1
4275: PLUS
4276: PPUSH
4277: LD_EXP 25
4281: PPUSH
4282: CALL_OW 2
4286: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 11_ ) ;
4287: LD_ADDR_EXP 26
4291: PUSH
4292: LD_STRING Cyrus
4294: PPUSH
4295: LD_EXP 1
4299: NOT
4300: PPUSH
4301: LD_STRING 11_
4303: PPUSH
4304: CALL 32969 0 3
4308: ST_TO_ADDR
// if Cyrus then
4309: LD_EXP 26
4313: IFFALSE 4344
// friends := Insert ( friends , friends + 1 , Cyrus ) ;
4315: LD_ADDR_EXP 4
4319: PUSH
4320: LD_EXP 4
4324: PPUSH
4325: LD_EXP 4
4329: PUSH
4330: LD_INT 1
4332: PLUS
4333: PPUSH
4334: LD_EXP 26
4338: PPUSH
4339: CALL_OW 2
4343: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 11_ ) ;
4344: LD_ADDR_EXP 27
4348: PUSH
4349: LD_STRING Denis
4351: PPUSH
4352: LD_EXP 1
4356: NOT
4357: PPUSH
4358: LD_STRING 11_
4360: PPUSH
4361: CALL 32969 0 3
4365: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , 11_ ) ;
4366: LD_ADDR_EXP 28
4370: PUSH
4371: LD_STRING Brown
4373: PPUSH
4374: LD_EXP 1
4378: NOT
4379: PPUSH
4380: LD_STRING 11_
4382: PPUSH
4383: CALL 32969 0 3
4387: ST_TO_ADDR
// if Brown then
4388: LD_EXP 28
4392: IFFALSE 4423
// friends := Insert ( friends , friends + 1 , Brown ) ;
4394: LD_ADDR_EXP 4
4398: PUSH
4399: LD_EXP 4
4403: PPUSH
4404: LD_EXP 4
4408: PUSH
4409: LD_INT 1
4411: PLUS
4412: PPUSH
4413: LD_EXP 28
4417: PPUSH
4418: CALL_OW 2
4422: ST_TO_ADDR
// friends := friends ^ CreateCharacterSet ( 11c_others ) ^ CreateCharacterSet ( 11_others ) ;
4423: LD_ADDR_EXP 4
4427: PUSH
4428: LD_EXP 4
4432: PUSH
4433: LD_STRING 11c_others
4435: PPUSH
4436: CALL_OW 31
4440: ADD
4441: PUSH
4442: LD_STRING 11_others
4444: PPUSH
4445: CALL_OW 31
4449: ADD
4450: ST_TO_ADDR
// if friends < 18 then
4451: LD_EXP 4
4455: PUSH
4456: LD_INT 18
4458: LESS
4459: IFFALSE 4531
// for i = 1 to 18 do
4461: LD_ADDR_VAR 0 2
4465: PUSH
4466: DOUBLE
4467: LD_INT 1
4469: DEC
4470: ST_TO_ADDR
4471: LD_INT 18
4473: PUSH
4474: FOR_TO
4475: IFFALSE 4529
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 7 ) ;
4477: LD_INT 0
4479: PPUSH
4480: LD_INT 1
4482: PPUSH
4483: LD_INT 4
4485: PPUSH
4486: CALL_OW 12
4490: PPUSH
4491: LD_INT 7
4493: PPUSH
4494: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
4498: LD_ADDR_EXP 4
4502: PUSH
4503: LD_EXP 4
4507: PPUSH
4508: LD_EXP 4
4512: PUSH
4513: LD_INT 1
4515: PLUS
4516: PPUSH
4517: CALL_OW 44
4521: PPUSH
4522: CALL_OW 2
4526: ST_TO_ADDR
// end ;
4527: GO 4474
4529: POP
4530: POP
// for i in friends do
4531: LD_ADDR_VAR 0 2
4535: PUSH
4536: LD_EXP 4
4540: PUSH
4541: FOR_IN
4542: IFFALSE 4600
// if GetSkill ( i , 1 ) >= GetSkill ( i , 4 ) then
4544: LD_VAR 0 2
4548: PPUSH
4549: LD_INT 1
4551: PPUSH
4552: CALL_OW 259
4556: PUSH
4557: LD_VAR 0 2
4561: PPUSH
4562: LD_INT 4
4564: PPUSH
4565: CALL_OW 259
4569: GREATEREQUAL
4570: IFFALSE 4586
// SetClass ( i , class_soldier ) else
4572: LD_VAR 0 2
4576: PPUSH
4577: LD_INT 1
4579: PPUSH
4580: CALL_OW 336
4584: GO 4598
// SetClass ( i , class_scientistic ) ;
4586: LD_VAR 0 2
4590: PPUSH
4591: LD_INT 4
4593: PPUSH
4594: CALL_OW 336
4598: GO 4541
4600: POP
4601: POP
// if Frank then
4602: LD_EXP 33
4606: IFFALSE 4620
// SetClass ( Frank , class_sniper ) ;
4608: LD_EXP 33
4612: PPUSH
4613: LD_INT 5
4615: PPUSH
4616: CALL_OW 336
// SetClass ( [ Joan , Denis , DeltaDoctor , Simms ] , class_scientistic ) ;
4620: LD_EXP 36
4624: PUSH
4625: LD_EXP 27
4629: PUSH
4630: LD_EXP 37
4634: PUSH
4635: LD_EXP 35
4639: PUSH
4640: EMPTY
4641: LIST
4642: LIST
4643: LIST
4644: LIST
4645: PPUSH
4646: LD_INT 4
4648: PPUSH
4649: CALL_OW 336
// selected = CharacterSelection (  , 7 , 7 , [ sel_dont_change_class , JMM , Roth , Simms , Denis , DeltaDoctor , sel_not_hired , sel_changeable , sel_change_class ] ^ friends , [ class_soldier , [ class_scientistic , 2 ] , [ class_sniper , 0 , 3 ] ] ) ;
4653: LD_ADDR_EXP 3
4657: PUSH
4658: LD_STRING 
4660: PPUSH
4661: LD_INT 7
4663: PPUSH
4664: LD_INT 7
4666: PPUSH
4667: LD_INT -6
4669: PUSH
4670: LD_EXP 14
4674: PUSH
4675: LD_EXP 15
4679: PUSH
4680: LD_EXP 35
4684: PUSH
4685: LD_EXP 27
4689: PUSH
4690: LD_EXP 37
4694: PUSH
4695: LD_INT -2
4697: PUSH
4698: LD_INT -3
4700: PUSH
4701: LD_INT -5
4703: PUSH
4704: EMPTY
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: LIST
4714: PUSH
4715: LD_EXP 4
4719: ADD
4720: PPUSH
4721: LD_INT 1
4723: PUSH
4724: LD_INT 4
4726: PUSH
4727: LD_INT 2
4729: PUSH
4730: EMPTY
4731: LIST
4732: LIST
4733: PUSH
4734: LD_INT 5
4736: PUSH
4737: LD_INT 0
4739: PUSH
4740: LD_INT 3
4742: PUSH
4743: EMPTY
4744: LIST
4745: LIST
4746: LIST
4747: PUSH
4748: EMPTY
4749: LIST
4750: LIST
4751: LIST
4752: PPUSH
4753: CALL_OW 42
4757: ST_TO_ADDR
// if Simms then
4758: LD_EXP 35
4762: IFFALSE 4780
// selected := selected ^ Simms ;
4764: LD_ADDR_EXP 3
4768: PUSH
4769: LD_EXP 3
4773: PUSH
4774: LD_EXP 35
4778: ADD
4779: ST_TO_ADDR
// if Denis then
4780: LD_EXP 27
4784: IFFALSE 4802
// selected := selected ^ Denis ;
4786: LD_ADDR_EXP 3
4790: PUSH
4791: LD_EXP 3
4795: PUSH
4796: LD_EXP 27
4800: ADD
4801: ST_TO_ADDR
// if DeltaDoctor then
4802: LD_EXP 37
4806: IFFALSE 4824
// selected := selected ^ DeltaDoctor ;
4808: LD_ADDR_EXP 3
4812: PUSH
4813: LD_EXP 3
4817: PUSH
4818: LD_EXP 37
4822: ADD
4823: ST_TO_ADDR
// friends := friends diff selected ;
4824: LD_ADDR_EXP 4
4828: PUSH
4829: LD_EXP 4
4833: PUSH
4834: LD_EXP 3
4838: DIFF
4839: ST_TO_ADDR
// buildings := [ [ ambar1 , ambar2 , ambar3 ] , [ amlab2 , amlab3 , amlab4 ] ] ;
4840: LD_ADDR_VAR 0 4
4844: PUSH
4845: LD_INT 111
4847: PUSH
4848: LD_INT 137
4850: PUSH
4851: LD_INT 51
4853: PUSH
4854: EMPTY
4855: LIST
4856: LIST
4857: LIST
4858: PUSH
4859: LD_INT 147
4861: PUSH
4862: LD_INT 129
4864: PUSH
4865: LD_INT 25
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: LIST
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: ST_TO_ADDR
// areas := [ friends_spawn_1 , friends_spawn_2 , friends_spawn_3 , friends_spawn_4 , friends_spawn_5 , friends_spawn_6 ] ;
4877: LD_ADDR_VAR 0 5
4881: PUSH
4882: LD_INT 5
4884: PUSH
4885: LD_INT 6
4887: PUSH
4888: LD_INT 7
4890: PUSH
4891: LD_INT 8
4893: PUSH
4894: LD_INT 17
4896: PUSH
4897: LD_INT 18
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: LIST
4904: LIST
4905: LIST
4906: LIST
4907: ST_TO_ADDR
// for i in buildings do
4908: LD_ADDR_VAR 0 2
4912: PUSH
4913: LD_VAR 0 4
4917: PUSH
4918: FOR_IN
4919: IFFALSE 4935
// SetSide ( i , 4 ) ;
4921: LD_VAR 0 2
4925: PPUSH
4926: LD_INT 4
4928: PPUSH
4929: CALL_OW 235
4933: GO 4918
4935: POP
4936: POP
// for i in selected do
4937: LD_ADDR_VAR 0 2
4941: PUSH
4942: LD_EXP 3
4946: PUSH
4947: FOR_IN
4948: IFFALSE 5288
// begin if GetClass ( i ) in [ 1 , 5 ] then
4950: LD_VAR 0 2
4954: PPUSH
4955: CALL_OW 257
4959: PUSH
4960: LD_INT 1
4962: PUSH
4963: LD_INT 5
4965: PUSH
4966: EMPTY
4967: LIST
4968: LIST
4969: IN
4970: IFFALSE 5130
// begin if buildings [ 1 ] then
4972: LD_VAR 0 4
4976: PUSH
4977: LD_INT 1
4979: ARRAY
4980: IFFALSE 5041
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
4982: LD_VAR 0 2
4986: PPUSH
4987: LD_VAR 0 4
4991: PUSH
4992: LD_INT 1
4994: ARRAY
4995: PUSH
4996: LD_INT 1
4998: ARRAY
4999: PPUSH
5000: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
5004: LD_ADDR_VAR 0 4
5008: PUSH
5009: LD_VAR 0 4
5013: PPUSH
5014: LD_INT 1
5016: PPUSH
5017: LD_VAR 0 4
5021: PUSH
5022: LD_INT 1
5024: ARRAY
5025: PPUSH
5026: LD_INT 1
5028: PPUSH
5029: CALL_OW 3
5033: PPUSH
5034: CALL_OW 1
5038: ST_TO_ADDR
// end else
5039: GO 5128
// begin if not areas then
5041: LD_VAR 0 5
5045: NOT
5046: IFFALSE 5080
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5048: LD_VAR 0 2
5052: PPUSH
5053: LD_INT 87
5055: PPUSH
5056: LD_INT 68
5058: PPUSH
5059: LD_INT 8
5061: PPUSH
5062: LD_INT 0
5064: PPUSH
5065: CALL_OW 50
// ComHold ( i ) ;
5069: LD_VAR 0 2
5073: PPUSH
5074: CALL_OW 140
// end else
5078: GO 5128
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5080: LD_VAR 0 2
5084: PPUSH
5085: LD_VAR 0 5
5089: PUSH
5090: LD_INT 1
5092: ARRAY
5093: PPUSH
5094: LD_INT 0
5096: PPUSH
5097: CALL_OW 49
// ComHold ( i ) ;
5101: LD_VAR 0 2
5105: PPUSH
5106: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5110: LD_ADDR_VAR 0 5
5114: PUSH
5115: LD_VAR 0 5
5119: PPUSH
5120: LD_INT 1
5122: PPUSH
5123: CALL_OW 3
5127: ST_TO_ADDR
// end ; end ; end else
5128: GO 5286
// begin if buildings [ 2 ] then
5130: LD_VAR 0 4
5134: PUSH
5135: LD_INT 2
5137: ARRAY
5138: IFFALSE 5199
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
5140: LD_VAR 0 2
5144: PPUSH
5145: LD_VAR 0 4
5149: PUSH
5150: LD_INT 2
5152: ARRAY
5153: PUSH
5154: LD_INT 1
5156: ARRAY
5157: PPUSH
5158: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
5162: LD_ADDR_VAR 0 4
5166: PUSH
5167: LD_VAR 0 4
5171: PPUSH
5172: LD_INT 2
5174: PPUSH
5175: LD_VAR 0 4
5179: PUSH
5180: LD_INT 2
5182: ARRAY
5183: PPUSH
5184: LD_INT 1
5186: PPUSH
5187: CALL_OW 3
5191: PPUSH
5192: CALL_OW 1
5196: ST_TO_ADDR
// end else
5197: GO 5286
// begin if not areas then
5199: LD_VAR 0 5
5203: NOT
5204: IFFALSE 5238
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5206: LD_VAR 0 2
5210: PPUSH
5211: LD_INT 87
5213: PPUSH
5214: LD_INT 68
5216: PPUSH
5217: LD_INT 8
5219: PPUSH
5220: LD_INT 0
5222: PPUSH
5223: CALL_OW 50
// ComHold ( i ) ;
5227: LD_VAR 0 2
5231: PPUSH
5232: CALL_OW 140
// end else
5236: GO 5286
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5238: LD_VAR 0 2
5242: PPUSH
5243: LD_VAR 0 5
5247: PUSH
5248: LD_INT 1
5250: ARRAY
5251: PPUSH
5252: LD_INT 0
5254: PPUSH
5255: CALL_OW 49
// ComHold ( i ) ;
5259: LD_VAR 0 2
5263: PPUSH
5264: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5268: LD_ADDR_VAR 0 5
5272: PUSH
5273: LD_VAR 0 5
5277: PPUSH
5278: LD_INT 1
5280: PPUSH
5281: CALL_OW 3
5285: ST_TO_ADDR
// end ; end ; end ; end ;
5286: GO 4947
5288: POP
5289: POP
// bunkers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) ;
5290: LD_ADDR_VAR 0 6
5294: PUSH
5295: LD_INT 22
5297: PUSH
5298: LD_INT 1
5300: PUSH
5301: EMPTY
5302: LIST
5303: LIST
5304: PUSH
5305: LD_INT 30
5307: PUSH
5308: LD_INT 32
5310: PUSH
5311: EMPTY
5312: LIST
5313: LIST
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: PPUSH
5319: CALL_OW 69
5323: ST_TO_ADDR
// for i = bunkers - friends downto 1 do
5324: LD_ADDR_VAR 0 2
5328: PUSH
5329: DOUBLE
5330: LD_VAR 0 6
5334: PUSH
5335: LD_EXP 4
5339: MINUS
5340: INC
5341: ST_TO_ADDR
5342: LD_INT 1
5344: PUSH
5345: FOR_DOWNTO
5346: IFFALSE 5413
// begin PrepareHuman ( false , 1 , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
5348: LD_INT 0
5350: PPUSH
5351: LD_INT 1
5353: PPUSH
5354: LD_INT 7
5356: PUSH
5357: LD_INT 8
5359: PUSH
5360: LD_INT 9
5362: PUSH
5363: LD_INT 10
5365: PUSH
5366: EMPTY
5367: LIST
5368: LIST
5369: LIST
5370: LIST
5371: PUSH
5372: LD_OWVAR 67
5376: ARRAY
5377: PPUSH
5378: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
5382: LD_ADDR_EXP 4
5386: PUSH
5387: LD_EXP 4
5391: PPUSH
5392: LD_EXP 4
5396: PUSH
5397: LD_INT 1
5399: PLUS
5400: PPUSH
5401: CALL_OW 44
5405: PPUSH
5406: CALL_OW 2
5410: ST_TO_ADDR
// end ;
5411: GO 5345
5413: POP
5414: POP
// if friends then
5415: LD_EXP 4
5419: IFFALSE 5535
// begin tmp := friends ;
5421: LD_ADDR_VAR 0 3
5425: PUSH
5426: LD_EXP 4
5430: ST_TO_ADDR
// for i = 1 to bunkers do
5431: LD_ADDR_VAR 0 2
5435: PUSH
5436: DOUBLE
5437: LD_INT 1
5439: DEC
5440: ST_TO_ADDR
5441: LD_VAR 0 6
5445: PUSH
5446: FOR_TO
5447: IFFALSE 5533
// begin SetSide ( tmp [ tmp ] , 1 ) ;
5449: LD_VAR 0 3
5453: PUSH
5454: LD_VAR 0 3
5458: ARRAY
5459: PPUSH
5460: LD_INT 1
5462: PPUSH
5463: CALL_OW 235
// SetClass ( tmp [ tmp ] , 1 ) ;
5467: LD_VAR 0 3
5471: PUSH
5472: LD_VAR 0 3
5476: ARRAY
5477: PPUSH
5478: LD_INT 1
5480: PPUSH
5481: CALL_OW 336
// PlaceHumanInUnit ( tmp [ tmp ] , bunkers [ i ] ) ;
5485: LD_VAR 0 3
5489: PUSH
5490: LD_VAR 0 3
5494: ARRAY
5495: PPUSH
5496: LD_VAR 0 6
5500: PUSH
5501: LD_VAR 0 2
5505: ARRAY
5506: PPUSH
5507: CALL_OW 52
// tmp := Delete ( tmp , tmp ) ;
5511: LD_ADDR_VAR 0 3
5515: PUSH
5516: LD_VAR 0 3
5520: PPUSH
5521: LD_VAR 0 3
5525: PPUSH
5526: CALL_OW 3
5530: ST_TO_ADDR
// end ;
5531: GO 5446
5533: POP
5534: POP
// end ; areas := areas union [ guard_spawn_1 , guard_spawn_2 , guard_spawn_3 , guard_spawn_4 , guard_spawn_5 , guard_spawn_6 , guard_spawn_7 , guard_spawn_8 , guard_spawn_9 , guard_spawn_10 , guard_spawn_11 , guard_spawn_12 , guard_spawn_13 , guard_spawn_14 , guard_spawn_15 , guard_spawn_16 , guard_spawn_17 , guard_spawn_18 , guard_spawn_19 , guard_spawn_20 ] ;
5535: LD_ADDR_VAR 0 5
5539: PUSH
5540: LD_VAR 0 5
5544: PUSH
5545: LD_INT 9
5547: PUSH
5548: LD_INT 10
5550: PUSH
5551: LD_INT 11
5553: PUSH
5554: LD_INT 12
5556: PUSH
5557: LD_INT 13
5559: PUSH
5560: LD_INT 14
5562: PUSH
5563: LD_INT 15
5565: PUSH
5566: LD_INT 16
5568: PUSH
5569: LD_INT 26
5571: PUSH
5572: LD_INT 27
5574: PUSH
5575: LD_INT 28
5577: PUSH
5578: LD_INT 29
5580: PUSH
5581: LD_INT 30
5583: PUSH
5584: LD_INT 31
5586: PUSH
5587: LD_INT 32
5589: PUSH
5590: LD_INT 33
5592: PUSH
5593: LD_INT 34
5595: PUSH
5596: LD_INT 35
5598: PUSH
5599: LD_INT 36
5601: PUSH
5602: LD_INT 37
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: LIST
5609: LIST
5610: LIST
5611: LIST
5612: LIST
5613: LIST
5614: LIST
5615: LIST
5616: LIST
5617: LIST
5618: LIST
5619: LIST
5620: LIST
5621: LIST
5622: LIST
5623: LIST
5624: LIST
5625: LIST
5626: UNION
5627: ST_TO_ADDR
// for i in friends do
5628: LD_ADDR_VAR 0 2
5632: PUSH
5633: LD_EXP 4
5637: PUSH
5638: FOR_IN
5639: IFFALSE 5926
// begin SetTag ( i , 2 ) ;
5641: LD_VAR 0 2
5645: PPUSH
5646: LD_INT 2
5648: PPUSH
5649: CALL_OW 109
// if not GetClass ( i ) in [ class_soldier , class_scientistic , class_sniper ] then
5653: LD_VAR 0 2
5657: PPUSH
5658: CALL_OW 257
5662: PUSH
5663: LD_INT 1
5665: PUSH
5666: LD_INT 4
5668: PUSH
5669: LD_INT 5
5671: PUSH
5672: EMPTY
5673: LIST
5674: LIST
5675: LIST
5676: IN
5677: NOT
5678: IFFALSE 5692
// SetClass ( i , 1 ) ;
5680: LD_VAR 0 2
5684: PPUSH
5685: LD_INT 1
5687: PPUSH
5688: CALL_OW 336
// if GetClass ( i ) in [ class_soldier , class_sniper ] and buildings [ 1 ] then
5692: LD_VAR 0 2
5696: PPUSH
5697: CALL_OW 257
5701: PUSH
5702: LD_INT 1
5704: PUSH
5705: LD_INT 5
5707: PUSH
5708: EMPTY
5709: LIST
5710: LIST
5711: IN
5712: PUSH
5713: LD_VAR 0 4
5717: PUSH
5718: LD_INT 1
5720: ARRAY
5721: AND
5722: IFFALSE 5783
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
5724: LD_VAR 0 2
5728: PPUSH
5729: LD_VAR 0 4
5733: PUSH
5734: LD_INT 1
5736: ARRAY
5737: PUSH
5738: LD_INT 1
5740: ARRAY
5741: PPUSH
5742: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
5746: LD_ADDR_VAR 0 4
5750: PUSH
5751: LD_VAR 0 4
5755: PPUSH
5756: LD_INT 1
5758: PPUSH
5759: LD_VAR 0 4
5763: PUSH
5764: LD_INT 1
5766: ARRAY
5767: PPUSH
5768: LD_INT 1
5770: PPUSH
5771: CALL_OW 3
5775: PPUSH
5776: CALL_OW 1
5780: ST_TO_ADDR
// continue ;
5781: GO 5638
// end ; if GetClass ( i ) = class_scientistic and buildings [ 2 ] then
5783: LD_VAR 0 2
5787: PPUSH
5788: CALL_OW 257
5792: PUSH
5793: LD_INT 4
5795: EQUAL
5796: PUSH
5797: LD_VAR 0 4
5801: PUSH
5802: LD_INT 2
5804: ARRAY
5805: AND
5806: IFFALSE 5867
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
5808: LD_VAR 0 2
5812: PPUSH
5813: LD_VAR 0 4
5817: PUSH
5818: LD_INT 2
5820: ARRAY
5821: PUSH
5822: LD_INT 1
5824: ARRAY
5825: PPUSH
5826: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
5830: LD_ADDR_VAR 0 4
5834: PUSH
5835: LD_VAR 0 4
5839: PPUSH
5840: LD_INT 2
5842: PPUSH
5843: LD_VAR 0 4
5847: PUSH
5848: LD_INT 2
5850: ARRAY
5851: PPUSH
5852: LD_INT 1
5854: PPUSH
5855: CALL_OW 3
5859: PPUSH
5860: CALL_OW 1
5864: ST_TO_ADDR
// continue ;
5865: GO 5638
// end ; PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5867: LD_VAR 0 2
5871: PPUSH
5872: LD_VAR 0 5
5876: PUSH
5877: LD_INT 1
5879: ARRAY
5880: PPUSH
5881: LD_INT 0
5883: PPUSH
5884: CALL_OW 49
// areas := Delete ( areas , 1 ) ;
5888: LD_ADDR_VAR 0 5
5892: PUSH
5893: LD_VAR 0 5
5897: PPUSH
5898: LD_INT 1
5900: PPUSH
5901: CALL_OW 3
5905: ST_TO_ADDR
// ComHold ( i ) ;
5906: LD_VAR 0 2
5910: PPUSH
5911: CALL_OW 140
// if not areas then
5915: LD_VAR 0 5
5919: NOT
5920: IFFALSE 5924
// break ;
5922: GO 5926
// end ;
5924: GO 5638
5926: POP
5927: POP
// if UnitFilter ( friends , [ f_not , [ f_placed ] ] ) then
5928: LD_EXP 4
5932: PPUSH
5933: LD_INT 3
5935: PUSH
5936: LD_INT 52
5938: PUSH
5939: EMPTY
5940: LIST
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: PPUSH
5946: CALL_OW 72
5950: IFFALSE 6017
// for i in UnitFilter ( friends , [ f_not , [ f_placed ] ] ) do
5952: LD_ADDR_VAR 0 2
5956: PUSH
5957: LD_EXP 4
5961: PPUSH
5962: LD_INT 3
5964: PUSH
5965: LD_INT 52
5967: PUSH
5968: EMPTY
5969: LIST
5970: PUSH
5971: EMPTY
5972: LIST
5973: LIST
5974: PPUSH
5975: CALL_OW 72
5979: PUSH
5980: FOR_IN
5981: IFFALSE 6015
// begin PlaceUnitXYR ( i , 65 , 58 , 7 , false ) ;
5983: LD_VAR 0 2
5987: PPUSH
5988: LD_INT 65
5990: PPUSH
5991: LD_INT 58
5993: PPUSH
5994: LD_INT 7
5996: PPUSH
5997: LD_INT 0
5999: PPUSH
6000: CALL_OW 50
// ComHold ( i ) ;
6004: LD_VAR 0 2
6008: PPUSH
6009: CALL_OW 140
// end ;
6013: GO 5980
6015: POP
6016: POP
// if Frank then
6017: LD_EXP 33
6021: IFFALSE 6035
// SetClass ( Frank , class_sniper ) ;
6023: LD_EXP 33
6027: PPUSH
6028: LD_INT 5
6030: PPUSH
6031: CALL_OW 336
// end ; end_of_file
6035: LD_VAR 0 1
6039: RET
// export function CanSayRand ( side ) ; begin
6040: LD_INT 0
6042: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6043: LD_ADDR_VAR 0 2
6047: PUSH
6048: LD_INT 52
6050: PUSH
6051: EMPTY
6052: LIST
6053: PUSH
6054: LD_INT 22
6056: PUSH
6057: LD_VAR 0 1
6061: PUSH
6062: EMPTY
6063: LIST
6064: LIST
6065: PUSH
6066: LD_INT 2
6068: PUSH
6069: LD_INT 25
6071: PUSH
6072: LD_INT 1
6074: PUSH
6075: EMPTY
6076: LIST
6077: LIST
6078: PUSH
6079: LD_INT 25
6081: PUSH
6082: LD_INT 2
6084: PUSH
6085: EMPTY
6086: LIST
6087: LIST
6088: PUSH
6089: LD_INT 25
6091: PUSH
6092: LD_INT 3
6094: PUSH
6095: EMPTY
6096: LIST
6097: LIST
6098: PUSH
6099: LD_INT 25
6101: PUSH
6102: LD_INT 4
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: PUSH
6109: EMPTY
6110: LIST
6111: LIST
6112: LIST
6113: LIST
6114: LIST
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: LIST
6120: PPUSH
6121: CALL_OW 69
6125: PUSH
6126: LD_EXP 14
6130: PUSH
6131: LD_EXP 33
6135: PUSH
6136: LD_EXP 23
6140: PUSH
6141: LD_EXP 24
6145: PUSH
6146: LD_EXP 25
6150: PUSH
6151: LD_EXP 26
6155: PUSH
6156: LD_EXP 27
6160: PUSH
6161: LD_EXP 28
6165: PUSH
6166: LD_EXP 29
6170: PUSH
6171: LD_EXP 30
6175: PUSH
6176: LD_EXP 16
6180: PUSH
6181: LD_EXP 31
6185: PUSH
6186: LD_EXP 32
6190: PUSH
6191: LD_EXP 34
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: LIST
6202: LIST
6203: LIST
6204: LIST
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: LIST
6211: DIFF
6212: ST_TO_ADDR
// end ;
6213: LD_VAR 0 2
6217: RET
// export function SayRand ( sex , dial ) ; begin
6218: LD_INT 0
6220: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6221: LD_ADDR_VAR 0 3
6225: PUSH
6226: LD_INT 52
6228: PUSH
6229: EMPTY
6230: LIST
6231: PUSH
6232: LD_INT 22
6234: PUSH
6235: LD_INT 1
6237: PUSH
6238: EMPTY
6239: LIST
6240: LIST
6241: PUSH
6242: LD_INT 26
6244: PUSH
6245: LD_VAR 0 1
6249: PUSH
6250: EMPTY
6251: LIST
6252: LIST
6253: PUSH
6254: LD_INT 2
6256: PUSH
6257: LD_INT 25
6259: PUSH
6260: LD_INT 1
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: PUSH
6267: LD_INT 25
6269: PUSH
6270: LD_INT 2
6272: PUSH
6273: EMPTY
6274: LIST
6275: LIST
6276: PUSH
6277: LD_INT 25
6279: PUSH
6280: LD_INT 3
6282: PUSH
6283: EMPTY
6284: LIST
6285: LIST
6286: PUSH
6287: LD_INT 25
6289: PUSH
6290: LD_INT 4
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: LIST
6308: LIST
6309: PPUSH
6310: CALL_OW 69
6314: PUSH
6315: LD_EXP 14
6319: PUSH
6320: LD_EXP 33
6324: PUSH
6325: LD_EXP 23
6329: PUSH
6330: LD_EXP 24
6334: PUSH
6335: LD_EXP 25
6339: PUSH
6340: LD_EXP 26
6344: PUSH
6345: LD_EXP 27
6349: PUSH
6350: LD_EXP 28
6354: PUSH
6355: LD_EXP 29
6359: PUSH
6360: LD_EXP 30
6364: PUSH
6365: LD_EXP 16
6369: PUSH
6370: LD_EXP 31
6374: PUSH
6375: LD_EXP 32
6379: PUSH
6380: LD_EXP 34
6384: PUSH
6385: EMPTY
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: LIST
6396: LIST
6397: LIST
6398: LIST
6399: LIST
6400: DIFF
6401: ST_TO_ADDR
// if not result then
6402: LD_VAR 0 3
6406: NOT
6407: IFFALSE 6411
// exit ;
6409: GO 6439
// result := result [ 1 ] ;
6411: LD_ADDR_VAR 0 3
6415: PUSH
6416: LD_VAR 0 3
6420: PUSH
6421: LD_INT 1
6423: ARRAY
6424: ST_TO_ADDR
// Say ( result , dial ) ;
6425: LD_VAR 0 3
6429: PPUSH
6430: LD_VAR 0 2
6434: PPUSH
6435: CALL_OW 88
// end ;
6439: LD_VAR 0 3
6443: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
6444: LD_INT 0
6446: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
6447: LD_ADDR_VAR 0 4
6451: PUSH
6452: LD_INT 22
6454: PUSH
6455: LD_INT 1
6457: PUSH
6458: EMPTY
6459: LIST
6460: LIST
6461: PUSH
6462: LD_INT 26
6464: PUSH
6465: LD_VAR 0 1
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: PUSH
6474: LD_INT 2
6476: PUSH
6477: LD_INT 25
6479: PUSH
6480: LD_INT 1
6482: PUSH
6483: EMPTY
6484: LIST
6485: LIST
6486: PUSH
6487: LD_INT 25
6489: PUSH
6490: LD_INT 2
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: PUSH
6497: LD_INT 25
6499: PUSH
6500: LD_INT 3
6502: PUSH
6503: EMPTY
6504: LIST
6505: LIST
6506: PUSH
6507: LD_INT 25
6509: PUSH
6510: LD_INT 4
6512: PUSH
6513: EMPTY
6514: LIST
6515: LIST
6516: PUSH
6517: EMPTY
6518: LIST
6519: LIST
6520: LIST
6521: LIST
6522: LIST
6523: PUSH
6524: EMPTY
6525: LIST
6526: LIST
6527: LIST
6528: PPUSH
6529: CALL_OW 69
6533: PUSH
6534: LD_EXP 14
6538: PUSH
6539: LD_EXP 33
6543: PUSH
6544: LD_EXP 23
6548: PUSH
6549: LD_EXP 24
6553: PUSH
6554: LD_EXP 25
6558: PUSH
6559: LD_EXP 26
6563: PUSH
6564: LD_EXP 27
6568: PUSH
6569: LD_EXP 28
6573: PUSH
6574: LD_EXP 29
6578: PUSH
6579: LD_EXP 30
6583: PUSH
6584: LD_EXP 16
6588: PUSH
6589: LD_EXP 31
6593: PUSH
6594: LD_EXP 32
6598: PUSH
6599: LD_EXP 34
6603: PUSH
6604: EMPTY
6605: LIST
6606: LIST
6607: LIST
6608: LIST
6609: LIST
6610: LIST
6611: LIST
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: PUSH
6620: LD_VAR 0 3
6624: ADD
6625: DIFF
6626: ST_TO_ADDR
// if not result then
6627: LD_VAR 0 4
6631: NOT
6632: IFFALSE 6636
// exit ;
6634: GO 6664
// result := result [ 1 ] ;
6636: LD_ADDR_VAR 0 4
6640: PUSH
6641: LD_VAR 0 4
6645: PUSH
6646: LD_INT 1
6648: ARRAY
6649: ST_TO_ADDR
// Say ( result , dial ) ;
6650: LD_VAR 0 4
6654: PPUSH
6655: LD_VAR 0 2
6659: PPUSH
6660: CALL_OW 88
// end ;
6664: LD_VAR 0 4
6668: RET
// export function Patrol ( unit , path , flags ) ; var i , x , y , c , p , station , tmp_path , status , enemy , e , spot_dist , safe_place , chase_range , need_refuel ; begin
6669: LD_INT 0
6671: PPUSH
6672: PPUSH
6673: PPUSH
6674: PPUSH
6675: PPUSH
6676: PPUSH
6677: PPUSH
6678: PPUSH
6679: PPUSH
6680: PPUSH
6681: PPUSH
6682: PPUSH
6683: PPUSH
6684: PPUSH
6685: PPUSH
// if not unit or not path or GetType ( unit ) = unit_building then
6686: LD_VAR 0 1
6690: NOT
6691: PUSH
6692: LD_VAR 0 2
6696: NOT
6697: OR
6698: PUSH
6699: LD_VAR 0 1
6703: PPUSH
6704: CALL_OW 247
6708: PUSH
6709: LD_INT 3
6711: EQUAL
6712: OR
6713: IFFALSE 6717
// exit ;
6715: GO 8256
// for i = path downto 1 do
6717: LD_ADDR_VAR 0 5
6721: PUSH
6722: DOUBLE
6723: LD_VAR 0 2
6727: INC
6728: ST_TO_ADDR
6729: LD_INT 1
6731: PUSH
6732: FOR_DOWNTO
6733: IFFALSE 6794
// begin if not ValidHex ( path [ i ] [ 1 ] , path [ i ] [ 2 ] ) then
6735: LD_VAR 0 2
6739: PUSH
6740: LD_VAR 0 5
6744: ARRAY
6745: PUSH
6746: LD_INT 1
6748: ARRAY
6749: PPUSH
6750: LD_VAR 0 2
6754: PUSH
6755: LD_VAR 0 5
6759: ARRAY
6760: PUSH
6761: LD_INT 2
6763: ARRAY
6764: PPUSH
6765: CALL_OW 488
6769: NOT
6770: IFFALSE 6792
// path = Delete ( path , i ) ;
6772: LD_ADDR_VAR 0 2
6776: PUSH
6777: LD_VAR 0 2
6781: PPUSH
6782: LD_VAR 0 5
6786: PPUSH
6787: CALL_OW 3
6791: ST_TO_ADDR
// end ;
6792: GO 6732
6794: POP
6795: POP
// if not path then
6796: LD_VAR 0 2
6800: NOT
6801: IFFALSE 6805
// exit ;
6803: GO 8256
// tmp_path := [ ] ;
6805: LD_ADDR_VAR 0 11
6809: PUSH
6810: EMPTY
6811: ST_TO_ADDR
// if flags then
6812: LD_VAR 0 3
6816: IFFALSE 6890
// begin if flags [ 1 ] then
6818: LD_VAR 0 3
6822: PUSH
6823: LD_INT 1
6825: ARRAY
6826: IFFALSE 6842
// safe_place = flags [ 1 ] ;
6828: LD_ADDR_VAR 0 16
6832: PUSH
6833: LD_VAR 0 3
6837: PUSH
6838: LD_INT 1
6840: ARRAY
6841: ST_TO_ADDR
// if flags [ 2 ] then
6842: LD_VAR 0 3
6846: PUSH
6847: LD_INT 2
6849: ARRAY
6850: IFFALSE 6866
// spot_dist = flags [ 2 ] ;
6852: LD_ADDR_VAR 0 15
6856: PUSH
6857: LD_VAR 0 3
6861: PUSH
6862: LD_INT 2
6864: ARRAY
6865: ST_TO_ADDR
// if flags [ 3 ] then
6866: LD_VAR 0 3
6870: PUSH
6871: LD_INT 3
6873: ARRAY
6874: IFFALSE 6890
// chase_range = flags [ 3 ] ;
6876: LD_ADDR_VAR 0 17
6880: PUSH
6881: LD_VAR 0 3
6885: PUSH
6886: LD_INT 3
6888: ARRAY
6889: ST_TO_ADDR
// end ; if not chase_range then
6890: LD_VAR 0 17
6894: NOT
6895: IFFALSE 6905
// chase_range = 8 ;
6897: LD_ADDR_VAR 0 17
6901: PUSH
6902: LD_INT 8
6904: ST_TO_ADDR
// if not spot_dist then
6905: LD_VAR 0 15
6909: NOT
6910: IFFALSE 6920
// spot_dist := 8 ;
6912: LD_ADDR_VAR 0 15
6916: PUSH
6917: LD_INT 8
6919: ST_TO_ADDR
// need_refuel = ( GetType ( unit ) = unit_vehicle and GetEngine ( unit ) <> engine_siberite ) ;
6920: LD_ADDR_VAR 0 18
6924: PUSH
6925: LD_VAR 0 1
6929: PPUSH
6930: CALL_OW 247
6934: PUSH
6935: LD_INT 2
6937: EQUAL
6938: PUSH
6939: LD_VAR 0 1
6943: PPUSH
6944: CALL_OW 262
6948: PUSH
6949: LD_INT 3
6951: NONEQUAL
6952: AND
6953: ST_TO_ADDR
// status = 1 ;
6954: LD_ADDR_VAR 0 12
6958: PUSH
6959: LD_INT 1
6961: ST_TO_ADDR
// tmp_path = [ 1 , path [ 1 ] ] ;
6962: LD_ADDR_VAR 0 11
6966: PUSH
6967: LD_INT 1
6969: PUSH
6970: LD_VAR 0 2
6974: PUSH
6975: LD_INT 1
6977: ARRAY
6978: PUSH
6979: EMPTY
6980: LIST
6981: LIST
6982: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6983: LD_INT 35
6985: PPUSH
6986: CALL_OW 67
// if need_refuel and GetFuel ( unit ) < 20 then
6990: LD_VAR 0 18
6994: PUSH
6995: LD_VAR 0 1
6999: PPUSH
7000: CALL_OW 261
7004: PUSH
7005: LD_INT 20
7007: LESS
7008: AND
7009: IFFALSE 7202
// begin station := FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_oil_mine ] , [ f_btype , b_factory ] ] ] ) ;
7011: LD_ADDR_VAR 0 10
7015: PUSH
7016: LD_INT 22
7018: PUSH
7019: LD_VAR 0 1
7023: PPUSH
7024: CALL_OW 255
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: PUSH
7033: LD_INT 2
7035: PUSH
7036: LD_INT 30
7038: PUSH
7039: LD_INT 0
7041: PUSH
7042: EMPTY
7043: LIST
7044: LIST
7045: PUSH
7046: LD_INT 30
7048: PUSH
7049: LD_INT 1
7051: PUSH
7052: EMPTY
7053: LIST
7054: LIST
7055: PUSH
7056: LD_INT 30
7058: PUSH
7059: LD_INT 29
7061: PUSH
7062: EMPTY
7063: LIST
7064: LIST
7065: PUSH
7066: LD_INT 30
7068: PUSH
7069: LD_INT 3
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: LIST
7080: LIST
7081: LIST
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: PPUSH
7087: CALL_OW 69
7091: ST_TO_ADDR
// if not station then
7092: LD_VAR 0 10
7096: NOT
7097: IFFALSE 7113
// begin SetFuel ( unit , 40 ) ;
7099: LD_VAR 0 1
7103: PPUSH
7104: LD_INT 40
7106: PPUSH
7107: CALL_OW 240
// continue ;
7111: GO 6983
// end ; status := 6 ;
7113: LD_ADDR_VAR 0 12
7117: PUSH
7118: LD_INT 6
7120: ST_TO_ADDR
// station := NearestUnitToUnit ( station , unit ) ;
7121: LD_ADDR_VAR 0 10
7125: PUSH
7126: LD_VAR 0 10
7130: PPUSH
7131: LD_VAR 0 1
7135: PPUSH
7136: CALL_OW 74
7140: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7141: LD_INT 35
7143: PPUSH
7144: CALL_OW 67
// ComMoveUnit ( unit , station ) ;
7148: LD_VAR 0 1
7152: PPUSH
7153: LD_VAR 0 10
7157: PPUSH
7158: CALL_OW 112
// until GetDistUnits ( unit , station ) < 6 ;
7162: LD_VAR 0 1
7166: PPUSH
7167: LD_VAR 0 10
7171: PPUSH
7172: CALL_OW 296
7176: PUSH
7177: LD_INT 6
7179: LESS
7180: IFFALSE 7141
// SetFuel ( unit , 100 ) ;
7182: LD_VAR 0 1
7186: PPUSH
7187: LD_INT 100
7189: PPUSH
7190: CALL_OW 240
// status := 5 ;
7194: LD_ADDR_VAR 0 12
7198: PUSH
7199: LD_INT 5
7201: ST_TO_ADDR
// end ; if status = 1 then
7202: LD_VAR 0 12
7206: PUSH
7207: LD_INT 1
7209: EQUAL
7210: IFFALSE 7586
// begin enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] , [ f_dist , unit , spot_dist ] , [ f_see , 1 ] ] ) ;
7212: LD_ADDR_VAR 0 13
7216: PUSH
7217: LD_INT 81
7219: PUSH
7220: LD_VAR 0 1
7224: PPUSH
7225: CALL_OW 255
7229: PUSH
7230: EMPTY
7231: LIST
7232: LIST
7233: PUSH
7234: LD_INT 3
7236: PUSH
7237: LD_INT 21
7239: PUSH
7240: LD_INT 3
7242: PUSH
7243: EMPTY
7244: LIST
7245: LIST
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: PUSH
7251: LD_INT 91
7253: PUSH
7254: LD_VAR 0 1
7258: PUSH
7259: LD_VAR 0 15
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: LIST
7268: PUSH
7269: LD_INT 101
7271: PUSH
7272: LD_INT 1
7274: PUSH
7275: EMPTY
7276: LIST
7277: LIST
7278: PUSH
7279: EMPTY
7280: LIST
7281: LIST
7282: LIST
7283: LIST
7284: PPUSH
7285: CALL_OW 69
7289: ST_TO_ADDR
// for i in enemy do
7290: LD_ADDR_VAR 0 5
7294: PUSH
7295: LD_VAR 0 13
7299: PUSH
7300: FOR_IN
7301: IFFALSE 7332
// if IsInvisible ( i ) then
7303: LD_VAR 0 5
7307: PPUSH
7308: CALL_OW 571
7312: IFFALSE 7330
// enemy := enemy diff i ;
7314: LD_ADDR_VAR 0 13
7318: PUSH
7319: LD_VAR 0 13
7323: PUSH
7324: LD_VAR 0 5
7328: DIFF
7329: ST_TO_ADDR
7330: GO 7300
7332: POP
7333: POP
// if enemy then
7334: LD_VAR 0 13
7338: IFFALSE 7388
// begin SetRememberedX ( unit , GetX ( unit ) ) ;
7340: LD_VAR 0 1
7344: PPUSH
7345: LD_VAR 0 1
7349: PPUSH
7350: CALL_OW 250
7354: PPUSH
7355: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
7359: LD_VAR 0 1
7363: PPUSH
7364: LD_VAR 0 1
7368: PPUSH
7369: CALL_OW 251
7373: PPUSH
7374: CALL_OW 232
// status = 2 ;
7378: LD_ADDR_VAR 0 12
7382: PUSH
7383: LD_INT 2
7385: ST_TO_ADDR
// end else
7386: GO 7586
// begin if IsAt ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) or not HasTask ( unit ) then
7388: LD_VAR 0 1
7392: PPUSH
7393: LD_VAR 0 11
7397: PUSH
7398: LD_INT 2
7400: ARRAY
7401: PUSH
7402: LD_INT 1
7404: ARRAY
7405: PPUSH
7406: LD_VAR 0 11
7410: PUSH
7411: LD_INT 2
7413: ARRAY
7414: PUSH
7415: LD_INT 2
7417: ARRAY
7418: PPUSH
7419: CALL_OW 307
7423: PUSH
7424: LD_VAR 0 1
7428: PPUSH
7429: CALL_OW 314
7433: NOT
7434: OR
7435: IFFALSE 7586
// begin wait ( 0 0$2 ) ;
7437: LD_INT 70
7439: PPUSH
7440: CALL_OW 67
// if tmp_path [ 1 ] + 1 > path then
7444: LD_VAR 0 11
7448: PUSH
7449: LD_INT 1
7451: ARRAY
7452: PUSH
7453: LD_INT 1
7455: PLUS
7456: PUSH
7457: LD_VAR 0 2
7461: GREATER
7462: IFFALSE 7487
// tmp_path := Replace ( tmp_path , 1 , 1 ) else
7464: LD_ADDR_VAR 0 11
7468: PUSH
7469: LD_VAR 0 11
7473: PPUSH
7474: LD_INT 1
7476: PPUSH
7477: LD_INT 1
7479: PPUSH
7480: CALL_OW 1
7484: ST_TO_ADDR
7485: GO 7518
// tmp_path := Replace ( tmp_path , 1 , tmp_path [ 1 ] + 1 ) ;
7487: LD_ADDR_VAR 0 11
7491: PUSH
7492: LD_VAR 0 11
7496: PPUSH
7497: LD_INT 1
7499: PPUSH
7500: LD_VAR 0 11
7504: PUSH
7505: LD_INT 1
7507: ARRAY
7508: PUSH
7509: LD_INT 1
7511: PLUS
7512: PPUSH
7513: CALL_OW 1
7517: ST_TO_ADDR
// tmp_path := Replace ( tmp_path , 2 , path [ tmp_path [ 1 ] ] ) ;
7518: LD_ADDR_VAR 0 11
7522: PUSH
7523: LD_VAR 0 11
7527: PPUSH
7528: LD_INT 2
7530: PPUSH
7531: LD_VAR 0 2
7535: PUSH
7536: LD_VAR 0 11
7540: PUSH
7541: LD_INT 1
7543: ARRAY
7544: ARRAY
7545: PPUSH
7546: CALL_OW 1
7550: ST_TO_ADDR
// ComAgressiveMove ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) ;
7551: LD_VAR 0 1
7555: PPUSH
7556: LD_VAR 0 11
7560: PUSH
7561: LD_INT 2
7563: ARRAY
7564: PUSH
7565: LD_INT 1
7567: ARRAY
7568: PPUSH
7569: LD_VAR 0 11
7573: PUSH
7574: LD_INT 2
7576: ARRAY
7577: PUSH
7578: LD_INT 2
7580: ARRAY
7581: PPUSH
7582: CALL_OW 114
// end ; end ; end ; if status = 2 then
7586: LD_VAR 0 12
7590: PUSH
7591: LD_INT 2
7593: EQUAL
7594: IFFALSE 7815
// begin if GetLives ( unit ) < 650 and safe_place then
7596: LD_VAR 0 1
7600: PPUSH
7601: CALL_OW 256
7605: PUSH
7606: LD_INT 650
7608: LESS
7609: PUSH
7610: LD_VAR 0 16
7614: AND
7615: IFFALSE 7627
// begin status = 3 ;
7617: LD_ADDR_VAR 0 12
7621: PUSH
7622: LD_INT 3
7624: ST_TO_ADDR
// continue ;
7625: GO 6983
// end ; x := GetRememberedX ( unit ) ;
7627: LD_ADDR_VAR 0 6
7631: PUSH
7632: LD_VAR 0 1
7636: PPUSH
7637: CALL_OW 252
7641: ST_TO_ADDR
// y := GetRememberedY ( unit ) ;
7642: LD_ADDR_VAR 0 7
7646: PUSH
7647: LD_VAR 0 1
7651: PPUSH
7652: CALL_OW 253
7656: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_distxy , x , y , spot_dist ] , [ f_see , 1 ] ] ) ;
7657: LD_ADDR_VAR 0 13
7661: PUSH
7662: LD_INT 81
7664: PUSH
7665: LD_VAR 0 1
7669: PPUSH
7670: CALL_OW 255
7674: PUSH
7675: EMPTY
7676: LIST
7677: LIST
7678: PUSH
7679: LD_INT 92
7681: PUSH
7682: LD_VAR 0 6
7686: PUSH
7687: LD_VAR 0 7
7691: PUSH
7692: LD_VAR 0 15
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: LIST
7701: LIST
7702: PUSH
7703: LD_INT 101
7705: PUSH
7706: LD_INT 1
7708: PUSH
7709: EMPTY
7710: LIST
7711: LIST
7712: PUSH
7713: EMPTY
7714: LIST
7715: LIST
7716: LIST
7717: PPUSH
7718: CALL_OW 69
7722: ST_TO_ADDR
// if enemy then
7723: LD_VAR 0 13
7727: IFFALSE 7798
// begin e := NearestUnitToUnit ( enemy , unit ) ;
7729: LD_ADDR_VAR 0 14
7733: PUSH
7734: LD_VAR 0 13
7738: PPUSH
7739: LD_VAR 0 1
7743: PPUSH
7744: CALL_OW 74
7748: ST_TO_ADDR
// if GetDistUnitXY ( e , x , y ) < spot_dist + chase_range then
7749: LD_VAR 0 14
7753: PPUSH
7754: LD_VAR 0 6
7758: PPUSH
7759: LD_VAR 0 7
7763: PPUSH
7764: CALL_OW 297
7768: PUSH
7769: LD_VAR 0 15
7773: PUSH
7774: LD_VAR 0 17
7778: PLUS
7779: LESS
7780: IFFALSE 7796
// ComAttackUnit ( unit , e ) ;
7782: LD_VAR 0 1
7786: PPUSH
7787: LD_VAR 0 14
7791: PPUSH
7792: CALL_OW 115
// end else
7796: GO 7815
// begin ComStop ( unit ) ;
7798: LD_VAR 0 1
7802: PPUSH
7803: CALL_OW 141
// status = 5 ;
7807: LD_ADDR_VAR 0 12
7811: PUSH
7812: LD_INT 5
7814: ST_TO_ADDR
// end ; end ; if status = 3 and safe_place then
7815: LD_VAR 0 12
7819: PUSH
7820: LD_INT 3
7822: EQUAL
7823: PUSH
7824: LD_VAR 0 16
7828: AND
7829: IFFALSE 7915
// begin repeat ComMoveXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) ;
7831: LD_VAR 0 1
7835: PPUSH
7836: LD_VAR 0 16
7840: PUSH
7841: LD_INT 1
7843: ARRAY
7844: PPUSH
7845: LD_VAR 0 16
7849: PUSH
7850: LD_INT 2
7852: ARRAY
7853: PPUSH
7854: CALL_OW 111
// wait ( 0 0$1 ) ;
7858: LD_INT 35
7860: PPUSH
7861: CALL_OW 67
// until GetDistUnitXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) < 4 ;
7865: LD_VAR 0 1
7869: PPUSH
7870: LD_VAR 0 16
7874: PUSH
7875: LD_INT 1
7877: ARRAY
7878: PPUSH
7879: LD_VAR 0 16
7883: PUSH
7884: LD_INT 2
7886: ARRAY
7887: PPUSH
7888: CALL_OW 297
7892: PUSH
7893: LD_INT 4
7895: LESS
7896: IFFALSE 7831
// ComStop ( unit ) ;
7898: LD_VAR 0 1
7902: PPUSH
7903: CALL_OW 141
// status = 4 ;
7907: LD_ADDR_VAR 0 12
7911: PUSH
7912: LD_INT 4
7914: ST_TO_ADDR
// end ; if status = 4 then
7915: LD_VAR 0 12
7919: PUSH
7920: LD_INT 4
7922: EQUAL
7923: IFFALSE 7955
// begin repeat wait ( 0 0$1 ) ;
7925: LD_INT 35
7927: PPUSH
7928: CALL_OW 67
// until GetLives ( unit ) = 1000 ;
7932: LD_VAR 0 1
7936: PPUSH
7937: CALL_OW 256
7941: PUSH
7942: LD_INT 1000
7944: EQUAL
7945: IFFALSE 7925
// status = 5 ;
7947: LD_ADDR_VAR 0 12
7951: PUSH
7952: LD_INT 5
7954: ST_TO_ADDR
// end ; if status = 5 then
7955: LD_VAR 0 12
7959: PUSH
7960: LD_INT 5
7962: EQUAL
7963: IFFALSE 8245
// begin p := 999 ;
7965: LD_ADDR_VAR 0 9
7969: PUSH
7970: LD_INT 999
7972: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ] ;
7973: LD_ADDR_VAR 0 14
7977: PUSH
7978: LD_VAR 0 11
7982: PUSH
7983: LD_INT 2
7985: ARRAY
7986: PUSH
7987: LD_INT 1
7989: ARRAY
7990: PUSH
7991: LD_VAR 0 11
7995: PUSH
7996: LD_INT 2
7998: ARRAY
7999: PUSH
8000: LD_INT 2
8002: ARRAY
8003: PUSH
8004: EMPTY
8005: LIST
8006: LIST
8007: ST_TO_ADDR
// c := 1 ;
8008: LD_ADDR_VAR 0 8
8012: PUSH
8013: LD_INT 1
8015: ST_TO_ADDR
// for i = 1 to tmp_path [ 2 ] div 2 do
8016: LD_ADDR_VAR 0 5
8020: PUSH
8021: DOUBLE
8022: LD_INT 1
8024: DEC
8025: ST_TO_ADDR
8026: LD_VAR 0 11
8030: PUSH
8031: LD_INT 2
8033: ARRAY
8034: PUSH
8035: LD_INT 2
8037: DIV
8038: PUSH
8039: FOR_TO
8040: IFFALSE 8172
// begin x := GetDistUnitXY ( unit , tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ) ;
8042: LD_ADDR_VAR 0 6
8046: PUSH
8047: LD_VAR 0 1
8051: PPUSH
8052: LD_VAR 0 11
8056: PUSH
8057: LD_INT 2
8059: ARRAY
8060: PUSH
8061: LD_VAR 0 8
8065: ARRAY
8066: PPUSH
8067: LD_VAR 0 11
8071: PUSH
8072: LD_INT 2
8074: ARRAY
8075: PUSH
8076: LD_VAR 0 8
8080: PUSH
8081: LD_INT 1
8083: PLUS
8084: ARRAY
8085: PPUSH
8086: CALL_OW 297
8090: ST_TO_ADDR
// if x < p then
8091: LD_VAR 0 6
8095: PUSH
8096: LD_VAR 0 9
8100: LESS
8101: IFFALSE 8156
// begin p := x ;
8103: LD_ADDR_VAR 0 9
8107: PUSH
8108: LD_VAR 0 6
8112: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ] ;
8113: LD_ADDR_VAR 0 14
8117: PUSH
8118: LD_VAR 0 11
8122: PUSH
8123: LD_INT 2
8125: ARRAY
8126: PUSH
8127: LD_VAR 0 8
8131: ARRAY
8132: PUSH
8133: LD_VAR 0 11
8137: PUSH
8138: LD_INT 2
8140: ARRAY
8141: PUSH
8142: LD_VAR 0 8
8146: PUSH
8147: LD_INT 1
8149: PLUS
8150: ARRAY
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: ST_TO_ADDR
// end ; c = c + 2 ;
8156: LD_ADDR_VAR 0 8
8160: PUSH
8161: LD_VAR 0 8
8165: PUSH
8166: LD_INT 2
8168: PLUS
8169: ST_TO_ADDR
// end ;
8170: GO 8039
8172: POP
8173: POP
// repeat ComMoveXY ( unit , e [ 1 ] , e [ 2 ] ) ;
8174: LD_VAR 0 1
8178: PPUSH
8179: LD_VAR 0 14
8183: PUSH
8184: LD_INT 1
8186: ARRAY
8187: PPUSH
8188: LD_VAR 0 14
8192: PUSH
8193: LD_INT 2
8195: ARRAY
8196: PPUSH
8197: CALL_OW 111
// wait ( 0 0$1 ) ;
8201: LD_INT 35
8203: PPUSH
8204: CALL_OW 67
// until IsAt ( unit , e [ 1 ] , e [ 2 ] ) ;
8208: LD_VAR 0 1
8212: PPUSH
8213: LD_VAR 0 14
8217: PUSH
8218: LD_INT 1
8220: ARRAY
8221: PPUSH
8222: LD_VAR 0 14
8226: PUSH
8227: LD_INT 2
8229: ARRAY
8230: PPUSH
8231: CALL_OW 307
8235: IFFALSE 8174
// status = 1 ;
8237: LD_ADDR_VAR 0 12
8241: PUSH
8242: LD_INT 1
8244: ST_TO_ADDR
// end ; until IsDead ( unit ) ;
8245: LD_VAR 0 1
8249: PPUSH
8250: CALL_OW 301
8254: IFFALSE 6983
// end ;
8256: LD_VAR 0 4
8260: RET
// export function Talk ( units , type , sequence , sex , class , id , order_id ) ; var i , unit , tmp , unit_id , dialog_id , sex_id , class_id ; begin
8261: LD_INT 0
8263: PPUSH
8264: PPUSH
8265: PPUSH
8266: PPUSH
8267: PPUSH
8268: PPUSH
8269: PPUSH
8270: PPUSH
// if not units or not sequence or not sex in [ sex_male , sex_female , 0 ] or not id or not order_id then
8271: LD_VAR 0 1
8275: NOT
8276: PUSH
8277: LD_VAR 0 3
8281: NOT
8282: OR
8283: PUSH
8284: LD_VAR 0 4
8288: PUSH
8289: LD_INT 1
8291: PUSH
8292: LD_INT 2
8294: PUSH
8295: LD_INT 0
8297: PUSH
8298: EMPTY
8299: LIST
8300: LIST
8301: LIST
8302: IN
8303: NOT
8304: OR
8305: PUSH
8306: LD_VAR 0 6
8310: NOT
8311: OR
8312: PUSH
8313: LD_VAR 0 7
8317: NOT
8318: OR
8319: IFFALSE 8323
// exit ;
8321: GO 8714
// sex_id :=  ;
8323: LD_ADDR_VAR 0 14
8327: PUSH
8328: LD_STRING 
8330: ST_TO_ADDR
// case class of 1 :
8331: LD_VAR 0 5
8335: PUSH
8336: LD_INT 1
8338: DOUBLE
8339: EQUAL
8340: IFTRUE 8344
8342: GO 8355
8344: POP
// class_id := Sol ; 2 :
8345: LD_ADDR_VAR 0 15
8349: PUSH
8350: LD_STRING Sol
8352: ST_TO_ADDR
8353: GO 8413
8355: LD_INT 2
8357: DOUBLE
8358: EQUAL
8359: IFTRUE 8363
8361: GO 8374
8363: POP
// class_id := Eng ; 3 :
8364: LD_ADDR_VAR 0 15
8368: PUSH
8369: LD_STRING Eng
8371: ST_TO_ADDR
8372: GO 8413
8374: LD_INT 3
8376: DOUBLE
8377: EQUAL
8378: IFTRUE 8382
8380: GO 8393
8382: POP
// class_id := Mech ; 4 :
8383: LD_ADDR_VAR 0 15
8387: PUSH
8388: LD_STRING Mech
8390: ST_TO_ADDR
8391: GO 8413
8393: LD_INT 4
8395: DOUBLE
8396: EQUAL
8397: IFTRUE 8401
8399: GO 8412
8401: POP
// class_id := Sci ; end ;
8402: LD_ADDR_VAR 0 15
8406: PUSH
8407: LD_STRING Sci
8409: ST_TO_ADDR
8410: GO 8413
8412: POP
// tmp := UnitFilter ( units , [ f_class , class ] ) ;
8413: LD_ADDR_VAR 0 11
8417: PUSH
8418: LD_VAR 0 1
8422: PPUSH
8423: LD_INT 25
8425: PUSH
8426: LD_VAR 0 5
8430: PUSH
8431: EMPTY
8432: LIST
8433: LIST
8434: PPUSH
8435: CALL_OW 72
8439: ST_TO_ADDR
// if tmp then
8440: LD_VAR 0 11
8444: IFFALSE 8456
// units := tmp ;
8446: LD_ADDR_VAR 0 1
8450: PUSH
8451: LD_VAR 0 11
8455: ST_TO_ADDR
// if sex then
8456: LD_VAR 0 4
8460: IFFALSE 8516
// begin if sex = sex_female then
8462: LD_VAR 0 4
8466: PUSH
8467: LD_INT 2
8469: EQUAL
8470: IFFALSE 8480
// sex_id := F ;
8472: LD_ADDR_VAR 0 14
8476: PUSH
8477: LD_STRING F
8479: ST_TO_ADDR
// units := UnitFilter ( units , [ f_sex , sex ] ) ;
8480: LD_ADDR_VAR 0 1
8484: PUSH
8485: LD_VAR 0 1
8489: PPUSH
8490: LD_INT 26
8492: PUSH
8493: LD_VAR 0 4
8497: PUSH
8498: EMPTY
8499: LIST
8500: LIST
8501: PPUSH
8502: CALL_OW 72
8506: ST_TO_ADDR
// if not units then
8507: LD_VAR 0 1
8511: NOT
8512: IFFALSE 8516
// exit ;
8514: GO 8714
// end ; unit_id := id ;
8516: LD_ADDR_VAR 0 12
8520: PUSH
8521: LD_VAR 0 6
8525: ST_TO_ADDR
// if unit_id > units then
8526: LD_VAR 0 12
8530: PUSH
8531: LD_VAR 0 1
8535: GREATER
8536: IFFALSE 8546
// unit_id := 1 ;
8538: LD_ADDR_VAR 0 12
8542: PUSH
8543: LD_INT 1
8545: ST_TO_ADDR
// if not units [ unit_id ] then
8546: LD_VAR 0 1
8550: PUSH
8551: LD_VAR 0 12
8555: ARRAY
8556: NOT
8557: IFFALSE 8561
// exit ;
8559: GO 8714
// unit := units [ unit_id ] ;
8561: LD_ADDR_VAR 0 10
8565: PUSH
8566: LD_VAR 0 1
8570: PUSH
8571: LD_VAR 0 12
8575: ARRAY
8576: ST_TO_ADDR
// dialog_id := D & sequence & - & sex_id & class_id & id & - & order_id ;
8577: LD_ADDR_VAR 0 13
8581: PUSH
8582: LD_STRING D
8584: PUSH
8585: LD_VAR 0 3
8589: STR
8590: PUSH
8591: LD_STRING -
8593: STR
8594: PUSH
8595: LD_VAR 0 14
8599: STR
8600: PUSH
8601: LD_VAR 0 15
8605: STR
8606: PUSH
8607: LD_VAR 0 6
8611: STR
8612: PUSH
8613: LD_STRING -
8615: STR
8616: PUSH
8617: LD_VAR 0 7
8621: STR
8622: ST_TO_ADDR
// case type of 0 :
8623: LD_VAR 0 2
8627: PUSH
8628: LD_INT 0
8630: DOUBLE
8631: EQUAL
8632: IFTRUE 8636
8634: GO 8653
8636: POP
// Say ( unit , dialog_id ) ; 1 :
8637: LD_VAR 0 10
8641: PPUSH
8642: LD_VAR 0 13
8646: PPUSH
8647: CALL_OW 88
8651: GO 8704
8653: LD_INT 1
8655: DOUBLE
8656: EQUAL
8657: IFTRUE 8661
8659: GO 8678
8661: POP
// SayRadio ( unit , dialog_id ) ; 2 :
8662: LD_VAR 0 10
8666: PPUSH
8667: LD_VAR 0 13
8671: PPUSH
8672: CALL_OW 94
8676: GO 8704
8678: LD_INT 2
8680: DOUBLE
8681: EQUAL
8682: IFTRUE 8686
8684: GO 8703
8686: POP
// ForceSay ( unit , dialog_id ) ; end ;
8687: LD_VAR 0 10
8691: PPUSH
8692: LD_VAR 0 13
8696: PPUSH
8697: CALL_OW 91
8701: GO 8704
8703: POP
// result := unit ;
8704: LD_ADDR_VAR 0 8
8708: PUSH
8709: LD_VAR 0 10
8713: ST_TO_ADDR
// end ;
8714: LD_VAR 0 8
8718: RET
// export function IsNearbyEntrance ( unit , building , distance ) ; var i , entrance ; begin
8719: LD_INT 0
8721: PPUSH
8722: PPUSH
8723: PPUSH
// result := false ;
8724: LD_ADDR_VAR 0 4
8728: PUSH
8729: LD_INT 0
8731: ST_TO_ADDR
// if not unit or not building or IsInUnit ( unit ) then
8732: LD_VAR 0 1
8736: NOT
8737: PUSH
8738: LD_VAR 0 2
8742: NOT
8743: OR
8744: PUSH
8745: LD_VAR 0 1
8749: PPUSH
8750: CALL_OW 310
8754: OR
8755: IFFALSE 8759
// exit ;
8757: GO 8963
// if distance < 0 then
8759: LD_VAR 0 3
8763: PUSH
8764: LD_INT 0
8766: LESS
8767: IFFALSE 8777
// distance := 0 ;
8769: LD_ADDR_VAR 0 3
8773: PUSH
8774: LD_INT 0
8776: ST_TO_ADDR
// entrance := GetBuildingHexes ( GetBType ( building ) , GetX ( building ) , GetY ( building ) , GetDir ( building ) , GetNation ( building ) , 1 ) ;
8777: LD_ADDR_VAR 0 6
8781: PUSH
8782: LD_VAR 0 2
8786: PPUSH
8787: CALL_OW 266
8791: PPUSH
8792: LD_VAR 0 2
8796: PPUSH
8797: CALL_OW 250
8801: PPUSH
8802: LD_VAR 0 2
8806: PPUSH
8807: CALL_OW 251
8811: PPUSH
8812: LD_VAR 0 2
8816: PPUSH
8817: CALL_OW 254
8821: PPUSH
8822: LD_VAR 0 2
8826: PPUSH
8827: CALL_OW 248
8831: PPUSH
8832: LD_INT 1
8834: PPUSH
8835: CALL 46910 0 6
8839: ST_TO_ADDR
// if not entrance then
8840: LD_VAR 0 6
8844: NOT
8845: IFFALSE 8849
// exit ;
8847: GO 8963
// for i in entrance do
8849: LD_ADDR_VAR 0 5
8853: PUSH
8854: LD_VAR 0 6
8858: PUSH
8859: FOR_IN
8860: IFFALSE 8961
// begin if not distance then
8862: LD_VAR 0 3
8866: NOT
8867: IFFALSE 8912
// begin if IsAt ( unit , i [ 1 ] , i [ 2 ] ) then
8869: LD_VAR 0 1
8873: PPUSH
8874: LD_VAR 0 5
8878: PUSH
8879: LD_INT 1
8881: ARRAY
8882: PPUSH
8883: LD_VAR 0 5
8887: PUSH
8888: LD_INT 2
8890: ARRAY
8891: PPUSH
8892: CALL_OW 307
8896: IFFALSE 8910
// begin result := true ;
8898: LD_ADDR_VAR 0 4
8902: PUSH
8903: LD_INT 1
8905: ST_TO_ADDR
// exit ;
8906: POP
8907: POP
8908: GO 8963
// end ; end else
8910: GO 8959
// begin if GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) <= distance then
8912: LD_VAR 0 1
8916: PPUSH
8917: LD_VAR 0 5
8921: PUSH
8922: LD_INT 1
8924: ARRAY
8925: PPUSH
8926: LD_VAR 0 5
8930: PUSH
8931: LD_INT 2
8933: ARRAY
8934: PPUSH
8935: CALL_OW 297
8939: PUSH
8940: LD_VAR 0 3
8944: LESSEQUAL
8945: IFFALSE 8959
// begin result := true ;
8947: LD_ADDR_VAR 0 4
8951: PUSH
8952: LD_INT 1
8954: ST_TO_ADDR
// exit ;
8955: POP
8956: POP
8957: GO 8963
// end ; end ; end ;
8959: GO 8859
8961: POP
8962: POP
// end ;
8963: LD_VAR 0 4
8967: RET
// export function CanSpot ( unit , unit2 ) ; var i , building ; begin
8968: LD_INT 0
8970: PPUSH
8971: PPUSH
8972: PPUSH
// result := false ;
8973: LD_ADDR_VAR 0 3
8977: PUSH
8978: LD_INT 0
8980: ST_TO_ADDR
// if not unit or not unit2 or not IsOk ( unit ) or not IsOk ( unit2 ) then
8981: LD_VAR 0 1
8985: NOT
8986: PUSH
8987: LD_VAR 0 2
8991: NOT
8992: OR
8993: PUSH
8994: LD_VAR 0 1
8998: PPUSH
8999: CALL_OW 302
9003: NOT
9004: OR
9005: PUSH
9006: LD_VAR 0 2
9010: PPUSH
9011: CALL_OW 302
9015: NOT
9016: OR
9017: IFFALSE 9021
// exit ;
9019: GO 9182
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] ] ) , unit ) ) < 8 then
9021: LD_VAR 0 1
9025: PPUSH
9026: LD_INT 81
9028: PUSH
9029: LD_VAR 0 1
9033: PPUSH
9034: CALL_OW 255
9038: PUSH
9039: EMPTY
9040: LIST
9041: LIST
9042: PUSH
9043: LD_INT 3
9045: PUSH
9046: LD_INT 21
9048: PUSH
9049: LD_INT 3
9051: PUSH
9052: EMPTY
9053: LIST
9054: LIST
9055: PUSH
9056: EMPTY
9057: LIST
9058: LIST
9059: PUSH
9060: EMPTY
9061: LIST
9062: LIST
9063: PPUSH
9064: CALL_OW 69
9068: PPUSH
9069: LD_VAR 0 1
9073: PPUSH
9074: CALL_OW 74
9078: PPUSH
9079: CALL_OW 296
9083: PUSH
9084: LD_INT 8
9086: LESS
9087: IFFALSE 9091
// exit ;
9089: GO 9182
// building := IsInUnit ( unit2 ) ;
9091: LD_ADDR_VAR 0 5
9095: PUSH
9096: LD_VAR 0 2
9100: PPUSH
9101: CALL_OW 310
9105: ST_TO_ADDR
// if building then
9106: LD_VAR 0 5
9110: IFFALSE 9137
// result := IsNearbyEntrance ( unit , building , 2 ) else
9112: LD_ADDR_VAR 0 3
9116: PUSH
9117: LD_VAR 0 1
9121: PPUSH
9122: LD_VAR 0 5
9126: PPUSH
9127: LD_INT 2
9129: PPUSH
9130: CALL 8719 0 3
9134: ST_TO_ADDR
9135: GO 9182
// result := ( GetDistUnits ( unit , unit2 ) < 6 and See ( GetSide ( unit2 ) , unit ) ) ;
9137: LD_ADDR_VAR 0 3
9141: PUSH
9142: LD_VAR 0 1
9146: PPUSH
9147: LD_VAR 0 2
9151: PPUSH
9152: CALL_OW 296
9156: PUSH
9157: LD_INT 6
9159: LESS
9160: PUSH
9161: LD_VAR 0 2
9165: PPUSH
9166: CALL_OW 255
9170: PPUSH
9171: LD_VAR 0 1
9175: PPUSH
9176: CALL_OW 292
9180: AND
9181: ST_TO_ADDR
// end ;
9182: LD_VAR 0 3
9186: RET
// export function CreateNature ; var i , animal , nat_area ; begin
9187: LD_INT 0
9189: PPUSH
9190: PPUSH
9191: PPUSH
9192: PPUSH
// uc_side = 0 ;
9193: LD_ADDR_OWVAR 20
9197: PUSH
9198: LD_INT 0
9200: ST_TO_ADDR
// uc_nation = 0 ;
9201: LD_ADDR_OWVAR 21
9205: PUSH
9206: LD_INT 0
9208: ST_TO_ADDR
// nat_area := nature_area ;
9209: LD_ADDR_VAR 0 4
9213: PUSH
9214: LD_INT 24
9216: ST_TO_ADDR
// InitHc ;
9217: CALL_OW 19
// for i = 1 to 4 do
9221: LD_ADDR_VAR 0 2
9225: PUSH
9226: DOUBLE
9227: LD_INT 1
9229: DEC
9230: ST_TO_ADDR
9231: LD_INT 4
9233: PUSH
9234: FOR_TO
9235: IFFALSE 9282
// begin hc_class = 18 ;
9237: LD_ADDR_OWVAR 28
9241: PUSH
9242: LD_INT 18
9244: ST_TO_ADDR
// hc_gallery =  ;
9245: LD_ADDR_OWVAR 33
9249: PUSH
9250: LD_STRING 
9252: ST_TO_ADDR
// animal := CreateHuman ;
9253: LD_ADDR_VAR 0 3
9257: PUSH
9258: CALL_OW 44
9262: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9263: LD_VAR 0 3
9267: PPUSH
9268: LD_VAR 0 4
9272: PPUSH
9273: LD_INT 0
9275: PPUSH
9276: CALL_OW 49
// end ;
9280: GO 9234
9282: POP
9283: POP
// for i = 1 to 3 do
9284: LD_ADDR_VAR 0 2
9288: PUSH
9289: DOUBLE
9290: LD_INT 1
9292: DEC
9293: ST_TO_ADDR
9294: LD_INT 3
9296: PUSH
9297: FOR_TO
9298: IFFALSE 9392
// begin hc_class = class_apeman ;
9300: LD_ADDR_OWVAR 28
9304: PUSH
9305: LD_INT 12
9307: ST_TO_ADDR
// hc_gallery =  ;
9308: LD_ADDR_OWVAR 33
9312: PUSH
9313: LD_STRING 
9315: ST_TO_ADDR
// hc_agressivity = 0 ;
9316: LD_ADDR_OWVAR 35
9320: PUSH
9321: LD_INT 0
9323: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
9324: LD_ADDR_OWVAR 31
9328: PUSH
9329: LD_INT 1
9331: PPUSH
9332: LD_INT 3
9334: PPUSH
9335: CALL_OW 12
9339: PUSH
9340: LD_INT 1
9342: PPUSH
9343: LD_INT 3
9345: PPUSH
9346: CALL_OW 12
9350: PUSH
9351: LD_INT 0
9353: PUSH
9354: LD_INT 0
9356: PUSH
9357: EMPTY
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: ST_TO_ADDR
// animal := CreateHuman ;
9363: LD_ADDR_VAR 0 3
9367: PUSH
9368: CALL_OW 44
9372: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9373: LD_VAR 0 3
9377: PPUSH
9378: LD_VAR 0 4
9382: PPUSH
9383: LD_INT 0
9385: PPUSH
9386: CALL_OW 49
// end ;
9390: GO 9297
9392: POP
9393: POP
// for i = 1 to 3 do
9394: LD_ADDR_VAR 0 2
9398: PUSH
9399: DOUBLE
9400: LD_INT 1
9402: DEC
9403: ST_TO_ADDR
9404: LD_INT 3
9406: PUSH
9407: FOR_TO
9408: IFFALSE 9455
// begin hc_class = 13 ;
9410: LD_ADDR_OWVAR 28
9414: PUSH
9415: LD_INT 13
9417: ST_TO_ADDR
// hc_gallery =  ;
9418: LD_ADDR_OWVAR 33
9422: PUSH
9423: LD_STRING 
9425: ST_TO_ADDR
// animal := CreateHuman ;
9426: LD_ADDR_VAR 0 3
9430: PUSH
9431: CALL_OW 44
9435: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9436: LD_VAR 0 3
9440: PPUSH
9441: LD_VAR 0 4
9445: PPUSH
9446: LD_INT 0
9448: PPUSH
9449: CALL_OW 49
// end ;
9453: GO 9407
9455: POP
9456: POP
// for i = 1 to 3 do
9457: LD_ADDR_VAR 0 2
9461: PUSH
9462: DOUBLE
9463: LD_INT 1
9465: DEC
9466: ST_TO_ADDR
9467: LD_INT 3
9469: PUSH
9470: FOR_TO
9471: IFFALSE 9516
// begin hc_class = 20 ;
9473: LD_ADDR_OWVAR 28
9477: PUSH
9478: LD_INT 20
9480: ST_TO_ADDR
// hc_gallery =  ;
9481: LD_ADDR_OWVAR 33
9485: PUSH
9486: LD_STRING 
9488: ST_TO_ADDR
// animal := CreateHuman ;
9489: LD_ADDR_VAR 0 3
9493: PUSH
9494: CALL_OW 44
9498: ST_TO_ADDR
// PlaceUnitArea ( animal , lake_area , false ) ;
9499: LD_VAR 0 3
9503: PPUSH
9504: LD_INT 4
9506: PPUSH
9507: LD_INT 0
9509: PPUSH
9510: CALL_OW 49
// end ;
9514: GO 9470
9516: POP
9517: POP
// end ; end_of_file
9518: LD_VAR 0 1
9522: RET
// export function Action ; begin
9523: LD_INT 0
9525: PPUSH
// InGameOn ;
9526: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
9530: LD_EXP 14
9534: PPUSH
9535: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
9539: LD_EXP 14
9543: PPUSH
9544: LD_STRING D1-JMM-1
9546: PPUSH
9547: CALL_OW 88
// Say ( Roth , D1-Roth-1 ) ;
9551: LD_EXP 15
9555: PPUSH
9556: LD_STRING D1-Roth-1
9558: PPUSH
9559: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
9563: LD_EXP 14
9567: PPUSH
9568: LD_STRING D1-JMM-2
9570: PPUSH
9571: CALL_OW 88
// Say ( Roth , D1-Roth-2 ) ;
9575: LD_EXP 15
9579: PPUSH
9580: LD_STRING D1-Roth-2
9582: PPUSH
9583: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9587: LD_EXP 14
9591: PPUSH
9592: LD_STRING D1-JMM-3
9594: PPUSH
9595: CALL_OW 88
// Say ( Roth , D1-Roth-3 ) ;
9599: LD_EXP 15
9603: PPUSH
9604: LD_STRING D1-Roth-3
9606: PPUSH
9607: CALL_OW 88
// ComInvisible ( Roth ) ;
9611: LD_EXP 15
9615: PPUSH
9616: CALL_OW 152
// wait ( 0 0$1.3 ) ;
9620: LD_INT 46
9622: PPUSH
9623: CALL_OW 67
// Say ( JMM , D1-JMM-4 ) ;
9627: LD_EXP 14
9631: PPUSH
9632: LD_STRING D1-JMM-4
9634: PPUSH
9635: CALL_OW 88
// wait ( 0 0$0.3 ) ;
9639: LD_INT 10
9641: PPUSH
9642: CALL_OW 67
// ComTurnUnit ( Roth , JMM ) ;
9646: LD_EXP 15
9650: PPUSH
9651: LD_EXP 14
9655: PPUSH
9656: CALL_OW 119
// Say ( JMM , D1-JMM-4a ) ;
9660: LD_EXP 14
9664: PPUSH
9665: LD_STRING D1-JMM-4a
9667: PPUSH
9668: CALL_OW 88
// Say ( Roth , D1-Roth-4 ) ;
9672: LD_EXP 15
9676: PPUSH
9677: LD_STRING D1-Roth-4
9679: PPUSH
9680: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
9684: LD_EXP 14
9688: PPUSH
9689: LD_STRING D1-JMM-5
9691: PPUSH
9692: CALL_OW 88
// Say ( Roth , D1-Roth-5 ) ;
9696: LD_EXP 15
9700: PPUSH
9701: LD_STRING D1-Roth-5
9703: PPUSH
9704: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
9708: LD_EXP 14
9712: PPUSH
9713: LD_STRING D1-JMM-6
9715: PPUSH
9716: CALL_OW 88
// Say ( Roth , D1-Roth-6 ) ;
9720: LD_EXP 15
9724: PPUSH
9725: LD_STRING D1-Roth-6
9727: PPUSH
9728: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
9732: LD_EXP 14
9736: PPUSH
9737: LD_STRING D1-JMM-7
9739: PPUSH
9740: CALL_OW 88
// ComMoveXY ( Powell , GetX ( JMM ) , GetY ( JMM ) ) ;
9744: LD_EXP 16
9748: PPUSH
9749: LD_EXP 14
9753: PPUSH
9754: CALL_OW 250
9758: PPUSH
9759: LD_EXP 14
9763: PPUSH
9764: CALL_OW 251
9768: PPUSH
9769: CALL_OW 111
// Say ( Roth , D1-Roth-7 ) ;
9773: LD_EXP 15
9777: PPUSH
9778: LD_STRING D1-Roth-7
9780: PPUSH
9781: CALL_OW 88
// repeat wait ( 0 0$0.3 ) ;
9785: LD_INT 10
9787: PPUSH
9788: CALL_OW 67
// until GetDistUnits ( Powell , JMM ) < 6 ;
9792: LD_EXP 16
9796: PPUSH
9797: LD_EXP 14
9801: PPUSH
9802: CALL_OW 296
9806: PUSH
9807: LD_INT 6
9809: LESS
9810: IFFALSE 9785
// ComTurnUnit ( Powell , JMM ) ;
9812: LD_EXP 16
9816: PPUSH
9817: LD_EXP 14
9821: PPUSH
9822: CALL_OW 119
// Say ( Powell , D1-Pow-7 ) ;
9826: LD_EXP 16
9830: PPUSH
9831: LD_STRING D1-Pow-7
9833: PPUSH
9834: CALL_OW 88
// ComTurnUnit ( JMM , Powell ) ;
9838: LD_EXP 14
9842: PPUSH
9843: LD_EXP 16
9847: PPUSH
9848: CALL_OW 119
// ComTurnUnit ( Roth , Powell ) ;
9852: LD_EXP 15
9856: PPUSH
9857: LD_EXP 16
9861: PPUSH
9862: CALL_OW 119
// Say ( JMM , D1-JMM-8 ) ;
9866: LD_EXP 14
9870: PPUSH
9871: LD_STRING D1-JMM-8
9873: PPUSH
9874: CALL_OW 88
// Say ( Powell , D1-Pow-8 ) ;
9878: LD_EXP 16
9882: PPUSH
9883: LD_STRING D1-Pow-8
9885: PPUSH
9886: CALL_OW 88
// Say ( JMM , D1-JMM-9 ) ;
9890: LD_EXP 14
9894: PPUSH
9895: LD_STRING D1-JMM-9
9897: PPUSH
9898: CALL_OW 88
// ComMoveXY ( Powell , 124 , 61 ) ;
9902: LD_EXP 16
9906: PPUSH
9907: LD_INT 124
9909: PPUSH
9910: LD_INT 61
9912: PPUSH
9913: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9917: LD_INT 35
9919: PPUSH
9920: CALL_OW 67
// until GetDistUnits ( JMM , Powell ) > 6 ;
9924: LD_EXP 14
9928: PPUSH
9929: LD_EXP 16
9933: PPUSH
9934: CALL_OW 296
9938: PUSH
9939: LD_INT 6
9941: GREATER
9942: IFFALSE 9917
// SayRadio ( Powell , D1-Pow-9 ) ;
9944: LD_EXP 16
9948: PPUSH
9949: LD_STRING D1-Pow-9
9951: PPUSH
9952: CALL_OW 94
// RemoveUnit ( Powell ) ;
9956: LD_EXP 16
9960: PPUSH
9961: CALL_OW 64
// PlaceHumanInUnit ( Powell , ambar0 ) ;
9965: LD_EXP 16
9969: PPUSH
9970: LD_INT 18
9972: PPUSH
9973: CALL_OW 52
// if Joan and not Joan in selected then
9977: LD_EXP 36
9981: PUSH
9982: LD_EXP 36
9986: PUSH
9987: LD_EXP 3
9991: IN
9992: NOT
9993: AND
9994: IFFALSE 10008
// SayRadio ( Joan , D1-Joan-9 ) ;
9996: LD_EXP 36
10000: PPUSH
10001: LD_STRING D1-Joan-9
10003: PPUSH
10004: CALL_OW 94
// ComTurnUnit ( Roth , JMM ) ;
10008: LD_EXP 15
10012: PPUSH
10013: LD_EXP 14
10017: PPUSH
10018: CALL_OW 119
// ComTurnUnit ( JMM , Roth ) ;
10022: LD_EXP 14
10026: PPUSH
10027: LD_EXP 15
10031: PPUSH
10032: CALL_OW 119
// Say ( Roth , D1-Roth-9 ) ;
10036: LD_EXP 15
10040: PPUSH
10041: LD_STRING D1-Roth-9
10043: PPUSH
10044: CALL_OW 88
// Say ( JMM , D1-JMM-10 ) ;
10048: LD_EXP 14
10052: PPUSH
10053: LD_STRING D1-JMM-10
10055: PPUSH
10056: CALL_OW 88
// InGameOff ;
10060: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
10064: LD_STRING M1
10066: PPUSH
10067: CALL_OW 337
// if Difficulty < 3 then
10071: LD_OWVAR 67
10075: PUSH
10076: LD_INT 3
10078: LESS
10079: IFFALSE 10091
// ChangeSideFog ( 4 , 7 ) ;
10081: LD_INT 4
10083: PPUSH
10084: LD_INT 7
10086: PPUSH
10087: CALL_OW 343
// SaveForQuickRestart ;
10091: CALL_OW 22
// SetAttitude ( 7 , 1 , att_enemy , true ) ;
10095: LD_INT 7
10097: PPUSH
10098: LD_INT 1
10100: PPUSH
10101: LD_INT 2
10103: PPUSH
10104: LD_INT 1
10106: PPUSH
10107: CALL_OW 80
// wait ( 0 0$3 ) ;
10111: LD_INT 105
10113: PPUSH
10114: CALL_OW 67
// ComMoveXY ( Roth , 124 , 18 ) ;
10118: LD_EXP 15
10122: PPUSH
10123: LD_INT 124
10125: PPUSH
10126: LD_INT 18
10128: PPUSH
10129: CALL_OW 111
// AddComInvisible ( Roth ) ;
10133: LD_EXP 15
10137: PPUSH
10138: CALL_OW 212
// wait ( 0 0$30 ) ;
10142: LD_INT 1050
10144: PPUSH
10145: CALL_OW 67
// AddComWait ( Roth , 1 1$00 ) ;
10149: LD_EXP 15
10153: PPUSH
10154: LD_INT 2100
10156: PPUSH
10157: CALL_OW 202
// AddComMoveXY ( Roth , 156 , 20 ) ;
10161: LD_EXP 15
10165: PPUSH
10166: LD_INT 156
10168: PPUSH
10169: LD_INT 20
10171: PPUSH
10172: CALL_OW 171
// AddComMoveXY ( Roth , 178 , 42 ) ;
10176: LD_EXP 15
10180: PPUSH
10181: LD_INT 178
10183: PPUSH
10184: LD_INT 42
10186: PPUSH
10187: CALL_OW 171
// AddComInvisible ( Roth ) ;
10191: LD_EXP 15
10195: PPUSH
10196: CALL_OW 212
// end ;
10200: LD_VAR 0 1
10204: RET
// every 0 0$1 do var i , tmp ;
10205: GO 10207
10207: DISABLE
10208: LD_INT 0
10210: PPUSH
10211: PPUSH
// begin tmp := selected union friends ;
10212: LD_ADDR_VAR 0 2
10216: PUSH
10217: LD_EXP 3
10221: PUSH
10222: LD_EXP 4
10226: UNION
10227: ST_TO_ADDR
// if not tmp then
10228: LD_VAR 0 2
10232: NOT
10233: IFFALSE 10237
// exit ;
10235: GO 10309
// repeat wait ( 0 0$1 ) ;
10237: LD_INT 35
10239: PPUSH
10240: CALL_OW 67
// for i in tmp do
10244: LD_ADDR_VAR 0 1
10248: PUSH
10249: LD_VAR 0 2
10253: PUSH
10254: FOR_IN
10255: IFFALSE 10300
// if CanSpot ( JMM , i ) then
10257: LD_EXP 14
10261: PPUSH
10262: LD_VAR 0 1
10266: PPUSH
10267: CALL 8968 0 2
10271: IFFALSE 10298
// begin tmp := tmp diff i ;
10273: LD_ADDR_VAR 0 2
10277: PUSH
10278: LD_VAR 0 2
10282: PUSH
10283: LD_VAR 0 1
10287: DIFF
10288: ST_TO_ADDR
// Spot ( i ) ;
10289: LD_VAR 0 1
10293: PPUSH
10294: CALL 10312 0 1
// end ;
10298: GO 10254
10300: POP
10301: POP
// until not tmp ;
10302: LD_VAR 0 2
10306: NOT
10307: IFFALSE 10237
// end ;
10309: PPOPN 2
10311: END
// export function Spot ( unit ) ; var building , side , joined ; begin
10312: LD_INT 0
10314: PPUSH
10315: PPUSH
10316: PPUSH
10317: PPUSH
// if not unit or GetSide ( unit ) <> 4 or IsSleeping ( unit ) or not IsOk ( unit ) then
10318: LD_VAR 0 1
10322: NOT
10323: PUSH
10324: LD_VAR 0 1
10328: PPUSH
10329: CALL_OW 255
10333: PUSH
10334: LD_INT 4
10336: NONEQUAL
10337: OR
10338: PUSH
10339: LD_VAR 0 1
10343: PPUSH
10344: CALL_OW 555
10348: OR
10349: PUSH
10350: LD_VAR 0 1
10354: PPUSH
10355: CALL_OW 302
10359: NOT
10360: OR
10361: IFFALSE 10365
// exit ;
10363: GO 12254
// InGameOn ;
10365: CALL_OW 8
// side := GetSide ( JMM ) ;
10369: LD_ADDR_VAR 0 4
10373: PUSH
10374: LD_EXP 14
10378: PPUSH
10379: CALL_OW 255
10383: ST_TO_ADDR
// joined := false ;
10384: LD_ADDR_VAR 0 5
10388: PUSH
10389: LD_INT 0
10391: ST_TO_ADDR
// building := IsInUnit ( unit ) ;
10392: LD_ADDR_VAR 0 3
10396: PUSH
10397: LD_VAR 0 1
10401: PPUSH
10402: CALL_OW 310
10406: ST_TO_ADDR
// if building then
10407: LD_VAR 0 3
10411: IFFALSE 10470
// begin SetSide ( JMM , GetSide ( unit ) ) ;
10413: LD_EXP 14
10417: PPUSH
10418: LD_VAR 0 1
10422: PPUSH
10423: CALL_OW 255
10427: PPUSH
10428: CALL_OW 235
// ComEnterUnit ( JMM , building ) ;
10432: LD_EXP 14
10436: PPUSH
10437: LD_VAR 0 3
10441: PPUSH
10442: CALL_OW 120
// repeat wait ( 3 ) ;
10446: LD_INT 3
10448: PPUSH
10449: CALL_OW 67
// until IsInUnit ( JMM ) ;
10453: LD_EXP 14
10457: PPUSH
10458: CALL_OW 310
10462: IFFALSE 10446
// DialogueOn ;
10464: CALL_OW 6
// end else
10468: GO 10502
// begin ComTurnUnit ( JMM , unit ) ;
10470: LD_EXP 14
10474: PPUSH
10475: LD_VAR 0 1
10479: PPUSH
10480: CALL_OW 119
// ComTurnUnit ( unit , JMM ) ;
10484: LD_VAR 0 1
10488: PPUSH
10489: LD_EXP 14
10493: PPUSH
10494: CALL_OW 119
// DialogueOn ;
10498: CALL_OW 6
// end ; if unit = Joan then
10502: LD_VAR 0 1
10506: PUSH
10507: LD_EXP 36
10511: EQUAL
10512: IFFALSE 10622
// begin joined := true ;
10514: LD_ADDR_VAR 0 5
10518: PUSH
10519: LD_INT 1
10521: ST_TO_ADDR
// if Joan in selected then
10522: LD_EXP 36
10526: PUSH
10527: LD_EXP 3
10531: IN
10532: IFFALSE 10560
// begin Say ( Joan , D3-Joan-Joan-1 ) ;
10534: LD_EXP 36
10538: PPUSH
10539: LD_STRING D3-Joan-Joan-1
10541: PPUSH
10542: CALL_OW 88
// Say ( JMM , D3-Joan-JMM-1 ) ;
10546: LD_EXP 14
10550: PPUSH
10551: LD_STRING D3-Joan-JMM-1
10553: PPUSH
10554: CALL_OW 88
// end else
10558: GO 10620
// begin Say ( Joan , D4-Joan-Joan-1 ) ;
10560: LD_EXP 36
10564: PPUSH
10565: LD_STRING D4-Joan-Joan-1
10567: PPUSH
10568: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-1 ) ;
10572: LD_EXP 14
10576: PPUSH
10577: LD_STRING D4-Joan-JMM-1
10579: PPUSH
10580: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-2 ) ;
10584: LD_EXP 36
10588: PPUSH
10589: LD_STRING D4-Joan-Joan-2
10591: PPUSH
10592: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-2 ) ;
10596: LD_EXP 14
10600: PPUSH
10601: LD_STRING D4-Joan-JMM-2
10603: PPUSH
10604: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-3 ) ;
10608: LD_EXP 36
10612: PPUSH
10613: LD_STRING D4-Joan-Joan-3
10615: PPUSH
10616: CALL_OW 88
// end ; end else
10620: GO 12062
// if unit = Lisa then
10622: LD_VAR 0 1
10626: PUSH
10627: LD_EXP 23
10631: EQUAL
10632: IFFALSE 10824
// begin if Lisa in selected then
10634: LD_EXP 23
10638: PUSH
10639: LD_EXP 3
10643: IN
10644: IFFALSE 10757
// begin if GetSide ( Joan ) = 7 then
10646: LD_EXP 36
10650: PPUSH
10651: CALL_OW 255
10655: PUSH
10656: LD_INT 7
10658: EQUAL
10659: IFFALSE 10723
// begin Say ( Lisa , D3-LisaJ-Lisa-1 ) ;
10661: LD_EXP 23
10665: PPUSH
10666: LD_STRING D3-LisaJ-Lisa-1
10668: PPUSH
10669: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-1 ) ;
10673: LD_EXP 14
10677: PPUSH
10678: LD_STRING D3-LisaJ-JMM-1
10680: PPUSH
10681: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-2 ) ;
10685: LD_EXP 23
10689: PPUSH
10690: LD_STRING D3-LisaJ-Lisa-2
10692: PPUSH
10693: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-2 ) ;
10697: LD_EXP 14
10701: PPUSH
10702: LD_STRING D3-LisaJ-JMM-2
10704: PPUSH
10705: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-3 ) ;
10709: LD_EXP 23
10713: PPUSH
10714: LD_STRING D3-LisaJ-Lisa-3
10716: PPUSH
10717: CALL_OW 88
// end else
10721: GO 10755
// begin Say ( Lisa , D3-LisaL-Lisa-1 ) ;
10723: LD_EXP 23
10727: PPUSH
10728: LD_STRING D3-LisaL-Lisa-1
10730: PPUSH
10731: CALL_OW 88
// Say ( JMM , D3-LisaL-JMM-1 ) ;
10735: LD_EXP 14
10739: PPUSH
10740: LD_STRING D3-LisaL-JMM-1
10742: PPUSH
10743: CALL_OW 88
// joined := true ;
10747: LD_ADDR_VAR 0 5
10751: PUSH
10752: LD_INT 1
10754: ST_TO_ADDR
// end ; end else
10755: GO 10822
// begin if GetSide ( Joan ) = 7 then
10757: LD_EXP 36
10761: PPUSH
10762: CALL_OW 255
10766: PUSH
10767: LD_INT 7
10769: EQUAL
10770: IFFALSE 10810
// begin Say ( Lisa , D4-LisaJ-Lisa-1 ) ;
10772: LD_EXP 23
10776: PPUSH
10777: LD_STRING D4-LisaJ-Lisa-1
10779: PPUSH
10780: CALL_OW 88
// Say ( JMM , D4-LisaJ-JMM-1 ) ;
10784: LD_EXP 14
10788: PPUSH
10789: LD_STRING D4-LisaJ-JMM-1
10791: PPUSH
10792: CALL_OW 88
// Say ( Lisa , D4-LisaJ-Lisa-2 ) ;
10796: LD_EXP 23
10800: PPUSH
10801: LD_STRING D4-LisaJ-Lisa-2
10803: PPUSH
10804: CALL_OW 88
// end else
10808: GO 10822
// begin Say ( Lisa , D4-LisaL-Lisa-1 ) ;
10810: LD_EXP 23
10814: PPUSH
10815: LD_STRING D4-LisaL-Lisa-1
10817: PPUSH
10818: CALL_OW 88
// end ; end ; end else
10822: GO 12062
// if unit = Frank then
10824: LD_VAR 0 1
10828: PUSH
10829: LD_EXP 33
10833: EQUAL
10834: IFFALSE 10974
// begin joined := true ;
10836: LD_ADDR_VAR 0 5
10840: PUSH
10841: LD_INT 1
10843: ST_TO_ADDR
// if Frank in selected then
10844: LD_EXP 33
10848: PUSH
10849: LD_EXP 3
10853: IN
10854: IFFALSE 10924
// begin Say ( Frank , D3-Frank-Frank-1 ) ;
10856: LD_EXP 33
10860: PPUSH
10861: LD_STRING D3-Frank-Frank-1
10863: PPUSH
10864: CALL_OW 88
// Say ( JMM , D3-Frank-JMM-1 ) ;
10868: LD_EXP 14
10872: PPUSH
10873: LD_STRING D3-Frank-JMM-1
10875: PPUSH
10876: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-2 ) ;
10880: LD_EXP 33
10884: PPUSH
10885: LD_STRING D3-Frank-Frank-2
10887: PPUSH
10888: CALL_OW 88
// if reached_lab then
10892: LD_EXP 5
10896: IFFALSE 10922
// begin Say ( JMM , D3-Frank-JMM-2 ) ;
10898: LD_EXP 14
10902: PPUSH
10903: LD_STRING D3-Frank-JMM-2
10905: PPUSH
10906: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-3 ) ;
10910: LD_EXP 33
10914: PPUSH
10915: LD_STRING D3-Frank-Frank-3
10917: PPUSH
10918: CALL_OW 88
// end ; end else
10922: GO 10972
// begin Say ( Frank , D4-Frank-Frank-1 ) ;
10924: LD_EXP 33
10928: PPUSH
10929: LD_STRING D4-Frank-Frank-1
10931: PPUSH
10932: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-1 ) ;
10936: LD_EXP 14
10940: PPUSH
10941: LD_STRING D4-Frank-JMM-1
10943: PPUSH
10944: CALL_OW 88
// Say ( Frank , D4-Frank-Frank-2 ) ;
10948: LD_EXP 33
10952: PPUSH
10953: LD_STRING D4-Frank-Frank-2
10955: PPUSH
10956: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-2 ) ;
10960: LD_EXP 14
10964: PPUSH
10965: LD_STRING D4-Frank-JMM-2
10967: PPUSH
10968: CALL_OW 88
// end ; end else
10972: GO 12062
// if unit = Brown then
10974: LD_VAR 0 1
10978: PUSH
10979: LD_EXP 28
10983: EQUAL
10984: IFFALSE 11080
// begin if Brown in selected or gamma_commander = 2 then
10986: LD_EXP 28
10990: PUSH
10991: LD_EXP 3
10995: IN
10996: PUSH
10997: LD_EXP 10
11001: PUSH
11002: LD_INT 2
11004: EQUAL
11005: OR
11006: IFFALSE 11042
// begin Say ( Brown , D3-Soldier1-Sol1-1 ) ;
11008: LD_EXP 28
11012: PPUSH
11013: LD_STRING D3-Soldier1-Sol1-1
11015: PPUSH
11016: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
11020: LD_EXP 14
11024: PPUSH
11025: LD_STRING D3-Soldier1-JMM-1
11027: PPUSH
11028: CALL_OW 88
// joined := true ;
11032: LD_ADDR_VAR 0 5
11036: PUSH
11037: LD_INT 1
11039: ST_TO_ADDR
// end else
11040: GO 11078
// begin Say ( Brown , D4-Soldier2-Sol1-1 ) ;
11042: LD_EXP 28
11046: PPUSH
11047: LD_STRING D4-Soldier2-Sol1-1
11049: PPUSH
11050: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11054: LD_EXP 14
11058: PPUSH
11059: LD_STRING D4-Soldier1-JMM-1
11061: PPUSH
11062: CALL_OW 88
// Say ( Brown , D4-Soldier2-Sol1-2 ) ;
11066: LD_EXP 28
11070: PPUSH
11071: LD_STRING D4-Soldier2-Sol1-2
11073: PPUSH
11074: CALL_OW 88
// end ; end else
11078: GO 12062
// if unit = Donaldson then
11080: LD_VAR 0 1
11084: PUSH
11085: LD_EXP 24
11089: EQUAL
11090: IFFALSE 11186
// begin if Donaldson in selected or gamma_commander = 1 then
11092: LD_EXP 24
11096: PUSH
11097: LD_EXP 3
11101: IN
11102: PUSH
11103: LD_EXP 10
11107: PUSH
11108: LD_INT 1
11110: EQUAL
11111: OR
11112: IFFALSE 11148
// begin Say ( Donaldson , D3-Soldier2-FSol2-1 ) ;
11114: LD_EXP 24
11118: PPUSH
11119: LD_STRING D3-Soldier2-FSol2-1
11121: PPUSH
11122: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11126: LD_EXP 14
11130: PPUSH
11131: LD_STRING D3-Soldier2-JMM-1
11133: PPUSH
11134: CALL_OW 88
// joined := true ;
11138: LD_ADDR_VAR 0 5
11142: PUSH
11143: LD_INT 1
11145: ST_TO_ADDR
// end else
11146: GO 11184
// begin Say ( unit , D4-Soldier1-FSol1-1 ) ;
11148: LD_VAR 0 1
11152: PPUSH
11153: LD_STRING D4-Soldier1-FSol1-1
11155: PPUSH
11156: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11160: LD_EXP 14
11164: PPUSH
11165: LD_STRING D4-Soldier1-JMM-1
11167: PPUSH
11168: CALL_OW 88
// Say ( unit , D4-Soldier1-FSol1-2 ) ;
11172: LD_VAR 0 1
11176: PPUSH
11177: LD_STRING D4-Soldier1-FSol1-2
11179: PPUSH
11180: CALL_OW 88
// end ; end else
11184: GO 12062
// if unit = Cyrus then
11186: LD_VAR 0 1
11190: PUSH
11191: LD_EXP 26
11195: EQUAL
11196: IFFALSE 11270
// begin if Cyrus in selected then
11198: LD_EXP 26
11202: PUSH
11203: LD_EXP 3
11207: IN
11208: IFFALSE 11244
// begin Say ( Cyrus , D3-Cyrus-Cyrus-1 ) ;
11210: LD_EXP 26
11214: PPUSH
11215: LD_STRING D3-Cyrus-Cyrus-1
11217: PPUSH
11218: CALL_OW 88
// Say ( JMM , D3-Cyrus-JMM-1 ) ;
11222: LD_EXP 14
11226: PPUSH
11227: LD_STRING D3-Cyrus-JMM-1
11229: PPUSH
11230: CALL_OW 88
// joined := true ;
11234: LD_ADDR_VAR 0 5
11238: PUSH
11239: LD_INT 1
11241: ST_TO_ADDR
// end else
11242: GO 11268
// begin Say ( Cyrus , D4-Cyrus-Cyrus-1 ) ;
11244: LD_EXP 26
11248: PPUSH
11249: LD_STRING D4-Cyrus-Cyrus-1
11251: PPUSH
11252: CALL_OW 88
// Say ( JMM , D4-Cyrus-JMM-1 ) ;
11256: LD_EXP 14
11260: PPUSH
11261: LD_STRING D4-Cyrus-JMM-1
11263: PPUSH
11264: CALL_OW 88
// end ; end else
11268: GO 12062
// if unit = Bobby then
11270: LD_VAR 0 1
11274: PUSH
11275: LD_EXP 25
11279: EQUAL
11280: IFFALSE 11366
// begin if Bobby in selected then
11282: LD_EXP 25
11286: PUSH
11287: LD_EXP 3
11291: IN
11292: IFFALSE 11328
// begin Say ( Bobby , D3-Bobby-Bobby-1 ) ;
11294: LD_EXP 25
11298: PPUSH
11299: LD_STRING D3-Bobby-Bobby-1
11301: PPUSH
11302: CALL_OW 88
// Say ( JMM , D3-Bobby-JMM-1 ) ;
11306: LD_EXP 14
11310: PPUSH
11311: LD_STRING D3-Bobby-JMM-1
11313: PPUSH
11314: CALL_OW 88
// joined := true ;
11318: LD_ADDR_VAR 0 5
11322: PUSH
11323: LD_INT 1
11325: ST_TO_ADDR
// end else
11326: GO 11364
// begin Say ( Bobby , D4-Bobby-Bobby-1 ) ;
11328: LD_EXP 25
11332: PPUSH
11333: LD_STRING D4-Bobby-Bobby-1
11335: PPUSH
11336: CALL_OW 88
// Say ( JMM , D4-Bobby-JMM-1 ) ;
11340: LD_EXP 14
11344: PPUSH
11345: LD_STRING D4-Bobby-JMM-1
11347: PPUSH
11348: CALL_OW 88
// Say ( Bobby , D4-Bobby-Bobby-2 ) ;
11352: LD_EXP 25
11356: PPUSH
11357: LD_STRING D4-Bobby-Bobby-2
11359: PPUSH
11360: CALL_OW 88
// end ; end else
11364: GO 12062
// if unit = Cornel then
11366: LD_VAR 0 1
11370: PUSH
11371: LD_EXP 31
11375: EQUAL
11376: IFFALSE 11474
// begin if Cornel in selected then
11378: LD_EXP 31
11382: PUSH
11383: LD_EXP 3
11387: IN
11388: IFFALSE 11436
// begin Say ( Cornel , D3-Mark-Corn-1 ) ;
11390: LD_EXP 31
11394: PPUSH
11395: LD_STRING D3-Mark-Corn-1
11397: PPUSH
11398: CALL_OW 88
// Say ( JMM , D3-Mark-JMM-1 ) ;
11402: LD_EXP 14
11406: PPUSH
11407: LD_STRING D3-Mark-JMM-1
11409: PPUSH
11410: CALL_OW 88
// Say ( Cornel , D3-Mark-Corn-2 ) ;
11414: LD_EXP 31
11418: PPUSH
11419: LD_STRING D3-Mark-Corn-2
11421: PPUSH
11422: CALL_OW 88
// joined := true ;
11426: LD_ADDR_VAR 0 5
11430: PUSH
11431: LD_INT 1
11433: ST_TO_ADDR
// end else
11434: GO 11472
// begin Say ( Cornel , D4-Mark-Corn-1 ) ;
11436: LD_EXP 31
11440: PPUSH
11441: LD_STRING D4-Mark-Corn-1
11443: PPUSH
11444: CALL_OW 88
// Say ( JMM , D3-Joan-JMM-1 ) ;
11448: LD_EXP 14
11452: PPUSH
11453: LD_STRING D3-Joan-JMM-1
11455: PPUSH
11456: CALL_OW 88
// Say ( Cornel , D4-Mark-Corn-2 ) ;
11460: LD_EXP 31
11464: PPUSH
11465: LD_STRING D4-Mark-Corn-2
11467: PPUSH
11468: CALL_OW 88
// end ; end else
11472: GO 12062
// if unit = Gary then
11474: LD_VAR 0 1
11478: PUSH
11479: LD_EXP 32
11483: EQUAL
11484: IFFALSE 11568
// begin if Gary in selected then
11486: LD_EXP 32
11490: PUSH
11491: LD_EXP 3
11495: IN
11496: IFFALSE 11532
// begin Say ( Gary , D3-Gary-Gary-1 ) ;
11498: LD_EXP 32
11502: PPUSH
11503: LD_STRING D3-Gary-Gary-1
11505: PPUSH
11506: CALL_OW 88
// Say ( JMM , D3-Gary-JMM-1 ) ;
11510: LD_EXP 14
11514: PPUSH
11515: LD_STRING D3-Gary-JMM-1
11517: PPUSH
11518: CALL_OW 88
// joined := true ;
11522: LD_ADDR_VAR 0 5
11526: PUSH
11527: LD_INT 1
11529: ST_TO_ADDR
// end else
11530: GO 11566
// begin Say ( Gary , D4-Gary-Gary-1 ) ;
11532: LD_EXP 32
11536: PPUSH
11537: LD_STRING D4-Gary-Gary-1
11539: PPUSH
11540: CALL_OW 88
// SetSide ( Gary , 1 ) ;
11544: LD_EXP 32
11548: PPUSH
11549: LD_INT 1
11551: PPUSH
11552: CALL_OW 235
// DialogueOff ;
11556: CALL_OW 7
// InGameOff ;
11560: CALL_OW 9
// exit ;
11564: GO 12254
// end ; end else
11566: GO 12062
// if unit = Kikuchi then
11568: LD_VAR 0 1
11572: PUSH
11573: LD_EXP 34
11577: EQUAL
11578: IFFALSE 11662
// begin if Kikuchi in selected then
11580: LD_EXP 34
11584: PUSH
11585: LD_EXP 3
11589: IN
11590: IFFALSE 11626
// begin Say ( Kikuchi , D3-Yamako-Yam-1 ) ;
11592: LD_EXP 34
11596: PPUSH
11597: LD_STRING D3-Yamako-Yam-1
11599: PPUSH
11600: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11604: LD_EXP 14
11608: PPUSH
11609: LD_STRING D3-Soldier2-JMM-1
11611: PPUSH
11612: CALL_OW 88
// joined := true ;
11616: LD_ADDR_VAR 0 5
11620: PUSH
11621: LD_INT 1
11623: ST_TO_ADDR
// end else
11624: GO 11660
// begin Say ( Kikuchi , D4-Yamako-Yam-1 ) ;
11626: LD_EXP 34
11630: PPUSH
11631: LD_STRING D4-Yamako-Yam-1
11633: PPUSH
11634: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
11638: LD_EXP 34
11642: PPUSH
11643: LD_INT 1
11645: PPUSH
11646: CALL_OW 235
// DialogueOff ;
11650: CALL_OW 7
// InGameOff ;
11654: CALL_OW 9
// exit ;
11658: GO 12254
// end ; end else
11660: GO 12062
// if unit = Gladstone then
11662: LD_VAR 0 1
11666: PUSH
11667: LD_EXP 29
11671: EQUAL
11672: IFFALSE 11746
// begin if Gladstone in selected then
11674: LD_EXP 29
11678: PUSH
11679: LD_EXP 3
11683: IN
11684: IFFALSE 11720
// begin joined := true ;
11686: LD_ADDR_VAR 0 5
11690: PUSH
11691: LD_INT 1
11693: ST_TO_ADDR
// Say ( JMM , D3-Tim-JMM-1 ) ;
11694: LD_EXP 14
11698: PPUSH
11699: LD_STRING D3-Tim-JMM-1
11701: PPUSH
11702: CALL_OW 88
// Say ( Gladstone , D3-Tim-Glad-1 ) ;
11706: LD_EXP 29
11710: PPUSH
11711: LD_STRING D3-Tim-Glad-1
11713: PPUSH
11714: CALL_OW 88
// end else
11718: GO 11744
// begin Say ( JMM , D4-Tim-JMM-1 ) ;
11720: LD_EXP 14
11724: PPUSH
11725: LD_STRING D4-Tim-JMM-1
11727: PPUSH
11728: CALL_OW 88
// Say ( Gladstone , D4-Tim-Glad-1 ) ;
11732: LD_EXP 29
11736: PPUSH
11737: LD_STRING D4-Tim-Glad-1
11739: PPUSH
11740: CALL_OW 88
// end ; end else
11744: GO 12062
// if unit = Denis then
11746: LD_VAR 0 1
11750: PUSH
11751: LD_EXP 27
11755: EQUAL
11756: IFFALSE 11792
// begin joined := true ;
11758: LD_ADDR_VAR 0 5
11762: PUSH
11763: LD_INT 1
11765: ST_TO_ADDR
// Say ( Denis , D3-Denis-Den-1 ) ;
11766: LD_EXP 27
11770: PPUSH
11771: LD_STRING D3-Denis-Den-1
11773: PPUSH
11774: CALL_OW 88
// Say ( JMM , D3-Denis-JMM-1 ) ;
11778: LD_EXP 14
11782: PPUSH
11783: LD_STRING D3-Denis-JMM-1
11785: PPUSH
11786: CALL_OW 88
// end else
11790: GO 12062
// if unit = Simms then
11792: LD_VAR 0 1
11796: PUSH
11797: LD_EXP 35
11801: EQUAL
11802: IFFALSE 11838
// begin joined := true ;
11804: LD_ADDR_VAR 0 5
11808: PUSH
11809: LD_INT 1
11811: ST_TO_ADDR
// Say ( Simms , D3-Simms-Sim-1 ) ;
11812: LD_EXP 35
11816: PPUSH
11817: LD_STRING D3-Simms-Sim-1
11819: PPUSH
11820: CALL_OW 88
// Say ( JMM , D3-Simms-JMM-1 ) ;
11824: LD_EXP 14
11828: PPUSH
11829: LD_STRING D3-Simms-JMM-1
11831: PPUSH
11832: CALL_OW 88
// end else
11836: GO 12062
// if unit = DeltaDoctor then
11838: LD_VAR 0 1
11842: PUSH
11843: LD_EXP 37
11847: EQUAL
11848: IFFALSE 11884
// begin joined := true ;
11850: LD_ADDR_VAR 0 5
11854: PUSH
11855: LD_INT 1
11857: ST_TO_ADDR
// Say ( DeltaDoctor , D3-Soldier1-Sol1-1 ) ;
11858: LD_EXP 37
11862: PPUSH
11863: LD_STRING D3-Soldier1-Sol1-1
11865: PPUSH
11866: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
11870: LD_EXP 14
11874: PPUSH
11875: LD_STRING D3-Soldier1-JMM-1
11877: PPUSH
11878: CALL_OW 88
// end else
11882: GO 12062
// begin joined := unit in selected ;
11884: LD_ADDR_VAR 0 5
11888: PUSH
11889: LD_VAR 0 1
11893: PUSH
11894: LD_EXP 3
11898: IN
11899: ST_TO_ADDR
// if joined then
11900: LD_VAR 0 5
11904: IFFALSE 11973
// begin if GetSex ( unit ) = sex_male then
11906: LD_VAR 0 1
11910: PPUSH
11911: CALL_OW 258
11915: PUSH
11916: LD_INT 1
11918: EQUAL
11919: IFFALSE 11947
// begin Say ( unit , D3-Soldier1-Sol1-1 ) ;
11921: LD_VAR 0 1
11925: PPUSH
11926: LD_STRING D3-Soldier1-Sol1-1
11928: PPUSH
11929: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
11933: LD_EXP 14
11937: PPUSH
11938: LD_STRING D3-Soldier1-JMM-1
11940: PPUSH
11941: CALL_OW 88
// end else
11945: GO 11971
// begin Say ( unit , D3-Soldier2-FSol2-1 ) ;
11947: LD_VAR 0 1
11951: PPUSH
11952: LD_STRING D3-Soldier2-FSol2-1
11954: PPUSH
11955: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11959: LD_EXP 14
11963: PPUSH
11964: LD_STRING D3-Soldier2-JMM-1
11966: PPUSH
11967: CALL_OW 88
// end ; end else
11971: GO 12062
// begin if GetSex ( unit ) = sex_male then
11973: LD_VAR 0 1
11977: PPUSH
11978: CALL_OW 258
11982: PUSH
11983: LD_INT 1
11985: EQUAL
11986: IFFALSE 12026
// begin Say ( unit , D4-Soldier2-Sol1-1 ) ;
11988: LD_VAR 0 1
11992: PPUSH
11993: LD_STRING D4-Soldier2-Sol1-1
11995: PPUSH
11996: CALL_OW 88
// Say ( JMM , D4-Soldier2-JMM-1 ) ;
12000: LD_EXP 14
12004: PPUSH
12005: LD_STRING D4-Soldier2-JMM-1
12007: PPUSH
12008: CALL_OW 88
// Say ( unit , D4-Soldier2-Sol2-1 ) ;
12012: LD_VAR 0 1
12016: PPUSH
12017: LD_STRING D4-Soldier2-Sol2-1
12019: PPUSH
12020: CALL_OW 88
// end else
12024: GO 12062
// begin Say ( unit , D4-Soldier1-FSol1-1 ) ;
12026: LD_VAR 0 1
12030: PPUSH
12031: LD_STRING D4-Soldier1-FSol1-1
12033: PPUSH
12034: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
12038: LD_EXP 14
12042: PPUSH
12043: LD_STRING D4-Soldier1-JMM-1
12045: PPUSH
12046: CALL_OW 88
// Say ( unit , D4-Soldier1-FSol1-2 ) ;
12050: LD_VAR 0 1
12054: PPUSH
12055: LD_STRING D4-Soldier1-FSol1-2
12057: PPUSH
12058: CALL_OW 88
// end ; end ; end ; DialogueOff ;
12062: CALL_OW 7
// InGameOff ;
12066: CALL_OW 9
// if building then
12070: LD_VAR 0 3
12074: IFFALSE 12175
// begin SetSide ( JMM , side ) ;
12076: LD_EXP 14
12080: PPUSH
12081: LD_VAR 0 4
12085: PPUSH
12086: CALL_OW 235
// ComExitBuilding ( JMM ) ;
12090: LD_EXP 14
12094: PPUSH
12095: CALL_OW 122
// if joined then
12099: LD_VAR 0 5
12103: IFFALSE 12142
// begin SetSide ( unit , side ) ;
12105: LD_VAR 0 1
12109: PPUSH
12110: LD_VAR 0 4
12114: PPUSH
12115: CALL_OW 235
// SetSide ( building , 1 ) ;
12119: LD_VAR 0 3
12123: PPUSH
12124: LD_INT 1
12126: PPUSH
12127: CALL_OW 235
// ComExitBuilding ( unit ) ;
12131: LD_VAR 0 1
12135: PPUSH
12136: CALL_OW 122
// end else
12140: GO 12173
// begin wait ( 0 0$10 ) ;
12142: LD_INT 350
12144: PPUSH
12145: CALL_OW 67
// SetSide ( unit , 1 ) ;
12149: LD_VAR 0 1
12153: PPUSH
12154: LD_INT 1
12156: PPUSH
12157: CALL_OW 235
// SetSide ( building , 1 ) ;
12161: LD_VAR 0 3
12165: PPUSH
12166: LD_INT 1
12168: PPUSH
12169: CALL_OW 235
// end ; end else
12173: GO 12254
// begin ComStop ( [ JMM , unit ] ) ;
12175: LD_EXP 14
12179: PUSH
12180: LD_VAR 0 1
12184: PUSH
12185: EMPTY
12186: LIST
12187: LIST
12188: PPUSH
12189: CALL_OW 141
// if joined then
12193: LD_VAR 0 5
12197: IFFALSE 12215
// SetSide ( unit , side ) else
12199: LD_VAR 0 1
12203: PPUSH
12204: LD_VAR 0 4
12208: PPUSH
12209: CALL_OW 235
12213: GO 12254
// begin repeat wait ( 0 0$1 ) ;
12215: LD_INT 35
12217: PPUSH
12218: CALL_OW 67
// until GetDistUnits ( JMM , unit ) > 11 ;
12222: LD_EXP 14
12226: PPUSH
12227: LD_VAR 0 1
12231: PPUSH
12232: CALL_OW 296
12236: PUSH
12237: LD_INT 11
12239: GREATER
12240: IFFALSE 12215
// SetSide ( unit , 1 ) ;
12242: LD_VAR 0 1
12246: PPUSH
12247: LD_INT 1
12249: PPUSH
12250: CALL_OW 235
// end ; end ; end ;
12254: LD_VAR 0 2
12258: RET
// every 0 0$01 trigger IsInUnit ( JMM ) = amlab do
12259: LD_EXP 14
12263: PPUSH
12264: CALL_OW 310
12268: PUSH
12269: LD_INT 47
12271: EQUAL
12272: IFFALSE 12340
12274: GO 12276
12276: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
12277: LD_STRING M1a
12279: PPUSH
12280: CALL_OW 337
// SetTech ( tech_Soporific , 7 , state_researched ) ;
12284: LD_INT 13
12286: PPUSH
12287: LD_INT 7
12289: PPUSH
12290: LD_INT 2
12292: PPUSH
12293: CALL_OW 322
// SetTech ( tech_SpacAnom , 7 , state_researched ) ;
12297: LD_INT 29
12299: PPUSH
12300: LD_INT 7
12302: PPUSH
12303: LD_INT 2
12305: PPUSH
12306: CALL_OW 322
// SetClass ( JMM , class_bazooker ) ;
12310: LD_EXP 14
12314: PPUSH
12315: LD_INT 9
12317: PPUSH
12318: CALL_OW 336
// can_escape := true ;
12322: LD_ADDR_EXP 6
12326: PUSH
12327: LD_INT 1
12329: ST_TO_ADDR
// SetAreaMapShow ( escape_area , 1 ) ;
12330: LD_INT 19
12332: PPUSH
12333: LD_INT 1
12335: PPUSH
12336: CALL_OW 424
// end ;
12340: END
// every 0 0$1 trigger GetLives ( Powell ) < 999 do
12341: LD_EXP 16
12345: PPUSH
12346: CALL_OW 256
12350: PUSH
12351: LD_INT 999
12353: LESS
12354: IFFALSE 12405
12356: GO 12358
12358: DISABLE
// begin enable ;
12359: ENABLE
// if HexInfo ( 25 , 48 ) = Powell then
12360: LD_INT 25
12362: PPUSH
12363: LD_INT 48
12365: PPUSH
12366: CALL_OW 428
12370: PUSH
12371: LD_EXP 16
12375: EQUAL
12376: IFFALSE 12390
// begin RemoveUnit ( Powell ) ;
12378: LD_EXP 16
12382: PPUSH
12383: CALL_OW 64
// disable ;
12387: DISABLE
// end else
12388: GO 12405
// ComMoveXY ( Powell , 25 , 48 ) ;
12390: LD_EXP 16
12394: PPUSH
12395: LD_INT 25
12397: PPUSH
12398: LD_INT 48
12400: PPUSH
12401: CALL_OW 111
// end ;
12405: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do var i ;
12406: LD_INT 22
12408: PUSH
12409: LD_INT 4
12411: PUSH
12412: EMPTY
12413: LIST
12414: LIST
12415: PUSH
12416: LD_INT 21
12418: PUSH
12419: LD_INT 1
12421: PUSH
12422: EMPTY
12423: LIST
12424: LIST
12425: PUSH
12426: LD_INT 3
12428: PUSH
12429: LD_INT 24
12431: PUSH
12432: LD_INT 990
12434: PUSH
12435: EMPTY
12436: LIST
12437: LIST
12438: PUSH
12439: EMPTY
12440: LIST
12441: LIST
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: LIST
12447: PPUSH
12448: CALL_OW 69
12452: PUSH
12453: LD_EXP 15
12457: DIFF
12458: IFFALSE 12602
12460: GO 12462
12462: DISABLE
12463: LD_INT 0
12465: PPUSH
// begin enable ;
12466: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do
12467: LD_ADDR_VAR 0 1
12471: PUSH
12472: LD_INT 22
12474: PUSH
12475: LD_INT 4
12477: PUSH
12478: EMPTY
12479: LIST
12480: LIST
12481: PUSH
12482: LD_INT 21
12484: PUSH
12485: LD_INT 1
12487: PUSH
12488: EMPTY
12489: LIST
12490: LIST
12491: PUSH
12492: LD_INT 3
12494: PUSH
12495: LD_INT 24
12497: PUSH
12498: LD_INT 990
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: PUSH
12505: EMPTY
12506: LIST
12507: LIST
12508: PUSH
12509: EMPTY
12510: LIST
12511: LIST
12512: LIST
12513: PPUSH
12514: CALL_OW 69
12518: PUSH
12519: LD_EXP 15
12523: DIFF
12524: PUSH
12525: FOR_IN
12526: IFFALSE 12600
// begin ComFree ( i ) ;
12528: LD_VAR 0 1
12532: PPUSH
12533: CALL_OW 139
// SetSide ( i , 1 ) ;
12537: LD_VAR 0 1
12541: PPUSH
12542: LD_INT 1
12544: PPUSH
12545: CALL_OW 235
// if GetDistUnits ( i , JMM ) < 14 then
12549: LD_VAR 0 1
12553: PPUSH
12554: LD_EXP 14
12558: PPUSH
12559: CALL_OW 296
12563: PUSH
12564: LD_INT 14
12566: LESS
12567: IFFALSE 12598
// ComAgressiveMove ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
12569: LD_VAR 0 1
12573: PPUSH
12574: LD_EXP 14
12578: PPUSH
12579: CALL_OW 250
12583: PPUSH
12584: LD_EXP 14
12588: PPUSH
12589: CALL_OW 251
12593: PPUSH
12594: CALL_OW 114
// end ;
12598: GO 12525
12600: POP
12601: POP
// end ;
12602: PPOPN 1
12604: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var i ;
12605: LD_INT 22
12607: PUSH
12608: LD_INT 4
12610: PUSH
12611: EMPTY
12612: LIST
12613: LIST
12614: PUSH
12615: LD_INT 34
12617: PUSH
12618: LD_INT 12
12620: PUSH
12621: EMPTY
12622: LIST
12623: LIST
12624: PUSH
12625: EMPTY
12626: LIST
12627: LIST
12628: PPUSH
12629: CALL_OW 69
12633: IFFALSE 12715
12635: GO 12637
12637: DISABLE
12638: LD_INT 0
12640: PPUSH
// begin enable ;
12641: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do
12642: LD_ADDR_VAR 0 1
12646: PUSH
12647: LD_INT 22
12649: PUSH
12650: LD_INT 4
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: PUSH
12657: LD_INT 34
12659: PUSH
12660: LD_INT 12
12662: PUSH
12663: EMPTY
12664: LIST
12665: LIST
12666: PUSH
12667: EMPTY
12668: LIST
12669: LIST
12670: PPUSH
12671: CALL_OW 69
12675: PUSH
12676: FOR_IN
12677: IFFALSE 12713
// if GetDistUnits ( i , JMM ) < 6 then
12679: LD_VAR 0 1
12683: PPUSH
12684: LD_EXP 14
12688: PPUSH
12689: CALL_OW 296
12693: PUSH
12694: LD_INT 6
12696: LESS
12697: IFFALSE 12711
// SetSide ( i , 7 ) ;
12699: LD_VAR 0 1
12703: PPUSH
12704: LD_INT 7
12706: PPUSH
12707: CALL_OW 235
12711: GO 12676
12713: POP
12714: POP
// end ;
12715: PPOPN 1
12717: END
// every 0 0$01 trigger can_escape and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) do var all_taken , tmp , m1 , m2 , m3 ;
12718: LD_EXP 6
12722: PUSH
12723: LD_INT 19
12725: PPUSH
12726: LD_INT 22
12728: PUSH
12729: LD_INT 7
12731: PUSH
12732: EMPTY
12733: LIST
12734: LIST
12735: PUSH
12736: LD_INT 21
12738: PUSH
12739: LD_INT 1
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: PUSH
12746: EMPTY
12747: LIST
12748: LIST
12749: PPUSH
12750: CALL_OW 71
12754: NOT
12755: AND
12756: PUSH
12757: LD_INT 3
12759: PPUSH
12760: CALL_OW 469
12764: NOT
12765: AND
12766: PUSH
12767: LD_INT 5
12769: PPUSH
12770: CALL_OW 469
12774: NOT
12775: AND
12776: IFFALSE 14402
12778: GO 12780
12780: DISABLE
12781: LD_INT 0
12783: PPUSH
12784: PPUSH
12785: PPUSH
12786: PPUSH
12787: PPUSH
// begin m1 := false ;
12788: LD_ADDR_VAR 0 3
12792: PUSH
12793: LD_INT 0
12795: ST_TO_ADDR
// m2 := false ;
12796: LD_ADDR_VAR 0 4
12800: PUSH
12801: LD_INT 0
12803: ST_TO_ADDR
// m3 := false ;
12804: LD_ADDR_VAR 0 5
12808: PUSH
12809: LD_INT 0
12811: ST_TO_ADDR
// all_taken := ( UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 ) ;
12812: LD_ADDR_VAR 0 1
12816: PUSH
12817: LD_EXP 3
12821: PPUSH
12822: LD_INT 22
12824: PUSH
12825: LD_INT 4
12827: PUSH
12828: EMPTY
12829: LIST
12830: LIST
12831: PUSH
12832: LD_INT 21
12834: PUSH
12835: LD_INT 1
12837: PUSH
12838: EMPTY
12839: LIST
12840: LIST
12841: PUSH
12842: EMPTY
12843: LIST
12844: LIST
12845: PPUSH
12846: CALL_OW 72
12850: PUSH
12851: LD_INT 0
12853: EQUAL
12854: ST_TO_ADDR
// if not all_taken then
12855: LD_VAR 0 1
12859: NOT
12860: IFFALSE 13001
// case query ( Q1 ) of 1 :
12862: LD_STRING Q1
12864: PPUSH
12865: CALL_OW 97
12869: PUSH
12870: LD_INT 1
12872: DOUBLE
12873: EQUAL
12874: IFTRUE 12878
12876: GO 12989
12878: POP
// begin repeat wait ( 0 0$1 ) ;
12879: LD_INT 35
12881: PPUSH
12882: CALL_OW 67
// until UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) ;
12886: LD_EXP 3
12890: PPUSH
12891: LD_INT 22
12893: PUSH
12894: LD_INT 4
12896: PUSH
12897: EMPTY
12898: LIST
12899: LIST
12900: PUSH
12901: LD_INT 21
12903: PUSH
12904: LD_INT 1
12906: PUSH
12907: EMPTY
12908: LIST
12909: LIST
12910: PUSH
12911: EMPTY
12912: LIST
12913: LIST
12914: PPUSH
12915: CALL_OW 72
12919: PUSH
12920: LD_INT 0
12922: EQUAL
12923: PUSH
12924: LD_INT 19
12926: PPUSH
12927: LD_INT 22
12929: PUSH
12930: LD_INT 7
12932: PUSH
12933: EMPTY
12934: LIST
12935: LIST
12936: PUSH
12937: LD_INT 21
12939: PUSH
12940: LD_INT 1
12942: PUSH
12943: EMPTY
12944: LIST
12945: LIST
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: PPUSH
12951: CALL_OW 71
12955: NOT
12956: AND
12957: PUSH
12958: LD_INT 3
12960: PPUSH
12961: CALL_OW 469
12965: NOT
12966: AND
12967: PUSH
12968: LD_INT 5
12970: PPUSH
12971: CALL_OW 469
12975: NOT
12976: AND
12977: IFFALSE 12879
// all_taken := true ;
12979: LD_ADDR_VAR 0 1
12983: PUSH
12984: LD_INT 1
12986: ST_TO_ADDR
// end ; 2 :
12987: GO 13001
12989: LD_INT 2
12991: DOUBLE
12992: EQUAL
12993: IFTRUE 12997
12995: GO 13000
12997: POP
// ; end ;
12998: GO 13001
13000: POP
// if team_kill_counter then
13001: LD_EXP 9
13005: IFFALSE 13021
// Say ( JMM , D5-JMM-1 ) else
13007: LD_EXP 14
13011: PPUSH
13012: LD_STRING D5-JMM-1
13014: PPUSH
13015: CALL_OW 88
13019: GO 13033
// Say ( JMM , D5-JMM-1a ) ;
13021: LD_EXP 14
13025: PPUSH
13026: LD_STRING D5-JMM-1a
13028: PPUSH
13029: CALL_OW 88
// if ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Roth ] ) >= 10 then
13033: LD_INT 22
13035: PUSH
13036: LD_INT 7
13038: PUSH
13039: EMPTY
13040: LIST
13041: LIST
13042: PUSH
13043: LD_INT 21
13045: PUSH
13046: LD_INT 1
13048: PUSH
13049: EMPTY
13050: LIST
13051: LIST
13052: PUSH
13053: LD_INT 23
13055: PUSH
13056: LD_INT 1
13058: PUSH
13059: EMPTY
13060: LIST
13061: LIST
13062: PUSH
13063: EMPTY
13064: LIST
13065: LIST
13066: LIST
13067: PPUSH
13068: CALL_OW 69
13072: PUSH
13073: LD_EXP 14
13077: PUSH
13078: LD_EXP 15
13082: PUSH
13083: EMPTY
13084: LIST
13085: LIST
13086: DIFF
13087: PUSH
13088: LD_INT 10
13090: GREATEREQUAL
13091: IFFALSE 13100
// SetAchievement ( ACH_TEAM ) ;
13093: LD_STRING ACH_TEAM
13095: PPUSH
13096: CALL_OW 543
// if not invis_used then
13100: LD_EXP 12
13104: NOT
13105: IFFALSE 13121
// begin wait ( 3 ) ;
13107: LD_INT 3
13109: PPUSH
13110: CALL_OW 67
// SetAchievement ( ACH_NOINVIS ) ;
13114: LD_STRING ACH_NOINVIS
13116: PPUSH
13117: CALL_OW 543
// end ; if not alert then
13121: LD_EXP 13
13125: NOT
13126: IFFALSE 13142
// begin wait ( 3 ) ;
13128: LD_INT 3
13130: PPUSH
13131: CALL_OW 67
// SetAchievement ( ACH_ALARM ) ;
13135: LD_STRING ACH_ALARM
13137: PPUSH
13138: CALL_OW 543
// end ; if tick < 15 15$00 then
13142: LD_OWVAR 1
13146: PUSH
13147: LD_INT 31500
13149: LESS
13150: IFFALSE 13166
// begin wait ( 3 ) ;
13152: LD_INT 3
13154: PPUSH
13155: CALL_OW 67
// SetAchievement ( ACH_ASPEED_16 ) ;
13159: LD_STRING ACH_ASPEED_16
13161: PPUSH
13162: CALL_OW 543
// end ; if all_taken then
13166: LD_VAR 0 1
13170: IFFALSE 13192
// begin AddMedal ( All , 1 ) ;
13172: LD_STRING All
13174: PPUSH
13175: LD_INT 1
13177: PPUSH
13178: CALL_OW 101
// m1 := true ;
13182: LD_ADDR_VAR 0 3
13186: PUSH
13187: LD_INT 1
13189: ST_TO_ADDR
// end else
13190: GO 13203
// AddMedal ( All , - 1 ) ;
13192: LD_STRING All
13194: PPUSH
13195: LD_INT 1
13197: NEG
13198: PPUSH
13199: CALL_OW 101
// if team_kill_counter then
13203: LD_EXP 9
13207: IFFALSE 13222
// AddMedal ( Save , - 1 ) else
13209: LD_STRING Save
13211: PPUSH
13212: LD_INT 1
13214: NEG
13215: PPUSH
13216: CALL_OW 101
13220: GO 13240
// begin AddMedal ( Save , 1 ) ;
13222: LD_STRING Save
13224: PPUSH
13225: LD_INT 1
13227: PPUSH
13228: CALL_OW 101
// m2 := true ;
13232: LD_ADDR_VAR 0 4
13236: PUSH
13237: LD_INT 1
13239: ST_TO_ADDR
// end ; if friends_kill_counter >= [ 2 , 2 , 1 , 1 ] [ Difficulty ] then
13240: LD_EXP 8
13244: PUSH
13245: LD_INT 2
13247: PUSH
13248: LD_INT 2
13250: PUSH
13251: LD_INT 1
13253: PUSH
13254: LD_INT 1
13256: PUSH
13257: EMPTY
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: PUSH
13263: LD_OWVAR 67
13267: ARRAY
13268: GREATEREQUAL
13269: IFFALSE 13284
// AddMedal ( Friendship , - 1 ) else
13271: LD_STRING Friendship
13273: PPUSH
13274: LD_INT 1
13276: NEG
13277: PPUSH
13278: CALL_OW 101
13282: GO 13302
// begin AddMedal ( Friendship , 1 ) ;
13284: LD_STRING Friendship
13286: PPUSH
13287: LD_INT 1
13289: PPUSH
13290: CALL_OW 101
// m3 := true ;
13294: LD_ADDR_VAR 0 5
13298: PUSH
13299: LD_INT 1
13301: ST_TO_ADDR
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
13302: LD_VAR 0 3
13306: PUSH
13307: LD_VAR 0 4
13311: AND
13312: PUSH
13313: LD_VAR 0 5
13317: AND
13318: PUSH
13319: LD_OWVAR 67
13323: PUSH
13324: LD_INT 3
13326: GREATEREQUAL
13327: AND
13328: IFFALSE 13340
// SetAchievementEX ( ACH_AMER , 16 ) ;
13330: LD_STRING ACH_AMER
13332: PPUSH
13333: LD_INT 16
13335: PPUSH
13336: CALL_OW 564
// GiveMedals ( MAIN ) ;
13340: LD_STRING MAIN
13342: PPUSH
13343: CALL_OW 102
// tmp := FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ] ) ;
13347: LD_ADDR_VAR 0 2
13351: PUSH
13352: LD_INT 22
13354: PUSH
13355: LD_INT 7
13357: PUSH
13358: EMPTY
13359: LIST
13360: LIST
13361: PUSH
13362: LD_INT 2
13364: PUSH
13365: LD_INT 25
13367: PUSH
13368: LD_INT 1
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: PUSH
13375: LD_INT 25
13377: PUSH
13378: LD_INT 2
13380: PUSH
13381: EMPTY
13382: LIST
13383: LIST
13384: PUSH
13385: LD_INT 25
13387: PUSH
13388: LD_INT 3
13390: PUSH
13391: EMPTY
13392: LIST
13393: LIST
13394: PUSH
13395: LD_INT 25
13397: PUSH
13398: LD_INT 4
13400: PUSH
13401: EMPTY
13402: LIST
13403: LIST
13404: PUSH
13405: LD_INT 25
13407: PUSH
13408: LD_INT 5
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PUSH
13415: LD_INT 25
13417: PUSH
13418: LD_INT 8
13420: PUSH
13421: EMPTY
13422: LIST
13423: LIST
13424: PUSH
13425: LD_INT 25
13427: PUSH
13428: LD_INT 9
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: PUSH
13445: EMPTY
13446: LIST
13447: LIST
13448: PUSH
13449: EMPTY
13450: LIST
13451: PPUSH
13452: CALL_OW 69
13456: ST_TO_ADDR
// RewardPeople ( tmp ^ Roth ) ;
13457: LD_VAR 0 2
13461: PUSH
13462: LD_EXP 15
13466: ADD
13467: PPUSH
13468: CALL_OW 43
// SaveCharacters ( JMM , 12a_JMM ) ;
13472: LD_EXP 14
13476: PPUSH
13477: LD_STRING 12a_JMM
13479: PPUSH
13480: CALL_OW 38
// if IsLive ( Roth ) then
13484: LD_EXP 15
13488: PPUSH
13489: CALL_OW 300
13493: IFFALSE 13507
// SaveCharacters ( Roth , 12a_Roth ) ;
13495: LD_EXP 15
13499: PPUSH
13500: LD_STRING 12a_Roth
13502: PPUSH
13503: CALL_OW 38
// if Lisa in tmp then
13507: LD_EXP 23
13511: PUSH
13512: LD_VAR 0 2
13516: IN
13517: IFFALSE 13533
// SaveCharacters ( Lisa , 12a_Lisa ) else
13519: LD_EXP 23
13523: PPUSH
13524: LD_STRING 12a_Lisa
13526: PPUSH
13527: CALL_OW 38
13531: GO 13551
// if Lisa then
13533: LD_EXP 23
13537: IFFALSE 13551
// SaveCharacters ( Lisa , 12p_Lisa ) ;
13539: LD_EXP 23
13543: PPUSH
13544: LD_STRING 12p_Lisa
13546: PPUSH
13547: CALL_OW 38
// if Donaldson in tmp then
13551: LD_EXP 24
13555: PUSH
13556: LD_VAR 0 2
13560: IN
13561: IFFALSE 13577
// SaveCharacters ( Donaldson , 12a_Donaldson ) else
13563: LD_EXP 24
13567: PPUSH
13568: LD_STRING 12a_Donaldson
13570: PPUSH
13571: CALL_OW 38
13575: GO 13595
// if Donaldson then
13577: LD_EXP 24
13581: IFFALSE 13595
// SaveCharacters ( Donaldson , 12p_Donaldson ) ;
13583: LD_EXP 24
13587: PPUSH
13588: LD_STRING 12p_Donaldson
13590: PPUSH
13591: CALL_OW 38
// if Bobby in tmp then
13595: LD_EXP 25
13599: PUSH
13600: LD_VAR 0 2
13604: IN
13605: IFFALSE 13621
// SaveCharacters ( Bobby , 12a_Bobby ) else
13607: LD_EXP 25
13611: PPUSH
13612: LD_STRING 12a_Bobby
13614: PPUSH
13615: CALL_OW 38
13619: GO 13639
// if Bobby then
13621: LD_EXP 25
13625: IFFALSE 13639
// SaveCharacters ( Bobby , 12p_Bobby ) ;
13627: LD_EXP 25
13631: PPUSH
13632: LD_STRING 12p_Bobby
13634: PPUSH
13635: CALL_OW 38
// if Cyrus in tmp then
13639: LD_EXP 26
13643: PUSH
13644: LD_VAR 0 2
13648: IN
13649: IFFALSE 13665
// SaveCharacters ( Cyrus , 12a_Cyrus ) else
13651: LD_EXP 26
13655: PPUSH
13656: LD_STRING 12a_Cyrus
13658: PPUSH
13659: CALL_OW 38
13663: GO 13683
// if Cyrus then
13665: LD_EXP 26
13669: IFFALSE 13683
// SaveCharacters ( Cyrus , 12p_Cyrus ) ;
13671: LD_EXP 26
13675: PPUSH
13676: LD_STRING 12p_Cyrus
13678: PPUSH
13679: CALL_OW 38
// if Denis in tmp then
13683: LD_EXP 27
13687: PUSH
13688: LD_VAR 0 2
13692: IN
13693: IFFALSE 13707
// SaveCharacters ( Denis , 12a_Denis ) ;
13695: LD_EXP 27
13699: PPUSH
13700: LD_STRING 12a_Denis
13702: PPUSH
13703: CALL_OW 38
// if Brown in tmp then
13707: LD_EXP 28
13711: PUSH
13712: LD_VAR 0 2
13716: IN
13717: IFFALSE 13733
// SaveCharacters ( Brown , 12a_Brown ) else
13719: LD_EXP 28
13723: PPUSH
13724: LD_STRING 12a_Brown
13726: PPUSH
13727: CALL_OW 38
13731: GO 13757
// if Brown in tmp then
13733: LD_EXP 28
13737: PUSH
13738: LD_VAR 0 2
13742: IN
13743: IFFALSE 13757
// SaveCharacters ( Brown , 12p_Brown ) ;
13745: LD_EXP 28
13749: PPUSH
13750: LD_STRING 12p_Brown
13752: PPUSH
13753: CALL_OW 38
// if Gladstone in tmp then
13757: LD_EXP 29
13761: PUSH
13762: LD_VAR 0 2
13766: IN
13767: IFFALSE 13783
// SaveCharacters ( Gladstone , 12a_Gladstone ) else
13769: LD_EXP 29
13773: PPUSH
13774: LD_STRING 12a_Gladstone
13776: PPUSH
13777: CALL_OW 38
13781: GO 13801
// if Gladstone then
13783: LD_EXP 29
13787: IFFALSE 13801
// SaveCharacters ( Gladstone , 12p_Gladstone ) ;
13789: LD_EXP 29
13793: PPUSH
13794: LD_STRING 12p_Gladstone
13796: PPUSH
13797: CALL_OW 38
// if Houten in tmp then
13801: LD_EXP 30
13805: PUSH
13806: LD_VAR 0 2
13810: IN
13811: IFFALSE 13827
// SaveCharacters ( Houten , 12a_Houten ) else
13813: LD_EXP 30
13817: PPUSH
13818: LD_STRING 12a_Houten
13820: PPUSH
13821: CALL_OW 38
13825: GO 13845
// if Houten then
13827: LD_EXP 30
13831: IFFALSE 13845
// SaveCharacters ( Houten , 12p_Houten ) ;
13833: LD_EXP 30
13837: PPUSH
13838: LD_STRING 12p_Houten
13840: PPUSH
13841: CALL_OW 38
// if Cornel in tmp then
13845: LD_EXP 31
13849: PUSH
13850: LD_VAR 0 2
13854: IN
13855: IFFALSE 13871
// SaveCharacters ( Cornel , 12a_Cornell ) else
13857: LD_EXP 31
13861: PPUSH
13862: LD_STRING 12a_Cornell
13864: PPUSH
13865: CALL_OW 38
13869: GO 13889
// if Cornel then
13871: LD_EXP 31
13875: IFFALSE 13889
// SaveCharacters ( Cornel , 12p_Cornell ) ;
13877: LD_EXP 31
13881: PPUSH
13882: LD_STRING 12p_Cornell
13884: PPUSH
13885: CALL_OW 38
// if Gary in tmp then
13889: LD_EXP 32
13893: PUSH
13894: LD_VAR 0 2
13898: IN
13899: IFFALSE 13915
// SaveCharacters ( Gary , 12a_Gary ) else
13901: LD_EXP 32
13905: PPUSH
13906: LD_STRING 12a_Gary
13908: PPUSH
13909: CALL_OW 38
13913: GO 13933
// if Gary then
13915: LD_EXP 32
13919: IFFALSE 13933
// SaveCharacters ( Gary , 12p_Gary ) ;
13921: LD_EXP 32
13925: PPUSH
13926: LD_STRING 12p_Gary
13928: PPUSH
13929: CALL_OW 38
// if Frank in tmp then
13933: LD_EXP 33
13937: PUSH
13938: LD_VAR 0 2
13942: IN
13943: IFFALSE 13957
// SaveCharacters ( Frank , 12a_Frank ) ;
13945: LD_EXP 33
13949: PPUSH
13950: LD_STRING 12a_Frank
13952: PPUSH
13953: CALL_OW 38
// if Kikuchi in tmp then
13957: LD_EXP 34
13961: PUSH
13962: LD_VAR 0 2
13966: IN
13967: IFFALSE 13983
// SaveCharacters ( Kikuchi , 12a_Kikuchi ) else
13969: LD_EXP 34
13973: PPUSH
13974: LD_STRING 12a_Kikuchi
13976: PPUSH
13977: CALL_OW 38
13981: GO 14001
// if Kikuchi then
13983: LD_EXP 34
13987: IFFALSE 14001
// SaveCharacters ( Kikuchi , 12p_Kikuchi ) ;
13989: LD_EXP 34
13993: PPUSH
13994: LD_STRING 12p_Kikuchi
13996: PPUSH
13997: CALL_OW 38
// if Simms in tmp then
14001: LD_EXP 35
14005: PUSH
14006: LD_VAR 0 2
14010: IN
14011: IFFALSE 14025
// SaveCharacters ( Simms , 12a_Simms ) ;
14013: LD_EXP 35
14017: PPUSH
14018: LD_STRING 12a_Simms
14020: PPUSH
14021: CALL_OW 38
// if Joan in tmp then
14025: LD_EXP 36
14029: PUSH
14030: LD_VAR 0 2
14034: IN
14035: IFFALSE 14049
// SaveCharacters ( Joan , 12a_Joan ) ;
14037: LD_EXP 36
14041: PPUSH
14042: LD_STRING 12a_Joan
14044: PPUSH
14045: CALL_OW 38
// if DeltaDoctor in tmp then
14049: LD_EXP 37
14053: PUSH
14054: LD_VAR 0 2
14058: IN
14059: IFFALSE 14073
// SaveCharacters ( DeltaDoctor , 12a_DeltaDoctor ) ;
14061: LD_EXP 37
14065: PPUSH
14066: LD_STRING 12a_DeltaDoctor
14068: PPUSH
14069: CALL_OW 38
// tmp := tmp diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor ] ;
14073: LD_ADDR_VAR 0 2
14077: PUSH
14078: LD_VAR 0 2
14082: PUSH
14083: LD_EXP 14
14087: PUSH
14088: LD_EXP 15
14092: PUSH
14093: LD_EXP 23
14097: PUSH
14098: LD_EXP 24
14102: PUSH
14103: LD_EXP 25
14107: PUSH
14108: LD_EXP 26
14112: PUSH
14113: LD_EXP 27
14117: PUSH
14118: LD_EXP 28
14122: PUSH
14123: LD_EXP 29
14127: PUSH
14128: LD_EXP 30
14132: PUSH
14133: LD_EXP 31
14137: PUSH
14138: LD_EXP 32
14142: PUSH
14143: LD_EXP 33
14147: PUSH
14148: LD_EXP 34
14152: PUSH
14153: LD_EXP 35
14157: PUSH
14158: LD_EXP 36
14162: PUSH
14163: LD_EXP 37
14167: PUSH
14168: EMPTY
14169: LIST
14170: LIST
14171: LIST
14172: LIST
14173: LIST
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: DIFF
14187: ST_TO_ADDR
// if tmp then
14188: LD_VAR 0 2
14192: IFFALSE 14206
// SaveCharacters ( tmp , 12a_others ) ;
14194: LD_VAR 0 2
14198: PPUSH
14199: LD_STRING 12a_others
14201: PPUSH
14202: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_side , 1 ] , [ f_side , 4 ] ] ] ) diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Powell ] ;
14206: LD_ADDR_VAR 0 2
14210: PUSH
14211: LD_INT 21
14213: PUSH
14214: LD_INT 1
14216: PUSH
14217: EMPTY
14218: LIST
14219: LIST
14220: PUSH
14221: LD_INT 23
14223: PUSH
14224: LD_INT 1
14226: PUSH
14227: EMPTY
14228: LIST
14229: LIST
14230: PUSH
14231: LD_INT 2
14233: PUSH
14234: LD_INT 22
14236: PUSH
14237: LD_INT 1
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: PUSH
14244: LD_INT 22
14246: PUSH
14247: LD_INT 4
14249: PUSH
14250: EMPTY
14251: LIST
14252: LIST
14253: PUSH
14254: EMPTY
14255: LIST
14256: LIST
14257: LIST
14258: PUSH
14259: EMPTY
14260: LIST
14261: LIST
14262: LIST
14263: PPUSH
14264: CALL_OW 69
14268: PUSH
14269: LD_EXP 14
14273: PUSH
14274: LD_EXP 15
14278: PUSH
14279: LD_EXP 23
14283: PUSH
14284: LD_EXP 24
14288: PUSH
14289: LD_EXP 25
14293: PUSH
14294: LD_EXP 26
14298: PUSH
14299: LD_EXP 27
14303: PUSH
14304: LD_EXP 28
14308: PUSH
14309: LD_EXP 29
14313: PUSH
14314: LD_EXP 30
14318: PUSH
14319: LD_EXP 31
14323: PUSH
14324: LD_EXP 32
14328: PUSH
14329: LD_EXP 33
14333: PUSH
14334: LD_EXP 34
14338: PUSH
14339: LD_EXP 35
14343: PUSH
14344: LD_EXP 36
14348: PUSH
14349: LD_EXP 37
14353: PUSH
14354: LD_EXP 16
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: DIFF
14379: ST_TO_ADDR
// if tmp then
14380: LD_VAR 0 2
14384: IFFALSE 14398
// SaveCharacters ( tmp , 12p_others ) ;
14386: LD_VAR 0 2
14390: PPUSH
14391: LD_STRING 12p_others
14393: PPUSH
14394: CALL_OW 38
// YouWin ;
14398: CALL_OW 103
// end ; end_of_file
14402: PPOPN 5
14404: END
// on SailEvent ( event ) do var tmp ;
14405: LD_INT 0
14407: PPUSH
// begin if event = 1 then
14408: LD_VAR 0 1
14412: PUSH
14413: LD_INT 1
14415: EQUAL
14416: IFFALSE 14489
// begin if not mobile_patrol then
14418: LD_EXP 17
14422: NOT
14423: IFFALSE 14427
// exit ;
14425: GO 14489
// tmp := mobile_patrol [ mobile_patrol ] ;
14427: LD_ADDR_VAR 0 2
14431: PUSH
14432: LD_EXP 17
14436: PUSH
14437: LD_EXP 17
14441: ARRAY
14442: ST_TO_ADDR
// mobile_patrol := Delete ( mobile_patrol , mobile_patrol ) ;
14443: LD_ADDR_EXP 17
14447: PUSH
14448: LD_EXP 17
14452: PPUSH
14453: LD_EXP 17
14457: PPUSH
14458: CALL_OW 3
14462: ST_TO_ADDR
// Patrol ( tmp , mobile_points [ mobile_patrol + 1 ] , [ ] ) ;
14463: LD_VAR 0 2
14467: PPUSH
14468: LD_EXP 18
14472: PUSH
14473: LD_EXP 17
14477: PUSH
14478: LD_INT 1
14480: PLUS
14481: ARRAY
14482: PPUSH
14483: EMPTY
14484: PPUSH
14485: CALL 6669 0 3
// end ; end ;
14489: PPOPN 2
14491: END
// on UnitDestroyed ( un ) do begin if un = JMM then
14492: LD_VAR 0 1
14496: PUSH
14497: LD_EXP 14
14501: EQUAL
14502: IFFALSE 14511
// YouLost ( JMM ) ;
14504: LD_STRING JMM
14506: PPUSH
14507: CALL_OW 104
// if GetSide ( un ) = 7 and GetWeapon ( un ) = us_cargo_bay then
14511: LD_VAR 0 1
14515: PPUSH
14516: CALL_OW 255
14520: PUSH
14521: LD_INT 7
14523: EQUAL
14524: PUSH
14525: LD_VAR 0 1
14529: PPUSH
14530: CALL_OW 264
14534: PUSH
14535: LD_INT 12
14537: EQUAL
14538: AND
14539: IFFALSE 14548
// YouLost ( Artifact ) ;
14541: LD_STRING Artifact
14543: PPUSH
14544: CALL_OW 104
// if ( GetSide ( un ) = 7 and GetType ( un ) = unit_human ) or un = Roth then
14548: LD_VAR 0 1
14552: PPUSH
14553: CALL_OW 255
14557: PUSH
14558: LD_INT 7
14560: EQUAL
14561: PUSH
14562: LD_VAR 0 1
14566: PPUSH
14567: CALL_OW 247
14571: PUSH
14572: LD_INT 1
14574: EQUAL
14575: AND
14576: PUSH
14577: LD_VAR 0 1
14581: PUSH
14582: LD_EXP 15
14586: EQUAL
14587: OR
14588: IFFALSE 14604
// team_kill_counter := team_kill_counter + 1 ;
14590: LD_ADDR_EXP 9
14594: PUSH
14595: LD_EXP 9
14599: PUSH
14600: LD_INT 1
14602: PLUS
14603: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetType ( un ) = unit_human then
14604: LD_VAR 0 1
14608: PPUSH
14609: CALL_OW 255
14613: PUSH
14614: LD_INT 1
14616: EQUAL
14617: PUSH
14618: LD_VAR 0 1
14622: PPUSH
14623: CALL_OW 247
14627: PUSH
14628: LD_INT 1
14630: EQUAL
14631: AND
14632: IFFALSE 14648
// friends_kill_counter := friends_kill_counter + 1 ;
14634: LD_ADDR_EXP 8
14638: PUSH
14639: LD_EXP 8
14643: PUSH
14644: LD_INT 1
14646: PLUS
14647: ST_TO_ADDR
// if GetSide ( un ) <> 1 then
14648: LD_VAR 0 1
14652: PPUSH
14653: CALL_OW 255
14657: PUSH
14658: LD_INT 1
14660: NONEQUAL
14661: IFFALSE 14665
// exit ;
14663: GO 14742
// if GetControl ( un ) = control_remote then
14665: LD_VAR 0 1
14669: PPUSH
14670: CALL_OW 263
14674: PUSH
14675: LD_INT 2
14677: EQUAL
14678: IFFALSE 14696
// defenders := defenders diff un ;
14680: LD_ADDR_EXP 20
14684: PUSH
14685: LD_EXP 20
14689: PUSH
14690: LD_VAR 0 1
14694: DIFF
14695: ST_TO_ADDR
// if not un in defenders then
14696: LD_VAR 0 1
14700: PUSH
14701: LD_EXP 20
14705: IN
14706: NOT
14707: IFFALSE 14742
// begin defcon := [ GetX ( un ) , GetY ( un ) ] ;
14709: LD_ADDR_EXP 21
14713: PUSH
14714: LD_VAR 0 1
14718: PPUSH
14719: CALL_OW 250
14723: PUSH
14724: LD_VAR 0 1
14728: PPUSH
14729: CALL_OW 251
14733: PUSH
14734: EMPTY
14735: LIST
14736: LIST
14737: ST_TO_ADDR
// Defend ;
14738: CALL 2791 0 0
// end ; end ;
14742: PPOPN 1
14744: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) <> 1 then
14745: LD_VAR 0 1
14749: PPUSH
14750: CALL_OW 255
14754: PUSH
14755: LD_INT 1
14757: NONEQUAL
14758: IFFALSE 14762
// exit ;
14760: GO 14786
// if GetControl ( veh ) = control_remote then
14762: LD_VAR 0 1
14766: PPUSH
14767: CALL_OW 263
14771: PUSH
14772: LD_INT 2
14774: EQUAL
14775: IFFALSE 14786
// Connect ( veh ) ;
14777: LD_VAR 0 1
14781: PPUSH
14782: CALL 40926 0 1
// end ;
14786: PPOPN 2
14788: END
// on UnitGoesToRed ( un ) do var i , veh ;
14789: LD_INT 0
14791: PPUSH
14792: PPUSH
// begin if GetSide ( un ) = 1 and GetControl ( un ) = control_remote then
14793: LD_VAR 0 1
14797: PPUSH
14798: CALL_OW 255
14802: PUSH
14803: LD_INT 1
14805: EQUAL
14806: PUSH
14807: LD_VAR 0 1
14811: PPUSH
14812: CALL_OW 263
14816: PUSH
14817: LD_INT 2
14819: EQUAL
14820: AND
14821: IFFALSE 14832
// ComUnlink ( un ) ;
14823: LD_VAR 0 1
14827: PPUSH
14828: CALL_OW 136
// if un = ambar0 then
14832: LD_VAR 0 1
14836: PUSH
14837: LD_INT 18
14839: EQUAL
14840: IFFALSE 14950
// begin uc_side := 1 ;
14842: LD_ADDR_OWVAR 20
14846: PUSH
14847: LD_INT 1
14849: ST_TO_ADDR
// uc_nation := 1 ;
14850: LD_ADDR_OWVAR 21
14854: PUSH
14855: LD_INT 1
14857: ST_TO_ADDR
// for i = 1 to 6 do
14858: LD_ADDR_VAR 0 2
14862: PUSH
14863: DOUBLE
14864: LD_INT 1
14866: DEC
14867: ST_TO_ADDR
14868: LD_INT 6
14870: PUSH
14871: FOR_TO
14872: IFFALSE 14948
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
14874: LD_INT 3
14876: PPUSH
14877: LD_INT 1
14879: PPUSH
14880: LD_INT 3
14882: PPUSH
14883: LD_INT 4
14885: PPUSH
14886: LD_INT 100
14888: PPUSH
14889: CALL 37833 0 5
// veh := CreateVehicle ;
14893: LD_ADDR_VAR 0 3
14897: PUSH
14898: CALL_OW 45
14902: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
14903: LD_VAR 0 3
14907: PPUSH
14908: LD_INT 1
14910: PPUSH
14911: CALL_OW 233
// PlaceUnitArea ( veh , west_spawn , false ) ;
14915: LD_VAR 0 3
14919: PPUSH
14920: LD_INT 25
14922: PPUSH
14923: LD_INT 0
14925: PPUSH
14926: CALL_OW 49
// defenders := defenders ^ veh ;
14930: LD_ADDR_EXP 20
14934: PUSH
14935: LD_EXP 20
14939: PUSH
14940: LD_VAR 0 3
14944: ADD
14945: ST_TO_ADDR
// end ;
14946: GO 14871
14948: POP
14949: POP
// end ; end ;
14950: PPOPN 3
14952: END
// on EnterBuilding ( building , unit ) do begin if unit = Powell then
14953: LD_VAR 0 2
14957: PUSH
14958: LD_EXP 16
14962: EQUAL
14963: IFFALSE 14974
// RemoveUnit ( Powell ) ;
14965: LD_EXP 16
14969: PPUSH
14970: CALL_OW 64
// end ;
14974: PPOPN 2
14976: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
14977: LD_VAR 0 1
14981: PPUSH
14982: CALL 29070 0 1
// end ; end_of_file
14986: PPOPN 1
14988: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
14989: LD_INT 0
14991: PPUSH
// ar_miner := 81 ;
14992: LD_ADDR_EXP 45
14996: PUSH
14997: LD_INT 81
14999: ST_TO_ADDR
// ar_crane := 88 ;
15000: LD_ADDR_EXP 44
15004: PUSH
15005: LD_INT 88
15007: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
15008: LD_ADDR_EXP 39
15012: PUSH
15013: LD_INT 89
15015: ST_TO_ADDR
// us_hack := 99 ;
15016: LD_ADDR_EXP 40
15020: PUSH
15021: LD_INT 99
15023: ST_TO_ADDR
// us_artillery := 97 ;
15024: LD_ADDR_EXP 41
15028: PUSH
15029: LD_INT 97
15031: ST_TO_ADDR
// ar_bio_bomb := 91 ;
15032: LD_ADDR_EXP 42
15036: PUSH
15037: LD_INT 91
15039: ST_TO_ADDR
// ar_mortar := 92 ;
15040: LD_ADDR_EXP 43
15044: PUSH
15045: LD_INT 92
15047: ST_TO_ADDR
// ru_radar := 98 ;
15048: LD_ADDR_EXP 38
15052: PUSH
15053: LD_INT 98
15055: ST_TO_ADDR
// tech_Artillery := 80 ;
15056: LD_ADDR_EXP 46
15060: PUSH
15061: LD_INT 80
15063: ST_TO_ADDR
// tech_RadMat := 81 ;
15064: LD_ADDR_EXP 47
15068: PUSH
15069: LD_INT 81
15071: ST_TO_ADDR
// tech_BasicTools := 82 ;
15072: LD_ADDR_EXP 48
15076: PUSH
15077: LD_INT 82
15079: ST_TO_ADDR
// tech_Cargo := 83 ;
15080: LD_ADDR_EXP 49
15084: PUSH
15085: LD_INT 83
15087: ST_TO_ADDR
// tech_Track := 84 ;
15088: LD_ADDR_EXP 50
15092: PUSH
15093: LD_INT 84
15095: ST_TO_ADDR
// tech_Crane := 85 ;
15096: LD_ADDR_EXP 51
15100: PUSH
15101: LD_INT 85
15103: ST_TO_ADDR
// tech_Bulldozer := 86 ;
15104: LD_ADDR_EXP 52
15108: PUSH
15109: LD_INT 86
15111: ST_TO_ADDR
// tech_Hovercraft := 87 ;
15112: LD_ADDR_EXP 53
15116: PUSH
15117: LD_INT 87
15119: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
15120: LD_ADDR_EXP 54
15124: PUSH
15125: LD_INT 88
15127: ST_TO_ADDR
// class_mastodont := 31 ;
15128: LD_ADDR_EXP 55
15132: PUSH
15133: LD_INT 31
15135: ST_TO_ADDR
// class_horse := 21 ;
15136: LD_ADDR_EXP 56
15140: PUSH
15141: LD_INT 21
15143: ST_TO_ADDR
// end ;
15144: LD_VAR 0 1
15148: RET
// every 1 do
15149: GO 15151
15151: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
15152: CALL 14989 0 0
15156: END
// every 0 0$1 do
15157: GO 15159
15159: DISABLE
// begin enable ;
15160: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
15161: LD_STRING updateTimer(
15163: PUSH
15164: LD_OWVAR 1
15168: STR
15169: PUSH
15170: LD_STRING );
15172: STR
15173: PPUSH
15174: CALL_OW 559
// end ;
15178: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15179: LD_INT 0
15181: PPUSH
// if p2 = 100 then
15182: LD_VAR 0 2
15186: PUSH
15187: LD_INT 100
15189: EQUAL
15190: IFFALSE 16193
// begin if not StreamModeActive then
15192: LD_EXP 57
15196: NOT
15197: IFFALSE 15207
// StreamModeActive := true ;
15199: LD_ADDR_EXP 57
15203: PUSH
15204: LD_INT 1
15206: ST_TO_ADDR
// if p3 = 0 then
15207: LD_VAR 0 3
15211: PUSH
15212: LD_INT 0
15214: EQUAL
15215: IFFALSE 15221
// InitStreamMode ;
15217: CALL 16353 0 0
// if p3 = 1 then
15221: LD_VAR 0 3
15225: PUSH
15226: LD_INT 1
15228: EQUAL
15229: IFFALSE 15239
// sRocket := true ;
15231: LD_ADDR_EXP 62
15235: PUSH
15236: LD_INT 1
15238: ST_TO_ADDR
// if p3 = 2 then
15239: LD_VAR 0 3
15243: PUSH
15244: LD_INT 2
15246: EQUAL
15247: IFFALSE 15257
// sSpeed := true ;
15249: LD_ADDR_EXP 61
15253: PUSH
15254: LD_INT 1
15256: ST_TO_ADDR
// if p3 = 3 then
15257: LD_VAR 0 3
15261: PUSH
15262: LD_INT 3
15264: EQUAL
15265: IFFALSE 15275
// sEngine := true ;
15267: LD_ADDR_EXP 63
15271: PUSH
15272: LD_INT 1
15274: ST_TO_ADDR
// if p3 = 4 then
15275: LD_VAR 0 3
15279: PUSH
15280: LD_INT 4
15282: EQUAL
15283: IFFALSE 15293
// sSpec := true ;
15285: LD_ADDR_EXP 60
15289: PUSH
15290: LD_INT 1
15292: ST_TO_ADDR
// if p3 = 5 then
15293: LD_VAR 0 3
15297: PUSH
15298: LD_INT 5
15300: EQUAL
15301: IFFALSE 15311
// sLevel := true ;
15303: LD_ADDR_EXP 64
15307: PUSH
15308: LD_INT 1
15310: ST_TO_ADDR
// if p3 = 6 then
15311: LD_VAR 0 3
15315: PUSH
15316: LD_INT 6
15318: EQUAL
15319: IFFALSE 15329
// sArmoury := true ;
15321: LD_ADDR_EXP 65
15325: PUSH
15326: LD_INT 1
15328: ST_TO_ADDR
// if p3 = 7 then
15329: LD_VAR 0 3
15333: PUSH
15334: LD_INT 7
15336: EQUAL
15337: IFFALSE 15347
// sRadar := true ;
15339: LD_ADDR_EXP 66
15343: PUSH
15344: LD_INT 1
15346: ST_TO_ADDR
// if p3 = 8 then
15347: LD_VAR 0 3
15351: PUSH
15352: LD_INT 8
15354: EQUAL
15355: IFFALSE 15365
// sBunker := true ;
15357: LD_ADDR_EXP 67
15361: PUSH
15362: LD_INT 1
15364: ST_TO_ADDR
// if p3 = 9 then
15365: LD_VAR 0 3
15369: PUSH
15370: LD_INT 9
15372: EQUAL
15373: IFFALSE 15383
// sHack := true ;
15375: LD_ADDR_EXP 68
15379: PUSH
15380: LD_INT 1
15382: ST_TO_ADDR
// if p3 = 10 then
15383: LD_VAR 0 3
15387: PUSH
15388: LD_INT 10
15390: EQUAL
15391: IFFALSE 15401
// sFire := true ;
15393: LD_ADDR_EXP 69
15397: PUSH
15398: LD_INT 1
15400: ST_TO_ADDR
// if p3 = 11 then
15401: LD_VAR 0 3
15405: PUSH
15406: LD_INT 11
15408: EQUAL
15409: IFFALSE 15419
// sRefresh := true ;
15411: LD_ADDR_EXP 70
15415: PUSH
15416: LD_INT 1
15418: ST_TO_ADDR
// if p3 = 12 then
15419: LD_VAR 0 3
15423: PUSH
15424: LD_INT 12
15426: EQUAL
15427: IFFALSE 15437
// sExp := true ;
15429: LD_ADDR_EXP 71
15433: PUSH
15434: LD_INT 1
15436: ST_TO_ADDR
// if p3 = 13 then
15437: LD_VAR 0 3
15441: PUSH
15442: LD_INT 13
15444: EQUAL
15445: IFFALSE 15455
// sDepot := true ;
15447: LD_ADDR_EXP 72
15451: PUSH
15452: LD_INT 1
15454: ST_TO_ADDR
// if p3 = 14 then
15455: LD_VAR 0 3
15459: PUSH
15460: LD_INT 14
15462: EQUAL
15463: IFFALSE 15473
// sFlag := true ;
15465: LD_ADDR_EXP 73
15469: PUSH
15470: LD_INT 1
15472: ST_TO_ADDR
// if p3 = 15 then
15473: LD_VAR 0 3
15477: PUSH
15478: LD_INT 15
15480: EQUAL
15481: IFFALSE 15491
// sKamikadze := true ;
15483: LD_ADDR_EXP 81
15487: PUSH
15488: LD_INT 1
15490: ST_TO_ADDR
// if p3 = 16 then
15491: LD_VAR 0 3
15495: PUSH
15496: LD_INT 16
15498: EQUAL
15499: IFFALSE 15509
// sTroll := true ;
15501: LD_ADDR_EXP 82
15505: PUSH
15506: LD_INT 1
15508: ST_TO_ADDR
// if p3 = 17 then
15509: LD_VAR 0 3
15513: PUSH
15514: LD_INT 17
15516: EQUAL
15517: IFFALSE 15527
// sSlow := true ;
15519: LD_ADDR_EXP 83
15523: PUSH
15524: LD_INT 1
15526: ST_TO_ADDR
// if p3 = 18 then
15527: LD_VAR 0 3
15531: PUSH
15532: LD_INT 18
15534: EQUAL
15535: IFFALSE 15545
// sLack := true ;
15537: LD_ADDR_EXP 84
15541: PUSH
15542: LD_INT 1
15544: ST_TO_ADDR
// if p3 = 19 then
15545: LD_VAR 0 3
15549: PUSH
15550: LD_INT 19
15552: EQUAL
15553: IFFALSE 15563
// sTank := true ;
15555: LD_ADDR_EXP 86
15559: PUSH
15560: LD_INT 1
15562: ST_TO_ADDR
// if p3 = 20 then
15563: LD_VAR 0 3
15567: PUSH
15568: LD_INT 20
15570: EQUAL
15571: IFFALSE 15581
// sRemote := true ;
15573: LD_ADDR_EXP 87
15577: PUSH
15578: LD_INT 1
15580: ST_TO_ADDR
// if p3 = 21 then
15581: LD_VAR 0 3
15585: PUSH
15586: LD_INT 21
15588: EQUAL
15589: IFFALSE 15599
// sPowell := true ;
15591: LD_ADDR_EXP 88
15595: PUSH
15596: LD_INT 1
15598: ST_TO_ADDR
// if p3 = 22 then
15599: LD_VAR 0 3
15603: PUSH
15604: LD_INT 22
15606: EQUAL
15607: IFFALSE 15617
// sTeleport := true ;
15609: LD_ADDR_EXP 91
15613: PUSH
15614: LD_INT 1
15616: ST_TO_ADDR
// if p3 = 23 then
15617: LD_VAR 0 3
15621: PUSH
15622: LD_INT 23
15624: EQUAL
15625: IFFALSE 15635
// sOilTower := true ;
15627: LD_ADDR_EXP 93
15631: PUSH
15632: LD_INT 1
15634: ST_TO_ADDR
// if p3 = 24 then
15635: LD_VAR 0 3
15639: PUSH
15640: LD_INT 24
15642: EQUAL
15643: IFFALSE 15653
// sShovel := true ;
15645: LD_ADDR_EXP 94
15649: PUSH
15650: LD_INT 1
15652: ST_TO_ADDR
// if p3 = 25 then
15653: LD_VAR 0 3
15657: PUSH
15658: LD_INT 25
15660: EQUAL
15661: IFFALSE 15671
// sSheik := true ;
15663: LD_ADDR_EXP 95
15667: PUSH
15668: LD_INT 1
15670: ST_TO_ADDR
// if p3 = 26 then
15671: LD_VAR 0 3
15675: PUSH
15676: LD_INT 26
15678: EQUAL
15679: IFFALSE 15689
// sEarthquake := true ;
15681: LD_ADDR_EXP 97
15685: PUSH
15686: LD_INT 1
15688: ST_TO_ADDR
// if p3 = 27 then
15689: LD_VAR 0 3
15693: PUSH
15694: LD_INT 27
15696: EQUAL
15697: IFFALSE 15707
// sAI := true ;
15699: LD_ADDR_EXP 98
15703: PUSH
15704: LD_INT 1
15706: ST_TO_ADDR
// if p3 = 28 then
15707: LD_VAR 0 3
15711: PUSH
15712: LD_INT 28
15714: EQUAL
15715: IFFALSE 15725
// sCargo := true ;
15717: LD_ADDR_EXP 101
15721: PUSH
15722: LD_INT 1
15724: ST_TO_ADDR
// if p3 = 29 then
15725: LD_VAR 0 3
15729: PUSH
15730: LD_INT 29
15732: EQUAL
15733: IFFALSE 15743
// sDLaser := true ;
15735: LD_ADDR_EXP 102
15739: PUSH
15740: LD_INT 1
15742: ST_TO_ADDR
// if p3 = 30 then
15743: LD_VAR 0 3
15747: PUSH
15748: LD_INT 30
15750: EQUAL
15751: IFFALSE 15761
// sExchange := true ;
15753: LD_ADDR_EXP 103
15757: PUSH
15758: LD_INT 1
15760: ST_TO_ADDR
// if p3 = 31 then
15761: LD_VAR 0 3
15765: PUSH
15766: LD_INT 31
15768: EQUAL
15769: IFFALSE 15779
// sFac := true ;
15771: LD_ADDR_EXP 104
15775: PUSH
15776: LD_INT 1
15778: ST_TO_ADDR
// if p3 = 32 then
15779: LD_VAR 0 3
15783: PUSH
15784: LD_INT 32
15786: EQUAL
15787: IFFALSE 15797
// sPower := true ;
15789: LD_ADDR_EXP 105
15793: PUSH
15794: LD_INT 1
15796: ST_TO_ADDR
// if p3 = 33 then
15797: LD_VAR 0 3
15801: PUSH
15802: LD_INT 33
15804: EQUAL
15805: IFFALSE 15815
// sRandom := true ;
15807: LD_ADDR_EXP 106
15811: PUSH
15812: LD_INT 1
15814: ST_TO_ADDR
// if p3 = 34 then
15815: LD_VAR 0 3
15819: PUSH
15820: LD_INT 34
15822: EQUAL
15823: IFFALSE 15833
// sShield := true ;
15825: LD_ADDR_EXP 107
15829: PUSH
15830: LD_INT 1
15832: ST_TO_ADDR
// if p3 = 35 then
15833: LD_VAR 0 3
15837: PUSH
15838: LD_INT 35
15840: EQUAL
15841: IFFALSE 15851
// sTime := true ;
15843: LD_ADDR_EXP 108
15847: PUSH
15848: LD_INT 1
15850: ST_TO_ADDR
// if p3 = 36 then
15851: LD_VAR 0 3
15855: PUSH
15856: LD_INT 36
15858: EQUAL
15859: IFFALSE 15869
// sTools := true ;
15861: LD_ADDR_EXP 109
15865: PUSH
15866: LD_INT 1
15868: ST_TO_ADDR
// if p3 = 101 then
15869: LD_VAR 0 3
15873: PUSH
15874: LD_INT 101
15876: EQUAL
15877: IFFALSE 15887
// sSold := true ;
15879: LD_ADDR_EXP 74
15883: PUSH
15884: LD_INT 1
15886: ST_TO_ADDR
// if p3 = 102 then
15887: LD_VAR 0 3
15891: PUSH
15892: LD_INT 102
15894: EQUAL
15895: IFFALSE 15905
// sDiff := true ;
15897: LD_ADDR_EXP 75
15901: PUSH
15902: LD_INT 1
15904: ST_TO_ADDR
// if p3 = 103 then
15905: LD_VAR 0 3
15909: PUSH
15910: LD_INT 103
15912: EQUAL
15913: IFFALSE 15923
// sFog := true ;
15915: LD_ADDR_EXP 78
15919: PUSH
15920: LD_INT 1
15922: ST_TO_ADDR
// if p3 = 104 then
15923: LD_VAR 0 3
15927: PUSH
15928: LD_INT 104
15930: EQUAL
15931: IFFALSE 15941
// sReset := true ;
15933: LD_ADDR_EXP 79
15937: PUSH
15938: LD_INT 1
15940: ST_TO_ADDR
// if p3 = 105 then
15941: LD_VAR 0 3
15945: PUSH
15946: LD_INT 105
15948: EQUAL
15949: IFFALSE 15959
// sSun := true ;
15951: LD_ADDR_EXP 80
15955: PUSH
15956: LD_INT 1
15958: ST_TO_ADDR
// if p3 = 106 then
15959: LD_VAR 0 3
15963: PUSH
15964: LD_INT 106
15966: EQUAL
15967: IFFALSE 15977
// sTiger := true ;
15969: LD_ADDR_EXP 76
15973: PUSH
15974: LD_INT 1
15976: ST_TO_ADDR
// if p3 = 107 then
15977: LD_VAR 0 3
15981: PUSH
15982: LD_INT 107
15984: EQUAL
15985: IFFALSE 15995
// sBomb := true ;
15987: LD_ADDR_EXP 77
15991: PUSH
15992: LD_INT 1
15994: ST_TO_ADDR
// if p3 = 108 then
15995: LD_VAR 0 3
15999: PUSH
16000: LD_INT 108
16002: EQUAL
16003: IFFALSE 16013
// sWound := true ;
16005: LD_ADDR_EXP 85
16009: PUSH
16010: LD_INT 1
16012: ST_TO_ADDR
// if p3 = 109 then
16013: LD_VAR 0 3
16017: PUSH
16018: LD_INT 109
16020: EQUAL
16021: IFFALSE 16031
// sBetray := true ;
16023: LD_ADDR_EXP 89
16027: PUSH
16028: LD_INT 1
16030: ST_TO_ADDR
// if p3 = 110 then
16031: LD_VAR 0 3
16035: PUSH
16036: LD_INT 110
16038: EQUAL
16039: IFFALSE 16049
// sContamin := true ;
16041: LD_ADDR_EXP 90
16045: PUSH
16046: LD_INT 1
16048: ST_TO_ADDR
// if p3 = 111 then
16049: LD_VAR 0 3
16053: PUSH
16054: LD_INT 111
16056: EQUAL
16057: IFFALSE 16067
// sOil := true ;
16059: LD_ADDR_EXP 92
16063: PUSH
16064: LD_INT 1
16066: ST_TO_ADDR
// if p3 = 112 then
16067: LD_VAR 0 3
16071: PUSH
16072: LD_INT 112
16074: EQUAL
16075: IFFALSE 16085
// sStu := true ;
16077: LD_ADDR_EXP 96
16081: PUSH
16082: LD_INT 1
16084: ST_TO_ADDR
// if p3 = 113 then
16085: LD_VAR 0 3
16089: PUSH
16090: LD_INT 113
16092: EQUAL
16093: IFFALSE 16103
// sBazooka := true ;
16095: LD_ADDR_EXP 99
16099: PUSH
16100: LD_INT 1
16102: ST_TO_ADDR
// if p3 = 114 then
16103: LD_VAR 0 3
16107: PUSH
16108: LD_INT 114
16110: EQUAL
16111: IFFALSE 16121
// sMortar := true ;
16113: LD_ADDR_EXP 100
16117: PUSH
16118: LD_INT 1
16120: ST_TO_ADDR
// if p3 = 115 then
16121: LD_VAR 0 3
16125: PUSH
16126: LD_INT 115
16128: EQUAL
16129: IFFALSE 16139
// sRanger := true ;
16131: LD_ADDR_EXP 110
16135: PUSH
16136: LD_INT 1
16138: ST_TO_ADDR
// if p3 = 116 then
16139: LD_VAR 0 3
16143: PUSH
16144: LD_INT 116
16146: EQUAL
16147: IFFALSE 16157
// sComputer := true ;
16149: LD_ADDR_EXP 111
16153: PUSH
16154: LD_INT 1
16156: ST_TO_ADDR
// if p3 = 117 then
16157: LD_VAR 0 3
16161: PUSH
16162: LD_INT 117
16164: EQUAL
16165: IFFALSE 16175
// s30 := true ;
16167: LD_ADDR_EXP 112
16171: PUSH
16172: LD_INT 1
16174: ST_TO_ADDR
// if p3 = 118 then
16175: LD_VAR 0 3
16179: PUSH
16180: LD_INT 118
16182: EQUAL
16183: IFFALSE 16193
// s60 := true ;
16185: LD_ADDR_EXP 113
16189: PUSH
16190: LD_INT 1
16192: ST_TO_ADDR
// end ; if p2 = 101 then
16193: LD_VAR 0 2
16197: PUSH
16198: LD_INT 101
16200: EQUAL
16201: IFFALSE 16329
// begin case p3 of 1 :
16203: LD_VAR 0 3
16207: PUSH
16208: LD_INT 1
16210: DOUBLE
16211: EQUAL
16212: IFTRUE 16216
16214: GO 16223
16216: POP
// hHackUnlimitedResources ; 2 :
16217: CALL 27925 0 0
16221: GO 16329
16223: LD_INT 2
16225: DOUBLE
16226: EQUAL
16227: IFTRUE 16231
16229: GO 16238
16231: POP
// hHackSetLevel10 ; 3 :
16232: CALL 28058 0 0
16236: GO 16329
16238: LD_INT 3
16240: DOUBLE
16241: EQUAL
16242: IFTRUE 16246
16244: GO 16253
16246: POP
// hHackSetLevel10YourUnits ; 4 :
16247: CALL 28143 0 0
16251: GO 16329
16253: LD_INT 4
16255: DOUBLE
16256: EQUAL
16257: IFTRUE 16261
16259: GO 16268
16261: POP
// hHackInvincible ; 5 :
16262: CALL 28591 0 0
16266: GO 16329
16268: LD_INT 5
16270: DOUBLE
16271: EQUAL
16272: IFTRUE 16276
16274: GO 16283
16276: POP
// hHackInvisible ; 6 :
16277: CALL 28702 0 0
16281: GO 16329
16283: LD_INT 6
16285: DOUBLE
16286: EQUAL
16287: IFTRUE 16291
16289: GO 16298
16291: POP
// hHackChangeYourSide ; 7 :
16292: CALL 28759 0 0
16296: GO 16329
16298: LD_INT 7
16300: DOUBLE
16301: EQUAL
16302: IFTRUE 16306
16304: GO 16313
16306: POP
// hHackChangeUnitSide ; 8 :
16307: CALL 28801 0 0
16311: GO 16329
16313: LD_INT 8
16315: DOUBLE
16316: EQUAL
16317: IFTRUE 16321
16319: GO 16328
16321: POP
// hHackFog ; end ;
16322: CALL 28902 0 0
16326: GO 16329
16328: POP
// end ; end ;
16329: LD_VAR 0 7
16333: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
16334: GO 16336
16336: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
16337: LD_STRING initStreamRollete();
16339: PPUSH
16340: CALL_OW 559
// InitStreamMode ;
16344: CALL 16353 0 0
// DefineStreamItems ( ) ;
16348: CALL 16817 0 0
// end ;
16352: END
// function InitStreamMode ; begin
16353: LD_INT 0
16355: PPUSH
// streamModeActive := false ;
16356: LD_ADDR_EXP 57
16360: PUSH
16361: LD_INT 0
16363: ST_TO_ADDR
// normalCounter := 36 ;
16364: LD_ADDR_EXP 58
16368: PUSH
16369: LD_INT 36
16371: ST_TO_ADDR
// hardcoreCounter := 16 ;
16372: LD_ADDR_EXP 59
16376: PUSH
16377: LD_INT 16
16379: ST_TO_ADDR
// sRocket := false ;
16380: LD_ADDR_EXP 62
16384: PUSH
16385: LD_INT 0
16387: ST_TO_ADDR
// sSpeed := false ;
16388: LD_ADDR_EXP 61
16392: PUSH
16393: LD_INT 0
16395: ST_TO_ADDR
// sEngine := false ;
16396: LD_ADDR_EXP 63
16400: PUSH
16401: LD_INT 0
16403: ST_TO_ADDR
// sSpec := false ;
16404: LD_ADDR_EXP 60
16408: PUSH
16409: LD_INT 0
16411: ST_TO_ADDR
// sLevel := false ;
16412: LD_ADDR_EXP 64
16416: PUSH
16417: LD_INT 0
16419: ST_TO_ADDR
// sArmoury := false ;
16420: LD_ADDR_EXP 65
16424: PUSH
16425: LD_INT 0
16427: ST_TO_ADDR
// sRadar := false ;
16428: LD_ADDR_EXP 66
16432: PUSH
16433: LD_INT 0
16435: ST_TO_ADDR
// sBunker := false ;
16436: LD_ADDR_EXP 67
16440: PUSH
16441: LD_INT 0
16443: ST_TO_ADDR
// sHack := false ;
16444: LD_ADDR_EXP 68
16448: PUSH
16449: LD_INT 0
16451: ST_TO_ADDR
// sFire := false ;
16452: LD_ADDR_EXP 69
16456: PUSH
16457: LD_INT 0
16459: ST_TO_ADDR
// sRefresh := false ;
16460: LD_ADDR_EXP 70
16464: PUSH
16465: LD_INT 0
16467: ST_TO_ADDR
// sExp := false ;
16468: LD_ADDR_EXP 71
16472: PUSH
16473: LD_INT 0
16475: ST_TO_ADDR
// sDepot := false ;
16476: LD_ADDR_EXP 72
16480: PUSH
16481: LD_INT 0
16483: ST_TO_ADDR
// sFlag := false ;
16484: LD_ADDR_EXP 73
16488: PUSH
16489: LD_INT 0
16491: ST_TO_ADDR
// sKamikadze := false ;
16492: LD_ADDR_EXP 81
16496: PUSH
16497: LD_INT 0
16499: ST_TO_ADDR
// sTroll := false ;
16500: LD_ADDR_EXP 82
16504: PUSH
16505: LD_INT 0
16507: ST_TO_ADDR
// sSlow := false ;
16508: LD_ADDR_EXP 83
16512: PUSH
16513: LD_INT 0
16515: ST_TO_ADDR
// sLack := false ;
16516: LD_ADDR_EXP 84
16520: PUSH
16521: LD_INT 0
16523: ST_TO_ADDR
// sTank := false ;
16524: LD_ADDR_EXP 86
16528: PUSH
16529: LD_INT 0
16531: ST_TO_ADDR
// sRemote := false ;
16532: LD_ADDR_EXP 87
16536: PUSH
16537: LD_INT 0
16539: ST_TO_ADDR
// sPowell := false ;
16540: LD_ADDR_EXP 88
16544: PUSH
16545: LD_INT 0
16547: ST_TO_ADDR
// sTeleport := false ;
16548: LD_ADDR_EXP 91
16552: PUSH
16553: LD_INT 0
16555: ST_TO_ADDR
// sOilTower := false ;
16556: LD_ADDR_EXP 93
16560: PUSH
16561: LD_INT 0
16563: ST_TO_ADDR
// sShovel := false ;
16564: LD_ADDR_EXP 94
16568: PUSH
16569: LD_INT 0
16571: ST_TO_ADDR
// sSheik := false ;
16572: LD_ADDR_EXP 95
16576: PUSH
16577: LD_INT 0
16579: ST_TO_ADDR
// sEarthquake := false ;
16580: LD_ADDR_EXP 97
16584: PUSH
16585: LD_INT 0
16587: ST_TO_ADDR
// sAI := false ;
16588: LD_ADDR_EXP 98
16592: PUSH
16593: LD_INT 0
16595: ST_TO_ADDR
// sCargo := false ;
16596: LD_ADDR_EXP 101
16600: PUSH
16601: LD_INT 0
16603: ST_TO_ADDR
// sDLaser := false ;
16604: LD_ADDR_EXP 102
16608: PUSH
16609: LD_INT 0
16611: ST_TO_ADDR
// sExchange := false ;
16612: LD_ADDR_EXP 103
16616: PUSH
16617: LD_INT 0
16619: ST_TO_ADDR
// sFac := false ;
16620: LD_ADDR_EXP 104
16624: PUSH
16625: LD_INT 0
16627: ST_TO_ADDR
// sPower := false ;
16628: LD_ADDR_EXP 105
16632: PUSH
16633: LD_INT 0
16635: ST_TO_ADDR
// sRandom := false ;
16636: LD_ADDR_EXP 106
16640: PUSH
16641: LD_INT 0
16643: ST_TO_ADDR
// sShield := false ;
16644: LD_ADDR_EXP 107
16648: PUSH
16649: LD_INT 0
16651: ST_TO_ADDR
// sTime := false ;
16652: LD_ADDR_EXP 108
16656: PUSH
16657: LD_INT 0
16659: ST_TO_ADDR
// sTools := false ;
16660: LD_ADDR_EXP 109
16664: PUSH
16665: LD_INT 0
16667: ST_TO_ADDR
// sSold := false ;
16668: LD_ADDR_EXP 74
16672: PUSH
16673: LD_INT 0
16675: ST_TO_ADDR
// sDiff := false ;
16676: LD_ADDR_EXP 75
16680: PUSH
16681: LD_INT 0
16683: ST_TO_ADDR
// sFog := false ;
16684: LD_ADDR_EXP 78
16688: PUSH
16689: LD_INT 0
16691: ST_TO_ADDR
// sReset := false ;
16692: LD_ADDR_EXP 79
16696: PUSH
16697: LD_INT 0
16699: ST_TO_ADDR
// sSun := false ;
16700: LD_ADDR_EXP 80
16704: PUSH
16705: LD_INT 0
16707: ST_TO_ADDR
// sTiger := false ;
16708: LD_ADDR_EXP 76
16712: PUSH
16713: LD_INT 0
16715: ST_TO_ADDR
// sBomb := false ;
16716: LD_ADDR_EXP 77
16720: PUSH
16721: LD_INT 0
16723: ST_TO_ADDR
// sWound := false ;
16724: LD_ADDR_EXP 85
16728: PUSH
16729: LD_INT 0
16731: ST_TO_ADDR
// sBetray := false ;
16732: LD_ADDR_EXP 89
16736: PUSH
16737: LD_INT 0
16739: ST_TO_ADDR
// sContamin := false ;
16740: LD_ADDR_EXP 90
16744: PUSH
16745: LD_INT 0
16747: ST_TO_ADDR
// sOil := false ;
16748: LD_ADDR_EXP 92
16752: PUSH
16753: LD_INT 0
16755: ST_TO_ADDR
// sStu := false ;
16756: LD_ADDR_EXP 96
16760: PUSH
16761: LD_INT 0
16763: ST_TO_ADDR
// sBazooka := false ;
16764: LD_ADDR_EXP 99
16768: PUSH
16769: LD_INT 0
16771: ST_TO_ADDR
// sMortar := false ;
16772: LD_ADDR_EXP 100
16776: PUSH
16777: LD_INT 0
16779: ST_TO_ADDR
// sRanger := false ;
16780: LD_ADDR_EXP 110
16784: PUSH
16785: LD_INT 0
16787: ST_TO_ADDR
// sComputer := false ;
16788: LD_ADDR_EXP 111
16792: PUSH
16793: LD_INT 0
16795: ST_TO_ADDR
// s30 := false ;
16796: LD_ADDR_EXP 112
16800: PUSH
16801: LD_INT 0
16803: ST_TO_ADDR
// s60 := false ;
16804: LD_ADDR_EXP 113
16808: PUSH
16809: LD_INT 0
16811: ST_TO_ADDR
// end ;
16812: LD_VAR 0 1
16816: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
16817: LD_INT 0
16819: PPUSH
16820: PPUSH
16821: PPUSH
16822: PPUSH
16823: PPUSH
// result := [ ] ;
16824: LD_ADDR_VAR 0 1
16828: PUSH
16829: EMPTY
16830: ST_TO_ADDR
// if campaign_id = 1 then
16831: LD_OWVAR 69
16835: PUSH
16836: LD_INT 1
16838: EQUAL
16839: IFFALSE 20005
// begin case mission_number of 1 :
16841: LD_OWVAR 70
16845: PUSH
16846: LD_INT 1
16848: DOUBLE
16849: EQUAL
16850: IFTRUE 16854
16852: GO 16930
16854: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
16855: LD_ADDR_VAR 0 1
16859: PUSH
16860: LD_INT 2
16862: PUSH
16863: LD_INT 4
16865: PUSH
16866: LD_INT 11
16868: PUSH
16869: LD_INT 12
16871: PUSH
16872: LD_INT 15
16874: PUSH
16875: LD_INT 16
16877: PUSH
16878: LD_INT 22
16880: PUSH
16881: LD_INT 23
16883: PUSH
16884: LD_INT 26
16886: PUSH
16887: EMPTY
16888: LIST
16889: LIST
16890: LIST
16891: LIST
16892: LIST
16893: LIST
16894: LIST
16895: LIST
16896: LIST
16897: PUSH
16898: LD_INT 101
16900: PUSH
16901: LD_INT 102
16903: PUSH
16904: LD_INT 106
16906: PUSH
16907: LD_INT 116
16909: PUSH
16910: LD_INT 117
16912: PUSH
16913: LD_INT 118
16915: PUSH
16916: EMPTY
16917: LIST
16918: LIST
16919: LIST
16920: LIST
16921: LIST
16922: LIST
16923: PUSH
16924: EMPTY
16925: LIST
16926: LIST
16927: ST_TO_ADDR
16928: GO 20003
16930: LD_INT 2
16932: DOUBLE
16933: EQUAL
16934: IFTRUE 16938
16936: GO 17022
16938: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
16939: LD_ADDR_VAR 0 1
16943: PUSH
16944: LD_INT 2
16946: PUSH
16947: LD_INT 4
16949: PUSH
16950: LD_INT 11
16952: PUSH
16953: LD_INT 12
16955: PUSH
16956: LD_INT 15
16958: PUSH
16959: LD_INT 16
16961: PUSH
16962: LD_INT 22
16964: PUSH
16965: LD_INT 23
16967: PUSH
16968: LD_INT 26
16970: PUSH
16971: EMPTY
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: LIST
16981: PUSH
16982: LD_INT 101
16984: PUSH
16985: LD_INT 102
16987: PUSH
16988: LD_INT 105
16990: PUSH
16991: LD_INT 106
16993: PUSH
16994: LD_INT 108
16996: PUSH
16997: LD_INT 116
16999: PUSH
17000: LD_INT 117
17002: PUSH
17003: LD_INT 118
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: LIST
17010: LIST
17011: LIST
17012: LIST
17013: LIST
17014: LIST
17015: PUSH
17016: EMPTY
17017: LIST
17018: LIST
17019: ST_TO_ADDR
17020: GO 20003
17022: LD_INT 3
17024: DOUBLE
17025: EQUAL
17026: IFTRUE 17030
17028: GO 17118
17030: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
17031: LD_ADDR_VAR 0 1
17035: PUSH
17036: LD_INT 2
17038: PUSH
17039: LD_INT 4
17041: PUSH
17042: LD_INT 5
17044: PUSH
17045: LD_INT 11
17047: PUSH
17048: LD_INT 12
17050: PUSH
17051: LD_INT 15
17053: PUSH
17054: LD_INT 16
17056: PUSH
17057: LD_INT 22
17059: PUSH
17060: LD_INT 26
17062: PUSH
17063: LD_INT 36
17065: PUSH
17066: EMPTY
17067: LIST
17068: LIST
17069: LIST
17070: LIST
17071: LIST
17072: LIST
17073: LIST
17074: LIST
17075: LIST
17076: LIST
17077: PUSH
17078: LD_INT 101
17080: PUSH
17081: LD_INT 102
17083: PUSH
17084: LD_INT 105
17086: PUSH
17087: LD_INT 106
17089: PUSH
17090: LD_INT 108
17092: PUSH
17093: LD_INT 116
17095: PUSH
17096: LD_INT 117
17098: PUSH
17099: LD_INT 118
17101: PUSH
17102: EMPTY
17103: LIST
17104: LIST
17105: LIST
17106: LIST
17107: LIST
17108: LIST
17109: LIST
17110: LIST
17111: PUSH
17112: EMPTY
17113: LIST
17114: LIST
17115: ST_TO_ADDR
17116: GO 20003
17118: LD_INT 4
17120: DOUBLE
17121: EQUAL
17122: IFTRUE 17126
17124: GO 17222
17126: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
17127: LD_ADDR_VAR 0 1
17131: PUSH
17132: LD_INT 2
17134: PUSH
17135: LD_INT 4
17137: PUSH
17138: LD_INT 5
17140: PUSH
17141: LD_INT 8
17143: PUSH
17144: LD_INT 11
17146: PUSH
17147: LD_INT 12
17149: PUSH
17150: LD_INT 15
17152: PUSH
17153: LD_INT 16
17155: PUSH
17156: LD_INT 22
17158: PUSH
17159: LD_INT 23
17161: PUSH
17162: LD_INT 26
17164: PUSH
17165: LD_INT 36
17167: PUSH
17168: EMPTY
17169: LIST
17170: LIST
17171: LIST
17172: LIST
17173: LIST
17174: LIST
17175: LIST
17176: LIST
17177: LIST
17178: LIST
17179: LIST
17180: LIST
17181: PUSH
17182: LD_INT 101
17184: PUSH
17185: LD_INT 102
17187: PUSH
17188: LD_INT 105
17190: PUSH
17191: LD_INT 106
17193: PUSH
17194: LD_INT 108
17196: PUSH
17197: LD_INT 116
17199: PUSH
17200: LD_INT 117
17202: PUSH
17203: LD_INT 118
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: ST_TO_ADDR
17220: GO 20003
17222: LD_INT 5
17224: DOUBLE
17225: EQUAL
17226: IFTRUE 17230
17228: GO 17342
17230: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
17231: LD_ADDR_VAR 0 1
17235: PUSH
17236: LD_INT 2
17238: PUSH
17239: LD_INT 4
17241: PUSH
17242: LD_INT 5
17244: PUSH
17245: LD_INT 6
17247: PUSH
17248: LD_INT 8
17250: PUSH
17251: LD_INT 11
17253: PUSH
17254: LD_INT 12
17256: PUSH
17257: LD_INT 15
17259: PUSH
17260: LD_INT 16
17262: PUSH
17263: LD_INT 22
17265: PUSH
17266: LD_INT 23
17268: PUSH
17269: LD_INT 25
17271: PUSH
17272: LD_INT 26
17274: PUSH
17275: LD_INT 36
17277: PUSH
17278: EMPTY
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: LIST
17286: LIST
17287: LIST
17288: LIST
17289: LIST
17290: LIST
17291: LIST
17292: LIST
17293: PUSH
17294: LD_INT 101
17296: PUSH
17297: LD_INT 102
17299: PUSH
17300: LD_INT 105
17302: PUSH
17303: LD_INT 106
17305: PUSH
17306: LD_INT 108
17308: PUSH
17309: LD_INT 109
17311: PUSH
17312: LD_INT 112
17314: PUSH
17315: LD_INT 116
17317: PUSH
17318: LD_INT 117
17320: PUSH
17321: LD_INT 118
17323: PUSH
17324: EMPTY
17325: LIST
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: LIST
17331: LIST
17332: LIST
17333: LIST
17334: LIST
17335: PUSH
17336: EMPTY
17337: LIST
17338: LIST
17339: ST_TO_ADDR
17340: GO 20003
17342: LD_INT 6
17344: DOUBLE
17345: EQUAL
17346: IFTRUE 17350
17348: GO 17482
17350: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
17351: LD_ADDR_VAR 0 1
17355: PUSH
17356: LD_INT 2
17358: PUSH
17359: LD_INT 4
17361: PUSH
17362: LD_INT 5
17364: PUSH
17365: LD_INT 6
17367: PUSH
17368: LD_INT 8
17370: PUSH
17371: LD_INT 11
17373: PUSH
17374: LD_INT 12
17376: PUSH
17377: LD_INT 15
17379: PUSH
17380: LD_INT 16
17382: PUSH
17383: LD_INT 20
17385: PUSH
17386: LD_INT 21
17388: PUSH
17389: LD_INT 22
17391: PUSH
17392: LD_INT 23
17394: PUSH
17395: LD_INT 25
17397: PUSH
17398: LD_INT 26
17400: PUSH
17401: LD_INT 30
17403: PUSH
17404: LD_INT 31
17406: PUSH
17407: LD_INT 32
17409: PUSH
17410: LD_INT 36
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: PUSH
17434: LD_INT 101
17436: PUSH
17437: LD_INT 102
17439: PUSH
17440: LD_INT 105
17442: PUSH
17443: LD_INT 106
17445: PUSH
17446: LD_INT 108
17448: PUSH
17449: LD_INT 109
17451: PUSH
17452: LD_INT 112
17454: PUSH
17455: LD_INT 116
17457: PUSH
17458: LD_INT 117
17460: PUSH
17461: LD_INT 118
17463: PUSH
17464: EMPTY
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: PUSH
17476: EMPTY
17477: LIST
17478: LIST
17479: ST_TO_ADDR
17480: GO 20003
17482: LD_INT 7
17484: DOUBLE
17485: EQUAL
17486: IFTRUE 17490
17488: GO 17602
17490: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
17491: LD_ADDR_VAR 0 1
17495: PUSH
17496: LD_INT 2
17498: PUSH
17499: LD_INT 4
17501: PUSH
17502: LD_INT 5
17504: PUSH
17505: LD_INT 7
17507: PUSH
17508: LD_INT 11
17510: PUSH
17511: LD_INT 12
17513: PUSH
17514: LD_INT 15
17516: PUSH
17517: LD_INT 16
17519: PUSH
17520: LD_INT 20
17522: PUSH
17523: LD_INT 21
17525: PUSH
17526: LD_INT 22
17528: PUSH
17529: LD_INT 23
17531: PUSH
17532: LD_INT 25
17534: PUSH
17535: LD_INT 26
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: LIST
17542: LIST
17543: LIST
17544: LIST
17545: LIST
17546: LIST
17547: LIST
17548: LIST
17549: LIST
17550: LIST
17551: LIST
17552: LIST
17553: PUSH
17554: LD_INT 101
17556: PUSH
17557: LD_INT 102
17559: PUSH
17560: LD_INT 103
17562: PUSH
17563: LD_INT 105
17565: PUSH
17566: LD_INT 106
17568: PUSH
17569: LD_INT 108
17571: PUSH
17572: LD_INT 112
17574: PUSH
17575: LD_INT 116
17577: PUSH
17578: LD_INT 117
17580: PUSH
17581: LD_INT 118
17583: PUSH
17584: EMPTY
17585: LIST
17586: LIST
17587: LIST
17588: LIST
17589: LIST
17590: LIST
17591: LIST
17592: LIST
17593: LIST
17594: LIST
17595: PUSH
17596: EMPTY
17597: LIST
17598: LIST
17599: ST_TO_ADDR
17600: GO 20003
17602: LD_INT 8
17604: DOUBLE
17605: EQUAL
17606: IFTRUE 17610
17608: GO 17750
17610: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
17611: LD_ADDR_VAR 0 1
17615: PUSH
17616: LD_INT 2
17618: PUSH
17619: LD_INT 4
17621: PUSH
17622: LD_INT 5
17624: PUSH
17625: LD_INT 6
17627: PUSH
17628: LD_INT 7
17630: PUSH
17631: LD_INT 8
17633: PUSH
17634: LD_INT 11
17636: PUSH
17637: LD_INT 12
17639: PUSH
17640: LD_INT 15
17642: PUSH
17643: LD_INT 16
17645: PUSH
17646: LD_INT 20
17648: PUSH
17649: LD_INT 21
17651: PUSH
17652: LD_INT 22
17654: PUSH
17655: LD_INT 23
17657: PUSH
17658: LD_INT 25
17660: PUSH
17661: LD_INT 26
17663: PUSH
17664: LD_INT 30
17666: PUSH
17667: LD_INT 31
17669: PUSH
17670: LD_INT 32
17672: PUSH
17673: LD_INT 36
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: LIST
17680: LIST
17681: LIST
17682: LIST
17683: LIST
17684: LIST
17685: LIST
17686: LIST
17687: LIST
17688: LIST
17689: LIST
17690: LIST
17691: LIST
17692: LIST
17693: LIST
17694: LIST
17695: LIST
17696: LIST
17697: PUSH
17698: LD_INT 101
17700: PUSH
17701: LD_INT 102
17703: PUSH
17704: LD_INT 103
17706: PUSH
17707: LD_INT 105
17709: PUSH
17710: LD_INT 106
17712: PUSH
17713: LD_INT 108
17715: PUSH
17716: LD_INT 109
17718: PUSH
17719: LD_INT 112
17721: PUSH
17722: LD_INT 116
17724: PUSH
17725: LD_INT 117
17727: PUSH
17728: LD_INT 118
17730: PUSH
17731: EMPTY
17732: LIST
17733: LIST
17734: LIST
17735: LIST
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: PUSH
17744: EMPTY
17745: LIST
17746: LIST
17747: ST_TO_ADDR
17748: GO 20003
17750: LD_INT 9
17752: DOUBLE
17753: EQUAL
17754: IFTRUE 17758
17756: GO 17906
17758: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
17759: LD_ADDR_VAR 0 1
17763: PUSH
17764: LD_INT 2
17766: PUSH
17767: LD_INT 4
17769: PUSH
17770: LD_INT 5
17772: PUSH
17773: LD_INT 6
17775: PUSH
17776: LD_INT 7
17778: PUSH
17779: LD_INT 8
17781: PUSH
17782: LD_INT 11
17784: PUSH
17785: LD_INT 12
17787: PUSH
17788: LD_INT 15
17790: PUSH
17791: LD_INT 16
17793: PUSH
17794: LD_INT 20
17796: PUSH
17797: LD_INT 21
17799: PUSH
17800: LD_INT 22
17802: PUSH
17803: LD_INT 23
17805: PUSH
17806: LD_INT 25
17808: PUSH
17809: LD_INT 26
17811: PUSH
17812: LD_INT 28
17814: PUSH
17815: LD_INT 30
17817: PUSH
17818: LD_INT 31
17820: PUSH
17821: LD_INT 32
17823: PUSH
17824: LD_INT 36
17826: PUSH
17827: EMPTY
17828: LIST
17829: LIST
17830: LIST
17831: LIST
17832: LIST
17833: LIST
17834: LIST
17835: LIST
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: LIST
17841: LIST
17842: LIST
17843: LIST
17844: LIST
17845: LIST
17846: LIST
17847: LIST
17848: LIST
17849: PUSH
17850: LD_INT 101
17852: PUSH
17853: LD_INT 102
17855: PUSH
17856: LD_INT 103
17858: PUSH
17859: LD_INT 105
17861: PUSH
17862: LD_INT 106
17864: PUSH
17865: LD_INT 108
17867: PUSH
17868: LD_INT 109
17870: PUSH
17871: LD_INT 112
17873: PUSH
17874: LD_INT 114
17876: PUSH
17877: LD_INT 116
17879: PUSH
17880: LD_INT 117
17882: PUSH
17883: LD_INT 118
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: LIST
17890: LIST
17891: LIST
17892: LIST
17893: LIST
17894: LIST
17895: LIST
17896: LIST
17897: LIST
17898: LIST
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: ST_TO_ADDR
17904: GO 20003
17906: LD_INT 10
17908: DOUBLE
17909: EQUAL
17910: IFTRUE 17914
17912: GO 18110
17914: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
17915: LD_ADDR_VAR 0 1
17919: PUSH
17920: LD_INT 2
17922: PUSH
17923: LD_INT 4
17925: PUSH
17926: LD_INT 5
17928: PUSH
17929: LD_INT 6
17931: PUSH
17932: LD_INT 7
17934: PUSH
17935: LD_INT 8
17937: PUSH
17938: LD_INT 9
17940: PUSH
17941: LD_INT 10
17943: PUSH
17944: LD_INT 11
17946: PUSH
17947: LD_INT 12
17949: PUSH
17950: LD_INT 13
17952: PUSH
17953: LD_INT 14
17955: PUSH
17956: LD_INT 15
17958: PUSH
17959: LD_INT 16
17961: PUSH
17962: LD_INT 17
17964: PUSH
17965: LD_INT 18
17967: PUSH
17968: LD_INT 19
17970: PUSH
17971: LD_INT 20
17973: PUSH
17974: LD_INT 21
17976: PUSH
17977: LD_INT 22
17979: PUSH
17980: LD_INT 23
17982: PUSH
17983: LD_INT 24
17985: PUSH
17986: LD_INT 25
17988: PUSH
17989: LD_INT 26
17991: PUSH
17992: LD_INT 28
17994: PUSH
17995: LD_INT 30
17997: PUSH
17998: LD_INT 31
18000: PUSH
18001: LD_INT 32
18003: PUSH
18004: LD_INT 36
18006: PUSH
18007: EMPTY
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: LIST
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: LIST
18034: LIST
18035: LIST
18036: LIST
18037: PUSH
18038: LD_INT 101
18040: PUSH
18041: LD_INT 102
18043: PUSH
18044: LD_INT 103
18046: PUSH
18047: LD_INT 104
18049: PUSH
18050: LD_INT 105
18052: PUSH
18053: LD_INT 106
18055: PUSH
18056: LD_INT 107
18058: PUSH
18059: LD_INT 108
18061: PUSH
18062: LD_INT 109
18064: PUSH
18065: LD_INT 110
18067: PUSH
18068: LD_INT 111
18070: PUSH
18071: LD_INT 112
18073: PUSH
18074: LD_INT 114
18076: PUSH
18077: LD_INT 116
18079: PUSH
18080: LD_INT 117
18082: PUSH
18083: LD_INT 118
18085: PUSH
18086: EMPTY
18087: LIST
18088: LIST
18089: LIST
18090: LIST
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: LIST
18100: LIST
18101: LIST
18102: LIST
18103: PUSH
18104: EMPTY
18105: LIST
18106: LIST
18107: ST_TO_ADDR
18108: GO 20003
18110: LD_INT 11
18112: DOUBLE
18113: EQUAL
18114: IFTRUE 18118
18116: GO 18322
18118: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
18119: LD_ADDR_VAR 0 1
18123: PUSH
18124: LD_INT 2
18126: PUSH
18127: LD_INT 3
18129: PUSH
18130: LD_INT 4
18132: PUSH
18133: LD_INT 5
18135: PUSH
18136: LD_INT 6
18138: PUSH
18139: LD_INT 7
18141: PUSH
18142: LD_INT 8
18144: PUSH
18145: LD_INT 9
18147: PUSH
18148: LD_INT 10
18150: PUSH
18151: LD_INT 11
18153: PUSH
18154: LD_INT 12
18156: PUSH
18157: LD_INT 13
18159: PUSH
18160: LD_INT 14
18162: PUSH
18163: LD_INT 15
18165: PUSH
18166: LD_INT 16
18168: PUSH
18169: LD_INT 17
18171: PUSH
18172: LD_INT 18
18174: PUSH
18175: LD_INT 19
18177: PUSH
18178: LD_INT 20
18180: PUSH
18181: LD_INT 21
18183: PUSH
18184: LD_INT 22
18186: PUSH
18187: LD_INT 23
18189: PUSH
18190: LD_INT 24
18192: PUSH
18193: LD_INT 25
18195: PUSH
18196: LD_INT 26
18198: PUSH
18199: LD_INT 28
18201: PUSH
18202: LD_INT 30
18204: PUSH
18205: LD_INT 31
18207: PUSH
18208: LD_INT 32
18210: PUSH
18211: LD_INT 34
18213: PUSH
18214: LD_INT 36
18216: PUSH
18217: EMPTY
18218: LIST
18219: LIST
18220: LIST
18221: LIST
18222: LIST
18223: LIST
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: LIST
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: LIST
18240: LIST
18241: LIST
18242: LIST
18243: LIST
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: LIST
18249: PUSH
18250: LD_INT 101
18252: PUSH
18253: LD_INT 102
18255: PUSH
18256: LD_INT 103
18258: PUSH
18259: LD_INT 104
18261: PUSH
18262: LD_INT 105
18264: PUSH
18265: LD_INT 106
18267: PUSH
18268: LD_INT 107
18270: PUSH
18271: LD_INT 108
18273: PUSH
18274: LD_INT 109
18276: PUSH
18277: LD_INT 110
18279: PUSH
18280: LD_INT 111
18282: PUSH
18283: LD_INT 112
18285: PUSH
18286: LD_INT 114
18288: PUSH
18289: LD_INT 116
18291: PUSH
18292: LD_INT 117
18294: PUSH
18295: LD_INT 118
18297: PUSH
18298: EMPTY
18299: LIST
18300: LIST
18301: LIST
18302: LIST
18303: LIST
18304: LIST
18305: LIST
18306: LIST
18307: LIST
18308: LIST
18309: LIST
18310: LIST
18311: LIST
18312: LIST
18313: LIST
18314: LIST
18315: PUSH
18316: EMPTY
18317: LIST
18318: LIST
18319: ST_TO_ADDR
18320: GO 20003
18322: LD_INT 12
18324: DOUBLE
18325: EQUAL
18326: IFTRUE 18330
18328: GO 18550
18330: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
18331: LD_ADDR_VAR 0 1
18335: PUSH
18336: LD_INT 1
18338: PUSH
18339: LD_INT 2
18341: PUSH
18342: LD_INT 3
18344: PUSH
18345: LD_INT 4
18347: PUSH
18348: LD_INT 5
18350: PUSH
18351: LD_INT 6
18353: PUSH
18354: LD_INT 7
18356: PUSH
18357: LD_INT 8
18359: PUSH
18360: LD_INT 9
18362: PUSH
18363: LD_INT 10
18365: PUSH
18366: LD_INT 11
18368: PUSH
18369: LD_INT 12
18371: PUSH
18372: LD_INT 13
18374: PUSH
18375: LD_INT 14
18377: PUSH
18378: LD_INT 15
18380: PUSH
18381: LD_INT 16
18383: PUSH
18384: LD_INT 17
18386: PUSH
18387: LD_INT 18
18389: PUSH
18390: LD_INT 19
18392: PUSH
18393: LD_INT 20
18395: PUSH
18396: LD_INT 21
18398: PUSH
18399: LD_INT 22
18401: PUSH
18402: LD_INT 23
18404: PUSH
18405: LD_INT 24
18407: PUSH
18408: LD_INT 25
18410: PUSH
18411: LD_INT 26
18413: PUSH
18414: LD_INT 27
18416: PUSH
18417: LD_INT 28
18419: PUSH
18420: LD_INT 30
18422: PUSH
18423: LD_INT 31
18425: PUSH
18426: LD_INT 32
18428: PUSH
18429: LD_INT 33
18431: PUSH
18432: LD_INT 34
18434: PUSH
18435: LD_INT 36
18437: PUSH
18438: EMPTY
18439: LIST
18440: LIST
18441: LIST
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: LIST
18448: LIST
18449: LIST
18450: LIST
18451: LIST
18452: LIST
18453: LIST
18454: LIST
18455: LIST
18456: LIST
18457: LIST
18458: LIST
18459: LIST
18460: LIST
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: LIST
18471: LIST
18472: LIST
18473: PUSH
18474: LD_INT 101
18476: PUSH
18477: LD_INT 102
18479: PUSH
18480: LD_INT 103
18482: PUSH
18483: LD_INT 104
18485: PUSH
18486: LD_INT 105
18488: PUSH
18489: LD_INT 106
18491: PUSH
18492: LD_INT 107
18494: PUSH
18495: LD_INT 108
18497: PUSH
18498: LD_INT 109
18500: PUSH
18501: LD_INT 110
18503: PUSH
18504: LD_INT 111
18506: PUSH
18507: LD_INT 112
18509: PUSH
18510: LD_INT 113
18512: PUSH
18513: LD_INT 114
18515: PUSH
18516: LD_INT 116
18518: PUSH
18519: LD_INT 117
18521: PUSH
18522: LD_INT 118
18524: PUSH
18525: EMPTY
18526: LIST
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: LIST
18532: LIST
18533: LIST
18534: LIST
18535: LIST
18536: LIST
18537: LIST
18538: LIST
18539: LIST
18540: LIST
18541: LIST
18542: LIST
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: ST_TO_ADDR
18548: GO 20003
18550: LD_INT 13
18552: DOUBLE
18553: EQUAL
18554: IFTRUE 18558
18556: GO 18766
18558: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
18559: LD_ADDR_VAR 0 1
18563: PUSH
18564: LD_INT 1
18566: PUSH
18567: LD_INT 2
18569: PUSH
18570: LD_INT 3
18572: PUSH
18573: LD_INT 4
18575: PUSH
18576: LD_INT 5
18578: PUSH
18579: LD_INT 8
18581: PUSH
18582: LD_INT 9
18584: PUSH
18585: LD_INT 10
18587: PUSH
18588: LD_INT 11
18590: PUSH
18591: LD_INT 12
18593: PUSH
18594: LD_INT 14
18596: PUSH
18597: LD_INT 15
18599: PUSH
18600: LD_INT 16
18602: PUSH
18603: LD_INT 17
18605: PUSH
18606: LD_INT 18
18608: PUSH
18609: LD_INT 19
18611: PUSH
18612: LD_INT 20
18614: PUSH
18615: LD_INT 21
18617: PUSH
18618: LD_INT 22
18620: PUSH
18621: LD_INT 23
18623: PUSH
18624: LD_INT 24
18626: PUSH
18627: LD_INT 25
18629: PUSH
18630: LD_INT 26
18632: PUSH
18633: LD_INT 27
18635: PUSH
18636: LD_INT 28
18638: PUSH
18639: LD_INT 30
18641: PUSH
18642: LD_INT 31
18644: PUSH
18645: LD_INT 32
18647: PUSH
18648: LD_INT 33
18650: PUSH
18651: LD_INT 34
18653: PUSH
18654: LD_INT 36
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: LIST
18668: LIST
18669: LIST
18670: LIST
18671: LIST
18672: LIST
18673: LIST
18674: LIST
18675: LIST
18676: LIST
18677: LIST
18678: LIST
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: PUSH
18690: LD_INT 101
18692: PUSH
18693: LD_INT 102
18695: PUSH
18696: LD_INT 103
18698: PUSH
18699: LD_INT 104
18701: PUSH
18702: LD_INT 105
18704: PUSH
18705: LD_INT 106
18707: PUSH
18708: LD_INT 107
18710: PUSH
18711: LD_INT 108
18713: PUSH
18714: LD_INT 109
18716: PUSH
18717: LD_INT 110
18719: PUSH
18720: LD_INT 111
18722: PUSH
18723: LD_INT 112
18725: PUSH
18726: LD_INT 113
18728: PUSH
18729: LD_INT 114
18731: PUSH
18732: LD_INT 116
18734: PUSH
18735: LD_INT 117
18737: PUSH
18738: LD_INT 118
18740: PUSH
18741: EMPTY
18742: LIST
18743: LIST
18744: LIST
18745: LIST
18746: LIST
18747: LIST
18748: LIST
18749: LIST
18750: LIST
18751: LIST
18752: LIST
18753: LIST
18754: LIST
18755: LIST
18756: LIST
18757: LIST
18758: LIST
18759: PUSH
18760: EMPTY
18761: LIST
18762: LIST
18763: ST_TO_ADDR
18764: GO 20003
18766: LD_INT 14
18768: DOUBLE
18769: EQUAL
18770: IFTRUE 18774
18772: GO 18998
18774: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
18775: LD_ADDR_VAR 0 1
18779: PUSH
18780: LD_INT 1
18782: PUSH
18783: LD_INT 2
18785: PUSH
18786: LD_INT 3
18788: PUSH
18789: LD_INT 4
18791: PUSH
18792: LD_INT 5
18794: PUSH
18795: LD_INT 6
18797: PUSH
18798: LD_INT 7
18800: PUSH
18801: LD_INT 8
18803: PUSH
18804: LD_INT 9
18806: PUSH
18807: LD_INT 10
18809: PUSH
18810: LD_INT 11
18812: PUSH
18813: LD_INT 12
18815: PUSH
18816: LD_INT 13
18818: PUSH
18819: LD_INT 14
18821: PUSH
18822: LD_INT 15
18824: PUSH
18825: LD_INT 16
18827: PUSH
18828: LD_INT 17
18830: PUSH
18831: LD_INT 18
18833: PUSH
18834: LD_INT 19
18836: PUSH
18837: LD_INT 20
18839: PUSH
18840: LD_INT 21
18842: PUSH
18843: LD_INT 22
18845: PUSH
18846: LD_INT 23
18848: PUSH
18849: LD_INT 24
18851: PUSH
18852: LD_INT 25
18854: PUSH
18855: LD_INT 26
18857: PUSH
18858: LD_INT 27
18860: PUSH
18861: LD_INT 28
18863: PUSH
18864: LD_INT 29
18866: PUSH
18867: LD_INT 30
18869: PUSH
18870: LD_INT 31
18872: PUSH
18873: LD_INT 32
18875: PUSH
18876: LD_INT 33
18878: PUSH
18879: LD_INT 34
18881: PUSH
18882: LD_INT 36
18884: PUSH
18885: EMPTY
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: LIST
18891: LIST
18892: LIST
18893: LIST
18894: LIST
18895: LIST
18896: LIST
18897: LIST
18898: LIST
18899: LIST
18900: LIST
18901: LIST
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: PUSH
18922: LD_INT 101
18924: PUSH
18925: LD_INT 102
18927: PUSH
18928: LD_INT 103
18930: PUSH
18931: LD_INT 104
18933: PUSH
18934: LD_INT 105
18936: PUSH
18937: LD_INT 106
18939: PUSH
18940: LD_INT 107
18942: PUSH
18943: LD_INT 108
18945: PUSH
18946: LD_INT 109
18948: PUSH
18949: LD_INT 110
18951: PUSH
18952: LD_INT 111
18954: PUSH
18955: LD_INT 112
18957: PUSH
18958: LD_INT 113
18960: PUSH
18961: LD_INT 114
18963: PUSH
18964: LD_INT 116
18966: PUSH
18967: LD_INT 117
18969: PUSH
18970: LD_INT 118
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: LIST
18977: LIST
18978: LIST
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: PUSH
18992: EMPTY
18993: LIST
18994: LIST
18995: ST_TO_ADDR
18996: GO 20003
18998: LD_INT 15
19000: DOUBLE
19001: EQUAL
19002: IFTRUE 19006
19004: GO 19230
19006: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
19007: LD_ADDR_VAR 0 1
19011: PUSH
19012: LD_INT 1
19014: PUSH
19015: LD_INT 2
19017: PUSH
19018: LD_INT 3
19020: PUSH
19021: LD_INT 4
19023: PUSH
19024: LD_INT 5
19026: PUSH
19027: LD_INT 6
19029: PUSH
19030: LD_INT 7
19032: PUSH
19033: LD_INT 8
19035: PUSH
19036: LD_INT 9
19038: PUSH
19039: LD_INT 10
19041: PUSH
19042: LD_INT 11
19044: PUSH
19045: LD_INT 12
19047: PUSH
19048: LD_INT 13
19050: PUSH
19051: LD_INT 14
19053: PUSH
19054: LD_INT 15
19056: PUSH
19057: LD_INT 16
19059: PUSH
19060: LD_INT 17
19062: PUSH
19063: LD_INT 18
19065: PUSH
19066: LD_INT 19
19068: PUSH
19069: LD_INT 20
19071: PUSH
19072: LD_INT 21
19074: PUSH
19075: LD_INT 22
19077: PUSH
19078: LD_INT 23
19080: PUSH
19081: LD_INT 24
19083: PUSH
19084: LD_INT 25
19086: PUSH
19087: LD_INT 26
19089: PUSH
19090: LD_INT 27
19092: PUSH
19093: LD_INT 28
19095: PUSH
19096: LD_INT 29
19098: PUSH
19099: LD_INT 30
19101: PUSH
19102: LD_INT 31
19104: PUSH
19105: LD_INT 32
19107: PUSH
19108: LD_INT 33
19110: PUSH
19111: LD_INT 34
19113: PUSH
19114: LD_INT 36
19116: PUSH
19117: EMPTY
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: LIST
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: PUSH
19154: LD_INT 101
19156: PUSH
19157: LD_INT 102
19159: PUSH
19160: LD_INT 103
19162: PUSH
19163: LD_INT 104
19165: PUSH
19166: LD_INT 105
19168: PUSH
19169: LD_INT 106
19171: PUSH
19172: LD_INT 107
19174: PUSH
19175: LD_INT 108
19177: PUSH
19178: LD_INT 109
19180: PUSH
19181: LD_INT 110
19183: PUSH
19184: LD_INT 111
19186: PUSH
19187: LD_INT 112
19189: PUSH
19190: LD_INT 113
19192: PUSH
19193: LD_INT 114
19195: PUSH
19196: LD_INT 116
19198: PUSH
19199: LD_INT 117
19201: PUSH
19202: LD_INT 118
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: LIST
19209: LIST
19210: LIST
19211: LIST
19212: LIST
19213: LIST
19214: LIST
19215: LIST
19216: LIST
19217: LIST
19218: LIST
19219: LIST
19220: LIST
19221: LIST
19222: LIST
19223: PUSH
19224: EMPTY
19225: LIST
19226: LIST
19227: ST_TO_ADDR
19228: GO 20003
19230: LD_INT 16
19232: DOUBLE
19233: EQUAL
19234: IFTRUE 19238
19236: GO 19374
19238: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
19239: LD_ADDR_VAR 0 1
19243: PUSH
19244: LD_INT 2
19246: PUSH
19247: LD_INT 4
19249: PUSH
19250: LD_INT 5
19252: PUSH
19253: LD_INT 7
19255: PUSH
19256: LD_INT 11
19258: PUSH
19259: LD_INT 12
19261: PUSH
19262: LD_INT 15
19264: PUSH
19265: LD_INT 16
19267: PUSH
19268: LD_INT 20
19270: PUSH
19271: LD_INT 21
19273: PUSH
19274: LD_INT 22
19276: PUSH
19277: LD_INT 23
19279: PUSH
19280: LD_INT 25
19282: PUSH
19283: LD_INT 26
19285: PUSH
19286: LD_INT 30
19288: PUSH
19289: LD_INT 31
19291: PUSH
19292: LD_INT 32
19294: PUSH
19295: LD_INT 33
19297: PUSH
19298: LD_INT 34
19300: PUSH
19301: EMPTY
19302: LIST
19303: LIST
19304: LIST
19305: LIST
19306: LIST
19307: LIST
19308: LIST
19309: LIST
19310: LIST
19311: LIST
19312: LIST
19313: LIST
19314: LIST
19315: LIST
19316: LIST
19317: LIST
19318: LIST
19319: LIST
19320: LIST
19321: PUSH
19322: LD_INT 101
19324: PUSH
19325: LD_INT 102
19327: PUSH
19328: LD_INT 103
19330: PUSH
19331: LD_INT 106
19333: PUSH
19334: LD_INT 108
19336: PUSH
19337: LD_INT 112
19339: PUSH
19340: LD_INT 113
19342: PUSH
19343: LD_INT 114
19345: PUSH
19346: LD_INT 116
19348: PUSH
19349: LD_INT 117
19351: PUSH
19352: LD_INT 118
19354: PUSH
19355: EMPTY
19356: LIST
19357: LIST
19358: LIST
19359: LIST
19360: LIST
19361: LIST
19362: LIST
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: PUSH
19368: EMPTY
19369: LIST
19370: LIST
19371: ST_TO_ADDR
19372: GO 20003
19374: LD_INT 17
19376: DOUBLE
19377: EQUAL
19378: IFTRUE 19382
19380: GO 19606
19382: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
19383: LD_ADDR_VAR 0 1
19387: PUSH
19388: LD_INT 1
19390: PUSH
19391: LD_INT 2
19393: PUSH
19394: LD_INT 3
19396: PUSH
19397: LD_INT 4
19399: PUSH
19400: LD_INT 5
19402: PUSH
19403: LD_INT 6
19405: PUSH
19406: LD_INT 7
19408: PUSH
19409: LD_INT 8
19411: PUSH
19412: LD_INT 9
19414: PUSH
19415: LD_INT 10
19417: PUSH
19418: LD_INT 11
19420: PUSH
19421: LD_INT 12
19423: PUSH
19424: LD_INT 13
19426: PUSH
19427: LD_INT 14
19429: PUSH
19430: LD_INT 15
19432: PUSH
19433: LD_INT 16
19435: PUSH
19436: LD_INT 17
19438: PUSH
19439: LD_INT 18
19441: PUSH
19442: LD_INT 19
19444: PUSH
19445: LD_INT 20
19447: PUSH
19448: LD_INT 21
19450: PUSH
19451: LD_INT 22
19453: PUSH
19454: LD_INT 23
19456: PUSH
19457: LD_INT 24
19459: PUSH
19460: LD_INT 25
19462: PUSH
19463: LD_INT 26
19465: PUSH
19466: LD_INT 27
19468: PUSH
19469: LD_INT 28
19471: PUSH
19472: LD_INT 29
19474: PUSH
19475: LD_INT 30
19477: PUSH
19478: LD_INT 31
19480: PUSH
19481: LD_INT 32
19483: PUSH
19484: LD_INT 33
19486: PUSH
19487: LD_INT 34
19489: PUSH
19490: LD_INT 36
19492: PUSH
19493: EMPTY
19494: LIST
19495: LIST
19496: LIST
19497: LIST
19498: LIST
19499: LIST
19500: LIST
19501: LIST
19502: LIST
19503: LIST
19504: LIST
19505: LIST
19506: LIST
19507: LIST
19508: LIST
19509: LIST
19510: LIST
19511: LIST
19512: LIST
19513: LIST
19514: LIST
19515: LIST
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: PUSH
19530: LD_INT 101
19532: PUSH
19533: LD_INT 102
19535: PUSH
19536: LD_INT 103
19538: PUSH
19539: LD_INT 104
19541: PUSH
19542: LD_INT 105
19544: PUSH
19545: LD_INT 106
19547: PUSH
19548: LD_INT 107
19550: PUSH
19551: LD_INT 108
19553: PUSH
19554: LD_INT 109
19556: PUSH
19557: LD_INT 110
19559: PUSH
19560: LD_INT 111
19562: PUSH
19563: LD_INT 112
19565: PUSH
19566: LD_INT 113
19568: PUSH
19569: LD_INT 114
19571: PUSH
19572: LD_INT 116
19574: PUSH
19575: LD_INT 117
19577: PUSH
19578: LD_INT 118
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: LIST
19590: LIST
19591: LIST
19592: LIST
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: LIST
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: ST_TO_ADDR
19604: GO 20003
19606: LD_INT 18
19608: DOUBLE
19609: EQUAL
19610: IFTRUE 19614
19612: GO 19762
19614: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
19615: LD_ADDR_VAR 0 1
19619: PUSH
19620: LD_INT 2
19622: PUSH
19623: LD_INT 4
19625: PUSH
19626: LD_INT 5
19628: PUSH
19629: LD_INT 7
19631: PUSH
19632: LD_INT 11
19634: PUSH
19635: LD_INT 12
19637: PUSH
19638: LD_INT 15
19640: PUSH
19641: LD_INT 16
19643: PUSH
19644: LD_INT 20
19646: PUSH
19647: LD_INT 21
19649: PUSH
19650: LD_INT 22
19652: PUSH
19653: LD_INT 23
19655: PUSH
19656: LD_INT 25
19658: PUSH
19659: LD_INT 26
19661: PUSH
19662: LD_INT 30
19664: PUSH
19665: LD_INT 31
19667: PUSH
19668: LD_INT 32
19670: PUSH
19671: LD_INT 33
19673: PUSH
19674: LD_INT 34
19676: PUSH
19677: LD_INT 35
19679: PUSH
19680: LD_INT 36
19682: PUSH
19683: EMPTY
19684: LIST
19685: LIST
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: LIST
19691: LIST
19692: LIST
19693: LIST
19694: LIST
19695: LIST
19696: LIST
19697: LIST
19698: LIST
19699: LIST
19700: LIST
19701: LIST
19702: LIST
19703: LIST
19704: LIST
19705: PUSH
19706: LD_INT 101
19708: PUSH
19709: LD_INT 102
19711: PUSH
19712: LD_INT 103
19714: PUSH
19715: LD_INT 106
19717: PUSH
19718: LD_INT 108
19720: PUSH
19721: LD_INT 112
19723: PUSH
19724: LD_INT 113
19726: PUSH
19727: LD_INT 114
19729: PUSH
19730: LD_INT 115
19732: PUSH
19733: LD_INT 116
19735: PUSH
19736: LD_INT 117
19738: PUSH
19739: LD_INT 118
19741: PUSH
19742: EMPTY
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: ST_TO_ADDR
19760: GO 20003
19762: LD_INT 19
19764: DOUBLE
19765: EQUAL
19766: IFTRUE 19770
19768: GO 20002
19770: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
19771: LD_ADDR_VAR 0 1
19775: PUSH
19776: LD_INT 1
19778: PUSH
19779: LD_INT 2
19781: PUSH
19782: LD_INT 3
19784: PUSH
19785: LD_INT 4
19787: PUSH
19788: LD_INT 5
19790: PUSH
19791: LD_INT 6
19793: PUSH
19794: LD_INT 7
19796: PUSH
19797: LD_INT 8
19799: PUSH
19800: LD_INT 9
19802: PUSH
19803: LD_INT 10
19805: PUSH
19806: LD_INT 11
19808: PUSH
19809: LD_INT 12
19811: PUSH
19812: LD_INT 13
19814: PUSH
19815: LD_INT 14
19817: PUSH
19818: LD_INT 15
19820: PUSH
19821: LD_INT 16
19823: PUSH
19824: LD_INT 17
19826: PUSH
19827: LD_INT 18
19829: PUSH
19830: LD_INT 19
19832: PUSH
19833: LD_INT 20
19835: PUSH
19836: LD_INT 21
19838: PUSH
19839: LD_INT 22
19841: PUSH
19842: LD_INT 23
19844: PUSH
19845: LD_INT 24
19847: PUSH
19848: LD_INT 25
19850: PUSH
19851: LD_INT 26
19853: PUSH
19854: LD_INT 27
19856: PUSH
19857: LD_INT 28
19859: PUSH
19860: LD_INT 29
19862: PUSH
19863: LD_INT 30
19865: PUSH
19866: LD_INT 31
19868: PUSH
19869: LD_INT 32
19871: PUSH
19872: LD_INT 33
19874: PUSH
19875: LD_INT 34
19877: PUSH
19878: LD_INT 35
19880: PUSH
19881: LD_INT 36
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: LIST
19890: LIST
19891: LIST
19892: LIST
19893: LIST
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: LIST
19905: LIST
19906: LIST
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: LIST
19918: LIST
19919: LIST
19920: LIST
19921: PUSH
19922: LD_INT 101
19924: PUSH
19925: LD_INT 102
19927: PUSH
19928: LD_INT 103
19930: PUSH
19931: LD_INT 104
19933: PUSH
19934: LD_INT 105
19936: PUSH
19937: LD_INT 106
19939: PUSH
19940: LD_INT 107
19942: PUSH
19943: LD_INT 108
19945: PUSH
19946: LD_INT 109
19948: PUSH
19949: LD_INT 110
19951: PUSH
19952: LD_INT 111
19954: PUSH
19955: LD_INT 112
19957: PUSH
19958: LD_INT 113
19960: PUSH
19961: LD_INT 114
19963: PUSH
19964: LD_INT 115
19966: PUSH
19967: LD_INT 116
19969: PUSH
19970: LD_INT 117
19972: PUSH
19973: LD_INT 118
19975: PUSH
19976: EMPTY
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: PUSH
19996: EMPTY
19997: LIST
19998: LIST
19999: ST_TO_ADDR
20000: GO 20003
20002: POP
// end else
20003: GO 20234
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
20005: LD_ADDR_VAR 0 1
20009: PUSH
20010: LD_INT 1
20012: PUSH
20013: LD_INT 2
20015: PUSH
20016: LD_INT 3
20018: PUSH
20019: LD_INT 4
20021: PUSH
20022: LD_INT 5
20024: PUSH
20025: LD_INT 6
20027: PUSH
20028: LD_INT 7
20030: PUSH
20031: LD_INT 8
20033: PUSH
20034: LD_INT 9
20036: PUSH
20037: LD_INT 10
20039: PUSH
20040: LD_INT 11
20042: PUSH
20043: LD_INT 12
20045: PUSH
20046: LD_INT 13
20048: PUSH
20049: LD_INT 14
20051: PUSH
20052: LD_INT 15
20054: PUSH
20055: LD_INT 16
20057: PUSH
20058: LD_INT 17
20060: PUSH
20061: LD_INT 18
20063: PUSH
20064: LD_INT 19
20066: PUSH
20067: LD_INT 20
20069: PUSH
20070: LD_INT 21
20072: PUSH
20073: LD_INT 22
20075: PUSH
20076: LD_INT 23
20078: PUSH
20079: LD_INT 24
20081: PUSH
20082: LD_INT 25
20084: PUSH
20085: LD_INT 26
20087: PUSH
20088: LD_INT 27
20090: PUSH
20091: LD_INT 28
20093: PUSH
20094: LD_INT 29
20096: PUSH
20097: LD_INT 30
20099: PUSH
20100: LD_INT 31
20102: PUSH
20103: LD_INT 32
20105: PUSH
20106: LD_INT 33
20108: PUSH
20109: LD_INT 34
20111: PUSH
20112: LD_INT 35
20114: PUSH
20115: LD_INT 36
20117: PUSH
20118: EMPTY
20119: LIST
20120: LIST
20121: LIST
20122: LIST
20123: LIST
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: PUSH
20156: LD_INT 101
20158: PUSH
20159: LD_INT 102
20161: PUSH
20162: LD_INT 103
20164: PUSH
20165: LD_INT 104
20167: PUSH
20168: LD_INT 105
20170: PUSH
20171: LD_INT 106
20173: PUSH
20174: LD_INT 107
20176: PUSH
20177: LD_INT 108
20179: PUSH
20180: LD_INT 109
20182: PUSH
20183: LD_INT 110
20185: PUSH
20186: LD_INT 111
20188: PUSH
20189: LD_INT 112
20191: PUSH
20192: LD_INT 113
20194: PUSH
20195: LD_INT 114
20197: PUSH
20198: LD_INT 115
20200: PUSH
20201: LD_INT 116
20203: PUSH
20204: LD_INT 117
20206: PUSH
20207: LD_INT 118
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: LIST
20229: PUSH
20230: EMPTY
20231: LIST
20232: LIST
20233: ST_TO_ADDR
// if result then
20234: LD_VAR 0 1
20238: IFFALSE 20527
// begin normal :=  ;
20240: LD_ADDR_VAR 0 3
20244: PUSH
20245: LD_STRING 
20247: ST_TO_ADDR
// hardcore :=  ;
20248: LD_ADDR_VAR 0 4
20252: PUSH
20253: LD_STRING 
20255: ST_TO_ADDR
// for i = 1 to normalCounter do
20256: LD_ADDR_VAR 0 5
20260: PUSH
20261: DOUBLE
20262: LD_INT 1
20264: DEC
20265: ST_TO_ADDR
20266: LD_EXP 58
20270: PUSH
20271: FOR_TO
20272: IFFALSE 20373
// begin tmp := 0 ;
20274: LD_ADDR_VAR 0 2
20278: PUSH
20279: LD_STRING 0
20281: ST_TO_ADDR
// if result [ 1 ] then
20282: LD_VAR 0 1
20286: PUSH
20287: LD_INT 1
20289: ARRAY
20290: IFFALSE 20355
// if result [ 1 ] [ 1 ] = i then
20292: LD_VAR 0 1
20296: PUSH
20297: LD_INT 1
20299: ARRAY
20300: PUSH
20301: LD_INT 1
20303: ARRAY
20304: PUSH
20305: LD_VAR 0 5
20309: EQUAL
20310: IFFALSE 20355
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
20312: LD_ADDR_VAR 0 1
20316: PUSH
20317: LD_VAR 0 1
20321: PPUSH
20322: LD_INT 1
20324: PPUSH
20325: LD_VAR 0 1
20329: PUSH
20330: LD_INT 1
20332: ARRAY
20333: PPUSH
20334: LD_INT 1
20336: PPUSH
20337: CALL_OW 3
20341: PPUSH
20342: CALL_OW 1
20346: ST_TO_ADDR
// tmp := 1 ;
20347: LD_ADDR_VAR 0 2
20351: PUSH
20352: LD_STRING 1
20354: ST_TO_ADDR
// end ; normal := normal & tmp ;
20355: LD_ADDR_VAR 0 3
20359: PUSH
20360: LD_VAR 0 3
20364: PUSH
20365: LD_VAR 0 2
20369: STR
20370: ST_TO_ADDR
// end ;
20371: GO 20271
20373: POP
20374: POP
// for i = 1 to hardcoreCounter do
20375: LD_ADDR_VAR 0 5
20379: PUSH
20380: DOUBLE
20381: LD_INT 1
20383: DEC
20384: ST_TO_ADDR
20385: LD_EXP 59
20389: PUSH
20390: FOR_TO
20391: IFFALSE 20496
// begin tmp := 0 ;
20393: LD_ADDR_VAR 0 2
20397: PUSH
20398: LD_STRING 0
20400: ST_TO_ADDR
// if result [ 2 ] then
20401: LD_VAR 0 1
20405: PUSH
20406: LD_INT 2
20408: ARRAY
20409: IFFALSE 20478
// if result [ 2 ] [ 1 ] = 100 + i then
20411: LD_VAR 0 1
20415: PUSH
20416: LD_INT 2
20418: ARRAY
20419: PUSH
20420: LD_INT 1
20422: ARRAY
20423: PUSH
20424: LD_INT 100
20426: PUSH
20427: LD_VAR 0 5
20431: PLUS
20432: EQUAL
20433: IFFALSE 20478
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
20435: LD_ADDR_VAR 0 1
20439: PUSH
20440: LD_VAR 0 1
20444: PPUSH
20445: LD_INT 2
20447: PPUSH
20448: LD_VAR 0 1
20452: PUSH
20453: LD_INT 2
20455: ARRAY
20456: PPUSH
20457: LD_INT 1
20459: PPUSH
20460: CALL_OW 3
20464: PPUSH
20465: CALL_OW 1
20469: ST_TO_ADDR
// tmp := 1 ;
20470: LD_ADDR_VAR 0 2
20474: PUSH
20475: LD_STRING 1
20477: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
20478: LD_ADDR_VAR 0 4
20482: PUSH
20483: LD_VAR 0 4
20487: PUSH
20488: LD_VAR 0 2
20492: STR
20493: ST_TO_ADDR
// end ;
20494: GO 20390
20496: POP
20497: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
20498: LD_STRING getStreamItemsFromMission("
20500: PUSH
20501: LD_VAR 0 3
20505: STR
20506: PUSH
20507: LD_STRING ","
20509: STR
20510: PUSH
20511: LD_VAR 0 4
20515: STR
20516: PUSH
20517: LD_STRING ")
20519: STR
20520: PPUSH
20521: CALL_OW 559
// end else
20525: GO 20534
// ToLua ( getStreamItemsFromMission("","") ) ;
20527: LD_STRING getStreamItemsFromMission("","")
20529: PPUSH
20530: CALL_OW 559
// end ;
20534: LD_VAR 0 1
20538: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
20539: LD_EXP 57
20543: PUSH
20544: LD_EXP 62
20548: AND
20549: IFFALSE 20673
20551: GO 20553
20553: DISABLE
20554: LD_INT 0
20556: PPUSH
20557: PPUSH
// begin enable ;
20558: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
20559: LD_ADDR_VAR 0 2
20563: PUSH
20564: LD_INT 22
20566: PUSH
20567: LD_OWVAR 2
20571: PUSH
20572: EMPTY
20573: LIST
20574: LIST
20575: PUSH
20576: LD_INT 2
20578: PUSH
20579: LD_INT 34
20581: PUSH
20582: LD_INT 7
20584: PUSH
20585: EMPTY
20586: LIST
20587: LIST
20588: PUSH
20589: LD_INT 34
20591: PUSH
20592: LD_INT 45
20594: PUSH
20595: EMPTY
20596: LIST
20597: LIST
20598: PUSH
20599: LD_INT 34
20601: PUSH
20602: LD_INT 28
20604: PUSH
20605: EMPTY
20606: LIST
20607: LIST
20608: PUSH
20609: LD_INT 34
20611: PUSH
20612: LD_INT 47
20614: PUSH
20615: EMPTY
20616: LIST
20617: LIST
20618: PUSH
20619: EMPTY
20620: LIST
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: PUSH
20626: EMPTY
20627: LIST
20628: LIST
20629: PPUSH
20630: CALL_OW 69
20634: ST_TO_ADDR
// if not tmp then
20635: LD_VAR 0 2
20639: NOT
20640: IFFALSE 20644
// exit ;
20642: GO 20673
// for i in tmp do
20644: LD_ADDR_VAR 0 1
20648: PUSH
20649: LD_VAR 0 2
20653: PUSH
20654: FOR_IN
20655: IFFALSE 20671
// begin SetLives ( i , 0 ) ;
20657: LD_VAR 0 1
20661: PPUSH
20662: LD_INT 0
20664: PPUSH
20665: CALL_OW 234
// end ;
20669: GO 20654
20671: POP
20672: POP
// end ;
20673: PPOPN 2
20675: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
20676: LD_EXP 57
20680: PUSH
20681: LD_EXP 63
20685: AND
20686: IFFALSE 20770
20688: GO 20690
20690: DISABLE
20691: LD_INT 0
20693: PPUSH
20694: PPUSH
// begin enable ;
20695: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
20696: LD_ADDR_VAR 0 2
20700: PUSH
20701: LD_INT 22
20703: PUSH
20704: LD_OWVAR 2
20708: PUSH
20709: EMPTY
20710: LIST
20711: LIST
20712: PUSH
20713: LD_INT 32
20715: PUSH
20716: LD_INT 3
20718: PUSH
20719: EMPTY
20720: LIST
20721: LIST
20722: PUSH
20723: EMPTY
20724: LIST
20725: LIST
20726: PPUSH
20727: CALL_OW 69
20731: ST_TO_ADDR
// if not tmp then
20732: LD_VAR 0 2
20736: NOT
20737: IFFALSE 20741
// exit ;
20739: GO 20770
// for i in tmp do
20741: LD_ADDR_VAR 0 1
20745: PUSH
20746: LD_VAR 0 2
20750: PUSH
20751: FOR_IN
20752: IFFALSE 20768
// begin SetLives ( i , 0 ) ;
20754: LD_VAR 0 1
20758: PPUSH
20759: LD_INT 0
20761: PPUSH
20762: CALL_OW 234
// end ;
20766: GO 20751
20768: POP
20769: POP
// end ;
20770: PPOPN 2
20772: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
20773: LD_EXP 57
20777: PUSH
20778: LD_EXP 60
20782: AND
20783: IFFALSE 20876
20785: GO 20787
20787: DISABLE
20788: LD_INT 0
20790: PPUSH
// begin enable ;
20791: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
20792: LD_ADDR_VAR 0 1
20796: PUSH
20797: LD_INT 22
20799: PUSH
20800: LD_OWVAR 2
20804: PUSH
20805: EMPTY
20806: LIST
20807: LIST
20808: PUSH
20809: LD_INT 2
20811: PUSH
20812: LD_INT 25
20814: PUSH
20815: LD_INT 5
20817: PUSH
20818: EMPTY
20819: LIST
20820: LIST
20821: PUSH
20822: LD_INT 25
20824: PUSH
20825: LD_INT 9
20827: PUSH
20828: EMPTY
20829: LIST
20830: LIST
20831: PUSH
20832: LD_INT 25
20834: PUSH
20835: LD_INT 8
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: PUSH
20842: EMPTY
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: PPUSH
20852: CALL_OW 69
20856: PUSH
20857: FOR_IN
20858: IFFALSE 20874
// begin SetClass ( i , 1 ) ;
20860: LD_VAR 0 1
20864: PPUSH
20865: LD_INT 1
20867: PPUSH
20868: CALL_OW 336
// end ;
20872: GO 20857
20874: POP
20875: POP
// end ;
20876: PPOPN 1
20878: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
20879: LD_EXP 57
20883: PUSH
20884: LD_EXP 61
20888: AND
20889: PUSH
20890: LD_OWVAR 65
20894: PUSH
20895: LD_INT 7
20897: LESS
20898: AND
20899: IFFALSE 20913
20901: GO 20903
20903: DISABLE
// begin enable ;
20904: ENABLE
// game_speed := 7 ;
20905: LD_ADDR_OWVAR 65
20909: PUSH
20910: LD_INT 7
20912: ST_TO_ADDR
// end ;
20913: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
20914: LD_EXP 57
20918: PUSH
20919: LD_EXP 64
20923: AND
20924: IFFALSE 21126
20926: GO 20928
20928: DISABLE
20929: LD_INT 0
20931: PPUSH
20932: PPUSH
20933: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20934: LD_ADDR_VAR 0 3
20938: PUSH
20939: LD_INT 81
20941: PUSH
20942: LD_OWVAR 2
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: PUSH
20951: LD_INT 21
20953: PUSH
20954: LD_INT 1
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: PUSH
20961: EMPTY
20962: LIST
20963: LIST
20964: PPUSH
20965: CALL_OW 69
20969: ST_TO_ADDR
// if not tmp then
20970: LD_VAR 0 3
20974: NOT
20975: IFFALSE 20979
// exit ;
20977: GO 21126
// if tmp > 5 then
20979: LD_VAR 0 3
20983: PUSH
20984: LD_INT 5
20986: GREATER
20987: IFFALSE 20999
// k := 5 else
20989: LD_ADDR_VAR 0 2
20993: PUSH
20994: LD_INT 5
20996: ST_TO_ADDR
20997: GO 21009
// k := tmp ;
20999: LD_ADDR_VAR 0 2
21003: PUSH
21004: LD_VAR 0 3
21008: ST_TO_ADDR
// for i := 1 to k do
21009: LD_ADDR_VAR 0 1
21013: PUSH
21014: DOUBLE
21015: LD_INT 1
21017: DEC
21018: ST_TO_ADDR
21019: LD_VAR 0 2
21023: PUSH
21024: FOR_TO
21025: IFFALSE 21124
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
21027: LD_VAR 0 3
21031: PUSH
21032: LD_VAR 0 1
21036: ARRAY
21037: PPUSH
21038: LD_VAR 0 1
21042: PUSH
21043: LD_INT 4
21045: MOD
21046: PUSH
21047: LD_INT 1
21049: PLUS
21050: PPUSH
21051: CALL_OW 259
21055: PUSH
21056: LD_INT 10
21058: LESS
21059: IFFALSE 21122
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
21061: LD_VAR 0 3
21065: PUSH
21066: LD_VAR 0 1
21070: ARRAY
21071: PPUSH
21072: LD_VAR 0 1
21076: PUSH
21077: LD_INT 4
21079: MOD
21080: PUSH
21081: LD_INT 1
21083: PLUS
21084: PPUSH
21085: LD_VAR 0 3
21089: PUSH
21090: LD_VAR 0 1
21094: ARRAY
21095: PPUSH
21096: LD_VAR 0 1
21100: PUSH
21101: LD_INT 4
21103: MOD
21104: PUSH
21105: LD_INT 1
21107: PLUS
21108: PPUSH
21109: CALL_OW 259
21113: PUSH
21114: LD_INT 1
21116: PLUS
21117: PPUSH
21118: CALL_OW 237
21122: GO 21024
21124: POP
21125: POP
// end ;
21126: PPOPN 3
21128: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
21129: LD_EXP 57
21133: PUSH
21134: LD_EXP 65
21138: AND
21139: IFFALSE 21159
21141: GO 21143
21143: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
21144: LD_INT 4
21146: PPUSH
21147: LD_OWVAR 2
21151: PPUSH
21152: LD_INT 0
21154: PPUSH
21155: CALL_OW 324
21159: END
// every 0 0$1 trigger StreamModeActive and sShovel do
21160: LD_EXP 57
21164: PUSH
21165: LD_EXP 94
21169: AND
21170: IFFALSE 21190
21172: GO 21174
21174: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
21175: LD_INT 19
21177: PPUSH
21178: LD_OWVAR 2
21182: PPUSH
21183: LD_INT 0
21185: PPUSH
21186: CALL_OW 324
21190: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
21191: LD_EXP 57
21195: PUSH
21196: LD_EXP 66
21200: AND
21201: IFFALSE 21303
21203: GO 21205
21205: DISABLE
21206: LD_INT 0
21208: PPUSH
21209: PPUSH
// begin enable ;
21210: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
21211: LD_ADDR_VAR 0 2
21215: PUSH
21216: LD_INT 22
21218: PUSH
21219: LD_OWVAR 2
21223: PUSH
21224: EMPTY
21225: LIST
21226: LIST
21227: PUSH
21228: LD_INT 2
21230: PUSH
21231: LD_INT 34
21233: PUSH
21234: LD_INT 11
21236: PUSH
21237: EMPTY
21238: LIST
21239: LIST
21240: PUSH
21241: LD_INT 34
21243: PUSH
21244: LD_INT 30
21246: PUSH
21247: EMPTY
21248: LIST
21249: LIST
21250: PUSH
21251: EMPTY
21252: LIST
21253: LIST
21254: LIST
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: PPUSH
21260: CALL_OW 69
21264: ST_TO_ADDR
// if not tmp then
21265: LD_VAR 0 2
21269: NOT
21270: IFFALSE 21274
// exit ;
21272: GO 21303
// for i in tmp do
21274: LD_ADDR_VAR 0 1
21278: PUSH
21279: LD_VAR 0 2
21283: PUSH
21284: FOR_IN
21285: IFFALSE 21301
// begin SetLives ( i , 0 ) ;
21287: LD_VAR 0 1
21291: PPUSH
21292: LD_INT 0
21294: PPUSH
21295: CALL_OW 234
// end ;
21299: GO 21284
21301: POP
21302: POP
// end ;
21303: PPOPN 2
21305: END
// every 0 0$1 trigger StreamModeActive and sBunker do
21306: LD_EXP 57
21310: PUSH
21311: LD_EXP 67
21315: AND
21316: IFFALSE 21336
21318: GO 21320
21320: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
21321: LD_INT 32
21323: PPUSH
21324: LD_OWVAR 2
21328: PPUSH
21329: LD_INT 0
21331: PPUSH
21332: CALL_OW 324
21336: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
21337: LD_EXP 57
21341: PUSH
21342: LD_EXP 68
21346: AND
21347: IFFALSE 21528
21349: GO 21351
21351: DISABLE
21352: LD_INT 0
21354: PPUSH
21355: PPUSH
21356: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
21357: LD_ADDR_VAR 0 2
21361: PUSH
21362: LD_INT 22
21364: PUSH
21365: LD_OWVAR 2
21369: PUSH
21370: EMPTY
21371: LIST
21372: LIST
21373: PUSH
21374: LD_INT 33
21376: PUSH
21377: LD_INT 3
21379: PUSH
21380: EMPTY
21381: LIST
21382: LIST
21383: PUSH
21384: EMPTY
21385: LIST
21386: LIST
21387: PPUSH
21388: CALL_OW 69
21392: ST_TO_ADDR
// if not tmp then
21393: LD_VAR 0 2
21397: NOT
21398: IFFALSE 21402
// exit ;
21400: GO 21528
// side := 0 ;
21402: LD_ADDR_VAR 0 3
21406: PUSH
21407: LD_INT 0
21409: ST_TO_ADDR
// for i := 1 to 8 do
21410: LD_ADDR_VAR 0 1
21414: PUSH
21415: DOUBLE
21416: LD_INT 1
21418: DEC
21419: ST_TO_ADDR
21420: LD_INT 8
21422: PUSH
21423: FOR_TO
21424: IFFALSE 21472
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
21426: LD_OWVAR 2
21430: PUSH
21431: LD_VAR 0 1
21435: NONEQUAL
21436: PUSH
21437: LD_OWVAR 2
21441: PPUSH
21442: LD_VAR 0 1
21446: PPUSH
21447: CALL_OW 81
21451: PUSH
21452: LD_INT 2
21454: EQUAL
21455: AND
21456: IFFALSE 21470
// begin side := i ;
21458: LD_ADDR_VAR 0 3
21462: PUSH
21463: LD_VAR 0 1
21467: ST_TO_ADDR
// break ;
21468: GO 21472
// end ;
21470: GO 21423
21472: POP
21473: POP
// if not side then
21474: LD_VAR 0 3
21478: NOT
21479: IFFALSE 21483
// exit ;
21481: GO 21528
// for i := 1 to tmp do
21483: LD_ADDR_VAR 0 1
21487: PUSH
21488: DOUBLE
21489: LD_INT 1
21491: DEC
21492: ST_TO_ADDR
21493: LD_VAR 0 2
21497: PUSH
21498: FOR_TO
21499: IFFALSE 21526
// if Prob ( 60 ) then
21501: LD_INT 60
21503: PPUSH
21504: CALL_OW 13
21508: IFFALSE 21524
// SetSide ( i , side ) ;
21510: LD_VAR 0 1
21514: PPUSH
21515: LD_VAR 0 3
21519: PPUSH
21520: CALL_OW 235
21524: GO 21498
21526: POP
21527: POP
// end ;
21528: PPOPN 3
21530: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
21531: LD_EXP 57
21535: PUSH
21536: LD_EXP 70
21540: AND
21541: IFFALSE 21660
21543: GO 21545
21545: DISABLE
21546: LD_INT 0
21548: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
21549: LD_ADDR_VAR 0 1
21553: PUSH
21554: LD_INT 22
21556: PUSH
21557: LD_OWVAR 2
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: PUSH
21566: LD_INT 21
21568: PUSH
21569: LD_INT 1
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: PUSH
21576: LD_INT 3
21578: PUSH
21579: LD_INT 23
21581: PUSH
21582: LD_INT 0
21584: PUSH
21585: EMPTY
21586: LIST
21587: LIST
21588: PUSH
21589: EMPTY
21590: LIST
21591: LIST
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: LIST
21597: PPUSH
21598: CALL_OW 69
21602: PUSH
21603: FOR_IN
21604: IFFALSE 21658
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
21606: LD_VAR 0 1
21610: PPUSH
21611: CALL_OW 257
21615: PUSH
21616: LD_INT 1
21618: PUSH
21619: LD_INT 2
21621: PUSH
21622: LD_INT 3
21624: PUSH
21625: LD_INT 4
21627: PUSH
21628: EMPTY
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: IN
21634: IFFALSE 21656
// SetClass ( un , rand ( 1 , 4 ) ) ;
21636: LD_VAR 0 1
21640: PPUSH
21641: LD_INT 1
21643: PPUSH
21644: LD_INT 4
21646: PPUSH
21647: CALL_OW 12
21651: PPUSH
21652: CALL_OW 336
21656: GO 21603
21658: POP
21659: POP
// end ;
21660: PPOPN 1
21662: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
21663: LD_EXP 57
21667: PUSH
21668: LD_EXP 69
21672: AND
21673: IFFALSE 21752
21675: GO 21677
21677: DISABLE
21678: LD_INT 0
21680: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21681: LD_ADDR_VAR 0 1
21685: PUSH
21686: LD_INT 22
21688: PUSH
21689: LD_OWVAR 2
21693: PUSH
21694: EMPTY
21695: LIST
21696: LIST
21697: PUSH
21698: LD_INT 21
21700: PUSH
21701: LD_INT 3
21703: PUSH
21704: EMPTY
21705: LIST
21706: LIST
21707: PUSH
21708: EMPTY
21709: LIST
21710: LIST
21711: PPUSH
21712: CALL_OW 69
21716: ST_TO_ADDR
// if not tmp then
21717: LD_VAR 0 1
21721: NOT
21722: IFFALSE 21726
// exit ;
21724: GO 21752
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
21726: LD_VAR 0 1
21730: PUSH
21731: LD_INT 1
21733: PPUSH
21734: LD_VAR 0 1
21738: PPUSH
21739: CALL_OW 12
21743: ARRAY
21744: PPUSH
21745: LD_INT 100
21747: PPUSH
21748: CALL_OW 234
// end ;
21752: PPOPN 1
21754: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
21755: LD_EXP 57
21759: PUSH
21760: LD_EXP 71
21764: AND
21765: IFFALSE 21863
21767: GO 21769
21769: DISABLE
21770: LD_INT 0
21772: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21773: LD_ADDR_VAR 0 1
21777: PUSH
21778: LD_INT 22
21780: PUSH
21781: LD_OWVAR 2
21785: PUSH
21786: EMPTY
21787: LIST
21788: LIST
21789: PUSH
21790: LD_INT 21
21792: PUSH
21793: LD_INT 1
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: PPUSH
21804: CALL_OW 69
21808: ST_TO_ADDR
// if not tmp then
21809: LD_VAR 0 1
21813: NOT
21814: IFFALSE 21818
// exit ;
21816: GO 21863
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
21818: LD_VAR 0 1
21822: PUSH
21823: LD_INT 1
21825: PPUSH
21826: LD_VAR 0 1
21830: PPUSH
21831: CALL_OW 12
21835: ARRAY
21836: PPUSH
21837: LD_INT 1
21839: PPUSH
21840: LD_INT 4
21842: PPUSH
21843: CALL_OW 12
21847: PPUSH
21848: LD_INT 3000
21850: PPUSH
21851: LD_INT 9000
21853: PPUSH
21854: CALL_OW 12
21858: PPUSH
21859: CALL_OW 492
// end ;
21863: PPOPN 1
21865: END
// every 0 0$1 trigger StreamModeActive and sDepot do
21866: LD_EXP 57
21870: PUSH
21871: LD_EXP 72
21875: AND
21876: IFFALSE 21896
21878: GO 21880
21880: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
21881: LD_INT 1
21883: PPUSH
21884: LD_OWVAR 2
21888: PPUSH
21889: LD_INT 0
21891: PPUSH
21892: CALL_OW 324
21896: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
21897: LD_EXP 57
21901: PUSH
21902: LD_EXP 73
21906: AND
21907: IFFALSE 21990
21909: GO 21911
21911: DISABLE
21912: LD_INT 0
21914: PPUSH
21915: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21916: LD_ADDR_VAR 0 2
21920: PUSH
21921: LD_INT 22
21923: PUSH
21924: LD_OWVAR 2
21928: PUSH
21929: EMPTY
21930: LIST
21931: LIST
21932: PUSH
21933: LD_INT 21
21935: PUSH
21936: LD_INT 3
21938: PUSH
21939: EMPTY
21940: LIST
21941: LIST
21942: PUSH
21943: EMPTY
21944: LIST
21945: LIST
21946: PPUSH
21947: CALL_OW 69
21951: ST_TO_ADDR
// if not tmp then
21952: LD_VAR 0 2
21956: NOT
21957: IFFALSE 21961
// exit ;
21959: GO 21990
// for i in tmp do
21961: LD_ADDR_VAR 0 1
21965: PUSH
21966: LD_VAR 0 2
21970: PUSH
21971: FOR_IN
21972: IFFALSE 21988
// SetBLevel ( i , 10 ) ;
21974: LD_VAR 0 1
21978: PPUSH
21979: LD_INT 10
21981: PPUSH
21982: CALL_OW 241
21986: GO 21971
21988: POP
21989: POP
// end ;
21990: PPOPN 2
21992: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
21993: LD_EXP 57
21997: PUSH
21998: LD_EXP 74
22002: AND
22003: IFFALSE 22114
22005: GO 22007
22007: DISABLE
22008: LD_INT 0
22010: PPUSH
22011: PPUSH
22012: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22013: LD_ADDR_VAR 0 3
22017: PUSH
22018: LD_INT 22
22020: PUSH
22021: LD_OWVAR 2
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: PUSH
22030: LD_INT 25
22032: PUSH
22033: LD_INT 1
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: PUSH
22040: EMPTY
22041: LIST
22042: LIST
22043: PPUSH
22044: CALL_OW 69
22048: ST_TO_ADDR
// if not tmp then
22049: LD_VAR 0 3
22053: NOT
22054: IFFALSE 22058
// exit ;
22056: GO 22114
// un := tmp [ rand ( 1 , tmp ) ] ;
22058: LD_ADDR_VAR 0 2
22062: PUSH
22063: LD_VAR 0 3
22067: PUSH
22068: LD_INT 1
22070: PPUSH
22071: LD_VAR 0 3
22075: PPUSH
22076: CALL_OW 12
22080: ARRAY
22081: ST_TO_ADDR
// if Crawls ( un ) then
22082: LD_VAR 0 2
22086: PPUSH
22087: CALL_OW 318
22091: IFFALSE 22102
// ComWalk ( un ) ;
22093: LD_VAR 0 2
22097: PPUSH
22098: CALL_OW 138
// SetClass ( un , class_sniper ) ;
22102: LD_VAR 0 2
22106: PPUSH
22107: LD_INT 5
22109: PPUSH
22110: CALL_OW 336
// end ;
22114: PPOPN 3
22116: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
22117: LD_EXP 57
22121: PUSH
22122: LD_EXP 75
22126: AND
22127: PUSH
22128: LD_OWVAR 67
22132: PUSH
22133: LD_INT 4
22135: LESS
22136: AND
22137: IFFALSE 22156
22139: GO 22141
22141: DISABLE
// begin Difficulty := Difficulty + 1 ;
22142: LD_ADDR_OWVAR 67
22146: PUSH
22147: LD_OWVAR 67
22151: PUSH
22152: LD_INT 1
22154: PLUS
22155: ST_TO_ADDR
// end ;
22156: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
22157: LD_EXP 57
22161: PUSH
22162: LD_EXP 76
22166: AND
22167: IFFALSE 22270
22169: GO 22171
22171: DISABLE
22172: LD_INT 0
22174: PPUSH
// begin for i := 1 to 5 do
22175: LD_ADDR_VAR 0 1
22179: PUSH
22180: DOUBLE
22181: LD_INT 1
22183: DEC
22184: ST_TO_ADDR
22185: LD_INT 5
22187: PUSH
22188: FOR_TO
22189: IFFALSE 22268
// begin uc_nation := nation_nature ;
22191: LD_ADDR_OWVAR 21
22195: PUSH
22196: LD_INT 0
22198: ST_TO_ADDR
// uc_side := 0 ;
22199: LD_ADDR_OWVAR 20
22203: PUSH
22204: LD_INT 0
22206: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22207: LD_ADDR_OWVAR 29
22211: PUSH
22212: LD_INT 12
22214: PUSH
22215: LD_INT 12
22217: PUSH
22218: EMPTY
22219: LIST
22220: LIST
22221: ST_TO_ADDR
// hc_agressivity := 20 ;
22222: LD_ADDR_OWVAR 35
22226: PUSH
22227: LD_INT 20
22229: ST_TO_ADDR
// hc_class := class_tiger ;
22230: LD_ADDR_OWVAR 28
22234: PUSH
22235: LD_INT 14
22237: ST_TO_ADDR
// hc_gallery :=  ;
22238: LD_ADDR_OWVAR 33
22242: PUSH
22243: LD_STRING 
22245: ST_TO_ADDR
// hc_name :=  ;
22246: LD_ADDR_OWVAR 26
22250: PUSH
22251: LD_STRING 
22253: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
22254: CALL_OW 44
22258: PPUSH
22259: LD_INT 0
22261: PPUSH
22262: CALL_OW 51
// end ;
22266: GO 22188
22268: POP
22269: POP
// end ;
22270: PPOPN 1
22272: END
// every 0 0$1 trigger StreamModeActive and sBomb do
22273: LD_EXP 57
22277: PUSH
22278: LD_EXP 77
22282: AND
22283: IFFALSE 22292
22285: GO 22287
22287: DISABLE
// StreamSibBomb ;
22288: CALL 22293 0 0
22292: END
// export function StreamSibBomb ; var i , x , y ; begin
22293: LD_INT 0
22295: PPUSH
22296: PPUSH
22297: PPUSH
22298: PPUSH
// result := false ;
22299: LD_ADDR_VAR 0 1
22303: PUSH
22304: LD_INT 0
22306: ST_TO_ADDR
// for i := 1 to 16 do
22307: LD_ADDR_VAR 0 2
22311: PUSH
22312: DOUBLE
22313: LD_INT 1
22315: DEC
22316: ST_TO_ADDR
22317: LD_INT 16
22319: PUSH
22320: FOR_TO
22321: IFFALSE 22520
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22323: LD_ADDR_VAR 0 3
22327: PUSH
22328: LD_INT 10
22330: PUSH
22331: LD_INT 20
22333: PUSH
22334: LD_INT 30
22336: PUSH
22337: LD_INT 40
22339: PUSH
22340: LD_INT 50
22342: PUSH
22343: LD_INT 60
22345: PUSH
22346: LD_INT 70
22348: PUSH
22349: LD_INT 80
22351: PUSH
22352: LD_INT 90
22354: PUSH
22355: LD_INT 100
22357: PUSH
22358: LD_INT 110
22360: PUSH
22361: LD_INT 120
22363: PUSH
22364: LD_INT 130
22366: PUSH
22367: LD_INT 140
22369: PUSH
22370: LD_INT 150
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: PUSH
22390: LD_INT 1
22392: PPUSH
22393: LD_INT 15
22395: PPUSH
22396: CALL_OW 12
22400: ARRAY
22401: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22402: LD_ADDR_VAR 0 4
22406: PUSH
22407: LD_INT 10
22409: PUSH
22410: LD_INT 20
22412: PUSH
22413: LD_INT 30
22415: PUSH
22416: LD_INT 40
22418: PUSH
22419: LD_INT 50
22421: PUSH
22422: LD_INT 60
22424: PUSH
22425: LD_INT 70
22427: PUSH
22428: LD_INT 80
22430: PUSH
22431: LD_INT 90
22433: PUSH
22434: LD_INT 100
22436: PUSH
22437: LD_INT 110
22439: PUSH
22440: LD_INT 120
22442: PUSH
22443: LD_INT 130
22445: PUSH
22446: LD_INT 140
22448: PUSH
22449: LD_INT 150
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: PUSH
22469: LD_INT 1
22471: PPUSH
22472: LD_INT 15
22474: PPUSH
22475: CALL_OW 12
22479: ARRAY
22480: ST_TO_ADDR
// if ValidHex ( x , y ) then
22481: LD_VAR 0 3
22485: PPUSH
22486: LD_VAR 0 4
22490: PPUSH
22491: CALL_OW 488
22495: IFFALSE 22518
// begin result := [ x , y ] ;
22497: LD_ADDR_VAR 0 1
22501: PUSH
22502: LD_VAR 0 3
22506: PUSH
22507: LD_VAR 0 4
22511: PUSH
22512: EMPTY
22513: LIST
22514: LIST
22515: ST_TO_ADDR
// break ;
22516: GO 22520
// end ; end ;
22518: GO 22320
22520: POP
22521: POP
// if result then
22522: LD_VAR 0 1
22526: IFFALSE 22586
// begin ToLua ( playSibBomb() ) ;
22528: LD_STRING playSibBomb()
22530: PPUSH
22531: CALL_OW 559
// wait ( 0 0$14 ) ;
22535: LD_INT 490
22537: PPUSH
22538: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
22542: LD_VAR 0 1
22546: PUSH
22547: LD_INT 1
22549: ARRAY
22550: PPUSH
22551: LD_VAR 0 1
22555: PUSH
22556: LD_INT 2
22558: ARRAY
22559: PPUSH
22560: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
22564: LD_VAR 0 1
22568: PUSH
22569: LD_INT 1
22571: ARRAY
22572: PPUSH
22573: LD_VAR 0 1
22577: PUSH
22578: LD_INT 2
22580: ARRAY
22581: PPUSH
22582: CALL_OW 429
// end ; end ;
22586: LD_VAR 0 1
22590: RET
// every 0 0$1 trigger StreamModeActive and sReset do
22591: LD_EXP 57
22595: PUSH
22596: LD_EXP 79
22600: AND
22601: IFFALSE 22613
22603: GO 22605
22605: DISABLE
// YouLost (  ) ;
22606: LD_STRING 
22608: PPUSH
22609: CALL_OW 104
22613: END
// every 0 0$1 trigger StreamModeActive and sFog do
22614: LD_EXP 57
22618: PUSH
22619: LD_EXP 78
22623: AND
22624: IFFALSE 22638
22626: GO 22628
22628: DISABLE
// FogOff ( your_side ) ;
22629: LD_OWVAR 2
22633: PPUSH
22634: CALL_OW 344
22638: END
// every 0 0$1 trigger StreamModeActive and sSun do
22639: LD_EXP 57
22643: PUSH
22644: LD_EXP 80
22648: AND
22649: IFFALSE 22677
22651: GO 22653
22653: DISABLE
// begin solar_recharge_percent := 0 ;
22654: LD_ADDR_OWVAR 79
22658: PUSH
22659: LD_INT 0
22661: ST_TO_ADDR
// wait ( 5 5$00 ) ;
22662: LD_INT 10500
22664: PPUSH
22665: CALL_OW 67
// solar_recharge_percent := 100 ;
22669: LD_ADDR_OWVAR 79
22673: PUSH
22674: LD_INT 100
22676: ST_TO_ADDR
// end ;
22677: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
22678: LD_EXP 57
22682: PUSH
22683: LD_EXP 81
22687: AND
22688: IFFALSE 22927
22690: GO 22692
22692: DISABLE
22693: LD_INT 0
22695: PPUSH
22696: PPUSH
22697: PPUSH
// begin tmp := [ ] ;
22698: LD_ADDR_VAR 0 3
22702: PUSH
22703: EMPTY
22704: ST_TO_ADDR
// for i := 1 to 6 do
22705: LD_ADDR_VAR 0 1
22709: PUSH
22710: DOUBLE
22711: LD_INT 1
22713: DEC
22714: ST_TO_ADDR
22715: LD_INT 6
22717: PUSH
22718: FOR_TO
22719: IFFALSE 22824
// begin uc_nation := nation_nature ;
22721: LD_ADDR_OWVAR 21
22725: PUSH
22726: LD_INT 0
22728: ST_TO_ADDR
// uc_side := 0 ;
22729: LD_ADDR_OWVAR 20
22733: PUSH
22734: LD_INT 0
22736: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22737: LD_ADDR_OWVAR 29
22741: PUSH
22742: LD_INT 12
22744: PUSH
22745: LD_INT 12
22747: PUSH
22748: EMPTY
22749: LIST
22750: LIST
22751: ST_TO_ADDR
// hc_agressivity := 20 ;
22752: LD_ADDR_OWVAR 35
22756: PUSH
22757: LD_INT 20
22759: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
22760: LD_ADDR_OWVAR 28
22764: PUSH
22765: LD_INT 17
22767: ST_TO_ADDR
// hc_gallery :=  ;
22768: LD_ADDR_OWVAR 33
22772: PUSH
22773: LD_STRING 
22775: ST_TO_ADDR
// hc_name :=  ;
22776: LD_ADDR_OWVAR 26
22780: PUSH
22781: LD_STRING 
22783: ST_TO_ADDR
// un := CreateHuman ;
22784: LD_ADDR_VAR 0 2
22788: PUSH
22789: CALL_OW 44
22793: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
22794: LD_VAR 0 2
22798: PPUSH
22799: LD_INT 1
22801: PPUSH
22802: CALL_OW 51
// tmp := tmp ^ un ;
22806: LD_ADDR_VAR 0 3
22810: PUSH
22811: LD_VAR 0 3
22815: PUSH
22816: LD_VAR 0 2
22820: ADD
22821: ST_TO_ADDR
// end ;
22822: GO 22718
22824: POP
22825: POP
// repeat wait ( 0 0$1 ) ;
22826: LD_INT 35
22828: PPUSH
22829: CALL_OW 67
// for un in tmp do
22833: LD_ADDR_VAR 0 2
22837: PUSH
22838: LD_VAR 0 3
22842: PUSH
22843: FOR_IN
22844: IFFALSE 22918
// begin if IsDead ( un ) then
22846: LD_VAR 0 2
22850: PPUSH
22851: CALL_OW 301
22855: IFFALSE 22875
// begin tmp := tmp diff un ;
22857: LD_ADDR_VAR 0 3
22861: PUSH
22862: LD_VAR 0 3
22866: PUSH
22867: LD_VAR 0 2
22871: DIFF
22872: ST_TO_ADDR
// continue ;
22873: GO 22843
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
22875: LD_VAR 0 2
22879: PPUSH
22880: LD_INT 3
22882: PUSH
22883: LD_INT 22
22885: PUSH
22886: LD_INT 0
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: PUSH
22893: EMPTY
22894: LIST
22895: LIST
22896: PPUSH
22897: CALL_OW 69
22901: PPUSH
22902: LD_VAR 0 2
22906: PPUSH
22907: CALL_OW 74
22911: PPUSH
22912: CALL_OW 115
// end ;
22916: GO 22843
22918: POP
22919: POP
// until not tmp ;
22920: LD_VAR 0 3
22924: NOT
22925: IFFALSE 22826
// end ;
22927: PPOPN 3
22929: END
// every 0 0$1 trigger StreamModeActive and sTroll do
22930: LD_EXP 57
22934: PUSH
22935: LD_EXP 82
22939: AND
22940: IFFALSE 22994
22942: GO 22944
22944: DISABLE
// begin ToLua ( displayTroll(); ) ;
22945: LD_STRING displayTroll();
22947: PPUSH
22948: CALL_OW 559
// wait ( 3 3$00 ) ;
22952: LD_INT 6300
22954: PPUSH
22955: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22959: LD_STRING hideTroll();
22961: PPUSH
22962: CALL_OW 559
// wait ( 1 1$00 ) ;
22966: LD_INT 2100
22968: PPUSH
22969: CALL_OW 67
// ToLua ( displayTroll(); ) ;
22973: LD_STRING displayTroll();
22975: PPUSH
22976: CALL_OW 559
// wait ( 1 1$00 ) ;
22980: LD_INT 2100
22982: PPUSH
22983: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22987: LD_STRING hideTroll();
22989: PPUSH
22990: CALL_OW 559
// end ;
22994: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
22995: LD_EXP 57
22999: PUSH
23000: LD_EXP 83
23004: AND
23005: IFFALSE 23068
23007: GO 23009
23009: DISABLE
23010: LD_INT 0
23012: PPUSH
// begin p := 0 ;
23013: LD_ADDR_VAR 0 1
23017: PUSH
23018: LD_INT 0
23020: ST_TO_ADDR
// repeat game_speed := 1 ;
23021: LD_ADDR_OWVAR 65
23025: PUSH
23026: LD_INT 1
23028: ST_TO_ADDR
// wait ( 0 0$1 ) ;
23029: LD_INT 35
23031: PPUSH
23032: CALL_OW 67
// p := p + 1 ;
23036: LD_ADDR_VAR 0 1
23040: PUSH
23041: LD_VAR 0 1
23045: PUSH
23046: LD_INT 1
23048: PLUS
23049: ST_TO_ADDR
// until p >= 60 ;
23050: LD_VAR 0 1
23054: PUSH
23055: LD_INT 60
23057: GREATEREQUAL
23058: IFFALSE 23021
// game_speed := 4 ;
23060: LD_ADDR_OWVAR 65
23064: PUSH
23065: LD_INT 4
23067: ST_TO_ADDR
// end ;
23068: PPOPN 1
23070: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
23071: LD_EXP 57
23075: PUSH
23076: LD_EXP 84
23080: AND
23081: IFFALSE 23227
23083: GO 23085
23085: DISABLE
23086: LD_INT 0
23088: PPUSH
23089: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23090: LD_ADDR_VAR 0 1
23094: PUSH
23095: LD_INT 22
23097: PUSH
23098: LD_OWVAR 2
23102: PUSH
23103: EMPTY
23104: LIST
23105: LIST
23106: PUSH
23107: LD_INT 2
23109: PUSH
23110: LD_INT 30
23112: PUSH
23113: LD_INT 0
23115: PUSH
23116: EMPTY
23117: LIST
23118: LIST
23119: PUSH
23120: LD_INT 30
23122: PUSH
23123: LD_INT 1
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: PUSH
23130: EMPTY
23131: LIST
23132: LIST
23133: LIST
23134: PUSH
23135: EMPTY
23136: LIST
23137: LIST
23138: PPUSH
23139: CALL_OW 69
23143: ST_TO_ADDR
// if not depot then
23144: LD_VAR 0 1
23148: NOT
23149: IFFALSE 23153
// exit ;
23151: GO 23227
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
23153: LD_ADDR_VAR 0 2
23157: PUSH
23158: LD_VAR 0 1
23162: PUSH
23163: LD_INT 1
23165: PPUSH
23166: LD_VAR 0 1
23170: PPUSH
23171: CALL_OW 12
23175: ARRAY
23176: PPUSH
23177: CALL_OW 274
23181: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
23182: LD_VAR 0 2
23186: PPUSH
23187: LD_INT 1
23189: PPUSH
23190: LD_INT 0
23192: PPUSH
23193: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
23197: LD_VAR 0 2
23201: PPUSH
23202: LD_INT 2
23204: PPUSH
23205: LD_INT 0
23207: PPUSH
23208: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
23212: LD_VAR 0 2
23216: PPUSH
23217: LD_INT 3
23219: PPUSH
23220: LD_INT 0
23222: PPUSH
23223: CALL_OW 277
// end ;
23227: PPOPN 2
23229: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
23230: LD_EXP 57
23234: PUSH
23235: LD_EXP 85
23239: AND
23240: IFFALSE 23337
23242: GO 23244
23244: DISABLE
23245: LD_INT 0
23247: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23248: LD_ADDR_VAR 0 1
23252: PUSH
23253: LD_INT 22
23255: PUSH
23256: LD_OWVAR 2
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: PUSH
23265: LD_INT 21
23267: PUSH
23268: LD_INT 1
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PUSH
23275: LD_INT 3
23277: PUSH
23278: LD_INT 23
23280: PUSH
23281: LD_INT 0
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: PUSH
23292: EMPTY
23293: LIST
23294: LIST
23295: LIST
23296: PPUSH
23297: CALL_OW 69
23301: ST_TO_ADDR
// if not tmp then
23302: LD_VAR 0 1
23306: NOT
23307: IFFALSE 23311
// exit ;
23309: GO 23337
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
23311: LD_VAR 0 1
23315: PUSH
23316: LD_INT 1
23318: PPUSH
23319: LD_VAR 0 1
23323: PPUSH
23324: CALL_OW 12
23328: ARRAY
23329: PPUSH
23330: LD_INT 200
23332: PPUSH
23333: CALL_OW 234
// end ;
23337: PPOPN 1
23339: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
23340: LD_EXP 57
23344: PUSH
23345: LD_EXP 86
23349: AND
23350: IFFALSE 23429
23352: GO 23354
23354: DISABLE
23355: LD_INT 0
23357: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
23358: LD_ADDR_VAR 0 1
23362: PUSH
23363: LD_INT 22
23365: PUSH
23366: LD_OWVAR 2
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: PUSH
23375: LD_INT 21
23377: PUSH
23378: LD_INT 2
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: PUSH
23385: EMPTY
23386: LIST
23387: LIST
23388: PPUSH
23389: CALL_OW 69
23393: ST_TO_ADDR
// if not tmp then
23394: LD_VAR 0 1
23398: NOT
23399: IFFALSE 23403
// exit ;
23401: GO 23429
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
23403: LD_VAR 0 1
23407: PUSH
23408: LD_INT 1
23410: PPUSH
23411: LD_VAR 0 1
23415: PPUSH
23416: CALL_OW 12
23420: ARRAY
23421: PPUSH
23422: LD_INT 60
23424: PPUSH
23425: CALL_OW 234
// end ;
23429: PPOPN 1
23431: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
23432: LD_EXP 57
23436: PUSH
23437: LD_EXP 87
23441: AND
23442: IFFALSE 23541
23444: GO 23446
23446: DISABLE
23447: LD_INT 0
23449: PPUSH
23450: PPUSH
// begin enable ;
23451: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
23452: LD_ADDR_VAR 0 1
23456: PUSH
23457: LD_INT 22
23459: PUSH
23460: LD_OWVAR 2
23464: PUSH
23465: EMPTY
23466: LIST
23467: LIST
23468: PUSH
23469: LD_INT 61
23471: PUSH
23472: EMPTY
23473: LIST
23474: PUSH
23475: LD_INT 33
23477: PUSH
23478: LD_INT 2
23480: PUSH
23481: EMPTY
23482: LIST
23483: LIST
23484: PUSH
23485: EMPTY
23486: LIST
23487: LIST
23488: LIST
23489: PPUSH
23490: CALL_OW 69
23494: ST_TO_ADDR
// if not tmp then
23495: LD_VAR 0 1
23499: NOT
23500: IFFALSE 23504
// exit ;
23502: GO 23541
// for i in tmp do
23504: LD_ADDR_VAR 0 2
23508: PUSH
23509: LD_VAR 0 1
23513: PUSH
23514: FOR_IN
23515: IFFALSE 23539
// if IsControledBy ( i ) then
23517: LD_VAR 0 2
23521: PPUSH
23522: CALL_OW 312
23526: IFFALSE 23537
// ComUnlink ( i ) ;
23528: LD_VAR 0 2
23532: PPUSH
23533: CALL_OW 136
23537: GO 23514
23539: POP
23540: POP
// end ;
23541: PPOPN 2
23543: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
23544: LD_EXP 57
23548: PUSH
23549: LD_EXP 88
23553: AND
23554: IFFALSE 23694
23556: GO 23558
23558: DISABLE
23559: LD_INT 0
23561: PPUSH
23562: PPUSH
// begin ToLua ( displayPowell(); ) ;
23563: LD_STRING displayPowell();
23565: PPUSH
23566: CALL_OW 559
// uc_side := 0 ;
23570: LD_ADDR_OWVAR 20
23574: PUSH
23575: LD_INT 0
23577: ST_TO_ADDR
// uc_nation := 2 ;
23578: LD_ADDR_OWVAR 21
23582: PUSH
23583: LD_INT 2
23585: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
23586: LD_ADDR_OWVAR 37
23590: PUSH
23591: LD_INT 14
23593: ST_TO_ADDR
// vc_engine := engine_siberite ;
23594: LD_ADDR_OWVAR 39
23598: PUSH
23599: LD_INT 3
23601: ST_TO_ADDR
// vc_control := control_apeman ;
23602: LD_ADDR_OWVAR 38
23606: PUSH
23607: LD_INT 5
23609: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
23610: LD_ADDR_OWVAR 40
23614: PUSH
23615: LD_INT 29
23617: ST_TO_ADDR
// un := CreateVehicle ;
23618: LD_ADDR_VAR 0 2
23622: PUSH
23623: CALL_OW 45
23627: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23628: LD_VAR 0 2
23632: PPUSH
23633: LD_INT 1
23635: PPUSH
23636: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23640: LD_INT 35
23642: PPUSH
23643: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23647: LD_VAR 0 2
23651: PPUSH
23652: LD_INT 22
23654: PUSH
23655: LD_OWVAR 2
23659: PUSH
23660: EMPTY
23661: LIST
23662: LIST
23663: PPUSH
23664: CALL_OW 69
23668: PPUSH
23669: LD_VAR 0 2
23673: PPUSH
23674: CALL_OW 74
23678: PPUSH
23679: CALL_OW 115
// until IsDead ( un ) ;
23683: LD_VAR 0 2
23687: PPUSH
23688: CALL_OW 301
23692: IFFALSE 23640
// end ;
23694: PPOPN 2
23696: END
// every 0 0$1 trigger StreamModeActive and sStu do
23697: LD_EXP 57
23701: PUSH
23702: LD_EXP 96
23706: AND
23707: IFFALSE 23723
23709: GO 23711
23711: DISABLE
// begin ToLua ( displayStucuk(); ) ;
23712: LD_STRING displayStucuk();
23714: PPUSH
23715: CALL_OW 559
// ResetFog ;
23719: CALL_OW 335
// end ;
23723: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
23724: LD_EXP 57
23728: PUSH
23729: LD_EXP 89
23733: AND
23734: IFFALSE 23875
23736: GO 23738
23738: DISABLE
23739: LD_INT 0
23741: PPUSH
23742: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23743: LD_ADDR_VAR 0 2
23747: PUSH
23748: LD_INT 22
23750: PUSH
23751: LD_OWVAR 2
23755: PUSH
23756: EMPTY
23757: LIST
23758: LIST
23759: PUSH
23760: LD_INT 21
23762: PUSH
23763: LD_INT 1
23765: PUSH
23766: EMPTY
23767: LIST
23768: LIST
23769: PUSH
23770: EMPTY
23771: LIST
23772: LIST
23773: PPUSH
23774: CALL_OW 69
23778: ST_TO_ADDR
// if not tmp then
23779: LD_VAR 0 2
23783: NOT
23784: IFFALSE 23788
// exit ;
23786: GO 23875
// un := tmp [ rand ( 1 , tmp ) ] ;
23788: LD_ADDR_VAR 0 1
23792: PUSH
23793: LD_VAR 0 2
23797: PUSH
23798: LD_INT 1
23800: PPUSH
23801: LD_VAR 0 2
23805: PPUSH
23806: CALL_OW 12
23810: ARRAY
23811: ST_TO_ADDR
// SetSide ( un , 0 ) ;
23812: LD_VAR 0 1
23816: PPUSH
23817: LD_INT 0
23819: PPUSH
23820: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
23824: LD_VAR 0 1
23828: PPUSH
23829: LD_OWVAR 3
23833: PUSH
23834: LD_VAR 0 1
23838: DIFF
23839: PPUSH
23840: LD_VAR 0 1
23844: PPUSH
23845: CALL_OW 74
23849: PPUSH
23850: CALL_OW 115
// wait ( 0 0$20 ) ;
23854: LD_INT 700
23856: PPUSH
23857: CALL_OW 67
// SetSide ( un , your_side ) ;
23861: LD_VAR 0 1
23865: PPUSH
23866: LD_OWVAR 2
23870: PPUSH
23871: CALL_OW 235
// end ;
23875: PPOPN 2
23877: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
23878: LD_EXP 57
23882: PUSH
23883: LD_EXP 90
23887: AND
23888: IFFALSE 23994
23890: GO 23892
23892: DISABLE
23893: LD_INT 0
23895: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23896: LD_ADDR_VAR 0 1
23900: PUSH
23901: LD_INT 22
23903: PUSH
23904: LD_OWVAR 2
23908: PUSH
23909: EMPTY
23910: LIST
23911: LIST
23912: PUSH
23913: LD_INT 2
23915: PUSH
23916: LD_INT 30
23918: PUSH
23919: LD_INT 0
23921: PUSH
23922: EMPTY
23923: LIST
23924: LIST
23925: PUSH
23926: LD_INT 30
23928: PUSH
23929: LD_INT 1
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: LIST
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: PPUSH
23945: CALL_OW 69
23949: ST_TO_ADDR
// if not depot then
23950: LD_VAR 0 1
23954: NOT
23955: IFFALSE 23959
// exit ;
23957: GO 23994
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
23959: LD_VAR 0 1
23963: PUSH
23964: LD_INT 1
23966: ARRAY
23967: PPUSH
23968: CALL_OW 250
23972: PPUSH
23973: LD_VAR 0 1
23977: PUSH
23978: LD_INT 1
23980: ARRAY
23981: PPUSH
23982: CALL_OW 251
23986: PPUSH
23987: LD_INT 70
23989: PPUSH
23990: CALL_OW 495
// end ;
23994: PPOPN 1
23996: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
23997: LD_EXP 57
24001: PUSH
24002: LD_EXP 91
24006: AND
24007: IFFALSE 24218
24009: GO 24011
24011: DISABLE
24012: LD_INT 0
24014: PPUSH
24015: PPUSH
24016: PPUSH
24017: PPUSH
24018: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24019: LD_ADDR_VAR 0 5
24023: PUSH
24024: LD_INT 22
24026: PUSH
24027: LD_OWVAR 2
24031: PUSH
24032: EMPTY
24033: LIST
24034: LIST
24035: PUSH
24036: LD_INT 21
24038: PUSH
24039: LD_INT 1
24041: PUSH
24042: EMPTY
24043: LIST
24044: LIST
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: PPUSH
24050: CALL_OW 69
24054: ST_TO_ADDR
// if not tmp then
24055: LD_VAR 0 5
24059: NOT
24060: IFFALSE 24064
// exit ;
24062: GO 24218
// for i in tmp do
24064: LD_ADDR_VAR 0 1
24068: PUSH
24069: LD_VAR 0 5
24073: PUSH
24074: FOR_IN
24075: IFFALSE 24216
// begin d := rand ( 0 , 5 ) ;
24077: LD_ADDR_VAR 0 4
24081: PUSH
24082: LD_INT 0
24084: PPUSH
24085: LD_INT 5
24087: PPUSH
24088: CALL_OW 12
24092: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
24093: LD_ADDR_VAR 0 2
24097: PUSH
24098: LD_VAR 0 1
24102: PPUSH
24103: CALL_OW 250
24107: PPUSH
24108: LD_VAR 0 4
24112: PPUSH
24113: LD_INT 3
24115: PPUSH
24116: LD_INT 12
24118: PPUSH
24119: CALL_OW 12
24123: PPUSH
24124: CALL_OW 272
24128: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
24129: LD_ADDR_VAR 0 3
24133: PUSH
24134: LD_VAR 0 1
24138: PPUSH
24139: CALL_OW 251
24143: PPUSH
24144: LD_VAR 0 4
24148: PPUSH
24149: LD_INT 3
24151: PPUSH
24152: LD_INT 12
24154: PPUSH
24155: CALL_OW 12
24159: PPUSH
24160: CALL_OW 273
24164: ST_TO_ADDR
// if ValidHex ( x , y ) then
24165: LD_VAR 0 2
24169: PPUSH
24170: LD_VAR 0 3
24174: PPUSH
24175: CALL_OW 488
24179: IFFALSE 24214
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
24181: LD_VAR 0 1
24185: PPUSH
24186: LD_VAR 0 2
24190: PPUSH
24191: LD_VAR 0 3
24195: PPUSH
24196: LD_INT 3
24198: PPUSH
24199: LD_INT 6
24201: PPUSH
24202: CALL_OW 12
24206: PPUSH
24207: LD_INT 1
24209: PPUSH
24210: CALL_OW 483
// end ;
24214: GO 24074
24216: POP
24217: POP
// end ;
24218: PPOPN 5
24220: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
24221: LD_EXP 57
24225: PUSH
24226: LD_EXP 92
24230: AND
24231: IFFALSE 24325
24233: GO 24235
24235: DISABLE
24236: LD_INT 0
24238: PPUSH
24239: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
24240: LD_ADDR_VAR 0 2
24244: PUSH
24245: LD_INT 22
24247: PUSH
24248: LD_OWVAR 2
24252: PUSH
24253: EMPTY
24254: LIST
24255: LIST
24256: PUSH
24257: LD_INT 32
24259: PUSH
24260: LD_INT 1
24262: PUSH
24263: EMPTY
24264: LIST
24265: LIST
24266: PUSH
24267: LD_INT 21
24269: PUSH
24270: LD_INT 2
24272: PUSH
24273: EMPTY
24274: LIST
24275: LIST
24276: PUSH
24277: EMPTY
24278: LIST
24279: LIST
24280: LIST
24281: PPUSH
24282: CALL_OW 69
24286: ST_TO_ADDR
// if not tmp then
24287: LD_VAR 0 2
24291: NOT
24292: IFFALSE 24296
// exit ;
24294: GO 24325
// for i in tmp do
24296: LD_ADDR_VAR 0 1
24300: PUSH
24301: LD_VAR 0 2
24305: PUSH
24306: FOR_IN
24307: IFFALSE 24323
// SetFuel ( i , 0 ) ;
24309: LD_VAR 0 1
24313: PPUSH
24314: LD_INT 0
24316: PPUSH
24317: CALL_OW 240
24321: GO 24306
24323: POP
24324: POP
// end ;
24325: PPOPN 2
24327: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
24328: LD_EXP 57
24332: PUSH
24333: LD_EXP 93
24337: AND
24338: IFFALSE 24404
24340: GO 24342
24342: DISABLE
24343: LD_INT 0
24345: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24346: LD_ADDR_VAR 0 1
24350: PUSH
24351: LD_INT 22
24353: PUSH
24354: LD_OWVAR 2
24358: PUSH
24359: EMPTY
24360: LIST
24361: LIST
24362: PUSH
24363: LD_INT 30
24365: PUSH
24366: LD_INT 29
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: PUSH
24373: EMPTY
24374: LIST
24375: LIST
24376: PPUSH
24377: CALL_OW 69
24381: ST_TO_ADDR
// if not tmp then
24382: LD_VAR 0 1
24386: NOT
24387: IFFALSE 24391
// exit ;
24389: GO 24404
// DestroyUnit ( tmp [ 1 ] ) ;
24391: LD_VAR 0 1
24395: PUSH
24396: LD_INT 1
24398: ARRAY
24399: PPUSH
24400: CALL_OW 65
// end ;
24404: PPOPN 1
24406: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
24407: LD_EXP 57
24411: PUSH
24412: LD_EXP 95
24416: AND
24417: IFFALSE 24546
24419: GO 24421
24421: DISABLE
24422: LD_INT 0
24424: PPUSH
// begin uc_side := 0 ;
24425: LD_ADDR_OWVAR 20
24429: PUSH
24430: LD_INT 0
24432: ST_TO_ADDR
// uc_nation := nation_arabian ;
24433: LD_ADDR_OWVAR 21
24437: PUSH
24438: LD_INT 2
24440: ST_TO_ADDR
// hc_gallery :=  ;
24441: LD_ADDR_OWVAR 33
24445: PUSH
24446: LD_STRING 
24448: ST_TO_ADDR
// hc_name :=  ;
24449: LD_ADDR_OWVAR 26
24453: PUSH
24454: LD_STRING 
24456: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
24457: LD_INT 1
24459: PPUSH
24460: LD_INT 11
24462: PPUSH
24463: LD_INT 10
24465: PPUSH
24466: CALL_OW 380
// un := CreateHuman ;
24470: LD_ADDR_VAR 0 1
24474: PUSH
24475: CALL_OW 44
24479: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24480: LD_VAR 0 1
24484: PPUSH
24485: LD_INT 1
24487: PPUSH
24488: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24492: LD_INT 35
24494: PPUSH
24495: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24499: LD_VAR 0 1
24503: PPUSH
24504: LD_INT 22
24506: PUSH
24507: LD_OWVAR 2
24511: PUSH
24512: EMPTY
24513: LIST
24514: LIST
24515: PPUSH
24516: CALL_OW 69
24520: PPUSH
24521: LD_VAR 0 1
24525: PPUSH
24526: CALL_OW 74
24530: PPUSH
24531: CALL_OW 115
// until IsDead ( un ) ;
24535: LD_VAR 0 1
24539: PPUSH
24540: CALL_OW 301
24544: IFFALSE 24492
// end ;
24546: PPOPN 1
24548: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
24549: LD_EXP 57
24553: PUSH
24554: LD_EXP 97
24558: AND
24559: IFFALSE 24571
24561: GO 24563
24563: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
24564: LD_STRING earthquake(getX(game), 0, 32)
24566: PPUSH
24567: CALL_OW 559
24571: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
24572: LD_EXP 57
24576: PUSH
24577: LD_EXP 98
24581: AND
24582: IFFALSE 24673
24584: GO 24586
24586: DISABLE
24587: LD_INT 0
24589: PPUSH
// begin enable ;
24590: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
24591: LD_ADDR_VAR 0 1
24595: PUSH
24596: LD_INT 22
24598: PUSH
24599: LD_OWVAR 2
24603: PUSH
24604: EMPTY
24605: LIST
24606: LIST
24607: PUSH
24608: LD_INT 21
24610: PUSH
24611: LD_INT 2
24613: PUSH
24614: EMPTY
24615: LIST
24616: LIST
24617: PUSH
24618: LD_INT 33
24620: PUSH
24621: LD_INT 3
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: PUSH
24628: EMPTY
24629: LIST
24630: LIST
24631: LIST
24632: PPUSH
24633: CALL_OW 69
24637: ST_TO_ADDR
// if not tmp then
24638: LD_VAR 0 1
24642: NOT
24643: IFFALSE 24647
// exit ;
24645: GO 24673
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24647: LD_VAR 0 1
24651: PUSH
24652: LD_INT 1
24654: PPUSH
24655: LD_VAR 0 1
24659: PPUSH
24660: CALL_OW 12
24664: ARRAY
24665: PPUSH
24666: LD_INT 1
24668: PPUSH
24669: CALL_OW 234
// end ;
24673: PPOPN 1
24675: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
24676: LD_EXP 57
24680: PUSH
24681: LD_EXP 99
24685: AND
24686: IFFALSE 24827
24688: GO 24690
24690: DISABLE
24691: LD_INT 0
24693: PPUSH
24694: PPUSH
24695: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24696: LD_ADDR_VAR 0 3
24700: PUSH
24701: LD_INT 22
24703: PUSH
24704: LD_OWVAR 2
24708: PUSH
24709: EMPTY
24710: LIST
24711: LIST
24712: PUSH
24713: LD_INT 25
24715: PUSH
24716: LD_INT 1
24718: PUSH
24719: EMPTY
24720: LIST
24721: LIST
24722: PUSH
24723: EMPTY
24724: LIST
24725: LIST
24726: PPUSH
24727: CALL_OW 69
24731: ST_TO_ADDR
// if not tmp then
24732: LD_VAR 0 3
24736: NOT
24737: IFFALSE 24741
// exit ;
24739: GO 24827
// un := tmp [ rand ( 1 , tmp ) ] ;
24741: LD_ADDR_VAR 0 2
24745: PUSH
24746: LD_VAR 0 3
24750: PUSH
24751: LD_INT 1
24753: PPUSH
24754: LD_VAR 0 3
24758: PPUSH
24759: CALL_OW 12
24763: ARRAY
24764: ST_TO_ADDR
// if Crawls ( un ) then
24765: LD_VAR 0 2
24769: PPUSH
24770: CALL_OW 318
24774: IFFALSE 24785
// ComWalk ( un ) ;
24776: LD_VAR 0 2
24780: PPUSH
24781: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
24785: LD_VAR 0 2
24789: PPUSH
24790: LD_INT 9
24792: PPUSH
24793: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
24797: LD_INT 28
24799: PPUSH
24800: LD_OWVAR 2
24804: PPUSH
24805: LD_INT 2
24807: PPUSH
24808: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
24812: LD_INT 29
24814: PPUSH
24815: LD_OWVAR 2
24819: PPUSH
24820: LD_INT 2
24822: PPUSH
24823: CALL_OW 322
// end ;
24827: PPOPN 3
24829: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
24830: LD_EXP 57
24834: PUSH
24835: LD_EXP 100
24839: AND
24840: IFFALSE 24951
24842: GO 24844
24844: DISABLE
24845: LD_INT 0
24847: PPUSH
24848: PPUSH
24849: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24850: LD_ADDR_VAR 0 3
24854: PUSH
24855: LD_INT 22
24857: PUSH
24858: LD_OWVAR 2
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: PUSH
24867: LD_INT 25
24869: PUSH
24870: LD_INT 1
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: PPUSH
24881: CALL_OW 69
24885: ST_TO_ADDR
// if not tmp then
24886: LD_VAR 0 3
24890: NOT
24891: IFFALSE 24895
// exit ;
24893: GO 24951
// un := tmp [ rand ( 1 , tmp ) ] ;
24895: LD_ADDR_VAR 0 2
24899: PUSH
24900: LD_VAR 0 3
24904: PUSH
24905: LD_INT 1
24907: PPUSH
24908: LD_VAR 0 3
24912: PPUSH
24913: CALL_OW 12
24917: ARRAY
24918: ST_TO_ADDR
// if Crawls ( un ) then
24919: LD_VAR 0 2
24923: PPUSH
24924: CALL_OW 318
24928: IFFALSE 24939
// ComWalk ( un ) ;
24930: LD_VAR 0 2
24934: PPUSH
24935: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24939: LD_VAR 0 2
24943: PPUSH
24944: LD_INT 8
24946: PPUSH
24947: CALL_OW 336
// end ;
24951: PPOPN 3
24953: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
24954: LD_EXP 57
24958: PUSH
24959: LD_EXP 101
24963: AND
24964: IFFALSE 25108
24966: GO 24968
24968: DISABLE
24969: LD_INT 0
24971: PPUSH
24972: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
24973: LD_ADDR_VAR 0 2
24977: PUSH
24978: LD_INT 22
24980: PUSH
24981: LD_OWVAR 2
24985: PUSH
24986: EMPTY
24987: LIST
24988: LIST
24989: PUSH
24990: LD_INT 21
24992: PUSH
24993: LD_INT 2
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: PUSH
25000: LD_INT 2
25002: PUSH
25003: LD_INT 34
25005: PUSH
25006: LD_INT 12
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: PUSH
25013: LD_INT 34
25015: PUSH
25016: LD_INT 51
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: PUSH
25023: LD_INT 34
25025: PUSH
25026: LD_INT 32
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: PUSH
25033: EMPTY
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: LIST
25043: PPUSH
25044: CALL_OW 69
25048: ST_TO_ADDR
// if not tmp then
25049: LD_VAR 0 2
25053: NOT
25054: IFFALSE 25058
// exit ;
25056: GO 25108
// for i in tmp do
25058: LD_ADDR_VAR 0 1
25062: PUSH
25063: LD_VAR 0 2
25067: PUSH
25068: FOR_IN
25069: IFFALSE 25106
// if GetCargo ( i , mat_artifact ) = 0 then
25071: LD_VAR 0 1
25075: PPUSH
25076: LD_INT 4
25078: PPUSH
25079: CALL_OW 289
25083: PUSH
25084: LD_INT 0
25086: EQUAL
25087: IFFALSE 25104
// SetCargo ( i , mat_siberit , 100 ) ;
25089: LD_VAR 0 1
25093: PPUSH
25094: LD_INT 3
25096: PPUSH
25097: LD_INT 100
25099: PPUSH
25100: CALL_OW 290
25104: GO 25068
25106: POP
25107: POP
// end ;
25108: PPOPN 2
25110: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
25111: LD_EXP 57
25115: PUSH
25116: LD_EXP 102
25120: AND
25121: IFFALSE 25304
25123: GO 25125
25125: DISABLE
25126: LD_INT 0
25128: PPUSH
25129: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25130: LD_ADDR_VAR 0 2
25134: PUSH
25135: LD_INT 22
25137: PUSH
25138: LD_OWVAR 2
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: PPUSH
25147: CALL_OW 69
25151: ST_TO_ADDR
// if not tmp then
25152: LD_VAR 0 2
25156: NOT
25157: IFFALSE 25161
// exit ;
25159: GO 25304
// for i := 1 to 2 do
25161: LD_ADDR_VAR 0 1
25165: PUSH
25166: DOUBLE
25167: LD_INT 1
25169: DEC
25170: ST_TO_ADDR
25171: LD_INT 2
25173: PUSH
25174: FOR_TO
25175: IFFALSE 25302
// begin uc_side := your_side ;
25177: LD_ADDR_OWVAR 20
25181: PUSH
25182: LD_OWVAR 2
25186: ST_TO_ADDR
// uc_nation := nation_american ;
25187: LD_ADDR_OWVAR 21
25191: PUSH
25192: LD_INT 1
25194: ST_TO_ADDR
// vc_chassis := us_morphling ;
25195: LD_ADDR_OWVAR 37
25199: PUSH
25200: LD_INT 5
25202: ST_TO_ADDR
// vc_engine := engine_siberite ;
25203: LD_ADDR_OWVAR 39
25207: PUSH
25208: LD_INT 3
25210: ST_TO_ADDR
// vc_control := control_computer ;
25211: LD_ADDR_OWVAR 38
25215: PUSH
25216: LD_INT 3
25218: ST_TO_ADDR
// vc_weapon := us_double_laser ;
25219: LD_ADDR_OWVAR 40
25223: PUSH
25224: LD_INT 10
25226: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
25227: LD_VAR 0 2
25231: PUSH
25232: LD_INT 1
25234: ARRAY
25235: PPUSH
25236: CALL_OW 310
25240: NOT
25241: IFFALSE 25288
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
25243: CALL_OW 45
25247: PPUSH
25248: LD_VAR 0 2
25252: PUSH
25253: LD_INT 1
25255: ARRAY
25256: PPUSH
25257: CALL_OW 250
25261: PPUSH
25262: LD_VAR 0 2
25266: PUSH
25267: LD_INT 1
25269: ARRAY
25270: PPUSH
25271: CALL_OW 251
25275: PPUSH
25276: LD_INT 12
25278: PPUSH
25279: LD_INT 1
25281: PPUSH
25282: CALL_OW 50
25286: GO 25300
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
25288: CALL_OW 45
25292: PPUSH
25293: LD_INT 1
25295: PPUSH
25296: CALL_OW 51
// end ;
25300: GO 25174
25302: POP
25303: POP
// end ;
25304: PPOPN 2
25306: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
25307: LD_EXP 57
25311: PUSH
25312: LD_EXP 103
25316: AND
25317: IFFALSE 25539
25319: GO 25321
25321: DISABLE
25322: LD_INT 0
25324: PPUSH
25325: PPUSH
25326: PPUSH
25327: PPUSH
25328: PPUSH
25329: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25330: LD_ADDR_VAR 0 6
25334: PUSH
25335: LD_INT 22
25337: PUSH
25338: LD_OWVAR 2
25342: PUSH
25343: EMPTY
25344: LIST
25345: LIST
25346: PUSH
25347: LD_INT 21
25349: PUSH
25350: LD_INT 1
25352: PUSH
25353: EMPTY
25354: LIST
25355: LIST
25356: PUSH
25357: LD_INT 3
25359: PUSH
25360: LD_INT 23
25362: PUSH
25363: LD_INT 0
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: PUSH
25370: EMPTY
25371: LIST
25372: LIST
25373: PUSH
25374: EMPTY
25375: LIST
25376: LIST
25377: LIST
25378: PPUSH
25379: CALL_OW 69
25383: ST_TO_ADDR
// if not tmp then
25384: LD_VAR 0 6
25388: NOT
25389: IFFALSE 25393
// exit ;
25391: GO 25539
// s1 := rand ( 1 , 4 ) ;
25393: LD_ADDR_VAR 0 2
25397: PUSH
25398: LD_INT 1
25400: PPUSH
25401: LD_INT 4
25403: PPUSH
25404: CALL_OW 12
25408: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
25409: LD_ADDR_VAR 0 4
25413: PUSH
25414: LD_VAR 0 6
25418: PUSH
25419: LD_INT 1
25421: ARRAY
25422: PPUSH
25423: LD_VAR 0 2
25427: PPUSH
25428: CALL_OW 259
25432: ST_TO_ADDR
// if s1 = 1 then
25433: LD_VAR 0 2
25437: PUSH
25438: LD_INT 1
25440: EQUAL
25441: IFFALSE 25461
// s2 := rand ( 2 , 4 ) else
25443: LD_ADDR_VAR 0 3
25447: PUSH
25448: LD_INT 2
25450: PPUSH
25451: LD_INT 4
25453: PPUSH
25454: CALL_OW 12
25458: ST_TO_ADDR
25459: GO 25469
// s2 := 1 ;
25461: LD_ADDR_VAR 0 3
25465: PUSH
25466: LD_INT 1
25468: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
25469: LD_ADDR_VAR 0 5
25473: PUSH
25474: LD_VAR 0 6
25478: PUSH
25479: LD_INT 1
25481: ARRAY
25482: PPUSH
25483: LD_VAR 0 3
25487: PPUSH
25488: CALL_OW 259
25492: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
25493: LD_VAR 0 6
25497: PUSH
25498: LD_INT 1
25500: ARRAY
25501: PPUSH
25502: LD_VAR 0 2
25506: PPUSH
25507: LD_VAR 0 5
25511: PPUSH
25512: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
25516: LD_VAR 0 6
25520: PUSH
25521: LD_INT 1
25523: ARRAY
25524: PPUSH
25525: LD_VAR 0 3
25529: PPUSH
25530: LD_VAR 0 4
25534: PPUSH
25535: CALL_OW 237
// end ;
25539: PPOPN 6
25541: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
25542: LD_EXP 57
25546: PUSH
25547: LD_EXP 104
25551: AND
25552: IFFALSE 25631
25554: GO 25556
25556: DISABLE
25557: LD_INT 0
25559: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
25560: LD_ADDR_VAR 0 1
25564: PUSH
25565: LD_INT 22
25567: PUSH
25568: LD_OWVAR 2
25572: PUSH
25573: EMPTY
25574: LIST
25575: LIST
25576: PUSH
25577: LD_INT 30
25579: PUSH
25580: LD_INT 3
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: PUSH
25587: EMPTY
25588: LIST
25589: LIST
25590: PPUSH
25591: CALL_OW 69
25595: ST_TO_ADDR
// if not tmp then
25596: LD_VAR 0 1
25600: NOT
25601: IFFALSE 25605
// exit ;
25603: GO 25631
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25605: LD_VAR 0 1
25609: PUSH
25610: LD_INT 1
25612: PPUSH
25613: LD_VAR 0 1
25617: PPUSH
25618: CALL_OW 12
25622: ARRAY
25623: PPUSH
25624: LD_INT 1
25626: PPUSH
25627: CALL_OW 234
// end ;
25631: PPOPN 1
25633: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
25634: LD_EXP 57
25638: PUSH
25639: LD_EXP 105
25643: AND
25644: IFFALSE 25756
25646: GO 25648
25648: DISABLE
25649: LD_INT 0
25651: PPUSH
25652: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
25653: LD_ADDR_VAR 0 2
25657: PUSH
25658: LD_INT 22
25660: PUSH
25661: LD_OWVAR 2
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: PUSH
25670: LD_INT 2
25672: PUSH
25673: LD_INT 30
25675: PUSH
25676: LD_INT 27
25678: PUSH
25679: EMPTY
25680: LIST
25681: LIST
25682: PUSH
25683: LD_INT 30
25685: PUSH
25686: LD_INT 26
25688: PUSH
25689: EMPTY
25690: LIST
25691: LIST
25692: PUSH
25693: LD_INT 30
25695: PUSH
25696: LD_INT 28
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: PUSH
25703: EMPTY
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: PUSH
25709: EMPTY
25710: LIST
25711: LIST
25712: PPUSH
25713: CALL_OW 69
25717: ST_TO_ADDR
// if not tmp then
25718: LD_VAR 0 2
25722: NOT
25723: IFFALSE 25727
// exit ;
25725: GO 25756
// for i in tmp do
25727: LD_ADDR_VAR 0 1
25731: PUSH
25732: LD_VAR 0 2
25736: PUSH
25737: FOR_IN
25738: IFFALSE 25754
// SetLives ( i , 1 ) ;
25740: LD_VAR 0 1
25744: PPUSH
25745: LD_INT 1
25747: PPUSH
25748: CALL_OW 234
25752: GO 25737
25754: POP
25755: POP
// end ;
25756: PPOPN 2
25758: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
25759: LD_EXP 57
25763: PUSH
25764: LD_EXP 106
25768: AND
25769: IFFALSE 26056
25771: GO 25773
25773: DISABLE
25774: LD_INT 0
25776: PPUSH
25777: PPUSH
25778: PPUSH
// begin i := rand ( 1 , 7 ) ;
25779: LD_ADDR_VAR 0 1
25783: PUSH
25784: LD_INT 1
25786: PPUSH
25787: LD_INT 7
25789: PPUSH
25790: CALL_OW 12
25794: ST_TO_ADDR
// case i of 1 :
25795: LD_VAR 0 1
25799: PUSH
25800: LD_INT 1
25802: DOUBLE
25803: EQUAL
25804: IFTRUE 25808
25806: GO 25818
25808: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
25809: LD_STRING earthquake(getX(game), 0, 32)
25811: PPUSH
25812: CALL_OW 559
25816: GO 26056
25818: LD_INT 2
25820: DOUBLE
25821: EQUAL
25822: IFTRUE 25826
25824: GO 25840
25826: POP
// begin ToLua ( displayStucuk(); ) ;
25827: LD_STRING displayStucuk();
25829: PPUSH
25830: CALL_OW 559
// ResetFog ;
25834: CALL_OW 335
// end ; 3 :
25838: GO 26056
25840: LD_INT 3
25842: DOUBLE
25843: EQUAL
25844: IFTRUE 25848
25846: GO 25952
25848: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25849: LD_ADDR_VAR 0 2
25853: PUSH
25854: LD_INT 22
25856: PUSH
25857: LD_OWVAR 2
25861: PUSH
25862: EMPTY
25863: LIST
25864: LIST
25865: PUSH
25866: LD_INT 25
25868: PUSH
25869: LD_INT 1
25871: PUSH
25872: EMPTY
25873: LIST
25874: LIST
25875: PUSH
25876: EMPTY
25877: LIST
25878: LIST
25879: PPUSH
25880: CALL_OW 69
25884: ST_TO_ADDR
// if not tmp then
25885: LD_VAR 0 2
25889: NOT
25890: IFFALSE 25894
// exit ;
25892: GO 26056
// un := tmp [ rand ( 1 , tmp ) ] ;
25894: LD_ADDR_VAR 0 3
25898: PUSH
25899: LD_VAR 0 2
25903: PUSH
25904: LD_INT 1
25906: PPUSH
25907: LD_VAR 0 2
25911: PPUSH
25912: CALL_OW 12
25916: ARRAY
25917: ST_TO_ADDR
// if Crawls ( un ) then
25918: LD_VAR 0 3
25922: PPUSH
25923: CALL_OW 318
25927: IFFALSE 25938
// ComWalk ( un ) ;
25929: LD_VAR 0 3
25933: PPUSH
25934: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25938: LD_VAR 0 3
25942: PPUSH
25943: LD_INT 8
25945: PPUSH
25946: CALL_OW 336
// end ; 4 :
25950: GO 26056
25952: LD_INT 4
25954: DOUBLE
25955: EQUAL
25956: IFTRUE 25960
25958: GO 26034
25960: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25961: LD_ADDR_VAR 0 2
25965: PUSH
25966: LD_INT 22
25968: PUSH
25969: LD_OWVAR 2
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: PUSH
25978: LD_INT 30
25980: PUSH
25981: LD_INT 29
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: PPUSH
25992: CALL_OW 69
25996: ST_TO_ADDR
// if not tmp then
25997: LD_VAR 0 2
26001: NOT
26002: IFFALSE 26006
// exit ;
26004: GO 26056
// CenterNowOnUnits ( tmp [ 1 ] ) ;
26006: LD_VAR 0 2
26010: PUSH
26011: LD_INT 1
26013: ARRAY
26014: PPUSH
26015: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
26019: LD_VAR 0 2
26023: PUSH
26024: LD_INT 1
26026: ARRAY
26027: PPUSH
26028: CALL_OW 65
// end ; 5 .. 7 :
26032: GO 26056
26034: LD_INT 5
26036: DOUBLE
26037: GREATEREQUAL
26038: IFFALSE 26046
26040: LD_INT 7
26042: DOUBLE
26043: LESSEQUAL
26044: IFTRUE 26048
26046: GO 26055
26048: POP
// StreamSibBomb ; end ;
26049: CALL 22293 0 0
26053: GO 26056
26055: POP
// end ;
26056: PPOPN 3
26058: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
26059: LD_EXP 57
26063: PUSH
26064: LD_EXP 107
26068: AND
26069: IFFALSE 26225
26071: GO 26073
26073: DISABLE
26074: LD_INT 0
26076: PPUSH
26077: PPUSH
26078: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
26079: LD_ADDR_VAR 0 2
26083: PUSH
26084: LD_INT 81
26086: PUSH
26087: LD_OWVAR 2
26091: PUSH
26092: EMPTY
26093: LIST
26094: LIST
26095: PUSH
26096: LD_INT 2
26098: PUSH
26099: LD_INT 21
26101: PUSH
26102: LD_INT 1
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: PUSH
26109: LD_INT 21
26111: PUSH
26112: LD_INT 2
26114: PUSH
26115: EMPTY
26116: LIST
26117: LIST
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: LIST
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PPUSH
26128: CALL_OW 69
26132: ST_TO_ADDR
// if not tmp then
26133: LD_VAR 0 2
26137: NOT
26138: IFFALSE 26142
// exit ;
26140: GO 26225
// p := 0 ;
26142: LD_ADDR_VAR 0 3
26146: PUSH
26147: LD_INT 0
26149: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26150: LD_INT 35
26152: PPUSH
26153: CALL_OW 67
// p := p + 1 ;
26157: LD_ADDR_VAR 0 3
26161: PUSH
26162: LD_VAR 0 3
26166: PUSH
26167: LD_INT 1
26169: PLUS
26170: ST_TO_ADDR
// for i in tmp do
26171: LD_ADDR_VAR 0 1
26175: PUSH
26176: LD_VAR 0 2
26180: PUSH
26181: FOR_IN
26182: IFFALSE 26213
// if GetLives ( i ) < 1000 then
26184: LD_VAR 0 1
26188: PPUSH
26189: CALL_OW 256
26193: PUSH
26194: LD_INT 1000
26196: LESS
26197: IFFALSE 26211
// SetLives ( i , 1000 ) ;
26199: LD_VAR 0 1
26203: PPUSH
26204: LD_INT 1000
26206: PPUSH
26207: CALL_OW 234
26211: GO 26181
26213: POP
26214: POP
// until p > 20 ;
26215: LD_VAR 0 3
26219: PUSH
26220: LD_INT 20
26222: GREATER
26223: IFFALSE 26150
// end ;
26225: PPOPN 3
26227: END
// every 0 0$1 trigger StreamModeActive and sTime do
26228: LD_EXP 57
26232: PUSH
26233: LD_EXP 108
26237: AND
26238: IFFALSE 26273
26240: GO 26242
26242: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
26243: LD_INT 28
26245: PPUSH
26246: LD_OWVAR 2
26250: PPUSH
26251: LD_INT 2
26253: PPUSH
26254: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
26258: LD_INT 30
26260: PPUSH
26261: LD_OWVAR 2
26265: PPUSH
26266: LD_INT 2
26268: PPUSH
26269: CALL_OW 322
// end ;
26273: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
26274: LD_EXP 57
26278: PUSH
26279: LD_EXP 109
26283: AND
26284: IFFALSE 26405
26286: GO 26288
26288: DISABLE
26289: LD_INT 0
26291: PPUSH
26292: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26293: LD_ADDR_VAR 0 2
26297: PUSH
26298: LD_INT 22
26300: PUSH
26301: LD_OWVAR 2
26305: PUSH
26306: EMPTY
26307: LIST
26308: LIST
26309: PUSH
26310: LD_INT 21
26312: PUSH
26313: LD_INT 1
26315: PUSH
26316: EMPTY
26317: LIST
26318: LIST
26319: PUSH
26320: LD_INT 3
26322: PUSH
26323: LD_INT 23
26325: PUSH
26326: LD_INT 0
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PUSH
26337: EMPTY
26338: LIST
26339: LIST
26340: LIST
26341: PPUSH
26342: CALL_OW 69
26346: ST_TO_ADDR
// if not tmp then
26347: LD_VAR 0 2
26351: NOT
26352: IFFALSE 26356
// exit ;
26354: GO 26405
// for i in tmp do
26356: LD_ADDR_VAR 0 1
26360: PUSH
26361: LD_VAR 0 2
26365: PUSH
26366: FOR_IN
26367: IFFALSE 26403
// begin if Crawls ( i ) then
26369: LD_VAR 0 1
26373: PPUSH
26374: CALL_OW 318
26378: IFFALSE 26389
// ComWalk ( i ) ;
26380: LD_VAR 0 1
26384: PPUSH
26385: CALL_OW 138
// SetClass ( i , 2 ) ;
26389: LD_VAR 0 1
26393: PPUSH
26394: LD_INT 2
26396: PPUSH
26397: CALL_OW 336
// end ;
26401: GO 26366
26403: POP
26404: POP
// end ;
26405: PPOPN 2
26407: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
26408: LD_EXP 57
26412: PUSH
26413: LD_EXP 110
26417: AND
26418: IFFALSE 26706
26420: GO 26422
26422: DISABLE
26423: LD_INT 0
26425: PPUSH
26426: PPUSH
26427: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
26428: LD_OWVAR 2
26432: PPUSH
26433: LD_INT 9
26435: PPUSH
26436: LD_INT 1
26438: PPUSH
26439: LD_INT 1
26441: PPUSH
26442: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
26446: LD_INT 9
26448: PPUSH
26449: LD_OWVAR 2
26453: PPUSH
26454: CALL_OW 343
// uc_side := 9 ;
26458: LD_ADDR_OWVAR 20
26462: PUSH
26463: LD_INT 9
26465: ST_TO_ADDR
// uc_nation := 2 ;
26466: LD_ADDR_OWVAR 21
26470: PUSH
26471: LD_INT 2
26473: ST_TO_ADDR
// hc_name := Dark Warrior ;
26474: LD_ADDR_OWVAR 26
26478: PUSH
26479: LD_STRING Dark Warrior
26481: ST_TO_ADDR
// hc_gallery :=  ;
26482: LD_ADDR_OWVAR 33
26486: PUSH
26487: LD_STRING 
26489: ST_TO_ADDR
// hc_noskilllimit := true ;
26490: LD_ADDR_OWVAR 76
26494: PUSH
26495: LD_INT 1
26497: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
26498: LD_ADDR_OWVAR 31
26502: PUSH
26503: LD_INT 30
26505: PUSH
26506: LD_INT 30
26508: PUSH
26509: LD_INT 30
26511: PUSH
26512: LD_INT 30
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: LIST
26519: LIST
26520: ST_TO_ADDR
// un := CreateHuman ;
26521: LD_ADDR_VAR 0 3
26525: PUSH
26526: CALL_OW 44
26530: ST_TO_ADDR
// hc_noskilllimit := false ;
26531: LD_ADDR_OWVAR 76
26535: PUSH
26536: LD_INT 0
26538: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26539: LD_VAR 0 3
26543: PPUSH
26544: LD_INT 1
26546: PPUSH
26547: CALL_OW 51
// ToLua ( playRanger() ) ;
26551: LD_STRING playRanger()
26553: PPUSH
26554: CALL_OW 559
// p := 0 ;
26558: LD_ADDR_VAR 0 2
26562: PUSH
26563: LD_INT 0
26565: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26566: LD_INT 35
26568: PPUSH
26569: CALL_OW 67
// p := p + 1 ;
26573: LD_ADDR_VAR 0 2
26577: PUSH
26578: LD_VAR 0 2
26582: PUSH
26583: LD_INT 1
26585: PLUS
26586: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
26587: LD_VAR 0 3
26591: PPUSH
26592: CALL_OW 256
26596: PUSH
26597: LD_INT 1000
26599: LESS
26600: IFFALSE 26614
// SetLives ( un , 1000 ) ;
26602: LD_VAR 0 3
26606: PPUSH
26607: LD_INT 1000
26609: PPUSH
26610: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
26614: LD_VAR 0 3
26618: PPUSH
26619: LD_INT 81
26621: PUSH
26622: LD_OWVAR 2
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PUSH
26631: LD_INT 91
26633: PUSH
26634: LD_VAR 0 3
26638: PUSH
26639: LD_INT 30
26641: PUSH
26642: EMPTY
26643: LIST
26644: LIST
26645: LIST
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: PPUSH
26651: CALL_OW 69
26655: PPUSH
26656: LD_VAR 0 3
26660: PPUSH
26661: CALL_OW 74
26665: PPUSH
26666: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
26670: LD_VAR 0 2
26674: PUSH
26675: LD_INT 80
26677: GREATER
26678: PUSH
26679: LD_VAR 0 3
26683: PPUSH
26684: CALL_OW 301
26688: OR
26689: IFFALSE 26566
// if un then
26691: LD_VAR 0 3
26695: IFFALSE 26706
// RemoveUnit ( un ) ;
26697: LD_VAR 0 3
26701: PPUSH
26702: CALL_OW 64
// end ;
26706: PPOPN 3
26708: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
26709: LD_EXP 111
26713: IFFALSE 26829
26715: GO 26717
26717: DISABLE
26718: LD_INT 0
26720: PPUSH
26721: PPUSH
26722: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26723: LD_ADDR_VAR 0 2
26727: PUSH
26728: LD_INT 81
26730: PUSH
26731: LD_OWVAR 2
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: PUSH
26740: LD_INT 21
26742: PUSH
26743: LD_INT 1
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: PPUSH
26754: CALL_OW 69
26758: ST_TO_ADDR
// ToLua ( playComputer() ) ;
26759: LD_STRING playComputer()
26761: PPUSH
26762: CALL_OW 559
// if not tmp then
26766: LD_VAR 0 2
26770: NOT
26771: IFFALSE 26775
// exit ;
26773: GO 26829
// for i in tmp do
26775: LD_ADDR_VAR 0 1
26779: PUSH
26780: LD_VAR 0 2
26784: PUSH
26785: FOR_IN
26786: IFFALSE 26827
// for j := 1 to 4 do
26788: LD_ADDR_VAR 0 3
26792: PUSH
26793: DOUBLE
26794: LD_INT 1
26796: DEC
26797: ST_TO_ADDR
26798: LD_INT 4
26800: PUSH
26801: FOR_TO
26802: IFFALSE 26823
// SetSkill ( i , j , 10 ) ;
26804: LD_VAR 0 1
26808: PPUSH
26809: LD_VAR 0 3
26813: PPUSH
26814: LD_INT 10
26816: PPUSH
26817: CALL_OW 237
26821: GO 26801
26823: POP
26824: POP
26825: GO 26785
26827: POP
26828: POP
// end ;
26829: PPOPN 3
26831: END
// every 0 0$1 trigger s30 do var i , tmp ;
26832: LD_EXP 112
26836: IFFALSE 26905
26838: GO 26840
26840: DISABLE
26841: LD_INT 0
26843: PPUSH
26844: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26845: LD_ADDR_VAR 0 2
26849: PUSH
26850: LD_INT 22
26852: PUSH
26853: LD_OWVAR 2
26857: PUSH
26858: EMPTY
26859: LIST
26860: LIST
26861: PPUSH
26862: CALL_OW 69
26866: ST_TO_ADDR
// if not tmp then
26867: LD_VAR 0 2
26871: NOT
26872: IFFALSE 26876
// exit ;
26874: GO 26905
// for i in tmp do
26876: LD_ADDR_VAR 0 1
26880: PUSH
26881: LD_VAR 0 2
26885: PUSH
26886: FOR_IN
26887: IFFALSE 26903
// SetLives ( i , 300 ) ;
26889: LD_VAR 0 1
26893: PPUSH
26894: LD_INT 300
26896: PPUSH
26897: CALL_OW 234
26901: GO 26886
26903: POP
26904: POP
// end ;
26905: PPOPN 2
26907: END
// every 0 0$1 trigger s60 do var i , tmp ;
26908: LD_EXP 113
26912: IFFALSE 26981
26914: GO 26916
26916: DISABLE
26917: LD_INT 0
26919: PPUSH
26920: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26921: LD_ADDR_VAR 0 2
26925: PUSH
26926: LD_INT 22
26928: PUSH
26929: LD_OWVAR 2
26933: PUSH
26934: EMPTY
26935: LIST
26936: LIST
26937: PPUSH
26938: CALL_OW 69
26942: ST_TO_ADDR
// if not tmp then
26943: LD_VAR 0 2
26947: NOT
26948: IFFALSE 26952
// exit ;
26950: GO 26981
// for i in tmp do
26952: LD_ADDR_VAR 0 1
26956: PUSH
26957: LD_VAR 0 2
26961: PUSH
26962: FOR_IN
26963: IFFALSE 26979
// SetLives ( i , 600 ) ;
26965: LD_VAR 0 1
26969: PPUSH
26970: LD_INT 600
26972: PPUSH
26973: CALL_OW 234
26977: GO 26962
26979: POP
26980: POP
// end ;
26981: PPOPN 2
26983: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
26984: LD_INT 0
26986: PPUSH
// case cmd of 301 :
26987: LD_VAR 0 1
26991: PUSH
26992: LD_INT 301
26994: DOUBLE
26995: EQUAL
26996: IFTRUE 27000
26998: GO 27032
27000: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
27001: LD_VAR 0 6
27005: PPUSH
27006: LD_VAR 0 7
27010: PPUSH
27011: LD_VAR 0 8
27015: PPUSH
27016: LD_VAR 0 4
27020: PPUSH
27021: LD_VAR 0 5
27025: PPUSH
27026: CALL 28233 0 5
27030: GO 27153
27032: LD_INT 302
27034: DOUBLE
27035: EQUAL
27036: IFTRUE 27040
27038: GO 27077
27040: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
27041: LD_VAR 0 6
27045: PPUSH
27046: LD_VAR 0 7
27050: PPUSH
27051: LD_VAR 0 8
27055: PPUSH
27056: LD_VAR 0 9
27060: PPUSH
27061: LD_VAR 0 4
27065: PPUSH
27066: LD_VAR 0 5
27070: PPUSH
27071: CALL 28324 0 6
27075: GO 27153
27077: LD_INT 303
27079: DOUBLE
27080: EQUAL
27081: IFTRUE 27085
27083: GO 27122
27085: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
27086: LD_VAR 0 6
27090: PPUSH
27091: LD_VAR 0 7
27095: PPUSH
27096: LD_VAR 0 8
27100: PPUSH
27101: LD_VAR 0 9
27105: PPUSH
27106: LD_VAR 0 4
27110: PPUSH
27111: LD_VAR 0 5
27115: PPUSH
27116: CALL 27158 0 6
27120: GO 27153
27122: LD_INT 304
27124: DOUBLE
27125: EQUAL
27126: IFTRUE 27130
27128: GO 27152
27130: POP
// hHackTeleport ( unit , x , y ) ; end ;
27131: LD_VAR 0 2
27135: PPUSH
27136: LD_VAR 0 4
27140: PPUSH
27141: LD_VAR 0 5
27145: PPUSH
27146: CALL 28917 0 3
27150: GO 27153
27152: POP
// end ;
27153: LD_VAR 0 12
27157: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
27158: LD_INT 0
27160: PPUSH
27161: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
27162: LD_VAR 0 1
27166: PUSH
27167: LD_INT 1
27169: LESS
27170: PUSH
27171: LD_VAR 0 1
27175: PUSH
27176: LD_INT 3
27178: GREATER
27179: OR
27180: PUSH
27181: LD_VAR 0 5
27185: PPUSH
27186: LD_VAR 0 6
27190: PPUSH
27191: CALL_OW 428
27195: OR
27196: IFFALSE 27200
// exit ;
27198: GO 27920
// uc_side := your_side ;
27200: LD_ADDR_OWVAR 20
27204: PUSH
27205: LD_OWVAR 2
27209: ST_TO_ADDR
// uc_nation := nation ;
27210: LD_ADDR_OWVAR 21
27214: PUSH
27215: LD_VAR 0 1
27219: ST_TO_ADDR
// bc_level = 1 ;
27220: LD_ADDR_OWVAR 43
27224: PUSH
27225: LD_INT 1
27227: ST_TO_ADDR
// case btype of 1 :
27228: LD_VAR 0 2
27232: PUSH
27233: LD_INT 1
27235: DOUBLE
27236: EQUAL
27237: IFTRUE 27241
27239: GO 27252
27241: POP
// bc_type := b_depot ; 2 :
27242: LD_ADDR_OWVAR 42
27246: PUSH
27247: LD_INT 0
27249: ST_TO_ADDR
27250: GO 27864
27252: LD_INT 2
27254: DOUBLE
27255: EQUAL
27256: IFTRUE 27260
27258: GO 27271
27260: POP
// bc_type := b_warehouse ; 3 :
27261: LD_ADDR_OWVAR 42
27265: PUSH
27266: LD_INT 1
27268: ST_TO_ADDR
27269: GO 27864
27271: LD_INT 3
27273: DOUBLE
27274: EQUAL
27275: IFTRUE 27279
27277: GO 27290
27279: POP
// bc_type := b_lab ; 4 .. 9 :
27280: LD_ADDR_OWVAR 42
27284: PUSH
27285: LD_INT 6
27287: ST_TO_ADDR
27288: GO 27864
27290: LD_INT 4
27292: DOUBLE
27293: GREATEREQUAL
27294: IFFALSE 27302
27296: LD_INT 9
27298: DOUBLE
27299: LESSEQUAL
27300: IFTRUE 27304
27302: GO 27356
27304: POP
// begin bc_type := b_lab_half ;
27305: LD_ADDR_OWVAR 42
27309: PUSH
27310: LD_INT 7
27312: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
27313: LD_ADDR_OWVAR 44
27317: PUSH
27318: LD_INT 10
27320: PUSH
27321: LD_INT 11
27323: PUSH
27324: LD_INT 12
27326: PUSH
27327: LD_INT 15
27329: PUSH
27330: LD_INT 14
27332: PUSH
27333: LD_INT 13
27335: PUSH
27336: EMPTY
27337: LIST
27338: LIST
27339: LIST
27340: LIST
27341: LIST
27342: LIST
27343: PUSH
27344: LD_VAR 0 2
27348: PUSH
27349: LD_INT 3
27351: MINUS
27352: ARRAY
27353: ST_TO_ADDR
// end ; 10 .. 13 :
27354: GO 27864
27356: LD_INT 10
27358: DOUBLE
27359: GREATEREQUAL
27360: IFFALSE 27368
27362: LD_INT 13
27364: DOUBLE
27365: LESSEQUAL
27366: IFTRUE 27370
27368: GO 27447
27370: POP
// begin bc_type := b_lab_full ;
27371: LD_ADDR_OWVAR 42
27375: PUSH
27376: LD_INT 8
27378: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
27379: LD_ADDR_OWVAR 44
27383: PUSH
27384: LD_INT 10
27386: PUSH
27387: LD_INT 12
27389: PUSH
27390: LD_INT 14
27392: PUSH
27393: LD_INT 13
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: PUSH
27402: LD_VAR 0 2
27406: PUSH
27407: LD_INT 9
27409: MINUS
27410: ARRAY
27411: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
27412: LD_ADDR_OWVAR 45
27416: PUSH
27417: LD_INT 11
27419: PUSH
27420: LD_INT 15
27422: PUSH
27423: LD_INT 12
27425: PUSH
27426: LD_INT 15
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: LIST
27433: LIST
27434: PUSH
27435: LD_VAR 0 2
27439: PUSH
27440: LD_INT 9
27442: MINUS
27443: ARRAY
27444: ST_TO_ADDR
// end ; 14 :
27445: GO 27864
27447: LD_INT 14
27449: DOUBLE
27450: EQUAL
27451: IFTRUE 27455
27453: GO 27466
27455: POP
// bc_type := b_workshop ; 15 :
27456: LD_ADDR_OWVAR 42
27460: PUSH
27461: LD_INT 2
27463: ST_TO_ADDR
27464: GO 27864
27466: LD_INT 15
27468: DOUBLE
27469: EQUAL
27470: IFTRUE 27474
27472: GO 27485
27474: POP
// bc_type := b_factory ; 16 :
27475: LD_ADDR_OWVAR 42
27479: PUSH
27480: LD_INT 3
27482: ST_TO_ADDR
27483: GO 27864
27485: LD_INT 16
27487: DOUBLE
27488: EQUAL
27489: IFTRUE 27493
27491: GO 27504
27493: POP
// bc_type := b_ext_gun ; 17 :
27494: LD_ADDR_OWVAR 42
27498: PUSH
27499: LD_INT 17
27501: ST_TO_ADDR
27502: GO 27864
27504: LD_INT 17
27506: DOUBLE
27507: EQUAL
27508: IFTRUE 27512
27510: GO 27540
27512: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
27513: LD_ADDR_OWVAR 42
27517: PUSH
27518: LD_INT 19
27520: PUSH
27521: LD_INT 23
27523: PUSH
27524: LD_INT 19
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: LIST
27531: PUSH
27532: LD_VAR 0 1
27536: ARRAY
27537: ST_TO_ADDR
27538: GO 27864
27540: LD_INT 18
27542: DOUBLE
27543: EQUAL
27544: IFTRUE 27548
27546: GO 27559
27548: POP
// bc_type := b_ext_radar ; 19 :
27549: LD_ADDR_OWVAR 42
27553: PUSH
27554: LD_INT 20
27556: ST_TO_ADDR
27557: GO 27864
27559: LD_INT 19
27561: DOUBLE
27562: EQUAL
27563: IFTRUE 27567
27565: GO 27578
27567: POP
// bc_type := b_ext_radio ; 20 :
27568: LD_ADDR_OWVAR 42
27572: PUSH
27573: LD_INT 22
27575: ST_TO_ADDR
27576: GO 27864
27578: LD_INT 20
27580: DOUBLE
27581: EQUAL
27582: IFTRUE 27586
27584: GO 27597
27586: POP
// bc_type := b_ext_siberium ; 21 :
27587: LD_ADDR_OWVAR 42
27591: PUSH
27592: LD_INT 21
27594: ST_TO_ADDR
27595: GO 27864
27597: LD_INT 21
27599: DOUBLE
27600: EQUAL
27601: IFTRUE 27605
27603: GO 27616
27605: POP
// bc_type := b_ext_computer ; 22 :
27606: LD_ADDR_OWVAR 42
27610: PUSH
27611: LD_INT 24
27613: ST_TO_ADDR
27614: GO 27864
27616: LD_INT 22
27618: DOUBLE
27619: EQUAL
27620: IFTRUE 27624
27622: GO 27635
27624: POP
// bc_type := b_ext_track ; 23 :
27625: LD_ADDR_OWVAR 42
27629: PUSH
27630: LD_INT 16
27632: ST_TO_ADDR
27633: GO 27864
27635: LD_INT 23
27637: DOUBLE
27638: EQUAL
27639: IFTRUE 27643
27641: GO 27654
27643: POP
// bc_type := b_ext_laser ; 24 :
27644: LD_ADDR_OWVAR 42
27648: PUSH
27649: LD_INT 25
27651: ST_TO_ADDR
27652: GO 27864
27654: LD_INT 24
27656: DOUBLE
27657: EQUAL
27658: IFTRUE 27662
27660: GO 27673
27662: POP
// bc_type := b_control_tower ; 25 :
27663: LD_ADDR_OWVAR 42
27667: PUSH
27668: LD_INT 36
27670: ST_TO_ADDR
27671: GO 27864
27673: LD_INT 25
27675: DOUBLE
27676: EQUAL
27677: IFTRUE 27681
27679: GO 27692
27681: POP
// bc_type := b_breastwork ; 26 :
27682: LD_ADDR_OWVAR 42
27686: PUSH
27687: LD_INT 31
27689: ST_TO_ADDR
27690: GO 27864
27692: LD_INT 26
27694: DOUBLE
27695: EQUAL
27696: IFTRUE 27700
27698: GO 27711
27700: POP
// bc_type := b_bunker ; 27 :
27701: LD_ADDR_OWVAR 42
27705: PUSH
27706: LD_INT 32
27708: ST_TO_ADDR
27709: GO 27864
27711: LD_INT 27
27713: DOUBLE
27714: EQUAL
27715: IFTRUE 27719
27717: GO 27730
27719: POP
// bc_type := b_turret ; 28 :
27720: LD_ADDR_OWVAR 42
27724: PUSH
27725: LD_INT 33
27727: ST_TO_ADDR
27728: GO 27864
27730: LD_INT 28
27732: DOUBLE
27733: EQUAL
27734: IFTRUE 27738
27736: GO 27749
27738: POP
// bc_type := b_armoury ; 29 :
27739: LD_ADDR_OWVAR 42
27743: PUSH
27744: LD_INT 4
27746: ST_TO_ADDR
27747: GO 27864
27749: LD_INT 29
27751: DOUBLE
27752: EQUAL
27753: IFTRUE 27757
27755: GO 27768
27757: POP
// bc_type := b_barracks ; 30 :
27758: LD_ADDR_OWVAR 42
27762: PUSH
27763: LD_INT 5
27765: ST_TO_ADDR
27766: GO 27864
27768: LD_INT 30
27770: DOUBLE
27771: EQUAL
27772: IFTRUE 27776
27774: GO 27787
27776: POP
// bc_type := b_solar_power ; 31 :
27777: LD_ADDR_OWVAR 42
27781: PUSH
27782: LD_INT 27
27784: ST_TO_ADDR
27785: GO 27864
27787: LD_INT 31
27789: DOUBLE
27790: EQUAL
27791: IFTRUE 27795
27793: GO 27806
27795: POP
// bc_type := b_oil_power ; 32 :
27796: LD_ADDR_OWVAR 42
27800: PUSH
27801: LD_INT 26
27803: ST_TO_ADDR
27804: GO 27864
27806: LD_INT 32
27808: DOUBLE
27809: EQUAL
27810: IFTRUE 27814
27812: GO 27825
27814: POP
// bc_type := b_siberite_power ; 33 :
27815: LD_ADDR_OWVAR 42
27819: PUSH
27820: LD_INT 28
27822: ST_TO_ADDR
27823: GO 27864
27825: LD_INT 33
27827: DOUBLE
27828: EQUAL
27829: IFTRUE 27833
27831: GO 27844
27833: POP
// bc_type := b_oil_mine ; 34 :
27834: LD_ADDR_OWVAR 42
27838: PUSH
27839: LD_INT 29
27841: ST_TO_ADDR
27842: GO 27864
27844: LD_INT 34
27846: DOUBLE
27847: EQUAL
27848: IFTRUE 27852
27850: GO 27863
27852: POP
// bc_type := b_siberite_mine ; end ;
27853: LD_ADDR_OWVAR 42
27857: PUSH
27858: LD_INT 30
27860: ST_TO_ADDR
27861: GO 27864
27863: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
27864: LD_ADDR_VAR 0 8
27868: PUSH
27869: LD_VAR 0 5
27873: PPUSH
27874: LD_VAR 0 6
27878: PPUSH
27879: LD_VAR 0 3
27883: PPUSH
27884: CALL_OW 47
27888: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
27889: LD_OWVAR 42
27893: PUSH
27894: LD_INT 32
27896: PUSH
27897: LD_INT 33
27899: PUSH
27900: EMPTY
27901: LIST
27902: LIST
27903: IN
27904: IFFALSE 27920
// PlaceWeaponTurret ( b , weapon ) ;
27906: LD_VAR 0 8
27910: PPUSH
27911: LD_VAR 0 4
27915: PPUSH
27916: CALL_OW 431
// end ;
27920: LD_VAR 0 7
27924: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
27925: LD_INT 0
27927: PPUSH
27928: PPUSH
27929: PPUSH
27930: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27931: LD_ADDR_VAR 0 4
27935: PUSH
27936: LD_INT 22
27938: PUSH
27939: LD_OWVAR 2
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: PUSH
27948: LD_INT 2
27950: PUSH
27951: LD_INT 30
27953: PUSH
27954: LD_INT 0
27956: PUSH
27957: EMPTY
27958: LIST
27959: LIST
27960: PUSH
27961: LD_INT 30
27963: PUSH
27964: LD_INT 1
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: PUSH
27971: EMPTY
27972: LIST
27973: LIST
27974: LIST
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: PPUSH
27980: CALL_OW 69
27984: ST_TO_ADDR
// if not tmp then
27985: LD_VAR 0 4
27989: NOT
27990: IFFALSE 27994
// exit ;
27992: GO 28053
// for i in tmp do
27994: LD_ADDR_VAR 0 2
27998: PUSH
27999: LD_VAR 0 4
28003: PUSH
28004: FOR_IN
28005: IFFALSE 28051
// for j = 1 to 3 do
28007: LD_ADDR_VAR 0 3
28011: PUSH
28012: DOUBLE
28013: LD_INT 1
28015: DEC
28016: ST_TO_ADDR
28017: LD_INT 3
28019: PUSH
28020: FOR_TO
28021: IFFALSE 28047
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
28023: LD_VAR 0 2
28027: PPUSH
28028: CALL_OW 274
28032: PPUSH
28033: LD_VAR 0 3
28037: PPUSH
28038: LD_INT 99999
28040: PPUSH
28041: CALL_OW 277
28045: GO 28020
28047: POP
28048: POP
28049: GO 28004
28051: POP
28052: POP
// end ;
28053: LD_VAR 0 1
28057: RET
// export function hHackSetLevel10 ; var i , j ; begin
28058: LD_INT 0
28060: PPUSH
28061: PPUSH
28062: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28063: LD_ADDR_VAR 0 2
28067: PUSH
28068: LD_INT 21
28070: PUSH
28071: LD_INT 1
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: PPUSH
28078: CALL_OW 69
28082: PUSH
28083: FOR_IN
28084: IFFALSE 28136
// if IsSelected ( i ) then
28086: LD_VAR 0 2
28090: PPUSH
28091: CALL_OW 306
28095: IFFALSE 28134
// begin for j := 1 to 4 do
28097: LD_ADDR_VAR 0 3
28101: PUSH
28102: DOUBLE
28103: LD_INT 1
28105: DEC
28106: ST_TO_ADDR
28107: LD_INT 4
28109: PUSH
28110: FOR_TO
28111: IFFALSE 28132
// SetSkill ( i , j , 10 ) ;
28113: LD_VAR 0 2
28117: PPUSH
28118: LD_VAR 0 3
28122: PPUSH
28123: LD_INT 10
28125: PPUSH
28126: CALL_OW 237
28130: GO 28110
28132: POP
28133: POP
// end ;
28134: GO 28083
28136: POP
28137: POP
// end ;
28138: LD_VAR 0 1
28142: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
28143: LD_INT 0
28145: PPUSH
28146: PPUSH
28147: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
28148: LD_ADDR_VAR 0 2
28152: PUSH
28153: LD_INT 22
28155: PUSH
28156: LD_OWVAR 2
28160: PUSH
28161: EMPTY
28162: LIST
28163: LIST
28164: PUSH
28165: LD_INT 21
28167: PUSH
28168: LD_INT 1
28170: PUSH
28171: EMPTY
28172: LIST
28173: LIST
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: PPUSH
28179: CALL_OW 69
28183: PUSH
28184: FOR_IN
28185: IFFALSE 28226
// begin for j := 1 to 4 do
28187: LD_ADDR_VAR 0 3
28191: PUSH
28192: DOUBLE
28193: LD_INT 1
28195: DEC
28196: ST_TO_ADDR
28197: LD_INT 4
28199: PUSH
28200: FOR_TO
28201: IFFALSE 28222
// SetSkill ( i , j , 10 ) ;
28203: LD_VAR 0 2
28207: PPUSH
28208: LD_VAR 0 3
28212: PPUSH
28213: LD_INT 10
28215: PPUSH
28216: CALL_OW 237
28220: GO 28200
28222: POP
28223: POP
// end ;
28224: GO 28184
28226: POP
28227: POP
// end ;
28228: LD_VAR 0 1
28232: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
28233: LD_INT 0
28235: PPUSH
// uc_side := your_side ;
28236: LD_ADDR_OWVAR 20
28240: PUSH
28241: LD_OWVAR 2
28245: ST_TO_ADDR
// uc_nation := nation ;
28246: LD_ADDR_OWVAR 21
28250: PUSH
28251: LD_VAR 0 1
28255: ST_TO_ADDR
// InitHc ;
28256: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
28260: LD_INT 0
28262: PPUSH
28263: LD_VAR 0 2
28267: PPUSH
28268: LD_VAR 0 3
28272: PPUSH
28273: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
28277: LD_VAR 0 4
28281: PPUSH
28282: LD_VAR 0 5
28286: PPUSH
28287: CALL_OW 428
28291: PUSH
28292: LD_INT 0
28294: EQUAL
28295: IFFALSE 28319
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
28297: CALL_OW 44
28301: PPUSH
28302: LD_VAR 0 4
28306: PPUSH
28307: LD_VAR 0 5
28311: PPUSH
28312: LD_INT 1
28314: PPUSH
28315: CALL_OW 48
// end ;
28319: LD_VAR 0 6
28323: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
28324: LD_INT 0
28326: PPUSH
28327: PPUSH
// uc_side := your_side ;
28328: LD_ADDR_OWVAR 20
28332: PUSH
28333: LD_OWVAR 2
28337: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
28338: LD_VAR 0 1
28342: PUSH
28343: LD_INT 1
28345: PUSH
28346: LD_INT 2
28348: PUSH
28349: LD_INT 3
28351: PUSH
28352: LD_INT 4
28354: PUSH
28355: LD_INT 5
28357: PUSH
28358: EMPTY
28359: LIST
28360: LIST
28361: LIST
28362: LIST
28363: LIST
28364: IN
28365: IFFALSE 28377
// uc_nation := nation_american else
28367: LD_ADDR_OWVAR 21
28371: PUSH
28372: LD_INT 1
28374: ST_TO_ADDR
28375: GO 28420
// if chassis in [ 11 , 12 , 13 , 14 ] then
28377: LD_VAR 0 1
28381: PUSH
28382: LD_INT 11
28384: PUSH
28385: LD_INT 12
28387: PUSH
28388: LD_INT 13
28390: PUSH
28391: LD_INT 14
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: LIST
28398: LIST
28399: IN
28400: IFFALSE 28412
// uc_nation := nation_arabian else
28402: LD_ADDR_OWVAR 21
28406: PUSH
28407: LD_INT 2
28409: ST_TO_ADDR
28410: GO 28420
// uc_nation := nation_russian ;
28412: LD_ADDR_OWVAR 21
28416: PUSH
28417: LD_INT 3
28419: ST_TO_ADDR
// vc_chassis := chassis ;
28420: LD_ADDR_OWVAR 37
28424: PUSH
28425: LD_VAR 0 1
28429: ST_TO_ADDR
// vc_engine := engine ;
28430: LD_ADDR_OWVAR 39
28434: PUSH
28435: LD_VAR 0 2
28439: ST_TO_ADDR
// vc_control := control ;
28440: LD_ADDR_OWVAR 38
28444: PUSH
28445: LD_VAR 0 3
28449: ST_TO_ADDR
// vc_weapon := weapon ;
28450: LD_ADDR_OWVAR 40
28454: PUSH
28455: LD_VAR 0 4
28459: ST_TO_ADDR
// un := CreateVehicle ;
28460: LD_ADDR_VAR 0 8
28464: PUSH
28465: CALL_OW 45
28469: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
28470: LD_VAR 0 8
28474: PPUSH
28475: LD_INT 0
28477: PPUSH
28478: LD_INT 5
28480: PPUSH
28481: CALL_OW 12
28485: PPUSH
28486: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
28490: LD_VAR 0 8
28494: PPUSH
28495: LD_VAR 0 5
28499: PPUSH
28500: LD_VAR 0 6
28504: PPUSH
28505: LD_INT 1
28507: PPUSH
28508: CALL_OW 48
// end ;
28512: LD_VAR 0 7
28516: RET
// export hInvincible ; every 1 do
28517: GO 28519
28519: DISABLE
// hInvincible := [ ] ;
28520: LD_ADDR_EXP 114
28524: PUSH
28525: EMPTY
28526: ST_TO_ADDR
28527: END
// every 10 do var i ;
28528: GO 28530
28530: DISABLE
28531: LD_INT 0
28533: PPUSH
// begin enable ;
28534: ENABLE
// if not hInvincible then
28535: LD_EXP 114
28539: NOT
28540: IFFALSE 28544
// exit ;
28542: GO 28588
// for i in hInvincible do
28544: LD_ADDR_VAR 0 1
28548: PUSH
28549: LD_EXP 114
28553: PUSH
28554: FOR_IN
28555: IFFALSE 28586
// if GetLives ( i ) < 1000 then
28557: LD_VAR 0 1
28561: PPUSH
28562: CALL_OW 256
28566: PUSH
28567: LD_INT 1000
28569: LESS
28570: IFFALSE 28584
// SetLives ( i , 1000 ) ;
28572: LD_VAR 0 1
28576: PPUSH
28577: LD_INT 1000
28579: PPUSH
28580: CALL_OW 234
28584: GO 28554
28586: POP
28587: POP
// end ;
28588: PPOPN 1
28590: END
// export function hHackInvincible ; var i ; begin
28591: LD_INT 0
28593: PPUSH
28594: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
28595: LD_ADDR_VAR 0 2
28599: PUSH
28600: LD_INT 2
28602: PUSH
28603: LD_INT 21
28605: PUSH
28606: LD_INT 1
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: PUSH
28613: LD_INT 21
28615: PUSH
28616: LD_INT 2
28618: PUSH
28619: EMPTY
28620: LIST
28621: LIST
28622: PUSH
28623: EMPTY
28624: LIST
28625: LIST
28626: LIST
28627: PPUSH
28628: CALL_OW 69
28632: PUSH
28633: FOR_IN
28634: IFFALSE 28695
// if IsSelected ( i ) then
28636: LD_VAR 0 2
28640: PPUSH
28641: CALL_OW 306
28645: IFFALSE 28693
// begin if i in hInvincible then
28647: LD_VAR 0 2
28651: PUSH
28652: LD_EXP 114
28656: IN
28657: IFFALSE 28677
// hInvincible := hInvincible diff i else
28659: LD_ADDR_EXP 114
28663: PUSH
28664: LD_EXP 114
28668: PUSH
28669: LD_VAR 0 2
28673: DIFF
28674: ST_TO_ADDR
28675: GO 28693
// hInvincible := hInvincible union i ;
28677: LD_ADDR_EXP 114
28681: PUSH
28682: LD_EXP 114
28686: PUSH
28687: LD_VAR 0 2
28691: UNION
28692: ST_TO_ADDR
// end ;
28693: GO 28633
28695: POP
28696: POP
// end ;
28697: LD_VAR 0 1
28701: RET
// export function hHackInvisible ; var i , j ; begin
28702: LD_INT 0
28704: PPUSH
28705: PPUSH
28706: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28707: LD_ADDR_VAR 0 2
28711: PUSH
28712: LD_INT 21
28714: PUSH
28715: LD_INT 1
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: PPUSH
28722: CALL_OW 69
28726: PUSH
28727: FOR_IN
28728: IFFALSE 28752
// if IsSelected ( i ) then
28730: LD_VAR 0 2
28734: PPUSH
28735: CALL_OW 306
28739: IFFALSE 28750
// ComForceInvisible ( i ) ;
28741: LD_VAR 0 2
28745: PPUSH
28746: CALL_OW 496
28750: GO 28727
28752: POP
28753: POP
// end ;
28754: LD_VAR 0 1
28758: RET
// export function hHackChangeYourSide ; begin
28759: LD_INT 0
28761: PPUSH
// if your_side = 8 then
28762: LD_OWVAR 2
28766: PUSH
28767: LD_INT 8
28769: EQUAL
28770: IFFALSE 28782
// your_side := 0 else
28772: LD_ADDR_OWVAR 2
28776: PUSH
28777: LD_INT 0
28779: ST_TO_ADDR
28780: GO 28796
// your_side := your_side + 1 ;
28782: LD_ADDR_OWVAR 2
28786: PUSH
28787: LD_OWVAR 2
28791: PUSH
28792: LD_INT 1
28794: PLUS
28795: ST_TO_ADDR
// end ;
28796: LD_VAR 0 1
28800: RET
// export function hHackChangeUnitSide ; var i , j ; begin
28801: LD_INT 0
28803: PPUSH
28804: PPUSH
28805: PPUSH
// for i in all_units do
28806: LD_ADDR_VAR 0 2
28810: PUSH
28811: LD_OWVAR 3
28815: PUSH
28816: FOR_IN
28817: IFFALSE 28895
// if IsSelected ( i ) then
28819: LD_VAR 0 2
28823: PPUSH
28824: CALL_OW 306
28828: IFFALSE 28893
// begin j := GetSide ( i ) ;
28830: LD_ADDR_VAR 0 3
28834: PUSH
28835: LD_VAR 0 2
28839: PPUSH
28840: CALL_OW 255
28844: ST_TO_ADDR
// if j = 8 then
28845: LD_VAR 0 3
28849: PUSH
28850: LD_INT 8
28852: EQUAL
28853: IFFALSE 28865
// j := 0 else
28855: LD_ADDR_VAR 0 3
28859: PUSH
28860: LD_INT 0
28862: ST_TO_ADDR
28863: GO 28879
// j := j + 1 ;
28865: LD_ADDR_VAR 0 3
28869: PUSH
28870: LD_VAR 0 3
28874: PUSH
28875: LD_INT 1
28877: PLUS
28878: ST_TO_ADDR
// SetSide ( i , j ) ;
28879: LD_VAR 0 2
28883: PPUSH
28884: LD_VAR 0 3
28888: PPUSH
28889: CALL_OW 235
// end ;
28893: GO 28816
28895: POP
28896: POP
// end ;
28897: LD_VAR 0 1
28901: RET
// export function hHackFog ; begin
28902: LD_INT 0
28904: PPUSH
// FogOff ( true ) ;
28905: LD_INT 1
28907: PPUSH
28908: CALL_OW 344
// end ;
28912: LD_VAR 0 1
28916: RET
// export function hHackTeleport ( unit , x , y ) ; begin
28917: LD_INT 0
28919: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
28920: LD_VAR 0 1
28924: PPUSH
28925: LD_VAR 0 2
28929: PPUSH
28930: LD_VAR 0 3
28934: PPUSH
28935: LD_INT 1
28937: PPUSH
28938: LD_INT 1
28940: PPUSH
28941: CALL_OW 483
// CenterOnXY ( x , y ) ;
28945: LD_VAR 0 2
28949: PPUSH
28950: LD_VAR 0 3
28954: PPUSH
28955: CALL_OW 84
// end ; end_of_file
28959: LD_VAR 0 4
28963: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
28964: LD_INT 0
28966: PPUSH
28967: PPUSH
28968: PPUSH
28969: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
28970: LD_VAR 0 1
28974: PPUSH
28975: CALL_OW 264
28979: PUSH
28980: LD_EXP 42
28984: EQUAL
28985: IFFALSE 29057
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
28987: LD_INT 68
28989: PPUSH
28990: LD_VAR 0 1
28994: PPUSH
28995: CALL_OW 255
28999: PPUSH
29000: CALL_OW 321
29004: PUSH
29005: LD_INT 2
29007: EQUAL
29008: IFFALSE 29020
// eff := 70 else
29010: LD_ADDR_VAR 0 4
29014: PUSH
29015: LD_INT 70
29017: ST_TO_ADDR
29018: GO 29028
// eff := 30 ;
29020: LD_ADDR_VAR 0 4
29024: PUSH
29025: LD_INT 30
29027: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
29028: LD_VAR 0 1
29032: PPUSH
29033: CALL_OW 250
29037: PPUSH
29038: LD_VAR 0 1
29042: PPUSH
29043: CALL_OW 251
29047: PPUSH
29048: LD_VAR 0 4
29052: PPUSH
29053: CALL_OW 495
// end ; end ;
29057: LD_VAR 0 2
29061: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
29062: LD_INT 0
29064: PPUSH
// end ;
29065: LD_VAR 0 4
29069: RET
// export function SOS_Command ( cmd ) ; begin
29070: LD_INT 0
29072: PPUSH
// end ;
29073: LD_VAR 0 2
29077: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
29078: LD_INT 0
29080: PPUSH
// end ;
29081: LD_VAR 0 6
29085: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
29086: LD_INT 0
29088: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
29089: LD_VAR 0 1
29093: PUSH
29094: LD_INT 250
29096: EQUAL
29097: PUSH
29098: LD_VAR 0 2
29102: PPUSH
29103: CALL_OW 264
29107: PUSH
29108: LD_EXP 45
29112: EQUAL
29113: AND
29114: IFFALSE 29135
// MinerPlaceMine ( unit , x , y ) ;
29116: LD_VAR 0 2
29120: PPUSH
29121: LD_VAR 0 4
29125: PPUSH
29126: LD_VAR 0 5
29130: PPUSH
29131: CALL 31484 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
29135: LD_VAR 0 1
29139: PUSH
29140: LD_INT 251
29142: EQUAL
29143: PUSH
29144: LD_VAR 0 2
29148: PPUSH
29149: CALL_OW 264
29153: PUSH
29154: LD_EXP 45
29158: EQUAL
29159: AND
29160: IFFALSE 29181
// MinerDetonateMine ( unit , x , y ) ;
29162: LD_VAR 0 2
29166: PPUSH
29167: LD_VAR 0 4
29171: PPUSH
29172: LD_VAR 0 5
29176: PPUSH
29177: CALL 31761 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
29181: LD_VAR 0 1
29185: PUSH
29186: LD_INT 252
29188: EQUAL
29189: PUSH
29190: LD_VAR 0 2
29194: PPUSH
29195: CALL_OW 264
29199: PUSH
29200: LD_EXP 45
29204: EQUAL
29205: AND
29206: IFFALSE 29227
// MinerCreateMinefield ( unit , x , y ) ;
29208: LD_VAR 0 2
29212: PPUSH
29213: LD_VAR 0 4
29217: PPUSH
29218: LD_VAR 0 5
29222: PPUSH
29223: CALL 32178 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
29227: LD_VAR 0 1
29231: PUSH
29232: LD_INT 253
29234: EQUAL
29235: PUSH
29236: LD_VAR 0 2
29240: PPUSH
29241: CALL_OW 257
29245: PUSH
29246: LD_INT 5
29248: EQUAL
29249: AND
29250: IFFALSE 29271
// ComBinocular ( unit , x , y ) ;
29252: LD_VAR 0 2
29256: PPUSH
29257: LD_VAR 0 4
29261: PPUSH
29262: LD_VAR 0 5
29266: PPUSH
29267: CALL 32549 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
29271: LD_VAR 0 1
29275: PUSH
29276: LD_INT 254
29278: EQUAL
29279: PUSH
29280: LD_VAR 0 2
29284: PPUSH
29285: CALL_OW 264
29289: PUSH
29290: LD_EXP 40
29294: EQUAL
29295: AND
29296: PUSH
29297: LD_VAR 0 3
29301: PPUSH
29302: CALL_OW 263
29306: PUSH
29307: LD_INT 3
29309: EQUAL
29310: AND
29311: IFFALSE 29327
// HackDestroyVehicle ( unit , selectedUnit ) ;
29313: LD_VAR 0 2
29317: PPUSH
29318: LD_VAR 0 3
29322: PPUSH
29323: CALL 30844 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
29327: LD_VAR 0 1
29331: PUSH
29332: LD_INT 255
29334: EQUAL
29335: PUSH
29336: LD_VAR 0 2
29340: PPUSH
29341: CALL_OW 264
29345: PUSH
29346: LD_INT 14
29348: PUSH
29349: LD_INT 53
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: IN
29356: AND
29357: PUSH
29358: LD_VAR 0 4
29362: PPUSH
29363: LD_VAR 0 5
29367: PPUSH
29368: CALL_OW 488
29372: AND
29373: IFFALSE 29397
// CutTreeXYR ( unit , x , y , 12 ) ;
29375: LD_VAR 0 2
29379: PPUSH
29380: LD_VAR 0 4
29384: PPUSH
29385: LD_VAR 0 5
29389: PPUSH
29390: LD_INT 12
29392: PPUSH
29393: CALL 29410 0 4
// end ;
29397: LD_VAR 0 6
29401: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
29402: LD_INT 0
29404: PPUSH
// end ;
29405: LD_VAR 0 4
29409: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
29410: LD_INT 0
29412: PPUSH
29413: PPUSH
29414: PPUSH
29415: PPUSH
29416: PPUSH
29417: PPUSH
29418: PPUSH
29419: PPUSH
29420: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
29421: LD_VAR 0 1
29425: NOT
29426: PUSH
29427: LD_VAR 0 2
29431: PPUSH
29432: LD_VAR 0 3
29436: PPUSH
29437: CALL_OW 488
29441: NOT
29442: OR
29443: PUSH
29444: LD_VAR 0 4
29448: NOT
29449: OR
29450: IFFALSE 29454
// exit ;
29452: GO 29794
// list := [ ] ;
29454: LD_ADDR_VAR 0 13
29458: PUSH
29459: EMPTY
29460: ST_TO_ADDR
// if x - r < 0 then
29461: LD_VAR 0 2
29465: PUSH
29466: LD_VAR 0 4
29470: MINUS
29471: PUSH
29472: LD_INT 0
29474: LESS
29475: IFFALSE 29487
// min_x := 0 else
29477: LD_ADDR_VAR 0 7
29481: PUSH
29482: LD_INT 0
29484: ST_TO_ADDR
29485: GO 29503
// min_x := x - r ;
29487: LD_ADDR_VAR 0 7
29491: PUSH
29492: LD_VAR 0 2
29496: PUSH
29497: LD_VAR 0 4
29501: MINUS
29502: ST_TO_ADDR
// if y - r < 0 then
29503: LD_VAR 0 3
29507: PUSH
29508: LD_VAR 0 4
29512: MINUS
29513: PUSH
29514: LD_INT 0
29516: LESS
29517: IFFALSE 29529
// min_y := 0 else
29519: LD_ADDR_VAR 0 8
29523: PUSH
29524: LD_INT 0
29526: ST_TO_ADDR
29527: GO 29545
// min_y := y - r ;
29529: LD_ADDR_VAR 0 8
29533: PUSH
29534: LD_VAR 0 3
29538: PUSH
29539: LD_VAR 0 4
29543: MINUS
29544: ST_TO_ADDR
// max_x := x + r ;
29545: LD_ADDR_VAR 0 9
29549: PUSH
29550: LD_VAR 0 2
29554: PUSH
29555: LD_VAR 0 4
29559: PLUS
29560: ST_TO_ADDR
// max_y := y + r ;
29561: LD_ADDR_VAR 0 10
29565: PUSH
29566: LD_VAR 0 3
29570: PUSH
29571: LD_VAR 0 4
29575: PLUS
29576: ST_TO_ADDR
// for _x = min_x to max_x do
29577: LD_ADDR_VAR 0 11
29581: PUSH
29582: DOUBLE
29583: LD_VAR 0 7
29587: DEC
29588: ST_TO_ADDR
29589: LD_VAR 0 9
29593: PUSH
29594: FOR_TO
29595: IFFALSE 29712
// for _y = min_y to max_y do
29597: LD_ADDR_VAR 0 12
29601: PUSH
29602: DOUBLE
29603: LD_VAR 0 8
29607: DEC
29608: ST_TO_ADDR
29609: LD_VAR 0 10
29613: PUSH
29614: FOR_TO
29615: IFFALSE 29708
// begin if not ValidHex ( _x , _y ) then
29617: LD_VAR 0 11
29621: PPUSH
29622: LD_VAR 0 12
29626: PPUSH
29627: CALL_OW 488
29631: NOT
29632: IFFALSE 29636
// continue ;
29634: GO 29614
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29636: LD_VAR 0 11
29640: PPUSH
29641: LD_VAR 0 12
29645: PPUSH
29646: CALL_OW 351
29650: PUSH
29651: LD_VAR 0 11
29655: PPUSH
29656: LD_VAR 0 12
29660: PPUSH
29661: CALL_OW 554
29665: AND
29666: IFFALSE 29706
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29668: LD_ADDR_VAR 0 13
29672: PUSH
29673: LD_VAR 0 13
29677: PPUSH
29678: LD_VAR 0 13
29682: PUSH
29683: LD_INT 1
29685: PLUS
29686: PPUSH
29687: LD_VAR 0 11
29691: PUSH
29692: LD_VAR 0 12
29696: PUSH
29697: EMPTY
29698: LIST
29699: LIST
29700: PPUSH
29701: CALL_OW 2
29705: ST_TO_ADDR
// end ;
29706: GO 29614
29708: POP
29709: POP
29710: GO 29594
29712: POP
29713: POP
// if not list then
29714: LD_VAR 0 13
29718: NOT
29719: IFFALSE 29723
// exit ;
29721: GO 29794
// for i in list do
29723: LD_ADDR_VAR 0 6
29727: PUSH
29728: LD_VAR 0 13
29732: PUSH
29733: FOR_IN
29734: IFFALSE 29792
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
29736: LD_VAR 0 1
29740: PPUSH
29741: LD_STRING M
29743: PUSH
29744: LD_VAR 0 6
29748: PUSH
29749: LD_INT 1
29751: ARRAY
29752: PUSH
29753: LD_VAR 0 6
29757: PUSH
29758: LD_INT 2
29760: ARRAY
29761: PUSH
29762: LD_INT 0
29764: PUSH
29765: LD_INT 0
29767: PUSH
29768: LD_INT 0
29770: PUSH
29771: LD_INT 0
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: LIST
29778: LIST
29779: LIST
29780: LIST
29781: LIST
29782: PUSH
29783: EMPTY
29784: LIST
29785: PPUSH
29786: CALL_OW 447
29790: GO 29733
29792: POP
29793: POP
// end ;
29794: LD_VAR 0 5
29798: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
29799: LD_EXP 117
29803: NOT
29804: IFFALSE 29854
29806: GO 29808
29808: DISABLE
// begin initHack := true ;
29809: LD_ADDR_EXP 117
29813: PUSH
29814: LD_INT 1
29816: ST_TO_ADDR
// hackTanks := [ ] ;
29817: LD_ADDR_EXP 118
29821: PUSH
29822: EMPTY
29823: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
29824: LD_ADDR_EXP 119
29828: PUSH
29829: EMPTY
29830: ST_TO_ADDR
// hackLimit := 3 ;
29831: LD_ADDR_EXP 120
29835: PUSH
29836: LD_INT 3
29838: ST_TO_ADDR
// hackDist := 12 ;
29839: LD_ADDR_EXP 121
29843: PUSH
29844: LD_INT 12
29846: ST_TO_ADDR
// hackCounter := [ ] ;
29847: LD_ADDR_EXP 122
29851: PUSH
29852: EMPTY
29853: ST_TO_ADDR
// end ;
29854: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29855: LD_EXP 117
29859: PUSH
29860: LD_INT 34
29862: PUSH
29863: LD_EXP 40
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: PPUSH
29872: CALL_OW 69
29876: AND
29877: IFFALSE 30132
29879: GO 29881
29881: DISABLE
29882: LD_INT 0
29884: PPUSH
29885: PPUSH
// begin enable ;
29886: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29887: LD_ADDR_VAR 0 1
29891: PUSH
29892: LD_INT 34
29894: PUSH
29895: LD_EXP 40
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: PPUSH
29904: CALL_OW 69
29908: PUSH
29909: FOR_IN
29910: IFFALSE 30130
// begin if not i in hackTanks then
29912: LD_VAR 0 1
29916: PUSH
29917: LD_EXP 118
29921: IN
29922: NOT
29923: IFFALSE 30006
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29925: LD_ADDR_EXP 118
29929: PUSH
29930: LD_EXP 118
29934: PPUSH
29935: LD_EXP 118
29939: PUSH
29940: LD_INT 1
29942: PLUS
29943: PPUSH
29944: LD_VAR 0 1
29948: PPUSH
29949: CALL_OW 1
29953: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
29954: LD_ADDR_EXP 119
29958: PUSH
29959: LD_EXP 119
29963: PPUSH
29964: LD_EXP 119
29968: PUSH
29969: LD_INT 1
29971: PLUS
29972: PPUSH
29973: EMPTY
29974: PPUSH
29975: CALL_OW 1
29979: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
29980: LD_ADDR_EXP 122
29984: PUSH
29985: LD_EXP 122
29989: PPUSH
29990: LD_EXP 122
29994: PUSH
29995: LD_INT 1
29997: PLUS
29998: PPUSH
29999: EMPTY
30000: PPUSH
30001: CALL_OW 1
30005: ST_TO_ADDR
// end ; if not IsOk ( i ) then
30006: LD_VAR 0 1
30010: PPUSH
30011: CALL_OW 302
30015: NOT
30016: IFFALSE 30029
// begin HackUnlinkAll ( i ) ;
30018: LD_VAR 0 1
30022: PPUSH
30023: CALL 30135 0 1
// continue ;
30027: GO 29909
// end ; HackCheckCapturedStatus ( i ) ;
30029: LD_VAR 0 1
30033: PPUSH
30034: CALL 30578 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
30038: LD_ADDR_VAR 0 2
30042: PUSH
30043: LD_INT 81
30045: PUSH
30046: LD_VAR 0 1
30050: PPUSH
30051: CALL_OW 255
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: PUSH
30060: LD_INT 33
30062: PUSH
30063: LD_INT 3
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: LD_INT 91
30072: PUSH
30073: LD_VAR 0 1
30077: PUSH
30078: LD_EXP 121
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: LIST
30087: PUSH
30088: LD_INT 50
30090: PUSH
30091: EMPTY
30092: LIST
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: LIST
30098: LIST
30099: PPUSH
30100: CALL_OW 69
30104: ST_TO_ADDR
// if not tmp then
30105: LD_VAR 0 2
30109: NOT
30110: IFFALSE 30114
// continue ;
30112: GO 29909
// HackLink ( i , tmp ) ;
30114: LD_VAR 0 1
30118: PPUSH
30119: LD_VAR 0 2
30123: PPUSH
30124: CALL 30271 0 2
// end ;
30128: GO 29909
30130: POP
30131: POP
// end ;
30132: PPOPN 2
30134: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
30135: LD_INT 0
30137: PPUSH
30138: PPUSH
30139: PPUSH
// if not hack in hackTanks then
30140: LD_VAR 0 1
30144: PUSH
30145: LD_EXP 118
30149: IN
30150: NOT
30151: IFFALSE 30155
// exit ;
30153: GO 30266
// index := GetElementIndex ( hackTanks , hack ) ;
30155: LD_ADDR_VAR 0 4
30159: PUSH
30160: LD_EXP 118
30164: PPUSH
30165: LD_VAR 0 1
30169: PPUSH
30170: CALL 37740 0 2
30174: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
30175: LD_EXP 119
30179: PUSH
30180: LD_VAR 0 4
30184: ARRAY
30185: IFFALSE 30266
// begin for i in hackTanksCaptured [ index ] do
30187: LD_ADDR_VAR 0 3
30191: PUSH
30192: LD_EXP 119
30196: PUSH
30197: LD_VAR 0 4
30201: ARRAY
30202: PUSH
30203: FOR_IN
30204: IFFALSE 30230
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
30206: LD_VAR 0 3
30210: PUSH
30211: LD_INT 1
30213: ARRAY
30214: PPUSH
30215: LD_VAR 0 3
30219: PUSH
30220: LD_INT 2
30222: ARRAY
30223: PPUSH
30224: CALL_OW 235
30228: GO 30203
30230: POP
30231: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
30232: LD_ADDR_EXP 119
30236: PUSH
30237: LD_EXP 119
30241: PPUSH
30242: LD_VAR 0 4
30246: PPUSH
30247: EMPTY
30248: PPUSH
30249: CALL_OW 1
30253: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
30254: LD_VAR 0 1
30258: PPUSH
30259: LD_INT 0
30261: PPUSH
30262: CALL_OW 505
// end ; end ;
30266: LD_VAR 0 2
30270: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
30271: LD_INT 0
30273: PPUSH
30274: PPUSH
30275: PPUSH
// if not hack in hackTanks or not vehicles then
30276: LD_VAR 0 1
30280: PUSH
30281: LD_EXP 118
30285: IN
30286: NOT
30287: PUSH
30288: LD_VAR 0 2
30292: NOT
30293: OR
30294: IFFALSE 30298
// exit ;
30296: GO 30573
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
30298: LD_ADDR_VAR 0 2
30302: PUSH
30303: LD_VAR 0 1
30307: PPUSH
30308: LD_VAR 0 2
30312: PPUSH
30313: LD_INT 1
30315: PPUSH
30316: LD_INT 1
30318: PPUSH
30319: CALL 38390 0 4
30323: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
30324: LD_ADDR_VAR 0 5
30328: PUSH
30329: LD_EXP 118
30333: PPUSH
30334: LD_VAR 0 1
30338: PPUSH
30339: CALL 37740 0 2
30343: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
30344: LD_EXP 119
30348: PUSH
30349: LD_VAR 0 5
30353: ARRAY
30354: PUSH
30355: LD_EXP 120
30359: LESS
30360: IFFALSE 30549
// begin for i := 1 to vehicles do
30362: LD_ADDR_VAR 0 4
30366: PUSH
30367: DOUBLE
30368: LD_INT 1
30370: DEC
30371: ST_TO_ADDR
30372: LD_VAR 0 2
30376: PUSH
30377: FOR_TO
30378: IFFALSE 30547
// begin if hackTanksCaptured [ index ] = hackLimit then
30380: LD_EXP 119
30384: PUSH
30385: LD_VAR 0 5
30389: ARRAY
30390: PUSH
30391: LD_EXP 120
30395: EQUAL
30396: IFFALSE 30400
// break ;
30398: GO 30547
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
30400: LD_ADDR_EXP 122
30404: PUSH
30405: LD_EXP 122
30409: PPUSH
30410: LD_VAR 0 5
30414: PPUSH
30415: LD_EXP 122
30419: PUSH
30420: LD_VAR 0 5
30424: ARRAY
30425: PUSH
30426: LD_INT 1
30428: PLUS
30429: PPUSH
30430: CALL_OW 1
30434: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
30435: LD_ADDR_EXP 119
30439: PUSH
30440: LD_EXP 119
30444: PPUSH
30445: LD_VAR 0 5
30449: PUSH
30450: LD_EXP 119
30454: PUSH
30455: LD_VAR 0 5
30459: ARRAY
30460: PUSH
30461: LD_INT 1
30463: PLUS
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PPUSH
30469: LD_VAR 0 2
30473: PUSH
30474: LD_VAR 0 4
30478: ARRAY
30479: PUSH
30480: LD_VAR 0 2
30484: PUSH
30485: LD_VAR 0 4
30489: ARRAY
30490: PPUSH
30491: CALL_OW 255
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PPUSH
30500: CALL 37955 0 3
30504: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
30505: LD_VAR 0 2
30509: PUSH
30510: LD_VAR 0 4
30514: ARRAY
30515: PPUSH
30516: LD_VAR 0 1
30520: PPUSH
30521: CALL_OW 255
30525: PPUSH
30526: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
30530: LD_VAR 0 2
30534: PUSH
30535: LD_VAR 0 4
30539: ARRAY
30540: PPUSH
30541: CALL_OW 141
// end ;
30545: GO 30377
30547: POP
30548: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30549: LD_VAR 0 1
30553: PPUSH
30554: LD_EXP 119
30558: PUSH
30559: LD_VAR 0 5
30563: ARRAY
30564: PUSH
30565: LD_INT 0
30567: PLUS
30568: PPUSH
30569: CALL_OW 505
// end ;
30573: LD_VAR 0 3
30577: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
30578: LD_INT 0
30580: PPUSH
30581: PPUSH
30582: PPUSH
30583: PPUSH
// if not hack in hackTanks then
30584: LD_VAR 0 1
30588: PUSH
30589: LD_EXP 118
30593: IN
30594: NOT
30595: IFFALSE 30599
// exit ;
30597: GO 30839
// index := GetElementIndex ( hackTanks , hack ) ;
30599: LD_ADDR_VAR 0 4
30603: PUSH
30604: LD_EXP 118
30608: PPUSH
30609: LD_VAR 0 1
30613: PPUSH
30614: CALL 37740 0 2
30618: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
30619: LD_ADDR_VAR 0 3
30623: PUSH
30624: DOUBLE
30625: LD_EXP 119
30629: PUSH
30630: LD_VAR 0 4
30634: ARRAY
30635: INC
30636: ST_TO_ADDR
30637: LD_INT 1
30639: PUSH
30640: FOR_DOWNTO
30641: IFFALSE 30813
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
30643: LD_ADDR_VAR 0 5
30647: PUSH
30648: LD_EXP 119
30652: PUSH
30653: LD_VAR 0 4
30657: ARRAY
30658: PUSH
30659: LD_VAR 0 3
30663: ARRAY
30664: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
30665: LD_VAR 0 5
30669: PUSH
30670: LD_INT 1
30672: ARRAY
30673: PPUSH
30674: CALL_OW 302
30678: NOT
30679: PUSH
30680: LD_VAR 0 5
30684: PUSH
30685: LD_INT 1
30687: ARRAY
30688: PPUSH
30689: CALL_OW 255
30693: PUSH
30694: LD_VAR 0 1
30698: PPUSH
30699: CALL_OW 255
30703: NONEQUAL
30704: OR
30705: IFFALSE 30811
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
30707: LD_VAR 0 5
30711: PUSH
30712: LD_INT 1
30714: ARRAY
30715: PPUSH
30716: CALL_OW 305
30720: PUSH
30721: LD_VAR 0 5
30725: PUSH
30726: LD_INT 1
30728: ARRAY
30729: PPUSH
30730: CALL_OW 255
30734: PUSH
30735: LD_VAR 0 1
30739: PPUSH
30740: CALL_OW 255
30744: EQUAL
30745: AND
30746: IFFALSE 30770
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
30748: LD_VAR 0 5
30752: PUSH
30753: LD_INT 1
30755: ARRAY
30756: PPUSH
30757: LD_VAR 0 5
30761: PUSH
30762: LD_INT 2
30764: ARRAY
30765: PPUSH
30766: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
30770: LD_ADDR_EXP 119
30774: PUSH
30775: LD_EXP 119
30779: PPUSH
30780: LD_VAR 0 4
30784: PPUSH
30785: LD_EXP 119
30789: PUSH
30790: LD_VAR 0 4
30794: ARRAY
30795: PPUSH
30796: LD_VAR 0 3
30800: PPUSH
30801: CALL_OW 3
30805: PPUSH
30806: CALL_OW 1
30810: ST_TO_ADDR
// end ; end ;
30811: GO 30640
30813: POP
30814: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30815: LD_VAR 0 1
30819: PPUSH
30820: LD_EXP 119
30824: PUSH
30825: LD_VAR 0 4
30829: ARRAY
30830: PUSH
30831: LD_INT 0
30833: PLUS
30834: PPUSH
30835: CALL_OW 505
// end ;
30839: LD_VAR 0 2
30843: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
30844: LD_INT 0
30846: PPUSH
30847: PPUSH
30848: PPUSH
30849: PPUSH
// if not hack in hackTanks then
30850: LD_VAR 0 1
30854: PUSH
30855: LD_EXP 118
30859: IN
30860: NOT
30861: IFFALSE 30865
// exit ;
30863: GO 30950
// index := GetElementIndex ( hackTanks , hack ) ;
30865: LD_ADDR_VAR 0 5
30869: PUSH
30870: LD_EXP 118
30874: PPUSH
30875: LD_VAR 0 1
30879: PPUSH
30880: CALL 37740 0 2
30884: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30885: LD_ADDR_VAR 0 4
30889: PUSH
30890: DOUBLE
30891: LD_INT 1
30893: DEC
30894: ST_TO_ADDR
30895: LD_EXP 119
30899: PUSH
30900: LD_VAR 0 5
30904: ARRAY
30905: PUSH
30906: FOR_TO
30907: IFFALSE 30948
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30909: LD_EXP 119
30913: PUSH
30914: LD_VAR 0 5
30918: ARRAY
30919: PUSH
30920: LD_VAR 0 4
30924: ARRAY
30925: PUSH
30926: LD_INT 1
30928: ARRAY
30929: PUSH
30930: LD_VAR 0 2
30934: EQUAL
30935: IFFALSE 30946
// KillUnit ( vehicle ) ;
30937: LD_VAR 0 2
30941: PPUSH
30942: CALL_OW 66
30946: GO 30906
30948: POP
30949: POP
// end ;
30950: LD_VAR 0 3
30954: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
30955: LD_EXP 123
30959: NOT
30960: IFFALSE 30995
30962: GO 30964
30964: DISABLE
// begin initMiner := true ;
30965: LD_ADDR_EXP 123
30969: PUSH
30970: LD_INT 1
30972: ST_TO_ADDR
// minersList := [ ] ;
30973: LD_ADDR_EXP 124
30977: PUSH
30978: EMPTY
30979: ST_TO_ADDR
// minerMinesList := [ ] ;
30980: LD_ADDR_EXP 125
30984: PUSH
30985: EMPTY
30986: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
30987: LD_ADDR_EXP 126
30991: PUSH
30992: LD_INT 5
30994: ST_TO_ADDR
// end ;
30995: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
30996: LD_EXP 123
31000: PUSH
31001: LD_INT 34
31003: PUSH
31004: LD_EXP 45
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: PPUSH
31013: CALL_OW 69
31017: AND
31018: IFFALSE 31481
31020: GO 31022
31022: DISABLE
31023: LD_INT 0
31025: PPUSH
31026: PPUSH
31027: PPUSH
31028: PPUSH
// begin enable ;
31029: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
31030: LD_ADDR_VAR 0 1
31034: PUSH
31035: LD_INT 34
31037: PUSH
31038: LD_EXP 45
31042: PUSH
31043: EMPTY
31044: LIST
31045: LIST
31046: PPUSH
31047: CALL_OW 69
31051: PUSH
31052: FOR_IN
31053: IFFALSE 31125
// begin if not i in minersList then
31055: LD_VAR 0 1
31059: PUSH
31060: LD_EXP 124
31064: IN
31065: NOT
31066: IFFALSE 31123
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
31068: LD_ADDR_EXP 124
31072: PUSH
31073: LD_EXP 124
31077: PPUSH
31078: LD_EXP 124
31082: PUSH
31083: LD_INT 1
31085: PLUS
31086: PPUSH
31087: LD_VAR 0 1
31091: PPUSH
31092: CALL_OW 1
31096: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
31097: LD_ADDR_EXP 125
31101: PUSH
31102: LD_EXP 125
31106: PPUSH
31107: LD_EXP 125
31111: PUSH
31112: LD_INT 1
31114: PLUS
31115: PPUSH
31116: EMPTY
31117: PPUSH
31118: CALL_OW 1
31122: ST_TO_ADDR
// end end ;
31123: GO 31052
31125: POP
31126: POP
// for i := minerMinesList downto 1 do
31127: LD_ADDR_VAR 0 1
31131: PUSH
31132: DOUBLE
31133: LD_EXP 125
31137: INC
31138: ST_TO_ADDR
31139: LD_INT 1
31141: PUSH
31142: FOR_DOWNTO
31143: IFFALSE 31479
// begin if IsLive ( minersList [ i ] ) then
31145: LD_EXP 124
31149: PUSH
31150: LD_VAR 0 1
31154: ARRAY
31155: PPUSH
31156: CALL_OW 300
31160: IFFALSE 31188
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
31162: LD_EXP 124
31166: PUSH
31167: LD_VAR 0 1
31171: ARRAY
31172: PPUSH
31173: LD_EXP 125
31177: PUSH
31178: LD_VAR 0 1
31182: ARRAY
31183: PPUSH
31184: CALL_OW 505
// if not minerMinesList [ i ] then
31188: LD_EXP 125
31192: PUSH
31193: LD_VAR 0 1
31197: ARRAY
31198: NOT
31199: IFFALSE 31203
// continue ;
31201: GO 31142
// for j := minerMinesList [ i ] downto 1 do
31203: LD_ADDR_VAR 0 2
31207: PUSH
31208: DOUBLE
31209: LD_EXP 125
31213: PUSH
31214: LD_VAR 0 1
31218: ARRAY
31219: INC
31220: ST_TO_ADDR
31221: LD_INT 1
31223: PUSH
31224: FOR_DOWNTO
31225: IFFALSE 31475
// begin side := GetSide ( minersList [ i ] ) ;
31227: LD_ADDR_VAR 0 3
31231: PUSH
31232: LD_EXP 124
31236: PUSH
31237: LD_VAR 0 1
31241: ARRAY
31242: PPUSH
31243: CALL_OW 255
31247: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
31248: LD_ADDR_VAR 0 4
31252: PUSH
31253: LD_EXP 125
31257: PUSH
31258: LD_VAR 0 1
31262: ARRAY
31263: PUSH
31264: LD_VAR 0 2
31268: ARRAY
31269: PUSH
31270: LD_INT 1
31272: ARRAY
31273: PPUSH
31274: LD_EXP 125
31278: PUSH
31279: LD_VAR 0 1
31283: ARRAY
31284: PUSH
31285: LD_VAR 0 2
31289: ARRAY
31290: PUSH
31291: LD_INT 2
31293: ARRAY
31294: PPUSH
31295: CALL_OW 428
31299: ST_TO_ADDR
// if not tmp then
31300: LD_VAR 0 4
31304: NOT
31305: IFFALSE 31309
// continue ;
31307: GO 31224
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
31309: LD_VAR 0 4
31313: PUSH
31314: LD_INT 81
31316: PUSH
31317: LD_VAR 0 3
31321: PUSH
31322: EMPTY
31323: LIST
31324: LIST
31325: PPUSH
31326: CALL_OW 69
31330: IN
31331: PUSH
31332: LD_EXP 125
31336: PUSH
31337: LD_VAR 0 1
31341: ARRAY
31342: PUSH
31343: LD_VAR 0 2
31347: ARRAY
31348: PUSH
31349: LD_INT 1
31351: ARRAY
31352: PPUSH
31353: LD_EXP 125
31357: PUSH
31358: LD_VAR 0 1
31362: ARRAY
31363: PUSH
31364: LD_VAR 0 2
31368: ARRAY
31369: PUSH
31370: LD_INT 2
31372: ARRAY
31373: PPUSH
31374: CALL_OW 458
31378: AND
31379: IFFALSE 31473
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
31381: LD_EXP 125
31385: PUSH
31386: LD_VAR 0 1
31390: ARRAY
31391: PUSH
31392: LD_VAR 0 2
31396: ARRAY
31397: PUSH
31398: LD_INT 1
31400: ARRAY
31401: PPUSH
31402: LD_EXP 125
31406: PUSH
31407: LD_VAR 0 1
31411: ARRAY
31412: PUSH
31413: LD_VAR 0 2
31417: ARRAY
31418: PUSH
31419: LD_INT 2
31421: ARRAY
31422: PPUSH
31423: LD_VAR 0 3
31427: PPUSH
31428: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
31432: LD_ADDR_EXP 125
31436: PUSH
31437: LD_EXP 125
31441: PPUSH
31442: LD_VAR 0 1
31446: PPUSH
31447: LD_EXP 125
31451: PUSH
31452: LD_VAR 0 1
31456: ARRAY
31457: PPUSH
31458: LD_VAR 0 2
31462: PPUSH
31463: CALL_OW 3
31467: PPUSH
31468: CALL_OW 1
31472: ST_TO_ADDR
// end ; end ;
31473: GO 31224
31475: POP
31476: POP
// end ;
31477: GO 31142
31479: POP
31480: POP
// end ;
31481: PPOPN 4
31483: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
31484: LD_INT 0
31486: PPUSH
31487: PPUSH
// result := false ;
31488: LD_ADDR_VAR 0 4
31492: PUSH
31493: LD_INT 0
31495: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
31496: LD_VAR 0 1
31500: PPUSH
31501: CALL_OW 264
31505: PUSH
31506: LD_EXP 45
31510: EQUAL
31511: NOT
31512: IFFALSE 31516
// exit ;
31514: GO 31756
// index := GetElementIndex ( minersList , unit ) ;
31516: LD_ADDR_VAR 0 5
31520: PUSH
31521: LD_EXP 124
31525: PPUSH
31526: LD_VAR 0 1
31530: PPUSH
31531: CALL 37740 0 2
31535: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
31536: LD_EXP 125
31540: PUSH
31541: LD_VAR 0 5
31545: ARRAY
31546: PUSH
31547: LD_EXP 126
31551: GREATEREQUAL
31552: IFFALSE 31556
// exit ;
31554: GO 31756
// ComMoveXY ( unit , x , y ) ;
31556: LD_VAR 0 1
31560: PPUSH
31561: LD_VAR 0 2
31565: PPUSH
31566: LD_VAR 0 3
31570: PPUSH
31571: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31575: LD_INT 35
31577: PPUSH
31578: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
31582: LD_VAR 0 1
31586: PPUSH
31587: LD_VAR 0 2
31591: PPUSH
31592: LD_VAR 0 3
31596: PPUSH
31597: CALL 68512 0 3
31601: NOT
31602: PUSH
31603: LD_VAR 0 1
31607: PPUSH
31608: CALL_OW 314
31612: AND
31613: IFFALSE 31617
// exit ;
31615: GO 31756
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
31617: LD_VAR 0 2
31621: PPUSH
31622: LD_VAR 0 3
31626: PPUSH
31627: CALL_OW 428
31631: PUSH
31632: LD_VAR 0 1
31636: EQUAL
31637: PUSH
31638: LD_VAR 0 1
31642: PPUSH
31643: CALL_OW 314
31647: NOT
31648: AND
31649: IFFALSE 31575
// PlaySoundXY ( x , y , PlantMine ) ;
31651: LD_VAR 0 2
31655: PPUSH
31656: LD_VAR 0 3
31660: PPUSH
31661: LD_STRING PlantMine
31663: PPUSH
31664: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
31668: LD_VAR 0 2
31672: PPUSH
31673: LD_VAR 0 3
31677: PPUSH
31678: LD_VAR 0 1
31682: PPUSH
31683: CALL_OW 255
31687: PPUSH
31688: LD_INT 0
31690: PPUSH
31691: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
31695: LD_ADDR_EXP 125
31699: PUSH
31700: LD_EXP 125
31704: PPUSH
31705: LD_VAR 0 5
31709: PUSH
31710: LD_EXP 125
31714: PUSH
31715: LD_VAR 0 5
31719: ARRAY
31720: PUSH
31721: LD_INT 1
31723: PLUS
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: PPUSH
31729: LD_VAR 0 2
31733: PUSH
31734: LD_VAR 0 3
31738: PUSH
31739: EMPTY
31740: LIST
31741: LIST
31742: PPUSH
31743: CALL 37955 0 3
31747: ST_TO_ADDR
// result := true ;
31748: LD_ADDR_VAR 0 4
31752: PUSH
31753: LD_INT 1
31755: ST_TO_ADDR
// end ;
31756: LD_VAR 0 4
31760: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
31761: LD_INT 0
31763: PPUSH
31764: PPUSH
31765: PPUSH
// if not unit in minersList then
31766: LD_VAR 0 1
31770: PUSH
31771: LD_EXP 124
31775: IN
31776: NOT
31777: IFFALSE 31781
// exit ;
31779: GO 32173
// index := GetElementIndex ( minersList , unit ) ;
31781: LD_ADDR_VAR 0 6
31785: PUSH
31786: LD_EXP 124
31790: PPUSH
31791: LD_VAR 0 1
31795: PPUSH
31796: CALL 37740 0 2
31800: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
31801: LD_ADDR_VAR 0 5
31805: PUSH
31806: DOUBLE
31807: LD_EXP 125
31811: PUSH
31812: LD_VAR 0 6
31816: ARRAY
31817: INC
31818: ST_TO_ADDR
31819: LD_INT 1
31821: PUSH
31822: FOR_DOWNTO
31823: IFFALSE 31984
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
31825: LD_EXP 125
31829: PUSH
31830: LD_VAR 0 6
31834: ARRAY
31835: PUSH
31836: LD_VAR 0 5
31840: ARRAY
31841: PUSH
31842: LD_INT 1
31844: ARRAY
31845: PUSH
31846: LD_VAR 0 2
31850: EQUAL
31851: PUSH
31852: LD_EXP 125
31856: PUSH
31857: LD_VAR 0 6
31861: ARRAY
31862: PUSH
31863: LD_VAR 0 5
31867: ARRAY
31868: PUSH
31869: LD_INT 2
31871: ARRAY
31872: PUSH
31873: LD_VAR 0 3
31877: EQUAL
31878: AND
31879: IFFALSE 31982
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31881: LD_EXP 125
31885: PUSH
31886: LD_VAR 0 6
31890: ARRAY
31891: PUSH
31892: LD_VAR 0 5
31896: ARRAY
31897: PUSH
31898: LD_INT 1
31900: ARRAY
31901: PPUSH
31902: LD_EXP 125
31906: PUSH
31907: LD_VAR 0 6
31911: ARRAY
31912: PUSH
31913: LD_VAR 0 5
31917: ARRAY
31918: PUSH
31919: LD_INT 2
31921: ARRAY
31922: PPUSH
31923: LD_VAR 0 1
31927: PPUSH
31928: CALL_OW 255
31932: PPUSH
31933: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31937: LD_ADDR_EXP 125
31941: PUSH
31942: LD_EXP 125
31946: PPUSH
31947: LD_VAR 0 6
31951: PPUSH
31952: LD_EXP 125
31956: PUSH
31957: LD_VAR 0 6
31961: ARRAY
31962: PPUSH
31963: LD_VAR 0 5
31967: PPUSH
31968: CALL_OW 3
31972: PPUSH
31973: CALL_OW 1
31977: ST_TO_ADDR
// exit ;
31978: POP
31979: POP
31980: GO 32173
// end ; end ;
31982: GO 31822
31984: POP
31985: POP
// for i := minerMinesList [ index ] downto 1 do
31986: LD_ADDR_VAR 0 5
31990: PUSH
31991: DOUBLE
31992: LD_EXP 125
31996: PUSH
31997: LD_VAR 0 6
32001: ARRAY
32002: INC
32003: ST_TO_ADDR
32004: LD_INT 1
32006: PUSH
32007: FOR_DOWNTO
32008: IFFALSE 32171
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
32010: LD_EXP 125
32014: PUSH
32015: LD_VAR 0 6
32019: ARRAY
32020: PUSH
32021: LD_VAR 0 5
32025: ARRAY
32026: PUSH
32027: LD_INT 1
32029: ARRAY
32030: PPUSH
32031: LD_EXP 125
32035: PUSH
32036: LD_VAR 0 6
32040: ARRAY
32041: PUSH
32042: LD_VAR 0 5
32046: ARRAY
32047: PUSH
32048: LD_INT 2
32050: ARRAY
32051: PPUSH
32052: LD_VAR 0 2
32056: PPUSH
32057: LD_VAR 0 3
32061: PPUSH
32062: CALL_OW 298
32066: PUSH
32067: LD_INT 6
32069: LESS
32070: IFFALSE 32169
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
32072: LD_EXP 125
32076: PUSH
32077: LD_VAR 0 6
32081: ARRAY
32082: PUSH
32083: LD_VAR 0 5
32087: ARRAY
32088: PUSH
32089: LD_INT 1
32091: ARRAY
32092: PPUSH
32093: LD_EXP 125
32097: PUSH
32098: LD_VAR 0 6
32102: ARRAY
32103: PUSH
32104: LD_VAR 0 5
32108: ARRAY
32109: PUSH
32110: LD_INT 2
32112: ARRAY
32113: PPUSH
32114: LD_VAR 0 1
32118: PPUSH
32119: CALL_OW 255
32123: PPUSH
32124: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
32128: LD_ADDR_EXP 125
32132: PUSH
32133: LD_EXP 125
32137: PPUSH
32138: LD_VAR 0 6
32142: PPUSH
32143: LD_EXP 125
32147: PUSH
32148: LD_VAR 0 6
32152: ARRAY
32153: PPUSH
32154: LD_VAR 0 5
32158: PPUSH
32159: CALL_OW 3
32163: PPUSH
32164: CALL_OW 1
32168: ST_TO_ADDR
// end ; end ;
32169: GO 32007
32171: POP
32172: POP
// end ;
32173: LD_VAR 0 4
32177: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
32178: LD_INT 0
32180: PPUSH
32181: PPUSH
32182: PPUSH
32183: PPUSH
32184: PPUSH
32185: PPUSH
32186: PPUSH
32187: PPUSH
32188: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
32189: LD_VAR 0 1
32193: PPUSH
32194: CALL_OW 264
32198: PUSH
32199: LD_EXP 45
32203: EQUAL
32204: NOT
32205: PUSH
32206: LD_VAR 0 1
32210: PUSH
32211: LD_EXP 124
32215: IN
32216: NOT
32217: OR
32218: IFFALSE 32222
// exit ;
32220: GO 32544
// index := GetElementIndex ( minersList , unit ) ;
32222: LD_ADDR_VAR 0 6
32226: PUSH
32227: LD_EXP 124
32231: PPUSH
32232: LD_VAR 0 1
32236: PPUSH
32237: CALL 37740 0 2
32241: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
32242: LD_ADDR_VAR 0 8
32246: PUSH
32247: LD_EXP 126
32251: PUSH
32252: LD_EXP 125
32256: PUSH
32257: LD_VAR 0 6
32261: ARRAY
32262: MINUS
32263: ST_TO_ADDR
// if not minesFreeAmount then
32264: LD_VAR 0 8
32268: NOT
32269: IFFALSE 32273
// exit ;
32271: GO 32544
// tmp := [ ] ;
32273: LD_ADDR_VAR 0 7
32277: PUSH
32278: EMPTY
32279: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
32280: LD_ADDR_VAR 0 5
32284: PUSH
32285: DOUBLE
32286: LD_INT 1
32288: DEC
32289: ST_TO_ADDR
32290: LD_VAR 0 8
32294: PUSH
32295: FOR_TO
32296: IFFALSE 32491
// begin _d := rand ( 0 , 5 ) ;
32298: LD_ADDR_VAR 0 11
32302: PUSH
32303: LD_INT 0
32305: PPUSH
32306: LD_INT 5
32308: PPUSH
32309: CALL_OW 12
32313: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
32314: LD_ADDR_VAR 0 12
32318: PUSH
32319: LD_INT 2
32321: PPUSH
32322: LD_INT 6
32324: PPUSH
32325: CALL_OW 12
32329: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
32330: LD_ADDR_VAR 0 9
32334: PUSH
32335: LD_VAR 0 2
32339: PPUSH
32340: LD_VAR 0 11
32344: PPUSH
32345: LD_VAR 0 12
32349: PPUSH
32350: CALL_OW 272
32354: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
32355: LD_ADDR_VAR 0 10
32359: PUSH
32360: LD_VAR 0 3
32364: PPUSH
32365: LD_VAR 0 11
32369: PPUSH
32370: LD_VAR 0 12
32374: PPUSH
32375: CALL_OW 273
32379: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
32380: LD_VAR 0 9
32384: PPUSH
32385: LD_VAR 0 10
32389: PPUSH
32390: CALL_OW 488
32394: PUSH
32395: LD_VAR 0 9
32399: PUSH
32400: LD_VAR 0 10
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: PUSH
32409: LD_VAR 0 7
32413: IN
32414: NOT
32415: AND
32416: PUSH
32417: LD_VAR 0 9
32421: PPUSH
32422: LD_VAR 0 10
32426: PPUSH
32427: CALL_OW 458
32431: NOT
32432: AND
32433: IFFALSE 32475
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
32435: LD_ADDR_VAR 0 7
32439: PUSH
32440: LD_VAR 0 7
32444: PPUSH
32445: LD_VAR 0 7
32449: PUSH
32450: LD_INT 1
32452: PLUS
32453: PPUSH
32454: LD_VAR 0 9
32458: PUSH
32459: LD_VAR 0 10
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: PPUSH
32468: CALL_OW 1
32472: ST_TO_ADDR
32473: GO 32489
// i := i - 1 ;
32475: LD_ADDR_VAR 0 5
32479: PUSH
32480: LD_VAR 0 5
32484: PUSH
32485: LD_INT 1
32487: MINUS
32488: ST_TO_ADDR
// end ;
32489: GO 32295
32491: POP
32492: POP
// for i in tmp do
32493: LD_ADDR_VAR 0 5
32497: PUSH
32498: LD_VAR 0 7
32502: PUSH
32503: FOR_IN
32504: IFFALSE 32542
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
32506: LD_VAR 0 1
32510: PPUSH
32511: LD_VAR 0 5
32515: PUSH
32516: LD_INT 1
32518: ARRAY
32519: PPUSH
32520: LD_VAR 0 5
32524: PUSH
32525: LD_INT 2
32527: ARRAY
32528: PPUSH
32529: CALL 31484 0 3
32533: NOT
32534: IFFALSE 32540
// exit ;
32536: POP
32537: POP
32538: GO 32544
32540: GO 32503
32542: POP
32543: POP
// end ;
32544: LD_VAR 0 4
32548: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
32549: LD_INT 0
32551: PPUSH
32552: PPUSH
32553: PPUSH
32554: PPUSH
32555: PPUSH
32556: PPUSH
32557: PPUSH
// if not GetClass ( unit ) = class_sniper then
32558: LD_VAR 0 1
32562: PPUSH
32563: CALL_OW 257
32567: PUSH
32568: LD_INT 5
32570: EQUAL
32571: NOT
32572: IFFALSE 32576
// exit ;
32574: GO 32964
// dist := 8 ;
32576: LD_ADDR_VAR 0 5
32580: PUSH
32581: LD_INT 8
32583: ST_TO_ADDR
// viewRange := 12 ;
32584: LD_ADDR_VAR 0 7
32588: PUSH
32589: LD_INT 12
32591: ST_TO_ADDR
// side := GetSide ( unit ) ;
32592: LD_ADDR_VAR 0 6
32596: PUSH
32597: LD_VAR 0 1
32601: PPUSH
32602: CALL_OW 255
32606: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
32607: LD_INT 61
32609: PPUSH
32610: LD_VAR 0 6
32614: PPUSH
32615: CALL_OW 321
32619: PUSH
32620: LD_INT 2
32622: EQUAL
32623: IFFALSE 32633
// viewRange := 16 ;
32625: LD_ADDR_VAR 0 7
32629: PUSH
32630: LD_INT 16
32632: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
32633: LD_VAR 0 1
32637: PPUSH
32638: LD_VAR 0 2
32642: PPUSH
32643: LD_VAR 0 3
32647: PPUSH
32648: CALL_OW 297
32652: PUSH
32653: LD_VAR 0 5
32657: GREATER
32658: IFFALSE 32737
// begin ComMoveXY ( unit , x , y ) ;
32660: LD_VAR 0 1
32664: PPUSH
32665: LD_VAR 0 2
32669: PPUSH
32670: LD_VAR 0 3
32674: PPUSH
32675: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32679: LD_INT 35
32681: PPUSH
32682: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
32686: LD_VAR 0 1
32690: PPUSH
32691: LD_VAR 0 2
32695: PPUSH
32696: LD_VAR 0 3
32700: PPUSH
32701: CALL 68512 0 3
32705: NOT
32706: IFFALSE 32710
// exit ;
32708: GO 32964
// until GetDistUnitXY ( unit , x , y ) < dist ;
32710: LD_VAR 0 1
32714: PPUSH
32715: LD_VAR 0 2
32719: PPUSH
32720: LD_VAR 0 3
32724: PPUSH
32725: CALL_OW 297
32729: PUSH
32730: LD_VAR 0 5
32734: LESS
32735: IFFALSE 32679
// end ; ComTurnXY ( unit , x , y ) ;
32737: LD_VAR 0 1
32741: PPUSH
32742: LD_VAR 0 2
32746: PPUSH
32747: LD_VAR 0 3
32751: PPUSH
32752: CALL_OW 118
// wait ( 5 ) ;
32756: LD_INT 5
32758: PPUSH
32759: CALL_OW 67
// _d := GetDir ( unit ) ;
32763: LD_ADDR_VAR 0 10
32767: PUSH
32768: LD_VAR 0 1
32772: PPUSH
32773: CALL_OW 254
32777: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
32778: LD_ADDR_VAR 0 8
32782: PUSH
32783: LD_VAR 0 1
32787: PPUSH
32788: CALL_OW 250
32792: PPUSH
32793: LD_VAR 0 10
32797: PPUSH
32798: LD_VAR 0 5
32802: PPUSH
32803: CALL_OW 272
32807: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
32808: LD_ADDR_VAR 0 9
32812: PUSH
32813: LD_VAR 0 1
32817: PPUSH
32818: CALL_OW 251
32822: PPUSH
32823: LD_VAR 0 10
32827: PPUSH
32828: LD_VAR 0 5
32832: PPUSH
32833: CALL_OW 273
32837: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32838: LD_VAR 0 8
32842: PPUSH
32843: LD_VAR 0 9
32847: PPUSH
32848: CALL_OW 488
32852: NOT
32853: IFFALSE 32857
// exit ;
32855: GO 32964
// ComAnimCustom ( unit , 1 ) ;
32857: LD_VAR 0 1
32861: PPUSH
32862: LD_INT 1
32864: PPUSH
32865: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
32869: LD_VAR 0 8
32873: PPUSH
32874: LD_VAR 0 9
32878: PPUSH
32879: LD_VAR 0 6
32883: PPUSH
32884: LD_VAR 0 7
32888: PPUSH
32889: CALL_OW 330
// repeat wait ( 1 ) ;
32893: LD_INT 1
32895: PPUSH
32896: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
32900: LD_VAR 0 1
32904: PPUSH
32905: CALL_OW 316
32909: PUSH
32910: LD_VAR 0 1
32914: PPUSH
32915: CALL_OW 314
32919: OR
32920: PUSH
32921: LD_VAR 0 1
32925: PPUSH
32926: CALL_OW 302
32930: NOT
32931: OR
32932: PUSH
32933: LD_VAR 0 1
32937: PPUSH
32938: CALL_OW 301
32942: OR
32943: IFFALSE 32893
// RemoveSeeing ( _x , _y , side ) ;
32945: LD_VAR 0 8
32949: PPUSH
32950: LD_VAR 0 9
32954: PPUSH
32955: LD_VAR 0 6
32959: PPUSH
32960: CALL_OW 331
// end ; end_of_file
32964: LD_VAR 0 4
32968: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
32969: LD_INT 0
32971: PPUSH
32972: PPUSH
// if exist_mode then
32973: LD_VAR 0 2
32977: IFFALSE 33002
// unit := CreateCharacter ( prefix & ident ) else
32979: LD_ADDR_VAR 0 5
32983: PUSH
32984: LD_VAR 0 3
32988: PUSH
32989: LD_VAR 0 1
32993: STR
32994: PPUSH
32995: CALL_OW 34
32999: ST_TO_ADDR
33000: GO 33017
// unit := NewCharacter ( ident ) ;
33002: LD_ADDR_VAR 0 5
33006: PUSH
33007: LD_VAR 0 1
33011: PPUSH
33012: CALL_OW 25
33016: ST_TO_ADDR
// result := unit ;
33017: LD_ADDR_VAR 0 4
33021: PUSH
33022: LD_VAR 0 5
33026: ST_TO_ADDR
// end ;
33027: LD_VAR 0 4
33031: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
33032: LD_INT 0
33034: PPUSH
33035: PPUSH
// if not side or not nation then
33036: LD_VAR 0 1
33040: NOT
33041: PUSH
33042: LD_VAR 0 2
33046: NOT
33047: OR
33048: IFFALSE 33052
// exit ;
33050: GO 33820
// case nation of nation_american :
33052: LD_VAR 0 2
33056: PUSH
33057: LD_INT 1
33059: DOUBLE
33060: EQUAL
33061: IFTRUE 33065
33063: GO 33279
33065: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
33066: LD_ADDR_VAR 0 4
33070: PUSH
33071: LD_INT 35
33073: PUSH
33074: LD_INT 45
33076: PUSH
33077: LD_INT 46
33079: PUSH
33080: LD_INT 47
33082: PUSH
33083: LD_INT 82
33085: PUSH
33086: LD_INT 83
33088: PUSH
33089: LD_INT 84
33091: PUSH
33092: LD_INT 85
33094: PUSH
33095: LD_INT 86
33097: PUSH
33098: LD_INT 1
33100: PUSH
33101: LD_INT 2
33103: PUSH
33104: LD_INT 6
33106: PUSH
33107: LD_INT 15
33109: PUSH
33110: LD_INT 16
33112: PUSH
33113: LD_INT 7
33115: PUSH
33116: LD_INT 12
33118: PUSH
33119: LD_INT 13
33121: PUSH
33122: LD_INT 10
33124: PUSH
33125: LD_INT 14
33127: PUSH
33128: LD_INT 20
33130: PUSH
33131: LD_INT 21
33133: PUSH
33134: LD_INT 22
33136: PUSH
33137: LD_INT 25
33139: PUSH
33140: LD_INT 32
33142: PUSH
33143: LD_INT 27
33145: PUSH
33146: LD_INT 36
33148: PUSH
33149: LD_INT 69
33151: PUSH
33152: LD_INT 39
33154: PUSH
33155: LD_INT 34
33157: PUSH
33158: LD_INT 40
33160: PUSH
33161: LD_INT 48
33163: PUSH
33164: LD_INT 49
33166: PUSH
33167: LD_INT 50
33169: PUSH
33170: LD_INT 51
33172: PUSH
33173: LD_INT 52
33175: PUSH
33176: LD_INT 53
33178: PUSH
33179: LD_INT 54
33181: PUSH
33182: LD_INT 55
33184: PUSH
33185: LD_INT 56
33187: PUSH
33188: LD_INT 57
33190: PUSH
33191: LD_INT 58
33193: PUSH
33194: LD_INT 59
33196: PUSH
33197: LD_INT 60
33199: PUSH
33200: LD_INT 61
33202: PUSH
33203: LD_INT 62
33205: PUSH
33206: LD_INT 80
33208: PUSH
33209: LD_INT 82
33211: PUSH
33212: LD_INT 83
33214: PUSH
33215: LD_INT 84
33217: PUSH
33218: LD_INT 85
33220: PUSH
33221: LD_INT 86
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: LIST
33232: LIST
33233: LIST
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: LIST
33239: LIST
33240: LIST
33241: LIST
33242: LIST
33243: LIST
33244: LIST
33245: LIST
33246: LIST
33247: LIST
33248: LIST
33249: LIST
33250: LIST
33251: LIST
33252: LIST
33253: LIST
33254: LIST
33255: LIST
33256: LIST
33257: LIST
33258: LIST
33259: LIST
33260: LIST
33261: LIST
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: ST_TO_ADDR
33277: GO 33744
33279: LD_INT 2
33281: DOUBLE
33282: EQUAL
33283: IFTRUE 33287
33285: GO 33513
33287: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
33288: LD_ADDR_VAR 0 4
33292: PUSH
33293: LD_INT 35
33295: PUSH
33296: LD_INT 45
33298: PUSH
33299: LD_INT 46
33301: PUSH
33302: LD_INT 47
33304: PUSH
33305: LD_INT 82
33307: PUSH
33308: LD_INT 83
33310: PUSH
33311: LD_INT 84
33313: PUSH
33314: LD_INT 85
33316: PUSH
33317: LD_INT 87
33319: PUSH
33320: LD_INT 70
33322: PUSH
33323: LD_INT 1
33325: PUSH
33326: LD_INT 11
33328: PUSH
33329: LD_INT 3
33331: PUSH
33332: LD_INT 4
33334: PUSH
33335: LD_INT 5
33337: PUSH
33338: LD_INT 6
33340: PUSH
33341: LD_INT 15
33343: PUSH
33344: LD_INT 18
33346: PUSH
33347: LD_INT 7
33349: PUSH
33350: LD_INT 17
33352: PUSH
33353: LD_INT 8
33355: PUSH
33356: LD_INT 20
33358: PUSH
33359: LD_INT 21
33361: PUSH
33362: LD_INT 22
33364: PUSH
33365: LD_INT 72
33367: PUSH
33368: LD_INT 26
33370: PUSH
33371: LD_INT 69
33373: PUSH
33374: LD_INT 39
33376: PUSH
33377: LD_INT 40
33379: PUSH
33380: LD_INT 41
33382: PUSH
33383: LD_INT 42
33385: PUSH
33386: LD_INT 43
33388: PUSH
33389: LD_INT 48
33391: PUSH
33392: LD_INT 49
33394: PUSH
33395: LD_INT 50
33397: PUSH
33398: LD_INT 51
33400: PUSH
33401: LD_INT 52
33403: PUSH
33404: LD_INT 53
33406: PUSH
33407: LD_INT 54
33409: PUSH
33410: LD_INT 55
33412: PUSH
33413: LD_INT 56
33415: PUSH
33416: LD_INT 60
33418: PUSH
33419: LD_INT 61
33421: PUSH
33422: LD_INT 62
33424: PUSH
33425: LD_INT 66
33427: PUSH
33428: LD_INT 67
33430: PUSH
33431: LD_INT 68
33433: PUSH
33434: LD_INT 81
33436: PUSH
33437: LD_INT 82
33439: PUSH
33440: LD_INT 83
33442: PUSH
33443: LD_INT 84
33445: PUSH
33446: LD_INT 85
33448: PUSH
33449: LD_INT 87
33451: PUSH
33452: LD_INT 88
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: LIST
33459: LIST
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: LIST
33484: LIST
33485: LIST
33486: LIST
33487: LIST
33488: LIST
33489: LIST
33490: LIST
33491: LIST
33492: LIST
33493: LIST
33494: LIST
33495: LIST
33496: LIST
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: ST_TO_ADDR
33511: GO 33744
33513: LD_INT 3
33515: DOUBLE
33516: EQUAL
33517: IFTRUE 33521
33519: GO 33743
33521: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
33522: LD_ADDR_VAR 0 4
33526: PUSH
33527: LD_INT 46
33529: PUSH
33530: LD_INT 47
33532: PUSH
33533: LD_INT 1
33535: PUSH
33536: LD_INT 2
33538: PUSH
33539: LD_INT 82
33541: PUSH
33542: LD_INT 83
33544: PUSH
33545: LD_INT 84
33547: PUSH
33548: LD_INT 85
33550: PUSH
33551: LD_INT 86
33553: PUSH
33554: LD_INT 11
33556: PUSH
33557: LD_INT 9
33559: PUSH
33560: LD_INT 20
33562: PUSH
33563: LD_INT 19
33565: PUSH
33566: LD_INT 21
33568: PUSH
33569: LD_INT 24
33571: PUSH
33572: LD_INT 22
33574: PUSH
33575: LD_INT 25
33577: PUSH
33578: LD_INT 28
33580: PUSH
33581: LD_INT 29
33583: PUSH
33584: LD_INT 30
33586: PUSH
33587: LD_INT 31
33589: PUSH
33590: LD_INT 37
33592: PUSH
33593: LD_INT 38
33595: PUSH
33596: LD_INT 32
33598: PUSH
33599: LD_INT 27
33601: PUSH
33602: LD_INT 33
33604: PUSH
33605: LD_INT 69
33607: PUSH
33608: LD_INT 39
33610: PUSH
33611: LD_INT 34
33613: PUSH
33614: LD_INT 40
33616: PUSH
33617: LD_INT 71
33619: PUSH
33620: LD_INT 23
33622: PUSH
33623: LD_INT 44
33625: PUSH
33626: LD_INT 48
33628: PUSH
33629: LD_INT 49
33631: PUSH
33632: LD_INT 50
33634: PUSH
33635: LD_INT 51
33637: PUSH
33638: LD_INT 52
33640: PUSH
33641: LD_INT 53
33643: PUSH
33644: LD_INT 54
33646: PUSH
33647: LD_INT 55
33649: PUSH
33650: LD_INT 56
33652: PUSH
33653: LD_INT 57
33655: PUSH
33656: LD_INT 58
33658: PUSH
33659: LD_INT 59
33661: PUSH
33662: LD_INT 63
33664: PUSH
33665: LD_INT 64
33667: PUSH
33668: LD_INT 65
33670: PUSH
33671: LD_INT 82
33673: PUSH
33674: LD_INT 83
33676: PUSH
33677: LD_INT 84
33679: PUSH
33680: LD_INT 85
33682: PUSH
33683: LD_INT 86
33685: PUSH
33686: EMPTY
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: LIST
33711: LIST
33712: LIST
33713: LIST
33714: LIST
33715: LIST
33716: LIST
33717: LIST
33718: LIST
33719: LIST
33720: LIST
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: ST_TO_ADDR
33741: GO 33744
33743: POP
// if state > - 1 and state < 3 then
33744: LD_VAR 0 3
33748: PUSH
33749: LD_INT 1
33751: NEG
33752: GREATER
33753: PUSH
33754: LD_VAR 0 3
33758: PUSH
33759: LD_INT 3
33761: LESS
33762: AND
33763: IFFALSE 33820
// for i in result do
33765: LD_ADDR_VAR 0 5
33769: PUSH
33770: LD_VAR 0 4
33774: PUSH
33775: FOR_IN
33776: IFFALSE 33818
// if GetTech ( i , side ) <> state then
33778: LD_VAR 0 5
33782: PPUSH
33783: LD_VAR 0 1
33787: PPUSH
33788: CALL_OW 321
33792: PUSH
33793: LD_VAR 0 3
33797: NONEQUAL
33798: IFFALSE 33816
// result := result diff i ;
33800: LD_ADDR_VAR 0 4
33804: PUSH
33805: LD_VAR 0 4
33809: PUSH
33810: LD_VAR 0 5
33814: DIFF
33815: ST_TO_ADDR
33816: GO 33775
33818: POP
33819: POP
// end ;
33820: LD_VAR 0 4
33824: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
33825: LD_INT 0
33827: PPUSH
33828: PPUSH
33829: PPUSH
// result := true ;
33830: LD_ADDR_VAR 0 3
33834: PUSH
33835: LD_INT 1
33837: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
33838: LD_ADDR_VAR 0 5
33842: PUSH
33843: LD_VAR 0 2
33847: PPUSH
33848: CALL_OW 480
33852: ST_TO_ADDR
// if not tmp then
33853: LD_VAR 0 5
33857: NOT
33858: IFFALSE 33862
// exit ;
33860: GO 33911
// for i in tmp do
33862: LD_ADDR_VAR 0 4
33866: PUSH
33867: LD_VAR 0 5
33871: PUSH
33872: FOR_IN
33873: IFFALSE 33909
// if GetTech ( i , side ) <> state_researched then
33875: LD_VAR 0 4
33879: PPUSH
33880: LD_VAR 0 1
33884: PPUSH
33885: CALL_OW 321
33889: PUSH
33890: LD_INT 2
33892: NONEQUAL
33893: IFFALSE 33907
// begin result := false ;
33895: LD_ADDR_VAR 0 3
33899: PUSH
33900: LD_INT 0
33902: ST_TO_ADDR
// exit ;
33903: POP
33904: POP
33905: GO 33911
// end ;
33907: GO 33872
33909: POP
33910: POP
// end ;
33911: LD_VAR 0 3
33915: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
33916: LD_INT 0
33918: PPUSH
33919: PPUSH
33920: PPUSH
33921: PPUSH
33922: PPUSH
33923: PPUSH
33924: PPUSH
33925: PPUSH
33926: PPUSH
33927: PPUSH
33928: PPUSH
33929: PPUSH
33930: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
33931: LD_VAR 0 1
33935: NOT
33936: PUSH
33937: LD_VAR 0 1
33941: PPUSH
33942: CALL_OW 257
33946: PUSH
33947: LD_INT 9
33949: NONEQUAL
33950: OR
33951: IFFALSE 33955
// exit ;
33953: GO 34528
// side := GetSide ( unit ) ;
33955: LD_ADDR_VAR 0 9
33959: PUSH
33960: LD_VAR 0 1
33964: PPUSH
33965: CALL_OW 255
33969: ST_TO_ADDR
// tech_space := tech_spacanom ;
33970: LD_ADDR_VAR 0 12
33974: PUSH
33975: LD_INT 29
33977: ST_TO_ADDR
// tech_time := tech_taurad ;
33978: LD_ADDR_VAR 0 13
33982: PUSH
33983: LD_INT 28
33985: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
33986: LD_ADDR_VAR 0 11
33990: PUSH
33991: LD_VAR 0 1
33995: PPUSH
33996: CALL_OW 310
34000: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
34001: LD_VAR 0 11
34005: PPUSH
34006: CALL_OW 247
34010: PUSH
34011: LD_INT 2
34013: EQUAL
34014: IFFALSE 34018
// exit ;
34016: GO 34528
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34018: LD_ADDR_VAR 0 8
34022: PUSH
34023: LD_INT 81
34025: PUSH
34026: LD_VAR 0 9
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: PUSH
34035: LD_INT 3
34037: PUSH
34038: LD_INT 21
34040: PUSH
34041: LD_INT 3
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: PPUSH
34056: CALL_OW 69
34060: ST_TO_ADDR
// if not tmp then
34061: LD_VAR 0 8
34065: NOT
34066: IFFALSE 34070
// exit ;
34068: GO 34528
// if in_unit then
34070: LD_VAR 0 11
34074: IFFALSE 34098
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
34076: LD_ADDR_VAR 0 10
34080: PUSH
34081: LD_VAR 0 8
34085: PPUSH
34086: LD_VAR 0 11
34090: PPUSH
34091: CALL_OW 74
34095: ST_TO_ADDR
34096: GO 34118
// enemy := NearestUnitToUnit ( tmp , unit ) ;
34098: LD_ADDR_VAR 0 10
34102: PUSH
34103: LD_VAR 0 8
34107: PPUSH
34108: LD_VAR 0 1
34112: PPUSH
34113: CALL_OW 74
34117: ST_TO_ADDR
// if not enemy then
34118: LD_VAR 0 10
34122: NOT
34123: IFFALSE 34127
// exit ;
34125: GO 34528
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
34127: LD_VAR 0 11
34131: PUSH
34132: LD_VAR 0 11
34136: PPUSH
34137: LD_VAR 0 10
34141: PPUSH
34142: CALL_OW 296
34146: PUSH
34147: LD_INT 13
34149: GREATER
34150: AND
34151: PUSH
34152: LD_VAR 0 1
34156: PPUSH
34157: LD_VAR 0 10
34161: PPUSH
34162: CALL_OW 296
34166: PUSH
34167: LD_INT 12
34169: GREATER
34170: OR
34171: IFFALSE 34175
// exit ;
34173: GO 34528
// missile := [ 1 ] ;
34175: LD_ADDR_VAR 0 14
34179: PUSH
34180: LD_INT 1
34182: PUSH
34183: EMPTY
34184: LIST
34185: ST_TO_ADDR
// if Researched ( side , tech_space ) then
34186: LD_VAR 0 9
34190: PPUSH
34191: LD_VAR 0 12
34195: PPUSH
34196: CALL_OW 325
34200: IFFALSE 34229
// missile := Insert ( missile , missile + 1 , 2 ) ;
34202: LD_ADDR_VAR 0 14
34206: PUSH
34207: LD_VAR 0 14
34211: PPUSH
34212: LD_VAR 0 14
34216: PUSH
34217: LD_INT 1
34219: PLUS
34220: PPUSH
34221: LD_INT 2
34223: PPUSH
34224: CALL_OW 2
34228: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
34229: LD_VAR 0 9
34233: PPUSH
34234: LD_VAR 0 13
34238: PPUSH
34239: CALL_OW 325
34243: PUSH
34244: LD_VAR 0 10
34248: PPUSH
34249: CALL_OW 255
34253: PPUSH
34254: LD_VAR 0 13
34258: PPUSH
34259: CALL_OW 325
34263: NOT
34264: AND
34265: IFFALSE 34294
// missile := Insert ( missile , missile + 1 , 3 ) ;
34267: LD_ADDR_VAR 0 14
34271: PUSH
34272: LD_VAR 0 14
34276: PPUSH
34277: LD_VAR 0 14
34281: PUSH
34282: LD_INT 1
34284: PLUS
34285: PPUSH
34286: LD_INT 3
34288: PPUSH
34289: CALL_OW 2
34293: ST_TO_ADDR
// if missile < 2 then
34294: LD_VAR 0 14
34298: PUSH
34299: LD_INT 2
34301: LESS
34302: IFFALSE 34306
// exit ;
34304: GO 34528
// x := GetX ( enemy ) ;
34306: LD_ADDR_VAR 0 4
34310: PUSH
34311: LD_VAR 0 10
34315: PPUSH
34316: CALL_OW 250
34320: ST_TO_ADDR
// y := GetY ( enemy ) ;
34321: LD_ADDR_VAR 0 5
34325: PUSH
34326: LD_VAR 0 10
34330: PPUSH
34331: CALL_OW 251
34335: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
34336: LD_ADDR_VAR 0 6
34340: PUSH
34341: LD_VAR 0 4
34345: PUSH
34346: LD_INT 1
34348: NEG
34349: PPUSH
34350: LD_INT 1
34352: PPUSH
34353: CALL_OW 12
34357: PLUS
34358: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
34359: LD_ADDR_VAR 0 7
34363: PUSH
34364: LD_VAR 0 5
34368: PUSH
34369: LD_INT 1
34371: NEG
34372: PPUSH
34373: LD_INT 1
34375: PPUSH
34376: CALL_OW 12
34380: PLUS
34381: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34382: LD_VAR 0 6
34386: PPUSH
34387: LD_VAR 0 7
34391: PPUSH
34392: CALL_OW 488
34396: NOT
34397: IFFALSE 34419
// begin _x := x ;
34399: LD_ADDR_VAR 0 6
34403: PUSH
34404: LD_VAR 0 4
34408: ST_TO_ADDR
// _y := y ;
34409: LD_ADDR_VAR 0 7
34413: PUSH
34414: LD_VAR 0 5
34418: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
34419: LD_ADDR_VAR 0 3
34423: PUSH
34424: LD_INT 1
34426: PPUSH
34427: LD_VAR 0 14
34431: PPUSH
34432: CALL_OW 12
34436: ST_TO_ADDR
// case i of 1 :
34437: LD_VAR 0 3
34441: PUSH
34442: LD_INT 1
34444: DOUBLE
34445: EQUAL
34446: IFTRUE 34450
34448: GO 34467
34450: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
34451: LD_VAR 0 1
34455: PPUSH
34456: LD_VAR 0 10
34460: PPUSH
34461: CALL_OW 115
34465: GO 34528
34467: LD_INT 2
34469: DOUBLE
34470: EQUAL
34471: IFTRUE 34475
34473: GO 34497
34475: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
34476: LD_VAR 0 1
34480: PPUSH
34481: LD_VAR 0 6
34485: PPUSH
34486: LD_VAR 0 7
34490: PPUSH
34491: CALL_OW 153
34495: GO 34528
34497: LD_INT 3
34499: DOUBLE
34500: EQUAL
34501: IFTRUE 34505
34503: GO 34527
34505: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
34506: LD_VAR 0 1
34510: PPUSH
34511: LD_VAR 0 6
34515: PPUSH
34516: LD_VAR 0 7
34520: PPUSH
34521: CALL_OW 154
34525: GO 34528
34527: POP
// end ;
34528: LD_VAR 0 2
34532: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
34533: LD_INT 0
34535: PPUSH
34536: PPUSH
34537: PPUSH
34538: PPUSH
34539: PPUSH
34540: PPUSH
// if not unit or not building then
34541: LD_VAR 0 1
34545: NOT
34546: PUSH
34547: LD_VAR 0 2
34551: NOT
34552: OR
34553: IFFALSE 34557
// exit ;
34555: GO 34715
// x := GetX ( building ) ;
34557: LD_ADDR_VAR 0 5
34561: PUSH
34562: LD_VAR 0 2
34566: PPUSH
34567: CALL_OW 250
34571: ST_TO_ADDR
// y := GetY ( building ) ;
34572: LD_ADDR_VAR 0 6
34576: PUSH
34577: LD_VAR 0 2
34581: PPUSH
34582: CALL_OW 251
34586: ST_TO_ADDR
// for i = 0 to 5 do
34587: LD_ADDR_VAR 0 4
34591: PUSH
34592: DOUBLE
34593: LD_INT 0
34595: DEC
34596: ST_TO_ADDR
34597: LD_INT 5
34599: PUSH
34600: FOR_TO
34601: IFFALSE 34713
// begin _x := ShiftX ( x , i , 3 ) ;
34603: LD_ADDR_VAR 0 7
34607: PUSH
34608: LD_VAR 0 5
34612: PPUSH
34613: LD_VAR 0 4
34617: PPUSH
34618: LD_INT 3
34620: PPUSH
34621: CALL_OW 272
34625: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
34626: LD_ADDR_VAR 0 8
34630: PUSH
34631: LD_VAR 0 6
34635: PPUSH
34636: LD_VAR 0 4
34640: PPUSH
34641: LD_INT 3
34643: PPUSH
34644: CALL_OW 273
34648: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34649: LD_VAR 0 7
34653: PPUSH
34654: LD_VAR 0 8
34658: PPUSH
34659: CALL_OW 488
34663: NOT
34664: IFFALSE 34668
// continue ;
34666: GO 34600
// if HexInfo ( _x , _y ) = 0 then
34668: LD_VAR 0 7
34672: PPUSH
34673: LD_VAR 0 8
34677: PPUSH
34678: CALL_OW 428
34682: PUSH
34683: LD_INT 0
34685: EQUAL
34686: IFFALSE 34711
// begin ComMoveXY ( unit , _x , _y ) ;
34688: LD_VAR 0 1
34692: PPUSH
34693: LD_VAR 0 7
34697: PPUSH
34698: LD_VAR 0 8
34702: PPUSH
34703: CALL_OW 111
// exit ;
34707: POP
34708: POP
34709: GO 34715
// end ; end ;
34711: GO 34600
34713: POP
34714: POP
// end ;
34715: LD_VAR 0 3
34719: RET
// export function ScanBase ( side , base_area ) ; begin
34720: LD_INT 0
34722: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
34723: LD_ADDR_VAR 0 3
34727: PUSH
34728: LD_VAR 0 2
34732: PPUSH
34733: LD_INT 81
34735: PUSH
34736: LD_VAR 0 1
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: PPUSH
34745: CALL_OW 70
34749: ST_TO_ADDR
// end ;
34750: LD_VAR 0 3
34754: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
34755: LD_INT 0
34757: PPUSH
34758: PPUSH
34759: PPUSH
34760: PPUSH
// result := false ;
34761: LD_ADDR_VAR 0 2
34765: PUSH
34766: LD_INT 0
34768: ST_TO_ADDR
// side := GetSide ( unit ) ;
34769: LD_ADDR_VAR 0 3
34773: PUSH
34774: LD_VAR 0 1
34778: PPUSH
34779: CALL_OW 255
34783: ST_TO_ADDR
// nat := GetNation ( unit ) ;
34784: LD_ADDR_VAR 0 4
34788: PUSH
34789: LD_VAR 0 1
34793: PPUSH
34794: CALL_OW 248
34798: ST_TO_ADDR
// case nat of 1 :
34799: LD_VAR 0 4
34803: PUSH
34804: LD_INT 1
34806: DOUBLE
34807: EQUAL
34808: IFTRUE 34812
34810: GO 34823
34812: POP
// tech := tech_lassight ; 2 :
34813: LD_ADDR_VAR 0 5
34817: PUSH
34818: LD_INT 12
34820: ST_TO_ADDR
34821: GO 34862
34823: LD_INT 2
34825: DOUBLE
34826: EQUAL
34827: IFTRUE 34831
34829: GO 34842
34831: POP
// tech := tech_mortar ; 3 :
34832: LD_ADDR_VAR 0 5
34836: PUSH
34837: LD_INT 41
34839: ST_TO_ADDR
34840: GO 34862
34842: LD_INT 3
34844: DOUBLE
34845: EQUAL
34846: IFTRUE 34850
34848: GO 34861
34850: POP
// tech := tech_bazooka ; end ;
34851: LD_ADDR_VAR 0 5
34855: PUSH
34856: LD_INT 44
34858: ST_TO_ADDR
34859: GO 34862
34861: POP
// if Researched ( side , tech ) then
34862: LD_VAR 0 3
34866: PPUSH
34867: LD_VAR 0 5
34871: PPUSH
34872: CALL_OW 325
34876: IFFALSE 34903
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
34878: LD_ADDR_VAR 0 2
34882: PUSH
34883: LD_INT 5
34885: PUSH
34886: LD_INT 8
34888: PUSH
34889: LD_INT 9
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: LIST
34896: PUSH
34897: LD_VAR 0 4
34901: ARRAY
34902: ST_TO_ADDR
// end ;
34903: LD_VAR 0 2
34907: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
34908: LD_INT 0
34910: PPUSH
34911: PPUSH
34912: PPUSH
// if not mines then
34913: LD_VAR 0 2
34917: NOT
34918: IFFALSE 34922
// exit ;
34920: GO 35066
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34922: LD_ADDR_VAR 0 5
34926: PUSH
34927: LD_INT 81
34929: PUSH
34930: LD_VAR 0 1
34934: PUSH
34935: EMPTY
34936: LIST
34937: LIST
34938: PUSH
34939: LD_INT 3
34941: PUSH
34942: LD_INT 21
34944: PUSH
34945: LD_INT 3
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: PUSH
34952: EMPTY
34953: LIST
34954: LIST
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: PPUSH
34960: CALL_OW 69
34964: ST_TO_ADDR
// for i in mines do
34965: LD_ADDR_VAR 0 4
34969: PUSH
34970: LD_VAR 0 2
34974: PUSH
34975: FOR_IN
34976: IFFALSE 35064
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
34978: LD_VAR 0 4
34982: PUSH
34983: LD_INT 1
34985: ARRAY
34986: PPUSH
34987: LD_VAR 0 4
34991: PUSH
34992: LD_INT 2
34994: ARRAY
34995: PPUSH
34996: CALL_OW 458
35000: NOT
35001: IFFALSE 35005
// continue ;
35003: GO 34975
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
35005: LD_VAR 0 4
35009: PUSH
35010: LD_INT 1
35012: ARRAY
35013: PPUSH
35014: LD_VAR 0 4
35018: PUSH
35019: LD_INT 2
35021: ARRAY
35022: PPUSH
35023: CALL_OW 428
35027: PUSH
35028: LD_VAR 0 5
35032: IN
35033: IFFALSE 35062
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
35035: LD_VAR 0 4
35039: PUSH
35040: LD_INT 1
35042: ARRAY
35043: PPUSH
35044: LD_VAR 0 4
35048: PUSH
35049: LD_INT 2
35051: ARRAY
35052: PPUSH
35053: LD_VAR 0 1
35057: PPUSH
35058: CALL_OW 456
// end ;
35062: GO 34975
35064: POP
35065: POP
// end ;
35066: LD_VAR 0 3
35070: RET
// export function Count ( array ) ; var i ; begin
35071: LD_INT 0
35073: PPUSH
35074: PPUSH
// result := 0 ;
35075: LD_ADDR_VAR 0 2
35079: PUSH
35080: LD_INT 0
35082: ST_TO_ADDR
// for i in array do
35083: LD_ADDR_VAR 0 3
35087: PUSH
35088: LD_VAR 0 1
35092: PUSH
35093: FOR_IN
35094: IFFALSE 35118
// if i then
35096: LD_VAR 0 3
35100: IFFALSE 35116
// result := result + 1 ;
35102: LD_ADDR_VAR 0 2
35106: PUSH
35107: LD_VAR 0 2
35111: PUSH
35112: LD_INT 1
35114: PLUS
35115: ST_TO_ADDR
35116: GO 35093
35118: POP
35119: POP
// end ;
35120: LD_VAR 0 2
35124: RET
// export function IsEmpty ( building ) ; begin
35125: LD_INT 0
35127: PPUSH
// if not building then
35128: LD_VAR 0 1
35132: NOT
35133: IFFALSE 35137
// exit ;
35135: GO 35180
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
35137: LD_ADDR_VAR 0 2
35141: PUSH
35142: LD_VAR 0 1
35146: PUSH
35147: LD_INT 22
35149: PUSH
35150: LD_VAR 0 1
35154: PPUSH
35155: CALL_OW 255
35159: PUSH
35160: EMPTY
35161: LIST
35162: LIST
35163: PUSH
35164: LD_INT 58
35166: PUSH
35167: EMPTY
35168: LIST
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: PPUSH
35174: CALL_OW 69
35178: IN
35179: ST_TO_ADDR
// end ;
35180: LD_VAR 0 2
35184: RET
// export function IsNotFull ( building ) ; begin
35185: LD_INT 0
35187: PPUSH
// if not building then
35188: LD_VAR 0 1
35192: NOT
35193: IFFALSE 35197
// exit ;
35195: GO 35216
// result := UnitsInside ( building ) < 6 ;
35197: LD_ADDR_VAR 0 2
35201: PUSH
35202: LD_VAR 0 1
35206: PPUSH
35207: CALL_OW 313
35211: PUSH
35212: LD_INT 6
35214: LESS
35215: ST_TO_ADDR
// end ;
35216: LD_VAR 0 2
35220: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
35221: LD_INT 0
35223: PPUSH
35224: PPUSH
35225: PPUSH
35226: PPUSH
// tmp := [ ] ;
35227: LD_ADDR_VAR 0 3
35231: PUSH
35232: EMPTY
35233: ST_TO_ADDR
// list := [ ] ;
35234: LD_ADDR_VAR 0 5
35238: PUSH
35239: EMPTY
35240: ST_TO_ADDR
// for i = 16 to 25 do
35241: LD_ADDR_VAR 0 4
35245: PUSH
35246: DOUBLE
35247: LD_INT 16
35249: DEC
35250: ST_TO_ADDR
35251: LD_INT 25
35253: PUSH
35254: FOR_TO
35255: IFFALSE 35328
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
35257: LD_ADDR_VAR 0 3
35261: PUSH
35262: LD_VAR 0 3
35266: PUSH
35267: LD_INT 22
35269: PUSH
35270: LD_VAR 0 1
35274: PPUSH
35275: CALL_OW 255
35279: PUSH
35280: EMPTY
35281: LIST
35282: LIST
35283: PUSH
35284: LD_INT 91
35286: PUSH
35287: LD_VAR 0 1
35291: PUSH
35292: LD_INT 6
35294: PUSH
35295: EMPTY
35296: LIST
35297: LIST
35298: LIST
35299: PUSH
35300: LD_INT 30
35302: PUSH
35303: LD_VAR 0 4
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: LIST
35316: PUSH
35317: EMPTY
35318: LIST
35319: PPUSH
35320: CALL_OW 69
35324: ADD
35325: ST_TO_ADDR
35326: GO 35254
35328: POP
35329: POP
// for i = 1 to tmp do
35330: LD_ADDR_VAR 0 4
35334: PUSH
35335: DOUBLE
35336: LD_INT 1
35338: DEC
35339: ST_TO_ADDR
35340: LD_VAR 0 3
35344: PUSH
35345: FOR_TO
35346: IFFALSE 35434
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
35348: LD_ADDR_VAR 0 5
35352: PUSH
35353: LD_VAR 0 5
35357: PUSH
35358: LD_VAR 0 3
35362: PUSH
35363: LD_VAR 0 4
35367: ARRAY
35368: PPUSH
35369: CALL_OW 266
35373: PUSH
35374: LD_VAR 0 3
35378: PUSH
35379: LD_VAR 0 4
35383: ARRAY
35384: PPUSH
35385: CALL_OW 250
35389: PUSH
35390: LD_VAR 0 3
35394: PUSH
35395: LD_VAR 0 4
35399: ARRAY
35400: PPUSH
35401: CALL_OW 251
35405: PUSH
35406: LD_VAR 0 3
35410: PUSH
35411: LD_VAR 0 4
35415: ARRAY
35416: PPUSH
35417: CALL_OW 254
35421: PUSH
35422: EMPTY
35423: LIST
35424: LIST
35425: LIST
35426: LIST
35427: PUSH
35428: EMPTY
35429: LIST
35430: ADD
35431: ST_TO_ADDR
35432: GO 35345
35434: POP
35435: POP
// result := list ;
35436: LD_ADDR_VAR 0 2
35440: PUSH
35441: LD_VAR 0 5
35445: ST_TO_ADDR
// end ;
35446: LD_VAR 0 2
35450: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
35451: LD_INT 0
35453: PPUSH
35454: PPUSH
35455: PPUSH
35456: PPUSH
35457: PPUSH
35458: PPUSH
35459: PPUSH
// if not factory then
35460: LD_VAR 0 1
35464: NOT
35465: IFFALSE 35469
// exit ;
35467: GO 36062
// if control = control_apeman then
35469: LD_VAR 0 4
35473: PUSH
35474: LD_INT 5
35476: EQUAL
35477: IFFALSE 35586
// begin tmp := UnitsInside ( factory ) ;
35479: LD_ADDR_VAR 0 8
35483: PUSH
35484: LD_VAR 0 1
35488: PPUSH
35489: CALL_OW 313
35493: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
35494: LD_VAR 0 8
35498: PPUSH
35499: LD_INT 25
35501: PUSH
35502: LD_INT 12
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: PPUSH
35509: CALL_OW 72
35513: NOT
35514: IFFALSE 35524
// control := control_manual ;
35516: LD_ADDR_VAR 0 4
35520: PUSH
35521: LD_INT 1
35523: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
35524: LD_ADDR_VAR 0 8
35528: PUSH
35529: LD_VAR 0 1
35533: PPUSH
35534: CALL 35221 0 1
35538: ST_TO_ADDR
// if tmp then
35539: LD_VAR 0 8
35543: IFFALSE 35586
// begin for i in tmp do
35545: LD_ADDR_VAR 0 7
35549: PUSH
35550: LD_VAR 0 8
35554: PUSH
35555: FOR_IN
35556: IFFALSE 35584
// if i [ 1 ] = b_ext_radio then
35558: LD_VAR 0 7
35562: PUSH
35563: LD_INT 1
35565: ARRAY
35566: PUSH
35567: LD_INT 22
35569: EQUAL
35570: IFFALSE 35582
// begin control := control_remote ;
35572: LD_ADDR_VAR 0 4
35576: PUSH
35577: LD_INT 2
35579: ST_TO_ADDR
// break ;
35580: GO 35584
// end ;
35582: GO 35555
35584: POP
35585: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35586: LD_VAR 0 1
35590: PPUSH
35591: LD_VAR 0 2
35595: PPUSH
35596: LD_VAR 0 3
35600: PPUSH
35601: LD_VAR 0 4
35605: PPUSH
35606: LD_VAR 0 5
35610: PPUSH
35611: CALL_OW 448
35615: IFFALSE 35650
// begin result := [ chassis , engine , control , weapon ] ;
35617: LD_ADDR_VAR 0 6
35621: PUSH
35622: LD_VAR 0 2
35626: PUSH
35627: LD_VAR 0 3
35631: PUSH
35632: LD_VAR 0 4
35636: PUSH
35637: LD_VAR 0 5
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: LIST
35646: LIST
35647: ST_TO_ADDR
// exit ;
35648: GO 36062
// end ; _chassis := AvailableChassisList ( factory ) ;
35650: LD_ADDR_VAR 0 9
35654: PUSH
35655: LD_VAR 0 1
35659: PPUSH
35660: CALL_OW 475
35664: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
35665: LD_ADDR_VAR 0 11
35669: PUSH
35670: LD_VAR 0 1
35674: PPUSH
35675: CALL_OW 476
35679: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
35680: LD_ADDR_VAR 0 12
35684: PUSH
35685: LD_VAR 0 1
35689: PPUSH
35690: CALL_OW 477
35694: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
35695: LD_ADDR_VAR 0 10
35699: PUSH
35700: LD_VAR 0 1
35704: PPUSH
35705: CALL_OW 478
35709: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
35710: LD_VAR 0 9
35714: NOT
35715: PUSH
35716: LD_VAR 0 11
35720: NOT
35721: OR
35722: PUSH
35723: LD_VAR 0 12
35727: NOT
35728: OR
35729: PUSH
35730: LD_VAR 0 10
35734: NOT
35735: OR
35736: IFFALSE 35771
// begin result := [ chassis , engine , control , weapon ] ;
35738: LD_ADDR_VAR 0 6
35742: PUSH
35743: LD_VAR 0 2
35747: PUSH
35748: LD_VAR 0 3
35752: PUSH
35753: LD_VAR 0 4
35757: PUSH
35758: LD_VAR 0 5
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: LIST
35767: LIST
35768: ST_TO_ADDR
// exit ;
35769: GO 36062
// end ; if not chassis in _chassis then
35771: LD_VAR 0 2
35775: PUSH
35776: LD_VAR 0 9
35780: IN
35781: NOT
35782: IFFALSE 35808
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
35784: LD_ADDR_VAR 0 2
35788: PUSH
35789: LD_VAR 0 9
35793: PUSH
35794: LD_INT 1
35796: PPUSH
35797: LD_VAR 0 9
35801: PPUSH
35802: CALL_OW 12
35806: ARRAY
35807: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
35808: LD_VAR 0 2
35812: PPUSH
35813: LD_VAR 0 3
35817: PPUSH
35818: CALL 36067 0 2
35822: NOT
35823: IFFALSE 35882
// repeat engine := _engine [ 1 ] ;
35825: LD_ADDR_VAR 0 3
35829: PUSH
35830: LD_VAR 0 11
35834: PUSH
35835: LD_INT 1
35837: ARRAY
35838: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
35839: LD_ADDR_VAR 0 11
35843: PUSH
35844: LD_VAR 0 11
35848: PPUSH
35849: LD_INT 1
35851: PPUSH
35852: CALL_OW 3
35856: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
35857: LD_VAR 0 2
35861: PPUSH
35862: LD_VAR 0 3
35866: PPUSH
35867: CALL 36067 0 2
35871: PUSH
35872: LD_VAR 0 11
35876: PUSH
35877: EMPTY
35878: EQUAL
35879: OR
35880: IFFALSE 35825
// if not control in _control then
35882: LD_VAR 0 4
35886: PUSH
35887: LD_VAR 0 12
35891: IN
35892: NOT
35893: IFFALSE 35919
// control := _control [ rand ( 1 , _control ) ] ;
35895: LD_ADDR_VAR 0 4
35899: PUSH
35900: LD_VAR 0 12
35904: PUSH
35905: LD_INT 1
35907: PPUSH
35908: LD_VAR 0 12
35912: PPUSH
35913: CALL_OW 12
35917: ARRAY
35918: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
35919: LD_VAR 0 2
35923: PPUSH
35924: LD_VAR 0 5
35928: PPUSH
35929: CALL 36287 0 2
35933: NOT
35934: IFFALSE 35993
// repeat weapon := _weapon [ 1 ] ;
35936: LD_ADDR_VAR 0 5
35940: PUSH
35941: LD_VAR 0 10
35945: PUSH
35946: LD_INT 1
35948: ARRAY
35949: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
35950: LD_ADDR_VAR 0 10
35954: PUSH
35955: LD_VAR 0 10
35959: PPUSH
35960: LD_INT 1
35962: PPUSH
35963: CALL_OW 3
35967: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
35968: LD_VAR 0 2
35972: PPUSH
35973: LD_VAR 0 5
35977: PPUSH
35978: CALL 36287 0 2
35982: PUSH
35983: LD_VAR 0 10
35987: PUSH
35988: EMPTY
35989: EQUAL
35990: OR
35991: IFFALSE 35936
// result := [ ] ;
35993: LD_ADDR_VAR 0 6
35997: PUSH
35998: EMPTY
35999: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36000: LD_VAR 0 1
36004: PPUSH
36005: LD_VAR 0 2
36009: PPUSH
36010: LD_VAR 0 3
36014: PPUSH
36015: LD_VAR 0 4
36019: PPUSH
36020: LD_VAR 0 5
36024: PPUSH
36025: CALL_OW 448
36029: IFFALSE 36062
// result := [ chassis , engine , control , weapon ] ;
36031: LD_ADDR_VAR 0 6
36035: PUSH
36036: LD_VAR 0 2
36040: PUSH
36041: LD_VAR 0 3
36045: PUSH
36046: LD_VAR 0 4
36050: PUSH
36051: LD_VAR 0 5
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: LIST
36060: LIST
36061: ST_TO_ADDR
// end ;
36062: LD_VAR 0 6
36066: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
36067: LD_INT 0
36069: PPUSH
// if not chassis or not engine then
36070: LD_VAR 0 1
36074: NOT
36075: PUSH
36076: LD_VAR 0 2
36080: NOT
36081: OR
36082: IFFALSE 36086
// exit ;
36084: GO 36282
// case engine of engine_solar :
36086: LD_VAR 0 2
36090: PUSH
36091: LD_INT 2
36093: DOUBLE
36094: EQUAL
36095: IFTRUE 36099
36097: GO 36137
36099: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
36100: LD_ADDR_VAR 0 3
36104: PUSH
36105: LD_INT 11
36107: PUSH
36108: LD_INT 12
36110: PUSH
36111: LD_INT 13
36113: PUSH
36114: LD_INT 14
36116: PUSH
36117: LD_INT 1
36119: PUSH
36120: LD_INT 2
36122: PUSH
36123: LD_INT 3
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: LIST
36130: LIST
36131: LIST
36132: LIST
36133: LIST
36134: ST_TO_ADDR
36135: GO 36266
36137: LD_INT 1
36139: DOUBLE
36140: EQUAL
36141: IFTRUE 36145
36143: GO 36207
36145: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
36146: LD_ADDR_VAR 0 3
36150: PUSH
36151: LD_INT 11
36153: PUSH
36154: LD_INT 12
36156: PUSH
36157: LD_INT 13
36159: PUSH
36160: LD_INT 14
36162: PUSH
36163: LD_INT 1
36165: PUSH
36166: LD_INT 2
36168: PUSH
36169: LD_INT 3
36171: PUSH
36172: LD_INT 4
36174: PUSH
36175: LD_INT 5
36177: PUSH
36178: LD_INT 21
36180: PUSH
36181: LD_INT 23
36183: PUSH
36184: LD_INT 22
36186: PUSH
36187: LD_INT 24
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: LIST
36194: LIST
36195: LIST
36196: LIST
36197: LIST
36198: LIST
36199: LIST
36200: LIST
36201: LIST
36202: LIST
36203: LIST
36204: ST_TO_ADDR
36205: GO 36266
36207: LD_INT 3
36209: DOUBLE
36210: EQUAL
36211: IFTRUE 36215
36213: GO 36265
36215: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36216: LD_ADDR_VAR 0 3
36220: PUSH
36221: LD_INT 13
36223: PUSH
36224: LD_INT 14
36226: PUSH
36227: LD_INT 2
36229: PUSH
36230: LD_INT 3
36232: PUSH
36233: LD_INT 4
36235: PUSH
36236: LD_INT 5
36238: PUSH
36239: LD_INT 21
36241: PUSH
36242: LD_INT 22
36244: PUSH
36245: LD_INT 23
36247: PUSH
36248: LD_INT 24
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: LIST
36259: LIST
36260: LIST
36261: LIST
36262: ST_TO_ADDR
36263: GO 36266
36265: POP
// result := ( chassis in result ) ;
36266: LD_ADDR_VAR 0 3
36270: PUSH
36271: LD_VAR 0 1
36275: PUSH
36276: LD_VAR 0 3
36280: IN
36281: ST_TO_ADDR
// end ;
36282: LD_VAR 0 3
36286: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
36287: LD_INT 0
36289: PPUSH
// if not chassis or not weapon then
36290: LD_VAR 0 1
36294: NOT
36295: PUSH
36296: LD_VAR 0 2
36300: NOT
36301: OR
36302: IFFALSE 36306
// exit ;
36304: GO 37368
// case weapon of us_machine_gun :
36306: LD_VAR 0 2
36310: PUSH
36311: LD_INT 2
36313: DOUBLE
36314: EQUAL
36315: IFTRUE 36319
36317: GO 36349
36319: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
36320: LD_ADDR_VAR 0 3
36324: PUSH
36325: LD_INT 1
36327: PUSH
36328: LD_INT 2
36330: PUSH
36331: LD_INT 3
36333: PUSH
36334: LD_INT 4
36336: PUSH
36337: LD_INT 5
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: LIST
36344: LIST
36345: LIST
36346: ST_TO_ADDR
36347: GO 37352
36349: LD_INT 3
36351: DOUBLE
36352: EQUAL
36353: IFTRUE 36357
36355: GO 36387
36357: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
36358: LD_ADDR_VAR 0 3
36362: PUSH
36363: LD_INT 1
36365: PUSH
36366: LD_INT 2
36368: PUSH
36369: LD_INT 3
36371: PUSH
36372: LD_INT 4
36374: PUSH
36375: LD_INT 5
36377: PUSH
36378: EMPTY
36379: LIST
36380: LIST
36381: LIST
36382: LIST
36383: LIST
36384: ST_TO_ADDR
36385: GO 37352
36387: LD_INT 11
36389: DOUBLE
36390: EQUAL
36391: IFTRUE 36395
36393: GO 36425
36395: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
36396: LD_ADDR_VAR 0 3
36400: PUSH
36401: LD_INT 1
36403: PUSH
36404: LD_INT 2
36406: PUSH
36407: LD_INT 3
36409: PUSH
36410: LD_INT 4
36412: PUSH
36413: LD_INT 5
36415: PUSH
36416: EMPTY
36417: LIST
36418: LIST
36419: LIST
36420: LIST
36421: LIST
36422: ST_TO_ADDR
36423: GO 37352
36425: LD_INT 4
36427: DOUBLE
36428: EQUAL
36429: IFTRUE 36433
36431: GO 36459
36433: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
36434: LD_ADDR_VAR 0 3
36438: PUSH
36439: LD_INT 2
36441: PUSH
36442: LD_INT 3
36444: PUSH
36445: LD_INT 4
36447: PUSH
36448: LD_INT 5
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: LIST
36455: LIST
36456: ST_TO_ADDR
36457: GO 37352
36459: LD_INT 5
36461: DOUBLE
36462: EQUAL
36463: IFTRUE 36467
36465: GO 36493
36467: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
36468: LD_ADDR_VAR 0 3
36472: PUSH
36473: LD_INT 2
36475: PUSH
36476: LD_INT 3
36478: PUSH
36479: LD_INT 4
36481: PUSH
36482: LD_INT 5
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: LIST
36489: LIST
36490: ST_TO_ADDR
36491: GO 37352
36493: LD_INT 9
36495: DOUBLE
36496: EQUAL
36497: IFTRUE 36501
36499: GO 36527
36501: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
36502: LD_ADDR_VAR 0 3
36506: PUSH
36507: LD_INT 2
36509: PUSH
36510: LD_INT 3
36512: PUSH
36513: LD_INT 4
36515: PUSH
36516: LD_INT 5
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: ST_TO_ADDR
36525: GO 37352
36527: LD_INT 7
36529: DOUBLE
36530: EQUAL
36531: IFTRUE 36535
36533: GO 36561
36535: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
36536: LD_ADDR_VAR 0 3
36540: PUSH
36541: LD_INT 2
36543: PUSH
36544: LD_INT 3
36546: PUSH
36547: LD_INT 4
36549: PUSH
36550: LD_INT 5
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: LIST
36557: LIST
36558: ST_TO_ADDR
36559: GO 37352
36561: LD_INT 12
36563: DOUBLE
36564: EQUAL
36565: IFTRUE 36569
36567: GO 36595
36569: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
36570: LD_ADDR_VAR 0 3
36574: PUSH
36575: LD_INT 2
36577: PUSH
36578: LD_INT 3
36580: PUSH
36581: LD_INT 4
36583: PUSH
36584: LD_INT 5
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: LIST
36591: LIST
36592: ST_TO_ADDR
36593: GO 37352
36595: LD_INT 13
36597: DOUBLE
36598: EQUAL
36599: IFTRUE 36603
36601: GO 36629
36603: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
36604: LD_ADDR_VAR 0 3
36608: PUSH
36609: LD_INT 2
36611: PUSH
36612: LD_INT 3
36614: PUSH
36615: LD_INT 4
36617: PUSH
36618: LD_INT 5
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: LIST
36625: LIST
36626: ST_TO_ADDR
36627: GO 37352
36629: LD_INT 14
36631: DOUBLE
36632: EQUAL
36633: IFTRUE 36637
36635: GO 36655
36637: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
36638: LD_ADDR_VAR 0 3
36642: PUSH
36643: LD_INT 4
36645: PUSH
36646: LD_INT 5
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: ST_TO_ADDR
36653: GO 37352
36655: LD_INT 6
36657: DOUBLE
36658: EQUAL
36659: IFTRUE 36663
36661: GO 36681
36663: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
36664: LD_ADDR_VAR 0 3
36668: PUSH
36669: LD_INT 4
36671: PUSH
36672: LD_INT 5
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: ST_TO_ADDR
36679: GO 37352
36681: LD_INT 10
36683: DOUBLE
36684: EQUAL
36685: IFTRUE 36689
36687: GO 36707
36689: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
36690: LD_ADDR_VAR 0 3
36694: PUSH
36695: LD_INT 4
36697: PUSH
36698: LD_INT 5
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: ST_TO_ADDR
36705: GO 37352
36707: LD_INT 22
36709: DOUBLE
36710: EQUAL
36711: IFTRUE 36715
36713: GO 36741
36715: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
36716: LD_ADDR_VAR 0 3
36720: PUSH
36721: LD_INT 11
36723: PUSH
36724: LD_INT 12
36726: PUSH
36727: LD_INT 13
36729: PUSH
36730: LD_INT 14
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: LIST
36737: LIST
36738: ST_TO_ADDR
36739: GO 37352
36741: LD_INT 23
36743: DOUBLE
36744: EQUAL
36745: IFTRUE 36749
36747: GO 36775
36749: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
36750: LD_ADDR_VAR 0 3
36754: PUSH
36755: LD_INT 11
36757: PUSH
36758: LD_INT 12
36760: PUSH
36761: LD_INT 13
36763: PUSH
36764: LD_INT 14
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: LIST
36771: LIST
36772: ST_TO_ADDR
36773: GO 37352
36775: LD_INT 24
36777: DOUBLE
36778: EQUAL
36779: IFTRUE 36783
36781: GO 36809
36783: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
36784: LD_ADDR_VAR 0 3
36788: PUSH
36789: LD_INT 11
36791: PUSH
36792: LD_INT 12
36794: PUSH
36795: LD_INT 13
36797: PUSH
36798: LD_INT 14
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: LIST
36805: LIST
36806: ST_TO_ADDR
36807: GO 37352
36809: LD_INT 30
36811: DOUBLE
36812: EQUAL
36813: IFTRUE 36817
36815: GO 36843
36817: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
36818: LD_ADDR_VAR 0 3
36822: PUSH
36823: LD_INT 11
36825: PUSH
36826: LD_INT 12
36828: PUSH
36829: LD_INT 13
36831: PUSH
36832: LD_INT 14
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: LIST
36839: LIST
36840: ST_TO_ADDR
36841: GO 37352
36843: LD_INT 25
36845: DOUBLE
36846: EQUAL
36847: IFTRUE 36851
36849: GO 36869
36851: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
36852: LD_ADDR_VAR 0 3
36856: PUSH
36857: LD_INT 13
36859: PUSH
36860: LD_INT 14
36862: PUSH
36863: EMPTY
36864: LIST
36865: LIST
36866: ST_TO_ADDR
36867: GO 37352
36869: LD_INT 27
36871: DOUBLE
36872: EQUAL
36873: IFTRUE 36877
36875: GO 36895
36877: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
36878: LD_ADDR_VAR 0 3
36882: PUSH
36883: LD_INT 13
36885: PUSH
36886: LD_INT 14
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: ST_TO_ADDR
36893: GO 37352
36895: LD_EXP 43
36899: DOUBLE
36900: EQUAL
36901: IFTRUE 36905
36903: GO 36931
36905: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
36906: LD_ADDR_VAR 0 3
36910: PUSH
36911: LD_INT 11
36913: PUSH
36914: LD_INT 12
36916: PUSH
36917: LD_INT 13
36919: PUSH
36920: LD_INT 14
36922: PUSH
36923: EMPTY
36924: LIST
36925: LIST
36926: LIST
36927: LIST
36928: ST_TO_ADDR
36929: GO 37352
36931: LD_INT 28
36933: DOUBLE
36934: EQUAL
36935: IFTRUE 36939
36937: GO 36957
36939: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
36940: LD_ADDR_VAR 0 3
36944: PUSH
36945: LD_INT 13
36947: PUSH
36948: LD_INT 14
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: ST_TO_ADDR
36955: GO 37352
36957: LD_INT 29
36959: DOUBLE
36960: EQUAL
36961: IFTRUE 36965
36963: GO 36983
36965: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
36966: LD_ADDR_VAR 0 3
36970: PUSH
36971: LD_INT 13
36973: PUSH
36974: LD_INT 14
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: ST_TO_ADDR
36981: GO 37352
36983: LD_INT 31
36985: DOUBLE
36986: EQUAL
36987: IFTRUE 36991
36989: GO 37009
36991: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
36992: LD_ADDR_VAR 0 3
36996: PUSH
36997: LD_INT 13
36999: PUSH
37000: LD_INT 14
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: ST_TO_ADDR
37007: GO 37352
37009: LD_INT 26
37011: DOUBLE
37012: EQUAL
37013: IFTRUE 37017
37015: GO 37035
37017: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
37018: LD_ADDR_VAR 0 3
37022: PUSH
37023: LD_INT 13
37025: PUSH
37026: LD_INT 14
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: ST_TO_ADDR
37033: GO 37352
37035: LD_INT 42
37037: DOUBLE
37038: EQUAL
37039: IFTRUE 37043
37041: GO 37069
37043: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
37044: LD_ADDR_VAR 0 3
37048: PUSH
37049: LD_INT 21
37051: PUSH
37052: LD_INT 22
37054: PUSH
37055: LD_INT 23
37057: PUSH
37058: LD_INT 24
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: ST_TO_ADDR
37067: GO 37352
37069: LD_INT 43
37071: DOUBLE
37072: EQUAL
37073: IFTRUE 37077
37075: GO 37103
37077: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
37078: LD_ADDR_VAR 0 3
37082: PUSH
37083: LD_INT 21
37085: PUSH
37086: LD_INT 22
37088: PUSH
37089: LD_INT 23
37091: PUSH
37092: LD_INT 24
37094: PUSH
37095: EMPTY
37096: LIST
37097: LIST
37098: LIST
37099: LIST
37100: ST_TO_ADDR
37101: GO 37352
37103: LD_INT 44
37105: DOUBLE
37106: EQUAL
37107: IFTRUE 37111
37109: GO 37137
37111: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
37112: LD_ADDR_VAR 0 3
37116: PUSH
37117: LD_INT 21
37119: PUSH
37120: LD_INT 22
37122: PUSH
37123: LD_INT 23
37125: PUSH
37126: LD_INT 24
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: LIST
37133: LIST
37134: ST_TO_ADDR
37135: GO 37352
37137: LD_INT 45
37139: DOUBLE
37140: EQUAL
37141: IFTRUE 37145
37143: GO 37171
37145: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
37146: LD_ADDR_VAR 0 3
37150: PUSH
37151: LD_INT 21
37153: PUSH
37154: LD_INT 22
37156: PUSH
37157: LD_INT 23
37159: PUSH
37160: LD_INT 24
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: LIST
37167: LIST
37168: ST_TO_ADDR
37169: GO 37352
37171: LD_INT 49
37173: DOUBLE
37174: EQUAL
37175: IFTRUE 37179
37177: GO 37205
37179: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
37180: LD_ADDR_VAR 0 3
37184: PUSH
37185: LD_INT 21
37187: PUSH
37188: LD_INT 22
37190: PUSH
37191: LD_INT 23
37193: PUSH
37194: LD_INT 24
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: LIST
37201: LIST
37202: ST_TO_ADDR
37203: GO 37352
37205: LD_INT 51
37207: DOUBLE
37208: EQUAL
37209: IFTRUE 37213
37211: GO 37239
37213: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
37214: LD_ADDR_VAR 0 3
37218: PUSH
37219: LD_INT 21
37221: PUSH
37222: LD_INT 22
37224: PUSH
37225: LD_INT 23
37227: PUSH
37228: LD_INT 24
37230: PUSH
37231: EMPTY
37232: LIST
37233: LIST
37234: LIST
37235: LIST
37236: ST_TO_ADDR
37237: GO 37352
37239: LD_INT 52
37241: DOUBLE
37242: EQUAL
37243: IFTRUE 37247
37245: GO 37273
37247: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
37248: LD_ADDR_VAR 0 3
37252: PUSH
37253: LD_INT 21
37255: PUSH
37256: LD_INT 22
37258: PUSH
37259: LD_INT 23
37261: PUSH
37262: LD_INT 24
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: LIST
37269: LIST
37270: ST_TO_ADDR
37271: GO 37352
37273: LD_INT 53
37275: DOUBLE
37276: EQUAL
37277: IFTRUE 37281
37279: GO 37299
37281: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
37282: LD_ADDR_VAR 0 3
37286: PUSH
37287: LD_INT 23
37289: PUSH
37290: LD_INT 24
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: ST_TO_ADDR
37297: GO 37352
37299: LD_INT 46
37301: DOUBLE
37302: EQUAL
37303: IFTRUE 37307
37305: GO 37325
37307: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
37308: LD_ADDR_VAR 0 3
37312: PUSH
37313: LD_INT 23
37315: PUSH
37316: LD_INT 24
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: ST_TO_ADDR
37323: GO 37352
37325: LD_INT 47
37327: DOUBLE
37328: EQUAL
37329: IFTRUE 37333
37331: GO 37351
37333: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37334: LD_ADDR_VAR 0 3
37338: PUSH
37339: LD_INT 23
37341: PUSH
37342: LD_INT 24
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: ST_TO_ADDR
37349: GO 37352
37351: POP
// result := ( chassis in result ) ;
37352: LD_ADDR_VAR 0 3
37356: PUSH
37357: LD_VAR 0 1
37361: PUSH
37362: LD_VAR 0 3
37366: IN
37367: ST_TO_ADDR
// end ;
37368: LD_VAR 0 3
37372: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
37373: LD_INT 0
37375: PPUSH
37376: PPUSH
37377: PPUSH
37378: PPUSH
37379: PPUSH
37380: PPUSH
37381: PPUSH
// result := array ;
37382: LD_ADDR_VAR 0 5
37386: PUSH
37387: LD_VAR 0 1
37391: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
37392: LD_VAR 0 1
37396: NOT
37397: PUSH
37398: LD_VAR 0 2
37402: NOT
37403: OR
37404: PUSH
37405: LD_VAR 0 3
37409: NOT
37410: OR
37411: PUSH
37412: LD_VAR 0 2
37416: PUSH
37417: LD_VAR 0 1
37421: GREATER
37422: OR
37423: PUSH
37424: LD_VAR 0 3
37428: PUSH
37429: LD_VAR 0 1
37433: GREATER
37434: OR
37435: IFFALSE 37439
// exit ;
37437: GO 37735
// if direction then
37439: LD_VAR 0 4
37443: IFFALSE 37507
// begin d := 1 ;
37445: LD_ADDR_VAR 0 9
37449: PUSH
37450: LD_INT 1
37452: ST_TO_ADDR
// if i_from > i_to then
37453: LD_VAR 0 2
37457: PUSH
37458: LD_VAR 0 3
37462: GREATER
37463: IFFALSE 37489
// length := ( array - i_from ) + i_to else
37465: LD_ADDR_VAR 0 11
37469: PUSH
37470: LD_VAR 0 1
37474: PUSH
37475: LD_VAR 0 2
37479: MINUS
37480: PUSH
37481: LD_VAR 0 3
37485: PLUS
37486: ST_TO_ADDR
37487: GO 37505
// length := i_to - i_from ;
37489: LD_ADDR_VAR 0 11
37493: PUSH
37494: LD_VAR 0 3
37498: PUSH
37499: LD_VAR 0 2
37503: MINUS
37504: ST_TO_ADDR
// end else
37505: GO 37568
// begin d := - 1 ;
37507: LD_ADDR_VAR 0 9
37511: PUSH
37512: LD_INT 1
37514: NEG
37515: ST_TO_ADDR
// if i_from > i_to then
37516: LD_VAR 0 2
37520: PUSH
37521: LD_VAR 0 3
37525: GREATER
37526: IFFALSE 37546
// length := i_from - i_to else
37528: LD_ADDR_VAR 0 11
37532: PUSH
37533: LD_VAR 0 2
37537: PUSH
37538: LD_VAR 0 3
37542: MINUS
37543: ST_TO_ADDR
37544: GO 37568
// length := ( array - i_to ) + i_from ;
37546: LD_ADDR_VAR 0 11
37550: PUSH
37551: LD_VAR 0 1
37555: PUSH
37556: LD_VAR 0 3
37560: MINUS
37561: PUSH
37562: LD_VAR 0 2
37566: PLUS
37567: ST_TO_ADDR
// end ; if not length then
37568: LD_VAR 0 11
37572: NOT
37573: IFFALSE 37577
// exit ;
37575: GO 37735
// tmp := array ;
37577: LD_ADDR_VAR 0 10
37581: PUSH
37582: LD_VAR 0 1
37586: ST_TO_ADDR
// for i = 1 to length do
37587: LD_ADDR_VAR 0 6
37591: PUSH
37592: DOUBLE
37593: LD_INT 1
37595: DEC
37596: ST_TO_ADDR
37597: LD_VAR 0 11
37601: PUSH
37602: FOR_TO
37603: IFFALSE 37723
// begin for j = 1 to array do
37605: LD_ADDR_VAR 0 7
37609: PUSH
37610: DOUBLE
37611: LD_INT 1
37613: DEC
37614: ST_TO_ADDR
37615: LD_VAR 0 1
37619: PUSH
37620: FOR_TO
37621: IFFALSE 37709
// begin k := j + d ;
37623: LD_ADDR_VAR 0 8
37627: PUSH
37628: LD_VAR 0 7
37632: PUSH
37633: LD_VAR 0 9
37637: PLUS
37638: ST_TO_ADDR
// if k > array then
37639: LD_VAR 0 8
37643: PUSH
37644: LD_VAR 0 1
37648: GREATER
37649: IFFALSE 37659
// k := 1 ;
37651: LD_ADDR_VAR 0 8
37655: PUSH
37656: LD_INT 1
37658: ST_TO_ADDR
// if not k then
37659: LD_VAR 0 8
37663: NOT
37664: IFFALSE 37676
// k := array ;
37666: LD_ADDR_VAR 0 8
37670: PUSH
37671: LD_VAR 0 1
37675: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
37676: LD_ADDR_VAR 0 10
37680: PUSH
37681: LD_VAR 0 10
37685: PPUSH
37686: LD_VAR 0 8
37690: PPUSH
37691: LD_VAR 0 1
37695: PUSH
37696: LD_VAR 0 7
37700: ARRAY
37701: PPUSH
37702: CALL_OW 1
37706: ST_TO_ADDR
// end ;
37707: GO 37620
37709: POP
37710: POP
// array := tmp ;
37711: LD_ADDR_VAR 0 1
37715: PUSH
37716: LD_VAR 0 10
37720: ST_TO_ADDR
// end ;
37721: GO 37602
37723: POP
37724: POP
// result := array ;
37725: LD_ADDR_VAR 0 5
37729: PUSH
37730: LD_VAR 0 1
37734: ST_TO_ADDR
// end ;
37735: LD_VAR 0 5
37739: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
37740: LD_INT 0
37742: PPUSH
37743: PPUSH
// result := 0 ;
37744: LD_ADDR_VAR 0 3
37748: PUSH
37749: LD_INT 0
37751: ST_TO_ADDR
// if not array or not value in array then
37752: LD_VAR 0 1
37756: NOT
37757: PUSH
37758: LD_VAR 0 2
37762: PUSH
37763: LD_VAR 0 1
37767: IN
37768: NOT
37769: OR
37770: IFFALSE 37774
// exit ;
37772: GO 37828
// for i = 1 to array do
37774: LD_ADDR_VAR 0 4
37778: PUSH
37779: DOUBLE
37780: LD_INT 1
37782: DEC
37783: ST_TO_ADDR
37784: LD_VAR 0 1
37788: PUSH
37789: FOR_TO
37790: IFFALSE 37826
// if value = array [ i ] then
37792: LD_VAR 0 2
37796: PUSH
37797: LD_VAR 0 1
37801: PUSH
37802: LD_VAR 0 4
37806: ARRAY
37807: EQUAL
37808: IFFALSE 37824
// begin result := i ;
37810: LD_ADDR_VAR 0 3
37814: PUSH
37815: LD_VAR 0 4
37819: ST_TO_ADDR
// exit ;
37820: POP
37821: POP
37822: GO 37828
// end ;
37824: GO 37789
37826: POP
37827: POP
// end ;
37828: LD_VAR 0 3
37832: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
37833: LD_INT 0
37835: PPUSH
// vc_chassis := chassis ;
37836: LD_ADDR_OWVAR 37
37840: PUSH
37841: LD_VAR 0 1
37845: ST_TO_ADDR
// vc_engine := engine ;
37846: LD_ADDR_OWVAR 39
37850: PUSH
37851: LD_VAR 0 2
37855: ST_TO_ADDR
// vc_control := control ;
37856: LD_ADDR_OWVAR 38
37860: PUSH
37861: LD_VAR 0 3
37865: ST_TO_ADDR
// vc_weapon := weapon ;
37866: LD_ADDR_OWVAR 40
37870: PUSH
37871: LD_VAR 0 4
37875: ST_TO_ADDR
// vc_fuel_battery := fuel ;
37876: LD_ADDR_OWVAR 41
37880: PUSH
37881: LD_VAR 0 5
37885: ST_TO_ADDR
// end ;
37886: LD_VAR 0 6
37890: RET
// export function WantPlant ( unit ) ; var task ; begin
37891: LD_INT 0
37893: PPUSH
37894: PPUSH
// result := false ;
37895: LD_ADDR_VAR 0 2
37899: PUSH
37900: LD_INT 0
37902: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
37903: LD_ADDR_VAR 0 3
37907: PUSH
37908: LD_VAR 0 1
37912: PPUSH
37913: CALL_OW 437
37917: ST_TO_ADDR
// if task then
37918: LD_VAR 0 3
37922: IFFALSE 37950
// if task [ 1 ] [ 1 ] = p then
37924: LD_VAR 0 3
37928: PUSH
37929: LD_INT 1
37931: ARRAY
37932: PUSH
37933: LD_INT 1
37935: ARRAY
37936: PUSH
37937: LD_STRING p
37939: EQUAL
37940: IFFALSE 37950
// result := true ;
37942: LD_ADDR_VAR 0 2
37946: PUSH
37947: LD_INT 1
37949: ST_TO_ADDR
// end ;
37950: LD_VAR 0 2
37954: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
37955: LD_INT 0
37957: PPUSH
37958: PPUSH
37959: PPUSH
37960: PPUSH
// if pos < 1 then
37961: LD_VAR 0 2
37965: PUSH
37966: LD_INT 1
37968: LESS
37969: IFFALSE 37973
// exit ;
37971: GO 38276
// if pos = 1 then
37973: LD_VAR 0 2
37977: PUSH
37978: LD_INT 1
37980: EQUAL
37981: IFFALSE 38014
// result := Replace ( arr , pos [ 1 ] , value ) else
37983: LD_ADDR_VAR 0 4
37987: PUSH
37988: LD_VAR 0 1
37992: PPUSH
37993: LD_VAR 0 2
37997: PUSH
37998: LD_INT 1
38000: ARRAY
38001: PPUSH
38002: LD_VAR 0 3
38006: PPUSH
38007: CALL_OW 1
38011: ST_TO_ADDR
38012: GO 38276
// begin tmp := arr ;
38014: LD_ADDR_VAR 0 6
38018: PUSH
38019: LD_VAR 0 1
38023: ST_TO_ADDR
// s_arr := [ tmp ] ;
38024: LD_ADDR_VAR 0 7
38028: PUSH
38029: LD_VAR 0 6
38033: PUSH
38034: EMPTY
38035: LIST
38036: ST_TO_ADDR
// for i = 1 to pos - 1 do
38037: LD_ADDR_VAR 0 5
38041: PUSH
38042: DOUBLE
38043: LD_INT 1
38045: DEC
38046: ST_TO_ADDR
38047: LD_VAR 0 2
38051: PUSH
38052: LD_INT 1
38054: MINUS
38055: PUSH
38056: FOR_TO
38057: IFFALSE 38102
// begin tmp := tmp [ pos [ i ] ] ;
38059: LD_ADDR_VAR 0 6
38063: PUSH
38064: LD_VAR 0 6
38068: PUSH
38069: LD_VAR 0 2
38073: PUSH
38074: LD_VAR 0 5
38078: ARRAY
38079: ARRAY
38080: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
38081: LD_ADDR_VAR 0 7
38085: PUSH
38086: LD_VAR 0 7
38090: PUSH
38091: LD_VAR 0 6
38095: PUSH
38096: EMPTY
38097: LIST
38098: ADD
38099: ST_TO_ADDR
// end ;
38100: GO 38056
38102: POP
38103: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
38104: LD_ADDR_VAR 0 6
38108: PUSH
38109: LD_VAR 0 6
38113: PPUSH
38114: LD_VAR 0 2
38118: PUSH
38119: LD_VAR 0 2
38123: ARRAY
38124: PPUSH
38125: LD_VAR 0 3
38129: PPUSH
38130: CALL_OW 1
38134: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
38135: LD_ADDR_VAR 0 7
38139: PUSH
38140: LD_VAR 0 7
38144: PPUSH
38145: LD_VAR 0 7
38149: PPUSH
38150: LD_VAR 0 6
38154: PPUSH
38155: CALL_OW 1
38159: ST_TO_ADDR
// for i = s_arr downto 2 do
38160: LD_ADDR_VAR 0 5
38164: PUSH
38165: DOUBLE
38166: LD_VAR 0 7
38170: INC
38171: ST_TO_ADDR
38172: LD_INT 2
38174: PUSH
38175: FOR_DOWNTO
38176: IFFALSE 38260
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
38178: LD_ADDR_VAR 0 6
38182: PUSH
38183: LD_VAR 0 7
38187: PUSH
38188: LD_VAR 0 5
38192: PUSH
38193: LD_INT 1
38195: MINUS
38196: ARRAY
38197: PPUSH
38198: LD_VAR 0 2
38202: PUSH
38203: LD_VAR 0 5
38207: PUSH
38208: LD_INT 1
38210: MINUS
38211: ARRAY
38212: PPUSH
38213: LD_VAR 0 7
38217: PUSH
38218: LD_VAR 0 5
38222: ARRAY
38223: PPUSH
38224: CALL_OW 1
38228: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
38229: LD_ADDR_VAR 0 7
38233: PUSH
38234: LD_VAR 0 7
38238: PPUSH
38239: LD_VAR 0 5
38243: PUSH
38244: LD_INT 1
38246: MINUS
38247: PPUSH
38248: LD_VAR 0 6
38252: PPUSH
38253: CALL_OW 1
38257: ST_TO_ADDR
// end ;
38258: GO 38175
38260: POP
38261: POP
// result := s_arr [ 1 ] ;
38262: LD_ADDR_VAR 0 4
38266: PUSH
38267: LD_VAR 0 7
38271: PUSH
38272: LD_INT 1
38274: ARRAY
38275: ST_TO_ADDR
// end ; end ;
38276: LD_VAR 0 4
38280: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
38281: LD_INT 0
38283: PPUSH
38284: PPUSH
// if not list then
38285: LD_VAR 0 1
38289: NOT
38290: IFFALSE 38294
// exit ;
38292: GO 38385
// i := list [ pos1 ] ;
38294: LD_ADDR_VAR 0 5
38298: PUSH
38299: LD_VAR 0 1
38303: PUSH
38304: LD_VAR 0 2
38308: ARRAY
38309: ST_TO_ADDR
// if not i then
38310: LD_VAR 0 5
38314: NOT
38315: IFFALSE 38319
// exit ;
38317: GO 38385
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
38319: LD_ADDR_VAR 0 1
38323: PUSH
38324: LD_VAR 0 1
38328: PPUSH
38329: LD_VAR 0 2
38333: PPUSH
38334: LD_VAR 0 1
38338: PUSH
38339: LD_VAR 0 3
38343: ARRAY
38344: PPUSH
38345: CALL_OW 1
38349: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
38350: LD_ADDR_VAR 0 1
38354: PUSH
38355: LD_VAR 0 1
38359: PPUSH
38360: LD_VAR 0 3
38364: PPUSH
38365: LD_VAR 0 5
38369: PPUSH
38370: CALL_OW 1
38374: ST_TO_ADDR
// result := list ;
38375: LD_ADDR_VAR 0 4
38379: PUSH
38380: LD_VAR 0 1
38384: ST_TO_ADDR
// end ;
38385: LD_VAR 0 4
38389: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
38390: LD_INT 0
38392: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
38393: LD_ADDR_VAR 0 5
38397: PUSH
38398: LD_VAR 0 1
38402: PPUSH
38403: CALL_OW 250
38407: PPUSH
38408: LD_VAR 0 1
38412: PPUSH
38413: CALL_OW 251
38417: PPUSH
38418: LD_VAR 0 2
38422: PPUSH
38423: LD_VAR 0 3
38427: PPUSH
38428: LD_VAR 0 4
38432: PPUSH
38433: CALL 38443 0 5
38437: ST_TO_ADDR
// end ;
38438: LD_VAR 0 5
38442: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
38443: LD_INT 0
38445: PPUSH
38446: PPUSH
38447: PPUSH
38448: PPUSH
// if not list then
38449: LD_VAR 0 3
38453: NOT
38454: IFFALSE 38458
// exit ;
38456: GO 38846
// result := [ ] ;
38458: LD_ADDR_VAR 0 6
38462: PUSH
38463: EMPTY
38464: ST_TO_ADDR
// for i in list do
38465: LD_ADDR_VAR 0 7
38469: PUSH
38470: LD_VAR 0 3
38474: PUSH
38475: FOR_IN
38476: IFFALSE 38678
// begin tmp := GetDistUnitXY ( i , x , y ) ;
38478: LD_ADDR_VAR 0 9
38482: PUSH
38483: LD_VAR 0 7
38487: PPUSH
38488: LD_VAR 0 1
38492: PPUSH
38493: LD_VAR 0 2
38497: PPUSH
38498: CALL_OW 297
38502: ST_TO_ADDR
// if not result then
38503: LD_VAR 0 6
38507: NOT
38508: IFFALSE 38534
// result := [ [ i , tmp ] ] else
38510: LD_ADDR_VAR 0 6
38514: PUSH
38515: LD_VAR 0 7
38519: PUSH
38520: LD_VAR 0 9
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: EMPTY
38530: LIST
38531: ST_TO_ADDR
38532: GO 38676
// begin if result [ result ] [ 2 ] < tmp then
38534: LD_VAR 0 6
38538: PUSH
38539: LD_VAR 0 6
38543: ARRAY
38544: PUSH
38545: LD_INT 2
38547: ARRAY
38548: PUSH
38549: LD_VAR 0 9
38553: LESS
38554: IFFALSE 38596
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
38556: LD_ADDR_VAR 0 6
38560: PUSH
38561: LD_VAR 0 6
38565: PPUSH
38566: LD_VAR 0 6
38570: PUSH
38571: LD_INT 1
38573: PLUS
38574: PPUSH
38575: LD_VAR 0 7
38579: PUSH
38580: LD_VAR 0 9
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: PPUSH
38589: CALL_OW 2
38593: ST_TO_ADDR
38594: GO 38676
// for j = 1 to result do
38596: LD_ADDR_VAR 0 8
38600: PUSH
38601: DOUBLE
38602: LD_INT 1
38604: DEC
38605: ST_TO_ADDR
38606: LD_VAR 0 6
38610: PUSH
38611: FOR_TO
38612: IFFALSE 38674
// begin if tmp < result [ j ] [ 2 ] then
38614: LD_VAR 0 9
38618: PUSH
38619: LD_VAR 0 6
38623: PUSH
38624: LD_VAR 0 8
38628: ARRAY
38629: PUSH
38630: LD_INT 2
38632: ARRAY
38633: LESS
38634: IFFALSE 38672
// begin result := Insert ( result , j , [ i , tmp ] ) ;
38636: LD_ADDR_VAR 0 6
38640: PUSH
38641: LD_VAR 0 6
38645: PPUSH
38646: LD_VAR 0 8
38650: PPUSH
38651: LD_VAR 0 7
38655: PUSH
38656: LD_VAR 0 9
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: PPUSH
38665: CALL_OW 2
38669: ST_TO_ADDR
// break ;
38670: GO 38674
// end ; end ;
38672: GO 38611
38674: POP
38675: POP
// end ; end ;
38676: GO 38475
38678: POP
38679: POP
// if result and not asc then
38680: LD_VAR 0 6
38684: PUSH
38685: LD_VAR 0 4
38689: NOT
38690: AND
38691: IFFALSE 38766
// begin tmp := result ;
38693: LD_ADDR_VAR 0 9
38697: PUSH
38698: LD_VAR 0 6
38702: ST_TO_ADDR
// for i = tmp downto 1 do
38703: LD_ADDR_VAR 0 7
38707: PUSH
38708: DOUBLE
38709: LD_VAR 0 9
38713: INC
38714: ST_TO_ADDR
38715: LD_INT 1
38717: PUSH
38718: FOR_DOWNTO
38719: IFFALSE 38764
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
38721: LD_ADDR_VAR 0 6
38725: PUSH
38726: LD_VAR 0 6
38730: PPUSH
38731: LD_VAR 0 9
38735: PUSH
38736: LD_VAR 0 7
38740: MINUS
38741: PUSH
38742: LD_INT 1
38744: PLUS
38745: PPUSH
38746: LD_VAR 0 9
38750: PUSH
38751: LD_VAR 0 7
38755: ARRAY
38756: PPUSH
38757: CALL_OW 1
38761: ST_TO_ADDR
38762: GO 38718
38764: POP
38765: POP
// end ; tmp := [ ] ;
38766: LD_ADDR_VAR 0 9
38770: PUSH
38771: EMPTY
38772: ST_TO_ADDR
// if mode then
38773: LD_VAR 0 5
38777: IFFALSE 38846
// begin for i = 1 to result do
38779: LD_ADDR_VAR 0 7
38783: PUSH
38784: DOUBLE
38785: LD_INT 1
38787: DEC
38788: ST_TO_ADDR
38789: LD_VAR 0 6
38793: PUSH
38794: FOR_TO
38795: IFFALSE 38834
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
38797: LD_ADDR_VAR 0 9
38801: PUSH
38802: LD_VAR 0 9
38806: PPUSH
38807: LD_VAR 0 7
38811: PPUSH
38812: LD_VAR 0 6
38816: PUSH
38817: LD_VAR 0 7
38821: ARRAY
38822: PUSH
38823: LD_INT 1
38825: ARRAY
38826: PPUSH
38827: CALL_OW 1
38831: ST_TO_ADDR
38832: GO 38794
38834: POP
38835: POP
// result := tmp ;
38836: LD_ADDR_VAR 0 6
38840: PUSH
38841: LD_VAR 0 9
38845: ST_TO_ADDR
// end ; end ;
38846: LD_VAR 0 6
38850: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
38851: LD_INT 0
38853: PPUSH
38854: PPUSH
38855: PPUSH
38856: PPUSH
38857: PPUSH
38858: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
38859: LD_ADDR_VAR 0 5
38863: PUSH
38864: LD_INT 0
38866: PUSH
38867: LD_INT 0
38869: PUSH
38870: LD_INT 0
38872: PUSH
38873: EMPTY
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: LIST
38879: LIST
38880: ST_TO_ADDR
// if not x or not y then
38881: LD_VAR 0 2
38885: NOT
38886: PUSH
38887: LD_VAR 0 3
38891: NOT
38892: OR
38893: IFFALSE 38897
// exit ;
38895: GO 40549
// if not range then
38897: LD_VAR 0 4
38901: NOT
38902: IFFALSE 38912
// range := 10 ;
38904: LD_ADDR_VAR 0 4
38908: PUSH
38909: LD_INT 10
38911: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38912: LD_ADDR_VAR 0 8
38916: PUSH
38917: LD_INT 81
38919: PUSH
38920: LD_VAR 0 1
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: PUSH
38929: LD_INT 92
38931: PUSH
38932: LD_VAR 0 2
38936: PUSH
38937: LD_VAR 0 3
38941: PUSH
38942: LD_VAR 0 4
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: PUSH
38953: LD_INT 3
38955: PUSH
38956: LD_INT 21
38958: PUSH
38959: LD_INT 3
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: LIST
38974: PPUSH
38975: CALL_OW 69
38979: ST_TO_ADDR
// if not tmp then
38980: LD_VAR 0 8
38984: NOT
38985: IFFALSE 38989
// exit ;
38987: GO 40549
// for i in tmp do
38989: LD_ADDR_VAR 0 6
38993: PUSH
38994: LD_VAR 0 8
38998: PUSH
38999: FOR_IN
39000: IFFALSE 40524
// begin points := [ 0 , 0 , 0 ] ;
39002: LD_ADDR_VAR 0 9
39006: PUSH
39007: LD_INT 0
39009: PUSH
39010: LD_INT 0
39012: PUSH
39013: LD_INT 0
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: LIST
39020: ST_TO_ADDR
// bpoints := 1 ;
39021: LD_ADDR_VAR 0 10
39025: PUSH
39026: LD_INT 1
39028: ST_TO_ADDR
// case GetType ( i ) of unit_human :
39029: LD_VAR 0 6
39033: PPUSH
39034: CALL_OW 247
39038: PUSH
39039: LD_INT 1
39041: DOUBLE
39042: EQUAL
39043: IFTRUE 39047
39045: GO 39625
39047: POP
// begin if GetClass ( i ) = 1 then
39048: LD_VAR 0 6
39052: PPUSH
39053: CALL_OW 257
39057: PUSH
39058: LD_INT 1
39060: EQUAL
39061: IFFALSE 39082
// points := [ 10 , 5 , 3 ] ;
39063: LD_ADDR_VAR 0 9
39067: PUSH
39068: LD_INT 10
39070: PUSH
39071: LD_INT 5
39073: PUSH
39074: LD_INT 3
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: LIST
39081: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
39082: LD_VAR 0 6
39086: PPUSH
39087: CALL_OW 257
39091: PUSH
39092: LD_INT 2
39094: PUSH
39095: LD_INT 3
39097: PUSH
39098: LD_INT 4
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: LIST
39105: IN
39106: IFFALSE 39127
// points := [ 3 , 2 , 1 ] ;
39108: LD_ADDR_VAR 0 9
39112: PUSH
39113: LD_INT 3
39115: PUSH
39116: LD_INT 2
39118: PUSH
39119: LD_INT 1
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: LIST
39126: ST_TO_ADDR
// if GetClass ( i ) = 5 then
39127: LD_VAR 0 6
39131: PPUSH
39132: CALL_OW 257
39136: PUSH
39137: LD_INT 5
39139: EQUAL
39140: IFFALSE 39161
// points := [ 130 , 5 , 2 ] ;
39142: LD_ADDR_VAR 0 9
39146: PUSH
39147: LD_INT 130
39149: PUSH
39150: LD_INT 5
39152: PUSH
39153: LD_INT 2
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: LIST
39160: ST_TO_ADDR
// if GetClass ( i ) = 8 then
39161: LD_VAR 0 6
39165: PPUSH
39166: CALL_OW 257
39170: PUSH
39171: LD_INT 8
39173: EQUAL
39174: IFFALSE 39195
// points := [ 35 , 35 , 30 ] ;
39176: LD_ADDR_VAR 0 9
39180: PUSH
39181: LD_INT 35
39183: PUSH
39184: LD_INT 35
39186: PUSH
39187: LD_INT 30
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: LIST
39194: ST_TO_ADDR
// if GetClass ( i ) = 9 then
39195: LD_VAR 0 6
39199: PPUSH
39200: CALL_OW 257
39204: PUSH
39205: LD_INT 9
39207: EQUAL
39208: IFFALSE 39229
// points := [ 20 , 55 , 40 ] ;
39210: LD_ADDR_VAR 0 9
39214: PUSH
39215: LD_INT 20
39217: PUSH
39218: LD_INT 55
39220: PUSH
39221: LD_INT 40
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: LIST
39228: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
39229: LD_VAR 0 6
39233: PPUSH
39234: CALL_OW 257
39238: PUSH
39239: LD_INT 12
39241: PUSH
39242: LD_INT 16
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: IN
39249: IFFALSE 39270
// points := [ 5 , 3 , 2 ] ;
39251: LD_ADDR_VAR 0 9
39255: PUSH
39256: LD_INT 5
39258: PUSH
39259: LD_INT 3
39261: PUSH
39262: LD_INT 2
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: LIST
39269: ST_TO_ADDR
// if GetClass ( i ) = 17 then
39270: LD_VAR 0 6
39274: PPUSH
39275: CALL_OW 257
39279: PUSH
39280: LD_INT 17
39282: EQUAL
39283: IFFALSE 39304
// points := [ 100 , 50 , 75 ] ;
39285: LD_ADDR_VAR 0 9
39289: PUSH
39290: LD_INT 100
39292: PUSH
39293: LD_INT 50
39295: PUSH
39296: LD_INT 75
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: LIST
39303: ST_TO_ADDR
// if GetClass ( i ) = 15 then
39304: LD_VAR 0 6
39308: PPUSH
39309: CALL_OW 257
39313: PUSH
39314: LD_INT 15
39316: EQUAL
39317: IFFALSE 39338
// points := [ 10 , 5 , 3 ] ;
39319: LD_ADDR_VAR 0 9
39323: PUSH
39324: LD_INT 10
39326: PUSH
39327: LD_INT 5
39329: PUSH
39330: LD_INT 3
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: LIST
39337: ST_TO_ADDR
// if GetClass ( i ) = 14 then
39338: LD_VAR 0 6
39342: PPUSH
39343: CALL_OW 257
39347: PUSH
39348: LD_INT 14
39350: EQUAL
39351: IFFALSE 39372
// points := [ 10 , 0 , 0 ] ;
39353: LD_ADDR_VAR 0 9
39357: PUSH
39358: LD_INT 10
39360: PUSH
39361: LD_INT 0
39363: PUSH
39364: LD_INT 0
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: LIST
39371: ST_TO_ADDR
// if GetClass ( i ) = 11 then
39372: LD_VAR 0 6
39376: PPUSH
39377: CALL_OW 257
39381: PUSH
39382: LD_INT 11
39384: EQUAL
39385: IFFALSE 39406
// points := [ 30 , 10 , 5 ] ;
39387: LD_ADDR_VAR 0 9
39391: PUSH
39392: LD_INT 30
39394: PUSH
39395: LD_INT 10
39397: PUSH
39398: LD_INT 5
39400: PUSH
39401: EMPTY
39402: LIST
39403: LIST
39404: LIST
39405: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
39406: LD_VAR 0 1
39410: PPUSH
39411: LD_INT 5
39413: PPUSH
39414: CALL_OW 321
39418: PUSH
39419: LD_INT 2
39421: EQUAL
39422: IFFALSE 39439
// bpoints := bpoints * 1.8 ;
39424: LD_ADDR_VAR 0 10
39428: PUSH
39429: LD_VAR 0 10
39433: PUSH
39434: LD_REAL  1.80000000000000E+0000
39437: MUL
39438: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
39439: LD_VAR 0 6
39443: PPUSH
39444: CALL_OW 257
39448: PUSH
39449: LD_INT 1
39451: PUSH
39452: LD_INT 2
39454: PUSH
39455: LD_INT 3
39457: PUSH
39458: LD_INT 4
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: LIST
39465: LIST
39466: IN
39467: PUSH
39468: LD_VAR 0 1
39472: PPUSH
39473: LD_INT 51
39475: PPUSH
39476: CALL_OW 321
39480: PUSH
39481: LD_INT 2
39483: EQUAL
39484: AND
39485: IFFALSE 39502
// bpoints := bpoints * 1.2 ;
39487: LD_ADDR_VAR 0 10
39491: PUSH
39492: LD_VAR 0 10
39496: PUSH
39497: LD_REAL  1.20000000000000E+0000
39500: MUL
39501: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
39502: LD_VAR 0 6
39506: PPUSH
39507: CALL_OW 257
39511: PUSH
39512: LD_INT 5
39514: PUSH
39515: LD_INT 7
39517: PUSH
39518: LD_INT 9
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: LIST
39525: IN
39526: PUSH
39527: LD_VAR 0 1
39531: PPUSH
39532: LD_INT 52
39534: PPUSH
39535: CALL_OW 321
39539: PUSH
39540: LD_INT 2
39542: EQUAL
39543: AND
39544: IFFALSE 39561
// bpoints := bpoints * 1.5 ;
39546: LD_ADDR_VAR 0 10
39550: PUSH
39551: LD_VAR 0 10
39555: PUSH
39556: LD_REAL  1.50000000000000E+0000
39559: MUL
39560: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
39561: LD_VAR 0 1
39565: PPUSH
39566: LD_INT 66
39568: PPUSH
39569: CALL_OW 321
39573: PUSH
39574: LD_INT 2
39576: EQUAL
39577: IFFALSE 39594
// bpoints := bpoints * 1.1 ;
39579: LD_ADDR_VAR 0 10
39583: PUSH
39584: LD_VAR 0 10
39588: PUSH
39589: LD_REAL  1.10000000000000E+0000
39592: MUL
39593: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
39594: LD_ADDR_VAR 0 10
39598: PUSH
39599: LD_VAR 0 10
39603: PUSH
39604: LD_VAR 0 6
39608: PPUSH
39609: LD_INT 1
39611: PPUSH
39612: CALL_OW 259
39616: PUSH
39617: LD_REAL  1.15000000000000E+0000
39620: MUL
39621: MUL
39622: ST_TO_ADDR
// end ; unit_vehicle :
39623: GO 40453
39625: LD_INT 2
39627: DOUBLE
39628: EQUAL
39629: IFTRUE 39633
39631: GO 40441
39633: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
39634: LD_VAR 0 6
39638: PPUSH
39639: CALL_OW 264
39643: PUSH
39644: LD_INT 2
39646: PUSH
39647: LD_INT 42
39649: PUSH
39650: LD_INT 24
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: LIST
39657: IN
39658: IFFALSE 39679
// points := [ 25 , 5 , 3 ] ;
39660: LD_ADDR_VAR 0 9
39664: PUSH
39665: LD_INT 25
39667: PUSH
39668: LD_INT 5
39670: PUSH
39671: LD_INT 3
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: LIST
39678: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
39679: LD_VAR 0 6
39683: PPUSH
39684: CALL_OW 264
39688: PUSH
39689: LD_INT 4
39691: PUSH
39692: LD_INT 43
39694: PUSH
39695: LD_INT 25
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: LIST
39702: IN
39703: IFFALSE 39724
// points := [ 40 , 15 , 5 ] ;
39705: LD_ADDR_VAR 0 9
39709: PUSH
39710: LD_INT 40
39712: PUSH
39713: LD_INT 15
39715: PUSH
39716: LD_INT 5
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: LIST
39723: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
39724: LD_VAR 0 6
39728: PPUSH
39729: CALL_OW 264
39733: PUSH
39734: LD_INT 3
39736: PUSH
39737: LD_INT 23
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: IN
39744: IFFALSE 39765
// points := [ 7 , 25 , 8 ] ;
39746: LD_ADDR_VAR 0 9
39750: PUSH
39751: LD_INT 7
39753: PUSH
39754: LD_INT 25
39756: PUSH
39757: LD_INT 8
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: LIST
39764: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39765: LD_VAR 0 6
39769: PPUSH
39770: CALL_OW 264
39774: PUSH
39775: LD_INT 5
39777: PUSH
39778: LD_INT 27
39780: PUSH
39781: LD_INT 44
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: LIST
39788: IN
39789: IFFALSE 39810
// points := [ 14 , 50 , 16 ] ;
39791: LD_ADDR_VAR 0 9
39795: PUSH
39796: LD_INT 14
39798: PUSH
39799: LD_INT 50
39801: PUSH
39802: LD_INT 16
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: LIST
39809: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
39810: LD_VAR 0 6
39814: PPUSH
39815: CALL_OW 264
39819: PUSH
39820: LD_INT 6
39822: PUSH
39823: LD_INT 46
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: IN
39830: IFFALSE 39851
// points := [ 32 , 120 , 70 ] ;
39832: LD_ADDR_VAR 0 9
39836: PUSH
39837: LD_INT 32
39839: PUSH
39840: LD_INT 120
39842: PUSH
39843: LD_INT 70
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: LIST
39850: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
39851: LD_VAR 0 6
39855: PPUSH
39856: CALL_OW 264
39860: PUSH
39861: LD_INT 7
39863: PUSH
39864: LD_INT 28
39866: PUSH
39867: LD_INT 45
39869: PUSH
39870: LD_EXP 43
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: IN
39881: IFFALSE 39902
// points := [ 35 , 20 , 45 ] ;
39883: LD_ADDR_VAR 0 9
39887: PUSH
39888: LD_INT 35
39890: PUSH
39891: LD_INT 20
39893: PUSH
39894: LD_INT 45
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: LIST
39901: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39902: LD_VAR 0 6
39906: PPUSH
39907: CALL_OW 264
39911: PUSH
39912: LD_INT 47
39914: PUSH
39915: EMPTY
39916: LIST
39917: IN
39918: IFFALSE 39939
// points := [ 67 , 45 , 75 ] ;
39920: LD_ADDR_VAR 0 9
39924: PUSH
39925: LD_INT 67
39927: PUSH
39928: LD_INT 45
39930: PUSH
39931: LD_INT 75
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: LIST
39938: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
39939: LD_VAR 0 6
39943: PPUSH
39944: CALL_OW 264
39948: PUSH
39949: LD_INT 26
39951: PUSH
39952: EMPTY
39953: LIST
39954: IN
39955: IFFALSE 39976
// points := [ 120 , 30 , 80 ] ;
39957: LD_ADDR_VAR 0 9
39961: PUSH
39962: LD_INT 120
39964: PUSH
39965: LD_INT 30
39967: PUSH
39968: LD_INT 80
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: LIST
39975: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
39976: LD_VAR 0 6
39980: PPUSH
39981: CALL_OW 264
39985: PUSH
39986: LD_INT 22
39988: PUSH
39989: EMPTY
39990: LIST
39991: IN
39992: IFFALSE 40013
// points := [ 40 , 1 , 1 ] ;
39994: LD_ADDR_VAR 0 9
39998: PUSH
39999: LD_INT 40
40001: PUSH
40002: LD_INT 1
40004: PUSH
40005: LD_INT 1
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: LIST
40012: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
40013: LD_VAR 0 6
40017: PPUSH
40018: CALL_OW 264
40022: PUSH
40023: LD_INT 29
40025: PUSH
40026: EMPTY
40027: LIST
40028: IN
40029: IFFALSE 40050
// points := [ 70 , 200 , 400 ] ;
40031: LD_ADDR_VAR 0 9
40035: PUSH
40036: LD_INT 70
40038: PUSH
40039: LD_INT 200
40041: PUSH
40042: LD_INT 400
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: LIST
40049: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
40050: LD_VAR 0 6
40054: PPUSH
40055: CALL_OW 264
40059: PUSH
40060: LD_INT 14
40062: PUSH
40063: LD_INT 53
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: IN
40070: IFFALSE 40091
// points := [ 40 , 10 , 20 ] ;
40072: LD_ADDR_VAR 0 9
40076: PUSH
40077: LD_INT 40
40079: PUSH
40080: LD_INT 10
40082: PUSH
40083: LD_INT 20
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: LIST
40090: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
40091: LD_VAR 0 6
40095: PPUSH
40096: CALL_OW 264
40100: PUSH
40101: LD_INT 9
40103: PUSH
40104: EMPTY
40105: LIST
40106: IN
40107: IFFALSE 40128
// points := [ 5 , 70 , 20 ] ;
40109: LD_ADDR_VAR 0 9
40113: PUSH
40114: LD_INT 5
40116: PUSH
40117: LD_INT 70
40119: PUSH
40120: LD_INT 20
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: LIST
40127: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
40128: LD_VAR 0 6
40132: PPUSH
40133: CALL_OW 264
40137: PUSH
40138: LD_INT 10
40140: PUSH
40141: EMPTY
40142: LIST
40143: IN
40144: IFFALSE 40165
// points := [ 35 , 110 , 70 ] ;
40146: LD_ADDR_VAR 0 9
40150: PUSH
40151: LD_INT 35
40153: PUSH
40154: LD_INT 110
40156: PUSH
40157: LD_INT 70
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: LIST
40164: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
40165: LD_VAR 0 6
40169: PPUSH
40170: CALL_OW 265
40174: PUSH
40175: LD_INT 25
40177: EQUAL
40178: IFFALSE 40199
// points := [ 80 , 65 , 100 ] ;
40180: LD_ADDR_VAR 0 9
40184: PUSH
40185: LD_INT 80
40187: PUSH
40188: LD_INT 65
40190: PUSH
40191: LD_INT 100
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: LIST
40198: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
40199: LD_VAR 0 6
40203: PPUSH
40204: CALL_OW 263
40208: PUSH
40209: LD_INT 1
40211: EQUAL
40212: IFFALSE 40247
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
40214: LD_ADDR_VAR 0 10
40218: PUSH
40219: LD_VAR 0 10
40223: PUSH
40224: LD_VAR 0 6
40228: PPUSH
40229: CALL_OW 311
40233: PPUSH
40234: LD_INT 3
40236: PPUSH
40237: CALL_OW 259
40241: PUSH
40242: LD_INT 4
40244: MUL
40245: MUL
40246: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
40247: LD_VAR 0 6
40251: PPUSH
40252: CALL_OW 263
40256: PUSH
40257: LD_INT 2
40259: EQUAL
40260: IFFALSE 40311
// begin j := IsControledBy ( i ) ;
40262: LD_ADDR_VAR 0 7
40266: PUSH
40267: LD_VAR 0 6
40271: PPUSH
40272: CALL_OW 312
40276: ST_TO_ADDR
// if j then
40277: LD_VAR 0 7
40281: IFFALSE 40311
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
40283: LD_ADDR_VAR 0 10
40287: PUSH
40288: LD_VAR 0 10
40292: PUSH
40293: LD_VAR 0 7
40297: PPUSH
40298: LD_INT 3
40300: PPUSH
40301: CALL_OW 259
40305: PUSH
40306: LD_INT 3
40308: MUL
40309: MUL
40310: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
40311: LD_VAR 0 6
40315: PPUSH
40316: CALL_OW 264
40320: PUSH
40321: LD_INT 5
40323: PUSH
40324: LD_INT 6
40326: PUSH
40327: LD_INT 46
40329: PUSH
40330: LD_INT 44
40332: PUSH
40333: LD_INT 47
40335: PUSH
40336: LD_INT 45
40338: PUSH
40339: LD_INT 28
40341: PUSH
40342: LD_INT 7
40344: PUSH
40345: LD_INT 27
40347: PUSH
40348: LD_INT 29
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: LIST
40355: LIST
40356: LIST
40357: LIST
40358: LIST
40359: LIST
40360: LIST
40361: LIST
40362: IN
40363: PUSH
40364: LD_VAR 0 1
40368: PPUSH
40369: LD_INT 52
40371: PPUSH
40372: CALL_OW 321
40376: PUSH
40377: LD_INT 2
40379: EQUAL
40380: AND
40381: IFFALSE 40398
// bpoints := bpoints * 1.2 ;
40383: LD_ADDR_VAR 0 10
40387: PUSH
40388: LD_VAR 0 10
40392: PUSH
40393: LD_REAL  1.20000000000000E+0000
40396: MUL
40397: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
40398: LD_VAR 0 6
40402: PPUSH
40403: CALL_OW 264
40407: PUSH
40408: LD_INT 6
40410: PUSH
40411: LD_INT 46
40413: PUSH
40414: LD_INT 47
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: LIST
40421: IN
40422: IFFALSE 40439
// bpoints := bpoints * 1.2 ;
40424: LD_ADDR_VAR 0 10
40428: PUSH
40429: LD_VAR 0 10
40433: PUSH
40434: LD_REAL  1.20000000000000E+0000
40437: MUL
40438: ST_TO_ADDR
// end ; unit_building :
40439: GO 40453
40441: LD_INT 3
40443: DOUBLE
40444: EQUAL
40445: IFTRUE 40449
40447: GO 40452
40449: POP
// ; end ;
40450: GO 40453
40452: POP
// for j = 1 to 3 do
40453: LD_ADDR_VAR 0 7
40457: PUSH
40458: DOUBLE
40459: LD_INT 1
40461: DEC
40462: ST_TO_ADDR
40463: LD_INT 3
40465: PUSH
40466: FOR_TO
40467: IFFALSE 40520
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
40469: LD_ADDR_VAR 0 5
40473: PUSH
40474: LD_VAR 0 5
40478: PPUSH
40479: LD_VAR 0 7
40483: PPUSH
40484: LD_VAR 0 5
40488: PUSH
40489: LD_VAR 0 7
40493: ARRAY
40494: PUSH
40495: LD_VAR 0 9
40499: PUSH
40500: LD_VAR 0 7
40504: ARRAY
40505: PUSH
40506: LD_VAR 0 10
40510: MUL
40511: PLUS
40512: PPUSH
40513: CALL_OW 1
40517: ST_TO_ADDR
40518: GO 40466
40520: POP
40521: POP
// end ;
40522: GO 38999
40524: POP
40525: POP
// result := Replace ( result , 4 , tmp ) ;
40526: LD_ADDR_VAR 0 5
40530: PUSH
40531: LD_VAR 0 5
40535: PPUSH
40536: LD_INT 4
40538: PPUSH
40539: LD_VAR 0 8
40543: PPUSH
40544: CALL_OW 1
40548: ST_TO_ADDR
// end ;
40549: LD_VAR 0 5
40553: RET
// export function DangerAtRange ( unit , range ) ; begin
40554: LD_INT 0
40556: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
40557: LD_ADDR_VAR 0 3
40561: PUSH
40562: LD_VAR 0 1
40566: PPUSH
40567: CALL_OW 255
40571: PPUSH
40572: LD_VAR 0 1
40576: PPUSH
40577: CALL_OW 250
40581: PPUSH
40582: LD_VAR 0 1
40586: PPUSH
40587: CALL_OW 251
40591: PPUSH
40592: LD_VAR 0 2
40596: PPUSH
40597: CALL 38851 0 4
40601: ST_TO_ADDR
// end ;
40602: LD_VAR 0 3
40606: RET
// export function DangerInArea ( side , area ) ; begin
40607: LD_INT 0
40609: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
40610: LD_ADDR_VAR 0 3
40614: PUSH
40615: LD_VAR 0 2
40619: PPUSH
40620: LD_INT 81
40622: PUSH
40623: LD_VAR 0 1
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: PPUSH
40632: CALL_OW 70
40636: ST_TO_ADDR
// end ;
40637: LD_VAR 0 3
40641: RET
// export function IsExtension ( b ) ; begin
40642: LD_INT 0
40644: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
40645: LD_ADDR_VAR 0 2
40649: PUSH
40650: LD_VAR 0 1
40654: PUSH
40655: LD_INT 23
40657: PUSH
40658: LD_INT 20
40660: PUSH
40661: LD_INT 22
40663: PUSH
40664: LD_INT 17
40666: PUSH
40667: LD_INT 24
40669: PUSH
40670: LD_INT 21
40672: PUSH
40673: LD_INT 19
40675: PUSH
40676: LD_INT 16
40678: PUSH
40679: LD_INT 25
40681: PUSH
40682: LD_INT 18
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: LIST
40689: LIST
40690: LIST
40691: LIST
40692: LIST
40693: LIST
40694: LIST
40695: LIST
40696: IN
40697: ST_TO_ADDR
// end ;
40698: LD_VAR 0 2
40702: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
40703: LD_INT 0
40705: PPUSH
40706: PPUSH
40707: PPUSH
// result := [ ] ;
40708: LD_ADDR_VAR 0 4
40712: PUSH
40713: EMPTY
40714: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
40715: LD_ADDR_VAR 0 5
40719: PUSH
40720: LD_VAR 0 2
40724: PPUSH
40725: LD_INT 21
40727: PUSH
40728: LD_INT 3
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PPUSH
40735: CALL_OW 70
40739: ST_TO_ADDR
// if not tmp then
40740: LD_VAR 0 5
40744: NOT
40745: IFFALSE 40749
// exit ;
40747: GO 40813
// if checkLink then
40749: LD_VAR 0 3
40753: IFFALSE 40803
// begin for i in tmp do
40755: LD_ADDR_VAR 0 6
40759: PUSH
40760: LD_VAR 0 5
40764: PUSH
40765: FOR_IN
40766: IFFALSE 40801
// if GetBase ( i ) <> base then
40768: LD_VAR 0 6
40772: PPUSH
40773: CALL_OW 274
40777: PUSH
40778: LD_VAR 0 1
40782: NONEQUAL
40783: IFFALSE 40799
// ComLinkToBase ( base , i ) ;
40785: LD_VAR 0 1
40789: PPUSH
40790: LD_VAR 0 6
40794: PPUSH
40795: CALL_OW 169
40799: GO 40765
40801: POP
40802: POP
// end ; result := tmp ;
40803: LD_ADDR_VAR 0 4
40807: PUSH
40808: LD_VAR 0 5
40812: ST_TO_ADDR
// end ;
40813: LD_VAR 0 4
40817: RET
// export function ComComplete ( units , b ) ; var i ; begin
40818: LD_INT 0
40820: PPUSH
40821: PPUSH
// if not units then
40822: LD_VAR 0 1
40826: NOT
40827: IFFALSE 40831
// exit ;
40829: GO 40921
// for i in units do
40831: LD_ADDR_VAR 0 4
40835: PUSH
40836: LD_VAR 0 1
40840: PUSH
40841: FOR_IN
40842: IFFALSE 40919
// if BuildingStatus ( b ) = bs_build then
40844: LD_VAR 0 2
40848: PPUSH
40849: CALL_OW 461
40853: PUSH
40854: LD_INT 1
40856: EQUAL
40857: IFFALSE 40917
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40859: LD_VAR 0 4
40863: PPUSH
40864: LD_STRING h
40866: PUSH
40867: LD_VAR 0 2
40871: PPUSH
40872: CALL_OW 250
40876: PUSH
40877: LD_VAR 0 2
40881: PPUSH
40882: CALL_OW 251
40886: PUSH
40887: LD_VAR 0 2
40891: PUSH
40892: LD_INT 0
40894: PUSH
40895: LD_INT 0
40897: PUSH
40898: LD_INT 0
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: PUSH
40910: EMPTY
40911: LIST
40912: PPUSH
40913: CALL_OW 446
40917: GO 40841
40919: POP
40920: POP
// end ;
40921: LD_VAR 0 3
40925: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40926: LD_INT 0
40928: PPUSH
40929: PPUSH
40930: PPUSH
40931: PPUSH
40932: PPUSH
40933: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
40934: LD_VAR 0 1
40938: NOT
40939: PUSH
40940: LD_VAR 0 1
40944: PPUSH
40945: CALL_OW 263
40949: PUSH
40950: LD_INT 2
40952: NONEQUAL
40953: OR
40954: IFFALSE 40958
// exit ;
40956: GO 41274
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
40958: LD_ADDR_VAR 0 6
40962: PUSH
40963: LD_INT 22
40965: PUSH
40966: LD_VAR 0 1
40970: PPUSH
40971: CALL_OW 255
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: LD_INT 2
40982: PUSH
40983: LD_INT 30
40985: PUSH
40986: LD_INT 36
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 34
40995: PUSH
40996: LD_INT 31
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: LIST
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: PPUSH
41012: CALL_OW 69
41016: ST_TO_ADDR
// if not tmp then
41017: LD_VAR 0 6
41021: NOT
41022: IFFALSE 41026
// exit ;
41024: GO 41274
// result := [ ] ;
41026: LD_ADDR_VAR 0 2
41030: PUSH
41031: EMPTY
41032: ST_TO_ADDR
// for i in tmp do
41033: LD_ADDR_VAR 0 3
41037: PUSH
41038: LD_VAR 0 6
41042: PUSH
41043: FOR_IN
41044: IFFALSE 41115
// begin t := UnitsInside ( i ) ;
41046: LD_ADDR_VAR 0 4
41050: PUSH
41051: LD_VAR 0 3
41055: PPUSH
41056: CALL_OW 313
41060: ST_TO_ADDR
// if t then
41061: LD_VAR 0 4
41065: IFFALSE 41113
// for j in t do
41067: LD_ADDR_VAR 0 7
41071: PUSH
41072: LD_VAR 0 4
41076: PUSH
41077: FOR_IN
41078: IFFALSE 41111
// result := Replace ( result , result + 1 , j ) ;
41080: LD_ADDR_VAR 0 2
41084: PUSH
41085: LD_VAR 0 2
41089: PPUSH
41090: LD_VAR 0 2
41094: PUSH
41095: LD_INT 1
41097: PLUS
41098: PPUSH
41099: LD_VAR 0 7
41103: PPUSH
41104: CALL_OW 1
41108: ST_TO_ADDR
41109: GO 41077
41111: POP
41112: POP
// end ;
41113: GO 41043
41115: POP
41116: POP
// if not result then
41117: LD_VAR 0 2
41121: NOT
41122: IFFALSE 41126
// exit ;
41124: GO 41274
// mech := result [ 1 ] ;
41126: LD_ADDR_VAR 0 5
41130: PUSH
41131: LD_VAR 0 2
41135: PUSH
41136: LD_INT 1
41138: ARRAY
41139: ST_TO_ADDR
// if result > 1 then
41140: LD_VAR 0 2
41144: PUSH
41145: LD_INT 1
41147: GREATER
41148: IFFALSE 41260
// begin for i = 2 to result do
41150: LD_ADDR_VAR 0 3
41154: PUSH
41155: DOUBLE
41156: LD_INT 2
41158: DEC
41159: ST_TO_ADDR
41160: LD_VAR 0 2
41164: PUSH
41165: FOR_TO
41166: IFFALSE 41258
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
41168: LD_ADDR_VAR 0 4
41172: PUSH
41173: LD_VAR 0 2
41177: PUSH
41178: LD_VAR 0 3
41182: ARRAY
41183: PPUSH
41184: LD_INT 3
41186: PPUSH
41187: CALL_OW 259
41191: PUSH
41192: LD_VAR 0 2
41196: PUSH
41197: LD_VAR 0 3
41201: ARRAY
41202: PPUSH
41203: CALL_OW 432
41207: MINUS
41208: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
41209: LD_VAR 0 4
41213: PUSH
41214: LD_VAR 0 5
41218: PPUSH
41219: LD_INT 3
41221: PPUSH
41222: CALL_OW 259
41226: PUSH
41227: LD_VAR 0 5
41231: PPUSH
41232: CALL_OW 432
41236: MINUS
41237: GREATEREQUAL
41238: IFFALSE 41256
// mech := result [ i ] ;
41240: LD_ADDR_VAR 0 5
41244: PUSH
41245: LD_VAR 0 2
41249: PUSH
41250: LD_VAR 0 3
41254: ARRAY
41255: ST_TO_ADDR
// end ;
41256: GO 41165
41258: POP
41259: POP
// end ; ComLinkTo ( vehicle , mech ) ;
41260: LD_VAR 0 1
41264: PPUSH
41265: LD_VAR 0 5
41269: PPUSH
41270: CALL_OW 135
// end ;
41274: LD_VAR 0 2
41278: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
41279: LD_INT 0
41281: PPUSH
41282: PPUSH
41283: PPUSH
41284: PPUSH
41285: PPUSH
41286: PPUSH
41287: PPUSH
41288: PPUSH
41289: PPUSH
41290: PPUSH
41291: PPUSH
41292: PPUSH
41293: PPUSH
// result := [ ] ;
41294: LD_ADDR_VAR 0 7
41298: PUSH
41299: EMPTY
41300: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
41301: LD_VAR 0 1
41305: PPUSH
41306: CALL_OW 266
41310: PUSH
41311: LD_INT 0
41313: PUSH
41314: LD_INT 1
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: IN
41321: NOT
41322: IFFALSE 41326
// exit ;
41324: GO 42960
// if name then
41326: LD_VAR 0 3
41330: IFFALSE 41346
// SetBName ( base_dep , name ) ;
41332: LD_VAR 0 1
41336: PPUSH
41337: LD_VAR 0 3
41341: PPUSH
41342: CALL_OW 500
// base := GetBase ( base_dep ) ;
41346: LD_ADDR_VAR 0 15
41350: PUSH
41351: LD_VAR 0 1
41355: PPUSH
41356: CALL_OW 274
41360: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
41361: LD_ADDR_VAR 0 16
41365: PUSH
41366: LD_VAR 0 1
41370: PPUSH
41371: CALL_OW 255
41375: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
41376: LD_ADDR_VAR 0 17
41380: PUSH
41381: LD_VAR 0 1
41385: PPUSH
41386: CALL_OW 248
41390: ST_TO_ADDR
// if sources then
41391: LD_VAR 0 5
41395: IFFALSE 41442
// for i = 1 to 3 do
41397: LD_ADDR_VAR 0 8
41401: PUSH
41402: DOUBLE
41403: LD_INT 1
41405: DEC
41406: ST_TO_ADDR
41407: LD_INT 3
41409: PUSH
41410: FOR_TO
41411: IFFALSE 41440
// AddResourceType ( base , i , sources [ i ] ) ;
41413: LD_VAR 0 15
41417: PPUSH
41418: LD_VAR 0 8
41422: PPUSH
41423: LD_VAR 0 5
41427: PUSH
41428: LD_VAR 0 8
41432: ARRAY
41433: PPUSH
41434: CALL_OW 276
41438: GO 41410
41440: POP
41441: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
41442: LD_ADDR_VAR 0 18
41446: PUSH
41447: LD_VAR 0 15
41451: PPUSH
41452: LD_VAR 0 2
41456: PPUSH
41457: LD_INT 1
41459: PPUSH
41460: CALL 40703 0 3
41464: ST_TO_ADDR
// InitHc ;
41465: CALL_OW 19
// InitUc ;
41469: CALL_OW 18
// uc_side := side ;
41473: LD_ADDR_OWVAR 20
41477: PUSH
41478: LD_VAR 0 16
41482: ST_TO_ADDR
// uc_nation := nation ;
41483: LD_ADDR_OWVAR 21
41487: PUSH
41488: LD_VAR 0 17
41492: ST_TO_ADDR
// if buildings then
41493: LD_VAR 0 18
41497: IFFALSE 42819
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
41499: LD_ADDR_VAR 0 19
41503: PUSH
41504: LD_VAR 0 18
41508: PPUSH
41509: LD_INT 2
41511: PUSH
41512: LD_INT 30
41514: PUSH
41515: LD_INT 29
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: PUSH
41522: LD_INT 30
41524: PUSH
41525: LD_INT 30
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: LIST
41536: PPUSH
41537: CALL_OW 72
41541: ST_TO_ADDR
// if tmp then
41542: LD_VAR 0 19
41546: IFFALSE 41594
// for i in tmp do
41548: LD_ADDR_VAR 0 8
41552: PUSH
41553: LD_VAR 0 19
41557: PUSH
41558: FOR_IN
41559: IFFALSE 41592
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
41561: LD_VAR 0 8
41565: PPUSH
41566: CALL_OW 250
41570: PPUSH
41571: LD_VAR 0 8
41575: PPUSH
41576: CALL_OW 251
41580: PPUSH
41581: LD_VAR 0 16
41585: PPUSH
41586: CALL_OW 441
41590: GO 41558
41592: POP
41593: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
41594: LD_VAR 0 18
41598: PPUSH
41599: LD_INT 2
41601: PUSH
41602: LD_INT 30
41604: PUSH
41605: LD_INT 32
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 30
41614: PUSH
41615: LD_INT 33
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: LIST
41626: PPUSH
41627: CALL_OW 72
41631: IFFALSE 41719
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
41633: LD_ADDR_VAR 0 8
41637: PUSH
41638: LD_VAR 0 18
41642: PPUSH
41643: LD_INT 2
41645: PUSH
41646: LD_INT 30
41648: PUSH
41649: LD_INT 32
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: PUSH
41656: LD_INT 30
41658: PUSH
41659: LD_INT 33
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: LIST
41670: PPUSH
41671: CALL_OW 72
41675: PUSH
41676: FOR_IN
41677: IFFALSE 41717
// begin if not GetBWeapon ( i ) then
41679: LD_VAR 0 8
41683: PPUSH
41684: CALL_OW 269
41688: NOT
41689: IFFALSE 41715
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
41691: LD_VAR 0 8
41695: PPUSH
41696: LD_VAR 0 8
41700: PPUSH
41701: LD_VAR 0 2
41705: PPUSH
41706: CALL 42965 0 2
41710: PPUSH
41711: CALL_OW 431
// end ;
41715: GO 41676
41717: POP
41718: POP
// end ; for i = 1 to personel do
41719: LD_ADDR_VAR 0 8
41723: PUSH
41724: DOUBLE
41725: LD_INT 1
41727: DEC
41728: ST_TO_ADDR
41729: LD_VAR 0 6
41733: PUSH
41734: FOR_TO
41735: IFFALSE 42799
// begin if i > 4 then
41737: LD_VAR 0 8
41741: PUSH
41742: LD_INT 4
41744: GREATER
41745: IFFALSE 41749
// break ;
41747: GO 42799
// case i of 1 :
41749: LD_VAR 0 8
41753: PUSH
41754: LD_INT 1
41756: DOUBLE
41757: EQUAL
41758: IFTRUE 41762
41760: GO 41842
41762: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
41763: LD_ADDR_VAR 0 12
41767: PUSH
41768: LD_VAR 0 18
41772: PPUSH
41773: LD_INT 22
41775: PUSH
41776: LD_VAR 0 16
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 58
41787: PUSH
41788: EMPTY
41789: LIST
41790: PUSH
41791: LD_INT 2
41793: PUSH
41794: LD_INT 30
41796: PUSH
41797: LD_INT 32
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 30
41806: PUSH
41807: LD_INT 4
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: PUSH
41814: LD_INT 30
41816: PUSH
41817: LD_INT 5
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: LIST
41834: PPUSH
41835: CALL_OW 72
41839: ST_TO_ADDR
41840: GO 42064
41842: LD_INT 2
41844: DOUBLE
41845: EQUAL
41846: IFTRUE 41850
41848: GO 41912
41850: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
41851: LD_ADDR_VAR 0 12
41855: PUSH
41856: LD_VAR 0 18
41860: PPUSH
41861: LD_INT 22
41863: PUSH
41864: LD_VAR 0 16
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: LD_INT 2
41875: PUSH
41876: LD_INT 30
41878: PUSH
41879: LD_INT 0
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: LD_INT 30
41888: PUSH
41889: LD_INT 1
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: LIST
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PPUSH
41905: CALL_OW 72
41909: ST_TO_ADDR
41910: GO 42064
41912: LD_INT 3
41914: DOUBLE
41915: EQUAL
41916: IFTRUE 41920
41918: GO 41982
41920: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41921: LD_ADDR_VAR 0 12
41925: PUSH
41926: LD_VAR 0 18
41930: PPUSH
41931: LD_INT 22
41933: PUSH
41934: LD_VAR 0 16
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 2
41945: PUSH
41946: LD_INT 30
41948: PUSH
41949: LD_INT 2
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: PUSH
41956: LD_INT 30
41958: PUSH
41959: LD_INT 3
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: LIST
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PPUSH
41975: CALL_OW 72
41979: ST_TO_ADDR
41980: GO 42064
41982: LD_INT 4
41984: DOUBLE
41985: EQUAL
41986: IFTRUE 41990
41988: GO 42063
41990: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
41991: LD_ADDR_VAR 0 12
41995: PUSH
41996: LD_VAR 0 18
42000: PPUSH
42001: LD_INT 22
42003: PUSH
42004: LD_VAR 0 16
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 2
42015: PUSH
42016: LD_INT 30
42018: PUSH
42019: LD_INT 6
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: LD_INT 30
42028: PUSH
42029: LD_INT 7
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: LD_INT 30
42038: PUSH
42039: LD_INT 8
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: PPUSH
42056: CALL_OW 72
42060: ST_TO_ADDR
42061: GO 42064
42063: POP
// if i = 1 then
42064: LD_VAR 0 8
42068: PUSH
42069: LD_INT 1
42071: EQUAL
42072: IFFALSE 42183
// begin tmp := [ ] ;
42074: LD_ADDR_VAR 0 19
42078: PUSH
42079: EMPTY
42080: ST_TO_ADDR
// for j in f do
42081: LD_ADDR_VAR 0 9
42085: PUSH
42086: LD_VAR 0 12
42090: PUSH
42091: FOR_IN
42092: IFFALSE 42165
// if GetBType ( j ) = b_bunker then
42094: LD_VAR 0 9
42098: PPUSH
42099: CALL_OW 266
42103: PUSH
42104: LD_INT 32
42106: EQUAL
42107: IFFALSE 42134
// tmp := Insert ( tmp , 1 , j ) else
42109: LD_ADDR_VAR 0 19
42113: PUSH
42114: LD_VAR 0 19
42118: PPUSH
42119: LD_INT 1
42121: PPUSH
42122: LD_VAR 0 9
42126: PPUSH
42127: CALL_OW 2
42131: ST_TO_ADDR
42132: GO 42163
// tmp := Insert ( tmp , tmp + 1 , j ) ;
42134: LD_ADDR_VAR 0 19
42138: PUSH
42139: LD_VAR 0 19
42143: PPUSH
42144: LD_VAR 0 19
42148: PUSH
42149: LD_INT 1
42151: PLUS
42152: PPUSH
42153: LD_VAR 0 9
42157: PPUSH
42158: CALL_OW 2
42162: ST_TO_ADDR
42163: GO 42091
42165: POP
42166: POP
// if tmp then
42167: LD_VAR 0 19
42171: IFFALSE 42183
// f := tmp ;
42173: LD_ADDR_VAR 0 12
42177: PUSH
42178: LD_VAR 0 19
42182: ST_TO_ADDR
// end ; x := personel [ i ] ;
42183: LD_ADDR_VAR 0 13
42187: PUSH
42188: LD_VAR 0 6
42192: PUSH
42193: LD_VAR 0 8
42197: ARRAY
42198: ST_TO_ADDR
// if x = - 1 then
42199: LD_VAR 0 13
42203: PUSH
42204: LD_INT 1
42206: NEG
42207: EQUAL
42208: IFFALSE 42417
// begin for j in f do
42210: LD_ADDR_VAR 0 9
42214: PUSH
42215: LD_VAR 0 12
42219: PUSH
42220: FOR_IN
42221: IFFALSE 42413
// repeat InitHc ;
42223: CALL_OW 19
// if GetBType ( j ) = b_barracks then
42227: LD_VAR 0 9
42231: PPUSH
42232: CALL_OW 266
42236: PUSH
42237: LD_INT 5
42239: EQUAL
42240: IFFALSE 42310
// begin if UnitsInside ( j ) < 3 then
42242: LD_VAR 0 9
42246: PPUSH
42247: CALL_OW 313
42251: PUSH
42252: LD_INT 3
42254: LESS
42255: IFFALSE 42291
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42257: LD_INT 0
42259: PPUSH
42260: LD_INT 5
42262: PUSH
42263: LD_INT 8
42265: PUSH
42266: LD_INT 9
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: LIST
42273: PUSH
42274: LD_VAR 0 17
42278: ARRAY
42279: PPUSH
42280: LD_VAR 0 4
42284: PPUSH
42285: CALL_OW 380
42289: GO 42308
// PrepareHuman ( false , i , skill ) ;
42291: LD_INT 0
42293: PPUSH
42294: LD_VAR 0 8
42298: PPUSH
42299: LD_VAR 0 4
42303: PPUSH
42304: CALL_OW 380
// end else
42308: GO 42327
// PrepareHuman ( false , i , skill ) ;
42310: LD_INT 0
42312: PPUSH
42313: LD_VAR 0 8
42317: PPUSH
42318: LD_VAR 0 4
42322: PPUSH
42323: CALL_OW 380
// un := CreateHuman ;
42327: LD_ADDR_VAR 0 14
42331: PUSH
42332: CALL_OW 44
42336: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42337: LD_ADDR_VAR 0 7
42341: PUSH
42342: LD_VAR 0 7
42346: PPUSH
42347: LD_INT 1
42349: PPUSH
42350: LD_VAR 0 14
42354: PPUSH
42355: CALL_OW 2
42359: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
42360: LD_VAR 0 14
42364: PPUSH
42365: LD_VAR 0 9
42369: PPUSH
42370: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
42374: LD_VAR 0 9
42378: PPUSH
42379: CALL_OW 313
42383: PUSH
42384: LD_INT 6
42386: EQUAL
42387: PUSH
42388: LD_VAR 0 9
42392: PPUSH
42393: CALL_OW 266
42397: PUSH
42398: LD_INT 32
42400: PUSH
42401: LD_INT 31
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: IN
42408: OR
42409: IFFALSE 42223
42411: GO 42220
42413: POP
42414: POP
// end else
42415: GO 42797
// for j = 1 to x do
42417: LD_ADDR_VAR 0 9
42421: PUSH
42422: DOUBLE
42423: LD_INT 1
42425: DEC
42426: ST_TO_ADDR
42427: LD_VAR 0 13
42431: PUSH
42432: FOR_TO
42433: IFFALSE 42795
// begin InitHc ;
42435: CALL_OW 19
// if not f then
42439: LD_VAR 0 12
42443: NOT
42444: IFFALSE 42533
// begin PrepareHuman ( false , i , skill ) ;
42446: LD_INT 0
42448: PPUSH
42449: LD_VAR 0 8
42453: PPUSH
42454: LD_VAR 0 4
42458: PPUSH
42459: CALL_OW 380
// un := CreateHuman ;
42463: LD_ADDR_VAR 0 14
42467: PUSH
42468: CALL_OW 44
42472: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42473: LD_ADDR_VAR 0 7
42477: PUSH
42478: LD_VAR 0 7
42482: PPUSH
42483: LD_INT 1
42485: PPUSH
42486: LD_VAR 0 14
42490: PPUSH
42491: CALL_OW 2
42495: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42496: LD_VAR 0 14
42500: PPUSH
42501: LD_VAR 0 1
42505: PPUSH
42506: CALL_OW 250
42510: PPUSH
42511: LD_VAR 0 1
42515: PPUSH
42516: CALL_OW 251
42520: PPUSH
42521: LD_INT 10
42523: PPUSH
42524: LD_INT 0
42526: PPUSH
42527: CALL_OW 50
// continue ;
42531: GO 42432
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
42533: LD_VAR 0 12
42537: PUSH
42538: LD_INT 1
42540: ARRAY
42541: PPUSH
42542: CALL_OW 313
42546: PUSH
42547: LD_VAR 0 12
42551: PUSH
42552: LD_INT 1
42554: ARRAY
42555: PPUSH
42556: CALL_OW 266
42560: PUSH
42561: LD_INT 32
42563: PUSH
42564: LD_INT 31
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: IN
42571: AND
42572: PUSH
42573: LD_VAR 0 12
42577: PUSH
42578: LD_INT 1
42580: ARRAY
42581: PPUSH
42582: CALL_OW 313
42586: PUSH
42587: LD_INT 6
42589: EQUAL
42590: OR
42591: IFFALSE 42611
// f := Delete ( f , 1 ) ;
42593: LD_ADDR_VAR 0 12
42597: PUSH
42598: LD_VAR 0 12
42602: PPUSH
42603: LD_INT 1
42605: PPUSH
42606: CALL_OW 3
42610: ST_TO_ADDR
// if not f then
42611: LD_VAR 0 12
42615: NOT
42616: IFFALSE 42634
// begin x := x + 2 ;
42618: LD_ADDR_VAR 0 13
42622: PUSH
42623: LD_VAR 0 13
42627: PUSH
42628: LD_INT 2
42630: PLUS
42631: ST_TO_ADDR
// continue ;
42632: GO 42432
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
42634: LD_VAR 0 12
42638: PUSH
42639: LD_INT 1
42641: ARRAY
42642: PPUSH
42643: CALL_OW 266
42647: PUSH
42648: LD_INT 5
42650: EQUAL
42651: IFFALSE 42725
// begin if UnitsInside ( f [ 1 ] ) < 3 then
42653: LD_VAR 0 12
42657: PUSH
42658: LD_INT 1
42660: ARRAY
42661: PPUSH
42662: CALL_OW 313
42666: PUSH
42667: LD_INT 3
42669: LESS
42670: IFFALSE 42706
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42672: LD_INT 0
42674: PPUSH
42675: LD_INT 5
42677: PUSH
42678: LD_INT 8
42680: PUSH
42681: LD_INT 9
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: LIST
42688: PUSH
42689: LD_VAR 0 17
42693: ARRAY
42694: PPUSH
42695: LD_VAR 0 4
42699: PPUSH
42700: CALL_OW 380
42704: GO 42723
// PrepareHuman ( false , i , skill ) ;
42706: LD_INT 0
42708: PPUSH
42709: LD_VAR 0 8
42713: PPUSH
42714: LD_VAR 0 4
42718: PPUSH
42719: CALL_OW 380
// end else
42723: GO 42742
// PrepareHuman ( false , i , skill ) ;
42725: LD_INT 0
42727: PPUSH
42728: LD_VAR 0 8
42732: PPUSH
42733: LD_VAR 0 4
42737: PPUSH
42738: CALL_OW 380
// un := CreateHuman ;
42742: LD_ADDR_VAR 0 14
42746: PUSH
42747: CALL_OW 44
42751: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42752: LD_ADDR_VAR 0 7
42756: PUSH
42757: LD_VAR 0 7
42761: PPUSH
42762: LD_INT 1
42764: PPUSH
42765: LD_VAR 0 14
42769: PPUSH
42770: CALL_OW 2
42774: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
42775: LD_VAR 0 14
42779: PPUSH
42780: LD_VAR 0 12
42784: PUSH
42785: LD_INT 1
42787: ARRAY
42788: PPUSH
42789: CALL_OW 52
// end ;
42793: GO 42432
42795: POP
42796: POP
// end ;
42797: GO 41734
42799: POP
42800: POP
// result := result ^ buildings ;
42801: LD_ADDR_VAR 0 7
42805: PUSH
42806: LD_VAR 0 7
42810: PUSH
42811: LD_VAR 0 18
42815: ADD
42816: ST_TO_ADDR
// end else
42817: GO 42960
// begin for i = 1 to personel do
42819: LD_ADDR_VAR 0 8
42823: PUSH
42824: DOUBLE
42825: LD_INT 1
42827: DEC
42828: ST_TO_ADDR
42829: LD_VAR 0 6
42833: PUSH
42834: FOR_TO
42835: IFFALSE 42958
// begin if i > 4 then
42837: LD_VAR 0 8
42841: PUSH
42842: LD_INT 4
42844: GREATER
42845: IFFALSE 42849
// break ;
42847: GO 42958
// x := personel [ i ] ;
42849: LD_ADDR_VAR 0 13
42853: PUSH
42854: LD_VAR 0 6
42858: PUSH
42859: LD_VAR 0 8
42863: ARRAY
42864: ST_TO_ADDR
// if x = - 1 then
42865: LD_VAR 0 13
42869: PUSH
42870: LD_INT 1
42872: NEG
42873: EQUAL
42874: IFFALSE 42878
// continue ;
42876: GO 42834
// PrepareHuman ( false , i , skill ) ;
42878: LD_INT 0
42880: PPUSH
42881: LD_VAR 0 8
42885: PPUSH
42886: LD_VAR 0 4
42890: PPUSH
42891: CALL_OW 380
// un := CreateHuman ;
42895: LD_ADDR_VAR 0 14
42899: PUSH
42900: CALL_OW 44
42904: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42905: LD_VAR 0 14
42909: PPUSH
42910: LD_VAR 0 1
42914: PPUSH
42915: CALL_OW 250
42919: PPUSH
42920: LD_VAR 0 1
42924: PPUSH
42925: CALL_OW 251
42929: PPUSH
42930: LD_INT 10
42932: PPUSH
42933: LD_INT 0
42935: PPUSH
42936: CALL_OW 50
// result := result ^ un ;
42940: LD_ADDR_VAR 0 7
42944: PUSH
42945: LD_VAR 0 7
42949: PUSH
42950: LD_VAR 0 14
42954: ADD
42955: ST_TO_ADDR
// end ;
42956: GO 42834
42958: POP
42959: POP
// end ; end ;
42960: LD_VAR 0 7
42964: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
42965: LD_INT 0
42967: PPUSH
42968: PPUSH
42969: PPUSH
42970: PPUSH
42971: PPUSH
42972: PPUSH
42973: PPUSH
42974: PPUSH
42975: PPUSH
42976: PPUSH
42977: PPUSH
42978: PPUSH
42979: PPUSH
42980: PPUSH
42981: PPUSH
42982: PPUSH
// result := false ;
42983: LD_ADDR_VAR 0 3
42987: PUSH
42988: LD_INT 0
42990: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
42991: LD_VAR 0 1
42995: NOT
42996: PUSH
42997: LD_VAR 0 1
43001: PPUSH
43002: CALL_OW 266
43006: PUSH
43007: LD_INT 32
43009: PUSH
43010: LD_INT 33
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: IN
43017: NOT
43018: OR
43019: IFFALSE 43023
// exit ;
43021: GO 44132
// nat := GetNation ( tower ) ;
43023: LD_ADDR_VAR 0 12
43027: PUSH
43028: LD_VAR 0 1
43032: PPUSH
43033: CALL_OW 248
43037: ST_TO_ADDR
// side := GetSide ( tower ) ;
43038: LD_ADDR_VAR 0 16
43042: PUSH
43043: LD_VAR 0 1
43047: PPUSH
43048: CALL_OW 255
43052: ST_TO_ADDR
// x := GetX ( tower ) ;
43053: LD_ADDR_VAR 0 10
43057: PUSH
43058: LD_VAR 0 1
43062: PPUSH
43063: CALL_OW 250
43067: ST_TO_ADDR
// y := GetY ( tower ) ;
43068: LD_ADDR_VAR 0 11
43072: PUSH
43073: LD_VAR 0 1
43077: PPUSH
43078: CALL_OW 251
43082: ST_TO_ADDR
// if not x or not y then
43083: LD_VAR 0 10
43087: NOT
43088: PUSH
43089: LD_VAR 0 11
43093: NOT
43094: OR
43095: IFFALSE 43099
// exit ;
43097: GO 44132
// weapon := 0 ;
43099: LD_ADDR_VAR 0 18
43103: PUSH
43104: LD_INT 0
43106: ST_TO_ADDR
// fac_list := [ ] ;
43107: LD_ADDR_VAR 0 17
43111: PUSH
43112: EMPTY
43113: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
43114: LD_ADDR_VAR 0 6
43118: PUSH
43119: LD_VAR 0 1
43123: PPUSH
43124: CALL_OW 274
43128: PPUSH
43129: LD_VAR 0 2
43133: PPUSH
43134: LD_INT 0
43136: PPUSH
43137: CALL 40703 0 3
43141: PPUSH
43142: LD_INT 30
43144: PUSH
43145: LD_INT 3
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PPUSH
43152: CALL_OW 72
43156: ST_TO_ADDR
// if not factories then
43157: LD_VAR 0 6
43161: NOT
43162: IFFALSE 43166
// exit ;
43164: GO 44132
// for i in factories do
43166: LD_ADDR_VAR 0 8
43170: PUSH
43171: LD_VAR 0 6
43175: PUSH
43176: FOR_IN
43177: IFFALSE 43202
// fac_list := fac_list union AvailableWeaponList ( i ) ;
43179: LD_ADDR_VAR 0 17
43183: PUSH
43184: LD_VAR 0 17
43188: PUSH
43189: LD_VAR 0 8
43193: PPUSH
43194: CALL_OW 478
43198: UNION
43199: ST_TO_ADDR
43200: GO 43176
43202: POP
43203: POP
// if not fac_list then
43204: LD_VAR 0 17
43208: NOT
43209: IFFALSE 43213
// exit ;
43211: GO 44132
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
43213: LD_ADDR_VAR 0 5
43217: PUSH
43218: LD_INT 4
43220: PUSH
43221: LD_INT 5
43223: PUSH
43224: LD_INT 9
43226: PUSH
43227: LD_INT 10
43229: PUSH
43230: LD_INT 6
43232: PUSH
43233: LD_INT 7
43235: PUSH
43236: LD_INT 11
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: PUSH
43248: LD_INT 27
43250: PUSH
43251: LD_INT 28
43253: PUSH
43254: LD_INT 26
43256: PUSH
43257: LD_INT 30
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 43
43268: PUSH
43269: LD_INT 44
43271: PUSH
43272: LD_INT 46
43274: PUSH
43275: LD_INT 45
43277: PUSH
43278: LD_INT 47
43280: PUSH
43281: LD_INT 49
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: LIST
43288: LIST
43289: LIST
43290: LIST
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: LIST
43296: PUSH
43297: LD_VAR 0 12
43301: ARRAY
43302: ST_TO_ADDR
// list := list isect fac_list ;
43303: LD_ADDR_VAR 0 5
43307: PUSH
43308: LD_VAR 0 5
43312: PUSH
43313: LD_VAR 0 17
43317: ISECT
43318: ST_TO_ADDR
// if not list then
43319: LD_VAR 0 5
43323: NOT
43324: IFFALSE 43328
// exit ;
43326: GO 44132
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
43328: LD_VAR 0 12
43332: PUSH
43333: LD_INT 3
43335: EQUAL
43336: PUSH
43337: LD_INT 49
43339: PUSH
43340: LD_VAR 0 5
43344: IN
43345: AND
43346: PUSH
43347: LD_INT 31
43349: PPUSH
43350: LD_VAR 0 16
43354: PPUSH
43355: CALL_OW 321
43359: PUSH
43360: LD_INT 2
43362: EQUAL
43363: AND
43364: IFFALSE 43424
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
43366: LD_INT 22
43368: PUSH
43369: LD_VAR 0 16
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 35
43380: PUSH
43381: LD_INT 49
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 91
43390: PUSH
43391: LD_VAR 0 1
43395: PUSH
43396: LD_INT 10
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: LIST
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: LIST
43408: PPUSH
43409: CALL_OW 69
43413: NOT
43414: IFFALSE 43424
// weapon := ru_time_lapser ;
43416: LD_ADDR_VAR 0 18
43420: PUSH
43421: LD_INT 49
43423: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
43424: LD_VAR 0 12
43428: PUSH
43429: LD_INT 1
43431: PUSH
43432: LD_INT 2
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: IN
43439: PUSH
43440: LD_INT 11
43442: PUSH
43443: LD_VAR 0 5
43447: IN
43448: PUSH
43449: LD_INT 30
43451: PUSH
43452: LD_VAR 0 5
43456: IN
43457: OR
43458: AND
43459: PUSH
43460: LD_INT 6
43462: PPUSH
43463: LD_VAR 0 16
43467: PPUSH
43468: CALL_OW 321
43472: PUSH
43473: LD_INT 2
43475: EQUAL
43476: AND
43477: IFFALSE 43642
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
43479: LD_INT 22
43481: PUSH
43482: LD_VAR 0 16
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 2
43493: PUSH
43494: LD_INT 35
43496: PUSH
43497: LD_INT 11
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 35
43506: PUSH
43507: LD_INT 30
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 91
43521: PUSH
43522: LD_VAR 0 1
43526: PUSH
43527: LD_INT 18
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: LIST
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: LIST
43539: PPUSH
43540: CALL_OW 69
43544: NOT
43545: PUSH
43546: LD_INT 22
43548: PUSH
43549: LD_VAR 0 16
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: LD_INT 2
43560: PUSH
43561: LD_INT 30
43563: PUSH
43564: LD_INT 32
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 30
43573: PUSH
43574: LD_INT 33
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 91
43588: PUSH
43589: LD_VAR 0 1
43593: PUSH
43594: LD_INT 12
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: LIST
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: LIST
43606: PUSH
43607: EMPTY
43608: LIST
43609: PPUSH
43610: CALL_OW 69
43614: PUSH
43615: LD_INT 2
43617: GREATER
43618: AND
43619: IFFALSE 43642
// weapon := [ us_radar , ar_radar ] [ nat ] ;
43621: LD_ADDR_VAR 0 18
43625: PUSH
43626: LD_INT 11
43628: PUSH
43629: LD_INT 30
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: LD_VAR 0 12
43640: ARRAY
43641: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
43642: LD_VAR 0 18
43646: NOT
43647: PUSH
43648: LD_INT 40
43650: PPUSH
43651: LD_VAR 0 16
43655: PPUSH
43656: CALL_OW 321
43660: PUSH
43661: LD_INT 2
43663: EQUAL
43664: AND
43665: PUSH
43666: LD_INT 7
43668: PUSH
43669: LD_VAR 0 5
43673: IN
43674: PUSH
43675: LD_INT 28
43677: PUSH
43678: LD_VAR 0 5
43682: IN
43683: OR
43684: PUSH
43685: LD_INT 45
43687: PUSH
43688: LD_VAR 0 5
43692: IN
43693: OR
43694: AND
43695: IFFALSE 43949
// begin hex := GetHexInfo ( x , y ) ;
43697: LD_ADDR_VAR 0 4
43701: PUSH
43702: LD_VAR 0 10
43706: PPUSH
43707: LD_VAR 0 11
43711: PPUSH
43712: CALL_OW 546
43716: ST_TO_ADDR
// if hex [ 1 ] then
43717: LD_VAR 0 4
43721: PUSH
43722: LD_INT 1
43724: ARRAY
43725: IFFALSE 43729
// exit ;
43727: GO 44132
// height := hex [ 2 ] ;
43729: LD_ADDR_VAR 0 15
43733: PUSH
43734: LD_VAR 0 4
43738: PUSH
43739: LD_INT 2
43741: ARRAY
43742: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43743: LD_ADDR_VAR 0 14
43747: PUSH
43748: LD_INT 0
43750: PUSH
43751: LD_INT 2
43753: PUSH
43754: LD_INT 3
43756: PUSH
43757: LD_INT 5
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: ST_TO_ADDR
// for i in tmp do
43766: LD_ADDR_VAR 0 8
43770: PUSH
43771: LD_VAR 0 14
43775: PUSH
43776: FOR_IN
43777: IFFALSE 43947
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43779: LD_ADDR_VAR 0 9
43783: PUSH
43784: LD_VAR 0 10
43788: PPUSH
43789: LD_VAR 0 8
43793: PPUSH
43794: LD_INT 5
43796: PPUSH
43797: CALL_OW 272
43801: PUSH
43802: LD_VAR 0 11
43806: PPUSH
43807: LD_VAR 0 8
43811: PPUSH
43812: LD_INT 5
43814: PPUSH
43815: CALL_OW 273
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
43824: LD_VAR 0 9
43828: PUSH
43829: LD_INT 1
43831: ARRAY
43832: PPUSH
43833: LD_VAR 0 9
43837: PUSH
43838: LD_INT 2
43840: ARRAY
43841: PPUSH
43842: CALL_OW 488
43846: IFFALSE 43945
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
43848: LD_ADDR_VAR 0 4
43852: PUSH
43853: LD_VAR 0 9
43857: PUSH
43858: LD_INT 1
43860: ARRAY
43861: PPUSH
43862: LD_VAR 0 9
43866: PUSH
43867: LD_INT 2
43869: ARRAY
43870: PPUSH
43871: CALL_OW 546
43875: ST_TO_ADDR
// if hex [ 1 ] then
43876: LD_VAR 0 4
43880: PUSH
43881: LD_INT 1
43883: ARRAY
43884: IFFALSE 43888
// continue ;
43886: GO 43776
// h := hex [ 2 ] ;
43888: LD_ADDR_VAR 0 13
43892: PUSH
43893: LD_VAR 0 4
43897: PUSH
43898: LD_INT 2
43900: ARRAY
43901: ST_TO_ADDR
// if h + 7 < height then
43902: LD_VAR 0 13
43906: PUSH
43907: LD_INT 7
43909: PLUS
43910: PUSH
43911: LD_VAR 0 15
43915: LESS
43916: IFFALSE 43945
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43918: LD_ADDR_VAR 0 18
43922: PUSH
43923: LD_INT 7
43925: PUSH
43926: LD_INT 28
43928: PUSH
43929: LD_INT 45
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: LIST
43936: PUSH
43937: LD_VAR 0 12
43941: ARRAY
43942: ST_TO_ADDR
// break ;
43943: GO 43947
// end ; end ; end ;
43945: GO 43776
43947: POP
43948: POP
// end ; if not weapon then
43949: LD_VAR 0 18
43953: NOT
43954: IFFALSE 44014
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
43956: LD_ADDR_VAR 0 5
43960: PUSH
43961: LD_VAR 0 5
43965: PUSH
43966: LD_INT 11
43968: PUSH
43969: LD_INT 30
43971: PUSH
43972: LD_INT 49
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: LIST
43979: DIFF
43980: ST_TO_ADDR
// if not list then
43981: LD_VAR 0 5
43985: NOT
43986: IFFALSE 43990
// exit ;
43988: GO 44132
// weapon := list [ rand ( 1 , list ) ] ;
43990: LD_ADDR_VAR 0 18
43994: PUSH
43995: LD_VAR 0 5
43999: PUSH
44000: LD_INT 1
44002: PPUSH
44003: LD_VAR 0 5
44007: PPUSH
44008: CALL_OW 12
44012: ARRAY
44013: ST_TO_ADDR
// end ; if weapon then
44014: LD_VAR 0 18
44018: IFFALSE 44132
// begin tmp := CostOfWeapon ( weapon ) ;
44020: LD_ADDR_VAR 0 14
44024: PUSH
44025: LD_VAR 0 18
44029: PPUSH
44030: CALL_OW 451
44034: ST_TO_ADDR
// j := GetBase ( tower ) ;
44035: LD_ADDR_VAR 0 9
44039: PUSH
44040: LD_VAR 0 1
44044: PPUSH
44045: CALL_OW 274
44049: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
44050: LD_VAR 0 9
44054: PPUSH
44055: LD_INT 1
44057: PPUSH
44058: CALL_OW 275
44062: PUSH
44063: LD_VAR 0 14
44067: PUSH
44068: LD_INT 1
44070: ARRAY
44071: GREATEREQUAL
44072: PUSH
44073: LD_VAR 0 9
44077: PPUSH
44078: LD_INT 2
44080: PPUSH
44081: CALL_OW 275
44085: PUSH
44086: LD_VAR 0 14
44090: PUSH
44091: LD_INT 2
44093: ARRAY
44094: GREATEREQUAL
44095: AND
44096: PUSH
44097: LD_VAR 0 9
44101: PPUSH
44102: LD_INT 3
44104: PPUSH
44105: CALL_OW 275
44109: PUSH
44110: LD_VAR 0 14
44114: PUSH
44115: LD_INT 3
44117: ARRAY
44118: GREATEREQUAL
44119: AND
44120: IFFALSE 44132
// result := weapon ;
44122: LD_ADDR_VAR 0 3
44126: PUSH
44127: LD_VAR 0 18
44131: ST_TO_ADDR
// end ; end ;
44132: LD_VAR 0 3
44136: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
44137: LD_INT 0
44139: PPUSH
44140: PPUSH
// result := true ;
44141: LD_ADDR_VAR 0 3
44145: PUSH
44146: LD_INT 1
44148: ST_TO_ADDR
// if array1 = array2 then
44149: LD_VAR 0 1
44153: PUSH
44154: LD_VAR 0 2
44158: EQUAL
44159: IFFALSE 44219
// begin for i = 1 to array1 do
44161: LD_ADDR_VAR 0 4
44165: PUSH
44166: DOUBLE
44167: LD_INT 1
44169: DEC
44170: ST_TO_ADDR
44171: LD_VAR 0 1
44175: PUSH
44176: FOR_TO
44177: IFFALSE 44215
// if array1 [ i ] <> array2 [ i ] then
44179: LD_VAR 0 1
44183: PUSH
44184: LD_VAR 0 4
44188: ARRAY
44189: PUSH
44190: LD_VAR 0 2
44194: PUSH
44195: LD_VAR 0 4
44199: ARRAY
44200: NONEQUAL
44201: IFFALSE 44213
// begin result := false ;
44203: LD_ADDR_VAR 0 3
44207: PUSH
44208: LD_INT 0
44210: ST_TO_ADDR
// break ;
44211: GO 44215
// end ;
44213: GO 44176
44215: POP
44216: POP
// end else
44217: GO 44227
// result := false ;
44219: LD_ADDR_VAR 0 3
44223: PUSH
44224: LD_INT 0
44226: ST_TO_ADDR
// end ;
44227: LD_VAR 0 3
44231: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
44232: LD_INT 0
44234: PPUSH
44235: PPUSH
// if not array1 or not array2 then
44236: LD_VAR 0 1
44240: NOT
44241: PUSH
44242: LD_VAR 0 2
44246: NOT
44247: OR
44248: IFFALSE 44252
// exit ;
44250: GO 44316
// result := true ;
44252: LD_ADDR_VAR 0 3
44256: PUSH
44257: LD_INT 1
44259: ST_TO_ADDR
// for i = 1 to array1 do
44260: LD_ADDR_VAR 0 4
44264: PUSH
44265: DOUBLE
44266: LD_INT 1
44268: DEC
44269: ST_TO_ADDR
44270: LD_VAR 0 1
44274: PUSH
44275: FOR_TO
44276: IFFALSE 44314
// if array1 [ i ] <> array2 [ i ] then
44278: LD_VAR 0 1
44282: PUSH
44283: LD_VAR 0 4
44287: ARRAY
44288: PUSH
44289: LD_VAR 0 2
44293: PUSH
44294: LD_VAR 0 4
44298: ARRAY
44299: NONEQUAL
44300: IFFALSE 44312
// begin result := false ;
44302: LD_ADDR_VAR 0 3
44306: PUSH
44307: LD_INT 0
44309: ST_TO_ADDR
// break ;
44310: GO 44314
// end ;
44312: GO 44275
44314: POP
44315: POP
// end ;
44316: LD_VAR 0 3
44320: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
44321: LD_INT 0
44323: PPUSH
44324: PPUSH
44325: PPUSH
// pom := GetBase ( fac ) ;
44326: LD_ADDR_VAR 0 5
44330: PUSH
44331: LD_VAR 0 1
44335: PPUSH
44336: CALL_OW 274
44340: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
44341: LD_ADDR_VAR 0 4
44345: PUSH
44346: LD_VAR 0 2
44350: PUSH
44351: LD_INT 1
44353: ARRAY
44354: PPUSH
44355: LD_VAR 0 2
44359: PUSH
44360: LD_INT 2
44362: ARRAY
44363: PPUSH
44364: LD_VAR 0 2
44368: PUSH
44369: LD_INT 3
44371: ARRAY
44372: PPUSH
44373: LD_VAR 0 2
44377: PUSH
44378: LD_INT 4
44380: ARRAY
44381: PPUSH
44382: CALL_OW 449
44386: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44387: LD_ADDR_VAR 0 3
44391: PUSH
44392: LD_VAR 0 5
44396: PPUSH
44397: LD_INT 1
44399: PPUSH
44400: CALL_OW 275
44404: PUSH
44405: LD_VAR 0 4
44409: PUSH
44410: LD_INT 1
44412: ARRAY
44413: GREATEREQUAL
44414: PUSH
44415: LD_VAR 0 5
44419: PPUSH
44420: LD_INT 2
44422: PPUSH
44423: CALL_OW 275
44427: PUSH
44428: LD_VAR 0 4
44432: PUSH
44433: LD_INT 2
44435: ARRAY
44436: GREATEREQUAL
44437: AND
44438: PUSH
44439: LD_VAR 0 5
44443: PPUSH
44444: LD_INT 3
44446: PPUSH
44447: CALL_OW 275
44451: PUSH
44452: LD_VAR 0 4
44456: PUSH
44457: LD_INT 3
44459: ARRAY
44460: GREATEREQUAL
44461: AND
44462: ST_TO_ADDR
// end ;
44463: LD_VAR 0 3
44467: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
44468: LD_INT 0
44470: PPUSH
44471: PPUSH
44472: PPUSH
44473: PPUSH
// pom := GetBase ( building ) ;
44474: LD_ADDR_VAR 0 3
44478: PUSH
44479: LD_VAR 0 1
44483: PPUSH
44484: CALL_OW 274
44488: ST_TO_ADDR
// if not pom then
44489: LD_VAR 0 3
44493: NOT
44494: IFFALSE 44498
// exit ;
44496: GO 44668
// btype := GetBType ( building ) ;
44498: LD_ADDR_VAR 0 5
44502: PUSH
44503: LD_VAR 0 1
44507: PPUSH
44508: CALL_OW 266
44512: ST_TO_ADDR
// if btype = b_armoury then
44513: LD_VAR 0 5
44517: PUSH
44518: LD_INT 4
44520: EQUAL
44521: IFFALSE 44531
// btype := b_barracks ;
44523: LD_ADDR_VAR 0 5
44527: PUSH
44528: LD_INT 5
44530: ST_TO_ADDR
// if btype = b_depot then
44531: LD_VAR 0 5
44535: PUSH
44536: LD_INT 0
44538: EQUAL
44539: IFFALSE 44549
// btype := b_warehouse ;
44541: LD_ADDR_VAR 0 5
44545: PUSH
44546: LD_INT 1
44548: ST_TO_ADDR
// if btype = b_workshop then
44549: LD_VAR 0 5
44553: PUSH
44554: LD_INT 2
44556: EQUAL
44557: IFFALSE 44567
// btype := b_factory ;
44559: LD_ADDR_VAR 0 5
44563: PUSH
44564: LD_INT 3
44566: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44567: LD_ADDR_VAR 0 4
44571: PUSH
44572: LD_VAR 0 5
44576: PPUSH
44577: LD_VAR 0 1
44581: PPUSH
44582: CALL_OW 248
44586: PPUSH
44587: CALL_OW 450
44591: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44592: LD_ADDR_VAR 0 2
44596: PUSH
44597: LD_VAR 0 3
44601: PPUSH
44602: LD_INT 1
44604: PPUSH
44605: CALL_OW 275
44609: PUSH
44610: LD_VAR 0 4
44614: PUSH
44615: LD_INT 1
44617: ARRAY
44618: GREATEREQUAL
44619: PUSH
44620: LD_VAR 0 3
44624: PPUSH
44625: LD_INT 2
44627: PPUSH
44628: CALL_OW 275
44632: PUSH
44633: LD_VAR 0 4
44637: PUSH
44638: LD_INT 2
44640: ARRAY
44641: GREATEREQUAL
44642: AND
44643: PUSH
44644: LD_VAR 0 3
44648: PPUSH
44649: LD_INT 3
44651: PPUSH
44652: CALL_OW 275
44656: PUSH
44657: LD_VAR 0 4
44661: PUSH
44662: LD_INT 3
44664: ARRAY
44665: GREATEREQUAL
44666: AND
44667: ST_TO_ADDR
// end ;
44668: LD_VAR 0 2
44672: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
44673: LD_INT 0
44675: PPUSH
44676: PPUSH
44677: PPUSH
// pom := GetBase ( building ) ;
44678: LD_ADDR_VAR 0 4
44682: PUSH
44683: LD_VAR 0 1
44687: PPUSH
44688: CALL_OW 274
44692: ST_TO_ADDR
// if not pom then
44693: LD_VAR 0 4
44697: NOT
44698: IFFALSE 44702
// exit ;
44700: GO 44803
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44702: LD_ADDR_VAR 0 5
44706: PUSH
44707: LD_VAR 0 2
44711: PPUSH
44712: LD_VAR 0 1
44716: PPUSH
44717: CALL_OW 248
44721: PPUSH
44722: CALL_OW 450
44726: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44727: LD_ADDR_VAR 0 3
44731: PUSH
44732: LD_VAR 0 4
44736: PPUSH
44737: LD_INT 1
44739: PPUSH
44740: CALL_OW 275
44744: PUSH
44745: LD_VAR 0 5
44749: PUSH
44750: LD_INT 1
44752: ARRAY
44753: GREATEREQUAL
44754: PUSH
44755: LD_VAR 0 4
44759: PPUSH
44760: LD_INT 2
44762: PPUSH
44763: CALL_OW 275
44767: PUSH
44768: LD_VAR 0 5
44772: PUSH
44773: LD_INT 2
44775: ARRAY
44776: GREATEREQUAL
44777: AND
44778: PUSH
44779: LD_VAR 0 4
44783: PPUSH
44784: LD_INT 3
44786: PPUSH
44787: CALL_OW 275
44791: PUSH
44792: LD_VAR 0 5
44796: PUSH
44797: LD_INT 3
44799: ARRAY
44800: GREATEREQUAL
44801: AND
44802: ST_TO_ADDR
// end ;
44803: LD_VAR 0 3
44807: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
44808: LD_INT 0
44810: PPUSH
44811: PPUSH
44812: PPUSH
44813: PPUSH
44814: PPUSH
44815: PPUSH
44816: PPUSH
44817: PPUSH
44818: PPUSH
44819: PPUSH
44820: PPUSH
// result := false ;
44821: LD_ADDR_VAR 0 8
44825: PUSH
44826: LD_INT 0
44828: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
44829: LD_VAR 0 5
44833: NOT
44834: PUSH
44835: LD_VAR 0 1
44839: NOT
44840: OR
44841: PUSH
44842: LD_VAR 0 2
44846: NOT
44847: OR
44848: PUSH
44849: LD_VAR 0 3
44853: NOT
44854: OR
44855: IFFALSE 44859
// exit ;
44857: GO 45673
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
44859: LD_ADDR_VAR 0 14
44863: PUSH
44864: LD_VAR 0 1
44868: PPUSH
44869: LD_VAR 0 2
44873: PPUSH
44874: LD_VAR 0 3
44878: PPUSH
44879: LD_VAR 0 4
44883: PPUSH
44884: LD_VAR 0 5
44888: PUSH
44889: LD_INT 1
44891: ARRAY
44892: PPUSH
44893: CALL_OW 248
44897: PPUSH
44898: LD_INT 0
44900: PPUSH
44901: CALL 46910 0 6
44905: ST_TO_ADDR
// if not hexes then
44906: LD_VAR 0 14
44910: NOT
44911: IFFALSE 44915
// exit ;
44913: GO 45673
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44915: LD_ADDR_VAR 0 17
44919: PUSH
44920: LD_VAR 0 5
44924: PPUSH
44925: LD_INT 22
44927: PUSH
44928: LD_VAR 0 13
44932: PPUSH
44933: CALL_OW 255
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 2
44944: PUSH
44945: LD_INT 30
44947: PUSH
44948: LD_INT 0
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 30
44957: PUSH
44958: LD_INT 1
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: LIST
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PPUSH
44974: CALL_OW 72
44978: ST_TO_ADDR
// for i = 1 to hexes do
44979: LD_ADDR_VAR 0 9
44983: PUSH
44984: DOUBLE
44985: LD_INT 1
44987: DEC
44988: ST_TO_ADDR
44989: LD_VAR 0 14
44993: PUSH
44994: FOR_TO
44995: IFFALSE 45671
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44997: LD_ADDR_VAR 0 13
45001: PUSH
45002: LD_VAR 0 14
45006: PUSH
45007: LD_VAR 0 9
45011: ARRAY
45012: PUSH
45013: LD_INT 1
45015: ARRAY
45016: PPUSH
45017: LD_VAR 0 14
45021: PUSH
45022: LD_VAR 0 9
45026: ARRAY
45027: PUSH
45028: LD_INT 2
45030: ARRAY
45031: PPUSH
45032: CALL_OW 428
45036: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
45037: LD_VAR 0 14
45041: PUSH
45042: LD_VAR 0 9
45046: ARRAY
45047: PUSH
45048: LD_INT 1
45050: ARRAY
45051: PPUSH
45052: LD_VAR 0 14
45056: PUSH
45057: LD_VAR 0 9
45061: ARRAY
45062: PUSH
45063: LD_INT 2
45065: ARRAY
45066: PPUSH
45067: CALL_OW 351
45071: PUSH
45072: LD_VAR 0 14
45076: PUSH
45077: LD_VAR 0 9
45081: ARRAY
45082: PUSH
45083: LD_INT 1
45085: ARRAY
45086: PPUSH
45087: LD_VAR 0 14
45091: PUSH
45092: LD_VAR 0 9
45096: ARRAY
45097: PUSH
45098: LD_INT 2
45100: ARRAY
45101: PPUSH
45102: CALL_OW 488
45106: NOT
45107: OR
45108: PUSH
45109: LD_VAR 0 13
45113: PPUSH
45114: CALL_OW 247
45118: PUSH
45119: LD_INT 3
45121: EQUAL
45122: OR
45123: IFFALSE 45129
// exit ;
45125: POP
45126: POP
45127: GO 45673
// if not tmp then
45129: LD_VAR 0 13
45133: NOT
45134: IFFALSE 45138
// continue ;
45136: GO 44994
// result := true ;
45138: LD_ADDR_VAR 0 8
45142: PUSH
45143: LD_INT 1
45145: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
45146: LD_VAR 0 6
45150: PUSH
45151: LD_VAR 0 13
45155: PPUSH
45156: CALL_OW 247
45160: PUSH
45161: LD_INT 2
45163: EQUAL
45164: AND
45165: PUSH
45166: LD_VAR 0 13
45170: PPUSH
45171: CALL_OW 263
45175: PUSH
45176: LD_INT 1
45178: EQUAL
45179: AND
45180: IFFALSE 45344
// begin if IsDrivenBy ( tmp ) then
45182: LD_VAR 0 13
45186: PPUSH
45187: CALL_OW 311
45191: IFFALSE 45195
// continue ;
45193: GO 44994
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
45195: LD_VAR 0 6
45199: PPUSH
45200: LD_INT 3
45202: PUSH
45203: LD_INT 60
45205: PUSH
45206: EMPTY
45207: LIST
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 3
45215: PUSH
45216: LD_INT 55
45218: PUSH
45219: EMPTY
45220: LIST
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PPUSH
45230: CALL_OW 72
45234: IFFALSE 45342
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
45236: LD_ADDR_VAR 0 18
45240: PUSH
45241: LD_VAR 0 6
45245: PPUSH
45246: LD_INT 3
45248: PUSH
45249: LD_INT 60
45251: PUSH
45252: EMPTY
45253: LIST
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 3
45261: PUSH
45262: LD_INT 55
45264: PUSH
45265: EMPTY
45266: LIST
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PPUSH
45276: CALL_OW 72
45280: PUSH
45281: LD_INT 1
45283: ARRAY
45284: ST_TO_ADDR
// if IsInUnit ( driver ) then
45285: LD_VAR 0 18
45289: PPUSH
45290: CALL_OW 310
45294: IFFALSE 45305
// ComExit ( driver ) ;
45296: LD_VAR 0 18
45300: PPUSH
45301: CALL 70094 0 1
// AddComEnterUnit ( driver , tmp ) ;
45305: LD_VAR 0 18
45309: PPUSH
45310: LD_VAR 0 13
45314: PPUSH
45315: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
45319: LD_VAR 0 18
45323: PPUSH
45324: LD_VAR 0 7
45328: PPUSH
45329: CALL_OW 173
// AddComExitVehicle ( driver ) ;
45333: LD_VAR 0 18
45337: PPUSH
45338: CALL_OW 181
// end ; continue ;
45342: GO 44994
// end ; if not cleaners or not tmp in cleaners then
45344: LD_VAR 0 6
45348: NOT
45349: PUSH
45350: LD_VAR 0 13
45354: PUSH
45355: LD_VAR 0 6
45359: IN
45360: NOT
45361: OR
45362: IFFALSE 45669
// begin if dep then
45364: LD_VAR 0 17
45368: IFFALSE 45504
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
45370: LD_ADDR_VAR 0 16
45374: PUSH
45375: LD_VAR 0 17
45379: PUSH
45380: LD_INT 1
45382: ARRAY
45383: PPUSH
45384: CALL_OW 250
45388: PPUSH
45389: LD_VAR 0 17
45393: PUSH
45394: LD_INT 1
45396: ARRAY
45397: PPUSH
45398: CALL_OW 254
45402: PPUSH
45403: LD_INT 5
45405: PPUSH
45406: CALL_OW 272
45410: PUSH
45411: LD_VAR 0 17
45415: PUSH
45416: LD_INT 1
45418: ARRAY
45419: PPUSH
45420: CALL_OW 251
45424: PPUSH
45425: LD_VAR 0 17
45429: PUSH
45430: LD_INT 1
45432: ARRAY
45433: PPUSH
45434: CALL_OW 254
45438: PPUSH
45439: LD_INT 5
45441: PPUSH
45442: CALL_OW 273
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
45451: LD_VAR 0 16
45455: PUSH
45456: LD_INT 1
45458: ARRAY
45459: PPUSH
45460: LD_VAR 0 16
45464: PUSH
45465: LD_INT 2
45467: ARRAY
45468: PPUSH
45469: CALL_OW 488
45473: IFFALSE 45504
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
45475: LD_VAR 0 13
45479: PPUSH
45480: LD_VAR 0 16
45484: PUSH
45485: LD_INT 1
45487: ARRAY
45488: PPUSH
45489: LD_VAR 0 16
45493: PUSH
45494: LD_INT 2
45496: ARRAY
45497: PPUSH
45498: CALL_OW 111
// continue ;
45502: GO 44994
// end ; end ; r := GetDir ( tmp ) ;
45504: LD_ADDR_VAR 0 15
45508: PUSH
45509: LD_VAR 0 13
45513: PPUSH
45514: CALL_OW 254
45518: ST_TO_ADDR
// if r = 5 then
45519: LD_VAR 0 15
45523: PUSH
45524: LD_INT 5
45526: EQUAL
45527: IFFALSE 45537
// r := 0 ;
45529: LD_ADDR_VAR 0 15
45533: PUSH
45534: LD_INT 0
45536: ST_TO_ADDR
// for j = r to 5 do
45537: LD_ADDR_VAR 0 10
45541: PUSH
45542: DOUBLE
45543: LD_VAR 0 15
45547: DEC
45548: ST_TO_ADDR
45549: LD_INT 5
45551: PUSH
45552: FOR_TO
45553: IFFALSE 45667
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
45555: LD_ADDR_VAR 0 11
45559: PUSH
45560: LD_VAR 0 13
45564: PPUSH
45565: CALL_OW 250
45569: PPUSH
45570: LD_VAR 0 10
45574: PPUSH
45575: LD_INT 2
45577: PPUSH
45578: CALL_OW 272
45582: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
45583: LD_ADDR_VAR 0 12
45587: PUSH
45588: LD_VAR 0 13
45592: PPUSH
45593: CALL_OW 251
45597: PPUSH
45598: LD_VAR 0 10
45602: PPUSH
45603: LD_INT 2
45605: PPUSH
45606: CALL_OW 273
45610: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
45611: LD_VAR 0 11
45615: PPUSH
45616: LD_VAR 0 12
45620: PPUSH
45621: CALL_OW 488
45625: PUSH
45626: LD_VAR 0 11
45630: PPUSH
45631: LD_VAR 0 12
45635: PPUSH
45636: CALL_OW 428
45640: NOT
45641: AND
45642: IFFALSE 45665
// begin ComMoveXY ( tmp , _x , _y ) ;
45644: LD_VAR 0 13
45648: PPUSH
45649: LD_VAR 0 11
45653: PPUSH
45654: LD_VAR 0 12
45658: PPUSH
45659: CALL_OW 111
// break ;
45663: GO 45667
// end ; end ;
45665: GO 45552
45667: POP
45668: POP
// end ; end ;
45669: GO 44994
45671: POP
45672: POP
// end ;
45673: LD_VAR 0 8
45677: RET
// export function BuildingTechInvented ( side , btype ) ; begin
45678: LD_INT 0
45680: PPUSH
// result := true ;
45681: LD_ADDR_VAR 0 3
45685: PUSH
45686: LD_INT 1
45688: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
45689: LD_VAR 0 2
45693: PUSH
45694: LD_INT 24
45696: DOUBLE
45697: EQUAL
45698: IFTRUE 45708
45700: LD_INT 33
45702: DOUBLE
45703: EQUAL
45704: IFTRUE 45708
45706: GO 45733
45708: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
45709: LD_ADDR_VAR 0 3
45713: PUSH
45714: LD_INT 32
45716: PPUSH
45717: LD_VAR 0 1
45721: PPUSH
45722: CALL_OW 321
45726: PUSH
45727: LD_INT 2
45729: EQUAL
45730: ST_TO_ADDR
45731: GO 46053
45733: LD_INT 20
45735: DOUBLE
45736: EQUAL
45737: IFTRUE 45741
45739: GO 45766
45741: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
45742: LD_ADDR_VAR 0 3
45746: PUSH
45747: LD_INT 6
45749: PPUSH
45750: LD_VAR 0 1
45754: PPUSH
45755: CALL_OW 321
45759: PUSH
45760: LD_INT 2
45762: EQUAL
45763: ST_TO_ADDR
45764: GO 46053
45766: LD_INT 22
45768: DOUBLE
45769: EQUAL
45770: IFTRUE 45780
45772: LD_INT 36
45774: DOUBLE
45775: EQUAL
45776: IFTRUE 45780
45778: GO 45805
45780: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
45781: LD_ADDR_VAR 0 3
45785: PUSH
45786: LD_INT 15
45788: PPUSH
45789: LD_VAR 0 1
45793: PPUSH
45794: CALL_OW 321
45798: PUSH
45799: LD_INT 2
45801: EQUAL
45802: ST_TO_ADDR
45803: GO 46053
45805: LD_INT 30
45807: DOUBLE
45808: EQUAL
45809: IFTRUE 45813
45811: GO 45838
45813: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
45814: LD_ADDR_VAR 0 3
45818: PUSH
45819: LD_INT 20
45821: PPUSH
45822: LD_VAR 0 1
45826: PPUSH
45827: CALL_OW 321
45831: PUSH
45832: LD_INT 2
45834: EQUAL
45835: ST_TO_ADDR
45836: GO 46053
45838: LD_INT 28
45840: DOUBLE
45841: EQUAL
45842: IFTRUE 45852
45844: LD_INT 21
45846: DOUBLE
45847: EQUAL
45848: IFTRUE 45852
45850: GO 45877
45852: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
45853: LD_ADDR_VAR 0 3
45857: PUSH
45858: LD_INT 21
45860: PPUSH
45861: LD_VAR 0 1
45865: PPUSH
45866: CALL_OW 321
45870: PUSH
45871: LD_INT 2
45873: EQUAL
45874: ST_TO_ADDR
45875: GO 46053
45877: LD_INT 16
45879: DOUBLE
45880: EQUAL
45881: IFTRUE 45885
45883: GO 45912
45885: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
45886: LD_ADDR_VAR 0 3
45890: PUSH
45891: LD_EXP 50
45895: PPUSH
45896: LD_VAR 0 1
45900: PPUSH
45901: CALL_OW 321
45905: PUSH
45906: LD_INT 2
45908: EQUAL
45909: ST_TO_ADDR
45910: GO 46053
45912: LD_INT 19
45914: DOUBLE
45915: EQUAL
45916: IFTRUE 45926
45918: LD_INT 23
45920: DOUBLE
45921: EQUAL
45922: IFTRUE 45926
45924: GO 45953
45926: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
45927: LD_ADDR_VAR 0 3
45931: PUSH
45932: LD_EXP 49
45936: PPUSH
45937: LD_VAR 0 1
45941: PPUSH
45942: CALL_OW 321
45946: PUSH
45947: LD_INT 2
45949: EQUAL
45950: ST_TO_ADDR
45951: GO 46053
45953: LD_INT 17
45955: DOUBLE
45956: EQUAL
45957: IFTRUE 45961
45959: GO 45986
45961: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
45962: LD_ADDR_VAR 0 3
45966: PUSH
45967: LD_INT 39
45969: PPUSH
45970: LD_VAR 0 1
45974: PPUSH
45975: CALL_OW 321
45979: PUSH
45980: LD_INT 2
45982: EQUAL
45983: ST_TO_ADDR
45984: GO 46053
45986: LD_INT 18
45988: DOUBLE
45989: EQUAL
45990: IFTRUE 45994
45992: GO 46019
45994: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
45995: LD_ADDR_VAR 0 3
45999: PUSH
46000: LD_INT 40
46002: PPUSH
46003: LD_VAR 0 1
46007: PPUSH
46008: CALL_OW 321
46012: PUSH
46013: LD_INT 2
46015: EQUAL
46016: ST_TO_ADDR
46017: GO 46053
46019: LD_INT 27
46021: DOUBLE
46022: EQUAL
46023: IFTRUE 46027
46025: GO 46052
46027: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
46028: LD_ADDR_VAR 0 3
46032: PUSH
46033: LD_INT 35
46035: PPUSH
46036: LD_VAR 0 1
46040: PPUSH
46041: CALL_OW 321
46045: PUSH
46046: LD_INT 2
46048: EQUAL
46049: ST_TO_ADDR
46050: GO 46053
46052: POP
// end ;
46053: LD_VAR 0 3
46057: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
46058: LD_INT 0
46060: PPUSH
46061: PPUSH
46062: PPUSH
46063: PPUSH
46064: PPUSH
46065: PPUSH
46066: PPUSH
46067: PPUSH
46068: PPUSH
46069: PPUSH
46070: PPUSH
// result := false ;
46071: LD_ADDR_VAR 0 6
46075: PUSH
46076: LD_INT 0
46078: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
46079: LD_VAR 0 1
46083: NOT
46084: PUSH
46085: LD_VAR 0 1
46089: PPUSH
46090: CALL_OW 266
46094: PUSH
46095: LD_INT 0
46097: PUSH
46098: LD_INT 1
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: IN
46105: NOT
46106: OR
46107: PUSH
46108: LD_VAR 0 2
46112: NOT
46113: OR
46114: PUSH
46115: LD_VAR 0 5
46119: PUSH
46120: LD_INT 0
46122: PUSH
46123: LD_INT 1
46125: PUSH
46126: LD_INT 2
46128: PUSH
46129: LD_INT 3
46131: PUSH
46132: LD_INT 4
46134: PUSH
46135: LD_INT 5
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: IN
46146: NOT
46147: OR
46148: PUSH
46149: LD_VAR 0 3
46153: PPUSH
46154: LD_VAR 0 4
46158: PPUSH
46159: CALL_OW 488
46163: NOT
46164: OR
46165: IFFALSE 46169
// exit ;
46167: GO 46905
// side := GetSide ( depot ) ;
46169: LD_ADDR_VAR 0 9
46173: PUSH
46174: LD_VAR 0 1
46178: PPUSH
46179: CALL_OW 255
46183: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
46184: LD_VAR 0 9
46188: PPUSH
46189: LD_VAR 0 2
46193: PPUSH
46194: CALL 45678 0 2
46198: NOT
46199: IFFALSE 46203
// exit ;
46201: GO 46905
// pom := GetBase ( depot ) ;
46203: LD_ADDR_VAR 0 10
46207: PUSH
46208: LD_VAR 0 1
46212: PPUSH
46213: CALL_OW 274
46217: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
46218: LD_ADDR_VAR 0 11
46222: PUSH
46223: LD_VAR 0 2
46227: PPUSH
46228: LD_VAR 0 1
46232: PPUSH
46233: CALL_OW 248
46237: PPUSH
46238: CALL_OW 450
46242: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
46243: LD_VAR 0 10
46247: PPUSH
46248: LD_INT 1
46250: PPUSH
46251: CALL_OW 275
46255: PUSH
46256: LD_VAR 0 11
46260: PUSH
46261: LD_INT 1
46263: ARRAY
46264: GREATEREQUAL
46265: PUSH
46266: LD_VAR 0 10
46270: PPUSH
46271: LD_INT 2
46273: PPUSH
46274: CALL_OW 275
46278: PUSH
46279: LD_VAR 0 11
46283: PUSH
46284: LD_INT 2
46286: ARRAY
46287: GREATEREQUAL
46288: AND
46289: PUSH
46290: LD_VAR 0 10
46294: PPUSH
46295: LD_INT 3
46297: PPUSH
46298: CALL_OW 275
46302: PUSH
46303: LD_VAR 0 11
46307: PUSH
46308: LD_INT 3
46310: ARRAY
46311: GREATEREQUAL
46312: AND
46313: NOT
46314: IFFALSE 46318
// exit ;
46316: GO 46905
// if GetBType ( depot ) = b_depot then
46318: LD_VAR 0 1
46322: PPUSH
46323: CALL_OW 266
46327: PUSH
46328: LD_INT 0
46330: EQUAL
46331: IFFALSE 46343
// dist := 28 else
46333: LD_ADDR_VAR 0 14
46337: PUSH
46338: LD_INT 28
46340: ST_TO_ADDR
46341: GO 46351
// dist := 36 ;
46343: LD_ADDR_VAR 0 14
46347: PUSH
46348: LD_INT 36
46350: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
46351: LD_VAR 0 1
46355: PPUSH
46356: LD_VAR 0 3
46360: PPUSH
46361: LD_VAR 0 4
46365: PPUSH
46366: CALL_OW 297
46370: PUSH
46371: LD_VAR 0 14
46375: GREATER
46376: IFFALSE 46380
// exit ;
46378: GO 46905
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
46380: LD_ADDR_VAR 0 12
46384: PUSH
46385: LD_VAR 0 2
46389: PPUSH
46390: LD_VAR 0 3
46394: PPUSH
46395: LD_VAR 0 4
46399: PPUSH
46400: LD_VAR 0 5
46404: PPUSH
46405: LD_VAR 0 1
46409: PPUSH
46410: CALL_OW 248
46414: PPUSH
46415: LD_INT 0
46417: PPUSH
46418: CALL 46910 0 6
46422: ST_TO_ADDR
// if not hexes then
46423: LD_VAR 0 12
46427: NOT
46428: IFFALSE 46432
// exit ;
46430: GO 46905
// hex := GetHexInfo ( x , y ) ;
46432: LD_ADDR_VAR 0 15
46436: PUSH
46437: LD_VAR 0 3
46441: PPUSH
46442: LD_VAR 0 4
46446: PPUSH
46447: CALL_OW 546
46451: ST_TO_ADDR
// if hex [ 1 ] then
46452: LD_VAR 0 15
46456: PUSH
46457: LD_INT 1
46459: ARRAY
46460: IFFALSE 46464
// exit ;
46462: GO 46905
// height := hex [ 2 ] ;
46464: LD_ADDR_VAR 0 13
46468: PUSH
46469: LD_VAR 0 15
46473: PUSH
46474: LD_INT 2
46476: ARRAY
46477: ST_TO_ADDR
// for i = 1 to hexes do
46478: LD_ADDR_VAR 0 7
46482: PUSH
46483: DOUBLE
46484: LD_INT 1
46486: DEC
46487: ST_TO_ADDR
46488: LD_VAR 0 12
46492: PUSH
46493: FOR_TO
46494: IFFALSE 46824
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
46496: LD_VAR 0 12
46500: PUSH
46501: LD_VAR 0 7
46505: ARRAY
46506: PUSH
46507: LD_INT 1
46509: ARRAY
46510: PPUSH
46511: LD_VAR 0 12
46515: PUSH
46516: LD_VAR 0 7
46520: ARRAY
46521: PUSH
46522: LD_INT 2
46524: ARRAY
46525: PPUSH
46526: CALL_OW 488
46530: NOT
46531: PUSH
46532: LD_VAR 0 12
46536: PUSH
46537: LD_VAR 0 7
46541: ARRAY
46542: PUSH
46543: LD_INT 1
46545: ARRAY
46546: PPUSH
46547: LD_VAR 0 12
46551: PUSH
46552: LD_VAR 0 7
46556: ARRAY
46557: PUSH
46558: LD_INT 2
46560: ARRAY
46561: PPUSH
46562: CALL_OW 428
46566: PUSH
46567: LD_INT 0
46569: GREATER
46570: OR
46571: PUSH
46572: LD_VAR 0 12
46576: PUSH
46577: LD_VAR 0 7
46581: ARRAY
46582: PUSH
46583: LD_INT 1
46585: ARRAY
46586: PPUSH
46587: LD_VAR 0 12
46591: PUSH
46592: LD_VAR 0 7
46596: ARRAY
46597: PUSH
46598: LD_INT 2
46600: ARRAY
46601: PPUSH
46602: CALL_OW 351
46606: OR
46607: IFFALSE 46613
// exit ;
46609: POP
46610: POP
46611: GO 46905
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46613: LD_ADDR_VAR 0 8
46617: PUSH
46618: LD_VAR 0 12
46622: PUSH
46623: LD_VAR 0 7
46627: ARRAY
46628: PUSH
46629: LD_INT 1
46631: ARRAY
46632: PPUSH
46633: LD_VAR 0 12
46637: PUSH
46638: LD_VAR 0 7
46642: ARRAY
46643: PUSH
46644: LD_INT 2
46646: ARRAY
46647: PPUSH
46648: CALL_OW 546
46652: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
46653: LD_VAR 0 8
46657: PUSH
46658: LD_INT 1
46660: ARRAY
46661: PUSH
46662: LD_VAR 0 8
46666: PUSH
46667: LD_INT 2
46669: ARRAY
46670: PUSH
46671: LD_VAR 0 13
46675: PUSH
46676: LD_INT 2
46678: PLUS
46679: GREATER
46680: OR
46681: PUSH
46682: LD_VAR 0 8
46686: PUSH
46687: LD_INT 2
46689: ARRAY
46690: PUSH
46691: LD_VAR 0 13
46695: PUSH
46696: LD_INT 2
46698: MINUS
46699: LESS
46700: OR
46701: PUSH
46702: LD_VAR 0 8
46706: PUSH
46707: LD_INT 3
46709: ARRAY
46710: PUSH
46711: LD_INT 0
46713: PUSH
46714: LD_INT 8
46716: PUSH
46717: LD_INT 9
46719: PUSH
46720: LD_INT 10
46722: PUSH
46723: LD_INT 11
46725: PUSH
46726: LD_INT 12
46728: PUSH
46729: LD_INT 13
46731: PUSH
46732: LD_INT 16
46734: PUSH
46735: LD_INT 17
46737: PUSH
46738: LD_INT 18
46740: PUSH
46741: LD_INT 19
46743: PUSH
46744: LD_INT 20
46746: PUSH
46747: LD_INT 21
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: IN
46765: NOT
46766: OR
46767: PUSH
46768: LD_VAR 0 8
46772: PUSH
46773: LD_INT 5
46775: ARRAY
46776: NOT
46777: OR
46778: PUSH
46779: LD_VAR 0 8
46783: PUSH
46784: LD_INT 6
46786: ARRAY
46787: PUSH
46788: LD_INT 1
46790: PUSH
46791: LD_INT 2
46793: PUSH
46794: LD_INT 7
46796: PUSH
46797: LD_INT 9
46799: PUSH
46800: LD_INT 10
46802: PUSH
46803: LD_INT 11
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: IN
46814: NOT
46815: OR
46816: IFFALSE 46822
// exit ;
46818: POP
46819: POP
46820: GO 46905
// end ;
46822: GO 46493
46824: POP
46825: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
46826: LD_VAR 0 9
46830: PPUSH
46831: LD_VAR 0 3
46835: PPUSH
46836: LD_VAR 0 4
46840: PPUSH
46841: LD_INT 20
46843: PPUSH
46844: CALL 38851 0 4
46848: PUSH
46849: LD_INT 4
46851: ARRAY
46852: IFFALSE 46856
// exit ;
46854: GO 46905
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
46856: LD_VAR 0 2
46860: PUSH
46861: LD_INT 29
46863: PUSH
46864: LD_INT 30
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: IN
46871: PUSH
46872: LD_VAR 0 3
46876: PPUSH
46877: LD_VAR 0 4
46881: PPUSH
46882: LD_VAR 0 9
46886: PPUSH
46887: CALL_OW 440
46891: NOT
46892: AND
46893: IFFALSE 46897
// exit ;
46895: GO 46905
// result := true ;
46897: LD_ADDR_VAR 0 6
46901: PUSH
46902: LD_INT 1
46904: ST_TO_ADDR
// end ;
46905: LD_VAR 0 6
46909: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
46910: LD_INT 0
46912: PPUSH
46913: PPUSH
46914: PPUSH
46915: PPUSH
46916: PPUSH
46917: PPUSH
46918: PPUSH
46919: PPUSH
46920: PPUSH
46921: PPUSH
46922: PPUSH
46923: PPUSH
46924: PPUSH
46925: PPUSH
46926: PPUSH
46927: PPUSH
46928: PPUSH
46929: PPUSH
46930: PPUSH
46931: PPUSH
46932: PPUSH
46933: PPUSH
46934: PPUSH
46935: PPUSH
46936: PPUSH
46937: PPUSH
46938: PPUSH
46939: PPUSH
46940: PPUSH
46941: PPUSH
46942: PPUSH
46943: PPUSH
46944: PPUSH
46945: PPUSH
46946: PPUSH
46947: PPUSH
46948: PPUSH
46949: PPUSH
46950: PPUSH
46951: PPUSH
46952: PPUSH
46953: PPUSH
46954: PPUSH
46955: PPUSH
46956: PPUSH
46957: PPUSH
46958: PPUSH
46959: PPUSH
46960: PPUSH
46961: PPUSH
46962: PPUSH
46963: PPUSH
46964: PPUSH
46965: PPUSH
46966: PPUSH
46967: PPUSH
46968: PPUSH
46969: PPUSH
// result = [ ] ;
46970: LD_ADDR_VAR 0 7
46974: PUSH
46975: EMPTY
46976: ST_TO_ADDR
// temp_list = [ ] ;
46977: LD_ADDR_VAR 0 9
46981: PUSH
46982: EMPTY
46983: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
46984: LD_VAR 0 4
46988: PUSH
46989: LD_INT 0
46991: PUSH
46992: LD_INT 1
46994: PUSH
46995: LD_INT 2
46997: PUSH
46998: LD_INT 3
47000: PUSH
47001: LD_INT 4
47003: PUSH
47004: LD_INT 5
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: IN
47015: NOT
47016: PUSH
47017: LD_VAR 0 1
47021: PUSH
47022: LD_INT 0
47024: PUSH
47025: LD_INT 1
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: IN
47032: PUSH
47033: LD_VAR 0 5
47037: PUSH
47038: LD_INT 1
47040: PUSH
47041: LD_INT 2
47043: PUSH
47044: LD_INT 3
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: LIST
47051: IN
47052: NOT
47053: AND
47054: OR
47055: IFFALSE 47059
// exit ;
47057: GO 65450
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
47059: LD_VAR 0 1
47063: PUSH
47064: LD_INT 6
47066: PUSH
47067: LD_INT 7
47069: PUSH
47070: LD_INT 8
47072: PUSH
47073: LD_INT 13
47075: PUSH
47076: LD_INT 12
47078: PUSH
47079: LD_INT 15
47081: PUSH
47082: LD_INT 11
47084: PUSH
47085: LD_INT 14
47087: PUSH
47088: LD_INT 10
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: IN
47102: IFFALSE 47112
// btype = b_lab ;
47104: LD_ADDR_VAR 0 1
47108: PUSH
47109: LD_INT 6
47111: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
47112: LD_VAR 0 6
47116: PUSH
47117: LD_INT 0
47119: PUSH
47120: LD_INT 1
47122: PUSH
47123: LD_INT 2
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: LIST
47130: IN
47131: NOT
47132: PUSH
47133: LD_VAR 0 1
47137: PUSH
47138: LD_INT 0
47140: PUSH
47141: LD_INT 1
47143: PUSH
47144: LD_INT 2
47146: PUSH
47147: LD_INT 3
47149: PUSH
47150: LD_INT 6
47152: PUSH
47153: LD_INT 36
47155: PUSH
47156: LD_INT 4
47158: PUSH
47159: LD_INT 5
47161: PUSH
47162: LD_INT 31
47164: PUSH
47165: LD_INT 32
47167: PUSH
47168: LD_INT 33
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: IN
47184: NOT
47185: PUSH
47186: LD_VAR 0 6
47190: PUSH
47191: LD_INT 1
47193: EQUAL
47194: AND
47195: OR
47196: PUSH
47197: LD_VAR 0 1
47201: PUSH
47202: LD_INT 2
47204: PUSH
47205: LD_INT 3
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: IN
47212: NOT
47213: PUSH
47214: LD_VAR 0 6
47218: PUSH
47219: LD_INT 2
47221: EQUAL
47222: AND
47223: OR
47224: IFFALSE 47234
// mode = 0 ;
47226: LD_ADDR_VAR 0 6
47230: PUSH
47231: LD_INT 0
47233: ST_TO_ADDR
// case mode of 0 :
47234: LD_VAR 0 6
47238: PUSH
47239: LD_INT 0
47241: DOUBLE
47242: EQUAL
47243: IFTRUE 47247
47245: GO 58700
47247: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47248: LD_ADDR_VAR 0 11
47252: PUSH
47253: LD_INT 0
47255: PUSH
47256: LD_INT 0
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 0
47265: PUSH
47266: LD_INT 1
47268: NEG
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 1
47276: PUSH
47277: LD_INT 0
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 1
47286: PUSH
47287: LD_INT 1
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 0
47296: PUSH
47297: LD_INT 1
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 1
47306: NEG
47307: PUSH
47308: LD_INT 0
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 1
47317: NEG
47318: PUSH
47319: LD_INT 1
47321: NEG
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 1
47329: NEG
47330: PUSH
47331: LD_INT 2
47333: NEG
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 0
47341: PUSH
47342: LD_INT 2
47344: NEG
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 1
47352: PUSH
47353: LD_INT 1
47355: NEG
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 1
47363: PUSH
47364: LD_INT 2
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 0
47373: PUSH
47374: LD_INT 2
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 1
47383: NEG
47384: PUSH
47385: LD_INT 1
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 1
47394: PUSH
47395: LD_INT 3
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 0
47404: PUSH
47405: LD_INT 3
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 1
47414: NEG
47415: PUSH
47416: LD_INT 2
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47441: LD_ADDR_VAR 0 12
47445: PUSH
47446: LD_INT 0
47448: PUSH
47449: LD_INT 0
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 0
47458: PUSH
47459: LD_INT 1
47461: NEG
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 1
47469: PUSH
47470: LD_INT 0
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: LD_INT 1
47479: PUSH
47480: LD_INT 1
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 0
47489: PUSH
47490: LD_INT 1
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 1
47499: NEG
47500: PUSH
47501: LD_INT 0
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 1
47510: NEG
47511: PUSH
47512: LD_INT 1
47514: NEG
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 1
47522: PUSH
47523: LD_INT 1
47525: NEG
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 2
47533: PUSH
47534: LD_INT 0
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 2
47543: PUSH
47544: LD_INT 1
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 1
47553: NEG
47554: PUSH
47555: LD_INT 1
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 2
47564: NEG
47565: PUSH
47566: LD_INT 0
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 2
47575: NEG
47576: PUSH
47577: LD_INT 1
47579: NEG
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 2
47587: NEG
47588: PUSH
47589: LD_INT 1
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 3
47598: NEG
47599: PUSH
47600: LD_INT 0
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 3
47609: NEG
47610: PUSH
47611: LD_INT 1
47613: NEG
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47637: LD_ADDR_VAR 0 13
47641: PUSH
47642: LD_INT 0
47644: PUSH
47645: LD_INT 0
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 0
47654: PUSH
47655: LD_INT 1
47657: NEG
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 1
47665: PUSH
47666: LD_INT 0
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 1
47675: PUSH
47676: LD_INT 1
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 0
47685: PUSH
47686: LD_INT 1
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 1
47695: NEG
47696: PUSH
47697: LD_INT 0
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 1
47706: NEG
47707: PUSH
47708: LD_INT 1
47710: NEG
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: LD_INT 1
47718: NEG
47719: PUSH
47720: LD_INT 2
47722: NEG
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 2
47730: PUSH
47731: LD_INT 1
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 2
47740: PUSH
47741: LD_INT 2
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 1
47750: PUSH
47751: LD_INT 2
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 2
47760: NEG
47761: PUSH
47762: LD_INT 1
47764: NEG
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 2
47772: NEG
47773: PUSH
47774: LD_INT 2
47776: NEG
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 2
47784: NEG
47785: PUSH
47786: LD_INT 3
47788: NEG
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 3
47796: NEG
47797: PUSH
47798: LD_INT 2
47800: NEG
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 3
47808: NEG
47809: PUSH
47810: LD_INT 3
47812: NEG
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47836: LD_ADDR_VAR 0 14
47840: PUSH
47841: LD_INT 0
47843: PUSH
47844: LD_INT 0
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 0
47853: PUSH
47854: LD_INT 1
47856: NEG
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 1
47864: PUSH
47865: LD_INT 0
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 1
47874: PUSH
47875: LD_INT 1
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 0
47884: PUSH
47885: LD_INT 1
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: LD_INT 1
47894: NEG
47895: PUSH
47896: LD_INT 0
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 1
47905: NEG
47906: PUSH
47907: LD_INT 1
47909: NEG
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 1
47917: NEG
47918: PUSH
47919: LD_INT 2
47921: NEG
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 0
47929: PUSH
47930: LD_INT 2
47932: NEG
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 1
47940: PUSH
47941: LD_INT 1
47943: NEG
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 1
47951: PUSH
47952: LD_INT 2
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 0
47961: PUSH
47962: LD_INT 2
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 1
47971: NEG
47972: PUSH
47973: LD_INT 1
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 1
47982: NEG
47983: PUSH
47984: LD_INT 3
47986: NEG
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 0
47994: PUSH
47995: LD_INT 3
47997: NEG
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 1
48005: PUSH
48006: LD_INT 2
48008: NEG
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48032: LD_ADDR_VAR 0 15
48036: PUSH
48037: LD_INT 0
48039: PUSH
48040: LD_INT 0
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_INT 0
48049: PUSH
48050: LD_INT 1
48052: NEG
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 1
48060: PUSH
48061: LD_INT 0
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 1
48070: PUSH
48071: LD_INT 1
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 0
48080: PUSH
48081: LD_INT 1
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 1
48090: NEG
48091: PUSH
48092: LD_INT 0
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 1
48101: NEG
48102: PUSH
48103: LD_INT 1
48105: NEG
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 1
48113: PUSH
48114: LD_INT 1
48116: NEG
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 2
48124: PUSH
48125: LD_INT 0
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 2
48134: PUSH
48135: LD_INT 1
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 1
48144: NEG
48145: PUSH
48146: LD_INT 1
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 2
48155: NEG
48156: PUSH
48157: LD_INT 0
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 2
48166: NEG
48167: PUSH
48168: LD_INT 1
48170: NEG
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: LD_INT 2
48178: PUSH
48179: LD_INT 1
48181: NEG
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 3
48189: PUSH
48190: LD_INT 0
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 3
48199: PUSH
48200: LD_INT 1
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48225: LD_ADDR_VAR 0 16
48229: PUSH
48230: LD_INT 0
48232: PUSH
48233: LD_INT 0
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 0
48242: PUSH
48243: LD_INT 1
48245: NEG
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 1
48253: PUSH
48254: LD_INT 0
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 1
48263: PUSH
48264: LD_INT 1
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 0
48273: PUSH
48274: LD_INT 1
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 1
48283: NEG
48284: PUSH
48285: LD_INT 0
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 1
48294: NEG
48295: PUSH
48296: LD_INT 1
48298: NEG
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 1
48306: NEG
48307: PUSH
48308: LD_INT 2
48310: NEG
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 2
48318: PUSH
48319: LD_INT 1
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: LD_INT 2
48328: PUSH
48329: LD_INT 2
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 1
48338: PUSH
48339: LD_INT 2
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 2
48348: NEG
48349: PUSH
48350: LD_INT 1
48352: NEG
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 2
48360: NEG
48361: PUSH
48362: LD_INT 2
48364: NEG
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 3
48372: PUSH
48373: LD_INT 2
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 3
48382: PUSH
48383: LD_INT 3
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 2
48392: PUSH
48393: LD_INT 3
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48418: LD_ADDR_VAR 0 17
48422: PUSH
48423: LD_INT 0
48425: PUSH
48426: LD_INT 0
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 0
48435: PUSH
48436: LD_INT 1
48438: NEG
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 1
48446: PUSH
48447: LD_INT 0
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 1
48456: PUSH
48457: LD_INT 1
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 0
48466: PUSH
48467: LD_INT 1
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 1
48476: NEG
48477: PUSH
48478: LD_INT 0
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 1
48487: NEG
48488: PUSH
48489: LD_INT 1
48491: NEG
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 1
48499: NEG
48500: PUSH
48501: LD_INT 2
48503: NEG
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 0
48511: PUSH
48512: LD_INT 2
48514: NEG
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 1
48522: PUSH
48523: LD_INT 1
48525: NEG
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 2
48533: PUSH
48534: LD_INT 0
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 2
48543: PUSH
48544: LD_INT 1
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 2
48553: PUSH
48554: LD_INT 2
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 1
48563: PUSH
48564: LD_INT 2
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 0
48573: PUSH
48574: LD_INT 2
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 1
48583: NEG
48584: PUSH
48585: LD_INT 1
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 2
48594: NEG
48595: PUSH
48596: LD_INT 0
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 2
48605: NEG
48606: PUSH
48607: LD_INT 1
48609: NEG
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 2
48617: NEG
48618: PUSH
48619: LD_INT 2
48621: NEG
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48648: LD_ADDR_VAR 0 18
48652: PUSH
48653: LD_INT 0
48655: PUSH
48656: LD_INT 0
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 0
48665: PUSH
48666: LD_INT 1
48668: NEG
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 1
48676: PUSH
48677: LD_INT 0
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 1
48686: PUSH
48687: LD_INT 1
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 0
48696: PUSH
48697: LD_INT 1
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 1
48706: NEG
48707: PUSH
48708: LD_INT 0
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 1
48717: NEG
48718: PUSH
48719: LD_INT 1
48721: NEG
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 1
48729: NEG
48730: PUSH
48731: LD_INT 2
48733: NEG
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 0
48741: PUSH
48742: LD_INT 2
48744: NEG
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 1
48752: PUSH
48753: LD_INT 1
48755: NEG
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 2
48763: PUSH
48764: LD_INT 0
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 2
48773: PUSH
48774: LD_INT 1
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 2
48783: PUSH
48784: LD_INT 2
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 1
48793: PUSH
48794: LD_INT 2
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 0
48803: PUSH
48804: LD_INT 2
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 1
48813: NEG
48814: PUSH
48815: LD_INT 1
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 2
48824: NEG
48825: PUSH
48826: LD_INT 0
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 2
48835: NEG
48836: PUSH
48837: LD_INT 1
48839: NEG
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 2
48847: NEG
48848: PUSH
48849: LD_INT 2
48851: NEG
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48878: LD_ADDR_VAR 0 19
48882: PUSH
48883: LD_INT 0
48885: PUSH
48886: LD_INT 0
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 0
48895: PUSH
48896: LD_INT 1
48898: NEG
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 1
48906: PUSH
48907: LD_INT 0
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 1
48916: PUSH
48917: LD_INT 1
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 0
48926: PUSH
48927: LD_INT 1
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 1
48936: NEG
48937: PUSH
48938: LD_INT 0
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 1
48947: NEG
48948: PUSH
48949: LD_INT 1
48951: NEG
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 1
48959: NEG
48960: PUSH
48961: LD_INT 2
48963: NEG
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 0
48971: PUSH
48972: LD_INT 2
48974: NEG
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 1
48982: PUSH
48983: LD_INT 1
48985: NEG
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 2
48993: PUSH
48994: LD_INT 0
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 2
49003: PUSH
49004: LD_INT 1
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 2
49013: PUSH
49014: LD_INT 2
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 1
49023: PUSH
49024: LD_INT 2
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 0
49033: PUSH
49034: LD_INT 2
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 1
49043: NEG
49044: PUSH
49045: LD_INT 1
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 2
49054: NEG
49055: PUSH
49056: LD_INT 0
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 2
49065: NEG
49066: PUSH
49067: LD_INT 1
49069: NEG
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 2
49077: NEG
49078: PUSH
49079: LD_INT 2
49081: NEG
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49108: LD_ADDR_VAR 0 20
49112: PUSH
49113: LD_INT 0
49115: PUSH
49116: LD_INT 0
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 0
49125: PUSH
49126: LD_INT 1
49128: NEG
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 1
49136: PUSH
49137: LD_INT 0
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 1
49146: PUSH
49147: LD_INT 1
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 0
49156: PUSH
49157: LD_INT 1
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 1
49166: NEG
49167: PUSH
49168: LD_INT 0
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 1
49177: NEG
49178: PUSH
49179: LD_INT 1
49181: NEG
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 1
49189: NEG
49190: PUSH
49191: LD_INT 2
49193: NEG
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 0
49201: PUSH
49202: LD_INT 2
49204: NEG
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 1
49212: PUSH
49213: LD_INT 1
49215: NEG
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 2
49223: PUSH
49224: LD_INT 0
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 2
49233: PUSH
49234: LD_INT 1
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 2
49243: PUSH
49244: LD_INT 2
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 1
49253: PUSH
49254: LD_INT 2
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 0
49263: PUSH
49264: LD_INT 2
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 1
49273: NEG
49274: PUSH
49275: LD_INT 1
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 2
49284: NEG
49285: PUSH
49286: LD_INT 0
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 2
49295: NEG
49296: PUSH
49297: LD_INT 1
49299: NEG
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 2
49307: NEG
49308: PUSH
49309: LD_INT 2
49311: NEG
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: LIST
49325: LIST
49326: LIST
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49338: LD_ADDR_VAR 0 21
49342: PUSH
49343: LD_INT 0
49345: PUSH
49346: LD_INT 0
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 0
49355: PUSH
49356: LD_INT 1
49358: NEG
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 1
49366: PUSH
49367: LD_INT 0
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 1
49376: PUSH
49377: LD_INT 1
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 0
49386: PUSH
49387: LD_INT 1
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 1
49396: NEG
49397: PUSH
49398: LD_INT 0
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 1
49407: NEG
49408: PUSH
49409: LD_INT 1
49411: NEG
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 1
49419: NEG
49420: PUSH
49421: LD_INT 2
49423: NEG
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 0
49431: PUSH
49432: LD_INT 2
49434: NEG
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 1
49442: PUSH
49443: LD_INT 1
49445: NEG
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 2
49453: PUSH
49454: LD_INT 0
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 2
49463: PUSH
49464: LD_INT 1
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 2
49473: PUSH
49474: LD_INT 2
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 1
49483: PUSH
49484: LD_INT 2
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 0
49493: PUSH
49494: LD_INT 2
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 1
49503: NEG
49504: PUSH
49505: LD_INT 1
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 2
49514: NEG
49515: PUSH
49516: LD_INT 0
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 2
49525: NEG
49526: PUSH
49527: LD_INT 1
49529: NEG
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 2
49537: NEG
49538: PUSH
49539: LD_INT 2
49541: NEG
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49568: LD_ADDR_VAR 0 22
49572: PUSH
49573: LD_INT 0
49575: PUSH
49576: LD_INT 0
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 0
49585: PUSH
49586: LD_INT 1
49588: NEG
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 1
49596: PUSH
49597: LD_INT 0
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 1
49606: PUSH
49607: LD_INT 1
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 0
49616: PUSH
49617: LD_INT 1
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 1
49626: NEG
49627: PUSH
49628: LD_INT 0
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 1
49637: NEG
49638: PUSH
49639: LD_INT 1
49641: NEG
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 1
49649: NEG
49650: PUSH
49651: LD_INT 2
49653: NEG
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 0
49661: PUSH
49662: LD_INT 2
49664: NEG
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 1
49672: PUSH
49673: LD_INT 1
49675: NEG
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 2
49683: PUSH
49684: LD_INT 0
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 2
49693: PUSH
49694: LD_INT 1
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 2
49703: PUSH
49704: LD_INT 2
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_INT 1
49713: PUSH
49714: LD_INT 2
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 0
49723: PUSH
49724: LD_INT 2
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 1
49733: NEG
49734: PUSH
49735: LD_INT 1
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 2
49744: NEG
49745: PUSH
49746: LD_INT 0
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 2
49755: NEG
49756: PUSH
49757: LD_INT 1
49759: NEG
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 2
49767: NEG
49768: PUSH
49769: LD_INT 2
49771: NEG
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49798: LD_ADDR_VAR 0 23
49802: PUSH
49803: LD_INT 0
49805: PUSH
49806: LD_INT 0
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 0
49815: PUSH
49816: LD_INT 1
49818: NEG
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 1
49826: PUSH
49827: LD_INT 0
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 1
49836: PUSH
49837: LD_INT 1
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 0
49846: PUSH
49847: LD_INT 1
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 1
49856: NEG
49857: PUSH
49858: LD_INT 0
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 1
49867: NEG
49868: PUSH
49869: LD_INT 1
49871: NEG
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 1
49879: NEG
49880: PUSH
49881: LD_INT 2
49883: NEG
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 0
49891: PUSH
49892: LD_INT 2
49894: NEG
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 1
49902: PUSH
49903: LD_INT 1
49905: NEG
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 2
49913: PUSH
49914: LD_INT 0
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 2
49923: PUSH
49924: LD_INT 1
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 2
49933: PUSH
49934: LD_INT 2
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_INT 1
49943: PUSH
49944: LD_INT 2
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 0
49953: PUSH
49954: LD_INT 2
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 1
49963: NEG
49964: PUSH
49965: LD_INT 1
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 2
49974: NEG
49975: PUSH
49976: LD_INT 0
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 2
49985: NEG
49986: PUSH
49987: LD_INT 1
49989: NEG
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 2
49997: NEG
49998: PUSH
49999: LD_INT 2
50001: NEG
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 2
50009: NEG
50010: PUSH
50011: LD_INT 3
50013: NEG
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 1
50021: NEG
50022: PUSH
50023: LD_INT 3
50025: NEG
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 1
50033: PUSH
50034: LD_INT 2
50036: NEG
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 2
50044: PUSH
50045: LD_INT 1
50047: NEG
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
50078: LD_ADDR_VAR 0 24
50082: PUSH
50083: LD_INT 0
50085: PUSH
50086: LD_INT 0
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 0
50095: PUSH
50096: LD_INT 1
50098: NEG
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 1
50106: PUSH
50107: LD_INT 0
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 1
50116: PUSH
50117: LD_INT 1
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 0
50126: PUSH
50127: LD_INT 1
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 1
50136: NEG
50137: PUSH
50138: LD_INT 0
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 1
50147: NEG
50148: PUSH
50149: LD_INT 1
50151: NEG
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 1
50159: NEG
50160: PUSH
50161: LD_INT 2
50163: NEG
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 0
50171: PUSH
50172: LD_INT 2
50174: NEG
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 1
50182: PUSH
50183: LD_INT 1
50185: NEG
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 2
50193: PUSH
50194: LD_INT 0
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 2
50203: PUSH
50204: LD_INT 1
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 2
50213: PUSH
50214: LD_INT 2
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 1
50223: PUSH
50224: LD_INT 2
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 0
50233: PUSH
50234: LD_INT 2
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 1
50243: NEG
50244: PUSH
50245: LD_INT 1
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 2
50254: NEG
50255: PUSH
50256: LD_INT 0
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 2
50265: NEG
50266: PUSH
50267: LD_INT 1
50269: NEG
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 2
50277: NEG
50278: PUSH
50279: LD_INT 2
50281: NEG
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 1
50289: PUSH
50290: LD_INT 2
50292: NEG
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 2
50300: PUSH
50301: LD_INT 1
50303: NEG
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 3
50311: PUSH
50312: LD_INT 1
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 3
50321: PUSH
50322: LD_INT 2
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
50354: LD_ADDR_VAR 0 25
50358: PUSH
50359: LD_INT 0
50361: PUSH
50362: LD_INT 0
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 0
50371: PUSH
50372: LD_INT 1
50374: NEG
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 1
50382: PUSH
50383: LD_INT 0
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 1
50392: PUSH
50393: LD_INT 1
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 0
50402: PUSH
50403: LD_INT 1
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 1
50412: NEG
50413: PUSH
50414: LD_INT 0
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 1
50423: NEG
50424: PUSH
50425: LD_INT 1
50427: NEG
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 1
50435: NEG
50436: PUSH
50437: LD_INT 2
50439: NEG
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 0
50447: PUSH
50448: LD_INT 2
50450: NEG
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 1
50458: PUSH
50459: LD_INT 1
50461: NEG
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 2
50469: PUSH
50470: LD_INT 0
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 2
50479: PUSH
50480: LD_INT 1
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 2
50489: PUSH
50490: LD_INT 2
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 1
50499: PUSH
50500: LD_INT 2
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 0
50509: PUSH
50510: LD_INT 2
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 1
50519: NEG
50520: PUSH
50521: LD_INT 1
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 2
50530: NEG
50531: PUSH
50532: LD_INT 0
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: LD_INT 2
50541: NEG
50542: PUSH
50543: LD_INT 1
50545: NEG
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 2
50553: NEG
50554: PUSH
50555: LD_INT 2
50557: NEG
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 3
50565: PUSH
50566: LD_INT 1
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 3
50575: PUSH
50576: LD_INT 2
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 2
50585: PUSH
50586: LD_INT 3
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 1
50595: PUSH
50596: LD_INT 3
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50628: LD_ADDR_VAR 0 26
50632: PUSH
50633: LD_INT 0
50635: PUSH
50636: LD_INT 0
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 0
50645: PUSH
50646: LD_INT 1
50648: NEG
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 1
50656: PUSH
50657: LD_INT 0
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 1
50666: PUSH
50667: LD_INT 1
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 0
50676: PUSH
50677: LD_INT 1
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 1
50686: NEG
50687: PUSH
50688: LD_INT 0
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: LD_INT 1
50697: NEG
50698: PUSH
50699: LD_INT 1
50701: NEG
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 1
50709: NEG
50710: PUSH
50711: LD_INT 2
50713: NEG
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 0
50721: PUSH
50722: LD_INT 2
50724: NEG
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 1
50732: PUSH
50733: LD_INT 1
50735: NEG
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 2
50743: PUSH
50744: LD_INT 0
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 2
50753: PUSH
50754: LD_INT 1
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 2
50763: PUSH
50764: LD_INT 2
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 1
50773: PUSH
50774: LD_INT 2
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 0
50783: PUSH
50784: LD_INT 2
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 1
50793: NEG
50794: PUSH
50795: LD_INT 1
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 2
50804: NEG
50805: PUSH
50806: LD_INT 0
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 2
50815: NEG
50816: PUSH
50817: LD_INT 1
50819: NEG
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 2
50827: NEG
50828: PUSH
50829: LD_INT 2
50831: NEG
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 2
50839: PUSH
50840: LD_INT 3
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 1
50849: PUSH
50850: LD_INT 3
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 1
50859: NEG
50860: PUSH
50861: LD_INT 2
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 2
50870: NEG
50871: PUSH
50872: LD_INT 1
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50904: LD_ADDR_VAR 0 27
50908: PUSH
50909: LD_INT 0
50911: PUSH
50912: LD_INT 0
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 0
50921: PUSH
50922: LD_INT 1
50924: NEG
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 1
50932: PUSH
50933: LD_INT 0
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 1
50942: PUSH
50943: LD_INT 1
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 0
50952: PUSH
50953: LD_INT 1
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 1
50962: NEG
50963: PUSH
50964: LD_INT 0
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 1
50973: NEG
50974: PUSH
50975: LD_INT 1
50977: NEG
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 1
50985: NEG
50986: PUSH
50987: LD_INT 2
50989: NEG
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 0
50997: PUSH
50998: LD_INT 2
51000: NEG
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 1
51008: PUSH
51009: LD_INT 1
51011: NEG
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 2
51019: PUSH
51020: LD_INT 0
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 2
51029: PUSH
51030: LD_INT 1
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 2
51039: PUSH
51040: LD_INT 2
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 1
51049: PUSH
51050: LD_INT 2
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 0
51059: PUSH
51060: LD_INT 2
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 1
51069: NEG
51070: PUSH
51071: LD_INT 1
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 2
51080: NEG
51081: PUSH
51082: LD_INT 0
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 2
51091: NEG
51092: PUSH
51093: LD_INT 1
51095: NEG
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 2
51103: NEG
51104: PUSH
51105: LD_INT 2
51107: NEG
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 1
51115: NEG
51116: PUSH
51117: LD_INT 2
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 2
51126: NEG
51127: PUSH
51128: LD_INT 1
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 3
51137: NEG
51138: PUSH
51139: LD_INT 1
51141: NEG
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 3
51149: NEG
51150: PUSH
51151: LD_INT 2
51153: NEG
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51184: LD_ADDR_VAR 0 28
51188: PUSH
51189: LD_INT 0
51191: PUSH
51192: LD_INT 0
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: LD_INT 0
51201: PUSH
51202: LD_INT 1
51204: NEG
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 1
51212: PUSH
51213: LD_INT 0
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 1
51222: PUSH
51223: LD_INT 1
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 0
51232: PUSH
51233: LD_INT 1
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 1
51242: NEG
51243: PUSH
51244: LD_INT 0
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 1
51253: NEG
51254: PUSH
51255: LD_INT 1
51257: NEG
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 1
51265: NEG
51266: PUSH
51267: LD_INT 2
51269: NEG
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 0
51277: PUSH
51278: LD_INT 2
51280: NEG
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: LD_INT 1
51288: PUSH
51289: LD_INT 1
51291: NEG
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: LD_INT 2
51299: PUSH
51300: LD_INT 0
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 2
51309: PUSH
51310: LD_INT 1
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 2
51319: PUSH
51320: LD_INT 2
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 1
51329: PUSH
51330: LD_INT 2
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 0
51339: PUSH
51340: LD_INT 2
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 1
51349: NEG
51350: PUSH
51351: LD_INT 1
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 2
51360: NEG
51361: PUSH
51362: LD_INT 0
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 2
51371: NEG
51372: PUSH
51373: LD_INT 1
51375: NEG
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 2
51383: NEG
51384: PUSH
51385: LD_INT 2
51387: NEG
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 2
51395: NEG
51396: PUSH
51397: LD_INT 3
51399: NEG
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 1
51407: NEG
51408: PUSH
51409: LD_INT 3
51411: NEG
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 3
51419: NEG
51420: PUSH
51421: LD_INT 1
51423: NEG
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 3
51431: NEG
51432: PUSH
51433: LD_INT 2
51435: NEG
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51466: LD_ADDR_VAR 0 29
51470: PUSH
51471: LD_INT 0
51473: PUSH
51474: LD_INT 0
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 0
51483: PUSH
51484: LD_INT 1
51486: NEG
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 1
51494: PUSH
51495: LD_INT 0
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 1
51504: PUSH
51505: LD_INT 1
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 0
51514: PUSH
51515: LD_INT 1
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 1
51524: NEG
51525: PUSH
51526: LD_INT 0
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 1
51535: NEG
51536: PUSH
51537: LD_INT 1
51539: NEG
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: LD_INT 1
51547: NEG
51548: PUSH
51549: LD_INT 2
51551: NEG
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 0
51559: PUSH
51560: LD_INT 2
51562: NEG
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: LD_INT 1
51570: PUSH
51571: LD_INT 1
51573: NEG
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 2
51581: PUSH
51582: LD_INT 0
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 2
51591: PUSH
51592: LD_INT 1
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 1
51601: PUSH
51602: LD_INT 2
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 0
51611: PUSH
51612: LD_INT 2
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 1
51621: NEG
51622: PUSH
51623: LD_INT 1
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 2
51632: NEG
51633: PUSH
51634: LD_INT 1
51636: NEG
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 2
51644: NEG
51645: PUSH
51646: LD_INT 2
51648: NEG
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 2
51656: NEG
51657: PUSH
51658: LD_INT 3
51660: NEG
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 2
51668: PUSH
51669: LD_INT 1
51671: NEG
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 3
51679: PUSH
51680: LD_INT 1
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 1
51689: PUSH
51690: LD_INT 3
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 1
51699: NEG
51700: PUSH
51701: LD_INT 2
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 3
51710: NEG
51711: PUSH
51712: LD_INT 2
51714: NEG
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51745: LD_ADDR_VAR 0 30
51749: PUSH
51750: LD_INT 0
51752: PUSH
51753: LD_INT 0
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 0
51762: PUSH
51763: LD_INT 1
51765: NEG
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 1
51773: PUSH
51774: LD_INT 0
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 1
51783: PUSH
51784: LD_INT 1
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 0
51793: PUSH
51794: LD_INT 1
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 1
51803: NEG
51804: PUSH
51805: LD_INT 0
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: LD_INT 1
51814: NEG
51815: PUSH
51816: LD_INT 1
51818: NEG
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 1
51826: NEG
51827: PUSH
51828: LD_INT 2
51830: NEG
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 0
51838: PUSH
51839: LD_INT 2
51841: NEG
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 1
51849: PUSH
51850: LD_INT 1
51852: NEG
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 2
51860: PUSH
51861: LD_INT 0
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 2
51870: PUSH
51871: LD_INT 1
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 2
51880: PUSH
51881: LD_INT 2
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 1
51890: PUSH
51891: LD_INT 2
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 1
51900: NEG
51901: PUSH
51902: LD_INT 1
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 2
51911: NEG
51912: PUSH
51913: LD_INT 0
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 2
51922: NEG
51923: PUSH
51924: LD_INT 1
51926: NEG
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 1
51934: NEG
51935: PUSH
51936: LD_INT 3
51938: NEG
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 1
51946: PUSH
51947: LD_INT 2
51949: NEG
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 3
51957: PUSH
51958: LD_INT 2
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 2
51967: PUSH
51968: LD_INT 3
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 2
51977: NEG
51978: PUSH
51979: LD_INT 1
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 3
51988: NEG
51989: PUSH
51990: LD_INT 1
51992: NEG
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52023: LD_ADDR_VAR 0 31
52027: PUSH
52028: LD_INT 0
52030: PUSH
52031: LD_INT 0
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 0
52040: PUSH
52041: LD_INT 1
52043: NEG
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 1
52051: PUSH
52052: LD_INT 0
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 1
52061: PUSH
52062: LD_INT 1
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 0
52071: PUSH
52072: LD_INT 1
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 1
52081: NEG
52082: PUSH
52083: LD_INT 0
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 1
52092: NEG
52093: PUSH
52094: LD_INT 1
52096: NEG
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 1
52104: NEG
52105: PUSH
52106: LD_INT 2
52108: NEG
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 1
52116: PUSH
52117: LD_INT 1
52119: NEG
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 2
52127: PUSH
52128: LD_INT 0
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 2
52137: PUSH
52138: LD_INT 1
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 2
52147: PUSH
52148: LD_INT 2
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 1
52157: PUSH
52158: LD_INT 2
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 0
52167: PUSH
52168: LD_INT 2
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 1
52177: NEG
52178: PUSH
52179: LD_INT 1
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 2
52188: NEG
52189: PUSH
52190: LD_INT 1
52192: NEG
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 2
52200: NEG
52201: PUSH
52202: LD_INT 2
52204: NEG
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 2
52212: NEG
52213: PUSH
52214: LD_INT 3
52216: NEG
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 2
52224: PUSH
52225: LD_INT 1
52227: NEG
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 3
52235: PUSH
52236: LD_INT 1
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 1
52245: PUSH
52246: LD_INT 3
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 1
52255: NEG
52256: PUSH
52257: LD_INT 2
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 3
52266: NEG
52267: PUSH
52268: LD_INT 2
52270: NEG
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52301: LD_ADDR_VAR 0 32
52305: PUSH
52306: LD_INT 0
52308: PUSH
52309: LD_INT 0
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 0
52318: PUSH
52319: LD_INT 1
52321: NEG
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: LD_INT 1
52329: PUSH
52330: LD_INT 0
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 1
52339: PUSH
52340: LD_INT 1
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 0
52349: PUSH
52350: LD_INT 1
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 1
52359: NEG
52360: PUSH
52361: LD_INT 0
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 1
52370: NEG
52371: PUSH
52372: LD_INT 1
52374: NEG
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 1
52382: NEG
52383: PUSH
52384: LD_INT 2
52386: NEG
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 0
52394: PUSH
52395: LD_INT 2
52397: NEG
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 1
52405: PUSH
52406: LD_INT 1
52408: NEG
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 2
52416: PUSH
52417: LD_INT 1
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 2
52426: PUSH
52427: LD_INT 2
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 1
52436: PUSH
52437: LD_INT 2
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 0
52446: PUSH
52447: LD_INT 2
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 1
52456: NEG
52457: PUSH
52458: LD_INT 1
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 2
52467: NEG
52468: PUSH
52469: LD_INT 0
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 2
52478: NEG
52479: PUSH
52480: LD_INT 1
52482: NEG
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 1
52490: NEG
52491: PUSH
52492: LD_INT 3
52494: NEG
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 1
52502: PUSH
52503: LD_INT 2
52505: NEG
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 3
52513: PUSH
52514: LD_INT 2
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 2
52523: PUSH
52524: LD_INT 3
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 2
52533: NEG
52534: PUSH
52535: LD_INT 1
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 3
52544: NEG
52545: PUSH
52546: LD_INT 1
52548: NEG
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52579: LD_ADDR_VAR 0 33
52583: PUSH
52584: LD_INT 0
52586: PUSH
52587: LD_INT 0
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 0
52596: PUSH
52597: LD_INT 1
52599: NEG
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 1
52607: PUSH
52608: LD_INT 0
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 1
52617: PUSH
52618: LD_INT 1
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 0
52627: PUSH
52628: LD_INT 1
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 1
52637: NEG
52638: PUSH
52639: LD_INT 0
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 1
52648: NEG
52649: PUSH
52650: LD_INT 1
52652: NEG
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 1
52660: NEG
52661: PUSH
52662: LD_INT 2
52664: NEG
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: LD_INT 1
52672: PUSH
52673: LD_INT 1
52675: NEG
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 2
52683: PUSH
52684: LD_INT 0
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 2
52693: PUSH
52694: LD_INT 1
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 1
52703: PUSH
52704: LD_INT 2
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 0
52713: PUSH
52714: LD_INT 2
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 1
52723: NEG
52724: PUSH
52725: LD_INT 1
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 2
52734: NEG
52735: PUSH
52736: LD_INT 0
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 2
52745: NEG
52746: PUSH
52747: LD_INT 1
52749: NEG
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 2
52757: NEG
52758: PUSH
52759: LD_INT 2
52761: NEG
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 2
52769: NEG
52770: PUSH
52771: LD_INT 3
52773: NEG
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 2
52781: PUSH
52782: LD_INT 1
52784: NEG
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 3
52792: PUSH
52793: LD_INT 1
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 1
52802: PUSH
52803: LD_INT 3
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 1
52812: NEG
52813: PUSH
52814: LD_INT 2
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 3
52823: NEG
52824: PUSH
52825: LD_INT 2
52827: NEG
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52858: LD_ADDR_VAR 0 34
52862: PUSH
52863: LD_INT 0
52865: PUSH
52866: LD_INT 0
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 0
52875: PUSH
52876: LD_INT 1
52878: NEG
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 1
52886: PUSH
52887: LD_INT 0
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 1
52896: PUSH
52897: LD_INT 1
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 0
52906: PUSH
52907: LD_INT 1
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 1
52916: NEG
52917: PUSH
52918: LD_INT 0
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 1
52927: NEG
52928: PUSH
52929: LD_INT 1
52931: NEG
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 1
52939: NEG
52940: PUSH
52941: LD_INT 2
52943: NEG
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 0
52951: PUSH
52952: LD_INT 2
52954: NEG
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 1
52962: PUSH
52963: LD_INT 1
52965: NEG
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 2
52973: PUSH
52974: LD_INT 1
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 2
52983: PUSH
52984: LD_INT 2
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 1
52993: PUSH
52994: LD_INT 2
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 1
53003: NEG
53004: PUSH
53005: LD_INT 1
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 2
53014: NEG
53015: PUSH
53016: LD_INT 0
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 2
53025: NEG
53026: PUSH
53027: LD_INT 1
53029: NEG
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 2
53037: NEG
53038: PUSH
53039: LD_INT 2
53041: NEG
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 1
53049: NEG
53050: PUSH
53051: LD_INT 3
53053: NEG
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 1
53061: PUSH
53062: LD_INT 2
53064: NEG
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 3
53072: PUSH
53073: LD_INT 2
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 2
53082: PUSH
53083: LD_INT 3
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 2
53092: NEG
53093: PUSH
53094: LD_INT 1
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 3
53103: NEG
53104: PUSH
53105: LD_INT 1
53107: NEG
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53138: LD_ADDR_VAR 0 35
53142: PUSH
53143: LD_INT 0
53145: PUSH
53146: LD_INT 0
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 0
53155: PUSH
53156: LD_INT 1
53158: NEG
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 1
53166: PUSH
53167: LD_INT 0
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 1
53176: PUSH
53177: LD_INT 1
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 0
53186: PUSH
53187: LD_INT 1
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 1
53196: NEG
53197: PUSH
53198: LD_INT 0
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 1
53207: NEG
53208: PUSH
53209: LD_INT 1
53211: NEG
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 2
53219: PUSH
53220: LD_INT 1
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 2
53229: NEG
53230: PUSH
53231: LD_INT 1
53233: NEG
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53250: LD_ADDR_VAR 0 36
53254: PUSH
53255: LD_INT 0
53257: PUSH
53258: LD_INT 0
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 0
53267: PUSH
53268: LD_INT 1
53270: NEG
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 1
53278: PUSH
53279: LD_INT 0
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 1
53288: PUSH
53289: LD_INT 1
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 0
53298: PUSH
53299: LD_INT 1
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 1
53308: NEG
53309: PUSH
53310: LD_INT 0
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 1
53319: NEG
53320: PUSH
53321: LD_INT 1
53323: NEG
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 1
53331: NEG
53332: PUSH
53333: LD_INT 2
53335: NEG
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 1
53343: PUSH
53344: LD_INT 2
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53362: LD_ADDR_VAR 0 37
53366: PUSH
53367: LD_INT 0
53369: PUSH
53370: LD_INT 0
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 0
53379: PUSH
53380: LD_INT 1
53382: NEG
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 1
53390: PUSH
53391: LD_INT 0
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 1
53400: PUSH
53401: LD_INT 1
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 0
53410: PUSH
53411: LD_INT 1
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 1
53420: NEG
53421: PUSH
53422: LD_INT 0
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 1
53431: NEG
53432: PUSH
53433: LD_INT 1
53435: NEG
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 1
53443: PUSH
53444: LD_INT 1
53446: NEG
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 1
53454: NEG
53455: PUSH
53456: LD_INT 1
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53474: LD_ADDR_VAR 0 38
53478: PUSH
53479: LD_INT 0
53481: PUSH
53482: LD_INT 0
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 0
53491: PUSH
53492: LD_INT 1
53494: NEG
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 1
53502: PUSH
53503: LD_INT 0
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 1
53512: PUSH
53513: LD_INT 1
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 0
53522: PUSH
53523: LD_INT 1
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 1
53532: NEG
53533: PUSH
53534: LD_INT 0
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 1
53543: NEG
53544: PUSH
53545: LD_INT 1
53547: NEG
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 2
53555: PUSH
53556: LD_INT 1
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 2
53565: NEG
53566: PUSH
53567: LD_INT 1
53569: NEG
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53586: LD_ADDR_VAR 0 39
53590: PUSH
53591: LD_INT 0
53593: PUSH
53594: LD_INT 0
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 0
53603: PUSH
53604: LD_INT 1
53606: NEG
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 1
53614: PUSH
53615: LD_INT 0
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 1
53624: PUSH
53625: LD_INT 1
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 0
53634: PUSH
53635: LD_INT 1
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 1
53644: NEG
53645: PUSH
53646: LD_INT 0
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 1
53655: NEG
53656: PUSH
53657: LD_INT 1
53659: NEG
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 1
53667: NEG
53668: PUSH
53669: LD_INT 2
53671: NEG
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 1
53679: PUSH
53680: LD_INT 2
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53698: LD_ADDR_VAR 0 40
53702: PUSH
53703: LD_INT 0
53705: PUSH
53706: LD_INT 0
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 0
53715: PUSH
53716: LD_INT 1
53718: NEG
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 1
53726: PUSH
53727: LD_INT 0
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 1
53736: PUSH
53737: LD_INT 1
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 0
53746: PUSH
53747: LD_INT 1
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 1
53756: NEG
53757: PUSH
53758: LD_INT 0
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 1
53767: NEG
53768: PUSH
53769: LD_INT 1
53771: NEG
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 1
53779: PUSH
53780: LD_INT 1
53782: NEG
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 1
53790: NEG
53791: PUSH
53792: LD_INT 1
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53810: LD_ADDR_VAR 0 41
53814: PUSH
53815: LD_INT 0
53817: PUSH
53818: LD_INT 0
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 0
53827: PUSH
53828: LD_INT 1
53830: NEG
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 1
53838: PUSH
53839: LD_INT 0
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 1
53848: PUSH
53849: LD_INT 1
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 0
53858: PUSH
53859: LD_INT 1
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 1
53868: NEG
53869: PUSH
53870: LD_INT 0
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 1
53879: NEG
53880: PUSH
53881: LD_INT 1
53883: NEG
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 1
53891: NEG
53892: PUSH
53893: LD_INT 2
53895: NEG
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 1
53903: PUSH
53904: LD_INT 1
53906: NEG
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 2
53914: PUSH
53915: LD_INT 0
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 2
53924: PUSH
53925: LD_INT 1
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 2
53934: PUSH
53935: LD_INT 2
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 1
53944: PUSH
53945: LD_INT 2
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 1
53954: NEG
53955: PUSH
53956: LD_INT 1
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 2
53965: NEG
53966: PUSH
53967: LD_INT 0
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 2
53976: NEG
53977: PUSH
53978: LD_INT 1
53980: NEG
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 2
53988: NEG
53989: PUSH
53990: LD_INT 2
53992: NEG
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 2
54000: NEG
54001: PUSH
54002: LD_INT 3
54004: NEG
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 2
54012: PUSH
54013: LD_INT 1
54015: NEG
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 3
54023: PUSH
54024: LD_INT 0
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 3
54033: PUSH
54034: LD_INT 1
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 3
54043: PUSH
54044: LD_INT 2
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 3
54053: PUSH
54054: LD_INT 3
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 2
54063: PUSH
54064: LD_INT 3
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 2
54073: NEG
54074: PUSH
54075: LD_INT 1
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 3
54084: NEG
54085: PUSH
54086: LD_INT 0
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 3
54095: NEG
54096: PUSH
54097: LD_INT 1
54099: NEG
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: LD_INT 3
54107: NEG
54108: PUSH
54109: LD_INT 2
54111: NEG
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 3
54119: NEG
54120: PUSH
54121: LD_INT 3
54123: NEG
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54160: LD_ADDR_VAR 0 42
54164: PUSH
54165: LD_INT 0
54167: PUSH
54168: LD_INT 0
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 0
54177: PUSH
54178: LD_INT 1
54180: NEG
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 1
54188: PUSH
54189: LD_INT 0
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 1
54198: PUSH
54199: LD_INT 1
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 0
54208: PUSH
54209: LD_INT 1
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 1
54218: NEG
54219: PUSH
54220: LD_INT 0
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 1
54229: NEG
54230: PUSH
54231: LD_INT 1
54233: NEG
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 1
54241: NEG
54242: PUSH
54243: LD_INT 2
54245: NEG
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 0
54253: PUSH
54254: LD_INT 2
54256: NEG
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 1
54264: PUSH
54265: LD_INT 1
54267: NEG
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 2
54275: PUSH
54276: LD_INT 1
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 2
54285: PUSH
54286: LD_INT 2
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 1
54295: PUSH
54296: LD_INT 2
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 0
54305: PUSH
54306: LD_INT 2
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 1
54315: NEG
54316: PUSH
54317: LD_INT 1
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 2
54326: NEG
54327: PUSH
54328: LD_INT 1
54330: NEG
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 2
54338: NEG
54339: PUSH
54340: LD_INT 2
54342: NEG
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 2
54350: NEG
54351: PUSH
54352: LD_INT 3
54354: NEG
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 1
54362: NEG
54363: PUSH
54364: LD_INT 3
54366: NEG
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 0
54374: PUSH
54375: LD_INT 3
54377: NEG
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 1
54385: PUSH
54386: LD_INT 2
54388: NEG
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 3
54396: PUSH
54397: LD_INT 2
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 3
54406: PUSH
54407: LD_INT 3
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 2
54416: PUSH
54417: LD_INT 3
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 1
54426: PUSH
54427: LD_INT 3
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 0
54436: PUSH
54437: LD_INT 3
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 1
54446: NEG
54447: PUSH
54448: LD_INT 2
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 3
54457: NEG
54458: PUSH
54459: LD_INT 2
54461: NEG
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 3
54469: NEG
54470: PUSH
54471: LD_INT 3
54473: NEG
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: LIST
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54510: LD_ADDR_VAR 0 43
54514: PUSH
54515: LD_INT 0
54517: PUSH
54518: LD_INT 0
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 0
54527: PUSH
54528: LD_INT 1
54530: NEG
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 1
54538: PUSH
54539: LD_INT 0
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 1
54548: PUSH
54549: LD_INT 1
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 0
54558: PUSH
54559: LD_INT 1
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 1
54568: NEG
54569: PUSH
54570: LD_INT 0
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 1
54579: NEG
54580: PUSH
54581: LD_INT 1
54583: NEG
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 1
54591: NEG
54592: PUSH
54593: LD_INT 2
54595: NEG
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 0
54603: PUSH
54604: LD_INT 2
54606: NEG
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 1
54614: PUSH
54615: LD_INT 1
54617: NEG
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 2
54625: PUSH
54626: LD_INT 0
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 2
54635: PUSH
54636: LD_INT 1
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 1
54645: PUSH
54646: LD_INT 2
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 0
54655: PUSH
54656: LD_INT 2
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 1
54665: NEG
54666: PUSH
54667: LD_INT 1
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 2
54676: NEG
54677: PUSH
54678: LD_INT 0
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 2
54687: NEG
54688: PUSH
54689: LD_INT 1
54691: NEG
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 1
54699: NEG
54700: PUSH
54701: LD_INT 3
54703: NEG
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 0
54711: PUSH
54712: LD_INT 3
54714: NEG
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 1
54722: PUSH
54723: LD_INT 2
54725: NEG
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 2
54733: PUSH
54734: LD_INT 1
54736: NEG
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 3
54744: PUSH
54745: LD_INT 0
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 3
54754: PUSH
54755: LD_INT 1
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 1
54764: PUSH
54765: LD_INT 3
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 0
54774: PUSH
54775: LD_INT 3
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 1
54784: NEG
54785: PUSH
54786: LD_INT 2
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 2
54795: NEG
54796: PUSH
54797: LD_INT 1
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 3
54806: NEG
54807: PUSH
54808: LD_INT 0
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 3
54817: NEG
54818: PUSH
54819: LD_INT 1
54821: NEG
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54858: LD_ADDR_VAR 0 44
54862: PUSH
54863: LD_INT 0
54865: PUSH
54866: LD_INT 0
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 0
54875: PUSH
54876: LD_INT 1
54878: NEG
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 1
54886: PUSH
54887: LD_INT 0
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 1
54896: PUSH
54897: LD_INT 1
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 0
54906: PUSH
54907: LD_INT 1
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 1
54916: NEG
54917: PUSH
54918: LD_INT 0
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 1
54927: NEG
54928: PUSH
54929: LD_INT 1
54931: NEG
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 1
54939: NEG
54940: PUSH
54941: LD_INT 2
54943: NEG
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 1
54951: PUSH
54952: LD_INT 1
54954: NEG
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 2
54962: PUSH
54963: LD_INT 0
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 2
54972: PUSH
54973: LD_INT 1
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 2
54982: PUSH
54983: LD_INT 2
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 1
54992: PUSH
54993: LD_INT 2
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 1
55002: NEG
55003: PUSH
55004: LD_INT 1
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 2
55013: NEG
55014: PUSH
55015: LD_INT 0
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 2
55024: NEG
55025: PUSH
55026: LD_INT 1
55028: NEG
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 2
55036: NEG
55037: PUSH
55038: LD_INT 2
55040: NEG
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 2
55048: NEG
55049: PUSH
55050: LD_INT 3
55052: NEG
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 2
55060: PUSH
55061: LD_INT 1
55063: NEG
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 3
55071: PUSH
55072: LD_INT 0
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 3
55081: PUSH
55082: LD_INT 1
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 3
55091: PUSH
55092: LD_INT 2
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 3
55101: PUSH
55102: LD_INT 3
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 2
55111: PUSH
55112: LD_INT 3
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 2
55121: NEG
55122: PUSH
55123: LD_INT 1
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 3
55132: NEG
55133: PUSH
55134: LD_INT 0
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 3
55143: NEG
55144: PUSH
55145: LD_INT 1
55147: NEG
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 3
55155: NEG
55156: PUSH
55157: LD_INT 2
55159: NEG
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 3
55167: NEG
55168: PUSH
55169: LD_INT 3
55171: NEG
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55208: LD_ADDR_VAR 0 45
55212: PUSH
55213: LD_INT 0
55215: PUSH
55216: LD_INT 0
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 0
55225: PUSH
55226: LD_INT 1
55228: NEG
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 1
55236: PUSH
55237: LD_INT 0
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 1
55246: PUSH
55247: LD_INT 1
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 0
55256: PUSH
55257: LD_INT 1
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 1
55266: NEG
55267: PUSH
55268: LD_INT 0
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 1
55277: NEG
55278: PUSH
55279: LD_INT 1
55281: NEG
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 1
55289: NEG
55290: PUSH
55291: LD_INT 2
55293: NEG
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 0
55301: PUSH
55302: LD_INT 2
55304: NEG
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 1
55312: PUSH
55313: LD_INT 1
55315: NEG
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 2
55323: PUSH
55324: LD_INT 1
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 2
55333: PUSH
55334: LD_INT 2
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 1
55343: PUSH
55344: LD_INT 2
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 0
55353: PUSH
55354: LD_INT 2
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 1
55363: NEG
55364: PUSH
55365: LD_INT 1
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 2
55374: NEG
55375: PUSH
55376: LD_INT 1
55378: NEG
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 2
55386: NEG
55387: PUSH
55388: LD_INT 2
55390: NEG
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 2
55398: NEG
55399: PUSH
55400: LD_INT 3
55402: NEG
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 1
55410: NEG
55411: PUSH
55412: LD_INT 3
55414: NEG
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 0
55422: PUSH
55423: LD_INT 3
55425: NEG
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 1
55433: PUSH
55434: LD_INT 2
55436: NEG
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 3
55444: PUSH
55445: LD_INT 2
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 3
55454: PUSH
55455: LD_INT 3
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 2
55464: PUSH
55465: LD_INT 3
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 1
55474: PUSH
55475: LD_INT 3
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 0
55484: PUSH
55485: LD_INT 3
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 1
55494: NEG
55495: PUSH
55496: LD_INT 2
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 3
55505: NEG
55506: PUSH
55507: LD_INT 2
55509: NEG
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 3
55517: NEG
55518: PUSH
55519: LD_INT 3
55521: NEG
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55558: LD_ADDR_VAR 0 46
55562: PUSH
55563: LD_INT 0
55565: PUSH
55566: LD_INT 0
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 0
55575: PUSH
55576: LD_INT 1
55578: NEG
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 1
55586: PUSH
55587: LD_INT 0
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 1
55596: PUSH
55597: LD_INT 1
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 0
55606: PUSH
55607: LD_INT 1
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 1
55616: NEG
55617: PUSH
55618: LD_INT 0
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 1
55627: NEG
55628: PUSH
55629: LD_INT 1
55631: NEG
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 1
55639: NEG
55640: PUSH
55641: LD_INT 2
55643: NEG
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 0
55651: PUSH
55652: LD_INT 2
55654: NEG
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 1
55662: PUSH
55663: LD_INT 1
55665: NEG
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 2
55673: PUSH
55674: LD_INT 0
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 2
55683: PUSH
55684: LD_INT 1
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 1
55693: PUSH
55694: LD_INT 2
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 0
55703: PUSH
55704: LD_INT 2
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 1
55713: NEG
55714: PUSH
55715: LD_INT 1
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 2
55724: NEG
55725: PUSH
55726: LD_INT 0
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 2
55735: NEG
55736: PUSH
55737: LD_INT 1
55739: NEG
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 1
55747: NEG
55748: PUSH
55749: LD_INT 3
55751: NEG
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 0
55759: PUSH
55760: LD_INT 3
55762: NEG
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 1
55770: PUSH
55771: LD_INT 2
55773: NEG
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 2
55781: PUSH
55782: LD_INT 1
55784: NEG
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 3
55792: PUSH
55793: LD_INT 0
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 3
55802: PUSH
55803: LD_INT 1
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 1
55812: PUSH
55813: LD_INT 3
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 0
55822: PUSH
55823: LD_INT 3
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 1
55832: NEG
55833: PUSH
55834: LD_INT 2
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 2
55843: NEG
55844: PUSH
55845: LD_INT 1
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 3
55854: NEG
55855: PUSH
55856: LD_INT 0
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 3
55865: NEG
55866: PUSH
55867: LD_INT 1
55869: NEG
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55906: LD_ADDR_VAR 0 47
55910: PUSH
55911: LD_INT 0
55913: PUSH
55914: LD_INT 0
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 0
55923: PUSH
55924: LD_INT 1
55926: NEG
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 1
55934: PUSH
55935: LD_INT 0
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 1
55944: PUSH
55945: LD_INT 1
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 0
55954: PUSH
55955: LD_INT 1
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 1
55964: NEG
55965: PUSH
55966: LD_INT 0
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 1
55975: NEG
55976: PUSH
55977: LD_INT 1
55979: NEG
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 1
55987: NEG
55988: PUSH
55989: LD_INT 2
55991: NEG
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 0
55999: PUSH
56000: LD_INT 2
56002: NEG
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 1
56010: PUSH
56011: LD_INT 1
56013: NEG
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 2
56021: NEG
56022: PUSH
56023: LD_INT 1
56025: NEG
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 2
56033: NEG
56034: PUSH
56035: LD_INT 2
56037: NEG
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56057: LD_ADDR_VAR 0 48
56061: PUSH
56062: LD_INT 0
56064: PUSH
56065: LD_INT 0
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 0
56074: PUSH
56075: LD_INT 1
56077: NEG
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 1
56085: PUSH
56086: LD_INT 0
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 1
56095: PUSH
56096: LD_INT 1
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 0
56105: PUSH
56106: LD_INT 1
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: LD_INT 1
56115: NEG
56116: PUSH
56117: LD_INT 0
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 1
56126: NEG
56127: PUSH
56128: LD_INT 1
56130: NEG
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 1
56138: NEG
56139: PUSH
56140: LD_INT 2
56142: NEG
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 0
56150: PUSH
56151: LD_INT 2
56153: NEG
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 1
56161: PUSH
56162: LD_INT 1
56164: NEG
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 2
56172: PUSH
56173: LD_INT 0
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 2
56182: PUSH
56183: LD_INT 1
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56204: LD_ADDR_VAR 0 49
56208: PUSH
56209: LD_INT 0
56211: PUSH
56212: LD_INT 0
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 0
56221: PUSH
56222: LD_INT 1
56224: NEG
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 1
56232: PUSH
56233: LD_INT 0
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: LD_INT 1
56242: PUSH
56243: LD_INT 1
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 0
56252: PUSH
56253: LD_INT 1
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 1
56262: NEG
56263: PUSH
56264: LD_INT 0
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 1
56273: NEG
56274: PUSH
56275: LD_INT 1
56277: NEG
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 1
56285: PUSH
56286: LD_INT 1
56288: NEG
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 2
56296: PUSH
56297: LD_INT 0
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 2
56306: PUSH
56307: LD_INT 1
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 2
56316: PUSH
56317: LD_INT 2
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 1
56326: PUSH
56327: LD_INT 2
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56348: LD_ADDR_VAR 0 50
56352: PUSH
56353: LD_INT 0
56355: PUSH
56356: LD_INT 0
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 0
56365: PUSH
56366: LD_INT 1
56368: NEG
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 1
56376: PUSH
56377: LD_INT 0
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 1
56386: PUSH
56387: LD_INT 1
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 0
56396: PUSH
56397: LD_INT 1
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 1
56406: NEG
56407: PUSH
56408: LD_INT 0
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 1
56417: NEG
56418: PUSH
56419: LD_INT 1
56421: NEG
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 2
56429: PUSH
56430: LD_INT 1
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 2
56439: PUSH
56440: LD_INT 2
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 1
56449: PUSH
56450: LD_INT 2
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 0
56459: PUSH
56460: LD_INT 2
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 1
56469: NEG
56470: PUSH
56471: LD_INT 1
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56492: LD_ADDR_VAR 0 51
56496: PUSH
56497: LD_INT 0
56499: PUSH
56500: LD_INT 0
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 0
56509: PUSH
56510: LD_INT 1
56512: NEG
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 1
56520: PUSH
56521: LD_INT 0
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 1
56530: PUSH
56531: LD_INT 1
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 0
56540: PUSH
56541: LD_INT 1
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 1
56550: NEG
56551: PUSH
56552: LD_INT 0
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 1
56561: NEG
56562: PUSH
56563: LD_INT 1
56565: NEG
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 1
56573: PUSH
56574: LD_INT 2
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 0
56583: PUSH
56584: LD_INT 2
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 1
56593: NEG
56594: PUSH
56595: LD_INT 1
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: LD_INT 2
56604: NEG
56605: PUSH
56606: LD_INT 0
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: LD_INT 2
56615: NEG
56616: PUSH
56617: LD_INT 1
56619: NEG
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56639: LD_ADDR_VAR 0 52
56643: PUSH
56644: LD_INT 0
56646: PUSH
56647: LD_INT 0
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 0
56656: PUSH
56657: LD_INT 1
56659: NEG
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 1
56667: PUSH
56668: LD_INT 0
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 1
56677: PUSH
56678: LD_INT 1
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 0
56687: PUSH
56688: LD_INT 1
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 1
56697: NEG
56698: PUSH
56699: LD_INT 0
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 1
56708: NEG
56709: PUSH
56710: LD_INT 1
56712: NEG
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 1
56720: NEG
56721: PUSH
56722: LD_INT 2
56724: NEG
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 1
56732: NEG
56733: PUSH
56734: LD_INT 1
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 2
56743: NEG
56744: PUSH
56745: LD_INT 0
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 2
56754: NEG
56755: PUSH
56756: LD_INT 1
56758: NEG
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 2
56766: NEG
56767: PUSH
56768: LD_INT 2
56770: NEG
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56790: LD_ADDR_VAR 0 53
56794: PUSH
56795: LD_INT 0
56797: PUSH
56798: LD_INT 0
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 0
56807: PUSH
56808: LD_INT 1
56810: NEG
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 1
56818: PUSH
56819: LD_INT 0
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 1
56828: PUSH
56829: LD_INT 1
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 0
56838: PUSH
56839: LD_INT 1
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 1
56848: NEG
56849: PUSH
56850: LD_INT 0
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 1
56859: NEG
56860: PUSH
56861: LD_INT 1
56863: NEG
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 1
56871: NEG
56872: PUSH
56873: LD_INT 2
56875: NEG
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 0
56883: PUSH
56884: LD_INT 2
56886: NEG
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 1
56894: PUSH
56895: LD_INT 1
56897: NEG
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 2
56905: PUSH
56906: LD_INT 0
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 2
56915: PUSH
56916: LD_INT 1
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 2
56925: PUSH
56926: LD_INT 2
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 1
56935: PUSH
56936: LD_INT 2
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 0
56945: PUSH
56946: LD_INT 2
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 1
56955: NEG
56956: PUSH
56957: LD_INT 1
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 2
56966: NEG
56967: PUSH
56968: LD_INT 0
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 2
56977: NEG
56978: PUSH
56979: LD_INT 1
56981: NEG
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 2
56989: NEG
56990: PUSH
56991: LD_INT 2
56993: NEG
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57020: LD_ADDR_VAR 0 54
57024: PUSH
57025: LD_INT 0
57027: PUSH
57028: LD_INT 0
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 0
57037: PUSH
57038: LD_INT 1
57040: NEG
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 1
57048: PUSH
57049: LD_INT 0
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: LD_INT 1
57058: PUSH
57059: LD_INT 1
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 0
57068: PUSH
57069: LD_INT 1
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 1
57078: NEG
57079: PUSH
57080: LD_INT 0
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 1
57089: NEG
57090: PUSH
57091: LD_INT 1
57093: NEG
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 1
57101: NEG
57102: PUSH
57103: LD_INT 2
57105: NEG
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 0
57113: PUSH
57114: LD_INT 2
57116: NEG
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 1
57124: PUSH
57125: LD_INT 1
57127: NEG
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 2
57135: PUSH
57136: LD_INT 0
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 2
57145: PUSH
57146: LD_INT 1
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 2
57155: PUSH
57156: LD_INT 2
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 1
57165: PUSH
57166: LD_INT 2
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: LD_INT 0
57175: PUSH
57176: LD_INT 2
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 1
57185: NEG
57186: PUSH
57187: LD_INT 1
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 2
57196: NEG
57197: PUSH
57198: LD_INT 0
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 2
57207: NEG
57208: PUSH
57209: LD_INT 1
57211: NEG
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 2
57219: NEG
57220: PUSH
57221: LD_INT 2
57223: NEG
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57250: LD_ADDR_VAR 0 55
57254: PUSH
57255: LD_INT 0
57257: PUSH
57258: LD_INT 0
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 0
57267: PUSH
57268: LD_INT 1
57270: NEG
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 1
57278: PUSH
57279: LD_INT 0
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 1
57288: PUSH
57289: LD_INT 1
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: LD_INT 0
57298: PUSH
57299: LD_INT 1
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 1
57308: NEG
57309: PUSH
57310: LD_INT 0
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 1
57319: NEG
57320: PUSH
57321: LD_INT 1
57323: NEG
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: LD_INT 1
57331: NEG
57332: PUSH
57333: LD_INT 2
57335: NEG
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 0
57343: PUSH
57344: LD_INT 2
57346: NEG
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 1
57354: PUSH
57355: LD_INT 1
57357: NEG
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 2
57365: PUSH
57366: LD_INT 0
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 2
57375: PUSH
57376: LD_INT 1
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 2
57385: PUSH
57386: LD_INT 2
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 1
57395: PUSH
57396: LD_INT 2
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 0
57405: PUSH
57406: LD_INT 2
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 1
57415: NEG
57416: PUSH
57417: LD_INT 1
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 2
57426: NEG
57427: PUSH
57428: LD_INT 0
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 2
57437: NEG
57438: PUSH
57439: LD_INT 1
57441: NEG
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 2
57449: NEG
57450: PUSH
57451: LD_INT 2
57453: NEG
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57480: LD_ADDR_VAR 0 56
57484: PUSH
57485: LD_INT 0
57487: PUSH
57488: LD_INT 0
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 0
57497: PUSH
57498: LD_INT 1
57500: NEG
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 1
57508: PUSH
57509: LD_INT 0
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 1
57518: PUSH
57519: LD_INT 1
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 0
57528: PUSH
57529: LD_INT 1
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 1
57538: NEG
57539: PUSH
57540: LD_INT 0
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 1
57549: NEG
57550: PUSH
57551: LD_INT 1
57553: NEG
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 1
57561: NEG
57562: PUSH
57563: LD_INT 2
57565: NEG
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 0
57573: PUSH
57574: LD_INT 2
57576: NEG
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 1
57584: PUSH
57585: LD_INT 1
57587: NEG
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 2
57595: PUSH
57596: LD_INT 0
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 2
57605: PUSH
57606: LD_INT 1
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 2
57615: PUSH
57616: LD_INT 2
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 1
57625: PUSH
57626: LD_INT 2
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 0
57635: PUSH
57636: LD_INT 2
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: LD_INT 1
57645: NEG
57646: PUSH
57647: LD_INT 1
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 2
57656: NEG
57657: PUSH
57658: LD_INT 0
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 2
57667: NEG
57668: PUSH
57669: LD_INT 1
57671: NEG
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 2
57679: NEG
57680: PUSH
57681: LD_INT 2
57683: NEG
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: LIST
57698: LIST
57699: LIST
57700: LIST
57701: LIST
57702: LIST
57703: LIST
57704: LIST
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57710: LD_ADDR_VAR 0 57
57714: PUSH
57715: LD_INT 0
57717: PUSH
57718: LD_INT 0
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 0
57727: PUSH
57728: LD_INT 1
57730: NEG
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 1
57738: PUSH
57739: LD_INT 0
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 1
57748: PUSH
57749: LD_INT 1
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 0
57758: PUSH
57759: LD_INT 1
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 1
57768: NEG
57769: PUSH
57770: LD_INT 0
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 1
57779: NEG
57780: PUSH
57781: LD_INT 1
57783: NEG
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 1
57791: NEG
57792: PUSH
57793: LD_INT 2
57795: NEG
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 0
57803: PUSH
57804: LD_INT 2
57806: NEG
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 1
57814: PUSH
57815: LD_INT 1
57817: NEG
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: LD_INT 2
57825: PUSH
57826: LD_INT 0
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 2
57835: PUSH
57836: LD_INT 1
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 2
57845: PUSH
57846: LD_INT 2
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 1
57855: PUSH
57856: LD_INT 2
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 0
57865: PUSH
57866: LD_INT 2
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 1
57875: NEG
57876: PUSH
57877: LD_INT 1
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 2
57886: NEG
57887: PUSH
57888: LD_INT 0
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 2
57897: NEG
57898: PUSH
57899: LD_INT 1
57901: NEG
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 2
57909: NEG
57910: PUSH
57911: LD_INT 2
57913: NEG
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: LIST
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57940: LD_ADDR_VAR 0 58
57944: PUSH
57945: LD_INT 0
57947: PUSH
57948: LD_INT 0
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 0
57957: PUSH
57958: LD_INT 1
57960: NEG
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 1
57968: PUSH
57969: LD_INT 0
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 1
57978: PUSH
57979: LD_INT 1
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 0
57988: PUSH
57989: LD_INT 1
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 1
57998: NEG
57999: PUSH
58000: LD_INT 0
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 1
58009: NEG
58010: PUSH
58011: LD_INT 1
58013: NEG
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 1
58021: NEG
58022: PUSH
58023: LD_INT 2
58025: NEG
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 0
58033: PUSH
58034: LD_INT 2
58036: NEG
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 1
58044: PUSH
58045: LD_INT 1
58047: NEG
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 2
58055: PUSH
58056: LD_INT 0
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 2
58065: PUSH
58066: LD_INT 1
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 2
58075: PUSH
58076: LD_INT 2
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 1
58085: PUSH
58086: LD_INT 2
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 0
58095: PUSH
58096: LD_INT 2
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 1
58105: NEG
58106: PUSH
58107: LD_INT 1
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 2
58116: NEG
58117: PUSH
58118: LD_INT 0
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 2
58127: NEG
58128: PUSH
58129: LD_INT 1
58131: NEG
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 2
58139: NEG
58140: PUSH
58141: LD_INT 2
58143: NEG
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58170: LD_ADDR_VAR 0 59
58174: PUSH
58175: LD_INT 0
58177: PUSH
58178: LD_INT 0
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 0
58187: PUSH
58188: LD_INT 1
58190: NEG
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 1
58198: PUSH
58199: LD_INT 0
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 1
58208: PUSH
58209: LD_INT 1
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 0
58218: PUSH
58219: LD_INT 1
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 1
58228: NEG
58229: PUSH
58230: LD_INT 0
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 1
58239: NEG
58240: PUSH
58241: LD_INT 1
58243: NEG
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: LIST
58253: LIST
58254: LIST
58255: LIST
58256: LIST
58257: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58258: LD_ADDR_VAR 0 60
58262: PUSH
58263: LD_INT 0
58265: PUSH
58266: LD_INT 0
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 0
58275: PUSH
58276: LD_INT 1
58278: NEG
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 1
58286: PUSH
58287: LD_INT 0
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 1
58296: PUSH
58297: LD_INT 1
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 0
58306: PUSH
58307: LD_INT 1
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 1
58316: NEG
58317: PUSH
58318: LD_INT 0
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: PUSH
58325: LD_INT 1
58327: NEG
58328: PUSH
58329: LD_INT 1
58331: NEG
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58346: LD_ADDR_VAR 0 61
58350: PUSH
58351: LD_INT 0
58353: PUSH
58354: LD_INT 0
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 0
58363: PUSH
58364: LD_INT 1
58366: NEG
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 1
58374: PUSH
58375: LD_INT 0
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 1
58384: PUSH
58385: LD_INT 1
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 0
58394: PUSH
58395: LD_INT 1
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 1
58404: NEG
58405: PUSH
58406: LD_INT 0
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 1
58415: NEG
58416: PUSH
58417: LD_INT 1
58419: NEG
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58434: LD_ADDR_VAR 0 62
58438: PUSH
58439: LD_INT 0
58441: PUSH
58442: LD_INT 0
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 0
58451: PUSH
58452: LD_INT 1
58454: NEG
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: PUSH
58460: LD_INT 1
58462: PUSH
58463: LD_INT 0
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: LD_INT 1
58472: PUSH
58473: LD_INT 1
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 0
58482: PUSH
58483: LD_INT 1
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 1
58492: NEG
58493: PUSH
58494: LD_INT 0
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 1
58503: NEG
58504: PUSH
58505: LD_INT 1
58507: NEG
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58522: LD_ADDR_VAR 0 63
58526: PUSH
58527: LD_INT 0
58529: PUSH
58530: LD_INT 0
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 0
58539: PUSH
58540: LD_INT 1
58542: NEG
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 1
58550: PUSH
58551: LD_INT 0
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 1
58560: PUSH
58561: LD_INT 1
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 0
58570: PUSH
58571: LD_INT 1
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 1
58580: NEG
58581: PUSH
58582: LD_INT 0
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 1
58591: NEG
58592: PUSH
58593: LD_INT 1
58595: NEG
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: LIST
58605: LIST
58606: LIST
58607: LIST
58608: LIST
58609: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58610: LD_ADDR_VAR 0 64
58614: PUSH
58615: LD_INT 0
58617: PUSH
58618: LD_INT 0
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 0
58627: PUSH
58628: LD_INT 1
58630: NEG
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 1
58638: PUSH
58639: LD_INT 0
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: LD_INT 1
58648: PUSH
58649: LD_INT 1
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 0
58658: PUSH
58659: LD_INT 1
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 1
58668: NEG
58669: PUSH
58670: LD_INT 0
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 1
58679: NEG
58680: PUSH
58681: LD_INT 1
58683: NEG
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: ST_TO_ADDR
// end ; 1 :
58698: GO 64595
58700: LD_INT 1
58702: DOUBLE
58703: EQUAL
58704: IFTRUE 58708
58706: GO 61331
58708: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58709: LD_ADDR_VAR 0 11
58713: PUSH
58714: LD_INT 1
58716: NEG
58717: PUSH
58718: LD_INT 3
58720: NEG
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 0
58728: PUSH
58729: LD_INT 3
58731: NEG
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 1
58739: PUSH
58740: LD_INT 2
58742: NEG
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: LIST
58752: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58753: LD_ADDR_VAR 0 12
58757: PUSH
58758: LD_INT 2
58760: PUSH
58761: LD_INT 1
58763: NEG
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 3
58771: PUSH
58772: LD_INT 0
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 3
58781: PUSH
58782: LD_INT 1
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: LIST
58793: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58794: LD_ADDR_VAR 0 13
58798: PUSH
58799: LD_INT 3
58801: PUSH
58802: LD_INT 2
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 3
58811: PUSH
58812: LD_INT 3
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 2
58821: PUSH
58822: LD_INT 3
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: LIST
58833: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58834: LD_ADDR_VAR 0 14
58838: PUSH
58839: LD_INT 1
58841: PUSH
58842: LD_INT 3
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 0
58851: PUSH
58852: LD_INT 3
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 1
58861: NEG
58862: PUSH
58863: LD_INT 2
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: LIST
58874: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58875: LD_ADDR_VAR 0 15
58879: PUSH
58880: LD_INT 2
58882: NEG
58883: PUSH
58884: LD_INT 1
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 3
58893: NEG
58894: PUSH
58895: LD_INT 0
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 3
58904: NEG
58905: PUSH
58906: LD_INT 1
58908: NEG
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: LIST
58918: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58919: LD_ADDR_VAR 0 16
58923: PUSH
58924: LD_INT 2
58926: NEG
58927: PUSH
58928: LD_INT 3
58930: NEG
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 3
58938: NEG
58939: PUSH
58940: LD_INT 2
58942: NEG
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 3
58950: NEG
58951: PUSH
58952: LD_INT 3
58954: NEG
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: LIST
58964: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58965: LD_ADDR_VAR 0 17
58969: PUSH
58970: LD_INT 1
58972: NEG
58973: PUSH
58974: LD_INT 3
58976: NEG
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: LD_INT 0
58984: PUSH
58985: LD_INT 3
58987: NEG
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 1
58995: PUSH
58996: LD_INT 2
58998: NEG
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: LIST
59008: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59009: LD_ADDR_VAR 0 18
59013: PUSH
59014: LD_INT 2
59016: PUSH
59017: LD_INT 1
59019: NEG
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 3
59027: PUSH
59028: LD_INT 0
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: LD_INT 3
59037: PUSH
59038: LD_INT 1
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: LIST
59049: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59050: LD_ADDR_VAR 0 19
59054: PUSH
59055: LD_INT 3
59057: PUSH
59058: LD_INT 2
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 3
59067: PUSH
59068: LD_INT 3
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 2
59077: PUSH
59078: LD_INT 3
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: LIST
59089: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59090: LD_ADDR_VAR 0 20
59094: PUSH
59095: LD_INT 1
59097: PUSH
59098: LD_INT 3
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 0
59107: PUSH
59108: LD_INT 3
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 1
59117: NEG
59118: PUSH
59119: LD_INT 2
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: LIST
59130: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59131: LD_ADDR_VAR 0 21
59135: PUSH
59136: LD_INT 2
59138: NEG
59139: PUSH
59140: LD_INT 1
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 3
59149: NEG
59150: PUSH
59151: LD_INT 0
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 3
59160: NEG
59161: PUSH
59162: LD_INT 1
59164: NEG
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: LIST
59174: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59175: LD_ADDR_VAR 0 22
59179: PUSH
59180: LD_INT 2
59182: NEG
59183: PUSH
59184: LD_INT 3
59186: NEG
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 3
59194: NEG
59195: PUSH
59196: LD_INT 2
59198: NEG
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 3
59206: NEG
59207: PUSH
59208: LD_INT 3
59210: NEG
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: LIST
59220: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
59221: LD_ADDR_VAR 0 23
59225: PUSH
59226: LD_INT 0
59228: PUSH
59229: LD_INT 3
59231: NEG
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: LD_INT 1
59239: NEG
59240: PUSH
59241: LD_INT 4
59243: NEG
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 1
59251: PUSH
59252: LD_INT 3
59254: NEG
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: LIST
59264: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
59265: LD_ADDR_VAR 0 24
59269: PUSH
59270: LD_INT 3
59272: PUSH
59273: LD_INT 0
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 3
59282: PUSH
59283: LD_INT 1
59285: NEG
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: LD_INT 4
59293: PUSH
59294: LD_INT 1
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: LIST
59305: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
59306: LD_ADDR_VAR 0 25
59310: PUSH
59311: LD_INT 3
59313: PUSH
59314: LD_INT 3
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 4
59323: PUSH
59324: LD_INT 3
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 3
59333: PUSH
59334: LD_INT 4
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: LIST
59345: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
59346: LD_ADDR_VAR 0 26
59350: PUSH
59351: LD_INT 0
59353: PUSH
59354: LD_INT 3
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 1
59363: PUSH
59364: LD_INT 4
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 1
59373: NEG
59374: PUSH
59375: LD_INT 3
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: LIST
59386: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
59387: LD_ADDR_VAR 0 27
59391: PUSH
59392: LD_INT 3
59394: NEG
59395: PUSH
59396: LD_INT 0
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: LD_INT 3
59405: NEG
59406: PUSH
59407: LD_INT 1
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 4
59416: NEG
59417: PUSH
59418: LD_INT 1
59420: NEG
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: LIST
59430: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
59431: LD_ADDR_VAR 0 28
59435: PUSH
59436: LD_INT 3
59438: NEG
59439: PUSH
59440: LD_INT 3
59442: NEG
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 3
59450: NEG
59451: PUSH
59452: LD_INT 4
59454: NEG
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 4
59462: NEG
59463: PUSH
59464: LD_INT 3
59466: NEG
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: LIST
59476: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
59477: LD_ADDR_VAR 0 29
59481: PUSH
59482: LD_INT 1
59484: NEG
59485: PUSH
59486: LD_INT 3
59488: NEG
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 0
59496: PUSH
59497: LD_INT 3
59499: NEG
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 1
59507: PUSH
59508: LD_INT 2
59510: NEG
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 1
59518: NEG
59519: PUSH
59520: LD_INT 4
59522: NEG
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 0
59530: PUSH
59531: LD_INT 4
59533: NEG
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 1
59541: PUSH
59542: LD_INT 3
59544: NEG
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 1
59552: NEG
59553: PUSH
59554: LD_INT 5
59556: NEG
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 0
59564: PUSH
59565: LD_INT 5
59567: NEG
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 1
59575: PUSH
59576: LD_INT 4
59578: NEG
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 1
59586: NEG
59587: PUSH
59588: LD_INT 6
59590: NEG
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 0
59598: PUSH
59599: LD_INT 6
59601: NEG
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 1
59609: PUSH
59610: LD_INT 5
59612: NEG
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: LIST
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
59632: LD_ADDR_VAR 0 30
59636: PUSH
59637: LD_INT 2
59639: PUSH
59640: LD_INT 1
59642: NEG
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 3
59650: PUSH
59651: LD_INT 0
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: LD_INT 3
59660: PUSH
59661: LD_INT 1
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 3
59670: PUSH
59671: LD_INT 1
59673: NEG
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 4
59681: PUSH
59682: LD_INT 0
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: PUSH
59689: LD_INT 4
59691: PUSH
59692: LD_INT 1
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 4
59701: PUSH
59702: LD_INT 1
59704: NEG
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 5
59712: PUSH
59713: LD_INT 0
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 5
59722: PUSH
59723: LD_INT 1
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: LD_INT 5
59732: PUSH
59733: LD_INT 1
59735: NEG
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 6
59743: PUSH
59744: LD_INT 0
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 6
59753: PUSH
59754: LD_INT 1
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: LIST
59768: LIST
59769: LIST
59770: LIST
59771: LIST
59772: LIST
59773: LIST
59774: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
59775: LD_ADDR_VAR 0 31
59779: PUSH
59780: LD_INT 3
59782: PUSH
59783: LD_INT 2
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 3
59792: PUSH
59793: LD_INT 3
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 2
59802: PUSH
59803: LD_INT 3
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 4
59812: PUSH
59813: LD_INT 3
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 4
59822: PUSH
59823: LD_INT 4
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: LD_INT 3
59832: PUSH
59833: LD_INT 4
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 5
59842: PUSH
59843: LD_INT 4
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 5
59852: PUSH
59853: LD_INT 5
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 4
59862: PUSH
59863: LD_INT 5
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 6
59872: PUSH
59873: LD_INT 5
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 6
59882: PUSH
59883: LD_INT 6
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_INT 5
59892: PUSH
59893: LD_INT 6
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: LIST
59904: LIST
59905: LIST
59906: LIST
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59914: LD_ADDR_VAR 0 32
59918: PUSH
59919: LD_INT 1
59921: PUSH
59922: LD_INT 3
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 0
59931: PUSH
59932: LD_INT 3
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 1
59941: NEG
59942: PUSH
59943: LD_INT 2
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 1
59952: PUSH
59953: LD_INT 4
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 0
59962: PUSH
59963: LD_INT 4
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: PUSH
59970: LD_INT 1
59972: NEG
59973: PUSH
59974: LD_INT 3
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: LD_INT 1
59983: PUSH
59984: LD_INT 5
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: LD_INT 0
59993: PUSH
59994: LD_INT 5
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PUSH
60001: LD_INT 1
60003: NEG
60004: PUSH
60005: LD_INT 4
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 1
60014: PUSH
60015: LD_INT 6
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 0
60024: PUSH
60025: LD_INT 6
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 1
60034: NEG
60035: PUSH
60036: LD_INT 5
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
60057: LD_ADDR_VAR 0 33
60061: PUSH
60062: LD_INT 2
60064: NEG
60065: PUSH
60066: LD_INT 1
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 3
60075: NEG
60076: PUSH
60077: LD_INT 0
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 3
60086: NEG
60087: PUSH
60088: LD_INT 1
60090: NEG
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 3
60098: NEG
60099: PUSH
60100: LD_INT 1
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: PUSH
60107: LD_INT 4
60109: NEG
60110: PUSH
60111: LD_INT 0
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: LD_INT 4
60120: NEG
60121: PUSH
60122: LD_INT 1
60124: NEG
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 4
60132: NEG
60133: PUSH
60134: LD_INT 1
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 5
60143: NEG
60144: PUSH
60145: LD_INT 0
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 5
60154: NEG
60155: PUSH
60156: LD_INT 1
60158: NEG
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 5
60166: NEG
60167: PUSH
60168: LD_INT 1
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 6
60177: NEG
60178: PUSH
60179: LD_INT 0
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: LD_INT 6
60188: NEG
60189: PUSH
60190: LD_INT 1
60192: NEG
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: LIST
60206: LIST
60207: LIST
60208: LIST
60209: LIST
60210: LIST
60211: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
60212: LD_ADDR_VAR 0 34
60216: PUSH
60217: LD_INT 2
60219: NEG
60220: PUSH
60221: LD_INT 3
60223: NEG
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 3
60231: NEG
60232: PUSH
60233: LD_INT 2
60235: NEG
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 3
60243: NEG
60244: PUSH
60245: LD_INT 3
60247: NEG
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 3
60255: NEG
60256: PUSH
60257: LD_INT 4
60259: NEG
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 4
60267: NEG
60268: PUSH
60269: LD_INT 3
60271: NEG
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: LD_INT 4
60279: NEG
60280: PUSH
60281: LD_INT 4
60283: NEG
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: PUSH
60289: LD_INT 4
60291: NEG
60292: PUSH
60293: LD_INT 5
60295: NEG
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 5
60303: NEG
60304: PUSH
60305: LD_INT 4
60307: NEG
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 5
60315: NEG
60316: PUSH
60317: LD_INT 5
60319: NEG
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 5
60327: NEG
60328: PUSH
60329: LD_INT 6
60331: NEG
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 6
60339: NEG
60340: PUSH
60341: LD_INT 5
60343: NEG
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 6
60351: NEG
60352: PUSH
60353: LD_INT 6
60355: NEG
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
60375: LD_ADDR_VAR 0 41
60379: PUSH
60380: LD_INT 0
60382: PUSH
60383: LD_INT 2
60385: NEG
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 1
60393: NEG
60394: PUSH
60395: LD_INT 3
60397: NEG
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 1
60405: PUSH
60406: LD_INT 2
60408: NEG
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: LIST
60418: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
60419: LD_ADDR_VAR 0 42
60423: PUSH
60424: LD_INT 2
60426: PUSH
60427: LD_INT 0
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 2
60436: PUSH
60437: LD_INT 1
60439: NEG
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: LD_INT 3
60447: PUSH
60448: LD_INT 1
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: LIST
60459: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
60460: LD_ADDR_VAR 0 43
60464: PUSH
60465: LD_INT 2
60467: PUSH
60468: LD_INT 2
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 3
60477: PUSH
60478: LD_INT 2
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: PUSH
60485: LD_INT 2
60487: PUSH
60488: LD_INT 3
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: LIST
60499: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
60500: LD_ADDR_VAR 0 44
60504: PUSH
60505: LD_INT 0
60507: PUSH
60508: LD_INT 2
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 1
60517: PUSH
60518: LD_INT 3
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 1
60527: NEG
60528: PUSH
60529: LD_INT 2
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: LIST
60540: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60541: LD_ADDR_VAR 0 45
60545: PUSH
60546: LD_INT 2
60548: NEG
60549: PUSH
60550: LD_INT 0
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: PUSH
60557: LD_INT 2
60559: NEG
60560: PUSH
60561: LD_INT 1
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 3
60570: NEG
60571: PUSH
60572: LD_INT 1
60574: NEG
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: LIST
60584: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
60585: LD_ADDR_VAR 0 46
60589: PUSH
60590: LD_INT 2
60592: NEG
60593: PUSH
60594: LD_INT 2
60596: NEG
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 2
60604: NEG
60605: PUSH
60606: LD_INT 3
60608: NEG
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: PUSH
60614: LD_INT 3
60616: NEG
60617: PUSH
60618: LD_INT 2
60620: NEG
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: LIST
60630: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
60631: LD_ADDR_VAR 0 47
60635: PUSH
60636: LD_INT 2
60638: NEG
60639: PUSH
60640: LD_INT 3
60642: NEG
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: LD_INT 1
60650: NEG
60651: PUSH
60652: LD_INT 3
60654: NEG
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60664: LD_ADDR_VAR 0 48
60668: PUSH
60669: LD_INT 1
60671: PUSH
60672: LD_INT 2
60674: NEG
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 2
60682: PUSH
60683: LD_INT 1
60685: NEG
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
60695: LD_ADDR_VAR 0 49
60699: PUSH
60700: LD_INT 3
60702: PUSH
60703: LD_INT 1
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PUSH
60710: LD_INT 3
60712: PUSH
60713: LD_INT 2
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
60724: LD_ADDR_VAR 0 50
60728: PUSH
60729: LD_INT 2
60731: PUSH
60732: LD_INT 3
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 1
60741: PUSH
60742: LD_INT 3
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60753: LD_ADDR_VAR 0 51
60757: PUSH
60758: LD_INT 1
60760: NEG
60761: PUSH
60762: LD_INT 2
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 2
60771: NEG
60772: PUSH
60773: LD_INT 1
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60784: LD_ADDR_VAR 0 52
60788: PUSH
60789: LD_INT 3
60791: NEG
60792: PUSH
60793: LD_INT 1
60795: NEG
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: LD_INT 3
60803: NEG
60804: PUSH
60805: LD_INT 2
60807: NEG
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60817: LD_ADDR_VAR 0 53
60821: PUSH
60822: LD_INT 1
60824: NEG
60825: PUSH
60826: LD_INT 3
60828: NEG
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: PUSH
60834: LD_INT 0
60836: PUSH
60837: LD_INT 3
60839: NEG
60840: PUSH
60841: EMPTY
60842: LIST
60843: LIST
60844: PUSH
60845: LD_INT 1
60847: PUSH
60848: LD_INT 2
60850: NEG
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: LIST
60860: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60861: LD_ADDR_VAR 0 54
60865: PUSH
60866: LD_INT 2
60868: PUSH
60869: LD_INT 1
60871: NEG
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 3
60879: PUSH
60880: LD_INT 0
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 3
60889: PUSH
60890: LD_INT 1
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: LIST
60901: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60902: LD_ADDR_VAR 0 55
60906: PUSH
60907: LD_INT 3
60909: PUSH
60910: LD_INT 2
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: PUSH
60917: LD_INT 3
60919: PUSH
60920: LD_INT 3
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 2
60929: PUSH
60930: LD_INT 3
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: LIST
60941: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60942: LD_ADDR_VAR 0 56
60946: PUSH
60947: LD_INT 1
60949: PUSH
60950: LD_INT 3
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_INT 0
60959: PUSH
60960: LD_INT 3
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: PUSH
60967: LD_INT 1
60969: NEG
60970: PUSH
60971: LD_INT 2
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: LIST
60982: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60983: LD_ADDR_VAR 0 57
60987: PUSH
60988: LD_INT 2
60990: NEG
60991: PUSH
60992: LD_INT 1
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: LD_INT 3
61001: NEG
61002: PUSH
61003: LD_INT 0
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 3
61012: NEG
61013: PUSH
61014: LD_INT 1
61016: NEG
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: LIST
61026: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61027: LD_ADDR_VAR 0 58
61031: PUSH
61032: LD_INT 2
61034: NEG
61035: PUSH
61036: LD_INT 3
61038: NEG
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 3
61046: NEG
61047: PUSH
61048: LD_INT 2
61050: NEG
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_INT 3
61058: NEG
61059: PUSH
61060: LD_INT 3
61062: NEG
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: LIST
61072: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
61073: LD_ADDR_VAR 0 59
61077: PUSH
61078: LD_INT 1
61080: NEG
61081: PUSH
61082: LD_INT 2
61084: NEG
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: LD_INT 0
61092: PUSH
61093: LD_INT 2
61095: NEG
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: LD_INT 1
61103: PUSH
61104: LD_INT 1
61106: NEG
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: LIST
61116: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61117: LD_ADDR_VAR 0 60
61121: PUSH
61122: LD_INT 1
61124: PUSH
61125: LD_INT 1
61127: NEG
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 2
61135: PUSH
61136: LD_INT 0
61138: PUSH
61139: EMPTY
61140: LIST
61141: LIST
61142: PUSH
61143: LD_INT 2
61145: PUSH
61146: LD_INT 1
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: LIST
61157: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61158: LD_ADDR_VAR 0 61
61162: PUSH
61163: LD_INT 2
61165: PUSH
61166: LD_INT 1
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: PUSH
61173: LD_INT 2
61175: PUSH
61176: LD_INT 2
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: PUSH
61183: LD_INT 1
61185: PUSH
61186: LD_INT 2
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: LIST
61197: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61198: LD_ADDR_VAR 0 62
61202: PUSH
61203: LD_INT 1
61205: PUSH
61206: LD_INT 2
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_INT 0
61215: PUSH
61216: LD_INT 2
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: LD_INT 1
61225: NEG
61226: PUSH
61227: LD_INT 1
61229: PUSH
61230: EMPTY
61231: LIST
61232: LIST
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: LIST
61238: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61239: LD_ADDR_VAR 0 63
61243: PUSH
61244: LD_INT 1
61246: NEG
61247: PUSH
61248: LD_INT 1
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: PUSH
61255: LD_INT 2
61257: NEG
61258: PUSH
61259: LD_INT 0
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: LD_INT 2
61268: NEG
61269: PUSH
61270: LD_INT 1
61272: NEG
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: LIST
61282: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61283: LD_ADDR_VAR 0 64
61287: PUSH
61288: LD_INT 1
61290: NEG
61291: PUSH
61292: LD_INT 2
61294: NEG
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 2
61302: NEG
61303: PUSH
61304: LD_INT 1
61306: NEG
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 2
61314: NEG
61315: PUSH
61316: LD_INT 2
61318: NEG
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: LIST
61328: ST_TO_ADDR
// end ; 2 :
61329: GO 64595
61331: LD_INT 2
61333: DOUBLE
61334: EQUAL
61335: IFTRUE 61339
61337: GO 64594
61339: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
61340: LD_ADDR_VAR 0 29
61344: PUSH
61345: LD_INT 4
61347: PUSH
61348: LD_INT 0
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 4
61357: PUSH
61358: LD_INT 1
61360: NEG
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 5
61368: PUSH
61369: LD_INT 0
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 5
61378: PUSH
61379: LD_INT 1
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 4
61388: PUSH
61389: LD_INT 1
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 3
61398: PUSH
61399: LD_INT 0
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: PUSH
61406: LD_INT 3
61408: PUSH
61409: LD_INT 1
61411: NEG
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: LD_INT 3
61419: PUSH
61420: LD_INT 2
61422: NEG
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: LD_INT 5
61430: PUSH
61431: LD_INT 2
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: LD_INT 3
61440: PUSH
61441: LD_INT 3
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: PUSH
61448: LD_INT 3
61450: PUSH
61451: LD_INT 2
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: PUSH
61458: LD_INT 4
61460: PUSH
61461: LD_INT 3
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 4
61470: PUSH
61471: LD_INT 4
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: PUSH
61478: LD_INT 3
61480: PUSH
61481: LD_INT 4
61483: PUSH
61484: EMPTY
61485: LIST
61486: LIST
61487: PUSH
61488: LD_INT 2
61490: PUSH
61491: LD_INT 3
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: PUSH
61498: LD_INT 2
61500: PUSH
61501: LD_INT 2
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: PUSH
61508: LD_INT 4
61510: PUSH
61511: LD_INT 2
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 2
61520: PUSH
61521: LD_INT 4
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PUSH
61528: LD_INT 0
61530: PUSH
61531: LD_INT 4
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: LD_INT 0
61540: PUSH
61541: LD_INT 3
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 1
61550: PUSH
61551: LD_INT 4
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: LD_INT 1
61560: PUSH
61561: LD_INT 5
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PUSH
61568: LD_INT 0
61570: PUSH
61571: LD_INT 5
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 1
61580: NEG
61581: PUSH
61582: LD_INT 4
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: PUSH
61589: LD_INT 1
61591: NEG
61592: PUSH
61593: LD_INT 3
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: LD_INT 2
61602: PUSH
61603: LD_INT 5
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: LD_INT 2
61612: NEG
61613: PUSH
61614: LD_INT 3
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_INT 3
61623: NEG
61624: PUSH
61625: LD_INT 0
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 3
61634: NEG
61635: PUSH
61636: LD_INT 1
61638: NEG
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 2
61646: NEG
61647: PUSH
61648: LD_INT 0
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 2
61657: NEG
61658: PUSH
61659: LD_INT 1
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: LD_INT 3
61668: NEG
61669: PUSH
61670: LD_INT 1
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 4
61679: NEG
61680: PUSH
61681: LD_INT 0
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: LD_INT 4
61690: NEG
61691: PUSH
61692: LD_INT 1
61694: NEG
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: PUSH
61700: LD_INT 4
61702: NEG
61703: PUSH
61704: LD_INT 2
61706: NEG
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 2
61714: NEG
61715: PUSH
61716: LD_INT 2
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 4
61725: NEG
61726: PUSH
61727: LD_INT 4
61729: NEG
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: PUSH
61735: LD_INT 4
61737: NEG
61738: PUSH
61739: LD_INT 5
61741: NEG
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: PUSH
61747: LD_INT 3
61749: NEG
61750: PUSH
61751: LD_INT 4
61753: NEG
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 3
61761: NEG
61762: PUSH
61763: LD_INT 3
61765: NEG
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: LD_INT 4
61773: NEG
61774: PUSH
61775: LD_INT 3
61777: NEG
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: LD_INT 5
61785: NEG
61786: PUSH
61787: LD_INT 4
61789: NEG
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PUSH
61795: LD_INT 5
61797: NEG
61798: PUSH
61799: LD_INT 5
61801: NEG
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 3
61809: NEG
61810: PUSH
61811: LD_INT 5
61813: NEG
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 5
61821: NEG
61822: PUSH
61823: LD_INT 3
61825: NEG
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: LIST
61835: LIST
61836: LIST
61837: LIST
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: LIST
61846: LIST
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: LIST
61852: LIST
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: LIST
61871: LIST
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
61878: LD_ADDR_VAR 0 30
61882: PUSH
61883: LD_INT 4
61885: PUSH
61886: LD_INT 4
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: PUSH
61893: LD_INT 4
61895: PUSH
61896: LD_INT 3
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 5
61905: PUSH
61906: LD_INT 4
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PUSH
61913: LD_INT 5
61915: PUSH
61916: LD_INT 5
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: PUSH
61923: LD_INT 4
61925: PUSH
61926: LD_INT 5
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_INT 3
61935: PUSH
61936: LD_INT 4
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: PUSH
61943: LD_INT 3
61945: PUSH
61946: LD_INT 3
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 5
61955: PUSH
61956: LD_INT 3
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: LD_INT 3
61965: PUSH
61966: LD_INT 5
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: LD_INT 0
61975: PUSH
61976: LD_INT 3
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: LD_INT 0
61985: PUSH
61986: LD_INT 2
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 1
61995: PUSH
61996: LD_INT 3
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: LD_INT 1
62005: PUSH
62006: LD_INT 4
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: LD_INT 0
62015: PUSH
62016: LD_INT 4
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PUSH
62023: LD_INT 1
62025: NEG
62026: PUSH
62027: LD_INT 3
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: PUSH
62034: LD_INT 1
62036: NEG
62037: PUSH
62038: LD_INT 2
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: LD_INT 2
62047: PUSH
62048: LD_INT 4
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 2
62057: NEG
62058: PUSH
62059: LD_INT 2
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 4
62068: NEG
62069: PUSH
62070: LD_INT 0
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: PUSH
62077: LD_INT 4
62079: NEG
62080: PUSH
62081: LD_INT 1
62083: NEG
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: PUSH
62089: LD_INT 3
62091: NEG
62092: PUSH
62093: LD_INT 0
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: LD_INT 3
62102: NEG
62103: PUSH
62104: LD_INT 1
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: LD_INT 4
62113: NEG
62114: PUSH
62115: LD_INT 1
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: LD_INT 5
62124: NEG
62125: PUSH
62126: LD_INT 0
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 5
62135: NEG
62136: PUSH
62137: LD_INT 1
62139: NEG
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: PUSH
62145: LD_INT 5
62147: NEG
62148: PUSH
62149: LD_INT 2
62151: NEG
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: LD_INT 3
62159: NEG
62160: PUSH
62161: LD_INT 2
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: LD_INT 3
62170: NEG
62171: PUSH
62172: LD_INT 3
62174: NEG
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: PUSH
62180: LD_INT 3
62182: NEG
62183: PUSH
62184: LD_INT 4
62186: NEG
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: LD_INT 2
62194: NEG
62195: PUSH
62196: LD_INT 3
62198: NEG
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: LD_INT 2
62206: NEG
62207: PUSH
62208: LD_INT 2
62210: NEG
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: PUSH
62216: LD_INT 3
62218: NEG
62219: PUSH
62220: LD_INT 2
62222: NEG
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: PUSH
62228: LD_INT 4
62230: NEG
62231: PUSH
62232: LD_INT 3
62234: NEG
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PUSH
62240: LD_INT 4
62242: NEG
62243: PUSH
62244: LD_INT 4
62246: NEG
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: LD_INT 2
62254: NEG
62255: PUSH
62256: LD_INT 4
62258: NEG
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: PUSH
62264: LD_INT 4
62266: NEG
62267: PUSH
62268: LD_INT 2
62270: NEG
62271: PUSH
62272: EMPTY
62273: LIST
62274: LIST
62275: PUSH
62276: LD_INT 0
62278: PUSH
62279: LD_INT 4
62281: NEG
62282: PUSH
62283: EMPTY
62284: LIST
62285: LIST
62286: PUSH
62287: LD_INT 0
62289: PUSH
62290: LD_INT 5
62292: NEG
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: PUSH
62298: LD_INT 1
62300: PUSH
62301: LD_INT 4
62303: NEG
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: PUSH
62309: LD_INT 1
62311: PUSH
62312: LD_INT 3
62314: NEG
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: PUSH
62320: LD_INT 0
62322: PUSH
62323: LD_INT 3
62325: NEG
62326: PUSH
62327: EMPTY
62328: LIST
62329: LIST
62330: PUSH
62331: LD_INT 1
62333: NEG
62334: PUSH
62335: LD_INT 4
62337: NEG
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: PUSH
62343: LD_INT 1
62345: NEG
62346: PUSH
62347: LD_INT 5
62349: NEG
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: LD_INT 2
62357: PUSH
62358: LD_INT 3
62360: NEG
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: LD_INT 2
62368: NEG
62369: PUSH
62370: LD_INT 5
62372: NEG
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: LIST
62382: LIST
62383: LIST
62384: LIST
62385: LIST
62386: LIST
62387: LIST
62388: LIST
62389: LIST
62390: LIST
62391: LIST
62392: LIST
62393: LIST
62394: LIST
62395: LIST
62396: LIST
62397: LIST
62398: LIST
62399: LIST
62400: LIST
62401: LIST
62402: LIST
62403: LIST
62404: LIST
62405: LIST
62406: LIST
62407: LIST
62408: LIST
62409: LIST
62410: LIST
62411: LIST
62412: LIST
62413: LIST
62414: LIST
62415: LIST
62416: LIST
62417: LIST
62418: LIST
62419: LIST
62420: LIST
62421: LIST
62422: LIST
62423: LIST
62424: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
62425: LD_ADDR_VAR 0 31
62429: PUSH
62430: LD_INT 0
62432: PUSH
62433: LD_INT 4
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: PUSH
62440: LD_INT 0
62442: PUSH
62443: LD_INT 3
62445: PUSH
62446: EMPTY
62447: LIST
62448: LIST
62449: PUSH
62450: LD_INT 1
62452: PUSH
62453: LD_INT 4
62455: PUSH
62456: EMPTY
62457: LIST
62458: LIST
62459: PUSH
62460: LD_INT 1
62462: PUSH
62463: LD_INT 5
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: PUSH
62470: LD_INT 0
62472: PUSH
62473: LD_INT 5
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: PUSH
62480: LD_INT 1
62482: NEG
62483: PUSH
62484: LD_INT 4
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: PUSH
62491: LD_INT 1
62493: NEG
62494: PUSH
62495: LD_INT 3
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PUSH
62502: LD_INT 2
62504: PUSH
62505: LD_INT 5
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: LD_INT 2
62514: NEG
62515: PUSH
62516: LD_INT 3
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: PUSH
62523: LD_INT 3
62525: NEG
62526: PUSH
62527: LD_INT 0
62529: PUSH
62530: EMPTY
62531: LIST
62532: LIST
62533: PUSH
62534: LD_INT 3
62536: NEG
62537: PUSH
62538: LD_INT 1
62540: NEG
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: PUSH
62546: LD_INT 2
62548: NEG
62549: PUSH
62550: LD_INT 0
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: PUSH
62557: LD_INT 2
62559: NEG
62560: PUSH
62561: LD_INT 1
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: PUSH
62568: LD_INT 3
62570: NEG
62571: PUSH
62572: LD_INT 1
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: PUSH
62579: LD_INT 4
62581: NEG
62582: PUSH
62583: LD_INT 0
62585: PUSH
62586: EMPTY
62587: LIST
62588: LIST
62589: PUSH
62590: LD_INT 4
62592: NEG
62593: PUSH
62594: LD_INT 1
62596: NEG
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 4
62604: NEG
62605: PUSH
62606: LD_INT 2
62608: NEG
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 2
62616: NEG
62617: PUSH
62618: LD_INT 2
62620: PUSH
62621: EMPTY
62622: LIST
62623: LIST
62624: PUSH
62625: LD_INT 4
62627: NEG
62628: PUSH
62629: LD_INT 4
62631: NEG
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PUSH
62637: LD_INT 4
62639: NEG
62640: PUSH
62641: LD_INT 5
62643: NEG
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: PUSH
62649: LD_INT 3
62651: NEG
62652: PUSH
62653: LD_INT 4
62655: NEG
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: PUSH
62661: LD_INT 3
62663: NEG
62664: PUSH
62665: LD_INT 3
62667: NEG
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: PUSH
62673: LD_INT 4
62675: NEG
62676: PUSH
62677: LD_INT 3
62679: NEG
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: PUSH
62685: LD_INT 5
62687: NEG
62688: PUSH
62689: LD_INT 4
62691: NEG
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: PUSH
62697: LD_INT 5
62699: NEG
62700: PUSH
62701: LD_INT 5
62703: NEG
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: LD_INT 3
62711: NEG
62712: PUSH
62713: LD_INT 5
62715: NEG
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: LD_INT 5
62723: NEG
62724: PUSH
62725: LD_INT 3
62727: NEG
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 0
62735: PUSH
62736: LD_INT 3
62738: NEG
62739: PUSH
62740: EMPTY
62741: LIST
62742: LIST
62743: PUSH
62744: LD_INT 0
62746: PUSH
62747: LD_INT 4
62749: NEG
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: PUSH
62755: LD_INT 1
62757: PUSH
62758: LD_INT 3
62760: NEG
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PUSH
62766: LD_INT 1
62768: PUSH
62769: LD_INT 2
62771: NEG
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: PUSH
62777: LD_INT 0
62779: PUSH
62780: LD_INT 2
62782: NEG
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: PUSH
62788: LD_INT 1
62790: NEG
62791: PUSH
62792: LD_INT 3
62794: NEG
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 1
62802: NEG
62803: PUSH
62804: LD_INT 4
62806: NEG
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: PUSH
62812: LD_INT 2
62814: PUSH
62815: LD_INT 2
62817: NEG
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: PUSH
62823: LD_INT 2
62825: NEG
62826: PUSH
62827: LD_INT 4
62829: NEG
62830: PUSH
62831: EMPTY
62832: LIST
62833: LIST
62834: PUSH
62835: LD_INT 4
62837: PUSH
62838: LD_INT 0
62840: PUSH
62841: EMPTY
62842: LIST
62843: LIST
62844: PUSH
62845: LD_INT 4
62847: PUSH
62848: LD_INT 1
62850: NEG
62851: PUSH
62852: EMPTY
62853: LIST
62854: LIST
62855: PUSH
62856: LD_INT 5
62858: PUSH
62859: LD_INT 0
62861: PUSH
62862: EMPTY
62863: LIST
62864: LIST
62865: PUSH
62866: LD_INT 5
62868: PUSH
62869: LD_INT 1
62871: PUSH
62872: EMPTY
62873: LIST
62874: LIST
62875: PUSH
62876: LD_INT 4
62878: PUSH
62879: LD_INT 1
62881: PUSH
62882: EMPTY
62883: LIST
62884: LIST
62885: PUSH
62886: LD_INT 3
62888: PUSH
62889: LD_INT 0
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: PUSH
62896: LD_INT 3
62898: PUSH
62899: LD_INT 1
62901: NEG
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: PUSH
62907: LD_INT 3
62909: PUSH
62910: LD_INT 2
62912: NEG
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: PUSH
62918: LD_INT 5
62920: PUSH
62921: LD_INT 2
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: LIST
62934: LIST
62935: LIST
62936: LIST
62937: LIST
62938: LIST
62939: LIST
62940: LIST
62941: LIST
62942: LIST
62943: LIST
62944: LIST
62945: LIST
62946: LIST
62947: LIST
62948: LIST
62949: LIST
62950: LIST
62951: LIST
62952: LIST
62953: LIST
62954: LIST
62955: LIST
62956: LIST
62957: LIST
62958: LIST
62959: LIST
62960: LIST
62961: LIST
62962: LIST
62963: LIST
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: LIST
62969: LIST
62970: LIST
62971: LIST
62972: LIST
62973: LIST
62974: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
62975: LD_ADDR_VAR 0 32
62979: PUSH
62980: LD_INT 4
62982: NEG
62983: PUSH
62984: LD_INT 0
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: PUSH
62991: LD_INT 4
62993: NEG
62994: PUSH
62995: LD_INT 1
62997: NEG
62998: PUSH
62999: EMPTY
63000: LIST
63001: LIST
63002: PUSH
63003: LD_INT 3
63005: NEG
63006: PUSH
63007: LD_INT 0
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: LD_INT 3
63016: NEG
63017: PUSH
63018: LD_INT 1
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: PUSH
63025: LD_INT 4
63027: NEG
63028: PUSH
63029: LD_INT 1
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: PUSH
63036: LD_INT 5
63038: NEG
63039: PUSH
63040: LD_INT 0
63042: PUSH
63043: EMPTY
63044: LIST
63045: LIST
63046: PUSH
63047: LD_INT 5
63049: NEG
63050: PUSH
63051: LD_INT 1
63053: NEG
63054: PUSH
63055: EMPTY
63056: LIST
63057: LIST
63058: PUSH
63059: LD_INT 5
63061: NEG
63062: PUSH
63063: LD_INT 2
63065: NEG
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: PUSH
63071: LD_INT 3
63073: NEG
63074: PUSH
63075: LD_INT 2
63077: PUSH
63078: EMPTY
63079: LIST
63080: LIST
63081: PUSH
63082: LD_INT 3
63084: NEG
63085: PUSH
63086: LD_INT 3
63088: NEG
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: LD_INT 3
63096: NEG
63097: PUSH
63098: LD_INT 4
63100: NEG
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: PUSH
63106: LD_INT 2
63108: NEG
63109: PUSH
63110: LD_INT 3
63112: NEG
63113: PUSH
63114: EMPTY
63115: LIST
63116: LIST
63117: PUSH
63118: LD_INT 2
63120: NEG
63121: PUSH
63122: LD_INT 2
63124: NEG
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PUSH
63130: LD_INT 3
63132: NEG
63133: PUSH
63134: LD_INT 2
63136: NEG
63137: PUSH
63138: EMPTY
63139: LIST
63140: LIST
63141: PUSH
63142: LD_INT 4
63144: NEG
63145: PUSH
63146: LD_INT 3
63148: NEG
63149: PUSH
63150: EMPTY
63151: LIST
63152: LIST
63153: PUSH
63154: LD_INT 4
63156: NEG
63157: PUSH
63158: LD_INT 4
63160: NEG
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: PUSH
63166: LD_INT 2
63168: NEG
63169: PUSH
63170: LD_INT 4
63172: NEG
63173: PUSH
63174: EMPTY
63175: LIST
63176: LIST
63177: PUSH
63178: LD_INT 4
63180: NEG
63181: PUSH
63182: LD_INT 2
63184: NEG
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 0
63192: PUSH
63193: LD_INT 4
63195: NEG
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: PUSH
63201: LD_INT 0
63203: PUSH
63204: LD_INT 5
63206: NEG
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: PUSH
63212: LD_INT 1
63214: PUSH
63215: LD_INT 4
63217: NEG
63218: PUSH
63219: EMPTY
63220: LIST
63221: LIST
63222: PUSH
63223: LD_INT 1
63225: PUSH
63226: LD_INT 3
63228: NEG
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: PUSH
63234: LD_INT 0
63236: PUSH
63237: LD_INT 3
63239: NEG
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: PUSH
63245: LD_INT 1
63247: NEG
63248: PUSH
63249: LD_INT 4
63251: NEG
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: PUSH
63257: LD_INT 1
63259: NEG
63260: PUSH
63261: LD_INT 5
63263: NEG
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: LD_INT 2
63271: PUSH
63272: LD_INT 3
63274: NEG
63275: PUSH
63276: EMPTY
63277: LIST
63278: LIST
63279: PUSH
63280: LD_INT 2
63282: NEG
63283: PUSH
63284: LD_INT 5
63286: NEG
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: PUSH
63292: LD_INT 3
63294: PUSH
63295: LD_INT 0
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: PUSH
63302: LD_INT 3
63304: PUSH
63305: LD_INT 1
63307: NEG
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: PUSH
63313: LD_INT 4
63315: PUSH
63316: LD_INT 0
63318: PUSH
63319: EMPTY
63320: LIST
63321: LIST
63322: PUSH
63323: LD_INT 4
63325: PUSH
63326: LD_INT 1
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: PUSH
63333: LD_INT 3
63335: PUSH
63336: LD_INT 1
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: PUSH
63343: LD_INT 2
63345: PUSH
63346: LD_INT 0
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: PUSH
63353: LD_INT 2
63355: PUSH
63356: LD_INT 1
63358: NEG
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: LD_INT 2
63366: PUSH
63367: LD_INT 2
63369: NEG
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: PUSH
63375: LD_INT 4
63377: PUSH
63378: LD_INT 2
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PUSH
63385: LD_INT 4
63387: PUSH
63388: LD_INT 4
63390: PUSH
63391: EMPTY
63392: LIST
63393: LIST
63394: PUSH
63395: LD_INT 4
63397: PUSH
63398: LD_INT 3
63400: PUSH
63401: EMPTY
63402: LIST
63403: LIST
63404: PUSH
63405: LD_INT 5
63407: PUSH
63408: LD_INT 4
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: PUSH
63415: LD_INT 5
63417: PUSH
63418: LD_INT 5
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: LD_INT 4
63427: PUSH
63428: LD_INT 5
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: PUSH
63435: LD_INT 3
63437: PUSH
63438: LD_INT 4
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: PUSH
63445: LD_INT 3
63447: PUSH
63448: LD_INT 3
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: PUSH
63455: LD_INT 5
63457: PUSH
63458: LD_INT 3
63460: PUSH
63461: EMPTY
63462: LIST
63463: LIST
63464: PUSH
63465: LD_INT 3
63467: PUSH
63468: LD_INT 5
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: LIST
63479: LIST
63480: LIST
63481: LIST
63482: LIST
63483: LIST
63484: LIST
63485: LIST
63486: LIST
63487: LIST
63488: LIST
63489: LIST
63490: LIST
63491: LIST
63492: LIST
63493: LIST
63494: LIST
63495: LIST
63496: LIST
63497: LIST
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: LIST
63521: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
63522: LD_ADDR_VAR 0 33
63526: PUSH
63527: LD_INT 4
63529: NEG
63530: PUSH
63531: LD_INT 4
63533: NEG
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: PUSH
63539: LD_INT 4
63541: NEG
63542: PUSH
63543: LD_INT 5
63545: NEG
63546: PUSH
63547: EMPTY
63548: LIST
63549: LIST
63550: PUSH
63551: LD_INT 3
63553: NEG
63554: PUSH
63555: LD_INT 4
63557: NEG
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: PUSH
63563: LD_INT 3
63565: NEG
63566: PUSH
63567: LD_INT 3
63569: NEG
63570: PUSH
63571: EMPTY
63572: LIST
63573: LIST
63574: PUSH
63575: LD_INT 4
63577: NEG
63578: PUSH
63579: LD_INT 3
63581: NEG
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: PUSH
63587: LD_INT 5
63589: NEG
63590: PUSH
63591: LD_INT 4
63593: NEG
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PUSH
63599: LD_INT 5
63601: NEG
63602: PUSH
63603: LD_INT 5
63605: NEG
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: PUSH
63611: LD_INT 3
63613: NEG
63614: PUSH
63615: LD_INT 5
63617: NEG
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: PUSH
63623: LD_INT 5
63625: NEG
63626: PUSH
63627: LD_INT 3
63629: NEG
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: PUSH
63635: LD_INT 0
63637: PUSH
63638: LD_INT 3
63640: NEG
63641: PUSH
63642: EMPTY
63643: LIST
63644: LIST
63645: PUSH
63646: LD_INT 0
63648: PUSH
63649: LD_INT 4
63651: NEG
63652: PUSH
63653: EMPTY
63654: LIST
63655: LIST
63656: PUSH
63657: LD_INT 1
63659: PUSH
63660: LD_INT 3
63662: NEG
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: PUSH
63668: LD_INT 1
63670: PUSH
63671: LD_INT 2
63673: NEG
63674: PUSH
63675: EMPTY
63676: LIST
63677: LIST
63678: PUSH
63679: LD_INT 0
63681: PUSH
63682: LD_INT 2
63684: NEG
63685: PUSH
63686: EMPTY
63687: LIST
63688: LIST
63689: PUSH
63690: LD_INT 1
63692: NEG
63693: PUSH
63694: LD_INT 3
63696: NEG
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: LD_INT 1
63704: NEG
63705: PUSH
63706: LD_INT 4
63708: NEG
63709: PUSH
63710: EMPTY
63711: LIST
63712: LIST
63713: PUSH
63714: LD_INT 2
63716: PUSH
63717: LD_INT 2
63719: NEG
63720: PUSH
63721: EMPTY
63722: LIST
63723: LIST
63724: PUSH
63725: LD_INT 2
63727: NEG
63728: PUSH
63729: LD_INT 4
63731: NEG
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: PUSH
63737: LD_INT 4
63739: PUSH
63740: LD_INT 0
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 4
63749: PUSH
63750: LD_INT 1
63752: NEG
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: PUSH
63758: LD_INT 5
63760: PUSH
63761: LD_INT 0
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: PUSH
63768: LD_INT 5
63770: PUSH
63771: LD_INT 1
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: PUSH
63778: LD_INT 4
63780: PUSH
63781: LD_INT 1
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: PUSH
63788: LD_INT 3
63790: PUSH
63791: LD_INT 0
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PUSH
63798: LD_INT 3
63800: PUSH
63801: LD_INT 1
63803: NEG
63804: PUSH
63805: EMPTY
63806: LIST
63807: LIST
63808: PUSH
63809: LD_INT 3
63811: PUSH
63812: LD_INT 2
63814: NEG
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: PUSH
63820: LD_INT 5
63822: PUSH
63823: LD_INT 2
63825: PUSH
63826: EMPTY
63827: LIST
63828: LIST
63829: PUSH
63830: LD_INT 3
63832: PUSH
63833: LD_INT 3
63835: PUSH
63836: EMPTY
63837: LIST
63838: LIST
63839: PUSH
63840: LD_INT 3
63842: PUSH
63843: LD_INT 2
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: PUSH
63850: LD_INT 4
63852: PUSH
63853: LD_INT 3
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: PUSH
63860: LD_INT 4
63862: PUSH
63863: LD_INT 4
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: PUSH
63870: LD_INT 3
63872: PUSH
63873: LD_INT 4
63875: PUSH
63876: EMPTY
63877: LIST
63878: LIST
63879: PUSH
63880: LD_INT 2
63882: PUSH
63883: LD_INT 3
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: PUSH
63890: LD_INT 2
63892: PUSH
63893: LD_INT 2
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PUSH
63900: LD_INT 4
63902: PUSH
63903: LD_INT 2
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: LD_INT 2
63912: PUSH
63913: LD_INT 4
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: PUSH
63920: LD_INT 0
63922: PUSH
63923: LD_INT 4
63925: PUSH
63926: EMPTY
63927: LIST
63928: LIST
63929: PUSH
63930: LD_INT 0
63932: PUSH
63933: LD_INT 3
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: PUSH
63940: LD_INT 1
63942: PUSH
63943: LD_INT 4
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: PUSH
63950: LD_INT 1
63952: PUSH
63953: LD_INT 5
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: PUSH
63960: LD_INT 0
63962: PUSH
63963: LD_INT 5
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: PUSH
63970: LD_INT 1
63972: NEG
63973: PUSH
63974: LD_INT 4
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: PUSH
63981: LD_INT 1
63983: NEG
63984: PUSH
63985: LD_INT 3
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: PUSH
63992: LD_INT 2
63994: PUSH
63995: LD_INT 5
63997: PUSH
63998: EMPTY
63999: LIST
64000: LIST
64001: PUSH
64002: LD_INT 2
64004: NEG
64005: PUSH
64006: LD_INT 3
64008: PUSH
64009: EMPTY
64010: LIST
64011: LIST
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: LIST
64017: LIST
64018: LIST
64019: LIST
64020: LIST
64021: LIST
64022: LIST
64023: LIST
64024: LIST
64025: LIST
64026: LIST
64027: LIST
64028: LIST
64029: LIST
64030: LIST
64031: LIST
64032: LIST
64033: LIST
64034: LIST
64035: LIST
64036: LIST
64037: LIST
64038: LIST
64039: LIST
64040: LIST
64041: LIST
64042: LIST
64043: LIST
64044: LIST
64045: LIST
64046: LIST
64047: LIST
64048: LIST
64049: LIST
64050: LIST
64051: LIST
64052: LIST
64053: LIST
64054: LIST
64055: LIST
64056: LIST
64057: LIST
64058: LIST
64059: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
64060: LD_ADDR_VAR 0 34
64064: PUSH
64065: LD_INT 0
64067: PUSH
64068: LD_INT 4
64070: NEG
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: PUSH
64076: LD_INT 0
64078: PUSH
64079: LD_INT 5
64081: NEG
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: PUSH
64087: LD_INT 1
64089: PUSH
64090: LD_INT 4
64092: NEG
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: PUSH
64098: LD_INT 1
64100: PUSH
64101: LD_INT 3
64103: NEG
64104: PUSH
64105: EMPTY
64106: LIST
64107: LIST
64108: PUSH
64109: LD_INT 0
64111: PUSH
64112: LD_INT 3
64114: NEG
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: PUSH
64120: LD_INT 1
64122: NEG
64123: PUSH
64124: LD_INT 4
64126: NEG
64127: PUSH
64128: EMPTY
64129: LIST
64130: LIST
64131: PUSH
64132: LD_INT 1
64134: NEG
64135: PUSH
64136: LD_INT 5
64138: NEG
64139: PUSH
64140: EMPTY
64141: LIST
64142: LIST
64143: PUSH
64144: LD_INT 2
64146: PUSH
64147: LD_INT 3
64149: NEG
64150: PUSH
64151: EMPTY
64152: LIST
64153: LIST
64154: PUSH
64155: LD_INT 2
64157: NEG
64158: PUSH
64159: LD_INT 5
64161: NEG
64162: PUSH
64163: EMPTY
64164: LIST
64165: LIST
64166: PUSH
64167: LD_INT 3
64169: PUSH
64170: LD_INT 0
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: PUSH
64177: LD_INT 3
64179: PUSH
64180: LD_INT 1
64182: NEG
64183: PUSH
64184: EMPTY
64185: LIST
64186: LIST
64187: PUSH
64188: LD_INT 4
64190: PUSH
64191: LD_INT 0
64193: PUSH
64194: EMPTY
64195: LIST
64196: LIST
64197: PUSH
64198: LD_INT 4
64200: PUSH
64201: LD_INT 1
64203: PUSH
64204: EMPTY
64205: LIST
64206: LIST
64207: PUSH
64208: LD_INT 3
64210: PUSH
64211: LD_INT 1
64213: PUSH
64214: EMPTY
64215: LIST
64216: LIST
64217: PUSH
64218: LD_INT 2
64220: PUSH
64221: LD_INT 0
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: PUSH
64228: LD_INT 2
64230: PUSH
64231: LD_INT 1
64233: NEG
64234: PUSH
64235: EMPTY
64236: LIST
64237: LIST
64238: PUSH
64239: LD_INT 2
64241: PUSH
64242: LD_INT 2
64244: NEG
64245: PUSH
64246: EMPTY
64247: LIST
64248: LIST
64249: PUSH
64250: LD_INT 4
64252: PUSH
64253: LD_INT 2
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: PUSH
64260: LD_INT 4
64262: PUSH
64263: LD_INT 4
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: PUSH
64270: LD_INT 4
64272: PUSH
64273: LD_INT 3
64275: PUSH
64276: EMPTY
64277: LIST
64278: LIST
64279: PUSH
64280: LD_INT 5
64282: PUSH
64283: LD_INT 4
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: PUSH
64290: LD_INT 5
64292: PUSH
64293: LD_INT 5
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: PUSH
64300: LD_INT 4
64302: PUSH
64303: LD_INT 5
64305: PUSH
64306: EMPTY
64307: LIST
64308: LIST
64309: PUSH
64310: LD_INT 3
64312: PUSH
64313: LD_INT 4
64315: PUSH
64316: EMPTY
64317: LIST
64318: LIST
64319: PUSH
64320: LD_INT 3
64322: PUSH
64323: LD_INT 3
64325: PUSH
64326: EMPTY
64327: LIST
64328: LIST
64329: PUSH
64330: LD_INT 5
64332: PUSH
64333: LD_INT 3
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: PUSH
64340: LD_INT 3
64342: PUSH
64343: LD_INT 5
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: PUSH
64350: LD_INT 0
64352: PUSH
64353: LD_INT 3
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: LD_INT 0
64362: PUSH
64363: LD_INT 2
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PUSH
64370: LD_INT 1
64372: PUSH
64373: LD_INT 3
64375: PUSH
64376: EMPTY
64377: LIST
64378: LIST
64379: PUSH
64380: LD_INT 1
64382: PUSH
64383: LD_INT 4
64385: PUSH
64386: EMPTY
64387: LIST
64388: LIST
64389: PUSH
64390: LD_INT 0
64392: PUSH
64393: LD_INT 4
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: PUSH
64400: LD_INT 1
64402: NEG
64403: PUSH
64404: LD_INT 3
64406: PUSH
64407: EMPTY
64408: LIST
64409: LIST
64410: PUSH
64411: LD_INT 1
64413: NEG
64414: PUSH
64415: LD_INT 2
64417: PUSH
64418: EMPTY
64419: LIST
64420: LIST
64421: PUSH
64422: LD_INT 2
64424: PUSH
64425: LD_INT 4
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: PUSH
64432: LD_INT 2
64434: NEG
64435: PUSH
64436: LD_INT 2
64438: PUSH
64439: EMPTY
64440: LIST
64441: LIST
64442: PUSH
64443: LD_INT 4
64445: NEG
64446: PUSH
64447: LD_INT 0
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: PUSH
64454: LD_INT 4
64456: NEG
64457: PUSH
64458: LD_INT 1
64460: NEG
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: PUSH
64466: LD_INT 3
64468: NEG
64469: PUSH
64470: LD_INT 0
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: PUSH
64477: LD_INT 3
64479: NEG
64480: PUSH
64481: LD_INT 1
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: PUSH
64488: LD_INT 4
64490: NEG
64491: PUSH
64492: LD_INT 1
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: PUSH
64499: LD_INT 5
64501: NEG
64502: PUSH
64503: LD_INT 0
64505: PUSH
64506: EMPTY
64507: LIST
64508: LIST
64509: PUSH
64510: LD_INT 5
64512: NEG
64513: PUSH
64514: LD_INT 1
64516: NEG
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: PUSH
64522: LD_INT 5
64524: NEG
64525: PUSH
64526: LD_INT 2
64528: NEG
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: PUSH
64534: LD_INT 3
64536: NEG
64537: PUSH
64538: LD_INT 2
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: PUSH
64545: EMPTY
64546: LIST
64547: LIST
64548: LIST
64549: LIST
64550: LIST
64551: LIST
64552: LIST
64553: LIST
64554: LIST
64555: LIST
64556: LIST
64557: LIST
64558: LIST
64559: LIST
64560: LIST
64561: LIST
64562: LIST
64563: LIST
64564: LIST
64565: LIST
64566: LIST
64567: LIST
64568: LIST
64569: LIST
64570: LIST
64571: LIST
64572: LIST
64573: LIST
64574: LIST
64575: LIST
64576: LIST
64577: LIST
64578: LIST
64579: LIST
64580: LIST
64581: LIST
64582: LIST
64583: LIST
64584: LIST
64585: LIST
64586: LIST
64587: LIST
64588: LIST
64589: LIST
64590: LIST
64591: ST_TO_ADDR
// end ; end ;
64592: GO 64595
64594: POP
// case btype of b_depot , b_warehouse :
64595: LD_VAR 0 1
64599: PUSH
64600: LD_INT 0
64602: DOUBLE
64603: EQUAL
64604: IFTRUE 64614
64606: LD_INT 1
64608: DOUBLE
64609: EQUAL
64610: IFTRUE 64614
64612: GO 64815
64614: POP
// case nation of nation_american :
64615: LD_VAR 0 5
64619: PUSH
64620: LD_INT 1
64622: DOUBLE
64623: EQUAL
64624: IFTRUE 64628
64626: GO 64684
64628: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
64629: LD_ADDR_VAR 0 9
64633: PUSH
64634: LD_VAR 0 11
64638: PUSH
64639: LD_VAR 0 12
64643: PUSH
64644: LD_VAR 0 13
64648: PUSH
64649: LD_VAR 0 14
64653: PUSH
64654: LD_VAR 0 15
64658: PUSH
64659: LD_VAR 0 16
64663: PUSH
64664: EMPTY
64665: LIST
64666: LIST
64667: LIST
64668: LIST
64669: LIST
64670: LIST
64671: PUSH
64672: LD_VAR 0 4
64676: PUSH
64677: LD_INT 1
64679: PLUS
64680: ARRAY
64681: ST_TO_ADDR
64682: GO 64813
64684: LD_INT 2
64686: DOUBLE
64687: EQUAL
64688: IFTRUE 64692
64690: GO 64748
64692: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
64693: LD_ADDR_VAR 0 9
64697: PUSH
64698: LD_VAR 0 17
64702: PUSH
64703: LD_VAR 0 18
64707: PUSH
64708: LD_VAR 0 19
64712: PUSH
64713: LD_VAR 0 20
64717: PUSH
64718: LD_VAR 0 21
64722: PUSH
64723: LD_VAR 0 22
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: LIST
64732: LIST
64733: LIST
64734: LIST
64735: PUSH
64736: LD_VAR 0 4
64740: PUSH
64741: LD_INT 1
64743: PLUS
64744: ARRAY
64745: ST_TO_ADDR
64746: GO 64813
64748: LD_INT 3
64750: DOUBLE
64751: EQUAL
64752: IFTRUE 64756
64754: GO 64812
64756: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
64757: LD_ADDR_VAR 0 9
64761: PUSH
64762: LD_VAR 0 23
64766: PUSH
64767: LD_VAR 0 24
64771: PUSH
64772: LD_VAR 0 25
64776: PUSH
64777: LD_VAR 0 26
64781: PUSH
64782: LD_VAR 0 27
64786: PUSH
64787: LD_VAR 0 28
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: LIST
64796: LIST
64797: LIST
64798: LIST
64799: PUSH
64800: LD_VAR 0 4
64804: PUSH
64805: LD_INT 1
64807: PLUS
64808: ARRAY
64809: ST_TO_ADDR
64810: GO 64813
64812: POP
64813: GO 65368
64815: LD_INT 2
64817: DOUBLE
64818: EQUAL
64819: IFTRUE 64829
64821: LD_INT 3
64823: DOUBLE
64824: EQUAL
64825: IFTRUE 64829
64827: GO 64885
64829: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
64830: LD_ADDR_VAR 0 9
64834: PUSH
64835: LD_VAR 0 29
64839: PUSH
64840: LD_VAR 0 30
64844: PUSH
64845: LD_VAR 0 31
64849: PUSH
64850: LD_VAR 0 32
64854: PUSH
64855: LD_VAR 0 33
64859: PUSH
64860: LD_VAR 0 34
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: LIST
64869: LIST
64870: LIST
64871: LIST
64872: PUSH
64873: LD_VAR 0 4
64877: PUSH
64878: LD_INT 1
64880: PLUS
64881: ARRAY
64882: ST_TO_ADDR
64883: GO 65368
64885: LD_INT 16
64887: DOUBLE
64888: EQUAL
64889: IFTRUE 64947
64891: LD_INT 17
64893: DOUBLE
64894: EQUAL
64895: IFTRUE 64947
64897: LD_INT 18
64899: DOUBLE
64900: EQUAL
64901: IFTRUE 64947
64903: LD_INT 19
64905: DOUBLE
64906: EQUAL
64907: IFTRUE 64947
64909: LD_INT 22
64911: DOUBLE
64912: EQUAL
64913: IFTRUE 64947
64915: LD_INT 20
64917: DOUBLE
64918: EQUAL
64919: IFTRUE 64947
64921: LD_INT 21
64923: DOUBLE
64924: EQUAL
64925: IFTRUE 64947
64927: LD_INT 23
64929: DOUBLE
64930: EQUAL
64931: IFTRUE 64947
64933: LD_INT 24
64935: DOUBLE
64936: EQUAL
64937: IFTRUE 64947
64939: LD_INT 25
64941: DOUBLE
64942: EQUAL
64943: IFTRUE 64947
64945: GO 65003
64947: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64948: LD_ADDR_VAR 0 9
64952: PUSH
64953: LD_VAR 0 35
64957: PUSH
64958: LD_VAR 0 36
64962: PUSH
64963: LD_VAR 0 37
64967: PUSH
64968: LD_VAR 0 38
64972: PUSH
64973: LD_VAR 0 39
64977: PUSH
64978: LD_VAR 0 40
64982: PUSH
64983: EMPTY
64984: LIST
64985: LIST
64986: LIST
64987: LIST
64988: LIST
64989: LIST
64990: PUSH
64991: LD_VAR 0 4
64995: PUSH
64996: LD_INT 1
64998: PLUS
64999: ARRAY
65000: ST_TO_ADDR
65001: GO 65368
65003: LD_INT 6
65005: DOUBLE
65006: EQUAL
65007: IFTRUE 65059
65009: LD_INT 7
65011: DOUBLE
65012: EQUAL
65013: IFTRUE 65059
65015: LD_INT 8
65017: DOUBLE
65018: EQUAL
65019: IFTRUE 65059
65021: LD_INT 13
65023: DOUBLE
65024: EQUAL
65025: IFTRUE 65059
65027: LD_INT 12
65029: DOUBLE
65030: EQUAL
65031: IFTRUE 65059
65033: LD_INT 15
65035: DOUBLE
65036: EQUAL
65037: IFTRUE 65059
65039: LD_INT 11
65041: DOUBLE
65042: EQUAL
65043: IFTRUE 65059
65045: LD_INT 14
65047: DOUBLE
65048: EQUAL
65049: IFTRUE 65059
65051: LD_INT 10
65053: DOUBLE
65054: EQUAL
65055: IFTRUE 65059
65057: GO 65115
65059: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
65060: LD_ADDR_VAR 0 9
65064: PUSH
65065: LD_VAR 0 41
65069: PUSH
65070: LD_VAR 0 42
65074: PUSH
65075: LD_VAR 0 43
65079: PUSH
65080: LD_VAR 0 44
65084: PUSH
65085: LD_VAR 0 45
65089: PUSH
65090: LD_VAR 0 46
65094: PUSH
65095: EMPTY
65096: LIST
65097: LIST
65098: LIST
65099: LIST
65100: LIST
65101: LIST
65102: PUSH
65103: LD_VAR 0 4
65107: PUSH
65108: LD_INT 1
65110: PLUS
65111: ARRAY
65112: ST_TO_ADDR
65113: GO 65368
65115: LD_INT 36
65117: DOUBLE
65118: EQUAL
65119: IFTRUE 65123
65121: GO 65179
65123: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
65124: LD_ADDR_VAR 0 9
65128: PUSH
65129: LD_VAR 0 47
65133: PUSH
65134: LD_VAR 0 48
65138: PUSH
65139: LD_VAR 0 49
65143: PUSH
65144: LD_VAR 0 50
65148: PUSH
65149: LD_VAR 0 51
65153: PUSH
65154: LD_VAR 0 52
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: LIST
65163: LIST
65164: LIST
65165: LIST
65166: PUSH
65167: LD_VAR 0 4
65171: PUSH
65172: LD_INT 1
65174: PLUS
65175: ARRAY
65176: ST_TO_ADDR
65177: GO 65368
65179: LD_INT 4
65181: DOUBLE
65182: EQUAL
65183: IFTRUE 65205
65185: LD_INT 5
65187: DOUBLE
65188: EQUAL
65189: IFTRUE 65205
65191: LD_INT 34
65193: DOUBLE
65194: EQUAL
65195: IFTRUE 65205
65197: LD_INT 37
65199: DOUBLE
65200: EQUAL
65201: IFTRUE 65205
65203: GO 65261
65205: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
65206: LD_ADDR_VAR 0 9
65210: PUSH
65211: LD_VAR 0 53
65215: PUSH
65216: LD_VAR 0 54
65220: PUSH
65221: LD_VAR 0 55
65225: PUSH
65226: LD_VAR 0 56
65230: PUSH
65231: LD_VAR 0 57
65235: PUSH
65236: LD_VAR 0 58
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: LIST
65245: LIST
65246: LIST
65247: LIST
65248: PUSH
65249: LD_VAR 0 4
65253: PUSH
65254: LD_INT 1
65256: PLUS
65257: ARRAY
65258: ST_TO_ADDR
65259: GO 65368
65261: LD_INT 31
65263: DOUBLE
65264: EQUAL
65265: IFTRUE 65311
65267: LD_INT 32
65269: DOUBLE
65270: EQUAL
65271: IFTRUE 65311
65273: LD_INT 33
65275: DOUBLE
65276: EQUAL
65277: IFTRUE 65311
65279: LD_INT 27
65281: DOUBLE
65282: EQUAL
65283: IFTRUE 65311
65285: LD_INT 26
65287: DOUBLE
65288: EQUAL
65289: IFTRUE 65311
65291: LD_INT 28
65293: DOUBLE
65294: EQUAL
65295: IFTRUE 65311
65297: LD_INT 29
65299: DOUBLE
65300: EQUAL
65301: IFTRUE 65311
65303: LD_INT 30
65305: DOUBLE
65306: EQUAL
65307: IFTRUE 65311
65309: GO 65367
65311: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
65312: LD_ADDR_VAR 0 9
65316: PUSH
65317: LD_VAR 0 59
65321: PUSH
65322: LD_VAR 0 60
65326: PUSH
65327: LD_VAR 0 61
65331: PUSH
65332: LD_VAR 0 62
65336: PUSH
65337: LD_VAR 0 63
65341: PUSH
65342: LD_VAR 0 64
65346: PUSH
65347: EMPTY
65348: LIST
65349: LIST
65350: LIST
65351: LIST
65352: LIST
65353: LIST
65354: PUSH
65355: LD_VAR 0 4
65359: PUSH
65360: LD_INT 1
65362: PLUS
65363: ARRAY
65364: ST_TO_ADDR
65365: GO 65368
65367: POP
// temp_list2 = [ ] ;
65368: LD_ADDR_VAR 0 10
65372: PUSH
65373: EMPTY
65374: ST_TO_ADDR
// for i in temp_list do
65375: LD_ADDR_VAR 0 8
65379: PUSH
65380: LD_VAR 0 9
65384: PUSH
65385: FOR_IN
65386: IFFALSE 65438
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
65388: LD_ADDR_VAR 0 10
65392: PUSH
65393: LD_VAR 0 10
65397: PUSH
65398: LD_VAR 0 8
65402: PUSH
65403: LD_INT 1
65405: ARRAY
65406: PUSH
65407: LD_VAR 0 2
65411: PLUS
65412: PUSH
65413: LD_VAR 0 8
65417: PUSH
65418: LD_INT 2
65420: ARRAY
65421: PUSH
65422: LD_VAR 0 3
65426: PLUS
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: PUSH
65432: EMPTY
65433: LIST
65434: ADD
65435: ST_TO_ADDR
65436: GO 65385
65438: POP
65439: POP
// result = temp_list2 ;
65440: LD_ADDR_VAR 0 7
65444: PUSH
65445: LD_VAR 0 10
65449: ST_TO_ADDR
// end ;
65450: LD_VAR 0 7
65454: RET
// export function EnemyInRange ( unit , dist ) ; begin
65455: LD_INT 0
65457: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
65458: LD_ADDR_VAR 0 3
65462: PUSH
65463: LD_VAR 0 1
65467: PPUSH
65468: CALL_OW 255
65472: PPUSH
65473: LD_VAR 0 1
65477: PPUSH
65478: CALL_OW 250
65482: PPUSH
65483: LD_VAR 0 1
65487: PPUSH
65488: CALL_OW 251
65492: PPUSH
65493: LD_VAR 0 2
65497: PPUSH
65498: CALL 38851 0 4
65502: PUSH
65503: LD_INT 4
65505: ARRAY
65506: ST_TO_ADDR
// end ;
65507: LD_VAR 0 3
65511: RET
// export function PlayerSeeMe ( unit ) ; begin
65512: LD_INT 0
65514: PPUSH
// result := See ( your_side , unit ) ;
65515: LD_ADDR_VAR 0 2
65519: PUSH
65520: LD_OWVAR 2
65524: PPUSH
65525: LD_VAR 0 1
65529: PPUSH
65530: CALL_OW 292
65534: ST_TO_ADDR
// end ;
65535: LD_VAR 0 2
65539: RET
// export function ReverseDir ( unit ) ; begin
65540: LD_INT 0
65542: PPUSH
// if not unit then
65543: LD_VAR 0 1
65547: NOT
65548: IFFALSE 65552
// exit ;
65550: GO 65575
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
65552: LD_ADDR_VAR 0 2
65556: PUSH
65557: LD_VAR 0 1
65561: PPUSH
65562: CALL_OW 254
65566: PUSH
65567: LD_INT 3
65569: PLUS
65570: PUSH
65571: LD_INT 6
65573: MOD
65574: ST_TO_ADDR
// end ;
65575: LD_VAR 0 2
65579: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
65580: LD_INT 0
65582: PPUSH
65583: PPUSH
65584: PPUSH
65585: PPUSH
65586: PPUSH
// if not hexes then
65587: LD_VAR 0 2
65591: NOT
65592: IFFALSE 65596
// exit ;
65594: GO 65744
// dist := 9999 ;
65596: LD_ADDR_VAR 0 5
65600: PUSH
65601: LD_INT 9999
65603: ST_TO_ADDR
// for i = 1 to hexes do
65604: LD_ADDR_VAR 0 4
65608: PUSH
65609: DOUBLE
65610: LD_INT 1
65612: DEC
65613: ST_TO_ADDR
65614: LD_VAR 0 2
65618: PUSH
65619: FOR_TO
65620: IFFALSE 65732
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
65622: LD_VAR 0 1
65626: PPUSH
65627: LD_VAR 0 2
65631: PUSH
65632: LD_VAR 0 4
65636: ARRAY
65637: PUSH
65638: LD_INT 1
65640: ARRAY
65641: PPUSH
65642: LD_VAR 0 2
65646: PUSH
65647: LD_VAR 0 4
65651: ARRAY
65652: PUSH
65653: LD_INT 2
65655: ARRAY
65656: PPUSH
65657: CALL_OW 297
65661: PUSH
65662: LD_VAR 0 5
65666: LESS
65667: IFFALSE 65730
// begin hex := hexes [ i ] ;
65669: LD_ADDR_VAR 0 7
65673: PUSH
65674: LD_VAR 0 2
65678: PUSH
65679: LD_VAR 0 4
65683: ARRAY
65684: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
65685: LD_ADDR_VAR 0 5
65689: PUSH
65690: LD_VAR 0 1
65694: PPUSH
65695: LD_VAR 0 2
65699: PUSH
65700: LD_VAR 0 4
65704: ARRAY
65705: PUSH
65706: LD_INT 1
65708: ARRAY
65709: PPUSH
65710: LD_VAR 0 2
65714: PUSH
65715: LD_VAR 0 4
65719: ARRAY
65720: PUSH
65721: LD_INT 2
65723: ARRAY
65724: PPUSH
65725: CALL_OW 297
65729: ST_TO_ADDR
// end ; end ;
65730: GO 65619
65732: POP
65733: POP
// result := hex ;
65734: LD_ADDR_VAR 0 3
65738: PUSH
65739: LD_VAR 0 7
65743: ST_TO_ADDR
// end ;
65744: LD_VAR 0 3
65748: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
65749: LD_INT 0
65751: PPUSH
65752: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
65753: LD_VAR 0 1
65757: NOT
65758: PUSH
65759: LD_VAR 0 1
65763: PUSH
65764: LD_INT 21
65766: PUSH
65767: LD_INT 2
65769: PUSH
65770: EMPTY
65771: LIST
65772: LIST
65773: PUSH
65774: LD_INT 23
65776: PUSH
65777: LD_INT 2
65779: PUSH
65780: EMPTY
65781: LIST
65782: LIST
65783: PUSH
65784: EMPTY
65785: LIST
65786: LIST
65787: PPUSH
65788: CALL_OW 69
65792: IN
65793: NOT
65794: OR
65795: IFFALSE 65799
// exit ;
65797: GO 65846
// for i = 1 to 3 do
65799: LD_ADDR_VAR 0 3
65803: PUSH
65804: DOUBLE
65805: LD_INT 1
65807: DEC
65808: ST_TO_ADDR
65809: LD_INT 3
65811: PUSH
65812: FOR_TO
65813: IFFALSE 65844
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
65815: LD_VAR 0 1
65819: PPUSH
65820: CALL_OW 250
65824: PPUSH
65825: LD_VAR 0 1
65829: PPUSH
65830: CALL_OW 251
65834: PPUSH
65835: LD_INT 1
65837: PPUSH
65838: CALL_OW 453
65842: GO 65812
65844: POP
65845: POP
// end ;
65846: LD_VAR 0 2
65850: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
65851: LD_INT 0
65853: PPUSH
65854: PPUSH
65855: PPUSH
65856: PPUSH
65857: PPUSH
65858: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
65859: LD_VAR 0 1
65863: NOT
65864: PUSH
65865: LD_VAR 0 2
65869: NOT
65870: OR
65871: PUSH
65872: LD_VAR 0 1
65876: PPUSH
65877: CALL_OW 314
65881: OR
65882: IFFALSE 65886
// exit ;
65884: GO 66327
// x := GetX ( enemy_unit ) ;
65886: LD_ADDR_VAR 0 7
65890: PUSH
65891: LD_VAR 0 2
65895: PPUSH
65896: CALL_OW 250
65900: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
65901: LD_ADDR_VAR 0 8
65905: PUSH
65906: LD_VAR 0 2
65910: PPUSH
65911: CALL_OW 251
65915: ST_TO_ADDR
// if not x or not y then
65916: LD_VAR 0 7
65920: NOT
65921: PUSH
65922: LD_VAR 0 8
65926: NOT
65927: OR
65928: IFFALSE 65932
// exit ;
65930: GO 66327
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
65932: LD_ADDR_VAR 0 6
65936: PUSH
65937: LD_VAR 0 7
65941: PPUSH
65942: LD_INT 0
65944: PPUSH
65945: LD_INT 4
65947: PPUSH
65948: CALL_OW 272
65952: PUSH
65953: LD_VAR 0 8
65957: PPUSH
65958: LD_INT 0
65960: PPUSH
65961: LD_INT 4
65963: PPUSH
65964: CALL_OW 273
65968: PUSH
65969: EMPTY
65970: LIST
65971: LIST
65972: PUSH
65973: LD_VAR 0 7
65977: PPUSH
65978: LD_INT 1
65980: PPUSH
65981: LD_INT 4
65983: PPUSH
65984: CALL_OW 272
65988: PUSH
65989: LD_VAR 0 8
65993: PPUSH
65994: LD_INT 1
65996: PPUSH
65997: LD_INT 4
65999: PPUSH
66000: CALL_OW 273
66004: PUSH
66005: EMPTY
66006: LIST
66007: LIST
66008: PUSH
66009: LD_VAR 0 7
66013: PPUSH
66014: LD_INT 2
66016: PPUSH
66017: LD_INT 4
66019: PPUSH
66020: CALL_OW 272
66024: PUSH
66025: LD_VAR 0 8
66029: PPUSH
66030: LD_INT 2
66032: PPUSH
66033: LD_INT 4
66035: PPUSH
66036: CALL_OW 273
66040: PUSH
66041: EMPTY
66042: LIST
66043: LIST
66044: PUSH
66045: LD_VAR 0 7
66049: PPUSH
66050: LD_INT 3
66052: PPUSH
66053: LD_INT 4
66055: PPUSH
66056: CALL_OW 272
66060: PUSH
66061: LD_VAR 0 8
66065: PPUSH
66066: LD_INT 3
66068: PPUSH
66069: LD_INT 4
66071: PPUSH
66072: CALL_OW 273
66076: PUSH
66077: EMPTY
66078: LIST
66079: LIST
66080: PUSH
66081: LD_VAR 0 7
66085: PPUSH
66086: LD_INT 4
66088: PPUSH
66089: LD_INT 4
66091: PPUSH
66092: CALL_OW 272
66096: PUSH
66097: LD_VAR 0 8
66101: PPUSH
66102: LD_INT 4
66104: PPUSH
66105: LD_INT 4
66107: PPUSH
66108: CALL_OW 273
66112: PUSH
66113: EMPTY
66114: LIST
66115: LIST
66116: PUSH
66117: LD_VAR 0 7
66121: PPUSH
66122: LD_INT 5
66124: PPUSH
66125: LD_INT 4
66127: PPUSH
66128: CALL_OW 272
66132: PUSH
66133: LD_VAR 0 8
66137: PPUSH
66138: LD_INT 5
66140: PPUSH
66141: LD_INT 4
66143: PPUSH
66144: CALL_OW 273
66148: PUSH
66149: EMPTY
66150: LIST
66151: LIST
66152: PUSH
66153: EMPTY
66154: LIST
66155: LIST
66156: LIST
66157: LIST
66158: LIST
66159: LIST
66160: ST_TO_ADDR
// for i = tmp downto 1 do
66161: LD_ADDR_VAR 0 4
66165: PUSH
66166: DOUBLE
66167: LD_VAR 0 6
66171: INC
66172: ST_TO_ADDR
66173: LD_INT 1
66175: PUSH
66176: FOR_DOWNTO
66177: IFFALSE 66278
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
66179: LD_VAR 0 6
66183: PUSH
66184: LD_VAR 0 4
66188: ARRAY
66189: PUSH
66190: LD_INT 1
66192: ARRAY
66193: PPUSH
66194: LD_VAR 0 6
66198: PUSH
66199: LD_VAR 0 4
66203: ARRAY
66204: PUSH
66205: LD_INT 2
66207: ARRAY
66208: PPUSH
66209: CALL_OW 488
66213: NOT
66214: PUSH
66215: LD_VAR 0 6
66219: PUSH
66220: LD_VAR 0 4
66224: ARRAY
66225: PUSH
66226: LD_INT 1
66228: ARRAY
66229: PPUSH
66230: LD_VAR 0 6
66234: PUSH
66235: LD_VAR 0 4
66239: ARRAY
66240: PUSH
66241: LD_INT 2
66243: ARRAY
66244: PPUSH
66245: CALL_OW 428
66249: PUSH
66250: LD_INT 0
66252: NONEQUAL
66253: OR
66254: IFFALSE 66276
// tmp := Delete ( tmp , i ) ;
66256: LD_ADDR_VAR 0 6
66260: PUSH
66261: LD_VAR 0 6
66265: PPUSH
66266: LD_VAR 0 4
66270: PPUSH
66271: CALL_OW 3
66275: ST_TO_ADDR
66276: GO 66176
66278: POP
66279: POP
// j := GetClosestHex ( unit , tmp ) ;
66280: LD_ADDR_VAR 0 5
66284: PUSH
66285: LD_VAR 0 1
66289: PPUSH
66290: LD_VAR 0 6
66294: PPUSH
66295: CALL 65580 0 2
66299: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
66300: LD_VAR 0 1
66304: PPUSH
66305: LD_VAR 0 5
66309: PUSH
66310: LD_INT 1
66312: ARRAY
66313: PPUSH
66314: LD_VAR 0 5
66318: PUSH
66319: LD_INT 2
66321: ARRAY
66322: PPUSH
66323: CALL_OW 111
// end ;
66327: LD_VAR 0 3
66331: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
66332: LD_INT 0
66334: PPUSH
66335: PPUSH
66336: PPUSH
// uc_side = 0 ;
66337: LD_ADDR_OWVAR 20
66341: PUSH
66342: LD_INT 0
66344: ST_TO_ADDR
// uc_nation = 0 ;
66345: LD_ADDR_OWVAR 21
66349: PUSH
66350: LD_INT 0
66352: ST_TO_ADDR
// InitHc_All ( ) ;
66353: CALL_OW 584
// InitVc ;
66357: CALL_OW 20
// if mastodonts then
66361: LD_VAR 0 6
66365: IFFALSE 66432
// for i = 1 to mastodonts do
66367: LD_ADDR_VAR 0 11
66371: PUSH
66372: DOUBLE
66373: LD_INT 1
66375: DEC
66376: ST_TO_ADDR
66377: LD_VAR 0 6
66381: PUSH
66382: FOR_TO
66383: IFFALSE 66430
// begin vc_chassis := 31 ;
66385: LD_ADDR_OWVAR 37
66389: PUSH
66390: LD_INT 31
66392: ST_TO_ADDR
// vc_control := control_rider ;
66393: LD_ADDR_OWVAR 38
66397: PUSH
66398: LD_INT 4
66400: ST_TO_ADDR
// animal := CreateVehicle ;
66401: LD_ADDR_VAR 0 12
66405: PUSH
66406: CALL_OW 45
66410: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66411: LD_VAR 0 12
66415: PPUSH
66416: LD_VAR 0 8
66420: PPUSH
66421: LD_INT 0
66423: PPUSH
66424: CALL 68620 0 3
// end ;
66428: GO 66382
66430: POP
66431: POP
// if horses then
66432: LD_VAR 0 5
66436: IFFALSE 66503
// for i = 1 to horses do
66438: LD_ADDR_VAR 0 11
66442: PUSH
66443: DOUBLE
66444: LD_INT 1
66446: DEC
66447: ST_TO_ADDR
66448: LD_VAR 0 5
66452: PUSH
66453: FOR_TO
66454: IFFALSE 66501
// begin hc_class := 21 ;
66456: LD_ADDR_OWVAR 28
66460: PUSH
66461: LD_INT 21
66463: ST_TO_ADDR
// hc_gallery :=  ;
66464: LD_ADDR_OWVAR 33
66468: PUSH
66469: LD_STRING 
66471: ST_TO_ADDR
// animal := CreateHuman ;
66472: LD_ADDR_VAR 0 12
66476: PUSH
66477: CALL_OW 44
66481: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66482: LD_VAR 0 12
66486: PPUSH
66487: LD_VAR 0 8
66491: PPUSH
66492: LD_INT 0
66494: PPUSH
66495: CALL 68620 0 3
// end ;
66499: GO 66453
66501: POP
66502: POP
// if birds then
66503: LD_VAR 0 1
66507: IFFALSE 66574
// for i = 1 to birds do
66509: LD_ADDR_VAR 0 11
66513: PUSH
66514: DOUBLE
66515: LD_INT 1
66517: DEC
66518: ST_TO_ADDR
66519: LD_VAR 0 1
66523: PUSH
66524: FOR_TO
66525: IFFALSE 66572
// begin hc_class = 18 ;
66527: LD_ADDR_OWVAR 28
66531: PUSH
66532: LD_INT 18
66534: ST_TO_ADDR
// hc_gallery =  ;
66535: LD_ADDR_OWVAR 33
66539: PUSH
66540: LD_STRING 
66542: ST_TO_ADDR
// animal := CreateHuman ;
66543: LD_ADDR_VAR 0 12
66547: PUSH
66548: CALL_OW 44
66552: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66553: LD_VAR 0 12
66557: PPUSH
66558: LD_VAR 0 8
66562: PPUSH
66563: LD_INT 0
66565: PPUSH
66566: CALL 68620 0 3
// end ;
66570: GO 66524
66572: POP
66573: POP
// if tigers then
66574: LD_VAR 0 2
66578: IFFALSE 66662
// for i = 1 to tigers do
66580: LD_ADDR_VAR 0 11
66584: PUSH
66585: DOUBLE
66586: LD_INT 1
66588: DEC
66589: ST_TO_ADDR
66590: LD_VAR 0 2
66594: PUSH
66595: FOR_TO
66596: IFFALSE 66660
// begin hc_class = class_tiger ;
66598: LD_ADDR_OWVAR 28
66602: PUSH
66603: LD_INT 14
66605: ST_TO_ADDR
// hc_gallery =  ;
66606: LD_ADDR_OWVAR 33
66610: PUSH
66611: LD_STRING 
66613: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
66614: LD_ADDR_OWVAR 35
66618: PUSH
66619: LD_INT 7
66621: NEG
66622: PPUSH
66623: LD_INT 7
66625: PPUSH
66626: CALL_OW 12
66630: ST_TO_ADDR
// animal := CreateHuman ;
66631: LD_ADDR_VAR 0 12
66635: PUSH
66636: CALL_OW 44
66640: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66641: LD_VAR 0 12
66645: PPUSH
66646: LD_VAR 0 8
66650: PPUSH
66651: LD_INT 0
66653: PPUSH
66654: CALL 68620 0 3
// end ;
66658: GO 66595
66660: POP
66661: POP
// if apemans then
66662: LD_VAR 0 3
66666: IFFALSE 66789
// for i = 1 to apemans do
66668: LD_ADDR_VAR 0 11
66672: PUSH
66673: DOUBLE
66674: LD_INT 1
66676: DEC
66677: ST_TO_ADDR
66678: LD_VAR 0 3
66682: PUSH
66683: FOR_TO
66684: IFFALSE 66787
// begin hc_class = class_apeman ;
66686: LD_ADDR_OWVAR 28
66690: PUSH
66691: LD_INT 12
66693: ST_TO_ADDR
// hc_gallery =  ;
66694: LD_ADDR_OWVAR 33
66698: PUSH
66699: LD_STRING 
66701: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
66702: LD_ADDR_OWVAR 35
66706: PUSH
66707: LD_INT 2
66709: NEG
66710: PPUSH
66711: LD_INT 2
66713: PPUSH
66714: CALL_OW 12
66718: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66719: LD_ADDR_OWVAR 31
66723: PUSH
66724: LD_INT 1
66726: PPUSH
66727: LD_INT 3
66729: PPUSH
66730: CALL_OW 12
66734: PUSH
66735: LD_INT 1
66737: PPUSH
66738: LD_INT 3
66740: PPUSH
66741: CALL_OW 12
66745: PUSH
66746: LD_INT 0
66748: PUSH
66749: LD_INT 0
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: LIST
66756: LIST
66757: ST_TO_ADDR
// animal := CreateHuman ;
66758: LD_ADDR_VAR 0 12
66762: PUSH
66763: CALL_OW 44
66767: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66768: LD_VAR 0 12
66772: PPUSH
66773: LD_VAR 0 8
66777: PPUSH
66778: LD_INT 0
66780: PPUSH
66781: CALL 68620 0 3
// end ;
66785: GO 66683
66787: POP
66788: POP
// if enchidnas then
66789: LD_VAR 0 4
66793: IFFALSE 66860
// for i = 1 to enchidnas do
66795: LD_ADDR_VAR 0 11
66799: PUSH
66800: DOUBLE
66801: LD_INT 1
66803: DEC
66804: ST_TO_ADDR
66805: LD_VAR 0 4
66809: PUSH
66810: FOR_TO
66811: IFFALSE 66858
// begin hc_class = 13 ;
66813: LD_ADDR_OWVAR 28
66817: PUSH
66818: LD_INT 13
66820: ST_TO_ADDR
// hc_gallery =  ;
66821: LD_ADDR_OWVAR 33
66825: PUSH
66826: LD_STRING 
66828: ST_TO_ADDR
// animal := CreateHuman ;
66829: LD_ADDR_VAR 0 12
66833: PUSH
66834: CALL_OW 44
66838: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66839: LD_VAR 0 12
66843: PPUSH
66844: LD_VAR 0 8
66848: PPUSH
66849: LD_INT 0
66851: PPUSH
66852: CALL 68620 0 3
// end ;
66856: GO 66810
66858: POP
66859: POP
// if fishes then
66860: LD_VAR 0 7
66864: IFFALSE 66931
// for i = 1 to fishes do
66866: LD_ADDR_VAR 0 11
66870: PUSH
66871: DOUBLE
66872: LD_INT 1
66874: DEC
66875: ST_TO_ADDR
66876: LD_VAR 0 7
66880: PUSH
66881: FOR_TO
66882: IFFALSE 66929
// begin hc_class = 20 ;
66884: LD_ADDR_OWVAR 28
66888: PUSH
66889: LD_INT 20
66891: ST_TO_ADDR
// hc_gallery =  ;
66892: LD_ADDR_OWVAR 33
66896: PUSH
66897: LD_STRING 
66899: ST_TO_ADDR
// animal := CreateHuman ;
66900: LD_ADDR_VAR 0 12
66904: PUSH
66905: CALL_OW 44
66909: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66910: LD_VAR 0 12
66914: PPUSH
66915: LD_VAR 0 9
66919: PPUSH
66920: LD_INT 0
66922: PPUSH
66923: CALL 68620 0 3
// end ;
66927: GO 66881
66929: POP
66930: POP
// end ;
66931: LD_VAR 0 10
66935: RET
// export function WantHeal ( sci , unit ) ; begin
66936: LD_INT 0
66938: PPUSH
// if GetTaskList ( sci ) > 0 then
66939: LD_VAR 0 1
66943: PPUSH
66944: CALL_OW 437
66948: PUSH
66949: LD_INT 0
66951: GREATER
66952: IFFALSE 67022
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66954: LD_VAR 0 1
66958: PPUSH
66959: CALL_OW 437
66963: PUSH
66964: LD_INT 1
66966: ARRAY
66967: PUSH
66968: LD_INT 1
66970: ARRAY
66971: PUSH
66972: LD_STRING l
66974: EQUAL
66975: PUSH
66976: LD_VAR 0 1
66980: PPUSH
66981: CALL_OW 437
66985: PUSH
66986: LD_INT 1
66988: ARRAY
66989: PUSH
66990: LD_INT 4
66992: ARRAY
66993: PUSH
66994: LD_VAR 0 2
66998: EQUAL
66999: AND
67000: IFFALSE 67012
// result := true else
67002: LD_ADDR_VAR 0 3
67006: PUSH
67007: LD_INT 1
67009: ST_TO_ADDR
67010: GO 67020
// result := false ;
67012: LD_ADDR_VAR 0 3
67016: PUSH
67017: LD_INT 0
67019: ST_TO_ADDR
// end else
67020: GO 67030
// result := false ;
67022: LD_ADDR_VAR 0 3
67026: PUSH
67027: LD_INT 0
67029: ST_TO_ADDR
// end ;
67030: LD_VAR 0 3
67034: RET
// export function HealTarget ( sci ) ; begin
67035: LD_INT 0
67037: PPUSH
// if not sci then
67038: LD_VAR 0 1
67042: NOT
67043: IFFALSE 67047
// exit ;
67045: GO 67112
// result := 0 ;
67047: LD_ADDR_VAR 0 2
67051: PUSH
67052: LD_INT 0
67054: ST_TO_ADDR
// if GetTaskList ( sci ) then
67055: LD_VAR 0 1
67059: PPUSH
67060: CALL_OW 437
67064: IFFALSE 67112
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
67066: LD_VAR 0 1
67070: PPUSH
67071: CALL_OW 437
67075: PUSH
67076: LD_INT 1
67078: ARRAY
67079: PUSH
67080: LD_INT 1
67082: ARRAY
67083: PUSH
67084: LD_STRING l
67086: EQUAL
67087: IFFALSE 67112
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
67089: LD_ADDR_VAR 0 2
67093: PUSH
67094: LD_VAR 0 1
67098: PPUSH
67099: CALL_OW 437
67103: PUSH
67104: LD_INT 1
67106: ARRAY
67107: PUSH
67108: LD_INT 4
67110: ARRAY
67111: ST_TO_ADDR
// end ;
67112: LD_VAR 0 2
67116: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
67117: LD_INT 0
67119: PPUSH
67120: PPUSH
67121: PPUSH
67122: PPUSH
// if not base_units then
67123: LD_VAR 0 1
67127: NOT
67128: IFFALSE 67132
// exit ;
67130: GO 67219
// result := false ;
67132: LD_ADDR_VAR 0 2
67136: PUSH
67137: LD_INT 0
67139: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
67140: LD_ADDR_VAR 0 5
67144: PUSH
67145: LD_VAR 0 1
67149: PPUSH
67150: LD_INT 21
67152: PUSH
67153: LD_INT 3
67155: PUSH
67156: EMPTY
67157: LIST
67158: LIST
67159: PPUSH
67160: CALL_OW 72
67164: ST_TO_ADDR
// if not tmp then
67165: LD_VAR 0 5
67169: NOT
67170: IFFALSE 67174
// exit ;
67172: GO 67219
// for i in tmp do
67174: LD_ADDR_VAR 0 3
67178: PUSH
67179: LD_VAR 0 5
67183: PUSH
67184: FOR_IN
67185: IFFALSE 67217
// begin result := EnemyInRange ( i , 22 ) ;
67187: LD_ADDR_VAR 0 2
67191: PUSH
67192: LD_VAR 0 3
67196: PPUSH
67197: LD_INT 22
67199: PPUSH
67200: CALL 65455 0 2
67204: ST_TO_ADDR
// if result then
67205: LD_VAR 0 2
67209: IFFALSE 67215
// exit ;
67211: POP
67212: POP
67213: GO 67219
// end ;
67215: GO 67184
67217: POP
67218: POP
// end ;
67219: LD_VAR 0 2
67223: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
67224: LD_INT 0
67226: PPUSH
67227: PPUSH
// if not units then
67228: LD_VAR 0 1
67232: NOT
67233: IFFALSE 67237
// exit ;
67235: GO 67307
// result := [ ] ;
67237: LD_ADDR_VAR 0 3
67241: PUSH
67242: EMPTY
67243: ST_TO_ADDR
// for i in units do
67244: LD_ADDR_VAR 0 4
67248: PUSH
67249: LD_VAR 0 1
67253: PUSH
67254: FOR_IN
67255: IFFALSE 67305
// if GetTag ( i ) = tag then
67257: LD_VAR 0 4
67261: PPUSH
67262: CALL_OW 110
67266: PUSH
67267: LD_VAR 0 2
67271: EQUAL
67272: IFFALSE 67303
// result := Replace ( result , result + 1 , i ) ;
67274: LD_ADDR_VAR 0 3
67278: PUSH
67279: LD_VAR 0 3
67283: PPUSH
67284: LD_VAR 0 3
67288: PUSH
67289: LD_INT 1
67291: PLUS
67292: PPUSH
67293: LD_VAR 0 4
67297: PPUSH
67298: CALL_OW 1
67302: ST_TO_ADDR
67303: GO 67254
67305: POP
67306: POP
// end ;
67307: LD_VAR 0 3
67311: RET
// export function IsDriver ( un ) ; begin
67312: LD_INT 0
67314: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
67315: LD_ADDR_VAR 0 2
67319: PUSH
67320: LD_VAR 0 1
67324: PUSH
67325: LD_INT 55
67327: PUSH
67328: EMPTY
67329: LIST
67330: PPUSH
67331: CALL_OW 69
67335: IN
67336: ST_TO_ADDR
// end ;
67337: LD_VAR 0 2
67341: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
67342: LD_INT 0
67344: PPUSH
67345: PPUSH
// list := [ ] ;
67346: LD_ADDR_VAR 0 5
67350: PUSH
67351: EMPTY
67352: ST_TO_ADDR
// case d of 0 :
67353: LD_VAR 0 3
67357: PUSH
67358: LD_INT 0
67360: DOUBLE
67361: EQUAL
67362: IFTRUE 67366
67364: GO 67499
67366: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
67367: LD_ADDR_VAR 0 5
67371: PUSH
67372: LD_VAR 0 1
67376: PUSH
67377: LD_INT 4
67379: MINUS
67380: PUSH
67381: LD_VAR 0 2
67385: PUSH
67386: LD_INT 4
67388: MINUS
67389: PUSH
67390: LD_INT 2
67392: PUSH
67393: EMPTY
67394: LIST
67395: LIST
67396: LIST
67397: PUSH
67398: LD_VAR 0 1
67402: PUSH
67403: LD_INT 3
67405: MINUS
67406: PUSH
67407: LD_VAR 0 2
67411: PUSH
67412: LD_INT 1
67414: PUSH
67415: EMPTY
67416: LIST
67417: LIST
67418: LIST
67419: PUSH
67420: LD_VAR 0 1
67424: PUSH
67425: LD_INT 4
67427: PLUS
67428: PUSH
67429: LD_VAR 0 2
67433: PUSH
67434: LD_INT 4
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: LIST
67441: PUSH
67442: LD_VAR 0 1
67446: PUSH
67447: LD_INT 3
67449: PLUS
67450: PUSH
67451: LD_VAR 0 2
67455: PUSH
67456: LD_INT 3
67458: PLUS
67459: PUSH
67460: LD_INT 5
67462: PUSH
67463: EMPTY
67464: LIST
67465: LIST
67466: LIST
67467: PUSH
67468: LD_VAR 0 1
67472: PUSH
67473: LD_VAR 0 2
67477: PUSH
67478: LD_INT 4
67480: PLUS
67481: PUSH
67482: LD_INT 0
67484: PUSH
67485: EMPTY
67486: LIST
67487: LIST
67488: LIST
67489: PUSH
67490: EMPTY
67491: LIST
67492: LIST
67493: LIST
67494: LIST
67495: LIST
67496: ST_TO_ADDR
// end ; 1 :
67497: GO 68197
67499: LD_INT 1
67501: DOUBLE
67502: EQUAL
67503: IFTRUE 67507
67505: GO 67640
67507: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
67508: LD_ADDR_VAR 0 5
67512: PUSH
67513: LD_VAR 0 1
67517: PUSH
67518: LD_VAR 0 2
67522: PUSH
67523: LD_INT 4
67525: MINUS
67526: PUSH
67527: LD_INT 3
67529: PUSH
67530: EMPTY
67531: LIST
67532: LIST
67533: LIST
67534: PUSH
67535: LD_VAR 0 1
67539: PUSH
67540: LD_INT 3
67542: MINUS
67543: PUSH
67544: LD_VAR 0 2
67548: PUSH
67549: LD_INT 3
67551: MINUS
67552: PUSH
67553: LD_INT 2
67555: PUSH
67556: EMPTY
67557: LIST
67558: LIST
67559: LIST
67560: PUSH
67561: LD_VAR 0 1
67565: PUSH
67566: LD_INT 4
67568: MINUS
67569: PUSH
67570: LD_VAR 0 2
67574: PUSH
67575: LD_INT 1
67577: PUSH
67578: EMPTY
67579: LIST
67580: LIST
67581: LIST
67582: PUSH
67583: LD_VAR 0 1
67587: PUSH
67588: LD_VAR 0 2
67592: PUSH
67593: LD_INT 3
67595: PLUS
67596: PUSH
67597: LD_INT 0
67599: PUSH
67600: EMPTY
67601: LIST
67602: LIST
67603: LIST
67604: PUSH
67605: LD_VAR 0 1
67609: PUSH
67610: LD_INT 4
67612: PLUS
67613: PUSH
67614: LD_VAR 0 2
67618: PUSH
67619: LD_INT 4
67621: PLUS
67622: PUSH
67623: LD_INT 5
67625: PUSH
67626: EMPTY
67627: LIST
67628: LIST
67629: LIST
67630: PUSH
67631: EMPTY
67632: LIST
67633: LIST
67634: LIST
67635: LIST
67636: LIST
67637: ST_TO_ADDR
// end ; 2 :
67638: GO 68197
67640: LD_INT 2
67642: DOUBLE
67643: EQUAL
67644: IFTRUE 67648
67646: GO 67777
67648: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
67649: LD_ADDR_VAR 0 5
67653: PUSH
67654: LD_VAR 0 1
67658: PUSH
67659: LD_VAR 0 2
67663: PUSH
67664: LD_INT 3
67666: MINUS
67667: PUSH
67668: LD_INT 3
67670: PUSH
67671: EMPTY
67672: LIST
67673: LIST
67674: LIST
67675: PUSH
67676: LD_VAR 0 1
67680: PUSH
67681: LD_INT 4
67683: PLUS
67684: PUSH
67685: LD_VAR 0 2
67689: PUSH
67690: LD_INT 4
67692: PUSH
67693: EMPTY
67694: LIST
67695: LIST
67696: LIST
67697: PUSH
67698: LD_VAR 0 1
67702: PUSH
67703: LD_VAR 0 2
67707: PUSH
67708: LD_INT 4
67710: PLUS
67711: PUSH
67712: LD_INT 0
67714: PUSH
67715: EMPTY
67716: LIST
67717: LIST
67718: LIST
67719: PUSH
67720: LD_VAR 0 1
67724: PUSH
67725: LD_INT 3
67727: MINUS
67728: PUSH
67729: LD_VAR 0 2
67733: PUSH
67734: LD_INT 1
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: LIST
67741: PUSH
67742: LD_VAR 0 1
67746: PUSH
67747: LD_INT 4
67749: MINUS
67750: PUSH
67751: LD_VAR 0 2
67755: PUSH
67756: LD_INT 4
67758: MINUS
67759: PUSH
67760: LD_INT 2
67762: PUSH
67763: EMPTY
67764: LIST
67765: LIST
67766: LIST
67767: PUSH
67768: EMPTY
67769: LIST
67770: LIST
67771: LIST
67772: LIST
67773: LIST
67774: ST_TO_ADDR
// end ; 3 :
67775: GO 68197
67777: LD_INT 3
67779: DOUBLE
67780: EQUAL
67781: IFTRUE 67785
67783: GO 67918
67785: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
67786: LD_ADDR_VAR 0 5
67790: PUSH
67791: LD_VAR 0 1
67795: PUSH
67796: LD_INT 3
67798: PLUS
67799: PUSH
67800: LD_VAR 0 2
67804: PUSH
67805: LD_INT 4
67807: PUSH
67808: EMPTY
67809: LIST
67810: LIST
67811: LIST
67812: PUSH
67813: LD_VAR 0 1
67817: PUSH
67818: LD_INT 4
67820: PLUS
67821: PUSH
67822: LD_VAR 0 2
67826: PUSH
67827: LD_INT 4
67829: PLUS
67830: PUSH
67831: LD_INT 5
67833: PUSH
67834: EMPTY
67835: LIST
67836: LIST
67837: LIST
67838: PUSH
67839: LD_VAR 0 1
67843: PUSH
67844: LD_INT 4
67846: MINUS
67847: PUSH
67848: LD_VAR 0 2
67852: PUSH
67853: LD_INT 1
67855: PUSH
67856: EMPTY
67857: LIST
67858: LIST
67859: LIST
67860: PUSH
67861: LD_VAR 0 1
67865: PUSH
67866: LD_VAR 0 2
67870: PUSH
67871: LD_INT 4
67873: MINUS
67874: PUSH
67875: LD_INT 3
67877: PUSH
67878: EMPTY
67879: LIST
67880: LIST
67881: LIST
67882: PUSH
67883: LD_VAR 0 1
67887: PUSH
67888: LD_INT 3
67890: MINUS
67891: PUSH
67892: LD_VAR 0 2
67896: PUSH
67897: LD_INT 3
67899: MINUS
67900: PUSH
67901: LD_INT 2
67903: PUSH
67904: EMPTY
67905: LIST
67906: LIST
67907: LIST
67908: PUSH
67909: EMPTY
67910: LIST
67911: LIST
67912: LIST
67913: LIST
67914: LIST
67915: ST_TO_ADDR
// end ; 4 :
67916: GO 68197
67918: LD_INT 4
67920: DOUBLE
67921: EQUAL
67922: IFTRUE 67926
67924: GO 68059
67926: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
67927: LD_ADDR_VAR 0 5
67931: PUSH
67932: LD_VAR 0 1
67936: PUSH
67937: LD_VAR 0 2
67941: PUSH
67942: LD_INT 4
67944: PLUS
67945: PUSH
67946: LD_INT 0
67948: PUSH
67949: EMPTY
67950: LIST
67951: LIST
67952: LIST
67953: PUSH
67954: LD_VAR 0 1
67958: PUSH
67959: LD_INT 3
67961: PLUS
67962: PUSH
67963: LD_VAR 0 2
67967: PUSH
67968: LD_INT 3
67970: PLUS
67971: PUSH
67972: LD_INT 5
67974: PUSH
67975: EMPTY
67976: LIST
67977: LIST
67978: LIST
67979: PUSH
67980: LD_VAR 0 1
67984: PUSH
67985: LD_INT 4
67987: PLUS
67988: PUSH
67989: LD_VAR 0 2
67993: PUSH
67994: LD_INT 4
67996: PUSH
67997: EMPTY
67998: LIST
67999: LIST
68000: LIST
68001: PUSH
68002: LD_VAR 0 1
68006: PUSH
68007: LD_VAR 0 2
68011: PUSH
68012: LD_INT 3
68014: MINUS
68015: PUSH
68016: LD_INT 3
68018: PUSH
68019: EMPTY
68020: LIST
68021: LIST
68022: LIST
68023: PUSH
68024: LD_VAR 0 1
68028: PUSH
68029: LD_INT 4
68031: MINUS
68032: PUSH
68033: LD_VAR 0 2
68037: PUSH
68038: LD_INT 4
68040: MINUS
68041: PUSH
68042: LD_INT 2
68044: PUSH
68045: EMPTY
68046: LIST
68047: LIST
68048: LIST
68049: PUSH
68050: EMPTY
68051: LIST
68052: LIST
68053: LIST
68054: LIST
68055: LIST
68056: ST_TO_ADDR
// end ; 5 :
68057: GO 68197
68059: LD_INT 5
68061: DOUBLE
68062: EQUAL
68063: IFTRUE 68067
68065: GO 68196
68067: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
68068: LD_ADDR_VAR 0 5
68072: PUSH
68073: LD_VAR 0 1
68077: PUSH
68078: LD_INT 4
68080: MINUS
68081: PUSH
68082: LD_VAR 0 2
68086: PUSH
68087: LD_INT 1
68089: PUSH
68090: EMPTY
68091: LIST
68092: LIST
68093: LIST
68094: PUSH
68095: LD_VAR 0 1
68099: PUSH
68100: LD_VAR 0 2
68104: PUSH
68105: LD_INT 4
68107: MINUS
68108: PUSH
68109: LD_INT 3
68111: PUSH
68112: EMPTY
68113: LIST
68114: LIST
68115: LIST
68116: PUSH
68117: LD_VAR 0 1
68121: PUSH
68122: LD_INT 4
68124: PLUS
68125: PUSH
68126: LD_VAR 0 2
68130: PUSH
68131: LD_INT 4
68133: PLUS
68134: PUSH
68135: LD_INT 5
68137: PUSH
68138: EMPTY
68139: LIST
68140: LIST
68141: LIST
68142: PUSH
68143: LD_VAR 0 1
68147: PUSH
68148: LD_INT 3
68150: PLUS
68151: PUSH
68152: LD_VAR 0 2
68156: PUSH
68157: LD_INT 4
68159: PUSH
68160: EMPTY
68161: LIST
68162: LIST
68163: LIST
68164: PUSH
68165: LD_VAR 0 1
68169: PUSH
68170: LD_VAR 0 2
68174: PUSH
68175: LD_INT 3
68177: PLUS
68178: PUSH
68179: LD_INT 0
68181: PUSH
68182: EMPTY
68183: LIST
68184: LIST
68185: LIST
68186: PUSH
68187: EMPTY
68188: LIST
68189: LIST
68190: LIST
68191: LIST
68192: LIST
68193: ST_TO_ADDR
// end ; end ;
68194: GO 68197
68196: POP
// result := list ;
68197: LD_ADDR_VAR 0 4
68201: PUSH
68202: LD_VAR 0 5
68206: ST_TO_ADDR
// end ;
68207: LD_VAR 0 4
68211: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
68212: LD_INT 0
68214: PPUSH
68215: PPUSH
68216: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
68217: LD_VAR 0 1
68221: NOT
68222: PUSH
68223: LD_VAR 0 2
68227: PUSH
68228: LD_INT 1
68230: PUSH
68231: LD_INT 2
68233: PUSH
68234: LD_INT 3
68236: PUSH
68237: LD_INT 4
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: LIST
68244: LIST
68245: IN
68246: NOT
68247: OR
68248: IFFALSE 68252
// exit ;
68250: GO 68344
// tmp := [ ] ;
68252: LD_ADDR_VAR 0 5
68256: PUSH
68257: EMPTY
68258: ST_TO_ADDR
// for i in units do
68259: LD_ADDR_VAR 0 4
68263: PUSH
68264: LD_VAR 0 1
68268: PUSH
68269: FOR_IN
68270: IFFALSE 68313
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
68272: LD_ADDR_VAR 0 5
68276: PUSH
68277: LD_VAR 0 5
68281: PPUSH
68282: LD_VAR 0 5
68286: PUSH
68287: LD_INT 1
68289: PLUS
68290: PPUSH
68291: LD_VAR 0 4
68295: PPUSH
68296: LD_VAR 0 2
68300: PPUSH
68301: CALL_OW 259
68305: PPUSH
68306: CALL_OW 2
68310: ST_TO_ADDR
68311: GO 68269
68313: POP
68314: POP
// if not tmp then
68315: LD_VAR 0 5
68319: NOT
68320: IFFALSE 68324
// exit ;
68322: GO 68344
// result := SortListByListDesc ( units , tmp ) ;
68324: LD_ADDR_VAR 0 3
68328: PUSH
68329: LD_VAR 0 1
68333: PPUSH
68334: LD_VAR 0 5
68338: PPUSH
68339: CALL_OW 77
68343: ST_TO_ADDR
// end ;
68344: LD_VAR 0 3
68348: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
68349: LD_INT 0
68351: PPUSH
68352: PPUSH
68353: PPUSH
// result := false ;
68354: LD_ADDR_VAR 0 3
68358: PUSH
68359: LD_INT 0
68361: ST_TO_ADDR
// x := GetX ( building ) ;
68362: LD_ADDR_VAR 0 4
68366: PUSH
68367: LD_VAR 0 2
68371: PPUSH
68372: CALL_OW 250
68376: ST_TO_ADDR
// y := GetY ( building ) ;
68377: LD_ADDR_VAR 0 5
68381: PUSH
68382: LD_VAR 0 2
68386: PPUSH
68387: CALL_OW 251
68391: ST_TO_ADDR
// if not building or not x or not y then
68392: LD_VAR 0 2
68396: NOT
68397: PUSH
68398: LD_VAR 0 4
68402: NOT
68403: OR
68404: PUSH
68405: LD_VAR 0 5
68409: NOT
68410: OR
68411: IFFALSE 68415
// exit ;
68413: GO 68507
// if GetTaskList ( unit ) then
68415: LD_VAR 0 1
68419: PPUSH
68420: CALL_OW 437
68424: IFFALSE 68507
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68426: LD_STRING e
68428: PUSH
68429: LD_VAR 0 1
68433: PPUSH
68434: CALL_OW 437
68438: PUSH
68439: LD_INT 1
68441: ARRAY
68442: PUSH
68443: LD_INT 1
68445: ARRAY
68446: EQUAL
68447: PUSH
68448: LD_VAR 0 4
68452: PUSH
68453: LD_VAR 0 1
68457: PPUSH
68458: CALL_OW 437
68462: PUSH
68463: LD_INT 1
68465: ARRAY
68466: PUSH
68467: LD_INT 2
68469: ARRAY
68470: EQUAL
68471: AND
68472: PUSH
68473: LD_VAR 0 5
68477: PUSH
68478: LD_VAR 0 1
68482: PPUSH
68483: CALL_OW 437
68487: PUSH
68488: LD_INT 1
68490: ARRAY
68491: PUSH
68492: LD_INT 3
68494: ARRAY
68495: EQUAL
68496: AND
68497: IFFALSE 68507
// result := true end ;
68499: LD_ADDR_VAR 0 3
68503: PUSH
68504: LD_INT 1
68506: ST_TO_ADDR
// end ;
68507: LD_VAR 0 3
68511: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
68512: LD_INT 0
68514: PPUSH
// result := false ;
68515: LD_ADDR_VAR 0 4
68519: PUSH
68520: LD_INT 0
68522: ST_TO_ADDR
// if GetTaskList ( unit ) then
68523: LD_VAR 0 1
68527: PPUSH
68528: CALL_OW 437
68532: IFFALSE 68615
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68534: LD_STRING M
68536: PUSH
68537: LD_VAR 0 1
68541: PPUSH
68542: CALL_OW 437
68546: PUSH
68547: LD_INT 1
68549: ARRAY
68550: PUSH
68551: LD_INT 1
68553: ARRAY
68554: EQUAL
68555: PUSH
68556: LD_VAR 0 2
68560: PUSH
68561: LD_VAR 0 1
68565: PPUSH
68566: CALL_OW 437
68570: PUSH
68571: LD_INT 1
68573: ARRAY
68574: PUSH
68575: LD_INT 2
68577: ARRAY
68578: EQUAL
68579: AND
68580: PUSH
68581: LD_VAR 0 3
68585: PUSH
68586: LD_VAR 0 1
68590: PPUSH
68591: CALL_OW 437
68595: PUSH
68596: LD_INT 1
68598: ARRAY
68599: PUSH
68600: LD_INT 3
68602: ARRAY
68603: EQUAL
68604: AND
68605: IFFALSE 68615
// result := true ;
68607: LD_ADDR_VAR 0 4
68611: PUSH
68612: LD_INT 1
68614: ST_TO_ADDR
// end ; end ;
68615: LD_VAR 0 4
68619: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
68620: LD_INT 0
68622: PPUSH
68623: PPUSH
68624: PPUSH
68625: PPUSH
// if not unit or not area then
68626: LD_VAR 0 1
68630: NOT
68631: PUSH
68632: LD_VAR 0 2
68636: NOT
68637: OR
68638: IFFALSE 68642
// exit ;
68640: GO 68806
// tmp := AreaToList ( area , i ) ;
68642: LD_ADDR_VAR 0 6
68646: PUSH
68647: LD_VAR 0 2
68651: PPUSH
68652: LD_VAR 0 5
68656: PPUSH
68657: CALL_OW 517
68661: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
68662: LD_ADDR_VAR 0 5
68666: PUSH
68667: DOUBLE
68668: LD_INT 1
68670: DEC
68671: ST_TO_ADDR
68672: LD_VAR 0 6
68676: PUSH
68677: LD_INT 1
68679: ARRAY
68680: PUSH
68681: FOR_TO
68682: IFFALSE 68804
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
68684: LD_ADDR_VAR 0 7
68688: PUSH
68689: LD_VAR 0 6
68693: PUSH
68694: LD_INT 1
68696: ARRAY
68697: PUSH
68698: LD_VAR 0 5
68702: ARRAY
68703: PUSH
68704: LD_VAR 0 6
68708: PUSH
68709: LD_INT 2
68711: ARRAY
68712: PUSH
68713: LD_VAR 0 5
68717: ARRAY
68718: PUSH
68719: EMPTY
68720: LIST
68721: LIST
68722: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
68723: LD_VAR 0 7
68727: PUSH
68728: LD_INT 1
68730: ARRAY
68731: PPUSH
68732: LD_VAR 0 7
68736: PUSH
68737: LD_INT 2
68739: ARRAY
68740: PPUSH
68741: CALL_OW 428
68745: PUSH
68746: LD_INT 0
68748: EQUAL
68749: IFFALSE 68802
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
68751: LD_VAR 0 1
68755: PPUSH
68756: LD_VAR 0 7
68760: PUSH
68761: LD_INT 1
68763: ARRAY
68764: PPUSH
68765: LD_VAR 0 7
68769: PUSH
68770: LD_INT 2
68772: ARRAY
68773: PPUSH
68774: LD_VAR 0 3
68778: PPUSH
68779: CALL_OW 48
// result := IsPlaced ( unit ) ;
68783: LD_ADDR_VAR 0 4
68787: PUSH
68788: LD_VAR 0 1
68792: PPUSH
68793: CALL_OW 305
68797: ST_TO_ADDR
// exit ;
68798: POP
68799: POP
68800: GO 68806
// end ; end ;
68802: GO 68681
68804: POP
68805: POP
// end ;
68806: LD_VAR 0 4
68810: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
68811: LD_INT 0
68813: PPUSH
68814: PPUSH
68815: PPUSH
// if not side or side > 8 then
68816: LD_VAR 0 1
68820: NOT
68821: PUSH
68822: LD_VAR 0 1
68826: PUSH
68827: LD_INT 8
68829: GREATER
68830: OR
68831: IFFALSE 68835
// exit ;
68833: GO 69022
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
68835: LD_ADDR_VAR 0 4
68839: PUSH
68840: LD_INT 22
68842: PUSH
68843: LD_VAR 0 1
68847: PUSH
68848: EMPTY
68849: LIST
68850: LIST
68851: PUSH
68852: LD_INT 21
68854: PUSH
68855: LD_INT 3
68857: PUSH
68858: EMPTY
68859: LIST
68860: LIST
68861: PUSH
68862: EMPTY
68863: LIST
68864: LIST
68865: PPUSH
68866: CALL_OW 69
68870: ST_TO_ADDR
// if not tmp then
68871: LD_VAR 0 4
68875: NOT
68876: IFFALSE 68880
// exit ;
68878: GO 69022
// enable_addtolog := true ;
68880: LD_ADDR_OWVAR 81
68884: PUSH
68885: LD_INT 1
68887: ST_TO_ADDR
// AddToLog ( [ ) ;
68888: LD_STRING [
68890: PPUSH
68891: CALL_OW 561
// for i in tmp do
68895: LD_ADDR_VAR 0 3
68899: PUSH
68900: LD_VAR 0 4
68904: PUSH
68905: FOR_IN
68906: IFFALSE 69013
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
68908: LD_STRING [
68910: PUSH
68911: LD_VAR 0 3
68915: PPUSH
68916: CALL_OW 266
68920: STR
68921: PUSH
68922: LD_STRING , 
68924: STR
68925: PUSH
68926: LD_VAR 0 3
68930: PPUSH
68931: CALL_OW 250
68935: STR
68936: PUSH
68937: LD_STRING , 
68939: STR
68940: PUSH
68941: LD_VAR 0 3
68945: PPUSH
68946: CALL_OW 251
68950: STR
68951: PUSH
68952: LD_STRING , 
68954: STR
68955: PUSH
68956: LD_VAR 0 3
68960: PPUSH
68961: CALL_OW 254
68965: STR
68966: PUSH
68967: LD_STRING , 
68969: STR
68970: PUSH
68971: LD_VAR 0 3
68975: PPUSH
68976: LD_INT 1
68978: PPUSH
68979: CALL_OW 268
68983: STR
68984: PUSH
68985: LD_STRING , 
68987: STR
68988: PUSH
68989: LD_VAR 0 3
68993: PPUSH
68994: LD_INT 2
68996: PPUSH
68997: CALL_OW 268
69001: STR
69002: PUSH
69003: LD_STRING ],
69005: STR
69006: PPUSH
69007: CALL_OW 561
// end ;
69011: GO 68905
69013: POP
69014: POP
// AddToLog ( ]; ) ;
69015: LD_STRING ];
69017: PPUSH
69018: CALL_OW 561
// end ;
69022: LD_VAR 0 2
69026: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
69027: LD_INT 0
69029: PPUSH
69030: PPUSH
69031: PPUSH
69032: PPUSH
69033: PPUSH
// if not area or not rate or not max then
69034: LD_VAR 0 1
69038: NOT
69039: PUSH
69040: LD_VAR 0 2
69044: NOT
69045: OR
69046: PUSH
69047: LD_VAR 0 4
69051: NOT
69052: OR
69053: IFFALSE 69057
// exit ;
69055: GO 69249
// while 1 do
69057: LD_INT 1
69059: IFFALSE 69249
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
69061: LD_ADDR_VAR 0 9
69065: PUSH
69066: LD_VAR 0 1
69070: PPUSH
69071: LD_INT 1
69073: PPUSH
69074: CALL_OW 287
69078: PUSH
69079: LD_INT 10
69081: MUL
69082: ST_TO_ADDR
// r := rate / 10 ;
69083: LD_ADDR_VAR 0 7
69087: PUSH
69088: LD_VAR 0 2
69092: PUSH
69093: LD_INT 10
69095: DIVREAL
69096: ST_TO_ADDR
// time := 1 1$00 ;
69097: LD_ADDR_VAR 0 8
69101: PUSH
69102: LD_INT 2100
69104: ST_TO_ADDR
// if amount < min then
69105: LD_VAR 0 9
69109: PUSH
69110: LD_VAR 0 3
69114: LESS
69115: IFFALSE 69133
// r := r * 2 else
69117: LD_ADDR_VAR 0 7
69121: PUSH
69122: LD_VAR 0 7
69126: PUSH
69127: LD_INT 2
69129: MUL
69130: ST_TO_ADDR
69131: GO 69159
// if amount > max then
69133: LD_VAR 0 9
69137: PUSH
69138: LD_VAR 0 4
69142: GREATER
69143: IFFALSE 69159
// r := r / 2 ;
69145: LD_ADDR_VAR 0 7
69149: PUSH
69150: LD_VAR 0 7
69154: PUSH
69155: LD_INT 2
69157: DIVREAL
69158: ST_TO_ADDR
// time := time / r ;
69159: LD_ADDR_VAR 0 8
69163: PUSH
69164: LD_VAR 0 8
69168: PUSH
69169: LD_VAR 0 7
69173: DIVREAL
69174: ST_TO_ADDR
// if time < 0 then
69175: LD_VAR 0 8
69179: PUSH
69180: LD_INT 0
69182: LESS
69183: IFFALSE 69200
// time := time * - 1 ;
69185: LD_ADDR_VAR 0 8
69189: PUSH
69190: LD_VAR 0 8
69194: PUSH
69195: LD_INT 1
69197: NEG
69198: MUL
69199: ST_TO_ADDR
// wait ( time ) ;
69200: LD_VAR 0 8
69204: PPUSH
69205: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
69209: LD_INT 35
69211: PPUSH
69212: LD_INT 875
69214: PPUSH
69215: CALL_OW 12
69219: PPUSH
69220: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
69224: LD_INT 1
69226: PPUSH
69227: LD_INT 5
69229: PPUSH
69230: CALL_OW 12
69234: PPUSH
69235: LD_VAR 0 1
69239: PPUSH
69240: LD_INT 1
69242: PPUSH
69243: CALL_OW 55
// end ;
69247: GO 69057
// end ;
69249: LD_VAR 0 5
69253: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
69254: LD_INT 0
69256: PPUSH
69257: PPUSH
69258: PPUSH
69259: PPUSH
69260: PPUSH
69261: PPUSH
69262: PPUSH
69263: PPUSH
// if not turrets or not factories then
69264: LD_VAR 0 1
69268: NOT
69269: PUSH
69270: LD_VAR 0 2
69274: NOT
69275: OR
69276: IFFALSE 69280
// exit ;
69278: GO 69587
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
69280: LD_ADDR_VAR 0 10
69284: PUSH
69285: LD_INT 5
69287: PUSH
69288: LD_INT 6
69290: PUSH
69291: EMPTY
69292: LIST
69293: LIST
69294: PUSH
69295: LD_INT 2
69297: PUSH
69298: LD_INT 4
69300: PUSH
69301: EMPTY
69302: LIST
69303: LIST
69304: PUSH
69305: LD_INT 3
69307: PUSH
69308: LD_INT 5
69310: PUSH
69311: EMPTY
69312: LIST
69313: LIST
69314: PUSH
69315: EMPTY
69316: LIST
69317: LIST
69318: LIST
69319: PUSH
69320: LD_INT 24
69322: PUSH
69323: LD_INT 25
69325: PUSH
69326: EMPTY
69327: LIST
69328: LIST
69329: PUSH
69330: LD_INT 23
69332: PUSH
69333: LD_INT 27
69335: PUSH
69336: EMPTY
69337: LIST
69338: LIST
69339: PUSH
69340: EMPTY
69341: LIST
69342: LIST
69343: PUSH
69344: LD_INT 42
69346: PUSH
69347: LD_INT 43
69349: PUSH
69350: EMPTY
69351: LIST
69352: LIST
69353: PUSH
69354: LD_INT 44
69356: PUSH
69357: LD_INT 46
69359: PUSH
69360: EMPTY
69361: LIST
69362: LIST
69363: PUSH
69364: LD_INT 45
69366: PUSH
69367: LD_INT 47
69369: PUSH
69370: EMPTY
69371: LIST
69372: LIST
69373: PUSH
69374: EMPTY
69375: LIST
69376: LIST
69377: LIST
69378: PUSH
69379: EMPTY
69380: LIST
69381: LIST
69382: LIST
69383: ST_TO_ADDR
// result := [ ] ;
69384: LD_ADDR_VAR 0 3
69388: PUSH
69389: EMPTY
69390: ST_TO_ADDR
// for i in turrets do
69391: LD_ADDR_VAR 0 4
69395: PUSH
69396: LD_VAR 0 1
69400: PUSH
69401: FOR_IN
69402: IFFALSE 69585
// begin nat := GetNation ( i ) ;
69404: LD_ADDR_VAR 0 7
69408: PUSH
69409: LD_VAR 0 4
69413: PPUSH
69414: CALL_OW 248
69418: ST_TO_ADDR
// weapon := 0 ;
69419: LD_ADDR_VAR 0 8
69423: PUSH
69424: LD_INT 0
69426: ST_TO_ADDR
// if not nat then
69427: LD_VAR 0 7
69431: NOT
69432: IFFALSE 69436
// continue ;
69434: GO 69401
// for j in list [ nat ] do
69436: LD_ADDR_VAR 0 5
69440: PUSH
69441: LD_VAR 0 10
69445: PUSH
69446: LD_VAR 0 7
69450: ARRAY
69451: PUSH
69452: FOR_IN
69453: IFFALSE 69494
// if GetBWeapon ( i ) = j [ 1 ] then
69455: LD_VAR 0 4
69459: PPUSH
69460: CALL_OW 269
69464: PUSH
69465: LD_VAR 0 5
69469: PUSH
69470: LD_INT 1
69472: ARRAY
69473: EQUAL
69474: IFFALSE 69492
// begin weapon := j [ 2 ] ;
69476: LD_ADDR_VAR 0 8
69480: PUSH
69481: LD_VAR 0 5
69485: PUSH
69486: LD_INT 2
69488: ARRAY
69489: ST_TO_ADDR
// break ;
69490: GO 69494
// end ;
69492: GO 69452
69494: POP
69495: POP
// if not weapon then
69496: LD_VAR 0 8
69500: NOT
69501: IFFALSE 69505
// continue ;
69503: GO 69401
// for k in factories do
69505: LD_ADDR_VAR 0 6
69509: PUSH
69510: LD_VAR 0 2
69514: PUSH
69515: FOR_IN
69516: IFFALSE 69581
// begin weapons := AvailableWeaponList ( k ) ;
69518: LD_ADDR_VAR 0 9
69522: PUSH
69523: LD_VAR 0 6
69527: PPUSH
69528: CALL_OW 478
69532: ST_TO_ADDR
// if not weapons then
69533: LD_VAR 0 9
69537: NOT
69538: IFFALSE 69542
// continue ;
69540: GO 69515
// if weapon in weapons then
69542: LD_VAR 0 8
69546: PUSH
69547: LD_VAR 0 9
69551: IN
69552: IFFALSE 69579
// begin result := [ i , weapon ] ;
69554: LD_ADDR_VAR 0 3
69558: PUSH
69559: LD_VAR 0 4
69563: PUSH
69564: LD_VAR 0 8
69568: PUSH
69569: EMPTY
69570: LIST
69571: LIST
69572: ST_TO_ADDR
// exit ;
69573: POP
69574: POP
69575: POP
69576: POP
69577: GO 69587
// end ; end ;
69579: GO 69515
69581: POP
69582: POP
// end ;
69583: GO 69401
69585: POP
69586: POP
// end ;
69587: LD_VAR 0 3
69591: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
69592: LD_INT 0
69594: PPUSH
// if not side or side > 8 then
69595: LD_VAR 0 3
69599: NOT
69600: PUSH
69601: LD_VAR 0 3
69605: PUSH
69606: LD_INT 8
69608: GREATER
69609: OR
69610: IFFALSE 69614
// exit ;
69612: GO 69673
// if not range then
69614: LD_VAR 0 4
69618: NOT
69619: IFFALSE 69630
// range := - 12 ;
69621: LD_ADDR_VAR 0 4
69625: PUSH
69626: LD_INT 12
69628: NEG
69629: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
69630: LD_VAR 0 1
69634: PPUSH
69635: LD_VAR 0 2
69639: PPUSH
69640: LD_VAR 0 3
69644: PPUSH
69645: LD_VAR 0 4
69649: PPUSH
69650: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
69654: LD_VAR 0 1
69658: PPUSH
69659: LD_VAR 0 2
69663: PPUSH
69664: LD_VAR 0 3
69668: PPUSH
69669: CALL_OW 331
// end ;
69673: LD_VAR 0 5
69677: RET
// export function Video ( mode ) ; begin
69678: LD_INT 0
69680: PPUSH
// ingame_video = mode ;
69681: LD_ADDR_OWVAR 52
69685: PUSH
69686: LD_VAR 0 1
69690: ST_TO_ADDR
// interface_hidden = mode ;
69691: LD_ADDR_OWVAR 54
69695: PUSH
69696: LD_VAR 0 1
69700: ST_TO_ADDR
// end ;
69701: LD_VAR 0 2
69705: RET
// export function Join ( array , element ) ; begin
69706: LD_INT 0
69708: PPUSH
// result := Replace ( array , array + 1 , element ) ;
69709: LD_ADDR_VAR 0 3
69713: PUSH
69714: LD_VAR 0 1
69718: PPUSH
69719: LD_VAR 0 1
69723: PUSH
69724: LD_INT 1
69726: PLUS
69727: PPUSH
69728: LD_VAR 0 2
69732: PPUSH
69733: CALL_OW 1
69737: ST_TO_ADDR
// end ;
69738: LD_VAR 0 3
69742: RET
// export function JoinUnion ( array , element ) ; begin
69743: LD_INT 0
69745: PPUSH
// result := array union element ;
69746: LD_ADDR_VAR 0 3
69750: PUSH
69751: LD_VAR 0 1
69755: PUSH
69756: LD_VAR 0 2
69760: UNION
69761: ST_TO_ADDR
// end ;
69762: LD_VAR 0 3
69766: RET
// export function GetBehemoths ( side ) ; begin
69767: LD_INT 0
69769: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
69770: LD_ADDR_VAR 0 2
69774: PUSH
69775: LD_INT 22
69777: PUSH
69778: LD_VAR 0 1
69782: PUSH
69783: EMPTY
69784: LIST
69785: LIST
69786: PUSH
69787: LD_INT 31
69789: PUSH
69790: LD_INT 25
69792: PUSH
69793: EMPTY
69794: LIST
69795: LIST
69796: PUSH
69797: EMPTY
69798: LIST
69799: LIST
69800: PPUSH
69801: CALL_OW 69
69805: ST_TO_ADDR
// end ;
69806: LD_VAR 0 2
69810: RET
// export function Shuffle ( array ) ; var i , index ; begin
69811: LD_INT 0
69813: PPUSH
69814: PPUSH
69815: PPUSH
// result := [ ] ;
69816: LD_ADDR_VAR 0 2
69820: PUSH
69821: EMPTY
69822: ST_TO_ADDR
// if not array then
69823: LD_VAR 0 1
69827: NOT
69828: IFFALSE 69832
// exit ;
69830: GO 69931
// Randomize ;
69832: CALL_OW 10
// for i = array downto 1 do
69836: LD_ADDR_VAR 0 3
69840: PUSH
69841: DOUBLE
69842: LD_VAR 0 1
69846: INC
69847: ST_TO_ADDR
69848: LD_INT 1
69850: PUSH
69851: FOR_DOWNTO
69852: IFFALSE 69929
// begin index := rand ( 1 , array ) ;
69854: LD_ADDR_VAR 0 4
69858: PUSH
69859: LD_INT 1
69861: PPUSH
69862: LD_VAR 0 1
69866: PPUSH
69867: CALL_OW 12
69871: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
69872: LD_ADDR_VAR 0 2
69876: PUSH
69877: LD_VAR 0 2
69881: PPUSH
69882: LD_VAR 0 2
69886: PUSH
69887: LD_INT 1
69889: PLUS
69890: PPUSH
69891: LD_VAR 0 1
69895: PUSH
69896: LD_VAR 0 4
69900: ARRAY
69901: PPUSH
69902: CALL_OW 2
69906: ST_TO_ADDR
// array := Delete ( array , index ) ;
69907: LD_ADDR_VAR 0 1
69911: PUSH
69912: LD_VAR 0 1
69916: PPUSH
69917: LD_VAR 0 4
69921: PPUSH
69922: CALL_OW 3
69926: ST_TO_ADDR
// end ;
69927: GO 69851
69929: POP
69930: POP
// end ;
69931: LD_VAR 0 2
69935: RET
// export function GetBaseMaterials ( base ) ; begin
69936: LD_INT 0
69938: PPUSH
// result := [ 0 , 0 , 0 ] ;
69939: LD_ADDR_VAR 0 2
69943: PUSH
69944: LD_INT 0
69946: PUSH
69947: LD_INT 0
69949: PUSH
69950: LD_INT 0
69952: PUSH
69953: EMPTY
69954: LIST
69955: LIST
69956: LIST
69957: ST_TO_ADDR
// if not base then
69958: LD_VAR 0 1
69962: NOT
69963: IFFALSE 69967
// exit ;
69965: GO 70016
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69967: LD_ADDR_VAR 0 2
69971: PUSH
69972: LD_VAR 0 1
69976: PPUSH
69977: LD_INT 1
69979: PPUSH
69980: CALL_OW 275
69984: PUSH
69985: LD_VAR 0 1
69989: PPUSH
69990: LD_INT 2
69992: PPUSH
69993: CALL_OW 275
69997: PUSH
69998: LD_VAR 0 1
70002: PPUSH
70003: LD_INT 3
70005: PPUSH
70006: CALL_OW 275
70010: PUSH
70011: EMPTY
70012: LIST
70013: LIST
70014: LIST
70015: ST_TO_ADDR
// end ;
70016: LD_VAR 0 2
70020: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
70021: LD_INT 0
70023: PPUSH
70024: PPUSH
// result := array ;
70025: LD_ADDR_VAR 0 3
70029: PUSH
70030: LD_VAR 0 1
70034: ST_TO_ADDR
// if size > 0 then
70035: LD_VAR 0 2
70039: PUSH
70040: LD_INT 0
70042: GREATER
70043: IFFALSE 70089
// for i := array downto size do
70045: LD_ADDR_VAR 0 4
70049: PUSH
70050: DOUBLE
70051: LD_VAR 0 1
70055: INC
70056: ST_TO_ADDR
70057: LD_VAR 0 2
70061: PUSH
70062: FOR_DOWNTO
70063: IFFALSE 70087
// result := Delete ( result , result ) ;
70065: LD_ADDR_VAR 0 3
70069: PUSH
70070: LD_VAR 0 3
70074: PPUSH
70075: LD_VAR 0 3
70079: PPUSH
70080: CALL_OW 3
70084: ST_TO_ADDR
70085: GO 70062
70087: POP
70088: POP
// end ;
70089: LD_VAR 0 3
70093: RET
// export function ComExit ( unit ) ; var tmp ; begin
70094: LD_INT 0
70096: PPUSH
70097: PPUSH
// if not IsInUnit ( unit ) then
70098: LD_VAR 0 1
70102: PPUSH
70103: CALL_OW 310
70107: NOT
70108: IFFALSE 70112
// exit ;
70110: GO 70172
// tmp := IsInUnit ( unit ) ;
70112: LD_ADDR_VAR 0 3
70116: PUSH
70117: LD_VAR 0 1
70121: PPUSH
70122: CALL_OW 310
70126: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
70127: LD_VAR 0 3
70131: PPUSH
70132: CALL_OW 247
70136: PUSH
70137: LD_INT 2
70139: EQUAL
70140: IFFALSE 70153
// ComExitVehicle ( unit ) else
70142: LD_VAR 0 1
70146: PPUSH
70147: CALL_OW 121
70151: GO 70162
// ComExitBuilding ( unit ) ;
70153: LD_VAR 0 1
70157: PPUSH
70158: CALL_OW 122
// result := tmp ;
70162: LD_ADDR_VAR 0 2
70166: PUSH
70167: LD_VAR 0 3
70171: ST_TO_ADDR
// end ;
70172: LD_VAR 0 2
70176: RET
// export function ComExitAll ( units ) ; var i ; begin
70177: LD_INT 0
70179: PPUSH
70180: PPUSH
// if not units then
70181: LD_VAR 0 1
70185: NOT
70186: IFFALSE 70190
// exit ;
70188: GO 70216
// for i in units do
70190: LD_ADDR_VAR 0 3
70194: PUSH
70195: LD_VAR 0 1
70199: PUSH
70200: FOR_IN
70201: IFFALSE 70214
// ComExit ( i ) ;
70203: LD_VAR 0 3
70207: PPUSH
70208: CALL 70094 0 1
70212: GO 70200
70214: POP
70215: POP
// end ;
70216: LD_VAR 0 2
70220: RET
// export function ResetHc ; begin
70221: LD_INT 0
70223: PPUSH
// InitHc ;
70224: CALL_OW 19
// hc_importance := 0 ;
70228: LD_ADDR_OWVAR 32
70232: PUSH
70233: LD_INT 0
70235: ST_TO_ADDR
// end ;
70236: LD_VAR 0 1
70240: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
70241: LD_INT 0
70243: PPUSH
70244: PPUSH
70245: PPUSH
// _x := ( x1 + x2 ) div 2 ;
70246: LD_ADDR_VAR 0 6
70250: PUSH
70251: LD_VAR 0 1
70255: PUSH
70256: LD_VAR 0 3
70260: PLUS
70261: PUSH
70262: LD_INT 2
70264: DIV
70265: ST_TO_ADDR
// if _x < 0 then
70266: LD_VAR 0 6
70270: PUSH
70271: LD_INT 0
70273: LESS
70274: IFFALSE 70291
// _x := _x * - 1 ;
70276: LD_ADDR_VAR 0 6
70280: PUSH
70281: LD_VAR 0 6
70285: PUSH
70286: LD_INT 1
70288: NEG
70289: MUL
70290: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
70291: LD_ADDR_VAR 0 7
70295: PUSH
70296: LD_VAR 0 2
70300: PUSH
70301: LD_VAR 0 4
70305: PLUS
70306: PUSH
70307: LD_INT 2
70309: DIV
70310: ST_TO_ADDR
// if _y < 0 then
70311: LD_VAR 0 7
70315: PUSH
70316: LD_INT 0
70318: LESS
70319: IFFALSE 70336
// _y := _y * - 1 ;
70321: LD_ADDR_VAR 0 7
70325: PUSH
70326: LD_VAR 0 7
70330: PUSH
70331: LD_INT 1
70333: NEG
70334: MUL
70335: ST_TO_ADDR
// result := [ _x , _y ] ;
70336: LD_ADDR_VAR 0 5
70340: PUSH
70341: LD_VAR 0 6
70345: PUSH
70346: LD_VAR 0 7
70350: PUSH
70351: EMPTY
70352: LIST
70353: LIST
70354: ST_TO_ADDR
// end ;
70355: LD_VAR 0 5
70359: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
70360: LD_INT 0
70362: PPUSH
70363: PPUSH
70364: PPUSH
70365: PPUSH
// task := GetTaskList ( unit ) ;
70366: LD_ADDR_VAR 0 7
70370: PUSH
70371: LD_VAR 0 1
70375: PPUSH
70376: CALL_OW 437
70380: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
70381: LD_VAR 0 7
70385: NOT
70386: PUSH
70387: LD_VAR 0 1
70391: PPUSH
70392: LD_VAR 0 2
70396: PPUSH
70397: CALL_OW 308
70401: NOT
70402: AND
70403: IFFALSE 70407
// exit ;
70405: GO 70525
// if IsInArea ( unit , area ) then
70407: LD_VAR 0 1
70411: PPUSH
70412: LD_VAR 0 2
70416: PPUSH
70417: CALL_OW 308
70421: IFFALSE 70439
// begin ComMoveToArea ( unit , goAway ) ;
70423: LD_VAR 0 1
70427: PPUSH
70428: LD_VAR 0 3
70432: PPUSH
70433: CALL_OW 113
// exit ;
70437: GO 70525
// end ; if task [ 1 ] [ 1 ] <> M then
70439: LD_VAR 0 7
70443: PUSH
70444: LD_INT 1
70446: ARRAY
70447: PUSH
70448: LD_INT 1
70450: ARRAY
70451: PUSH
70452: LD_STRING M
70454: NONEQUAL
70455: IFFALSE 70459
// exit ;
70457: GO 70525
// x := task [ 1 ] [ 2 ] ;
70459: LD_ADDR_VAR 0 5
70463: PUSH
70464: LD_VAR 0 7
70468: PUSH
70469: LD_INT 1
70471: ARRAY
70472: PUSH
70473: LD_INT 2
70475: ARRAY
70476: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
70477: LD_ADDR_VAR 0 6
70481: PUSH
70482: LD_VAR 0 7
70486: PUSH
70487: LD_INT 1
70489: ARRAY
70490: PUSH
70491: LD_INT 3
70493: ARRAY
70494: ST_TO_ADDR
// if InArea ( x , y , area ) then
70495: LD_VAR 0 5
70499: PPUSH
70500: LD_VAR 0 6
70504: PPUSH
70505: LD_VAR 0 2
70509: PPUSH
70510: CALL_OW 309
70514: IFFALSE 70525
// ComStop ( unit ) ;
70516: LD_VAR 0 1
70520: PPUSH
70521: CALL_OW 141
// end ;
70525: LD_VAR 0 4
70529: RET
// export function Abs ( value ) ; begin
70530: LD_INT 0
70532: PPUSH
// result := value ;
70533: LD_ADDR_VAR 0 2
70537: PUSH
70538: LD_VAR 0 1
70542: ST_TO_ADDR
// if value < 0 then
70543: LD_VAR 0 1
70547: PUSH
70548: LD_INT 0
70550: LESS
70551: IFFALSE 70568
// result := value * - 1 ;
70553: LD_ADDR_VAR 0 2
70557: PUSH
70558: LD_VAR 0 1
70562: PUSH
70563: LD_INT 1
70565: NEG
70566: MUL
70567: ST_TO_ADDR
// end ;
70568: LD_VAR 0 2
70572: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
70573: LD_INT 0
70575: PPUSH
70576: PPUSH
70577: PPUSH
70578: PPUSH
70579: PPUSH
70580: PPUSH
70581: PPUSH
70582: PPUSH
// if not unit or not building then
70583: LD_VAR 0 1
70587: NOT
70588: PUSH
70589: LD_VAR 0 2
70593: NOT
70594: OR
70595: IFFALSE 70599
// exit ;
70597: GO 70825
// x := GetX ( building ) ;
70599: LD_ADDR_VAR 0 4
70603: PUSH
70604: LD_VAR 0 2
70608: PPUSH
70609: CALL_OW 250
70613: ST_TO_ADDR
// y := GetY ( building ) ;
70614: LD_ADDR_VAR 0 6
70618: PUSH
70619: LD_VAR 0 2
70623: PPUSH
70624: CALL_OW 251
70628: ST_TO_ADDR
// d := GetDir ( building ) ;
70629: LD_ADDR_VAR 0 8
70633: PUSH
70634: LD_VAR 0 2
70638: PPUSH
70639: CALL_OW 254
70643: ST_TO_ADDR
// r := 4 ;
70644: LD_ADDR_VAR 0 9
70648: PUSH
70649: LD_INT 4
70651: ST_TO_ADDR
// for i := 1 to 5 do
70652: LD_ADDR_VAR 0 10
70656: PUSH
70657: DOUBLE
70658: LD_INT 1
70660: DEC
70661: ST_TO_ADDR
70662: LD_INT 5
70664: PUSH
70665: FOR_TO
70666: IFFALSE 70823
// begin _x := ShiftX ( x , d , r + i ) ;
70668: LD_ADDR_VAR 0 5
70672: PUSH
70673: LD_VAR 0 4
70677: PPUSH
70678: LD_VAR 0 8
70682: PPUSH
70683: LD_VAR 0 9
70687: PUSH
70688: LD_VAR 0 10
70692: PLUS
70693: PPUSH
70694: CALL_OW 272
70698: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
70699: LD_ADDR_VAR 0 7
70703: PUSH
70704: LD_VAR 0 6
70708: PPUSH
70709: LD_VAR 0 8
70713: PPUSH
70714: LD_VAR 0 9
70718: PUSH
70719: LD_VAR 0 10
70723: PLUS
70724: PPUSH
70725: CALL_OW 273
70729: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
70730: LD_VAR 0 5
70734: PPUSH
70735: LD_VAR 0 7
70739: PPUSH
70740: CALL_OW 488
70744: PUSH
70745: LD_VAR 0 5
70749: PPUSH
70750: LD_VAR 0 7
70754: PPUSH
70755: CALL_OW 428
70759: PPUSH
70760: CALL_OW 247
70764: PUSH
70765: LD_INT 3
70767: PUSH
70768: LD_INT 2
70770: PUSH
70771: EMPTY
70772: LIST
70773: LIST
70774: IN
70775: NOT
70776: AND
70777: IFFALSE 70821
// begin ComMoveXY ( unit , _x , _y ) ;
70779: LD_VAR 0 1
70783: PPUSH
70784: LD_VAR 0 5
70788: PPUSH
70789: LD_VAR 0 7
70793: PPUSH
70794: CALL_OW 111
// result := [ _x , _y ] ;
70798: LD_ADDR_VAR 0 3
70802: PUSH
70803: LD_VAR 0 5
70807: PUSH
70808: LD_VAR 0 7
70812: PUSH
70813: EMPTY
70814: LIST
70815: LIST
70816: ST_TO_ADDR
// exit ;
70817: POP
70818: POP
70819: GO 70825
// end ; end ;
70821: GO 70665
70823: POP
70824: POP
// end ;
70825: LD_VAR 0 3
70829: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
70830: LD_INT 0
70832: PPUSH
70833: PPUSH
70834: PPUSH
// result := 0 ;
70835: LD_ADDR_VAR 0 3
70839: PUSH
70840: LD_INT 0
70842: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
70843: LD_VAR 0 1
70847: PUSH
70848: LD_INT 0
70850: LESS
70851: PUSH
70852: LD_VAR 0 1
70856: PUSH
70857: LD_INT 8
70859: GREATER
70860: OR
70861: PUSH
70862: LD_VAR 0 2
70866: PUSH
70867: LD_INT 0
70869: LESS
70870: OR
70871: PUSH
70872: LD_VAR 0 2
70876: PUSH
70877: LD_INT 8
70879: GREATER
70880: OR
70881: IFFALSE 70885
// exit ;
70883: GO 70960
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
70885: LD_ADDR_VAR 0 4
70889: PUSH
70890: LD_INT 22
70892: PUSH
70893: LD_VAR 0 2
70897: PUSH
70898: EMPTY
70899: LIST
70900: LIST
70901: PPUSH
70902: CALL_OW 69
70906: PUSH
70907: FOR_IN
70908: IFFALSE 70958
// begin un := UnitShoot ( i ) ;
70910: LD_ADDR_VAR 0 5
70914: PUSH
70915: LD_VAR 0 4
70919: PPUSH
70920: CALL_OW 504
70924: ST_TO_ADDR
// if GetSide ( un ) = side1 then
70925: LD_VAR 0 5
70929: PPUSH
70930: CALL_OW 255
70934: PUSH
70935: LD_VAR 0 1
70939: EQUAL
70940: IFFALSE 70956
// begin result := un ;
70942: LD_ADDR_VAR 0 3
70946: PUSH
70947: LD_VAR 0 5
70951: ST_TO_ADDR
// exit ;
70952: POP
70953: POP
70954: GO 70960
// end ; end ;
70956: GO 70907
70958: POP
70959: POP
// end ;
70960: LD_VAR 0 3
70964: RET
// export function GetCargoBay ( units ) ; begin
70965: LD_INT 0
70967: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
70968: LD_ADDR_VAR 0 2
70972: PUSH
70973: LD_VAR 0 1
70977: PPUSH
70978: LD_INT 2
70980: PUSH
70981: LD_INT 34
70983: PUSH
70984: LD_INT 12
70986: PUSH
70987: EMPTY
70988: LIST
70989: LIST
70990: PUSH
70991: LD_INT 34
70993: PUSH
70994: LD_INT 51
70996: PUSH
70997: EMPTY
70998: LIST
70999: LIST
71000: PUSH
71001: LD_INT 34
71003: PUSH
71004: LD_INT 32
71006: PUSH
71007: EMPTY
71008: LIST
71009: LIST
71010: PUSH
71011: LD_INT 34
71013: PUSH
71014: LD_EXP 39
71018: PUSH
71019: EMPTY
71020: LIST
71021: LIST
71022: PUSH
71023: EMPTY
71024: LIST
71025: LIST
71026: LIST
71027: LIST
71028: LIST
71029: PPUSH
71030: CALL_OW 72
71034: ST_TO_ADDR
// end ;
71035: LD_VAR 0 2
71039: RET
// export function Negate ( value ) ; begin
71040: LD_INT 0
71042: PPUSH
// result := not value ;
71043: LD_ADDR_VAR 0 2
71047: PUSH
71048: LD_VAR 0 1
71052: NOT
71053: ST_TO_ADDR
// end ;
71054: LD_VAR 0 2
71058: RET
// export function Inc ( value ) ; begin
71059: LD_INT 0
71061: PPUSH
// result := value + 1 ;
71062: LD_ADDR_VAR 0 2
71066: PUSH
71067: LD_VAR 0 1
71071: PUSH
71072: LD_INT 1
71074: PLUS
71075: ST_TO_ADDR
// end ;
71076: LD_VAR 0 2
71080: RET
// export function Dec ( value ) ; begin
71081: LD_INT 0
71083: PPUSH
// result := value - 1 ;
71084: LD_ADDR_VAR 0 2
71088: PUSH
71089: LD_VAR 0 1
71093: PUSH
71094: LD_INT 1
71096: MINUS
71097: ST_TO_ADDR
// end ;
71098: LD_VAR 0 2
71102: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
71103: LD_INT 0
71105: PPUSH
71106: PPUSH
71107: PPUSH
71108: PPUSH
71109: PPUSH
71110: PPUSH
71111: PPUSH
71112: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
71113: LD_VAR 0 1
71117: PPUSH
71118: LD_VAR 0 2
71122: PPUSH
71123: CALL_OW 488
71127: NOT
71128: PUSH
71129: LD_VAR 0 3
71133: PPUSH
71134: LD_VAR 0 4
71138: PPUSH
71139: CALL_OW 488
71143: NOT
71144: OR
71145: IFFALSE 71158
// begin result := - 1 ;
71147: LD_ADDR_VAR 0 5
71151: PUSH
71152: LD_INT 1
71154: NEG
71155: ST_TO_ADDR
// exit ;
71156: GO 71393
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
71158: LD_ADDR_VAR 0 12
71162: PUSH
71163: LD_VAR 0 1
71167: PPUSH
71168: LD_VAR 0 2
71172: PPUSH
71173: LD_VAR 0 3
71177: PPUSH
71178: LD_VAR 0 4
71182: PPUSH
71183: CALL 70241 0 4
71187: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
71188: LD_ADDR_VAR 0 11
71192: PUSH
71193: LD_VAR 0 1
71197: PPUSH
71198: LD_VAR 0 2
71202: PPUSH
71203: LD_VAR 0 12
71207: PUSH
71208: LD_INT 1
71210: ARRAY
71211: PPUSH
71212: LD_VAR 0 12
71216: PUSH
71217: LD_INT 2
71219: ARRAY
71220: PPUSH
71221: CALL_OW 298
71225: ST_TO_ADDR
// distance := 9999 ;
71226: LD_ADDR_VAR 0 10
71230: PUSH
71231: LD_INT 9999
71233: ST_TO_ADDR
// for i := 0 to 5 do
71234: LD_ADDR_VAR 0 6
71238: PUSH
71239: DOUBLE
71240: LD_INT 0
71242: DEC
71243: ST_TO_ADDR
71244: LD_INT 5
71246: PUSH
71247: FOR_TO
71248: IFFALSE 71391
// begin _x := ShiftX ( x1 , i , centerDist ) ;
71250: LD_ADDR_VAR 0 7
71254: PUSH
71255: LD_VAR 0 1
71259: PPUSH
71260: LD_VAR 0 6
71264: PPUSH
71265: LD_VAR 0 11
71269: PPUSH
71270: CALL_OW 272
71274: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
71275: LD_ADDR_VAR 0 8
71279: PUSH
71280: LD_VAR 0 2
71284: PPUSH
71285: LD_VAR 0 6
71289: PPUSH
71290: LD_VAR 0 11
71294: PPUSH
71295: CALL_OW 273
71299: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
71300: LD_VAR 0 7
71304: PPUSH
71305: LD_VAR 0 8
71309: PPUSH
71310: CALL_OW 488
71314: NOT
71315: IFFALSE 71319
// continue ;
71317: GO 71247
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
71319: LD_ADDR_VAR 0 9
71323: PUSH
71324: LD_VAR 0 12
71328: PUSH
71329: LD_INT 1
71331: ARRAY
71332: PPUSH
71333: LD_VAR 0 12
71337: PUSH
71338: LD_INT 2
71340: ARRAY
71341: PPUSH
71342: LD_VAR 0 7
71346: PPUSH
71347: LD_VAR 0 8
71351: PPUSH
71352: CALL_OW 298
71356: ST_TO_ADDR
// if tmp < distance then
71357: LD_VAR 0 9
71361: PUSH
71362: LD_VAR 0 10
71366: LESS
71367: IFFALSE 71389
// begin result := i ;
71369: LD_ADDR_VAR 0 5
71373: PUSH
71374: LD_VAR 0 6
71378: ST_TO_ADDR
// distance := tmp ;
71379: LD_ADDR_VAR 0 10
71383: PUSH
71384: LD_VAR 0 9
71388: ST_TO_ADDR
// end ; end ;
71389: GO 71247
71391: POP
71392: POP
// end ;
71393: LD_VAR 0 5
71397: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71398: LD_INT 0
71400: PPUSH
71401: PPUSH
// if not driver or not IsInUnit ( driver ) then
71402: LD_VAR 0 1
71406: NOT
71407: PUSH
71408: LD_VAR 0 1
71412: PPUSH
71413: CALL_OW 310
71417: NOT
71418: OR
71419: IFFALSE 71423
// exit ;
71421: GO 71513
// vehicle := IsInUnit ( driver ) ;
71423: LD_ADDR_VAR 0 3
71427: PUSH
71428: LD_VAR 0 1
71432: PPUSH
71433: CALL_OW 310
71437: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71438: LD_VAR 0 1
71442: PPUSH
71443: LD_STRING \
71445: PUSH
71446: LD_INT 0
71448: PUSH
71449: LD_INT 0
71451: PUSH
71452: LD_INT 0
71454: PUSH
71455: LD_INT 0
71457: PUSH
71458: LD_INT 0
71460: PUSH
71461: LD_INT 0
71463: PUSH
71464: EMPTY
71465: LIST
71466: LIST
71467: LIST
71468: LIST
71469: LIST
71470: LIST
71471: LIST
71472: PUSH
71473: LD_STRING E
71475: PUSH
71476: LD_INT 0
71478: PUSH
71479: LD_INT 0
71481: PUSH
71482: LD_VAR 0 3
71486: PUSH
71487: LD_INT 0
71489: PUSH
71490: LD_INT 0
71492: PUSH
71493: LD_INT 0
71495: PUSH
71496: EMPTY
71497: LIST
71498: LIST
71499: LIST
71500: LIST
71501: LIST
71502: LIST
71503: LIST
71504: PUSH
71505: EMPTY
71506: LIST
71507: LIST
71508: PPUSH
71509: CALL_OW 446
// end ;
71513: LD_VAR 0 2
71517: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71518: LD_INT 0
71520: PPUSH
71521: PPUSH
// if not driver or not IsInUnit ( driver ) then
71522: LD_VAR 0 1
71526: NOT
71527: PUSH
71528: LD_VAR 0 1
71532: PPUSH
71533: CALL_OW 310
71537: NOT
71538: OR
71539: IFFALSE 71543
// exit ;
71541: GO 71633
// vehicle := IsInUnit ( driver ) ;
71543: LD_ADDR_VAR 0 3
71547: PUSH
71548: LD_VAR 0 1
71552: PPUSH
71553: CALL_OW 310
71557: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71558: LD_VAR 0 1
71562: PPUSH
71563: LD_STRING \
71565: PUSH
71566: LD_INT 0
71568: PUSH
71569: LD_INT 0
71571: PUSH
71572: LD_INT 0
71574: PUSH
71575: LD_INT 0
71577: PUSH
71578: LD_INT 0
71580: PUSH
71581: LD_INT 0
71583: PUSH
71584: EMPTY
71585: LIST
71586: LIST
71587: LIST
71588: LIST
71589: LIST
71590: LIST
71591: LIST
71592: PUSH
71593: LD_STRING E
71595: PUSH
71596: LD_INT 0
71598: PUSH
71599: LD_INT 0
71601: PUSH
71602: LD_VAR 0 3
71606: PUSH
71607: LD_INT 0
71609: PUSH
71610: LD_INT 0
71612: PUSH
71613: LD_INT 0
71615: PUSH
71616: EMPTY
71617: LIST
71618: LIST
71619: LIST
71620: LIST
71621: LIST
71622: LIST
71623: LIST
71624: PUSH
71625: EMPTY
71626: LIST
71627: LIST
71628: PPUSH
71629: CALL_OW 447
// end ;
71633: LD_VAR 0 2
71637: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
71638: LD_INT 0
71640: PPUSH
71641: PPUSH
71642: PPUSH
// tmp := [ ] ;
71643: LD_ADDR_VAR 0 5
71647: PUSH
71648: EMPTY
71649: ST_TO_ADDR
// for i in units do
71650: LD_ADDR_VAR 0 4
71654: PUSH
71655: LD_VAR 0 1
71659: PUSH
71660: FOR_IN
71661: IFFALSE 71699
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
71663: LD_ADDR_VAR 0 5
71667: PUSH
71668: LD_VAR 0 5
71672: PPUSH
71673: LD_VAR 0 5
71677: PUSH
71678: LD_INT 1
71680: PLUS
71681: PPUSH
71682: LD_VAR 0 4
71686: PPUSH
71687: CALL_OW 256
71691: PPUSH
71692: CALL_OW 2
71696: ST_TO_ADDR
71697: GO 71660
71699: POP
71700: POP
// if not tmp then
71701: LD_VAR 0 5
71705: NOT
71706: IFFALSE 71710
// exit ;
71708: GO 71758
// if asc then
71710: LD_VAR 0 2
71714: IFFALSE 71738
// result := SortListByListAsc ( units , tmp ) else
71716: LD_ADDR_VAR 0 3
71720: PUSH
71721: LD_VAR 0 1
71725: PPUSH
71726: LD_VAR 0 5
71730: PPUSH
71731: CALL_OW 76
71735: ST_TO_ADDR
71736: GO 71758
// result := SortListByListDesc ( units , tmp ) ;
71738: LD_ADDR_VAR 0 3
71742: PUSH
71743: LD_VAR 0 1
71747: PPUSH
71748: LD_VAR 0 5
71752: PPUSH
71753: CALL_OW 77
71757: ST_TO_ADDR
// end ;
71758: LD_VAR 0 3
71762: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
71763: LD_INT 0
71765: PPUSH
71766: PPUSH
// task := GetTaskList ( mech ) ;
71767: LD_ADDR_VAR 0 4
71771: PUSH
71772: LD_VAR 0 1
71776: PPUSH
71777: CALL_OW 437
71781: ST_TO_ADDR
// if not task then
71782: LD_VAR 0 4
71786: NOT
71787: IFFALSE 71791
// exit ;
71789: GO 71833
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
71791: LD_ADDR_VAR 0 3
71795: PUSH
71796: LD_VAR 0 4
71800: PUSH
71801: LD_INT 1
71803: ARRAY
71804: PUSH
71805: LD_INT 1
71807: ARRAY
71808: PUSH
71809: LD_STRING r
71811: EQUAL
71812: PUSH
71813: LD_VAR 0 4
71817: PUSH
71818: LD_INT 1
71820: ARRAY
71821: PUSH
71822: LD_INT 4
71824: ARRAY
71825: PUSH
71826: LD_VAR 0 2
71830: EQUAL
71831: AND
71832: ST_TO_ADDR
// end ;
71833: LD_VAR 0 3
71837: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
71838: LD_INT 0
71840: PPUSH
// SetDir ( unit , d ) ;
71841: LD_VAR 0 1
71845: PPUSH
71846: LD_VAR 0 4
71850: PPUSH
71851: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
71855: LD_VAR 0 1
71859: PPUSH
71860: LD_VAR 0 2
71864: PPUSH
71865: LD_VAR 0 3
71869: PPUSH
71870: LD_VAR 0 5
71874: PPUSH
71875: CALL_OW 48
// end ;
71879: LD_VAR 0 6
71883: RET
// export function ToNaturalNumber ( number ) ; begin
71884: LD_INT 0
71886: PPUSH
// result := number div 1 ;
71887: LD_ADDR_VAR 0 2
71891: PUSH
71892: LD_VAR 0 1
71896: PUSH
71897: LD_INT 1
71899: DIV
71900: ST_TO_ADDR
// if number < 0 then
71901: LD_VAR 0 1
71905: PUSH
71906: LD_INT 0
71908: LESS
71909: IFFALSE 71919
// result := 0 ;
71911: LD_ADDR_VAR 0 2
71915: PUSH
71916: LD_INT 0
71918: ST_TO_ADDR
// end ;
71919: LD_VAR 0 2
71923: RET
// export function SortByClass ( units , class ) ; var un ; begin
71924: LD_INT 0
71926: PPUSH
71927: PPUSH
// if not units or not class then
71928: LD_VAR 0 1
71932: NOT
71933: PUSH
71934: LD_VAR 0 2
71938: NOT
71939: OR
71940: IFFALSE 71944
// exit ;
71942: GO 72039
// result := [ ] ;
71944: LD_ADDR_VAR 0 3
71948: PUSH
71949: EMPTY
71950: ST_TO_ADDR
// for un in units do
71951: LD_ADDR_VAR 0 4
71955: PUSH
71956: LD_VAR 0 1
71960: PUSH
71961: FOR_IN
71962: IFFALSE 72037
// if GetClass ( un ) = class then
71964: LD_VAR 0 4
71968: PPUSH
71969: CALL_OW 257
71973: PUSH
71974: LD_VAR 0 2
71978: EQUAL
71979: IFFALSE 72006
// result := Insert ( result , 1 , un ) else
71981: LD_ADDR_VAR 0 3
71985: PUSH
71986: LD_VAR 0 3
71990: PPUSH
71991: LD_INT 1
71993: PPUSH
71994: LD_VAR 0 4
71998: PPUSH
71999: CALL_OW 2
72003: ST_TO_ADDR
72004: GO 72035
// result := Replace ( result , result + 1 , un ) ;
72006: LD_ADDR_VAR 0 3
72010: PUSH
72011: LD_VAR 0 3
72015: PPUSH
72016: LD_VAR 0 3
72020: PUSH
72021: LD_INT 1
72023: PLUS
72024: PPUSH
72025: LD_VAR 0 4
72029: PPUSH
72030: CALL_OW 1
72034: ST_TO_ADDR
72035: GO 71961
72037: POP
72038: POP
// end ;
72039: LD_VAR 0 3
72043: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
72044: LD_INT 0
72046: PPUSH
72047: PPUSH
72048: PPUSH
72049: PPUSH
72050: PPUSH
72051: PPUSH
72052: PPUSH
// result := [ ] ;
72053: LD_ADDR_VAR 0 4
72057: PUSH
72058: EMPTY
72059: ST_TO_ADDR
// if x - r < 0 then
72060: LD_VAR 0 1
72064: PUSH
72065: LD_VAR 0 3
72069: MINUS
72070: PUSH
72071: LD_INT 0
72073: LESS
72074: IFFALSE 72086
// min_x := 0 else
72076: LD_ADDR_VAR 0 8
72080: PUSH
72081: LD_INT 0
72083: ST_TO_ADDR
72084: GO 72102
// min_x := x - r ;
72086: LD_ADDR_VAR 0 8
72090: PUSH
72091: LD_VAR 0 1
72095: PUSH
72096: LD_VAR 0 3
72100: MINUS
72101: ST_TO_ADDR
// if y - r < 0 then
72102: LD_VAR 0 2
72106: PUSH
72107: LD_VAR 0 3
72111: MINUS
72112: PUSH
72113: LD_INT 0
72115: LESS
72116: IFFALSE 72128
// min_y := 0 else
72118: LD_ADDR_VAR 0 7
72122: PUSH
72123: LD_INT 0
72125: ST_TO_ADDR
72126: GO 72144
// min_y := y - r ;
72128: LD_ADDR_VAR 0 7
72132: PUSH
72133: LD_VAR 0 2
72137: PUSH
72138: LD_VAR 0 3
72142: MINUS
72143: ST_TO_ADDR
// max_x := x + r ;
72144: LD_ADDR_VAR 0 9
72148: PUSH
72149: LD_VAR 0 1
72153: PUSH
72154: LD_VAR 0 3
72158: PLUS
72159: ST_TO_ADDR
// max_y := y + r ;
72160: LD_ADDR_VAR 0 10
72164: PUSH
72165: LD_VAR 0 2
72169: PUSH
72170: LD_VAR 0 3
72174: PLUS
72175: ST_TO_ADDR
// for _x = min_x to max_x do
72176: LD_ADDR_VAR 0 5
72180: PUSH
72181: DOUBLE
72182: LD_VAR 0 8
72186: DEC
72187: ST_TO_ADDR
72188: LD_VAR 0 9
72192: PUSH
72193: FOR_TO
72194: IFFALSE 72295
// for _y = min_y to max_y do
72196: LD_ADDR_VAR 0 6
72200: PUSH
72201: DOUBLE
72202: LD_VAR 0 7
72206: DEC
72207: ST_TO_ADDR
72208: LD_VAR 0 10
72212: PUSH
72213: FOR_TO
72214: IFFALSE 72291
// begin if not ValidHex ( _x , _y ) then
72216: LD_VAR 0 5
72220: PPUSH
72221: LD_VAR 0 6
72225: PPUSH
72226: CALL_OW 488
72230: NOT
72231: IFFALSE 72235
// continue ;
72233: GO 72213
// if GetResourceTypeXY ( _x , _y ) then
72235: LD_VAR 0 5
72239: PPUSH
72240: LD_VAR 0 6
72244: PPUSH
72245: CALL_OW 283
72249: IFFALSE 72289
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
72251: LD_ADDR_VAR 0 4
72255: PUSH
72256: LD_VAR 0 4
72260: PPUSH
72261: LD_VAR 0 4
72265: PUSH
72266: LD_INT 1
72268: PLUS
72269: PPUSH
72270: LD_VAR 0 5
72274: PUSH
72275: LD_VAR 0 6
72279: PUSH
72280: EMPTY
72281: LIST
72282: LIST
72283: PPUSH
72284: CALL_OW 1
72288: ST_TO_ADDR
// end ;
72289: GO 72213
72291: POP
72292: POP
72293: GO 72193
72295: POP
72296: POP
// end ;
72297: LD_VAR 0 4
72301: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
72302: LD_INT 0
72304: PPUSH
72305: PPUSH
72306: PPUSH
72307: PPUSH
72308: PPUSH
72309: PPUSH
72310: PPUSH
72311: PPUSH
// if not units then
72312: LD_VAR 0 1
72316: NOT
72317: IFFALSE 72321
// exit ;
72319: GO 72746
// result := UnitFilter ( units , [ f_ok ] ) ;
72321: LD_ADDR_VAR 0 3
72325: PUSH
72326: LD_VAR 0 1
72330: PPUSH
72331: LD_INT 50
72333: PUSH
72334: EMPTY
72335: LIST
72336: PPUSH
72337: CALL_OW 72
72341: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
72342: LD_ADDR_VAR 0 8
72346: PUSH
72347: LD_VAR 0 1
72351: PUSH
72352: LD_INT 1
72354: ARRAY
72355: PPUSH
72356: CALL_OW 255
72360: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
72361: LD_ADDR_VAR 0 10
72365: PUSH
72366: LD_INT 29
72368: PUSH
72369: LD_EXP 42
72373: PUSH
72374: EMPTY
72375: LIST
72376: LIST
72377: ST_TO_ADDR
// if not result then
72378: LD_VAR 0 3
72382: NOT
72383: IFFALSE 72387
// exit ;
72385: GO 72746
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
72387: LD_ADDR_VAR 0 5
72391: PUSH
72392: LD_INT 81
72394: PUSH
72395: LD_VAR 0 8
72399: PUSH
72400: EMPTY
72401: LIST
72402: LIST
72403: PPUSH
72404: CALL_OW 69
72408: ST_TO_ADDR
// for i in result do
72409: LD_ADDR_VAR 0 4
72413: PUSH
72414: LD_VAR 0 3
72418: PUSH
72419: FOR_IN
72420: IFFALSE 72744
// begin tag := GetTag ( i ) + 1 ;
72422: LD_ADDR_VAR 0 9
72426: PUSH
72427: LD_VAR 0 4
72431: PPUSH
72432: CALL_OW 110
72436: PUSH
72437: LD_INT 1
72439: PLUS
72440: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
72441: LD_ADDR_VAR 0 7
72445: PUSH
72446: LD_VAR 0 4
72450: PPUSH
72451: CALL_OW 250
72455: PPUSH
72456: LD_VAR 0 4
72460: PPUSH
72461: CALL_OW 251
72465: PPUSH
72466: LD_INT 6
72468: PPUSH
72469: CALL 72044 0 3
72473: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
72474: LD_VAR 0 7
72478: PUSH
72479: LD_VAR 0 4
72483: PPUSH
72484: CALL_OW 264
72488: PUSH
72489: LD_VAR 0 10
72493: IN
72494: NOT
72495: AND
72496: IFFALSE 72535
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
72498: LD_VAR 0 4
72502: PPUSH
72503: LD_VAR 0 7
72507: PUSH
72508: LD_INT 1
72510: ARRAY
72511: PUSH
72512: LD_INT 1
72514: ARRAY
72515: PPUSH
72516: LD_VAR 0 7
72520: PUSH
72521: LD_INT 1
72523: ARRAY
72524: PUSH
72525: LD_INT 2
72527: ARRAY
72528: PPUSH
72529: CALL_OW 116
72533: GO 72742
// if path > tag then
72535: LD_VAR 0 2
72539: PUSH
72540: LD_VAR 0 9
72544: GREATER
72545: IFFALSE 72712
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
72547: LD_ADDR_VAR 0 6
72551: PUSH
72552: LD_VAR 0 5
72556: PPUSH
72557: LD_INT 91
72559: PUSH
72560: LD_VAR 0 4
72564: PUSH
72565: LD_INT 12
72567: PUSH
72568: EMPTY
72569: LIST
72570: LIST
72571: LIST
72572: PPUSH
72573: CALL_OW 72
72577: ST_TO_ADDR
// if nearEnemy then
72578: LD_VAR 0 6
72582: IFFALSE 72610
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
72584: LD_VAR 0 4
72588: PPUSH
72589: LD_VAR 0 6
72593: PPUSH
72594: LD_VAR 0 4
72598: PPUSH
72599: CALL_OW 74
72603: PPUSH
72604: CALL_OW 115
72608: GO 72710
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
72610: LD_VAR 0 4
72614: PPUSH
72615: LD_VAR 0 2
72619: PUSH
72620: LD_VAR 0 9
72624: ARRAY
72625: PUSH
72626: LD_INT 1
72628: ARRAY
72629: PPUSH
72630: LD_VAR 0 2
72634: PUSH
72635: LD_VAR 0 9
72639: ARRAY
72640: PUSH
72641: LD_INT 2
72643: ARRAY
72644: PPUSH
72645: CALL_OW 297
72649: PUSH
72650: LD_INT 6
72652: GREATER
72653: IFFALSE 72696
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
72655: LD_VAR 0 4
72659: PPUSH
72660: LD_VAR 0 2
72664: PUSH
72665: LD_VAR 0 9
72669: ARRAY
72670: PUSH
72671: LD_INT 1
72673: ARRAY
72674: PPUSH
72675: LD_VAR 0 2
72679: PUSH
72680: LD_VAR 0 9
72684: ARRAY
72685: PUSH
72686: LD_INT 2
72688: ARRAY
72689: PPUSH
72690: CALL_OW 114
72694: GO 72710
// SetTag ( i , tag ) ;
72696: LD_VAR 0 4
72700: PPUSH
72701: LD_VAR 0 9
72705: PPUSH
72706: CALL_OW 109
// end else
72710: GO 72742
// if enemy then
72712: LD_VAR 0 5
72716: IFFALSE 72742
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
72718: LD_VAR 0 4
72722: PPUSH
72723: LD_VAR 0 5
72727: PPUSH
72728: LD_VAR 0 4
72732: PPUSH
72733: CALL_OW 74
72737: PPUSH
72738: CALL_OW 115
// end ;
72742: GO 72419
72744: POP
72745: POP
// end ;
72746: LD_VAR 0 3
72750: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
72751: LD_INT 0
72753: PPUSH
72754: PPUSH
72755: PPUSH
// if not unit or IsInUnit ( unit ) then
72756: LD_VAR 0 1
72760: NOT
72761: PUSH
72762: LD_VAR 0 1
72766: PPUSH
72767: CALL_OW 310
72771: OR
72772: IFFALSE 72776
// exit ;
72774: GO 72867
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
72776: LD_ADDR_VAR 0 4
72780: PUSH
72781: LD_VAR 0 1
72785: PPUSH
72786: CALL_OW 250
72790: PPUSH
72791: LD_VAR 0 2
72795: PPUSH
72796: LD_INT 1
72798: PPUSH
72799: CALL_OW 272
72803: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
72804: LD_ADDR_VAR 0 5
72808: PUSH
72809: LD_VAR 0 1
72813: PPUSH
72814: CALL_OW 251
72818: PPUSH
72819: LD_VAR 0 2
72823: PPUSH
72824: LD_INT 1
72826: PPUSH
72827: CALL_OW 273
72831: ST_TO_ADDR
// if ValidHex ( x , y ) then
72832: LD_VAR 0 4
72836: PPUSH
72837: LD_VAR 0 5
72841: PPUSH
72842: CALL_OW 488
72846: IFFALSE 72867
// ComTurnXY ( unit , x , y ) ;
72848: LD_VAR 0 1
72852: PPUSH
72853: LD_VAR 0 4
72857: PPUSH
72858: LD_VAR 0 5
72862: PPUSH
72863: CALL_OW 118
// end ;
72867: LD_VAR 0 3
72871: RET
// export function SeeUnits ( side , units ) ; var i ; begin
72872: LD_INT 0
72874: PPUSH
72875: PPUSH
// result := false ;
72876: LD_ADDR_VAR 0 3
72880: PUSH
72881: LD_INT 0
72883: ST_TO_ADDR
// if not units then
72884: LD_VAR 0 2
72888: NOT
72889: IFFALSE 72893
// exit ;
72891: GO 72938
// for i in units do
72893: LD_ADDR_VAR 0 4
72897: PUSH
72898: LD_VAR 0 2
72902: PUSH
72903: FOR_IN
72904: IFFALSE 72936
// if See ( side , i ) then
72906: LD_VAR 0 1
72910: PPUSH
72911: LD_VAR 0 4
72915: PPUSH
72916: CALL_OW 292
72920: IFFALSE 72934
// begin result := true ;
72922: LD_ADDR_VAR 0 3
72926: PUSH
72927: LD_INT 1
72929: ST_TO_ADDR
// exit ;
72930: POP
72931: POP
72932: GO 72938
// end ;
72934: GO 72903
72936: POP
72937: POP
// end ;
72938: LD_VAR 0 3
72942: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
72943: LD_INT 0
72945: PPUSH
72946: PPUSH
72947: PPUSH
72948: PPUSH
// if not unit or not points then
72949: LD_VAR 0 1
72953: NOT
72954: PUSH
72955: LD_VAR 0 2
72959: NOT
72960: OR
72961: IFFALSE 72965
// exit ;
72963: GO 73055
// dist := 99999 ;
72965: LD_ADDR_VAR 0 5
72969: PUSH
72970: LD_INT 99999
72972: ST_TO_ADDR
// for i in points do
72973: LD_ADDR_VAR 0 4
72977: PUSH
72978: LD_VAR 0 2
72982: PUSH
72983: FOR_IN
72984: IFFALSE 73053
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
72986: LD_ADDR_VAR 0 6
72990: PUSH
72991: LD_VAR 0 1
72995: PPUSH
72996: LD_VAR 0 4
73000: PUSH
73001: LD_INT 1
73003: ARRAY
73004: PPUSH
73005: LD_VAR 0 4
73009: PUSH
73010: LD_INT 2
73012: ARRAY
73013: PPUSH
73014: CALL_OW 297
73018: ST_TO_ADDR
// if tmpDist < dist then
73019: LD_VAR 0 6
73023: PUSH
73024: LD_VAR 0 5
73028: LESS
73029: IFFALSE 73051
// begin result := i ;
73031: LD_ADDR_VAR 0 3
73035: PUSH
73036: LD_VAR 0 4
73040: ST_TO_ADDR
// dist := tmpDist ;
73041: LD_ADDR_VAR 0 5
73045: PUSH
73046: LD_VAR 0 6
73050: ST_TO_ADDR
// end ; end ;
73051: GO 72983
73053: POP
73054: POP
// end ; end_of_file
73055: LD_VAR 0 3
73059: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
73060: LD_VAR 0 1
73064: PUSH
73065: LD_INT 200
73067: DOUBLE
73068: GREATEREQUAL
73069: IFFALSE 73077
73071: LD_INT 299
73073: DOUBLE
73074: LESSEQUAL
73075: IFTRUE 73079
73077: GO 73111
73079: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
73080: LD_VAR 0 1
73084: PPUSH
73085: LD_VAR 0 2
73089: PPUSH
73090: LD_VAR 0 3
73094: PPUSH
73095: LD_VAR 0 4
73099: PPUSH
73100: LD_VAR 0 5
73104: PPUSH
73105: CALL 29086 0 5
73109: GO 73188
73111: LD_INT 300
73113: DOUBLE
73114: GREATEREQUAL
73115: IFFALSE 73123
73117: LD_INT 399
73119: DOUBLE
73120: LESSEQUAL
73121: IFTRUE 73125
73123: GO 73187
73125: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
73126: LD_VAR 0 1
73130: PPUSH
73131: LD_VAR 0 2
73135: PPUSH
73136: LD_VAR 0 3
73140: PPUSH
73141: LD_VAR 0 4
73145: PPUSH
73146: LD_VAR 0 5
73150: PPUSH
73151: LD_VAR 0 6
73155: PPUSH
73156: LD_VAR 0 7
73160: PPUSH
73161: LD_VAR 0 8
73165: PPUSH
73166: LD_VAR 0 9
73170: PPUSH
73171: LD_VAR 0 10
73175: PPUSH
73176: LD_VAR 0 11
73180: PPUSH
73181: CALL 26984 0 11
73185: GO 73188
73187: POP
// end ;
73188: PPOPN 11
73190: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
73191: LD_VAR 0 1
73195: PPUSH
73196: LD_VAR 0 2
73200: PPUSH
73201: LD_VAR 0 3
73205: PPUSH
73206: LD_VAR 0 4
73210: PPUSH
73211: LD_VAR 0 5
73215: PPUSH
73216: CALL 29078 0 5
// end ; end_of_file
73220: PPOPN 5
73222: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
73223: LD_VAR 0 1
73227: PPUSH
73228: LD_VAR 0 2
73232: PPUSH
73233: LD_VAR 0 3
73237: PPUSH
73238: LD_VAR 0 4
73242: PPUSH
73243: LD_VAR 0 5
73247: PPUSH
73248: LD_VAR 0 6
73252: PPUSH
73253: CALL 15179 0 6
// end ;
73257: PPOPN 6
73259: END
