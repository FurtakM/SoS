// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitVariables ;
  11: CALL 130 0 0
// CreateNature ;
  15: CALL 9503 0 0
// PrepareAlliance ;
  19: CALL 344 0 0
// PrepareFriends ;
  23: CALL 3813 0 0
// PrepareAmerican ;
  27: CALL 781 0 0
// PlaceSeeing ( 91 , 70 , 7 , - 32178 ) ;
  31: LD_INT 91
  33: PPUSH
  34: LD_INT 70
  36: PPUSH
  37: LD_INT 7
  39: PPUSH
  40: LD_INT 32178
  42: NEG
  43: PPUSH
  44: CALL_OW 330
// RemoveSeeing ( 91 , 70 , 7 ) ;
  48: LD_INT 91
  50: PPUSH
  51: LD_INT 70
  53: PPUSH
  54: LD_INT 7
  56: PPUSH
  57: CALL_OW 331
// if debug then
  61: LD_EXP 1
  65: IFFALSE 113
// begin SetAttitude ( 1 , 7 , att_enemy , true ) ;
  67: LD_INT 1
  69: PPUSH
  70: LD_INT 7
  72: PPUSH
  73: LD_INT 2
  75: PPUSH
  76: LD_INT 1
  78: PPUSH
  79: CALL_OW 80
// RemoveUnit ( Powell ) ;
  83: LD_EXP 16
  87: PPUSH
  88: CALL_OW 64
// DoNotAttack ( 1 , JMM ) ;
  92: LD_INT 1
  94: PPUSH
  95: LD_EXP 14
  99: PPUSH
 100: CALL_OW 471
// FogOff ( 1 ) ;
 104: LD_INT 1
 106: PPUSH
 107: CALL_OW 344
// end else
 111: GO 117
// Action ;
 113: CALL 9839 0 0
// PreparePatrol ;
 117: CALL 1405 0 0
// game := true ;
 121: LD_ADDR_EXP 2
 125: PUSH
 126: LD_INT 1
 128: ST_TO_ADDR
// end ;
 129: END
// export debug , game , selected , friends , reached_lab , can_escape , on_hill , friends_kill_counter , team_kill_counter , gamma_commander , extra_patrol , invis_used , alert ; export function InitVariables ; begin
 130: LD_INT 0
 132: PPUSH
// debug := false ;
 133: LD_ADDR_EXP 1
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// friends := [ ] ;
 141: LD_ADDR_EXP 4
 145: PUSH
 146: EMPTY
 147: ST_TO_ADDR
// selected := [ ] ;
 148: LD_ADDR_EXP 3
 152: PUSH
 153: EMPTY
 154: ST_TO_ADDR
// reached_lab := false ;
 155: LD_ADDR_EXP 5
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// can_escape := false ;
 163: LD_ADDR_EXP 6
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// game := false ;
 171: LD_ADDR_EXP 2
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// gamma_commander := LoadVariable ( GammaCommander , 1 ) ;
 179: LD_ADDR_EXP 10
 183: PUSH
 184: LD_STRING GammaCommander
 186: PPUSH
 187: LD_INT 1
 189: PPUSH
 190: CALL_OW 30
 194: ST_TO_ADDR
// friends_kill_counter := 0 ;
 195: LD_ADDR_EXP 8
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// team_kill_counter := 0 ;
 203: LD_ADDR_EXP 9
 207: PUSH
 208: LD_INT 0
 210: ST_TO_ADDR
// extra_patrol := true ;
 211: LD_ADDR_EXP 11
 215: PUSH
 216: LD_INT 1
 218: ST_TO_ADDR
// on_hill := false ;
 219: LD_ADDR_EXP 7
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// invis_used := false ;
 227: LD_ADDR_EXP 12
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// alert := false ;
 235: LD_ADDR_EXP 13
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// end ;
 243: LD_VAR 0 1
 247: RET
// every 0 0$1 trigger on_hill do
 248: LD_EXP 7
 252: IFFALSE 264
 254: GO 256
 256: DISABLE
// SetAchievement ( ACH_EYE ) ;
 257: LD_STRING ACH_EYE
 259: PPUSH
 260: CALL_OW 543
 264: END
// every 0 0$1 trigger not invis_used do var i ;
 265: LD_EXP 12
 269: NOT
 270: IFFALSE 341
 272: GO 274
 274: DISABLE
 275: LD_INT 0
 277: PPUSH
// begin enable ;
 278: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do
 279: LD_ADDR_VAR 0 1
 283: PUSH
 284: LD_INT 22
 286: PUSH
 287: LD_INT 7
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PUSH
 294: LD_INT 21
 296: PUSH
 297: LD_INT 1
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: PUSH
 304: EMPTY
 305: LIST
 306: LIST
 307: PPUSH
 308: CALL_OW 69
 312: PUSH
 313: FOR_IN
 314: IFFALSE 339
// if IsInvisible ( i ) then
 316: LD_VAR 0 1
 320: PPUSH
 321: CALL_OW 571
 325: IFFALSE 337
// begin invis_used := true ;
 327: LD_ADDR_EXP 12
 331: PUSH
 332: LD_INT 1
 334: ST_TO_ADDR
// break ;
 335: GO 339
// end ;
 337: GO 313
 339: POP
 340: POP
// end ; end_of_file
 341: PPOPN 1
 343: END
// export JMM , Roth ; export function PrepareAlliance ; var cargo ; begin
 344: LD_INT 0
 346: PPUSH
 347: PPUSH
// uc_side := 7 ;
 348: LD_ADDR_OWVAR 20
 352: PUSH
 353: LD_INT 7
 355: ST_TO_ADDR
// uc_nation := 1 ;
 356: LD_ADDR_OWVAR 21
 360: PUSH
 361: LD_INT 1
 363: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 11_ ) ;
 364: LD_ADDR_EXP 14
 368: PUSH
 369: LD_STRING JMM
 371: PPUSH
 372: LD_EXP 1
 376: NOT
 377: PPUSH
 378: LD_STRING 11_
 380: PPUSH
 381: CALL 35619 0 3
 385: ST_TO_ADDR
// uc_side := 4 ;
 386: LD_ADDR_OWVAR 20
 390: PUSH
 391: LD_INT 4
 393: ST_TO_ADDR
// Roth := NewCharacter ( Roth ) ;
 394: LD_ADDR_EXP 15
 398: PUSH
 399: LD_STRING Roth
 401: PPUSH
 402: CALL_OW 25
 406: ST_TO_ADDR
// SetDir ( JMM , 1 ) ;
 407: LD_EXP 14
 411: PPUSH
 412: LD_INT 1
 414: PPUSH
 415: CALL_OW 233
// SetClass ( JMM , 1 ) ;
 419: LD_EXP 14
 423: PPUSH
 424: LD_INT 1
 426: PPUSH
 427: CALL_OW 336
// PlaceUnitXY ( JMM , 105 , 10 , false ) ;
 431: LD_EXP 14
 435: PPUSH
 436: LD_INT 105
 438: PPUSH
 439: LD_INT 10
 441: PPUSH
 442: LD_INT 0
 444: PPUSH
 445: CALL_OW 48
// SetDir ( Roth , 4 ) ;
 449: LD_EXP 15
 453: PPUSH
 454: LD_INT 4
 456: PPUSH
 457: CALL_OW 233
// PlaceUnitXY ( Roth , 109 , 10 , false ) ;
 461: LD_EXP 15
 465: PPUSH
 466: LD_INT 109
 468: PPUSH
 469: LD_INT 10
 471: PPUSH
 472: LD_INT 0
 474: PPUSH
 475: CALL_OW 48
// ComTurnUnit ( JMM , Roth ) ;
 479: LD_EXP 14
 483: PPUSH
 484: LD_EXP 15
 488: PPUSH
 489: CALL_OW 119
// ComTurnUnit ( Roth , JMM ) ;
 493: LD_EXP 15
 497: PPUSH
 498: LD_EXP 14
 502: PPUSH
 503: CALL_OW 119
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
 507: LD_INT 3
 509: PPUSH
 510: LD_INT 3
 512: PPUSH
 513: LD_INT 3
 515: PPUSH
 516: LD_INT 12
 518: PPUSH
 519: LD_INT 100
 521: PPUSH
 522: CALL 40459 0 5
// cargo := CreateVehicle ;
 526: LD_ADDR_VAR 0 2
 530: PUSH
 531: CALL_OW 45
 535: ST_TO_ADDR
// SetDir ( cargo , 1 ) ;
 536: LD_VAR 0 2
 540: PPUSH
 541: LD_INT 1
 543: PPUSH
 544: CALL_OW 233
// PlaceUnitXY ( cargo , 179 , 45 , false ) ;
 548: LD_VAR 0 2
 552: PPUSH
 553: LD_INT 179
 555: PPUSH
 556: LD_INT 45
 558: PPUSH
 559: LD_INT 0
 561: PPUSH
 562: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 30 ) ;
 566: LD_VAR 0 2
 570: PPUSH
 571: LD_INT 4
 573: PPUSH
 574: LD_INT 30
 576: PPUSH
 577: CALL_OW 290
// if LoadVariable ( 11_artifact_captured , 0 ) then
 581: LD_STRING 11_artifact_captured
 583: PPUSH
 584: LD_INT 0
 586: PPUSH
 587: CALL_OW 30
 591: IFFALSE 648
// begin cargo := CreateVehicle ;
 593: LD_ADDR_VAR 0 2
 597: PUSH
 598: CALL_OW 45
 602: ST_TO_ADDR
// SetDir ( cargo , 0 ) ;
 603: LD_VAR 0 2
 607: PPUSH
 608: LD_INT 0
 610: PPUSH
 611: CALL_OW 233
// PlaceUnitXY ( cargo , 171 , 85 , false ) ;
 615: LD_VAR 0 2
 619: PPUSH
 620: LD_INT 171
 622: PPUSH
 623: LD_INT 85
 625: PPUSH
 626: LD_INT 0
 628: PPUSH
 629: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 50 ) ;
 633: LD_VAR 0 2
 637: PPUSH
 638: LD_INT 4
 640: PPUSH
 641: LD_INT 50
 643: PPUSH
 644: CALL_OW 290
// end ; SetSide ( amlab , 7 ) ;
 648: LD_INT 47
 650: PPUSH
 651: LD_INT 7
 653: PPUSH
 654: CALL_OW 235
// DoNotAttack ( 1 , amlab ) ;
 658: LD_INT 1
 660: PPUSH
 661: LD_INT 47
 663: PPUSH
 664: CALL_OW 471
// end ;
 668: LD_VAR 0 1
 672: RET
// every 0 0$1 trigger FilterUnitsInArea ( hill , [ f_side , 7 ] ) and not on_hill do
 673: LD_INT 38
 675: PPUSH
 676: LD_INT 22
 678: PUSH
 679: LD_INT 7
 681: PUSH
 682: EMPTY
 683: LIST
 684: LIST
 685: PPUSH
 686: CALL_OW 70
 690: PUSH
 691: LD_EXP 7
 695: NOT
 696: AND
 697: IFFALSE 728
 699: GO 701
 701: DISABLE
// begin enable ;
 702: ENABLE
// on_hill := true ;
 703: LD_ADDR_EXP 7
 707: PUSH
 708: LD_INT 1
 710: ST_TO_ADDR
// PlaceSeeing ( 126 , 13 , 7 , - 90 ) ;
 711: LD_INT 126
 713: PPUSH
 714: LD_INT 13
 716: PPUSH
 717: LD_INT 7
 719: PPUSH
 720: LD_INT 90
 722: NEG
 723: PPUSH
 724: CALL_OW 330
// end ;
 728: END
// every 0 0$1 trigger not FilterUnitsInArea ( hill , [ f_side , 7 ] ) and on_hill do
 729: LD_INT 38
 731: PPUSH
 732: LD_INT 22
 734: PUSH
 735: LD_INT 7
 737: PUSH
 738: EMPTY
 739: LIST
 740: LIST
 741: PPUSH
 742: CALL_OW 70
 746: NOT
 747: PUSH
 748: LD_EXP 7
 752: AND
 753: IFFALSE 780
 755: GO 757
 757: DISABLE
// begin enable ;
 758: ENABLE
// on_hill := false ;
 759: LD_ADDR_EXP 7
 763: PUSH
 764: LD_INT 0
 766: ST_TO_ADDR
// RemoveSeeing ( 126 , 13 , 7 ) ;
 767: LD_INT 126
 769: PPUSH
 770: LD_INT 13
 772: PPUSH
 773: LD_INT 7
 775: PPUSH
 776: CALL_OW 331
// end ; end_of_file
 780: END
// export Powell , mobile_patrol , mobile_points , powell_guards , defenders , defcon , defcon_wave ; export function PrepareAmerican ; var i , j , b , un , tmp ; begin
 781: LD_INT 0
 783: PPUSH
 784: PPUSH
 785: PPUSH
 786: PPUSH
 787: PPUSH
 788: PPUSH
// if Difficulty = 1 then
 789: LD_OWVAR 67
 793: PUSH
 794: LD_INT 1
 796: EQUAL
 797: IFFALSE 905
// begin tmp := [ [ 155 , 77 ] , [ 193 , 93 ] , [ 188 , 81 ] , [ 56 , 85 ] , [ 98 , 87 ] ] ;
 799: LD_ADDR_VAR 0 6
 803: PUSH
 804: LD_INT 155
 806: PUSH
 807: LD_INT 77
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: PUSH
 814: LD_INT 193
 816: PUSH
 817: LD_INT 93
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PUSH
 824: LD_INT 188
 826: PUSH
 827: LD_INT 81
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: PUSH
 834: LD_INT 56
 836: PUSH
 837: LD_INT 85
 839: PUSH
 840: EMPTY
 841: LIST
 842: LIST
 843: PUSH
 844: LD_INT 98
 846: PUSH
 847: LD_INT 87
 849: PUSH
 850: EMPTY
 851: LIST
 852: LIST
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: ST_TO_ADDR
// for i in tmp do
 861: LD_ADDR_VAR 0 2
 865: PUSH
 866: LD_VAR 0 6
 870: PUSH
 871: FOR_IN
 872: IFFALSE 903
// RemoveUnit ( HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
 874: LD_VAR 0 2
 878: PUSH
 879: LD_INT 1
 881: ARRAY
 882: PPUSH
 883: LD_VAR 0 2
 887: PUSH
 888: LD_INT 2
 890: ARRAY
 891: PPUSH
 892: CALL_OW 428
 896: PPUSH
 897: CALL_OW 64
 901: GO 871
 903: POP
 904: POP
// end ; defcon := 0 ;
 905: LD_ADDR_EXP 21
 909: PUSH
 910: LD_INT 0
 912: ST_TO_ADDR
// defcon_wave := 0 ;
 913: LD_ADDR_EXP 22
 917: PUSH
 918: LD_INT 0
 920: ST_TO_ADDR
// defenders := [ ] ;
 921: LD_ADDR_EXP 20
 925: PUSH
 926: EMPTY
 927: ST_TO_ADDR
// SetBName ( alfa , alfa ) ;
 928: LD_INT 5
 930: PPUSH
 931: LD_STRING alfa
 933: PPUSH
 934: CALL_OW 500
// uc_side := 1 ;
 938: LD_ADDR_OWVAR 20
 942: PUSH
 943: LD_INT 1
 945: ST_TO_ADDR
// uc_nation := 1 ;
 946: LD_ADDR_OWVAR 21
 950: PUSH
 951: LD_INT 1
 953: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
 954: LD_ADDR_EXP 16
 958: PUSH
 959: LD_STRING Powell
 961: PPUSH
 962: CALL_OW 25
 966: ST_TO_ADDR
// PlaceUnitXY ( Powell , 110 , 26 , false ) ;
 967: LD_EXP 16
 971: PPUSH
 972: LD_INT 110
 974: PPUSH
 975: LD_INT 26
 977: PPUSH
 978: LD_INT 0
 980: PPUSH
 981: CALL_OW 48
// ComHold ( Powell ) ;
 985: LD_EXP 16
 989: PPUSH
 990: CALL_OW 140
// for i := 1 to 5 do
 994: LD_ADDR_VAR 0 2
 998: PUSH
 999: DOUBLE
1000: LD_INT 1
1002: DEC
1003: ST_TO_ADDR
1004: LD_INT 5
1006: PUSH
1007: FOR_TO
1008: IFFALSE 1064
// begin PrepareHuman ( false , 1 , 10 ) ;
1010: LD_INT 0
1012: PPUSH
1013: LD_INT 1
1015: PPUSH
1016: LD_INT 10
1018: PPUSH
1019: CALL_OW 380
// powell_guards := Insert ( powell_guards , 1 , CreateHuman ) ;
1023: LD_ADDR_EXP 19
1027: PUSH
1028: LD_EXP 19
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: CALL_OW 44
1040: PPUSH
1041: CALL_OW 2
1045: ST_TO_ADDR
// PlaceHumanInUnit ( powell_guards [ 1 ] , ambar0 ) ;
1046: LD_EXP 19
1050: PUSH
1051: LD_INT 1
1053: ARRAY
1054: PPUSH
1055: LD_INT 18
1057: PPUSH
1058: CALL_OW 52
// end ;
1062: GO 1007
1064: POP
1065: POP
// if Difficulty > 1 then
1066: LD_OWVAR 67
1070: PUSH
1071: LD_INT 1
1073: GREATER
1074: IFFALSE 1225
// begin tmp := [ [ 81 , 33 ] , [ 134 , 114 ] , [ 193 , 102 ] ] ;
1076: LD_ADDR_VAR 0 6
1080: PUSH
1081: LD_INT 81
1083: PUSH
1084: LD_INT 33
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: PUSH
1091: LD_INT 134
1093: PUSH
1094: LD_INT 114
1096: PUSH
1097: EMPTY
1098: LIST
1099: LIST
1100: PUSH
1101: LD_INT 193
1103: PUSH
1104: LD_INT 102
1106: PUSH
1107: EMPTY
1108: LIST
1109: LIST
1110: PUSH
1111: EMPTY
1112: LIST
1113: LIST
1114: LIST
1115: ST_TO_ADDR
// for i := 1 to Difficulty - 1 do
1116: LD_ADDR_VAR 0 2
1120: PUSH
1121: DOUBLE
1122: LD_INT 1
1124: DEC
1125: ST_TO_ADDR
1126: LD_OWVAR 67
1130: PUSH
1131: LD_INT 1
1133: MINUS
1134: PUSH
1135: FOR_TO
1136: IFFALSE 1223
// begin PrepareSoldier ( false , 10 ) ;
1138: LD_INT 0
1140: PPUSH
1141: LD_INT 10
1143: PPUSH
1144: CALL_OW 381
// un := CreateHuman ;
1148: LD_ADDR_VAR 0 5
1152: PUSH
1153: CALL_OW 44
1157: ST_TO_ADDR
// SetClass ( un , class_sniper ) ;
1158: LD_VAR 0 5
1162: PPUSH
1163: LD_INT 5
1165: PPUSH
1166: CALL_OW 336
// PlaceUnitXY ( un , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
1170: LD_VAR 0 5
1174: PPUSH
1175: LD_VAR 0 6
1179: PUSH
1180: LD_VAR 0 2
1184: ARRAY
1185: PUSH
1186: LD_INT 1
1188: ARRAY
1189: PPUSH
1190: LD_VAR 0 6
1194: PUSH
1195: LD_VAR 0 2
1199: ARRAY
1200: PUSH
1201: LD_INT 2
1203: ARRAY
1204: PPUSH
1205: LD_INT 0
1207: PPUSH
1208: CALL_OW 48
// ComHold ( un ) ;
1212: LD_VAR 0 5
1216: PPUSH
1217: CALL_OW 140
// end ;
1221: GO 1135
1223: POP
1224: POP
// end ; if Difficulty > 2 then
1225: LD_OWVAR 67
1229: PUSH
1230: LD_INT 2
1232: GREATER
1233: IFFALSE 1282
// begin bc_type := b_turret ;
1235: LD_ADDR_OWVAR 42
1239: PUSH
1240: LD_INT 33
1242: ST_TO_ADDR
// bc_level := 7 ;
1243: LD_ADDR_OWVAR 43
1247: PUSH
1248: LD_INT 7
1250: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 107 , 55 , 5 ) ;
1251: LD_ADDR_VAR 0 4
1255: PUSH
1256: LD_INT 107
1258: PPUSH
1259: LD_INT 55
1261: PPUSH
1262: LD_INT 5
1264: PPUSH
1265: CALL_OW 47
1269: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_rocket_launcher ) ;
1270: LD_VAR 0 4
1274: PPUSH
1275: LD_INT 7
1277: PPUSH
1278: CALL_OW 431
// end ; for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ^ FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) do
1282: LD_ADDR_VAR 0 2
1286: PUSH
1287: LD_INT 22
1289: PUSH
1290: LD_INT 1
1292: PUSH
1293: EMPTY
1294: LIST
1295: LIST
1296: PUSH
1297: LD_INT 30
1299: PUSH
1300: LD_INT 3
1302: PUSH
1303: EMPTY
1304: LIST
1305: LIST
1306: PUSH
1307: EMPTY
1308: LIST
1309: LIST
1310: PPUSH
1311: CALL_OW 69
1315: PUSH
1316: LD_INT 22
1318: PUSH
1319: LD_INT 1
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: PUSH
1326: LD_INT 30
1328: PUSH
1329: LD_INT 36
1331: PUSH
1332: EMPTY
1333: LIST
1334: LIST
1335: PUSH
1336: EMPTY
1337: LIST
1338: LIST
1339: PPUSH
1340: CALL_OW 69
1344: ADD
1345: PUSH
1346: FOR_IN
1347: IFFALSE 1398
// for j = 1 to 3 do
1349: LD_ADDR_VAR 0 3
1353: PUSH
1354: DOUBLE
1355: LD_INT 1
1357: DEC
1358: ST_TO_ADDR
1359: LD_INT 3
1361: PUSH
1362: FOR_TO
1363: IFFALSE 1394
// begin PrepareHuman ( false , 3 , 6 ) ;
1365: LD_INT 0
1367: PPUSH
1368: LD_INT 3
1370: PPUSH
1371: LD_INT 6
1373: PPUSH
1374: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
1378: CALL_OW 44
1382: PPUSH
1383: LD_VAR 0 2
1387: PPUSH
1388: CALL_OW 52
// end ;
1392: GO 1362
1394: POP
1395: POP
1396: GO 1346
1398: POP
1399: POP
// end ;
1400: LD_VAR 0 1
1404: RET
// export function PreparePatrol ; var i , un ; begin
1405: LD_INT 0
1407: PPUSH
1408: PPUSH
1409: PPUSH
// uc_side := 1 ;
1410: LD_ADDR_OWVAR 20
1414: PUSH
1415: LD_INT 1
1417: ST_TO_ADDR
// uc_nation := 1 ;
1418: LD_ADDR_OWVAR 21
1422: PUSH
1423: LD_INT 1
1425: ST_TO_ADDR
// mobile_points := [ [ [ 99 , 55 ] , [ 113 , 67 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 103 , 41 ] ] , [ [ 27 , 49 ] , [ 46 , 49 ] , [ 87 , 70 ] , [ 99 , 79 ] , [ 118 , 111 ] , [ 99 , 79 ] , [ 87 , 70 ] , [ 46 , 49 ] ] , [ [ 200 , 88 ] , [ 175 , 80 ] , [ 135 , 62 ] , [ 117 , 53 ] , [ 103 , 41 ] , [ 99 , 24 ] , [ 85 , 3 ] , [ 99 , 24 ] , [ 103 , 41 ] , [ 98 , 47 ] , [ 99 , 56 ] , [ 96 , 66 ] , [ 99 , 56 ] , [ 112 , 66 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 156 , 71 ] , [ 168 , 76 ] , [ 168 , 61 ] , [ 168 , 75 ] , [ 185 , 85 ] ] ] ;
1426: LD_ADDR_EXP 18
1430: PUSH
1431: LD_INT 99
1433: PUSH
1434: LD_INT 55
1436: PUSH
1437: EMPTY
1438: LIST
1439: LIST
1440: PUSH
1441: LD_INT 113
1443: PUSH
1444: LD_INT 67
1446: PUSH
1447: EMPTY
1448: LIST
1449: LIST
1450: PUSH
1451: LD_INT 129
1453: PUSH
1454: LD_INT 68
1456: PUSH
1457: EMPTY
1458: LIST
1459: LIST
1460: PUSH
1461: LD_INT 135
1463: PUSH
1464: LD_INT 62
1466: PUSH
1467: EMPTY
1468: LIST
1469: LIST
1470: PUSH
1471: LD_INT 103
1473: PUSH
1474: LD_INT 41
1476: PUSH
1477: EMPTY
1478: LIST
1479: LIST
1480: PUSH
1481: EMPTY
1482: LIST
1483: LIST
1484: LIST
1485: LIST
1486: LIST
1487: PUSH
1488: LD_INT 27
1490: PUSH
1491: LD_INT 49
1493: PUSH
1494: EMPTY
1495: LIST
1496: LIST
1497: PUSH
1498: LD_INT 46
1500: PUSH
1501: LD_INT 49
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: PUSH
1508: LD_INT 87
1510: PUSH
1511: LD_INT 70
1513: PUSH
1514: EMPTY
1515: LIST
1516: LIST
1517: PUSH
1518: LD_INT 99
1520: PUSH
1521: LD_INT 79
1523: PUSH
1524: EMPTY
1525: LIST
1526: LIST
1527: PUSH
1528: LD_INT 118
1530: PUSH
1531: LD_INT 111
1533: PUSH
1534: EMPTY
1535: LIST
1536: LIST
1537: PUSH
1538: LD_INT 99
1540: PUSH
1541: LD_INT 79
1543: PUSH
1544: EMPTY
1545: LIST
1546: LIST
1547: PUSH
1548: LD_INT 87
1550: PUSH
1551: LD_INT 70
1553: PUSH
1554: EMPTY
1555: LIST
1556: LIST
1557: PUSH
1558: LD_INT 46
1560: PUSH
1561: LD_INT 49
1563: PUSH
1564: EMPTY
1565: LIST
1566: LIST
1567: PUSH
1568: EMPTY
1569: LIST
1570: LIST
1571: LIST
1572: LIST
1573: LIST
1574: LIST
1575: LIST
1576: LIST
1577: PUSH
1578: LD_INT 200
1580: PUSH
1581: LD_INT 88
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: PUSH
1588: LD_INT 175
1590: PUSH
1591: LD_INT 80
1593: PUSH
1594: EMPTY
1595: LIST
1596: LIST
1597: PUSH
1598: LD_INT 135
1600: PUSH
1601: LD_INT 62
1603: PUSH
1604: EMPTY
1605: LIST
1606: LIST
1607: PUSH
1608: LD_INT 117
1610: PUSH
1611: LD_INT 53
1613: PUSH
1614: EMPTY
1615: LIST
1616: LIST
1617: PUSH
1618: LD_INT 103
1620: PUSH
1621: LD_INT 41
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: PUSH
1628: LD_INT 99
1630: PUSH
1631: LD_INT 24
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: PUSH
1638: LD_INT 85
1640: PUSH
1641: LD_INT 3
1643: PUSH
1644: EMPTY
1645: LIST
1646: LIST
1647: PUSH
1648: LD_INT 99
1650: PUSH
1651: LD_INT 24
1653: PUSH
1654: EMPTY
1655: LIST
1656: LIST
1657: PUSH
1658: LD_INT 103
1660: PUSH
1661: LD_INT 41
1663: PUSH
1664: EMPTY
1665: LIST
1666: LIST
1667: PUSH
1668: LD_INT 98
1670: PUSH
1671: LD_INT 47
1673: PUSH
1674: EMPTY
1675: LIST
1676: LIST
1677: PUSH
1678: LD_INT 99
1680: PUSH
1681: LD_INT 56
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: PUSH
1688: LD_INT 96
1690: PUSH
1691: LD_INT 66
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: PUSH
1698: LD_INT 99
1700: PUSH
1701: LD_INT 56
1703: PUSH
1704: EMPTY
1705: LIST
1706: LIST
1707: PUSH
1708: LD_INT 112
1710: PUSH
1711: LD_INT 66
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: PUSH
1718: LD_INT 129
1720: PUSH
1721: LD_INT 68
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: PUSH
1728: LD_INT 135
1730: PUSH
1731: LD_INT 62
1733: PUSH
1734: EMPTY
1735: LIST
1736: LIST
1737: PUSH
1738: LD_INT 156
1740: PUSH
1741: LD_INT 71
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: PUSH
1748: LD_INT 168
1750: PUSH
1751: LD_INT 76
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: LD_INT 168
1760: PUSH
1761: LD_INT 61
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: PUSH
1768: LD_INT 168
1770: PUSH
1771: LD_INT 75
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: PUSH
1778: LD_INT 185
1780: PUSH
1781: LD_INT 85
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: PUSH
1788: EMPTY
1789: LIST
1790: LIST
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: PUSH
1811: EMPTY
1812: LIST
1813: LIST
1814: LIST
1815: ST_TO_ADDR
// mobile_patrol := [ ] ;
1816: LD_ADDR_EXP 17
1820: PUSH
1821: EMPTY
1822: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1823: LD_INT 3
1825: PPUSH
1826: LD_INT 1
1828: PPUSH
1829: LD_INT 3
1831: PPUSH
1832: LD_INT 4
1834: PPUSH
1835: LD_INT 100
1837: PPUSH
1838: CALL 40459 0 5
// mobile_patrol := Insert ( mobile_patrol , 1 , CreateVehicle ) ;
1842: LD_ADDR_EXP 17
1846: PUSH
1847: LD_EXP 17
1851: PPUSH
1852: LD_INT 1
1854: PPUSH
1855: CALL_OW 45
1859: PPUSH
1860: CALL_OW 2
1864: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 1 ] , 99 , 55 , false ) ;
1865: LD_EXP 17
1869: PUSH
1870: LD_INT 1
1872: ARRAY
1873: PPUSH
1874: LD_INT 99
1876: PPUSH
1877: LD_INT 55
1879: PPUSH
1880: LD_INT 0
1882: PPUSH
1883: CALL_OW 48
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1887: LD_INT 2
1889: PPUSH
1890: LD_INT 1
1892: PPUSH
1893: LD_INT 3
1895: PPUSH
1896: LD_INT 4
1898: PPUSH
1899: LD_INT 100
1901: PPUSH
1902: CALL 40459 0 5
// mobile_patrol := Insert ( mobile_patrol , 2 , CreateVehicle ) ;
1906: LD_ADDR_EXP 17
1910: PUSH
1911: LD_EXP 17
1915: PPUSH
1916: LD_INT 2
1918: PPUSH
1919: CALL_OW 45
1923: PPUSH
1924: CALL_OW 2
1928: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 2 ] , 27 , 49 , false ) ;
1929: LD_EXP 17
1933: PUSH
1934: LD_INT 2
1936: ARRAY
1937: PPUSH
1938: LD_INT 27
1940: PPUSH
1941: LD_INT 49
1943: PPUSH
1944: LD_INT 0
1946: PPUSH
1947: CALL_OW 48
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , [ us_laser , us_rocket_launcher , us_rocket_launcher , us_rocket_launcher ] [ Difficulty ] , 100 ) ;
1951: LD_INT 3
1953: PPUSH
1954: LD_INT 1
1956: PPUSH
1957: LD_INT 3
1959: PPUSH
1960: LD_INT 9
1962: PUSH
1963: LD_INT 7
1965: PUSH
1966: LD_INT 7
1968: PUSH
1969: LD_INT 7
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: PUSH
1978: LD_OWVAR 67
1982: ARRAY
1983: PPUSH
1984: LD_INT 100
1986: PPUSH
1987: CALL 40459 0 5
// mobile_patrol := Insert ( mobile_patrol , 3 , CreateVehicle ) ;
1991: LD_ADDR_EXP 17
1995: PUSH
1996: LD_EXP 17
2000: PPUSH
2001: LD_INT 3
2003: PPUSH
2004: CALL_OW 45
2008: PPUSH
2009: CALL_OW 2
2013: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 3 ] , 200 , 88 , false ) ;
2014: LD_EXP 17
2018: PUSH
2019: LD_INT 3
2021: ARRAY
2022: PPUSH
2023: LD_INT 200
2025: PPUSH
2026: LD_INT 88
2028: PPUSH
2029: LD_INT 0
2031: PPUSH
2032: CALL_OW 48
// for i := mobile_patrol downto 1 do
2036: LD_ADDR_VAR 0 2
2040: PUSH
2041: DOUBLE
2042: LD_EXP 17
2046: INC
2047: ST_TO_ADDR
2048: LD_INT 1
2050: PUSH
2051: FOR_DOWNTO
2052: IFFALSE 2063
// RaiseSailEvent ( 1 ) ;
2054: LD_INT 1
2056: PPUSH
2057: CALL_OW 427
2061: GO 2051
2063: POP
2064: POP
// end ;
2065: LD_VAR 0 1
2069: RET
// export function SpawnCargo ( ) ; var i , c , k , areas , road , tmp , veh ; begin
2070: LD_INT 0
2072: PPUSH
2073: PPUSH
2074: PPUSH
2075: PPUSH
2076: PPUSH
2077: PPUSH
2078: PPUSH
2079: PPUSH
// areas := [ [ road_east , 4 ] , [ road_south , 5 ] , [ road_west , 1 ] ] ;
2080: LD_ADDR_VAR 0 5
2084: PUSH
2085: LD_INT 20
2087: PUSH
2088: LD_INT 4
2090: PUSH
2091: EMPTY
2092: LIST
2093: LIST
2094: PUSH
2095: LD_INT 21
2097: PUSH
2098: LD_INT 5
2100: PUSH
2101: EMPTY
2102: LIST
2103: LIST
2104: PUSH
2105: LD_INT 22
2107: PUSH
2108: LD_INT 1
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: PUSH
2115: EMPTY
2116: LIST
2117: LIST
2118: LIST
2119: ST_TO_ADDR
// road := [ [ 176 , 81 , 135 , 62 , 114 , 67 , 93 , 71 , 76 , 67 ] , [ 107 , 92 , 92 , 72 , 77 , 68 ] , [ 45 , 49 , 67 , 59 , 77 , 68 ] ] ;
2120: LD_ADDR_VAR 0 6
2124: PUSH
2125: LD_INT 176
2127: PUSH
2128: LD_INT 81
2130: PUSH
2131: LD_INT 135
2133: PUSH
2134: LD_INT 62
2136: PUSH
2137: LD_INT 114
2139: PUSH
2140: LD_INT 67
2142: PUSH
2143: LD_INT 93
2145: PUSH
2146: LD_INT 71
2148: PUSH
2149: LD_INT 76
2151: PUSH
2152: LD_INT 67
2154: PUSH
2155: EMPTY
2156: LIST
2157: LIST
2158: LIST
2159: LIST
2160: LIST
2161: LIST
2162: LIST
2163: LIST
2164: LIST
2165: LIST
2166: PUSH
2167: LD_INT 107
2169: PUSH
2170: LD_INT 92
2172: PUSH
2173: LD_INT 92
2175: PUSH
2176: LD_INT 72
2178: PUSH
2179: LD_INT 77
2181: PUSH
2182: LD_INT 68
2184: PUSH
2185: EMPTY
2186: LIST
2187: LIST
2188: LIST
2189: LIST
2190: LIST
2191: LIST
2192: PUSH
2193: LD_INT 45
2195: PUSH
2196: LD_INT 49
2198: PUSH
2199: LD_INT 67
2201: PUSH
2202: LD_INT 59
2204: PUSH
2205: LD_INT 77
2207: PUSH
2208: LD_INT 68
2210: PUSH
2211: EMPTY
2212: LIST
2213: LIST
2214: LIST
2215: LIST
2216: LIST
2217: LIST
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: LIST
2223: ST_TO_ADDR
// k := rand ( 1 , areas ) ;
2224: LD_ADDR_VAR 0 4
2228: PUSH
2229: LD_INT 1
2231: PPUSH
2232: LD_VAR 0 5
2236: PPUSH
2237: CALL_OW 12
2241: ST_TO_ADDR
// c := rand ( 1 , 2 ) ;
2242: LD_ADDR_VAR 0 3
2246: PUSH
2247: LD_INT 1
2249: PPUSH
2250: LD_INT 2
2252: PPUSH
2253: CALL_OW 12
2257: ST_TO_ADDR
// uc_side := 1 ;
2258: LD_ADDR_OWVAR 20
2262: PUSH
2263: LD_INT 1
2265: ST_TO_ADDR
// uc_nation := 1 ;
2266: LD_ADDR_OWVAR 21
2270: PUSH
2271: LD_INT 1
2273: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
2274: LD_INT 2
2276: PPUSH
2277: LD_INT 3
2279: PPUSH
2280: LD_INT 3
2282: PPUSH
2283: LD_INT 12
2285: PPUSH
2286: LD_INT 100
2288: PPUSH
2289: CALL 40459 0 5
// veh := CreateVehicle ;
2293: LD_ADDR_VAR 0 8
2297: PUSH
2298: CALL_OW 45
2302: ST_TO_ADDR
// SetDir ( veh , areas [ k ] [ 2 ] ) ;
2303: LD_VAR 0 8
2307: PPUSH
2308: LD_VAR 0 5
2312: PUSH
2313: LD_VAR 0 4
2317: ARRAY
2318: PUSH
2319: LD_INT 2
2321: ARRAY
2322: PPUSH
2323: CALL_OW 233
// PlaceUnitArea ( veh , areas [ k ] [ 1 ] , false ) ;
2327: LD_VAR 0 8
2331: PPUSH
2332: LD_VAR 0 5
2336: PUSH
2337: LD_VAR 0 4
2341: ARRAY
2342: PUSH
2343: LD_INT 1
2345: ARRAY
2346: PPUSH
2347: LD_INT 0
2349: PPUSH
2350: CALL_OW 49
// SetCargo ( veh , [ mat_cans , mat_siberit ] [ c ] , 100 ) ;
2354: LD_VAR 0 8
2358: PPUSH
2359: LD_INT 1
2361: PUSH
2362: LD_INT 3
2364: PUSH
2365: EMPTY
2366: LIST
2367: LIST
2368: PUSH
2369: LD_VAR 0 3
2373: ARRAY
2374: PPUSH
2375: LD_INT 100
2377: PPUSH
2378: CALL_OW 290
// tmp := road [ k ] ;
2382: LD_ADDR_VAR 0 7
2386: PUSH
2387: LD_VAR 0 6
2391: PUSH
2392: LD_VAR 0 4
2396: ARRAY
2397: ST_TO_ADDR
// for i = 1 to tmp div 2 do
2398: LD_ADDR_VAR 0 2
2402: PUSH
2403: DOUBLE
2404: LD_INT 1
2406: DEC
2407: ST_TO_ADDR
2408: LD_VAR 0 7
2412: PUSH
2413: LD_INT 2
2415: DIV
2416: PUSH
2417: FOR_TO
2418: IFFALSE 2465
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2420: LD_VAR 0 8
2424: PPUSH
2425: LD_VAR 0 7
2429: PUSH
2430: LD_VAR 0 2
2434: PUSH
2435: LD_INT 2
2437: MUL
2438: PUSH
2439: LD_INT 1
2441: MINUS
2442: ARRAY
2443: PPUSH
2444: LD_VAR 0 7
2448: PUSH
2449: LD_VAR 0 2
2453: PUSH
2454: LD_INT 2
2456: MUL
2457: ARRAY
2458: PPUSH
2459: CALL_OW 171
2463: GO 2417
2465: POP
2466: POP
// AddComGive ( veh , alfa ) ;
2467: LD_VAR 0 8
2471: PPUSH
2472: LD_INT 5
2474: PPUSH
2475: CALL_OW 221
// AddComWait ( veh , 0 0$2 ) ;
2479: LD_VAR 0 8
2483: PPUSH
2484: LD_INT 70
2486: PPUSH
2487: CALL_OW 202
// for i = tmp div 2 downto 1 do
2491: LD_ADDR_VAR 0 2
2495: PUSH
2496: DOUBLE
2497: LD_VAR 0 7
2501: PUSH
2502: LD_INT 2
2504: DIV
2505: INC
2506: ST_TO_ADDR
2507: LD_INT 1
2509: PUSH
2510: FOR_DOWNTO
2511: IFFALSE 2558
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2513: LD_VAR 0 8
2517: PPUSH
2518: LD_VAR 0 7
2522: PUSH
2523: LD_VAR 0 2
2527: PUSH
2528: LD_INT 2
2530: MUL
2531: PUSH
2532: LD_INT 1
2534: MINUS
2535: ARRAY
2536: PPUSH
2537: LD_VAR 0 7
2541: PUSH
2542: LD_VAR 0 2
2546: PUSH
2547: LD_INT 2
2549: MUL
2550: ARRAY
2551: PPUSH
2552: CALL_OW 171
2556: GO 2510
2558: POP
2559: POP
// AddComMoveToArea ( veh , areas [ k ] [ 1 ] ) ;
2560: LD_VAR 0 8
2564: PPUSH
2565: LD_VAR 0 5
2569: PUSH
2570: LD_VAR 0 4
2574: ARRAY
2575: PUSH
2576: LD_INT 1
2578: ARRAY
2579: PPUSH
2580: CALL_OW 173
// repeat wait ( 0 0$1 ) ;
2584: LD_INT 35
2586: PPUSH
2587: CALL_OW 67
// until IsInArea ( veh , areas [ k ] [ 1 ] ) and GetCargo ( veh , c ) = 0 ;
2591: LD_VAR 0 8
2595: PPUSH
2596: LD_VAR 0 5
2600: PUSH
2601: LD_VAR 0 4
2605: ARRAY
2606: PUSH
2607: LD_INT 1
2609: ARRAY
2610: PPUSH
2611: CALL_OW 308
2615: PUSH
2616: LD_VAR 0 8
2620: PPUSH
2621: LD_VAR 0 3
2625: PPUSH
2626: CALL_OW 289
2630: PUSH
2631: LD_INT 0
2633: EQUAL
2634: AND
2635: IFFALSE 2584
// RemoveUnit ( veh ) ;
2637: LD_VAR 0 8
2641: PPUSH
2642: CALL_OW 64
// end ;
2646: LD_VAR 0 1
2650: RET
// every 3 3$00 do
2651: GO 2653
2653: DISABLE
// begin enable ;
2654: ENABLE
// SpawnCargo ;
2655: CALL 2070 0 0
// end ;
2659: END
// export function PrepareDefenders ; var i , tmp ; begin
2660: LD_INT 0
2662: PPUSH
2663: PPUSH
2664: PPUSH
// if defenders then
2665: LD_EXP 20
2669: IFFALSE 2673
// exit ;
2671: GO 2945
// for i = 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
2673: LD_ADDR_VAR 0 2
2677: PUSH
2678: DOUBLE
2679: LD_INT 1
2681: DEC
2682: ST_TO_ADDR
2683: LD_INT 4
2685: PUSH
2686: LD_INT 5
2688: PUSH
2689: LD_INT 6
2691: PUSH
2692: LD_INT 7
2694: PUSH
2695: EMPTY
2696: LIST
2697: LIST
2698: LIST
2699: LIST
2700: PUSH
2701: LD_OWVAR 67
2705: ARRAY
2706: PUSH
2707: FOR_TO
2708: IFFALSE 2847
// begin tmp := Produce ( amfac2 , [ us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_remote , [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ) ;
2710: LD_ADDR_VAR 0 3
2714: PUSH
2715: LD_INT 6
2717: PPUSH
2718: LD_INT 2
2720: PUSH
2721: LD_INT 3
2723: PUSH
2724: EMPTY
2725: LIST
2726: LIST
2727: PUSH
2728: LD_INT 1
2730: PPUSH
2731: LD_INT 2
2733: PPUSH
2734: CALL_OW 12
2738: ARRAY
2739: PPUSH
2740: LD_INT 1
2742: PUSH
2743: LD_INT 3
2745: PUSH
2746: EMPTY
2747: LIST
2748: LIST
2749: PUSH
2750: LD_INT 1
2752: PPUSH
2753: LD_INT 2
2755: PPUSH
2756: CALL_OW 12
2760: ARRAY
2761: PPUSH
2762: LD_INT 2
2764: PPUSH
2765: LD_INT 4
2767: PUSH
2768: LD_INT 5
2770: PUSH
2771: LD_INT 9
2773: PUSH
2774: EMPTY
2775: LIST
2776: LIST
2777: LIST
2778: PUSH
2779: LD_INT 1
2781: PPUSH
2782: LD_INT 3
2784: PPUSH
2785: CALL_OW 12
2789: ARRAY
2790: PPUSH
2791: CALL 38079 0 5
2795: ST_TO_ADDR
// if tmp then
2796: LD_VAR 0 3
2800: IFFALSE 2845
// AddComConstruct ( amfac2 , tmp [ 1 ] , tmp [ 2 ] , tmp [ 3 ] , tmp [ 4 ] ) ;
2802: LD_INT 6
2804: PPUSH
2805: LD_VAR 0 3
2809: PUSH
2810: LD_INT 1
2812: ARRAY
2813: PPUSH
2814: LD_VAR 0 3
2818: PUSH
2819: LD_INT 2
2821: ARRAY
2822: PPUSH
2823: LD_VAR 0 3
2827: PUSH
2828: LD_INT 3
2830: ARRAY
2831: PPUSH
2832: LD_VAR 0 3
2836: PUSH
2837: LD_INT 4
2839: ARRAY
2840: PPUSH
2841: CALL_OW 185
// end ;
2845: GO 2707
2847: POP
2848: POP
// repeat wait ( 0 0$1 ) ;
2849: LD_INT 35
2851: PPUSH
2852: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
2856: LD_INT 22
2858: PUSH
2859: LD_INT 1
2861: PUSH
2862: EMPTY
2863: LIST
2864: LIST
2865: PUSH
2866: LD_INT 33
2868: PUSH
2869: LD_INT 2
2871: PUSH
2872: EMPTY
2873: LIST
2874: LIST
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: PPUSH
2880: CALL_OW 69
2884: PUSH
2885: LD_INT 4
2887: PUSH
2888: LD_INT 5
2890: PUSH
2891: LD_INT 6
2893: PUSH
2894: LD_INT 7
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: LIST
2901: LIST
2902: PUSH
2903: LD_OWVAR 67
2907: ARRAY
2908: GREATEREQUAL
2909: IFFALSE 2849
// defenders := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ;
2911: LD_ADDR_EXP 20
2915: PUSH
2916: LD_INT 22
2918: PUSH
2919: LD_INT 1
2921: PUSH
2922: EMPTY
2923: LIST
2924: LIST
2925: PUSH
2926: LD_INT 33
2928: PUSH
2929: LD_INT 2
2931: PUSH
2932: EMPTY
2933: LIST
2934: LIST
2935: PUSH
2936: EMPTY
2937: LIST
2938: LIST
2939: PPUSH
2940: CALL_OW 69
2944: ST_TO_ADDR
// end ;
2945: LD_VAR 0 1
2949: RET
// export function Defend ; var i , un , veh , tmp ; begin
2950: LD_INT 0
2952: PPUSH
2953: PPUSH
2954: PPUSH
2955: PPUSH
2956: PPUSH
// defcon_wave := defcon_wave + 1 ;
2957: LD_ADDR_EXP 22
2961: PUSH
2962: LD_EXP 22
2966: PUSH
2967: LD_INT 1
2969: PLUS
2970: ST_TO_ADDR
// if not defenders then
2971: LD_EXP 20
2975: NOT
2976: IFFALSE 2982
// PrepareDefenders ;
2978: CALL 2660 0 0
// if defcon_wave > 1 then
2982: LD_EXP 22
2986: PUSH
2987: LD_INT 1
2989: GREATER
2990: IFFALSE 3248
// begin for i = 1 to defcon_wave + 2 do
2992: LD_ADDR_VAR 0 2
2996: PUSH
2997: DOUBLE
2998: LD_INT 1
3000: DEC
3001: ST_TO_ADDR
3002: LD_EXP 22
3006: PUSH
3007: LD_INT 2
3009: PLUS
3010: PUSH
3011: FOR_TO
3012: IFFALSE 3154
// begin uc_side := 1 ;
3014: LD_ADDR_OWVAR 20
3018: PUSH
3019: LD_INT 1
3021: ST_TO_ADDR
// uc_nation := 1 ;
3022: LD_ADDR_OWVAR 21
3026: PUSH
3027: LD_INT 1
3029: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_siberite , control_manual , [ us_gatling_gun , us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
3030: LD_INT 4
3032: PPUSH
3033: LD_INT 3
3035: PPUSH
3036: LD_INT 1
3038: PPUSH
3039: LD_INT 4
3041: PUSH
3042: LD_INT 6
3044: PUSH
3045: LD_INT 7
3047: PUSH
3048: EMPTY
3049: LIST
3050: LIST
3051: LIST
3052: PUSH
3053: LD_INT 1
3055: PPUSH
3056: LD_INT 3
3058: PPUSH
3059: CALL_OW 12
3063: ARRAY
3064: PPUSH
3065: LD_INT 100
3067: PPUSH
3068: CALL 40459 0 5
// veh := CreateVehicle ;
3072: LD_ADDR_VAR 0 4
3076: PUSH
3077: CALL_OW 45
3081: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
3082: LD_VAR 0 4
3086: PPUSH
3087: LD_INT 1
3089: PPUSH
3090: CALL_OW 233
// defenders := defenders ^ veh ;
3094: LD_ADDR_EXP 20
3098: PUSH
3099: LD_EXP 20
3103: PUSH
3104: LD_VAR 0 4
3108: ADD
3109: ST_TO_ADDR
// PrepareHuman ( false , 3 , 9 ) ;
3110: LD_INT 0
3112: PPUSH
3113: LD_INT 3
3115: PPUSH
3116: LD_INT 9
3118: PPUSH
3119: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3123: CALL_OW 44
3127: PPUSH
3128: LD_VAR 0 4
3132: PPUSH
3133: CALL_OW 52
// PlaceUnitArea ( veh , west_spawn , false ) ;
3137: LD_VAR 0 4
3141: PPUSH
3142: LD_INT 25
3144: PPUSH
3145: LD_INT 0
3147: PPUSH
3148: CALL_OW 49
// end ;
3152: GO 3011
3154: POP
3155: POP
// for i = 1 to defcon_wave do
3156: LD_ADDR_VAR 0 2
3160: PUSH
3161: DOUBLE
3162: LD_INT 1
3164: DEC
3165: ST_TO_ADDR
3166: LD_EXP 22
3170: PUSH
3171: FOR_TO
3172: IFFALSE 3246
// begin uc_side := 1 ;
3174: LD_ADDR_OWVAR 20
3178: PUSH
3179: LD_INT 1
3181: ST_TO_ADDR
// uc_nation := 1 ;
3182: LD_ADDR_OWVAR 21
3186: PUSH
3187: LD_INT 1
3189: ST_TO_ADDR
// PrepareHuman ( false , 5 , 9 ) ;
3190: LD_INT 0
3192: PPUSH
3193: LD_INT 5
3195: PPUSH
3196: LD_INT 9
3198: PPUSH
3199: CALL_OW 380
// un := CreateHuman ;
3203: LD_ADDR_VAR 0 3
3207: PUSH
3208: CALL_OW 44
3212: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
3213: LD_VAR 0 3
3217: PPUSH
3218: LD_INT 25
3220: PPUSH
3221: LD_INT 0
3223: PPUSH
3224: CALL_OW 49
// defenders := defenders ^ un ;
3228: LD_ADDR_EXP 20
3232: PUSH
3233: LD_EXP 20
3237: PUSH
3238: LD_VAR 0 3
3242: ADD
3243: ST_TO_ADDR
// end ;
3244: GO 3171
3246: POP
3247: POP
// end ; repeat wait ( 0 0$1 ) ;
3248: LD_INT 35
3250: PPUSH
3251: CALL_OW 67
// for i in defenders do
3255: LD_ADDR_VAR 0 2
3259: PUSH
3260: LD_EXP 20
3264: PUSH
3265: FOR_IN
3266: IFFALSE 3348
// begin if defcon and GetDistUnitXY ( i , defcon [ 1 ] , defcon [ 2 ] ) > 10 and not HasTask ( i ) then
3268: LD_EXP 21
3272: PUSH
3273: LD_VAR 0 2
3277: PPUSH
3278: LD_EXP 21
3282: PUSH
3283: LD_INT 1
3285: ARRAY
3286: PPUSH
3287: LD_EXP 21
3291: PUSH
3292: LD_INT 2
3294: ARRAY
3295: PPUSH
3296: CALL_OW 297
3300: PUSH
3301: LD_INT 10
3303: GREATER
3304: AND
3305: PUSH
3306: LD_VAR 0 2
3310: PPUSH
3311: CALL_OW 314
3315: NOT
3316: AND
3317: IFFALSE 3346
// ComAgressiveMove ( i , defcon [ 1 ] , defcon [ 2 ] ) ;
3319: LD_VAR 0 2
3323: PPUSH
3324: LD_EXP 21
3328: PUSH
3329: LD_INT 1
3331: ARRAY
3332: PPUSH
3333: LD_EXP 21
3337: PUSH
3338: LD_INT 2
3340: ARRAY
3341: PPUSH
3342: CALL_OW 114
// end ;
3346: GO 3265
3348: POP
3349: POP
// until not defenders ;
3350: LD_EXP 20
3354: NOT
3355: IFFALSE 3248
// end ;
3357: LD_VAR 0 1
3361: RET
// every 0 0$1 do var radar , i ;
3362: GO 3364
3364: DISABLE
3365: LD_INT 0
3367: PPUSH
3368: PPUSH
// begin uc_side := 1 ;
3369: LD_ADDR_OWVAR 20
3373: PUSH
3374: LD_INT 1
3376: ST_TO_ADDR
// uc_nation := 1 ;
3377: LD_ADDR_OWVAR 21
3381: PUSH
3382: LD_INT 1
3384: ST_TO_ADDR
// PrepareVehicle ( us_light_wheeled , engine_solar , control_computer , us_radar , 100 ) ;
3385: LD_INT 1
3387: PPUSH
3388: LD_INT 2
3390: PPUSH
3391: LD_INT 3
3393: PPUSH
3394: LD_INT 11
3396: PPUSH
3397: LD_INT 100
3399: PPUSH
3400: CALL 40459 0 5
// radar := CreateVehicle ;
3404: LD_ADDR_VAR 0 1
3408: PUSH
3409: CALL_OW 45
3413: ST_TO_ADDR
// SetDir ( radar , 4 ) ;
3414: LD_VAR 0 1
3418: PPUSH
3419: LD_INT 4
3421: PPUSH
3422: CALL_OW 233
// PlaceUnitXY ( radar , 51 , 45 , false ) ;
3426: LD_VAR 0 1
3430: PPUSH
3431: LD_INT 51
3433: PPUSH
3434: LD_INT 45
3436: PPUSH
3437: LD_INT 0
3439: PPUSH
3440: CALL_OW 48
// repeat AddComWait ( radar , 0 0$20 ) ;
3444: LD_VAR 0 1
3448: PPUSH
3449: LD_INT 700
3451: PPUSH
3452: CALL_OW 202
// AddComMoveXY ( radar , 65 , 75 ) ;
3456: LD_VAR 0 1
3460: PPUSH
3461: LD_INT 65
3463: PPUSH
3464: LD_INT 75
3466: PPUSH
3467: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3471: LD_VAR 0 1
3475: PPUSH
3476: LD_INT 350
3478: PPUSH
3479: CALL_OW 202
// AddComMoveXY ( radar , 83 , 87 ) ;
3483: LD_VAR 0 1
3487: PPUSH
3488: LD_INT 83
3490: PPUSH
3491: LD_INT 87
3493: PPUSH
3494: CALL_OW 171
// AddComWait ( radar , 0 0$15 ) ;
3498: LD_VAR 0 1
3502: PPUSH
3503: LD_INT 525
3505: PPUSH
3506: CALL_OW 202
// AddComMoveXY ( radar , 94 , 81 ) ;
3510: LD_VAR 0 1
3514: PPUSH
3515: LD_INT 94
3517: PPUSH
3518: LD_INT 81
3520: PPUSH
3521: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3525: LD_VAR 0 1
3529: PPUSH
3530: LD_INT 350
3532: PPUSH
3533: CALL_OW 202
// AddComMoveXY ( radar , 55 , 48 ) ;
3537: LD_VAR 0 1
3541: PPUSH
3542: LD_INT 55
3544: PPUSH
3545: LD_INT 48
3547: PPUSH
3548: CALL_OW 171
// wait ( 1 1$00 ) ;
3552: LD_INT 2100
3554: PPUSH
3555: CALL_OW 67
// until not IsOk ( radar ) ;
3559: LD_VAR 0 1
3563: PPUSH
3564: CALL_OW 302
3568: NOT
3569: IFFALSE 3444
// end ;
3571: PPOPN 2
3573: END
// every 7 7$30 trigger Difficulty > 1 and extra_patrol do var un ;
3574: LD_OWVAR 67
3578: PUSH
3579: LD_INT 1
3581: GREATER
3582: PUSH
3583: LD_EXP 11
3587: AND
3588: IFFALSE 3810
3590: GO 3592
3592: DISABLE
3593: LD_INT 0
3595: PPUSH
// begin enable ;
3596: ENABLE
// uc_side := 1 ;
3597: LD_ADDR_OWVAR 20
3601: PUSH
3602: LD_INT 1
3604: ST_TO_ADDR
// uc_nation := 1 ;
3605: LD_ADDR_OWVAR 21
3609: PUSH
3610: LD_INT 1
3612: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_gatling_gun , 100 ) ;
3613: LD_INT 5
3615: PPUSH
3616: LD_INT 3
3618: PPUSH
3619: LD_INT 3
3621: PPUSH
3622: LD_INT 4
3624: PPUSH
3625: LD_INT 100
3627: PPUSH
3628: CALL 40459 0 5
// un := CreateVehicle ;
3632: LD_ADDR_VAR 0 1
3636: PUSH
3637: CALL_OW 45
3641: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3642: LD_VAR 0 1
3646: PPUSH
3647: LD_INT 3
3649: PPUSH
3650: CALL_OW 233
// PlaceUnitXY ( un , 155 , 2 , false ) ;
3654: LD_VAR 0 1
3658: PPUSH
3659: LD_INT 155
3661: PPUSH
3662: LD_INT 2
3664: PPUSH
3665: LD_INT 0
3667: PPUSH
3668: CALL_OW 48
// ComAgressiveMove ( un , 169 , 77 ) ;
3672: LD_VAR 0 1
3676: PPUSH
3677: LD_INT 169
3679: PPUSH
3680: LD_INT 77
3682: PPUSH
3683: CALL_OW 114
// AddComWait ( un , 0 0$2 ) ;
3687: LD_VAR 0 1
3691: PPUSH
3692: LD_INT 70
3694: PPUSH
3695: CALL_OW 202
// AddComAgressiveMove ( un , 134 , 62 ) ;
3699: LD_VAR 0 1
3703: PPUSH
3704: LD_INT 134
3706: PPUSH
3707: LD_INT 62
3709: PPUSH
3710: CALL_OW 174
// AddComAgressiveMove ( un , 103 , 42 ) ;
3714: LD_VAR 0 1
3718: PPUSH
3719: LD_INT 103
3721: PPUSH
3722: LD_INT 42
3724: PPUSH
3725: CALL_OW 174
// AddComWait ( un , 0 0$2 ) ;
3729: LD_VAR 0 1
3733: PPUSH
3734: LD_INT 70
3736: PPUSH
3737: CALL_OW 202
// AddComAgressiveMove ( un , 84 , 2 ) ;
3741: LD_VAR 0 1
3745: PPUSH
3746: LD_INT 84
3748: PPUSH
3749: LD_INT 2
3751: PPUSH
3752: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
3756: LD_INT 35
3758: PPUSH
3759: CALL_OW 67
// if IsDead ( un ) then
3763: LD_VAR 0 1
3767: PPUSH
3768: CALL_OW 301
3772: IFFALSE 3784
// begin extra_patrol := false ;
3774: LD_ADDR_EXP 11
3778: PUSH
3779: LD_INT 0
3781: ST_TO_ADDR
// exit ;
3782: GO 3810
// end ; until IsAt ( un , 84 , 2 ) ;
3784: LD_VAR 0 1
3788: PPUSH
3789: LD_INT 84
3791: PPUSH
3792: LD_INT 2
3794: PPUSH
3795: CALL_OW 307
3799: IFFALSE 3756
// RemoveUnit ( un ) ;
3801: LD_VAR 0 1
3805: PPUSH
3806: CALL_OW 64
// end ; end_of_file
3810: PPOPN 1
3812: END
// export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Mike ; export function PrepareFriends ; var i , tmp , buildings , areas , bunkers , cl , gammaCommander ; begin
3813: LD_INT 0
3815: PPUSH
3816: PPUSH
3817: PPUSH
3818: PPUSH
3819: PPUSH
3820: PPUSH
3821: PPUSH
3822: PPUSH
// uc_side := 4 ;
3823: LD_ADDR_OWVAR 20
3827: PUSH
3828: LD_INT 4
3830: ST_TO_ADDR
// uc_nation := 1 ;
3831: LD_ADDR_OWVAR 21
3835: PUSH
3836: LD_INT 1
3838: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 10c_ ) ;
3839: LD_ADDR_EXP 37
3843: PUSH
3844: LD_STRING DeltaDoctor
3846: PPUSH
3847: LD_EXP 1
3851: NOT
3852: PPUSH
3853: LD_STRING 10c_
3855: PPUSH
3856: CALL 35619 0 3
3860: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 10c_ ) ;
3861: LD_ADDR_EXP 36
3865: PUSH
3866: LD_STRING Joan
3868: PPUSH
3869: LD_EXP 1
3873: NOT
3874: PPUSH
3875: LD_STRING 10c_
3877: PPUSH
3878: CALL 35619 0 3
3882: ST_TO_ADDR
// if Joan then
3883: LD_EXP 36
3887: IFFALSE 3918
// friends := Insert ( friends , friends + 1 , Joan ) ;
3889: LD_ADDR_EXP 4
3893: PUSH
3894: LD_EXP 4
3898: PPUSH
3899: LD_EXP 4
3903: PUSH
3904: LD_INT 1
3906: PLUS
3907: PPUSH
3908: LD_EXP 36
3912: PPUSH
3913: CALL_OW 2
3917: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 10c_ ) ;
3918: LD_ADDR_EXP 35
3922: PUSH
3923: LD_STRING Simms
3925: PPUSH
3926: LD_EXP 1
3930: NOT
3931: PPUSH
3932: LD_STRING 10c_
3934: PPUSH
3935: CALL 35619 0 3
3939: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 11_ ) ;
3940: LD_ADDR_EXP 34
3944: PUSH
3945: LD_STRING Kikuchi
3947: PPUSH
3948: LD_EXP 1
3952: NOT
3953: PPUSH
3954: LD_STRING 11_
3956: PPUSH
3957: CALL 35619 0 3
3961: ST_TO_ADDR
// if Kikuchi then
3962: LD_EXP 34
3966: IFFALSE 3997
// friends := Insert ( friends , friends + 1 , Kikuchi ) ;
3968: LD_ADDR_EXP 4
3972: PUSH
3973: LD_EXP 4
3977: PPUSH
3978: LD_EXP 4
3982: PUSH
3983: LD_INT 1
3985: PLUS
3986: PPUSH
3987: LD_EXP 34
3991: PPUSH
3992: CALL_OW 2
3996: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 11_ ) ;
3997: LD_ADDR_EXP 33
4001: PUSH
4002: LD_STRING Frank
4004: PPUSH
4005: LD_EXP 1
4009: NOT
4010: PPUSH
4011: LD_STRING 11_
4013: PPUSH
4014: CALL 35619 0 3
4018: ST_TO_ADDR
// if Frank then
4019: LD_EXP 33
4023: IFFALSE 4054
// friends := Insert ( friends , friends + 1 , Frank ) ;
4025: LD_ADDR_EXP 4
4029: PUSH
4030: LD_EXP 4
4034: PPUSH
4035: LD_EXP 4
4039: PUSH
4040: LD_INT 1
4042: PLUS
4043: PPUSH
4044: LD_EXP 33
4048: PPUSH
4049: CALL_OW 2
4053: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , 11_ ) ;
4054: LD_ADDR_EXP 32
4058: PUSH
4059: LD_STRING Gary
4061: PPUSH
4062: LD_EXP 1
4066: NOT
4067: PPUSH
4068: LD_STRING 11_
4070: PPUSH
4071: CALL 35619 0 3
4075: ST_TO_ADDR
// if Gary then
4076: LD_EXP 32
4080: IFFALSE 4111
// friends := Insert ( friends , friends + 1 , Gary ) ;
4082: LD_ADDR_EXP 4
4086: PUSH
4087: LD_EXP 4
4091: PPUSH
4092: LD_EXP 4
4096: PUSH
4097: LD_INT 1
4099: PLUS
4100: PPUSH
4101: LD_EXP 32
4105: PPUSH
4106: CALL_OW 2
4110: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , ( not debug ) , 11_ ) ;
4111: LD_ADDR_EXP 31
4115: PUSH
4116: LD_STRING Cornell
4118: PPUSH
4119: LD_EXP 1
4123: NOT
4124: PPUSH
4125: LD_STRING 11_
4127: PPUSH
4128: CALL 35619 0 3
4132: ST_TO_ADDR
// if Cornel then
4133: LD_EXP 31
4137: IFFALSE 4168
// friends := Insert ( friends , friends + 1 , Cornel ) ;
4139: LD_ADDR_EXP 4
4143: PUSH
4144: LD_EXP 4
4148: PPUSH
4149: LD_EXP 4
4153: PUSH
4154: LD_INT 1
4156: PLUS
4157: PPUSH
4158: LD_EXP 31
4162: PPUSH
4163: CALL_OW 2
4167: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , 11_ ) ;
4168: LD_ADDR_EXP 30
4172: PUSH
4173: LD_STRING Houten
4175: PPUSH
4176: LD_EXP 1
4180: NOT
4181: PPUSH
4182: LD_STRING 11_
4184: PPUSH
4185: CALL 35619 0 3
4189: ST_TO_ADDR
// if Houten then
4190: LD_EXP 30
4194: IFFALSE 4225
// friends := Insert ( friends , friends + 1 , Houten ) ;
4196: LD_ADDR_EXP 4
4200: PUSH
4201: LD_EXP 4
4205: PPUSH
4206: LD_EXP 4
4210: PUSH
4211: LD_INT 1
4213: PLUS
4214: PPUSH
4215: LD_EXP 30
4219: PPUSH
4220: CALL_OW 2
4224: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 11_ ) ;
4225: LD_ADDR_EXP 29
4229: PUSH
4230: LD_STRING Gladstone
4232: PPUSH
4233: LD_EXP 1
4237: NOT
4238: PPUSH
4239: LD_STRING 11_
4241: PPUSH
4242: CALL 35619 0 3
4246: ST_TO_ADDR
// if Gladstone then
4247: LD_EXP 29
4251: IFFALSE 4282
// friends := Insert ( friends , friends + 1 , Gladstone ) ;
4253: LD_ADDR_EXP 4
4257: PUSH
4258: LD_EXP 4
4262: PPUSH
4263: LD_EXP 4
4267: PUSH
4268: LD_INT 1
4270: PLUS
4271: PPUSH
4272: LD_EXP 29
4276: PPUSH
4277: CALL_OW 2
4281: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 11_ ) ;
4282: LD_ADDR_EXP 23
4286: PUSH
4287: LD_STRING Lisa
4289: PPUSH
4290: LD_EXP 1
4294: NOT
4295: PPUSH
4296: LD_STRING 11_
4298: PPUSH
4299: CALL 35619 0 3
4303: ST_TO_ADDR
// if Lisa then
4304: LD_EXP 23
4308: IFFALSE 4333
// friends := Insert ( friends , 1 , Lisa ) ;
4310: LD_ADDR_EXP 4
4314: PUSH
4315: LD_EXP 4
4319: PPUSH
4320: LD_INT 1
4322: PPUSH
4323: LD_EXP 23
4327: PPUSH
4328: CALL_OW 2
4332: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 11_ ) ;
4333: LD_ADDR_EXP 24
4337: PUSH
4338: LD_STRING Donaldson
4340: PPUSH
4341: LD_EXP 1
4345: NOT
4346: PPUSH
4347: LD_STRING 11_
4349: PPUSH
4350: CALL 35619 0 3
4354: ST_TO_ADDR
// if Donaldson then
4355: LD_EXP 24
4359: IFFALSE 4390
// friends := Insert ( friends , friends + 1 , Donaldson ) ;
4361: LD_ADDR_EXP 4
4365: PUSH
4366: LD_EXP 4
4370: PPUSH
4371: LD_EXP 4
4375: PUSH
4376: LD_INT 1
4378: PLUS
4379: PPUSH
4380: LD_EXP 24
4384: PPUSH
4385: CALL_OW 2
4389: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 11_ ) ;
4390: LD_ADDR_EXP 25
4394: PUSH
4395: LD_STRING Bobby
4397: PPUSH
4398: LD_EXP 1
4402: NOT
4403: PPUSH
4404: LD_STRING 11_
4406: PPUSH
4407: CALL 35619 0 3
4411: ST_TO_ADDR
// if Bobby then
4412: LD_EXP 25
4416: IFFALSE 4447
// friends := Insert ( friends , friends + 1 , Bobby ) ;
4418: LD_ADDR_EXP 4
4422: PUSH
4423: LD_EXP 4
4427: PPUSH
4428: LD_EXP 4
4432: PUSH
4433: LD_INT 1
4435: PLUS
4436: PPUSH
4437: LD_EXP 25
4441: PPUSH
4442: CALL_OW 2
4446: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 11_ ) ;
4447: LD_ADDR_EXP 26
4451: PUSH
4452: LD_STRING Cyrus
4454: PPUSH
4455: LD_EXP 1
4459: NOT
4460: PPUSH
4461: LD_STRING 11_
4463: PPUSH
4464: CALL 35619 0 3
4468: ST_TO_ADDR
// if Cyrus then
4469: LD_EXP 26
4473: IFFALSE 4504
// friends := Insert ( friends , friends + 1 , Cyrus ) ;
4475: LD_ADDR_EXP 4
4479: PUSH
4480: LD_EXP 4
4484: PPUSH
4485: LD_EXP 4
4489: PUSH
4490: LD_INT 1
4492: PLUS
4493: PPUSH
4494: LD_EXP 26
4498: PPUSH
4499: CALL_OW 2
4503: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 11_ ) ;
4504: LD_ADDR_EXP 27
4508: PUSH
4509: LD_STRING Denis
4511: PPUSH
4512: LD_EXP 1
4516: NOT
4517: PPUSH
4518: LD_STRING 11_
4520: PPUSH
4521: CALL 35619 0 3
4525: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , 11_ ) ;
4526: LD_ADDR_EXP 28
4530: PUSH
4531: LD_STRING Brown
4533: PPUSH
4534: LD_EXP 1
4538: NOT
4539: PPUSH
4540: LD_STRING 11_
4542: PPUSH
4543: CALL 35619 0 3
4547: ST_TO_ADDR
// if Brown then
4548: LD_EXP 28
4552: IFFALSE 4583
// friends := Insert ( friends , friends + 1 , Brown ) ;
4554: LD_ADDR_EXP 4
4558: PUSH
4559: LD_EXP 4
4563: PPUSH
4564: LD_EXP 4
4568: PUSH
4569: LD_INT 1
4571: PLUS
4572: PPUSH
4573: LD_EXP 28
4577: PPUSH
4578: CALL_OW 2
4582: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , 10c_ ) ;
4583: LD_ADDR_EXP 38
4587: PUSH
4588: LD_STRING Mike
4590: PPUSH
4591: LD_EXP 1
4595: NOT
4596: PPUSH
4597: LD_STRING 10c_
4599: PPUSH
4600: CALL 35619 0 3
4604: ST_TO_ADDR
// if Mike then
4605: LD_EXP 38
4609: IFFALSE 4650
// begin SetClass ( Mike , class_apeman_engineer ) ;
4611: LD_EXP 38
4615: PPUSH
4616: LD_INT 16
4618: PPUSH
4619: CALL_OW 336
// PlaceUnitXY ( Mike , 180 , 87 , false ) ;
4623: LD_EXP 38
4627: PPUSH
4628: LD_INT 180
4630: PPUSH
4631: LD_INT 87
4633: PPUSH
4634: LD_INT 0
4636: PPUSH
4637: CALL_OW 48
// ComHold ( Mike ) ;
4641: LD_EXP 38
4645: PPUSH
4646: CALL_OW 140
// end ; friends := friends ^ CreateCharacterSet ( 11c_others ) ^ CreateCharacterSet ( 11_others ) ;
4650: LD_ADDR_EXP 4
4654: PUSH
4655: LD_EXP 4
4659: PUSH
4660: LD_STRING 11c_others
4662: PPUSH
4663: CALL_OW 31
4667: ADD
4668: PUSH
4669: LD_STRING 11_others
4671: PPUSH
4672: CALL_OW 31
4676: ADD
4677: ST_TO_ADDR
// if friends < 18 then
4678: LD_EXP 4
4682: PUSH
4683: LD_INT 18
4685: LESS
4686: IFFALSE 4758
// for i = 1 to 18 do
4688: LD_ADDR_VAR 0 2
4692: PUSH
4693: DOUBLE
4694: LD_INT 1
4696: DEC
4697: ST_TO_ADDR
4698: LD_INT 18
4700: PUSH
4701: FOR_TO
4702: IFFALSE 4756
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 7 ) ;
4704: LD_INT 0
4706: PPUSH
4707: LD_INT 1
4709: PPUSH
4710: LD_INT 4
4712: PPUSH
4713: CALL_OW 12
4717: PPUSH
4718: LD_INT 7
4720: PPUSH
4721: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
4725: LD_ADDR_EXP 4
4729: PUSH
4730: LD_EXP 4
4734: PPUSH
4735: LD_EXP 4
4739: PUSH
4740: LD_INT 1
4742: PLUS
4743: PPUSH
4744: CALL_OW 44
4748: PPUSH
4749: CALL_OW 2
4753: ST_TO_ADDR
// end ;
4754: GO 4701
4756: POP
4757: POP
// for i in friends do
4758: LD_ADDR_VAR 0 2
4762: PUSH
4763: LD_EXP 4
4767: PUSH
4768: FOR_IN
4769: IFFALSE 4842
// if GetNation ( i ) = nation_american and GetSkill ( i , 1 ) >= GetSkill ( i , 4 ) then
4771: LD_VAR 0 2
4775: PPUSH
4776: CALL_OW 248
4780: PUSH
4781: LD_INT 1
4783: EQUAL
4784: PUSH
4785: LD_VAR 0 2
4789: PPUSH
4790: LD_INT 1
4792: PPUSH
4793: CALL_OW 259
4797: PUSH
4798: LD_VAR 0 2
4802: PPUSH
4803: LD_INT 4
4805: PPUSH
4806: CALL_OW 259
4810: GREATEREQUAL
4811: AND
4812: IFFALSE 4828
// SetClass ( i , class_soldier ) else
4814: LD_VAR 0 2
4818: PPUSH
4819: LD_INT 1
4821: PPUSH
4822: CALL_OW 336
4826: GO 4840
// SetClass ( i , class_scientistic ) ;
4828: LD_VAR 0 2
4832: PPUSH
4833: LD_INT 4
4835: PPUSH
4836: CALL_OW 336
4840: GO 4768
4842: POP
4843: POP
// if Frank then
4844: LD_EXP 33
4848: IFFALSE 4862
// SetClass ( Frank , class_sniper ) ;
4850: LD_EXP 33
4854: PPUSH
4855: LD_INT 5
4857: PPUSH
4858: CALL_OW 336
// SetClass ( [ Joan , Denis , DeltaDoctor , Simms ] , class_scientistic ) ;
4862: LD_EXP 36
4866: PUSH
4867: LD_EXP 27
4871: PUSH
4872: LD_EXP 37
4876: PUSH
4877: LD_EXP 35
4881: PUSH
4882: EMPTY
4883: LIST
4884: LIST
4885: LIST
4886: LIST
4887: PPUSH
4888: LD_INT 4
4890: PPUSH
4891: CALL_OW 336
// selected = CharacterSelection (  , 7 , 7 , [ sel_dont_change_class , JMM , Roth , Simms , Denis , DeltaDoctor , sel_not_hired , sel_changeable , sel_change_class ] ^ friends , [ class_soldier , [ class_scientistic , 2 ] , [ class_sniper , 0 , 3 ] ] ) ;
4895: LD_ADDR_EXP 3
4899: PUSH
4900: LD_STRING 
4902: PPUSH
4903: LD_INT 7
4905: PPUSH
4906: LD_INT 7
4908: PPUSH
4909: LD_INT -6
4911: PUSH
4912: LD_EXP 14
4916: PUSH
4917: LD_EXP 15
4921: PUSH
4922: LD_EXP 35
4926: PUSH
4927: LD_EXP 27
4931: PUSH
4932: LD_EXP 37
4936: PUSH
4937: LD_INT -2
4939: PUSH
4940: LD_INT -3
4942: PUSH
4943: LD_INT -5
4945: PUSH
4946: EMPTY
4947: LIST
4948: LIST
4949: LIST
4950: LIST
4951: LIST
4952: LIST
4953: LIST
4954: LIST
4955: LIST
4956: PUSH
4957: LD_EXP 4
4961: ADD
4962: PPUSH
4963: LD_INT 1
4965: PUSH
4966: LD_INT 4
4968: PUSH
4969: LD_INT 2
4971: PUSH
4972: EMPTY
4973: LIST
4974: LIST
4975: PUSH
4976: LD_INT 5
4978: PUSH
4979: LD_INT 0
4981: PUSH
4982: LD_INT 3
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: LIST
4989: PUSH
4990: EMPTY
4991: LIST
4992: LIST
4993: LIST
4994: PPUSH
4995: CALL_OW 42
4999: ST_TO_ADDR
// if Simms then
5000: LD_EXP 35
5004: IFFALSE 5022
// selected := selected ^ Simms ;
5006: LD_ADDR_EXP 3
5010: PUSH
5011: LD_EXP 3
5015: PUSH
5016: LD_EXP 35
5020: ADD
5021: ST_TO_ADDR
// if Denis then
5022: LD_EXP 27
5026: IFFALSE 5044
// selected := selected ^ Denis ;
5028: LD_ADDR_EXP 3
5032: PUSH
5033: LD_EXP 3
5037: PUSH
5038: LD_EXP 27
5042: ADD
5043: ST_TO_ADDR
// if DeltaDoctor then
5044: LD_EXP 37
5048: IFFALSE 5066
// selected := selected ^ DeltaDoctor ;
5050: LD_ADDR_EXP 3
5054: PUSH
5055: LD_EXP 3
5059: PUSH
5060: LD_EXP 37
5064: ADD
5065: ST_TO_ADDR
// if gamma_commander = 1 and Donaldson then
5066: LD_EXP 10
5070: PUSH
5071: LD_INT 1
5073: EQUAL
5074: PUSH
5075: LD_EXP 24
5079: AND
5080: IFFALSE 5092
// gammaCommander := Donaldson ;
5082: LD_ADDR_VAR 0 8
5086: PUSH
5087: LD_EXP 24
5091: ST_TO_ADDR
// if gamma_commander = 2 and Brown then
5092: LD_EXP 10
5096: PUSH
5097: LD_INT 2
5099: EQUAL
5100: PUSH
5101: LD_EXP 28
5105: AND
5106: IFFALSE 5118
// gammaCommander := Brown ;
5108: LD_ADDR_VAR 0 8
5112: PUSH
5113: LD_EXP 28
5117: ST_TO_ADDR
// friends := friends diff selected ;
5118: LD_ADDR_EXP 4
5122: PUSH
5123: LD_EXP 4
5127: PUSH
5128: LD_EXP 3
5132: DIFF
5133: ST_TO_ADDR
// friends := friends diff gammaCommander ;
5134: LD_ADDR_EXP 4
5138: PUSH
5139: LD_EXP 4
5143: PUSH
5144: LD_VAR 0 8
5148: DIFF
5149: ST_TO_ADDR
// buildings := [ [ ambar1 , ambar2 , ambar3 ] , [ amlab2 , amlab3 , amlab4 ] ] ;
5150: LD_ADDR_VAR 0 4
5154: PUSH
5155: LD_INT 111
5157: PUSH
5158: LD_INT 137
5160: PUSH
5161: LD_INT 51
5163: PUSH
5164: EMPTY
5165: LIST
5166: LIST
5167: LIST
5168: PUSH
5169: LD_INT 147
5171: PUSH
5172: LD_INT 129
5174: PUSH
5175: LD_INT 25
5177: PUSH
5178: EMPTY
5179: LIST
5180: LIST
5181: LIST
5182: PUSH
5183: EMPTY
5184: LIST
5185: LIST
5186: ST_TO_ADDR
// areas := [ friends_spawn_1 , friends_spawn_2 , friends_spawn_3 , friends_spawn_4 , friends_spawn_5 , friends_spawn_6 ] ;
5187: LD_ADDR_VAR 0 5
5191: PUSH
5192: LD_INT 5
5194: PUSH
5195: LD_INT 6
5197: PUSH
5198: LD_INT 7
5200: PUSH
5201: LD_INT 8
5203: PUSH
5204: LD_INT 17
5206: PUSH
5207: LD_INT 18
5209: PUSH
5210: EMPTY
5211: LIST
5212: LIST
5213: LIST
5214: LIST
5215: LIST
5216: LIST
5217: ST_TO_ADDR
// for i in buildings do
5218: LD_ADDR_VAR 0 2
5222: PUSH
5223: LD_VAR 0 4
5227: PUSH
5228: FOR_IN
5229: IFFALSE 5245
// SetSide ( i , 4 ) ;
5231: LD_VAR 0 2
5235: PPUSH
5236: LD_INT 4
5238: PPUSH
5239: CALL_OW 235
5243: GO 5228
5245: POP
5246: POP
// for i in selected union gammaCommander do
5247: LD_ADDR_VAR 0 2
5251: PUSH
5252: LD_EXP 3
5256: PUSH
5257: LD_VAR 0 8
5261: UNION
5262: PUSH
5263: FOR_IN
5264: IFFALSE 5604
// begin if GetClass ( i ) in [ 1 , 5 ] then
5266: LD_VAR 0 2
5270: PPUSH
5271: CALL_OW 257
5275: PUSH
5276: LD_INT 1
5278: PUSH
5279: LD_INT 5
5281: PUSH
5282: EMPTY
5283: LIST
5284: LIST
5285: IN
5286: IFFALSE 5446
// begin if buildings [ 1 ] then
5288: LD_VAR 0 4
5292: PUSH
5293: LD_INT 1
5295: ARRAY
5296: IFFALSE 5357
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
5298: LD_VAR 0 2
5302: PPUSH
5303: LD_VAR 0 4
5307: PUSH
5308: LD_INT 1
5310: ARRAY
5311: PUSH
5312: LD_INT 1
5314: ARRAY
5315: PPUSH
5316: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
5320: LD_ADDR_VAR 0 4
5324: PUSH
5325: LD_VAR 0 4
5329: PPUSH
5330: LD_INT 1
5332: PPUSH
5333: LD_VAR 0 4
5337: PUSH
5338: LD_INT 1
5340: ARRAY
5341: PPUSH
5342: LD_INT 1
5344: PPUSH
5345: CALL_OW 3
5349: PPUSH
5350: CALL_OW 1
5354: ST_TO_ADDR
// end else
5355: GO 5444
// begin if not areas then
5357: LD_VAR 0 5
5361: NOT
5362: IFFALSE 5396
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5364: LD_VAR 0 2
5368: PPUSH
5369: LD_INT 87
5371: PPUSH
5372: LD_INT 68
5374: PPUSH
5375: LD_INT 8
5377: PPUSH
5378: LD_INT 0
5380: PPUSH
5381: CALL_OW 50
// ComHold ( i ) ;
5385: LD_VAR 0 2
5389: PPUSH
5390: CALL_OW 140
// end else
5394: GO 5444
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5396: LD_VAR 0 2
5400: PPUSH
5401: LD_VAR 0 5
5405: PUSH
5406: LD_INT 1
5408: ARRAY
5409: PPUSH
5410: LD_INT 0
5412: PPUSH
5413: CALL_OW 49
// ComHold ( i ) ;
5417: LD_VAR 0 2
5421: PPUSH
5422: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5426: LD_ADDR_VAR 0 5
5430: PUSH
5431: LD_VAR 0 5
5435: PPUSH
5436: LD_INT 1
5438: PPUSH
5439: CALL_OW 3
5443: ST_TO_ADDR
// end ; end ; end else
5444: GO 5602
// begin if buildings [ 2 ] then
5446: LD_VAR 0 4
5450: PUSH
5451: LD_INT 2
5453: ARRAY
5454: IFFALSE 5515
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
5456: LD_VAR 0 2
5460: PPUSH
5461: LD_VAR 0 4
5465: PUSH
5466: LD_INT 2
5468: ARRAY
5469: PUSH
5470: LD_INT 1
5472: ARRAY
5473: PPUSH
5474: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
5478: LD_ADDR_VAR 0 4
5482: PUSH
5483: LD_VAR 0 4
5487: PPUSH
5488: LD_INT 2
5490: PPUSH
5491: LD_VAR 0 4
5495: PUSH
5496: LD_INT 2
5498: ARRAY
5499: PPUSH
5500: LD_INT 1
5502: PPUSH
5503: CALL_OW 3
5507: PPUSH
5508: CALL_OW 1
5512: ST_TO_ADDR
// end else
5513: GO 5602
// begin if not areas then
5515: LD_VAR 0 5
5519: NOT
5520: IFFALSE 5554
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5522: LD_VAR 0 2
5526: PPUSH
5527: LD_INT 87
5529: PPUSH
5530: LD_INT 68
5532: PPUSH
5533: LD_INT 8
5535: PPUSH
5536: LD_INT 0
5538: PPUSH
5539: CALL_OW 50
// ComHold ( i ) ;
5543: LD_VAR 0 2
5547: PPUSH
5548: CALL_OW 140
// end else
5552: GO 5602
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5554: LD_VAR 0 2
5558: PPUSH
5559: LD_VAR 0 5
5563: PUSH
5564: LD_INT 1
5566: ARRAY
5567: PPUSH
5568: LD_INT 0
5570: PPUSH
5571: CALL_OW 49
// ComHold ( i ) ;
5575: LD_VAR 0 2
5579: PPUSH
5580: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5584: LD_ADDR_VAR 0 5
5588: PUSH
5589: LD_VAR 0 5
5593: PPUSH
5594: LD_INT 1
5596: PPUSH
5597: CALL_OW 3
5601: ST_TO_ADDR
// end ; end ; end ; end ;
5602: GO 5263
5604: POP
5605: POP
// bunkers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) ;
5606: LD_ADDR_VAR 0 6
5610: PUSH
5611: LD_INT 22
5613: PUSH
5614: LD_INT 1
5616: PUSH
5617: EMPTY
5618: LIST
5619: LIST
5620: PUSH
5621: LD_INT 30
5623: PUSH
5624: LD_INT 32
5626: PUSH
5627: EMPTY
5628: LIST
5629: LIST
5630: PUSH
5631: EMPTY
5632: LIST
5633: LIST
5634: PPUSH
5635: CALL_OW 69
5639: ST_TO_ADDR
// for i = bunkers - friends downto 1 do
5640: LD_ADDR_VAR 0 2
5644: PUSH
5645: DOUBLE
5646: LD_VAR 0 6
5650: PUSH
5651: LD_EXP 4
5655: MINUS
5656: INC
5657: ST_TO_ADDR
5658: LD_INT 1
5660: PUSH
5661: FOR_DOWNTO
5662: IFFALSE 5729
// begin PrepareHuman ( false , 1 , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
5664: LD_INT 0
5666: PPUSH
5667: LD_INT 1
5669: PPUSH
5670: LD_INT 7
5672: PUSH
5673: LD_INT 8
5675: PUSH
5676: LD_INT 9
5678: PUSH
5679: LD_INT 10
5681: PUSH
5682: EMPTY
5683: LIST
5684: LIST
5685: LIST
5686: LIST
5687: PUSH
5688: LD_OWVAR 67
5692: ARRAY
5693: PPUSH
5694: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
5698: LD_ADDR_EXP 4
5702: PUSH
5703: LD_EXP 4
5707: PPUSH
5708: LD_EXP 4
5712: PUSH
5713: LD_INT 1
5715: PLUS
5716: PPUSH
5717: CALL_OW 44
5721: PPUSH
5722: CALL_OW 2
5726: ST_TO_ADDR
// end ;
5727: GO 5661
5729: POP
5730: POP
// if friends then
5731: LD_EXP 4
5735: IFFALSE 5851
// begin tmp := friends ;
5737: LD_ADDR_VAR 0 3
5741: PUSH
5742: LD_EXP 4
5746: ST_TO_ADDR
// for i = 1 to bunkers do
5747: LD_ADDR_VAR 0 2
5751: PUSH
5752: DOUBLE
5753: LD_INT 1
5755: DEC
5756: ST_TO_ADDR
5757: LD_VAR 0 6
5761: PUSH
5762: FOR_TO
5763: IFFALSE 5849
// begin SetSide ( tmp [ tmp ] , 1 ) ;
5765: LD_VAR 0 3
5769: PUSH
5770: LD_VAR 0 3
5774: ARRAY
5775: PPUSH
5776: LD_INT 1
5778: PPUSH
5779: CALL_OW 235
// SetClass ( tmp [ tmp ] , 1 ) ;
5783: LD_VAR 0 3
5787: PUSH
5788: LD_VAR 0 3
5792: ARRAY
5793: PPUSH
5794: LD_INT 1
5796: PPUSH
5797: CALL_OW 336
// PlaceHumanInUnit ( tmp [ tmp ] , bunkers [ i ] ) ;
5801: LD_VAR 0 3
5805: PUSH
5806: LD_VAR 0 3
5810: ARRAY
5811: PPUSH
5812: LD_VAR 0 6
5816: PUSH
5817: LD_VAR 0 2
5821: ARRAY
5822: PPUSH
5823: CALL_OW 52
// tmp := Delete ( tmp , tmp ) ;
5827: LD_ADDR_VAR 0 3
5831: PUSH
5832: LD_VAR 0 3
5836: PPUSH
5837: LD_VAR 0 3
5841: PPUSH
5842: CALL_OW 3
5846: ST_TO_ADDR
// end ;
5847: GO 5762
5849: POP
5850: POP
// end ; areas := areas union [ guard_spawn_1 , guard_spawn_2 , guard_spawn_3 , guard_spawn_4 , guard_spawn_5 , guard_spawn_6 , guard_spawn_7 , guard_spawn_8 , guard_spawn_9 , guard_spawn_10 , guard_spawn_11 , guard_spawn_12 , guard_spawn_13 , guard_spawn_14 , guard_spawn_15 , guard_spawn_16 , guard_spawn_17 , guard_spawn_18 , guard_spawn_19 , guard_spawn_20 ] ;
5851: LD_ADDR_VAR 0 5
5855: PUSH
5856: LD_VAR 0 5
5860: PUSH
5861: LD_INT 9
5863: PUSH
5864: LD_INT 10
5866: PUSH
5867: LD_INT 11
5869: PUSH
5870: LD_INT 12
5872: PUSH
5873: LD_INT 13
5875: PUSH
5876: LD_INT 14
5878: PUSH
5879: LD_INT 15
5881: PUSH
5882: LD_INT 16
5884: PUSH
5885: LD_INT 26
5887: PUSH
5888: LD_INT 27
5890: PUSH
5891: LD_INT 28
5893: PUSH
5894: LD_INT 29
5896: PUSH
5897: LD_INT 30
5899: PUSH
5900: LD_INT 31
5902: PUSH
5903: LD_INT 32
5905: PUSH
5906: LD_INT 33
5908: PUSH
5909: LD_INT 34
5911: PUSH
5912: LD_INT 35
5914: PUSH
5915: LD_INT 36
5917: PUSH
5918: LD_INT 37
5920: PUSH
5921: EMPTY
5922: LIST
5923: LIST
5924: LIST
5925: LIST
5926: LIST
5927: LIST
5928: LIST
5929: LIST
5930: LIST
5931: LIST
5932: LIST
5933: LIST
5934: LIST
5935: LIST
5936: LIST
5937: LIST
5938: LIST
5939: LIST
5940: LIST
5941: LIST
5942: UNION
5943: ST_TO_ADDR
// for i in friends do
5944: LD_ADDR_VAR 0 2
5948: PUSH
5949: LD_EXP 4
5953: PUSH
5954: FOR_IN
5955: IFFALSE 6242
// begin SetTag ( i , 2 ) ;
5957: LD_VAR 0 2
5961: PPUSH
5962: LD_INT 2
5964: PPUSH
5965: CALL_OW 109
// if not GetClass ( i ) in [ class_soldier , class_scientistic , class_sniper ] then
5969: LD_VAR 0 2
5973: PPUSH
5974: CALL_OW 257
5978: PUSH
5979: LD_INT 1
5981: PUSH
5982: LD_INT 4
5984: PUSH
5985: LD_INT 5
5987: PUSH
5988: EMPTY
5989: LIST
5990: LIST
5991: LIST
5992: IN
5993: NOT
5994: IFFALSE 6008
// SetClass ( i , 1 ) ;
5996: LD_VAR 0 2
6000: PPUSH
6001: LD_INT 1
6003: PPUSH
6004: CALL_OW 336
// if GetClass ( i ) in [ class_soldier , class_sniper ] and buildings [ 1 ] then
6008: LD_VAR 0 2
6012: PPUSH
6013: CALL_OW 257
6017: PUSH
6018: LD_INT 1
6020: PUSH
6021: LD_INT 5
6023: PUSH
6024: EMPTY
6025: LIST
6026: LIST
6027: IN
6028: PUSH
6029: LD_VAR 0 4
6033: PUSH
6034: LD_INT 1
6036: ARRAY
6037: AND
6038: IFFALSE 6099
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
6040: LD_VAR 0 2
6044: PPUSH
6045: LD_VAR 0 4
6049: PUSH
6050: LD_INT 1
6052: ARRAY
6053: PUSH
6054: LD_INT 1
6056: ARRAY
6057: PPUSH
6058: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
6062: LD_ADDR_VAR 0 4
6066: PUSH
6067: LD_VAR 0 4
6071: PPUSH
6072: LD_INT 1
6074: PPUSH
6075: LD_VAR 0 4
6079: PUSH
6080: LD_INT 1
6082: ARRAY
6083: PPUSH
6084: LD_INT 1
6086: PPUSH
6087: CALL_OW 3
6091: PPUSH
6092: CALL_OW 1
6096: ST_TO_ADDR
// continue ;
6097: GO 5954
// end ; if GetClass ( i ) = class_scientistic and buildings [ 2 ] then
6099: LD_VAR 0 2
6103: PPUSH
6104: CALL_OW 257
6108: PUSH
6109: LD_INT 4
6111: EQUAL
6112: PUSH
6113: LD_VAR 0 4
6117: PUSH
6118: LD_INT 2
6120: ARRAY
6121: AND
6122: IFFALSE 6183
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
6124: LD_VAR 0 2
6128: PPUSH
6129: LD_VAR 0 4
6133: PUSH
6134: LD_INT 2
6136: ARRAY
6137: PUSH
6138: LD_INT 1
6140: ARRAY
6141: PPUSH
6142: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
6146: LD_ADDR_VAR 0 4
6150: PUSH
6151: LD_VAR 0 4
6155: PPUSH
6156: LD_INT 2
6158: PPUSH
6159: LD_VAR 0 4
6163: PUSH
6164: LD_INT 2
6166: ARRAY
6167: PPUSH
6168: LD_INT 1
6170: PPUSH
6171: CALL_OW 3
6175: PPUSH
6176: CALL_OW 1
6180: ST_TO_ADDR
// continue ;
6181: GO 5954
// end ; PlaceUnitArea ( i , areas [ 1 ] , false ) ;
6183: LD_VAR 0 2
6187: PPUSH
6188: LD_VAR 0 5
6192: PUSH
6193: LD_INT 1
6195: ARRAY
6196: PPUSH
6197: LD_INT 0
6199: PPUSH
6200: CALL_OW 49
// areas := Delete ( areas , 1 ) ;
6204: LD_ADDR_VAR 0 5
6208: PUSH
6209: LD_VAR 0 5
6213: PPUSH
6214: LD_INT 1
6216: PPUSH
6217: CALL_OW 3
6221: ST_TO_ADDR
// ComHold ( i ) ;
6222: LD_VAR 0 2
6226: PPUSH
6227: CALL_OW 140
// if not areas then
6231: LD_VAR 0 5
6235: NOT
6236: IFFALSE 6240
// break ;
6238: GO 6242
// end ;
6240: GO 5954
6242: POP
6243: POP
// if UnitFilter ( friends , [ f_not , [ f_placed ] ] ) then
6244: LD_EXP 4
6248: PPUSH
6249: LD_INT 3
6251: PUSH
6252: LD_INT 52
6254: PUSH
6255: EMPTY
6256: LIST
6257: PUSH
6258: EMPTY
6259: LIST
6260: LIST
6261: PPUSH
6262: CALL_OW 72
6266: IFFALSE 6333
// for i in UnitFilter ( friends , [ f_not , [ f_placed ] ] ) do
6268: LD_ADDR_VAR 0 2
6272: PUSH
6273: LD_EXP 4
6277: PPUSH
6278: LD_INT 3
6280: PUSH
6281: LD_INT 52
6283: PUSH
6284: EMPTY
6285: LIST
6286: PUSH
6287: EMPTY
6288: LIST
6289: LIST
6290: PPUSH
6291: CALL_OW 72
6295: PUSH
6296: FOR_IN
6297: IFFALSE 6331
// begin PlaceUnitXYR ( i , 65 , 58 , 7 , false ) ;
6299: LD_VAR 0 2
6303: PPUSH
6304: LD_INT 65
6306: PPUSH
6307: LD_INT 58
6309: PPUSH
6310: LD_INT 7
6312: PPUSH
6313: LD_INT 0
6315: PPUSH
6316: CALL_OW 50
// ComHold ( i ) ;
6320: LD_VAR 0 2
6324: PPUSH
6325: CALL_OW 140
// end ;
6329: GO 6296
6331: POP
6332: POP
// if Frank then
6333: LD_EXP 33
6337: IFFALSE 6351
// SetClass ( Frank , class_sniper ) ;
6339: LD_EXP 33
6343: PPUSH
6344: LD_INT 5
6346: PPUSH
6347: CALL_OW 336
// end ; end_of_file
6351: LD_VAR 0 1
6355: RET
// export function CanSayRand ( side ) ; begin
6356: LD_INT 0
6358: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6359: LD_ADDR_VAR 0 2
6363: PUSH
6364: LD_INT 52
6366: PUSH
6367: EMPTY
6368: LIST
6369: PUSH
6370: LD_INT 22
6372: PUSH
6373: LD_VAR 0 1
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: PUSH
6382: LD_INT 2
6384: PUSH
6385: LD_INT 25
6387: PUSH
6388: LD_INT 1
6390: PUSH
6391: EMPTY
6392: LIST
6393: LIST
6394: PUSH
6395: LD_INT 25
6397: PUSH
6398: LD_INT 2
6400: PUSH
6401: EMPTY
6402: LIST
6403: LIST
6404: PUSH
6405: LD_INT 25
6407: PUSH
6408: LD_INT 3
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: PUSH
6415: LD_INT 25
6417: PUSH
6418: LD_INT 4
6420: PUSH
6421: EMPTY
6422: LIST
6423: LIST
6424: PUSH
6425: EMPTY
6426: LIST
6427: LIST
6428: LIST
6429: LIST
6430: LIST
6431: PUSH
6432: EMPTY
6433: LIST
6434: LIST
6435: LIST
6436: PPUSH
6437: CALL_OW 69
6441: PUSH
6442: LD_EXP 14
6446: PUSH
6447: LD_EXP 33
6451: PUSH
6452: LD_EXP 23
6456: PUSH
6457: LD_EXP 24
6461: PUSH
6462: LD_EXP 25
6466: PUSH
6467: LD_EXP 26
6471: PUSH
6472: LD_EXP 27
6476: PUSH
6477: LD_EXP 28
6481: PUSH
6482: LD_EXP 29
6486: PUSH
6487: LD_EXP 30
6491: PUSH
6492: LD_EXP 16
6496: PUSH
6497: LD_EXP 31
6501: PUSH
6502: LD_EXP 32
6506: PUSH
6507: LD_EXP 34
6511: PUSH
6512: EMPTY
6513: LIST
6514: LIST
6515: LIST
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: LIST
6521: LIST
6522: LIST
6523: LIST
6524: LIST
6525: LIST
6526: LIST
6527: DIFF
6528: ST_TO_ADDR
// end ;
6529: LD_VAR 0 2
6533: RET
// export function SayRand ( sex , dial ) ; begin
6534: LD_INT 0
6536: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6537: LD_ADDR_VAR 0 3
6541: PUSH
6542: LD_INT 52
6544: PUSH
6545: EMPTY
6546: LIST
6547: PUSH
6548: LD_INT 22
6550: PUSH
6551: LD_INT 1
6553: PUSH
6554: EMPTY
6555: LIST
6556: LIST
6557: PUSH
6558: LD_INT 26
6560: PUSH
6561: LD_VAR 0 1
6565: PUSH
6566: EMPTY
6567: LIST
6568: LIST
6569: PUSH
6570: LD_INT 2
6572: PUSH
6573: LD_INT 25
6575: PUSH
6576: LD_INT 1
6578: PUSH
6579: EMPTY
6580: LIST
6581: LIST
6582: PUSH
6583: LD_INT 25
6585: PUSH
6586: LD_INT 2
6588: PUSH
6589: EMPTY
6590: LIST
6591: LIST
6592: PUSH
6593: LD_INT 25
6595: PUSH
6596: LD_INT 3
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: PUSH
6603: LD_INT 25
6605: PUSH
6606: LD_INT 4
6608: PUSH
6609: EMPTY
6610: LIST
6611: LIST
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: PUSH
6620: EMPTY
6621: LIST
6622: LIST
6623: LIST
6624: LIST
6625: PPUSH
6626: CALL_OW 69
6630: PUSH
6631: LD_EXP 14
6635: PUSH
6636: LD_EXP 33
6640: PUSH
6641: LD_EXP 23
6645: PUSH
6646: LD_EXP 24
6650: PUSH
6651: LD_EXP 25
6655: PUSH
6656: LD_EXP 26
6660: PUSH
6661: LD_EXP 27
6665: PUSH
6666: LD_EXP 28
6670: PUSH
6671: LD_EXP 29
6675: PUSH
6676: LD_EXP 30
6680: PUSH
6681: LD_EXP 16
6685: PUSH
6686: LD_EXP 31
6690: PUSH
6691: LD_EXP 32
6695: PUSH
6696: LD_EXP 34
6700: PUSH
6701: EMPTY
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: LIST
6708: LIST
6709: LIST
6710: LIST
6711: LIST
6712: LIST
6713: LIST
6714: LIST
6715: LIST
6716: DIFF
6717: ST_TO_ADDR
// if not result then
6718: LD_VAR 0 3
6722: NOT
6723: IFFALSE 6727
// exit ;
6725: GO 6755
// result := result [ 1 ] ;
6727: LD_ADDR_VAR 0 3
6731: PUSH
6732: LD_VAR 0 3
6736: PUSH
6737: LD_INT 1
6739: ARRAY
6740: ST_TO_ADDR
// Say ( result , dial ) ;
6741: LD_VAR 0 3
6745: PPUSH
6746: LD_VAR 0 2
6750: PPUSH
6751: CALL_OW 88
// end ;
6755: LD_VAR 0 3
6759: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
6760: LD_INT 0
6762: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
6763: LD_ADDR_VAR 0 4
6767: PUSH
6768: LD_INT 22
6770: PUSH
6771: LD_INT 1
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: PUSH
6778: LD_INT 26
6780: PUSH
6781: LD_VAR 0 1
6785: PUSH
6786: EMPTY
6787: LIST
6788: LIST
6789: PUSH
6790: LD_INT 2
6792: PUSH
6793: LD_INT 25
6795: PUSH
6796: LD_INT 1
6798: PUSH
6799: EMPTY
6800: LIST
6801: LIST
6802: PUSH
6803: LD_INT 25
6805: PUSH
6806: LD_INT 2
6808: PUSH
6809: EMPTY
6810: LIST
6811: LIST
6812: PUSH
6813: LD_INT 25
6815: PUSH
6816: LD_INT 3
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: PUSH
6823: LD_INT 25
6825: PUSH
6826: LD_INT 4
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: PUSH
6833: EMPTY
6834: LIST
6835: LIST
6836: LIST
6837: LIST
6838: LIST
6839: PUSH
6840: EMPTY
6841: LIST
6842: LIST
6843: LIST
6844: PPUSH
6845: CALL_OW 69
6849: PUSH
6850: LD_EXP 14
6854: PUSH
6855: LD_EXP 33
6859: PUSH
6860: LD_EXP 23
6864: PUSH
6865: LD_EXP 24
6869: PUSH
6870: LD_EXP 25
6874: PUSH
6875: LD_EXP 26
6879: PUSH
6880: LD_EXP 27
6884: PUSH
6885: LD_EXP 28
6889: PUSH
6890: LD_EXP 29
6894: PUSH
6895: LD_EXP 30
6899: PUSH
6900: LD_EXP 16
6904: PUSH
6905: LD_EXP 31
6909: PUSH
6910: LD_EXP 32
6914: PUSH
6915: LD_EXP 34
6919: PUSH
6920: EMPTY
6921: LIST
6922: LIST
6923: LIST
6924: LIST
6925: LIST
6926: LIST
6927: LIST
6928: LIST
6929: LIST
6930: LIST
6931: LIST
6932: LIST
6933: LIST
6934: LIST
6935: PUSH
6936: LD_VAR 0 3
6940: ADD
6941: DIFF
6942: ST_TO_ADDR
// if not result then
6943: LD_VAR 0 4
6947: NOT
6948: IFFALSE 6952
// exit ;
6950: GO 6980
// result := result [ 1 ] ;
6952: LD_ADDR_VAR 0 4
6956: PUSH
6957: LD_VAR 0 4
6961: PUSH
6962: LD_INT 1
6964: ARRAY
6965: ST_TO_ADDR
// Say ( result , dial ) ;
6966: LD_VAR 0 4
6970: PPUSH
6971: LD_VAR 0 2
6975: PPUSH
6976: CALL_OW 88
// end ;
6980: LD_VAR 0 4
6984: RET
// export function Patrol ( unit , path , flags ) ; var i , x , y , c , p , station , tmp_path , status , enemy , e , spot_dist , safe_place , chase_range , need_refuel ; begin
6985: LD_INT 0
6987: PPUSH
6988: PPUSH
6989: PPUSH
6990: PPUSH
6991: PPUSH
6992: PPUSH
6993: PPUSH
6994: PPUSH
6995: PPUSH
6996: PPUSH
6997: PPUSH
6998: PPUSH
6999: PPUSH
7000: PPUSH
7001: PPUSH
// if not unit or not path or GetType ( unit ) = unit_building then
7002: LD_VAR 0 1
7006: NOT
7007: PUSH
7008: LD_VAR 0 2
7012: NOT
7013: OR
7014: PUSH
7015: LD_VAR 0 1
7019: PPUSH
7020: CALL_OW 247
7024: PUSH
7025: LD_INT 3
7027: EQUAL
7028: OR
7029: IFFALSE 7033
// exit ;
7031: GO 8572
// for i = path downto 1 do
7033: LD_ADDR_VAR 0 5
7037: PUSH
7038: DOUBLE
7039: LD_VAR 0 2
7043: INC
7044: ST_TO_ADDR
7045: LD_INT 1
7047: PUSH
7048: FOR_DOWNTO
7049: IFFALSE 7110
// begin if not ValidHex ( path [ i ] [ 1 ] , path [ i ] [ 2 ] ) then
7051: LD_VAR 0 2
7055: PUSH
7056: LD_VAR 0 5
7060: ARRAY
7061: PUSH
7062: LD_INT 1
7064: ARRAY
7065: PPUSH
7066: LD_VAR 0 2
7070: PUSH
7071: LD_VAR 0 5
7075: ARRAY
7076: PUSH
7077: LD_INT 2
7079: ARRAY
7080: PPUSH
7081: CALL_OW 488
7085: NOT
7086: IFFALSE 7108
// path = Delete ( path , i ) ;
7088: LD_ADDR_VAR 0 2
7092: PUSH
7093: LD_VAR 0 2
7097: PPUSH
7098: LD_VAR 0 5
7102: PPUSH
7103: CALL_OW 3
7107: ST_TO_ADDR
// end ;
7108: GO 7048
7110: POP
7111: POP
// if not path then
7112: LD_VAR 0 2
7116: NOT
7117: IFFALSE 7121
// exit ;
7119: GO 8572
// tmp_path := [ ] ;
7121: LD_ADDR_VAR 0 11
7125: PUSH
7126: EMPTY
7127: ST_TO_ADDR
// if flags then
7128: LD_VAR 0 3
7132: IFFALSE 7206
// begin if flags [ 1 ] then
7134: LD_VAR 0 3
7138: PUSH
7139: LD_INT 1
7141: ARRAY
7142: IFFALSE 7158
// safe_place = flags [ 1 ] ;
7144: LD_ADDR_VAR 0 16
7148: PUSH
7149: LD_VAR 0 3
7153: PUSH
7154: LD_INT 1
7156: ARRAY
7157: ST_TO_ADDR
// if flags [ 2 ] then
7158: LD_VAR 0 3
7162: PUSH
7163: LD_INT 2
7165: ARRAY
7166: IFFALSE 7182
// spot_dist = flags [ 2 ] ;
7168: LD_ADDR_VAR 0 15
7172: PUSH
7173: LD_VAR 0 3
7177: PUSH
7178: LD_INT 2
7180: ARRAY
7181: ST_TO_ADDR
// if flags [ 3 ] then
7182: LD_VAR 0 3
7186: PUSH
7187: LD_INT 3
7189: ARRAY
7190: IFFALSE 7206
// chase_range = flags [ 3 ] ;
7192: LD_ADDR_VAR 0 17
7196: PUSH
7197: LD_VAR 0 3
7201: PUSH
7202: LD_INT 3
7204: ARRAY
7205: ST_TO_ADDR
// end ; if not chase_range then
7206: LD_VAR 0 17
7210: NOT
7211: IFFALSE 7221
// chase_range = 8 ;
7213: LD_ADDR_VAR 0 17
7217: PUSH
7218: LD_INT 8
7220: ST_TO_ADDR
// if not spot_dist then
7221: LD_VAR 0 15
7225: NOT
7226: IFFALSE 7236
// spot_dist := 8 ;
7228: LD_ADDR_VAR 0 15
7232: PUSH
7233: LD_INT 8
7235: ST_TO_ADDR
// need_refuel = ( GetType ( unit ) = unit_vehicle and GetEngine ( unit ) <> engine_siberite ) ;
7236: LD_ADDR_VAR 0 18
7240: PUSH
7241: LD_VAR 0 1
7245: PPUSH
7246: CALL_OW 247
7250: PUSH
7251: LD_INT 2
7253: EQUAL
7254: PUSH
7255: LD_VAR 0 1
7259: PPUSH
7260: CALL_OW 262
7264: PUSH
7265: LD_INT 3
7267: NONEQUAL
7268: AND
7269: ST_TO_ADDR
// status = 1 ;
7270: LD_ADDR_VAR 0 12
7274: PUSH
7275: LD_INT 1
7277: ST_TO_ADDR
// tmp_path = [ 1 , path [ 1 ] ] ;
7278: LD_ADDR_VAR 0 11
7282: PUSH
7283: LD_INT 1
7285: PUSH
7286: LD_VAR 0 2
7290: PUSH
7291: LD_INT 1
7293: ARRAY
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7299: LD_INT 35
7301: PPUSH
7302: CALL_OW 67
// if need_refuel and GetFuel ( unit ) < 20 then
7306: LD_VAR 0 18
7310: PUSH
7311: LD_VAR 0 1
7315: PPUSH
7316: CALL_OW 261
7320: PUSH
7321: LD_INT 20
7323: LESS
7324: AND
7325: IFFALSE 7518
// begin station := FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_oil_mine ] , [ f_btype , b_factory ] ] ] ) ;
7327: LD_ADDR_VAR 0 10
7331: PUSH
7332: LD_INT 22
7334: PUSH
7335: LD_VAR 0 1
7339: PPUSH
7340: CALL_OW 255
7344: PUSH
7345: EMPTY
7346: LIST
7347: LIST
7348: PUSH
7349: LD_INT 2
7351: PUSH
7352: LD_INT 30
7354: PUSH
7355: LD_INT 0
7357: PUSH
7358: EMPTY
7359: LIST
7360: LIST
7361: PUSH
7362: LD_INT 30
7364: PUSH
7365: LD_INT 1
7367: PUSH
7368: EMPTY
7369: LIST
7370: LIST
7371: PUSH
7372: LD_INT 30
7374: PUSH
7375: LD_INT 29
7377: PUSH
7378: EMPTY
7379: LIST
7380: LIST
7381: PUSH
7382: LD_INT 30
7384: PUSH
7385: LD_INT 3
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: PUSH
7392: EMPTY
7393: LIST
7394: LIST
7395: LIST
7396: LIST
7397: LIST
7398: PUSH
7399: EMPTY
7400: LIST
7401: LIST
7402: PPUSH
7403: CALL_OW 69
7407: ST_TO_ADDR
// if not station then
7408: LD_VAR 0 10
7412: NOT
7413: IFFALSE 7429
// begin SetFuel ( unit , 40 ) ;
7415: LD_VAR 0 1
7419: PPUSH
7420: LD_INT 40
7422: PPUSH
7423: CALL_OW 240
// continue ;
7427: GO 7299
// end ; status := 6 ;
7429: LD_ADDR_VAR 0 12
7433: PUSH
7434: LD_INT 6
7436: ST_TO_ADDR
// station := NearestUnitToUnit ( station , unit ) ;
7437: LD_ADDR_VAR 0 10
7441: PUSH
7442: LD_VAR 0 10
7446: PPUSH
7447: LD_VAR 0 1
7451: PPUSH
7452: CALL_OW 74
7456: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7457: LD_INT 35
7459: PPUSH
7460: CALL_OW 67
// ComMoveUnit ( unit , station ) ;
7464: LD_VAR 0 1
7468: PPUSH
7469: LD_VAR 0 10
7473: PPUSH
7474: CALL_OW 112
// until GetDistUnits ( unit , station ) < 6 ;
7478: LD_VAR 0 1
7482: PPUSH
7483: LD_VAR 0 10
7487: PPUSH
7488: CALL_OW 296
7492: PUSH
7493: LD_INT 6
7495: LESS
7496: IFFALSE 7457
// SetFuel ( unit , 100 ) ;
7498: LD_VAR 0 1
7502: PPUSH
7503: LD_INT 100
7505: PPUSH
7506: CALL_OW 240
// status := 5 ;
7510: LD_ADDR_VAR 0 12
7514: PUSH
7515: LD_INT 5
7517: ST_TO_ADDR
// end ; if status = 1 then
7518: LD_VAR 0 12
7522: PUSH
7523: LD_INT 1
7525: EQUAL
7526: IFFALSE 7902
// begin enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] , [ f_dist , unit , spot_dist ] , [ f_see , 1 ] ] ) ;
7528: LD_ADDR_VAR 0 13
7532: PUSH
7533: LD_INT 81
7535: PUSH
7536: LD_VAR 0 1
7540: PPUSH
7541: CALL_OW 255
7545: PUSH
7546: EMPTY
7547: LIST
7548: LIST
7549: PUSH
7550: LD_INT 3
7552: PUSH
7553: LD_INT 21
7555: PUSH
7556: LD_INT 3
7558: PUSH
7559: EMPTY
7560: LIST
7561: LIST
7562: PUSH
7563: EMPTY
7564: LIST
7565: LIST
7566: PUSH
7567: LD_INT 91
7569: PUSH
7570: LD_VAR 0 1
7574: PUSH
7575: LD_VAR 0 15
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: LIST
7584: PUSH
7585: LD_INT 101
7587: PUSH
7588: LD_INT 1
7590: PUSH
7591: EMPTY
7592: LIST
7593: LIST
7594: PUSH
7595: EMPTY
7596: LIST
7597: LIST
7598: LIST
7599: LIST
7600: PPUSH
7601: CALL_OW 69
7605: ST_TO_ADDR
// for i in enemy do
7606: LD_ADDR_VAR 0 5
7610: PUSH
7611: LD_VAR 0 13
7615: PUSH
7616: FOR_IN
7617: IFFALSE 7648
// if IsInvisible ( i ) then
7619: LD_VAR 0 5
7623: PPUSH
7624: CALL_OW 571
7628: IFFALSE 7646
// enemy := enemy diff i ;
7630: LD_ADDR_VAR 0 13
7634: PUSH
7635: LD_VAR 0 13
7639: PUSH
7640: LD_VAR 0 5
7644: DIFF
7645: ST_TO_ADDR
7646: GO 7616
7648: POP
7649: POP
// if enemy then
7650: LD_VAR 0 13
7654: IFFALSE 7704
// begin SetRememberedX ( unit , GetX ( unit ) ) ;
7656: LD_VAR 0 1
7660: PPUSH
7661: LD_VAR 0 1
7665: PPUSH
7666: CALL_OW 250
7670: PPUSH
7671: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
7675: LD_VAR 0 1
7679: PPUSH
7680: LD_VAR 0 1
7684: PPUSH
7685: CALL_OW 251
7689: PPUSH
7690: CALL_OW 232
// status = 2 ;
7694: LD_ADDR_VAR 0 12
7698: PUSH
7699: LD_INT 2
7701: ST_TO_ADDR
// end else
7702: GO 7902
// begin if IsAt ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) or not HasTask ( unit ) then
7704: LD_VAR 0 1
7708: PPUSH
7709: LD_VAR 0 11
7713: PUSH
7714: LD_INT 2
7716: ARRAY
7717: PUSH
7718: LD_INT 1
7720: ARRAY
7721: PPUSH
7722: LD_VAR 0 11
7726: PUSH
7727: LD_INT 2
7729: ARRAY
7730: PUSH
7731: LD_INT 2
7733: ARRAY
7734: PPUSH
7735: CALL_OW 307
7739: PUSH
7740: LD_VAR 0 1
7744: PPUSH
7745: CALL_OW 314
7749: NOT
7750: OR
7751: IFFALSE 7902
// begin wait ( 0 0$2 ) ;
7753: LD_INT 70
7755: PPUSH
7756: CALL_OW 67
// if tmp_path [ 1 ] + 1 > path then
7760: LD_VAR 0 11
7764: PUSH
7765: LD_INT 1
7767: ARRAY
7768: PUSH
7769: LD_INT 1
7771: PLUS
7772: PUSH
7773: LD_VAR 0 2
7777: GREATER
7778: IFFALSE 7803
// tmp_path := Replace ( tmp_path , 1 , 1 ) else
7780: LD_ADDR_VAR 0 11
7784: PUSH
7785: LD_VAR 0 11
7789: PPUSH
7790: LD_INT 1
7792: PPUSH
7793: LD_INT 1
7795: PPUSH
7796: CALL_OW 1
7800: ST_TO_ADDR
7801: GO 7834
// tmp_path := Replace ( tmp_path , 1 , tmp_path [ 1 ] + 1 ) ;
7803: LD_ADDR_VAR 0 11
7807: PUSH
7808: LD_VAR 0 11
7812: PPUSH
7813: LD_INT 1
7815: PPUSH
7816: LD_VAR 0 11
7820: PUSH
7821: LD_INT 1
7823: ARRAY
7824: PUSH
7825: LD_INT 1
7827: PLUS
7828: PPUSH
7829: CALL_OW 1
7833: ST_TO_ADDR
// tmp_path := Replace ( tmp_path , 2 , path [ tmp_path [ 1 ] ] ) ;
7834: LD_ADDR_VAR 0 11
7838: PUSH
7839: LD_VAR 0 11
7843: PPUSH
7844: LD_INT 2
7846: PPUSH
7847: LD_VAR 0 2
7851: PUSH
7852: LD_VAR 0 11
7856: PUSH
7857: LD_INT 1
7859: ARRAY
7860: ARRAY
7861: PPUSH
7862: CALL_OW 1
7866: ST_TO_ADDR
// ComAgressiveMove ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) ;
7867: LD_VAR 0 1
7871: PPUSH
7872: LD_VAR 0 11
7876: PUSH
7877: LD_INT 2
7879: ARRAY
7880: PUSH
7881: LD_INT 1
7883: ARRAY
7884: PPUSH
7885: LD_VAR 0 11
7889: PUSH
7890: LD_INT 2
7892: ARRAY
7893: PUSH
7894: LD_INT 2
7896: ARRAY
7897: PPUSH
7898: CALL_OW 114
// end ; end ; end ; if status = 2 then
7902: LD_VAR 0 12
7906: PUSH
7907: LD_INT 2
7909: EQUAL
7910: IFFALSE 8131
// begin if GetLives ( unit ) < 650 and safe_place then
7912: LD_VAR 0 1
7916: PPUSH
7917: CALL_OW 256
7921: PUSH
7922: LD_INT 650
7924: LESS
7925: PUSH
7926: LD_VAR 0 16
7930: AND
7931: IFFALSE 7943
// begin status = 3 ;
7933: LD_ADDR_VAR 0 12
7937: PUSH
7938: LD_INT 3
7940: ST_TO_ADDR
// continue ;
7941: GO 7299
// end ; x := GetRememberedX ( unit ) ;
7943: LD_ADDR_VAR 0 6
7947: PUSH
7948: LD_VAR 0 1
7952: PPUSH
7953: CALL_OW 252
7957: ST_TO_ADDR
// y := GetRememberedY ( unit ) ;
7958: LD_ADDR_VAR 0 7
7962: PUSH
7963: LD_VAR 0 1
7967: PPUSH
7968: CALL_OW 253
7972: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_distxy , x , y , spot_dist ] , [ f_see , 1 ] ] ) ;
7973: LD_ADDR_VAR 0 13
7977: PUSH
7978: LD_INT 81
7980: PUSH
7981: LD_VAR 0 1
7985: PPUSH
7986: CALL_OW 255
7990: PUSH
7991: EMPTY
7992: LIST
7993: LIST
7994: PUSH
7995: LD_INT 92
7997: PUSH
7998: LD_VAR 0 6
8002: PUSH
8003: LD_VAR 0 7
8007: PUSH
8008: LD_VAR 0 15
8012: PUSH
8013: EMPTY
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: PUSH
8019: LD_INT 101
8021: PUSH
8022: LD_INT 1
8024: PUSH
8025: EMPTY
8026: LIST
8027: LIST
8028: PUSH
8029: EMPTY
8030: LIST
8031: LIST
8032: LIST
8033: PPUSH
8034: CALL_OW 69
8038: ST_TO_ADDR
// if enemy then
8039: LD_VAR 0 13
8043: IFFALSE 8114
// begin e := NearestUnitToUnit ( enemy , unit ) ;
8045: LD_ADDR_VAR 0 14
8049: PUSH
8050: LD_VAR 0 13
8054: PPUSH
8055: LD_VAR 0 1
8059: PPUSH
8060: CALL_OW 74
8064: ST_TO_ADDR
// if GetDistUnitXY ( e , x , y ) < spot_dist + chase_range then
8065: LD_VAR 0 14
8069: PPUSH
8070: LD_VAR 0 6
8074: PPUSH
8075: LD_VAR 0 7
8079: PPUSH
8080: CALL_OW 297
8084: PUSH
8085: LD_VAR 0 15
8089: PUSH
8090: LD_VAR 0 17
8094: PLUS
8095: LESS
8096: IFFALSE 8112
// ComAttackUnit ( unit , e ) ;
8098: LD_VAR 0 1
8102: PPUSH
8103: LD_VAR 0 14
8107: PPUSH
8108: CALL_OW 115
// end else
8112: GO 8131
// begin ComStop ( unit ) ;
8114: LD_VAR 0 1
8118: PPUSH
8119: CALL_OW 141
// status = 5 ;
8123: LD_ADDR_VAR 0 12
8127: PUSH
8128: LD_INT 5
8130: ST_TO_ADDR
// end ; end ; if status = 3 and safe_place then
8131: LD_VAR 0 12
8135: PUSH
8136: LD_INT 3
8138: EQUAL
8139: PUSH
8140: LD_VAR 0 16
8144: AND
8145: IFFALSE 8231
// begin repeat ComMoveXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) ;
8147: LD_VAR 0 1
8151: PPUSH
8152: LD_VAR 0 16
8156: PUSH
8157: LD_INT 1
8159: ARRAY
8160: PPUSH
8161: LD_VAR 0 16
8165: PUSH
8166: LD_INT 2
8168: ARRAY
8169: PPUSH
8170: CALL_OW 111
// wait ( 0 0$1 ) ;
8174: LD_INT 35
8176: PPUSH
8177: CALL_OW 67
// until GetDistUnitXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) < 4 ;
8181: LD_VAR 0 1
8185: PPUSH
8186: LD_VAR 0 16
8190: PUSH
8191: LD_INT 1
8193: ARRAY
8194: PPUSH
8195: LD_VAR 0 16
8199: PUSH
8200: LD_INT 2
8202: ARRAY
8203: PPUSH
8204: CALL_OW 297
8208: PUSH
8209: LD_INT 4
8211: LESS
8212: IFFALSE 8147
// ComStop ( unit ) ;
8214: LD_VAR 0 1
8218: PPUSH
8219: CALL_OW 141
// status = 4 ;
8223: LD_ADDR_VAR 0 12
8227: PUSH
8228: LD_INT 4
8230: ST_TO_ADDR
// end ; if status = 4 then
8231: LD_VAR 0 12
8235: PUSH
8236: LD_INT 4
8238: EQUAL
8239: IFFALSE 8271
// begin repeat wait ( 0 0$1 ) ;
8241: LD_INT 35
8243: PPUSH
8244: CALL_OW 67
// until GetLives ( unit ) = 1000 ;
8248: LD_VAR 0 1
8252: PPUSH
8253: CALL_OW 256
8257: PUSH
8258: LD_INT 1000
8260: EQUAL
8261: IFFALSE 8241
// status = 5 ;
8263: LD_ADDR_VAR 0 12
8267: PUSH
8268: LD_INT 5
8270: ST_TO_ADDR
// end ; if status = 5 then
8271: LD_VAR 0 12
8275: PUSH
8276: LD_INT 5
8278: EQUAL
8279: IFFALSE 8561
// begin p := 999 ;
8281: LD_ADDR_VAR 0 9
8285: PUSH
8286: LD_INT 999
8288: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ] ;
8289: LD_ADDR_VAR 0 14
8293: PUSH
8294: LD_VAR 0 11
8298: PUSH
8299: LD_INT 2
8301: ARRAY
8302: PUSH
8303: LD_INT 1
8305: ARRAY
8306: PUSH
8307: LD_VAR 0 11
8311: PUSH
8312: LD_INT 2
8314: ARRAY
8315: PUSH
8316: LD_INT 2
8318: ARRAY
8319: PUSH
8320: EMPTY
8321: LIST
8322: LIST
8323: ST_TO_ADDR
// c := 1 ;
8324: LD_ADDR_VAR 0 8
8328: PUSH
8329: LD_INT 1
8331: ST_TO_ADDR
// for i = 1 to tmp_path [ 2 ] div 2 do
8332: LD_ADDR_VAR 0 5
8336: PUSH
8337: DOUBLE
8338: LD_INT 1
8340: DEC
8341: ST_TO_ADDR
8342: LD_VAR 0 11
8346: PUSH
8347: LD_INT 2
8349: ARRAY
8350: PUSH
8351: LD_INT 2
8353: DIV
8354: PUSH
8355: FOR_TO
8356: IFFALSE 8488
// begin x := GetDistUnitXY ( unit , tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ) ;
8358: LD_ADDR_VAR 0 6
8362: PUSH
8363: LD_VAR 0 1
8367: PPUSH
8368: LD_VAR 0 11
8372: PUSH
8373: LD_INT 2
8375: ARRAY
8376: PUSH
8377: LD_VAR 0 8
8381: ARRAY
8382: PPUSH
8383: LD_VAR 0 11
8387: PUSH
8388: LD_INT 2
8390: ARRAY
8391: PUSH
8392: LD_VAR 0 8
8396: PUSH
8397: LD_INT 1
8399: PLUS
8400: ARRAY
8401: PPUSH
8402: CALL_OW 297
8406: ST_TO_ADDR
// if x < p then
8407: LD_VAR 0 6
8411: PUSH
8412: LD_VAR 0 9
8416: LESS
8417: IFFALSE 8472
// begin p := x ;
8419: LD_ADDR_VAR 0 9
8423: PUSH
8424: LD_VAR 0 6
8428: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ] ;
8429: LD_ADDR_VAR 0 14
8433: PUSH
8434: LD_VAR 0 11
8438: PUSH
8439: LD_INT 2
8441: ARRAY
8442: PUSH
8443: LD_VAR 0 8
8447: ARRAY
8448: PUSH
8449: LD_VAR 0 11
8453: PUSH
8454: LD_INT 2
8456: ARRAY
8457: PUSH
8458: LD_VAR 0 8
8462: PUSH
8463: LD_INT 1
8465: PLUS
8466: ARRAY
8467: PUSH
8468: EMPTY
8469: LIST
8470: LIST
8471: ST_TO_ADDR
// end ; c = c + 2 ;
8472: LD_ADDR_VAR 0 8
8476: PUSH
8477: LD_VAR 0 8
8481: PUSH
8482: LD_INT 2
8484: PLUS
8485: ST_TO_ADDR
// end ;
8486: GO 8355
8488: POP
8489: POP
// repeat ComMoveXY ( unit , e [ 1 ] , e [ 2 ] ) ;
8490: LD_VAR 0 1
8494: PPUSH
8495: LD_VAR 0 14
8499: PUSH
8500: LD_INT 1
8502: ARRAY
8503: PPUSH
8504: LD_VAR 0 14
8508: PUSH
8509: LD_INT 2
8511: ARRAY
8512: PPUSH
8513: CALL_OW 111
// wait ( 0 0$1 ) ;
8517: LD_INT 35
8519: PPUSH
8520: CALL_OW 67
// until IsAt ( unit , e [ 1 ] , e [ 2 ] ) ;
8524: LD_VAR 0 1
8528: PPUSH
8529: LD_VAR 0 14
8533: PUSH
8534: LD_INT 1
8536: ARRAY
8537: PPUSH
8538: LD_VAR 0 14
8542: PUSH
8543: LD_INT 2
8545: ARRAY
8546: PPUSH
8547: CALL_OW 307
8551: IFFALSE 8490
// status = 1 ;
8553: LD_ADDR_VAR 0 12
8557: PUSH
8558: LD_INT 1
8560: ST_TO_ADDR
// end ; until IsDead ( unit ) ;
8561: LD_VAR 0 1
8565: PPUSH
8566: CALL_OW 301
8570: IFFALSE 7299
// end ;
8572: LD_VAR 0 4
8576: RET
// export function Talk ( units , type , sequence , sex , class , id , order_id ) ; var i , unit , tmp , unit_id , dialog_id , sex_id , class_id ; begin
8577: LD_INT 0
8579: PPUSH
8580: PPUSH
8581: PPUSH
8582: PPUSH
8583: PPUSH
8584: PPUSH
8585: PPUSH
8586: PPUSH
// if not units or not sequence or not sex in [ sex_male , sex_female , 0 ] or not id or not order_id then
8587: LD_VAR 0 1
8591: NOT
8592: PUSH
8593: LD_VAR 0 3
8597: NOT
8598: OR
8599: PUSH
8600: LD_VAR 0 4
8604: PUSH
8605: LD_INT 1
8607: PUSH
8608: LD_INT 2
8610: PUSH
8611: LD_INT 0
8613: PUSH
8614: EMPTY
8615: LIST
8616: LIST
8617: LIST
8618: IN
8619: NOT
8620: OR
8621: PUSH
8622: LD_VAR 0 6
8626: NOT
8627: OR
8628: PUSH
8629: LD_VAR 0 7
8633: NOT
8634: OR
8635: IFFALSE 8639
// exit ;
8637: GO 9030
// sex_id :=  ;
8639: LD_ADDR_VAR 0 14
8643: PUSH
8644: LD_STRING 
8646: ST_TO_ADDR
// case class of 1 :
8647: LD_VAR 0 5
8651: PUSH
8652: LD_INT 1
8654: DOUBLE
8655: EQUAL
8656: IFTRUE 8660
8658: GO 8671
8660: POP
// class_id := Sol ; 2 :
8661: LD_ADDR_VAR 0 15
8665: PUSH
8666: LD_STRING Sol
8668: ST_TO_ADDR
8669: GO 8729
8671: LD_INT 2
8673: DOUBLE
8674: EQUAL
8675: IFTRUE 8679
8677: GO 8690
8679: POP
// class_id := Eng ; 3 :
8680: LD_ADDR_VAR 0 15
8684: PUSH
8685: LD_STRING Eng
8687: ST_TO_ADDR
8688: GO 8729
8690: LD_INT 3
8692: DOUBLE
8693: EQUAL
8694: IFTRUE 8698
8696: GO 8709
8698: POP
// class_id := Mech ; 4 :
8699: LD_ADDR_VAR 0 15
8703: PUSH
8704: LD_STRING Mech
8706: ST_TO_ADDR
8707: GO 8729
8709: LD_INT 4
8711: DOUBLE
8712: EQUAL
8713: IFTRUE 8717
8715: GO 8728
8717: POP
// class_id := Sci ; end ;
8718: LD_ADDR_VAR 0 15
8722: PUSH
8723: LD_STRING Sci
8725: ST_TO_ADDR
8726: GO 8729
8728: POP
// tmp := UnitFilter ( units , [ f_class , class ] ) ;
8729: LD_ADDR_VAR 0 11
8733: PUSH
8734: LD_VAR 0 1
8738: PPUSH
8739: LD_INT 25
8741: PUSH
8742: LD_VAR 0 5
8746: PUSH
8747: EMPTY
8748: LIST
8749: LIST
8750: PPUSH
8751: CALL_OW 72
8755: ST_TO_ADDR
// if tmp then
8756: LD_VAR 0 11
8760: IFFALSE 8772
// units := tmp ;
8762: LD_ADDR_VAR 0 1
8766: PUSH
8767: LD_VAR 0 11
8771: ST_TO_ADDR
// if sex then
8772: LD_VAR 0 4
8776: IFFALSE 8832
// begin if sex = sex_female then
8778: LD_VAR 0 4
8782: PUSH
8783: LD_INT 2
8785: EQUAL
8786: IFFALSE 8796
// sex_id := F ;
8788: LD_ADDR_VAR 0 14
8792: PUSH
8793: LD_STRING F
8795: ST_TO_ADDR
// units := UnitFilter ( units , [ f_sex , sex ] ) ;
8796: LD_ADDR_VAR 0 1
8800: PUSH
8801: LD_VAR 0 1
8805: PPUSH
8806: LD_INT 26
8808: PUSH
8809: LD_VAR 0 4
8813: PUSH
8814: EMPTY
8815: LIST
8816: LIST
8817: PPUSH
8818: CALL_OW 72
8822: ST_TO_ADDR
// if not units then
8823: LD_VAR 0 1
8827: NOT
8828: IFFALSE 8832
// exit ;
8830: GO 9030
// end ; unit_id := id ;
8832: LD_ADDR_VAR 0 12
8836: PUSH
8837: LD_VAR 0 6
8841: ST_TO_ADDR
// if unit_id > units then
8842: LD_VAR 0 12
8846: PUSH
8847: LD_VAR 0 1
8851: GREATER
8852: IFFALSE 8862
// unit_id := 1 ;
8854: LD_ADDR_VAR 0 12
8858: PUSH
8859: LD_INT 1
8861: ST_TO_ADDR
// if not units [ unit_id ] then
8862: LD_VAR 0 1
8866: PUSH
8867: LD_VAR 0 12
8871: ARRAY
8872: NOT
8873: IFFALSE 8877
// exit ;
8875: GO 9030
// unit := units [ unit_id ] ;
8877: LD_ADDR_VAR 0 10
8881: PUSH
8882: LD_VAR 0 1
8886: PUSH
8887: LD_VAR 0 12
8891: ARRAY
8892: ST_TO_ADDR
// dialog_id := D & sequence & - & sex_id & class_id & id & - & order_id ;
8893: LD_ADDR_VAR 0 13
8897: PUSH
8898: LD_STRING D
8900: PUSH
8901: LD_VAR 0 3
8905: STR
8906: PUSH
8907: LD_STRING -
8909: STR
8910: PUSH
8911: LD_VAR 0 14
8915: STR
8916: PUSH
8917: LD_VAR 0 15
8921: STR
8922: PUSH
8923: LD_VAR 0 6
8927: STR
8928: PUSH
8929: LD_STRING -
8931: STR
8932: PUSH
8933: LD_VAR 0 7
8937: STR
8938: ST_TO_ADDR
// case type of 0 :
8939: LD_VAR 0 2
8943: PUSH
8944: LD_INT 0
8946: DOUBLE
8947: EQUAL
8948: IFTRUE 8952
8950: GO 8969
8952: POP
// Say ( unit , dialog_id ) ; 1 :
8953: LD_VAR 0 10
8957: PPUSH
8958: LD_VAR 0 13
8962: PPUSH
8963: CALL_OW 88
8967: GO 9020
8969: LD_INT 1
8971: DOUBLE
8972: EQUAL
8973: IFTRUE 8977
8975: GO 8994
8977: POP
// SayRadio ( unit , dialog_id ) ; 2 :
8978: LD_VAR 0 10
8982: PPUSH
8983: LD_VAR 0 13
8987: PPUSH
8988: CALL_OW 94
8992: GO 9020
8994: LD_INT 2
8996: DOUBLE
8997: EQUAL
8998: IFTRUE 9002
9000: GO 9019
9002: POP
// ForceSay ( unit , dialog_id ) ; end ;
9003: LD_VAR 0 10
9007: PPUSH
9008: LD_VAR 0 13
9012: PPUSH
9013: CALL_OW 91
9017: GO 9020
9019: POP
// result := unit ;
9020: LD_ADDR_VAR 0 8
9024: PUSH
9025: LD_VAR 0 10
9029: ST_TO_ADDR
// end ;
9030: LD_VAR 0 8
9034: RET
// export function IsNearbyEntrance ( unit , building , distance ) ; var i , entrance ; begin
9035: LD_INT 0
9037: PPUSH
9038: PPUSH
9039: PPUSH
// result := false ;
9040: LD_ADDR_VAR 0 4
9044: PUSH
9045: LD_INT 0
9047: ST_TO_ADDR
// if not unit or not building or IsInUnit ( unit ) then
9048: LD_VAR 0 1
9052: NOT
9053: PUSH
9054: LD_VAR 0 2
9058: NOT
9059: OR
9060: PUSH
9061: LD_VAR 0 1
9065: PPUSH
9066: CALL_OW 310
9070: OR
9071: IFFALSE 9075
// exit ;
9073: GO 9279
// if distance < 0 then
9075: LD_VAR 0 3
9079: PUSH
9080: LD_INT 0
9082: LESS
9083: IFFALSE 9093
// distance := 0 ;
9085: LD_ADDR_VAR 0 3
9089: PUSH
9090: LD_INT 0
9092: ST_TO_ADDR
// entrance := GetBuildingHexes ( GetBType ( building ) , GetX ( building ) , GetY ( building ) , GetDir ( building ) , GetNation ( building ) , 1 ) ;
9093: LD_ADDR_VAR 0 6
9097: PUSH
9098: LD_VAR 0 2
9102: PPUSH
9103: CALL_OW 266
9107: PPUSH
9108: LD_VAR 0 2
9112: PPUSH
9113: CALL_OW 250
9117: PPUSH
9118: LD_VAR 0 2
9122: PPUSH
9123: CALL_OW 251
9127: PPUSH
9128: LD_VAR 0 2
9132: PPUSH
9133: CALL_OW 254
9137: PPUSH
9138: LD_VAR 0 2
9142: PPUSH
9143: CALL_OW 248
9147: PPUSH
9148: LD_INT 1
9150: PPUSH
9151: CALL 49559 0 6
9155: ST_TO_ADDR
// if not entrance then
9156: LD_VAR 0 6
9160: NOT
9161: IFFALSE 9165
// exit ;
9163: GO 9279
// for i in entrance do
9165: LD_ADDR_VAR 0 5
9169: PUSH
9170: LD_VAR 0 6
9174: PUSH
9175: FOR_IN
9176: IFFALSE 9277
// begin if not distance then
9178: LD_VAR 0 3
9182: NOT
9183: IFFALSE 9228
// begin if IsAt ( unit , i [ 1 ] , i [ 2 ] ) then
9185: LD_VAR 0 1
9189: PPUSH
9190: LD_VAR 0 5
9194: PUSH
9195: LD_INT 1
9197: ARRAY
9198: PPUSH
9199: LD_VAR 0 5
9203: PUSH
9204: LD_INT 2
9206: ARRAY
9207: PPUSH
9208: CALL_OW 307
9212: IFFALSE 9226
// begin result := true ;
9214: LD_ADDR_VAR 0 4
9218: PUSH
9219: LD_INT 1
9221: ST_TO_ADDR
// exit ;
9222: POP
9223: POP
9224: GO 9279
// end ; end else
9226: GO 9275
// begin if GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) <= distance then
9228: LD_VAR 0 1
9232: PPUSH
9233: LD_VAR 0 5
9237: PUSH
9238: LD_INT 1
9240: ARRAY
9241: PPUSH
9242: LD_VAR 0 5
9246: PUSH
9247: LD_INT 2
9249: ARRAY
9250: PPUSH
9251: CALL_OW 297
9255: PUSH
9256: LD_VAR 0 3
9260: LESSEQUAL
9261: IFFALSE 9275
// begin result := true ;
9263: LD_ADDR_VAR 0 4
9267: PUSH
9268: LD_INT 1
9270: ST_TO_ADDR
// exit ;
9271: POP
9272: POP
9273: GO 9279
// end ; end ; end ;
9275: GO 9175
9277: POP
9278: POP
// end ;
9279: LD_VAR 0 4
9283: RET
// export function CanSpot ( unit , unit2 ) ; var i , building ; begin
9284: LD_INT 0
9286: PPUSH
9287: PPUSH
9288: PPUSH
// result := false ;
9289: LD_ADDR_VAR 0 3
9293: PUSH
9294: LD_INT 0
9296: ST_TO_ADDR
// if not unit or not unit2 or not IsOk ( unit ) or not IsOk ( unit2 ) then
9297: LD_VAR 0 1
9301: NOT
9302: PUSH
9303: LD_VAR 0 2
9307: NOT
9308: OR
9309: PUSH
9310: LD_VAR 0 1
9314: PPUSH
9315: CALL_OW 302
9319: NOT
9320: OR
9321: PUSH
9322: LD_VAR 0 2
9326: PPUSH
9327: CALL_OW 302
9331: NOT
9332: OR
9333: IFFALSE 9337
// exit ;
9335: GO 9498
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] ] ) , unit ) ) < 8 then
9337: LD_VAR 0 1
9341: PPUSH
9342: LD_INT 81
9344: PUSH
9345: LD_VAR 0 1
9349: PPUSH
9350: CALL_OW 255
9354: PUSH
9355: EMPTY
9356: LIST
9357: LIST
9358: PUSH
9359: LD_INT 3
9361: PUSH
9362: LD_INT 21
9364: PUSH
9365: LD_INT 3
9367: PUSH
9368: EMPTY
9369: LIST
9370: LIST
9371: PUSH
9372: EMPTY
9373: LIST
9374: LIST
9375: PUSH
9376: EMPTY
9377: LIST
9378: LIST
9379: PPUSH
9380: CALL_OW 69
9384: PPUSH
9385: LD_VAR 0 1
9389: PPUSH
9390: CALL_OW 74
9394: PPUSH
9395: CALL_OW 296
9399: PUSH
9400: LD_INT 8
9402: LESS
9403: IFFALSE 9407
// exit ;
9405: GO 9498
// building := IsInUnit ( unit2 ) ;
9407: LD_ADDR_VAR 0 5
9411: PUSH
9412: LD_VAR 0 2
9416: PPUSH
9417: CALL_OW 310
9421: ST_TO_ADDR
// if building then
9422: LD_VAR 0 5
9426: IFFALSE 9453
// result := IsNearbyEntrance ( unit , building , 2 ) else
9428: LD_ADDR_VAR 0 3
9432: PUSH
9433: LD_VAR 0 1
9437: PPUSH
9438: LD_VAR 0 5
9442: PPUSH
9443: LD_INT 2
9445: PPUSH
9446: CALL 9035 0 3
9450: ST_TO_ADDR
9451: GO 9498
// result := ( GetDistUnits ( unit , unit2 ) < 6 and See ( GetSide ( unit2 ) , unit ) ) ;
9453: LD_ADDR_VAR 0 3
9457: PUSH
9458: LD_VAR 0 1
9462: PPUSH
9463: LD_VAR 0 2
9467: PPUSH
9468: CALL_OW 296
9472: PUSH
9473: LD_INT 6
9475: LESS
9476: PUSH
9477: LD_VAR 0 2
9481: PPUSH
9482: CALL_OW 255
9486: PPUSH
9487: LD_VAR 0 1
9491: PPUSH
9492: CALL_OW 292
9496: AND
9497: ST_TO_ADDR
// end ;
9498: LD_VAR 0 3
9502: RET
// export function CreateNature ; var i , animal , nat_area ; begin
9503: LD_INT 0
9505: PPUSH
9506: PPUSH
9507: PPUSH
9508: PPUSH
// uc_side = 0 ;
9509: LD_ADDR_OWVAR 20
9513: PUSH
9514: LD_INT 0
9516: ST_TO_ADDR
// uc_nation = 0 ;
9517: LD_ADDR_OWVAR 21
9521: PUSH
9522: LD_INT 0
9524: ST_TO_ADDR
// nat_area := nature_area ;
9525: LD_ADDR_VAR 0 4
9529: PUSH
9530: LD_INT 24
9532: ST_TO_ADDR
// InitHc ;
9533: CALL_OW 19
// for i = 1 to 4 do
9537: LD_ADDR_VAR 0 2
9541: PUSH
9542: DOUBLE
9543: LD_INT 1
9545: DEC
9546: ST_TO_ADDR
9547: LD_INT 4
9549: PUSH
9550: FOR_TO
9551: IFFALSE 9598
// begin hc_class = 18 ;
9553: LD_ADDR_OWVAR 28
9557: PUSH
9558: LD_INT 18
9560: ST_TO_ADDR
// hc_gallery =  ;
9561: LD_ADDR_OWVAR 33
9565: PUSH
9566: LD_STRING 
9568: ST_TO_ADDR
// animal := CreateHuman ;
9569: LD_ADDR_VAR 0 3
9573: PUSH
9574: CALL_OW 44
9578: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9579: LD_VAR 0 3
9583: PPUSH
9584: LD_VAR 0 4
9588: PPUSH
9589: LD_INT 0
9591: PPUSH
9592: CALL_OW 49
// end ;
9596: GO 9550
9598: POP
9599: POP
// for i = 1 to 3 do
9600: LD_ADDR_VAR 0 2
9604: PUSH
9605: DOUBLE
9606: LD_INT 1
9608: DEC
9609: ST_TO_ADDR
9610: LD_INT 3
9612: PUSH
9613: FOR_TO
9614: IFFALSE 9708
// begin hc_class = class_apeman ;
9616: LD_ADDR_OWVAR 28
9620: PUSH
9621: LD_INT 12
9623: ST_TO_ADDR
// hc_gallery =  ;
9624: LD_ADDR_OWVAR 33
9628: PUSH
9629: LD_STRING 
9631: ST_TO_ADDR
// hc_agressivity = 0 ;
9632: LD_ADDR_OWVAR 35
9636: PUSH
9637: LD_INT 0
9639: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
9640: LD_ADDR_OWVAR 31
9644: PUSH
9645: LD_INT 1
9647: PPUSH
9648: LD_INT 3
9650: PPUSH
9651: CALL_OW 12
9655: PUSH
9656: LD_INT 1
9658: PPUSH
9659: LD_INT 3
9661: PPUSH
9662: CALL_OW 12
9666: PUSH
9667: LD_INT 0
9669: PUSH
9670: LD_INT 0
9672: PUSH
9673: EMPTY
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: ST_TO_ADDR
// animal := CreateHuman ;
9679: LD_ADDR_VAR 0 3
9683: PUSH
9684: CALL_OW 44
9688: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9689: LD_VAR 0 3
9693: PPUSH
9694: LD_VAR 0 4
9698: PPUSH
9699: LD_INT 0
9701: PPUSH
9702: CALL_OW 49
// end ;
9706: GO 9613
9708: POP
9709: POP
// for i = 1 to 3 do
9710: LD_ADDR_VAR 0 2
9714: PUSH
9715: DOUBLE
9716: LD_INT 1
9718: DEC
9719: ST_TO_ADDR
9720: LD_INT 3
9722: PUSH
9723: FOR_TO
9724: IFFALSE 9771
// begin hc_class = 13 ;
9726: LD_ADDR_OWVAR 28
9730: PUSH
9731: LD_INT 13
9733: ST_TO_ADDR
// hc_gallery =  ;
9734: LD_ADDR_OWVAR 33
9738: PUSH
9739: LD_STRING 
9741: ST_TO_ADDR
// animal := CreateHuman ;
9742: LD_ADDR_VAR 0 3
9746: PUSH
9747: CALL_OW 44
9751: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9752: LD_VAR 0 3
9756: PPUSH
9757: LD_VAR 0 4
9761: PPUSH
9762: LD_INT 0
9764: PPUSH
9765: CALL_OW 49
// end ;
9769: GO 9723
9771: POP
9772: POP
// for i = 1 to 3 do
9773: LD_ADDR_VAR 0 2
9777: PUSH
9778: DOUBLE
9779: LD_INT 1
9781: DEC
9782: ST_TO_ADDR
9783: LD_INT 3
9785: PUSH
9786: FOR_TO
9787: IFFALSE 9832
// begin hc_class = 20 ;
9789: LD_ADDR_OWVAR 28
9793: PUSH
9794: LD_INT 20
9796: ST_TO_ADDR
// hc_gallery =  ;
9797: LD_ADDR_OWVAR 33
9801: PUSH
9802: LD_STRING 
9804: ST_TO_ADDR
// animal := CreateHuman ;
9805: LD_ADDR_VAR 0 3
9809: PUSH
9810: CALL_OW 44
9814: ST_TO_ADDR
// PlaceUnitArea ( animal , lake_area , false ) ;
9815: LD_VAR 0 3
9819: PPUSH
9820: LD_INT 4
9822: PPUSH
9823: LD_INT 0
9825: PPUSH
9826: CALL_OW 49
// end ;
9830: GO 9786
9832: POP
9833: POP
// end ; end_of_file
9834: LD_VAR 0 1
9838: RET
// export function Action ; begin
9839: LD_INT 0
9841: PPUSH
// InGameOn ;
9842: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
9846: LD_EXP 14
9850: PPUSH
9851: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
9855: LD_EXP 14
9859: PPUSH
9860: LD_STRING D1-JMM-1
9862: PPUSH
9863: CALL_OW 88
// Say ( Roth , D1-Roth-1 ) ;
9867: LD_EXP 15
9871: PPUSH
9872: LD_STRING D1-Roth-1
9874: PPUSH
9875: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
9879: LD_EXP 14
9883: PPUSH
9884: LD_STRING D1-JMM-2
9886: PPUSH
9887: CALL_OW 88
// Say ( Roth , D1-Roth-2 ) ;
9891: LD_EXP 15
9895: PPUSH
9896: LD_STRING D1-Roth-2
9898: PPUSH
9899: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9903: LD_EXP 14
9907: PPUSH
9908: LD_STRING D1-JMM-3
9910: PPUSH
9911: CALL_OW 88
// Say ( Roth , D1-Roth-3 ) ;
9915: LD_EXP 15
9919: PPUSH
9920: LD_STRING D1-Roth-3
9922: PPUSH
9923: CALL_OW 88
// ComInvisible ( Roth ) ;
9927: LD_EXP 15
9931: PPUSH
9932: CALL_OW 152
// wait ( 0 0$1.3 ) ;
9936: LD_INT 46
9938: PPUSH
9939: CALL_OW 67
// Say ( JMM , D1-JMM-4 ) ;
9943: LD_EXP 14
9947: PPUSH
9948: LD_STRING D1-JMM-4
9950: PPUSH
9951: CALL_OW 88
// wait ( 0 0$0.3 ) ;
9955: LD_INT 10
9957: PPUSH
9958: CALL_OW 67
// ComTurnUnit ( Roth , JMM ) ;
9962: LD_EXP 15
9966: PPUSH
9967: LD_EXP 14
9971: PPUSH
9972: CALL_OW 119
// Say ( JMM , D1-JMM-4a ) ;
9976: LD_EXP 14
9980: PPUSH
9981: LD_STRING D1-JMM-4a
9983: PPUSH
9984: CALL_OW 88
// Say ( Roth , D1-Roth-4 ) ;
9988: LD_EXP 15
9992: PPUSH
9993: LD_STRING D1-Roth-4
9995: PPUSH
9996: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
10000: LD_EXP 14
10004: PPUSH
10005: LD_STRING D1-JMM-5
10007: PPUSH
10008: CALL_OW 88
// Say ( Roth , D1-Roth-5 ) ;
10012: LD_EXP 15
10016: PPUSH
10017: LD_STRING D1-Roth-5
10019: PPUSH
10020: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
10024: LD_EXP 14
10028: PPUSH
10029: LD_STRING D1-JMM-6
10031: PPUSH
10032: CALL_OW 88
// Say ( Roth , D1-Roth-6 ) ;
10036: LD_EXP 15
10040: PPUSH
10041: LD_STRING D1-Roth-6
10043: PPUSH
10044: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
10048: LD_EXP 14
10052: PPUSH
10053: LD_STRING D1-JMM-7
10055: PPUSH
10056: CALL_OW 88
// ComMoveXY ( Powell , GetX ( JMM ) , GetY ( JMM ) ) ;
10060: LD_EXP 16
10064: PPUSH
10065: LD_EXP 14
10069: PPUSH
10070: CALL_OW 250
10074: PPUSH
10075: LD_EXP 14
10079: PPUSH
10080: CALL_OW 251
10084: PPUSH
10085: CALL_OW 111
// Say ( Roth , D1-Roth-7 ) ;
10089: LD_EXP 15
10093: PPUSH
10094: LD_STRING D1-Roth-7
10096: PPUSH
10097: CALL_OW 88
// repeat wait ( 0 0$0.3 ) ;
10101: LD_INT 10
10103: PPUSH
10104: CALL_OW 67
// until GetDistUnits ( Powell , JMM ) < 6 ;
10108: LD_EXP 16
10112: PPUSH
10113: LD_EXP 14
10117: PPUSH
10118: CALL_OW 296
10122: PUSH
10123: LD_INT 6
10125: LESS
10126: IFFALSE 10101
// ComTurnUnit ( Powell , JMM ) ;
10128: LD_EXP 16
10132: PPUSH
10133: LD_EXP 14
10137: PPUSH
10138: CALL_OW 119
// Say ( Powell , D1-Pow-7 ) ;
10142: LD_EXP 16
10146: PPUSH
10147: LD_STRING D1-Pow-7
10149: PPUSH
10150: CALL_OW 88
// ComTurnUnit ( JMM , Powell ) ;
10154: LD_EXP 14
10158: PPUSH
10159: LD_EXP 16
10163: PPUSH
10164: CALL_OW 119
// ComTurnUnit ( Roth , Powell ) ;
10168: LD_EXP 15
10172: PPUSH
10173: LD_EXP 16
10177: PPUSH
10178: CALL_OW 119
// Say ( JMM , D1-JMM-8 ) ;
10182: LD_EXP 14
10186: PPUSH
10187: LD_STRING D1-JMM-8
10189: PPUSH
10190: CALL_OW 88
// Say ( Powell , D1-Pow-8 ) ;
10194: LD_EXP 16
10198: PPUSH
10199: LD_STRING D1-Pow-8
10201: PPUSH
10202: CALL_OW 88
// Say ( JMM , D1-JMM-9 ) ;
10206: LD_EXP 14
10210: PPUSH
10211: LD_STRING D1-JMM-9
10213: PPUSH
10214: CALL_OW 88
// ComMoveXY ( Powell , 124 , 61 ) ;
10218: LD_EXP 16
10222: PPUSH
10223: LD_INT 124
10225: PPUSH
10226: LD_INT 61
10228: PPUSH
10229: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10233: LD_INT 35
10235: PPUSH
10236: CALL_OW 67
// until GetDistUnits ( JMM , Powell ) > 6 ;
10240: LD_EXP 14
10244: PPUSH
10245: LD_EXP 16
10249: PPUSH
10250: CALL_OW 296
10254: PUSH
10255: LD_INT 6
10257: GREATER
10258: IFFALSE 10233
// SayRadio ( Powell , D1-Pow-9 ) ;
10260: LD_EXP 16
10264: PPUSH
10265: LD_STRING D1-Pow-9
10267: PPUSH
10268: CALL_OW 94
// RemoveUnit ( Powell ) ;
10272: LD_EXP 16
10276: PPUSH
10277: CALL_OW 64
// PlaceHumanInUnit ( Powell , ambar0 ) ;
10281: LD_EXP 16
10285: PPUSH
10286: LD_INT 18
10288: PPUSH
10289: CALL_OW 52
// if Joan and not Joan in selected then
10293: LD_EXP 36
10297: PUSH
10298: LD_EXP 36
10302: PUSH
10303: LD_EXP 3
10307: IN
10308: NOT
10309: AND
10310: IFFALSE 10324
// SayRadio ( Joan , D1-Joan-9 ) ;
10312: LD_EXP 36
10316: PPUSH
10317: LD_STRING D1-Joan-9
10319: PPUSH
10320: CALL_OW 94
// ComTurnUnit ( Roth , JMM ) ;
10324: LD_EXP 15
10328: PPUSH
10329: LD_EXP 14
10333: PPUSH
10334: CALL_OW 119
// ComTurnUnit ( JMM , Roth ) ;
10338: LD_EXP 14
10342: PPUSH
10343: LD_EXP 15
10347: PPUSH
10348: CALL_OW 119
// Say ( Roth , D1-Roth-9 ) ;
10352: LD_EXP 15
10356: PPUSH
10357: LD_STRING D1-Roth-9
10359: PPUSH
10360: CALL_OW 88
// Say ( JMM , D1-JMM-10 ) ;
10364: LD_EXP 14
10368: PPUSH
10369: LD_STRING D1-JMM-10
10371: PPUSH
10372: CALL_OW 88
// InGameOff ;
10376: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
10380: LD_STRING M1
10382: PPUSH
10383: CALL_OW 337
// if Difficulty < 3 then
10387: LD_OWVAR 67
10391: PUSH
10392: LD_INT 3
10394: LESS
10395: IFFALSE 10407
// ChangeSideFog ( 4 , 7 ) ;
10397: LD_INT 4
10399: PPUSH
10400: LD_INT 7
10402: PPUSH
10403: CALL_OW 343
// ToLua ( enableBioCharacter(BIO_ROTH) ) ;
10407: LD_STRING enableBioCharacter(BIO_ROTH)
10409: PPUSH
10410: CALL_OW 559
// SaveForQuickRestart ;
10414: CALL_OW 22
// SetAttitude ( 7 , 1 , att_enemy , true ) ;
10418: LD_INT 7
10420: PPUSH
10421: LD_INT 1
10423: PPUSH
10424: LD_INT 2
10426: PPUSH
10427: LD_INT 1
10429: PPUSH
10430: CALL_OW 80
// wait ( 0 0$3 ) ;
10434: LD_INT 105
10436: PPUSH
10437: CALL_OW 67
// ComMoveXY ( Roth , 124 , 18 ) ;
10441: LD_EXP 15
10445: PPUSH
10446: LD_INT 124
10448: PPUSH
10449: LD_INT 18
10451: PPUSH
10452: CALL_OW 111
// AddComInvisible ( Roth ) ;
10456: LD_EXP 15
10460: PPUSH
10461: CALL_OW 212
// wait ( 0 0$30 ) ;
10465: LD_INT 1050
10467: PPUSH
10468: CALL_OW 67
// AddComWait ( Roth , 1 1$00 ) ;
10472: LD_EXP 15
10476: PPUSH
10477: LD_INT 2100
10479: PPUSH
10480: CALL_OW 202
// AddComMoveXY ( Roth , 156 , 20 ) ;
10484: LD_EXP 15
10488: PPUSH
10489: LD_INT 156
10491: PPUSH
10492: LD_INT 20
10494: PPUSH
10495: CALL_OW 171
// AddComMoveXY ( Roth , 178 , 42 ) ;
10499: LD_EXP 15
10503: PPUSH
10504: LD_INT 178
10506: PPUSH
10507: LD_INT 42
10509: PPUSH
10510: CALL_OW 171
// AddComInvisible ( Roth ) ;
10514: LD_EXP 15
10518: PPUSH
10519: CALL_OW 212
// end ;
10523: LD_VAR 0 1
10527: RET
// every 0 0$1 do var i , tmp ;
10528: GO 10530
10530: DISABLE
10531: LD_INT 0
10533: PPUSH
10534: PPUSH
// begin tmp := selected union friends ;
10535: LD_ADDR_VAR 0 2
10539: PUSH
10540: LD_EXP 3
10544: PUSH
10545: LD_EXP 4
10549: UNION
10550: ST_TO_ADDR
// if gamma_commander = 1 then
10551: LD_EXP 10
10555: PUSH
10556: LD_INT 1
10558: EQUAL
10559: IFFALSE 10577
// tmp := tmp union Donaldson ;
10561: LD_ADDR_VAR 0 2
10565: PUSH
10566: LD_VAR 0 2
10570: PUSH
10571: LD_EXP 24
10575: UNION
10576: ST_TO_ADDR
// if gamma_commander = 2 then
10577: LD_EXP 10
10581: PUSH
10582: LD_INT 2
10584: EQUAL
10585: IFFALSE 10603
// tmp := tmp union Brown ;
10587: LD_ADDR_VAR 0 2
10591: PUSH
10592: LD_VAR 0 2
10596: PUSH
10597: LD_EXP 28
10601: UNION
10602: ST_TO_ADDR
// if not tmp then
10603: LD_VAR 0 2
10607: NOT
10608: IFFALSE 10612
// exit ;
10610: GO 10684
// repeat wait ( 0 0$1 ) ;
10612: LD_INT 35
10614: PPUSH
10615: CALL_OW 67
// for i in tmp do
10619: LD_ADDR_VAR 0 1
10623: PUSH
10624: LD_VAR 0 2
10628: PUSH
10629: FOR_IN
10630: IFFALSE 10675
// if CanSpot ( JMM , i ) then
10632: LD_EXP 14
10636: PPUSH
10637: LD_VAR 0 1
10641: PPUSH
10642: CALL 9284 0 2
10646: IFFALSE 10673
// begin tmp := tmp diff i ;
10648: LD_ADDR_VAR 0 2
10652: PUSH
10653: LD_VAR 0 2
10657: PUSH
10658: LD_VAR 0 1
10662: DIFF
10663: ST_TO_ADDR
// Spot ( i ) ;
10664: LD_VAR 0 1
10668: PPUSH
10669: CALL 10687 0 1
// end ;
10673: GO 10629
10675: POP
10676: POP
// until not tmp ;
10677: LD_VAR 0 2
10681: NOT
10682: IFFALSE 10612
// end ;
10684: PPOPN 2
10686: END
// export function Spot ( unit ) ; var building , side , joined ; begin
10687: LD_INT 0
10689: PPUSH
10690: PPUSH
10691: PPUSH
10692: PPUSH
// if not unit or GetSide ( unit ) <> 4 or IsSleeping ( unit ) or not IsOk ( unit ) then
10693: LD_VAR 0 1
10697: NOT
10698: PUSH
10699: LD_VAR 0 1
10703: PPUSH
10704: CALL_OW 255
10708: PUSH
10709: LD_INT 4
10711: NONEQUAL
10712: OR
10713: PUSH
10714: LD_VAR 0 1
10718: PPUSH
10719: CALL_OW 555
10723: OR
10724: PUSH
10725: LD_VAR 0 1
10729: PPUSH
10730: CALL_OW 302
10734: NOT
10735: OR
10736: IFFALSE 10740
// exit ;
10738: GO 12622
// InGameOn ;
10740: CALL_OW 8
// side := 7 ;
10744: LD_ADDR_VAR 0 4
10748: PUSH
10749: LD_INT 7
10751: ST_TO_ADDR
// joined := false ;
10752: LD_ADDR_VAR 0 5
10756: PUSH
10757: LD_INT 0
10759: ST_TO_ADDR
// building := IsInUnit ( unit ) ;
10760: LD_ADDR_VAR 0 3
10764: PUSH
10765: LD_VAR 0 1
10769: PPUSH
10770: CALL_OW 310
10774: ST_TO_ADDR
// if building then
10775: LD_VAR 0 3
10779: IFFALSE 10838
// begin SetSide ( JMM , GetSide ( unit ) ) ;
10781: LD_EXP 14
10785: PPUSH
10786: LD_VAR 0 1
10790: PPUSH
10791: CALL_OW 255
10795: PPUSH
10796: CALL_OW 235
// ComEnterUnit ( JMM , building ) ;
10800: LD_EXP 14
10804: PPUSH
10805: LD_VAR 0 3
10809: PPUSH
10810: CALL_OW 120
// repeat wait ( 3 ) ;
10814: LD_INT 3
10816: PPUSH
10817: CALL_OW 67
// until IsInUnit ( JMM ) ;
10821: LD_EXP 14
10825: PPUSH
10826: CALL_OW 310
10830: IFFALSE 10814
// DialogueOn ;
10832: CALL_OW 6
// end else
10836: GO 10870
// begin ComTurnUnit ( JMM , unit ) ;
10838: LD_EXP 14
10842: PPUSH
10843: LD_VAR 0 1
10847: PPUSH
10848: CALL_OW 119
// ComTurnUnit ( unit , JMM ) ;
10852: LD_VAR 0 1
10856: PPUSH
10857: LD_EXP 14
10861: PPUSH
10862: CALL_OW 119
// DialogueOn ;
10866: CALL_OW 6
// end ; if unit = Joan then
10870: LD_VAR 0 1
10874: PUSH
10875: LD_EXP 36
10879: EQUAL
10880: IFFALSE 10990
// begin joined := true ;
10882: LD_ADDR_VAR 0 5
10886: PUSH
10887: LD_INT 1
10889: ST_TO_ADDR
// if Joan in selected then
10890: LD_EXP 36
10894: PUSH
10895: LD_EXP 3
10899: IN
10900: IFFALSE 10928
// begin Say ( Joan , D3-Joan-Joan-1 ) ;
10902: LD_EXP 36
10906: PPUSH
10907: LD_STRING D3-Joan-Joan-1
10909: PPUSH
10910: CALL_OW 88
// Say ( JMM , D3-Joan-JMM-1 ) ;
10914: LD_EXP 14
10918: PPUSH
10919: LD_STRING D3-Joan-JMM-1
10921: PPUSH
10922: CALL_OW 88
// end else
10926: GO 10988
// begin Say ( Joan , D4-Joan-Joan-1 ) ;
10928: LD_EXP 36
10932: PPUSH
10933: LD_STRING D4-Joan-Joan-1
10935: PPUSH
10936: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-1 ) ;
10940: LD_EXP 14
10944: PPUSH
10945: LD_STRING D4-Joan-JMM-1
10947: PPUSH
10948: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-2 ) ;
10952: LD_EXP 36
10956: PPUSH
10957: LD_STRING D4-Joan-Joan-2
10959: PPUSH
10960: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-2 ) ;
10964: LD_EXP 14
10968: PPUSH
10969: LD_STRING D4-Joan-JMM-2
10971: PPUSH
10972: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-3 ) ;
10976: LD_EXP 36
10980: PPUSH
10981: LD_STRING D4-Joan-Joan-3
10983: PPUSH
10984: CALL_OW 88
// end ; end else
10988: GO 12430
// if unit = Lisa then
10990: LD_VAR 0 1
10994: PUSH
10995: LD_EXP 23
10999: EQUAL
11000: IFFALSE 11192
// begin if Lisa in selected then
11002: LD_EXP 23
11006: PUSH
11007: LD_EXP 3
11011: IN
11012: IFFALSE 11125
// begin if GetSide ( Joan ) = 7 then
11014: LD_EXP 36
11018: PPUSH
11019: CALL_OW 255
11023: PUSH
11024: LD_INT 7
11026: EQUAL
11027: IFFALSE 11091
// begin Say ( Lisa , D3-LisaJ-Lisa-1 ) ;
11029: LD_EXP 23
11033: PPUSH
11034: LD_STRING D3-LisaJ-Lisa-1
11036: PPUSH
11037: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-1 ) ;
11041: LD_EXP 14
11045: PPUSH
11046: LD_STRING D3-LisaJ-JMM-1
11048: PPUSH
11049: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-2 ) ;
11053: LD_EXP 23
11057: PPUSH
11058: LD_STRING D3-LisaJ-Lisa-2
11060: PPUSH
11061: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-2 ) ;
11065: LD_EXP 14
11069: PPUSH
11070: LD_STRING D3-LisaJ-JMM-2
11072: PPUSH
11073: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-3 ) ;
11077: LD_EXP 23
11081: PPUSH
11082: LD_STRING D3-LisaJ-Lisa-3
11084: PPUSH
11085: CALL_OW 88
// end else
11089: GO 11123
// begin Say ( Lisa , D3-LisaL-Lisa-1 ) ;
11091: LD_EXP 23
11095: PPUSH
11096: LD_STRING D3-LisaL-Lisa-1
11098: PPUSH
11099: CALL_OW 88
// Say ( JMM , D3-LisaL-JMM-1 ) ;
11103: LD_EXP 14
11107: PPUSH
11108: LD_STRING D3-LisaL-JMM-1
11110: PPUSH
11111: CALL_OW 88
// joined := true ;
11115: LD_ADDR_VAR 0 5
11119: PUSH
11120: LD_INT 1
11122: ST_TO_ADDR
// end ; end else
11123: GO 11190
// begin if GetSide ( Joan ) = 7 then
11125: LD_EXP 36
11129: PPUSH
11130: CALL_OW 255
11134: PUSH
11135: LD_INT 7
11137: EQUAL
11138: IFFALSE 11178
// begin Say ( Lisa , D4-LisaJ-Lisa-1 ) ;
11140: LD_EXP 23
11144: PPUSH
11145: LD_STRING D4-LisaJ-Lisa-1
11147: PPUSH
11148: CALL_OW 88
// Say ( JMM , D4-LisaJ-JMM-1 ) ;
11152: LD_EXP 14
11156: PPUSH
11157: LD_STRING D4-LisaJ-JMM-1
11159: PPUSH
11160: CALL_OW 88
// Say ( Lisa , D4-LisaJ-Lisa-2 ) ;
11164: LD_EXP 23
11168: PPUSH
11169: LD_STRING D4-LisaJ-Lisa-2
11171: PPUSH
11172: CALL_OW 88
// end else
11176: GO 11190
// begin Say ( Lisa , D4-LisaL-Lisa-1 ) ;
11178: LD_EXP 23
11182: PPUSH
11183: LD_STRING D4-LisaL-Lisa-1
11185: PPUSH
11186: CALL_OW 88
// end ; end ; end else
11190: GO 12430
// if unit = Frank then
11192: LD_VAR 0 1
11196: PUSH
11197: LD_EXP 33
11201: EQUAL
11202: IFFALSE 11342
// begin joined := true ;
11204: LD_ADDR_VAR 0 5
11208: PUSH
11209: LD_INT 1
11211: ST_TO_ADDR
// if Frank in selected then
11212: LD_EXP 33
11216: PUSH
11217: LD_EXP 3
11221: IN
11222: IFFALSE 11292
// begin Say ( Frank , D3-Frank-Frank-1 ) ;
11224: LD_EXP 33
11228: PPUSH
11229: LD_STRING D3-Frank-Frank-1
11231: PPUSH
11232: CALL_OW 88
// Say ( JMM , D3-Frank-JMM-1 ) ;
11236: LD_EXP 14
11240: PPUSH
11241: LD_STRING D3-Frank-JMM-1
11243: PPUSH
11244: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-2 ) ;
11248: LD_EXP 33
11252: PPUSH
11253: LD_STRING D3-Frank-Frank-2
11255: PPUSH
11256: CALL_OW 88
// if reached_lab then
11260: LD_EXP 5
11264: IFFALSE 11290
// begin Say ( JMM , D3-Frank-JMM-2 ) ;
11266: LD_EXP 14
11270: PPUSH
11271: LD_STRING D3-Frank-JMM-2
11273: PPUSH
11274: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-3 ) ;
11278: LD_EXP 33
11282: PPUSH
11283: LD_STRING D3-Frank-Frank-3
11285: PPUSH
11286: CALL_OW 88
// end ; end else
11290: GO 11340
// begin Say ( Frank , D4-Frank-Frank-1 ) ;
11292: LD_EXP 33
11296: PPUSH
11297: LD_STRING D4-Frank-Frank-1
11299: PPUSH
11300: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-1 ) ;
11304: LD_EXP 14
11308: PPUSH
11309: LD_STRING D4-Frank-JMM-1
11311: PPUSH
11312: CALL_OW 88
// Say ( Frank , D4-Frank-Frank-2 ) ;
11316: LD_EXP 33
11320: PPUSH
11321: LD_STRING D4-Frank-Frank-2
11323: PPUSH
11324: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-2 ) ;
11328: LD_EXP 14
11332: PPUSH
11333: LD_STRING D4-Frank-JMM-2
11335: PPUSH
11336: CALL_OW 88
// end ; end else
11340: GO 12430
// if unit = Brown then
11342: LD_VAR 0 1
11346: PUSH
11347: LD_EXP 28
11351: EQUAL
11352: IFFALSE 11448
// begin if Brown in selected or gamma_commander = 2 then
11354: LD_EXP 28
11358: PUSH
11359: LD_EXP 3
11363: IN
11364: PUSH
11365: LD_EXP 10
11369: PUSH
11370: LD_INT 2
11372: EQUAL
11373: OR
11374: IFFALSE 11410
// begin Say ( Brown , D3-Soldier1-Sol1-1 ) ;
11376: LD_EXP 28
11380: PPUSH
11381: LD_STRING D3-Soldier1-Sol1-1
11383: PPUSH
11384: CALL_OW 88
// Say ( JMM , D6-JMM-Brown-1 ) ;
11388: LD_EXP 14
11392: PPUSH
11393: LD_STRING D6-JMM-Brown-1
11395: PPUSH
11396: CALL_OW 88
// joined := true ;
11400: LD_ADDR_VAR 0 5
11404: PUSH
11405: LD_INT 1
11407: ST_TO_ADDR
// end else
11408: GO 11446
// begin Say ( Brown , D4-Soldier2-Sol1-1 ) ;
11410: LD_EXP 28
11414: PPUSH
11415: LD_STRING D4-Soldier2-Sol1-1
11417: PPUSH
11418: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11422: LD_EXP 14
11426: PPUSH
11427: LD_STRING D4-Soldier1-JMM-1
11429: PPUSH
11430: CALL_OW 88
// Say ( Brown , D4-Soldier2-Sol1-2 ) ;
11434: LD_EXP 28
11438: PPUSH
11439: LD_STRING D4-Soldier2-Sol1-2
11441: PPUSH
11442: CALL_OW 88
// end ; end else
11446: GO 12430
// if unit = Donaldson then
11448: LD_VAR 0 1
11452: PUSH
11453: LD_EXP 24
11457: EQUAL
11458: IFFALSE 11554
// begin if Donaldson in selected or gamma_commander = 1 then
11460: LD_EXP 24
11464: PUSH
11465: LD_EXP 3
11469: IN
11470: PUSH
11471: LD_EXP 10
11475: PUSH
11476: LD_INT 1
11478: EQUAL
11479: OR
11480: IFFALSE 11516
// begin Say ( Donaldson , D3-Soldier2-FSol2-1 ) ;
11482: LD_EXP 24
11486: PPUSH
11487: LD_STRING D3-Soldier2-FSol2-1
11489: PPUSH
11490: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11494: LD_EXP 14
11498: PPUSH
11499: LD_STRING D3-Soldier2-JMM-1
11501: PPUSH
11502: CALL_OW 88
// joined := true ;
11506: LD_ADDR_VAR 0 5
11510: PUSH
11511: LD_INT 1
11513: ST_TO_ADDR
// end else
11514: GO 11552
// begin Say ( Donaldson , D4-Soldier1-FSol1-1 ) ;
11516: LD_EXP 24
11520: PPUSH
11521: LD_STRING D4-Soldier1-FSol1-1
11523: PPUSH
11524: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11528: LD_EXP 14
11532: PPUSH
11533: LD_STRING D4-Soldier1-JMM-1
11535: PPUSH
11536: CALL_OW 88
// Say ( Donaldson , D4-Soldier1-FSol1-2 ) ;
11540: LD_EXP 24
11544: PPUSH
11545: LD_STRING D4-Soldier1-FSol1-2
11547: PPUSH
11548: CALL_OW 88
// end ; end else
11552: GO 12430
// if unit = Cyrus then
11554: LD_VAR 0 1
11558: PUSH
11559: LD_EXP 26
11563: EQUAL
11564: IFFALSE 11638
// begin if Cyrus in selected then
11566: LD_EXP 26
11570: PUSH
11571: LD_EXP 3
11575: IN
11576: IFFALSE 11612
// begin Say ( Cyrus , D3-Cyrus-Cyrus-1 ) ;
11578: LD_EXP 26
11582: PPUSH
11583: LD_STRING D3-Cyrus-Cyrus-1
11585: PPUSH
11586: CALL_OW 88
// Say ( JMM , D3-Cyrus-JMM-1 ) ;
11590: LD_EXP 14
11594: PPUSH
11595: LD_STRING D3-Cyrus-JMM-1
11597: PPUSH
11598: CALL_OW 88
// joined := true ;
11602: LD_ADDR_VAR 0 5
11606: PUSH
11607: LD_INT 1
11609: ST_TO_ADDR
// end else
11610: GO 11636
// begin Say ( Cyrus , D4-Cyrus-Cyrus-1 ) ;
11612: LD_EXP 26
11616: PPUSH
11617: LD_STRING D4-Cyrus-Cyrus-1
11619: PPUSH
11620: CALL_OW 88
// Say ( JMM , D4-Cyrus-JMM-1 ) ;
11624: LD_EXP 14
11628: PPUSH
11629: LD_STRING D4-Cyrus-JMM-1
11631: PPUSH
11632: CALL_OW 88
// end ; end else
11636: GO 12430
// if unit = Bobby then
11638: LD_VAR 0 1
11642: PUSH
11643: LD_EXP 25
11647: EQUAL
11648: IFFALSE 11734
// begin if Bobby in selected then
11650: LD_EXP 25
11654: PUSH
11655: LD_EXP 3
11659: IN
11660: IFFALSE 11696
// begin Say ( Bobby , D3-Bobby-Bobby-1 ) ;
11662: LD_EXP 25
11666: PPUSH
11667: LD_STRING D3-Bobby-Bobby-1
11669: PPUSH
11670: CALL_OW 88
// Say ( JMM , D3-Bobby-JMM-1 ) ;
11674: LD_EXP 14
11678: PPUSH
11679: LD_STRING D3-Bobby-JMM-1
11681: PPUSH
11682: CALL_OW 88
// joined := true ;
11686: LD_ADDR_VAR 0 5
11690: PUSH
11691: LD_INT 1
11693: ST_TO_ADDR
// end else
11694: GO 11732
// begin Say ( Bobby , D4-Bobby-Bobby-1 ) ;
11696: LD_EXP 25
11700: PPUSH
11701: LD_STRING D4-Bobby-Bobby-1
11703: PPUSH
11704: CALL_OW 88
// Say ( JMM , D4-Bobby-JMM-1 ) ;
11708: LD_EXP 14
11712: PPUSH
11713: LD_STRING D4-Bobby-JMM-1
11715: PPUSH
11716: CALL_OW 88
// Say ( Bobby , D4-Bobby-Bobby-2 ) ;
11720: LD_EXP 25
11724: PPUSH
11725: LD_STRING D4-Bobby-Bobby-2
11727: PPUSH
11728: CALL_OW 88
// end ; end else
11732: GO 12430
// if unit = Cornel then
11734: LD_VAR 0 1
11738: PUSH
11739: LD_EXP 31
11743: EQUAL
11744: IFFALSE 11842
// begin if Cornel in selected then
11746: LD_EXP 31
11750: PUSH
11751: LD_EXP 3
11755: IN
11756: IFFALSE 11804
// begin Say ( Cornel , D3-Mark-Corn-1 ) ;
11758: LD_EXP 31
11762: PPUSH
11763: LD_STRING D3-Mark-Corn-1
11765: PPUSH
11766: CALL_OW 88
// Say ( JMM , D3-Mark-JMM-1 ) ;
11770: LD_EXP 14
11774: PPUSH
11775: LD_STRING D3-Mark-JMM-1
11777: PPUSH
11778: CALL_OW 88
// Say ( Cornel , D3-Mark-Corn-2 ) ;
11782: LD_EXP 31
11786: PPUSH
11787: LD_STRING D3-Mark-Corn-2
11789: PPUSH
11790: CALL_OW 88
// joined := true ;
11794: LD_ADDR_VAR 0 5
11798: PUSH
11799: LD_INT 1
11801: ST_TO_ADDR
// end else
11802: GO 11840
// begin Say ( Cornel , D4-Mark-Corn-1 ) ;
11804: LD_EXP 31
11808: PPUSH
11809: LD_STRING D4-Mark-Corn-1
11811: PPUSH
11812: CALL_OW 88
// Say ( JMM , D4-Mark-JMM-1 ) ;
11816: LD_EXP 14
11820: PPUSH
11821: LD_STRING D4-Mark-JMM-1
11823: PPUSH
11824: CALL_OW 88
// Say ( Cornel , D4-Mark-Corn-2 ) ;
11828: LD_EXP 31
11832: PPUSH
11833: LD_STRING D4-Mark-Corn-2
11835: PPUSH
11836: CALL_OW 88
// end ; end else
11840: GO 12430
// if unit = Gary then
11842: LD_VAR 0 1
11846: PUSH
11847: LD_EXP 32
11851: EQUAL
11852: IFFALSE 11936
// begin if Gary in selected then
11854: LD_EXP 32
11858: PUSH
11859: LD_EXP 3
11863: IN
11864: IFFALSE 11900
// begin Say ( Gary , D3-Gary-Gary-1 ) ;
11866: LD_EXP 32
11870: PPUSH
11871: LD_STRING D3-Gary-Gary-1
11873: PPUSH
11874: CALL_OW 88
// Say ( JMM , D3-Gary-JMM-1 ) ;
11878: LD_EXP 14
11882: PPUSH
11883: LD_STRING D3-Gary-JMM-1
11885: PPUSH
11886: CALL_OW 88
// joined := true ;
11890: LD_ADDR_VAR 0 5
11894: PUSH
11895: LD_INT 1
11897: ST_TO_ADDR
// end else
11898: GO 11934
// begin Say ( Gary , D4-Gary-Gary-1 ) ;
11900: LD_EXP 32
11904: PPUSH
11905: LD_STRING D4-Gary-Gary-1
11907: PPUSH
11908: CALL_OW 88
// SetSide ( Gary , 1 ) ;
11912: LD_EXP 32
11916: PPUSH
11917: LD_INT 1
11919: PPUSH
11920: CALL_OW 235
// DialogueOff ;
11924: CALL_OW 7
// InGameOff ;
11928: CALL_OW 9
// exit ;
11932: GO 12622
// end ; end else
11934: GO 12430
// if unit = Kikuchi then
11936: LD_VAR 0 1
11940: PUSH
11941: LD_EXP 34
11945: EQUAL
11946: IFFALSE 12030
// begin if Kikuchi in selected then
11948: LD_EXP 34
11952: PUSH
11953: LD_EXP 3
11957: IN
11958: IFFALSE 11994
// begin Say ( Kikuchi , D3-Yamako-Yam-1 ) ;
11960: LD_EXP 34
11964: PPUSH
11965: LD_STRING D3-Yamako-Yam-1
11967: PPUSH
11968: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11972: LD_EXP 14
11976: PPUSH
11977: LD_STRING D3-Soldier2-JMM-1
11979: PPUSH
11980: CALL_OW 88
// joined := true ;
11984: LD_ADDR_VAR 0 5
11988: PUSH
11989: LD_INT 1
11991: ST_TO_ADDR
// end else
11992: GO 12028
// begin Say ( Kikuchi , D4-Yamako-Yam-1 ) ;
11994: LD_EXP 34
11998: PPUSH
11999: LD_STRING D4-Yamako-Yam-1
12001: PPUSH
12002: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
12006: LD_EXP 34
12010: PPUSH
12011: LD_INT 1
12013: PPUSH
12014: CALL_OW 235
// DialogueOff ;
12018: CALL_OW 7
// InGameOff ;
12022: CALL_OW 9
// exit ;
12026: GO 12622
// end ; end else
12028: GO 12430
// if unit = Gladstone then
12030: LD_VAR 0 1
12034: PUSH
12035: LD_EXP 29
12039: EQUAL
12040: IFFALSE 12114
// begin if Gladstone in selected then
12042: LD_EXP 29
12046: PUSH
12047: LD_EXP 3
12051: IN
12052: IFFALSE 12088
// begin joined := true ;
12054: LD_ADDR_VAR 0 5
12058: PUSH
12059: LD_INT 1
12061: ST_TO_ADDR
// Say ( JMM , D3-Tim-JMM-1 ) ;
12062: LD_EXP 14
12066: PPUSH
12067: LD_STRING D3-Tim-JMM-1
12069: PPUSH
12070: CALL_OW 88
// Say ( Gladstone , D3-Tim-Glad-1 ) ;
12074: LD_EXP 29
12078: PPUSH
12079: LD_STRING D3-Tim-Glad-1
12081: PPUSH
12082: CALL_OW 88
// end else
12086: GO 12112
// begin Say ( JMM , D4-Tim-JMM-1 ) ;
12088: LD_EXP 14
12092: PPUSH
12093: LD_STRING D4-Tim-JMM-1
12095: PPUSH
12096: CALL_OW 88
// Say ( Gladstone , D4-Tim-Glad-1 ) ;
12100: LD_EXP 29
12104: PPUSH
12105: LD_STRING D4-Tim-Glad-1
12107: PPUSH
12108: CALL_OW 88
// end ; end else
12112: GO 12430
// if unit = Denis then
12114: LD_VAR 0 1
12118: PUSH
12119: LD_EXP 27
12123: EQUAL
12124: IFFALSE 12160
// begin joined := true ;
12126: LD_ADDR_VAR 0 5
12130: PUSH
12131: LD_INT 1
12133: ST_TO_ADDR
// Say ( Denis , D3-Denis-Den-1 ) ;
12134: LD_EXP 27
12138: PPUSH
12139: LD_STRING D3-Denis-Den-1
12141: PPUSH
12142: CALL_OW 88
// Say ( JMM , D3-Denis-JMM-1 ) ;
12146: LD_EXP 14
12150: PPUSH
12151: LD_STRING D3-Denis-JMM-1
12153: PPUSH
12154: CALL_OW 88
// end else
12158: GO 12430
// if unit = Simms then
12160: LD_VAR 0 1
12164: PUSH
12165: LD_EXP 35
12169: EQUAL
12170: IFFALSE 12206
// begin joined := true ;
12172: LD_ADDR_VAR 0 5
12176: PUSH
12177: LD_INT 1
12179: ST_TO_ADDR
// Say ( Simms , D3-Simms-Sim-1 ) ;
12180: LD_EXP 35
12184: PPUSH
12185: LD_STRING D3-Simms-Sim-1
12187: PPUSH
12188: CALL_OW 88
// Say ( JMM , D3-Simms-JMM-1 ) ;
12192: LD_EXP 14
12196: PPUSH
12197: LD_STRING D3-Simms-JMM-1
12199: PPUSH
12200: CALL_OW 88
// end else
12204: GO 12430
// if unit = DeltaDoctor then
12206: LD_VAR 0 1
12210: PUSH
12211: LD_EXP 37
12215: EQUAL
12216: IFFALSE 12252
// begin joined := true ;
12218: LD_ADDR_VAR 0 5
12222: PUSH
12223: LD_INT 1
12225: ST_TO_ADDR
// Say ( DeltaDoctor , D3-Soldier1-Sol1-1 ) ;
12226: LD_EXP 37
12230: PPUSH
12231: LD_STRING D3-Soldier1-Sol1-1
12233: PPUSH
12234: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
12238: LD_EXP 14
12242: PPUSH
12243: LD_STRING D3-Soldier1-JMM-1
12245: PPUSH
12246: CALL_OW 88
// end else
12250: GO 12430
// begin joined := unit in selected ;
12252: LD_ADDR_VAR 0 5
12256: PUSH
12257: LD_VAR 0 1
12261: PUSH
12262: LD_EXP 3
12266: IN
12267: ST_TO_ADDR
// if joined then
12268: LD_VAR 0 5
12272: IFFALSE 12341
// begin if GetSex ( unit ) = sex_male then
12274: LD_VAR 0 1
12278: PPUSH
12279: CALL_OW 258
12283: PUSH
12284: LD_INT 1
12286: EQUAL
12287: IFFALSE 12315
// begin Say ( unit , D3-Soldier1-Sol1-1 ) ;
12289: LD_VAR 0 1
12293: PPUSH
12294: LD_STRING D3-Soldier1-Sol1-1
12296: PPUSH
12297: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
12301: LD_EXP 14
12305: PPUSH
12306: LD_STRING D3-Soldier1-JMM-1
12308: PPUSH
12309: CALL_OW 88
// end else
12313: GO 12339
// begin Say ( unit , D3-Soldier2-FSol2-1 ) ;
12315: LD_VAR 0 1
12319: PPUSH
12320: LD_STRING D3-Soldier2-FSol2-1
12322: PPUSH
12323: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
12327: LD_EXP 14
12331: PPUSH
12332: LD_STRING D3-Soldier2-JMM-1
12334: PPUSH
12335: CALL_OW 88
// end ; end else
12339: GO 12430
// begin if GetSex ( unit ) = sex_male then
12341: LD_VAR 0 1
12345: PPUSH
12346: CALL_OW 258
12350: PUSH
12351: LD_INT 1
12353: EQUAL
12354: IFFALSE 12394
// begin Say ( unit , D4-Soldier2-Sol1-1 ) ;
12356: LD_VAR 0 1
12360: PPUSH
12361: LD_STRING D4-Soldier2-Sol1-1
12363: PPUSH
12364: CALL_OW 88
// Say ( JMM , D4-Soldier2-JMM-1 ) ;
12368: LD_EXP 14
12372: PPUSH
12373: LD_STRING D4-Soldier2-JMM-1
12375: PPUSH
12376: CALL_OW 88
// Say ( unit , D4-Soldier2-Sol2-1 ) ;
12380: LD_VAR 0 1
12384: PPUSH
12385: LD_STRING D4-Soldier2-Sol2-1
12387: PPUSH
12388: CALL_OW 88
// end else
12392: GO 12430
// begin Say ( unit , D4-Soldier1-FSol1-1 ) ;
12394: LD_VAR 0 1
12398: PPUSH
12399: LD_STRING D4-Soldier1-FSol1-1
12401: PPUSH
12402: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
12406: LD_EXP 14
12410: PPUSH
12411: LD_STRING D4-Soldier1-JMM-1
12413: PPUSH
12414: CALL_OW 88
// Say ( unit , D4-Soldier1-FSol1-2 ) ;
12418: LD_VAR 0 1
12422: PPUSH
12423: LD_STRING D4-Soldier1-FSol1-2
12425: PPUSH
12426: CALL_OW 88
// end ; end ; end ; DialogueOff ;
12430: CALL_OW 7
// InGameOff ;
12434: CALL_OW 9
// if building then
12438: LD_VAR 0 3
12442: IFFALSE 12543
// begin SetSide ( JMM , side ) ;
12444: LD_EXP 14
12448: PPUSH
12449: LD_VAR 0 4
12453: PPUSH
12454: CALL_OW 235
// ComExitBuilding ( JMM ) ;
12458: LD_EXP 14
12462: PPUSH
12463: CALL_OW 122
// if joined then
12467: LD_VAR 0 5
12471: IFFALSE 12510
// begin SetSide ( unit , side ) ;
12473: LD_VAR 0 1
12477: PPUSH
12478: LD_VAR 0 4
12482: PPUSH
12483: CALL_OW 235
// SetSide ( building , 1 ) ;
12487: LD_VAR 0 3
12491: PPUSH
12492: LD_INT 1
12494: PPUSH
12495: CALL_OW 235
// ComExitBuilding ( unit ) ;
12499: LD_VAR 0 1
12503: PPUSH
12504: CALL_OW 122
// end else
12508: GO 12541
// begin wait ( 0 0$10 ) ;
12510: LD_INT 350
12512: PPUSH
12513: CALL_OW 67
// SetSide ( unit , 1 ) ;
12517: LD_VAR 0 1
12521: PPUSH
12522: LD_INT 1
12524: PPUSH
12525: CALL_OW 235
// SetSide ( building , 1 ) ;
12529: LD_VAR 0 3
12533: PPUSH
12534: LD_INT 1
12536: PPUSH
12537: CALL_OW 235
// end ; end else
12541: GO 12622
// begin ComStop ( [ JMM , unit ] ) ;
12543: LD_EXP 14
12547: PUSH
12548: LD_VAR 0 1
12552: PUSH
12553: EMPTY
12554: LIST
12555: LIST
12556: PPUSH
12557: CALL_OW 141
// if joined then
12561: LD_VAR 0 5
12565: IFFALSE 12583
// SetSide ( unit , side ) else
12567: LD_VAR 0 1
12571: PPUSH
12572: LD_VAR 0 4
12576: PPUSH
12577: CALL_OW 235
12581: GO 12622
// begin repeat wait ( 0 0$1 ) ;
12583: LD_INT 35
12585: PPUSH
12586: CALL_OW 67
// until GetDistUnits ( JMM , unit ) > 11 ;
12590: LD_EXP 14
12594: PPUSH
12595: LD_VAR 0 1
12599: PPUSH
12600: CALL_OW 296
12604: PUSH
12605: LD_INT 11
12607: GREATER
12608: IFFALSE 12583
// SetSide ( unit , 1 ) ;
12610: LD_VAR 0 1
12614: PPUSH
12615: LD_INT 1
12617: PPUSH
12618: CALL_OW 235
// end ; end ; end ;
12622: LD_VAR 0 2
12626: RET
// every 0 0$1 trigger GetDistUnits ( JMM , Mike ) < 6 and See ( 7 , Mike ) do
12627: LD_EXP 14
12631: PPUSH
12632: LD_EXP 38
12636: PPUSH
12637: CALL_OW 296
12641: PUSH
12642: LD_INT 6
12644: LESS
12645: PUSH
12646: LD_INT 7
12648: PPUSH
12649: LD_EXP 38
12653: PPUSH
12654: CALL_OW 292
12658: AND
12659: IFFALSE 12717
12661: GO 12663
12663: DISABLE
// begin DialogueOn ;
12664: CALL_OW 6
// CenterNowOnUnits ( Mike ) ;
12668: LD_EXP 38
12672: PPUSH
12673: CALL_OW 87
// Say ( JMM , D6-JMM-Mike-1 ) ;
12677: LD_EXP 14
12681: PPUSH
12682: LD_STRING D6-JMM-Mike-1
12684: PPUSH
12685: CALL_OW 88
// Say ( Mike , D6-Mike-1 ) ;
12689: LD_EXP 38
12693: PPUSH
12694: LD_STRING D6-Mike-1
12696: PPUSH
12697: CALL_OW 88
// SetSide ( Mike , 7 ) ;
12701: LD_EXP 38
12705: PPUSH
12706: LD_INT 7
12708: PPUSH
12709: CALL_OW 235
// DialogueOff ;
12713: CALL_OW 7
// end ;
12717: END
// every 0 0$01 trigger IsInUnit ( JMM ) = amlab do
12718: LD_EXP 14
12722: PPUSH
12723: CALL_OW 310
12727: PUSH
12728: LD_INT 47
12730: EQUAL
12731: IFFALSE 12799
12733: GO 12735
12735: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
12736: LD_STRING M1a
12738: PPUSH
12739: CALL_OW 337
// SetTech ( tech_Soporific , 7 , state_researched ) ;
12743: LD_INT 13
12745: PPUSH
12746: LD_INT 7
12748: PPUSH
12749: LD_INT 2
12751: PPUSH
12752: CALL_OW 322
// SetTech ( tech_SpacAnom , 7 , state_researched ) ;
12756: LD_INT 29
12758: PPUSH
12759: LD_INT 7
12761: PPUSH
12762: LD_INT 2
12764: PPUSH
12765: CALL_OW 322
// SetClass ( JMM , class_bazooker ) ;
12769: LD_EXP 14
12773: PPUSH
12774: LD_INT 9
12776: PPUSH
12777: CALL_OW 336
// can_escape := true ;
12781: LD_ADDR_EXP 6
12785: PUSH
12786: LD_INT 1
12788: ST_TO_ADDR
// SetAreaMapShow ( escape_area , 1 ) ;
12789: LD_INT 19
12791: PPUSH
12792: LD_INT 1
12794: PPUSH
12795: CALL_OW 424
// end ;
12799: END
// every 0 0$1 trigger GetLives ( Powell ) < 999 do
12800: LD_EXP 16
12804: PPUSH
12805: CALL_OW 256
12809: PUSH
12810: LD_INT 999
12812: LESS
12813: IFFALSE 12864
12815: GO 12817
12817: DISABLE
// begin enable ;
12818: ENABLE
// if HexInfo ( 25 , 48 ) = Powell then
12819: LD_INT 25
12821: PPUSH
12822: LD_INT 48
12824: PPUSH
12825: CALL_OW 428
12829: PUSH
12830: LD_EXP 16
12834: EQUAL
12835: IFFALSE 12849
// begin RemoveUnit ( Powell ) ;
12837: LD_EXP 16
12841: PPUSH
12842: CALL_OW 64
// disable ;
12846: DISABLE
// end else
12847: GO 12864
// ComMoveXY ( Powell , 25 , 48 ) ;
12849: LD_EXP 16
12853: PPUSH
12854: LD_INT 25
12856: PPUSH
12857: LD_INT 48
12859: PPUSH
12860: CALL_OW 111
// end ;
12864: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do var i ;
12865: LD_INT 22
12867: PUSH
12868: LD_INT 4
12870: PUSH
12871: EMPTY
12872: LIST
12873: LIST
12874: PUSH
12875: LD_INT 21
12877: PUSH
12878: LD_INT 1
12880: PUSH
12881: EMPTY
12882: LIST
12883: LIST
12884: PUSH
12885: LD_INT 3
12887: PUSH
12888: LD_INT 24
12890: PUSH
12891: LD_INT 990
12893: PUSH
12894: EMPTY
12895: LIST
12896: LIST
12897: PUSH
12898: EMPTY
12899: LIST
12900: LIST
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: LIST
12906: PPUSH
12907: CALL_OW 69
12911: PUSH
12912: LD_EXP 15
12916: DIFF
12917: IFFALSE 13061
12919: GO 12921
12921: DISABLE
12922: LD_INT 0
12924: PPUSH
// begin enable ;
12925: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do
12926: LD_ADDR_VAR 0 1
12930: PUSH
12931: LD_INT 22
12933: PUSH
12934: LD_INT 4
12936: PUSH
12937: EMPTY
12938: LIST
12939: LIST
12940: PUSH
12941: LD_INT 21
12943: PUSH
12944: LD_INT 1
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: PUSH
12951: LD_INT 3
12953: PUSH
12954: LD_INT 24
12956: PUSH
12957: LD_INT 990
12959: PUSH
12960: EMPTY
12961: LIST
12962: LIST
12963: PUSH
12964: EMPTY
12965: LIST
12966: LIST
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: LIST
12972: PPUSH
12973: CALL_OW 69
12977: PUSH
12978: LD_EXP 15
12982: DIFF
12983: PUSH
12984: FOR_IN
12985: IFFALSE 13059
// begin ComFree ( i ) ;
12987: LD_VAR 0 1
12991: PPUSH
12992: CALL_OW 139
// SetSide ( i , 1 ) ;
12996: LD_VAR 0 1
13000: PPUSH
13001: LD_INT 1
13003: PPUSH
13004: CALL_OW 235
// if GetDistUnits ( i , JMM ) < 14 then
13008: LD_VAR 0 1
13012: PPUSH
13013: LD_EXP 14
13017: PPUSH
13018: CALL_OW 296
13022: PUSH
13023: LD_INT 14
13025: LESS
13026: IFFALSE 13057
// ComAgressiveMove ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
13028: LD_VAR 0 1
13032: PPUSH
13033: LD_EXP 14
13037: PPUSH
13038: CALL_OW 250
13042: PPUSH
13043: LD_EXP 14
13047: PPUSH
13048: CALL_OW 251
13052: PPUSH
13053: CALL_OW 114
// end ;
13057: GO 12984
13059: POP
13060: POP
// end ;
13061: PPOPN 1
13063: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var i ;
13064: LD_INT 22
13066: PUSH
13067: LD_INT 4
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: PUSH
13074: LD_INT 34
13076: PUSH
13077: LD_INT 12
13079: PUSH
13080: EMPTY
13081: LIST
13082: LIST
13083: PUSH
13084: EMPTY
13085: LIST
13086: LIST
13087: PPUSH
13088: CALL_OW 69
13092: IFFALSE 13174
13094: GO 13096
13096: DISABLE
13097: LD_INT 0
13099: PPUSH
// begin enable ;
13100: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do
13101: LD_ADDR_VAR 0 1
13105: PUSH
13106: LD_INT 22
13108: PUSH
13109: LD_INT 4
13111: PUSH
13112: EMPTY
13113: LIST
13114: LIST
13115: PUSH
13116: LD_INT 34
13118: PUSH
13119: LD_INT 12
13121: PUSH
13122: EMPTY
13123: LIST
13124: LIST
13125: PUSH
13126: EMPTY
13127: LIST
13128: LIST
13129: PPUSH
13130: CALL_OW 69
13134: PUSH
13135: FOR_IN
13136: IFFALSE 13172
// if GetDistUnits ( i , JMM ) < 6 then
13138: LD_VAR 0 1
13142: PPUSH
13143: LD_EXP 14
13147: PPUSH
13148: CALL_OW 296
13152: PUSH
13153: LD_INT 6
13155: LESS
13156: IFFALSE 13170
// SetSide ( i , 7 ) ;
13158: LD_VAR 0 1
13162: PPUSH
13163: LD_INT 7
13165: PPUSH
13166: CALL_OW 235
13170: GO 13135
13172: POP
13173: POP
// end ;
13174: PPOPN 1
13176: END
// every 0 0$01 trigger can_escape and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) do var all_taken , tmp , m1 , m2 , m3 ;
13177: LD_EXP 6
13181: PUSH
13182: LD_INT 19
13184: PPUSH
13185: LD_INT 22
13187: PUSH
13188: LD_INT 7
13190: PUSH
13191: EMPTY
13192: LIST
13193: LIST
13194: PUSH
13195: LD_INT 21
13197: PUSH
13198: LD_INT 1
13200: PUSH
13201: EMPTY
13202: LIST
13203: LIST
13204: PUSH
13205: EMPTY
13206: LIST
13207: LIST
13208: PPUSH
13209: CALL_OW 71
13213: NOT
13214: AND
13215: PUSH
13216: LD_INT 3
13218: PPUSH
13219: CALL_OW 469
13223: NOT
13224: AND
13225: PUSH
13226: LD_INT 5
13228: PPUSH
13229: CALL_OW 469
13233: NOT
13234: AND
13235: IFFALSE 14918
13237: GO 13239
13239: DISABLE
13240: LD_INT 0
13242: PPUSH
13243: PPUSH
13244: PPUSH
13245: PPUSH
13246: PPUSH
// begin m1 := false ;
13247: LD_ADDR_VAR 0 3
13251: PUSH
13252: LD_INT 0
13254: ST_TO_ADDR
// m2 := false ;
13255: LD_ADDR_VAR 0 4
13259: PUSH
13260: LD_INT 0
13262: ST_TO_ADDR
// m3 := false ;
13263: LD_ADDR_VAR 0 5
13267: PUSH
13268: LD_INT 0
13270: ST_TO_ADDR
// all_taken := ( UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 ) ;
13271: LD_ADDR_VAR 0 1
13275: PUSH
13276: LD_EXP 3
13280: PPUSH
13281: LD_INT 22
13283: PUSH
13284: LD_INT 4
13286: PUSH
13287: EMPTY
13288: LIST
13289: LIST
13290: PUSH
13291: LD_INT 21
13293: PUSH
13294: LD_INT 1
13296: PUSH
13297: EMPTY
13298: LIST
13299: LIST
13300: PUSH
13301: EMPTY
13302: LIST
13303: LIST
13304: PPUSH
13305: CALL_OW 72
13309: PUSH
13310: LD_INT 0
13312: EQUAL
13313: ST_TO_ADDR
// if not all_taken then
13314: LD_VAR 0 1
13318: NOT
13319: IFFALSE 13460
// case Query ( Q1 ) of 1 :
13321: LD_STRING Q1
13323: PPUSH
13324: CALL_OW 97
13328: PUSH
13329: LD_INT 1
13331: DOUBLE
13332: EQUAL
13333: IFTRUE 13337
13335: GO 13448
13337: POP
// begin repeat wait ( 0 0$1 ) ;
13338: LD_INT 35
13340: PPUSH
13341: CALL_OW 67
// until UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) ;
13345: LD_EXP 3
13349: PPUSH
13350: LD_INT 22
13352: PUSH
13353: LD_INT 4
13355: PUSH
13356: EMPTY
13357: LIST
13358: LIST
13359: PUSH
13360: LD_INT 21
13362: PUSH
13363: LD_INT 1
13365: PUSH
13366: EMPTY
13367: LIST
13368: LIST
13369: PUSH
13370: EMPTY
13371: LIST
13372: LIST
13373: PPUSH
13374: CALL_OW 72
13378: PUSH
13379: LD_INT 0
13381: EQUAL
13382: PUSH
13383: LD_INT 19
13385: PPUSH
13386: LD_INT 22
13388: PUSH
13389: LD_INT 7
13391: PUSH
13392: EMPTY
13393: LIST
13394: LIST
13395: PUSH
13396: LD_INT 21
13398: PUSH
13399: LD_INT 1
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: PPUSH
13410: CALL_OW 71
13414: NOT
13415: AND
13416: PUSH
13417: LD_INT 3
13419: PPUSH
13420: CALL_OW 469
13424: NOT
13425: AND
13426: PUSH
13427: LD_INT 5
13429: PPUSH
13430: CALL_OW 469
13434: NOT
13435: AND
13436: IFFALSE 13338
// all_taken := true ;
13438: LD_ADDR_VAR 0 1
13442: PUSH
13443: LD_INT 1
13445: ST_TO_ADDR
// end ; 2 :
13446: GO 13460
13448: LD_INT 2
13450: DOUBLE
13451: EQUAL
13452: IFTRUE 13456
13454: GO 13459
13456: POP
// ; end ;
13457: GO 13460
13459: POP
// if team_kill_counter < 3 then
13460: LD_EXP 9
13464: PUSH
13465: LD_INT 3
13467: LESS
13468: IFFALSE 13484
// Say ( JMM , D5-JMM-1 ) else
13470: LD_EXP 14
13474: PPUSH
13475: LD_STRING D5-JMM-1
13477: PPUSH
13478: CALL_OW 88
13482: GO 13496
// Say ( JMM , D5-JMM-1a ) ;
13484: LD_EXP 14
13488: PPUSH
13489: LD_STRING D5-JMM-1a
13491: PPUSH
13492: CALL_OW 88
// if ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Roth ] ) >= 10 then
13496: LD_INT 22
13498: PUSH
13499: LD_INT 7
13501: PUSH
13502: EMPTY
13503: LIST
13504: LIST
13505: PUSH
13506: LD_INT 21
13508: PUSH
13509: LD_INT 1
13511: PUSH
13512: EMPTY
13513: LIST
13514: LIST
13515: PUSH
13516: LD_INT 23
13518: PUSH
13519: LD_INT 1
13521: PUSH
13522: EMPTY
13523: LIST
13524: LIST
13525: PUSH
13526: EMPTY
13527: LIST
13528: LIST
13529: LIST
13530: PPUSH
13531: CALL_OW 69
13535: PUSH
13536: LD_EXP 14
13540: PUSH
13541: LD_EXP 15
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: DIFF
13550: PUSH
13551: LD_INT 10
13553: GREATEREQUAL
13554: IFFALSE 13563
// SetAchievement ( ACH_TEAM ) ;
13556: LD_STRING ACH_TEAM
13558: PPUSH
13559: CALL_OW 543
// if not invis_used then
13563: LD_EXP 12
13567: NOT
13568: IFFALSE 13584
// begin wait ( 3 ) ;
13570: LD_INT 3
13572: PPUSH
13573: CALL_OW 67
// SetAchievement ( ACH_NOINVIS ) ;
13577: LD_STRING ACH_NOINVIS
13579: PPUSH
13580: CALL_OW 543
// end ; if not alert then
13584: LD_EXP 13
13588: NOT
13589: IFFALSE 13605
// begin wait ( 3 ) ;
13591: LD_INT 3
13593: PPUSH
13594: CALL_OW 67
// SetAchievement ( ACH_ALARM ) ;
13598: LD_STRING ACH_ALARM
13600: PPUSH
13601: CALL_OW 543
// end ; if tick < 15 15$00 then
13605: LD_OWVAR 1
13609: PUSH
13610: LD_INT 31500
13612: LESS
13613: IFFALSE 13629
// begin wait ( 3 ) ;
13615: LD_INT 3
13617: PPUSH
13618: CALL_OW 67
// SetAchievement ( ACH_ASPEED_16 ) ;
13622: LD_STRING ACH_ASPEED_16
13624: PPUSH
13625: CALL_OW 543
// end ; if all_taken then
13629: LD_VAR 0 1
13633: IFFALSE 13655
// begin AddMedal ( All , 1 ) ;
13635: LD_STRING All
13637: PPUSH
13638: LD_INT 1
13640: PPUSH
13641: CALL_OW 101
// m1 := true ;
13645: LD_ADDR_VAR 0 3
13649: PUSH
13650: LD_INT 1
13652: ST_TO_ADDR
// end else
13653: GO 13666
// AddMedal ( All , - 1 ) ;
13655: LD_STRING All
13657: PPUSH
13658: LD_INT 1
13660: NEG
13661: PPUSH
13662: CALL_OW 101
// if team_kill_counter then
13666: LD_EXP 9
13670: IFFALSE 13685
// AddMedal ( Save , - 1 ) else
13672: LD_STRING Save
13674: PPUSH
13675: LD_INT 1
13677: NEG
13678: PPUSH
13679: CALL_OW 101
13683: GO 13703
// begin AddMedal ( Save , 1 ) ;
13685: LD_STRING Save
13687: PPUSH
13688: LD_INT 1
13690: PPUSH
13691: CALL_OW 101
// m2 := true ;
13695: LD_ADDR_VAR 0 4
13699: PUSH
13700: LD_INT 1
13702: ST_TO_ADDR
// end ; if friends_kill_counter >= [ 2 , 2 , 1 , 1 ] [ Difficulty ] then
13703: LD_EXP 8
13707: PUSH
13708: LD_INT 2
13710: PUSH
13711: LD_INT 2
13713: PUSH
13714: LD_INT 1
13716: PUSH
13717: LD_INT 1
13719: PUSH
13720: EMPTY
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: PUSH
13726: LD_OWVAR 67
13730: ARRAY
13731: GREATEREQUAL
13732: IFFALSE 13747
// AddMedal ( Friendship , - 1 ) else
13734: LD_STRING Friendship
13736: PPUSH
13737: LD_INT 1
13739: NEG
13740: PPUSH
13741: CALL_OW 101
13745: GO 13765
// begin AddMedal ( Friendship , 1 ) ;
13747: LD_STRING Friendship
13749: PPUSH
13750: LD_INT 1
13752: PPUSH
13753: CALL_OW 101
// m3 := true ;
13757: LD_ADDR_VAR 0 5
13761: PUSH
13762: LD_INT 1
13764: ST_TO_ADDR
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
13765: LD_VAR 0 3
13769: PUSH
13770: LD_VAR 0 4
13774: AND
13775: PUSH
13776: LD_VAR 0 5
13780: AND
13781: PUSH
13782: LD_OWVAR 67
13786: PUSH
13787: LD_INT 3
13789: GREATEREQUAL
13790: AND
13791: IFFALSE 13803
// SetAchievementEX ( ACH_AMER , 16 ) ;
13793: LD_STRING ACH_AMER
13795: PPUSH
13796: LD_INT 16
13798: PPUSH
13799: CALL_OW 564
// GiveMedals ( MAIN ) ;
13803: LD_STRING MAIN
13805: PPUSH
13806: CALL_OW 102
// tmp := FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] , [ f_class , class_apeman_engineer ] ] ] ] ) ;
13810: LD_ADDR_VAR 0 2
13814: PUSH
13815: LD_INT 22
13817: PUSH
13818: LD_INT 7
13820: PUSH
13821: EMPTY
13822: LIST
13823: LIST
13824: PUSH
13825: LD_INT 2
13827: PUSH
13828: LD_INT 25
13830: PUSH
13831: LD_INT 1
13833: PUSH
13834: EMPTY
13835: LIST
13836: LIST
13837: PUSH
13838: LD_INT 25
13840: PUSH
13841: LD_INT 2
13843: PUSH
13844: EMPTY
13845: LIST
13846: LIST
13847: PUSH
13848: LD_INT 25
13850: PUSH
13851: LD_INT 3
13853: PUSH
13854: EMPTY
13855: LIST
13856: LIST
13857: PUSH
13858: LD_INT 25
13860: PUSH
13861: LD_INT 4
13863: PUSH
13864: EMPTY
13865: LIST
13866: LIST
13867: PUSH
13868: LD_INT 25
13870: PUSH
13871: LD_INT 5
13873: PUSH
13874: EMPTY
13875: LIST
13876: LIST
13877: PUSH
13878: LD_INT 25
13880: PUSH
13881: LD_INT 8
13883: PUSH
13884: EMPTY
13885: LIST
13886: LIST
13887: PUSH
13888: LD_INT 25
13890: PUSH
13891: LD_INT 9
13893: PUSH
13894: EMPTY
13895: LIST
13896: LIST
13897: PUSH
13898: LD_INT 25
13900: PUSH
13901: LD_INT 16
13903: PUSH
13904: EMPTY
13905: LIST
13906: LIST
13907: PUSH
13908: EMPTY
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: PUSH
13919: EMPTY
13920: LIST
13921: LIST
13922: PUSH
13923: EMPTY
13924: LIST
13925: PPUSH
13926: CALL_OW 69
13930: ST_TO_ADDR
// RewardPeople ( tmp union Roth diff Mike ) ;
13931: LD_VAR 0 2
13935: PUSH
13936: LD_EXP 15
13940: UNION
13941: PUSH
13942: LD_EXP 38
13946: DIFF
13947: PPUSH
13948: CALL_OW 43
// SaveCharacters ( JMM , 12a_JMM ) ;
13952: LD_EXP 14
13956: PPUSH
13957: LD_STRING 12a_JMM
13959: PPUSH
13960: CALL_OW 38
// if IsLive ( Roth ) then
13964: LD_EXP 15
13968: PPUSH
13969: CALL_OW 300
13973: IFFALSE 13987
// SaveCharacters ( Roth , 12a_Roth ) ;
13975: LD_EXP 15
13979: PPUSH
13980: LD_STRING 12a_Roth
13982: PPUSH
13983: CALL_OW 38
// if Lisa in tmp then
13987: LD_EXP 23
13991: PUSH
13992: LD_VAR 0 2
13996: IN
13997: IFFALSE 14013
// SaveCharacters ( Lisa , 12a_Lisa ) else
13999: LD_EXP 23
14003: PPUSH
14004: LD_STRING 12a_Lisa
14006: PPUSH
14007: CALL_OW 38
14011: GO 14031
// if Lisa then
14013: LD_EXP 23
14017: IFFALSE 14031
// SaveCharacters ( Lisa , 12p_Lisa ) ;
14019: LD_EXP 23
14023: PPUSH
14024: LD_STRING 12p_Lisa
14026: PPUSH
14027: CALL_OW 38
// if Mike in tmp then
14031: LD_EXP 38
14035: PUSH
14036: LD_VAR 0 2
14040: IN
14041: IFFALSE 14055
// SaveCharacters ( Mike , 12a_Mike ) ;
14043: LD_EXP 38
14047: PPUSH
14048: LD_STRING 12a_Mike
14050: PPUSH
14051: CALL_OW 38
// if Donaldson in tmp then
14055: LD_EXP 24
14059: PUSH
14060: LD_VAR 0 2
14064: IN
14065: IFFALSE 14081
// SaveCharacters ( Donaldson , 12a_Donaldson ) else
14067: LD_EXP 24
14071: PPUSH
14072: LD_STRING 12a_Donaldson
14074: PPUSH
14075: CALL_OW 38
14079: GO 14099
// if Donaldson then
14081: LD_EXP 24
14085: IFFALSE 14099
// SaveCharacters ( Donaldson , 12p_Donaldson ) ;
14087: LD_EXP 24
14091: PPUSH
14092: LD_STRING 12p_Donaldson
14094: PPUSH
14095: CALL_OW 38
// if Bobby in tmp then
14099: LD_EXP 25
14103: PUSH
14104: LD_VAR 0 2
14108: IN
14109: IFFALSE 14125
// SaveCharacters ( Bobby , 12a_Bobby ) else
14111: LD_EXP 25
14115: PPUSH
14116: LD_STRING 12a_Bobby
14118: PPUSH
14119: CALL_OW 38
14123: GO 14143
// if Bobby then
14125: LD_EXP 25
14129: IFFALSE 14143
// SaveCharacters ( Bobby , 12p_Bobby ) ;
14131: LD_EXP 25
14135: PPUSH
14136: LD_STRING 12p_Bobby
14138: PPUSH
14139: CALL_OW 38
// if Cyrus in tmp then
14143: LD_EXP 26
14147: PUSH
14148: LD_VAR 0 2
14152: IN
14153: IFFALSE 14169
// SaveCharacters ( Cyrus , 12a_Cyrus ) else
14155: LD_EXP 26
14159: PPUSH
14160: LD_STRING 12a_Cyrus
14162: PPUSH
14163: CALL_OW 38
14167: GO 14187
// if Cyrus then
14169: LD_EXP 26
14173: IFFALSE 14187
// SaveCharacters ( Cyrus , 12p_Cyrus ) ;
14175: LD_EXP 26
14179: PPUSH
14180: LD_STRING 12p_Cyrus
14182: PPUSH
14183: CALL_OW 38
// if Denis in tmp then
14187: LD_EXP 27
14191: PUSH
14192: LD_VAR 0 2
14196: IN
14197: IFFALSE 14211
// SaveCharacters ( Denis , 12a_Denis ) ;
14199: LD_EXP 27
14203: PPUSH
14204: LD_STRING 12a_Denis
14206: PPUSH
14207: CALL_OW 38
// if Brown in tmp then
14211: LD_EXP 28
14215: PUSH
14216: LD_VAR 0 2
14220: IN
14221: IFFALSE 14237
// SaveCharacters ( Brown , 12a_Brown ) else
14223: LD_EXP 28
14227: PPUSH
14228: LD_STRING 12a_Brown
14230: PPUSH
14231: CALL_OW 38
14235: GO 14261
// if Brown in tmp then
14237: LD_EXP 28
14241: PUSH
14242: LD_VAR 0 2
14246: IN
14247: IFFALSE 14261
// SaveCharacters ( Brown , 12p_Brown ) ;
14249: LD_EXP 28
14253: PPUSH
14254: LD_STRING 12p_Brown
14256: PPUSH
14257: CALL_OW 38
// if Gladstone in tmp then
14261: LD_EXP 29
14265: PUSH
14266: LD_VAR 0 2
14270: IN
14271: IFFALSE 14287
// SaveCharacters ( Gladstone , 12a_Gladstone ) else
14273: LD_EXP 29
14277: PPUSH
14278: LD_STRING 12a_Gladstone
14280: PPUSH
14281: CALL_OW 38
14285: GO 14305
// if Gladstone then
14287: LD_EXP 29
14291: IFFALSE 14305
// SaveCharacters ( Gladstone , 12p_Gladstone ) ;
14293: LD_EXP 29
14297: PPUSH
14298: LD_STRING 12p_Gladstone
14300: PPUSH
14301: CALL_OW 38
// if Houten in tmp then
14305: LD_EXP 30
14309: PUSH
14310: LD_VAR 0 2
14314: IN
14315: IFFALSE 14331
// SaveCharacters ( Houten , 12a_Houten ) else
14317: LD_EXP 30
14321: PPUSH
14322: LD_STRING 12a_Houten
14324: PPUSH
14325: CALL_OW 38
14329: GO 14349
// if Houten then
14331: LD_EXP 30
14335: IFFALSE 14349
// SaveCharacters ( Houten , 12p_Houten ) ;
14337: LD_EXP 30
14341: PPUSH
14342: LD_STRING 12p_Houten
14344: PPUSH
14345: CALL_OW 38
// if Cornel in tmp then
14349: LD_EXP 31
14353: PUSH
14354: LD_VAR 0 2
14358: IN
14359: IFFALSE 14375
// SaveCharacters ( Cornel , 12a_Cornell ) else
14361: LD_EXP 31
14365: PPUSH
14366: LD_STRING 12a_Cornell
14368: PPUSH
14369: CALL_OW 38
14373: GO 14393
// if Cornel then
14375: LD_EXP 31
14379: IFFALSE 14393
// SaveCharacters ( Cornel , 12p_Cornell ) ;
14381: LD_EXP 31
14385: PPUSH
14386: LD_STRING 12p_Cornell
14388: PPUSH
14389: CALL_OW 38
// if Gary in tmp then
14393: LD_EXP 32
14397: PUSH
14398: LD_VAR 0 2
14402: IN
14403: IFFALSE 14419
// SaveCharacters ( Gary , 12a_Gary ) else
14405: LD_EXP 32
14409: PPUSH
14410: LD_STRING 12a_Gary
14412: PPUSH
14413: CALL_OW 38
14417: GO 14437
// if Gary then
14419: LD_EXP 32
14423: IFFALSE 14437
// SaveCharacters ( Gary , 12p_Gary ) ;
14425: LD_EXP 32
14429: PPUSH
14430: LD_STRING 12p_Gary
14432: PPUSH
14433: CALL_OW 38
// if Frank in tmp then
14437: LD_EXP 33
14441: PUSH
14442: LD_VAR 0 2
14446: IN
14447: IFFALSE 14461
// SaveCharacters ( Frank , 12a_Frank ) ;
14449: LD_EXP 33
14453: PPUSH
14454: LD_STRING 12a_Frank
14456: PPUSH
14457: CALL_OW 38
// if Kikuchi in tmp then
14461: LD_EXP 34
14465: PUSH
14466: LD_VAR 0 2
14470: IN
14471: IFFALSE 14487
// SaveCharacters ( Kikuchi , 12a_Kikuchi ) else
14473: LD_EXP 34
14477: PPUSH
14478: LD_STRING 12a_Kikuchi
14480: PPUSH
14481: CALL_OW 38
14485: GO 14505
// if Kikuchi then
14487: LD_EXP 34
14491: IFFALSE 14505
// SaveCharacters ( Kikuchi , 12p_Kikuchi ) ;
14493: LD_EXP 34
14497: PPUSH
14498: LD_STRING 12p_Kikuchi
14500: PPUSH
14501: CALL_OW 38
// if Simms in tmp then
14505: LD_EXP 35
14509: PUSH
14510: LD_VAR 0 2
14514: IN
14515: IFFALSE 14529
// SaveCharacters ( Simms , 12a_Simms ) ;
14517: LD_EXP 35
14521: PPUSH
14522: LD_STRING 12a_Simms
14524: PPUSH
14525: CALL_OW 38
// if Joan in tmp then
14529: LD_EXP 36
14533: PUSH
14534: LD_VAR 0 2
14538: IN
14539: IFFALSE 14553
// SaveCharacters ( Joan , 12a_Joan ) ;
14541: LD_EXP 36
14545: PPUSH
14546: LD_STRING 12a_Joan
14548: PPUSH
14549: CALL_OW 38
// if DeltaDoctor in tmp then
14553: LD_EXP 37
14557: PUSH
14558: LD_VAR 0 2
14562: IN
14563: IFFALSE 14577
// SaveCharacters ( DeltaDoctor , 12a_DeltaDoctor ) ;
14565: LD_EXP 37
14569: PPUSH
14570: LD_STRING 12a_DeltaDoctor
14572: PPUSH
14573: CALL_OW 38
// tmp := tmp diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Mike ] ;
14577: LD_ADDR_VAR 0 2
14581: PUSH
14582: LD_VAR 0 2
14586: PUSH
14587: LD_EXP 14
14591: PUSH
14592: LD_EXP 15
14596: PUSH
14597: LD_EXP 23
14601: PUSH
14602: LD_EXP 24
14606: PUSH
14607: LD_EXP 25
14611: PUSH
14612: LD_EXP 26
14616: PUSH
14617: LD_EXP 27
14621: PUSH
14622: LD_EXP 28
14626: PUSH
14627: LD_EXP 29
14631: PUSH
14632: LD_EXP 30
14636: PUSH
14637: LD_EXP 31
14641: PUSH
14642: LD_EXP 32
14646: PUSH
14647: LD_EXP 33
14651: PUSH
14652: LD_EXP 34
14656: PUSH
14657: LD_EXP 35
14661: PUSH
14662: LD_EXP 36
14666: PUSH
14667: LD_EXP 37
14671: PUSH
14672: LD_EXP 38
14676: PUSH
14677: EMPTY
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: DIFF
14697: ST_TO_ADDR
// if tmp then
14698: LD_VAR 0 2
14702: IFFALSE 14716
// SaveCharacters ( tmp , 12a_others ) ;
14704: LD_VAR 0 2
14708: PPUSH
14709: LD_STRING 12a_others
14711: PPUSH
14712: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_side , 1 ] , [ f_side , 4 ] ] ] ) diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Powell , Mike ] ;
14716: LD_ADDR_VAR 0 2
14720: PUSH
14721: LD_INT 21
14723: PUSH
14724: LD_INT 1
14726: PUSH
14727: EMPTY
14728: LIST
14729: LIST
14730: PUSH
14731: LD_INT 23
14733: PUSH
14734: LD_INT 1
14736: PUSH
14737: EMPTY
14738: LIST
14739: LIST
14740: PUSH
14741: LD_INT 2
14743: PUSH
14744: LD_INT 22
14746: PUSH
14747: LD_INT 1
14749: PUSH
14750: EMPTY
14751: LIST
14752: LIST
14753: PUSH
14754: LD_INT 22
14756: PUSH
14757: LD_INT 4
14759: PUSH
14760: EMPTY
14761: LIST
14762: LIST
14763: PUSH
14764: EMPTY
14765: LIST
14766: LIST
14767: LIST
14768: PUSH
14769: EMPTY
14770: LIST
14771: LIST
14772: LIST
14773: PPUSH
14774: CALL_OW 69
14778: PUSH
14779: LD_EXP 14
14783: PUSH
14784: LD_EXP 15
14788: PUSH
14789: LD_EXP 23
14793: PUSH
14794: LD_EXP 24
14798: PUSH
14799: LD_EXP 25
14803: PUSH
14804: LD_EXP 26
14808: PUSH
14809: LD_EXP 27
14813: PUSH
14814: LD_EXP 28
14818: PUSH
14819: LD_EXP 29
14823: PUSH
14824: LD_EXP 30
14828: PUSH
14829: LD_EXP 31
14833: PUSH
14834: LD_EXP 32
14838: PUSH
14839: LD_EXP 33
14843: PUSH
14844: LD_EXP 34
14848: PUSH
14849: LD_EXP 35
14853: PUSH
14854: LD_EXP 36
14858: PUSH
14859: LD_EXP 37
14863: PUSH
14864: LD_EXP 16
14868: PUSH
14869: LD_EXP 38
14873: PUSH
14874: EMPTY
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: DIFF
14895: ST_TO_ADDR
// if tmp then
14896: LD_VAR 0 2
14900: IFFALSE 14914
// SaveCharacters ( tmp , 12p_others ) ;
14902: LD_VAR 0 2
14906: PPUSH
14907: LD_STRING 12p_others
14909: PPUSH
14910: CALL_OW 38
// YouWin ;
14914: CALL_OW 103
// end ; end_of_file
14918: PPOPN 5
14920: END
// on SailEvent ( event ) do var tmp ;
14921: LD_INT 0
14923: PPUSH
// begin if event = 1 then
14924: LD_VAR 0 1
14928: PUSH
14929: LD_INT 1
14931: EQUAL
14932: IFFALSE 15005
// begin if not mobile_patrol then
14934: LD_EXP 17
14938: NOT
14939: IFFALSE 14943
// exit ;
14941: GO 15005
// tmp := mobile_patrol [ mobile_patrol ] ;
14943: LD_ADDR_VAR 0 2
14947: PUSH
14948: LD_EXP 17
14952: PUSH
14953: LD_EXP 17
14957: ARRAY
14958: ST_TO_ADDR
// mobile_patrol := Delete ( mobile_patrol , mobile_patrol ) ;
14959: LD_ADDR_EXP 17
14963: PUSH
14964: LD_EXP 17
14968: PPUSH
14969: LD_EXP 17
14973: PPUSH
14974: CALL_OW 3
14978: ST_TO_ADDR
// Patrol ( tmp , mobile_points [ mobile_patrol + 1 ] , [ ] ) ;
14979: LD_VAR 0 2
14983: PPUSH
14984: LD_EXP 18
14988: PUSH
14989: LD_EXP 17
14993: PUSH
14994: LD_INT 1
14996: PLUS
14997: ARRAY
14998: PPUSH
14999: EMPTY
15000: PPUSH
15001: CALL 6985 0 3
// end ; end ;
15005: PPOPN 2
15007: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
15008: LD_VAR 0 1
15012: PPUSH
15013: CALL 31330 0 1
// if un = JMM then
15017: LD_VAR 0 1
15021: PUSH
15022: LD_EXP 14
15026: EQUAL
15027: IFFALSE 15036
// YouLost ( JMM ) ;
15029: LD_STRING JMM
15031: PPUSH
15032: CALL_OW 104
// if GetSide ( un ) = 7 and GetWeapon ( un ) = us_cargo_bay then
15036: LD_VAR 0 1
15040: PPUSH
15041: CALL_OW 255
15045: PUSH
15046: LD_INT 7
15048: EQUAL
15049: PUSH
15050: LD_VAR 0 1
15054: PPUSH
15055: CALL_OW 264
15059: PUSH
15060: LD_INT 12
15062: EQUAL
15063: AND
15064: IFFALSE 15073
// YouLost ( Artifact ) ;
15066: LD_STRING Artifact
15068: PPUSH
15069: CALL_OW 104
// if ( GetSide ( un ) = 7 and GetType ( un ) = unit_human ) or un = Roth then
15073: LD_VAR 0 1
15077: PPUSH
15078: CALL_OW 255
15082: PUSH
15083: LD_INT 7
15085: EQUAL
15086: PUSH
15087: LD_VAR 0 1
15091: PPUSH
15092: CALL_OW 247
15096: PUSH
15097: LD_INT 1
15099: EQUAL
15100: AND
15101: PUSH
15102: LD_VAR 0 1
15106: PUSH
15107: LD_EXP 15
15111: EQUAL
15112: OR
15113: IFFALSE 15129
// team_kill_counter := team_kill_counter + 1 ;
15115: LD_ADDR_EXP 9
15119: PUSH
15120: LD_EXP 9
15124: PUSH
15125: LD_INT 1
15127: PLUS
15128: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetType ( un ) = unit_human then
15129: LD_VAR 0 1
15133: PPUSH
15134: CALL_OW 255
15138: PUSH
15139: LD_INT 1
15141: EQUAL
15142: PUSH
15143: LD_VAR 0 1
15147: PPUSH
15148: CALL_OW 247
15152: PUSH
15153: LD_INT 1
15155: EQUAL
15156: AND
15157: IFFALSE 15173
// friends_kill_counter := friends_kill_counter + 1 ;
15159: LD_ADDR_EXP 8
15163: PUSH
15164: LD_EXP 8
15168: PUSH
15169: LD_INT 1
15171: PLUS
15172: ST_TO_ADDR
// if GetSide ( un ) <> 1 then
15173: LD_VAR 0 1
15177: PPUSH
15178: CALL_OW 255
15182: PUSH
15183: LD_INT 1
15185: NONEQUAL
15186: IFFALSE 15190
// exit ;
15188: GO 15267
// if GetControl ( un ) = control_remote then
15190: LD_VAR 0 1
15194: PPUSH
15195: CALL_OW 263
15199: PUSH
15200: LD_INT 2
15202: EQUAL
15203: IFFALSE 15221
// defenders := defenders diff un ;
15205: LD_ADDR_EXP 20
15209: PUSH
15210: LD_EXP 20
15214: PUSH
15215: LD_VAR 0 1
15219: DIFF
15220: ST_TO_ADDR
// if not un in defenders then
15221: LD_VAR 0 1
15225: PUSH
15226: LD_EXP 20
15230: IN
15231: NOT
15232: IFFALSE 15267
// begin defcon := [ GetX ( un ) , GetY ( un ) ] ;
15234: LD_ADDR_EXP 21
15238: PUSH
15239: LD_VAR 0 1
15243: PPUSH
15244: CALL_OW 250
15248: PUSH
15249: LD_VAR 0 1
15253: PPUSH
15254: CALL_OW 251
15258: PUSH
15259: EMPTY
15260: LIST
15261: LIST
15262: ST_TO_ADDR
// Defend ;
15263: CALL 2950 0 0
// end ; end ;
15267: PPOPN 1
15269: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
15270: LD_VAR 0 1
15274: PPUSH
15275: LD_VAR 0 2
15279: PPUSH
15280: CALL 31450 0 2
// if GetSide ( veh ) <> 1 then
15284: LD_VAR 0 1
15288: PPUSH
15289: CALL_OW 255
15293: PUSH
15294: LD_INT 1
15296: NONEQUAL
15297: IFFALSE 15301
// exit ;
15299: GO 15325
// if GetControl ( veh ) = control_remote then
15301: LD_VAR 0 1
15305: PPUSH
15306: CALL_OW 263
15310: PUSH
15311: LD_INT 2
15313: EQUAL
15314: IFFALSE 15325
// Connect ( veh ) ;
15316: LD_VAR 0 1
15320: PPUSH
15321: CALL 43559 0 1
// end ;
15325: PPOPN 2
15327: END
// on UnitGoesToRed ( un ) do var i , veh ;
15328: LD_INT 0
15330: PPUSH
15331: PPUSH
// begin if GetSide ( un ) = 1 and GetControl ( un ) = control_remote then
15332: LD_VAR 0 1
15336: PPUSH
15337: CALL_OW 255
15341: PUSH
15342: LD_INT 1
15344: EQUAL
15345: PUSH
15346: LD_VAR 0 1
15350: PPUSH
15351: CALL_OW 263
15355: PUSH
15356: LD_INT 2
15358: EQUAL
15359: AND
15360: IFFALSE 15371
// ComUnlink ( un ) ;
15362: LD_VAR 0 1
15366: PPUSH
15367: CALL_OW 136
// if un = ambar0 then
15371: LD_VAR 0 1
15375: PUSH
15376: LD_INT 18
15378: EQUAL
15379: IFFALSE 15489
// begin uc_side := 1 ;
15381: LD_ADDR_OWVAR 20
15385: PUSH
15386: LD_INT 1
15388: ST_TO_ADDR
// uc_nation := 1 ;
15389: LD_ADDR_OWVAR 21
15393: PUSH
15394: LD_INT 1
15396: ST_TO_ADDR
// for i = 1 to 6 do
15397: LD_ADDR_VAR 0 2
15401: PUSH
15402: DOUBLE
15403: LD_INT 1
15405: DEC
15406: ST_TO_ADDR
15407: LD_INT 6
15409: PUSH
15410: FOR_TO
15411: IFFALSE 15487
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
15413: LD_INT 3
15415: PPUSH
15416: LD_INT 1
15418: PPUSH
15419: LD_INT 3
15421: PPUSH
15422: LD_INT 4
15424: PPUSH
15425: LD_INT 100
15427: PPUSH
15428: CALL 40459 0 5
// veh := CreateVehicle ;
15432: LD_ADDR_VAR 0 3
15436: PUSH
15437: CALL_OW 45
15441: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
15442: LD_VAR 0 3
15446: PPUSH
15447: LD_INT 1
15449: PPUSH
15450: CALL_OW 233
// PlaceUnitArea ( veh , west_spawn , false ) ;
15454: LD_VAR 0 3
15458: PPUSH
15459: LD_INT 25
15461: PPUSH
15462: LD_INT 0
15464: PPUSH
15465: CALL_OW 49
// defenders := defenders ^ veh ;
15469: LD_ADDR_EXP 20
15473: PUSH
15474: LD_EXP 20
15478: PUSH
15479: LD_VAR 0 3
15483: ADD
15484: ST_TO_ADDR
// end ;
15485: GO 15410
15487: POP
15488: POP
// end ; end ;
15489: PPOPN 3
15491: END
// on EnterBuilding ( building , unit ) do begin if unit = Powell then
15492: LD_VAR 0 2
15496: PUSH
15497: LD_EXP 16
15501: EQUAL
15502: IFFALSE 15513
// RemoveUnit ( Powell ) ;
15504: LD_EXP 16
15508: PPUSH
15509: CALL_OW 64
// end ;
15513: PPOPN 2
15515: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
15516: LD_VAR 0 1
15520: PPUSH
15521: CALL 31434 0 1
// end ; end_of_file end_of_file
15525: PPOPN 1
15527: END
// export globalGameSaveCounter ; every 0 0$1 do
15528: GO 15530
15530: DISABLE
// begin enable ;
15531: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
15532: LD_STRING updateTimer(
15534: PUSH
15535: LD_OWVAR 1
15539: STR
15540: PUSH
15541: LD_STRING );
15543: STR
15544: PPUSH
15545: CALL_OW 559
// end ;
15549: END
// every 0 0$1 do
15550: GO 15552
15552: DISABLE
// begin globalGameSaveCounter := 0 ;
15553: LD_ADDR_EXP 39
15557: PUSH
15558: LD_INT 0
15560: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
15561: LD_STRING setGameSaveCounter(0)
15563: PPUSH
15564: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
15568: LD_STRING initStreamRollete();
15570: PPUSH
15571: CALL_OW 559
// InitStreamMode ;
15575: CALL 16901 0 0
// DefineStreamItems ( false ) ;
15579: LD_INT 0
15581: PPUSH
15582: CALL 17365 0 1
// end ;
15586: END
// export function SOS_MapStart ( ) ; begin
15587: LD_INT 0
15589: PPUSH
// if streamModeActive then
15590: LD_EXP 40
15594: IFFALSE 15603
// DefineStreamItems ( true ) ;
15596: LD_INT 1
15598: PPUSH
15599: CALL 17365 0 1
// UpdateLuaVariables ( ) ;
15603: CALL 15620 0 0
// UpdateFactoryWaypoints ( ) ;
15607: CALL 30234 0 0
// UpdateWarehouseGatheringPoints ( ) ;
15611: CALL 30491 0 0
// end ;
15615: LD_VAR 0 1
15619: RET
// function UpdateLuaVariables ( ) ; begin
15620: LD_INT 0
15622: PPUSH
// if globalGameSaveCounter then
15623: LD_EXP 39
15627: IFFALSE 15661
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
15629: LD_ADDR_EXP 39
15633: PUSH
15634: LD_EXP 39
15638: PPUSH
15639: CALL 74301 0 1
15643: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
15644: LD_STRING setGameSaveCounter(
15646: PUSH
15647: LD_EXP 39
15651: STR
15652: PUSH
15653: LD_STRING )
15655: STR
15656: PPUSH
15657: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
15661: LD_STRING setGameDifficulty(
15663: PUSH
15664: LD_OWVAR 67
15668: STR
15669: PUSH
15670: LD_STRING )
15672: STR
15673: PPUSH
15674: CALL_OW 559
// end ;
15678: LD_VAR 0 1
15682: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15683: LD_INT 0
15685: PPUSH
// if p2 = stream_mode then
15686: LD_VAR 0 2
15690: PUSH
15691: LD_INT 100
15693: EQUAL
15694: IFFALSE 16697
// begin if not StreamModeActive then
15696: LD_EXP 40
15700: NOT
15701: IFFALSE 15711
// StreamModeActive := true ;
15703: LD_ADDR_EXP 40
15707: PUSH
15708: LD_INT 1
15710: ST_TO_ADDR
// if p3 = 0 then
15711: LD_VAR 0 3
15715: PUSH
15716: LD_INT 0
15718: EQUAL
15719: IFFALSE 15725
// InitStreamMode ;
15721: CALL 16901 0 0
// if p3 = 1 then
15725: LD_VAR 0 3
15729: PUSH
15730: LD_INT 1
15732: EQUAL
15733: IFFALSE 15743
// sRocket := true ;
15735: LD_ADDR_EXP 45
15739: PUSH
15740: LD_INT 1
15742: ST_TO_ADDR
// if p3 = 2 then
15743: LD_VAR 0 3
15747: PUSH
15748: LD_INT 2
15750: EQUAL
15751: IFFALSE 15761
// sSpeed := true ;
15753: LD_ADDR_EXP 44
15757: PUSH
15758: LD_INT 1
15760: ST_TO_ADDR
// if p3 = 3 then
15761: LD_VAR 0 3
15765: PUSH
15766: LD_INT 3
15768: EQUAL
15769: IFFALSE 15779
// sEngine := true ;
15771: LD_ADDR_EXP 46
15775: PUSH
15776: LD_INT 1
15778: ST_TO_ADDR
// if p3 = 4 then
15779: LD_VAR 0 3
15783: PUSH
15784: LD_INT 4
15786: EQUAL
15787: IFFALSE 15797
// sSpec := true ;
15789: LD_ADDR_EXP 43
15793: PUSH
15794: LD_INT 1
15796: ST_TO_ADDR
// if p3 = 5 then
15797: LD_VAR 0 3
15801: PUSH
15802: LD_INT 5
15804: EQUAL
15805: IFFALSE 15815
// sLevel := true ;
15807: LD_ADDR_EXP 47
15811: PUSH
15812: LD_INT 1
15814: ST_TO_ADDR
// if p3 = 6 then
15815: LD_VAR 0 3
15819: PUSH
15820: LD_INT 6
15822: EQUAL
15823: IFFALSE 15833
// sArmoury := true ;
15825: LD_ADDR_EXP 48
15829: PUSH
15830: LD_INT 1
15832: ST_TO_ADDR
// if p3 = 7 then
15833: LD_VAR 0 3
15837: PUSH
15838: LD_INT 7
15840: EQUAL
15841: IFFALSE 15851
// sRadar := true ;
15843: LD_ADDR_EXP 49
15847: PUSH
15848: LD_INT 1
15850: ST_TO_ADDR
// if p3 = 8 then
15851: LD_VAR 0 3
15855: PUSH
15856: LD_INT 8
15858: EQUAL
15859: IFFALSE 15869
// sBunker := true ;
15861: LD_ADDR_EXP 50
15865: PUSH
15866: LD_INT 1
15868: ST_TO_ADDR
// if p3 = 9 then
15869: LD_VAR 0 3
15873: PUSH
15874: LD_INT 9
15876: EQUAL
15877: IFFALSE 15887
// sHack := true ;
15879: LD_ADDR_EXP 51
15883: PUSH
15884: LD_INT 1
15886: ST_TO_ADDR
// if p3 = 10 then
15887: LD_VAR 0 3
15891: PUSH
15892: LD_INT 10
15894: EQUAL
15895: IFFALSE 15905
// sFire := true ;
15897: LD_ADDR_EXP 52
15901: PUSH
15902: LD_INT 1
15904: ST_TO_ADDR
// if p3 = 11 then
15905: LD_VAR 0 3
15909: PUSH
15910: LD_INT 11
15912: EQUAL
15913: IFFALSE 15923
// sRefresh := true ;
15915: LD_ADDR_EXP 53
15919: PUSH
15920: LD_INT 1
15922: ST_TO_ADDR
// if p3 = 12 then
15923: LD_VAR 0 3
15927: PUSH
15928: LD_INT 12
15930: EQUAL
15931: IFFALSE 15941
// sExp := true ;
15933: LD_ADDR_EXP 54
15937: PUSH
15938: LD_INT 1
15940: ST_TO_ADDR
// if p3 = 13 then
15941: LD_VAR 0 3
15945: PUSH
15946: LD_INT 13
15948: EQUAL
15949: IFFALSE 15959
// sDepot := true ;
15951: LD_ADDR_EXP 55
15955: PUSH
15956: LD_INT 1
15958: ST_TO_ADDR
// if p3 = 14 then
15959: LD_VAR 0 3
15963: PUSH
15964: LD_INT 14
15966: EQUAL
15967: IFFALSE 15977
// sFlag := true ;
15969: LD_ADDR_EXP 56
15973: PUSH
15974: LD_INT 1
15976: ST_TO_ADDR
// if p3 = 15 then
15977: LD_VAR 0 3
15981: PUSH
15982: LD_INT 15
15984: EQUAL
15985: IFFALSE 15995
// sKamikadze := true ;
15987: LD_ADDR_EXP 64
15991: PUSH
15992: LD_INT 1
15994: ST_TO_ADDR
// if p3 = 16 then
15995: LD_VAR 0 3
15999: PUSH
16000: LD_INT 16
16002: EQUAL
16003: IFFALSE 16013
// sTroll := true ;
16005: LD_ADDR_EXP 65
16009: PUSH
16010: LD_INT 1
16012: ST_TO_ADDR
// if p3 = 17 then
16013: LD_VAR 0 3
16017: PUSH
16018: LD_INT 17
16020: EQUAL
16021: IFFALSE 16031
// sSlow := true ;
16023: LD_ADDR_EXP 66
16027: PUSH
16028: LD_INT 1
16030: ST_TO_ADDR
// if p3 = 18 then
16031: LD_VAR 0 3
16035: PUSH
16036: LD_INT 18
16038: EQUAL
16039: IFFALSE 16049
// sLack := true ;
16041: LD_ADDR_EXP 67
16045: PUSH
16046: LD_INT 1
16048: ST_TO_ADDR
// if p3 = 19 then
16049: LD_VAR 0 3
16053: PUSH
16054: LD_INT 19
16056: EQUAL
16057: IFFALSE 16067
// sTank := true ;
16059: LD_ADDR_EXP 69
16063: PUSH
16064: LD_INT 1
16066: ST_TO_ADDR
// if p3 = 20 then
16067: LD_VAR 0 3
16071: PUSH
16072: LD_INT 20
16074: EQUAL
16075: IFFALSE 16085
// sRemote := true ;
16077: LD_ADDR_EXP 70
16081: PUSH
16082: LD_INT 1
16084: ST_TO_ADDR
// if p3 = 21 then
16085: LD_VAR 0 3
16089: PUSH
16090: LD_INT 21
16092: EQUAL
16093: IFFALSE 16103
// sPowell := true ;
16095: LD_ADDR_EXP 71
16099: PUSH
16100: LD_INT 1
16102: ST_TO_ADDR
// if p3 = 22 then
16103: LD_VAR 0 3
16107: PUSH
16108: LD_INT 22
16110: EQUAL
16111: IFFALSE 16121
// sTeleport := true ;
16113: LD_ADDR_EXP 74
16117: PUSH
16118: LD_INT 1
16120: ST_TO_ADDR
// if p3 = 23 then
16121: LD_VAR 0 3
16125: PUSH
16126: LD_INT 23
16128: EQUAL
16129: IFFALSE 16139
// sOilTower := true ;
16131: LD_ADDR_EXP 76
16135: PUSH
16136: LD_INT 1
16138: ST_TO_ADDR
// if p3 = 24 then
16139: LD_VAR 0 3
16143: PUSH
16144: LD_INT 24
16146: EQUAL
16147: IFFALSE 16157
// sShovel := true ;
16149: LD_ADDR_EXP 77
16153: PUSH
16154: LD_INT 1
16156: ST_TO_ADDR
// if p3 = 25 then
16157: LD_VAR 0 3
16161: PUSH
16162: LD_INT 25
16164: EQUAL
16165: IFFALSE 16175
// sSheik := true ;
16167: LD_ADDR_EXP 78
16171: PUSH
16172: LD_INT 1
16174: ST_TO_ADDR
// if p3 = 26 then
16175: LD_VAR 0 3
16179: PUSH
16180: LD_INT 26
16182: EQUAL
16183: IFFALSE 16193
// sEarthquake := true ;
16185: LD_ADDR_EXP 80
16189: PUSH
16190: LD_INT 1
16192: ST_TO_ADDR
// if p3 = 27 then
16193: LD_VAR 0 3
16197: PUSH
16198: LD_INT 27
16200: EQUAL
16201: IFFALSE 16211
// sAI := true ;
16203: LD_ADDR_EXP 81
16207: PUSH
16208: LD_INT 1
16210: ST_TO_ADDR
// if p3 = 28 then
16211: LD_VAR 0 3
16215: PUSH
16216: LD_INT 28
16218: EQUAL
16219: IFFALSE 16229
// sCargo := true ;
16221: LD_ADDR_EXP 84
16225: PUSH
16226: LD_INT 1
16228: ST_TO_ADDR
// if p3 = 29 then
16229: LD_VAR 0 3
16233: PUSH
16234: LD_INT 29
16236: EQUAL
16237: IFFALSE 16247
// sDLaser := true ;
16239: LD_ADDR_EXP 85
16243: PUSH
16244: LD_INT 1
16246: ST_TO_ADDR
// if p3 = 30 then
16247: LD_VAR 0 3
16251: PUSH
16252: LD_INT 30
16254: EQUAL
16255: IFFALSE 16265
// sExchange := true ;
16257: LD_ADDR_EXP 86
16261: PUSH
16262: LD_INT 1
16264: ST_TO_ADDR
// if p3 = 31 then
16265: LD_VAR 0 3
16269: PUSH
16270: LD_INT 31
16272: EQUAL
16273: IFFALSE 16283
// sFac := true ;
16275: LD_ADDR_EXP 87
16279: PUSH
16280: LD_INT 1
16282: ST_TO_ADDR
// if p3 = 32 then
16283: LD_VAR 0 3
16287: PUSH
16288: LD_INT 32
16290: EQUAL
16291: IFFALSE 16301
// sPower := true ;
16293: LD_ADDR_EXP 88
16297: PUSH
16298: LD_INT 1
16300: ST_TO_ADDR
// if p3 = 33 then
16301: LD_VAR 0 3
16305: PUSH
16306: LD_INT 33
16308: EQUAL
16309: IFFALSE 16319
// sRandom := true ;
16311: LD_ADDR_EXP 89
16315: PUSH
16316: LD_INT 1
16318: ST_TO_ADDR
// if p3 = 34 then
16319: LD_VAR 0 3
16323: PUSH
16324: LD_INT 34
16326: EQUAL
16327: IFFALSE 16337
// sShield := true ;
16329: LD_ADDR_EXP 90
16333: PUSH
16334: LD_INT 1
16336: ST_TO_ADDR
// if p3 = 35 then
16337: LD_VAR 0 3
16341: PUSH
16342: LD_INT 35
16344: EQUAL
16345: IFFALSE 16355
// sTime := true ;
16347: LD_ADDR_EXP 91
16351: PUSH
16352: LD_INT 1
16354: ST_TO_ADDR
// if p3 = 36 then
16355: LD_VAR 0 3
16359: PUSH
16360: LD_INT 36
16362: EQUAL
16363: IFFALSE 16373
// sTools := true ;
16365: LD_ADDR_EXP 92
16369: PUSH
16370: LD_INT 1
16372: ST_TO_ADDR
// if p3 = 101 then
16373: LD_VAR 0 3
16377: PUSH
16378: LD_INT 101
16380: EQUAL
16381: IFFALSE 16391
// sSold := true ;
16383: LD_ADDR_EXP 57
16387: PUSH
16388: LD_INT 1
16390: ST_TO_ADDR
// if p3 = 102 then
16391: LD_VAR 0 3
16395: PUSH
16396: LD_INT 102
16398: EQUAL
16399: IFFALSE 16409
// sDiff := true ;
16401: LD_ADDR_EXP 58
16405: PUSH
16406: LD_INT 1
16408: ST_TO_ADDR
// if p3 = 103 then
16409: LD_VAR 0 3
16413: PUSH
16414: LD_INT 103
16416: EQUAL
16417: IFFALSE 16427
// sFog := true ;
16419: LD_ADDR_EXP 61
16423: PUSH
16424: LD_INT 1
16426: ST_TO_ADDR
// if p3 = 104 then
16427: LD_VAR 0 3
16431: PUSH
16432: LD_INT 104
16434: EQUAL
16435: IFFALSE 16445
// sReset := true ;
16437: LD_ADDR_EXP 62
16441: PUSH
16442: LD_INT 1
16444: ST_TO_ADDR
// if p3 = 105 then
16445: LD_VAR 0 3
16449: PUSH
16450: LD_INT 105
16452: EQUAL
16453: IFFALSE 16463
// sSun := true ;
16455: LD_ADDR_EXP 63
16459: PUSH
16460: LD_INT 1
16462: ST_TO_ADDR
// if p3 = 106 then
16463: LD_VAR 0 3
16467: PUSH
16468: LD_INT 106
16470: EQUAL
16471: IFFALSE 16481
// sTiger := true ;
16473: LD_ADDR_EXP 59
16477: PUSH
16478: LD_INT 1
16480: ST_TO_ADDR
// if p3 = 107 then
16481: LD_VAR 0 3
16485: PUSH
16486: LD_INT 107
16488: EQUAL
16489: IFFALSE 16499
// sBomb := true ;
16491: LD_ADDR_EXP 60
16495: PUSH
16496: LD_INT 1
16498: ST_TO_ADDR
// if p3 = 108 then
16499: LD_VAR 0 3
16503: PUSH
16504: LD_INT 108
16506: EQUAL
16507: IFFALSE 16517
// sWound := true ;
16509: LD_ADDR_EXP 68
16513: PUSH
16514: LD_INT 1
16516: ST_TO_ADDR
// if p3 = 109 then
16517: LD_VAR 0 3
16521: PUSH
16522: LD_INT 109
16524: EQUAL
16525: IFFALSE 16535
// sBetray := true ;
16527: LD_ADDR_EXP 72
16531: PUSH
16532: LD_INT 1
16534: ST_TO_ADDR
// if p3 = 110 then
16535: LD_VAR 0 3
16539: PUSH
16540: LD_INT 110
16542: EQUAL
16543: IFFALSE 16553
// sContamin := true ;
16545: LD_ADDR_EXP 73
16549: PUSH
16550: LD_INT 1
16552: ST_TO_ADDR
// if p3 = 111 then
16553: LD_VAR 0 3
16557: PUSH
16558: LD_INT 111
16560: EQUAL
16561: IFFALSE 16571
// sOil := true ;
16563: LD_ADDR_EXP 75
16567: PUSH
16568: LD_INT 1
16570: ST_TO_ADDR
// if p3 = 112 then
16571: LD_VAR 0 3
16575: PUSH
16576: LD_INT 112
16578: EQUAL
16579: IFFALSE 16589
// sStu := true ;
16581: LD_ADDR_EXP 79
16585: PUSH
16586: LD_INT 1
16588: ST_TO_ADDR
// if p3 = 113 then
16589: LD_VAR 0 3
16593: PUSH
16594: LD_INT 113
16596: EQUAL
16597: IFFALSE 16607
// sBazooka := true ;
16599: LD_ADDR_EXP 82
16603: PUSH
16604: LD_INT 1
16606: ST_TO_ADDR
// if p3 = 114 then
16607: LD_VAR 0 3
16611: PUSH
16612: LD_INT 114
16614: EQUAL
16615: IFFALSE 16625
// sMortar := true ;
16617: LD_ADDR_EXP 83
16621: PUSH
16622: LD_INT 1
16624: ST_TO_ADDR
// if p3 = 115 then
16625: LD_VAR 0 3
16629: PUSH
16630: LD_INT 115
16632: EQUAL
16633: IFFALSE 16643
// sRanger := true ;
16635: LD_ADDR_EXP 93
16639: PUSH
16640: LD_INT 1
16642: ST_TO_ADDR
// if p3 = 116 then
16643: LD_VAR 0 3
16647: PUSH
16648: LD_INT 116
16650: EQUAL
16651: IFFALSE 16661
// sComputer := true ;
16653: LD_ADDR_EXP 94
16657: PUSH
16658: LD_INT 1
16660: ST_TO_ADDR
// if p3 = 117 then
16661: LD_VAR 0 3
16665: PUSH
16666: LD_INT 117
16668: EQUAL
16669: IFFALSE 16679
// s30 := true ;
16671: LD_ADDR_EXP 95
16675: PUSH
16676: LD_INT 1
16678: ST_TO_ADDR
// if p3 = 118 then
16679: LD_VAR 0 3
16683: PUSH
16684: LD_INT 118
16686: EQUAL
16687: IFFALSE 16697
// s60 := true ;
16689: LD_ADDR_EXP 96
16693: PUSH
16694: LD_INT 1
16696: ST_TO_ADDR
// end ; if p2 = hack_mode then
16697: LD_VAR 0 2
16701: PUSH
16702: LD_INT 101
16704: EQUAL
16705: IFFALSE 16833
// begin case p3 of 1 :
16707: LD_VAR 0 3
16711: PUSH
16712: LD_INT 1
16714: DOUBLE
16715: EQUAL
16716: IFTRUE 16720
16718: GO 16727
16720: POP
// hHackUnlimitedResources ; 2 :
16721: CALL 28980 0 0
16725: GO 16833
16727: LD_INT 2
16729: DOUBLE
16730: EQUAL
16731: IFTRUE 16735
16733: GO 16742
16735: POP
// hHackSetLevel10 ; 3 :
16736: CALL 29113 0 0
16740: GO 16833
16742: LD_INT 3
16744: DOUBLE
16745: EQUAL
16746: IFTRUE 16750
16748: GO 16757
16750: POP
// hHackSetLevel10YourUnits ; 4 :
16751: CALL 29198 0 0
16755: GO 16833
16757: LD_INT 4
16759: DOUBLE
16760: EQUAL
16761: IFTRUE 16765
16763: GO 16772
16765: POP
// hHackInvincible ; 5 :
16766: CALL 29646 0 0
16770: GO 16833
16772: LD_INT 5
16774: DOUBLE
16775: EQUAL
16776: IFTRUE 16780
16778: GO 16787
16780: POP
// hHackInvisible ; 6 :
16781: CALL 29757 0 0
16785: GO 16833
16787: LD_INT 6
16789: DOUBLE
16790: EQUAL
16791: IFTRUE 16795
16793: GO 16802
16795: POP
// hHackChangeYourSide ; 7 :
16796: CALL 29814 0 0
16800: GO 16833
16802: LD_INT 7
16804: DOUBLE
16805: EQUAL
16806: IFTRUE 16810
16808: GO 16817
16810: POP
// hHackChangeUnitSide ; 8 :
16811: CALL 29856 0 0
16815: GO 16833
16817: LD_INT 8
16819: DOUBLE
16820: EQUAL
16821: IFTRUE 16825
16823: GO 16832
16825: POP
// hHackFog ; end ;
16826: CALL 29957 0 0
16830: GO 16833
16832: POP
// end ; if p2 = game_save_mode then
16833: LD_VAR 0 2
16837: PUSH
16838: LD_INT 102
16840: EQUAL
16841: IFFALSE 16896
// begin if p3 = 1 then
16843: LD_VAR 0 3
16847: PUSH
16848: LD_INT 1
16850: EQUAL
16851: IFFALSE 16863
// globalGameSaveCounter := p4 ;
16853: LD_ADDR_EXP 39
16857: PUSH
16858: LD_VAR 0 4
16862: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
16863: LD_VAR 0 3
16867: PUSH
16868: LD_INT 2
16870: EQUAL
16871: PUSH
16872: LD_EXP 39
16876: AND
16877: IFFALSE 16896
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
16879: LD_STRING setGameSaveCounter(
16881: PUSH
16882: LD_EXP 39
16886: STR
16887: PUSH
16888: LD_STRING )
16890: STR
16891: PPUSH
16892: CALL_OW 559
// end ; end ;
16896: LD_VAR 0 7
16900: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
16901: LD_INT 0
16903: PPUSH
// streamModeActive := false ;
16904: LD_ADDR_EXP 40
16908: PUSH
16909: LD_INT 0
16911: ST_TO_ADDR
// normalCounter := 36 ;
16912: LD_ADDR_EXP 41
16916: PUSH
16917: LD_INT 36
16919: ST_TO_ADDR
// hardcoreCounter := 18 ;
16920: LD_ADDR_EXP 42
16924: PUSH
16925: LD_INT 18
16927: ST_TO_ADDR
// sRocket := false ;
16928: LD_ADDR_EXP 45
16932: PUSH
16933: LD_INT 0
16935: ST_TO_ADDR
// sSpeed := false ;
16936: LD_ADDR_EXP 44
16940: PUSH
16941: LD_INT 0
16943: ST_TO_ADDR
// sEngine := false ;
16944: LD_ADDR_EXP 46
16948: PUSH
16949: LD_INT 0
16951: ST_TO_ADDR
// sSpec := false ;
16952: LD_ADDR_EXP 43
16956: PUSH
16957: LD_INT 0
16959: ST_TO_ADDR
// sLevel := false ;
16960: LD_ADDR_EXP 47
16964: PUSH
16965: LD_INT 0
16967: ST_TO_ADDR
// sArmoury := false ;
16968: LD_ADDR_EXP 48
16972: PUSH
16973: LD_INT 0
16975: ST_TO_ADDR
// sRadar := false ;
16976: LD_ADDR_EXP 49
16980: PUSH
16981: LD_INT 0
16983: ST_TO_ADDR
// sBunker := false ;
16984: LD_ADDR_EXP 50
16988: PUSH
16989: LD_INT 0
16991: ST_TO_ADDR
// sHack := false ;
16992: LD_ADDR_EXP 51
16996: PUSH
16997: LD_INT 0
16999: ST_TO_ADDR
// sFire := false ;
17000: LD_ADDR_EXP 52
17004: PUSH
17005: LD_INT 0
17007: ST_TO_ADDR
// sRefresh := false ;
17008: LD_ADDR_EXP 53
17012: PUSH
17013: LD_INT 0
17015: ST_TO_ADDR
// sExp := false ;
17016: LD_ADDR_EXP 54
17020: PUSH
17021: LD_INT 0
17023: ST_TO_ADDR
// sDepot := false ;
17024: LD_ADDR_EXP 55
17028: PUSH
17029: LD_INT 0
17031: ST_TO_ADDR
// sFlag := false ;
17032: LD_ADDR_EXP 56
17036: PUSH
17037: LD_INT 0
17039: ST_TO_ADDR
// sKamikadze := false ;
17040: LD_ADDR_EXP 64
17044: PUSH
17045: LD_INT 0
17047: ST_TO_ADDR
// sTroll := false ;
17048: LD_ADDR_EXP 65
17052: PUSH
17053: LD_INT 0
17055: ST_TO_ADDR
// sSlow := false ;
17056: LD_ADDR_EXP 66
17060: PUSH
17061: LD_INT 0
17063: ST_TO_ADDR
// sLack := false ;
17064: LD_ADDR_EXP 67
17068: PUSH
17069: LD_INT 0
17071: ST_TO_ADDR
// sTank := false ;
17072: LD_ADDR_EXP 69
17076: PUSH
17077: LD_INT 0
17079: ST_TO_ADDR
// sRemote := false ;
17080: LD_ADDR_EXP 70
17084: PUSH
17085: LD_INT 0
17087: ST_TO_ADDR
// sPowell := false ;
17088: LD_ADDR_EXP 71
17092: PUSH
17093: LD_INT 0
17095: ST_TO_ADDR
// sTeleport := false ;
17096: LD_ADDR_EXP 74
17100: PUSH
17101: LD_INT 0
17103: ST_TO_ADDR
// sOilTower := false ;
17104: LD_ADDR_EXP 76
17108: PUSH
17109: LD_INT 0
17111: ST_TO_ADDR
// sShovel := false ;
17112: LD_ADDR_EXP 77
17116: PUSH
17117: LD_INT 0
17119: ST_TO_ADDR
// sSheik := false ;
17120: LD_ADDR_EXP 78
17124: PUSH
17125: LD_INT 0
17127: ST_TO_ADDR
// sEarthquake := false ;
17128: LD_ADDR_EXP 80
17132: PUSH
17133: LD_INT 0
17135: ST_TO_ADDR
// sAI := false ;
17136: LD_ADDR_EXP 81
17140: PUSH
17141: LD_INT 0
17143: ST_TO_ADDR
// sCargo := false ;
17144: LD_ADDR_EXP 84
17148: PUSH
17149: LD_INT 0
17151: ST_TO_ADDR
// sDLaser := false ;
17152: LD_ADDR_EXP 85
17156: PUSH
17157: LD_INT 0
17159: ST_TO_ADDR
// sExchange := false ;
17160: LD_ADDR_EXP 86
17164: PUSH
17165: LD_INT 0
17167: ST_TO_ADDR
// sFac := false ;
17168: LD_ADDR_EXP 87
17172: PUSH
17173: LD_INT 0
17175: ST_TO_ADDR
// sPower := false ;
17176: LD_ADDR_EXP 88
17180: PUSH
17181: LD_INT 0
17183: ST_TO_ADDR
// sRandom := false ;
17184: LD_ADDR_EXP 89
17188: PUSH
17189: LD_INT 0
17191: ST_TO_ADDR
// sShield := false ;
17192: LD_ADDR_EXP 90
17196: PUSH
17197: LD_INT 0
17199: ST_TO_ADDR
// sTime := false ;
17200: LD_ADDR_EXP 91
17204: PUSH
17205: LD_INT 0
17207: ST_TO_ADDR
// sTools := false ;
17208: LD_ADDR_EXP 92
17212: PUSH
17213: LD_INT 0
17215: ST_TO_ADDR
// sSold := false ;
17216: LD_ADDR_EXP 57
17220: PUSH
17221: LD_INT 0
17223: ST_TO_ADDR
// sDiff := false ;
17224: LD_ADDR_EXP 58
17228: PUSH
17229: LD_INT 0
17231: ST_TO_ADDR
// sFog := false ;
17232: LD_ADDR_EXP 61
17236: PUSH
17237: LD_INT 0
17239: ST_TO_ADDR
// sReset := false ;
17240: LD_ADDR_EXP 62
17244: PUSH
17245: LD_INT 0
17247: ST_TO_ADDR
// sSun := false ;
17248: LD_ADDR_EXP 63
17252: PUSH
17253: LD_INT 0
17255: ST_TO_ADDR
// sTiger := false ;
17256: LD_ADDR_EXP 59
17260: PUSH
17261: LD_INT 0
17263: ST_TO_ADDR
// sBomb := false ;
17264: LD_ADDR_EXP 60
17268: PUSH
17269: LD_INT 0
17271: ST_TO_ADDR
// sWound := false ;
17272: LD_ADDR_EXP 68
17276: PUSH
17277: LD_INT 0
17279: ST_TO_ADDR
// sBetray := false ;
17280: LD_ADDR_EXP 72
17284: PUSH
17285: LD_INT 0
17287: ST_TO_ADDR
// sContamin := false ;
17288: LD_ADDR_EXP 73
17292: PUSH
17293: LD_INT 0
17295: ST_TO_ADDR
// sOil := false ;
17296: LD_ADDR_EXP 75
17300: PUSH
17301: LD_INT 0
17303: ST_TO_ADDR
// sStu := false ;
17304: LD_ADDR_EXP 79
17308: PUSH
17309: LD_INT 0
17311: ST_TO_ADDR
// sBazooka := false ;
17312: LD_ADDR_EXP 82
17316: PUSH
17317: LD_INT 0
17319: ST_TO_ADDR
// sMortar := false ;
17320: LD_ADDR_EXP 83
17324: PUSH
17325: LD_INT 0
17327: ST_TO_ADDR
// sRanger := false ;
17328: LD_ADDR_EXP 93
17332: PUSH
17333: LD_INT 0
17335: ST_TO_ADDR
// sComputer := false ;
17336: LD_ADDR_EXP 94
17340: PUSH
17341: LD_INT 0
17343: ST_TO_ADDR
// s30 := false ;
17344: LD_ADDR_EXP 95
17348: PUSH
17349: LD_INT 0
17351: ST_TO_ADDR
// s60 := false ;
17352: LD_ADDR_EXP 96
17356: PUSH
17357: LD_INT 0
17359: ST_TO_ADDR
// end ;
17360: LD_VAR 0 1
17364: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
17365: LD_INT 0
17367: PPUSH
17368: PPUSH
17369: PPUSH
17370: PPUSH
17371: PPUSH
17372: PPUSH
17373: PPUSH
// result := [ ] ;
17374: LD_ADDR_VAR 0 2
17378: PUSH
17379: EMPTY
17380: ST_TO_ADDR
// if campaign_id = 1 then
17381: LD_OWVAR 69
17385: PUSH
17386: LD_INT 1
17388: EQUAL
17389: IFFALSE 20555
// begin case mission_number of 1 :
17391: LD_OWVAR 70
17395: PUSH
17396: LD_INT 1
17398: DOUBLE
17399: EQUAL
17400: IFTRUE 17404
17402: GO 17480
17404: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
17405: LD_ADDR_VAR 0 2
17409: PUSH
17410: LD_INT 2
17412: PUSH
17413: LD_INT 4
17415: PUSH
17416: LD_INT 11
17418: PUSH
17419: LD_INT 12
17421: PUSH
17422: LD_INT 15
17424: PUSH
17425: LD_INT 16
17427: PUSH
17428: LD_INT 22
17430: PUSH
17431: LD_INT 23
17433: PUSH
17434: LD_INT 26
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: PUSH
17448: LD_INT 101
17450: PUSH
17451: LD_INT 102
17453: PUSH
17454: LD_INT 106
17456: PUSH
17457: LD_INT 116
17459: PUSH
17460: LD_INT 117
17462: PUSH
17463: LD_INT 118
17465: PUSH
17466: EMPTY
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: ST_TO_ADDR
17478: GO 20553
17480: LD_INT 2
17482: DOUBLE
17483: EQUAL
17484: IFTRUE 17488
17486: GO 17572
17488: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
17489: LD_ADDR_VAR 0 2
17493: PUSH
17494: LD_INT 2
17496: PUSH
17497: LD_INT 4
17499: PUSH
17500: LD_INT 11
17502: PUSH
17503: LD_INT 12
17505: PUSH
17506: LD_INT 15
17508: PUSH
17509: LD_INT 16
17511: PUSH
17512: LD_INT 22
17514: PUSH
17515: LD_INT 23
17517: PUSH
17518: LD_INT 26
17520: PUSH
17521: EMPTY
17522: LIST
17523: LIST
17524: LIST
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: PUSH
17532: LD_INT 101
17534: PUSH
17535: LD_INT 102
17537: PUSH
17538: LD_INT 105
17540: PUSH
17541: LD_INT 106
17543: PUSH
17544: LD_INT 108
17546: PUSH
17547: LD_INT 116
17549: PUSH
17550: LD_INT 117
17552: PUSH
17553: LD_INT 118
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: ST_TO_ADDR
17570: GO 20553
17572: LD_INT 3
17574: DOUBLE
17575: EQUAL
17576: IFTRUE 17580
17578: GO 17668
17580: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
17581: LD_ADDR_VAR 0 2
17585: PUSH
17586: LD_INT 2
17588: PUSH
17589: LD_INT 4
17591: PUSH
17592: LD_INT 5
17594: PUSH
17595: LD_INT 11
17597: PUSH
17598: LD_INT 12
17600: PUSH
17601: LD_INT 15
17603: PUSH
17604: LD_INT 16
17606: PUSH
17607: LD_INT 22
17609: PUSH
17610: LD_INT 26
17612: PUSH
17613: LD_INT 36
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: LIST
17620: LIST
17621: LIST
17622: LIST
17623: LIST
17624: LIST
17625: LIST
17626: LIST
17627: PUSH
17628: LD_INT 101
17630: PUSH
17631: LD_INT 102
17633: PUSH
17634: LD_INT 105
17636: PUSH
17637: LD_INT 106
17639: PUSH
17640: LD_INT 108
17642: PUSH
17643: LD_INT 116
17645: PUSH
17646: LD_INT 117
17648: PUSH
17649: LD_INT 118
17651: PUSH
17652: EMPTY
17653: LIST
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: LIST
17660: LIST
17661: PUSH
17662: EMPTY
17663: LIST
17664: LIST
17665: ST_TO_ADDR
17666: GO 20553
17668: LD_INT 4
17670: DOUBLE
17671: EQUAL
17672: IFTRUE 17676
17674: GO 17772
17676: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
17677: LD_ADDR_VAR 0 2
17681: PUSH
17682: LD_INT 2
17684: PUSH
17685: LD_INT 4
17687: PUSH
17688: LD_INT 5
17690: PUSH
17691: LD_INT 8
17693: PUSH
17694: LD_INT 11
17696: PUSH
17697: LD_INT 12
17699: PUSH
17700: LD_INT 15
17702: PUSH
17703: LD_INT 16
17705: PUSH
17706: LD_INT 22
17708: PUSH
17709: LD_INT 23
17711: PUSH
17712: LD_INT 26
17714: PUSH
17715: LD_INT 36
17717: PUSH
17718: EMPTY
17719: LIST
17720: LIST
17721: LIST
17722: LIST
17723: LIST
17724: LIST
17725: LIST
17726: LIST
17727: LIST
17728: LIST
17729: LIST
17730: LIST
17731: PUSH
17732: LD_INT 101
17734: PUSH
17735: LD_INT 102
17737: PUSH
17738: LD_INT 105
17740: PUSH
17741: LD_INT 106
17743: PUSH
17744: LD_INT 108
17746: PUSH
17747: LD_INT 116
17749: PUSH
17750: LD_INT 117
17752: PUSH
17753: LD_INT 118
17755: PUSH
17756: EMPTY
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: LIST
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: ST_TO_ADDR
17770: GO 20553
17772: LD_INT 5
17774: DOUBLE
17775: EQUAL
17776: IFTRUE 17780
17778: GO 17892
17780: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
17781: LD_ADDR_VAR 0 2
17785: PUSH
17786: LD_INT 2
17788: PUSH
17789: LD_INT 4
17791: PUSH
17792: LD_INT 5
17794: PUSH
17795: LD_INT 6
17797: PUSH
17798: LD_INT 8
17800: PUSH
17801: LD_INT 11
17803: PUSH
17804: LD_INT 12
17806: PUSH
17807: LD_INT 15
17809: PUSH
17810: LD_INT 16
17812: PUSH
17813: LD_INT 22
17815: PUSH
17816: LD_INT 23
17818: PUSH
17819: LD_INT 25
17821: PUSH
17822: LD_INT 26
17824: PUSH
17825: LD_INT 36
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: LIST
17832: LIST
17833: LIST
17834: LIST
17835: LIST
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: LIST
17841: LIST
17842: LIST
17843: PUSH
17844: LD_INT 101
17846: PUSH
17847: LD_INT 102
17849: PUSH
17850: LD_INT 105
17852: PUSH
17853: LD_INT 106
17855: PUSH
17856: LD_INT 108
17858: PUSH
17859: LD_INT 109
17861: PUSH
17862: LD_INT 112
17864: PUSH
17865: LD_INT 116
17867: PUSH
17868: LD_INT 117
17870: PUSH
17871: LD_INT 118
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: LIST
17878: LIST
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: LIST
17884: LIST
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: ST_TO_ADDR
17890: GO 20553
17892: LD_INT 6
17894: DOUBLE
17895: EQUAL
17896: IFTRUE 17900
17898: GO 18032
17900: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
17901: LD_ADDR_VAR 0 2
17905: PUSH
17906: LD_INT 2
17908: PUSH
17909: LD_INT 4
17911: PUSH
17912: LD_INT 5
17914: PUSH
17915: LD_INT 6
17917: PUSH
17918: LD_INT 8
17920: PUSH
17921: LD_INT 11
17923: PUSH
17924: LD_INT 12
17926: PUSH
17927: LD_INT 15
17929: PUSH
17930: LD_INT 16
17932: PUSH
17933: LD_INT 20
17935: PUSH
17936: LD_INT 21
17938: PUSH
17939: LD_INT 22
17941: PUSH
17942: LD_INT 23
17944: PUSH
17945: LD_INT 25
17947: PUSH
17948: LD_INT 26
17950: PUSH
17951: LD_INT 30
17953: PUSH
17954: LD_INT 31
17956: PUSH
17957: LD_INT 32
17959: PUSH
17960: LD_INT 36
17962: PUSH
17963: EMPTY
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: LIST
17982: LIST
17983: PUSH
17984: LD_INT 101
17986: PUSH
17987: LD_INT 102
17989: PUSH
17990: LD_INT 105
17992: PUSH
17993: LD_INT 106
17995: PUSH
17996: LD_INT 108
17998: PUSH
17999: LD_INT 109
18001: PUSH
18002: LD_INT 112
18004: PUSH
18005: LD_INT 116
18007: PUSH
18008: LD_INT 117
18010: PUSH
18011: LD_INT 118
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: PUSH
18026: EMPTY
18027: LIST
18028: LIST
18029: ST_TO_ADDR
18030: GO 20553
18032: LD_INT 7
18034: DOUBLE
18035: EQUAL
18036: IFTRUE 18040
18038: GO 18152
18040: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
18041: LD_ADDR_VAR 0 2
18045: PUSH
18046: LD_INT 2
18048: PUSH
18049: LD_INT 4
18051: PUSH
18052: LD_INT 5
18054: PUSH
18055: LD_INT 7
18057: PUSH
18058: LD_INT 11
18060: PUSH
18061: LD_INT 12
18063: PUSH
18064: LD_INT 15
18066: PUSH
18067: LD_INT 16
18069: PUSH
18070: LD_INT 20
18072: PUSH
18073: LD_INT 21
18075: PUSH
18076: LD_INT 22
18078: PUSH
18079: LD_INT 23
18081: PUSH
18082: LD_INT 25
18084: PUSH
18085: LD_INT 26
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: LIST
18100: LIST
18101: LIST
18102: LIST
18103: PUSH
18104: LD_INT 101
18106: PUSH
18107: LD_INT 102
18109: PUSH
18110: LD_INT 103
18112: PUSH
18113: LD_INT 105
18115: PUSH
18116: LD_INT 106
18118: PUSH
18119: LD_INT 108
18121: PUSH
18122: LD_INT 112
18124: PUSH
18125: LD_INT 116
18127: PUSH
18128: LD_INT 117
18130: PUSH
18131: LD_INT 118
18133: PUSH
18134: EMPTY
18135: LIST
18136: LIST
18137: LIST
18138: LIST
18139: LIST
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: LIST
18145: PUSH
18146: EMPTY
18147: LIST
18148: LIST
18149: ST_TO_ADDR
18150: GO 20553
18152: LD_INT 8
18154: DOUBLE
18155: EQUAL
18156: IFTRUE 18160
18158: GO 18300
18160: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
18161: LD_ADDR_VAR 0 2
18165: PUSH
18166: LD_INT 2
18168: PUSH
18169: LD_INT 4
18171: PUSH
18172: LD_INT 5
18174: PUSH
18175: LD_INT 6
18177: PUSH
18178: LD_INT 7
18180: PUSH
18181: LD_INT 8
18183: PUSH
18184: LD_INT 11
18186: PUSH
18187: LD_INT 12
18189: PUSH
18190: LD_INT 15
18192: PUSH
18193: LD_INT 16
18195: PUSH
18196: LD_INT 20
18198: PUSH
18199: LD_INT 21
18201: PUSH
18202: LD_INT 22
18204: PUSH
18205: LD_INT 23
18207: PUSH
18208: LD_INT 25
18210: PUSH
18211: LD_INT 26
18213: PUSH
18214: LD_INT 30
18216: PUSH
18217: LD_INT 31
18219: PUSH
18220: LD_INT 32
18222: PUSH
18223: LD_INT 36
18225: PUSH
18226: EMPTY
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: LIST
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: LIST
18240: LIST
18241: LIST
18242: LIST
18243: LIST
18244: LIST
18245: LIST
18246: LIST
18247: PUSH
18248: LD_INT 101
18250: PUSH
18251: LD_INT 102
18253: PUSH
18254: LD_INT 103
18256: PUSH
18257: LD_INT 105
18259: PUSH
18260: LD_INT 106
18262: PUSH
18263: LD_INT 108
18265: PUSH
18266: LD_INT 109
18268: PUSH
18269: LD_INT 112
18271: PUSH
18272: LD_INT 116
18274: PUSH
18275: LD_INT 117
18277: PUSH
18278: LD_INT 118
18280: PUSH
18281: EMPTY
18282: LIST
18283: LIST
18284: LIST
18285: LIST
18286: LIST
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: ST_TO_ADDR
18298: GO 20553
18300: LD_INT 9
18302: DOUBLE
18303: EQUAL
18304: IFTRUE 18308
18306: GO 18456
18308: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
18309: LD_ADDR_VAR 0 2
18313: PUSH
18314: LD_INT 2
18316: PUSH
18317: LD_INT 4
18319: PUSH
18320: LD_INT 5
18322: PUSH
18323: LD_INT 6
18325: PUSH
18326: LD_INT 7
18328: PUSH
18329: LD_INT 8
18331: PUSH
18332: LD_INT 11
18334: PUSH
18335: LD_INT 12
18337: PUSH
18338: LD_INT 15
18340: PUSH
18341: LD_INT 16
18343: PUSH
18344: LD_INT 20
18346: PUSH
18347: LD_INT 21
18349: PUSH
18350: LD_INT 22
18352: PUSH
18353: LD_INT 23
18355: PUSH
18356: LD_INT 25
18358: PUSH
18359: LD_INT 26
18361: PUSH
18362: LD_INT 28
18364: PUSH
18365: LD_INT 30
18367: PUSH
18368: LD_INT 31
18370: PUSH
18371: LD_INT 32
18373: PUSH
18374: LD_INT 36
18376: PUSH
18377: EMPTY
18378: LIST
18379: LIST
18380: LIST
18381: LIST
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: LIST
18395: LIST
18396: LIST
18397: LIST
18398: LIST
18399: PUSH
18400: LD_INT 101
18402: PUSH
18403: LD_INT 102
18405: PUSH
18406: LD_INT 103
18408: PUSH
18409: LD_INT 105
18411: PUSH
18412: LD_INT 106
18414: PUSH
18415: LD_INT 108
18417: PUSH
18418: LD_INT 109
18420: PUSH
18421: LD_INT 112
18423: PUSH
18424: LD_INT 114
18426: PUSH
18427: LD_INT 116
18429: PUSH
18430: LD_INT 117
18432: PUSH
18433: LD_INT 118
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: LIST
18440: LIST
18441: LIST
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: LIST
18448: LIST
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: ST_TO_ADDR
18454: GO 20553
18456: LD_INT 10
18458: DOUBLE
18459: EQUAL
18460: IFTRUE 18464
18462: GO 18660
18464: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
18465: LD_ADDR_VAR 0 2
18469: PUSH
18470: LD_INT 2
18472: PUSH
18473: LD_INT 4
18475: PUSH
18476: LD_INT 5
18478: PUSH
18479: LD_INT 6
18481: PUSH
18482: LD_INT 7
18484: PUSH
18485: LD_INT 8
18487: PUSH
18488: LD_INT 9
18490: PUSH
18491: LD_INT 10
18493: PUSH
18494: LD_INT 11
18496: PUSH
18497: LD_INT 12
18499: PUSH
18500: LD_INT 13
18502: PUSH
18503: LD_INT 14
18505: PUSH
18506: LD_INT 15
18508: PUSH
18509: LD_INT 16
18511: PUSH
18512: LD_INT 17
18514: PUSH
18515: LD_INT 18
18517: PUSH
18518: LD_INT 19
18520: PUSH
18521: LD_INT 20
18523: PUSH
18524: LD_INT 21
18526: PUSH
18527: LD_INT 22
18529: PUSH
18530: LD_INT 23
18532: PUSH
18533: LD_INT 24
18535: PUSH
18536: LD_INT 25
18538: PUSH
18539: LD_INT 26
18541: PUSH
18542: LD_INT 28
18544: PUSH
18545: LD_INT 30
18547: PUSH
18548: LD_INT 31
18550: PUSH
18551: LD_INT 32
18553: PUSH
18554: LD_INT 36
18556: PUSH
18557: EMPTY
18558: LIST
18559: LIST
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: LIST
18587: PUSH
18588: LD_INT 101
18590: PUSH
18591: LD_INT 102
18593: PUSH
18594: LD_INT 103
18596: PUSH
18597: LD_INT 104
18599: PUSH
18600: LD_INT 105
18602: PUSH
18603: LD_INT 106
18605: PUSH
18606: LD_INT 107
18608: PUSH
18609: LD_INT 108
18611: PUSH
18612: LD_INT 109
18614: PUSH
18615: LD_INT 110
18617: PUSH
18618: LD_INT 111
18620: PUSH
18621: LD_INT 112
18623: PUSH
18624: LD_INT 114
18626: PUSH
18627: LD_INT 116
18629: PUSH
18630: LD_INT 117
18632: PUSH
18633: LD_INT 118
18635: PUSH
18636: EMPTY
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: LIST
18648: LIST
18649: LIST
18650: LIST
18651: LIST
18652: LIST
18653: PUSH
18654: EMPTY
18655: LIST
18656: LIST
18657: ST_TO_ADDR
18658: GO 20553
18660: LD_INT 11
18662: DOUBLE
18663: EQUAL
18664: IFTRUE 18668
18666: GO 18872
18668: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
18669: LD_ADDR_VAR 0 2
18673: PUSH
18674: LD_INT 2
18676: PUSH
18677: LD_INT 3
18679: PUSH
18680: LD_INT 4
18682: PUSH
18683: LD_INT 5
18685: PUSH
18686: LD_INT 6
18688: PUSH
18689: LD_INT 7
18691: PUSH
18692: LD_INT 8
18694: PUSH
18695: LD_INT 9
18697: PUSH
18698: LD_INT 10
18700: PUSH
18701: LD_INT 11
18703: PUSH
18704: LD_INT 12
18706: PUSH
18707: LD_INT 13
18709: PUSH
18710: LD_INT 14
18712: PUSH
18713: LD_INT 15
18715: PUSH
18716: LD_INT 16
18718: PUSH
18719: LD_INT 17
18721: PUSH
18722: LD_INT 18
18724: PUSH
18725: LD_INT 19
18727: PUSH
18728: LD_INT 20
18730: PUSH
18731: LD_INT 21
18733: PUSH
18734: LD_INT 22
18736: PUSH
18737: LD_INT 23
18739: PUSH
18740: LD_INT 24
18742: PUSH
18743: LD_INT 25
18745: PUSH
18746: LD_INT 26
18748: PUSH
18749: LD_INT 28
18751: PUSH
18752: LD_INT 30
18754: PUSH
18755: LD_INT 31
18757: PUSH
18758: LD_INT 32
18760: PUSH
18761: LD_INT 34
18763: PUSH
18764: LD_INT 36
18766: PUSH
18767: EMPTY
18768: LIST
18769: LIST
18770: LIST
18771: LIST
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: LIST
18784: LIST
18785: LIST
18786: LIST
18787: LIST
18788: LIST
18789: LIST
18790: LIST
18791: LIST
18792: LIST
18793: LIST
18794: LIST
18795: LIST
18796: LIST
18797: LIST
18798: LIST
18799: PUSH
18800: LD_INT 101
18802: PUSH
18803: LD_INT 102
18805: PUSH
18806: LD_INT 103
18808: PUSH
18809: LD_INT 104
18811: PUSH
18812: LD_INT 105
18814: PUSH
18815: LD_INT 106
18817: PUSH
18818: LD_INT 107
18820: PUSH
18821: LD_INT 108
18823: PUSH
18824: LD_INT 109
18826: PUSH
18827: LD_INT 110
18829: PUSH
18830: LD_INT 111
18832: PUSH
18833: LD_INT 112
18835: PUSH
18836: LD_INT 114
18838: PUSH
18839: LD_INT 116
18841: PUSH
18842: LD_INT 117
18844: PUSH
18845: LD_INT 118
18847: PUSH
18848: EMPTY
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: LIST
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: ST_TO_ADDR
18870: GO 20553
18872: LD_INT 12
18874: DOUBLE
18875: EQUAL
18876: IFTRUE 18880
18878: GO 19100
18880: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
18881: LD_ADDR_VAR 0 2
18885: PUSH
18886: LD_INT 1
18888: PUSH
18889: LD_INT 2
18891: PUSH
18892: LD_INT 3
18894: PUSH
18895: LD_INT 4
18897: PUSH
18898: LD_INT 5
18900: PUSH
18901: LD_INT 6
18903: PUSH
18904: LD_INT 7
18906: PUSH
18907: LD_INT 8
18909: PUSH
18910: LD_INT 9
18912: PUSH
18913: LD_INT 10
18915: PUSH
18916: LD_INT 11
18918: PUSH
18919: LD_INT 12
18921: PUSH
18922: LD_INT 13
18924: PUSH
18925: LD_INT 14
18927: PUSH
18928: LD_INT 15
18930: PUSH
18931: LD_INT 16
18933: PUSH
18934: LD_INT 17
18936: PUSH
18937: LD_INT 18
18939: PUSH
18940: LD_INT 19
18942: PUSH
18943: LD_INT 20
18945: PUSH
18946: LD_INT 21
18948: PUSH
18949: LD_INT 22
18951: PUSH
18952: LD_INT 23
18954: PUSH
18955: LD_INT 24
18957: PUSH
18958: LD_INT 25
18960: PUSH
18961: LD_INT 26
18963: PUSH
18964: LD_INT 27
18966: PUSH
18967: LD_INT 28
18969: PUSH
18970: LD_INT 30
18972: PUSH
18973: LD_INT 31
18975: PUSH
18976: LD_INT 32
18978: PUSH
18979: LD_INT 33
18981: PUSH
18982: LD_INT 34
18984: PUSH
18985: LD_INT 36
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: LIST
19000: LIST
19001: LIST
19002: LIST
19003: LIST
19004: LIST
19005: LIST
19006: LIST
19007: LIST
19008: LIST
19009: LIST
19010: LIST
19011: LIST
19012: LIST
19013: LIST
19014: LIST
19015: LIST
19016: LIST
19017: LIST
19018: LIST
19019: LIST
19020: LIST
19021: LIST
19022: LIST
19023: PUSH
19024: LD_INT 101
19026: PUSH
19027: LD_INT 102
19029: PUSH
19030: LD_INT 103
19032: PUSH
19033: LD_INT 104
19035: PUSH
19036: LD_INT 105
19038: PUSH
19039: LD_INT 106
19041: PUSH
19042: LD_INT 107
19044: PUSH
19045: LD_INT 108
19047: PUSH
19048: LD_INT 109
19050: PUSH
19051: LD_INT 110
19053: PUSH
19054: LD_INT 111
19056: PUSH
19057: LD_INT 112
19059: PUSH
19060: LD_INT 113
19062: PUSH
19063: LD_INT 114
19065: PUSH
19066: LD_INT 116
19068: PUSH
19069: LD_INT 117
19071: PUSH
19072: LD_INT 118
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: LIST
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: LIST
19084: LIST
19085: LIST
19086: LIST
19087: LIST
19088: LIST
19089: LIST
19090: LIST
19091: LIST
19092: LIST
19093: PUSH
19094: EMPTY
19095: LIST
19096: LIST
19097: ST_TO_ADDR
19098: GO 20553
19100: LD_INT 13
19102: DOUBLE
19103: EQUAL
19104: IFTRUE 19108
19106: GO 19316
19108: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
19109: LD_ADDR_VAR 0 2
19113: PUSH
19114: LD_INT 1
19116: PUSH
19117: LD_INT 2
19119: PUSH
19120: LD_INT 3
19122: PUSH
19123: LD_INT 4
19125: PUSH
19126: LD_INT 5
19128: PUSH
19129: LD_INT 8
19131: PUSH
19132: LD_INT 9
19134: PUSH
19135: LD_INT 10
19137: PUSH
19138: LD_INT 11
19140: PUSH
19141: LD_INT 12
19143: PUSH
19144: LD_INT 14
19146: PUSH
19147: LD_INT 15
19149: PUSH
19150: LD_INT 16
19152: PUSH
19153: LD_INT 17
19155: PUSH
19156: LD_INT 18
19158: PUSH
19159: LD_INT 19
19161: PUSH
19162: LD_INT 20
19164: PUSH
19165: LD_INT 21
19167: PUSH
19168: LD_INT 22
19170: PUSH
19171: LD_INT 23
19173: PUSH
19174: LD_INT 24
19176: PUSH
19177: LD_INT 25
19179: PUSH
19180: LD_INT 26
19182: PUSH
19183: LD_INT 27
19185: PUSH
19186: LD_INT 28
19188: PUSH
19189: LD_INT 30
19191: PUSH
19192: LD_INT 31
19194: PUSH
19195: LD_INT 32
19197: PUSH
19198: LD_INT 33
19200: PUSH
19201: LD_INT 34
19203: PUSH
19204: LD_INT 36
19206: PUSH
19207: EMPTY
19208: LIST
19209: LIST
19210: LIST
19211: LIST
19212: LIST
19213: LIST
19214: LIST
19215: LIST
19216: LIST
19217: LIST
19218: LIST
19219: LIST
19220: LIST
19221: LIST
19222: LIST
19223: LIST
19224: LIST
19225: LIST
19226: LIST
19227: LIST
19228: LIST
19229: LIST
19230: LIST
19231: LIST
19232: LIST
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: PUSH
19240: LD_INT 101
19242: PUSH
19243: LD_INT 102
19245: PUSH
19246: LD_INT 103
19248: PUSH
19249: LD_INT 104
19251: PUSH
19252: LD_INT 105
19254: PUSH
19255: LD_INT 106
19257: PUSH
19258: LD_INT 107
19260: PUSH
19261: LD_INT 108
19263: PUSH
19264: LD_INT 109
19266: PUSH
19267: LD_INT 110
19269: PUSH
19270: LD_INT 111
19272: PUSH
19273: LD_INT 112
19275: PUSH
19276: LD_INT 113
19278: PUSH
19279: LD_INT 114
19281: PUSH
19282: LD_INT 116
19284: PUSH
19285: LD_INT 117
19287: PUSH
19288: LD_INT 118
19290: PUSH
19291: EMPTY
19292: LIST
19293: LIST
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: LIST
19300: LIST
19301: LIST
19302: LIST
19303: LIST
19304: LIST
19305: LIST
19306: LIST
19307: LIST
19308: LIST
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: ST_TO_ADDR
19314: GO 20553
19316: LD_INT 14
19318: DOUBLE
19319: EQUAL
19320: IFTRUE 19324
19322: GO 19548
19324: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
19325: LD_ADDR_VAR 0 2
19329: PUSH
19330: LD_INT 1
19332: PUSH
19333: LD_INT 2
19335: PUSH
19336: LD_INT 3
19338: PUSH
19339: LD_INT 4
19341: PUSH
19342: LD_INT 5
19344: PUSH
19345: LD_INT 6
19347: PUSH
19348: LD_INT 7
19350: PUSH
19351: LD_INT 8
19353: PUSH
19354: LD_INT 9
19356: PUSH
19357: LD_INT 10
19359: PUSH
19360: LD_INT 11
19362: PUSH
19363: LD_INT 12
19365: PUSH
19366: LD_INT 13
19368: PUSH
19369: LD_INT 14
19371: PUSH
19372: LD_INT 15
19374: PUSH
19375: LD_INT 16
19377: PUSH
19378: LD_INT 17
19380: PUSH
19381: LD_INT 18
19383: PUSH
19384: LD_INT 19
19386: PUSH
19387: LD_INT 20
19389: PUSH
19390: LD_INT 21
19392: PUSH
19393: LD_INT 22
19395: PUSH
19396: LD_INT 23
19398: PUSH
19399: LD_INT 24
19401: PUSH
19402: LD_INT 25
19404: PUSH
19405: LD_INT 26
19407: PUSH
19408: LD_INT 27
19410: PUSH
19411: LD_INT 28
19413: PUSH
19414: LD_INT 29
19416: PUSH
19417: LD_INT 30
19419: PUSH
19420: LD_INT 31
19422: PUSH
19423: LD_INT 32
19425: PUSH
19426: LD_INT 33
19428: PUSH
19429: LD_INT 34
19431: PUSH
19432: LD_INT 36
19434: PUSH
19435: EMPTY
19436: LIST
19437: LIST
19438: LIST
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: LIST
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: LIST
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: LIST
19466: LIST
19467: LIST
19468: LIST
19469: LIST
19470: LIST
19471: PUSH
19472: LD_INT 101
19474: PUSH
19475: LD_INT 102
19477: PUSH
19478: LD_INT 103
19480: PUSH
19481: LD_INT 104
19483: PUSH
19484: LD_INT 105
19486: PUSH
19487: LD_INT 106
19489: PUSH
19490: LD_INT 107
19492: PUSH
19493: LD_INT 108
19495: PUSH
19496: LD_INT 109
19498: PUSH
19499: LD_INT 110
19501: PUSH
19502: LD_INT 111
19504: PUSH
19505: LD_INT 112
19507: PUSH
19508: LD_INT 113
19510: PUSH
19511: LD_INT 114
19513: PUSH
19514: LD_INT 116
19516: PUSH
19517: LD_INT 117
19519: PUSH
19520: LD_INT 118
19522: PUSH
19523: EMPTY
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: PUSH
19542: EMPTY
19543: LIST
19544: LIST
19545: ST_TO_ADDR
19546: GO 20553
19548: LD_INT 15
19550: DOUBLE
19551: EQUAL
19552: IFTRUE 19556
19554: GO 19780
19556: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
19557: LD_ADDR_VAR 0 2
19561: PUSH
19562: LD_INT 1
19564: PUSH
19565: LD_INT 2
19567: PUSH
19568: LD_INT 3
19570: PUSH
19571: LD_INT 4
19573: PUSH
19574: LD_INT 5
19576: PUSH
19577: LD_INT 6
19579: PUSH
19580: LD_INT 7
19582: PUSH
19583: LD_INT 8
19585: PUSH
19586: LD_INT 9
19588: PUSH
19589: LD_INT 10
19591: PUSH
19592: LD_INT 11
19594: PUSH
19595: LD_INT 12
19597: PUSH
19598: LD_INT 13
19600: PUSH
19601: LD_INT 14
19603: PUSH
19604: LD_INT 15
19606: PUSH
19607: LD_INT 16
19609: PUSH
19610: LD_INT 17
19612: PUSH
19613: LD_INT 18
19615: PUSH
19616: LD_INT 19
19618: PUSH
19619: LD_INT 20
19621: PUSH
19622: LD_INT 21
19624: PUSH
19625: LD_INT 22
19627: PUSH
19628: LD_INT 23
19630: PUSH
19631: LD_INT 24
19633: PUSH
19634: LD_INT 25
19636: PUSH
19637: LD_INT 26
19639: PUSH
19640: LD_INT 27
19642: PUSH
19643: LD_INT 28
19645: PUSH
19646: LD_INT 29
19648: PUSH
19649: LD_INT 30
19651: PUSH
19652: LD_INT 31
19654: PUSH
19655: LD_INT 32
19657: PUSH
19658: LD_INT 33
19660: PUSH
19661: LD_INT 34
19663: PUSH
19664: LD_INT 36
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: LIST
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: LIST
19678: LIST
19679: LIST
19680: LIST
19681: LIST
19682: LIST
19683: LIST
19684: LIST
19685: LIST
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: LIST
19691: LIST
19692: LIST
19693: LIST
19694: LIST
19695: LIST
19696: LIST
19697: LIST
19698: LIST
19699: LIST
19700: LIST
19701: LIST
19702: LIST
19703: PUSH
19704: LD_INT 101
19706: PUSH
19707: LD_INT 102
19709: PUSH
19710: LD_INT 103
19712: PUSH
19713: LD_INT 104
19715: PUSH
19716: LD_INT 105
19718: PUSH
19719: LD_INT 106
19721: PUSH
19722: LD_INT 107
19724: PUSH
19725: LD_INT 108
19727: PUSH
19728: LD_INT 109
19730: PUSH
19731: LD_INT 110
19733: PUSH
19734: LD_INT 111
19736: PUSH
19737: LD_INT 112
19739: PUSH
19740: LD_INT 113
19742: PUSH
19743: LD_INT 114
19745: PUSH
19746: LD_INT 116
19748: PUSH
19749: LD_INT 117
19751: PUSH
19752: LD_INT 118
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: PUSH
19774: EMPTY
19775: LIST
19776: LIST
19777: ST_TO_ADDR
19778: GO 20553
19780: LD_INT 16
19782: DOUBLE
19783: EQUAL
19784: IFTRUE 19788
19786: GO 19924
19788: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
19789: LD_ADDR_VAR 0 2
19793: PUSH
19794: LD_INT 2
19796: PUSH
19797: LD_INT 4
19799: PUSH
19800: LD_INT 5
19802: PUSH
19803: LD_INT 7
19805: PUSH
19806: LD_INT 11
19808: PUSH
19809: LD_INT 12
19811: PUSH
19812: LD_INT 15
19814: PUSH
19815: LD_INT 16
19817: PUSH
19818: LD_INT 20
19820: PUSH
19821: LD_INT 21
19823: PUSH
19824: LD_INT 22
19826: PUSH
19827: LD_INT 23
19829: PUSH
19830: LD_INT 25
19832: PUSH
19833: LD_INT 26
19835: PUSH
19836: LD_INT 30
19838: PUSH
19839: LD_INT 31
19841: PUSH
19842: LD_INT 32
19844: PUSH
19845: LD_INT 33
19847: PUSH
19848: LD_INT 34
19850: PUSH
19851: EMPTY
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: PUSH
19872: LD_INT 101
19874: PUSH
19875: LD_INT 102
19877: PUSH
19878: LD_INT 103
19880: PUSH
19881: LD_INT 106
19883: PUSH
19884: LD_INT 108
19886: PUSH
19887: LD_INT 112
19889: PUSH
19890: LD_INT 113
19892: PUSH
19893: LD_INT 114
19895: PUSH
19896: LD_INT 116
19898: PUSH
19899: LD_INT 117
19901: PUSH
19902: LD_INT 118
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: PUSH
19918: EMPTY
19919: LIST
19920: LIST
19921: ST_TO_ADDR
19922: GO 20553
19924: LD_INT 17
19926: DOUBLE
19927: EQUAL
19928: IFTRUE 19932
19930: GO 20156
19932: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
19933: LD_ADDR_VAR 0 2
19937: PUSH
19938: LD_INT 1
19940: PUSH
19941: LD_INT 2
19943: PUSH
19944: LD_INT 3
19946: PUSH
19947: LD_INT 4
19949: PUSH
19950: LD_INT 5
19952: PUSH
19953: LD_INT 6
19955: PUSH
19956: LD_INT 7
19958: PUSH
19959: LD_INT 8
19961: PUSH
19962: LD_INT 9
19964: PUSH
19965: LD_INT 10
19967: PUSH
19968: LD_INT 11
19970: PUSH
19971: LD_INT 12
19973: PUSH
19974: LD_INT 13
19976: PUSH
19977: LD_INT 14
19979: PUSH
19980: LD_INT 15
19982: PUSH
19983: LD_INT 16
19985: PUSH
19986: LD_INT 17
19988: PUSH
19989: LD_INT 18
19991: PUSH
19992: LD_INT 19
19994: PUSH
19995: LD_INT 20
19997: PUSH
19998: LD_INT 21
20000: PUSH
20001: LD_INT 22
20003: PUSH
20004: LD_INT 23
20006: PUSH
20007: LD_INT 24
20009: PUSH
20010: LD_INT 25
20012: PUSH
20013: LD_INT 26
20015: PUSH
20016: LD_INT 27
20018: PUSH
20019: LD_INT 28
20021: PUSH
20022: LD_INT 29
20024: PUSH
20025: LD_INT 30
20027: PUSH
20028: LD_INT 31
20030: PUSH
20031: LD_INT 32
20033: PUSH
20034: LD_INT 33
20036: PUSH
20037: LD_INT 34
20039: PUSH
20040: LD_INT 36
20042: PUSH
20043: EMPTY
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: LIST
20052: LIST
20053: LIST
20054: LIST
20055: LIST
20056: LIST
20057: LIST
20058: LIST
20059: LIST
20060: LIST
20061: LIST
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: LIST
20078: LIST
20079: PUSH
20080: LD_INT 101
20082: PUSH
20083: LD_INT 102
20085: PUSH
20086: LD_INT 103
20088: PUSH
20089: LD_INT 104
20091: PUSH
20092: LD_INT 105
20094: PUSH
20095: LD_INT 106
20097: PUSH
20098: LD_INT 107
20100: PUSH
20101: LD_INT 108
20103: PUSH
20104: LD_INT 109
20106: PUSH
20107: LD_INT 110
20109: PUSH
20110: LD_INT 111
20112: PUSH
20113: LD_INT 112
20115: PUSH
20116: LD_INT 113
20118: PUSH
20119: LD_INT 114
20121: PUSH
20122: LD_INT 116
20124: PUSH
20125: LD_INT 117
20127: PUSH
20128: LD_INT 118
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: PUSH
20150: EMPTY
20151: LIST
20152: LIST
20153: ST_TO_ADDR
20154: GO 20553
20156: LD_INT 18
20158: DOUBLE
20159: EQUAL
20160: IFTRUE 20164
20162: GO 20312
20164: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
20165: LD_ADDR_VAR 0 2
20169: PUSH
20170: LD_INT 2
20172: PUSH
20173: LD_INT 4
20175: PUSH
20176: LD_INT 5
20178: PUSH
20179: LD_INT 7
20181: PUSH
20182: LD_INT 11
20184: PUSH
20185: LD_INT 12
20187: PUSH
20188: LD_INT 15
20190: PUSH
20191: LD_INT 16
20193: PUSH
20194: LD_INT 20
20196: PUSH
20197: LD_INT 21
20199: PUSH
20200: LD_INT 22
20202: PUSH
20203: LD_INT 23
20205: PUSH
20206: LD_INT 25
20208: PUSH
20209: LD_INT 26
20211: PUSH
20212: LD_INT 30
20214: PUSH
20215: LD_INT 31
20217: PUSH
20218: LD_INT 32
20220: PUSH
20221: LD_INT 33
20223: PUSH
20224: LD_INT 34
20226: PUSH
20227: LD_INT 35
20229: PUSH
20230: LD_INT 36
20232: PUSH
20233: EMPTY
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: PUSH
20256: LD_INT 101
20258: PUSH
20259: LD_INT 102
20261: PUSH
20262: LD_INT 103
20264: PUSH
20265: LD_INT 106
20267: PUSH
20268: LD_INT 108
20270: PUSH
20271: LD_INT 112
20273: PUSH
20274: LD_INT 113
20276: PUSH
20277: LD_INT 114
20279: PUSH
20280: LD_INT 115
20282: PUSH
20283: LD_INT 116
20285: PUSH
20286: LD_INT 117
20288: PUSH
20289: LD_INT 118
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: PUSH
20306: EMPTY
20307: LIST
20308: LIST
20309: ST_TO_ADDR
20310: GO 20553
20312: LD_INT 19
20314: DOUBLE
20315: EQUAL
20316: IFTRUE 20320
20318: GO 20552
20320: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
20321: LD_ADDR_VAR 0 2
20325: PUSH
20326: LD_INT 1
20328: PUSH
20329: LD_INT 2
20331: PUSH
20332: LD_INT 3
20334: PUSH
20335: LD_INT 4
20337: PUSH
20338: LD_INT 5
20340: PUSH
20341: LD_INT 6
20343: PUSH
20344: LD_INT 7
20346: PUSH
20347: LD_INT 8
20349: PUSH
20350: LD_INT 9
20352: PUSH
20353: LD_INT 10
20355: PUSH
20356: LD_INT 11
20358: PUSH
20359: LD_INT 12
20361: PUSH
20362: LD_INT 13
20364: PUSH
20365: LD_INT 14
20367: PUSH
20368: LD_INT 15
20370: PUSH
20371: LD_INT 16
20373: PUSH
20374: LD_INT 17
20376: PUSH
20377: LD_INT 18
20379: PUSH
20380: LD_INT 19
20382: PUSH
20383: LD_INT 20
20385: PUSH
20386: LD_INT 21
20388: PUSH
20389: LD_INT 22
20391: PUSH
20392: LD_INT 23
20394: PUSH
20395: LD_INT 24
20397: PUSH
20398: LD_INT 25
20400: PUSH
20401: LD_INT 26
20403: PUSH
20404: LD_INT 27
20406: PUSH
20407: LD_INT 28
20409: PUSH
20410: LD_INT 29
20412: PUSH
20413: LD_INT 30
20415: PUSH
20416: LD_INT 31
20418: PUSH
20419: LD_INT 32
20421: PUSH
20422: LD_INT 33
20424: PUSH
20425: LD_INT 34
20427: PUSH
20428: LD_INT 35
20430: PUSH
20431: LD_INT 36
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: LIST
20438: LIST
20439: LIST
20440: LIST
20441: LIST
20442: LIST
20443: LIST
20444: LIST
20445: LIST
20446: LIST
20447: LIST
20448: LIST
20449: LIST
20450: LIST
20451: LIST
20452: LIST
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: LIST
20466: LIST
20467: LIST
20468: LIST
20469: LIST
20470: LIST
20471: PUSH
20472: LD_INT 101
20474: PUSH
20475: LD_INT 102
20477: PUSH
20478: LD_INT 103
20480: PUSH
20481: LD_INT 104
20483: PUSH
20484: LD_INT 105
20486: PUSH
20487: LD_INT 106
20489: PUSH
20490: LD_INT 107
20492: PUSH
20493: LD_INT 108
20495: PUSH
20496: LD_INT 109
20498: PUSH
20499: LD_INT 110
20501: PUSH
20502: LD_INT 111
20504: PUSH
20505: LD_INT 112
20507: PUSH
20508: LD_INT 113
20510: PUSH
20511: LD_INT 114
20513: PUSH
20514: LD_INT 115
20516: PUSH
20517: LD_INT 116
20519: PUSH
20520: LD_INT 117
20522: PUSH
20523: LD_INT 118
20525: PUSH
20526: EMPTY
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: LIST
20538: LIST
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: LIST
20544: LIST
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: ST_TO_ADDR
20550: GO 20553
20552: POP
// end else
20553: GO 20784
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
20555: LD_ADDR_VAR 0 2
20559: PUSH
20560: LD_INT 1
20562: PUSH
20563: LD_INT 2
20565: PUSH
20566: LD_INT 3
20568: PUSH
20569: LD_INT 4
20571: PUSH
20572: LD_INT 5
20574: PUSH
20575: LD_INT 6
20577: PUSH
20578: LD_INT 7
20580: PUSH
20581: LD_INT 8
20583: PUSH
20584: LD_INT 9
20586: PUSH
20587: LD_INT 10
20589: PUSH
20590: LD_INT 11
20592: PUSH
20593: LD_INT 12
20595: PUSH
20596: LD_INT 13
20598: PUSH
20599: LD_INT 14
20601: PUSH
20602: LD_INT 15
20604: PUSH
20605: LD_INT 16
20607: PUSH
20608: LD_INT 17
20610: PUSH
20611: LD_INT 18
20613: PUSH
20614: LD_INT 19
20616: PUSH
20617: LD_INT 20
20619: PUSH
20620: LD_INT 21
20622: PUSH
20623: LD_INT 22
20625: PUSH
20626: LD_INT 23
20628: PUSH
20629: LD_INT 24
20631: PUSH
20632: LD_INT 25
20634: PUSH
20635: LD_INT 26
20637: PUSH
20638: LD_INT 27
20640: PUSH
20641: LD_INT 28
20643: PUSH
20644: LD_INT 29
20646: PUSH
20647: LD_INT 30
20649: PUSH
20650: LD_INT 31
20652: PUSH
20653: LD_INT 32
20655: PUSH
20656: LD_INT 33
20658: PUSH
20659: LD_INT 34
20661: PUSH
20662: LD_INT 35
20664: PUSH
20665: LD_INT 36
20667: PUSH
20668: EMPTY
20669: LIST
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: PUSH
20706: LD_INT 101
20708: PUSH
20709: LD_INT 102
20711: PUSH
20712: LD_INT 103
20714: PUSH
20715: LD_INT 104
20717: PUSH
20718: LD_INT 105
20720: PUSH
20721: LD_INT 106
20723: PUSH
20724: LD_INT 107
20726: PUSH
20727: LD_INT 108
20729: PUSH
20730: LD_INT 109
20732: PUSH
20733: LD_INT 110
20735: PUSH
20736: LD_INT 111
20738: PUSH
20739: LD_INT 112
20741: PUSH
20742: LD_INT 113
20744: PUSH
20745: LD_INT 114
20747: PUSH
20748: LD_INT 115
20750: PUSH
20751: LD_INT 116
20753: PUSH
20754: LD_INT 117
20756: PUSH
20757: LD_INT 118
20759: PUSH
20760: EMPTY
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: PUSH
20780: EMPTY
20781: LIST
20782: LIST
20783: ST_TO_ADDR
// if result then
20784: LD_VAR 0 2
20788: IFFALSE 21574
// begin normal :=  ;
20790: LD_ADDR_VAR 0 5
20794: PUSH
20795: LD_STRING 
20797: ST_TO_ADDR
// hardcore :=  ;
20798: LD_ADDR_VAR 0 6
20802: PUSH
20803: LD_STRING 
20805: ST_TO_ADDR
// active :=  ;
20806: LD_ADDR_VAR 0 7
20810: PUSH
20811: LD_STRING 
20813: ST_TO_ADDR
// for i = 1 to normalCounter do
20814: LD_ADDR_VAR 0 8
20818: PUSH
20819: DOUBLE
20820: LD_INT 1
20822: DEC
20823: ST_TO_ADDR
20824: LD_EXP 41
20828: PUSH
20829: FOR_TO
20830: IFFALSE 20931
// begin tmp := 0 ;
20832: LD_ADDR_VAR 0 3
20836: PUSH
20837: LD_STRING 0
20839: ST_TO_ADDR
// if result [ 1 ] then
20840: LD_VAR 0 2
20844: PUSH
20845: LD_INT 1
20847: ARRAY
20848: IFFALSE 20913
// if result [ 1 ] [ 1 ] = i then
20850: LD_VAR 0 2
20854: PUSH
20855: LD_INT 1
20857: ARRAY
20858: PUSH
20859: LD_INT 1
20861: ARRAY
20862: PUSH
20863: LD_VAR 0 8
20867: EQUAL
20868: IFFALSE 20913
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
20870: LD_ADDR_VAR 0 2
20874: PUSH
20875: LD_VAR 0 2
20879: PPUSH
20880: LD_INT 1
20882: PPUSH
20883: LD_VAR 0 2
20887: PUSH
20888: LD_INT 1
20890: ARRAY
20891: PPUSH
20892: LD_INT 1
20894: PPUSH
20895: CALL_OW 3
20899: PPUSH
20900: CALL_OW 1
20904: ST_TO_ADDR
// tmp := 1 ;
20905: LD_ADDR_VAR 0 3
20909: PUSH
20910: LD_STRING 1
20912: ST_TO_ADDR
// end ; normal := normal & tmp ;
20913: LD_ADDR_VAR 0 5
20917: PUSH
20918: LD_VAR 0 5
20922: PUSH
20923: LD_VAR 0 3
20927: STR
20928: ST_TO_ADDR
// end ;
20929: GO 20829
20931: POP
20932: POP
// for i = 1 to hardcoreCounter do
20933: LD_ADDR_VAR 0 8
20937: PUSH
20938: DOUBLE
20939: LD_INT 1
20941: DEC
20942: ST_TO_ADDR
20943: LD_EXP 42
20947: PUSH
20948: FOR_TO
20949: IFFALSE 21054
// begin tmp := 0 ;
20951: LD_ADDR_VAR 0 3
20955: PUSH
20956: LD_STRING 0
20958: ST_TO_ADDR
// if result [ 2 ] then
20959: LD_VAR 0 2
20963: PUSH
20964: LD_INT 2
20966: ARRAY
20967: IFFALSE 21036
// if result [ 2 ] [ 1 ] = 100 + i then
20969: LD_VAR 0 2
20973: PUSH
20974: LD_INT 2
20976: ARRAY
20977: PUSH
20978: LD_INT 1
20980: ARRAY
20981: PUSH
20982: LD_INT 100
20984: PUSH
20985: LD_VAR 0 8
20989: PLUS
20990: EQUAL
20991: IFFALSE 21036
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
20993: LD_ADDR_VAR 0 2
20997: PUSH
20998: LD_VAR 0 2
21002: PPUSH
21003: LD_INT 2
21005: PPUSH
21006: LD_VAR 0 2
21010: PUSH
21011: LD_INT 2
21013: ARRAY
21014: PPUSH
21015: LD_INT 1
21017: PPUSH
21018: CALL_OW 3
21022: PPUSH
21023: CALL_OW 1
21027: ST_TO_ADDR
// tmp := 1 ;
21028: LD_ADDR_VAR 0 3
21032: PUSH
21033: LD_STRING 1
21035: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
21036: LD_ADDR_VAR 0 6
21040: PUSH
21041: LD_VAR 0 6
21045: PUSH
21046: LD_VAR 0 3
21050: STR
21051: ST_TO_ADDR
// end ;
21052: GO 20948
21054: POP
21055: POP
// if isGameLoad then
21056: LD_VAR 0 1
21060: IFFALSE 21535
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
21062: LD_ADDR_VAR 0 4
21066: PUSH
21067: LD_EXP 45
21071: PUSH
21072: LD_EXP 44
21076: PUSH
21077: LD_EXP 46
21081: PUSH
21082: LD_EXP 43
21086: PUSH
21087: LD_EXP 47
21091: PUSH
21092: LD_EXP 48
21096: PUSH
21097: LD_EXP 49
21101: PUSH
21102: LD_EXP 50
21106: PUSH
21107: LD_EXP 51
21111: PUSH
21112: LD_EXP 52
21116: PUSH
21117: LD_EXP 53
21121: PUSH
21122: LD_EXP 54
21126: PUSH
21127: LD_EXP 55
21131: PUSH
21132: LD_EXP 56
21136: PUSH
21137: LD_EXP 64
21141: PUSH
21142: LD_EXP 65
21146: PUSH
21147: LD_EXP 66
21151: PUSH
21152: LD_EXP 67
21156: PUSH
21157: LD_EXP 69
21161: PUSH
21162: LD_EXP 70
21166: PUSH
21167: LD_EXP 71
21171: PUSH
21172: LD_EXP 74
21176: PUSH
21177: LD_EXP 76
21181: PUSH
21182: LD_EXP 77
21186: PUSH
21187: LD_EXP 78
21191: PUSH
21192: LD_EXP 80
21196: PUSH
21197: LD_EXP 81
21201: PUSH
21202: LD_EXP 84
21206: PUSH
21207: LD_EXP 85
21211: PUSH
21212: LD_EXP 86
21216: PUSH
21217: LD_EXP 87
21221: PUSH
21222: LD_EXP 88
21226: PUSH
21227: LD_EXP 89
21231: PUSH
21232: LD_EXP 90
21236: PUSH
21237: LD_EXP 91
21241: PUSH
21242: LD_EXP 92
21246: PUSH
21247: LD_EXP 57
21251: PUSH
21252: LD_EXP 58
21256: PUSH
21257: LD_EXP 61
21261: PUSH
21262: LD_EXP 62
21266: PUSH
21267: LD_EXP 63
21271: PUSH
21272: LD_EXP 59
21276: PUSH
21277: LD_EXP 60
21281: PUSH
21282: LD_EXP 68
21286: PUSH
21287: LD_EXP 72
21291: PUSH
21292: LD_EXP 73
21296: PUSH
21297: LD_EXP 75
21301: PUSH
21302: LD_EXP 79
21306: PUSH
21307: LD_EXP 82
21311: PUSH
21312: LD_EXP 83
21316: PUSH
21317: LD_EXP 93
21321: PUSH
21322: LD_EXP 94
21326: PUSH
21327: LD_EXP 95
21331: PUSH
21332: LD_EXP 96
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: ST_TO_ADDR
// tmp :=  ;
21393: LD_ADDR_VAR 0 3
21397: PUSH
21398: LD_STRING 
21400: ST_TO_ADDR
// for i = 1 to normalCounter do
21401: LD_ADDR_VAR 0 8
21405: PUSH
21406: DOUBLE
21407: LD_INT 1
21409: DEC
21410: ST_TO_ADDR
21411: LD_EXP 41
21415: PUSH
21416: FOR_TO
21417: IFFALSE 21453
// begin if flags [ i ] then
21419: LD_VAR 0 4
21423: PUSH
21424: LD_VAR 0 8
21428: ARRAY
21429: IFFALSE 21451
// tmp := tmp & i & ; ;
21431: LD_ADDR_VAR 0 3
21435: PUSH
21436: LD_VAR 0 3
21440: PUSH
21441: LD_VAR 0 8
21445: STR
21446: PUSH
21447: LD_STRING ;
21449: STR
21450: ST_TO_ADDR
// end ;
21451: GO 21416
21453: POP
21454: POP
// for i = 1 to hardcoreCounter do
21455: LD_ADDR_VAR 0 8
21459: PUSH
21460: DOUBLE
21461: LD_INT 1
21463: DEC
21464: ST_TO_ADDR
21465: LD_EXP 42
21469: PUSH
21470: FOR_TO
21471: IFFALSE 21517
// begin if flags [ normalCounter + i ] then
21473: LD_VAR 0 4
21477: PUSH
21478: LD_EXP 41
21482: PUSH
21483: LD_VAR 0 8
21487: PLUS
21488: ARRAY
21489: IFFALSE 21515
// tmp := tmp & ( 100 + i ) & ; ;
21491: LD_ADDR_VAR 0 3
21495: PUSH
21496: LD_VAR 0 3
21500: PUSH
21501: LD_INT 100
21503: PUSH
21504: LD_VAR 0 8
21508: PLUS
21509: STR
21510: PUSH
21511: LD_STRING ;
21513: STR
21514: ST_TO_ADDR
// end ;
21515: GO 21470
21517: POP
21518: POP
// if tmp then
21519: LD_VAR 0 3
21523: IFFALSE 21535
// active := tmp ;
21525: LD_ADDR_VAR 0 7
21529: PUSH
21530: LD_VAR 0 3
21534: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
21535: LD_STRING getStreamItemsFromMission("
21537: PUSH
21538: LD_VAR 0 5
21542: STR
21543: PUSH
21544: LD_STRING ","
21546: STR
21547: PUSH
21548: LD_VAR 0 6
21552: STR
21553: PUSH
21554: LD_STRING ","
21556: STR
21557: PUSH
21558: LD_VAR 0 7
21562: STR
21563: PUSH
21564: LD_STRING ")
21566: STR
21567: PPUSH
21568: CALL_OW 559
// end else
21572: GO 21581
// ToLua ( getStreamItemsFromMission("","","") ) ;
21574: LD_STRING getStreamItemsFromMission("","","")
21576: PPUSH
21577: CALL_OW 559
// end ;
21581: LD_VAR 0 2
21585: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
21586: LD_EXP 40
21590: PUSH
21591: LD_EXP 45
21595: AND
21596: IFFALSE 21720
21598: GO 21600
21600: DISABLE
21601: LD_INT 0
21603: PPUSH
21604: PPUSH
// begin enable ;
21605: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
21606: LD_ADDR_VAR 0 2
21610: PUSH
21611: LD_INT 22
21613: PUSH
21614: LD_OWVAR 2
21618: PUSH
21619: EMPTY
21620: LIST
21621: LIST
21622: PUSH
21623: LD_INT 2
21625: PUSH
21626: LD_INT 34
21628: PUSH
21629: LD_INT 7
21631: PUSH
21632: EMPTY
21633: LIST
21634: LIST
21635: PUSH
21636: LD_INT 34
21638: PUSH
21639: LD_INT 45
21641: PUSH
21642: EMPTY
21643: LIST
21644: LIST
21645: PUSH
21646: LD_INT 34
21648: PUSH
21649: LD_INT 28
21651: PUSH
21652: EMPTY
21653: LIST
21654: LIST
21655: PUSH
21656: LD_INT 34
21658: PUSH
21659: LD_INT 47
21661: PUSH
21662: EMPTY
21663: LIST
21664: LIST
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: PUSH
21673: EMPTY
21674: LIST
21675: LIST
21676: PPUSH
21677: CALL_OW 69
21681: ST_TO_ADDR
// if not tmp then
21682: LD_VAR 0 2
21686: NOT
21687: IFFALSE 21691
// exit ;
21689: GO 21720
// for i in tmp do
21691: LD_ADDR_VAR 0 1
21695: PUSH
21696: LD_VAR 0 2
21700: PUSH
21701: FOR_IN
21702: IFFALSE 21718
// begin SetLives ( i , 0 ) ;
21704: LD_VAR 0 1
21708: PPUSH
21709: LD_INT 0
21711: PPUSH
21712: CALL_OW 234
// end ;
21716: GO 21701
21718: POP
21719: POP
// end ;
21720: PPOPN 2
21722: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
21723: LD_EXP 40
21727: PUSH
21728: LD_EXP 46
21732: AND
21733: IFFALSE 21817
21735: GO 21737
21737: DISABLE
21738: LD_INT 0
21740: PPUSH
21741: PPUSH
// begin enable ;
21742: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
21743: LD_ADDR_VAR 0 2
21747: PUSH
21748: LD_INT 22
21750: PUSH
21751: LD_OWVAR 2
21755: PUSH
21756: EMPTY
21757: LIST
21758: LIST
21759: PUSH
21760: LD_INT 32
21762: PUSH
21763: LD_INT 3
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: PUSH
21770: EMPTY
21771: LIST
21772: LIST
21773: PPUSH
21774: CALL_OW 69
21778: ST_TO_ADDR
// if not tmp then
21779: LD_VAR 0 2
21783: NOT
21784: IFFALSE 21788
// exit ;
21786: GO 21817
// for i in tmp do
21788: LD_ADDR_VAR 0 1
21792: PUSH
21793: LD_VAR 0 2
21797: PUSH
21798: FOR_IN
21799: IFFALSE 21815
// begin SetLives ( i , 0 ) ;
21801: LD_VAR 0 1
21805: PPUSH
21806: LD_INT 0
21808: PPUSH
21809: CALL_OW 234
// end ;
21813: GO 21798
21815: POP
21816: POP
// end ;
21817: PPOPN 2
21819: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
21820: LD_EXP 40
21824: PUSH
21825: LD_EXP 43
21829: AND
21830: IFFALSE 21923
21832: GO 21834
21834: DISABLE
21835: LD_INT 0
21837: PPUSH
// begin enable ;
21838: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
21839: LD_ADDR_VAR 0 1
21843: PUSH
21844: LD_INT 22
21846: PUSH
21847: LD_OWVAR 2
21851: PUSH
21852: EMPTY
21853: LIST
21854: LIST
21855: PUSH
21856: LD_INT 2
21858: PUSH
21859: LD_INT 25
21861: PUSH
21862: LD_INT 5
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: PUSH
21869: LD_INT 25
21871: PUSH
21872: LD_INT 9
21874: PUSH
21875: EMPTY
21876: LIST
21877: LIST
21878: PUSH
21879: LD_INT 25
21881: PUSH
21882: LD_INT 8
21884: PUSH
21885: EMPTY
21886: LIST
21887: LIST
21888: PUSH
21889: EMPTY
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: PUSH
21895: EMPTY
21896: LIST
21897: LIST
21898: PPUSH
21899: CALL_OW 69
21903: PUSH
21904: FOR_IN
21905: IFFALSE 21921
// begin SetClass ( i , 1 ) ;
21907: LD_VAR 0 1
21911: PPUSH
21912: LD_INT 1
21914: PPUSH
21915: CALL_OW 336
// end ;
21919: GO 21904
21921: POP
21922: POP
// end ;
21923: PPOPN 1
21925: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
21926: LD_EXP 40
21930: PUSH
21931: LD_EXP 44
21935: AND
21936: PUSH
21937: LD_OWVAR 65
21941: PUSH
21942: LD_INT 7
21944: LESS
21945: AND
21946: IFFALSE 21960
21948: GO 21950
21950: DISABLE
// begin enable ;
21951: ENABLE
// game_speed := 7 ;
21952: LD_ADDR_OWVAR 65
21956: PUSH
21957: LD_INT 7
21959: ST_TO_ADDR
// end ;
21960: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
21961: LD_EXP 40
21965: PUSH
21966: LD_EXP 47
21970: AND
21971: IFFALSE 22173
21973: GO 21975
21975: DISABLE
21976: LD_INT 0
21978: PPUSH
21979: PPUSH
21980: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21981: LD_ADDR_VAR 0 3
21985: PUSH
21986: LD_INT 81
21988: PUSH
21989: LD_OWVAR 2
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: PUSH
21998: LD_INT 21
22000: PUSH
22001: LD_INT 1
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: PUSH
22008: EMPTY
22009: LIST
22010: LIST
22011: PPUSH
22012: CALL_OW 69
22016: ST_TO_ADDR
// if not tmp then
22017: LD_VAR 0 3
22021: NOT
22022: IFFALSE 22026
// exit ;
22024: GO 22173
// if tmp > 5 then
22026: LD_VAR 0 3
22030: PUSH
22031: LD_INT 5
22033: GREATER
22034: IFFALSE 22046
// k := 5 else
22036: LD_ADDR_VAR 0 2
22040: PUSH
22041: LD_INT 5
22043: ST_TO_ADDR
22044: GO 22056
// k := tmp ;
22046: LD_ADDR_VAR 0 2
22050: PUSH
22051: LD_VAR 0 3
22055: ST_TO_ADDR
// for i := 1 to k do
22056: LD_ADDR_VAR 0 1
22060: PUSH
22061: DOUBLE
22062: LD_INT 1
22064: DEC
22065: ST_TO_ADDR
22066: LD_VAR 0 2
22070: PUSH
22071: FOR_TO
22072: IFFALSE 22171
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
22074: LD_VAR 0 3
22078: PUSH
22079: LD_VAR 0 1
22083: ARRAY
22084: PPUSH
22085: LD_VAR 0 1
22089: PUSH
22090: LD_INT 4
22092: MOD
22093: PUSH
22094: LD_INT 1
22096: PLUS
22097: PPUSH
22098: CALL_OW 259
22102: PUSH
22103: LD_INT 10
22105: LESS
22106: IFFALSE 22169
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
22108: LD_VAR 0 3
22112: PUSH
22113: LD_VAR 0 1
22117: ARRAY
22118: PPUSH
22119: LD_VAR 0 1
22123: PUSH
22124: LD_INT 4
22126: MOD
22127: PUSH
22128: LD_INT 1
22130: PLUS
22131: PPUSH
22132: LD_VAR 0 3
22136: PUSH
22137: LD_VAR 0 1
22141: ARRAY
22142: PPUSH
22143: LD_VAR 0 1
22147: PUSH
22148: LD_INT 4
22150: MOD
22151: PUSH
22152: LD_INT 1
22154: PLUS
22155: PPUSH
22156: CALL_OW 259
22160: PUSH
22161: LD_INT 1
22163: PLUS
22164: PPUSH
22165: CALL_OW 237
22169: GO 22071
22171: POP
22172: POP
// end ;
22173: PPOPN 3
22175: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
22176: LD_EXP 40
22180: PUSH
22181: LD_EXP 48
22185: AND
22186: IFFALSE 22206
22188: GO 22190
22190: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
22191: LD_INT 4
22193: PPUSH
22194: LD_OWVAR 2
22198: PPUSH
22199: LD_INT 0
22201: PPUSH
22202: CALL_OW 324
22206: END
// every 0 0$1 trigger StreamModeActive and sShovel do
22207: LD_EXP 40
22211: PUSH
22212: LD_EXP 77
22216: AND
22217: IFFALSE 22237
22219: GO 22221
22221: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
22222: LD_INT 19
22224: PPUSH
22225: LD_OWVAR 2
22229: PPUSH
22230: LD_INT 0
22232: PPUSH
22233: CALL_OW 324
22237: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
22238: LD_EXP 40
22242: PUSH
22243: LD_EXP 49
22247: AND
22248: IFFALSE 22350
22250: GO 22252
22252: DISABLE
22253: LD_INT 0
22255: PPUSH
22256: PPUSH
// begin enable ;
22257: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
22258: LD_ADDR_VAR 0 2
22262: PUSH
22263: LD_INT 22
22265: PUSH
22266: LD_OWVAR 2
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: PUSH
22275: LD_INT 2
22277: PUSH
22278: LD_INT 34
22280: PUSH
22281: LD_INT 11
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: PUSH
22288: LD_INT 34
22290: PUSH
22291: LD_INT 30
22293: PUSH
22294: EMPTY
22295: LIST
22296: LIST
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: LIST
22302: PUSH
22303: EMPTY
22304: LIST
22305: LIST
22306: PPUSH
22307: CALL_OW 69
22311: ST_TO_ADDR
// if not tmp then
22312: LD_VAR 0 2
22316: NOT
22317: IFFALSE 22321
// exit ;
22319: GO 22350
// for i in tmp do
22321: LD_ADDR_VAR 0 1
22325: PUSH
22326: LD_VAR 0 2
22330: PUSH
22331: FOR_IN
22332: IFFALSE 22348
// begin SetLives ( i , 0 ) ;
22334: LD_VAR 0 1
22338: PPUSH
22339: LD_INT 0
22341: PPUSH
22342: CALL_OW 234
// end ;
22346: GO 22331
22348: POP
22349: POP
// end ;
22350: PPOPN 2
22352: END
// every 0 0$1 trigger StreamModeActive and sBunker do
22353: LD_EXP 40
22357: PUSH
22358: LD_EXP 50
22362: AND
22363: IFFALSE 22383
22365: GO 22367
22367: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
22368: LD_INT 32
22370: PPUSH
22371: LD_OWVAR 2
22375: PPUSH
22376: LD_INT 0
22378: PPUSH
22379: CALL_OW 324
22383: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
22384: LD_EXP 40
22388: PUSH
22389: LD_EXP 51
22393: AND
22394: IFFALSE 22575
22396: GO 22398
22398: DISABLE
22399: LD_INT 0
22401: PPUSH
22402: PPUSH
22403: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
22404: LD_ADDR_VAR 0 2
22408: PUSH
22409: LD_INT 22
22411: PUSH
22412: LD_OWVAR 2
22416: PUSH
22417: EMPTY
22418: LIST
22419: LIST
22420: PUSH
22421: LD_INT 33
22423: PUSH
22424: LD_INT 3
22426: PUSH
22427: EMPTY
22428: LIST
22429: LIST
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: PPUSH
22435: CALL_OW 69
22439: ST_TO_ADDR
// if not tmp then
22440: LD_VAR 0 2
22444: NOT
22445: IFFALSE 22449
// exit ;
22447: GO 22575
// side := 0 ;
22449: LD_ADDR_VAR 0 3
22453: PUSH
22454: LD_INT 0
22456: ST_TO_ADDR
// for i := 1 to 8 do
22457: LD_ADDR_VAR 0 1
22461: PUSH
22462: DOUBLE
22463: LD_INT 1
22465: DEC
22466: ST_TO_ADDR
22467: LD_INT 8
22469: PUSH
22470: FOR_TO
22471: IFFALSE 22519
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
22473: LD_OWVAR 2
22477: PUSH
22478: LD_VAR 0 1
22482: NONEQUAL
22483: PUSH
22484: LD_OWVAR 2
22488: PPUSH
22489: LD_VAR 0 1
22493: PPUSH
22494: CALL_OW 81
22498: PUSH
22499: LD_INT 2
22501: EQUAL
22502: AND
22503: IFFALSE 22517
// begin side := i ;
22505: LD_ADDR_VAR 0 3
22509: PUSH
22510: LD_VAR 0 1
22514: ST_TO_ADDR
// break ;
22515: GO 22519
// end ;
22517: GO 22470
22519: POP
22520: POP
// if not side then
22521: LD_VAR 0 3
22525: NOT
22526: IFFALSE 22530
// exit ;
22528: GO 22575
// for i := 1 to tmp do
22530: LD_ADDR_VAR 0 1
22534: PUSH
22535: DOUBLE
22536: LD_INT 1
22538: DEC
22539: ST_TO_ADDR
22540: LD_VAR 0 2
22544: PUSH
22545: FOR_TO
22546: IFFALSE 22573
// if Prob ( 60 ) then
22548: LD_INT 60
22550: PPUSH
22551: CALL_OW 13
22555: IFFALSE 22571
// SetSide ( i , side ) ;
22557: LD_VAR 0 1
22561: PPUSH
22562: LD_VAR 0 3
22566: PPUSH
22567: CALL_OW 235
22571: GO 22545
22573: POP
22574: POP
// end ;
22575: PPOPN 3
22577: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
22578: LD_EXP 40
22582: PUSH
22583: LD_EXP 53
22587: AND
22588: IFFALSE 22707
22590: GO 22592
22592: DISABLE
22593: LD_INT 0
22595: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
22596: LD_ADDR_VAR 0 1
22600: PUSH
22601: LD_INT 22
22603: PUSH
22604: LD_OWVAR 2
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: PUSH
22613: LD_INT 21
22615: PUSH
22616: LD_INT 1
22618: PUSH
22619: EMPTY
22620: LIST
22621: LIST
22622: PUSH
22623: LD_INT 3
22625: PUSH
22626: LD_INT 23
22628: PUSH
22629: LD_INT 0
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: LIST
22644: PPUSH
22645: CALL_OW 69
22649: PUSH
22650: FOR_IN
22651: IFFALSE 22705
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
22653: LD_VAR 0 1
22657: PPUSH
22658: CALL_OW 257
22662: PUSH
22663: LD_INT 1
22665: PUSH
22666: LD_INT 2
22668: PUSH
22669: LD_INT 3
22671: PUSH
22672: LD_INT 4
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: IN
22681: IFFALSE 22703
// SetClass ( un , rand ( 1 , 4 ) ) ;
22683: LD_VAR 0 1
22687: PPUSH
22688: LD_INT 1
22690: PPUSH
22691: LD_INT 4
22693: PPUSH
22694: CALL_OW 12
22698: PPUSH
22699: CALL_OW 336
22703: GO 22650
22705: POP
22706: POP
// end ;
22707: PPOPN 1
22709: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
22710: LD_EXP 40
22714: PUSH
22715: LD_EXP 52
22719: AND
22720: IFFALSE 22799
22722: GO 22724
22724: DISABLE
22725: LD_INT 0
22727: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22728: LD_ADDR_VAR 0 1
22732: PUSH
22733: LD_INT 22
22735: PUSH
22736: LD_OWVAR 2
22740: PUSH
22741: EMPTY
22742: LIST
22743: LIST
22744: PUSH
22745: LD_INT 21
22747: PUSH
22748: LD_INT 3
22750: PUSH
22751: EMPTY
22752: LIST
22753: LIST
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: PPUSH
22759: CALL_OW 69
22763: ST_TO_ADDR
// if not tmp then
22764: LD_VAR 0 1
22768: NOT
22769: IFFALSE 22773
// exit ;
22771: GO 22799
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
22773: LD_VAR 0 1
22777: PUSH
22778: LD_INT 1
22780: PPUSH
22781: LD_VAR 0 1
22785: PPUSH
22786: CALL_OW 12
22790: ARRAY
22791: PPUSH
22792: LD_INT 100
22794: PPUSH
22795: CALL_OW 234
// end ;
22799: PPOPN 1
22801: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
22802: LD_EXP 40
22806: PUSH
22807: LD_EXP 54
22811: AND
22812: IFFALSE 22910
22814: GO 22816
22816: DISABLE
22817: LD_INT 0
22819: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22820: LD_ADDR_VAR 0 1
22824: PUSH
22825: LD_INT 22
22827: PUSH
22828: LD_OWVAR 2
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: PUSH
22837: LD_INT 21
22839: PUSH
22840: LD_INT 1
22842: PUSH
22843: EMPTY
22844: LIST
22845: LIST
22846: PUSH
22847: EMPTY
22848: LIST
22849: LIST
22850: PPUSH
22851: CALL_OW 69
22855: ST_TO_ADDR
// if not tmp then
22856: LD_VAR 0 1
22860: NOT
22861: IFFALSE 22865
// exit ;
22863: GO 22910
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
22865: LD_VAR 0 1
22869: PUSH
22870: LD_INT 1
22872: PPUSH
22873: LD_VAR 0 1
22877: PPUSH
22878: CALL_OW 12
22882: ARRAY
22883: PPUSH
22884: LD_INT 1
22886: PPUSH
22887: LD_INT 4
22889: PPUSH
22890: CALL_OW 12
22894: PPUSH
22895: LD_INT 3000
22897: PPUSH
22898: LD_INT 9000
22900: PPUSH
22901: CALL_OW 12
22905: PPUSH
22906: CALL_OW 492
// end ;
22910: PPOPN 1
22912: END
// every 0 0$1 trigger StreamModeActive and sDepot do
22913: LD_EXP 40
22917: PUSH
22918: LD_EXP 55
22922: AND
22923: IFFALSE 22943
22925: GO 22927
22927: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
22928: LD_INT 1
22930: PPUSH
22931: LD_OWVAR 2
22935: PPUSH
22936: LD_INT 0
22938: PPUSH
22939: CALL_OW 324
22943: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
22944: LD_EXP 40
22948: PUSH
22949: LD_EXP 56
22953: AND
22954: IFFALSE 23037
22956: GO 22958
22958: DISABLE
22959: LD_INT 0
22961: PPUSH
22962: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22963: LD_ADDR_VAR 0 2
22967: PUSH
22968: LD_INT 22
22970: PUSH
22971: LD_OWVAR 2
22975: PUSH
22976: EMPTY
22977: LIST
22978: LIST
22979: PUSH
22980: LD_INT 21
22982: PUSH
22983: LD_INT 3
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: PUSH
22990: EMPTY
22991: LIST
22992: LIST
22993: PPUSH
22994: CALL_OW 69
22998: ST_TO_ADDR
// if not tmp then
22999: LD_VAR 0 2
23003: NOT
23004: IFFALSE 23008
// exit ;
23006: GO 23037
// for i in tmp do
23008: LD_ADDR_VAR 0 1
23012: PUSH
23013: LD_VAR 0 2
23017: PUSH
23018: FOR_IN
23019: IFFALSE 23035
// SetBLevel ( i , 10 ) ;
23021: LD_VAR 0 1
23025: PPUSH
23026: LD_INT 10
23028: PPUSH
23029: CALL_OW 241
23033: GO 23018
23035: POP
23036: POP
// end ;
23037: PPOPN 2
23039: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
23040: LD_EXP 40
23044: PUSH
23045: LD_EXP 57
23049: AND
23050: IFFALSE 23161
23052: GO 23054
23054: DISABLE
23055: LD_INT 0
23057: PPUSH
23058: PPUSH
23059: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23060: LD_ADDR_VAR 0 3
23064: PUSH
23065: LD_INT 22
23067: PUSH
23068: LD_OWVAR 2
23072: PUSH
23073: EMPTY
23074: LIST
23075: LIST
23076: PUSH
23077: LD_INT 25
23079: PUSH
23080: LD_INT 1
23082: PUSH
23083: EMPTY
23084: LIST
23085: LIST
23086: PUSH
23087: EMPTY
23088: LIST
23089: LIST
23090: PPUSH
23091: CALL_OW 69
23095: ST_TO_ADDR
// if not tmp then
23096: LD_VAR 0 3
23100: NOT
23101: IFFALSE 23105
// exit ;
23103: GO 23161
// un := tmp [ rand ( 1 , tmp ) ] ;
23105: LD_ADDR_VAR 0 2
23109: PUSH
23110: LD_VAR 0 3
23114: PUSH
23115: LD_INT 1
23117: PPUSH
23118: LD_VAR 0 3
23122: PPUSH
23123: CALL_OW 12
23127: ARRAY
23128: ST_TO_ADDR
// if Crawls ( un ) then
23129: LD_VAR 0 2
23133: PPUSH
23134: CALL_OW 318
23138: IFFALSE 23149
// ComWalk ( un ) ;
23140: LD_VAR 0 2
23144: PPUSH
23145: CALL_OW 138
// SetClass ( un , class_sniper ) ;
23149: LD_VAR 0 2
23153: PPUSH
23154: LD_INT 5
23156: PPUSH
23157: CALL_OW 336
// end ;
23161: PPOPN 3
23163: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
23164: LD_EXP 40
23168: PUSH
23169: LD_EXP 58
23173: AND
23174: PUSH
23175: LD_OWVAR 67
23179: PUSH
23180: LD_INT 4
23182: LESS
23183: AND
23184: IFFALSE 23203
23186: GO 23188
23188: DISABLE
// begin Difficulty := Difficulty + 1 ;
23189: LD_ADDR_OWVAR 67
23193: PUSH
23194: LD_OWVAR 67
23198: PUSH
23199: LD_INT 1
23201: PLUS
23202: ST_TO_ADDR
// end ;
23203: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
23204: LD_EXP 40
23208: PUSH
23209: LD_EXP 59
23213: AND
23214: IFFALSE 23317
23216: GO 23218
23218: DISABLE
23219: LD_INT 0
23221: PPUSH
// begin for i := 1 to 5 do
23222: LD_ADDR_VAR 0 1
23226: PUSH
23227: DOUBLE
23228: LD_INT 1
23230: DEC
23231: ST_TO_ADDR
23232: LD_INT 5
23234: PUSH
23235: FOR_TO
23236: IFFALSE 23315
// begin uc_nation := nation_nature ;
23238: LD_ADDR_OWVAR 21
23242: PUSH
23243: LD_INT 0
23245: ST_TO_ADDR
// uc_side := 0 ;
23246: LD_ADDR_OWVAR 20
23250: PUSH
23251: LD_INT 0
23253: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23254: LD_ADDR_OWVAR 29
23258: PUSH
23259: LD_INT 12
23261: PUSH
23262: LD_INT 12
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: ST_TO_ADDR
// hc_agressivity := 20 ;
23269: LD_ADDR_OWVAR 35
23273: PUSH
23274: LD_INT 20
23276: ST_TO_ADDR
// hc_class := class_tiger ;
23277: LD_ADDR_OWVAR 28
23281: PUSH
23282: LD_INT 14
23284: ST_TO_ADDR
// hc_gallery :=  ;
23285: LD_ADDR_OWVAR 33
23289: PUSH
23290: LD_STRING 
23292: ST_TO_ADDR
// hc_name :=  ;
23293: LD_ADDR_OWVAR 26
23297: PUSH
23298: LD_STRING 
23300: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
23301: CALL_OW 44
23305: PPUSH
23306: LD_INT 0
23308: PPUSH
23309: CALL_OW 51
// end ;
23313: GO 23235
23315: POP
23316: POP
// end ;
23317: PPOPN 1
23319: END
// every 0 0$1 trigger StreamModeActive and sBomb do
23320: LD_EXP 40
23324: PUSH
23325: LD_EXP 60
23329: AND
23330: IFFALSE 23339
23332: GO 23334
23334: DISABLE
// StreamSibBomb ;
23335: CALL 23340 0 0
23339: END
// export function StreamSibBomb ; var i , x , y ; begin
23340: LD_INT 0
23342: PPUSH
23343: PPUSH
23344: PPUSH
23345: PPUSH
// result := false ;
23346: LD_ADDR_VAR 0 1
23350: PUSH
23351: LD_INT 0
23353: ST_TO_ADDR
// for i := 1 to 16 do
23354: LD_ADDR_VAR 0 2
23358: PUSH
23359: DOUBLE
23360: LD_INT 1
23362: DEC
23363: ST_TO_ADDR
23364: LD_INT 16
23366: PUSH
23367: FOR_TO
23368: IFFALSE 23567
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23370: LD_ADDR_VAR 0 3
23374: PUSH
23375: LD_INT 10
23377: PUSH
23378: LD_INT 20
23380: PUSH
23381: LD_INT 30
23383: PUSH
23384: LD_INT 40
23386: PUSH
23387: LD_INT 50
23389: PUSH
23390: LD_INT 60
23392: PUSH
23393: LD_INT 70
23395: PUSH
23396: LD_INT 80
23398: PUSH
23399: LD_INT 90
23401: PUSH
23402: LD_INT 100
23404: PUSH
23405: LD_INT 110
23407: PUSH
23408: LD_INT 120
23410: PUSH
23411: LD_INT 130
23413: PUSH
23414: LD_INT 140
23416: PUSH
23417: LD_INT 150
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: PUSH
23437: LD_INT 1
23439: PPUSH
23440: LD_INT 15
23442: PPUSH
23443: CALL_OW 12
23447: ARRAY
23448: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23449: LD_ADDR_VAR 0 4
23453: PUSH
23454: LD_INT 10
23456: PUSH
23457: LD_INT 20
23459: PUSH
23460: LD_INT 30
23462: PUSH
23463: LD_INT 40
23465: PUSH
23466: LD_INT 50
23468: PUSH
23469: LD_INT 60
23471: PUSH
23472: LD_INT 70
23474: PUSH
23475: LD_INT 80
23477: PUSH
23478: LD_INT 90
23480: PUSH
23481: LD_INT 100
23483: PUSH
23484: LD_INT 110
23486: PUSH
23487: LD_INT 120
23489: PUSH
23490: LD_INT 130
23492: PUSH
23493: LD_INT 140
23495: PUSH
23496: LD_INT 150
23498: PUSH
23499: EMPTY
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: PUSH
23516: LD_INT 1
23518: PPUSH
23519: LD_INT 15
23521: PPUSH
23522: CALL_OW 12
23526: ARRAY
23527: ST_TO_ADDR
// if ValidHex ( x , y ) then
23528: LD_VAR 0 3
23532: PPUSH
23533: LD_VAR 0 4
23537: PPUSH
23538: CALL_OW 488
23542: IFFALSE 23565
// begin result := [ x , y ] ;
23544: LD_ADDR_VAR 0 1
23548: PUSH
23549: LD_VAR 0 3
23553: PUSH
23554: LD_VAR 0 4
23558: PUSH
23559: EMPTY
23560: LIST
23561: LIST
23562: ST_TO_ADDR
// break ;
23563: GO 23567
// end ; end ;
23565: GO 23367
23567: POP
23568: POP
// if result then
23569: LD_VAR 0 1
23573: IFFALSE 23633
// begin ToLua ( playSibBomb() ) ;
23575: LD_STRING playSibBomb()
23577: PPUSH
23578: CALL_OW 559
// wait ( 0 0$14 ) ;
23582: LD_INT 490
23584: PPUSH
23585: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
23589: LD_VAR 0 1
23593: PUSH
23594: LD_INT 1
23596: ARRAY
23597: PPUSH
23598: LD_VAR 0 1
23602: PUSH
23603: LD_INT 2
23605: ARRAY
23606: PPUSH
23607: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
23611: LD_VAR 0 1
23615: PUSH
23616: LD_INT 1
23618: ARRAY
23619: PPUSH
23620: LD_VAR 0 1
23624: PUSH
23625: LD_INT 2
23627: ARRAY
23628: PPUSH
23629: CALL_OW 429
// end ; end ;
23633: LD_VAR 0 1
23637: RET
// every 0 0$1 trigger StreamModeActive and sReset do
23638: LD_EXP 40
23642: PUSH
23643: LD_EXP 62
23647: AND
23648: IFFALSE 23660
23650: GO 23652
23652: DISABLE
// YouLost (  ) ;
23653: LD_STRING 
23655: PPUSH
23656: CALL_OW 104
23660: END
// every 0 0$1 trigger StreamModeActive and sFog do
23661: LD_EXP 40
23665: PUSH
23666: LD_EXP 61
23670: AND
23671: IFFALSE 23685
23673: GO 23675
23675: DISABLE
// FogOff ( your_side ) ;
23676: LD_OWVAR 2
23680: PPUSH
23681: CALL_OW 344
23685: END
// every 0 0$1 trigger StreamModeActive and sSun do
23686: LD_EXP 40
23690: PUSH
23691: LD_EXP 63
23695: AND
23696: IFFALSE 23724
23698: GO 23700
23700: DISABLE
// begin solar_recharge_percent := 0 ;
23701: LD_ADDR_OWVAR 79
23705: PUSH
23706: LD_INT 0
23708: ST_TO_ADDR
// wait ( 5 5$00 ) ;
23709: LD_INT 10500
23711: PPUSH
23712: CALL_OW 67
// solar_recharge_percent := 100 ;
23716: LD_ADDR_OWVAR 79
23720: PUSH
23721: LD_INT 100
23723: ST_TO_ADDR
// end ;
23724: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
23725: LD_EXP 40
23729: PUSH
23730: LD_EXP 64
23734: AND
23735: IFFALSE 23974
23737: GO 23739
23739: DISABLE
23740: LD_INT 0
23742: PPUSH
23743: PPUSH
23744: PPUSH
// begin tmp := [ ] ;
23745: LD_ADDR_VAR 0 3
23749: PUSH
23750: EMPTY
23751: ST_TO_ADDR
// for i := 1 to 6 do
23752: LD_ADDR_VAR 0 1
23756: PUSH
23757: DOUBLE
23758: LD_INT 1
23760: DEC
23761: ST_TO_ADDR
23762: LD_INT 6
23764: PUSH
23765: FOR_TO
23766: IFFALSE 23871
// begin uc_nation := nation_nature ;
23768: LD_ADDR_OWVAR 21
23772: PUSH
23773: LD_INT 0
23775: ST_TO_ADDR
// uc_side := 0 ;
23776: LD_ADDR_OWVAR 20
23780: PUSH
23781: LD_INT 0
23783: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23784: LD_ADDR_OWVAR 29
23788: PUSH
23789: LD_INT 12
23791: PUSH
23792: LD_INT 12
23794: PUSH
23795: EMPTY
23796: LIST
23797: LIST
23798: ST_TO_ADDR
// hc_agressivity := 20 ;
23799: LD_ADDR_OWVAR 35
23803: PUSH
23804: LD_INT 20
23806: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
23807: LD_ADDR_OWVAR 28
23811: PUSH
23812: LD_INT 17
23814: ST_TO_ADDR
// hc_gallery :=  ;
23815: LD_ADDR_OWVAR 33
23819: PUSH
23820: LD_STRING 
23822: ST_TO_ADDR
// hc_name :=  ;
23823: LD_ADDR_OWVAR 26
23827: PUSH
23828: LD_STRING 
23830: ST_TO_ADDR
// un := CreateHuman ;
23831: LD_ADDR_VAR 0 2
23835: PUSH
23836: CALL_OW 44
23840: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
23841: LD_VAR 0 2
23845: PPUSH
23846: LD_INT 1
23848: PPUSH
23849: CALL_OW 51
// tmp := tmp ^ un ;
23853: LD_ADDR_VAR 0 3
23857: PUSH
23858: LD_VAR 0 3
23862: PUSH
23863: LD_VAR 0 2
23867: ADD
23868: ST_TO_ADDR
// end ;
23869: GO 23765
23871: POP
23872: POP
// repeat wait ( 0 0$1 ) ;
23873: LD_INT 35
23875: PPUSH
23876: CALL_OW 67
// for un in tmp do
23880: LD_ADDR_VAR 0 2
23884: PUSH
23885: LD_VAR 0 3
23889: PUSH
23890: FOR_IN
23891: IFFALSE 23965
// begin if IsDead ( un ) then
23893: LD_VAR 0 2
23897: PPUSH
23898: CALL_OW 301
23902: IFFALSE 23922
// begin tmp := tmp diff un ;
23904: LD_ADDR_VAR 0 3
23908: PUSH
23909: LD_VAR 0 3
23913: PUSH
23914: LD_VAR 0 2
23918: DIFF
23919: ST_TO_ADDR
// continue ;
23920: GO 23890
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
23922: LD_VAR 0 2
23926: PPUSH
23927: LD_INT 3
23929: PUSH
23930: LD_INT 22
23932: PUSH
23933: LD_INT 0
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: PUSH
23940: EMPTY
23941: LIST
23942: LIST
23943: PPUSH
23944: CALL_OW 69
23948: PPUSH
23949: LD_VAR 0 2
23953: PPUSH
23954: CALL_OW 74
23958: PPUSH
23959: CALL_OW 115
// end ;
23963: GO 23890
23965: POP
23966: POP
// until not tmp ;
23967: LD_VAR 0 3
23971: NOT
23972: IFFALSE 23873
// end ;
23974: PPOPN 3
23976: END
// every 0 0$1 trigger StreamModeActive and sTroll do
23977: LD_EXP 40
23981: PUSH
23982: LD_EXP 65
23986: AND
23987: IFFALSE 24041
23989: GO 23991
23991: DISABLE
// begin ToLua ( displayTroll(); ) ;
23992: LD_STRING displayTroll();
23994: PPUSH
23995: CALL_OW 559
// wait ( 3 3$00 ) ;
23999: LD_INT 6300
24001: PPUSH
24002: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24006: LD_STRING hideTroll();
24008: PPUSH
24009: CALL_OW 559
// wait ( 1 1$00 ) ;
24013: LD_INT 2100
24015: PPUSH
24016: CALL_OW 67
// ToLua ( displayTroll(); ) ;
24020: LD_STRING displayTroll();
24022: PPUSH
24023: CALL_OW 559
// wait ( 1 1$00 ) ;
24027: LD_INT 2100
24029: PPUSH
24030: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24034: LD_STRING hideTroll();
24036: PPUSH
24037: CALL_OW 559
// end ;
24041: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
24042: LD_EXP 40
24046: PUSH
24047: LD_EXP 66
24051: AND
24052: IFFALSE 24115
24054: GO 24056
24056: DISABLE
24057: LD_INT 0
24059: PPUSH
// begin p := 0 ;
24060: LD_ADDR_VAR 0 1
24064: PUSH
24065: LD_INT 0
24067: ST_TO_ADDR
// repeat game_speed := 1 ;
24068: LD_ADDR_OWVAR 65
24072: PUSH
24073: LD_INT 1
24075: ST_TO_ADDR
// wait ( 0 0$1 ) ;
24076: LD_INT 35
24078: PPUSH
24079: CALL_OW 67
// p := p + 1 ;
24083: LD_ADDR_VAR 0 1
24087: PUSH
24088: LD_VAR 0 1
24092: PUSH
24093: LD_INT 1
24095: PLUS
24096: ST_TO_ADDR
// until p >= 60 ;
24097: LD_VAR 0 1
24101: PUSH
24102: LD_INT 60
24104: GREATEREQUAL
24105: IFFALSE 24068
// game_speed := 4 ;
24107: LD_ADDR_OWVAR 65
24111: PUSH
24112: LD_INT 4
24114: ST_TO_ADDR
// end ;
24115: PPOPN 1
24117: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
24118: LD_EXP 40
24122: PUSH
24123: LD_EXP 67
24127: AND
24128: IFFALSE 24274
24130: GO 24132
24132: DISABLE
24133: LD_INT 0
24135: PPUSH
24136: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24137: LD_ADDR_VAR 0 1
24141: PUSH
24142: LD_INT 22
24144: PUSH
24145: LD_OWVAR 2
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: PUSH
24154: LD_INT 2
24156: PUSH
24157: LD_INT 30
24159: PUSH
24160: LD_INT 0
24162: PUSH
24163: EMPTY
24164: LIST
24165: LIST
24166: PUSH
24167: LD_INT 30
24169: PUSH
24170: LD_INT 1
24172: PUSH
24173: EMPTY
24174: LIST
24175: LIST
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: LIST
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PPUSH
24186: CALL_OW 69
24190: ST_TO_ADDR
// if not depot then
24191: LD_VAR 0 1
24195: NOT
24196: IFFALSE 24200
// exit ;
24198: GO 24274
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
24200: LD_ADDR_VAR 0 2
24204: PUSH
24205: LD_VAR 0 1
24209: PUSH
24210: LD_INT 1
24212: PPUSH
24213: LD_VAR 0 1
24217: PPUSH
24218: CALL_OW 12
24222: ARRAY
24223: PPUSH
24224: CALL_OW 274
24228: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
24229: LD_VAR 0 2
24233: PPUSH
24234: LD_INT 1
24236: PPUSH
24237: LD_INT 0
24239: PPUSH
24240: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
24244: LD_VAR 0 2
24248: PPUSH
24249: LD_INT 2
24251: PPUSH
24252: LD_INT 0
24254: PPUSH
24255: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
24259: LD_VAR 0 2
24263: PPUSH
24264: LD_INT 3
24266: PPUSH
24267: LD_INT 0
24269: PPUSH
24270: CALL_OW 277
// end ;
24274: PPOPN 2
24276: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
24277: LD_EXP 40
24281: PUSH
24282: LD_EXP 68
24286: AND
24287: IFFALSE 24384
24289: GO 24291
24291: DISABLE
24292: LD_INT 0
24294: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24295: LD_ADDR_VAR 0 1
24299: PUSH
24300: LD_INT 22
24302: PUSH
24303: LD_OWVAR 2
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: PUSH
24312: LD_INT 21
24314: PUSH
24315: LD_INT 1
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: PUSH
24322: LD_INT 3
24324: PUSH
24325: LD_INT 23
24327: PUSH
24328: LD_INT 0
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: PUSH
24339: EMPTY
24340: LIST
24341: LIST
24342: LIST
24343: PPUSH
24344: CALL_OW 69
24348: ST_TO_ADDR
// if not tmp then
24349: LD_VAR 0 1
24353: NOT
24354: IFFALSE 24358
// exit ;
24356: GO 24384
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
24358: LD_VAR 0 1
24362: PUSH
24363: LD_INT 1
24365: PPUSH
24366: LD_VAR 0 1
24370: PPUSH
24371: CALL_OW 12
24375: ARRAY
24376: PPUSH
24377: LD_INT 200
24379: PPUSH
24380: CALL_OW 234
// end ;
24384: PPOPN 1
24386: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
24387: LD_EXP 40
24391: PUSH
24392: LD_EXP 69
24396: AND
24397: IFFALSE 24476
24399: GO 24401
24401: DISABLE
24402: LD_INT 0
24404: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
24405: LD_ADDR_VAR 0 1
24409: PUSH
24410: LD_INT 22
24412: PUSH
24413: LD_OWVAR 2
24417: PUSH
24418: EMPTY
24419: LIST
24420: LIST
24421: PUSH
24422: LD_INT 21
24424: PUSH
24425: LD_INT 2
24427: PUSH
24428: EMPTY
24429: LIST
24430: LIST
24431: PUSH
24432: EMPTY
24433: LIST
24434: LIST
24435: PPUSH
24436: CALL_OW 69
24440: ST_TO_ADDR
// if not tmp then
24441: LD_VAR 0 1
24445: NOT
24446: IFFALSE 24450
// exit ;
24448: GO 24476
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
24450: LD_VAR 0 1
24454: PUSH
24455: LD_INT 1
24457: PPUSH
24458: LD_VAR 0 1
24462: PPUSH
24463: CALL_OW 12
24467: ARRAY
24468: PPUSH
24469: LD_INT 60
24471: PPUSH
24472: CALL_OW 234
// end ;
24476: PPOPN 1
24478: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
24479: LD_EXP 40
24483: PUSH
24484: LD_EXP 70
24488: AND
24489: IFFALSE 24588
24491: GO 24493
24493: DISABLE
24494: LD_INT 0
24496: PPUSH
24497: PPUSH
// begin enable ;
24498: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
24499: LD_ADDR_VAR 0 1
24503: PUSH
24504: LD_INT 22
24506: PUSH
24507: LD_OWVAR 2
24511: PUSH
24512: EMPTY
24513: LIST
24514: LIST
24515: PUSH
24516: LD_INT 61
24518: PUSH
24519: EMPTY
24520: LIST
24521: PUSH
24522: LD_INT 33
24524: PUSH
24525: LD_INT 2
24527: PUSH
24528: EMPTY
24529: LIST
24530: LIST
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: LIST
24536: PPUSH
24537: CALL_OW 69
24541: ST_TO_ADDR
// if not tmp then
24542: LD_VAR 0 1
24546: NOT
24547: IFFALSE 24551
// exit ;
24549: GO 24588
// for i in tmp do
24551: LD_ADDR_VAR 0 2
24555: PUSH
24556: LD_VAR 0 1
24560: PUSH
24561: FOR_IN
24562: IFFALSE 24586
// if IsControledBy ( i ) then
24564: LD_VAR 0 2
24568: PPUSH
24569: CALL_OW 312
24573: IFFALSE 24584
// ComUnlink ( i ) ;
24575: LD_VAR 0 2
24579: PPUSH
24580: CALL_OW 136
24584: GO 24561
24586: POP
24587: POP
// end ;
24588: PPOPN 2
24590: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
24591: LD_EXP 40
24595: PUSH
24596: LD_EXP 71
24600: AND
24601: IFFALSE 24741
24603: GO 24605
24605: DISABLE
24606: LD_INT 0
24608: PPUSH
24609: PPUSH
// begin ToLua ( displayPowell(); ) ;
24610: LD_STRING displayPowell();
24612: PPUSH
24613: CALL_OW 559
// uc_side := 0 ;
24617: LD_ADDR_OWVAR 20
24621: PUSH
24622: LD_INT 0
24624: ST_TO_ADDR
// uc_nation := 2 ;
24625: LD_ADDR_OWVAR 21
24629: PUSH
24630: LD_INT 2
24632: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
24633: LD_ADDR_OWVAR 37
24637: PUSH
24638: LD_INT 14
24640: ST_TO_ADDR
// vc_engine := engine_siberite ;
24641: LD_ADDR_OWVAR 39
24645: PUSH
24646: LD_INT 3
24648: ST_TO_ADDR
// vc_control := control_apeman ;
24649: LD_ADDR_OWVAR 38
24653: PUSH
24654: LD_INT 5
24656: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
24657: LD_ADDR_OWVAR 40
24661: PUSH
24662: LD_INT 29
24664: ST_TO_ADDR
// un := CreateVehicle ;
24665: LD_ADDR_VAR 0 2
24669: PUSH
24670: CALL_OW 45
24674: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24675: LD_VAR 0 2
24679: PPUSH
24680: LD_INT 1
24682: PPUSH
24683: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24687: LD_INT 35
24689: PPUSH
24690: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24694: LD_VAR 0 2
24698: PPUSH
24699: LD_INT 22
24701: PUSH
24702: LD_OWVAR 2
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PPUSH
24711: CALL_OW 69
24715: PPUSH
24716: LD_VAR 0 2
24720: PPUSH
24721: CALL_OW 74
24725: PPUSH
24726: CALL_OW 115
// until IsDead ( un ) ;
24730: LD_VAR 0 2
24734: PPUSH
24735: CALL_OW 301
24739: IFFALSE 24687
// end ;
24741: PPOPN 2
24743: END
// every 0 0$1 trigger StreamModeActive and sStu do
24744: LD_EXP 40
24748: PUSH
24749: LD_EXP 79
24753: AND
24754: IFFALSE 24770
24756: GO 24758
24758: DISABLE
// begin ToLua ( displayStucuk(); ) ;
24759: LD_STRING displayStucuk();
24761: PPUSH
24762: CALL_OW 559
// ResetFog ;
24766: CALL_OW 335
// end ;
24770: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
24771: LD_EXP 40
24775: PUSH
24776: LD_EXP 72
24780: AND
24781: IFFALSE 24922
24783: GO 24785
24785: DISABLE
24786: LD_INT 0
24788: PPUSH
24789: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24790: LD_ADDR_VAR 0 2
24794: PUSH
24795: LD_INT 22
24797: PUSH
24798: LD_OWVAR 2
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: PUSH
24807: LD_INT 21
24809: PUSH
24810: LD_INT 1
24812: PUSH
24813: EMPTY
24814: LIST
24815: LIST
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: PPUSH
24821: CALL_OW 69
24825: ST_TO_ADDR
// if not tmp then
24826: LD_VAR 0 2
24830: NOT
24831: IFFALSE 24835
// exit ;
24833: GO 24922
// un := tmp [ rand ( 1 , tmp ) ] ;
24835: LD_ADDR_VAR 0 1
24839: PUSH
24840: LD_VAR 0 2
24844: PUSH
24845: LD_INT 1
24847: PPUSH
24848: LD_VAR 0 2
24852: PPUSH
24853: CALL_OW 12
24857: ARRAY
24858: ST_TO_ADDR
// SetSide ( un , 0 ) ;
24859: LD_VAR 0 1
24863: PPUSH
24864: LD_INT 0
24866: PPUSH
24867: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
24871: LD_VAR 0 1
24875: PPUSH
24876: LD_OWVAR 3
24880: PUSH
24881: LD_VAR 0 1
24885: DIFF
24886: PPUSH
24887: LD_VAR 0 1
24891: PPUSH
24892: CALL_OW 74
24896: PPUSH
24897: CALL_OW 115
// wait ( 0 0$20 ) ;
24901: LD_INT 700
24903: PPUSH
24904: CALL_OW 67
// SetSide ( un , your_side ) ;
24908: LD_VAR 0 1
24912: PPUSH
24913: LD_OWVAR 2
24917: PPUSH
24918: CALL_OW 235
// end ;
24922: PPOPN 2
24924: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
24925: LD_EXP 40
24929: PUSH
24930: LD_EXP 73
24934: AND
24935: IFFALSE 25041
24937: GO 24939
24939: DISABLE
24940: LD_INT 0
24942: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24943: LD_ADDR_VAR 0 1
24947: PUSH
24948: LD_INT 22
24950: PUSH
24951: LD_OWVAR 2
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: PUSH
24960: LD_INT 2
24962: PUSH
24963: LD_INT 30
24965: PUSH
24966: LD_INT 0
24968: PUSH
24969: EMPTY
24970: LIST
24971: LIST
24972: PUSH
24973: LD_INT 30
24975: PUSH
24976: LD_INT 1
24978: PUSH
24979: EMPTY
24980: LIST
24981: LIST
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: LIST
24987: PUSH
24988: EMPTY
24989: LIST
24990: LIST
24991: PPUSH
24992: CALL_OW 69
24996: ST_TO_ADDR
// if not depot then
24997: LD_VAR 0 1
25001: NOT
25002: IFFALSE 25006
// exit ;
25004: GO 25041
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
25006: LD_VAR 0 1
25010: PUSH
25011: LD_INT 1
25013: ARRAY
25014: PPUSH
25015: CALL_OW 250
25019: PPUSH
25020: LD_VAR 0 1
25024: PUSH
25025: LD_INT 1
25027: ARRAY
25028: PPUSH
25029: CALL_OW 251
25033: PPUSH
25034: LD_INT 70
25036: PPUSH
25037: CALL_OW 495
// end ;
25041: PPOPN 1
25043: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
25044: LD_EXP 40
25048: PUSH
25049: LD_EXP 74
25053: AND
25054: IFFALSE 25265
25056: GO 25058
25058: DISABLE
25059: LD_INT 0
25061: PPUSH
25062: PPUSH
25063: PPUSH
25064: PPUSH
25065: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25066: LD_ADDR_VAR 0 5
25070: PUSH
25071: LD_INT 22
25073: PUSH
25074: LD_OWVAR 2
25078: PUSH
25079: EMPTY
25080: LIST
25081: LIST
25082: PUSH
25083: LD_INT 21
25085: PUSH
25086: LD_INT 1
25088: PUSH
25089: EMPTY
25090: LIST
25091: LIST
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: PPUSH
25097: CALL_OW 69
25101: ST_TO_ADDR
// if not tmp then
25102: LD_VAR 0 5
25106: NOT
25107: IFFALSE 25111
// exit ;
25109: GO 25265
// for i in tmp do
25111: LD_ADDR_VAR 0 1
25115: PUSH
25116: LD_VAR 0 5
25120: PUSH
25121: FOR_IN
25122: IFFALSE 25263
// begin d := rand ( 0 , 5 ) ;
25124: LD_ADDR_VAR 0 4
25128: PUSH
25129: LD_INT 0
25131: PPUSH
25132: LD_INT 5
25134: PPUSH
25135: CALL_OW 12
25139: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
25140: LD_ADDR_VAR 0 2
25144: PUSH
25145: LD_VAR 0 1
25149: PPUSH
25150: CALL_OW 250
25154: PPUSH
25155: LD_VAR 0 4
25159: PPUSH
25160: LD_INT 3
25162: PPUSH
25163: LD_INT 12
25165: PPUSH
25166: CALL_OW 12
25170: PPUSH
25171: CALL_OW 272
25175: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
25176: LD_ADDR_VAR 0 3
25180: PUSH
25181: LD_VAR 0 1
25185: PPUSH
25186: CALL_OW 251
25190: PPUSH
25191: LD_VAR 0 4
25195: PPUSH
25196: LD_INT 3
25198: PPUSH
25199: LD_INT 12
25201: PPUSH
25202: CALL_OW 12
25206: PPUSH
25207: CALL_OW 273
25211: ST_TO_ADDR
// if ValidHex ( x , y ) then
25212: LD_VAR 0 2
25216: PPUSH
25217: LD_VAR 0 3
25221: PPUSH
25222: CALL_OW 488
25226: IFFALSE 25261
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
25228: LD_VAR 0 1
25232: PPUSH
25233: LD_VAR 0 2
25237: PPUSH
25238: LD_VAR 0 3
25242: PPUSH
25243: LD_INT 3
25245: PPUSH
25246: LD_INT 6
25248: PPUSH
25249: CALL_OW 12
25253: PPUSH
25254: LD_INT 1
25256: PPUSH
25257: CALL_OW 483
// end ;
25261: GO 25121
25263: POP
25264: POP
// end ;
25265: PPOPN 5
25267: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
25268: LD_EXP 40
25272: PUSH
25273: LD_EXP 75
25277: AND
25278: IFFALSE 25372
25280: GO 25282
25282: DISABLE
25283: LD_INT 0
25285: PPUSH
25286: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
25287: LD_ADDR_VAR 0 2
25291: PUSH
25292: LD_INT 22
25294: PUSH
25295: LD_OWVAR 2
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: PUSH
25304: LD_INT 32
25306: PUSH
25307: LD_INT 1
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PUSH
25314: LD_INT 21
25316: PUSH
25317: LD_INT 2
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: PUSH
25324: EMPTY
25325: LIST
25326: LIST
25327: LIST
25328: PPUSH
25329: CALL_OW 69
25333: ST_TO_ADDR
// if not tmp then
25334: LD_VAR 0 2
25338: NOT
25339: IFFALSE 25343
// exit ;
25341: GO 25372
// for i in tmp do
25343: LD_ADDR_VAR 0 1
25347: PUSH
25348: LD_VAR 0 2
25352: PUSH
25353: FOR_IN
25354: IFFALSE 25370
// SetFuel ( i , 0 ) ;
25356: LD_VAR 0 1
25360: PPUSH
25361: LD_INT 0
25363: PPUSH
25364: CALL_OW 240
25368: GO 25353
25370: POP
25371: POP
// end ;
25372: PPOPN 2
25374: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
25375: LD_EXP 40
25379: PUSH
25380: LD_EXP 76
25384: AND
25385: IFFALSE 25451
25387: GO 25389
25389: DISABLE
25390: LD_INT 0
25392: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25393: LD_ADDR_VAR 0 1
25397: PUSH
25398: LD_INT 22
25400: PUSH
25401: LD_OWVAR 2
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: PUSH
25410: LD_INT 30
25412: PUSH
25413: LD_INT 29
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: PPUSH
25424: CALL_OW 69
25428: ST_TO_ADDR
// if not tmp then
25429: LD_VAR 0 1
25433: NOT
25434: IFFALSE 25438
// exit ;
25436: GO 25451
// DestroyUnit ( tmp [ 1 ] ) ;
25438: LD_VAR 0 1
25442: PUSH
25443: LD_INT 1
25445: ARRAY
25446: PPUSH
25447: CALL_OW 65
// end ;
25451: PPOPN 1
25453: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
25454: LD_EXP 40
25458: PUSH
25459: LD_EXP 78
25463: AND
25464: IFFALSE 25593
25466: GO 25468
25468: DISABLE
25469: LD_INT 0
25471: PPUSH
// begin uc_side := 0 ;
25472: LD_ADDR_OWVAR 20
25476: PUSH
25477: LD_INT 0
25479: ST_TO_ADDR
// uc_nation := nation_arabian ;
25480: LD_ADDR_OWVAR 21
25484: PUSH
25485: LD_INT 2
25487: ST_TO_ADDR
// hc_gallery :=  ;
25488: LD_ADDR_OWVAR 33
25492: PUSH
25493: LD_STRING 
25495: ST_TO_ADDR
// hc_name :=  ;
25496: LD_ADDR_OWVAR 26
25500: PUSH
25501: LD_STRING 
25503: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
25504: LD_INT 1
25506: PPUSH
25507: LD_INT 11
25509: PPUSH
25510: LD_INT 10
25512: PPUSH
25513: CALL_OW 380
// un := CreateHuman ;
25517: LD_ADDR_VAR 0 1
25521: PUSH
25522: CALL_OW 44
25526: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25527: LD_VAR 0 1
25531: PPUSH
25532: LD_INT 1
25534: PPUSH
25535: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25539: LD_INT 35
25541: PPUSH
25542: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25546: LD_VAR 0 1
25550: PPUSH
25551: LD_INT 22
25553: PUSH
25554: LD_OWVAR 2
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: PPUSH
25563: CALL_OW 69
25567: PPUSH
25568: LD_VAR 0 1
25572: PPUSH
25573: CALL_OW 74
25577: PPUSH
25578: CALL_OW 115
// until IsDead ( un ) ;
25582: LD_VAR 0 1
25586: PPUSH
25587: CALL_OW 301
25591: IFFALSE 25539
// end ;
25593: PPOPN 1
25595: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
25596: LD_EXP 40
25600: PUSH
25601: LD_EXP 80
25605: AND
25606: IFFALSE 25618
25608: GO 25610
25610: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
25611: LD_STRING earthquake(getX(game), 0, 32)
25613: PPUSH
25614: CALL_OW 559
25618: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
25619: LD_EXP 40
25623: PUSH
25624: LD_EXP 81
25628: AND
25629: IFFALSE 25720
25631: GO 25633
25633: DISABLE
25634: LD_INT 0
25636: PPUSH
// begin enable ;
25637: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
25638: LD_ADDR_VAR 0 1
25642: PUSH
25643: LD_INT 22
25645: PUSH
25646: LD_OWVAR 2
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: PUSH
25655: LD_INT 21
25657: PUSH
25658: LD_INT 2
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: PUSH
25665: LD_INT 33
25667: PUSH
25668: LD_INT 3
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: LIST
25679: PPUSH
25680: CALL_OW 69
25684: ST_TO_ADDR
// if not tmp then
25685: LD_VAR 0 1
25689: NOT
25690: IFFALSE 25694
// exit ;
25692: GO 25720
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25694: LD_VAR 0 1
25698: PUSH
25699: LD_INT 1
25701: PPUSH
25702: LD_VAR 0 1
25706: PPUSH
25707: CALL_OW 12
25711: ARRAY
25712: PPUSH
25713: LD_INT 1
25715: PPUSH
25716: CALL_OW 234
// end ;
25720: PPOPN 1
25722: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
25723: LD_EXP 40
25727: PUSH
25728: LD_EXP 82
25732: AND
25733: IFFALSE 25874
25735: GO 25737
25737: DISABLE
25738: LD_INT 0
25740: PPUSH
25741: PPUSH
25742: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25743: LD_ADDR_VAR 0 3
25747: PUSH
25748: LD_INT 22
25750: PUSH
25751: LD_OWVAR 2
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: PUSH
25760: LD_INT 25
25762: PUSH
25763: LD_INT 1
25765: PUSH
25766: EMPTY
25767: LIST
25768: LIST
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PPUSH
25774: CALL_OW 69
25778: ST_TO_ADDR
// if not tmp then
25779: LD_VAR 0 3
25783: NOT
25784: IFFALSE 25788
// exit ;
25786: GO 25874
// un := tmp [ rand ( 1 , tmp ) ] ;
25788: LD_ADDR_VAR 0 2
25792: PUSH
25793: LD_VAR 0 3
25797: PUSH
25798: LD_INT 1
25800: PPUSH
25801: LD_VAR 0 3
25805: PPUSH
25806: CALL_OW 12
25810: ARRAY
25811: ST_TO_ADDR
// if Crawls ( un ) then
25812: LD_VAR 0 2
25816: PPUSH
25817: CALL_OW 318
25821: IFFALSE 25832
// ComWalk ( un ) ;
25823: LD_VAR 0 2
25827: PPUSH
25828: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
25832: LD_VAR 0 2
25836: PPUSH
25837: LD_INT 9
25839: PPUSH
25840: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
25844: LD_INT 28
25846: PPUSH
25847: LD_OWVAR 2
25851: PPUSH
25852: LD_INT 2
25854: PPUSH
25855: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
25859: LD_INT 29
25861: PPUSH
25862: LD_OWVAR 2
25866: PPUSH
25867: LD_INT 2
25869: PPUSH
25870: CALL_OW 322
// end ;
25874: PPOPN 3
25876: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
25877: LD_EXP 40
25881: PUSH
25882: LD_EXP 83
25886: AND
25887: IFFALSE 25998
25889: GO 25891
25891: DISABLE
25892: LD_INT 0
25894: PPUSH
25895: PPUSH
25896: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25897: LD_ADDR_VAR 0 3
25901: PUSH
25902: LD_INT 22
25904: PUSH
25905: LD_OWVAR 2
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: PUSH
25914: LD_INT 25
25916: PUSH
25917: LD_INT 1
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PPUSH
25928: CALL_OW 69
25932: ST_TO_ADDR
// if not tmp then
25933: LD_VAR 0 3
25937: NOT
25938: IFFALSE 25942
// exit ;
25940: GO 25998
// un := tmp [ rand ( 1 , tmp ) ] ;
25942: LD_ADDR_VAR 0 2
25946: PUSH
25947: LD_VAR 0 3
25951: PUSH
25952: LD_INT 1
25954: PPUSH
25955: LD_VAR 0 3
25959: PPUSH
25960: CALL_OW 12
25964: ARRAY
25965: ST_TO_ADDR
// if Crawls ( un ) then
25966: LD_VAR 0 2
25970: PPUSH
25971: CALL_OW 318
25975: IFFALSE 25986
// ComWalk ( un ) ;
25977: LD_VAR 0 2
25981: PPUSH
25982: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25986: LD_VAR 0 2
25990: PPUSH
25991: LD_INT 8
25993: PPUSH
25994: CALL_OW 336
// end ;
25998: PPOPN 3
26000: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
26001: LD_EXP 40
26005: PUSH
26006: LD_EXP 84
26010: AND
26011: IFFALSE 26155
26013: GO 26015
26015: DISABLE
26016: LD_INT 0
26018: PPUSH
26019: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
26020: LD_ADDR_VAR 0 2
26024: PUSH
26025: LD_INT 22
26027: PUSH
26028: LD_OWVAR 2
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: PUSH
26037: LD_INT 21
26039: PUSH
26040: LD_INT 2
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 2
26049: PUSH
26050: LD_INT 34
26052: PUSH
26053: LD_INT 12
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: PUSH
26060: LD_INT 34
26062: PUSH
26063: LD_INT 51
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: PUSH
26070: LD_INT 34
26072: PUSH
26073: LD_INT 32
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: LIST
26090: PPUSH
26091: CALL_OW 69
26095: ST_TO_ADDR
// if not tmp then
26096: LD_VAR 0 2
26100: NOT
26101: IFFALSE 26105
// exit ;
26103: GO 26155
// for i in tmp do
26105: LD_ADDR_VAR 0 1
26109: PUSH
26110: LD_VAR 0 2
26114: PUSH
26115: FOR_IN
26116: IFFALSE 26153
// if GetCargo ( i , mat_artifact ) = 0 then
26118: LD_VAR 0 1
26122: PPUSH
26123: LD_INT 4
26125: PPUSH
26126: CALL_OW 289
26130: PUSH
26131: LD_INT 0
26133: EQUAL
26134: IFFALSE 26151
// SetCargo ( i , mat_siberit , 100 ) ;
26136: LD_VAR 0 1
26140: PPUSH
26141: LD_INT 3
26143: PPUSH
26144: LD_INT 100
26146: PPUSH
26147: CALL_OW 290
26151: GO 26115
26153: POP
26154: POP
// end ;
26155: PPOPN 2
26157: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
26158: LD_EXP 40
26162: PUSH
26163: LD_EXP 85
26167: AND
26168: IFFALSE 26351
26170: GO 26172
26172: DISABLE
26173: LD_INT 0
26175: PPUSH
26176: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26177: LD_ADDR_VAR 0 2
26181: PUSH
26182: LD_INT 22
26184: PUSH
26185: LD_OWVAR 2
26189: PUSH
26190: EMPTY
26191: LIST
26192: LIST
26193: PPUSH
26194: CALL_OW 69
26198: ST_TO_ADDR
// if not tmp then
26199: LD_VAR 0 2
26203: NOT
26204: IFFALSE 26208
// exit ;
26206: GO 26351
// for i := 1 to 2 do
26208: LD_ADDR_VAR 0 1
26212: PUSH
26213: DOUBLE
26214: LD_INT 1
26216: DEC
26217: ST_TO_ADDR
26218: LD_INT 2
26220: PUSH
26221: FOR_TO
26222: IFFALSE 26349
// begin uc_side := your_side ;
26224: LD_ADDR_OWVAR 20
26228: PUSH
26229: LD_OWVAR 2
26233: ST_TO_ADDR
// uc_nation := nation_american ;
26234: LD_ADDR_OWVAR 21
26238: PUSH
26239: LD_INT 1
26241: ST_TO_ADDR
// vc_chassis := us_morphling ;
26242: LD_ADDR_OWVAR 37
26246: PUSH
26247: LD_INT 5
26249: ST_TO_ADDR
// vc_engine := engine_siberite ;
26250: LD_ADDR_OWVAR 39
26254: PUSH
26255: LD_INT 3
26257: ST_TO_ADDR
// vc_control := control_computer ;
26258: LD_ADDR_OWVAR 38
26262: PUSH
26263: LD_INT 3
26265: ST_TO_ADDR
// vc_weapon := us_double_laser ;
26266: LD_ADDR_OWVAR 40
26270: PUSH
26271: LD_INT 10
26273: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
26274: LD_VAR 0 2
26278: PUSH
26279: LD_INT 1
26281: ARRAY
26282: PPUSH
26283: CALL_OW 310
26287: NOT
26288: IFFALSE 26335
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
26290: CALL_OW 45
26294: PPUSH
26295: LD_VAR 0 2
26299: PUSH
26300: LD_INT 1
26302: ARRAY
26303: PPUSH
26304: CALL_OW 250
26308: PPUSH
26309: LD_VAR 0 2
26313: PUSH
26314: LD_INT 1
26316: ARRAY
26317: PPUSH
26318: CALL_OW 251
26322: PPUSH
26323: LD_INT 12
26325: PPUSH
26326: LD_INT 1
26328: PPUSH
26329: CALL_OW 50
26333: GO 26347
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
26335: CALL_OW 45
26339: PPUSH
26340: LD_INT 1
26342: PPUSH
26343: CALL_OW 51
// end ;
26347: GO 26221
26349: POP
26350: POP
// end ;
26351: PPOPN 2
26353: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
26354: LD_EXP 40
26358: PUSH
26359: LD_EXP 86
26363: AND
26364: IFFALSE 26586
26366: GO 26368
26368: DISABLE
26369: LD_INT 0
26371: PPUSH
26372: PPUSH
26373: PPUSH
26374: PPUSH
26375: PPUSH
26376: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26377: LD_ADDR_VAR 0 6
26381: PUSH
26382: LD_INT 22
26384: PUSH
26385: LD_OWVAR 2
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 21
26396: PUSH
26397: LD_INT 1
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: LD_INT 3
26406: PUSH
26407: LD_INT 23
26409: PUSH
26410: LD_INT 0
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PUSH
26417: EMPTY
26418: LIST
26419: LIST
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: LIST
26425: PPUSH
26426: CALL_OW 69
26430: ST_TO_ADDR
// if not tmp then
26431: LD_VAR 0 6
26435: NOT
26436: IFFALSE 26440
// exit ;
26438: GO 26586
// s1 := rand ( 1 , 4 ) ;
26440: LD_ADDR_VAR 0 2
26444: PUSH
26445: LD_INT 1
26447: PPUSH
26448: LD_INT 4
26450: PPUSH
26451: CALL_OW 12
26455: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
26456: LD_ADDR_VAR 0 4
26460: PUSH
26461: LD_VAR 0 6
26465: PUSH
26466: LD_INT 1
26468: ARRAY
26469: PPUSH
26470: LD_VAR 0 2
26474: PPUSH
26475: CALL_OW 259
26479: ST_TO_ADDR
// if s1 = 1 then
26480: LD_VAR 0 2
26484: PUSH
26485: LD_INT 1
26487: EQUAL
26488: IFFALSE 26508
// s2 := rand ( 2 , 4 ) else
26490: LD_ADDR_VAR 0 3
26494: PUSH
26495: LD_INT 2
26497: PPUSH
26498: LD_INT 4
26500: PPUSH
26501: CALL_OW 12
26505: ST_TO_ADDR
26506: GO 26516
// s2 := 1 ;
26508: LD_ADDR_VAR 0 3
26512: PUSH
26513: LD_INT 1
26515: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
26516: LD_ADDR_VAR 0 5
26520: PUSH
26521: LD_VAR 0 6
26525: PUSH
26526: LD_INT 1
26528: ARRAY
26529: PPUSH
26530: LD_VAR 0 3
26534: PPUSH
26535: CALL_OW 259
26539: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
26540: LD_VAR 0 6
26544: PUSH
26545: LD_INT 1
26547: ARRAY
26548: PPUSH
26549: LD_VAR 0 2
26553: PPUSH
26554: LD_VAR 0 5
26558: PPUSH
26559: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
26563: LD_VAR 0 6
26567: PUSH
26568: LD_INT 1
26570: ARRAY
26571: PPUSH
26572: LD_VAR 0 3
26576: PPUSH
26577: LD_VAR 0 4
26581: PPUSH
26582: CALL_OW 237
// end ;
26586: PPOPN 6
26588: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
26589: LD_EXP 40
26593: PUSH
26594: LD_EXP 87
26598: AND
26599: IFFALSE 26678
26601: GO 26603
26603: DISABLE
26604: LD_INT 0
26606: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
26607: LD_ADDR_VAR 0 1
26611: PUSH
26612: LD_INT 22
26614: PUSH
26615: LD_OWVAR 2
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PUSH
26624: LD_INT 30
26626: PUSH
26627: LD_INT 3
26629: PUSH
26630: EMPTY
26631: LIST
26632: LIST
26633: PUSH
26634: EMPTY
26635: LIST
26636: LIST
26637: PPUSH
26638: CALL_OW 69
26642: ST_TO_ADDR
// if not tmp then
26643: LD_VAR 0 1
26647: NOT
26648: IFFALSE 26652
// exit ;
26650: GO 26678
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26652: LD_VAR 0 1
26656: PUSH
26657: LD_INT 1
26659: PPUSH
26660: LD_VAR 0 1
26664: PPUSH
26665: CALL_OW 12
26669: ARRAY
26670: PPUSH
26671: LD_INT 1
26673: PPUSH
26674: CALL_OW 234
// end ;
26678: PPOPN 1
26680: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
26681: LD_EXP 40
26685: PUSH
26686: LD_EXP 88
26690: AND
26691: IFFALSE 26803
26693: GO 26695
26695: DISABLE
26696: LD_INT 0
26698: PPUSH
26699: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
26700: LD_ADDR_VAR 0 2
26704: PUSH
26705: LD_INT 22
26707: PUSH
26708: LD_OWVAR 2
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: PUSH
26717: LD_INT 2
26719: PUSH
26720: LD_INT 30
26722: PUSH
26723: LD_INT 27
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: PUSH
26730: LD_INT 30
26732: PUSH
26733: LD_INT 26
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: PUSH
26740: LD_INT 30
26742: PUSH
26743: LD_INT 28
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: LIST
26754: LIST
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: PPUSH
26760: CALL_OW 69
26764: ST_TO_ADDR
// if not tmp then
26765: LD_VAR 0 2
26769: NOT
26770: IFFALSE 26774
// exit ;
26772: GO 26803
// for i in tmp do
26774: LD_ADDR_VAR 0 1
26778: PUSH
26779: LD_VAR 0 2
26783: PUSH
26784: FOR_IN
26785: IFFALSE 26801
// SetLives ( i , 1 ) ;
26787: LD_VAR 0 1
26791: PPUSH
26792: LD_INT 1
26794: PPUSH
26795: CALL_OW 234
26799: GO 26784
26801: POP
26802: POP
// end ;
26803: PPOPN 2
26805: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
26806: LD_EXP 40
26810: PUSH
26811: LD_EXP 89
26815: AND
26816: IFFALSE 27103
26818: GO 26820
26820: DISABLE
26821: LD_INT 0
26823: PPUSH
26824: PPUSH
26825: PPUSH
// begin i := rand ( 1 , 7 ) ;
26826: LD_ADDR_VAR 0 1
26830: PUSH
26831: LD_INT 1
26833: PPUSH
26834: LD_INT 7
26836: PPUSH
26837: CALL_OW 12
26841: ST_TO_ADDR
// case i of 1 :
26842: LD_VAR 0 1
26846: PUSH
26847: LD_INT 1
26849: DOUBLE
26850: EQUAL
26851: IFTRUE 26855
26853: GO 26865
26855: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
26856: LD_STRING earthquake(getX(game), 0, 32)
26858: PPUSH
26859: CALL_OW 559
26863: GO 27103
26865: LD_INT 2
26867: DOUBLE
26868: EQUAL
26869: IFTRUE 26873
26871: GO 26887
26873: POP
// begin ToLua ( displayStucuk(); ) ;
26874: LD_STRING displayStucuk();
26876: PPUSH
26877: CALL_OW 559
// ResetFog ;
26881: CALL_OW 335
// end ; 3 :
26885: GO 27103
26887: LD_INT 3
26889: DOUBLE
26890: EQUAL
26891: IFTRUE 26895
26893: GO 26999
26895: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26896: LD_ADDR_VAR 0 2
26900: PUSH
26901: LD_INT 22
26903: PUSH
26904: LD_OWVAR 2
26908: PUSH
26909: EMPTY
26910: LIST
26911: LIST
26912: PUSH
26913: LD_INT 25
26915: PUSH
26916: LD_INT 1
26918: PUSH
26919: EMPTY
26920: LIST
26921: LIST
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: PPUSH
26927: CALL_OW 69
26931: ST_TO_ADDR
// if not tmp then
26932: LD_VAR 0 2
26936: NOT
26937: IFFALSE 26941
// exit ;
26939: GO 27103
// un := tmp [ rand ( 1 , tmp ) ] ;
26941: LD_ADDR_VAR 0 3
26945: PUSH
26946: LD_VAR 0 2
26950: PUSH
26951: LD_INT 1
26953: PPUSH
26954: LD_VAR 0 2
26958: PPUSH
26959: CALL_OW 12
26963: ARRAY
26964: ST_TO_ADDR
// if Crawls ( un ) then
26965: LD_VAR 0 3
26969: PPUSH
26970: CALL_OW 318
26974: IFFALSE 26985
// ComWalk ( un ) ;
26976: LD_VAR 0 3
26980: PPUSH
26981: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26985: LD_VAR 0 3
26989: PPUSH
26990: LD_INT 8
26992: PPUSH
26993: CALL_OW 336
// end ; 4 :
26997: GO 27103
26999: LD_INT 4
27001: DOUBLE
27002: EQUAL
27003: IFTRUE 27007
27005: GO 27081
27007: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27008: LD_ADDR_VAR 0 2
27012: PUSH
27013: LD_INT 22
27015: PUSH
27016: LD_OWVAR 2
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: PUSH
27025: LD_INT 30
27027: PUSH
27028: LD_INT 29
27030: PUSH
27031: EMPTY
27032: LIST
27033: LIST
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: PPUSH
27039: CALL_OW 69
27043: ST_TO_ADDR
// if not tmp then
27044: LD_VAR 0 2
27048: NOT
27049: IFFALSE 27053
// exit ;
27051: GO 27103
// CenterNowOnUnits ( tmp [ 1 ] ) ;
27053: LD_VAR 0 2
27057: PUSH
27058: LD_INT 1
27060: ARRAY
27061: PPUSH
27062: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
27066: LD_VAR 0 2
27070: PUSH
27071: LD_INT 1
27073: ARRAY
27074: PPUSH
27075: CALL_OW 65
// end ; 5 .. 7 :
27079: GO 27103
27081: LD_INT 5
27083: DOUBLE
27084: GREATEREQUAL
27085: IFFALSE 27093
27087: LD_INT 7
27089: DOUBLE
27090: LESSEQUAL
27091: IFTRUE 27095
27093: GO 27102
27095: POP
// StreamSibBomb ; end ;
27096: CALL 23340 0 0
27100: GO 27103
27102: POP
// end ;
27103: PPOPN 3
27105: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
27106: LD_EXP 40
27110: PUSH
27111: LD_EXP 90
27115: AND
27116: IFFALSE 27272
27118: GO 27120
27120: DISABLE
27121: LD_INT 0
27123: PPUSH
27124: PPUSH
27125: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
27126: LD_ADDR_VAR 0 2
27130: PUSH
27131: LD_INT 81
27133: PUSH
27134: LD_OWVAR 2
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: PUSH
27143: LD_INT 2
27145: PUSH
27146: LD_INT 21
27148: PUSH
27149: LD_INT 1
27151: PUSH
27152: EMPTY
27153: LIST
27154: LIST
27155: PUSH
27156: LD_INT 21
27158: PUSH
27159: LD_INT 2
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: LIST
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: PPUSH
27175: CALL_OW 69
27179: ST_TO_ADDR
// if not tmp then
27180: LD_VAR 0 2
27184: NOT
27185: IFFALSE 27189
// exit ;
27187: GO 27272
// p := 0 ;
27189: LD_ADDR_VAR 0 3
27193: PUSH
27194: LD_INT 0
27196: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27197: LD_INT 35
27199: PPUSH
27200: CALL_OW 67
// p := p + 1 ;
27204: LD_ADDR_VAR 0 3
27208: PUSH
27209: LD_VAR 0 3
27213: PUSH
27214: LD_INT 1
27216: PLUS
27217: ST_TO_ADDR
// for i in tmp do
27218: LD_ADDR_VAR 0 1
27222: PUSH
27223: LD_VAR 0 2
27227: PUSH
27228: FOR_IN
27229: IFFALSE 27260
// if GetLives ( i ) < 1000 then
27231: LD_VAR 0 1
27235: PPUSH
27236: CALL_OW 256
27240: PUSH
27241: LD_INT 1000
27243: LESS
27244: IFFALSE 27258
// SetLives ( i , 1000 ) ;
27246: LD_VAR 0 1
27250: PPUSH
27251: LD_INT 1000
27253: PPUSH
27254: CALL_OW 234
27258: GO 27228
27260: POP
27261: POP
// until p > 20 ;
27262: LD_VAR 0 3
27266: PUSH
27267: LD_INT 20
27269: GREATER
27270: IFFALSE 27197
// end ;
27272: PPOPN 3
27274: END
// every 0 0$1 trigger StreamModeActive and sTime do
27275: LD_EXP 40
27279: PUSH
27280: LD_EXP 91
27284: AND
27285: IFFALSE 27320
27287: GO 27289
27289: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
27290: LD_INT 28
27292: PPUSH
27293: LD_OWVAR 2
27297: PPUSH
27298: LD_INT 2
27300: PPUSH
27301: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
27305: LD_INT 30
27307: PPUSH
27308: LD_OWVAR 2
27312: PPUSH
27313: LD_INT 2
27315: PPUSH
27316: CALL_OW 322
// end ;
27320: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
27321: LD_EXP 40
27325: PUSH
27326: LD_EXP 92
27330: AND
27331: IFFALSE 27452
27333: GO 27335
27335: DISABLE
27336: LD_INT 0
27338: PPUSH
27339: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27340: LD_ADDR_VAR 0 2
27344: PUSH
27345: LD_INT 22
27347: PUSH
27348: LD_OWVAR 2
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: PUSH
27357: LD_INT 21
27359: PUSH
27360: LD_INT 1
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: PUSH
27367: LD_INT 3
27369: PUSH
27370: LD_INT 23
27372: PUSH
27373: LD_INT 0
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: LIST
27388: PPUSH
27389: CALL_OW 69
27393: ST_TO_ADDR
// if not tmp then
27394: LD_VAR 0 2
27398: NOT
27399: IFFALSE 27403
// exit ;
27401: GO 27452
// for i in tmp do
27403: LD_ADDR_VAR 0 1
27407: PUSH
27408: LD_VAR 0 2
27412: PUSH
27413: FOR_IN
27414: IFFALSE 27450
// begin if Crawls ( i ) then
27416: LD_VAR 0 1
27420: PPUSH
27421: CALL_OW 318
27425: IFFALSE 27436
// ComWalk ( i ) ;
27427: LD_VAR 0 1
27431: PPUSH
27432: CALL_OW 138
// SetClass ( i , 2 ) ;
27436: LD_VAR 0 1
27440: PPUSH
27441: LD_INT 2
27443: PPUSH
27444: CALL_OW 336
// end ;
27448: GO 27413
27450: POP
27451: POP
// end ;
27452: PPOPN 2
27454: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
27455: LD_EXP 40
27459: PUSH
27460: LD_EXP 93
27464: AND
27465: IFFALSE 27753
27467: GO 27469
27469: DISABLE
27470: LD_INT 0
27472: PPUSH
27473: PPUSH
27474: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
27475: LD_OWVAR 2
27479: PPUSH
27480: LD_INT 9
27482: PPUSH
27483: LD_INT 1
27485: PPUSH
27486: LD_INT 1
27488: PPUSH
27489: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
27493: LD_INT 9
27495: PPUSH
27496: LD_OWVAR 2
27500: PPUSH
27501: CALL_OW 343
// uc_side := 9 ;
27505: LD_ADDR_OWVAR 20
27509: PUSH
27510: LD_INT 9
27512: ST_TO_ADDR
// uc_nation := 2 ;
27513: LD_ADDR_OWVAR 21
27517: PUSH
27518: LD_INT 2
27520: ST_TO_ADDR
// hc_name := Dark Warrior ;
27521: LD_ADDR_OWVAR 26
27525: PUSH
27526: LD_STRING Dark Warrior
27528: ST_TO_ADDR
// hc_gallery :=  ;
27529: LD_ADDR_OWVAR 33
27533: PUSH
27534: LD_STRING 
27536: ST_TO_ADDR
// hc_noskilllimit := true ;
27537: LD_ADDR_OWVAR 76
27541: PUSH
27542: LD_INT 1
27544: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
27545: LD_ADDR_OWVAR 31
27549: PUSH
27550: LD_INT 30
27552: PUSH
27553: LD_INT 30
27555: PUSH
27556: LD_INT 30
27558: PUSH
27559: LD_INT 30
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: LIST
27566: LIST
27567: ST_TO_ADDR
// un := CreateHuman ;
27568: LD_ADDR_VAR 0 3
27572: PUSH
27573: CALL_OW 44
27577: ST_TO_ADDR
// hc_noskilllimit := false ;
27578: LD_ADDR_OWVAR 76
27582: PUSH
27583: LD_INT 0
27585: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27586: LD_VAR 0 3
27590: PPUSH
27591: LD_INT 1
27593: PPUSH
27594: CALL_OW 51
// ToLua ( playRanger() ) ;
27598: LD_STRING playRanger()
27600: PPUSH
27601: CALL_OW 559
// p := 0 ;
27605: LD_ADDR_VAR 0 2
27609: PUSH
27610: LD_INT 0
27612: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27613: LD_INT 35
27615: PPUSH
27616: CALL_OW 67
// p := p + 1 ;
27620: LD_ADDR_VAR 0 2
27624: PUSH
27625: LD_VAR 0 2
27629: PUSH
27630: LD_INT 1
27632: PLUS
27633: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
27634: LD_VAR 0 3
27638: PPUSH
27639: CALL_OW 256
27643: PUSH
27644: LD_INT 1000
27646: LESS
27647: IFFALSE 27661
// SetLives ( un , 1000 ) ;
27649: LD_VAR 0 3
27653: PPUSH
27654: LD_INT 1000
27656: PPUSH
27657: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
27661: LD_VAR 0 3
27665: PPUSH
27666: LD_INT 81
27668: PUSH
27669: LD_OWVAR 2
27673: PUSH
27674: EMPTY
27675: LIST
27676: LIST
27677: PUSH
27678: LD_INT 91
27680: PUSH
27681: LD_VAR 0 3
27685: PUSH
27686: LD_INT 30
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: LIST
27693: PUSH
27694: EMPTY
27695: LIST
27696: LIST
27697: PPUSH
27698: CALL_OW 69
27702: PPUSH
27703: LD_VAR 0 3
27707: PPUSH
27708: CALL_OW 74
27712: PPUSH
27713: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
27717: LD_VAR 0 2
27721: PUSH
27722: LD_INT 80
27724: GREATER
27725: PUSH
27726: LD_VAR 0 3
27730: PPUSH
27731: CALL_OW 301
27735: OR
27736: IFFALSE 27613
// if un then
27738: LD_VAR 0 3
27742: IFFALSE 27753
// RemoveUnit ( un ) ;
27744: LD_VAR 0 3
27748: PPUSH
27749: CALL_OW 64
// end ;
27753: PPOPN 3
27755: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
27756: LD_EXP 94
27760: IFFALSE 27876
27762: GO 27764
27764: DISABLE
27765: LD_INT 0
27767: PPUSH
27768: PPUSH
27769: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27770: LD_ADDR_VAR 0 2
27774: PUSH
27775: LD_INT 81
27777: PUSH
27778: LD_OWVAR 2
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PUSH
27787: LD_INT 21
27789: PUSH
27790: LD_INT 1
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: PPUSH
27801: CALL_OW 69
27805: ST_TO_ADDR
// ToLua ( playComputer() ) ;
27806: LD_STRING playComputer()
27808: PPUSH
27809: CALL_OW 559
// if not tmp then
27813: LD_VAR 0 2
27817: NOT
27818: IFFALSE 27822
// exit ;
27820: GO 27876
// for i in tmp do
27822: LD_ADDR_VAR 0 1
27826: PUSH
27827: LD_VAR 0 2
27831: PUSH
27832: FOR_IN
27833: IFFALSE 27874
// for j := 1 to 4 do
27835: LD_ADDR_VAR 0 3
27839: PUSH
27840: DOUBLE
27841: LD_INT 1
27843: DEC
27844: ST_TO_ADDR
27845: LD_INT 4
27847: PUSH
27848: FOR_TO
27849: IFFALSE 27870
// SetSkill ( i , j , 10 ) ;
27851: LD_VAR 0 1
27855: PPUSH
27856: LD_VAR 0 3
27860: PPUSH
27861: LD_INT 10
27863: PPUSH
27864: CALL_OW 237
27868: GO 27848
27870: POP
27871: POP
27872: GO 27832
27874: POP
27875: POP
// end ;
27876: PPOPN 3
27878: END
// every 0 0$1 trigger s30 do var i , tmp ;
27879: LD_EXP 95
27883: IFFALSE 27952
27885: GO 27887
27887: DISABLE
27888: LD_INT 0
27890: PPUSH
27891: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27892: LD_ADDR_VAR 0 2
27896: PUSH
27897: LD_INT 22
27899: PUSH
27900: LD_OWVAR 2
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: PPUSH
27909: CALL_OW 69
27913: ST_TO_ADDR
// if not tmp then
27914: LD_VAR 0 2
27918: NOT
27919: IFFALSE 27923
// exit ;
27921: GO 27952
// for i in tmp do
27923: LD_ADDR_VAR 0 1
27927: PUSH
27928: LD_VAR 0 2
27932: PUSH
27933: FOR_IN
27934: IFFALSE 27950
// SetLives ( i , 300 ) ;
27936: LD_VAR 0 1
27940: PPUSH
27941: LD_INT 300
27943: PPUSH
27944: CALL_OW 234
27948: GO 27933
27950: POP
27951: POP
// end ;
27952: PPOPN 2
27954: END
// every 0 0$1 trigger s60 do var i , tmp ;
27955: LD_EXP 96
27959: IFFALSE 28028
27961: GO 27963
27963: DISABLE
27964: LD_INT 0
27966: PPUSH
27967: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27968: LD_ADDR_VAR 0 2
27972: PUSH
27973: LD_INT 22
27975: PUSH
27976: LD_OWVAR 2
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: PPUSH
27985: CALL_OW 69
27989: ST_TO_ADDR
// if not tmp then
27990: LD_VAR 0 2
27994: NOT
27995: IFFALSE 27999
// exit ;
27997: GO 28028
// for i in tmp do
27999: LD_ADDR_VAR 0 1
28003: PUSH
28004: LD_VAR 0 2
28008: PUSH
28009: FOR_IN
28010: IFFALSE 28026
// SetLives ( i , 600 ) ;
28012: LD_VAR 0 1
28016: PPUSH
28017: LD_INT 600
28019: PPUSH
28020: CALL_OW 234
28024: GO 28009
28026: POP
28027: POP
// end ;
28028: PPOPN 2
28030: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
28031: LD_INT 0
28033: PPUSH
// case cmd of 301 :
28034: LD_VAR 0 1
28038: PUSH
28039: LD_INT 301
28041: DOUBLE
28042: EQUAL
28043: IFTRUE 28047
28045: GO 28079
28047: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
28048: LD_VAR 0 6
28052: PPUSH
28053: LD_VAR 0 7
28057: PPUSH
28058: LD_VAR 0 8
28062: PPUSH
28063: LD_VAR 0 4
28067: PPUSH
28068: LD_VAR 0 5
28072: PPUSH
28073: CALL 29288 0 5
28077: GO 28200
28079: LD_INT 302
28081: DOUBLE
28082: EQUAL
28083: IFTRUE 28087
28085: GO 28124
28087: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
28088: LD_VAR 0 6
28092: PPUSH
28093: LD_VAR 0 7
28097: PPUSH
28098: LD_VAR 0 8
28102: PPUSH
28103: LD_VAR 0 9
28107: PPUSH
28108: LD_VAR 0 4
28112: PPUSH
28113: LD_VAR 0 5
28117: PPUSH
28118: CALL 29379 0 6
28122: GO 28200
28124: LD_INT 303
28126: DOUBLE
28127: EQUAL
28128: IFTRUE 28132
28130: GO 28169
28132: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
28133: LD_VAR 0 6
28137: PPUSH
28138: LD_VAR 0 7
28142: PPUSH
28143: LD_VAR 0 8
28147: PPUSH
28148: LD_VAR 0 9
28152: PPUSH
28153: LD_VAR 0 4
28157: PPUSH
28158: LD_VAR 0 5
28162: PPUSH
28163: CALL 28205 0 6
28167: GO 28200
28169: LD_INT 304
28171: DOUBLE
28172: EQUAL
28173: IFTRUE 28177
28175: GO 28199
28177: POP
// hHackTeleport ( unit , x , y ) ; end ;
28178: LD_VAR 0 2
28182: PPUSH
28183: LD_VAR 0 4
28187: PPUSH
28188: LD_VAR 0 5
28192: PPUSH
28193: CALL 29972 0 3
28197: GO 28200
28199: POP
// end ;
28200: LD_VAR 0 12
28204: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
28205: LD_INT 0
28207: PPUSH
28208: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
28209: LD_VAR 0 1
28213: PUSH
28214: LD_INT 1
28216: LESS
28217: PUSH
28218: LD_VAR 0 1
28222: PUSH
28223: LD_INT 3
28225: GREATER
28226: OR
28227: PUSH
28228: LD_VAR 0 5
28232: PPUSH
28233: LD_VAR 0 6
28237: PPUSH
28238: CALL_OW 428
28242: OR
28243: IFFALSE 28247
// exit ;
28245: GO 28975
// uc_side := your_side ;
28247: LD_ADDR_OWVAR 20
28251: PUSH
28252: LD_OWVAR 2
28256: ST_TO_ADDR
// uc_nation := nation ;
28257: LD_ADDR_OWVAR 21
28261: PUSH
28262: LD_VAR 0 1
28266: ST_TO_ADDR
// bc_level = 1 ;
28267: LD_ADDR_OWVAR 43
28271: PUSH
28272: LD_INT 1
28274: ST_TO_ADDR
// case btype of 1 :
28275: LD_VAR 0 2
28279: PUSH
28280: LD_INT 1
28282: DOUBLE
28283: EQUAL
28284: IFTRUE 28288
28286: GO 28299
28288: POP
// bc_type := b_depot ; 2 :
28289: LD_ADDR_OWVAR 42
28293: PUSH
28294: LD_INT 0
28296: ST_TO_ADDR
28297: GO 28919
28299: LD_INT 2
28301: DOUBLE
28302: EQUAL
28303: IFTRUE 28307
28305: GO 28318
28307: POP
// bc_type := b_warehouse ; 3 :
28308: LD_ADDR_OWVAR 42
28312: PUSH
28313: LD_INT 1
28315: ST_TO_ADDR
28316: GO 28919
28318: LD_INT 3
28320: DOUBLE
28321: EQUAL
28322: IFTRUE 28326
28324: GO 28337
28326: POP
// bc_type := b_lab ; 4 .. 9 :
28327: LD_ADDR_OWVAR 42
28331: PUSH
28332: LD_INT 6
28334: ST_TO_ADDR
28335: GO 28919
28337: LD_INT 4
28339: DOUBLE
28340: GREATEREQUAL
28341: IFFALSE 28349
28343: LD_INT 9
28345: DOUBLE
28346: LESSEQUAL
28347: IFTRUE 28351
28349: GO 28411
28351: POP
// begin bc_type := b_lab_half ;
28352: LD_ADDR_OWVAR 42
28356: PUSH
28357: LD_INT 7
28359: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
28360: LD_ADDR_OWVAR 44
28364: PUSH
28365: LD_INT 10
28367: PUSH
28368: LD_INT 11
28370: PUSH
28371: LD_INT 12
28373: PUSH
28374: LD_INT 15
28376: PUSH
28377: LD_INT 14
28379: PUSH
28380: LD_INT 13
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: LIST
28390: PUSH
28391: LD_VAR 0 2
28395: PUSH
28396: LD_INT 3
28398: MINUS
28399: ARRAY
28400: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
28401: LD_ADDR_OWVAR 45
28405: PUSH
28406: LD_INT 9
28408: ST_TO_ADDR
// end ; 10 .. 13 :
28409: GO 28919
28411: LD_INT 10
28413: DOUBLE
28414: GREATEREQUAL
28415: IFFALSE 28423
28417: LD_INT 13
28419: DOUBLE
28420: LESSEQUAL
28421: IFTRUE 28425
28423: GO 28502
28425: POP
// begin bc_type := b_lab_full ;
28426: LD_ADDR_OWVAR 42
28430: PUSH
28431: LD_INT 8
28433: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
28434: LD_ADDR_OWVAR 44
28438: PUSH
28439: LD_INT 10
28441: PUSH
28442: LD_INT 12
28444: PUSH
28445: LD_INT 14
28447: PUSH
28448: LD_INT 13
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: LIST
28455: LIST
28456: PUSH
28457: LD_VAR 0 2
28461: PUSH
28462: LD_INT 9
28464: MINUS
28465: ARRAY
28466: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
28467: LD_ADDR_OWVAR 45
28471: PUSH
28472: LD_INT 11
28474: PUSH
28475: LD_INT 15
28477: PUSH
28478: LD_INT 12
28480: PUSH
28481: LD_INT 15
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: LIST
28488: LIST
28489: PUSH
28490: LD_VAR 0 2
28494: PUSH
28495: LD_INT 9
28497: MINUS
28498: ARRAY
28499: ST_TO_ADDR
// end ; 14 :
28500: GO 28919
28502: LD_INT 14
28504: DOUBLE
28505: EQUAL
28506: IFTRUE 28510
28508: GO 28521
28510: POP
// bc_type := b_workshop ; 15 :
28511: LD_ADDR_OWVAR 42
28515: PUSH
28516: LD_INT 2
28518: ST_TO_ADDR
28519: GO 28919
28521: LD_INT 15
28523: DOUBLE
28524: EQUAL
28525: IFTRUE 28529
28527: GO 28540
28529: POP
// bc_type := b_factory ; 16 :
28530: LD_ADDR_OWVAR 42
28534: PUSH
28535: LD_INT 3
28537: ST_TO_ADDR
28538: GO 28919
28540: LD_INT 16
28542: DOUBLE
28543: EQUAL
28544: IFTRUE 28548
28546: GO 28559
28548: POP
// bc_type := b_ext_gun ; 17 :
28549: LD_ADDR_OWVAR 42
28553: PUSH
28554: LD_INT 17
28556: ST_TO_ADDR
28557: GO 28919
28559: LD_INT 17
28561: DOUBLE
28562: EQUAL
28563: IFTRUE 28567
28565: GO 28595
28567: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
28568: LD_ADDR_OWVAR 42
28572: PUSH
28573: LD_INT 19
28575: PUSH
28576: LD_INT 23
28578: PUSH
28579: LD_INT 19
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: LIST
28586: PUSH
28587: LD_VAR 0 1
28591: ARRAY
28592: ST_TO_ADDR
28593: GO 28919
28595: LD_INT 18
28597: DOUBLE
28598: EQUAL
28599: IFTRUE 28603
28601: GO 28614
28603: POP
// bc_type := b_ext_radar ; 19 :
28604: LD_ADDR_OWVAR 42
28608: PUSH
28609: LD_INT 20
28611: ST_TO_ADDR
28612: GO 28919
28614: LD_INT 19
28616: DOUBLE
28617: EQUAL
28618: IFTRUE 28622
28620: GO 28633
28622: POP
// bc_type := b_ext_radio ; 20 :
28623: LD_ADDR_OWVAR 42
28627: PUSH
28628: LD_INT 22
28630: ST_TO_ADDR
28631: GO 28919
28633: LD_INT 20
28635: DOUBLE
28636: EQUAL
28637: IFTRUE 28641
28639: GO 28652
28641: POP
// bc_type := b_ext_siberium ; 21 :
28642: LD_ADDR_OWVAR 42
28646: PUSH
28647: LD_INT 21
28649: ST_TO_ADDR
28650: GO 28919
28652: LD_INT 21
28654: DOUBLE
28655: EQUAL
28656: IFTRUE 28660
28658: GO 28671
28660: POP
// bc_type := b_ext_computer ; 22 :
28661: LD_ADDR_OWVAR 42
28665: PUSH
28666: LD_INT 24
28668: ST_TO_ADDR
28669: GO 28919
28671: LD_INT 22
28673: DOUBLE
28674: EQUAL
28675: IFTRUE 28679
28677: GO 28690
28679: POP
// bc_type := b_ext_track ; 23 :
28680: LD_ADDR_OWVAR 42
28684: PUSH
28685: LD_INT 16
28687: ST_TO_ADDR
28688: GO 28919
28690: LD_INT 23
28692: DOUBLE
28693: EQUAL
28694: IFTRUE 28698
28696: GO 28709
28698: POP
// bc_type := b_ext_laser ; 24 :
28699: LD_ADDR_OWVAR 42
28703: PUSH
28704: LD_INT 25
28706: ST_TO_ADDR
28707: GO 28919
28709: LD_INT 24
28711: DOUBLE
28712: EQUAL
28713: IFTRUE 28717
28715: GO 28728
28717: POP
// bc_type := b_control_tower ; 25 :
28718: LD_ADDR_OWVAR 42
28722: PUSH
28723: LD_INT 36
28725: ST_TO_ADDR
28726: GO 28919
28728: LD_INT 25
28730: DOUBLE
28731: EQUAL
28732: IFTRUE 28736
28734: GO 28747
28736: POP
// bc_type := b_breastwork ; 26 :
28737: LD_ADDR_OWVAR 42
28741: PUSH
28742: LD_INT 31
28744: ST_TO_ADDR
28745: GO 28919
28747: LD_INT 26
28749: DOUBLE
28750: EQUAL
28751: IFTRUE 28755
28753: GO 28766
28755: POP
// bc_type := b_bunker ; 27 :
28756: LD_ADDR_OWVAR 42
28760: PUSH
28761: LD_INT 32
28763: ST_TO_ADDR
28764: GO 28919
28766: LD_INT 27
28768: DOUBLE
28769: EQUAL
28770: IFTRUE 28774
28772: GO 28785
28774: POP
// bc_type := b_turret ; 28 :
28775: LD_ADDR_OWVAR 42
28779: PUSH
28780: LD_INT 33
28782: ST_TO_ADDR
28783: GO 28919
28785: LD_INT 28
28787: DOUBLE
28788: EQUAL
28789: IFTRUE 28793
28791: GO 28804
28793: POP
// bc_type := b_armoury ; 29 :
28794: LD_ADDR_OWVAR 42
28798: PUSH
28799: LD_INT 4
28801: ST_TO_ADDR
28802: GO 28919
28804: LD_INT 29
28806: DOUBLE
28807: EQUAL
28808: IFTRUE 28812
28810: GO 28823
28812: POP
// bc_type := b_barracks ; 30 :
28813: LD_ADDR_OWVAR 42
28817: PUSH
28818: LD_INT 5
28820: ST_TO_ADDR
28821: GO 28919
28823: LD_INT 30
28825: DOUBLE
28826: EQUAL
28827: IFTRUE 28831
28829: GO 28842
28831: POP
// bc_type := b_solar_power ; 31 :
28832: LD_ADDR_OWVAR 42
28836: PUSH
28837: LD_INT 27
28839: ST_TO_ADDR
28840: GO 28919
28842: LD_INT 31
28844: DOUBLE
28845: EQUAL
28846: IFTRUE 28850
28848: GO 28861
28850: POP
// bc_type := b_oil_power ; 32 :
28851: LD_ADDR_OWVAR 42
28855: PUSH
28856: LD_INT 26
28858: ST_TO_ADDR
28859: GO 28919
28861: LD_INT 32
28863: DOUBLE
28864: EQUAL
28865: IFTRUE 28869
28867: GO 28880
28869: POP
// bc_type := b_siberite_power ; 33 :
28870: LD_ADDR_OWVAR 42
28874: PUSH
28875: LD_INT 28
28877: ST_TO_ADDR
28878: GO 28919
28880: LD_INT 33
28882: DOUBLE
28883: EQUAL
28884: IFTRUE 28888
28886: GO 28899
28888: POP
// bc_type := b_oil_mine ; 34 :
28889: LD_ADDR_OWVAR 42
28893: PUSH
28894: LD_INT 29
28896: ST_TO_ADDR
28897: GO 28919
28899: LD_INT 34
28901: DOUBLE
28902: EQUAL
28903: IFTRUE 28907
28905: GO 28918
28907: POP
// bc_type := b_siberite_mine ; end ;
28908: LD_ADDR_OWVAR 42
28912: PUSH
28913: LD_INT 30
28915: ST_TO_ADDR
28916: GO 28919
28918: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
28919: LD_ADDR_VAR 0 8
28923: PUSH
28924: LD_VAR 0 5
28928: PPUSH
28929: LD_VAR 0 6
28933: PPUSH
28934: LD_VAR 0 3
28938: PPUSH
28939: CALL_OW 47
28943: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
28944: LD_OWVAR 42
28948: PUSH
28949: LD_INT 32
28951: PUSH
28952: LD_INT 33
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: IN
28959: IFFALSE 28975
// PlaceWeaponTurret ( b , weapon ) ;
28961: LD_VAR 0 8
28965: PPUSH
28966: LD_VAR 0 4
28970: PPUSH
28971: CALL_OW 431
// end ;
28975: LD_VAR 0 7
28979: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
28980: LD_INT 0
28982: PPUSH
28983: PPUSH
28984: PPUSH
28985: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28986: LD_ADDR_VAR 0 4
28990: PUSH
28991: LD_INT 22
28993: PUSH
28994: LD_OWVAR 2
28998: PUSH
28999: EMPTY
29000: LIST
29001: LIST
29002: PUSH
29003: LD_INT 2
29005: PUSH
29006: LD_INT 30
29008: PUSH
29009: LD_INT 0
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: PUSH
29016: LD_INT 30
29018: PUSH
29019: LD_INT 1
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: PUSH
29026: EMPTY
29027: LIST
29028: LIST
29029: LIST
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: PPUSH
29035: CALL_OW 69
29039: ST_TO_ADDR
// if not tmp then
29040: LD_VAR 0 4
29044: NOT
29045: IFFALSE 29049
// exit ;
29047: GO 29108
// for i in tmp do
29049: LD_ADDR_VAR 0 2
29053: PUSH
29054: LD_VAR 0 4
29058: PUSH
29059: FOR_IN
29060: IFFALSE 29106
// for j = 1 to 3 do
29062: LD_ADDR_VAR 0 3
29066: PUSH
29067: DOUBLE
29068: LD_INT 1
29070: DEC
29071: ST_TO_ADDR
29072: LD_INT 3
29074: PUSH
29075: FOR_TO
29076: IFFALSE 29102
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
29078: LD_VAR 0 2
29082: PPUSH
29083: CALL_OW 274
29087: PPUSH
29088: LD_VAR 0 3
29092: PPUSH
29093: LD_INT 99999
29095: PPUSH
29096: CALL_OW 277
29100: GO 29075
29102: POP
29103: POP
29104: GO 29059
29106: POP
29107: POP
// end ;
29108: LD_VAR 0 1
29112: RET
// export function hHackSetLevel10 ; var i , j ; begin
29113: LD_INT 0
29115: PPUSH
29116: PPUSH
29117: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29118: LD_ADDR_VAR 0 2
29122: PUSH
29123: LD_INT 21
29125: PUSH
29126: LD_INT 1
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: PPUSH
29133: CALL_OW 69
29137: PUSH
29138: FOR_IN
29139: IFFALSE 29191
// if IsSelected ( i ) then
29141: LD_VAR 0 2
29145: PPUSH
29146: CALL_OW 306
29150: IFFALSE 29189
// begin for j := 1 to 4 do
29152: LD_ADDR_VAR 0 3
29156: PUSH
29157: DOUBLE
29158: LD_INT 1
29160: DEC
29161: ST_TO_ADDR
29162: LD_INT 4
29164: PUSH
29165: FOR_TO
29166: IFFALSE 29187
// SetSkill ( i , j , 10 ) ;
29168: LD_VAR 0 2
29172: PPUSH
29173: LD_VAR 0 3
29177: PPUSH
29178: LD_INT 10
29180: PPUSH
29181: CALL_OW 237
29185: GO 29165
29187: POP
29188: POP
// end ;
29189: GO 29138
29191: POP
29192: POP
// end ;
29193: LD_VAR 0 1
29197: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
29198: LD_INT 0
29200: PPUSH
29201: PPUSH
29202: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
29203: LD_ADDR_VAR 0 2
29207: PUSH
29208: LD_INT 22
29210: PUSH
29211: LD_OWVAR 2
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: PUSH
29220: LD_INT 21
29222: PUSH
29223: LD_INT 1
29225: PUSH
29226: EMPTY
29227: LIST
29228: LIST
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: PPUSH
29234: CALL_OW 69
29238: PUSH
29239: FOR_IN
29240: IFFALSE 29281
// begin for j := 1 to 4 do
29242: LD_ADDR_VAR 0 3
29246: PUSH
29247: DOUBLE
29248: LD_INT 1
29250: DEC
29251: ST_TO_ADDR
29252: LD_INT 4
29254: PUSH
29255: FOR_TO
29256: IFFALSE 29277
// SetSkill ( i , j , 10 ) ;
29258: LD_VAR 0 2
29262: PPUSH
29263: LD_VAR 0 3
29267: PPUSH
29268: LD_INT 10
29270: PPUSH
29271: CALL_OW 237
29275: GO 29255
29277: POP
29278: POP
// end ;
29279: GO 29239
29281: POP
29282: POP
// end ;
29283: LD_VAR 0 1
29287: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
29288: LD_INT 0
29290: PPUSH
// uc_side := your_side ;
29291: LD_ADDR_OWVAR 20
29295: PUSH
29296: LD_OWVAR 2
29300: ST_TO_ADDR
// uc_nation := nation ;
29301: LD_ADDR_OWVAR 21
29305: PUSH
29306: LD_VAR 0 1
29310: ST_TO_ADDR
// InitHc ;
29311: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
29315: LD_INT 0
29317: PPUSH
29318: LD_VAR 0 2
29322: PPUSH
29323: LD_VAR 0 3
29327: PPUSH
29328: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
29332: LD_VAR 0 4
29336: PPUSH
29337: LD_VAR 0 5
29341: PPUSH
29342: CALL_OW 428
29346: PUSH
29347: LD_INT 0
29349: EQUAL
29350: IFFALSE 29374
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
29352: CALL_OW 44
29356: PPUSH
29357: LD_VAR 0 4
29361: PPUSH
29362: LD_VAR 0 5
29366: PPUSH
29367: LD_INT 1
29369: PPUSH
29370: CALL_OW 48
// end ;
29374: LD_VAR 0 6
29378: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
29379: LD_INT 0
29381: PPUSH
29382: PPUSH
// uc_side := your_side ;
29383: LD_ADDR_OWVAR 20
29387: PUSH
29388: LD_OWVAR 2
29392: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
29393: LD_VAR 0 1
29397: PUSH
29398: LD_INT 1
29400: PUSH
29401: LD_INT 2
29403: PUSH
29404: LD_INT 3
29406: PUSH
29407: LD_INT 4
29409: PUSH
29410: LD_INT 5
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: LIST
29417: LIST
29418: LIST
29419: IN
29420: IFFALSE 29432
// uc_nation := nation_american else
29422: LD_ADDR_OWVAR 21
29426: PUSH
29427: LD_INT 1
29429: ST_TO_ADDR
29430: GO 29475
// if chassis in [ 11 , 12 , 13 , 14 ] then
29432: LD_VAR 0 1
29436: PUSH
29437: LD_INT 11
29439: PUSH
29440: LD_INT 12
29442: PUSH
29443: LD_INT 13
29445: PUSH
29446: LD_INT 14
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: LIST
29453: LIST
29454: IN
29455: IFFALSE 29467
// uc_nation := nation_arabian else
29457: LD_ADDR_OWVAR 21
29461: PUSH
29462: LD_INT 2
29464: ST_TO_ADDR
29465: GO 29475
// uc_nation := nation_russian ;
29467: LD_ADDR_OWVAR 21
29471: PUSH
29472: LD_INT 3
29474: ST_TO_ADDR
// vc_chassis := chassis ;
29475: LD_ADDR_OWVAR 37
29479: PUSH
29480: LD_VAR 0 1
29484: ST_TO_ADDR
// vc_engine := engine ;
29485: LD_ADDR_OWVAR 39
29489: PUSH
29490: LD_VAR 0 2
29494: ST_TO_ADDR
// vc_control := control ;
29495: LD_ADDR_OWVAR 38
29499: PUSH
29500: LD_VAR 0 3
29504: ST_TO_ADDR
// vc_weapon := weapon ;
29505: LD_ADDR_OWVAR 40
29509: PUSH
29510: LD_VAR 0 4
29514: ST_TO_ADDR
// un := CreateVehicle ;
29515: LD_ADDR_VAR 0 8
29519: PUSH
29520: CALL_OW 45
29524: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
29525: LD_VAR 0 8
29529: PPUSH
29530: LD_INT 0
29532: PPUSH
29533: LD_INT 5
29535: PPUSH
29536: CALL_OW 12
29540: PPUSH
29541: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
29545: LD_VAR 0 8
29549: PPUSH
29550: LD_VAR 0 5
29554: PPUSH
29555: LD_VAR 0 6
29559: PPUSH
29560: LD_INT 1
29562: PPUSH
29563: CALL_OW 48
// end ;
29567: LD_VAR 0 7
29571: RET
// export hInvincible ; every 1 do
29572: GO 29574
29574: DISABLE
// hInvincible := [ ] ;
29575: LD_ADDR_EXP 97
29579: PUSH
29580: EMPTY
29581: ST_TO_ADDR
29582: END
// every 10 do var i ;
29583: GO 29585
29585: DISABLE
29586: LD_INT 0
29588: PPUSH
// begin enable ;
29589: ENABLE
// if not hInvincible then
29590: LD_EXP 97
29594: NOT
29595: IFFALSE 29599
// exit ;
29597: GO 29643
// for i in hInvincible do
29599: LD_ADDR_VAR 0 1
29603: PUSH
29604: LD_EXP 97
29608: PUSH
29609: FOR_IN
29610: IFFALSE 29641
// if GetLives ( i ) < 1000 then
29612: LD_VAR 0 1
29616: PPUSH
29617: CALL_OW 256
29621: PUSH
29622: LD_INT 1000
29624: LESS
29625: IFFALSE 29639
// SetLives ( i , 1000 ) ;
29627: LD_VAR 0 1
29631: PPUSH
29632: LD_INT 1000
29634: PPUSH
29635: CALL_OW 234
29639: GO 29609
29641: POP
29642: POP
// end ;
29643: PPOPN 1
29645: END
// export function hHackInvincible ; var i ; begin
29646: LD_INT 0
29648: PPUSH
29649: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
29650: LD_ADDR_VAR 0 2
29654: PUSH
29655: LD_INT 2
29657: PUSH
29658: LD_INT 21
29660: PUSH
29661: LD_INT 1
29663: PUSH
29664: EMPTY
29665: LIST
29666: LIST
29667: PUSH
29668: LD_INT 21
29670: PUSH
29671: LD_INT 2
29673: PUSH
29674: EMPTY
29675: LIST
29676: LIST
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: LIST
29682: PPUSH
29683: CALL_OW 69
29687: PUSH
29688: FOR_IN
29689: IFFALSE 29750
// if IsSelected ( i ) then
29691: LD_VAR 0 2
29695: PPUSH
29696: CALL_OW 306
29700: IFFALSE 29748
// begin if i in hInvincible then
29702: LD_VAR 0 2
29706: PUSH
29707: LD_EXP 97
29711: IN
29712: IFFALSE 29732
// hInvincible := hInvincible diff i else
29714: LD_ADDR_EXP 97
29718: PUSH
29719: LD_EXP 97
29723: PUSH
29724: LD_VAR 0 2
29728: DIFF
29729: ST_TO_ADDR
29730: GO 29748
// hInvincible := hInvincible union i ;
29732: LD_ADDR_EXP 97
29736: PUSH
29737: LD_EXP 97
29741: PUSH
29742: LD_VAR 0 2
29746: UNION
29747: ST_TO_ADDR
// end ;
29748: GO 29688
29750: POP
29751: POP
// end ;
29752: LD_VAR 0 1
29756: RET
// export function hHackInvisible ; var i , j ; begin
29757: LD_INT 0
29759: PPUSH
29760: PPUSH
29761: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29762: LD_ADDR_VAR 0 2
29766: PUSH
29767: LD_INT 21
29769: PUSH
29770: LD_INT 1
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: PPUSH
29777: CALL_OW 69
29781: PUSH
29782: FOR_IN
29783: IFFALSE 29807
// if IsSelected ( i ) then
29785: LD_VAR 0 2
29789: PPUSH
29790: CALL_OW 306
29794: IFFALSE 29805
// ComForceInvisible ( i ) ;
29796: LD_VAR 0 2
29800: PPUSH
29801: CALL_OW 496
29805: GO 29782
29807: POP
29808: POP
// end ;
29809: LD_VAR 0 1
29813: RET
// export function hHackChangeYourSide ; begin
29814: LD_INT 0
29816: PPUSH
// if your_side = 8 then
29817: LD_OWVAR 2
29821: PUSH
29822: LD_INT 8
29824: EQUAL
29825: IFFALSE 29837
// your_side := 0 else
29827: LD_ADDR_OWVAR 2
29831: PUSH
29832: LD_INT 0
29834: ST_TO_ADDR
29835: GO 29851
// your_side := your_side + 1 ;
29837: LD_ADDR_OWVAR 2
29841: PUSH
29842: LD_OWVAR 2
29846: PUSH
29847: LD_INT 1
29849: PLUS
29850: ST_TO_ADDR
// end ;
29851: LD_VAR 0 1
29855: RET
// export function hHackChangeUnitSide ; var i , j ; begin
29856: LD_INT 0
29858: PPUSH
29859: PPUSH
29860: PPUSH
// for i in all_units do
29861: LD_ADDR_VAR 0 2
29865: PUSH
29866: LD_OWVAR 3
29870: PUSH
29871: FOR_IN
29872: IFFALSE 29950
// if IsSelected ( i ) then
29874: LD_VAR 0 2
29878: PPUSH
29879: CALL_OW 306
29883: IFFALSE 29948
// begin j := GetSide ( i ) ;
29885: LD_ADDR_VAR 0 3
29889: PUSH
29890: LD_VAR 0 2
29894: PPUSH
29895: CALL_OW 255
29899: ST_TO_ADDR
// if j = 8 then
29900: LD_VAR 0 3
29904: PUSH
29905: LD_INT 8
29907: EQUAL
29908: IFFALSE 29920
// j := 0 else
29910: LD_ADDR_VAR 0 3
29914: PUSH
29915: LD_INT 0
29917: ST_TO_ADDR
29918: GO 29934
// j := j + 1 ;
29920: LD_ADDR_VAR 0 3
29924: PUSH
29925: LD_VAR 0 3
29929: PUSH
29930: LD_INT 1
29932: PLUS
29933: ST_TO_ADDR
// SetSide ( i , j ) ;
29934: LD_VAR 0 2
29938: PPUSH
29939: LD_VAR 0 3
29943: PPUSH
29944: CALL_OW 235
// end ;
29948: GO 29871
29950: POP
29951: POP
// end ;
29952: LD_VAR 0 1
29956: RET
// export function hHackFog ; begin
29957: LD_INT 0
29959: PPUSH
// FogOff ( true ) ;
29960: LD_INT 1
29962: PPUSH
29963: CALL_OW 344
// end ;
29967: LD_VAR 0 1
29971: RET
// export function hHackTeleport ( unit , x , y ) ; begin
29972: LD_INT 0
29974: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
29975: LD_VAR 0 1
29979: PPUSH
29980: LD_VAR 0 2
29984: PPUSH
29985: LD_VAR 0 3
29989: PPUSH
29990: LD_INT 1
29992: PPUSH
29993: LD_INT 1
29995: PPUSH
29996: CALL_OW 483
// CenterOnXY ( x , y ) ;
30000: LD_VAR 0 2
30004: PPUSH
30005: LD_VAR 0 3
30009: PPUSH
30010: CALL_OW 84
// end ;
30014: LD_VAR 0 4
30018: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
30019: LD_INT 0
30021: PPUSH
30022: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
30023: LD_VAR 0 1
30027: NOT
30028: PUSH
30029: LD_VAR 0 2
30033: PPUSH
30034: LD_VAR 0 3
30038: PPUSH
30039: CALL_OW 488
30043: NOT
30044: OR
30045: PUSH
30046: LD_VAR 0 1
30050: PPUSH
30051: CALL_OW 266
30055: PUSH
30056: LD_INT 3
30058: NONEQUAL
30059: PUSH
30060: LD_VAR 0 1
30064: PPUSH
30065: CALL_OW 247
30069: PUSH
30070: LD_INT 1
30072: EQUAL
30073: NOT
30074: AND
30075: OR
30076: IFFALSE 30080
// exit ;
30078: GO 30229
// if GetType ( factory ) = unit_human then
30080: LD_VAR 0 1
30084: PPUSH
30085: CALL_OW 247
30089: PUSH
30090: LD_INT 1
30092: EQUAL
30093: IFFALSE 30110
// factory := IsInUnit ( factory ) ;
30095: LD_ADDR_VAR 0 1
30099: PUSH
30100: LD_VAR 0 1
30104: PPUSH
30105: CALL_OW 310
30109: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
30110: LD_VAR 0 1
30114: PPUSH
30115: CALL_OW 266
30119: PUSH
30120: LD_INT 3
30122: NONEQUAL
30123: IFFALSE 30127
// exit ;
30125: GO 30229
// if HexInfo ( x , y ) = factory then
30127: LD_VAR 0 2
30131: PPUSH
30132: LD_VAR 0 3
30136: PPUSH
30137: CALL_OW 428
30141: PUSH
30142: LD_VAR 0 1
30146: EQUAL
30147: IFFALSE 30174
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
30149: LD_ADDR_EXP 98
30153: PUSH
30154: LD_EXP 98
30158: PPUSH
30159: LD_VAR 0 1
30163: PPUSH
30164: LD_INT 0
30166: PPUSH
30167: CALL_OW 1
30171: ST_TO_ADDR
30172: GO 30225
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
30174: LD_ADDR_EXP 98
30178: PUSH
30179: LD_EXP 98
30183: PPUSH
30184: LD_VAR 0 1
30188: PPUSH
30189: LD_VAR 0 1
30193: PPUSH
30194: CALL_OW 255
30198: PUSH
30199: LD_VAR 0 1
30203: PUSH
30204: LD_VAR 0 2
30208: PUSH
30209: LD_VAR 0 3
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: PPUSH
30220: CALL_OW 1
30224: ST_TO_ADDR
// UpdateFactoryWaypoints ;
30225: CALL 30234 0 0
// end ;
30229: LD_VAR 0 4
30233: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
30234: LD_INT 0
30236: PPUSH
30237: PPUSH
30238: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
30239: LD_STRING resetFactoryWaypoint();
30241: PPUSH
30242: CALL_OW 559
// if factoryWaypoints then
30246: LD_EXP 98
30250: IFFALSE 30376
// begin list := PrepareArray ( factoryWaypoints ) ;
30252: LD_ADDR_VAR 0 3
30256: PUSH
30257: LD_EXP 98
30261: PPUSH
30262: CALL 76698 0 1
30266: ST_TO_ADDR
// for i := 1 to list do
30267: LD_ADDR_VAR 0 2
30271: PUSH
30272: DOUBLE
30273: LD_INT 1
30275: DEC
30276: ST_TO_ADDR
30277: LD_VAR 0 3
30281: PUSH
30282: FOR_TO
30283: IFFALSE 30374
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
30285: LD_STRING setFactoryWaypointXY(
30287: PUSH
30288: LD_VAR 0 3
30292: PUSH
30293: LD_VAR 0 2
30297: ARRAY
30298: PUSH
30299: LD_INT 1
30301: ARRAY
30302: STR
30303: PUSH
30304: LD_STRING ,
30306: STR
30307: PUSH
30308: LD_VAR 0 3
30312: PUSH
30313: LD_VAR 0 2
30317: ARRAY
30318: PUSH
30319: LD_INT 2
30321: ARRAY
30322: STR
30323: PUSH
30324: LD_STRING ,
30326: STR
30327: PUSH
30328: LD_VAR 0 3
30332: PUSH
30333: LD_VAR 0 2
30337: ARRAY
30338: PUSH
30339: LD_INT 3
30341: ARRAY
30342: STR
30343: PUSH
30344: LD_STRING ,
30346: STR
30347: PUSH
30348: LD_VAR 0 3
30352: PUSH
30353: LD_VAR 0 2
30357: ARRAY
30358: PUSH
30359: LD_INT 4
30361: ARRAY
30362: STR
30363: PUSH
30364: LD_STRING )
30366: STR
30367: PPUSH
30368: CALL_OW 559
30372: GO 30282
30374: POP
30375: POP
// end ; end ;
30376: LD_VAR 0 1
30380: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
30381: LD_INT 0
30383: PPUSH
// if HexInfo ( x , y ) = warehouse then
30384: LD_VAR 0 2
30388: PPUSH
30389: LD_VAR 0 3
30393: PPUSH
30394: CALL_OW 428
30398: PUSH
30399: LD_VAR 0 1
30403: EQUAL
30404: IFFALSE 30431
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
30406: LD_ADDR_EXP 99
30410: PUSH
30411: LD_EXP 99
30415: PPUSH
30416: LD_VAR 0 1
30420: PPUSH
30421: LD_INT 0
30423: PPUSH
30424: CALL_OW 1
30428: ST_TO_ADDR
30429: GO 30482
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
30431: LD_ADDR_EXP 99
30435: PUSH
30436: LD_EXP 99
30440: PPUSH
30441: LD_VAR 0 1
30445: PPUSH
30446: LD_VAR 0 1
30450: PPUSH
30451: CALL_OW 255
30455: PUSH
30456: LD_VAR 0 1
30460: PUSH
30461: LD_VAR 0 2
30465: PUSH
30466: LD_VAR 0 3
30470: PUSH
30471: EMPTY
30472: LIST
30473: LIST
30474: LIST
30475: LIST
30476: PPUSH
30477: CALL_OW 1
30481: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
30482: CALL 30491 0 0
// end ;
30486: LD_VAR 0 4
30490: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
30491: LD_INT 0
30493: PPUSH
30494: PPUSH
30495: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
30496: LD_STRING resetWarehouseGatheringPoints();
30498: PPUSH
30499: CALL_OW 559
// if warehouseGatheringPoints then
30503: LD_EXP 99
30507: IFFALSE 30633
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
30509: LD_ADDR_VAR 0 3
30513: PUSH
30514: LD_EXP 99
30518: PPUSH
30519: CALL 76698 0 1
30523: ST_TO_ADDR
// for i := 1 to list do
30524: LD_ADDR_VAR 0 2
30528: PUSH
30529: DOUBLE
30530: LD_INT 1
30532: DEC
30533: ST_TO_ADDR
30534: LD_VAR 0 3
30538: PUSH
30539: FOR_TO
30540: IFFALSE 30631
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
30542: LD_STRING setWarehouseGatheringPointXY(
30544: PUSH
30545: LD_VAR 0 3
30549: PUSH
30550: LD_VAR 0 2
30554: ARRAY
30555: PUSH
30556: LD_INT 1
30558: ARRAY
30559: STR
30560: PUSH
30561: LD_STRING ,
30563: STR
30564: PUSH
30565: LD_VAR 0 3
30569: PUSH
30570: LD_VAR 0 2
30574: ARRAY
30575: PUSH
30576: LD_INT 2
30578: ARRAY
30579: STR
30580: PUSH
30581: LD_STRING ,
30583: STR
30584: PUSH
30585: LD_VAR 0 3
30589: PUSH
30590: LD_VAR 0 2
30594: ARRAY
30595: PUSH
30596: LD_INT 3
30598: ARRAY
30599: STR
30600: PUSH
30601: LD_STRING ,
30603: STR
30604: PUSH
30605: LD_VAR 0 3
30609: PUSH
30610: LD_VAR 0 2
30614: ARRAY
30615: PUSH
30616: LD_INT 4
30618: ARRAY
30619: STR
30620: PUSH
30621: LD_STRING )
30623: STR
30624: PPUSH
30625: CALL_OW 559
30629: GO 30539
30631: POP
30632: POP
// end ; end ;
30633: LD_VAR 0 1
30637: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
30638: LD_EXP 99
30642: IFFALSE 31327
30644: GO 30646
30646: DISABLE
30647: LD_INT 0
30649: PPUSH
30650: PPUSH
30651: PPUSH
30652: PPUSH
30653: PPUSH
30654: PPUSH
30655: PPUSH
30656: PPUSH
30657: PPUSH
// begin enable ;
30658: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
30659: LD_ADDR_VAR 0 3
30663: PUSH
30664: LD_EXP 99
30668: PPUSH
30669: CALL 76698 0 1
30673: ST_TO_ADDR
// if not list then
30674: LD_VAR 0 3
30678: NOT
30679: IFFALSE 30683
// exit ;
30681: GO 31327
// for i := 1 to list do
30683: LD_ADDR_VAR 0 1
30687: PUSH
30688: DOUBLE
30689: LD_INT 1
30691: DEC
30692: ST_TO_ADDR
30693: LD_VAR 0 3
30697: PUSH
30698: FOR_TO
30699: IFFALSE 31325
// begin depot := list [ i ] [ 2 ] ;
30701: LD_ADDR_VAR 0 8
30705: PUSH
30706: LD_VAR 0 3
30710: PUSH
30711: LD_VAR 0 1
30715: ARRAY
30716: PUSH
30717: LD_INT 2
30719: ARRAY
30720: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
30721: LD_ADDR_VAR 0 5
30725: PUSH
30726: LD_VAR 0 3
30730: PUSH
30731: LD_VAR 0 1
30735: ARRAY
30736: PUSH
30737: LD_INT 1
30739: ARRAY
30740: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
30741: LD_VAR 0 8
30745: PPUSH
30746: CALL_OW 301
30750: PUSH
30751: LD_VAR 0 5
30755: PUSH
30756: LD_VAR 0 8
30760: PPUSH
30761: CALL_OW 255
30765: NONEQUAL
30766: OR
30767: IFFALSE 30796
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
30769: LD_ADDR_EXP 99
30773: PUSH
30774: LD_EXP 99
30778: PPUSH
30779: LD_VAR 0 8
30783: PPUSH
30784: LD_INT 0
30786: PPUSH
30787: CALL_OW 1
30791: ST_TO_ADDR
// exit ;
30792: POP
30793: POP
30794: GO 31327
// end ; x := list [ i ] [ 3 ] ;
30796: LD_ADDR_VAR 0 6
30800: PUSH
30801: LD_VAR 0 3
30805: PUSH
30806: LD_VAR 0 1
30810: ARRAY
30811: PUSH
30812: LD_INT 3
30814: ARRAY
30815: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
30816: LD_ADDR_VAR 0 7
30820: PUSH
30821: LD_VAR 0 3
30825: PUSH
30826: LD_VAR 0 1
30830: ARRAY
30831: PUSH
30832: LD_INT 4
30834: ARRAY
30835: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
30836: LD_ADDR_VAR 0 9
30840: PUSH
30841: LD_VAR 0 6
30845: PPUSH
30846: LD_VAR 0 7
30850: PPUSH
30851: LD_INT 16
30853: PPUSH
30854: CALL 75286 0 3
30858: ST_TO_ADDR
// if not cratesNearbyPoint then
30859: LD_VAR 0 9
30863: NOT
30864: IFFALSE 30870
// exit ;
30866: POP
30867: POP
30868: GO 31327
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
30870: LD_ADDR_VAR 0 4
30874: PUSH
30875: LD_INT 22
30877: PUSH
30878: LD_VAR 0 5
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: PUSH
30887: LD_INT 3
30889: PUSH
30890: LD_INT 60
30892: PUSH
30893: EMPTY
30894: LIST
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: LD_INT 91
30902: PUSH
30903: LD_VAR 0 8
30907: PUSH
30908: LD_INT 6
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: LIST
30915: PUSH
30916: LD_INT 2
30918: PUSH
30919: LD_INT 25
30921: PUSH
30922: LD_INT 2
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: PUSH
30929: LD_INT 25
30931: PUSH
30932: LD_INT 16
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: PUSH
30939: EMPTY
30940: LIST
30941: LIST
30942: LIST
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: PPUSH
30950: CALL_OW 69
30954: PUSH
30955: LD_VAR 0 8
30959: PPUSH
30960: CALL_OW 313
30964: PPUSH
30965: LD_INT 3
30967: PUSH
30968: LD_INT 60
30970: PUSH
30971: EMPTY
30972: LIST
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: PUSH
30978: LD_INT 2
30980: PUSH
30981: LD_INT 25
30983: PUSH
30984: LD_INT 2
30986: PUSH
30987: EMPTY
30988: LIST
30989: LIST
30990: PUSH
30991: LD_INT 25
30993: PUSH
30994: LD_INT 16
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: LIST
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: PPUSH
31010: CALL_OW 72
31014: UNION
31015: ST_TO_ADDR
// if tmp then
31016: LD_VAR 0 4
31020: IFFALSE 31100
// begin tmp := ShrinkArray ( tmp , 3 ) ;
31022: LD_ADDR_VAR 0 4
31026: PUSH
31027: LD_VAR 0 4
31031: PPUSH
31032: LD_INT 3
31034: PPUSH
31035: CALL 73255 0 2
31039: ST_TO_ADDR
// for j in tmp do
31040: LD_ADDR_VAR 0 2
31044: PUSH
31045: LD_VAR 0 4
31049: PUSH
31050: FOR_IN
31051: IFFALSE 31094
// begin if IsInUnit ( j ) then
31053: LD_VAR 0 2
31057: PPUSH
31058: CALL_OW 310
31062: IFFALSE 31073
// ComExit ( j ) ;
31064: LD_VAR 0 2
31068: PPUSH
31069: CALL 73338 0 1
// AddComCollect ( j , x , y ) ;
31073: LD_VAR 0 2
31077: PPUSH
31078: LD_VAR 0 6
31082: PPUSH
31083: LD_VAR 0 7
31087: PPUSH
31088: CALL_OW 177
// end ;
31092: GO 31050
31094: POP
31095: POP
// exit ;
31096: POP
31097: POP
31098: GO 31327
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
31100: LD_ADDR_VAR 0 4
31104: PUSH
31105: LD_INT 22
31107: PUSH
31108: LD_VAR 0 5
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: PUSH
31117: LD_INT 91
31119: PUSH
31120: LD_VAR 0 8
31124: PUSH
31125: LD_INT 8
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 2
31135: PUSH
31136: LD_INT 34
31138: PUSH
31139: LD_INT 12
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: PUSH
31146: LD_INT 34
31148: PUSH
31149: LD_INT 51
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: PUSH
31156: LD_INT 34
31158: PUSH
31159: LD_INT 32
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: PUSH
31166: LD_INT 34
31168: PUSH
31169: LD_INT 89
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: LIST
31180: LIST
31181: LIST
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: LIST
31187: PPUSH
31188: CALL_OW 69
31192: ST_TO_ADDR
// if tmp then
31193: LD_VAR 0 4
31197: IFFALSE 31323
// begin for j in tmp do
31199: LD_ADDR_VAR 0 2
31203: PUSH
31204: LD_VAR 0 4
31208: PUSH
31209: FOR_IN
31210: IFFALSE 31321
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
31212: LD_VAR 0 2
31216: PPUSH
31217: CALL_OW 262
31221: PUSH
31222: LD_INT 3
31224: EQUAL
31225: PUSH
31226: LD_VAR 0 2
31230: PPUSH
31231: CALL_OW 261
31235: PUSH
31236: LD_INT 20
31238: GREATER
31239: OR
31240: PUSH
31241: LD_VAR 0 2
31245: PPUSH
31246: CALL_OW 314
31250: NOT
31251: AND
31252: PUSH
31253: LD_VAR 0 2
31257: PPUSH
31258: CALL_OW 263
31262: PUSH
31263: LD_INT 1
31265: NONEQUAL
31266: PUSH
31267: LD_VAR 0 2
31271: PPUSH
31272: CALL_OW 311
31276: OR
31277: AND
31278: IFFALSE 31319
// begin ComCollect ( j , x , y ) ;
31280: LD_VAR 0 2
31284: PPUSH
31285: LD_VAR 0 6
31289: PPUSH
31290: LD_VAR 0 7
31294: PPUSH
31295: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
31299: LD_VAR 0 2
31303: PPUSH
31304: LD_VAR 0 8
31308: PPUSH
31309: CALL_OW 172
// exit ;
31313: POP
31314: POP
31315: POP
31316: POP
31317: GO 31327
// end ;
31319: GO 31209
31321: POP
31322: POP
// end ; end ;
31323: GO 30698
31325: POP
31326: POP
// end ; end_of_file
31327: PPOPN 9
31329: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
31330: LD_INT 0
31332: PPUSH
31333: PPUSH
31334: PPUSH
31335: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
31336: LD_VAR 0 1
31340: PPUSH
31341: CALL_OW 264
31345: PUSH
31346: LD_INT 91
31348: EQUAL
31349: IFFALSE 31421
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
31351: LD_INT 68
31353: PPUSH
31354: LD_VAR 0 1
31358: PPUSH
31359: CALL_OW 255
31363: PPUSH
31364: CALL_OW 321
31368: PUSH
31369: LD_INT 2
31371: EQUAL
31372: IFFALSE 31384
// eff := 70 else
31374: LD_ADDR_VAR 0 4
31378: PUSH
31379: LD_INT 70
31381: ST_TO_ADDR
31382: GO 31392
// eff := 30 ;
31384: LD_ADDR_VAR 0 4
31388: PUSH
31389: LD_INT 30
31391: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
31392: LD_VAR 0 1
31396: PPUSH
31397: CALL_OW 250
31401: PPUSH
31402: LD_VAR 0 1
31406: PPUSH
31407: CALL_OW 251
31411: PPUSH
31412: LD_VAR 0 4
31416: PPUSH
31417: CALL_OW 495
// end ; end ;
31421: LD_VAR 0 2
31425: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
31426: LD_INT 0
31428: PPUSH
// end ;
31429: LD_VAR 0 4
31433: RET
// export function SOS_Command ( cmd ) ; begin
31434: LD_INT 0
31436: PPUSH
// end ;
31437: LD_VAR 0 2
31441: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
31442: LD_INT 0
31444: PPUSH
// end ;
31445: LD_VAR 0 6
31449: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
31450: LD_INT 0
31452: PPUSH
31453: PPUSH
// if not vehicle or not factory then
31454: LD_VAR 0 1
31458: NOT
31459: PUSH
31460: LD_VAR 0 2
31464: NOT
31465: OR
31466: IFFALSE 31470
// exit ;
31468: GO 31701
// if factoryWaypoints >= factory then
31470: LD_EXP 98
31474: PUSH
31475: LD_VAR 0 2
31479: GREATEREQUAL
31480: IFFALSE 31701
// if factoryWaypoints [ factory ] then
31482: LD_EXP 98
31486: PUSH
31487: LD_VAR 0 2
31491: ARRAY
31492: IFFALSE 31701
// begin if GetControl ( vehicle ) = control_manual then
31494: LD_VAR 0 1
31498: PPUSH
31499: CALL_OW 263
31503: PUSH
31504: LD_INT 1
31506: EQUAL
31507: IFFALSE 31588
// begin driver := IsDrivenBy ( vehicle ) ;
31509: LD_ADDR_VAR 0 4
31513: PUSH
31514: LD_VAR 0 1
31518: PPUSH
31519: CALL_OW 311
31523: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
31524: LD_VAR 0 4
31528: PPUSH
31529: LD_EXP 98
31533: PUSH
31534: LD_VAR 0 2
31538: ARRAY
31539: PUSH
31540: LD_INT 3
31542: ARRAY
31543: PPUSH
31544: LD_EXP 98
31548: PUSH
31549: LD_VAR 0 2
31553: ARRAY
31554: PUSH
31555: LD_INT 4
31557: ARRAY
31558: PPUSH
31559: CALL_OW 171
// AddComExitVehicle ( driver ) ;
31563: LD_VAR 0 4
31567: PPUSH
31568: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
31572: LD_VAR 0 4
31576: PPUSH
31577: LD_VAR 0 2
31581: PPUSH
31582: CALL_OW 180
// end else
31586: GO 31701
// if GetControl ( vehicle ) = control_remote then
31588: LD_VAR 0 1
31592: PPUSH
31593: CALL_OW 263
31597: PUSH
31598: LD_INT 2
31600: EQUAL
31601: IFFALSE 31662
// begin wait ( 0 0$2 ) ;
31603: LD_INT 70
31605: PPUSH
31606: CALL_OW 67
// if Connect ( vehicle ) then
31610: LD_VAR 0 1
31614: PPUSH
31615: CALL 43559 0 1
31619: IFFALSE 31660
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
31621: LD_VAR 0 1
31625: PPUSH
31626: LD_EXP 98
31630: PUSH
31631: LD_VAR 0 2
31635: ARRAY
31636: PUSH
31637: LD_INT 3
31639: ARRAY
31640: PPUSH
31641: LD_EXP 98
31645: PUSH
31646: LD_VAR 0 2
31650: ARRAY
31651: PUSH
31652: LD_INT 4
31654: ARRAY
31655: PPUSH
31656: CALL_OW 171
// end else
31660: GO 31701
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
31662: LD_VAR 0 1
31666: PPUSH
31667: LD_EXP 98
31671: PUSH
31672: LD_VAR 0 2
31676: ARRAY
31677: PUSH
31678: LD_INT 3
31680: ARRAY
31681: PPUSH
31682: LD_EXP 98
31686: PUSH
31687: LD_VAR 0 2
31691: ARRAY
31692: PUSH
31693: LD_INT 4
31695: ARRAY
31696: PPUSH
31697: CALL_OW 171
// end ; end ;
31701: LD_VAR 0 3
31705: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
31706: LD_INT 0
31708: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
31709: LD_VAR 0 1
31713: PUSH
31714: LD_INT 250
31716: EQUAL
31717: PUSH
31718: LD_VAR 0 2
31722: PPUSH
31723: CALL_OW 264
31727: PUSH
31728: LD_INT 81
31730: EQUAL
31731: AND
31732: IFFALSE 31753
// MinerPlaceMine ( unit , x , y ) ;
31734: LD_VAR 0 2
31738: PPUSH
31739: LD_VAR 0 4
31743: PPUSH
31744: LD_VAR 0 5
31748: PPUSH
31749: CALL 34138 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
31753: LD_VAR 0 1
31757: PUSH
31758: LD_INT 251
31760: EQUAL
31761: PUSH
31762: LD_VAR 0 2
31766: PPUSH
31767: CALL_OW 264
31771: PUSH
31772: LD_INT 81
31774: EQUAL
31775: AND
31776: IFFALSE 31797
// MinerDetonateMine ( unit , x , y ) ;
31778: LD_VAR 0 2
31782: PPUSH
31783: LD_VAR 0 4
31787: PPUSH
31788: LD_VAR 0 5
31792: PPUSH
31793: CALL 34413 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
31797: LD_VAR 0 1
31801: PUSH
31802: LD_INT 252
31804: EQUAL
31805: PUSH
31806: LD_VAR 0 2
31810: PPUSH
31811: CALL_OW 264
31815: PUSH
31816: LD_INT 81
31818: EQUAL
31819: AND
31820: IFFALSE 31841
// MinerCreateMinefield ( unit , x , y ) ;
31822: LD_VAR 0 2
31826: PPUSH
31827: LD_VAR 0 4
31831: PPUSH
31832: LD_VAR 0 5
31836: PPUSH
31837: CALL 34830 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
31841: LD_VAR 0 1
31845: PUSH
31846: LD_INT 253
31848: EQUAL
31849: PUSH
31850: LD_VAR 0 2
31854: PPUSH
31855: CALL_OW 257
31859: PUSH
31860: LD_INT 5
31862: EQUAL
31863: AND
31864: IFFALSE 31885
// ComBinocular ( unit , x , y ) ;
31866: LD_VAR 0 2
31870: PPUSH
31871: LD_VAR 0 4
31875: PPUSH
31876: LD_VAR 0 5
31880: PPUSH
31881: CALL 35199 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
31885: LD_VAR 0 1
31889: PUSH
31890: LD_INT 254
31892: EQUAL
31893: PUSH
31894: LD_VAR 0 2
31898: PPUSH
31899: CALL_OW 264
31903: PUSH
31904: LD_INT 99
31906: EQUAL
31907: AND
31908: PUSH
31909: LD_VAR 0 3
31913: PPUSH
31914: CALL_OW 263
31918: PUSH
31919: LD_INT 3
31921: EQUAL
31922: AND
31923: IFFALSE 31939
// HackDestroyVehicle ( unit , selectedUnit ) ;
31925: LD_VAR 0 2
31929: PPUSH
31930: LD_VAR 0 3
31934: PPUSH
31935: CALL 33502 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
31939: LD_VAR 0 1
31943: PUSH
31944: LD_INT 255
31946: EQUAL
31947: PUSH
31948: LD_VAR 0 2
31952: PPUSH
31953: CALL_OW 264
31957: PUSH
31958: LD_INT 14
31960: PUSH
31961: LD_INT 53
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: IN
31968: AND
31969: PUSH
31970: LD_VAR 0 4
31974: PPUSH
31975: LD_VAR 0 5
31979: PPUSH
31980: CALL_OW 488
31984: AND
31985: IFFALSE 32009
// CutTreeXYR ( unit , x , y , 12 ) ;
31987: LD_VAR 0 2
31991: PPUSH
31992: LD_VAR 0 4
31996: PPUSH
31997: LD_VAR 0 5
32001: PPUSH
32002: LD_INT 12
32004: PPUSH
32005: CALL 32072 0 4
// if cmd = 256 then
32009: LD_VAR 0 1
32013: PUSH
32014: LD_INT 256
32016: EQUAL
32017: IFFALSE 32038
// SetFactoryWaypoint ( unit , x , y ) ;
32019: LD_VAR 0 2
32023: PPUSH
32024: LD_VAR 0 4
32028: PPUSH
32029: LD_VAR 0 5
32033: PPUSH
32034: CALL 30019 0 3
// if cmd = 257 then
32038: LD_VAR 0 1
32042: PUSH
32043: LD_INT 257
32045: EQUAL
32046: IFFALSE 32067
// SetWarehouseGatheringPoint ( unit , x , y ) ;
32048: LD_VAR 0 2
32052: PPUSH
32053: LD_VAR 0 4
32057: PPUSH
32058: LD_VAR 0 5
32062: PPUSH
32063: CALL 30381 0 3
// end ;
32067: LD_VAR 0 6
32071: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
32072: LD_INT 0
32074: PPUSH
32075: PPUSH
32076: PPUSH
32077: PPUSH
32078: PPUSH
32079: PPUSH
32080: PPUSH
32081: PPUSH
32082: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
32083: LD_VAR 0 1
32087: NOT
32088: PUSH
32089: LD_VAR 0 2
32093: PPUSH
32094: LD_VAR 0 3
32098: PPUSH
32099: CALL_OW 488
32103: NOT
32104: OR
32105: PUSH
32106: LD_VAR 0 4
32110: NOT
32111: OR
32112: IFFALSE 32116
// exit ;
32114: GO 32456
// list := [ ] ;
32116: LD_ADDR_VAR 0 13
32120: PUSH
32121: EMPTY
32122: ST_TO_ADDR
// if x - r < 0 then
32123: LD_VAR 0 2
32127: PUSH
32128: LD_VAR 0 4
32132: MINUS
32133: PUSH
32134: LD_INT 0
32136: LESS
32137: IFFALSE 32149
// min_x := 0 else
32139: LD_ADDR_VAR 0 7
32143: PUSH
32144: LD_INT 0
32146: ST_TO_ADDR
32147: GO 32165
// min_x := x - r ;
32149: LD_ADDR_VAR 0 7
32153: PUSH
32154: LD_VAR 0 2
32158: PUSH
32159: LD_VAR 0 4
32163: MINUS
32164: ST_TO_ADDR
// if y - r < 0 then
32165: LD_VAR 0 3
32169: PUSH
32170: LD_VAR 0 4
32174: MINUS
32175: PUSH
32176: LD_INT 0
32178: LESS
32179: IFFALSE 32191
// min_y := 0 else
32181: LD_ADDR_VAR 0 8
32185: PUSH
32186: LD_INT 0
32188: ST_TO_ADDR
32189: GO 32207
// min_y := y - r ;
32191: LD_ADDR_VAR 0 8
32195: PUSH
32196: LD_VAR 0 3
32200: PUSH
32201: LD_VAR 0 4
32205: MINUS
32206: ST_TO_ADDR
// max_x := x + r ;
32207: LD_ADDR_VAR 0 9
32211: PUSH
32212: LD_VAR 0 2
32216: PUSH
32217: LD_VAR 0 4
32221: PLUS
32222: ST_TO_ADDR
// max_y := y + r ;
32223: LD_ADDR_VAR 0 10
32227: PUSH
32228: LD_VAR 0 3
32232: PUSH
32233: LD_VAR 0 4
32237: PLUS
32238: ST_TO_ADDR
// for _x = min_x to max_x do
32239: LD_ADDR_VAR 0 11
32243: PUSH
32244: DOUBLE
32245: LD_VAR 0 7
32249: DEC
32250: ST_TO_ADDR
32251: LD_VAR 0 9
32255: PUSH
32256: FOR_TO
32257: IFFALSE 32374
// for _y = min_y to max_y do
32259: LD_ADDR_VAR 0 12
32263: PUSH
32264: DOUBLE
32265: LD_VAR 0 8
32269: DEC
32270: ST_TO_ADDR
32271: LD_VAR 0 10
32275: PUSH
32276: FOR_TO
32277: IFFALSE 32370
// begin if not ValidHex ( _x , _y ) then
32279: LD_VAR 0 11
32283: PPUSH
32284: LD_VAR 0 12
32288: PPUSH
32289: CALL_OW 488
32293: NOT
32294: IFFALSE 32298
// continue ;
32296: GO 32276
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
32298: LD_VAR 0 11
32302: PPUSH
32303: LD_VAR 0 12
32307: PPUSH
32308: CALL_OW 351
32312: PUSH
32313: LD_VAR 0 11
32317: PPUSH
32318: LD_VAR 0 12
32322: PPUSH
32323: CALL_OW 554
32327: AND
32328: IFFALSE 32368
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
32330: LD_ADDR_VAR 0 13
32334: PUSH
32335: LD_VAR 0 13
32339: PPUSH
32340: LD_VAR 0 13
32344: PUSH
32345: LD_INT 1
32347: PLUS
32348: PPUSH
32349: LD_VAR 0 11
32353: PUSH
32354: LD_VAR 0 12
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PPUSH
32363: CALL_OW 2
32367: ST_TO_ADDR
// end ;
32368: GO 32276
32370: POP
32371: POP
32372: GO 32256
32374: POP
32375: POP
// if not list then
32376: LD_VAR 0 13
32380: NOT
32381: IFFALSE 32385
// exit ;
32383: GO 32456
// for i in list do
32385: LD_ADDR_VAR 0 6
32389: PUSH
32390: LD_VAR 0 13
32394: PUSH
32395: FOR_IN
32396: IFFALSE 32454
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
32398: LD_VAR 0 1
32402: PPUSH
32403: LD_STRING M
32405: PUSH
32406: LD_VAR 0 6
32410: PUSH
32411: LD_INT 1
32413: ARRAY
32414: PUSH
32415: LD_VAR 0 6
32419: PUSH
32420: LD_INT 2
32422: ARRAY
32423: PUSH
32424: LD_INT 0
32426: PUSH
32427: LD_INT 0
32429: PUSH
32430: LD_INT 0
32432: PUSH
32433: LD_INT 0
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: LIST
32440: LIST
32441: LIST
32442: LIST
32443: LIST
32444: PUSH
32445: EMPTY
32446: LIST
32447: PPUSH
32448: CALL_OW 447
32452: GO 32395
32454: POP
32455: POP
// end ;
32456: LD_VAR 0 5
32460: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
32461: LD_EXP 101
32465: NOT
32466: IFFALSE 32516
32468: GO 32470
32470: DISABLE
// begin initHack := true ;
32471: LD_ADDR_EXP 101
32475: PUSH
32476: LD_INT 1
32478: ST_TO_ADDR
// hackTanks := [ ] ;
32479: LD_ADDR_EXP 102
32483: PUSH
32484: EMPTY
32485: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
32486: LD_ADDR_EXP 103
32490: PUSH
32491: EMPTY
32492: ST_TO_ADDR
// hackLimit := 3 ;
32493: LD_ADDR_EXP 104
32497: PUSH
32498: LD_INT 3
32500: ST_TO_ADDR
// hackDist := 12 ;
32501: LD_ADDR_EXP 105
32505: PUSH
32506: LD_INT 12
32508: ST_TO_ADDR
// hackCounter := [ ] ;
32509: LD_ADDR_EXP 106
32513: PUSH
32514: EMPTY
32515: ST_TO_ADDR
// end ;
32516: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
32517: LD_EXP 101
32521: PUSH
32522: LD_INT 34
32524: PUSH
32525: LD_INT 99
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: PPUSH
32532: CALL_OW 69
32536: AND
32537: IFFALSE 32790
32539: GO 32541
32541: DISABLE
32542: LD_INT 0
32544: PPUSH
32545: PPUSH
// begin enable ;
32546: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
32547: LD_ADDR_VAR 0 1
32551: PUSH
32552: LD_INT 34
32554: PUSH
32555: LD_INT 99
32557: PUSH
32558: EMPTY
32559: LIST
32560: LIST
32561: PPUSH
32562: CALL_OW 69
32566: PUSH
32567: FOR_IN
32568: IFFALSE 32788
// begin if not i in hackTanks then
32570: LD_VAR 0 1
32574: PUSH
32575: LD_EXP 102
32579: IN
32580: NOT
32581: IFFALSE 32664
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
32583: LD_ADDR_EXP 102
32587: PUSH
32588: LD_EXP 102
32592: PPUSH
32593: LD_EXP 102
32597: PUSH
32598: LD_INT 1
32600: PLUS
32601: PPUSH
32602: LD_VAR 0 1
32606: PPUSH
32607: CALL_OW 1
32611: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
32612: LD_ADDR_EXP 103
32616: PUSH
32617: LD_EXP 103
32621: PPUSH
32622: LD_EXP 103
32626: PUSH
32627: LD_INT 1
32629: PLUS
32630: PPUSH
32631: EMPTY
32632: PPUSH
32633: CALL_OW 1
32637: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
32638: LD_ADDR_EXP 106
32642: PUSH
32643: LD_EXP 106
32647: PPUSH
32648: LD_EXP 106
32652: PUSH
32653: LD_INT 1
32655: PLUS
32656: PPUSH
32657: EMPTY
32658: PPUSH
32659: CALL_OW 1
32663: ST_TO_ADDR
// end ; if not IsOk ( i ) then
32664: LD_VAR 0 1
32668: PPUSH
32669: CALL_OW 302
32673: NOT
32674: IFFALSE 32687
// begin HackUnlinkAll ( i ) ;
32676: LD_VAR 0 1
32680: PPUSH
32681: CALL 32793 0 1
// continue ;
32685: GO 32567
// end ; HackCheckCapturedStatus ( i ) ;
32687: LD_VAR 0 1
32691: PPUSH
32692: CALL 33236 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
32696: LD_ADDR_VAR 0 2
32700: PUSH
32701: LD_INT 81
32703: PUSH
32704: LD_VAR 0 1
32708: PPUSH
32709: CALL_OW 255
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 33
32720: PUSH
32721: LD_INT 3
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PUSH
32728: LD_INT 91
32730: PUSH
32731: LD_VAR 0 1
32735: PUSH
32736: LD_EXP 105
32740: PUSH
32741: EMPTY
32742: LIST
32743: LIST
32744: LIST
32745: PUSH
32746: LD_INT 50
32748: PUSH
32749: EMPTY
32750: LIST
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: LIST
32756: LIST
32757: PPUSH
32758: CALL_OW 69
32762: ST_TO_ADDR
// if not tmp then
32763: LD_VAR 0 2
32767: NOT
32768: IFFALSE 32772
// continue ;
32770: GO 32567
// HackLink ( i , tmp ) ;
32772: LD_VAR 0 1
32776: PPUSH
32777: LD_VAR 0 2
32781: PPUSH
32782: CALL 32929 0 2
// end ;
32786: GO 32567
32788: POP
32789: POP
// end ;
32790: PPOPN 2
32792: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
32793: LD_INT 0
32795: PPUSH
32796: PPUSH
32797: PPUSH
// if not hack in hackTanks then
32798: LD_VAR 0 1
32802: PUSH
32803: LD_EXP 102
32807: IN
32808: NOT
32809: IFFALSE 32813
// exit ;
32811: GO 32924
// index := GetElementIndex ( hackTanks , hack ) ;
32813: LD_ADDR_VAR 0 4
32817: PUSH
32818: LD_EXP 102
32822: PPUSH
32823: LD_VAR 0 1
32827: PPUSH
32828: CALL 40366 0 2
32832: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
32833: LD_EXP 103
32837: PUSH
32838: LD_VAR 0 4
32842: ARRAY
32843: IFFALSE 32924
// begin for i in hackTanksCaptured [ index ] do
32845: LD_ADDR_VAR 0 3
32849: PUSH
32850: LD_EXP 103
32854: PUSH
32855: LD_VAR 0 4
32859: ARRAY
32860: PUSH
32861: FOR_IN
32862: IFFALSE 32888
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
32864: LD_VAR 0 3
32868: PUSH
32869: LD_INT 1
32871: ARRAY
32872: PPUSH
32873: LD_VAR 0 3
32877: PUSH
32878: LD_INT 2
32880: ARRAY
32881: PPUSH
32882: CALL_OW 235
32886: GO 32861
32888: POP
32889: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
32890: LD_ADDR_EXP 103
32894: PUSH
32895: LD_EXP 103
32899: PPUSH
32900: LD_VAR 0 4
32904: PPUSH
32905: EMPTY
32906: PPUSH
32907: CALL_OW 1
32911: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
32912: LD_VAR 0 1
32916: PPUSH
32917: LD_INT 0
32919: PPUSH
32920: CALL_OW 505
// end ; end ;
32924: LD_VAR 0 2
32928: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
32929: LD_INT 0
32931: PPUSH
32932: PPUSH
32933: PPUSH
// if not hack in hackTanks or not vehicles then
32934: LD_VAR 0 1
32938: PUSH
32939: LD_EXP 102
32943: IN
32944: NOT
32945: PUSH
32946: LD_VAR 0 2
32950: NOT
32951: OR
32952: IFFALSE 32956
// exit ;
32954: GO 33231
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
32956: LD_ADDR_VAR 0 2
32960: PUSH
32961: LD_VAR 0 1
32965: PPUSH
32966: LD_VAR 0 2
32970: PPUSH
32971: LD_INT 1
32973: PPUSH
32974: LD_INT 1
32976: PPUSH
32977: CALL 41016 0 4
32981: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
32982: LD_ADDR_VAR 0 5
32986: PUSH
32987: LD_EXP 102
32991: PPUSH
32992: LD_VAR 0 1
32996: PPUSH
32997: CALL 40366 0 2
33001: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
33002: LD_EXP 103
33006: PUSH
33007: LD_VAR 0 5
33011: ARRAY
33012: PUSH
33013: LD_EXP 104
33017: LESS
33018: IFFALSE 33207
// begin for i := 1 to vehicles do
33020: LD_ADDR_VAR 0 4
33024: PUSH
33025: DOUBLE
33026: LD_INT 1
33028: DEC
33029: ST_TO_ADDR
33030: LD_VAR 0 2
33034: PUSH
33035: FOR_TO
33036: IFFALSE 33205
// begin if hackTanksCaptured [ index ] = hackLimit then
33038: LD_EXP 103
33042: PUSH
33043: LD_VAR 0 5
33047: ARRAY
33048: PUSH
33049: LD_EXP 104
33053: EQUAL
33054: IFFALSE 33058
// break ;
33056: GO 33205
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
33058: LD_ADDR_EXP 106
33062: PUSH
33063: LD_EXP 106
33067: PPUSH
33068: LD_VAR 0 5
33072: PPUSH
33073: LD_EXP 106
33077: PUSH
33078: LD_VAR 0 5
33082: ARRAY
33083: PUSH
33084: LD_INT 1
33086: PLUS
33087: PPUSH
33088: CALL_OW 1
33092: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
33093: LD_ADDR_EXP 103
33097: PUSH
33098: LD_EXP 103
33102: PPUSH
33103: LD_VAR 0 5
33107: PUSH
33108: LD_EXP 103
33112: PUSH
33113: LD_VAR 0 5
33117: ARRAY
33118: PUSH
33119: LD_INT 1
33121: PLUS
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PPUSH
33127: LD_VAR 0 2
33131: PUSH
33132: LD_VAR 0 4
33136: ARRAY
33137: PUSH
33138: LD_VAR 0 2
33142: PUSH
33143: LD_VAR 0 4
33147: ARRAY
33148: PPUSH
33149: CALL_OW 255
33153: PUSH
33154: EMPTY
33155: LIST
33156: LIST
33157: PPUSH
33158: CALL 40581 0 3
33162: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
33163: LD_VAR 0 2
33167: PUSH
33168: LD_VAR 0 4
33172: ARRAY
33173: PPUSH
33174: LD_VAR 0 1
33178: PPUSH
33179: CALL_OW 255
33183: PPUSH
33184: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
33188: LD_VAR 0 2
33192: PUSH
33193: LD_VAR 0 4
33197: ARRAY
33198: PPUSH
33199: CALL_OW 141
// end ;
33203: GO 33035
33205: POP
33206: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33207: LD_VAR 0 1
33211: PPUSH
33212: LD_EXP 103
33216: PUSH
33217: LD_VAR 0 5
33221: ARRAY
33222: PUSH
33223: LD_INT 0
33225: PLUS
33226: PPUSH
33227: CALL_OW 505
// end ;
33231: LD_VAR 0 3
33235: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
33236: LD_INT 0
33238: PPUSH
33239: PPUSH
33240: PPUSH
33241: PPUSH
// if not hack in hackTanks then
33242: LD_VAR 0 1
33246: PUSH
33247: LD_EXP 102
33251: IN
33252: NOT
33253: IFFALSE 33257
// exit ;
33255: GO 33497
// index := GetElementIndex ( hackTanks , hack ) ;
33257: LD_ADDR_VAR 0 4
33261: PUSH
33262: LD_EXP 102
33266: PPUSH
33267: LD_VAR 0 1
33271: PPUSH
33272: CALL 40366 0 2
33276: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
33277: LD_ADDR_VAR 0 3
33281: PUSH
33282: DOUBLE
33283: LD_EXP 103
33287: PUSH
33288: LD_VAR 0 4
33292: ARRAY
33293: INC
33294: ST_TO_ADDR
33295: LD_INT 1
33297: PUSH
33298: FOR_DOWNTO
33299: IFFALSE 33471
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
33301: LD_ADDR_VAR 0 5
33305: PUSH
33306: LD_EXP 103
33310: PUSH
33311: LD_VAR 0 4
33315: ARRAY
33316: PUSH
33317: LD_VAR 0 3
33321: ARRAY
33322: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
33323: LD_VAR 0 5
33327: PUSH
33328: LD_INT 1
33330: ARRAY
33331: PPUSH
33332: CALL_OW 302
33336: NOT
33337: PUSH
33338: LD_VAR 0 5
33342: PUSH
33343: LD_INT 1
33345: ARRAY
33346: PPUSH
33347: CALL_OW 255
33351: PUSH
33352: LD_VAR 0 1
33356: PPUSH
33357: CALL_OW 255
33361: NONEQUAL
33362: OR
33363: IFFALSE 33469
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
33365: LD_VAR 0 5
33369: PUSH
33370: LD_INT 1
33372: ARRAY
33373: PPUSH
33374: CALL_OW 305
33378: PUSH
33379: LD_VAR 0 5
33383: PUSH
33384: LD_INT 1
33386: ARRAY
33387: PPUSH
33388: CALL_OW 255
33392: PUSH
33393: LD_VAR 0 1
33397: PPUSH
33398: CALL_OW 255
33402: EQUAL
33403: AND
33404: IFFALSE 33428
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
33406: LD_VAR 0 5
33410: PUSH
33411: LD_INT 1
33413: ARRAY
33414: PPUSH
33415: LD_VAR 0 5
33419: PUSH
33420: LD_INT 2
33422: ARRAY
33423: PPUSH
33424: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
33428: LD_ADDR_EXP 103
33432: PUSH
33433: LD_EXP 103
33437: PPUSH
33438: LD_VAR 0 4
33442: PPUSH
33443: LD_EXP 103
33447: PUSH
33448: LD_VAR 0 4
33452: ARRAY
33453: PPUSH
33454: LD_VAR 0 3
33458: PPUSH
33459: CALL_OW 3
33463: PPUSH
33464: CALL_OW 1
33468: ST_TO_ADDR
// end ; end ;
33469: GO 33298
33471: POP
33472: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33473: LD_VAR 0 1
33477: PPUSH
33478: LD_EXP 103
33482: PUSH
33483: LD_VAR 0 4
33487: ARRAY
33488: PUSH
33489: LD_INT 0
33491: PLUS
33492: PPUSH
33493: CALL_OW 505
// end ;
33497: LD_VAR 0 2
33501: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
33502: LD_INT 0
33504: PPUSH
33505: PPUSH
33506: PPUSH
33507: PPUSH
// if not hack in hackTanks then
33508: LD_VAR 0 1
33512: PUSH
33513: LD_EXP 102
33517: IN
33518: NOT
33519: IFFALSE 33523
// exit ;
33521: GO 33608
// index := GetElementIndex ( hackTanks , hack ) ;
33523: LD_ADDR_VAR 0 5
33527: PUSH
33528: LD_EXP 102
33532: PPUSH
33533: LD_VAR 0 1
33537: PPUSH
33538: CALL 40366 0 2
33542: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
33543: LD_ADDR_VAR 0 4
33547: PUSH
33548: DOUBLE
33549: LD_INT 1
33551: DEC
33552: ST_TO_ADDR
33553: LD_EXP 103
33557: PUSH
33558: LD_VAR 0 5
33562: ARRAY
33563: PUSH
33564: FOR_TO
33565: IFFALSE 33606
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
33567: LD_EXP 103
33571: PUSH
33572: LD_VAR 0 5
33576: ARRAY
33577: PUSH
33578: LD_VAR 0 4
33582: ARRAY
33583: PUSH
33584: LD_INT 1
33586: ARRAY
33587: PUSH
33588: LD_VAR 0 2
33592: EQUAL
33593: IFFALSE 33604
// KillUnit ( vehicle ) ;
33595: LD_VAR 0 2
33599: PPUSH
33600: CALL_OW 66
33604: GO 33564
33606: POP
33607: POP
// end ;
33608: LD_VAR 0 3
33612: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
33613: LD_EXP 107
33617: NOT
33618: IFFALSE 33653
33620: GO 33622
33622: DISABLE
// begin initMiner := true ;
33623: LD_ADDR_EXP 107
33627: PUSH
33628: LD_INT 1
33630: ST_TO_ADDR
// minersList := [ ] ;
33631: LD_ADDR_EXP 108
33635: PUSH
33636: EMPTY
33637: ST_TO_ADDR
// minerMinesList := [ ] ;
33638: LD_ADDR_EXP 109
33642: PUSH
33643: EMPTY
33644: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
33645: LD_ADDR_EXP 110
33649: PUSH
33650: LD_INT 5
33652: ST_TO_ADDR
// end ;
33653: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
33654: LD_EXP 107
33658: PUSH
33659: LD_INT 34
33661: PUSH
33662: LD_INT 81
33664: PUSH
33665: EMPTY
33666: LIST
33667: LIST
33668: PPUSH
33669: CALL_OW 69
33673: AND
33674: IFFALSE 34135
33676: GO 33678
33678: DISABLE
33679: LD_INT 0
33681: PPUSH
33682: PPUSH
33683: PPUSH
33684: PPUSH
// begin enable ;
33685: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
33686: LD_ADDR_VAR 0 1
33690: PUSH
33691: LD_INT 34
33693: PUSH
33694: LD_INT 81
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PPUSH
33701: CALL_OW 69
33705: PUSH
33706: FOR_IN
33707: IFFALSE 33779
// begin if not i in minersList then
33709: LD_VAR 0 1
33713: PUSH
33714: LD_EXP 108
33718: IN
33719: NOT
33720: IFFALSE 33777
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
33722: LD_ADDR_EXP 108
33726: PUSH
33727: LD_EXP 108
33731: PPUSH
33732: LD_EXP 108
33736: PUSH
33737: LD_INT 1
33739: PLUS
33740: PPUSH
33741: LD_VAR 0 1
33745: PPUSH
33746: CALL_OW 1
33750: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
33751: LD_ADDR_EXP 109
33755: PUSH
33756: LD_EXP 109
33760: PPUSH
33761: LD_EXP 109
33765: PUSH
33766: LD_INT 1
33768: PLUS
33769: PPUSH
33770: EMPTY
33771: PPUSH
33772: CALL_OW 1
33776: ST_TO_ADDR
// end end ;
33777: GO 33706
33779: POP
33780: POP
// for i := minerMinesList downto 1 do
33781: LD_ADDR_VAR 0 1
33785: PUSH
33786: DOUBLE
33787: LD_EXP 109
33791: INC
33792: ST_TO_ADDR
33793: LD_INT 1
33795: PUSH
33796: FOR_DOWNTO
33797: IFFALSE 34133
// begin if IsLive ( minersList [ i ] ) then
33799: LD_EXP 108
33803: PUSH
33804: LD_VAR 0 1
33808: ARRAY
33809: PPUSH
33810: CALL_OW 300
33814: IFFALSE 33842
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
33816: LD_EXP 108
33820: PUSH
33821: LD_VAR 0 1
33825: ARRAY
33826: PPUSH
33827: LD_EXP 109
33831: PUSH
33832: LD_VAR 0 1
33836: ARRAY
33837: PPUSH
33838: CALL_OW 505
// if not minerMinesList [ i ] then
33842: LD_EXP 109
33846: PUSH
33847: LD_VAR 0 1
33851: ARRAY
33852: NOT
33853: IFFALSE 33857
// continue ;
33855: GO 33796
// for j := minerMinesList [ i ] downto 1 do
33857: LD_ADDR_VAR 0 2
33861: PUSH
33862: DOUBLE
33863: LD_EXP 109
33867: PUSH
33868: LD_VAR 0 1
33872: ARRAY
33873: INC
33874: ST_TO_ADDR
33875: LD_INT 1
33877: PUSH
33878: FOR_DOWNTO
33879: IFFALSE 34129
// begin side := GetSide ( minersList [ i ] ) ;
33881: LD_ADDR_VAR 0 3
33885: PUSH
33886: LD_EXP 108
33890: PUSH
33891: LD_VAR 0 1
33895: ARRAY
33896: PPUSH
33897: CALL_OW 255
33901: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
33902: LD_ADDR_VAR 0 4
33906: PUSH
33907: LD_EXP 109
33911: PUSH
33912: LD_VAR 0 1
33916: ARRAY
33917: PUSH
33918: LD_VAR 0 2
33922: ARRAY
33923: PUSH
33924: LD_INT 1
33926: ARRAY
33927: PPUSH
33928: LD_EXP 109
33932: PUSH
33933: LD_VAR 0 1
33937: ARRAY
33938: PUSH
33939: LD_VAR 0 2
33943: ARRAY
33944: PUSH
33945: LD_INT 2
33947: ARRAY
33948: PPUSH
33949: CALL_OW 428
33953: ST_TO_ADDR
// if not tmp then
33954: LD_VAR 0 4
33958: NOT
33959: IFFALSE 33963
// continue ;
33961: GO 33878
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
33963: LD_VAR 0 4
33967: PUSH
33968: LD_INT 81
33970: PUSH
33971: LD_VAR 0 3
33975: PUSH
33976: EMPTY
33977: LIST
33978: LIST
33979: PPUSH
33980: CALL_OW 69
33984: IN
33985: PUSH
33986: LD_EXP 109
33990: PUSH
33991: LD_VAR 0 1
33995: ARRAY
33996: PUSH
33997: LD_VAR 0 2
34001: ARRAY
34002: PUSH
34003: LD_INT 1
34005: ARRAY
34006: PPUSH
34007: LD_EXP 109
34011: PUSH
34012: LD_VAR 0 1
34016: ARRAY
34017: PUSH
34018: LD_VAR 0 2
34022: ARRAY
34023: PUSH
34024: LD_INT 2
34026: ARRAY
34027: PPUSH
34028: CALL_OW 458
34032: AND
34033: IFFALSE 34127
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
34035: LD_EXP 109
34039: PUSH
34040: LD_VAR 0 1
34044: ARRAY
34045: PUSH
34046: LD_VAR 0 2
34050: ARRAY
34051: PUSH
34052: LD_INT 1
34054: ARRAY
34055: PPUSH
34056: LD_EXP 109
34060: PUSH
34061: LD_VAR 0 1
34065: ARRAY
34066: PUSH
34067: LD_VAR 0 2
34071: ARRAY
34072: PUSH
34073: LD_INT 2
34075: ARRAY
34076: PPUSH
34077: LD_VAR 0 3
34081: PPUSH
34082: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
34086: LD_ADDR_EXP 109
34090: PUSH
34091: LD_EXP 109
34095: PPUSH
34096: LD_VAR 0 1
34100: PPUSH
34101: LD_EXP 109
34105: PUSH
34106: LD_VAR 0 1
34110: ARRAY
34111: PPUSH
34112: LD_VAR 0 2
34116: PPUSH
34117: CALL_OW 3
34121: PPUSH
34122: CALL_OW 1
34126: ST_TO_ADDR
// end ; end ;
34127: GO 33878
34129: POP
34130: POP
// end ;
34131: GO 33796
34133: POP
34134: POP
// end ;
34135: PPOPN 4
34137: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
34138: LD_INT 0
34140: PPUSH
34141: PPUSH
// result := false ;
34142: LD_ADDR_VAR 0 4
34146: PUSH
34147: LD_INT 0
34149: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
34150: LD_VAR 0 1
34154: PPUSH
34155: CALL_OW 264
34159: PUSH
34160: LD_INT 81
34162: EQUAL
34163: NOT
34164: IFFALSE 34168
// exit ;
34166: GO 34408
// index := GetElementIndex ( minersList , unit ) ;
34168: LD_ADDR_VAR 0 5
34172: PUSH
34173: LD_EXP 108
34177: PPUSH
34178: LD_VAR 0 1
34182: PPUSH
34183: CALL 40366 0 2
34187: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
34188: LD_EXP 109
34192: PUSH
34193: LD_VAR 0 5
34197: ARRAY
34198: PUSH
34199: LD_EXP 110
34203: GREATEREQUAL
34204: IFFALSE 34208
// exit ;
34206: GO 34408
// ComMoveXY ( unit , x , y ) ;
34208: LD_VAR 0 1
34212: PPUSH
34213: LD_VAR 0 2
34217: PPUSH
34218: LD_VAR 0 3
34222: PPUSH
34223: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
34227: LD_INT 35
34229: PPUSH
34230: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
34234: LD_VAR 0 1
34238: PPUSH
34239: LD_VAR 0 2
34243: PPUSH
34244: LD_VAR 0 3
34248: PPUSH
34249: CALL 71750 0 3
34253: NOT
34254: PUSH
34255: LD_VAR 0 1
34259: PPUSH
34260: CALL_OW 314
34264: AND
34265: IFFALSE 34269
// exit ;
34267: GO 34408
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
34269: LD_VAR 0 2
34273: PPUSH
34274: LD_VAR 0 3
34278: PPUSH
34279: CALL_OW 428
34283: PUSH
34284: LD_VAR 0 1
34288: EQUAL
34289: PUSH
34290: LD_VAR 0 1
34294: PPUSH
34295: CALL_OW 314
34299: NOT
34300: AND
34301: IFFALSE 34227
// PlaySoundXY ( x , y , PlantMine ) ;
34303: LD_VAR 0 2
34307: PPUSH
34308: LD_VAR 0 3
34312: PPUSH
34313: LD_STRING PlantMine
34315: PPUSH
34316: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
34320: LD_VAR 0 2
34324: PPUSH
34325: LD_VAR 0 3
34329: PPUSH
34330: LD_VAR 0 1
34334: PPUSH
34335: CALL_OW 255
34339: PPUSH
34340: LD_INT 0
34342: PPUSH
34343: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
34347: LD_ADDR_EXP 109
34351: PUSH
34352: LD_EXP 109
34356: PPUSH
34357: LD_VAR 0 5
34361: PUSH
34362: LD_EXP 109
34366: PUSH
34367: LD_VAR 0 5
34371: ARRAY
34372: PUSH
34373: LD_INT 1
34375: PLUS
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: PPUSH
34381: LD_VAR 0 2
34385: PUSH
34386: LD_VAR 0 3
34390: PUSH
34391: EMPTY
34392: LIST
34393: LIST
34394: PPUSH
34395: CALL 40581 0 3
34399: ST_TO_ADDR
// result := true ;
34400: LD_ADDR_VAR 0 4
34404: PUSH
34405: LD_INT 1
34407: ST_TO_ADDR
// end ;
34408: LD_VAR 0 4
34412: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
34413: LD_INT 0
34415: PPUSH
34416: PPUSH
34417: PPUSH
// if not unit in minersList then
34418: LD_VAR 0 1
34422: PUSH
34423: LD_EXP 108
34427: IN
34428: NOT
34429: IFFALSE 34433
// exit ;
34431: GO 34825
// index := GetElementIndex ( minersList , unit ) ;
34433: LD_ADDR_VAR 0 6
34437: PUSH
34438: LD_EXP 108
34442: PPUSH
34443: LD_VAR 0 1
34447: PPUSH
34448: CALL 40366 0 2
34452: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
34453: LD_ADDR_VAR 0 5
34457: PUSH
34458: DOUBLE
34459: LD_EXP 109
34463: PUSH
34464: LD_VAR 0 6
34468: ARRAY
34469: INC
34470: ST_TO_ADDR
34471: LD_INT 1
34473: PUSH
34474: FOR_DOWNTO
34475: IFFALSE 34636
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
34477: LD_EXP 109
34481: PUSH
34482: LD_VAR 0 6
34486: ARRAY
34487: PUSH
34488: LD_VAR 0 5
34492: ARRAY
34493: PUSH
34494: LD_INT 1
34496: ARRAY
34497: PUSH
34498: LD_VAR 0 2
34502: EQUAL
34503: PUSH
34504: LD_EXP 109
34508: PUSH
34509: LD_VAR 0 6
34513: ARRAY
34514: PUSH
34515: LD_VAR 0 5
34519: ARRAY
34520: PUSH
34521: LD_INT 2
34523: ARRAY
34524: PUSH
34525: LD_VAR 0 3
34529: EQUAL
34530: AND
34531: IFFALSE 34634
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
34533: LD_EXP 109
34537: PUSH
34538: LD_VAR 0 6
34542: ARRAY
34543: PUSH
34544: LD_VAR 0 5
34548: ARRAY
34549: PUSH
34550: LD_INT 1
34552: ARRAY
34553: PPUSH
34554: LD_EXP 109
34558: PUSH
34559: LD_VAR 0 6
34563: ARRAY
34564: PUSH
34565: LD_VAR 0 5
34569: ARRAY
34570: PUSH
34571: LD_INT 2
34573: ARRAY
34574: PPUSH
34575: LD_VAR 0 1
34579: PPUSH
34580: CALL_OW 255
34584: PPUSH
34585: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
34589: LD_ADDR_EXP 109
34593: PUSH
34594: LD_EXP 109
34598: PPUSH
34599: LD_VAR 0 6
34603: PPUSH
34604: LD_EXP 109
34608: PUSH
34609: LD_VAR 0 6
34613: ARRAY
34614: PPUSH
34615: LD_VAR 0 5
34619: PPUSH
34620: CALL_OW 3
34624: PPUSH
34625: CALL_OW 1
34629: ST_TO_ADDR
// exit ;
34630: POP
34631: POP
34632: GO 34825
// end ; end ;
34634: GO 34474
34636: POP
34637: POP
// for i := minerMinesList [ index ] downto 1 do
34638: LD_ADDR_VAR 0 5
34642: PUSH
34643: DOUBLE
34644: LD_EXP 109
34648: PUSH
34649: LD_VAR 0 6
34653: ARRAY
34654: INC
34655: ST_TO_ADDR
34656: LD_INT 1
34658: PUSH
34659: FOR_DOWNTO
34660: IFFALSE 34823
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
34662: LD_EXP 109
34666: PUSH
34667: LD_VAR 0 6
34671: ARRAY
34672: PUSH
34673: LD_VAR 0 5
34677: ARRAY
34678: PUSH
34679: LD_INT 1
34681: ARRAY
34682: PPUSH
34683: LD_EXP 109
34687: PUSH
34688: LD_VAR 0 6
34692: ARRAY
34693: PUSH
34694: LD_VAR 0 5
34698: ARRAY
34699: PUSH
34700: LD_INT 2
34702: ARRAY
34703: PPUSH
34704: LD_VAR 0 2
34708: PPUSH
34709: LD_VAR 0 3
34713: PPUSH
34714: CALL_OW 298
34718: PUSH
34719: LD_INT 6
34721: LESS
34722: IFFALSE 34821
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
34724: LD_EXP 109
34728: PUSH
34729: LD_VAR 0 6
34733: ARRAY
34734: PUSH
34735: LD_VAR 0 5
34739: ARRAY
34740: PUSH
34741: LD_INT 1
34743: ARRAY
34744: PPUSH
34745: LD_EXP 109
34749: PUSH
34750: LD_VAR 0 6
34754: ARRAY
34755: PUSH
34756: LD_VAR 0 5
34760: ARRAY
34761: PUSH
34762: LD_INT 2
34764: ARRAY
34765: PPUSH
34766: LD_VAR 0 1
34770: PPUSH
34771: CALL_OW 255
34775: PPUSH
34776: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
34780: LD_ADDR_EXP 109
34784: PUSH
34785: LD_EXP 109
34789: PPUSH
34790: LD_VAR 0 6
34794: PPUSH
34795: LD_EXP 109
34799: PUSH
34800: LD_VAR 0 6
34804: ARRAY
34805: PPUSH
34806: LD_VAR 0 5
34810: PPUSH
34811: CALL_OW 3
34815: PPUSH
34816: CALL_OW 1
34820: ST_TO_ADDR
// end ; end ;
34821: GO 34659
34823: POP
34824: POP
// end ;
34825: LD_VAR 0 4
34829: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
34830: LD_INT 0
34832: PPUSH
34833: PPUSH
34834: PPUSH
34835: PPUSH
34836: PPUSH
34837: PPUSH
34838: PPUSH
34839: PPUSH
34840: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
34841: LD_VAR 0 1
34845: PPUSH
34846: CALL_OW 264
34850: PUSH
34851: LD_INT 81
34853: EQUAL
34854: NOT
34855: PUSH
34856: LD_VAR 0 1
34860: PUSH
34861: LD_EXP 108
34865: IN
34866: NOT
34867: OR
34868: IFFALSE 34872
// exit ;
34870: GO 35194
// index := GetElementIndex ( minersList , unit ) ;
34872: LD_ADDR_VAR 0 6
34876: PUSH
34877: LD_EXP 108
34881: PPUSH
34882: LD_VAR 0 1
34886: PPUSH
34887: CALL 40366 0 2
34891: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
34892: LD_ADDR_VAR 0 8
34896: PUSH
34897: LD_EXP 110
34901: PUSH
34902: LD_EXP 109
34906: PUSH
34907: LD_VAR 0 6
34911: ARRAY
34912: MINUS
34913: ST_TO_ADDR
// if not minesFreeAmount then
34914: LD_VAR 0 8
34918: NOT
34919: IFFALSE 34923
// exit ;
34921: GO 35194
// tmp := [ ] ;
34923: LD_ADDR_VAR 0 7
34927: PUSH
34928: EMPTY
34929: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
34930: LD_ADDR_VAR 0 5
34934: PUSH
34935: DOUBLE
34936: LD_INT 1
34938: DEC
34939: ST_TO_ADDR
34940: LD_VAR 0 8
34944: PUSH
34945: FOR_TO
34946: IFFALSE 35141
// begin _d := rand ( 0 , 5 ) ;
34948: LD_ADDR_VAR 0 11
34952: PUSH
34953: LD_INT 0
34955: PPUSH
34956: LD_INT 5
34958: PPUSH
34959: CALL_OW 12
34963: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
34964: LD_ADDR_VAR 0 12
34968: PUSH
34969: LD_INT 2
34971: PPUSH
34972: LD_INT 6
34974: PPUSH
34975: CALL_OW 12
34979: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
34980: LD_ADDR_VAR 0 9
34984: PUSH
34985: LD_VAR 0 2
34989: PPUSH
34990: LD_VAR 0 11
34994: PPUSH
34995: LD_VAR 0 12
34999: PPUSH
35000: CALL_OW 272
35004: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
35005: LD_ADDR_VAR 0 10
35009: PUSH
35010: LD_VAR 0 3
35014: PPUSH
35015: LD_VAR 0 11
35019: PPUSH
35020: LD_VAR 0 12
35024: PPUSH
35025: CALL_OW 273
35029: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
35030: LD_VAR 0 9
35034: PPUSH
35035: LD_VAR 0 10
35039: PPUSH
35040: CALL_OW 488
35044: PUSH
35045: LD_VAR 0 9
35049: PUSH
35050: LD_VAR 0 10
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: PUSH
35059: LD_VAR 0 7
35063: IN
35064: NOT
35065: AND
35066: PUSH
35067: LD_VAR 0 9
35071: PPUSH
35072: LD_VAR 0 10
35076: PPUSH
35077: CALL_OW 458
35081: NOT
35082: AND
35083: IFFALSE 35125
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
35085: LD_ADDR_VAR 0 7
35089: PUSH
35090: LD_VAR 0 7
35094: PPUSH
35095: LD_VAR 0 7
35099: PUSH
35100: LD_INT 1
35102: PLUS
35103: PPUSH
35104: LD_VAR 0 9
35108: PUSH
35109: LD_VAR 0 10
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: PPUSH
35118: CALL_OW 1
35122: ST_TO_ADDR
35123: GO 35139
// i := i - 1 ;
35125: LD_ADDR_VAR 0 5
35129: PUSH
35130: LD_VAR 0 5
35134: PUSH
35135: LD_INT 1
35137: MINUS
35138: ST_TO_ADDR
// end ;
35139: GO 34945
35141: POP
35142: POP
// for i in tmp do
35143: LD_ADDR_VAR 0 5
35147: PUSH
35148: LD_VAR 0 7
35152: PUSH
35153: FOR_IN
35154: IFFALSE 35192
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
35156: LD_VAR 0 1
35160: PPUSH
35161: LD_VAR 0 5
35165: PUSH
35166: LD_INT 1
35168: ARRAY
35169: PPUSH
35170: LD_VAR 0 5
35174: PUSH
35175: LD_INT 2
35177: ARRAY
35178: PPUSH
35179: CALL 34138 0 3
35183: NOT
35184: IFFALSE 35190
// exit ;
35186: POP
35187: POP
35188: GO 35194
35190: GO 35153
35192: POP
35193: POP
// end ;
35194: LD_VAR 0 4
35198: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
35199: LD_INT 0
35201: PPUSH
35202: PPUSH
35203: PPUSH
35204: PPUSH
35205: PPUSH
35206: PPUSH
35207: PPUSH
// if not GetClass ( unit ) = class_sniper then
35208: LD_VAR 0 1
35212: PPUSH
35213: CALL_OW 257
35217: PUSH
35218: LD_INT 5
35220: EQUAL
35221: NOT
35222: IFFALSE 35226
// exit ;
35224: GO 35614
// dist := 8 ;
35226: LD_ADDR_VAR 0 5
35230: PUSH
35231: LD_INT 8
35233: ST_TO_ADDR
// viewRange := 12 ;
35234: LD_ADDR_VAR 0 7
35238: PUSH
35239: LD_INT 12
35241: ST_TO_ADDR
// side := GetSide ( unit ) ;
35242: LD_ADDR_VAR 0 6
35246: PUSH
35247: LD_VAR 0 1
35251: PPUSH
35252: CALL_OW 255
35256: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
35257: LD_INT 61
35259: PPUSH
35260: LD_VAR 0 6
35264: PPUSH
35265: CALL_OW 321
35269: PUSH
35270: LD_INT 2
35272: EQUAL
35273: IFFALSE 35283
// viewRange := 16 ;
35275: LD_ADDR_VAR 0 7
35279: PUSH
35280: LD_INT 16
35282: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
35283: LD_VAR 0 1
35287: PPUSH
35288: LD_VAR 0 2
35292: PPUSH
35293: LD_VAR 0 3
35297: PPUSH
35298: CALL_OW 297
35302: PUSH
35303: LD_VAR 0 5
35307: GREATER
35308: IFFALSE 35387
// begin ComMoveXY ( unit , x , y ) ;
35310: LD_VAR 0 1
35314: PPUSH
35315: LD_VAR 0 2
35319: PPUSH
35320: LD_VAR 0 3
35324: PPUSH
35325: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35329: LD_INT 35
35331: PPUSH
35332: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
35336: LD_VAR 0 1
35340: PPUSH
35341: LD_VAR 0 2
35345: PPUSH
35346: LD_VAR 0 3
35350: PPUSH
35351: CALL 71750 0 3
35355: NOT
35356: IFFALSE 35360
// exit ;
35358: GO 35614
// until GetDistUnitXY ( unit , x , y ) < dist ;
35360: LD_VAR 0 1
35364: PPUSH
35365: LD_VAR 0 2
35369: PPUSH
35370: LD_VAR 0 3
35374: PPUSH
35375: CALL_OW 297
35379: PUSH
35380: LD_VAR 0 5
35384: LESS
35385: IFFALSE 35329
// end ; ComTurnXY ( unit , x , y ) ;
35387: LD_VAR 0 1
35391: PPUSH
35392: LD_VAR 0 2
35396: PPUSH
35397: LD_VAR 0 3
35401: PPUSH
35402: CALL_OW 118
// wait ( 5 ) ;
35406: LD_INT 5
35408: PPUSH
35409: CALL_OW 67
// _d := GetDir ( unit ) ;
35413: LD_ADDR_VAR 0 10
35417: PUSH
35418: LD_VAR 0 1
35422: PPUSH
35423: CALL_OW 254
35427: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
35428: LD_ADDR_VAR 0 8
35432: PUSH
35433: LD_VAR 0 1
35437: PPUSH
35438: CALL_OW 250
35442: PPUSH
35443: LD_VAR 0 10
35447: PPUSH
35448: LD_VAR 0 5
35452: PPUSH
35453: CALL_OW 272
35457: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
35458: LD_ADDR_VAR 0 9
35462: PUSH
35463: LD_VAR 0 1
35467: PPUSH
35468: CALL_OW 251
35472: PPUSH
35473: LD_VAR 0 10
35477: PPUSH
35478: LD_VAR 0 5
35482: PPUSH
35483: CALL_OW 273
35487: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35488: LD_VAR 0 8
35492: PPUSH
35493: LD_VAR 0 9
35497: PPUSH
35498: CALL_OW 488
35502: NOT
35503: IFFALSE 35507
// exit ;
35505: GO 35614
// ComAnimCustom ( unit , 1 ) ;
35507: LD_VAR 0 1
35511: PPUSH
35512: LD_INT 1
35514: PPUSH
35515: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
35519: LD_VAR 0 8
35523: PPUSH
35524: LD_VAR 0 9
35528: PPUSH
35529: LD_VAR 0 6
35533: PPUSH
35534: LD_VAR 0 7
35538: PPUSH
35539: CALL_OW 330
// repeat wait ( 1 ) ;
35543: LD_INT 1
35545: PPUSH
35546: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
35550: LD_VAR 0 1
35554: PPUSH
35555: CALL_OW 316
35559: PUSH
35560: LD_VAR 0 1
35564: PPUSH
35565: CALL_OW 314
35569: OR
35570: PUSH
35571: LD_VAR 0 1
35575: PPUSH
35576: CALL_OW 302
35580: NOT
35581: OR
35582: PUSH
35583: LD_VAR 0 1
35587: PPUSH
35588: CALL_OW 301
35592: OR
35593: IFFALSE 35543
// RemoveSeeing ( _x , _y , side ) ;
35595: LD_VAR 0 8
35599: PPUSH
35600: LD_VAR 0 9
35604: PPUSH
35605: LD_VAR 0 6
35609: PPUSH
35610: CALL_OW 331
// end ; end_of_file
35614: LD_VAR 0 4
35618: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
35619: LD_INT 0
35621: PPUSH
35622: PPUSH
// if exist_mode then
35623: LD_VAR 0 2
35627: IFFALSE 35652
// unit := CreateCharacter ( prefix & ident ) else
35629: LD_ADDR_VAR 0 5
35633: PUSH
35634: LD_VAR 0 3
35638: PUSH
35639: LD_VAR 0 1
35643: STR
35644: PPUSH
35645: CALL_OW 34
35649: ST_TO_ADDR
35650: GO 35667
// unit := NewCharacter ( ident ) ;
35652: LD_ADDR_VAR 0 5
35656: PUSH
35657: LD_VAR 0 1
35661: PPUSH
35662: CALL_OW 25
35666: ST_TO_ADDR
// result := unit ;
35667: LD_ADDR_VAR 0 4
35671: PUSH
35672: LD_VAR 0 5
35676: ST_TO_ADDR
// end ;
35677: LD_VAR 0 4
35681: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
35682: LD_INT 0
35684: PPUSH
35685: PPUSH
// if not side or not nation then
35686: LD_VAR 0 1
35690: NOT
35691: PUSH
35692: LD_VAR 0 2
35696: NOT
35697: OR
35698: IFFALSE 35702
// exit ;
35700: GO 36470
// case nation of nation_american :
35702: LD_VAR 0 2
35706: PUSH
35707: LD_INT 1
35709: DOUBLE
35710: EQUAL
35711: IFTRUE 35715
35713: GO 35929
35715: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
35716: LD_ADDR_VAR 0 4
35720: PUSH
35721: LD_INT 35
35723: PUSH
35724: LD_INT 45
35726: PUSH
35727: LD_INT 46
35729: PUSH
35730: LD_INT 47
35732: PUSH
35733: LD_INT 82
35735: PUSH
35736: LD_INT 83
35738: PUSH
35739: LD_INT 84
35741: PUSH
35742: LD_INT 85
35744: PUSH
35745: LD_INT 86
35747: PUSH
35748: LD_INT 1
35750: PUSH
35751: LD_INT 2
35753: PUSH
35754: LD_INT 6
35756: PUSH
35757: LD_INT 15
35759: PUSH
35760: LD_INT 16
35762: PUSH
35763: LD_INT 7
35765: PUSH
35766: LD_INT 12
35768: PUSH
35769: LD_INT 13
35771: PUSH
35772: LD_INT 10
35774: PUSH
35775: LD_INT 14
35777: PUSH
35778: LD_INT 20
35780: PUSH
35781: LD_INT 21
35783: PUSH
35784: LD_INT 22
35786: PUSH
35787: LD_INT 25
35789: PUSH
35790: LD_INT 32
35792: PUSH
35793: LD_INT 27
35795: PUSH
35796: LD_INT 36
35798: PUSH
35799: LD_INT 69
35801: PUSH
35802: LD_INT 39
35804: PUSH
35805: LD_INT 34
35807: PUSH
35808: LD_INT 40
35810: PUSH
35811: LD_INT 48
35813: PUSH
35814: LD_INT 49
35816: PUSH
35817: LD_INT 50
35819: PUSH
35820: LD_INT 51
35822: PUSH
35823: LD_INT 52
35825: PUSH
35826: LD_INT 53
35828: PUSH
35829: LD_INT 54
35831: PUSH
35832: LD_INT 55
35834: PUSH
35835: LD_INT 56
35837: PUSH
35838: LD_INT 57
35840: PUSH
35841: LD_INT 58
35843: PUSH
35844: LD_INT 59
35846: PUSH
35847: LD_INT 60
35849: PUSH
35850: LD_INT 61
35852: PUSH
35853: LD_INT 62
35855: PUSH
35856: LD_INT 80
35858: PUSH
35859: LD_INT 82
35861: PUSH
35862: LD_INT 83
35864: PUSH
35865: LD_INT 84
35867: PUSH
35868: LD_INT 85
35870: PUSH
35871: LD_INT 86
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: LIST
35878: LIST
35879: LIST
35880: LIST
35881: LIST
35882: LIST
35883: LIST
35884: LIST
35885: LIST
35886: LIST
35887: LIST
35888: LIST
35889: LIST
35890: LIST
35891: LIST
35892: LIST
35893: LIST
35894: LIST
35895: LIST
35896: LIST
35897: LIST
35898: LIST
35899: LIST
35900: LIST
35901: LIST
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: LIST
35908: LIST
35909: LIST
35910: LIST
35911: LIST
35912: LIST
35913: LIST
35914: LIST
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: LIST
35922: LIST
35923: LIST
35924: LIST
35925: LIST
35926: ST_TO_ADDR
35927: GO 36394
35929: LD_INT 2
35931: DOUBLE
35932: EQUAL
35933: IFTRUE 35937
35935: GO 36163
35937: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
35938: LD_ADDR_VAR 0 4
35942: PUSH
35943: LD_INT 35
35945: PUSH
35946: LD_INT 45
35948: PUSH
35949: LD_INT 46
35951: PUSH
35952: LD_INT 47
35954: PUSH
35955: LD_INT 82
35957: PUSH
35958: LD_INT 83
35960: PUSH
35961: LD_INT 84
35963: PUSH
35964: LD_INT 85
35966: PUSH
35967: LD_INT 87
35969: PUSH
35970: LD_INT 70
35972: PUSH
35973: LD_INT 1
35975: PUSH
35976: LD_INT 11
35978: PUSH
35979: LD_INT 3
35981: PUSH
35982: LD_INT 4
35984: PUSH
35985: LD_INT 5
35987: PUSH
35988: LD_INT 6
35990: PUSH
35991: LD_INT 15
35993: PUSH
35994: LD_INT 18
35996: PUSH
35997: LD_INT 7
35999: PUSH
36000: LD_INT 17
36002: PUSH
36003: LD_INT 8
36005: PUSH
36006: LD_INT 20
36008: PUSH
36009: LD_INT 21
36011: PUSH
36012: LD_INT 22
36014: PUSH
36015: LD_INT 72
36017: PUSH
36018: LD_INT 26
36020: PUSH
36021: LD_INT 69
36023: PUSH
36024: LD_INT 39
36026: PUSH
36027: LD_INT 40
36029: PUSH
36030: LD_INT 41
36032: PUSH
36033: LD_INT 42
36035: PUSH
36036: LD_INT 43
36038: PUSH
36039: LD_INT 48
36041: PUSH
36042: LD_INT 49
36044: PUSH
36045: LD_INT 50
36047: PUSH
36048: LD_INT 51
36050: PUSH
36051: LD_INT 52
36053: PUSH
36054: LD_INT 53
36056: PUSH
36057: LD_INT 54
36059: PUSH
36060: LD_INT 55
36062: PUSH
36063: LD_INT 56
36065: PUSH
36066: LD_INT 60
36068: PUSH
36069: LD_INT 61
36071: PUSH
36072: LD_INT 62
36074: PUSH
36075: LD_INT 66
36077: PUSH
36078: LD_INT 67
36080: PUSH
36081: LD_INT 68
36083: PUSH
36084: LD_INT 81
36086: PUSH
36087: LD_INT 82
36089: PUSH
36090: LD_INT 83
36092: PUSH
36093: LD_INT 84
36095: PUSH
36096: LD_INT 85
36098: PUSH
36099: LD_INT 87
36101: PUSH
36102: LD_INT 88
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: LIST
36109: LIST
36110: LIST
36111: LIST
36112: LIST
36113: LIST
36114: LIST
36115: LIST
36116: LIST
36117: LIST
36118: LIST
36119: LIST
36120: LIST
36121: LIST
36122: LIST
36123: LIST
36124: LIST
36125: LIST
36126: LIST
36127: LIST
36128: LIST
36129: LIST
36130: LIST
36131: LIST
36132: LIST
36133: LIST
36134: LIST
36135: LIST
36136: LIST
36137: LIST
36138: LIST
36139: LIST
36140: LIST
36141: LIST
36142: LIST
36143: LIST
36144: LIST
36145: LIST
36146: LIST
36147: LIST
36148: LIST
36149: LIST
36150: LIST
36151: LIST
36152: LIST
36153: LIST
36154: LIST
36155: LIST
36156: LIST
36157: LIST
36158: LIST
36159: LIST
36160: ST_TO_ADDR
36161: GO 36394
36163: LD_INT 3
36165: DOUBLE
36166: EQUAL
36167: IFTRUE 36171
36169: GO 36393
36171: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
36172: LD_ADDR_VAR 0 4
36176: PUSH
36177: LD_INT 46
36179: PUSH
36180: LD_INT 47
36182: PUSH
36183: LD_INT 1
36185: PUSH
36186: LD_INT 2
36188: PUSH
36189: LD_INT 82
36191: PUSH
36192: LD_INT 83
36194: PUSH
36195: LD_INT 84
36197: PUSH
36198: LD_INT 85
36200: PUSH
36201: LD_INT 86
36203: PUSH
36204: LD_INT 11
36206: PUSH
36207: LD_INT 9
36209: PUSH
36210: LD_INT 20
36212: PUSH
36213: LD_INT 19
36215: PUSH
36216: LD_INT 21
36218: PUSH
36219: LD_INT 24
36221: PUSH
36222: LD_INT 22
36224: PUSH
36225: LD_INT 25
36227: PUSH
36228: LD_INT 28
36230: PUSH
36231: LD_INT 29
36233: PUSH
36234: LD_INT 30
36236: PUSH
36237: LD_INT 31
36239: PUSH
36240: LD_INT 37
36242: PUSH
36243: LD_INT 38
36245: PUSH
36246: LD_INT 32
36248: PUSH
36249: LD_INT 27
36251: PUSH
36252: LD_INT 33
36254: PUSH
36255: LD_INT 69
36257: PUSH
36258: LD_INT 39
36260: PUSH
36261: LD_INT 34
36263: PUSH
36264: LD_INT 40
36266: PUSH
36267: LD_INT 71
36269: PUSH
36270: LD_INT 23
36272: PUSH
36273: LD_INT 44
36275: PUSH
36276: LD_INT 48
36278: PUSH
36279: LD_INT 49
36281: PUSH
36282: LD_INT 50
36284: PUSH
36285: LD_INT 51
36287: PUSH
36288: LD_INT 52
36290: PUSH
36291: LD_INT 53
36293: PUSH
36294: LD_INT 54
36296: PUSH
36297: LD_INT 55
36299: PUSH
36300: LD_INT 56
36302: PUSH
36303: LD_INT 57
36305: PUSH
36306: LD_INT 58
36308: PUSH
36309: LD_INT 59
36311: PUSH
36312: LD_INT 63
36314: PUSH
36315: LD_INT 64
36317: PUSH
36318: LD_INT 65
36320: PUSH
36321: LD_INT 82
36323: PUSH
36324: LD_INT 83
36326: PUSH
36327: LD_INT 84
36329: PUSH
36330: LD_INT 85
36332: PUSH
36333: LD_INT 86
36335: PUSH
36336: EMPTY
36337: LIST
36338: LIST
36339: LIST
36340: LIST
36341: LIST
36342: LIST
36343: LIST
36344: LIST
36345: LIST
36346: LIST
36347: LIST
36348: LIST
36349: LIST
36350: LIST
36351: LIST
36352: LIST
36353: LIST
36354: LIST
36355: LIST
36356: LIST
36357: LIST
36358: LIST
36359: LIST
36360: LIST
36361: LIST
36362: LIST
36363: LIST
36364: LIST
36365: LIST
36366: LIST
36367: LIST
36368: LIST
36369: LIST
36370: LIST
36371: LIST
36372: LIST
36373: LIST
36374: LIST
36375: LIST
36376: LIST
36377: LIST
36378: LIST
36379: LIST
36380: LIST
36381: LIST
36382: LIST
36383: LIST
36384: LIST
36385: LIST
36386: LIST
36387: LIST
36388: LIST
36389: LIST
36390: ST_TO_ADDR
36391: GO 36394
36393: POP
// if state > - 1 and state < 3 then
36394: LD_VAR 0 3
36398: PUSH
36399: LD_INT 1
36401: NEG
36402: GREATER
36403: PUSH
36404: LD_VAR 0 3
36408: PUSH
36409: LD_INT 3
36411: LESS
36412: AND
36413: IFFALSE 36470
// for i in result do
36415: LD_ADDR_VAR 0 5
36419: PUSH
36420: LD_VAR 0 4
36424: PUSH
36425: FOR_IN
36426: IFFALSE 36468
// if GetTech ( i , side ) <> state then
36428: LD_VAR 0 5
36432: PPUSH
36433: LD_VAR 0 1
36437: PPUSH
36438: CALL_OW 321
36442: PUSH
36443: LD_VAR 0 3
36447: NONEQUAL
36448: IFFALSE 36466
// result := result diff i ;
36450: LD_ADDR_VAR 0 4
36454: PUSH
36455: LD_VAR 0 4
36459: PUSH
36460: LD_VAR 0 5
36464: DIFF
36465: ST_TO_ADDR
36466: GO 36425
36468: POP
36469: POP
// end ;
36470: LD_VAR 0 4
36474: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
36475: LD_INT 0
36477: PPUSH
36478: PPUSH
36479: PPUSH
// result := true ;
36480: LD_ADDR_VAR 0 3
36484: PUSH
36485: LD_INT 1
36487: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
36488: LD_ADDR_VAR 0 5
36492: PUSH
36493: LD_VAR 0 2
36497: PPUSH
36498: CALL_OW 480
36502: ST_TO_ADDR
// if not tmp then
36503: LD_VAR 0 5
36507: NOT
36508: IFFALSE 36512
// exit ;
36510: GO 36561
// for i in tmp do
36512: LD_ADDR_VAR 0 4
36516: PUSH
36517: LD_VAR 0 5
36521: PUSH
36522: FOR_IN
36523: IFFALSE 36559
// if GetTech ( i , side ) <> state_researched then
36525: LD_VAR 0 4
36529: PPUSH
36530: LD_VAR 0 1
36534: PPUSH
36535: CALL_OW 321
36539: PUSH
36540: LD_INT 2
36542: NONEQUAL
36543: IFFALSE 36557
// begin result := false ;
36545: LD_ADDR_VAR 0 3
36549: PUSH
36550: LD_INT 0
36552: ST_TO_ADDR
// exit ;
36553: POP
36554: POP
36555: GO 36561
// end ;
36557: GO 36522
36559: POP
36560: POP
// end ;
36561: LD_VAR 0 3
36565: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
36566: LD_INT 0
36568: PPUSH
36569: PPUSH
36570: PPUSH
36571: PPUSH
36572: PPUSH
36573: PPUSH
36574: PPUSH
36575: PPUSH
36576: PPUSH
36577: PPUSH
36578: PPUSH
36579: PPUSH
36580: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
36581: LD_VAR 0 1
36585: NOT
36586: PUSH
36587: LD_VAR 0 1
36591: PPUSH
36592: CALL_OW 257
36596: PUSH
36597: LD_INT 9
36599: NONEQUAL
36600: OR
36601: IFFALSE 36605
// exit ;
36603: GO 37178
// side := GetSide ( unit ) ;
36605: LD_ADDR_VAR 0 9
36609: PUSH
36610: LD_VAR 0 1
36614: PPUSH
36615: CALL_OW 255
36619: ST_TO_ADDR
// tech_space := tech_spacanom ;
36620: LD_ADDR_VAR 0 12
36624: PUSH
36625: LD_INT 29
36627: ST_TO_ADDR
// tech_time := tech_taurad ;
36628: LD_ADDR_VAR 0 13
36632: PUSH
36633: LD_INT 28
36635: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
36636: LD_ADDR_VAR 0 11
36640: PUSH
36641: LD_VAR 0 1
36645: PPUSH
36646: CALL_OW 310
36650: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
36651: LD_VAR 0 11
36655: PPUSH
36656: CALL_OW 247
36660: PUSH
36661: LD_INT 2
36663: EQUAL
36664: IFFALSE 36668
// exit ;
36666: GO 37178
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36668: LD_ADDR_VAR 0 8
36672: PUSH
36673: LD_INT 81
36675: PUSH
36676: LD_VAR 0 9
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: PUSH
36685: LD_INT 3
36687: PUSH
36688: LD_INT 21
36690: PUSH
36691: LD_INT 3
36693: PUSH
36694: EMPTY
36695: LIST
36696: LIST
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: PUSH
36702: EMPTY
36703: LIST
36704: LIST
36705: PPUSH
36706: CALL_OW 69
36710: ST_TO_ADDR
// if not tmp then
36711: LD_VAR 0 8
36715: NOT
36716: IFFALSE 36720
// exit ;
36718: GO 37178
// if in_unit then
36720: LD_VAR 0 11
36724: IFFALSE 36748
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
36726: LD_ADDR_VAR 0 10
36730: PUSH
36731: LD_VAR 0 8
36735: PPUSH
36736: LD_VAR 0 11
36740: PPUSH
36741: CALL_OW 74
36745: ST_TO_ADDR
36746: GO 36768
// enemy := NearestUnitToUnit ( tmp , unit ) ;
36748: LD_ADDR_VAR 0 10
36752: PUSH
36753: LD_VAR 0 8
36757: PPUSH
36758: LD_VAR 0 1
36762: PPUSH
36763: CALL_OW 74
36767: ST_TO_ADDR
// if not enemy then
36768: LD_VAR 0 10
36772: NOT
36773: IFFALSE 36777
// exit ;
36775: GO 37178
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
36777: LD_VAR 0 11
36781: PUSH
36782: LD_VAR 0 11
36786: PPUSH
36787: LD_VAR 0 10
36791: PPUSH
36792: CALL_OW 296
36796: PUSH
36797: LD_INT 13
36799: GREATER
36800: AND
36801: PUSH
36802: LD_VAR 0 1
36806: PPUSH
36807: LD_VAR 0 10
36811: PPUSH
36812: CALL_OW 296
36816: PUSH
36817: LD_INT 12
36819: GREATER
36820: OR
36821: IFFALSE 36825
// exit ;
36823: GO 37178
// missile := [ 1 ] ;
36825: LD_ADDR_VAR 0 14
36829: PUSH
36830: LD_INT 1
36832: PUSH
36833: EMPTY
36834: LIST
36835: ST_TO_ADDR
// if Researched ( side , tech_space ) then
36836: LD_VAR 0 9
36840: PPUSH
36841: LD_VAR 0 12
36845: PPUSH
36846: CALL_OW 325
36850: IFFALSE 36879
// missile := Replace ( missile , missile + 1 , 2 ) ;
36852: LD_ADDR_VAR 0 14
36856: PUSH
36857: LD_VAR 0 14
36861: PPUSH
36862: LD_VAR 0 14
36866: PUSH
36867: LD_INT 1
36869: PLUS
36870: PPUSH
36871: LD_INT 2
36873: PPUSH
36874: CALL_OW 1
36878: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
36879: LD_VAR 0 9
36883: PPUSH
36884: LD_VAR 0 13
36888: PPUSH
36889: CALL_OW 325
36893: PUSH
36894: LD_VAR 0 10
36898: PPUSH
36899: CALL_OW 255
36903: PPUSH
36904: LD_VAR 0 13
36908: PPUSH
36909: CALL_OW 325
36913: NOT
36914: AND
36915: IFFALSE 36944
// missile := Replace ( missile , missile + 1 , 3 ) ;
36917: LD_ADDR_VAR 0 14
36921: PUSH
36922: LD_VAR 0 14
36926: PPUSH
36927: LD_VAR 0 14
36931: PUSH
36932: LD_INT 1
36934: PLUS
36935: PPUSH
36936: LD_INT 3
36938: PPUSH
36939: CALL_OW 1
36943: ST_TO_ADDR
// if missile < 2 then
36944: LD_VAR 0 14
36948: PUSH
36949: LD_INT 2
36951: LESS
36952: IFFALSE 36956
// exit ;
36954: GO 37178
// x := GetX ( enemy ) ;
36956: LD_ADDR_VAR 0 4
36960: PUSH
36961: LD_VAR 0 10
36965: PPUSH
36966: CALL_OW 250
36970: ST_TO_ADDR
// y := GetY ( enemy ) ;
36971: LD_ADDR_VAR 0 5
36975: PUSH
36976: LD_VAR 0 10
36980: PPUSH
36981: CALL_OW 251
36985: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
36986: LD_ADDR_VAR 0 6
36990: PUSH
36991: LD_VAR 0 4
36995: PUSH
36996: LD_INT 1
36998: NEG
36999: PPUSH
37000: LD_INT 1
37002: PPUSH
37003: CALL_OW 12
37007: PLUS
37008: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
37009: LD_ADDR_VAR 0 7
37013: PUSH
37014: LD_VAR 0 5
37018: PUSH
37019: LD_INT 1
37021: NEG
37022: PPUSH
37023: LD_INT 1
37025: PPUSH
37026: CALL_OW 12
37030: PLUS
37031: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37032: LD_VAR 0 6
37036: PPUSH
37037: LD_VAR 0 7
37041: PPUSH
37042: CALL_OW 488
37046: NOT
37047: IFFALSE 37069
// begin _x := x ;
37049: LD_ADDR_VAR 0 6
37053: PUSH
37054: LD_VAR 0 4
37058: ST_TO_ADDR
// _y := y ;
37059: LD_ADDR_VAR 0 7
37063: PUSH
37064: LD_VAR 0 5
37068: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
37069: LD_ADDR_VAR 0 3
37073: PUSH
37074: LD_INT 1
37076: PPUSH
37077: LD_VAR 0 14
37081: PPUSH
37082: CALL_OW 12
37086: ST_TO_ADDR
// case i of 1 :
37087: LD_VAR 0 3
37091: PUSH
37092: LD_INT 1
37094: DOUBLE
37095: EQUAL
37096: IFTRUE 37100
37098: GO 37117
37100: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
37101: LD_VAR 0 1
37105: PPUSH
37106: LD_VAR 0 10
37110: PPUSH
37111: CALL_OW 115
37115: GO 37178
37117: LD_INT 2
37119: DOUBLE
37120: EQUAL
37121: IFTRUE 37125
37123: GO 37147
37125: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
37126: LD_VAR 0 1
37130: PPUSH
37131: LD_VAR 0 6
37135: PPUSH
37136: LD_VAR 0 7
37140: PPUSH
37141: CALL_OW 153
37145: GO 37178
37147: LD_INT 3
37149: DOUBLE
37150: EQUAL
37151: IFTRUE 37155
37153: GO 37177
37155: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
37156: LD_VAR 0 1
37160: PPUSH
37161: LD_VAR 0 6
37165: PPUSH
37166: LD_VAR 0 7
37170: PPUSH
37171: CALL_OW 154
37175: GO 37178
37177: POP
// end ;
37178: LD_VAR 0 2
37182: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
37183: LD_INT 0
37185: PPUSH
37186: PPUSH
37187: PPUSH
37188: PPUSH
37189: PPUSH
37190: PPUSH
// if not unit or not building then
37191: LD_VAR 0 1
37195: NOT
37196: PUSH
37197: LD_VAR 0 2
37201: NOT
37202: OR
37203: IFFALSE 37207
// exit ;
37205: GO 37365
// x := GetX ( building ) ;
37207: LD_ADDR_VAR 0 5
37211: PUSH
37212: LD_VAR 0 2
37216: PPUSH
37217: CALL_OW 250
37221: ST_TO_ADDR
// y := GetY ( building ) ;
37222: LD_ADDR_VAR 0 6
37226: PUSH
37227: LD_VAR 0 2
37231: PPUSH
37232: CALL_OW 251
37236: ST_TO_ADDR
// for i = 0 to 5 do
37237: LD_ADDR_VAR 0 4
37241: PUSH
37242: DOUBLE
37243: LD_INT 0
37245: DEC
37246: ST_TO_ADDR
37247: LD_INT 5
37249: PUSH
37250: FOR_TO
37251: IFFALSE 37363
// begin _x := ShiftX ( x , i , 3 ) ;
37253: LD_ADDR_VAR 0 7
37257: PUSH
37258: LD_VAR 0 5
37262: PPUSH
37263: LD_VAR 0 4
37267: PPUSH
37268: LD_INT 3
37270: PPUSH
37271: CALL_OW 272
37275: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
37276: LD_ADDR_VAR 0 8
37280: PUSH
37281: LD_VAR 0 6
37285: PPUSH
37286: LD_VAR 0 4
37290: PPUSH
37291: LD_INT 3
37293: PPUSH
37294: CALL_OW 273
37298: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37299: LD_VAR 0 7
37303: PPUSH
37304: LD_VAR 0 8
37308: PPUSH
37309: CALL_OW 488
37313: NOT
37314: IFFALSE 37318
// continue ;
37316: GO 37250
// if HexInfo ( _x , _y ) = 0 then
37318: LD_VAR 0 7
37322: PPUSH
37323: LD_VAR 0 8
37327: PPUSH
37328: CALL_OW 428
37332: PUSH
37333: LD_INT 0
37335: EQUAL
37336: IFFALSE 37361
// begin ComMoveXY ( unit , _x , _y ) ;
37338: LD_VAR 0 1
37342: PPUSH
37343: LD_VAR 0 7
37347: PPUSH
37348: LD_VAR 0 8
37352: PPUSH
37353: CALL_OW 111
// exit ;
37357: POP
37358: POP
37359: GO 37365
// end ; end ;
37361: GO 37250
37363: POP
37364: POP
// end ;
37365: LD_VAR 0 3
37369: RET
// export function ScanBase ( side , base_area ) ; begin
37370: LD_INT 0
37372: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
37373: LD_ADDR_VAR 0 3
37377: PUSH
37378: LD_VAR 0 2
37382: PPUSH
37383: LD_INT 81
37385: PUSH
37386: LD_VAR 0 1
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: PPUSH
37395: CALL_OW 70
37399: ST_TO_ADDR
// end ;
37400: LD_VAR 0 3
37404: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
37405: LD_INT 0
37407: PPUSH
37408: PPUSH
37409: PPUSH
37410: PPUSH
// result := false ;
37411: LD_ADDR_VAR 0 2
37415: PUSH
37416: LD_INT 0
37418: ST_TO_ADDR
// side := GetSide ( unit ) ;
37419: LD_ADDR_VAR 0 3
37423: PUSH
37424: LD_VAR 0 1
37428: PPUSH
37429: CALL_OW 255
37433: ST_TO_ADDR
// nat := GetNation ( unit ) ;
37434: LD_ADDR_VAR 0 4
37438: PUSH
37439: LD_VAR 0 1
37443: PPUSH
37444: CALL_OW 248
37448: ST_TO_ADDR
// case nat of 1 :
37449: LD_VAR 0 4
37453: PUSH
37454: LD_INT 1
37456: DOUBLE
37457: EQUAL
37458: IFTRUE 37462
37460: GO 37473
37462: POP
// tech := tech_lassight ; 2 :
37463: LD_ADDR_VAR 0 5
37467: PUSH
37468: LD_INT 12
37470: ST_TO_ADDR
37471: GO 37512
37473: LD_INT 2
37475: DOUBLE
37476: EQUAL
37477: IFTRUE 37481
37479: GO 37492
37481: POP
// tech := tech_mortar ; 3 :
37482: LD_ADDR_VAR 0 5
37486: PUSH
37487: LD_INT 41
37489: ST_TO_ADDR
37490: GO 37512
37492: LD_INT 3
37494: DOUBLE
37495: EQUAL
37496: IFTRUE 37500
37498: GO 37511
37500: POP
// tech := tech_bazooka ; end ;
37501: LD_ADDR_VAR 0 5
37505: PUSH
37506: LD_INT 44
37508: ST_TO_ADDR
37509: GO 37512
37511: POP
// if Researched ( side , tech ) then
37512: LD_VAR 0 3
37516: PPUSH
37517: LD_VAR 0 5
37521: PPUSH
37522: CALL_OW 325
37526: IFFALSE 37553
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
37528: LD_ADDR_VAR 0 2
37532: PUSH
37533: LD_INT 5
37535: PUSH
37536: LD_INT 8
37538: PUSH
37539: LD_INT 9
37541: PUSH
37542: EMPTY
37543: LIST
37544: LIST
37545: LIST
37546: PUSH
37547: LD_VAR 0 4
37551: ARRAY
37552: ST_TO_ADDR
// end ;
37553: LD_VAR 0 2
37557: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
37558: LD_INT 0
37560: PPUSH
37561: PPUSH
37562: PPUSH
// if not mines then
37563: LD_VAR 0 2
37567: NOT
37568: IFFALSE 37572
// exit ;
37570: GO 37716
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37572: LD_ADDR_VAR 0 5
37576: PUSH
37577: LD_INT 81
37579: PUSH
37580: LD_VAR 0 1
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: PUSH
37589: LD_INT 3
37591: PUSH
37592: LD_INT 21
37594: PUSH
37595: LD_INT 3
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: PPUSH
37610: CALL_OW 69
37614: ST_TO_ADDR
// for i in mines do
37615: LD_ADDR_VAR 0 4
37619: PUSH
37620: LD_VAR 0 2
37624: PUSH
37625: FOR_IN
37626: IFFALSE 37714
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
37628: LD_VAR 0 4
37632: PUSH
37633: LD_INT 1
37635: ARRAY
37636: PPUSH
37637: LD_VAR 0 4
37641: PUSH
37642: LD_INT 2
37644: ARRAY
37645: PPUSH
37646: CALL_OW 458
37650: NOT
37651: IFFALSE 37655
// continue ;
37653: GO 37625
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
37655: LD_VAR 0 4
37659: PUSH
37660: LD_INT 1
37662: ARRAY
37663: PPUSH
37664: LD_VAR 0 4
37668: PUSH
37669: LD_INT 2
37671: ARRAY
37672: PPUSH
37673: CALL_OW 428
37677: PUSH
37678: LD_VAR 0 5
37682: IN
37683: IFFALSE 37712
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
37685: LD_VAR 0 4
37689: PUSH
37690: LD_INT 1
37692: ARRAY
37693: PPUSH
37694: LD_VAR 0 4
37698: PUSH
37699: LD_INT 2
37701: ARRAY
37702: PPUSH
37703: LD_VAR 0 1
37707: PPUSH
37708: CALL_OW 456
// end ;
37712: GO 37625
37714: POP
37715: POP
// end ;
37716: LD_VAR 0 3
37720: RET
// export function Count ( array ) ; begin
37721: LD_INT 0
37723: PPUSH
// result := array + 0 ;
37724: LD_ADDR_VAR 0 2
37728: PUSH
37729: LD_VAR 0 1
37733: PUSH
37734: LD_INT 0
37736: PLUS
37737: ST_TO_ADDR
// end ;
37738: LD_VAR 0 2
37742: RET
// export function IsEmpty ( building ) ; begin
37743: LD_INT 0
37745: PPUSH
// if not building then
37746: LD_VAR 0 1
37750: NOT
37751: IFFALSE 37755
// exit ;
37753: GO 37798
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
37755: LD_ADDR_VAR 0 2
37759: PUSH
37760: LD_VAR 0 1
37764: PUSH
37765: LD_INT 22
37767: PUSH
37768: LD_VAR 0 1
37772: PPUSH
37773: CALL_OW 255
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: PUSH
37782: LD_INT 58
37784: PUSH
37785: EMPTY
37786: LIST
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PPUSH
37792: CALL_OW 69
37796: IN
37797: ST_TO_ADDR
// end ;
37798: LD_VAR 0 2
37802: RET
// export function IsNotFull ( building ) ; var places ; begin
37803: LD_INT 0
37805: PPUSH
37806: PPUSH
// if not building then
37807: LD_VAR 0 1
37811: NOT
37812: IFFALSE 37816
// exit ;
37814: GO 37844
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
37816: LD_ADDR_VAR 0 2
37820: PUSH
37821: LD_VAR 0 1
37825: PPUSH
37826: LD_INT 3
37828: PUSH
37829: LD_INT 62
37831: PUSH
37832: EMPTY
37833: LIST
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: PPUSH
37839: CALL_OW 72
37843: ST_TO_ADDR
// end ;
37844: LD_VAR 0 2
37848: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
37849: LD_INT 0
37851: PPUSH
37852: PPUSH
37853: PPUSH
37854: PPUSH
// tmp := [ ] ;
37855: LD_ADDR_VAR 0 3
37859: PUSH
37860: EMPTY
37861: ST_TO_ADDR
// list := [ ] ;
37862: LD_ADDR_VAR 0 5
37866: PUSH
37867: EMPTY
37868: ST_TO_ADDR
// for i = 16 to 25 do
37869: LD_ADDR_VAR 0 4
37873: PUSH
37874: DOUBLE
37875: LD_INT 16
37877: DEC
37878: ST_TO_ADDR
37879: LD_INT 25
37881: PUSH
37882: FOR_TO
37883: IFFALSE 37956
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
37885: LD_ADDR_VAR 0 3
37889: PUSH
37890: LD_VAR 0 3
37894: PUSH
37895: LD_INT 22
37897: PUSH
37898: LD_VAR 0 1
37902: PPUSH
37903: CALL_OW 255
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: PUSH
37912: LD_INT 91
37914: PUSH
37915: LD_VAR 0 1
37919: PUSH
37920: LD_INT 6
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: LIST
37927: PUSH
37928: LD_INT 30
37930: PUSH
37931: LD_VAR 0 4
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: LIST
37944: PUSH
37945: EMPTY
37946: LIST
37947: PPUSH
37948: CALL_OW 69
37952: ADD
37953: ST_TO_ADDR
37954: GO 37882
37956: POP
37957: POP
// for i = 1 to tmp do
37958: LD_ADDR_VAR 0 4
37962: PUSH
37963: DOUBLE
37964: LD_INT 1
37966: DEC
37967: ST_TO_ADDR
37968: LD_VAR 0 3
37972: PUSH
37973: FOR_TO
37974: IFFALSE 38062
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
37976: LD_ADDR_VAR 0 5
37980: PUSH
37981: LD_VAR 0 5
37985: PUSH
37986: LD_VAR 0 3
37990: PUSH
37991: LD_VAR 0 4
37995: ARRAY
37996: PPUSH
37997: CALL_OW 266
38001: PUSH
38002: LD_VAR 0 3
38006: PUSH
38007: LD_VAR 0 4
38011: ARRAY
38012: PPUSH
38013: CALL_OW 250
38017: PUSH
38018: LD_VAR 0 3
38022: PUSH
38023: LD_VAR 0 4
38027: ARRAY
38028: PPUSH
38029: CALL_OW 251
38033: PUSH
38034: LD_VAR 0 3
38038: PUSH
38039: LD_VAR 0 4
38043: ARRAY
38044: PPUSH
38045: CALL_OW 254
38049: PUSH
38050: EMPTY
38051: LIST
38052: LIST
38053: LIST
38054: LIST
38055: PUSH
38056: EMPTY
38057: LIST
38058: ADD
38059: ST_TO_ADDR
38060: GO 37973
38062: POP
38063: POP
// result := list ;
38064: LD_ADDR_VAR 0 2
38068: PUSH
38069: LD_VAR 0 5
38073: ST_TO_ADDR
// end ;
38074: LD_VAR 0 2
38078: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
38079: LD_INT 0
38081: PPUSH
38082: PPUSH
38083: PPUSH
38084: PPUSH
38085: PPUSH
38086: PPUSH
38087: PPUSH
// if not factory then
38088: LD_VAR 0 1
38092: NOT
38093: IFFALSE 38097
// exit ;
38095: GO 38690
// if control = control_apeman then
38097: LD_VAR 0 4
38101: PUSH
38102: LD_INT 5
38104: EQUAL
38105: IFFALSE 38214
// begin tmp := UnitsInside ( factory ) ;
38107: LD_ADDR_VAR 0 8
38111: PUSH
38112: LD_VAR 0 1
38116: PPUSH
38117: CALL_OW 313
38121: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
38122: LD_VAR 0 8
38126: PPUSH
38127: LD_INT 25
38129: PUSH
38130: LD_INT 12
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: PPUSH
38137: CALL_OW 72
38141: NOT
38142: IFFALSE 38152
// control := control_manual ;
38144: LD_ADDR_VAR 0 4
38148: PUSH
38149: LD_INT 1
38151: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
38152: LD_ADDR_VAR 0 8
38156: PUSH
38157: LD_VAR 0 1
38161: PPUSH
38162: CALL 37849 0 1
38166: ST_TO_ADDR
// if tmp then
38167: LD_VAR 0 8
38171: IFFALSE 38214
// begin for i in tmp do
38173: LD_ADDR_VAR 0 7
38177: PUSH
38178: LD_VAR 0 8
38182: PUSH
38183: FOR_IN
38184: IFFALSE 38212
// if i [ 1 ] = b_ext_radio then
38186: LD_VAR 0 7
38190: PUSH
38191: LD_INT 1
38193: ARRAY
38194: PUSH
38195: LD_INT 22
38197: EQUAL
38198: IFFALSE 38210
// begin control := control_remote ;
38200: LD_ADDR_VAR 0 4
38204: PUSH
38205: LD_INT 2
38207: ST_TO_ADDR
// break ;
38208: GO 38212
// end ;
38210: GO 38183
38212: POP
38213: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38214: LD_VAR 0 1
38218: PPUSH
38219: LD_VAR 0 2
38223: PPUSH
38224: LD_VAR 0 3
38228: PPUSH
38229: LD_VAR 0 4
38233: PPUSH
38234: LD_VAR 0 5
38238: PPUSH
38239: CALL_OW 448
38243: IFFALSE 38278
// begin result := [ chassis , engine , control , weapon ] ;
38245: LD_ADDR_VAR 0 6
38249: PUSH
38250: LD_VAR 0 2
38254: PUSH
38255: LD_VAR 0 3
38259: PUSH
38260: LD_VAR 0 4
38264: PUSH
38265: LD_VAR 0 5
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: LIST
38274: LIST
38275: ST_TO_ADDR
// exit ;
38276: GO 38690
// end ; _chassis := AvailableChassisList ( factory ) ;
38278: LD_ADDR_VAR 0 9
38282: PUSH
38283: LD_VAR 0 1
38287: PPUSH
38288: CALL_OW 475
38292: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
38293: LD_ADDR_VAR 0 11
38297: PUSH
38298: LD_VAR 0 1
38302: PPUSH
38303: CALL_OW 476
38307: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
38308: LD_ADDR_VAR 0 12
38312: PUSH
38313: LD_VAR 0 1
38317: PPUSH
38318: CALL_OW 477
38322: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
38323: LD_ADDR_VAR 0 10
38327: PUSH
38328: LD_VAR 0 1
38332: PPUSH
38333: CALL_OW 478
38337: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
38338: LD_VAR 0 9
38342: NOT
38343: PUSH
38344: LD_VAR 0 11
38348: NOT
38349: OR
38350: PUSH
38351: LD_VAR 0 12
38355: NOT
38356: OR
38357: PUSH
38358: LD_VAR 0 10
38362: NOT
38363: OR
38364: IFFALSE 38399
// begin result := [ chassis , engine , control , weapon ] ;
38366: LD_ADDR_VAR 0 6
38370: PUSH
38371: LD_VAR 0 2
38375: PUSH
38376: LD_VAR 0 3
38380: PUSH
38381: LD_VAR 0 4
38385: PUSH
38386: LD_VAR 0 5
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: ST_TO_ADDR
// exit ;
38397: GO 38690
// end ; if not chassis in _chassis then
38399: LD_VAR 0 2
38403: PUSH
38404: LD_VAR 0 9
38408: IN
38409: NOT
38410: IFFALSE 38436
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
38412: LD_ADDR_VAR 0 2
38416: PUSH
38417: LD_VAR 0 9
38421: PUSH
38422: LD_INT 1
38424: PPUSH
38425: LD_VAR 0 9
38429: PPUSH
38430: CALL_OW 12
38434: ARRAY
38435: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
38436: LD_VAR 0 2
38440: PPUSH
38441: LD_VAR 0 3
38445: PPUSH
38446: CALL 38695 0 2
38450: NOT
38451: IFFALSE 38510
// repeat engine := _engine [ 1 ] ;
38453: LD_ADDR_VAR 0 3
38457: PUSH
38458: LD_VAR 0 11
38462: PUSH
38463: LD_INT 1
38465: ARRAY
38466: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
38467: LD_ADDR_VAR 0 11
38471: PUSH
38472: LD_VAR 0 11
38476: PPUSH
38477: LD_INT 1
38479: PPUSH
38480: CALL_OW 3
38484: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
38485: LD_VAR 0 2
38489: PPUSH
38490: LD_VAR 0 3
38494: PPUSH
38495: CALL 38695 0 2
38499: PUSH
38500: LD_VAR 0 11
38504: PUSH
38505: EMPTY
38506: EQUAL
38507: OR
38508: IFFALSE 38453
// if not control in _control then
38510: LD_VAR 0 4
38514: PUSH
38515: LD_VAR 0 12
38519: IN
38520: NOT
38521: IFFALSE 38547
// control := _control [ rand ( 1 , _control ) ] ;
38523: LD_ADDR_VAR 0 4
38527: PUSH
38528: LD_VAR 0 12
38532: PUSH
38533: LD_INT 1
38535: PPUSH
38536: LD_VAR 0 12
38540: PPUSH
38541: CALL_OW 12
38545: ARRAY
38546: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
38547: LD_VAR 0 2
38551: PPUSH
38552: LD_VAR 0 5
38556: PPUSH
38557: CALL 38915 0 2
38561: NOT
38562: IFFALSE 38621
// repeat weapon := _weapon [ 1 ] ;
38564: LD_ADDR_VAR 0 5
38568: PUSH
38569: LD_VAR 0 10
38573: PUSH
38574: LD_INT 1
38576: ARRAY
38577: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
38578: LD_ADDR_VAR 0 10
38582: PUSH
38583: LD_VAR 0 10
38587: PPUSH
38588: LD_INT 1
38590: PPUSH
38591: CALL_OW 3
38595: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
38596: LD_VAR 0 2
38600: PPUSH
38601: LD_VAR 0 5
38605: PPUSH
38606: CALL 38915 0 2
38610: PUSH
38611: LD_VAR 0 10
38615: PUSH
38616: EMPTY
38617: EQUAL
38618: OR
38619: IFFALSE 38564
// result := [ ] ;
38621: LD_ADDR_VAR 0 6
38625: PUSH
38626: EMPTY
38627: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38628: LD_VAR 0 1
38632: PPUSH
38633: LD_VAR 0 2
38637: PPUSH
38638: LD_VAR 0 3
38642: PPUSH
38643: LD_VAR 0 4
38647: PPUSH
38648: LD_VAR 0 5
38652: PPUSH
38653: CALL_OW 448
38657: IFFALSE 38690
// result := [ chassis , engine , control , weapon ] ;
38659: LD_ADDR_VAR 0 6
38663: PUSH
38664: LD_VAR 0 2
38668: PUSH
38669: LD_VAR 0 3
38673: PUSH
38674: LD_VAR 0 4
38678: PUSH
38679: LD_VAR 0 5
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: ST_TO_ADDR
// end ;
38690: LD_VAR 0 6
38694: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
38695: LD_INT 0
38697: PPUSH
// if not chassis or not engine then
38698: LD_VAR 0 1
38702: NOT
38703: PUSH
38704: LD_VAR 0 2
38708: NOT
38709: OR
38710: IFFALSE 38714
// exit ;
38712: GO 38910
// case engine of engine_solar :
38714: LD_VAR 0 2
38718: PUSH
38719: LD_INT 2
38721: DOUBLE
38722: EQUAL
38723: IFTRUE 38727
38725: GO 38765
38727: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
38728: LD_ADDR_VAR 0 3
38732: PUSH
38733: LD_INT 11
38735: PUSH
38736: LD_INT 12
38738: PUSH
38739: LD_INT 13
38741: PUSH
38742: LD_INT 14
38744: PUSH
38745: LD_INT 1
38747: PUSH
38748: LD_INT 2
38750: PUSH
38751: LD_INT 3
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: ST_TO_ADDR
38763: GO 38894
38765: LD_INT 1
38767: DOUBLE
38768: EQUAL
38769: IFTRUE 38773
38771: GO 38835
38773: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
38774: LD_ADDR_VAR 0 3
38778: PUSH
38779: LD_INT 11
38781: PUSH
38782: LD_INT 12
38784: PUSH
38785: LD_INT 13
38787: PUSH
38788: LD_INT 14
38790: PUSH
38791: LD_INT 1
38793: PUSH
38794: LD_INT 2
38796: PUSH
38797: LD_INT 3
38799: PUSH
38800: LD_INT 4
38802: PUSH
38803: LD_INT 5
38805: PUSH
38806: LD_INT 21
38808: PUSH
38809: LD_INT 23
38811: PUSH
38812: LD_INT 22
38814: PUSH
38815: LD_INT 24
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: LIST
38822: LIST
38823: LIST
38824: LIST
38825: LIST
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: LIST
38831: LIST
38832: ST_TO_ADDR
38833: GO 38894
38835: LD_INT 3
38837: DOUBLE
38838: EQUAL
38839: IFTRUE 38843
38841: GO 38893
38843: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38844: LD_ADDR_VAR 0 3
38848: PUSH
38849: LD_INT 13
38851: PUSH
38852: LD_INT 14
38854: PUSH
38855: LD_INT 2
38857: PUSH
38858: LD_INT 3
38860: PUSH
38861: LD_INT 4
38863: PUSH
38864: LD_INT 5
38866: PUSH
38867: LD_INT 21
38869: PUSH
38870: LD_INT 22
38872: PUSH
38873: LD_INT 23
38875: PUSH
38876: LD_INT 24
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: LIST
38883: LIST
38884: LIST
38885: LIST
38886: LIST
38887: LIST
38888: LIST
38889: LIST
38890: ST_TO_ADDR
38891: GO 38894
38893: POP
// result := ( chassis in result ) ;
38894: LD_ADDR_VAR 0 3
38898: PUSH
38899: LD_VAR 0 1
38903: PUSH
38904: LD_VAR 0 3
38908: IN
38909: ST_TO_ADDR
// end ;
38910: LD_VAR 0 3
38914: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
38915: LD_INT 0
38917: PPUSH
// if not chassis or not weapon then
38918: LD_VAR 0 1
38922: NOT
38923: PUSH
38924: LD_VAR 0 2
38928: NOT
38929: OR
38930: IFFALSE 38934
// exit ;
38932: GO 39994
// case weapon of us_machine_gun :
38934: LD_VAR 0 2
38938: PUSH
38939: LD_INT 2
38941: DOUBLE
38942: EQUAL
38943: IFTRUE 38947
38945: GO 38977
38947: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
38948: LD_ADDR_VAR 0 3
38952: PUSH
38953: LD_INT 1
38955: PUSH
38956: LD_INT 2
38958: PUSH
38959: LD_INT 3
38961: PUSH
38962: LD_INT 4
38964: PUSH
38965: LD_INT 5
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: LIST
38974: ST_TO_ADDR
38975: GO 39978
38977: LD_INT 3
38979: DOUBLE
38980: EQUAL
38981: IFTRUE 38985
38983: GO 39015
38985: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
38986: LD_ADDR_VAR 0 3
38990: PUSH
38991: LD_INT 1
38993: PUSH
38994: LD_INT 2
38996: PUSH
38997: LD_INT 3
38999: PUSH
39000: LD_INT 4
39002: PUSH
39003: LD_INT 5
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: LIST
39010: LIST
39011: LIST
39012: ST_TO_ADDR
39013: GO 39978
39015: LD_INT 11
39017: DOUBLE
39018: EQUAL
39019: IFTRUE 39023
39021: GO 39053
39023: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
39024: LD_ADDR_VAR 0 3
39028: PUSH
39029: LD_INT 1
39031: PUSH
39032: LD_INT 2
39034: PUSH
39035: LD_INT 3
39037: PUSH
39038: LD_INT 4
39040: PUSH
39041: LD_INT 5
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: LIST
39048: LIST
39049: LIST
39050: ST_TO_ADDR
39051: GO 39978
39053: LD_INT 4
39055: DOUBLE
39056: EQUAL
39057: IFTRUE 39061
39059: GO 39087
39061: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
39062: LD_ADDR_VAR 0 3
39066: PUSH
39067: LD_INT 2
39069: PUSH
39070: LD_INT 3
39072: PUSH
39073: LD_INT 4
39075: PUSH
39076: LD_INT 5
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: LIST
39083: LIST
39084: ST_TO_ADDR
39085: GO 39978
39087: LD_INT 5
39089: DOUBLE
39090: EQUAL
39091: IFTRUE 39095
39093: GO 39121
39095: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
39096: LD_ADDR_VAR 0 3
39100: PUSH
39101: LD_INT 2
39103: PUSH
39104: LD_INT 3
39106: PUSH
39107: LD_INT 4
39109: PUSH
39110: LD_INT 5
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: ST_TO_ADDR
39119: GO 39978
39121: LD_INT 9
39123: DOUBLE
39124: EQUAL
39125: IFTRUE 39129
39127: GO 39155
39129: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
39130: LD_ADDR_VAR 0 3
39134: PUSH
39135: LD_INT 2
39137: PUSH
39138: LD_INT 3
39140: PUSH
39141: LD_INT 4
39143: PUSH
39144: LD_INT 5
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: ST_TO_ADDR
39153: GO 39978
39155: LD_INT 7
39157: DOUBLE
39158: EQUAL
39159: IFTRUE 39163
39161: GO 39189
39163: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
39164: LD_ADDR_VAR 0 3
39168: PUSH
39169: LD_INT 2
39171: PUSH
39172: LD_INT 3
39174: PUSH
39175: LD_INT 4
39177: PUSH
39178: LD_INT 5
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: LIST
39185: LIST
39186: ST_TO_ADDR
39187: GO 39978
39189: LD_INT 12
39191: DOUBLE
39192: EQUAL
39193: IFTRUE 39197
39195: GO 39223
39197: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
39198: LD_ADDR_VAR 0 3
39202: PUSH
39203: LD_INT 2
39205: PUSH
39206: LD_INT 3
39208: PUSH
39209: LD_INT 4
39211: PUSH
39212: LD_INT 5
39214: PUSH
39215: EMPTY
39216: LIST
39217: LIST
39218: LIST
39219: LIST
39220: ST_TO_ADDR
39221: GO 39978
39223: LD_INT 13
39225: DOUBLE
39226: EQUAL
39227: IFTRUE 39231
39229: GO 39257
39231: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
39232: LD_ADDR_VAR 0 3
39236: PUSH
39237: LD_INT 2
39239: PUSH
39240: LD_INT 3
39242: PUSH
39243: LD_INT 4
39245: PUSH
39246: LD_INT 5
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: ST_TO_ADDR
39255: GO 39978
39257: LD_INT 14
39259: DOUBLE
39260: EQUAL
39261: IFTRUE 39265
39263: GO 39283
39265: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
39266: LD_ADDR_VAR 0 3
39270: PUSH
39271: LD_INT 4
39273: PUSH
39274: LD_INT 5
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: ST_TO_ADDR
39281: GO 39978
39283: LD_INT 6
39285: DOUBLE
39286: EQUAL
39287: IFTRUE 39291
39289: GO 39309
39291: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
39292: LD_ADDR_VAR 0 3
39296: PUSH
39297: LD_INT 4
39299: PUSH
39300: LD_INT 5
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: ST_TO_ADDR
39307: GO 39978
39309: LD_INT 10
39311: DOUBLE
39312: EQUAL
39313: IFTRUE 39317
39315: GO 39335
39317: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
39318: LD_ADDR_VAR 0 3
39322: PUSH
39323: LD_INT 4
39325: PUSH
39326: LD_INT 5
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: ST_TO_ADDR
39333: GO 39978
39335: LD_INT 22
39337: DOUBLE
39338: EQUAL
39339: IFTRUE 39343
39341: GO 39369
39343: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
39344: LD_ADDR_VAR 0 3
39348: PUSH
39349: LD_INT 11
39351: PUSH
39352: LD_INT 12
39354: PUSH
39355: LD_INT 13
39357: PUSH
39358: LD_INT 14
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: LIST
39365: LIST
39366: ST_TO_ADDR
39367: GO 39978
39369: LD_INT 23
39371: DOUBLE
39372: EQUAL
39373: IFTRUE 39377
39375: GO 39403
39377: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
39378: LD_ADDR_VAR 0 3
39382: PUSH
39383: LD_INT 11
39385: PUSH
39386: LD_INT 12
39388: PUSH
39389: LD_INT 13
39391: PUSH
39392: LD_INT 14
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: ST_TO_ADDR
39401: GO 39978
39403: LD_INT 24
39405: DOUBLE
39406: EQUAL
39407: IFTRUE 39411
39409: GO 39437
39411: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
39412: LD_ADDR_VAR 0 3
39416: PUSH
39417: LD_INT 11
39419: PUSH
39420: LD_INT 12
39422: PUSH
39423: LD_INT 13
39425: PUSH
39426: LD_INT 14
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: LIST
39433: LIST
39434: ST_TO_ADDR
39435: GO 39978
39437: LD_INT 30
39439: DOUBLE
39440: EQUAL
39441: IFTRUE 39445
39443: GO 39471
39445: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
39446: LD_ADDR_VAR 0 3
39450: PUSH
39451: LD_INT 11
39453: PUSH
39454: LD_INT 12
39456: PUSH
39457: LD_INT 13
39459: PUSH
39460: LD_INT 14
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: LIST
39467: LIST
39468: ST_TO_ADDR
39469: GO 39978
39471: LD_INT 25
39473: DOUBLE
39474: EQUAL
39475: IFTRUE 39479
39477: GO 39497
39479: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
39480: LD_ADDR_VAR 0 3
39484: PUSH
39485: LD_INT 13
39487: PUSH
39488: LD_INT 14
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: ST_TO_ADDR
39495: GO 39978
39497: LD_INT 27
39499: DOUBLE
39500: EQUAL
39501: IFTRUE 39505
39503: GO 39523
39505: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
39506: LD_ADDR_VAR 0 3
39510: PUSH
39511: LD_INT 13
39513: PUSH
39514: LD_INT 14
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: ST_TO_ADDR
39521: GO 39978
39523: LD_INT 92
39525: DOUBLE
39526: EQUAL
39527: IFTRUE 39531
39529: GO 39557
39531: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
39532: LD_ADDR_VAR 0 3
39536: PUSH
39537: LD_INT 11
39539: PUSH
39540: LD_INT 12
39542: PUSH
39543: LD_INT 13
39545: PUSH
39546: LD_INT 14
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: ST_TO_ADDR
39555: GO 39978
39557: LD_INT 28
39559: DOUBLE
39560: EQUAL
39561: IFTRUE 39565
39563: GO 39583
39565: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
39566: LD_ADDR_VAR 0 3
39570: PUSH
39571: LD_INT 13
39573: PUSH
39574: LD_INT 14
39576: PUSH
39577: EMPTY
39578: LIST
39579: LIST
39580: ST_TO_ADDR
39581: GO 39978
39583: LD_INT 29
39585: DOUBLE
39586: EQUAL
39587: IFTRUE 39591
39589: GO 39609
39591: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
39592: LD_ADDR_VAR 0 3
39596: PUSH
39597: LD_INT 13
39599: PUSH
39600: LD_INT 14
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: ST_TO_ADDR
39607: GO 39978
39609: LD_INT 31
39611: DOUBLE
39612: EQUAL
39613: IFTRUE 39617
39615: GO 39635
39617: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
39618: LD_ADDR_VAR 0 3
39622: PUSH
39623: LD_INT 13
39625: PUSH
39626: LD_INT 14
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: ST_TO_ADDR
39633: GO 39978
39635: LD_INT 26
39637: DOUBLE
39638: EQUAL
39639: IFTRUE 39643
39641: GO 39661
39643: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
39644: LD_ADDR_VAR 0 3
39648: PUSH
39649: LD_INT 13
39651: PUSH
39652: LD_INT 14
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: ST_TO_ADDR
39659: GO 39978
39661: LD_INT 42
39663: DOUBLE
39664: EQUAL
39665: IFTRUE 39669
39667: GO 39695
39669: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
39670: LD_ADDR_VAR 0 3
39674: PUSH
39675: LD_INT 21
39677: PUSH
39678: LD_INT 22
39680: PUSH
39681: LD_INT 23
39683: PUSH
39684: LD_INT 24
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: LIST
39691: LIST
39692: ST_TO_ADDR
39693: GO 39978
39695: LD_INT 43
39697: DOUBLE
39698: EQUAL
39699: IFTRUE 39703
39701: GO 39729
39703: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
39704: LD_ADDR_VAR 0 3
39708: PUSH
39709: LD_INT 21
39711: PUSH
39712: LD_INT 22
39714: PUSH
39715: LD_INT 23
39717: PUSH
39718: LD_INT 24
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: ST_TO_ADDR
39727: GO 39978
39729: LD_INT 44
39731: DOUBLE
39732: EQUAL
39733: IFTRUE 39737
39735: GO 39763
39737: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
39738: LD_ADDR_VAR 0 3
39742: PUSH
39743: LD_INT 21
39745: PUSH
39746: LD_INT 22
39748: PUSH
39749: LD_INT 23
39751: PUSH
39752: LD_INT 24
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: ST_TO_ADDR
39761: GO 39978
39763: LD_INT 45
39765: DOUBLE
39766: EQUAL
39767: IFTRUE 39771
39769: GO 39797
39771: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
39772: LD_ADDR_VAR 0 3
39776: PUSH
39777: LD_INT 21
39779: PUSH
39780: LD_INT 22
39782: PUSH
39783: LD_INT 23
39785: PUSH
39786: LD_INT 24
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: ST_TO_ADDR
39795: GO 39978
39797: LD_INT 49
39799: DOUBLE
39800: EQUAL
39801: IFTRUE 39805
39803: GO 39831
39805: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
39806: LD_ADDR_VAR 0 3
39810: PUSH
39811: LD_INT 21
39813: PUSH
39814: LD_INT 22
39816: PUSH
39817: LD_INT 23
39819: PUSH
39820: LD_INT 24
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: LIST
39827: LIST
39828: ST_TO_ADDR
39829: GO 39978
39831: LD_INT 51
39833: DOUBLE
39834: EQUAL
39835: IFTRUE 39839
39837: GO 39865
39839: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
39840: LD_ADDR_VAR 0 3
39844: PUSH
39845: LD_INT 21
39847: PUSH
39848: LD_INT 22
39850: PUSH
39851: LD_INT 23
39853: PUSH
39854: LD_INT 24
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: ST_TO_ADDR
39863: GO 39978
39865: LD_INT 52
39867: DOUBLE
39868: EQUAL
39869: IFTRUE 39873
39871: GO 39899
39873: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
39874: LD_ADDR_VAR 0 3
39878: PUSH
39879: LD_INT 21
39881: PUSH
39882: LD_INT 22
39884: PUSH
39885: LD_INT 23
39887: PUSH
39888: LD_INT 24
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: LIST
39895: LIST
39896: ST_TO_ADDR
39897: GO 39978
39899: LD_INT 53
39901: DOUBLE
39902: EQUAL
39903: IFTRUE 39907
39905: GO 39925
39907: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
39908: LD_ADDR_VAR 0 3
39912: PUSH
39913: LD_INT 23
39915: PUSH
39916: LD_INT 24
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: ST_TO_ADDR
39923: GO 39978
39925: LD_INT 46
39927: DOUBLE
39928: EQUAL
39929: IFTRUE 39933
39931: GO 39951
39933: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
39934: LD_ADDR_VAR 0 3
39938: PUSH
39939: LD_INT 23
39941: PUSH
39942: LD_INT 24
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: ST_TO_ADDR
39949: GO 39978
39951: LD_INT 47
39953: DOUBLE
39954: EQUAL
39955: IFTRUE 39959
39957: GO 39977
39959: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39960: LD_ADDR_VAR 0 3
39964: PUSH
39965: LD_INT 23
39967: PUSH
39968: LD_INT 24
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: ST_TO_ADDR
39975: GO 39978
39977: POP
// result := ( chassis in result ) ;
39978: LD_ADDR_VAR 0 3
39982: PUSH
39983: LD_VAR 0 1
39987: PUSH
39988: LD_VAR 0 3
39992: IN
39993: ST_TO_ADDR
// end ;
39994: LD_VAR 0 3
39998: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
39999: LD_INT 0
40001: PPUSH
40002: PPUSH
40003: PPUSH
40004: PPUSH
40005: PPUSH
40006: PPUSH
40007: PPUSH
// result := array ;
40008: LD_ADDR_VAR 0 5
40012: PUSH
40013: LD_VAR 0 1
40017: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
40018: LD_VAR 0 1
40022: NOT
40023: PUSH
40024: LD_VAR 0 2
40028: NOT
40029: OR
40030: PUSH
40031: LD_VAR 0 3
40035: NOT
40036: OR
40037: PUSH
40038: LD_VAR 0 2
40042: PUSH
40043: LD_VAR 0 1
40047: GREATER
40048: OR
40049: PUSH
40050: LD_VAR 0 3
40054: PUSH
40055: LD_VAR 0 1
40059: GREATER
40060: OR
40061: IFFALSE 40065
// exit ;
40063: GO 40361
// if direction then
40065: LD_VAR 0 4
40069: IFFALSE 40133
// begin d := 1 ;
40071: LD_ADDR_VAR 0 9
40075: PUSH
40076: LD_INT 1
40078: ST_TO_ADDR
// if i_from > i_to then
40079: LD_VAR 0 2
40083: PUSH
40084: LD_VAR 0 3
40088: GREATER
40089: IFFALSE 40115
// length := ( array - i_from ) + i_to else
40091: LD_ADDR_VAR 0 11
40095: PUSH
40096: LD_VAR 0 1
40100: PUSH
40101: LD_VAR 0 2
40105: MINUS
40106: PUSH
40107: LD_VAR 0 3
40111: PLUS
40112: ST_TO_ADDR
40113: GO 40131
// length := i_to - i_from ;
40115: LD_ADDR_VAR 0 11
40119: PUSH
40120: LD_VAR 0 3
40124: PUSH
40125: LD_VAR 0 2
40129: MINUS
40130: ST_TO_ADDR
// end else
40131: GO 40194
// begin d := - 1 ;
40133: LD_ADDR_VAR 0 9
40137: PUSH
40138: LD_INT 1
40140: NEG
40141: ST_TO_ADDR
// if i_from > i_to then
40142: LD_VAR 0 2
40146: PUSH
40147: LD_VAR 0 3
40151: GREATER
40152: IFFALSE 40172
// length := i_from - i_to else
40154: LD_ADDR_VAR 0 11
40158: PUSH
40159: LD_VAR 0 2
40163: PUSH
40164: LD_VAR 0 3
40168: MINUS
40169: ST_TO_ADDR
40170: GO 40194
// length := ( array - i_to ) + i_from ;
40172: LD_ADDR_VAR 0 11
40176: PUSH
40177: LD_VAR 0 1
40181: PUSH
40182: LD_VAR 0 3
40186: MINUS
40187: PUSH
40188: LD_VAR 0 2
40192: PLUS
40193: ST_TO_ADDR
// end ; if not length then
40194: LD_VAR 0 11
40198: NOT
40199: IFFALSE 40203
// exit ;
40201: GO 40361
// tmp := array ;
40203: LD_ADDR_VAR 0 10
40207: PUSH
40208: LD_VAR 0 1
40212: ST_TO_ADDR
// for i = 1 to length do
40213: LD_ADDR_VAR 0 6
40217: PUSH
40218: DOUBLE
40219: LD_INT 1
40221: DEC
40222: ST_TO_ADDR
40223: LD_VAR 0 11
40227: PUSH
40228: FOR_TO
40229: IFFALSE 40349
// begin for j = 1 to array do
40231: LD_ADDR_VAR 0 7
40235: PUSH
40236: DOUBLE
40237: LD_INT 1
40239: DEC
40240: ST_TO_ADDR
40241: LD_VAR 0 1
40245: PUSH
40246: FOR_TO
40247: IFFALSE 40335
// begin k := j + d ;
40249: LD_ADDR_VAR 0 8
40253: PUSH
40254: LD_VAR 0 7
40258: PUSH
40259: LD_VAR 0 9
40263: PLUS
40264: ST_TO_ADDR
// if k > array then
40265: LD_VAR 0 8
40269: PUSH
40270: LD_VAR 0 1
40274: GREATER
40275: IFFALSE 40285
// k := 1 ;
40277: LD_ADDR_VAR 0 8
40281: PUSH
40282: LD_INT 1
40284: ST_TO_ADDR
// if not k then
40285: LD_VAR 0 8
40289: NOT
40290: IFFALSE 40302
// k := array ;
40292: LD_ADDR_VAR 0 8
40296: PUSH
40297: LD_VAR 0 1
40301: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
40302: LD_ADDR_VAR 0 10
40306: PUSH
40307: LD_VAR 0 10
40311: PPUSH
40312: LD_VAR 0 8
40316: PPUSH
40317: LD_VAR 0 1
40321: PUSH
40322: LD_VAR 0 7
40326: ARRAY
40327: PPUSH
40328: CALL_OW 1
40332: ST_TO_ADDR
// end ;
40333: GO 40246
40335: POP
40336: POP
// array := tmp ;
40337: LD_ADDR_VAR 0 1
40341: PUSH
40342: LD_VAR 0 10
40346: ST_TO_ADDR
// end ;
40347: GO 40228
40349: POP
40350: POP
// result := array ;
40351: LD_ADDR_VAR 0 5
40355: PUSH
40356: LD_VAR 0 1
40360: ST_TO_ADDR
// end ;
40361: LD_VAR 0 5
40365: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
40366: LD_INT 0
40368: PPUSH
40369: PPUSH
// result := 0 ;
40370: LD_ADDR_VAR 0 3
40374: PUSH
40375: LD_INT 0
40377: ST_TO_ADDR
// if not array or not value in array then
40378: LD_VAR 0 1
40382: NOT
40383: PUSH
40384: LD_VAR 0 2
40388: PUSH
40389: LD_VAR 0 1
40393: IN
40394: NOT
40395: OR
40396: IFFALSE 40400
// exit ;
40398: GO 40454
// for i = 1 to array do
40400: LD_ADDR_VAR 0 4
40404: PUSH
40405: DOUBLE
40406: LD_INT 1
40408: DEC
40409: ST_TO_ADDR
40410: LD_VAR 0 1
40414: PUSH
40415: FOR_TO
40416: IFFALSE 40452
// if value = array [ i ] then
40418: LD_VAR 0 2
40422: PUSH
40423: LD_VAR 0 1
40427: PUSH
40428: LD_VAR 0 4
40432: ARRAY
40433: EQUAL
40434: IFFALSE 40450
// begin result := i ;
40436: LD_ADDR_VAR 0 3
40440: PUSH
40441: LD_VAR 0 4
40445: ST_TO_ADDR
// exit ;
40446: POP
40447: POP
40448: GO 40454
// end ;
40450: GO 40415
40452: POP
40453: POP
// end ;
40454: LD_VAR 0 3
40458: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
40459: LD_INT 0
40461: PPUSH
// vc_chassis := chassis ;
40462: LD_ADDR_OWVAR 37
40466: PUSH
40467: LD_VAR 0 1
40471: ST_TO_ADDR
// vc_engine := engine ;
40472: LD_ADDR_OWVAR 39
40476: PUSH
40477: LD_VAR 0 2
40481: ST_TO_ADDR
// vc_control := control ;
40482: LD_ADDR_OWVAR 38
40486: PUSH
40487: LD_VAR 0 3
40491: ST_TO_ADDR
// vc_weapon := weapon ;
40492: LD_ADDR_OWVAR 40
40496: PUSH
40497: LD_VAR 0 4
40501: ST_TO_ADDR
// vc_fuel_battery := fuel ;
40502: LD_ADDR_OWVAR 41
40506: PUSH
40507: LD_VAR 0 5
40511: ST_TO_ADDR
// end ;
40512: LD_VAR 0 6
40516: RET
// export function WantPlant ( unit ) ; var task ; begin
40517: LD_INT 0
40519: PPUSH
40520: PPUSH
// result := false ;
40521: LD_ADDR_VAR 0 2
40525: PUSH
40526: LD_INT 0
40528: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
40529: LD_ADDR_VAR 0 3
40533: PUSH
40534: LD_VAR 0 1
40538: PPUSH
40539: CALL_OW 437
40543: ST_TO_ADDR
// if task then
40544: LD_VAR 0 3
40548: IFFALSE 40576
// if task [ 1 ] [ 1 ] = p then
40550: LD_VAR 0 3
40554: PUSH
40555: LD_INT 1
40557: ARRAY
40558: PUSH
40559: LD_INT 1
40561: ARRAY
40562: PUSH
40563: LD_STRING p
40565: EQUAL
40566: IFFALSE 40576
// result := true ;
40568: LD_ADDR_VAR 0 2
40572: PUSH
40573: LD_INT 1
40575: ST_TO_ADDR
// end ;
40576: LD_VAR 0 2
40580: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
40581: LD_INT 0
40583: PPUSH
40584: PPUSH
40585: PPUSH
40586: PPUSH
// if pos < 1 then
40587: LD_VAR 0 2
40591: PUSH
40592: LD_INT 1
40594: LESS
40595: IFFALSE 40599
// exit ;
40597: GO 40902
// if pos = 1 then
40599: LD_VAR 0 2
40603: PUSH
40604: LD_INT 1
40606: EQUAL
40607: IFFALSE 40640
// result := Replace ( arr , pos [ 1 ] , value ) else
40609: LD_ADDR_VAR 0 4
40613: PUSH
40614: LD_VAR 0 1
40618: PPUSH
40619: LD_VAR 0 2
40623: PUSH
40624: LD_INT 1
40626: ARRAY
40627: PPUSH
40628: LD_VAR 0 3
40632: PPUSH
40633: CALL_OW 1
40637: ST_TO_ADDR
40638: GO 40902
// begin tmp := arr ;
40640: LD_ADDR_VAR 0 6
40644: PUSH
40645: LD_VAR 0 1
40649: ST_TO_ADDR
// s_arr := [ tmp ] ;
40650: LD_ADDR_VAR 0 7
40654: PUSH
40655: LD_VAR 0 6
40659: PUSH
40660: EMPTY
40661: LIST
40662: ST_TO_ADDR
// for i = 1 to pos - 1 do
40663: LD_ADDR_VAR 0 5
40667: PUSH
40668: DOUBLE
40669: LD_INT 1
40671: DEC
40672: ST_TO_ADDR
40673: LD_VAR 0 2
40677: PUSH
40678: LD_INT 1
40680: MINUS
40681: PUSH
40682: FOR_TO
40683: IFFALSE 40728
// begin tmp := tmp [ pos [ i ] ] ;
40685: LD_ADDR_VAR 0 6
40689: PUSH
40690: LD_VAR 0 6
40694: PUSH
40695: LD_VAR 0 2
40699: PUSH
40700: LD_VAR 0 5
40704: ARRAY
40705: ARRAY
40706: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
40707: LD_ADDR_VAR 0 7
40711: PUSH
40712: LD_VAR 0 7
40716: PUSH
40717: LD_VAR 0 6
40721: PUSH
40722: EMPTY
40723: LIST
40724: ADD
40725: ST_TO_ADDR
// end ;
40726: GO 40682
40728: POP
40729: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
40730: LD_ADDR_VAR 0 6
40734: PUSH
40735: LD_VAR 0 6
40739: PPUSH
40740: LD_VAR 0 2
40744: PUSH
40745: LD_VAR 0 2
40749: ARRAY
40750: PPUSH
40751: LD_VAR 0 3
40755: PPUSH
40756: CALL_OW 1
40760: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
40761: LD_ADDR_VAR 0 7
40765: PUSH
40766: LD_VAR 0 7
40770: PPUSH
40771: LD_VAR 0 7
40775: PPUSH
40776: LD_VAR 0 6
40780: PPUSH
40781: CALL_OW 1
40785: ST_TO_ADDR
// for i = s_arr downto 2 do
40786: LD_ADDR_VAR 0 5
40790: PUSH
40791: DOUBLE
40792: LD_VAR 0 7
40796: INC
40797: ST_TO_ADDR
40798: LD_INT 2
40800: PUSH
40801: FOR_DOWNTO
40802: IFFALSE 40886
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
40804: LD_ADDR_VAR 0 6
40808: PUSH
40809: LD_VAR 0 7
40813: PUSH
40814: LD_VAR 0 5
40818: PUSH
40819: LD_INT 1
40821: MINUS
40822: ARRAY
40823: PPUSH
40824: LD_VAR 0 2
40828: PUSH
40829: LD_VAR 0 5
40833: PUSH
40834: LD_INT 1
40836: MINUS
40837: ARRAY
40838: PPUSH
40839: LD_VAR 0 7
40843: PUSH
40844: LD_VAR 0 5
40848: ARRAY
40849: PPUSH
40850: CALL_OW 1
40854: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
40855: LD_ADDR_VAR 0 7
40859: PUSH
40860: LD_VAR 0 7
40864: PPUSH
40865: LD_VAR 0 5
40869: PUSH
40870: LD_INT 1
40872: MINUS
40873: PPUSH
40874: LD_VAR 0 6
40878: PPUSH
40879: CALL_OW 1
40883: ST_TO_ADDR
// end ;
40884: GO 40801
40886: POP
40887: POP
// result := s_arr [ 1 ] ;
40888: LD_ADDR_VAR 0 4
40892: PUSH
40893: LD_VAR 0 7
40897: PUSH
40898: LD_INT 1
40900: ARRAY
40901: ST_TO_ADDR
// end ; end ;
40902: LD_VAR 0 4
40906: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
40907: LD_INT 0
40909: PPUSH
40910: PPUSH
// if not list then
40911: LD_VAR 0 1
40915: NOT
40916: IFFALSE 40920
// exit ;
40918: GO 41011
// i := list [ pos1 ] ;
40920: LD_ADDR_VAR 0 5
40924: PUSH
40925: LD_VAR 0 1
40929: PUSH
40930: LD_VAR 0 2
40934: ARRAY
40935: ST_TO_ADDR
// if not i then
40936: LD_VAR 0 5
40940: NOT
40941: IFFALSE 40945
// exit ;
40943: GO 41011
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
40945: LD_ADDR_VAR 0 1
40949: PUSH
40950: LD_VAR 0 1
40954: PPUSH
40955: LD_VAR 0 2
40959: PPUSH
40960: LD_VAR 0 1
40964: PUSH
40965: LD_VAR 0 3
40969: ARRAY
40970: PPUSH
40971: CALL_OW 1
40975: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
40976: LD_ADDR_VAR 0 1
40980: PUSH
40981: LD_VAR 0 1
40985: PPUSH
40986: LD_VAR 0 3
40990: PPUSH
40991: LD_VAR 0 5
40995: PPUSH
40996: CALL_OW 1
41000: ST_TO_ADDR
// result := list ;
41001: LD_ADDR_VAR 0 4
41005: PUSH
41006: LD_VAR 0 1
41010: ST_TO_ADDR
// end ;
41011: LD_VAR 0 4
41015: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
41016: LD_INT 0
41018: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
41019: LD_ADDR_VAR 0 5
41023: PUSH
41024: LD_VAR 0 1
41028: PPUSH
41029: CALL_OW 250
41033: PPUSH
41034: LD_VAR 0 1
41038: PPUSH
41039: CALL_OW 251
41043: PPUSH
41044: LD_VAR 0 2
41048: PPUSH
41049: LD_VAR 0 3
41053: PPUSH
41054: LD_VAR 0 4
41058: PPUSH
41059: CALL 41069 0 5
41063: ST_TO_ADDR
// end ;
41064: LD_VAR 0 5
41068: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
41069: LD_INT 0
41071: PPUSH
41072: PPUSH
41073: PPUSH
41074: PPUSH
// if not list then
41075: LD_VAR 0 3
41079: NOT
41080: IFFALSE 41084
// exit ;
41082: GO 41472
// result := [ ] ;
41084: LD_ADDR_VAR 0 6
41088: PUSH
41089: EMPTY
41090: ST_TO_ADDR
// for i in list do
41091: LD_ADDR_VAR 0 7
41095: PUSH
41096: LD_VAR 0 3
41100: PUSH
41101: FOR_IN
41102: IFFALSE 41304
// begin tmp := GetDistUnitXY ( i , x , y ) ;
41104: LD_ADDR_VAR 0 9
41108: PUSH
41109: LD_VAR 0 7
41113: PPUSH
41114: LD_VAR 0 1
41118: PPUSH
41119: LD_VAR 0 2
41123: PPUSH
41124: CALL_OW 297
41128: ST_TO_ADDR
// if not result then
41129: LD_VAR 0 6
41133: NOT
41134: IFFALSE 41160
// result := [ [ i , tmp ] ] else
41136: LD_ADDR_VAR 0 6
41140: PUSH
41141: LD_VAR 0 7
41145: PUSH
41146: LD_VAR 0 9
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: EMPTY
41156: LIST
41157: ST_TO_ADDR
41158: GO 41302
// begin if result [ result ] [ 2 ] < tmp then
41160: LD_VAR 0 6
41164: PUSH
41165: LD_VAR 0 6
41169: ARRAY
41170: PUSH
41171: LD_INT 2
41173: ARRAY
41174: PUSH
41175: LD_VAR 0 9
41179: LESS
41180: IFFALSE 41222
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
41182: LD_ADDR_VAR 0 6
41186: PUSH
41187: LD_VAR 0 6
41191: PPUSH
41192: LD_VAR 0 6
41196: PUSH
41197: LD_INT 1
41199: PLUS
41200: PPUSH
41201: LD_VAR 0 7
41205: PUSH
41206: LD_VAR 0 9
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PPUSH
41215: CALL_OW 2
41219: ST_TO_ADDR
41220: GO 41302
// for j = 1 to result do
41222: LD_ADDR_VAR 0 8
41226: PUSH
41227: DOUBLE
41228: LD_INT 1
41230: DEC
41231: ST_TO_ADDR
41232: LD_VAR 0 6
41236: PUSH
41237: FOR_TO
41238: IFFALSE 41300
// begin if tmp < result [ j ] [ 2 ] then
41240: LD_VAR 0 9
41244: PUSH
41245: LD_VAR 0 6
41249: PUSH
41250: LD_VAR 0 8
41254: ARRAY
41255: PUSH
41256: LD_INT 2
41258: ARRAY
41259: LESS
41260: IFFALSE 41298
// begin result := Insert ( result , j , [ i , tmp ] ) ;
41262: LD_ADDR_VAR 0 6
41266: PUSH
41267: LD_VAR 0 6
41271: PPUSH
41272: LD_VAR 0 8
41276: PPUSH
41277: LD_VAR 0 7
41281: PUSH
41282: LD_VAR 0 9
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: PPUSH
41291: CALL_OW 2
41295: ST_TO_ADDR
// break ;
41296: GO 41300
// end ; end ;
41298: GO 41237
41300: POP
41301: POP
// end ; end ;
41302: GO 41101
41304: POP
41305: POP
// if result and not asc then
41306: LD_VAR 0 6
41310: PUSH
41311: LD_VAR 0 4
41315: NOT
41316: AND
41317: IFFALSE 41392
// begin tmp := result ;
41319: LD_ADDR_VAR 0 9
41323: PUSH
41324: LD_VAR 0 6
41328: ST_TO_ADDR
// for i = tmp downto 1 do
41329: LD_ADDR_VAR 0 7
41333: PUSH
41334: DOUBLE
41335: LD_VAR 0 9
41339: INC
41340: ST_TO_ADDR
41341: LD_INT 1
41343: PUSH
41344: FOR_DOWNTO
41345: IFFALSE 41390
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
41347: LD_ADDR_VAR 0 6
41351: PUSH
41352: LD_VAR 0 6
41356: PPUSH
41357: LD_VAR 0 9
41361: PUSH
41362: LD_VAR 0 7
41366: MINUS
41367: PUSH
41368: LD_INT 1
41370: PLUS
41371: PPUSH
41372: LD_VAR 0 9
41376: PUSH
41377: LD_VAR 0 7
41381: ARRAY
41382: PPUSH
41383: CALL_OW 1
41387: ST_TO_ADDR
41388: GO 41344
41390: POP
41391: POP
// end ; tmp := [ ] ;
41392: LD_ADDR_VAR 0 9
41396: PUSH
41397: EMPTY
41398: ST_TO_ADDR
// if mode then
41399: LD_VAR 0 5
41403: IFFALSE 41472
// begin for i = 1 to result do
41405: LD_ADDR_VAR 0 7
41409: PUSH
41410: DOUBLE
41411: LD_INT 1
41413: DEC
41414: ST_TO_ADDR
41415: LD_VAR 0 6
41419: PUSH
41420: FOR_TO
41421: IFFALSE 41460
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
41423: LD_ADDR_VAR 0 9
41427: PUSH
41428: LD_VAR 0 9
41432: PPUSH
41433: LD_VAR 0 7
41437: PPUSH
41438: LD_VAR 0 6
41442: PUSH
41443: LD_VAR 0 7
41447: ARRAY
41448: PUSH
41449: LD_INT 1
41451: ARRAY
41452: PPUSH
41453: CALL_OW 1
41457: ST_TO_ADDR
41458: GO 41420
41460: POP
41461: POP
// result := tmp ;
41462: LD_ADDR_VAR 0 6
41466: PUSH
41467: LD_VAR 0 9
41471: ST_TO_ADDR
// end ; end ;
41472: LD_VAR 0 6
41476: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
41477: LD_INT 0
41479: PPUSH
41480: PPUSH
41481: PPUSH
41482: PPUSH
41483: PPUSH
41484: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
41485: LD_ADDR_VAR 0 5
41489: PUSH
41490: LD_INT 0
41492: PUSH
41493: LD_INT 0
41495: PUSH
41496: LD_INT 0
41498: PUSH
41499: EMPTY
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: LIST
41505: LIST
41506: ST_TO_ADDR
// if not x or not y then
41507: LD_VAR 0 2
41511: NOT
41512: PUSH
41513: LD_VAR 0 3
41517: NOT
41518: OR
41519: IFFALSE 41523
// exit ;
41521: GO 43173
// if not range then
41523: LD_VAR 0 4
41527: NOT
41528: IFFALSE 41538
// range := 10 ;
41530: LD_ADDR_VAR 0 4
41534: PUSH
41535: LD_INT 10
41537: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41538: LD_ADDR_VAR 0 8
41542: PUSH
41543: LD_INT 81
41545: PUSH
41546: LD_VAR 0 1
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PUSH
41555: LD_INT 92
41557: PUSH
41558: LD_VAR 0 2
41562: PUSH
41563: LD_VAR 0 3
41567: PUSH
41568: LD_VAR 0 4
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: PUSH
41579: LD_INT 3
41581: PUSH
41582: LD_INT 21
41584: PUSH
41585: LD_INT 3
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: LIST
41600: PPUSH
41601: CALL_OW 69
41605: ST_TO_ADDR
// if not tmp then
41606: LD_VAR 0 8
41610: NOT
41611: IFFALSE 41615
// exit ;
41613: GO 43173
// for i in tmp do
41615: LD_ADDR_VAR 0 6
41619: PUSH
41620: LD_VAR 0 8
41624: PUSH
41625: FOR_IN
41626: IFFALSE 43148
// begin points := [ 0 , 0 , 0 ] ;
41628: LD_ADDR_VAR 0 9
41632: PUSH
41633: LD_INT 0
41635: PUSH
41636: LD_INT 0
41638: PUSH
41639: LD_INT 0
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: LIST
41646: ST_TO_ADDR
// bpoints := 1 ;
41647: LD_ADDR_VAR 0 10
41651: PUSH
41652: LD_INT 1
41654: ST_TO_ADDR
// case GetType ( i ) of unit_human :
41655: LD_VAR 0 6
41659: PPUSH
41660: CALL_OW 247
41664: PUSH
41665: LD_INT 1
41667: DOUBLE
41668: EQUAL
41669: IFTRUE 41673
41671: GO 42251
41673: POP
// begin if GetClass ( i ) = 1 then
41674: LD_VAR 0 6
41678: PPUSH
41679: CALL_OW 257
41683: PUSH
41684: LD_INT 1
41686: EQUAL
41687: IFFALSE 41708
// points := [ 10 , 5 , 3 ] ;
41689: LD_ADDR_VAR 0 9
41693: PUSH
41694: LD_INT 10
41696: PUSH
41697: LD_INT 5
41699: PUSH
41700: LD_INT 3
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: LIST
41707: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
41708: LD_VAR 0 6
41712: PPUSH
41713: CALL_OW 257
41717: PUSH
41718: LD_INT 2
41720: PUSH
41721: LD_INT 3
41723: PUSH
41724: LD_INT 4
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: LIST
41731: IN
41732: IFFALSE 41753
// points := [ 3 , 2 , 1 ] ;
41734: LD_ADDR_VAR 0 9
41738: PUSH
41739: LD_INT 3
41741: PUSH
41742: LD_INT 2
41744: PUSH
41745: LD_INT 1
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: LIST
41752: ST_TO_ADDR
// if GetClass ( i ) = 5 then
41753: LD_VAR 0 6
41757: PPUSH
41758: CALL_OW 257
41762: PUSH
41763: LD_INT 5
41765: EQUAL
41766: IFFALSE 41787
// points := [ 130 , 5 , 2 ] ;
41768: LD_ADDR_VAR 0 9
41772: PUSH
41773: LD_INT 130
41775: PUSH
41776: LD_INT 5
41778: PUSH
41779: LD_INT 2
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: LIST
41786: ST_TO_ADDR
// if GetClass ( i ) = 8 then
41787: LD_VAR 0 6
41791: PPUSH
41792: CALL_OW 257
41796: PUSH
41797: LD_INT 8
41799: EQUAL
41800: IFFALSE 41821
// points := [ 35 , 35 , 30 ] ;
41802: LD_ADDR_VAR 0 9
41806: PUSH
41807: LD_INT 35
41809: PUSH
41810: LD_INT 35
41812: PUSH
41813: LD_INT 30
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: LIST
41820: ST_TO_ADDR
// if GetClass ( i ) = 9 then
41821: LD_VAR 0 6
41825: PPUSH
41826: CALL_OW 257
41830: PUSH
41831: LD_INT 9
41833: EQUAL
41834: IFFALSE 41855
// points := [ 20 , 55 , 40 ] ;
41836: LD_ADDR_VAR 0 9
41840: PUSH
41841: LD_INT 20
41843: PUSH
41844: LD_INT 55
41846: PUSH
41847: LD_INT 40
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: LIST
41854: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
41855: LD_VAR 0 6
41859: PPUSH
41860: CALL_OW 257
41864: PUSH
41865: LD_INT 12
41867: PUSH
41868: LD_INT 16
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: IN
41875: IFFALSE 41896
// points := [ 5 , 3 , 2 ] ;
41877: LD_ADDR_VAR 0 9
41881: PUSH
41882: LD_INT 5
41884: PUSH
41885: LD_INT 3
41887: PUSH
41888: LD_INT 2
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: LIST
41895: ST_TO_ADDR
// if GetClass ( i ) = 17 then
41896: LD_VAR 0 6
41900: PPUSH
41901: CALL_OW 257
41905: PUSH
41906: LD_INT 17
41908: EQUAL
41909: IFFALSE 41930
// points := [ 100 , 50 , 75 ] ;
41911: LD_ADDR_VAR 0 9
41915: PUSH
41916: LD_INT 100
41918: PUSH
41919: LD_INT 50
41921: PUSH
41922: LD_INT 75
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: LIST
41929: ST_TO_ADDR
// if GetClass ( i ) = 15 then
41930: LD_VAR 0 6
41934: PPUSH
41935: CALL_OW 257
41939: PUSH
41940: LD_INT 15
41942: EQUAL
41943: IFFALSE 41964
// points := [ 10 , 5 , 3 ] ;
41945: LD_ADDR_VAR 0 9
41949: PUSH
41950: LD_INT 10
41952: PUSH
41953: LD_INT 5
41955: PUSH
41956: LD_INT 3
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: LIST
41963: ST_TO_ADDR
// if GetClass ( i ) = 14 then
41964: LD_VAR 0 6
41968: PPUSH
41969: CALL_OW 257
41973: PUSH
41974: LD_INT 14
41976: EQUAL
41977: IFFALSE 41998
// points := [ 10 , 0 , 0 ] ;
41979: LD_ADDR_VAR 0 9
41983: PUSH
41984: LD_INT 10
41986: PUSH
41987: LD_INT 0
41989: PUSH
41990: LD_INT 0
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: LIST
41997: ST_TO_ADDR
// if GetClass ( i ) = 11 then
41998: LD_VAR 0 6
42002: PPUSH
42003: CALL_OW 257
42007: PUSH
42008: LD_INT 11
42010: EQUAL
42011: IFFALSE 42032
// points := [ 30 , 10 , 5 ] ;
42013: LD_ADDR_VAR 0 9
42017: PUSH
42018: LD_INT 30
42020: PUSH
42021: LD_INT 10
42023: PUSH
42024: LD_INT 5
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: LIST
42031: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
42032: LD_VAR 0 1
42036: PPUSH
42037: LD_INT 5
42039: PPUSH
42040: CALL_OW 321
42044: PUSH
42045: LD_INT 2
42047: EQUAL
42048: IFFALSE 42065
// bpoints := bpoints * 1.8 ;
42050: LD_ADDR_VAR 0 10
42054: PUSH
42055: LD_VAR 0 10
42059: PUSH
42060: LD_REAL  1.80000000000000E+0000
42063: MUL
42064: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
42065: LD_VAR 0 6
42069: PPUSH
42070: CALL_OW 257
42074: PUSH
42075: LD_INT 1
42077: PUSH
42078: LD_INT 2
42080: PUSH
42081: LD_INT 3
42083: PUSH
42084: LD_INT 4
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: IN
42093: PUSH
42094: LD_VAR 0 1
42098: PPUSH
42099: LD_INT 51
42101: PPUSH
42102: CALL_OW 321
42106: PUSH
42107: LD_INT 2
42109: EQUAL
42110: AND
42111: IFFALSE 42128
// bpoints := bpoints * 1.2 ;
42113: LD_ADDR_VAR 0 10
42117: PUSH
42118: LD_VAR 0 10
42122: PUSH
42123: LD_REAL  1.20000000000000E+0000
42126: MUL
42127: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
42128: LD_VAR 0 6
42132: PPUSH
42133: CALL_OW 257
42137: PUSH
42138: LD_INT 5
42140: PUSH
42141: LD_INT 7
42143: PUSH
42144: LD_INT 9
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: LIST
42151: IN
42152: PUSH
42153: LD_VAR 0 1
42157: PPUSH
42158: LD_INT 52
42160: PPUSH
42161: CALL_OW 321
42165: PUSH
42166: LD_INT 2
42168: EQUAL
42169: AND
42170: IFFALSE 42187
// bpoints := bpoints * 1.5 ;
42172: LD_ADDR_VAR 0 10
42176: PUSH
42177: LD_VAR 0 10
42181: PUSH
42182: LD_REAL  1.50000000000000E+0000
42185: MUL
42186: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
42187: LD_VAR 0 1
42191: PPUSH
42192: LD_INT 66
42194: PPUSH
42195: CALL_OW 321
42199: PUSH
42200: LD_INT 2
42202: EQUAL
42203: IFFALSE 42220
// bpoints := bpoints * 1.1 ;
42205: LD_ADDR_VAR 0 10
42209: PUSH
42210: LD_VAR 0 10
42214: PUSH
42215: LD_REAL  1.10000000000000E+0000
42218: MUL
42219: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
42220: LD_ADDR_VAR 0 10
42224: PUSH
42225: LD_VAR 0 10
42229: PUSH
42230: LD_VAR 0 6
42234: PPUSH
42235: LD_INT 1
42237: PPUSH
42238: CALL_OW 259
42242: PUSH
42243: LD_REAL  1.15000000000000E+0000
42246: MUL
42247: MUL
42248: ST_TO_ADDR
// end ; unit_vehicle :
42249: GO 43077
42251: LD_INT 2
42253: DOUBLE
42254: EQUAL
42255: IFTRUE 42259
42257: GO 43065
42259: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
42260: LD_VAR 0 6
42264: PPUSH
42265: CALL_OW 264
42269: PUSH
42270: LD_INT 2
42272: PUSH
42273: LD_INT 42
42275: PUSH
42276: LD_INT 24
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: LIST
42283: IN
42284: IFFALSE 42305
// points := [ 25 , 5 , 3 ] ;
42286: LD_ADDR_VAR 0 9
42290: PUSH
42291: LD_INT 25
42293: PUSH
42294: LD_INT 5
42296: PUSH
42297: LD_INT 3
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: LIST
42304: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
42305: LD_VAR 0 6
42309: PPUSH
42310: CALL_OW 264
42314: PUSH
42315: LD_INT 4
42317: PUSH
42318: LD_INT 43
42320: PUSH
42321: LD_INT 25
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: LIST
42328: IN
42329: IFFALSE 42350
// points := [ 40 , 15 , 5 ] ;
42331: LD_ADDR_VAR 0 9
42335: PUSH
42336: LD_INT 40
42338: PUSH
42339: LD_INT 15
42341: PUSH
42342: LD_INT 5
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: LIST
42349: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
42350: LD_VAR 0 6
42354: PPUSH
42355: CALL_OW 264
42359: PUSH
42360: LD_INT 3
42362: PUSH
42363: LD_INT 23
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: IN
42370: IFFALSE 42391
// points := [ 7 , 25 , 8 ] ;
42372: LD_ADDR_VAR 0 9
42376: PUSH
42377: LD_INT 7
42379: PUSH
42380: LD_INT 25
42382: PUSH
42383: LD_INT 8
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: LIST
42390: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
42391: LD_VAR 0 6
42395: PPUSH
42396: CALL_OW 264
42400: PUSH
42401: LD_INT 5
42403: PUSH
42404: LD_INT 27
42406: PUSH
42407: LD_INT 44
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: LIST
42414: IN
42415: IFFALSE 42436
// points := [ 14 , 50 , 16 ] ;
42417: LD_ADDR_VAR 0 9
42421: PUSH
42422: LD_INT 14
42424: PUSH
42425: LD_INT 50
42427: PUSH
42428: LD_INT 16
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: LIST
42435: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
42436: LD_VAR 0 6
42440: PPUSH
42441: CALL_OW 264
42445: PUSH
42446: LD_INT 6
42448: PUSH
42449: LD_INT 46
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: IN
42456: IFFALSE 42477
// points := [ 32 , 120 , 70 ] ;
42458: LD_ADDR_VAR 0 9
42462: PUSH
42463: LD_INT 32
42465: PUSH
42466: LD_INT 120
42468: PUSH
42469: LD_INT 70
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: LIST
42476: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
42477: LD_VAR 0 6
42481: PPUSH
42482: CALL_OW 264
42486: PUSH
42487: LD_INT 7
42489: PUSH
42490: LD_INT 28
42492: PUSH
42493: LD_INT 45
42495: PUSH
42496: LD_INT 92
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: IN
42505: IFFALSE 42526
// points := [ 35 , 20 , 45 ] ;
42507: LD_ADDR_VAR 0 9
42511: PUSH
42512: LD_INT 35
42514: PUSH
42515: LD_INT 20
42517: PUSH
42518: LD_INT 45
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: LIST
42525: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
42526: LD_VAR 0 6
42530: PPUSH
42531: CALL_OW 264
42535: PUSH
42536: LD_INT 47
42538: PUSH
42539: EMPTY
42540: LIST
42541: IN
42542: IFFALSE 42563
// points := [ 67 , 45 , 75 ] ;
42544: LD_ADDR_VAR 0 9
42548: PUSH
42549: LD_INT 67
42551: PUSH
42552: LD_INT 45
42554: PUSH
42555: LD_INT 75
42557: PUSH
42558: EMPTY
42559: LIST
42560: LIST
42561: LIST
42562: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
42563: LD_VAR 0 6
42567: PPUSH
42568: CALL_OW 264
42572: PUSH
42573: LD_INT 26
42575: PUSH
42576: EMPTY
42577: LIST
42578: IN
42579: IFFALSE 42600
// points := [ 120 , 30 , 80 ] ;
42581: LD_ADDR_VAR 0 9
42585: PUSH
42586: LD_INT 120
42588: PUSH
42589: LD_INT 30
42591: PUSH
42592: LD_INT 80
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: LIST
42599: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
42600: LD_VAR 0 6
42604: PPUSH
42605: CALL_OW 264
42609: PUSH
42610: LD_INT 22
42612: PUSH
42613: EMPTY
42614: LIST
42615: IN
42616: IFFALSE 42637
// points := [ 40 , 1 , 1 ] ;
42618: LD_ADDR_VAR 0 9
42622: PUSH
42623: LD_INT 40
42625: PUSH
42626: LD_INT 1
42628: PUSH
42629: LD_INT 1
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: LIST
42636: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
42637: LD_VAR 0 6
42641: PPUSH
42642: CALL_OW 264
42646: PUSH
42647: LD_INT 29
42649: PUSH
42650: EMPTY
42651: LIST
42652: IN
42653: IFFALSE 42674
// points := [ 70 , 200 , 400 ] ;
42655: LD_ADDR_VAR 0 9
42659: PUSH
42660: LD_INT 70
42662: PUSH
42663: LD_INT 200
42665: PUSH
42666: LD_INT 400
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: LIST
42673: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
42674: LD_VAR 0 6
42678: PPUSH
42679: CALL_OW 264
42683: PUSH
42684: LD_INT 14
42686: PUSH
42687: LD_INT 53
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: IN
42694: IFFALSE 42715
// points := [ 40 , 10 , 20 ] ;
42696: LD_ADDR_VAR 0 9
42700: PUSH
42701: LD_INT 40
42703: PUSH
42704: LD_INT 10
42706: PUSH
42707: LD_INT 20
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: LIST
42714: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
42715: LD_VAR 0 6
42719: PPUSH
42720: CALL_OW 264
42724: PUSH
42725: LD_INT 9
42727: PUSH
42728: EMPTY
42729: LIST
42730: IN
42731: IFFALSE 42752
// points := [ 5 , 70 , 20 ] ;
42733: LD_ADDR_VAR 0 9
42737: PUSH
42738: LD_INT 5
42740: PUSH
42741: LD_INT 70
42743: PUSH
42744: LD_INT 20
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: LIST
42751: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
42752: LD_VAR 0 6
42756: PPUSH
42757: CALL_OW 264
42761: PUSH
42762: LD_INT 10
42764: PUSH
42765: EMPTY
42766: LIST
42767: IN
42768: IFFALSE 42789
// points := [ 35 , 110 , 70 ] ;
42770: LD_ADDR_VAR 0 9
42774: PUSH
42775: LD_INT 35
42777: PUSH
42778: LD_INT 110
42780: PUSH
42781: LD_INT 70
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: LIST
42788: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
42789: LD_VAR 0 6
42793: PPUSH
42794: CALL_OW 265
42798: PUSH
42799: LD_INT 25
42801: EQUAL
42802: IFFALSE 42823
// points := [ 80 , 65 , 100 ] ;
42804: LD_ADDR_VAR 0 9
42808: PUSH
42809: LD_INT 80
42811: PUSH
42812: LD_INT 65
42814: PUSH
42815: LD_INT 100
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: LIST
42822: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
42823: LD_VAR 0 6
42827: PPUSH
42828: CALL_OW 263
42832: PUSH
42833: LD_INT 1
42835: EQUAL
42836: IFFALSE 42871
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
42838: LD_ADDR_VAR 0 10
42842: PUSH
42843: LD_VAR 0 10
42847: PUSH
42848: LD_VAR 0 6
42852: PPUSH
42853: CALL_OW 311
42857: PPUSH
42858: LD_INT 3
42860: PPUSH
42861: CALL_OW 259
42865: PUSH
42866: LD_INT 4
42868: MUL
42869: MUL
42870: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
42871: LD_VAR 0 6
42875: PPUSH
42876: CALL_OW 263
42880: PUSH
42881: LD_INT 2
42883: EQUAL
42884: IFFALSE 42935
// begin j := IsControledBy ( i ) ;
42886: LD_ADDR_VAR 0 7
42890: PUSH
42891: LD_VAR 0 6
42895: PPUSH
42896: CALL_OW 312
42900: ST_TO_ADDR
// if j then
42901: LD_VAR 0 7
42905: IFFALSE 42935
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
42907: LD_ADDR_VAR 0 10
42911: PUSH
42912: LD_VAR 0 10
42916: PUSH
42917: LD_VAR 0 7
42921: PPUSH
42922: LD_INT 3
42924: PPUSH
42925: CALL_OW 259
42929: PUSH
42930: LD_INT 3
42932: MUL
42933: MUL
42934: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
42935: LD_VAR 0 6
42939: PPUSH
42940: CALL_OW 264
42944: PUSH
42945: LD_INT 5
42947: PUSH
42948: LD_INT 6
42950: PUSH
42951: LD_INT 46
42953: PUSH
42954: LD_INT 44
42956: PUSH
42957: LD_INT 47
42959: PUSH
42960: LD_INT 45
42962: PUSH
42963: LD_INT 28
42965: PUSH
42966: LD_INT 7
42968: PUSH
42969: LD_INT 27
42971: PUSH
42972: LD_INT 29
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: IN
42987: PUSH
42988: LD_VAR 0 1
42992: PPUSH
42993: LD_INT 52
42995: PPUSH
42996: CALL_OW 321
43000: PUSH
43001: LD_INT 2
43003: EQUAL
43004: AND
43005: IFFALSE 43022
// bpoints := bpoints * 1.2 ;
43007: LD_ADDR_VAR 0 10
43011: PUSH
43012: LD_VAR 0 10
43016: PUSH
43017: LD_REAL  1.20000000000000E+0000
43020: MUL
43021: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
43022: LD_VAR 0 6
43026: PPUSH
43027: CALL_OW 264
43031: PUSH
43032: LD_INT 6
43034: PUSH
43035: LD_INT 46
43037: PUSH
43038: LD_INT 47
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: LIST
43045: IN
43046: IFFALSE 43063
// bpoints := bpoints * 1.2 ;
43048: LD_ADDR_VAR 0 10
43052: PUSH
43053: LD_VAR 0 10
43057: PUSH
43058: LD_REAL  1.20000000000000E+0000
43061: MUL
43062: ST_TO_ADDR
// end ; unit_building :
43063: GO 43077
43065: LD_INT 3
43067: DOUBLE
43068: EQUAL
43069: IFTRUE 43073
43071: GO 43076
43073: POP
// ; end ;
43074: GO 43077
43076: POP
// for j = 1 to 3 do
43077: LD_ADDR_VAR 0 7
43081: PUSH
43082: DOUBLE
43083: LD_INT 1
43085: DEC
43086: ST_TO_ADDR
43087: LD_INT 3
43089: PUSH
43090: FOR_TO
43091: IFFALSE 43144
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
43093: LD_ADDR_VAR 0 5
43097: PUSH
43098: LD_VAR 0 5
43102: PPUSH
43103: LD_VAR 0 7
43107: PPUSH
43108: LD_VAR 0 5
43112: PUSH
43113: LD_VAR 0 7
43117: ARRAY
43118: PUSH
43119: LD_VAR 0 9
43123: PUSH
43124: LD_VAR 0 7
43128: ARRAY
43129: PUSH
43130: LD_VAR 0 10
43134: MUL
43135: PLUS
43136: PPUSH
43137: CALL_OW 1
43141: ST_TO_ADDR
43142: GO 43090
43144: POP
43145: POP
// end ;
43146: GO 41625
43148: POP
43149: POP
// result := Replace ( result , 4 , tmp ) ;
43150: LD_ADDR_VAR 0 5
43154: PUSH
43155: LD_VAR 0 5
43159: PPUSH
43160: LD_INT 4
43162: PPUSH
43163: LD_VAR 0 8
43167: PPUSH
43168: CALL_OW 1
43172: ST_TO_ADDR
// end ;
43173: LD_VAR 0 5
43177: RET
// export function DangerAtRange ( unit , range ) ; begin
43178: LD_INT 0
43180: PPUSH
// if not unit then
43181: LD_VAR 0 1
43185: NOT
43186: IFFALSE 43190
// exit ;
43188: GO 43235
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
43190: LD_ADDR_VAR 0 3
43194: PUSH
43195: LD_VAR 0 1
43199: PPUSH
43200: CALL_OW 255
43204: PPUSH
43205: LD_VAR 0 1
43209: PPUSH
43210: CALL_OW 250
43214: PPUSH
43215: LD_VAR 0 1
43219: PPUSH
43220: CALL_OW 251
43224: PPUSH
43225: LD_VAR 0 2
43229: PPUSH
43230: CALL 41477 0 4
43234: ST_TO_ADDR
// end ;
43235: LD_VAR 0 3
43239: RET
// export function DangerInArea ( side , area ) ; begin
43240: LD_INT 0
43242: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
43243: LD_ADDR_VAR 0 3
43247: PUSH
43248: LD_VAR 0 2
43252: PPUSH
43253: LD_INT 81
43255: PUSH
43256: LD_VAR 0 1
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: PPUSH
43265: CALL_OW 70
43269: ST_TO_ADDR
// end ;
43270: LD_VAR 0 3
43274: RET
// export function IsExtension ( b ) ; begin
43275: LD_INT 0
43277: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
43278: LD_ADDR_VAR 0 2
43282: PUSH
43283: LD_VAR 0 1
43287: PUSH
43288: LD_INT 23
43290: PUSH
43291: LD_INT 20
43293: PUSH
43294: LD_INT 22
43296: PUSH
43297: LD_INT 17
43299: PUSH
43300: LD_INT 24
43302: PUSH
43303: LD_INT 21
43305: PUSH
43306: LD_INT 19
43308: PUSH
43309: LD_INT 16
43311: PUSH
43312: LD_INT 25
43314: PUSH
43315: LD_INT 18
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: IN
43330: ST_TO_ADDR
// end ;
43331: LD_VAR 0 2
43335: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
43336: LD_INT 0
43338: PPUSH
43339: PPUSH
43340: PPUSH
// result := [ ] ;
43341: LD_ADDR_VAR 0 4
43345: PUSH
43346: EMPTY
43347: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
43348: LD_ADDR_VAR 0 5
43352: PUSH
43353: LD_VAR 0 2
43357: PPUSH
43358: LD_INT 21
43360: PUSH
43361: LD_INT 3
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PPUSH
43368: CALL_OW 70
43372: ST_TO_ADDR
// if not tmp then
43373: LD_VAR 0 5
43377: NOT
43378: IFFALSE 43382
// exit ;
43380: GO 43446
// if checkLink then
43382: LD_VAR 0 3
43386: IFFALSE 43436
// begin for i in tmp do
43388: LD_ADDR_VAR 0 6
43392: PUSH
43393: LD_VAR 0 5
43397: PUSH
43398: FOR_IN
43399: IFFALSE 43434
// if GetBase ( i ) <> base then
43401: LD_VAR 0 6
43405: PPUSH
43406: CALL_OW 274
43410: PUSH
43411: LD_VAR 0 1
43415: NONEQUAL
43416: IFFALSE 43432
// ComLinkToBase ( base , i ) ;
43418: LD_VAR 0 1
43422: PPUSH
43423: LD_VAR 0 6
43427: PPUSH
43428: CALL_OW 169
43432: GO 43398
43434: POP
43435: POP
// end ; result := tmp ;
43436: LD_ADDR_VAR 0 4
43440: PUSH
43441: LD_VAR 0 5
43445: ST_TO_ADDR
// end ;
43446: LD_VAR 0 4
43450: RET
// export function ComComplete ( units , b ) ; var i ; begin
43451: LD_INT 0
43453: PPUSH
43454: PPUSH
// if not units then
43455: LD_VAR 0 1
43459: NOT
43460: IFFALSE 43464
// exit ;
43462: GO 43554
// for i in units do
43464: LD_ADDR_VAR 0 4
43468: PUSH
43469: LD_VAR 0 1
43473: PUSH
43474: FOR_IN
43475: IFFALSE 43552
// if BuildingStatus ( b ) = bs_build then
43477: LD_VAR 0 2
43481: PPUSH
43482: CALL_OW 461
43486: PUSH
43487: LD_INT 1
43489: EQUAL
43490: IFFALSE 43550
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
43492: LD_VAR 0 4
43496: PPUSH
43497: LD_STRING h
43499: PUSH
43500: LD_VAR 0 2
43504: PPUSH
43505: CALL_OW 250
43509: PUSH
43510: LD_VAR 0 2
43514: PPUSH
43515: CALL_OW 251
43519: PUSH
43520: LD_VAR 0 2
43524: PUSH
43525: LD_INT 0
43527: PUSH
43528: LD_INT 0
43530: PUSH
43531: LD_INT 0
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: LIST
43541: LIST
43542: PUSH
43543: EMPTY
43544: LIST
43545: PPUSH
43546: CALL_OW 446
43550: GO 43474
43552: POP
43553: POP
// end ;
43554: LD_VAR 0 3
43558: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
43559: LD_INT 0
43561: PPUSH
43562: PPUSH
43563: PPUSH
43564: PPUSH
43565: PPUSH
43566: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
43567: LD_VAR 0 1
43571: NOT
43572: PUSH
43573: LD_VAR 0 1
43577: PPUSH
43578: CALL_OW 263
43582: PUSH
43583: LD_INT 2
43585: NONEQUAL
43586: OR
43587: IFFALSE 43591
// exit ;
43589: GO 43907
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
43591: LD_ADDR_VAR 0 6
43595: PUSH
43596: LD_INT 22
43598: PUSH
43599: LD_VAR 0 1
43603: PPUSH
43604: CALL_OW 255
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: LD_INT 2
43615: PUSH
43616: LD_INT 30
43618: PUSH
43619: LD_INT 36
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: PUSH
43626: LD_INT 34
43628: PUSH
43629: LD_INT 31
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: LIST
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PPUSH
43645: CALL_OW 69
43649: ST_TO_ADDR
// if not tmp then
43650: LD_VAR 0 6
43654: NOT
43655: IFFALSE 43659
// exit ;
43657: GO 43907
// result := [ ] ;
43659: LD_ADDR_VAR 0 2
43663: PUSH
43664: EMPTY
43665: ST_TO_ADDR
// for i in tmp do
43666: LD_ADDR_VAR 0 3
43670: PUSH
43671: LD_VAR 0 6
43675: PUSH
43676: FOR_IN
43677: IFFALSE 43748
// begin t := UnitsInside ( i ) ;
43679: LD_ADDR_VAR 0 4
43683: PUSH
43684: LD_VAR 0 3
43688: PPUSH
43689: CALL_OW 313
43693: ST_TO_ADDR
// if t then
43694: LD_VAR 0 4
43698: IFFALSE 43746
// for j in t do
43700: LD_ADDR_VAR 0 7
43704: PUSH
43705: LD_VAR 0 4
43709: PUSH
43710: FOR_IN
43711: IFFALSE 43744
// result := Replace ( result , result + 1 , j ) ;
43713: LD_ADDR_VAR 0 2
43717: PUSH
43718: LD_VAR 0 2
43722: PPUSH
43723: LD_VAR 0 2
43727: PUSH
43728: LD_INT 1
43730: PLUS
43731: PPUSH
43732: LD_VAR 0 7
43736: PPUSH
43737: CALL_OW 1
43741: ST_TO_ADDR
43742: GO 43710
43744: POP
43745: POP
// end ;
43746: GO 43676
43748: POP
43749: POP
// if not result then
43750: LD_VAR 0 2
43754: NOT
43755: IFFALSE 43759
// exit ;
43757: GO 43907
// mech := result [ 1 ] ;
43759: LD_ADDR_VAR 0 5
43763: PUSH
43764: LD_VAR 0 2
43768: PUSH
43769: LD_INT 1
43771: ARRAY
43772: ST_TO_ADDR
// if result > 1 then
43773: LD_VAR 0 2
43777: PUSH
43778: LD_INT 1
43780: GREATER
43781: IFFALSE 43893
// begin for i = 2 to result do
43783: LD_ADDR_VAR 0 3
43787: PUSH
43788: DOUBLE
43789: LD_INT 2
43791: DEC
43792: ST_TO_ADDR
43793: LD_VAR 0 2
43797: PUSH
43798: FOR_TO
43799: IFFALSE 43891
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
43801: LD_ADDR_VAR 0 4
43805: PUSH
43806: LD_VAR 0 2
43810: PUSH
43811: LD_VAR 0 3
43815: ARRAY
43816: PPUSH
43817: LD_INT 3
43819: PPUSH
43820: CALL_OW 259
43824: PUSH
43825: LD_VAR 0 2
43829: PUSH
43830: LD_VAR 0 3
43834: ARRAY
43835: PPUSH
43836: CALL_OW 432
43840: MINUS
43841: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
43842: LD_VAR 0 4
43846: PUSH
43847: LD_VAR 0 5
43851: PPUSH
43852: LD_INT 3
43854: PPUSH
43855: CALL_OW 259
43859: PUSH
43860: LD_VAR 0 5
43864: PPUSH
43865: CALL_OW 432
43869: MINUS
43870: GREATEREQUAL
43871: IFFALSE 43889
// mech := result [ i ] ;
43873: LD_ADDR_VAR 0 5
43877: PUSH
43878: LD_VAR 0 2
43882: PUSH
43883: LD_VAR 0 3
43887: ARRAY
43888: ST_TO_ADDR
// end ;
43889: GO 43798
43891: POP
43892: POP
// end ; ComLinkTo ( vehicle , mech ) ;
43893: LD_VAR 0 1
43897: PPUSH
43898: LD_VAR 0 5
43902: PPUSH
43903: CALL_OW 135
// end ;
43907: LD_VAR 0 2
43911: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
43912: LD_INT 0
43914: PPUSH
43915: PPUSH
43916: PPUSH
43917: PPUSH
43918: PPUSH
43919: PPUSH
43920: PPUSH
43921: PPUSH
43922: PPUSH
43923: PPUSH
43924: PPUSH
43925: PPUSH
43926: PPUSH
// result := [ ] ;
43927: LD_ADDR_VAR 0 7
43931: PUSH
43932: EMPTY
43933: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
43934: LD_VAR 0 1
43938: PPUSH
43939: CALL_OW 266
43943: PUSH
43944: LD_INT 0
43946: PUSH
43947: LD_INT 1
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: IN
43954: NOT
43955: IFFALSE 43959
// exit ;
43957: GO 45593
// if name then
43959: LD_VAR 0 3
43963: IFFALSE 43979
// SetBName ( base_dep , name ) ;
43965: LD_VAR 0 1
43969: PPUSH
43970: LD_VAR 0 3
43974: PPUSH
43975: CALL_OW 500
// base := GetBase ( base_dep ) ;
43979: LD_ADDR_VAR 0 15
43983: PUSH
43984: LD_VAR 0 1
43988: PPUSH
43989: CALL_OW 274
43993: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
43994: LD_ADDR_VAR 0 16
43998: PUSH
43999: LD_VAR 0 1
44003: PPUSH
44004: CALL_OW 255
44008: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
44009: LD_ADDR_VAR 0 17
44013: PUSH
44014: LD_VAR 0 1
44018: PPUSH
44019: CALL_OW 248
44023: ST_TO_ADDR
// if sources then
44024: LD_VAR 0 5
44028: IFFALSE 44075
// for i = 1 to 3 do
44030: LD_ADDR_VAR 0 8
44034: PUSH
44035: DOUBLE
44036: LD_INT 1
44038: DEC
44039: ST_TO_ADDR
44040: LD_INT 3
44042: PUSH
44043: FOR_TO
44044: IFFALSE 44073
// AddResourceType ( base , i , sources [ i ] ) ;
44046: LD_VAR 0 15
44050: PPUSH
44051: LD_VAR 0 8
44055: PPUSH
44056: LD_VAR 0 5
44060: PUSH
44061: LD_VAR 0 8
44065: ARRAY
44066: PPUSH
44067: CALL_OW 276
44071: GO 44043
44073: POP
44074: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
44075: LD_ADDR_VAR 0 18
44079: PUSH
44080: LD_VAR 0 15
44084: PPUSH
44085: LD_VAR 0 2
44089: PPUSH
44090: LD_INT 1
44092: PPUSH
44093: CALL 43336 0 3
44097: ST_TO_ADDR
// InitHc ;
44098: CALL_OW 19
// InitUc ;
44102: CALL_OW 18
// uc_side := side ;
44106: LD_ADDR_OWVAR 20
44110: PUSH
44111: LD_VAR 0 16
44115: ST_TO_ADDR
// uc_nation := nation ;
44116: LD_ADDR_OWVAR 21
44120: PUSH
44121: LD_VAR 0 17
44125: ST_TO_ADDR
// if buildings then
44126: LD_VAR 0 18
44130: IFFALSE 45452
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
44132: LD_ADDR_VAR 0 19
44136: PUSH
44137: LD_VAR 0 18
44141: PPUSH
44142: LD_INT 2
44144: PUSH
44145: LD_INT 30
44147: PUSH
44148: LD_INT 29
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: PUSH
44155: LD_INT 30
44157: PUSH
44158: LD_INT 30
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: LIST
44169: PPUSH
44170: CALL_OW 72
44174: ST_TO_ADDR
// if tmp then
44175: LD_VAR 0 19
44179: IFFALSE 44227
// for i in tmp do
44181: LD_ADDR_VAR 0 8
44185: PUSH
44186: LD_VAR 0 19
44190: PUSH
44191: FOR_IN
44192: IFFALSE 44225
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
44194: LD_VAR 0 8
44198: PPUSH
44199: CALL_OW 250
44203: PPUSH
44204: LD_VAR 0 8
44208: PPUSH
44209: CALL_OW 251
44213: PPUSH
44214: LD_VAR 0 16
44218: PPUSH
44219: CALL_OW 441
44223: GO 44191
44225: POP
44226: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
44227: LD_VAR 0 18
44231: PPUSH
44232: LD_INT 2
44234: PUSH
44235: LD_INT 30
44237: PUSH
44238: LD_INT 32
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 30
44247: PUSH
44248: LD_INT 33
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: LIST
44259: PPUSH
44260: CALL_OW 72
44264: IFFALSE 44352
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
44266: LD_ADDR_VAR 0 8
44270: PUSH
44271: LD_VAR 0 18
44275: PPUSH
44276: LD_INT 2
44278: PUSH
44279: LD_INT 30
44281: PUSH
44282: LD_INT 32
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 30
44291: PUSH
44292: LD_INT 33
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: LIST
44303: PPUSH
44304: CALL_OW 72
44308: PUSH
44309: FOR_IN
44310: IFFALSE 44350
// begin if not GetBWeapon ( i ) then
44312: LD_VAR 0 8
44316: PPUSH
44317: CALL_OW 269
44321: NOT
44322: IFFALSE 44348
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
44324: LD_VAR 0 8
44328: PPUSH
44329: LD_VAR 0 8
44333: PPUSH
44334: LD_VAR 0 2
44338: PPUSH
44339: CALL 45598 0 2
44343: PPUSH
44344: CALL_OW 431
// end ;
44348: GO 44309
44350: POP
44351: POP
// end ; for i = 1 to personel do
44352: LD_ADDR_VAR 0 8
44356: PUSH
44357: DOUBLE
44358: LD_INT 1
44360: DEC
44361: ST_TO_ADDR
44362: LD_VAR 0 6
44366: PUSH
44367: FOR_TO
44368: IFFALSE 45432
// begin if i > 4 then
44370: LD_VAR 0 8
44374: PUSH
44375: LD_INT 4
44377: GREATER
44378: IFFALSE 44382
// break ;
44380: GO 45432
// case i of 1 :
44382: LD_VAR 0 8
44386: PUSH
44387: LD_INT 1
44389: DOUBLE
44390: EQUAL
44391: IFTRUE 44395
44393: GO 44475
44395: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
44396: LD_ADDR_VAR 0 12
44400: PUSH
44401: LD_VAR 0 18
44405: PPUSH
44406: LD_INT 22
44408: PUSH
44409: LD_VAR 0 16
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: PUSH
44418: LD_INT 58
44420: PUSH
44421: EMPTY
44422: LIST
44423: PUSH
44424: LD_INT 2
44426: PUSH
44427: LD_INT 30
44429: PUSH
44430: LD_INT 32
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 30
44439: PUSH
44440: LD_INT 4
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 30
44449: PUSH
44450: LD_INT 5
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: LIST
44467: PPUSH
44468: CALL_OW 72
44472: ST_TO_ADDR
44473: GO 44697
44475: LD_INT 2
44477: DOUBLE
44478: EQUAL
44479: IFTRUE 44483
44481: GO 44545
44483: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
44484: LD_ADDR_VAR 0 12
44488: PUSH
44489: LD_VAR 0 18
44493: PPUSH
44494: LD_INT 22
44496: PUSH
44497: LD_VAR 0 16
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 2
44508: PUSH
44509: LD_INT 30
44511: PUSH
44512: LD_INT 0
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 30
44521: PUSH
44522: LD_INT 1
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: LIST
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PPUSH
44538: CALL_OW 72
44542: ST_TO_ADDR
44543: GO 44697
44545: LD_INT 3
44547: DOUBLE
44548: EQUAL
44549: IFTRUE 44553
44551: GO 44615
44553: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
44554: LD_ADDR_VAR 0 12
44558: PUSH
44559: LD_VAR 0 18
44563: PPUSH
44564: LD_INT 22
44566: PUSH
44567: LD_VAR 0 16
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 2
44578: PUSH
44579: LD_INT 30
44581: PUSH
44582: LD_INT 2
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 30
44591: PUSH
44592: LD_INT 3
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: LIST
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PPUSH
44608: CALL_OW 72
44612: ST_TO_ADDR
44613: GO 44697
44615: LD_INT 4
44617: DOUBLE
44618: EQUAL
44619: IFTRUE 44623
44621: GO 44696
44623: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
44624: LD_ADDR_VAR 0 12
44628: PUSH
44629: LD_VAR 0 18
44633: PPUSH
44634: LD_INT 22
44636: PUSH
44637: LD_VAR 0 16
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 2
44648: PUSH
44649: LD_INT 30
44651: PUSH
44652: LD_INT 6
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 30
44661: PUSH
44662: LD_INT 7
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 30
44671: PUSH
44672: LD_INT 8
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PPUSH
44689: CALL_OW 72
44693: ST_TO_ADDR
44694: GO 44697
44696: POP
// if i = 1 then
44697: LD_VAR 0 8
44701: PUSH
44702: LD_INT 1
44704: EQUAL
44705: IFFALSE 44816
// begin tmp := [ ] ;
44707: LD_ADDR_VAR 0 19
44711: PUSH
44712: EMPTY
44713: ST_TO_ADDR
// for j in f do
44714: LD_ADDR_VAR 0 9
44718: PUSH
44719: LD_VAR 0 12
44723: PUSH
44724: FOR_IN
44725: IFFALSE 44798
// if GetBType ( j ) = b_bunker then
44727: LD_VAR 0 9
44731: PPUSH
44732: CALL_OW 266
44736: PUSH
44737: LD_INT 32
44739: EQUAL
44740: IFFALSE 44767
// tmp := Insert ( tmp , 1 , j ) else
44742: LD_ADDR_VAR 0 19
44746: PUSH
44747: LD_VAR 0 19
44751: PPUSH
44752: LD_INT 1
44754: PPUSH
44755: LD_VAR 0 9
44759: PPUSH
44760: CALL_OW 2
44764: ST_TO_ADDR
44765: GO 44796
// tmp := Insert ( tmp , tmp + 1 , j ) ;
44767: LD_ADDR_VAR 0 19
44771: PUSH
44772: LD_VAR 0 19
44776: PPUSH
44777: LD_VAR 0 19
44781: PUSH
44782: LD_INT 1
44784: PLUS
44785: PPUSH
44786: LD_VAR 0 9
44790: PPUSH
44791: CALL_OW 2
44795: ST_TO_ADDR
44796: GO 44724
44798: POP
44799: POP
// if tmp then
44800: LD_VAR 0 19
44804: IFFALSE 44816
// f := tmp ;
44806: LD_ADDR_VAR 0 12
44810: PUSH
44811: LD_VAR 0 19
44815: ST_TO_ADDR
// end ; x := personel [ i ] ;
44816: LD_ADDR_VAR 0 13
44820: PUSH
44821: LD_VAR 0 6
44825: PUSH
44826: LD_VAR 0 8
44830: ARRAY
44831: ST_TO_ADDR
// if x = - 1 then
44832: LD_VAR 0 13
44836: PUSH
44837: LD_INT 1
44839: NEG
44840: EQUAL
44841: IFFALSE 45050
// begin for j in f do
44843: LD_ADDR_VAR 0 9
44847: PUSH
44848: LD_VAR 0 12
44852: PUSH
44853: FOR_IN
44854: IFFALSE 45046
// repeat InitHc ;
44856: CALL_OW 19
// if GetBType ( j ) = b_barracks then
44860: LD_VAR 0 9
44864: PPUSH
44865: CALL_OW 266
44869: PUSH
44870: LD_INT 5
44872: EQUAL
44873: IFFALSE 44943
// begin if UnitsInside ( j ) < 3 then
44875: LD_VAR 0 9
44879: PPUSH
44880: CALL_OW 313
44884: PUSH
44885: LD_INT 3
44887: LESS
44888: IFFALSE 44924
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44890: LD_INT 0
44892: PPUSH
44893: LD_INT 5
44895: PUSH
44896: LD_INT 8
44898: PUSH
44899: LD_INT 9
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: LIST
44906: PUSH
44907: LD_VAR 0 17
44911: ARRAY
44912: PPUSH
44913: LD_VAR 0 4
44917: PPUSH
44918: CALL_OW 380
44922: GO 44941
// PrepareHuman ( false , i , skill ) ;
44924: LD_INT 0
44926: PPUSH
44927: LD_VAR 0 8
44931: PPUSH
44932: LD_VAR 0 4
44936: PPUSH
44937: CALL_OW 380
// end else
44941: GO 44960
// PrepareHuman ( false , i , skill ) ;
44943: LD_INT 0
44945: PPUSH
44946: LD_VAR 0 8
44950: PPUSH
44951: LD_VAR 0 4
44955: PPUSH
44956: CALL_OW 380
// un := CreateHuman ;
44960: LD_ADDR_VAR 0 14
44964: PUSH
44965: CALL_OW 44
44969: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44970: LD_ADDR_VAR 0 7
44974: PUSH
44975: LD_VAR 0 7
44979: PPUSH
44980: LD_INT 1
44982: PPUSH
44983: LD_VAR 0 14
44987: PPUSH
44988: CALL_OW 2
44992: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
44993: LD_VAR 0 14
44997: PPUSH
44998: LD_VAR 0 9
45002: PPUSH
45003: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
45007: LD_VAR 0 9
45011: PPUSH
45012: CALL_OW 313
45016: PUSH
45017: LD_INT 6
45019: EQUAL
45020: PUSH
45021: LD_VAR 0 9
45025: PPUSH
45026: CALL_OW 266
45030: PUSH
45031: LD_INT 32
45033: PUSH
45034: LD_INT 31
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: IN
45041: OR
45042: IFFALSE 44856
45044: GO 44853
45046: POP
45047: POP
// end else
45048: GO 45430
// for j = 1 to x do
45050: LD_ADDR_VAR 0 9
45054: PUSH
45055: DOUBLE
45056: LD_INT 1
45058: DEC
45059: ST_TO_ADDR
45060: LD_VAR 0 13
45064: PUSH
45065: FOR_TO
45066: IFFALSE 45428
// begin InitHc ;
45068: CALL_OW 19
// if not f then
45072: LD_VAR 0 12
45076: NOT
45077: IFFALSE 45166
// begin PrepareHuman ( false , i , skill ) ;
45079: LD_INT 0
45081: PPUSH
45082: LD_VAR 0 8
45086: PPUSH
45087: LD_VAR 0 4
45091: PPUSH
45092: CALL_OW 380
// un := CreateHuman ;
45096: LD_ADDR_VAR 0 14
45100: PUSH
45101: CALL_OW 44
45105: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45106: LD_ADDR_VAR 0 7
45110: PUSH
45111: LD_VAR 0 7
45115: PPUSH
45116: LD_INT 1
45118: PPUSH
45119: LD_VAR 0 14
45123: PPUSH
45124: CALL_OW 2
45128: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45129: LD_VAR 0 14
45133: PPUSH
45134: LD_VAR 0 1
45138: PPUSH
45139: CALL_OW 250
45143: PPUSH
45144: LD_VAR 0 1
45148: PPUSH
45149: CALL_OW 251
45153: PPUSH
45154: LD_INT 10
45156: PPUSH
45157: LD_INT 0
45159: PPUSH
45160: CALL_OW 50
// continue ;
45164: GO 45065
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
45166: LD_VAR 0 12
45170: PUSH
45171: LD_INT 1
45173: ARRAY
45174: PPUSH
45175: CALL_OW 313
45179: PUSH
45180: LD_VAR 0 12
45184: PUSH
45185: LD_INT 1
45187: ARRAY
45188: PPUSH
45189: CALL_OW 266
45193: PUSH
45194: LD_INT 32
45196: PUSH
45197: LD_INT 31
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: IN
45204: AND
45205: PUSH
45206: LD_VAR 0 12
45210: PUSH
45211: LD_INT 1
45213: ARRAY
45214: PPUSH
45215: CALL_OW 313
45219: PUSH
45220: LD_INT 6
45222: EQUAL
45223: OR
45224: IFFALSE 45244
// f := Delete ( f , 1 ) ;
45226: LD_ADDR_VAR 0 12
45230: PUSH
45231: LD_VAR 0 12
45235: PPUSH
45236: LD_INT 1
45238: PPUSH
45239: CALL_OW 3
45243: ST_TO_ADDR
// if not f then
45244: LD_VAR 0 12
45248: NOT
45249: IFFALSE 45267
// begin x := x + 2 ;
45251: LD_ADDR_VAR 0 13
45255: PUSH
45256: LD_VAR 0 13
45260: PUSH
45261: LD_INT 2
45263: PLUS
45264: ST_TO_ADDR
// continue ;
45265: GO 45065
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
45267: LD_VAR 0 12
45271: PUSH
45272: LD_INT 1
45274: ARRAY
45275: PPUSH
45276: CALL_OW 266
45280: PUSH
45281: LD_INT 5
45283: EQUAL
45284: IFFALSE 45358
// begin if UnitsInside ( f [ 1 ] ) < 3 then
45286: LD_VAR 0 12
45290: PUSH
45291: LD_INT 1
45293: ARRAY
45294: PPUSH
45295: CALL_OW 313
45299: PUSH
45300: LD_INT 3
45302: LESS
45303: IFFALSE 45339
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45305: LD_INT 0
45307: PPUSH
45308: LD_INT 5
45310: PUSH
45311: LD_INT 8
45313: PUSH
45314: LD_INT 9
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: LIST
45321: PUSH
45322: LD_VAR 0 17
45326: ARRAY
45327: PPUSH
45328: LD_VAR 0 4
45332: PPUSH
45333: CALL_OW 380
45337: GO 45356
// PrepareHuman ( false , i , skill ) ;
45339: LD_INT 0
45341: PPUSH
45342: LD_VAR 0 8
45346: PPUSH
45347: LD_VAR 0 4
45351: PPUSH
45352: CALL_OW 380
// end else
45356: GO 45375
// PrepareHuman ( false , i , skill ) ;
45358: LD_INT 0
45360: PPUSH
45361: LD_VAR 0 8
45365: PPUSH
45366: LD_VAR 0 4
45370: PPUSH
45371: CALL_OW 380
// un := CreateHuman ;
45375: LD_ADDR_VAR 0 14
45379: PUSH
45380: CALL_OW 44
45384: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45385: LD_ADDR_VAR 0 7
45389: PUSH
45390: LD_VAR 0 7
45394: PPUSH
45395: LD_INT 1
45397: PPUSH
45398: LD_VAR 0 14
45402: PPUSH
45403: CALL_OW 2
45407: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
45408: LD_VAR 0 14
45412: PPUSH
45413: LD_VAR 0 12
45417: PUSH
45418: LD_INT 1
45420: ARRAY
45421: PPUSH
45422: CALL_OW 52
// end ;
45426: GO 45065
45428: POP
45429: POP
// end ;
45430: GO 44367
45432: POP
45433: POP
// result := result ^ buildings ;
45434: LD_ADDR_VAR 0 7
45438: PUSH
45439: LD_VAR 0 7
45443: PUSH
45444: LD_VAR 0 18
45448: ADD
45449: ST_TO_ADDR
// end else
45450: GO 45593
// begin for i = 1 to personel do
45452: LD_ADDR_VAR 0 8
45456: PUSH
45457: DOUBLE
45458: LD_INT 1
45460: DEC
45461: ST_TO_ADDR
45462: LD_VAR 0 6
45466: PUSH
45467: FOR_TO
45468: IFFALSE 45591
// begin if i > 4 then
45470: LD_VAR 0 8
45474: PUSH
45475: LD_INT 4
45477: GREATER
45478: IFFALSE 45482
// break ;
45480: GO 45591
// x := personel [ i ] ;
45482: LD_ADDR_VAR 0 13
45486: PUSH
45487: LD_VAR 0 6
45491: PUSH
45492: LD_VAR 0 8
45496: ARRAY
45497: ST_TO_ADDR
// if x = - 1 then
45498: LD_VAR 0 13
45502: PUSH
45503: LD_INT 1
45505: NEG
45506: EQUAL
45507: IFFALSE 45511
// continue ;
45509: GO 45467
// PrepareHuman ( false , i , skill ) ;
45511: LD_INT 0
45513: PPUSH
45514: LD_VAR 0 8
45518: PPUSH
45519: LD_VAR 0 4
45523: PPUSH
45524: CALL_OW 380
// un := CreateHuman ;
45528: LD_ADDR_VAR 0 14
45532: PUSH
45533: CALL_OW 44
45537: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45538: LD_VAR 0 14
45542: PPUSH
45543: LD_VAR 0 1
45547: PPUSH
45548: CALL_OW 250
45552: PPUSH
45553: LD_VAR 0 1
45557: PPUSH
45558: CALL_OW 251
45562: PPUSH
45563: LD_INT 10
45565: PPUSH
45566: LD_INT 0
45568: PPUSH
45569: CALL_OW 50
// result := result ^ un ;
45573: LD_ADDR_VAR 0 7
45577: PUSH
45578: LD_VAR 0 7
45582: PUSH
45583: LD_VAR 0 14
45587: ADD
45588: ST_TO_ADDR
// end ;
45589: GO 45467
45591: POP
45592: POP
// end ; end ;
45593: LD_VAR 0 7
45597: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
45598: LD_INT 0
45600: PPUSH
45601: PPUSH
45602: PPUSH
45603: PPUSH
45604: PPUSH
45605: PPUSH
45606: PPUSH
45607: PPUSH
45608: PPUSH
45609: PPUSH
45610: PPUSH
45611: PPUSH
45612: PPUSH
45613: PPUSH
45614: PPUSH
45615: PPUSH
// result := false ;
45616: LD_ADDR_VAR 0 3
45620: PUSH
45621: LD_INT 0
45623: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
45624: LD_VAR 0 1
45628: NOT
45629: PUSH
45630: LD_VAR 0 1
45634: PPUSH
45635: CALL_OW 266
45639: PUSH
45640: LD_INT 32
45642: PUSH
45643: LD_INT 33
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: IN
45650: NOT
45651: OR
45652: IFFALSE 45656
// exit ;
45654: GO 46765
// nat := GetNation ( tower ) ;
45656: LD_ADDR_VAR 0 12
45660: PUSH
45661: LD_VAR 0 1
45665: PPUSH
45666: CALL_OW 248
45670: ST_TO_ADDR
// side := GetSide ( tower ) ;
45671: LD_ADDR_VAR 0 16
45675: PUSH
45676: LD_VAR 0 1
45680: PPUSH
45681: CALL_OW 255
45685: ST_TO_ADDR
// x := GetX ( tower ) ;
45686: LD_ADDR_VAR 0 10
45690: PUSH
45691: LD_VAR 0 1
45695: PPUSH
45696: CALL_OW 250
45700: ST_TO_ADDR
// y := GetY ( tower ) ;
45701: LD_ADDR_VAR 0 11
45705: PUSH
45706: LD_VAR 0 1
45710: PPUSH
45711: CALL_OW 251
45715: ST_TO_ADDR
// if not x or not y then
45716: LD_VAR 0 10
45720: NOT
45721: PUSH
45722: LD_VAR 0 11
45726: NOT
45727: OR
45728: IFFALSE 45732
// exit ;
45730: GO 46765
// weapon := 0 ;
45732: LD_ADDR_VAR 0 18
45736: PUSH
45737: LD_INT 0
45739: ST_TO_ADDR
// fac_list := [ ] ;
45740: LD_ADDR_VAR 0 17
45744: PUSH
45745: EMPTY
45746: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
45747: LD_ADDR_VAR 0 6
45751: PUSH
45752: LD_VAR 0 1
45756: PPUSH
45757: CALL_OW 274
45761: PPUSH
45762: LD_VAR 0 2
45766: PPUSH
45767: LD_INT 0
45769: PPUSH
45770: CALL 43336 0 3
45774: PPUSH
45775: LD_INT 30
45777: PUSH
45778: LD_INT 3
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PPUSH
45785: CALL_OW 72
45789: ST_TO_ADDR
// if not factories then
45790: LD_VAR 0 6
45794: NOT
45795: IFFALSE 45799
// exit ;
45797: GO 46765
// for i in factories do
45799: LD_ADDR_VAR 0 8
45803: PUSH
45804: LD_VAR 0 6
45808: PUSH
45809: FOR_IN
45810: IFFALSE 45835
// fac_list := fac_list union AvailableWeaponList ( i ) ;
45812: LD_ADDR_VAR 0 17
45816: PUSH
45817: LD_VAR 0 17
45821: PUSH
45822: LD_VAR 0 8
45826: PPUSH
45827: CALL_OW 478
45831: UNION
45832: ST_TO_ADDR
45833: GO 45809
45835: POP
45836: POP
// if not fac_list then
45837: LD_VAR 0 17
45841: NOT
45842: IFFALSE 45846
// exit ;
45844: GO 46765
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
45846: LD_ADDR_VAR 0 5
45850: PUSH
45851: LD_INT 4
45853: PUSH
45854: LD_INT 5
45856: PUSH
45857: LD_INT 9
45859: PUSH
45860: LD_INT 10
45862: PUSH
45863: LD_INT 6
45865: PUSH
45866: LD_INT 7
45868: PUSH
45869: LD_INT 11
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 27
45883: PUSH
45884: LD_INT 28
45886: PUSH
45887: LD_INT 26
45889: PUSH
45890: LD_INT 30
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 43
45901: PUSH
45902: LD_INT 44
45904: PUSH
45905: LD_INT 46
45907: PUSH
45908: LD_INT 45
45910: PUSH
45911: LD_INT 47
45913: PUSH
45914: LD_INT 49
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: LIST
45929: PUSH
45930: LD_VAR 0 12
45934: ARRAY
45935: ST_TO_ADDR
// list := list isect fac_list ;
45936: LD_ADDR_VAR 0 5
45940: PUSH
45941: LD_VAR 0 5
45945: PUSH
45946: LD_VAR 0 17
45950: ISECT
45951: ST_TO_ADDR
// if not list then
45952: LD_VAR 0 5
45956: NOT
45957: IFFALSE 45961
// exit ;
45959: GO 46765
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
45961: LD_VAR 0 12
45965: PUSH
45966: LD_INT 3
45968: EQUAL
45969: PUSH
45970: LD_INT 49
45972: PUSH
45973: LD_VAR 0 5
45977: IN
45978: AND
45979: PUSH
45980: LD_INT 31
45982: PPUSH
45983: LD_VAR 0 16
45987: PPUSH
45988: CALL_OW 321
45992: PUSH
45993: LD_INT 2
45995: EQUAL
45996: AND
45997: IFFALSE 46057
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
45999: LD_INT 22
46001: PUSH
46002: LD_VAR 0 16
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 35
46013: PUSH
46014: LD_INT 49
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 91
46023: PUSH
46024: LD_VAR 0 1
46028: PUSH
46029: LD_INT 10
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: LIST
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: LIST
46041: PPUSH
46042: CALL_OW 69
46046: NOT
46047: IFFALSE 46057
// weapon := ru_time_lapser ;
46049: LD_ADDR_VAR 0 18
46053: PUSH
46054: LD_INT 49
46056: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
46057: LD_VAR 0 12
46061: PUSH
46062: LD_INT 1
46064: PUSH
46065: LD_INT 2
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: IN
46072: PUSH
46073: LD_INT 11
46075: PUSH
46076: LD_VAR 0 5
46080: IN
46081: PUSH
46082: LD_INT 30
46084: PUSH
46085: LD_VAR 0 5
46089: IN
46090: OR
46091: AND
46092: PUSH
46093: LD_INT 6
46095: PPUSH
46096: LD_VAR 0 16
46100: PPUSH
46101: CALL_OW 321
46105: PUSH
46106: LD_INT 2
46108: EQUAL
46109: AND
46110: IFFALSE 46275
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
46112: LD_INT 22
46114: PUSH
46115: LD_VAR 0 16
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: LD_INT 2
46126: PUSH
46127: LD_INT 35
46129: PUSH
46130: LD_INT 11
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 35
46139: PUSH
46140: LD_INT 30
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 91
46154: PUSH
46155: LD_VAR 0 1
46159: PUSH
46160: LD_INT 18
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: LIST
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: LIST
46172: PPUSH
46173: CALL_OW 69
46177: NOT
46178: PUSH
46179: LD_INT 22
46181: PUSH
46182: LD_VAR 0 16
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 2
46193: PUSH
46194: LD_INT 30
46196: PUSH
46197: LD_INT 32
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 30
46206: PUSH
46207: LD_INT 33
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 91
46221: PUSH
46222: LD_VAR 0 1
46226: PUSH
46227: LD_INT 12
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: LIST
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: LIST
46239: PUSH
46240: EMPTY
46241: LIST
46242: PPUSH
46243: CALL_OW 69
46247: PUSH
46248: LD_INT 2
46250: GREATER
46251: AND
46252: IFFALSE 46275
// weapon := [ us_radar , ar_radar ] [ nat ] ;
46254: LD_ADDR_VAR 0 18
46258: PUSH
46259: LD_INT 11
46261: PUSH
46262: LD_INT 30
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_VAR 0 12
46273: ARRAY
46274: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
46275: LD_VAR 0 18
46279: NOT
46280: PUSH
46281: LD_INT 40
46283: PPUSH
46284: LD_VAR 0 16
46288: PPUSH
46289: CALL_OW 321
46293: PUSH
46294: LD_INT 2
46296: EQUAL
46297: AND
46298: PUSH
46299: LD_INT 7
46301: PUSH
46302: LD_VAR 0 5
46306: IN
46307: PUSH
46308: LD_INT 28
46310: PUSH
46311: LD_VAR 0 5
46315: IN
46316: OR
46317: PUSH
46318: LD_INT 45
46320: PUSH
46321: LD_VAR 0 5
46325: IN
46326: OR
46327: AND
46328: IFFALSE 46582
// begin hex := GetHexInfo ( x , y ) ;
46330: LD_ADDR_VAR 0 4
46334: PUSH
46335: LD_VAR 0 10
46339: PPUSH
46340: LD_VAR 0 11
46344: PPUSH
46345: CALL_OW 546
46349: ST_TO_ADDR
// if hex [ 1 ] then
46350: LD_VAR 0 4
46354: PUSH
46355: LD_INT 1
46357: ARRAY
46358: IFFALSE 46362
// exit ;
46360: GO 46765
// height := hex [ 2 ] ;
46362: LD_ADDR_VAR 0 15
46366: PUSH
46367: LD_VAR 0 4
46371: PUSH
46372: LD_INT 2
46374: ARRAY
46375: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
46376: LD_ADDR_VAR 0 14
46380: PUSH
46381: LD_INT 0
46383: PUSH
46384: LD_INT 2
46386: PUSH
46387: LD_INT 3
46389: PUSH
46390: LD_INT 5
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: LIST
46397: LIST
46398: ST_TO_ADDR
// for i in tmp do
46399: LD_ADDR_VAR 0 8
46403: PUSH
46404: LD_VAR 0 14
46408: PUSH
46409: FOR_IN
46410: IFFALSE 46580
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
46412: LD_ADDR_VAR 0 9
46416: PUSH
46417: LD_VAR 0 10
46421: PPUSH
46422: LD_VAR 0 8
46426: PPUSH
46427: LD_INT 5
46429: PPUSH
46430: CALL_OW 272
46434: PUSH
46435: LD_VAR 0 11
46439: PPUSH
46440: LD_VAR 0 8
46444: PPUSH
46445: LD_INT 5
46447: PPUSH
46448: CALL_OW 273
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
46457: LD_VAR 0 9
46461: PUSH
46462: LD_INT 1
46464: ARRAY
46465: PPUSH
46466: LD_VAR 0 9
46470: PUSH
46471: LD_INT 2
46473: ARRAY
46474: PPUSH
46475: CALL_OW 488
46479: IFFALSE 46578
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
46481: LD_ADDR_VAR 0 4
46485: PUSH
46486: LD_VAR 0 9
46490: PUSH
46491: LD_INT 1
46493: ARRAY
46494: PPUSH
46495: LD_VAR 0 9
46499: PUSH
46500: LD_INT 2
46502: ARRAY
46503: PPUSH
46504: CALL_OW 546
46508: ST_TO_ADDR
// if hex [ 1 ] then
46509: LD_VAR 0 4
46513: PUSH
46514: LD_INT 1
46516: ARRAY
46517: IFFALSE 46521
// continue ;
46519: GO 46409
// h := hex [ 2 ] ;
46521: LD_ADDR_VAR 0 13
46525: PUSH
46526: LD_VAR 0 4
46530: PUSH
46531: LD_INT 2
46533: ARRAY
46534: ST_TO_ADDR
// if h + 7 < height then
46535: LD_VAR 0 13
46539: PUSH
46540: LD_INT 7
46542: PLUS
46543: PUSH
46544: LD_VAR 0 15
46548: LESS
46549: IFFALSE 46578
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
46551: LD_ADDR_VAR 0 18
46555: PUSH
46556: LD_INT 7
46558: PUSH
46559: LD_INT 28
46561: PUSH
46562: LD_INT 45
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: LIST
46569: PUSH
46570: LD_VAR 0 12
46574: ARRAY
46575: ST_TO_ADDR
// break ;
46576: GO 46580
// end ; end ; end ;
46578: GO 46409
46580: POP
46581: POP
// end ; if not weapon then
46582: LD_VAR 0 18
46586: NOT
46587: IFFALSE 46647
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
46589: LD_ADDR_VAR 0 5
46593: PUSH
46594: LD_VAR 0 5
46598: PUSH
46599: LD_INT 11
46601: PUSH
46602: LD_INT 30
46604: PUSH
46605: LD_INT 49
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: LIST
46612: DIFF
46613: ST_TO_ADDR
// if not list then
46614: LD_VAR 0 5
46618: NOT
46619: IFFALSE 46623
// exit ;
46621: GO 46765
// weapon := list [ rand ( 1 , list ) ] ;
46623: LD_ADDR_VAR 0 18
46627: PUSH
46628: LD_VAR 0 5
46632: PUSH
46633: LD_INT 1
46635: PPUSH
46636: LD_VAR 0 5
46640: PPUSH
46641: CALL_OW 12
46645: ARRAY
46646: ST_TO_ADDR
// end ; if weapon then
46647: LD_VAR 0 18
46651: IFFALSE 46765
// begin tmp := CostOfWeapon ( weapon ) ;
46653: LD_ADDR_VAR 0 14
46657: PUSH
46658: LD_VAR 0 18
46662: PPUSH
46663: CALL_OW 451
46667: ST_TO_ADDR
// j := GetBase ( tower ) ;
46668: LD_ADDR_VAR 0 9
46672: PUSH
46673: LD_VAR 0 1
46677: PPUSH
46678: CALL_OW 274
46682: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
46683: LD_VAR 0 9
46687: PPUSH
46688: LD_INT 1
46690: PPUSH
46691: CALL_OW 275
46695: PUSH
46696: LD_VAR 0 14
46700: PUSH
46701: LD_INT 1
46703: ARRAY
46704: GREATEREQUAL
46705: PUSH
46706: LD_VAR 0 9
46710: PPUSH
46711: LD_INT 2
46713: PPUSH
46714: CALL_OW 275
46718: PUSH
46719: LD_VAR 0 14
46723: PUSH
46724: LD_INT 2
46726: ARRAY
46727: GREATEREQUAL
46728: AND
46729: PUSH
46730: LD_VAR 0 9
46734: PPUSH
46735: LD_INT 3
46737: PPUSH
46738: CALL_OW 275
46742: PUSH
46743: LD_VAR 0 14
46747: PUSH
46748: LD_INT 3
46750: ARRAY
46751: GREATEREQUAL
46752: AND
46753: IFFALSE 46765
// result := weapon ;
46755: LD_ADDR_VAR 0 3
46759: PUSH
46760: LD_VAR 0 18
46764: ST_TO_ADDR
// end ; end ;
46765: LD_VAR 0 3
46769: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
46770: LD_INT 0
46772: PPUSH
46773: PPUSH
// result := true ;
46774: LD_ADDR_VAR 0 3
46778: PUSH
46779: LD_INT 1
46781: ST_TO_ADDR
// if array1 = array2 then
46782: LD_VAR 0 1
46786: PUSH
46787: LD_VAR 0 2
46791: EQUAL
46792: IFFALSE 46852
// begin for i = 1 to array1 do
46794: LD_ADDR_VAR 0 4
46798: PUSH
46799: DOUBLE
46800: LD_INT 1
46802: DEC
46803: ST_TO_ADDR
46804: LD_VAR 0 1
46808: PUSH
46809: FOR_TO
46810: IFFALSE 46848
// if array1 [ i ] <> array2 [ i ] then
46812: LD_VAR 0 1
46816: PUSH
46817: LD_VAR 0 4
46821: ARRAY
46822: PUSH
46823: LD_VAR 0 2
46827: PUSH
46828: LD_VAR 0 4
46832: ARRAY
46833: NONEQUAL
46834: IFFALSE 46846
// begin result := false ;
46836: LD_ADDR_VAR 0 3
46840: PUSH
46841: LD_INT 0
46843: ST_TO_ADDR
// break ;
46844: GO 46848
// end ;
46846: GO 46809
46848: POP
46849: POP
// end else
46850: GO 46860
// result := false ;
46852: LD_ADDR_VAR 0 3
46856: PUSH
46857: LD_INT 0
46859: ST_TO_ADDR
// end ;
46860: LD_VAR 0 3
46864: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
46865: LD_INT 0
46867: PPUSH
46868: PPUSH
// if not array1 or not array2 then
46869: LD_VAR 0 1
46873: NOT
46874: PUSH
46875: LD_VAR 0 2
46879: NOT
46880: OR
46881: IFFALSE 46885
// exit ;
46883: GO 46949
// result := true ;
46885: LD_ADDR_VAR 0 3
46889: PUSH
46890: LD_INT 1
46892: ST_TO_ADDR
// for i = 1 to array1 do
46893: LD_ADDR_VAR 0 4
46897: PUSH
46898: DOUBLE
46899: LD_INT 1
46901: DEC
46902: ST_TO_ADDR
46903: LD_VAR 0 1
46907: PUSH
46908: FOR_TO
46909: IFFALSE 46947
// if array1 [ i ] <> array2 [ i ] then
46911: LD_VAR 0 1
46915: PUSH
46916: LD_VAR 0 4
46920: ARRAY
46921: PUSH
46922: LD_VAR 0 2
46926: PUSH
46927: LD_VAR 0 4
46931: ARRAY
46932: NONEQUAL
46933: IFFALSE 46945
// begin result := false ;
46935: LD_ADDR_VAR 0 3
46939: PUSH
46940: LD_INT 0
46942: ST_TO_ADDR
// break ;
46943: GO 46947
// end ;
46945: GO 46908
46947: POP
46948: POP
// end ;
46949: LD_VAR 0 3
46953: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
46954: LD_INT 0
46956: PPUSH
46957: PPUSH
46958: PPUSH
// pom := GetBase ( fac ) ;
46959: LD_ADDR_VAR 0 5
46963: PUSH
46964: LD_VAR 0 1
46968: PPUSH
46969: CALL_OW 274
46973: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
46974: LD_ADDR_VAR 0 4
46978: PUSH
46979: LD_VAR 0 2
46983: PUSH
46984: LD_INT 1
46986: ARRAY
46987: PPUSH
46988: LD_VAR 0 2
46992: PUSH
46993: LD_INT 2
46995: ARRAY
46996: PPUSH
46997: LD_VAR 0 2
47001: PUSH
47002: LD_INT 3
47004: ARRAY
47005: PPUSH
47006: LD_VAR 0 2
47010: PUSH
47011: LD_INT 4
47013: ARRAY
47014: PPUSH
47015: CALL_OW 449
47019: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47020: LD_ADDR_VAR 0 3
47024: PUSH
47025: LD_VAR 0 5
47029: PPUSH
47030: LD_INT 1
47032: PPUSH
47033: CALL_OW 275
47037: PUSH
47038: LD_VAR 0 4
47042: PUSH
47043: LD_INT 1
47045: ARRAY
47046: GREATEREQUAL
47047: PUSH
47048: LD_VAR 0 5
47052: PPUSH
47053: LD_INT 2
47055: PPUSH
47056: CALL_OW 275
47060: PUSH
47061: LD_VAR 0 4
47065: PUSH
47066: LD_INT 2
47068: ARRAY
47069: GREATEREQUAL
47070: AND
47071: PUSH
47072: LD_VAR 0 5
47076: PPUSH
47077: LD_INT 3
47079: PPUSH
47080: CALL_OW 275
47084: PUSH
47085: LD_VAR 0 4
47089: PUSH
47090: LD_INT 3
47092: ARRAY
47093: GREATEREQUAL
47094: AND
47095: ST_TO_ADDR
// end ;
47096: LD_VAR 0 3
47100: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
47101: LD_INT 0
47103: PPUSH
47104: PPUSH
47105: PPUSH
47106: PPUSH
// pom := GetBase ( building ) ;
47107: LD_ADDR_VAR 0 3
47111: PUSH
47112: LD_VAR 0 1
47116: PPUSH
47117: CALL_OW 274
47121: ST_TO_ADDR
// if not pom then
47122: LD_VAR 0 3
47126: NOT
47127: IFFALSE 47131
// exit ;
47129: GO 47301
// btype := GetBType ( building ) ;
47131: LD_ADDR_VAR 0 5
47135: PUSH
47136: LD_VAR 0 1
47140: PPUSH
47141: CALL_OW 266
47145: ST_TO_ADDR
// if btype = b_armoury then
47146: LD_VAR 0 5
47150: PUSH
47151: LD_INT 4
47153: EQUAL
47154: IFFALSE 47164
// btype := b_barracks ;
47156: LD_ADDR_VAR 0 5
47160: PUSH
47161: LD_INT 5
47163: ST_TO_ADDR
// if btype = b_depot then
47164: LD_VAR 0 5
47168: PUSH
47169: LD_INT 0
47171: EQUAL
47172: IFFALSE 47182
// btype := b_warehouse ;
47174: LD_ADDR_VAR 0 5
47178: PUSH
47179: LD_INT 1
47181: ST_TO_ADDR
// if btype = b_workshop then
47182: LD_VAR 0 5
47186: PUSH
47187: LD_INT 2
47189: EQUAL
47190: IFFALSE 47200
// btype := b_factory ;
47192: LD_ADDR_VAR 0 5
47196: PUSH
47197: LD_INT 3
47199: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47200: LD_ADDR_VAR 0 4
47204: PUSH
47205: LD_VAR 0 5
47209: PPUSH
47210: LD_VAR 0 1
47214: PPUSH
47215: CALL_OW 248
47219: PPUSH
47220: CALL_OW 450
47224: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47225: LD_ADDR_VAR 0 2
47229: PUSH
47230: LD_VAR 0 3
47234: PPUSH
47235: LD_INT 1
47237: PPUSH
47238: CALL_OW 275
47242: PUSH
47243: LD_VAR 0 4
47247: PUSH
47248: LD_INT 1
47250: ARRAY
47251: GREATEREQUAL
47252: PUSH
47253: LD_VAR 0 3
47257: PPUSH
47258: LD_INT 2
47260: PPUSH
47261: CALL_OW 275
47265: PUSH
47266: LD_VAR 0 4
47270: PUSH
47271: LD_INT 2
47273: ARRAY
47274: GREATEREQUAL
47275: AND
47276: PUSH
47277: LD_VAR 0 3
47281: PPUSH
47282: LD_INT 3
47284: PPUSH
47285: CALL_OW 275
47289: PUSH
47290: LD_VAR 0 4
47294: PUSH
47295: LD_INT 3
47297: ARRAY
47298: GREATEREQUAL
47299: AND
47300: ST_TO_ADDR
// end ;
47301: LD_VAR 0 2
47305: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
47306: LD_INT 0
47308: PPUSH
47309: PPUSH
47310: PPUSH
// pom := GetBase ( building ) ;
47311: LD_ADDR_VAR 0 4
47315: PUSH
47316: LD_VAR 0 1
47320: PPUSH
47321: CALL_OW 274
47325: ST_TO_ADDR
// if not pom then
47326: LD_VAR 0 4
47330: NOT
47331: IFFALSE 47335
// exit ;
47333: GO 47436
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47335: LD_ADDR_VAR 0 5
47339: PUSH
47340: LD_VAR 0 2
47344: PPUSH
47345: LD_VAR 0 1
47349: PPUSH
47350: CALL_OW 248
47354: PPUSH
47355: CALL_OW 450
47359: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47360: LD_ADDR_VAR 0 3
47364: PUSH
47365: LD_VAR 0 4
47369: PPUSH
47370: LD_INT 1
47372: PPUSH
47373: CALL_OW 275
47377: PUSH
47378: LD_VAR 0 5
47382: PUSH
47383: LD_INT 1
47385: ARRAY
47386: GREATEREQUAL
47387: PUSH
47388: LD_VAR 0 4
47392: PPUSH
47393: LD_INT 2
47395: PPUSH
47396: CALL_OW 275
47400: PUSH
47401: LD_VAR 0 5
47405: PUSH
47406: LD_INT 2
47408: ARRAY
47409: GREATEREQUAL
47410: AND
47411: PUSH
47412: LD_VAR 0 4
47416: PPUSH
47417: LD_INT 3
47419: PPUSH
47420: CALL_OW 275
47424: PUSH
47425: LD_VAR 0 5
47429: PUSH
47430: LD_INT 3
47432: ARRAY
47433: GREATEREQUAL
47434: AND
47435: ST_TO_ADDR
// end ;
47436: LD_VAR 0 3
47440: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
47441: LD_INT 0
47443: PPUSH
47444: PPUSH
47445: PPUSH
47446: PPUSH
47447: PPUSH
47448: PPUSH
47449: PPUSH
47450: PPUSH
47451: PPUSH
47452: PPUSH
47453: PPUSH
// result := false ;
47454: LD_ADDR_VAR 0 8
47458: PUSH
47459: LD_INT 0
47461: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
47462: LD_VAR 0 5
47466: NOT
47467: PUSH
47468: LD_VAR 0 1
47472: NOT
47473: OR
47474: PUSH
47475: LD_VAR 0 2
47479: NOT
47480: OR
47481: PUSH
47482: LD_VAR 0 3
47486: NOT
47487: OR
47488: IFFALSE 47492
// exit ;
47490: GO 48306
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
47492: LD_ADDR_VAR 0 14
47496: PUSH
47497: LD_VAR 0 1
47501: PPUSH
47502: LD_VAR 0 2
47506: PPUSH
47507: LD_VAR 0 3
47511: PPUSH
47512: LD_VAR 0 4
47516: PPUSH
47517: LD_VAR 0 5
47521: PUSH
47522: LD_INT 1
47524: ARRAY
47525: PPUSH
47526: CALL_OW 248
47530: PPUSH
47531: LD_INT 0
47533: PPUSH
47534: CALL 49559 0 6
47538: ST_TO_ADDR
// if not hexes then
47539: LD_VAR 0 14
47543: NOT
47544: IFFALSE 47548
// exit ;
47546: GO 48306
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47548: LD_ADDR_VAR 0 17
47552: PUSH
47553: LD_VAR 0 5
47557: PPUSH
47558: LD_INT 22
47560: PUSH
47561: LD_VAR 0 13
47565: PPUSH
47566: CALL_OW 255
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 2
47577: PUSH
47578: LD_INT 30
47580: PUSH
47581: LD_INT 0
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 30
47590: PUSH
47591: LD_INT 1
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: LIST
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PPUSH
47607: CALL_OW 72
47611: ST_TO_ADDR
// for i = 1 to hexes do
47612: LD_ADDR_VAR 0 9
47616: PUSH
47617: DOUBLE
47618: LD_INT 1
47620: DEC
47621: ST_TO_ADDR
47622: LD_VAR 0 14
47626: PUSH
47627: FOR_TO
47628: IFFALSE 48304
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47630: LD_ADDR_VAR 0 13
47634: PUSH
47635: LD_VAR 0 14
47639: PUSH
47640: LD_VAR 0 9
47644: ARRAY
47645: PUSH
47646: LD_INT 1
47648: ARRAY
47649: PPUSH
47650: LD_VAR 0 14
47654: PUSH
47655: LD_VAR 0 9
47659: ARRAY
47660: PUSH
47661: LD_INT 2
47663: ARRAY
47664: PPUSH
47665: CALL_OW 428
47669: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
47670: LD_VAR 0 14
47674: PUSH
47675: LD_VAR 0 9
47679: ARRAY
47680: PUSH
47681: LD_INT 1
47683: ARRAY
47684: PPUSH
47685: LD_VAR 0 14
47689: PUSH
47690: LD_VAR 0 9
47694: ARRAY
47695: PUSH
47696: LD_INT 2
47698: ARRAY
47699: PPUSH
47700: CALL_OW 351
47704: PUSH
47705: LD_VAR 0 14
47709: PUSH
47710: LD_VAR 0 9
47714: ARRAY
47715: PUSH
47716: LD_INT 1
47718: ARRAY
47719: PPUSH
47720: LD_VAR 0 14
47724: PUSH
47725: LD_VAR 0 9
47729: ARRAY
47730: PUSH
47731: LD_INT 2
47733: ARRAY
47734: PPUSH
47735: CALL_OW 488
47739: NOT
47740: OR
47741: PUSH
47742: LD_VAR 0 13
47746: PPUSH
47747: CALL_OW 247
47751: PUSH
47752: LD_INT 3
47754: EQUAL
47755: OR
47756: IFFALSE 47762
// exit ;
47758: POP
47759: POP
47760: GO 48306
// if not tmp then
47762: LD_VAR 0 13
47766: NOT
47767: IFFALSE 47771
// continue ;
47769: GO 47627
// result := true ;
47771: LD_ADDR_VAR 0 8
47775: PUSH
47776: LD_INT 1
47778: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
47779: LD_VAR 0 6
47783: PUSH
47784: LD_VAR 0 13
47788: PPUSH
47789: CALL_OW 247
47793: PUSH
47794: LD_INT 2
47796: EQUAL
47797: AND
47798: PUSH
47799: LD_VAR 0 13
47803: PPUSH
47804: CALL_OW 263
47808: PUSH
47809: LD_INT 1
47811: EQUAL
47812: AND
47813: IFFALSE 47977
// begin if IsDrivenBy ( tmp ) then
47815: LD_VAR 0 13
47819: PPUSH
47820: CALL_OW 311
47824: IFFALSE 47828
// continue ;
47826: GO 47627
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
47828: LD_VAR 0 6
47832: PPUSH
47833: LD_INT 3
47835: PUSH
47836: LD_INT 60
47838: PUSH
47839: EMPTY
47840: LIST
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 3
47848: PUSH
47849: LD_INT 55
47851: PUSH
47852: EMPTY
47853: LIST
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PPUSH
47863: CALL_OW 72
47867: IFFALSE 47975
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
47869: LD_ADDR_VAR 0 18
47873: PUSH
47874: LD_VAR 0 6
47878: PPUSH
47879: LD_INT 3
47881: PUSH
47882: LD_INT 60
47884: PUSH
47885: EMPTY
47886: LIST
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: LD_INT 3
47894: PUSH
47895: LD_INT 55
47897: PUSH
47898: EMPTY
47899: LIST
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PPUSH
47909: CALL_OW 72
47913: PUSH
47914: LD_INT 1
47916: ARRAY
47917: ST_TO_ADDR
// if IsInUnit ( driver ) then
47918: LD_VAR 0 18
47922: PPUSH
47923: CALL_OW 310
47927: IFFALSE 47938
// ComExit ( driver ) ;
47929: LD_VAR 0 18
47933: PPUSH
47934: CALL 73338 0 1
// AddComEnterUnit ( driver , tmp ) ;
47938: LD_VAR 0 18
47942: PPUSH
47943: LD_VAR 0 13
47947: PPUSH
47948: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
47952: LD_VAR 0 18
47956: PPUSH
47957: LD_VAR 0 7
47961: PPUSH
47962: CALL_OW 173
// AddComExitVehicle ( driver ) ;
47966: LD_VAR 0 18
47970: PPUSH
47971: CALL_OW 181
// end ; continue ;
47975: GO 47627
// end ; if not cleaners or not tmp in cleaners then
47977: LD_VAR 0 6
47981: NOT
47982: PUSH
47983: LD_VAR 0 13
47987: PUSH
47988: LD_VAR 0 6
47992: IN
47993: NOT
47994: OR
47995: IFFALSE 48302
// begin if dep then
47997: LD_VAR 0 17
48001: IFFALSE 48137
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
48003: LD_ADDR_VAR 0 16
48007: PUSH
48008: LD_VAR 0 17
48012: PUSH
48013: LD_INT 1
48015: ARRAY
48016: PPUSH
48017: CALL_OW 250
48021: PPUSH
48022: LD_VAR 0 17
48026: PUSH
48027: LD_INT 1
48029: ARRAY
48030: PPUSH
48031: CALL_OW 254
48035: PPUSH
48036: LD_INT 5
48038: PPUSH
48039: CALL_OW 272
48043: PUSH
48044: LD_VAR 0 17
48048: PUSH
48049: LD_INT 1
48051: ARRAY
48052: PPUSH
48053: CALL_OW 251
48057: PPUSH
48058: LD_VAR 0 17
48062: PUSH
48063: LD_INT 1
48065: ARRAY
48066: PPUSH
48067: CALL_OW 254
48071: PPUSH
48072: LD_INT 5
48074: PPUSH
48075: CALL_OW 273
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
48084: LD_VAR 0 16
48088: PUSH
48089: LD_INT 1
48091: ARRAY
48092: PPUSH
48093: LD_VAR 0 16
48097: PUSH
48098: LD_INT 2
48100: ARRAY
48101: PPUSH
48102: CALL_OW 488
48106: IFFALSE 48137
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
48108: LD_VAR 0 13
48112: PPUSH
48113: LD_VAR 0 16
48117: PUSH
48118: LD_INT 1
48120: ARRAY
48121: PPUSH
48122: LD_VAR 0 16
48126: PUSH
48127: LD_INT 2
48129: ARRAY
48130: PPUSH
48131: CALL_OW 111
// continue ;
48135: GO 47627
// end ; end ; r := GetDir ( tmp ) ;
48137: LD_ADDR_VAR 0 15
48141: PUSH
48142: LD_VAR 0 13
48146: PPUSH
48147: CALL_OW 254
48151: ST_TO_ADDR
// if r = 5 then
48152: LD_VAR 0 15
48156: PUSH
48157: LD_INT 5
48159: EQUAL
48160: IFFALSE 48170
// r := 0 ;
48162: LD_ADDR_VAR 0 15
48166: PUSH
48167: LD_INT 0
48169: ST_TO_ADDR
// for j = r to 5 do
48170: LD_ADDR_VAR 0 10
48174: PUSH
48175: DOUBLE
48176: LD_VAR 0 15
48180: DEC
48181: ST_TO_ADDR
48182: LD_INT 5
48184: PUSH
48185: FOR_TO
48186: IFFALSE 48300
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
48188: LD_ADDR_VAR 0 11
48192: PUSH
48193: LD_VAR 0 13
48197: PPUSH
48198: CALL_OW 250
48202: PPUSH
48203: LD_VAR 0 10
48207: PPUSH
48208: LD_INT 2
48210: PPUSH
48211: CALL_OW 272
48215: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
48216: LD_ADDR_VAR 0 12
48220: PUSH
48221: LD_VAR 0 13
48225: PPUSH
48226: CALL_OW 251
48230: PPUSH
48231: LD_VAR 0 10
48235: PPUSH
48236: LD_INT 2
48238: PPUSH
48239: CALL_OW 273
48243: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
48244: LD_VAR 0 11
48248: PPUSH
48249: LD_VAR 0 12
48253: PPUSH
48254: CALL_OW 488
48258: PUSH
48259: LD_VAR 0 11
48263: PPUSH
48264: LD_VAR 0 12
48268: PPUSH
48269: CALL_OW 428
48273: NOT
48274: AND
48275: IFFALSE 48298
// begin ComMoveXY ( tmp , _x , _y ) ;
48277: LD_VAR 0 13
48281: PPUSH
48282: LD_VAR 0 11
48286: PPUSH
48287: LD_VAR 0 12
48291: PPUSH
48292: CALL_OW 111
// break ;
48296: GO 48300
// end ; end ;
48298: GO 48185
48300: POP
48301: POP
// end ; end ;
48302: GO 47627
48304: POP
48305: POP
// end ;
48306: LD_VAR 0 8
48310: RET
// export function BuildingTechInvented ( side , btype ) ; begin
48311: LD_INT 0
48313: PPUSH
// result := true ;
48314: LD_ADDR_VAR 0 3
48318: PUSH
48319: LD_INT 1
48321: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
48322: LD_VAR 0 2
48326: PUSH
48327: LD_INT 24
48329: DOUBLE
48330: EQUAL
48331: IFTRUE 48341
48333: LD_INT 33
48335: DOUBLE
48336: EQUAL
48337: IFTRUE 48341
48339: GO 48366
48341: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
48342: LD_ADDR_VAR 0 3
48346: PUSH
48347: LD_INT 32
48349: PPUSH
48350: LD_VAR 0 1
48354: PPUSH
48355: CALL_OW 321
48359: PUSH
48360: LD_INT 2
48362: EQUAL
48363: ST_TO_ADDR
48364: GO 48682
48366: LD_INT 20
48368: DOUBLE
48369: EQUAL
48370: IFTRUE 48374
48372: GO 48399
48374: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
48375: LD_ADDR_VAR 0 3
48379: PUSH
48380: LD_INT 6
48382: PPUSH
48383: LD_VAR 0 1
48387: PPUSH
48388: CALL_OW 321
48392: PUSH
48393: LD_INT 2
48395: EQUAL
48396: ST_TO_ADDR
48397: GO 48682
48399: LD_INT 22
48401: DOUBLE
48402: EQUAL
48403: IFTRUE 48413
48405: LD_INT 36
48407: DOUBLE
48408: EQUAL
48409: IFTRUE 48413
48411: GO 48438
48413: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
48414: LD_ADDR_VAR 0 3
48418: PUSH
48419: LD_INT 15
48421: PPUSH
48422: LD_VAR 0 1
48426: PPUSH
48427: CALL_OW 321
48431: PUSH
48432: LD_INT 2
48434: EQUAL
48435: ST_TO_ADDR
48436: GO 48682
48438: LD_INT 30
48440: DOUBLE
48441: EQUAL
48442: IFTRUE 48446
48444: GO 48471
48446: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
48447: LD_ADDR_VAR 0 3
48451: PUSH
48452: LD_INT 20
48454: PPUSH
48455: LD_VAR 0 1
48459: PPUSH
48460: CALL_OW 321
48464: PUSH
48465: LD_INT 2
48467: EQUAL
48468: ST_TO_ADDR
48469: GO 48682
48471: LD_INT 28
48473: DOUBLE
48474: EQUAL
48475: IFTRUE 48485
48477: LD_INT 21
48479: DOUBLE
48480: EQUAL
48481: IFTRUE 48485
48483: GO 48510
48485: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
48486: LD_ADDR_VAR 0 3
48490: PUSH
48491: LD_INT 21
48493: PPUSH
48494: LD_VAR 0 1
48498: PPUSH
48499: CALL_OW 321
48503: PUSH
48504: LD_INT 2
48506: EQUAL
48507: ST_TO_ADDR
48508: GO 48682
48510: LD_INT 16
48512: DOUBLE
48513: EQUAL
48514: IFTRUE 48518
48516: GO 48543
48518: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
48519: LD_ADDR_VAR 0 3
48523: PUSH
48524: LD_INT 84
48526: PPUSH
48527: LD_VAR 0 1
48531: PPUSH
48532: CALL_OW 321
48536: PUSH
48537: LD_INT 2
48539: EQUAL
48540: ST_TO_ADDR
48541: GO 48682
48543: LD_INT 19
48545: DOUBLE
48546: EQUAL
48547: IFTRUE 48557
48549: LD_INT 23
48551: DOUBLE
48552: EQUAL
48553: IFTRUE 48557
48555: GO 48582
48557: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
48558: LD_ADDR_VAR 0 3
48562: PUSH
48563: LD_INT 83
48565: PPUSH
48566: LD_VAR 0 1
48570: PPUSH
48571: CALL_OW 321
48575: PUSH
48576: LD_INT 2
48578: EQUAL
48579: ST_TO_ADDR
48580: GO 48682
48582: LD_INT 17
48584: DOUBLE
48585: EQUAL
48586: IFTRUE 48590
48588: GO 48615
48590: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
48591: LD_ADDR_VAR 0 3
48595: PUSH
48596: LD_INT 39
48598: PPUSH
48599: LD_VAR 0 1
48603: PPUSH
48604: CALL_OW 321
48608: PUSH
48609: LD_INT 2
48611: EQUAL
48612: ST_TO_ADDR
48613: GO 48682
48615: LD_INT 18
48617: DOUBLE
48618: EQUAL
48619: IFTRUE 48623
48621: GO 48648
48623: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
48624: LD_ADDR_VAR 0 3
48628: PUSH
48629: LD_INT 40
48631: PPUSH
48632: LD_VAR 0 1
48636: PPUSH
48637: CALL_OW 321
48641: PUSH
48642: LD_INT 2
48644: EQUAL
48645: ST_TO_ADDR
48646: GO 48682
48648: LD_INT 27
48650: DOUBLE
48651: EQUAL
48652: IFTRUE 48656
48654: GO 48681
48656: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
48657: LD_ADDR_VAR 0 3
48661: PUSH
48662: LD_INT 35
48664: PPUSH
48665: LD_VAR 0 1
48669: PPUSH
48670: CALL_OW 321
48674: PUSH
48675: LD_INT 2
48677: EQUAL
48678: ST_TO_ADDR
48679: GO 48682
48681: POP
// end ;
48682: LD_VAR 0 3
48686: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
48687: LD_INT 0
48689: PPUSH
48690: PPUSH
48691: PPUSH
48692: PPUSH
48693: PPUSH
48694: PPUSH
48695: PPUSH
48696: PPUSH
48697: PPUSH
48698: PPUSH
48699: PPUSH
// result := false ;
48700: LD_ADDR_VAR 0 6
48704: PUSH
48705: LD_INT 0
48707: ST_TO_ADDR
// if btype = b_depot then
48708: LD_VAR 0 2
48712: PUSH
48713: LD_INT 0
48715: EQUAL
48716: IFFALSE 48728
// begin result := true ;
48718: LD_ADDR_VAR 0 6
48722: PUSH
48723: LD_INT 1
48725: ST_TO_ADDR
// exit ;
48726: GO 49554
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
48728: LD_VAR 0 1
48732: NOT
48733: PUSH
48734: LD_VAR 0 1
48738: PPUSH
48739: CALL_OW 266
48743: PUSH
48744: LD_INT 0
48746: PUSH
48747: LD_INT 1
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: IN
48754: NOT
48755: OR
48756: PUSH
48757: LD_VAR 0 2
48761: NOT
48762: OR
48763: PUSH
48764: LD_VAR 0 5
48768: PUSH
48769: LD_INT 0
48771: PUSH
48772: LD_INT 1
48774: PUSH
48775: LD_INT 2
48777: PUSH
48778: LD_INT 3
48780: PUSH
48781: LD_INT 4
48783: PUSH
48784: LD_INT 5
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: IN
48795: NOT
48796: OR
48797: PUSH
48798: LD_VAR 0 3
48802: PPUSH
48803: LD_VAR 0 4
48807: PPUSH
48808: CALL_OW 488
48812: NOT
48813: OR
48814: IFFALSE 48818
// exit ;
48816: GO 49554
// side := GetSide ( depot ) ;
48818: LD_ADDR_VAR 0 9
48822: PUSH
48823: LD_VAR 0 1
48827: PPUSH
48828: CALL_OW 255
48832: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
48833: LD_VAR 0 9
48837: PPUSH
48838: LD_VAR 0 2
48842: PPUSH
48843: CALL 48311 0 2
48847: NOT
48848: IFFALSE 48852
// exit ;
48850: GO 49554
// pom := GetBase ( depot ) ;
48852: LD_ADDR_VAR 0 10
48856: PUSH
48857: LD_VAR 0 1
48861: PPUSH
48862: CALL_OW 274
48866: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
48867: LD_ADDR_VAR 0 11
48871: PUSH
48872: LD_VAR 0 2
48876: PPUSH
48877: LD_VAR 0 1
48881: PPUSH
48882: CALL_OW 248
48886: PPUSH
48887: CALL_OW 450
48891: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
48892: LD_VAR 0 10
48896: PPUSH
48897: LD_INT 1
48899: PPUSH
48900: CALL_OW 275
48904: PUSH
48905: LD_VAR 0 11
48909: PUSH
48910: LD_INT 1
48912: ARRAY
48913: GREATEREQUAL
48914: PUSH
48915: LD_VAR 0 10
48919: PPUSH
48920: LD_INT 2
48922: PPUSH
48923: CALL_OW 275
48927: PUSH
48928: LD_VAR 0 11
48932: PUSH
48933: LD_INT 2
48935: ARRAY
48936: GREATEREQUAL
48937: AND
48938: PUSH
48939: LD_VAR 0 10
48943: PPUSH
48944: LD_INT 3
48946: PPUSH
48947: CALL_OW 275
48951: PUSH
48952: LD_VAR 0 11
48956: PUSH
48957: LD_INT 3
48959: ARRAY
48960: GREATEREQUAL
48961: AND
48962: NOT
48963: IFFALSE 48967
// exit ;
48965: GO 49554
// if GetBType ( depot ) = b_depot then
48967: LD_VAR 0 1
48971: PPUSH
48972: CALL_OW 266
48976: PUSH
48977: LD_INT 0
48979: EQUAL
48980: IFFALSE 48992
// dist := 28 else
48982: LD_ADDR_VAR 0 14
48986: PUSH
48987: LD_INT 28
48989: ST_TO_ADDR
48990: GO 49000
// dist := 36 ;
48992: LD_ADDR_VAR 0 14
48996: PUSH
48997: LD_INT 36
48999: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
49000: LD_VAR 0 1
49004: PPUSH
49005: LD_VAR 0 3
49009: PPUSH
49010: LD_VAR 0 4
49014: PPUSH
49015: CALL_OW 297
49019: PUSH
49020: LD_VAR 0 14
49024: GREATER
49025: IFFALSE 49029
// exit ;
49027: GO 49554
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
49029: LD_ADDR_VAR 0 12
49033: PUSH
49034: LD_VAR 0 2
49038: PPUSH
49039: LD_VAR 0 3
49043: PPUSH
49044: LD_VAR 0 4
49048: PPUSH
49049: LD_VAR 0 5
49053: PPUSH
49054: LD_VAR 0 1
49058: PPUSH
49059: CALL_OW 248
49063: PPUSH
49064: LD_INT 0
49066: PPUSH
49067: CALL 49559 0 6
49071: ST_TO_ADDR
// if not hexes then
49072: LD_VAR 0 12
49076: NOT
49077: IFFALSE 49081
// exit ;
49079: GO 49554
// hex := GetHexInfo ( x , y ) ;
49081: LD_ADDR_VAR 0 15
49085: PUSH
49086: LD_VAR 0 3
49090: PPUSH
49091: LD_VAR 0 4
49095: PPUSH
49096: CALL_OW 546
49100: ST_TO_ADDR
// if hex [ 1 ] then
49101: LD_VAR 0 15
49105: PUSH
49106: LD_INT 1
49108: ARRAY
49109: IFFALSE 49113
// exit ;
49111: GO 49554
// height := hex [ 2 ] ;
49113: LD_ADDR_VAR 0 13
49117: PUSH
49118: LD_VAR 0 15
49122: PUSH
49123: LD_INT 2
49125: ARRAY
49126: ST_TO_ADDR
// for i = 1 to hexes do
49127: LD_ADDR_VAR 0 7
49131: PUSH
49132: DOUBLE
49133: LD_INT 1
49135: DEC
49136: ST_TO_ADDR
49137: LD_VAR 0 12
49141: PUSH
49142: FOR_TO
49143: IFFALSE 49473
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
49145: LD_VAR 0 12
49149: PUSH
49150: LD_VAR 0 7
49154: ARRAY
49155: PUSH
49156: LD_INT 1
49158: ARRAY
49159: PPUSH
49160: LD_VAR 0 12
49164: PUSH
49165: LD_VAR 0 7
49169: ARRAY
49170: PUSH
49171: LD_INT 2
49173: ARRAY
49174: PPUSH
49175: CALL_OW 488
49179: NOT
49180: PUSH
49181: LD_VAR 0 12
49185: PUSH
49186: LD_VAR 0 7
49190: ARRAY
49191: PUSH
49192: LD_INT 1
49194: ARRAY
49195: PPUSH
49196: LD_VAR 0 12
49200: PUSH
49201: LD_VAR 0 7
49205: ARRAY
49206: PUSH
49207: LD_INT 2
49209: ARRAY
49210: PPUSH
49211: CALL_OW 428
49215: PUSH
49216: LD_INT 0
49218: GREATER
49219: OR
49220: PUSH
49221: LD_VAR 0 12
49225: PUSH
49226: LD_VAR 0 7
49230: ARRAY
49231: PUSH
49232: LD_INT 1
49234: ARRAY
49235: PPUSH
49236: LD_VAR 0 12
49240: PUSH
49241: LD_VAR 0 7
49245: ARRAY
49246: PUSH
49247: LD_INT 2
49249: ARRAY
49250: PPUSH
49251: CALL_OW 351
49255: OR
49256: IFFALSE 49262
// exit ;
49258: POP
49259: POP
49260: GO 49554
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49262: LD_ADDR_VAR 0 8
49266: PUSH
49267: LD_VAR 0 12
49271: PUSH
49272: LD_VAR 0 7
49276: ARRAY
49277: PUSH
49278: LD_INT 1
49280: ARRAY
49281: PPUSH
49282: LD_VAR 0 12
49286: PUSH
49287: LD_VAR 0 7
49291: ARRAY
49292: PUSH
49293: LD_INT 2
49295: ARRAY
49296: PPUSH
49297: CALL_OW 546
49301: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
49302: LD_VAR 0 8
49306: PUSH
49307: LD_INT 1
49309: ARRAY
49310: PUSH
49311: LD_VAR 0 8
49315: PUSH
49316: LD_INT 2
49318: ARRAY
49319: PUSH
49320: LD_VAR 0 13
49324: PUSH
49325: LD_INT 2
49327: PLUS
49328: GREATER
49329: OR
49330: PUSH
49331: LD_VAR 0 8
49335: PUSH
49336: LD_INT 2
49338: ARRAY
49339: PUSH
49340: LD_VAR 0 13
49344: PUSH
49345: LD_INT 2
49347: MINUS
49348: LESS
49349: OR
49350: PUSH
49351: LD_VAR 0 8
49355: PUSH
49356: LD_INT 3
49358: ARRAY
49359: PUSH
49360: LD_INT 0
49362: PUSH
49363: LD_INT 8
49365: PUSH
49366: LD_INT 9
49368: PUSH
49369: LD_INT 10
49371: PUSH
49372: LD_INT 11
49374: PUSH
49375: LD_INT 12
49377: PUSH
49378: LD_INT 13
49380: PUSH
49381: LD_INT 16
49383: PUSH
49384: LD_INT 17
49386: PUSH
49387: LD_INT 18
49389: PUSH
49390: LD_INT 19
49392: PUSH
49393: LD_INT 20
49395: PUSH
49396: LD_INT 21
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: IN
49414: NOT
49415: OR
49416: PUSH
49417: LD_VAR 0 8
49421: PUSH
49422: LD_INT 5
49424: ARRAY
49425: NOT
49426: OR
49427: PUSH
49428: LD_VAR 0 8
49432: PUSH
49433: LD_INT 6
49435: ARRAY
49436: PUSH
49437: LD_INT 1
49439: PUSH
49440: LD_INT 2
49442: PUSH
49443: LD_INT 7
49445: PUSH
49446: LD_INT 9
49448: PUSH
49449: LD_INT 10
49451: PUSH
49452: LD_INT 11
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: IN
49463: NOT
49464: OR
49465: IFFALSE 49471
// exit ;
49467: POP
49468: POP
49469: GO 49554
// end ;
49471: GO 49142
49473: POP
49474: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
49475: LD_VAR 0 9
49479: PPUSH
49480: LD_VAR 0 3
49484: PPUSH
49485: LD_VAR 0 4
49489: PPUSH
49490: LD_INT 20
49492: PPUSH
49493: CALL 41477 0 4
49497: PUSH
49498: LD_INT 4
49500: ARRAY
49501: IFFALSE 49505
// exit ;
49503: GO 49554
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
49505: LD_VAR 0 2
49509: PUSH
49510: LD_INT 29
49512: PUSH
49513: LD_INT 30
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: IN
49520: PUSH
49521: LD_VAR 0 3
49525: PPUSH
49526: LD_VAR 0 4
49530: PPUSH
49531: LD_VAR 0 9
49535: PPUSH
49536: CALL_OW 440
49540: NOT
49541: AND
49542: IFFALSE 49546
// exit ;
49544: GO 49554
// result := true ;
49546: LD_ADDR_VAR 0 6
49550: PUSH
49551: LD_INT 1
49553: ST_TO_ADDR
// end ;
49554: LD_VAR 0 6
49558: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
49559: LD_INT 0
49561: PPUSH
49562: PPUSH
49563: PPUSH
49564: PPUSH
49565: PPUSH
49566: PPUSH
49567: PPUSH
49568: PPUSH
49569: PPUSH
49570: PPUSH
49571: PPUSH
49572: PPUSH
49573: PPUSH
49574: PPUSH
49575: PPUSH
49576: PPUSH
49577: PPUSH
49578: PPUSH
49579: PPUSH
49580: PPUSH
49581: PPUSH
49582: PPUSH
49583: PPUSH
49584: PPUSH
49585: PPUSH
49586: PPUSH
49587: PPUSH
49588: PPUSH
49589: PPUSH
49590: PPUSH
49591: PPUSH
49592: PPUSH
49593: PPUSH
49594: PPUSH
49595: PPUSH
49596: PPUSH
49597: PPUSH
49598: PPUSH
49599: PPUSH
49600: PPUSH
49601: PPUSH
49602: PPUSH
49603: PPUSH
49604: PPUSH
49605: PPUSH
49606: PPUSH
49607: PPUSH
49608: PPUSH
49609: PPUSH
49610: PPUSH
49611: PPUSH
49612: PPUSH
49613: PPUSH
49614: PPUSH
49615: PPUSH
49616: PPUSH
49617: PPUSH
49618: PPUSH
// result = [ ] ;
49619: LD_ADDR_VAR 0 7
49623: PUSH
49624: EMPTY
49625: ST_TO_ADDR
// temp_list = [ ] ;
49626: LD_ADDR_VAR 0 9
49630: PUSH
49631: EMPTY
49632: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
49633: LD_VAR 0 4
49637: PUSH
49638: LD_INT 0
49640: PUSH
49641: LD_INT 1
49643: PUSH
49644: LD_INT 2
49646: PUSH
49647: LD_INT 3
49649: PUSH
49650: LD_INT 4
49652: PUSH
49653: LD_INT 5
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: IN
49664: NOT
49665: PUSH
49666: LD_VAR 0 1
49670: PUSH
49671: LD_INT 0
49673: PUSH
49674: LD_INT 1
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: IN
49681: PUSH
49682: LD_VAR 0 5
49686: PUSH
49687: LD_INT 1
49689: PUSH
49690: LD_INT 2
49692: PUSH
49693: LD_INT 3
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: LIST
49700: IN
49701: NOT
49702: AND
49703: OR
49704: IFFALSE 49708
// exit ;
49706: GO 68099
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
49708: LD_VAR 0 1
49712: PUSH
49713: LD_INT 6
49715: PUSH
49716: LD_INT 7
49718: PUSH
49719: LD_INT 8
49721: PUSH
49722: LD_INT 13
49724: PUSH
49725: LD_INT 12
49727: PUSH
49728: LD_INT 15
49730: PUSH
49731: LD_INT 11
49733: PUSH
49734: LD_INT 14
49736: PUSH
49737: LD_INT 10
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: IN
49751: IFFALSE 49761
// btype = b_lab ;
49753: LD_ADDR_VAR 0 1
49757: PUSH
49758: LD_INT 6
49760: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
49761: LD_VAR 0 6
49765: PUSH
49766: LD_INT 0
49768: PUSH
49769: LD_INT 1
49771: PUSH
49772: LD_INT 2
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: LIST
49779: IN
49780: NOT
49781: PUSH
49782: LD_VAR 0 1
49786: PUSH
49787: LD_INT 0
49789: PUSH
49790: LD_INT 1
49792: PUSH
49793: LD_INT 2
49795: PUSH
49796: LD_INT 3
49798: PUSH
49799: LD_INT 6
49801: PUSH
49802: LD_INT 36
49804: PUSH
49805: LD_INT 4
49807: PUSH
49808: LD_INT 5
49810: PUSH
49811: LD_INT 31
49813: PUSH
49814: LD_INT 32
49816: PUSH
49817: LD_INT 33
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: IN
49833: NOT
49834: PUSH
49835: LD_VAR 0 6
49839: PUSH
49840: LD_INT 1
49842: EQUAL
49843: AND
49844: OR
49845: PUSH
49846: LD_VAR 0 1
49850: PUSH
49851: LD_INT 2
49853: PUSH
49854: LD_INT 3
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: IN
49861: NOT
49862: PUSH
49863: LD_VAR 0 6
49867: PUSH
49868: LD_INT 2
49870: EQUAL
49871: AND
49872: OR
49873: IFFALSE 49883
// mode = 0 ;
49875: LD_ADDR_VAR 0 6
49879: PUSH
49880: LD_INT 0
49882: ST_TO_ADDR
// case mode of 0 :
49883: LD_VAR 0 6
49887: PUSH
49888: LD_INT 0
49890: DOUBLE
49891: EQUAL
49892: IFTRUE 49896
49894: GO 61349
49896: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49897: LD_ADDR_VAR 0 11
49901: PUSH
49902: LD_INT 0
49904: PUSH
49905: LD_INT 0
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 0
49914: PUSH
49915: LD_INT 1
49917: NEG
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 1
49925: PUSH
49926: LD_INT 0
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 1
49935: PUSH
49936: LD_INT 1
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 0
49945: PUSH
49946: LD_INT 1
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 1
49955: NEG
49956: PUSH
49957: LD_INT 0
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 1
49966: NEG
49967: PUSH
49968: LD_INT 1
49970: NEG
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 1
49978: NEG
49979: PUSH
49980: LD_INT 2
49982: NEG
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 0
49990: PUSH
49991: LD_INT 2
49993: NEG
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 1
50001: PUSH
50002: LD_INT 1
50004: NEG
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 1
50012: PUSH
50013: LD_INT 2
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 0
50022: PUSH
50023: LD_INT 2
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 1
50032: NEG
50033: PUSH
50034: LD_INT 1
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 1
50043: PUSH
50044: LD_INT 3
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 0
50053: PUSH
50054: LD_INT 3
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 1
50063: NEG
50064: PUSH
50065: LD_INT 2
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50090: LD_ADDR_VAR 0 12
50094: PUSH
50095: LD_INT 0
50097: PUSH
50098: LD_INT 0
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 0
50107: PUSH
50108: LD_INT 1
50110: NEG
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 1
50118: PUSH
50119: LD_INT 0
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 1
50128: PUSH
50129: LD_INT 1
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 0
50138: PUSH
50139: LD_INT 1
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 1
50148: NEG
50149: PUSH
50150: LD_INT 0
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 1
50159: NEG
50160: PUSH
50161: LD_INT 1
50163: NEG
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 1
50171: PUSH
50172: LD_INT 1
50174: NEG
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 2
50182: PUSH
50183: LD_INT 0
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 2
50192: PUSH
50193: LD_INT 1
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 1
50202: NEG
50203: PUSH
50204: LD_INT 1
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 2
50213: NEG
50214: PUSH
50215: LD_INT 0
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 2
50224: NEG
50225: PUSH
50226: LD_INT 1
50228: NEG
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 2
50236: NEG
50237: PUSH
50238: LD_INT 1
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 3
50247: NEG
50248: PUSH
50249: LD_INT 0
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 3
50258: NEG
50259: PUSH
50260: LD_INT 1
50262: NEG
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50286: LD_ADDR_VAR 0 13
50290: PUSH
50291: LD_INT 0
50293: PUSH
50294: LD_INT 0
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 0
50303: PUSH
50304: LD_INT 1
50306: NEG
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 1
50314: PUSH
50315: LD_INT 0
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 1
50324: PUSH
50325: LD_INT 1
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 0
50334: PUSH
50335: LD_INT 1
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 1
50344: NEG
50345: PUSH
50346: LD_INT 0
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 1
50355: NEG
50356: PUSH
50357: LD_INT 1
50359: NEG
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 1
50367: NEG
50368: PUSH
50369: LD_INT 2
50371: NEG
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 2
50379: PUSH
50380: LD_INT 1
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 2
50389: PUSH
50390: LD_INT 2
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 1
50399: PUSH
50400: LD_INT 2
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 2
50409: NEG
50410: PUSH
50411: LD_INT 1
50413: NEG
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 2
50421: NEG
50422: PUSH
50423: LD_INT 2
50425: NEG
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 2
50433: NEG
50434: PUSH
50435: LD_INT 3
50437: NEG
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 3
50445: NEG
50446: PUSH
50447: LD_INT 2
50449: NEG
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 3
50457: NEG
50458: PUSH
50459: LD_INT 3
50461: NEG
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50485: LD_ADDR_VAR 0 14
50489: PUSH
50490: LD_INT 0
50492: PUSH
50493: LD_INT 0
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 0
50502: PUSH
50503: LD_INT 1
50505: NEG
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 1
50513: PUSH
50514: LD_INT 0
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 1
50523: PUSH
50524: LD_INT 1
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 0
50533: PUSH
50534: LD_INT 1
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 1
50543: NEG
50544: PUSH
50545: LD_INT 0
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 1
50554: NEG
50555: PUSH
50556: LD_INT 1
50558: NEG
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 1
50566: NEG
50567: PUSH
50568: LD_INT 2
50570: NEG
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 0
50578: PUSH
50579: LD_INT 2
50581: NEG
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 1
50589: PUSH
50590: LD_INT 1
50592: NEG
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 1
50600: PUSH
50601: LD_INT 2
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 0
50610: PUSH
50611: LD_INT 2
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 1
50620: NEG
50621: PUSH
50622: LD_INT 1
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 1
50631: NEG
50632: PUSH
50633: LD_INT 3
50635: NEG
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 0
50643: PUSH
50644: LD_INT 3
50646: NEG
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 1
50654: PUSH
50655: LD_INT 2
50657: NEG
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50681: LD_ADDR_VAR 0 15
50685: PUSH
50686: LD_INT 0
50688: PUSH
50689: LD_INT 0
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 0
50698: PUSH
50699: LD_INT 1
50701: NEG
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 1
50709: PUSH
50710: LD_INT 0
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 1
50719: PUSH
50720: LD_INT 1
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 0
50729: PUSH
50730: LD_INT 1
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 1
50739: NEG
50740: PUSH
50741: LD_INT 0
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 1
50750: NEG
50751: PUSH
50752: LD_INT 1
50754: NEG
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 1
50762: PUSH
50763: LD_INT 1
50765: NEG
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 2
50773: PUSH
50774: LD_INT 0
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 2
50783: PUSH
50784: LD_INT 1
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 1
50793: NEG
50794: PUSH
50795: LD_INT 1
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 2
50804: NEG
50805: PUSH
50806: LD_INT 0
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 2
50815: NEG
50816: PUSH
50817: LD_INT 1
50819: NEG
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 2
50827: PUSH
50828: LD_INT 1
50830: NEG
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 3
50838: PUSH
50839: LD_INT 0
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 3
50848: PUSH
50849: LD_INT 1
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50874: LD_ADDR_VAR 0 16
50878: PUSH
50879: LD_INT 0
50881: PUSH
50882: LD_INT 0
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 0
50891: PUSH
50892: LD_INT 1
50894: NEG
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 1
50902: PUSH
50903: LD_INT 0
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 1
50912: PUSH
50913: LD_INT 1
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 0
50922: PUSH
50923: LD_INT 1
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 1
50932: NEG
50933: PUSH
50934: LD_INT 0
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 1
50943: NEG
50944: PUSH
50945: LD_INT 1
50947: NEG
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 1
50955: NEG
50956: PUSH
50957: LD_INT 2
50959: NEG
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 2
50967: PUSH
50968: LD_INT 1
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 2
50977: PUSH
50978: LD_INT 2
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 1
50987: PUSH
50988: LD_INT 2
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 2
50997: NEG
50998: PUSH
50999: LD_INT 1
51001: NEG
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 2
51009: NEG
51010: PUSH
51011: LD_INT 2
51013: NEG
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 3
51021: PUSH
51022: LD_INT 2
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 3
51031: PUSH
51032: LD_INT 3
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 2
51041: PUSH
51042: LD_INT 3
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51067: LD_ADDR_VAR 0 17
51071: PUSH
51072: LD_INT 0
51074: PUSH
51075: LD_INT 0
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 0
51084: PUSH
51085: LD_INT 1
51087: NEG
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 1
51095: PUSH
51096: LD_INT 0
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 1
51105: PUSH
51106: LD_INT 1
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 0
51115: PUSH
51116: LD_INT 1
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 1
51125: NEG
51126: PUSH
51127: LD_INT 0
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 1
51136: NEG
51137: PUSH
51138: LD_INT 1
51140: NEG
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 1
51148: NEG
51149: PUSH
51150: LD_INT 2
51152: NEG
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 0
51160: PUSH
51161: LD_INT 2
51163: NEG
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 1
51171: PUSH
51172: LD_INT 1
51174: NEG
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 2
51182: PUSH
51183: LD_INT 0
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 2
51192: PUSH
51193: LD_INT 1
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 2
51202: PUSH
51203: LD_INT 2
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 1
51212: PUSH
51213: LD_INT 2
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 0
51222: PUSH
51223: LD_INT 2
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 1
51232: NEG
51233: PUSH
51234: LD_INT 1
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 2
51243: NEG
51244: PUSH
51245: LD_INT 0
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 2
51254: NEG
51255: PUSH
51256: LD_INT 1
51258: NEG
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 2
51266: NEG
51267: PUSH
51268: LD_INT 2
51270: NEG
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51297: LD_ADDR_VAR 0 18
51301: PUSH
51302: LD_INT 0
51304: PUSH
51305: LD_INT 0
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 0
51314: PUSH
51315: LD_INT 1
51317: NEG
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 1
51325: PUSH
51326: LD_INT 0
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 1
51335: PUSH
51336: LD_INT 1
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 0
51345: PUSH
51346: LD_INT 1
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 1
51355: NEG
51356: PUSH
51357: LD_INT 0
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 1
51366: NEG
51367: PUSH
51368: LD_INT 1
51370: NEG
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 1
51378: NEG
51379: PUSH
51380: LD_INT 2
51382: NEG
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 0
51390: PUSH
51391: LD_INT 2
51393: NEG
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 1
51401: PUSH
51402: LD_INT 1
51404: NEG
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 2
51412: PUSH
51413: LD_INT 0
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 2
51422: PUSH
51423: LD_INT 1
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 2
51432: PUSH
51433: LD_INT 2
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 1
51442: PUSH
51443: LD_INT 2
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 0
51452: PUSH
51453: LD_INT 2
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 1
51462: NEG
51463: PUSH
51464: LD_INT 1
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 2
51473: NEG
51474: PUSH
51475: LD_INT 0
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 2
51484: NEG
51485: PUSH
51486: LD_INT 1
51488: NEG
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 2
51496: NEG
51497: PUSH
51498: LD_INT 2
51500: NEG
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51527: LD_ADDR_VAR 0 19
51531: PUSH
51532: LD_INT 0
51534: PUSH
51535: LD_INT 0
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 0
51544: PUSH
51545: LD_INT 1
51547: NEG
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 1
51555: PUSH
51556: LD_INT 0
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 1
51565: PUSH
51566: LD_INT 1
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 0
51575: PUSH
51576: LD_INT 1
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 1
51585: NEG
51586: PUSH
51587: LD_INT 0
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 1
51596: NEG
51597: PUSH
51598: LD_INT 1
51600: NEG
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 1
51608: NEG
51609: PUSH
51610: LD_INT 2
51612: NEG
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 0
51620: PUSH
51621: LD_INT 2
51623: NEG
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 1
51631: PUSH
51632: LD_INT 1
51634: NEG
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 2
51642: PUSH
51643: LD_INT 0
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 2
51652: PUSH
51653: LD_INT 1
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 2
51662: PUSH
51663: LD_INT 2
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 1
51672: PUSH
51673: LD_INT 2
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 0
51682: PUSH
51683: LD_INT 2
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 1
51692: NEG
51693: PUSH
51694: LD_INT 1
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 2
51703: NEG
51704: PUSH
51705: LD_INT 0
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 2
51714: NEG
51715: PUSH
51716: LD_INT 1
51718: NEG
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 2
51726: NEG
51727: PUSH
51728: LD_INT 2
51730: NEG
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51757: LD_ADDR_VAR 0 20
51761: PUSH
51762: LD_INT 0
51764: PUSH
51765: LD_INT 0
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 0
51774: PUSH
51775: LD_INT 1
51777: NEG
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 1
51785: PUSH
51786: LD_INT 0
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 1
51795: PUSH
51796: LD_INT 1
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 0
51805: PUSH
51806: LD_INT 1
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 1
51815: NEG
51816: PUSH
51817: LD_INT 0
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 1
51826: NEG
51827: PUSH
51828: LD_INT 1
51830: NEG
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 1
51838: NEG
51839: PUSH
51840: LD_INT 2
51842: NEG
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 0
51850: PUSH
51851: LD_INT 2
51853: NEG
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 1
51861: PUSH
51862: LD_INT 1
51864: NEG
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 2
51872: PUSH
51873: LD_INT 0
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 2
51882: PUSH
51883: LD_INT 1
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 2
51892: PUSH
51893: LD_INT 2
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 1
51902: PUSH
51903: LD_INT 2
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 0
51912: PUSH
51913: LD_INT 2
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 1
51922: NEG
51923: PUSH
51924: LD_INT 1
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 2
51933: NEG
51934: PUSH
51935: LD_INT 0
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 2
51944: NEG
51945: PUSH
51946: LD_INT 1
51948: NEG
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 2
51956: NEG
51957: PUSH
51958: LD_INT 2
51960: NEG
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51987: LD_ADDR_VAR 0 21
51991: PUSH
51992: LD_INT 0
51994: PUSH
51995: LD_INT 0
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 0
52004: PUSH
52005: LD_INT 1
52007: NEG
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 1
52015: PUSH
52016: LD_INT 0
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 1
52025: PUSH
52026: LD_INT 1
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 0
52035: PUSH
52036: LD_INT 1
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 1
52045: NEG
52046: PUSH
52047: LD_INT 0
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 1
52056: NEG
52057: PUSH
52058: LD_INT 1
52060: NEG
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 1
52068: NEG
52069: PUSH
52070: LD_INT 2
52072: NEG
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 0
52080: PUSH
52081: LD_INT 2
52083: NEG
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 1
52091: PUSH
52092: LD_INT 1
52094: NEG
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 2
52102: PUSH
52103: LD_INT 0
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 2
52112: PUSH
52113: LD_INT 1
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 2
52122: PUSH
52123: LD_INT 2
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 1
52132: PUSH
52133: LD_INT 2
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 0
52142: PUSH
52143: LD_INT 2
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 1
52152: NEG
52153: PUSH
52154: LD_INT 1
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 2
52163: NEG
52164: PUSH
52165: LD_INT 0
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 2
52174: NEG
52175: PUSH
52176: LD_INT 1
52178: NEG
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 2
52186: NEG
52187: PUSH
52188: LD_INT 2
52190: NEG
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52217: LD_ADDR_VAR 0 22
52221: PUSH
52222: LD_INT 0
52224: PUSH
52225: LD_INT 0
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 0
52234: PUSH
52235: LD_INT 1
52237: NEG
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 1
52245: PUSH
52246: LD_INT 0
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 1
52255: PUSH
52256: LD_INT 1
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 0
52265: PUSH
52266: LD_INT 1
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 1
52275: NEG
52276: PUSH
52277: LD_INT 0
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 1
52286: NEG
52287: PUSH
52288: LD_INT 1
52290: NEG
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 1
52298: NEG
52299: PUSH
52300: LD_INT 2
52302: NEG
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 0
52310: PUSH
52311: LD_INT 2
52313: NEG
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 1
52321: PUSH
52322: LD_INT 1
52324: NEG
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 2
52332: PUSH
52333: LD_INT 0
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 2
52342: PUSH
52343: LD_INT 1
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 2
52352: PUSH
52353: LD_INT 2
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 1
52362: PUSH
52363: LD_INT 2
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 0
52372: PUSH
52373: LD_INT 2
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 1
52382: NEG
52383: PUSH
52384: LD_INT 1
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 2
52393: NEG
52394: PUSH
52395: LD_INT 0
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 2
52404: NEG
52405: PUSH
52406: LD_INT 1
52408: NEG
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 2
52416: NEG
52417: PUSH
52418: LD_INT 2
52420: NEG
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52447: LD_ADDR_VAR 0 23
52451: PUSH
52452: LD_INT 0
52454: PUSH
52455: LD_INT 0
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 0
52464: PUSH
52465: LD_INT 1
52467: NEG
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 1
52475: PUSH
52476: LD_INT 0
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 1
52485: PUSH
52486: LD_INT 1
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 0
52495: PUSH
52496: LD_INT 1
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 1
52505: NEG
52506: PUSH
52507: LD_INT 0
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 1
52516: NEG
52517: PUSH
52518: LD_INT 1
52520: NEG
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 1
52528: NEG
52529: PUSH
52530: LD_INT 2
52532: NEG
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 0
52540: PUSH
52541: LD_INT 2
52543: NEG
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 1
52551: PUSH
52552: LD_INT 1
52554: NEG
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 2
52562: PUSH
52563: LD_INT 0
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 2
52572: PUSH
52573: LD_INT 1
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 2
52582: PUSH
52583: LD_INT 2
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 1
52592: PUSH
52593: LD_INT 2
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 0
52602: PUSH
52603: LD_INT 2
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 1
52612: NEG
52613: PUSH
52614: LD_INT 1
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 2
52623: NEG
52624: PUSH
52625: LD_INT 0
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 2
52634: NEG
52635: PUSH
52636: LD_INT 1
52638: NEG
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 2
52646: NEG
52647: PUSH
52648: LD_INT 2
52650: NEG
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 2
52658: NEG
52659: PUSH
52660: LD_INT 3
52662: NEG
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 1
52670: NEG
52671: PUSH
52672: LD_INT 3
52674: NEG
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 1
52682: PUSH
52683: LD_INT 2
52685: NEG
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 2
52693: PUSH
52694: LD_INT 1
52696: NEG
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
52727: LD_ADDR_VAR 0 24
52731: PUSH
52732: LD_INT 0
52734: PUSH
52735: LD_INT 0
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 0
52744: PUSH
52745: LD_INT 1
52747: NEG
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 1
52755: PUSH
52756: LD_INT 0
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 1
52765: PUSH
52766: LD_INT 1
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 0
52775: PUSH
52776: LD_INT 1
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 1
52785: NEG
52786: PUSH
52787: LD_INT 0
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 1
52796: NEG
52797: PUSH
52798: LD_INT 1
52800: NEG
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 1
52808: NEG
52809: PUSH
52810: LD_INT 2
52812: NEG
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 0
52820: PUSH
52821: LD_INT 2
52823: NEG
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 1
52831: PUSH
52832: LD_INT 1
52834: NEG
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 2
52842: PUSH
52843: LD_INT 0
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 2
52852: PUSH
52853: LD_INT 1
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 2
52862: PUSH
52863: LD_INT 2
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 1
52872: PUSH
52873: LD_INT 2
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 0
52882: PUSH
52883: LD_INT 2
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 1
52892: NEG
52893: PUSH
52894: LD_INT 1
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 2
52903: NEG
52904: PUSH
52905: LD_INT 0
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 2
52914: NEG
52915: PUSH
52916: LD_INT 1
52918: NEG
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 2
52926: NEG
52927: PUSH
52928: LD_INT 2
52930: NEG
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 1
52938: PUSH
52939: LD_INT 2
52941: NEG
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 2
52949: PUSH
52950: LD_INT 1
52952: NEG
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 3
52960: PUSH
52961: LD_INT 1
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 3
52970: PUSH
52971: LD_INT 2
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
53003: LD_ADDR_VAR 0 25
53007: PUSH
53008: LD_INT 0
53010: PUSH
53011: LD_INT 0
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: LD_INT 0
53020: PUSH
53021: LD_INT 1
53023: NEG
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 1
53031: PUSH
53032: LD_INT 0
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 1
53041: PUSH
53042: LD_INT 1
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 0
53051: PUSH
53052: LD_INT 1
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 1
53061: NEG
53062: PUSH
53063: LD_INT 0
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 1
53072: NEG
53073: PUSH
53074: LD_INT 1
53076: NEG
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 1
53084: NEG
53085: PUSH
53086: LD_INT 2
53088: NEG
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 0
53096: PUSH
53097: LD_INT 2
53099: NEG
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 1
53107: PUSH
53108: LD_INT 1
53110: NEG
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 2
53118: PUSH
53119: LD_INT 0
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 2
53128: PUSH
53129: LD_INT 1
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 2
53138: PUSH
53139: LD_INT 2
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 1
53148: PUSH
53149: LD_INT 2
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 0
53158: PUSH
53159: LD_INT 2
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 1
53168: NEG
53169: PUSH
53170: LD_INT 1
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: LD_INT 2
53179: NEG
53180: PUSH
53181: LD_INT 0
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 2
53190: NEG
53191: PUSH
53192: LD_INT 1
53194: NEG
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 2
53202: NEG
53203: PUSH
53204: LD_INT 2
53206: NEG
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 3
53214: PUSH
53215: LD_INT 1
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 3
53224: PUSH
53225: LD_INT 2
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 2
53234: PUSH
53235: LD_INT 3
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 1
53244: PUSH
53245: LD_INT 3
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53277: LD_ADDR_VAR 0 26
53281: PUSH
53282: LD_INT 0
53284: PUSH
53285: LD_INT 0
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 0
53294: PUSH
53295: LD_INT 1
53297: NEG
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 1
53305: PUSH
53306: LD_INT 0
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 1
53315: PUSH
53316: LD_INT 1
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 0
53325: PUSH
53326: LD_INT 1
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 1
53335: NEG
53336: PUSH
53337: LD_INT 0
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 1
53346: NEG
53347: PUSH
53348: LD_INT 1
53350: NEG
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 1
53358: NEG
53359: PUSH
53360: LD_INT 2
53362: NEG
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 0
53370: PUSH
53371: LD_INT 2
53373: NEG
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 1
53381: PUSH
53382: LD_INT 1
53384: NEG
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 2
53392: PUSH
53393: LD_INT 0
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 2
53402: PUSH
53403: LD_INT 1
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 2
53412: PUSH
53413: LD_INT 2
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 1
53422: PUSH
53423: LD_INT 2
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 0
53432: PUSH
53433: LD_INT 2
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 1
53442: NEG
53443: PUSH
53444: LD_INT 1
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 2
53453: NEG
53454: PUSH
53455: LD_INT 0
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 2
53464: NEG
53465: PUSH
53466: LD_INT 1
53468: NEG
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 2
53476: NEG
53477: PUSH
53478: LD_INT 2
53480: NEG
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 2
53488: PUSH
53489: LD_INT 3
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 1
53498: PUSH
53499: LD_INT 3
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 1
53508: NEG
53509: PUSH
53510: LD_INT 2
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 2
53519: NEG
53520: PUSH
53521: LD_INT 1
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53553: LD_ADDR_VAR 0 27
53557: PUSH
53558: LD_INT 0
53560: PUSH
53561: LD_INT 0
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 0
53570: PUSH
53571: LD_INT 1
53573: NEG
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 1
53581: PUSH
53582: LD_INT 0
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 1
53591: PUSH
53592: LD_INT 1
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 0
53601: PUSH
53602: LD_INT 1
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 1
53611: NEG
53612: PUSH
53613: LD_INT 0
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 1
53622: NEG
53623: PUSH
53624: LD_INT 1
53626: NEG
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 1
53634: NEG
53635: PUSH
53636: LD_INT 2
53638: NEG
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 0
53646: PUSH
53647: LD_INT 2
53649: NEG
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 1
53657: PUSH
53658: LD_INT 1
53660: NEG
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 2
53668: PUSH
53669: LD_INT 0
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 2
53678: PUSH
53679: LD_INT 1
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 2
53688: PUSH
53689: LD_INT 2
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 1
53698: PUSH
53699: LD_INT 2
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 0
53708: PUSH
53709: LD_INT 2
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 1
53718: NEG
53719: PUSH
53720: LD_INT 1
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 2
53729: NEG
53730: PUSH
53731: LD_INT 0
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 2
53740: NEG
53741: PUSH
53742: LD_INT 1
53744: NEG
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 2
53752: NEG
53753: PUSH
53754: LD_INT 2
53756: NEG
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 1
53764: NEG
53765: PUSH
53766: LD_INT 2
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: LD_INT 2
53775: NEG
53776: PUSH
53777: LD_INT 1
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 3
53786: NEG
53787: PUSH
53788: LD_INT 1
53790: NEG
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 3
53798: NEG
53799: PUSH
53800: LD_INT 2
53802: NEG
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53833: LD_ADDR_VAR 0 28
53837: PUSH
53838: LD_INT 0
53840: PUSH
53841: LD_INT 0
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 0
53850: PUSH
53851: LD_INT 1
53853: NEG
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 1
53861: PUSH
53862: LD_INT 0
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 1
53871: PUSH
53872: LD_INT 1
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 0
53881: PUSH
53882: LD_INT 1
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 1
53891: NEG
53892: PUSH
53893: LD_INT 0
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 1
53902: NEG
53903: PUSH
53904: LD_INT 1
53906: NEG
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 1
53914: NEG
53915: PUSH
53916: LD_INT 2
53918: NEG
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 0
53926: PUSH
53927: LD_INT 2
53929: NEG
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 1
53937: PUSH
53938: LD_INT 1
53940: NEG
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 2
53948: PUSH
53949: LD_INT 0
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 2
53958: PUSH
53959: LD_INT 1
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 2
53968: PUSH
53969: LD_INT 2
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 1
53978: PUSH
53979: LD_INT 2
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 0
53988: PUSH
53989: LD_INT 2
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 1
53998: NEG
53999: PUSH
54000: LD_INT 1
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 2
54009: NEG
54010: PUSH
54011: LD_INT 0
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 2
54020: NEG
54021: PUSH
54022: LD_INT 1
54024: NEG
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 2
54032: NEG
54033: PUSH
54034: LD_INT 2
54036: NEG
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 2
54044: NEG
54045: PUSH
54046: LD_INT 3
54048: NEG
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 1
54056: NEG
54057: PUSH
54058: LD_INT 3
54060: NEG
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 3
54068: NEG
54069: PUSH
54070: LD_INT 1
54072: NEG
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 3
54080: NEG
54081: PUSH
54082: LD_INT 2
54084: NEG
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54115: LD_ADDR_VAR 0 29
54119: PUSH
54120: LD_INT 0
54122: PUSH
54123: LD_INT 0
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 0
54132: PUSH
54133: LD_INT 1
54135: NEG
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 1
54143: PUSH
54144: LD_INT 0
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 1
54153: PUSH
54154: LD_INT 1
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 0
54163: PUSH
54164: LD_INT 1
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 1
54173: NEG
54174: PUSH
54175: LD_INT 0
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 1
54184: NEG
54185: PUSH
54186: LD_INT 1
54188: NEG
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 1
54196: NEG
54197: PUSH
54198: LD_INT 2
54200: NEG
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 0
54208: PUSH
54209: LD_INT 2
54211: NEG
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 1
54219: PUSH
54220: LD_INT 1
54222: NEG
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 2
54230: PUSH
54231: LD_INT 0
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 2
54240: PUSH
54241: LD_INT 1
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 1
54250: PUSH
54251: LD_INT 2
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 0
54260: PUSH
54261: LD_INT 2
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 1
54270: NEG
54271: PUSH
54272: LD_INT 1
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 2
54281: NEG
54282: PUSH
54283: LD_INT 1
54285: NEG
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 2
54293: NEG
54294: PUSH
54295: LD_INT 2
54297: NEG
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 2
54305: NEG
54306: PUSH
54307: LD_INT 3
54309: NEG
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 2
54317: PUSH
54318: LD_INT 1
54320: NEG
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 3
54328: PUSH
54329: LD_INT 1
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 1
54338: PUSH
54339: LD_INT 3
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 1
54348: NEG
54349: PUSH
54350: LD_INT 2
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 3
54359: NEG
54360: PUSH
54361: LD_INT 2
54363: NEG
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54394: LD_ADDR_VAR 0 30
54398: PUSH
54399: LD_INT 0
54401: PUSH
54402: LD_INT 0
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 0
54411: PUSH
54412: LD_INT 1
54414: NEG
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 1
54422: PUSH
54423: LD_INT 0
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 1
54432: PUSH
54433: LD_INT 1
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 0
54442: PUSH
54443: LD_INT 1
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 1
54452: NEG
54453: PUSH
54454: LD_INT 0
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 1
54463: NEG
54464: PUSH
54465: LD_INT 1
54467: NEG
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 1
54475: NEG
54476: PUSH
54477: LD_INT 2
54479: NEG
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 0
54487: PUSH
54488: LD_INT 2
54490: NEG
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: LD_INT 1
54498: PUSH
54499: LD_INT 1
54501: NEG
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 2
54509: PUSH
54510: LD_INT 0
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 2
54519: PUSH
54520: LD_INT 1
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 2
54529: PUSH
54530: LD_INT 2
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 1
54539: PUSH
54540: LD_INT 2
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 1
54549: NEG
54550: PUSH
54551: LD_INT 1
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 2
54560: NEG
54561: PUSH
54562: LD_INT 0
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 2
54571: NEG
54572: PUSH
54573: LD_INT 1
54575: NEG
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 1
54583: NEG
54584: PUSH
54585: LD_INT 3
54587: NEG
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 1
54595: PUSH
54596: LD_INT 2
54598: NEG
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 3
54606: PUSH
54607: LD_INT 2
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 2
54616: PUSH
54617: LD_INT 3
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 2
54626: NEG
54627: PUSH
54628: LD_INT 1
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 3
54637: NEG
54638: PUSH
54639: LD_INT 1
54641: NEG
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54672: LD_ADDR_VAR 0 31
54676: PUSH
54677: LD_INT 0
54679: PUSH
54680: LD_INT 0
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 0
54689: PUSH
54690: LD_INT 1
54692: NEG
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 1
54700: PUSH
54701: LD_INT 0
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 1
54710: PUSH
54711: LD_INT 1
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 0
54720: PUSH
54721: LD_INT 1
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 1
54730: NEG
54731: PUSH
54732: LD_INT 0
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 1
54741: NEG
54742: PUSH
54743: LD_INT 1
54745: NEG
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 1
54753: NEG
54754: PUSH
54755: LD_INT 2
54757: NEG
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 1
54765: PUSH
54766: LD_INT 1
54768: NEG
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 2
54776: PUSH
54777: LD_INT 0
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 2
54786: PUSH
54787: LD_INT 1
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 2
54796: PUSH
54797: LD_INT 2
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 1
54806: PUSH
54807: LD_INT 2
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 0
54816: PUSH
54817: LD_INT 2
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 1
54826: NEG
54827: PUSH
54828: LD_INT 1
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 2
54837: NEG
54838: PUSH
54839: LD_INT 1
54841: NEG
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 2
54849: NEG
54850: PUSH
54851: LD_INT 2
54853: NEG
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 2
54861: NEG
54862: PUSH
54863: LD_INT 3
54865: NEG
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 2
54873: PUSH
54874: LD_INT 1
54876: NEG
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 3
54884: PUSH
54885: LD_INT 1
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 1
54894: PUSH
54895: LD_INT 3
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 1
54904: NEG
54905: PUSH
54906: LD_INT 2
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 3
54915: NEG
54916: PUSH
54917: LD_INT 2
54919: NEG
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54950: LD_ADDR_VAR 0 32
54954: PUSH
54955: LD_INT 0
54957: PUSH
54958: LD_INT 0
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 0
54967: PUSH
54968: LD_INT 1
54970: NEG
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 1
54978: PUSH
54979: LD_INT 0
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 1
54988: PUSH
54989: LD_INT 1
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 0
54998: PUSH
54999: LD_INT 1
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 1
55008: NEG
55009: PUSH
55010: LD_INT 0
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 1
55019: NEG
55020: PUSH
55021: LD_INT 1
55023: NEG
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 1
55031: NEG
55032: PUSH
55033: LD_INT 2
55035: NEG
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 0
55043: PUSH
55044: LD_INT 2
55046: NEG
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 1
55054: PUSH
55055: LD_INT 1
55057: NEG
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 2
55065: PUSH
55066: LD_INT 1
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 2
55075: PUSH
55076: LD_INT 2
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 1
55085: PUSH
55086: LD_INT 2
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 0
55095: PUSH
55096: LD_INT 2
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 1
55105: NEG
55106: PUSH
55107: LD_INT 1
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 2
55116: NEG
55117: PUSH
55118: LD_INT 0
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 2
55127: NEG
55128: PUSH
55129: LD_INT 1
55131: NEG
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 1
55139: NEG
55140: PUSH
55141: LD_INT 3
55143: NEG
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 1
55151: PUSH
55152: LD_INT 2
55154: NEG
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 3
55162: PUSH
55163: LD_INT 2
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 2
55172: PUSH
55173: LD_INT 3
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 2
55182: NEG
55183: PUSH
55184: LD_INT 1
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 3
55193: NEG
55194: PUSH
55195: LD_INT 1
55197: NEG
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55228: LD_ADDR_VAR 0 33
55232: PUSH
55233: LD_INT 0
55235: PUSH
55236: LD_INT 0
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 0
55245: PUSH
55246: LD_INT 1
55248: NEG
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 1
55256: PUSH
55257: LD_INT 0
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 1
55266: PUSH
55267: LD_INT 1
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 0
55276: PUSH
55277: LD_INT 1
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 1
55286: NEG
55287: PUSH
55288: LD_INT 0
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 1
55297: NEG
55298: PUSH
55299: LD_INT 1
55301: NEG
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 1
55309: NEG
55310: PUSH
55311: LD_INT 2
55313: NEG
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 1
55321: PUSH
55322: LD_INT 1
55324: NEG
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 2
55332: PUSH
55333: LD_INT 0
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 2
55342: PUSH
55343: LD_INT 1
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 1
55352: PUSH
55353: LD_INT 2
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 0
55362: PUSH
55363: LD_INT 2
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 1
55372: NEG
55373: PUSH
55374: LD_INT 1
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 2
55383: NEG
55384: PUSH
55385: LD_INT 0
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 2
55394: NEG
55395: PUSH
55396: LD_INT 1
55398: NEG
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 2
55406: NEG
55407: PUSH
55408: LD_INT 2
55410: NEG
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: LD_INT 2
55418: NEG
55419: PUSH
55420: LD_INT 3
55422: NEG
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 2
55430: PUSH
55431: LD_INT 1
55433: NEG
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 3
55441: PUSH
55442: LD_INT 1
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 1
55451: PUSH
55452: LD_INT 3
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 1
55461: NEG
55462: PUSH
55463: LD_INT 2
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 3
55472: NEG
55473: PUSH
55474: LD_INT 2
55476: NEG
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55507: LD_ADDR_VAR 0 34
55511: PUSH
55512: LD_INT 0
55514: PUSH
55515: LD_INT 0
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 0
55524: PUSH
55525: LD_INT 1
55527: NEG
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 1
55535: PUSH
55536: LD_INT 0
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 1
55545: PUSH
55546: LD_INT 1
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 0
55555: PUSH
55556: LD_INT 1
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 1
55565: NEG
55566: PUSH
55567: LD_INT 0
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 1
55576: NEG
55577: PUSH
55578: LD_INT 1
55580: NEG
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 1
55588: NEG
55589: PUSH
55590: LD_INT 2
55592: NEG
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 0
55600: PUSH
55601: LD_INT 2
55603: NEG
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 1
55611: PUSH
55612: LD_INT 1
55614: NEG
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 2
55622: PUSH
55623: LD_INT 1
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 2
55632: PUSH
55633: LD_INT 2
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 1
55642: PUSH
55643: LD_INT 2
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 1
55652: NEG
55653: PUSH
55654: LD_INT 1
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 2
55663: NEG
55664: PUSH
55665: LD_INT 0
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: LD_INT 2
55674: NEG
55675: PUSH
55676: LD_INT 1
55678: NEG
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 2
55686: NEG
55687: PUSH
55688: LD_INT 2
55690: NEG
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 1
55698: NEG
55699: PUSH
55700: LD_INT 3
55702: NEG
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 1
55710: PUSH
55711: LD_INT 2
55713: NEG
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 3
55721: PUSH
55722: LD_INT 2
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 2
55731: PUSH
55732: LD_INT 3
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 2
55741: NEG
55742: PUSH
55743: LD_INT 1
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 3
55752: NEG
55753: PUSH
55754: LD_INT 1
55756: NEG
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55787: LD_ADDR_VAR 0 35
55791: PUSH
55792: LD_INT 0
55794: PUSH
55795: LD_INT 0
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 0
55804: PUSH
55805: LD_INT 1
55807: NEG
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 1
55815: PUSH
55816: LD_INT 0
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 1
55825: PUSH
55826: LD_INT 1
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 0
55835: PUSH
55836: LD_INT 1
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 1
55845: NEG
55846: PUSH
55847: LD_INT 0
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 1
55856: NEG
55857: PUSH
55858: LD_INT 1
55860: NEG
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 2
55868: PUSH
55869: LD_INT 1
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 2
55878: NEG
55879: PUSH
55880: LD_INT 1
55882: NEG
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55899: LD_ADDR_VAR 0 36
55903: PUSH
55904: LD_INT 0
55906: PUSH
55907: LD_INT 0
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 0
55916: PUSH
55917: LD_INT 1
55919: NEG
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 1
55927: PUSH
55928: LD_INT 0
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 1
55937: PUSH
55938: LD_INT 1
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 0
55947: PUSH
55948: LD_INT 1
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: LD_INT 1
55957: NEG
55958: PUSH
55959: LD_INT 0
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 1
55968: NEG
55969: PUSH
55970: LD_INT 1
55972: NEG
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 1
55980: NEG
55981: PUSH
55982: LD_INT 2
55984: NEG
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 1
55992: PUSH
55993: LD_INT 2
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56011: LD_ADDR_VAR 0 37
56015: PUSH
56016: LD_INT 0
56018: PUSH
56019: LD_INT 0
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 0
56028: PUSH
56029: LD_INT 1
56031: NEG
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 1
56039: PUSH
56040: LD_INT 0
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 1
56049: PUSH
56050: LD_INT 1
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 0
56059: PUSH
56060: LD_INT 1
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 1
56069: NEG
56070: PUSH
56071: LD_INT 0
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 1
56080: NEG
56081: PUSH
56082: LD_INT 1
56084: NEG
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 1
56092: PUSH
56093: LD_INT 1
56095: NEG
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 1
56103: NEG
56104: PUSH
56105: LD_INT 1
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56123: LD_ADDR_VAR 0 38
56127: PUSH
56128: LD_INT 0
56130: PUSH
56131: LD_INT 0
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 0
56140: PUSH
56141: LD_INT 1
56143: NEG
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 1
56151: PUSH
56152: LD_INT 0
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 1
56161: PUSH
56162: LD_INT 1
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 0
56171: PUSH
56172: LD_INT 1
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 1
56181: NEG
56182: PUSH
56183: LD_INT 0
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 1
56192: NEG
56193: PUSH
56194: LD_INT 1
56196: NEG
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 2
56204: PUSH
56205: LD_INT 1
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 2
56214: NEG
56215: PUSH
56216: LD_INT 1
56218: NEG
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56235: LD_ADDR_VAR 0 39
56239: PUSH
56240: LD_INT 0
56242: PUSH
56243: LD_INT 0
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 0
56252: PUSH
56253: LD_INT 1
56255: NEG
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 1
56263: PUSH
56264: LD_INT 0
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 1
56273: PUSH
56274: LD_INT 1
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: PUSH
56281: LD_INT 0
56283: PUSH
56284: LD_INT 1
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 1
56293: NEG
56294: PUSH
56295: LD_INT 0
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 1
56304: NEG
56305: PUSH
56306: LD_INT 1
56308: NEG
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 1
56316: NEG
56317: PUSH
56318: LD_INT 2
56320: NEG
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 1
56328: PUSH
56329: LD_INT 2
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56347: LD_ADDR_VAR 0 40
56351: PUSH
56352: LD_INT 0
56354: PUSH
56355: LD_INT 0
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 0
56364: PUSH
56365: LD_INT 1
56367: NEG
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 1
56375: PUSH
56376: LD_INT 0
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 1
56385: PUSH
56386: LD_INT 1
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 0
56395: PUSH
56396: LD_INT 1
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 1
56405: NEG
56406: PUSH
56407: LD_INT 0
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 1
56416: NEG
56417: PUSH
56418: LD_INT 1
56420: NEG
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 1
56428: PUSH
56429: LD_INT 1
56431: NEG
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 1
56439: NEG
56440: PUSH
56441: LD_INT 1
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56459: LD_ADDR_VAR 0 41
56463: PUSH
56464: LD_INT 0
56466: PUSH
56467: LD_INT 0
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 0
56476: PUSH
56477: LD_INT 1
56479: NEG
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 1
56487: PUSH
56488: LD_INT 0
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 1
56497: PUSH
56498: LD_INT 1
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 0
56507: PUSH
56508: LD_INT 1
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 1
56517: NEG
56518: PUSH
56519: LD_INT 0
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 1
56528: NEG
56529: PUSH
56530: LD_INT 1
56532: NEG
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 1
56540: NEG
56541: PUSH
56542: LD_INT 2
56544: NEG
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 1
56552: PUSH
56553: LD_INT 1
56555: NEG
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 2
56563: PUSH
56564: LD_INT 0
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 2
56573: PUSH
56574: LD_INT 1
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 2
56583: PUSH
56584: LD_INT 2
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 1
56593: PUSH
56594: LD_INT 2
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 1
56603: NEG
56604: PUSH
56605: LD_INT 1
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 2
56614: NEG
56615: PUSH
56616: LD_INT 0
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: LD_INT 2
56625: NEG
56626: PUSH
56627: LD_INT 1
56629: NEG
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 2
56637: NEG
56638: PUSH
56639: LD_INT 2
56641: NEG
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 2
56649: NEG
56650: PUSH
56651: LD_INT 3
56653: NEG
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 2
56661: PUSH
56662: LD_INT 1
56664: NEG
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 3
56672: PUSH
56673: LD_INT 0
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 3
56682: PUSH
56683: LD_INT 1
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 3
56692: PUSH
56693: LD_INT 2
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 3
56702: PUSH
56703: LD_INT 3
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 2
56712: PUSH
56713: LD_INT 3
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 2
56722: NEG
56723: PUSH
56724: LD_INT 1
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 3
56733: NEG
56734: PUSH
56735: LD_INT 0
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 3
56744: NEG
56745: PUSH
56746: LD_INT 1
56748: NEG
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 3
56756: NEG
56757: PUSH
56758: LD_INT 2
56760: NEG
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 3
56768: NEG
56769: PUSH
56770: LD_INT 3
56772: NEG
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56809: LD_ADDR_VAR 0 42
56813: PUSH
56814: LD_INT 0
56816: PUSH
56817: LD_INT 0
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 0
56826: PUSH
56827: LD_INT 1
56829: NEG
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 1
56837: PUSH
56838: LD_INT 0
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 1
56847: PUSH
56848: LD_INT 1
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 0
56857: PUSH
56858: LD_INT 1
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 1
56867: NEG
56868: PUSH
56869: LD_INT 0
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 1
56878: NEG
56879: PUSH
56880: LD_INT 1
56882: NEG
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 1
56890: NEG
56891: PUSH
56892: LD_INT 2
56894: NEG
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 0
56902: PUSH
56903: LD_INT 2
56905: NEG
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 1
56913: PUSH
56914: LD_INT 1
56916: NEG
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 2
56924: PUSH
56925: LD_INT 1
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 2
56934: PUSH
56935: LD_INT 2
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 1
56944: PUSH
56945: LD_INT 2
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 0
56954: PUSH
56955: LD_INT 2
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 1
56964: NEG
56965: PUSH
56966: LD_INT 1
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 2
56975: NEG
56976: PUSH
56977: LD_INT 1
56979: NEG
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 2
56987: NEG
56988: PUSH
56989: LD_INT 2
56991: NEG
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 2
56999: NEG
57000: PUSH
57001: LD_INT 3
57003: NEG
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 1
57011: NEG
57012: PUSH
57013: LD_INT 3
57015: NEG
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 0
57023: PUSH
57024: LD_INT 3
57026: NEG
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 1
57034: PUSH
57035: LD_INT 2
57037: NEG
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 3
57045: PUSH
57046: LD_INT 2
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 3
57055: PUSH
57056: LD_INT 3
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 2
57065: PUSH
57066: LD_INT 3
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 1
57075: PUSH
57076: LD_INT 3
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 0
57085: PUSH
57086: LD_INT 3
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 1
57095: NEG
57096: PUSH
57097: LD_INT 2
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 3
57106: NEG
57107: PUSH
57108: LD_INT 2
57110: NEG
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 3
57118: NEG
57119: PUSH
57120: LD_INT 3
57122: NEG
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57159: LD_ADDR_VAR 0 43
57163: PUSH
57164: LD_INT 0
57166: PUSH
57167: LD_INT 0
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 0
57176: PUSH
57177: LD_INT 1
57179: NEG
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 1
57187: PUSH
57188: LD_INT 0
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 1
57197: PUSH
57198: LD_INT 1
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 0
57207: PUSH
57208: LD_INT 1
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 1
57217: NEG
57218: PUSH
57219: LD_INT 0
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 1
57228: NEG
57229: PUSH
57230: LD_INT 1
57232: NEG
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 1
57240: NEG
57241: PUSH
57242: LD_INT 2
57244: NEG
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 0
57252: PUSH
57253: LD_INT 2
57255: NEG
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 1
57263: PUSH
57264: LD_INT 1
57266: NEG
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 2
57274: PUSH
57275: LD_INT 0
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 2
57284: PUSH
57285: LD_INT 1
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 1
57294: PUSH
57295: LD_INT 2
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 0
57304: PUSH
57305: LD_INT 2
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 1
57314: NEG
57315: PUSH
57316: LD_INT 1
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 2
57325: NEG
57326: PUSH
57327: LD_INT 0
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 2
57336: NEG
57337: PUSH
57338: LD_INT 1
57340: NEG
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 1
57348: NEG
57349: PUSH
57350: LD_INT 3
57352: NEG
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 0
57360: PUSH
57361: LD_INT 3
57363: NEG
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 1
57371: PUSH
57372: LD_INT 2
57374: NEG
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 2
57382: PUSH
57383: LD_INT 1
57385: NEG
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 3
57393: PUSH
57394: LD_INT 0
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 3
57403: PUSH
57404: LD_INT 1
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 1
57413: PUSH
57414: LD_INT 3
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 0
57423: PUSH
57424: LD_INT 3
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 1
57433: NEG
57434: PUSH
57435: LD_INT 2
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 2
57444: NEG
57445: PUSH
57446: LD_INT 1
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 3
57455: NEG
57456: PUSH
57457: LD_INT 0
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: LD_INT 3
57466: NEG
57467: PUSH
57468: LD_INT 1
57470: NEG
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57507: LD_ADDR_VAR 0 44
57511: PUSH
57512: LD_INT 0
57514: PUSH
57515: LD_INT 0
57517: PUSH
57518: EMPTY
57519: LIST
57520: LIST
57521: PUSH
57522: LD_INT 0
57524: PUSH
57525: LD_INT 1
57527: NEG
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: LD_INT 1
57535: PUSH
57536: LD_INT 0
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_INT 1
57545: PUSH
57546: LD_INT 1
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 0
57555: PUSH
57556: LD_INT 1
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 1
57565: NEG
57566: PUSH
57567: LD_INT 0
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 1
57576: NEG
57577: PUSH
57578: LD_INT 1
57580: NEG
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 1
57588: NEG
57589: PUSH
57590: LD_INT 2
57592: NEG
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 1
57600: PUSH
57601: LD_INT 1
57603: NEG
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 2
57611: PUSH
57612: LD_INT 0
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 2
57621: PUSH
57622: LD_INT 1
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 2
57631: PUSH
57632: LD_INT 2
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 1
57641: PUSH
57642: LD_INT 2
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 1
57651: NEG
57652: PUSH
57653: LD_INT 1
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 2
57662: NEG
57663: PUSH
57664: LD_INT 0
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 2
57673: NEG
57674: PUSH
57675: LD_INT 1
57677: NEG
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 2
57685: NEG
57686: PUSH
57687: LD_INT 2
57689: NEG
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 2
57697: NEG
57698: PUSH
57699: LD_INT 3
57701: NEG
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 2
57709: PUSH
57710: LD_INT 1
57712: NEG
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 3
57720: PUSH
57721: LD_INT 0
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 3
57730: PUSH
57731: LD_INT 1
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 3
57740: PUSH
57741: LD_INT 2
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 3
57750: PUSH
57751: LD_INT 3
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 2
57760: PUSH
57761: LD_INT 3
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 2
57770: NEG
57771: PUSH
57772: LD_INT 1
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 3
57781: NEG
57782: PUSH
57783: LD_INT 0
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 3
57792: NEG
57793: PUSH
57794: LD_INT 1
57796: NEG
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 3
57804: NEG
57805: PUSH
57806: LD_INT 2
57808: NEG
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 3
57816: NEG
57817: PUSH
57818: LD_INT 3
57820: NEG
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57857: LD_ADDR_VAR 0 45
57861: PUSH
57862: LD_INT 0
57864: PUSH
57865: LD_INT 0
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 0
57874: PUSH
57875: LD_INT 1
57877: NEG
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: LD_INT 1
57885: PUSH
57886: LD_INT 0
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 1
57895: PUSH
57896: LD_INT 1
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 0
57905: PUSH
57906: LD_INT 1
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 1
57915: NEG
57916: PUSH
57917: LD_INT 0
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 1
57926: NEG
57927: PUSH
57928: LD_INT 1
57930: NEG
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 1
57938: NEG
57939: PUSH
57940: LD_INT 2
57942: NEG
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 0
57950: PUSH
57951: LD_INT 2
57953: NEG
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 1
57961: PUSH
57962: LD_INT 1
57964: NEG
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 2
57972: PUSH
57973: LD_INT 1
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 2
57982: PUSH
57983: LD_INT 2
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 1
57992: PUSH
57993: LD_INT 2
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 0
58002: PUSH
58003: LD_INT 2
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 1
58012: NEG
58013: PUSH
58014: LD_INT 1
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 2
58023: NEG
58024: PUSH
58025: LD_INT 1
58027: NEG
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: LD_INT 2
58035: NEG
58036: PUSH
58037: LD_INT 2
58039: NEG
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 2
58047: NEG
58048: PUSH
58049: LD_INT 3
58051: NEG
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 1
58059: NEG
58060: PUSH
58061: LD_INT 3
58063: NEG
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 0
58071: PUSH
58072: LD_INT 3
58074: NEG
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: PUSH
58080: LD_INT 1
58082: PUSH
58083: LD_INT 2
58085: NEG
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: PUSH
58091: LD_INT 3
58093: PUSH
58094: LD_INT 2
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 3
58103: PUSH
58104: LD_INT 3
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 2
58113: PUSH
58114: LD_INT 3
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 1
58123: PUSH
58124: LD_INT 3
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 0
58133: PUSH
58134: LD_INT 3
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 1
58143: NEG
58144: PUSH
58145: LD_INT 2
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 3
58154: NEG
58155: PUSH
58156: LD_INT 2
58158: NEG
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 3
58166: NEG
58167: PUSH
58168: LD_INT 3
58170: NEG
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58207: LD_ADDR_VAR 0 46
58211: PUSH
58212: LD_INT 0
58214: PUSH
58215: LD_INT 0
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 0
58224: PUSH
58225: LD_INT 1
58227: NEG
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 1
58235: PUSH
58236: LD_INT 0
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 1
58245: PUSH
58246: LD_INT 1
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 0
58255: PUSH
58256: LD_INT 1
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 1
58265: NEG
58266: PUSH
58267: LD_INT 0
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 1
58276: NEG
58277: PUSH
58278: LD_INT 1
58280: NEG
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 1
58288: NEG
58289: PUSH
58290: LD_INT 2
58292: NEG
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 0
58300: PUSH
58301: LD_INT 2
58303: NEG
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 1
58311: PUSH
58312: LD_INT 1
58314: NEG
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 2
58322: PUSH
58323: LD_INT 0
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 2
58332: PUSH
58333: LD_INT 1
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 1
58342: PUSH
58343: LD_INT 2
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 0
58352: PUSH
58353: LD_INT 2
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 1
58362: NEG
58363: PUSH
58364: LD_INT 1
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 2
58373: NEG
58374: PUSH
58375: LD_INT 0
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 2
58384: NEG
58385: PUSH
58386: LD_INT 1
58388: NEG
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 1
58396: NEG
58397: PUSH
58398: LD_INT 3
58400: NEG
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 0
58408: PUSH
58409: LD_INT 3
58411: NEG
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: LD_INT 1
58419: PUSH
58420: LD_INT 2
58422: NEG
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 2
58430: PUSH
58431: LD_INT 1
58433: NEG
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 3
58441: PUSH
58442: LD_INT 0
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 3
58451: PUSH
58452: LD_INT 1
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 1
58461: PUSH
58462: LD_INT 3
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 0
58471: PUSH
58472: LD_INT 3
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 1
58481: NEG
58482: PUSH
58483: LD_INT 2
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 2
58492: NEG
58493: PUSH
58494: LD_INT 1
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 3
58503: NEG
58504: PUSH
58505: LD_INT 0
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 3
58514: NEG
58515: PUSH
58516: LD_INT 1
58518: NEG
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58555: LD_ADDR_VAR 0 47
58559: PUSH
58560: LD_INT 0
58562: PUSH
58563: LD_INT 0
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 0
58572: PUSH
58573: LD_INT 1
58575: NEG
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 1
58583: PUSH
58584: LD_INT 0
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 1
58593: PUSH
58594: LD_INT 1
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 0
58603: PUSH
58604: LD_INT 1
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 1
58613: NEG
58614: PUSH
58615: LD_INT 0
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 1
58624: NEG
58625: PUSH
58626: LD_INT 1
58628: NEG
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 1
58636: NEG
58637: PUSH
58638: LD_INT 2
58640: NEG
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: LD_INT 0
58648: PUSH
58649: LD_INT 2
58651: NEG
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: LD_INT 1
58659: PUSH
58660: LD_INT 1
58662: NEG
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 2
58670: NEG
58671: PUSH
58672: LD_INT 1
58674: NEG
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 2
58682: NEG
58683: PUSH
58684: LD_INT 2
58686: NEG
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58706: LD_ADDR_VAR 0 48
58710: PUSH
58711: LD_INT 0
58713: PUSH
58714: LD_INT 0
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 0
58723: PUSH
58724: LD_INT 1
58726: NEG
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 1
58734: PUSH
58735: LD_INT 0
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 1
58744: PUSH
58745: LD_INT 1
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 0
58754: PUSH
58755: LD_INT 1
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 1
58764: NEG
58765: PUSH
58766: LD_INT 0
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 1
58775: NEG
58776: PUSH
58777: LD_INT 1
58779: NEG
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: LD_INT 1
58787: NEG
58788: PUSH
58789: LD_INT 2
58791: NEG
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 0
58799: PUSH
58800: LD_INT 2
58802: NEG
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 1
58810: PUSH
58811: LD_INT 1
58813: NEG
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 2
58821: PUSH
58822: LD_INT 0
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 2
58831: PUSH
58832: LD_INT 1
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58853: LD_ADDR_VAR 0 49
58857: PUSH
58858: LD_INT 0
58860: PUSH
58861: LD_INT 0
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 0
58870: PUSH
58871: LD_INT 1
58873: NEG
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 1
58881: PUSH
58882: LD_INT 0
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 1
58891: PUSH
58892: LD_INT 1
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 0
58901: PUSH
58902: LD_INT 1
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 1
58911: NEG
58912: PUSH
58913: LD_INT 0
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 1
58922: NEG
58923: PUSH
58924: LD_INT 1
58926: NEG
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 1
58934: PUSH
58935: LD_INT 1
58937: NEG
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 2
58945: PUSH
58946: LD_INT 0
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: LD_INT 2
58955: PUSH
58956: LD_INT 1
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 2
58965: PUSH
58966: LD_INT 2
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 1
58975: PUSH
58976: LD_INT 2
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58997: LD_ADDR_VAR 0 50
59001: PUSH
59002: LD_INT 0
59004: PUSH
59005: LD_INT 0
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 0
59014: PUSH
59015: LD_INT 1
59017: NEG
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: PUSH
59023: LD_INT 1
59025: PUSH
59026: LD_INT 0
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 1
59035: PUSH
59036: LD_INT 1
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 0
59045: PUSH
59046: LD_INT 1
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 1
59055: NEG
59056: PUSH
59057: LD_INT 0
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: PUSH
59064: LD_INT 1
59066: NEG
59067: PUSH
59068: LD_INT 1
59070: NEG
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: LD_INT 2
59078: PUSH
59079: LD_INT 1
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: LD_INT 2
59088: PUSH
59089: LD_INT 2
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 1
59098: PUSH
59099: LD_INT 2
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PUSH
59106: LD_INT 0
59108: PUSH
59109: LD_INT 2
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 1
59118: NEG
59119: PUSH
59120: LD_INT 1
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59141: LD_ADDR_VAR 0 51
59145: PUSH
59146: LD_INT 0
59148: PUSH
59149: LD_INT 0
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 0
59158: PUSH
59159: LD_INT 1
59161: NEG
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 1
59169: PUSH
59170: LD_INT 0
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 1
59179: PUSH
59180: LD_INT 1
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 0
59189: PUSH
59190: LD_INT 1
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 1
59199: NEG
59200: PUSH
59201: LD_INT 0
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 1
59210: NEG
59211: PUSH
59212: LD_INT 1
59214: NEG
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 1
59222: PUSH
59223: LD_INT 2
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 0
59232: PUSH
59233: LD_INT 2
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 1
59242: NEG
59243: PUSH
59244: LD_INT 1
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 2
59253: NEG
59254: PUSH
59255: LD_INT 0
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 2
59264: NEG
59265: PUSH
59266: LD_INT 1
59268: NEG
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59288: LD_ADDR_VAR 0 52
59292: PUSH
59293: LD_INT 0
59295: PUSH
59296: LD_INT 0
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 0
59305: PUSH
59306: LD_INT 1
59308: NEG
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 1
59316: PUSH
59317: LD_INT 0
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: LD_INT 1
59326: PUSH
59327: LD_INT 1
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: PUSH
59334: LD_INT 0
59336: PUSH
59337: LD_INT 1
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 1
59346: NEG
59347: PUSH
59348: LD_INT 0
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 1
59357: NEG
59358: PUSH
59359: LD_INT 1
59361: NEG
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 1
59369: NEG
59370: PUSH
59371: LD_INT 2
59373: NEG
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 1
59381: NEG
59382: PUSH
59383: LD_INT 1
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 2
59392: NEG
59393: PUSH
59394: LD_INT 0
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 2
59403: NEG
59404: PUSH
59405: LD_INT 1
59407: NEG
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 2
59415: NEG
59416: PUSH
59417: LD_INT 2
59419: NEG
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: LIST
59429: LIST
59430: LIST
59431: LIST
59432: LIST
59433: LIST
59434: LIST
59435: LIST
59436: LIST
59437: LIST
59438: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59439: LD_ADDR_VAR 0 53
59443: PUSH
59444: LD_INT 0
59446: PUSH
59447: LD_INT 0
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 0
59456: PUSH
59457: LD_INT 1
59459: NEG
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: LD_INT 1
59467: PUSH
59468: LD_INT 0
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: PUSH
59475: LD_INT 1
59477: PUSH
59478: LD_INT 1
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: PUSH
59485: LD_INT 0
59487: PUSH
59488: LD_INT 1
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: LD_INT 1
59497: NEG
59498: PUSH
59499: LD_INT 0
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 1
59508: NEG
59509: PUSH
59510: LD_INT 1
59512: NEG
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 1
59520: NEG
59521: PUSH
59522: LD_INT 2
59524: NEG
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 0
59532: PUSH
59533: LD_INT 2
59535: NEG
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 1
59543: PUSH
59544: LD_INT 1
59546: NEG
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 2
59554: PUSH
59555: LD_INT 0
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 2
59564: PUSH
59565: LD_INT 1
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 2
59574: PUSH
59575: LD_INT 2
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 1
59584: PUSH
59585: LD_INT 2
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 0
59594: PUSH
59595: LD_INT 2
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 1
59604: NEG
59605: PUSH
59606: LD_INT 1
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 2
59615: NEG
59616: PUSH
59617: LD_INT 0
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 2
59626: NEG
59627: PUSH
59628: LD_INT 1
59630: NEG
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 2
59638: NEG
59639: PUSH
59640: LD_INT 2
59642: NEG
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59669: LD_ADDR_VAR 0 54
59673: PUSH
59674: LD_INT 0
59676: PUSH
59677: LD_INT 0
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 0
59686: PUSH
59687: LD_INT 1
59689: NEG
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 1
59697: PUSH
59698: LD_INT 0
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: LD_INT 1
59707: PUSH
59708: LD_INT 1
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 0
59717: PUSH
59718: LD_INT 1
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 1
59727: NEG
59728: PUSH
59729: LD_INT 0
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 1
59738: NEG
59739: PUSH
59740: LD_INT 1
59742: NEG
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 1
59750: NEG
59751: PUSH
59752: LD_INT 2
59754: NEG
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 0
59762: PUSH
59763: LD_INT 2
59765: NEG
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 1
59773: PUSH
59774: LD_INT 1
59776: NEG
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 2
59784: PUSH
59785: LD_INT 0
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 2
59794: PUSH
59795: LD_INT 1
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 2
59804: PUSH
59805: LD_INT 2
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 1
59814: PUSH
59815: LD_INT 2
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 0
59824: PUSH
59825: LD_INT 2
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 1
59834: NEG
59835: PUSH
59836: LD_INT 1
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 2
59845: NEG
59846: PUSH
59847: LD_INT 0
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: LD_INT 2
59856: NEG
59857: PUSH
59858: LD_INT 1
59860: NEG
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 2
59868: NEG
59869: PUSH
59870: LD_INT 2
59872: NEG
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: LIST
59886: LIST
59887: LIST
59888: LIST
59889: LIST
59890: LIST
59891: LIST
59892: LIST
59893: LIST
59894: LIST
59895: LIST
59896: LIST
59897: LIST
59898: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59899: LD_ADDR_VAR 0 55
59903: PUSH
59904: LD_INT 0
59906: PUSH
59907: LD_INT 0
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 0
59916: PUSH
59917: LD_INT 1
59919: NEG
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: LD_INT 1
59927: PUSH
59928: LD_INT 0
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 1
59937: PUSH
59938: LD_INT 1
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: PUSH
59945: LD_INT 0
59947: PUSH
59948: LD_INT 1
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 1
59957: NEG
59958: PUSH
59959: LD_INT 0
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PUSH
59966: LD_INT 1
59968: NEG
59969: PUSH
59970: LD_INT 1
59972: NEG
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 1
59980: NEG
59981: PUSH
59982: LD_INT 2
59984: NEG
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: LD_INT 0
59992: PUSH
59993: LD_INT 2
59995: NEG
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PUSH
60001: LD_INT 1
60003: PUSH
60004: LD_INT 1
60006: NEG
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 2
60014: PUSH
60015: LD_INT 0
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 2
60024: PUSH
60025: LD_INT 1
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 2
60034: PUSH
60035: LD_INT 2
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 1
60044: PUSH
60045: LD_INT 2
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 0
60054: PUSH
60055: LD_INT 2
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: LD_INT 1
60064: NEG
60065: PUSH
60066: LD_INT 1
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 2
60075: NEG
60076: PUSH
60077: LD_INT 0
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 2
60086: NEG
60087: PUSH
60088: LD_INT 1
60090: NEG
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 2
60098: NEG
60099: PUSH
60100: LD_INT 2
60102: NEG
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: LIST
60128: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60129: LD_ADDR_VAR 0 56
60133: PUSH
60134: LD_INT 0
60136: PUSH
60137: LD_INT 0
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 0
60146: PUSH
60147: LD_INT 1
60149: NEG
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 1
60157: PUSH
60158: LD_INT 0
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 1
60167: PUSH
60168: LD_INT 1
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 0
60177: PUSH
60178: LD_INT 1
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 1
60187: NEG
60188: PUSH
60189: LD_INT 0
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 1
60198: NEG
60199: PUSH
60200: LD_INT 1
60202: NEG
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 1
60210: NEG
60211: PUSH
60212: LD_INT 2
60214: NEG
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 0
60222: PUSH
60223: LD_INT 2
60225: NEG
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 1
60233: PUSH
60234: LD_INT 1
60236: NEG
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 2
60244: PUSH
60245: LD_INT 0
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 2
60254: PUSH
60255: LD_INT 1
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 2
60264: PUSH
60265: LD_INT 2
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 1
60274: PUSH
60275: LD_INT 2
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: LD_INT 0
60284: PUSH
60285: LD_INT 2
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 1
60294: NEG
60295: PUSH
60296: LD_INT 1
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PUSH
60303: LD_INT 2
60305: NEG
60306: PUSH
60307: LD_INT 0
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 2
60316: NEG
60317: PUSH
60318: LD_INT 1
60320: NEG
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 2
60328: NEG
60329: PUSH
60330: LD_INT 2
60332: NEG
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: LIST
60342: LIST
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60359: LD_ADDR_VAR 0 57
60363: PUSH
60364: LD_INT 0
60366: PUSH
60367: LD_INT 0
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 0
60376: PUSH
60377: LD_INT 1
60379: NEG
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 1
60387: PUSH
60388: LD_INT 0
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 1
60397: PUSH
60398: LD_INT 1
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 0
60407: PUSH
60408: LD_INT 1
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 1
60417: NEG
60418: PUSH
60419: LD_INT 0
60421: PUSH
60422: EMPTY
60423: LIST
60424: LIST
60425: PUSH
60426: LD_INT 1
60428: NEG
60429: PUSH
60430: LD_INT 1
60432: NEG
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PUSH
60438: LD_INT 1
60440: NEG
60441: PUSH
60442: LD_INT 2
60444: NEG
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 0
60452: PUSH
60453: LD_INT 2
60455: NEG
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 1
60463: PUSH
60464: LD_INT 1
60466: NEG
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 2
60474: PUSH
60475: LD_INT 0
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: PUSH
60482: LD_INT 2
60484: PUSH
60485: LD_INT 1
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: LD_INT 2
60494: PUSH
60495: LD_INT 2
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PUSH
60502: LD_INT 1
60504: PUSH
60505: LD_INT 2
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 0
60514: PUSH
60515: LD_INT 2
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: LD_INT 1
60524: NEG
60525: PUSH
60526: LD_INT 1
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 2
60535: NEG
60536: PUSH
60537: LD_INT 0
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: LD_INT 2
60546: NEG
60547: PUSH
60548: LD_INT 1
60550: NEG
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 2
60558: NEG
60559: PUSH
60560: LD_INT 2
60562: NEG
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60589: LD_ADDR_VAR 0 58
60593: PUSH
60594: LD_INT 0
60596: PUSH
60597: LD_INT 0
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 0
60606: PUSH
60607: LD_INT 1
60609: NEG
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: LD_INT 1
60617: PUSH
60618: LD_INT 0
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: LD_INT 1
60627: PUSH
60628: LD_INT 1
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: LD_INT 0
60637: PUSH
60638: LD_INT 1
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 1
60647: NEG
60648: PUSH
60649: LD_INT 0
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: LD_INT 1
60658: NEG
60659: PUSH
60660: LD_INT 1
60662: NEG
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 1
60670: NEG
60671: PUSH
60672: LD_INT 2
60674: NEG
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 0
60682: PUSH
60683: LD_INT 2
60685: NEG
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 1
60693: PUSH
60694: LD_INT 1
60696: NEG
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 2
60704: PUSH
60705: LD_INT 0
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PUSH
60712: LD_INT 2
60714: PUSH
60715: LD_INT 1
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 2
60724: PUSH
60725: LD_INT 2
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 1
60734: PUSH
60735: LD_INT 2
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 0
60744: PUSH
60745: LD_INT 2
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 1
60754: NEG
60755: PUSH
60756: LD_INT 1
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 2
60765: NEG
60766: PUSH
60767: LD_INT 0
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 2
60776: NEG
60777: PUSH
60778: LD_INT 1
60780: NEG
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 2
60788: NEG
60789: PUSH
60790: LD_INT 2
60792: NEG
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60819: LD_ADDR_VAR 0 59
60823: PUSH
60824: LD_INT 0
60826: PUSH
60827: LD_INT 0
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: PUSH
60834: LD_INT 0
60836: PUSH
60837: LD_INT 1
60839: NEG
60840: PUSH
60841: EMPTY
60842: LIST
60843: LIST
60844: PUSH
60845: LD_INT 1
60847: PUSH
60848: LD_INT 0
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: LD_INT 1
60857: PUSH
60858: LD_INT 1
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 0
60867: PUSH
60868: LD_INT 1
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 1
60877: NEG
60878: PUSH
60879: LD_INT 0
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: PUSH
60886: LD_INT 1
60888: NEG
60889: PUSH
60890: LD_INT 1
60892: NEG
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: LIST
60906: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60907: LD_ADDR_VAR 0 60
60911: PUSH
60912: LD_INT 0
60914: PUSH
60915: LD_INT 0
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: PUSH
60922: LD_INT 0
60924: PUSH
60925: LD_INT 1
60927: NEG
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 1
60935: PUSH
60936: LD_INT 0
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: PUSH
60943: LD_INT 1
60945: PUSH
60946: LD_INT 1
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PUSH
60953: LD_INT 0
60955: PUSH
60956: LD_INT 1
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: LD_INT 1
60965: NEG
60966: PUSH
60967: LD_INT 0
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 1
60976: NEG
60977: PUSH
60978: LD_INT 1
60980: NEG
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: LIST
60994: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60995: LD_ADDR_VAR 0 61
60999: PUSH
61000: LD_INT 0
61002: PUSH
61003: LD_INT 0
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 0
61012: PUSH
61013: LD_INT 1
61015: NEG
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 1
61023: PUSH
61024: LD_INT 0
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 1
61033: PUSH
61034: LD_INT 1
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 0
61043: PUSH
61044: LD_INT 1
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: LD_INT 1
61053: NEG
61054: PUSH
61055: LD_INT 0
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 1
61064: NEG
61065: PUSH
61066: LD_INT 1
61068: NEG
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: LIST
61078: LIST
61079: LIST
61080: LIST
61081: LIST
61082: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61083: LD_ADDR_VAR 0 62
61087: PUSH
61088: LD_INT 0
61090: PUSH
61091: LD_INT 0
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 0
61100: PUSH
61101: LD_INT 1
61103: NEG
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 1
61111: PUSH
61112: LD_INT 0
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_INT 1
61121: PUSH
61122: LD_INT 1
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: LD_INT 0
61131: PUSH
61132: LD_INT 1
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 1
61141: NEG
61142: PUSH
61143: LD_INT 0
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: LD_INT 1
61152: NEG
61153: PUSH
61154: LD_INT 1
61156: NEG
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61171: LD_ADDR_VAR 0 63
61175: PUSH
61176: LD_INT 0
61178: PUSH
61179: LD_INT 0
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: LD_INT 0
61188: PUSH
61189: LD_INT 1
61191: NEG
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: LD_INT 1
61199: PUSH
61200: LD_INT 0
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: LD_INT 1
61209: PUSH
61210: LD_INT 1
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: LD_INT 0
61219: PUSH
61220: LD_INT 1
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 1
61229: NEG
61230: PUSH
61231: LD_INT 0
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: LD_INT 1
61240: NEG
61241: PUSH
61242: LD_INT 1
61244: NEG
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61259: LD_ADDR_VAR 0 64
61263: PUSH
61264: LD_INT 0
61266: PUSH
61267: LD_INT 0
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 0
61276: PUSH
61277: LD_INT 1
61279: NEG
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 1
61287: PUSH
61288: LD_INT 0
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 1
61297: PUSH
61298: LD_INT 1
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 0
61307: PUSH
61308: LD_INT 1
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 1
61317: NEG
61318: PUSH
61319: LD_INT 0
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: LD_INT 1
61328: NEG
61329: PUSH
61330: LD_INT 1
61332: NEG
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: ST_TO_ADDR
// end ; 1 :
61347: GO 67244
61349: LD_INT 1
61351: DOUBLE
61352: EQUAL
61353: IFTRUE 61357
61355: GO 63980
61357: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61358: LD_ADDR_VAR 0 11
61362: PUSH
61363: LD_INT 1
61365: NEG
61366: PUSH
61367: LD_INT 3
61369: NEG
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 0
61377: PUSH
61378: LD_INT 3
61380: NEG
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 1
61388: PUSH
61389: LD_INT 2
61391: NEG
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: LIST
61401: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61402: LD_ADDR_VAR 0 12
61406: PUSH
61407: LD_INT 2
61409: PUSH
61410: LD_INT 1
61412: NEG
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: LD_INT 3
61420: PUSH
61421: LD_INT 0
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: LD_INT 3
61430: PUSH
61431: LD_INT 1
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: LIST
61442: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61443: LD_ADDR_VAR 0 13
61447: PUSH
61448: LD_INT 3
61450: PUSH
61451: LD_INT 2
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: PUSH
61458: LD_INT 3
61460: PUSH
61461: LD_INT 3
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 2
61470: PUSH
61471: LD_INT 3
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: LIST
61482: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61483: LD_ADDR_VAR 0 14
61487: PUSH
61488: LD_INT 1
61490: PUSH
61491: LD_INT 3
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: PUSH
61498: LD_INT 0
61500: PUSH
61501: LD_INT 3
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: PUSH
61508: LD_INT 1
61510: NEG
61511: PUSH
61512: LD_INT 2
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: LIST
61523: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61524: LD_ADDR_VAR 0 15
61528: PUSH
61529: LD_INT 2
61531: NEG
61532: PUSH
61533: LD_INT 1
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 3
61542: NEG
61543: PUSH
61544: LD_INT 0
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: PUSH
61551: LD_INT 3
61553: NEG
61554: PUSH
61555: LD_INT 1
61557: NEG
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: LIST
61567: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61568: LD_ADDR_VAR 0 16
61572: PUSH
61573: LD_INT 2
61575: NEG
61576: PUSH
61577: LD_INT 3
61579: NEG
61580: PUSH
61581: EMPTY
61582: LIST
61583: LIST
61584: PUSH
61585: LD_INT 3
61587: NEG
61588: PUSH
61589: LD_INT 2
61591: NEG
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 3
61599: NEG
61600: PUSH
61601: LD_INT 3
61603: NEG
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: LIST
61613: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61614: LD_ADDR_VAR 0 17
61618: PUSH
61619: LD_INT 1
61621: NEG
61622: PUSH
61623: LD_INT 3
61625: NEG
61626: PUSH
61627: EMPTY
61628: LIST
61629: LIST
61630: PUSH
61631: LD_INT 0
61633: PUSH
61634: LD_INT 3
61636: NEG
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: LD_INT 1
61644: PUSH
61645: LD_INT 2
61647: NEG
61648: PUSH
61649: EMPTY
61650: LIST
61651: LIST
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: LIST
61657: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61658: LD_ADDR_VAR 0 18
61662: PUSH
61663: LD_INT 2
61665: PUSH
61666: LD_INT 1
61668: NEG
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: PUSH
61674: LD_INT 3
61676: PUSH
61677: LD_INT 0
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PUSH
61684: LD_INT 3
61686: PUSH
61687: LD_INT 1
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: LIST
61698: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61699: LD_ADDR_VAR 0 19
61703: PUSH
61704: LD_INT 3
61706: PUSH
61707: LD_INT 2
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: PUSH
61714: LD_INT 3
61716: PUSH
61717: LD_INT 3
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: PUSH
61724: LD_INT 2
61726: PUSH
61727: LD_INT 3
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: LIST
61738: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61739: LD_ADDR_VAR 0 20
61743: PUSH
61744: LD_INT 1
61746: PUSH
61747: LD_INT 3
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: LD_INT 0
61756: PUSH
61757: LD_INT 3
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: LD_INT 1
61766: NEG
61767: PUSH
61768: LD_INT 2
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: LIST
61779: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61780: LD_ADDR_VAR 0 21
61784: PUSH
61785: LD_INT 2
61787: NEG
61788: PUSH
61789: LD_INT 1
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: PUSH
61796: LD_INT 3
61798: NEG
61799: PUSH
61800: LD_INT 0
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 3
61809: NEG
61810: PUSH
61811: LD_INT 1
61813: NEG
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: LIST
61823: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61824: LD_ADDR_VAR 0 22
61828: PUSH
61829: LD_INT 2
61831: NEG
61832: PUSH
61833: LD_INT 3
61835: NEG
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: PUSH
61841: LD_INT 3
61843: NEG
61844: PUSH
61845: LD_INT 2
61847: NEG
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: PUSH
61853: LD_INT 3
61855: NEG
61856: PUSH
61857: LD_INT 3
61859: NEG
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: LIST
61869: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
61870: LD_ADDR_VAR 0 23
61874: PUSH
61875: LD_INT 0
61877: PUSH
61878: LD_INT 3
61880: NEG
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 1
61888: NEG
61889: PUSH
61890: LD_INT 4
61892: NEG
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: LD_INT 1
61900: PUSH
61901: LD_INT 3
61903: NEG
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: LIST
61913: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
61914: LD_ADDR_VAR 0 24
61918: PUSH
61919: LD_INT 3
61921: PUSH
61922: LD_INT 0
61924: PUSH
61925: EMPTY
61926: LIST
61927: LIST
61928: PUSH
61929: LD_INT 3
61931: PUSH
61932: LD_INT 1
61934: NEG
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: LD_INT 4
61942: PUSH
61943: LD_INT 1
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: LIST
61954: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
61955: LD_ADDR_VAR 0 25
61959: PUSH
61960: LD_INT 3
61962: PUSH
61963: LD_INT 3
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: LD_INT 4
61972: PUSH
61973: LD_INT 3
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PUSH
61980: LD_INT 3
61982: PUSH
61983: LD_INT 4
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: LIST
61994: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
61995: LD_ADDR_VAR 0 26
61999: PUSH
62000: LD_INT 0
62002: PUSH
62003: LD_INT 3
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: PUSH
62010: LD_INT 1
62012: PUSH
62013: LD_INT 4
62015: PUSH
62016: EMPTY
62017: LIST
62018: LIST
62019: PUSH
62020: LD_INT 1
62022: NEG
62023: PUSH
62024: LD_INT 3
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: LIST
62035: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
62036: LD_ADDR_VAR 0 27
62040: PUSH
62041: LD_INT 3
62043: NEG
62044: PUSH
62045: LD_INT 0
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: PUSH
62052: LD_INT 3
62054: NEG
62055: PUSH
62056: LD_INT 1
62058: PUSH
62059: EMPTY
62060: LIST
62061: LIST
62062: PUSH
62063: LD_INT 4
62065: NEG
62066: PUSH
62067: LD_INT 1
62069: NEG
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: LIST
62079: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
62080: LD_ADDR_VAR 0 28
62084: PUSH
62085: LD_INT 3
62087: NEG
62088: PUSH
62089: LD_INT 3
62091: NEG
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: LD_INT 3
62099: NEG
62100: PUSH
62101: LD_INT 4
62103: NEG
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: PUSH
62109: LD_INT 4
62111: NEG
62112: PUSH
62113: LD_INT 3
62115: NEG
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: LIST
62125: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
62126: LD_ADDR_VAR 0 29
62130: PUSH
62131: LD_INT 1
62133: NEG
62134: PUSH
62135: LD_INT 3
62137: NEG
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: LD_INT 0
62145: PUSH
62146: LD_INT 3
62148: NEG
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: PUSH
62154: LD_INT 1
62156: PUSH
62157: LD_INT 2
62159: NEG
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: LD_INT 1
62167: NEG
62168: PUSH
62169: LD_INT 4
62171: NEG
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: PUSH
62177: LD_INT 0
62179: PUSH
62180: LD_INT 4
62182: NEG
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: PUSH
62188: LD_INT 1
62190: PUSH
62191: LD_INT 3
62193: NEG
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: PUSH
62199: LD_INT 1
62201: NEG
62202: PUSH
62203: LD_INT 5
62205: NEG
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: PUSH
62211: LD_INT 0
62213: PUSH
62214: LD_INT 5
62216: NEG
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: PUSH
62222: LD_INT 1
62224: PUSH
62225: LD_INT 4
62227: NEG
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: PUSH
62233: LD_INT 1
62235: NEG
62236: PUSH
62237: LD_INT 6
62239: NEG
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: PUSH
62245: LD_INT 0
62247: PUSH
62248: LD_INT 6
62250: NEG
62251: PUSH
62252: EMPTY
62253: LIST
62254: LIST
62255: PUSH
62256: LD_INT 1
62258: PUSH
62259: LD_INT 5
62261: NEG
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: LIST
62276: LIST
62277: LIST
62278: LIST
62279: LIST
62280: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
62281: LD_ADDR_VAR 0 30
62285: PUSH
62286: LD_INT 2
62288: PUSH
62289: LD_INT 1
62291: NEG
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: PUSH
62297: LD_INT 3
62299: PUSH
62300: LD_INT 0
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: PUSH
62307: LD_INT 3
62309: PUSH
62310: LD_INT 1
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: PUSH
62317: LD_INT 3
62319: PUSH
62320: LD_INT 1
62322: NEG
62323: PUSH
62324: EMPTY
62325: LIST
62326: LIST
62327: PUSH
62328: LD_INT 4
62330: PUSH
62331: LD_INT 0
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: PUSH
62338: LD_INT 4
62340: PUSH
62341: LD_INT 1
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: PUSH
62348: LD_INT 4
62350: PUSH
62351: LD_INT 1
62353: NEG
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: LD_INT 5
62361: PUSH
62362: LD_INT 0
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: LD_INT 5
62371: PUSH
62372: LD_INT 1
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 5
62381: PUSH
62382: LD_INT 1
62384: NEG
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PUSH
62390: LD_INT 6
62392: PUSH
62393: LD_INT 0
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: PUSH
62400: LD_INT 6
62402: PUSH
62403: LD_INT 1
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: LIST
62414: LIST
62415: LIST
62416: LIST
62417: LIST
62418: LIST
62419: LIST
62420: LIST
62421: LIST
62422: LIST
62423: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
62424: LD_ADDR_VAR 0 31
62428: PUSH
62429: LD_INT 3
62431: PUSH
62432: LD_INT 2
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: PUSH
62439: LD_INT 3
62441: PUSH
62442: LD_INT 3
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: PUSH
62449: LD_INT 2
62451: PUSH
62452: LD_INT 3
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PUSH
62459: LD_INT 4
62461: PUSH
62462: LD_INT 3
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 4
62471: PUSH
62472: LD_INT 4
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 3
62481: PUSH
62482: LD_INT 4
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: PUSH
62489: LD_INT 5
62491: PUSH
62492: LD_INT 4
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 5
62501: PUSH
62502: LD_INT 5
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: LD_INT 4
62511: PUSH
62512: LD_INT 5
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: PUSH
62519: LD_INT 6
62521: PUSH
62522: LD_INT 5
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: PUSH
62529: LD_INT 6
62531: PUSH
62532: LD_INT 6
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: PUSH
62539: LD_INT 5
62541: PUSH
62542: LD_INT 6
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: LIST
62555: LIST
62556: LIST
62557: LIST
62558: LIST
62559: LIST
62560: LIST
62561: LIST
62562: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
62563: LD_ADDR_VAR 0 32
62567: PUSH
62568: LD_INT 1
62570: PUSH
62571: LD_INT 3
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: PUSH
62578: LD_INT 0
62580: PUSH
62581: LD_INT 3
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: LD_INT 1
62590: NEG
62591: PUSH
62592: LD_INT 2
62594: PUSH
62595: EMPTY
62596: LIST
62597: LIST
62598: PUSH
62599: LD_INT 1
62601: PUSH
62602: LD_INT 4
62604: PUSH
62605: EMPTY
62606: LIST
62607: LIST
62608: PUSH
62609: LD_INT 0
62611: PUSH
62612: LD_INT 4
62614: PUSH
62615: EMPTY
62616: LIST
62617: LIST
62618: PUSH
62619: LD_INT 1
62621: NEG
62622: PUSH
62623: LD_INT 3
62625: PUSH
62626: EMPTY
62627: LIST
62628: LIST
62629: PUSH
62630: LD_INT 1
62632: PUSH
62633: LD_INT 5
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: PUSH
62640: LD_INT 0
62642: PUSH
62643: LD_INT 5
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: PUSH
62650: LD_INT 1
62652: NEG
62653: PUSH
62654: LD_INT 4
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: PUSH
62661: LD_INT 1
62663: PUSH
62664: LD_INT 6
62666: PUSH
62667: EMPTY
62668: LIST
62669: LIST
62670: PUSH
62671: LD_INT 0
62673: PUSH
62674: LD_INT 6
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: PUSH
62681: LD_INT 1
62683: NEG
62684: PUSH
62685: LD_INT 5
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: LIST
62696: LIST
62697: LIST
62698: LIST
62699: LIST
62700: LIST
62701: LIST
62702: LIST
62703: LIST
62704: LIST
62705: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
62706: LD_ADDR_VAR 0 33
62710: PUSH
62711: LD_INT 2
62713: NEG
62714: PUSH
62715: LD_INT 1
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: PUSH
62722: LD_INT 3
62724: NEG
62725: PUSH
62726: LD_INT 0
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 3
62735: NEG
62736: PUSH
62737: LD_INT 1
62739: NEG
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: LD_INT 3
62747: NEG
62748: PUSH
62749: LD_INT 1
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: LD_INT 4
62758: NEG
62759: PUSH
62760: LD_INT 0
62762: PUSH
62763: EMPTY
62764: LIST
62765: LIST
62766: PUSH
62767: LD_INT 4
62769: NEG
62770: PUSH
62771: LD_INT 1
62773: NEG
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: PUSH
62779: LD_INT 4
62781: NEG
62782: PUSH
62783: LD_INT 1
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: PUSH
62790: LD_INT 5
62792: NEG
62793: PUSH
62794: LD_INT 0
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: PUSH
62801: LD_INT 5
62803: NEG
62804: PUSH
62805: LD_INT 1
62807: NEG
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PUSH
62813: LD_INT 5
62815: NEG
62816: PUSH
62817: LD_INT 1
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 6
62826: NEG
62827: PUSH
62828: LD_INT 0
62830: PUSH
62831: EMPTY
62832: LIST
62833: LIST
62834: PUSH
62835: LD_INT 6
62837: NEG
62838: PUSH
62839: LD_INT 1
62841: NEG
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: LIST
62851: LIST
62852: LIST
62853: LIST
62854: LIST
62855: LIST
62856: LIST
62857: LIST
62858: LIST
62859: LIST
62860: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
62861: LD_ADDR_VAR 0 34
62865: PUSH
62866: LD_INT 2
62868: NEG
62869: PUSH
62870: LD_INT 3
62872: NEG
62873: PUSH
62874: EMPTY
62875: LIST
62876: LIST
62877: PUSH
62878: LD_INT 3
62880: NEG
62881: PUSH
62882: LD_INT 2
62884: NEG
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: PUSH
62890: LD_INT 3
62892: NEG
62893: PUSH
62894: LD_INT 3
62896: NEG
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: LD_INT 3
62904: NEG
62905: PUSH
62906: LD_INT 4
62908: NEG
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PUSH
62914: LD_INT 4
62916: NEG
62917: PUSH
62918: LD_INT 3
62920: NEG
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: PUSH
62926: LD_INT 4
62928: NEG
62929: PUSH
62930: LD_INT 4
62932: NEG
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: LD_INT 4
62940: NEG
62941: PUSH
62942: LD_INT 5
62944: NEG
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: PUSH
62950: LD_INT 5
62952: NEG
62953: PUSH
62954: LD_INT 4
62956: NEG
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: PUSH
62962: LD_INT 5
62964: NEG
62965: PUSH
62966: LD_INT 5
62968: NEG
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: PUSH
62974: LD_INT 5
62976: NEG
62977: PUSH
62978: LD_INT 6
62980: NEG
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 6
62988: NEG
62989: PUSH
62990: LD_INT 5
62992: NEG
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: LD_INT 6
63000: NEG
63001: PUSH
63002: LD_INT 6
63004: NEG
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
63024: LD_ADDR_VAR 0 41
63028: PUSH
63029: LD_INT 0
63031: PUSH
63032: LD_INT 2
63034: NEG
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: LD_INT 1
63042: NEG
63043: PUSH
63044: LD_INT 3
63046: NEG
63047: PUSH
63048: EMPTY
63049: LIST
63050: LIST
63051: PUSH
63052: LD_INT 1
63054: PUSH
63055: LD_INT 2
63057: NEG
63058: PUSH
63059: EMPTY
63060: LIST
63061: LIST
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: LIST
63067: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
63068: LD_ADDR_VAR 0 42
63072: PUSH
63073: LD_INT 2
63075: PUSH
63076: LD_INT 0
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PUSH
63083: LD_INT 2
63085: PUSH
63086: LD_INT 1
63088: NEG
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: LD_INT 3
63096: PUSH
63097: LD_INT 1
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: PUSH
63104: EMPTY
63105: LIST
63106: LIST
63107: LIST
63108: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
63109: LD_ADDR_VAR 0 43
63113: PUSH
63114: LD_INT 2
63116: PUSH
63117: LD_INT 2
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: PUSH
63124: LD_INT 3
63126: PUSH
63127: LD_INT 2
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: PUSH
63134: LD_INT 2
63136: PUSH
63137: LD_INT 3
63139: PUSH
63140: EMPTY
63141: LIST
63142: LIST
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: LIST
63148: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
63149: LD_ADDR_VAR 0 44
63153: PUSH
63154: LD_INT 0
63156: PUSH
63157: LD_INT 2
63159: PUSH
63160: EMPTY
63161: LIST
63162: LIST
63163: PUSH
63164: LD_INT 1
63166: PUSH
63167: LD_INT 3
63169: PUSH
63170: EMPTY
63171: LIST
63172: LIST
63173: PUSH
63174: LD_INT 1
63176: NEG
63177: PUSH
63178: LD_INT 2
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: PUSH
63185: EMPTY
63186: LIST
63187: LIST
63188: LIST
63189: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63190: LD_ADDR_VAR 0 45
63194: PUSH
63195: LD_INT 2
63197: NEG
63198: PUSH
63199: LD_INT 0
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: PUSH
63206: LD_INT 2
63208: NEG
63209: PUSH
63210: LD_INT 1
63212: PUSH
63213: EMPTY
63214: LIST
63215: LIST
63216: PUSH
63217: LD_INT 3
63219: NEG
63220: PUSH
63221: LD_INT 1
63223: NEG
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: LIST
63233: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
63234: LD_ADDR_VAR 0 46
63238: PUSH
63239: LD_INT 2
63241: NEG
63242: PUSH
63243: LD_INT 2
63245: NEG
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: PUSH
63251: LD_INT 2
63253: NEG
63254: PUSH
63255: LD_INT 3
63257: NEG
63258: PUSH
63259: EMPTY
63260: LIST
63261: LIST
63262: PUSH
63263: LD_INT 3
63265: NEG
63266: PUSH
63267: LD_INT 2
63269: NEG
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: LIST
63279: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
63280: LD_ADDR_VAR 0 47
63284: PUSH
63285: LD_INT 2
63287: NEG
63288: PUSH
63289: LD_INT 3
63291: NEG
63292: PUSH
63293: EMPTY
63294: LIST
63295: LIST
63296: PUSH
63297: LD_INT 1
63299: NEG
63300: PUSH
63301: LD_INT 3
63303: NEG
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
63313: LD_ADDR_VAR 0 48
63317: PUSH
63318: LD_INT 1
63320: PUSH
63321: LD_INT 2
63323: NEG
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: PUSH
63329: LD_INT 2
63331: PUSH
63332: LD_INT 1
63334: NEG
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
63344: LD_ADDR_VAR 0 49
63348: PUSH
63349: LD_INT 3
63351: PUSH
63352: LD_INT 1
63354: PUSH
63355: EMPTY
63356: LIST
63357: LIST
63358: PUSH
63359: LD_INT 3
63361: PUSH
63362: LD_INT 2
63364: PUSH
63365: EMPTY
63366: LIST
63367: LIST
63368: PUSH
63369: EMPTY
63370: LIST
63371: LIST
63372: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
63373: LD_ADDR_VAR 0 50
63377: PUSH
63378: LD_INT 2
63380: PUSH
63381: LD_INT 3
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: PUSH
63388: LD_INT 1
63390: PUSH
63391: LD_INT 3
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
63402: LD_ADDR_VAR 0 51
63406: PUSH
63407: LD_INT 1
63409: NEG
63410: PUSH
63411: LD_INT 2
63413: PUSH
63414: EMPTY
63415: LIST
63416: LIST
63417: PUSH
63418: LD_INT 2
63420: NEG
63421: PUSH
63422: LD_INT 1
63424: PUSH
63425: EMPTY
63426: LIST
63427: LIST
63428: PUSH
63429: EMPTY
63430: LIST
63431: LIST
63432: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
63433: LD_ADDR_VAR 0 52
63437: PUSH
63438: LD_INT 3
63440: NEG
63441: PUSH
63442: LD_INT 1
63444: NEG
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: PUSH
63450: LD_INT 3
63452: NEG
63453: PUSH
63454: LD_INT 2
63456: NEG
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63466: LD_ADDR_VAR 0 53
63470: PUSH
63471: LD_INT 1
63473: NEG
63474: PUSH
63475: LD_INT 3
63477: NEG
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: PUSH
63483: LD_INT 0
63485: PUSH
63486: LD_INT 3
63488: NEG
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: PUSH
63494: LD_INT 1
63496: PUSH
63497: LD_INT 2
63499: NEG
63500: PUSH
63501: EMPTY
63502: LIST
63503: LIST
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: LIST
63509: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63510: LD_ADDR_VAR 0 54
63514: PUSH
63515: LD_INT 2
63517: PUSH
63518: LD_INT 1
63520: NEG
63521: PUSH
63522: EMPTY
63523: LIST
63524: LIST
63525: PUSH
63526: LD_INT 3
63528: PUSH
63529: LD_INT 0
63531: PUSH
63532: EMPTY
63533: LIST
63534: LIST
63535: PUSH
63536: LD_INT 3
63538: PUSH
63539: LD_INT 1
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: PUSH
63546: EMPTY
63547: LIST
63548: LIST
63549: LIST
63550: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63551: LD_ADDR_VAR 0 55
63555: PUSH
63556: LD_INT 3
63558: PUSH
63559: LD_INT 2
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: PUSH
63566: LD_INT 3
63568: PUSH
63569: LD_INT 3
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: PUSH
63576: LD_INT 2
63578: PUSH
63579: LD_INT 3
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: LIST
63590: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63591: LD_ADDR_VAR 0 56
63595: PUSH
63596: LD_INT 1
63598: PUSH
63599: LD_INT 3
63601: PUSH
63602: EMPTY
63603: LIST
63604: LIST
63605: PUSH
63606: LD_INT 0
63608: PUSH
63609: LD_INT 3
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: PUSH
63616: LD_INT 1
63618: NEG
63619: PUSH
63620: LD_INT 2
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: LIST
63631: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63632: LD_ADDR_VAR 0 57
63636: PUSH
63637: LD_INT 2
63639: NEG
63640: PUSH
63641: LD_INT 1
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: PUSH
63648: LD_INT 3
63650: NEG
63651: PUSH
63652: LD_INT 0
63654: PUSH
63655: EMPTY
63656: LIST
63657: LIST
63658: PUSH
63659: LD_INT 3
63661: NEG
63662: PUSH
63663: LD_INT 1
63665: NEG
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PUSH
63671: EMPTY
63672: LIST
63673: LIST
63674: LIST
63675: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63676: LD_ADDR_VAR 0 58
63680: PUSH
63681: LD_INT 2
63683: NEG
63684: PUSH
63685: LD_INT 3
63687: NEG
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: PUSH
63693: LD_INT 3
63695: NEG
63696: PUSH
63697: LD_INT 2
63699: NEG
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: PUSH
63705: LD_INT 3
63707: NEG
63708: PUSH
63709: LD_INT 3
63711: NEG
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: LIST
63721: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
63722: LD_ADDR_VAR 0 59
63726: PUSH
63727: LD_INT 1
63729: NEG
63730: PUSH
63731: LD_INT 2
63733: NEG
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: PUSH
63739: LD_INT 0
63741: PUSH
63742: LD_INT 2
63744: NEG
63745: PUSH
63746: EMPTY
63747: LIST
63748: LIST
63749: PUSH
63750: LD_INT 1
63752: PUSH
63753: LD_INT 1
63755: NEG
63756: PUSH
63757: EMPTY
63758: LIST
63759: LIST
63760: PUSH
63761: EMPTY
63762: LIST
63763: LIST
63764: LIST
63765: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63766: LD_ADDR_VAR 0 60
63770: PUSH
63771: LD_INT 1
63773: PUSH
63774: LD_INT 1
63776: NEG
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PUSH
63782: LD_INT 2
63784: PUSH
63785: LD_INT 0
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: LD_INT 2
63794: PUSH
63795: LD_INT 1
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: LIST
63806: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63807: LD_ADDR_VAR 0 61
63811: PUSH
63812: LD_INT 2
63814: PUSH
63815: LD_INT 1
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PUSH
63822: LD_INT 2
63824: PUSH
63825: LD_INT 2
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: PUSH
63832: LD_INT 1
63834: PUSH
63835: LD_INT 2
63837: PUSH
63838: EMPTY
63839: LIST
63840: LIST
63841: PUSH
63842: EMPTY
63843: LIST
63844: LIST
63845: LIST
63846: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63847: LD_ADDR_VAR 0 62
63851: PUSH
63852: LD_INT 1
63854: PUSH
63855: LD_INT 2
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: PUSH
63862: LD_INT 0
63864: PUSH
63865: LD_INT 2
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: PUSH
63872: LD_INT 1
63874: NEG
63875: PUSH
63876: LD_INT 1
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: LIST
63887: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63888: LD_ADDR_VAR 0 63
63892: PUSH
63893: LD_INT 1
63895: NEG
63896: PUSH
63897: LD_INT 1
63899: PUSH
63900: EMPTY
63901: LIST
63902: LIST
63903: PUSH
63904: LD_INT 2
63906: NEG
63907: PUSH
63908: LD_INT 0
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: PUSH
63915: LD_INT 2
63917: NEG
63918: PUSH
63919: LD_INT 1
63921: NEG
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: PUSH
63927: EMPTY
63928: LIST
63929: LIST
63930: LIST
63931: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63932: LD_ADDR_VAR 0 64
63936: PUSH
63937: LD_INT 1
63939: NEG
63940: PUSH
63941: LD_INT 2
63943: NEG
63944: PUSH
63945: EMPTY
63946: LIST
63947: LIST
63948: PUSH
63949: LD_INT 2
63951: NEG
63952: PUSH
63953: LD_INT 1
63955: NEG
63956: PUSH
63957: EMPTY
63958: LIST
63959: LIST
63960: PUSH
63961: LD_INT 2
63963: NEG
63964: PUSH
63965: LD_INT 2
63967: NEG
63968: PUSH
63969: EMPTY
63970: LIST
63971: LIST
63972: PUSH
63973: EMPTY
63974: LIST
63975: LIST
63976: LIST
63977: ST_TO_ADDR
// end ; 2 :
63978: GO 67244
63980: LD_INT 2
63982: DOUBLE
63983: EQUAL
63984: IFTRUE 63988
63986: GO 67243
63988: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
63989: LD_ADDR_VAR 0 29
63993: PUSH
63994: LD_INT 4
63996: PUSH
63997: LD_INT 0
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: PUSH
64004: LD_INT 4
64006: PUSH
64007: LD_INT 1
64009: NEG
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: PUSH
64015: LD_INT 5
64017: PUSH
64018: LD_INT 0
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: PUSH
64025: LD_INT 5
64027: PUSH
64028: LD_INT 1
64030: PUSH
64031: EMPTY
64032: LIST
64033: LIST
64034: PUSH
64035: LD_INT 4
64037: PUSH
64038: LD_INT 1
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: PUSH
64045: LD_INT 3
64047: PUSH
64048: LD_INT 0
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: PUSH
64055: LD_INT 3
64057: PUSH
64058: LD_INT 1
64060: NEG
64061: PUSH
64062: EMPTY
64063: LIST
64064: LIST
64065: PUSH
64066: LD_INT 3
64068: PUSH
64069: LD_INT 2
64071: NEG
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: PUSH
64077: LD_INT 5
64079: PUSH
64080: LD_INT 2
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: PUSH
64087: LD_INT 3
64089: PUSH
64090: LD_INT 3
64092: PUSH
64093: EMPTY
64094: LIST
64095: LIST
64096: PUSH
64097: LD_INT 3
64099: PUSH
64100: LD_INT 2
64102: PUSH
64103: EMPTY
64104: LIST
64105: LIST
64106: PUSH
64107: LD_INT 4
64109: PUSH
64110: LD_INT 3
64112: PUSH
64113: EMPTY
64114: LIST
64115: LIST
64116: PUSH
64117: LD_INT 4
64119: PUSH
64120: LD_INT 4
64122: PUSH
64123: EMPTY
64124: LIST
64125: LIST
64126: PUSH
64127: LD_INT 3
64129: PUSH
64130: LD_INT 4
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: PUSH
64137: LD_INT 2
64139: PUSH
64140: LD_INT 3
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: PUSH
64147: LD_INT 2
64149: PUSH
64150: LD_INT 2
64152: PUSH
64153: EMPTY
64154: LIST
64155: LIST
64156: PUSH
64157: LD_INT 4
64159: PUSH
64160: LD_INT 2
64162: PUSH
64163: EMPTY
64164: LIST
64165: LIST
64166: PUSH
64167: LD_INT 2
64169: PUSH
64170: LD_INT 4
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: PUSH
64177: LD_INT 0
64179: PUSH
64180: LD_INT 4
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: PUSH
64187: LD_INT 0
64189: PUSH
64190: LD_INT 3
64192: PUSH
64193: EMPTY
64194: LIST
64195: LIST
64196: PUSH
64197: LD_INT 1
64199: PUSH
64200: LD_INT 4
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: PUSH
64207: LD_INT 1
64209: PUSH
64210: LD_INT 5
64212: PUSH
64213: EMPTY
64214: LIST
64215: LIST
64216: PUSH
64217: LD_INT 0
64219: PUSH
64220: LD_INT 5
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: PUSH
64227: LD_INT 1
64229: NEG
64230: PUSH
64231: LD_INT 4
64233: PUSH
64234: EMPTY
64235: LIST
64236: LIST
64237: PUSH
64238: LD_INT 1
64240: NEG
64241: PUSH
64242: LD_INT 3
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: PUSH
64249: LD_INT 2
64251: PUSH
64252: LD_INT 5
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: PUSH
64259: LD_INT 2
64261: NEG
64262: PUSH
64263: LD_INT 3
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: PUSH
64270: LD_INT 3
64272: NEG
64273: PUSH
64274: LD_INT 0
64276: PUSH
64277: EMPTY
64278: LIST
64279: LIST
64280: PUSH
64281: LD_INT 3
64283: NEG
64284: PUSH
64285: LD_INT 1
64287: NEG
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: PUSH
64293: LD_INT 2
64295: NEG
64296: PUSH
64297: LD_INT 0
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: PUSH
64304: LD_INT 2
64306: NEG
64307: PUSH
64308: LD_INT 1
64310: PUSH
64311: EMPTY
64312: LIST
64313: LIST
64314: PUSH
64315: LD_INT 3
64317: NEG
64318: PUSH
64319: LD_INT 1
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: PUSH
64326: LD_INT 4
64328: NEG
64329: PUSH
64330: LD_INT 0
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: PUSH
64337: LD_INT 4
64339: NEG
64340: PUSH
64341: LD_INT 1
64343: NEG
64344: PUSH
64345: EMPTY
64346: LIST
64347: LIST
64348: PUSH
64349: LD_INT 4
64351: NEG
64352: PUSH
64353: LD_INT 2
64355: NEG
64356: PUSH
64357: EMPTY
64358: LIST
64359: LIST
64360: PUSH
64361: LD_INT 2
64363: NEG
64364: PUSH
64365: LD_INT 2
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: PUSH
64372: LD_INT 4
64374: NEG
64375: PUSH
64376: LD_INT 4
64378: NEG
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: PUSH
64384: LD_INT 4
64386: NEG
64387: PUSH
64388: LD_INT 5
64390: NEG
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: PUSH
64396: LD_INT 3
64398: NEG
64399: PUSH
64400: LD_INT 4
64402: NEG
64403: PUSH
64404: EMPTY
64405: LIST
64406: LIST
64407: PUSH
64408: LD_INT 3
64410: NEG
64411: PUSH
64412: LD_INT 3
64414: NEG
64415: PUSH
64416: EMPTY
64417: LIST
64418: LIST
64419: PUSH
64420: LD_INT 4
64422: NEG
64423: PUSH
64424: LD_INT 3
64426: NEG
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: PUSH
64432: LD_INT 5
64434: NEG
64435: PUSH
64436: LD_INT 4
64438: NEG
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: PUSH
64444: LD_INT 5
64446: NEG
64447: PUSH
64448: LD_INT 5
64450: NEG
64451: PUSH
64452: EMPTY
64453: LIST
64454: LIST
64455: PUSH
64456: LD_INT 3
64458: NEG
64459: PUSH
64460: LD_INT 5
64462: NEG
64463: PUSH
64464: EMPTY
64465: LIST
64466: LIST
64467: PUSH
64468: LD_INT 5
64470: NEG
64471: PUSH
64472: LD_INT 3
64474: NEG
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: LIST
64484: LIST
64485: LIST
64486: LIST
64487: LIST
64488: LIST
64489: LIST
64490: LIST
64491: LIST
64492: LIST
64493: LIST
64494: LIST
64495: LIST
64496: LIST
64497: LIST
64498: LIST
64499: LIST
64500: LIST
64501: LIST
64502: LIST
64503: LIST
64504: LIST
64505: LIST
64506: LIST
64507: LIST
64508: LIST
64509: LIST
64510: LIST
64511: LIST
64512: LIST
64513: LIST
64514: LIST
64515: LIST
64516: LIST
64517: LIST
64518: LIST
64519: LIST
64520: LIST
64521: LIST
64522: LIST
64523: LIST
64524: LIST
64525: LIST
64526: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
64527: LD_ADDR_VAR 0 30
64531: PUSH
64532: LD_INT 4
64534: PUSH
64535: LD_INT 4
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: PUSH
64542: LD_INT 4
64544: PUSH
64545: LD_INT 3
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: PUSH
64552: LD_INT 5
64554: PUSH
64555: LD_INT 4
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PUSH
64562: LD_INT 5
64564: PUSH
64565: LD_INT 5
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: PUSH
64572: LD_INT 4
64574: PUSH
64575: LD_INT 5
64577: PUSH
64578: EMPTY
64579: LIST
64580: LIST
64581: PUSH
64582: LD_INT 3
64584: PUSH
64585: LD_INT 4
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: PUSH
64592: LD_INT 3
64594: PUSH
64595: LD_INT 3
64597: PUSH
64598: EMPTY
64599: LIST
64600: LIST
64601: PUSH
64602: LD_INT 5
64604: PUSH
64605: LD_INT 3
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: PUSH
64612: LD_INT 3
64614: PUSH
64615: LD_INT 5
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: PUSH
64622: LD_INT 0
64624: PUSH
64625: LD_INT 3
64627: PUSH
64628: EMPTY
64629: LIST
64630: LIST
64631: PUSH
64632: LD_INT 0
64634: PUSH
64635: LD_INT 2
64637: PUSH
64638: EMPTY
64639: LIST
64640: LIST
64641: PUSH
64642: LD_INT 1
64644: PUSH
64645: LD_INT 3
64647: PUSH
64648: EMPTY
64649: LIST
64650: LIST
64651: PUSH
64652: LD_INT 1
64654: PUSH
64655: LD_INT 4
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: PUSH
64662: LD_INT 0
64664: PUSH
64665: LD_INT 4
64667: PUSH
64668: EMPTY
64669: LIST
64670: LIST
64671: PUSH
64672: LD_INT 1
64674: NEG
64675: PUSH
64676: LD_INT 3
64678: PUSH
64679: EMPTY
64680: LIST
64681: LIST
64682: PUSH
64683: LD_INT 1
64685: NEG
64686: PUSH
64687: LD_INT 2
64689: PUSH
64690: EMPTY
64691: LIST
64692: LIST
64693: PUSH
64694: LD_INT 2
64696: PUSH
64697: LD_INT 4
64699: PUSH
64700: EMPTY
64701: LIST
64702: LIST
64703: PUSH
64704: LD_INT 2
64706: NEG
64707: PUSH
64708: LD_INT 2
64710: PUSH
64711: EMPTY
64712: LIST
64713: LIST
64714: PUSH
64715: LD_INT 4
64717: NEG
64718: PUSH
64719: LD_INT 0
64721: PUSH
64722: EMPTY
64723: LIST
64724: LIST
64725: PUSH
64726: LD_INT 4
64728: NEG
64729: PUSH
64730: LD_INT 1
64732: NEG
64733: PUSH
64734: EMPTY
64735: LIST
64736: LIST
64737: PUSH
64738: LD_INT 3
64740: NEG
64741: PUSH
64742: LD_INT 0
64744: PUSH
64745: EMPTY
64746: LIST
64747: LIST
64748: PUSH
64749: LD_INT 3
64751: NEG
64752: PUSH
64753: LD_INT 1
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: PUSH
64760: LD_INT 4
64762: NEG
64763: PUSH
64764: LD_INT 1
64766: PUSH
64767: EMPTY
64768: LIST
64769: LIST
64770: PUSH
64771: LD_INT 5
64773: NEG
64774: PUSH
64775: LD_INT 0
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: PUSH
64782: LD_INT 5
64784: NEG
64785: PUSH
64786: LD_INT 1
64788: NEG
64789: PUSH
64790: EMPTY
64791: LIST
64792: LIST
64793: PUSH
64794: LD_INT 5
64796: NEG
64797: PUSH
64798: LD_INT 2
64800: NEG
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: PUSH
64806: LD_INT 3
64808: NEG
64809: PUSH
64810: LD_INT 2
64812: PUSH
64813: EMPTY
64814: LIST
64815: LIST
64816: PUSH
64817: LD_INT 3
64819: NEG
64820: PUSH
64821: LD_INT 3
64823: NEG
64824: PUSH
64825: EMPTY
64826: LIST
64827: LIST
64828: PUSH
64829: LD_INT 3
64831: NEG
64832: PUSH
64833: LD_INT 4
64835: NEG
64836: PUSH
64837: EMPTY
64838: LIST
64839: LIST
64840: PUSH
64841: LD_INT 2
64843: NEG
64844: PUSH
64845: LD_INT 3
64847: NEG
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: PUSH
64853: LD_INT 2
64855: NEG
64856: PUSH
64857: LD_INT 2
64859: NEG
64860: PUSH
64861: EMPTY
64862: LIST
64863: LIST
64864: PUSH
64865: LD_INT 3
64867: NEG
64868: PUSH
64869: LD_INT 2
64871: NEG
64872: PUSH
64873: EMPTY
64874: LIST
64875: LIST
64876: PUSH
64877: LD_INT 4
64879: NEG
64880: PUSH
64881: LD_INT 3
64883: NEG
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: PUSH
64889: LD_INT 4
64891: NEG
64892: PUSH
64893: LD_INT 4
64895: NEG
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: PUSH
64901: LD_INT 2
64903: NEG
64904: PUSH
64905: LD_INT 4
64907: NEG
64908: PUSH
64909: EMPTY
64910: LIST
64911: LIST
64912: PUSH
64913: LD_INT 4
64915: NEG
64916: PUSH
64917: LD_INT 2
64919: NEG
64920: PUSH
64921: EMPTY
64922: LIST
64923: LIST
64924: PUSH
64925: LD_INT 0
64927: PUSH
64928: LD_INT 4
64930: NEG
64931: PUSH
64932: EMPTY
64933: LIST
64934: LIST
64935: PUSH
64936: LD_INT 0
64938: PUSH
64939: LD_INT 5
64941: NEG
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: PUSH
64947: LD_INT 1
64949: PUSH
64950: LD_INT 4
64952: NEG
64953: PUSH
64954: EMPTY
64955: LIST
64956: LIST
64957: PUSH
64958: LD_INT 1
64960: PUSH
64961: LD_INT 3
64963: NEG
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: PUSH
64969: LD_INT 0
64971: PUSH
64972: LD_INT 3
64974: NEG
64975: PUSH
64976: EMPTY
64977: LIST
64978: LIST
64979: PUSH
64980: LD_INT 1
64982: NEG
64983: PUSH
64984: LD_INT 4
64986: NEG
64987: PUSH
64988: EMPTY
64989: LIST
64990: LIST
64991: PUSH
64992: LD_INT 1
64994: NEG
64995: PUSH
64996: LD_INT 5
64998: NEG
64999: PUSH
65000: EMPTY
65001: LIST
65002: LIST
65003: PUSH
65004: LD_INT 2
65006: PUSH
65007: LD_INT 3
65009: NEG
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: PUSH
65015: LD_INT 2
65017: NEG
65018: PUSH
65019: LD_INT 5
65021: NEG
65022: PUSH
65023: EMPTY
65024: LIST
65025: LIST
65026: PUSH
65027: EMPTY
65028: LIST
65029: LIST
65030: LIST
65031: LIST
65032: LIST
65033: LIST
65034: LIST
65035: LIST
65036: LIST
65037: LIST
65038: LIST
65039: LIST
65040: LIST
65041: LIST
65042: LIST
65043: LIST
65044: LIST
65045: LIST
65046: LIST
65047: LIST
65048: LIST
65049: LIST
65050: LIST
65051: LIST
65052: LIST
65053: LIST
65054: LIST
65055: LIST
65056: LIST
65057: LIST
65058: LIST
65059: LIST
65060: LIST
65061: LIST
65062: LIST
65063: LIST
65064: LIST
65065: LIST
65066: LIST
65067: LIST
65068: LIST
65069: LIST
65070: LIST
65071: LIST
65072: LIST
65073: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
65074: LD_ADDR_VAR 0 31
65078: PUSH
65079: LD_INT 0
65081: PUSH
65082: LD_INT 4
65084: PUSH
65085: EMPTY
65086: LIST
65087: LIST
65088: PUSH
65089: LD_INT 0
65091: PUSH
65092: LD_INT 3
65094: PUSH
65095: EMPTY
65096: LIST
65097: LIST
65098: PUSH
65099: LD_INT 1
65101: PUSH
65102: LD_INT 4
65104: PUSH
65105: EMPTY
65106: LIST
65107: LIST
65108: PUSH
65109: LD_INT 1
65111: PUSH
65112: LD_INT 5
65114: PUSH
65115: EMPTY
65116: LIST
65117: LIST
65118: PUSH
65119: LD_INT 0
65121: PUSH
65122: LD_INT 5
65124: PUSH
65125: EMPTY
65126: LIST
65127: LIST
65128: PUSH
65129: LD_INT 1
65131: NEG
65132: PUSH
65133: LD_INT 4
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: PUSH
65140: LD_INT 1
65142: NEG
65143: PUSH
65144: LD_INT 3
65146: PUSH
65147: EMPTY
65148: LIST
65149: LIST
65150: PUSH
65151: LD_INT 2
65153: PUSH
65154: LD_INT 5
65156: PUSH
65157: EMPTY
65158: LIST
65159: LIST
65160: PUSH
65161: LD_INT 2
65163: NEG
65164: PUSH
65165: LD_INT 3
65167: PUSH
65168: EMPTY
65169: LIST
65170: LIST
65171: PUSH
65172: LD_INT 3
65174: NEG
65175: PUSH
65176: LD_INT 0
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: PUSH
65183: LD_INT 3
65185: NEG
65186: PUSH
65187: LD_INT 1
65189: NEG
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: PUSH
65195: LD_INT 2
65197: NEG
65198: PUSH
65199: LD_INT 0
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: PUSH
65206: LD_INT 2
65208: NEG
65209: PUSH
65210: LD_INT 1
65212: PUSH
65213: EMPTY
65214: LIST
65215: LIST
65216: PUSH
65217: LD_INT 3
65219: NEG
65220: PUSH
65221: LD_INT 1
65223: PUSH
65224: EMPTY
65225: LIST
65226: LIST
65227: PUSH
65228: LD_INT 4
65230: NEG
65231: PUSH
65232: LD_INT 0
65234: PUSH
65235: EMPTY
65236: LIST
65237: LIST
65238: PUSH
65239: LD_INT 4
65241: NEG
65242: PUSH
65243: LD_INT 1
65245: NEG
65246: PUSH
65247: EMPTY
65248: LIST
65249: LIST
65250: PUSH
65251: LD_INT 4
65253: NEG
65254: PUSH
65255: LD_INT 2
65257: NEG
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: PUSH
65263: LD_INT 2
65265: NEG
65266: PUSH
65267: LD_INT 2
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: PUSH
65274: LD_INT 4
65276: NEG
65277: PUSH
65278: LD_INT 4
65280: NEG
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: PUSH
65286: LD_INT 4
65288: NEG
65289: PUSH
65290: LD_INT 5
65292: NEG
65293: PUSH
65294: EMPTY
65295: LIST
65296: LIST
65297: PUSH
65298: LD_INT 3
65300: NEG
65301: PUSH
65302: LD_INT 4
65304: NEG
65305: PUSH
65306: EMPTY
65307: LIST
65308: LIST
65309: PUSH
65310: LD_INT 3
65312: NEG
65313: PUSH
65314: LD_INT 3
65316: NEG
65317: PUSH
65318: EMPTY
65319: LIST
65320: LIST
65321: PUSH
65322: LD_INT 4
65324: NEG
65325: PUSH
65326: LD_INT 3
65328: NEG
65329: PUSH
65330: EMPTY
65331: LIST
65332: LIST
65333: PUSH
65334: LD_INT 5
65336: NEG
65337: PUSH
65338: LD_INT 4
65340: NEG
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: PUSH
65346: LD_INT 5
65348: NEG
65349: PUSH
65350: LD_INT 5
65352: NEG
65353: PUSH
65354: EMPTY
65355: LIST
65356: LIST
65357: PUSH
65358: LD_INT 3
65360: NEG
65361: PUSH
65362: LD_INT 5
65364: NEG
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: PUSH
65370: LD_INT 5
65372: NEG
65373: PUSH
65374: LD_INT 3
65376: NEG
65377: PUSH
65378: EMPTY
65379: LIST
65380: LIST
65381: PUSH
65382: LD_INT 0
65384: PUSH
65385: LD_INT 3
65387: NEG
65388: PUSH
65389: EMPTY
65390: LIST
65391: LIST
65392: PUSH
65393: LD_INT 0
65395: PUSH
65396: LD_INT 4
65398: NEG
65399: PUSH
65400: EMPTY
65401: LIST
65402: LIST
65403: PUSH
65404: LD_INT 1
65406: PUSH
65407: LD_INT 3
65409: NEG
65410: PUSH
65411: EMPTY
65412: LIST
65413: LIST
65414: PUSH
65415: LD_INT 1
65417: PUSH
65418: LD_INT 2
65420: NEG
65421: PUSH
65422: EMPTY
65423: LIST
65424: LIST
65425: PUSH
65426: LD_INT 0
65428: PUSH
65429: LD_INT 2
65431: NEG
65432: PUSH
65433: EMPTY
65434: LIST
65435: LIST
65436: PUSH
65437: LD_INT 1
65439: NEG
65440: PUSH
65441: LD_INT 3
65443: NEG
65444: PUSH
65445: EMPTY
65446: LIST
65447: LIST
65448: PUSH
65449: LD_INT 1
65451: NEG
65452: PUSH
65453: LD_INT 4
65455: NEG
65456: PUSH
65457: EMPTY
65458: LIST
65459: LIST
65460: PUSH
65461: LD_INT 2
65463: PUSH
65464: LD_INT 2
65466: NEG
65467: PUSH
65468: EMPTY
65469: LIST
65470: LIST
65471: PUSH
65472: LD_INT 2
65474: NEG
65475: PUSH
65476: LD_INT 4
65478: NEG
65479: PUSH
65480: EMPTY
65481: LIST
65482: LIST
65483: PUSH
65484: LD_INT 4
65486: PUSH
65487: LD_INT 0
65489: PUSH
65490: EMPTY
65491: LIST
65492: LIST
65493: PUSH
65494: LD_INT 4
65496: PUSH
65497: LD_INT 1
65499: NEG
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: PUSH
65505: LD_INT 5
65507: PUSH
65508: LD_INT 0
65510: PUSH
65511: EMPTY
65512: LIST
65513: LIST
65514: PUSH
65515: LD_INT 5
65517: PUSH
65518: LD_INT 1
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: PUSH
65525: LD_INT 4
65527: PUSH
65528: LD_INT 1
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: PUSH
65535: LD_INT 3
65537: PUSH
65538: LD_INT 0
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: PUSH
65545: LD_INT 3
65547: PUSH
65548: LD_INT 1
65550: NEG
65551: PUSH
65552: EMPTY
65553: LIST
65554: LIST
65555: PUSH
65556: LD_INT 3
65558: PUSH
65559: LD_INT 2
65561: NEG
65562: PUSH
65563: EMPTY
65564: LIST
65565: LIST
65566: PUSH
65567: LD_INT 5
65569: PUSH
65570: LD_INT 2
65572: PUSH
65573: EMPTY
65574: LIST
65575: LIST
65576: PUSH
65577: EMPTY
65578: LIST
65579: LIST
65580: LIST
65581: LIST
65582: LIST
65583: LIST
65584: LIST
65585: LIST
65586: LIST
65587: LIST
65588: LIST
65589: LIST
65590: LIST
65591: LIST
65592: LIST
65593: LIST
65594: LIST
65595: LIST
65596: LIST
65597: LIST
65598: LIST
65599: LIST
65600: LIST
65601: LIST
65602: LIST
65603: LIST
65604: LIST
65605: LIST
65606: LIST
65607: LIST
65608: LIST
65609: LIST
65610: LIST
65611: LIST
65612: LIST
65613: LIST
65614: LIST
65615: LIST
65616: LIST
65617: LIST
65618: LIST
65619: LIST
65620: LIST
65621: LIST
65622: LIST
65623: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
65624: LD_ADDR_VAR 0 32
65628: PUSH
65629: LD_INT 4
65631: NEG
65632: PUSH
65633: LD_INT 0
65635: PUSH
65636: EMPTY
65637: LIST
65638: LIST
65639: PUSH
65640: LD_INT 4
65642: NEG
65643: PUSH
65644: LD_INT 1
65646: NEG
65647: PUSH
65648: EMPTY
65649: LIST
65650: LIST
65651: PUSH
65652: LD_INT 3
65654: NEG
65655: PUSH
65656: LD_INT 0
65658: PUSH
65659: EMPTY
65660: LIST
65661: LIST
65662: PUSH
65663: LD_INT 3
65665: NEG
65666: PUSH
65667: LD_INT 1
65669: PUSH
65670: EMPTY
65671: LIST
65672: LIST
65673: PUSH
65674: LD_INT 4
65676: NEG
65677: PUSH
65678: LD_INT 1
65680: PUSH
65681: EMPTY
65682: LIST
65683: LIST
65684: PUSH
65685: LD_INT 5
65687: NEG
65688: PUSH
65689: LD_INT 0
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: PUSH
65696: LD_INT 5
65698: NEG
65699: PUSH
65700: LD_INT 1
65702: NEG
65703: PUSH
65704: EMPTY
65705: LIST
65706: LIST
65707: PUSH
65708: LD_INT 5
65710: NEG
65711: PUSH
65712: LD_INT 2
65714: NEG
65715: PUSH
65716: EMPTY
65717: LIST
65718: LIST
65719: PUSH
65720: LD_INT 3
65722: NEG
65723: PUSH
65724: LD_INT 2
65726: PUSH
65727: EMPTY
65728: LIST
65729: LIST
65730: PUSH
65731: LD_INT 3
65733: NEG
65734: PUSH
65735: LD_INT 3
65737: NEG
65738: PUSH
65739: EMPTY
65740: LIST
65741: LIST
65742: PUSH
65743: LD_INT 3
65745: NEG
65746: PUSH
65747: LD_INT 4
65749: NEG
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: PUSH
65755: LD_INT 2
65757: NEG
65758: PUSH
65759: LD_INT 3
65761: NEG
65762: PUSH
65763: EMPTY
65764: LIST
65765: LIST
65766: PUSH
65767: LD_INT 2
65769: NEG
65770: PUSH
65771: LD_INT 2
65773: NEG
65774: PUSH
65775: EMPTY
65776: LIST
65777: LIST
65778: PUSH
65779: LD_INT 3
65781: NEG
65782: PUSH
65783: LD_INT 2
65785: NEG
65786: PUSH
65787: EMPTY
65788: LIST
65789: LIST
65790: PUSH
65791: LD_INT 4
65793: NEG
65794: PUSH
65795: LD_INT 3
65797: NEG
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: PUSH
65803: LD_INT 4
65805: NEG
65806: PUSH
65807: LD_INT 4
65809: NEG
65810: PUSH
65811: EMPTY
65812: LIST
65813: LIST
65814: PUSH
65815: LD_INT 2
65817: NEG
65818: PUSH
65819: LD_INT 4
65821: NEG
65822: PUSH
65823: EMPTY
65824: LIST
65825: LIST
65826: PUSH
65827: LD_INT 4
65829: NEG
65830: PUSH
65831: LD_INT 2
65833: NEG
65834: PUSH
65835: EMPTY
65836: LIST
65837: LIST
65838: PUSH
65839: LD_INT 0
65841: PUSH
65842: LD_INT 4
65844: NEG
65845: PUSH
65846: EMPTY
65847: LIST
65848: LIST
65849: PUSH
65850: LD_INT 0
65852: PUSH
65853: LD_INT 5
65855: NEG
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: PUSH
65861: LD_INT 1
65863: PUSH
65864: LD_INT 4
65866: NEG
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: PUSH
65872: LD_INT 1
65874: PUSH
65875: LD_INT 3
65877: NEG
65878: PUSH
65879: EMPTY
65880: LIST
65881: LIST
65882: PUSH
65883: LD_INT 0
65885: PUSH
65886: LD_INT 3
65888: NEG
65889: PUSH
65890: EMPTY
65891: LIST
65892: LIST
65893: PUSH
65894: LD_INT 1
65896: NEG
65897: PUSH
65898: LD_INT 4
65900: NEG
65901: PUSH
65902: EMPTY
65903: LIST
65904: LIST
65905: PUSH
65906: LD_INT 1
65908: NEG
65909: PUSH
65910: LD_INT 5
65912: NEG
65913: PUSH
65914: EMPTY
65915: LIST
65916: LIST
65917: PUSH
65918: LD_INT 2
65920: PUSH
65921: LD_INT 3
65923: NEG
65924: PUSH
65925: EMPTY
65926: LIST
65927: LIST
65928: PUSH
65929: LD_INT 2
65931: NEG
65932: PUSH
65933: LD_INT 5
65935: NEG
65936: PUSH
65937: EMPTY
65938: LIST
65939: LIST
65940: PUSH
65941: LD_INT 3
65943: PUSH
65944: LD_INT 0
65946: PUSH
65947: EMPTY
65948: LIST
65949: LIST
65950: PUSH
65951: LD_INT 3
65953: PUSH
65954: LD_INT 1
65956: NEG
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: PUSH
65962: LD_INT 4
65964: PUSH
65965: LD_INT 0
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: PUSH
65972: LD_INT 4
65974: PUSH
65975: LD_INT 1
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: PUSH
65982: LD_INT 3
65984: PUSH
65985: LD_INT 1
65987: PUSH
65988: EMPTY
65989: LIST
65990: LIST
65991: PUSH
65992: LD_INT 2
65994: PUSH
65995: LD_INT 0
65997: PUSH
65998: EMPTY
65999: LIST
66000: LIST
66001: PUSH
66002: LD_INT 2
66004: PUSH
66005: LD_INT 1
66007: NEG
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: PUSH
66013: LD_INT 2
66015: PUSH
66016: LD_INT 2
66018: NEG
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: PUSH
66024: LD_INT 4
66026: PUSH
66027: LD_INT 2
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: PUSH
66034: LD_INT 4
66036: PUSH
66037: LD_INT 4
66039: PUSH
66040: EMPTY
66041: LIST
66042: LIST
66043: PUSH
66044: LD_INT 4
66046: PUSH
66047: LD_INT 3
66049: PUSH
66050: EMPTY
66051: LIST
66052: LIST
66053: PUSH
66054: LD_INT 5
66056: PUSH
66057: LD_INT 4
66059: PUSH
66060: EMPTY
66061: LIST
66062: LIST
66063: PUSH
66064: LD_INT 5
66066: PUSH
66067: LD_INT 5
66069: PUSH
66070: EMPTY
66071: LIST
66072: LIST
66073: PUSH
66074: LD_INT 4
66076: PUSH
66077: LD_INT 5
66079: PUSH
66080: EMPTY
66081: LIST
66082: LIST
66083: PUSH
66084: LD_INT 3
66086: PUSH
66087: LD_INT 4
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: PUSH
66094: LD_INT 3
66096: PUSH
66097: LD_INT 3
66099: PUSH
66100: EMPTY
66101: LIST
66102: LIST
66103: PUSH
66104: LD_INT 5
66106: PUSH
66107: LD_INT 3
66109: PUSH
66110: EMPTY
66111: LIST
66112: LIST
66113: PUSH
66114: LD_INT 3
66116: PUSH
66117: LD_INT 5
66119: PUSH
66120: EMPTY
66121: LIST
66122: LIST
66123: PUSH
66124: EMPTY
66125: LIST
66126: LIST
66127: LIST
66128: LIST
66129: LIST
66130: LIST
66131: LIST
66132: LIST
66133: LIST
66134: LIST
66135: LIST
66136: LIST
66137: LIST
66138: LIST
66139: LIST
66140: LIST
66141: LIST
66142: LIST
66143: LIST
66144: LIST
66145: LIST
66146: LIST
66147: LIST
66148: LIST
66149: LIST
66150: LIST
66151: LIST
66152: LIST
66153: LIST
66154: LIST
66155: LIST
66156: LIST
66157: LIST
66158: LIST
66159: LIST
66160: LIST
66161: LIST
66162: LIST
66163: LIST
66164: LIST
66165: LIST
66166: LIST
66167: LIST
66168: LIST
66169: LIST
66170: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
66171: LD_ADDR_VAR 0 33
66175: PUSH
66176: LD_INT 4
66178: NEG
66179: PUSH
66180: LD_INT 4
66182: NEG
66183: PUSH
66184: EMPTY
66185: LIST
66186: LIST
66187: PUSH
66188: LD_INT 4
66190: NEG
66191: PUSH
66192: LD_INT 5
66194: NEG
66195: PUSH
66196: EMPTY
66197: LIST
66198: LIST
66199: PUSH
66200: LD_INT 3
66202: NEG
66203: PUSH
66204: LD_INT 4
66206: NEG
66207: PUSH
66208: EMPTY
66209: LIST
66210: LIST
66211: PUSH
66212: LD_INT 3
66214: NEG
66215: PUSH
66216: LD_INT 3
66218: NEG
66219: PUSH
66220: EMPTY
66221: LIST
66222: LIST
66223: PUSH
66224: LD_INT 4
66226: NEG
66227: PUSH
66228: LD_INT 3
66230: NEG
66231: PUSH
66232: EMPTY
66233: LIST
66234: LIST
66235: PUSH
66236: LD_INT 5
66238: NEG
66239: PUSH
66240: LD_INT 4
66242: NEG
66243: PUSH
66244: EMPTY
66245: LIST
66246: LIST
66247: PUSH
66248: LD_INT 5
66250: NEG
66251: PUSH
66252: LD_INT 5
66254: NEG
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: PUSH
66260: LD_INT 3
66262: NEG
66263: PUSH
66264: LD_INT 5
66266: NEG
66267: PUSH
66268: EMPTY
66269: LIST
66270: LIST
66271: PUSH
66272: LD_INT 5
66274: NEG
66275: PUSH
66276: LD_INT 3
66278: NEG
66279: PUSH
66280: EMPTY
66281: LIST
66282: LIST
66283: PUSH
66284: LD_INT 0
66286: PUSH
66287: LD_INT 3
66289: NEG
66290: PUSH
66291: EMPTY
66292: LIST
66293: LIST
66294: PUSH
66295: LD_INT 0
66297: PUSH
66298: LD_INT 4
66300: NEG
66301: PUSH
66302: EMPTY
66303: LIST
66304: LIST
66305: PUSH
66306: LD_INT 1
66308: PUSH
66309: LD_INT 3
66311: NEG
66312: PUSH
66313: EMPTY
66314: LIST
66315: LIST
66316: PUSH
66317: LD_INT 1
66319: PUSH
66320: LD_INT 2
66322: NEG
66323: PUSH
66324: EMPTY
66325: LIST
66326: LIST
66327: PUSH
66328: LD_INT 0
66330: PUSH
66331: LD_INT 2
66333: NEG
66334: PUSH
66335: EMPTY
66336: LIST
66337: LIST
66338: PUSH
66339: LD_INT 1
66341: NEG
66342: PUSH
66343: LD_INT 3
66345: NEG
66346: PUSH
66347: EMPTY
66348: LIST
66349: LIST
66350: PUSH
66351: LD_INT 1
66353: NEG
66354: PUSH
66355: LD_INT 4
66357: NEG
66358: PUSH
66359: EMPTY
66360: LIST
66361: LIST
66362: PUSH
66363: LD_INT 2
66365: PUSH
66366: LD_INT 2
66368: NEG
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: PUSH
66374: LD_INT 2
66376: NEG
66377: PUSH
66378: LD_INT 4
66380: NEG
66381: PUSH
66382: EMPTY
66383: LIST
66384: LIST
66385: PUSH
66386: LD_INT 4
66388: PUSH
66389: LD_INT 0
66391: PUSH
66392: EMPTY
66393: LIST
66394: LIST
66395: PUSH
66396: LD_INT 4
66398: PUSH
66399: LD_INT 1
66401: NEG
66402: PUSH
66403: EMPTY
66404: LIST
66405: LIST
66406: PUSH
66407: LD_INT 5
66409: PUSH
66410: LD_INT 0
66412: PUSH
66413: EMPTY
66414: LIST
66415: LIST
66416: PUSH
66417: LD_INT 5
66419: PUSH
66420: LD_INT 1
66422: PUSH
66423: EMPTY
66424: LIST
66425: LIST
66426: PUSH
66427: LD_INT 4
66429: PUSH
66430: LD_INT 1
66432: PUSH
66433: EMPTY
66434: LIST
66435: LIST
66436: PUSH
66437: LD_INT 3
66439: PUSH
66440: LD_INT 0
66442: PUSH
66443: EMPTY
66444: LIST
66445: LIST
66446: PUSH
66447: LD_INT 3
66449: PUSH
66450: LD_INT 1
66452: NEG
66453: PUSH
66454: EMPTY
66455: LIST
66456: LIST
66457: PUSH
66458: LD_INT 3
66460: PUSH
66461: LD_INT 2
66463: NEG
66464: PUSH
66465: EMPTY
66466: LIST
66467: LIST
66468: PUSH
66469: LD_INT 5
66471: PUSH
66472: LD_INT 2
66474: PUSH
66475: EMPTY
66476: LIST
66477: LIST
66478: PUSH
66479: LD_INT 3
66481: PUSH
66482: LD_INT 3
66484: PUSH
66485: EMPTY
66486: LIST
66487: LIST
66488: PUSH
66489: LD_INT 3
66491: PUSH
66492: LD_INT 2
66494: PUSH
66495: EMPTY
66496: LIST
66497: LIST
66498: PUSH
66499: LD_INT 4
66501: PUSH
66502: LD_INT 3
66504: PUSH
66505: EMPTY
66506: LIST
66507: LIST
66508: PUSH
66509: LD_INT 4
66511: PUSH
66512: LD_INT 4
66514: PUSH
66515: EMPTY
66516: LIST
66517: LIST
66518: PUSH
66519: LD_INT 3
66521: PUSH
66522: LD_INT 4
66524: PUSH
66525: EMPTY
66526: LIST
66527: LIST
66528: PUSH
66529: LD_INT 2
66531: PUSH
66532: LD_INT 3
66534: PUSH
66535: EMPTY
66536: LIST
66537: LIST
66538: PUSH
66539: LD_INT 2
66541: PUSH
66542: LD_INT 2
66544: PUSH
66545: EMPTY
66546: LIST
66547: LIST
66548: PUSH
66549: LD_INT 4
66551: PUSH
66552: LD_INT 2
66554: PUSH
66555: EMPTY
66556: LIST
66557: LIST
66558: PUSH
66559: LD_INT 2
66561: PUSH
66562: LD_INT 4
66564: PUSH
66565: EMPTY
66566: LIST
66567: LIST
66568: PUSH
66569: LD_INT 0
66571: PUSH
66572: LD_INT 4
66574: PUSH
66575: EMPTY
66576: LIST
66577: LIST
66578: PUSH
66579: LD_INT 0
66581: PUSH
66582: LD_INT 3
66584: PUSH
66585: EMPTY
66586: LIST
66587: LIST
66588: PUSH
66589: LD_INT 1
66591: PUSH
66592: LD_INT 4
66594: PUSH
66595: EMPTY
66596: LIST
66597: LIST
66598: PUSH
66599: LD_INT 1
66601: PUSH
66602: LD_INT 5
66604: PUSH
66605: EMPTY
66606: LIST
66607: LIST
66608: PUSH
66609: LD_INT 0
66611: PUSH
66612: LD_INT 5
66614: PUSH
66615: EMPTY
66616: LIST
66617: LIST
66618: PUSH
66619: LD_INT 1
66621: NEG
66622: PUSH
66623: LD_INT 4
66625: PUSH
66626: EMPTY
66627: LIST
66628: LIST
66629: PUSH
66630: LD_INT 1
66632: NEG
66633: PUSH
66634: LD_INT 3
66636: PUSH
66637: EMPTY
66638: LIST
66639: LIST
66640: PUSH
66641: LD_INT 2
66643: PUSH
66644: LD_INT 5
66646: PUSH
66647: EMPTY
66648: LIST
66649: LIST
66650: PUSH
66651: LD_INT 2
66653: NEG
66654: PUSH
66655: LD_INT 3
66657: PUSH
66658: EMPTY
66659: LIST
66660: LIST
66661: PUSH
66662: EMPTY
66663: LIST
66664: LIST
66665: LIST
66666: LIST
66667: LIST
66668: LIST
66669: LIST
66670: LIST
66671: LIST
66672: LIST
66673: LIST
66674: LIST
66675: LIST
66676: LIST
66677: LIST
66678: LIST
66679: LIST
66680: LIST
66681: LIST
66682: LIST
66683: LIST
66684: LIST
66685: LIST
66686: LIST
66687: LIST
66688: LIST
66689: LIST
66690: LIST
66691: LIST
66692: LIST
66693: LIST
66694: LIST
66695: LIST
66696: LIST
66697: LIST
66698: LIST
66699: LIST
66700: LIST
66701: LIST
66702: LIST
66703: LIST
66704: LIST
66705: LIST
66706: LIST
66707: LIST
66708: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
66709: LD_ADDR_VAR 0 34
66713: PUSH
66714: LD_INT 0
66716: PUSH
66717: LD_INT 4
66719: NEG
66720: PUSH
66721: EMPTY
66722: LIST
66723: LIST
66724: PUSH
66725: LD_INT 0
66727: PUSH
66728: LD_INT 5
66730: NEG
66731: PUSH
66732: EMPTY
66733: LIST
66734: LIST
66735: PUSH
66736: LD_INT 1
66738: PUSH
66739: LD_INT 4
66741: NEG
66742: PUSH
66743: EMPTY
66744: LIST
66745: LIST
66746: PUSH
66747: LD_INT 1
66749: PUSH
66750: LD_INT 3
66752: NEG
66753: PUSH
66754: EMPTY
66755: LIST
66756: LIST
66757: PUSH
66758: LD_INT 0
66760: PUSH
66761: LD_INT 3
66763: NEG
66764: PUSH
66765: EMPTY
66766: LIST
66767: LIST
66768: PUSH
66769: LD_INT 1
66771: NEG
66772: PUSH
66773: LD_INT 4
66775: NEG
66776: PUSH
66777: EMPTY
66778: LIST
66779: LIST
66780: PUSH
66781: LD_INT 1
66783: NEG
66784: PUSH
66785: LD_INT 5
66787: NEG
66788: PUSH
66789: EMPTY
66790: LIST
66791: LIST
66792: PUSH
66793: LD_INT 2
66795: PUSH
66796: LD_INT 3
66798: NEG
66799: PUSH
66800: EMPTY
66801: LIST
66802: LIST
66803: PUSH
66804: LD_INT 2
66806: NEG
66807: PUSH
66808: LD_INT 5
66810: NEG
66811: PUSH
66812: EMPTY
66813: LIST
66814: LIST
66815: PUSH
66816: LD_INT 3
66818: PUSH
66819: LD_INT 0
66821: PUSH
66822: EMPTY
66823: LIST
66824: LIST
66825: PUSH
66826: LD_INT 3
66828: PUSH
66829: LD_INT 1
66831: NEG
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: PUSH
66837: LD_INT 4
66839: PUSH
66840: LD_INT 0
66842: PUSH
66843: EMPTY
66844: LIST
66845: LIST
66846: PUSH
66847: LD_INT 4
66849: PUSH
66850: LD_INT 1
66852: PUSH
66853: EMPTY
66854: LIST
66855: LIST
66856: PUSH
66857: LD_INT 3
66859: PUSH
66860: LD_INT 1
66862: PUSH
66863: EMPTY
66864: LIST
66865: LIST
66866: PUSH
66867: LD_INT 2
66869: PUSH
66870: LD_INT 0
66872: PUSH
66873: EMPTY
66874: LIST
66875: LIST
66876: PUSH
66877: LD_INT 2
66879: PUSH
66880: LD_INT 1
66882: NEG
66883: PUSH
66884: EMPTY
66885: LIST
66886: LIST
66887: PUSH
66888: LD_INT 2
66890: PUSH
66891: LD_INT 2
66893: NEG
66894: PUSH
66895: EMPTY
66896: LIST
66897: LIST
66898: PUSH
66899: LD_INT 4
66901: PUSH
66902: LD_INT 2
66904: PUSH
66905: EMPTY
66906: LIST
66907: LIST
66908: PUSH
66909: LD_INT 4
66911: PUSH
66912: LD_INT 4
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: PUSH
66919: LD_INT 4
66921: PUSH
66922: LD_INT 3
66924: PUSH
66925: EMPTY
66926: LIST
66927: LIST
66928: PUSH
66929: LD_INT 5
66931: PUSH
66932: LD_INT 4
66934: PUSH
66935: EMPTY
66936: LIST
66937: LIST
66938: PUSH
66939: LD_INT 5
66941: PUSH
66942: LD_INT 5
66944: PUSH
66945: EMPTY
66946: LIST
66947: LIST
66948: PUSH
66949: LD_INT 4
66951: PUSH
66952: LD_INT 5
66954: PUSH
66955: EMPTY
66956: LIST
66957: LIST
66958: PUSH
66959: LD_INT 3
66961: PUSH
66962: LD_INT 4
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: PUSH
66969: LD_INT 3
66971: PUSH
66972: LD_INT 3
66974: PUSH
66975: EMPTY
66976: LIST
66977: LIST
66978: PUSH
66979: LD_INT 5
66981: PUSH
66982: LD_INT 3
66984: PUSH
66985: EMPTY
66986: LIST
66987: LIST
66988: PUSH
66989: LD_INT 3
66991: PUSH
66992: LD_INT 5
66994: PUSH
66995: EMPTY
66996: LIST
66997: LIST
66998: PUSH
66999: LD_INT 0
67001: PUSH
67002: LD_INT 3
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: PUSH
67009: LD_INT 0
67011: PUSH
67012: LD_INT 2
67014: PUSH
67015: EMPTY
67016: LIST
67017: LIST
67018: PUSH
67019: LD_INT 1
67021: PUSH
67022: LD_INT 3
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: PUSH
67029: LD_INT 1
67031: PUSH
67032: LD_INT 4
67034: PUSH
67035: EMPTY
67036: LIST
67037: LIST
67038: PUSH
67039: LD_INT 0
67041: PUSH
67042: LD_INT 4
67044: PUSH
67045: EMPTY
67046: LIST
67047: LIST
67048: PUSH
67049: LD_INT 1
67051: NEG
67052: PUSH
67053: LD_INT 3
67055: PUSH
67056: EMPTY
67057: LIST
67058: LIST
67059: PUSH
67060: LD_INT 1
67062: NEG
67063: PUSH
67064: LD_INT 2
67066: PUSH
67067: EMPTY
67068: LIST
67069: LIST
67070: PUSH
67071: LD_INT 2
67073: PUSH
67074: LD_INT 4
67076: PUSH
67077: EMPTY
67078: LIST
67079: LIST
67080: PUSH
67081: LD_INT 2
67083: NEG
67084: PUSH
67085: LD_INT 2
67087: PUSH
67088: EMPTY
67089: LIST
67090: LIST
67091: PUSH
67092: LD_INT 4
67094: NEG
67095: PUSH
67096: LD_INT 0
67098: PUSH
67099: EMPTY
67100: LIST
67101: LIST
67102: PUSH
67103: LD_INT 4
67105: NEG
67106: PUSH
67107: LD_INT 1
67109: NEG
67110: PUSH
67111: EMPTY
67112: LIST
67113: LIST
67114: PUSH
67115: LD_INT 3
67117: NEG
67118: PUSH
67119: LD_INT 0
67121: PUSH
67122: EMPTY
67123: LIST
67124: LIST
67125: PUSH
67126: LD_INT 3
67128: NEG
67129: PUSH
67130: LD_INT 1
67132: PUSH
67133: EMPTY
67134: LIST
67135: LIST
67136: PUSH
67137: LD_INT 4
67139: NEG
67140: PUSH
67141: LD_INT 1
67143: PUSH
67144: EMPTY
67145: LIST
67146: LIST
67147: PUSH
67148: LD_INT 5
67150: NEG
67151: PUSH
67152: LD_INT 0
67154: PUSH
67155: EMPTY
67156: LIST
67157: LIST
67158: PUSH
67159: LD_INT 5
67161: NEG
67162: PUSH
67163: LD_INT 1
67165: NEG
67166: PUSH
67167: EMPTY
67168: LIST
67169: LIST
67170: PUSH
67171: LD_INT 5
67173: NEG
67174: PUSH
67175: LD_INT 2
67177: NEG
67178: PUSH
67179: EMPTY
67180: LIST
67181: LIST
67182: PUSH
67183: LD_INT 3
67185: NEG
67186: PUSH
67187: LD_INT 2
67189: PUSH
67190: EMPTY
67191: LIST
67192: LIST
67193: PUSH
67194: EMPTY
67195: LIST
67196: LIST
67197: LIST
67198: LIST
67199: LIST
67200: LIST
67201: LIST
67202: LIST
67203: LIST
67204: LIST
67205: LIST
67206: LIST
67207: LIST
67208: LIST
67209: LIST
67210: LIST
67211: LIST
67212: LIST
67213: LIST
67214: LIST
67215: LIST
67216: LIST
67217: LIST
67218: LIST
67219: LIST
67220: LIST
67221: LIST
67222: LIST
67223: LIST
67224: LIST
67225: LIST
67226: LIST
67227: LIST
67228: LIST
67229: LIST
67230: LIST
67231: LIST
67232: LIST
67233: LIST
67234: LIST
67235: LIST
67236: LIST
67237: LIST
67238: LIST
67239: LIST
67240: ST_TO_ADDR
// end ; end ;
67241: GO 67244
67243: POP
// case btype of b_depot , b_warehouse :
67244: LD_VAR 0 1
67248: PUSH
67249: LD_INT 0
67251: DOUBLE
67252: EQUAL
67253: IFTRUE 67263
67255: LD_INT 1
67257: DOUBLE
67258: EQUAL
67259: IFTRUE 67263
67261: GO 67464
67263: POP
// case nation of nation_american :
67264: LD_VAR 0 5
67268: PUSH
67269: LD_INT 1
67271: DOUBLE
67272: EQUAL
67273: IFTRUE 67277
67275: GO 67333
67277: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
67278: LD_ADDR_VAR 0 9
67282: PUSH
67283: LD_VAR 0 11
67287: PUSH
67288: LD_VAR 0 12
67292: PUSH
67293: LD_VAR 0 13
67297: PUSH
67298: LD_VAR 0 14
67302: PUSH
67303: LD_VAR 0 15
67307: PUSH
67308: LD_VAR 0 16
67312: PUSH
67313: EMPTY
67314: LIST
67315: LIST
67316: LIST
67317: LIST
67318: LIST
67319: LIST
67320: PUSH
67321: LD_VAR 0 4
67325: PUSH
67326: LD_INT 1
67328: PLUS
67329: ARRAY
67330: ST_TO_ADDR
67331: GO 67462
67333: LD_INT 2
67335: DOUBLE
67336: EQUAL
67337: IFTRUE 67341
67339: GO 67397
67341: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
67342: LD_ADDR_VAR 0 9
67346: PUSH
67347: LD_VAR 0 17
67351: PUSH
67352: LD_VAR 0 18
67356: PUSH
67357: LD_VAR 0 19
67361: PUSH
67362: LD_VAR 0 20
67366: PUSH
67367: LD_VAR 0 21
67371: PUSH
67372: LD_VAR 0 22
67376: PUSH
67377: EMPTY
67378: LIST
67379: LIST
67380: LIST
67381: LIST
67382: LIST
67383: LIST
67384: PUSH
67385: LD_VAR 0 4
67389: PUSH
67390: LD_INT 1
67392: PLUS
67393: ARRAY
67394: ST_TO_ADDR
67395: GO 67462
67397: LD_INT 3
67399: DOUBLE
67400: EQUAL
67401: IFTRUE 67405
67403: GO 67461
67405: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
67406: LD_ADDR_VAR 0 9
67410: PUSH
67411: LD_VAR 0 23
67415: PUSH
67416: LD_VAR 0 24
67420: PUSH
67421: LD_VAR 0 25
67425: PUSH
67426: LD_VAR 0 26
67430: PUSH
67431: LD_VAR 0 27
67435: PUSH
67436: LD_VAR 0 28
67440: PUSH
67441: EMPTY
67442: LIST
67443: LIST
67444: LIST
67445: LIST
67446: LIST
67447: LIST
67448: PUSH
67449: LD_VAR 0 4
67453: PUSH
67454: LD_INT 1
67456: PLUS
67457: ARRAY
67458: ST_TO_ADDR
67459: GO 67462
67461: POP
67462: GO 68017
67464: LD_INT 2
67466: DOUBLE
67467: EQUAL
67468: IFTRUE 67478
67470: LD_INT 3
67472: DOUBLE
67473: EQUAL
67474: IFTRUE 67478
67476: GO 67534
67478: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
67479: LD_ADDR_VAR 0 9
67483: PUSH
67484: LD_VAR 0 29
67488: PUSH
67489: LD_VAR 0 30
67493: PUSH
67494: LD_VAR 0 31
67498: PUSH
67499: LD_VAR 0 32
67503: PUSH
67504: LD_VAR 0 33
67508: PUSH
67509: LD_VAR 0 34
67513: PUSH
67514: EMPTY
67515: LIST
67516: LIST
67517: LIST
67518: LIST
67519: LIST
67520: LIST
67521: PUSH
67522: LD_VAR 0 4
67526: PUSH
67527: LD_INT 1
67529: PLUS
67530: ARRAY
67531: ST_TO_ADDR
67532: GO 68017
67534: LD_INT 16
67536: DOUBLE
67537: EQUAL
67538: IFTRUE 67596
67540: LD_INT 17
67542: DOUBLE
67543: EQUAL
67544: IFTRUE 67596
67546: LD_INT 18
67548: DOUBLE
67549: EQUAL
67550: IFTRUE 67596
67552: LD_INT 19
67554: DOUBLE
67555: EQUAL
67556: IFTRUE 67596
67558: LD_INT 22
67560: DOUBLE
67561: EQUAL
67562: IFTRUE 67596
67564: LD_INT 20
67566: DOUBLE
67567: EQUAL
67568: IFTRUE 67596
67570: LD_INT 21
67572: DOUBLE
67573: EQUAL
67574: IFTRUE 67596
67576: LD_INT 23
67578: DOUBLE
67579: EQUAL
67580: IFTRUE 67596
67582: LD_INT 24
67584: DOUBLE
67585: EQUAL
67586: IFTRUE 67596
67588: LD_INT 25
67590: DOUBLE
67591: EQUAL
67592: IFTRUE 67596
67594: GO 67652
67596: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
67597: LD_ADDR_VAR 0 9
67601: PUSH
67602: LD_VAR 0 35
67606: PUSH
67607: LD_VAR 0 36
67611: PUSH
67612: LD_VAR 0 37
67616: PUSH
67617: LD_VAR 0 38
67621: PUSH
67622: LD_VAR 0 39
67626: PUSH
67627: LD_VAR 0 40
67631: PUSH
67632: EMPTY
67633: LIST
67634: LIST
67635: LIST
67636: LIST
67637: LIST
67638: LIST
67639: PUSH
67640: LD_VAR 0 4
67644: PUSH
67645: LD_INT 1
67647: PLUS
67648: ARRAY
67649: ST_TO_ADDR
67650: GO 68017
67652: LD_INT 6
67654: DOUBLE
67655: EQUAL
67656: IFTRUE 67708
67658: LD_INT 7
67660: DOUBLE
67661: EQUAL
67662: IFTRUE 67708
67664: LD_INT 8
67666: DOUBLE
67667: EQUAL
67668: IFTRUE 67708
67670: LD_INT 13
67672: DOUBLE
67673: EQUAL
67674: IFTRUE 67708
67676: LD_INT 12
67678: DOUBLE
67679: EQUAL
67680: IFTRUE 67708
67682: LD_INT 15
67684: DOUBLE
67685: EQUAL
67686: IFTRUE 67708
67688: LD_INT 11
67690: DOUBLE
67691: EQUAL
67692: IFTRUE 67708
67694: LD_INT 14
67696: DOUBLE
67697: EQUAL
67698: IFTRUE 67708
67700: LD_INT 10
67702: DOUBLE
67703: EQUAL
67704: IFTRUE 67708
67706: GO 67764
67708: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
67709: LD_ADDR_VAR 0 9
67713: PUSH
67714: LD_VAR 0 41
67718: PUSH
67719: LD_VAR 0 42
67723: PUSH
67724: LD_VAR 0 43
67728: PUSH
67729: LD_VAR 0 44
67733: PUSH
67734: LD_VAR 0 45
67738: PUSH
67739: LD_VAR 0 46
67743: PUSH
67744: EMPTY
67745: LIST
67746: LIST
67747: LIST
67748: LIST
67749: LIST
67750: LIST
67751: PUSH
67752: LD_VAR 0 4
67756: PUSH
67757: LD_INT 1
67759: PLUS
67760: ARRAY
67761: ST_TO_ADDR
67762: GO 68017
67764: LD_INT 36
67766: DOUBLE
67767: EQUAL
67768: IFTRUE 67772
67770: GO 67828
67772: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
67773: LD_ADDR_VAR 0 9
67777: PUSH
67778: LD_VAR 0 47
67782: PUSH
67783: LD_VAR 0 48
67787: PUSH
67788: LD_VAR 0 49
67792: PUSH
67793: LD_VAR 0 50
67797: PUSH
67798: LD_VAR 0 51
67802: PUSH
67803: LD_VAR 0 52
67807: PUSH
67808: EMPTY
67809: LIST
67810: LIST
67811: LIST
67812: LIST
67813: LIST
67814: LIST
67815: PUSH
67816: LD_VAR 0 4
67820: PUSH
67821: LD_INT 1
67823: PLUS
67824: ARRAY
67825: ST_TO_ADDR
67826: GO 68017
67828: LD_INT 4
67830: DOUBLE
67831: EQUAL
67832: IFTRUE 67854
67834: LD_INT 5
67836: DOUBLE
67837: EQUAL
67838: IFTRUE 67854
67840: LD_INT 34
67842: DOUBLE
67843: EQUAL
67844: IFTRUE 67854
67846: LD_INT 37
67848: DOUBLE
67849: EQUAL
67850: IFTRUE 67854
67852: GO 67910
67854: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
67855: LD_ADDR_VAR 0 9
67859: PUSH
67860: LD_VAR 0 53
67864: PUSH
67865: LD_VAR 0 54
67869: PUSH
67870: LD_VAR 0 55
67874: PUSH
67875: LD_VAR 0 56
67879: PUSH
67880: LD_VAR 0 57
67884: PUSH
67885: LD_VAR 0 58
67889: PUSH
67890: EMPTY
67891: LIST
67892: LIST
67893: LIST
67894: LIST
67895: LIST
67896: LIST
67897: PUSH
67898: LD_VAR 0 4
67902: PUSH
67903: LD_INT 1
67905: PLUS
67906: ARRAY
67907: ST_TO_ADDR
67908: GO 68017
67910: LD_INT 31
67912: DOUBLE
67913: EQUAL
67914: IFTRUE 67960
67916: LD_INT 32
67918: DOUBLE
67919: EQUAL
67920: IFTRUE 67960
67922: LD_INT 33
67924: DOUBLE
67925: EQUAL
67926: IFTRUE 67960
67928: LD_INT 27
67930: DOUBLE
67931: EQUAL
67932: IFTRUE 67960
67934: LD_INT 26
67936: DOUBLE
67937: EQUAL
67938: IFTRUE 67960
67940: LD_INT 28
67942: DOUBLE
67943: EQUAL
67944: IFTRUE 67960
67946: LD_INT 29
67948: DOUBLE
67949: EQUAL
67950: IFTRUE 67960
67952: LD_INT 30
67954: DOUBLE
67955: EQUAL
67956: IFTRUE 67960
67958: GO 68016
67960: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
67961: LD_ADDR_VAR 0 9
67965: PUSH
67966: LD_VAR 0 59
67970: PUSH
67971: LD_VAR 0 60
67975: PUSH
67976: LD_VAR 0 61
67980: PUSH
67981: LD_VAR 0 62
67985: PUSH
67986: LD_VAR 0 63
67990: PUSH
67991: LD_VAR 0 64
67995: PUSH
67996: EMPTY
67997: LIST
67998: LIST
67999: LIST
68000: LIST
68001: LIST
68002: LIST
68003: PUSH
68004: LD_VAR 0 4
68008: PUSH
68009: LD_INT 1
68011: PLUS
68012: ARRAY
68013: ST_TO_ADDR
68014: GO 68017
68016: POP
// temp_list2 = [ ] ;
68017: LD_ADDR_VAR 0 10
68021: PUSH
68022: EMPTY
68023: ST_TO_ADDR
// for i in temp_list do
68024: LD_ADDR_VAR 0 8
68028: PUSH
68029: LD_VAR 0 9
68033: PUSH
68034: FOR_IN
68035: IFFALSE 68087
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
68037: LD_ADDR_VAR 0 10
68041: PUSH
68042: LD_VAR 0 10
68046: PUSH
68047: LD_VAR 0 8
68051: PUSH
68052: LD_INT 1
68054: ARRAY
68055: PUSH
68056: LD_VAR 0 2
68060: PLUS
68061: PUSH
68062: LD_VAR 0 8
68066: PUSH
68067: LD_INT 2
68069: ARRAY
68070: PUSH
68071: LD_VAR 0 3
68075: PLUS
68076: PUSH
68077: EMPTY
68078: LIST
68079: LIST
68080: PUSH
68081: EMPTY
68082: LIST
68083: ADD
68084: ST_TO_ADDR
68085: GO 68034
68087: POP
68088: POP
// result = temp_list2 ;
68089: LD_ADDR_VAR 0 7
68093: PUSH
68094: LD_VAR 0 10
68098: ST_TO_ADDR
// end ;
68099: LD_VAR 0 7
68103: RET
// export function EnemyInRange ( unit , dist ) ; begin
68104: LD_INT 0
68106: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
68107: LD_ADDR_VAR 0 3
68111: PUSH
68112: LD_VAR 0 1
68116: PPUSH
68117: CALL_OW 255
68121: PPUSH
68122: LD_VAR 0 1
68126: PPUSH
68127: CALL_OW 250
68131: PPUSH
68132: LD_VAR 0 1
68136: PPUSH
68137: CALL_OW 251
68141: PPUSH
68142: LD_VAR 0 2
68146: PPUSH
68147: CALL 41477 0 4
68151: PUSH
68152: LD_INT 4
68154: ARRAY
68155: ST_TO_ADDR
// end ;
68156: LD_VAR 0 3
68160: RET
// export function PlayerSeeMe ( unit ) ; begin
68161: LD_INT 0
68163: PPUSH
// result := See ( your_side , unit ) ;
68164: LD_ADDR_VAR 0 2
68168: PUSH
68169: LD_OWVAR 2
68173: PPUSH
68174: LD_VAR 0 1
68178: PPUSH
68179: CALL_OW 292
68183: ST_TO_ADDR
// end ;
68184: LD_VAR 0 2
68188: RET
// export function ReverseDir ( unit ) ; begin
68189: LD_INT 0
68191: PPUSH
// if not unit then
68192: LD_VAR 0 1
68196: NOT
68197: IFFALSE 68201
// exit ;
68199: GO 68224
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
68201: LD_ADDR_VAR 0 2
68205: PUSH
68206: LD_VAR 0 1
68210: PPUSH
68211: CALL_OW 254
68215: PUSH
68216: LD_INT 3
68218: PLUS
68219: PUSH
68220: LD_INT 6
68222: MOD
68223: ST_TO_ADDR
// end ;
68224: LD_VAR 0 2
68228: RET
// export function ReverseArray ( array ) ; var i ; begin
68229: LD_INT 0
68231: PPUSH
68232: PPUSH
// if not array then
68233: LD_VAR 0 1
68237: NOT
68238: IFFALSE 68242
// exit ;
68240: GO 68297
// result := [ ] ;
68242: LD_ADDR_VAR 0 2
68246: PUSH
68247: EMPTY
68248: ST_TO_ADDR
// for i := array downto 1 do
68249: LD_ADDR_VAR 0 3
68253: PUSH
68254: DOUBLE
68255: LD_VAR 0 1
68259: INC
68260: ST_TO_ADDR
68261: LD_INT 1
68263: PUSH
68264: FOR_DOWNTO
68265: IFFALSE 68295
// result := Join ( result , array [ i ] ) ;
68267: LD_ADDR_VAR 0 2
68271: PUSH
68272: LD_VAR 0 2
68276: PPUSH
68277: LD_VAR 0 1
68281: PUSH
68282: LD_VAR 0 3
68286: ARRAY
68287: PPUSH
68288: CALL 72940 0 2
68292: ST_TO_ADDR
68293: GO 68264
68295: POP
68296: POP
// end ;
68297: LD_VAR 0 2
68301: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
68302: LD_INT 0
68304: PPUSH
68305: PPUSH
68306: PPUSH
68307: PPUSH
68308: PPUSH
68309: PPUSH
// if not unit or not hexes then
68310: LD_VAR 0 1
68314: NOT
68315: PUSH
68316: LD_VAR 0 2
68320: NOT
68321: OR
68322: IFFALSE 68326
// exit ;
68324: GO 68449
// dist := 9999 ;
68326: LD_ADDR_VAR 0 5
68330: PUSH
68331: LD_INT 9999
68333: ST_TO_ADDR
// for i = 1 to hexes do
68334: LD_ADDR_VAR 0 4
68338: PUSH
68339: DOUBLE
68340: LD_INT 1
68342: DEC
68343: ST_TO_ADDR
68344: LD_VAR 0 2
68348: PUSH
68349: FOR_TO
68350: IFFALSE 68437
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
68352: LD_ADDR_VAR 0 6
68356: PUSH
68357: LD_VAR 0 1
68361: PPUSH
68362: LD_VAR 0 2
68366: PUSH
68367: LD_VAR 0 4
68371: ARRAY
68372: PUSH
68373: LD_INT 1
68375: ARRAY
68376: PPUSH
68377: LD_VAR 0 2
68381: PUSH
68382: LD_VAR 0 4
68386: ARRAY
68387: PUSH
68388: LD_INT 2
68390: ARRAY
68391: PPUSH
68392: CALL_OW 297
68396: ST_TO_ADDR
// if tdist < dist then
68397: LD_VAR 0 6
68401: PUSH
68402: LD_VAR 0 5
68406: LESS
68407: IFFALSE 68435
// begin hex := hexes [ i ] ;
68409: LD_ADDR_VAR 0 8
68413: PUSH
68414: LD_VAR 0 2
68418: PUSH
68419: LD_VAR 0 4
68423: ARRAY
68424: ST_TO_ADDR
// dist := tdist ;
68425: LD_ADDR_VAR 0 5
68429: PUSH
68430: LD_VAR 0 6
68434: ST_TO_ADDR
// end ; end ;
68435: GO 68349
68437: POP
68438: POP
// result := hex ;
68439: LD_ADDR_VAR 0 3
68443: PUSH
68444: LD_VAR 0 8
68448: ST_TO_ADDR
// end ;
68449: LD_VAR 0 3
68453: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
68454: LD_INT 0
68456: PPUSH
68457: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
68458: LD_VAR 0 1
68462: NOT
68463: PUSH
68464: LD_VAR 0 1
68468: PUSH
68469: LD_INT 21
68471: PUSH
68472: LD_INT 2
68474: PUSH
68475: EMPTY
68476: LIST
68477: LIST
68478: PUSH
68479: LD_INT 23
68481: PUSH
68482: LD_INT 2
68484: PUSH
68485: EMPTY
68486: LIST
68487: LIST
68488: PUSH
68489: EMPTY
68490: LIST
68491: LIST
68492: PPUSH
68493: CALL_OW 69
68497: IN
68498: NOT
68499: OR
68500: IFFALSE 68504
// exit ;
68502: GO 68551
// for i = 1 to 3 do
68504: LD_ADDR_VAR 0 3
68508: PUSH
68509: DOUBLE
68510: LD_INT 1
68512: DEC
68513: ST_TO_ADDR
68514: LD_INT 3
68516: PUSH
68517: FOR_TO
68518: IFFALSE 68549
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
68520: LD_VAR 0 1
68524: PPUSH
68525: CALL_OW 250
68529: PPUSH
68530: LD_VAR 0 1
68534: PPUSH
68535: CALL_OW 251
68539: PPUSH
68540: LD_INT 1
68542: PPUSH
68543: CALL_OW 453
68547: GO 68517
68549: POP
68550: POP
// end ;
68551: LD_VAR 0 2
68555: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
68556: LD_INT 0
68558: PPUSH
68559: PPUSH
68560: PPUSH
68561: PPUSH
68562: PPUSH
68563: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
68564: LD_VAR 0 1
68568: NOT
68569: PUSH
68570: LD_VAR 0 2
68574: NOT
68575: OR
68576: PUSH
68577: LD_VAR 0 1
68581: PPUSH
68582: CALL_OW 314
68586: OR
68587: IFFALSE 68591
// exit ;
68589: GO 69058
// if GetLives ( i ) < 250 then
68591: LD_VAR 0 4
68595: PPUSH
68596: CALL_OW 256
68600: PUSH
68601: LD_INT 250
68603: LESS
68604: IFFALSE 68617
// begin ComAutodestruct ( i ) ;
68606: LD_VAR 0 4
68610: PPUSH
68611: CALL 68454 0 1
// exit ;
68615: GO 69058
// end ; x := GetX ( enemy_unit ) ;
68617: LD_ADDR_VAR 0 7
68621: PUSH
68622: LD_VAR 0 2
68626: PPUSH
68627: CALL_OW 250
68631: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
68632: LD_ADDR_VAR 0 8
68636: PUSH
68637: LD_VAR 0 2
68641: PPUSH
68642: CALL_OW 251
68646: ST_TO_ADDR
// if not x or not y then
68647: LD_VAR 0 7
68651: NOT
68652: PUSH
68653: LD_VAR 0 8
68657: NOT
68658: OR
68659: IFFALSE 68663
// exit ;
68661: GO 69058
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
68663: LD_ADDR_VAR 0 6
68667: PUSH
68668: LD_VAR 0 7
68672: PPUSH
68673: LD_INT 0
68675: PPUSH
68676: LD_INT 4
68678: PPUSH
68679: CALL_OW 272
68683: PUSH
68684: LD_VAR 0 8
68688: PPUSH
68689: LD_INT 0
68691: PPUSH
68692: LD_INT 4
68694: PPUSH
68695: CALL_OW 273
68699: PUSH
68700: EMPTY
68701: LIST
68702: LIST
68703: PUSH
68704: LD_VAR 0 7
68708: PPUSH
68709: LD_INT 1
68711: PPUSH
68712: LD_INT 4
68714: PPUSH
68715: CALL_OW 272
68719: PUSH
68720: LD_VAR 0 8
68724: PPUSH
68725: LD_INT 1
68727: PPUSH
68728: LD_INT 4
68730: PPUSH
68731: CALL_OW 273
68735: PUSH
68736: EMPTY
68737: LIST
68738: LIST
68739: PUSH
68740: LD_VAR 0 7
68744: PPUSH
68745: LD_INT 2
68747: PPUSH
68748: LD_INT 4
68750: PPUSH
68751: CALL_OW 272
68755: PUSH
68756: LD_VAR 0 8
68760: PPUSH
68761: LD_INT 2
68763: PPUSH
68764: LD_INT 4
68766: PPUSH
68767: CALL_OW 273
68771: PUSH
68772: EMPTY
68773: LIST
68774: LIST
68775: PUSH
68776: LD_VAR 0 7
68780: PPUSH
68781: LD_INT 3
68783: PPUSH
68784: LD_INT 4
68786: PPUSH
68787: CALL_OW 272
68791: PUSH
68792: LD_VAR 0 8
68796: PPUSH
68797: LD_INT 3
68799: PPUSH
68800: LD_INT 4
68802: PPUSH
68803: CALL_OW 273
68807: PUSH
68808: EMPTY
68809: LIST
68810: LIST
68811: PUSH
68812: LD_VAR 0 7
68816: PPUSH
68817: LD_INT 4
68819: PPUSH
68820: LD_INT 4
68822: PPUSH
68823: CALL_OW 272
68827: PUSH
68828: LD_VAR 0 8
68832: PPUSH
68833: LD_INT 4
68835: PPUSH
68836: LD_INT 4
68838: PPUSH
68839: CALL_OW 273
68843: PUSH
68844: EMPTY
68845: LIST
68846: LIST
68847: PUSH
68848: LD_VAR 0 7
68852: PPUSH
68853: LD_INT 5
68855: PPUSH
68856: LD_INT 4
68858: PPUSH
68859: CALL_OW 272
68863: PUSH
68864: LD_VAR 0 8
68868: PPUSH
68869: LD_INT 5
68871: PPUSH
68872: LD_INT 4
68874: PPUSH
68875: CALL_OW 273
68879: PUSH
68880: EMPTY
68881: LIST
68882: LIST
68883: PUSH
68884: EMPTY
68885: LIST
68886: LIST
68887: LIST
68888: LIST
68889: LIST
68890: LIST
68891: ST_TO_ADDR
// for i = tmp downto 1 do
68892: LD_ADDR_VAR 0 4
68896: PUSH
68897: DOUBLE
68898: LD_VAR 0 6
68902: INC
68903: ST_TO_ADDR
68904: LD_INT 1
68906: PUSH
68907: FOR_DOWNTO
68908: IFFALSE 69009
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
68910: LD_VAR 0 6
68914: PUSH
68915: LD_VAR 0 4
68919: ARRAY
68920: PUSH
68921: LD_INT 1
68923: ARRAY
68924: PPUSH
68925: LD_VAR 0 6
68929: PUSH
68930: LD_VAR 0 4
68934: ARRAY
68935: PUSH
68936: LD_INT 2
68938: ARRAY
68939: PPUSH
68940: CALL_OW 488
68944: NOT
68945: PUSH
68946: LD_VAR 0 6
68950: PUSH
68951: LD_VAR 0 4
68955: ARRAY
68956: PUSH
68957: LD_INT 1
68959: ARRAY
68960: PPUSH
68961: LD_VAR 0 6
68965: PUSH
68966: LD_VAR 0 4
68970: ARRAY
68971: PUSH
68972: LD_INT 2
68974: ARRAY
68975: PPUSH
68976: CALL_OW 428
68980: PUSH
68981: LD_INT 0
68983: NONEQUAL
68984: OR
68985: IFFALSE 69007
// tmp := Delete ( tmp , i ) ;
68987: LD_ADDR_VAR 0 6
68991: PUSH
68992: LD_VAR 0 6
68996: PPUSH
68997: LD_VAR 0 4
69001: PPUSH
69002: CALL_OW 3
69006: ST_TO_ADDR
69007: GO 68907
69009: POP
69010: POP
// j := GetClosestHex ( unit , tmp ) ;
69011: LD_ADDR_VAR 0 5
69015: PUSH
69016: LD_VAR 0 1
69020: PPUSH
69021: LD_VAR 0 6
69025: PPUSH
69026: CALL 68302 0 2
69030: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
69031: LD_VAR 0 1
69035: PPUSH
69036: LD_VAR 0 5
69040: PUSH
69041: LD_INT 1
69043: ARRAY
69044: PPUSH
69045: LD_VAR 0 5
69049: PUSH
69050: LD_INT 2
69052: ARRAY
69053: PPUSH
69054: CALL_OW 111
// end ;
69058: LD_VAR 0 3
69062: RET
// export function PrepareApemanSoldier ( ) ; begin
69063: LD_INT 0
69065: PPUSH
// uc_nation := 0 ;
69066: LD_ADDR_OWVAR 21
69070: PUSH
69071: LD_INT 0
69073: ST_TO_ADDR
// hc_sex := sex_male ;
69074: LD_ADDR_OWVAR 27
69078: PUSH
69079: LD_INT 1
69081: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
69082: LD_ADDR_OWVAR 28
69086: PUSH
69087: LD_INT 15
69089: ST_TO_ADDR
// hc_gallery :=  ;
69090: LD_ADDR_OWVAR 33
69094: PUSH
69095: LD_STRING 
69097: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
69098: LD_ADDR_OWVAR 31
69102: PUSH
69103: LD_INT 0
69105: PPUSH
69106: LD_INT 3
69108: PPUSH
69109: CALL_OW 12
69113: PUSH
69114: LD_INT 0
69116: PPUSH
69117: LD_INT 3
69119: PPUSH
69120: CALL_OW 12
69124: PUSH
69125: LD_INT 0
69127: PUSH
69128: LD_INT 0
69130: PUSH
69131: EMPTY
69132: LIST
69133: LIST
69134: LIST
69135: LIST
69136: ST_TO_ADDR
// end ;
69137: LD_VAR 0 1
69141: RET
// export function PrepareApemanEngineer ( ) ; begin
69142: LD_INT 0
69144: PPUSH
// uc_nation := 0 ;
69145: LD_ADDR_OWVAR 21
69149: PUSH
69150: LD_INT 0
69152: ST_TO_ADDR
// hc_sex := sex_male ;
69153: LD_ADDR_OWVAR 27
69157: PUSH
69158: LD_INT 1
69160: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
69161: LD_ADDR_OWVAR 28
69165: PUSH
69166: LD_INT 16
69168: ST_TO_ADDR
// hc_gallery :=  ;
69169: LD_ADDR_OWVAR 33
69173: PUSH
69174: LD_STRING 
69176: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
69177: LD_ADDR_OWVAR 31
69181: PUSH
69182: LD_INT 0
69184: PPUSH
69185: LD_INT 3
69187: PPUSH
69188: CALL_OW 12
69192: PUSH
69193: LD_INT 0
69195: PPUSH
69196: LD_INT 3
69198: PPUSH
69199: CALL_OW 12
69203: PUSH
69204: LD_INT 0
69206: PUSH
69207: LD_INT 0
69209: PUSH
69210: EMPTY
69211: LIST
69212: LIST
69213: LIST
69214: LIST
69215: ST_TO_ADDR
// end ;
69216: LD_VAR 0 1
69220: RET
// export function PrepareApeman ( agressivity ) ; begin
69221: LD_INT 0
69223: PPUSH
// uc_side := 0 ;
69224: LD_ADDR_OWVAR 20
69228: PUSH
69229: LD_INT 0
69231: ST_TO_ADDR
// uc_nation := 0 ;
69232: LD_ADDR_OWVAR 21
69236: PUSH
69237: LD_INT 0
69239: ST_TO_ADDR
// hc_sex := sex_male ;
69240: LD_ADDR_OWVAR 27
69244: PUSH
69245: LD_INT 1
69247: ST_TO_ADDR
// hc_class := class_apeman ;
69248: LD_ADDR_OWVAR 28
69252: PUSH
69253: LD_INT 12
69255: ST_TO_ADDR
// hc_gallery :=  ;
69256: LD_ADDR_OWVAR 33
69260: PUSH
69261: LD_STRING 
69263: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
69264: LD_ADDR_OWVAR 35
69268: PUSH
69269: LD_VAR 0 1
69273: NEG
69274: PPUSH
69275: LD_VAR 0 1
69279: PPUSH
69280: CALL_OW 12
69284: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
69285: LD_ADDR_OWVAR 31
69289: PUSH
69290: LD_INT 0
69292: PPUSH
69293: LD_INT 3
69295: PPUSH
69296: CALL_OW 12
69300: PUSH
69301: LD_INT 0
69303: PPUSH
69304: LD_INT 3
69306: PPUSH
69307: CALL_OW 12
69311: PUSH
69312: LD_INT 0
69314: PUSH
69315: LD_INT 0
69317: PUSH
69318: EMPTY
69319: LIST
69320: LIST
69321: LIST
69322: LIST
69323: ST_TO_ADDR
// end ;
69324: LD_VAR 0 2
69328: RET
// export function PrepareTiger ( agressivity ) ; begin
69329: LD_INT 0
69331: PPUSH
// uc_side := 0 ;
69332: LD_ADDR_OWVAR 20
69336: PUSH
69337: LD_INT 0
69339: ST_TO_ADDR
// uc_nation := 0 ;
69340: LD_ADDR_OWVAR 21
69344: PUSH
69345: LD_INT 0
69347: ST_TO_ADDR
// hc_class := class_tiger ;
69348: LD_ADDR_OWVAR 28
69352: PUSH
69353: LD_INT 14
69355: ST_TO_ADDR
// hc_gallery :=  ;
69356: LD_ADDR_OWVAR 33
69360: PUSH
69361: LD_STRING 
69363: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
69364: LD_ADDR_OWVAR 35
69368: PUSH
69369: LD_VAR 0 1
69373: NEG
69374: PPUSH
69375: LD_VAR 0 1
69379: PPUSH
69380: CALL_OW 12
69384: ST_TO_ADDR
// end ;
69385: LD_VAR 0 2
69389: RET
// export function PrepareEnchidna ( ) ; begin
69390: LD_INT 0
69392: PPUSH
// uc_side := 0 ;
69393: LD_ADDR_OWVAR 20
69397: PUSH
69398: LD_INT 0
69400: ST_TO_ADDR
// uc_nation := 0 ;
69401: LD_ADDR_OWVAR 21
69405: PUSH
69406: LD_INT 0
69408: ST_TO_ADDR
// hc_class := class_baggie ;
69409: LD_ADDR_OWVAR 28
69413: PUSH
69414: LD_INT 13
69416: ST_TO_ADDR
// hc_gallery :=  ;
69417: LD_ADDR_OWVAR 33
69421: PUSH
69422: LD_STRING 
69424: ST_TO_ADDR
// end ;
69425: LD_VAR 0 1
69429: RET
// export function PrepareFrog ( ) ; begin
69430: LD_INT 0
69432: PPUSH
// uc_side := 0 ;
69433: LD_ADDR_OWVAR 20
69437: PUSH
69438: LD_INT 0
69440: ST_TO_ADDR
// uc_nation := 0 ;
69441: LD_ADDR_OWVAR 21
69445: PUSH
69446: LD_INT 0
69448: ST_TO_ADDR
// hc_class := class_frog ;
69449: LD_ADDR_OWVAR 28
69453: PUSH
69454: LD_INT 19
69456: ST_TO_ADDR
// hc_gallery :=  ;
69457: LD_ADDR_OWVAR 33
69461: PUSH
69462: LD_STRING 
69464: ST_TO_ADDR
// end ;
69465: LD_VAR 0 1
69469: RET
// export function PrepareFish ( ) ; begin
69470: LD_INT 0
69472: PPUSH
// uc_side := 0 ;
69473: LD_ADDR_OWVAR 20
69477: PUSH
69478: LD_INT 0
69480: ST_TO_ADDR
// uc_nation := 0 ;
69481: LD_ADDR_OWVAR 21
69485: PUSH
69486: LD_INT 0
69488: ST_TO_ADDR
// hc_class := class_fish ;
69489: LD_ADDR_OWVAR 28
69493: PUSH
69494: LD_INT 20
69496: ST_TO_ADDR
// hc_gallery :=  ;
69497: LD_ADDR_OWVAR 33
69501: PUSH
69502: LD_STRING 
69504: ST_TO_ADDR
// end ;
69505: LD_VAR 0 1
69509: RET
// export function PrepareBird ( ) ; begin
69510: LD_INT 0
69512: PPUSH
// uc_side := 0 ;
69513: LD_ADDR_OWVAR 20
69517: PUSH
69518: LD_INT 0
69520: ST_TO_ADDR
// uc_nation := 0 ;
69521: LD_ADDR_OWVAR 21
69525: PUSH
69526: LD_INT 0
69528: ST_TO_ADDR
// hc_class := class_phororhacos ;
69529: LD_ADDR_OWVAR 28
69533: PUSH
69534: LD_INT 18
69536: ST_TO_ADDR
// hc_gallery :=  ;
69537: LD_ADDR_OWVAR 33
69541: PUSH
69542: LD_STRING 
69544: ST_TO_ADDR
// end ;
69545: LD_VAR 0 1
69549: RET
// export function PrepareHorse ( ) ; begin
69550: LD_INT 0
69552: PPUSH
// uc_side := 0 ;
69553: LD_ADDR_OWVAR 20
69557: PUSH
69558: LD_INT 0
69560: ST_TO_ADDR
// uc_nation := 0 ;
69561: LD_ADDR_OWVAR 21
69565: PUSH
69566: LD_INT 0
69568: ST_TO_ADDR
// hc_class := class_horse ;
69569: LD_ADDR_OWVAR 28
69573: PUSH
69574: LD_INT 21
69576: ST_TO_ADDR
// hc_gallery :=  ;
69577: LD_ADDR_OWVAR 33
69581: PUSH
69582: LD_STRING 
69584: ST_TO_ADDR
// end ;
69585: LD_VAR 0 1
69589: RET
// export function PrepareMastodont ( ) ; begin
69590: LD_INT 0
69592: PPUSH
// uc_side := 0 ;
69593: LD_ADDR_OWVAR 20
69597: PUSH
69598: LD_INT 0
69600: ST_TO_ADDR
// uc_nation := 0 ;
69601: LD_ADDR_OWVAR 21
69605: PUSH
69606: LD_INT 0
69608: ST_TO_ADDR
// vc_chassis := class_mastodont ;
69609: LD_ADDR_OWVAR 37
69613: PUSH
69614: LD_INT 31
69616: ST_TO_ADDR
// vc_control := control_rider ;
69617: LD_ADDR_OWVAR 38
69621: PUSH
69622: LD_INT 4
69624: ST_TO_ADDR
// end ;
69625: LD_VAR 0 1
69629: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
69630: LD_INT 0
69632: PPUSH
69633: PPUSH
69634: PPUSH
// uc_side = 0 ;
69635: LD_ADDR_OWVAR 20
69639: PUSH
69640: LD_INT 0
69642: ST_TO_ADDR
// uc_nation = 0 ;
69643: LD_ADDR_OWVAR 21
69647: PUSH
69648: LD_INT 0
69650: ST_TO_ADDR
// InitHc_All ( ) ;
69651: CALL_OW 584
// InitVc ;
69655: CALL_OW 20
// if mastodonts then
69659: LD_VAR 0 6
69663: IFFALSE 69730
// for i = 1 to mastodonts do
69665: LD_ADDR_VAR 0 11
69669: PUSH
69670: DOUBLE
69671: LD_INT 1
69673: DEC
69674: ST_TO_ADDR
69675: LD_VAR 0 6
69679: PUSH
69680: FOR_TO
69681: IFFALSE 69728
// begin vc_chassis := 31 ;
69683: LD_ADDR_OWVAR 37
69687: PUSH
69688: LD_INT 31
69690: ST_TO_ADDR
// vc_control := control_rider ;
69691: LD_ADDR_OWVAR 38
69695: PUSH
69696: LD_INT 4
69698: ST_TO_ADDR
// animal := CreateVehicle ;
69699: LD_ADDR_VAR 0 12
69703: PUSH
69704: CALL_OW 45
69708: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69709: LD_VAR 0 12
69713: PPUSH
69714: LD_VAR 0 8
69718: PPUSH
69719: LD_INT 0
69721: PPUSH
69722: CALL 71858 0 3
// end ;
69726: GO 69680
69728: POP
69729: POP
// if horses then
69730: LD_VAR 0 5
69734: IFFALSE 69801
// for i = 1 to horses do
69736: LD_ADDR_VAR 0 11
69740: PUSH
69741: DOUBLE
69742: LD_INT 1
69744: DEC
69745: ST_TO_ADDR
69746: LD_VAR 0 5
69750: PUSH
69751: FOR_TO
69752: IFFALSE 69799
// begin hc_class := 21 ;
69754: LD_ADDR_OWVAR 28
69758: PUSH
69759: LD_INT 21
69761: ST_TO_ADDR
// hc_gallery :=  ;
69762: LD_ADDR_OWVAR 33
69766: PUSH
69767: LD_STRING 
69769: ST_TO_ADDR
// animal := CreateHuman ;
69770: LD_ADDR_VAR 0 12
69774: PUSH
69775: CALL_OW 44
69779: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69780: LD_VAR 0 12
69784: PPUSH
69785: LD_VAR 0 8
69789: PPUSH
69790: LD_INT 0
69792: PPUSH
69793: CALL 71858 0 3
// end ;
69797: GO 69751
69799: POP
69800: POP
// if birds then
69801: LD_VAR 0 1
69805: IFFALSE 69872
// for i = 1 to birds do
69807: LD_ADDR_VAR 0 11
69811: PUSH
69812: DOUBLE
69813: LD_INT 1
69815: DEC
69816: ST_TO_ADDR
69817: LD_VAR 0 1
69821: PUSH
69822: FOR_TO
69823: IFFALSE 69870
// begin hc_class := 18 ;
69825: LD_ADDR_OWVAR 28
69829: PUSH
69830: LD_INT 18
69832: ST_TO_ADDR
// hc_gallery =  ;
69833: LD_ADDR_OWVAR 33
69837: PUSH
69838: LD_STRING 
69840: ST_TO_ADDR
// animal := CreateHuman ;
69841: LD_ADDR_VAR 0 12
69845: PUSH
69846: CALL_OW 44
69850: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69851: LD_VAR 0 12
69855: PPUSH
69856: LD_VAR 0 8
69860: PPUSH
69861: LD_INT 0
69863: PPUSH
69864: CALL 71858 0 3
// end ;
69868: GO 69822
69870: POP
69871: POP
// if tigers then
69872: LD_VAR 0 2
69876: IFFALSE 69960
// for i = 1 to tigers do
69878: LD_ADDR_VAR 0 11
69882: PUSH
69883: DOUBLE
69884: LD_INT 1
69886: DEC
69887: ST_TO_ADDR
69888: LD_VAR 0 2
69892: PUSH
69893: FOR_TO
69894: IFFALSE 69958
// begin hc_class = class_tiger ;
69896: LD_ADDR_OWVAR 28
69900: PUSH
69901: LD_INT 14
69903: ST_TO_ADDR
// hc_gallery =  ;
69904: LD_ADDR_OWVAR 33
69908: PUSH
69909: LD_STRING 
69911: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
69912: LD_ADDR_OWVAR 35
69916: PUSH
69917: LD_INT 7
69919: NEG
69920: PPUSH
69921: LD_INT 7
69923: PPUSH
69924: CALL_OW 12
69928: ST_TO_ADDR
// animal := CreateHuman ;
69929: LD_ADDR_VAR 0 12
69933: PUSH
69934: CALL_OW 44
69938: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69939: LD_VAR 0 12
69943: PPUSH
69944: LD_VAR 0 8
69948: PPUSH
69949: LD_INT 0
69951: PPUSH
69952: CALL 71858 0 3
// end ;
69956: GO 69893
69958: POP
69959: POP
// if apemans then
69960: LD_VAR 0 3
69964: IFFALSE 70087
// for i = 1 to apemans do
69966: LD_ADDR_VAR 0 11
69970: PUSH
69971: DOUBLE
69972: LD_INT 1
69974: DEC
69975: ST_TO_ADDR
69976: LD_VAR 0 3
69980: PUSH
69981: FOR_TO
69982: IFFALSE 70085
// begin hc_class = class_apeman ;
69984: LD_ADDR_OWVAR 28
69988: PUSH
69989: LD_INT 12
69991: ST_TO_ADDR
// hc_gallery =  ;
69992: LD_ADDR_OWVAR 33
69996: PUSH
69997: LD_STRING 
69999: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
70000: LD_ADDR_OWVAR 35
70004: PUSH
70005: LD_INT 2
70007: NEG
70008: PPUSH
70009: LD_INT 2
70011: PPUSH
70012: CALL_OW 12
70016: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
70017: LD_ADDR_OWVAR 31
70021: PUSH
70022: LD_INT 1
70024: PPUSH
70025: LD_INT 3
70027: PPUSH
70028: CALL_OW 12
70032: PUSH
70033: LD_INT 1
70035: PPUSH
70036: LD_INT 3
70038: PPUSH
70039: CALL_OW 12
70043: PUSH
70044: LD_INT 0
70046: PUSH
70047: LD_INT 0
70049: PUSH
70050: EMPTY
70051: LIST
70052: LIST
70053: LIST
70054: LIST
70055: ST_TO_ADDR
// animal := CreateHuman ;
70056: LD_ADDR_VAR 0 12
70060: PUSH
70061: CALL_OW 44
70065: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70066: LD_VAR 0 12
70070: PPUSH
70071: LD_VAR 0 8
70075: PPUSH
70076: LD_INT 0
70078: PPUSH
70079: CALL 71858 0 3
// end ;
70083: GO 69981
70085: POP
70086: POP
// if enchidnas then
70087: LD_VAR 0 4
70091: IFFALSE 70158
// for i = 1 to enchidnas do
70093: LD_ADDR_VAR 0 11
70097: PUSH
70098: DOUBLE
70099: LD_INT 1
70101: DEC
70102: ST_TO_ADDR
70103: LD_VAR 0 4
70107: PUSH
70108: FOR_TO
70109: IFFALSE 70156
// begin hc_class = 13 ;
70111: LD_ADDR_OWVAR 28
70115: PUSH
70116: LD_INT 13
70118: ST_TO_ADDR
// hc_gallery =  ;
70119: LD_ADDR_OWVAR 33
70123: PUSH
70124: LD_STRING 
70126: ST_TO_ADDR
// animal := CreateHuman ;
70127: LD_ADDR_VAR 0 12
70131: PUSH
70132: CALL_OW 44
70136: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70137: LD_VAR 0 12
70141: PPUSH
70142: LD_VAR 0 8
70146: PPUSH
70147: LD_INT 0
70149: PPUSH
70150: CALL 71858 0 3
// end ;
70154: GO 70108
70156: POP
70157: POP
// if fishes then
70158: LD_VAR 0 7
70162: IFFALSE 70229
// for i = 1 to fishes do
70164: LD_ADDR_VAR 0 11
70168: PUSH
70169: DOUBLE
70170: LD_INT 1
70172: DEC
70173: ST_TO_ADDR
70174: LD_VAR 0 7
70178: PUSH
70179: FOR_TO
70180: IFFALSE 70227
// begin hc_class = 20 ;
70182: LD_ADDR_OWVAR 28
70186: PUSH
70187: LD_INT 20
70189: ST_TO_ADDR
// hc_gallery =  ;
70190: LD_ADDR_OWVAR 33
70194: PUSH
70195: LD_STRING 
70197: ST_TO_ADDR
// animal := CreateHuman ;
70198: LD_ADDR_VAR 0 12
70202: PUSH
70203: CALL_OW 44
70207: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
70208: LD_VAR 0 12
70212: PPUSH
70213: LD_VAR 0 9
70217: PPUSH
70218: LD_INT 0
70220: PPUSH
70221: CALL 71858 0 3
// end ;
70225: GO 70179
70227: POP
70228: POP
// end ;
70229: LD_VAR 0 10
70233: RET
// export function WantHeal ( sci , unit ) ; begin
70234: LD_INT 0
70236: PPUSH
// if GetTaskList ( sci ) > 0 then
70237: LD_VAR 0 1
70241: PPUSH
70242: CALL_OW 437
70246: PUSH
70247: LD_INT 0
70249: GREATER
70250: IFFALSE 70320
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
70252: LD_VAR 0 1
70256: PPUSH
70257: CALL_OW 437
70261: PUSH
70262: LD_INT 1
70264: ARRAY
70265: PUSH
70266: LD_INT 1
70268: ARRAY
70269: PUSH
70270: LD_STRING l
70272: EQUAL
70273: PUSH
70274: LD_VAR 0 1
70278: PPUSH
70279: CALL_OW 437
70283: PUSH
70284: LD_INT 1
70286: ARRAY
70287: PUSH
70288: LD_INT 4
70290: ARRAY
70291: PUSH
70292: LD_VAR 0 2
70296: EQUAL
70297: AND
70298: IFFALSE 70310
// result := true else
70300: LD_ADDR_VAR 0 3
70304: PUSH
70305: LD_INT 1
70307: ST_TO_ADDR
70308: GO 70318
// result := false ;
70310: LD_ADDR_VAR 0 3
70314: PUSH
70315: LD_INT 0
70317: ST_TO_ADDR
// end else
70318: GO 70328
// result := false ;
70320: LD_ADDR_VAR 0 3
70324: PUSH
70325: LD_INT 0
70327: ST_TO_ADDR
// end ;
70328: LD_VAR 0 3
70332: RET
// export function HealTarget ( sci ) ; begin
70333: LD_INT 0
70335: PPUSH
// if not sci then
70336: LD_VAR 0 1
70340: NOT
70341: IFFALSE 70345
// exit ;
70343: GO 70410
// result := 0 ;
70345: LD_ADDR_VAR 0 2
70349: PUSH
70350: LD_INT 0
70352: ST_TO_ADDR
// if GetTaskList ( sci ) then
70353: LD_VAR 0 1
70357: PPUSH
70358: CALL_OW 437
70362: IFFALSE 70410
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
70364: LD_VAR 0 1
70368: PPUSH
70369: CALL_OW 437
70373: PUSH
70374: LD_INT 1
70376: ARRAY
70377: PUSH
70378: LD_INT 1
70380: ARRAY
70381: PUSH
70382: LD_STRING l
70384: EQUAL
70385: IFFALSE 70410
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
70387: LD_ADDR_VAR 0 2
70391: PUSH
70392: LD_VAR 0 1
70396: PPUSH
70397: CALL_OW 437
70401: PUSH
70402: LD_INT 1
70404: ARRAY
70405: PUSH
70406: LD_INT 4
70408: ARRAY
70409: ST_TO_ADDR
// end ;
70410: LD_VAR 0 2
70414: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
70415: LD_INT 0
70417: PPUSH
70418: PPUSH
70419: PPUSH
70420: PPUSH
// if not base_units then
70421: LD_VAR 0 1
70425: NOT
70426: IFFALSE 70430
// exit ;
70428: GO 70517
// result := false ;
70430: LD_ADDR_VAR 0 2
70434: PUSH
70435: LD_INT 0
70437: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
70438: LD_ADDR_VAR 0 5
70442: PUSH
70443: LD_VAR 0 1
70447: PPUSH
70448: LD_INT 21
70450: PUSH
70451: LD_INT 3
70453: PUSH
70454: EMPTY
70455: LIST
70456: LIST
70457: PPUSH
70458: CALL_OW 72
70462: ST_TO_ADDR
// if not tmp then
70463: LD_VAR 0 5
70467: NOT
70468: IFFALSE 70472
// exit ;
70470: GO 70517
// for i in tmp do
70472: LD_ADDR_VAR 0 3
70476: PUSH
70477: LD_VAR 0 5
70481: PUSH
70482: FOR_IN
70483: IFFALSE 70515
// begin result := EnemyInRange ( i , 22 ) ;
70485: LD_ADDR_VAR 0 2
70489: PUSH
70490: LD_VAR 0 3
70494: PPUSH
70495: LD_INT 22
70497: PPUSH
70498: CALL 68104 0 2
70502: ST_TO_ADDR
// if result then
70503: LD_VAR 0 2
70507: IFFALSE 70513
// exit ;
70509: POP
70510: POP
70511: GO 70517
// end ;
70513: GO 70482
70515: POP
70516: POP
// end ;
70517: LD_VAR 0 2
70521: RET
// export function FilterByTag ( units , tag ) ; begin
70522: LD_INT 0
70524: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
70525: LD_ADDR_VAR 0 3
70529: PUSH
70530: LD_VAR 0 1
70534: PPUSH
70535: LD_INT 120
70537: PUSH
70538: LD_VAR 0 2
70542: PUSH
70543: EMPTY
70544: LIST
70545: LIST
70546: PPUSH
70547: CALL_OW 72
70551: ST_TO_ADDR
// end ;
70552: LD_VAR 0 3
70556: RET
// export function IsDriver ( un ) ; begin
70557: LD_INT 0
70559: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
70560: LD_ADDR_VAR 0 2
70564: PUSH
70565: LD_VAR 0 1
70569: PUSH
70570: LD_INT 55
70572: PUSH
70573: EMPTY
70574: LIST
70575: PPUSH
70576: CALL_OW 69
70580: IN
70581: ST_TO_ADDR
// end ;
70582: LD_VAR 0 2
70586: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
70587: LD_INT 0
70589: PPUSH
70590: PPUSH
// list := [ ] ;
70591: LD_ADDR_VAR 0 5
70595: PUSH
70596: EMPTY
70597: ST_TO_ADDR
// case d of 0 :
70598: LD_VAR 0 3
70602: PUSH
70603: LD_INT 0
70605: DOUBLE
70606: EQUAL
70607: IFTRUE 70611
70609: GO 70744
70611: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
70612: LD_ADDR_VAR 0 5
70616: PUSH
70617: LD_VAR 0 1
70621: PUSH
70622: LD_INT 4
70624: MINUS
70625: PUSH
70626: LD_VAR 0 2
70630: PUSH
70631: LD_INT 4
70633: MINUS
70634: PUSH
70635: LD_INT 2
70637: PUSH
70638: EMPTY
70639: LIST
70640: LIST
70641: LIST
70642: PUSH
70643: LD_VAR 0 1
70647: PUSH
70648: LD_INT 3
70650: MINUS
70651: PUSH
70652: LD_VAR 0 2
70656: PUSH
70657: LD_INT 1
70659: PUSH
70660: EMPTY
70661: LIST
70662: LIST
70663: LIST
70664: PUSH
70665: LD_VAR 0 1
70669: PUSH
70670: LD_INT 4
70672: PLUS
70673: PUSH
70674: LD_VAR 0 2
70678: PUSH
70679: LD_INT 4
70681: PUSH
70682: EMPTY
70683: LIST
70684: LIST
70685: LIST
70686: PUSH
70687: LD_VAR 0 1
70691: PUSH
70692: LD_INT 3
70694: PLUS
70695: PUSH
70696: LD_VAR 0 2
70700: PUSH
70701: LD_INT 3
70703: PLUS
70704: PUSH
70705: LD_INT 5
70707: PUSH
70708: EMPTY
70709: LIST
70710: LIST
70711: LIST
70712: PUSH
70713: LD_VAR 0 1
70717: PUSH
70718: LD_VAR 0 2
70722: PUSH
70723: LD_INT 4
70725: PLUS
70726: PUSH
70727: LD_INT 0
70729: PUSH
70730: EMPTY
70731: LIST
70732: LIST
70733: LIST
70734: PUSH
70735: EMPTY
70736: LIST
70737: LIST
70738: LIST
70739: LIST
70740: LIST
70741: ST_TO_ADDR
// end ; 1 :
70742: GO 71442
70744: LD_INT 1
70746: DOUBLE
70747: EQUAL
70748: IFTRUE 70752
70750: GO 70885
70752: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
70753: LD_ADDR_VAR 0 5
70757: PUSH
70758: LD_VAR 0 1
70762: PUSH
70763: LD_VAR 0 2
70767: PUSH
70768: LD_INT 4
70770: MINUS
70771: PUSH
70772: LD_INT 3
70774: PUSH
70775: EMPTY
70776: LIST
70777: LIST
70778: LIST
70779: PUSH
70780: LD_VAR 0 1
70784: PUSH
70785: LD_INT 3
70787: MINUS
70788: PUSH
70789: LD_VAR 0 2
70793: PUSH
70794: LD_INT 3
70796: MINUS
70797: PUSH
70798: LD_INT 2
70800: PUSH
70801: EMPTY
70802: LIST
70803: LIST
70804: LIST
70805: PUSH
70806: LD_VAR 0 1
70810: PUSH
70811: LD_INT 4
70813: MINUS
70814: PUSH
70815: LD_VAR 0 2
70819: PUSH
70820: LD_INT 1
70822: PUSH
70823: EMPTY
70824: LIST
70825: LIST
70826: LIST
70827: PUSH
70828: LD_VAR 0 1
70832: PUSH
70833: LD_VAR 0 2
70837: PUSH
70838: LD_INT 3
70840: PLUS
70841: PUSH
70842: LD_INT 0
70844: PUSH
70845: EMPTY
70846: LIST
70847: LIST
70848: LIST
70849: PUSH
70850: LD_VAR 0 1
70854: PUSH
70855: LD_INT 4
70857: PLUS
70858: PUSH
70859: LD_VAR 0 2
70863: PUSH
70864: LD_INT 4
70866: PLUS
70867: PUSH
70868: LD_INT 5
70870: PUSH
70871: EMPTY
70872: LIST
70873: LIST
70874: LIST
70875: PUSH
70876: EMPTY
70877: LIST
70878: LIST
70879: LIST
70880: LIST
70881: LIST
70882: ST_TO_ADDR
// end ; 2 :
70883: GO 71442
70885: LD_INT 2
70887: DOUBLE
70888: EQUAL
70889: IFTRUE 70893
70891: GO 71022
70893: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
70894: LD_ADDR_VAR 0 5
70898: PUSH
70899: LD_VAR 0 1
70903: PUSH
70904: LD_VAR 0 2
70908: PUSH
70909: LD_INT 3
70911: MINUS
70912: PUSH
70913: LD_INT 3
70915: PUSH
70916: EMPTY
70917: LIST
70918: LIST
70919: LIST
70920: PUSH
70921: LD_VAR 0 1
70925: PUSH
70926: LD_INT 4
70928: PLUS
70929: PUSH
70930: LD_VAR 0 2
70934: PUSH
70935: LD_INT 4
70937: PUSH
70938: EMPTY
70939: LIST
70940: LIST
70941: LIST
70942: PUSH
70943: LD_VAR 0 1
70947: PUSH
70948: LD_VAR 0 2
70952: PUSH
70953: LD_INT 4
70955: PLUS
70956: PUSH
70957: LD_INT 0
70959: PUSH
70960: EMPTY
70961: LIST
70962: LIST
70963: LIST
70964: PUSH
70965: LD_VAR 0 1
70969: PUSH
70970: LD_INT 3
70972: MINUS
70973: PUSH
70974: LD_VAR 0 2
70978: PUSH
70979: LD_INT 1
70981: PUSH
70982: EMPTY
70983: LIST
70984: LIST
70985: LIST
70986: PUSH
70987: LD_VAR 0 1
70991: PUSH
70992: LD_INT 4
70994: MINUS
70995: PUSH
70996: LD_VAR 0 2
71000: PUSH
71001: LD_INT 4
71003: MINUS
71004: PUSH
71005: LD_INT 2
71007: PUSH
71008: EMPTY
71009: LIST
71010: LIST
71011: LIST
71012: PUSH
71013: EMPTY
71014: LIST
71015: LIST
71016: LIST
71017: LIST
71018: LIST
71019: ST_TO_ADDR
// end ; 3 :
71020: GO 71442
71022: LD_INT 3
71024: DOUBLE
71025: EQUAL
71026: IFTRUE 71030
71028: GO 71163
71030: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
71031: LD_ADDR_VAR 0 5
71035: PUSH
71036: LD_VAR 0 1
71040: PUSH
71041: LD_INT 3
71043: PLUS
71044: PUSH
71045: LD_VAR 0 2
71049: PUSH
71050: LD_INT 4
71052: PUSH
71053: EMPTY
71054: LIST
71055: LIST
71056: LIST
71057: PUSH
71058: LD_VAR 0 1
71062: PUSH
71063: LD_INT 4
71065: PLUS
71066: PUSH
71067: LD_VAR 0 2
71071: PUSH
71072: LD_INT 4
71074: PLUS
71075: PUSH
71076: LD_INT 5
71078: PUSH
71079: EMPTY
71080: LIST
71081: LIST
71082: LIST
71083: PUSH
71084: LD_VAR 0 1
71088: PUSH
71089: LD_INT 4
71091: MINUS
71092: PUSH
71093: LD_VAR 0 2
71097: PUSH
71098: LD_INT 1
71100: PUSH
71101: EMPTY
71102: LIST
71103: LIST
71104: LIST
71105: PUSH
71106: LD_VAR 0 1
71110: PUSH
71111: LD_VAR 0 2
71115: PUSH
71116: LD_INT 4
71118: MINUS
71119: PUSH
71120: LD_INT 3
71122: PUSH
71123: EMPTY
71124: LIST
71125: LIST
71126: LIST
71127: PUSH
71128: LD_VAR 0 1
71132: PUSH
71133: LD_INT 3
71135: MINUS
71136: PUSH
71137: LD_VAR 0 2
71141: PUSH
71142: LD_INT 3
71144: MINUS
71145: PUSH
71146: LD_INT 2
71148: PUSH
71149: EMPTY
71150: LIST
71151: LIST
71152: LIST
71153: PUSH
71154: EMPTY
71155: LIST
71156: LIST
71157: LIST
71158: LIST
71159: LIST
71160: ST_TO_ADDR
// end ; 4 :
71161: GO 71442
71163: LD_INT 4
71165: DOUBLE
71166: EQUAL
71167: IFTRUE 71171
71169: GO 71304
71171: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
71172: LD_ADDR_VAR 0 5
71176: PUSH
71177: LD_VAR 0 1
71181: PUSH
71182: LD_VAR 0 2
71186: PUSH
71187: LD_INT 4
71189: PLUS
71190: PUSH
71191: LD_INT 0
71193: PUSH
71194: EMPTY
71195: LIST
71196: LIST
71197: LIST
71198: PUSH
71199: LD_VAR 0 1
71203: PUSH
71204: LD_INT 3
71206: PLUS
71207: PUSH
71208: LD_VAR 0 2
71212: PUSH
71213: LD_INT 3
71215: PLUS
71216: PUSH
71217: LD_INT 5
71219: PUSH
71220: EMPTY
71221: LIST
71222: LIST
71223: LIST
71224: PUSH
71225: LD_VAR 0 1
71229: PUSH
71230: LD_INT 4
71232: PLUS
71233: PUSH
71234: LD_VAR 0 2
71238: PUSH
71239: LD_INT 4
71241: PUSH
71242: EMPTY
71243: LIST
71244: LIST
71245: LIST
71246: PUSH
71247: LD_VAR 0 1
71251: PUSH
71252: LD_VAR 0 2
71256: PUSH
71257: LD_INT 3
71259: MINUS
71260: PUSH
71261: LD_INT 3
71263: PUSH
71264: EMPTY
71265: LIST
71266: LIST
71267: LIST
71268: PUSH
71269: LD_VAR 0 1
71273: PUSH
71274: LD_INT 4
71276: MINUS
71277: PUSH
71278: LD_VAR 0 2
71282: PUSH
71283: LD_INT 4
71285: MINUS
71286: PUSH
71287: LD_INT 2
71289: PUSH
71290: EMPTY
71291: LIST
71292: LIST
71293: LIST
71294: PUSH
71295: EMPTY
71296: LIST
71297: LIST
71298: LIST
71299: LIST
71300: LIST
71301: ST_TO_ADDR
// end ; 5 :
71302: GO 71442
71304: LD_INT 5
71306: DOUBLE
71307: EQUAL
71308: IFTRUE 71312
71310: GO 71441
71312: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
71313: LD_ADDR_VAR 0 5
71317: PUSH
71318: LD_VAR 0 1
71322: PUSH
71323: LD_INT 4
71325: MINUS
71326: PUSH
71327: LD_VAR 0 2
71331: PUSH
71332: LD_INT 1
71334: PUSH
71335: EMPTY
71336: LIST
71337: LIST
71338: LIST
71339: PUSH
71340: LD_VAR 0 1
71344: PUSH
71345: LD_VAR 0 2
71349: PUSH
71350: LD_INT 4
71352: MINUS
71353: PUSH
71354: LD_INT 3
71356: PUSH
71357: EMPTY
71358: LIST
71359: LIST
71360: LIST
71361: PUSH
71362: LD_VAR 0 1
71366: PUSH
71367: LD_INT 4
71369: PLUS
71370: PUSH
71371: LD_VAR 0 2
71375: PUSH
71376: LD_INT 4
71378: PLUS
71379: PUSH
71380: LD_INT 5
71382: PUSH
71383: EMPTY
71384: LIST
71385: LIST
71386: LIST
71387: PUSH
71388: LD_VAR 0 1
71392: PUSH
71393: LD_INT 3
71395: PLUS
71396: PUSH
71397: LD_VAR 0 2
71401: PUSH
71402: LD_INT 4
71404: PUSH
71405: EMPTY
71406: LIST
71407: LIST
71408: LIST
71409: PUSH
71410: LD_VAR 0 1
71414: PUSH
71415: LD_VAR 0 2
71419: PUSH
71420: LD_INT 3
71422: PLUS
71423: PUSH
71424: LD_INT 0
71426: PUSH
71427: EMPTY
71428: LIST
71429: LIST
71430: LIST
71431: PUSH
71432: EMPTY
71433: LIST
71434: LIST
71435: LIST
71436: LIST
71437: LIST
71438: ST_TO_ADDR
// end ; end ;
71439: GO 71442
71441: POP
// result := list ;
71442: LD_ADDR_VAR 0 4
71446: PUSH
71447: LD_VAR 0 5
71451: ST_TO_ADDR
// end ;
71452: LD_VAR 0 4
71456: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
71457: LD_INT 0
71459: PPUSH
71460: PPUSH
71461: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
71462: LD_VAR 0 1
71466: NOT
71467: PUSH
71468: LD_VAR 0 2
71472: PUSH
71473: LD_INT 1
71475: PUSH
71476: LD_INT 2
71478: PUSH
71479: LD_INT 3
71481: PUSH
71482: LD_INT 4
71484: PUSH
71485: EMPTY
71486: LIST
71487: LIST
71488: LIST
71489: LIST
71490: IN
71491: NOT
71492: OR
71493: IFFALSE 71497
// exit ;
71495: GO 71580
// tmp := [ ] ;
71497: LD_ADDR_VAR 0 5
71501: PUSH
71502: EMPTY
71503: ST_TO_ADDR
// for i in units do
71504: LD_ADDR_VAR 0 4
71508: PUSH
71509: LD_VAR 0 1
71513: PUSH
71514: FOR_IN
71515: IFFALSE 71549
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
71517: LD_ADDR_VAR 0 5
71521: PUSH
71522: LD_VAR 0 5
71526: PPUSH
71527: LD_VAR 0 4
71531: PPUSH
71532: LD_VAR 0 2
71536: PPUSH
71537: CALL_OW 259
71541: PPUSH
71542: CALL 72940 0 2
71546: ST_TO_ADDR
71547: GO 71514
71549: POP
71550: POP
// if not tmp then
71551: LD_VAR 0 5
71555: NOT
71556: IFFALSE 71560
// exit ;
71558: GO 71580
// result := SortListByListDesc ( units , tmp ) ;
71560: LD_ADDR_VAR 0 3
71564: PUSH
71565: LD_VAR 0 1
71569: PPUSH
71570: LD_VAR 0 5
71574: PPUSH
71575: CALL_OW 77
71579: ST_TO_ADDR
// end ;
71580: LD_VAR 0 3
71584: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
71585: LD_INT 0
71587: PPUSH
71588: PPUSH
71589: PPUSH
// result := false ;
71590: LD_ADDR_VAR 0 3
71594: PUSH
71595: LD_INT 0
71597: ST_TO_ADDR
// if not building then
71598: LD_VAR 0 2
71602: NOT
71603: IFFALSE 71607
// exit ;
71605: GO 71745
// x := GetX ( building ) ;
71607: LD_ADDR_VAR 0 4
71611: PUSH
71612: LD_VAR 0 2
71616: PPUSH
71617: CALL_OW 250
71621: ST_TO_ADDR
// y := GetY ( building ) ;
71622: LD_ADDR_VAR 0 5
71626: PUSH
71627: LD_VAR 0 2
71631: PPUSH
71632: CALL_OW 251
71636: ST_TO_ADDR
// if not x or not y then
71637: LD_VAR 0 4
71641: NOT
71642: PUSH
71643: LD_VAR 0 5
71647: NOT
71648: OR
71649: IFFALSE 71653
// exit ;
71651: GO 71745
// if GetTaskList ( unit ) then
71653: LD_VAR 0 1
71657: PPUSH
71658: CALL_OW 437
71662: IFFALSE 71745
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71664: LD_STRING e
71666: PUSH
71667: LD_VAR 0 1
71671: PPUSH
71672: CALL_OW 437
71676: PUSH
71677: LD_INT 1
71679: ARRAY
71680: PUSH
71681: LD_INT 1
71683: ARRAY
71684: EQUAL
71685: PUSH
71686: LD_VAR 0 4
71690: PUSH
71691: LD_VAR 0 1
71695: PPUSH
71696: CALL_OW 437
71700: PUSH
71701: LD_INT 1
71703: ARRAY
71704: PUSH
71705: LD_INT 2
71707: ARRAY
71708: EQUAL
71709: AND
71710: PUSH
71711: LD_VAR 0 5
71715: PUSH
71716: LD_VAR 0 1
71720: PPUSH
71721: CALL_OW 437
71725: PUSH
71726: LD_INT 1
71728: ARRAY
71729: PUSH
71730: LD_INT 3
71732: ARRAY
71733: EQUAL
71734: AND
71735: IFFALSE 71745
// result := true end ;
71737: LD_ADDR_VAR 0 3
71741: PUSH
71742: LD_INT 1
71744: ST_TO_ADDR
// end ;
71745: LD_VAR 0 3
71749: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
71750: LD_INT 0
71752: PPUSH
// result := false ;
71753: LD_ADDR_VAR 0 4
71757: PUSH
71758: LD_INT 0
71760: ST_TO_ADDR
// if GetTaskList ( unit ) then
71761: LD_VAR 0 1
71765: PPUSH
71766: CALL_OW 437
71770: IFFALSE 71853
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71772: LD_STRING M
71774: PUSH
71775: LD_VAR 0 1
71779: PPUSH
71780: CALL_OW 437
71784: PUSH
71785: LD_INT 1
71787: ARRAY
71788: PUSH
71789: LD_INT 1
71791: ARRAY
71792: EQUAL
71793: PUSH
71794: LD_VAR 0 2
71798: PUSH
71799: LD_VAR 0 1
71803: PPUSH
71804: CALL_OW 437
71808: PUSH
71809: LD_INT 1
71811: ARRAY
71812: PUSH
71813: LD_INT 2
71815: ARRAY
71816: EQUAL
71817: AND
71818: PUSH
71819: LD_VAR 0 3
71823: PUSH
71824: LD_VAR 0 1
71828: PPUSH
71829: CALL_OW 437
71833: PUSH
71834: LD_INT 1
71836: ARRAY
71837: PUSH
71838: LD_INT 3
71840: ARRAY
71841: EQUAL
71842: AND
71843: IFFALSE 71853
// result := true ;
71845: LD_ADDR_VAR 0 4
71849: PUSH
71850: LD_INT 1
71852: ST_TO_ADDR
// end ; end ;
71853: LD_VAR 0 4
71857: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
71858: LD_INT 0
71860: PPUSH
71861: PPUSH
71862: PPUSH
71863: PPUSH
// if not unit or not area then
71864: LD_VAR 0 1
71868: NOT
71869: PUSH
71870: LD_VAR 0 2
71874: NOT
71875: OR
71876: IFFALSE 71880
// exit ;
71878: GO 72043
// tmp := AreaToList ( area , i ) ;
71880: LD_ADDR_VAR 0 6
71884: PUSH
71885: LD_VAR 0 2
71889: PPUSH
71890: LD_VAR 0 5
71894: PPUSH
71895: CALL_OW 517
71899: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
71900: LD_ADDR_VAR 0 5
71904: PUSH
71905: DOUBLE
71906: LD_INT 1
71908: DEC
71909: ST_TO_ADDR
71910: LD_VAR 0 6
71914: PUSH
71915: LD_INT 1
71917: ARRAY
71918: PUSH
71919: FOR_TO
71920: IFFALSE 72041
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
71922: LD_ADDR_VAR 0 7
71926: PUSH
71927: LD_VAR 0 6
71931: PUSH
71932: LD_INT 1
71934: ARRAY
71935: PUSH
71936: LD_VAR 0 5
71940: ARRAY
71941: PUSH
71942: LD_VAR 0 6
71946: PUSH
71947: LD_INT 2
71949: ARRAY
71950: PUSH
71951: LD_VAR 0 5
71955: ARRAY
71956: PUSH
71957: EMPTY
71958: LIST
71959: LIST
71960: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
71961: LD_INT 92
71963: PUSH
71964: LD_VAR 0 7
71968: PUSH
71969: LD_INT 1
71971: ARRAY
71972: PUSH
71973: LD_VAR 0 7
71977: PUSH
71978: LD_INT 2
71980: ARRAY
71981: PUSH
71982: LD_INT 3
71984: PUSH
71985: EMPTY
71986: LIST
71987: LIST
71988: LIST
71989: LIST
71990: PPUSH
71991: CALL_OW 69
71995: PUSH
71996: LD_INT 0
71998: EQUAL
71999: IFFALSE 72039
// begin PlaceUnitArea ( unit , area , mode ) ;
72001: LD_VAR 0 1
72005: PPUSH
72006: LD_VAR 0 2
72010: PPUSH
72011: LD_VAR 0 3
72015: PPUSH
72016: CALL_OW 49
// result := IsPlaced ( unit ) ;
72020: LD_ADDR_VAR 0 4
72024: PUSH
72025: LD_VAR 0 1
72029: PPUSH
72030: CALL_OW 305
72034: ST_TO_ADDR
// exit ;
72035: POP
72036: POP
72037: GO 72043
// end ; end ;
72039: GO 71919
72041: POP
72042: POP
// end ;
72043: LD_VAR 0 4
72047: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
72048: LD_INT 0
72050: PPUSH
72051: PPUSH
72052: PPUSH
// if not side or side > 8 then
72053: LD_VAR 0 1
72057: NOT
72058: PUSH
72059: LD_VAR 0 1
72063: PUSH
72064: LD_INT 8
72066: GREATER
72067: OR
72068: IFFALSE 72072
// exit ;
72070: GO 72259
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
72072: LD_ADDR_VAR 0 4
72076: PUSH
72077: LD_INT 22
72079: PUSH
72080: LD_VAR 0 1
72084: PUSH
72085: EMPTY
72086: LIST
72087: LIST
72088: PUSH
72089: LD_INT 21
72091: PUSH
72092: LD_INT 3
72094: PUSH
72095: EMPTY
72096: LIST
72097: LIST
72098: PUSH
72099: EMPTY
72100: LIST
72101: LIST
72102: PPUSH
72103: CALL_OW 69
72107: ST_TO_ADDR
// if not tmp then
72108: LD_VAR 0 4
72112: NOT
72113: IFFALSE 72117
// exit ;
72115: GO 72259
// enable_addtolog := true ;
72117: LD_ADDR_OWVAR 81
72121: PUSH
72122: LD_INT 1
72124: ST_TO_ADDR
// AddToLog ( [ ) ;
72125: LD_STRING [
72127: PPUSH
72128: CALL_OW 561
// for i in tmp do
72132: LD_ADDR_VAR 0 3
72136: PUSH
72137: LD_VAR 0 4
72141: PUSH
72142: FOR_IN
72143: IFFALSE 72250
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
72145: LD_STRING [
72147: PUSH
72148: LD_VAR 0 3
72152: PPUSH
72153: CALL_OW 266
72157: STR
72158: PUSH
72159: LD_STRING , 
72161: STR
72162: PUSH
72163: LD_VAR 0 3
72167: PPUSH
72168: CALL_OW 250
72172: STR
72173: PUSH
72174: LD_STRING , 
72176: STR
72177: PUSH
72178: LD_VAR 0 3
72182: PPUSH
72183: CALL_OW 251
72187: STR
72188: PUSH
72189: LD_STRING , 
72191: STR
72192: PUSH
72193: LD_VAR 0 3
72197: PPUSH
72198: CALL_OW 254
72202: STR
72203: PUSH
72204: LD_STRING , 
72206: STR
72207: PUSH
72208: LD_VAR 0 3
72212: PPUSH
72213: LD_INT 1
72215: PPUSH
72216: CALL_OW 268
72220: STR
72221: PUSH
72222: LD_STRING , 
72224: STR
72225: PUSH
72226: LD_VAR 0 3
72230: PPUSH
72231: LD_INT 2
72233: PPUSH
72234: CALL_OW 268
72238: STR
72239: PUSH
72240: LD_STRING ],
72242: STR
72243: PPUSH
72244: CALL_OW 561
// end ;
72248: GO 72142
72250: POP
72251: POP
// AddToLog ( ]; ) ;
72252: LD_STRING ];
72254: PPUSH
72255: CALL_OW 561
// end ;
72259: LD_VAR 0 2
72263: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
72264: LD_INT 0
72266: PPUSH
72267: PPUSH
72268: PPUSH
72269: PPUSH
72270: PPUSH
// if not area or not rate or not max then
72271: LD_VAR 0 1
72275: NOT
72276: PUSH
72277: LD_VAR 0 2
72281: NOT
72282: OR
72283: PUSH
72284: LD_VAR 0 4
72288: NOT
72289: OR
72290: IFFALSE 72294
// exit ;
72292: GO 72483
// while 1 do
72294: LD_INT 1
72296: IFFALSE 72483
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
72298: LD_ADDR_VAR 0 9
72302: PUSH
72303: LD_VAR 0 1
72307: PPUSH
72308: LD_INT 1
72310: PPUSH
72311: CALL_OW 287
72315: PUSH
72316: LD_INT 10
72318: MUL
72319: ST_TO_ADDR
// r := rate / 10 ;
72320: LD_ADDR_VAR 0 7
72324: PUSH
72325: LD_VAR 0 2
72329: PUSH
72330: LD_INT 10
72332: DIVREAL
72333: ST_TO_ADDR
// time := 1 1$00 ;
72334: LD_ADDR_VAR 0 8
72338: PUSH
72339: LD_INT 2100
72341: ST_TO_ADDR
// if amount < min then
72342: LD_VAR 0 9
72346: PUSH
72347: LD_VAR 0 3
72351: LESS
72352: IFFALSE 72370
// r := r * 2 else
72354: LD_ADDR_VAR 0 7
72358: PUSH
72359: LD_VAR 0 7
72363: PUSH
72364: LD_INT 2
72366: MUL
72367: ST_TO_ADDR
72368: GO 72396
// if amount > max then
72370: LD_VAR 0 9
72374: PUSH
72375: LD_VAR 0 4
72379: GREATER
72380: IFFALSE 72396
// r := r / 2 ;
72382: LD_ADDR_VAR 0 7
72386: PUSH
72387: LD_VAR 0 7
72391: PUSH
72392: LD_INT 2
72394: DIVREAL
72395: ST_TO_ADDR
// time := time / r ;
72396: LD_ADDR_VAR 0 8
72400: PUSH
72401: LD_VAR 0 8
72405: PUSH
72406: LD_VAR 0 7
72410: DIVREAL
72411: ST_TO_ADDR
// if time < 0 then
72412: LD_VAR 0 8
72416: PUSH
72417: LD_INT 0
72419: LESS
72420: IFFALSE 72437
// time := time * - 1 ;
72422: LD_ADDR_VAR 0 8
72426: PUSH
72427: LD_VAR 0 8
72431: PUSH
72432: LD_INT 1
72434: NEG
72435: MUL
72436: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
72437: LD_VAR 0 8
72441: PUSH
72442: LD_INT 35
72444: PPUSH
72445: LD_INT 875
72447: PPUSH
72448: CALL_OW 12
72452: PLUS
72453: PPUSH
72454: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
72458: LD_INT 1
72460: PPUSH
72461: LD_INT 5
72463: PPUSH
72464: CALL_OW 12
72468: PPUSH
72469: LD_VAR 0 1
72473: PPUSH
72474: LD_INT 1
72476: PPUSH
72477: CALL_OW 55
// end ;
72481: GO 72294
// end ;
72483: LD_VAR 0 5
72487: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
72488: LD_INT 0
72490: PPUSH
72491: PPUSH
72492: PPUSH
72493: PPUSH
72494: PPUSH
72495: PPUSH
72496: PPUSH
72497: PPUSH
// if not turrets or not factories then
72498: LD_VAR 0 1
72502: NOT
72503: PUSH
72504: LD_VAR 0 2
72508: NOT
72509: OR
72510: IFFALSE 72514
// exit ;
72512: GO 72821
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
72514: LD_ADDR_VAR 0 10
72518: PUSH
72519: LD_INT 5
72521: PUSH
72522: LD_INT 6
72524: PUSH
72525: EMPTY
72526: LIST
72527: LIST
72528: PUSH
72529: LD_INT 2
72531: PUSH
72532: LD_INT 4
72534: PUSH
72535: EMPTY
72536: LIST
72537: LIST
72538: PUSH
72539: LD_INT 3
72541: PUSH
72542: LD_INT 5
72544: PUSH
72545: EMPTY
72546: LIST
72547: LIST
72548: PUSH
72549: EMPTY
72550: LIST
72551: LIST
72552: LIST
72553: PUSH
72554: LD_INT 24
72556: PUSH
72557: LD_INT 25
72559: PUSH
72560: EMPTY
72561: LIST
72562: LIST
72563: PUSH
72564: LD_INT 23
72566: PUSH
72567: LD_INT 27
72569: PUSH
72570: EMPTY
72571: LIST
72572: LIST
72573: PUSH
72574: EMPTY
72575: LIST
72576: LIST
72577: PUSH
72578: LD_INT 42
72580: PUSH
72581: LD_INT 43
72583: PUSH
72584: EMPTY
72585: LIST
72586: LIST
72587: PUSH
72588: LD_INT 44
72590: PUSH
72591: LD_INT 46
72593: PUSH
72594: EMPTY
72595: LIST
72596: LIST
72597: PUSH
72598: LD_INT 45
72600: PUSH
72601: LD_INT 47
72603: PUSH
72604: EMPTY
72605: LIST
72606: LIST
72607: PUSH
72608: EMPTY
72609: LIST
72610: LIST
72611: LIST
72612: PUSH
72613: EMPTY
72614: LIST
72615: LIST
72616: LIST
72617: ST_TO_ADDR
// result := [ ] ;
72618: LD_ADDR_VAR 0 3
72622: PUSH
72623: EMPTY
72624: ST_TO_ADDR
// for i in turrets do
72625: LD_ADDR_VAR 0 4
72629: PUSH
72630: LD_VAR 0 1
72634: PUSH
72635: FOR_IN
72636: IFFALSE 72819
// begin nat := GetNation ( i ) ;
72638: LD_ADDR_VAR 0 7
72642: PUSH
72643: LD_VAR 0 4
72647: PPUSH
72648: CALL_OW 248
72652: ST_TO_ADDR
// weapon := 0 ;
72653: LD_ADDR_VAR 0 8
72657: PUSH
72658: LD_INT 0
72660: ST_TO_ADDR
// if not nat then
72661: LD_VAR 0 7
72665: NOT
72666: IFFALSE 72670
// continue ;
72668: GO 72635
// for j in list [ nat ] do
72670: LD_ADDR_VAR 0 5
72674: PUSH
72675: LD_VAR 0 10
72679: PUSH
72680: LD_VAR 0 7
72684: ARRAY
72685: PUSH
72686: FOR_IN
72687: IFFALSE 72728
// if GetBWeapon ( i ) = j [ 1 ] then
72689: LD_VAR 0 4
72693: PPUSH
72694: CALL_OW 269
72698: PUSH
72699: LD_VAR 0 5
72703: PUSH
72704: LD_INT 1
72706: ARRAY
72707: EQUAL
72708: IFFALSE 72726
// begin weapon := j [ 2 ] ;
72710: LD_ADDR_VAR 0 8
72714: PUSH
72715: LD_VAR 0 5
72719: PUSH
72720: LD_INT 2
72722: ARRAY
72723: ST_TO_ADDR
// break ;
72724: GO 72728
// end ;
72726: GO 72686
72728: POP
72729: POP
// if not weapon then
72730: LD_VAR 0 8
72734: NOT
72735: IFFALSE 72739
// continue ;
72737: GO 72635
// for k in factories do
72739: LD_ADDR_VAR 0 6
72743: PUSH
72744: LD_VAR 0 2
72748: PUSH
72749: FOR_IN
72750: IFFALSE 72815
// begin weapons := AvailableWeaponList ( k ) ;
72752: LD_ADDR_VAR 0 9
72756: PUSH
72757: LD_VAR 0 6
72761: PPUSH
72762: CALL_OW 478
72766: ST_TO_ADDR
// if not weapons then
72767: LD_VAR 0 9
72771: NOT
72772: IFFALSE 72776
// continue ;
72774: GO 72749
// if weapon in weapons then
72776: LD_VAR 0 8
72780: PUSH
72781: LD_VAR 0 9
72785: IN
72786: IFFALSE 72813
// begin result := [ i , weapon ] ;
72788: LD_ADDR_VAR 0 3
72792: PUSH
72793: LD_VAR 0 4
72797: PUSH
72798: LD_VAR 0 8
72802: PUSH
72803: EMPTY
72804: LIST
72805: LIST
72806: ST_TO_ADDR
// exit ;
72807: POP
72808: POP
72809: POP
72810: POP
72811: GO 72821
// end ; end ;
72813: GO 72749
72815: POP
72816: POP
// end ;
72817: GO 72635
72819: POP
72820: POP
// end ;
72821: LD_VAR 0 3
72825: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
72826: LD_INT 0
72828: PPUSH
// if not side or side > 8 then
72829: LD_VAR 0 3
72833: NOT
72834: PUSH
72835: LD_VAR 0 3
72839: PUSH
72840: LD_INT 8
72842: GREATER
72843: OR
72844: IFFALSE 72848
// exit ;
72846: GO 72907
// if not range then
72848: LD_VAR 0 4
72852: NOT
72853: IFFALSE 72864
// range := - 12 ;
72855: LD_ADDR_VAR 0 4
72859: PUSH
72860: LD_INT 12
72862: NEG
72863: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
72864: LD_VAR 0 1
72868: PPUSH
72869: LD_VAR 0 2
72873: PPUSH
72874: LD_VAR 0 3
72878: PPUSH
72879: LD_VAR 0 4
72883: PPUSH
72884: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
72888: LD_VAR 0 1
72892: PPUSH
72893: LD_VAR 0 2
72897: PPUSH
72898: LD_VAR 0 3
72902: PPUSH
72903: CALL_OW 331
// end ;
72907: LD_VAR 0 5
72911: RET
// export function Video ( mode ) ; begin
72912: LD_INT 0
72914: PPUSH
// ingame_video = mode ;
72915: LD_ADDR_OWVAR 52
72919: PUSH
72920: LD_VAR 0 1
72924: ST_TO_ADDR
// interface_hidden = mode ;
72925: LD_ADDR_OWVAR 54
72929: PUSH
72930: LD_VAR 0 1
72934: ST_TO_ADDR
// end ;
72935: LD_VAR 0 2
72939: RET
// export function Join ( array , element ) ; begin
72940: LD_INT 0
72942: PPUSH
// result := Replace ( array , array + 1 , element ) ;
72943: LD_ADDR_VAR 0 3
72947: PUSH
72948: LD_VAR 0 1
72952: PPUSH
72953: LD_VAR 0 1
72957: PUSH
72958: LD_INT 1
72960: PLUS
72961: PPUSH
72962: LD_VAR 0 2
72966: PPUSH
72967: CALL_OW 1
72971: ST_TO_ADDR
// end ;
72972: LD_VAR 0 3
72976: RET
// export function JoinUnion ( array , element ) ; begin
72977: LD_INT 0
72979: PPUSH
// result := array union element ;
72980: LD_ADDR_VAR 0 3
72984: PUSH
72985: LD_VAR 0 1
72989: PUSH
72990: LD_VAR 0 2
72994: UNION
72995: ST_TO_ADDR
// end ;
72996: LD_VAR 0 3
73000: RET
// export function GetBehemoths ( side ) ; begin
73001: LD_INT 0
73003: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
73004: LD_ADDR_VAR 0 2
73008: PUSH
73009: LD_INT 22
73011: PUSH
73012: LD_VAR 0 1
73016: PUSH
73017: EMPTY
73018: LIST
73019: LIST
73020: PUSH
73021: LD_INT 31
73023: PUSH
73024: LD_INT 25
73026: PUSH
73027: EMPTY
73028: LIST
73029: LIST
73030: PUSH
73031: EMPTY
73032: LIST
73033: LIST
73034: PPUSH
73035: CALL_OW 69
73039: ST_TO_ADDR
// end ;
73040: LD_VAR 0 2
73044: RET
// export function Shuffle ( array ) ; var i , index ; begin
73045: LD_INT 0
73047: PPUSH
73048: PPUSH
73049: PPUSH
// result := [ ] ;
73050: LD_ADDR_VAR 0 2
73054: PUSH
73055: EMPTY
73056: ST_TO_ADDR
// if not array then
73057: LD_VAR 0 1
73061: NOT
73062: IFFALSE 73066
// exit ;
73064: GO 73165
// Randomize ;
73066: CALL_OW 10
// for i = array downto 1 do
73070: LD_ADDR_VAR 0 3
73074: PUSH
73075: DOUBLE
73076: LD_VAR 0 1
73080: INC
73081: ST_TO_ADDR
73082: LD_INT 1
73084: PUSH
73085: FOR_DOWNTO
73086: IFFALSE 73163
// begin index := rand ( 1 , array ) ;
73088: LD_ADDR_VAR 0 4
73092: PUSH
73093: LD_INT 1
73095: PPUSH
73096: LD_VAR 0 1
73100: PPUSH
73101: CALL_OW 12
73105: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
73106: LD_ADDR_VAR 0 2
73110: PUSH
73111: LD_VAR 0 2
73115: PPUSH
73116: LD_VAR 0 2
73120: PUSH
73121: LD_INT 1
73123: PLUS
73124: PPUSH
73125: LD_VAR 0 1
73129: PUSH
73130: LD_VAR 0 4
73134: ARRAY
73135: PPUSH
73136: CALL_OW 2
73140: ST_TO_ADDR
// array := Delete ( array , index ) ;
73141: LD_ADDR_VAR 0 1
73145: PUSH
73146: LD_VAR 0 1
73150: PPUSH
73151: LD_VAR 0 4
73155: PPUSH
73156: CALL_OW 3
73160: ST_TO_ADDR
// end ;
73161: GO 73085
73163: POP
73164: POP
// end ;
73165: LD_VAR 0 2
73169: RET
// export function GetBaseMaterials ( base ) ; begin
73170: LD_INT 0
73172: PPUSH
// result := [ 0 , 0 , 0 ] ;
73173: LD_ADDR_VAR 0 2
73177: PUSH
73178: LD_INT 0
73180: PUSH
73181: LD_INT 0
73183: PUSH
73184: LD_INT 0
73186: PUSH
73187: EMPTY
73188: LIST
73189: LIST
73190: LIST
73191: ST_TO_ADDR
// if not base then
73192: LD_VAR 0 1
73196: NOT
73197: IFFALSE 73201
// exit ;
73199: GO 73250
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
73201: LD_ADDR_VAR 0 2
73205: PUSH
73206: LD_VAR 0 1
73210: PPUSH
73211: LD_INT 1
73213: PPUSH
73214: CALL_OW 275
73218: PUSH
73219: LD_VAR 0 1
73223: PPUSH
73224: LD_INT 2
73226: PPUSH
73227: CALL_OW 275
73231: PUSH
73232: LD_VAR 0 1
73236: PPUSH
73237: LD_INT 3
73239: PPUSH
73240: CALL_OW 275
73244: PUSH
73245: EMPTY
73246: LIST
73247: LIST
73248: LIST
73249: ST_TO_ADDR
// end ;
73250: LD_VAR 0 2
73254: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
73255: LD_INT 0
73257: PPUSH
73258: PPUSH
// result := array ;
73259: LD_ADDR_VAR 0 3
73263: PUSH
73264: LD_VAR 0 1
73268: ST_TO_ADDR
// if size >= result then
73269: LD_VAR 0 2
73273: PUSH
73274: LD_VAR 0 3
73278: GREATEREQUAL
73279: IFFALSE 73283
// exit ;
73281: GO 73333
// if size then
73283: LD_VAR 0 2
73287: IFFALSE 73333
// for i := array downto size do
73289: LD_ADDR_VAR 0 4
73293: PUSH
73294: DOUBLE
73295: LD_VAR 0 1
73299: INC
73300: ST_TO_ADDR
73301: LD_VAR 0 2
73305: PUSH
73306: FOR_DOWNTO
73307: IFFALSE 73331
// result := Delete ( result , result ) ;
73309: LD_ADDR_VAR 0 3
73313: PUSH
73314: LD_VAR 0 3
73318: PPUSH
73319: LD_VAR 0 3
73323: PPUSH
73324: CALL_OW 3
73328: ST_TO_ADDR
73329: GO 73306
73331: POP
73332: POP
// end ;
73333: LD_VAR 0 3
73337: RET
// export function ComExit ( unit ) ; var tmp ; begin
73338: LD_INT 0
73340: PPUSH
73341: PPUSH
// if not IsInUnit ( unit ) then
73342: LD_VAR 0 1
73346: PPUSH
73347: CALL_OW 310
73351: NOT
73352: IFFALSE 73356
// exit ;
73354: GO 73416
// tmp := IsInUnit ( unit ) ;
73356: LD_ADDR_VAR 0 3
73360: PUSH
73361: LD_VAR 0 1
73365: PPUSH
73366: CALL_OW 310
73370: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
73371: LD_VAR 0 3
73375: PPUSH
73376: CALL_OW 247
73380: PUSH
73381: LD_INT 2
73383: EQUAL
73384: IFFALSE 73397
// ComExitVehicle ( unit ) else
73386: LD_VAR 0 1
73390: PPUSH
73391: CALL_OW 121
73395: GO 73406
// ComExitBuilding ( unit ) ;
73397: LD_VAR 0 1
73401: PPUSH
73402: CALL_OW 122
// result := tmp ;
73406: LD_ADDR_VAR 0 2
73410: PUSH
73411: LD_VAR 0 3
73415: ST_TO_ADDR
// end ;
73416: LD_VAR 0 2
73420: RET
// export function ComExitAll ( units ) ; var i ; begin
73421: LD_INT 0
73423: PPUSH
73424: PPUSH
// if not units then
73425: LD_VAR 0 1
73429: NOT
73430: IFFALSE 73434
// exit ;
73432: GO 73460
// for i in units do
73434: LD_ADDR_VAR 0 3
73438: PUSH
73439: LD_VAR 0 1
73443: PUSH
73444: FOR_IN
73445: IFFALSE 73458
// ComExit ( i ) ;
73447: LD_VAR 0 3
73451: PPUSH
73452: CALL 73338 0 1
73456: GO 73444
73458: POP
73459: POP
// end ;
73460: LD_VAR 0 2
73464: RET
// export function ResetHc ; begin
73465: LD_INT 0
73467: PPUSH
// InitHc ;
73468: CALL_OW 19
// hc_importance := 0 ;
73472: LD_ADDR_OWVAR 32
73476: PUSH
73477: LD_INT 0
73479: ST_TO_ADDR
// end ;
73480: LD_VAR 0 1
73484: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
73485: LD_INT 0
73487: PPUSH
73488: PPUSH
73489: PPUSH
// _x := ( x1 + x2 ) div 2 ;
73490: LD_ADDR_VAR 0 6
73494: PUSH
73495: LD_VAR 0 1
73499: PUSH
73500: LD_VAR 0 3
73504: PLUS
73505: PUSH
73506: LD_INT 2
73508: DIV
73509: ST_TO_ADDR
// if _x < 0 then
73510: LD_VAR 0 6
73514: PUSH
73515: LD_INT 0
73517: LESS
73518: IFFALSE 73535
// _x := _x * - 1 ;
73520: LD_ADDR_VAR 0 6
73524: PUSH
73525: LD_VAR 0 6
73529: PUSH
73530: LD_INT 1
73532: NEG
73533: MUL
73534: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
73535: LD_ADDR_VAR 0 7
73539: PUSH
73540: LD_VAR 0 2
73544: PUSH
73545: LD_VAR 0 4
73549: PLUS
73550: PUSH
73551: LD_INT 2
73553: DIV
73554: ST_TO_ADDR
// if _y < 0 then
73555: LD_VAR 0 7
73559: PUSH
73560: LD_INT 0
73562: LESS
73563: IFFALSE 73580
// _y := _y * - 1 ;
73565: LD_ADDR_VAR 0 7
73569: PUSH
73570: LD_VAR 0 7
73574: PUSH
73575: LD_INT 1
73577: NEG
73578: MUL
73579: ST_TO_ADDR
// result := [ _x , _y ] ;
73580: LD_ADDR_VAR 0 5
73584: PUSH
73585: LD_VAR 0 6
73589: PUSH
73590: LD_VAR 0 7
73594: PUSH
73595: EMPTY
73596: LIST
73597: LIST
73598: ST_TO_ADDR
// end ;
73599: LD_VAR 0 5
73603: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
73604: LD_INT 0
73606: PPUSH
73607: PPUSH
73608: PPUSH
73609: PPUSH
// task := GetTaskList ( unit ) ;
73610: LD_ADDR_VAR 0 7
73614: PUSH
73615: LD_VAR 0 1
73619: PPUSH
73620: CALL_OW 437
73624: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
73625: LD_VAR 0 7
73629: NOT
73630: PUSH
73631: LD_VAR 0 1
73635: PPUSH
73636: LD_VAR 0 2
73640: PPUSH
73641: CALL_OW 308
73645: NOT
73646: AND
73647: IFFALSE 73651
// exit ;
73649: GO 73769
// if IsInArea ( unit , area ) then
73651: LD_VAR 0 1
73655: PPUSH
73656: LD_VAR 0 2
73660: PPUSH
73661: CALL_OW 308
73665: IFFALSE 73683
// begin ComMoveToArea ( unit , goAway ) ;
73667: LD_VAR 0 1
73671: PPUSH
73672: LD_VAR 0 3
73676: PPUSH
73677: CALL_OW 113
// exit ;
73681: GO 73769
// end ; if task [ 1 ] [ 1 ] <> M then
73683: LD_VAR 0 7
73687: PUSH
73688: LD_INT 1
73690: ARRAY
73691: PUSH
73692: LD_INT 1
73694: ARRAY
73695: PUSH
73696: LD_STRING M
73698: NONEQUAL
73699: IFFALSE 73703
// exit ;
73701: GO 73769
// x := task [ 1 ] [ 2 ] ;
73703: LD_ADDR_VAR 0 5
73707: PUSH
73708: LD_VAR 0 7
73712: PUSH
73713: LD_INT 1
73715: ARRAY
73716: PUSH
73717: LD_INT 2
73719: ARRAY
73720: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
73721: LD_ADDR_VAR 0 6
73725: PUSH
73726: LD_VAR 0 7
73730: PUSH
73731: LD_INT 1
73733: ARRAY
73734: PUSH
73735: LD_INT 3
73737: ARRAY
73738: ST_TO_ADDR
// if InArea ( x , y , area ) then
73739: LD_VAR 0 5
73743: PPUSH
73744: LD_VAR 0 6
73748: PPUSH
73749: LD_VAR 0 2
73753: PPUSH
73754: CALL_OW 309
73758: IFFALSE 73769
// ComStop ( unit ) ;
73760: LD_VAR 0 1
73764: PPUSH
73765: CALL_OW 141
// end ;
73769: LD_VAR 0 4
73773: RET
// export function Abs ( value ) ; begin
73774: LD_INT 0
73776: PPUSH
// result := value ;
73777: LD_ADDR_VAR 0 2
73781: PUSH
73782: LD_VAR 0 1
73786: ST_TO_ADDR
// if value < 0 then
73787: LD_VAR 0 1
73791: PUSH
73792: LD_INT 0
73794: LESS
73795: IFFALSE 73812
// result := value * - 1 ;
73797: LD_ADDR_VAR 0 2
73801: PUSH
73802: LD_VAR 0 1
73806: PUSH
73807: LD_INT 1
73809: NEG
73810: MUL
73811: ST_TO_ADDR
// end ;
73812: LD_VAR 0 2
73816: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
73817: LD_INT 0
73819: PPUSH
73820: PPUSH
73821: PPUSH
73822: PPUSH
73823: PPUSH
73824: PPUSH
73825: PPUSH
73826: PPUSH
// if not unit or not building then
73827: LD_VAR 0 1
73831: NOT
73832: PUSH
73833: LD_VAR 0 2
73837: NOT
73838: OR
73839: IFFALSE 73843
// exit ;
73841: GO 74069
// x := GetX ( building ) ;
73843: LD_ADDR_VAR 0 4
73847: PUSH
73848: LD_VAR 0 2
73852: PPUSH
73853: CALL_OW 250
73857: ST_TO_ADDR
// y := GetY ( building ) ;
73858: LD_ADDR_VAR 0 6
73862: PUSH
73863: LD_VAR 0 2
73867: PPUSH
73868: CALL_OW 251
73872: ST_TO_ADDR
// d := GetDir ( building ) ;
73873: LD_ADDR_VAR 0 8
73877: PUSH
73878: LD_VAR 0 2
73882: PPUSH
73883: CALL_OW 254
73887: ST_TO_ADDR
// r := 4 ;
73888: LD_ADDR_VAR 0 9
73892: PUSH
73893: LD_INT 4
73895: ST_TO_ADDR
// for i := 1 to 5 do
73896: LD_ADDR_VAR 0 10
73900: PUSH
73901: DOUBLE
73902: LD_INT 1
73904: DEC
73905: ST_TO_ADDR
73906: LD_INT 5
73908: PUSH
73909: FOR_TO
73910: IFFALSE 74067
// begin _x := ShiftX ( x , d , r + i ) ;
73912: LD_ADDR_VAR 0 5
73916: PUSH
73917: LD_VAR 0 4
73921: PPUSH
73922: LD_VAR 0 8
73926: PPUSH
73927: LD_VAR 0 9
73931: PUSH
73932: LD_VAR 0 10
73936: PLUS
73937: PPUSH
73938: CALL_OW 272
73942: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
73943: LD_ADDR_VAR 0 7
73947: PUSH
73948: LD_VAR 0 6
73952: PPUSH
73953: LD_VAR 0 8
73957: PPUSH
73958: LD_VAR 0 9
73962: PUSH
73963: LD_VAR 0 10
73967: PLUS
73968: PPUSH
73969: CALL_OW 273
73973: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
73974: LD_VAR 0 5
73978: PPUSH
73979: LD_VAR 0 7
73983: PPUSH
73984: CALL_OW 488
73988: PUSH
73989: LD_VAR 0 5
73993: PPUSH
73994: LD_VAR 0 7
73998: PPUSH
73999: CALL_OW 428
74003: PPUSH
74004: CALL_OW 247
74008: PUSH
74009: LD_INT 3
74011: PUSH
74012: LD_INT 2
74014: PUSH
74015: EMPTY
74016: LIST
74017: LIST
74018: IN
74019: NOT
74020: AND
74021: IFFALSE 74065
// begin ComMoveXY ( unit , _x , _y ) ;
74023: LD_VAR 0 1
74027: PPUSH
74028: LD_VAR 0 5
74032: PPUSH
74033: LD_VAR 0 7
74037: PPUSH
74038: CALL_OW 111
// result := [ _x , _y ] ;
74042: LD_ADDR_VAR 0 3
74046: PUSH
74047: LD_VAR 0 5
74051: PUSH
74052: LD_VAR 0 7
74056: PUSH
74057: EMPTY
74058: LIST
74059: LIST
74060: ST_TO_ADDR
// exit ;
74061: POP
74062: POP
74063: GO 74069
// end ; end ;
74065: GO 73909
74067: POP
74068: POP
// end ;
74069: LD_VAR 0 3
74073: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
74074: LD_INT 0
74076: PPUSH
74077: PPUSH
74078: PPUSH
// result := 0 ;
74079: LD_ADDR_VAR 0 3
74083: PUSH
74084: LD_INT 0
74086: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
74087: LD_VAR 0 1
74091: PUSH
74092: LD_INT 0
74094: LESS
74095: PUSH
74096: LD_VAR 0 1
74100: PUSH
74101: LD_INT 8
74103: GREATER
74104: OR
74105: PUSH
74106: LD_VAR 0 2
74110: PUSH
74111: LD_INT 0
74113: LESS
74114: OR
74115: PUSH
74116: LD_VAR 0 2
74120: PUSH
74121: LD_INT 8
74123: GREATER
74124: OR
74125: IFFALSE 74129
// exit ;
74127: GO 74204
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
74129: LD_ADDR_VAR 0 4
74133: PUSH
74134: LD_INT 22
74136: PUSH
74137: LD_VAR 0 2
74141: PUSH
74142: EMPTY
74143: LIST
74144: LIST
74145: PPUSH
74146: CALL_OW 69
74150: PUSH
74151: FOR_IN
74152: IFFALSE 74202
// begin un := UnitShoot ( i ) ;
74154: LD_ADDR_VAR 0 5
74158: PUSH
74159: LD_VAR 0 4
74163: PPUSH
74164: CALL_OW 504
74168: ST_TO_ADDR
// if GetSide ( un ) = side1 then
74169: LD_VAR 0 5
74173: PPUSH
74174: CALL_OW 255
74178: PUSH
74179: LD_VAR 0 1
74183: EQUAL
74184: IFFALSE 74200
// begin result := un ;
74186: LD_ADDR_VAR 0 3
74190: PUSH
74191: LD_VAR 0 5
74195: ST_TO_ADDR
// exit ;
74196: POP
74197: POP
74198: GO 74204
// end ; end ;
74200: GO 74151
74202: POP
74203: POP
// end ;
74204: LD_VAR 0 3
74208: RET
// export function GetCargoBay ( units ) ; begin
74209: LD_INT 0
74211: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
74212: LD_ADDR_VAR 0 2
74216: PUSH
74217: LD_VAR 0 1
74221: PPUSH
74222: LD_INT 2
74224: PUSH
74225: LD_INT 34
74227: PUSH
74228: LD_INT 12
74230: PUSH
74231: EMPTY
74232: LIST
74233: LIST
74234: PUSH
74235: LD_INT 34
74237: PUSH
74238: LD_INT 51
74240: PUSH
74241: EMPTY
74242: LIST
74243: LIST
74244: PUSH
74245: LD_INT 34
74247: PUSH
74248: LD_INT 32
74250: PUSH
74251: EMPTY
74252: LIST
74253: LIST
74254: PUSH
74255: LD_INT 34
74257: PUSH
74258: LD_INT 89
74260: PUSH
74261: EMPTY
74262: LIST
74263: LIST
74264: PUSH
74265: EMPTY
74266: LIST
74267: LIST
74268: LIST
74269: LIST
74270: LIST
74271: PPUSH
74272: CALL_OW 72
74276: ST_TO_ADDR
// end ;
74277: LD_VAR 0 2
74281: RET
// export function Negate ( value ) ; begin
74282: LD_INT 0
74284: PPUSH
// result := not value ;
74285: LD_ADDR_VAR 0 2
74289: PUSH
74290: LD_VAR 0 1
74294: NOT
74295: ST_TO_ADDR
// end ;
74296: LD_VAR 0 2
74300: RET
// export function Inc ( value ) ; begin
74301: LD_INT 0
74303: PPUSH
// result := value + 1 ;
74304: LD_ADDR_VAR 0 2
74308: PUSH
74309: LD_VAR 0 1
74313: PUSH
74314: LD_INT 1
74316: PLUS
74317: ST_TO_ADDR
// end ;
74318: LD_VAR 0 2
74322: RET
// export function Dec ( value ) ; begin
74323: LD_INT 0
74325: PPUSH
// result := value - 1 ;
74326: LD_ADDR_VAR 0 2
74330: PUSH
74331: LD_VAR 0 1
74335: PUSH
74336: LD_INT 1
74338: MINUS
74339: ST_TO_ADDR
// end ;
74340: LD_VAR 0 2
74344: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
74345: LD_INT 0
74347: PPUSH
74348: PPUSH
74349: PPUSH
74350: PPUSH
74351: PPUSH
74352: PPUSH
74353: PPUSH
74354: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
74355: LD_VAR 0 1
74359: PPUSH
74360: LD_VAR 0 2
74364: PPUSH
74365: CALL_OW 488
74369: NOT
74370: PUSH
74371: LD_VAR 0 3
74375: PPUSH
74376: LD_VAR 0 4
74380: PPUSH
74381: CALL_OW 488
74385: NOT
74386: OR
74387: IFFALSE 74400
// begin result := - 1 ;
74389: LD_ADDR_VAR 0 5
74393: PUSH
74394: LD_INT 1
74396: NEG
74397: ST_TO_ADDR
// exit ;
74398: GO 74635
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
74400: LD_ADDR_VAR 0 12
74404: PUSH
74405: LD_VAR 0 1
74409: PPUSH
74410: LD_VAR 0 2
74414: PPUSH
74415: LD_VAR 0 3
74419: PPUSH
74420: LD_VAR 0 4
74424: PPUSH
74425: CALL 73485 0 4
74429: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
74430: LD_ADDR_VAR 0 11
74434: PUSH
74435: LD_VAR 0 1
74439: PPUSH
74440: LD_VAR 0 2
74444: PPUSH
74445: LD_VAR 0 12
74449: PUSH
74450: LD_INT 1
74452: ARRAY
74453: PPUSH
74454: LD_VAR 0 12
74458: PUSH
74459: LD_INT 2
74461: ARRAY
74462: PPUSH
74463: CALL_OW 298
74467: ST_TO_ADDR
// distance := 9999 ;
74468: LD_ADDR_VAR 0 10
74472: PUSH
74473: LD_INT 9999
74475: ST_TO_ADDR
// for i := 0 to 5 do
74476: LD_ADDR_VAR 0 6
74480: PUSH
74481: DOUBLE
74482: LD_INT 0
74484: DEC
74485: ST_TO_ADDR
74486: LD_INT 5
74488: PUSH
74489: FOR_TO
74490: IFFALSE 74633
// begin _x := ShiftX ( x1 , i , centerDist ) ;
74492: LD_ADDR_VAR 0 7
74496: PUSH
74497: LD_VAR 0 1
74501: PPUSH
74502: LD_VAR 0 6
74506: PPUSH
74507: LD_VAR 0 11
74511: PPUSH
74512: CALL_OW 272
74516: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
74517: LD_ADDR_VAR 0 8
74521: PUSH
74522: LD_VAR 0 2
74526: PPUSH
74527: LD_VAR 0 6
74531: PPUSH
74532: LD_VAR 0 11
74536: PPUSH
74537: CALL_OW 273
74541: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
74542: LD_VAR 0 7
74546: PPUSH
74547: LD_VAR 0 8
74551: PPUSH
74552: CALL_OW 488
74556: NOT
74557: IFFALSE 74561
// continue ;
74559: GO 74489
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
74561: LD_ADDR_VAR 0 9
74565: PUSH
74566: LD_VAR 0 12
74570: PUSH
74571: LD_INT 1
74573: ARRAY
74574: PPUSH
74575: LD_VAR 0 12
74579: PUSH
74580: LD_INT 2
74582: ARRAY
74583: PPUSH
74584: LD_VAR 0 7
74588: PPUSH
74589: LD_VAR 0 8
74593: PPUSH
74594: CALL_OW 298
74598: ST_TO_ADDR
// if tmp < distance then
74599: LD_VAR 0 9
74603: PUSH
74604: LD_VAR 0 10
74608: LESS
74609: IFFALSE 74631
// begin result := i ;
74611: LD_ADDR_VAR 0 5
74615: PUSH
74616: LD_VAR 0 6
74620: ST_TO_ADDR
// distance := tmp ;
74621: LD_ADDR_VAR 0 10
74625: PUSH
74626: LD_VAR 0 9
74630: ST_TO_ADDR
// end ; end ;
74631: GO 74489
74633: POP
74634: POP
// end ;
74635: LD_VAR 0 5
74639: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74640: LD_INT 0
74642: PPUSH
74643: PPUSH
// if not driver or not IsInUnit ( driver ) then
74644: LD_VAR 0 1
74648: NOT
74649: PUSH
74650: LD_VAR 0 1
74654: PPUSH
74655: CALL_OW 310
74659: NOT
74660: OR
74661: IFFALSE 74665
// exit ;
74663: GO 74755
// vehicle := IsInUnit ( driver ) ;
74665: LD_ADDR_VAR 0 3
74669: PUSH
74670: LD_VAR 0 1
74674: PPUSH
74675: CALL_OW 310
74679: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74680: LD_VAR 0 1
74684: PPUSH
74685: LD_STRING \
74687: PUSH
74688: LD_INT 0
74690: PUSH
74691: LD_INT 0
74693: PUSH
74694: LD_INT 0
74696: PUSH
74697: LD_INT 0
74699: PUSH
74700: LD_INT 0
74702: PUSH
74703: LD_INT 0
74705: PUSH
74706: EMPTY
74707: LIST
74708: LIST
74709: LIST
74710: LIST
74711: LIST
74712: LIST
74713: LIST
74714: PUSH
74715: LD_STRING E
74717: PUSH
74718: LD_INT 0
74720: PUSH
74721: LD_INT 0
74723: PUSH
74724: LD_VAR 0 3
74728: PUSH
74729: LD_INT 0
74731: PUSH
74732: LD_INT 0
74734: PUSH
74735: LD_INT 0
74737: PUSH
74738: EMPTY
74739: LIST
74740: LIST
74741: LIST
74742: LIST
74743: LIST
74744: LIST
74745: LIST
74746: PUSH
74747: EMPTY
74748: LIST
74749: LIST
74750: PPUSH
74751: CALL_OW 446
// end ;
74755: LD_VAR 0 2
74759: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74760: LD_INT 0
74762: PPUSH
74763: PPUSH
// if not driver or not IsInUnit ( driver ) then
74764: LD_VAR 0 1
74768: NOT
74769: PUSH
74770: LD_VAR 0 1
74774: PPUSH
74775: CALL_OW 310
74779: NOT
74780: OR
74781: IFFALSE 74785
// exit ;
74783: GO 74875
// vehicle := IsInUnit ( driver ) ;
74785: LD_ADDR_VAR 0 3
74789: PUSH
74790: LD_VAR 0 1
74794: PPUSH
74795: CALL_OW 310
74799: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74800: LD_VAR 0 1
74804: PPUSH
74805: LD_STRING \
74807: PUSH
74808: LD_INT 0
74810: PUSH
74811: LD_INT 0
74813: PUSH
74814: LD_INT 0
74816: PUSH
74817: LD_INT 0
74819: PUSH
74820: LD_INT 0
74822: PUSH
74823: LD_INT 0
74825: PUSH
74826: EMPTY
74827: LIST
74828: LIST
74829: LIST
74830: LIST
74831: LIST
74832: LIST
74833: LIST
74834: PUSH
74835: LD_STRING E
74837: PUSH
74838: LD_INT 0
74840: PUSH
74841: LD_INT 0
74843: PUSH
74844: LD_VAR 0 3
74848: PUSH
74849: LD_INT 0
74851: PUSH
74852: LD_INT 0
74854: PUSH
74855: LD_INT 0
74857: PUSH
74858: EMPTY
74859: LIST
74860: LIST
74861: LIST
74862: LIST
74863: LIST
74864: LIST
74865: LIST
74866: PUSH
74867: EMPTY
74868: LIST
74869: LIST
74870: PPUSH
74871: CALL_OW 447
// end ;
74875: LD_VAR 0 2
74879: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
74880: LD_INT 0
74882: PPUSH
74883: PPUSH
74884: PPUSH
// tmp := [ ] ;
74885: LD_ADDR_VAR 0 5
74889: PUSH
74890: EMPTY
74891: ST_TO_ADDR
// for i in units do
74892: LD_ADDR_VAR 0 4
74896: PUSH
74897: LD_VAR 0 1
74901: PUSH
74902: FOR_IN
74903: IFFALSE 74941
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
74905: LD_ADDR_VAR 0 5
74909: PUSH
74910: LD_VAR 0 5
74914: PPUSH
74915: LD_VAR 0 5
74919: PUSH
74920: LD_INT 1
74922: PLUS
74923: PPUSH
74924: LD_VAR 0 4
74928: PPUSH
74929: CALL_OW 256
74933: PPUSH
74934: CALL_OW 2
74938: ST_TO_ADDR
74939: GO 74902
74941: POP
74942: POP
// if not tmp then
74943: LD_VAR 0 5
74947: NOT
74948: IFFALSE 74952
// exit ;
74950: GO 75000
// if asc then
74952: LD_VAR 0 2
74956: IFFALSE 74980
// result := SortListByListAsc ( units , tmp ) else
74958: LD_ADDR_VAR 0 3
74962: PUSH
74963: LD_VAR 0 1
74967: PPUSH
74968: LD_VAR 0 5
74972: PPUSH
74973: CALL_OW 76
74977: ST_TO_ADDR
74978: GO 75000
// result := SortListByListDesc ( units , tmp ) ;
74980: LD_ADDR_VAR 0 3
74984: PUSH
74985: LD_VAR 0 1
74989: PPUSH
74990: LD_VAR 0 5
74994: PPUSH
74995: CALL_OW 77
74999: ST_TO_ADDR
// end ;
75000: LD_VAR 0 3
75004: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
75005: LD_INT 0
75007: PPUSH
75008: PPUSH
// task := GetTaskList ( mech ) ;
75009: LD_ADDR_VAR 0 4
75013: PUSH
75014: LD_VAR 0 1
75018: PPUSH
75019: CALL_OW 437
75023: ST_TO_ADDR
// if not task then
75024: LD_VAR 0 4
75028: NOT
75029: IFFALSE 75033
// exit ;
75031: GO 75075
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
75033: LD_ADDR_VAR 0 3
75037: PUSH
75038: LD_VAR 0 4
75042: PUSH
75043: LD_INT 1
75045: ARRAY
75046: PUSH
75047: LD_INT 1
75049: ARRAY
75050: PUSH
75051: LD_STRING r
75053: EQUAL
75054: PUSH
75055: LD_VAR 0 4
75059: PUSH
75060: LD_INT 1
75062: ARRAY
75063: PUSH
75064: LD_INT 4
75066: ARRAY
75067: PUSH
75068: LD_VAR 0 2
75072: EQUAL
75073: AND
75074: ST_TO_ADDR
// end ;
75075: LD_VAR 0 3
75079: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
75080: LD_INT 0
75082: PPUSH
// SetDir ( unit , d ) ;
75083: LD_VAR 0 1
75087: PPUSH
75088: LD_VAR 0 4
75092: PPUSH
75093: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
75097: LD_VAR 0 1
75101: PPUSH
75102: LD_VAR 0 2
75106: PPUSH
75107: LD_VAR 0 3
75111: PPUSH
75112: LD_VAR 0 5
75116: PPUSH
75117: CALL_OW 48
// end ;
75121: LD_VAR 0 6
75125: RET
// export function ToNaturalNumber ( number ) ; begin
75126: LD_INT 0
75128: PPUSH
// result := number div 1 ;
75129: LD_ADDR_VAR 0 2
75133: PUSH
75134: LD_VAR 0 1
75138: PUSH
75139: LD_INT 1
75141: DIV
75142: ST_TO_ADDR
// if number < 0 then
75143: LD_VAR 0 1
75147: PUSH
75148: LD_INT 0
75150: LESS
75151: IFFALSE 75161
// result := 0 ;
75153: LD_ADDR_VAR 0 2
75157: PUSH
75158: LD_INT 0
75160: ST_TO_ADDR
// end ;
75161: LD_VAR 0 2
75165: RET
// export function SortByClass ( units , class ) ; var un ; begin
75166: LD_INT 0
75168: PPUSH
75169: PPUSH
// if not units or not class then
75170: LD_VAR 0 1
75174: NOT
75175: PUSH
75176: LD_VAR 0 2
75180: NOT
75181: OR
75182: IFFALSE 75186
// exit ;
75184: GO 75281
// result := [ ] ;
75186: LD_ADDR_VAR 0 3
75190: PUSH
75191: EMPTY
75192: ST_TO_ADDR
// for un in units do
75193: LD_ADDR_VAR 0 4
75197: PUSH
75198: LD_VAR 0 1
75202: PUSH
75203: FOR_IN
75204: IFFALSE 75279
// if GetClass ( un ) = class then
75206: LD_VAR 0 4
75210: PPUSH
75211: CALL_OW 257
75215: PUSH
75216: LD_VAR 0 2
75220: EQUAL
75221: IFFALSE 75248
// result := Insert ( result , 1 , un ) else
75223: LD_ADDR_VAR 0 3
75227: PUSH
75228: LD_VAR 0 3
75232: PPUSH
75233: LD_INT 1
75235: PPUSH
75236: LD_VAR 0 4
75240: PPUSH
75241: CALL_OW 2
75245: ST_TO_ADDR
75246: GO 75277
// result := Replace ( result , result + 1 , un ) ;
75248: LD_ADDR_VAR 0 3
75252: PUSH
75253: LD_VAR 0 3
75257: PPUSH
75258: LD_VAR 0 3
75262: PUSH
75263: LD_INT 1
75265: PLUS
75266: PPUSH
75267: LD_VAR 0 4
75271: PPUSH
75272: CALL_OW 1
75276: ST_TO_ADDR
75277: GO 75203
75279: POP
75280: POP
// end ;
75281: LD_VAR 0 3
75285: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
75286: LD_INT 0
75288: PPUSH
75289: PPUSH
75290: PPUSH
75291: PPUSH
75292: PPUSH
75293: PPUSH
75294: PPUSH
// result := [ ] ;
75295: LD_ADDR_VAR 0 4
75299: PUSH
75300: EMPTY
75301: ST_TO_ADDR
// if x - r < 0 then
75302: LD_VAR 0 1
75306: PUSH
75307: LD_VAR 0 3
75311: MINUS
75312: PUSH
75313: LD_INT 0
75315: LESS
75316: IFFALSE 75328
// min_x := 0 else
75318: LD_ADDR_VAR 0 8
75322: PUSH
75323: LD_INT 0
75325: ST_TO_ADDR
75326: GO 75344
// min_x := x - r ;
75328: LD_ADDR_VAR 0 8
75332: PUSH
75333: LD_VAR 0 1
75337: PUSH
75338: LD_VAR 0 3
75342: MINUS
75343: ST_TO_ADDR
// if y - r < 0 then
75344: LD_VAR 0 2
75348: PUSH
75349: LD_VAR 0 3
75353: MINUS
75354: PUSH
75355: LD_INT 0
75357: LESS
75358: IFFALSE 75370
// min_y := 0 else
75360: LD_ADDR_VAR 0 7
75364: PUSH
75365: LD_INT 0
75367: ST_TO_ADDR
75368: GO 75386
// min_y := y - r ;
75370: LD_ADDR_VAR 0 7
75374: PUSH
75375: LD_VAR 0 2
75379: PUSH
75380: LD_VAR 0 3
75384: MINUS
75385: ST_TO_ADDR
// max_x := x + r ;
75386: LD_ADDR_VAR 0 9
75390: PUSH
75391: LD_VAR 0 1
75395: PUSH
75396: LD_VAR 0 3
75400: PLUS
75401: ST_TO_ADDR
// max_y := y + r ;
75402: LD_ADDR_VAR 0 10
75406: PUSH
75407: LD_VAR 0 2
75411: PUSH
75412: LD_VAR 0 3
75416: PLUS
75417: ST_TO_ADDR
// for _x = min_x to max_x do
75418: LD_ADDR_VAR 0 5
75422: PUSH
75423: DOUBLE
75424: LD_VAR 0 8
75428: DEC
75429: ST_TO_ADDR
75430: LD_VAR 0 9
75434: PUSH
75435: FOR_TO
75436: IFFALSE 75537
// for _y = min_y to max_y do
75438: LD_ADDR_VAR 0 6
75442: PUSH
75443: DOUBLE
75444: LD_VAR 0 7
75448: DEC
75449: ST_TO_ADDR
75450: LD_VAR 0 10
75454: PUSH
75455: FOR_TO
75456: IFFALSE 75533
// begin if not ValidHex ( _x , _y ) then
75458: LD_VAR 0 5
75462: PPUSH
75463: LD_VAR 0 6
75467: PPUSH
75468: CALL_OW 488
75472: NOT
75473: IFFALSE 75477
// continue ;
75475: GO 75455
// if GetResourceTypeXY ( _x , _y ) then
75477: LD_VAR 0 5
75481: PPUSH
75482: LD_VAR 0 6
75486: PPUSH
75487: CALL_OW 283
75491: IFFALSE 75531
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
75493: LD_ADDR_VAR 0 4
75497: PUSH
75498: LD_VAR 0 4
75502: PPUSH
75503: LD_VAR 0 4
75507: PUSH
75508: LD_INT 1
75510: PLUS
75511: PPUSH
75512: LD_VAR 0 5
75516: PUSH
75517: LD_VAR 0 6
75521: PUSH
75522: EMPTY
75523: LIST
75524: LIST
75525: PPUSH
75526: CALL_OW 1
75530: ST_TO_ADDR
// end ;
75531: GO 75455
75533: POP
75534: POP
75535: GO 75435
75537: POP
75538: POP
// end ;
75539: LD_VAR 0 4
75543: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
75544: LD_INT 0
75546: PPUSH
75547: PPUSH
75548: PPUSH
75549: PPUSH
75550: PPUSH
75551: PPUSH
75552: PPUSH
75553: PPUSH
// if not units then
75554: LD_VAR 0 1
75558: NOT
75559: IFFALSE 75563
// exit ;
75561: GO 76087
// result := UnitFilter ( units , [ f_ok ] ) ;
75563: LD_ADDR_VAR 0 3
75567: PUSH
75568: LD_VAR 0 1
75572: PPUSH
75573: LD_INT 50
75575: PUSH
75576: EMPTY
75577: LIST
75578: PPUSH
75579: CALL_OW 72
75583: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
75584: LD_ADDR_VAR 0 8
75588: PUSH
75589: LD_VAR 0 1
75593: PUSH
75594: LD_INT 1
75596: ARRAY
75597: PPUSH
75598: CALL_OW 255
75602: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
75603: LD_ADDR_VAR 0 10
75607: PUSH
75608: LD_INT 29
75610: PUSH
75611: LD_INT 91
75613: PUSH
75614: LD_INT 49
75616: PUSH
75617: EMPTY
75618: LIST
75619: LIST
75620: LIST
75621: ST_TO_ADDR
// if not result then
75622: LD_VAR 0 3
75626: NOT
75627: IFFALSE 75631
// exit ;
75629: GO 76087
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
75631: LD_ADDR_VAR 0 5
75635: PUSH
75636: LD_INT 81
75638: PUSH
75639: LD_VAR 0 8
75643: PUSH
75644: EMPTY
75645: LIST
75646: LIST
75647: PPUSH
75648: CALL_OW 69
75652: ST_TO_ADDR
// for i in result do
75653: LD_ADDR_VAR 0 4
75657: PUSH
75658: LD_VAR 0 3
75662: PUSH
75663: FOR_IN
75664: IFFALSE 76085
// begin tag := GetTag ( i ) + 1 ;
75666: LD_ADDR_VAR 0 9
75670: PUSH
75671: LD_VAR 0 4
75675: PPUSH
75676: CALL_OW 110
75680: PUSH
75681: LD_INT 1
75683: PLUS
75684: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
75685: LD_ADDR_VAR 0 7
75689: PUSH
75690: LD_VAR 0 4
75694: PPUSH
75695: CALL_OW 250
75699: PPUSH
75700: LD_VAR 0 4
75704: PPUSH
75705: CALL_OW 251
75709: PPUSH
75710: LD_INT 6
75712: PPUSH
75713: CALL 75286 0 3
75717: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
75718: LD_VAR 0 4
75722: PPUSH
75723: CALL_OW 247
75727: PUSH
75728: LD_INT 2
75730: EQUAL
75731: PUSH
75732: LD_VAR 0 7
75736: AND
75737: PUSH
75738: LD_VAR 0 4
75742: PPUSH
75743: CALL_OW 264
75747: PUSH
75748: LD_VAR 0 10
75752: IN
75753: NOT
75754: AND
75755: IFFALSE 75794
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
75757: LD_VAR 0 4
75761: PPUSH
75762: LD_VAR 0 7
75766: PUSH
75767: LD_INT 1
75769: ARRAY
75770: PUSH
75771: LD_INT 1
75773: ARRAY
75774: PPUSH
75775: LD_VAR 0 7
75779: PUSH
75780: LD_INT 1
75782: ARRAY
75783: PUSH
75784: LD_INT 2
75786: ARRAY
75787: PPUSH
75788: CALL_OW 116
75792: GO 76083
// if path > tag then
75794: LD_VAR 0 2
75798: PUSH
75799: LD_VAR 0 9
75803: GREATER
75804: IFFALSE 76012
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
75806: LD_ADDR_VAR 0 6
75810: PUSH
75811: LD_VAR 0 5
75815: PPUSH
75816: LD_INT 91
75818: PUSH
75819: LD_VAR 0 4
75823: PUSH
75824: LD_INT 8
75826: PUSH
75827: EMPTY
75828: LIST
75829: LIST
75830: LIST
75831: PPUSH
75832: CALL_OW 72
75836: ST_TO_ADDR
// if nearEnemy then
75837: LD_VAR 0 6
75841: IFFALSE 75910
// begin if GetWeapon ( i ) = ru_time_lapser then
75843: LD_VAR 0 4
75847: PPUSH
75848: CALL_OW 264
75852: PUSH
75853: LD_INT 49
75855: EQUAL
75856: IFFALSE 75884
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
75858: LD_VAR 0 4
75862: PPUSH
75863: LD_VAR 0 6
75867: PPUSH
75868: LD_VAR 0 4
75872: PPUSH
75873: CALL_OW 74
75877: PPUSH
75878: CALL_OW 112
75882: GO 75908
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
75884: LD_VAR 0 4
75888: PPUSH
75889: LD_VAR 0 6
75893: PPUSH
75894: LD_VAR 0 4
75898: PPUSH
75899: CALL_OW 74
75903: PPUSH
75904: CALL 77012 0 2
// end else
75908: GO 76010
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
75910: LD_VAR 0 4
75914: PPUSH
75915: LD_VAR 0 2
75919: PUSH
75920: LD_VAR 0 9
75924: ARRAY
75925: PUSH
75926: LD_INT 1
75928: ARRAY
75929: PPUSH
75930: LD_VAR 0 2
75934: PUSH
75935: LD_VAR 0 9
75939: ARRAY
75940: PUSH
75941: LD_INT 2
75943: ARRAY
75944: PPUSH
75945: CALL_OW 297
75949: PUSH
75950: LD_INT 6
75952: GREATER
75953: IFFALSE 75996
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
75955: LD_VAR 0 4
75959: PPUSH
75960: LD_VAR 0 2
75964: PUSH
75965: LD_VAR 0 9
75969: ARRAY
75970: PUSH
75971: LD_INT 1
75973: ARRAY
75974: PPUSH
75975: LD_VAR 0 2
75979: PUSH
75980: LD_VAR 0 9
75984: ARRAY
75985: PUSH
75986: LD_INT 2
75988: ARRAY
75989: PPUSH
75990: CALL_OW 114
75994: GO 76010
// SetTag ( i , tag ) ;
75996: LD_VAR 0 4
76000: PPUSH
76001: LD_VAR 0 9
76005: PPUSH
76006: CALL_OW 109
// end else
76010: GO 76083
// if enemy then
76012: LD_VAR 0 5
76016: IFFALSE 76083
// begin if GetWeapon ( i ) = ru_time_lapser then
76018: LD_VAR 0 4
76022: PPUSH
76023: CALL_OW 264
76027: PUSH
76028: LD_INT 49
76030: EQUAL
76031: IFFALSE 76059
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
76033: LD_VAR 0 4
76037: PPUSH
76038: LD_VAR 0 5
76042: PPUSH
76043: LD_VAR 0 4
76047: PPUSH
76048: CALL_OW 74
76052: PPUSH
76053: CALL_OW 112
76057: GO 76083
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
76059: LD_VAR 0 4
76063: PPUSH
76064: LD_VAR 0 5
76068: PPUSH
76069: LD_VAR 0 4
76073: PPUSH
76074: CALL_OW 74
76078: PPUSH
76079: CALL 77012 0 2
// end ; end ;
76083: GO 75663
76085: POP
76086: POP
// end ;
76087: LD_VAR 0 3
76091: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
76092: LD_INT 0
76094: PPUSH
76095: PPUSH
76096: PPUSH
// if not unit or IsInUnit ( unit ) then
76097: LD_VAR 0 1
76101: NOT
76102: PUSH
76103: LD_VAR 0 1
76107: PPUSH
76108: CALL_OW 310
76112: OR
76113: IFFALSE 76117
// exit ;
76115: GO 76208
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
76117: LD_ADDR_VAR 0 4
76121: PUSH
76122: LD_VAR 0 1
76126: PPUSH
76127: CALL_OW 250
76131: PPUSH
76132: LD_VAR 0 2
76136: PPUSH
76137: LD_INT 1
76139: PPUSH
76140: CALL_OW 272
76144: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
76145: LD_ADDR_VAR 0 5
76149: PUSH
76150: LD_VAR 0 1
76154: PPUSH
76155: CALL_OW 251
76159: PPUSH
76160: LD_VAR 0 2
76164: PPUSH
76165: LD_INT 1
76167: PPUSH
76168: CALL_OW 273
76172: ST_TO_ADDR
// if ValidHex ( x , y ) then
76173: LD_VAR 0 4
76177: PPUSH
76178: LD_VAR 0 5
76182: PPUSH
76183: CALL_OW 488
76187: IFFALSE 76208
// ComTurnXY ( unit , x , y ) ;
76189: LD_VAR 0 1
76193: PPUSH
76194: LD_VAR 0 4
76198: PPUSH
76199: LD_VAR 0 5
76203: PPUSH
76204: CALL_OW 118
// end ;
76208: LD_VAR 0 3
76212: RET
// export function SeeUnits ( side , units ) ; var i ; begin
76213: LD_INT 0
76215: PPUSH
76216: PPUSH
// result := false ;
76217: LD_ADDR_VAR 0 3
76221: PUSH
76222: LD_INT 0
76224: ST_TO_ADDR
// if not units then
76225: LD_VAR 0 2
76229: NOT
76230: IFFALSE 76234
// exit ;
76232: GO 76279
// for i in units do
76234: LD_ADDR_VAR 0 4
76238: PUSH
76239: LD_VAR 0 2
76243: PUSH
76244: FOR_IN
76245: IFFALSE 76277
// if See ( side , i ) then
76247: LD_VAR 0 1
76251: PPUSH
76252: LD_VAR 0 4
76256: PPUSH
76257: CALL_OW 292
76261: IFFALSE 76275
// begin result := true ;
76263: LD_ADDR_VAR 0 3
76267: PUSH
76268: LD_INT 1
76270: ST_TO_ADDR
// exit ;
76271: POP
76272: POP
76273: GO 76279
// end ;
76275: GO 76244
76277: POP
76278: POP
// end ;
76279: LD_VAR 0 3
76283: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
76284: LD_INT 0
76286: PPUSH
76287: PPUSH
76288: PPUSH
76289: PPUSH
// if not unit or not points then
76290: LD_VAR 0 1
76294: NOT
76295: PUSH
76296: LD_VAR 0 2
76300: NOT
76301: OR
76302: IFFALSE 76306
// exit ;
76304: GO 76396
// dist := 99999 ;
76306: LD_ADDR_VAR 0 5
76310: PUSH
76311: LD_INT 99999
76313: ST_TO_ADDR
// for i in points do
76314: LD_ADDR_VAR 0 4
76318: PUSH
76319: LD_VAR 0 2
76323: PUSH
76324: FOR_IN
76325: IFFALSE 76394
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
76327: LD_ADDR_VAR 0 6
76331: PUSH
76332: LD_VAR 0 1
76336: PPUSH
76337: LD_VAR 0 4
76341: PUSH
76342: LD_INT 1
76344: ARRAY
76345: PPUSH
76346: LD_VAR 0 4
76350: PUSH
76351: LD_INT 2
76353: ARRAY
76354: PPUSH
76355: CALL_OW 297
76359: ST_TO_ADDR
// if tmpDist < dist then
76360: LD_VAR 0 6
76364: PUSH
76365: LD_VAR 0 5
76369: LESS
76370: IFFALSE 76392
// begin result := i ;
76372: LD_ADDR_VAR 0 3
76376: PUSH
76377: LD_VAR 0 4
76381: ST_TO_ADDR
// dist := tmpDist ;
76382: LD_ADDR_VAR 0 5
76386: PUSH
76387: LD_VAR 0 6
76391: ST_TO_ADDR
// end ; end ;
76392: GO 76324
76394: POP
76395: POP
// end ;
76396: LD_VAR 0 3
76400: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
76401: LD_INT 0
76403: PPUSH
// uc_side := side ;
76404: LD_ADDR_OWVAR 20
76408: PUSH
76409: LD_VAR 0 1
76413: ST_TO_ADDR
// uc_nation := 3 ;
76414: LD_ADDR_OWVAR 21
76418: PUSH
76419: LD_INT 3
76421: ST_TO_ADDR
// vc_chassis := 25 ;
76422: LD_ADDR_OWVAR 37
76426: PUSH
76427: LD_INT 25
76429: ST_TO_ADDR
// vc_engine := engine_siberite ;
76430: LD_ADDR_OWVAR 39
76434: PUSH
76435: LD_INT 3
76437: ST_TO_ADDR
// vc_control := control_computer ;
76438: LD_ADDR_OWVAR 38
76442: PUSH
76443: LD_INT 3
76445: ST_TO_ADDR
// vc_weapon := 59 ;
76446: LD_ADDR_OWVAR 40
76450: PUSH
76451: LD_INT 59
76453: ST_TO_ADDR
// result := CreateVehicle ;
76454: LD_ADDR_VAR 0 5
76458: PUSH
76459: CALL_OW 45
76463: ST_TO_ADDR
// SetDir ( result , d ) ;
76464: LD_VAR 0 5
76468: PPUSH
76469: LD_VAR 0 4
76473: PPUSH
76474: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
76478: LD_VAR 0 5
76482: PPUSH
76483: LD_VAR 0 2
76487: PPUSH
76488: LD_VAR 0 3
76492: PPUSH
76493: LD_INT 0
76495: PPUSH
76496: CALL_OW 48
// end ;
76500: LD_VAR 0 5
76504: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
76505: LD_INT 0
76507: PPUSH
76508: PPUSH
76509: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
76510: LD_ADDR_VAR 0 2
76514: PUSH
76515: LD_INT 0
76517: PUSH
76518: LD_INT 0
76520: PUSH
76521: LD_INT 0
76523: PUSH
76524: LD_INT 0
76526: PUSH
76527: EMPTY
76528: LIST
76529: LIST
76530: LIST
76531: LIST
76532: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
76533: LD_VAR 0 1
76537: NOT
76538: PUSH
76539: LD_VAR 0 1
76543: PPUSH
76544: CALL_OW 264
76548: PUSH
76549: LD_INT 12
76551: PUSH
76552: LD_INT 51
76554: PUSH
76555: LD_INT 32
76557: PUSH
76558: LD_INT 89
76560: PUSH
76561: EMPTY
76562: LIST
76563: LIST
76564: LIST
76565: LIST
76566: IN
76567: NOT
76568: OR
76569: IFFALSE 76573
// exit ;
76571: GO 76671
// for i := 1 to 3 do
76573: LD_ADDR_VAR 0 3
76577: PUSH
76578: DOUBLE
76579: LD_INT 1
76581: DEC
76582: ST_TO_ADDR
76583: LD_INT 3
76585: PUSH
76586: FOR_TO
76587: IFFALSE 76669
// begin tmp := GetCargo ( cargo , i ) ;
76589: LD_ADDR_VAR 0 4
76593: PUSH
76594: LD_VAR 0 1
76598: PPUSH
76599: LD_VAR 0 3
76603: PPUSH
76604: CALL_OW 289
76608: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
76609: LD_ADDR_VAR 0 2
76613: PUSH
76614: LD_VAR 0 2
76618: PPUSH
76619: LD_VAR 0 3
76623: PPUSH
76624: LD_VAR 0 4
76628: PPUSH
76629: CALL_OW 1
76633: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
76634: LD_ADDR_VAR 0 2
76638: PUSH
76639: LD_VAR 0 2
76643: PPUSH
76644: LD_INT 4
76646: PPUSH
76647: LD_VAR 0 2
76651: PUSH
76652: LD_INT 4
76654: ARRAY
76655: PUSH
76656: LD_VAR 0 4
76660: PLUS
76661: PPUSH
76662: CALL_OW 1
76666: ST_TO_ADDR
// end ;
76667: GO 76586
76669: POP
76670: POP
// end ;
76671: LD_VAR 0 2
76675: RET
// export function Length ( array ) ; begin
76676: LD_INT 0
76678: PPUSH
// result := array + 0 ;
76679: LD_ADDR_VAR 0 2
76683: PUSH
76684: LD_VAR 0 1
76688: PUSH
76689: LD_INT 0
76691: PLUS
76692: ST_TO_ADDR
// end ;
76693: LD_VAR 0 2
76697: RET
// export function PrepareArray ( array ) ; begin
76698: LD_INT 0
76700: PPUSH
// result := array diff 0 ;
76701: LD_ADDR_VAR 0 2
76705: PUSH
76706: LD_VAR 0 1
76710: PUSH
76711: LD_INT 0
76713: DIFF
76714: ST_TO_ADDR
// if not result [ 1 ] then
76715: LD_VAR 0 2
76719: PUSH
76720: LD_INT 1
76722: ARRAY
76723: NOT
76724: IFFALSE 76744
// result := Delete ( result , 1 ) ;
76726: LD_ADDR_VAR 0 2
76730: PUSH
76731: LD_VAR 0 2
76735: PPUSH
76736: LD_INT 1
76738: PPUSH
76739: CALL_OW 3
76743: ST_TO_ADDR
// end ;
76744: LD_VAR 0 2
76748: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
76749: LD_INT 0
76751: PPUSH
76752: PPUSH
76753: PPUSH
76754: PPUSH
// sibRocketRange := 25 ;
76755: LD_ADDR_VAR 0 6
76759: PUSH
76760: LD_INT 25
76762: ST_TO_ADDR
// result := false ;
76763: LD_ADDR_VAR 0 4
76767: PUSH
76768: LD_INT 0
76770: ST_TO_ADDR
// for i := 0 to 5 do
76771: LD_ADDR_VAR 0 5
76775: PUSH
76776: DOUBLE
76777: LD_INT 0
76779: DEC
76780: ST_TO_ADDR
76781: LD_INT 5
76783: PUSH
76784: FOR_TO
76785: IFFALSE 76852
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
76787: LD_VAR 0 1
76791: PPUSH
76792: LD_VAR 0 5
76796: PPUSH
76797: LD_VAR 0 6
76801: PPUSH
76802: CALL_OW 272
76806: PPUSH
76807: LD_VAR 0 2
76811: PPUSH
76812: LD_VAR 0 5
76816: PPUSH
76817: LD_VAR 0 6
76821: PPUSH
76822: CALL_OW 273
76826: PPUSH
76827: LD_VAR 0 3
76831: PPUSH
76832: CALL_OW 309
76836: IFFALSE 76850
// begin result := true ;
76838: LD_ADDR_VAR 0 4
76842: PUSH
76843: LD_INT 1
76845: ST_TO_ADDR
// exit ;
76846: POP
76847: POP
76848: GO 76854
// end ;
76850: GO 76784
76852: POP
76853: POP
// end ;
76854: LD_VAR 0 4
76858: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
76859: LD_INT 0
76861: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
76862: LD_VAR 0 1
76866: PPUSH
76867: LD_VAR 0 2
76871: PPUSH
76872: LD_INT 0
76874: PPUSH
76875: LD_INT 0
76877: PPUSH
76878: LD_INT 1
76880: PPUSH
76881: LD_INT 0
76883: PPUSH
76884: CALL_OW 587
// end ;
76888: LD_VAR 0 3
76892: RET
// export function CenterOnNow ( unit ) ; begin
76893: LD_INT 0
76895: PPUSH
// result := IsInUnit ( unit ) ;
76896: LD_ADDR_VAR 0 2
76900: PUSH
76901: LD_VAR 0 1
76905: PPUSH
76906: CALL_OW 310
76910: ST_TO_ADDR
// if not result then
76911: LD_VAR 0 2
76915: NOT
76916: IFFALSE 76928
// result := unit ;
76918: LD_ADDR_VAR 0 2
76922: PUSH
76923: LD_VAR 0 1
76927: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
76928: LD_VAR 0 1
76932: PPUSH
76933: CALL_OW 87
// end ;
76937: LD_VAR 0 2
76941: RET
// export function ComMoveHex ( unit , hex ) ; begin
76942: LD_INT 0
76944: PPUSH
// if not hex then
76945: LD_VAR 0 2
76949: NOT
76950: IFFALSE 76954
// exit ;
76952: GO 77007
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
76954: LD_VAR 0 2
76958: PUSH
76959: LD_INT 1
76961: ARRAY
76962: PPUSH
76963: LD_VAR 0 2
76967: PUSH
76968: LD_INT 2
76970: ARRAY
76971: PPUSH
76972: CALL_OW 428
76976: IFFALSE 76980
// exit ;
76978: GO 77007
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
76980: LD_VAR 0 1
76984: PPUSH
76985: LD_VAR 0 2
76989: PUSH
76990: LD_INT 1
76992: ARRAY
76993: PPUSH
76994: LD_VAR 0 2
76998: PUSH
76999: LD_INT 2
77001: ARRAY
77002: PPUSH
77003: CALL_OW 111
// end ;
77007: LD_VAR 0 3
77011: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
77012: LD_INT 0
77014: PPUSH
77015: PPUSH
77016: PPUSH
// if not unit or not enemy then
77017: LD_VAR 0 1
77021: NOT
77022: PUSH
77023: LD_VAR 0 2
77027: NOT
77028: OR
77029: IFFALSE 77033
// exit ;
77031: GO 77157
// x := GetX ( enemy ) ;
77033: LD_ADDR_VAR 0 4
77037: PUSH
77038: LD_VAR 0 2
77042: PPUSH
77043: CALL_OW 250
77047: ST_TO_ADDR
// y := GetY ( enemy ) ;
77048: LD_ADDR_VAR 0 5
77052: PUSH
77053: LD_VAR 0 2
77057: PPUSH
77058: CALL_OW 251
77062: ST_TO_ADDR
// if ValidHex ( x , y ) then
77063: LD_VAR 0 4
77067: PPUSH
77068: LD_VAR 0 5
77072: PPUSH
77073: CALL_OW 488
77077: IFFALSE 77157
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
77079: LD_VAR 0 2
77083: PPUSH
77084: CALL_OW 247
77088: PUSH
77089: LD_INT 3
77091: PUSH
77092: LD_INT 2
77094: PUSH
77095: EMPTY
77096: LIST
77097: LIST
77098: IN
77099: PUSH
77100: LD_VAR 0 1
77104: PPUSH
77105: CALL_OW 255
77109: PPUSH
77110: LD_VAR 0 2
77114: PPUSH
77115: CALL_OW 292
77119: AND
77120: IFFALSE 77138
// ComAttackUnit ( unit , enemy ) else
77122: LD_VAR 0 1
77126: PPUSH
77127: LD_VAR 0 2
77131: PPUSH
77132: CALL_OW 115
77136: GO 77157
// ComAgressiveMove ( unit , x , y ) ;
77138: LD_VAR 0 1
77142: PPUSH
77143: LD_VAR 0 4
77147: PPUSH
77148: LD_VAR 0 5
77152: PPUSH
77153: CALL_OW 114
// end ; end_of_file
77157: LD_VAR 0 3
77161: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
77162: LD_VAR 0 1
77166: PUSH
77167: LD_INT 200
77169: DOUBLE
77170: GREATEREQUAL
77171: IFFALSE 77179
77173: LD_INT 299
77175: DOUBLE
77176: LESSEQUAL
77177: IFTRUE 77181
77179: GO 77213
77181: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
77182: LD_VAR 0 1
77186: PPUSH
77187: LD_VAR 0 2
77191: PPUSH
77192: LD_VAR 0 3
77196: PPUSH
77197: LD_VAR 0 4
77201: PPUSH
77202: LD_VAR 0 5
77206: PPUSH
77207: CALL 31706 0 5
77211: GO 77290
77213: LD_INT 300
77215: DOUBLE
77216: GREATEREQUAL
77217: IFFALSE 77225
77219: LD_INT 399
77221: DOUBLE
77222: LESSEQUAL
77223: IFTRUE 77227
77225: GO 77289
77227: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
77228: LD_VAR 0 1
77232: PPUSH
77233: LD_VAR 0 2
77237: PPUSH
77238: LD_VAR 0 3
77242: PPUSH
77243: LD_VAR 0 4
77247: PPUSH
77248: LD_VAR 0 5
77252: PPUSH
77253: LD_VAR 0 6
77257: PPUSH
77258: LD_VAR 0 7
77262: PPUSH
77263: LD_VAR 0 8
77267: PPUSH
77268: LD_VAR 0 9
77272: PPUSH
77273: LD_VAR 0 10
77277: PPUSH
77278: LD_VAR 0 11
77282: PPUSH
77283: CALL 28031 0 11
77287: GO 77290
77289: POP
// end ;
77290: PPOPN 11
77292: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
77293: LD_VAR 0 1
77297: PPUSH
77298: LD_VAR 0 2
77302: PPUSH
77303: LD_VAR 0 3
77307: PPUSH
77308: LD_VAR 0 4
77312: PPUSH
77313: LD_VAR 0 5
77317: PPUSH
77318: CALL 31442 0 5
// end ; end_of_file
77322: PPOPN 5
77324: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
77325: LD_VAR 0 1
77329: PPUSH
77330: LD_VAR 0 2
77334: PPUSH
77335: LD_VAR 0 3
77339: PPUSH
77340: LD_VAR 0 4
77344: PPUSH
77345: LD_VAR 0 5
77349: PPUSH
77350: LD_VAR 0 6
77354: PPUSH
77355: CALL 15683 0 6
// end ;
77359: PPOPN 6
77361: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
77362: LD_INT 0
77364: PPUSH
// begin if not units then
77365: LD_VAR 0 1
77369: NOT
77370: IFFALSE 77374
// exit ;
77372: GO 77374
// end ;
77374: PPOPN 7
77376: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
77377: CALL 15587 0 0
// end ;
77381: PPOPN 1
77383: END
