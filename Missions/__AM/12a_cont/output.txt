// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitVariables ;
  11: CALL 130 0 0
// CreateNature ;
  15: CALL 9269 0 0
// PrepareAlliance ;
  19: CALL 344 0 0
// PrepareFriends ;
  23: CALL 3654 0 0
// PrepareAmerican ;
  27: CALL 781 0 0
// PlaceSeeing ( 91 , 70 , 7 , - 32178 ) ;
  31: LD_INT 91
  33: PPUSH
  34: LD_INT 70
  36: PPUSH
  37: LD_INT 7
  39: PPUSH
  40: LD_INT 32178
  42: NEG
  43: PPUSH
  44: CALL_OW 330
// RemoveSeeing ( 91 , 70 , 7 ) ;
  48: LD_INT 91
  50: PPUSH
  51: LD_INT 70
  53: PPUSH
  54: LD_INT 7
  56: PPUSH
  57: CALL_OW 331
// if debug then
  61: LD_EXP 1
  65: IFFALSE 113
// begin SetAttitude ( 1 , 7 , att_enemy , true ) ;
  67: LD_INT 1
  69: PPUSH
  70: LD_INT 7
  72: PPUSH
  73: LD_INT 2
  75: PPUSH
  76: LD_INT 1
  78: PPUSH
  79: CALL_OW 80
// RemoveUnit ( Powell ) ;
  83: LD_EXP 16
  87: PPUSH
  88: CALL_OW 64
// DoNotAttack ( 1 , JMM ) ;
  92: LD_INT 1
  94: PPUSH
  95: LD_EXP 14
  99: PPUSH
 100: CALL_OW 471
// FogOff ( 1 ) ;
 104: LD_INT 1
 106: PPUSH
 107: CALL_OW 344
// end else
 111: GO 117
// Action ;
 113: CALL 9605 0 0
// PreparePatrol ;
 117: CALL 1246 0 0
// game := true ;
 121: LD_ADDR_EXP 2
 125: PUSH
 126: LD_INT 1
 128: ST_TO_ADDR
// end ;
 129: END
// export debug , game , selected , friends , reached_lab , can_escape , on_hill , friends_kill_counter , team_kill_counter , gamma_commander , extra_patrol , invis_used , alert ; export function InitVariables ; begin
 130: LD_INT 0
 132: PPUSH
// debug := false ;
 133: LD_ADDR_EXP 1
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// friends := [ ] ;
 141: LD_ADDR_EXP 4
 145: PUSH
 146: EMPTY
 147: ST_TO_ADDR
// selected := [ ] ;
 148: LD_ADDR_EXP 3
 152: PUSH
 153: EMPTY
 154: ST_TO_ADDR
// reached_lab := false ;
 155: LD_ADDR_EXP 5
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// can_escape := false ;
 163: LD_ADDR_EXP 6
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// game := false ;
 171: LD_ADDR_EXP 2
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// gamma_commander := LoadVariable ( GammaCommander , 2 ) ;
 179: LD_ADDR_EXP 10
 183: PUSH
 184: LD_STRING GammaCommander
 186: PPUSH
 187: LD_INT 2
 189: PPUSH
 190: CALL_OW 30
 194: ST_TO_ADDR
// friends_kill_counter := 0 ;
 195: LD_ADDR_EXP 8
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// team_kill_counter := 0 ;
 203: LD_ADDR_EXP 9
 207: PUSH
 208: LD_INT 0
 210: ST_TO_ADDR
// extra_patrol := true ;
 211: LD_ADDR_EXP 11
 215: PUSH
 216: LD_INT 1
 218: ST_TO_ADDR
// on_hill := false ;
 219: LD_ADDR_EXP 7
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// invis_used := false ;
 227: LD_ADDR_EXP 12
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// alert := false ;
 235: LD_ADDR_EXP 13
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// end ;
 243: LD_VAR 0 1
 247: RET
// every 0 0$1 trigger on_hill do
 248: LD_EXP 7
 252: IFFALSE 264
 254: GO 256
 256: DISABLE
// SetAchievement ( ACH_EYE ) ;
 257: LD_STRING ACH_EYE
 259: PPUSH
 260: CALL_OW 543
 264: END
// every 0 0$1 trigger not invis_used do var i ;
 265: LD_EXP 12
 269: NOT
 270: IFFALSE 341
 272: GO 274
 274: DISABLE
 275: LD_INT 0
 277: PPUSH
// begin enable ;
 278: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do
 279: LD_ADDR_VAR 0 1
 283: PUSH
 284: LD_INT 22
 286: PUSH
 287: LD_INT 7
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PUSH
 294: LD_INT 21
 296: PUSH
 297: LD_INT 1
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: PUSH
 304: EMPTY
 305: LIST
 306: LIST
 307: PPUSH
 308: CALL_OW 69
 312: PUSH
 313: FOR_IN
 314: IFFALSE 339
// if IsInvisible ( i ) then
 316: LD_VAR 0 1
 320: PPUSH
 321: CALL_OW 571
 325: IFFALSE 337
// begin invis_used := true ;
 327: LD_ADDR_EXP 12
 331: PUSH
 332: LD_INT 1
 334: ST_TO_ADDR
// break ;
 335: GO 339
// end ;
 337: GO 313
 339: POP
 340: POP
// end ; end_of_file
 341: PPOPN 1
 343: END
// export JMM , Roth ; export function PrepareAlliance ; var cargo ; begin
 344: LD_INT 0
 346: PPUSH
 347: PPUSH
// uc_side := 7 ;
 348: LD_ADDR_OWVAR 20
 352: PUSH
 353: LD_INT 7
 355: ST_TO_ADDR
// uc_nation := 1 ;
 356: LD_ADDR_OWVAR 21
 360: PUSH
 361: LD_INT 1
 363: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 11_ ) ;
 364: LD_ADDR_EXP 14
 368: PUSH
 369: LD_STRING JMM
 371: PPUSH
 372: LD_EXP 1
 376: NOT
 377: PPUSH
 378: LD_STRING 11_
 380: PPUSH
 381: CALL 35173 0 3
 385: ST_TO_ADDR
// uc_side := 4 ;
 386: LD_ADDR_OWVAR 20
 390: PUSH
 391: LD_INT 4
 393: ST_TO_ADDR
// Roth := NewCharacter ( Roth ) ;
 394: LD_ADDR_EXP 15
 398: PUSH
 399: LD_STRING Roth
 401: PPUSH
 402: CALL_OW 25
 406: ST_TO_ADDR
// SetDir ( JMM , 1 ) ;
 407: LD_EXP 14
 411: PPUSH
 412: LD_INT 1
 414: PPUSH
 415: CALL_OW 233
// SetClass ( JMM , 1 ) ;
 419: LD_EXP 14
 423: PPUSH
 424: LD_INT 1
 426: PPUSH
 427: CALL_OW 336
// PlaceUnitXY ( JMM , 105 , 10 , false ) ;
 431: LD_EXP 14
 435: PPUSH
 436: LD_INT 105
 438: PPUSH
 439: LD_INT 10
 441: PPUSH
 442: LD_INT 0
 444: PPUSH
 445: CALL_OW 48
// SetDir ( Roth , 4 ) ;
 449: LD_EXP 15
 453: PPUSH
 454: LD_INT 4
 456: PPUSH
 457: CALL_OW 233
// PlaceUnitXY ( Roth , 109 , 10 , false ) ;
 461: LD_EXP 15
 465: PPUSH
 466: LD_INT 109
 468: PPUSH
 469: LD_INT 10
 471: PPUSH
 472: LD_INT 0
 474: PPUSH
 475: CALL_OW 48
// ComTurnUnit ( JMM , Roth ) ;
 479: LD_EXP 14
 483: PPUSH
 484: LD_EXP 15
 488: PPUSH
 489: CALL_OW 119
// ComTurnUnit ( Roth , JMM ) ;
 493: LD_EXP 15
 497: PPUSH
 498: LD_EXP 14
 502: PPUSH
 503: CALL_OW 119
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
 507: LD_INT 3
 509: PPUSH
 510: LD_INT 3
 512: PPUSH
 513: LD_INT 3
 515: PPUSH
 516: LD_INT 12
 518: PPUSH
 519: LD_INT 100
 521: PPUSH
 522: CALL 40188 0 5
// cargo := CreateVehicle ;
 526: LD_ADDR_VAR 0 2
 530: PUSH
 531: CALL_OW 45
 535: ST_TO_ADDR
// SetDir ( cargo , 1 ) ;
 536: LD_VAR 0 2
 540: PPUSH
 541: LD_INT 1
 543: PPUSH
 544: CALL_OW 233
// PlaceUnitXY ( cargo , 179 , 45 , false ) ;
 548: LD_VAR 0 2
 552: PPUSH
 553: LD_INT 179
 555: PPUSH
 556: LD_INT 45
 558: PPUSH
 559: LD_INT 0
 561: PPUSH
 562: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 30 ) ;
 566: LD_VAR 0 2
 570: PPUSH
 571: LD_INT 4
 573: PPUSH
 574: LD_INT 30
 576: PPUSH
 577: CALL_OW 290
// if LoadVariable ( 11_artifact_captured , 0 ) then
 581: LD_STRING 11_artifact_captured
 583: PPUSH
 584: LD_INT 0
 586: PPUSH
 587: CALL_OW 30
 591: IFFALSE 648
// begin cargo := CreateVehicle ;
 593: LD_ADDR_VAR 0 2
 597: PUSH
 598: CALL_OW 45
 602: ST_TO_ADDR
// SetDir ( cargo , 0 ) ;
 603: LD_VAR 0 2
 607: PPUSH
 608: LD_INT 0
 610: PPUSH
 611: CALL_OW 233
// PlaceUnitXY ( cargo , 171 , 85 , false ) ;
 615: LD_VAR 0 2
 619: PPUSH
 620: LD_INT 171
 622: PPUSH
 623: LD_INT 85
 625: PPUSH
 626: LD_INT 0
 628: PPUSH
 629: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 50 ) ;
 633: LD_VAR 0 2
 637: PPUSH
 638: LD_INT 4
 640: PPUSH
 641: LD_INT 50
 643: PPUSH
 644: CALL_OW 290
// end ; SetSide ( amlab , 7 ) ;
 648: LD_INT 47
 650: PPUSH
 651: LD_INT 7
 653: PPUSH
 654: CALL_OW 235
// DoNotAttack ( 1 , amlab ) ;
 658: LD_INT 1
 660: PPUSH
 661: LD_INT 47
 663: PPUSH
 664: CALL_OW 471
// end ;
 668: LD_VAR 0 1
 672: RET
// every 0 0$1 trigger FilterUnitsInArea ( hill , [ f_side , 7 ] ) and not on_hill do
 673: LD_INT 38
 675: PPUSH
 676: LD_INT 22
 678: PUSH
 679: LD_INT 7
 681: PUSH
 682: EMPTY
 683: LIST
 684: LIST
 685: PPUSH
 686: CALL_OW 70
 690: PUSH
 691: LD_EXP 7
 695: NOT
 696: AND
 697: IFFALSE 728
 699: GO 701
 701: DISABLE
// begin enable ;
 702: ENABLE
// on_hill := true ;
 703: LD_ADDR_EXP 7
 707: PUSH
 708: LD_INT 1
 710: ST_TO_ADDR
// PlaceSeeing ( 126 , 13 , 7 , - 90 ) ;
 711: LD_INT 126
 713: PPUSH
 714: LD_INT 13
 716: PPUSH
 717: LD_INT 7
 719: PPUSH
 720: LD_INT 90
 722: NEG
 723: PPUSH
 724: CALL_OW 330
// end ;
 728: END
// every 0 0$1 trigger not FilterUnitsInArea ( hill , [ f_side , 7 ] ) and on_hill do
 729: LD_INT 38
 731: PPUSH
 732: LD_INT 22
 734: PUSH
 735: LD_INT 7
 737: PUSH
 738: EMPTY
 739: LIST
 740: LIST
 741: PPUSH
 742: CALL_OW 70
 746: NOT
 747: PUSH
 748: LD_EXP 7
 752: AND
 753: IFFALSE 780
 755: GO 757
 757: DISABLE
// begin enable ;
 758: ENABLE
// on_hill := false ;
 759: LD_ADDR_EXP 7
 763: PUSH
 764: LD_INT 0
 766: ST_TO_ADDR
// RemoveSeeing ( 126 , 13 , 7 ) ;
 767: LD_INT 126
 769: PPUSH
 770: LD_INT 13
 772: PPUSH
 773: LD_INT 7
 775: PPUSH
 776: CALL_OW 331
// end ; end_of_file
 780: END
// export Powell , mobile_patrol , mobile_points , powell_guards , defenders , defcon , defcon_wave ; export function PrepareAmerican ; var i , j , b , un , tmp ; begin
 781: LD_INT 0
 783: PPUSH
 784: PPUSH
 785: PPUSH
 786: PPUSH
 787: PPUSH
 788: PPUSH
// if Difficulty = 1 then
 789: LD_OWVAR 67
 793: PUSH
 794: LD_INT 1
 796: EQUAL
 797: IFFALSE 905
// begin tmp := [ [ 155 , 77 ] , [ 193 , 93 ] , [ 188 , 81 ] , [ 56 , 85 ] , [ 98 , 87 ] ] ;
 799: LD_ADDR_VAR 0 6
 803: PUSH
 804: LD_INT 155
 806: PUSH
 807: LD_INT 77
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: PUSH
 814: LD_INT 193
 816: PUSH
 817: LD_INT 93
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PUSH
 824: LD_INT 188
 826: PUSH
 827: LD_INT 81
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: PUSH
 834: LD_INT 56
 836: PUSH
 837: LD_INT 85
 839: PUSH
 840: EMPTY
 841: LIST
 842: LIST
 843: PUSH
 844: LD_INT 98
 846: PUSH
 847: LD_INT 87
 849: PUSH
 850: EMPTY
 851: LIST
 852: LIST
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: ST_TO_ADDR
// for i in tmp do
 861: LD_ADDR_VAR 0 2
 865: PUSH
 866: LD_VAR 0 6
 870: PUSH
 871: FOR_IN
 872: IFFALSE 903
// RemoveUnit ( HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
 874: LD_VAR 0 2
 878: PUSH
 879: LD_INT 1
 881: ARRAY
 882: PPUSH
 883: LD_VAR 0 2
 887: PUSH
 888: LD_INT 2
 890: ARRAY
 891: PPUSH
 892: CALL_OW 428
 896: PPUSH
 897: CALL_OW 64
 901: GO 871
 903: POP
 904: POP
// end ; defcon := 0 ;
 905: LD_ADDR_EXP 21
 909: PUSH
 910: LD_INT 0
 912: ST_TO_ADDR
// defcon_wave := 0 ;
 913: LD_ADDR_EXP 22
 917: PUSH
 918: LD_INT 0
 920: ST_TO_ADDR
// defenders := [ ] ;
 921: LD_ADDR_EXP 20
 925: PUSH
 926: EMPTY
 927: ST_TO_ADDR
// SetBName ( alfa , alpha ) ;
 928: LD_INT 5
 930: PPUSH
 931: LD_STRING alpha
 933: PPUSH
 934: CALL_OW 500
// uc_side := 1 ;
 938: LD_ADDR_OWVAR 20
 942: PUSH
 943: LD_INT 1
 945: ST_TO_ADDR
// uc_nation := 1 ;
 946: LD_ADDR_OWVAR 21
 950: PUSH
 951: LD_INT 1
 953: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
 954: LD_ADDR_EXP 16
 958: PUSH
 959: LD_STRING Powell
 961: PPUSH
 962: CALL_OW 25
 966: ST_TO_ADDR
// PlaceUnitXY ( Powell , 110 , 26 , false ) ;
 967: LD_EXP 16
 971: PPUSH
 972: LD_INT 110
 974: PPUSH
 975: LD_INT 26
 977: PPUSH
 978: LD_INT 0
 980: PPUSH
 981: CALL_OW 48
// ComHold ( Powell ) ;
 985: LD_EXP 16
 989: PPUSH
 990: CALL_OW 140
// for i = 1 to 5 do
 994: LD_ADDR_VAR 0 2
 998: PUSH
 999: DOUBLE
1000: LD_INT 1
1002: DEC
1003: ST_TO_ADDR
1004: LD_INT 5
1006: PUSH
1007: FOR_TO
1008: IFFALSE 1064
// begin PrepareHuman ( false , 1 , 10 ) ;
1010: LD_INT 0
1012: PPUSH
1013: LD_INT 1
1015: PPUSH
1016: LD_INT 10
1018: PPUSH
1019: CALL_OW 380
// powell_guards := Insert ( powell_guards , 1 , CreateHuman ) ;
1023: LD_ADDR_EXP 19
1027: PUSH
1028: LD_EXP 19
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: CALL_OW 44
1040: PPUSH
1041: CALL_OW 2
1045: ST_TO_ADDR
// PlaceHumanInUnit ( powell_guards [ 1 ] , ambar0 ) ;
1046: LD_EXP 19
1050: PUSH
1051: LD_INT 1
1053: ARRAY
1054: PPUSH
1055: LD_INT 18
1057: PPUSH
1058: CALL_OW 52
// end ;
1062: GO 1007
1064: POP
1065: POP
// if Difficulty > 2 then
1066: LD_OWVAR 67
1070: PUSH
1071: LD_INT 2
1073: GREATER
1074: IFFALSE 1123
// begin bc_type := b_turret ;
1076: LD_ADDR_OWVAR 42
1080: PUSH
1081: LD_INT 33
1083: ST_TO_ADDR
// bc_level := 7 ;
1084: LD_ADDR_OWVAR 43
1088: PUSH
1089: LD_INT 7
1091: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 107 , 55 , 5 ) ;
1092: LD_ADDR_VAR 0 4
1096: PUSH
1097: LD_INT 107
1099: PPUSH
1100: LD_INT 55
1102: PPUSH
1103: LD_INT 5
1105: PPUSH
1106: CALL_OW 47
1110: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_rocket_launcher ) ;
1111: LD_VAR 0 4
1115: PPUSH
1116: LD_INT 7
1118: PPUSH
1119: CALL_OW 431
// end ; for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ^ FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) do
1123: LD_ADDR_VAR 0 2
1127: PUSH
1128: LD_INT 22
1130: PUSH
1131: LD_INT 1
1133: PUSH
1134: EMPTY
1135: LIST
1136: LIST
1137: PUSH
1138: LD_INT 30
1140: PUSH
1141: LD_INT 3
1143: PUSH
1144: EMPTY
1145: LIST
1146: LIST
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: PPUSH
1152: CALL_OW 69
1156: PUSH
1157: LD_INT 22
1159: PUSH
1160: LD_INT 1
1162: PUSH
1163: EMPTY
1164: LIST
1165: LIST
1166: PUSH
1167: LD_INT 30
1169: PUSH
1170: LD_INT 36
1172: PUSH
1173: EMPTY
1174: LIST
1175: LIST
1176: PUSH
1177: EMPTY
1178: LIST
1179: LIST
1180: PPUSH
1181: CALL_OW 69
1185: ADD
1186: PUSH
1187: FOR_IN
1188: IFFALSE 1239
// for j = 1 to 3 do
1190: LD_ADDR_VAR 0 3
1194: PUSH
1195: DOUBLE
1196: LD_INT 1
1198: DEC
1199: ST_TO_ADDR
1200: LD_INT 3
1202: PUSH
1203: FOR_TO
1204: IFFALSE 1235
// begin PrepareHuman ( false , 3 , 6 ) ;
1206: LD_INT 0
1208: PPUSH
1209: LD_INT 3
1211: PPUSH
1212: LD_INT 6
1214: PPUSH
1215: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
1219: CALL_OW 44
1223: PPUSH
1224: LD_VAR 0 2
1228: PPUSH
1229: CALL_OW 52
// end ;
1233: GO 1203
1235: POP
1236: POP
1237: GO 1187
1239: POP
1240: POP
// end ;
1241: LD_VAR 0 1
1245: RET
// export function PreparePatrol ; var i , un ; begin
1246: LD_INT 0
1248: PPUSH
1249: PPUSH
1250: PPUSH
// uc_side := 1 ;
1251: LD_ADDR_OWVAR 20
1255: PUSH
1256: LD_INT 1
1258: ST_TO_ADDR
// uc_nation := 1 ;
1259: LD_ADDR_OWVAR 21
1263: PUSH
1264: LD_INT 1
1266: ST_TO_ADDR
// mobile_points := [ [ [ 99 , 55 ] , [ 113 , 67 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 103 , 41 ] ] , [ [ 27 , 49 ] , [ 46 , 49 ] , [ 87 , 70 ] , [ 99 , 79 ] , [ 118 , 111 ] , [ 99 , 79 ] , [ 87 , 70 ] , [ 46 , 49 ] ] , [ [ 200 , 88 ] , [ 175 , 80 ] , [ 135 , 62 ] , [ 117 , 53 ] , [ 103 , 41 ] , [ 99 , 24 ] , [ 85 , 3 ] , [ 99 , 24 ] , [ 103 , 41 ] , [ 98 , 47 ] , [ 99 , 56 ] , [ 96 , 66 ] , [ 99 , 56 ] , [ 112 , 66 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 156 , 71 ] , [ 168 , 76 ] , [ 168 , 61 ] , [ 168 , 75 ] , [ 185 , 85 ] ] ] ;
1267: LD_ADDR_EXP 18
1271: PUSH
1272: LD_INT 99
1274: PUSH
1275: LD_INT 55
1277: PUSH
1278: EMPTY
1279: LIST
1280: LIST
1281: PUSH
1282: LD_INT 113
1284: PUSH
1285: LD_INT 67
1287: PUSH
1288: EMPTY
1289: LIST
1290: LIST
1291: PUSH
1292: LD_INT 129
1294: PUSH
1295: LD_INT 68
1297: PUSH
1298: EMPTY
1299: LIST
1300: LIST
1301: PUSH
1302: LD_INT 135
1304: PUSH
1305: LD_INT 62
1307: PUSH
1308: EMPTY
1309: LIST
1310: LIST
1311: PUSH
1312: LD_INT 103
1314: PUSH
1315: LD_INT 41
1317: PUSH
1318: EMPTY
1319: LIST
1320: LIST
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: PUSH
1329: LD_INT 27
1331: PUSH
1332: LD_INT 49
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: PUSH
1339: LD_INT 46
1341: PUSH
1342: LD_INT 49
1344: PUSH
1345: EMPTY
1346: LIST
1347: LIST
1348: PUSH
1349: LD_INT 87
1351: PUSH
1352: LD_INT 70
1354: PUSH
1355: EMPTY
1356: LIST
1357: LIST
1358: PUSH
1359: LD_INT 99
1361: PUSH
1362: LD_INT 79
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: PUSH
1369: LD_INT 118
1371: PUSH
1372: LD_INT 111
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: LD_INT 99
1381: PUSH
1382: LD_INT 79
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: PUSH
1389: LD_INT 87
1391: PUSH
1392: LD_INT 70
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: PUSH
1399: LD_INT 46
1401: PUSH
1402: LD_INT 49
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: PUSH
1419: LD_INT 200
1421: PUSH
1422: LD_INT 88
1424: PUSH
1425: EMPTY
1426: LIST
1427: LIST
1428: PUSH
1429: LD_INT 175
1431: PUSH
1432: LD_INT 80
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: PUSH
1439: LD_INT 135
1441: PUSH
1442: LD_INT 62
1444: PUSH
1445: EMPTY
1446: LIST
1447: LIST
1448: PUSH
1449: LD_INT 117
1451: PUSH
1452: LD_INT 53
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: PUSH
1459: LD_INT 103
1461: PUSH
1462: LD_INT 41
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: PUSH
1469: LD_INT 99
1471: PUSH
1472: LD_INT 24
1474: PUSH
1475: EMPTY
1476: LIST
1477: LIST
1478: PUSH
1479: LD_INT 85
1481: PUSH
1482: LD_INT 3
1484: PUSH
1485: EMPTY
1486: LIST
1487: LIST
1488: PUSH
1489: LD_INT 99
1491: PUSH
1492: LD_INT 24
1494: PUSH
1495: EMPTY
1496: LIST
1497: LIST
1498: PUSH
1499: LD_INT 103
1501: PUSH
1502: LD_INT 41
1504: PUSH
1505: EMPTY
1506: LIST
1507: LIST
1508: PUSH
1509: LD_INT 98
1511: PUSH
1512: LD_INT 47
1514: PUSH
1515: EMPTY
1516: LIST
1517: LIST
1518: PUSH
1519: LD_INT 99
1521: PUSH
1522: LD_INT 56
1524: PUSH
1525: EMPTY
1526: LIST
1527: LIST
1528: PUSH
1529: LD_INT 96
1531: PUSH
1532: LD_INT 66
1534: PUSH
1535: EMPTY
1536: LIST
1537: LIST
1538: PUSH
1539: LD_INT 99
1541: PUSH
1542: LD_INT 56
1544: PUSH
1545: EMPTY
1546: LIST
1547: LIST
1548: PUSH
1549: LD_INT 112
1551: PUSH
1552: LD_INT 66
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: PUSH
1559: LD_INT 129
1561: PUSH
1562: LD_INT 68
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: PUSH
1569: LD_INT 135
1571: PUSH
1572: LD_INT 62
1574: PUSH
1575: EMPTY
1576: LIST
1577: LIST
1578: PUSH
1579: LD_INT 156
1581: PUSH
1582: LD_INT 71
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PUSH
1589: LD_INT 168
1591: PUSH
1592: LD_INT 76
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: PUSH
1599: LD_INT 168
1601: PUSH
1602: LD_INT 61
1604: PUSH
1605: EMPTY
1606: LIST
1607: LIST
1608: PUSH
1609: LD_INT 168
1611: PUSH
1612: LD_INT 75
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: PUSH
1619: LD_INT 185
1621: PUSH
1622: LD_INT 85
1624: PUSH
1625: EMPTY
1626: LIST
1627: LIST
1628: PUSH
1629: EMPTY
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: LIST
1645: LIST
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: LIST
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: LIST
1656: ST_TO_ADDR
// mobile_patrol := [ ] ;
1657: LD_ADDR_EXP 17
1661: PUSH
1662: EMPTY
1663: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1664: LD_INT 3
1666: PPUSH
1667: LD_INT 1
1669: PPUSH
1670: LD_INT 3
1672: PPUSH
1673: LD_INT 4
1675: PPUSH
1676: LD_INT 100
1678: PPUSH
1679: CALL 40188 0 5
// mobile_patrol := Insert ( mobile_patrol , 1 , CreateVehicle ) ;
1683: LD_ADDR_EXP 17
1687: PUSH
1688: LD_EXP 17
1692: PPUSH
1693: LD_INT 1
1695: PPUSH
1696: CALL_OW 45
1700: PPUSH
1701: CALL_OW 2
1705: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 1 ] , 99 , 55 , false ) ;
1706: LD_EXP 17
1710: PUSH
1711: LD_INT 1
1713: ARRAY
1714: PPUSH
1715: LD_INT 99
1717: PPUSH
1718: LD_INT 55
1720: PPUSH
1721: LD_INT 0
1723: PPUSH
1724: CALL_OW 48
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1728: LD_INT 2
1730: PPUSH
1731: LD_INT 1
1733: PPUSH
1734: LD_INT 3
1736: PPUSH
1737: LD_INT 4
1739: PPUSH
1740: LD_INT 100
1742: PPUSH
1743: CALL 40188 0 5
// mobile_patrol := Insert ( mobile_patrol , 2 , CreateVehicle ) ;
1747: LD_ADDR_EXP 17
1751: PUSH
1752: LD_EXP 17
1756: PPUSH
1757: LD_INT 2
1759: PPUSH
1760: CALL_OW 45
1764: PPUSH
1765: CALL_OW 2
1769: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 2 ] , 27 , 49 , false ) ;
1770: LD_EXP 17
1774: PUSH
1775: LD_INT 2
1777: ARRAY
1778: PPUSH
1779: LD_INT 27
1781: PPUSH
1782: LD_INT 49
1784: PPUSH
1785: LD_INT 0
1787: PPUSH
1788: CALL_OW 48
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , [ us_laser , us_rocket_launcher , us_rocket_launcher , us_rocket_launcher ] [ Difficulty ] , 100 ) ;
1792: LD_INT 3
1794: PPUSH
1795: LD_INT 1
1797: PPUSH
1798: LD_INT 3
1800: PPUSH
1801: LD_INT 9
1803: PUSH
1804: LD_INT 7
1806: PUSH
1807: LD_INT 7
1809: PUSH
1810: LD_INT 7
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: PUSH
1819: LD_OWVAR 67
1823: ARRAY
1824: PPUSH
1825: LD_INT 100
1827: PPUSH
1828: CALL 40188 0 5
// mobile_patrol := Insert ( mobile_patrol , 3 , CreateVehicle ) ;
1832: LD_ADDR_EXP 17
1836: PUSH
1837: LD_EXP 17
1841: PPUSH
1842: LD_INT 3
1844: PPUSH
1845: CALL_OW 45
1849: PPUSH
1850: CALL_OW 2
1854: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 3 ] , 200 , 88 , false ) ;
1855: LD_EXP 17
1859: PUSH
1860: LD_INT 3
1862: ARRAY
1863: PPUSH
1864: LD_INT 200
1866: PPUSH
1867: LD_INT 88
1869: PPUSH
1870: LD_INT 0
1872: PPUSH
1873: CALL_OW 48
// for i = mobile_patrol downto 1 do
1877: LD_ADDR_VAR 0 2
1881: PUSH
1882: DOUBLE
1883: LD_EXP 17
1887: INC
1888: ST_TO_ADDR
1889: LD_INT 1
1891: PUSH
1892: FOR_DOWNTO
1893: IFFALSE 1904
// RaiseSailEvent ( 1 ) ;
1895: LD_INT 1
1897: PPUSH
1898: CALL_OW 427
1902: GO 1892
1904: POP
1905: POP
// end ;
1906: LD_VAR 0 1
1910: RET
// export function SpawnCargo ( ) ; var i , c , k , areas , road , tmp , veh ; begin
1911: LD_INT 0
1913: PPUSH
1914: PPUSH
1915: PPUSH
1916: PPUSH
1917: PPUSH
1918: PPUSH
1919: PPUSH
1920: PPUSH
// areas := [ [ road_east , 4 ] , [ road_south , 5 ] , [ road_west , 1 ] ] ;
1921: LD_ADDR_VAR 0 5
1925: PUSH
1926: LD_INT 20
1928: PUSH
1929: LD_INT 4
1931: PUSH
1932: EMPTY
1933: LIST
1934: LIST
1935: PUSH
1936: LD_INT 21
1938: PUSH
1939: LD_INT 5
1941: PUSH
1942: EMPTY
1943: LIST
1944: LIST
1945: PUSH
1946: LD_INT 22
1948: PUSH
1949: LD_INT 1
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: PUSH
1956: EMPTY
1957: LIST
1958: LIST
1959: LIST
1960: ST_TO_ADDR
// road := [ [ 176 , 81 , 135 , 62 , 114 , 67 , 93 , 71 , 76 , 67 ] , [ 107 , 92 , 92 , 72 , 77 , 68 ] , [ 45 , 49 , 67 , 59 , 77 , 68 ] ] ;
1961: LD_ADDR_VAR 0 6
1965: PUSH
1966: LD_INT 176
1968: PUSH
1969: LD_INT 81
1971: PUSH
1972: LD_INT 135
1974: PUSH
1975: LD_INT 62
1977: PUSH
1978: LD_INT 114
1980: PUSH
1981: LD_INT 67
1983: PUSH
1984: LD_INT 93
1986: PUSH
1987: LD_INT 71
1989: PUSH
1990: LD_INT 76
1992: PUSH
1993: LD_INT 67
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: LIST
2000: LIST
2001: LIST
2002: LIST
2003: LIST
2004: LIST
2005: LIST
2006: LIST
2007: PUSH
2008: LD_INT 107
2010: PUSH
2011: LD_INT 92
2013: PUSH
2014: LD_INT 92
2016: PUSH
2017: LD_INT 72
2019: PUSH
2020: LD_INT 77
2022: PUSH
2023: LD_INT 68
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: LIST
2030: LIST
2031: LIST
2032: LIST
2033: PUSH
2034: LD_INT 45
2036: PUSH
2037: LD_INT 49
2039: PUSH
2040: LD_INT 67
2042: PUSH
2043: LD_INT 59
2045: PUSH
2046: LD_INT 77
2048: PUSH
2049: LD_INT 68
2051: PUSH
2052: EMPTY
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: LIST
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: LIST
2064: ST_TO_ADDR
// k := rand ( 1 , areas ) ;
2065: LD_ADDR_VAR 0 4
2069: PUSH
2070: LD_INT 1
2072: PPUSH
2073: LD_VAR 0 5
2077: PPUSH
2078: CALL_OW 12
2082: ST_TO_ADDR
// c := rand ( 1 , 2 ) ;
2083: LD_ADDR_VAR 0 3
2087: PUSH
2088: LD_INT 1
2090: PPUSH
2091: LD_INT 2
2093: PPUSH
2094: CALL_OW 12
2098: ST_TO_ADDR
// uc_side := 1 ;
2099: LD_ADDR_OWVAR 20
2103: PUSH
2104: LD_INT 1
2106: ST_TO_ADDR
// uc_nation := 1 ;
2107: LD_ADDR_OWVAR 21
2111: PUSH
2112: LD_INT 1
2114: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
2115: LD_INT 2
2117: PPUSH
2118: LD_INT 3
2120: PPUSH
2121: LD_INT 3
2123: PPUSH
2124: LD_INT 12
2126: PPUSH
2127: LD_INT 100
2129: PPUSH
2130: CALL 40188 0 5
// veh := CreateVehicle ;
2134: LD_ADDR_VAR 0 8
2138: PUSH
2139: CALL_OW 45
2143: ST_TO_ADDR
// SetDir ( veh , areas [ k ] [ 2 ] ) ;
2144: LD_VAR 0 8
2148: PPUSH
2149: LD_VAR 0 5
2153: PUSH
2154: LD_VAR 0 4
2158: ARRAY
2159: PUSH
2160: LD_INT 2
2162: ARRAY
2163: PPUSH
2164: CALL_OW 233
// PlaceUnitArea ( veh , areas [ k ] [ 1 ] , false ) ;
2168: LD_VAR 0 8
2172: PPUSH
2173: LD_VAR 0 5
2177: PUSH
2178: LD_VAR 0 4
2182: ARRAY
2183: PUSH
2184: LD_INT 1
2186: ARRAY
2187: PPUSH
2188: LD_INT 0
2190: PPUSH
2191: CALL_OW 49
// SetCargo ( veh , [ mat_cans , mat_siberit ] [ c ] , 100 ) ;
2195: LD_VAR 0 8
2199: PPUSH
2200: LD_INT 1
2202: PUSH
2203: LD_INT 3
2205: PUSH
2206: EMPTY
2207: LIST
2208: LIST
2209: PUSH
2210: LD_VAR 0 3
2214: ARRAY
2215: PPUSH
2216: LD_INT 100
2218: PPUSH
2219: CALL_OW 290
// tmp := road [ k ] ;
2223: LD_ADDR_VAR 0 7
2227: PUSH
2228: LD_VAR 0 6
2232: PUSH
2233: LD_VAR 0 4
2237: ARRAY
2238: ST_TO_ADDR
// for i = 1 to tmp div 2 do
2239: LD_ADDR_VAR 0 2
2243: PUSH
2244: DOUBLE
2245: LD_INT 1
2247: DEC
2248: ST_TO_ADDR
2249: LD_VAR 0 7
2253: PUSH
2254: LD_INT 2
2256: DIV
2257: PUSH
2258: FOR_TO
2259: IFFALSE 2306
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2261: LD_VAR 0 8
2265: PPUSH
2266: LD_VAR 0 7
2270: PUSH
2271: LD_VAR 0 2
2275: PUSH
2276: LD_INT 2
2278: MUL
2279: PUSH
2280: LD_INT 1
2282: MINUS
2283: ARRAY
2284: PPUSH
2285: LD_VAR 0 7
2289: PUSH
2290: LD_VAR 0 2
2294: PUSH
2295: LD_INT 2
2297: MUL
2298: ARRAY
2299: PPUSH
2300: CALL_OW 171
2304: GO 2258
2306: POP
2307: POP
// AddComGive ( veh , alfa ) ;
2308: LD_VAR 0 8
2312: PPUSH
2313: LD_INT 5
2315: PPUSH
2316: CALL_OW 221
// AddComWait ( veh , 0 0$2 ) ;
2320: LD_VAR 0 8
2324: PPUSH
2325: LD_INT 70
2327: PPUSH
2328: CALL_OW 202
// for i = tmp div 2 downto 1 do
2332: LD_ADDR_VAR 0 2
2336: PUSH
2337: DOUBLE
2338: LD_VAR 0 7
2342: PUSH
2343: LD_INT 2
2345: DIV
2346: INC
2347: ST_TO_ADDR
2348: LD_INT 1
2350: PUSH
2351: FOR_DOWNTO
2352: IFFALSE 2399
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2354: LD_VAR 0 8
2358: PPUSH
2359: LD_VAR 0 7
2363: PUSH
2364: LD_VAR 0 2
2368: PUSH
2369: LD_INT 2
2371: MUL
2372: PUSH
2373: LD_INT 1
2375: MINUS
2376: ARRAY
2377: PPUSH
2378: LD_VAR 0 7
2382: PUSH
2383: LD_VAR 0 2
2387: PUSH
2388: LD_INT 2
2390: MUL
2391: ARRAY
2392: PPUSH
2393: CALL_OW 171
2397: GO 2351
2399: POP
2400: POP
// AddComMoveToArea ( veh , areas [ k ] [ 1 ] ) ;
2401: LD_VAR 0 8
2405: PPUSH
2406: LD_VAR 0 5
2410: PUSH
2411: LD_VAR 0 4
2415: ARRAY
2416: PUSH
2417: LD_INT 1
2419: ARRAY
2420: PPUSH
2421: CALL_OW 173
// repeat wait ( 0 0$1 ) ;
2425: LD_INT 35
2427: PPUSH
2428: CALL_OW 67
// until IsInArea ( veh , areas [ k ] [ 1 ] ) and GetCargo ( veh , c ) = 0 ;
2432: LD_VAR 0 8
2436: PPUSH
2437: LD_VAR 0 5
2441: PUSH
2442: LD_VAR 0 4
2446: ARRAY
2447: PUSH
2448: LD_INT 1
2450: ARRAY
2451: PPUSH
2452: CALL_OW 308
2456: PUSH
2457: LD_VAR 0 8
2461: PPUSH
2462: LD_VAR 0 3
2466: PPUSH
2467: CALL_OW 289
2471: PUSH
2472: LD_INT 0
2474: EQUAL
2475: AND
2476: IFFALSE 2425
// RemoveUnit ( veh ) ;
2478: LD_VAR 0 8
2482: PPUSH
2483: CALL_OW 64
// end ;
2487: LD_VAR 0 1
2491: RET
// every 3 3$00 do
2492: GO 2494
2494: DISABLE
// begin enable ;
2495: ENABLE
// SpawnCargo ;
2496: CALL 1911 0 0
// end ;
2500: END
// export function PrepareDefenders ; var i , tmp ; begin
2501: LD_INT 0
2503: PPUSH
2504: PPUSH
2505: PPUSH
// if defenders then
2506: LD_EXP 20
2510: IFFALSE 2514
// exit ;
2512: GO 2786
// for i = 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
2514: LD_ADDR_VAR 0 2
2518: PUSH
2519: DOUBLE
2520: LD_INT 1
2522: DEC
2523: ST_TO_ADDR
2524: LD_INT 4
2526: PUSH
2527: LD_INT 5
2529: PUSH
2530: LD_INT 6
2532: PUSH
2533: LD_INT 7
2535: PUSH
2536: EMPTY
2537: LIST
2538: LIST
2539: LIST
2540: LIST
2541: PUSH
2542: LD_OWVAR 67
2546: ARRAY
2547: PUSH
2548: FOR_TO
2549: IFFALSE 2688
// begin tmp := Produce ( amfac2 , [ us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_remote , [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ) ;
2551: LD_ADDR_VAR 0 3
2555: PUSH
2556: LD_INT 6
2558: PPUSH
2559: LD_INT 2
2561: PUSH
2562: LD_INT 3
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: PUSH
2569: LD_INT 1
2571: PPUSH
2572: LD_INT 2
2574: PPUSH
2575: CALL_OW 12
2579: ARRAY
2580: PPUSH
2581: LD_INT 1
2583: PUSH
2584: LD_INT 3
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: PUSH
2591: LD_INT 1
2593: PPUSH
2594: LD_INT 2
2596: PPUSH
2597: CALL_OW 12
2601: ARRAY
2602: PPUSH
2603: LD_INT 2
2605: PPUSH
2606: LD_INT 4
2608: PUSH
2609: LD_INT 5
2611: PUSH
2612: LD_INT 9
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: LIST
2619: PUSH
2620: LD_INT 1
2622: PPUSH
2623: LD_INT 3
2625: PPUSH
2626: CALL_OW 12
2630: ARRAY
2631: PPUSH
2632: CALL 37808 0 5
2636: ST_TO_ADDR
// if tmp then
2637: LD_VAR 0 3
2641: IFFALSE 2686
// AddComConstruct ( amfac2 , tmp [ 1 ] , tmp [ 2 ] , tmp [ 3 ] , tmp [ 4 ] ) ;
2643: LD_INT 6
2645: PPUSH
2646: LD_VAR 0 3
2650: PUSH
2651: LD_INT 1
2653: ARRAY
2654: PPUSH
2655: LD_VAR 0 3
2659: PUSH
2660: LD_INT 2
2662: ARRAY
2663: PPUSH
2664: LD_VAR 0 3
2668: PUSH
2669: LD_INT 3
2671: ARRAY
2672: PPUSH
2673: LD_VAR 0 3
2677: PUSH
2678: LD_INT 4
2680: ARRAY
2681: PPUSH
2682: CALL_OW 185
// end ;
2686: GO 2548
2688: POP
2689: POP
// repeat wait ( 0 0$1 ) ;
2690: LD_INT 35
2692: PPUSH
2693: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
2697: LD_INT 22
2699: PUSH
2700: LD_INT 1
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: PUSH
2707: LD_INT 33
2709: PUSH
2710: LD_INT 2
2712: PUSH
2713: EMPTY
2714: LIST
2715: LIST
2716: PUSH
2717: EMPTY
2718: LIST
2719: LIST
2720: PPUSH
2721: CALL_OW 69
2725: PUSH
2726: LD_INT 4
2728: PUSH
2729: LD_INT 5
2731: PUSH
2732: LD_INT 6
2734: PUSH
2735: LD_INT 7
2737: PUSH
2738: EMPTY
2739: LIST
2740: LIST
2741: LIST
2742: LIST
2743: PUSH
2744: LD_OWVAR 67
2748: ARRAY
2749: GREATEREQUAL
2750: IFFALSE 2690
// defenders := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ;
2752: LD_ADDR_EXP 20
2756: PUSH
2757: LD_INT 22
2759: PUSH
2760: LD_INT 1
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: PUSH
2767: LD_INT 33
2769: PUSH
2770: LD_INT 2
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: PUSH
2777: EMPTY
2778: LIST
2779: LIST
2780: PPUSH
2781: CALL_OW 69
2785: ST_TO_ADDR
// end ;
2786: LD_VAR 0 1
2790: RET
// export function Defend ; var i , un , veh , tmp ; begin
2791: LD_INT 0
2793: PPUSH
2794: PPUSH
2795: PPUSH
2796: PPUSH
2797: PPUSH
// defcon_wave := defcon_wave + 1 ;
2798: LD_ADDR_EXP 22
2802: PUSH
2803: LD_EXP 22
2807: PUSH
2808: LD_INT 1
2810: PLUS
2811: ST_TO_ADDR
// if not defenders then
2812: LD_EXP 20
2816: NOT
2817: IFFALSE 2823
// PrepareDefenders ;
2819: CALL 2501 0 0
// if defcon_wave > 1 then
2823: LD_EXP 22
2827: PUSH
2828: LD_INT 1
2830: GREATER
2831: IFFALSE 3089
// begin for i = 1 to defcon_wave + 2 do
2833: LD_ADDR_VAR 0 2
2837: PUSH
2838: DOUBLE
2839: LD_INT 1
2841: DEC
2842: ST_TO_ADDR
2843: LD_EXP 22
2847: PUSH
2848: LD_INT 2
2850: PLUS
2851: PUSH
2852: FOR_TO
2853: IFFALSE 2995
// begin uc_side := 1 ;
2855: LD_ADDR_OWVAR 20
2859: PUSH
2860: LD_INT 1
2862: ST_TO_ADDR
// uc_nation := 1 ;
2863: LD_ADDR_OWVAR 21
2867: PUSH
2868: LD_INT 1
2870: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_siberite , control_manual , [ us_gatling_gun , us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
2871: LD_INT 4
2873: PPUSH
2874: LD_INT 3
2876: PPUSH
2877: LD_INT 1
2879: PPUSH
2880: LD_INT 4
2882: PUSH
2883: LD_INT 6
2885: PUSH
2886: LD_INT 7
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: LIST
2893: PUSH
2894: LD_INT 1
2896: PPUSH
2897: LD_INT 3
2899: PPUSH
2900: CALL_OW 12
2904: ARRAY
2905: PPUSH
2906: LD_INT 100
2908: PPUSH
2909: CALL 40188 0 5
// veh := CreateVehicle ;
2913: LD_ADDR_VAR 0 4
2917: PUSH
2918: CALL_OW 45
2922: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2923: LD_VAR 0 4
2927: PPUSH
2928: LD_INT 1
2930: PPUSH
2931: CALL_OW 233
// defenders := defenders ^ veh ;
2935: LD_ADDR_EXP 20
2939: PUSH
2940: LD_EXP 20
2944: PUSH
2945: LD_VAR 0 4
2949: ADD
2950: ST_TO_ADDR
// PrepareHuman ( false , 3 , 9 ) ;
2951: LD_INT 0
2953: PPUSH
2954: LD_INT 3
2956: PPUSH
2957: LD_INT 9
2959: PPUSH
2960: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2964: CALL_OW 44
2968: PPUSH
2969: LD_VAR 0 4
2973: PPUSH
2974: CALL_OW 52
// PlaceUnitArea ( veh , west_spawn , false ) ;
2978: LD_VAR 0 4
2982: PPUSH
2983: LD_INT 25
2985: PPUSH
2986: LD_INT 0
2988: PPUSH
2989: CALL_OW 49
// end ;
2993: GO 2852
2995: POP
2996: POP
// for i = 1 to defcon_wave do
2997: LD_ADDR_VAR 0 2
3001: PUSH
3002: DOUBLE
3003: LD_INT 1
3005: DEC
3006: ST_TO_ADDR
3007: LD_EXP 22
3011: PUSH
3012: FOR_TO
3013: IFFALSE 3087
// begin uc_side := 1 ;
3015: LD_ADDR_OWVAR 20
3019: PUSH
3020: LD_INT 1
3022: ST_TO_ADDR
// uc_nation := 1 ;
3023: LD_ADDR_OWVAR 21
3027: PUSH
3028: LD_INT 1
3030: ST_TO_ADDR
// PrepareHuman ( false , 5 , 9 ) ;
3031: LD_INT 0
3033: PPUSH
3034: LD_INT 5
3036: PPUSH
3037: LD_INT 9
3039: PPUSH
3040: CALL_OW 380
// un := CreateHuman ;
3044: LD_ADDR_VAR 0 3
3048: PUSH
3049: CALL_OW 44
3053: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
3054: LD_VAR 0 3
3058: PPUSH
3059: LD_INT 25
3061: PPUSH
3062: LD_INT 0
3064: PPUSH
3065: CALL_OW 49
// defenders := defenders ^ un ;
3069: LD_ADDR_EXP 20
3073: PUSH
3074: LD_EXP 20
3078: PUSH
3079: LD_VAR 0 3
3083: ADD
3084: ST_TO_ADDR
// end ;
3085: GO 3012
3087: POP
3088: POP
// end ; repeat wait ( 0 0$1 ) ;
3089: LD_INT 35
3091: PPUSH
3092: CALL_OW 67
// for i in defenders do
3096: LD_ADDR_VAR 0 2
3100: PUSH
3101: LD_EXP 20
3105: PUSH
3106: FOR_IN
3107: IFFALSE 3189
// begin if defcon and GetDistUnitXY ( i , defcon [ 1 ] , defcon [ 2 ] ) > 10 and not HasTask ( i ) then
3109: LD_EXP 21
3113: PUSH
3114: LD_VAR 0 2
3118: PPUSH
3119: LD_EXP 21
3123: PUSH
3124: LD_INT 1
3126: ARRAY
3127: PPUSH
3128: LD_EXP 21
3132: PUSH
3133: LD_INT 2
3135: ARRAY
3136: PPUSH
3137: CALL_OW 297
3141: PUSH
3142: LD_INT 10
3144: GREATER
3145: AND
3146: PUSH
3147: LD_VAR 0 2
3151: PPUSH
3152: CALL_OW 314
3156: NOT
3157: AND
3158: IFFALSE 3187
// ComAgressiveMove ( i , defcon [ 1 ] , defcon [ 2 ] ) ;
3160: LD_VAR 0 2
3164: PPUSH
3165: LD_EXP 21
3169: PUSH
3170: LD_INT 1
3172: ARRAY
3173: PPUSH
3174: LD_EXP 21
3178: PUSH
3179: LD_INT 2
3181: ARRAY
3182: PPUSH
3183: CALL_OW 114
// end ;
3187: GO 3106
3189: POP
3190: POP
// until not defenders ;
3191: LD_EXP 20
3195: NOT
3196: IFFALSE 3089
// end ;
3198: LD_VAR 0 1
3202: RET
// every 0 0$1 do var radar , i ;
3203: GO 3205
3205: DISABLE
3206: LD_INT 0
3208: PPUSH
3209: PPUSH
// begin uc_side := 1 ;
3210: LD_ADDR_OWVAR 20
3214: PUSH
3215: LD_INT 1
3217: ST_TO_ADDR
// uc_nation := 1 ;
3218: LD_ADDR_OWVAR 21
3222: PUSH
3223: LD_INT 1
3225: ST_TO_ADDR
// PrepareVehicle ( us_light_wheeled , engine_solar , control_computer , us_radar , 100 ) ;
3226: LD_INT 1
3228: PPUSH
3229: LD_INT 2
3231: PPUSH
3232: LD_INT 3
3234: PPUSH
3235: LD_INT 11
3237: PPUSH
3238: LD_INT 100
3240: PPUSH
3241: CALL 40188 0 5
// radar := CreateVehicle ;
3245: LD_ADDR_VAR 0 1
3249: PUSH
3250: CALL_OW 45
3254: ST_TO_ADDR
// SetDir ( radar , 4 ) ;
3255: LD_VAR 0 1
3259: PPUSH
3260: LD_INT 4
3262: PPUSH
3263: CALL_OW 233
// PlaceUnitXY ( radar , 51 , 45 , false ) ;
3267: LD_VAR 0 1
3271: PPUSH
3272: LD_INT 51
3274: PPUSH
3275: LD_INT 45
3277: PPUSH
3278: LD_INT 0
3280: PPUSH
3281: CALL_OW 48
// repeat AddComWait ( radar , 0 0$20 ) ;
3285: LD_VAR 0 1
3289: PPUSH
3290: LD_INT 700
3292: PPUSH
3293: CALL_OW 202
// AddComMoveXY ( radar , 65 , 75 ) ;
3297: LD_VAR 0 1
3301: PPUSH
3302: LD_INT 65
3304: PPUSH
3305: LD_INT 75
3307: PPUSH
3308: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3312: LD_VAR 0 1
3316: PPUSH
3317: LD_INT 350
3319: PPUSH
3320: CALL_OW 202
// AddComMoveXY ( radar , 83 , 87 ) ;
3324: LD_VAR 0 1
3328: PPUSH
3329: LD_INT 83
3331: PPUSH
3332: LD_INT 87
3334: PPUSH
3335: CALL_OW 171
// AddComWait ( radar , 0 0$15 ) ;
3339: LD_VAR 0 1
3343: PPUSH
3344: LD_INT 525
3346: PPUSH
3347: CALL_OW 202
// AddComMoveXY ( radar , 94 , 81 ) ;
3351: LD_VAR 0 1
3355: PPUSH
3356: LD_INT 94
3358: PPUSH
3359: LD_INT 81
3361: PPUSH
3362: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3366: LD_VAR 0 1
3370: PPUSH
3371: LD_INT 350
3373: PPUSH
3374: CALL_OW 202
// AddComMoveXY ( radar , 55 , 48 ) ;
3378: LD_VAR 0 1
3382: PPUSH
3383: LD_INT 55
3385: PPUSH
3386: LD_INT 48
3388: PPUSH
3389: CALL_OW 171
// wait ( 1 1$00 ) ;
3393: LD_INT 2100
3395: PPUSH
3396: CALL_OW 67
// until not IsOk ( radar ) ;
3400: LD_VAR 0 1
3404: PPUSH
3405: CALL_OW 302
3409: NOT
3410: IFFALSE 3285
// end ;
3412: PPOPN 2
3414: END
// every 7 7$30 trigger Difficulty > 1 and extra_patrol do var un ;
3415: LD_OWVAR 67
3419: PUSH
3420: LD_INT 1
3422: GREATER
3423: PUSH
3424: LD_EXP 11
3428: AND
3429: IFFALSE 3651
3431: GO 3433
3433: DISABLE
3434: LD_INT 0
3436: PPUSH
// begin enable ;
3437: ENABLE
// uc_side := 1 ;
3438: LD_ADDR_OWVAR 20
3442: PUSH
3443: LD_INT 1
3445: ST_TO_ADDR
// uc_nation := 1 ;
3446: LD_ADDR_OWVAR 21
3450: PUSH
3451: LD_INT 1
3453: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_gatling_gun , 100 ) ;
3454: LD_INT 5
3456: PPUSH
3457: LD_INT 3
3459: PPUSH
3460: LD_INT 3
3462: PPUSH
3463: LD_INT 4
3465: PPUSH
3466: LD_INT 100
3468: PPUSH
3469: CALL 40188 0 5
// un := CreateVehicle ;
3473: LD_ADDR_VAR 0 1
3477: PUSH
3478: CALL_OW 45
3482: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3483: LD_VAR 0 1
3487: PPUSH
3488: LD_INT 3
3490: PPUSH
3491: CALL_OW 233
// PlaceUnitXY ( un , 155 , 2 , false ) ;
3495: LD_VAR 0 1
3499: PPUSH
3500: LD_INT 155
3502: PPUSH
3503: LD_INT 2
3505: PPUSH
3506: LD_INT 0
3508: PPUSH
3509: CALL_OW 48
// ComAgressiveMove ( un , 169 , 77 ) ;
3513: LD_VAR 0 1
3517: PPUSH
3518: LD_INT 169
3520: PPUSH
3521: LD_INT 77
3523: PPUSH
3524: CALL_OW 114
// AddComWait ( un , 0 0$2 ) ;
3528: LD_VAR 0 1
3532: PPUSH
3533: LD_INT 70
3535: PPUSH
3536: CALL_OW 202
// AddComAgressiveMove ( un , 134 , 62 ) ;
3540: LD_VAR 0 1
3544: PPUSH
3545: LD_INT 134
3547: PPUSH
3548: LD_INT 62
3550: PPUSH
3551: CALL_OW 174
// AddComAgressiveMove ( un , 103 , 42 ) ;
3555: LD_VAR 0 1
3559: PPUSH
3560: LD_INT 103
3562: PPUSH
3563: LD_INT 42
3565: PPUSH
3566: CALL_OW 174
// AddComWait ( un , 0 0$2 ) ;
3570: LD_VAR 0 1
3574: PPUSH
3575: LD_INT 70
3577: PPUSH
3578: CALL_OW 202
// AddComAgressiveMove ( un , 84 , 2 ) ;
3582: LD_VAR 0 1
3586: PPUSH
3587: LD_INT 84
3589: PPUSH
3590: LD_INT 2
3592: PPUSH
3593: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
3597: LD_INT 35
3599: PPUSH
3600: CALL_OW 67
// if IsDead ( un ) then
3604: LD_VAR 0 1
3608: PPUSH
3609: CALL_OW 301
3613: IFFALSE 3625
// begin extra_patrol := false ;
3615: LD_ADDR_EXP 11
3619: PUSH
3620: LD_INT 0
3622: ST_TO_ADDR
// exit ;
3623: GO 3651
// end ; until IsAt ( un , 84 , 2 ) ;
3625: LD_VAR 0 1
3629: PPUSH
3630: LD_INT 84
3632: PPUSH
3633: LD_INT 2
3635: PPUSH
3636: CALL_OW 307
3640: IFFALSE 3597
// RemoveUnit ( un ) ;
3642: LD_VAR 0 1
3646: PPUSH
3647: CALL_OW 64
// end ; end_of_file
3651: PPOPN 1
3653: END
// export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Mike ; export function PrepareFriends ; var i , tmp , buildings , areas , bunkers , cl ; begin
3654: LD_INT 0
3656: PPUSH
3657: PPUSH
3658: PPUSH
3659: PPUSH
3660: PPUSH
3661: PPUSH
3662: PPUSH
// uc_side := 4 ;
3663: LD_ADDR_OWVAR 20
3667: PUSH
3668: LD_INT 4
3670: ST_TO_ADDR
// uc_nation := 1 ;
3671: LD_ADDR_OWVAR 21
3675: PUSH
3676: LD_INT 1
3678: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 10c_ ) ;
3679: LD_ADDR_EXP 37
3683: PUSH
3684: LD_STRING DeltaDoctor
3686: PPUSH
3687: LD_EXP 1
3691: NOT
3692: PPUSH
3693: LD_STRING 10c_
3695: PPUSH
3696: CALL 35173 0 3
3700: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 10c_ ) ;
3701: LD_ADDR_EXP 36
3705: PUSH
3706: LD_STRING Joan
3708: PPUSH
3709: LD_EXP 1
3713: NOT
3714: PPUSH
3715: LD_STRING 10c_
3717: PPUSH
3718: CALL 35173 0 3
3722: ST_TO_ADDR
// if Joan then
3723: LD_EXP 36
3727: IFFALSE 3758
// friends := Insert ( friends , friends + 1 , Joan ) ;
3729: LD_ADDR_EXP 4
3733: PUSH
3734: LD_EXP 4
3738: PPUSH
3739: LD_EXP 4
3743: PUSH
3744: LD_INT 1
3746: PLUS
3747: PPUSH
3748: LD_EXP 36
3752: PPUSH
3753: CALL_OW 2
3757: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 10c_ ) ;
3758: LD_ADDR_EXP 35
3762: PUSH
3763: LD_STRING Simms
3765: PPUSH
3766: LD_EXP 1
3770: NOT
3771: PPUSH
3772: LD_STRING 10c_
3774: PPUSH
3775: CALL 35173 0 3
3779: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 11_ ) ;
3780: LD_ADDR_EXP 34
3784: PUSH
3785: LD_STRING Kikuchi
3787: PPUSH
3788: LD_EXP 1
3792: NOT
3793: PPUSH
3794: LD_STRING 11_
3796: PPUSH
3797: CALL 35173 0 3
3801: ST_TO_ADDR
// if Kikuchi then
3802: LD_EXP 34
3806: IFFALSE 3837
// friends := Insert ( friends , friends + 1 , Kikuchi ) ;
3808: LD_ADDR_EXP 4
3812: PUSH
3813: LD_EXP 4
3817: PPUSH
3818: LD_EXP 4
3822: PUSH
3823: LD_INT 1
3825: PLUS
3826: PPUSH
3827: LD_EXP 34
3831: PPUSH
3832: CALL_OW 2
3836: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 11_ ) ;
3837: LD_ADDR_EXP 33
3841: PUSH
3842: LD_STRING Frank
3844: PPUSH
3845: LD_EXP 1
3849: NOT
3850: PPUSH
3851: LD_STRING 11_
3853: PPUSH
3854: CALL 35173 0 3
3858: ST_TO_ADDR
// if Frank then
3859: LD_EXP 33
3863: IFFALSE 3894
// friends := Insert ( friends , friends + 1 , Frank ) ;
3865: LD_ADDR_EXP 4
3869: PUSH
3870: LD_EXP 4
3874: PPUSH
3875: LD_EXP 4
3879: PUSH
3880: LD_INT 1
3882: PLUS
3883: PPUSH
3884: LD_EXP 33
3888: PPUSH
3889: CALL_OW 2
3893: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , 11_ ) ;
3894: LD_ADDR_EXP 32
3898: PUSH
3899: LD_STRING Gary
3901: PPUSH
3902: LD_EXP 1
3906: NOT
3907: PPUSH
3908: LD_STRING 11_
3910: PPUSH
3911: CALL 35173 0 3
3915: ST_TO_ADDR
// if Gary then
3916: LD_EXP 32
3920: IFFALSE 3951
// friends := Insert ( friends , friends + 1 , Gary ) ;
3922: LD_ADDR_EXP 4
3926: PUSH
3927: LD_EXP 4
3931: PPUSH
3932: LD_EXP 4
3936: PUSH
3937: LD_INT 1
3939: PLUS
3940: PPUSH
3941: LD_EXP 32
3945: PPUSH
3946: CALL_OW 2
3950: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , ( not debug ) , 11_ ) ;
3951: LD_ADDR_EXP 31
3955: PUSH
3956: LD_STRING Cornell
3958: PPUSH
3959: LD_EXP 1
3963: NOT
3964: PPUSH
3965: LD_STRING 11_
3967: PPUSH
3968: CALL 35173 0 3
3972: ST_TO_ADDR
// if Cornel then
3973: LD_EXP 31
3977: IFFALSE 4008
// friends := Insert ( friends , friends + 1 , Cornel ) ;
3979: LD_ADDR_EXP 4
3983: PUSH
3984: LD_EXP 4
3988: PPUSH
3989: LD_EXP 4
3993: PUSH
3994: LD_INT 1
3996: PLUS
3997: PPUSH
3998: LD_EXP 31
4002: PPUSH
4003: CALL_OW 2
4007: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , 11_ ) ;
4008: LD_ADDR_EXP 30
4012: PUSH
4013: LD_STRING Houten
4015: PPUSH
4016: LD_EXP 1
4020: NOT
4021: PPUSH
4022: LD_STRING 11_
4024: PPUSH
4025: CALL 35173 0 3
4029: ST_TO_ADDR
// if Houten then
4030: LD_EXP 30
4034: IFFALSE 4065
// friends := Insert ( friends , friends + 1 , Houten ) ;
4036: LD_ADDR_EXP 4
4040: PUSH
4041: LD_EXP 4
4045: PPUSH
4046: LD_EXP 4
4050: PUSH
4051: LD_INT 1
4053: PLUS
4054: PPUSH
4055: LD_EXP 30
4059: PPUSH
4060: CALL_OW 2
4064: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 11_ ) ;
4065: LD_ADDR_EXP 29
4069: PUSH
4070: LD_STRING Gladstone
4072: PPUSH
4073: LD_EXP 1
4077: NOT
4078: PPUSH
4079: LD_STRING 11_
4081: PPUSH
4082: CALL 35173 0 3
4086: ST_TO_ADDR
// if Gladstone then
4087: LD_EXP 29
4091: IFFALSE 4122
// friends := Insert ( friends , friends + 1 , Gladstone ) ;
4093: LD_ADDR_EXP 4
4097: PUSH
4098: LD_EXP 4
4102: PPUSH
4103: LD_EXP 4
4107: PUSH
4108: LD_INT 1
4110: PLUS
4111: PPUSH
4112: LD_EXP 29
4116: PPUSH
4117: CALL_OW 2
4121: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 11_ ) ;
4122: LD_ADDR_EXP 23
4126: PUSH
4127: LD_STRING Lisa
4129: PPUSH
4130: LD_EXP 1
4134: NOT
4135: PPUSH
4136: LD_STRING 11_
4138: PPUSH
4139: CALL 35173 0 3
4143: ST_TO_ADDR
// if Lisa then
4144: LD_EXP 23
4148: IFFALSE 4173
// friends := Insert ( friends , 1 , Lisa ) ;
4150: LD_ADDR_EXP 4
4154: PUSH
4155: LD_EXP 4
4159: PPUSH
4160: LD_INT 1
4162: PPUSH
4163: LD_EXP 23
4167: PPUSH
4168: CALL_OW 2
4172: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 11_ ) ;
4173: LD_ADDR_EXP 24
4177: PUSH
4178: LD_STRING Donaldson
4180: PPUSH
4181: LD_EXP 1
4185: NOT
4186: PPUSH
4187: LD_STRING 11_
4189: PPUSH
4190: CALL 35173 0 3
4194: ST_TO_ADDR
// if Donaldson then
4195: LD_EXP 24
4199: IFFALSE 4230
// friends := Insert ( friends , friends + 1 , Donaldson ) ;
4201: LD_ADDR_EXP 4
4205: PUSH
4206: LD_EXP 4
4210: PPUSH
4211: LD_EXP 4
4215: PUSH
4216: LD_INT 1
4218: PLUS
4219: PPUSH
4220: LD_EXP 24
4224: PPUSH
4225: CALL_OW 2
4229: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 11_ ) ;
4230: LD_ADDR_EXP 25
4234: PUSH
4235: LD_STRING Bobby
4237: PPUSH
4238: LD_EXP 1
4242: NOT
4243: PPUSH
4244: LD_STRING 11_
4246: PPUSH
4247: CALL 35173 0 3
4251: ST_TO_ADDR
// if Bobby then
4252: LD_EXP 25
4256: IFFALSE 4287
// friends := Insert ( friends , friends + 1 , Bobby ) ;
4258: LD_ADDR_EXP 4
4262: PUSH
4263: LD_EXP 4
4267: PPUSH
4268: LD_EXP 4
4272: PUSH
4273: LD_INT 1
4275: PLUS
4276: PPUSH
4277: LD_EXP 25
4281: PPUSH
4282: CALL_OW 2
4286: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 11_ ) ;
4287: LD_ADDR_EXP 26
4291: PUSH
4292: LD_STRING Cyrus
4294: PPUSH
4295: LD_EXP 1
4299: NOT
4300: PPUSH
4301: LD_STRING 11_
4303: PPUSH
4304: CALL 35173 0 3
4308: ST_TO_ADDR
// if Cyrus then
4309: LD_EXP 26
4313: IFFALSE 4344
// friends := Insert ( friends , friends + 1 , Cyrus ) ;
4315: LD_ADDR_EXP 4
4319: PUSH
4320: LD_EXP 4
4324: PPUSH
4325: LD_EXP 4
4329: PUSH
4330: LD_INT 1
4332: PLUS
4333: PPUSH
4334: LD_EXP 26
4338: PPUSH
4339: CALL_OW 2
4343: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 11_ ) ;
4344: LD_ADDR_EXP 27
4348: PUSH
4349: LD_STRING Denis
4351: PPUSH
4352: LD_EXP 1
4356: NOT
4357: PPUSH
4358: LD_STRING 11_
4360: PPUSH
4361: CALL 35173 0 3
4365: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , 11_ ) ;
4366: LD_ADDR_EXP 28
4370: PUSH
4371: LD_STRING Brown
4373: PPUSH
4374: LD_EXP 1
4378: NOT
4379: PPUSH
4380: LD_STRING 11_
4382: PPUSH
4383: CALL 35173 0 3
4387: ST_TO_ADDR
// if Brown then
4388: LD_EXP 28
4392: IFFALSE 4423
// friends := Insert ( friends , friends + 1 , Brown ) ;
4394: LD_ADDR_EXP 4
4398: PUSH
4399: LD_EXP 4
4403: PPUSH
4404: LD_EXP 4
4408: PUSH
4409: LD_INT 1
4411: PLUS
4412: PPUSH
4413: LD_EXP 28
4417: PPUSH
4418: CALL_OW 2
4422: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , 10c_ ) ;
4423: LD_ADDR_EXP 38
4427: PUSH
4428: LD_STRING Mike
4430: PPUSH
4431: LD_EXP 1
4435: NOT
4436: PPUSH
4437: LD_STRING 10c_
4439: PPUSH
4440: CALL 35173 0 3
4444: ST_TO_ADDR
// if Mike then
4445: LD_EXP 38
4449: IFFALSE 4490
// begin SetClass ( Mike , class_apeman_engineer ) ;
4451: LD_EXP 38
4455: PPUSH
4456: LD_INT 16
4458: PPUSH
4459: CALL_OW 336
// PlaceUnitXY ( Mike , 180 , 87 , false ) ;
4463: LD_EXP 38
4467: PPUSH
4468: LD_INT 180
4470: PPUSH
4471: LD_INT 87
4473: PPUSH
4474: LD_INT 0
4476: PPUSH
4477: CALL_OW 48
// ComHold ( Mike ) ;
4481: LD_EXP 38
4485: PPUSH
4486: CALL_OW 140
// end ; friends := friends ^ CreateCharacterSet ( 11c_others ) ^ CreateCharacterSet ( 11_others ) ;
4490: LD_ADDR_EXP 4
4494: PUSH
4495: LD_EXP 4
4499: PUSH
4500: LD_STRING 11c_others
4502: PPUSH
4503: CALL_OW 31
4507: ADD
4508: PUSH
4509: LD_STRING 11_others
4511: PPUSH
4512: CALL_OW 31
4516: ADD
4517: ST_TO_ADDR
// if friends < 18 then
4518: LD_EXP 4
4522: PUSH
4523: LD_INT 18
4525: LESS
4526: IFFALSE 4598
// for i = 1 to 18 do
4528: LD_ADDR_VAR 0 2
4532: PUSH
4533: DOUBLE
4534: LD_INT 1
4536: DEC
4537: ST_TO_ADDR
4538: LD_INT 18
4540: PUSH
4541: FOR_TO
4542: IFFALSE 4596
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 7 ) ;
4544: LD_INT 0
4546: PPUSH
4547: LD_INT 1
4549: PPUSH
4550: LD_INT 4
4552: PPUSH
4553: CALL_OW 12
4557: PPUSH
4558: LD_INT 7
4560: PPUSH
4561: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
4565: LD_ADDR_EXP 4
4569: PUSH
4570: LD_EXP 4
4574: PPUSH
4575: LD_EXP 4
4579: PUSH
4580: LD_INT 1
4582: PLUS
4583: PPUSH
4584: CALL_OW 44
4588: PPUSH
4589: CALL_OW 2
4593: ST_TO_ADDR
// end ;
4594: GO 4541
4596: POP
4597: POP
// for i in friends do
4598: LD_ADDR_VAR 0 2
4602: PUSH
4603: LD_EXP 4
4607: PUSH
4608: FOR_IN
4609: IFFALSE 4682
// if GetNation ( i ) = nation_american and GetSkill ( i , 1 ) >= GetSkill ( i , 4 ) then
4611: LD_VAR 0 2
4615: PPUSH
4616: CALL_OW 248
4620: PUSH
4621: LD_INT 1
4623: EQUAL
4624: PUSH
4625: LD_VAR 0 2
4629: PPUSH
4630: LD_INT 1
4632: PPUSH
4633: CALL_OW 259
4637: PUSH
4638: LD_VAR 0 2
4642: PPUSH
4643: LD_INT 4
4645: PPUSH
4646: CALL_OW 259
4650: GREATEREQUAL
4651: AND
4652: IFFALSE 4668
// SetClass ( i , class_soldier ) else
4654: LD_VAR 0 2
4658: PPUSH
4659: LD_INT 1
4661: PPUSH
4662: CALL_OW 336
4666: GO 4680
// SetClass ( i , class_scientistic ) ;
4668: LD_VAR 0 2
4672: PPUSH
4673: LD_INT 4
4675: PPUSH
4676: CALL_OW 336
4680: GO 4608
4682: POP
4683: POP
// if Frank then
4684: LD_EXP 33
4688: IFFALSE 4702
// SetClass ( Frank , class_sniper ) ;
4690: LD_EXP 33
4694: PPUSH
4695: LD_INT 5
4697: PPUSH
4698: CALL_OW 336
// SetClass ( [ Joan , Denis , DeltaDoctor , Simms ] , class_scientistic ) ;
4702: LD_EXP 36
4706: PUSH
4707: LD_EXP 27
4711: PUSH
4712: LD_EXP 37
4716: PUSH
4717: LD_EXP 35
4721: PUSH
4722: EMPTY
4723: LIST
4724: LIST
4725: LIST
4726: LIST
4727: PPUSH
4728: LD_INT 4
4730: PPUSH
4731: CALL_OW 336
// selected = CharacterSelection (  , 7 , 7 , [ sel_dont_change_class , JMM , Roth , Simms , Denis , DeltaDoctor , sel_not_hired , sel_changeable , sel_change_class ] ^ friends , [ class_soldier , [ class_scientistic , 2 ] , [ class_sniper , 0 , 3 ] ] ) ;
4735: LD_ADDR_EXP 3
4739: PUSH
4740: LD_STRING 
4742: PPUSH
4743: LD_INT 7
4745: PPUSH
4746: LD_INT 7
4748: PPUSH
4749: LD_INT -6
4751: PUSH
4752: LD_EXP 14
4756: PUSH
4757: LD_EXP 15
4761: PUSH
4762: LD_EXP 35
4766: PUSH
4767: LD_EXP 27
4771: PUSH
4772: LD_EXP 37
4776: PUSH
4777: LD_INT -2
4779: PUSH
4780: LD_INT -3
4782: PUSH
4783: LD_INT -5
4785: PUSH
4786: EMPTY
4787: LIST
4788: LIST
4789: LIST
4790: LIST
4791: LIST
4792: LIST
4793: LIST
4794: LIST
4795: LIST
4796: PUSH
4797: LD_EXP 4
4801: ADD
4802: PPUSH
4803: LD_INT 1
4805: PUSH
4806: LD_INT 4
4808: PUSH
4809: LD_INT 2
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: PUSH
4816: LD_INT 5
4818: PUSH
4819: LD_INT 0
4821: PUSH
4822: LD_INT 3
4824: PUSH
4825: EMPTY
4826: LIST
4827: LIST
4828: LIST
4829: PUSH
4830: EMPTY
4831: LIST
4832: LIST
4833: LIST
4834: PPUSH
4835: CALL_OW 42
4839: ST_TO_ADDR
// if Simms then
4840: LD_EXP 35
4844: IFFALSE 4862
// selected := selected ^ Simms ;
4846: LD_ADDR_EXP 3
4850: PUSH
4851: LD_EXP 3
4855: PUSH
4856: LD_EXP 35
4860: ADD
4861: ST_TO_ADDR
// if Denis then
4862: LD_EXP 27
4866: IFFALSE 4884
// selected := selected ^ Denis ;
4868: LD_ADDR_EXP 3
4872: PUSH
4873: LD_EXP 3
4877: PUSH
4878: LD_EXP 27
4882: ADD
4883: ST_TO_ADDR
// if DeltaDoctor then
4884: LD_EXP 37
4888: IFFALSE 4906
// selected := selected ^ DeltaDoctor ;
4890: LD_ADDR_EXP 3
4894: PUSH
4895: LD_EXP 3
4899: PUSH
4900: LD_EXP 37
4904: ADD
4905: ST_TO_ADDR
// friends := friends diff selected ;
4906: LD_ADDR_EXP 4
4910: PUSH
4911: LD_EXP 4
4915: PUSH
4916: LD_EXP 3
4920: DIFF
4921: ST_TO_ADDR
// buildings := [ [ ambar1 , ambar2 , ambar3 ] , [ amlab2 , amlab3 , amlab4 ] ] ;
4922: LD_ADDR_VAR 0 4
4926: PUSH
4927: LD_INT 111
4929: PUSH
4930: LD_INT 137
4932: PUSH
4933: LD_INT 51
4935: PUSH
4936: EMPTY
4937: LIST
4938: LIST
4939: LIST
4940: PUSH
4941: LD_INT 147
4943: PUSH
4944: LD_INT 129
4946: PUSH
4947: LD_INT 25
4949: PUSH
4950: EMPTY
4951: LIST
4952: LIST
4953: LIST
4954: PUSH
4955: EMPTY
4956: LIST
4957: LIST
4958: ST_TO_ADDR
// areas := [ friends_spawn_1 , friends_spawn_2 , friends_spawn_3 , friends_spawn_4 , friends_spawn_5 , friends_spawn_6 ] ;
4959: LD_ADDR_VAR 0 5
4963: PUSH
4964: LD_INT 5
4966: PUSH
4967: LD_INT 6
4969: PUSH
4970: LD_INT 7
4972: PUSH
4973: LD_INT 8
4975: PUSH
4976: LD_INT 17
4978: PUSH
4979: LD_INT 18
4981: PUSH
4982: EMPTY
4983: LIST
4984: LIST
4985: LIST
4986: LIST
4987: LIST
4988: LIST
4989: ST_TO_ADDR
// for i in buildings do
4990: LD_ADDR_VAR 0 2
4994: PUSH
4995: LD_VAR 0 4
4999: PUSH
5000: FOR_IN
5001: IFFALSE 5017
// SetSide ( i , 4 ) ;
5003: LD_VAR 0 2
5007: PPUSH
5008: LD_INT 4
5010: PPUSH
5011: CALL_OW 235
5015: GO 5000
5017: POP
5018: POP
// for i in selected do
5019: LD_ADDR_VAR 0 2
5023: PUSH
5024: LD_EXP 3
5028: PUSH
5029: FOR_IN
5030: IFFALSE 5370
// begin if GetClass ( i ) in [ 1 , 5 ] then
5032: LD_VAR 0 2
5036: PPUSH
5037: CALL_OW 257
5041: PUSH
5042: LD_INT 1
5044: PUSH
5045: LD_INT 5
5047: PUSH
5048: EMPTY
5049: LIST
5050: LIST
5051: IN
5052: IFFALSE 5212
// begin if buildings [ 1 ] then
5054: LD_VAR 0 4
5058: PUSH
5059: LD_INT 1
5061: ARRAY
5062: IFFALSE 5123
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
5064: LD_VAR 0 2
5068: PPUSH
5069: LD_VAR 0 4
5073: PUSH
5074: LD_INT 1
5076: ARRAY
5077: PUSH
5078: LD_INT 1
5080: ARRAY
5081: PPUSH
5082: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
5086: LD_ADDR_VAR 0 4
5090: PUSH
5091: LD_VAR 0 4
5095: PPUSH
5096: LD_INT 1
5098: PPUSH
5099: LD_VAR 0 4
5103: PUSH
5104: LD_INT 1
5106: ARRAY
5107: PPUSH
5108: LD_INT 1
5110: PPUSH
5111: CALL_OW 3
5115: PPUSH
5116: CALL_OW 1
5120: ST_TO_ADDR
// end else
5121: GO 5210
// begin if not areas then
5123: LD_VAR 0 5
5127: NOT
5128: IFFALSE 5162
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5130: LD_VAR 0 2
5134: PPUSH
5135: LD_INT 87
5137: PPUSH
5138: LD_INT 68
5140: PPUSH
5141: LD_INT 8
5143: PPUSH
5144: LD_INT 0
5146: PPUSH
5147: CALL_OW 50
// ComHold ( i ) ;
5151: LD_VAR 0 2
5155: PPUSH
5156: CALL_OW 140
// end else
5160: GO 5210
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5162: LD_VAR 0 2
5166: PPUSH
5167: LD_VAR 0 5
5171: PUSH
5172: LD_INT 1
5174: ARRAY
5175: PPUSH
5176: LD_INT 0
5178: PPUSH
5179: CALL_OW 49
// ComHold ( i ) ;
5183: LD_VAR 0 2
5187: PPUSH
5188: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5192: LD_ADDR_VAR 0 5
5196: PUSH
5197: LD_VAR 0 5
5201: PPUSH
5202: LD_INT 1
5204: PPUSH
5205: CALL_OW 3
5209: ST_TO_ADDR
// end ; end ; end else
5210: GO 5368
// begin if buildings [ 2 ] then
5212: LD_VAR 0 4
5216: PUSH
5217: LD_INT 2
5219: ARRAY
5220: IFFALSE 5281
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
5222: LD_VAR 0 2
5226: PPUSH
5227: LD_VAR 0 4
5231: PUSH
5232: LD_INT 2
5234: ARRAY
5235: PUSH
5236: LD_INT 1
5238: ARRAY
5239: PPUSH
5240: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
5244: LD_ADDR_VAR 0 4
5248: PUSH
5249: LD_VAR 0 4
5253: PPUSH
5254: LD_INT 2
5256: PPUSH
5257: LD_VAR 0 4
5261: PUSH
5262: LD_INT 2
5264: ARRAY
5265: PPUSH
5266: LD_INT 1
5268: PPUSH
5269: CALL_OW 3
5273: PPUSH
5274: CALL_OW 1
5278: ST_TO_ADDR
// end else
5279: GO 5368
// begin if not areas then
5281: LD_VAR 0 5
5285: NOT
5286: IFFALSE 5320
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5288: LD_VAR 0 2
5292: PPUSH
5293: LD_INT 87
5295: PPUSH
5296: LD_INT 68
5298: PPUSH
5299: LD_INT 8
5301: PPUSH
5302: LD_INT 0
5304: PPUSH
5305: CALL_OW 50
// ComHold ( i ) ;
5309: LD_VAR 0 2
5313: PPUSH
5314: CALL_OW 140
// end else
5318: GO 5368
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5320: LD_VAR 0 2
5324: PPUSH
5325: LD_VAR 0 5
5329: PUSH
5330: LD_INT 1
5332: ARRAY
5333: PPUSH
5334: LD_INT 0
5336: PPUSH
5337: CALL_OW 49
// ComHold ( i ) ;
5341: LD_VAR 0 2
5345: PPUSH
5346: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5350: LD_ADDR_VAR 0 5
5354: PUSH
5355: LD_VAR 0 5
5359: PPUSH
5360: LD_INT 1
5362: PPUSH
5363: CALL_OW 3
5367: ST_TO_ADDR
// end ; end ; end ; end ;
5368: GO 5029
5370: POP
5371: POP
// bunkers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) ;
5372: LD_ADDR_VAR 0 6
5376: PUSH
5377: LD_INT 22
5379: PUSH
5380: LD_INT 1
5382: PUSH
5383: EMPTY
5384: LIST
5385: LIST
5386: PUSH
5387: LD_INT 30
5389: PUSH
5390: LD_INT 32
5392: PUSH
5393: EMPTY
5394: LIST
5395: LIST
5396: PUSH
5397: EMPTY
5398: LIST
5399: LIST
5400: PPUSH
5401: CALL_OW 69
5405: ST_TO_ADDR
// for i = bunkers - friends downto 1 do
5406: LD_ADDR_VAR 0 2
5410: PUSH
5411: DOUBLE
5412: LD_VAR 0 6
5416: PUSH
5417: LD_EXP 4
5421: MINUS
5422: INC
5423: ST_TO_ADDR
5424: LD_INT 1
5426: PUSH
5427: FOR_DOWNTO
5428: IFFALSE 5495
// begin PrepareHuman ( false , 1 , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
5430: LD_INT 0
5432: PPUSH
5433: LD_INT 1
5435: PPUSH
5436: LD_INT 7
5438: PUSH
5439: LD_INT 8
5441: PUSH
5442: LD_INT 9
5444: PUSH
5445: LD_INT 10
5447: PUSH
5448: EMPTY
5449: LIST
5450: LIST
5451: LIST
5452: LIST
5453: PUSH
5454: LD_OWVAR 67
5458: ARRAY
5459: PPUSH
5460: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
5464: LD_ADDR_EXP 4
5468: PUSH
5469: LD_EXP 4
5473: PPUSH
5474: LD_EXP 4
5478: PUSH
5479: LD_INT 1
5481: PLUS
5482: PPUSH
5483: CALL_OW 44
5487: PPUSH
5488: CALL_OW 2
5492: ST_TO_ADDR
// end ;
5493: GO 5427
5495: POP
5496: POP
// if friends then
5497: LD_EXP 4
5501: IFFALSE 5617
// begin tmp := friends ;
5503: LD_ADDR_VAR 0 3
5507: PUSH
5508: LD_EXP 4
5512: ST_TO_ADDR
// for i = 1 to bunkers do
5513: LD_ADDR_VAR 0 2
5517: PUSH
5518: DOUBLE
5519: LD_INT 1
5521: DEC
5522: ST_TO_ADDR
5523: LD_VAR 0 6
5527: PUSH
5528: FOR_TO
5529: IFFALSE 5615
// begin SetSide ( tmp [ tmp ] , 1 ) ;
5531: LD_VAR 0 3
5535: PUSH
5536: LD_VAR 0 3
5540: ARRAY
5541: PPUSH
5542: LD_INT 1
5544: PPUSH
5545: CALL_OW 235
// SetClass ( tmp [ tmp ] , 1 ) ;
5549: LD_VAR 0 3
5553: PUSH
5554: LD_VAR 0 3
5558: ARRAY
5559: PPUSH
5560: LD_INT 1
5562: PPUSH
5563: CALL_OW 336
// PlaceHumanInUnit ( tmp [ tmp ] , bunkers [ i ] ) ;
5567: LD_VAR 0 3
5571: PUSH
5572: LD_VAR 0 3
5576: ARRAY
5577: PPUSH
5578: LD_VAR 0 6
5582: PUSH
5583: LD_VAR 0 2
5587: ARRAY
5588: PPUSH
5589: CALL_OW 52
// tmp := Delete ( tmp , tmp ) ;
5593: LD_ADDR_VAR 0 3
5597: PUSH
5598: LD_VAR 0 3
5602: PPUSH
5603: LD_VAR 0 3
5607: PPUSH
5608: CALL_OW 3
5612: ST_TO_ADDR
// end ;
5613: GO 5528
5615: POP
5616: POP
// end ; areas := areas union [ guard_spawn_1 , guard_spawn_2 , guard_spawn_3 , guard_spawn_4 , guard_spawn_5 , guard_spawn_6 , guard_spawn_7 , guard_spawn_8 , guard_spawn_9 , guard_spawn_10 , guard_spawn_11 , guard_spawn_12 , guard_spawn_13 , guard_spawn_14 , guard_spawn_15 , guard_spawn_16 , guard_spawn_17 , guard_spawn_18 , guard_spawn_19 , guard_spawn_20 ] ;
5617: LD_ADDR_VAR 0 5
5621: PUSH
5622: LD_VAR 0 5
5626: PUSH
5627: LD_INT 9
5629: PUSH
5630: LD_INT 10
5632: PUSH
5633: LD_INT 11
5635: PUSH
5636: LD_INT 12
5638: PUSH
5639: LD_INT 13
5641: PUSH
5642: LD_INT 14
5644: PUSH
5645: LD_INT 15
5647: PUSH
5648: LD_INT 16
5650: PUSH
5651: LD_INT 26
5653: PUSH
5654: LD_INT 27
5656: PUSH
5657: LD_INT 28
5659: PUSH
5660: LD_INT 29
5662: PUSH
5663: LD_INT 30
5665: PUSH
5666: LD_INT 31
5668: PUSH
5669: LD_INT 32
5671: PUSH
5672: LD_INT 33
5674: PUSH
5675: LD_INT 34
5677: PUSH
5678: LD_INT 35
5680: PUSH
5681: LD_INT 36
5683: PUSH
5684: LD_INT 37
5686: PUSH
5687: EMPTY
5688: LIST
5689: LIST
5690: LIST
5691: LIST
5692: LIST
5693: LIST
5694: LIST
5695: LIST
5696: LIST
5697: LIST
5698: LIST
5699: LIST
5700: LIST
5701: LIST
5702: LIST
5703: LIST
5704: LIST
5705: LIST
5706: LIST
5707: LIST
5708: UNION
5709: ST_TO_ADDR
// for i in friends do
5710: LD_ADDR_VAR 0 2
5714: PUSH
5715: LD_EXP 4
5719: PUSH
5720: FOR_IN
5721: IFFALSE 6008
// begin SetTag ( i , 2 ) ;
5723: LD_VAR 0 2
5727: PPUSH
5728: LD_INT 2
5730: PPUSH
5731: CALL_OW 109
// if not GetClass ( i ) in [ class_soldier , class_scientistic , class_sniper ] then
5735: LD_VAR 0 2
5739: PPUSH
5740: CALL_OW 257
5744: PUSH
5745: LD_INT 1
5747: PUSH
5748: LD_INT 4
5750: PUSH
5751: LD_INT 5
5753: PUSH
5754: EMPTY
5755: LIST
5756: LIST
5757: LIST
5758: IN
5759: NOT
5760: IFFALSE 5774
// SetClass ( i , 1 ) ;
5762: LD_VAR 0 2
5766: PPUSH
5767: LD_INT 1
5769: PPUSH
5770: CALL_OW 336
// if GetClass ( i ) in [ class_soldier , class_sniper ] and buildings [ 1 ] then
5774: LD_VAR 0 2
5778: PPUSH
5779: CALL_OW 257
5783: PUSH
5784: LD_INT 1
5786: PUSH
5787: LD_INT 5
5789: PUSH
5790: EMPTY
5791: LIST
5792: LIST
5793: IN
5794: PUSH
5795: LD_VAR 0 4
5799: PUSH
5800: LD_INT 1
5802: ARRAY
5803: AND
5804: IFFALSE 5865
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
5806: LD_VAR 0 2
5810: PPUSH
5811: LD_VAR 0 4
5815: PUSH
5816: LD_INT 1
5818: ARRAY
5819: PUSH
5820: LD_INT 1
5822: ARRAY
5823: PPUSH
5824: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
5828: LD_ADDR_VAR 0 4
5832: PUSH
5833: LD_VAR 0 4
5837: PPUSH
5838: LD_INT 1
5840: PPUSH
5841: LD_VAR 0 4
5845: PUSH
5846: LD_INT 1
5848: ARRAY
5849: PPUSH
5850: LD_INT 1
5852: PPUSH
5853: CALL_OW 3
5857: PPUSH
5858: CALL_OW 1
5862: ST_TO_ADDR
// continue ;
5863: GO 5720
// end ; if GetClass ( i ) = class_scientistic and buildings [ 2 ] then
5865: LD_VAR 0 2
5869: PPUSH
5870: CALL_OW 257
5874: PUSH
5875: LD_INT 4
5877: EQUAL
5878: PUSH
5879: LD_VAR 0 4
5883: PUSH
5884: LD_INT 2
5886: ARRAY
5887: AND
5888: IFFALSE 5949
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
5890: LD_VAR 0 2
5894: PPUSH
5895: LD_VAR 0 4
5899: PUSH
5900: LD_INT 2
5902: ARRAY
5903: PUSH
5904: LD_INT 1
5906: ARRAY
5907: PPUSH
5908: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
5912: LD_ADDR_VAR 0 4
5916: PUSH
5917: LD_VAR 0 4
5921: PPUSH
5922: LD_INT 2
5924: PPUSH
5925: LD_VAR 0 4
5929: PUSH
5930: LD_INT 2
5932: ARRAY
5933: PPUSH
5934: LD_INT 1
5936: PPUSH
5937: CALL_OW 3
5941: PPUSH
5942: CALL_OW 1
5946: ST_TO_ADDR
// continue ;
5947: GO 5720
// end ; PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5949: LD_VAR 0 2
5953: PPUSH
5954: LD_VAR 0 5
5958: PUSH
5959: LD_INT 1
5961: ARRAY
5962: PPUSH
5963: LD_INT 0
5965: PPUSH
5966: CALL_OW 49
// areas := Delete ( areas , 1 ) ;
5970: LD_ADDR_VAR 0 5
5974: PUSH
5975: LD_VAR 0 5
5979: PPUSH
5980: LD_INT 1
5982: PPUSH
5983: CALL_OW 3
5987: ST_TO_ADDR
// ComHold ( i ) ;
5988: LD_VAR 0 2
5992: PPUSH
5993: CALL_OW 140
// if not areas then
5997: LD_VAR 0 5
6001: NOT
6002: IFFALSE 6006
// break ;
6004: GO 6008
// end ;
6006: GO 5720
6008: POP
6009: POP
// if UnitFilter ( friends , [ f_not , [ f_placed ] ] ) then
6010: LD_EXP 4
6014: PPUSH
6015: LD_INT 3
6017: PUSH
6018: LD_INT 52
6020: PUSH
6021: EMPTY
6022: LIST
6023: PUSH
6024: EMPTY
6025: LIST
6026: LIST
6027: PPUSH
6028: CALL_OW 72
6032: IFFALSE 6099
// for i in UnitFilter ( friends , [ f_not , [ f_placed ] ] ) do
6034: LD_ADDR_VAR 0 2
6038: PUSH
6039: LD_EXP 4
6043: PPUSH
6044: LD_INT 3
6046: PUSH
6047: LD_INT 52
6049: PUSH
6050: EMPTY
6051: LIST
6052: PUSH
6053: EMPTY
6054: LIST
6055: LIST
6056: PPUSH
6057: CALL_OW 72
6061: PUSH
6062: FOR_IN
6063: IFFALSE 6097
// begin PlaceUnitXYR ( i , 65 , 58 , 7 , false ) ;
6065: LD_VAR 0 2
6069: PPUSH
6070: LD_INT 65
6072: PPUSH
6073: LD_INT 58
6075: PPUSH
6076: LD_INT 7
6078: PPUSH
6079: LD_INT 0
6081: PPUSH
6082: CALL_OW 50
// ComHold ( i ) ;
6086: LD_VAR 0 2
6090: PPUSH
6091: CALL_OW 140
// end ;
6095: GO 6062
6097: POP
6098: POP
// if Frank then
6099: LD_EXP 33
6103: IFFALSE 6117
// SetClass ( Frank , class_sniper ) ;
6105: LD_EXP 33
6109: PPUSH
6110: LD_INT 5
6112: PPUSH
6113: CALL_OW 336
// end ; end_of_file
6117: LD_VAR 0 1
6121: RET
// export function CanSayRand ( side ) ; begin
6122: LD_INT 0
6124: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6125: LD_ADDR_VAR 0 2
6129: PUSH
6130: LD_INT 52
6132: PUSH
6133: EMPTY
6134: LIST
6135: PUSH
6136: LD_INT 22
6138: PUSH
6139: LD_VAR 0 1
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: PUSH
6148: LD_INT 2
6150: PUSH
6151: LD_INT 25
6153: PUSH
6154: LD_INT 1
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: PUSH
6161: LD_INT 25
6163: PUSH
6164: LD_INT 2
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: PUSH
6171: LD_INT 25
6173: PUSH
6174: LD_INT 3
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: PUSH
6181: LD_INT 25
6183: PUSH
6184: LD_INT 4
6186: PUSH
6187: EMPTY
6188: LIST
6189: LIST
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: LIST
6195: LIST
6196: LIST
6197: PUSH
6198: EMPTY
6199: LIST
6200: LIST
6201: LIST
6202: PPUSH
6203: CALL_OW 69
6207: PUSH
6208: LD_EXP 14
6212: PUSH
6213: LD_EXP 33
6217: PUSH
6218: LD_EXP 23
6222: PUSH
6223: LD_EXP 24
6227: PUSH
6228: LD_EXP 25
6232: PUSH
6233: LD_EXP 26
6237: PUSH
6238: LD_EXP 27
6242: PUSH
6243: LD_EXP 28
6247: PUSH
6248: LD_EXP 29
6252: PUSH
6253: LD_EXP 30
6257: PUSH
6258: LD_EXP 16
6262: PUSH
6263: LD_EXP 31
6267: PUSH
6268: LD_EXP 32
6272: PUSH
6273: LD_EXP 34
6277: PUSH
6278: EMPTY
6279: LIST
6280: LIST
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: LIST
6293: DIFF
6294: ST_TO_ADDR
// end ;
6295: LD_VAR 0 2
6299: RET
// export function SayRand ( sex , dial ) ; begin
6300: LD_INT 0
6302: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6303: LD_ADDR_VAR 0 3
6307: PUSH
6308: LD_INT 52
6310: PUSH
6311: EMPTY
6312: LIST
6313: PUSH
6314: LD_INT 22
6316: PUSH
6317: LD_INT 1
6319: PUSH
6320: EMPTY
6321: LIST
6322: LIST
6323: PUSH
6324: LD_INT 26
6326: PUSH
6327: LD_VAR 0 1
6331: PUSH
6332: EMPTY
6333: LIST
6334: LIST
6335: PUSH
6336: LD_INT 2
6338: PUSH
6339: LD_INT 25
6341: PUSH
6342: LD_INT 1
6344: PUSH
6345: EMPTY
6346: LIST
6347: LIST
6348: PUSH
6349: LD_INT 25
6351: PUSH
6352: LD_INT 2
6354: PUSH
6355: EMPTY
6356: LIST
6357: LIST
6358: PUSH
6359: LD_INT 25
6361: PUSH
6362: LD_INT 3
6364: PUSH
6365: EMPTY
6366: LIST
6367: LIST
6368: PUSH
6369: LD_INT 25
6371: PUSH
6372: LD_INT 4
6374: PUSH
6375: EMPTY
6376: LIST
6377: LIST
6378: PUSH
6379: EMPTY
6380: LIST
6381: LIST
6382: LIST
6383: LIST
6384: LIST
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: LIST
6390: LIST
6391: PPUSH
6392: CALL_OW 69
6396: PUSH
6397: LD_EXP 14
6401: PUSH
6402: LD_EXP 33
6406: PUSH
6407: LD_EXP 23
6411: PUSH
6412: LD_EXP 24
6416: PUSH
6417: LD_EXP 25
6421: PUSH
6422: LD_EXP 26
6426: PUSH
6427: LD_EXP 27
6431: PUSH
6432: LD_EXP 28
6436: PUSH
6437: LD_EXP 29
6441: PUSH
6442: LD_EXP 30
6446: PUSH
6447: LD_EXP 16
6451: PUSH
6452: LD_EXP 31
6456: PUSH
6457: LD_EXP 32
6461: PUSH
6462: LD_EXP 34
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: LIST
6476: LIST
6477: LIST
6478: LIST
6479: LIST
6480: LIST
6481: LIST
6482: DIFF
6483: ST_TO_ADDR
// if not result then
6484: LD_VAR 0 3
6488: NOT
6489: IFFALSE 6493
// exit ;
6491: GO 6521
// result := result [ 1 ] ;
6493: LD_ADDR_VAR 0 3
6497: PUSH
6498: LD_VAR 0 3
6502: PUSH
6503: LD_INT 1
6505: ARRAY
6506: ST_TO_ADDR
// Say ( result , dial ) ;
6507: LD_VAR 0 3
6511: PPUSH
6512: LD_VAR 0 2
6516: PPUSH
6517: CALL_OW 88
// end ;
6521: LD_VAR 0 3
6525: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
6526: LD_INT 0
6528: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
6529: LD_ADDR_VAR 0 4
6533: PUSH
6534: LD_INT 22
6536: PUSH
6537: LD_INT 1
6539: PUSH
6540: EMPTY
6541: LIST
6542: LIST
6543: PUSH
6544: LD_INT 26
6546: PUSH
6547: LD_VAR 0 1
6551: PUSH
6552: EMPTY
6553: LIST
6554: LIST
6555: PUSH
6556: LD_INT 2
6558: PUSH
6559: LD_INT 25
6561: PUSH
6562: LD_INT 1
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: PUSH
6569: LD_INT 25
6571: PUSH
6572: LD_INT 2
6574: PUSH
6575: EMPTY
6576: LIST
6577: LIST
6578: PUSH
6579: LD_INT 25
6581: PUSH
6582: LD_INT 3
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: PUSH
6589: LD_INT 25
6591: PUSH
6592: LD_INT 4
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: LIST
6603: LIST
6604: LIST
6605: PUSH
6606: EMPTY
6607: LIST
6608: LIST
6609: LIST
6610: PPUSH
6611: CALL_OW 69
6615: PUSH
6616: LD_EXP 14
6620: PUSH
6621: LD_EXP 33
6625: PUSH
6626: LD_EXP 23
6630: PUSH
6631: LD_EXP 24
6635: PUSH
6636: LD_EXP 25
6640: PUSH
6641: LD_EXP 26
6645: PUSH
6646: LD_EXP 27
6650: PUSH
6651: LD_EXP 28
6655: PUSH
6656: LD_EXP 29
6660: PUSH
6661: LD_EXP 30
6665: PUSH
6666: LD_EXP 16
6670: PUSH
6671: LD_EXP 31
6675: PUSH
6676: LD_EXP 32
6680: PUSH
6681: LD_EXP 34
6685: PUSH
6686: EMPTY
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: LIST
6692: LIST
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: PUSH
6702: LD_VAR 0 3
6706: ADD
6707: DIFF
6708: ST_TO_ADDR
// if not result then
6709: LD_VAR 0 4
6713: NOT
6714: IFFALSE 6718
// exit ;
6716: GO 6746
// result := result [ 1 ] ;
6718: LD_ADDR_VAR 0 4
6722: PUSH
6723: LD_VAR 0 4
6727: PUSH
6728: LD_INT 1
6730: ARRAY
6731: ST_TO_ADDR
// Say ( result , dial ) ;
6732: LD_VAR 0 4
6736: PPUSH
6737: LD_VAR 0 2
6741: PPUSH
6742: CALL_OW 88
// end ;
6746: LD_VAR 0 4
6750: RET
// export function Patrol ( unit , path , flags ) ; var i , x , y , c , p , station , tmp_path , status , enemy , e , spot_dist , safe_place , chase_range , need_refuel ; begin
6751: LD_INT 0
6753: PPUSH
6754: PPUSH
6755: PPUSH
6756: PPUSH
6757: PPUSH
6758: PPUSH
6759: PPUSH
6760: PPUSH
6761: PPUSH
6762: PPUSH
6763: PPUSH
6764: PPUSH
6765: PPUSH
6766: PPUSH
6767: PPUSH
// if not unit or not path or GetType ( unit ) = unit_building then
6768: LD_VAR 0 1
6772: NOT
6773: PUSH
6774: LD_VAR 0 2
6778: NOT
6779: OR
6780: PUSH
6781: LD_VAR 0 1
6785: PPUSH
6786: CALL_OW 247
6790: PUSH
6791: LD_INT 3
6793: EQUAL
6794: OR
6795: IFFALSE 6799
// exit ;
6797: GO 8338
// for i = path downto 1 do
6799: LD_ADDR_VAR 0 5
6803: PUSH
6804: DOUBLE
6805: LD_VAR 0 2
6809: INC
6810: ST_TO_ADDR
6811: LD_INT 1
6813: PUSH
6814: FOR_DOWNTO
6815: IFFALSE 6876
// begin if not ValidHex ( path [ i ] [ 1 ] , path [ i ] [ 2 ] ) then
6817: LD_VAR 0 2
6821: PUSH
6822: LD_VAR 0 5
6826: ARRAY
6827: PUSH
6828: LD_INT 1
6830: ARRAY
6831: PPUSH
6832: LD_VAR 0 2
6836: PUSH
6837: LD_VAR 0 5
6841: ARRAY
6842: PUSH
6843: LD_INT 2
6845: ARRAY
6846: PPUSH
6847: CALL_OW 488
6851: NOT
6852: IFFALSE 6874
// path = Delete ( path , i ) ;
6854: LD_ADDR_VAR 0 2
6858: PUSH
6859: LD_VAR 0 2
6863: PPUSH
6864: LD_VAR 0 5
6868: PPUSH
6869: CALL_OW 3
6873: ST_TO_ADDR
// end ;
6874: GO 6814
6876: POP
6877: POP
// if not path then
6878: LD_VAR 0 2
6882: NOT
6883: IFFALSE 6887
// exit ;
6885: GO 8338
// tmp_path := [ ] ;
6887: LD_ADDR_VAR 0 11
6891: PUSH
6892: EMPTY
6893: ST_TO_ADDR
// if flags then
6894: LD_VAR 0 3
6898: IFFALSE 6972
// begin if flags [ 1 ] then
6900: LD_VAR 0 3
6904: PUSH
6905: LD_INT 1
6907: ARRAY
6908: IFFALSE 6924
// safe_place = flags [ 1 ] ;
6910: LD_ADDR_VAR 0 16
6914: PUSH
6915: LD_VAR 0 3
6919: PUSH
6920: LD_INT 1
6922: ARRAY
6923: ST_TO_ADDR
// if flags [ 2 ] then
6924: LD_VAR 0 3
6928: PUSH
6929: LD_INT 2
6931: ARRAY
6932: IFFALSE 6948
// spot_dist = flags [ 2 ] ;
6934: LD_ADDR_VAR 0 15
6938: PUSH
6939: LD_VAR 0 3
6943: PUSH
6944: LD_INT 2
6946: ARRAY
6947: ST_TO_ADDR
// if flags [ 3 ] then
6948: LD_VAR 0 3
6952: PUSH
6953: LD_INT 3
6955: ARRAY
6956: IFFALSE 6972
// chase_range = flags [ 3 ] ;
6958: LD_ADDR_VAR 0 17
6962: PUSH
6963: LD_VAR 0 3
6967: PUSH
6968: LD_INT 3
6970: ARRAY
6971: ST_TO_ADDR
// end ; if not chase_range then
6972: LD_VAR 0 17
6976: NOT
6977: IFFALSE 6987
// chase_range = 8 ;
6979: LD_ADDR_VAR 0 17
6983: PUSH
6984: LD_INT 8
6986: ST_TO_ADDR
// if not spot_dist then
6987: LD_VAR 0 15
6991: NOT
6992: IFFALSE 7002
// spot_dist := 8 ;
6994: LD_ADDR_VAR 0 15
6998: PUSH
6999: LD_INT 8
7001: ST_TO_ADDR
// need_refuel = ( GetType ( unit ) = unit_vehicle and GetEngine ( unit ) <> engine_siberite ) ;
7002: LD_ADDR_VAR 0 18
7006: PUSH
7007: LD_VAR 0 1
7011: PPUSH
7012: CALL_OW 247
7016: PUSH
7017: LD_INT 2
7019: EQUAL
7020: PUSH
7021: LD_VAR 0 1
7025: PPUSH
7026: CALL_OW 262
7030: PUSH
7031: LD_INT 3
7033: NONEQUAL
7034: AND
7035: ST_TO_ADDR
// status = 1 ;
7036: LD_ADDR_VAR 0 12
7040: PUSH
7041: LD_INT 1
7043: ST_TO_ADDR
// tmp_path = [ 1 , path [ 1 ] ] ;
7044: LD_ADDR_VAR 0 11
7048: PUSH
7049: LD_INT 1
7051: PUSH
7052: LD_VAR 0 2
7056: PUSH
7057: LD_INT 1
7059: ARRAY
7060: PUSH
7061: EMPTY
7062: LIST
7063: LIST
7064: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7065: LD_INT 35
7067: PPUSH
7068: CALL_OW 67
// if need_refuel and GetFuel ( unit ) < 20 then
7072: LD_VAR 0 18
7076: PUSH
7077: LD_VAR 0 1
7081: PPUSH
7082: CALL_OW 261
7086: PUSH
7087: LD_INT 20
7089: LESS
7090: AND
7091: IFFALSE 7284
// begin station := FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_oil_mine ] , [ f_btype , b_factory ] ] ] ) ;
7093: LD_ADDR_VAR 0 10
7097: PUSH
7098: LD_INT 22
7100: PUSH
7101: LD_VAR 0 1
7105: PPUSH
7106: CALL_OW 255
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: PUSH
7115: LD_INT 2
7117: PUSH
7118: LD_INT 30
7120: PUSH
7121: LD_INT 0
7123: PUSH
7124: EMPTY
7125: LIST
7126: LIST
7127: PUSH
7128: LD_INT 30
7130: PUSH
7131: LD_INT 1
7133: PUSH
7134: EMPTY
7135: LIST
7136: LIST
7137: PUSH
7138: LD_INT 30
7140: PUSH
7141: LD_INT 29
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: PUSH
7148: LD_INT 30
7150: PUSH
7151: LD_INT 3
7153: PUSH
7154: EMPTY
7155: LIST
7156: LIST
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: LIST
7162: LIST
7163: LIST
7164: PUSH
7165: EMPTY
7166: LIST
7167: LIST
7168: PPUSH
7169: CALL_OW 69
7173: ST_TO_ADDR
// if not station then
7174: LD_VAR 0 10
7178: NOT
7179: IFFALSE 7195
// begin SetFuel ( unit , 40 ) ;
7181: LD_VAR 0 1
7185: PPUSH
7186: LD_INT 40
7188: PPUSH
7189: CALL_OW 240
// continue ;
7193: GO 7065
// end ; status := 6 ;
7195: LD_ADDR_VAR 0 12
7199: PUSH
7200: LD_INT 6
7202: ST_TO_ADDR
// station := NearestUnitToUnit ( station , unit ) ;
7203: LD_ADDR_VAR 0 10
7207: PUSH
7208: LD_VAR 0 10
7212: PPUSH
7213: LD_VAR 0 1
7217: PPUSH
7218: CALL_OW 74
7222: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7223: LD_INT 35
7225: PPUSH
7226: CALL_OW 67
// ComMoveUnit ( unit , station ) ;
7230: LD_VAR 0 1
7234: PPUSH
7235: LD_VAR 0 10
7239: PPUSH
7240: CALL_OW 112
// until GetDistUnits ( unit , station ) < 6 ;
7244: LD_VAR 0 1
7248: PPUSH
7249: LD_VAR 0 10
7253: PPUSH
7254: CALL_OW 296
7258: PUSH
7259: LD_INT 6
7261: LESS
7262: IFFALSE 7223
// SetFuel ( unit , 100 ) ;
7264: LD_VAR 0 1
7268: PPUSH
7269: LD_INT 100
7271: PPUSH
7272: CALL_OW 240
// status := 5 ;
7276: LD_ADDR_VAR 0 12
7280: PUSH
7281: LD_INT 5
7283: ST_TO_ADDR
// end ; if status = 1 then
7284: LD_VAR 0 12
7288: PUSH
7289: LD_INT 1
7291: EQUAL
7292: IFFALSE 7668
// begin enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] , [ f_dist , unit , spot_dist ] , [ f_see , 1 ] ] ) ;
7294: LD_ADDR_VAR 0 13
7298: PUSH
7299: LD_INT 81
7301: PUSH
7302: LD_VAR 0 1
7306: PPUSH
7307: CALL_OW 255
7311: PUSH
7312: EMPTY
7313: LIST
7314: LIST
7315: PUSH
7316: LD_INT 3
7318: PUSH
7319: LD_INT 21
7321: PUSH
7322: LD_INT 3
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: PUSH
7333: LD_INT 91
7335: PUSH
7336: LD_VAR 0 1
7340: PUSH
7341: LD_VAR 0 15
7345: PUSH
7346: EMPTY
7347: LIST
7348: LIST
7349: LIST
7350: PUSH
7351: LD_INT 101
7353: PUSH
7354: LD_INT 1
7356: PUSH
7357: EMPTY
7358: LIST
7359: LIST
7360: PUSH
7361: EMPTY
7362: LIST
7363: LIST
7364: LIST
7365: LIST
7366: PPUSH
7367: CALL_OW 69
7371: ST_TO_ADDR
// for i in enemy do
7372: LD_ADDR_VAR 0 5
7376: PUSH
7377: LD_VAR 0 13
7381: PUSH
7382: FOR_IN
7383: IFFALSE 7414
// if IsInvisible ( i ) then
7385: LD_VAR 0 5
7389: PPUSH
7390: CALL_OW 571
7394: IFFALSE 7412
// enemy := enemy diff i ;
7396: LD_ADDR_VAR 0 13
7400: PUSH
7401: LD_VAR 0 13
7405: PUSH
7406: LD_VAR 0 5
7410: DIFF
7411: ST_TO_ADDR
7412: GO 7382
7414: POP
7415: POP
// if enemy then
7416: LD_VAR 0 13
7420: IFFALSE 7470
// begin SetRememberedX ( unit , GetX ( unit ) ) ;
7422: LD_VAR 0 1
7426: PPUSH
7427: LD_VAR 0 1
7431: PPUSH
7432: CALL_OW 250
7436: PPUSH
7437: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
7441: LD_VAR 0 1
7445: PPUSH
7446: LD_VAR 0 1
7450: PPUSH
7451: CALL_OW 251
7455: PPUSH
7456: CALL_OW 232
// status = 2 ;
7460: LD_ADDR_VAR 0 12
7464: PUSH
7465: LD_INT 2
7467: ST_TO_ADDR
// end else
7468: GO 7668
// begin if IsAt ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) or not HasTask ( unit ) then
7470: LD_VAR 0 1
7474: PPUSH
7475: LD_VAR 0 11
7479: PUSH
7480: LD_INT 2
7482: ARRAY
7483: PUSH
7484: LD_INT 1
7486: ARRAY
7487: PPUSH
7488: LD_VAR 0 11
7492: PUSH
7493: LD_INT 2
7495: ARRAY
7496: PUSH
7497: LD_INT 2
7499: ARRAY
7500: PPUSH
7501: CALL_OW 307
7505: PUSH
7506: LD_VAR 0 1
7510: PPUSH
7511: CALL_OW 314
7515: NOT
7516: OR
7517: IFFALSE 7668
// begin wait ( 0 0$2 ) ;
7519: LD_INT 70
7521: PPUSH
7522: CALL_OW 67
// if tmp_path [ 1 ] + 1 > path then
7526: LD_VAR 0 11
7530: PUSH
7531: LD_INT 1
7533: ARRAY
7534: PUSH
7535: LD_INT 1
7537: PLUS
7538: PUSH
7539: LD_VAR 0 2
7543: GREATER
7544: IFFALSE 7569
// tmp_path := Replace ( tmp_path , 1 , 1 ) else
7546: LD_ADDR_VAR 0 11
7550: PUSH
7551: LD_VAR 0 11
7555: PPUSH
7556: LD_INT 1
7558: PPUSH
7559: LD_INT 1
7561: PPUSH
7562: CALL_OW 1
7566: ST_TO_ADDR
7567: GO 7600
// tmp_path := Replace ( tmp_path , 1 , tmp_path [ 1 ] + 1 ) ;
7569: LD_ADDR_VAR 0 11
7573: PUSH
7574: LD_VAR 0 11
7578: PPUSH
7579: LD_INT 1
7581: PPUSH
7582: LD_VAR 0 11
7586: PUSH
7587: LD_INT 1
7589: ARRAY
7590: PUSH
7591: LD_INT 1
7593: PLUS
7594: PPUSH
7595: CALL_OW 1
7599: ST_TO_ADDR
// tmp_path := Replace ( tmp_path , 2 , path [ tmp_path [ 1 ] ] ) ;
7600: LD_ADDR_VAR 0 11
7604: PUSH
7605: LD_VAR 0 11
7609: PPUSH
7610: LD_INT 2
7612: PPUSH
7613: LD_VAR 0 2
7617: PUSH
7618: LD_VAR 0 11
7622: PUSH
7623: LD_INT 1
7625: ARRAY
7626: ARRAY
7627: PPUSH
7628: CALL_OW 1
7632: ST_TO_ADDR
// ComAgressiveMove ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) ;
7633: LD_VAR 0 1
7637: PPUSH
7638: LD_VAR 0 11
7642: PUSH
7643: LD_INT 2
7645: ARRAY
7646: PUSH
7647: LD_INT 1
7649: ARRAY
7650: PPUSH
7651: LD_VAR 0 11
7655: PUSH
7656: LD_INT 2
7658: ARRAY
7659: PUSH
7660: LD_INT 2
7662: ARRAY
7663: PPUSH
7664: CALL_OW 114
// end ; end ; end ; if status = 2 then
7668: LD_VAR 0 12
7672: PUSH
7673: LD_INT 2
7675: EQUAL
7676: IFFALSE 7897
// begin if GetLives ( unit ) < 650 and safe_place then
7678: LD_VAR 0 1
7682: PPUSH
7683: CALL_OW 256
7687: PUSH
7688: LD_INT 650
7690: LESS
7691: PUSH
7692: LD_VAR 0 16
7696: AND
7697: IFFALSE 7709
// begin status = 3 ;
7699: LD_ADDR_VAR 0 12
7703: PUSH
7704: LD_INT 3
7706: ST_TO_ADDR
// continue ;
7707: GO 7065
// end ; x := GetRememberedX ( unit ) ;
7709: LD_ADDR_VAR 0 6
7713: PUSH
7714: LD_VAR 0 1
7718: PPUSH
7719: CALL_OW 252
7723: ST_TO_ADDR
// y := GetRememberedY ( unit ) ;
7724: LD_ADDR_VAR 0 7
7728: PUSH
7729: LD_VAR 0 1
7733: PPUSH
7734: CALL_OW 253
7738: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_distxy , x , y , spot_dist ] , [ f_see , 1 ] ] ) ;
7739: LD_ADDR_VAR 0 13
7743: PUSH
7744: LD_INT 81
7746: PUSH
7747: LD_VAR 0 1
7751: PPUSH
7752: CALL_OW 255
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: PUSH
7761: LD_INT 92
7763: PUSH
7764: LD_VAR 0 6
7768: PUSH
7769: LD_VAR 0 7
7773: PUSH
7774: LD_VAR 0 15
7778: PUSH
7779: EMPTY
7780: LIST
7781: LIST
7782: LIST
7783: LIST
7784: PUSH
7785: LD_INT 101
7787: PUSH
7788: LD_INT 1
7790: PUSH
7791: EMPTY
7792: LIST
7793: LIST
7794: PUSH
7795: EMPTY
7796: LIST
7797: LIST
7798: LIST
7799: PPUSH
7800: CALL_OW 69
7804: ST_TO_ADDR
// if enemy then
7805: LD_VAR 0 13
7809: IFFALSE 7880
// begin e := NearestUnitToUnit ( enemy , unit ) ;
7811: LD_ADDR_VAR 0 14
7815: PUSH
7816: LD_VAR 0 13
7820: PPUSH
7821: LD_VAR 0 1
7825: PPUSH
7826: CALL_OW 74
7830: ST_TO_ADDR
// if GetDistUnitXY ( e , x , y ) < spot_dist + chase_range then
7831: LD_VAR 0 14
7835: PPUSH
7836: LD_VAR 0 6
7840: PPUSH
7841: LD_VAR 0 7
7845: PPUSH
7846: CALL_OW 297
7850: PUSH
7851: LD_VAR 0 15
7855: PUSH
7856: LD_VAR 0 17
7860: PLUS
7861: LESS
7862: IFFALSE 7878
// ComAttackUnit ( unit , e ) ;
7864: LD_VAR 0 1
7868: PPUSH
7869: LD_VAR 0 14
7873: PPUSH
7874: CALL_OW 115
// end else
7878: GO 7897
// begin ComStop ( unit ) ;
7880: LD_VAR 0 1
7884: PPUSH
7885: CALL_OW 141
// status = 5 ;
7889: LD_ADDR_VAR 0 12
7893: PUSH
7894: LD_INT 5
7896: ST_TO_ADDR
// end ; end ; if status = 3 and safe_place then
7897: LD_VAR 0 12
7901: PUSH
7902: LD_INT 3
7904: EQUAL
7905: PUSH
7906: LD_VAR 0 16
7910: AND
7911: IFFALSE 7997
// begin repeat ComMoveXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) ;
7913: LD_VAR 0 1
7917: PPUSH
7918: LD_VAR 0 16
7922: PUSH
7923: LD_INT 1
7925: ARRAY
7926: PPUSH
7927: LD_VAR 0 16
7931: PUSH
7932: LD_INT 2
7934: ARRAY
7935: PPUSH
7936: CALL_OW 111
// wait ( 0 0$1 ) ;
7940: LD_INT 35
7942: PPUSH
7943: CALL_OW 67
// until GetDistUnitXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) < 4 ;
7947: LD_VAR 0 1
7951: PPUSH
7952: LD_VAR 0 16
7956: PUSH
7957: LD_INT 1
7959: ARRAY
7960: PPUSH
7961: LD_VAR 0 16
7965: PUSH
7966: LD_INT 2
7968: ARRAY
7969: PPUSH
7970: CALL_OW 297
7974: PUSH
7975: LD_INT 4
7977: LESS
7978: IFFALSE 7913
// ComStop ( unit ) ;
7980: LD_VAR 0 1
7984: PPUSH
7985: CALL_OW 141
// status = 4 ;
7989: LD_ADDR_VAR 0 12
7993: PUSH
7994: LD_INT 4
7996: ST_TO_ADDR
// end ; if status = 4 then
7997: LD_VAR 0 12
8001: PUSH
8002: LD_INT 4
8004: EQUAL
8005: IFFALSE 8037
// begin repeat wait ( 0 0$1 ) ;
8007: LD_INT 35
8009: PPUSH
8010: CALL_OW 67
// until GetLives ( unit ) = 1000 ;
8014: LD_VAR 0 1
8018: PPUSH
8019: CALL_OW 256
8023: PUSH
8024: LD_INT 1000
8026: EQUAL
8027: IFFALSE 8007
// status = 5 ;
8029: LD_ADDR_VAR 0 12
8033: PUSH
8034: LD_INT 5
8036: ST_TO_ADDR
// end ; if status = 5 then
8037: LD_VAR 0 12
8041: PUSH
8042: LD_INT 5
8044: EQUAL
8045: IFFALSE 8327
// begin p := 999 ;
8047: LD_ADDR_VAR 0 9
8051: PUSH
8052: LD_INT 999
8054: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ] ;
8055: LD_ADDR_VAR 0 14
8059: PUSH
8060: LD_VAR 0 11
8064: PUSH
8065: LD_INT 2
8067: ARRAY
8068: PUSH
8069: LD_INT 1
8071: ARRAY
8072: PUSH
8073: LD_VAR 0 11
8077: PUSH
8078: LD_INT 2
8080: ARRAY
8081: PUSH
8082: LD_INT 2
8084: ARRAY
8085: PUSH
8086: EMPTY
8087: LIST
8088: LIST
8089: ST_TO_ADDR
// c := 1 ;
8090: LD_ADDR_VAR 0 8
8094: PUSH
8095: LD_INT 1
8097: ST_TO_ADDR
// for i = 1 to tmp_path [ 2 ] div 2 do
8098: LD_ADDR_VAR 0 5
8102: PUSH
8103: DOUBLE
8104: LD_INT 1
8106: DEC
8107: ST_TO_ADDR
8108: LD_VAR 0 11
8112: PUSH
8113: LD_INT 2
8115: ARRAY
8116: PUSH
8117: LD_INT 2
8119: DIV
8120: PUSH
8121: FOR_TO
8122: IFFALSE 8254
// begin x := GetDistUnitXY ( unit , tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ) ;
8124: LD_ADDR_VAR 0 6
8128: PUSH
8129: LD_VAR 0 1
8133: PPUSH
8134: LD_VAR 0 11
8138: PUSH
8139: LD_INT 2
8141: ARRAY
8142: PUSH
8143: LD_VAR 0 8
8147: ARRAY
8148: PPUSH
8149: LD_VAR 0 11
8153: PUSH
8154: LD_INT 2
8156: ARRAY
8157: PUSH
8158: LD_VAR 0 8
8162: PUSH
8163: LD_INT 1
8165: PLUS
8166: ARRAY
8167: PPUSH
8168: CALL_OW 297
8172: ST_TO_ADDR
// if x < p then
8173: LD_VAR 0 6
8177: PUSH
8178: LD_VAR 0 9
8182: LESS
8183: IFFALSE 8238
// begin p := x ;
8185: LD_ADDR_VAR 0 9
8189: PUSH
8190: LD_VAR 0 6
8194: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ] ;
8195: LD_ADDR_VAR 0 14
8199: PUSH
8200: LD_VAR 0 11
8204: PUSH
8205: LD_INT 2
8207: ARRAY
8208: PUSH
8209: LD_VAR 0 8
8213: ARRAY
8214: PUSH
8215: LD_VAR 0 11
8219: PUSH
8220: LD_INT 2
8222: ARRAY
8223: PUSH
8224: LD_VAR 0 8
8228: PUSH
8229: LD_INT 1
8231: PLUS
8232: ARRAY
8233: PUSH
8234: EMPTY
8235: LIST
8236: LIST
8237: ST_TO_ADDR
// end ; c = c + 2 ;
8238: LD_ADDR_VAR 0 8
8242: PUSH
8243: LD_VAR 0 8
8247: PUSH
8248: LD_INT 2
8250: PLUS
8251: ST_TO_ADDR
// end ;
8252: GO 8121
8254: POP
8255: POP
// repeat ComMoveXY ( unit , e [ 1 ] , e [ 2 ] ) ;
8256: LD_VAR 0 1
8260: PPUSH
8261: LD_VAR 0 14
8265: PUSH
8266: LD_INT 1
8268: ARRAY
8269: PPUSH
8270: LD_VAR 0 14
8274: PUSH
8275: LD_INT 2
8277: ARRAY
8278: PPUSH
8279: CALL_OW 111
// wait ( 0 0$1 ) ;
8283: LD_INT 35
8285: PPUSH
8286: CALL_OW 67
// until IsAt ( unit , e [ 1 ] , e [ 2 ] ) ;
8290: LD_VAR 0 1
8294: PPUSH
8295: LD_VAR 0 14
8299: PUSH
8300: LD_INT 1
8302: ARRAY
8303: PPUSH
8304: LD_VAR 0 14
8308: PUSH
8309: LD_INT 2
8311: ARRAY
8312: PPUSH
8313: CALL_OW 307
8317: IFFALSE 8256
// status = 1 ;
8319: LD_ADDR_VAR 0 12
8323: PUSH
8324: LD_INT 1
8326: ST_TO_ADDR
// end ; until IsDead ( unit ) ;
8327: LD_VAR 0 1
8331: PPUSH
8332: CALL_OW 301
8336: IFFALSE 7065
// end ;
8338: LD_VAR 0 4
8342: RET
// export function Talk ( units , type , sequence , sex , class , id , order_id ) ; var i , unit , tmp , unit_id , dialog_id , sex_id , class_id ; begin
8343: LD_INT 0
8345: PPUSH
8346: PPUSH
8347: PPUSH
8348: PPUSH
8349: PPUSH
8350: PPUSH
8351: PPUSH
8352: PPUSH
// if not units or not sequence or not sex in [ sex_male , sex_female , 0 ] or not id or not order_id then
8353: LD_VAR 0 1
8357: NOT
8358: PUSH
8359: LD_VAR 0 3
8363: NOT
8364: OR
8365: PUSH
8366: LD_VAR 0 4
8370: PUSH
8371: LD_INT 1
8373: PUSH
8374: LD_INT 2
8376: PUSH
8377: LD_INT 0
8379: PUSH
8380: EMPTY
8381: LIST
8382: LIST
8383: LIST
8384: IN
8385: NOT
8386: OR
8387: PUSH
8388: LD_VAR 0 6
8392: NOT
8393: OR
8394: PUSH
8395: LD_VAR 0 7
8399: NOT
8400: OR
8401: IFFALSE 8405
// exit ;
8403: GO 8796
// sex_id :=  ;
8405: LD_ADDR_VAR 0 14
8409: PUSH
8410: LD_STRING 
8412: ST_TO_ADDR
// case class of 1 :
8413: LD_VAR 0 5
8417: PUSH
8418: LD_INT 1
8420: DOUBLE
8421: EQUAL
8422: IFTRUE 8426
8424: GO 8437
8426: POP
// class_id := Sol ; 2 :
8427: LD_ADDR_VAR 0 15
8431: PUSH
8432: LD_STRING Sol
8434: ST_TO_ADDR
8435: GO 8495
8437: LD_INT 2
8439: DOUBLE
8440: EQUAL
8441: IFTRUE 8445
8443: GO 8456
8445: POP
// class_id := Eng ; 3 :
8446: LD_ADDR_VAR 0 15
8450: PUSH
8451: LD_STRING Eng
8453: ST_TO_ADDR
8454: GO 8495
8456: LD_INT 3
8458: DOUBLE
8459: EQUAL
8460: IFTRUE 8464
8462: GO 8475
8464: POP
// class_id := Mech ; 4 :
8465: LD_ADDR_VAR 0 15
8469: PUSH
8470: LD_STRING Mech
8472: ST_TO_ADDR
8473: GO 8495
8475: LD_INT 4
8477: DOUBLE
8478: EQUAL
8479: IFTRUE 8483
8481: GO 8494
8483: POP
// class_id := Sci ; end ;
8484: LD_ADDR_VAR 0 15
8488: PUSH
8489: LD_STRING Sci
8491: ST_TO_ADDR
8492: GO 8495
8494: POP
// tmp := UnitFilter ( units , [ f_class , class ] ) ;
8495: LD_ADDR_VAR 0 11
8499: PUSH
8500: LD_VAR 0 1
8504: PPUSH
8505: LD_INT 25
8507: PUSH
8508: LD_VAR 0 5
8512: PUSH
8513: EMPTY
8514: LIST
8515: LIST
8516: PPUSH
8517: CALL_OW 72
8521: ST_TO_ADDR
// if tmp then
8522: LD_VAR 0 11
8526: IFFALSE 8538
// units := tmp ;
8528: LD_ADDR_VAR 0 1
8532: PUSH
8533: LD_VAR 0 11
8537: ST_TO_ADDR
// if sex then
8538: LD_VAR 0 4
8542: IFFALSE 8598
// begin if sex = sex_female then
8544: LD_VAR 0 4
8548: PUSH
8549: LD_INT 2
8551: EQUAL
8552: IFFALSE 8562
// sex_id := F ;
8554: LD_ADDR_VAR 0 14
8558: PUSH
8559: LD_STRING F
8561: ST_TO_ADDR
// units := UnitFilter ( units , [ f_sex , sex ] ) ;
8562: LD_ADDR_VAR 0 1
8566: PUSH
8567: LD_VAR 0 1
8571: PPUSH
8572: LD_INT 26
8574: PUSH
8575: LD_VAR 0 4
8579: PUSH
8580: EMPTY
8581: LIST
8582: LIST
8583: PPUSH
8584: CALL_OW 72
8588: ST_TO_ADDR
// if not units then
8589: LD_VAR 0 1
8593: NOT
8594: IFFALSE 8598
// exit ;
8596: GO 8796
// end ; unit_id := id ;
8598: LD_ADDR_VAR 0 12
8602: PUSH
8603: LD_VAR 0 6
8607: ST_TO_ADDR
// if unit_id > units then
8608: LD_VAR 0 12
8612: PUSH
8613: LD_VAR 0 1
8617: GREATER
8618: IFFALSE 8628
// unit_id := 1 ;
8620: LD_ADDR_VAR 0 12
8624: PUSH
8625: LD_INT 1
8627: ST_TO_ADDR
// if not units [ unit_id ] then
8628: LD_VAR 0 1
8632: PUSH
8633: LD_VAR 0 12
8637: ARRAY
8638: NOT
8639: IFFALSE 8643
// exit ;
8641: GO 8796
// unit := units [ unit_id ] ;
8643: LD_ADDR_VAR 0 10
8647: PUSH
8648: LD_VAR 0 1
8652: PUSH
8653: LD_VAR 0 12
8657: ARRAY
8658: ST_TO_ADDR
// dialog_id := D & sequence & - & sex_id & class_id & id & - & order_id ;
8659: LD_ADDR_VAR 0 13
8663: PUSH
8664: LD_STRING D
8666: PUSH
8667: LD_VAR 0 3
8671: STR
8672: PUSH
8673: LD_STRING -
8675: STR
8676: PUSH
8677: LD_VAR 0 14
8681: STR
8682: PUSH
8683: LD_VAR 0 15
8687: STR
8688: PUSH
8689: LD_VAR 0 6
8693: STR
8694: PUSH
8695: LD_STRING -
8697: STR
8698: PUSH
8699: LD_VAR 0 7
8703: STR
8704: ST_TO_ADDR
// case type of 0 :
8705: LD_VAR 0 2
8709: PUSH
8710: LD_INT 0
8712: DOUBLE
8713: EQUAL
8714: IFTRUE 8718
8716: GO 8735
8718: POP
// Say ( unit , dialog_id ) ; 1 :
8719: LD_VAR 0 10
8723: PPUSH
8724: LD_VAR 0 13
8728: PPUSH
8729: CALL_OW 88
8733: GO 8786
8735: LD_INT 1
8737: DOUBLE
8738: EQUAL
8739: IFTRUE 8743
8741: GO 8760
8743: POP
// SayRadio ( unit , dialog_id ) ; 2 :
8744: LD_VAR 0 10
8748: PPUSH
8749: LD_VAR 0 13
8753: PPUSH
8754: CALL_OW 94
8758: GO 8786
8760: LD_INT 2
8762: DOUBLE
8763: EQUAL
8764: IFTRUE 8768
8766: GO 8785
8768: POP
// ForceSay ( unit , dialog_id ) ; end ;
8769: LD_VAR 0 10
8773: PPUSH
8774: LD_VAR 0 13
8778: PPUSH
8779: CALL_OW 91
8783: GO 8786
8785: POP
// result := unit ;
8786: LD_ADDR_VAR 0 8
8790: PUSH
8791: LD_VAR 0 10
8795: ST_TO_ADDR
// end ;
8796: LD_VAR 0 8
8800: RET
// export function IsNearbyEntrance ( unit , building , distance ) ; var i , entrance ; begin
8801: LD_INT 0
8803: PPUSH
8804: PPUSH
8805: PPUSH
// result := false ;
8806: LD_ADDR_VAR 0 4
8810: PUSH
8811: LD_INT 0
8813: ST_TO_ADDR
// if not unit or not building or IsInUnit ( unit ) then
8814: LD_VAR 0 1
8818: NOT
8819: PUSH
8820: LD_VAR 0 2
8824: NOT
8825: OR
8826: PUSH
8827: LD_VAR 0 1
8831: PPUSH
8832: CALL_OW 310
8836: OR
8837: IFFALSE 8841
// exit ;
8839: GO 9045
// if distance < 0 then
8841: LD_VAR 0 3
8845: PUSH
8846: LD_INT 0
8848: LESS
8849: IFFALSE 8859
// distance := 0 ;
8851: LD_ADDR_VAR 0 3
8855: PUSH
8856: LD_INT 0
8858: ST_TO_ADDR
// entrance := GetBuildingHexes ( GetBType ( building ) , GetX ( building ) , GetY ( building ) , GetDir ( building ) , GetNation ( building ) , 1 ) ;
8859: LD_ADDR_VAR 0 6
8863: PUSH
8864: LD_VAR 0 2
8868: PPUSH
8869: CALL_OW 266
8873: PPUSH
8874: LD_VAR 0 2
8878: PPUSH
8879: CALL_OW 250
8883: PPUSH
8884: LD_VAR 0 2
8888: PPUSH
8889: CALL_OW 251
8893: PPUSH
8894: LD_VAR 0 2
8898: PPUSH
8899: CALL_OW 254
8903: PPUSH
8904: LD_VAR 0 2
8908: PPUSH
8909: CALL_OW 248
8913: PPUSH
8914: LD_INT 1
8916: PPUSH
8917: CALL 49259 0 6
8921: ST_TO_ADDR
// if not entrance then
8922: LD_VAR 0 6
8926: NOT
8927: IFFALSE 8931
// exit ;
8929: GO 9045
// for i in entrance do
8931: LD_ADDR_VAR 0 5
8935: PUSH
8936: LD_VAR 0 6
8940: PUSH
8941: FOR_IN
8942: IFFALSE 9043
// begin if not distance then
8944: LD_VAR 0 3
8948: NOT
8949: IFFALSE 8994
// begin if IsAt ( unit , i [ 1 ] , i [ 2 ] ) then
8951: LD_VAR 0 1
8955: PPUSH
8956: LD_VAR 0 5
8960: PUSH
8961: LD_INT 1
8963: ARRAY
8964: PPUSH
8965: LD_VAR 0 5
8969: PUSH
8970: LD_INT 2
8972: ARRAY
8973: PPUSH
8974: CALL_OW 307
8978: IFFALSE 8992
// begin result := true ;
8980: LD_ADDR_VAR 0 4
8984: PUSH
8985: LD_INT 1
8987: ST_TO_ADDR
// exit ;
8988: POP
8989: POP
8990: GO 9045
// end ; end else
8992: GO 9041
// begin if GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) <= distance then
8994: LD_VAR 0 1
8998: PPUSH
8999: LD_VAR 0 5
9003: PUSH
9004: LD_INT 1
9006: ARRAY
9007: PPUSH
9008: LD_VAR 0 5
9012: PUSH
9013: LD_INT 2
9015: ARRAY
9016: PPUSH
9017: CALL_OW 297
9021: PUSH
9022: LD_VAR 0 3
9026: LESSEQUAL
9027: IFFALSE 9041
// begin result := true ;
9029: LD_ADDR_VAR 0 4
9033: PUSH
9034: LD_INT 1
9036: ST_TO_ADDR
// exit ;
9037: POP
9038: POP
9039: GO 9045
// end ; end ; end ;
9041: GO 8941
9043: POP
9044: POP
// end ;
9045: LD_VAR 0 4
9049: RET
// export function CanSpot ( unit , unit2 ) ; var i , building ; begin
9050: LD_INT 0
9052: PPUSH
9053: PPUSH
9054: PPUSH
// result := false ;
9055: LD_ADDR_VAR 0 3
9059: PUSH
9060: LD_INT 0
9062: ST_TO_ADDR
// if not unit or not unit2 or not IsOk ( unit ) or not IsOk ( unit2 ) then
9063: LD_VAR 0 1
9067: NOT
9068: PUSH
9069: LD_VAR 0 2
9073: NOT
9074: OR
9075: PUSH
9076: LD_VAR 0 1
9080: PPUSH
9081: CALL_OW 302
9085: NOT
9086: OR
9087: PUSH
9088: LD_VAR 0 2
9092: PPUSH
9093: CALL_OW 302
9097: NOT
9098: OR
9099: IFFALSE 9103
// exit ;
9101: GO 9264
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] ] ) , unit ) ) < 8 then
9103: LD_VAR 0 1
9107: PPUSH
9108: LD_INT 81
9110: PUSH
9111: LD_VAR 0 1
9115: PPUSH
9116: CALL_OW 255
9120: PUSH
9121: EMPTY
9122: LIST
9123: LIST
9124: PUSH
9125: LD_INT 3
9127: PUSH
9128: LD_INT 21
9130: PUSH
9131: LD_INT 3
9133: PUSH
9134: EMPTY
9135: LIST
9136: LIST
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: PUSH
9142: EMPTY
9143: LIST
9144: LIST
9145: PPUSH
9146: CALL_OW 69
9150: PPUSH
9151: LD_VAR 0 1
9155: PPUSH
9156: CALL_OW 74
9160: PPUSH
9161: CALL_OW 296
9165: PUSH
9166: LD_INT 8
9168: LESS
9169: IFFALSE 9173
// exit ;
9171: GO 9264
// building := IsInUnit ( unit2 ) ;
9173: LD_ADDR_VAR 0 5
9177: PUSH
9178: LD_VAR 0 2
9182: PPUSH
9183: CALL_OW 310
9187: ST_TO_ADDR
// if building then
9188: LD_VAR 0 5
9192: IFFALSE 9219
// result := IsNearbyEntrance ( unit , building , 2 ) else
9194: LD_ADDR_VAR 0 3
9198: PUSH
9199: LD_VAR 0 1
9203: PPUSH
9204: LD_VAR 0 5
9208: PPUSH
9209: LD_INT 2
9211: PPUSH
9212: CALL 8801 0 3
9216: ST_TO_ADDR
9217: GO 9264
// result := ( GetDistUnits ( unit , unit2 ) < 6 and See ( GetSide ( unit2 ) , unit ) ) ;
9219: LD_ADDR_VAR 0 3
9223: PUSH
9224: LD_VAR 0 1
9228: PPUSH
9229: LD_VAR 0 2
9233: PPUSH
9234: CALL_OW 296
9238: PUSH
9239: LD_INT 6
9241: LESS
9242: PUSH
9243: LD_VAR 0 2
9247: PPUSH
9248: CALL_OW 255
9252: PPUSH
9253: LD_VAR 0 1
9257: PPUSH
9258: CALL_OW 292
9262: AND
9263: ST_TO_ADDR
// end ;
9264: LD_VAR 0 3
9268: RET
// export function CreateNature ; var i , animal , nat_area ; begin
9269: LD_INT 0
9271: PPUSH
9272: PPUSH
9273: PPUSH
9274: PPUSH
// uc_side = 0 ;
9275: LD_ADDR_OWVAR 20
9279: PUSH
9280: LD_INT 0
9282: ST_TO_ADDR
// uc_nation = 0 ;
9283: LD_ADDR_OWVAR 21
9287: PUSH
9288: LD_INT 0
9290: ST_TO_ADDR
// nat_area := nature_area ;
9291: LD_ADDR_VAR 0 4
9295: PUSH
9296: LD_INT 24
9298: ST_TO_ADDR
// InitHc ;
9299: CALL_OW 19
// for i = 1 to 4 do
9303: LD_ADDR_VAR 0 2
9307: PUSH
9308: DOUBLE
9309: LD_INT 1
9311: DEC
9312: ST_TO_ADDR
9313: LD_INT 4
9315: PUSH
9316: FOR_TO
9317: IFFALSE 9364
// begin hc_class = 18 ;
9319: LD_ADDR_OWVAR 28
9323: PUSH
9324: LD_INT 18
9326: ST_TO_ADDR
// hc_gallery =  ;
9327: LD_ADDR_OWVAR 33
9331: PUSH
9332: LD_STRING 
9334: ST_TO_ADDR
// animal := CreateHuman ;
9335: LD_ADDR_VAR 0 3
9339: PUSH
9340: CALL_OW 44
9344: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9345: LD_VAR 0 3
9349: PPUSH
9350: LD_VAR 0 4
9354: PPUSH
9355: LD_INT 0
9357: PPUSH
9358: CALL_OW 49
// end ;
9362: GO 9316
9364: POP
9365: POP
// for i = 1 to 3 do
9366: LD_ADDR_VAR 0 2
9370: PUSH
9371: DOUBLE
9372: LD_INT 1
9374: DEC
9375: ST_TO_ADDR
9376: LD_INT 3
9378: PUSH
9379: FOR_TO
9380: IFFALSE 9474
// begin hc_class = class_apeman ;
9382: LD_ADDR_OWVAR 28
9386: PUSH
9387: LD_INT 12
9389: ST_TO_ADDR
// hc_gallery =  ;
9390: LD_ADDR_OWVAR 33
9394: PUSH
9395: LD_STRING 
9397: ST_TO_ADDR
// hc_agressivity = 0 ;
9398: LD_ADDR_OWVAR 35
9402: PUSH
9403: LD_INT 0
9405: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
9406: LD_ADDR_OWVAR 31
9410: PUSH
9411: LD_INT 1
9413: PPUSH
9414: LD_INT 3
9416: PPUSH
9417: CALL_OW 12
9421: PUSH
9422: LD_INT 1
9424: PPUSH
9425: LD_INT 3
9427: PPUSH
9428: CALL_OW 12
9432: PUSH
9433: LD_INT 0
9435: PUSH
9436: LD_INT 0
9438: PUSH
9439: EMPTY
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: ST_TO_ADDR
// animal := CreateHuman ;
9445: LD_ADDR_VAR 0 3
9449: PUSH
9450: CALL_OW 44
9454: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9455: LD_VAR 0 3
9459: PPUSH
9460: LD_VAR 0 4
9464: PPUSH
9465: LD_INT 0
9467: PPUSH
9468: CALL_OW 49
// end ;
9472: GO 9379
9474: POP
9475: POP
// for i = 1 to 3 do
9476: LD_ADDR_VAR 0 2
9480: PUSH
9481: DOUBLE
9482: LD_INT 1
9484: DEC
9485: ST_TO_ADDR
9486: LD_INT 3
9488: PUSH
9489: FOR_TO
9490: IFFALSE 9537
// begin hc_class = 13 ;
9492: LD_ADDR_OWVAR 28
9496: PUSH
9497: LD_INT 13
9499: ST_TO_ADDR
// hc_gallery =  ;
9500: LD_ADDR_OWVAR 33
9504: PUSH
9505: LD_STRING 
9507: ST_TO_ADDR
// animal := CreateHuman ;
9508: LD_ADDR_VAR 0 3
9512: PUSH
9513: CALL_OW 44
9517: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9518: LD_VAR 0 3
9522: PPUSH
9523: LD_VAR 0 4
9527: PPUSH
9528: LD_INT 0
9530: PPUSH
9531: CALL_OW 49
// end ;
9535: GO 9489
9537: POP
9538: POP
// for i = 1 to 3 do
9539: LD_ADDR_VAR 0 2
9543: PUSH
9544: DOUBLE
9545: LD_INT 1
9547: DEC
9548: ST_TO_ADDR
9549: LD_INT 3
9551: PUSH
9552: FOR_TO
9553: IFFALSE 9598
// begin hc_class = 20 ;
9555: LD_ADDR_OWVAR 28
9559: PUSH
9560: LD_INT 20
9562: ST_TO_ADDR
// hc_gallery =  ;
9563: LD_ADDR_OWVAR 33
9567: PUSH
9568: LD_STRING 
9570: ST_TO_ADDR
// animal := CreateHuman ;
9571: LD_ADDR_VAR 0 3
9575: PUSH
9576: CALL_OW 44
9580: ST_TO_ADDR
// PlaceUnitArea ( animal , lake_area , false ) ;
9581: LD_VAR 0 3
9585: PPUSH
9586: LD_INT 4
9588: PPUSH
9589: LD_INT 0
9591: PPUSH
9592: CALL_OW 49
// end ;
9596: GO 9552
9598: POP
9599: POP
// end ; end_of_file
9600: LD_VAR 0 1
9604: RET
// export function Action ; begin
9605: LD_INT 0
9607: PPUSH
// InGameOn ;
9608: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
9612: LD_EXP 14
9616: PPUSH
9617: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
9621: LD_EXP 14
9625: PPUSH
9626: LD_STRING D1-JMM-1
9628: PPUSH
9629: CALL_OW 88
// Say ( Roth , D1-Roth-1 ) ;
9633: LD_EXP 15
9637: PPUSH
9638: LD_STRING D1-Roth-1
9640: PPUSH
9641: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
9645: LD_EXP 14
9649: PPUSH
9650: LD_STRING D1-JMM-2
9652: PPUSH
9653: CALL_OW 88
// Say ( Roth , D1-Roth-2 ) ;
9657: LD_EXP 15
9661: PPUSH
9662: LD_STRING D1-Roth-2
9664: PPUSH
9665: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9669: LD_EXP 14
9673: PPUSH
9674: LD_STRING D1-JMM-3
9676: PPUSH
9677: CALL_OW 88
// Say ( Roth , D1-Roth-3 ) ;
9681: LD_EXP 15
9685: PPUSH
9686: LD_STRING D1-Roth-3
9688: PPUSH
9689: CALL_OW 88
// ComInvisible ( Roth ) ;
9693: LD_EXP 15
9697: PPUSH
9698: CALL_OW 152
// wait ( 0 0$1.3 ) ;
9702: LD_INT 46
9704: PPUSH
9705: CALL_OW 67
// Say ( JMM , D1-JMM-4 ) ;
9709: LD_EXP 14
9713: PPUSH
9714: LD_STRING D1-JMM-4
9716: PPUSH
9717: CALL_OW 88
// wait ( 0 0$0.3 ) ;
9721: LD_INT 10
9723: PPUSH
9724: CALL_OW 67
// ComTurnUnit ( Roth , JMM ) ;
9728: LD_EXP 15
9732: PPUSH
9733: LD_EXP 14
9737: PPUSH
9738: CALL_OW 119
// Say ( JMM , D1-JMM-4a ) ;
9742: LD_EXP 14
9746: PPUSH
9747: LD_STRING D1-JMM-4a
9749: PPUSH
9750: CALL_OW 88
// Say ( Roth , D1-Roth-4 ) ;
9754: LD_EXP 15
9758: PPUSH
9759: LD_STRING D1-Roth-4
9761: PPUSH
9762: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
9766: LD_EXP 14
9770: PPUSH
9771: LD_STRING D1-JMM-5
9773: PPUSH
9774: CALL_OW 88
// Say ( Roth , D1-Roth-5 ) ;
9778: LD_EXP 15
9782: PPUSH
9783: LD_STRING D1-Roth-5
9785: PPUSH
9786: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
9790: LD_EXP 14
9794: PPUSH
9795: LD_STRING D1-JMM-6
9797: PPUSH
9798: CALL_OW 88
// Say ( Roth , D1-Roth-6 ) ;
9802: LD_EXP 15
9806: PPUSH
9807: LD_STRING D1-Roth-6
9809: PPUSH
9810: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
9814: LD_EXP 14
9818: PPUSH
9819: LD_STRING D1-JMM-7
9821: PPUSH
9822: CALL_OW 88
// ComMoveXY ( Powell , GetX ( JMM ) , GetY ( JMM ) ) ;
9826: LD_EXP 16
9830: PPUSH
9831: LD_EXP 14
9835: PPUSH
9836: CALL_OW 250
9840: PPUSH
9841: LD_EXP 14
9845: PPUSH
9846: CALL_OW 251
9850: PPUSH
9851: CALL_OW 111
// Say ( Roth , D1-Roth-7 ) ;
9855: LD_EXP 15
9859: PPUSH
9860: LD_STRING D1-Roth-7
9862: PPUSH
9863: CALL_OW 88
// repeat wait ( 0 0$0.3 ) ;
9867: LD_INT 10
9869: PPUSH
9870: CALL_OW 67
// until GetDistUnits ( Powell , JMM ) < 6 ;
9874: LD_EXP 16
9878: PPUSH
9879: LD_EXP 14
9883: PPUSH
9884: CALL_OW 296
9888: PUSH
9889: LD_INT 6
9891: LESS
9892: IFFALSE 9867
// ComTurnUnit ( Powell , JMM ) ;
9894: LD_EXP 16
9898: PPUSH
9899: LD_EXP 14
9903: PPUSH
9904: CALL_OW 119
// Say ( Powell , D1-Pow-7 ) ;
9908: LD_EXP 16
9912: PPUSH
9913: LD_STRING D1-Pow-7
9915: PPUSH
9916: CALL_OW 88
// ComTurnUnit ( JMM , Powell ) ;
9920: LD_EXP 14
9924: PPUSH
9925: LD_EXP 16
9929: PPUSH
9930: CALL_OW 119
// ComTurnUnit ( Roth , Powell ) ;
9934: LD_EXP 15
9938: PPUSH
9939: LD_EXP 16
9943: PPUSH
9944: CALL_OW 119
// Say ( JMM , D1-JMM-8 ) ;
9948: LD_EXP 14
9952: PPUSH
9953: LD_STRING D1-JMM-8
9955: PPUSH
9956: CALL_OW 88
// Say ( Powell , D1-Pow-8 ) ;
9960: LD_EXP 16
9964: PPUSH
9965: LD_STRING D1-Pow-8
9967: PPUSH
9968: CALL_OW 88
// Say ( JMM , D1-JMM-9 ) ;
9972: LD_EXP 14
9976: PPUSH
9977: LD_STRING D1-JMM-9
9979: PPUSH
9980: CALL_OW 88
// ComMoveXY ( Powell , 124 , 61 ) ;
9984: LD_EXP 16
9988: PPUSH
9989: LD_INT 124
9991: PPUSH
9992: LD_INT 61
9994: PPUSH
9995: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9999: LD_INT 35
10001: PPUSH
10002: CALL_OW 67
// until GetDistUnits ( JMM , Powell ) > 6 ;
10006: LD_EXP 14
10010: PPUSH
10011: LD_EXP 16
10015: PPUSH
10016: CALL_OW 296
10020: PUSH
10021: LD_INT 6
10023: GREATER
10024: IFFALSE 9999
// SayRadio ( Powell , D1-Pow-9 ) ;
10026: LD_EXP 16
10030: PPUSH
10031: LD_STRING D1-Pow-9
10033: PPUSH
10034: CALL_OW 94
// RemoveUnit ( Powell ) ;
10038: LD_EXP 16
10042: PPUSH
10043: CALL_OW 64
// PlaceHumanInUnit ( Powell , ambar0 ) ;
10047: LD_EXP 16
10051: PPUSH
10052: LD_INT 18
10054: PPUSH
10055: CALL_OW 52
// if Joan and not Joan in selected then
10059: LD_EXP 36
10063: PUSH
10064: LD_EXP 36
10068: PUSH
10069: LD_EXP 3
10073: IN
10074: NOT
10075: AND
10076: IFFALSE 10090
// SayRadio ( Joan , D1-Joan-9 ) ;
10078: LD_EXP 36
10082: PPUSH
10083: LD_STRING D1-Joan-9
10085: PPUSH
10086: CALL_OW 94
// ComTurnUnit ( Roth , JMM ) ;
10090: LD_EXP 15
10094: PPUSH
10095: LD_EXP 14
10099: PPUSH
10100: CALL_OW 119
// ComTurnUnit ( JMM , Roth ) ;
10104: LD_EXP 14
10108: PPUSH
10109: LD_EXP 15
10113: PPUSH
10114: CALL_OW 119
// Say ( Roth , D1-Roth-9 ) ;
10118: LD_EXP 15
10122: PPUSH
10123: LD_STRING D1-Roth-9
10125: PPUSH
10126: CALL_OW 88
// Say ( JMM , D1-JMM-10 ) ;
10130: LD_EXP 14
10134: PPUSH
10135: LD_STRING D1-JMM-10
10137: PPUSH
10138: CALL_OW 88
// InGameOff ;
10142: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
10146: LD_STRING M1
10148: PPUSH
10149: CALL_OW 337
// if Difficulty < 3 then
10153: LD_OWVAR 67
10157: PUSH
10158: LD_INT 3
10160: LESS
10161: IFFALSE 10173
// ChangeSideFog ( 4 , 7 ) ;
10163: LD_INT 4
10165: PPUSH
10166: LD_INT 7
10168: PPUSH
10169: CALL_OW 343
// SaveForQuickRestart ;
10173: CALL_OW 22
// SetAttitude ( 7 , 1 , att_enemy , true ) ;
10177: LD_INT 7
10179: PPUSH
10180: LD_INT 1
10182: PPUSH
10183: LD_INT 2
10185: PPUSH
10186: LD_INT 1
10188: PPUSH
10189: CALL_OW 80
// wait ( 0 0$3 ) ;
10193: LD_INT 105
10195: PPUSH
10196: CALL_OW 67
// ComMoveXY ( Roth , 124 , 18 ) ;
10200: LD_EXP 15
10204: PPUSH
10205: LD_INT 124
10207: PPUSH
10208: LD_INT 18
10210: PPUSH
10211: CALL_OW 111
// AddComInvisible ( Roth ) ;
10215: LD_EXP 15
10219: PPUSH
10220: CALL_OW 212
// wait ( 0 0$30 ) ;
10224: LD_INT 1050
10226: PPUSH
10227: CALL_OW 67
// AddComWait ( Roth , 1 1$00 ) ;
10231: LD_EXP 15
10235: PPUSH
10236: LD_INT 2100
10238: PPUSH
10239: CALL_OW 202
// AddComMoveXY ( Roth , 156 , 20 ) ;
10243: LD_EXP 15
10247: PPUSH
10248: LD_INT 156
10250: PPUSH
10251: LD_INT 20
10253: PPUSH
10254: CALL_OW 171
// AddComMoveXY ( Roth , 178 , 42 ) ;
10258: LD_EXP 15
10262: PPUSH
10263: LD_INT 178
10265: PPUSH
10266: LD_INT 42
10268: PPUSH
10269: CALL_OW 171
// AddComInvisible ( Roth ) ;
10273: LD_EXP 15
10277: PPUSH
10278: CALL_OW 212
// end ;
10282: LD_VAR 0 1
10286: RET
// every 0 0$1 do var i , tmp ;
10287: GO 10289
10289: DISABLE
10290: LD_INT 0
10292: PPUSH
10293: PPUSH
// begin tmp := selected union friends ;
10294: LD_ADDR_VAR 0 2
10298: PUSH
10299: LD_EXP 3
10303: PUSH
10304: LD_EXP 4
10308: UNION
10309: ST_TO_ADDR
// if not tmp then
10310: LD_VAR 0 2
10314: NOT
10315: IFFALSE 10319
// exit ;
10317: GO 10391
// repeat wait ( 0 0$1 ) ;
10319: LD_INT 35
10321: PPUSH
10322: CALL_OW 67
// for i in tmp do
10326: LD_ADDR_VAR 0 1
10330: PUSH
10331: LD_VAR 0 2
10335: PUSH
10336: FOR_IN
10337: IFFALSE 10382
// if CanSpot ( JMM , i ) then
10339: LD_EXP 14
10343: PPUSH
10344: LD_VAR 0 1
10348: PPUSH
10349: CALL 9050 0 2
10353: IFFALSE 10380
// begin tmp := tmp diff i ;
10355: LD_ADDR_VAR 0 2
10359: PUSH
10360: LD_VAR 0 2
10364: PUSH
10365: LD_VAR 0 1
10369: DIFF
10370: ST_TO_ADDR
// Spot ( i ) ;
10371: LD_VAR 0 1
10375: PPUSH
10376: CALL 10394 0 1
// end ;
10380: GO 10336
10382: POP
10383: POP
// until not tmp ;
10384: LD_VAR 0 2
10388: NOT
10389: IFFALSE 10319
// end ;
10391: PPOPN 2
10393: END
// export function Spot ( unit ) ; var building , side , joined ; begin
10394: LD_INT 0
10396: PPUSH
10397: PPUSH
10398: PPUSH
10399: PPUSH
// if not unit or GetSide ( unit ) <> 4 or IsSleeping ( unit ) or not IsOk ( unit ) then
10400: LD_VAR 0 1
10404: NOT
10405: PUSH
10406: LD_VAR 0 1
10410: PPUSH
10411: CALL_OW 255
10415: PUSH
10416: LD_INT 4
10418: NONEQUAL
10419: OR
10420: PUSH
10421: LD_VAR 0 1
10425: PPUSH
10426: CALL_OW 555
10430: OR
10431: PUSH
10432: LD_VAR 0 1
10436: PPUSH
10437: CALL_OW 302
10441: NOT
10442: OR
10443: IFFALSE 10447
// exit ;
10445: GO 12329
// InGameOn ;
10447: CALL_OW 8
// side := 7 ;
10451: LD_ADDR_VAR 0 4
10455: PUSH
10456: LD_INT 7
10458: ST_TO_ADDR
// joined := false ;
10459: LD_ADDR_VAR 0 5
10463: PUSH
10464: LD_INT 0
10466: ST_TO_ADDR
// building := IsInUnit ( unit ) ;
10467: LD_ADDR_VAR 0 3
10471: PUSH
10472: LD_VAR 0 1
10476: PPUSH
10477: CALL_OW 310
10481: ST_TO_ADDR
// if building then
10482: LD_VAR 0 3
10486: IFFALSE 10545
// begin SetSide ( JMM , GetSide ( unit ) ) ;
10488: LD_EXP 14
10492: PPUSH
10493: LD_VAR 0 1
10497: PPUSH
10498: CALL_OW 255
10502: PPUSH
10503: CALL_OW 235
// ComEnterUnit ( JMM , building ) ;
10507: LD_EXP 14
10511: PPUSH
10512: LD_VAR 0 3
10516: PPUSH
10517: CALL_OW 120
// repeat wait ( 3 ) ;
10521: LD_INT 3
10523: PPUSH
10524: CALL_OW 67
// until IsInUnit ( JMM ) ;
10528: LD_EXP 14
10532: PPUSH
10533: CALL_OW 310
10537: IFFALSE 10521
// DialogueOn ;
10539: CALL_OW 6
// end else
10543: GO 10577
// begin ComTurnUnit ( JMM , unit ) ;
10545: LD_EXP 14
10549: PPUSH
10550: LD_VAR 0 1
10554: PPUSH
10555: CALL_OW 119
// ComTurnUnit ( unit , JMM ) ;
10559: LD_VAR 0 1
10563: PPUSH
10564: LD_EXP 14
10568: PPUSH
10569: CALL_OW 119
// DialogueOn ;
10573: CALL_OW 6
// end ; if unit = Joan then
10577: LD_VAR 0 1
10581: PUSH
10582: LD_EXP 36
10586: EQUAL
10587: IFFALSE 10697
// begin joined := true ;
10589: LD_ADDR_VAR 0 5
10593: PUSH
10594: LD_INT 1
10596: ST_TO_ADDR
// if Joan in selected then
10597: LD_EXP 36
10601: PUSH
10602: LD_EXP 3
10606: IN
10607: IFFALSE 10635
// begin Say ( Joan , D3-Joan-Joan-1 ) ;
10609: LD_EXP 36
10613: PPUSH
10614: LD_STRING D3-Joan-Joan-1
10616: PPUSH
10617: CALL_OW 88
// Say ( JMM , D3-Joan-JMM-1 ) ;
10621: LD_EXP 14
10625: PPUSH
10626: LD_STRING D3-Joan-JMM-1
10628: PPUSH
10629: CALL_OW 88
// end else
10633: GO 10695
// begin Say ( Joan , D4-Joan-Joan-1 ) ;
10635: LD_EXP 36
10639: PPUSH
10640: LD_STRING D4-Joan-Joan-1
10642: PPUSH
10643: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-1 ) ;
10647: LD_EXP 14
10651: PPUSH
10652: LD_STRING D4-Joan-JMM-1
10654: PPUSH
10655: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-2 ) ;
10659: LD_EXP 36
10663: PPUSH
10664: LD_STRING D4-Joan-Joan-2
10666: PPUSH
10667: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-2 ) ;
10671: LD_EXP 14
10675: PPUSH
10676: LD_STRING D4-Joan-JMM-2
10678: PPUSH
10679: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-3 ) ;
10683: LD_EXP 36
10687: PPUSH
10688: LD_STRING D4-Joan-Joan-3
10690: PPUSH
10691: CALL_OW 88
// end ; end else
10695: GO 12137
// if unit = Lisa then
10697: LD_VAR 0 1
10701: PUSH
10702: LD_EXP 23
10706: EQUAL
10707: IFFALSE 10899
// begin if Lisa in selected then
10709: LD_EXP 23
10713: PUSH
10714: LD_EXP 3
10718: IN
10719: IFFALSE 10832
// begin if GetSide ( Joan ) = 7 then
10721: LD_EXP 36
10725: PPUSH
10726: CALL_OW 255
10730: PUSH
10731: LD_INT 7
10733: EQUAL
10734: IFFALSE 10798
// begin Say ( Lisa , D3-LisaJ-Lisa-1 ) ;
10736: LD_EXP 23
10740: PPUSH
10741: LD_STRING D3-LisaJ-Lisa-1
10743: PPUSH
10744: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-1 ) ;
10748: LD_EXP 14
10752: PPUSH
10753: LD_STRING D3-LisaJ-JMM-1
10755: PPUSH
10756: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-2 ) ;
10760: LD_EXP 23
10764: PPUSH
10765: LD_STRING D3-LisaJ-Lisa-2
10767: PPUSH
10768: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-2 ) ;
10772: LD_EXP 14
10776: PPUSH
10777: LD_STRING D3-LisaJ-JMM-2
10779: PPUSH
10780: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-3 ) ;
10784: LD_EXP 23
10788: PPUSH
10789: LD_STRING D3-LisaJ-Lisa-3
10791: PPUSH
10792: CALL_OW 88
// end else
10796: GO 10830
// begin Say ( Lisa , D3-LisaL-Lisa-1 ) ;
10798: LD_EXP 23
10802: PPUSH
10803: LD_STRING D3-LisaL-Lisa-1
10805: PPUSH
10806: CALL_OW 88
// Say ( JMM , D3-LisaL-JMM-1 ) ;
10810: LD_EXP 14
10814: PPUSH
10815: LD_STRING D3-LisaL-JMM-1
10817: PPUSH
10818: CALL_OW 88
// joined := true ;
10822: LD_ADDR_VAR 0 5
10826: PUSH
10827: LD_INT 1
10829: ST_TO_ADDR
// end ; end else
10830: GO 10897
// begin if GetSide ( Joan ) = 7 then
10832: LD_EXP 36
10836: PPUSH
10837: CALL_OW 255
10841: PUSH
10842: LD_INT 7
10844: EQUAL
10845: IFFALSE 10885
// begin Say ( Lisa , D4-LisaJ-Lisa-1 ) ;
10847: LD_EXP 23
10851: PPUSH
10852: LD_STRING D4-LisaJ-Lisa-1
10854: PPUSH
10855: CALL_OW 88
// Say ( JMM , D4-LisaJ-JMM-1 ) ;
10859: LD_EXP 14
10863: PPUSH
10864: LD_STRING D4-LisaJ-JMM-1
10866: PPUSH
10867: CALL_OW 88
// Say ( Lisa , D4-LisaJ-Lisa-2 ) ;
10871: LD_EXP 23
10875: PPUSH
10876: LD_STRING D4-LisaJ-Lisa-2
10878: PPUSH
10879: CALL_OW 88
// end else
10883: GO 10897
// begin Say ( Lisa , D4-LisaL-Lisa-1 ) ;
10885: LD_EXP 23
10889: PPUSH
10890: LD_STRING D4-LisaL-Lisa-1
10892: PPUSH
10893: CALL_OW 88
// end ; end ; end else
10897: GO 12137
// if unit = Frank then
10899: LD_VAR 0 1
10903: PUSH
10904: LD_EXP 33
10908: EQUAL
10909: IFFALSE 11049
// begin joined := true ;
10911: LD_ADDR_VAR 0 5
10915: PUSH
10916: LD_INT 1
10918: ST_TO_ADDR
// if Frank in selected then
10919: LD_EXP 33
10923: PUSH
10924: LD_EXP 3
10928: IN
10929: IFFALSE 10999
// begin Say ( Frank , D3-Frank-Frank-1 ) ;
10931: LD_EXP 33
10935: PPUSH
10936: LD_STRING D3-Frank-Frank-1
10938: PPUSH
10939: CALL_OW 88
// Say ( JMM , D3-Frank-JMM-1 ) ;
10943: LD_EXP 14
10947: PPUSH
10948: LD_STRING D3-Frank-JMM-1
10950: PPUSH
10951: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-2 ) ;
10955: LD_EXP 33
10959: PPUSH
10960: LD_STRING D3-Frank-Frank-2
10962: PPUSH
10963: CALL_OW 88
// if reached_lab then
10967: LD_EXP 5
10971: IFFALSE 10997
// begin Say ( JMM , D3-Frank-JMM-2 ) ;
10973: LD_EXP 14
10977: PPUSH
10978: LD_STRING D3-Frank-JMM-2
10980: PPUSH
10981: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-3 ) ;
10985: LD_EXP 33
10989: PPUSH
10990: LD_STRING D3-Frank-Frank-3
10992: PPUSH
10993: CALL_OW 88
// end ; end else
10997: GO 11047
// begin Say ( Frank , D4-Frank-Frank-1 ) ;
10999: LD_EXP 33
11003: PPUSH
11004: LD_STRING D4-Frank-Frank-1
11006: PPUSH
11007: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-1 ) ;
11011: LD_EXP 14
11015: PPUSH
11016: LD_STRING D4-Frank-JMM-1
11018: PPUSH
11019: CALL_OW 88
// Say ( Frank , D4-Frank-Frank-2 ) ;
11023: LD_EXP 33
11027: PPUSH
11028: LD_STRING D4-Frank-Frank-2
11030: PPUSH
11031: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-2 ) ;
11035: LD_EXP 14
11039: PPUSH
11040: LD_STRING D4-Frank-JMM-2
11042: PPUSH
11043: CALL_OW 88
// end ; end else
11047: GO 12137
// if unit = Brown then
11049: LD_VAR 0 1
11053: PUSH
11054: LD_EXP 28
11058: EQUAL
11059: IFFALSE 11155
// begin if Brown in selected or gamma_commander = 2 then
11061: LD_EXP 28
11065: PUSH
11066: LD_EXP 3
11070: IN
11071: PUSH
11072: LD_EXP 10
11076: PUSH
11077: LD_INT 2
11079: EQUAL
11080: OR
11081: IFFALSE 11117
// begin Say ( Brown , D3-Soldier1-Sol1-1 ) ;
11083: LD_EXP 28
11087: PPUSH
11088: LD_STRING D3-Soldier1-Sol1-1
11090: PPUSH
11091: CALL_OW 88
// Say ( JMM , D6-JMM-Brown-1 ) ;
11095: LD_EXP 14
11099: PPUSH
11100: LD_STRING D6-JMM-Brown-1
11102: PPUSH
11103: CALL_OW 88
// joined := true ;
11107: LD_ADDR_VAR 0 5
11111: PUSH
11112: LD_INT 1
11114: ST_TO_ADDR
// end else
11115: GO 11153
// begin Say ( Brown , D4-Soldier2-Sol1-1 ) ;
11117: LD_EXP 28
11121: PPUSH
11122: LD_STRING D4-Soldier2-Sol1-1
11124: PPUSH
11125: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11129: LD_EXP 14
11133: PPUSH
11134: LD_STRING D4-Soldier1-JMM-1
11136: PPUSH
11137: CALL_OW 88
// Say ( Brown , D4-Soldier2-Sol1-2 ) ;
11141: LD_EXP 28
11145: PPUSH
11146: LD_STRING D4-Soldier2-Sol1-2
11148: PPUSH
11149: CALL_OW 88
// end ; end else
11153: GO 12137
// if unit = Donaldson then
11155: LD_VAR 0 1
11159: PUSH
11160: LD_EXP 24
11164: EQUAL
11165: IFFALSE 11261
// begin if Donaldson in selected or gamma_commander = 1 then
11167: LD_EXP 24
11171: PUSH
11172: LD_EXP 3
11176: IN
11177: PUSH
11178: LD_EXP 10
11182: PUSH
11183: LD_INT 1
11185: EQUAL
11186: OR
11187: IFFALSE 11223
// begin Say ( Donaldson , D3-Soldier2-FSol2-1 ) ;
11189: LD_EXP 24
11193: PPUSH
11194: LD_STRING D3-Soldier2-FSol2-1
11196: PPUSH
11197: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11201: LD_EXP 14
11205: PPUSH
11206: LD_STRING D3-Soldier2-JMM-1
11208: PPUSH
11209: CALL_OW 88
// joined := true ;
11213: LD_ADDR_VAR 0 5
11217: PUSH
11218: LD_INT 1
11220: ST_TO_ADDR
// end else
11221: GO 11259
// begin Say ( unit , D4-Soldier1-FSol1-1 ) ;
11223: LD_VAR 0 1
11227: PPUSH
11228: LD_STRING D4-Soldier1-FSol1-1
11230: PPUSH
11231: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11235: LD_EXP 14
11239: PPUSH
11240: LD_STRING D4-Soldier1-JMM-1
11242: PPUSH
11243: CALL_OW 88
// Say ( unit , D4-Soldier1-FSol1-2 ) ;
11247: LD_VAR 0 1
11251: PPUSH
11252: LD_STRING D4-Soldier1-FSol1-2
11254: PPUSH
11255: CALL_OW 88
// end ; end else
11259: GO 12137
// if unit = Cyrus then
11261: LD_VAR 0 1
11265: PUSH
11266: LD_EXP 26
11270: EQUAL
11271: IFFALSE 11345
// begin if Cyrus in selected then
11273: LD_EXP 26
11277: PUSH
11278: LD_EXP 3
11282: IN
11283: IFFALSE 11319
// begin Say ( Cyrus , D3-Cyrus-Cyrus-1 ) ;
11285: LD_EXP 26
11289: PPUSH
11290: LD_STRING D3-Cyrus-Cyrus-1
11292: PPUSH
11293: CALL_OW 88
// Say ( JMM , D3-Cyrus-JMM-1 ) ;
11297: LD_EXP 14
11301: PPUSH
11302: LD_STRING D3-Cyrus-JMM-1
11304: PPUSH
11305: CALL_OW 88
// joined := true ;
11309: LD_ADDR_VAR 0 5
11313: PUSH
11314: LD_INT 1
11316: ST_TO_ADDR
// end else
11317: GO 11343
// begin Say ( Cyrus , D4-Cyrus-Cyrus-1 ) ;
11319: LD_EXP 26
11323: PPUSH
11324: LD_STRING D4-Cyrus-Cyrus-1
11326: PPUSH
11327: CALL_OW 88
// Say ( JMM , D4-Cyrus-JMM-1 ) ;
11331: LD_EXP 14
11335: PPUSH
11336: LD_STRING D4-Cyrus-JMM-1
11338: PPUSH
11339: CALL_OW 88
// end ; end else
11343: GO 12137
// if unit = Bobby then
11345: LD_VAR 0 1
11349: PUSH
11350: LD_EXP 25
11354: EQUAL
11355: IFFALSE 11441
// begin if Bobby in selected then
11357: LD_EXP 25
11361: PUSH
11362: LD_EXP 3
11366: IN
11367: IFFALSE 11403
// begin Say ( Bobby , D3-Bobby-Bobby-1 ) ;
11369: LD_EXP 25
11373: PPUSH
11374: LD_STRING D3-Bobby-Bobby-1
11376: PPUSH
11377: CALL_OW 88
// Say ( JMM , D3-Bobby-JMM-1 ) ;
11381: LD_EXP 14
11385: PPUSH
11386: LD_STRING D3-Bobby-JMM-1
11388: PPUSH
11389: CALL_OW 88
// joined := true ;
11393: LD_ADDR_VAR 0 5
11397: PUSH
11398: LD_INT 1
11400: ST_TO_ADDR
// end else
11401: GO 11439
// begin Say ( Bobby , D4-Bobby-Bobby-1 ) ;
11403: LD_EXP 25
11407: PPUSH
11408: LD_STRING D4-Bobby-Bobby-1
11410: PPUSH
11411: CALL_OW 88
// Say ( JMM , D4-Bobby-JMM-1 ) ;
11415: LD_EXP 14
11419: PPUSH
11420: LD_STRING D4-Bobby-JMM-1
11422: PPUSH
11423: CALL_OW 88
// Say ( Bobby , D4-Bobby-Bobby-2 ) ;
11427: LD_EXP 25
11431: PPUSH
11432: LD_STRING D4-Bobby-Bobby-2
11434: PPUSH
11435: CALL_OW 88
// end ; end else
11439: GO 12137
// if unit = Cornel then
11441: LD_VAR 0 1
11445: PUSH
11446: LD_EXP 31
11450: EQUAL
11451: IFFALSE 11549
// begin if Cornel in selected then
11453: LD_EXP 31
11457: PUSH
11458: LD_EXP 3
11462: IN
11463: IFFALSE 11511
// begin Say ( Cornel , D3-Mark-Corn-1 ) ;
11465: LD_EXP 31
11469: PPUSH
11470: LD_STRING D3-Mark-Corn-1
11472: PPUSH
11473: CALL_OW 88
// Say ( JMM , D3-Mark-JMM-1 ) ;
11477: LD_EXP 14
11481: PPUSH
11482: LD_STRING D3-Mark-JMM-1
11484: PPUSH
11485: CALL_OW 88
// Say ( Cornel , D3-Mark-Corn-2 ) ;
11489: LD_EXP 31
11493: PPUSH
11494: LD_STRING D3-Mark-Corn-2
11496: PPUSH
11497: CALL_OW 88
// joined := true ;
11501: LD_ADDR_VAR 0 5
11505: PUSH
11506: LD_INT 1
11508: ST_TO_ADDR
// end else
11509: GO 11547
// begin Say ( Cornel , D4-Mark-Corn-1 ) ;
11511: LD_EXP 31
11515: PPUSH
11516: LD_STRING D4-Mark-Corn-1
11518: PPUSH
11519: CALL_OW 88
// Say ( JMM , D4-Mark-JMM-1 ) ;
11523: LD_EXP 14
11527: PPUSH
11528: LD_STRING D4-Mark-JMM-1
11530: PPUSH
11531: CALL_OW 88
// Say ( Cornel , D4-Mark-Corn-2 ) ;
11535: LD_EXP 31
11539: PPUSH
11540: LD_STRING D4-Mark-Corn-2
11542: PPUSH
11543: CALL_OW 88
// end ; end else
11547: GO 12137
// if unit = Gary then
11549: LD_VAR 0 1
11553: PUSH
11554: LD_EXP 32
11558: EQUAL
11559: IFFALSE 11643
// begin if Gary in selected then
11561: LD_EXP 32
11565: PUSH
11566: LD_EXP 3
11570: IN
11571: IFFALSE 11607
// begin Say ( Gary , D3-Gary-Gary-1 ) ;
11573: LD_EXP 32
11577: PPUSH
11578: LD_STRING D3-Gary-Gary-1
11580: PPUSH
11581: CALL_OW 88
// Say ( JMM , D3-Gary-JMM-1 ) ;
11585: LD_EXP 14
11589: PPUSH
11590: LD_STRING D3-Gary-JMM-1
11592: PPUSH
11593: CALL_OW 88
// joined := true ;
11597: LD_ADDR_VAR 0 5
11601: PUSH
11602: LD_INT 1
11604: ST_TO_ADDR
// end else
11605: GO 11641
// begin Say ( Gary , D4-Gary-Gary-1 ) ;
11607: LD_EXP 32
11611: PPUSH
11612: LD_STRING D4-Gary-Gary-1
11614: PPUSH
11615: CALL_OW 88
// SetSide ( Gary , 1 ) ;
11619: LD_EXP 32
11623: PPUSH
11624: LD_INT 1
11626: PPUSH
11627: CALL_OW 235
// DialogueOff ;
11631: CALL_OW 7
// InGameOff ;
11635: CALL_OW 9
// exit ;
11639: GO 12329
// end ; end else
11641: GO 12137
// if unit = Kikuchi then
11643: LD_VAR 0 1
11647: PUSH
11648: LD_EXP 34
11652: EQUAL
11653: IFFALSE 11737
// begin if Kikuchi in selected then
11655: LD_EXP 34
11659: PUSH
11660: LD_EXP 3
11664: IN
11665: IFFALSE 11701
// begin Say ( Kikuchi , D3-Yamako-Yam-1 ) ;
11667: LD_EXP 34
11671: PPUSH
11672: LD_STRING D3-Yamako-Yam-1
11674: PPUSH
11675: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11679: LD_EXP 14
11683: PPUSH
11684: LD_STRING D3-Soldier2-JMM-1
11686: PPUSH
11687: CALL_OW 88
// joined := true ;
11691: LD_ADDR_VAR 0 5
11695: PUSH
11696: LD_INT 1
11698: ST_TO_ADDR
// end else
11699: GO 11735
// begin Say ( Kikuchi , D4-Yamako-Yam-1 ) ;
11701: LD_EXP 34
11705: PPUSH
11706: LD_STRING D4-Yamako-Yam-1
11708: PPUSH
11709: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
11713: LD_EXP 34
11717: PPUSH
11718: LD_INT 1
11720: PPUSH
11721: CALL_OW 235
// DialogueOff ;
11725: CALL_OW 7
// InGameOff ;
11729: CALL_OW 9
// exit ;
11733: GO 12329
// end ; end else
11735: GO 12137
// if unit = Gladstone then
11737: LD_VAR 0 1
11741: PUSH
11742: LD_EXP 29
11746: EQUAL
11747: IFFALSE 11821
// begin if Gladstone in selected then
11749: LD_EXP 29
11753: PUSH
11754: LD_EXP 3
11758: IN
11759: IFFALSE 11795
// begin joined := true ;
11761: LD_ADDR_VAR 0 5
11765: PUSH
11766: LD_INT 1
11768: ST_TO_ADDR
// Say ( JMM , D3-Tim-JMM-1 ) ;
11769: LD_EXP 14
11773: PPUSH
11774: LD_STRING D3-Tim-JMM-1
11776: PPUSH
11777: CALL_OW 88
// Say ( Gladstone , D3-Tim-Glad-1 ) ;
11781: LD_EXP 29
11785: PPUSH
11786: LD_STRING D3-Tim-Glad-1
11788: PPUSH
11789: CALL_OW 88
// end else
11793: GO 11819
// begin Say ( JMM , D4-Tim-JMM-1 ) ;
11795: LD_EXP 14
11799: PPUSH
11800: LD_STRING D4-Tim-JMM-1
11802: PPUSH
11803: CALL_OW 88
// Say ( Gladstone , D4-Tim-Glad-1 ) ;
11807: LD_EXP 29
11811: PPUSH
11812: LD_STRING D4-Tim-Glad-1
11814: PPUSH
11815: CALL_OW 88
// end ; end else
11819: GO 12137
// if unit = Denis then
11821: LD_VAR 0 1
11825: PUSH
11826: LD_EXP 27
11830: EQUAL
11831: IFFALSE 11867
// begin joined := true ;
11833: LD_ADDR_VAR 0 5
11837: PUSH
11838: LD_INT 1
11840: ST_TO_ADDR
// Say ( Denis , D3-Denis-Den-1 ) ;
11841: LD_EXP 27
11845: PPUSH
11846: LD_STRING D3-Denis-Den-1
11848: PPUSH
11849: CALL_OW 88
// Say ( JMM , D3-Denis-JMM-1 ) ;
11853: LD_EXP 14
11857: PPUSH
11858: LD_STRING D3-Denis-JMM-1
11860: PPUSH
11861: CALL_OW 88
// end else
11865: GO 12137
// if unit = Simms then
11867: LD_VAR 0 1
11871: PUSH
11872: LD_EXP 35
11876: EQUAL
11877: IFFALSE 11913
// begin joined := true ;
11879: LD_ADDR_VAR 0 5
11883: PUSH
11884: LD_INT 1
11886: ST_TO_ADDR
// Say ( Simms , D3-Simms-Sim-1 ) ;
11887: LD_EXP 35
11891: PPUSH
11892: LD_STRING D3-Simms-Sim-1
11894: PPUSH
11895: CALL_OW 88
// Say ( JMM , D3-Simms-JMM-1 ) ;
11899: LD_EXP 14
11903: PPUSH
11904: LD_STRING D3-Simms-JMM-1
11906: PPUSH
11907: CALL_OW 88
// end else
11911: GO 12137
// if unit = DeltaDoctor then
11913: LD_VAR 0 1
11917: PUSH
11918: LD_EXP 37
11922: EQUAL
11923: IFFALSE 11959
// begin joined := true ;
11925: LD_ADDR_VAR 0 5
11929: PUSH
11930: LD_INT 1
11932: ST_TO_ADDR
// Say ( DeltaDoctor , D3-Soldier1-Sol1-1 ) ;
11933: LD_EXP 37
11937: PPUSH
11938: LD_STRING D3-Soldier1-Sol1-1
11940: PPUSH
11941: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
11945: LD_EXP 14
11949: PPUSH
11950: LD_STRING D3-Soldier1-JMM-1
11952: PPUSH
11953: CALL_OW 88
// end else
11957: GO 12137
// begin joined := unit in selected ;
11959: LD_ADDR_VAR 0 5
11963: PUSH
11964: LD_VAR 0 1
11968: PUSH
11969: LD_EXP 3
11973: IN
11974: ST_TO_ADDR
// if joined then
11975: LD_VAR 0 5
11979: IFFALSE 12048
// begin if GetSex ( unit ) = sex_male then
11981: LD_VAR 0 1
11985: PPUSH
11986: CALL_OW 258
11990: PUSH
11991: LD_INT 1
11993: EQUAL
11994: IFFALSE 12022
// begin Say ( unit , D3-Soldier1-Sol1-1 ) ;
11996: LD_VAR 0 1
12000: PPUSH
12001: LD_STRING D3-Soldier1-Sol1-1
12003: PPUSH
12004: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
12008: LD_EXP 14
12012: PPUSH
12013: LD_STRING D3-Soldier1-JMM-1
12015: PPUSH
12016: CALL_OW 88
// end else
12020: GO 12046
// begin Say ( unit , D3-Soldier2-FSol2-1 ) ;
12022: LD_VAR 0 1
12026: PPUSH
12027: LD_STRING D3-Soldier2-FSol2-1
12029: PPUSH
12030: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
12034: LD_EXP 14
12038: PPUSH
12039: LD_STRING D3-Soldier2-JMM-1
12041: PPUSH
12042: CALL_OW 88
// end ; end else
12046: GO 12137
// begin if GetSex ( unit ) = sex_male then
12048: LD_VAR 0 1
12052: PPUSH
12053: CALL_OW 258
12057: PUSH
12058: LD_INT 1
12060: EQUAL
12061: IFFALSE 12101
// begin Say ( unit , D4-Soldier2-Sol1-1 ) ;
12063: LD_VAR 0 1
12067: PPUSH
12068: LD_STRING D4-Soldier2-Sol1-1
12070: PPUSH
12071: CALL_OW 88
// Say ( JMM , D4-Soldier2-JMM-1 ) ;
12075: LD_EXP 14
12079: PPUSH
12080: LD_STRING D4-Soldier2-JMM-1
12082: PPUSH
12083: CALL_OW 88
// Say ( unit , D4-Soldier2-Sol2-1 ) ;
12087: LD_VAR 0 1
12091: PPUSH
12092: LD_STRING D4-Soldier2-Sol2-1
12094: PPUSH
12095: CALL_OW 88
// end else
12099: GO 12137
// begin Say ( unit , D4-Soldier1-FSol1-1 ) ;
12101: LD_VAR 0 1
12105: PPUSH
12106: LD_STRING D4-Soldier1-FSol1-1
12108: PPUSH
12109: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
12113: LD_EXP 14
12117: PPUSH
12118: LD_STRING D4-Soldier1-JMM-1
12120: PPUSH
12121: CALL_OW 88
// Say ( unit , D4-Soldier1-FSol1-2 ) ;
12125: LD_VAR 0 1
12129: PPUSH
12130: LD_STRING D4-Soldier1-FSol1-2
12132: PPUSH
12133: CALL_OW 88
// end ; end ; end ; DialogueOff ;
12137: CALL_OW 7
// InGameOff ;
12141: CALL_OW 9
// if building then
12145: LD_VAR 0 3
12149: IFFALSE 12250
// begin SetSide ( JMM , side ) ;
12151: LD_EXP 14
12155: PPUSH
12156: LD_VAR 0 4
12160: PPUSH
12161: CALL_OW 235
// ComExitBuilding ( JMM ) ;
12165: LD_EXP 14
12169: PPUSH
12170: CALL_OW 122
// if joined then
12174: LD_VAR 0 5
12178: IFFALSE 12217
// begin SetSide ( unit , side ) ;
12180: LD_VAR 0 1
12184: PPUSH
12185: LD_VAR 0 4
12189: PPUSH
12190: CALL_OW 235
// SetSide ( building , 1 ) ;
12194: LD_VAR 0 3
12198: PPUSH
12199: LD_INT 1
12201: PPUSH
12202: CALL_OW 235
// ComExitBuilding ( unit ) ;
12206: LD_VAR 0 1
12210: PPUSH
12211: CALL_OW 122
// end else
12215: GO 12248
// begin wait ( 0 0$10 ) ;
12217: LD_INT 350
12219: PPUSH
12220: CALL_OW 67
// SetSide ( unit , 1 ) ;
12224: LD_VAR 0 1
12228: PPUSH
12229: LD_INT 1
12231: PPUSH
12232: CALL_OW 235
// SetSide ( building , 1 ) ;
12236: LD_VAR 0 3
12240: PPUSH
12241: LD_INT 1
12243: PPUSH
12244: CALL_OW 235
// end ; end else
12248: GO 12329
// begin ComStop ( [ JMM , unit ] ) ;
12250: LD_EXP 14
12254: PUSH
12255: LD_VAR 0 1
12259: PUSH
12260: EMPTY
12261: LIST
12262: LIST
12263: PPUSH
12264: CALL_OW 141
// if joined then
12268: LD_VAR 0 5
12272: IFFALSE 12290
// SetSide ( unit , side ) else
12274: LD_VAR 0 1
12278: PPUSH
12279: LD_VAR 0 4
12283: PPUSH
12284: CALL_OW 235
12288: GO 12329
// begin repeat wait ( 0 0$1 ) ;
12290: LD_INT 35
12292: PPUSH
12293: CALL_OW 67
// until GetDistUnits ( JMM , unit ) > 11 ;
12297: LD_EXP 14
12301: PPUSH
12302: LD_VAR 0 1
12306: PPUSH
12307: CALL_OW 296
12311: PUSH
12312: LD_INT 11
12314: GREATER
12315: IFFALSE 12290
// SetSide ( unit , 1 ) ;
12317: LD_VAR 0 1
12321: PPUSH
12322: LD_INT 1
12324: PPUSH
12325: CALL_OW 235
// end ; end ; end ;
12329: LD_VAR 0 2
12333: RET
// every 0 0$1 trigger GetDistUnits ( JMM , Mike ) < 6 and See ( 1 , Mike ) do
12334: LD_EXP 14
12338: PPUSH
12339: LD_EXP 38
12343: PPUSH
12344: CALL_OW 296
12348: PUSH
12349: LD_INT 6
12351: LESS
12352: PUSH
12353: LD_INT 1
12355: PPUSH
12356: LD_EXP 38
12360: PPUSH
12361: CALL_OW 292
12365: AND
12366: IFFALSE 12424
12368: GO 12370
12370: DISABLE
// begin DialogueOn ;
12371: CALL_OW 6
// CenterNowOnUnits ( Mike ) ;
12375: LD_EXP 38
12379: PPUSH
12380: CALL_OW 87
// Say ( JMM , D6-JMM-Mike-1 ) ;
12384: LD_EXP 14
12388: PPUSH
12389: LD_STRING D6-JMM-Mike-1
12391: PPUSH
12392: CALL_OW 88
// Say ( Mike , D6-Mike-1 ) ;
12396: LD_EXP 38
12400: PPUSH
12401: LD_STRING D6-Mike-1
12403: PPUSH
12404: CALL_OW 88
// SetSide ( Mike , 7 ) ;
12408: LD_EXP 38
12412: PPUSH
12413: LD_INT 7
12415: PPUSH
12416: CALL_OW 235
// DialogueOff ;
12420: CALL_OW 7
// end ;
12424: END
// every 0 0$01 trigger IsInUnit ( JMM ) = amlab do
12425: LD_EXP 14
12429: PPUSH
12430: CALL_OW 310
12434: PUSH
12435: LD_INT 47
12437: EQUAL
12438: IFFALSE 12506
12440: GO 12442
12442: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
12443: LD_STRING M1a
12445: PPUSH
12446: CALL_OW 337
// SetTech ( tech_Soporific , 7 , state_researched ) ;
12450: LD_INT 13
12452: PPUSH
12453: LD_INT 7
12455: PPUSH
12456: LD_INT 2
12458: PPUSH
12459: CALL_OW 322
// SetTech ( tech_SpacAnom , 7 , state_researched ) ;
12463: LD_INT 29
12465: PPUSH
12466: LD_INT 7
12468: PPUSH
12469: LD_INT 2
12471: PPUSH
12472: CALL_OW 322
// SetClass ( JMM , class_bazooker ) ;
12476: LD_EXP 14
12480: PPUSH
12481: LD_INT 9
12483: PPUSH
12484: CALL_OW 336
// can_escape := true ;
12488: LD_ADDR_EXP 6
12492: PUSH
12493: LD_INT 1
12495: ST_TO_ADDR
// SetAreaMapShow ( escape_area , 1 ) ;
12496: LD_INT 19
12498: PPUSH
12499: LD_INT 1
12501: PPUSH
12502: CALL_OW 424
// end ;
12506: END
// every 0 0$1 trigger GetLives ( Powell ) < 999 do
12507: LD_EXP 16
12511: PPUSH
12512: CALL_OW 256
12516: PUSH
12517: LD_INT 999
12519: LESS
12520: IFFALSE 12571
12522: GO 12524
12524: DISABLE
// begin enable ;
12525: ENABLE
// if HexInfo ( 25 , 48 ) = Powell then
12526: LD_INT 25
12528: PPUSH
12529: LD_INT 48
12531: PPUSH
12532: CALL_OW 428
12536: PUSH
12537: LD_EXP 16
12541: EQUAL
12542: IFFALSE 12556
// begin RemoveUnit ( Powell ) ;
12544: LD_EXP 16
12548: PPUSH
12549: CALL_OW 64
// disable ;
12553: DISABLE
// end else
12554: GO 12571
// ComMoveXY ( Powell , 25 , 48 ) ;
12556: LD_EXP 16
12560: PPUSH
12561: LD_INT 25
12563: PPUSH
12564: LD_INT 48
12566: PPUSH
12567: CALL_OW 111
// end ;
12571: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do var i ;
12572: LD_INT 22
12574: PUSH
12575: LD_INT 4
12577: PUSH
12578: EMPTY
12579: LIST
12580: LIST
12581: PUSH
12582: LD_INT 21
12584: PUSH
12585: LD_INT 1
12587: PUSH
12588: EMPTY
12589: LIST
12590: LIST
12591: PUSH
12592: LD_INT 3
12594: PUSH
12595: LD_INT 24
12597: PUSH
12598: LD_INT 990
12600: PUSH
12601: EMPTY
12602: LIST
12603: LIST
12604: PUSH
12605: EMPTY
12606: LIST
12607: LIST
12608: PUSH
12609: EMPTY
12610: LIST
12611: LIST
12612: LIST
12613: PPUSH
12614: CALL_OW 69
12618: PUSH
12619: LD_EXP 15
12623: DIFF
12624: IFFALSE 12768
12626: GO 12628
12628: DISABLE
12629: LD_INT 0
12631: PPUSH
// begin enable ;
12632: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do
12633: LD_ADDR_VAR 0 1
12637: PUSH
12638: LD_INT 22
12640: PUSH
12641: LD_INT 4
12643: PUSH
12644: EMPTY
12645: LIST
12646: LIST
12647: PUSH
12648: LD_INT 21
12650: PUSH
12651: LD_INT 1
12653: PUSH
12654: EMPTY
12655: LIST
12656: LIST
12657: PUSH
12658: LD_INT 3
12660: PUSH
12661: LD_INT 24
12663: PUSH
12664: LD_INT 990
12666: PUSH
12667: EMPTY
12668: LIST
12669: LIST
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: PUSH
12675: EMPTY
12676: LIST
12677: LIST
12678: LIST
12679: PPUSH
12680: CALL_OW 69
12684: PUSH
12685: LD_EXP 15
12689: DIFF
12690: PUSH
12691: FOR_IN
12692: IFFALSE 12766
// begin ComFree ( i ) ;
12694: LD_VAR 0 1
12698: PPUSH
12699: CALL_OW 139
// SetSide ( i , 1 ) ;
12703: LD_VAR 0 1
12707: PPUSH
12708: LD_INT 1
12710: PPUSH
12711: CALL_OW 235
// if GetDistUnits ( i , JMM ) < 14 then
12715: LD_VAR 0 1
12719: PPUSH
12720: LD_EXP 14
12724: PPUSH
12725: CALL_OW 296
12729: PUSH
12730: LD_INT 14
12732: LESS
12733: IFFALSE 12764
// ComAgressiveMove ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
12735: LD_VAR 0 1
12739: PPUSH
12740: LD_EXP 14
12744: PPUSH
12745: CALL_OW 250
12749: PPUSH
12750: LD_EXP 14
12754: PPUSH
12755: CALL_OW 251
12759: PPUSH
12760: CALL_OW 114
// end ;
12764: GO 12691
12766: POP
12767: POP
// end ;
12768: PPOPN 1
12770: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var i ;
12771: LD_INT 22
12773: PUSH
12774: LD_INT 4
12776: PUSH
12777: EMPTY
12778: LIST
12779: LIST
12780: PUSH
12781: LD_INT 34
12783: PUSH
12784: LD_INT 12
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: PUSH
12791: EMPTY
12792: LIST
12793: LIST
12794: PPUSH
12795: CALL_OW 69
12799: IFFALSE 12881
12801: GO 12803
12803: DISABLE
12804: LD_INT 0
12806: PPUSH
// begin enable ;
12807: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do
12808: LD_ADDR_VAR 0 1
12812: PUSH
12813: LD_INT 22
12815: PUSH
12816: LD_INT 4
12818: PUSH
12819: EMPTY
12820: LIST
12821: LIST
12822: PUSH
12823: LD_INT 34
12825: PUSH
12826: LD_INT 12
12828: PUSH
12829: EMPTY
12830: LIST
12831: LIST
12832: PUSH
12833: EMPTY
12834: LIST
12835: LIST
12836: PPUSH
12837: CALL_OW 69
12841: PUSH
12842: FOR_IN
12843: IFFALSE 12879
// if GetDistUnits ( i , JMM ) < 6 then
12845: LD_VAR 0 1
12849: PPUSH
12850: LD_EXP 14
12854: PPUSH
12855: CALL_OW 296
12859: PUSH
12860: LD_INT 6
12862: LESS
12863: IFFALSE 12877
// SetSide ( i , 7 ) ;
12865: LD_VAR 0 1
12869: PPUSH
12870: LD_INT 7
12872: PPUSH
12873: CALL_OW 235
12877: GO 12842
12879: POP
12880: POP
// end ;
12881: PPOPN 1
12883: END
// every 0 0$01 trigger can_escape and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) do var all_taken , tmp , m1 , m2 , m3 ;
12884: LD_EXP 6
12888: PUSH
12889: LD_INT 19
12891: PPUSH
12892: LD_INT 22
12894: PUSH
12895: LD_INT 7
12897: PUSH
12898: EMPTY
12899: LIST
12900: LIST
12901: PUSH
12902: LD_INT 21
12904: PUSH
12905: LD_INT 1
12907: PUSH
12908: EMPTY
12909: LIST
12910: LIST
12911: PUSH
12912: EMPTY
12913: LIST
12914: LIST
12915: PPUSH
12916: CALL_OW 71
12920: NOT
12921: AND
12922: PUSH
12923: LD_INT 3
12925: PPUSH
12926: CALL_OW 469
12930: NOT
12931: AND
12932: PUSH
12933: LD_INT 5
12935: PPUSH
12936: CALL_OW 469
12940: NOT
12941: AND
12942: IFFALSE 14625
12944: GO 12946
12946: DISABLE
12947: LD_INT 0
12949: PPUSH
12950: PPUSH
12951: PPUSH
12952: PPUSH
12953: PPUSH
// begin m1 := false ;
12954: LD_ADDR_VAR 0 3
12958: PUSH
12959: LD_INT 0
12961: ST_TO_ADDR
// m2 := false ;
12962: LD_ADDR_VAR 0 4
12966: PUSH
12967: LD_INT 0
12969: ST_TO_ADDR
// m3 := false ;
12970: LD_ADDR_VAR 0 5
12974: PUSH
12975: LD_INT 0
12977: ST_TO_ADDR
// all_taken := ( UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 ) ;
12978: LD_ADDR_VAR 0 1
12982: PUSH
12983: LD_EXP 3
12987: PPUSH
12988: LD_INT 22
12990: PUSH
12991: LD_INT 4
12993: PUSH
12994: EMPTY
12995: LIST
12996: LIST
12997: PUSH
12998: LD_INT 21
13000: PUSH
13001: LD_INT 1
13003: PUSH
13004: EMPTY
13005: LIST
13006: LIST
13007: PUSH
13008: EMPTY
13009: LIST
13010: LIST
13011: PPUSH
13012: CALL_OW 72
13016: PUSH
13017: LD_INT 0
13019: EQUAL
13020: ST_TO_ADDR
// if not all_taken then
13021: LD_VAR 0 1
13025: NOT
13026: IFFALSE 13167
// case Query ( Q1 ) of 1 :
13028: LD_STRING Q1
13030: PPUSH
13031: CALL_OW 97
13035: PUSH
13036: LD_INT 1
13038: DOUBLE
13039: EQUAL
13040: IFTRUE 13044
13042: GO 13155
13044: POP
// begin repeat wait ( 0 0$1 ) ;
13045: LD_INT 35
13047: PPUSH
13048: CALL_OW 67
// until UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) ;
13052: LD_EXP 3
13056: PPUSH
13057: LD_INT 22
13059: PUSH
13060: LD_INT 4
13062: PUSH
13063: EMPTY
13064: LIST
13065: LIST
13066: PUSH
13067: LD_INT 21
13069: PUSH
13070: LD_INT 1
13072: PUSH
13073: EMPTY
13074: LIST
13075: LIST
13076: PUSH
13077: EMPTY
13078: LIST
13079: LIST
13080: PPUSH
13081: CALL_OW 72
13085: PUSH
13086: LD_INT 0
13088: EQUAL
13089: PUSH
13090: LD_INT 19
13092: PPUSH
13093: LD_INT 22
13095: PUSH
13096: LD_INT 7
13098: PUSH
13099: EMPTY
13100: LIST
13101: LIST
13102: PUSH
13103: LD_INT 21
13105: PUSH
13106: LD_INT 1
13108: PUSH
13109: EMPTY
13110: LIST
13111: LIST
13112: PUSH
13113: EMPTY
13114: LIST
13115: LIST
13116: PPUSH
13117: CALL_OW 71
13121: NOT
13122: AND
13123: PUSH
13124: LD_INT 3
13126: PPUSH
13127: CALL_OW 469
13131: NOT
13132: AND
13133: PUSH
13134: LD_INT 5
13136: PPUSH
13137: CALL_OW 469
13141: NOT
13142: AND
13143: IFFALSE 13045
// all_taken := true ;
13145: LD_ADDR_VAR 0 1
13149: PUSH
13150: LD_INT 1
13152: ST_TO_ADDR
// end ; 2 :
13153: GO 13167
13155: LD_INT 2
13157: DOUBLE
13158: EQUAL
13159: IFTRUE 13163
13161: GO 13166
13163: POP
// ; end ;
13164: GO 13167
13166: POP
// if team_kill_counter < 3 then
13167: LD_EXP 9
13171: PUSH
13172: LD_INT 3
13174: LESS
13175: IFFALSE 13191
// Say ( JMM , D5-JMM-1 ) else
13177: LD_EXP 14
13181: PPUSH
13182: LD_STRING D5-JMM-1
13184: PPUSH
13185: CALL_OW 88
13189: GO 13203
// Say ( JMM , D5-JMM-1a ) ;
13191: LD_EXP 14
13195: PPUSH
13196: LD_STRING D5-JMM-1a
13198: PPUSH
13199: CALL_OW 88
// if ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Roth ] ) >= 10 then
13203: LD_INT 22
13205: PUSH
13206: LD_INT 7
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: PUSH
13213: LD_INT 21
13215: PUSH
13216: LD_INT 1
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: PUSH
13223: LD_INT 23
13225: PUSH
13226: LD_INT 1
13228: PUSH
13229: EMPTY
13230: LIST
13231: LIST
13232: PUSH
13233: EMPTY
13234: LIST
13235: LIST
13236: LIST
13237: PPUSH
13238: CALL_OW 69
13242: PUSH
13243: LD_EXP 14
13247: PUSH
13248: LD_EXP 15
13252: PUSH
13253: EMPTY
13254: LIST
13255: LIST
13256: DIFF
13257: PUSH
13258: LD_INT 10
13260: GREATEREQUAL
13261: IFFALSE 13270
// SetAchievement ( ACH_TEAM ) ;
13263: LD_STRING ACH_TEAM
13265: PPUSH
13266: CALL_OW 543
// if not invis_used then
13270: LD_EXP 12
13274: NOT
13275: IFFALSE 13291
// begin wait ( 3 ) ;
13277: LD_INT 3
13279: PPUSH
13280: CALL_OW 67
// SetAchievement ( ACH_NOINVIS ) ;
13284: LD_STRING ACH_NOINVIS
13286: PPUSH
13287: CALL_OW 543
// end ; if not alert then
13291: LD_EXP 13
13295: NOT
13296: IFFALSE 13312
// begin wait ( 3 ) ;
13298: LD_INT 3
13300: PPUSH
13301: CALL_OW 67
// SetAchievement ( ACH_ALARM ) ;
13305: LD_STRING ACH_ALARM
13307: PPUSH
13308: CALL_OW 543
// end ; if tick < 15 15$00 then
13312: LD_OWVAR 1
13316: PUSH
13317: LD_INT 31500
13319: LESS
13320: IFFALSE 13336
// begin wait ( 3 ) ;
13322: LD_INT 3
13324: PPUSH
13325: CALL_OW 67
// SetAchievement ( ACH_ASPEED_16 ) ;
13329: LD_STRING ACH_ASPEED_16
13331: PPUSH
13332: CALL_OW 543
// end ; if all_taken then
13336: LD_VAR 0 1
13340: IFFALSE 13362
// begin AddMedal ( All , 1 ) ;
13342: LD_STRING All
13344: PPUSH
13345: LD_INT 1
13347: PPUSH
13348: CALL_OW 101
// m1 := true ;
13352: LD_ADDR_VAR 0 3
13356: PUSH
13357: LD_INT 1
13359: ST_TO_ADDR
// end else
13360: GO 13373
// AddMedal ( All , - 1 ) ;
13362: LD_STRING All
13364: PPUSH
13365: LD_INT 1
13367: NEG
13368: PPUSH
13369: CALL_OW 101
// if team_kill_counter then
13373: LD_EXP 9
13377: IFFALSE 13392
// AddMedal ( Save , - 1 ) else
13379: LD_STRING Save
13381: PPUSH
13382: LD_INT 1
13384: NEG
13385: PPUSH
13386: CALL_OW 101
13390: GO 13410
// begin AddMedal ( Save , 1 ) ;
13392: LD_STRING Save
13394: PPUSH
13395: LD_INT 1
13397: PPUSH
13398: CALL_OW 101
// m2 := true ;
13402: LD_ADDR_VAR 0 4
13406: PUSH
13407: LD_INT 1
13409: ST_TO_ADDR
// end ; if friends_kill_counter >= [ 2 , 2 , 1 , 1 ] [ Difficulty ] then
13410: LD_EXP 8
13414: PUSH
13415: LD_INT 2
13417: PUSH
13418: LD_INT 2
13420: PUSH
13421: LD_INT 1
13423: PUSH
13424: LD_INT 1
13426: PUSH
13427: EMPTY
13428: LIST
13429: LIST
13430: LIST
13431: LIST
13432: PUSH
13433: LD_OWVAR 67
13437: ARRAY
13438: GREATEREQUAL
13439: IFFALSE 13454
// AddMedal ( Friendship , - 1 ) else
13441: LD_STRING Friendship
13443: PPUSH
13444: LD_INT 1
13446: NEG
13447: PPUSH
13448: CALL_OW 101
13452: GO 13472
// begin AddMedal ( Friendship , 1 ) ;
13454: LD_STRING Friendship
13456: PPUSH
13457: LD_INT 1
13459: PPUSH
13460: CALL_OW 101
// m3 := true ;
13464: LD_ADDR_VAR 0 5
13468: PUSH
13469: LD_INT 1
13471: ST_TO_ADDR
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
13472: LD_VAR 0 3
13476: PUSH
13477: LD_VAR 0 4
13481: AND
13482: PUSH
13483: LD_VAR 0 5
13487: AND
13488: PUSH
13489: LD_OWVAR 67
13493: PUSH
13494: LD_INT 3
13496: GREATEREQUAL
13497: AND
13498: IFFALSE 13510
// SetAchievementEX ( ACH_AMER , 16 ) ;
13500: LD_STRING ACH_AMER
13502: PPUSH
13503: LD_INT 16
13505: PPUSH
13506: CALL_OW 564
// GiveMedals ( MAIN ) ;
13510: LD_STRING MAIN
13512: PPUSH
13513: CALL_OW 102
// tmp := FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] , [ f_class , class_apeman_engineer ] ] ] ] ) ;
13517: LD_ADDR_VAR 0 2
13521: PUSH
13522: LD_INT 22
13524: PUSH
13525: LD_INT 7
13527: PUSH
13528: EMPTY
13529: LIST
13530: LIST
13531: PUSH
13532: LD_INT 2
13534: PUSH
13535: LD_INT 25
13537: PUSH
13538: LD_INT 1
13540: PUSH
13541: EMPTY
13542: LIST
13543: LIST
13544: PUSH
13545: LD_INT 25
13547: PUSH
13548: LD_INT 2
13550: PUSH
13551: EMPTY
13552: LIST
13553: LIST
13554: PUSH
13555: LD_INT 25
13557: PUSH
13558: LD_INT 3
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: PUSH
13565: LD_INT 25
13567: PUSH
13568: LD_INT 4
13570: PUSH
13571: EMPTY
13572: LIST
13573: LIST
13574: PUSH
13575: LD_INT 25
13577: PUSH
13578: LD_INT 5
13580: PUSH
13581: EMPTY
13582: LIST
13583: LIST
13584: PUSH
13585: LD_INT 25
13587: PUSH
13588: LD_INT 8
13590: PUSH
13591: EMPTY
13592: LIST
13593: LIST
13594: PUSH
13595: LD_INT 25
13597: PUSH
13598: LD_INT 9
13600: PUSH
13601: EMPTY
13602: LIST
13603: LIST
13604: PUSH
13605: LD_INT 25
13607: PUSH
13608: LD_INT 16
13610: PUSH
13611: EMPTY
13612: LIST
13613: LIST
13614: PUSH
13615: EMPTY
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: PUSH
13630: EMPTY
13631: LIST
13632: PPUSH
13633: CALL_OW 69
13637: ST_TO_ADDR
// RewardPeople ( tmp union Roth diff Mike ) ;
13638: LD_VAR 0 2
13642: PUSH
13643: LD_EXP 15
13647: UNION
13648: PUSH
13649: LD_EXP 38
13653: DIFF
13654: PPUSH
13655: CALL_OW 43
// SaveCharacters ( JMM , 12a_JMM ) ;
13659: LD_EXP 14
13663: PPUSH
13664: LD_STRING 12a_JMM
13666: PPUSH
13667: CALL_OW 38
// if IsLive ( Roth ) then
13671: LD_EXP 15
13675: PPUSH
13676: CALL_OW 300
13680: IFFALSE 13694
// SaveCharacters ( Roth , 12a_Roth ) ;
13682: LD_EXP 15
13686: PPUSH
13687: LD_STRING 12a_Roth
13689: PPUSH
13690: CALL_OW 38
// if Lisa in tmp then
13694: LD_EXP 23
13698: PUSH
13699: LD_VAR 0 2
13703: IN
13704: IFFALSE 13720
// SaveCharacters ( Lisa , 12a_Lisa ) else
13706: LD_EXP 23
13710: PPUSH
13711: LD_STRING 12a_Lisa
13713: PPUSH
13714: CALL_OW 38
13718: GO 13738
// if Lisa then
13720: LD_EXP 23
13724: IFFALSE 13738
// SaveCharacters ( Lisa , 12p_Lisa ) ;
13726: LD_EXP 23
13730: PPUSH
13731: LD_STRING 12p_Lisa
13733: PPUSH
13734: CALL_OW 38
// if Mike in tmp then
13738: LD_EXP 38
13742: PUSH
13743: LD_VAR 0 2
13747: IN
13748: IFFALSE 13762
// SaveCharacters ( Mike , 12a_Mike ) ;
13750: LD_EXP 38
13754: PPUSH
13755: LD_STRING 12a_Mike
13757: PPUSH
13758: CALL_OW 38
// if Donaldson in tmp then
13762: LD_EXP 24
13766: PUSH
13767: LD_VAR 0 2
13771: IN
13772: IFFALSE 13788
// SaveCharacters ( Donaldson , 12a_Donaldson ) else
13774: LD_EXP 24
13778: PPUSH
13779: LD_STRING 12a_Donaldson
13781: PPUSH
13782: CALL_OW 38
13786: GO 13806
// if Donaldson then
13788: LD_EXP 24
13792: IFFALSE 13806
// SaveCharacters ( Donaldson , 12p_Donaldson ) ;
13794: LD_EXP 24
13798: PPUSH
13799: LD_STRING 12p_Donaldson
13801: PPUSH
13802: CALL_OW 38
// if Bobby in tmp then
13806: LD_EXP 25
13810: PUSH
13811: LD_VAR 0 2
13815: IN
13816: IFFALSE 13832
// SaveCharacters ( Bobby , 12a_Bobby ) else
13818: LD_EXP 25
13822: PPUSH
13823: LD_STRING 12a_Bobby
13825: PPUSH
13826: CALL_OW 38
13830: GO 13850
// if Bobby then
13832: LD_EXP 25
13836: IFFALSE 13850
// SaveCharacters ( Bobby , 12p_Bobby ) ;
13838: LD_EXP 25
13842: PPUSH
13843: LD_STRING 12p_Bobby
13845: PPUSH
13846: CALL_OW 38
// if Cyrus in tmp then
13850: LD_EXP 26
13854: PUSH
13855: LD_VAR 0 2
13859: IN
13860: IFFALSE 13876
// SaveCharacters ( Cyrus , 12a_Cyrus ) else
13862: LD_EXP 26
13866: PPUSH
13867: LD_STRING 12a_Cyrus
13869: PPUSH
13870: CALL_OW 38
13874: GO 13894
// if Cyrus then
13876: LD_EXP 26
13880: IFFALSE 13894
// SaveCharacters ( Cyrus , 12p_Cyrus ) ;
13882: LD_EXP 26
13886: PPUSH
13887: LD_STRING 12p_Cyrus
13889: PPUSH
13890: CALL_OW 38
// if Denis in tmp then
13894: LD_EXP 27
13898: PUSH
13899: LD_VAR 0 2
13903: IN
13904: IFFALSE 13918
// SaveCharacters ( Denis , 12a_Denis ) ;
13906: LD_EXP 27
13910: PPUSH
13911: LD_STRING 12a_Denis
13913: PPUSH
13914: CALL_OW 38
// if Brown in tmp then
13918: LD_EXP 28
13922: PUSH
13923: LD_VAR 0 2
13927: IN
13928: IFFALSE 13944
// SaveCharacters ( Brown , 12a_Brown ) else
13930: LD_EXP 28
13934: PPUSH
13935: LD_STRING 12a_Brown
13937: PPUSH
13938: CALL_OW 38
13942: GO 13968
// if Brown in tmp then
13944: LD_EXP 28
13948: PUSH
13949: LD_VAR 0 2
13953: IN
13954: IFFALSE 13968
// SaveCharacters ( Brown , 12p_Brown ) ;
13956: LD_EXP 28
13960: PPUSH
13961: LD_STRING 12p_Brown
13963: PPUSH
13964: CALL_OW 38
// if Gladstone in tmp then
13968: LD_EXP 29
13972: PUSH
13973: LD_VAR 0 2
13977: IN
13978: IFFALSE 13994
// SaveCharacters ( Gladstone , 12a_Gladstone ) else
13980: LD_EXP 29
13984: PPUSH
13985: LD_STRING 12a_Gladstone
13987: PPUSH
13988: CALL_OW 38
13992: GO 14012
// if Gladstone then
13994: LD_EXP 29
13998: IFFALSE 14012
// SaveCharacters ( Gladstone , 12p_Gladstone ) ;
14000: LD_EXP 29
14004: PPUSH
14005: LD_STRING 12p_Gladstone
14007: PPUSH
14008: CALL_OW 38
// if Houten in tmp then
14012: LD_EXP 30
14016: PUSH
14017: LD_VAR 0 2
14021: IN
14022: IFFALSE 14038
// SaveCharacters ( Houten , 12a_Houten ) else
14024: LD_EXP 30
14028: PPUSH
14029: LD_STRING 12a_Houten
14031: PPUSH
14032: CALL_OW 38
14036: GO 14056
// if Houten then
14038: LD_EXP 30
14042: IFFALSE 14056
// SaveCharacters ( Houten , 12p_Houten ) ;
14044: LD_EXP 30
14048: PPUSH
14049: LD_STRING 12p_Houten
14051: PPUSH
14052: CALL_OW 38
// if Cornel in tmp then
14056: LD_EXP 31
14060: PUSH
14061: LD_VAR 0 2
14065: IN
14066: IFFALSE 14082
// SaveCharacters ( Cornel , 12a_Cornell ) else
14068: LD_EXP 31
14072: PPUSH
14073: LD_STRING 12a_Cornell
14075: PPUSH
14076: CALL_OW 38
14080: GO 14100
// if Cornel then
14082: LD_EXP 31
14086: IFFALSE 14100
// SaveCharacters ( Cornel , 12p_Cornell ) ;
14088: LD_EXP 31
14092: PPUSH
14093: LD_STRING 12p_Cornell
14095: PPUSH
14096: CALL_OW 38
// if Gary in tmp then
14100: LD_EXP 32
14104: PUSH
14105: LD_VAR 0 2
14109: IN
14110: IFFALSE 14126
// SaveCharacters ( Gary , 12a_Gary ) else
14112: LD_EXP 32
14116: PPUSH
14117: LD_STRING 12a_Gary
14119: PPUSH
14120: CALL_OW 38
14124: GO 14144
// if Gary then
14126: LD_EXP 32
14130: IFFALSE 14144
// SaveCharacters ( Gary , 12p_Gary ) ;
14132: LD_EXP 32
14136: PPUSH
14137: LD_STRING 12p_Gary
14139: PPUSH
14140: CALL_OW 38
// if Frank in tmp then
14144: LD_EXP 33
14148: PUSH
14149: LD_VAR 0 2
14153: IN
14154: IFFALSE 14168
// SaveCharacters ( Frank , 12a_Frank ) ;
14156: LD_EXP 33
14160: PPUSH
14161: LD_STRING 12a_Frank
14163: PPUSH
14164: CALL_OW 38
// if Kikuchi in tmp then
14168: LD_EXP 34
14172: PUSH
14173: LD_VAR 0 2
14177: IN
14178: IFFALSE 14194
// SaveCharacters ( Kikuchi , 12a_Kikuchi ) else
14180: LD_EXP 34
14184: PPUSH
14185: LD_STRING 12a_Kikuchi
14187: PPUSH
14188: CALL_OW 38
14192: GO 14212
// if Kikuchi then
14194: LD_EXP 34
14198: IFFALSE 14212
// SaveCharacters ( Kikuchi , 12p_Kikuchi ) ;
14200: LD_EXP 34
14204: PPUSH
14205: LD_STRING 12p_Kikuchi
14207: PPUSH
14208: CALL_OW 38
// if Simms in tmp then
14212: LD_EXP 35
14216: PUSH
14217: LD_VAR 0 2
14221: IN
14222: IFFALSE 14236
// SaveCharacters ( Simms , 12a_Simms ) ;
14224: LD_EXP 35
14228: PPUSH
14229: LD_STRING 12a_Simms
14231: PPUSH
14232: CALL_OW 38
// if Joan in tmp then
14236: LD_EXP 36
14240: PUSH
14241: LD_VAR 0 2
14245: IN
14246: IFFALSE 14260
// SaveCharacters ( Joan , 12a_Joan ) ;
14248: LD_EXP 36
14252: PPUSH
14253: LD_STRING 12a_Joan
14255: PPUSH
14256: CALL_OW 38
// if DeltaDoctor in tmp then
14260: LD_EXP 37
14264: PUSH
14265: LD_VAR 0 2
14269: IN
14270: IFFALSE 14284
// SaveCharacters ( DeltaDoctor , 12a_DeltaDoctor ) ;
14272: LD_EXP 37
14276: PPUSH
14277: LD_STRING 12a_DeltaDoctor
14279: PPUSH
14280: CALL_OW 38
// tmp := tmp diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Mike ] ;
14284: LD_ADDR_VAR 0 2
14288: PUSH
14289: LD_VAR 0 2
14293: PUSH
14294: LD_EXP 14
14298: PUSH
14299: LD_EXP 15
14303: PUSH
14304: LD_EXP 23
14308: PUSH
14309: LD_EXP 24
14313: PUSH
14314: LD_EXP 25
14318: PUSH
14319: LD_EXP 26
14323: PUSH
14324: LD_EXP 27
14328: PUSH
14329: LD_EXP 28
14333: PUSH
14334: LD_EXP 29
14338: PUSH
14339: LD_EXP 30
14343: PUSH
14344: LD_EXP 31
14348: PUSH
14349: LD_EXP 32
14353: PUSH
14354: LD_EXP 33
14358: PUSH
14359: LD_EXP 34
14363: PUSH
14364: LD_EXP 35
14368: PUSH
14369: LD_EXP 36
14373: PUSH
14374: LD_EXP 37
14378: PUSH
14379: LD_EXP 38
14383: PUSH
14384: EMPTY
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: LIST
14403: DIFF
14404: ST_TO_ADDR
// if tmp then
14405: LD_VAR 0 2
14409: IFFALSE 14423
// SaveCharacters ( tmp , 12a_others ) ;
14411: LD_VAR 0 2
14415: PPUSH
14416: LD_STRING 12a_others
14418: PPUSH
14419: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_side , 1 ] , [ f_side , 4 ] ] ] ) diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Powell , Mike ] ;
14423: LD_ADDR_VAR 0 2
14427: PUSH
14428: LD_INT 21
14430: PUSH
14431: LD_INT 1
14433: PUSH
14434: EMPTY
14435: LIST
14436: LIST
14437: PUSH
14438: LD_INT 23
14440: PUSH
14441: LD_INT 1
14443: PUSH
14444: EMPTY
14445: LIST
14446: LIST
14447: PUSH
14448: LD_INT 2
14450: PUSH
14451: LD_INT 22
14453: PUSH
14454: LD_INT 1
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: PUSH
14461: LD_INT 22
14463: PUSH
14464: LD_INT 4
14466: PUSH
14467: EMPTY
14468: LIST
14469: LIST
14470: PUSH
14471: EMPTY
14472: LIST
14473: LIST
14474: LIST
14475: PUSH
14476: EMPTY
14477: LIST
14478: LIST
14479: LIST
14480: PPUSH
14481: CALL_OW 69
14485: PUSH
14486: LD_EXP 14
14490: PUSH
14491: LD_EXP 15
14495: PUSH
14496: LD_EXP 23
14500: PUSH
14501: LD_EXP 24
14505: PUSH
14506: LD_EXP 25
14510: PUSH
14511: LD_EXP 26
14515: PUSH
14516: LD_EXP 27
14520: PUSH
14521: LD_EXP 28
14525: PUSH
14526: LD_EXP 29
14530: PUSH
14531: LD_EXP 30
14535: PUSH
14536: LD_EXP 31
14540: PUSH
14541: LD_EXP 32
14545: PUSH
14546: LD_EXP 33
14550: PUSH
14551: LD_EXP 34
14555: PUSH
14556: LD_EXP 35
14560: PUSH
14561: LD_EXP 36
14565: PUSH
14566: LD_EXP 37
14570: PUSH
14571: LD_EXP 16
14575: PUSH
14576: LD_EXP 38
14580: PUSH
14581: EMPTY
14582: LIST
14583: LIST
14584: LIST
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: DIFF
14602: ST_TO_ADDR
// if tmp then
14603: LD_VAR 0 2
14607: IFFALSE 14621
// SaveCharacters ( tmp , 12p_others ) ;
14609: LD_VAR 0 2
14613: PPUSH
14614: LD_STRING 12p_others
14616: PPUSH
14617: CALL_OW 38
// YouWin ;
14621: CALL_OW 103
// end ; end_of_file
14625: PPOPN 5
14627: END
// on SailEvent ( event ) do var tmp ;
14628: LD_INT 0
14630: PPUSH
// begin if event = 1 then
14631: LD_VAR 0 1
14635: PUSH
14636: LD_INT 1
14638: EQUAL
14639: IFFALSE 14712
// begin if not mobile_patrol then
14641: LD_EXP 17
14645: NOT
14646: IFFALSE 14650
// exit ;
14648: GO 14712
// tmp := mobile_patrol [ mobile_patrol ] ;
14650: LD_ADDR_VAR 0 2
14654: PUSH
14655: LD_EXP 17
14659: PUSH
14660: LD_EXP 17
14664: ARRAY
14665: ST_TO_ADDR
// mobile_patrol := Delete ( mobile_patrol , mobile_patrol ) ;
14666: LD_ADDR_EXP 17
14670: PUSH
14671: LD_EXP 17
14675: PPUSH
14676: LD_EXP 17
14680: PPUSH
14681: CALL_OW 3
14685: ST_TO_ADDR
// Patrol ( tmp , mobile_points [ mobile_patrol + 1 ] , [ ] ) ;
14686: LD_VAR 0 2
14690: PPUSH
14691: LD_EXP 18
14695: PUSH
14696: LD_EXP 17
14700: PUSH
14701: LD_INT 1
14703: PLUS
14704: ARRAY
14705: PPUSH
14706: EMPTY
14707: PPUSH
14708: CALL 6751 0 3
// end ; end ;
14712: PPOPN 2
14714: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
14715: LD_VAR 0 1
14719: PPUSH
14720: CALL 30884 0 1
// if un = JMM then
14724: LD_VAR 0 1
14728: PUSH
14729: LD_EXP 14
14733: EQUAL
14734: IFFALSE 14743
// YouLost ( JMM ) ;
14736: LD_STRING JMM
14738: PPUSH
14739: CALL_OW 104
// if GetSide ( un ) = 7 and GetWeapon ( un ) = us_cargo_bay then
14743: LD_VAR 0 1
14747: PPUSH
14748: CALL_OW 255
14752: PUSH
14753: LD_INT 7
14755: EQUAL
14756: PUSH
14757: LD_VAR 0 1
14761: PPUSH
14762: CALL_OW 264
14766: PUSH
14767: LD_INT 12
14769: EQUAL
14770: AND
14771: IFFALSE 14780
// YouLost ( Artifact ) ;
14773: LD_STRING Artifact
14775: PPUSH
14776: CALL_OW 104
// if ( GetSide ( un ) = 7 and GetType ( un ) = unit_human ) or un = Roth then
14780: LD_VAR 0 1
14784: PPUSH
14785: CALL_OW 255
14789: PUSH
14790: LD_INT 7
14792: EQUAL
14793: PUSH
14794: LD_VAR 0 1
14798: PPUSH
14799: CALL_OW 247
14803: PUSH
14804: LD_INT 1
14806: EQUAL
14807: AND
14808: PUSH
14809: LD_VAR 0 1
14813: PUSH
14814: LD_EXP 15
14818: EQUAL
14819: OR
14820: IFFALSE 14836
// team_kill_counter := team_kill_counter + 1 ;
14822: LD_ADDR_EXP 9
14826: PUSH
14827: LD_EXP 9
14831: PUSH
14832: LD_INT 1
14834: PLUS
14835: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetType ( un ) = unit_human then
14836: LD_VAR 0 1
14840: PPUSH
14841: CALL_OW 255
14845: PUSH
14846: LD_INT 1
14848: EQUAL
14849: PUSH
14850: LD_VAR 0 1
14854: PPUSH
14855: CALL_OW 247
14859: PUSH
14860: LD_INT 1
14862: EQUAL
14863: AND
14864: IFFALSE 14880
// friends_kill_counter := friends_kill_counter + 1 ;
14866: LD_ADDR_EXP 8
14870: PUSH
14871: LD_EXP 8
14875: PUSH
14876: LD_INT 1
14878: PLUS
14879: ST_TO_ADDR
// if GetSide ( un ) <> 1 then
14880: LD_VAR 0 1
14884: PPUSH
14885: CALL_OW 255
14889: PUSH
14890: LD_INT 1
14892: NONEQUAL
14893: IFFALSE 14897
// exit ;
14895: GO 14974
// if GetControl ( un ) = control_remote then
14897: LD_VAR 0 1
14901: PPUSH
14902: CALL_OW 263
14906: PUSH
14907: LD_INT 2
14909: EQUAL
14910: IFFALSE 14928
// defenders := defenders diff un ;
14912: LD_ADDR_EXP 20
14916: PUSH
14917: LD_EXP 20
14921: PUSH
14922: LD_VAR 0 1
14926: DIFF
14927: ST_TO_ADDR
// if not un in defenders then
14928: LD_VAR 0 1
14932: PUSH
14933: LD_EXP 20
14937: IN
14938: NOT
14939: IFFALSE 14974
// begin defcon := [ GetX ( un ) , GetY ( un ) ] ;
14941: LD_ADDR_EXP 21
14945: PUSH
14946: LD_VAR 0 1
14950: PPUSH
14951: CALL_OW 250
14955: PUSH
14956: LD_VAR 0 1
14960: PPUSH
14961: CALL_OW 251
14965: PUSH
14966: EMPTY
14967: LIST
14968: LIST
14969: ST_TO_ADDR
// Defend ;
14970: CALL 2791 0 0
// end ; end ;
14974: PPOPN 1
14976: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
14977: LD_VAR 0 1
14981: PPUSH
14982: LD_VAR 0 2
14986: PPUSH
14987: CALL 31004 0 2
// if GetSide ( veh ) <> 1 then
14991: LD_VAR 0 1
14995: PPUSH
14996: CALL_OW 255
15000: PUSH
15001: LD_INT 1
15003: NONEQUAL
15004: IFFALSE 15008
// exit ;
15006: GO 15032
// if GetControl ( veh ) = control_remote then
15008: LD_VAR 0 1
15012: PPUSH
15013: CALL_OW 263
15017: PUSH
15018: LD_INT 2
15020: EQUAL
15021: IFFALSE 15032
// Connect ( veh ) ;
15023: LD_VAR 0 1
15027: PPUSH
15028: CALL 43279 0 1
// end ;
15032: PPOPN 2
15034: END
// on UnitGoesToRed ( un ) do var i , veh ;
15035: LD_INT 0
15037: PPUSH
15038: PPUSH
// begin if GetSide ( un ) = 1 and GetControl ( un ) = control_remote then
15039: LD_VAR 0 1
15043: PPUSH
15044: CALL_OW 255
15048: PUSH
15049: LD_INT 1
15051: EQUAL
15052: PUSH
15053: LD_VAR 0 1
15057: PPUSH
15058: CALL_OW 263
15062: PUSH
15063: LD_INT 2
15065: EQUAL
15066: AND
15067: IFFALSE 15078
// ComUnlink ( un ) ;
15069: LD_VAR 0 1
15073: PPUSH
15074: CALL_OW 136
// if un = ambar0 then
15078: LD_VAR 0 1
15082: PUSH
15083: LD_INT 18
15085: EQUAL
15086: IFFALSE 15196
// begin uc_side := 1 ;
15088: LD_ADDR_OWVAR 20
15092: PUSH
15093: LD_INT 1
15095: ST_TO_ADDR
// uc_nation := 1 ;
15096: LD_ADDR_OWVAR 21
15100: PUSH
15101: LD_INT 1
15103: ST_TO_ADDR
// for i = 1 to 6 do
15104: LD_ADDR_VAR 0 2
15108: PUSH
15109: DOUBLE
15110: LD_INT 1
15112: DEC
15113: ST_TO_ADDR
15114: LD_INT 6
15116: PUSH
15117: FOR_TO
15118: IFFALSE 15194
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
15120: LD_INT 3
15122: PPUSH
15123: LD_INT 1
15125: PPUSH
15126: LD_INT 3
15128: PPUSH
15129: LD_INT 4
15131: PPUSH
15132: LD_INT 100
15134: PPUSH
15135: CALL 40188 0 5
// veh := CreateVehicle ;
15139: LD_ADDR_VAR 0 3
15143: PUSH
15144: CALL_OW 45
15148: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
15149: LD_VAR 0 3
15153: PPUSH
15154: LD_INT 1
15156: PPUSH
15157: CALL_OW 233
// PlaceUnitArea ( veh , west_spawn , false ) ;
15161: LD_VAR 0 3
15165: PPUSH
15166: LD_INT 25
15168: PPUSH
15169: LD_INT 0
15171: PPUSH
15172: CALL_OW 49
// defenders := defenders ^ veh ;
15176: LD_ADDR_EXP 20
15180: PUSH
15181: LD_EXP 20
15185: PUSH
15186: LD_VAR 0 3
15190: ADD
15191: ST_TO_ADDR
// end ;
15192: GO 15117
15194: POP
15195: POP
// end ; end ;
15196: PPOPN 3
15198: END
// on EnterBuilding ( building , unit ) do begin if unit = Powell then
15199: LD_VAR 0 2
15203: PUSH
15204: LD_EXP 16
15208: EQUAL
15209: IFFALSE 15220
// RemoveUnit ( Powell ) ;
15211: LD_EXP 16
15215: PPUSH
15216: CALL_OW 64
// end ;
15220: PPOPN 2
15222: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
15223: LD_VAR 0 1
15227: PPUSH
15228: CALL 30988 0 1
// end ; end_of_file end_of_file
15232: PPOPN 1
15234: END
// every 0 0$1 do
15235: GO 15237
15237: DISABLE
// begin enable ;
15238: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
15239: LD_STRING updateTimer(
15241: PUSH
15242: LD_OWVAR 1
15246: STR
15247: PUSH
15248: LD_STRING );
15250: STR
15251: PPUSH
15252: CALL_OW 559
// end ;
15256: END
// export function SOS_MapStart ( ) ; begin
15257: LD_INT 0
15259: PPUSH
// if streamModeActive then
15260: LD_EXP 39
15264: IFFALSE 15273
// DefineStreamItems ( true ) ;
15266: LD_INT 1
15268: PPUSH
15269: CALL 16927 0 1
// UpdateFactoryWaypoints ( ) ;
15273: CALL 29788 0 0
// UpdateWarehouseGatheringPoints ( ) ;
15277: CALL 30045 0 0
// end ;
15281: LD_VAR 0 1
15285: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15286: LD_INT 0
15288: PPUSH
// if p2 = hack_mode then
15289: LD_VAR 0 2
15293: PUSH
15294: LD_INT 100
15296: EQUAL
15297: IFFALSE 16300
// begin if not StreamModeActive then
15299: LD_EXP 39
15303: NOT
15304: IFFALSE 15314
// StreamModeActive := true ;
15306: LD_ADDR_EXP 39
15310: PUSH
15311: LD_INT 1
15313: ST_TO_ADDR
// if p3 = 0 then
15314: LD_VAR 0 3
15318: PUSH
15319: LD_INT 0
15321: EQUAL
15322: IFFALSE 15328
// InitStreamMode ;
15324: CALL 16463 0 0
// if p3 = 1 then
15328: LD_VAR 0 3
15332: PUSH
15333: LD_INT 1
15335: EQUAL
15336: IFFALSE 15346
// sRocket := true ;
15338: LD_ADDR_EXP 44
15342: PUSH
15343: LD_INT 1
15345: ST_TO_ADDR
// if p3 = 2 then
15346: LD_VAR 0 3
15350: PUSH
15351: LD_INT 2
15353: EQUAL
15354: IFFALSE 15364
// sSpeed := true ;
15356: LD_ADDR_EXP 43
15360: PUSH
15361: LD_INT 1
15363: ST_TO_ADDR
// if p3 = 3 then
15364: LD_VAR 0 3
15368: PUSH
15369: LD_INT 3
15371: EQUAL
15372: IFFALSE 15382
// sEngine := true ;
15374: LD_ADDR_EXP 45
15378: PUSH
15379: LD_INT 1
15381: ST_TO_ADDR
// if p3 = 4 then
15382: LD_VAR 0 3
15386: PUSH
15387: LD_INT 4
15389: EQUAL
15390: IFFALSE 15400
// sSpec := true ;
15392: LD_ADDR_EXP 42
15396: PUSH
15397: LD_INT 1
15399: ST_TO_ADDR
// if p3 = 5 then
15400: LD_VAR 0 3
15404: PUSH
15405: LD_INT 5
15407: EQUAL
15408: IFFALSE 15418
// sLevel := true ;
15410: LD_ADDR_EXP 46
15414: PUSH
15415: LD_INT 1
15417: ST_TO_ADDR
// if p3 = 6 then
15418: LD_VAR 0 3
15422: PUSH
15423: LD_INT 6
15425: EQUAL
15426: IFFALSE 15436
// sArmoury := true ;
15428: LD_ADDR_EXP 47
15432: PUSH
15433: LD_INT 1
15435: ST_TO_ADDR
// if p3 = 7 then
15436: LD_VAR 0 3
15440: PUSH
15441: LD_INT 7
15443: EQUAL
15444: IFFALSE 15454
// sRadar := true ;
15446: LD_ADDR_EXP 48
15450: PUSH
15451: LD_INT 1
15453: ST_TO_ADDR
// if p3 = 8 then
15454: LD_VAR 0 3
15458: PUSH
15459: LD_INT 8
15461: EQUAL
15462: IFFALSE 15472
// sBunker := true ;
15464: LD_ADDR_EXP 49
15468: PUSH
15469: LD_INT 1
15471: ST_TO_ADDR
// if p3 = 9 then
15472: LD_VAR 0 3
15476: PUSH
15477: LD_INT 9
15479: EQUAL
15480: IFFALSE 15490
// sHack := true ;
15482: LD_ADDR_EXP 50
15486: PUSH
15487: LD_INT 1
15489: ST_TO_ADDR
// if p3 = 10 then
15490: LD_VAR 0 3
15494: PUSH
15495: LD_INT 10
15497: EQUAL
15498: IFFALSE 15508
// sFire := true ;
15500: LD_ADDR_EXP 51
15504: PUSH
15505: LD_INT 1
15507: ST_TO_ADDR
// if p3 = 11 then
15508: LD_VAR 0 3
15512: PUSH
15513: LD_INT 11
15515: EQUAL
15516: IFFALSE 15526
// sRefresh := true ;
15518: LD_ADDR_EXP 52
15522: PUSH
15523: LD_INT 1
15525: ST_TO_ADDR
// if p3 = 12 then
15526: LD_VAR 0 3
15530: PUSH
15531: LD_INT 12
15533: EQUAL
15534: IFFALSE 15544
// sExp := true ;
15536: LD_ADDR_EXP 53
15540: PUSH
15541: LD_INT 1
15543: ST_TO_ADDR
// if p3 = 13 then
15544: LD_VAR 0 3
15548: PUSH
15549: LD_INT 13
15551: EQUAL
15552: IFFALSE 15562
// sDepot := true ;
15554: LD_ADDR_EXP 54
15558: PUSH
15559: LD_INT 1
15561: ST_TO_ADDR
// if p3 = 14 then
15562: LD_VAR 0 3
15566: PUSH
15567: LD_INT 14
15569: EQUAL
15570: IFFALSE 15580
// sFlag := true ;
15572: LD_ADDR_EXP 55
15576: PUSH
15577: LD_INT 1
15579: ST_TO_ADDR
// if p3 = 15 then
15580: LD_VAR 0 3
15584: PUSH
15585: LD_INT 15
15587: EQUAL
15588: IFFALSE 15598
// sKamikadze := true ;
15590: LD_ADDR_EXP 63
15594: PUSH
15595: LD_INT 1
15597: ST_TO_ADDR
// if p3 = 16 then
15598: LD_VAR 0 3
15602: PUSH
15603: LD_INT 16
15605: EQUAL
15606: IFFALSE 15616
// sTroll := true ;
15608: LD_ADDR_EXP 64
15612: PUSH
15613: LD_INT 1
15615: ST_TO_ADDR
// if p3 = 17 then
15616: LD_VAR 0 3
15620: PUSH
15621: LD_INT 17
15623: EQUAL
15624: IFFALSE 15634
// sSlow := true ;
15626: LD_ADDR_EXP 65
15630: PUSH
15631: LD_INT 1
15633: ST_TO_ADDR
// if p3 = 18 then
15634: LD_VAR 0 3
15638: PUSH
15639: LD_INT 18
15641: EQUAL
15642: IFFALSE 15652
// sLack := true ;
15644: LD_ADDR_EXP 66
15648: PUSH
15649: LD_INT 1
15651: ST_TO_ADDR
// if p3 = 19 then
15652: LD_VAR 0 3
15656: PUSH
15657: LD_INT 19
15659: EQUAL
15660: IFFALSE 15670
// sTank := true ;
15662: LD_ADDR_EXP 68
15666: PUSH
15667: LD_INT 1
15669: ST_TO_ADDR
// if p3 = 20 then
15670: LD_VAR 0 3
15674: PUSH
15675: LD_INT 20
15677: EQUAL
15678: IFFALSE 15688
// sRemote := true ;
15680: LD_ADDR_EXP 69
15684: PUSH
15685: LD_INT 1
15687: ST_TO_ADDR
// if p3 = 21 then
15688: LD_VAR 0 3
15692: PUSH
15693: LD_INT 21
15695: EQUAL
15696: IFFALSE 15706
// sPowell := true ;
15698: LD_ADDR_EXP 70
15702: PUSH
15703: LD_INT 1
15705: ST_TO_ADDR
// if p3 = 22 then
15706: LD_VAR 0 3
15710: PUSH
15711: LD_INT 22
15713: EQUAL
15714: IFFALSE 15724
// sTeleport := true ;
15716: LD_ADDR_EXP 73
15720: PUSH
15721: LD_INT 1
15723: ST_TO_ADDR
// if p3 = 23 then
15724: LD_VAR 0 3
15728: PUSH
15729: LD_INT 23
15731: EQUAL
15732: IFFALSE 15742
// sOilTower := true ;
15734: LD_ADDR_EXP 75
15738: PUSH
15739: LD_INT 1
15741: ST_TO_ADDR
// if p3 = 24 then
15742: LD_VAR 0 3
15746: PUSH
15747: LD_INT 24
15749: EQUAL
15750: IFFALSE 15760
// sShovel := true ;
15752: LD_ADDR_EXP 76
15756: PUSH
15757: LD_INT 1
15759: ST_TO_ADDR
// if p3 = 25 then
15760: LD_VAR 0 3
15764: PUSH
15765: LD_INT 25
15767: EQUAL
15768: IFFALSE 15778
// sSheik := true ;
15770: LD_ADDR_EXP 77
15774: PUSH
15775: LD_INT 1
15777: ST_TO_ADDR
// if p3 = 26 then
15778: LD_VAR 0 3
15782: PUSH
15783: LD_INT 26
15785: EQUAL
15786: IFFALSE 15796
// sEarthquake := true ;
15788: LD_ADDR_EXP 79
15792: PUSH
15793: LD_INT 1
15795: ST_TO_ADDR
// if p3 = 27 then
15796: LD_VAR 0 3
15800: PUSH
15801: LD_INT 27
15803: EQUAL
15804: IFFALSE 15814
// sAI := true ;
15806: LD_ADDR_EXP 80
15810: PUSH
15811: LD_INT 1
15813: ST_TO_ADDR
// if p3 = 28 then
15814: LD_VAR 0 3
15818: PUSH
15819: LD_INT 28
15821: EQUAL
15822: IFFALSE 15832
// sCargo := true ;
15824: LD_ADDR_EXP 83
15828: PUSH
15829: LD_INT 1
15831: ST_TO_ADDR
// if p3 = 29 then
15832: LD_VAR 0 3
15836: PUSH
15837: LD_INT 29
15839: EQUAL
15840: IFFALSE 15850
// sDLaser := true ;
15842: LD_ADDR_EXP 84
15846: PUSH
15847: LD_INT 1
15849: ST_TO_ADDR
// if p3 = 30 then
15850: LD_VAR 0 3
15854: PUSH
15855: LD_INT 30
15857: EQUAL
15858: IFFALSE 15868
// sExchange := true ;
15860: LD_ADDR_EXP 85
15864: PUSH
15865: LD_INT 1
15867: ST_TO_ADDR
// if p3 = 31 then
15868: LD_VAR 0 3
15872: PUSH
15873: LD_INT 31
15875: EQUAL
15876: IFFALSE 15886
// sFac := true ;
15878: LD_ADDR_EXP 86
15882: PUSH
15883: LD_INT 1
15885: ST_TO_ADDR
// if p3 = 32 then
15886: LD_VAR 0 3
15890: PUSH
15891: LD_INT 32
15893: EQUAL
15894: IFFALSE 15904
// sPower := true ;
15896: LD_ADDR_EXP 87
15900: PUSH
15901: LD_INT 1
15903: ST_TO_ADDR
// if p3 = 33 then
15904: LD_VAR 0 3
15908: PUSH
15909: LD_INT 33
15911: EQUAL
15912: IFFALSE 15922
// sRandom := true ;
15914: LD_ADDR_EXP 88
15918: PUSH
15919: LD_INT 1
15921: ST_TO_ADDR
// if p3 = 34 then
15922: LD_VAR 0 3
15926: PUSH
15927: LD_INT 34
15929: EQUAL
15930: IFFALSE 15940
// sShield := true ;
15932: LD_ADDR_EXP 89
15936: PUSH
15937: LD_INT 1
15939: ST_TO_ADDR
// if p3 = 35 then
15940: LD_VAR 0 3
15944: PUSH
15945: LD_INT 35
15947: EQUAL
15948: IFFALSE 15958
// sTime := true ;
15950: LD_ADDR_EXP 90
15954: PUSH
15955: LD_INT 1
15957: ST_TO_ADDR
// if p3 = 36 then
15958: LD_VAR 0 3
15962: PUSH
15963: LD_INT 36
15965: EQUAL
15966: IFFALSE 15976
// sTools := true ;
15968: LD_ADDR_EXP 91
15972: PUSH
15973: LD_INT 1
15975: ST_TO_ADDR
// if p3 = 101 then
15976: LD_VAR 0 3
15980: PUSH
15981: LD_INT 101
15983: EQUAL
15984: IFFALSE 15994
// sSold := true ;
15986: LD_ADDR_EXP 56
15990: PUSH
15991: LD_INT 1
15993: ST_TO_ADDR
// if p3 = 102 then
15994: LD_VAR 0 3
15998: PUSH
15999: LD_INT 102
16001: EQUAL
16002: IFFALSE 16012
// sDiff := true ;
16004: LD_ADDR_EXP 57
16008: PUSH
16009: LD_INT 1
16011: ST_TO_ADDR
// if p3 = 103 then
16012: LD_VAR 0 3
16016: PUSH
16017: LD_INT 103
16019: EQUAL
16020: IFFALSE 16030
// sFog := true ;
16022: LD_ADDR_EXP 60
16026: PUSH
16027: LD_INT 1
16029: ST_TO_ADDR
// if p3 = 104 then
16030: LD_VAR 0 3
16034: PUSH
16035: LD_INT 104
16037: EQUAL
16038: IFFALSE 16048
// sReset := true ;
16040: LD_ADDR_EXP 61
16044: PUSH
16045: LD_INT 1
16047: ST_TO_ADDR
// if p3 = 105 then
16048: LD_VAR 0 3
16052: PUSH
16053: LD_INT 105
16055: EQUAL
16056: IFFALSE 16066
// sSun := true ;
16058: LD_ADDR_EXP 62
16062: PUSH
16063: LD_INT 1
16065: ST_TO_ADDR
// if p3 = 106 then
16066: LD_VAR 0 3
16070: PUSH
16071: LD_INT 106
16073: EQUAL
16074: IFFALSE 16084
// sTiger := true ;
16076: LD_ADDR_EXP 58
16080: PUSH
16081: LD_INT 1
16083: ST_TO_ADDR
// if p3 = 107 then
16084: LD_VAR 0 3
16088: PUSH
16089: LD_INT 107
16091: EQUAL
16092: IFFALSE 16102
// sBomb := true ;
16094: LD_ADDR_EXP 59
16098: PUSH
16099: LD_INT 1
16101: ST_TO_ADDR
// if p3 = 108 then
16102: LD_VAR 0 3
16106: PUSH
16107: LD_INT 108
16109: EQUAL
16110: IFFALSE 16120
// sWound := true ;
16112: LD_ADDR_EXP 67
16116: PUSH
16117: LD_INT 1
16119: ST_TO_ADDR
// if p3 = 109 then
16120: LD_VAR 0 3
16124: PUSH
16125: LD_INT 109
16127: EQUAL
16128: IFFALSE 16138
// sBetray := true ;
16130: LD_ADDR_EXP 71
16134: PUSH
16135: LD_INT 1
16137: ST_TO_ADDR
// if p3 = 110 then
16138: LD_VAR 0 3
16142: PUSH
16143: LD_INT 110
16145: EQUAL
16146: IFFALSE 16156
// sContamin := true ;
16148: LD_ADDR_EXP 72
16152: PUSH
16153: LD_INT 1
16155: ST_TO_ADDR
// if p3 = 111 then
16156: LD_VAR 0 3
16160: PUSH
16161: LD_INT 111
16163: EQUAL
16164: IFFALSE 16174
// sOil := true ;
16166: LD_ADDR_EXP 74
16170: PUSH
16171: LD_INT 1
16173: ST_TO_ADDR
// if p3 = 112 then
16174: LD_VAR 0 3
16178: PUSH
16179: LD_INT 112
16181: EQUAL
16182: IFFALSE 16192
// sStu := true ;
16184: LD_ADDR_EXP 78
16188: PUSH
16189: LD_INT 1
16191: ST_TO_ADDR
// if p3 = 113 then
16192: LD_VAR 0 3
16196: PUSH
16197: LD_INT 113
16199: EQUAL
16200: IFFALSE 16210
// sBazooka := true ;
16202: LD_ADDR_EXP 81
16206: PUSH
16207: LD_INT 1
16209: ST_TO_ADDR
// if p3 = 114 then
16210: LD_VAR 0 3
16214: PUSH
16215: LD_INT 114
16217: EQUAL
16218: IFFALSE 16228
// sMortar := true ;
16220: LD_ADDR_EXP 82
16224: PUSH
16225: LD_INT 1
16227: ST_TO_ADDR
// if p3 = 115 then
16228: LD_VAR 0 3
16232: PUSH
16233: LD_INT 115
16235: EQUAL
16236: IFFALSE 16246
// sRanger := true ;
16238: LD_ADDR_EXP 92
16242: PUSH
16243: LD_INT 1
16245: ST_TO_ADDR
// if p3 = 116 then
16246: LD_VAR 0 3
16250: PUSH
16251: LD_INT 116
16253: EQUAL
16254: IFFALSE 16264
// sComputer := true ;
16256: LD_ADDR_EXP 93
16260: PUSH
16261: LD_INT 1
16263: ST_TO_ADDR
// if p3 = 117 then
16264: LD_VAR 0 3
16268: PUSH
16269: LD_INT 117
16271: EQUAL
16272: IFFALSE 16282
// s30 := true ;
16274: LD_ADDR_EXP 94
16278: PUSH
16279: LD_INT 1
16281: ST_TO_ADDR
// if p3 = 118 then
16282: LD_VAR 0 3
16286: PUSH
16287: LD_INT 118
16289: EQUAL
16290: IFFALSE 16300
// s60 := true ;
16292: LD_ADDR_EXP 95
16296: PUSH
16297: LD_INT 1
16299: ST_TO_ADDR
// end ; if p2 = stream_mode then
16300: LD_VAR 0 2
16304: PUSH
16305: LD_INT 101
16307: EQUAL
16308: IFFALSE 16436
// begin case p3 of 1 :
16310: LD_VAR 0 3
16314: PUSH
16315: LD_INT 1
16317: DOUBLE
16318: EQUAL
16319: IFTRUE 16323
16321: GO 16330
16323: POP
// hHackUnlimitedResources ; 2 :
16324: CALL 28534 0 0
16328: GO 16436
16330: LD_INT 2
16332: DOUBLE
16333: EQUAL
16334: IFTRUE 16338
16336: GO 16345
16338: POP
// hHackSetLevel10 ; 3 :
16339: CALL 28667 0 0
16343: GO 16436
16345: LD_INT 3
16347: DOUBLE
16348: EQUAL
16349: IFTRUE 16353
16351: GO 16360
16353: POP
// hHackSetLevel10YourUnits ; 4 :
16354: CALL 28752 0 0
16358: GO 16436
16360: LD_INT 4
16362: DOUBLE
16363: EQUAL
16364: IFTRUE 16368
16366: GO 16375
16368: POP
// hHackInvincible ; 5 :
16369: CALL 29200 0 0
16373: GO 16436
16375: LD_INT 5
16377: DOUBLE
16378: EQUAL
16379: IFTRUE 16383
16381: GO 16390
16383: POP
// hHackInvisible ; 6 :
16384: CALL 29311 0 0
16388: GO 16436
16390: LD_INT 6
16392: DOUBLE
16393: EQUAL
16394: IFTRUE 16398
16396: GO 16405
16398: POP
// hHackChangeYourSide ; 7 :
16399: CALL 29368 0 0
16403: GO 16436
16405: LD_INT 7
16407: DOUBLE
16408: EQUAL
16409: IFTRUE 16413
16411: GO 16420
16413: POP
// hHackChangeUnitSide ; 8 :
16414: CALL 29410 0 0
16418: GO 16436
16420: LD_INT 8
16422: DOUBLE
16423: EQUAL
16424: IFTRUE 16428
16426: GO 16435
16428: POP
// hHackFog ; end ;
16429: CALL 29511 0 0
16433: GO 16436
16435: POP
// end ; end ;
16436: LD_VAR 0 7
16440: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
16441: GO 16443
16443: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
16444: LD_STRING initStreamRollete();
16446: PPUSH
16447: CALL_OW 559
// InitStreamMode ;
16451: CALL 16463 0 0
// DefineStreamItems ( false ) ;
16455: LD_INT 0
16457: PPUSH
16458: CALL 16927 0 1
// end ;
16462: END
// function InitStreamMode ; begin
16463: LD_INT 0
16465: PPUSH
// streamModeActive := false ;
16466: LD_ADDR_EXP 39
16470: PUSH
16471: LD_INT 0
16473: ST_TO_ADDR
// normalCounter := 36 ;
16474: LD_ADDR_EXP 40
16478: PUSH
16479: LD_INT 36
16481: ST_TO_ADDR
// hardcoreCounter := 18 ;
16482: LD_ADDR_EXP 41
16486: PUSH
16487: LD_INT 18
16489: ST_TO_ADDR
// sRocket := false ;
16490: LD_ADDR_EXP 44
16494: PUSH
16495: LD_INT 0
16497: ST_TO_ADDR
// sSpeed := false ;
16498: LD_ADDR_EXP 43
16502: PUSH
16503: LD_INT 0
16505: ST_TO_ADDR
// sEngine := false ;
16506: LD_ADDR_EXP 45
16510: PUSH
16511: LD_INT 0
16513: ST_TO_ADDR
// sSpec := false ;
16514: LD_ADDR_EXP 42
16518: PUSH
16519: LD_INT 0
16521: ST_TO_ADDR
// sLevel := false ;
16522: LD_ADDR_EXP 46
16526: PUSH
16527: LD_INT 0
16529: ST_TO_ADDR
// sArmoury := false ;
16530: LD_ADDR_EXP 47
16534: PUSH
16535: LD_INT 0
16537: ST_TO_ADDR
// sRadar := false ;
16538: LD_ADDR_EXP 48
16542: PUSH
16543: LD_INT 0
16545: ST_TO_ADDR
// sBunker := false ;
16546: LD_ADDR_EXP 49
16550: PUSH
16551: LD_INT 0
16553: ST_TO_ADDR
// sHack := false ;
16554: LD_ADDR_EXP 50
16558: PUSH
16559: LD_INT 0
16561: ST_TO_ADDR
// sFire := false ;
16562: LD_ADDR_EXP 51
16566: PUSH
16567: LD_INT 0
16569: ST_TO_ADDR
// sRefresh := false ;
16570: LD_ADDR_EXP 52
16574: PUSH
16575: LD_INT 0
16577: ST_TO_ADDR
// sExp := false ;
16578: LD_ADDR_EXP 53
16582: PUSH
16583: LD_INT 0
16585: ST_TO_ADDR
// sDepot := false ;
16586: LD_ADDR_EXP 54
16590: PUSH
16591: LD_INT 0
16593: ST_TO_ADDR
// sFlag := false ;
16594: LD_ADDR_EXP 55
16598: PUSH
16599: LD_INT 0
16601: ST_TO_ADDR
// sKamikadze := false ;
16602: LD_ADDR_EXP 63
16606: PUSH
16607: LD_INT 0
16609: ST_TO_ADDR
// sTroll := false ;
16610: LD_ADDR_EXP 64
16614: PUSH
16615: LD_INT 0
16617: ST_TO_ADDR
// sSlow := false ;
16618: LD_ADDR_EXP 65
16622: PUSH
16623: LD_INT 0
16625: ST_TO_ADDR
// sLack := false ;
16626: LD_ADDR_EXP 66
16630: PUSH
16631: LD_INT 0
16633: ST_TO_ADDR
// sTank := false ;
16634: LD_ADDR_EXP 68
16638: PUSH
16639: LD_INT 0
16641: ST_TO_ADDR
// sRemote := false ;
16642: LD_ADDR_EXP 69
16646: PUSH
16647: LD_INT 0
16649: ST_TO_ADDR
// sPowell := false ;
16650: LD_ADDR_EXP 70
16654: PUSH
16655: LD_INT 0
16657: ST_TO_ADDR
// sTeleport := false ;
16658: LD_ADDR_EXP 73
16662: PUSH
16663: LD_INT 0
16665: ST_TO_ADDR
// sOilTower := false ;
16666: LD_ADDR_EXP 75
16670: PUSH
16671: LD_INT 0
16673: ST_TO_ADDR
// sShovel := false ;
16674: LD_ADDR_EXP 76
16678: PUSH
16679: LD_INT 0
16681: ST_TO_ADDR
// sSheik := false ;
16682: LD_ADDR_EXP 77
16686: PUSH
16687: LD_INT 0
16689: ST_TO_ADDR
// sEarthquake := false ;
16690: LD_ADDR_EXP 79
16694: PUSH
16695: LD_INT 0
16697: ST_TO_ADDR
// sAI := false ;
16698: LD_ADDR_EXP 80
16702: PUSH
16703: LD_INT 0
16705: ST_TO_ADDR
// sCargo := false ;
16706: LD_ADDR_EXP 83
16710: PUSH
16711: LD_INT 0
16713: ST_TO_ADDR
// sDLaser := false ;
16714: LD_ADDR_EXP 84
16718: PUSH
16719: LD_INT 0
16721: ST_TO_ADDR
// sExchange := false ;
16722: LD_ADDR_EXP 85
16726: PUSH
16727: LD_INT 0
16729: ST_TO_ADDR
// sFac := false ;
16730: LD_ADDR_EXP 86
16734: PUSH
16735: LD_INT 0
16737: ST_TO_ADDR
// sPower := false ;
16738: LD_ADDR_EXP 87
16742: PUSH
16743: LD_INT 0
16745: ST_TO_ADDR
// sRandom := false ;
16746: LD_ADDR_EXP 88
16750: PUSH
16751: LD_INT 0
16753: ST_TO_ADDR
// sShield := false ;
16754: LD_ADDR_EXP 89
16758: PUSH
16759: LD_INT 0
16761: ST_TO_ADDR
// sTime := false ;
16762: LD_ADDR_EXP 90
16766: PUSH
16767: LD_INT 0
16769: ST_TO_ADDR
// sTools := false ;
16770: LD_ADDR_EXP 91
16774: PUSH
16775: LD_INT 0
16777: ST_TO_ADDR
// sSold := false ;
16778: LD_ADDR_EXP 56
16782: PUSH
16783: LD_INT 0
16785: ST_TO_ADDR
// sDiff := false ;
16786: LD_ADDR_EXP 57
16790: PUSH
16791: LD_INT 0
16793: ST_TO_ADDR
// sFog := false ;
16794: LD_ADDR_EXP 60
16798: PUSH
16799: LD_INT 0
16801: ST_TO_ADDR
// sReset := false ;
16802: LD_ADDR_EXP 61
16806: PUSH
16807: LD_INT 0
16809: ST_TO_ADDR
// sSun := false ;
16810: LD_ADDR_EXP 62
16814: PUSH
16815: LD_INT 0
16817: ST_TO_ADDR
// sTiger := false ;
16818: LD_ADDR_EXP 58
16822: PUSH
16823: LD_INT 0
16825: ST_TO_ADDR
// sBomb := false ;
16826: LD_ADDR_EXP 59
16830: PUSH
16831: LD_INT 0
16833: ST_TO_ADDR
// sWound := false ;
16834: LD_ADDR_EXP 67
16838: PUSH
16839: LD_INT 0
16841: ST_TO_ADDR
// sBetray := false ;
16842: LD_ADDR_EXP 71
16846: PUSH
16847: LD_INT 0
16849: ST_TO_ADDR
// sContamin := false ;
16850: LD_ADDR_EXP 72
16854: PUSH
16855: LD_INT 0
16857: ST_TO_ADDR
// sOil := false ;
16858: LD_ADDR_EXP 74
16862: PUSH
16863: LD_INT 0
16865: ST_TO_ADDR
// sStu := false ;
16866: LD_ADDR_EXP 78
16870: PUSH
16871: LD_INT 0
16873: ST_TO_ADDR
// sBazooka := false ;
16874: LD_ADDR_EXP 81
16878: PUSH
16879: LD_INT 0
16881: ST_TO_ADDR
// sMortar := false ;
16882: LD_ADDR_EXP 82
16886: PUSH
16887: LD_INT 0
16889: ST_TO_ADDR
// sRanger := false ;
16890: LD_ADDR_EXP 92
16894: PUSH
16895: LD_INT 0
16897: ST_TO_ADDR
// sComputer := false ;
16898: LD_ADDR_EXP 93
16902: PUSH
16903: LD_INT 0
16905: ST_TO_ADDR
// s30 := false ;
16906: LD_ADDR_EXP 94
16910: PUSH
16911: LD_INT 0
16913: ST_TO_ADDR
// s60 := false ;
16914: LD_ADDR_EXP 95
16918: PUSH
16919: LD_INT 0
16921: ST_TO_ADDR
// end ;
16922: LD_VAR 0 1
16926: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
16927: LD_INT 0
16929: PPUSH
16930: PPUSH
16931: PPUSH
16932: PPUSH
16933: PPUSH
16934: PPUSH
16935: PPUSH
// result := [ ] ;
16936: LD_ADDR_VAR 0 2
16940: PUSH
16941: EMPTY
16942: ST_TO_ADDR
// if campaign_id = 1 then
16943: LD_OWVAR 69
16947: PUSH
16948: LD_INT 1
16950: EQUAL
16951: IFFALSE 20117
// begin case mission_number of 1 :
16953: LD_OWVAR 70
16957: PUSH
16958: LD_INT 1
16960: DOUBLE
16961: EQUAL
16962: IFTRUE 16966
16964: GO 17042
16966: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
16967: LD_ADDR_VAR 0 2
16971: PUSH
16972: LD_INT 2
16974: PUSH
16975: LD_INT 4
16977: PUSH
16978: LD_INT 11
16980: PUSH
16981: LD_INT 12
16983: PUSH
16984: LD_INT 15
16986: PUSH
16987: LD_INT 16
16989: PUSH
16990: LD_INT 22
16992: PUSH
16993: LD_INT 23
16995: PUSH
16996: LD_INT 26
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: LIST
17003: LIST
17004: LIST
17005: LIST
17006: LIST
17007: LIST
17008: LIST
17009: PUSH
17010: LD_INT 101
17012: PUSH
17013: LD_INT 102
17015: PUSH
17016: LD_INT 106
17018: PUSH
17019: LD_INT 116
17021: PUSH
17022: LD_INT 117
17024: PUSH
17025: LD_INT 118
17027: PUSH
17028: EMPTY
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: ST_TO_ADDR
17040: GO 20115
17042: LD_INT 2
17044: DOUBLE
17045: EQUAL
17046: IFTRUE 17050
17048: GO 17134
17050: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
17051: LD_ADDR_VAR 0 2
17055: PUSH
17056: LD_INT 2
17058: PUSH
17059: LD_INT 4
17061: PUSH
17062: LD_INT 11
17064: PUSH
17065: LD_INT 12
17067: PUSH
17068: LD_INT 15
17070: PUSH
17071: LD_INT 16
17073: PUSH
17074: LD_INT 22
17076: PUSH
17077: LD_INT 23
17079: PUSH
17080: LD_INT 26
17082: PUSH
17083: EMPTY
17084: LIST
17085: LIST
17086: LIST
17087: LIST
17088: LIST
17089: LIST
17090: LIST
17091: LIST
17092: LIST
17093: PUSH
17094: LD_INT 101
17096: PUSH
17097: LD_INT 102
17099: PUSH
17100: LD_INT 105
17102: PUSH
17103: LD_INT 106
17105: PUSH
17106: LD_INT 108
17108: PUSH
17109: LD_INT 116
17111: PUSH
17112: LD_INT 117
17114: PUSH
17115: LD_INT 118
17117: PUSH
17118: EMPTY
17119: LIST
17120: LIST
17121: LIST
17122: LIST
17123: LIST
17124: LIST
17125: LIST
17126: LIST
17127: PUSH
17128: EMPTY
17129: LIST
17130: LIST
17131: ST_TO_ADDR
17132: GO 20115
17134: LD_INT 3
17136: DOUBLE
17137: EQUAL
17138: IFTRUE 17142
17140: GO 17230
17142: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
17143: LD_ADDR_VAR 0 2
17147: PUSH
17148: LD_INT 2
17150: PUSH
17151: LD_INT 4
17153: PUSH
17154: LD_INT 5
17156: PUSH
17157: LD_INT 11
17159: PUSH
17160: LD_INT 12
17162: PUSH
17163: LD_INT 15
17165: PUSH
17166: LD_INT 16
17168: PUSH
17169: LD_INT 22
17171: PUSH
17172: LD_INT 26
17174: PUSH
17175: LD_INT 36
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: PUSH
17190: LD_INT 101
17192: PUSH
17193: LD_INT 102
17195: PUSH
17196: LD_INT 105
17198: PUSH
17199: LD_INT 106
17201: PUSH
17202: LD_INT 108
17204: PUSH
17205: LD_INT 116
17207: PUSH
17208: LD_INT 117
17210: PUSH
17211: LD_INT 118
17213: PUSH
17214: EMPTY
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: LIST
17223: PUSH
17224: EMPTY
17225: LIST
17226: LIST
17227: ST_TO_ADDR
17228: GO 20115
17230: LD_INT 4
17232: DOUBLE
17233: EQUAL
17234: IFTRUE 17238
17236: GO 17334
17238: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
17239: LD_ADDR_VAR 0 2
17243: PUSH
17244: LD_INT 2
17246: PUSH
17247: LD_INT 4
17249: PUSH
17250: LD_INT 5
17252: PUSH
17253: LD_INT 8
17255: PUSH
17256: LD_INT 11
17258: PUSH
17259: LD_INT 12
17261: PUSH
17262: LD_INT 15
17264: PUSH
17265: LD_INT 16
17267: PUSH
17268: LD_INT 22
17270: PUSH
17271: LD_INT 23
17273: PUSH
17274: LD_INT 26
17276: PUSH
17277: LD_INT 36
17279: PUSH
17280: EMPTY
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: LIST
17286: LIST
17287: LIST
17288: LIST
17289: LIST
17290: LIST
17291: LIST
17292: LIST
17293: PUSH
17294: LD_INT 101
17296: PUSH
17297: LD_INT 102
17299: PUSH
17300: LD_INT 105
17302: PUSH
17303: LD_INT 106
17305: PUSH
17306: LD_INT 108
17308: PUSH
17309: LD_INT 116
17311: PUSH
17312: LD_INT 117
17314: PUSH
17315: LD_INT 118
17317: PUSH
17318: EMPTY
17319: LIST
17320: LIST
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: LIST
17326: LIST
17327: PUSH
17328: EMPTY
17329: LIST
17330: LIST
17331: ST_TO_ADDR
17332: GO 20115
17334: LD_INT 5
17336: DOUBLE
17337: EQUAL
17338: IFTRUE 17342
17340: GO 17454
17342: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
17343: LD_ADDR_VAR 0 2
17347: PUSH
17348: LD_INT 2
17350: PUSH
17351: LD_INT 4
17353: PUSH
17354: LD_INT 5
17356: PUSH
17357: LD_INT 6
17359: PUSH
17360: LD_INT 8
17362: PUSH
17363: LD_INT 11
17365: PUSH
17366: LD_INT 12
17368: PUSH
17369: LD_INT 15
17371: PUSH
17372: LD_INT 16
17374: PUSH
17375: LD_INT 22
17377: PUSH
17378: LD_INT 23
17380: PUSH
17381: LD_INT 25
17383: PUSH
17384: LD_INT 26
17386: PUSH
17387: LD_INT 36
17389: PUSH
17390: EMPTY
17391: LIST
17392: LIST
17393: LIST
17394: LIST
17395: LIST
17396: LIST
17397: LIST
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: LIST
17403: LIST
17404: LIST
17405: PUSH
17406: LD_INT 101
17408: PUSH
17409: LD_INT 102
17411: PUSH
17412: LD_INT 105
17414: PUSH
17415: LD_INT 106
17417: PUSH
17418: LD_INT 108
17420: PUSH
17421: LD_INT 109
17423: PUSH
17424: LD_INT 112
17426: PUSH
17427: LD_INT 116
17429: PUSH
17430: LD_INT 117
17432: PUSH
17433: LD_INT 118
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: ST_TO_ADDR
17452: GO 20115
17454: LD_INT 6
17456: DOUBLE
17457: EQUAL
17458: IFTRUE 17462
17460: GO 17594
17462: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
17463: LD_ADDR_VAR 0 2
17467: PUSH
17468: LD_INT 2
17470: PUSH
17471: LD_INT 4
17473: PUSH
17474: LD_INT 5
17476: PUSH
17477: LD_INT 6
17479: PUSH
17480: LD_INT 8
17482: PUSH
17483: LD_INT 11
17485: PUSH
17486: LD_INT 12
17488: PUSH
17489: LD_INT 15
17491: PUSH
17492: LD_INT 16
17494: PUSH
17495: LD_INT 20
17497: PUSH
17498: LD_INT 21
17500: PUSH
17501: LD_INT 22
17503: PUSH
17504: LD_INT 23
17506: PUSH
17507: LD_INT 25
17509: PUSH
17510: LD_INT 26
17512: PUSH
17513: LD_INT 30
17515: PUSH
17516: LD_INT 31
17518: PUSH
17519: LD_INT 32
17521: PUSH
17522: LD_INT 36
17524: PUSH
17525: EMPTY
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: LIST
17532: LIST
17533: LIST
17534: LIST
17535: LIST
17536: LIST
17537: LIST
17538: LIST
17539: LIST
17540: LIST
17541: LIST
17542: LIST
17543: LIST
17544: LIST
17545: PUSH
17546: LD_INT 101
17548: PUSH
17549: LD_INT 102
17551: PUSH
17552: LD_INT 105
17554: PUSH
17555: LD_INT 106
17557: PUSH
17558: LD_INT 108
17560: PUSH
17561: LD_INT 109
17563: PUSH
17564: LD_INT 112
17566: PUSH
17567: LD_INT 116
17569: PUSH
17570: LD_INT 117
17572: PUSH
17573: LD_INT 118
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: LIST
17580: LIST
17581: LIST
17582: LIST
17583: LIST
17584: LIST
17585: LIST
17586: LIST
17587: PUSH
17588: EMPTY
17589: LIST
17590: LIST
17591: ST_TO_ADDR
17592: GO 20115
17594: LD_INT 7
17596: DOUBLE
17597: EQUAL
17598: IFTRUE 17602
17600: GO 17714
17602: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
17603: LD_ADDR_VAR 0 2
17607: PUSH
17608: LD_INT 2
17610: PUSH
17611: LD_INT 4
17613: PUSH
17614: LD_INT 5
17616: PUSH
17617: LD_INT 7
17619: PUSH
17620: LD_INT 11
17622: PUSH
17623: LD_INT 12
17625: PUSH
17626: LD_INT 15
17628: PUSH
17629: LD_INT 16
17631: PUSH
17632: LD_INT 20
17634: PUSH
17635: LD_INT 21
17637: PUSH
17638: LD_INT 22
17640: PUSH
17641: LD_INT 23
17643: PUSH
17644: LD_INT 25
17646: PUSH
17647: LD_INT 26
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: LIST
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: LIST
17660: LIST
17661: LIST
17662: LIST
17663: LIST
17664: LIST
17665: PUSH
17666: LD_INT 101
17668: PUSH
17669: LD_INT 102
17671: PUSH
17672: LD_INT 103
17674: PUSH
17675: LD_INT 105
17677: PUSH
17678: LD_INT 106
17680: PUSH
17681: LD_INT 108
17683: PUSH
17684: LD_INT 112
17686: PUSH
17687: LD_INT 116
17689: PUSH
17690: LD_INT 117
17692: PUSH
17693: LD_INT 118
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: LIST
17700: LIST
17701: LIST
17702: LIST
17703: LIST
17704: LIST
17705: LIST
17706: LIST
17707: PUSH
17708: EMPTY
17709: LIST
17710: LIST
17711: ST_TO_ADDR
17712: GO 20115
17714: LD_INT 8
17716: DOUBLE
17717: EQUAL
17718: IFTRUE 17722
17720: GO 17862
17722: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
17723: LD_ADDR_VAR 0 2
17727: PUSH
17728: LD_INT 2
17730: PUSH
17731: LD_INT 4
17733: PUSH
17734: LD_INT 5
17736: PUSH
17737: LD_INT 6
17739: PUSH
17740: LD_INT 7
17742: PUSH
17743: LD_INT 8
17745: PUSH
17746: LD_INT 11
17748: PUSH
17749: LD_INT 12
17751: PUSH
17752: LD_INT 15
17754: PUSH
17755: LD_INT 16
17757: PUSH
17758: LD_INT 20
17760: PUSH
17761: LD_INT 21
17763: PUSH
17764: LD_INT 22
17766: PUSH
17767: LD_INT 23
17769: PUSH
17770: LD_INT 25
17772: PUSH
17773: LD_INT 26
17775: PUSH
17776: LD_INT 30
17778: PUSH
17779: LD_INT 31
17781: PUSH
17782: LD_INT 32
17784: PUSH
17785: LD_INT 36
17787: PUSH
17788: EMPTY
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: LIST
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: LIST
17802: LIST
17803: LIST
17804: LIST
17805: LIST
17806: LIST
17807: LIST
17808: LIST
17809: PUSH
17810: LD_INT 101
17812: PUSH
17813: LD_INT 102
17815: PUSH
17816: LD_INT 103
17818: PUSH
17819: LD_INT 105
17821: PUSH
17822: LD_INT 106
17824: PUSH
17825: LD_INT 108
17827: PUSH
17828: LD_INT 109
17830: PUSH
17831: LD_INT 112
17833: PUSH
17834: LD_INT 116
17836: PUSH
17837: LD_INT 117
17839: PUSH
17840: LD_INT 118
17842: PUSH
17843: EMPTY
17844: LIST
17845: LIST
17846: LIST
17847: LIST
17848: LIST
17849: LIST
17850: LIST
17851: LIST
17852: LIST
17853: LIST
17854: LIST
17855: PUSH
17856: EMPTY
17857: LIST
17858: LIST
17859: ST_TO_ADDR
17860: GO 20115
17862: LD_INT 9
17864: DOUBLE
17865: EQUAL
17866: IFTRUE 17870
17868: GO 18018
17870: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
17871: LD_ADDR_VAR 0 2
17875: PUSH
17876: LD_INT 2
17878: PUSH
17879: LD_INT 4
17881: PUSH
17882: LD_INT 5
17884: PUSH
17885: LD_INT 6
17887: PUSH
17888: LD_INT 7
17890: PUSH
17891: LD_INT 8
17893: PUSH
17894: LD_INT 11
17896: PUSH
17897: LD_INT 12
17899: PUSH
17900: LD_INT 15
17902: PUSH
17903: LD_INT 16
17905: PUSH
17906: LD_INT 20
17908: PUSH
17909: LD_INT 21
17911: PUSH
17912: LD_INT 22
17914: PUSH
17915: LD_INT 23
17917: PUSH
17918: LD_INT 25
17920: PUSH
17921: LD_INT 26
17923: PUSH
17924: LD_INT 28
17926: PUSH
17927: LD_INT 30
17929: PUSH
17930: LD_INT 31
17932: PUSH
17933: LD_INT 32
17935: PUSH
17936: LD_INT 36
17938: PUSH
17939: EMPTY
17940: LIST
17941: LIST
17942: LIST
17943: LIST
17944: LIST
17945: LIST
17946: LIST
17947: LIST
17948: LIST
17949: LIST
17950: LIST
17951: LIST
17952: LIST
17953: LIST
17954: LIST
17955: LIST
17956: LIST
17957: LIST
17958: LIST
17959: LIST
17960: LIST
17961: PUSH
17962: LD_INT 101
17964: PUSH
17965: LD_INT 102
17967: PUSH
17968: LD_INT 103
17970: PUSH
17971: LD_INT 105
17973: PUSH
17974: LD_INT 106
17976: PUSH
17977: LD_INT 108
17979: PUSH
17980: LD_INT 109
17982: PUSH
17983: LD_INT 112
17985: PUSH
17986: LD_INT 114
17988: PUSH
17989: LD_INT 116
17991: PUSH
17992: LD_INT 117
17994: PUSH
17995: LD_INT 118
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: LIST
18002: LIST
18003: LIST
18004: LIST
18005: LIST
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: LIST
18011: PUSH
18012: EMPTY
18013: LIST
18014: LIST
18015: ST_TO_ADDR
18016: GO 20115
18018: LD_INT 10
18020: DOUBLE
18021: EQUAL
18022: IFTRUE 18026
18024: GO 18222
18026: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
18027: LD_ADDR_VAR 0 2
18031: PUSH
18032: LD_INT 2
18034: PUSH
18035: LD_INT 4
18037: PUSH
18038: LD_INT 5
18040: PUSH
18041: LD_INT 6
18043: PUSH
18044: LD_INT 7
18046: PUSH
18047: LD_INT 8
18049: PUSH
18050: LD_INT 9
18052: PUSH
18053: LD_INT 10
18055: PUSH
18056: LD_INT 11
18058: PUSH
18059: LD_INT 12
18061: PUSH
18062: LD_INT 13
18064: PUSH
18065: LD_INT 14
18067: PUSH
18068: LD_INT 15
18070: PUSH
18071: LD_INT 16
18073: PUSH
18074: LD_INT 17
18076: PUSH
18077: LD_INT 18
18079: PUSH
18080: LD_INT 19
18082: PUSH
18083: LD_INT 20
18085: PUSH
18086: LD_INT 21
18088: PUSH
18089: LD_INT 22
18091: PUSH
18092: LD_INT 23
18094: PUSH
18095: LD_INT 24
18097: PUSH
18098: LD_INT 25
18100: PUSH
18101: LD_INT 26
18103: PUSH
18104: LD_INT 28
18106: PUSH
18107: LD_INT 30
18109: PUSH
18110: LD_INT 31
18112: PUSH
18113: LD_INT 32
18115: PUSH
18116: LD_INT 36
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: LIST
18123: LIST
18124: LIST
18125: LIST
18126: LIST
18127: LIST
18128: LIST
18129: LIST
18130: LIST
18131: LIST
18132: LIST
18133: LIST
18134: LIST
18135: LIST
18136: LIST
18137: LIST
18138: LIST
18139: LIST
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: PUSH
18150: LD_INT 101
18152: PUSH
18153: LD_INT 102
18155: PUSH
18156: LD_INT 103
18158: PUSH
18159: LD_INT 104
18161: PUSH
18162: LD_INT 105
18164: PUSH
18165: LD_INT 106
18167: PUSH
18168: LD_INT 107
18170: PUSH
18171: LD_INT 108
18173: PUSH
18174: LD_INT 109
18176: PUSH
18177: LD_INT 110
18179: PUSH
18180: LD_INT 111
18182: PUSH
18183: LD_INT 112
18185: PUSH
18186: LD_INT 114
18188: PUSH
18189: LD_INT 116
18191: PUSH
18192: LD_INT 117
18194: PUSH
18195: LD_INT 118
18197: PUSH
18198: EMPTY
18199: LIST
18200: LIST
18201: LIST
18202: LIST
18203: LIST
18204: LIST
18205: LIST
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: LIST
18214: LIST
18215: PUSH
18216: EMPTY
18217: LIST
18218: LIST
18219: ST_TO_ADDR
18220: GO 20115
18222: LD_INT 11
18224: DOUBLE
18225: EQUAL
18226: IFTRUE 18230
18228: GO 18434
18230: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
18231: LD_ADDR_VAR 0 2
18235: PUSH
18236: LD_INT 2
18238: PUSH
18239: LD_INT 3
18241: PUSH
18242: LD_INT 4
18244: PUSH
18245: LD_INT 5
18247: PUSH
18248: LD_INT 6
18250: PUSH
18251: LD_INT 7
18253: PUSH
18254: LD_INT 8
18256: PUSH
18257: LD_INT 9
18259: PUSH
18260: LD_INT 10
18262: PUSH
18263: LD_INT 11
18265: PUSH
18266: LD_INT 12
18268: PUSH
18269: LD_INT 13
18271: PUSH
18272: LD_INT 14
18274: PUSH
18275: LD_INT 15
18277: PUSH
18278: LD_INT 16
18280: PUSH
18281: LD_INT 17
18283: PUSH
18284: LD_INT 18
18286: PUSH
18287: LD_INT 19
18289: PUSH
18290: LD_INT 20
18292: PUSH
18293: LD_INT 21
18295: PUSH
18296: LD_INT 22
18298: PUSH
18299: LD_INT 23
18301: PUSH
18302: LD_INT 24
18304: PUSH
18305: LD_INT 25
18307: PUSH
18308: LD_INT 26
18310: PUSH
18311: LD_INT 28
18313: PUSH
18314: LD_INT 30
18316: PUSH
18317: LD_INT 31
18319: PUSH
18320: LD_INT 32
18322: PUSH
18323: LD_INT 34
18325: PUSH
18326: LD_INT 36
18328: PUSH
18329: EMPTY
18330: LIST
18331: LIST
18332: LIST
18333: LIST
18334: LIST
18335: LIST
18336: LIST
18337: LIST
18338: LIST
18339: LIST
18340: LIST
18341: LIST
18342: LIST
18343: LIST
18344: LIST
18345: LIST
18346: LIST
18347: LIST
18348: LIST
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: LIST
18354: LIST
18355: LIST
18356: LIST
18357: LIST
18358: LIST
18359: LIST
18360: LIST
18361: PUSH
18362: LD_INT 101
18364: PUSH
18365: LD_INT 102
18367: PUSH
18368: LD_INT 103
18370: PUSH
18371: LD_INT 104
18373: PUSH
18374: LD_INT 105
18376: PUSH
18377: LD_INT 106
18379: PUSH
18380: LD_INT 107
18382: PUSH
18383: LD_INT 108
18385: PUSH
18386: LD_INT 109
18388: PUSH
18389: LD_INT 110
18391: PUSH
18392: LD_INT 111
18394: PUSH
18395: LD_INT 112
18397: PUSH
18398: LD_INT 114
18400: PUSH
18401: LD_INT 116
18403: PUSH
18404: LD_INT 117
18406: PUSH
18407: LD_INT 118
18409: PUSH
18410: EMPTY
18411: LIST
18412: LIST
18413: LIST
18414: LIST
18415: LIST
18416: LIST
18417: LIST
18418: LIST
18419: LIST
18420: LIST
18421: LIST
18422: LIST
18423: LIST
18424: LIST
18425: LIST
18426: LIST
18427: PUSH
18428: EMPTY
18429: LIST
18430: LIST
18431: ST_TO_ADDR
18432: GO 20115
18434: LD_INT 12
18436: DOUBLE
18437: EQUAL
18438: IFTRUE 18442
18440: GO 18662
18442: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
18443: LD_ADDR_VAR 0 2
18447: PUSH
18448: LD_INT 1
18450: PUSH
18451: LD_INT 2
18453: PUSH
18454: LD_INT 3
18456: PUSH
18457: LD_INT 4
18459: PUSH
18460: LD_INT 5
18462: PUSH
18463: LD_INT 6
18465: PUSH
18466: LD_INT 7
18468: PUSH
18469: LD_INT 8
18471: PUSH
18472: LD_INT 9
18474: PUSH
18475: LD_INT 10
18477: PUSH
18478: LD_INT 11
18480: PUSH
18481: LD_INT 12
18483: PUSH
18484: LD_INT 13
18486: PUSH
18487: LD_INT 14
18489: PUSH
18490: LD_INT 15
18492: PUSH
18493: LD_INT 16
18495: PUSH
18496: LD_INT 17
18498: PUSH
18499: LD_INT 18
18501: PUSH
18502: LD_INT 19
18504: PUSH
18505: LD_INT 20
18507: PUSH
18508: LD_INT 21
18510: PUSH
18511: LD_INT 22
18513: PUSH
18514: LD_INT 23
18516: PUSH
18517: LD_INT 24
18519: PUSH
18520: LD_INT 25
18522: PUSH
18523: LD_INT 26
18525: PUSH
18526: LD_INT 27
18528: PUSH
18529: LD_INT 28
18531: PUSH
18532: LD_INT 30
18534: PUSH
18535: LD_INT 31
18537: PUSH
18538: LD_INT 32
18540: PUSH
18541: LD_INT 33
18543: PUSH
18544: LD_INT 34
18546: PUSH
18547: LD_INT 36
18549: PUSH
18550: EMPTY
18551: LIST
18552: LIST
18553: LIST
18554: LIST
18555: LIST
18556: LIST
18557: LIST
18558: LIST
18559: LIST
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: PUSH
18586: LD_INT 101
18588: PUSH
18589: LD_INT 102
18591: PUSH
18592: LD_INT 103
18594: PUSH
18595: LD_INT 104
18597: PUSH
18598: LD_INT 105
18600: PUSH
18601: LD_INT 106
18603: PUSH
18604: LD_INT 107
18606: PUSH
18607: LD_INT 108
18609: PUSH
18610: LD_INT 109
18612: PUSH
18613: LD_INT 110
18615: PUSH
18616: LD_INT 111
18618: PUSH
18619: LD_INT 112
18621: PUSH
18622: LD_INT 113
18624: PUSH
18625: LD_INT 114
18627: PUSH
18628: LD_INT 116
18630: PUSH
18631: LD_INT 117
18633: PUSH
18634: LD_INT 118
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: LIST
18648: LIST
18649: LIST
18650: LIST
18651: LIST
18652: LIST
18653: LIST
18654: LIST
18655: PUSH
18656: EMPTY
18657: LIST
18658: LIST
18659: ST_TO_ADDR
18660: GO 20115
18662: LD_INT 13
18664: DOUBLE
18665: EQUAL
18666: IFTRUE 18670
18668: GO 18878
18670: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
18671: LD_ADDR_VAR 0 2
18675: PUSH
18676: LD_INT 1
18678: PUSH
18679: LD_INT 2
18681: PUSH
18682: LD_INT 3
18684: PUSH
18685: LD_INT 4
18687: PUSH
18688: LD_INT 5
18690: PUSH
18691: LD_INT 8
18693: PUSH
18694: LD_INT 9
18696: PUSH
18697: LD_INT 10
18699: PUSH
18700: LD_INT 11
18702: PUSH
18703: LD_INT 12
18705: PUSH
18706: LD_INT 14
18708: PUSH
18709: LD_INT 15
18711: PUSH
18712: LD_INT 16
18714: PUSH
18715: LD_INT 17
18717: PUSH
18718: LD_INT 18
18720: PUSH
18721: LD_INT 19
18723: PUSH
18724: LD_INT 20
18726: PUSH
18727: LD_INT 21
18729: PUSH
18730: LD_INT 22
18732: PUSH
18733: LD_INT 23
18735: PUSH
18736: LD_INT 24
18738: PUSH
18739: LD_INT 25
18741: PUSH
18742: LD_INT 26
18744: PUSH
18745: LD_INT 27
18747: PUSH
18748: LD_INT 28
18750: PUSH
18751: LD_INT 30
18753: PUSH
18754: LD_INT 31
18756: PUSH
18757: LD_INT 32
18759: PUSH
18760: LD_INT 33
18762: PUSH
18763: LD_INT 34
18765: PUSH
18766: LD_INT 36
18768: PUSH
18769: EMPTY
18770: LIST
18771: LIST
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: LIST
18784: LIST
18785: LIST
18786: LIST
18787: LIST
18788: LIST
18789: LIST
18790: LIST
18791: LIST
18792: LIST
18793: LIST
18794: LIST
18795: LIST
18796: LIST
18797: LIST
18798: LIST
18799: LIST
18800: LIST
18801: PUSH
18802: LD_INT 101
18804: PUSH
18805: LD_INT 102
18807: PUSH
18808: LD_INT 103
18810: PUSH
18811: LD_INT 104
18813: PUSH
18814: LD_INT 105
18816: PUSH
18817: LD_INT 106
18819: PUSH
18820: LD_INT 107
18822: PUSH
18823: LD_INT 108
18825: PUSH
18826: LD_INT 109
18828: PUSH
18829: LD_INT 110
18831: PUSH
18832: LD_INT 111
18834: PUSH
18835: LD_INT 112
18837: PUSH
18838: LD_INT 113
18840: PUSH
18841: LD_INT 114
18843: PUSH
18844: LD_INT 116
18846: PUSH
18847: LD_INT 117
18849: PUSH
18850: LD_INT 118
18852: PUSH
18853: EMPTY
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: PUSH
18872: EMPTY
18873: LIST
18874: LIST
18875: ST_TO_ADDR
18876: GO 20115
18878: LD_INT 14
18880: DOUBLE
18881: EQUAL
18882: IFTRUE 18886
18884: GO 19110
18886: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
18887: LD_ADDR_VAR 0 2
18891: PUSH
18892: LD_INT 1
18894: PUSH
18895: LD_INT 2
18897: PUSH
18898: LD_INT 3
18900: PUSH
18901: LD_INT 4
18903: PUSH
18904: LD_INT 5
18906: PUSH
18907: LD_INT 6
18909: PUSH
18910: LD_INT 7
18912: PUSH
18913: LD_INT 8
18915: PUSH
18916: LD_INT 9
18918: PUSH
18919: LD_INT 10
18921: PUSH
18922: LD_INT 11
18924: PUSH
18925: LD_INT 12
18927: PUSH
18928: LD_INT 13
18930: PUSH
18931: LD_INT 14
18933: PUSH
18934: LD_INT 15
18936: PUSH
18937: LD_INT 16
18939: PUSH
18940: LD_INT 17
18942: PUSH
18943: LD_INT 18
18945: PUSH
18946: LD_INT 19
18948: PUSH
18949: LD_INT 20
18951: PUSH
18952: LD_INT 21
18954: PUSH
18955: LD_INT 22
18957: PUSH
18958: LD_INT 23
18960: PUSH
18961: LD_INT 24
18963: PUSH
18964: LD_INT 25
18966: PUSH
18967: LD_INT 26
18969: PUSH
18970: LD_INT 27
18972: PUSH
18973: LD_INT 28
18975: PUSH
18976: LD_INT 29
18978: PUSH
18979: LD_INT 30
18981: PUSH
18982: LD_INT 31
18984: PUSH
18985: LD_INT 32
18987: PUSH
18988: LD_INT 33
18990: PUSH
18991: LD_INT 34
18993: PUSH
18994: LD_INT 36
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: LIST
19001: LIST
19002: LIST
19003: LIST
19004: LIST
19005: LIST
19006: LIST
19007: LIST
19008: LIST
19009: LIST
19010: LIST
19011: LIST
19012: LIST
19013: LIST
19014: LIST
19015: LIST
19016: LIST
19017: LIST
19018: LIST
19019: LIST
19020: LIST
19021: LIST
19022: LIST
19023: LIST
19024: LIST
19025: LIST
19026: LIST
19027: LIST
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: PUSH
19034: LD_INT 101
19036: PUSH
19037: LD_INT 102
19039: PUSH
19040: LD_INT 103
19042: PUSH
19043: LD_INT 104
19045: PUSH
19046: LD_INT 105
19048: PUSH
19049: LD_INT 106
19051: PUSH
19052: LD_INT 107
19054: PUSH
19055: LD_INT 108
19057: PUSH
19058: LD_INT 109
19060: PUSH
19061: LD_INT 110
19063: PUSH
19064: LD_INT 111
19066: PUSH
19067: LD_INT 112
19069: PUSH
19070: LD_INT 113
19072: PUSH
19073: LD_INT 114
19075: PUSH
19076: LD_INT 116
19078: PUSH
19079: LD_INT 117
19081: PUSH
19082: LD_INT 118
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: LIST
19089: LIST
19090: LIST
19091: LIST
19092: LIST
19093: LIST
19094: LIST
19095: LIST
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: LIST
19101: LIST
19102: LIST
19103: PUSH
19104: EMPTY
19105: LIST
19106: LIST
19107: ST_TO_ADDR
19108: GO 20115
19110: LD_INT 15
19112: DOUBLE
19113: EQUAL
19114: IFTRUE 19118
19116: GO 19342
19118: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
19119: LD_ADDR_VAR 0 2
19123: PUSH
19124: LD_INT 1
19126: PUSH
19127: LD_INT 2
19129: PUSH
19130: LD_INT 3
19132: PUSH
19133: LD_INT 4
19135: PUSH
19136: LD_INT 5
19138: PUSH
19139: LD_INT 6
19141: PUSH
19142: LD_INT 7
19144: PUSH
19145: LD_INT 8
19147: PUSH
19148: LD_INT 9
19150: PUSH
19151: LD_INT 10
19153: PUSH
19154: LD_INT 11
19156: PUSH
19157: LD_INT 12
19159: PUSH
19160: LD_INT 13
19162: PUSH
19163: LD_INT 14
19165: PUSH
19166: LD_INT 15
19168: PUSH
19169: LD_INT 16
19171: PUSH
19172: LD_INT 17
19174: PUSH
19175: LD_INT 18
19177: PUSH
19178: LD_INT 19
19180: PUSH
19181: LD_INT 20
19183: PUSH
19184: LD_INT 21
19186: PUSH
19187: LD_INT 22
19189: PUSH
19190: LD_INT 23
19192: PUSH
19193: LD_INT 24
19195: PUSH
19196: LD_INT 25
19198: PUSH
19199: LD_INT 26
19201: PUSH
19202: LD_INT 27
19204: PUSH
19205: LD_INT 28
19207: PUSH
19208: LD_INT 29
19210: PUSH
19211: LD_INT 30
19213: PUSH
19214: LD_INT 31
19216: PUSH
19217: LD_INT 32
19219: PUSH
19220: LD_INT 33
19222: PUSH
19223: LD_INT 34
19225: PUSH
19226: LD_INT 36
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: LIST
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: LIST
19247: LIST
19248: LIST
19249: LIST
19250: LIST
19251: LIST
19252: LIST
19253: LIST
19254: LIST
19255: LIST
19256: LIST
19257: LIST
19258: LIST
19259: LIST
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: PUSH
19266: LD_INT 101
19268: PUSH
19269: LD_INT 102
19271: PUSH
19272: LD_INT 103
19274: PUSH
19275: LD_INT 104
19277: PUSH
19278: LD_INT 105
19280: PUSH
19281: LD_INT 106
19283: PUSH
19284: LD_INT 107
19286: PUSH
19287: LD_INT 108
19289: PUSH
19290: LD_INT 109
19292: PUSH
19293: LD_INT 110
19295: PUSH
19296: LD_INT 111
19298: PUSH
19299: LD_INT 112
19301: PUSH
19302: LD_INT 113
19304: PUSH
19305: LD_INT 114
19307: PUSH
19308: LD_INT 116
19310: PUSH
19311: LD_INT 117
19313: PUSH
19314: LD_INT 118
19316: PUSH
19317: EMPTY
19318: LIST
19319: LIST
19320: LIST
19321: LIST
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: LIST
19328: LIST
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: ST_TO_ADDR
19340: GO 20115
19342: LD_INT 16
19344: DOUBLE
19345: EQUAL
19346: IFTRUE 19350
19348: GO 19486
19350: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
19351: LD_ADDR_VAR 0 2
19355: PUSH
19356: LD_INT 2
19358: PUSH
19359: LD_INT 4
19361: PUSH
19362: LD_INT 5
19364: PUSH
19365: LD_INT 7
19367: PUSH
19368: LD_INT 11
19370: PUSH
19371: LD_INT 12
19373: PUSH
19374: LD_INT 15
19376: PUSH
19377: LD_INT 16
19379: PUSH
19380: LD_INT 20
19382: PUSH
19383: LD_INT 21
19385: PUSH
19386: LD_INT 22
19388: PUSH
19389: LD_INT 23
19391: PUSH
19392: LD_INT 25
19394: PUSH
19395: LD_INT 26
19397: PUSH
19398: LD_INT 30
19400: PUSH
19401: LD_INT 31
19403: PUSH
19404: LD_INT 32
19406: PUSH
19407: LD_INT 33
19409: PUSH
19410: LD_INT 34
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: LIST
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: LIST
19433: PUSH
19434: LD_INT 101
19436: PUSH
19437: LD_INT 102
19439: PUSH
19440: LD_INT 103
19442: PUSH
19443: LD_INT 106
19445: PUSH
19446: LD_INT 108
19448: PUSH
19449: LD_INT 112
19451: PUSH
19452: LD_INT 113
19454: PUSH
19455: LD_INT 114
19457: PUSH
19458: LD_INT 116
19460: PUSH
19461: LD_INT 117
19463: PUSH
19464: LD_INT 118
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: LIST
19471: LIST
19472: LIST
19473: LIST
19474: LIST
19475: LIST
19476: LIST
19477: LIST
19478: LIST
19479: PUSH
19480: EMPTY
19481: LIST
19482: LIST
19483: ST_TO_ADDR
19484: GO 20115
19486: LD_INT 17
19488: DOUBLE
19489: EQUAL
19490: IFTRUE 19494
19492: GO 19718
19494: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
19495: LD_ADDR_VAR 0 2
19499: PUSH
19500: LD_INT 1
19502: PUSH
19503: LD_INT 2
19505: PUSH
19506: LD_INT 3
19508: PUSH
19509: LD_INT 4
19511: PUSH
19512: LD_INT 5
19514: PUSH
19515: LD_INT 6
19517: PUSH
19518: LD_INT 7
19520: PUSH
19521: LD_INT 8
19523: PUSH
19524: LD_INT 9
19526: PUSH
19527: LD_INT 10
19529: PUSH
19530: LD_INT 11
19532: PUSH
19533: LD_INT 12
19535: PUSH
19536: LD_INT 13
19538: PUSH
19539: LD_INT 14
19541: PUSH
19542: LD_INT 15
19544: PUSH
19545: LD_INT 16
19547: PUSH
19548: LD_INT 17
19550: PUSH
19551: LD_INT 18
19553: PUSH
19554: LD_INT 19
19556: PUSH
19557: LD_INT 20
19559: PUSH
19560: LD_INT 21
19562: PUSH
19563: LD_INT 22
19565: PUSH
19566: LD_INT 23
19568: PUSH
19569: LD_INT 24
19571: PUSH
19572: LD_INT 25
19574: PUSH
19575: LD_INT 26
19577: PUSH
19578: LD_INT 27
19580: PUSH
19581: LD_INT 28
19583: PUSH
19584: LD_INT 29
19586: PUSH
19587: LD_INT 30
19589: PUSH
19590: LD_INT 31
19592: PUSH
19593: LD_INT 32
19595: PUSH
19596: LD_INT 33
19598: PUSH
19599: LD_INT 34
19601: PUSH
19602: LD_INT 36
19604: PUSH
19605: EMPTY
19606: LIST
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: PUSH
19642: LD_INT 101
19644: PUSH
19645: LD_INT 102
19647: PUSH
19648: LD_INT 103
19650: PUSH
19651: LD_INT 104
19653: PUSH
19654: LD_INT 105
19656: PUSH
19657: LD_INT 106
19659: PUSH
19660: LD_INT 107
19662: PUSH
19663: LD_INT 108
19665: PUSH
19666: LD_INT 109
19668: PUSH
19669: LD_INT 110
19671: PUSH
19672: LD_INT 111
19674: PUSH
19675: LD_INT 112
19677: PUSH
19678: LD_INT 113
19680: PUSH
19681: LD_INT 114
19683: PUSH
19684: LD_INT 116
19686: PUSH
19687: LD_INT 117
19689: PUSH
19690: LD_INT 118
19692: PUSH
19693: EMPTY
19694: LIST
19695: LIST
19696: LIST
19697: LIST
19698: LIST
19699: LIST
19700: LIST
19701: LIST
19702: LIST
19703: LIST
19704: LIST
19705: LIST
19706: LIST
19707: LIST
19708: LIST
19709: LIST
19710: LIST
19711: PUSH
19712: EMPTY
19713: LIST
19714: LIST
19715: ST_TO_ADDR
19716: GO 20115
19718: LD_INT 18
19720: DOUBLE
19721: EQUAL
19722: IFTRUE 19726
19724: GO 19874
19726: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
19727: LD_ADDR_VAR 0 2
19731: PUSH
19732: LD_INT 2
19734: PUSH
19735: LD_INT 4
19737: PUSH
19738: LD_INT 5
19740: PUSH
19741: LD_INT 7
19743: PUSH
19744: LD_INT 11
19746: PUSH
19747: LD_INT 12
19749: PUSH
19750: LD_INT 15
19752: PUSH
19753: LD_INT 16
19755: PUSH
19756: LD_INT 20
19758: PUSH
19759: LD_INT 21
19761: PUSH
19762: LD_INT 22
19764: PUSH
19765: LD_INT 23
19767: PUSH
19768: LD_INT 25
19770: PUSH
19771: LD_INT 26
19773: PUSH
19774: LD_INT 30
19776: PUSH
19777: LD_INT 31
19779: PUSH
19780: LD_INT 32
19782: PUSH
19783: LD_INT 33
19785: PUSH
19786: LD_INT 34
19788: PUSH
19789: LD_INT 35
19791: PUSH
19792: LD_INT 36
19794: PUSH
19795: EMPTY
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: LIST
19810: LIST
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: LIST
19817: PUSH
19818: LD_INT 101
19820: PUSH
19821: LD_INT 102
19823: PUSH
19824: LD_INT 103
19826: PUSH
19827: LD_INT 106
19829: PUSH
19830: LD_INT 108
19832: PUSH
19833: LD_INT 112
19835: PUSH
19836: LD_INT 113
19838: PUSH
19839: LD_INT 114
19841: PUSH
19842: LD_INT 115
19844: PUSH
19845: LD_INT 116
19847: PUSH
19848: LD_INT 117
19850: PUSH
19851: LD_INT 118
19853: PUSH
19854: EMPTY
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: ST_TO_ADDR
19872: GO 20115
19874: LD_INT 19
19876: DOUBLE
19877: EQUAL
19878: IFTRUE 19882
19880: GO 20114
19882: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
19883: LD_ADDR_VAR 0 2
19887: PUSH
19888: LD_INT 1
19890: PUSH
19891: LD_INT 2
19893: PUSH
19894: LD_INT 3
19896: PUSH
19897: LD_INT 4
19899: PUSH
19900: LD_INT 5
19902: PUSH
19903: LD_INT 6
19905: PUSH
19906: LD_INT 7
19908: PUSH
19909: LD_INT 8
19911: PUSH
19912: LD_INT 9
19914: PUSH
19915: LD_INT 10
19917: PUSH
19918: LD_INT 11
19920: PUSH
19921: LD_INT 12
19923: PUSH
19924: LD_INT 13
19926: PUSH
19927: LD_INT 14
19929: PUSH
19930: LD_INT 15
19932: PUSH
19933: LD_INT 16
19935: PUSH
19936: LD_INT 17
19938: PUSH
19939: LD_INT 18
19941: PUSH
19942: LD_INT 19
19944: PUSH
19945: LD_INT 20
19947: PUSH
19948: LD_INT 21
19950: PUSH
19951: LD_INT 22
19953: PUSH
19954: LD_INT 23
19956: PUSH
19957: LD_INT 24
19959: PUSH
19960: LD_INT 25
19962: PUSH
19963: LD_INT 26
19965: PUSH
19966: LD_INT 27
19968: PUSH
19969: LD_INT 28
19971: PUSH
19972: LD_INT 29
19974: PUSH
19975: LD_INT 30
19977: PUSH
19978: LD_INT 31
19980: PUSH
19981: LD_INT 32
19983: PUSH
19984: LD_INT 33
19986: PUSH
19987: LD_INT 34
19989: PUSH
19990: LD_INT 35
19992: PUSH
19993: LD_INT 36
19995: PUSH
19996: EMPTY
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: LIST
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: LIST
20033: PUSH
20034: LD_INT 101
20036: PUSH
20037: LD_INT 102
20039: PUSH
20040: LD_INT 103
20042: PUSH
20043: LD_INT 104
20045: PUSH
20046: LD_INT 105
20048: PUSH
20049: LD_INT 106
20051: PUSH
20052: LD_INT 107
20054: PUSH
20055: LD_INT 108
20057: PUSH
20058: LD_INT 109
20060: PUSH
20061: LD_INT 110
20063: PUSH
20064: LD_INT 111
20066: PUSH
20067: LD_INT 112
20069: PUSH
20070: LD_INT 113
20072: PUSH
20073: LD_INT 114
20075: PUSH
20076: LD_INT 115
20078: PUSH
20079: LD_INT 116
20081: PUSH
20082: LD_INT 117
20084: PUSH
20085: LD_INT 118
20087: PUSH
20088: EMPTY
20089: LIST
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: LIST
20095: LIST
20096: LIST
20097: LIST
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: PUSH
20108: EMPTY
20109: LIST
20110: LIST
20111: ST_TO_ADDR
20112: GO 20115
20114: POP
// end else
20115: GO 20346
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
20117: LD_ADDR_VAR 0 2
20121: PUSH
20122: LD_INT 1
20124: PUSH
20125: LD_INT 2
20127: PUSH
20128: LD_INT 3
20130: PUSH
20131: LD_INT 4
20133: PUSH
20134: LD_INT 5
20136: PUSH
20137: LD_INT 6
20139: PUSH
20140: LD_INT 7
20142: PUSH
20143: LD_INT 8
20145: PUSH
20146: LD_INT 9
20148: PUSH
20149: LD_INT 10
20151: PUSH
20152: LD_INT 11
20154: PUSH
20155: LD_INT 12
20157: PUSH
20158: LD_INT 13
20160: PUSH
20161: LD_INT 14
20163: PUSH
20164: LD_INT 15
20166: PUSH
20167: LD_INT 16
20169: PUSH
20170: LD_INT 17
20172: PUSH
20173: LD_INT 18
20175: PUSH
20176: LD_INT 19
20178: PUSH
20179: LD_INT 20
20181: PUSH
20182: LD_INT 21
20184: PUSH
20185: LD_INT 22
20187: PUSH
20188: LD_INT 23
20190: PUSH
20191: LD_INT 24
20193: PUSH
20194: LD_INT 25
20196: PUSH
20197: LD_INT 26
20199: PUSH
20200: LD_INT 27
20202: PUSH
20203: LD_INT 28
20205: PUSH
20206: LD_INT 29
20208: PUSH
20209: LD_INT 30
20211: PUSH
20212: LD_INT 31
20214: PUSH
20215: LD_INT 32
20217: PUSH
20218: LD_INT 33
20220: PUSH
20221: LD_INT 34
20223: PUSH
20224: LD_INT 35
20226: PUSH
20227: LD_INT 36
20229: PUSH
20230: EMPTY
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: LIST
20257: LIST
20258: LIST
20259: LIST
20260: LIST
20261: LIST
20262: LIST
20263: LIST
20264: LIST
20265: LIST
20266: LIST
20267: PUSH
20268: LD_INT 101
20270: PUSH
20271: LD_INT 102
20273: PUSH
20274: LD_INT 103
20276: PUSH
20277: LD_INT 104
20279: PUSH
20280: LD_INT 105
20282: PUSH
20283: LD_INT 106
20285: PUSH
20286: LD_INT 107
20288: PUSH
20289: LD_INT 108
20291: PUSH
20292: LD_INT 109
20294: PUSH
20295: LD_INT 110
20297: PUSH
20298: LD_INT 111
20300: PUSH
20301: LD_INT 112
20303: PUSH
20304: LD_INT 113
20306: PUSH
20307: LD_INT 114
20309: PUSH
20310: LD_INT 115
20312: PUSH
20313: LD_INT 116
20315: PUSH
20316: LD_INT 117
20318: PUSH
20319: LD_INT 118
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: LIST
20326: LIST
20327: LIST
20328: LIST
20329: LIST
20330: LIST
20331: LIST
20332: LIST
20333: LIST
20334: LIST
20335: LIST
20336: LIST
20337: LIST
20338: LIST
20339: LIST
20340: LIST
20341: PUSH
20342: EMPTY
20343: LIST
20344: LIST
20345: ST_TO_ADDR
// if result then
20346: LD_VAR 0 2
20350: IFFALSE 21136
// begin normal :=  ;
20352: LD_ADDR_VAR 0 5
20356: PUSH
20357: LD_STRING 
20359: ST_TO_ADDR
// hardcore :=  ;
20360: LD_ADDR_VAR 0 6
20364: PUSH
20365: LD_STRING 
20367: ST_TO_ADDR
// active :=  ;
20368: LD_ADDR_VAR 0 7
20372: PUSH
20373: LD_STRING 
20375: ST_TO_ADDR
// for i = 1 to normalCounter do
20376: LD_ADDR_VAR 0 8
20380: PUSH
20381: DOUBLE
20382: LD_INT 1
20384: DEC
20385: ST_TO_ADDR
20386: LD_EXP 40
20390: PUSH
20391: FOR_TO
20392: IFFALSE 20493
// begin tmp := 0 ;
20394: LD_ADDR_VAR 0 3
20398: PUSH
20399: LD_STRING 0
20401: ST_TO_ADDR
// if result [ 1 ] then
20402: LD_VAR 0 2
20406: PUSH
20407: LD_INT 1
20409: ARRAY
20410: IFFALSE 20475
// if result [ 1 ] [ 1 ] = i then
20412: LD_VAR 0 2
20416: PUSH
20417: LD_INT 1
20419: ARRAY
20420: PUSH
20421: LD_INT 1
20423: ARRAY
20424: PUSH
20425: LD_VAR 0 8
20429: EQUAL
20430: IFFALSE 20475
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
20432: LD_ADDR_VAR 0 2
20436: PUSH
20437: LD_VAR 0 2
20441: PPUSH
20442: LD_INT 1
20444: PPUSH
20445: LD_VAR 0 2
20449: PUSH
20450: LD_INT 1
20452: ARRAY
20453: PPUSH
20454: LD_INT 1
20456: PPUSH
20457: CALL_OW 3
20461: PPUSH
20462: CALL_OW 1
20466: ST_TO_ADDR
// tmp := 1 ;
20467: LD_ADDR_VAR 0 3
20471: PUSH
20472: LD_STRING 1
20474: ST_TO_ADDR
// end ; normal := normal & tmp ;
20475: LD_ADDR_VAR 0 5
20479: PUSH
20480: LD_VAR 0 5
20484: PUSH
20485: LD_VAR 0 3
20489: STR
20490: ST_TO_ADDR
// end ;
20491: GO 20391
20493: POP
20494: POP
// for i = 1 to hardcoreCounter do
20495: LD_ADDR_VAR 0 8
20499: PUSH
20500: DOUBLE
20501: LD_INT 1
20503: DEC
20504: ST_TO_ADDR
20505: LD_EXP 41
20509: PUSH
20510: FOR_TO
20511: IFFALSE 20616
// begin tmp := 0 ;
20513: LD_ADDR_VAR 0 3
20517: PUSH
20518: LD_STRING 0
20520: ST_TO_ADDR
// if result [ 2 ] then
20521: LD_VAR 0 2
20525: PUSH
20526: LD_INT 2
20528: ARRAY
20529: IFFALSE 20598
// if result [ 2 ] [ 1 ] = 100 + i then
20531: LD_VAR 0 2
20535: PUSH
20536: LD_INT 2
20538: ARRAY
20539: PUSH
20540: LD_INT 1
20542: ARRAY
20543: PUSH
20544: LD_INT 100
20546: PUSH
20547: LD_VAR 0 8
20551: PLUS
20552: EQUAL
20553: IFFALSE 20598
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
20555: LD_ADDR_VAR 0 2
20559: PUSH
20560: LD_VAR 0 2
20564: PPUSH
20565: LD_INT 2
20567: PPUSH
20568: LD_VAR 0 2
20572: PUSH
20573: LD_INT 2
20575: ARRAY
20576: PPUSH
20577: LD_INT 1
20579: PPUSH
20580: CALL_OW 3
20584: PPUSH
20585: CALL_OW 1
20589: ST_TO_ADDR
// tmp := 1 ;
20590: LD_ADDR_VAR 0 3
20594: PUSH
20595: LD_STRING 1
20597: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
20598: LD_ADDR_VAR 0 6
20602: PUSH
20603: LD_VAR 0 6
20607: PUSH
20608: LD_VAR 0 3
20612: STR
20613: ST_TO_ADDR
// end ;
20614: GO 20510
20616: POP
20617: POP
// if isGameLoad then
20618: LD_VAR 0 1
20622: IFFALSE 21097
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
20624: LD_ADDR_VAR 0 4
20628: PUSH
20629: LD_EXP 44
20633: PUSH
20634: LD_EXP 43
20638: PUSH
20639: LD_EXP 45
20643: PUSH
20644: LD_EXP 42
20648: PUSH
20649: LD_EXP 46
20653: PUSH
20654: LD_EXP 47
20658: PUSH
20659: LD_EXP 48
20663: PUSH
20664: LD_EXP 49
20668: PUSH
20669: LD_EXP 50
20673: PUSH
20674: LD_EXP 51
20678: PUSH
20679: LD_EXP 52
20683: PUSH
20684: LD_EXP 53
20688: PUSH
20689: LD_EXP 54
20693: PUSH
20694: LD_EXP 55
20698: PUSH
20699: LD_EXP 63
20703: PUSH
20704: LD_EXP 64
20708: PUSH
20709: LD_EXP 65
20713: PUSH
20714: LD_EXP 66
20718: PUSH
20719: LD_EXP 68
20723: PUSH
20724: LD_EXP 69
20728: PUSH
20729: LD_EXP 70
20733: PUSH
20734: LD_EXP 73
20738: PUSH
20739: LD_EXP 75
20743: PUSH
20744: LD_EXP 76
20748: PUSH
20749: LD_EXP 77
20753: PUSH
20754: LD_EXP 79
20758: PUSH
20759: LD_EXP 80
20763: PUSH
20764: LD_EXP 83
20768: PUSH
20769: LD_EXP 84
20773: PUSH
20774: LD_EXP 85
20778: PUSH
20779: LD_EXP 86
20783: PUSH
20784: LD_EXP 87
20788: PUSH
20789: LD_EXP 88
20793: PUSH
20794: LD_EXP 89
20798: PUSH
20799: LD_EXP 90
20803: PUSH
20804: LD_EXP 91
20808: PUSH
20809: LD_EXP 56
20813: PUSH
20814: LD_EXP 57
20818: PUSH
20819: LD_EXP 60
20823: PUSH
20824: LD_EXP 61
20828: PUSH
20829: LD_EXP 62
20833: PUSH
20834: LD_EXP 58
20838: PUSH
20839: LD_EXP 59
20843: PUSH
20844: LD_EXP 67
20848: PUSH
20849: LD_EXP 71
20853: PUSH
20854: LD_EXP 72
20858: PUSH
20859: LD_EXP 74
20863: PUSH
20864: LD_EXP 78
20868: PUSH
20869: LD_EXP 81
20873: PUSH
20874: LD_EXP 82
20878: PUSH
20879: LD_EXP 92
20883: PUSH
20884: LD_EXP 93
20888: PUSH
20889: LD_EXP 94
20893: PUSH
20894: LD_EXP 95
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: ST_TO_ADDR
// tmp :=  ;
20955: LD_ADDR_VAR 0 3
20959: PUSH
20960: LD_STRING 
20962: ST_TO_ADDR
// for i = 1 to normalCounter do
20963: LD_ADDR_VAR 0 8
20967: PUSH
20968: DOUBLE
20969: LD_INT 1
20971: DEC
20972: ST_TO_ADDR
20973: LD_EXP 40
20977: PUSH
20978: FOR_TO
20979: IFFALSE 21015
// begin if flags [ i ] then
20981: LD_VAR 0 4
20985: PUSH
20986: LD_VAR 0 8
20990: ARRAY
20991: IFFALSE 21013
// tmp := tmp & i & ; ;
20993: LD_ADDR_VAR 0 3
20997: PUSH
20998: LD_VAR 0 3
21002: PUSH
21003: LD_VAR 0 8
21007: STR
21008: PUSH
21009: LD_STRING ;
21011: STR
21012: ST_TO_ADDR
// end ;
21013: GO 20978
21015: POP
21016: POP
// for i = 1 to hardcoreCounter do
21017: LD_ADDR_VAR 0 8
21021: PUSH
21022: DOUBLE
21023: LD_INT 1
21025: DEC
21026: ST_TO_ADDR
21027: LD_EXP 41
21031: PUSH
21032: FOR_TO
21033: IFFALSE 21079
// begin if flags [ normalCounter + i ] then
21035: LD_VAR 0 4
21039: PUSH
21040: LD_EXP 40
21044: PUSH
21045: LD_VAR 0 8
21049: PLUS
21050: ARRAY
21051: IFFALSE 21077
// tmp := tmp & ( 100 + i ) & ; ;
21053: LD_ADDR_VAR 0 3
21057: PUSH
21058: LD_VAR 0 3
21062: PUSH
21063: LD_INT 100
21065: PUSH
21066: LD_VAR 0 8
21070: PLUS
21071: STR
21072: PUSH
21073: LD_STRING ;
21075: STR
21076: ST_TO_ADDR
// end ;
21077: GO 21032
21079: POP
21080: POP
// if tmp then
21081: LD_VAR 0 3
21085: IFFALSE 21097
// active := tmp ;
21087: LD_ADDR_VAR 0 7
21091: PUSH
21092: LD_VAR 0 3
21096: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
21097: LD_STRING getStreamItemsFromMission("
21099: PUSH
21100: LD_VAR 0 5
21104: STR
21105: PUSH
21106: LD_STRING ","
21108: STR
21109: PUSH
21110: LD_VAR 0 6
21114: STR
21115: PUSH
21116: LD_STRING ","
21118: STR
21119: PUSH
21120: LD_VAR 0 7
21124: STR
21125: PUSH
21126: LD_STRING ")
21128: STR
21129: PPUSH
21130: CALL_OW 559
// end else
21134: GO 21143
// ToLua ( getStreamItemsFromMission("","","") ) ;
21136: LD_STRING getStreamItemsFromMission("","","")
21138: PPUSH
21139: CALL_OW 559
// end ;
21143: LD_VAR 0 2
21147: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
21148: LD_EXP 39
21152: PUSH
21153: LD_EXP 44
21157: AND
21158: IFFALSE 21282
21160: GO 21162
21162: DISABLE
21163: LD_INT 0
21165: PPUSH
21166: PPUSH
// begin enable ;
21167: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
21168: LD_ADDR_VAR 0 2
21172: PUSH
21173: LD_INT 22
21175: PUSH
21176: LD_OWVAR 2
21180: PUSH
21181: EMPTY
21182: LIST
21183: LIST
21184: PUSH
21185: LD_INT 2
21187: PUSH
21188: LD_INT 34
21190: PUSH
21191: LD_INT 7
21193: PUSH
21194: EMPTY
21195: LIST
21196: LIST
21197: PUSH
21198: LD_INT 34
21200: PUSH
21201: LD_INT 45
21203: PUSH
21204: EMPTY
21205: LIST
21206: LIST
21207: PUSH
21208: LD_INT 34
21210: PUSH
21211: LD_INT 28
21213: PUSH
21214: EMPTY
21215: LIST
21216: LIST
21217: PUSH
21218: LD_INT 34
21220: PUSH
21221: LD_INT 47
21223: PUSH
21224: EMPTY
21225: LIST
21226: LIST
21227: PUSH
21228: EMPTY
21229: LIST
21230: LIST
21231: LIST
21232: LIST
21233: LIST
21234: PUSH
21235: EMPTY
21236: LIST
21237: LIST
21238: PPUSH
21239: CALL_OW 69
21243: ST_TO_ADDR
// if not tmp then
21244: LD_VAR 0 2
21248: NOT
21249: IFFALSE 21253
// exit ;
21251: GO 21282
// for i in tmp do
21253: LD_ADDR_VAR 0 1
21257: PUSH
21258: LD_VAR 0 2
21262: PUSH
21263: FOR_IN
21264: IFFALSE 21280
// begin SetLives ( i , 0 ) ;
21266: LD_VAR 0 1
21270: PPUSH
21271: LD_INT 0
21273: PPUSH
21274: CALL_OW 234
// end ;
21278: GO 21263
21280: POP
21281: POP
// end ;
21282: PPOPN 2
21284: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
21285: LD_EXP 39
21289: PUSH
21290: LD_EXP 45
21294: AND
21295: IFFALSE 21379
21297: GO 21299
21299: DISABLE
21300: LD_INT 0
21302: PPUSH
21303: PPUSH
// begin enable ;
21304: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
21305: LD_ADDR_VAR 0 2
21309: PUSH
21310: LD_INT 22
21312: PUSH
21313: LD_OWVAR 2
21317: PUSH
21318: EMPTY
21319: LIST
21320: LIST
21321: PUSH
21322: LD_INT 32
21324: PUSH
21325: LD_INT 3
21327: PUSH
21328: EMPTY
21329: LIST
21330: LIST
21331: PUSH
21332: EMPTY
21333: LIST
21334: LIST
21335: PPUSH
21336: CALL_OW 69
21340: ST_TO_ADDR
// if not tmp then
21341: LD_VAR 0 2
21345: NOT
21346: IFFALSE 21350
// exit ;
21348: GO 21379
// for i in tmp do
21350: LD_ADDR_VAR 0 1
21354: PUSH
21355: LD_VAR 0 2
21359: PUSH
21360: FOR_IN
21361: IFFALSE 21377
// begin SetLives ( i , 0 ) ;
21363: LD_VAR 0 1
21367: PPUSH
21368: LD_INT 0
21370: PPUSH
21371: CALL_OW 234
// end ;
21375: GO 21360
21377: POP
21378: POP
// end ;
21379: PPOPN 2
21381: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
21382: LD_EXP 39
21386: PUSH
21387: LD_EXP 42
21391: AND
21392: IFFALSE 21485
21394: GO 21396
21396: DISABLE
21397: LD_INT 0
21399: PPUSH
// begin enable ;
21400: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
21401: LD_ADDR_VAR 0 1
21405: PUSH
21406: LD_INT 22
21408: PUSH
21409: LD_OWVAR 2
21413: PUSH
21414: EMPTY
21415: LIST
21416: LIST
21417: PUSH
21418: LD_INT 2
21420: PUSH
21421: LD_INT 25
21423: PUSH
21424: LD_INT 5
21426: PUSH
21427: EMPTY
21428: LIST
21429: LIST
21430: PUSH
21431: LD_INT 25
21433: PUSH
21434: LD_INT 9
21436: PUSH
21437: EMPTY
21438: LIST
21439: LIST
21440: PUSH
21441: LD_INT 25
21443: PUSH
21444: LD_INT 8
21446: PUSH
21447: EMPTY
21448: LIST
21449: LIST
21450: PUSH
21451: EMPTY
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: PUSH
21457: EMPTY
21458: LIST
21459: LIST
21460: PPUSH
21461: CALL_OW 69
21465: PUSH
21466: FOR_IN
21467: IFFALSE 21483
// begin SetClass ( i , 1 ) ;
21469: LD_VAR 0 1
21473: PPUSH
21474: LD_INT 1
21476: PPUSH
21477: CALL_OW 336
// end ;
21481: GO 21466
21483: POP
21484: POP
// end ;
21485: PPOPN 1
21487: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
21488: LD_EXP 39
21492: PUSH
21493: LD_EXP 43
21497: AND
21498: PUSH
21499: LD_OWVAR 65
21503: PUSH
21504: LD_INT 7
21506: LESS
21507: AND
21508: IFFALSE 21522
21510: GO 21512
21512: DISABLE
// begin enable ;
21513: ENABLE
// game_speed := 7 ;
21514: LD_ADDR_OWVAR 65
21518: PUSH
21519: LD_INT 7
21521: ST_TO_ADDR
// end ;
21522: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
21523: LD_EXP 39
21527: PUSH
21528: LD_EXP 46
21532: AND
21533: IFFALSE 21735
21535: GO 21537
21537: DISABLE
21538: LD_INT 0
21540: PPUSH
21541: PPUSH
21542: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21543: LD_ADDR_VAR 0 3
21547: PUSH
21548: LD_INT 81
21550: PUSH
21551: LD_OWVAR 2
21555: PUSH
21556: EMPTY
21557: LIST
21558: LIST
21559: PUSH
21560: LD_INT 21
21562: PUSH
21563: LD_INT 1
21565: PUSH
21566: EMPTY
21567: LIST
21568: LIST
21569: PUSH
21570: EMPTY
21571: LIST
21572: LIST
21573: PPUSH
21574: CALL_OW 69
21578: ST_TO_ADDR
// if not tmp then
21579: LD_VAR 0 3
21583: NOT
21584: IFFALSE 21588
// exit ;
21586: GO 21735
// if tmp > 5 then
21588: LD_VAR 0 3
21592: PUSH
21593: LD_INT 5
21595: GREATER
21596: IFFALSE 21608
// k := 5 else
21598: LD_ADDR_VAR 0 2
21602: PUSH
21603: LD_INT 5
21605: ST_TO_ADDR
21606: GO 21618
// k := tmp ;
21608: LD_ADDR_VAR 0 2
21612: PUSH
21613: LD_VAR 0 3
21617: ST_TO_ADDR
// for i := 1 to k do
21618: LD_ADDR_VAR 0 1
21622: PUSH
21623: DOUBLE
21624: LD_INT 1
21626: DEC
21627: ST_TO_ADDR
21628: LD_VAR 0 2
21632: PUSH
21633: FOR_TO
21634: IFFALSE 21733
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
21636: LD_VAR 0 3
21640: PUSH
21641: LD_VAR 0 1
21645: ARRAY
21646: PPUSH
21647: LD_VAR 0 1
21651: PUSH
21652: LD_INT 4
21654: MOD
21655: PUSH
21656: LD_INT 1
21658: PLUS
21659: PPUSH
21660: CALL_OW 259
21664: PUSH
21665: LD_INT 10
21667: LESS
21668: IFFALSE 21731
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
21670: LD_VAR 0 3
21674: PUSH
21675: LD_VAR 0 1
21679: ARRAY
21680: PPUSH
21681: LD_VAR 0 1
21685: PUSH
21686: LD_INT 4
21688: MOD
21689: PUSH
21690: LD_INT 1
21692: PLUS
21693: PPUSH
21694: LD_VAR 0 3
21698: PUSH
21699: LD_VAR 0 1
21703: ARRAY
21704: PPUSH
21705: LD_VAR 0 1
21709: PUSH
21710: LD_INT 4
21712: MOD
21713: PUSH
21714: LD_INT 1
21716: PLUS
21717: PPUSH
21718: CALL_OW 259
21722: PUSH
21723: LD_INT 1
21725: PLUS
21726: PPUSH
21727: CALL_OW 237
21731: GO 21633
21733: POP
21734: POP
// end ;
21735: PPOPN 3
21737: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
21738: LD_EXP 39
21742: PUSH
21743: LD_EXP 47
21747: AND
21748: IFFALSE 21768
21750: GO 21752
21752: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
21753: LD_INT 4
21755: PPUSH
21756: LD_OWVAR 2
21760: PPUSH
21761: LD_INT 0
21763: PPUSH
21764: CALL_OW 324
21768: END
// every 0 0$1 trigger StreamModeActive and sShovel do
21769: LD_EXP 39
21773: PUSH
21774: LD_EXP 76
21778: AND
21779: IFFALSE 21799
21781: GO 21783
21783: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
21784: LD_INT 19
21786: PPUSH
21787: LD_OWVAR 2
21791: PPUSH
21792: LD_INT 0
21794: PPUSH
21795: CALL_OW 324
21799: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
21800: LD_EXP 39
21804: PUSH
21805: LD_EXP 48
21809: AND
21810: IFFALSE 21912
21812: GO 21814
21814: DISABLE
21815: LD_INT 0
21817: PPUSH
21818: PPUSH
// begin enable ;
21819: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
21820: LD_ADDR_VAR 0 2
21824: PUSH
21825: LD_INT 22
21827: PUSH
21828: LD_OWVAR 2
21832: PUSH
21833: EMPTY
21834: LIST
21835: LIST
21836: PUSH
21837: LD_INT 2
21839: PUSH
21840: LD_INT 34
21842: PUSH
21843: LD_INT 11
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: PUSH
21850: LD_INT 34
21852: PUSH
21853: LD_INT 30
21855: PUSH
21856: EMPTY
21857: LIST
21858: LIST
21859: PUSH
21860: EMPTY
21861: LIST
21862: LIST
21863: LIST
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: PPUSH
21869: CALL_OW 69
21873: ST_TO_ADDR
// if not tmp then
21874: LD_VAR 0 2
21878: NOT
21879: IFFALSE 21883
// exit ;
21881: GO 21912
// for i in tmp do
21883: LD_ADDR_VAR 0 1
21887: PUSH
21888: LD_VAR 0 2
21892: PUSH
21893: FOR_IN
21894: IFFALSE 21910
// begin SetLives ( i , 0 ) ;
21896: LD_VAR 0 1
21900: PPUSH
21901: LD_INT 0
21903: PPUSH
21904: CALL_OW 234
// end ;
21908: GO 21893
21910: POP
21911: POP
// end ;
21912: PPOPN 2
21914: END
// every 0 0$1 trigger StreamModeActive and sBunker do
21915: LD_EXP 39
21919: PUSH
21920: LD_EXP 49
21924: AND
21925: IFFALSE 21945
21927: GO 21929
21929: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
21930: LD_INT 32
21932: PPUSH
21933: LD_OWVAR 2
21937: PPUSH
21938: LD_INT 0
21940: PPUSH
21941: CALL_OW 324
21945: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
21946: LD_EXP 39
21950: PUSH
21951: LD_EXP 50
21955: AND
21956: IFFALSE 22137
21958: GO 21960
21960: DISABLE
21961: LD_INT 0
21963: PPUSH
21964: PPUSH
21965: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
21966: LD_ADDR_VAR 0 2
21970: PUSH
21971: LD_INT 22
21973: PUSH
21974: LD_OWVAR 2
21978: PUSH
21979: EMPTY
21980: LIST
21981: LIST
21982: PUSH
21983: LD_INT 33
21985: PUSH
21986: LD_INT 3
21988: PUSH
21989: EMPTY
21990: LIST
21991: LIST
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: PPUSH
21997: CALL_OW 69
22001: ST_TO_ADDR
// if not tmp then
22002: LD_VAR 0 2
22006: NOT
22007: IFFALSE 22011
// exit ;
22009: GO 22137
// side := 0 ;
22011: LD_ADDR_VAR 0 3
22015: PUSH
22016: LD_INT 0
22018: ST_TO_ADDR
// for i := 1 to 8 do
22019: LD_ADDR_VAR 0 1
22023: PUSH
22024: DOUBLE
22025: LD_INT 1
22027: DEC
22028: ST_TO_ADDR
22029: LD_INT 8
22031: PUSH
22032: FOR_TO
22033: IFFALSE 22081
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
22035: LD_OWVAR 2
22039: PUSH
22040: LD_VAR 0 1
22044: NONEQUAL
22045: PUSH
22046: LD_OWVAR 2
22050: PPUSH
22051: LD_VAR 0 1
22055: PPUSH
22056: CALL_OW 81
22060: PUSH
22061: LD_INT 2
22063: EQUAL
22064: AND
22065: IFFALSE 22079
// begin side := i ;
22067: LD_ADDR_VAR 0 3
22071: PUSH
22072: LD_VAR 0 1
22076: ST_TO_ADDR
// break ;
22077: GO 22081
// end ;
22079: GO 22032
22081: POP
22082: POP
// if not side then
22083: LD_VAR 0 3
22087: NOT
22088: IFFALSE 22092
// exit ;
22090: GO 22137
// for i := 1 to tmp do
22092: LD_ADDR_VAR 0 1
22096: PUSH
22097: DOUBLE
22098: LD_INT 1
22100: DEC
22101: ST_TO_ADDR
22102: LD_VAR 0 2
22106: PUSH
22107: FOR_TO
22108: IFFALSE 22135
// if Prob ( 60 ) then
22110: LD_INT 60
22112: PPUSH
22113: CALL_OW 13
22117: IFFALSE 22133
// SetSide ( i , side ) ;
22119: LD_VAR 0 1
22123: PPUSH
22124: LD_VAR 0 3
22128: PPUSH
22129: CALL_OW 235
22133: GO 22107
22135: POP
22136: POP
// end ;
22137: PPOPN 3
22139: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
22140: LD_EXP 39
22144: PUSH
22145: LD_EXP 52
22149: AND
22150: IFFALSE 22269
22152: GO 22154
22154: DISABLE
22155: LD_INT 0
22157: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
22158: LD_ADDR_VAR 0 1
22162: PUSH
22163: LD_INT 22
22165: PUSH
22166: LD_OWVAR 2
22170: PUSH
22171: EMPTY
22172: LIST
22173: LIST
22174: PUSH
22175: LD_INT 21
22177: PUSH
22178: LD_INT 1
22180: PUSH
22181: EMPTY
22182: LIST
22183: LIST
22184: PUSH
22185: LD_INT 3
22187: PUSH
22188: LD_INT 23
22190: PUSH
22191: LD_INT 0
22193: PUSH
22194: EMPTY
22195: LIST
22196: LIST
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: PUSH
22202: EMPTY
22203: LIST
22204: LIST
22205: LIST
22206: PPUSH
22207: CALL_OW 69
22211: PUSH
22212: FOR_IN
22213: IFFALSE 22267
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
22215: LD_VAR 0 1
22219: PPUSH
22220: CALL_OW 257
22224: PUSH
22225: LD_INT 1
22227: PUSH
22228: LD_INT 2
22230: PUSH
22231: LD_INT 3
22233: PUSH
22234: LD_INT 4
22236: PUSH
22237: EMPTY
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: IN
22243: IFFALSE 22265
// SetClass ( un , rand ( 1 , 4 ) ) ;
22245: LD_VAR 0 1
22249: PPUSH
22250: LD_INT 1
22252: PPUSH
22253: LD_INT 4
22255: PPUSH
22256: CALL_OW 12
22260: PPUSH
22261: CALL_OW 336
22265: GO 22212
22267: POP
22268: POP
// end ;
22269: PPOPN 1
22271: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
22272: LD_EXP 39
22276: PUSH
22277: LD_EXP 51
22281: AND
22282: IFFALSE 22361
22284: GO 22286
22286: DISABLE
22287: LD_INT 0
22289: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22290: LD_ADDR_VAR 0 1
22294: PUSH
22295: LD_INT 22
22297: PUSH
22298: LD_OWVAR 2
22302: PUSH
22303: EMPTY
22304: LIST
22305: LIST
22306: PUSH
22307: LD_INT 21
22309: PUSH
22310: LD_INT 3
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: PUSH
22317: EMPTY
22318: LIST
22319: LIST
22320: PPUSH
22321: CALL_OW 69
22325: ST_TO_ADDR
// if not tmp then
22326: LD_VAR 0 1
22330: NOT
22331: IFFALSE 22335
// exit ;
22333: GO 22361
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
22335: LD_VAR 0 1
22339: PUSH
22340: LD_INT 1
22342: PPUSH
22343: LD_VAR 0 1
22347: PPUSH
22348: CALL_OW 12
22352: ARRAY
22353: PPUSH
22354: LD_INT 100
22356: PPUSH
22357: CALL_OW 234
// end ;
22361: PPOPN 1
22363: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
22364: LD_EXP 39
22368: PUSH
22369: LD_EXP 53
22373: AND
22374: IFFALSE 22472
22376: GO 22378
22378: DISABLE
22379: LD_INT 0
22381: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22382: LD_ADDR_VAR 0 1
22386: PUSH
22387: LD_INT 22
22389: PUSH
22390: LD_OWVAR 2
22394: PUSH
22395: EMPTY
22396: LIST
22397: LIST
22398: PUSH
22399: LD_INT 21
22401: PUSH
22402: LD_INT 1
22404: PUSH
22405: EMPTY
22406: LIST
22407: LIST
22408: PUSH
22409: EMPTY
22410: LIST
22411: LIST
22412: PPUSH
22413: CALL_OW 69
22417: ST_TO_ADDR
// if not tmp then
22418: LD_VAR 0 1
22422: NOT
22423: IFFALSE 22427
// exit ;
22425: GO 22472
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
22427: LD_VAR 0 1
22431: PUSH
22432: LD_INT 1
22434: PPUSH
22435: LD_VAR 0 1
22439: PPUSH
22440: CALL_OW 12
22444: ARRAY
22445: PPUSH
22446: LD_INT 1
22448: PPUSH
22449: LD_INT 4
22451: PPUSH
22452: CALL_OW 12
22456: PPUSH
22457: LD_INT 3000
22459: PPUSH
22460: LD_INT 9000
22462: PPUSH
22463: CALL_OW 12
22467: PPUSH
22468: CALL_OW 492
// end ;
22472: PPOPN 1
22474: END
// every 0 0$1 trigger StreamModeActive and sDepot do
22475: LD_EXP 39
22479: PUSH
22480: LD_EXP 54
22484: AND
22485: IFFALSE 22505
22487: GO 22489
22489: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
22490: LD_INT 1
22492: PPUSH
22493: LD_OWVAR 2
22497: PPUSH
22498: LD_INT 0
22500: PPUSH
22501: CALL_OW 324
22505: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
22506: LD_EXP 39
22510: PUSH
22511: LD_EXP 55
22515: AND
22516: IFFALSE 22599
22518: GO 22520
22520: DISABLE
22521: LD_INT 0
22523: PPUSH
22524: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22525: LD_ADDR_VAR 0 2
22529: PUSH
22530: LD_INT 22
22532: PUSH
22533: LD_OWVAR 2
22537: PUSH
22538: EMPTY
22539: LIST
22540: LIST
22541: PUSH
22542: LD_INT 21
22544: PUSH
22545: LD_INT 3
22547: PUSH
22548: EMPTY
22549: LIST
22550: LIST
22551: PUSH
22552: EMPTY
22553: LIST
22554: LIST
22555: PPUSH
22556: CALL_OW 69
22560: ST_TO_ADDR
// if not tmp then
22561: LD_VAR 0 2
22565: NOT
22566: IFFALSE 22570
// exit ;
22568: GO 22599
// for i in tmp do
22570: LD_ADDR_VAR 0 1
22574: PUSH
22575: LD_VAR 0 2
22579: PUSH
22580: FOR_IN
22581: IFFALSE 22597
// SetBLevel ( i , 10 ) ;
22583: LD_VAR 0 1
22587: PPUSH
22588: LD_INT 10
22590: PPUSH
22591: CALL_OW 241
22595: GO 22580
22597: POP
22598: POP
// end ;
22599: PPOPN 2
22601: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
22602: LD_EXP 39
22606: PUSH
22607: LD_EXP 56
22611: AND
22612: IFFALSE 22723
22614: GO 22616
22616: DISABLE
22617: LD_INT 0
22619: PPUSH
22620: PPUSH
22621: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22622: LD_ADDR_VAR 0 3
22626: PUSH
22627: LD_INT 22
22629: PUSH
22630: LD_OWVAR 2
22634: PUSH
22635: EMPTY
22636: LIST
22637: LIST
22638: PUSH
22639: LD_INT 25
22641: PUSH
22642: LD_INT 1
22644: PUSH
22645: EMPTY
22646: LIST
22647: LIST
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: PPUSH
22653: CALL_OW 69
22657: ST_TO_ADDR
// if not tmp then
22658: LD_VAR 0 3
22662: NOT
22663: IFFALSE 22667
// exit ;
22665: GO 22723
// un := tmp [ rand ( 1 , tmp ) ] ;
22667: LD_ADDR_VAR 0 2
22671: PUSH
22672: LD_VAR 0 3
22676: PUSH
22677: LD_INT 1
22679: PPUSH
22680: LD_VAR 0 3
22684: PPUSH
22685: CALL_OW 12
22689: ARRAY
22690: ST_TO_ADDR
// if Crawls ( un ) then
22691: LD_VAR 0 2
22695: PPUSH
22696: CALL_OW 318
22700: IFFALSE 22711
// ComWalk ( un ) ;
22702: LD_VAR 0 2
22706: PPUSH
22707: CALL_OW 138
// SetClass ( un , class_sniper ) ;
22711: LD_VAR 0 2
22715: PPUSH
22716: LD_INT 5
22718: PPUSH
22719: CALL_OW 336
// end ;
22723: PPOPN 3
22725: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
22726: LD_EXP 39
22730: PUSH
22731: LD_EXP 57
22735: AND
22736: PUSH
22737: LD_OWVAR 67
22741: PUSH
22742: LD_INT 4
22744: LESS
22745: AND
22746: IFFALSE 22765
22748: GO 22750
22750: DISABLE
// begin Difficulty := Difficulty + 1 ;
22751: LD_ADDR_OWVAR 67
22755: PUSH
22756: LD_OWVAR 67
22760: PUSH
22761: LD_INT 1
22763: PLUS
22764: ST_TO_ADDR
// end ;
22765: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
22766: LD_EXP 39
22770: PUSH
22771: LD_EXP 58
22775: AND
22776: IFFALSE 22879
22778: GO 22780
22780: DISABLE
22781: LD_INT 0
22783: PPUSH
// begin for i := 1 to 5 do
22784: LD_ADDR_VAR 0 1
22788: PUSH
22789: DOUBLE
22790: LD_INT 1
22792: DEC
22793: ST_TO_ADDR
22794: LD_INT 5
22796: PUSH
22797: FOR_TO
22798: IFFALSE 22877
// begin uc_nation := nation_nature ;
22800: LD_ADDR_OWVAR 21
22804: PUSH
22805: LD_INT 0
22807: ST_TO_ADDR
// uc_side := 0 ;
22808: LD_ADDR_OWVAR 20
22812: PUSH
22813: LD_INT 0
22815: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22816: LD_ADDR_OWVAR 29
22820: PUSH
22821: LD_INT 12
22823: PUSH
22824: LD_INT 12
22826: PUSH
22827: EMPTY
22828: LIST
22829: LIST
22830: ST_TO_ADDR
// hc_agressivity := 20 ;
22831: LD_ADDR_OWVAR 35
22835: PUSH
22836: LD_INT 20
22838: ST_TO_ADDR
// hc_class := class_tiger ;
22839: LD_ADDR_OWVAR 28
22843: PUSH
22844: LD_INT 14
22846: ST_TO_ADDR
// hc_gallery :=  ;
22847: LD_ADDR_OWVAR 33
22851: PUSH
22852: LD_STRING 
22854: ST_TO_ADDR
// hc_name :=  ;
22855: LD_ADDR_OWVAR 26
22859: PUSH
22860: LD_STRING 
22862: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
22863: CALL_OW 44
22867: PPUSH
22868: LD_INT 0
22870: PPUSH
22871: CALL_OW 51
// end ;
22875: GO 22797
22877: POP
22878: POP
// end ;
22879: PPOPN 1
22881: END
// every 0 0$1 trigger StreamModeActive and sBomb do
22882: LD_EXP 39
22886: PUSH
22887: LD_EXP 59
22891: AND
22892: IFFALSE 22901
22894: GO 22896
22896: DISABLE
// StreamSibBomb ;
22897: CALL 22902 0 0
22901: END
// export function StreamSibBomb ; var i , x , y ; begin
22902: LD_INT 0
22904: PPUSH
22905: PPUSH
22906: PPUSH
22907: PPUSH
// result := false ;
22908: LD_ADDR_VAR 0 1
22912: PUSH
22913: LD_INT 0
22915: ST_TO_ADDR
// for i := 1 to 16 do
22916: LD_ADDR_VAR 0 2
22920: PUSH
22921: DOUBLE
22922: LD_INT 1
22924: DEC
22925: ST_TO_ADDR
22926: LD_INT 16
22928: PUSH
22929: FOR_TO
22930: IFFALSE 23129
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22932: LD_ADDR_VAR 0 3
22936: PUSH
22937: LD_INT 10
22939: PUSH
22940: LD_INT 20
22942: PUSH
22943: LD_INT 30
22945: PUSH
22946: LD_INT 40
22948: PUSH
22949: LD_INT 50
22951: PUSH
22952: LD_INT 60
22954: PUSH
22955: LD_INT 70
22957: PUSH
22958: LD_INT 80
22960: PUSH
22961: LD_INT 90
22963: PUSH
22964: LD_INT 100
22966: PUSH
22967: LD_INT 110
22969: PUSH
22970: LD_INT 120
22972: PUSH
22973: LD_INT 130
22975: PUSH
22976: LD_INT 140
22978: PUSH
22979: LD_INT 150
22981: PUSH
22982: EMPTY
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: PUSH
22999: LD_INT 1
23001: PPUSH
23002: LD_INT 15
23004: PPUSH
23005: CALL_OW 12
23009: ARRAY
23010: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23011: LD_ADDR_VAR 0 4
23015: PUSH
23016: LD_INT 10
23018: PUSH
23019: LD_INT 20
23021: PUSH
23022: LD_INT 30
23024: PUSH
23025: LD_INT 40
23027: PUSH
23028: LD_INT 50
23030: PUSH
23031: LD_INT 60
23033: PUSH
23034: LD_INT 70
23036: PUSH
23037: LD_INT 80
23039: PUSH
23040: LD_INT 90
23042: PUSH
23043: LD_INT 100
23045: PUSH
23046: LD_INT 110
23048: PUSH
23049: LD_INT 120
23051: PUSH
23052: LD_INT 130
23054: PUSH
23055: LD_INT 140
23057: PUSH
23058: LD_INT 150
23060: PUSH
23061: EMPTY
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: PUSH
23078: LD_INT 1
23080: PPUSH
23081: LD_INT 15
23083: PPUSH
23084: CALL_OW 12
23088: ARRAY
23089: ST_TO_ADDR
// if ValidHex ( x , y ) then
23090: LD_VAR 0 3
23094: PPUSH
23095: LD_VAR 0 4
23099: PPUSH
23100: CALL_OW 488
23104: IFFALSE 23127
// begin result := [ x , y ] ;
23106: LD_ADDR_VAR 0 1
23110: PUSH
23111: LD_VAR 0 3
23115: PUSH
23116: LD_VAR 0 4
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: ST_TO_ADDR
// break ;
23125: GO 23129
// end ; end ;
23127: GO 22929
23129: POP
23130: POP
// if result then
23131: LD_VAR 0 1
23135: IFFALSE 23195
// begin ToLua ( playSibBomb() ) ;
23137: LD_STRING playSibBomb()
23139: PPUSH
23140: CALL_OW 559
// wait ( 0 0$14 ) ;
23144: LD_INT 490
23146: PPUSH
23147: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
23151: LD_VAR 0 1
23155: PUSH
23156: LD_INT 1
23158: ARRAY
23159: PPUSH
23160: LD_VAR 0 1
23164: PUSH
23165: LD_INT 2
23167: ARRAY
23168: PPUSH
23169: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
23173: LD_VAR 0 1
23177: PUSH
23178: LD_INT 1
23180: ARRAY
23181: PPUSH
23182: LD_VAR 0 1
23186: PUSH
23187: LD_INT 2
23189: ARRAY
23190: PPUSH
23191: CALL_OW 429
// end ; end ;
23195: LD_VAR 0 1
23199: RET
// every 0 0$1 trigger StreamModeActive and sReset do
23200: LD_EXP 39
23204: PUSH
23205: LD_EXP 61
23209: AND
23210: IFFALSE 23222
23212: GO 23214
23214: DISABLE
// YouLost (  ) ;
23215: LD_STRING 
23217: PPUSH
23218: CALL_OW 104
23222: END
// every 0 0$1 trigger StreamModeActive and sFog do
23223: LD_EXP 39
23227: PUSH
23228: LD_EXP 60
23232: AND
23233: IFFALSE 23247
23235: GO 23237
23237: DISABLE
// FogOff ( your_side ) ;
23238: LD_OWVAR 2
23242: PPUSH
23243: CALL_OW 344
23247: END
// every 0 0$1 trigger StreamModeActive and sSun do
23248: LD_EXP 39
23252: PUSH
23253: LD_EXP 62
23257: AND
23258: IFFALSE 23286
23260: GO 23262
23262: DISABLE
// begin solar_recharge_percent := 0 ;
23263: LD_ADDR_OWVAR 79
23267: PUSH
23268: LD_INT 0
23270: ST_TO_ADDR
// wait ( 5 5$00 ) ;
23271: LD_INT 10500
23273: PPUSH
23274: CALL_OW 67
// solar_recharge_percent := 100 ;
23278: LD_ADDR_OWVAR 79
23282: PUSH
23283: LD_INT 100
23285: ST_TO_ADDR
// end ;
23286: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
23287: LD_EXP 39
23291: PUSH
23292: LD_EXP 63
23296: AND
23297: IFFALSE 23536
23299: GO 23301
23301: DISABLE
23302: LD_INT 0
23304: PPUSH
23305: PPUSH
23306: PPUSH
// begin tmp := [ ] ;
23307: LD_ADDR_VAR 0 3
23311: PUSH
23312: EMPTY
23313: ST_TO_ADDR
// for i := 1 to 6 do
23314: LD_ADDR_VAR 0 1
23318: PUSH
23319: DOUBLE
23320: LD_INT 1
23322: DEC
23323: ST_TO_ADDR
23324: LD_INT 6
23326: PUSH
23327: FOR_TO
23328: IFFALSE 23433
// begin uc_nation := nation_nature ;
23330: LD_ADDR_OWVAR 21
23334: PUSH
23335: LD_INT 0
23337: ST_TO_ADDR
// uc_side := 0 ;
23338: LD_ADDR_OWVAR 20
23342: PUSH
23343: LD_INT 0
23345: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23346: LD_ADDR_OWVAR 29
23350: PUSH
23351: LD_INT 12
23353: PUSH
23354: LD_INT 12
23356: PUSH
23357: EMPTY
23358: LIST
23359: LIST
23360: ST_TO_ADDR
// hc_agressivity := 20 ;
23361: LD_ADDR_OWVAR 35
23365: PUSH
23366: LD_INT 20
23368: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
23369: LD_ADDR_OWVAR 28
23373: PUSH
23374: LD_INT 17
23376: ST_TO_ADDR
// hc_gallery :=  ;
23377: LD_ADDR_OWVAR 33
23381: PUSH
23382: LD_STRING 
23384: ST_TO_ADDR
// hc_name :=  ;
23385: LD_ADDR_OWVAR 26
23389: PUSH
23390: LD_STRING 
23392: ST_TO_ADDR
// un := CreateHuman ;
23393: LD_ADDR_VAR 0 2
23397: PUSH
23398: CALL_OW 44
23402: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
23403: LD_VAR 0 2
23407: PPUSH
23408: LD_INT 1
23410: PPUSH
23411: CALL_OW 51
// tmp := tmp ^ un ;
23415: LD_ADDR_VAR 0 3
23419: PUSH
23420: LD_VAR 0 3
23424: PUSH
23425: LD_VAR 0 2
23429: ADD
23430: ST_TO_ADDR
// end ;
23431: GO 23327
23433: POP
23434: POP
// repeat wait ( 0 0$1 ) ;
23435: LD_INT 35
23437: PPUSH
23438: CALL_OW 67
// for un in tmp do
23442: LD_ADDR_VAR 0 2
23446: PUSH
23447: LD_VAR 0 3
23451: PUSH
23452: FOR_IN
23453: IFFALSE 23527
// begin if IsDead ( un ) then
23455: LD_VAR 0 2
23459: PPUSH
23460: CALL_OW 301
23464: IFFALSE 23484
// begin tmp := tmp diff un ;
23466: LD_ADDR_VAR 0 3
23470: PUSH
23471: LD_VAR 0 3
23475: PUSH
23476: LD_VAR 0 2
23480: DIFF
23481: ST_TO_ADDR
// continue ;
23482: GO 23452
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
23484: LD_VAR 0 2
23488: PPUSH
23489: LD_INT 3
23491: PUSH
23492: LD_INT 22
23494: PUSH
23495: LD_INT 0
23497: PUSH
23498: EMPTY
23499: LIST
23500: LIST
23501: PUSH
23502: EMPTY
23503: LIST
23504: LIST
23505: PPUSH
23506: CALL_OW 69
23510: PPUSH
23511: LD_VAR 0 2
23515: PPUSH
23516: CALL_OW 74
23520: PPUSH
23521: CALL_OW 115
// end ;
23525: GO 23452
23527: POP
23528: POP
// until not tmp ;
23529: LD_VAR 0 3
23533: NOT
23534: IFFALSE 23435
// end ;
23536: PPOPN 3
23538: END
// every 0 0$1 trigger StreamModeActive and sTroll do
23539: LD_EXP 39
23543: PUSH
23544: LD_EXP 64
23548: AND
23549: IFFALSE 23603
23551: GO 23553
23553: DISABLE
// begin ToLua ( displayTroll(); ) ;
23554: LD_STRING displayTroll();
23556: PPUSH
23557: CALL_OW 559
// wait ( 3 3$00 ) ;
23561: LD_INT 6300
23563: PPUSH
23564: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23568: LD_STRING hideTroll();
23570: PPUSH
23571: CALL_OW 559
// wait ( 1 1$00 ) ;
23575: LD_INT 2100
23577: PPUSH
23578: CALL_OW 67
// ToLua ( displayTroll(); ) ;
23582: LD_STRING displayTroll();
23584: PPUSH
23585: CALL_OW 559
// wait ( 1 1$00 ) ;
23589: LD_INT 2100
23591: PPUSH
23592: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23596: LD_STRING hideTroll();
23598: PPUSH
23599: CALL_OW 559
// end ;
23603: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
23604: LD_EXP 39
23608: PUSH
23609: LD_EXP 65
23613: AND
23614: IFFALSE 23677
23616: GO 23618
23618: DISABLE
23619: LD_INT 0
23621: PPUSH
// begin p := 0 ;
23622: LD_ADDR_VAR 0 1
23626: PUSH
23627: LD_INT 0
23629: ST_TO_ADDR
// repeat game_speed := 1 ;
23630: LD_ADDR_OWVAR 65
23634: PUSH
23635: LD_INT 1
23637: ST_TO_ADDR
// wait ( 0 0$1 ) ;
23638: LD_INT 35
23640: PPUSH
23641: CALL_OW 67
// p := p + 1 ;
23645: LD_ADDR_VAR 0 1
23649: PUSH
23650: LD_VAR 0 1
23654: PUSH
23655: LD_INT 1
23657: PLUS
23658: ST_TO_ADDR
// until p >= 60 ;
23659: LD_VAR 0 1
23663: PUSH
23664: LD_INT 60
23666: GREATEREQUAL
23667: IFFALSE 23630
// game_speed := 4 ;
23669: LD_ADDR_OWVAR 65
23673: PUSH
23674: LD_INT 4
23676: ST_TO_ADDR
// end ;
23677: PPOPN 1
23679: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
23680: LD_EXP 39
23684: PUSH
23685: LD_EXP 66
23689: AND
23690: IFFALSE 23836
23692: GO 23694
23694: DISABLE
23695: LD_INT 0
23697: PPUSH
23698: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23699: LD_ADDR_VAR 0 1
23703: PUSH
23704: LD_INT 22
23706: PUSH
23707: LD_OWVAR 2
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: PUSH
23716: LD_INT 2
23718: PUSH
23719: LD_INT 30
23721: PUSH
23722: LD_INT 0
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: PUSH
23729: LD_INT 30
23731: PUSH
23732: LD_INT 1
23734: PUSH
23735: EMPTY
23736: LIST
23737: LIST
23738: PUSH
23739: EMPTY
23740: LIST
23741: LIST
23742: LIST
23743: PUSH
23744: EMPTY
23745: LIST
23746: LIST
23747: PPUSH
23748: CALL_OW 69
23752: ST_TO_ADDR
// if not depot then
23753: LD_VAR 0 1
23757: NOT
23758: IFFALSE 23762
// exit ;
23760: GO 23836
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
23762: LD_ADDR_VAR 0 2
23766: PUSH
23767: LD_VAR 0 1
23771: PUSH
23772: LD_INT 1
23774: PPUSH
23775: LD_VAR 0 1
23779: PPUSH
23780: CALL_OW 12
23784: ARRAY
23785: PPUSH
23786: CALL_OW 274
23790: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
23791: LD_VAR 0 2
23795: PPUSH
23796: LD_INT 1
23798: PPUSH
23799: LD_INT 0
23801: PPUSH
23802: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
23806: LD_VAR 0 2
23810: PPUSH
23811: LD_INT 2
23813: PPUSH
23814: LD_INT 0
23816: PPUSH
23817: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
23821: LD_VAR 0 2
23825: PPUSH
23826: LD_INT 3
23828: PPUSH
23829: LD_INT 0
23831: PPUSH
23832: CALL_OW 277
// end ;
23836: PPOPN 2
23838: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
23839: LD_EXP 39
23843: PUSH
23844: LD_EXP 67
23848: AND
23849: IFFALSE 23946
23851: GO 23853
23853: DISABLE
23854: LD_INT 0
23856: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23857: LD_ADDR_VAR 0 1
23861: PUSH
23862: LD_INT 22
23864: PUSH
23865: LD_OWVAR 2
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: PUSH
23874: LD_INT 21
23876: PUSH
23877: LD_INT 1
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: PUSH
23884: LD_INT 3
23886: PUSH
23887: LD_INT 23
23889: PUSH
23890: LD_INT 0
23892: PUSH
23893: EMPTY
23894: LIST
23895: LIST
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: PUSH
23901: EMPTY
23902: LIST
23903: LIST
23904: LIST
23905: PPUSH
23906: CALL_OW 69
23910: ST_TO_ADDR
// if not tmp then
23911: LD_VAR 0 1
23915: NOT
23916: IFFALSE 23920
// exit ;
23918: GO 23946
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
23920: LD_VAR 0 1
23924: PUSH
23925: LD_INT 1
23927: PPUSH
23928: LD_VAR 0 1
23932: PPUSH
23933: CALL_OW 12
23937: ARRAY
23938: PPUSH
23939: LD_INT 200
23941: PPUSH
23942: CALL_OW 234
// end ;
23946: PPOPN 1
23948: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
23949: LD_EXP 39
23953: PUSH
23954: LD_EXP 68
23958: AND
23959: IFFALSE 24038
23961: GO 23963
23963: DISABLE
23964: LD_INT 0
23966: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
23967: LD_ADDR_VAR 0 1
23971: PUSH
23972: LD_INT 22
23974: PUSH
23975: LD_OWVAR 2
23979: PUSH
23980: EMPTY
23981: LIST
23982: LIST
23983: PUSH
23984: LD_INT 21
23986: PUSH
23987: LD_INT 2
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: PUSH
23994: EMPTY
23995: LIST
23996: LIST
23997: PPUSH
23998: CALL_OW 69
24002: ST_TO_ADDR
// if not tmp then
24003: LD_VAR 0 1
24007: NOT
24008: IFFALSE 24012
// exit ;
24010: GO 24038
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
24012: LD_VAR 0 1
24016: PUSH
24017: LD_INT 1
24019: PPUSH
24020: LD_VAR 0 1
24024: PPUSH
24025: CALL_OW 12
24029: ARRAY
24030: PPUSH
24031: LD_INT 60
24033: PPUSH
24034: CALL_OW 234
// end ;
24038: PPOPN 1
24040: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
24041: LD_EXP 39
24045: PUSH
24046: LD_EXP 69
24050: AND
24051: IFFALSE 24150
24053: GO 24055
24055: DISABLE
24056: LD_INT 0
24058: PPUSH
24059: PPUSH
// begin enable ;
24060: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
24061: LD_ADDR_VAR 0 1
24065: PUSH
24066: LD_INT 22
24068: PUSH
24069: LD_OWVAR 2
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: PUSH
24078: LD_INT 61
24080: PUSH
24081: EMPTY
24082: LIST
24083: PUSH
24084: LD_INT 33
24086: PUSH
24087: LD_INT 2
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: LIST
24098: PPUSH
24099: CALL_OW 69
24103: ST_TO_ADDR
// if not tmp then
24104: LD_VAR 0 1
24108: NOT
24109: IFFALSE 24113
// exit ;
24111: GO 24150
// for i in tmp do
24113: LD_ADDR_VAR 0 2
24117: PUSH
24118: LD_VAR 0 1
24122: PUSH
24123: FOR_IN
24124: IFFALSE 24148
// if IsControledBy ( i ) then
24126: LD_VAR 0 2
24130: PPUSH
24131: CALL_OW 312
24135: IFFALSE 24146
// ComUnlink ( i ) ;
24137: LD_VAR 0 2
24141: PPUSH
24142: CALL_OW 136
24146: GO 24123
24148: POP
24149: POP
// end ;
24150: PPOPN 2
24152: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
24153: LD_EXP 39
24157: PUSH
24158: LD_EXP 70
24162: AND
24163: IFFALSE 24303
24165: GO 24167
24167: DISABLE
24168: LD_INT 0
24170: PPUSH
24171: PPUSH
// begin ToLua ( displayPowell(); ) ;
24172: LD_STRING displayPowell();
24174: PPUSH
24175: CALL_OW 559
// uc_side := 0 ;
24179: LD_ADDR_OWVAR 20
24183: PUSH
24184: LD_INT 0
24186: ST_TO_ADDR
// uc_nation := 2 ;
24187: LD_ADDR_OWVAR 21
24191: PUSH
24192: LD_INT 2
24194: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
24195: LD_ADDR_OWVAR 37
24199: PUSH
24200: LD_INT 14
24202: ST_TO_ADDR
// vc_engine := engine_siberite ;
24203: LD_ADDR_OWVAR 39
24207: PUSH
24208: LD_INT 3
24210: ST_TO_ADDR
// vc_control := control_apeman ;
24211: LD_ADDR_OWVAR 38
24215: PUSH
24216: LD_INT 5
24218: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
24219: LD_ADDR_OWVAR 40
24223: PUSH
24224: LD_INT 29
24226: ST_TO_ADDR
// un := CreateVehicle ;
24227: LD_ADDR_VAR 0 2
24231: PUSH
24232: CALL_OW 45
24236: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24237: LD_VAR 0 2
24241: PPUSH
24242: LD_INT 1
24244: PPUSH
24245: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24249: LD_INT 35
24251: PPUSH
24252: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24256: LD_VAR 0 2
24260: PPUSH
24261: LD_INT 22
24263: PUSH
24264: LD_OWVAR 2
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: PPUSH
24273: CALL_OW 69
24277: PPUSH
24278: LD_VAR 0 2
24282: PPUSH
24283: CALL_OW 74
24287: PPUSH
24288: CALL_OW 115
// until IsDead ( un ) ;
24292: LD_VAR 0 2
24296: PPUSH
24297: CALL_OW 301
24301: IFFALSE 24249
// end ;
24303: PPOPN 2
24305: END
// every 0 0$1 trigger StreamModeActive and sStu do
24306: LD_EXP 39
24310: PUSH
24311: LD_EXP 78
24315: AND
24316: IFFALSE 24332
24318: GO 24320
24320: DISABLE
// begin ToLua ( displayStucuk(); ) ;
24321: LD_STRING displayStucuk();
24323: PPUSH
24324: CALL_OW 559
// ResetFog ;
24328: CALL_OW 335
// end ;
24332: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
24333: LD_EXP 39
24337: PUSH
24338: LD_EXP 71
24342: AND
24343: IFFALSE 24484
24345: GO 24347
24347: DISABLE
24348: LD_INT 0
24350: PPUSH
24351: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24352: LD_ADDR_VAR 0 2
24356: PUSH
24357: LD_INT 22
24359: PUSH
24360: LD_OWVAR 2
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: PUSH
24369: LD_INT 21
24371: PUSH
24372: LD_INT 1
24374: PUSH
24375: EMPTY
24376: LIST
24377: LIST
24378: PUSH
24379: EMPTY
24380: LIST
24381: LIST
24382: PPUSH
24383: CALL_OW 69
24387: ST_TO_ADDR
// if not tmp then
24388: LD_VAR 0 2
24392: NOT
24393: IFFALSE 24397
// exit ;
24395: GO 24484
// un := tmp [ rand ( 1 , tmp ) ] ;
24397: LD_ADDR_VAR 0 1
24401: PUSH
24402: LD_VAR 0 2
24406: PUSH
24407: LD_INT 1
24409: PPUSH
24410: LD_VAR 0 2
24414: PPUSH
24415: CALL_OW 12
24419: ARRAY
24420: ST_TO_ADDR
// SetSide ( un , 0 ) ;
24421: LD_VAR 0 1
24425: PPUSH
24426: LD_INT 0
24428: PPUSH
24429: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
24433: LD_VAR 0 1
24437: PPUSH
24438: LD_OWVAR 3
24442: PUSH
24443: LD_VAR 0 1
24447: DIFF
24448: PPUSH
24449: LD_VAR 0 1
24453: PPUSH
24454: CALL_OW 74
24458: PPUSH
24459: CALL_OW 115
// wait ( 0 0$20 ) ;
24463: LD_INT 700
24465: PPUSH
24466: CALL_OW 67
// SetSide ( un , your_side ) ;
24470: LD_VAR 0 1
24474: PPUSH
24475: LD_OWVAR 2
24479: PPUSH
24480: CALL_OW 235
// end ;
24484: PPOPN 2
24486: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
24487: LD_EXP 39
24491: PUSH
24492: LD_EXP 72
24496: AND
24497: IFFALSE 24603
24499: GO 24501
24501: DISABLE
24502: LD_INT 0
24504: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24505: LD_ADDR_VAR 0 1
24509: PUSH
24510: LD_INT 22
24512: PUSH
24513: LD_OWVAR 2
24517: PUSH
24518: EMPTY
24519: LIST
24520: LIST
24521: PUSH
24522: LD_INT 2
24524: PUSH
24525: LD_INT 30
24527: PUSH
24528: LD_INT 0
24530: PUSH
24531: EMPTY
24532: LIST
24533: LIST
24534: PUSH
24535: LD_INT 30
24537: PUSH
24538: LD_INT 1
24540: PUSH
24541: EMPTY
24542: LIST
24543: LIST
24544: PUSH
24545: EMPTY
24546: LIST
24547: LIST
24548: LIST
24549: PUSH
24550: EMPTY
24551: LIST
24552: LIST
24553: PPUSH
24554: CALL_OW 69
24558: ST_TO_ADDR
// if not depot then
24559: LD_VAR 0 1
24563: NOT
24564: IFFALSE 24568
// exit ;
24566: GO 24603
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
24568: LD_VAR 0 1
24572: PUSH
24573: LD_INT 1
24575: ARRAY
24576: PPUSH
24577: CALL_OW 250
24581: PPUSH
24582: LD_VAR 0 1
24586: PUSH
24587: LD_INT 1
24589: ARRAY
24590: PPUSH
24591: CALL_OW 251
24595: PPUSH
24596: LD_INT 70
24598: PPUSH
24599: CALL_OW 495
// end ;
24603: PPOPN 1
24605: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
24606: LD_EXP 39
24610: PUSH
24611: LD_EXP 73
24615: AND
24616: IFFALSE 24827
24618: GO 24620
24620: DISABLE
24621: LD_INT 0
24623: PPUSH
24624: PPUSH
24625: PPUSH
24626: PPUSH
24627: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24628: LD_ADDR_VAR 0 5
24632: PUSH
24633: LD_INT 22
24635: PUSH
24636: LD_OWVAR 2
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: PUSH
24645: LD_INT 21
24647: PUSH
24648: LD_INT 1
24650: PUSH
24651: EMPTY
24652: LIST
24653: LIST
24654: PUSH
24655: EMPTY
24656: LIST
24657: LIST
24658: PPUSH
24659: CALL_OW 69
24663: ST_TO_ADDR
// if not tmp then
24664: LD_VAR 0 5
24668: NOT
24669: IFFALSE 24673
// exit ;
24671: GO 24827
// for i in tmp do
24673: LD_ADDR_VAR 0 1
24677: PUSH
24678: LD_VAR 0 5
24682: PUSH
24683: FOR_IN
24684: IFFALSE 24825
// begin d := rand ( 0 , 5 ) ;
24686: LD_ADDR_VAR 0 4
24690: PUSH
24691: LD_INT 0
24693: PPUSH
24694: LD_INT 5
24696: PPUSH
24697: CALL_OW 12
24701: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
24702: LD_ADDR_VAR 0 2
24706: PUSH
24707: LD_VAR 0 1
24711: PPUSH
24712: CALL_OW 250
24716: PPUSH
24717: LD_VAR 0 4
24721: PPUSH
24722: LD_INT 3
24724: PPUSH
24725: LD_INT 12
24727: PPUSH
24728: CALL_OW 12
24732: PPUSH
24733: CALL_OW 272
24737: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
24738: LD_ADDR_VAR 0 3
24742: PUSH
24743: LD_VAR 0 1
24747: PPUSH
24748: CALL_OW 251
24752: PPUSH
24753: LD_VAR 0 4
24757: PPUSH
24758: LD_INT 3
24760: PPUSH
24761: LD_INT 12
24763: PPUSH
24764: CALL_OW 12
24768: PPUSH
24769: CALL_OW 273
24773: ST_TO_ADDR
// if ValidHex ( x , y ) then
24774: LD_VAR 0 2
24778: PPUSH
24779: LD_VAR 0 3
24783: PPUSH
24784: CALL_OW 488
24788: IFFALSE 24823
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
24790: LD_VAR 0 1
24794: PPUSH
24795: LD_VAR 0 2
24799: PPUSH
24800: LD_VAR 0 3
24804: PPUSH
24805: LD_INT 3
24807: PPUSH
24808: LD_INT 6
24810: PPUSH
24811: CALL_OW 12
24815: PPUSH
24816: LD_INT 1
24818: PPUSH
24819: CALL_OW 483
// end ;
24823: GO 24683
24825: POP
24826: POP
// end ;
24827: PPOPN 5
24829: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
24830: LD_EXP 39
24834: PUSH
24835: LD_EXP 74
24839: AND
24840: IFFALSE 24934
24842: GO 24844
24844: DISABLE
24845: LD_INT 0
24847: PPUSH
24848: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
24849: LD_ADDR_VAR 0 2
24853: PUSH
24854: LD_INT 22
24856: PUSH
24857: LD_OWVAR 2
24861: PUSH
24862: EMPTY
24863: LIST
24864: LIST
24865: PUSH
24866: LD_INT 32
24868: PUSH
24869: LD_INT 1
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: PUSH
24876: LD_INT 21
24878: PUSH
24879: LD_INT 2
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: LIST
24890: PPUSH
24891: CALL_OW 69
24895: ST_TO_ADDR
// if not tmp then
24896: LD_VAR 0 2
24900: NOT
24901: IFFALSE 24905
// exit ;
24903: GO 24934
// for i in tmp do
24905: LD_ADDR_VAR 0 1
24909: PUSH
24910: LD_VAR 0 2
24914: PUSH
24915: FOR_IN
24916: IFFALSE 24932
// SetFuel ( i , 0 ) ;
24918: LD_VAR 0 1
24922: PPUSH
24923: LD_INT 0
24925: PPUSH
24926: CALL_OW 240
24930: GO 24915
24932: POP
24933: POP
// end ;
24934: PPOPN 2
24936: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
24937: LD_EXP 39
24941: PUSH
24942: LD_EXP 75
24946: AND
24947: IFFALSE 25013
24949: GO 24951
24951: DISABLE
24952: LD_INT 0
24954: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24955: LD_ADDR_VAR 0 1
24959: PUSH
24960: LD_INT 22
24962: PUSH
24963: LD_OWVAR 2
24967: PUSH
24968: EMPTY
24969: LIST
24970: LIST
24971: PUSH
24972: LD_INT 30
24974: PUSH
24975: LD_INT 29
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: PUSH
24982: EMPTY
24983: LIST
24984: LIST
24985: PPUSH
24986: CALL_OW 69
24990: ST_TO_ADDR
// if not tmp then
24991: LD_VAR 0 1
24995: NOT
24996: IFFALSE 25000
// exit ;
24998: GO 25013
// DestroyUnit ( tmp [ 1 ] ) ;
25000: LD_VAR 0 1
25004: PUSH
25005: LD_INT 1
25007: ARRAY
25008: PPUSH
25009: CALL_OW 65
// end ;
25013: PPOPN 1
25015: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
25016: LD_EXP 39
25020: PUSH
25021: LD_EXP 77
25025: AND
25026: IFFALSE 25155
25028: GO 25030
25030: DISABLE
25031: LD_INT 0
25033: PPUSH
// begin uc_side := 0 ;
25034: LD_ADDR_OWVAR 20
25038: PUSH
25039: LD_INT 0
25041: ST_TO_ADDR
// uc_nation := nation_arabian ;
25042: LD_ADDR_OWVAR 21
25046: PUSH
25047: LD_INT 2
25049: ST_TO_ADDR
// hc_gallery :=  ;
25050: LD_ADDR_OWVAR 33
25054: PUSH
25055: LD_STRING 
25057: ST_TO_ADDR
// hc_name :=  ;
25058: LD_ADDR_OWVAR 26
25062: PUSH
25063: LD_STRING 
25065: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
25066: LD_INT 1
25068: PPUSH
25069: LD_INT 11
25071: PPUSH
25072: LD_INT 10
25074: PPUSH
25075: CALL_OW 380
// un := CreateHuman ;
25079: LD_ADDR_VAR 0 1
25083: PUSH
25084: CALL_OW 44
25088: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25089: LD_VAR 0 1
25093: PPUSH
25094: LD_INT 1
25096: PPUSH
25097: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25101: LD_INT 35
25103: PPUSH
25104: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25108: LD_VAR 0 1
25112: PPUSH
25113: LD_INT 22
25115: PUSH
25116: LD_OWVAR 2
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: PPUSH
25125: CALL_OW 69
25129: PPUSH
25130: LD_VAR 0 1
25134: PPUSH
25135: CALL_OW 74
25139: PPUSH
25140: CALL_OW 115
// until IsDead ( un ) ;
25144: LD_VAR 0 1
25148: PPUSH
25149: CALL_OW 301
25153: IFFALSE 25101
// end ;
25155: PPOPN 1
25157: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
25158: LD_EXP 39
25162: PUSH
25163: LD_EXP 79
25167: AND
25168: IFFALSE 25180
25170: GO 25172
25172: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
25173: LD_STRING earthquake(getX(game), 0, 32)
25175: PPUSH
25176: CALL_OW 559
25180: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
25181: LD_EXP 39
25185: PUSH
25186: LD_EXP 80
25190: AND
25191: IFFALSE 25282
25193: GO 25195
25195: DISABLE
25196: LD_INT 0
25198: PPUSH
// begin enable ;
25199: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
25200: LD_ADDR_VAR 0 1
25204: PUSH
25205: LD_INT 22
25207: PUSH
25208: LD_OWVAR 2
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: PUSH
25217: LD_INT 21
25219: PUSH
25220: LD_INT 2
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PUSH
25227: LD_INT 33
25229: PUSH
25230: LD_INT 3
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: PUSH
25237: EMPTY
25238: LIST
25239: LIST
25240: LIST
25241: PPUSH
25242: CALL_OW 69
25246: ST_TO_ADDR
// if not tmp then
25247: LD_VAR 0 1
25251: NOT
25252: IFFALSE 25256
// exit ;
25254: GO 25282
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25256: LD_VAR 0 1
25260: PUSH
25261: LD_INT 1
25263: PPUSH
25264: LD_VAR 0 1
25268: PPUSH
25269: CALL_OW 12
25273: ARRAY
25274: PPUSH
25275: LD_INT 1
25277: PPUSH
25278: CALL_OW 234
// end ;
25282: PPOPN 1
25284: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
25285: LD_EXP 39
25289: PUSH
25290: LD_EXP 81
25294: AND
25295: IFFALSE 25436
25297: GO 25299
25299: DISABLE
25300: LD_INT 0
25302: PPUSH
25303: PPUSH
25304: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25305: LD_ADDR_VAR 0 3
25309: PUSH
25310: LD_INT 22
25312: PUSH
25313: LD_OWVAR 2
25317: PUSH
25318: EMPTY
25319: LIST
25320: LIST
25321: PUSH
25322: LD_INT 25
25324: PUSH
25325: LD_INT 1
25327: PUSH
25328: EMPTY
25329: LIST
25330: LIST
25331: PUSH
25332: EMPTY
25333: LIST
25334: LIST
25335: PPUSH
25336: CALL_OW 69
25340: ST_TO_ADDR
// if not tmp then
25341: LD_VAR 0 3
25345: NOT
25346: IFFALSE 25350
// exit ;
25348: GO 25436
// un := tmp [ rand ( 1 , tmp ) ] ;
25350: LD_ADDR_VAR 0 2
25354: PUSH
25355: LD_VAR 0 3
25359: PUSH
25360: LD_INT 1
25362: PPUSH
25363: LD_VAR 0 3
25367: PPUSH
25368: CALL_OW 12
25372: ARRAY
25373: ST_TO_ADDR
// if Crawls ( un ) then
25374: LD_VAR 0 2
25378: PPUSH
25379: CALL_OW 318
25383: IFFALSE 25394
// ComWalk ( un ) ;
25385: LD_VAR 0 2
25389: PPUSH
25390: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
25394: LD_VAR 0 2
25398: PPUSH
25399: LD_INT 9
25401: PPUSH
25402: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
25406: LD_INT 28
25408: PPUSH
25409: LD_OWVAR 2
25413: PPUSH
25414: LD_INT 2
25416: PPUSH
25417: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
25421: LD_INT 29
25423: PPUSH
25424: LD_OWVAR 2
25428: PPUSH
25429: LD_INT 2
25431: PPUSH
25432: CALL_OW 322
// end ;
25436: PPOPN 3
25438: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
25439: LD_EXP 39
25443: PUSH
25444: LD_EXP 82
25448: AND
25449: IFFALSE 25560
25451: GO 25453
25453: DISABLE
25454: LD_INT 0
25456: PPUSH
25457: PPUSH
25458: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25459: LD_ADDR_VAR 0 3
25463: PUSH
25464: LD_INT 22
25466: PUSH
25467: LD_OWVAR 2
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: PUSH
25476: LD_INT 25
25478: PUSH
25479: LD_INT 1
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: PUSH
25486: EMPTY
25487: LIST
25488: LIST
25489: PPUSH
25490: CALL_OW 69
25494: ST_TO_ADDR
// if not tmp then
25495: LD_VAR 0 3
25499: NOT
25500: IFFALSE 25504
// exit ;
25502: GO 25560
// un := tmp [ rand ( 1 , tmp ) ] ;
25504: LD_ADDR_VAR 0 2
25508: PUSH
25509: LD_VAR 0 3
25513: PUSH
25514: LD_INT 1
25516: PPUSH
25517: LD_VAR 0 3
25521: PPUSH
25522: CALL_OW 12
25526: ARRAY
25527: ST_TO_ADDR
// if Crawls ( un ) then
25528: LD_VAR 0 2
25532: PPUSH
25533: CALL_OW 318
25537: IFFALSE 25548
// ComWalk ( un ) ;
25539: LD_VAR 0 2
25543: PPUSH
25544: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25548: LD_VAR 0 2
25552: PPUSH
25553: LD_INT 8
25555: PPUSH
25556: CALL_OW 336
// end ;
25560: PPOPN 3
25562: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
25563: LD_EXP 39
25567: PUSH
25568: LD_EXP 83
25572: AND
25573: IFFALSE 25717
25575: GO 25577
25577: DISABLE
25578: LD_INT 0
25580: PPUSH
25581: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
25582: LD_ADDR_VAR 0 2
25586: PUSH
25587: LD_INT 22
25589: PUSH
25590: LD_OWVAR 2
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: PUSH
25599: LD_INT 21
25601: PUSH
25602: LD_INT 2
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: PUSH
25609: LD_INT 2
25611: PUSH
25612: LD_INT 34
25614: PUSH
25615: LD_INT 12
25617: PUSH
25618: EMPTY
25619: LIST
25620: LIST
25621: PUSH
25622: LD_INT 34
25624: PUSH
25625: LD_INT 51
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: PUSH
25632: LD_INT 34
25634: PUSH
25635: LD_INT 32
25637: PUSH
25638: EMPTY
25639: LIST
25640: LIST
25641: PUSH
25642: EMPTY
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: LIST
25652: PPUSH
25653: CALL_OW 69
25657: ST_TO_ADDR
// if not tmp then
25658: LD_VAR 0 2
25662: NOT
25663: IFFALSE 25667
// exit ;
25665: GO 25717
// for i in tmp do
25667: LD_ADDR_VAR 0 1
25671: PUSH
25672: LD_VAR 0 2
25676: PUSH
25677: FOR_IN
25678: IFFALSE 25715
// if GetCargo ( i , mat_artifact ) = 0 then
25680: LD_VAR 0 1
25684: PPUSH
25685: LD_INT 4
25687: PPUSH
25688: CALL_OW 289
25692: PUSH
25693: LD_INT 0
25695: EQUAL
25696: IFFALSE 25713
// SetCargo ( i , mat_siberit , 100 ) ;
25698: LD_VAR 0 1
25702: PPUSH
25703: LD_INT 3
25705: PPUSH
25706: LD_INT 100
25708: PPUSH
25709: CALL_OW 290
25713: GO 25677
25715: POP
25716: POP
// end ;
25717: PPOPN 2
25719: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
25720: LD_EXP 39
25724: PUSH
25725: LD_EXP 84
25729: AND
25730: IFFALSE 25913
25732: GO 25734
25734: DISABLE
25735: LD_INT 0
25737: PPUSH
25738: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25739: LD_ADDR_VAR 0 2
25743: PUSH
25744: LD_INT 22
25746: PUSH
25747: LD_OWVAR 2
25751: PUSH
25752: EMPTY
25753: LIST
25754: LIST
25755: PPUSH
25756: CALL_OW 69
25760: ST_TO_ADDR
// if not tmp then
25761: LD_VAR 0 2
25765: NOT
25766: IFFALSE 25770
// exit ;
25768: GO 25913
// for i := 1 to 2 do
25770: LD_ADDR_VAR 0 1
25774: PUSH
25775: DOUBLE
25776: LD_INT 1
25778: DEC
25779: ST_TO_ADDR
25780: LD_INT 2
25782: PUSH
25783: FOR_TO
25784: IFFALSE 25911
// begin uc_side := your_side ;
25786: LD_ADDR_OWVAR 20
25790: PUSH
25791: LD_OWVAR 2
25795: ST_TO_ADDR
// uc_nation := nation_american ;
25796: LD_ADDR_OWVAR 21
25800: PUSH
25801: LD_INT 1
25803: ST_TO_ADDR
// vc_chassis := us_morphling ;
25804: LD_ADDR_OWVAR 37
25808: PUSH
25809: LD_INT 5
25811: ST_TO_ADDR
// vc_engine := engine_siberite ;
25812: LD_ADDR_OWVAR 39
25816: PUSH
25817: LD_INT 3
25819: ST_TO_ADDR
// vc_control := control_computer ;
25820: LD_ADDR_OWVAR 38
25824: PUSH
25825: LD_INT 3
25827: ST_TO_ADDR
// vc_weapon := us_double_laser ;
25828: LD_ADDR_OWVAR 40
25832: PUSH
25833: LD_INT 10
25835: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
25836: LD_VAR 0 2
25840: PUSH
25841: LD_INT 1
25843: ARRAY
25844: PPUSH
25845: CALL_OW 310
25849: NOT
25850: IFFALSE 25897
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
25852: CALL_OW 45
25856: PPUSH
25857: LD_VAR 0 2
25861: PUSH
25862: LD_INT 1
25864: ARRAY
25865: PPUSH
25866: CALL_OW 250
25870: PPUSH
25871: LD_VAR 0 2
25875: PUSH
25876: LD_INT 1
25878: ARRAY
25879: PPUSH
25880: CALL_OW 251
25884: PPUSH
25885: LD_INT 12
25887: PPUSH
25888: LD_INT 1
25890: PPUSH
25891: CALL_OW 50
25895: GO 25909
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
25897: CALL_OW 45
25901: PPUSH
25902: LD_INT 1
25904: PPUSH
25905: CALL_OW 51
// end ;
25909: GO 25783
25911: POP
25912: POP
// end ;
25913: PPOPN 2
25915: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
25916: LD_EXP 39
25920: PUSH
25921: LD_EXP 85
25925: AND
25926: IFFALSE 26148
25928: GO 25930
25930: DISABLE
25931: LD_INT 0
25933: PPUSH
25934: PPUSH
25935: PPUSH
25936: PPUSH
25937: PPUSH
25938: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25939: LD_ADDR_VAR 0 6
25943: PUSH
25944: LD_INT 22
25946: PUSH
25947: LD_OWVAR 2
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: PUSH
25956: LD_INT 21
25958: PUSH
25959: LD_INT 1
25961: PUSH
25962: EMPTY
25963: LIST
25964: LIST
25965: PUSH
25966: LD_INT 3
25968: PUSH
25969: LD_INT 23
25971: PUSH
25972: LD_INT 0
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: PUSH
25979: EMPTY
25980: LIST
25981: LIST
25982: PUSH
25983: EMPTY
25984: LIST
25985: LIST
25986: LIST
25987: PPUSH
25988: CALL_OW 69
25992: ST_TO_ADDR
// if not tmp then
25993: LD_VAR 0 6
25997: NOT
25998: IFFALSE 26002
// exit ;
26000: GO 26148
// s1 := rand ( 1 , 4 ) ;
26002: LD_ADDR_VAR 0 2
26006: PUSH
26007: LD_INT 1
26009: PPUSH
26010: LD_INT 4
26012: PPUSH
26013: CALL_OW 12
26017: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
26018: LD_ADDR_VAR 0 4
26022: PUSH
26023: LD_VAR 0 6
26027: PUSH
26028: LD_INT 1
26030: ARRAY
26031: PPUSH
26032: LD_VAR 0 2
26036: PPUSH
26037: CALL_OW 259
26041: ST_TO_ADDR
// if s1 = 1 then
26042: LD_VAR 0 2
26046: PUSH
26047: LD_INT 1
26049: EQUAL
26050: IFFALSE 26070
// s2 := rand ( 2 , 4 ) else
26052: LD_ADDR_VAR 0 3
26056: PUSH
26057: LD_INT 2
26059: PPUSH
26060: LD_INT 4
26062: PPUSH
26063: CALL_OW 12
26067: ST_TO_ADDR
26068: GO 26078
// s2 := 1 ;
26070: LD_ADDR_VAR 0 3
26074: PUSH
26075: LD_INT 1
26077: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
26078: LD_ADDR_VAR 0 5
26082: PUSH
26083: LD_VAR 0 6
26087: PUSH
26088: LD_INT 1
26090: ARRAY
26091: PPUSH
26092: LD_VAR 0 3
26096: PPUSH
26097: CALL_OW 259
26101: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
26102: LD_VAR 0 6
26106: PUSH
26107: LD_INT 1
26109: ARRAY
26110: PPUSH
26111: LD_VAR 0 2
26115: PPUSH
26116: LD_VAR 0 5
26120: PPUSH
26121: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
26125: LD_VAR 0 6
26129: PUSH
26130: LD_INT 1
26132: ARRAY
26133: PPUSH
26134: LD_VAR 0 3
26138: PPUSH
26139: LD_VAR 0 4
26143: PPUSH
26144: CALL_OW 237
// end ;
26148: PPOPN 6
26150: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
26151: LD_EXP 39
26155: PUSH
26156: LD_EXP 86
26160: AND
26161: IFFALSE 26240
26163: GO 26165
26165: DISABLE
26166: LD_INT 0
26168: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
26169: LD_ADDR_VAR 0 1
26173: PUSH
26174: LD_INT 22
26176: PUSH
26177: LD_OWVAR 2
26181: PUSH
26182: EMPTY
26183: LIST
26184: LIST
26185: PUSH
26186: LD_INT 30
26188: PUSH
26189: LD_INT 3
26191: PUSH
26192: EMPTY
26193: LIST
26194: LIST
26195: PUSH
26196: EMPTY
26197: LIST
26198: LIST
26199: PPUSH
26200: CALL_OW 69
26204: ST_TO_ADDR
// if not tmp then
26205: LD_VAR 0 1
26209: NOT
26210: IFFALSE 26214
// exit ;
26212: GO 26240
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26214: LD_VAR 0 1
26218: PUSH
26219: LD_INT 1
26221: PPUSH
26222: LD_VAR 0 1
26226: PPUSH
26227: CALL_OW 12
26231: ARRAY
26232: PPUSH
26233: LD_INT 1
26235: PPUSH
26236: CALL_OW 234
// end ;
26240: PPOPN 1
26242: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
26243: LD_EXP 39
26247: PUSH
26248: LD_EXP 87
26252: AND
26253: IFFALSE 26365
26255: GO 26257
26257: DISABLE
26258: LD_INT 0
26260: PPUSH
26261: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
26262: LD_ADDR_VAR 0 2
26266: PUSH
26267: LD_INT 22
26269: PUSH
26270: LD_OWVAR 2
26274: PUSH
26275: EMPTY
26276: LIST
26277: LIST
26278: PUSH
26279: LD_INT 2
26281: PUSH
26282: LD_INT 30
26284: PUSH
26285: LD_INT 27
26287: PUSH
26288: EMPTY
26289: LIST
26290: LIST
26291: PUSH
26292: LD_INT 30
26294: PUSH
26295: LD_INT 26
26297: PUSH
26298: EMPTY
26299: LIST
26300: LIST
26301: PUSH
26302: LD_INT 30
26304: PUSH
26305: LD_INT 28
26307: PUSH
26308: EMPTY
26309: LIST
26310: LIST
26311: PUSH
26312: EMPTY
26313: LIST
26314: LIST
26315: LIST
26316: LIST
26317: PUSH
26318: EMPTY
26319: LIST
26320: LIST
26321: PPUSH
26322: CALL_OW 69
26326: ST_TO_ADDR
// if not tmp then
26327: LD_VAR 0 2
26331: NOT
26332: IFFALSE 26336
// exit ;
26334: GO 26365
// for i in tmp do
26336: LD_ADDR_VAR 0 1
26340: PUSH
26341: LD_VAR 0 2
26345: PUSH
26346: FOR_IN
26347: IFFALSE 26363
// SetLives ( i , 1 ) ;
26349: LD_VAR 0 1
26353: PPUSH
26354: LD_INT 1
26356: PPUSH
26357: CALL_OW 234
26361: GO 26346
26363: POP
26364: POP
// end ;
26365: PPOPN 2
26367: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
26368: LD_EXP 39
26372: PUSH
26373: LD_EXP 88
26377: AND
26378: IFFALSE 26665
26380: GO 26382
26382: DISABLE
26383: LD_INT 0
26385: PPUSH
26386: PPUSH
26387: PPUSH
// begin i := rand ( 1 , 7 ) ;
26388: LD_ADDR_VAR 0 1
26392: PUSH
26393: LD_INT 1
26395: PPUSH
26396: LD_INT 7
26398: PPUSH
26399: CALL_OW 12
26403: ST_TO_ADDR
// case i of 1 :
26404: LD_VAR 0 1
26408: PUSH
26409: LD_INT 1
26411: DOUBLE
26412: EQUAL
26413: IFTRUE 26417
26415: GO 26427
26417: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
26418: LD_STRING earthquake(getX(game), 0, 32)
26420: PPUSH
26421: CALL_OW 559
26425: GO 26665
26427: LD_INT 2
26429: DOUBLE
26430: EQUAL
26431: IFTRUE 26435
26433: GO 26449
26435: POP
// begin ToLua ( displayStucuk(); ) ;
26436: LD_STRING displayStucuk();
26438: PPUSH
26439: CALL_OW 559
// ResetFog ;
26443: CALL_OW 335
// end ; 3 :
26447: GO 26665
26449: LD_INT 3
26451: DOUBLE
26452: EQUAL
26453: IFTRUE 26457
26455: GO 26561
26457: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26458: LD_ADDR_VAR 0 2
26462: PUSH
26463: LD_INT 22
26465: PUSH
26466: LD_OWVAR 2
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PUSH
26475: LD_INT 25
26477: PUSH
26478: LD_INT 1
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: PPUSH
26489: CALL_OW 69
26493: ST_TO_ADDR
// if not tmp then
26494: LD_VAR 0 2
26498: NOT
26499: IFFALSE 26503
// exit ;
26501: GO 26665
// un := tmp [ rand ( 1 , tmp ) ] ;
26503: LD_ADDR_VAR 0 3
26507: PUSH
26508: LD_VAR 0 2
26512: PUSH
26513: LD_INT 1
26515: PPUSH
26516: LD_VAR 0 2
26520: PPUSH
26521: CALL_OW 12
26525: ARRAY
26526: ST_TO_ADDR
// if Crawls ( un ) then
26527: LD_VAR 0 3
26531: PPUSH
26532: CALL_OW 318
26536: IFFALSE 26547
// ComWalk ( un ) ;
26538: LD_VAR 0 3
26542: PPUSH
26543: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26547: LD_VAR 0 3
26551: PPUSH
26552: LD_INT 8
26554: PPUSH
26555: CALL_OW 336
// end ; 4 :
26559: GO 26665
26561: LD_INT 4
26563: DOUBLE
26564: EQUAL
26565: IFTRUE 26569
26567: GO 26643
26569: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26570: LD_ADDR_VAR 0 2
26574: PUSH
26575: LD_INT 22
26577: PUSH
26578: LD_OWVAR 2
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: PUSH
26587: LD_INT 30
26589: PUSH
26590: LD_INT 29
26592: PUSH
26593: EMPTY
26594: LIST
26595: LIST
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PPUSH
26601: CALL_OW 69
26605: ST_TO_ADDR
// if not tmp then
26606: LD_VAR 0 2
26610: NOT
26611: IFFALSE 26615
// exit ;
26613: GO 26665
// CenterNowOnUnits ( tmp [ 1 ] ) ;
26615: LD_VAR 0 2
26619: PUSH
26620: LD_INT 1
26622: ARRAY
26623: PPUSH
26624: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
26628: LD_VAR 0 2
26632: PUSH
26633: LD_INT 1
26635: ARRAY
26636: PPUSH
26637: CALL_OW 65
// end ; 5 .. 7 :
26641: GO 26665
26643: LD_INT 5
26645: DOUBLE
26646: GREATEREQUAL
26647: IFFALSE 26655
26649: LD_INT 7
26651: DOUBLE
26652: LESSEQUAL
26653: IFTRUE 26657
26655: GO 26664
26657: POP
// StreamSibBomb ; end ;
26658: CALL 22902 0 0
26662: GO 26665
26664: POP
// end ;
26665: PPOPN 3
26667: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
26668: LD_EXP 39
26672: PUSH
26673: LD_EXP 89
26677: AND
26678: IFFALSE 26834
26680: GO 26682
26682: DISABLE
26683: LD_INT 0
26685: PPUSH
26686: PPUSH
26687: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
26688: LD_ADDR_VAR 0 2
26692: PUSH
26693: LD_INT 81
26695: PUSH
26696: LD_OWVAR 2
26700: PUSH
26701: EMPTY
26702: LIST
26703: LIST
26704: PUSH
26705: LD_INT 2
26707: PUSH
26708: LD_INT 21
26710: PUSH
26711: LD_INT 1
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: PUSH
26718: LD_INT 21
26720: PUSH
26721: LD_INT 2
26723: PUSH
26724: EMPTY
26725: LIST
26726: LIST
26727: PUSH
26728: EMPTY
26729: LIST
26730: LIST
26731: LIST
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: PPUSH
26737: CALL_OW 69
26741: ST_TO_ADDR
// if not tmp then
26742: LD_VAR 0 2
26746: NOT
26747: IFFALSE 26751
// exit ;
26749: GO 26834
// p := 0 ;
26751: LD_ADDR_VAR 0 3
26755: PUSH
26756: LD_INT 0
26758: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26759: LD_INT 35
26761: PPUSH
26762: CALL_OW 67
// p := p + 1 ;
26766: LD_ADDR_VAR 0 3
26770: PUSH
26771: LD_VAR 0 3
26775: PUSH
26776: LD_INT 1
26778: PLUS
26779: ST_TO_ADDR
// for i in tmp do
26780: LD_ADDR_VAR 0 1
26784: PUSH
26785: LD_VAR 0 2
26789: PUSH
26790: FOR_IN
26791: IFFALSE 26822
// if GetLives ( i ) < 1000 then
26793: LD_VAR 0 1
26797: PPUSH
26798: CALL_OW 256
26802: PUSH
26803: LD_INT 1000
26805: LESS
26806: IFFALSE 26820
// SetLives ( i , 1000 ) ;
26808: LD_VAR 0 1
26812: PPUSH
26813: LD_INT 1000
26815: PPUSH
26816: CALL_OW 234
26820: GO 26790
26822: POP
26823: POP
// until p > 20 ;
26824: LD_VAR 0 3
26828: PUSH
26829: LD_INT 20
26831: GREATER
26832: IFFALSE 26759
// end ;
26834: PPOPN 3
26836: END
// every 0 0$1 trigger StreamModeActive and sTime do
26837: LD_EXP 39
26841: PUSH
26842: LD_EXP 90
26846: AND
26847: IFFALSE 26882
26849: GO 26851
26851: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
26852: LD_INT 28
26854: PPUSH
26855: LD_OWVAR 2
26859: PPUSH
26860: LD_INT 2
26862: PPUSH
26863: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
26867: LD_INT 30
26869: PPUSH
26870: LD_OWVAR 2
26874: PPUSH
26875: LD_INT 2
26877: PPUSH
26878: CALL_OW 322
// end ;
26882: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
26883: LD_EXP 39
26887: PUSH
26888: LD_EXP 91
26892: AND
26893: IFFALSE 27014
26895: GO 26897
26897: DISABLE
26898: LD_INT 0
26900: PPUSH
26901: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26902: LD_ADDR_VAR 0 2
26906: PUSH
26907: LD_INT 22
26909: PUSH
26910: LD_OWVAR 2
26914: PUSH
26915: EMPTY
26916: LIST
26917: LIST
26918: PUSH
26919: LD_INT 21
26921: PUSH
26922: LD_INT 1
26924: PUSH
26925: EMPTY
26926: LIST
26927: LIST
26928: PUSH
26929: LD_INT 3
26931: PUSH
26932: LD_INT 23
26934: PUSH
26935: LD_INT 0
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: LIST
26950: PPUSH
26951: CALL_OW 69
26955: ST_TO_ADDR
// if not tmp then
26956: LD_VAR 0 2
26960: NOT
26961: IFFALSE 26965
// exit ;
26963: GO 27014
// for i in tmp do
26965: LD_ADDR_VAR 0 1
26969: PUSH
26970: LD_VAR 0 2
26974: PUSH
26975: FOR_IN
26976: IFFALSE 27012
// begin if Crawls ( i ) then
26978: LD_VAR 0 1
26982: PPUSH
26983: CALL_OW 318
26987: IFFALSE 26998
// ComWalk ( i ) ;
26989: LD_VAR 0 1
26993: PPUSH
26994: CALL_OW 138
// SetClass ( i , 2 ) ;
26998: LD_VAR 0 1
27002: PPUSH
27003: LD_INT 2
27005: PPUSH
27006: CALL_OW 336
// end ;
27010: GO 26975
27012: POP
27013: POP
// end ;
27014: PPOPN 2
27016: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
27017: LD_EXP 39
27021: PUSH
27022: LD_EXP 92
27026: AND
27027: IFFALSE 27315
27029: GO 27031
27031: DISABLE
27032: LD_INT 0
27034: PPUSH
27035: PPUSH
27036: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
27037: LD_OWVAR 2
27041: PPUSH
27042: LD_INT 9
27044: PPUSH
27045: LD_INT 1
27047: PPUSH
27048: LD_INT 1
27050: PPUSH
27051: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
27055: LD_INT 9
27057: PPUSH
27058: LD_OWVAR 2
27062: PPUSH
27063: CALL_OW 343
// uc_side := 9 ;
27067: LD_ADDR_OWVAR 20
27071: PUSH
27072: LD_INT 9
27074: ST_TO_ADDR
// uc_nation := 2 ;
27075: LD_ADDR_OWVAR 21
27079: PUSH
27080: LD_INT 2
27082: ST_TO_ADDR
// hc_name := Dark Warrior ;
27083: LD_ADDR_OWVAR 26
27087: PUSH
27088: LD_STRING Dark Warrior
27090: ST_TO_ADDR
// hc_gallery :=  ;
27091: LD_ADDR_OWVAR 33
27095: PUSH
27096: LD_STRING 
27098: ST_TO_ADDR
// hc_noskilllimit := true ;
27099: LD_ADDR_OWVAR 76
27103: PUSH
27104: LD_INT 1
27106: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
27107: LD_ADDR_OWVAR 31
27111: PUSH
27112: LD_INT 30
27114: PUSH
27115: LD_INT 30
27117: PUSH
27118: LD_INT 30
27120: PUSH
27121: LD_INT 30
27123: PUSH
27124: EMPTY
27125: LIST
27126: LIST
27127: LIST
27128: LIST
27129: ST_TO_ADDR
// un := CreateHuman ;
27130: LD_ADDR_VAR 0 3
27134: PUSH
27135: CALL_OW 44
27139: ST_TO_ADDR
// hc_noskilllimit := false ;
27140: LD_ADDR_OWVAR 76
27144: PUSH
27145: LD_INT 0
27147: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27148: LD_VAR 0 3
27152: PPUSH
27153: LD_INT 1
27155: PPUSH
27156: CALL_OW 51
// ToLua ( playRanger() ) ;
27160: LD_STRING playRanger()
27162: PPUSH
27163: CALL_OW 559
// p := 0 ;
27167: LD_ADDR_VAR 0 2
27171: PUSH
27172: LD_INT 0
27174: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27175: LD_INT 35
27177: PPUSH
27178: CALL_OW 67
// p := p + 1 ;
27182: LD_ADDR_VAR 0 2
27186: PUSH
27187: LD_VAR 0 2
27191: PUSH
27192: LD_INT 1
27194: PLUS
27195: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
27196: LD_VAR 0 3
27200: PPUSH
27201: CALL_OW 256
27205: PUSH
27206: LD_INT 1000
27208: LESS
27209: IFFALSE 27223
// SetLives ( un , 1000 ) ;
27211: LD_VAR 0 3
27215: PPUSH
27216: LD_INT 1000
27218: PPUSH
27219: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
27223: LD_VAR 0 3
27227: PPUSH
27228: LD_INT 81
27230: PUSH
27231: LD_OWVAR 2
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: PUSH
27240: LD_INT 91
27242: PUSH
27243: LD_VAR 0 3
27247: PUSH
27248: LD_INT 30
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: LIST
27255: PUSH
27256: EMPTY
27257: LIST
27258: LIST
27259: PPUSH
27260: CALL_OW 69
27264: PPUSH
27265: LD_VAR 0 3
27269: PPUSH
27270: CALL_OW 74
27274: PPUSH
27275: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
27279: LD_VAR 0 2
27283: PUSH
27284: LD_INT 80
27286: GREATER
27287: PUSH
27288: LD_VAR 0 3
27292: PPUSH
27293: CALL_OW 301
27297: OR
27298: IFFALSE 27175
// if un then
27300: LD_VAR 0 3
27304: IFFALSE 27315
// RemoveUnit ( un ) ;
27306: LD_VAR 0 3
27310: PPUSH
27311: CALL_OW 64
// end ;
27315: PPOPN 3
27317: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
27318: LD_EXP 93
27322: IFFALSE 27438
27324: GO 27326
27326: DISABLE
27327: LD_INT 0
27329: PPUSH
27330: PPUSH
27331: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27332: LD_ADDR_VAR 0 2
27336: PUSH
27337: LD_INT 81
27339: PUSH
27340: LD_OWVAR 2
27344: PUSH
27345: EMPTY
27346: LIST
27347: LIST
27348: PUSH
27349: LD_INT 21
27351: PUSH
27352: LD_INT 1
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: PPUSH
27363: CALL_OW 69
27367: ST_TO_ADDR
// ToLua ( playComputer() ) ;
27368: LD_STRING playComputer()
27370: PPUSH
27371: CALL_OW 559
// if not tmp then
27375: LD_VAR 0 2
27379: NOT
27380: IFFALSE 27384
// exit ;
27382: GO 27438
// for i in tmp do
27384: LD_ADDR_VAR 0 1
27388: PUSH
27389: LD_VAR 0 2
27393: PUSH
27394: FOR_IN
27395: IFFALSE 27436
// for j := 1 to 4 do
27397: LD_ADDR_VAR 0 3
27401: PUSH
27402: DOUBLE
27403: LD_INT 1
27405: DEC
27406: ST_TO_ADDR
27407: LD_INT 4
27409: PUSH
27410: FOR_TO
27411: IFFALSE 27432
// SetSkill ( i , j , 10 ) ;
27413: LD_VAR 0 1
27417: PPUSH
27418: LD_VAR 0 3
27422: PPUSH
27423: LD_INT 10
27425: PPUSH
27426: CALL_OW 237
27430: GO 27410
27432: POP
27433: POP
27434: GO 27394
27436: POP
27437: POP
// end ;
27438: PPOPN 3
27440: END
// every 0 0$1 trigger s30 do var i , tmp ;
27441: LD_EXP 94
27445: IFFALSE 27514
27447: GO 27449
27449: DISABLE
27450: LD_INT 0
27452: PPUSH
27453: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27454: LD_ADDR_VAR 0 2
27458: PUSH
27459: LD_INT 22
27461: PUSH
27462: LD_OWVAR 2
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: PPUSH
27471: CALL_OW 69
27475: ST_TO_ADDR
// if not tmp then
27476: LD_VAR 0 2
27480: NOT
27481: IFFALSE 27485
// exit ;
27483: GO 27514
// for i in tmp do
27485: LD_ADDR_VAR 0 1
27489: PUSH
27490: LD_VAR 0 2
27494: PUSH
27495: FOR_IN
27496: IFFALSE 27512
// SetLives ( i , 300 ) ;
27498: LD_VAR 0 1
27502: PPUSH
27503: LD_INT 300
27505: PPUSH
27506: CALL_OW 234
27510: GO 27495
27512: POP
27513: POP
// end ;
27514: PPOPN 2
27516: END
// every 0 0$1 trigger s60 do var i , tmp ;
27517: LD_EXP 95
27521: IFFALSE 27590
27523: GO 27525
27525: DISABLE
27526: LD_INT 0
27528: PPUSH
27529: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27530: LD_ADDR_VAR 0 2
27534: PUSH
27535: LD_INT 22
27537: PUSH
27538: LD_OWVAR 2
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: PPUSH
27547: CALL_OW 69
27551: ST_TO_ADDR
// if not tmp then
27552: LD_VAR 0 2
27556: NOT
27557: IFFALSE 27561
// exit ;
27559: GO 27590
// for i in tmp do
27561: LD_ADDR_VAR 0 1
27565: PUSH
27566: LD_VAR 0 2
27570: PUSH
27571: FOR_IN
27572: IFFALSE 27588
// SetLives ( i , 600 ) ;
27574: LD_VAR 0 1
27578: PPUSH
27579: LD_INT 600
27581: PPUSH
27582: CALL_OW 234
27586: GO 27571
27588: POP
27589: POP
// end ;
27590: PPOPN 2
27592: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
27593: LD_INT 0
27595: PPUSH
// case cmd of 301 :
27596: LD_VAR 0 1
27600: PUSH
27601: LD_INT 301
27603: DOUBLE
27604: EQUAL
27605: IFTRUE 27609
27607: GO 27641
27609: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
27610: LD_VAR 0 6
27614: PPUSH
27615: LD_VAR 0 7
27619: PPUSH
27620: LD_VAR 0 8
27624: PPUSH
27625: LD_VAR 0 4
27629: PPUSH
27630: LD_VAR 0 5
27634: PPUSH
27635: CALL 28842 0 5
27639: GO 27762
27641: LD_INT 302
27643: DOUBLE
27644: EQUAL
27645: IFTRUE 27649
27647: GO 27686
27649: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
27650: LD_VAR 0 6
27654: PPUSH
27655: LD_VAR 0 7
27659: PPUSH
27660: LD_VAR 0 8
27664: PPUSH
27665: LD_VAR 0 9
27669: PPUSH
27670: LD_VAR 0 4
27674: PPUSH
27675: LD_VAR 0 5
27679: PPUSH
27680: CALL 28933 0 6
27684: GO 27762
27686: LD_INT 303
27688: DOUBLE
27689: EQUAL
27690: IFTRUE 27694
27692: GO 27731
27694: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
27695: LD_VAR 0 6
27699: PPUSH
27700: LD_VAR 0 7
27704: PPUSH
27705: LD_VAR 0 8
27709: PPUSH
27710: LD_VAR 0 9
27714: PPUSH
27715: LD_VAR 0 4
27719: PPUSH
27720: LD_VAR 0 5
27724: PPUSH
27725: CALL 27767 0 6
27729: GO 27762
27731: LD_INT 304
27733: DOUBLE
27734: EQUAL
27735: IFTRUE 27739
27737: GO 27761
27739: POP
// hHackTeleport ( unit , x , y ) ; end ;
27740: LD_VAR 0 2
27744: PPUSH
27745: LD_VAR 0 4
27749: PPUSH
27750: LD_VAR 0 5
27754: PPUSH
27755: CALL 29526 0 3
27759: GO 27762
27761: POP
// end ;
27762: LD_VAR 0 12
27766: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
27767: LD_INT 0
27769: PPUSH
27770: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
27771: LD_VAR 0 1
27775: PUSH
27776: LD_INT 1
27778: LESS
27779: PUSH
27780: LD_VAR 0 1
27784: PUSH
27785: LD_INT 3
27787: GREATER
27788: OR
27789: PUSH
27790: LD_VAR 0 5
27794: PPUSH
27795: LD_VAR 0 6
27799: PPUSH
27800: CALL_OW 428
27804: OR
27805: IFFALSE 27809
// exit ;
27807: GO 28529
// uc_side := your_side ;
27809: LD_ADDR_OWVAR 20
27813: PUSH
27814: LD_OWVAR 2
27818: ST_TO_ADDR
// uc_nation := nation ;
27819: LD_ADDR_OWVAR 21
27823: PUSH
27824: LD_VAR 0 1
27828: ST_TO_ADDR
// bc_level = 1 ;
27829: LD_ADDR_OWVAR 43
27833: PUSH
27834: LD_INT 1
27836: ST_TO_ADDR
// case btype of 1 :
27837: LD_VAR 0 2
27841: PUSH
27842: LD_INT 1
27844: DOUBLE
27845: EQUAL
27846: IFTRUE 27850
27848: GO 27861
27850: POP
// bc_type := b_depot ; 2 :
27851: LD_ADDR_OWVAR 42
27855: PUSH
27856: LD_INT 0
27858: ST_TO_ADDR
27859: GO 28473
27861: LD_INT 2
27863: DOUBLE
27864: EQUAL
27865: IFTRUE 27869
27867: GO 27880
27869: POP
// bc_type := b_warehouse ; 3 :
27870: LD_ADDR_OWVAR 42
27874: PUSH
27875: LD_INT 1
27877: ST_TO_ADDR
27878: GO 28473
27880: LD_INT 3
27882: DOUBLE
27883: EQUAL
27884: IFTRUE 27888
27886: GO 27899
27888: POP
// bc_type := b_lab ; 4 .. 9 :
27889: LD_ADDR_OWVAR 42
27893: PUSH
27894: LD_INT 6
27896: ST_TO_ADDR
27897: GO 28473
27899: LD_INT 4
27901: DOUBLE
27902: GREATEREQUAL
27903: IFFALSE 27911
27905: LD_INT 9
27907: DOUBLE
27908: LESSEQUAL
27909: IFTRUE 27913
27911: GO 27965
27913: POP
// begin bc_type := b_lab_half ;
27914: LD_ADDR_OWVAR 42
27918: PUSH
27919: LD_INT 7
27921: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
27922: LD_ADDR_OWVAR 44
27926: PUSH
27927: LD_INT 10
27929: PUSH
27930: LD_INT 11
27932: PUSH
27933: LD_INT 12
27935: PUSH
27936: LD_INT 15
27938: PUSH
27939: LD_INT 14
27941: PUSH
27942: LD_INT 13
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: LIST
27949: LIST
27950: LIST
27951: LIST
27952: PUSH
27953: LD_VAR 0 2
27957: PUSH
27958: LD_INT 3
27960: MINUS
27961: ARRAY
27962: ST_TO_ADDR
// end ; 10 .. 13 :
27963: GO 28473
27965: LD_INT 10
27967: DOUBLE
27968: GREATEREQUAL
27969: IFFALSE 27977
27971: LD_INT 13
27973: DOUBLE
27974: LESSEQUAL
27975: IFTRUE 27979
27977: GO 28056
27979: POP
// begin bc_type := b_lab_full ;
27980: LD_ADDR_OWVAR 42
27984: PUSH
27985: LD_INT 8
27987: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
27988: LD_ADDR_OWVAR 44
27992: PUSH
27993: LD_INT 10
27995: PUSH
27996: LD_INT 12
27998: PUSH
27999: LD_INT 14
28001: PUSH
28002: LD_INT 13
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: PUSH
28011: LD_VAR 0 2
28015: PUSH
28016: LD_INT 9
28018: MINUS
28019: ARRAY
28020: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
28021: LD_ADDR_OWVAR 45
28025: PUSH
28026: LD_INT 11
28028: PUSH
28029: LD_INT 15
28031: PUSH
28032: LD_INT 12
28034: PUSH
28035: LD_INT 15
28037: PUSH
28038: EMPTY
28039: LIST
28040: LIST
28041: LIST
28042: LIST
28043: PUSH
28044: LD_VAR 0 2
28048: PUSH
28049: LD_INT 9
28051: MINUS
28052: ARRAY
28053: ST_TO_ADDR
// end ; 14 :
28054: GO 28473
28056: LD_INT 14
28058: DOUBLE
28059: EQUAL
28060: IFTRUE 28064
28062: GO 28075
28064: POP
// bc_type := b_workshop ; 15 :
28065: LD_ADDR_OWVAR 42
28069: PUSH
28070: LD_INT 2
28072: ST_TO_ADDR
28073: GO 28473
28075: LD_INT 15
28077: DOUBLE
28078: EQUAL
28079: IFTRUE 28083
28081: GO 28094
28083: POP
// bc_type := b_factory ; 16 :
28084: LD_ADDR_OWVAR 42
28088: PUSH
28089: LD_INT 3
28091: ST_TO_ADDR
28092: GO 28473
28094: LD_INT 16
28096: DOUBLE
28097: EQUAL
28098: IFTRUE 28102
28100: GO 28113
28102: POP
// bc_type := b_ext_gun ; 17 :
28103: LD_ADDR_OWVAR 42
28107: PUSH
28108: LD_INT 17
28110: ST_TO_ADDR
28111: GO 28473
28113: LD_INT 17
28115: DOUBLE
28116: EQUAL
28117: IFTRUE 28121
28119: GO 28149
28121: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
28122: LD_ADDR_OWVAR 42
28126: PUSH
28127: LD_INT 19
28129: PUSH
28130: LD_INT 23
28132: PUSH
28133: LD_INT 19
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: LIST
28140: PUSH
28141: LD_VAR 0 1
28145: ARRAY
28146: ST_TO_ADDR
28147: GO 28473
28149: LD_INT 18
28151: DOUBLE
28152: EQUAL
28153: IFTRUE 28157
28155: GO 28168
28157: POP
// bc_type := b_ext_radar ; 19 :
28158: LD_ADDR_OWVAR 42
28162: PUSH
28163: LD_INT 20
28165: ST_TO_ADDR
28166: GO 28473
28168: LD_INT 19
28170: DOUBLE
28171: EQUAL
28172: IFTRUE 28176
28174: GO 28187
28176: POP
// bc_type := b_ext_radio ; 20 :
28177: LD_ADDR_OWVAR 42
28181: PUSH
28182: LD_INT 22
28184: ST_TO_ADDR
28185: GO 28473
28187: LD_INT 20
28189: DOUBLE
28190: EQUAL
28191: IFTRUE 28195
28193: GO 28206
28195: POP
// bc_type := b_ext_siberium ; 21 :
28196: LD_ADDR_OWVAR 42
28200: PUSH
28201: LD_INT 21
28203: ST_TO_ADDR
28204: GO 28473
28206: LD_INT 21
28208: DOUBLE
28209: EQUAL
28210: IFTRUE 28214
28212: GO 28225
28214: POP
// bc_type := b_ext_computer ; 22 :
28215: LD_ADDR_OWVAR 42
28219: PUSH
28220: LD_INT 24
28222: ST_TO_ADDR
28223: GO 28473
28225: LD_INT 22
28227: DOUBLE
28228: EQUAL
28229: IFTRUE 28233
28231: GO 28244
28233: POP
// bc_type := b_ext_track ; 23 :
28234: LD_ADDR_OWVAR 42
28238: PUSH
28239: LD_INT 16
28241: ST_TO_ADDR
28242: GO 28473
28244: LD_INT 23
28246: DOUBLE
28247: EQUAL
28248: IFTRUE 28252
28250: GO 28263
28252: POP
// bc_type := b_ext_laser ; 24 :
28253: LD_ADDR_OWVAR 42
28257: PUSH
28258: LD_INT 25
28260: ST_TO_ADDR
28261: GO 28473
28263: LD_INT 24
28265: DOUBLE
28266: EQUAL
28267: IFTRUE 28271
28269: GO 28282
28271: POP
// bc_type := b_control_tower ; 25 :
28272: LD_ADDR_OWVAR 42
28276: PUSH
28277: LD_INT 36
28279: ST_TO_ADDR
28280: GO 28473
28282: LD_INT 25
28284: DOUBLE
28285: EQUAL
28286: IFTRUE 28290
28288: GO 28301
28290: POP
// bc_type := b_breastwork ; 26 :
28291: LD_ADDR_OWVAR 42
28295: PUSH
28296: LD_INT 31
28298: ST_TO_ADDR
28299: GO 28473
28301: LD_INT 26
28303: DOUBLE
28304: EQUAL
28305: IFTRUE 28309
28307: GO 28320
28309: POP
// bc_type := b_bunker ; 27 :
28310: LD_ADDR_OWVAR 42
28314: PUSH
28315: LD_INT 32
28317: ST_TO_ADDR
28318: GO 28473
28320: LD_INT 27
28322: DOUBLE
28323: EQUAL
28324: IFTRUE 28328
28326: GO 28339
28328: POP
// bc_type := b_turret ; 28 :
28329: LD_ADDR_OWVAR 42
28333: PUSH
28334: LD_INT 33
28336: ST_TO_ADDR
28337: GO 28473
28339: LD_INT 28
28341: DOUBLE
28342: EQUAL
28343: IFTRUE 28347
28345: GO 28358
28347: POP
// bc_type := b_armoury ; 29 :
28348: LD_ADDR_OWVAR 42
28352: PUSH
28353: LD_INT 4
28355: ST_TO_ADDR
28356: GO 28473
28358: LD_INT 29
28360: DOUBLE
28361: EQUAL
28362: IFTRUE 28366
28364: GO 28377
28366: POP
// bc_type := b_barracks ; 30 :
28367: LD_ADDR_OWVAR 42
28371: PUSH
28372: LD_INT 5
28374: ST_TO_ADDR
28375: GO 28473
28377: LD_INT 30
28379: DOUBLE
28380: EQUAL
28381: IFTRUE 28385
28383: GO 28396
28385: POP
// bc_type := b_solar_power ; 31 :
28386: LD_ADDR_OWVAR 42
28390: PUSH
28391: LD_INT 27
28393: ST_TO_ADDR
28394: GO 28473
28396: LD_INT 31
28398: DOUBLE
28399: EQUAL
28400: IFTRUE 28404
28402: GO 28415
28404: POP
// bc_type := b_oil_power ; 32 :
28405: LD_ADDR_OWVAR 42
28409: PUSH
28410: LD_INT 26
28412: ST_TO_ADDR
28413: GO 28473
28415: LD_INT 32
28417: DOUBLE
28418: EQUAL
28419: IFTRUE 28423
28421: GO 28434
28423: POP
// bc_type := b_siberite_power ; 33 :
28424: LD_ADDR_OWVAR 42
28428: PUSH
28429: LD_INT 28
28431: ST_TO_ADDR
28432: GO 28473
28434: LD_INT 33
28436: DOUBLE
28437: EQUAL
28438: IFTRUE 28442
28440: GO 28453
28442: POP
// bc_type := b_oil_mine ; 34 :
28443: LD_ADDR_OWVAR 42
28447: PUSH
28448: LD_INT 29
28450: ST_TO_ADDR
28451: GO 28473
28453: LD_INT 34
28455: DOUBLE
28456: EQUAL
28457: IFTRUE 28461
28459: GO 28472
28461: POP
// bc_type := b_siberite_mine ; end ;
28462: LD_ADDR_OWVAR 42
28466: PUSH
28467: LD_INT 30
28469: ST_TO_ADDR
28470: GO 28473
28472: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
28473: LD_ADDR_VAR 0 8
28477: PUSH
28478: LD_VAR 0 5
28482: PPUSH
28483: LD_VAR 0 6
28487: PPUSH
28488: LD_VAR 0 3
28492: PPUSH
28493: CALL_OW 47
28497: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
28498: LD_OWVAR 42
28502: PUSH
28503: LD_INT 32
28505: PUSH
28506: LD_INT 33
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: IN
28513: IFFALSE 28529
// PlaceWeaponTurret ( b , weapon ) ;
28515: LD_VAR 0 8
28519: PPUSH
28520: LD_VAR 0 4
28524: PPUSH
28525: CALL_OW 431
// end ;
28529: LD_VAR 0 7
28533: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
28534: LD_INT 0
28536: PPUSH
28537: PPUSH
28538: PPUSH
28539: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28540: LD_ADDR_VAR 0 4
28544: PUSH
28545: LD_INT 22
28547: PUSH
28548: LD_OWVAR 2
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PUSH
28557: LD_INT 2
28559: PUSH
28560: LD_INT 30
28562: PUSH
28563: LD_INT 0
28565: PUSH
28566: EMPTY
28567: LIST
28568: LIST
28569: PUSH
28570: LD_INT 30
28572: PUSH
28573: LD_INT 1
28575: PUSH
28576: EMPTY
28577: LIST
28578: LIST
28579: PUSH
28580: EMPTY
28581: LIST
28582: LIST
28583: LIST
28584: PUSH
28585: EMPTY
28586: LIST
28587: LIST
28588: PPUSH
28589: CALL_OW 69
28593: ST_TO_ADDR
// if not tmp then
28594: LD_VAR 0 4
28598: NOT
28599: IFFALSE 28603
// exit ;
28601: GO 28662
// for i in tmp do
28603: LD_ADDR_VAR 0 2
28607: PUSH
28608: LD_VAR 0 4
28612: PUSH
28613: FOR_IN
28614: IFFALSE 28660
// for j = 1 to 3 do
28616: LD_ADDR_VAR 0 3
28620: PUSH
28621: DOUBLE
28622: LD_INT 1
28624: DEC
28625: ST_TO_ADDR
28626: LD_INT 3
28628: PUSH
28629: FOR_TO
28630: IFFALSE 28656
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
28632: LD_VAR 0 2
28636: PPUSH
28637: CALL_OW 274
28641: PPUSH
28642: LD_VAR 0 3
28646: PPUSH
28647: LD_INT 99999
28649: PPUSH
28650: CALL_OW 277
28654: GO 28629
28656: POP
28657: POP
28658: GO 28613
28660: POP
28661: POP
// end ;
28662: LD_VAR 0 1
28666: RET
// export function hHackSetLevel10 ; var i , j ; begin
28667: LD_INT 0
28669: PPUSH
28670: PPUSH
28671: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28672: LD_ADDR_VAR 0 2
28676: PUSH
28677: LD_INT 21
28679: PUSH
28680: LD_INT 1
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: PPUSH
28687: CALL_OW 69
28691: PUSH
28692: FOR_IN
28693: IFFALSE 28745
// if IsSelected ( i ) then
28695: LD_VAR 0 2
28699: PPUSH
28700: CALL_OW 306
28704: IFFALSE 28743
// begin for j := 1 to 4 do
28706: LD_ADDR_VAR 0 3
28710: PUSH
28711: DOUBLE
28712: LD_INT 1
28714: DEC
28715: ST_TO_ADDR
28716: LD_INT 4
28718: PUSH
28719: FOR_TO
28720: IFFALSE 28741
// SetSkill ( i , j , 10 ) ;
28722: LD_VAR 0 2
28726: PPUSH
28727: LD_VAR 0 3
28731: PPUSH
28732: LD_INT 10
28734: PPUSH
28735: CALL_OW 237
28739: GO 28719
28741: POP
28742: POP
// end ;
28743: GO 28692
28745: POP
28746: POP
// end ;
28747: LD_VAR 0 1
28751: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
28752: LD_INT 0
28754: PPUSH
28755: PPUSH
28756: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
28757: LD_ADDR_VAR 0 2
28761: PUSH
28762: LD_INT 22
28764: PUSH
28765: LD_OWVAR 2
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: PUSH
28774: LD_INT 21
28776: PUSH
28777: LD_INT 1
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: PPUSH
28788: CALL_OW 69
28792: PUSH
28793: FOR_IN
28794: IFFALSE 28835
// begin for j := 1 to 4 do
28796: LD_ADDR_VAR 0 3
28800: PUSH
28801: DOUBLE
28802: LD_INT 1
28804: DEC
28805: ST_TO_ADDR
28806: LD_INT 4
28808: PUSH
28809: FOR_TO
28810: IFFALSE 28831
// SetSkill ( i , j , 10 ) ;
28812: LD_VAR 0 2
28816: PPUSH
28817: LD_VAR 0 3
28821: PPUSH
28822: LD_INT 10
28824: PPUSH
28825: CALL_OW 237
28829: GO 28809
28831: POP
28832: POP
// end ;
28833: GO 28793
28835: POP
28836: POP
// end ;
28837: LD_VAR 0 1
28841: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
28842: LD_INT 0
28844: PPUSH
// uc_side := your_side ;
28845: LD_ADDR_OWVAR 20
28849: PUSH
28850: LD_OWVAR 2
28854: ST_TO_ADDR
// uc_nation := nation ;
28855: LD_ADDR_OWVAR 21
28859: PUSH
28860: LD_VAR 0 1
28864: ST_TO_ADDR
// InitHc ;
28865: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
28869: LD_INT 0
28871: PPUSH
28872: LD_VAR 0 2
28876: PPUSH
28877: LD_VAR 0 3
28881: PPUSH
28882: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
28886: LD_VAR 0 4
28890: PPUSH
28891: LD_VAR 0 5
28895: PPUSH
28896: CALL_OW 428
28900: PUSH
28901: LD_INT 0
28903: EQUAL
28904: IFFALSE 28928
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
28906: CALL_OW 44
28910: PPUSH
28911: LD_VAR 0 4
28915: PPUSH
28916: LD_VAR 0 5
28920: PPUSH
28921: LD_INT 1
28923: PPUSH
28924: CALL_OW 48
// end ;
28928: LD_VAR 0 6
28932: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
28933: LD_INT 0
28935: PPUSH
28936: PPUSH
// uc_side := your_side ;
28937: LD_ADDR_OWVAR 20
28941: PUSH
28942: LD_OWVAR 2
28946: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
28947: LD_VAR 0 1
28951: PUSH
28952: LD_INT 1
28954: PUSH
28955: LD_INT 2
28957: PUSH
28958: LD_INT 3
28960: PUSH
28961: LD_INT 4
28963: PUSH
28964: LD_INT 5
28966: PUSH
28967: EMPTY
28968: LIST
28969: LIST
28970: LIST
28971: LIST
28972: LIST
28973: IN
28974: IFFALSE 28986
// uc_nation := nation_american else
28976: LD_ADDR_OWVAR 21
28980: PUSH
28981: LD_INT 1
28983: ST_TO_ADDR
28984: GO 29029
// if chassis in [ 11 , 12 , 13 , 14 ] then
28986: LD_VAR 0 1
28990: PUSH
28991: LD_INT 11
28993: PUSH
28994: LD_INT 12
28996: PUSH
28997: LD_INT 13
28999: PUSH
29000: LD_INT 14
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: LIST
29007: LIST
29008: IN
29009: IFFALSE 29021
// uc_nation := nation_arabian else
29011: LD_ADDR_OWVAR 21
29015: PUSH
29016: LD_INT 2
29018: ST_TO_ADDR
29019: GO 29029
// uc_nation := nation_russian ;
29021: LD_ADDR_OWVAR 21
29025: PUSH
29026: LD_INT 3
29028: ST_TO_ADDR
// vc_chassis := chassis ;
29029: LD_ADDR_OWVAR 37
29033: PUSH
29034: LD_VAR 0 1
29038: ST_TO_ADDR
// vc_engine := engine ;
29039: LD_ADDR_OWVAR 39
29043: PUSH
29044: LD_VAR 0 2
29048: ST_TO_ADDR
// vc_control := control ;
29049: LD_ADDR_OWVAR 38
29053: PUSH
29054: LD_VAR 0 3
29058: ST_TO_ADDR
// vc_weapon := weapon ;
29059: LD_ADDR_OWVAR 40
29063: PUSH
29064: LD_VAR 0 4
29068: ST_TO_ADDR
// un := CreateVehicle ;
29069: LD_ADDR_VAR 0 8
29073: PUSH
29074: CALL_OW 45
29078: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
29079: LD_VAR 0 8
29083: PPUSH
29084: LD_INT 0
29086: PPUSH
29087: LD_INT 5
29089: PPUSH
29090: CALL_OW 12
29094: PPUSH
29095: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
29099: LD_VAR 0 8
29103: PPUSH
29104: LD_VAR 0 5
29108: PPUSH
29109: LD_VAR 0 6
29113: PPUSH
29114: LD_INT 1
29116: PPUSH
29117: CALL_OW 48
// end ;
29121: LD_VAR 0 7
29125: RET
// export hInvincible ; every 1 do
29126: GO 29128
29128: DISABLE
// hInvincible := [ ] ;
29129: LD_ADDR_EXP 96
29133: PUSH
29134: EMPTY
29135: ST_TO_ADDR
29136: END
// every 10 do var i ;
29137: GO 29139
29139: DISABLE
29140: LD_INT 0
29142: PPUSH
// begin enable ;
29143: ENABLE
// if not hInvincible then
29144: LD_EXP 96
29148: NOT
29149: IFFALSE 29153
// exit ;
29151: GO 29197
// for i in hInvincible do
29153: LD_ADDR_VAR 0 1
29157: PUSH
29158: LD_EXP 96
29162: PUSH
29163: FOR_IN
29164: IFFALSE 29195
// if GetLives ( i ) < 1000 then
29166: LD_VAR 0 1
29170: PPUSH
29171: CALL_OW 256
29175: PUSH
29176: LD_INT 1000
29178: LESS
29179: IFFALSE 29193
// SetLives ( i , 1000 ) ;
29181: LD_VAR 0 1
29185: PPUSH
29186: LD_INT 1000
29188: PPUSH
29189: CALL_OW 234
29193: GO 29163
29195: POP
29196: POP
// end ;
29197: PPOPN 1
29199: END
// export function hHackInvincible ; var i ; begin
29200: LD_INT 0
29202: PPUSH
29203: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
29204: LD_ADDR_VAR 0 2
29208: PUSH
29209: LD_INT 2
29211: PUSH
29212: LD_INT 21
29214: PUSH
29215: LD_INT 1
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: PUSH
29222: LD_INT 21
29224: PUSH
29225: LD_INT 2
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: LIST
29236: PPUSH
29237: CALL_OW 69
29241: PUSH
29242: FOR_IN
29243: IFFALSE 29304
// if IsSelected ( i ) then
29245: LD_VAR 0 2
29249: PPUSH
29250: CALL_OW 306
29254: IFFALSE 29302
// begin if i in hInvincible then
29256: LD_VAR 0 2
29260: PUSH
29261: LD_EXP 96
29265: IN
29266: IFFALSE 29286
// hInvincible := hInvincible diff i else
29268: LD_ADDR_EXP 96
29272: PUSH
29273: LD_EXP 96
29277: PUSH
29278: LD_VAR 0 2
29282: DIFF
29283: ST_TO_ADDR
29284: GO 29302
// hInvincible := hInvincible union i ;
29286: LD_ADDR_EXP 96
29290: PUSH
29291: LD_EXP 96
29295: PUSH
29296: LD_VAR 0 2
29300: UNION
29301: ST_TO_ADDR
// end ;
29302: GO 29242
29304: POP
29305: POP
// end ;
29306: LD_VAR 0 1
29310: RET
// export function hHackInvisible ; var i , j ; begin
29311: LD_INT 0
29313: PPUSH
29314: PPUSH
29315: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29316: LD_ADDR_VAR 0 2
29320: PUSH
29321: LD_INT 21
29323: PUSH
29324: LD_INT 1
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: PPUSH
29331: CALL_OW 69
29335: PUSH
29336: FOR_IN
29337: IFFALSE 29361
// if IsSelected ( i ) then
29339: LD_VAR 0 2
29343: PPUSH
29344: CALL_OW 306
29348: IFFALSE 29359
// ComForceInvisible ( i ) ;
29350: LD_VAR 0 2
29354: PPUSH
29355: CALL_OW 496
29359: GO 29336
29361: POP
29362: POP
// end ;
29363: LD_VAR 0 1
29367: RET
// export function hHackChangeYourSide ; begin
29368: LD_INT 0
29370: PPUSH
// if your_side = 8 then
29371: LD_OWVAR 2
29375: PUSH
29376: LD_INT 8
29378: EQUAL
29379: IFFALSE 29391
// your_side := 0 else
29381: LD_ADDR_OWVAR 2
29385: PUSH
29386: LD_INT 0
29388: ST_TO_ADDR
29389: GO 29405
// your_side := your_side + 1 ;
29391: LD_ADDR_OWVAR 2
29395: PUSH
29396: LD_OWVAR 2
29400: PUSH
29401: LD_INT 1
29403: PLUS
29404: ST_TO_ADDR
// end ;
29405: LD_VAR 0 1
29409: RET
// export function hHackChangeUnitSide ; var i , j ; begin
29410: LD_INT 0
29412: PPUSH
29413: PPUSH
29414: PPUSH
// for i in all_units do
29415: LD_ADDR_VAR 0 2
29419: PUSH
29420: LD_OWVAR 3
29424: PUSH
29425: FOR_IN
29426: IFFALSE 29504
// if IsSelected ( i ) then
29428: LD_VAR 0 2
29432: PPUSH
29433: CALL_OW 306
29437: IFFALSE 29502
// begin j := GetSide ( i ) ;
29439: LD_ADDR_VAR 0 3
29443: PUSH
29444: LD_VAR 0 2
29448: PPUSH
29449: CALL_OW 255
29453: ST_TO_ADDR
// if j = 8 then
29454: LD_VAR 0 3
29458: PUSH
29459: LD_INT 8
29461: EQUAL
29462: IFFALSE 29474
// j := 0 else
29464: LD_ADDR_VAR 0 3
29468: PUSH
29469: LD_INT 0
29471: ST_TO_ADDR
29472: GO 29488
// j := j + 1 ;
29474: LD_ADDR_VAR 0 3
29478: PUSH
29479: LD_VAR 0 3
29483: PUSH
29484: LD_INT 1
29486: PLUS
29487: ST_TO_ADDR
// SetSide ( i , j ) ;
29488: LD_VAR 0 2
29492: PPUSH
29493: LD_VAR 0 3
29497: PPUSH
29498: CALL_OW 235
// end ;
29502: GO 29425
29504: POP
29505: POP
// end ;
29506: LD_VAR 0 1
29510: RET
// export function hHackFog ; begin
29511: LD_INT 0
29513: PPUSH
// FogOff ( true ) ;
29514: LD_INT 1
29516: PPUSH
29517: CALL_OW 344
// end ;
29521: LD_VAR 0 1
29525: RET
// export function hHackTeleport ( unit , x , y ) ; begin
29526: LD_INT 0
29528: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
29529: LD_VAR 0 1
29533: PPUSH
29534: LD_VAR 0 2
29538: PPUSH
29539: LD_VAR 0 3
29543: PPUSH
29544: LD_INT 1
29546: PPUSH
29547: LD_INT 1
29549: PPUSH
29550: CALL_OW 483
// CenterOnXY ( x , y ) ;
29554: LD_VAR 0 2
29558: PPUSH
29559: LD_VAR 0 3
29563: PPUSH
29564: CALL_OW 84
// end ;
29568: LD_VAR 0 4
29572: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
29573: LD_INT 0
29575: PPUSH
29576: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
29577: LD_VAR 0 1
29581: NOT
29582: PUSH
29583: LD_VAR 0 2
29587: PPUSH
29588: LD_VAR 0 3
29592: PPUSH
29593: CALL_OW 488
29597: NOT
29598: OR
29599: PUSH
29600: LD_VAR 0 1
29604: PPUSH
29605: CALL_OW 266
29609: PUSH
29610: LD_INT 3
29612: NONEQUAL
29613: PUSH
29614: LD_VAR 0 1
29618: PPUSH
29619: CALL_OW 247
29623: PUSH
29624: LD_INT 1
29626: EQUAL
29627: NOT
29628: AND
29629: OR
29630: IFFALSE 29634
// exit ;
29632: GO 29783
// if GetType ( factory ) = unit_human then
29634: LD_VAR 0 1
29638: PPUSH
29639: CALL_OW 247
29643: PUSH
29644: LD_INT 1
29646: EQUAL
29647: IFFALSE 29664
// factory := IsInUnit ( factory ) ;
29649: LD_ADDR_VAR 0 1
29653: PUSH
29654: LD_VAR 0 1
29658: PPUSH
29659: CALL_OW 310
29663: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
29664: LD_VAR 0 1
29668: PPUSH
29669: CALL_OW 266
29673: PUSH
29674: LD_INT 3
29676: NONEQUAL
29677: IFFALSE 29681
// exit ;
29679: GO 29783
// if HexInfo ( x , y ) = factory then
29681: LD_VAR 0 2
29685: PPUSH
29686: LD_VAR 0 3
29690: PPUSH
29691: CALL_OW 428
29695: PUSH
29696: LD_VAR 0 1
29700: EQUAL
29701: IFFALSE 29728
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
29703: LD_ADDR_EXP 97
29707: PUSH
29708: LD_EXP 97
29712: PPUSH
29713: LD_VAR 0 1
29717: PPUSH
29718: LD_INT 0
29720: PPUSH
29721: CALL_OW 1
29725: ST_TO_ADDR
29726: GO 29779
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
29728: LD_ADDR_EXP 97
29732: PUSH
29733: LD_EXP 97
29737: PPUSH
29738: LD_VAR 0 1
29742: PPUSH
29743: LD_VAR 0 1
29747: PPUSH
29748: CALL_OW 255
29752: PUSH
29753: LD_VAR 0 1
29757: PUSH
29758: LD_VAR 0 2
29762: PUSH
29763: LD_VAR 0 3
29767: PUSH
29768: EMPTY
29769: LIST
29770: LIST
29771: LIST
29772: LIST
29773: PPUSH
29774: CALL_OW 1
29778: ST_TO_ADDR
// UpdateFactoryWaypoints ;
29779: CALL 29788 0 0
// end ;
29783: LD_VAR 0 4
29787: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
29788: LD_INT 0
29790: PPUSH
29791: PPUSH
29792: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
29793: LD_STRING resetFactoryWaypoint();
29795: PPUSH
29796: CALL_OW 559
// if factoryWaypoints then
29800: LD_EXP 97
29804: IFFALSE 29930
// begin list := PrepareArray ( factoryWaypoints ) ;
29806: LD_ADDR_VAR 0 3
29810: PUSH
29811: LD_EXP 97
29815: PPUSH
29816: CALL 76380 0 1
29820: ST_TO_ADDR
// for i := 1 to list do
29821: LD_ADDR_VAR 0 2
29825: PUSH
29826: DOUBLE
29827: LD_INT 1
29829: DEC
29830: ST_TO_ADDR
29831: LD_VAR 0 3
29835: PUSH
29836: FOR_TO
29837: IFFALSE 29928
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
29839: LD_STRING setFactoryWaypointXY(
29841: PUSH
29842: LD_VAR 0 3
29846: PUSH
29847: LD_VAR 0 2
29851: ARRAY
29852: PUSH
29853: LD_INT 1
29855: ARRAY
29856: STR
29857: PUSH
29858: LD_STRING ,
29860: STR
29861: PUSH
29862: LD_VAR 0 3
29866: PUSH
29867: LD_VAR 0 2
29871: ARRAY
29872: PUSH
29873: LD_INT 2
29875: ARRAY
29876: STR
29877: PUSH
29878: LD_STRING ,
29880: STR
29881: PUSH
29882: LD_VAR 0 3
29886: PUSH
29887: LD_VAR 0 2
29891: ARRAY
29892: PUSH
29893: LD_INT 3
29895: ARRAY
29896: STR
29897: PUSH
29898: LD_STRING ,
29900: STR
29901: PUSH
29902: LD_VAR 0 3
29906: PUSH
29907: LD_VAR 0 2
29911: ARRAY
29912: PUSH
29913: LD_INT 4
29915: ARRAY
29916: STR
29917: PUSH
29918: LD_STRING )
29920: STR
29921: PPUSH
29922: CALL_OW 559
29926: GO 29836
29928: POP
29929: POP
// end ; end ;
29930: LD_VAR 0 1
29934: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
29935: LD_INT 0
29937: PPUSH
// if HexInfo ( x , y ) = warehouse then
29938: LD_VAR 0 2
29942: PPUSH
29943: LD_VAR 0 3
29947: PPUSH
29948: CALL_OW 428
29952: PUSH
29953: LD_VAR 0 1
29957: EQUAL
29958: IFFALSE 29985
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
29960: LD_ADDR_EXP 98
29964: PUSH
29965: LD_EXP 98
29969: PPUSH
29970: LD_VAR 0 1
29974: PPUSH
29975: LD_INT 0
29977: PPUSH
29978: CALL_OW 1
29982: ST_TO_ADDR
29983: GO 30036
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
29985: LD_ADDR_EXP 98
29989: PUSH
29990: LD_EXP 98
29994: PPUSH
29995: LD_VAR 0 1
29999: PPUSH
30000: LD_VAR 0 1
30004: PPUSH
30005: CALL_OW 255
30009: PUSH
30010: LD_VAR 0 1
30014: PUSH
30015: LD_VAR 0 2
30019: PUSH
30020: LD_VAR 0 3
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: LIST
30029: LIST
30030: PPUSH
30031: CALL_OW 1
30035: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
30036: CALL 30045 0 0
// end ;
30040: LD_VAR 0 4
30044: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
30045: LD_INT 0
30047: PPUSH
30048: PPUSH
30049: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
30050: LD_STRING resetWarehouseGatheringPoints();
30052: PPUSH
30053: CALL_OW 559
// if warehouseGatheringPoints then
30057: LD_EXP 98
30061: IFFALSE 30187
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
30063: LD_ADDR_VAR 0 3
30067: PUSH
30068: LD_EXP 98
30072: PPUSH
30073: CALL 76380 0 1
30077: ST_TO_ADDR
// for i := 1 to list do
30078: LD_ADDR_VAR 0 2
30082: PUSH
30083: DOUBLE
30084: LD_INT 1
30086: DEC
30087: ST_TO_ADDR
30088: LD_VAR 0 3
30092: PUSH
30093: FOR_TO
30094: IFFALSE 30185
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
30096: LD_STRING setWarehouseGatheringPointXY(
30098: PUSH
30099: LD_VAR 0 3
30103: PUSH
30104: LD_VAR 0 2
30108: ARRAY
30109: PUSH
30110: LD_INT 1
30112: ARRAY
30113: STR
30114: PUSH
30115: LD_STRING ,
30117: STR
30118: PUSH
30119: LD_VAR 0 3
30123: PUSH
30124: LD_VAR 0 2
30128: ARRAY
30129: PUSH
30130: LD_INT 2
30132: ARRAY
30133: STR
30134: PUSH
30135: LD_STRING ,
30137: STR
30138: PUSH
30139: LD_VAR 0 3
30143: PUSH
30144: LD_VAR 0 2
30148: ARRAY
30149: PUSH
30150: LD_INT 3
30152: ARRAY
30153: STR
30154: PUSH
30155: LD_STRING ,
30157: STR
30158: PUSH
30159: LD_VAR 0 3
30163: PUSH
30164: LD_VAR 0 2
30168: ARRAY
30169: PUSH
30170: LD_INT 4
30172: ARRAY
30173: STR
30174: PUSH
30175: LD_STRING )
30177: STR
30178: PPUSH
30179: CALL_OW 559
30183: GO 30093
30185: POP
30186: POP
// end ; end ;
30187: LD_VAR 0 1
30191: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
30192: LD_EXP 98
30196: IFFALSE 30881
30198: GO 30200
30200: DISABLE
30201: LD_INT 0
30203: PPUSH
30204: PPUSH
30205: PPUSH
30206: PPUSH
30207: PPUSH
30208: PPUSH
30209: PPUSH
30210: PPUSH
30211: PPUSH
// begin enable ;
30212: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
30213: LD_ADDR_VAR 0 3
30217: PUSH
30218: LD_EXP 98
30222: PPUSH
30223: CALL 76380 0 1
30227: ST_TO_ADDR
// if not list then
30228: LD_VAR 0 3
30232: NOT
30233: IFFALSE 30237
// exit ;
30235: GO 30881
// for i := 1 to list do
30237: LD_ADDR_VAR 0 1
30241: PUSH
30242: DOUBLE
30243: LD_INT 1
30245: DEC
30246: ST_TO_ADDR
30247: LD_VAR 0 3
30251: PUSH
30252: FOR_TO
30253: IFFALSE 30879
// begin depot := list [ i ] [ 2 ] ;
30255: LD_ADDR_VAR 0 8
30259: PUSH
30260: LD_VAR 0 3
30264: PUSH
30265: LD_VAR 0 1
30269: ARRAY
30270: PUSH
30271: LD_INT 2
30273: ARRAY
30274: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
30275: LD_ADDR_VAR 0 5
30279: PUSH
30280: LD_VAR 0 3
30284: PUSH
30285: LD_VAR 0 1
30289: ARRAY
30290: PUSH
30291: LD_INT 1
30293: ARRAY
30294: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
30295: LD_VAR 0 8
30299: PPUSH
30300: CALL_OW 301
30304: PUSH
30305: LD_VAR 0 5
30309: PUSH
30310: LD_VAR 0 8
30314: PPUSH
30315: CALL_OW 255
30319: NONEQUAL
30320: OR
30321: IFFALSE 30350
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
30323: LD_ADDR_EXP 98
30327: PUSH
30328: LD_EXP 98
30332: PPUSH
30333: LD_VAR 0 8
30337: PPUSH
30338: LD_INT 0
30340: PPUSH
30341: CALL_OW 1
30345: ST_TO_ADDR
// exit ;
30346: POP
30347: POP
30348: GO 30881
// end ; x := list [ i ] [ 3 ] ;
30350: LD_ADDR_VAR 0 6
30354: PUSH
30355: LD_VAR 0 3
30359: PUSH
30360: LD_VAR 0 1
30364: ARRAY
30365: PUSH
30366: LD_INT 3
30368: ARRAY
30369: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
30370: LD_ADDR_VAR 0 7
30374: PUSH
30375: LD_VAR 0 3
30379: PUSH
30380: LD_VAR 0 1
30384: ARRAY
30385: PUSH
30386: LD_INT 4
30388: ARRAY
30389: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
30390: LD_ADDR_VAR 0 9
30394: PUSH
30395: LD_VAR 0 6
30399: PPUSH
30400: LD_VAR 0 7
30404: PPUSH
30405: LD_INT 16
30407: PPUSH
30408: CALL 74968 0 3
30412: ST_TO_ADDR
// if not cratesNearbyPoint then
30413: LD_VAR 0 9
30417: NOT
30418: IFFALSE 30424
// exit ;
30420: POP
30421: POP
30422: GO 30881
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
30424: LD_ADDR_VAR 0 4
30428: PUSH
30429: LD_INT 22
30431: PUSH
30432: LD_VAR 0 5
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: LD_INT 3
30443: PUSH
30444: LD_INT 60
30446: PUSH
30447: EMPTY
30448: LIST
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: PUSH
30454: LD_INT 91
30456: PUSH
30457: LD_VAR 0 8
30461: PUSH
30462: LD_INT 6
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: LIST
30469: PUSH
30470: LD_INT 2
30472: PUSH
30473: LD_INT 25
30475: PUSH
30476: LD_INT 2
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: PUSH
30483: LD_INT 25
30485: PUSH
30486: LD_INT 16
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: PUSH
30493: EMPTY
30494: LIST
30495: LIST
30496: LIST
30497: PUSH
30498: EMPTY
30499: LIST
30500: LIST
30501: LIST
30502: LIST
30503: PPUSH
30504: CALL_OW 69
30508: PUSH
30509: LD_VAR 0 8
30513: PPUSH
30514: CALL_OW 313
30518: PPUSH
30519: LD_INT 3
30521: PUSH
30522: LD_INT 60
30524: PUSH
30525: EMPTY
30526: LIST
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: PUSH
30532: LD_INT 2
30534: PUSH
30535: LD_INT 25
30537: PUSH
30538: LD_INT 2
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: PUSH
30545: LD_INT 25
30547: PUSH
30548: LD_INT 16
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: LIST
30559: PUSH
30560: EMPTY
30561: LIST
30562: LIST
30563: PPUSH
30564: CALL_OW 72
30568: UNION
30569: ST_TO_ADDR
// if tmp then
30570: LD_VAR 0 4
30574: IFFALSE 30654
// begin tmp := ShrinkArray ( tmp , 3 ) ;
30576: LD_ADDR_VAR 0 4
30580: PUSH
30581: LD_VAR 0 4
30585: PPUSH
30586: LD_INT 3
30588: PPUSH
30589: CALL 72937 0 2
30593: ST_TO_ADDR
// for j in tmp do
30594: LD_ADDR_VAR 0 2
30598: PUSH
30599: LD_VAR 0 4
30603: PUSH
30604: FOR_IN
30605: IFFALSE 30648
// begin if IsInUnit ( j ) then
30607: LD_VAR 0 2
30611: PPUSH
30612: CALL_OW 310
30616: IFFALSE 30627
// ComExit ( j ) ;
30618: LD_VAR 0 2
30622: PPUSH
30623: CALL 73020 0 1
// AddComCollect ( j , x , y ) ;
30627: LD_VAR 0 2
30631: PPUSH
30632: LD_VAR 0 6
30636: PPUSH
30637: LD_VAR 0 7
30641: PPUSH
30642: CALL_OW 177
// end ;
30646: GO 30604
30648: POP
30649: POP
// exit ;
30650: POP
30651: POP
30652: GO 30881
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
30654: LD_ADDR_VAR 0 4
30658: PUSH
30659: LD_INT 22
30661: PUSH
30662: LD_VAR 0 5
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: LD_INT 91
30673: PUSH
30674: LD_VAR 0 8
30678: PUSH
30679: LD_INT 8
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: LIST
30686: PUSH
30687: LD_INT 2
30689: PUSH
30690: LD_INT 34
30692: PUSH
30693: LD_INT 12
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: PUSH
30700: LD_INT 34
30702: PUSH
30703: LD_INT 51
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: PUSH
30710: LD_INT 34
30712: PUSH
30713: LD_INT 32
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: PUSH
30720: LD_INT 34
30722: PUSH
30723: LD_INT 89
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: LIST
30734: LIST
30735: LIST
30736: PUSH
30737: EMPTY
30738: LIST
30739: LIST
30740: LIST
30741: PPUSH
30742: CALL_OW 69
30746: ST_TO_ADDR
// if tmp then
30747: LD_VAR 0 4
30751: IFFALSE 30877
// begin for j in tmp do
30753: LD_ADDR_VAR 0 2
30757: PUSH
30758: LD_VAR 0 4
30762: PUSH
30763: FOR_IN
30764: IFFALSE 30875
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
30766: LD_VAR 0 2
30770: PPUSH
30771: CALL_OW 262
30775: PUSH
30776: LD_INT 3
30778: EQUAL
30779: PUSH
30780: LD_VAR 0 2
30784: PPUSH
30785: CALL_OW 261
30789: PUSH
30790: LD_INT 20
30792: GREATER
30793: OR
30794: PUSH
30795: LD_VAR 0 2
30799: PPUSH
30800: CALL_OW 314
30804: NOT
30805: AND
30806: PUSH
30807: LD_VAR 0 2
30811: PPUSH
30812: CALL_OW 263
30816: PUSH
30817: LD_INT 1
30819: NONEQUAL
30820: PUSH
30821: LD_VAR 0 2
30825: PPUSH
30826: CALL_OW 311
30830: OR
30831: AND
30832: IFFALSE 30873
// begin ComCollect ( j , x , y ) ;
30834: LD_VAR 0 2
30838: PPUSH
30839: LD_VAR 0 6
30843: PPUSH
30844: LD_VAR 0 7
30848: PPUSH
30849: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
30853: LD_VAR 0 2
30857: PPUSH
30858: LD_VAR 0 8
30862: PPUSH
30863: CALL_OW 172
// exit ;
30867: POP
30868: POP
30869: POP
30870: POP
30871: GO 30881
// end ;
30873: GO 30763
30875: POP
30876: POP
// end ; end ;
30877: GO 30252
30879: POP
30880: POP
// end ; end_of_file
30881: PPOPN 9
30883: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
30884: LD_INT 0
30886: PPUSH
30887: PPUSH
30888: PPUSH
30889: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
30890: LD_VAR 0 1
30894: PPUSH
30895: CALL_OW 264
30899: PUSH
30900: LD_INT 91
30902: EQUAL
30903: IFFALSE 30975
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
30905: LD_INT 68
30907: PPUSH
30908: LD_VAR 0 1
30912: PPUSH
30913: CALL_OW 255
30917: PPUSH
30918: CALL_OW 321
30922: PUSH
30923: LD_INT 2
30925: EQUAL
30926: IFFALSE 30938
// eff := 70 else
30928: LD_ADDR_VAR 0 4
30932: PUSH
30933: LD_INT 70
30935: ST_TO_ADDR
30936: GO 30946
// eff := 30 ;
30938: LD_ADDR_VAR 0 4
30942: PUSH
30943: LD_INT 30
30945: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
30946: LD_VAR 0 1
30950: PPUSH
30951: CALL_OW 250
30955: PPUSH
30956: LD_VAR 0 1
30960: PPUSH
30961: CALL_OW 251
30965: PPUSH
30966: LD_VAR 0 4
30970: PPUSH
30971: CALL_OW 495
// end ; end ;
30975: LD_VAR 0 2
30979: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
30980: LD_INT 0
30982: PPUSH
// end ;
30983: LD_VAR 0 4
30987: RET
// export function SOS_Command ( cmd ) ; begin
30988: LD_INT 0
30990: PPUSH
// end ;
30991: LD_VAR 0 2
30995: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
30996: LD_INT 0
30998: PPUSH
// end ;
30999: LD_VAR 0 6
31003: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
31004: LD_INT 0
31006: PPUSH
31007: PPUSH
// if not vehicle or not factory then
31008: LD_VAR 0 1
31012: NOT
31013: PUSH
31014: LD_VAR 0 2
31018: NOT
31019: OR
31020: IFFALSE 31024
// exit ;
31022: GO 31255
// if factoryWaypoints >= factory then
31024: LD_EXP 97
31028: PUSH
31029: LD_VAR 0 2
31033: GREATEREQUAL
31034: IFFALSE 31255
// if factoryWaypoints [ factory ] then
31036: LD_EXP 97
31040: PUSH
31041: LD_VAR 0 2
31045: ARRAY
31046: IFFALSE 31255
// begin if GetControl ( vehicle ) = control_manual then
31048: LD_VAR 0 1
31052: PPUSH
31053: CALL_OW 263
31057: PUSH
31058: LD_INT 1
31060: EQUAL
31061: IFFALSE 31142
// begin driver := IsDrivenBy ( vehicle ) ;
31063: LD_ADDR_VAR 0 4
31067: PUSH
31068: LD_VAR 0 1
31072: PPUSH
31073: CALL_OW 311
31077: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
31078: LD_VAR 0 4
31082: PPUSH
31083: LD_EXP 97
31087: PUSH
31088: LD_VAR 0 2
31092: ARRAY
31093: PUSH
31094: LD_INT 3
31096: ARRAY
31097: PPUSH
31098: LD_EXP 97
31102: PUSH
31103: LD_VAR 0 2
31107: ARRAY
31108: PUSH
31109: LD_INT 4
31111: ARRAY
31112: PPUSH
31113: CALL_OW 171
// AddComExitVehicle ( driver ) ;
31117: LD_VAR 0 4
31121: PPUSH
31122: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
31126: LD_VAR 0 4
31130: PPUSH
31131: LD_VAR 0 2
31135: PPUSH
31136: CALL_OW 180
// end else
31140: GO 31255
// if GetControl ( vehicle ) = control_remote then
31142: LD_VAR 0 1
31146: PPUSH
31147: CALL_OW 263
31151: PUSH
31152: LD_INT 2
31154: EQUAL
31155: IFFALSE 31216
// begin wait ( 0 0$2 ) ;
31157: LD_INT 70
31159: PPUSH
31160: CALL_OW 67
// if Connect ( vehicle ) then
31164: LD_VAR 0 1
31168: PPUSH
31169: CALL 43279 0 1
31173: IFFALSE 31214
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
31175: LD_VAR 0 1
31179: PPUSH
31180: LD_EXP 97
31184: PUSH
31185: LD_VAR 0 2
31189: ARRAY
31190: PUSH
31191: LD_INT 3
31193: ARRAY
31194: PPUSH
31195: LD_EXP 97
31199: PUSH
31200: LD_VAR 0 2
31204: ARRAY
31205: PUSH
31206: LD_INT 4
31208: ARRAY
31209: PPUSH
31210: CALL_OW 171
// end else
31214: GO 31255
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
31216: LD_VAR 0 1
31220: PPUSH
31221: LD_EXP 97
31225: PUSH
31226: LD_VAR 0 2
31230: ARRAY
31231: PUSH
31232: LD_INT 3
31234: ARRAY
31235: PPUSH
31236: LD_EXP 97
31240: PUSH
31241: LD_VAR 0 2
31245: ARRAY
31246: PUSH
31247: LD_INT 4
31249: ARRAY
31250: PPUSH
31251: CALL_OW 171
// end ; end ;
31255: LD_VAR 0 3
31259: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
31260: LD_INT 0
31262: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
31263: LD_VAR 0 1
31267: PUSH
31268: LD_INT 250
31270: EQUAL
31271: PUSH
31272: LD_VAR 0 2
31276: PPUSH
31277: CALL_OW 264
31281: PUSH
31282: LD_INT 81
31284: EQUAL
31285: AND
31286: IFFALSE 31307
// MinerPlaceMine ( unit , x , y ) ;
31288: LD_VAR 0 2
31292: PPUSH
31293: LD_VAR 0 4
31297: PPUSH
31298: LD_VAR 0 5
31302: PPUSH
31303: CALL 33692 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
31307: LD_VAR 0 1
31311: PUSH
31312: LD_INT 251
31314: EQUAL
31315: PUSH
31316: LD_VAR 0 2
31320: PPUSH
31321: CALL_OW 264
31325: PUSH
31326: LD_INT 81
31328: EQUAL
31329: AND
31330: IFFALSE 31351
// MinerDetonateMine ( unit , x , y ) ;
31332: LD_VAR 0 2
31336: PPUSH
31337: LD_VAR 0 4
31341: PPUSH
31342: LD_VAR 0 5
31346: PPUSH
31347: CALL 33967 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
31351: LD_VAR 0 1
31355: PUSH
31356: LD_INT 252
31358: EQUAL
31359: PUSH
31360: LD_VAR 0 2
31364: PPUSH
31365: CALL_OW 264
31369: PUSH
31370: LD_INT 81
31372: EQUAL
31373: AND
31374: IFFALSE 31395
// MinerCreateMinefield ( unit , x , y ) ;
31376: LD_VAR 0 2
31380: PPUSH
31381: LD_VAR 0 4
31385: PPUSH
31386: LD_VAR 0 5
31390: PPUSH
31391: CALL 34384 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
31395: LD_VAR 0 1
31399: PUSH
31400: LD_INT 253
31402: EQUAL
31403: PUSH
31404: LD_VAR 0 2
31408: PPUSH
31409: CALL_OW 257
31413: PUSH
31414: LD_INT 5
31416: EQUAL
31417: AND
31418: IFFALSE 31439
// ComBinocular ( unit , x , y ) ;
31420: LD_VAR 0 2
31424: PPUSH
31425: LD_VAR 0 4
31429: PPUSH
31430: LD_VAR 0 5
31434: PPUSH
31435: CALL 34753 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
31439: LD_VAR 0 1
31443: PUSH
31444: LD_INT 254
31446: EQUAL
31447: PUSH
31448: LD_VAR 0 2
31452: PPUSH
31453: CALL_OW 264
31457: PUSH
31458: LD_INT 99
31460: EQUAL
31461: AND
31462: PUSH
31463: LD_VAR 0 3
31467: PPUSH
31468: CALL_OW 263
31472: PUSH
31473: LD_INT 3
31475: EQUAL
31476: AND
31477: IFFALSE 31493
// HackDestroyVehicle ( unit , selectedUnit ) ;
31479: LD_VAR 0 2
31483: PPUSH
31484: LD_VAR 0 3
31488: PPUSH
31489: CALL 33056 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
31493: LD_VAR 0 1
31497: PUSH
31498: LD_INT 255
31500: EQUAL
31501: PUSH
31502: LD_VAR 0 2
31506: PPUSH
31507: CALL_OW 264
31511: PUSH
31512: LD_INT 14
31514: PUSH
31515: LD_INT 53
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: IN
31522: AND
31523: PUSH
31524: LD_VAR 0 4
31528: PPUSH
31529: LD_VAR 0 5
31533: PPUSH
31534: CALL_OW 488
31538: AND
31539: IFFALSE 31563
// CutTreeXYR ( unit , x , y , 12 ) ;
31541: LD_VAR 0 2
31545: PPUSH
31546: LD_VAR 0 4
31550: PPUSH
31551: LD_VAR 0 5
31555: PPUSH
31556: LD_INT 12
31558: PPUSH
31559: CALL 31626 0 4
// if cmd = 256 then
31563: LD_VAR 0 1
31567: PUSH
31568: LD_INT 256
31570: EQUAL
31571: IFFALSE 31592
// SetFactoryWaypoint ( unit , x , y ) ;
31573: LD_VAR 0 2
31577: PPUSH
31578: LD_VAR 0 4
31582: PPUSH
31583: LD_VAR 0 5
31587: PPUSH
31588: CALL 29573 0 3
// if cmd = 257 then
31592: LD_VAR 0 1
31596: PUSH
31597: LD_INT 257
31599: EQUAL
31600: IFFALSE 31621
// SetWarehouseGatheringPoint ( unit , x , y ) ;
31602: LD_VAR 0 2
31606: PPUSH
31607: LD_VAR 0 4
31611: PPUSH
31612: LD_VAR 0 5
31616: PPUSH
31617: CALL 29935 0 3
// end ;
31621: LD_VAR 0 6
31625: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
31626: LD_INT 0
31628: PPUSH
31629: PPUSH
31630: PPUSH
31631: PPUSH
31632: PPUSH
31633: PPUSH
31634: PPUSH
31635: PPUSH
31636: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
31637: LD_VAR 0 1
31641: NOT
31642: PUSH
31643: LD_VAR 0 2
31647: PPUSH
31648: LD_VAR 0 3
31652: PPUSH
31653: CALL_OW 488
31657: NOT
31658: OR
31659: PUSH
31660: LD_VAR 0 4
31664: NOT
31665: OR
31666: IFFALSE 31670
// exit ;
31668: GO 32010
// list := [ ] ;
31670: LD_ADDR_VAR 0 13
31674: PUSH
31675: EMPTY
31676: ST_TO_ADDR
// if x - r < 0 then
31677: LD_VAR 0 2
31681: PUSH
31682: LD_VAR 0 4
31686: MINUS
31687: PUSH
31688: LD_INT 0
31690: LESS
31691: IFFALSE 31703
// min_x := 0 else
31693: LD_ADDR_VAR 0 7
31697: PUSH
31698: LD_INT 0
31700: ST_TO_ADDR
31701: GO 31719
// min_x := x - r ;
31703: LD_ADDR_VAR 0 7
31707: PUSH
31708: LD_VAR 0 2
31712: PUSH
31713: LD_VAR 0 4
31717: MINUS
31718: ST_TO_ADDR
// if y - r < 0 then
31719: LD_VAR 0 3
31723: PUSH
31724: LD_VAR 0 4
31728: MINUS
31729: PUSH
31730: LD_INT 0
31732: LESS
31733: IFFALSE 31745
// min_y := 0 else
31735: LD_ADDR_VAR 0 8
31739: PUSH
31740: LD_INT 0
31742: ST_TO_ADDR
31743: GO 31761
// min_y := y - r ;
31745: LD_ADDR_VAR 0 8
31749: PUSH
31750: LD_VAR 0 3
31754: PUSH
31755: LD_VAR 0 4
31759: MINUS
31760: ST_TO_ADDR
// max_x := x + r ;
31761: LD_ADDR_VAR 0 9
31765: PUSH
31766: LD_VAR 0 2
31770: PUSH
31771: LD_VAR 0 4
31775: PLUS
31776: ST_TO_ADDR
// max_y := y + r ;
31777: LD_ADDR_VAR 0 10
31781: PUSH
31782: LD_VAR 0 3
31786: PUSH
31787: LD_VAR 0 4
31791: PLUS
31792: ST_TO_ADDR
// for _x = min_x to max_x do
31793: LD_ADDR_VAR 0 11
31797: PUSH
31798: DOUBLE
31799: LD_VAR 0 7
31803: DEC
31804: ST_TO_ADDR
31805: LD_VAR 0 9
31809: PUSH
31810: FOR_TO
31811: IFFALSE 31928
// for _y = min_y to max_y do
31813: LD_ADDR_VAR 0 12
31817: PUSH
31818: DOUBLE
31819: LD_VAR 0 8
31823: DEC
31824: ST_TO_ADDR
31825: LD_VAR 0 10
31829: PUSH
31830: FOR_TO
31831: IFFALSE 31924
// begin if not ValidHex ( _x , _y ) then
31833: LD_VAR 0 11
31837: PPUSH
31838: LD_VAR 0 12
31842: PPUSH
31843: CALL_OW 488
31847: NOT
31848: IFFALSE 31852
// continue ;
31850: GO 31830
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
31852: LD_VAR 0 11
31856: PPUSH
31857: LD_VAR 0 12
31861: PPUSH
31862: CALL_OW 351
31866: PUSH
31867: LD_VAR 0 11
31871: PPUSH
31872: LD_VAR 0 12
31876: PPUSH
31877: CALL_OW 554
31881: AND
31882: IFFALSE 31922
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
31884: LD_ADDR_VAR 0 13
31888: PUSH
31889: LD_VAR 0 13
31893: PPUSH
31894: LD_VAR 0 13
31898: PUSH
31899: LD_INT 1
31901: PLUS
31902: PPUSH
31903: LD_VAR 0 11
31907: PUSH
31908: LD_VAR 0 12
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PPUSH
31917: CALL_OW 2
31921: ST_TO_ADDR
// end ;
31922: GO 31830
31924: POP
31925: POP
31926: GO 31810
31928: POP
31929: POP
// if not list then
31930: LD_VAR 0 13
31934: NOT
31935: IFFALSE 31939
// exit ;
31937: GO 32010
// for i in list do
31939: LD_ADDR_VAR 0 6
31943: PUSH
31944: LD_VAR 0 13
31948: PUSH
31949: FOR_IN
31950: IFFALSE 32008
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
31952: LD_VAR 0 1
31956: PPUSH
31957: LD_STRING M
31959: PUSH
31960: LD_VAR 0 6
31964: PUSH
31965: LD_INT 1
31967: ARRAY
31968: PUSH
31969: LD_VAR 0 6
31973: PUSH
31974: LD_INT 2
31976: ARRAY
31977: PUSH
31978: LD_INT 0
31980: PUSH
31981: LD_INT 0
31983: PUSH
31984: LD_INT 0
31986: PUSH
31987: LD_INT 0
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: LIST
31994: LIST
31995: LIST
31996: LIST
31997: LIST
31998: PUSH
31999: EMPTY
32000: LIST
32001: PPUSH
32002: CALL_OW 447
32006: GO 31949
32008: POP
32009: POP
// end ;
32010: LD_VAR 0 5
32014: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
32015: LD_EXP 100
32019: NOT
32020: IFFALSE 32070
32022: GO 32024
32024: DISABLE
// begin initHack := true ;
32025: LD_ADDR_EXP 100
32029: PUSH
32030: LD_INT 1
32032: ST_TO_ADDR
// hackTanks := [ ] ;
32033: LD_ADDR_EXP 101
32037: PUSH
32038: EMPTY
32039: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
32040: LD_ADDR_EXP 102
32044: PUSH
32045: EMPTY
32046: ST_TO_ADDR
// hackLimit := 3 ;
32047: LD_ADDR_EXP 103
32051: PUSH
32052: LD_INT 3
32054: ST_TO_ADDR
// hackDist := 12 ;
32055: LD_ADDR_EXP 104
32059: PUSH
32060: LD_INT 12
32062: ST_TO_ADDR
// hackCounter := [ ] ;
32063: LD_ADDR_EXP 105
32067: PUSH
32068: EMPTY
32069: ST_TO_ADDR
// end ;
32070: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
32071: LD_EXP 100
32075: PUSH
32076: LD_INT 34
32078: PUSH
32079: LD_INT 99
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: PPUSH
32086: CALL_OW 69
32090: AND
32091: IFFALSE 32344
32093: GO 32095
32095: DISABLE
32096: LD_INT 0
32098: PPUSH
32099: PPUSH
// begin enable ;
32100: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
32101: LD_ADDR_VAR 0 1
32105: PUSH
32106: LD_INT 34
32108: PUSH
32109: LD_INT 99
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: PPUSH
32116: CALL_OW 69
32120: PUSH
32121: FOR_IN
32122: IFFALSE 32342
// begin if not i in hackTanks then
32124: LD_VAR 0 1
32128: PUSH
32129: LD_EXP 101
32133: IN
32134: NOT
32135: IFFALSE 32218
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
32137: LD_ADDR_EXP 101
32141: PUSH
32142: LD_EXP 101
32146: PPUSH
32147: LD_EXP 101
32151: PUSH
32152: LD_INT 1
32154: PLUS
32155: PPUSH
32156: LD_VAR 0 1
32160: PPUSH
32161: CALL_OW 1
32165: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
32166: LD_ADDR_EXP 102
32170: PUSH
32171: LD_EXP 102
32175: PPUSH
32176: LD_EXP 102
32180: PUSH
32181: LD_INT 1
32183: PLUS
32184: PPUSH
32185: EMPTY
32186: PPUSH
32187: CALL_OW 1
32191: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
32192: LD_ADDR_EXP 105
32196: PUSH
32197: LD_EXP 105
32201: PPUSH
32202: LD_EXP 105
32206: PUSH
32207: LD_INT 1
32209: PLUS
32210: PPUSH
32211: EMPTY
32212: PPUSH
32213: CALL_OW 1
32217: ST_TO_ADDR
// end ; if not IsOk ( i ) then
32218: LD_VAR 0 1
32222: PPUSH
32223: CALL_OW 302
32227: NOT
32228: IFFALSE 32241
// begin HackUnlinkAll ( i ) ;
32230: LD_VAR 0 1
32234: PPUSH
32235: CALL 32347 0 1
// continue ;
32239: GO 32121
// end ; HackCheckCapturedStatus ( i ) ;
32241: LD_VAR 0 1
32245: PPUSH
32246: CALL 32790 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
32250: LD_ADDR_VAR 0 2
32254: PUSH
32255: LD_INT 81
32257: PUSH
32258: LD_VAR 0 1
32262: PPUSH
32263: CALL_OW 255
32267: PUSH
32268: EMPTY
32269: LIST
32270: LIST
32271: PUSH
32272: LD_INT 33
32274: PUSH
32275: LD_INT 3
32277: PUSH
32278: EMPTY
32279: LIST
32280: LIST
32281: PUSH
32282: LD_INT 91
32284: PUSH
32285: LD_VAR 0 1
32289: PUSH
32290: LD_EXP 104
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: LIST
32299: PUSH
32300: LD_INT 50
32302: PUSH
32303: EMPTY
32304: LIST
32305: PUSH
32306: EMPTY
32307: LIST
32308: LIST
32309: LIST
32310: LIST
32311: PPUSH
32312: CALL_OW 69
32316: ST_TO_ADDR
// if not tmp then
32317: LD_VAR 0 2
32321: NOT
32322: IFFALSE 32326
// continue ;
32324: GO 32121
// HackLink ( i , tmp ) ;
32326: LD_VAR 0 1
32330: PPUSH
32331: LD_VAR 0 2
32335: PPUSH
32336: CALL 32483 0 2
// end ;
32340: GO 32121
32342: POP
32343: POP
// end ;
32344: PPOPN 2
32346: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
32347: LD_INT 0
32349: PPUSH
32350: PPUSH
32351: PPUSH
// if not hack in hackTanks then
32352: LD_VAR 0 1
32356: PUSH
32357: LD_EXP 101
32361: IN
32362: NOT
32363: IFFALSE 32367
// exit ;
32365: GO 32478
// index := GetElementIndex ( hackTanks , hack ) ;
32367: LD_ADDR_VAR 0 4
32371: PUSH
32372: LD_EXP 101
32376: PPUSH
32377: LD_VAR 0 1
32381: PPUSH
32382: CALL 40095 0 2
32386: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
32387: LD_EXP 102
32391: PUSH
32392: LD_VAR 0 4
32396: ARRAY
32397: IFFALSE 32478
// begin for i in hackTanksCaptured [ index ] do
32399: LD_ADDR_VAR 0 3
32403: PUSH
32404: LD_EXP 102
32408: PUSH
32409: LD_VAR 0 4
32413: ARRAY
32414: PUSH
32415: FOR_IN
32416: IFFALSE 32442
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
32418: LD_VAR 0 3
32422: PUSH
32423: LD_INT 1
32425: ARRAY
32426: PPUSH
32427: LD_VAR 0 3
32431: PUSH
32432: LD_INT 2
32434: ARRAY
32435: PPUSH
32436: CALL_OW 235
32440: GO 32415
32442: POP
32443: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
32444: LD_ADDR_EXP 102
32448: PUSH
32449: LD_EXP 102
32453: PPUSH
32454: LD_VAR 0 4
32458: PPUSH
32459: EMPTY
32460: PPUSH
32461: CALL_OW 1
32465: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
32466: LD_VAR 0 1
32470: PPUSH
32471: LD_INT 0
32473: PPUSH
32474: CALL_OW 505
// end ; end ;
32478: LD_VAR 0 2
32482: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
32483: LD_INT 0
32485: PPUSH
32486: PPUSH
32487: PPUSH
// if not hack in hackTanks or not vehicles then
32488: LD_VAR 0 1
32492: PUSH
32493: LD_EXP 101
32497: IN
32498: NOT
32499: PUSH
32500: LD_VAR 0 2
32504: NOT
32505: OR
32506: IFFALSE 32510
// exit ;
32508: GO 32785
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
32510: LD_ADDR_VAR 0 2
32514: PUSH
32515: LD_VAR 0 1
32519: PPUSH
32520: LD_VAR 0 2
32524: PPUSH
32525: LD_INT 1
32527: PPUSH
32528: LD_INT 1
32530: PPUSH
32531: CALL 40745 0 4
32535: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
32536: LD_ADDR_VAR 0 5
32540: PUSH
32541: LD_EXP 101
32545: PPUSH
32546: LD_VAR 0 1
32550: PPUSH
32551: CALL 40095 0 2
32555: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
32556: LD_EXP 102
32560: PUSH
32561: LD_VAR 0 5
32565: ARRAY
32566: PUSH
32567: LD_EXP 103
32571: LESS
32572: IFFALSE 32761
// begin for i := 1 to vehicles do
32574: LD_ADDR_VAR 0 4
32578: PUSH
32579: DOUBLE
32580: LD_INT 1
32582: DEC
32583: ST_TO_ADDR
32584: LD_VAR 0 2
32588: PUSH
32589: FOR_TO
32590: IFFALSE 32759
// begin if hackTanksCaptured [ index ] = hackLimit then
32592: LD_EXP 102
32596: PUSH
32597: LD_VAR 0 5
32601: ARRAY
32602: PUSH
32603: LD_EXP 103
32607: EQUAL
32608: IFFALSE 32612
// break ;
32610: GO 32759
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
32612: LD_ADDR_EXP 105
32616: PUSH
32617: LD_EXP 105
32621: PPUSH
32622: LD_VAR 0 5
32626: PPUSH
32627: LD_EXP 105
32631: PUSH
32632: LD_VAR 0 5
32636: ARRAY
32637: PUSH
32638: LD_INT 1
32640: PLUS
32641: PPUSH
32642: CALL_OW 1
32646: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
32647: LD_ADDR_EXP 102
32651: PUSH
32652: LD_EXP 102
32656: PPUSH
32657: LD_VAR 0 5
32661: PUSH
32662: LD_EXP 102
32666: PUSH
32667: LD_VAR 0 5
32671: ARRAY
32672: PUSH
32673: LD_INT 1
32675: PLUS
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: PPUSH
32681: LD_VAR 0 2
32685: PUSH
32686: LD_VAR 0 4
32690: ARRAY
32691: PUSH
32692: LD_VAR 0 2
32696: PUSH
32697: LD_VAR 0 4
32701: ARRAY
32702: PPUSH
32703: CALL_OW 255
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: PPUSH
32712: CALL 40310 0 3
32716: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
32717: LD_VAR 0 2
32721: PUSH
32722: LD_VAR 0 4
32726: ARRAY
32727: PPUSH
32728: LD_VAR 0 1
32732: PPUSH
32733: CALL_OW 255
32737: PPUSH
32738: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
32742: LD_VAR 0 2
32746: PUSH
32747: LD_VAR 0 4
32751: ARRAY
32752: PPUSH
32753: CALL_OW 141
// end ;
32757: GO 32589
32759: POP
32760: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
32761: LD_VAR 0 1
32765: PPUSH
32766: LD_EXP 102
32770: PUSH
32771: LD_VAR 0 5
32775: ARRAY
32776: PUSH
32777: LD_INT 0
32779: PLUS
32780: PPUSH
32781: CALL_OW 505
// end ;
32785: LD_VAR 0 3
32789: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
32790: LD_INT 0
32792: PPUSH
32793: PPUSH
32794: PPUSH
32795: PPUSH
// if not hack in hackTanks then
32796: LD_VAR 0 1
32800: PUSH
32801: LD_EXP 101
32805: IN
32806: NOT
32807: IFFALSE 32811
// exit ;
32809: GO 33051
// index := GetElementIndex ( hackTanks , hack ) ;
32811: LD_ADDR_VAR 0 4
32815: PUSH
32816: LD_EXP 101
32820: PPUSH
32821: LD_VAR 0 1
32825: PPUSH
32826: CALL 40095 0 2
32830: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
32831: LD_ADDR_VAR 0 3
32835: PUSH
32836: DOUBLE
32837: LD_EXP 102
32841: PUSH
32842: LD_VAR 0 4
32846: ARRAY
32847: INC
32848: ST_TO_ADDR
32849: LD_INT 1
32851: PUSH
32852: FOR_DOWNTO
32853: IFFALSE 33025
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
32855: LD_ADDR_VAR 0 5
32859: PUSH
32860: LD_EXP 102
32864: PUSH
32865: LD_VAR 0 4
32869: ARRAY
32870: PUSH
32871: LD_VAR 0 3
32875: ARRAY
32876: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
32877: LD_VAR 0 5
32881: PUSH
32882: LD_INT 1
32884: ARRAY
32885: PPUSH
32886: CALL_OW 302
32890: NOT
32891: PUSH
32892: LD_VAR 0 5
32896: PUSH
32897: LD_INT 1
32899: ARRAY
32900: PPUSH
32901: CALL_OW 255
32905: PUSH
32906: LD_VAR 0 1
32910: PPUSH
32911: CALL_OW 255
32915: NONEQUAL
32916: OR
32917: IFFALSE 33023
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
32919: LD_VAR 0 5
32923: PUSH
32924: LD_INT 1
32926: ARRAY
32927: PPUSH
32928: CALL_OW 305
32932: PUSH
32933: LD_VAR 0 5
32937: PUSH
32938: LD_INT 1
32940: ARRAY
32941: PPUSH
32942: CALL_OW 255
32946: PUSH
32947: LD_VAR 0 1
32951: PPUSH
32952: CALL_OW 255
32956: EQUAL
32957: AND
32958: IFFALSE 32982
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
32960: LD_VAR 0 5
32964: PUSH
32965: LD_INT 1
32967: ARRAY
32968: PPUSH
32969: LD_VAR 0 5
32973: PUSH
32974: LD_INT 2
32976: ARRAY
32977: PPUSH
32978: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
32982: LD_ADDR_EXP 102
32986: PUSH
32987: LD_EXP 102
32991: PPUSH
32992: LD_VAR 0 4
32996: PPUSH
32997: LD_EXP 102
33001: PUSH
33002: LD_VAR 0 4
33006: ARRAY
33007: PPUSH
33008: LD_VAR 0 3
33012: PPUSH
33013: CALL_OW 3
33017: PPUSH
33018: CALL_OW 1
33022: ST_TO_ADDR
// end ; end ;
33023: GO 32852
33025: POP
33026: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33027: LD_VAR 0 1
33031: PPUSH
33032: LD_EXP 102
33036: PUSH
33037: LD_VAR 0 4
33041: ARRAY
33042: PUSH
33043: LD_INT 0
33045: PLUS
33046: PPUSH
33047: CALL_OW 505
// end ;
33051: LD_VAR 0 2
33055: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
33056: LD_INT 0
33058: PPUSH
33059: PPUSH
33060: PPUSH
33061: PPUSH
// if not hack in hackTanks then
33062: LD_VAR 0 1
33066: PUSH
33067: LD_EXP 101
33071: IN
33072: NOT
33073: IFFALSE 33077
// exit ;
33075: GO 33162
// index := GetElementIndex ( hackTanks , hack ) ;
33077: LD_ADDR_VAR 0 5
33081: PUSH
33082: LD_EXP 101
33086: PPUSH
33087: LD_VAR 0 1
33091: PPUSH
33092: CALL 40095 0 2
33096: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
33097: LD_ADDR_VAR 0 4
33101: PUSH
33102: DOUBLE
33103: LD_INT 1
33105: DEC
33106: ST_TO_ADDR
33107: LD_EXP 102
33111: PUSH
33112: LD_VAR 0 5
33116: ARRAY
33117: PUSH
33118: FOR_TO
33119: IFFALSE 33160
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
33121: LD_EXP 102
33125: PUSH
33126: LD_VAR 0 5
33130: ARRAY
33131: PUSH
33132: LD_VAR 0 4
33136: ARRAY
33137: PUSH
33138: LD_INT 1
33140: ARRAY
33141: PUSH
33142: LD_VAR 0 2
33146: EQUAL
33147: IFFALSE 33158
// KillUnit ( vehicle ) ;
33149: LD_VAR 0 2
33153: PPUSH
33154: CALL_OW 66
33158: GO 33118
33160: POP
33161: POP
// end ;
33162: LD_VAR 0 3
33166: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
33167: LD_EXP 106
33171: NOT
33172: IFFALSE 33207
33174: GO 33176
33176: DISABLE
// begin initMiner := true ;
33177: LD_ADDR_EXP 106
33181: PUSH
33182: LD_INT 1
33184: ST_TO_ADDR
// minersList := [ ] ;
33185: LD_ADDR_EXP 107
33189: PUSH
33190: EMPTY
33191: ST_TO_ADDR
// minerMinesList := [ ] ;
33192: LD_ADDR_EXP 108
33196: PUSH
33197: EMPTY
33198: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
33199: LD_ADDR_EXP 109
33203: PUSH
33204: LD_INT 5
33206: ST_TO_ADDR
// end ;
33207: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
33208: LD_EXP 106
33212: PUSH
33213: LD_INT 34
33215: PUSH
33216: LD_INT 81
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: PPUSH
33223: CALL_OW 69
33227: AND
33228: IFFALSE 33689
33230: GO 33232
33232: DISABLE
33233: LD_INT 0
33235: PPUSH
33236: PPUSH
33237: PPUSH
33238: PPUSH
// begin enable ;
33239: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
33240: LD_ADDR_VAR 0 1
33244: PUSH
33245: LD_INT 34
33247: PUSH
33248: LD_INT 81
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PPUSH
33255: CALL_OW 69
33259: PUSH
33260: FOR_IN
33261: IFFALSE 33333
// begin if not i in minersList then
33263: LD_VAR 0 1
33267: PUSH
33268: LD_EXP 107
33272: IN
33273: NOT
33274: IFFALSE 33331
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
33276: LD_ADDR_EXP 107
33280: PUSH
33281: LD_EXP 107
33285: PPUSH
33286: LD_EXP 107
33290: PUSH
33291: LD_INT 1
33293: PLUS
33294: PPUSH
33295: LD_VAR 0 1
33299: PPUSH
33300: CALL_OW 1
33304: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
33305: LD_ADDR_EXP 108
33309: PUSH
33310: LD_EXP 108
33314: PPUSH
33315: LD_EXP 108
33319: PUSH
33320: LD_INT 1
33322: PLUS
33323: PPUSH
33324: EMPTY
33325: PPUSH
33326: CALL_OW 1
33330: ST_TO_ADDR
// end end ;
33331: GO 33260
33333: POP
33334: POP
// for i := minerMinesList downto 1 do
33335: LD_ADDR_VAR 0 1
33339: PUSH
33340: DOUBLE
33341: LD_EXP 108
33345: INC
33346: ST_TO_ADDR
33347: LD_INT 1
33349: PUSH
33350: FOR_DOWNTO
33351: IFFALSE 33687
// begin if IsLive ( minersList [ i ] ) then
33353: LD_EXP 107
33357: PUSH
33358: LD_VAR 0 1
33362: ARRAY
33363: PPUSH
33364: CALL_OW 300
33368: IFFALSE 33396
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
33370: LD_EXP 107
33374: PUSH
33375: LD_VAR 0 1
33379: ARRAY
33380: PPUSH
33381: LD_EXP 108
33385: PUSH
33386: LD_VAR 0 1
33390: ARRAY
33391: PPUSH
33392: CALL_OW 505
// if not minerMinesList [ i ] then
33396: LD_EXP 108
33400: PUSH
33401: LD_VAR 0 1
33405: ARRAY
33406: NOT
33407: IFFALSE 33411
// continue ;
33409: GO 33350
// for j := minerMinesList [ i ] downto 1 do
33411: LD_ADDR_VAR 0 2
33415: PUSH
33416: DOUBLE
33417: LD_EXP 108
33421: PUSH
33422: LD_VAR 0 1
33426: ARRAY
33427: INC
33428: ST_TO_ADDR
33429: LD_INT 1
33431: PUSH
33432: FOR_DOWNTO
33433: IFFALSE 33683
// begin side := GetSide ( minersList [ i ] ) ;
33435: LD_ADDR_VAR 0 3
33439: PUSH
33440: LD_EXP 107
33444: PUSH
33445: LD_VAR 0 1
33449: ARRAY
33450: PPUSH
33451: CALL_OW 255
33455: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
33456: LD_ADDR_VAR 0 4
33460: PUSH
33461: LD_EXP 108
33465: PUSH
33466: LD_VAR 0 1
33470: ARRAY
33471: PUSH
33472: LD_VAR 0 2
33476: ARRAY
33477: PUSH
33478: LD_INT 1
33480: ARRAY
33481: PPUSH
33482: LD_EXP 108
33486: PUSH
33487: LD_VAR 0 1
33491: ARRAY
33492: PUSH
33493: LD_VAR 0 2
33497: ARRAY
33498: PUSH
33499: LD_INT 2
33501: ARRAY
33502: PPUSH
33503: CALL_OW 428
33507: ST_TO_ADDR
// if not tmp then
33508: LD_VAR 0 4
33512: NOT
33513: IFFALSE 33517
// continue ;
33515: GO 33432
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
33517: LD_VAR 0 4
33521: PUSH
33522: LD_INT 81
33524: PUSH
33525: LD_VAR 0 3
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: PPUSH
33534: CALL_OW 69
33538: IN
33539: PUSH
33540: LD_EXP 108
33544: PUSH
33545: LD_VAR 0 1
33549: ARRAY
33550: PUSH
33551: LD_VAR 0 2
33555: ARRAY
33556: PUSH
33557: LD_INT 1
33559: ARRAY
33560: PPUSH
33561: LD_EXP 108
33565: PUSH
33566: LD_VAR 0 1
33570: ARRAY
33571: PUSH
33572: LD_VAR 0 2
33576: ARRAY
33577: PUSH
33578: LD_INT 2
33580: ARRAY
33581: PPUSH
33582: CALL_OW 458
33586: AND
33587: IFFALSE 33681
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
33589: LD_EXP 108
33593: PUSH
33594: LD_VAR 0 1
33598: ARRAY
33599: PUSH
33600: LD_VAR 0 2
33604: ARRAY
33605: PUSH
33606: LD_INT 1
33608: ARRAY
33609: PPUSH
33610: LD_EXP 108
33614: PUSH
33615: LD_VAR 0 1
33619: ARRAY
33620: PUSH
33621: LD_VAR 0 2
33625: ARRAY
33626: PUSH
33627: LD_INT 2
33629: ARRAY
33630: PPUSH
33631: LD_VAR 0 3
33635: PPUSH
33636: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
33640: LD_ADDR_EXP 108
33644: PUSH
33645: LD_EXP 108
33649: PPUSH
33650: LD_VAR 0 1
33654: PPUSH
33655: LD_EXP 108
33659: PUSH
33660: LD_VAR 0 1
33664: ARRAY
33665: PPUSH
33666: LD_VAR 0 2
33670: PPUSH
33671: CALL_OW 3
33675: PPUSH
33676: CALL_OW 1
33680: ST_TO_ADDR
// end ; end ;
33681: GO 33432
33683: POP
33684: POP
// end ;
33685: GO 33350
33687: POP
33688: POP
// end ;
33689: PPOPN 4
33691: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
33692: LD_INT 0
33694: PPUSH
33695: PPUSH
// result := false ;
33696: LD_ADDR_VAR 0 4
33700: PUSH
33701: LD_INT 0
33703: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
33704: LD_VAR 0 1
33708: PPUSH
33709: CALL_OW 264
33713: PUSH
33714: LD_INT 81
33716: EQUAL
33717: NOT
33718: IFFALSE 33722
// exit ;
33720: GO 33962
// index := GetElementIndex ( minersList , unit ) ;
33722: LD_ADDR_VAR 0 5
33726: PUSH
33727: LD_EXP 107
33731: PPUSH
33732: LD_VAR 0 1
33736: PPUSH
33737: CALL 40095 0 2
33741: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
33742: LD_EXP 108
33746: PUSH
33747: LD_VAR 0 5
33751: ARRAY
33752: PUSH
33753: LD_EXP 109
33757: GREATEREQUAL
33758: IFFALSE 33762
// exit ;
33760: GO 33962
// ComMoveXY ( unit , x , y ) ;
33762: LD_VAR 0 1
33766: PPUSH
33767: LD_VAR 0 2
33771: PPUSH
33772: LD_VAR 0 3
33776: PPUSH
33777: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
33781: LD_INT 35
33783: PPUSH
33784: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
33788: LD_VAR 0 1
33792: PPUSH
33793: LD_VAR 0 2
33797: PPUSH
33798: LD_VAR 0 3
33802: PPUSH
33803: CALL 71431 0 3
33807: NOT
33808: PUSH
33809: LD_VAR 0 1
33813: PPUSH
33814: CALL_OW 314
33818: AND
33819: IFFALSE 33823
// exit ;
33821: GO 33962
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
33823: LD_VAR 0 2
33827: PPUSH
33828: LD_VAR 0 3
33832: PPUSH
33833: CALL_OW 428
33837: PUSH
33838: LD_VAR 0 1
33842: EQUAL
33843: PUSH
33844: LD_VAR 0 1
33848: PPUSH
33849: CALL_OW 314
33853: NOT
33854: AND
33855: IFFALSE 33781
// PlaySoundXY ( x , y , PlantMine ) ;
33857: LD_VAR 0 2
33861: PPUSH
33862: LD_VAR 0 3
33866: PPUSH
33867: LD_STRING PlantMine
33869: PPUSH
33870: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
33874: LD_VAR 0 2
33878: PPUSH
33879: LD_VAR 0 3
33883: PPUSH
33884: LD_VAR 0 1
33888: PPUSH
33889: CALL_OW 255
33893: PPUSH
33894: LD_INT 0
33896: PPUSH
33897: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
33901: LD_ADDR_EXP 108
33905: PUSH
33906: LD_EXP 108
33910: PPUSH
33911: LD_VAR 0 5
33915: PUSH
33916: LD_EXP 108
33920: PUSH
33921: LD_VAR 0 5
33925: ARRAY
33926: PUSH
33927: LD_INT 1
33929: PLUS
33930: PUSH
33931: EMPTY
33932: LIST
33933: LIST
33934: PPUSH
33935: LD_VAR 0 2
33939: PUSH
33940: LD_VAR 0 3
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PPUSH
33949: CALL 40310 0 3
33953: ST_TO_ADDR
// result := true ;
33954: LD_ADDR_VAR 0 4
33958: PUSH
33959: LD_INT 1
33961: ST_TO_ADDR
// end ;
33962: LD_VAR 0 4
33966: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
33967: LD_INT 0
33969: PPUSH
33970: PPUSH
33971: PPUSH
// if not unit in minersList then
33972: LD_VAR 0 1
33976: PUSH
33977: LD_EXP 107
33981: IN
33982: NOT
33983: IFFALSE 33987
// exit ;
33985: GO 34379
// index := GetElementIndex ( minersList , unit ) ;
33987: LD_ADDR_VAR 0 6
33991: PUSH
33992: LD_EXP 107
33996: PPUSH
33997: LD_VAR 0 1
34001: PPUSH
34002: CALL 40095 0 2
34006: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
34007: LD_ADDR_VAR 0 5
34011: PUSH
34012: DOUBLE
34013: LD_EXP 108
34017: PUSH
34018: LD_VAR 0 6
34022: ARRAY
34023: INC
34024: ST_TO_ADDR
34025: LD_INT 1
34027: PUSH
34028: FOR_DOWNTO
34029: IFFALSE 34190
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
34031: LD_EXP 108
34035: PUSH
34036: LD_VAR 0 6
34040: ARRAY
34041: PUSH
34042: LD_VAR 0 5
34046: ARRAY
34047: PUSH
34048: LD_INT 1
34050: ARRAY
34051: PUSH
34052: LD_VAR 0 2
34056: EQUAL
34057: PUSH
34058: LD_EXP 108
34062: PUSH
34063: LD_VAR 0 6
34067: ARRAY
34068: PUSH
34069: LD_VAR 0 5
34073: ARRAY
34074: PUSH
34075: LD_INT 2
34077: ARRAY
34078: PUSH
34079: LD_VAR 0 3
34083: EQUAL
34084: AND
34085: IFFALSE 34188
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
34087: LD_EXP 108
34091: PUSH
34092: LD_VAR 0 6
34096: ARRAY
34097: PUSH
34098: LD_VAR 0 5
34102: ARRAY
34103: PUSH
34104: LD_INT 1
34106: ARRAY
34107: PPUSH
34108: LD_EXP 108
34112: PUSH
34113: LD_VAR 0 6
34117: ARRAY
34118: PUSH
34119: LD_VAR 0 5
34123: ARRAY
34124: PUSH
34125: LD_INT 2
34127: ARRAY
34128: PPUSH
34129: LD_VAR 0 1
34133: PPUSH
34134: CALL_OW 255
34138: PPUSH
34139: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
34143: LD_ADDR_EXP 108
34147: PUSH
34148: LD_EXP 108
34152: PPUSH
34153: LD_VAR 0 6
34157: PPUSH
34158: LD_EXP 108
34162: PUSH
34163: LD_VAR 0 6
34167: ARRAY
34168: PPUSH
34169: LD_VAR 0 5
34173: PPUSH
34174: CALL_OW 3
34178: PPUSH
34179: CALL_OW 1
34183: ST_TO_ADDR
// exit ;
34184: POP
34185: POP
34186: GO 34379
// end ; end ;
34188: GO 34028
34190: POP
34191: POP
// for i := minerMinesList [ index ] downto 1 do
34192: LD_ADDR_VAR 0 5
34196: PUSH
34197: DOUBLE
34198: LD_EXP 108
34202: PUSH
34203: LD_VAR 0 6
34207: ARRAY
34208: INC
34209: ST_TO_ADDR
34210: LD_INT 1
34212: PUSH
34213: FOR_DOWNTO
34214: IFFALSE 34377
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
34216: LD_EXP 108
34220: PUSH
34221: LD_VAR 0 6
34225: ARRAY
34226: PUSH
34227: LD_VAR 0 5
34231: ARRAY
34232: PUSH
34233: LD_INT 1
34235: ARRAY
34236: PPUSH
34237: LD_EXP 108
34241: PUSH
34242: LD_VAR 0 6
34246: ARRAY
34247: PUSH
34248: LD_VAR 0 5
34252: ARRAY
34253: PUSH
34254: LD_INT 2
34256: ARRAY
34257: PPUSH
34258: LD_VAR 0 2
34262: PPUSH
34263: LD_VAR 0 3
34267: PPUSH
34268: CALL_OW 298
34272: PUSH
34273: LD_INT 6
34275: LESS
34276: IFFALSE 34375
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
34278: LD_EXP 108
34282: PUSH
34283: LD_VAR 0 6
34287: ARRAY
34288: PUSH
34289: LD_VAR 0 5
34293: ARRAY
34294: PUSH
34295: LD_INT 1
34297: ARRAY
34298: PPUSH
34299: LD_EXP 108
34303: PUSH
34304: LD_VAR 0 6
34308: ARRAY
34309: PUSH
34310: LD_VAR 0 5
34314: ARRAY
34315: PUSH
34316: LD_INT 2
34318: ARRAY
34319: PPUSH
34320: LD_VAR 0 1
34324: PPUSH
34325: CALL_OW 255
34329: PPUSH
34330: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
34334: LD_ADDR_EXP 108
34338: PUSH
34339: LD_EXP 108
34343: PPUSH
34344: LD_VAR 0 6
34348: PPUSH
34349: LD_EXP 108
34353: PUSH
34354: LD_VAR 0 6
34358: ARRAY
34359: PPUSH
34360: LD_VAR 0 5
34364: PPUSH
34365: CALL_OW 3
34369: PPUSH
34370: CALL_OW 1
34374: ST_TO_ADDR
// end ; end ;
34375: GO 34213
34377: POP
34378: POP
// end ;
34379: LD_VAR 0 4
34383: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
34384: LD_INT 0
34386: PPUSH
34387: PPUSH
34388: PPUSH
34389: PPUSH
34390: PPUSH
34391: PPUSH
34392: PPUSH
34393: PPUSH
34394: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
34395: LD_VAR 0 1
34399: PPUSH
34400: CALL_OW 264
34404: PUSH
34405: LD_INT 81
34407: EQUAL
34408: NOT
34409: PUSH
34410: LD_VAR 0 1
34414: PUSH
34415: LD_EXP 107
34419: IN
34420: NOT
34421: OR
34422: IFFALSE 34426
// exit ;
34424: GO 34748
// index := GetElementIndex ( minersList , unit ) ;
34426: LD_ADDR_VAR 0 6
34430: PUSH
34431: LD_EXP 107
34435: PPUSH
34436: LD_VAR 0 1
34440: PPUSH
34441: CALL 40095 0 2
34445: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
34446: LD_ADDR_VAR 0 8
34450: PUSH
34451: LD_EXP 109
34455: PUSH
34456: LD_EXP 108
34460: PUSH
34461: LD_VAR 0 6
34465: ARRAY
34466: MINUS
34467: ST_TO_ADDR
// if not minesFreeAmount then
34468: LD_VAR 0 8
34472: NOT
34473: IFFALSE 34477
// exit ;
34475: GO 34748
// tmp := [ ] ;
34477: LD_ADDR_VAR 0 7
34481: PUSH
34482: EMPTY
34483: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
34484: LD_ADDR_VAR 0 5
34488: PUSH
34489: DOUBLE
34490: LD_INT 1
34492: DEC
34493: ST_TO_ADDR
34494: LD_VAR 0 8
34498: PUSH
34499: FOR_TO
34500: IFFALSE 34695
// begin _d := rand ( 0 , 5 ) ;
34502: LD_ADDR_VAR 0 11
34506: PUSH
34507: LD_INT 0
34509: PPUSH
34510: LD_INT 5
34512: PPUSH
34513: CALL_OW 12
34517: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
34518: LD_ADDR_VAR 0 12
34522: PUSH
34523: LD_INT 2
34525: PPUSH
34526: LD_INT 6
34528: PPUSH
34529: CALL_OW 12
34533: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
34534: LD_ADDR_VAR 0 9
34538: PUSH
34539: LD_VAR 0 2
34543: PPUSH
34544: LD_VAR 0 11
34548: PPUSH
34549: LD_VAR 0 12
34553: PPUSH
34554: CALL_OW 272
34558: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
34559: LD_ADDR_VAR 0 10
34563: PUSH
34564: LD_VAR 0 3
34568: PPUSH
34569: LD_VAR 0 11
34573: PPUSH
34574: LD_VAR 0 12
34578: PPUSH
34579: CALL_OW 273
34583: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
34584: LD_VAR 0 9
34588: PPUSH
34589: LD_VAR 0 10
34593: PPUSH
34594: CALL_OW 488
34598: PUSH
34599: LD_VAR 0 9
34603: PUSH
34604: LD_VAR 0 10
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: PUSH
34613: LD_VAR 0 7
34617: IN
34618: NOT
34619: AND
34620: PUSH
34621: LD_VAR 0 9
34625: PPUSH
34626: LD_VAR 0 10
34630: PPUSH
34631: CALL_OW 458
34635: NOT
34636: AND
34637: IFFALSE 34679
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
34639: LD_ADDR_VAR 0 7
34643: PUSH
34644: LD_VAR 0 7
34648: PPUSH
34649: LD_VAR 0 7
34653: PUSH
34654: LD_INT 1
34656: PLUS
34657: PPUSH
34658: LD_VAR 0 9
34662: PUSH
34663: LD_VAR 0 10
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PPUSH
34672: CALL_OW 1
34676: ST_TO_ADDR
34677: GO 34693
// i := i - 1 ;
34679: LD_ADDR_VAR 0 5
34683: PUSH
34684: LD_VAR 0 5
34688: PUSH
34689: LD_INT 1
34691: MINUS
34692: ST_TO_ADDR
// end ;
34693: GO 34499
34695: POP
34696: POP
// for i in tmp do
34697: LD_ADDR_VAR 0 5
34701: PUSH
34702: LD_VAR 0 7
34706: PUSH
34707: FOR_IN
34708: IFFALSE 34746
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
34710: LD_VAR 0 1
34714: PPUSH
34715: LD_VAR 0 5
34719: PUSH
34720: LD_INT 1
34722: ARRAY
34723: PPUSH
34724: LD_VAR 0 5
34728: PUSH
34729: LD_INT 2
34731: ARRAY
34732: PPUSH
34733: CALL 33692 0 3
34737: NOT
34738: IFFALSE 34744
// exit ;
34740: POP
34741: POP
34742: GO 34748
34744: GO 34707
34746: POP
34747: POP
// end ;
34748: LD_VAR 0 4
34752: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
34753: LD_INT 0
34755: PPUSH
34756: PPUSH
34757: PPUSH
34758: PPUSH
34759: PPUSH
34760: PPUSH
34761: PPUSH
// if not GetClass ( unit ) = class_sniper then
34762: LD_VAR 0 1
34766: PPUSH
34767: CALL_OW 257
34771: PUSH
34772: LD_INT 5
34774: EQUAL
34775: NOT
34776: IFFALSE 34780
// exit ;
34778: GO 35168
// dist := 8 ;
34780: LD_ADDR_VAR 0 5
34784: PUSH
34785: LD_INT 8
34787: ST_TO_ADDR
// viewRange := 12 ;
34788: LD_ADDR_VAR 0 7
34792: PUSH
34793: LD_INT 12
34795: ST_TO_ADDR
// side := GetSide ( unit ) ;
34796: LD_ADDR_VAR 0 6
34800: PUSH
34801: LD_VAR 0 1
34805: PPUSH
34806: CALL_OW 255
34810: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
34811: LD_INT 61
34813: PPUSH
34814: LD_VAR 0 6
34818: PPUSH
34819: CALL_OW 321
34823: PUSH
34824: LD_INT 2
34826: EQUAL
34827: IFFALSE 34837
// viewRange := 16 ;
34829: LD_ADDR_VAR 0 7
34833: PUSH
34834: LD_INT 16
34836: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
34837: LD_VAR 0 1
34841: PPUSH
34842: LD_VAR 0 2
34846: PPUSH
34847: LD_VAR 0 3
34851: PPUSH
34852: CALL_OW 297
34856: PUSH
34857: LD_VAR 0 5
34861: GREATER
34862: IFFALSE 34941
// begin ComMoveXY ( unit , x , y ) ;
34864: LD_VAR 0 1
34868: PPUSH
34869: LD_VAR 0 2
34873: PPUSH
34874: LD_VAR 0 3
34878: PPUSH
34879: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
34883: LD_INT 35
34885: PPUSH
34886: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
34890: LD_VAR 0 1
34894: PPUSH
34895: LD_VAR 0 2
34899: PPUSH
34900: LD_VAR 0 3
34904: PPUSH
34905: CALL 71431 0 3
34909: NOT
34910: IFFALSE 34914
// exit ;
34912: GO 35168
// until GetDistUnitXY ( unit , x , y ) < dist ;
34914: LD_VAR 0 1
34918: PPUSH
34919: LD_VAR 0 2
34923: PPUSH
34924: LD_VAR 0 3
34928: PPUSH
34929: CALL_OW 297
34933: PUSH
34934: LD_VAR 0 5
34938: LESS
34939: IFFALSE 34883
// end ; ComTurnXY ( unit , x , y ) ;
34941: LD_VAR 0 1
34945: PPUSH
34946: LD_VAR 0 2
34950: PPUSH
34951: LD_VAR 0 3
34955: PPUSH
34956: CALL_OW 118
// wait ( 5 ) ;
34960: LD_INT 5
34962: PPUSH
34963: CALL_OW 67
// _d := GetDir ( unit ) ;
34967: LD_ADDR_VAR 0 10
34971: PUSH
34972: LD_VAR 0 1
34976: PPUSH
34977: CALL_OW 254
34981: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
34982: LD_ADDR_VAR 0 8
34986: PUSH
34987: LD_VAR 0 1
34991: PPUSH
34992: CALL_OW 250
34996: PPUSH
34997: LD_VAR 0 10
35001: PPUSH
35002: LD_VAR 0 5
35006: PPUSH
35007: CALL_OW 272
35011: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
35012: LD_ADDR_VAR 0 9
35016: PUSH
35017: LD_VAR 0 1
35021: PPUSH
35022: CALL_OW 251
35026: PPUSH
35027: LD_VAR 0 10
35031: PPUSH
35032: LD_VAR 0 5
35036: PPUSH
35037: CALL_OW 273
35041: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35042: LD_VAR 0 8
35046: PPUSH
35047: LD_VAR 0 9
35051: PPUSH
35052: CALL_OW 488
35056: NOT
35057: IFFALSE 35061
// exit ;
35059: GO 35168
// ComAnimCustom ( unit , 1 ) ;
35061: LD_VAR 0 1
35065: PPUSH
35066: LD_INT 1
35068: PPUSH
35069: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
35073: LD_VAR 0 8
35077: PPUSH
35078: LD_VAR 0 9
35082: PPUSH
35083: LD_VAR 0 6
35087: PPUSH
35088: LD_VAR 0 7
35092: PPUSH
35093: CALL_OW 330
// repeat wait ( 1 ) ;
35097: LD_INT 1
35099: PPUSH
35100: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
35104: LD_VAR 0 1
35108: PPUSH
35109: CALL_OW 316
35113: PUSH
35114: LD_VAR 0 1
35118: PPUSH
35119: CALL_OW 314
35123: OR
35124: PUSH
35125: LD_VAR 0 1
35129: PPUSH
35130: CALL_OW 302
35134: NOT
35135: OR
35136: PUSH
35137: LD_VAR 0 1
35141: PPUSH
35142: CALL_OW 301
35146: OR
35147: IFFALSE 35097
// RemoveSeeing ( _x , _y , side ) ;
35149: LD_VAR 0 8
35153: PPUSH
35154: LD_VAR 0 9
35158: PPUSH
35159: LD_VAR 0 6
35163: PPUSH
35164: CALL_OW 331
// end ; end_of_file
35168: LD_VAR 0 4
35172: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
35173: LD_INT 0
35175: PPUSH
35176: PPUSH
// if exist_mode then
35177: LD_VAR 0 2
35181: IFFALSE 35206
// unit := CreateCharacter ( prefix & ident ) else
35183: LD_ADDR_VAR 0 5
35187: PUSH
35188: LD_VAR 0 3
35192: PUSH
35193: LD_VAR 0 1
35197: STR
35198: PPUSH
35199: CALL_OW 34
35203: ST_TO_ADDR
35204: GO 35221
// unit := NewCharacter ( ident ) ;
35206: LD_ADDR_VAR 0 5
35210: PUSH
35211: LD_VAR 0 1
35215: PPUSH
35216: CALL_OW 25
35220: ST_TO_ADDR
// result := unit ;
35221: LD_ADDR_VAR 0 4
35225: PUSH
35226: LD_VAR 0 5
35230: ST_TO_ADDR
// end ;
35231: LD_VAR 0 4
35235: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
35236: LD_INT 0
35238: PPUSH
35239: PPUSH
// if not side or not nation then
35240: LD_VAR 0 1
35244: NOT
35245: PUSH
35246: LD_VAR 0 2
35250: NOT
35251: OR
35252: IFFALSE 35256
// exit ;
35254: GO 36024
// case nation of nation_american :
35256: LD_VAR 0 2
35260: PUSH
35261: LD_INT 1
35263: DOUBLE
35264: EQUAL
35265: IFTRUE 35269
35267: GO 35483
35269: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
35270: LD_ADDR_VAR 0 4
35274: PUSH
35275: LD_INT 35
35277: PUSH
35278: LD_INT 45
35280: PUSH
35281: LD_INT 46
35283: PUSH
35284: LD_INT 47
35286: PUSH
35287: LD_INT 82
35289: PUSH
35290: LD_INT 83
35292: PUSH
35293: LD_INT 84
35295: PUSH
35296: LD_INT 85
35298: PUSH
35299: LD_INT 86
35301: PUSH
35302: LD_INT 1
35304: PUSH
35305: LD_INT 2
35307: PUSH
35308: LD_INT 6
35310: PUSH
35311: LD_INT 15
35313: PUSH
35314: LD_INT 16
35316: PUSH
35317: LD_INT 7
35319: PUSH
35320: LD_INT 12
35322: PUSH
35323: LD_INT 13
35325: PUSH
35326: LD_INT 10
35328: PUSH
35329: LD_INT 14
35331: PUSH
35332: LD_INT 20
35334: PUSH
35335: LD_INT 21
35337: PUSH
35338: LD_INT 22
35340: PUSH
35341: LD_INT 25
35343: PUSH
35344: LD_INT 32
35346: PUSH
35347: LD_INT 27
35349: PUSH
35350: LD_INT 36
35352: PUSH
35353: LD_INT 69
35355: PUSH
35356: LD_INT 39
35358: PUSH
35359: LD_INT 34
35361: PUSH
35362: LD_INT 40
35364: PUSH
35365: LD_INT 48
35367: PUSH
35368: LD_INT 49
35370: PUSH
35371: LD_INT 50
35373: PUSH
35374: LD_INT 51
35376: PUSH
35377: LD_INT 52
35379: PUSH
35380: LD_INT 53
35382: PUSH
35383: LD_INT 54
35385: PUSH
35386: LD_INT 55
35388: PUSH
35389: LD_INT 56
35391: PUSH
35392: LD_INT 57
35394: PUSH
35395: LD_INT 58
35397: PUSH
35398: LD_INT 59
35400: PUSH
35401: LD_INT 60
35403: PUSH
35404: LD_INT 61
35406: PUSH
35407: LD_INT 62
35409: PUSH
35410: LD_INT 80
35412: PUSH
35413: LD_INT 82
35415: PUSH
35416: LD_INT 83
35418: PUSH
35419: LD_INT 84
35421: PUSH
35422: LD_INT 85
35424: PUSH
35425: LD_INT 86
35427: PUSH
35428: EMPTY
35429: LIST
35430: LIST
35431: LIST
35432: LIST
35433: LIST
35434: LIST
35435: LIST
35436: LIST
35437: LIST
35438: LIST
35439: LIST
35440: LIST
35441: LIST
35442: LIST
35443: LIST
35444: LIST
35445: LIST
35446: LIST
35447: LIST
35448: LIST
35449: LIST
35450: LIST
35451: LIST
35452: LIST
35453: LIST
35454: LIST
35455: LIST
35456: LIST
35457: LIST
35458: LIST
35459: LIST
35460: LIST
35461: LIST
35462: LIST
35463: LIST
35464: LIST
35465: LIST
35466: LIST
35467: LIST
35468: LIST
35469: LIST
35470: LIST
35471: LIST
35472: LIST
35473: LIST
35474: LIST
35475: LIST
35476: LIST
35477: LIST
35478: LIST
35479: LIST
35480: ST_TO_ADDR
35481: GO 35948
35483: LD_INT 2
35485: DOUBLE
35486: EQUAL
35487: IFTRUE 35491
35489: GO 35717
35491: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
35492: LD_ADDR_VAR 0 4
35496: PUSH
35497: LD_INT 35
35499: PUSH
35500: LD_INT 45
35502: PUSH
35503: LD_INT 46
35505: PUSH
35506: LD_INT 47
35508: PUSH
35509: LD_INT 82
35511: PUSH
35512: LD_INT 83
35514: PUSH
35515: LD_INT 84
35517: PUSH
35518: LD_INT 85
35520: PUSH
35521: LD_INT 87
35523: PUSH
35524: LD_INT 70
35526: PUSH
35527: LD_INT 1
35529: PUSH
35530: LD_INT 11
35532: PUSH
35533: LD_INT 3
35535: PUSH
35536: LD_INT 4
35538: PUSH
35539: LD_INT 5
35541: PUSH
35542: LD_INT 6
35544: PUSH
35545: LD_INT 15
35547: PUSH
35548: LD_INT 18
35550: PUSH
35551: LD_INT 7
35553: PUSH
35554: LD_INT 17
35556: PUSH
35557: LD_INT 8
35559: PUSH
35560: LD_INT 20
35562: PUSH
35563: LD_INT 21
35565: PUSH
35566: LD_INT 22
35568: PUSH
35569: LD_INT 72
35571: PUSH
35572: LD_INT 26
35574: PUSH
35575: LD_INT 69
35577: PUSH
35578: LD_INT 39
35580: PUSH
35581: LD_INT 40
35583: PUSH
35584: LD_INT 41
35586: PUSH
35587: LD_INT 42
35589: PUSH
35590: LD_INT 43
35592: PUSH
35593: LD_INT 48
35595: PUSH
35596: LD_INT 49
35598: PUSH
35599: LD_INT 50
35601: PUSH
35602: LD_INT 51
35604: PUSH
35605: LD_INT 52
35607: PUSH
35608: LD_INT 53
35610: PUSH
35611: LD_INT 54
35613: PUSH
35614: LD_INT 55
35616: PUSH
35617: LD_INT 56
35619: PUSH
35620: LD_INT 60
35622: PUSH
35623: LD_INT 61
35625: PUSH
35626: LD_INT 62
35628: PUSH
35629: LD_INT 66
35631: PUSH
35632: LD_INT 67
35634: PUSH
35635: LD_INT 68
35637: PUSH
35638: LD_INT 81
35640: PUSH
35641: LD_INT 82
35643: PUSH
35644: LD_INT 83
35646: PUSH
35647: LD_INT 84
35649: PUSH
35650: LD_INT 85
35652: PUSH
35653: LD_INT 87
35655: PUSH
35656: LD_INT 88
35658: PUSH
35659: EMPTY
35660: LIST
35661: LIST
35662: LIST
35663: LIST
35664: LIST
35665: LIST
35666: LIST
35667: LIST
35668: LIST
35669: LIST
35670: LIST
35671: LIST
35672: LIST
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: LIST
35680: LIST
35681: LIST
35682: LIST
35683: LIST
35684: LIST
35685: LIST
35686: LIST
35687: LIST
35688: LIST
35689: LIST
35690: LIST
35691: LIST
35692: LIST
35693: LIST
35694: LIST
35695: LIST
35696: LIST
35697: LIST
35698: LIST
35699: LIST
35700: LIST
35701: LIST
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: ST_TO_ADDR
35715: GO 35948
35717: LD_INT 3
35719: DOUBLE
35720: EQUAL
35721: IFTRUE 35725
35723: GO 35947
35725: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
35726: LD_ADDR_VAR 0 4
35730: PUSH
35731: LD_INT 46
35733: PUSH
35734: LD_INT 47
35736: PUSH
35737: LD_INT 1
35739: PUSH
35740: LD_INT 2
35742: PUSH
35743: LD_INT 82
35745: PUSH
35746: LD_INT 83
35748: PUSH
35749: LD_INT 84
35751: PUSH
35752: LD_INT 85
35754: PUSH
35755: LD_INT 86
35757: PUSH
35758: LD_INT 11
35760: PUSH
35761: LD_INT 9
35763: PUSH
35764: LD_INT 20
35766: PUSH
35767: LD_INT 19
35769: PUSH
35770: LD_INT 21
35772: PUSH
35773: LD_INT 24
35775: PUSH
35776: LD_INT 22
35778: PUSH
35779: LD_INT 25
35781: PUSH
35782: LD_INT 28
35784: PUSH
35785: LD_INT 29
35787: PUSH
35788: LD_INT 30
35790: PUSH
35791: LD_INT 31
35793: PUSH
35794: LD_INT 37
35796: PUSH
35797: LD_INT 38
35799: PUSH
35800: LD_INT 32
35802: PUSH
35803: LD_INT 27
35805: PUSH
35806: LD_INT 33
35808: PUSH
35809: LD_INT 69
35811: PUSH
35812: LD_INT 39
35814: PUSH
35815: LD_INT 34
35817: PUSH
35818: LD_INT 40
35820: PUSH
35821: LD_INT 71
35823: PUSH
35824: LD_INT 23
35826: PUSH
35827: LD_INT 44
35829: PUSH
35830: LD_INT 48
35832: PUSH
35833: LD_INT 49
35835: PUSH
35836: LD_INT 50
35838: PUSH
35839: LD_INT 51
35841: PUSH
35842: LD_INT 52
35844: PUSH
35845: LD_INT 53
35847: PUSH
35848: LD_INT 54
35850: PUSH
35851: LD_INT 55
35853: PUSH
35854: LD_INT 56
35856: PUSH
35857: LD_INT 57
35859: PUSH
35860: LD_INT 58
35862: PUSH
35863: LD_INT 59
35865: PUSH
35866: LD_INT 63
35868: PUSH
35869: LD_INT 64
35871: PUSH
35872: LD_INT 65
35874: PUSH
35875: LD_INT 82
35877: PUSH
35878: LD_INT 83
35880: PUSH
35881: LD_INT 84
35883: PUSH
35884: LD_INT 85
35886: PUSH
35887: LD_INT 86
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: LIST
35894: LIST
35895: LIST
35896: LIST
35897: LIST
35898: LIST
35899: LIST
35900: LIST
35901: LIST
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: LIST
35908: LIST
35909: LIST
35910: LIST
35911: LIST
35912: LIST
35913: LIST
35914: LIST
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: LIST
35922: LIST
35923: LIST
35924: LIST
35925: LIST
35926: LIST
35927: LIST
35928: LIST
35929: LIST
35930: LIST
35931: LIST
35932: LIST
35933: LIST
35934: LIST
35935: LIST
35936: LIST
35937: LIST
35938: LIST
35939: LIST
35940: LIST
35941: LIST
35942: LIST
35943: LIST
35944: ST_TO_ADDR
35945: GO 35948
35947: POP
// if state > - 1 and state < 3 then
35948: LD_VAR 0 3
35952: PUSH
35953: LD_INT 1
35955: NEG
35956: GREATER
35957: PUSH
35958: LD_VAR 0 3
35962: PUSH
35963: LD_INT 3
35965: LESS
35966: AND
35967: IFFALSE 36024
// for i in result do
35969: LD_ADDR_VAR 0 5
35973: PUSH
35974: LD_VAR 0 4
35978: PUSH
35979: FOR_IN
35980: IFFALSE 36022
// if GetTech ( i , side ) <> state then
35982: LD_VAR 0 5
35986: PPUSH
35987: LD_VAR 0 1
35991: PPUSH
35992: CALL_OW 321
35996: PUSH
35997: LD_VAR 0 3
36001: NONEQUAL
36002: IFFALSE 36020
// result := result diff i ;
36004: LD_ADDR_VAR 0 4
36008: PUSH
36009: LD_VAR 0 4
36013: PUSH
36014: LD_VAR 0 5
36018: DIFF
36019: ST_TO_ADDR
36020: GO 35979
36022: POP
36023: POP
// end ;
36024: LD_VAR 0 4
36028: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
36029: LD_INT 0
36031: PPUSH
36032: PPUSH
36033: PPUSH
// result := true ;
36034: LD_ADDR_VAR 0 3
36038: PUSH
36039: LD_INT 1
36041: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
36042: LD_ADDR_VAR 0 5
36046: PUSH
36047: LD_VAR 0 2
36051: PPUSH
36052: CALL_OW 480
36056: ST_TO_ADDR
// if not tmp then
36057: LD_VAR 0 5
36061: NOT
36062: IFFALSE 36066
// exit ;
36064: GO 36115
// for i in tmp do
36066: LD_ADDR_VAR 0 4
36070: PUSH
36071: LD_VAR 0 5
36075: PUSH
36076: FOR_IN
36077: IFFALSE 36113
// if GetTech ( i , side ) <> state_researched then
36079: LD_VAR 0 4
36083: PPUSH
36084: LD_VAR 0 1
36088: PPUSH
36089: CALL_OW 321
36093: PUSH
36094: LD_INT 2
36096: NONEQUAL
36097: IFFALSE 36111
// begin result := false ;
36099: LD_ADDR_VAR 0 3
36103: PUSH
36104: LD_INT 0
36106: ST_TO_ADDR
// exit ;
36107: POP
36108: POP
36109: GO 36115
// end ;
36111: GO 36076
36113: POP
36114: POP
// end ;
36115: LD_VAR 0 3
36119: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
36120: LD_INT 0
36122: PPUSH
36123: PPUSH
36124: PPUSH
36125: PPUSH
36126: PPUSH
36127: PPUSH
36128: PPUSH
36129: PPUSH
36130: PPUSH
36131: PPUSH
36132: PPUSH
36133: PPUSH
36134: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
36135: LD_VAR 0 1
36139: NOT
36140: PUSH
36141: LD_VAR 0 1
36145: PPUSH
36146: CALL_OW 257
36150: PUSH
36151: LD_INT 9
36153: NONEQUAL
36154: OR
36155: IFFALSE 36159
// exit ;
36157: GO 36732
// side := GetSide ( unit ) ;
36159: LD_ADDR_VAR 0 9
36163: PUSH
36164: LD_VAR 0 1
36168: PPUSH
36169: CALL_OW 255
36173: ST_TO_ADDR
// tech_space := tech_spacanom ;
36174: LD_ADDR_VAR 0 12
36178: PUSH
36179: LD_INT 29
36181: ST_TO_ADDR
// tech_time := tech_taurad ;
36182: LD_ADDR_VAR 0 13
36186: PUSH
36187: LD_INT 28
36189: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
36190: LD_ADDR_VAR 0 11
36194: PUSH
36195: LD_VAR 0 1
36199: PPUSH
36200: CALL_OW 310
36204: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
36205: LD_VAR 0 11
36209: PPUSH
36210: CALL_OW 247
36214: PUSH
36215: LD_INT 2
36217: EQUAL
36218: IFFALSE 36222
// exit ;
36220: GO 36732
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36222: LD_ADDR_VAR 0 8
36226: PUSH
36227: LD_INT 81
36229: PUSH
36230: LD_VAR 0 9
36234: PUSH
36235: EMPTY
36236: LIST
36237: LIST
36238: PUSH
36239: LD_INT 3
36241: PUSH
36242: LD_INT 21
36244: PUSH
36245: LD_INT 3
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: PPUSH
36260: CALL_OW 69
36264: ST_TO_ADDR
// if not tmp then
36265: LD_VAR 0 8
36269: NOT
36270: IFFALSE 36274
// exit ;
36272: GO 36732
// if in_unit then
36274: LD_VAR 0 11
36278: IFFALSE 36302
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
36280: LD_ADDR_VAR 0 10
36284: PUSH
36285: LD_VAR 0 8
36289: PPUSH
36290: LD_VAR 0 11
36294: PPUSH
36295: CALL_OW 74
36299: ST_TO_ADDR
36300: GO 36322
// enemy := NearestUnitToUnit ( tmp , unit ) ;
36302: LD_ADDR_VAR 0 10
36306: PUSH
36307: LD_VAR 0 8
36311: PPUSH
36312: LD_VAR 0 1
36316: PPUSH
36317: CALL_OW 74
36321: ST_TO_ADDR
// if not enemy then
36322: LD_VAR 0 10
36326: NOT
36327: IFFALSE 36331
// exit ;
36329: GO 36732
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
36331: LD_VAR 0 11
36335: PUSH
36336: LD_VAR 0 11
36340: PPUSH
36341: LD_VAR 0 10
36345: PPUSH
36346: CALL_OW 296
36350: PUSH
36351: LD_INT 13
36353: GREATER
36354: AND
36355: PUSH
36356: LD_VAR 0 1
36360: PPUSH
36361: LD_VAR 0 10
36365: PPUSH
36366: CALL_OW 296
36370: PUSH
36371: LD_INT 12
36373: GREATER
36374: OR
36375: IFFALSE 36379
// exit ;
36377: GO 36732
// missile := [ 1 ] ;
36379: LD_ADDR_VAR 0 14
36383: PUSH
36384: LD_INT 1
36386: PUSH
36387: EMPTY
36388: LIST
36389: ST_TO_ADDR
// if Researched ( side , tech_space ) then
36390: LD_VAR 0 9
36394: PPUSH
36395: LD_VAR 0 12
36399: PPUSH
36400: CALL_OW 325
36404: IFFALSE 36433
// missile := Replace ( missile , missile + 1 , 2 ) ;
36406: LD_ADDR_VAR 0 14
36410: PUSH
36411: LD_VAR 0 14
36415: PPUSH
36416: LD_VAR 0 14
36420: PUSH
36421: LD_INT 1
36423: PLUS
36424: PPUSH
36425: LD_INT 2
36427: PPUSH
36428: CALL_OW 1
36432: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
36433: LD_VAR 0 9
36437: PPUSH
36438: LD_VAR 0 13
36442: PPUSH
36443: CALL_OW 325
36447: PUSH
36448: LD_VAR 0 10
36452: PPUSH
36453: CALL_OW 255
36457: PPUSH
36458: LD_VAR 0 13
36462: PPUSH
36463: CALL_OW 325
36467: NOT
36468: AND
36469: IFFALSE 36498
// missile := Replace ( missile , missile + 1 , 3 ) ;
36471: LD_ADDR_VAR 0 14
36475: PUSH
36476: LD_VAR 0 14
36480: PPUSH
36481: LD_VAR 0 14
36485: PUSH
36486: LD_INT 1
36488: PLUS
36489: PPUSH
36490: LD_INT 3
36492: PPUSH
36493: CALL_OW 1
36497: ST_TO_ADDR
// if missile < 2 then
36498: LD_VAR 0 14
36502: PUSH
36503: LD_INT 2
36505: LESS
36506: IFFALSE 36510
// exit ;
36508: GO 36732
// x := GetX ( enemy ) ;
36510: LD_ADDR_VAR 0 4
36514: PUSH
36515: LD_VAR 0 10
36519: PPUSH
36520: CALL_OW 250
36524: ST_TO_ADDR
// y := GetY ( enemy ) ;
36525: LD_ADDR_VAR 0 5
36529: PUSH
36530: LD_VAR 0 10
36534: PPUSH
36535: CALL_OW 251
36539: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
36540: LD_ADDR_VAR 0 6
36544: PUSH
36545: LD_VAR 0 4
36549: PUSH
36550: LD_INT 1
36552: NEG
36553: PPUSH
36554: LD_INT 1
36556: PPUSH
36557: CALL_OW 12
36561: PLUS
36562: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
36563: LD_ADDR_VAR 0 7
36567: PUSH
36568: LD_VAR 0 5
36572: PUSH
36573: LD_INT 1
36575: NEG
36576: PPUSH
36577: LD_INT 1
36579: PPUSH
36580: CALL_OW 12
36584: PLUS
36585: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36586: LD_VAR 0 6
36590: PPUSH
36591: LD_VAR 0 7
36595: PPUSH
36596: CALL_OW 488
36600: NOT
36601: IFFALSE 36623
// begin _x := x ;
36603: LD_ADDR_VAR 0 6
36607: PUSH
36608: LD_VAR 0 4
36612: ST_TO_ADDR
// _y := y ;
36613: LD_ADDR_VAR 0 7
36617: PUSH
36618: LD_VAR 0 5
36622: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
36623: LD_ADDR_VAR 0 3
36627: PUSH
36628: LD_INT 1
36630: PPUSH
36631: LD_VAR 0 14
36635: PPUSH
36636: CALL_OW 12
36640: ST_TO_ADDR
// case i of 1 :
36641: LD_VAR 0 3
36645: PUSH
36646: LD_INT 1
36648: DOUBLE
36649: EQUAL
36650: IFTRUE 36654
36652: GO 36671
36654: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
36655: LD_VAR 0 1
36659: PPUSH
36660: LD_VAR 0 10
36664: PPUSH
36665: CALL_OW 115
36669: GO 36732
36671: LD_INT 2
36673: DOUBLE
36674: EQUAL
36675: IFTRUE 36679
36677: GO 36701
36679: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
36680: LD_VAR 0 1
36684: PPUSH
36685: LD_VAR 0 6
36689: PPUSH
36690: LD_VAR 0 7
36694: PPUSH
36695: CALL_OW 153
36699: GO 36732
36701: LD_INT 3
36703: DOUBLE
36704: EQUAL
36705: IFTRUE 36709
36707: GO 36731
36709: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
36710: LD_VAR 0 1
36714: PPUSH
36715: LD_VAR 0 6
36719: PPUSH
36720: LD_VAR 0 7
36724: PPUSH
36725: CALL_OW 154
36729: GO 36732
36731: POP
// end ;
36732: LD_VAR 0 2
36736: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
36737: LD_INT 0
36739: PPUSH
36740: PPUSH
36741: PPUSH
36742: PPUSH
36743: PPUSH
36744: PPUSH
// if not unit or not building then
36745: LD_VAR 0 1
36749: NOT
36750: PUSH
36751: LD_VAR 0 2
36755: NOT
36756: OR
36757: IFFALSE 36761
// exit ;
36759: GO 36919
// x := GetX ( building ) ;
36761: LD_ADDR_VAR 0 5
36765: PUSH
36766: LD_VAR 0 2
36770: PPUSH
36771: CALL_OW 250
36775: ST_TO_ADDR
// y := GetY ( building ) ;
36776: LD_ADDR_VAR 0 6
36780: PUSH
36781: LD_VAR 0 2
36785: PPUSH
36786: CALL_OW 251
36790: ST_TO_ADDR
// for i = 0 to 5 do
36791: LD_ADDR_VAR 0 4
36795: PUSH
36796: DOUBLE
36797: LD_INT 0
36799: DEC
36800: ST_TO_ADDR
36801: LD_INT 5
36803: PUSH
36804: FOR_TO
36805: IFFALSE 36917
// begin _x := ShiftX ( x , i , 3 ) ;
36807: LD_ADDR_VAR 0 7
36811: PUSH
36812: LD_VAR 0 5
36816: PPUSH
36817: LD_VAR 0 4
36821: PPUSH
36822: LD_INT 3
36824: PPUSH
36825: CALL_OW 272
36829: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
36830: LD_ADDR_VAR 0 8
36834: PUSH
36835: LD_VAR 0 6
36839: PPUSH
36840: LD_VAR 0 4
36844: PPUSH
36845: LD_INT 3
36847: PPUSH
36848: CALL_OW 273
36852: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36853: LD_VAR 0 7
36857: PPUSH
36858: LD_VAR 0 8
36862: PPUSH
36863: CALL_OW 488
36867: NOT
36868: IFFALSE 36872
// continue ;
36870: GO 36804
// if HexInfo ( _x , _y ) = 0 then
36872: LD_VAR 0 7
36876: PPUSH
36877: LD_VAR 0 8
36881: PPUSH
36882: CALL_OW 428
36886: PUSH
36887: LD_INT 0
36889: EQUAL
36890: IFFALSE 36915
// begin ComMoveXY ( unit , _x , _y ) ;
36892: LD_VAR 0 1
36896: PPUSH
36897: LD_VAR 0 7
36901: PPUSH
36902: LD_VAR 0 8
36906: PPUSH
36907: CALL_OW 111
// exit ;
36911: POP
36912: POP
36913: GO 36919
// end ; end ;
36915: GO 36804
36917: POP
36918: POP
// end ;
36919: LD_VAR 0 3
36923: RET
// export function ScanBase ( side , base_area ) ; begin
36924: LD_INT 0
36926: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
36927: LD_ADDR_VAR 0 3
36931: PUSH
36932: LD_VAR 0 2
36936: PPUSH
36937: LD_INT 81
36939: PUSH
36940: LD_VAR 0 1
36944: PUSH
36945: EMPTY
36946: LIST
36947: LIST
36948: PPUSH
36949: CALL_OW 70
36953: ST_TO_ADDR
// end ;
36954: LD_VAR 0 3
36958: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
36959: LD_INT 0
36961: PPUSH
36962: PPUSH
36963: PPUSH
36964: PPUSH
// result := false ;
36965: LD_ADDR_VAR 0 2
36969: PUSH
36970: LD_INT 0
36972: ST_TO_ADDR
// side := GetSide ( unit ) ;
36973: LD_ADDR_VAR 0 3
36977: PUSH
36978: LD_VAR 0 1
36982: PPUSH
36983: CALL_OW 255
36987: ST_TO_ADDR
// nat := GetNation ( unit ) ;
36988: LD_ADDR_VAR 0 4
36992: PUSH
36993: LD_VAR 0 1
36997: PPUSH
36998: CALL_OW 248
37002: ST_TO_ADDR
// case nat of 1 :
37003: LD_VAR 0 4
37007: PUSH
37008: LD_INT 1
37010: DOUBLE
37011: EQUAL
37012: IFTRUE 37016
37014: GO 37027
37016: POP
// tech := tech_lassight ; 2 :
37017: LD_ADDR_VAR 0 5
37021: PUSH
37022: LD_INT 12
37024: ST_TO_ADDR
37025: GO 37066
37027: LD_INT 2
37029: DOUBLE
37030: EQUAL
37031: IFTRUE 37035
37033: GO 37046
37035: POP
// tech := tech_mortar ; 3 :
37036: LD_ADDR_VAR 0 5
37040: PUSH
37041: LD_INT 41
37043: ST_TO_ADDR
37044: GO 37066
37046: LD_INT 3
37048: DOUBLE
37049: EQUAL
37050: IFTRUE 37054
37052: GO 37065
37054: POP
// tech := tech_bazooka ; end ;
37055: LD_ADDR_VAR 0 5
37059: PUSH
37060: LD_INT 44
37062: ST_TO_ADDR
37063: GO 37066
37065: POP
// if Researched ( side , tech ) then
37066: LD_VAR 0 3
37070: PPUSH
37071: LD_VAR 0 5
37075: PPUSH
37076: CALL_OW 325
37080: IFFALSE 37107
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
37082: LD_ADDR_VAR 0 2
37086: PUSH
37087: LD_INT 5
37089: PUSH
37090: LD_INT 8
37092: PUSH
37093: LD_INT 9
37095: PUSH
37096: EMPTY
37097: LIST
37098: LIST
37099: LIST
37100: PUSH
37101: LD_VAR 0 4
37105: ARRAY
37106: ST_TO_ADDR
// end ;
37107: LD_VAR 0 2
37111: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
37112: LD_INT 0
37114: PPUSH
37115: PPUSH
37116: PPUSH
// if not mines then
37117: LD_VAR 0 2
37121: NOT
37122: IFFALSE 37126
// exit ;
37124: GO 37270
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37126: LD_ADDR_VAR 0 5
37130: PUSH
37131: LD_INT 81
37133: PUSH
37134: LD_VAR 0 1
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: PUSH
37143: LD_INT 3
37145: PUSH
37146: LD_INT 21
37148: PUSH
37149: LD_INT 3
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PPUSH
37164: CALL_OW 69
37168: ST_TO_ADDR
// for i in mines do
37169: LD_ADDR_VAR 0 4
37173: PUSH
37174: LD_VAR 0 2
37178: PUSH
37179: FOR_IN
37180: IFFALSE 37268
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
37182: LD_VAR 0 4
37186: PUSH
37187: LD_INT 1
37189: ARRAY
37190: PPUSH
37191: LD_VAR 0 4
37195: PUSH
37196: LD_INT 2
37198: ARRAY
37199: PPUSH
37200: CALL_OW 458
37204: NOT
37205: IFFALSE 37209
// continue ;
37207: GO 37179
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
37209: LD_VAR 0 4
37213: PUSH
37214: LD_INT 1
37216: ARRAY
37217: PPUSH
37218: LD_VAR 0 4
37222: PUSH
37223: LD_INT 2
37225: ARRAY
37226: PPUSH
37227: CALL_OW 428
37231: PUSH
37232: LD_VAR 0 5
37236: IN
37237: IFFALSE 37266
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
37239: LD_VAR 0 4
37243: PUSH
37244: LD_INT 1
37246: ARRAY
37247: PPUSH
37248: LD_VAR 0 4
37252: PUSH
37253: LD_INT 2
37255: ARRAY
37256: PPUSH
37257: LD_VAR 0 1
37261: PPUSH
37262: CALL_OW 456
// end ;
37266: GO 37179
37268: POP
37269: POP
// end ;
37270: LD_VAR 0 3
37274: RET
// export function Count ( array ) ; var i ; begin
37275: LD_INT 0
37277: PPUSH
37278: PPUSH
// result := 0 ;
37279: LD_ADDR_VAR 0 2
37283: PUSH
37284: LD_INT 0
37286: ST_TO_ADDR
// for i in array do
37287: LD_ADDR_VAR 0 3
37291: PUSH
37292: LD_VAR 0 1
37296: PUSH
37297: FOR_IN
37298: IFFALSE 37322
// if i then
37300: LD_VAR 0 3
37304: IFFALSE 37320
// result := result + 1 ;
37306: LD_ADDR_VAR 0 2
37310: PUSH
37311: LD_VAR 0 2
37315: PUSH
37316: LD_INT 1
37318: PLUS
37319: ST_TO_ADDR
37320: GO 37297
37322: POP
37323: POP
// end ;
37324: LD_VAR 0 2
37328: RET
// export function IsEmpty ( building ) ; begin
37329: LD_INT 0
37331: PPUSH
// if not building then
37332: LD_VAR 0 1
37336: NOT
37337: IFFALSE 37341
// exit ;
37339: GO 37384
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
37341: LD_ADDR_VAR 0 2
37345: PUSH
37346: LD_VAR 0 1
37350: PUSH
37351: LD_INT 22
37353: PUSH
37354: LD_VAR 0 1
37358: PPUSH
37359: CALL_OW 255
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: PUSH
37368: LD_INT 58
37370: PUSH
37371: EMPTY
37372: LIST
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: PPUSH
37378: CALL_OW 69
37382: IN
37383: ST_TO_ADDR
// end ;
37384: LD_VAR 0 2
37388: RET
// export function IsNotFull ( building ) ; var places ; begin
37389: LD_INT 0
37391: PPUSH
37392: PPUSH
// if not building then
37393: LD_VAR 0 1
37397: NOT
37398: IFFALSE 37402
// exit ;
37400: GO 37573
// result := false ;
37402: LD_ADDR_VAR 0 2
37406: PUSH
37407: LD_INT 0
37409: ST_TO_ADDR
// places := 0 ;
37410: LD_ADDR_VAR 0 3
37414: PUSH
37415: LD_INT 0
37417: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
37418: LD_VAR 0 1
37422: PPUSH
37423: CALL_OW 266
37427: PUSH
37428: LD_INT 0
37430: DOUBLE
37431: EQUAL
37432: IFTRUE 37490
37434: LD_INT 1
37436: DOUBLE
37437: EQUAL
37438: IFTRUE 37490
37440: LD_INT 6
37442: DOUBLE
37443: EQUAL
37444: IFTRUE 37490
37446: LD_INT 7
37448: DOUBLE
37449: EQUAL
37450: IFTRUE 37490
37452: LD_INT 8
37454: DOUBLE
37455: EQUAL
37456: IFTRUE 37490
37458: LD_INT 4
37460: DOUBLE
37461: EQUAL
37462: IFTRUE 37490
37464: LD_INT 5
37466: DOUBLE
37467: EQUAL
37468: IFTRUE 37490
37470: LD_INT 2
37472: DOUBLE
37473: EQUAL
37474: IFTRUE 37490
37476: LD_INT 3
37478: DOUBLE
37479: EQUAL
37480: IFTRUE 37490
37482: LD_INT 35
37484: DOUBLE
37485: EQUAL
37486: IFTRUE 37490
37488: GO 37501
37490: POP
// places := 6 ; b_bunker , b_breastwork :
37491: LD_ADDR_VAR 0 3
37495: PUSH
37496: LD_INT 6
37498: ST_TO_ADDR
37499: GO 37546
37501: LD_INT 32
37503: DOUBLE
37504: EQUAL
37505: IFTRUE 37515
37507: LD_INT 31
37509: DOUBLE
37510: EQUAL
37511: IFTRUE 37515
37513: GO 37526
37515: POP
// places := 1 ; b_control_tower :
37516: LD_ADDR_VAR 0 3
37520: PUSH
37521: LD_INT 1
37523: ST_TO_ADDR
37524: GO 37546
37526: LD_INT 36
37528: DOUBLE
37529: EQUAL
37530: IFTRUE 37534
37532: GO 37545
37534: POP
// places := 3 ; end ;
37535: LD_ADDR_VAR 0 3
37539: PUSH
37540: LD_INT 3
37542: ST_TO_ADDR
37543: GO 37546
37545: POP
// if places then
37546: LD_VAR 0 3
37550: IFFALSE 37573
// result := UnitsInside ( building ) < places ;
37552: LD_ADDR_VAR 0 2
37556: PUSH
37557: LD_VAR 0 1
37561: PPUSH
37562: CALL_OW 313
37566: PUSH
37567: LD_VAR 0 3
37571: LESS
37572: ST_TO_ADDR
// end ;
37573: LD_VAR 0 2
37577: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
37578: LD_INT 0
37580: PPUSH
37581: PPUSH
37582: PPUSH
37583: PPUSH
// tmp := [ ] ;
37584: LD_ADDR_VAR 0 3
37588: PUSH
37589: EMPTY
37590: ST_TO_ADDR
// list := [ ] ;
37591: LD_ADDR_VAR 0 5
37595: PUSH
37596: EMPTY
37597: ST_TO_ADDR
// for i = 16 to 25 do
37598: LD_ADDR_VAR 0 4
37602: PUSH
37603: DOUBLE
37604: LD_INT 16
37606: DEC
37607: ST_TO_ADDR
37608: LD_INT 25
37610: PUSH
37611: FOR_TO
37612: IFFALSE 37685
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
37614: LD_ADDR_VAR 0 3
37618: PUSH
37619: LD_VAR 0 3
37623: PUSH
37624: LD_INT 22
37626: PUSH
37627: LD_VAR 0 1
37631: PPUSH
37632: CALL_OW 255
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: PUSH
37641: LD_INT 91
37643: PUSH
37644: LD_VAR 0 1
37648: PUSH
37649: LD_INT 6
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: LIST
37656: PUSH
37657: LD_INT 30
37659: PUSH
37660: LD_VAR 0 4
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: LIST
37673: PUSH
37674: EMPTY
37675: LIST
37676: PPUSH
37677: CALL_OW 69
37681: ADD
37682: ST_TO_ADDR
37683: GO 37611
37685: POP
37686: POP
// for i = 1 to tmp do
37687: LD_ADDR_VAR 0 4
37691: PUSH
37692: DOUBLE
37693: LD_INT 1
37695: DEC
37696: ST_TO_ADDR
37697: LD_VAR 0 3
37701: PUSH
37702: FOR_TO
37703: IFFALSE 37791
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
37705: LD_ADDR_VAR 0 5
37709: PUSH
37710: LD_VAR 0 5
37714: PUSH
37715: LD_VAR 0 3
37719: PUSH
37720: LD_VAR 0 4
37724: ARRAY
37725: PPUSH
37726: CALL_OW 266
37730: PUSH
37731: LD_VAR 0 3
37735: PUSH
37736: LD_VAR 0 4
37740: ARRAY
37741: PPUSH
37742: CALL_OW 250
37746: PUSH
37747: LD_VAR 0 3
37751: PUSH
37752: LD_VAR 0 4
37756: ARRAY
37757: PPUSH
37758: CALL_OW 251
37762: PUSH
37763: LD_VAR 0 3
37767: PUSH
37768: LD_VAR 0 4
37772: ARRAY
37773: PPUSH
37774: CALL_OW 254
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: LIST
37783: LIST
37784: PUSH
37785: EMPTY
37786: LIST
37787: ADD
37788: ST_TO_ADDR
37789: GO 37702
37791: POP
37792: POP
// result := list ;
37793: LD_ADDR_VAR 0 2
37797: PUSH
37798: LD_VAR 0 5
37802: ST_TO_ADDR
// end ;
37803: LD_VAR 0 2
37807: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
37808: LD_INT 0
37810: PPUSH
37811: PPUSH
37812: PPUSH
37813: PPUSH
37814: PPUSH
37815: PPUSH
37816: PPUSH
// if not factory then
37817: LD_VAR 0 1
37821: NOT
37822: IFFALSE 37826
// exit ;
37824: GO 38419
// if control = control_apeman then
37826: LD_VAR 0 4
37830: PUSH
37831: LD_INT 5
37833: EQUAL
37834: IFFALSE 37943
// begin tmp := UnitsInside ( factory ) ;
37836: LD_ADDR_VAR 0 8
37840: PUSH
37841: LD_VAR 0 1
37845: PPUSH
37846: CALL_OW 313
37850: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
37851: LD_VAR 0 8
37855: PPUSH
37856: LD_INT 25
37858: PUSH
37859: LD_INT 12
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PPUSH
37866: CALL_OW 72
37870: NOT
37871: IFFALSE 37881
// control := control_manual ;
37873: LD_ADDR_VAR 0 4
37877: PUSH
37878: LD_INT 1
37880: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
37881: LD_ADDR_VAR 0 8
37885: PUSH
37886: LD_VAR 0 1
37890: PPUSH
37891: CALL 37578 0 1
37895: ST_TO_ADDR
// if tmp then
37896: LD_VAR 0 8
37900: IFFALSE 37943
// begin for i in tmp do
37902: LD_ADDR_VAR 0 7
37906: PUSH
37907: LD_VAR 0 8
37911: PUSH
37912: FOR_IN
37913: IFFALSE 37941
// if i [ 1 ] = b_ext_radio then
37915: LD_VAR 0 7
37919: PUSH
37920: LD_INT 1
37922: ARRAY
37923: PUSH
37924: LD_INT 22
37926: EQUAL
37927: IFFALSE 37939
// begin control := control_remote ;
37929: LD_ADDR_VAR 0 4
37933: PUSH
37934: LD_INT 2
37936: ST_TO_ADDR
// break ;
37937: GO 37941
// end ;
37939: GO 37912
37941: POP
37942: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
37943: LD_VAR 0 1
37947: PPUSH
37948: LD_VAR 0 2
37952: PPUSH
37953: LD_VAR 0 3
37957: PPUSH
37958: LD_VAR 0 4
37962: PPUSH
37963: LD_VAR 0 5
37967: PPUSH
37968: CALL_OW 448
37972: IFFALSE 38007
// begin result := [ chassis , engine , control , weapon ] ;
37974: LD_ADDR_VAR 0 6
37978: PUSH
37979: LD_VAR 0 2
37983: PUSH
37984: LD_VAR 0 3
37988: PUSH
37989: LD_VAR 0 4
37993: PUSH
37994: LD_VAR 0 5
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: LIST
38003: LIST
38004: ST_TO_ADDR
// exit ;
38005: GO 38419
// end ; _chassis := AvailableChassisList ( factory ) ;
38007: LD_ADDR_VAR 0 9
38011: PUSH
38012: LD_VAR 0 1
38016: PPUSH
38017: CALL_OW 475
38021: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
38022: LD_ADDR_VAR 0 11
38026: PUSH
38027: LD_VAR 0 1
38031: PPUSH
38032: CALL_OW 476
38036: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
38037: LD_ADDR_VAR 0 12
38041: PUSH
38042: LD_VAR 0 1
38046: PPUSH
38047: CALL_OW 477
38051: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
38052: LD_ADDR_VAR 0 10
38056: PUSH
38057: LD_VAR 0 1
38061: PPUSH
38062: CALL_OW 478
38066: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
38067: LD_VAR 0 9
38071: NOT
38072: PUSH
38073: LD_VAR 0 11
38077: NOT
38078: OR
38079: PUSH
38080: LD_VAR 0 12
38084: NOT
38085: OR
38086: PUSH
38087: LD_VAR 0 10
38091: NOT
38092: OR
38093: IFFALSE 38128
// begin result := [ chassis , engine , control , weapon ] ;
38095: LD_ADDR_VAR 0 6
38099: PUSH
38100: LD_VAR 0 2
38104: PUSH
38105: LD_VAR 0 3
38109: PUSH
38110: LD_VAR 0 4
38114: PUSH
38115: LD_VAR 0 5
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: LIST
38124: LIST
38125: ST_TO_ADDR
// exit ;
38126: GO 38419
// end ; if not chassis in _chassis then
38128: LD_VAR 0 2
38132: PUSH
38133: LD_VAR 0 9
38137: IN
38138: NOT
38139: IFFALSE 38165
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
38141: LD_ADDR_VAR 0 2
38145: PUSH
38146: LD_VAR 0 9
38150: PUSH
38151: LD_INT 1
38153: PPUSH
38154: LD_VAR 0 9
38158: PPUSH
38159: CALL_OW 12
38163: ARRAY
38164: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
38165: LD_VAR 0 2
38169: PPUSH
38170: LD_VAR 0 3
38174: PPUSH
38175: CALL 38424 0 2
38179: NOT
38180: IFFALSE 38239
// repeat engine := _engine [ 1 ] ;
38182: LD_ADDR_VAR 0 3
38186: PUSH
38187: LD_VAR 0 11
38191: PUSH
38192: LD_INT 1
38194: ARRAY
38195: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
38196: LD_ADDR_VAR 0 11
38200: PUSH
38201: LD_VAR 0 11
38205: PPUSH
38206: LD_INT 1
38208: PPUSH
38209: CALL_OW 3
38213: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
38214: LD_VAR 0 2
38218: PPUSH
38219: LD_VAR 0 3
38223: PPUSH
38224: CALL 38424 0 2
38228: PUSH
38229: LD_VAR 0 11
38233: PUSH
38234: EMPTY
38235: EQUAL
38236: OR
38237: IFFALSE 38182
// if not control in _control then
38239: LD_VAR 0 4
38243: PUSH
38244: LD_VAR 0 12
38248: IN
38249: NOT
38250: IFFALSE 38276
// control := _control [ rand ( 1 , _control ) ] ;
38252: LD_ADDR_VAR 0 4
38256: PUSH
38257: LD_VAR 0 12
38261: PUSH
38262: LD_INT 1
38264: PPUSH
38265: LD_VAR 0 12
38269: PPUSH
38270: CALL_OW 12
38274: ARRAY
38275: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
38276: LD_VAR 0 2
38280: PPUSH
38281: LD_VAR 0 5
38285: PPUSH
38286: CALL 38644 0 2
38290: NOT
38291: IFFALSE 38350
// repeat weapon := _weapon [ 1 ] ;
38293: LD_ADDR_VAR 0 5
38297: PUSH
38298: LD_VAR 0 10
38302: PUSH
38303: LD_INT 1
38305: ARRAY
38306: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
38307: LD_ADDR_VAR 0 10
38311: PUSH
38312: LD_VAR 0 10
38316: PPUSH
38317: LD_INT 1
38319: PPUSH
38320: CALL_OW 3
38324: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
38325: LD_VAR 0 2
38329: PPUSH
38330: LD_VAR 0 5
38334: PPUSH
38335: CALL 38644 0 2
38339: PUSH
38340: LD_VAR 0 10
38344: PUSH
38345: EMPTY
38346: EQUAL
38347: OR
38348: IFFALSE 38293
// result := [ ] ;
38350: LD_ADDR_VAR 0 6
38354: PUSH
38355: EMPTY
38356: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38357: LD_VAR 0 1
38361: PPUSH
38362: LD_VAR 0 2
38366: PPUSH
38367: LD_VAR 0 3
38371: PPUSH
38372: LD_VAR 0 4
38376: PPUSH
38377: LD_VAR 0 5
38381: PPUSH
38382: CALL_OW 448
38386: IFFALSE 38419
// result := [ chassis , engine , control , weapon ] ;
38388: LD_ADDR_VAR 0 6
38392: PUSH
38393: LD_VAR 0 2
38397: PUSH
38398: LD_VAR 0 3
38402: PUSH
38403: LD_VAR 0 4
38407: PUSH
38408: LD_VAR 0 5
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: ST_TO_ADDR
// end ;
38419: LD_VAR 0 6
38423: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
38424: LD_INT 0
38426: PPUSH
// if not chassis or not engine then
38427: LD_VAR 0 1
38431: NOT
38432: PUSH
38433: LD_VAR 0 2
38437: NOT
38438: OR
38439: IFFALSE 38443
// exit ;
38441: GO 38639
// case engine of engine_solar :
38443: LD_VAR 0 2
38447: PUSH
38448: LD_INT 2
38450: DOUBLE
38451: EQUAL
38452: IFTRUE 38456
38454: GO 38494
38456: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
38457: LD_ADDR_VAR 0 3
38461: PUSH
38462: LD_INT 11
38464: PUSH
38465: LD_INT 12
38467: PUSH
38468: LD_INT 13
38470: PUSH
38471: LD_INT 14
38473: PUSH
38474: LD_INT 1
38476: PUSH
38477: LD_INT 2
38479: PUSH
38480: LD_INT 3
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: ST_TO_ADDR
38492: GO 38623
38494: LD_INT 1
38496: DOUBLE
38497: EQUAL
38498: IFTRUE 38502
38500: GO 38564
38502: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
38503: LD_ADDR_VAR 0 3
38507: PUSH
38508: LD_INT 11
38510: PUSH
38511: LD_INT 12
38513: PUSH
38514: LD_INT 13
38516: PUSH
38517: LD_INT 14
38519: PUSH
38520: LD_INT 1
38522: PUSH
38523: LD_INT 2
38525: PUSH
38526: LD_INT 3
38528: PUSH
38529: LD_INT 4
38531: PUSH
38532: LD_INT 5
38534: PUSH
38535: LD_INT 21
38537: PUSH
38538: LD_INT 23
38540: PUSH
38541: LD_INT 22
38543: PUSH
38544: LD_INT 24
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: LIST
38551: LIST
38552: LIST
38553: LIST
38554: LIST
38555: LIST
38556: LIST
38557: LIST
38558: LIST
38559: LIST
38560: LIST
38561: ST_TO_ADDR
38562: GO 38623
38564: LD_INT 3
38566: DOUBLE
38567: EQUAL
38568: IFTRUE 38572
38570: GO 38622
38572: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38573: LD_ADDR_VAR 0 3
38577: PUSH
38578: LD_INT 13
38580: PUSH
38581: LD_INT 14
38583: PUSH
38584: LD_INT 2
38586: PUSH
38587: LD_INT 3
38589: PUSH
38590: LD_INT 4
38592: PUSH
38593: LD_INT 5
38595: PUSH
38596: LD_INT 21
38598: PUSH
38599: LD_INT 22
38601: PUSH
38602: LD_INT 23
38604: PUSH
38605: LD_INT 24
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: ST_TO_ADDR
38620: GO 38623
38622: POP
// result := ( chassis in result ) ;
38623: LD_ADDR_VAR 0 3
38627: PUSH
38628: LD_VAR 0 1
38632: PUSH
38633: LD_VAR 0 3
38637: IN
38638: ST_TO_ADDR
// end ;
38639: LD_VAR 0 3
38643: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
38644: LD_INT 0
38646: PPUSH
// if not chassis or not weapon then
38647: LD_VAR 0 1
38651: NOT
38652: PUSH
38653: LD_VAR 0 2
38657: NOT
38658: OR
38659: IFFALSE 38663
// exit ;
38661: GO 39723
// case weapon of us_machine_gun :
38663: LD_VAR 0 2
38667: PUSH
38668: LD_INT 2
38670: DOUBLE
38671: EQUAL
38672: IFTRUE 38676
38674: GO 38706
38676: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
38677: LD_ADDR_VAR 0 3
38681: PUSH
38682: LD_INT 1
38684: PUSH
38685: LD_INT 2
38687: PUSH
38688: LD_INT 3
38690: PUSH
38691: LD_INT 4
38693: PUSH
38694: LD_INT 5
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: LIST
38701: LIST
38702: LIST
38703: ST_TO_ADDR
38704: GO 39707
38706: LD_INT 3
38708: DOUBLE
38709: EQUAL
38710: IFTRUE 38714
38712: GO 38744
38714: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
38715: LD_ADDR_VAR 0 3
38719: PUSH
38720: LD_INT 1
38722: PUSH
38723: LD_INT 2
38725: PUSH
38726: LD_INT 3
38728: PUSH
38729: LD_INT 4
38731: PUSH
38732: LD_INT 5
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: LIST
38739: LIST
38740: LIST
38741: ST_TO_ADDR
38742: GO 39707
38744: LD_INT 11
38746: DOUBLE
38747: EQUAL
38748: IFTRUE 38752
38750: GO 38782
38752: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
38753: LD_ADDR_VAR 0 3
38757: PUSH
38758: LD_INT 1
38760: PUSH
38761: LD_INT 2
38763: PUSH
38764: LD_INT 3
38766: PUSH
38767: LD_INT 4
38769: PUSH
38770: LD_INT 5
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: LIST
38777: LIST
38778: LIST
38779: ST_TO_ADDR
38780: GO 39707
38782: LD_INT 4
38784: DOUBLE
38785: EQUAL
38786: IFTRUE 38790
38788: GO 38816
38790: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
38791: LD_ADDR_VAR 0 3
38795: PUSH
38796: LD_INT 2
38798: PUSH
38799: LD_INT 3
38801: PUSH
38802: LD_INT 4
38804: PUSH
38805: LD_INT 5
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: LIST
38812: LIST
38813: ST_TO_ADDR
38814: GO 39707
38816: LD_INT 5
38818: DOUBLE
38819: EQUAL
38820: IFTRUE 38824
38822: GO 38850
38824: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
38825: LD_ADDR_VAR 0 3
38829: PUSH
38830: LD_INT 2
38832: PUSH
38833: LD_INT 3
38835: PUSH
38836: LD_INT 4
38838: PUSH
38839: LD_INT 5
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: ST_TO_ADDR
38848: GO 39707
38850: LD_INT 9
38852: DOUBLE
38853: EQUAL
38854: IFTRUE 38858
38856: GO 38884
38858: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
38859: LD_ADDR_VAR 0 3
38863: PUSH
38864: LD_INT 2
38866: PUSH
38867: LD_INT 3
38869: PUSH
38870: LD_INT 4
38872: PUSH
38873: LD_INT 5
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: LIST
38880: LIST
38881: ST_TO_ADDR
38882: GO 39707
38884: LD_INT 7
38886: DOUBLE
38887: EQUAL
38888: IFTRUE 38892
38890: GO 38918
38892: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
38893: LD_ADDR_VAR 0 3
38897: PUSH
38898: LD_INT 2
38900: PUSH
38901: LD_INT 3
38903: PUSH
38904: LD_INT 4
38906: PUSH
38907: LD_INT 5
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: LIST
38914: LIST
38915: ST_TO_ADDR
38916: GO 39707
38918: LD_INT 12
38920: DOUBLE
38921: EQUAL
38922: IFTRUE 38926
38924: GO 38952
38926: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
38927: LD_ADDR_VAR 0 3
38931: PUSH
38932: LD_INT 2
38934: PUSH
38935: LD_INT 3
38937: PUSH
38938: LD_INT 4
38940: PUSH
38941: LD_INT 5
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: ST_TO_ADDR
38950: GO 39707
38952: LD_INT 13
38954: DOUBLE
38955: EQUAL
38956: IFTRUE 38960
38958: GO 38986
38960: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
38961: LD_ADDR_VAR 0 3
38965: PUSH
38966: LD_INT 2
38968: PUSH
38969: LD_INT 3
38971: PUSH
38972: LD_INT 4
38974: PUSH
38975: LD_INT 5
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: LIST
38982: LIST
38983: ST_TO_ADDR
38984: GO 39707
38986: LD_INT 14
38988: DOUBLE
38989: EQUAL
38990: IFTRUE 38994
38992: GO 39012
38994: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
38995: LD_ADDR_VAR 0 3
38999: PUSH
39000: LD_INT 4
39002: PUSH
39003: LD_INT 5
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: ST_TO_ADDR
39010: GO 39707
39012: LD_INT 6
39014: DOUBLE
39015: EQUAL
39016: IFTRUE 39020
39018: GO 39038
39020: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
39021: LD_ADDR_VAR 0 3
39025: PUSH
39026: LD_INT 4
39028: PUSH
39029: LD_INT 5
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: ST_TO_ADDR
39036: GO 39707
39038: LD_INT 10
39040: DOUBLE
39041: EQUAL
39042: IFTRUE 39046
39044: GO 39064
39046: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
39047: LD_ADDR_VAR 0 3
39051: PUSH
39052: LD_INT 4
39054: PUSH
39055: LD_INT 5
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: ST_TO_ADDR
39062: GO 39707
39064: LD_INT 22
39066: DOUBLE
39067: EQUAL
39068: IFTRUE 39072
39070: GO 39098
39072: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
39073: LD_ADDR_VAR 0 3
39077: PUSH
39078: LD_INT 11
39080: PUSH
39081: LD_INT 12
39083: PUSH
39084: LD_INT 13
39086: PUSH
39087: LD_INT 14
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: LIST
39094: LIST
39095: ST_TO_ADDR
39096: GO 39707
39098: LD_INT 23
39100: DOUBLE
39101: EQUAL
39102: IFTRUE 39106
39104: GO 39132
39106: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
39107: LD_ADDR_VAR 0 3
39111: PUSH
39112: LD_INT 11
39114: PUSH
39115: LD_INT 12
39117: PUSH
39118: LD_INT 13
39120: PUSH
39121: LD_INT 14
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: ST_TO_ADDR
39130: GO 39707
39132: LD_INT 24
39134: DOUBLE
39135: EQUAL
39136: IFTRUE 39140
39138: GO 39166
39140: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
39141: LD_ADDR_VAR 0 3
39145: PUSH
39146: LD_INT 11
39148: PUSH
39149: LD_INT 12
39151: PUSH
39152: LD_INT 13
39154: PUSH
39155: LD_INT 14
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: ST_TO_ADDR
39164: GO 39707
39166: LD_INT 30
39168: DOUBLE
39169: EQUAL
39170: IFTRUE 39174
39172: GO 39200
39174: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
39175: LD_ADDR_VAR 0 3
39179: PUSH
39180: LD_INT 11
39182: PUSH
39183: LD_INT 12
39185: PUSH
39186: LD_INT 13
39188: PUSH
39189: LD_INT 14
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: ST_TO_ADDR
39198: GO 39707
39200: LD_INT 25
39202: DOUBLE
39203: EQUAL
39204: IFTRUE 39208
39206: GO 39226
39208: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
39209: LD_ADDR_VAR 0 3
39213: PUSH
39214: LD_INT 13
39216: PUSH
39217: LD_INT 14
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: ST_TO_ADDR
39224: GO 39707
39226: LD_INT 27
39228: DOUBLE
39229: EQUAL
39230: IFTRUE 39234
39232: GO 39252
39234: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
39235: LD_ADDR_VAR 0 3
39239: PUSH
39240: LD_INT 13
39242: PUSH
39243: LD_INT 14
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: ST_TO_ADDR
39250: GO 39707
39252: LD_INT 92
39254: DOUBLE
39255: EQUAL
39256: IFTRUE 39260
39258: GO 39286
39260: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
39261: LD_ADDR_VAR 0 3
39265: PUSH
39266: LD_INT 11
39268: PUSH
39269: LD_INT 12
39271: PUSH
39272: LD_INT 13
39274: PUSH
39275: LD_INT 14
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: LIST
39282: LIST
39283: ST_TO_ADDR
39284: GO 39707
39286: LD_INT 28
39288: DOUBLE
39289: EQUAL
39290: IFTRUE 39294
39292: GO 39312
39294: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
39295: LD_ADDR_VAR 0 3
39299: PUSH
39300: LD_INT 13
39302: PUSH
39303: LD_INT 14
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: ST_TO_ADDR
39310: GO 39707
39312: LD_INT 29
39314: DOUBLE
39315: EQUAL
39316: IFTRUE 39320
39318: GO 39338
39320: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
39321: LD_ADDR_VAR 0 3
39325: PUSH
39326: LD_INT 13
39328: PUSH
39329: LD_INT 14
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: ST_TO_ADDR
39336: GO 39707
39338: LD_INT 31
39340: DOUBLE
39341: EQUAL
39342: IFTRUE 39346
39344: GO 39364
39346: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
39347: LD_ADDR_VAR 0 3
39351: PUSH
39352: LD_INT 13
39354: PUSH
39355: LD_INT 14
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: ST_TO_ADDR
39362: GO 39707
39364: LD_INT 26
39366: DOUBLE
39367: EQUAL
39368: IFTRUE 39372
39370: GO 39390
39372: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
39373: LD_ADDR_VAR 0 3
39377: PUSH
39378: LD_INT 13
39380: PUSH
39381: LD_INT 14
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: ST_TO_ADDR
39388: GO 39707
39390: LD_INT 42
39392: DOUBLE
39393: EQUAL
39394: IFTRUE 39398
39396: GO 39424
39398: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
39399: LD_ADDR_VAR 0 3
39403: PUSH
39404: LD_INT 21
39406: PUSH
39407: LD_INT 22
39409: PUSH
39410: LD_INT 23
39412: PUSH
39413: LD_INT 24
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: LIST
39420: LIST
39421: ST_TO_ADDR
39422: GO 39707
39424: LD_INT 43
39426: DOUBLE
39427: EQUAL
39428: IFTRUE 39432
39430: GO 39458
39432: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
39433: LD_ADDR_VAR 0 3
39437: PUSH
39438: LD_INT 21
39440: PUSH
39441: LD_INT 22
39443: PUSH
39444: LD_INT 23
39446: PUSH
39447: LD_INT 24
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: LIST
39454: LIST
39455: ST_TO_ADDR
39456: GO 39707
39458: LD_INT 44
39460: DOUBLE
39461: EQUAL
39462: IFTRUE 39466
39464: GO 39492
39466: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
39467: LD_ADDR_VAR 0 3
39471: PUSH
39472: LD_INT 21
39474: PUSH
39475: LD_INT 22
39477: PUSH
39478: LD_INT 23
39480: PUSH
39481: LD_INT 24
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: LIST
39488: LIST
39489: ST_TO_ADDR
39490: GO 39707
39492: LD_INT 45
39494: DOUBLE
39495: EQUAL
39496: IFTRUE 39500
39498: GO 39526
39500: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
39501: LD_ADDR_VAR 0 3
39505: PUSH
39506: LD_INT 21
39508: PUSH
39509: LD_INT 22
39511: PUSH
39512: LD_INT 23
39514: PUSH
39515: LD_INT 24
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: ST_TO_ADDR
39524: GO 39707
39526: LD_INT 49
39528: DOUBLE
39529: EQUAL
39530: IFTRUE 39534
39532: GO 39560
39534: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
39535: LD_ADDR_VAR 0 3
39539: PUSH
39540: LD_INT 21
39542: PUSH
39543: LD_INT 22
39545: PUSH
39546: LD_INT 23
39548: PUSH
39549: LD_INT 24
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: ST_TO_ADDR
39558: GO 39707
39560: LD_INT 51
39562: DOUBLE
39563: EQUAL
39564: IFTRUE 39568
39566: GO 39594
39568: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
39569: LD_ADDR_VAR 0 3
39573: PUSH
39574: LD_INT 21
39576: PUSH
39577: LD_INT 22
39579: PUSH
39580: LD_INT 23
39582: PUSH
39583: LD_INT 24
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: ST_TO_ADDR
39592: GO 39707
39594: LD_INT 52
39596: DOUBLE
39597: EQUAL
39598: IFTRUE 39602
39600: GO 39628
39602: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
39603: LD_ADDR_VAR 0 3
39607: PUSH
39608: LD_INT 21
39610: PUSH
39611: LD_INT 22
39613: PUSH
39614: LD_INT 23
39616: PUSH
39617: LD_INT 24
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: ST_TO_ADDR
39626: GO 39707
39628: LD_INT 53
39630: DOUBLE
39631: EQUAL
39632: IFTRUE 39636
39634: GO 39654
39636: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
39637: LD_ADDR_VAR 0 3
39641: PUSH
39642: LD_INT 23
39644: PUSH
39645: LD_INT 24
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: ST_TO_ADDR
39652: GO 39707
39654: LD_INT 46
39656: DOUBLE
39657: EQUAL
39658: IFTRUE 39662
39660: GO 39680
39662: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
39663: LD_ADDR_VAR 0 3
39667: PUSH
39668: LD_INT 23
39670: PUSH
39671: LD_INT 24
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: ST_TO_ADDR
39678: GO 39707
39680: LD_INT 47
39682: DOUBLE
39683: EQUAL
39684: IFTRUE 39688
39686: GO 39706
39688: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39689: LD_ADDR_VAR 0 3
39693: PUSH
39694: LD_INT 23
39696: PUSH
39697: LD_INT 24
39699: PUSH
39700: EMPTY
39701: LIST
39702: LIST
39703: ST_TO_ADDR
39704: GO 39707
39706: POP
// result := ( chassis in result ) ;
39707: LD_ADDR_VAR 0 3
39711: PUSH
39712: LD_VAR 0 1
39716: PUSH
39717: LD_VAR 0 3
39721: IN
39722: ST_TO_ADDR
// end ;
39723: LD_VAR 0 3
39727: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
39728: LD_INT 0
39730: PPUSH
39731: PPUSH
39732: PPUSH
39733: PPUSH
39734: PPUSH
39735: PPUSH
39736: PPUSH
// result := array ;
39737: LD_ADDR_VAR 0 5
39741: PUSH
39742: LD_VAR 0 1
39746: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
39747: LD_VAR 0 1
39751: NOT
39752: PUSH
39753: LD_VAR 0 2
39757: NOT
39758: OR
39759: PUSH
39760: LD_VAR 0 3
39764: NOT
39765: OR
39766: PUSH
39767: LD_VAR 0 2
39771: PUSH
39772: LD_VAR 0 1
39776: GREATER
39777: OR
39778: PUSH
39779: LD_VAR 0 3
39783: PUSH
39784: LD_VAR 0 1
39788: GREATER
39789: OR
39790: IFFALSE 39794
// exit ;
39792: GO 40090
// if direction then
39794: LD_VAR 0 4
39798: IFFALSE 39862
// begin d := 1 ;
39800: LD_ADDR_VAR 0 9
39804: PUSH
39805: LD_INT 1
39807: ST_TO_ADDR
// if i_from > i_to then
39808: LD_VAR 0 2
39812: PUSH
39813: LD_VAR 0 3
39817: GREATER
39818: IFFALSE 39844
// length := ( array - i_from ) + i_to else
39820: LD_ADDR_VAR 0 11
39824: PUSH
39825: LD_VAR 0 1
39829: PUSH
39830: LD_VAR 0 2
39834: MINUS
39835: PUSH
39836: LD_VAR 0 3
39840: PLUS
39841: ST_TO_ADDR
39842: GO 39860
// length := i_to - i_from ;
39844: LD_ADDR_VAR 0 11
39848: PUSH
39849: LD_VAR 0 3
39853: PUSH
39854: LD_VAR 0 2
39858: MINUS
39859: ST_TO_ADDR
// end else
39860: GO 39923
// begin d := - 1 ;
39862: LD_ADDR_VAR 0 9
39866: PUSH
39867: LD_INT 1
39869: NEG
39870: ST_TO_ADDR
// if i_from > i_to then
39871: LD_VAR 0 2
39875: PUSH
39876: LD_VAR 0 3
39880: GREATER
39881: IFFALSE 39901
// length := i_from - i_to else
39883: LD_ADDR_VAR 0 11
39887: PUSH
39888: LD_VAR 0 2
39892: PUSH
39893: LD_VAR 0 3
39897: MINUS
39898: ST_TO_ADDR
39899: GO 39923
// length := ( array - i_to ) + i_from ;
39901: LD_ADDR_VAR 0 11
39905: PUSH
39906: LD_VAR 0 1
39910: PUSH
39911: LD_VAR 0 3
39915: MINUS
39916: PUSH
39917: LD_VAR 0 2
39921: PLUS
39922: ST_TO_ADDR
// end ; if not length then
39923: LD_VAR 0 11
39927: NOT
39928: IFFALSE 39932
// exit ;
39930: GO 40090
// tmp := array ;
39932: LD_ADDR_VAR 0 10
39936: PUSH
39937: LD_VAR 0 1
39941: ST_TO_ADDR
// for i = 1 to length do
39942: LD_ADDR_VAR 0 6
39946: PUSH
39947: DOUBLE
39948: LD_INT 1
39950: DEC
39951: ST_TO_ADDR
39952: LD_VAR 0 11
39956: PUSH
39957: FOR_TO
39958: IFFALSE 40078
// begin for j = 1 to array do
39960: LD_ADDR_VAR 0 7
39964: PUSH
39965: DOUBLE
39966: LD_INT 1
39968: DEC
39969: ST_TO_ADDR
39970: LD_VAR 0 1
39974: PUSH
39975: FOR_TO
39976: IFFALSE 40064
// begin k := j + d ;
39978: LD_ADDR_VAR 0 8
39982: PUSH
39983: LD_VAR 0 7
39987: PUSH
39988: LD_VAR 0 9
39992: PLUS
39993: ST_TO_ADDR
// if k > array then
39994: LD_VAR 0 8
39998: PUSH
39999: LD_VAR 0 1
40003: GREATER
40004: IFFALSE 40014
// k := 1 ;
40006: LD_ADDR_VAR 0 8
40010: PUSH
40011: LD_INT 1
40013: ST_TO_ADDR
// if not k then
40014: LD_VAR 0 8
40018: NOT
40019: IFFALSE 40031
// k := array ;
40021: LD_ADDR_VAR 0 8
40025: PUSH
40026: LD_VAR 0 1
40030: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
40031: LD_ADDR_VAR 0 10
40035: PUSH
40036: LD_VAR 0 10
40040: PPUSH
40041: LD_VAR 0 8
40045: PPUSH
40046: LD_VAR 0 1
40050: PUSH
40051: LD_VAR 0 7
40055: ARRAY
40056: PPUSH
40057: CALL_OW 1
40061: ST_TO_ADDR
// end ;
40062: GO 39975
40064: POP
40065: POP
// array := tmp ;
40066: LD_ADDR_VAR 0 1
40070: PUSH
40071: LD_VAR 0 10
40075: ST_TO_ADDR
// end ;
40076: GO 39957
40078: POP
40079: POP
// result := array ;
40080: LD_ADDR_VAR 0 5
40084: PUSH
40085: LD_VAR 0 1
40089: ST_TO_ADDR
// end ;
40090: LD_VAR 0 5
40094: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
40095: LD_INT 0
40097: PPUSH
40098: PPUSH
// result := 0 ;
40099: LD_ADDR_VAR 0 3
40103: PUSH
40104: LD_INT 0
40106: ST_TO_ADDR
// if not array or not value in array then
40107: LD_VAR 0 1
40111: NOT
40112: PUSH
40113: LD_VAR 0 2
40117: PUSH
40118: LD_VAR 0 1
40122: IN
40123: NOT
40124: OR
40125: IFFALSE 40129
// exit ;
40127: GO 40183
// for i = 1 to array do
40129: LD_ADDR_VAR 0 4
40133: PUSH
40134: DOUBLE
40135: LD_INT 1
40137: DEC
40138: ST_TO_ADDR
40139: LD_VAR 0 1
40143: PUSH
40144: FOR_TO
40145: IFFALSE 40181
// if value = array [ i ] then
40147: LD_VAR 0 2
40151: PUSH
40152: LD_VAR 0 1
40156: PUSH
40157: LD_VAR 0 4
40161: ARRAY
40162: EQUAL
40163: IFFALSE 40179
// begin result := i ;
40165: LD_ADDR_VAR 0 3
40169: PUSH
40170: LD_VAR 0 4
40174: ST_TO_ADDR
// exit ;
40175: POP
40176: POP
40177: GO 40183
// end ;
40179: GO 40144
40181: POP
40182: POP
// end ;
40183: LD_VAR 0 3
40187: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
40188: LD_INT 0
40190: PPUSH
// vc_chassis := chassis ;
40191: LD_ADDR_OWVAR 37
40195: PUSH
40196: LD_VAR 0 1
40200: ST_TO_ADDR
// vc_engine := engine ;
40201: LD_ADDR_OWVAR 39
40205: PUSH
40206: LD_VAR 0 2
40210: ST_TO_ADDR
// vc_control := control ;
40211: LD_ADDR_OWVAR 38
40215: PUSH
40216: LD_VAR 0 3
40220: ST_TO_ADDR
// vc_weapon := weapon ;
40221: LD_ADDR_OWVAR 40
40225: PUSH
40226: LD_VAR 0 4
40230: ST_TO_ADDR
// vc_fuel_battery := fuel ;
40231: LD_ADDR_OWVAR 41
40235: PUSH
40236: LD_VAR 0 5
40240: ST_TO_ADDR
// end ;
40241: LD_VAR 0 6
40245: RET
// export function WantPlant ( unit ) ; var task ; begin
40246: LD_INT 0
40248: PPUSH
40249: PPUSH
// result := false ;
40250: LD_ADDR_VAR 0 2
40254: PUSH
40255: LD_INT 0
40257: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
40258: LD_ADDR_VAR 0 3
40262: PUSH
40263: LD_VAR 0 1
40267: PPUSH
40268: CALL_OW 437
40272: ST_TO_ADDR
// if task then
40273: LD_VAR 0 3
40277: IFFALSE 40305
// if task [ 1 ] [ 1 ] = p then
40279: LD_VAR 0 3
40283: PUSH
40284: LD_INT 1
40286: ARRAY
40287: PUSH
40288: LD_INT 1
40290: ARRAY
40291: PUSH
40292: LD_STRING p
40294: EQUAL
40295: IFFALSE 40305
// result := true ;
40297: LD_ADDR_VAR 0 2
40301: PUSH
40302: LD_INT 1
40304: ST_TO_ADDR
// end ;
40305: LD_VAR 0 2
40309: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
40310: LD_INT 0
40312: PPUSH
40313: PPUSH
40314: PPUSH
40315: PPUSH
// if pos < 1 then
40316: LD_VAR 0 2
40320: PUSH
40321: LD_INT 1
40323: LESS
40324: IFFALSE 40328
// exit ;
40326: GO 40631
// if pos = 1 then
40328: LD_VAR 0 2
40332: PUSH
40333: LD_INT 1
40335: EQUAL
40336: IFFALSE 40369
// result := Replace ( arr , pos [ 1 ] , value ) else
40338: LD_ADDR_VAR 0 4
40342: PUSH
40343: LD_VAR 0 1
40347: PPUSH
40348: LD_VAR 0 2
40352: PUSH
40353: LD_INT 1
40355: ARRAY
40356: PPUSH
40357: LD_VAR 0 3
40361: PPUSH
40362: CALL_OW 1
40366: ST_TO_ADDR
40367: GO 40631
// begin tmp := arr ;
40369: LD_ADDR_VAR 0 6
40373: PUSH
40374: LD_VAR 0 1
40378: ST_TO_ADDR
// s_arr := [ tmp ] ;
40379: LD_ADDR_VAR 0 7
40383: PUSH
40384: LD_VAR 0 6
40388: PUSH
40389: EMPTY
40390: LIST
40391: ST_TO_ADDR
// for i = 1 to pos - 1 do
40392: LD_ADDR_VAR 0 5
40396: PUSH
40397: DOUBLE
40398: LD_INT 1
40400: DEC
40401: ST_TO_ADDR
40402: LD_VAR 0 2
40406: PUSH
40407: LD_INT 1
40409: MINUS
40410: PUSH
40411: FOR_TO
40412: IFFALSE 40457
// begin tmp := tmp [ pos [ i ] ] ;
40414: LD_ADDR_VAR 0 6
40418: PUSH
40419: LD_VAR 0 6
40423: PUSH
40424: LD_VAR 0 2
40428: PUSH
40429: LD_VAR 0 5
40433: ARRAY
40434: ARRAY
40435: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
40436: LD_ADDR_VAR 0 7
40440: PUSH
40441: LD_VAR 0 7
40445: PUSH
40446: LD_VAR 0 6
40450: PUSH
40451: EMPTY
40452: LIST
40453: ADD
40454: ST_TO_ADDR
// end ;
40455: GO 40411
40457: POP
40458: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
40459: LD_ADDR_VAR 0 6
40463: PUSH
40464: LD_VAR 0 6
40468: PPUSH
40469: LD_VAR 0 2
40473: PUSH
40474: LD_VAR 0 2
40478: ARRAY
40479: PPUSH
40480: LD_VAR 0 3
40484: PPUSH
40485: CALL_OW 1
40489: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
40490: LD_ADDR_VAR 0 7
40494: PUSH
40495: LD_VAR 0 7
40499: PPUSH
40500: LD_VAR 0 7
40504: PPUSH
40505: LD_VAR 0 6
40509: PPUSH
40510: CALL_OW 1
40514: ST_TO_ADDR
// for i = s_arr downto 2 do
40515: LD_ADDR_VAR 0 5
40519: PUSH
40520: DOUBLE
40521: LD_VAR 0 7
40525: INC
40526: ST_TO_ADDR
40527: LD_INT 2
40529: PUSH
40530: FOR_DOWNTO
40531: IFFALSE 40615
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
40533: LD_ADDR_VAR 0 6
40537: PUSH
40538: LD_VAR 0 7
40542: PUSH
40543: LD_VAR 0 5
40547: PUSH
40548: LD_INT 1
40550: MINUS
40551: ARRAY
40552: PPUSH
40553: LD_VAR 0 2
40557: PUSH
40558: LD_VAR 0 5
40562: PUSH
40563: LD_INT 1
40565: MINUS
40566: ARRAY
40567: PPUSH
40568: LD_VAR 0 7
40572: PUSH
40573: LD_VAR 0 5
40577: ARRAY
40578: PPUSH
40579: CALL_OW 1
40583: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
40584: LD_ADDR_VAR 0 7
40588: PUSH
40589: LD_VAR 0 7
40593: PPUSH
40594: LD_VAR 0 5
40598: PUSH
40599: LD_INT 1
40601: MINUS
40602: PPUSH
40603: LD_VAR 0 6
40607: PPUSH
40608: CALL_OW 1
40612: ST_TO_ADDR
// end ;
40613: GO 40530
40615: POP
40616: POP
// result := s_arr [ 1 ] ;
40617: LD_ADDR_VAR 0 4
40621: PUSH
40622: LD_VAR 0 7
40626: PUSH
40627: LD_INT 1
40629: ARRAY
40630: ST_TO_ADDR
// end ; end ;
40631: LD_VAR 0 4
40635: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
40636: LD_INT 0
40638: PPUSH
40639: PPUSH
// if not list then
40640: LD_VAR 0 1
40644: NOT
40645: IFFALSE 40649
// exit ;
40647: GO 40740
// i := list [ pos1 ] ;
40649: LD_ADDR_VAR 0 5
40653: PUSH
40654: LD_VAR 0 1
40658: PUSH
40659: LD_VAR 0 2
40663: ARRAY
40664: ST_TO_ADDR
// if not i then
40665: LD_VAR 0 5
40669: NOT
40670: IFFALSE 40674
// exit ;
40672: GO 40740
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
40674: LD_ADDR_VAR 0 1
40678: PUSH
40679: LD_VAR 0 1
40683: PPUSH
40684: LD_VAR 0 2
40688: PPUSH
40689: LD_VAR 0 1
40693: PUSH
40694: LD_VAR 0 3
40698: ARRAY
40699: PPUSH
40700: CALL_OW 1
40704: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
40705: LD_ADDR_VAR 0 1
40709: PUSH
40710: LD_VAR 0 1
40714: PPUSH
40715: LD_VAR 0 3
40719: PPUSH
40720: LD_VAR 0 5
40724: PPUSH
40725: CALL_OW 1
40729: ST_TO_ADDR
// result := list ;
40730: LD_ADDR_VAR 0 4
40734: PUSH
40735: LD_VAR 0 1
40739: ST_TO_ADDR
// end ;
40740: LD_VAR 0 4
40744: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
40745: LD_INT 0
40747: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
40748: LD_ADDR_VAR 0 5
40752: PUSH
40753: LD_VAR 0 1
40757: PPUSH
40758: CALL_OW 250
40762: PPUSH
40763: LD_VAR 0 1
40767: PPUSH
40768: CALL_OW 251
40772: PPUSH
40773: LD_VAR 0 2
40777: PPUSH
40778: LD_VAR 0 3
40782: PPUSH
40783: LD_VAR 0 4
40787: PPUSH
40788: CALL 40798 0 5
40792: ST_TO_ADDR
// end ;
40793: LD_VAR 0 5
40797: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
40798: LD_INT 0
40800: PPUSH
40801: PPUSH
40802: PPUSH
40803: PPUSH
// if not list then
40804: LD_VAR 0 3
40808: NOT
40809: IFFALSE 40813
// exit ;
40811: GO 41201
// result := [ ] ;
40813: LD_ADDR_VAR 0 6
40817: PUSH
40818: EMPTY
40819: ST_TO_ADDR
// for i in list do
40820: LD_ADDR_VAR 0 7
40824: PUSH
40825: LD_VAR 0 3
40829: PUSH
40830: FOR_IN
40831: IFFALSE 41033
// begin tmp := GetDistUnitXY ( i , x , y ) ;
40833: LD_ADDR_VAR 0 9
40837: PUSH
40838: LD_VAR 0 7
40842: PPUSH
40843: LD_VAR 0 1
40847: PPUSH
40848: LD_VAR 0 2
40852: PPUSH
40853: CALL_OW 297
40857: ST_TO_ADDR
// if not result then
40858: LD_VAR 0 6
40862: NOT
40863: IFFALSE 40889
// result := [ [ i , tmp ] ] else
40865: LD_ADDR_VAR 0 6
40869: PUSH
40870: LD_VAR 0 7
40874: PUSH
40875: LD_VAR 0 9
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: EMPTY
40885: LIST
40886: ST_TO_ADDR
40887: GO 41031
// begin if result [ result ] [ 2 ] < tmp then
40889: LD_VAR 0 6
40893: PUSH
40894: LD_VAR 0 6
40898: ARRAY
40899: PUSH
40900: LD_INT 2
40902: ARRAY
40903: PUSH
40904: LD_VAR 0 9
40908: LESS
40909: IFFALSE 40951
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
40911: LD_ADDR_VAR 0 6
40915: PUSH
40916: LD_VAR 0 6
40920: PPUSH
40921: LD_VAR 0 6
40925: PUSH
40926: LD_INT 1
40928: PLUS
40929: PPUSH
40930: LD_VAR 0 7
40934: PUSH
40935: LD_VAR 0 9
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: PPUSH
40944: CALL_OW 2
40948: ST_TO_ADDR
40949: GO 41031
// for j = 1 to result do
40951: LD_ADDR_VAR 0 8
40955: PUSH
40956: DOUBLE
40957: LD_INT 1
40959: DEC
40960: ST_TO_ADDR
40961: LD_VAR 0 6
40965: PUSH
40966: FOR_TO
40967: IFFALSE 41029
// begin if tmp < result [ j ] [ 2 ] then
40969: LD_VAR 0 9
40973: PUSH
40974: LD_VAR 0 6
40978: PUSH
40979: LD_VAR 0 8
40983: ARRAY
40984: PUSH
40985: LD_INT 2
40987: ARRAY
40988: LESS
40989: IFFALSE 41027
// begin result := Insert ( result , j , [ i , tmp ] ) ;
40991: LD_ADDR_VAR 0 6
40995: PUSH
40996: LD_VAR 0 6
41000: PPUSH
41001: LD_VAR 0 8
41005: PPUSH
41006: LD_VAR 0 7
41010: PUSH
41011: LD_VAR 0 9
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PPUSH
41020: CALL_OW 2
41024: ST_TO_ADDR
// break ;
41025: GO 41029
// end ; end ;
41027: GO 40966
41029: POP
41030: POP
// end ; end ;
41031: GO 40830
41033: POP
41034: POP
// if result and not asc then
41035: LD_VAR 0 6
41039: PUSH
41040: LD_VAR 0 4
41044: NOT
41045: AND
41046: IFFALSE 41121
// begin tmp := result ;
41048: LD_ADDR_VAR 0 9
41052: PUSH
41053: LD_VAR 0 6
41057: ST_TO_ADDR
// for i = tmp downto 1 do
41058: LD_ADDR_VAR 0 7
41062: PUSH
41063: DOUBLE
41064: LD_VAR 0 9
41068: INC
41069: ST_TO_ADDR
41070: LD_INT 1
41072: PUSH
41073: FOR_DOWNTO
41074: IFFALSE 41119
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
41076: LD_ADDR_VAR 0 6
41080: PUSH
41081: LD_VAR 0 6
41085: PPUSH
41086: LD_VAR 0 9
41090: PUSH
41091: LD_VAR 0 7
41095: MINUS
41096: PUSH
41097: LD_INT 1
41099: PLUS
41100: PPUSH
41101: LD_VAR 0 9
41105: PUSH
41106: LD_VAR 0 7
41110: ARRAY
41111: PPUSH
41112: CALL_OW 1
41116: ST_TO_ADDR
41117: GO 41073
41119: POP
41120: POP
// end ; tmp := [ ] ;
41121: LD_ADDR_VAR 0 9
41125: PUSH
41126: EMPTY
41127: ST_TO_ADDR
// if mode then
41128: LD_VAR 0 5
41132: IFFALSE 41201
// begin for i = 1 to result do
41134: LD_ADDR_VAR 0 7
41138: PUSH
41139: DOUBLE
41140: LD_INT 1
41142: DEC
41143: ST_TO_ADDR
41144: LD_VAR 0 6
41148: PUSH
41149: FOR_TO
41150: IFFALSE 41189
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
41152: LD_ADDR_VAR 0 9
41156: PUSH
41157: LD_VAR 0 9
41161: PPUSH
41162: LD_VAR 0 7
41166: PPUSH
41167: LD_VAR 0 6
41171: PUSH
41172: LD_VAR 0 7
41176: ARRAY
41177: PUSH
41178: LD_INT 1
41180: ARRAY
41181: PPUSH
41182: CALL_OW 1
41186: ST_TO_ADDR
41187: GO 41149
41189: POP
41190: POP
// result := tmp ;
41191: LD_ADDR_VAR 0 6
41195: PUSH
41196: LD_VAR 0 9
41200: ST_TO_ADDR
// end ; end ;
41201: LD_VAR 0 6
41205: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
41206: LD_INT 0
41208: PPUSH
41209: PPUSH
41210: PPUSH
41211: PPUSH
41212: PPUSH
41213: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
41214: LD_ADDR_VAR 0 5
41218: PUSH
41219: LD_INT 0
41221: PUSH
41222: LD_INT 0
41224: PUSH
41225: LD_INT 0
41227: PUSH
41228: EMPTY
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: LIST
41234: LIST
41235: ST_TO_ADDR
// if not x or not y then
41236: LD_VAR 0 2
41240: NOT
41241: PUSH
41242: LD_VAR 0 3
41246: NOT
41247: OR
41248: IFFALSE 41252
// exit ;
41250: GO 42902
// if not range then
41252: LD_VAR 0 4
41256: NOT
41257: IFFALSE 41267
// range := 10 ;
41259: LD_ADDR_VAR 0 4
41263: PUSH
41264: LD_INT 10
41266: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41267: LD_ADDR_VAR 0 8
41271: PUSH
41272: LD_INT 81
41274: PUSH
41275: LD_VAR 0 1
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: LD_INT 92
41286: PUSH
41287: LD_VAR 0 2
41291: PUSH
41292: LD_VAR 0 3
41296: PUSH
41297: LD_VAR 0 4
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 3
41310: PUSH
41311: LD_INT 21
41313: PUSH
41314: LD_INT 3
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: LIST
41329: PPUSH
41330: CALL_OW 69
41334: ST_TO_ADDR
// if not tmp then
41335: LD_VAR 0 8
41339: NOT
41340: IFFALSE 41344
// exit ;
41342: GO 42902
// for i in tmp do
41344: LD_ADDR_VAR 0 6
41348: PUSH
41349: LD_VAR 0 8
41353: PUSH
41354: FOR_IN
41355: IFFALSE 42877
// begin points := [ 0 , 0 , 0 ] ;
41357: LD_ADDR_VAR 0 9
41361: PUSH
41362: LD_INT 0
41364: PUSH
41365: LD_INT 0
41367: PUSH
41368: LD_INT 0
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: LIST
41375: ST_TO_ADDR
// bpoints := 1 ;
41376: LD_ADDR_VAR 0 10
41380: PUSH
41381: LD_INT 1
41383: ST_TO_ADDR
// case GetType ( i ) of unit_human :
41384: LD_VAR 0 6
41388: PPUSH
41389: CALL_OW 247
41393: PUSH
41394: LD_INT 1
41396: DOUBLE
41397: EQUAL
41398: IFTRUE 41402
41400: GO 41980
41402: POP
// begin if GetClass ( i ) = 1 then
41403: LD_VAR 0 6
41407: PPUSH
41408: CALL_OW 257
41412: PUSH
41413: LD_INT 1
41415: EQUAL
41416: IFFALSE 41437
// points := [ 10 , 5 , 3 ] ;
41418: LD_ADDR_VAR 0 9
41422: PUSH
41423: LD_INT 10
41425: PUSH
41426: LD_INT 5
41428: PUSH
41429: LD_INT 3
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: LIST
41436: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
41437: LD_VAR 0 6
41441: PPUSH
41442: CALL_OW 257
41446: PUSH
41447: LD_INT 2
41449: PUSH
41450: LD_INT 3
41452: PUSH
41453: LD_INT 4
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: LIST
41460: IN
41461: IFFALSE 41482
// points := [ 3 , 2 , 1 ] ;
41463: LD_ADDR_VAR 0 9
41467: PUSH
41468: LD_INT 3
41470: PUSH
41471: LD_INT 2
41473: PUSH
41474: LD_INT 1
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: LIST
41481: ST_TO_ADDR
// if GetClass ( i ) = 5 then
41482: LD_VAR 0 6
41486: PPUSH
41487: CALL_OW 257
41491: PUSH
41492: LD_INT 5
41494: EQUAL
41495: IFFALSE 41516
// points := [ 130 , 5 , 2 ] ;
41497: LD_ADDR_VAR 0 9
41501: PUSH
41502: LD_INT 130
41504: PUSH
41505: LD_INT 5
41507: PUSH
41508: LD_INT 2
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: LIST
41515: ST_TO_ADDR
// if GetClass ( i ) = 8 then
41516: LD_VAR 0 6
41520: PPUSH
41521: CALL_OW 257
41525: PUSH
41526: LD_INT 8
41528: EQUAL
41529: IFFALSE 41550
// points := [ 35 , 35 , 30 ] ;
41531: LD_ADDR_VAR 0 9
41535: PUSH
41536: LD_INT 35
41538: PUSH
41539: LD_INT 35
41541: PUSH
41542: LD_INT 30
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: LIST
41549: ST_TO_ADDR
// if GetClass ( i ) = 9 then
41550: LD_VAR 0 6
41554: PPUSH
41555: CALL_OW 257
41559: PUSH
41560: LD_INT 9
41562: EQUAL
41563: IFFALSE 41584
// points := [ 20 , 55 , 40 ] ;
41565: LD_ADDR_VAR 0 9
41569: PUSH
41570: LD_INT 20
41572: PUSH
41573: LD_INT 55
41575: PUSH
41576: LD_INT 40
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: LIST
41583: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
41584: LD_VAR 0 6
41588: PPUSH
41589: CALL_OW 257
41593: PUSH
41594: LD_INT 12
41596: PUSH
41597: LD_INT 16
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: IN
41604: IFFALSE 41625
// points := [ 5 , 3 , 2 ] ;
41606: LD_ADDR_VAR 0 9
41610: PUSH
41611: LD_INT 5
41613: PUSH
41614: LD_INT 3
41616: PUSH
41617: LD_INT 2
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: LIST
41624: ST_TO_ADDR
// if GetClass ( i ) = 17 then
41625: LD_VAR 0 6
41629: PPUSH
41630: CALL_OW 257
41634: PUSH
41635: LD_INT 17
41637: EQUAL
41638: IFFALSE 41659
// points := [ 100 , 50 , 75 ] ;
41640: LD_ADDR_VAR 0 9
41644: PUSH
41645: LD_INT 100
41647: PUSH
41648: LD_INT 50
41650: PUSH
41651: LD_INT 75
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: LIST
41658: ST_TO_ADDR
// if GetClass ( i ) = 15 then
41659: LD_VAR 0 6
41663: PPUSH
41664: CALL_OW 257
41668: PUSH
41669: LD_INT 15
41671: EQUAL
41672: IFFALSE 41693
// points := [ 10 , 5 , 3 ] ;
41674: LD_ADDR_VAR 0 9
41678: PUSH
41679: LD_INT 10
41681: PUSH
41682: LD_INT 5
41684: PUSH
41685: LD_INT 3
41687: PUSH
41688: EMPTY
41689: LIST
41690: LIST
41691: LIST
41692: ST_TO_ADDR
// if GetClass ( i ) = 14 then
41693: LD_VAR 0 6
41697: PPUSH
41698: CALL_OW 257
41702: PUSH
41703: LD_INT 14
41705: EQUAL
41706: IFFALSE 41727
// points := [ 10 , 0 , 0 ] ;
41708: LD_ADDR_VAR 0 9
41712: PUSH
41713: LD_INT 10
41715: PUSH
41716: LD_INT 0
41718: PUSH
41719: LD_INT 0
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: LIST
41726: ST_TO_ADDR
// if GetClass ( i ) = 11 then
41727: LD_VAR 0 6
41731: PPUSH
41732: CALL_OW 257
41736: PUSH
41737: LD_INT 11
41739: EQUAL
41740: IFFALSE 41761
// points := [ 30 , 10 , 5 ] ;
41742: LD_ADDR_VAR 0 9
41746: PUSH
41747: LD_INT 30
41749: PUSH
41750: LD_INT 10
41752: PUSH
41753: LD_INT 5
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: LIST
41760: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
41761: LD_VAR 0 1
41765: PPUSH
41766: LD_INT 5
41768: PPUSH
41769: CALL_OW 321
41773: PUSH
41774: LD_INT 2
41776: EQUAL
41777: IFFALSE 41794
// bpoints := bpoints * 1.8 ;
41779: LD_ADDR_VAR 0 10
41783: PUSH
41784: LD_VAR 0 10
41788: PUSH
41789: LD_REAL  1.80000000000000E+0000
41792: MUL
41793: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
41794: LD_VAR 0 6
41798: PPUSH
41799: CALL_OW 257
41803: PUSH
41804: LD_INT 1
41806: PUSH
41807: LD_INT 2
41809: PUSH
41810: LD_INT 3
41812: PUSH
41813: LD_INT 4
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: IN
41822: PUSH
41823: LD_VAR 0 1
41827: PPUSH
41828: LD_INT 51
41830: PPUSH
41831: CALL_OW 321
41835: PUSH
41836: LD_INT 2
41838: EQUAL
41839: AND
41840: IFFALSE 41857
// bpoints := bpoints * 1.2 ;
41842: LD_ADDR_VAR 0 10
41846: PUSH
41847: LD_VAR 0 10
41851: PUSH
41852: LD_REAL  1.20000000000000E+0000
41855: MUL
41856: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
41857: LD_VAR 0 6
41861: PPUSH
41862: CALL_OW 257
41866: PUSH
41867: LD_INT 5
41869: PUSH
41870: LD_INT 7
41872: PUSH
41873: LD_INT 9
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: LIST
41880: IN
41881: PUSH
41882: LD_VAR 0 1
41886: PPUSH
41887: LD_INT 52
41889: PPUSH
41890: CALL_OW 321
41894: PUSH
41895: LD_INT 2
41897: EQUAL
41898: AND
41899: IFFALSE 41916
// bpoints := bpoints * 1.5 ;
41901: LD_ADDR_VAR 0 10
41905: PUSH
41906: LD_VAR 0 10
41910: PUSH
41911: LD_REAL  1.50000000000000E+0000
41914: MUL
41915: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
41916: LD_VAR 0 1
41920: PPUSH
41921: LD_INT 66
41923: PPUSH
41924: CALL_OW 321
41928: PUSH
41929: LD_INT 2
41931: EQUAL
41932: IFFALSE 41949
// bpoints := bpoints * 1.1 ;
41934: LD_ADDR_VAR 0 10
41938: PUSH
41939: LD_VAR 0 10
41943: PUSH
41944: LD_REAL  1.10000000000000E+0000
41947: MUL
41948: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
41949: LD_ADDR_VAR 0 10
41953: PUSH
41954: LD_VAR 0 10
41958: PUSH
41959: LD_VAR 0 6
41963: PPUSH
41964: LD_INT 1
41966: PPUSH
41967: CALL_OW 259
41971: PUSH
41972: LD_REAL  1.15000000000000E+0000
41975: MUL
41976: MUL
41977: ST_TO_ADDR
// end ; unit_vehicle :
41978: GO 42806
41980: LD_INT 2
41982: DOUBLE
41983: EQUAL
41984: IFTRUE 41988
41986: GO 42794
41988: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
41989: LD_VAR 0 6
41993: PPUSH
41994: CALL_OW 264
41998: PUSH
41999: LD_INT 2
42001: PUSH
42002: LD_INT 42
42004: PUSH
42005: LD_INT 24
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: LIST
42012: IN
42013: IFFALSE 42034
// points := [ 25 , 5 , 3 ] ;
42015: LD_ADDR_VAR 0 9
42019: PUSH
42020: LD_INT 25
42022: PUSH
42023: LD_INT 5
42025: PUSH
42026: LD_INT 3
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: LIST
42033: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
42034: LD_VAR 0 6
42038: PPUSH
42039: CALL_OW 264
42043: PUSH
42044: LD_INT 4
42046: PUSH
42047: LD_INT 43
42049: PUSH
42050: LD_INT 25
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: LIST
42057: IN
42058: IFFALSE 42079
// points := [ 40 , 15 , 5 ] ;
42060: LD_ADDR_VAR 0 9
42064: PUSH
42065: LD_INT 40
42067: PUSH
42068: LD_INT 15
42070: PUSH
42071: LD_INT 5
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: LIST
42078: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
42079: LD_VAR 0 6
42083: PPUSH
42084: CALL_OW 264
42088: PUSH
42089: LD_INT 3
42091: PUSH
42092: LD_INT 23
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: IN
42099: IFFALSE 42120
// points := [ 7 , 25 , 8 ] ;
42101: LD_ADDR_VAR 0 9
42105: PUSH
42106: LD_INT 7
42108: PUSH
42109: LD_INT 25
42111: PUSH
42112: LD_INT 8
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: LIST
42119: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
42120: LD_VAR 0 6
42124: PPUSH
42125: CALL_OW 264
42129: PUSH
42130: LD_INT 5
42132: PUSH
42133: LD_INT 27
42135: PUSH
42136: LD_INT 44
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: LIST
42143: IN
42144: IFFALSE 42165
// points := [ 14 , 50 , 16 ] ;
42146: LD_ADDR_VAR 0 9
42150: PUSH
42151: LD_INT 14
42153: PUSH
42154: LD_INT 50
42156: PUSH
42157: LD_INT 16
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: LIST
42164: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
42165: LD_VAR 0 6
42169: PPUSH
42170: CALL_OW 264
42174: PUSH
42175: LD_INT 6
42177: PUSH
42178: LD_INT 46
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: IN
42185: IFFALSE 42206
// points := [ 32 , 120 , 70 ] ;
42187: LD_ADDR_VAR 0 9
42191: PUSH
42192: LD_INT 32
42194: PUSH
42195: LD_INT 120
42197: PUSH
42198: LD_INT 70
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: LIST
42205: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
42206: LD_VAR 0 6
42210: PPUSH
42211: CALL_OW 264
42215: PUSH
42216: LD_INT 7
42218: PUSH
42219: LD_INT 28
42221: PUSH
42222: LD_INT 45
42224: PUSH
42225: LD_INT 92
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: IN
42234: IFFALSE 42255
// points := [ 35 , 20 , 45 ] ;
42236: LD_ADDR_VAR 0 9
42240: PUSH
42241: LD_INT 35
42243: PUSH
42244: LD_INT 20
42246: PUSH
42247: LD_INT 45
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: LIST
42254: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
42255: LD_VAR 0 6
42259: PPUSH
42260: CALL_OW 264
42264: PUSH
42265: LD_INT 47
42267: PUSH
42268: EMPTY
42269: LIST
42270: IN
42271: IFFALSE 42292
// points := [ 67 , 45 , 75 ] ;
42273: LD_ADDR_VAR 0 9
42277: PUSH
42278: LD_INT 67
42280: PUSH
42281: LD_INT 45
42283: PUSH
42284: LD_INT 75
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: LIST
42291: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
42292: LD_VAR 0 6
42296: PPUSH
42297: CALL_OW 264
42301: PUSH
42302: LD_INT 26
42304: PUSH
42305: EMPTY
42306: LIST
42307: IN
42308: IFFALSE 42329
// points := [ 120 , 30 , 80 ] ;
42310: LD_ADDR_VAR 0 9
42314: PUSH
42315: LD_INT 120
42317: PUSH
42318: LD_INT 30
42320: PUSH
42321: LD_INT 80
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: LIST
42328: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
42329: LD_VAR 0 6
42333: PPUSH
42334: CALL_OW 264
42338: PUSH
42339: LD_INT 22
42341: PUSH
42342: EMPTY
42343: LIST
42344: IN
42345: IFFALSE 42366
// points := [ 40 , 1 , 1 ] ;
42347: LD_ADDR_VAR 0 9
42351: PUSH
42352: LD_INT 40
42354: PUSH
42355: LD_INT 1
42357: PUSH
42358: LD_INT 1
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: LIST
42365: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
42366: LD_VAR 0 6
42370: PPUSH
42371: CALL_OW 264
42375: PUSH
42376: LD_INT 29
42378: PUSH
42379: EMPTY
42380: LIST
42381: IN
42382: IFFALSE 42403
// points := [ 70 , 200 , 400 ] ;
42384: LD_ADDR_VAR 0 9
42388: PUSH
42389: LD_INT 70
42391: PUSH
42392: LD_INT 200
42394: PUSH
42395: LD_INT 400
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: LIST
42402: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
42403: LD_VAR 0 6
42407: PPUSH
42408: CALL_OW 264
42412: PUSH
42413: LD_INT 14
42415: PUSH
42416: LD_INT 53
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: IN
42423: IFFALSE 42444
// points := [ 40 , 10 , 20 ] ;
42425: LD_ADDR_VAR 0 9
42429: PUSH
42430: LD_INT 40
42432: PUSH
42433: LD_INT 10
42435: PUSH
42436: LD_INT 20
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: LIST
42443: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
42444: LD_VAR 0 6
42448: PPUSH
42449: CALL_OW 264
42453: PUSH
42454: LD_INT 9
42456: PUSH
42457: EMPTY
42458: LIST
42459: IN
42460: IFFALSE 42481
// points := [ 5 , 70 , 20 ] ;
42462: LD_ADDR_VAR 0 9
42466: PUSH
42467: LD_INT 5
42469: PUSH
42470: LD_INT 70
42472: PUSH
42473: LD_INT 20
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: LIST
42480: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
42481: LD_VAR 0 6
42485: PPUSH
42486: CALL_OW 264
42490: PUSH
42491: LD_INT 10
42493: PUSH
42494: EMPTY
42495: LIST
42496: IN
42497: IFFALSE 42518
// points := [ 35 , 110 , 70 ] ;
42499: LD_ADDR_VAR 0 9
42503: PUSH
42504: LD_INT 35
42506: PUSH
42507: LD_INT 110
42509: PUSH
42510: LD_INT 70
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: LIST
42517: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
42518: LD_VAR 0 6
42522: PPUSH
42523: CALL_OW 265
42527: PUSH
42528: LD_INT 25
42530: EQUAL
42531: IFFALSE 42552
// points := [ 80 , 65 , 100 ] ;
42533: LD_ADDR_VAR 0 9
42537: PUSH
42538: LD_INT 80
42540: PUSH
42541: LD_INT 65
42543: PUSH
42544: LD_INT 100
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: LIST
42551: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
42552: LD_VAR 0 6
42556: PPUSH
42557: CALL_OW 263
42561: PUSH
42562: LD_INT 1
42564: EQUAL
42565: IFFALSE 42600
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
42567: LD_ADDR_VAR 0 10
42571: PUSH
42572: LD_VAR 0 10
42576: PUSH
42577: LD_VAR 0 6
42581: PPUSH
42582: CALL_OW 311
42586: PPUSH
42587: LD_INT 3
42589: PPUSH
42590: CALL_OW 259
42594: PUSH
42595: LD_INT 4
42597: MUL
42598: MUL
42599: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
42600: LD_VAR 0 6
42604: PPUSH
42605: CALL_OW 263
42609: PUSH
42610: LD_INT 2
42612: EQUAL
42613: IFFALSE 42664
// begin j := IsControledBy ( i ) ;
42615: LD_ADDR_VAR 0 7
42619: PUSH
42620: LD_VAR 0 6
42624: PPUSH
42625: CALL_OW 312
42629: ST_TO_ADDR
// if j then
42630: LD_VAR 0 7
42634: IFFALSE 42664
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
42636: LD_ADDR_VAR 0 10
42640: PUSH
42641: LD_VAR 0 10
42645: PUSH
42646: LD_VAR 0 7
42650: PPUSH
42651: LD_INT 3
42653: PPUSH
42654: CALL_OW 259
42658: PUSH
42659: LD_INT 3
42661: MUL
42662: MUL
42663: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
42664: LD_VAR 0 6
42668: PPUSH
42669: CALL_OW 264
42673: PUSH
42674: LD_INT 5
42676: PUSH
42677: LD_INT 6
42679: PUSH
42680: LD_INT 46
42682: PUSH
42683: LD_INT 44
42685: PUSH
42686: LD_INT 47
42688: PUSH
42689: LD_INT 45
42691: PUSH
42692: LD_INT 28
42694: PUSH
42695: LD_INT 7
42697: PUSH
42698: LD_INT 27
42700: PUSH
42701: LD_INT 29
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: LIST
42708: LIST
42709: LIST
42710: LIST
42711: LIST
42712: LIST
42713: LIST
42714: LIST
42715: IN
42716: PUSH
42717: LD_VAR 0 1
42721: PPUSH
42722: LD_INT 52
42724: PPUSH
42725: CALL_OW 321
42729: PUSH
42730: LD_INT 2
42732: EQUAL
42733: AND
42734: IFFALSE 42751
// bpoints := bpoints * 1.2 ;
42736: LD_ADDR_VAR 0 10
42740: PUSH
42741: LD_VAR 0 10
42745: PUSH
42746: LD_REAL  1.20000000000000E+0000
42749: MUL
42750: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
42751: LD_VAR 0 6
42755: PPUSH
42756: CALL_OW 264
42760: PUSH
42761: LD_INT 6
42763: PUSH
42764: LD_INT 46
42766: PUSH
42767: LD_INT 47
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: LIST
42774: IN
42775: IFFALSE 42792
// bpoints := bpoints * 1.2 ;
42777: LD_ADDR_VAR 0 10
42781: PUSH
42782: LD_VAR 0 10
42786: PUSH
42787: LD_REAL  1.20000000000000E+0000
42790: MUL
42791: ST_TO_ADDR
// end ; unit_building :
42792: GO 42806
42794: LD_INT 3
42796: DOUBLE
42797: EQUAL
42798: IFTRUE 42802
42800: GO 42805
42802: POP
// ; end ;
42803: GO 42806
42805: POP
// for j = 1 to 3 do
42806: LD_ADDR_VAR 0 7
42810: PUSH
42811: DOUBLE
42812: LD_INT 1
42814: DEC
42815: ST_TO_ADDR
42816: LD_INT 3
42818: PUSH
42819: FOR_TO
42820: IFFALSE 42873
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
42822: LD_ADDR_VAR 0 5
42826: PUSH
42827: LD_VAR 0 5
42831: PPUSH
42832: LD_VAR 0 7
42836: PPUSH
42837: LD_VAR 0 5
42841: PUSH
42842: LD_VAR 0 7
42846: ARRAY
42847: PUSH
42848: LD_VAR 0 9
42852: PUSH
42853: LD_VAR 0 7
42857: ARRAY
42858: PUSH
42859: LD_VAR 0 10
42863: MUL
42864: PLUS
42865: PPUSH
42866: CALL_OW 1
42870: ST_TO_ADDR
42871: GO 42819
42873: POP
42874: POP
// end ;
42875: GO 41354
42877: POP
42878: POP
// result := Replace ( result , 4 , tmp ) ;
42879: LD_ADDR_VAR 0 5
42883: PUSH
42884: LD_VAR 0 5
42888: PPUSH
42889: LD_INT 4
42891: PPUSH
42892: LD_VAR 0 8
42896: PPUSH
42897: CALL_OW 1
42901: ST_TO_ADDR
// end ;
42902: LD_VAR 0 5
42906: RET
// export function DangerAtRange ( unit , range ) ; begin
42907: LD_INT 0
42909: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
42910: LD_ADDR_VAR 0 3
42914: PUSH
42915: LD_VAR 0 1
42919: PPUSH
42920: CALL_OW 255
42924: PPUSH
42925: LD_VAR 0 1
42929: PPUSH
42930: CALL_OW 250
42934: PPUSH
42935: LD_VAR 0 1
42939: PPUSH
42940: CALL_OW 251
42944: PPUSH
42945: LD_VAR 0 2
42949: PPUSH
42950: CALL 41206 0 4
42954: ST_TO_ADDR
// end ;
42955: LD_VAR 0 3
42959: RET
// export function DangerInArea ( side , area ) ; begin
42960: LD_INT 0
42962: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
42963: LD_ADDR_VAR 0 3
42967: PUSH
42968: LD_VAR 0 2
42972: PPUSH
42973: LD_INT 81
42975: PUSH
42976: LD_VAR 0 1
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: PPUSH
42985: CALL_OW 70
42989: ST_TO_ADDR
// end ;
42990: LD_VAR 0 3
42994: RET
// export function IsExtension ( b ) ; begin
42995: LD_INT 0
42997: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
42998: LD_ADDR_VAR 0 2
43002: PUSH
43003: LD_VAR 0 1
43007: PUSH
43008: LD_INT 23
43010: PUSH
43011: LD_INT 20
43013: PUSH
43014: LD_INT 22
43016: PUSH
43017: LD_INT 17
43019: PUSH
43020: LD_INT 24
43022: PUSH
43023: LD_INT 21
43025: PUSH
43026: LD_INT 19
43028: PUSH
43029: LD_INT 16
43031: PUSH
43032: LD_INT 25
43034: PUSH
43035: LD_INT 18
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: LIST
43042: LIST
43043: LIST
43044: LIST
43045: LIST
43046: LIST
43047: LIST
43048: LIST
43049: IN
43050: ST_TO_ADDR
// end ;
43051: LD_VAR 0 2
43055: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
43056: LD_INT 0
43058: PPUSH
43059: PPUSH
43060: PPUSH
// result := [ ] ;
43061: LD_ADDR_VAR 0 4
43065: PUSH
43066: EMPTY
43067: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
43068: LD_ADDR_VAR 0 5
43072: PUSH
43073: LD_VAR 0 2
43077: PPUSH
43078: LD_INT 21
43080: PUSH
43081: LD_INT 3
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PPUSH
43088: CALL_OW 70
43092: ST_TO_ADDR
// if not tmp then
43093: LD_VAR 0 5
43097: NOT
43098: IFFALSE 43102
// exit ;
43100: GO 43166
// if checkLink then
43102: LD_VAR 0 3
43106: IFFALSE 43156
// begin for i in tmp do
43108: LD_ADDR_VAR 0 6
43112: PUSH
43113: LD_VAR 0 5
43117: PUSH
43118: FOR_IN
43119: IFFALSE 43154
// if GetBase ( i ) <> base then
43121: LD_VAR 0 6
43125: PPUSH
43126: CALL_OW 274
43130: PUSH
43131: LD_VAR 0 1
43135: NONEQUAL
43136: IFFALSE 43152
// ComLinkToBase ( base , i ) ;
43138: LD_VAR 0 1
43142: PPUSH
43143: LD_VAR 0 6
43147: PPUSH
43148: CALL_OW 169
43152: GO 43118
43154: POP
43155: POP
// end ; result := tmp ;
43156: LD_ADDR_VAR 0 4
43160: PUSH
43161: LD_VAR 0 5
43165: ST_TO_ADDR
// end ;
43166: LD_VAR 0 4
43170: RET
// export function ComComplete ( units , b ) ; var i ; begin
43171: LD_INT 0
43173: PPUSH
43174: PPUSH
// if not units then
43175: LD_VAR 0 1
43179: NOT
43180: IFFALSE 43184
// exit ;
43182: GO 43274
// for i in units do
43184: LD_ADDR_VAR 0 4
43188: PUSH
43189: LD_VAR 0 1
43193: PUSH
43194: FOR_IN
43195: IFFALSE 43272
// if BuildingStatus ( b ) = bs_build then
43197: LD_VAR 0 2
43201: PPUSH
43202: CALL_OW 461
43206: PUSH
43207: LD_INT 1
43209: EQUAL
43210: IFFALSE 43270
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
43212: LD_VAR 0 4
43216: PPUSH
43217: LD_STRING h
43219: PUSH
43220: LD_VAR 0 2
43224: PPUSH
43225: CALL_OW 250
43229: PUSH
43230: LD_VAR 0 2
43234: PPUSH
43235: CALL_OW 251
43239: PUSH
43240: LD_VAR 0 2
43244: PUSH
43245: LD_INT 0
43247: PUSH
43248: LD_INT 0
43250: PUSH
43251: LD_INT 0
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: LIST
43258: LIST
43259: LIST
43260: LIST
43261: LIST
43262: PUSH
43263: EMPTY
43264: LIST
43265: PPUSH
43266: CALL_OW 446
43270: GO 43194
43272: POP
43273: POP
// end ;
43274: LD_VAR 0 3
43278: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
43279: LD_INT 0
43281: PPUSH
43282: PPUSH
43283: PPUSH
43284: PPUSH
43285: PPUSH
43286: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
43287: LD_VAR 0 1
43291: NOT
43292: PUSH
43293: LD_VAR 0 1
43297: PPUSH
43298: CALL_OW 263
43302: PUSH
43303: LD_INT 2
43305: NONEQUAL
43306: OR
43307: IFFALSE 43311
// exit ;
43309: GO 43627
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
43311: LD_ADDR_VAR 0 6
43315: PUSH
43316: LD_INT 22
43318: PUSH
43319: LD_VAR 0 1
43323: PPUSH
43324: CALL_OW 255
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 2
43335: PUSH
43336: LD_INT 30
43338: PUSH
43339: LD_INT 36
43341: PUSH
43342: EMPTY
43343: LIST
43344: LIST
43345: PUSH
43346: LD_INT 34
43348: PUSH
43349: LD_INT 31
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: LIST
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PPUSH
43365: CALL_OW 69
43369: ST_TO_ADDR
// if not tmp then
43370: LD_VAR 0 6
43374: NOT
43375: IFFALSE 43379
// exit ;
43377: GO 43627
// result := [ ] ;
43379: LD_ADDR_VAR 0 2
43383: PUSH
43384: EMPTY
43385: ST_TO_ADDR
// for i in tmp do
43386: LD_ADDR_VAR 0 3
43390: PUSH
43391: LD_VAR 0 6
43395: PUSH
43396: FOR_IN
43397: IFFALSE 43468
// begin t := UnitsInside ( i ) ;
43399: LD_ADDR_VAR 0 4
43403: PUSH
43404: LD_VAR 0 3
43408: PPUSH
43409: CALL_OW 313
43413: ST_TO_ADDR
// if t then
43414: LD_VAR 0 4
43418: IFFALSE 43466
// for j in t do
43420: LD_ADDR_VAR 0 7
43424: PUSH
43425: LD_VAR 0 4
43429: PUSH
43430: FOR_IN
43431: IFFALSE 43464
// result := Replace ( result , result + 1 , j ) ;
43433: LD_ADDR_VAR 0 2
43437: PUSH
43438: LD_VAR 0 2
43442: PPUSH
43443: LD_VAR 0 2
43447: PUSH
43448: LD_INT 1
43450: PLUS
43451: PPUSH
43452: LD_VAR 0 7
43456: PPUSH
43457: CALL_OW 1
43461: ST_TO_ADDR
43462: GO 43430
43464: POP
43465: POP
// end ;
43466: GO 43396
43468: POP
43469: POP
// if not result then
43470: LD_VAR 0 2
43474: NOT
43475: IFFALSE 43479
// exit ;
43477: GO 43627
// mech := result [ 1 ] ;
43479: LD_ADDR_VAR 0 5
43483: PUSH
43484: LD_VAR 0 2
43488: PUSH
43489: LD_INT 1
43491: ARRAY
43492: ST_TO_ADDR
// if result > 1 then
43493: LD_VAR 0 2
43497: PUSH
43498: LD_INT 1
43500: GREATER
43501: IFFALSE 43613
// begin for i = 2 to result do
43503: LD_ADDR_VAR 0 3
43507: PUSH
43508: DOUBLE
43509: LD_INT 2
43511: DEC
43512: ST_TO_ADDR
43513: LD_VAR 0 2
43517: PUSH
43518: FOR_TO
43519: IFFALSE 43611
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
43521: LD_ADDR_VAR 0 4
43525: PUSH
43526: LD_VAR 0 2
43530: PUSH
43531: LD_VAR 0 3
43535: ARRAY
43536: PPUSH
43537: LD_INT 3
43539: PPUSH
43540: CALL_OW 259
43544: PUSH
43545: LD_VAR 0 2
43549: PUSH
43550: LD_VAR 0 3
43554: ARRAY
43555: PPUSH
43556: CALL_OW 432
43560: MINUS
43561: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
43562: LD_VAR 0 4
43566: PUSH
43567: LD_VAR 0 5
43571: PPUSH
43572: LD_INT 3
43574: PPUSH
43575: CALL_OW 259
43579: PUSH
43580: LD_VAR 0 5
43584: PPUSH
43585: CALL_OW 432
43589: MINUS
43590: GREATEREQUAL
43591: IFFALSE 43609
// mech := result [ i ] ;
43593: LD_ADDR_VAR 0 5
43597: PUSH
43598: LD_VAR 0 2
43602: PUSH
43603: LD_VAR 0 3
43607: ARRAY
43608: ST_TO_ADDR
// end ;
43609: GO 43518
43611: POP
43612: POP
// end ; ComLinkTo ( vehicle , mech ) ;
43613: LD_VAR 0 1
43617: PPUSH
43618: LD_VAR 0 5
43622: PPUSH
43623: CALL_OW 135
// end ;
43627: LD_VAR 0 2
43631: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
43632: LD_INT 0
43634: PPUSH
43635: PPUSH
43636: PPUSH
43637: PPUSH
43638: PPUSH
43639: PPUSH
43640: PPUSH
43641: PPUSH
43642: PPUSH
43643: PPUSH
43644: PPUSH
43645: PPUSH
43646: PPUSH
// result := [ ] ;
43647: LD_ADDR_VAR 0 7
43651: PUSH
43652: EMPTY
43653: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
43654: LD_VAR 0 1
43658: PPUSH
43659: CALL_OW 266
43663: PUSH
43664: LD_INT 0
43666: PUSH
43667: LD_INT 1
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: IN
43674: NOT
43675: IFFALSE 43679
// exit ;
43677: GO 45313
// if name then
43679: LD_VAR 0 3
43683: IFFALSE 43699
// SetBName ( base_dep , name ) ;
43685: LD_VAR 0 1
43689: PPUSH
43690: LD_VAR 0 3
43694: PPUSH
43695: CALL_OW 500
// base := GetBase ( base_dep ) ;
43699: LD_ADDR_VAR 0 15
43703: PUSH
43704: LD_VAR 0 1
43708: PPUSH
43709: CALL_OW 274
43713: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
43714: LD_ADDR_VAR 0 16
43718: PUSH
43719: LD_VAR 0 1
43723: PPUSH
43724: CALL_OW 255
43728: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
43729: LD_ADDR_VAR 0 17
43733: PUSH
43734: LD_VAR 0 1
43738: PPUSH
43739: CALL_OW 248
43743: ST_TO_ADDR
// if sources then
43744: LD_VAR 0 5
43748: IFFALSE 43795
// for i = 1 to 3 do
43750: LD_ADDR_VAR 0 8
43754: PUSH
43755: DOUBLE
43756: LD_INT 1
43758: DEC
43759: ST_TO_ADDR
43760: LD_INT 3
43762: PUSH
43763: FOR_TO
43764: IFFALSE 43793
// AddResourceType ( base , i , sources [ i ] ) ;
43766: LD_VAR 0 15
43770: PPUSH
43771: LD_VAR 0 8
43775: PPUSH
43776: LD_VAR 0 5
43780: PUSH
43781: LD_VAR 0 8
43785: ARRAY
43786: PPUSH
43787: CALL_OW 276
43791: GO 43763
43793: POP
43794: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
43795: LD_ADDR_VAR 0 18
43799: PUSH
43800: LD_VAR 0 15
43804: PPUSH
43805: LD_VAR 0 2
43809: PPUSH
43810: LD_INT 1
43812: PPUSH
43813: CALL 43056 0 3
43817: ST_TO_ADDR
// InitHc ;
43818: CALL_OW 19
// InitUc ;
43822: CALL_OW 18
// uc_side := side ;
43826: LD_ADDR_OWVAR 20
43830: PUSH
43831: LD_VAR 0 16
43835: ST_TO_ADDR
// uc_nation := nation ;
43836: LD_ADDR_OWVAR 21
43840: PUSH
43841: LD_VAR 0 17
43845: ST_TO_ADDR
// if buildings then
43846: LD_VAR 0 18
43850: IFFALSE 45172
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
43852: LD_ADDR_VAR 0 19
43856: PUSH
43857: LD_VAR 0 18
43861: PPUSH
43862: LD_INT 2
43864: PUSH
43865: LD_INT 30
43867: PUSH
43868: LD_INT 29
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 30
43877: PUSH
43878: LD_INT 30
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: LIST
43889: PPUSH
43890: CALL_OW 72
43894: ST_TO_ADDR
// if tmp then
43895: LD_VAR 0 19
43899: IFFALSE 43947
// for i in tmp do
43901: LD_ADDR_VAR 0 8
43905: PUSH
43906: LD_VAR 0 19
43910: PUSH
43911: FOR_IN
43912: IFFALSE 43945
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
43914: LD_VAR 0 8
43918: PPUSH
43919: CALL_OW 250
43923: PPUSH
43924: LD_VAR 0 8
43928: PPUSH
43929: CALL_OW 251
43933: PPUSH
43934: LD_VAR 0 16
43938: PPUSH
43939: CALL_OW 441
43943: GO 43911
43945: POP
43946: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
43947: LD_VAR 0 18
43951: PPUSH
43952: LD_INT 2
43954: PUSH
43955: LD_INT 30
43957: PUSH
43958: LD_INT 32
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: PUSH
43965: LD_INT 30
43967: PUSH
43968: LD_INT 33
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: LIST
43979: PPUSH
43980: CALL_OW 72
43984: IFFALSE 44072
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
43986: LD_ADDR_VAR 0 8
43990: PUSH
43991: LD_VAR 0 18
43995: PPUSH
43996: LD_INT 2
43998: PUSH
43999: LD_INT 30
44001: PUSH
44002: LD_INT 32
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: LD_INT 30
44011: PUSH
44012: LD_INT 33
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: LIST
44023: PPUSH
44024: CALL_OW 72
44028: PUSH
44029: FOR_IN
44030: IFFALSE 44070
// begin if not GetBWeapon ( i ) then
44032: LD_VAR 0 8
44036: PPUSH
44037: CALL_OW 269
44041: NOT
44042: IFFALSE 44068
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
44044: LD_VAR 0 8
44048: PPUSH
44049: LD_VAR 0 8
44053: PPUSH
44054: LD_VAR 0 2
44058: PPUSH
44059: CALL 45318 0 2
44063: PPUSH
44064: CALL_OW 431
// end ;
44068: GO 44029
44070: POP
44071: POP
// end ; for i = 1 to personel do
44072: LD_ADDR_VAR 0 8
44076: PUSH
44077: DOUBLE
44078: LD_INT 1
44080: DEC
44081: ST_TO_ADDR
44082: LD_VAR 0 6
44086: PUSH
44087: FOR_TO
44088: IFFALSE 45152
// begin if i > 4 then
44090: LD_VAR 0 8
44094: PUSH
44095: LD_INT 4
44097: GREATER
44098: IFFALSE 44102
// break ;
44100: GO 45152
// case i of 1 :
44102: LD_VAR 0 8
44106: PUSH
44107: LD_INT 1
44109: DOUBLE
44110: EQUAL
44111: IFTRUE 44115
44113: GO 44195
44115: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
44116: LD_ADDR_VAR 0 12
44120: PUSH
44121: LD_VAR 0 18
44125: PPUSH
44126: LD_INT 22
44128: PUSH
44129: LD_VAR 0 16
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 58
44140: PUSH
44141: EMPTY
44142: LIST
44143: PUSH
44144: LD_INT 2
44146: PUSH
44147: LD_INT 30
44149: PUSH
44150: LD_INT 32
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: LD_INT 30
44159: PUSH
44160: LD_INT 4
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 30
44169: PUSH
44170: LD_INT 5
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: LIST
44187: PPUSH
44188: CALL_OW 72
44192: ST_TO_ADDR
44193: GO 44417
44195: LD_INT 2
44197: DOUBLE
44198: EQUAL
44199: IFTRUE 44203
44201: GO 44265
44203: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
44204: LD_ADDR_VAR 0 12
44208: PUSH
44209: LD_VAR 0 18
44213: PPUSH
44214: LD_INT 22
44216: PUSH
44217: LD_VAR 0 16
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 2
44228: PUSH
44229: LD_INT 30
44231: PUSH
44232: LD_INT 0
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: LD_INT 30
44241: PUSH
44242: LD_INT 1
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: LIST
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PPUSH
44258: CALL_OW 72
44262: ST_TO_ADDR
44263: GO 44417
44265: LD_INT 3
44267: DOUBLE
44268: EQUAL
44269: IFTRUE 44273
44271: GO 44335
44273: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
44274: LD_ADDR_VAR 0 12
44278: PUSH
44279: LD_VAR 0 18
44283: PPUSH
44284: LD_INT 22
44286: PUSH
44287: LD_VAR 0 16
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: LD_INT 2
44298: PUSH
44299: LD_INT 30
44301: PUSH
44302: LD_INT 2
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 30
44311: PUSH
44312: LD_INT 3
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: LIST
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PPUSH
44328: CALL_OW 72
44332: ST_TO_ADDR
44333: GO 44417
44335: LD_INT 4
44337: DOUBLE
44338: EQUAL
44339: IFTRUE 44343
44341: GO 44416
44343: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
44344: LD_ADDR_VAR 0 12
44348: PUSH
44349: LD_VAR 0 18
44353: PPUSH
44354: LD_INT 22
44356: PUSH
44357: LD_VAR 0 16
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 2
44368: PUSH
44369: LD_INT 30
44371: PUSH
44372: LD_INT 6
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: LD_INT 30
44381: PUSH
44382: LD_INT 7
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 30
44391: PUSH
44392: LD_INT 8
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PPUSH
44409: CALL_OW 72
44413: ST_TO_ADDR
44414: GO 44417
44416: POP
// if i = 1 then
44417: LD_VAR 0 8
44421: PUSH
44422: LD_INT 1
44424: EQUAL
44425: IFFALSE 44536
// begin tmp := [ ] ;
44427: LD_ADDR_VAR 0 19
44431: PUSH
44432: EMPTY
44433: ST_TO_ADDR
// for j in f do
44434: LD_ADDR_VAR 0 9
44438: PUSH
44439: LD_VAR 0 12
44443: PUSH
44444: FOR_IN
44445: IFFALSE 44518
// if GetBType ( j ) = b_bunker then
44447: LD_VAR 0 9
44451: PPUSH
44452: CALL_OW 266
44456: PUSH
44457: LD_INT 32
44459: EQUAL
44460: IFFALSE 44487
// tmp := Insert ( tmp , 1 , j ) else
44462: LD_ADDR_VAR 0 19
44466: PUSH
44467: LD_VAR 0 19
44471: PPUSH
44472: LD_INT 1
44474: PPUSH
44475: LD_VAR 0 9
44479: PPUSH
44480: CALL_OW 2
44484: ST_TO_ADDR
44485: GO 44516
// tmp := Insert ( tmp , tmp + 1 , j ) ;
44487: LD_ADDR_VAR 0 19
44491: PUSH
44492: LD_VAR 0 19
44496: PPUSH
44497: LD_VAR 0 19
44501: PUSH
44502: LD_INT 1
44504: PLUS
44505: PPUSH
44506: LD_VAR 0 9
44510: PPUSH
44511: CALL_OW 2
44515: ST_TO_ADDR
44516: GO 44444
44518: POP
44519: POP
// if tmp then
44520: LD_VAR 0 19
44524: IFFALSE 44536
// f := tmp ;
44526: LD_ADDR_VAR 0 12
44530: PUSH
44531: LD_VAR 0 19
44535: ST_TO_ADDR
// end ; x := personel [ i ] ;
44536: LD_ADDR_VAR 0 13
44540: PUSH
44541: LD_VAR 0 6
44545: PUSH
44546: LD_VAR 0 8
44550: ARRAY
44551: ST_TO_ADDR
// if x = - 1 then
44552: LD_VAR 0 13
44556: PUSH
44557: LD_INT 1
44559: NEG
44560: EQUAL
44561: IFFALSE 44770
// begin for j in f do
44563: LD_ADDR_VAR 0 9
44567: PUSH
44568: LD_VAR 0 12
44572: PUSH
44573: FOR_IN
44574: IFFALSE 44766
// repeat InitHc ;
44576: CALL_OW 19
// if GetBType ( j ) = b_barracks then
44580: LD_VAR 0 9
44584: PPUSH
44585: CALL_OW 266
44589: PUSH
44590: LD_INT 5
44592: EQUAL
44593: IFFALSE 44663
// begin if UnitsInside ( j ) < 3 then
44595: LD_VAR 0 9
44599: PPUSH
44600: CALL_OW 313
44604: PUSH
44605: LD_INT 3
44607: LESS
44608: IFFALSE 44644
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44610: LD_INT 0
44612: PPUSH
44613: LD_INT 5
44615: PUSH
44616: LD_INT 8
44618: PUSH
44619: LD_INT 9
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: LIST
44626: PUSH
44627: LD_VAR 0 17
44631: ARRAY
44632: PPUSH
44633: LD_VAR 0 4
44637: PPUSH
44638: CALL_OW 380
44642: GO 44661
// PrepareHuman ( false , i , skill ) ;
44644: LD_INT 0
44646: PPUSH
44647: LD_VAR 0 8
44651: PPUSH
44652: LD_VAR 0 4
44656: PPUSH
44657: CALL_OW 380
// end else
44661: GO 44680
// PrepareHuman ( false , i , skill ) ;
44663: LD_INT 0
44665: PPUSH
44666: LD_VAR 0 8
44670: PPUSH
44671: LD_VAR 0 4
44675: PPUSH
44676: CALL_OW 380
// un := CreateHuman ;
44680: LD_ADDR_VAR 0 14
44684: PUSH
44685: CALL_OW 44
44689: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44690: LD_ADDR_VAR 0 7
44694: PUSH
44695: LD_VAR 0 7
44699: PPUSH
44700: LD_INT 1
44702: PPUSH
44703: LD_VAR 0 14
44707: PPUSH
44708: CALL_OW 2
44712: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
44713: LD_VAR 0 14
44717: PPUSH
44718: LD_VAR 0 9
44722: PPUSH
44723: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
44727: LD_VAR 0 9
44731: PPUSH
44732: CALL_OW 313
44736: PUSH
44737: LD_INT 6
44739: EQUAL
44740: PUSH
44741: LD_VAR 0 9
44745: PPUSH
44746: CALL_OW 266
44750: PUSH
44751: LD_INT 32
44753: PUSH
44754: LD_INT 31
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: IN
44761: OR
44762: IFFALSE 44576
44764: GO 44573
44766: POP
44767: POP
// end else
44768: GO 45150
// for j = 1 to x do
44770: LD_ADDR_VAR 0 9
44774: PUSH
44775: DOUBLE
44776: LD_INT 1
44778: DEC
44779: ST_TO_ADDR
44780: LD_VAR 0 13
44784: PUSH
44785: FOR_TO
44786: IFFALSE 45148
// begin InitHc ;
44788: CALL_OW 19
// if not f then
44792: LD_VAR 0 12
44796: NOT
44797: IFFALSE 44886
// begin PrepareHuman ( false , i , skill ) ;
44799: LD_INT 0
44801: PPUSH
44802: LD_VAR 0 8
44806: PPUSH
44807: LD_VAR 0 4
44811: PPUSH
44812: CALL_OW 380
// un := CreateHuman ;
44816: LD_ADDR_VAR 0 14
44820: PUSH
44821: CALL_OW 44
44825: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44826: LD_ADDR_VAR 0 7
44830: PUSH
44831: LD_VAR 0 7
44835: PPUSH
44836: LD_INT 1
44838: PPUSH
44839: LD_VAR 0 14
44843: PPUSH
44844: CALL_OW 2
44848: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
44849: LD_VAR 0 14
44853: PPUSH
44854: LD_VAR 0 1
44858: PPUSH
44859: CALL_OW 250
44863: PPUSH
44864: LD_VAR 0 1
44868: PPUSH
44869: CALL_OW 251
44873: PPUSH
44874: LD_INT 10
44876: PPUSH
44877: LD_INT 0
44879: PPUSH
44880: CALL_OW 50
// continue ;
44884: GO 44785
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
44886: LD_VAR 0 12
44890: PUSH
44891: LD_INT 1
44893: ARRAY
44894: PPUSH
44895: CALL_OW 313
44899: PUSH
44900: LD_VAR 0 12
44904: PUSH
44905: LD_INT 1
44907: ARRAY
44908: PPUSH
44909: CALL_OW 266
44913: PUSH
44914: LD_INT 32
44916: PUSH
44917: LD_INT 31
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: IN
44924: AND
44925: PUSH
44926: LD_VAR 0 12
44930: PUSH
44931: LD_INT 1
44933: ARRAY
44934: PPUSH
44935: CALL_OW 313
44939: PUSH
44940: LD_INT 6
44942: EQUAL
44943: OR
44944: IFFALSE 44964
// f := Delete ( f , 1 ) ;
44946: LD_ADDR_VAR 0 12
44950: PUSH
44951: LD_VAR 0 12
44955: PPUSH
44956: LD_INT 1
44958: PPUSH
44959: CALL_OW 3
44963: ST_TO_ADDR
// if not f then
44964: LD_VAR 0 12
44968: NOT
44969: IFFALSE 44987
// begin x := x + 2 ;
44971: LD_ADDR_VAR 0 13
44975: PUSH
44976: LD_VAR 0 13
44980: PUSH
44981: LD_INT 2
44983: PLUS
44984: ST_TO_ADDR
// continue ;
44985: GO 44785
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
44987: LD_VAR 0 12
44991: PUSH
44992: LD_INT 1
44994: ARRAY
44995: PPUSH
44996: CALL_OW 266
45000: PUSH
45001: LD_INT 5
45003: EQUAL
45004: IFFALSE 45078
// begin if UnitsInside ( f [ 1 ] ) < 3 then
45006: LD_VAR 0 12
45010: PUSH
45011: LD_INT 1
45013: ARRAY
45014: PPUSH
45015: CALL_OW 313
45019: PUSH
45020: LD_INT 3
45022: LESS
45023: IFFALSE 45059
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45025: LD_INT 0
45027: PPUSH
45028: LD_INT 5
45030: PUSH
45031: LD_INT 8
45033: PUSH
45034: LD_INT 9
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: LIST
45041: PUSH
45042: LD_VAR 0 17
45046: ARRAY
45047: PPUSH
45048: LD_VAR 0 4
45052: PPUSH
45053: CALL_OW 380
45057: GO 45076
// PrepareHuman ( false , i , skill ) ;
45059: LD_INT 0
45061: PPUSH
45062: LD_VAR 0 8
45066: PPUSH
45067: LD_VAR 0 4
45071: PPUSH
45072: CALL_OW 380
// end else
45076: GO 45095
// PrepareHuman ( false , i , skill ) ;
45078: LD_INT 0
45080: PPUSH
45081: LD_VAR 0 8
45085: PPUSH
45086: LD_VAR 0 4
45090: PPUSH
45091: CALL_OW 380
// un := CreateHuman ;
45095: LD_ADDR_VAR 0 14
45099: PUSH
45100: CALL_OW 44
45104: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45105: LD_ADDR_VAR 0 7
45109: PUSH
45110: LD_VAR 0 7
45114: PPUSH
45115: LD_INT 1
45117: PPUSH
45118: LD_VAR 0 14
45122: PPUSH
45123: CALL_OW 2
45127: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
45128: LD_VAR 0 14
45132: PPUSH
45133: LD_VAR 0 12
45137: PUSH
45138: LD_INT 1
45140: ARRAY
45141: PPUSH
45142: CALL_OW 52
// end ;
45146: GO 44785
45148: POP
45149: POP
// end ;
45150: GO 44087
45152: POP
45153: POP
// result := result ^ buildings ;
45154: LD_ADDR_VAR 0 7
45158: PUSH
45159: LD_VAR 0 7
45163: PUSH
45164: LD_VAR 0 18
45168: ADD
45169: ST_TO_ADDR
// end else
45170: GO 45313
// begin for i = 1 to personel do
45172: LD_ADDR_VAR 0 8
45176: PUSH
45177: DOUBLE
45178: LD_INT 1
45180: DEC
45181: ST_TO_ADDR
45182: LD_VAR 0 6
45186: PUSH
45187: FOR_TO
45188: IFFALSE 45311
// begin if i > 4 then
45190: LD_VAR 0 8
45194: PUSH
45195: LD_INT 4
45197: GREATER
45198: IFFALSE 45202
// break ;
45200: GO 45311
// x := personel [ i ] ;
45202: LD_ADDR_VAR 0 13
45206: PUSH
45207: LD_VAR 0 6
45211: PUSH
45212: LD_VAR 0 8
45216: ARRAY
45217: ST_TO_ADDR
// if x = - 1 then
45218: LD_VAR 0 13
45222: PUSH
45223: LD_INT 1
45225: NEG
45226: EQUAL
45227: IFFALSE 45231
// continue ;
45229: GO 45187
// PrepareHuman ( false , i , skill ) ;
45231: LD_INT 0
45233: PPUSH
45234: LD_VAR 0 8
45238: PPUSH
45239: LD_VAR 0 4
45243: PPUSH
45244: CALL_OW 380
// un := CreateHuman ;
45248: LD_ADDR_VAR 0 14
45252: PUSH
45253: CALL_OW 44
45257: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45258: LD_VAR 0 14
45262: PPUSH
45263: LD_VAR 0 1
45267: PPUSH
45268: CALL_OW 250
45272: PPUSH
45273: LD_VAR 0 1
45277: PPUSH
45278: CALL_OW 251
45282: PPUSH
45283: LD_INT 10
45285: PPUSH
45286: LD_INT 0
45288: PPUSH
45289: CALL_OW 50
// result := result ^ un ;
45293: LD_ADDR_VAR 0 7
45297: PUSH
45298: LD_VAR 0 7
45302: PUSH
45303: LD_VAR 0 14
45307: ADD
45308: ST_TO_ADDR
// end ;
45309: GO 45187
45311: POP
45312: POP
// end ; end ;
45313: LD_VAR 0 7
45317: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
45318: LD_INT 0
45320: PPUSH
45321: PPUSH
45322: PPUSH
45323: PPUSH
45324: PPUSH
45325: PPUSH
45326: PPUSH
45327: PPUSH
45328: PPUSH
45329: PPUSH
45330: PPUSH
45331: PPUSH
45332: PPUSH
45333: PPUSH
45334: PPUSH
45335: PPUSH
// result := false ;
45336: LD_ADDR_VAR 0 3
45340: PUSH
45341: LD_INT 0
45343: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
45344: LD_VAR 0 1
45348: NOT
45349: PUSH
45350: LD_VAR 0 1
45354: PPUSH
45355: CALL_OW 266
45359: PUSH
45360: LD_INT 32
45362: PUSH
45363: LD_INT 33
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: IN
45370: NOT
45371: OR
45372: IFFALSE 45376
// exit ;
45374: GO 46485
// nat := GetNation ( tower ) ;
45376: LD_ADDR_VAR 0 12
45380: PUSH
45381: LD_VAR 0 1
45385: PPUSH
45386: CALL_OW 248
45390: ST_TO_ADDR
// side := GetSide ( tower ) ;
45391: LD_ADDR_VAR 0 16
45395: PUSH
45396: LD_VAR 0 1
45400: PPUSH
45401: CALL_OW 255
45405: ST_TO_ADDR
// x := GetX ( tower ) ;
45406: LD_ADDR_VAR 0 10
45410: PUSH
45411: LD_VAR 0 1
45415: PPUSH
45416: CALL_OW 250
45420: ST_TO_ADDR
// y := GetY ( tower ) ;
45421: LD_ADDR_VAR 0 11
45425: PUSH
45426: LD_VAR 0 1
45430: PPUSH
45431: CALL_OW 251
45435: ST_TO_ADDR
// if not x or not y then
45436: LD_VAR 0 10
45440: NOT
45441: PUSH
45442: LD_VAR 0 11
45446: NOT
45447: OR
45448: IFFALSE 45452
// exit ;
45450: GO 46485
// weapon := 0 ;
45452: LD_ADDR_VAR 0 18
45456: PUSH
45457: LD_INT 0
45459: ST_TO_ADDR
// fac_list := [ ] ;
45460: LD_ADDR_VAR 0 17
45464: PUSH
45465: EMPTY
45466: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
45467: LD_ADDR_VAR 0 6
45471: PUSH
45472: LD_VAR 0 1
45476: PPUSH
45477: CALL_OW 274
45481: PPUSH
45482: LD_VAR 0 2
45486: PPUSH
45487: LD_INT 0
45489: PPUSH
45490: CALL 43056 0 3
45494: PPUSH
45495: LD_INT 30
45497: PUSH
45498: LD_INT 3
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PPUSH
45505: CALL_OW 72
45509: ST_TO_ADDR
// if not factories then
45510: LD_VAR 0 6
45514: NOT
45515: IFFALSE 45519
// exit ;
45517: GO 46485
// for i in factories do
45519: LD_ADDR_VAR 0 8
45523: PUSH
45524: LD_VAR 0 6
45528: PUSH
45529: FOR_IN
45530: IFFALSE 45555
// fac_list := fac_list union AvailableWeaponList ( i ) ;
45532: LD_ADDR_VAR 0 17
45536: PUSH
45537: LD_VAR 0 17
45541: PUSH
45542: LD_VAR 0 8
45546: PPUSH
45547: CALL_OW 478
45551: UNION
45552: ST_TO_ADDR
45553: GO 45529
45555: POP
45556: POP
// if not fac_list then
45557: LD_VAR 0 17
45561: NOT
45562: IFFALSE 45566
// exit ;
45564: GO 46485
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
45566: LD_ADDR_VAR 0 5
45570: PUSH
45571: LD_INT 4
45573: PUSH
45574: LD_INT 5
45576: PUSH
45577: LD_INT 9
45579: PUSH
45580: LD_INT 10
45582: PUSH
45583: LD_INT 6
45585: PUSH
45586: LD_INT 7
45588: PUSH
45589: LD_INT 11
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 27
45603: PUSH
45604: LD_INT 28
45606: PUSH
45607: LD_INT 26
45609: PUSH
45610: LD_INT 30
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 43
45621: PUSH
45622: LD_INT 44
45624: PUSH
45625: LD_INT 46
45627: PUSH
45628: LD_INT 45
45630: PUSH
45631: LD_INT 47
45633: PUSH
45634: LD_INT 49
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: LIST
45649: PUSH
45650: LD_VAR 0 12
45654: ARRAY
45655: ST_TO_ADDR
// list := list isect fac_list ;
45656: LD_ADDR_VAR 0 5
45660: PUSH
45661: LD_VAR 0 5
45665: PUSH
45666: LD_VAR 0 17
45670: ISECT
45671: ST_TO_ADDR
// if not list then
45672: LD_VAR 0 5
45676: NOT
45677: IFFALSE 45681
// exit ;
45679: GO 46485
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
45681: LD_VAR 0 12
45685: PUSH
45686: LD_INT 3
45688: EQUAL
45689: PUSH
45690: LD_INT 49
45692: PUSH
45693: LD_VAR 0 5
45697: IN
45698: AND
45699: PUSH
45700: LD_INT 31
45702: PPUSH
45703: LD_VAR 0 16
45707: PPUSH
45708: CALL_OW 321
45712: PUSH
45713: LD_INT 2
45715: EQUAL
45716: AND
45717: IFFALSE 45777
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
45719: LD_INT 22
45721: PUSH
45722: LD_VAR 0 16
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 35
45733: PUSH
45734: LD_INT 49
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 91
45743: PUSH
45744: LD_VAR 0 1
45748: PUSH
45749: LD_INT 10
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: LIST
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: LIST
45761: PPUSH
45762: CALL_OW 69
45766: NOT
45767: IFFALSE 45777
// weapon := ru_time_lapser ;
45769: LD_ADDR_VAR 0 18
45773: PUSH
45774: LD_INT 49
45776: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
45777: LD_VAR 0 12
45781: PUSH
45782: LD_INT 1
45784: PUSH
45785: LD_INT 2
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: IN
45792: PUSH
45793: LD_INT 11
45795: PUSH
45796: LD_VAR 0 5
45800: IN
45801: PUSH
45802: LD_INT 30
45804: PUSH
45805: LD_VAR 0 5
45809: IN
45810: OR
45811: AND
45812: PUSH
45813: LD_INT 6
45815: PPUSH
45816: LD_VAR 0 16
45820: PPUSH
45821: CALL_OW 321
45825: PUSH
45826: LD_INT 2
45828: EQUAL
45829: AND
45830: IFFALSE 45995
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
45832: LD_INT 22
45834: PUSH
45835: LD_VAR 0 16
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 2
45846: PUSH
45847: LD_INT 35
45849: PUSH
45850: LD_INT 11
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: LD_INT 35
45859: PUSH
45860: LD_INT 30
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 91
45874: PUSH
45875: LD_VAR 0 1
45879: PUSH
45880: LD_INT 18
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: LIST
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: LIST
45892: PPUSH
45893: CALL_OW 69
45897: NOT
45898: PUSH
45899: LD_INT 22
45901: PUSH
45902: LD_VAR 0 16
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 2
45913: PUSH
45914: LD_INT 30
45916: PUSH
45917: LD_INT 32
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 30
45926: PUSH
45927: LD_INT 33
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 91
45941: PUSH
45942: LD_VAR 0 1
45946: PUSH
45947: LD_INT 12
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: LIST
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: LIST
45959: PUSH
45960: EMPTY
45961: LIST
45962: PPUSH
45963: CALL_OW 69
45967: PUSH
45968: LD_INT 2
45970: GREATER
45971: AND
45972: IFFALSE 45995
// weapon := [ us_radar , ar_radar ] [ nat ] ;
45974: LD_ADDR_VAR 0 18
45978: PUSH
45979: LD_INT 11
45981: PUSH
45982: LD_INT 30
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_VAR 0 12
45993: ARRAY
45994: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
45995: LD_VAR 0 18
45999: NOT
46000: PUSH
46001: LD_INT 40
46003: PPUSH
46004: LD_VAR 0 16
46008: PPUSH
46009: CALL_OW 321
46013: PUSH
46014: LD_INT 2
46016: EQUAL
46017: AND
46018: PUSH
46019: LD_INT 7
46021: PUSH
46022: LD_VAR 0 5
46026: IN
46027: PUSH
46028: LD_INT 28
46030: PUSH
46031: LD_VAR 0 5
46035: IN
46036: OR
46037: PUSH
46038: LD_INT 45
46040: PUSH
46041: LD_VAR 0 5
46045: IN
46046: OR
46047: AND
46048: IFFALSE 46302
// begin hex := GetHexInfo ( x , y ) ;
46050: LD_ADDR_VAR 0 4
46054: PUSH
46055: LD_VAR 0 10
46059: PPUSH
46060: LD_VAR 0 11
46064: PPUSH
46065: CALL_OW 546
46069: ST_TO_ADDR
// if hex [ 1 ] then
46070: LD_VAR 0 4
46074: PUSH
46075: LD_INT 1
46077: ARRAY
46078: IFFALSE 46082
// exit ;
46080: GO 46485
// height := hex [ 2 ] ;
46082: LD_ADDR_VAR 0 15
46086: PUSH
46087: LD_VAR 0 4
46091: PUSH
46092: LD_INT 2
46094: ARRAY
46095: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
46096: LD_ADDR_VAR 0 14
46100: PUSH
46101: LD_INT 0
46103: PUSH
46104: LD_INT 2
46106: PUSH
46107: LD_INT 3
46109: PUSH
46110: LD_INT 5
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: LIST
46117: LIST
46118: ST_TO_ADDR
// for i in tmp do
46119: LD_ADDR_VAR 0 8
46123: PUSH
46124: LD_VAR 0 14
46128: PUSH
46129: FOR_IN
46130: IFFALSE 46300
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
46132: LD_ADDR_VAR 0 9
46136: PUSH
46137: LD_VAR 0 10
46141: PPUSH
46142: LD_VAR 0 8
46146: PPUSH
46147: LD_INT 5
46149: PPUSH
46150: CALL_OW 272
46154: PUSH
46155: LD_VAR 0 11
46159: PPUSH
46160: LD_VAR 0 8
46164: PPUSH
46165: LD_INT 5
46167: PPUSH
46168: CALL_OW 273
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
46177: LD_VAR 0 9
46181: PUSH
46182: LD_INT 1
46184: ARRAY
46185: PPUSH
46186: LD_VAR 0 9
46190: PUSH
46191: LD_INT 2
46193: ARRAY
46194: PPUSH
46195: CALL_OW 488
46199: IFFALSE 46298
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
46201: LD_ADDR_VAR 0 4
46205: PUSH
46206: LD_VAR 0 9
46210: PUSH
46211: LD_INT 1
46213: ARRAY
46214: PPUSH
46215: LD_VAR 0 9
46219: PUSH
46220: LD_INT 2
46222: ARRAY
46223: PPUSH
46224: CALL_OW 546
46228: ST_TO_ADDR
// if hex [ 1 ] then
46229: LD_VAR 0 4
46233: PUSH
46234: LD_INT 1
46236: ARRAY
46237: IFFALSE 46241
// continue ;
46239: GO 46129
// h := hex [ 2 ] ;
46241: LD_ADDR_VAR 0 13
46245: PUSH
46246: LD_VAR 0 4
46250: PUSH
46251: LD_INT 2
46253: ARRAY
46254: ST_TO_ADDR
// if h + 7 < height then
46255: LD_VAR 0 13
46259: PUSH
46260: LD_INT 7
46262: PLUS
46263: PUSH
46264: LD_VAR 0 15
46268: LESS
46269: IFFALSE 46298
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
46271: LD_ADDR_VAR 0 18
46275: PUSH
46276: LD_INT 7
46278: PUSH
46279: LD_INT 28
46281: PUSH
46282: LD_INT 45
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: LIST
46289: PUSH
46290: LD_VAR 0 12
46294: ARRAY
46295: ST_TO_ADDR
// break ;
46296: GO 46300
// end ; end ; end ;
46298: GO 46129
46300: POP
46301: POP
// end ; if not weapon then
46302: LD_VAR 0 18
46306: NOT
46307: IFFALSE 46367
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
46309: LD_ADDR_VAR 0 5
46313: PUSH
46314: LD_VAR 0 5
46318: PUSH
46319: LD_INT 11
46321: PUSH
46322: LD_INT 30
46324: PUSH
46325: LD_INT 49
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: LIST
46332: DIFF
46333: ST_TO_ADDR
// if not list then
46334: LD_VAR 0 5
46338: NOT
46339: IFFALSE 46343
// exit ;
46341: GO 46485
// weapon := list [ rand ( 1 , list ) ] ;
46343: LD_ADDR_VAR 0 18
46347: PUSH
46348: LD_VAR 0 5
46352: PUSH
46353: LD_INT 1
46355: PPUSH
46356: LD_VAR 0 5
46360: PPUSH
46361: CALL_OW 12
46365: ARRAY
46366: ST_TO_ADDR
// end ; if weapon then
46367: LD_VAR 0 18
46371: IFFALSE 46485
// begin tmp := CostOfWeapon ( weapon ) ;
46373: LD_ADDR_VAR 0 14
46377: PUSH
46378: LD_VAR 0 18
46382: PPUSH
46383: CALL_OW 451
46387: ST_TO_ADDR
// j := GetBase ( tower ) ;
46388: LD_ADDR_VAR 0 9
46392: PUSH
46393: LD_VAR 0 1
46397: PPUSH
46398: CALL_OW 274
46402: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
46403: LD_VAR 0 9
46407: PPUSH
46408: LD_INT 1
46410: PPUSH
46411: CALL_OW 275
46415: PUSH
46416: LD_VAR 0 14
46420: PUSH
46421: LD_INT 1
46423: ARRAY
46424: GREATEREQUAL
46425: PUSH
46426: LD_VAR 0 9
46430: PPUSH
46431: LD_INT 2
46433: PPUSH
46434: CALL_OW 275
46438: PUSH
46439: LD_VAR 0 14
46443: PUSH
46444: LD_INT 2
46446: ARRAY
46447: GREATEREQUAL
46448: AND
46449: PUSH
46450: LD_VAR 0 9
46454: PPUSH
46455: LD_INT 3
46457: PPUSH
46458: CALL_OW 275
46462: PUSH
46463: LD_VAR 0 14
46467: PUSH
46468: LD_INT 3
46470: ARRAY
46471: GREATEREQUAL
46472: AND
46473: IFFALSE 46485
// result := weapon ;
46475: LD_ADDR_VAR 0 3
46479: PUSH
46480: LD_VAR 0 18
46484: ST_TO_ADDR
// end ; end ;
46485: LD_VAR 0 3
46489: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
46490: LD_INT 0
46492: PPUSH
46493: PPUSH
// result := true ;
46494: LD_ADDR_VAR 0 3
46498: PUSH
46499: LD_INT 1
46501: ST_TO_ADDR
// if array1 = array2 then
46502: LD_VAR 0 1
46506: PUSH
46507: LD_VAR 0 2
46511: EQUAL
46512: IFFALSE 46572
// begin for i = 1 to array1 do
46514: LD_ADDR_VAR 0 4
46518: PUSH
46519: DOUBLE
46520: LD_INT 1
46522: DEC
46523: ST_TO_ADDR
46524: LD_VAR 0 1
46528: PUSH
46529: FOR_TO
46530: IFFALSE 46568
// if array1 [ i ] <> array2 [ i ] then
46532: LD_VAR 0 1
46536: PUSH
46537: LD_VAR 0 4
46541: ARRAY
46542: PUSH
46543: LD_VAR 0 2
46547: PUSH
46548: LD_VAR 0 4
46552: ARRAY
46553: NONEQUAL
46554: IFFALSE 46566
// begin result := false ;
46556: LD_ADDR_VAR 0 3
46560: PUSH
46561: LD_INT 0
46563: ST_TO_ADDR
// break ;
46564: GO 46568
// end ;
46566: GO 46529
46568: POP
46569: POP
// end else
46570: GO 46580
// result := false ;
46572: LD_ADDR_VAR 0 3
46576: PUSH
46577: LD_INT 0
46579: ST_TO_ADDR
// end ;
46580: LD_VAR 0 3
46584: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
46585: LD_INT 0
46587: PPUSH
46588: PPUSH
// if not array1 or not array2 then
46589: LD_VAR 0 1
46593: NOT
46594: PUSH
46595: LD_VAR 0 2
46599: NOT
46600: OR
46601: IFFALSE 46605
// exit ;
46603: GO 46669
// result := true ;
46605: LD_ADDR_VAR 0 3
46609: PUSH
46610: LD_INT 1
46612: ST_TO_ADDR
// for i = 1 to array1 do
46613: LD_ADDR_VAR 0 4
46617: PUSH
46618: DOUBLE
46619: LD_INT 1
46621: DEC
46622: ST_TO_ADDR
46623: LD_VAR 0 1
46627: PUSH
46628: FOR_TO
46629: IFFALSE 46667
// if array1 [ i ] <> array2 [ i ] then
46631: LD_VAR 0 1
46635: PUSH
46636: LD_VAR 0 4
46640: ARRAY
46641: PUSH
46642: LD_VAR 0 2
46646: PUSH
46647: LD_VAR 0 4
46651: ARRAY
46652: NONEQUAL
46653: IFFALSE 46665
// begin result := false ;
46655: LD_ADDR_VAR 0 3
46659: PUSH
46660: LD_INT 0
46662: ST_TO_ADDR
// break ;
46663: GO 46667
// end ;
46665: GO 46628
46667: POP
46668: POP
// end ;
46669: LD_VAR 0 3
46673: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
46674: LD_INT 0
46676: PPUSH
46677: PPUSH
46678: PPUSH
// pom := GetBase ( fac ) ;
46679: LD_ADDR_VAR 0 5
46683: PUSH
46684: LD_VAR 0 1
46688: PPUSH
46689: CALL_OW 274
46693: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
46694: LD_ADDR_VAR 0 4
46698: PUSH
46699: LD_VAR 0 2
46703: PUSH
46704: LD_INT 1
46706: ARRAY
46707: PPUSH
46708: LD_VAR 0 2
46712: PUSH
46713: LD_INT 2
46715: ARRAY
46716: PPUSH
46717: LD_VAR 0 2
46721: PUSH
46722: LD_INT 3
46724: ARRAY
46725: PPUSH
46726: LD_VAR 0 2
46730: PUSH
46731: LD_INT 4
46733: ARRAY
46734: PPUSH
46735: CALL_OW 449
46739: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46740: LD_ADDR_VAR 0 3
46744: PUSH
46745: LD_VAR 0 5
46749: PPUSH
46750: LD_INT 1
46752: PPUSH
46753: CALL_OW 275
46757: PUSH
46758: LD_VAR 0 4
46762: PUSH
46763: LD_INT 1
46765: ARRAY
46766: GREATEREQUAL
46767: PUSH
46768: LD_VAR 0 5
46772: PPUSH
46773: LD_INT 2
46775: PPUSH
46776: CALL_OW 275
46780: PUSH
46781: LD_VAR 0 4
46785: PUSH
46786: LD_INT 2
46788: ARRAY
46789: GREATEREQUAL
46790: AND
46791: PUSH
46792: LD_VAR 0 5
46796: PPUSH
46797: LD_INT 3
46799: PPUSH
46800: CALL_OW 275
46804: PUSH
46805: LD_VAR 0 4
46809: PUSH
46810: LD_INT 3
46812: ARRAY
46813: GREATEREQUAL
46814: AND
46815: ST_TO_ADDR
// end ;
46816: LD_VAR 0 3
46820: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
46821: LD_INT 0
46823: PPUSH
46824: PPUSH
46825: PPUSH
46826: PPUSH
// pom := GetBase ( building ) ;
46827: LD_ADDR_VAR 0 3
46831: PUSH
46832: LD_VAR 0 1
46836: PPUSH
46837: CALL_OW 274
46841: ST_TO_ADDR
// if not pom then
46842: LD_VAR 0 3
46846: NOT
46847: IFFALSE 46851
// exit ;
46849: GO 47021
// btype := GetBType ( building ) ;
46851: LD_ADDR_VAR 0 5
46855: PUSH
46856: LD_VAR 0 1
46860: PPUSH
46861: CALL_OW 266
46865: ST_TO_ADDR
// if btype = b_armoury then
46866: LD_VAR 0 5
46870: PUSH
46871: LD_INT 4
46873: EQUAL
46874: IFFALSE 46884
// btype := b_barracks ;
46876: LD_ADDR_VAR 0 5
46880: PUSH
46881: LD_INT 5
46883: ST_TO_ADDR
// if btype = b_depot then
46884: LD_VAR 0 5
46888: PUSH
46889: LD_INT 0
46891: EQUAL
46892: IFFALSE 46902
// btype := b_warehouse ;
46894: LD_ADDR_VAR 0 5
46898: PUSH
46899: LD_INT 1
46901: ST_TO_ADDR
// if btype = b_workshop then
46902: LD_VAR 0 5
46906: PUSH
46907: LD_INT 2
46909: EQUAL
46910: IFFALSE 46920
// btype := b_factory ;
46912: LD_ADDR_VAR 0 5
46916: PUSH
46917: LD_INT 3
46919: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46920: LD_ADDR_VAR 0 4
46924: PUSH
46925: LD_VAR 0 5
46929: PPUSH
46930: LD_VAR 0 1
46934: PPUSH
46935: CALL_OW 248
46939: PPUSH
46940: CALL_OW 450
46944: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46945: LD_ADDR_VAR 0 2
46949: PUSH
46950: LD_VAR 0 3
46954: PPUSH
46955: LD_INT 1
46957: PPUSH
46958: CALL_OW 275
46962: PUSH
46963: LD_VAR 0 4
46967: PUSH
46968: LD_INT 1
46970: ARRAY
46971: GREATEREQUAL
46972: PUSH
46973: LD_VAR 0 3
46977: PPUSH
46978: LD_INT 2
46980: PPUSH
46981: CALL_OW 275
46985: PUSH
46986: LD_VAR 0 4
46990: PUSH
46991: LD_INT 2
46993: ARRAY
46994: GREATEREQUAL
46995: AND
46996: PUSH
46997: LD_VAR 0 3
47001: PPUSH
47002: LD_INT 3
47004: PPUSH
47005: CALL_OW 275
47009: PUSH
47010: LD_VAR 0 4
47014: PUSH
47015: LD_INT 3
47017: ARRAY
47018: GREATEREQUAL
47019: AND
47020: ST_TO_ADDR
// end ;
47021: LD_VAR 0 2
47025: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
47026: LD_INT 0
47028: PPUSH
47029: PPUSH
47030: PPUSH
// pom := GetBase ( building ) ;
47031: LD_ADDR_VAR 0 4
47035: PUSH
47036: LD_VAR 0 1
47040: PPUSH
47041: CALL_OW 274
47045: ST_TO_ADDR
// if not pom then
47046: LD_VAR 0 4
47050: NOT
47051: IFFALSE 47055
// exit ;
47053: GO 47156
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47055: LD_ADDR_VAR 0 5
47059: PUSH
47060: LD_VAR 0 2
47064: PPUSH
47065: LD_VAR 0 1
47069: PPUSH
47070: CALL_OW 248
47074: PPUSH
47075: CALL_OW 450
47079: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47080: LD_ADDR_VAR 0 3
47084: PUSH
47085: LD_VAR 0 4
47089: PPUSH
47090: LD_INT 1
47092: PPUSH
47093: CALL_OW 275
47097: PUSH
47098: LD_VAR 0 5
47102: PUSH
47103: LD_INT 1
47105: ARRAY
47106: GREATEREQUAL
47107: PUSH
47108: LD_VAR 0 4
47112: PPUSH
47113: LD_INT 2
47115: PPUSH
47116: CALL_OW 275
47120: PUSH
47121: LD_VAR 0 5
47125: PUSH
47126: LD_INT 2
47128: ARRAY
47129: GREATEREQUAL
47130: AND
47131: PUSH
47132: LD_VAR 0 4
47136: PPUSH
47137: LD_INT 3
47139: PPUSH
47140: CALL_OW 275
47144: PUSH
47145: LD_VAR 0 5
47149: PUSH
47150: LD_INT 3
47152: ARRAY
47153: GREATEREQUAL
47154: AND
47155: ST_TO_ADDR
// end ;
47156: LD_VAR 0 3
47160: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
47161: LD_INT 0
47163: PPUSH
47164: PPUSH
47165: PPUSH
47166: PPUSH
47167: PPUSH
47168: PPUSH
47169: PPUSH
47170: PPUSH
47171: PPUSH
47172: PPUSH
47173: PPUSH
// result := false ;
47174: LD_ADDR_VAR 0 8
47178: PUSH
47179: LD_INT 0
47181: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
47182: LD_VAR 0 5
47186: NOT
47187: PUSH
47188: LD_VAR 0 1
47192: NOT
47193: OR
47194: PUSH
47195: LD_VAR 0 2
47199: NOT
47200: OR
47201: PUSH
47202: LD_VAR 0 3
47206: NOT
47207: OR
47208: IFFALSE 47212
// exit ;
47210: GO 48026
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
47212: LD_ADDR_VAR 0 14
47216: PUSH
47217: LD_VAR 0 1
47221: PPUSH
47222: LD_VAR 0 2
47226: PPUSH
47227: LD_VAR 0 3
47231: PPUSH
47232: LD_VAR 0 4
47236: PPUSH
47237: LD_VAR 0 5
47241: PUSH
47242: LD_INT 1
47244: ARRAY
47245: PPUSH
47246: CALL_OW 248
47250: PPUSH
47251: LD_INT 0
47253: PPUSH
47254: CALL 49259 0 6
47258: ST_TO_ADDR
// if not hexes then
47259: LD_VAR 0 14
47263: NOT
47264: IFFALSE 47268
// exit ;
47266: GO 48026
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47268: LD_ADDR_VAR 0 17
47272: PUSH
47273: LD_VAR 0 5
47277: PPUSH
47278: LD_INT 22
47280: PUSH
47281: LD_VAR 0 13
47285: PPUSH
47286: CALL_OW 255
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 2
47297: PUSH
47298: LD_INT 30
47300: PUSH
47301: LD_INT 0
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 30
47310: PUSH
47311: LD_INT 1
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: LIST
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PPUSH
47327: CALL_OW 72
47331: ST_TO_ADDR
// for i = 1 to hexes do
47332: LD_ADDR_VAR 0 9
47336: PUSH
47337: DOUBLE
47338: LD_INT 1
47340: DEC
47341: ST_TO_ADDR
47342: LD_VAR 0 14
47346: PUSH
47347: FOR_TO
47348: IFFALSE 48024
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47350: LD_ADDR_VAR 0 13
47354: PUSH
47355: LD_VAR 0 14
47359: PUSH
47360: LD_VAR 0 9
47364: ARRAY
47365: PUSH
47366: LD_INT 1
47368: ARRAY
47369: PPUSH
47370: LD_VAR 0 14
47374: PUSH
47375: LD_VAR 0 9
47379: ARRAY
47380: PUSH
47381: LD_INT 2
47383: ARRAY
47384: PPUSH
47385: CALL_OW 428
47389: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
47390: LD_VAR 0 14
47394: PUSH
47395: LD_VAR 0 9
47399: ARRAY
47400: PUSH
47401: LD_INT 1
47403: ARRAY
47404: PPUSH
47405: LD_VAR 0 14
47409: PUSH
47410: LD_VAR 0 9
47414: ARRAY
47415: PUSH
47416: LD_INT 2
47418: ARRAY
47419: PPUSH
47420: CALL_OW 351
47424: PUSH
47425: LD_VAR 0 14
47429: PUSH
47430: LD_VAR 0 9
47434: ARRAY
47435: PUSH
47436: LD_INT 1
47438: ARRAY
47439: PPUSH
47440: LD_VAR 0 14
47444: PUSH
47445: LD_VAR 0 9
47449: ARRAY
47450: PUSH
47451: LD_INT 2
47453: ARRAY
47454: PPUSH
47455: CALL_OW 488
47459: NOT
47460: OR
47461: PUSH
47462: LD_VAR 0 13
47466: PPUSH
47467: CALL_OW 247
47471: PUSH
47472: LD_INT 3
47474: EQUAL
47475: OR
47476: IFFALSE 47482
// exit ;
47478: POP
47479: POP
47480: GO 48026
// if not tmp then
47482: LD_VAR 0 13
47486: NOT
47487: IFFALSE 47491
// continue ;
47489: GO 47347
// result := true ;
47491: LD_ADDR_VAR 0 8
47495: PUSH
47496: LD_INT 1
47498: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
47499: LD_VAR 0 6
47503: PUSH
47504: LD_VAR 0 13
47508: PPUSH
47509: CALL_OW 247
47513: PUSH
47514: LD_INT 2
47516: EQUAL
47517: AND
47518: PUSH
47519: LD_VAR 0 13
47523: PPUSH
47524: CALL_OW 263
47528: PUSH
47529: LD_INT 1
47531: EQUAL
47532: AND
47533: IFFALSE 47697
// begin if IsDrivenBy ( tmp ) then
47535: LD_VAR 0 13
47539: PPUSH
47540: CALL_OW 311
47544: IFFALSE 47548
// continue ;
47546: GO 47347
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
47548: LD_VAR 0 6
47552: PPUSH
47553: LD_INT 3
47555: PUSH
47556: LD_INT 60
47558: PUSH
47559: EMPTY
47560: LIST
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 3
47568: PUSH
47569: LD_INT 55
47571: PUSH
47572: EMPTY
47573: LIST
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PPUSH
47583: CALL_OW 72
47587: IFFALSE 47695
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
47589: LD_ADDR_VAR 0 18
47593: PUSH
47594: LD_VAR 0 6
47598: PPUSH
47599: LD_INT 3
47601: PUSH
47602: LD_INT 60
47604: PUSH
47605: EMPTY
47606: LIST
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 3
47614: PUSH
47615: LD_INT 55
47617: PUSH
47618: EMPTY
47619: LIST
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PPUSH
47629: CALL_OW 72
47633: PUSH
47634: LD_INT 1
47636: ARRAY
47637: ST_TO_ADDR
// if IsInUnit ( driver ) then
47638: LD_VAR 0 18
47642: PPUSH
47643: CALL_OW 310
47647: IFFALSE 47658
// ComExit ( driver ) ;
47649: LD_VAR 0 18
47653: PPUSH
47654: CALL 73020 0 1
// AddComEnterUnit ( driver , tmp ) ;
47658: LD_VAR 0 18
47662: PPUSH
47663: LD_VAR 0 13
47667: PPUSH
47668: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
47672: LD_VAR 0 18
47676: PPUSH
47677: LD_VAR 0 7
47681: PPUSH
47682: CALL_OW 173
// AddComExitVehicle ( driver ) ;
47686: LD_VAR 0 18
47690: PPUSH
47691: CALL_OW 181
// end ; continue ;
47695: GO 47347
// end ; if not cleaners or not tmp in cleaners then
47697: LD_VAR 0 6
47701: NOT
47702: PUSH
47703: LD_VAR 0 13
47707: PUSH
47708: LD_VAR 0 6
47712: IN
47713: NOT
47714: OR
47715: IFFALSE 48022
// begin if dep then
47717: LD_VAR 0 17
47721: IFFALSE 47857
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
47723: LD_ADDR_VAR 0 16
47727: PUSH
47728: LD_VAR 0 17
47732: PUSH
47733: LD_INT 1
47735: ARRAY
47736: PPUSH
47737: CALL_OW 250
47741: PPUSH
47742: LD_VAR 0 17
47746: PUSH
47747: LD_INT 1
47749: ARRAY
47750: PPUSH
47751: CALL_OW 254
47755: PPUSH
47756: LD_INT 5
47758: PPUSH
47759: CALL_OW 272
47763: PUSH
47764: LD_VAR 0 17
47768: PUSH
47769: LD_INT 1
47771: ARRAY
47772: PPUSH
47773: CALL_OW 251
47777: PPUSH
47778: LD_VAR 0 17
47782: PUSH
47783: LD_INT 1
47785: ARRAY
47786: PPUSH
47787: CALL_OW 254
47791: PPUSH
47792: LD_INT 5
47794: PPUSH
47795: CALL_OW 273
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
47804: LD_VAR 0 16
47808: PUSH
47809: LD_INT 1
47811: ARRAY
47812: PPUSH
47813: LD_VAR 0 16
47817: PUSH
47818: LD_INT 2
47820: ARRAY
47821: PPUSH
47822: CALL_OW 488
47826: IFFALSE 47857
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
47828: LD_VAR 0 13
47832: PPUSH
47833: LD_VAR 0 16
47837: PUSH
47838: LD_INT 1
47840: ARRAY
47841: PPUSH
47842: LD_VAR 0 16
47846: PUSH
47847: LD_INT 2
47849: ARRAY
47850: PPUSH
47851: CALL_OW 111
// continue ;
47855: GO 47347
// end ; end ; r := GetDir ( tmp ) ;
47857: LD_ADDR_VAR 0 15
47861: PUSH
47862: LD_VAR 0 13
47866: PPUSH
47867: CALL_OW 254
47871: ST_TO_ADDR
// if r = 5 then
47872: LD_VAR 0 15
47876: PUSH
47877: LD_INT 5
47879: EQUAL
47880: IFFALSE 47890
// r := 0 ;
47882: LD_ADDR_VAR 0 15
47886: PUSH
47887: LD_INT 0
47889: ST_TO_ADDR
// for j = r to 5 do
47890: LD_ADDR_VAR 0 10
47894: PUSH
47895: DOUBLE
47896: LD_VAR 0 15
47900: DEC
47901: ST_TO_ADDR
47902: LD_INT 5
47904: PUSH
47905: FOR_TO
47906: IFFALSE 48020
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
47908: LD_ADDR_VAR 0 11
47912: PUSH
47913: LD_VAR 0 13
47917: PPUSH
47918: CALL_OW 250
47922: PPUSH
47923: LD_VAR 0 10
47927: PPUSH
47928: LD_INT 2
47930: PPUSH
47931: CALL_OW 272
47935: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
47936: LD_ADDR_VAR 0 12
47940: PUSH
47941: LD_VAR 0 13
47945: PPUSH
47946: CALL_OW 251
47950: PPUSH
47951: LD_VAR 0 10
47955: PPUSH
47956: LD_INT 2
47958: PPUSH
47959: CALL_OW 273
47963: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
47964: LD_VAR 0 11
47968: PPUSH
47969: LD_VAR 0 12
47973: PPUSH
47974: CALL_OW 488
47978: PUSH
47979: LD_VAR 0 11
47983: PPUSH
47984: LD_VAR 0 12
47988: PPUSH
47989: CALL_OW 428
47993: NOT
47994: AND
47995: IFFALSE 48018
// begin ComMoveXY ( tmp , _x , _y ) ;
47997: LD_VAR 0 13
48001: PPUSH
48002: LD_VAR 0 11
48006: PPUSH
48007: LD_VAR 0 12
48011: PPUSH
48012: CALL_OW 111
// break ;
48016: GO 48020
// end ; end ;
48018: GO 47905
48020: POP
48021: POP
// end ; end ;
48022: GO 47347
48024: POP
48025: POP
// end ;
48026: LD_VAR 0 8
48030: RET
// export function BuildingTechInvented ( side , btype ) ; begin
48031: LD_INT 0
48033: PPUSH
// result := true ;
48034: LD_ADDR_VAR 0 3
48038: PUSH
48039: LD_INT 1
48041: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
48042: LD_VAR 0 2
48046: PUSH
48047: LD_INT 24
48049: DOUBLE
48050: EQUAL
48051: IFTRUE 48061
48053: LD_INT 33
48055: DOUBLE
48056: EQUAL
48057: IFTRUE 48061
48059: GO 48086
48061: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
48062: LD_ADDR_VAR 0 3
48066: PUSH
48067: LD_INT 32
48069: PPUSH
48070: LD_VAR 0 1
48074: PPUSH
48075: CALL_OW 321
48079: PUSH
48080: LD_INT 2
48082: EQUAL
48083: ST_TO_ADDR
48084: GO 48402
48086: LD_INT 20
48088: DOUBLE
48089: EQUAL
48090: IFTRUE 48094
48092: GO 48119
48094: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
48095: LD_ADDR_VAR 0 3
48099: PUSH
48100: LD_INT 6
48102: PPUSH
48103: LD_VAR 0 1
48107: PPUSH
48108: CALL_OW 321
48112: PUSH
48113: LD_INT 2
48115: EQUAL
48116: ST_TO_ADDR
48117: GO 48402
48119: LD_INT 22
48121: DOUBLE
48122: EQUAL
48123: IFTRUE 48133
48125: LD_INT 36
48127: DOUBLE
48128: EQUAL
48129: IFTRUE 48133
48131: GO 48158
48133: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
48134: LD_ADDR_VAR 0 3
48138: PUSH
48139: LD_INT 15
48141: PPUSH
48142: LD_VAR 0 1
48146: PPUSH
48147: CALL_OW 321
48151: PUSH
48152: LD_INT 2
48154: EQUAL
48155: ST_TO_ADDR
48156: GO 48402
48158: LD_INT 30
48160: DOUBLE
48161: EQUAL
48162: IFTRUE 48166
48164: GO 48191
48166: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
48167: LD_ADDR_VAR 0 3
48171: PUSH
48172: LD_INT 20
48174: PPUSH
48175: LD_VAR 0 1
48179: PPUSH
48180: CALL_OW 321
48184: PUSH
48185: LD_INT 2
48187: EQUAL
48188: ST_TO_ADDR
48189: GO 48402
48191: LD_INT 28
48193: DOUBLE
48194: EQUAL
48195: IFTRUE 48205
48197: LD_INT 21
48199: DOUBLE
48200: EQUAL
48201: IFTRUE 48205
48203: GO 48230
48205: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
48206: LD_ADDR_VAR 0 3
48210: PUSH
48211: LD_INT 21
48213: PPUSH
48214: LD_VAR 0 1
48218: PPUSH
48219: CALL_OW 321
48223: PUSH
48224: LD_INT 2
48226: EQUAL
48227: ST_TO_ADDR
48228: GO 48402
48230: LD_INT 16
48232: DOUBLE
48233: EQUAL
48234: IFTRUE 48238
48236: GO 48263
48238: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
48239: LD_ADDR_VAR 0 3
48243: PUSH
48244: LD_INT 84
48246: PPUSH
48247: LD_VAR 0 1
48251: PPUSH
48252: CALL_OW 321
48256: PUSH
48257: LD_INT 2
48259: EQUAL
48260: ST_TO_ADDR
48261: GO 48402
48263: LD_INT 19
48265: DOUBLE
48266: EQUAL
48267: IFTRUE 48277
48269: LD_INT 23
48271: DOUBLE
48272: EQUAL
48273: IFTRUE 48277
48275: GO 48302
48277: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
48278: LD_ADDR_VAR 0 3
48282: PUSH
48283: LD_INT 83
48285: PPUSH
48286: LD_VAR 0 1
48290: PPUSH
48291: CALL_OW 321
48295: PUSH
48296: LD_INT 2
48298: EQUAL
48299: ST_TO_ADDR
48300: GO 48402
48302: LD_INT 17
48304: DOUBLE
48305: EQUAL
48306: IFTRUE 48310
48308: GO 48335
48310: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
48311: LD_ADDR_VAR 0 3
48315: PUSH
48316: LD_INT 39
48318: PPUSH
48319: LD_VAR 0 1
48323: PPUSH
48324: CALL_OW 321
48328: PUSH
48329: LD_INT 2
48331: EQUAL
48332: ST_TO_ADDR
48333: GO 48402
48335: LD_INT 18
48337: DOUBLE
48338: EQUAL
48339: IFTRUE 48343
48341: GO 48368
48343: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
48344: LD_ADDR_VAR 0 3
48348: PUSH
48349: LD_INT 40
48351: PPUSH
48352: LD_VAR 0 1
48356: PPUSH
48357: CALL_OW 321
48361: PUSH
48362: LD_INT 2
48364: EQUAL
48365: ST_TO_ADDR
48366: GO 48402
48368: LD_INT 27
48370: DOUBLE
48371: EQUAL
48372: IFTRUE 48376
48374: GO 48401
48376: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
48377: LD_ADDR_VAR 0 3
48381: PUSH
48382: LD_INT 35
48384: PPUSH
48385: LD_VAR 0 1
48389: PPUSH
48390: CALL_OW 321
48394: PUSH
48395: LD_INT 2
48397: EQUAL
48398: ST_TO_ADDR
48399: GO 48402
48401: POP
// end ;
48402: LD_VAR 0 3
48406: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
48407: LD_INT 0
48409: PPUSH
48410: PPUSH
48411: PPUSH
48412: PPUSH
48413: PPUSH
48414: PPUSH
48415: PPUSH
48416: PPUSH
48417: PPUSH
48418: PPUSH
48419: PPUSH
// result := false ;
48420: LD_ADDR_VAR 0 6
48424: PUSH
48425: LD_INT 0
48427: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
48428: LD_VAR 0 1
48432: NOT
48433: PUSH
48434: LD_VAR 0 1
48438: PPUSH
48439: CALL_OW 266
48443: PUSH
48444: LD_INT 0
48446: PUSH
48447: LD_INT 1
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: IN
48454: NOT
48455: OR
48456: PUSH
48457: LD_VAR 0 2
48461: NOT
48462: OR
48463: PUSH
48464: LD_VAR 0 5
48468: PUSH
48469: LD_INT 0
48471: PUSH
48472: LD_INT 1
48474: PUSH
48475: LD_INT 2
48477: PUSH
48478: LD_INT 3
48480: PUSH
48481: LD_INT 4
48483: PUSH
48484: LD_INT 5
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: IN
48495: NOT
48496: OR
48497: PUSH
48498: LD_VAR 0 3
48502: PPUSH
48503: LD_VAR 0 4
48507: PPUSH
48508: CALL_OW 488
48512: NOT
48513: OR
48514: IFFALSE 48518
// exit ;
48516: GO 49254
// side := GetSide ( depot ) ;
48518: LD_ADDR_VAR 0 9
48522: PUSH
48523: LD_VAR 0 1
48527: PPUSH
48528: CALL_OW 255
48532: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
48533: LD_VAR 0 9
48537: PPUSH
48538: LD_VAR 0 2
48542: PPUSH
48543: CALL 48031 0 2
48547: NOT
48548: IFFALSE 48552
// exit ;
48550: GO 49254
// pom := GetBase ( depot ) ;
48552: LD_ADDR_VAR 0 10
48556: PUSH
48557: LD_VAR 0 1
48561: PPUSH
48562: CALL_OW 274
48566: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
48567: LD_ADDR_VAR 0 11
48571: PUSH
48572: LD_VAR 0 2
48576: PPUSH
48577: LD_VAR 0 1
48581: PPUSH
48582: CALL_OW 248
48586: PPUSH
48587: CALL_OW 450
48591: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
48592: LD_VAR 0 10
48596: PPUSH
48597: LD_INT 1
48599: PPUSH
48600: CALL_OW 275
48604: PUSH
48605: LD_VAR 0 11
48609: PUSH
48610: LD_INT 1
48612: ARRAY
48613: GREATEREQUAL
48614: PUSH
48615: LD_VAR 0 10
48619: PPUSH
48620: LD_INT 2
48622: PPUSH
48623: CALL_OW 275
48627: PUSH
48628: LD_VAR 0 11
48632: PUSH
48633: LD_INT 2
48635: ARRAY
48636: GREATEREQUAL
48637: AND
48638: PUSH
48639: LD_VAR 0 10
48643: PPUSH
48644: LD_INT 3
48646: PPUSH
48647: CALL_OW 275
48651: PUSH
48652: LD_VAR 0 11
48656: PUSH
48657: LD_INT 3
48659: ARRAY
48660: GREATEREQUAL
48661: AND
48662: NOT
48663: IFFALSE 48667
// exit ;
48665: GO 49254
// if GetBType ( depot ) = b_depot then
48667: LD_VAR 0 1
48671: PPUSH
48672: CALL_OW 266
48676: PUSH
48677: LD_INT 0
48679: EQUAL
48680: IFFALSE 48692
// dist := 28 else
48682: LD_ADDR_VAR 0 14
48686: PUSH
48687: LD_INT 28
48689: ST_TO_ADDR
48690: GO 48700
// dist := 36 ;
48692: LD_ADDR_VAR 0 14
48696: PUSH
48697: LD_INT 36
48699: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
48700: LD_VAR 0 1
48704: PPUSH
48705: LD_VAR 0 3
48709: PPUSH
48710: LD_VAR 0 4
48714: PPUSH
48715: CALL_OW 297
48719: PUSH
48720: LD_VAR 0 14
48724: GREATER
48725: IFFALSE 48729
// exit ;
48727: GO 49254
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
48729: LD_ADDR_VAR 0 12
48733: PUSH
48734: LD_VAR 0 2
48738: PPUSH
48739: LD_VAR 0 3
48743: PPUSH
48744: LD_VAR 0 4
48748: PPUSH
48749: LD_VAR 0 5
48753: PPUSH
48754: LD_VAR 0 1
48758: PPUSH
48759: CALL_OW 248
48763: PPUSH
48764: LD_INT 0
48766: PPUSH
48767: CALL 49259 0 6
48771: ST_TO_ADDR
// if not hexes then
48772: LD_VAR 0 12
48776: NOT
48777: IFFALSE 48781
// exit ;
48779: GO 49254
// hex := GetHexInfo ( x , y ) ;
48781: LD_ADDR_VAR 0 15
48785: PUSH
48786: LD_VAR 0 3
48790: PPUSH
48791: LD_VAR 0 4
48795: PPUSH
48796: CALL_OW 546
48800: ST_TO_ADDR
// if hex [ 1 ] then
48801: LD_VAR 0 15
48805: PUSH
48806: LD_INT 1
48808: ARRAY
48809: IFFALSE 48813
// exit ;
48811: GO 49254
// height := hex [ 2 ] ;
48813: LD_ADDR_VAR 0 13
48817: PUSH
48818: LD_VAR 0 15
48822: PUSH
48823: LD_INT 2
48825: ARRAY
48826: ST_TO_ADDR
// for i = 1 to hexes do
48827: LD_ADDR_VAR 0 7
48831: PUSH
48832: DOUBLE
48833: LD_INT 1
48835: DEC
48836: ST_TO_ADDR
48837: LD_VAR 0 12
48841: PUSH
48842: FOR_TO
48843: IFFALSE 49173
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
48845: LD_VAR 0 12
48849: PUSH
48850: LD_VAR 0 7
48854: ARRAY
48855: PUSH
48856: LD_INT 1
48858: ARRAY
48859: PPUSH
48860: LD_VAR 0 12
48864: PUSH
48865: LD_VAR 0 7
48869: ARRAY
48870: PUSH
48871: LD_INT 2
48873: ARRAY
48874: PPUSH
48875: CALL_OW 488
48879: NOT
48880: PUSH
48881: LD_VAR 0 12
48885: PUSH
48886: LD_VAR 0 7
48890: ARRAY
48891: PUSH
48892: LD_INT 1
48894: ARRAY
48895: PPUSH
48896: LD_VAR 0 12
48900: PUSH
48901: LD_VAR 0 7
48905: ARRAY
48906: PUSH
48907: LD_INT 2
48909: ARRAY
48910: PPUSH
48911: CALL_OW 428
48915: PUSH
48916: LD_INT 0
48918: GREATER
48919: OR
48920: PUSH
48921: LD_VAR 0 12
48925: PUSH
48926: LD_VAR 0 7
48930: ARRAY
48931: PUSH
48932: LD_INT 1
48934: ARRAY
48935: PPUSH
48936: LD_VAR 0 12
48940: PUSH
48941: LD_VAR 0 7
48945: ARRAY
48946: PUSH
48947: LD_INT 2
48949: ARRAY
48950: PPUSH
48951: CALL_OW 351
48955: OR
48956: IFFALSE 48962
// exit ;
48958: POP
48959: POP
48960: GO 49254
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48962: LD_ADDR_VAR 0 8
48966: PUSH
48967: LD_VAR 0 12
48971: PUSH
48972: LD_VAR 0 7
48976: ARRAY
48977: PUSH
48978: LD_INT 1
48980: ARRAY
48981: PPUSH
48982: LD_VAR 0 12
48986: PUSH
48987: LD_VAR 0 7
48991: ARRAY
48992: PUSH
48993: LD_INT 2
48995: ARRAY
48996: PPUSH
48997: CALL_OW 546
49001: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
49002: LD_VAR 0 8
49006: PUSH
49007: LD_INT 1
49009: ARRAY
49010: PUSH
49011: LD_VAR 0 8
49015: PUSH
49016: LD_INT 2
49018: ARRAY
49019: PUSH
49020: LD_VAR 0 13
49024: PUSH
49025: LD_INT 2
49027: PLUS
49028: GREATER
49029: OR
49030: PUSH
49031: LD_VAR 0 8
49035: PUSH
49036: LD_INT 2
49038: ARRAY
49039: PUSH
49040: LD_VAR 0 13
49044: PUSH
49045: LD_INT 2
49047: MINUS
49048: LESS
49049: OR
49050: PUSH
49051: LD_VAR 0 8
49055: PUSH
49056: LD_INT 3
49058: ARRAY
49059: PUSH
49060: LD_INT 0
49062: PUSH
49063: LD_INT 8
49065: PUSH
49066: LD_INT 9
49068: PUSH
49069: LD_INT 10
49071: PUSH
49072: LD_INT 11
49074: PUSH
49075: LD_INT 12
49077: PUSH
49078: LD_INT 13
49080: PUSH
49081: LD_INT 16
49083: PUSH
49084: LD_INT 17
49086: PUSH
49087: LD_INT 18
49089: PUSH
49090: LD_INT 19
49092: PUSH
49093: LD_INT 20
49095: PUSH
49096: LD_INT 21
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: IN
49114: NOT
49115: OR
49116: PUSH
49117: LD_VAR 0 8
49121: PUSH
49122: LD_INT 5
49124: ARRAY
49125: NOT
49126: OR
49127: PUSH
49128: LD_VAR 0 8
49132: PUSH
49133: LD_INT 6
49135: ARRAY
49136: PUSH
49137: LD_INT 1
49139: PUSH
49140: LD_INT 2
49142: PUSH
49143: LD_INT 7
49145: PUSH
49146: LD_INT 9
49148: PUSH
49149: LD_INT 10
49151: PUSH
49152: LD_INT 11
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: IN
49163: NOT
49164: OR
49165: IFFALSE 49171
// exit ;
49167: POP
49168: POP
49169: GO 49254
// end ;
49171: GO 48842
49173: POP
49174: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
49175: LD_VAR 0 9
49179: PPUSH
49180: LD_VAR 0 3
49184: PPUSH
49185: LD_VAR 0 4
49189: PPUSH
49190: LD_INT 20
49192: PPUSH
49193: CALL 41206 0 4
49197: PUSH
49198: LD_INT 4
49200: ARRAY
49201: IFFALSE 49205
// exit ;
49203: GO 49254
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
49205: LD_VAR 0 2
49209: PUSH
49210: LD_INT 29
49212: PUSH
49213: LD_INT 30
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: IN
49220: PUSH
49221: LD_VAR 0 3
49225: PPUSH
49226: LD_VAR 0 4
49230: PPUSH
49231: LD_VAR 0 9
49235: PPUSH
49236: CALL_OW 440
49240: NOT
49241: AND
49242: IFFALSE 49246
// exit ;
49244: GO 49254
// result := true ;
49246: LD_ADDR_VAR 0 6
49250: PUSH
49251: LD_INT 1
49253: ST_TO_ADDR
// end ;
49254: LD_VAR 0 6
49258: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
49259: LD_INT 0
49261: PPUSH
49262: PPUSH
49263: PPUSH
49264: PPUSH
49265: PPUSH
49266: PPUSH
49267: PPUSH
49268: PPUSH
49269: PPUSH
49270: PPUSH
49271: PPUSH
49272: PPUSH
49273: PPUSH
49274: PPUSH
49275: PPUSH
49276: PPUSH
49277: PPUSH
49278: PPUSH
49279: PPUSH
49280: PPUSH
49281: PPUSH
49282: PPUSH
49283: PPUSH
49284: PPUSH
49285: PPUSH
49286: PPUSH
49287: PPUSH
49288: PPUSH
49289: PPUSH
49290: PPUSH
49291: PPUSH
49292: PPUSH
49293: PPUSH
49294: PPUSH
49295: PPUSH
49296: PPUSH
49297: PPUSH
49298: PPUSH
49299: PPUSH
49300: PPUSH
49301: PPUSH
49302: PPUSH
49303: PPUSH
49304: PPUSH
49305: PPUSH
49306: PPUSH
49307: PPUSH
49308: PPUSH
49309: PPUSH
49310: PPUSH
49311: PPUSH
49312: PPUSH
49313: PPUSH
49314: PPUSH
49315: PPUSH
49316: PPUSH
49317: PPUSH
49318: PPUSH
// result = [ ] ;
49319: LD_ADDR_VAR 0 7
49323: PUSH
49324: EMPTY
49325: ST_TO_ADDR
// temp_list = [ ] ;
49326: LD_ADDR_VAR 0 9
49330: PUSH
49331: EMPTY
49332: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
49333: LD_VAR 0 4
49337: PUSH
49338: LD_INT 0
49340: PUSH
49341: LD_INT 1
49343: PUSH
49344: LD_INT 2
49346: PUSH
49347: LD_INT 3
49349: PUSH
49350: LD_INT 4
49352: PUSH
49353: LD_INT 5
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: IN
49364: NOT
49365: PUSH
49366: LD_VAR 0 1
49370: PUSH
49371: LD_INT 0
49373: PUSH
49374: LD_INT 1
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: IN
49381: PUSH
49382: LD_VAR 0 5
49386: PUSH
49387: LD_INT 1
49389: PUSH
49390: LD_INT 2
49392: PUSH
49393: LD_INT 3
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: LIST
49400: IN
49401: NOT
49402: AND
49403: OR
49404: IFFALSE 49408
// exit ;
49406: GO 67799
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
49408: LD_VAR 0 1
49412: PUSH
49413: LD_INT 6
49415: PUSH
49416: LD_INT 7
49418: PUSH
49419: LD_INT 8
49421: PUSH
49422: LD_INT 13
49424: PUSH
49425: LD_INT 12
49427: PUSH
49428: LD_INT 15
49430: PUSH
49431: LD_INT 11
49433: PUSH
49434: LD_INT 14
49436: PUSH
49437: LD_INT 10
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: IN
49451: IFFALSE 49461
// btype = b_lab ;
49453: LD_ADDR_VAR 0 1
49457: PUSH
49458: LD_INT 6
49460: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
49461: LD_VAR 0 6
49465: PUSH
49466: LD_INT 0
49468: PUSH
49469: LD_INT 1
49471: PUSH
49472: LD_INT 2
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: LIST
49479: IN
49480: NOT
49481: PUSH
49482: LD_VAR 0 1
49486: PUSH
49487: LD_INT 0
49489: PUSH
49490: LD_INT 1
49492: PUSH
49493: LD_INT 2
49495: PUSH
49496: LD_INT 3
49498: PUSH
49499: LD_INT 6
49501: PUSH
49502: LD_INT 36
49504: PUSH
49505: LD_INT 4
49507: PUSH
49508: LD_INT 5
49510: PUSH
49511: LD_INT 31
49513: PUSH
49514: LD_INT 32
49516: PUSH
49517: LD_INT 33
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: IN
49533: NOT
49534: PUSH
49535: LD_VAR 0 6
49539: PUSH
49540: LD_INT 1
49542: EQUAL
49543: AND
49544: OR
49545: PUSH
49546: LD_VAR 0 1
49550: PUSH
49551: LD_INT 2
49553: PUSH
49554: LD_INT 3
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: IN
49561: NOT
49562: PUSH
49563: LD_VAR 0 6
49567: PUSH
49568: LD_INT 2
49570: EQUAL
49571: AND
49572: OR
49573: IFFALSE 49583
// mode = 0 ;
49575: LD_ADDR_VAR 0 6
49579: PUSH
49580: LD_INT 0
49582: ST_TO_ADDR
// case mode of 0 :
49583: LD_VAR 0 6
49587: PUSH
49588: LD_INT 0
49590: DOUBLE
49591: EQUAL
49592: IFTRUE 49596
49594: GO 61049
49596: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49597: LD_ADDR_VAR 0 11
49601: PUSH
49602: LD_INT 0
49604: PUSH
49605: LD_INT 0
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 0
49614: PUSH
49615: LD_INT 1
49617: NEG
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 1
49625: PUSH
49626: LD_INT 0
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 1
49635: PUSH
49636: LD_INT 1
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 0
49645: PUSH
49646: LD_INT 1
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 1
49655: NEG
49656: PUSH
49657: LD_INT 0
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 1
49666: NEG
49667: PUSH
49668: LD_INT 1
49670: NEG
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 1
49678: NEG
49679: PUSH
49680: LD_INT 2
49682: NEG
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 0
49690: PUSH
49691: LD_INT 2
49693: NEG
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 1
49701: PUSH
49702: LD_INT 1
49704: NEG
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 1
49712: PUSH
49713: LD_INT 2
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 0
49722: PUSH
49723: LD_INT 2
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 1
49732: NEG
49733: PUSH
49734: LD_INT 1
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 1
49743: PUSH
49744: LD_INT 3
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 0
49753: PUSH
49754: LD_INT 3
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 1
49763: NEG
49764: PUSH
49765: LD_INT 2
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49790: LD_ADDR_VAR 0 12
49794: PUSH
49795: LD_INT 0
49797: PUSH
49798: LD_INT 0
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 0
49807: PUSH
49808: LD_INT 1
49810: NEG
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 1
49818: PUSH
49819: LD_INT 0
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 1
49828: PUSH
49829: LD_INT 1
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 0
49838: PUSH
49839: LD_INT 1
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 1
49848: NEG
49849: PUSH
49850: LD_INT 0
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 1
49859: NEG
49860: PUSH
49861: LD_INT 1
49863: NEG
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 1
49871: PUSH
49872: LD_INT 1
49874: NEG
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 2
49882: PUSH
49883: LD_INT 0
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 2
49892: PUSH
49893: LD_INT 1
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 1
49902: NEG
49903: PUSH
49904: LD_INT 1
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 2
49913: NEG
49914: PUSH
49915: LD_INT 0
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 2
49924: NEG
49925: PUSH
49926: LD_INT 1
49928: NEG
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 2
49936: NEG
49937: PUSH
49938: LD_INT 1
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 3
49947: NEG
49948: PUSH
49949: LD_INT 0
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 3
49958: NEG
49959: PUSH
49960: LD_INT 1
49962: NEG
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49986: LD_ADDR_VAR 0 13
49990: PUSH
49991: LD_INT 0
49993: PUSH
49994: LD_INT 0
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 0
50003: PUSH
50004: LD_INT 1
50006: NEG
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 1
50014: PUSH
50015: LD_INT 0
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 1
50024: PUSH
50025: LD_INT 1
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 0
50034: PUSH
50035: LD_INT 1
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 1
50044: NEG
50045: PUSH
50046: LD_INT 0
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 1
50055: NEG
50056: PUSH
50057: LD_INT 1
50059: NEG
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 1
50067: NEG
50068: PUSH
50069: LD_INT 2
50071: NEG
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 2
50079: PUSH
50080: LD_INT 1
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 2
50089: PUSH
50090: LD_INT 2
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 1
50099: PUSH
50100: LD_INT 2
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 2
50109: NEG
50110: PUSH
50111: LD_INT 1
50113: NEG
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 2
50121: NEG
50122: PUSH
50123: LD_INT 2
50125: NEG
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 2
50133: NEG
50134: PUSH
50135: LD_INT 3
50137: NEG
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 3
50145: NEG
50146: PUSH
50147: LD_INT 2
50149: NEG
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 3
50157: NEG
50158: PUSH
50159: LD_INT 3
50161: NEG
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: LIST
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50185: LD_ADDR_VAR 0 14
50189: PUSH
50190: LD_INT 0
50192: PUSH
50193: LD_INT 0
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 0
50202: PUSH
50203: LD_INT 1
50205: NEG
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 1
50213: PUSH
50214: LD_INT 0
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 1
50223: PUSH
50224: LD_INT 1
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 0
50233: PUSH
50234: LD_INT 1
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 1
50243: NEG
50244: PUSH
50245: LD_INT 0
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 1
50254: NEG
50255: PUSH
50256: LD_INT 1
50258: NEG
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 1
50266: NEG
50267: PUSH
50268: LD_INT 2
50270: NEG
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 0
50278: PUSH
50279: LD_INT 2
50281: NEG
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 1
50289: PUSH
50290: LD_INT 1
50292: NEG
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 1
50300: PUSH
50301: LD_INT 2
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 0
50310: PUSH
50311: LD_INT 2
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 1
50320: NEG
50321: PUSH
50322: LD_INT 1
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 1
50331: NEG
50332: PUSH
50333: LD_INT 3
50335: NEG
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 0
50343: PUSH
50344: LD_INT 3
50346: NEG
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 1
50354: PUSH
50355: LD_INT 2
50357: NEG
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50381: LD_ADDR_VAR 0 15
50385: PUSH
50386: LD_INT 0
50388: PUSH
50389: LD_INT 0
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 0
50398: PUSH
50399: LD_INT 1
50401: NEG
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 1
50409: PUSH
50410: LD_INT 0
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 1
50419: PUSH
50420: LD_INT 1
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 0
50429: PUSH
50430: LD_INT 1
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 1
50439: NEG
50440: PUSH
50441: LD_INT 0
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: PUSH
50448: LD_INT 1
50450: NEG
50451: PUSH
50452: LD_INT 1
50454: NEG
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 1
50462: PUSH
50463: LD_INT 1
50465: NEG
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 2
50473: PUSH
50474: LD_INT 0
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 2
50483: PUSH
50484: LD_INT 1
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 1
50493: NEG
50494: PUSH
50495: LD_INT 1
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 2
50504: NEG
50505: PUSH
50506: LD_INT 0
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 2
50515: NEG
50516: PUSH
50517: LD_INT 1
50519: NEG
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 2
50527: PUSH
50528: LD_INT 1
50530: NEG
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 3
50538: PUSH
50539: LD_INT 0
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 3
50548: PUSH
50549: LD_INT 1
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50574: LD_ADDR_VAR 0 16
50578: PUSH
50579: LD_INT 0
50581: PUSH
50582: LD_INT 0
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 0
50591: PUSH
50592: LD_INT 1
50594: NEG
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 1
50602: PUSH
50603: LD_INT 0
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 1
50612: PUSH
50613: LD_INT 1
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 0
50622: PUSH
50623: LD_INT 1
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 1
50632: NEG
50633: PUSH
50634: LD_INT 0
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 1
50643: NEG
50644: PUSH
50645: LD_INT 1
50647: NEG
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 1
50655: NEG
50656: PUSH
50657: LD_INT 2
50659: NEG
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 2
50667: PUSH
50668: LD_INT 1
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 2
50677: PUSH
50678: LD_INT 2
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 1
50687: PUSH
50688: LD_INT 2
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: LD_INT 2
50697: NEG
50698: PUSH
50699: LD_INT 1
50701: NEG
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 2
50709: NEG
50710: PUSH
50711: LD_INT 2
50713: NEG
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 3
50721: PUSH
50722: LD_INT 2
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 3
50731: PUSH
50732: LD_INT 3
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 2
50741: PUSH
50742: LD_INT 3
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50767: LD_ADDR_VAR 0 17
50771: PUSH
50772: LD_INT 0
50774: PUSH
50775: LD_INT 0
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 0
50784: PUSH
50785: LD_INT 1
50787: NEG
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 1
50795: PUSH
50796: LD_INT 0
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 1
50805: PUSH
50806: LD_INT 1
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 0
50815: PUSH
50816: LD_INT 1
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 1
50825: NEG
50826: PUSH
50827: LD_INT 0
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 1
50836: NEG
50837: PUSH
50838: LD_INT 1
50840: NEG
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 1
50848: NEG
50849: PUSH
50850: LD_INT 2
50852: NEG
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: LD_INT 0
50860: PUSH
50861: LD_INT 2
50863: NEG
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 1
50871: PUSH
50872: LD_INT 1
50874: NEG
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 2
50882: PUSH
50883: LD_INT 0
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 2
50892: PUSH
50893: LD_INT 1
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 2
50902: PUSH
50903: LD_INT 2
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 1
50912: PUSH
50913: LD_INT 2
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 0
50922: PUSH
50923: LD_INT 2
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 1
50932: NEG
50933: PUSH
50934: LD_INT 1
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 2
50943: NEG
50944: PUSH
50945: LD_INT 0
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 2
50954: NEG
50955: PUSH
50956: LD_INT 1
50958: NEG
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 2
50966: NEG
50967: PUSH
50968: LD_INT 2
50970: NEG
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50997: LD_ADDR_VAR 0 18
51001: PUSH
51002: LD_INT 0
51004: PUSH
51005: LD_INT 0
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 0
51014: PUSH
51015: LD_INT 1
51017: NEG
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 1
51025: PUSH
51026: LD_INT 0
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 1
51035: PUSH
51036: LD_INT 1
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 0
51045: PUSH
51046: LD_INT 1
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 1
51055: NEG
51056: PUSH
51057: LD_INT 0
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 1
51066: NEG
51067: PUSH
51068: LD_INT 1
51070: NEG
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 1
51078: NEG
51079: PUSH
51080: LD_INT 2
51082: NEG
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 0
51090: PUSH
51091: LD_INT 2
51093: NEG
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 1
51101: PUSH
51102: LD_INT 1
51104: NEG
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 2
51112: PUSH
51113: LD_INT 0
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 2
51122: PUSH
51123: LD_INT 1
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 2
51132: PUSH
51133: LD_INT 2
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 1
51142: PUSH
51143: LD_INT 2
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 0
51152: PUSH
51153: LD_INT 2
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 1
51162: NEG
51163: PUSH
51164: LD_INT 1
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 2
51173: NEG
51174: PUSH
51175: LD_INT 0
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 2
51184: NEG
51185: PUSH
51186: LD_INT 1
51188: NEG
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 2
51196: NEG
51197: PUSH
51198: LD_INT 2
51200: NEG
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51227: LD_ADDR_VAR 0 19
51231: PUSH
51232: LD_INT 0
51234: PUSH
51235: LD_INT 0
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 0
51244: PUSH
51245: LD_INT 1
51247: NEG
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 1
51255: PUSH
51256: LD_INT 0
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 1
51265: PUSH
51266: LD_INT 1
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 0
51275: PUSH
51276: LD_INT 1
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 1
51285: NEG
51286: PUSH
51287: LD_INT 0
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 1
51296: NEG
51297: PUSH
51298: LD_INT 1
51300: NEG
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 1
51308: NEG
51309: PUSH
51310: LD_INT 2
51312: NEG
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 0
51320: PUSH
51321: LD_INT 2
51323: NEG
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 1
51331: PUSH
51332: LD_INT 1
51334: NEG
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 2
51342: PUSH
51343: LD_INT 0
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 2
51352: PUSH
51353: LD_INT 1
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 2
51362: PUSH
51363: LD_INT 2
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 1
51372: PUSH
51373: LD_INT 2
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 0
51382: PUSH
51383: LD_INT 2
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 1
51392: NEG
51393: PUSH
51394: LD_INT 1
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 2
51403: NEG
51404: PUSH
51405: LD_INT 0
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 2
51414: NEG
51415: PUSH
51416: LD_INT 1
51418: NEG
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 2
51426: NEG
51427: PUSH
51428: LD_INT 2
51430: NEG
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51457: LD_ADDR_VAR 0 20
51461: PUSH
51462: LD_INT 0
51464: PUSH
51465: LD_INT 0
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 0
51474: PUSH
51475: LD_INT 1
51477: NEG
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 1
51485: PUSH
51486: LD_INT 0
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 1
51495: PUSH
51496: LD_INT 1
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 0
51505: PUSH
51506: LD_INT 1
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 1
51515: NEG
51516: PUSH
51517: LD_INT 0
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 1
51526: NEG
51527: PUSH
51528: LD_INT 1
51530: NEG
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 1
51538: NEG
51539: PUSH
51540: LD_INT 2
51542: NEG
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 0
51550: PUSH
51551: LD_INT 2
51553: NEG
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 1
51561: PUSH
51562: LD_INT 1
51564: NEG
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 2
51572: PUSH
51573: LD_INT 0
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 2
51582: PUSH
51583: LD_INT 1
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 2
51592: PUSH
51593: LD_INT 2
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 1
51602: PUSH
51603: LD_INT 2
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 0
51612: PUSH
51613: LD_INT 2
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 1
51622: NEG
51623: PUSH
51624: LD_INT 1
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 2
51633: NEG
51634: PUSH
51635: LD_INT 0
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 2
51644: NEG
51645: PUSH
51646: LD_INT 1
51648: NEG
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 2
51656: NEG
51657: PUSH
51658: LD_INT 2
51660: NEG
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: LIST
51684: LIST
51685: LIST
51686: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51687: LD_ADDR_VAR 0 21
51691: PUSH
51692: LD_INT 0
51694: PUSH
51695: LD_INT 0
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 0
51704: PUSH
51705: LD_INT 1
51707: NEG
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 1
51715: PUSH
51716: LD_INT 0
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 1
51725: PUSH
51726: LD_INT 1
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 0
51735: PUSH
51736: LD_INT 1
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 1
51745: NEG
51746: PUSH
51747: LD_INT 0
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 1
51756: NEG
51757: PUSH
51758: LD_INT 1
51760: NEG
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 1
51768: NEG
51769: PUSH
51770: LD_INT 2
51772: NEG
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 0
51780: PUSH
51781: LD_INT 2
51783: NEG
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 1
51791: PUSH
51792: LD_INT 1
51794: NEG
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 2
51802: PUSH
51803: LD_INT 0
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 2
51812: PUSH
51813: LD_INT 1
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 2
51822: PUSH
51823: LD_INT 2
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 1
51832: PUSH
51833: LD_INT 2
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 0
51842: PUSH
51843: LD_INT 2
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 1
51852: NEG
51853: PUSH
51854: LD_INT 1
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 2
51863: NEG
51864: PUSH
51865: LD_INT 0
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 2
51874: NEG
51875: PUSH
51876: LD_INT 1
51878: NEG
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 2
51886: NEG
51887: PUSH
51888: LD_INT 2
51890: NEG
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51917: LD_ADDR_VAR 0 22
51921: PUSH
51922: LD_INT 0
51924: PUSH
51925: LD_INT 0
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 0
51934: PUSH
51935: LD_INT 1
51937: NEG
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 1
51945: PUSH
51946: LD_INT 0
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 1
51955: PUSH
51956: LD_INT 1
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 0
51965: PUSH
51966: LD_INT 1
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 1
51975: NEG
51976: PUSH
51977: LD_INT 0
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 1
51986: NEG
51987: PUSH
51988: LD_INT 1
51990: NEG
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 1
51998: NEG
51999: PUSH
52000: LD_INT 2
52002: NEG
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 0
52010: PUSH
52011: LD_INT 2
52013: NEG
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 1
52021: PUSH
52022: LD_INT 1
52024: NEG
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 2
52032: PUSH
52033: LD_INT 0
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 2
52042: PUSH
52043: LD_INT 1
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 2
52052: PUSH
52053: LD_INT 2
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 1
52062: PUSH
52063: LD_INT 2
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 0
52072: PUSH
52073: LD_INT 2
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 1
52082: NEG
52083: PUSH
52084: LD_INT 1
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 2
52093: NEG
52094: PUSH
52095: LD_INT 0
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 2
52104: NEG
52105: PUSH
52106: LD_INT 1
52108: NEG
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 2
52116: NEG
52117: PUSH
52118: LD_INT 2
52120: NEG
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52147: LD_ADDR_VAR 0 23
52151: PUSH
52152: LD_INT 0
52154: PUSH
52155: LD_INT 0
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 0
52164: PUSH
52165: LD_INT 1
52167: NEG
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 1
52175: PUSH
52176: LD_INT 0
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 1
52185: PUSH
52186: LD_INT 1
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 0
52195: PUSH
52196: LD_INT 1
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 1
52205: NEG
52206: PUSH
52207: LD_INT 0
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 1
52216: NEG
52217: PUSH
52218: LD_INT 1
52220: NEG
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 1
52228: NEG
52229: PUSH
52230: LD_INT 2
52232: NEG
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 0
52240: PUSH
52241: LD_INT 2
52243: NEG
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 1
52251: PUSH
52252: LD_INT 1
52254: NEG
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 2
52262: PUSH
52263: LD_INT 0
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 2
52272: PUSH
52273: LD_INT 1
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 2
52282: PUSH
52283: LD_INT 2
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 1
52292: PUSH
52293: LD_INT 2
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 0
52302: PUSH
52303: LD_INT 2
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 1
52312: NEG
52313: PUSH
52314: LD_INT 1
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 2
52323: NEG
52324: PUSH
52325: LD_INT 0
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 2
52334: NEG
52335: PUSH
52336: LD_INT 1
52338: NEG
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 2
52346: NEG
52347: PUSH
52348: LD_INT 2
52350: NEG
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 2
52358: NEG
52359: PUSH
52360: LD_INT 3
52362: NEG
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 1
52370: NEG
52371: PUSH
52372: LD_INT 3
52374: NEG
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 1
52382: PUSH
52383: LD_INT 2
52385: NEG
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 2
52393: PUSH
52394: LD_INT 1
52396: NEG
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
52427: LD_ADDR_VAR 0 24
52431: PUSH
52432: LD_INT 0
52434: PUSH
52435: LD_INT 0
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 0
52444: PUSH
52445: LD_INT 1
52447: NEG
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 1
52455: PUSH
52456: LD_INT 0
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 1
52465: PUSH
52466: LD_INT 1
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 0
52475: PUSH
52476: LD_INT 1
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 1
52485: NEG
52486: PUSH
52487: LD_INT 0
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 1
52496: NEG
52497: PUSH
52498: LD_INT 1
52500: NEG
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 1
52508: NEG
52509: PUSH
52510: LD_INT 2
52512: NEG
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 0
52520: PUSH
52521: LD_INT 2
52523: NEG
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 1
52531: PUSH
52532: LD_INT 1
52534: NEG
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 2
52542: PUSH
52543: LD_INT 0
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 2
52552: PUSH
52553: LD_INT 1
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 2
52562: PUSH
52563: LD_INT 2
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 1
52572: PUSH
52573: LD_INT 2
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 0
52582: PUSH
52583: LD_INT 2
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 1
52592: NEG
52593: PUSH
52594: LD_INT 1
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 2
52603: NEG
52604: PUSH
52605: LD_INT 0
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 2
52614: NEG
52615: PUSH
52616: LD_INT 1
52618: NEG
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 2
52626: NEG
52627: PUSH
52628: LD_INT 2
52630: NEG
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 1
52638: PUSH
52639: LD_INT 2
52641: NEG
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 2
52649: PUSH
52650: LD_INT 1
52652: NEG
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 3
52660: PUSH
52661: LD_INT 1
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 3
52670: PUSH
52671: LD_INT 2
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
52703: LD_ADDR_VAR 0 25
52707: PUSH
52708: LD_INT 0
52710: PUSH
52711: LD_INT 0
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 0
52720: PUSH
52721: LD_INT 1
52723: NEG
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 1
52731: PUSH
52732: LD_INT 0
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 1
52741: PUSH
52742: LD_INT 1
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 0
52751: PUSH
52752: LD_INT 1
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 1
52761: NEG
52762: PUSH
52763: LD_INT 0
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 1
52772: NEG
52773: PUSH
52774: LD_INT 1
52776: NEG
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 1
52784: NEG
52785: PUSH
52786: LD_INT 2
52788: NEG
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 0
52796: PUSH
52797: LD_INT 2
52799: NEG
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 1
52807: PUSH
52808: LD_INT 1
52810: NEG
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 2
52818: PUSH
52819: LD_INT 0
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 2
52828: PUSH
52829: LD_INT 1
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 2
52838: PUSH
52839: LD_INT 2
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 1
52848: PUSH
52849: LD_INT 2
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 0
52858: PUSH
52859: LD_INT 2
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 1
52868: NEG
52869: PUSH
52870: LD_INT 1
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 2
52879: NEG
52880: PUSH
52881: LD_INT 0
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 2
52890: NEG
52891: PUSH
52892: LD_INT 1
52894: NEG
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 2
52902: NEG
52903: PUSH
52904: LD_INT 2
52906: NEG
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 3
52914: PUSH
52915: LD_INT 1
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 3
52924: PUSH
52925: LD_INT 2
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 2
52934: PUSH
52935: LD_INT 3
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 1
52944: PUSH
52945: LD_INT 3
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52977: LD_ADDR_VAR 0 26
52981: PUSH
52982: LD_INT 0
52984: PUSH
52985: LD_INT 0
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 0
52994: PUSH
52995: LD_INT 1
52997: NEG
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 1
53005: PUSH
53006: LD_INT 0
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 1
53015: PUSH
53016: LD_INT 1
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 0
53025: PUSH
53026: LD_INT 1
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 1
53035: NEG
53036: PUSH
53037: LD_INT 0
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 1
53046: NEG
53047: PUSH
53048: LD_INT 1
53050: NEG
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 1
53058: NEG
53059: PUSH
53060: LD_INT 2
53062: NEG
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 0
53070: PUSH
53071: LD_INT 2
53073: NEG
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 1
53081: PUSH
53082: LD_INT 1
53084: NEG
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 2
53092: PUSH
53093: LD_INT 0
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 2
53102: PUSH
53103: LD_INT 1
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 2
53112: PUSH
53113: LD_INT 2
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 1
53122: PUSH
53123: LD_INT 2
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: LD_INT 0
53132: PUSH
53133: LD_INT 2
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 1
53142: NEG
53143: PUSH
53144: LD_INT 1
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: LD_INT 2
53153: NEG
53154: PUSH
53155: LD_INT 0
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 2
53164: NEG
53165: PUSH
53166: LD_INT 1
53168: NEG
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 2
53176: NEG
53177: PUSH
53178: LD_INT 2
53180: NEG
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_INT 2
53188: PUSH
53189: LD_INT 3
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: PUSH
53196: LD_INT 1
53198: PUSH
53199: LD_INT 3
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 1
53208: NEG
53209: PUSH
53210: LD_INT 2
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 2
53219: NEG
53220: PUSH
53221: LD_INT 1
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53253: LD_ADDR_VAR 0 27
53257: PUSH
53258: LD_INT 0
53260: PUSH
53261: LD_INT 0
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 0
53270: PUSH
53271: LD_INT 1
53273: NEG
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 1
53281: PUSH
53282: LD_INT 0
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 1
53291: PUSH
53292: LD_INT 1
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 0
53301: PUSH
53302: LD_INT 1
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 1
53311: NEG
53312: PUSH
53313: LD_INT 0
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 1
53322: NEG
53323: PUSH
53324: LD_INT 1
53326: NEG
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 1
53334: NEG
53335: PUSH
53336: LD_INT 2
53338: NEG
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 0
53346: PUSH
53347: LD_INT 2
53349: NEG
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 1
53357: PUSH
53358: LD_INT 1
53360: NEG
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 2
53368: PUSH
53369: LD_INT 0
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 2
53378: PUSH
53379: LD_INT 1
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 2
53388: PUSH
53389: LD_INT 2
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 1
53398: PUSH
53399: LD_INT 2
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 0
53408: PUSH
53409: LD_INT 2
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 1
53418: NEG
53419: PUSH
53420: LD_INT 1
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 2
53429: NEG
53430: PUSH
53431: LD_INT 0
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 2
53440: NEG
53441: PUSH
53442: LD_INT 1
53444: NEG
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 2
53452: NEG
53453: PUSH
53454: LD_INT 2
53456: NEG
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 1
53464: NEG
53465: PUSH
53466: LD_INT 2
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 2
53475: NEG
53476: PUSH
53477: LD_INT 1
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 3
53486: NEG
53487: PUSH
53488: LD_INT 1
53490: NEG
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 3
53498: NEG
53499: PUSH
53500: LD_INT 2
53502: NEG
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53533: LD_ADDR_VAR 0 28
53537: PUSH
53538: LD_INT 0
53540: PUSH
53541: LD_INT 0
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 0
53550: PUSH
53551: LD_INT 1
53553: NEG
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 1
53561: PUSH
53562: LD_INT 0
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 1
53571: PUSH
53572: LD_INT 1
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 0
53581: PUSH
53582: LD_INT 1
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 1
53591: NEG
53592: PUSH
53593: LD_INT 0
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 1
53602: NEG
53603: PUSH
53604: LD_INT 1
53606: NEG
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 1
53614: NEG
53615: PUSH
53616: LD_INT 2
53618: NEG
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 0
53626: PUSH
53627: LD_INT 2
53629: NEG
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 1
53637: PUSH
53638: LD_INT 1
53640: NEG
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 2
53648: PUSH
53649: LD_INT 0
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 2
53658: PUSH
53659: LD_INT 1
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 2
53668: PUSH
53669: LD_INT 2
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 1
53678: PUSH
53679: LD_INT 2
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 0
53688: PUSH
53689: LD_INT 2
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 1
53698: NEG
53699: PUSH
53700: LD_INT 1
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 2
53709: NEG
53710: PUSH
53711: LD_INT 0
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 2
53720: NEG
53721: PUSH
53722: LD_INT 1
53724: NEG
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 2
53732: NEG
53733: PUSH
53734: LD_INT 2
53736: NEG
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 2
53744: NEG
53745: PUSH
53746: LD_INT 3
53748: NEG
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 1
53756: NEG
53757: PUSH
53758: LD_INT 3
53760: NEG
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 3
53768: NEG
53769: PUSH
53770: LD_INT 1
53772: NEG
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 3
53780: NEG
53781: PUSH
53782: LD_INT 2
53784: NEG
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53815: LD_ADDR_VAR 0 29
53819: PUSH
53820: LD_INT 0
53822: PUSH
53823: LD_INT 0
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 0
53832: PUSH
53833: LD_INT 1
53835: NEG
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: LD_INT 1
53843: PUSH
53844: LD_INT 0
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 1
53853: PUSH
53854: LD_INT 1
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 0
53863: PUSH
53864: LD_INT 1
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 1
53873: NEG
53874: PUSH
53875: LD_INT 0
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 1
53884: NEG
53885: PUSH
53886: LD_INT 1
53888: NEG
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 1
53896: NEG
53897: PUSH
53898: LD_INT 2
53900: NEG
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 0
53908: PUSH
53909: LD_INT 2
53911: NEG
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 1
53919: PUSH
53920: LD_INT 1
53922: NEG
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 2
53930: PUSH
53931: LD_INT 0
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 2
53940: PUSH
53941: LD_INT 1
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 1
53950: PUSH
53951: LD_INT 2
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 0
53960: PUSH
53961: LD_INT 2
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 1
53970: NEG
53971: PUSH
53972: LD_INT 1
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 2
53981: NEG
53982: PUSH
53983: LD_INT 1
53985: NEG
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 2
53993: NEG
53994: PUSH
53995: LD_INT 2
53997: NEG
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 2
54005: NEG
54006: PUSH
54007: LD_INT 3
54009: NEG
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 2
54017: PUSH
54018: LD_INT 1
54020: NEG
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 3
54028: PUSH
54029: LD_INT 1
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 1
54038: PUSH
54039: LD_INT 3
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 1
54048: NEG
54049: PUSH
54050: LD_INT 2
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 3
54059: NEG
54060: PUSH
54061: LD_INT 2
54063: NEG
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54094: LD_ADDR_VAR 0 30
54098: PUSH
54099: LD_INT 0
54101: PUSH
54102: LD_INT 0
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 0
54111: PUSH
54112: LD_INT 1
54114: NEG
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 1
54122: PUSH
54123: LD_INT 0
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 1
54132: PUSH
54133: LD_INT 1
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 0
54142: PUSH
54143: LD_INT 1
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 1
54152: NEG
54153: PUSH
54154: LD_INT 0
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 1
54163: NEG
54164: PUSH
54165: LD_INT 1
54167: NEG
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 1
54175: NEG
54176: PUSH
54177: LD_INT 2
54179: NEG
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 0
54187: PUSH
54188: LD_INT 2
54190: NEG
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 1
54198: PUSH
54199: LD_INT 1
54201: NEG
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 2
54209: PUSH
54210: LD_INT 0
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 2
54219: PUSH
54220: LD_INT 1
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 2
54229: PUSH
54230: LD_INT 2
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 1
54239: PUSH
54240: LD_INT 2
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 1
54249: NEG
54250: PUSH
54251: LD_INT 1
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 2
54260: NEG
54261: PUSH
54262: LD_INT 0
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 2
54271: NEG
54272: PUSH
54273: LD_INT 1
54275: NEG
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 1
54283: NEG
54284: PUSH
54285: LD_INT 3
54287: NEG
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 1
54295: PUSH
54296: LD_INT 2
54298: NEG
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 3
54306: PUSH
54307: LD_INT 2
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: LD_INT 2
54316: PUSH
54317: LD_INT 3
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 2
54326: NEG
54327: PUSH
54328: LD_INT 1
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 3
54337: NEG
54338: PUSH
54339: LD_INT 1
54341: NEG
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54372: LD_ADDR_VAR 0 31
54376: PUSH
54377: LD_INT 0
54379: PUSH
54380: LD_INT 0
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 0
54389: PUSH
54390: LD_INT 1
54392: NEG
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 1
54400: PUSH
54401: LD_INT 0
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 1
54410: PUSH
54411: LD_INT 1
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 0
54420: PUSH
54421: LD_INT 1
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 1
54430: NEG
54431: PUSH
54432: LD_INT 0
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 1
54441: NEG
54442: PUSH
54443: LD_INT 1
54445: NEG
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 1
54453: NEG
54454: PUSH
54455: LD_INT 2
54457: NEG
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 1
54465: PUSH
54466: LD_INT 1
54468: NEG
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 2
54476: PUSH
54477: LD_INT 0
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 2
54486: PUSH
54487: LD_INT 1
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 2
54496: PUSH
54497: LD_INT 2
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 1
54506: PUSH
54507: LD_INT 2
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 0
54516: PUSH
54517: LD_INT 2
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 1
54526: NEG
54527: PUSH
54528: LD_INT 1
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 2
54537: NEG
54538: PUSH
54539: LD_INT 1
54541: NEG
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 2
54549: NEG
54550: PUSH
54551: LD_INT 2
54553: NEG
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 2
54561: NEG
54562: PUSH
54563: LD_INT 3
54565: NEG
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 2
54573: PUSH
54574: LD_INT 1
54576: NEG
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 3
54584: PUSH
54585: LD_INT 1
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 1
54594: PUSH
54595: LD_INT 3
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 1
54604: NEG
54605: PUSH
54606: LD_INT 2
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 3
54615: NEG
54616: PUSH
54617: LD_INT 2
54619: NEG
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54650: LD_ADDR_VAR 0 32
54654: PUSH
54655: LD_INT 0
54657: PUSH
54658: LD_INT 0
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 0
54667: PUSH
54668: LD_INT 1
54670: NEG
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 1
54678: PUSH
54679: LD_INT 0
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 1
54688: PUSH
54689: LD_INT 1
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 0
54698: PUSH
54699: LD_INT 1
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 1
54708: NEG
54709: PUSH
54710: LD_INT 0
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 1
54719: NEG
54720: PUSH
54721: LD_INT 1
54723: NEG
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 1
54731: NEG
54732: PUSH
54733: LD_INT 2
54735: NEG
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 0
54743: PUSH
54744: LD_INT 2
54746: NEG
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 1
54754: PUSH
54755: LD_INT 1
54757: NEG
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 2
54765: PUSH
54766: LD_INT 1
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 2
54775: PUSH
54776: LD_INT 2
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 1
54785: PUSH
54786: LD_INT 2
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 0
54795: PUSH
54796: LD_INT 2
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 1
54805: NEG
54806: PUSH
54807: LD_INT 1
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 2
54816: NEG
54817: PUSH
54818: LD_INT 0
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 2
54827: NEG
54828: PUSH
54829: LD_INT 1
54831: NEG
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 1
54839: NEG
54840: PUSH
54841: LD_INT 3
54843: NEG
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 1
54851: PUSH
54852: LD_INT 2
54854: NEG
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 3
54862: PUSH
54863: LD_INT 2
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 2
54872: PUSH
54873: LD_INT 3
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 2
54882: NEG
54883: PUSH
54884: LD_INT 1
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 3
54893: NEG
54894: PUSH
54895: LD_INT 1
54897: NEG
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54928: LD_ADDR_VAR 0 33
54932: PUSH
54933: LD_INT 0
54935: PUSH
54936: LD_INT 0
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 0
54945: PUSH
54946: LD_INT 1
54948: NEG
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 1
54956: PUSH
54957: LD_INT 0
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 1
54966: PUSH
54967: LD_INT 1
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 0
54976: PUSH
54977: LD_INT 1
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 1
54986: NEG
54987: PUSH
54988: LD_INT 0
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 1
54997: NEG
54998: PUSH
54999: LD_INT 1
55001: NEG
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 1
55009: NEG
55010: PUSH
55011: LD_INT 2
55013: NEG
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 1
55021: PUSH
55022: LD_INT 1
55024: NEG
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 2
55032: PUSH
55033: LD_INT 0
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 2
55042: PUSH
55043: LD_INT 1
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 1
55052: PUSH
55053: LD_INT 2
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 0
55062: PUSH
55063: LD_INT 2
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 1
55072: NEG
55073: PUSH
55074: LD_INT 1
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 2
55083: NEG
55084: PUSH
55085: LD_INT 0
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 2
55094: NEG
55095: PUSH
55096: LD_INT 1
55098: NEG
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 2
55106: NEG
55107: PUSH
55108: LD_INT 2
55110: NEG
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 2
55118: NEG
55119: PUSH
55120: LD_INT 3
55122: NEG
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 2
55130: PUSH
55131: LD_INT 1
55133: NEG
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 3
55141: PUSH
55142: LD_INT 1
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 1
55151: PUSH
55152: LD_INT 3
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 1
55161: NEG
55162: PUSH
55163: LD_INT 2
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 3
55172: NEG
55173: PUSH
55174: LD_INT 2
55176: NEG
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55207: LD_ADDR_VAR 0 34
55211: PUSH
55212: LD_INT 0
55214: PUSH
55215: LD_INT 0
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 0
55224: PUSH
55225: LD_INT 1
55227: NEG
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 1
55235: PUSH
55236: LD_INT 0
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 1
55245: PUSH
55246: LD_INT 1
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 0
55255: PUSH
55256: LD_INT 1
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 1
55265: NEG
55266: PUSH
55267: LD_INT 0
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 1
55276: NEG
55277: PUSH
55278: LD_INT 1
55280: NEG
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 1
55288: NEG
55289: PUSH
55290: LD_INT 2
55292: NEG
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 0
55300: PUSH
55301: LD_INT 2
55303: NEG
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 1
55311: PUSH
55312: LD_INT 1
55314: NEG
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 2
55322: PUSH
55323: LD_INT 1
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 2
55332: PUSH
55333: LD_INT 2
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 1
55342: PUSH
55343: LD_INT 2
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 1
55352: NEG
55353: PUSH
55354: LD_INT 1
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 2
55363: NEG
55364: PUSH
55365: LD_INT 0
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 2
55374: NEG
55375: PUSH
55376: LD_INT 1
55378: NEG
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 2
55386: NEG
55387: PUSH
55388: LD_INT 2
55390: NEG
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 1
55398: NEG
55399: PUSH
55400: LD_INT 3
55402: NEG
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 1
55410: PUSH
55411: LD_INT 2
55413: NEG
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 3
55421: PUSH
55422: LD_INT 2
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 2
55431: PUSH
55432: LD_INT 3
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 2
55441: NEG
55442: PUSH
55443: LD_INT 1
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 3
55452: NEG
55453: PUSH
55454: LD_INT 1
55456: NEG
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55487: LD_ADDR_VAR 0 35
55491: PUSH
55492: LD_INT 0
55494: PUSH
55495: LD_INT 0
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 0
55504: PUSH
55505: LD_INT 1
55507: NEG
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 1
55515: PUSH
55516: LD_INT 0
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 1
55525: PUSH
55526: LD_INT 1
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 0
55535: PUSH
55536: LD_INT 1
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 1
55545: NEG
55546: PUSH
55547: LD_INT 0
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: LD_INT 1
55556: NEG
55557: PUSH
55558: LD_INT 1
55560: NEG
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 2
55568: PUSH
55569: LD_INT 1
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 2
55578: NEG
55579: PUSH
55580: LD_INT 1
55582: NEG
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55599: LD_ADDR_VAR 0 36
55603: PUSH
55604: LD_INT 0
55606: PUSH
55607: LD_INT 0
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 0
55616: PUSH
55617: LD_INT 1
55619: NEG
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 1
55627: PUSH
55628: LD_INT 0
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 1
55637: PUSH
55638: LD_INT 1
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 0
55647: PUSH
55648: LD_INT 1
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 1
55657: NEG
55658: PUSH
55659: LD_INT 0
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 1
55668: NEG
55669: PUSH
55670: LD_INT 1
55672: NEG
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 1
55680: NEG
55681: PUSH
55682: LD_INT 2
55684: NEG
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 1
55692: PUSH
55693: LD_INT 2
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55711: LD_ADDR_VAR 0 37
55715: PUSH
55716: LD_INT 0
55718: PUSH
55719: LD_INT 0
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 0
55728: PUSH
55729: LD_INT 1
55731: NEG
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 1
55739: PUSH
55740: LD_INT 0
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 1
55749: PUSH
55750: LD_INT 1
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 0
55759: PUSH
55760: LD_INT 1
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 1
55769: NEG
55770: PUSH
55771: LD_INT 0
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 1
55780: NEG
55781: PUSH
55782: LD_INT 1
55784: NEG
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 1
55792: PUSH
55793: LD_INT 1
55795: NEG
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 1
55803: NEG
55804: PUSH
55805: LD_INT 1
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55823: LD_ADDR_VAR 0 38
55827: PUSH
55828: LD_INT 0
55830: PUSH
55831: LD_INT 0
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 0
55840: PUSH
55841: LD_INT 1
55843: NEG
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 1
55851: PUSH
55852: LD_INT 0
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 1
55861: PUSH
55862: LD_INT 1
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 0
55871: PUSH
55872: LD_INT 1
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 1
55881: NEG
55882: PUSH
55883: LD_INT 0
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 1
55892: NEG
55893: PUSH
55894: LD_INT 1
55896: NEG
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 2
55904: PUSH
55905: LD_INT 1
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 2
55914: NEG
55915: PUSH
55916: LD_INT 1
55918: NEG
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55935: LD_ADDR_VAR 0 39
55939: PUSH
55940: LD_INT 0
55942: PUSH
55943: LD_INT 0
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 0
55952: PUSH
55953: LD_INT 1
55955: NEG
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 1
55963: PUSH
55964: LD_INT 0
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 1
55973: PUSH
55974: LD_INT 1
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 0
55983: PUSH
55984: LD_INT 1
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 1
55993: NEG
55994: PUSH
55995: LD_INT 0
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 1
56004: NEG
56005: PUSH
56006: LD_INT 1
56008: NEG
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 1
56016: NEG
56017: PUSH
56018: LD_INT 2
56020: NEG
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 1
56028: PUSH
56029: LD_INT 2
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56047: LD_ADDR_VAR 0 40
56051: PUSH
56052: LD_INT 0
56054: PUSH
56055: LD_INT 0
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 0
56064: PUSH
56065: LD_INT 1
56067: NEG
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 1
56075: PUSH
56076: LD_INT 0
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 1
56085: PUSH
56086: LD_INT 1
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 0
56095: PUSH
56096: LD_INT 1
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 1
56105: NEG
56106: PUSH
56107: LD_INT 0
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 1
56116: NEG
56117: PUSH
56118: LD_INT 1
56120: NEG
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 1
56128: PUSH
56129: LD_INT 1
56131: NEG
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 1
56139: NEG
56140: PUSH
56141: LD_INT 1
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: LIST
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56159: LD_ADDR_VAR 0 41
56163: PUSH
56164: LD_INT 0
56166: PUSH
56167: LD_INT 0
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 0
56176: PUSH
56177: LD_INT 1
56179: NEG
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 1
56187: PUSH
56188: LD_INT 0
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 1
56197: PUSH
56198: LD_INT 1
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 0
56207: PUSH
56208: LD_INT 1
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 1
56217: NEG
56218: PUSH
56219: LD_INT 0
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: LD_INT 1
56228: NEG
56229: PUSH
56230: LD_INT 1
56232: NEG
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 1
56240: NEG
56241: PUSH
56242: LD_INT 2
56244: NEG
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 1
56252: PUSH
56253: LD_INT 1
56255: NEG
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 2
56263: PUSH
56264: LD_INT 0
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 2
56273: PUSH
56274: LD_INT 1
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: PUSH
56281: LD_INT 2
56283: PUSH
56284: LD_INT 2
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 1
56293: PUSH
56294: LD_INT 2
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 1
56303: NEG
56304: PUSH
56305: LD_INT 1
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 2
56314: NEG
56315: PUSH
56316: LD_INT 0
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 2
56325: NEG
56326: PUSH
56327: LD_INT 1
56329: NEG
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 2
56337: NEG
56338: PUSH
56339: LD_INT 2
56341: NEG
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 2
56349: NEG
56350: PUSH
56351: LD_INT 3
56353: NEG
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 2
56361: PUSH
56362: LD_INT 1
56364: NEG
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 3
56372: PUSH
56373: LD_INT 0
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 3
56382: PUSH
56383: LD_INT 1
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 3
56392: PUSH
56393: LD_INT 2
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 3
56402: PUSH
56403: LD_INT 3
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 2
56412: PUSH
56413: LD_INT 3
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 2
56422: NEG
56423: PUSH
56424: LD_INT 1
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 3
56433: NEG
56434: PUSH
56435: LD_INT 0
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 3
56444: NEG
56445: PUSH
56446: LD_INT 1
56448: NEG
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 3
56456: NEG
56457: PUSH
56458: LD_INT 2
56460: NEG
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 3
56468: NEG
56469: PUSH
56470: LD_INT 3
56472: NEG
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56509: LD_ADDR_VAR 0 42
56513: PUSH
56514: LD_INT 0
56516: PUSH
56517: LD_INT 0
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 0
56526: PUSH
56527: LD_INT 1
56529: NEG
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 1
56537: PUSH
56538: LD_INT 0
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 1
56547: PUSH
56548: LD_INT 1
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 0
56557: PUSH
56558: LD_INT 1
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 1
56567: NEG
56568: PUSH
56569: LD_INT 0
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 1
56578: NEG
56579: PUSH
56580: LD_INT 1
56582: NEG
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 1
56590: NEG
56591: PUSH
56592: LD_INT 2
56594: NEG
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 0
56602: PUSH
56603: LD_INT 2
56605: NEG
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 1
56613: PUSH
56614: LD_INT 1
56616: NEG
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 2
56624: PUSH
56625: LD_INT 1
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 2
56634: PUSH
56635: LD_INT 2
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 1
56644: PUSH
56645: LD_INT 2
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 0
56654: PUSH
56655: LD_INT 2
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 1
56664: NEG
56665: PUSH
56666: LD_INT 1
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 2
56675: NEG
56676: PUSH
56677: LD_INT 1
56679: NEG
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 2
56687: NEG
56688: PUSH
56689: LD_INT 2
56691: NEG
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 2
56699: NEG
56700: PUSH
56701: LD_INT 3
56703: NEG
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 1
56711: NEG
56712: PUSH
56713: LD_INT 3
56715: NEG
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 0
56723: PUSH
56724: LD_INT 3
56726: NEG
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 1
56734: PUSH
56735: LD_INT 2
56737: NEG
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 3
56745: PUSH
56746: LD_INT 2
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 3
56755: PUSH
56756: LD_INT 3
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 2
56765: PUSH
56766: LD_INT 3
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 1
56775: PUSH
56776: LD_INT 3
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 0
56785: PUSH
56786: LD_INT 3
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 1
56795: NEG
56796: PUSH
56797: LD_INT 2
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 3
56806: NEG
56807: PUSH
56808: LD_INT 2
56810: NEG
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 3
56818: NEG
56819: PUSH
56820: LD_INT 3
56822: NEG
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56859: LD_ADDR_VAR 0 43
56863: PUSH
56864: LD_INT 0
56866: PUSH
56867: LD_INT 0
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 0
56876: PUSH
56877: LD_INT 1
56879: NEG
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 1
56887: PUSH
56888: LD_INT 0
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 1
56897: PUSH
56898: LD_INT 1
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 0
56907: PUSH
56908: LD_INT 1
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 1
56917: NEG
56918: PUSH
56919: LD_INT 0
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 1
56928: NEG
56929: PUSH
56930: LD_INT 1
56932: NEG
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 1
56940: NEG
56941: PUSH
56942: LD_INT 2
56944: NEG
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 0
56952: PUSH
56953: LD_INT 2
56955: NEG
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 1
56963: PUSH
56964: LD_INT 1
56966: NEG
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 2
56974: PUSH
56975: LD_INT 0
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 2
56984: PUSH
56985: LD_INT 1
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 1
56994: PUSH
56995: LD_INT 2
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 0
57004: PUSH
57005: LD_INT 2
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 1
57014: NEG
57015: PUSH
57016: LD_INT 1
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 2
57025: NEG
57026: PUSH
57027: LD_INT 0
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 2
57036: NEG
57037: PUSH
57038: LD_INT 1
57040: NEG
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 1
57048: NEG
57049: PUSH
57050: LD_INT 3
57052: NEG
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 0
57060: PUSH
57061: LD_INT 3
57063: NEG
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 1
57071: PUSH
57072: LD_INT 2
57074: NEG
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PUSH
57080: LD_INT 2
57082: PUSH
57083: LD_INT 1
57085: NEG
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 3
57093: PUSH
57094: LD_INT 0
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 3
57103: PUSH
57104: LD_INT 1
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 1
57113: PUSH
57114: LD_INT 3
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 0
57123: PUSH
57124: LD_INT 3
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 1
57133: NEG
57134: PUSH
57135: LD_INT 2
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 2
57144: NEG
57145: PUSH
57146: LD_INT 1
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 3
57155: NEG
57156: PUSH
57157: LD_INT 0
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 3
57166: NEG
57167: PUSH
57168: LD_INT 1
57170: NEG
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: LIST
57182: LIST
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57207: LD_ADDR_VAR 0 44
57211: PUSH
57212: LD_INT 0
57214: PUSH
57215: LD_INT 0
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 0
57224: PUSH
57225: LD_INT 1
57227: NEG
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 1
57235: PUSH
57236: LD_INT 0
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 1
57245: PUSH
57246: LD_INT 1
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 0
57255: PUSH
57256: LD_INT 1
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 1
57265: NEG
57266: PUSH
57267: LD_INT 0
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: LD_INT 1
57276: NEG
57277: PUSH
57278: LD_INT 1
57280: NEG
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 1
57288: NEG
57289: PUSH
57290: LD_INT 2
57292: NEG
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 1
57300: PUSH
57301: LD_INT 1
57303: NEG
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 2
57311: PUSH
57312: LD_INT 0
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 2
57321: PUSH
57322: LD_INT 1
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: LD_INT 2
57331: PUSH
57332: LD_INT 2
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 1
57341: PUSH
57342: LD_INT 2
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 1
57351: NEG
57352: PUSH
57353: LD_INT 1
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 2
57362: NEG
57363: PUSH
57364: LD_INT 0
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 2
57373: NEG
57374: PUSH
57375: LD_INT 1
57377: NEG
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 2
57385: NEG
57386: PUSH
57387: LD_INT 2
57389: NEG
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 2
57397: NEG
57398: PUSH
57399: LD_INT 3
57401: NEG
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 2
57409: PUSH
57410: LD_INT 1
57412: NEG
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 3
57420: PUSH
57421: LD_INT 0
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 3
57430: PUSH
57431: LD_INT 1
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 3
57440: PUSH
57441: LD_INT 2
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 3
57450: PUSH
57451: LD_INT 3
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 2
57460: PUSH
57461: LD_INT 3
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 2
57470: NEG
57471: PUSH
57472: LD_INT 1
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 3
57481: NEG
57482: PUSH
57483: LD_INT 0
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 3
57492: NEG
57493: PUSH
57494: LD_INT 1
57496: NEG
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 3
57504: NEG
57505: PUSH
57506: LD_INT 2
57508: NEG
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 3
57516: NEG
57517: PUSH
57518: LD_INT 3
57520: NEG
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57557: LD_ADDR_VAR 0 45
57561: PUSH
57562: LD_INT 0
57564: PUSH
57565: LD_INT 0
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 0
57574: PUSH
57575: LD_INT 1
57577: NEG
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 1
57585: PUSH
57586: LD_INT 0
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 1
57595: PUSH
57596: LD_INT 1
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 0
57605: PUSH
57606: LD_INT 1
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 1
57615: NEG
57616: PUSH
57617: LD_INT 0
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 1
57626: NEG
57627: PUSH
57628: LD_INT 1
57630: NEG
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 1
57638: NEG
57639: PUSH
57640: LD_INT 2
57642: NEG
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 0
57650: PUSH
57651: LD_INT 2
57653: NEG
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 1
57661: PUSH
57662: LD_INT 1
57664: NEG
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 2
57672: PUSH
57673: LD_INT 1
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 2
57682: PUSH
57683: LD_INT 2
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 1
57692: PUSH
57693: LD_INT 2
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 0
57702: PUSH
57703: LD_INT 2
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 1
57712: NEG
57713: PUSH
57714: LD_INT 1
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 2
57723: NEG
57724: PUSH
57725: LD_INT 1
57727: NEG
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 2
57735: NEG
57736: PUSH
57737: LD_INT 2
57739: NEG
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 2
57747: NEG
57748: PUSH
57749: LD_INT 3
57751: NEG
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 1
57759: NEG
57760: PUSH
57761: LD_INT 3
57763: NEG
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 0
57771: PUSH
57772: LD_INT 3
57774: NEG
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 1
57782: PUSH
57783: LD_INT 2
57785: NEG
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 3
57793: PUSH
57794: LD_INT 2
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 3
57803: PUSH
57804: LD_INT 3
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 2
57813: PUSH
57814: LD_INT 3
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 1
57823: PUSH
57824: LD_INT 3
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 0
57833: PUSH
57834: LD_INT 3
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 1
57843: NEG
57844: PUSH
57845: LD_INT 2
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 3
57854: NEG
57855: PUSH
57856: LD_INT 2
57858: NEG
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 3
57866: NEG
57867: PUSH
57868: LD_INT 3
57870: NEG
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57907: LD_ADDR_VAR 0 46
57911: PUSH
57912: LD_INT 0
57914: PUSH
57915: LD_INT 0
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 0
57924: PUSH
57925: LD_INT 1
57927: NEG
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 1
57935: PUSH
57936: LD_INT 0
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 1
57945: PUSH
57946: LD_INT 1
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 0
57955: PUSH
57956: LD_INT 1
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 1
57965: NEG
57966: PUSH
57967: LD_INT 0
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 1
57976: NEG
57977: PUSH
57978: LD_INT 1
57980: NEG
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 1
57988: NEG
57989: PUSH
57990: LD_INT 2
57992: NEG
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 0
58000: PUSH
58001: LD_INT 2
58003: NEG
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 1
58011: PUSH
58012: LD_INT 1
58014: NEG
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 2
58022: PUSH
58023: LD_INT 0
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 2
58032: PUSH
58033: LD_INT 1
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 1
58042: PUSH
58043: LD_INT 2
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 0
58052: PUSH
58053: LD_INT 2
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 1
58062: NEG
58063: PUSH
58064: LD_INT 1
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 2
58073: NEG
58074: PUSH
58075: LD_INT 0
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 2
58084: NEG
58085: PUSH
58086: LD_INT 1
58088: NEG
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 1
58096: NEG
58097: PUSH
58098: LD_INT 3
58100: NEG
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: LD_INT 0
58108: PUSH
58109: LD_INT 3
58111: NEG
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 1
58119: PUSH
58120: LD_INT 2
58122: NEG
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 2
58130: PUSH
58131: LD_INT 1
58133: NEG
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 3
58141: PUSH
58142: LD_INT 0
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 3
58151: PUSH
58152: LD_INT 1
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 1
58161: PUSH
58162: LD_INT 3
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 0
58171: PUSH
58172: LD_INT 3
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 1
58181: NEG
58182: PUSH
58183: LD_INT 2
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 2
58192: NEG
58193: PUSH
58194: LD_INT 1
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: LD_INT 3
58203: NEG
58204: PUSH
58205: LD_INT 0
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 3
58214: NEG
58215: PUSH
58216: LD_INT 1
58218: NEG
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: LIST
58251: LIST
58252: LIST
58253: LIST
58254: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58255: LD_ADDR_VAR 0 47
58259: PUSH
58260: LD_INT 0
58262: PUSH
58263: LD_INT 0
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: LD_INT 0
58272: PUSH
58273: LD_INT 1
58275: NEG
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 1
58283: PUSH
58284: LD_INT 0
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 1
58293: PUSH
58294: LD_INT 1
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 0
58303: PUSH
58304: LD_INT 1
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 1
58313: NEG
58314: PUSH
58315: LD_INT 0
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 1
58324: NEG
58325: PUSH
58326: LD_INT 1
58328: NEG
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 1
58336: NEG
58337: PUSH
58338: LD_INT 2
58340: NEG
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 0
58348: PUSH
58349: LD_INT 2
58351: NEG
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 1
58359: PUSH
58360: LD_INT 1
58362: NEG
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 2
58370: NEG
58371: PUSH
58372: LD_INT 1
58374: NEG
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 2
58382: NEG
58383: PUSH
58384: LD_INT 2
58386: NEG
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58406: LD_ADDR_VAR 0 48
58410: PUSH
58411: LD_INT 0
58413: PUSH
58414: LD_INT 0
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 0
58423: PUSH
58424: LD_INT 1
58426: NEG
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 1
58434: PUSH
58435: LD_INT 0
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 1
58444: PUSH
58445: LD_INT 1
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 0
58454: PUSH
58455: LD_INT 1
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 1
58464: NEG
58465: PUSH
58466: LD_INT 0
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: LD_INT 1
58475: NEG
58476: PUSH
58477: LD_INT 1
58479: NEG
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 1
58487: NEG
58488: PUSH
58489: LD_INT 2
58491: NEG
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 0
58499: PUSH
58500: LD_INT 2
58502: NEG
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: LD_INT 1
58510: PUSH
58511: LD_INT 1
58513: NEG
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 2
58521: PUSH
58522: LD_INT 0
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: LD_INT 2
58531: PUSH
58532: LD_INT 1
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58553: LD_ADDR_VAR 0 49
58557: PUSH
58558: LD_INT 0
58560: PUSH
58561: LD_INT 0
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 0
58570: PUSH
58571: LD_INT 1
58573: NEG
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 1
58581: PUSH
58582: LD_INT 0
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 1
58591: PUSH
58592: LD_INT 1
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: LD_INT 0
58601: PUSH
58602: LD_INT 1
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 1
58611: NEG
58612: PUSH
58613: LD_INT 0
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 1
58622: NEG
58623: PUSH
58624: LD_INT 1
58626: NEG
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 1
58634: PUSH
58635: LD_INT 1
58637: NEG
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 2
58645: PUSH
58646: LD_INT 0
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 2
58655: PUSH
58656: LD_INT 1
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 2
58665: PUSH
58666: LD_INT 2
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 1
58675: PUSH
58676: LD_INT 2
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58697: LD_ADDR_VAR 0 50
58701: PUSH
58702: LD_INT 0
58704: PUSH
58705: LD_INT 0
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 0
58714: PUSH
58715: LD_INT 1
58717: NEG
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 1
58725: PUSH
58726: LD_INT 0
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 1
58735: PUSH
58736: LD_INT 1
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 0
58745: PUSH
58746: LD_INT 1
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 1
58755: NEG
58756: PUSH
58757: LD_INT 0
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 1
58766: NEG
58767: PUSH
58768: LD_INT 1
58770: NEG
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 2
58778: PUSH
58779: LD_INT 1
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 2
58788: PUSH
58789: LD_INT 2
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 1
58798: PUSH
58799: LD_INT 2
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 0
58808: PUSH
58809: LD_INT 2
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 1
58818: NEG
58819: PUSH
58820: LD_INT 1
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58841: LD_ADDR_VAR 0 51
58845: PUSH
58846: LD_INT 0
58848: PUSH
58849: LD_INT 0
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 0
58858: PUSH
58859: LD_INT 1
58861: NEG
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 1
58869: PUSH
58870: LD_INT 0
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 1
58879: PUSH
58880: LD_INT 1
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 0
58889: PUSH
58890: LD_INT 1
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 1
58899: NEG
58900: PUSH
58901: LD_INT 0
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 1
58910: NEG
58911: PUSH
58912: LD_INT 1
58914: NEG
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 1
58922: PUSH
58923: LD_INT 2
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: LD_INT 0
58932: PUSH
58933: LD_INT 2
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 1
58942: NEG
58943: PUSH
58944: LD_INT 1
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 2
58953: NEG
58954: PUSH
58955: LD_INT 0
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 2
58964: NEG
58965: PUSH
58966: LD_INT 1
58968: NEG
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58988: LD_ADDR_VAR 0 52
58992: PUSH
58993: LD_INT 0
58995: PUSH
58996: LD_INT 0
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 0
59005: PUSH
59006: LD_INT 1
59008: NEG
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 1
59016: PUSH
59017: LD_INT 0
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 1
59026: PUSH
59027: LD_INT 1
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: LD_INT 0
59036: PUSH
59037: LD_INT 1
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 1
59046: NEG
59047: PUSH
59048: LD_INT 0
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: LD_INT 1
59057: NEG
59058: PUSH
59059: LD_INT 1
59061: NEG
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 1
59069: NEG
59070: PUSH
59071: LD_INT 2
59073: NEG
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PUSH
59079: LD_INT 1
59081: NEG
59082: PUSH
59083: LD_INT 1
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 2
59092: NEG
59093: PUSH
59094: LD_INT 0
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 2
59103: NEG
59104: PUSH
59105: LD_INT 1
59107: NEG
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 2
59115: NEG
59116: PUSH
59117: LD_INT 2
59119: NEG
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59139: LD_ADDR_VAR 0 53
59143: PUSH
59144: LD_INT 0
59146: PUSH
59147: LD_INT 0
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 0
59156: PUSH
59157: LD_INT 1
59159: NEG
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 1
59167: PUSH
59168: LD_INT 0
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 1
59177: PUSH
59178: LD_INT 1
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 0
59187: PUSH
59188: LD_INT 1
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 1
59197: NEG
59198: PUSH
59199: LD_INT 0
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: LD_INT 1
59208: NEG
59209: PUSH
59210: LD_INT 1
59212: NEG
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 1
59220: NEG
59221: PUSH
59222: LD_INT 2
59224: NEG
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 0
59232: PUSH
59233: LD_INT 2
59235: NEG
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 1
59243: PUSH
59244: LD_INT 1
59246: NEG
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 2
59254: PUSH
59255: LD_INT 0
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 2
59264: PUSH
59265: LD_INT 1
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: LD_INT 2
59274: PUSH
59275: LD_INT 2
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 1
59284: PUSH
59285: LD_INT 2
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 0
59294: PUSH
59295: LD_INT 2
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 1
59304: NEG
59305: PUSH
59306: LD_INT 1
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 2
59315: NEG
59316: PUSH
59317: LD_INT 0
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: LD_INT 2
59326: NEG
59327: PUSH
59328: LD_INT 1
59330: NEG
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 2
59338: NEG
59339: PUSH
59340: LD_INT 2
59342: NEG
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59369: LD_ADDR_VAR 0 54
59373: PUSH
59374: LD_INT 0
59376: PUSH
59377: LD_INT 0
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 0
59386: PUSH
59387: LD_INT 1
59389: NEG
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 1
59397: PUSH
59398: LD_INT 0
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 1
59407: PUSH
59408: LD_INT 1
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 0
59417: PUSH
59418: LD_INT 1
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 1
59427: NEG
59428: PUSH
59429: LD_INT 0
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 1
59438: NEG
59439: PUSH
59440: LD_INT 1
59442: NEG
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 1
59450: NEG
59451: PUSH
59452: LD_INT 2
59454: NEG
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 0
59462: PUSH
59463: LD_INT 2
59465: NEG
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 1
59473: PUSH
59474: LD_INT 1
59476: NEG
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 2
59484: PUSH
59485: LD_INT 0
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 2
59494: PUSH
59495: LD_INT 1
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 2
59504: PUSH
59505: LD_INT 2
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 1
59514: PUSH
59515: LD_INT 2
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 0
59524: PUSH
59525: LD_INT 2
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 1
59534: NEG
59535: PUSH
59536: LD_INT 1
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 2
59545: NEG
59546: PUSH
59547: LD_INT 0
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: LD_INT 2
59556: NEG
59557: PUSH
59558: LD_INT 1
59560: NEG
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 2
59568: NEG
59569: PUSH
59570: LD_INT 2
59572: NEG
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: LIST
59595: LIST
59596: LIST
59597: LIST
59598: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59599: LD_ADDR_VAR 0 55
59603: PUSH
59604: LD_INT 0
59606: PUSH
59607: LD_INT 0
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: LD_INT 0
59616: PUSH
59617: LD_INT 1
59619: NEG
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 1
59627: PUSH
59628: LD_INT 0
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: LD_INT 1
59637: PUSH
59638: LD_INT 1
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 0
59647: PUSH
59648: LD_INT 1
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 1
59657: NEG
59658: PUSH
59659: LD_INT 0
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 1
59668: NEG
59669: PUSH
59670: LD_INT 1
59672: NEG
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 1
59680: NEG
59681: PUSH
59682: LD_INT 2
59684: NEG
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 0
59692: PUSH
59693: LD_INT 2
59695: NEG
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: LD_INT 1
59703: PUSH
59704: LD_INT 1
59706: NEG
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PUSH
59712: LD_INT 2
59714: PUSH
59715: LD_INT 0
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: LD_INT 2
59724: PUSH
59725: LD_INT 1
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 2
59734: PUSH
59735: LD_INT 2
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 1
59744: PUSH
59745: LD_INT 2
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 0
59754: PUSH
59755: LD_INT 2
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 1
59764: NEG
59765: PUSH
59766: LD_INT 1
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: PUSH
59773: LD_INT 2
59775: NEG
59776: PUSH
59777: LD_INT 0
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: LD_INT 2
59786: NEG
59787: PUSH
59788: LD_INT 1
59790: NEG
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: PUSH
59796: LD_INT 2
59798: NEG
59799: PUSH
59800: LD_INT 2
59802: NEG
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: LIST
59821: LIST
59822: LIST
59823: LIST
59824: LIST
59825: LIST
59826: LIST
59827: LIST
59828: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59829: LD_ADDR_VAR 0 56
59833: PUSH
59834: LD_INT 0
59836: PUSH
59837: LD_INT 0
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 0
59846: PUSH
59847: LD_INT 1
59849: NEG
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 1
59857: PUSH
59858: LD_INT 0
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 1
59867: PUSH
59868: LD_INT 1
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 0
59877: PUSH
59878: LD_INT 1
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: LD_INT 1
59887: NEG
59888: PUSH
59889: LD_INT 0
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 1
59898: NEG
59899: PUSH
59900: LD_INT 1
59902: NEG
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: LD_INT 1
59910: NEG
59911: PUSH
59912: LD_INT 2
59914: NEG
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: LD_INT 0
59922: PUSH
59923: LD_INT 2
59925: NEG
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 1
59933: PUSH
59934: LD_INT 1
59936: NEG
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PUSH
59942: LD_INT 2
59944: PUSH
59945: LD_INT 0
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 2
59954: PUSH
59955: LD_INT 1
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 2
59964: PUSH
59965: LD_INT 2
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 1
59974: PUSH
59975: LD_INT 2
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 0
59984: PUSH
59985: LD_INT 2
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 1
59994: NEG
59995: PUSH
59996: LD_INT 1
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 2
60005: NEG
60006: PUSH
60007: LD_INT 0
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 2
60016: NEG
60017: PUSH
60018: LD_INT 1
60020: NEG
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: LD_INT 2
60028: NEG
60029: PUSH
60030: LD_INT 2
60032: NEG
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: LIST
60057: LIST
60058: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60059: LD_ADDR_VAR 0 57
60063: PUSH
60064: LD_INT 0
60066: PUSH
60067: LD_INT 0
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: LD_INT 0
60076: PUSH
60077: LD_INT 1
60079: NEG
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 1
60087: PUSH
60088: LD_INT 0
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: LD_INT 1
60097: PUSH
60098: LD_INT 1
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: PUSH
60105: LD_INT 0
60107: PUSH
60108: LD_INT 1
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 1
60117: NEG
60118: PUSH
60119: LD_INT 0
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 1
60128: NEG
60129: PUSH
60130: LD_INT 1
60132: NEG
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: LD_INT 1
60140: NEG
60141: PUSH
60142: LD_INT 2
60144: NEG
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 0
60152: PUSH
60153: LD_INT 2
60155: NEG
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: LD_INT 1
60163: PUSH
60164: LD_INT 1
60166: NEG
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 2
60174: PUSH
60175: LD_INT 0
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 2
60184: PUSH
60185: LD_INT 1
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: LD_INT 2
60194: PUSH
60195: LD_INT 2
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: LD_INT 1
60204: PUSH
60205: LD_INT 2
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: LD_INT 0
60214: PUSH
60215: LD_INT 2
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 1
60224: NEG
60225: PUSH
60226: LD_INT 1
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 2
60235: NEG
60236: PUSH
60237: LD_INT 0
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 2
60246: NEG
60247: PUSH
60248: LD_INT 1
60250: NEG
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 2
60258: NEG
60259: PUSH
60260: LD_INT 2
60262: NEG
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: LIST
60286: LIST
60287: LIST
60288: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60289: LD_ADDR_VAR 0 58
60293: PUSH
60294: LD_INT 0
60296: PUSH
60297: LD_INT 0
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 0
60306: PUSH
60307: LD_INT 1
60309: NEG
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 1
60317: PUSH
60318: LD_INT 0
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 1
60327: PUSH
60328: LD_INT 1
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 0
60337: PUSH
60338: LD_INT 1
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 1
60347: NEG
60348: PUSH
60349: LD_INT 0
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 1
60358: NEG
60359: PUSH
60360: LD_INT 1
60362: NEG
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 1
60370: NEG
60371: PUSH
60372: LD_INT 2
60374: NEG
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: LD_INT 0
60382: PUSH
60383: LD_INT 2
60385: NEG
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 1
60393: PUSH
60394: LD_INT 1
60396: NEG
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: PUSH
60402: LD_INT 2
60404: PUSH
60405: LD_INT 0
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_INT 2
60414: PUSH
60415: LD_INT 1
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: PUSH
60422: LD_INT 2
60424: PUSH
60425: LD_INT 2
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 1
60434: PUSH
60435: LD_INT 2
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 0
60444: PUSH
60445: LD_INT 2
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 1
60454: NEG
60455: PUSH
60456: LD_INT 1
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 2
60465: NEG
60466: PUSH
60467: LD_INT 0
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 2
60476: NEG
60477: PUSH
60478: LD_INT 1
60480: NEG
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 2
60488: NEG
60489: PUSH
60490: LD_INT 2
60492: NEG
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: LIST
60502: LIST
60503: LIST
60504: LIST
60505: LIST
60506: LIST
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: LIST
60512: LIST
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60519: LD_ADDR_VAR 0 59
60523: PUSH
60524: LD_INT 0
60526: PUSH
60527: LD_INT 0
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: LD_INT 0
60536: PUSH
60537: LD_INT 1
60539: NEG
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 1
60547: PUSH
60548: LD_INT 0
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 1
60557: PUSH
60558: LD_INT 1
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 0
60567: PUSH
60568: LD_INT 1
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 1
60577: NEG
60578: PUSH
60579: LD_INT 0
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 1
60588: NEG
60589: PUSH
60590: LD_INT 1
60592: NEG
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60607: LD_ADDR_VAR 0 60
60611: PUSH
60612: LD_INT 0
60614: PUSH
60615: LD_INT 0
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 0
60624: PUSH
60625: LD_INT 1
60627: NEG
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 1
60635: PUSH
60636: LD_INT 0
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 1
60645: PUSH
60646: LD_INT 1
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 0
60655: PUSH
60656: LD_INT 1
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 1
60665: NEG
60666: PUSH
60667: LD_INT 0
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 1
60676: NEG
60677: PUSH
60678: LD_INT 1
60680: NEG
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60695: LD_ADDR_VAR 0 61
60699: PUSH
60700: LD_INT 0
60702: PUSH
60703: LD_INT 0
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PUSH
60710: LD_INT 0
60712: PUSH
60713: LD_INT 1
60715: NEG
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 1
60723: PUSH
60724: LD_INT 0
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 1
60733: PUSH
60734: LD_INT 1
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 0
60743: PUSH
60744: LD_INT 1
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 1
60753: NEG
60754: PUSH
60755: LD_INT 0
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 1
60764: NEG
60765: PUSH
60766: LD_INT 1
60768: NEG
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: EMPTY
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60783: LD_ADDR_VAR 0 62
60787: PUSH
60788: LD_INT 0
60790: PUSH
60791: LD_INT 0
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: PUSH
60798: LD_INT 0
60800: PUSH
60801: LD_INT 1
60803: NEG
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: LD_INT 1
60811: PUSH
60812: LD_INT 0
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 1
60821: PUSH
60822: LD_INT 1
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 0
60831: PUSH
60832: LD_INT 1
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: LD_INT 1
60841: NEG
60842: PUSH
60843: LD_INT 0
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: LD_INT 1
60852: NEG
60853: PUSH
60854: LD_INT 1
60856: NEG
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: LIST
60870: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60871: LD_ADDR_VAR 0 63
60875: PUSH
60876: LD_INT 0
60878: PUSH
60879: LD_INT 0
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: PUSH
60886: LD_INT 0
60888: PUSH
60889: LD_INT 1
60891: NEG
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: LD_INT 1
60899: PUSH
60900: LD_INT 0
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: PUSH
60907: LD_INT 1
60909: PUSH
60910: LD_INT 1
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: PUSH
60917: LD_INT 0
60919: PUSH
60920: LD_INT 1
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 1
60929: NEG
60930: PUSH
60931: LD_INT 0
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PUSH
60938: LD_INT 1
60940: NEG
60941: PUSH
60942: LD_INT 1
60944: NEG
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: LIST
60956: LIST
60957: LIST
60958: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60959: LD_ADDR_VAR 0 64
60963: PUSH
60964: LD_INT 0
60966: PUSH
60967: LD_INT 0
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 0
60976: PUSH
60977: LD_INT 1
60979: NEG
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 1
60987: PUSH
60988: LD_INT 0
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 1
60997: PUSH
60998: LD_INT 1
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 0
61007: PUSH
61008: LD_INT 1
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 1
61017: NEG
61018: PUSH
61019: LD_INT 0
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 1
61028: NEG
61029: PUSH
61030: LD_INT 1
61032: NEG
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: ST_TO_ADDR
// end ; 1 :
61047: GO 66944
61049: LD_INT 1
61051: DOUBLE
61052: EQUAL
61053: IFTRUE 61057
61055: GO 63680
61057: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61058: LD_ADDR_VAR 0 11
61062: PUSH
61063: LD_INT 1
61065: NEG
61066: PUSH
61067: LD_INT 3
61069: NEG
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 0
61077: PUSH
61078: LD_INT 3
61080: NEG
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 1
61088: PUSH
61089: LD_INT 2
61091: NEG
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: LIST
61101: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61102: LD_ADDR_VAR 0 12
61106: PUSH
61107: LD_INT 2
61109: PUSH
61110: LD_INT 1
61112: NEG
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PUSH
61118: LD_INT 3
61120: PUSH
61121: LD_INT 0
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: LD_INT 3
61130: PUSH
61131: LD_INT 1
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: LIST
61142: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61143: LD_ADDR_VAR 0 13
61147: PUSH
61148: LD_INT 3
61150: PUSH
61151: LD_INT 2
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 3
61160: PUSH
61161: LD_INT 3
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 2
61170: PUSH
61171: LD_INT 3
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: LIST
61182: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61183: LD_ADDR_VAR 0 14
61187: PUSH
61188: LD_INT 1
61190: PUSH
61191: LD_INT 3
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 0
61200: PUSH
61201: LD_INT 3
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: PUSH
61208: LD_INT 1
61210: NEG
61211: PUSH
61212: LD_INT 2
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: LIST
61223: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61224: LD_ADDR_VAR 0 15
61228: PUSH
61229: LD_INT 2
61231: NEG
61232: PUSH
61233: LD_INT 1
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 3
61242: NEG
61243: PUSH
61244: LD_INT 0
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 3
61253: NEG
61254: PUSH
61255: LD_INT 1
61257: NEG
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: LIST
61267: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61268: LD_ADDR_VAR 0 16
61272: PUSH
61273: LD_INT 2
61275: NEG
61276: PUSH
61277: LD_INT 3
61279: NEG
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 3
61287: NEG
61288: PUSH
61289: LD_INT 2
61291: NEG
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 3
61299: NEG
61300: PUSH
61301: LD_INT 3
61303: NEG
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: LIST
61313: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61314: LD_ADDR_VAR 0 17
61318: PUSH
61319: LD_INT 1
61321: NEG
61322: PUSH
61323: LD_INT 3
61325: NEG
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 0
61333: PUSH
61334: LD_INT 3
61336: NEG
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 1
61344: PUSH
61345: LD_INT 2
61347: NEG
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: LIST
61357: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61358: LD_ADDR_VAR 0 18
61362: PUSH
61363: LD_INT 2
61365: PUSH
61366: LD_INT 1
61368: NEG
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: LD_INT 3
61376: PUSH
61377: LD_INT 0
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 3
61386: PUSH
61387: LD_INT 1
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: LIST
61398: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61399: LD_ADDR_VAR 0 19
61403: PUSH
61404: LD_INT 3
61406: PUSH
61407: LD_INT 2
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: PUSH
61414: LD_INT 3
61416: PUSH
61417: LD_INT 3
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 2
61426: PUSH
61427: LD_INT 3
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: LIST
61438: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61439: LD_ADDR_VAR 0 20
61443: PUSH
61444: LD_INT 1
61446: PUSH
61447: LD_INT 3
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: PUSH
61454: LD_INT 0
61456: PUSH
61457: LD_INT 3
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PUSH
61464: LD_INT 1
61466: NEG
61467: PUSH
61468: LD_INT 2
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: LIST
61479: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61480: LD_ADDR_VAR 0 21
61484: PUSH
61485: LD_INT 2
61487: NEG
61488: PUSH
61489: LD_INT 1
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 3
61498: NEG
61499: PUSH
61500: LD_INT 0
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 3
61509: NEG
61510: PUSH
61511: LD_INT 1
61513: NEG
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: LIST
61523: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61524: LD_ADDR_VAR 0 22
61528: PUSH
61529: LD_INT 2
61531: NEG
61532: PUSH
61533: LD_INT 3
61535: NEG
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: LD_INT 3
61543: NEG
61544: PUSH
61545: LD_INT 2
61547: NEG
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: LD_INT 3
61555: NEG
61556: PUSH
61557: LD_INT 3
61559: NEG
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: LIST
61569: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
61570: LD_ADDR_VAR 0 23
61574: PUSH
61575: LD_INT 0
61577: PUSH
61578: LD_INT 3
61580: NEG
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 1
61588: NEG
61589: PUSH
61590: LD_INT 4
61592: NEG
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 1
61600: PUSH
61601: LD_INT 3
61603: NEG
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: LIST
61613: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
61614: LD_ADDR_VAR 0 24
61618: PUSH
61619: LD_INT 3
61621: PUSH
61622: LD_INT 0
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 3
61631: PUSH
61632: LD_INT 1
61634: NEG
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 4
61642: PUSH
61643: LD_INT 1
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: LIST
61654: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
61655: LD_ADDR_VAR 0 25
61659: PUSH
61660: LD_INT 3
61662: PUSH
61663: LD_INT 3
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: LD_INT 4
61672: PUSH
61673: LD_INT 3
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: LD_INT 3
61682: PUSH
61683: LD_INT 4
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: LIST
61694: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
61695: LD_ADDR_VAR 0 26
61699: PUSH
61700: LD_INT 0
61702: PUSH
61703: LD_INT 3
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 1
61712: PUSH
61713: LD_INT 4
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: PUSH
61720: LD_INT 1
61722: NEG
61723: PUSH
61724: LD_INT 3
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: LIST
61735: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
61736: LD_ADDR_VAR 0 27
61740: PUSH
61741: LD_INT 3
61743: NEG
61744: PUSH
61745: LD_INT 0
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: LD_INT 3
61754: NEG
61755: PUSH
61756: LD_INT 1
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: LD_INT 4
61765: NEG
61766: PUSH
61767: LD_INT 1
61769: NEG
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: LIST
61779: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
61780: LD_ADDR_VAR 0 28
61784: PUSH
61785: LD_INT 3
61787: NEG
61788: PUSH
61789: LD_INT 3
61791: NEG
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 3
61799: NEG
61800: PUSH
61801: LD_INT 4
61803: NEG
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: PUSH
61809: LD_INT 4
61811: NEG
61812: PUSH
61813: LD_INT 3
61815: NEG
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: LIST
61825: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
61826: LD_ADDR_VAR 0 29
61830: PUSH
61831: LD_INT 1
61833: NEG
61834: PUSH
61835: LD_INT 3
61837: NEG
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 0
61845: PUSH
61846: LD_INT 3
61848: NEG
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: LD_INT 1
61856: PUSH
61857: LD_INT 2
61859: NEG
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: LD_INT 1
61867: NEG
61868: PUSH
61869: LD_INT 4
61871: NEG
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: PUSH
61877: LD_INT 0
61879: PUSH
61880: LD_INT 4
61882: NEG
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: PUSH
61888: LD_INT 1
61890: PUSH
61891: LD_INT 3
61893: NEG
61894: PUSH
61895: EMPTY
61896: LIST
61897: LIST
61898: PUSH
61899: LD_INT 1
61901: NEG
61902: PUSH
61903: LD_INT 5
61905: NEG
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: PUSH
61911: LD_INT 0
61913: PUSH
61914: LD_INT 5
61916: NEG
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: LD_INT 1
61924: PUSH
61925: LD_INT 4
61927: NEG
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_INT 1
61935: NEG
61936: PUSH
61937: LD_INT 6
61939: NEG
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 0
61947: PUSH
61948: LD_INT 6
61950: NEG
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: PUSH
61956: LD_INT 1
61958: PUSH
61959: LD_INT 5
61961: NEG
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: LIST
61971: LIST
61972: LIST
61973: LIST
61974: LIST
61975: LIST
61976: LIST
61977: LIST
61978: LIST
61979: LIST
61980: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
61981: LD_ADDR_VAR 0 30
61985: PUSH
61986: LD_INT 2
61988: PUSH
61989: LD_INT 1
61991: NEG
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: LD_INT 3
61999: PUSH
62000: LD_INT 0
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: LD_INT 3
62009: PUSH
62010: LD_INT 1
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: LD_INT 3
62019: PUSH
62020: LD_INT 1
62022: NEG
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: LD_INT 4
62030: PUSH
62031: LD_INT 0
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: PUSH
62038: LD_INT 4
62040: PUSH
62041: LD_INT 1
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: PUSH
62048: LD_INT 4
62050: PUSH
62051: LD_INT 1
62053: NEG
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 5
62061: PUSH
62062: LD_INT 0
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: PUSH
62069: LD_INT 5
62071: PUSH
62072: LD_INT 1
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: PUSH
62079: LD_INT 5
62081: PUSH
62082: LD_INT 1
62084: NEG
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 6
62092: PUSH
62093: LD_INT 0
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: LD_INT 6
62102: PUSH
62103: LD_INT 1
62105: PUSH
62106: EMPTY
62107: LIST
62108: LIST
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: LIST
62114: LIST
62115: LIST
62116: LIST
62117: LIST
62118: LIST
62119: LIST
62120: LIST
62121: LIST
62122: LIST
62123: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
62124: LD_ADDR_VAR 0 31
62128: PUSH
62129: LD_INT 3
62131: PUSH
62132: LD_INT 2
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: PUSH
62139: LD_INT 3
62141: PUSH
62142: LD_INT 3
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: PUSH
62149: LD_INT 2
62151: PUSH
62152: LD_INT 3
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: PUSH
62159: LD_INT 4
62161: PUSH
62162: LD_INT 3
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: LD_INT 4
62171: PUSH
62172: LD_INT 4
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 3
62181: PUSH
62182: LD_INT 4
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: LD_INT 5
62191: PUSH
62192: LD_INT 4
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: PUSH
62199: LD_INT 5
62201: PUSH
62202: LD_INT 5
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: PUSH
62209: LD_INT 4
62211: PUSH
62212: LD_INT 5
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: PUSH
62219: LD_INT 6
62221: PUSH
62222: LD_INT 5
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: PUSH
62229: LD_INT 6
62231: PUSH
62232: LD_INT 6
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: PUSH
62239: LD_INT 5
62241: PUSH
62242: LD_INT 6
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: LIST
62262: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
62263: LD_ADDR_VAR 0 32
62267: PUSH
62268: LD_INT 1
62270: PUSH
62271: LD_INT 3
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 0
62280: PUSH
62281: LD_INT 3
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: PUSH
62288: LD_INT 1
62290: NEG
62291: PUSH
62292: LD_INT 2
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: PUSH
62299: LD_INT 1
62301: PUSH
62302: LD_INT 4
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: PUSH
62309: LD_INT 0
62311: PUSH
62312: LD_INT 4
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: PUSH
62319: LD_INT 1
62321: NEG
62322: PUSH
62323: LD_INT 3
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 1
62332: PUSH
62333: LD_INT 5
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PUSH
62340: LD_INT 0
62342: PUSH
62343: LD_INT 5
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: PUSH
62350: LD_INT 1
62352: NEG
62353: PUSH
62354: LD_INT 4
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PUSH
62361: LD_INT 1
62363: PUSH
62364: LD_INT 6
62366: PUSH
62367: EMPTY
62368: LIST
62369: LIST
62370: PUSH
62371: LD_INT 0
62373: PUSH
62374: LD_INT 6
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: PUSH
62381: LD_INT 1
62383: NEG
62384: PUSH
62385: LD_INT 5
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: EMPTY
62393: LIST
62394: LIST
62395: LIST
62396: LIST
62397: LIST
62398: LIST
62399: LIST
62400: LIST
62401: LIST
62402: LIST
62403: LIST
62404: LIST
62405: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
62406: LD_ADDR_VAR 0 33
62410: PUSH
62411: LD_INT 2
62413: NEG
62414: PUSH
62415: LD_INT 1
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: LD_INT 3
62424: NEG
62425: PUSH
62426: LD_INT 0
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: LD_INT 3
62435: NEG
62436: PUSH
62437: LD_INT 1
62439: NEG
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PUSH
62445: LD_INT 3
62447: NEG
62448: PUSH
62449: LD_INT 1
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: LD_INT 4
62458: NEG
62459: PUSH
62460: LD_INT 0
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PUSH
62467: LD_INT 4
62469: NEG
62470: PUSH
62471: LD_INT 1
62473: NEG
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 4
62481: NEG
62482: PUSH
62483: LD_INT 1
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: LD_INT 5
62492: NEG
62493: PUSH
62494: LD_INT 0
62496: PUSH
62497: EMPTY
62498: LIST
62499: LIST
62500: PUSH
62501: LD_INT 5
62503: NEG
62504: PUSH
62505: LD_INT 1
62507: NEG
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: PUSH
62513: LD_INT 5
62515: NEG
62516: PUSH
62517: LD_INT 1
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: PUSH
62524: LD_INT 6
62526: NEG
62527: PUSH
62528: LD_INT 0
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: PUSH
62535: LD_INT 6
62537: NEG
62538: PUSH
62539: LD_INT 1
62541: NEG
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: PUSH
62547: EMPTY
62548: LIST
62549: LIST
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: LIST
62555: LIST
62556: LIST
62557: LIST
62558: LIST
62559: LIST
62560: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
62561: LD_ADDR_VAR 0 34
62565: PUSH
62566: LD_INT 2
62568: NEG
62569: PUSH
62570: LD_INT 3
62572: NEG
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: PUSH
62578: LD_INT 3
62580: NEG
62581: PUSH
62582: LD_INT 2
62584: NEG
62585: PUSH
62586: EMPTY
62587: LIST
62588: LIST
62589: PUSH
62590: LD_INT 3
62592: NEG
62593: PUSH
62594: LD_INT 3
62596: NEG
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 3
62604: NEG
62605: PUSH
62606: LD_INT 4
62608: NEG
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 4
62616: NEG
62617: PUSH
62618: LD_INT 3
62620: NEG
62621: PUSH
62622: EMPTY
62623: LIST
62624: LIST
62625: PUSH
62626: LD_INT 4
62628: NEG
62629: PUSH
62630: LD_INT 4
62632: NEG
62633: PUSH
62634: EMPTY
62635: LIST
62636: LIST
62637: PUSH
62638: LD_INT 4
62640: NEG
62641: PUSH
62642: LD_INT 5
62644: NEG
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: PUSH
62650: LD_INT 5
62652: NEG
62653: PUSH
62654: LD_INT 4
62656: NEG
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: PUSH
62662: LD_INT 5
62664: NEG
62665: PUSH
62666: LD_INT 5
62668: NEG
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: LD_INT 5
62676: NEG
62677: PUSH
62678: LD_INT 6
62680: NEG
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: PUSH
62686: LD_INT 6
62688: NEG
62689: PUSH
62690: LD_INT 5
62692: NEG
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 6
62700: NEG
62701: PUSH
62702: LD_INT 6
62704: NEG
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: LIST
62714: LIST
62715: LIST
62716: LIST
62717: LIST
62718: LIST
62719: LIST
62720: LIST
62721: LIST
62722: LIST
62723: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
62724: LD_ADDR_VAR 0 41
62728: PUSH
62729: LD_INT 0
62731: PUSH
62732: LD_INT 2
62734: NEG
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 1
62742: NEG
62743: PUSH
62744: LD_INT 3
62746: NEG
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: PUSH
62752: LD_INT 1
62754: PUSH
62755: LD_INT 2
62757: NEG
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: EMPTY
62764: LIST
62765: LIST
62766: LIST
62767: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
62768: LD_ADDR_VAR 0 42
62772: PUSH
62773: LD_INT 2
62775: PUSH
62776: LD_INT 0
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PUSH
62783: LD_INT 2
62785: PUSH
62786: LD_INT 1
62788: NEG
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: PUSH
62794: LD_INT 3
62796: PUSH
62797: LD_INT 1
62799: PUSH
62800: EMPTY
62801: LIST
62802: LIST
62803: PUSH
62804: EMPTY
62805: LIST
62806: LIST
62807: LIST
62808: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
62809: LD_ADDR_VAR 0 43
62813: PUSH
62814: LD_INT 2
62816: PUSH
62817: LD_INT 2
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 3
62826: PUSH
62827: LD_INT 2
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: PUSH
62834: LD_INT 2
62836: PUSH
62837: LD_INT 3
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: LIST
62848: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
62849: LD_ADDR_VAR 0 44
62853: PUSH
62854: LD_INT 0
62856: PUSH
62857: LD_INT 2
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: LD_INT 1
62866: PUSH
62867: LD_INT 3
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PUSH
62874: LD_INT 1
62876: NEG
62877: PUSH
62878: LD_INT 2
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: LIST
62889: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62890: LD_ADDR_VAR 0 45
62894: PUSH
62895: LD_INT 2
62897: NEG
62898: PUSH
62899: LD_INT 0
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: LD_INT 2
62908: NEG
62909: PUSH
62910: LD_INT 1
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: PUSH
62917: LD_INT 3
62919: NEG
62920: PUSH
62921: LD_INT 1
62923: NEG
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: LIST
62933: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
62934: LD_ADDR_VAR 0 46
62938: PUSH
62939: LD_INT 2
62941: NEG
62942: PUSH
62943: LD_INT 2
62945: NEG
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PUSH
62951: LD_INT 2
62953: NEG
62954: PUSH
62955: LD_INT 3
62957: NEG
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: PUSH
62963: LD_INT 3
62965: NEG
62966: PUSH
62967: LD_INT 2
62969: NEG
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: LIST
62979: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
62980: LD_ADDR_VAR 0 47
62984: PUSH
62985: LD_INT 2
62987: NEG
62988: PUSH
62989: LD_INT 3
62991: NEG
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: PUSH
62997: LD_INT 1
62999: NEG
63000: PUSH
63001: LD_INT 3
63003: NEG
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
63013: LD_ADDR_VAR 0 48
63017: PUSH
63018: LD_INT 1
63020: PUSH
63021: LD_INT 2
63023: NEG
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: PUSH
63029: LD_INT 2
63031: PUSH
63032: LD_INT 1
63034: NEG
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
63044: LD_ADDR_VAR 0 49
63048: PUSH
63049: LD_INT 3
63051: PUSH
63052: LD_INT 1
63054: PUSH
63055: EMPTY
63056: LIST
63057: LIST
63058: PUSH
63059: LD_INT 3
63061: PUSH
63062: LD_INT 2
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
63073: LD_ADDR_VAR 0 50
63077: PUSH
63078: LD_INT 2
63080: PUSH
63081: LD_INT 3
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: LD_INT 1
63090: PUSH
63091: LD_INT 3
63093: PUSH
63094: EMPTY
63095: LIST
63096: LIST
63097: PUSH
63098: EMPTY
63099: LIST
63100: LIST
63101: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
63102: LD_ADDR_VAR 0 51
63106: PUSH
63107: LD_INT 1
63109: NEG
63110: PUSH
63111: LD_INT 2
63113: PUSH
63114: EMPTY
63115: LIST
63116: LIST
63117: PUSH
63118: LD_INT 2
63120: NEG
63121: PUSH
63122: LD_INT 1
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
63133: LD_ADDR_VAR 0 52
63137: PUSH
63138: LD_INT 3
63140: NEG
63141: PUSH
63142: LD_INT 1
63144: NEG
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: PUSH
63150: LD_INT 3
63152: NEG
63153: PUSH
63154: LD_INT 2
63156: NEG
63157: PUSH
63158: EMPTY
63159: LIST
63160: LIST
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63166: LD_ADDR_VAR 0 53
63170: PUSH
63171: LD_INT 1
63173: NEG
63174: PUSH
63175: LD_INT 3
63177: NEG
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: LD_INT 0
63185: PUSH
63186: LD_INT 3
63188: NEG
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: PUSH
63194: LD_INT 1
63196: PUSH
63197: LD_INT 2
63199: NEG
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: PUSH
63205: EMPTY
63206: LIST
63207: LIST
63208: LIST
63209: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63210: LD_ADDR_VAR 0 54
63214: PUSH
63215: LD_INT 2
63217: PUSH
63218: LD_INT 1
63220: NEG
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: PUSH
63226: LD_INT 3
63228: PUSH
63229: LD_INT 0
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: LD_INT 3
63238: PUSH
63239: LD_INT 1
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: PUSH
63246: EMPTY
63247: LIST
63248: LIST
63249: LIST
63250: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63251: LD_ADDR_VAR 0 55
63255: PUSH
63256: LD_INT 3
63258: PUSH
63259: LD_INT 2
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: PUSH
63266: LD_INT 3
63268: PUSH
63269: LD_INT 3
63271: PUSH
63272: EMPTY
63273: LIST
63274: LIST
63275: PUSH
63276: LD_INT 2
63278: PUSH
63279: LD_INT 3
63281: PUSH
63282: EMPTY
63283: LIST
63284: LIST
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: LIST
63290: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63291: LD_ADDR_VAR 0 56
63295: PUSH
63296: LD_INT 1
63298: PUSH
63299: LD_INT 3
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: PUSH
63306: LD_INT 0
63308: PUSH
63309: LD_INT 3
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: PUSH
63316: LD_INT 1
63318: NEG
63319: PUSH
63320: LD_INT 2
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: LIST
63331: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63332: LD_ADDR_VAR 0 57
63336: PUSH
63337: LD_INT 2
63339: NEG
63340: PUSH
63341: LD_INT 1
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: LD_INT 3
63350: NEG
63351: PUSH
63352: LD_INT 0
63354: PUSH
63355: EMPTY
63356: LIST
63357: LIST
63358: PUSH
63359: LD_INT 3
63361: NEG
63362: PUSH
63363: LD_INT 1
63365: NEG
63366: PUSH
63367: EMPTY
63368: LIST
63369: LIST
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: LIST
63375: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63376: LD_ADDR_VAR 0 58
63380: PUSH
63381: LD_INT 2
63383: NEG
63384: PUSH
63385: LD_INT 3
63387: NEG
63388: PUSH
63389: EMPTY
63390: LIST
63391: LIST
63392: PUSH
63393: LD_INT 3
63395: NEG
63396: PUSH
63397: LD_INT 2
63399: NEG
63400: PUSH
63401: EMPTY
63402: LIST
63403: LIST
63404: PUSH
63405: LD_INT 3
63407: NEG
63408: PUSH
63409: LD_INT 3
63411: NEG
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: LIST
63421: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
63422: LD_ADDR_VAR 0 59
63426: PUSH
63427: LD_INT 1
63429: NEG
63430: PUSH
63431: LD_INT 2
63433: NEG
63434: PUSH
63435: EMPTY
63436: LIST
63437: LIST
63438: PUSH
63439: LD_INT 0
63441: PUSH
63442: LD_INT 2
63444: NEG
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: PUSH
63450: LD_INT 1
63452: PUSH
63453: LD_INT 1
63455: NEG
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: PUSH
63461: EMPTY
63462: LIST
63463: LIST
63464: LIST
63465: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63466: LD_ADDR_VAR 0 60
63470: PUSH
63471: LD_INT 1
63473: PUSH
63474: LD_INT 1
63476: NEG
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: PUSH
63482: LD_INT 2
63484: PUSH
63485: LD_INT 0
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: PUSH
63492: LD_INT 2
63494: PUSH
63495: LD_INT 1
63497: PUSH
63498: EMPTY
63499: LIST
63500: LIST
63501: PUSH
63502: EMPTY
63503: LIST
63504: LIST
63505: LIST
63506: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63507: LD_ADDR_VAR 0 61
63511: PUSH
63512: LD_INT 2
63514: PUSH
63515: LD_INT 1
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: LD_INT 2
63524: PUSH
63525: LD_INT 2
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: PUSH
63532: LD_INT 1
63534: PUSH
63535: LD_INT 2
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: LIST
63546: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63547: LD_ADDR_VAR 0 62
63551: PUSH
63552: LD_INT 1
63554: PUSH
63555: LD_INT 2
63557: PUSH
63558: EMPTY
63559: LIST
63560: LIST
63561: PUSH
63562: LD_INT 0
63564: PUSH
63565: LD_INT 2
63567: PUSH
63568: EMPTY
63569: LIST
63570: LIST
63571: PUSH
63572: LD_INT 1
63574: NEG
63575: PUSH
63576: LD_INT 1
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: LIST
63587: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63588: LD_ADDR_VAR 0 63
63592: PUSH
63593: LD_INT 1
63595: NEG
63596: PUSH
63597: LD_INT 1
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: PUSH
63604: LD_INT 2
63606: NEG
63607: PUSH
63608: LD_INT 0
63610: PUSH
63611: EMPTY
63612: LIST
63613: LIST
63614: PUSH
63615: LD_INT 2
63617: NEG
63618: PUSH
63619: LD_INT 1
63621: NEG
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: LIST
63631: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63632: LD_ADDR_VAR 0 64
63636: PUSH
63637: LD_INT 1
63639: NEG
63640: PUSH
63641: LD_INT 2
63643: NEG
63644: PUSH
63645: EMPTY
63646: LIST
63647: LIST
63648: PUSH
63649: LD_INT 2
63651: NEG
63652: PUSH
63653: LD_INT 1
63655: NEG
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: PUSH
63661: LD_INT 2
63663: NEG
63664: PUSH
63665: LD_INT 2
63667: NEG
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: PUSH
63673: EMPTY
63674: LIST
63675: LIST
63676: LIST
63677: ST_TO_ADDR
// end ; 2 :
63678: GO 66944
63680: LD_INT 2
63682: DOUBLE
63683: EQUAL
63684: IFTRUE 63688
63686: GO 66943
63688: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
63689: LD_ADDR_VAR 0 29
63693: PUSH
63694: LD_INT 4
63696: PUSH
63697: LD_INT 0
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: PUSH
63704: LD_INT 4
63706: PUSH
63707: LD_INT 1
63709: NEG
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: PUSH
63715: LD_INT 5
63717: PUSH
63718: LD_INT 0
63720: PUSH
63721: EMPTY
63722: LIST
63723: LIST
63724: PUSH
63725: LD_INT 5
63727: PUSH
63728: LD_INT 1
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: PUSH
63735: LD_INT 4
63737: PUSH
63738: LD_INT 1
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: PUSH
63745: LD_INT 3
63747: PUSH
63748: LD_INT 0
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: PUSH
63755: LD_INT 3
63757: PUSH
63758: LD_INT 1
63760: NEG
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: PUSH
63766: LD_INT 3
63768: PUSH
63769: LD_INT 2
63771: NEG
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: LD_INT 5
63779: PUSH
63780: LD_INT 2
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_INT 3
63789: PUSH
63790: LD_INT 3
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PUSH
63797: LD_INT 3
63799: PUSH
63800: LD_INT 2
63802: PUSH
63803: EMPTY
63804: LIST
63805: LIST
63806: PUSH
63807: LD_INT 4
63809: PUSH
63810: LD_INT 3
63812: PUSH
63813: EMPTY
63814: LIST
63815: LIST
63816: PUSH
63817: LD_INT 4
63819: PUSH
63820: LD_INT 4
63822: PUSH
63823: EMPTY
63824: LIST
63825: LIST
63826: PUSH
63827: LD_INT 3
63829: PUSH
63830: LD_INT 4
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: PUSH
63837: LD_INT 2
63839: PUSH
63840: LD_INT 3
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_INT 2
63849: PUSH
63850: LD_INT 2
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: PUSH
63857: LD_INT 4
63859: PUSH
63860: LD_INT 2
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: PUSH
63867: LD_INT 2
63869: PUSH
63870: LD_INT 4
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: PUSH
63877: LD_INT 0
63879: PUSH
63880: LD_INT 4
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: PUSH
63887: LD_INT 0
63889: PUSH
63890: LD_INT 3
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: PUSH
63897: LD_INT 1
63899: PUSH
63900: LD_INT 4
63902: PUSH
63903: EMPTY
63904: LIST
63905: LIST
63906: PUSH
63907: LD_INT 1
63909: PUSH
63910: LD_INT 5
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: PUSH
63917: LD_INT 0
63919: PUSH
63920: LD_INT 5
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: PUSH
63927: LD_INT 1
63929: NEG
63930: PUSH
63931: LD_INT 4
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: PUSH
63938: LD_INT 1
63940: NEG
63941: PUSH
63942: LD_INT 3
63944: PUSH
63945: EMPTY
63946: LIST
63947: LIST
63948: PUSH
63949: LD_INT 2
63951: PUSH
63952: LD_INT 5
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: PUSH
63959: LD_INT 2
63961: NEG
63962: PUSH
63963: LD_INT 3
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: PUSH
63970: LD_INT 3
63972: NEG
63973: PUSH
63974: LD_INT 0
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: PUSH
63981: LD_INT 3
63983: NEG
63984: PUSH
63985: LD_INT 1
63987: NEG
63988: PUSH
63989: EMPTY
63990: LIST
63991: LIST
63992: PUSH
63993: LD_INT 2
63995: NEG
63996: PUSH
63997: LD_INT 0
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: PUSH
64004: LD_INT 2
64006: NEG
64007: PUSH
64008: LD_INT 1
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: PUSH
64015: LD_INT 3
64017: NEG
64018: PUSH
64019: LD_INT 1
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: PUSH
64026: LD_INT 4
64028: NEG
64029: PUSH
64030: LD_INT 0
64032: PUSH
64033: EMPTY
64034: LIST
64035: LIST
64036: PUSH
64037: LD_INT 4
64039: NEG
64040: PUSH
64041: LD_INT 1
64043: NEG
64044: PUSH
64045: EMPTY
64046: LIST
64047: LIST
64048: PUSH
64049: LD_INT 4
64051: NEG
64052: PUSH
64053: LD_INT 2
64055: NEG
64056: PUSH
64057: EMPTY
64058: LIST
64059: LIST
64060: PUSH
64061: LD_INT 2
64063: NEG
64064: PUSH
64065: LD_INT 2
64067: PUSH
64068: EMPTY
64069: LIST
64070: LIST
64071: PUSH
64072: LD_INT 4
64074: NEG
64075: PUSH
64076: LD_INT 4
64078: NEG
64079: PUSH
64080: EMPTY
64081: LIST
64082: LIST
64083: PUSH
64084: LD_INT 4
64086: NEG
64087: PUSH
64088: LD_INT 5
64090: NEG
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: PUSH
64096: LD_INT 3
64098: NEG
64099: PUSH
64100: LD_INT 4
64102: NEG
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: LD_INT 3
64110: NEG
64111: PUSH
64112: LD_INT 3
64114: NEG
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: PUSH
64120: LD_INT 4
64122: NEG
64123: PUSH
64124: LD_INT 3
64126: NEG
64127: PUSH
64128: EMPTY
64129: LIST
64130: LIST
64131: PUSH
64132: LD_INT 5
64134: NEG
64135: PUSH
64136: LD_INT 4
64138: NEG
64139: PUSH
64140: EMPTY
64141: LIST
64142: LIST
64143: PUSH
64144: LD_INT 5
64146: NEG
64147: PUSH
64148: LD_INT 5
64150: NEG
64151: PUSH
64152: EMPTY
64153: LIST
64154: LIST
64155: PUSH
64156: LD_INT 3
64158: NEG
64159: PUSH
64160: LD_INT 5
64162: NEG
64163: PUSH
64164: EMPTY
64165: LIST
64166: LIST
64167: PUSH
64168: LD_INT 5
64170: NEG
64171: PUSH
64172: LD_INT 3
64174: NEG
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: PUSH
64180: EMPTY
64181: LIST
64182: LIST
64183: LIST
64184: LIST
64185: LIST
64186: LIST
64187: LIST
64188: LIST
64189: LIST
64190: LIST
64191: LIST
64192: LIST
64193: LIST
64194: LIST
64195: LIST
64196: LIST
64197: LIST
64198: LIST
64199: LIST
64200: LIST
64201: LIST
64202: LIST
64203: LIST
64204: LIST
64205: LIST
64206: LIST
64207: LIST
64208: LIST
64209: LIST
64210: LIST
64211: LIST
64212: LIST
64213: LIST
64214: LIST
64215: LIST
64216: LIST
64217: LIST
64218: LIST
64219: LIST
64220: LIST
64221: LIST
64222: LIST
64223: LIST
64224: LIST
64225: LIST
64226: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
64227: LD_ADDR_VAR 0 30
64231: PUSH
64232: LD_INT 4
64234: PUSH
64235: LD_INT 4
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: PUSH
64242: LD_INT 4
64244: PUSH
64245: LD_INT 3
64247: PUSH
64248: EMPTY
64249: LIST
64250: LIST
64251: PUSH
64252: LD_INT 5
64254: PUSH
64255: LD_INT 4
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: PUSH
64262: LD_INT 5
64264: PUSH
64265: LD_INT 5
64267: PUSH
64268: EMPTY
64269: LIST
64270: LIST
64271: PUSH
64272: LD_INT 4
64274: PUSH
64275: LD_INT 5
64277: PUSH
64278: EMPTY
64279: LIST
64280: LIST
64281: PUSH
64282: LD_INT 3
64284: PUSH
64285: LD_INT 4
64287: PUSH
64288: EMPTY
64289: LIST
64290: LIST
64291: PUSH
64292: LD_INT 3
64294: PUSH
64295: LD_INT 3
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: PUSH
64302: LD_INT 5
64304: PUSH
64305: LD_INT 3
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: PUSH
64312: LD_INT 3
64314: PUSH
64315: LD_INT 5
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PUSH
64322: LD_INT 0
64324: PUSH
64325: LD_INT 3
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: PUSH
64332: LD_INT 0
64334: PUSH
64335: LD_INT 2
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: PUSH
64342: LD_INT 1
64344: PUSH
64345: LD_INT 3
64347: PUSH
64348: EMPTY
64349: LIST
64350: LIST
64351: PUSH
64352: LD_INT 1
64354: PUSH
64355: LD_INT 4
64357: PUSH
64358: EMPTY
64359: LIST
64360: LIST
64361: PUSH
64362: LD_INT 0
64364: PUSH
64365: LD_INT 4
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: PUSH
64372: LD_INT 1
64374: NEG
64375: PUSH
64376: LD_INT 3
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: PUSH
64383: LD_INT 1
64385: NEG
64386: PUSH
64387: LD_INT 2
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: PUSH
64394: LD_INT 2
64396: PUSH
64397: LD_INT 4
64399: PUSH
64400: EMPTY
64401: LIST
64402: LIST
64403: PUSH
64404: LD_INT 2
64406: NEG
64407: PUSH
64408: LD_INT 2
64410: PUSH
64411: EMPTY
64412: LIST
64413: LIST
64414: PUSH
64415: LD_INT 4
64417: NEG
64418: PUSH
64419: LD_INT 0
64421: PUSH
64422: EMPTY
64423: LIST
64424: LIST
64425: PUSH
64426: LD_INT 4
64428: NEG
64429: PUSH
64430: LD_INT 1
64432: NEG
64433: PUSH
64434: EMPTY
64435: LIST
64436: LIST
64437: PUSH
64438: LD_INT 3
64440: NEG
64441: PUSH
64442: LD_INT 0
64444: PUSH
64445: EMPTY
64446: LIST
64447: LIST
64448: PUSH
64449: LD_INT 3
64451: NEG
64452: PUSH
64453: LD_INT 1
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: PUSH
64460: LD_INT 4
64462: NEG
64463: PUSH
64464: LD_INT 1
64466: PUSH
64467: EMPTY
64468: LIST
64469: LIST
64470: PUSH
64471: LD_INT 5
64473: NEG
64474: PUSH
64475: LD_INT 0
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: PUSH
64482: LD_INT 5
64484: NEG
64485: PUSH
64486: LD_INT 1
64488: NEG
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: PUSH
64494: LD_INT 5
64496: NEG
64497: PUSH
64498: LD_INT 2
64500: NEG
64501: PUSH
64502: EMPTY
64503: LIST
64504: LIST
64505: PUSH
64506: LD_INT 3
64508: NEG
64509: PUSH
64510: LD_INT 2
64512: PUSH
64513: EMPTY
64514: LIST
64515: LIST
64516: PUSH
64517: LD_INT 3
64519: NEG
64520: PUSH
64521: LD_INT 3
64523: NEG
64524: PUSH
64525: EMPTY
64526: LIST
64527: LIST
64528: PUSH
64529: LD_INT 3
64531: NEG
64532: PUSH
64533: LD_INT 4
64535: NEG
64536: PUSH
64537: EMPTY
64538: LIST
64539: LIST
64540: PUSH
64541: LD_INT 2
64543: NEG
64544: PUSH
64545: LD_INT 3
64547: NEG
64548: PUSH
64549: EMPTY
64550: LIST
64551: LIST
64552: PUSH
64553: LD_INT 2
64555: NEG
64556: PUSH
64557: LD_INT 2
64559: NEG
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: PUSH
64565: LD_INT 3
64567: NEG
64568: PUSH
64569: LD_INT 2
64571: NEG
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: LD_INT 4
64579: NEG
64580: PUSH
64581: LD_INT 3
64583: NEG
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: PUSH
64589: LD_INT 4
64591: NEG
64592: PUSH
64593: LD_INT 4
64595: NEG
64596: PUSH
64597: EMPTY
64598: LIST
64599: LIST
64600: PUSH
64601: LD_INT 2
64603: NEG
64604: PUSH
64605: LD_INT 4
64607: NEG
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: PUSH
64613: LD_INT 4
64615: NEG
64616: PUSH
64617: LD_INT 2
64619: NEG
64620: PUSH
64621: EMPTY
64622: LIST
64623: LIST
64624: PUSH
64625: LD_INT 0
64627: PUSH
64628: LD_INT 4
64630: NEG
64631: PUSH
64632: EMPTY
64633: LIST
64634: LIST
64635: PUSH
64636: LD_INT 0
64638: PUSH
64639: LD_INT 5
64641: NEG
64642: PUSH
64643: EMPTY
64644: LIST
64645: LIST
64646: PUSH
64647: LD_INT 1
64649: PUSH
64650: LD_INT 4
64652: NEG
64653: PUSH
64654: EMPTY
64655: LIST
64656: LIST
64657: PUSH
64658: LD_INT 1
64660: PUSH
64661: LD_INT 3
64663: NEG
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: PUSH
64669: LD_INT 0
64671: PUSH
64672: LD_INT 3
64674: NEG
64675: PUSH
64676: EMPTY
64677: LIST
64678: LIST
64679: PUSH
64680: LD_INT 1
64682: NEG
64683: PUSH
64684: LD_INT 4
64686: NEG
64687: PUSH
64688: EMPTY
64689: LIST
64690: LIST
64691: PUSH
64692: LD_INT 1
64694: NEG
64695: PUSH
64696: LD_INT 5
64698: NEG
64699: PUSH
64700: EMPTY
64701: LIST
64702: LIST
64703: PUSH
64704: LD_INT 2
64706: PUSH
64707: LD_INT 3
64709: NEG
64710: PUSH
64711: EMPTY
64712: LIST
64713: LIST
64714: PUSH
64715: LD_INT 2
64717: NEG
64718: PUSH
64719: LD_INT 5
64721: NEG
64722: PUSH
64723: EMPTY
64724: LIST
64725: LIST
64726: PUSH
64727: EMPTY
64728: LIST
64729: LIST
64730: LIST
64731: LIST
64732: LIST
64733: LIST
64734: LIST
64735: LIST
64736: LIST
64737: LIST
64738: LIST
64739: LIST
64740: LIST
64741: LIST
64742: LIST
64743: LIST
64744: LIST
64745: LIST
64746: LIST
64747: LIST
64748: LIST
64749: LIST
64750: LIST
64751: LIST
64752: LIST
64753: LIST
64754: LIST
64755: LIST
64756: LIST
64757: LIST
64758: LIST
64759: LIST
64760: LIST
64761: LIST
64762: LIST
64763: LIST
64764: LIST
64765: LIST
64766: LIST
64767: LIST
64768: LIST
64769: LIST
64770: LIST
64771: LIST
64772: LIST
64773: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
64774: LD_ADDR_VAR 0 31
64778: PUSH
64779: LD_INT 0
64781: PUSH
64782: LD_INT 4
64784: PUSH
64785: EMPTY
64786: LIST
64787: LIST
64788: PUSH
64789: LD_INT 0
64791: PUSH
64792: LD_INT 3
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: PUSH
64799: LD_INT 1
64801: PUSH
64802: LD_INT 4
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: PUSH
64809: LD_INT 1
64811: PUSH
64812: LD_INT 5
64814: PUSH
64815: EMPTY
64816: LIST
64817: LIST
64818: PUSH
64819: LD_INT 0
64821: PUSH
64822: LD_INT 5
64824: PUSH
64825: EMPTY
64826: LIST
64827: LIST
64828: PUSH
64829: LD_INT 1
64831: NEG
64832: PUSH
64833: LD_INT 4
64835: PUSH
64836: EMPTY
64837: LIST
64838: LIST
64839: PUSH
64840: LD_INT 1
64842: NEG
64843: PUSH
64844: LD_INT 3
64846: PUSH
64847: EMPTY
64848: LIST
64849: LIST
64850: PUSH
64851: LD_INT 2
64853: PUSH
64854: LD_INT 5
64856: PUSH
64857: EMPTY
64858: LIST
64859: LIST
64860: PUSH
64861: LD_INT 2
64863: NEG
64864: PUSH
64865: LD_INT 3
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: PUSH
64872: LD_INT 3
64874: NEG
64875: PUSH
64876: LD_INT 0
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: PUSH
64883: LD_INT 3
64885: NEG
64886: PUSH
64887: LD_INT 1
64889: NEG
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: PUSH
64895: LD_INT 2
64897: NEG
64898: PUSH
64899: LD_INT 0
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: PUSH
64906: LD_INT 2
64908: NEG
64909: PUSH
64910: LD_INT 1
64912: PUSH
64913: EMPTY
64914: LIST
64915: LIST
64916: PUSH
64917: LD_INT 3
64919: NEG
64920: PUSH
64921: LD_INT 1
64923: PUSH
64924: EMPTY
64925: LIST
64926: LIST
64927: PUSH
64928: LD_INT 4
64930: NEG
64931: PUSH
64932: LD_INT 0
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: PUSH
64939: LD_INT 4
64941: NEG
64942: PUSH
64943: LD_INT 1
64945: NEG
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: PUSH
64951: LD_INT 4
64953: NEG
64954: PUSH
64955: LD_INT 2
64957: NEG
64958: PUSH
64959: EMPTY
64960: LIST
64961: LIST
64962: PUSH
64963: LD_INT 2
64965: NEG
64966: PUSH
64967: LD_INT 2
64969: PUSH
64970: EMPTY
64971: LIST
64972: LIST
64973: PUSH
64974: LD_INT 4
64976: NEG
64977: PUSH
64978: LD_INT 4
64980: NEG
64981: PUSH
64982: EMPTY
64983: LIST
64984: LIST
64985: PUSH
64986: LD_INT 4
64988: NEG
64989: PUSH
64990: LD_INT 5
64992: NEG
64993: PUSH
64994: EMPTY
64995: LIST
64996: LIST
64997: PUSH
64998: LD_INT 3
65000: NEG
65001: PUSH
65002: LD_INT 4
65004: NEG
65005: PUSH
65006: EMPTY
65007: LIST
65008: LIST
65009: PUSH
65010: LD_INT 3
65012: NEG
65013: PUSH
65014: LD_INT 3
65016: NEG
65017: PUSH
65018: EMPTY
65019: LIST
65020: LIST
65021: PUSH
65022: LD_INT 4
65024: NEG
65025: PUSH
65026: LD_INT 3
65028: NEG
65029: PUSH
65030: EMPTY
65031: LIST
65032: LIST
65033: PUSH
65034: LD_INT 5
65036: NEG
65037: PUSH
65038: LD_INT 4
65040: NEG
65041: PUSH
65042: EMPTY
65043: LIST
65044: LIST
65045: PUSH
65046: LD_INT 5
65048: NEG
65049: PUSH
65050: LD_INT 5
65052: NEG
65053: PUSH
65054: EMPTY
65055: LIST
65056: LIST
65057: PUSH
65058: LD_INT 3
65060: NEG
65061: PUSH
65062: LD_INT 5
65064: NEG
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: PUSH
65070: LD_INT 5
65072: NEG
65073: PUSH
65074: LD_INT 3
65076: NEG
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: PUSH
65082: LD_INT 0
65084: PUSH
65085: LD_INT 3
65087: NEG
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: PUSH
65093: LD_INT 0
65095: PUSH
65096: LD_INT 4
65098: NEG
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: PUSH
65104: LD_INT 1
65106: PUSH
65107: LD_INT 3
65109: NEG
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: PUSH
65115: LD_INT 1
65117: PUSH
65118: LD_INT 2
65120: NEG
65121: PUSH
65122: EMPTY
65123: LIST
65124: LIST
65125: PUSH
65126: LD_INT 0
65128: PUSH
65129: LD_INT 2
65131: NEG
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: PUSH
65137: LD_INT 1
65139: NEG
65140: PUSH
65141: LD_INT 3
65143: NEG
65144: PUSH
65145: EMPTY
65146: LIST
65147: LIST
65148: PUSH
65149: LD_INT 1
65151: NEG
65152: PUSH
65153: LD_INT 4
65155: NEG
65156: PUSH
65157: EMPTY
65158: LIST
65159: LIST
65160: PUSH
65161: LD_INT 2
65163: PUSH
65164: LD_INT 2
65166: NEG
65167: PUSH
65168: EMPTY
65169: LIST
65170: LIST
65171: PUSH
65172: LD_INT 2
65174: NEG
65175: PUSH
65176: LD_INT 4
65178: NEG
65179: PUSH
65180: EMPTY
65181: LIST
65182: LIST
65183: PUSH
65184: LD_INT 4
65186: PUSH
65187: LD_INT 0
65189: PUSH
65190: EMPTY
65191: LIST
65192: LIST
65193: PUSH
65194: LD_INT 4
65196: PUSH
65197: LD_INT 1
65199: NEG
65200: PUSH
65201: EMPTY
65202: LIST
65203: LIST
65204: PUSH
65205: LD_INT 5
65207: PUSH
65208: LD_INT 0
65210: PUSH
65211: EMPTY
65212: LIST
65213: LIST
65214: PUSH
65215: LD_INT 5
65217: PUSH
65218: LD_INT 1
65220: PUSH
65221: EMPTY
65222: LIST
65223: LIST
65224: PUSH
65225: LD_INT 4
65227: PUSH
65228: LD_INT 1
65230: PUSH
65231: EMPTY
65232: LIST
65233: LIST
65234: PUSH
65235: LD_INT 3
65237: PUSH
65238: LD_INT 0
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PUSH
65245: LD_INT 3
65247: PUSH
65248: LD_INT 1
65250: NEG
65251: PUSH
65252: EMPTY
65253: LIST
65254: LIST
65255: PUSH
65256: LD_INT 3
65258: PUSH
65259: LD_INT 2
65261: NEG
65262: PUSH
65263: EMPTY
65264: LIST
65265: LIST
65266: PUSH
65267: LD_INT 5
65269: PUSH
65270: LD_INT 2
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: LIST
65281: LIST
65282: LIST
65283: LIST
65284: LIST
65285: LIST
65286: LIST
65287: LIST
65288: LIST
65289: LIST
65290: LIST
65291: LIST
65292: LIST
65293: LIST
65294: LIST
65295: LIST
65296: LIST
65297: LIST
65298: LIST
65299: LIST
65300: LIST
65301: LIST
65302: LIST
65303: LIST
65304: LIST
65305: LIST
65306: LIST
65307: LIST
65308: LIST
65309: LIST
65310: LIST
65311: LIST
65312: LIST
65313: LIST
65314: LIST
65315: LIST
65316: LIST
65317: LIST
65318: LIST
65319: LIST
65320: LIST
65321: LIST
65322: LIST
65323: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
65324: LD_ADDR_VAR 0 32
65328: PUSH
65329: LD_INT 4
65331: NEG
65332: PUSH
65333: LD_INT 0
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: PUSH
65340: LD_INT 4
65342: NEG
65343: PUSH
65344: LD_INT 1
65346: NEG
65347: PUSH
65348: EMPTY
65349: LIST
65350: LIST
65351: PUSH
65352: LD_INT 3
65354: NEG
65355: PUSH
65356: LD_INT 0
65358: PUSH
65359: EMPTY
65360: LIST
65361: LIST
65362: PUSH
65363: LD_INT 3
65365: NEG
65366: PUSH
65367: LD_INT 1
65369: PUSH
65370: EMPTY
65371: LIST
65372: LIST
65373: PUSH
65374: LD_INT 4
65376: NEG
65377: PUSH
65378: LD_INT 1
65380: PUSH
65381: EMPTY
65382: LIST
65383: LIST
65384: PUSH
65385: LD_INT 5
65387: NEG
65388: PUSH
65389: LD_INT 0
65391: PUSH
65392: EMPTY
65393: LIST
65394: LIST
65395: PUSH
65396: LD_INT 5
65398: NEG
65399: PUSH
65400: LD_INT 1
65402: NEG
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: PUSH
65408: LD_INT 5
65410: NEG
65411: PUSH
65412: LD_INT 2
65414: NEG
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: PUSH
65420: LD_INT 3
65422: NEG
65423: PUSH
65424: LD_INT 2
65426: PUSH
65427: EMPTY
65428: LIST
65429: LIST
65430: PUSH
65431: LD_INT 3
65433: NEG
65434: PUSH
65435: LD_INT 3
65437: NEG
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: PUSH
65443: LD_INT 3
65445: NEG
65446: PUSH
65447: LD_INT 4
65449: NEG
65450: PUSH
65451: EMPTY
65452: LIST
65453: LIST
65454: PUSH
65455: LD_INT 2
65457: NEG
65458: PUSH
65459: LD_INT 3
65461: NEG
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: PUSH
65467: LD_INT 2
65469: NEG
65470: PUSH
65471: LD_INT 2
65473: NEG
65474: PUSH
65475: EMPTY
65476: LIST
65477: LIST
65478: PUSH
65479: LD_INT 3
65481: NEG
65482: PUSH
65483: LD_INT 2
65485: NEG
65486: PUSH
65487: EMPTY
65488: LIST
65489: LIST
65490: PUSH
65491: LD_INT 4
65493: NEG
65494: PUSH
65495: LD_INT 3
65497: NEG
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: PUSH
65503: LD_INT 4
65505: NEG
65506: PUSH
65507: LD_INT 4
65509: NEG
65510: PUSH
65511: EMPTY
65512: LIST
65513: LIST
65514: PUSH
65515: LD_INT 2
65517: NEG
65518: PUSH
65519: LD_INT 4
65521: NEG
65522: PUSH
65523: EMPTY
65524: LIST
65525: LIST
65526: PUSH
65527: LD_INT 4
65529: NEG
65530: PUSH
65531: LD_INT 2
65533: NEG
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: PUSH
65539: LD_INT 0
65541: PUSH
65542: LD_INT 4
65544: NEG
65545: PUSH
65546: EMPTY
65547: LIST
65548: LIST
65549: PUSH
65550: LD_INT 0
65552: PUSH
65553: LD_INT 5
65555: NEG
65556: PUSH
65557: EMPTY
65558: LIST
65559: LIST
65560: PUSH
65561: LD_INT 1
65563: PUSH
65564: LD_INT 4
65566: NEG
65567: PUSH
65568: EMPTY
65569: LIST
65570: LIST
65571: PUSH
65572: LD_INT 1
65574: PUSH
65575: LD_INT 3
65577: NEG
65578: PUSH
65579: EMPTY
65580: LIST
65581: LIST
65582: PUSH
65583: LD_INT 0
65585: PUSH
65586: LD_INT 3
65588: NEG
65589: PUSH
65590: EMPTY
65591: LIST
65592: LIST
65593: PUSH
65594: LD_INT 1
65596: NEG
65597: PUSH
65598: LD_INT 4
65600: NEG
65601: PUSH
65602: EMPTY
65603: LIST
65604: LIST
65605: PUSH
65606: LD_INT 1
65608: NEG
65609: PUSH
65610: LD_INT 5
65612: NEG
65613: PUSH
65614: EMPTY
65615: LIST
65616: LIST
65617: PUSH
65618: LD_INT 2
65620: PUSH
65621: LD_INT 3
65623: NEG
65624: PUSH
65625: EMPTY
65626: LIST
65627: LIST
65628: PUSH
65629: LD_INT 2
65631: NEG
65632: PUSH
65633: LD_INT 5
65635: NEG
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: PUSH
65641: LD_INT 3
65643: PUSH
65644: LD_INT 0
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: PUSH
65651: LD_INT 3
65653: PUSH
65654: LD_INT 1
65656: NEG
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: PUSH
65662: LD_INT 4
65664: PUSH
65665: LD_INT 0
65667: PUSH
65668: EMPTY
65669: LIST
65670: LIST
65671: PUSH
65672: LD_INT 4
65674: PUSH
65675: LD_INT 1
65677: PUSH
65678: EMPTY
65679: LIST
65680: LIST
65681: PUSH
65682: LD_INT 3
65684: PUSH
65685: LD_INT 1
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: PUSH
65692: LD_INT 2
65694: PUSH
65695: LD_INT 0
65697: PUSH
65698: EMPTY
65699: LIST
65700: LIST
65701: PUSH
65702: LD_INT 2
65704: PUSH
65705: LD_INT 1
65707: NEG
65708: PUSH
65709: EMPTY
65710: LIST
65711: LIST
65712: PUSH
65713: LD_INT 2
65715: PUSH
65716: LD_INT 2
65718: NEG
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: PUSH
65724: LD_INT 4
65726: PUSH
65727: LD_INT 2
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: PUSH
65734: LD_INT 4
65736: PUSH
65737: LD_INT 4
65739: PUSH
65740: EMPTY
65741: LIST
65742: LIST
65743: PUSH
65744: LD_INT 4
65746: PUSH
65747: LD_INT 3
65749: PUSH
65750: EMPTY
65751: LIST
65752: LIST
65753: PUSH
65754: LD_INT 5
65756: PUSH
65757: LD_INT 4
65759: PUSH
65760: EMPTY
65761: LIST
65762: LIST
65763: PUSH
65764: LD_INT 5
65766: PUSH
65767: LD_INT 5
65769: PUSH
65770: EMPTY
65771: LIST
65772: LIST
65773: PUSH
65774: LD_INT 4
65776: PUSH
65777: LD_INT 5
65779: PUSH
65780: EMPTY
65781: LIST
65782: LIST
65783: PUSH
65784: LD_INT 3
65786: PUSH
65787: LD_INT 4
65789: PUSH
65790: EMPTY
65791: LIST
65792: LIST
65793: PUSH
65794: LD_INT 3
65796: PUSH
65797: LD_INT 3
65799: PUSH
65800: EMPTY
65801: LIST
65802: LIST
65803: PUSH
65804: LD_INT 5
65806: PUSH
65807: LD_INT 3
65809: PUSH
65810: EMPTY
65811: LIST
65812: LIST
65813: PUSH
65814: LD_INT 3
65816: PUSH
65817: LD_INT 5
65819: PUSH
65820: EMPTY
65821: LIST
65822: LIST
65823: PUSH
65824: EMPTY
65825: LIST
65826: LIST
65827: LIST
65828: LIST
65829: LIST
65830: LIST
65831: LIST
65832: LIST
65833: LIST
65834: LIST
65835: LIST
65836: LIST
65837: LIST
65838: LIST
65839: LIST
65840: LIST
65841: LIST
65842: LIST
65843: LIST
65844: LIST
65845: LIST
65846: LIST
65847: LIST
65848: LIST
65849: LIST
65850: LIST
65851: LIST
65852: LIST
65853: LIST
65854: LIST
65855: LIST
65856: LIST
65857: LIST
65858: LIST
65859: LIST
65860: LIST
65861: LIST
65862: LIST
65863: LIST
65864: LIST
65865: LIST
65866: LIST
65867: LIST
65868: LIST
65869: LIST
65870: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
65871: LD_ADDR_VAR 0 33
65875: PUSH
65876: LD_INT 4
65878: NEG
65879: PUSH
65880: LD_INT 4
65882: NEG
65883: PUSH
65884: EMPTY
65885: LIST
65886: LIST
65887: PUSH
65888: LD_INT 4
65890: NEG
65891: PUSH
65892: LD_INT 5
65894: NEG
65895: PUSH
65896: EMPTY
65897: LIST
65898: LIST
65899: PUSH
65900: LD_INT 3
65902: NEG
65903: PUSH
65904: LD_INT 4
65906: NEG
65907: PUSH
65908: EMPTY
65909: LIST
65910: LIST
65911: PUSH
65912: LD_INT 3
65914: NEG
65915: PUSH
65916: LD_INT 3
65918: NEG
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: PUSH
65924: LD_INT 4
65926: NEG
65927: PUSH
65928: LD_INT 3
65930: NEG
65931: PUSH
65932: EMPTY
65933: LIST
65934: LIST
65935: PUSH
65936: LD_INT 5
65938: NEG
65939: PUSH
65940: LD_INT 4
65942: NEG
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: PUSH
65948: LD_INT 5
65950: NEG
65951: PUSH
65952: LD_INT 5
65954: NEG
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: PUSH
65960: LD_INT 3
65962: NEG
65963: PUSH
65964: LD_INT 5
65966: NEG
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: PUSH
65972: LD_INT 5
65974: NEG
65975: PUSH
65976: LD_INT 3
65978: NEG
65979: PUSH
65980: EMPTY
65981: LIST
65982: LIST
65983: PUSH
65984: LD_INT 0
65986: PUSH
65987: LD_INT 3
65989: NEG
65990: PUSH
65991: EMPTY
65992: LIST
65993: LIST
65994: PUSH
65995: LD_INT 0
65997: PUSH
65998: LD_INT 4
66000: NEG
66001: PUSH
66002: EMPTY
66003: LIST
66004: LIST
66005: PUSH
66006: LD_INT 1
66008: PUSH
66009: LD_INT 3
66011: NEG
66012: PUSH
66013: EMPTY
66014: LIST
66015: LIST
66016: PUSH
66017: LD_INT 1
66019: PUSH
66020: LD_INT 2
66022: NEG
66023: PUSH
66024: EMPTY
66025: LIST
66026: LIST
66027: PUSH
66028: LD_INT 0
66030: PUSH
66031: LD_INT 2
66033: NEG
66034: PUSH
66035: EMPTY
66036: LIST
66037: LIST
66038: PUSH
66039: LD_INT 1
66041: NEG
66042: PUSH
66043: LD_INT 3
66045: NEG
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: PUSH
66051: LD_INT 1
66053: NEG
66054: PUSH
66055: LD_INT 4
66057: NEG
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: PUSH
66063: LD_INT 2
66065: PUSH
66066: LD_INT 2
66068: NEG
66069: PUSH
66070: EMPTY
66071: LIST
66072: LIST
66073: PUSH
66074: LD_INT 2
66076: NEG
66077: PUSH
66078: LD_INT 4
66080: NEG
66081: PUSH
66082: EMPTY
66083: LIST
66084: LIST
66085: PUSH
66086: LD_INT 4
66088: PUSH
66089: LD_INT 0
66091: PUSH
66092: EMPTY
66093: LIST
66094: LIST
66095: PUSH
66096: LD_INT 4
66098: PUSH
66099: LD_INT 1
66101: NEG
66102: PUSH
66103: EMPTY
66104: LIST
66105: LIST
66106: PUSH
66107: LD_INT 5
66109: PUSH
66110: LD_INT 0
66112: PUSH
66113: EMPTY
66114: LIST
66115: LIST
66116: PUSH
66117: LD_INT 5
66119: PUSH
66120: LD_INT 1
66122: PUSH
66123: EMPTY
66124: LIST
66125: LIST
66126: PUSH
66127: LD_INT 4
66129: PUSH
66130: LD_INT 1
66132: PUSH
66133: EMPTY
66134: LIST
66135: LIST
66136: PUSH
66137: LD_INT 3
66139: PUSH
66140: LD_INT 0
66142: PUSH
66143: EMPTY
66144: LIST
66145: LIST
66146: PUSH
66147: LD_INT 3
66149: PUSH
66150: LD_INT 1
66152: NEG
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: PUSH
66158: LD_INT 3
66160: PUSH
66161: LD_INT 2
66163: NEG
66164: PUSH
66165: EMPTY
66166: LIST
66167: LIST
66168: PUSH
66169: LD_INT 5
66171: PUSH
66172: LD_INT 2
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: PUSH
66179: LD_INT 3
66181: PUSH
66182: LD_INT 3
66184: PUSH
66185: EMPTY
66186: LIST
66187: LIST
66188: PUSH
66189: LD_INT 3
66191: PUSH
66192: LD_INT 2
66194: PUSH
66195: EMPTY
66196: LIST
66197: LIST
66198: PUSH
66199: LD_INT 4
66201: PUSH
66202: LD_INT 3
66204: PUSH
66205: EMPTY
66206: LIST
66207: LIST
66208: PUSH
66209: LD_INT 4
66211: PUSH
66212: LD_INT 4
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: PUSH
66219: LD_INT 3
66221: PUSH
66222: LD_INT 4
66224: PUSH
66225: EMPTY
66226: LIST
66227: LIST
66228: PUSH
66229: LD_INT 2
66231: PUSH
66232: LD_INT 3
66234: PUSH
66235: EMPTY
66236: LIST
66237: LIST
66238: PUSH
66239: LD_INT 2
66241: PUSH
66242: LD_INT 2
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: PUSH
66249: LD_INT 4
66251: PUSH
66252: LD_INT 2
66254: PUSH
66255: EMPTY
66256: LIST
66257: LIST
66258: PUSH
66259: LD_INT 2
66261: PUSH
66262: LD_INT 4
66264: PUSH
66265: EMPTY
66266: LIST
66267: LIST
66268: PUSH
66269: LD_INT 0
66271: PUSH
66272: LD_INT 4
66274: PUSH
66275: EMPTY
66276: LIST
66277: LIST
66278: PUSH
66279: LD_INT 0
66281: PUSH
66282: LD_INT 3
66284: PUSH
66285: EMPTY
66286: LIST
66287: LIST
66288: PUSH
66289: LD_INT 1
66291: PUSH
66292: LD_INT 4
66294: PUSH
66295: EMPTY
66296: LIST
66297: LIST
66298: PUSH
66299: LD_INT 1
66301: PUSH
66302: LD_INT 5
66304: PUSH
66305: EMPTY
66306: LIST
66307: LIST
66308: PUSH
66309: LD_INT 0
66311: PUSH
66312: LD_INT 5
66314: PUSH
66315: EMPTY
66316: LIST
66317: LIST
66318: PUSH
66319: LD_INT 1
66321: NEG
66322: PUSH
66323: LD_INT 4
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: PUSH
66330: LD_INT 1
66332: NEG
66333: PUSH
66334: LD_INT 3
66336: PUSH
66337: EMPTY
66338: LIST
66339: LIST
66340: PUSH
66341: LD_INT 2
66343: PUSH
66344: LD_INT 5
66346: PUSH
66347: EMPTY
66348: LIST
66349: LIST
66350: PUSH
66351: LD_INT 2
66353: NEG
66354: PUSH
66355: LD_INT 3
66357: PUSH
66358: EMPTY
66359: LIST
66360: LIST
66361: PUSH
66362: EMPTY
66363: LIST
66364: LIST
66365: LIST
66366: LIST
66367: LIST
66368: LIST
66369: LIST
66370: LIST
66371: LIST
66372: LIST
66373: LIST
66374: LIST
66375: LIST
66376: LIST
66377: LIST
66378: LIST
66379: LIST
66380: LIST
66381: LIST
66382: LIST
66383: LIST
66384: LIST
66385: LIST
66386: LIST
66387: LIST
66388: LIST
66389: LIST
66390: LIST
66391: LIST
66392: LIST
66393: LIST
66394: LIST
66395: LIST
66396: LIST
66397: LIST
66398: LIST
66399: LIST
66400: LIST
66401: LIST
66402: LIST
66403: LIST
66404: LIST
66405: LIST
66406: LIST
66407: LIST
66408: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
66409: LD_ADDR_VAR 0 34
66413: PUSH
66414: LD_INT 0
66416: PUSH
66417: LD_INT 4
66419: NEG
66420: PUSH
66421: EMPTY
66422: LIST
66423: LIST
66424: PUSH
66425: LD_INT 0
66427: PUSH
66428: LD_INT 5
66430: NEG
66431: PUSH
66432: EMPTY
66433: LIST
66434: LIST
66435: PUSH
66436: LD_INT 1
66438: PUSH
66439: LD_INT 4
66441: NEG
66442: PUSH
66443: EMPTY
66444: LIST
66445: LIST
66446: PUSH
66447: LD_INT 1
66449: PUSH
66450: LD_INT 3
66452: NEG
66453: PUSH
66454: EMPTY
66455: LIST
66456: LIST
66457: PUSH
66458: LD_INT 0
66460: PUSH
66461: LD_INT 3
66463: NEG
66464: PUSH
66465: EMPTY
66466: LIST
66467: LIST
66468: PUSH
66469: LD_INT 1
66471: NEG
66472: PUSH
66473: LD_INT 4
66475: NEG
66476: PUSH
66477: EMPTY
66478: LIST
66479: LIST
66480: PUSH
66481: LD_INT 1
66483: NEG
66484: PUSH
66485: LD_INT 5
66487: NEG
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: PUSH
66493: LD_INT 2
66495: PUSH
66496: LD_INT 3
66498: NEG
66499: PUSH
66500: EMPTY
66501: LIST
66502: LIST
66503: PUSH
66504: LD_INT 2
66506: NEG
66507: PUSH
66508: LD_INT 5
66510: NEG
66511: PUSH
66512: EMPTY
66513: LIST
66514: LIST
66515: PUSH
66516: LD_INT 3
66518: PUSH
66519: LD_INT 0
66521: PUSH
66522: EMPTY
66523: LIST
66524: LIST
66525: PUSH
66526: LD_INT 3
66528: PUSH
66529: LD_INT 1
66531: NEG
66532: PUSH
66533: EMPTY
66534: LIST
66535: LIST
66536: PUSH
66537: LD_INT 4
66539: PUSH
66540: LD_INT 0
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: PUSH
66547: LD_INT 4
66549: PUSH
66550: LD_INT 1
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: PUSH
66557: LD_INT 3
66559: PUSH
66560: LD_INT 1
66562: PUSH
66563: EMPTY
66564: LIST
66565: LIST
66566: PUSH
66567: LD_INT 2
66569: PUSH
66570: LD_INT 0
66572: PUSH
66573: EMPTY
66574: LIST
66575: LIST
66576: PUSH
66577: LD_INT 2
66579: PUSH
66580: LD_INT 1
66582: NEG
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: PUSH
66588: LD_INT 2
66590: PUSH
66591: LD_INT 2
66593: NEG
66594: PUSH
66595: EMPTY
66596: LIST
66597: LIST
66598: PUSH
66599: LD_INT 4
66601: PUSH
66602: LD_INT 2
66604: PUSH
66605: EMPTY
66606: LIST
66607: LIST
66608: PUSH
66609: LD_INT 4
66611: PUSH
66612: LD_INT 4
66614: PUSH
66615: EMPTY
66616: LIST
66617: LIST
66618: PUSH
66619: LD_INT 4
66621: PUSH
66622: LD_INT 3
66624: PUSH
66625: EMPTY
66626: LIST
66627: LIST
66628: PUSH
66629: LD_INT 5
66631: PUSH
66632: LD_INT 4
66634: PUSH
66635: EMPTY
66636: LIST
66637: LIST
66638: PUSH
66639: LD_INT 5
66641: PUSH
66642: LD_INT 5
66644: PUSH
66645: EMPTY
66646: LIST
66647: LIST
66648: PUSH
66649: LD_INT 4
66651: PUSH
66652: LD_INT 5
66654: PUSH
66655: EMPTY
66656: LIST
66657: LIST
66658: PUSH
66659: LD_INT 3
66661: PUSH
66662: LD_INT 4
66664: PUSH
66665: EMPTY
66666: LIST
66667: LIST
66668: PUSH
66669: LD_INT 3
66671: PUSH
66672: LD_INT 3
66674: PUSH
66675: EMPTY
66676: LIST
66677: LIST
66678: PUSH
66679: LD_INT 5
66681: PUSH
66682: LD_INT 3
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: PUSH
66689: LD_INT 3
66691: PUSH
66692: LD_INT 5
66694: PUSH
66695: EMPTY
66696: LIST
66697: LIST
66698: PUSH
66699: LD_INT 0
66701: PUSH
66702: LD_INT 3
66704: PUSH
66705: EMPTY
66706: LIST
66707: LIST
66708: PUSH
66709: LD_INT 0
66711: PUSH
66712: LD_INT 2
66714: PUSH
66715: EMPTY
66716: LIST
66717: LIST
66718: PUSH
66719: LD_INT 1
66721: PUSH
66722: LD_INT 3
66724: PUSH
66725: EMPTY
66726: LIST
66727: LIST
66728: PUSH
66729: LD_INT 1
66731: PUSH
66732: LD_INT 4
66734: PUSH
66735: EMPTY
66736: LIST
66737: LIST
66738: PUSH
66739: LD_INT 0
66741: PUSH
66742: LD_INT 4
66744: PUSH
66745: EMPTY
66746: LIST
66747: LIST
66748: PUSH
66749: LD_INT 1
66751: NEG
66752: PUSH
66753: LD_INT 3
66755: PUSH
66756: EMPTY
66757: LIST
66758: LIST
66759: PUSH
66760: LD_INT 1
66762: NEG
66763: PUSH
66764: LD_INT 2
66766: PUSH
66767: EMPTY
66768: LIST
66769: LIST
66770: PUSH
66771: LD_INT 2
66773: PUSH
66774: LD_INT 4
66776: PUSH
66777: EMPTY
66778: LIST
66779: LIST
66780: PUSH
66781: LD_INT 2
66783: NEG
66784: PUSH
66785: LD_INT 2
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: PUSH
66792: LD_INT 4
66794: NEG
66795: PUSH
66796: LD_INT 0
66798: PUSH
66799: EMPTY
66800: LIST
66801: LIST
66802: PUSH
66803: LD_INT 4
66805: NEG
66806: PUSH
66807: LD_INT 1
66809: NEG
66810: PUSH
66811: EMPTY
66812: LIST
66813: LIST
66814: PUSH
66815: LD_INT 3
66817: NEG
66818: PUSH
66819: LD_INT 0
66821: PUSH
66822: EMPTY
66823: LIST
66824: LIST
66825: PUSH
66826: LD_INT 3
66828: NEG
66829: PUSH
66830: LD_INT 1
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: PUSH
66837: LD_INT 4
66839: NEG
66840: PUSH
66841: LD_INT 1
66843: PUSH
66844: EMPTY
66845: LIST
66846: LIST
66847: PUSH
66848: LD_INT 5
66850: NEG
66851: PUSH
66852: LD_INT 0
66854: PUSH
66855: EMPTY
66856: LIST
66857: LIST
66858: PUSH
66859: LD_INT 5
66861: NEG
66862: PUSH
66863: LD_INT 1
66865: NEG
66866: PUSH
66867: EMPTY
66868: LIST
66869: LIST
66870: PUSH
66871: LD_INT 5
66873: NEG
66874: PUSH
66875: LD_INT 2
66877: NEG
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: PUSH
66883: LD_INT 3
66885: NEG
66886: PUSH
66887: LD_INT 2
66889: PUSH
66890: EMPTY
66891: LIST
66892: LIST
66893: PUSH
66894: EMPTY
66895: LIST
66896: LIST
66897: LIST
66898: LIST
66899: LIST
66900: LIST
66901: LIST
66902: LIST
66903: LIST
66904: LIST
66905: LIST
66906: LIST
66907: LIST
66908: LIST
66909: LIST
66910: LIST
66911: LIST
66912: LIST
66913: LIST
66914: LIST
66915: LIST
66916: LIST
66917: LIST
66918: LIST
66919: LIST
66920: LIST
66921: LIST
66922: LIST
66923: LIST
66924: LIST
66925: LIST
66926: LIST
66927: LIST
66928: LIST
66929: LIST
66930: LIST
66931: LIST
66932: LIST
66933: LIST
66934: LIST
66935: LIST
66936: LIST
66937: LIST
66938: LIST
66939: LIST
66940: ST_TO_ADDR
// end ; end ;
66941: GO 66944
66943: POP
// case btype of b_depot , b_warehouse :
66944: LD_VAR 0 1
66948: PUSH
66949: LD_INT 0
66951: DOUBLE
66952: EQUAL
66953: IFTRUE 66963
66955: LD_INT 1
66957: DOUBLE
66958: EQUAL
66959: IFTRUE 66963
66961: GO 67164
66963: POP
// case nation of nation_american :
66964: LD_VAR 0 5
66968: PUSH
66969: LD_INT 1
66971: DOUBLE
66972: EQUAL
66973: IFTRUE 66977
66975: GO 67033
66977: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
66978: LD_ADDR_VAR 0 9
66982: PUSH
66983: LD_VAR 0 11
66987: PUSH
66988: LD_VAR 0 12
66992: PUSH
66993: LD_VAR 0 13
66997: PUSH
66998: LD_VAR 0 14
67002: PUSH
67003: LD_VAR 0 15
67007: PUSH
67008: LD_VAR 0 16
67012: PUSH
67013: EMPTY
67014: LIST
67015: LIST
67016: LIST
67017: LIST
67018: LIST
67019: LIST
67020: PUSH
67021: LD_VAR 0 4
67025: PUSH
67026: LD_INT 1
67028: PLUS
67029: ARRAY
67030: ST_TO_ADDR
67031: GO 67162
67033: LD_INT 2
67035: DOUBLE
67036: EQUAL
67037: IFTRUE 67041
67039: GO 67097
67041: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
67042: LD_ADDR_VAR 0 9
67046: PUSH
67047: LD_VAR 0 17
67051: PUSH
67052: LD_VAR 0 18
67056: PUSH
67057: LD_VAR 0 19
67061: PUSH
67062: LD_VAR 0 20
67066: PUSH
67067: LD_VAR 0 21
67071: PUSH
67072: LD_VAR 0 22
67076: PUSH
67077: EMPTY
67078: LIST
67079: LIST
67080: LIST
67081: LIST
67082: LIST
67083: LIST
67084: PUSH
67085: LD_VAR 0 4
67089: PUSH
67090: LD_INT 1
67092: PLUS
67093: ARRAY
67094: ST_TO_ADDR
67095: GO 67162
67097: LD_INT 3
67099: DOUBLE
67100: EQUAL
67101: IFTRUE 67105
67103: GO 67161
67105: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
67106: LD_ADDR_VAR 0 9
67110: PUSH
67111: LD_VAR 0 23
67115: PUSH
67116: LD_VAR 0 24
67120: PUSH
67121: LD_VAR 0 25
67125: PUSH
67126: LD_VAR 0 26
67130: PUSH
67131: LD_VAR 0 27
67135: PUSH
67136: LD_VAR 0 28
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: LIST
67145: LIST
67146: LIST
67147: LIST
67148: PUSH
67149: LD_VAR 0 4
67153: PUSH
67154: LD_INT 1
67156: PLUS
67157: ARRAY
67158: ST_TO_ADDR
67159: GO 67162
67161: POP
67162: GO 67717
67164: LD_INT 2
67166: DOUBLE
67167: EQUAL
67168: IFTRUE 67178
67170: LD_INT 3
67172: DOUBLE
67173: EQUAL
67174: IFTRUE 67178
67176: GO 67234
67178: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
67179: LD_ADDR_VAR 0 9
67183: PUSH
67184: LD_VAR 0 29
67188: PUSH
67189: LD_VAR 0 30
67193: PUSH
67194: LD_VAR 0 31
67198: PUSH
67199: LD_VAR 0 32
67203: PUSH
67204: LD_VAR 0 33
67208: PUSH
67209: LD_VAR 0 34
67213: PUSH
67214: EMPTY
67215: LIST
67216: LIST
67217: LIST
67218: LIST
67219: LIST
67220: LIST
67221: PUSH
67222: LD_VAR 0 4
67226: PUSH
67227: LD_INT 1
67229: PLUS
67230: ARRAY
67231: ST_TO_ADDR
67232: GO 67717
67234: LD_INT 16
67236: DOUBLE
67237: EQUAL
67238: IFTRUE 67296
67240: LD_INT 17
67242: DOUBLE
67243: EQUAL
67244: IFTRUE 67296
67246: LD_INT 18
67248: DOUBLE
67249: EQUAL
67250: IFTRUE 67296
67252: LD_INT 19
67254: DOUBLE
67255: EQUAL
67256: IFTRUE 67296
67258: LD_INT 22
67260: DOUBLE
67261: EQUAL
67262: IFTRUE 67296
67264: LD_INT 20
67266: DOUBLE
67267: EQUAL
67268: IFTRUE 67296
67270: LD_INT 21
67272: DOUBLE
67273: EQUAL
67274: IFTRUE 67296
67276: LD_INT 23
67278: DOUBLE
67279: EQUAL
67280: IFTRUE 67296
67282: LD_INT 24
67284: DOUBLE
67285: EQUAL
67286: IFTRUE 67296
67288: LD_INT 25
67290: DOUBLE
67291: EQUAL
67292: IFTRUE 67296
67294: GO 67352
67296: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
67297: LD_ADDR_VAR 0 9
67301: PUSH
67302: LD_VAR 0 35
67306: PUSH
67307: LD_VAR 0 36
67311: PUSH
67312: LD_VAR 0 37
67316: PUSH
67317: LD_VAR 0 38
67321: PUSH
67322: LD_VAR 0 39
67326: PUSH
67327: LD_VAR 0 40
67331: PUSH
67332: EMPTY
67333: LIST
67334: LIST
67335: LIST
67336: LIST
67337: LIST
67338: LIST
67339: PUSH
67340: LD_VAR 0 4
67344: PUSH
67345: LD_INT 1
67347: PLUS
67348: ARRAY
67349: ST_TO_ADDR
67350: GO 67717
67352: LD_INT 6
67354: DOUBLE
67355: EQUAL
67356: IFTRUE 67408
67358: LD_INT 7
67360: DOUBLE
67361: EQUAL
67362: IFTRUE 67408
67364: LD_INT 8
67366: DOUBLE
67367: EQUAL
67368: IFTRUE 67408
67370: LD_INT 13
67372: DOUBLE
67373: EQUAL
67374: IFTRUE 67408
67376: LD_INT 12
67378: DOUBLE
67379: EQUAL
67380: IFTRUE 67408
67382: LD_INT 15
67384: DOUBLE
67385: EQUAL
67386: IFTRUE 67408
67388: LD_INT 11
67390: DOUBLE
67391: EQUAL
67392: IFTRUE 67408
67394: LD_INT 14
67396: DOUBLE
67397: EQUAL
67398: IFTRUE 67408
67400: LD_INT 10
67402: DOUBLE
67403: EQUAL
67404: IFTRUE 67408
67406: GO 67464
67408: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
67409: LD_ADDR_VAR 0 9
67413: PUSH
67414: LD_VAR 0 41
67418: PUSH
67419: LD_VAR 0 42
67423: PUSH
67424: LD_VAR 0 43
67428: PUSH
67429: LD_VAR 0 44
67433: PUSH
67434: LD_VAR 0 45
67438: PUSH
67439: LD_VAR 0 46
67443: PUSH
67444: EMPTY
67445: LIST
67446: LIST
67447: LIST
67448: LIST
67449: LIST
67450: LIST
67451: PUSH
67452: LD_VAR 0 4
67456: PUSH
67457: LD_INT 1
67459: PLUS
67460: ARRAY
67461: ST_TO_ADDR
67462: GO 67717
67464: LD_INT 36
67466: DOUBLE
67467: EQUAL
67468: IFTRUE 67472
67470: GO 67528
67472: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
67473: LD_ADDR_VAR 0 9
67477: PUSH
67478: LD_VAR 0 47
67482: PUSH
67483: LD_VAR 0 48
67487: PUSH
67488: LD_VAR 0 49
67492: PUSH
67493: LD_VAR 0 50
67497: PUSH
67498: LD_VAR 0 51
67502: PUSH
67503: LD_VAR 0 52
67507: PUSH
67508: EMPTY
67509: LIST
67510: LIST
67511: LIST
67512: LIST
67513: LIST
67514: LIST
67515: PUSH
67516: LD_VAR 0 4
67520: PUSH
67521: LD_INT 1
67523: PLUS
67524: ARRAY
67525: ST_TO_ADDR
67526: GO 67717
67528: LD_INT 4
67530: DOUBLE
67531: EQUAL
67532: IFTRUE 67554
67534: LD_INT 5
67536: DOUBLE
67537: EQUAL
67538: IFTRUE 67554
67540: LD_INT 34
67542: DOUBLE
67543: EQUAL
67544: IFTRUE 67554
67546: LD_INT 37
67548: DOUBLE
67549: EQUAL
67550: IFTRUE 67554
67552: GO 67610
67554: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
67555: LD_ADDR_VAR 0 9
67559: PUSH
67560: LD_VAR 0 53
67564: PUSH
67565: LD_VAR 0 54
67569: PUSH
67570: LD_VAR 0 55
67574: PUSH
67575: LD_VAR 0 56
67579: PUSH
67580: LD_VAR 0 57
67584: PUSH
67585: LD_VAR 0 58
67589: PUSH
67590: EMPTY
67591: LIST
67592: LIST
67593: LIST
67594: LIST
67595: LIST
67596: LIST
67597: PUSH
67598: LD_VAR 0 4
67602: PUSH
67603: LD_INT 1
67605: PLUS
67606: ARRAY
67607: ST_TO_ADDR
67608: GO 67717
67610: LD_INT 31
67612: DOUBLE
67613: EQUAL
67614: IFTRUE 67660
67616: LD_INT 32
67618: DOUBLE
67619: EQUAL
67620: IFTRUE 67660
67622: LD_INT 33
67624: DOUBLE
67625: EQUAL
67626: IFTRUE 67660
67628: LD_INT 27
67630: DOUBLE
67631: EQUAL
67632: IFTRUE 67660
67634: LD_INT 26
67636: DOUBLE
67637: EQUAL
67638: IFTRUE 67660
67640: LD_INT 28
67642: DOUBLE
67643: EQUAL
67644: IFTRUE 67660
67646: LD_INT 29
67648: DOUBLE
67649: EQUAL
67650: IFTRUE 67660
67652: LD_INT 30
67654: DOUBLE
67655: EQUAL
67656: IFTRUE 67660
67658: GO 67716
67660: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
67661: LD_ADDR_VAR 0 9
67665: PUSH
67666: LD_VAR 0 59
67670: PUSH
67671: LD_VAR 0 60
67675: PUSH
67676: LD_VAR 0 61
67680: PUSH
67681: LD_VAR 0 62
67685: PUSH
67686: LD_VAR 0 63
67690: PUSH
67691: LD_VAR 0 64
67695: PUSH
67696: EMPTY
67697: LIST
67698: LIST
67699: LIST
67700: LIST
67701: LIST
67702: LIST
67703: PUSH
67704: LD_VAR 0 4
67708: PUSH
67709: LD_INT 1
67711: PLUS
67712: ARRAY
67713: ST_TO_ADDR
67714: GO 67717
67716: POP
// temp_list2 = [ ] ;
67717: LD_ADDR_VAR 0 10
67721: PUSH
67722: EMPTY
67723: ST_TO_ADDR
// for i in temp_list do
67724: LD_ADDR_VAR 0 8
67728: PUSH
67729: LD_VAR 0 9
67733: PUSH
67734: FOR_IN
67735: IFFALSE 67787
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
67737: LD_ADDR_VAR 0 10
67741: PUSH
67742: LD_VAR 0 10
67746: PUSH
67747: LD_VAR 0 8
67751: PUSH
67752: LD_INT 1
67754: ARRAY
67755: PUSH
67756: LD_VAR 0 2
67760: PLUS
67761: PUSH
67762: LD_VAR 0 8
67766: PUSH
67767: LD_INT 2
67769: ARRAY
67770: PUSH
67771: LD_VAR 0 3
67775: PLUS
67776: PUSH
67777: EMPTY
67778: LIST
67779: LIST
67780: PUSH
67781: EMPTY
67782: LIST
67783: ADD
67784: ST_TO_ADDR
67785: GO 67734
67787: POP
67788: POP
// result = temp_list2 ;
67789: LD_ADDR_VAR 0 7
67793: PUSH
67794: LD_VAR 0 10
67798: ST_TO_ADDR
// end ;
67799: LD_VAR 0 7
67803: RET
// export function EnemyInRange ( unit , dist ) ; begin
67804: LD_INT 0
67806: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
67807: LD_ADDR_VAR 0 3
67811: PUSH
67812: LD_VAR 0 1
67816: PPUSH
67817: CALL_OW 255
67821: PPUSH
67822: LD_VAR 0 1
67826: PPUSH
67827: CALL_OW 250
67831: PPUSH
67832: LD_VAR 0 1
67836: PPUSH
67837: CALL_OW 251
67841: PPUSH
67842: LD_VAR 0 2
67846: PPUSH
67847: CALL 41206 0 4
67851: PUSH
67852: LD_INT 4
67854: ARRAY
67855: ST_TO_ADDR
// end ;
67856: LD_VAR 0 3
67860: RET
// export function PlayerSeeMe ( unit ) ; begin
67861: LD_INT 0
67863: PPUSH
// result := See ( your_side , unit ) ;
67864: LD_ADDR_VAR 0 2
67868: PUSH
67869: LD_OWVAR 2
67873: PPUSH
67874: LD_VAR 0 1
67878: PPUSH
67879: CALL_OW 292
67883: ST_TO_ADDR
// end ;
67884: LD_VAR 0 2
67888: RET
// export function ReverseDir ( unit ) ; begin
67889: LD_INT 0
67891: PPUSH
// if not unit then
67892: LD_VAR 0 1
67896: NOT
67897: IFFALSE 67901
// exit ;
67899: GO 67924
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
67901: LD_ADDR_VAR 0 2
67905: PUSH
67906: LD_VAR 0 1
67910: PPUSH
67911: CALL_OW 254
67915: PUSH
67916: LD_INT 3
67918: PLUS
67919: PUSH
67920: LD_INT 6
67922: MOD
67923: ST_TO_ADDR
// end ;
67924: LD_VAR 0 2
67928: RET
// export function ReverseArray ( array ) ; var i ; begin
67929: LD_INT 0
67931: PPUSH
67932: PPUSH
// if not array then
67933: LD_VAR 0 1
67937: NOT
67938: IFFALSE 67942
// exit ;
67940: GO 67997
// result := [ ] ;
67942: LD_ADDR_VAR 0 2
67946: PUSH
67947: EMPTY
67948: ST_TO_ADDR
// for i := array downto 1 do
67949: LD_ADDR_VAR 0 3
67953: PUSH
67954: DOUBLE
67955: LD_VAR 0 1
67959: INC
67960: ST_TO_ADDR
67961: LD_INT 1
67963: PUSH
67964: FOR_DOWNTO
67965: IFFALSE 67995
// result := Join ( result , array [ i ] ) ;
67967: LD_ADDR_VAR 0 2
67971: PUSH
67972: LD_VAR 0 2
67976: PPUSH
67977: LD_VAR 0 1
67981: PUSH
67982: LD_VAR 0 3
67986: ARRAY
67987: PPUSH
67988: CALL 72622 0 2
67992: ST_TO_ADDR
67993: GO 67964
67995: POP
67996: POP
// end ;
67997: LD_VAR 0 2
68001: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
68002: LD_INT 0
68004: PPUSH
68005: PPUSH
68006: PPUSH
68007: PPUSH
68008: PPUSH
68009: PPUSH
// if not unit or not hexes then
68010: LD_VAR 0 1
68014: NOT
68015: PUSH
68016: LD_VAR 0 2
68020: NOT
68021: OR
68022: IFFALSE 68026
// exit ;
68024: GO 68149
// dist := 9999 ;
68026: LD_ADDR_VAR 0 5
68030: PUSH
68031: LD_INT 9999
68033: ST_TO_ADDR
// for i = 1 to hexes do
68034: LD_ADDR_VAR 0 4
68038: PUSH
68039: DOUBLE
68040: LD_INT 1
68042: DEC
68043: ST_TO_ADDR
68044: LD_VAR 0 2
68048: PUSH
68049: FOR_TO
68050: IFFALSE 68137
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
68052: LD_ADDR_VAR 0 6
68056: PUSH
68057: LD_VAR 0 1
68061: PPUSH
68062: LD_VAR 0 2
68066: PUSH
68067: LD_VAR 0 4
68071: ARRAY
68072: PUSH
68073: LD_INT 1
68075: ARRAY
68076: PPUSH
68077: LD_VAR 0 2
68081: PUSH
68082: LD_VAR 0 4
68086: ARRAY
68087: PUSH
68088: LD_INT 2
68090: ARRAY
68091: PPUSH
68092: CALL_OW 297
68096: ST_TO_ADDR
// if tdist < dist then
68097: LD_VAR 0 6
68101: PUSH
68102: LD_VAR 0 5
68106: LESS
68107: IFFALSE 68135
// begin hex := hexes [ i ] ;
68109: LD_ADDR_VAR 0 8
68113: PUSH
68114: LD_VAR 0 2
68118: PUSH
68119: LD_VAR 0 4
68123: ARRAY
68124: ST_TO_ADDR
// dist := tdist ;
68125: LD_ADDR_VAR 0 5
68129: PUSH
68130: LD_VAR 0 6
68134: ST_TO_ADDR
// end ; end ;
68135: GO 68049
68137: POP
68138: POP
// result := hex ;
68139: LD_ADDR_VAR 0 3
68143: PUSH
68144: LD_VAR 0 8
68148: ST_TO_ADDR
// end ;
68149: LD_VAR 0 3
68153: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
68154: LD_INT 0
68156: PPUSH
68157: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
68158: LD_VAR 0 1
68162: NOT
68163: PUSH
68164: LD_VAR 0 1
68168: PUSH
68169: LD_INT 21
68171: PUSH
68172: LD_INT 2
68174: PUSH
68175: EMPTY
68176: LIST
68177: LIST
68178: PUSH
68179: LD_INT 23
68181: PUSH
68182: LD_INT 2
68184: PUSH
68185: EMPTY
68186: LIST
68187: LIST
68188: PUSH
68189: EMPTY
68190: LIST
68191: LIST
68192: PPUSH
68193: CALL_OW 69
68197: IN
68198: NOT
68199: OR
68200: IFFALSE 68204
// exit ;
68202: GO 68251
// for i = 1 to 3 do
68204: LD_ADDR_VAR 0 3
68208: PUSH
68209: DOUBLE
68210: LD_INT 1
68212: DEC
68213: ST_TO_ADDR
68214: LD_INT 3
68216: PUSH
68217: FOR_TO
68218: IFFALSE 68249
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
68220: LD_VAR 0 1
68224: PPUSH
68225: CALL_OW 250
68229: PPUSH
68230: LD_VAR 0 1
68234: PPUSH
68235: CALL_OW 251
68239: PPUSH
68240: LD_INT 1
68242: PPUSH
68243: CALL_OW 453
68247: GO 68217
68249: POP
68250: POP
// end ;
68251: LD_VAR 0 2
68255: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
68256: LD_INT 0
68258: PPUSH
68259: PPUSH
68260: PPUSH
68261: PPUSH
68262: PPUSH
68263: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
68264: LD_VAR 0 1
68268: NOT
68269: PUSH
68270: LD_VAR 0 2
68274: NOT
68275: OR
68276: PUSH
68277: LD_VAR 0 1
68281: PPUSH
68282: CALL_OW 314
68286: OR
68287: IFFALSE 68291
// exit ;
68289: GO 68732
// x := GetX ( enemy_unit ) ;
68291: LD_ADDR_VAR 0 7
68295: PUSH
68296: LD_VAR 0 2
68300: PPUSH
68301: CALL_OW 250
68305: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
68306: LD_ADDR_VAR 0 8
68310: PUSH
68311: LD_VAR 0 2
68315: PPUSH
68316: CALL_OW 251
68320: ST_TO_ADDR
// if not x or not y then
68321: LD_VAR 0 7
68325: NOT
68326: PUSH
68327: LD_VAR 0 8
68331: NOT
68332: OR
68333: IFFALSE 68337
// exit ;
68335: GO 68732
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
68337: LD_ADDR_VAR 0 6
68341: PUSH
68342: LD_VAR 0 7
68346: PPUSH
68347: LD_INT 0
68349: PPUSH
68350: LD_INT 4
68352: PPUSH
68353: CALL_OW 272
68357: PUSH
68358: LD_VAR 0 8
68362: PPUSH
68363: LD_INT 0
68365: PPUSH
68366: LD_INT 4
68368: PPUSH
68369: CALL_OW 273
68373: PUSH
68374: EMPTY
68375: LIST
68376: LIST
68377: PUSH
68378: LD_VAR 0 7
68382: PPUSH
68383: LD_INT 1
68385: PPUSH
68386: LD_INT 4
68388: PPUSH
68389: CALL_OW 272
68393: PUSH
68394: LD_VAR 0 8
68398: PPUSH
68399: LD_INT 1
68401: PPUSH
68402: LD_INT 4
68404: PPUSH
68405: CALL_OW 273
68409: PUSH
68410: EMPTY
68411: LIST
68412: LIST
68413: PUSH
68414: LD_VAR 0 7
68418: PPUSH
68419: LD_INT 2
68421: PPUSH
68422: LD_INT 4
68424: PPUSH
68425: CALL_OW 272
68429: PUSH
68430: LD_VAR 0 8
68434: PPUSH
68435: LD_INT 2
68437: PPUSH
68438: LD_INT 4
68440: PPUSH
68441: CALL_OW 273
68445: PUSH
68446: EMPTY
68447: LIST
68448: LIST
68449: PUSH
68450: LD_VAR 0 7
68454: PPUSH
68455: LD_INT 3
68457: PPUSH
68458: LD_INT 4
68460: PPUSH
68461: CALL_OW 272
68465: PUSH
68466: LD_VAR 0 8
68470: PPUSH
68471: LD_INT 3
68473: PPUSH
68474: LD_INT 4
68476: PPUSH
68477: CALL_OW 273
68481: PUSH
68482: EMPTY
68483: LIST
68484: LIST
68485: PUSH
68486: LD_VAR 0 7
68490: PPUSH
68491: LD_INT 4
68493: PPUSH
68494: LD_INT 4
68496: PPUSH
68497: CALL_OW 272
68501: PUSH
68502: LD_VAR 0 8
68506: PPUSH
68507: LD_INT 4
68509: PPUSH
68510: LD_INT 4
68512: PPUSH
68513: CALL_OW 273
68517: PUSH
68518: EMPTY
68519: LIST
68520: LIST
68521: PUSH
68522: LD_VAR 0 7
68526: PPUSH
68527: LD_INT 5
68529: PPUSH
68530: LD_INT 4
68532: PPUSH
68533: CALL_OW 272
68537: PUSH
68538: LD_VAR 0 8
68542: PPUSH
68543: LD_INT 5
68545: PPUSH
68546: LD_INT 4
68548: PPUSH
68549: CALL_OW 273
68553: PUSH
68554: EMPTY
68555: LIST
68556: LIST
68557: PUSH
68558: EMPTY
68559: LIST
68560: LIST
68561: LIST
68562: LIST
68563: LIST
68564: LIST
68565: ST_TO_ADDR
// for i = tmp downto 1 do
68566: LD_ADDR_VAR 0 4
68570: PUSH
68571: DOUBLE
68572: LD_VAR 0 6
68576: INC
68577: ST_TO_ADDR
68578: LD_INT 1
68580: PUSH
68581: FOR_DOWNTO
68582: IFFALSE 68683
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
68584: LD_VAR 0 6
68588: PUSH
68589: LD_VAR 0 4
68593: ARRAY
68594: PUSH
68595: LD_INT 1
68597: ARRAY
68598: PPUSH
68599: LD_VAR 0 6
68603: PUSH
68604: LD_VAR 0 4
68608: ARRAY
68609: PUSH
68610: LD_INT 2
68612: ARRAY
68613: PPUSH
68614: CALL_OW 488
68618: NOT
68619: PUSH
68620: LD_VAR 0 6
68624: PUSH
68625: LD_VAR 0 4
68629: ARRAY
68630: PUSH
68631: LD_INT 1
68633: ARRAY
68634: PPUSH
68635: LD_VAR 0 6
68639: PUSH
68640: LD_VAR 0 4
68644: ARRAY
68645: PUSH
68646: LD_INT 2
68648: ARRAY
68649: PPUSH
68650: CALL_OW 428
68654: PUSH
68655: LD_INT 0
68657: NONEQUAL
68658: OR
68659: IFFALSE 68681
// tmp := Delete ( tmp , i ) ;
68661: LD_ADDR_VAR 0 6
68665: PUSH
68666: LD_VAR 0 6
68670: PPUSH
68671: LD_VAR 0 4
68675: PPUSH
68676: CALL_OW 3
68680: ST_TO_ADDR
68681: GO 68581
68683: POP
68684: POP
// j := GetClosestHex ( unit , tmp ) ;
68685: LD_ADDR_VAR 0 5
68689: PUSH
68690: LD_VAR 0 1
68694: PPUSH
68695: LD_VAR 0 6
68699: PPUSH
68700: CALL 68002 0 2
68704: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
68705: LD_VAR 0 1
68709: PPUSH
68710: LD_VAR 0 5
68714: PUSH
68715: LD_INT 1
68717: ARRAY
68718: PPUSH
68719: LD_VAR 0 5
68723: PUSH
68724: LD_INT 2
68726: ARRAY
68727: PPUSH
68728: CALL_OW 111
// end ;
68732: LD_VAR 0 3
68736: RET
// export function PrepareApemanSoldier ( ) ; begin
68737: LD_INT 0
68739: PPUSH
// uc_nation := 0 ;
68740: LD_ADDR_OWVAR 21
68744: PUSH
68745: LD_INT 0
68747: ST_TO_ADDR
// hc_sex := sex_male ;
68748: LD_ADDR_OWVAR 27
68752: PUSH
68753: LD_INT 1
68755: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
68756: LD_ADDR_OWVAR 28
68760: PUSH
68761: LD_INT 15
68763: ST_TO_ADDR
// hc_gallery :=  ;
68764: LD_ADDR_OWVAR 33
68768: PUSH
68769: LD_STRING 
68771: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68772: LD_ADDR_OWVAR 31
68776: PUSH
68777: LD_INT 0
68779: PPUSH
68780: LD_INT 3
68782: PPUSH
68783: CALL_OW 12
68787: PUSH
68788: LD_INT 0
68790: PPUSH
68791: LD_INT 3
68793: PPUSH
68794: CALL_OW 12
68798: PUSH
68799: LD_INT 0
68801: PUSH
68802: LD_INT 0
68804: PUSH
68805: EMPTY
68806: LIST
68807: LIST
68808: LIST
68809: LIST
68810: ST_TO_ADDR
// end ;
68811: LD_VAR 0 1
68815: RET
// export function PrepareApemanEngineer ( ) ; begin
68816: LD_INT 0
68818: PPUSH
// uc_nation := 0 ;
68819: LD_ADDR_OWVAR 21
68823: PUSH
68824: LD_INT 0
68826: ST_TO_ADDR
// hc_sex := sex_male ;
68827: LD_ADDR_OWVAR 27
68831: PUSH
68832: LD_INT 1
68834: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
68835: LD_ADDR_OWVAR 28
68839: PUSH
68840: LD_INT 16
68842: ST_TO_ADDR
// hc_gallery :=  ;
68843: LD_ADDR_OWVAR 33
68847: PUSH
68848: LD_STRING 
68850: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68851: LD_ADDR_OWVAR 31
68855: PUSH
68856: LD_INT 0
68858: PPUSH
68859: LD_INT 3
68861: PPUSH
68862: CALL_OW 12
68866: PUSH
68867: LD_INT 0
68869: PPUSH
68870: LD_INT 3
68872: PPUSH
68873: CALL_OW 12
68877: PUSH
68878: LD_INT 0
68880: PUSH
68881: LD_INT 0
68883: PUSH
68884: EMPTY
68885: LIST
68886: LIST
68887: LIST
68888: LIST
68889: ST_TO_ADDR
// end ;
68890: LD_VAR 0 1
68894: RET
// export function PrepareApeman ( agressivity ) ; begin
68895: LD_INT 0
68897: PPUSH
// uc_side := 0 ;
68898: LD_ADDR_OWVAR 20
68902: PUSH
68903: LD_INT 0
68905: ST_TO_ADDR
// uc_nation := 0 ;
68906: LD_ADDR_OWVAR 21
68910: PUSH
68911: LD_INT 0
68913: ST_TO_ADDR
// hc_sex := sex_male ;
68914: LD_ADDR_OWVAR 27
68918: PUSH
68919: LD_INT 1
68921: ST_TO_ADDR
// hc_class := class_apeman ;
68922: LD_ADDR_OWVAR 28
68926: PUSH
68927: LD_INT 12
68929: ST_TO_ADDR
// hc_gallery :=  ;
68930: LD_ADDR_OWVAR 33
68934: PUSH
68935: LD_STRING 
68937: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
68938: LD_ADDR_OWVAR 35
68942: PUSH
68943: LD_VAR 0 1
68947: NEG
68948: PPUSH
68949: LD_VAR 0 1
68953: PPUSH
68954: CALL_OW 12
68958: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68959: LD_ADDR_OWVAR 31
68963: PUSH
68964: LD_INT 0
68966: PPUSH
68967: LD_INT 3
68969: PPUSH
68970: CALL_OW 12
68974: PUSH
68975: LD_INT 0
68977: PPUSH
68978: LD_INT 3
68980: PPUSH
68981: CALL_OW 12
68985: PUSH
68986: LD_INT 0
68988: PUSH
68989: LD_INT 0
68991: PUSH
68992: EMPTY
68993: LIST
68994: LIST
68995: LIST
68996: LIST
68997: ST_TO_ADDR
// end ;
68998: LD_VAR 0 2
69002: RET
// export function PrepareTiger ( agressivity ) ; begin
69003: LD_INT 0
69005: PPUSH
// uc_side := 0 ;
69006: LD_ADDR_OWVAR 20
69010: PUSH
69011: LD_INT 0
69013: ST_TO_ADDR
// uc_nation := 0 ;
69014: LD_ADDR_OWVAR 21
69018: PUSH
69019: LD_INT 0
69021: ST_TO_ADDR
// hc_class := class_tiger ;
69022: LD_ADDR_OWVAR 28
69026: PUSH
69027: LD_INT 14
69029: ST_TO_ADDR
// hc_gallery :=  ;
69030: LD_ADDR_OWVAR 33
69034: PUSH
69035: LD_STRING 
69037: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
69038: LD_ADDR_OWVAR 35
69042: PUSH
69043: LD_VAR 0 1
69047: NEG
69048: PPUSH
69049: LD_VAR 0 1
69053: PPUSH
69054: CALL_OW 12
69058: ST_TO_ADDR
// end ;
69059: LD_VAR 0 2
69063: RET
// export function PrepareEnchidna ( ) ; begin
69064: LD_INT 0
69066: PPUSH
// uc_side := 0 ;
69067: LD_ADDR_OWVAR 20
69071: PUSH
69072: LD_INT 0
69074: ST_TO_ADDR
// uc_nation := 0 ;
69075: LD_ADDR_OWVAR 21
69079: PUSH
69080: LD_INT 0
69082: ST_TO_ADDR
// hc_class := class_baggie ;
69083: LD_ADDR_OWVAR 28
69087: PUSH
69088: LD_INT 13
69090: ST_TO_ADDR
// hc_gallery :=  ;
69091: LD_ADDR_OWVAR 33
69095: PUSH
69096: LD_STRING 
69098: ST_TO_ADDR
// end ;
69099: LD_VAR 0 1
69103: RET
// export function PrepareFrog ( ) ; begin
69104: LD_INT 0
69106: PPUSH
// uc_side := 0 ;
69107: LD_ADDR_OWVAR 20
69111: PUSH
69112: LD_INT 0
69114: ST_TO_ADDR
// uc_nation := 0 ;
69115: LD_ADDR_OWVAR 21
69119: PUSH
69120: LD_INT 0
69122: ST_TO_ADDR
// hc_class := class_frog ;
69123: LD_ADDR_OWVAR 28
69127: PUSH
69128: LD_INT 19
69130: ST_TO_ADDR
// hc_gallery :=  ;
69131: LD_ADDR_OWVAR 33
69135: PUSH
69136: LD_STRING 
69138: ST_TO_ADDR
// end ;
69139: LD_VAR 0 1
69143: RET
// export function PrepareFish ( ) ; begin
69144: LD_INT 0
69146: PPUSH
// uc_side := 0 ;
69147: LD_ADDR_OWVAR 20
69151: PUSH
69152: LD_INT 0
69154: ST_TO_ADDR
// uc_nation := 0 ;
69155: LD_ADDR_OWVAR 21
69159: PUSH
69160: LD_INT 0
69162: ST_TO_ADDR
// hc_class := class_fish ;
69163: LD_ADDR_OWVAR 28
69167: PUSH
69168: LD_INT 20
69170: ST_TO_ADDR
// hc_gallery :=  ;
69171: LD_ADDR_OWVAR 33
69175: PUSH
69176: LD_STRING 
69178: ST_TO_ADDR
// end ;
69179: LD_VAR 0 1
69183: RET
// export function PrepareBird ( ) ; begin
69184: LD_INT 0
69186: PPUSH
// uc_side := 0 ;
69187: LD_ADDR_OWVAR 20
69191: PUSH
69192: LD_INT 0
69194: ST_TO_ADDR
// uc_nation := 0 ;
69195: LD_ADDR_OWVAR 21
69199: PUSH
69200: LD_INT 0
69202: ST_TO_ADDR
// hc_class := class_phororhacos ;
69203: LD_ADDR_OWVAR 28
69207: PUSH
69208: LD_INT 18
69210: ST_TO_ADDR
// hc_gallery :=  ;
69211: LD_ADDR_OWVAR 33
69215: PUSH
69216: LD_STRING 
69218: ST_TO_ADDR
// end ;
69219: LD_VAR 0 1
69223: RET
// export function PrepareHorse ( ) ; begin
69224: LD_INT 0
69226: PPUSH
// uc_side := 0 ;
69227: LD_ADDR_OWVAR 20
69231: PUSH
69232: LD_INT 0
69234: ST_TO_ADDR
// uc_nation := 0 ;
69235: LD_ADDR_OWVAR 21
69239: PUSH
69240: LD_INT 0
69242: ST_TO_ADDR
// hc_class := class_horse ;
69243: LD_ADDR_OWVAR 28
69247: PUSH
69248: LD_INT 21
69250: ST_TO_ADDR
// hc_gallery :=  ;
69251: LD_ADDR_OWVAR 33
69255: PUSH
69256: LD_STRING 
69258: ST_TO_ADDR
// end ;
69259: LD_VAR 0 1
69263: RET
// export function PrepareMastodont ( ) ; begin
69264: LD_INT 0
69266: PPUSH
// uc_side := 0 ;
69267: LD_ADDR_OWVAR 20
69271: PUSH
69272: LD_INT 0
69274: ST_TO_ADDR
// uc_nation := 0 ;
69275: LD_ADDR_OWVAR 21
69279: PUSH
69280: LD_INT 0
69282: ST_TO_ADDR
// vc_chassis := class_mastodont ;
69283: LD_ADDR_OWVAR 37
69287: PUSH
69288: LD_INT 31
69290: ST_TO_ADDR
// vc_control := control_rider ;
69291: LD_ADDR_OWVAR 38
69295: PUSH
69296: LD_INT 4
69298: ST_TO_ADDR
// end ;
69299: LD_VAR 0 1
69303: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
69304: LD_INT 0
69306: PPUSH
69307: PPUSH
69308: PPUSH
// uc_side = 0 ;
69309: LD_ADDR_OWVAR 20
69313: PUSH
69314: LD_INT 0
69316: ST_TO_ADDR
// uc_nation = 0 ;
69317: LD_ADDR_OWVAR 21
69321: PUSH
69322: LD_INT 0
69324: ST_TO_ADDR
// InitHc_All ( ) ;
69325: CALL_OW 584
// InitVc ;
69329: CALL_OW 20
// if mastodonts then
69333: LD_VAR 0 6
69337: IFFALSE 69404
// for i = 1 to mastodonts do
69339: LD_ADDR_VAR 0 11
69343: PUSH
69344: DOUBLE
69345: LD_INT 1
69347: DEC
69348: ST_TO_ADDR
69349: LD_VAR 0 6
69353: PUSH
69354: FOR_TO
69355: IFFALSE 69402
// begin vc_chassis := 31 ;
69357: LD_ADDR_OWVAR 37
69361: PUSH
69362: LD_INT 31
69364: ST_TO_ADDR
// vc_control := control_rider ;
69365: LD_ADDR_OWVAR 38
69369: PUSH
69370: LD_INT 4
69372: ST_TO_ADDR
// animal := CreateVehicle ;
69373: LD_ADDR_VAR 0 12
69377: PUSH
69378: CALL_OW 45
69382: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69383: LD_VAR 0 12
69387: PPUSH
69388: LD_VAR 0 8
69392: PPUSH
69393: LD_INT 0
69395: PPUSH
69396: CALL 71539 0 3
// end ;
69400: GO 69354
69402: POP
69403: POP
// if horses then
69404: LD_VAR 0 5
69408: IFFALSE 69475
// for i = 1 to horses do
69410: LD_ADDR_VAR 0 11
69414: PUSH
69415: DOUBLE
69416: LD_INT 1
69418: DEC
69419: ST_TO_ADDR
69420: LD_VAR 0 5
69424: PUSH
69425: FOR_TO
69426: IFFALSE 69473
// begin hc_class := 21 ;
69428: LD_ADDR_OWVAR 28
69432: PUSH
69433: LD_INT 21
69435: ST_TO_ADDR
// hc_gallery :=  ;
69436: LD_ADDR_OWVAR 33
69440: PUSH
69441: LD_STRING 
69443: ST_TO_ADDR
// animal := CreateHuman ;
69444: LD_ADDR_VAR 0 12
69448: PUSH
69449: CALL_OW 44
69453: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69454: LD_VAR 0 12
69458: PPUSH
69459: LD_VAR 0 8
69463: PPUSH
69464: LD_INT 0
69466: PPUSH
69467: CALL 71539 0 3
// end ;
69471: GO 69425
69473: POP
69474: POP
// if birds then
69475: LD_VAR 0 1
69479: IFFALSE 69546
// for i = 1 to birds do
69481: LD_ADDR_VAR 0 11
69485: PUSH
69486: DOUBLE
69487: LD_INT 1
69489: DEC
69490: ST_TO_ADDR
69491: LD_VAR 0 1
69495: PUSH
69496: FOR_TO
69497: IFFALSE 69544
// begin hc_class = 18 ;
69499: LD_ADDR_OWVAR 28
69503: PUSH
69504: LD_INT 18
69506: ST_TO_ADDR
// hc_gallery =  ;
69507: LD_ADDR_OWVAR 33
69511: PUSH
69512: LD_STRING 
69514: ST_TO_ADDR
// animal := CreateHuman ;
69515: LD_ADDR_VAR 0 12
69519: PUSH
69520: CALL_OW 44
69524: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69525: LD_VAR 0 12
69529: PPUSH
69530: LD_VAR 0 8
69534: PPUSH
69535: LD_INT 0
69537: PPUSH
69538: CALL 71539 0 3
// end ;
69542: GO 69496
69544: POP
69545: POP
// if tigers then
69546: LD_VAR 0 2
69550: IFFALSE 69634
// for i = 1 to tigers do
69552: LD_ADDR_VAR 0 11
69556: PUSH
69557: DOUBLE
69558: LD_INT 1
69560: DEC
69561: ST_TO_ADDR
69562: LD_VAR 0 2
69566: PUSH
69567: FOR_TO
69568: IFFALSE 69632
// begin hc_class = class_tiger ;
69570: LD_ADDR_OWVAR 28
69574: PUSH
69575: LD_INT 14
69577: ST_TO_ADDR
// hc_gallery =  ;
69578: LD_ADDR_OWVAR 33
69582: PUSH
69583: LD_STRING 
69585: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
69586: LD_ADDR_OWVAR 35
69590: PUSH
69591: LD_INT 7
69593: NEG
69594: PPUSH
69595: LD_INT 7
69597: PPUSH
69598: CALL_OW 12
69602: ST_TO_ADDR
// animal := CreateHuman ;
69603: LD_ADDR_VAR 0 12
69607: PUSH
69608: CALL_OW 44
69612: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69613: LD_VAR 0 12
69617: PPUSH
69618: LD_VAR 0 8
69622: PPUSH
69623: LD_INT 0
69625: PPUSH
69626: CALL 71539 0 3
// end ;
69630: GO 69567
69632: POP
69633: POP
// if apemans then
69634: LD_VAR 0 3
69638: IFFALSE 69761
// for i = 1 to apemans do
69640: LD_ADDR_VAR 0 11
69644: PUSH
69645: DOUBLE
69646: LD_INT 1
69648: DEC
69649: ST_TO_ADDR
69650: LD_VAR 0 3
69654: PUSH
69655: FOR_TO
69656: IFFALSE 69759
// begin hc_class = class_apeman ;
69658: LD_ADDR_OWVAR 28
69662: PUSH
69663: LD_INT 12
69665: ST_TO_ADDR
// hc_gallery =  ;
69666: LD_ADDR_OWVAR 33
69670: PUSH
69671: LD_STRING 
69673: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
69674: LD_ADDR_OWVAR 35
69678: PUSH
69679: LD_INT 2
69681: NEG
69682: PPUSH
69683: LD_INT 2
69685: PPUSH
69686: CALL_OW 12
69690: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
69691: LD_ADDR_OWVAR 31
69695: PUSH
69696: LD_INT 1
69698: PPUSH
69699: LD_INT 3
69701: PPUSH
69702: CALL_OW 12
69706: PUSH
69707: LD_INT 1
69709: PPUSH
69710: LD_INT 3
69712: PPUSH
69713: CALL_OW 12
69717: PUSH
69718: LD_INT 0
69720: PUSH
69721: LD_INT 0
69723: PUSH
69724: EMPTY
69725: LIST
69726: LIST
69727: LIST
69728: LIST
69729: ST_TO_ADDR
// animal := CreateHuman ;
69730: LD_ADDR_VAR 0 12
69734: PUSH
69735: CALL_OW 44
69739: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69740: LD_VAR 0 12
69744: PPUSH
69745: LD_VAR 0 8
69749: PPUSH
69750: LD_INT 0
69752: PPUSH
69753: CALL 71539 0 3
// end ;
69757: GO 69655
69759: POP
69760: POP
// if enchidnas then
69761: LD_VAR 0 4
69765: IFFALSE 69832
// for i = 1 to enchidnas do
69767: LD_ADDR_VAR 0 11
69771: PUSH
69772: DOUBLE
69773: LD_INT 1
69775: DEC
69776: ST_TO_ADDR
69777: LD_VAR 0 4
69781: PUSH
69782: FOR_TO
69783: IFFALSE 69830
// begin hc_class = 13 ;
69785: LD_ADDR_OWVAR 28
69789: PUSH
69790: LD_INT 13
69792: ST_TO_ADDR
// hc_gallery =  ;
69793: LD_ADDR_OWVAR 33
69797: PUSH
69798: LD_STRING 
69800: ST_TO_ADDR
// animal := CreateHuman ;
69801: LD_ADDR_VAR 0 12
69805: PUSH
69806: CALL_OW 44
69810: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69811: LD_VAR 0 12
69815: PPUSH
69816: LD_VAR 0 8
69820: PPUSH
69821: LD_INT 0
69823: PPUSH
69824: CALL 71539 0 3
// end ;
69828: GO 69782
69830: POP
69831: POP
// if fishes then
69832: LD_VAR 0 7
69836: IFFALSE 69903
// for i = 1 to fishes do
69838: LD_ADDR_VAR 0 11
69842: PUSH
69843: DOUBLE
69844: LD_INT 1
69846: DEC
69847: ST_TO_ADDR
69848: LD_VAR 0 7
69852: PUSH
69853: FOR_TO
69854: IFFALSE 69901
// begin hc_class = 20 ;
69856: LD_ADDR_OWVAR 28
69860: PUSH
69861: LD_INT 20
69863: ST_TO_ADDR
// hc_gallery =  ;
69864: LD_ADDR_OWVAR 33
69868: PUSH
69869: LD_STRING 
69871: ST_TO_ADDR
// animal := CreateHuman ;
69872: LD_ADDR_VAR 0 12
69876: PUSH
69877: CALL_OW 44
69881: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
69882: LD_VAR 0 12
69886: PPUSH
69887: LD_VAR 0 9
69891: PPUSH
69892: LD_INT 0
69894: PPUSH
69895: CALL 71539 0 3
// end ;
69899: GO 69853
69901: POP
69902: POP
// end ;
69903: LD_VAR 0 10
69907: RET
// export function WantHeal ( sci , unit ) ; begin
69908: LD_INT 0
69910: PPUSH
// if GetTaskList ( sci ) > 0 then
69911: LD_VAR 0 1
69915: PPUSH
69916: CALL_OW 437
69920: PUSH
69921: LD_INT 0
69923: GREATER
69924: IFFALSE 69994
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
69926: LD_VAR 0 1
69930: PPUSH
69931: CALL_OW 437
69935: PUSH
69936: LD_INT 1
69938: ARRAY
69939: PUSH
69940: LD_INT 1
69942: ARRAY
69943: PUSH
69944: LD_STRING l
69946: EQUAL
69947: PUSH
69948: LD_VAR 0 1
69952: PPUSH
69953: CALL_OW 437
69957: PUSH
69958: LD_INT 1
69960: ARRAY
69961: PUSH
69962: LD_INT 4
69964: ARRAY
69965: PUSH
69966: LD_VAR 0 2
69970: EQUAL
69971: AND
69972: IFFALSE 69984
// result := true else
69974: LD_ADDR_VAR 0 3
69978: PUSH
69979: LD_INT 1
69981: ST_TO_ADDR
69982: GO 69992
// result := false ;
69984: LD_ADDR_VAR 0 3
69988: PUSH
69989: LD_INT 0
69991: ST_TO_ADDR
// end else
69992: GO 70002
// result := false ;
69994: LD_ADDR_VAR 0 3
69998: PUSH
69999: LD_INT 0
70001: ST_TO_ADDR
// end ;
70002: LD_VAR 0 3
70006: RET
// export function HealTarget ( sci ) ; begin
70007: LD_INT 0
70009: PPUSH
// if not sci then
70010: LD_VAR 0 1
70014: NOT
70015: IFFALSE 70019
// exit ;
70017: GO 70084
// result := 0 ;
70019: LD_ADDR_VAR 0 2
70023: PUSH
70024: LD_INT 0
70026: ST_TO_ADDR
// if GetTaskList ( sci ) then
70027: LD_VAR 0 1
70031: PPUSH
70032: CALL_OW 437
70036: IFFALSE 70084
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
70038: LD_VAR 0 1
70042: PPUSH
70043: CALL_OW 437
70047: PUSH
70048: LD_INT 1
70050: ARRAY
70051: PUSH
70052: LD_INT 1
70054: ARRAY
70055: PUSH
70056: LD_STRING l
70058: EQUAL
70059: IFFALSE 70084
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
70061: LD_ADDR_VAR 0 2
70065: PUSH
70066: LD_VAR 0 1
70070: PPUSH
70071: CALL_OW 437
70075: PUSH
70076: LD_INT 1
70078: ARRAY
70079: PUSH
70080: LD_INT 4
70082: ARRAY
70083: ST_TO_ADDR
// end ;
70084: LD_VAR 0 2
70088: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
70089: LD_INT 0
70091: PPUSH
70092: PPUSH
70093: PPUSH
70094: PPUSH
// if not base_units then
70095: LD_VAR 0 1
70099: NOT
70100: IFFALSE 70104
// exit ;
70102: GO 70191
// result := false ;
70104: LD_ADDR_VAR 0 2
70108: PUSH
70109: LD_INT 0
70111: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
70112: LD_ADDR_VAR 0 5
70116: PUSH
70117: LD_VAR 0 1
70121: PPUSH
70122: LD_INT 21
70124: PUSH
70125: LD_INT 3
70127: PUSH
70128: EMPTY
70129: LIST
70130: LIST
70131: PPUSH
70132: CALL_OW 72
70136: ST_TO_ADDR
// if not tmp then
70137: LD_VAR 0 5
70141: NOT
70142: IFFALSE 70146
// exit ;
70144: GO 70191
// for i in tmp do
70146: LD_ADDR_VAR 0 3
70150: PUSH
70151: LD_VAR 0 5
70155: PUSH
70156: FOR_IN
70157: IFFALSE 70189
// begin result := EnemyInRange ( i , 22 ) ;
70159: LD_ADDR_VAR 0 2
70163: PUSH
70164: LD_VAR 0 3
70168: PPUSH
70169: LD_INT 22
70171: PPUSH
70172: CALL 67804 0 2
70176: ST_TO_ADDR
// if result then
70177: LD_VAR 0 2
70181: IFFALSE 70187
// exit ;
70183: POP
70184: POP
70185: GO 70191
// end ;
70187: GO 70156
70189: POP
70190: POP
// end ;
70191: LD_VAR 0 2
70195: RET
// export function FilterByTag ( units , tag ) ; begin
70196: LD_INT 0
70198: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
70199: LD_ADDR_VAR 0 3
70203: PUSH
70204: LD_VAR 0 1
70208: PPUSH
70209: LD_INT 120
70211: PUSH
70212: LD_VAR 0 2
70216: PUSH
70217: EMPTY
70218: LIST
70219: LIST
70220: PPUSH
70221: CALL_OW 72
70225: ST_TO_ADDR
// end ;
70226: LD_VAR 0 3
70230: RET
// export function IsDriver ( un ) ; begin
70231: LD_INT 0
70233: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
70234: LD_ADDR_VAR 0 2
70238: PUSH
70239: LD_VAR 0 1
70243: PUSH
70244: LD_INT 55
70246: PUSH
70247: EMPTY
70248: LIST
70249: PPUSH
70250: CALL_OW 69
70254: IN
70255: ST_TO_ADDR
// end ;
70256: LD_VAR 0 2
70260: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
70261: LD_INT 0
70263: PPUSH
70264: PPUSH
// list := [ ] ;
70265: LD_ADDR_VAR 0 5
70269: PUSH
70270: EMPTY
70271: ST_TO_ADDR
// case d of 0 :
70272: LD_VAR 0 3
70276: PUSH
70277: LD_INT 0
70279: DOUBLE
70280: EQUAL
70281: IFTRUE 70285
70283: GO 70418
70285: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
70286: LD_ADDR_VAR 0 5
70290: PUSH
70291: LD_VAR 0 1
70295: PUSH
70296: LD_INT 4
70298: MINUS
70299: PUSH
70300: LD_VAR 0 2
70304: PUSH
70305: LD_INT 4
70307: MINUS
70308: PUSH
70309: LD_INT 2
70311: PUSH
70312: EMPTY
70313: LIST
70314: LIST
70315: LIST
70316: PUSH
70317: LD_VAR 0 1
70321: PUSH
70322: LD_INT 3
70324: MINUS
70325: PUSH
70326: LD_VAR 0 2
70330: PUSH
70331: LD_INT 1
70333: PUSH
70334: EMPTY
70335: LIST
70336: LIST
70337: LIST
70338: PUSH
70339: LD_VAR 0 1
70343: PUSH
70344: LD_INT 4
70346: PLUS
70347: PUSH
70348: LD_VAR 0 2
70352: PUSH
70353: LD_INT 4
70355: PUSH
70356: EMPTY
70357: LIST
70358: LIST
70359: LIST
70360: PUSH
70361: LD_VAR 0 1
70365: PUSH
70366: LD_INT 3
70368: PLUS
70369: PUSH
70370: LD_VAR 0 2
70374: PUSH
70375: LD_INT 3
70377: PLUS
70378: PUSH
70379: LD_INT 5
70381: PUSH
70382: EMPTY
70383: LIST
70384: LIST
70385: LIST
70386: PUSH
70387: LD_VAR 0 1
70391: PUSH
70392: LD_VAR 0 2
70396: PUSH
70397: LD_INT 4
70399: PLUS
70400: PUSH
70401: LD_INT 0
70403: PUSH
70404: EMPTY
70405: LIST
70406: LIST
70407: LIST
70408: PUSH
70409: EMPTY
70410: LIST
70411: LIST
70412: LIST
70413: LIST
70414: LIST
70415: ST_TO_ADDR
// end ; 1 :
70416: GO 71116
70418: LD_INT 1
70420: DOUBLE
70421: EQUAL
70422: IFTRUE 70426
70424: GO 70559
70426: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
70427: LD_ADDR_VAR 0 5
70431: PUSH
70432: LD_VAR 0 1
70436: PUSH
70437: LD_VAR 0 2
70441: PUSH
70442: LD_INT 4
70444: MINUS
70445: PUSH
70446: LD_INT 3
70448: PUSH
70449: EMPTY
70450: LIST
70451: LIST
70452: LIST
70453: PUSH
70454: LD_VAR 0 1
70458: PUSH
70459: LD_INT 3
70461: MINUS
70462: PUSH
70463: LD_VAR 0 2
70467: PUSH
70468: LD_INT 3
70470: MINUS
70471: PUSH
70472: LD_INT 2
70474: PUSH
70475: EMPTY
70476: LIST
70477: LIST
70478: LIST
70479: PUSH
70480: LD_VAR 0 1
70484: PUSH
70485: LD_INT 4
70487: MINUS
70488: PUSH
70489: LD_VAR 0 2
70493: PUSH
70494: LD_INT 1
70496: PUSH
70497: EMPTY
70498: LIST
70499: LIST
70500: LIST
70501: PUSH
70502: LD_VAR 0 1
70506: PUSH
70507: LD_VAR 0 2
70511: PUSH
70512: LD_INT 3
70514: PLUS
70515: PUSH
70516: LD_INT 0
70518: PUSH
70519: EMPTY
70520: LIST
70521: LIST
70522: LIST
70523: PUSH
70524: LD_VAR 0 1
70528: PUSH
70529: LD_INT 4
70531: PLUS
70532: PUSH
70533: LD_VAR 0 2
70537: PUSH
70538: LD_INT 4
70540: PLUS
70541: PUSH
70542: LD_INT 5
70544: PUSH
70545: EMPTY
70546: LIST
70547: LIST
70548: LIST
70549: PUSH
70550: EMPTY
70551: LIST
70552: LIST
70553: LIST
70554: LIST
70555: LIST
70556: ST_TO_ADDR
// end ; 2 :
70557: GO 71116
70559: LD_INT 2
70561: DOUBLE
70562: EQUAL
70563: IFTRUE 70567
70565: GO 70696
70567: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
70568: LD_ADDR_VAR 0 5
70572: PUSH
70573: LD_VAR 0 1
70577: PUSH
70578: LD_VAR 0 2
70582: PUSH
70583: LD_INT 3
70585: MINUS
70586: PUSH
70587: LD_INT 3
70589: PUSH
70590: EMPTY
70591: LIST
70592: LIST
70593: LIST
70594: PUSH
70595: LD_VAR 0 1
70599: PUSH
70600: LD_INT 4
70602: PLUS
70603: PUSH
70604: LD_VAR 0 2
70608: PUSH
70609: LD_INT 4
70611: PUSH
70612: EMPTY
70613: LIST
70614: LIST
70615: LIST
70616: PUSH
70617: LD_VAR 0 1
70621: PUSH
70622: LD_VAR 0 2
70626: PUSH
70627: LD_INT 4
70629: PLUS
70630: PUSH
70631: LD_INT 0
70633: PUSH
70634: EMPTY
70635: LIST
70636: LIST
70637: LIST
70638: PUSH
70639: LD_VAR 0 1
70643: PUSH
70644: LD_INT 3
70646: MINUS
70647: PUSH
70648: LD_VAR 0 2
70652: PUSH
70653: LD_INT 1
70655: PUSH
70656: EMPTY
70657: LIST
70658: LIST
70659: LIST
70660: PUSH
70661: LD_VAR 0 1
70665: PUSH
70666: LD_INT 4
70668: MINUS
70669: PUSH
70670: LD_VAR 0 2
70674: PUSH
70675: LD_INT 4
70677: MINUS
70678: PUSH
70679: LD_INT 2
70681: PUSH
70682: EMPTY
70683: LIST
70684: LIST
70685: LIST
70686: PUSH
70687: EMPTY
70688: LIST
70689: LIST
70690: LIST
70691: LIST
70692: LIST
70693: ST_TO_ADDR
// end ; 3 :
70694: GO 71116
70696: LD_INT 3
70698: DOUBLE
70699: EQUAL
70700: IFTRUE 70704
70702: GO 70837
70704: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
70705: LD_ADDR_VAR 0 5
70709: PUSH
70710: LD_VAR 0 1
70714: PUSH
70715: LD_INT 3
70717: PLUS
70718: PUSH
70719: LD_VAR 0 2
70723: PUSH
70724: LD_INT 4
70726: PUSH
70727: EMPTY
70728: LIST
70729: LIST
70730: LIST
70731: PUSH
70732: LD_VAR 0 1
70736: PUSH
70737: LD_INT 4
70739: PLUS
70740: PUSH
70741: LD_VAR 0 2
70745: PUSH
70746: LD_INT 4
70748: PLUS
70749: PUSH
70750: LD_INT 5
70752: PUSH
70753: EMPTY
70754: LIST
70755: LIST
70756: LIST
70757: PUSH
70758: LD_VAR 0 1
70762: PUSH
70763: LD_INT 4
70765: MINUS
70766: PUSH
70767: LD_VAR 0 2
70771: PUSH
70772: LD_INT 1
70774: PUSH
70775: EMPTY
70776: LIST
70777: LIST
70778: LIST
70779: PUSH
70780: LD_VAR 0 1
70784: PUSH
70785: LD_VAR 0 2
70789: PUSH
70790: LD_INT 4
70792: MINUS
70793: PUSH
70794: LD_INT 3
70796: PUSH
70797: EMPTY
70798: LIST
70799: LIST
70800: LIST
70801: PUSH
70802: LD_VAR 0 1
70806: PUSH
70807: LD_INT 3
70809: MINUS
70810: PUSH
70811: LD_VAR 0 2
70815: PUSH
70816: LD_INT 3
70818: MINUS
70819: PUSH
70820: LD_INT 2
70822: PUSH
70823: EMPTY
70824: LIST
70825: LIST
70826: LIST
70827: PUSH
70828: EMPTY
70829: LIST
70830: LIST
70831: LIST
70832: LIST
70833: LIST
70834: ST_TO_ADDR
// end ; 4 :
70835: GO 71116
70837: LD_INT 4
70839: DOUBLE
70840: EQUAL
70841: IFTRUE 70845
70843: GO 70978
70845: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
70846: LD_ADDR_VAR 0 5
70850: PUSH
70851: LD_VAR 0 1
70855: PUSH
70856: LD_VAR 0 2
70860: PUSH
70861: LD_INT 4
70863: PLUS
70864: PUSH
70865: LD_INT 0
70867: PUSH
70868: EMPTY
70869: LIST
70870: LIST
70871: LIST
70872: PUSH
70873: LD_VAR 0 1
70877: PUSH
70878: LD_INT 3
70880: PLUS
70881: PUSH
70882: LD_VAR 0 2
70886: PUSH
70887: LD_INT 3
70889: PLUS
70890: PUSH
70891: LD_INT 5
70893: PUSH
70894: EMPTY
70895: LIST
70896: LIST
70897: LIST
70898: PUSH
70899: LD_VAR 0 1
70903: PUSH
70904: LD_INT 4
70906: PLUS
70907: PUSH
70908: LD_VAR 0 2
70912: PUSH
70913: LD_INT 4
70915: PUSH
70916: EMPTY
70917: LIST
70918: LIST
70919: LIST
70920: PUSH
70921: LD_VAR 0 1
70925: PUSH
70926: LD_VAR 0 2
70930: PUSH
70931: LD_INT 3
70933: MINUS
70934: PUSH
70935: LD_INT 3
70937: PUSH
70938: EMPTY
70939: LIST
70940: LIST
70941: LIST
70942: PUSH
70943: LD_VAR 0 1
70947: PUSH
70948: LD_INT 4
70950: MINUS
70951: PUSH
70952: LD_VAR 0 2
70956: PUSH
70957: LD_INT 4
70959: MINUS
70960: PUSH
70961: LD_INT 2
70963: PUSH
70964: EMPTY
70965: LIST
70966: LIST
70967: LIST
70968: PUSH
70969: EMPTY
70970: LIST
70971: LIST
70972: LIST
70973: LIST
70974: LIST
70975: ST_TO_ADDR
// end ; 5 :
70976: GO 71116
70978: LD_INT 5
70980: DOUBLE
70981: EQUAL
70982: IFTRUE 70986
70984: GO 71115
70986: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
70987: LD_ADDR_VAR 0 5
70991: PUSH
70992: LD_VAR 0 1
70996: PUSH
70997: LD_INT 4
70999: MINUS
71000: PUSH
71001: LD_VAR 0 2
71005: PUSH
71006: LD_INT 1
71008: PUSH
71009: EMPTY
71010: LIST
71011: LIST
71012: LIST
71013: PUSH
71014: LD_VAR 0 1
71018: PUSH
71019: LD_VAR 0 2
71023: PUSH
71024: LD_INT 4
71026: MINUS
71027: PUSH
71028: LD_INT 3
71030: PUSH
71031: EMPTY
71032: LIST
71033: LIST
71034: LIST
71035: PUSH
71036: LD_VAR 0 1
71040: PUSH
71041: LD_INT 4
71043: PLUS
71044: PUSH
71045: LD_VAR 0 2
71049: PUSH
71050: LD_INT 4
71052: PLUS
71053: PUSH
71054: LD_INT 5
71056: PUSH
71057: EMPTY
71058: LIST
71059: LIST
71060: LIST
71061: PUSH
71062: LD_VAR 0 1
71066: PUSH
71067: LD_INT 3
71069: PLUS
71070: PUSH
71071: LD_VAR 0 2
71075: PUSH
71076: LD_INT 4
71078: PUSH
71079: EMPTY
71080: LIST
71081: LIST
71082: LIST
71083: PUSH
71084: LD_VAR 0 1
71088: PUSH
71089: LD_VAR 0 2
71093: PUSH
71094: LD_INT 3
71096: PLUS
71097: PUSH
71098: LD_INT 0
71100: PUSH
71101: EMPTY
71102: LIST
71103: LIST
71104: LIST
71105: PUSH
71106: EMPTY
71107: LIST
71108: LIST
71109: LIST
71110: LIST
71111: LIST
71112: ST_TO_ADDR
// end ; end ;
71113: GO 71116
71115: POP
// result := list ;
71116: LD_ADDR_VAR 0 4
71120: PUSH
71121: LD_VAR 0 5
71125: ST_TO_ADDR
// end ;
71126: LD_VAR 0 4
71130: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
71131: LD_INT 0
71133: PPUSH
71134: PPUSH
71135: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
71136: LD_VAR 0 1
71140: NOT
71141: PUSH
71142: LD_VAR 0 2
71146: PUSH
71147: LD_INT 1
71149: PUSH
71150: LD_INT 2
71152: PUSH
71153: LD_INT 3
71155: PUSH
71156: LD_INT 4
71158: PUSH
71159: EMPTY
71160: LIST
71161: LIST
71162: LIST
71163: LIST
71164: IN
71165: NOT
71166: OR
71167: IFFALSE 71171
// exit ;
71169: GO 71263
// tmp := [ ] ;
71171: LD_ADDR_VAR 0 5
71175: PUSH
71176: EMPTY
71177: ST_TO_ADDR
// for i in units do
71178: LD_ADDR_VAR 0 4
71182: PUSH
71183: LD_VAR 0 1
71187: PUSH
71188: FOR_IN
71189: IFFALSE 71232
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
71191: LD_ADDR_VAR 0 5
71195: PUSH
71196: LD_VAR 0 5
71200: PPUSH
71201: LD_VAR 0 5
71205: PUSH
71206: LD_INT 1
71208: PLUS
71209: PPUSH
71210: LD_VAR 0 4
71214: PPUSH
71215: LD_VAR 0 2
71219: PPUSH
71220: CALL_OW 259
71224: PPUSH
71225: CALL_OW 2
71229: ST_TO_ADDR
71230: GO 71188
71232: POP
71233: POP
// if not tmp then
71234: LD_VAR 0 5
71238: NOT
71239: IFFALSE 71243
// exit ;
71241: GO 71263
// result := SortListByListDesc ( units , tmp ) ;
71243: LD_ADDR_VAR 0 3
71247: PUSH
71248: LD_VAR 0 1
71252: PPUSH
71253: LD_VAR 0 5
71257: PPUSH
71258: CALL_OW 77
71262: ST_TO_ADDR
// end ;
71263: LD_VAR 0 3
71267: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
71268: LD_INT 0
71270: PPUSH
71271: PPUSH
71272: PPUSH
// result := false ;
71273: LD_ADDR_VAR 0 3
71277: PUSH
71278: LD_INT 0
71280: ST_TO_ADDR
// x := GetX ( building ) ;
71281: LD_ADDR_VAR 0 4
71285: PUSH
71286: LD_VAR 0 2
71290: PPUSH
71291: CALL_OW 250
71295: ST_TO_ADDR
// y := GetY ( building ) ;
71296: LD_ADDR_VAR 0 5
71300: PUSH
71301: LD_VAR 0 2
71305: PPUSH
71306: CALL_OW 251
71310: ST_TO_ADDR
// if not building or not x or not y then
71311: LD_VAR 0 2
71315: NOT
71316: PUSH
71317: LD_VAR 0 4
71321: NOT
71322: OR
71323: PUSH
71324: LD_VAR 0 5
71328: NOT
71329: OR
71330: IFFALSE 71334
// exit ;
71332: GO 71426
// if GetTaskList ( unit ) then
71334: LD_VAR 0 1
71338: PPUSH
71339: CALL_OW 437
71343: IFFALSE 71426
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71345: LD_STRING e
71347: PUSH
71348: LD_VAR 0 1
71352: PPUSH
71353: CALL_OW 437
71357: PUSH
71358: LD_INT 1
71360: ARRAY
71361: PUSH
71362: LD_INT 1
71364: ARRAY
71365: EQUAL
71366: PUSH
71367: LD_VAR 0 4
71371: PUSH
71372: LD_VAR 0 1
71376: PPUSH
71377: CALL_OW 437
71381: PUSH
71382: LD_INT 1
71384: ARRAY
71385: PUSH
71386: LD_INT 2
71388: ARRAY
71389: EQUAL
71390: AND
71391: PUSH
71392: LD_VAR 0 5
71396: PUSH
71397: LD_VAR 0 1
71401: PPUSH
71402: CALL_OW 437
71406: PUSH
71407: LD_INT 1
71409: ARRAY
71410: PUSH
71411: LD_INT 3
71413: ARRAY
71414: EQUAL
71415: AND
71416: IFFALSE 71426
// result := true end ;
71418: LD_ADDR_VAR 0 3
71422: PUSH
71423: LD_INT 1
71425: ST_TO_ADDR
// end ;
71426: LD_VAR 0 3
71430: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
71431: LD_INT 0
71433: PPUSH
// result := false ;
71434: LD_ADDR_VAR 0 4
71438: PUSH
71439: LD_INT 0
71441: ST_TO_ADDR
// if GetTaskList ( unit ) then
71442: LD_VAR 0 1
71446: PPUSH
71447: CALL_OW 437
71451: IFFALSE 71534
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71453: LD_STRING M
71455: PUSH
71456: LD_VAR 0 1
71460: PPUSH
71461: CALL_OW 437
71465: PUSH
71466: LD_INT 1
71468: ARRAY
71469: PUSH
71470: LD_INT 1
71472: ARRAY
71473: EQUAL
71474: PUSH
71475: LD_VAR 0 2
71479: PUSH
71480: LD_VAR 0 1
71484: PPUSH
71485: CALL_OW 437
71489: PUSH
71490: LD_INT 1
71492: ARRAY
71493: PUSH
71494: LD_INT 2
71496: ARRAY
71497: EQUAL
71498: AND
71499: PUSH
71500: LD_VAR 0 3
71504: PUSH
71505: LD_VAR 0 1
71509: PPUSH
71510: CALL_OW 437
71514: PUSH
71515: LD_INT 1
71517: ARRAY
71518: PUSH
71519: LD_INT 3
71521: ARRAY
71522: EQUAL
71523: AND
71524: IFFALSE 71534
// result := true ;
71526: LD_ADDR_VAR 0 4
71530: PUSH
71531: LD_INT 1
71533: ST_TO_ADDR
// end ; end ;
71534: LD_VAR 0 4
71538: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
71539: LD_INT 0
71541: PPUSH
71542: PPUSH
71543: PPUSH
71544: PPUSH
// if not unit or not area then
71545: LD_VAR 0 1
71549: NOT
71550: PUSH
71551: LD_VAR 0 2
71555: NOT
71556: OR
71557: IFFALSE 71561
// exit ;
71559: GO 71725
// tmp := AreaToList ( area , i ) ;
71561: LD_ADDR_VAR 0 6
71565: PUSH
71566: LD_VAR 0 2
71570: PPUSH
71571: LD_VAR 0 5
71575: PPUSH
71576: CALL_OW 517
71580: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
71581: LD_ADDR_VAR 0 5
71585: PUSH
71586: DOUBLE
71587: LD_INT 1
71589: DEC
71590: ST_TO_ADDR
71591: LD_VAR 0 6
71595: PUSH
71596: LD_INT 1
71598: ARRAY
71599: PUSH
71600: FOR_TO
71601: IFFALSE 71723
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
71603: LD_ADDR_VAR 0 7
71607: PUSH
71608: LD_VAR 0 6
71612: PUSH
71613: LD_INT 1
71615: ARRAY
71616: PUSH
71617: LD_VAR 0 5
71621: ARRAY
71622: PUSH
71623: LD_VAR 0 6
71627: PUSH
71628: LD_INT 2
71630: ARRAY
71631: PUSH
71632: LD_VAR 0 5
71636: ARRAY
71637: PUSH
71638: EMPTY
71639: LIST
71640: LIST
71641: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
71642: LD_VAR 0 7
71646: PUSH
71647: LD_INT 1
71649: ARRAY
71650: PPUSH
71651: LD_VAR 0 7
71655: PUSH
71656: LD_INT 2
71658: ARRAY
71659: PPUSH
71660: CALL_OW 428
71664: PUSH
71665: LD_INT 0
71667: EQUAL
71668: IFFALSE 71721
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
71670: LD_VAR 0 1
71674: PPUSH
71675: LD_VAR 0 7
71679: PUSH
71680: LD_INT 1
71682: ARRAY
71683: PPUSH
71684: LD_VAR 0 7
71688: PUSH
71689: LD_INT 2
71691: ARRAY
71692: PPUSH
71693: LD_VAR 0 3
71697: PPUSH
71698: CALL_OW 48
// result := IsPlaced ( unit ) ;
71702: LD_ADDR_VAR 0 4
71706: PUSH
71707: LD_VAR 0 1
71711: PPUSH
71712: CALL_OW 305
71716: ST_TO_ADDR
// exit ;
71717: POP
71718: POP
71719: GO 71725
// end ; end ;
71721: GO 71600
71723: POP
71724: POP
// end ;
71725: LD_VAR 0 4
71729: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
71730: LD_INT 0
71732: PPUSH
71733: PPUSH
71734: PPUSH
// if not side or side > 8 then
71735: LD_VAR 0 1
71739: NOT
71740: PUSH
71741: LD_VAR 0 1
71745: PUSH
71746: LD_INT 8
71748: GREATER
71749: OR
71750: IFFALSE 71754
// exit ;
71752: GO 71941
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
71754: LD_ADDR_VAR 0 4
71758: PUSH
71759: LD_INT 22
71761: PUSH
71762: LD_VAR 0 1
71766: PUSH
71767: EMPTY
71768: LIST
71769: LIST
71770: PUSH
71771: LD_INT 21
71773: PUSH
71774: LD_INT 3
71776: PUSH
71777: EMPTY
71778: LIST
71779: LIST
71780: PUSH
71781: EMPTY
71782: LIST
71783: LIST
71784: PPUSH
71785: CALL_OW 69
71789: ST_TO_ADDR
// if not tmp then
71790: LD_VAR 0 4
71794: NOT
71795: IFFALSE 71799
// exit ;
71797: GO 71941
// enable_addtolog := true ;
71799: LD_ADDR_OWVAR 81
71803: PUSH
71804: LD_INT 1
71806: ST_TO_ADDR
// AddToLog ( [ ) ;
71807: LD_STRING [
71809: PPUSH
71810: CALL_OW 561
// for i in tmp do
71814: LD_ADDR_VAR 0 3
71818: PUSH
71819: LD_VAR 0 4
71823: PUSH
71824: FOR_IN
71825: IFFALSE 71932
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
71827: LD_STRING [
71829: PUSH
71830: LD_VAR 0 3
71834: PPUSH
71835: CALL_OW 266
71839: STR
71840: PUSH
71841: LD_STRING , 
71843: STR
71844: PUSH
71845: LD_VAR 0 3
71849: PPUSH
71850: CALL_OW 250
71854: STR
71855: PUSH
71856: LD_STRING , 
71858: STR
71859: PUSH
71860: LD_VAR 0 3
71864: PPUSH
71865: CALL_OW 251
71869: STR
71870: PUSH
71871: LD_STRING , 
71873: STR
71874: PUSH
71875: LD_VAR 0 3
71879: PPUSH
71880: CALL_OW 254
71884: STR
71885: PUSH
71886: LD_STRING , 
71888: STR
71889: PUSH
71890: LD_VAR 0 3
71894: PPUSH
71895: LD_INT 1
71897: PPUSH
71898: CALL_OW 268
71902: STR
71903: PUSH
71904: LD_STRING , 
71906: STR
71907: PUSH
71908: LD_VAR 0 3
71912: PPUSH
71913: LD_INT 2
71915: PPUSH
71916: CALL_OW 268
71920: STR
71921: PUSH
71922: LD_STRING ],
71924: STR
71925: PPUSH
71926: CALL_OW 561
// end ;
71930: GO 71824
71932: POP
71933: POP
// AddToLog ( ]; ) ;
71934: LD_STRING ];
71936: PPUSH
71937: CALL_OW 561
// end ;
71941: LD_VAR 0 2
71945: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
71946: LD_INT 0
71948: PPUSH
71949: PPUSH
71950: PPUSH
71951: PPUSH
71952: PPUSH
// if not area or not rate or not max then
71953: LD_VAR 0 1
71957: NOT
71958: PUSH
71959: LD_VAR 0 2
71963: NOT
71964: OR
71965: PUSH
71966: LD_VAR 0 4
71970: NOT
71971: OR
71972: IFFALSE 71976
// exit ;
71974: GO 72165
// while 1 do
71976: LD_INT 1
71978: IFFALSE 72165
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
71980: LD_ADDR_VAR 0 9
71984: PUSH
71985: LD_VAR 0 1
71989: PPUSH
71990: LD_INT 1
71992: PPUSH
71993: CALL_OW 287
71997: PUSH
71998: LD_INT 10
72000: MUL
72001: ST_TO_ADDR
// r := rate / 10 ;
72002: LD_ADDR_VAR 0 7
72006: PUSH
72007: LD_VAR 0 2
72011: PUSH
72012: LD_INT 10
72014: DIVREAL
72015: ST_TO_ADDR
// time := 1 1$00 ;
72016: LD_ADDR_VAR 0 8
72020: PUSH
72021: LD_INT 2100
72023: ST_TO_ADDR
// if amount < min then
72024: LD_VAR 0 9
72028: PUSH
72029: LD_VAR 0 3
72033: LESS
72034: IFFALSE 72052
// r := r * 2 else
72036: LD_ADDR_VAR 0 7
72040: PUSH
72041: LD_VAR 0 7
72045: PUSH
72046: LD_INT 2
72048: MUL
72049: ST_TO_ADDR
72050: GO 72078
// if amount > max then
72052: LD_VAR 0 9
72056: PUSH
72057: LD_VAR 0 4
72061: GREATER
72062: IFFALSE 72078
// r := r / 2 ;
72064: LD_ADDR_VAR 0 7
72068: PUSH
72069: LD_VAR 0 7
72073: PUSH
72074: LD_INT 2
72076: DIVREAL
72077: ST_TO_ADDR
// time := time / r ;
72078: LD_ADDR_VAR 0 8
72082: PUSH
72083: LD_VAR 0 8
72087: PUSH
72088: LD_VAR 0 7
72092: DIVREAL
72093: ST_TO_ADDR
// if time < 0 then
72094: LD_VAR 0 8
72098: PUSH
72099: LD_INT 0
72101: LESS
72102: IFFALSE 72119
// time := time * - 1 ;
72104: LD_ADDR_VAR 0 8
72108: PUSH
72109: LD_VAR 0 8
72113: PUSH
72114: LD_INT 1
72116: NEG
72117: MUL
72118: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
72119: LD_VAR 0 8
72123: PUSH
72124: LD_INT 35
72126: PPUSH
72127: LD_INT 875
72129: PPUSH
72130: CALL_OW 12
72134: PLUS
72135: PPUSH
72136: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
72140: LD_INT 1
72142: PPUSH
72143: LD_INT 5
72145: PPUSH
72146: CALL_OW 12
72150: PPUSH
72151: LD_VAR 0 1
72155: PPUSH
72156: LD_INT 1
72158: PPUSH
72159: CALL_OW 55
// end ;
72163: GO 71976
// end ;
72165: LD_VAR 0 5
72169: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
72170: LD_INT 0
72172: PPUSH
72173: PPUSH
72174: PPUSH
72175: PPUSH
72176: PPUSH
72177: PPUSH
72178: PPUSH
72179: PPUSH
// if not turrets or not factories then
72180: LD_VAR 0 1
72184: NOT
72185: PUSH
72186: LD_VAR 0 2
72190: NOT
72191: OR
72192: IFFALSE 72196
// exit ;
72194: GO 72503
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
72196: LD_ADDR_VAR 0 10
72200: PUSH
72201: LD_INT 5
72203: PUSH
72204: LD_INT 6
72206: PUSH
72207: EMPTY
72208: LIST
72209: LIST
72210: PUSH
72211: LD_INT 2
72213: PUSH
72214: LD_INT 4
72216: PUSH
72217: EMPTY
72218: LIST
72219: LIST
72220: PUSH
72221: LD_INT 3
72223: PUSH
72224: LD_INT 5
72226: PUSH
72227: EMPTY
72228: LIST
72229: LIST
72230: PUSH
72231: EMPTY
72232: LIST
72233: LIST
72234: LIST
72235: PUSH
72236: LD_INT 24
72238: PUSH
72239: LD_INT 25
72241: PUSH
72242: EMPTY
72243: LIST
72244: LIST
72245: PUSH
72246: LD_INT 23
72248: PUSH
72249: LD_INT 27
72251: PUSH
72252: EMPTY
72253: LIST
72254: LIST
72255: PUSH
72256: EMPTY
72257: LIST
72258: LIST
72259: PUSH
72260: LD_INT 42
72262: PUSH
72263: LD_INT 43
72265: PUSH
72266: EMPTY
72267: LIST
72268: LIST
72269: PUSH
72270: LD_INT 44
72272: PUSH
72273: LD_INT 46
72275: PUSH
72276: EMPTY
72277: LIST
72278: LIST
72279: PUSH
72280: LD_INT 45
72282: PUSH
72283: LD_INT 47
72285: PUSH
72286: EMPTY
72287: LIST
72288: LIST
72289: PUSH
72290: EMPTY
72291: LIST
72292: LIST
72293: LIST
72294: PUSH
72295: EMPTY
72296: LIST
72297: LIST
72298: LIST
72299: ST_TO_ADDR
// result := [ ] ;
72300: LD_ADDR_VAR 0 3
72304: PUSH
72305: EMPTY
72306: ST_TO_ADDR
// for i in turrets do
72307: LD_ADDR_VAR 0 4
72311: PUSH
72312: LD_VAR 0 1
72316: PUSH
72317: FOR_IN
72318: IFFALSE 72501
// begin nat := GetNation ( i ) ;
72320: LD_ADDR_VAR 0 7
72324: PUSH
72325: LD_VAR 0 4
72329: PPUSH
72330: CALL_OW 248
72334: ST_TO_ADDR
// weapon := 0 ;
72335: LD_ADDR_VAR 0 8
72339: PUSH
72340: LD_INT 0
72342: ST_TO_ADDR
// if not nat then
72343: LD_VAR 0 7
72347: NOT
72348: IFFALSE 72352
// continue ;
72350: GO 72317
// for j in list [ nat ] do
72352: LD_ADDR_VAR 0 5
72356: PUSH
72357: LD_VAR 0 10
72361: PUSH
72362: LD_VAR 0 7
72366: ARRAY
72367: PUSH
72368: FOR_IN
72369: IFFALSE 72410
// if GetBWeapon ( i ) = j [ 1 ] then
72371: LD_VAR 0 4
72375: PPUSH
72376: CALL_OW 269
72380: PUSH
72381: LD_VAR 0 5
72385: PUSH
72386: LD_INT 1
72388: ARRAY
72389: EQUAL
72390: IFFALSE 72408
// begin weapon := j [ 2 ] ;
72392: LD_ADDR_VAR 0 8
72396: PUSH
72397: LD_VAR 0 5
72401: PUSH
72402: LD_INT 2
72404: ARRAY
72405: ST_TO_ADDR
// break ;
72406: GO 72410
// end ;
72408: GO 72368
72410: POP
72411: POP
// if not weapon then
72412: LD_VAR 0 8
72416: NOT
72417: IFFALSE 72421
// continue ;
72419: GO 72317
// for k in factories do
72421: LD_ADDR_VAR 0 6
72425: PUSH
72426: LD_VAR 0 2
72430: PUSH
72431: FOR_IN
72432: IFFALSE 72497
// begin weapons := AvailableWeaponList ( k ) ;
72434: LD_ADDR_VAR 0 9
72438: PUSH
72439: LD_VAR 0 6
72443: PPUSH
72444: CALL_OW 478
72448: ST_TO_ADDR
// if not weapons then
72449: LD_VAR 0 9
72453: NOT
72454: IFFALSE 72458
// continue ;
72456: GO 72431
// if weapon in weapons then
72458: LD_VAR 0 8
72462: PUSH
72463: LD_VAR 0 9
72467: IN
72468: IFFALSE 72495
// begin result := [ i , weapon ] ;
72470: LD_ADDR_VAR 0 3
72474: PUSH
72475: LD_VAR 0 4
72479: PUSH
72480: LD_VAR 0 8
72484: PUSH
72485: EMPTY
72486: LIST
72487: LIST
72488: ST_TO_ADDR
// exit ;
72489: POP
72490: POP
72491: POP
72492: POP
72493: GO 72503
// end ; end ;
72495: GO 72431
72497: POP
72498: POP
// end ;
72499: GO 72317
72501: POP
72502: POP
// end ;
72503: LD_VAR 0 3
72507: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
72508: LD_INT 0
72510: PPUSH
// if not side or side > 8 then
72511: LD_VAR 0 3
72515: NOT
72516: PUSH
72517: LD_VAR 0 3
72521: PUSH
72522: LD_INT 8
72524: GREATER
72525: OR
72526: IFFALSE 72530
// exit ;
72528: GO 72589
// if not range then
72530: LD_VAR 0 4
72534: NOT
72535: IFFALSE 72546
// range := - 12 ;
72537: LD_ADDR_VAR 0 4
72541: PUSH
72542: LD_INT 12
72544: NEG
72545: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
72546: LD_VAR 0 1
72550: PPUSH
72551: LD_VAR 0 2
72555: PPUSH
72556: LD_VAR 0 3
72560: PPUSH
72561: LD_VAR 0 4
72565: PPUSH
72566: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
72570: LD_VAR 0 1
72574: PPUSH
72575: LD_VAR 0 2
72579: PPUSH
72580: LD_VAR 0 3
72584: PPUSH
72585: CALL_OW 331
// end ;
72589: LD_VAR 0 5
72593: RET
// export function Video ( mode ) ; begin
72594: LD_INT 0
72596: PPUSH
// ingame_video = mode ;
72597: LD_ADDR_OWVAR 52
72601: PUSH
72602: LD_VAR 0 1
72606: ST_TO_ADDR
// interface_hidden = mode ;
72607: LD_ADDR_OWVAR 54
72611: PUSH
72612: LD_VAR 0 1
72616: ST_TO_ADDR
// end ;
72617: LD_VAR 0 2
72621: RET
// export function Join ( array , element ) ; begin
72622: LD_INT 0
72624: PPUSH
// result := Replace ( array , array + 1 , element ) ;
72625: LD_ADDR_VAR 0 3
72629: PUSH
72630: LD_VAR 0 1
72634: PPUSH
72635: LD_VAR 0 1
72639: PUSH
72640: LD_INT 1
72642: PLUS
72643: PPUSH
72644: LD_VAR 0 2
72648: PPUSH
72649: CALL_OW 1
72653: ST_TO_ADDR
// end ;
72654: LD_VAR 0 3
72658: RET
// export function JoinUnion ( array , element ) ; begin
72659: LD_INT 0
72661: PPUSH
// result := array union element ;
72662: LD_ADDR_VAR 0 3
72666: PUSH
72667: LD_VAR 0 1
72671: PUSH
72672: LD_VAR 0 2
72676: UNION
72677: ST_TO_ADDR
// end ;
72678: LD_VAR 0 3
72682: RET
// export function GetBehemoths ( side ) ; begin
72683: LD_INT 0
72685: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
72686: LD_ADDR_VAR 0 2
72690: PUSH
72691: LD_INT 22
72693: PUSH
72694: LD_VAR 0 1
72698: PUSH
72699: EMPTY
72700: LIST
72701: LIST
72702: PUSH
72703: LD_INT 31
72705: PUSH
72706: LD_INT 25
72708: PUSH
72709: EMPTY
72710: LIST
72711: LIST
72712: PUSH
72713: EMPTY
72714: LIST
72715: LIST
72716: PPUSH
72717: CALL_OW 69
72721: ST_TO_ADDR
// end ;
72722: LD_VAR 0 2
72726: RET
// export function Shuffle ( array ) ; var i , index ; begin
72727: LD_INT 0
72729: PPUSH
72730: PPUSH
72731: PPUSH
// result := [ ] ;
72732: LD_ADDR_VAR 0 2
72736: PUSH
72737: EMPTY
72738: ST_TO_ADDR
// if not array then
72739: LD_VAR 0 1
72743: NOT
72744: IFFALSE 72748
// exit ;
72746: GO 72847
// Randomize ;
72748: CALL_OW 10
// for i = array downto 1 do
72752: LD_ADDR_VAR 0 3
72756: PUSH
72757: DOUBLE
72758: LD_VAR 0 1
72762: INC
72763: ST_TO_ADDR
72764: LD_INT 1
72766: PUSH
72767: FOR_DOWNTO
72768: IFFALSE 72845
// begin index := rand ( 1 , array ) ;
72770: LD_ADDR_VAR 0 4
72774: PUSH
72775: LD_INT 1
72777: PPUSH
72778: LD_VAR 0 1
72782: PPUSH
72783: CALL_OW 12
72787: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
72788: LD_ADDR_VAR 0 2
72792: PUSH
72793: LD_VAR 0 2
72797: PPUSH
72798: LD_VAR 0 2
72802: PUSH
72803: LD_INT 1
72805: PLUS
72806: PPUSH
72807: LD_VAR 0 1
72811: PUSH
72812: LD_VAR 0 4
72816: ARRAY
72817: PPUSH
72818: CALL_OW 2
72822: ST_TO_ADDR
// array := Delete ( array , index ) ;
72823: LD_ADDR_VAR 0 1
72827: PUSH
72828: LD_VAR 0 1
72832: PPUSH
72833: LD_VAR 0 4
72837: PPUSH
72838: CALL_OW 3
72842: ST_TO_ADDR
// end ;
72843: GO 72767
72845: POP
72846: POP
// end ;
72847: LD_VAR 0 2
72851: RET
// export function GetBaseMaterials ( base ) ; begin
72852: LD_INT 0
72854: PPUSH
// result := [ 0 , 0 , 0 ] ;
72855: LD_ADDR_VAR 0 2
72859: PUSH
72860: LD_INT 0
72862: PUSH
72863: LD_INT 0
72865: PUSH
72866: LD_INT 0
72868: PUSH
72869: EMPTY
72870: LIST
72871: LIST
72872: LIST
72873: ST_TO_ADDR
// if not base then
72874: LD_VAR 0 1
72878: NOT
72879: IFFALSE 72883
// exit ;
72881: GO 72932
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
72883: LD_ADDR_VAR 0 2
72887: PUSH
72888: LD_VAR 0 1
72892: PPUSH
72893: LD_INT 1
72895: PPUSH
72896: CALL_OW 275
72900: PUSH
72901: LD_VAR 0 1
72905: PPUSH
72906: LD_INT 2
72908: PPUSH
72909: CALL_OW 275
72913: PUSH
72914: LD_VAR 0 1
72918: PPUSH
72919: LD_INT 3
72921: PPUSH
72922: CALL_OW 275
72926: PUSH
72927: EMPTY
72928: LIST
72929: LIST
72930: LIST
72931: ST_TO_ADDR
// end ;
72932: LD_VAR 0 2
72936: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
72937: LD_INT 0
72939: PPUSH
72940: PPUSH
// result := array ;
72941: LD_ADDR_VAR 0 3
72945: PUSH
72946: LD_VAR 0 1
72950: ST_TO_ADDR
// if size >= result then
72951: LD_VAR 0 2
72955: PUSH
72956: LD_VAR 0 3
72960: GREATEREQUAL
72961: IFFALSE 72965
// exit ;
72963: GO 73015
// if size then
72965: LD_VAR 0 2
72969: IFFALSE 73015
// for i := array downto size do
72971: LD_ADDR_VAR 0 4
72975: PUSH
72976: DOUBLE
72977: LD_VAR 0 1
72981: INC
72982: ST_TO_ADDR
72983: LD_VAR 0 2
72987: PUSH
72988: FOR_DOWNTO
72989: IFFALSE 73013
// result := Delete ( result , result ) ;
72991: LD_ADDR_VAR 0 3
72995: PUSH
72996: LD_VAR 0 3
73000: PPUSH
73001: LD_VAR 0 3
73005: PPUSH
73006: CALL_OW 3
73010: ST_TO_ADDR
73011: GO 72988
73013: POP
73014: POP
// end ;
73015: LD_VAR 0 3
73019: RET
// export function ComExit ( unit ) ; var tmp ; begin
73020: LD_INT 0
73022: PPUSH
73023: PPUSH
// if not IsInUnit ( unit ) then
73024: LD_VAR 0 1
73028: PPUSH
73029: CALL_OW 310
73033: NOT
73034: IFFALSE 73038
// exit ;
73036: GO 73098
// tmp := IsInUnit ( unit ) ;
73038: LD_ADDR_VAR 0 3
73042: PUSH
73043: LD_VAR 0 1
73047: PPUSH
73048: CALL_OW 310
73052: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
73053: LD_VAR 0 3
73057: PPUSH
73058: CALL_OW 247
73062: PUSH
73063: LD_INT 2
73065: EQUAL
73066: IFFALSE 73079
// ComExitVehicle ( unit ) else
73068: LD_VAR 0 1
73072: PPUSH
73073: CALL_OW 121
73077: GO 73088
// ComExitBuilding ( unit ) ;
73079: LD_VAR 0 1
73083: PPUSH
73084: CALL_OW 122
// result := tmp ;
73088: LD_ADDR_VAR 0 2
73092: PUSH
73093: LD_VAR 0 3
73097: ST_TO_ADDR
// end ;
73098: LD_VAR 0 2
73102: RET
// export function ComExitAll ( units ) ; var i ; begin
73103: LD_INT 0
73105: PPUSH
73106: PPUSH
// if not units then
73107: LD_VAR 0 1
73111: NOT
73112: IFFALSE 73116
// exit ;
73114: GO 73142
// for i in units do
73116: LD_ADDR_VAR 0 3
73120: PUSH
73121: LD_VAR 0 1
73125: PUSH
73126: FOR_IN
73127: IFFALSE 73140
// ComExit ( i ) ;
73129: LD_VAR 0 3
73133: PPUSH
73134: CALL 73020 0 1
73138: GO 73126
73140: POP
73141: POP
// end ;
73142: LD_VAR 0 2
73146: RET
// export function ResetHc ; begin
73147: LD_INT 0
73149: PPUSH
// InitHc ;
73150: CALL_OW 19
// hc_importance := 0 ;
73154: LD_ADDR_OWVAR 32
73158: PUSH
73159: LD_INT 0
73161: ST_TO_ADDR
// end ;
73162: LD_VAR 0 1
73166: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
73167: LD_INT 0
73169: PPUSH
73170: PPUSH
73171: PPUSH
// _x := ( x1 + x2 ) div 2 ;
73172: LD_ADDR_VAR 0 6
73176: PUSH
73177: LD_VAR 0 1
73181: PUSH
73182: LD_VAR 0 3
73186: PLUS
73187: PUSH
73188: LD_INT 2
73190: DIV
73191: ST_TO_ADDR
// if _x < 0 then
73192: LD_VAR 0 6
73196: PUSH
73197: LD_INT 0
73199: LESS
73200: IFFALSE 73217
// _x := _x * - 1 ;
73202: LD_ADDR_VAR 0 6
73206: PUSH
73207: LD_VAR 0 6
73211: PUSH
73212: LD_INT 1
73214: NEG
73215: MUL
73216: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
73217: LD_ADDR_VAR 0 7
73221: PUSH
73222: LD_VAR 0 2
73226: PUSH
73227: LD_VAR 0 4
73231: PLUS
73232: PUSH
73233: LD_INT 2
73235: DIV
73236: ST_TO_ADDR
// if _y < 0 then
73237: LD_VAR 0 7
73241: PUSH
73242: LD_INT 0
73244: LESS
73245: IFFALSE 73262
// _y := _y * - 1 ;
73247: LD_ADDR_VAR 0 7
73251: PUSH
73252: LD_VAR 0 7
73256: PUSH
73257: LD_INT 1
73259: NEG
73260: MUL
73261: ST_TO_ADDR
// result := [ _x , _y ] ;
73262: LD_ADDR_VAR 0 5
73266: PUSH
73267: LD_VAR 0 6
73271: PUSH
73272: LD_VAR 0 7
73276: PUSH
73277: EMPTY
73278: LIST
73279: LIST
73280: ST_TO_ADDR
// end ;
73281: LD_VAR 0 5
73285: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
73286: LD_INT 0
73288: PPUSH
73289: PPUSH
73290: PPUSH
73291: PPUSH
// task := GetTaskList ( unit ) ;
73292: LD_ADDR_VAR 0 7
73296: PUSH
73297: LD_VAR 0 1
73301: PPUSH
73302: CALL_OW 437
73306: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
73307: LD_VAR 0 7
73311: NOT
73312: PUSH
73313: LD_VAR 0 1
73317: PPUSH
73318: LD_VAR 0 2
73322: PPUSH
73323: CALL_OW 308
73327: NOT
73328: AND
73329: IFFALSE 73333
// exit ;
73331: GO 73451
// if IsInArea ( unit , area ) then
73333: LD_VAR 0 1
73337: PPUSH
73338: LD_VAR 0 2
73342: PPUSH
73343: CALL_OW 308
73347: IFFALSE 73365
// begin ComMoveToArea ( unit , goAway ) ;
73349: LD_VAR 0 1
73353: PPUSH
73354: LD_VAR 0 3
73358: PPUSH
73359: CALL_OW 113
// exit ;
73363: GO 73451
// end ; if task [ 1 ] [ 1 ] <> M then
73365: LD_VAR 0 7
73369: PUSH
73370: LD_INT 1
73372: ARRAY
73373: PUSH
73374: LD_INT 1
73376: ARRAY
73377: PUSH
73378: LD_STRING M
73380: NONEQUAL
73381: IFFALSE 73385
// exit ;
73383: GO 73451
// x := task [ 1 ] [ 2 ] ;
73385: LD_ADDR_VAR 0 5
73389: PUSH
73390: LD_VAR 0 7
73394: PUSH
73395: LD_INT 1
73397: ARRAY
73398: PUSH
73399: LD_INT 2
73401: ARRAY
73402: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
73403: LD_ADDR_VAR 0 6
73407: PUSH
73408: LD_VAR 0 7
73412: PUSH
73413: LD_INT 1
73415: ARRAY
73416: PUSH
73417: LD_INT 3
73419: ARRAY
73420: ST_TO_ADDR
// if InArea ( x , y , area ) then
73421: LD_VAR 0 5
73425: PPUSH
73426: LD_VAR 0 6
73430: PPUSH
73431: LD_VAR 0 2
73435: PPUSH
73436: CALL_OW 309
73440: IFFALSE 73451
// ComStop ( unit ) ;
73442: LD_VAR 0 1
73446: PPUSH
73447: CALL_OW 141
// end ;
73451: LD_VAR 0 4
73455: RET
// export function Abs ( value ) ; begin
73456: LD_INT 0
73458: PPUSH
// result := value ;
73459: LD_ADDR_VAR 0 2
73463: PUSH
73464: LD_VAR 0 1
73468: ST_TO_ADDR
// if value < 0 then
73469: LD_VAR 0 1
73473: PUSH
73474: LD_INT 0
73476: LESS
73477: IFFALSE 73494
// result := value * - 1 ;
73479: LD_ADDR_VAR 0 2
73483: PUSH
73484: LD_VAR 0 1
73488: PUSH
73489: LD_INT 1
73491: NEG
73492: MUL
73493: ST_TO_ADDR
// end ;
73494: LD_VAR 0 2
73498: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
73499: LD_INT 0
73501: PPUSH
73502: PPUSH
73503: PPUSH
73504: PPUSH
73505: PPUSH
73506: PPUSH
73507: PPUSH
73508: PPUSH
// if not unit or not building then
73509: LD_VAR 0 1
73513: NOT
73514: PUSH
73515: LD_VAR 0 2
73519: NOT
73520: OR
73521: IFFALSE 73525
// exit ;
73523: GO 73751
// x := GetX ( building ) ;
73525: LD_ADDR_VAR 0 4
73529: PUSH
73530: LD_VAR 0 2
73534: PPUSH
73535: CALL_OW 250
73539: ST_TO_ADDR
// y := GetY ( building ) ;
73540: LD_ADDR_VAR 0 6
73544: PUSH
73545: LD_VAR 0 2
73549: PPUSH
73550: CALL_OW 251
73554: ST_TO_ADDR
// d := GetDir ( building ) ;
73555: LD_ADDR_VAR 0 8
73559: PUSH
73560: LD_VAR 0 2
73564: PPUSH
73565: CALL_OW 254
73569: ST_TO_ADDR
// r := 4 ;
73570: LD_ADDR_VAR 0 9
73574: PUSH
73575: LD_INT 4
73577: ST_TO_ADDR
// for i := 1 to 5 do
73578: LD_ADDR_VAR 0 10
73582: PUSH
73583: DOUBLE
73584: LD_INT 1
73586: DEC
73587: ST_TO_ADDR
73588: LD_INT 5
73590: PUSH
73591: FOR_TO
73592: IFFALSE 73749
// begin _x := ShiftX ( x , d , r + i ) ;
73594: LD_ADDR_VAR 0 5
73598: PUSH
73599: LD_VAR 0 4
73603: PPUSH
73604: LD_VAR 0 8
73608: PPUSH
73609: LD_VAR 0 9
73613: PUSH
73614: LD_VAR 0 10
73618: PLUS
73619: PPUSH
73620: CALL_OW 272
73624: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
73625: LD_ADDR_VAR 0 7
73629: PUSH
73630: LD_VAR 0 6
73634: PPUSH
73635: LD_VAR 0 8
73639: PPUSH
73640: LD_VAR 0 9
73644: PUSH
73645: LD_VAR 0 10
73649: PLUS
73650: PPUSH
73651: CALL_OW 273
73655: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
73656: LD_VAR 0 5
73660: PPUSH
73661: LD_VAR 0 7
73665: PPUSH
73666: CALL_OW 488
73670: PUSH
73671: LD_VAR 0 5
73675: PPUSH
73676: LD_VAR 0 7
73680: PPUSH
73681: CALL_OW 428
73685: PPUSH
73686: CALL_OW 247
73690: PUSH
73691: LD_INT 3
73693: PUSH
73694: LD_INT 2
73696: PUSH
73697: EMPTY
73698: LIST
73699: LIST
73700: IN
73701: NOT
73702: AND
73703: IFFALSE 73747
// begin ComMoveXY ( unit , _x , _y ) ;
73705: LD_VAR 0 1
73709: PPUSH
73710: LD_VAR 0 5
73714: PPUSH
73715: LD_VAR 0 7
73719: PPUSH
73720: CALL_OW 111
// result := [ _x , _y ] ;
73724: LD_ADDR_VAR 0 3
73728: PUSH
73729: LD_VAR 0 5
73733: PUSH
73734: LD_VAR 0 7
73738: PUSH
73739: EMPTY
73740: LIST
73741: LIST
73742: ST_TO_ADDR
// exit ;
73743: POP
73744: POP
73745: GO 73751
// end ; end ;
73747: GO 73591
73749: POP
73750: POP
// end ;
73751: LD_VAR 0 3
73755: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
73756: LD_INT 0
73758: PPUSH
73759: PPUSH
73760: PPUSH
// result := 0 ;
73761: LD_ADDR_VAR 0 3
73765: PUSH
73766: LD_INT 0
73768: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
73769: LD_VAR 0 1
73773: PUSH
73774: LD_INT 0
73776: LESS
73777: PUSH
73778: LD_VAR 0 1
73782: PUSH
73783: LD_INT 8
73785: GREATER
73786: OR
73787: PUSH
73788: LD_VAR 0 2
73792: PUSH
73793: LD_INT 0
73795: LESS
73796: OR
73797: PUSH
73798: LD_VAR 0 2
73802: PUSH
73803: LD_INT 8
73805: GREATER
73806: OR
73807: IFFALSE 73811
// exit ;
73809: GO 73886
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
73811: LD_ADDR_VAR 0 4
73815: PUSH
73816: LD_INT 22
73818: PUSH
73819: LD_VAR 0 2
73823: PUSH
73824: EMPTY
73825: LIST
73826: LIST
73827: PPUSH
73828: CALL_OW 69
73832: PUSH
73833: FOR_IN
73834: IFFALSE 73884
// begin un := UnitShoot ( i ) ;
73836: LD_ADDR_VAR 0 5
73840: PUSH
73841: LD_VAR 0 4
73845: PPUSH
73846: CALL_OW 504
73850: ST_TO_ADDR
// if GetSide ( un ) = side1 then
73851: LD_VAR 0 5
73855: PPUSH
73856: CALL_OW 255
73860: PUSH
73861: LD_VAR 0 1
73865: EQUAL
73866: IFFALSE 73882
// begin result := un ;
73868: LD_ADDR_VAR 0 3
73872: PUSH
73873: LD_VAR 0 5
73877: ST_TO_ADDR
// exit ;
73878: POP
73879: POP
73880: GO 73886
// end ; end ;
73882: GO 73833
73884: POP
73885: POP
// end ;
73886: LD_VAR 0 3
73890: RET
// export function GetCargoBay ( units ) ; begin
73891: LD_INT 0
73893: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
73894: LD_ADDR_VAR 0 2
73898: PUSH
73899: LD_VAR 0 1
73903: PPUSH
73904: LD_INT 2
73906: PUSH
73907: LD_INT 34
73909: PUSH
73910: LD_INT 12
73912: PUSH
73913: EMPTY
73914: LIST
73915: LIST
73916: PUSH
73917: LD_INT 34
73919: PUSH
73920: LD_INT 51
73922: PUSH
73923: EMPTY
73924: LIST
73925: LIST
73926: PUSH
73927: LD_INT 34
73929: PUSH
73930: LD_INT 32
73932: PUSH
73933: EMPTY
73934: LIST
73935: LIST
73936: PUSH
73937: LD_INT 34
73939: PUSH
73940: LD_INT 89
73942: PUSH
73943: EMPTY
73944: LIST
73945: LIST
73946: PUSH
73947: EMPTY
73948: LIST
73949: LIST
73950: LIST
73951: LIST
73952: LIST
73953: PPUSH
73954: CALL_OW 72
73958: ST_TO_ADDR
// end ;
73959: LD_VAR 0 2
73963: RET
// export function Negate ( value ) ; begin
73964: LD_INT 0
73966: PPUSH
// result := not value ;
73967: LD_ADDR_VAR 0 2
73971: PUSH
73972: LD_VAR 0 1
73976: NOT
73977: ST_TO_ADDR
// end ;
73978: LD_VAR 0 2
73982: RET
// export function Inc ( value ) ; begin
73983: LD_INT 0
73985: PPUSH
// result := value + 1 ;
73986: LD_ADDR_VAR 0 2
73990: PUSH
73991: LD_VAR 0 1
73995: PUSH
73996: LD_INT 1
73998: PLUS
73999: ST_TO_ADDR
// end ;
74000: LD_VAR 0 2
74004: RET
// export function Dec ( value ) ; begin
74005: LD_INT 0
74007: PPUSH
// result := value - 1 ;
74008: LD_ADDR_VAR 0 2
74012: PUSH
74013: LD_VAR 0 1
74017: PUSH
74018: LD_INT 1
74020: MINUS
74021: ST_TO_ADDR
// end ;
74022: LD_VAR 0 2
74026: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
74027: LD_INT 0
74029: PPUSH
74030: PPUSH
74031: PPUSH
74032: PPUSH
74033: PPUSH
74034: PPUSH
74035: PPUSH
74036: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
74037: LD_VAR 0 1
74041: PPUSH
74042: LD_VAR 0 2
74046: PPUSH
74047: CALL_OW 488
74051: NOT
74052: PUSH
74053: LD_VAR 0 3
74057: PPUSH
74058: LD_VAR 0 4
74062: PPUSH
74063: CALL_OW 488
74067: NOT
74068: OR
74069: IFFALSE 74082
// begin result := - 1 ;
74071: LD_ADDR_VAR 0 5
74075: PUSH
74076: LD_INT 1
74078: NEG
74079: ST_TO_ADDR
// exit ;
74080: GO 74317
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
74082: LD_ADDR_VAR 0 12
74086: PUSH
74087: LD_VAR 0 1
74091: PPUSH
74092: LD_VAR 0 2
74096: PPUSH
74097: LD_VAR 0 3
74101: PPUSH
74102: LD_VAR 0 4
74106: PPUSH
74107: CALL 73167 0 4
74111: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
74112: LD_ADDR_VAR 0 11
74116: PUSH
74117: LD_VAR 0 1
74121: PPUSH
74122: LD_VAR 0 2
74126: PPUSH
74127: LD_VAR 0 12
74131: PUSH
74132: LD_INT 1
74134: ARRAY
74135: PPUSH
74136: LD_VAR 0 12
74140: PUSH
74141: LD_INT 2
74143: ARRAY
74144: PPUSH
74145: CALL_OW 298
74149: ST_TO_ADDR
// distance := 9999 ;
74150: LD_ADDR_VAR 0 10
74154: PUSH
74155: LD_INT 9999
74157: ST_TO_ADDR
// for i := 0 to 5 do
74158: LD_ADDR_VAR 0 6
74162: PUSH
74163: DOUBLE
74164: LD_INT 0
74166: DEC
74167: ST_TO_ADDR
74168: LD_INT 5
74170: PUSH
74171: FOR_TO
74172: IFFALSE 74315
// begin _x := ShiftX ( x1 , i , centerDist ) ;
74174: LD_ADDR_VAR 0 7
74178: PUSH
74179: LD_VAR 0 1
74183: PPUSH
74184: LD_VAR 0 6
74188: PPUSH
74189: LD_VAR 0 11
74193: PPUSH
74194: CALL_OW 272
74198: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
74199: LD_ADDR_VAR 0 8
74203: PUSH
74204: LD_VAR 0 2
74208: PPUSH
74209: LD_VAR 0 6
74213: PPUSH
74214: LD_VAR 0 11
74218: PPUSH
74219: CALL_OW 273
74223: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
74224: LD_VAR 0 7
74228: PPUSH
74229: LD_VAR 0 8
74233: PPUSH
74234: CALL_OW 488
74238: NOT
74239: IFFALSE 74243
// continue ;
74241: GO 74171
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
74243: LD_ADDR_VAR 0 9
74247: PUSH
74248: LD_VAR 0 12
74252: PUSH
74253: LD_INT 1
74255: ARRAY
74256: PPUSH
74257: LD_VAR 0 12
74261: PUSH
74262: LD_INT 2
74264: ARRAY
74265: PPUSH
74266: LD_VAR 0 7
74270: PPUSH
74271: LD_VAR 0 8
74275: PPUSH
74276: CALL_OW 298
74280: ST_TO_ADDR
// if tmp < distance then
74281: LD_VAR 0 9
74285: PUSH
74286: LD_VAR 0 10
74290: LESS
74291: IFFALSE 74313
// begin result := i ;
74293: LD_ADDR_VAR 0 5
74297: PUSH
74298: LD_VAR 0 6
74302: ST_TO_ADDR
// distance := tmp ;
74303: LD_ADDR_VAR 0 10
74307: PUSH
74308: LD_VAR 0 9
74312: ST_TO_ADDR
// end ; end ;
74313: GO 74171
74315: POP
74316: POP
// end ;
74317: LD_VAR 0 5
74321: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74322: LD_INT 0
74324: PPUSH
74325: PPUSH
// if not driver or not IsInUnit ( driver ) then
74326: LD_VAR 0 1
74330: NOT
74331: PUSH
74332: LD_VAR 0 1
74336: PPUSH
74337: CALL_OW 310
74341: NOT
74342: OR
74343: IFFALSE 74347
// exit ;
74345: GO 74437
// vehicle := IsInUnit ( driver ) ;
74347: LD_ADDR_VAR 0 3
74351: PUSH
74352: LD_VAR 0 1
74356: PPUSH
74357: CALL_OW 310
74361: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74362: LD_VAR 0 1
74366: PPUSH
74367: LD_STRING \
74369: PUSH
74370: LD_INT 0
74372: PUSH
74373: LD_INT 0
74375: PUSH
74376: LD_INT 0
74378: PUSH
74379: LD_INT 0
74381: PUSH
74382: LD_INT 0
74384: PUSH
74385: LD_INT 0
74387: PUSH
74388: EMPTY
74389: LIST
74390: LIST
74391: LIST
74392: LIST
74393: LIST
74394: LIST
74395: LIST
74396: PUSH
74397: LD_STRING E
74399: PUSH
74400: LD_INT 0
74402: PUSH
74403: LD_INT 0
74405: PUSH
74406: LD_VAR 0 3
74410: PUSH
74411: LD_INT 0
74413: PUSH
74414: LD_INT 0
74416: PUSH
74417: LD_INT 0
74419: PUSH
74420: EMPTY
74421: LIST
74422: LIST
74423: LIST
74424: LIST
74425: LIST
74426: LIST
74427: LIST
74428: PUSH
74429: EMPTY
74430: LIST
74431: LIST
74432: PPUSH
74433: CALL_OW 446
// end ;
74437: LD_VAR 0 2
74441: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74442: LD_INT 0
74444: PPUSH
74445: PPUSH
// if not driver or not IsInUnit ( driver ) then
74446: LD_VAR 0 1
74450: NOT
74451: PUSH
74452: LD_VAR 0 1
74456: PPUSH
74457: CALL_OW 310
74461: NOT
74462: OR
74463: IFFALSE 74467
// exit ;
74465: GO 74557
// vehicle := IsInUnit ( driver ) ;
74467: LD_ADDR_VAR 0 3
74471: PUSH
74472: LD_VAR 0 1
74476: PPUSH
74477: CALL_OW 310
74481: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74482: LD_VAR 0 1
74486: PPUSH
74487: LD_STRING \
74489: PUSH
74490: LD_INT 0
74492: PUSH
74493: LD_INT 0
74495: PUSH
74496: LD_INT 0
74498: PUSH
74499: LD_INT 0
74501: PUSH
74502: LD_INT 0
74504: PUSH
74505: LD_INT 0
74507: PUSH
74508: EMPTY
74509: LIST
74510: LIST
74511: LIST
74512: LIST
74513: LIST
74514: LIST
74515: LIST
74516: PUSH
74517: LD_STRING E
74519: PUSH
74520: LD_INT 0
74522: PUSH
74523: LD_INT 0
74525: PUSH
74526: LD_VAR 0 3
74530: PUSH
74531: LD_INT 0
74533: PUSH
74534: LD_INT 0
74536: PUSH
74537: LD_INT 0
74539: PUSH
74540: EMPTY
74541: LIST
74542: LIST
74543: LIST
74544: LIST
74545: LIST
74546: LIST
74547: LIST
74548: PUSH
74549: EMPTY
74550: LIST
74551: LIST
74552: PPUSH
74553: CALL_OW 447
// end ;
74557: LD_VAR 0 2
74561: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
74562: LD_INT 0
74564: PPUSH
74565: PPUSH
74566: PPUSH
// tmp := [ ] ;
74567: LD_ADDR_VAR 0 5
74571: PUSH
74572: EMPTY
74573: ST_TO_ADDR
// for i in units do
74574: LD_ADDR_VAR 0 4
74578: PUSH
74579: LD_VAR 0 1
74583: PUSH
74584: FOR_IN
74585: IFFALSE 74623
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
74587: LD_ADDR_VAR 0 5
74591: PUSH
74592: LD_VAR 0 5
74596: PPUSH
74597: LD_VAR 0 5
74601: PUSH
74602: LD_INT 1
74604: PLUS
74605: PPUSH
74606: LD_VAR 0 4
74610: PPUSH
74611: CALL_OW 256
74615: PPUSH
74616: CALL_OW 2
74620: ST_TO_ADDR
74621: GO 74584
74623: POP
74624: POP
// if not tmp then
74625: LD_VAR 0 5
74629: NOT
74630: IFFALSE 74634
// exit ;
74632: GO 74682
// if asc then
74634: LD_VAR 0 2
74638: IFFALSE 74662
// result := SortListByListAsc ( units , tmp ) else
74640: LD_ADDR_VAR 0 3
74644: PUSH
74645: LD_VAR 0 1
74649: PPUSH
74650: LD_VAR 0 5
74654: PPUSH
74655: CALL_OW 76
74659: ST_TO_ADDR
74660: GO 74682
// result := SortListByListDesc ( units , tmp ) ;
74662: LD_ADDR_VAR 0 3
74666: PUSH
74667: LD_VAR 0 1
74671: PPUSH
74672: LD_VAR 0 5
74676: PPUSH
74677: CALL_OW 77
74681: ST_TO_ADDR
// end ;
74682: LD_VAR 0 3
74686: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
74687: LD_INT 0
74689: PPUSH
74690: PPUSH
// task := GetTaskList ( mech ) ;
74691: LD_ADDR_VAR 0 4
74695: PUSH
74696: LD_VAR 0 1
74700: PPUSH
74701: CALL_OW 437
74705: ST_TO_ADDR
// if not task then
74706: LD_VAR 0 4
74710: NOT
74711: IFFALSE 74715
// exit ;
74713: GO 74757
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
74715: LD_ADDR_VAR 0 3
74719: PUSH
74720: LD_VAR 0 4
74724: PUSH
74725: LD_INT 1
74727: ARRAY
74728: PUSH
74729: LD_INT 1
74731: ARRAY
74732: PUSH
74733: LD_STRING r
74735: EQUAL
74736: PUSH
74737: LD_VAR 0 4
74741: PUSH
74742: LD_INT 1
74744: ARRAY
74745: PUSH
74746: LD_INT 4
74748: ARRAY
74749: PUSH
74750: LD_VAR 0 2
74754: EQUAL
74755: AND
74756: ST_TO_ADDR
// end ;
74757: LD_VAR 0 3
74761: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
74762: LD_INT 0
74764: PPUSH
// SetDir ( unit , d ) ;
74765: LD_VAR 0 1
74769: PPUSH
74770: LD_VAR 0 4
74774: PPUSH
74775: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
74779: LD_VAR 0 1
74783: PPUSH
74784: LD_VAR 0 2
74788: PPUSH
74789: LD_VAR 0 3
74793: PPUSH
74794: LD_VAR 0 5
74798: PPUSH
74799: CALL_OW 48
// end ;
74803: LD_VAR 0 6
74807: RET
// export function ToNaturalNumber ( number ) ; begin
74808: LD_INT 0
74810: PPUSH
// result := number div 1 ;
74811: LD_ADDR_VAR 0 2
74815: PUSH
74816: LD_VAR 0 1
74820: PUSH
74821: LD_INT 1
74823: DIV
74824: ST_TO_ADDR
// if number < 0 then
74825: LD_VAR 0 1
74829: PUSH
74830: LD_INT 0
74832: LESS
74833: IFFALSE 74843
// result := 0 ;
74835: LD_ADDR_VAR 0 2
74839: PUSH
74840: LD_INT 0
74842: ST_TO_ADDR
// end ;
74843: LD_VAR 0 2
74847: RET
// export function SortByClass ( units , class ) ; var un ; begin
74848: LD_INT 0
74850: PPUSH
74851: PPUSH
// if not units or not class then
74852: LD_VAR 0 1
74856: NOT
74857: PUSH
74858: LD_VAR 0 2
74862: NOT
74863: OR
74864: IFFALSE 74868
// exit ;
74866: GO 74963
// result := [ ] ;
74868: LD_ADDR_VAR 0 3
74872: PUSH
74873: EMPTY
74874: ST_TO_ADDR
// for un in units do
74875: LD_ADDR_VAR 0 4
74879: PUSH
74880: LD_VAR 0 1
74884: PUSH
74885: FOR_IN
74886: IFFALSE 74961
// if GetClass ( un ) = class then
74888: LD_VAR 0 4
74892: PPUSH
74893: CALL_OW 257
74897: PUSH
74898: LD_VAR 0 2
74902: EQUAL
74903: IFFALSE 74930
// result := Insert ( result , 1 , un ) else
74905: LD_ADDR_VAR 0 3
74909: PUSH
74910: LD_VAR 0 3
74914: PPUSH
74915: LD_INT 1
74917: PPUSH
74918: LD_VAR 0 4
74922: PPUSH
74923: CALL_OW 2
74927: ST_TO_ADDR
74928: GO 74959
// result := Replace ( result , result + 1 , un ) ;
74930: LD_ADDR_VAR 0 3
74934: PUSH
74935: LD_VAR 0 3
74939: PPUSH
74940: LD_VAR 0 3
74944: PUSH
74945: LD_INT 1
74947: PLUS
74948: PPUSH
74949: LD_VAR 0 4
74953: PPUSH
74954: CALL_OW 1
74958: ST_TO_ADDR
74959: GO 74885
74961: POP
74962: POP
// end ;
74963: LD_VAR 0 3
74967: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
74968: LD_INT 0
74970: PPUSH
74971: PPUSH
74972: PPUSH
74973: PPUSH
74974: PPUSH
74975: PPUSH
74976: PPUSH
// result := [ ] ;
74977: LD_ADDR_VAR 0 4
74981: PUSH
74982: EMPTY
74983: ST_TO_ADDR
// if x - r < 0 then
74984: LD_VAR 0 1
74988: PUSH
74989: LD_VAR 0 3
74993: MINUS
74994: PUSH
74995: LD_INT 0
74997: LESS
74998: IFFALSE 75010
// min_x := 0 else
75000: LD_ADDR_VAR 0 8
75004: PUSH
75005: LD_INT 0
75007: ST_TO_ADDR
75008: GO 75026
// min_x := x - r ;
75010: LD_ADDR_VAR 0 8
75014: PUSH
75015: LD_VAR 0 1
75019: PUSH
75020: LD_VAR 0 3
75024: MINUS
75025: ST_TO_ADDR
// if y - r < 0 then
75026: LD_VAR 0 2
75030: PUSH
75031: LD_VAR 0 3
75035: MINUS
75036: PUSH
75037: LD_INT 0
75039: LESS
75040: IFFALSE 75052
// min_y := 0 else
75042: LD_ADDR_VAR 0 7
75046: PUSH
75047: LD_INT 0
75049: ST_TO_ADDR
75050: GO 75068
// min_y := y - r ;
75052: LD_ADDR_VAR 0 7
75056: PUSH
75057: LD_VAR 0 2
75061: PUSH
75062: LD_VAR 0 3
75066: MINUS
75067: ST_TO_ADDR
// max_x := x + r ;
75068: LD_ADDR_VAR 0 9
75072: PUSH
75073: LD_VAR 0 1
75077: PUSH
75078: LD_VAR 0 3
75082: PLUS
75083: ST_TO_ADDR
// max_y := y + r ;
75084: LD_ADDR_VAR 0 10
75088: PUSH
75089: LD_VAR 0 2
75093: PUSH
75094: LD_VAR 0 3
75098: PLUS
75099: ST_TO_ADDR
// for _x = min_x to max_x do
75100: LD_ADDR_VAR 0 5
75104: PUSH
75105: DOUBLE
75106: LD_VAR 0 8
75110: DEC
75111: ST_TO_ADDR
75112: LD_VAR 0 9
75116: PUSH
75117: FOR_TO
75118: IFFALSE 75219
// for _y = min_y to max_y do
75120: LD_ADDR_VAR 0 6
75124: PUSH
75125: DOUBLE
75126: LD_VAR 0 7
75130: DEC
75131: ST_TO_ADDR
75132: LD_VAR 0 10
75136: PUSH
75137: FOR_TO
75138: IFFALSE 75215
// begin if not ValidHex ( _x , _y ) then
75140: LD_VAR 0 5
75144: PPUSH
75145: LD_VAR 0 6
75149: PPUSH
75150: CALL_OW 488
75154: NOT
75155: IFFALSE 75159
// continue ;
75157: GO 75137
// if GetResourceTypeXY ( _x , _y ) then
75159: LD_VAR 0 5
75163: PPUSH
75164: LD_VAR 0 6
75168: PPUSH
75169: CALL_OW 283
75173: IFFALSE 75213
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
75175: LD_ADDR_VAR 0 4
75179: PUSH
75180: LD_VAR 0 4
75184: PPUSH
75185: LD_VAR 0 4
75189: PUSH
75190: LD_INT 1
75192: PLUS
75193: PPUSH
75194: LD_VAR 0 5
75198: PUSH
75199: LD_VAR 0 6
75203: PUSH
75204: EMPTY
75205: LIST
75206: LIST
75207: PPUSH
75208: CALL_OW 1
75212: ST_TO_ADDR
// end ;
75213: GO 75137
75215: POP
75216: POP
75217: GO 75117
75219: POP
75220: POP
// end ;
75221: LD_VAR 0 4
75225: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
75226: LD_INT 0
75228: PPUSH
75229: PPUSH
75230: PPUSH
75231: PPUSH
75232: PPUSH
75233: PPUSH
75234: PPUSH
75235: PPUSH
// if not units then
75236: LD_VAR 0 1
75240: NOT
75241: IFFALSE 75245
// exit ;
75243: GO 75769
// result := UnitFilter ( units , [ f_ok ] ) ;
75245: LD_ADDR_VAR 0 3
75249: PUSH
75250: LD_VAR 0 1
75254: PPUSH
75255: LD_INT 50
75257: PUSH
75258: EMPTY
75259: LIST
75260: PPUSH
75261: CALL_OW 72
75265: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
75266: LD_ADDR_VAR 0 8
75270: PUSH
75271: LD_VAR 0 1
75275: PUSH
75276: LD_INT 1
75278: ARRAY
75279: PPUSH
75280: CALL_OW 255
75284: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
75285: LD_ADDR_VAR 0 10
75289: PUSH
75290: LD_INT 29
75292: PUSH
75293: LD_INT 91
75295: PUSH
75296: LD_INT 49
75298: PUSH
75299: EMPTY
75300: LIST
75301: LIST
75302: LIST
75303: ST_TO_ADDR
// if not result then
75304: LD_VAR 0 3
75308: NOT
75309: IFFALSE 75313
// exit ;
75311: GO 75769
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
75313: LD_ADDR_VAR 0 5
75317: PUSH
75318: LD_INT 81
75320: PUSH
75321: LD_VAR 0 8
75325: PUSH
75326: EMPTY
75327: LIST
75328: LIST
75329: PPUSH
75330: CALL_OW 69
75334: ST_TO_ADDR
// for i in result do
75335: LD_ADDR_VAR 0 4
75339: PUSH
75340: LD_VAR 0 3
75344: PUSH
75345: FOR_IN
75346: IFFALSE 75767
// begin tag := GetTag ( i ) + 1 ;
75348: LD_ADDR_VAR 0 9
75352: PUSH
75353: LD_VAR 0 4
75357: PPUSH
75358: CALL_OW 110
75362: PUSH
75363: LD_INT 1
75365: PLUS
75366: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
75367: LD_ADDR_VAR 0 7
75371: PUSH
75372: LD_VAR 0 4
75376: PPUSH
75377: CALL_OW 250
75381: PPUSH
75382: LD_VAR 0 4
75386: PPUSH
75387: CALL_OW 251
75391: PPUSH
75392: LD_INT 6
75394: PPUSH
75395: CALL 74968 0 3
75399: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
75400: LD_VAR 0 4
75404: PPUSH
75405: CALL_OW 247
75409: PUSH
75410: LD_INT 2
75412: EQUAL
75413: PUSH
75414: LD_VAR 0 7
75418: AND
75419: PUSH
75420: LD_VAR 0 4
75424: PPUSH
75425: CALL_OW 264
75429: PUSH
75430: LD_VAR 0 10
75434: IN
75435: NOT
75436: AND
75437: IFFALSE 75476
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
75439: LD_VAR 0 4
75443: PPUSH
75444: LD_VAR 0 7
75448: PUSH
75449: LD_INT 1
75451: ARRAY
75452: PUSH
75453: LD_INT 1
75455: ARRAY
75456: PPUSH
75457: LD_VAR 0 7
75461: PUSH
75462: LD_INT 1
75464: ARRAY
75465: PUSH
75466: LD_INT 2
75468: ARRAY
75469: PPUSH
75470: CALL_OW 116
75474: GO 75765
// if path > tag then
75476: LD_VAR 0 2
75480: PUSH
75481: LD_VAR 0 9
75485: GREATER
75486: IFFALSE 75694
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
75488: LD_ADDR_VAR 0 6
75492: PUSH
75493: LD_VAR 0 5
75497: PPUSH
75498: LD_INT 91
75500: PUSH
75501: LD_VAR 0 4
75505: PUSH
75506: LD_INT 8
75508: PUSH
75509: EMPTY
75510: LIST
75511: LIST
75512: LIST
75513: PPUSH
75514: CALL_OW 72
75518: ST_TO_ADDR
// if nearEnemy then
75519: LD_VAR 0 6
75523: IFFALSE 75592
// begin if GetWeapon ( i ) = ru_time_lapser then
75525: LD_VAR 0 4
75529: PPUSH
75530: CALL_OW 264
75534: PUSH
75535: LD_INT 49
75537: EQUAL
75538: IFFALSE 75566
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
75540: LD_VAR 0 4
75544: PPUSH
75545: LD_VAR 0 6
75549: PPUSH
75550: LD_VAR 0 4
75554: PPUSH
75555: CALL_OW 74
75559: PPUSH
75560: CALL_OW 112
75564: GO 75590
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
75566: LD_VAR 0 4
75570: PPUSH
75571: LD_VAR 0 6
75575: PPUSH
75576: LD_VAR 0 4
75580: PPUSH
75581: CALL_OW 74
75585: PPUSH
75586: CALL_OW 115
// end else
75590: GO 75692
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
75592: LD_VAR 0 4
75596: PPUSH
75597: LD_VAR 0 2
75601: PUSH
75602: LD_VAR 0 9
75606: ARRAY
75607: PUSH
75608: LD_INT 1
75610: ARRAY
75611: PPUSH
75612: LD_VAR 0 2
75616: PUSH
75617: LD_VAR 0 9
75621: ARRAY
75622: PUSH
75623: LD_INT 2
75625: ARRAY
75626: PPUSH
75627: CALL_OW 297
75631: PUSH
75632: LD_INT 6
75634: GREATER
75635: IFFALSE 75678
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
75637: LD_VAR 0 4
75641: PPUSH
75642: LD_VAR 0 2
75646: PUSH
75647: LD_VAR 0 9
75651: ARRAY
75652: PUSH
75653: LD_INT 1
75655: ARRAY
75656: PPUSH
75657: LD_VAR 0 2
75661: PUSH
75662: LD_VAR 0 9
75666: ARRAY
75667: PUSH
75668: LD_INT 2
75670: ARRAY
75671: PPUSH
75672: CALL_OW 114
75676: GO 75692
// SetTag ( i , tag ) ;
75678: LD_VAR 0 4
75682: PPUSH
75683: LD_VAR 0 9
75687: PPUSH
75688: CALL_OW 109
// end else
75692: GO 75765
// if enemy then
75694: LD_VAR 0 5
75698: IFFALSE 75765
// begin if GetWeapon ( i ) = ru_time_lapser then
75700: LD_VAR 0 4
75704: PPUSH
75705: CALL_OW 264
75709: PUSH
75710: LD_INT 49
75712: EQUAL
75713: IFFALSE 75741
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
75715: LD_VAR 0 4
75719: PPUSH
75720: LD_VAR 0 5
75724: PPUSH
75725: LD_VAR 0 4
75729: PPUSH
75730: CALL_OW 74
75734: PPUSH
75735: CALL_OW 112
75739: GO 75765
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
75741: LD_VAR 0 4
75745: PPUSH
75746: LD_VAR 0 5
75750: PPUSH
75751: LD_VAR 0 4
75755: PPUSH
75756: CALL_OW 74
75760: PPUSH
75761: CALL_OW 115
// end ; end ;
75765: GO 75345
75767: POP
75768: POP
// end ;
75769: LD_VAR 0 3
75773: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
75774: LD_INT 0
75776: PPUSH
75777: PPUSH
75778: PPUSH
// if not unit or IsInUnit ( unit ) then
75779: LD_VAR 0 1
75783: NOT
75784: PUSH
75785: LD_VAR 0 1
75789: PPUSH
75790: CALL_OW 310
75794: OR
75795: IFFALSE 75799
// exit ;
75797: GO 75890
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
75799: LD_ADDR_VAR 0 4
75803: PUSH
75804: LD_VAR 0 1
75808: PPUSH
75809: CALL_OW 250
75813: PPUSH
75814: LD_VAR 0 2
75818: PPUSH
75819: LD_INT 1
75821: PPUSH
75822: CALL_OW 272
75826: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
75827: LD_ADDR_VAR 0 5
75831: PUSH
75832: LD_VAR 0 1
75836: PPUSH
75837: CALL_OW 251
75841: PPUSH
75842: LD_VAR 0 2
75846: PPUSH
75847: LD_INT 1
75849: PPUSH
75850: CALL_OW 273
75854: ST_TO_ADDR
// if ValidHex ( x , y ) then
75855: LD_VAR 0 4
75859: PPUSH
75860: LD_VAR 0 5
75864: PPUSH
75865: CALL_OW 488
75869: IFFALSE 75890
// ComTurnXY ( unit , x , y ) ;
75871: LD_VAR 0 1
75875: PPUSH
75876: LD_VAR 0 4
75880: PPUSH
75881: LD_VAR 0 5
75885: PPUSH
75886: CALL_OW 118
// end ;
75890: LD_VAR 0 3
75894: RET
// export function SeeUnits ( side , units ) ; var i ; begin
75895: LD_INT 0
75897: PPUSH
75898: PPUSH
// result := false ;
75899: LD_ADDR_VAR 0 3
75903: PUSH
75904: LD_INT 0
75906: ST_TO_ADDR
// if not units then
75907: LD_VAR 0 2
75911: NOT
75912: IFFALSE 75916
// exit ;
75914: GO 75961
// for i in units do
75916: LD_ADDR_VAR 0 4
75920: PUSH
75921: LD_VAR 0 2
75925: PUSH
75926: FOR_IN
75927: IFFALSE 75959
// if See ( side , i ) then
75929: LD_VAR 0 1
75933: PPUSH
75934: LD_VAR 0 4
75938: PPUSH
75939: CALL_OW 292
75943: IFFALSE 75957
// begin result := true ;
75945: LD_ADDR_VAR 0 3
75949: PUSH
75950: LD_INT 1
75952: ST_TO_ADDR
// exit ;
75953: POP
75954: POP
75955: GO 75961
// end ;
75957: GO 75926
75959: POP
75960: POP
// end ;
75961: LD_VAR 0 3
75965: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
75966: LD_INT 0
75968: PPUSH
75969: PPUSH
75970: PPUSH
75971: PPUSH
// if not unit or not points then
75972: LD_VAR 0 1
75976: NOT
75977: PUSH
75978: LD_VAR 0 2
75982: NOT
75983: OR
75984: IFFALSE 75988
// exit ;
75986: GO 76078
// dist := 99999 ;
75988: LD_ADDR_VAR 0 5
75992: PUSH
75993: LD_INT 99999
75995: ST_TO_ADDR
// for i in points do
75996: LD_ADDR_VAR 0 4
76000: PUSH
76001: LD_VAR 0 2
76005: PUSH
76006: FOR_IN
76007: IFFALSE 76076
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
76009: LD_ADDR_VAR 0 6
76013: PUSH
76014: LD_VAR 0 1
76018: PPUSH
76019: LD_VAR 0 4
76023: PUSH
76024: LD_INT 1
76026: ARRAY
76027: PPUSH
76028: LD_VAR 0 4
76032: PUSH
76033: LD_INT 2
76035: ARRAY
76036: PPUSH
76037: CALL_OW 297
76041: ST_TO_ADDR
// if tmpDist < dist then
76042: LD_VAR 0 6
76046: PUSH
76047: LD_VAR 0 5
76051: LESS
76052: IFFALSE 76074
// begin result := i ;
76054: LD_ADDR_VAR 0 3
76058: PUSH
76059: LD_VAR 0 4
76063: ST_TO_ADDR
// dist := tmpDist ;
76064: LD_ADDR_VAR 0 5
76068: PUSH
76069: LD_VAR 0 6
76073: ST_TO_ADDR
// end ; end ;
76074: GO 76006
76076: POP
76077: POP
// end ;
76078: LD_VAR 0 3
76082: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
76083: LD_INT 0
76085: PPUSH
// uc_side := side ;
76086: LD_ADDR_OWVAR 20
76090: PUSH
76091: LD_VAR 0 1
76095: ST_TO_ADDR
// uc_nation := 3 ;
76096: LD_ADDR_OWVAR 21
76100: PUSH
76101: LD_INT 3
76103: ST_TO_ADDR
// vc_chassis := 25 ;
76104: LD_ADDR_OWVAR 37
76108: PUSH
76109: LD_INT 25
76111: ST_TO_ADDR
// vc_engine := engine_siberite ;
76112: LD_ADDR_OWVAR 39
76116: PUSH
76117: LD_INT 3
76119: ST_TO_ADDR
// vc_control := control_computer ;
76120: LD_ADDR_OWVAR 38
76124: PUSH
76125: LD_INT 3
76127: ST_TO_ADDR
// vc_weapon := 59 ;
76128: LD_ADDR_OWVAR 40
76132: PUSH
76133: LD_INT 59
76135: ST_TO_ADDR
// result := CreateVehicle ;
76136: LD_ADDR_VAR 0 5
76140: PUSH
76141: CALL_OW 45
76145: ST_TO_ADDR
// SetDir ( result , d ) ;
76146: LD_VAR 0 5
76150: PPUSH
76151: LD_VAR 0 4
76155: PPUSH
76156: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
76160: LD_VAR 0 5
76164: PPUSH
76165: LD_VAR 0 2
76169: PPUSH
76170: LD_VAR 0 3
76174: PPUSH
76175: LD_INT 0
76177: PPUSH
76178: CALL_OW 48
// end ;
76182: LD_VAR 0 5
76186: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
76187: LD_INT 0
76189: PPUSH
76190: PPUSH
76191: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
76192: LD_ADDR_VAR 0 2
76196: PUSH
76197: LD_INT 0
76199: PUSH
76200: LD_INT 0
76202: PUSH
76203: LD_INT 0
76205: PUSH
76206: LD_INT 0
76208: PUSH
76209: EMPTY
76210: LIST
76211: LIST
76212: LIST
76213: LIST
76214: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
76215: LD_VAR 0 1
76219: NOT
76220: PUSH
76221: LD_VAR 0 1
76225: PPUSH
76226: CALL_OW 264
76230: PUSH
76231: LD_INT 12
76233: PUSH
76234: LD_INT 51
76236: PUSH
76237: LD_INT 32
76239: PUSH
76240: LD_INT 89
76242: PUSH
76243: EMPTY
76244: LIST
76245: LIST
76246: LIST
76247: LIST
76248: IN
76249: NOT
76250: OR
76251: IFFALSE 76255
// exit ;
76253: GO 76353
// for i := 1 to 3 do
76255: LD_ADDR_VAR 0 3
76259: PUSH
76260: DOUBLE
76261: LD_INT 1
76263: DEC
76264: ST_TO_ADDR
76265: LD_INT 3
76267: PUSH
76268: FOR_TO
76269: IFFALSE 76351
// begin tmp := GetCargo ( cargo , i ) ;
76271: LD_ADDR_VAR 0 4
76275: PUSH
76276: LD_VAR 0 1
76280: PPUSH
76281: LD_VAR 0 3
76285: PPUSH
76286: CALL_OW 289
76290: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
76291: LD_ADDR_VAR 0 2
76295: PUSH
76296: LD_VAR 0 2
76300: PPUSH
76301: LD_VAR 0 3
76305: PPUSH
76306: LD_VAR 0 4
76310: PPUSH
76311: CALL_OW 1
76315: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
76316: LD_ADDR_VAR 0 2
76320: PUSH
76321: LD_VAR 0 2
76325: PPUSH
76326: LD_INT 4
76328: PPUSH
76329: LD_VAR 0 2
76333: PUSH
76334: LD_INT 4
76336: ARRAY
76337: PUSH
76338: LD_VAR 0 4
76342: PLUS
76343: PPUSH
76344: CALL_OW 1
76348: ST_TO_ADDR
// end ;
76349: GO 76268
76351: POP
76352: POP
// end ;
76353: LD_VAR 0 2
76357: RET
// export function Length ( array ) ; begin
76358: LD_INT 0
76360: PPUSH
// result := array + 0 ;
76361: LD_ADDR_VAR 0 2
76365: PUSH
76366: LD_VAR 0 1
76370: PUSH
76371: LD_INT 0
76373: PLUS
76374: ST_TO_ADDR
// end ;
76375: LD_VAR 0 2
76379: RET
// export function PrepareArray ( array ) ; begin
76380: LD_INT 0
76382: PPUSH
// result := array diff 0 ;
76383: LD_ADDR_VAR 0 2
76387: PUSH
76388: LD_VAR 0 1
76392: PUSH
76393: LD_INT 0
76395: DIFF
76396: ST_TO_ADDR
// if not result [ 1 ] then
76397: LD_VAR 0 2
76401: PUSH
76402: LD_INT 1
76404: ARRAY
76405: NOT
76406: IFFALSE 76426
// result := Delete ( result , 1 ) ;
76408: LD_ADDR_VAR 0 2
76412: PUSH
76413: LD_VAR 0 2
76417: PPUSH
76418: LD_INT 1
76420: PPUSH
76421: CALL_OW 3
76425: ST_TO_ADDR
// end ;
76426: LD_VAR 0 2
76430: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
76431: LD_INT 0
76433: PPUSH
76434: PPUSH
76435: PPUSH
76436: PPUSH
// sibRocketRange := 25 ;
76437: LD_ADDR_VAR 0 6
76441: PUSH
76442: LD_INT 25
76444: ST_TO_ADDR
// result := false ;
76445: LD_ADDR_VAR 0 4
76449: PUSH
76450: LD_INT 0
76452: ST_TO_ADDR
// for i := 0 to 5 do
76453: LD_ADDR_VAR 0 5
76457: PUSH
76458: DOUBLE
76459: LD_INT 0
76461: DEC
76462: ST_TO_ADDR
76463: LD_INT 5
76465: PUSH
76466: FOR_TO
76467: IFFALSE 76534
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
76469: LD_VAR 0 1
76473: PPUSH
76474: LD_VAR 0 5
76478: PPUSH
76479: LD_VAR 0 6
76483: PPUSH
76484: CALL_OW 272
76488: PPUSH
76489: LD_VAR 0 2
76493: PPUSH
76494: LD_VAR 0 5
76498: PPUSH
76499: LD_VAR 0 6
76503: PPUSH
76504: CALL_OW 273
76508: PPUSH
76509: LD_VAR 0 3
76513: PPUSH
76514: CALL_OW 309
76518: IFFALSE 76532
// begin result := true ;
76520: LD_ADDR_VAR 0 4
76524: PUSH
76525: LD_INT 1
76527: ST_TO_ADDR
// exit ;
76528: POP
76529: POP
76530: GO 76536
// end ;
76532: GO 76466
76534: POP
76535: POP
// end ;
76536: LD_VAR 0 4
76540: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
76541: LD_INT 0
76543: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
76544: LD_VAR 0 1
76548: PPUSH
76549: LD_VAR 0 2
76553: PPUSH
76554: LD_INT 0
76556: PPUSH
76557: LD_INT 0
76559: PPUSH
76560: LD_INT 1
76562: PPUSH
76563: LD_INT 0
76565: PPUSH
76566: CALL_OW 587
// end ; end_of_file
76570: LD_VAR 0 3
76574: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
76575: LD_VAR 0 1
76579: PUSH
76580: LD_INT 200
76582: DOUBLE
76583: GREATEREQUAL
76584: IFFALSE 76592
76586: LD_INT 299
76588: DOUBLE
76589: LESSEQUAL
76590: IFTRUE 76594
76592: GO 76626
76594: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
76595: LD_VAR 0 1
76599: PPUSH
76600: LD_VAR 0 2
76604: PPUSH
76605: LD_VAR 0 3
76609: PPUSH
76610: LD_VAR 0 4
76614: PPUSH
76615: LD_VAR 0 5
76619: PPUSH
76620: CALL 31260 0 5
76624: GO 76703
76626: LD_INT 300
76628: DOUBLE
76629: GREATEREQUAL
76630: IFFALSE 76638
76632: LD_INT 399
76634: DOUBLE
76635: LESSEQUAL
76636: IFTRUE 76640
76638: GO 76702
76640: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
76641: LD_VAR 0 1
76645: PPUSH
76646: LD_VAR 0 2
76650: PPUSH
76651: LD_VAR 0 3
76655: PPUSH
76656: LD_VAR 0 4
76660: PPUSH
76661: LD_VAR 0 5
76665: PPUSH
76666: LD_VAR 0 6
76670: PPUSH
76671: LD_VAR 0 7
76675: PPUSH
76676: LD_VAR 0 8
76680: PPUSH
76681: LD_VAR 0 9
76685: PPUSH
76686: LD_VAR 0 10
76690: PPUSH
76691: LD_VAR 0 11
76695: PPUSH
76696: CALL 27593 0 11
76700: GO 76703
76702: POP
// end ;
76703: PPOPN 11
76705: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
76706: LD_VAR 0 1
76710: PPUSH
76711: LD_VAR 0 2
76715: PPUSH
76716: LD_VAR 0 3
76720: PPUSH
76721: LD_VAR 0 4
76725: PPUSH
76726: LD_VAR 0 5
76730: PPUSH
76731: CALL 30996 0 5
// end ; end_of_file
76735: PPOPN 5
76737: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
76738: LD_VAR 0 1
76742: PPUSH
76743: LD_VAR 0 2
76747: PPUSH
76748: LD_VAR 0 3
76752: PPUSH
76753: LD_VAR 0 4
76757: PPUSH
76758: LD_VAR 0 5
76762: PPUSH
76763: LD_VAR 0 6
76767: PPUSH
76768: CALL 15286 0 6
// end ;
76772: PPOPN 6
76774: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
76775: LD_INT 0
76777: PPUSH
// begin if not units then
76778: LD_VAR 0 1
76782: NOT
76783: IFFALSE 76787
// exit ;
76785: GO 76787
// end ;
76787: PPOPN 7
76789: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
76790: CALL 15257 0 0
// end ;
76794: PPOPN 1
76796: END
