// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitVariables ;
  11: CALL 130 0 0
// CreateNature ;
  15: CALL 9171 0 0
// PrepareAlliance ;
  19: CALL 344 0 0
// PrepareFriends ;
  23: CALL 3642 0 0
// PrepareAmerican ;
  27: CALL 781 0 0
// PlaceSeeing ( 91 , 70 , 7 , - 32178 ) ;
  31: LD_INT 91
  33: PPUSH
  34: LD_INT 70
  36: PPUSH
  37: LD_INT 7
  39: PPUSH
  40: LD_INT 32178
  42: NEG
  43: PPUSH
  44: CALL_OW 330
// RemoveSeeing ( 91 , 70 , 7 ) ;
  48: LD_INT 91
  50: PPUSH
  51: LD_INT 70
  53: PPUSH
  54: LD_INT 7
  56: PPUSH
  57: CALL_OW 331
// if debug then
  61: LD_EXP 1
  65: IFFALSE 113
// begin SetAttitude ( 1 , 7 , att_enemy , true ) ;
  67: LD_INT 1
  69: PPUSH
  70: LD_INT 7
  72: PPUSH
  73: LD_INT 2
  75: PPUSH
  76: LD_INT 1
  78: PPUSH
  79: CALL_OW 80
// RemoveUnit ( Powell ) ;
  83: LD_EXP 16
  87: PPUSH
  88: CALL_OW 64
// DoNotAttack ( 1 , JMM ) ;
  92: LD_INT 1
  94: PPUSH
  95: LD_EXP 14
  99: PPUSH
 100: CALL_OW 471
// FogOff ( 1 ) ;
 104: LD_INT 1
 106: PPUSH
 107: CALL_OW 344
// end else
 111: GO 117
// Action ;
 113: CALL 9507 0 0
// PreparePatrol ;
 117: CALL 1246 0 0
// game := true ;
 121: LD_ADDR_EXP 2
 125: PUSH
 126: LD_INT 1
 128: ST_TO_ADDR
// end ;
 129: END
// export debug , game , selected , friends , reached_lab , can_escape , on_hill , friends_kill_counter , team_kill_counter , gamma_commander , extra_patrol , invis_used , alert ; export function InitVariables ; begin
 130: LD_INT 0
 132: PPUSH
// debug := false ;
 133: LD_ADDR_EXP 1
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// friends := [ ] ;
 141: LD_ADDR_EXP 4
 145: PUSH
 146: EMPTY
 147: ST_TO_ADDR
// selected := [ ] ;
 148: LD_ADDR_EXP 3
 152: PUSH
 153: EMPTY
 154: ST_TO_ADDR
// reached_lab := false ;
 155: LD_ADDR_EXP 5
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// can_escape := false ;
 163: LD_ADDR_EXP 6
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// game := false ;
 171: LD_ADDR_EXP 2
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// gamma_commander := LoadVariable ( GammaCommander , 2 ) ;
 179: LD_ADDR_EXP 10
 183: PUSH
 184: LD_STRING GammaCommander
 186: PPUSH
 187: LD_INT 2
 189: PPUSH
 190: CALL_OW 30
 194: ST_TO_ADDR
// friends_kill_counter := 0 ;
 195: LD_ADDR_EXP 8
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// team_kill_counter := 0 ;
 203: LD_ADDR_EXP 9
 207: PUSH
 208: LD_INT 0
 210: ST_TO_ADDR
// extra_patrol := true ;
 211: LD_ADDR_EXP 11
 215: PUSH
 216: LD_INT 1
 218: ST_TO_ADDR
// on_hill := false ;
 219: LD_ADDR_EXP 7
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// invis_used := false ;
 227: LD_ADDR_EXP 12
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// alert := false ;
 235: LD_ADDR_EXP 13
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// end ;
 243: LD_VAR 0 1
 247: RET
// every 0 0$1 trigger on_hill do
 248: LD_EXP 7
 252: IFFALSE 264
 254: GO 256
 256: DISABLE
// SetAchievement ( ACH_EYE ) ;
 257: LD_STRING ACH_EYE
 259: PPUSH
 260: CALL_OW 543
 264: END
// every 0 0$1 trigger not invis_used do var i ;
 265: LD_EXP 12
 269: NOT
 270: IFFALSE 341
 272: GO 274
 274: DISABLE
 275: LD_INT 0
 277: PPUSH
// begin enable ;
 278: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do
 279: LD_ADDR_VAR 0 1
 283: PUSH
 284: LD_INT 22
 286: PUSH
 287: LD_INT 7
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PUSH
 294: LD_INT 21
 296: PUSH
 297: LD_INT 1
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: PUSH
 304: EMPTY
 305: LIST
 306: LIST
 307: PPUSH
 308: CALL_OW 69
 312: PUSH
 313: FOR_IN
 314: IFFALSE 339
// if IsInvisible ( i ) then
 316: LD_VAR 0 1
 320: PPUSH
 321: CALL_OW 571
 325: IFFALSE 337
// begin invis_used := true ;
 327: LD_ADDR_EXP 12
 331: PUSH
 332: LD_INT 1
 334: ST_TO_ADDR
// break ;
 335: GO 339
// end ;
 337: GO 313
 339: POP
 340: POP
// end ; end_of_file
 341: PPOPN 1
 343: END
// export JMM , Roth ; export function PrepareAlliance ; var cargo ; begin
 344: LD_INT 0
 346: PPUSH
 347: PPUSH
// uc_side := 7 ;
 348: LD_ADDR_OWVAR 20
 352: PUSH
 353: LD_INT 7
 355: ST_TO_ADDR
// uc_nation := 1 ;
 356: LD_ADDR_OWVAR 21
 360: PUSH
 361: LD_INT 1
 363: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 11_ ) ;
 364: LD_ADDR_EXP 14
 368: PUSH
 369: LD_STRING JMM
 371: PPUSH
 372: LD_EXP 1
 376: NOT
 377: PPUSH
 378: LD_STRING 11_
 380: PPUSH
 381: CALL 32316 0 3
 385: ST_TO_ADDR
// uc_side := 4 ;
 386: LD_ADDR_OWVAR 20
 390: PUSH
 391: LD_INT 4
 393: ST_TO_ADDR
// Roth := NewCharacter ( Roth ) ;
 394: LD_ADDR_EXP 15
 398: PUSH
 399: LD_STRING Roth
 401: PPUSH
 402: CALL_OW 25
 406: ST_TO_ADDR
// SetDir ( JMM , 1 ) ;
 407: LD_EXP 14
 411: PPUSH
 412: LD_INT 1
 414: PPUSH
 415: CALL_OW 233
// SetClass ( JMM , 1 ) ;
 419: LD_EXP 14
 423: PPUSH
 424: LD_INT 1
 426: PPUSH
 427: CALL_OW 336
// PlaceUnitXY ( JMM , 105 , 10 , false ) ;
 431: LD_EXP 14
 435: PPUSH
 436: LD_INT 105
 438: PPUSH
 439: LD_INT 10
 441: PPUSH
 442: LD_INT 0
 444: PPUSH
 445: CALL_OW 48
// SetDir ( Roth , 4 ) ;
 449: LD_EXP 15
 453: PPUSH
 454: LD_INT 4
 456: PPUSH
 457: CALL_OW 233
// PlaceUnitXY ( Roth , 109 , 10 , false ) ;
 461: LD_EXP 15
 465: PPUSH
 466: LD_INT 109
 468: PPUSH
 469: LD_INT 10
 471: PPUSH
 472: LD_INT 0
 474: PPUSH
 475: CALL_OW 48
// ComTurnUnit ( JMM , Roth ) ;
 479: LD_EXP 14
 483: PPUSH
 484: LD_EXP 15
 488: PPUSH
 489: CALL_OW 119
// ComTurnUnit ( Roth , JMM ) ;
 493: LD_EXP 15
 497: PPUSH
 498: LD_EXP 14
 502: PPUSH
 503: CALL_OW 119
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
 507: LD_INT 3
 509: PPUSH
 510: LD_INT 3
 512: PPUSH
 513: LD_INT 3
 515: PPUSH
 516: LD_INT 12
 518: PPUSH
 519: LD_INT 100
 521: PPUSH
 522: CALL 37140 0 5
// cargo := CreateVehicle ;
 526: LD_ADDR_VAR 0 2
 530: PUSH
 531: CALL_OW 45
 535: ST_TO_ADDR
// SetDir ( cargo , 1 ) ;
 536: LD_VAR 0 2
 540: PPUSH
 541: LD_INT 1
 543: PPUSH
 544: CALL_OW 233
// PlaceUnitXY ( cargo , 179 , 45 , false ) ;
 548: LD_VAR 0 2
 552: PPUSH
 553: LD_INT 179
 555: PPUSH
 556: LD_INT 45
 558: PPUSH
 559: LD_INT 0
 561: PPUSH
 562: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 30 ) ;
 566: LD_VAR 0 2
 570: PPUSH
 571: LD_INT 4
 573: PPUSH
 574: LD_INT 30
 576: PPUSH
 577: CALL_OW 290
// if LoadVariable ( 11_artifact_captured , 0 ) then
 581: LD_STRING 11_artifact_captured
 583: PPUSH
 584: LD_INT 0
 586: PPUSH
 587: CALL_OW 30
 591: IFFALSE 648
// begin cargo := CreateVehicle ;
 593: LD_ADDR_VAR 0 2
 597: PUSH
 598: CALL_OW 45
 602: ST_TO_ADDR
// SetDir ( cargo , 0 ) ;
 603: LD_VAR 0 2
 607: PPUSH
 608: LD_INT 0
 610: PPUSH
 611: CALL_OW 233
// PlaceUnitXY ( cargo , 171 , 85 , false ) ;
 615: LD_VAR 0 2
 619: PPUSH
 620: LD_INT 171
 622: PPUSH
 623: LD_INT 85
 625: PPUSH
 626: LD_INT 0
 628: PPUSH
 629: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 50 ) ;
 633: LD_VAR 0 2
 637: PPUSH
 638: LD_INT 4
 640: PPUSH
 641: LD_INT 50
 643: PPUSH
 644: CALL_OW 290
// end ; SetSide ( amlab , 7 ) ;
 648: LD_INT 47
 650: PPUSH
 651: LD_INT 7
 653: PPUSH
 654: CALL_OW 235
// DoNotAttack ( 1 , amlab ) ;
 658: LD_INT 1
 660: PPUSH
 661: LD_INT 47
 663: PPUSH
 664: CALL_OW 471
// end ;
 668: LD_VAR 0 1
 672: RET
// every 0 0$1 trigger FilterUnitsInArea ( hill , [ f_side , 7 ] ) and not on_hill do
 673: LD_INT 38
 675: PPUSH
 676: LD_INT 22
 678: PUSH
 679: LD_INT 7
 681: PUSH
 682: EMPTY
 683: LIST
 684: LIST
 685: PPUSH
 686: CALL_OW 70
 690: PUSH
 691: LD_EXP 7
 695: NOT
 696: AND
 697: IFFALSE 728
 699: GO 701
 701: DISABLE
// begin enable ;
 702: ENABLE
// on_hill := true ;
 703: LD_ADDR_EXP 7
 707: PUSH
 708: LD_INT 1
 710: ST_TO_ADDR
// PlaceSeeing ( 126 , 13 , 7 , - 90 ) ;
 711: LD_INT 126
 713: PPUSH
 714: LD_INT 13
 716: PPUSH
 717: LD_INT 7
 719: PPUSH
 720: LD_INT 90
 722: NEG
 723: PPUSH
 724: CALL_OW 330
// end ;
 728: END
// every 0 0$1 trigger not FilterUnitsInArea ( hill , [ f_side , 7 ] ) and on_hill do
 729: LD_INT 38
 731: PPUSH
 732: LD_INT 22
 734: PUSH
 735: LD_INT 7
 737: PUSH
 738: EMPTY
 739: LIST
 740: LIST
 741: PPUSH
 742: CALL_OW 70
 746: NOT
 747: PUSH
 748: LD_EXP 7
 752: AND
 753: IFFALSE 780
 755: GO 757
 757: DISABLE
// begin enable ;
 758: ENABLE
// on_hill := false ;
 759: LD_ADDR_EXP 7
 763: PUSH
 764: LD_INT 0
 766: ST_TO_ADDR
// RemoveSeeing ( 126 , 13 , 7 ) ;
 767: LD_INT 126
 769: PPUSH
 770: LD_INT 13
 772: PPUSH
 773: LD_INT 7
 775: PPUSH
 776: CALL_OW 331
// end ; end_of_file
 780: END
// export Powell , mobile_patrol , mobile_points , powell_guards , defenders , defcon , defcon_wave ; export function PrepareAmerican ; var i , j , b , un , tmp ; begin
 781: LD_INT 0
 783: PPUSH
 784: PPUSH
 785: PPUSH
 786: PPUSH
 787: PPUSH
 788: PPUSH
// if Difficulty = 1 then
 789: LD_OWVAR 67
 793: PUSH
 794: LD_INT 1
 796: EQUAL
 797: IFFALSE 905
// begin tmp := [ [ 155 , 77 ] , [ 193 , 93 ] , [ 188 , 81 ] , [ 56 , 85 ] , [ 98 , 87 ] ] ;
 799: LD_ADDR_VAR 0 6
 803: PUSH
 804: LD_INT 155
 806: PUSH
 807: LD_INT 77
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: PUSH
 814: LD_INT 193
 816: PUSH
 817: LD_INT 93
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PUSH
 824: LD_INT 188
 826: PUSH
 827: LD_INT 81
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: PUSH
 834: LD_INT 56
 836: PUSH
 837: LD_INT 85
 839: PUSH
 840: EMPTY
 841: LIST
 842: LIST
 843: PUSH
 844: LD_INT 98
 846: PUSH
 847: LD_INT 87
 849: PUSH
 850: EMPTY
 851: LIST
 852: LIST
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: ST_TO_ADDR
// for i in tmp do
 861: LD_ADDR_VAR 0 2
 865: PUSH
 866: LD_VAR 0 6
 870: PUSH
 871: FOR_IN
 872: IFFALSE 903
// RemoveUnit ( HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
 874: LD_VAR 0 2
 878: PUSH
 879: LD_INT 1
 881: ARRAY
 882: PPUSH
 883: LD_VAR 0 2
 887: PUSH
 888: LD_INT 2
 890: ARRAY
 891: PPUSH
 892: CALL_OW 428
 896: PPUSH
 897: CALL_OW 64
 901: GO 871
 903: POP
 904: POP
// end ; defcon := 0 ;
 905: LD_ADDR_EXP 21
 909: PUSH
 910: LD_INT 0
 912: ST_TO_ADDR
// defcon_wave := 0 ;
 913: LD_ADDR_EXP 22
 917: PUSH
 918: LD_INT 0
 920: ST_TO_ADDR
// defenders := [ ] ;
 921: LD_ADDR_EXP 20
 925: PUSH
 926: EMPTY
 927: ST_TO_ADDR
// SetBName ( alfa , alpha ) ;
 928: LD_INT 5
 930: PPUSH
 931: LD_STRING alpha
 933: PPUSH
 934: CALL_OW 500
// uc_side := 1 ;
 938: LD_ADDR_OWVAR 20
 942: PUSH
 943: LD_INT 1
 945: ST_TO_ADDR
// uc_nation := 1 ;
 946: LD_ADDR_OWVAR 21
 950: PUSH
 951: LD_INT 1
 953: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
 954: LD_ADDR_EXP 16
 958: PUSH
 959: LD_STRING Powell
 961: PPUSH
 962: CALL_OW 25
 966: ST_TO_ADDR
// PlaceUnitXY ( Powell , 110 , 26 , false ) ;
 967: LD_EXP 16
 971: PPUSH
 972: LD_INT 110
 974: PPUSH
 975: LD_INT 26
 977: PPUSH
 978: LD_INT 0
 980: PPUSH
 981: CALL_OW 48
// ComHold ( Powell ) ;
 985: LD_EXP 16
 989: PPUSH
 990: CALL_OW 140
// for i = 1 to 5 do
 994: LD_ADDR_VAR 0 2
 998: PUSH
 999: DOUBLE
1000: LD_INT 1
1002: DEC
1003: ST_TO_ADDR
1004: LD_INT 5
1006: PUSH
1007: FOR_TO
1008: IFFALSE 1064
// begin PrepareHuman ( false , 1 , 10 ) ;
1010: LD_INT 0
1012: PPUSH
1013: LD_INT 1
1015: PPUSH
1016: LD_INT 10
1018: PPUSH
1019: CALL_OW 380
// powell_guards := Insert ( powell_guards , 1 , CreateHuman ) ;
1023: LD_ADDR_EXP 19
1027: PUSH
1028: LD_EXP 19
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: CALL_OW 44
1040: PPUSH
1041: CALL_OW 2
1045: ST_TO_ADDR
// PlaceHumanInUnit ( powell_guards [ 1 ] , ambar0 ) ;
1046: LD_EXP 19
1050: PUSH
1051: LD_INT 1
1053: ARRAY
1054: PPUSH
1055: LD_INT 18
1057: PPUSH
1058: CALL_OW 52
// end ;
1062: GO 1007
1064: POP
1065: POP
// if Difficulty > 2 then
1066: LD_OWVAR 67
1070: PUSH
1071: LD_INT 2
1073: GREATER
1074: IFFALSE 1123
// begin bc_type := b_turret ;
1076: LD_ADDR_OWVAR 42
1080: PUSH
1081: LD_INT 33
1083: ST_TO_ADDR
// bc_level := 7 ;
1084: LD_ADDR_OWVAR 43
1088: PUSH
1089: LD_INT 7
1091: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 107 , 55 , 5 ) ;
1092: LD_ADDR_VAR 0 4
1096: PUSH
1097: LD_INT 107
1099: PPUSH
1100: LD_INT 55
1102: PPUSH
1103: LD_INT 5
1105: PPUSH
1106: CALL_OW 47
1110: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_rocket_launcher ) ;
1111: LD_VAR 0 4
1115: PPUSH
1116: LD_INT 7
1118: PPUSH
1119: CALL_OW 431
// end ; for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ^ FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) do
1123: LD_ADDR_VAR 0 2
1127: PUSH
1128: LD_INT 22
1130: PUSH
1131: LD_INT 1
1133: PUSH
1134: EMPTY
1135: LIST
1136: LIST
1137: PUSH
1138: LD_INT 30
1140: PUSH
1141: LD_INT 3
1143: PUSH
1144: EMPTY
1145: LIST
1146: LIST
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: PPUSH
1152: CALL_OW 69
1156: PUSH
1157: LD_INT 22
1159: PUSH
1160: LD_INT 1
1162: PUSH
1163: EMPTY
1164: LIST
1165: LIST
1166: PUSH
1167: LD_INT 30
1169: PUSH
1170: LD_INT 36
1172: PUSH
1173: EMPTY
1174: LIST
1175: LIST
1176: PUSH
1177: EMPTY
1178: LIST
1179: LIST
1180: PPUSH
1181: CALL_OW 69
1185: ADD
1186: PUSH
1187: FOR_IN
1188: IFFALSE 1239
// for j = 1 to 3 do
1190: LD_ADDR_VAR 0 3
1194: PUSH
1195: DOUBLE
1196: LD_INT 1
1198: DEC
1199: ST_TO_ADDR
1200: LD_INT 3
1202: PUSH
1203: FOR_TO
1204: IFFALSE 1235
// begin PrepareHuman ( false , 3 , 6 ) ;
1206: LD_INT 0
1208: PPUSH
1209: LD_INT 3
1211: PPUSH
1212: LD_INT 6
1214: PPUSH
1215: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
1219: CALL_OW 44
1223: PPUSH
1224: LD_VAR 0 2
1228: PPUSH
1229: CALL_OW 52
// end ;
1233: GO 1203
1235: POP
1236: POP
1237: GO 1187
1239: POP
1240: POP
// end ;
1241: LD_VAR 0 1
1245: RET
// export function PreparePatrol ; var i , un ; begin
1246: LD_INT 0
1248: PPUSH
1249: PPUSH
1250: PPUSH
// uc_side := 1 ;
1251: LD_ADDR_OWVAR 20
1255: PUSH
1256: LD_INT 1
1258: ST_TO_ADDR
// uc_nation := 1 ;
1259: LD_ADDR_OWVAR 21
1263: PUSH
1264: LD_INT 1
1266: ST_TO_ADDR
// mobile_points := [ [ [ 99 , 55 ] , [ 113 , 67 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 103 , 41 ] ] , [ [ 27 , 49 ] , [ 46 , 49 ] , [ 87 , 70 ] , [ 99 , 79 ] , [ 118 , 111 ] , [ 99 , 79 ] , [ 87 , 70 ] , [ 46 , 49 ] ] , [ [ 200 , 88 ] , [ 175 , 80 ] , [ 135 , 62 ] , [ 117 , 53 ] , [ 103 , 41 ] , [ 99 , 24 ] , [ 85 , 3 ] , [ 99 , 24 ] , [ 103 , 41 ] , [ 98 , 47 ] , [ 99 , 56 ] , [ 96 , 66 ] , [ 99 , 56 ] , [ 112 , 66 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 156 , 71 ] , [ 168 , 76 ] , [ 168 , 61 ] , [ 168 , 75 ] , [ 185 , 85 ] ] ] ;
1267: LD_ADDR_EXP 18
1271: PUSH
1272: LD_INT 99
1274: PUSH
1275: LD_INT 55
1277: PUSH
1278: EMPTY
1279: LIST
1280: LIST
1281: PUSH
1282: LD_INT 113
1284: PUSH
1285: LD_INT 67
1287: PUSH
1288: EMPTY
1289: LIST
1290: LIST
1291: PUSH
1292: LD_INT 129
1294: PUSH
1295: LD_INT 68
1297: PUSH
1298: EMPTY
1299: LIST
1300: LIST
1301: PUSH
1302: LD_INT 135
1304: PUSH
1305: LD_INT 62
1307: PUSH
1308: EMPTY
1309: LIST
1310: LIST
1311: PUSH
1312: LD_INT 103
1314: PUSH
1315: LD_INT 41
1317: PUSH
1318: EMPTY
1319: LIST
1320: LIST
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: PUSH
1329: LD_INT 27
1331: PUSH
1332: LD_INT 49
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: PUSH
1339: LD_INT 46
1341: PUSH
1342: LD_INT 49
1344: PUSH
1345: EMPTY
1346: LIST
1347: LIST
1348: PUSH
1349: LD_INT 87
1351: PUSH
1352: LD_INT 70
1354: PUSH
1355: EMPTY
1356: LIST
1357: LIST
1358: PUSH
1359: LD_INT 99
1361: PUSH
1362: LD_INT 79
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: PUSH
1369: LD_INT 118
1371: PUSH
1372: LD_INT 111
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: LD_INT 99
1381: PUSH
1382: LD_INT 79
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: PUSH
1389: LD_INT 87
1391: PUSH
1392: LD_INT 70
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: PUSH
1399: LD_INT 46
1401: PUSH
1402: LD_INT 49
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: PUSH
1419: LD_INT 200
1421: PUSH
1422: LD_INT 88
1424: PUSH
1425: EMPTY
1426: LIST
1427: LIST
1428: PUSH
1429: LD_INT 175
1431: PUSH
1432: LD_INT 80
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: PUSH
1439: LD_INT 135
1441: PUSH
1442: LD_INT 62
1444: PUSH
1445: EMPTY
1446: LIST
1447: LIST
1448: PUSH
1449: LD_INT 117
1451: PUSH
1452: LD_INT 53
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: PUSH
1459: LD_INT 103
1461: PUSH
1462: LD_INT 41
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: PUSH
1469: LD_INT 99
1471: PUSH
1472: LD_INT 24
1474: PUSH
1475: EMPTY
1476: LIST
1477: LIST
1478: PUSH
1479: LD_INT 85
1481: PUSH
1482: LD_INT 3
1484: PUSH
1485: EMPTY
1486: LIST
1487: LIST
1488: PUSH
1489: LD_INT 99
1491: PUSH
1492: LD_INT 24
1494: PUSH
1495: EMPTY
1496: LIST
1497: LIST
1498: PUSH
1499: LD_INT 103
1501: PUSH
1502: LD_INT 41
1504: PUSH
1505: EMPTY
1506: LIST
1507: LIST
1508: PUSH
1509: LD_INT 98
1511: PUSH
1512: LD_INT 47
1514: PUSH
1515: EMPTY
1516: LIST
1517: LIST
1518: PUSH
1519: LD_INT 99
1521: PUSH
1522: LD_INT 56
1524: PUSH
1525: EMPTY
1526: LIST
1527: LIST
1528: PUSH
1529: LD_INT 96
1531: PUSH
1532: LD_INT 66
1534: PUSH
1535: EMPTY
1536: LIST
1537: LIST
1538: PUSH
1539: LD_INT 99
1541: PUSH
1542: LD_INT 56
1544: PUSH
1545: EMPTY
1546: LIST
1547: LIST
1548: PUSH
1549: LD_INT 112
1551: PUSH
1552: LD_INT 66
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: PUSH
1559: LD_INT 129
1561: PUSH
1562: LD_INT 68
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: PUSH
1569: LD_INT 135
1571: PUSH
1572: LD_INT 62
1574: PUSH
1575: EMPTY
1576: LIST
1577: LIST
1578: PUSH
1579: LD_INT 156
1581: PUSH
1582: LD_INT 71
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PUSH
1589: LD_INT 168
1591: PUSH
1592: LD_INT 76
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: PUSH
1599: LD_INT 168
1601: PUSH
1602: LD_INT 61
1604: PUSH
1605: EMPTY
1606: LIST
1607: LIST
1608: PUSH
1609: LD_INT 168
1611: PUSH
1612: LD_INT 75
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: PUSH
1619: LD_INT 185
1621: PUSH
1622: LD_INT 85
1624: PUSH
1625: EMPTY
1626: LIST
1627: LIST
1628: PUSH
1629: EMPTY
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: LIST
1645: LIST
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: LIST
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: LIST
1656: ST_TO_ADDR
// mobile_patrol := [ ] ;
1657: LD_ADDR_EXP 17
1661: PUSH
1662: EMPTY
1663: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1664: LD_INT 3
1666: PPUSH
1667: LD_INT 1
1669: PPUSH
1670: LD_INT 3
1672: PPUSH
1673: LD_INT 4
1675: PPUSH
1676: LD_INT 100
1678: PPUSH
1679: CALL 37140 0 5
// mobile_patrol := Insert ( mobile_patrol , 1 , CreateVehicle ) ;
1683: LD_ADDR_EXP 17
1687: PUSH
1688: LD_EXP 17
1692: PPUSH
1693: LD_INT 1
1695: PPUSH
1696: CALL_OW 45
1700: PPUSH
1701: CALL_OW 2
1705: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 1 ] , 99 , 55 , false ) ;
1706: LD_EXP 17
1710: PUSH
1711: LD_INT 1
1713: ARRAY
1714: PPUSH
1715: LD_INT 99
1717: PPUSH
1718: LD_INT 55
1720: PPUSH
1721: LD_INT 0
1723: PPUSH
1724: CALL_OW 48
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1728: LD_INT 2
1730: PPUSH
1731: LD_INT 1
1733: PPUSH
1734: LD_INT 3
1736: PPUSH
1737: LD_INT 4
1739: PPUSH
1740: LD_INT 100
1742: PPUSH
1743: CALL 37140 0 5
// mobile_patrol := Insert ( mobile_patrol , 2 , CreateVehicle ) ;
1747: LD_ADDR_EXP 17
1751: PUSH
1752: LD_EXP 17
1756: PPUSH
1757: LD_INT 2
1759: PPUSH
1760: CALL_OW 45
1764: PPUSH
1765: CALL_OW 2
1769: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 2 ] , 27 , 49 , false ) ;
1770: LD_EXP 17
1774: PUSH
1775: LD_INT 2
1777: ARRAY
1778: PPUSH
1779: LD_INT 27
1781: PPUSH
1782: LD_INT 49
1784: PPUSH
1785: LD_INT 0
1787: PPUSH
1788: CALL_OW 48
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , [ us_laser , us_rocket_launcher , us_rocket_launcher ] [ Difficulty ] , 100 ) ;
1792: LD_INT 3
1794: PPUSH
1795: LD_INT 1
1797: PPUSH
1798: LD_INT 3
1800: PPUSH
1801: LD_INT 9
1803: PUSH
1804: LD_INT 7
1806: PUSH
1807: LD_INT 7
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: LIST
1814: PUSH
1815: LD_OWVAR 67
1819: ARRAY
1820: PPUSH
1821: LD_INT 100
1823: PPUSH
1824: CALL 37140 0 5
// mobile_patrol := Insert ( mobile_patrol , 3 , CreateVehicle ) ;
1828: LD_ADDR_EXP 17
1832: PUSH
1833: LD_EXP 17
1837: PPUSH
1838: LD_INT 3
1840: PPUSH
1841: CALL_OW 45
1845: PPUSH
1846: CALL_OW 2
1850: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 3 ] , 200 , 88 , false ) ;
1851: LD_EXP 17
1855: PUSH
1856: LD_INT 3
1858: ARRAY
1859: PPUSH
1860: LD_INT 200
1862: PPUSH
1863: LD_INT 88
1865: PPUSH
1866: LD_INT 0
1868: PPUSH
1869: CALL_OW 48
// for i = mobile_patrol downto 1 do
1873: LD_ADDR_VAR 0 2
1877: PUSH
1878: DOUBLE
1879: LD_EXP 17
1883: INC
1884: ST_TO_ADDR
1885: LD_INT 1
1887: PUSH
1888: FOR_DOWNTO
1889: IFFALSE 1900
// RaiseSailEvent ( 1 ) ;
1891: LD_INT 1
1893: PPUSH
1894: CALL_OW 427
1898: GO 1888
1900: POP
1901: POP
// end ;
1902: LD_VAR 0 1
1906: RET
// export function SpawnCargo ( ) ; var i , c , k , areas , road , tmp , veh ; begin
1907: LD_INT 0
1909: PPUSH
1910: PPUSH
1911: PPUSH
1912: PPUSH
1913: PPUSH
1914: PPUSH
1915: PPUSH
1916: PPUSH
// areas := [ [ road_east , 4 ] , [ road_south , 5 ] , [ road_west , 1 ] ] ;
1917: LD_ADDR_VAR 0 5
1921: PUSH
1922: LD_INT 20
1924: PUSH
1925: LD_INT 4
1927: PUSH
1928: EMPTY
1929: LIST
1930: LIST
1931: PUSH
1932: LD_INT 21
1934: PUSH
1935: LD_INT 5
1937: PUSH
1938: EMPTY
1939: LIST
1940: LIST
1941: PUSH
1942: LD_INT 22
1944: PUSH
1945: LD_INT 1
1947: PUSH
1948: EMPTY
1949: LIST
1950: LIST
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: LIST
1956: ST_TO_ADDR
// road := [ [ 176 , 81 , 135 , 62 , 114 , 67 , 93 , 71 , 76 , 67 ] , [ 107 , 92 , 92 , 72 , 77 , 68 ] , [ 45 , 49 , 67 , 59 , 77 , 68 ] ] ;
1957: LD_ADDR_VAR 0 6
1961: PUSH
1962: LD_INT 176
1964: PUSH
1965: LD_INT 81
1967: PUSH
1968: LD_INT 135
1970: PUSH
1971: LD_INT 62
1973: PUSH
1974: LD_INT 114
1976: PUSH
1977: LD_INT 67
1979: PUSH
1980: LD_INT 93
1982: PUSH
1983: LD_INT 71
1985: PUSH
1986: LD_INT 76
1988: PUSH
1989: LD_INT 67
1991: PUSH
1992: EMPTY
1993: LIST
1994: LIST
1995: LIST
1996: LIST
1997: LIST
1998: LIST
1999: LIST
2000: LIST
2001: LIST
2002: LIST
2003: PUSH
2004: LD_INT 107
2006: PUSH
2007: LD_INT 92
2009: PUSH
2010: LD_INT 92
2012: PUSH
2013: LD_INT 72
2015: PUSH
2016: LD_INT 77
2018: PUSH
2019: LD_INT 68
2021: PUSH
2022: EMPTY
2023: LIST
2024: LIST
2025: LIST
2026: LIST
2027: LIST
2028: LIST
2029: PUSH
2030: LD_INT 45
2032: PUSH
2033: LD_INT 49
2035: PUSH
2036: LD_INT 67
2038: PUSH
2039: LD_INT 59
2041: PUSH
2042: LD_INT 77
2044: PUSH
2045: LD_INT 68
2047: PUSH
2048: EMPTY
2049: LIST
2050: LIST
2051: LIST
2052: LIST
2053: LIST
2054: LIST
2055: PUSH
2056: EMPTY
2057: LIST
2058: LIST
2059: LIST
2060: ST_TO_ADDR
// k := rand ( 1 , areas ) ;
2061: LD_ADDR_VAR 0 4
2065: PUSH
2066: LD_INT 1
2068: PPUSH
2069: LD_VAR 0 5
2073: PPUSH
2074: CALL_OW 12
2078: ST_TO_ADDR
// c := rand ( 1 , 2 ) ;
2079: LD_ADDR_VAR 0 3
2083: PUSH
2084: LD_INT 1
2086: PPUSH
2087: LD_INT 2
2089: PPUSH
2090: CALL_OW 12
2094: ST_TO_ADDR
// uc_side := 1 ;
2095: LD_ADDR_OWVAR 20
2099: PUSH
2100: LD_INT 1
2102: ST_TO_ADDR
// uc_nation := 1 ;
2103: LD_ADDR_OWVAR 21
2107: PUSH
2108: LD_INT 1
2110: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
2111: LD_INT 2
2113: PPUSH
2114: LD_INT 3
2116: PPUSH
2117: LD_INT 3
2119: PPUSH
2120: LD_INT 12
2122: PPUSH
2123: LD_INT 100
2125: PPUSH
2126: CALL 37140 0 5
// veh := CreateVehicle ;
2130: LD_ADDR_VAR 0 8
2134: PUSH
2135: CALL_OW 45
2139: ST_TO_ADDR
// SetDir ( veh , areas [ k ] [ 2 ] ) ;
2140: LD_VAR 0 8
2144: PPUSH
2145: LD_VAR 0 5
2149: PUSH
2150: LD_VAR 0 4
2154: ARRAY
2155: PUSH
2156: LD_INT 2
2158: ARRAY
2159: PPUSH
2160: CALL_OW 233
// PlaceUnitArea ( veh , areas [ k ] [ 1 ] , false ) ;
2164: LD_VAR 0 8
2168: PPUSH
2169: LD_VAR 0 5
2173: PUSH
2174: LD_VAR 0 4
2178: ARRAY
2179: PUSH
2180: LD_INT 1
2182: ARRAY
2183: PPUSH
2184: LD_INT 0
2186: PPUSH
2187: CALL_OW 49
// SetCargo ( veh , [ mat_cans , mat_siberit ] [ c ] , 100 ) ;
2191: LD_VAR 0 8
2195: PPUSH
2196: LD_INT 1
2198: PUSH
2199: LD_INT 3
2201: PUSH
2202: EMPTY
2203: LIST
2204: LIST
2205: PUSH
2206: LD_VAR 0 3
2210: ARRAY
2211: PPUSH
2212: LD_INT 100
2214: PPUSH
2215: CALL_OW 290
// tmp := road [ k ] ;
2219: LD_ADDR_VAR 0 7
2223: PUSH
2224: LD_VAR 0 6
2228: PUSH
2229: LD_VAR 0 4
2233: ARRAY
2234: ST_TO_ADDR
// for i = 1 to tmp div 2 do
2235: LD_ADDR_VAR 0 2
2239: PUSH
2240: DOUBLE
2241: LD_INT 1
2243: DEC
2244: ST_TO_ADDR
2245: LD_VAR 0 7
2249: PUSH
2250: LD_INT 2
2252: DIV
2253: PUSH
2254: FOR_TO
2255: IFFALSE 2302
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2257: LD_VAR 0 8
2261: PPUSH
2262: LD_VAR 0 7
2266: PUSH
2267: LD_VAR 0 2
2271: PUSH
2272: LD_INT 2
2274: MUL
2275: PUSH
2276: LD_INT 1
2278: MINUS
2279: ARRAY
2280: PPUSH
2281: LD_VAR 0 7
2285: PUSH
2286: LD_VAR 0 2
2290: PUSH
2291: LD_INT 2
2293: MUL
2294: ARRAY
2295: PPUSH
2296: CALL_OW 171
2300: GO 2254
2302: POP
2303: POP
// AddComGive ( veh , alfa ) ;
2304: LD_VAR 0 8
2308: PPUSH
2309: LD_INT 5
2311: PPUSH
2312: CALL_OW 221
// AddComWait ( veh , 0 0$2 ) ;
2316: LD_VAR 0 8
2320: PPUSH
2321: LD_INT 70
2323: PPUSH
2324: CALL_OW 202
// for i = tmp div 2 downto 1 do
2328: LD_ADDR_VAR 0 2
2332: PUSH
2333: DOUBLE
2334: LD_VAR 0 7
2338: PUSH
2339: LD_INT 2
2341: DIV
2342: INC
2343: ST_TO_ADDR
2344: LD_INT 1
2346: PUSH
2347: FOR_DOWNTO
2348: IFFALSE 2395
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2350: LD_VAR 0 8
2354: PPUSH
2355: LD_VAR 0 7
2359: PUSH
2360: LD_VAR 0 2
2364: PUSH
2365: LD_INT 2
2367: MUL
2368: PUSH
2369: LD_INT 1
2371: MINUS
2372: ARRAY
2373: PPUSH
2374: LD_VAR 0 7
2378: PUSH
2379: LD_VAR 0 2
2383: PUSH
2384: LD_INT 2
2386: MUL
2387: ARRAY
2388: PPUSH
2389: CALL_OW 171
2393: GO 2347
2395: POP
2396: POP
// AddComMoveToArea ( veh , areas [ k ] [ 1 ] ) ;
2397: LD_VAR 0 8
2401: PPUSH
2402: LD_VAR 0 5
2406: PUSH
2407: LD_VAR 0 4
2411: ARRAY
2412: PUSH
2413: LD_INT 1
2415: ARRAY
2416: PPUSH
2417: CALL_OW 173
// repeat wait ( 0 0$1 ) ;
2421: LD_INT 35
2423: PPUSH
2424: CALL_OW 67
// until IsInArea ( veh , areas [ k ] [ 1 ] ) and GetCargo ( veh , c ) = 0 ;
2428: LD_VAR 0 8
2432: PPUSH
2433: LD_VAR 0 5
2437: PUSH
2438: LD_VAR 0 4
2442: ARRAY
2443: PUSH
2444: LD_INT 1
2446: ARRAY
2447: PPUSH
2448: CALL_OW 308
2452: PUSH
2453: LD_VAR 0 8
2457: PPUSH
2458: LD_VAR 0 3
2462: PPUSH
2463: CALL_OW 289
2467: PUSH
2468: LD_INT 0
2470: EQUAL
2471: AND
2472: IFFALSE 2421
// RemoveUnit ( veh ) ;
2474: LD_VAR 0 8
2478: PPUSH
2479: CALL_OW 64
// end ;
2483: LD_VAR 0 1
2487: RET
// every 3 3$00 do
2488: GO 2490
2490: DISABLE
// begin enable ;
2491: ENABLE
// SpawnCargo ;
2492: CALL 1907 0 0
// end ;
2496: END
// export function PrepareDefenders ; var i , tmp ; begin
2497: LD_INT 0
2499: PPUSH
2500: PPUSH
2501: PPUSH
// if defenders then
2502: LD_EXP 20
2506: IFFALSE 2510
// exit ;
2508: GO 2774
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
2510: LD_ADDR_VAR 0 2
2514: PUSH
2515: DOUBLE
2516: LD_INT 1
2518: DEC
2519: ST_TO_ADDR
2520: LD_INT 4
2522: PUSH
2523: LD_INT 5
2525: PUSH
2526: LD_INT 6
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: LIST
2533: PUSH
2534: LD_OWVAR 67
2538: ARRAY
2539: PUSH
2540: FOR_TO
2541: IFFALSE 2680
// begin tmp := Produce ( amfac2 , [ us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_remote , [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ) ;
2543: LD_ADDR_VAR 0 3
2547: PUSH
2548: LD_INT 6
2550: PPUSH
2551: LD_INT 2
2553: PUSH
2554: LD_INT 3
2556: PUSH
2557: EMPTY
2558: LIST
2559: LIST
2560: PUSH
2561: LD_INT 1
2563: PPUSH
2564: LD_INT 2
2566: PPUSH
2567: CALL_OW 12
2571: ARRAY
2572: PPUSH
2573: LD_INT 1
2575: PUSH
2576: LD_INT 3
2578: PUSH
2579: EMPTY
2580: LIST
2581: LIST
2582: PUSH
2583: LD_INT 1
2585: PPUSH
2586: LD_INT 2
2588: PPUSH
2589: CALL_OW 12
2593: ARRAY
2594: PPUSH
2595: LD_INT 2
2597: PPUSH
2598: LD_INT 4
2600: PUSH
2601: LD_INT 5
2603: PUSH
2604: LD_INT 9
2606: PUSH
2607: EMPTY
2608: LIST
2609: LIST
2610: LIST
2611: PUSH
2612: LD_INT 1
2614: PPUSH
2615: LD_INT 3
2617: PPUSH
2618: CALL_OW 12
2622: ARRAY
2623: PPUSH
2624: CALL 34794 0 5
2628: ST_TO_ADDR
// if tmp then
2629: LD_VAR 0 3
2633: IFFALSE 2678
// AddComConstruct ( amfac2 , tmp [ 1 ] , tmp [ 2 ] , tmp [ 3 ] , tmp [ 4 ] ) ;
2635: LD_INT 6
2637: PPUSH
2638: LD_VAR 0 3
2642: PUSH
2643: LD_INT 1
2645: ARRAY
2646: PPUSH
2647: LD_VAR 0 3
2651: PUSH
2652: LD_INT 2
2654: ARRAY
2655: PPUSH
2656: LD_VAR 0 3
2660: PUSH
2661: LD_INT 3
2663: ARRAY
2664: PPUSH
2665: LD_VAR 0 3
2669: PUSH
2670: LD_INT 4
2672: ARRAY
2673: PPUSH
2674: CALL_OW 185
// end ;
2678: GO 2540
2680: POP
2681: POP
// repeat wait ( 0 0$1 ) ;
2682: LD_INT 35
2684: PPUSH
2685: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= [ 4 , 5 , 6 ] [ Difficulty ] ;
2689: LD_INT 22
2691: PUSH
2692: LD_INT 1
2694: PUSH
2695: EMPTY
2696: LIST
2697: LIST
2698: PUSH
2699: LD_INT 33
2701: PUSH
2702: LD_INT 2
2704: PUSH
2705: EMPTY
2706: LIST
2707: LIST
2708: PUSH
2709: EMPTY
2710: LIST
2711: LIST
2712: PPUSH
2713: CALL_OW 69
2717: PUSH
2718: LD_INT 4
2720: PUSH
2721: LD_INT 5
2723: PUSH
2724: LD_INT 6
2726: PUSH
2727: EMPTY
2728: LIST
2729: LIST
2730: LIST
2731: PUSH
2732: LD_OWVAR 67
2736: ARRAY
2737: GREATEREQUAL
2738: IFFALSE 2682
// defenders := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ;
2740: LD_ADDR_EXP 20
2744: PUSH
2745: LD_INT 22
2747: PUSH
2748: LD_INT 1
2750: PUSH
2751: EMPTY
2752: LIST
2753: LIST
2754: PUSH
2755: LD_INT 33
2757: PUSH
2758: LD_INT 2
2760: PUSH
2761: EMPTY
2762: LIST
2763: LIST
2764: PUSH
2765: EMPTY
2766: LIST
2767: LIST
2768: PPUSH
2769: CALL_OW 69
2773: ST_TO_ADDR
// end ;
2774: LD_VAR 0 1
2778: RET
// export function Defend ; var i , un , veh , tmp ; begin
2779: LD_INT 0
2781: PPUSH
2782: PPUSH
2783: PPUSH
2784: PPUSH
2785: PPUSH
// defcon_wave := defcon_wave + 1 ;
2786: LD_ADDR_EXP 22
2790: PUSH
2791: LD_EXP 22
2795: PUSH
2796: LD_INT 1
2798: PLUS
2799: ST_TO_ADDR
// if not defenders then
2800: LD_EXP 20
2804: NOT
2805: IFFALSE 2811
// PrepareDefenders ;
2807: CALL 2497 0 0
// if defcon_wave > 1 then
2811: LD_EXP 22
2815: PUSH
2816: LD_INT 1
2818: GREATER
2819: IFFALSE 3077
// begin for i = 1 to defcon_wave + 2 do
2821: LD_ADDR_VAR 0 2
2825: PUSH
2826: DOUBLE
2827: LD_INT 1
2829: DEC
2830: ST_TO_ADDR
2831: LD_EXP 22
2835: PUSH
2836: LD_INT 2
2838: PLUS
2839: PUSH
2840: FOR_TO
2841: IFFALSE 2983
// begin uc_side := 1 ;
2843: LD_ADDR_OWVAR 20
2847: PUSH
2848: LD_INT 1
2850: ST_TO_ADDR
// uc_nation := 1 ;
2851: LD_ADDR_OWVAR 21
2855: PUSH
2856: LD_INT 1
2858: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_siberite , control_manual , [ us_gatling_gun , us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
2859: LD_INT 4
2861: PPUSH
2862: LD_INT 3
2864: PPUSH
2865: LD_INT 1
2867: PPUSH
2868: LD_INT 4
2870: PUSH
2871: LD_INT 6
2873: PUSH
2874: LD_INT 7
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: LIST
2881: PUSH
2882: LD_INT 1
2884: PPUSH
2885: LD_INT 3
2887: PPUSH
2888: CALL_OW 12
2892: ARRAY
2893: PPUSH
2894: LD_INT 100
2896: PPUSH
2897: CALL 37140 0 5
// veh := CreateVehicle ;
2901: LD_ADDR_VAR 0 4
2905: PUSH
2906: CALL_OW 45
2910: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2911: LD_VAR 0 4
2915: PPUSH
2916: LD_INT 1
2918: PPUSH
2919: CALL_OW 233
// defenders := defenders ^ veh ;
2923: LD_ADDR_EXP 20
2927: PUSH
2928: LD_EXP 20
2932: PUSH
2933: LD_VAR 0 4
2937: ADD
2938: ST_TO_ADDR
// PrepareHuman ( false , 3 , 9 ) ;
2939: LD_INT 0
2941: PPUSH
2942: LD_INT 3
2944: PPUSH
2945: LD_INT 9
2947: PPUSH
2948: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2952: CALL_OW 44
2956: PPUSH
2957: LD_VAR 0 4
2961: PPUSH
2962: CALL_OW 52
// PlaceUnitArea ( veh , west_spawn , false ) ;
2966: LD_VAR 0 4
2970: PPUSH
2971: LD_INT 25
2973: PPUSH
2974: LD_INT 0
2976: PPUSH
2977: CALL_OW 49
// end ;
2981: GO 2840
2983: POP
2984: POP
// for i = 1 to defcon_wave do
2985: LD_ADDR_VAR 0 2
2989: PUSH
2990: DOUBLE
2991: LD_INT 1
2993: DEC
2994: ST_TO_ADDR
2995: LD_EXP 22
2999: PUSH
3000: FOR_TO
3001: IFFALSE 3075
// begin uc_side := 1 ;
3003: LD_ADDR_OWVAR 20
3007: PUSH
3008: LD_INT 1
3010: ST_TO_ADDR
// uc_nation := 1 ;
3011: LD_ADDR_OWVAR 21
3015: PUSH
3016: LD_INT 1
3018: ST_TO_ADDR
// PrepareHuman ( false , 5 , 9 ) ;
3019: LD_INT 0
3021: PPUSH
3022: LD_INT 5
3024: PPUSH
3025: LD_INT 9
3027: PPUSH
3028: CALL_OW 380
// un := CreateHuman ;
3032: LD_ADDR_VAR 0 3
3036: PUSH
3037: CALL_OW 44
3041: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
3042: LD_VAR 0 3
3046: PPUSH
3047: LD_INT 25
3049: PPUSH
3050: LD_INT 0
3052: PPUSH
3053: CALL_OW 49
// defenders := defenders ^ un ;
3057: LD_ADDR_EXP 20
3061: PUSH
3062: LD_EXP 20
3066: PUSH
3067: LD_VAR 0 3
3071: ADD
3072: ST_TO_ADDR
// end ;
3073: GO 3000
3075: POP
3076: POP
// end ; repeat wait ( 0 0$1 ) ;
3077: LD_INT 35
3079: PPUSH
3080: CALL_OW 67
// for i in defenders do
3084: LD_ADDR_VAR 0 2
3088: PUSH
3089: LD_EXP 20
3093: PUSH
3094: FOR_IN
3095: IFFALSE 3177
// begin if defcon and GetDistUnitXY ( i , defcon [ 1 ] , defcon [ 2 ] ) > 10 and not HasTask ( i ) then
3097: LD_EXP 21
3101: PUSH
3102: LD_VAR 0 2
3106: PPUSH
3107: LD_EXP 21
3111: PUSH
3112: LD_INT 1
3114: ARRAY
3115: PPUSH
3116: LD_EXP 21
3120: PUSH
3121: LD_INT 2
3123: ARRAY
3124: PPUSH
3125: CALL_OW 297
3129: PUSH
3130: LD_INT 10
3132: GREATER
3133: AND
3134: PUSH
3135: LD_VAR 0 2
3139: PPUSH
3140: CALL_OW 314
3144: NOT
3145: AND
3146: IFFALSE 3175
// ComAgressiveMove ( i , defcon [ 1 ] , defcon [ 2 ] ) ;
3148: LD_VAR 0 2
3152: PPUSH
3153: LD_EXP 21
3157: PUSH
3158: LD_INT 1
3160: ARRAY
3161: PPUSH
3162: LD_EXP 21
3166: PUSH
3167: LD_INT 2
3169: ARRAY
3170: PPUSH
3171: CALL_OW 114
// end ;
3175: GO 3094
3177: POP
3178: POP
// until not defenders ;
3179: LD_EXP 20
3183: NOT
3184: IFFALSE 3077
// end ;
3186: LD_VAR 0 1
3190: RET
// every 0 0$1 do var radar , i ;
3191: GO 3193
3193: DISABLE
3194: LD_INT 0
3196: PPUSH
3197: PPUSH
// begin uc_side := 1 ;
3198: LD_ADDR_OWVAR 20
3202: PUSH
3203: LD_INT 1
3205: ST_TO_ADDR
// uc_nation := 1 ;
3206: LD_ADDR_OWVAR 21
3210: PUSH
3211: LD_INT 1
3213: ST_TO_ADDR
// PrepareVehicle ( us_light_wheeled , engine_solar , control_computer , us_radar , 100 ) ;
3214: LD_INT 1
3216: PPUSH
3217: LD_INT 2
3219: PPUSH
3220: LD_INT 3
3222: PPUSH
3223: LD_INT 11
3225: PPUSH
3226: LD_INT 100
3228: PPUSH
3229: CALL 37140 0 5
// radar := CreateVehicle ;
3233: LD_ADDR_VAR 0 1
3237: PUSH
3238: CALL_OW 45
3242: ST_TO_ADDR
// SetDir ( radar , 4 ) ;
3243: LD_VAR 0 1
3247: PPUSH
3248: LD_INT 4
3250: PPUSH
3251: CALL_OW 233
// PlaceUnitXY ( radar , 51 , 45 , false ) ;
3255: LD_VAR 0 1
3259: PPUSH
3260: LD_INT 51
3262: PPUSH
3263: LD_INT 45
3265: PPUSH
3266: LD_INT 0
3268: PPUSH
3269: CALL_OW 48
// repeat AddComWait ( radar , 0 0$20 ) ;
3273: LD_VAR 0 1
3277: PPUSH
3278: LD_INT 700
3280: PPUSH
3281: CALL_OW 202
// AddComMoveXY ( radar , 65 , 75 ) ;
3285: LD_VAR 0 1
3289: PPUSH
3290: LD_INT 65
3292: PPUSH
3293: LD_INT 75
3295: PPUSH
3296: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3300: LD_VAR 0 1
3304: PPUSH
3305: LD_INT 350
3307: PPUSH
3308: CALL_OW 202
// AddComMoveXY ( radar , 83 , 87 ) ;
3312: LD_VAR 0 1
3316: PPUSH
3317: LD_INT 83
3319: PPUSH
3320: LD_INT 87
3322: PPUSH
3323: CALL_OW 171
// AddComWait ( radar , 0 0$15 ) ;
3327: LD_VAR 0 1
3331: PPUSH
3332: LD_INT 525
3334: PPUSH
3335: CALL_OW 202
// AddComMoveXY ( radar , 94 , 81 ) ;
3339: LD_VAR 0 1
3343: PPUSH
3344: LD_INT 94
3346: PPUSH
3347: LD_INT 81
3349: PPUSH
3350: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3354: LD_VAR 0 1
3358: PPUSH
3359: LD_INT 350
3361: PPUSH
3362: CALL_OW 202
// AddComMoveXY ( radar , 55 , 48 ) ;
3366: LD_VAR 0 1
3370: PPUSH
3371: LD_INT 55
3373: PPUSH
3374: LD_INT 48
3376: PPUSH
3377: CALL_OW 171
// wait ( 1 1$00 ) ;
3381: LD_INT 2100
3383: PPUSH
3384: CALL_OW 67
// until not IsOk ( radar ) ;
3388: LD_VAR 0 1
3392: PPUSH
3393: CALL_OW 302
3397: NOT
3398: IFFALSE 3273
// end ;
3400: PPOPN 2
3402: END
// every 7 7$30 trigger Difficulty > 1 and extra_patrol do var un ;
3403: LD_OWVAR 67
3407: PUSH
3408: LD_INT 1
3410: GREATER
3411: PUSH
3412: LD_EXP 11
3416: AND
3417: IFFALSE 3639
3419: GO 3421
3421: DISABLE
3422: LD_INT 0
3424: PPUSH
// begin enable ;
3425: ENABLE
// uc_side := 1 ;
3426: LD_ADDR_OWVAR 20
3430: PUSH
3431: LD_INT 1
3433: ST_TO_ADDR
// uc_nation := 1 ;
3434: LD_ADDR_OWVAR 21
3438: PUSH
3439: LD_INT 1
3441: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_gatling_gun , 100 ) ;
3442: LD_INT 5
3444: PPUSH
3445: LD_INT 3
3447: PPUSH
3448: LD_INT 3
3450: PPUSH
3451: LD_INT 4
3453: PPUSH
3454: LD_INT 100
3456: PPUSH
3457: CALL 37140 0 5
// un := CreateVehicle ;
3461: LD_ADDR_VAR 0 1
3465: PUSH
3466: CALL_OW 45
3470: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3471: LD_VAR 0 1
3475: PPUSH
3476: LD_INT 3
3478: PPUSH
3479: CALL_OW 233
// PlaceUnitXY ( un , 155 , 2 , false ) ;
3483: LD_VAR 0 1
3487: PPUSH
3488: LD_INT 155
3490: PPUSH
3491: LD_INT 2
3493: PPUSH
3494: LD_INT 0
3496: PPUSH
3497: CALL_OW 48
// ComAgressiveMove ( un , 169 , 77 ) ;
3501: LD_VAR 0 1
3505: PPUSH
3506: LD_INT 169
3508: PPUSH
3509: LD_INT 77
3511: PPUSH
3512: CALL_OW 114
// AddComWait ( un , 0 0$2 ) ;
3516: LD_VAR 0 1
3520: PPUSH
3521: LD_INT 70
3523: PPUSH
3524: CALL_OW 202
// AddComAgressiveMove ( un , 134 , 62 ) ;
3528: LD_VAR 0 1
3532: PPUSH
3533: LD_INT 134
3535: PPUSH
3536: LD_INT 62
3538: PPUSH
3539: CALL_OW 174
// AddComAgressiveMove ( un , 103 , 42 ) ;
3543: LD_VAR 0 1
3547: PPUSH
3548: LD_INT 103
3550: PPUSH
3551: LD_INT 42
3553: PPUSH
3554: CALL_OW 174
// AddComWait ( un , 0 0$2 ) ;
3558: LD_VAR 0 1
3562: PPUSH
3563: LD_INT 70
3565: PPUSH
3566: CALL_OW 202
// AddComAgressiveMove ( un , 84 , 2 ) ;
3570: LD_VAR 0 1
3574: PPUSH
3575: LD_INT 84
3577: PPUSH
3578: LD_INT 2
3580: PPUSH
3581: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
3585: LD_INT 35
3587: PPUSH
3588: CALL_OW 67
// if IsDead ( un ) then
3592: LD_VAR 0 1
3596: PPUSH
3597: CALL_OW 301
3601: IFFALSE 3613
// begin extra_patrol := false ;
3603: LD_ADDR_EXP 11
3607: PUSH
3608: LD_INT 0
3610: ST_TO_ADDR
// exit ;
3611: GO 3639
// end ; until IsAt ( un , 84 , 2 ) ;
3613: LD_VAR 0 1
3617: PPUSH
3618: LD_INT 84
3620: PPUSH
3621: LD_INT 2
3623: PPUSH
3624: CALL_OW 307
3628: IFFALSE 3585
// RemoveUnit ( un ) ;
3630: LD_VAR 0 1
3634: PPUSH
3635: CALL_OW 64
// end ; end_of_file
3639: PPOPN 1
3641: END
// export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor ; export function PrepareFriends ; var i , tmp , buildings , areas , bunkers , cl ; begin
3642: LD_INT 0
3644: PPUSH
3645: PPUSH
3646: PPUSH
3647: PPUSH
3648: PPUSH
3649: PPUSH
3650: PPUSH
// uc_side := 4 ;
3651: LD_ADDR_OWVAR 20
3655: PUSH
3656: LD_INT 4
3658: ST_TO_ADDR
// uc_nation := 1 ;
3659: LD_ADDR_OWVAR 21
3663: PUSH
3664: LD_INT 1
3666: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 10c_ ) ;
3667: LD_ADDR_EXP 37
3671: PUSH
3672: LD_STRING DeltaDoctor
3674: PPUSH
3675: LD_EXP 1
3679: NOT
3680: PPUSH
3681: LD_STRING 10c_
3683: PPUSH
3684: CALL 32316 0 3
3688: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 10c_ ) ;
3689: LD_ADDR_EXP 36
3693: PUSH
3694: LD_STRING Joan
3696: PPUSH
3697: LD_EXP 1
3701: NOT
3702: PPUSH
3703: LD_STRING 10c_
3705: PPUSH
3706: CALL 32316 0 3
3710: ST_TO_ADDR
// if Joan then
3711: LD_EXP 36
3715: IFFALSE 3746
// friends := Insert ( friends , friends + 1 , Joan ) ;
3717: LD_ADDR_EXP 4
3721: PUSH
3722: LD_EXP 4
3726: PPUSH
3727: LD_EXP 4
3731: PUSH
3732: LD_INT 1
3734: PLUS
3735: PPUSH
3736: LD_EXP 36
3740: PPUSH
3741: CALL_OW 2
3745: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 10c_ ) ;
3746: LD_ADDR_EXP 35
3750: PUSH
3751: LD_STRING Simms
3753: PPUSH
3754: LD_EXP 1
3758: NOT
3759: PPUSH
3760: LD_STRING 10c_
3762: PPUSH
3763: CALL 32316 0 3
3767: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 11_ ) ;
3768: LD_ADDR_EXP 34
3772: PUSH
3773: LD_STRING Kikuchi
3775: PPUSH
3776: LD_EXP 1
3780: NOT
3781: PPUSH
3782: LD_STRING 11_
3784: PPUSH
3785: CALL 32316 0 3
3789: ST_TO_ADDR
// if Kikuchi then
3790: LD_EXP 34
3794: IFFALSE 3825
// friends := Insert ( friends , friends + 1 , Kikuchi ) ;
3796: LD_ADDR_EXP 4
3800: PUSH
3801: LD_EXP 4
3805: PPUSH
3806: LD_EXP 4
3810: PUSH
3811: LD_INT 1
3813: PLUS
3814: PPUSH
3815: LD_EXP 34
3819: PPUSH
3820: CALL_OW 2
3824: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 11_ ) ;
3825: LD_ADDR_EXP 33
3829: PUSH
3830: LD_STRING Frank
3832: PPUSH
3833: LD_EXP 1
3837: NOT
3838: PPUSH
3839: LD_STRING 11_
3841: PPUSH
3842: CALL 32316 0 3
3846: ST_TO_ADDR
// if Frank then
3847: LD_EXP 33
3851: IFFALSE 3882
// friends := Insert ( friends , friends + 1 , Frank ) ;
3853: LD_ADDR_EXP 4
3857: PUSH
3858: LD_EXP 4
3862: PPUSH
3863: LD_EXP 4
3867: PUSH
3868: LD_INT 1
3870: PLUS
3871: PPUSH
3872: LD_EXP 33
3876: PPUSH
3877: CALL_OW 2
3881: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , 11_ ) ;
3882: LD_ADDR_EXP 32
3886: PUSH
3887: LD_STRING Gary
3889: PPUSH
3890: LD_EXP 1
3894: NOT
3895: PPUSH
3896: LD_STRING 11_
3898: PPUSH
3899: CALL 32316 0 3
3903: ST_TO_ADDR
// if Gary then
3904: LD_EXP 32
3908: IFFALSE 3939
// friends := Insert ( friends , friends + 1 , Gary ) ;
3910: LD_ADDR_EXP 4
3914: PUSH
3915: LD_EXP 4
3919: PPUSH
3920: LD_EXP 4
3924: PUSH
3925: LD_INT 1
3927: PLUS
3928: PPUSH
3929: LD_EXP 32
3933: PPUSH
3934: CALL_OW 2
3938: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , ( not debug ) , 11_ ) ;
3939: LD_ADDR_EXP 31
3943: PUSH
3944: LD_STRING Cornell
3946: PPUSH
3947: LD_EXP 1
3951: NOT
3952: PPUSH
3953: LD_STRING 11_
3955: PPUSH
3956: CALL 32316 0 3
3960: ST_TO_ADDR
// if Cornel then
3961: LD_EXP 31
3965: IFFALSE 3996
// friends := Insert ( friends , friends + 1 , Cornel ) ;
3967: LD_ADDR_EXP 4
3971: PUSH
3972: LD_EXP 4
3976: PPUSH
3977: LD_EXP 4
3981: PUSH
3982: LD_INT 1
3984: PLUS
3985: PPUSH
3986: LD_EXP 31
3990: PPUSH
3991: CALL_OW 2
3995: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , 11_ ) ;
3996: LD_ADDR_EXP 30
4000: PUSH
4001: LD_STRING Houten
4003: PPUSH
4004: LD_EXP 1
4008: NOT
4009: PPUSH
4010: LD_STRING 11_
4012: PPUSH
4013: CALL 32316 0 3
4017: ST_TO_ADDR
// if Houten then
4018: LD_EXP 30
4022: IFFALSE 4053
// friends := Insert ( friends , friends + 1 , Houten ) ;
4024: LD_ADDR_EXP 4
4028: PUSH
4029: LD_EXP 4
4033: PPUSH
4034: LD_EXP 4
4038: PUSH
4039: LD_INT 1
4041: PLUS
4042: PPUSH
4043: LD_EXP 30
4047: PPUSH
4048: CALL_OW 2
4052: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 11_ ) ;
4053: LD_ADDR_EXP 29
4057: PUSH
4058: LD_STRING Gladstone
4060: PPUSH
4061: LD_EXP 1
4065: NOT
4066: PPUSH
4067: LD_STRING 11_
4069: PPUSH
4070: CALL 32316 0 3
4074: ST_TO_ADDR
// if Gladstone then
4075: LD_EXP 29
4079: IFFALSE 4110
// friends := Insert ( friends , friends + 1 , Gladstone ) ;
4081: LD_ADDR_EXP 4
4085: PUSH
4086: LD_EXP 4
4090: PPUSH
4091: LD_EXP 4
4095: PUSH
4096: LD_INT 1
4098: PLUS
4099: PPUSH
4100: LD_EXP 29
4104: PPUSH
4105: CALL_OW 2
4109: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 11_ ) ;
4110: LD_ADDR_EXP 23
4114: PUSH
4115: LD_STRING Lisa
4117: PPUSH
4118: LD_EXP 1
4122: NOT
4123: PPUSH
4124: LD_STRING 11_
4126: PPUSH
4127: CALL 32316 0 3
4131: ST_TO_ADDR
// if Lisa then
4132: LD_EXP 23
4136: IFFALSE 4161
// friends := Insert ( friends , 1 , Lisa ) ;
4138: LD_ADDR_EXP 4
4142: PUSH
4143: LD_EXP 4
4147: PPUSH
4148: LD_INT 1
4150: PPUSH
4151: LD_EXP 23
4155: PPUSH
4156: CALL_OW 2
4160: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 11_ ) ;
4161: LD_ADDR_EXP 24
4165: PUSH
4166: LD_STRING Donaldson
4168: PPUSH
4169: LD_EXP 1
4173: NOT
4174: PPUSH
4175: LD_STRING 11_
4177: PPUSH
4178: CALL 32316 0 3
4182: ST_TO_ADDR
// if Donaldson then
4183: LD_EXP 24
4187: IFFALSE 4218
// friends := Insert ( friends , friends + 1 , Donaldson ) ;
4189: LD_ADDR_EXP 4
4193: PUSH
4194: LD_EXP 4
4198: PPUSH
4199: LD_EXP 4
4203: PUSH
4204: LD_INT 1
4206: PLUS
4207: PPUSH
4208: LD_EXP 24
4212: PPUSH
4213: CALL_OW 2
4217: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 11_ ) ;
4218: LD_ADDR_EXP 25
4222: PUSH
4223: LD_STRING Bobby
4225: PPUSH
4226: LD_EXP 1
4230: NOT
4231: PPUSH
4232: LD_STRING 11_
4234: PPUSH
4235: CALL 32316 0 3
4239: ST_TO_ADDR
// if Bobby then
4240: LD_EXP 25
4244: IFFALSE 4275
// friends := Insert ( friends , friends + 1 , Bobby ) ;
4246: LD_ADDR_EXP 4
4250: PUSH
4251: LD_EXP 4
4255: PPUSH
4256: LD_EXP 4
4260: PUSH
4261: LD_INT 1
4263: PLUS
4264: PPUSH
4265: LD_EXP 25
4269: PPUSH
4270: CALL_OW 2
4274: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 11_ ) ;
4275: LD_ADDR_EXP 26
4279: PUSH
4280: LD_STRING Cyrus
4282: PPUSH
4283: LD_EXP 1
4287: NOT
4288: PPUSH
4289: LD_STRING 11_
4291: PPUSH
4292: CALL 32316 0 3
4296: ST_TO_ADDR
// if Cyrus then
4297: LD_EXP 26
4301: IFFALSE 4332
// friends := Insert ( friends , friends + 1 , Cyrus ) ;
4303: LD_ADDR_EXP 4
4307: PUSH
4308: LD_EXP 4
4312: PPUSH
4313: LD_EXP 4
4317: PUSH
4318: LD_INT 1
4320: PLUS
4321: PPUSH
4322: LD_EXP 26
4326: PPUSH
4327: CALL_OW 2
4331: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 11_ ) ;
4332: LD_ADDR_EXP 27
4336: PUSH
4337: LD_STRING Denis
4339: PPUSH
4340: LD_EXP 1
4344: NOT
4345: PPUSH
4346: LD_STRING 11_
4348: PPUSH
4349: CALL 32316 0 3
4353: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , 11_ ) ;
4354: LD_ADDR_EXP 28
4358: PUSH
4359: LD_STRING Brown
4361: PPUSH
4362: LD_EXP 1
4366: NOT
4367: PPUSH
4368: LD_STRING 11_
4370: PPUSH
4371: CALL 32316 0 3
4375: ST_TO_ADDR
// if Brown then
4376: LD_EXP 28
4380: IFFALSE 4411
// friends := Insert ( friends , friends + 1 , Brown ) ;
4382: LD_ADDR_EXP 4
4386: PUSH
4387: LD_EXP 4
4391: PPUSH
4392: LD_EXP 4
4396: PUSH
4397: LD_INT 1
4399: PLUS
4400: PPUSH
4401: LD_EXP 28
4405: PPUSH
4406: CALL_OW 2
4410: ST_TO_ADDR
// friends := friends ^ CreateCharacterSet ( 11c_others ) ^ CreateCharacterSet ( 11_others ) ;
4411: LD_ADDR_EXP 4
4415: PUSH
4416: LD_EXP 4
4420: PUSH
4421: LD_STRING 11c_others
4423: PPUSH
4424: CALL_OW 31
4428: ADD
4429: PUSH
4430: LD_STRING 11_others
4432: PPUSH
4433: CALL_OW 31
4437: ADD
4438: ST_TO_ADDR
// if friends < 18 then
4439: LD_EXP 4
4443: PUSH
4444: LD_INT 18
4446: LESS
4447: IFFALSE 4519
// for i = 1 to 18 do
4449: LD_ADDR_VAR 0 2
4453: PUSH
4454: DOUBLE
4455: LD_INT 1
4457: DEC
4458: ST_TO_ADDR
4459: LD_INT 18
4461: PUSH
4462: FOR_TO
4463: IFFALSE 4517
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 7 ) ;
4465: LD_INT 0
4467: PPUSH
4468: LD_INT 1
4470: PPUSH
4471: LD_INT 4
4473: PPUSH
4474: CALL_OW 12
4478: PPUSH
4479: LD_INT 7
4481: PPUSH
4482: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
4486: LD_ADDR_EXP 4
4490: PUSH
4491: LD_EXP 4
4495: PPUSH
4496: LD_EXP 4
4500: PUSH
4501: LD_INT 1
4503: PLUS
4504: PPUSH
4505: CALL_OW 44
4509: PPUSH
4510: CALL_OW 2
4514: ST_TO_ADDR
// end ;
4515: GO 4462
4517: POP
4518: POP
// for i in friends do
4519: LD_ADDR_VAR 0 2
4523: PUSH
4524: LD_EXP 4
4528: PUSH
4529: FOR_IN
4530: IFFALSE 4588
// if GetSkill ( i , 1 ) >= GetSkill ( i , 4 ) then
4532: LD_VAR 0 2
4536: PPUSH
4537: LD_INT 1
4539: PPUSH
4540: CALL_OW 259
4544: PUSH
4545: LD_VAR 0 2
4549: PPUSH
4550: LD_INT 4
4552: PPUSH
4553: CALL_OW 259
4557: GREATEREQUAL
4558: IFFALSE 4574
// SetClass ( i , class_soldier ) else
4560: LD_VAR 0 2
4564: PPUSH
4565: LD_INT 1
4567: PPUSH
4568: CALL_OW 336
4572: GO 4586
// SetClass ( i , class_scientistic ) ;
4574: LD_VAR 0 2
4578: PPUSH
4579: LD_INT 4
4581: PPUSH
4582: CALL_OW 336
4586: GO 4529
4588: POP
4589: POP
// if Frank then
4590: LD_EXP 33
4594: IFFALSE 4608
// SetClass ( Frank , class_sniper ) ;
4596: LD_EXP 33
4600: PPUSH
4601: LD_INT 5
4603: PPUSH
4604: CALL_OW 336
// SetClass ( [ Joan , Denis , DeltaDoctor , Simms ] , class_scientistic ) ;
4608: LD_EXP 36
4612: PUSH
4613: LD_EXP 27
4617: PUSH
4618: LD_EXP 37
4622: PUSH
4623: LD_EXP 35
4627: PUSH
4628: EMPTY
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: PPUSH
4634: LD_INT 4
4636: PPUSH
4637: CALL_OW 336
// selected = CharacterSelection (  , 7 , 7 , [ sel_dont_change_class , JMM , Roth , Simms , Denis , DeltaDoctor , sel_not_hired , sel_changeable , sel_change_class ] ^ friends , [ class_soldier , [ class_scientistic , 2 ] , [ class_sniper , 0 , 3 ] ] ) ;
4641: LD_ADDR_EXP 3
4645: PUSH
4646: LD_STRING 
4648: PPUSH
4649: LD_INT 7
4651: PPUSH
4652: LD_INT 7
4654: PPUSH
4655: LD_INT -6
4657: PUSH
4658: LD_EXP 14
4662: PUSH
4663: LD_EXP 15
4667: PUSH
4668: LD_EXP 35
4672: PUSH
4673: LD_EXP 27
4677: PUSH
4678: LD_EXP 37
4682: PUSH
4683: LD_INT -2
4685: PUSH
4686: LD_INT -3
4688: PUSH
4689: LD_INT -5
4691: PUSH
4692: EMPTY
4693: LIST
4694: LIST
4695: LIST
4696: LIST
4697: LIST
4698: LIST
4699: LIST
4700: LIST
4701: LIST
4702: PUSH
4703: LD_EXP 4
4707: ADD
4708: PPUSH
4709: LD_INT 1
4711: PUSH
4712: LD_INT 4
4714: PUSH
4715: LD_INT 2
4717: PUSH
4718: EMPTY
4719: LIST
4720: LIST
4721: PUSH
4722: LD_INT 5
4724: PUSH
4725: LD_INT 0
4727: PUSH
4728: LD_INT 3
4730: PUSH
4731: EMPTY
4732: LIST
4733: LIST
4734: LIST
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: LIST
4740: PPUSH
4741: CALL_OW 42
4745: ST_TO_ADDR
// if Simms then
4746: LD_EXP 35
4750: IFFALSE 4768
// selected := selected ^ Simms ;
4752: LD_ADDR_EXP 3
4756: PUSH
4757: LD_EXP 3
4761: PUSH
4762: LD_EXP 35
4766: ADD
4767: ST_TO_ADDR
// if Denis then
4768: LD_EXP 27
4772: IFFALSE 4790
// selected := selected ^ Denis ;
4774: LD_ADDR_EXP 3
4778: PUSH
4779: LD_EXP 3
4783: PUSH
4784: LD_EXP 27
4788: ADD
4789: ST_TO_ADDR
// if DeltaDoctor then
4790: LD_EXP 37
4794: IFFALSE 4812
// selected := selected ^ DeltaDoctor ;
4796: LD_ADDR_EXP 3
4800: PUSH
4801: LD_EXP 3
4805: PUSH
4806: LD_EXP 37
4810: ADD
4811: ST_TO_ADDR
// friends := friends diff selected ;
4812: LD_ADDR_EXP 4
4816: PUSH
4817: LD_EXP 4
4821: PUSH
4822: LD_EXP 3
4826: DIFF
4827: ST_TO_ADDR
// buildings := [ [ ambar1 , ambar2 , ambar3 ] , [ amlab2 , amlab3 , amlab4 ] ] ;
4828: LD_ADDR_VAR 0 4
4832: PUSH
4833: LD_INT 111
4835: PUSH
4836: LD_INT 137
4838: PUSH
4839: LD_INT 51
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: LIST
4846: PUSH
4847: LD_INT 147
4849: PUSH
4850: LD_INT 129
4852: PUSH
4853: LD_INT 25
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: LIST
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: ST_TO_ADDR
// areas := [ friends_spawn_1 , friends_spawn_2 , friends_spawn_3 , friends_spawn_4 , friends_spawn_5 , friends_spawn_6 ] ;
4865: LD_ADDR_VAR 0 5
4869: PUSH
4870: LD_INT 5
4872: PUSH
4873: LD_INT 6
4875: PUSH
4876: LD_INT 7
4878: PUSH
4879: LD_INT 8
4881: PUSH
4882: LD_INT 17
4884: PUSH
4885: LD_INT 18
4887: PUSH
4888: EMPTY
4889: LIST
4890: LIST
4891: LIST
4892: LIST
4893: LIST
4894: LIST
4895: ST_TO_ADDR
// for i in buildings do
4896: LD_ADDR_VAR 0 2
4900: PUSH
4901: LD_VAR 0 4
4905: PUSH
4906: FOR_IN
4907: IFFALSE 4923
// SetSide ( i , 4 ) ;
4909: LD_VAR 0 2
4913: PPUSH
4914: LD_INT 4
4916: PPUSH
4917: CALL_OW 235
4921: GO 4906
4923: POP
4924: POP
// for i in selected do
4925: LD_ADDR_VAR 0 2
4929: PUSH
4930: LD_EXP 3
4934: PUSH
4935: FOR_IN
4936: IFFALSE 5276
// begin if GetClass ( i ) in [ 1 , 5 ] then
4938: LD_VAR 0 2
4942: PPUSH
4943: CALL_OW 257
4947: PUSH
4948: LD_INT 1
4950: PUSH
4951: LD_INT 5
4953: PUSH
4954: EMPTY
4955: LIST
4956: LIST
4957: IN
4958: IFFALSE 5118
// begin if buildings [ 1 ] then
4960: LD_VAR 0 4
4964: PUSH
4965: LD_INT 1
4967: ARRAY
4968: IFFALSE 5029
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
4970: LD_VAR 0 2
4974: PPUSH
4975: LD_VAR 0 4
4979: PUSH
4980: LD_INT 1
4982: ARRAY
4983: PUSH
4984: LD_INT 1
4986: ARRAY
4987: PPUSH
4988: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
4992: LD_ADDR_VAR 0 4
4996: PUSH
4997: LD_VAR 0 4
5001: PPUSH
5002: LD_INT 1
5004: PPUSH
5005: LD_VAR 0 4
5009: PUSH
5010: LD_INT 1
5012: ARRAY
5013: PPUSH
5014: LD_INT 1
5016: PPUSH
5017: CALL_OW 3
5021: PPUSH
5022: CALL_OW 1
5026: ST_TO_ADDR
// end else
5027: GO 5116
// begin if not areas then
5029: LD_VAR 0 5
5033: NOT
5034: IFFALSE 5068
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5036: LD_VAR 0 2
5040: PPUSH
5041: LD_INT 87
5043: PPUSH
5044: LD_INT 68
5046: PPUSH
5047: LD_INT 8
5049: PPUSH
5050: LD_INT 0
5052: PPUSH
5053: CALL_OW 50
// ComHold ( i ) ;
5057: LD_VAR 0 2
5061: PPUSH
5062: CALL_OW 140
// end else
5066: GO 5116
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5068: LD_VAR 0 2
5072: PPUSH
5073: LD_VAR 0 5
5077: PUSH
5078: LD_INT 1
5080: ARRAY
5081: PPUSH
5082: LD_INT 0
5084: PPUSH
5085: CALL_OW 49
// ComHold ( i ) ;
5089: LD_VAR 0 2
5093: PPUSH
5094: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5098: LD_ADDR_VAR 0 5
5102: PUSH
5103: LD_VAR 0 5
5107: PPUSH
5108: LD_INT 1
5110: PPUSH
5111: CALL_OW 3
5115: ST_TO_ADDR
// end ; end ; end else
5116: GO 5274
// begin if buildings [ 2 ] then
5118: LD_VAR 0 4
5122: PUSH
5123: LD_INT 2
5125: ARRAY
5126: IFFALSE 5187
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
5128: LD_VAR 0 2
5132: PPUSH
5133: LD_VAR 0 4
5137: PUSH
5138: LD_INT 2
5140: ARRAY
5141: PUSH
5142: LD_INT 1
5144: ARRAY
5145: PPUSH
5146: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
5150: LD_ADDR_VAR 0 4
5154: PUSH
5155: LD_VAR 0 4
5159: PPUSH
5160: LD_INT 2
5162: PPUSH
5163: LD_VAR 0 4
5167: PUSH
5168: LD_INT 2
5170: ARRAY
5171: PPUSH
5172: LD_INT 1
5174: PPUSH
5175: CALL_OW 3
5179: PPUSH
5180: CALL_OW 1
5184: ST_TO_ADDR
// end else
5185: GO 5274
// begin if not areas then
5187: LD_VAR 0 5
5191: NOT
5192: IFFALSE 5226
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5194: LD_VAR 0 2
5198: PPUSH
5199: LD_INT 87
5201: PPUSH
5202: LD_INT 68
5204: PPUSH
5205: LD_INT 8
5207: PPUSH
5208: LD_INT 0
5210: PPUSH
5211: CALL_OW 50
// ComHold ( i ) ;
5215: LD_VAR 0 2
5219: PPUSH
5220: CALL_OW 140
// end else
5224: GO 5274
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5226: LD_VAR 0 2
5230: PPUSH
5231: LD_VAR 0 5
5235: PUSH
5236: LD_INT 1
5238: ARRAY
5239: PPUSH
5240: LD_INT 0
5242: PPUSH
5243: CALL_OW 49
// ComHold ( i ) ;
5247: LD_VAR 0 2
5251: PPUSH
5252: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5256: LD_ADDR_VAR 0 5
5260: PUSH
5261: LD_VAR 0 5
5265: PPUSH
5266: LD_INT 1
5268: PPUSH
5269: CALL_OW 3
5273: ST_TO_ADDR
// end ; end ; end ; end ;
5274: GO 4935
5276: POP
5277: POP
// bunkers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) ;
5278: LD_ADDR_VAR 0 6
5282: PUSH
5283: LD_INT 22
5285: PUSH
5286: LD_INT 1
5288: PUSH
5289: EMPTY
5290: LIST
5291: LIST
5292: PUSH
5293: LD_INT 30
5295: PUSH
5296: LD_INT 32
5298: PUSH
5299: EMPTY
5300: LIST
5301: LIST
5302: PUSH
5303: EMPTY
5304: LIST
5305: LIST
5306: PPUSH
5307: CALL_OW 69
5311: ST_TO_ADDR
// for i = bunkers - friends downto 1 do
5312: LD_ADDR_VAR 0 2
5316: PUSH
5317: DOUBLE
5318: LD_VAR 0 6
5322: PUSH
5323: LD_EXP 4
5327: MINUS
5328: INC
5329: ST_TO_ADDR
5330: LD_INT 1
5332: PUSH
5333: FOR_DOWNTO
5334: IFFALSE 5397
// begin PrepareHuman ( false , 1 , [ 7 , 8 , 9 ] [ Difficulty ] ) ;
5336: LD_INT 0
5338: PPUSH
5339: LD_INT 1
5341: PPUSH
5342: LD_INT 7
5344: PUSH
5345: LD_INT 8
5347: PUSH
5348: LD_INT 9
5350: PUSH
5351: EMPTY
5352: LIST
5353: LIST
5354: LIST
5355: PUSH
5356: LD_OWVAR 67
5360: ARRAY
5361: PPUSH
5362: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
5366: LD_ADDR_EXP 4
5370: PUSH
5371: LD_EXP 4
5375: PPUSH
5376: LD_EXP 4
5380: PUSH
5381: LD_INT 1
5383: PLUS
5384: PPUSH
5385: CALL_OW 44
5389: PPUSH
5390: CALL_OW 2
5394: ST_TO_ADDR
// end ;
5395: GO 5333
5397: POP
5398: POP
// if friends then
5399: LD_EXP 4
5403: IFFALSE 5519
// begin tmp := friends ;
5405: LD_ADDR_VAR 0 3
5409: PUSH
5410: LD_EXP 4
5414: ST_TO_ADDR
// for i = 1 to bunkers do
5415: LD_ADDR_VAR 0 2
5419: PUSH
5420: DOUBLE
5421: LD_INT 1
5423: DEC
5424: ST_TO_ADDR
5425: LD_VAR 0 6
5429: PUSH
5430: FOR_TO
5431: IFFALSE 5517
// begin SetSide ( tmp [ tmp ] , 1 ) ;
5433: LD_VAR 0 3
5437: PUSH
5438: LD_VAR 0 3
5442: ARRAY
5443: PPUSH
5444: LD_INT 1
5446: PPUSH
5447: CALL_OW 235
// SetClass ( tmp [ tmp ] , 1 ) ;
5451: LD_VAR 0 3
5455: PUSH
5456: LD_VAR 0 3
5460: ARRAY
5461: PPUSH
5462: LD_INT 1
5464: PPUSH
5465: CALL_OW 336
// PlaceHumanInUnit ( tmp [ tmp ] , bunkers [ i ] ) ;
5469: LD_VAR 0 3
5473: PUSH
5474: LD_VAR 0 3
5478: ARRAY
5479: PPUSH
5480: LD_VAR 0 6
5484: PUSH
5485: LD_VAR 0 2
5489: ARRAY
5490: PPUSH
5491: CALL_OW 52
// tmp := Delete ( tmp , tmp ) ;
5495: LD_ADDR_VAR 0 3
5499: PUSH
5500: LD_VAR 0 3
5504: PPUSH
5505: LD_VAR 0 3
5509: PPUSH
5510: CALL_OW 3
5514: ST_TO_ADDR
// end ;
5515: GO 5430
5517: POP
5518: POP
// end ; areas := areas union [ guard_spawn_1 , guard_spawn_2 , guard_spawn_3 , guard_spawn_4 , guard_spawn_5 , guard_spawn_6 , guard_spawn_7 , guard_spawn_8 , guard_spawn_9 , guard_spawn_10 , guard_spawn_11 , guard_spawn_12 , guard_spawn_13 , guard_spawn_14 , guard_spawn_15 , guard_spawn_16 , guard_spawn_17 , guard_spawn_18 , guard_spawn_19 , guard_spawn_20 ] ;
5519: LD_ADDR_VAR 0 5
5523: PUSH
5524: LD_VAR 0 5
5528: PUSH
5529: LD_INT 9
5531: PUSH
5532: LD_INT 10
5534: PUSH
5535: LD_INT 11
5537: PUSH
5538: LD_INT 12
5540: PUSH
5541: LD_INT 13
5543: PUSH
5544: LD_INT 14
5546: PUSH
5547: LD_INT 15
5549: PUSH
5550: LD_INT 16
5552: PUSH
5553: LD_INT 26
5555: PUSH
5556: LD_INT 27
5558: PUSH
5559: LD_INT 28
5561: PUSH
5562: LD_INT 29
5564: PUSH
5565: LD_INT 30
5567: PUSH
5568: LD_INT 31
5570: PUSH
5571: LD_INT 32
5573: PUSH
5574: LD_INT 33
5576: PUSH
5577: LD_INT 34
5579: PUSH
5580: LD_INT 35
5582: PUSH
5583: LD_INT 36
5585: PUSH
5586: LD_INT 37
5588: PUSH
5589: EMPTY
5590: LIST
5591: LIST
5592: LIST
5593: LIST
5594: LIST
5595: LIST
5596: LIST
5597: LIST
5598: LIST
5599: LIST
5600: LIST
5601: LIST
5602: LIST
5603: LIST
5604: LIST
5605: LIST
5606: LIST
5607: LIST
5608: LIST
5609: LIST
5610: UNION
5611: ST_TO_ADDR
// for i in friends do
5612: LD_ADDR_VAR 0 2
5616: PUSH
5617: LD_EXP 4
5621: PUSH
5622: FOR_IN
5623: IFFALSE 5910
// begin SetTag ( i , 2 ) ;
5625: LD_VAR 0 2
5629: PPUSH
5630: LD_INT 2
5632: PPUSH
5633: CALL_OW 109
// if not GetClass ( i ) in [ class_soldier , class_scientistic , class_sniper ] then
5637: LD_VAR 0 2
5641: PPUSH
5642: CALL_OW 257
5646: PUSH
5647: LD_INT 1
5649: PUSH
5650: LD_INT 4
5652: PUSH
5653: LD_INT 5
5655: PUSH
5656: EMPTY
5657: LIST
5658: LIST
5659: LIST
5660: IN
5661: NOT
5662: IFFALSE 5676
// SetClass ( i , 1 ) ;
5664: LD_VAR 0 2
5668: PPUSH
5669: LD_INT 1
5671: PPUSH
5672: CALL_OW 336
// if GetClass ( i ) in [ class_soldier , class_sniper ] and buildings [ 1 ] then
5676: LD_VAR 0 2
5680: PPUSH
5681: CALL_OW 257
5685: PUSH
5686: LD_INT 1
5688: PUSH
5689: LD_INT 5
5691: PUSH
5692: EMPTY
5693: LIST
5694: LIST
5695: IN
5696: PUSH
5697: LD_VAR 0 4
5701: PUSH
5702: LD_INT 1
5704: ARRAY
5705: AND
5706: IFFALSE 5767
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
5708: LD_VAR 0 2
5712: PPUSH
5713: LD_VAR 0 4
5717: PUSH
5718: LD_INT 1
5720: ARRAY
5721: PUSH
5722: LD_INT 1
5724: ARRAY
5725: PPUSH
5726: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
5730: LD_ADDR_VAR 0 4
5734: PUSH
5735: LD_VAR 0 4
5739: PPUSH
5740: LD_INT 1
5742: PPUSH
5743: LD_VAR 0 4
5747: PUSH
5748: LD_INT 1
5750: ARRAY
5751: PPUSH
5752: LD_INT 1
5754: PPUSH
5755: CALL_OW 3
5759: PPUSH
5760: CALL_OW 1
5764: ST_TO_ADDR
// continue ;
5765: GO 5622
// end ; if GetClass ( i ) = class_scientistic and buildings [ 2 ] then
5767: LD_VAR 0 2
5771: PPUSH
5772: CALL_OW 257
5776: PUSH
5777: LD_INT 4
5779: EQUAL
5780: PUSH
5781: LD_VAR 0 4
5785: PUSH
5786: LD_INT 2
5788: ARRAY
5789: AND
5790: IFFALSE 5851
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
5792: LD_VAR 0 2
5796: PPUSH
5797: LD_VAR 0 4
5801: PUSH
5802: LD_INT 2
5804: ARRAY
5805: PUSH
5806: LD_INT 1
5808: ARRAY
5809: PPUSH
5810: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
5814: LD_ADDR_VAR 0 4
5818: PUSH
5819: LD_VAR 0 4
5823: PPUSH
5824: LD_INT 2
5826: PPUSH
5827: LD_VAR 0 4
5831: PUSH
5832: LD_INT 2
5834: ARRAY
5835: PPUSH
5836: LD_INT 1
5838: PPUSH
5839: CALL_OW 3
5843: PPUSH
5844: CALL_OW 1
5848: ST_TO_ADDR
// continue ;
5849: GO 5622
// end ; PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5851: LD_VAR 0 2
5855: PPUSH
5856: LD_VAR 0 5
5860: PUSH
5861: LD_INT 1
5863: ARRAY
5864: PPUSH
5865: LD_INT 0
5867: PPUSH
5868: CALL_OW 49
// areas := Delete ( areas , 1 ) ;
5872: LD_ADDR_VAR 0 5
5876: PUSH
5877: LD_VAR 0 5
5881: PPUSH
5882: LD_INT 1
5884: PPUSH
5885: CALL_OW 3
5889: ST_TO_ADDR
// ComHold ( i ) ;
5890: LD_VAR 0 2
5894: PPUSH
5895: CALL_OW 140
// if not areas then
5899: LD_VAR 0 5
5903: NOT
5904: IFFALSE 5908
// break ;
5906: GO 5910
// end ;
5908: GO 5622
5910: POP
5911: POP
// if UnitFilter ( friends , [ f_not , [ f_placed ] ] ) then
5912: LD_EXP 4
5916: PPUSH
5917: LD_INT 3
5919: PUSH
5920: LD_INT 52
5922: PUSH
5923: EMPTY
5924: LIST
5925: PUSH
5926: EMPTY
5927: LIST
5928: LIST
5929: PPUSH
5930: CALL_OW 72
5934: IFFALSE 6001
// for i in UnitFilter ( friends , [ f_not , [ f_placed ] ] ) do
5936: LD_ADDR_VAR 0 2
5940: PUSH
5941: LD_EXP 4
5945: PPUSH
5946: LD_INT 3
5948: PUSH
5949: LD_INT 52
5951: PUSH
5952: EMPTY
5953: LIST
5954: PUSH
5955: EMPTY
5956: LIST
5957: LIST
5958: PPUSH
5959: CALL_OW 72
5963: PUSH
5964: FOR_IN
5965: IFFALSE 5999
// begin PlaceUnitXYR ( i , 65 , 58 , 7 , false ) ;
5967: LD_VAR 0 2
5971: PPUSH
5972: LD_INT 65
5974: PPUSH
5975: LD_INT 58
5977: PPUSH
5978: LD_INT 7
5980: PPUSH
5981: LD_INT 0
5983: PPUSH
5984: CALL_OW 50
// ComHold ( i ) ;
5988: LD_VAR 0 2
5992: PPUSH
5993: CALL_OW 140
// end ;
5997: GO 5964
5999: POP
6000: POP
// if Frank then
6001: LD_EXP 33
6005: IFFALSE 6019
// SetClass ( Frank , class_sniper ) ;
6007: LD_EXP 33
6011: PPUSH
6012: LD_INT 5
6014: PPUSH
6015: CALL_OW 336
// end ; end_of_file
6019: LD_VAR 0 1
6023: RET
// export function CanSayRand ( side ) ; begin
6024: LD_INT 0
6026: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6027: LD_ADDR_VAR 0 2
6031: PUSH
6032: LD_INT 52
6034: PUSH
6035: EMPTY
6036: LIST
6037: PUSH
6038: LD_INT 22
6040: PUSH
6041: LD_VAR 0 1
6045: PUSH
6046: EMPTY
6047: LIST
6048: LIST
6049: PUSH
6050: LD_INT 2
6052: PUSH
6053: LD_INT 25
6055: PUSH
6056: LD_INT 1
6058: PUSH
6059: EMPTY
6060: LIST
6061: LIST
6062: PUSH
6063: LD_INT 25
6065: PUSH
6066: LD_INT 2
6068: PUSH
6069: EMPTY
6070: LIST
6071: LIST
6072: PUSH
6073: LD_INT 25
6075: PUSH
6076: LD_INT 3
6078: PUSH
6079: EMPTY
6080: LIST
6081: LIST
6082: PUSH
6083: LD_INT 25
6085: PUSH
6086: LD_INT 4
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: PUSH
6093: EMPTY
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: LIST
6099: PUSH
6100: EMPTY
6101: LIST
6102: LIST
6103: LIST
6104: PPUSH
6105: CALL_OW 69
6109: PUSH
6110: LD_EXP 14
6114: PUSH
6115: LD_EXP 33
6119: PUSH
6120: LD_EXP 23
6124: PUSH
6125: LD_EXP 24
6129: PUSH
6130: LD_EXP 25
6134: PUSH
6135: LD_EXP 26
6139: PUSH
6140: LD_EXP 27
6144: PUSH
6145: LD_EXP 28
6149: PUSH
6150: LD_EXP 29
6154: PUSH
6155: LD_EXP 30
6159: PUSH
6160: LD_EXP 16
6164: PUSH
6165: LD_EXP 31
6169: PUSH
6170: LD_EXP 32
6174: PUSH
6175: LD_EXP 34
6179: PUSH
6180: EMPTY
6181: LIST
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: LIST
6188: LIST
6189: LIST
6190: LIST
6191: LIST
6192: LIST
6193: LIST
6194: LIST
6195: DIFF
6196: ST_TO_ADDR
// end ;
6197: LD_VAR 0 2
6201: RET
// export function SayRand ( sex , dial ) ; begin
6202: LD_INT 0
6204: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6205: LD_ADDR_VAR 0 3
6209: PUSH
6210: LD_INT 52
6212: PUSH
6213: EMPTY
6214: LIST
6215: PUSH
6216: LD_INT 22
6218: PUSH
6219: LD_INT 1
6221: PUSH
6222: EMPTY
6223: LIST
6224: LIST
6225: PUSH
6226: LD_INT 26
6228: PUSH
6229: LD_VAR 0 1
6233: PUSH
6234: EMPTY
6235: LIST
6236: LIST
6237: PUSH
6238: LD_INT 2
6240: PUSH
6241: LD_INT 25
6243: PUSH
6244: LD_INT 1
6246: PUSH
6247: EMPTY
6248: LIST
6249: LIST
6250: PUSH
6251: LD_INT 25
6253: PUSH
6254: LD_INT 2
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: PUSH
6261: LD_INT 25
6263: PUSH
6264: LD_INT 3
6266: PUSH
6267: EMPTY
6268: LIST
6269: LIST
6270: PUSH
6271: LD_INT 25
6273: PUSH
6274: LD_INT 4
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: PUSH
6281: EMPTY
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: LIST
6287: PUSH
6288: EMPTY
6289: LIST
6290: LIST
6291: LIST
6292: LIST
6293: PPUSH
6294: CALL_OW 69
6298: PUSH
6299: LD_EXP 14
6303: PUSH
6304: LD_EXP 33
6308: PUSH
6309: LD_EXP 23
6313: PUSH
6314: LD_EXP 24
6318: PUSH
6319: LD_EXP 25
6323: PUSH
6324: LD_EXP 26
6328: PUSH
6329: LD_EXP 27
6333: PUSH
6334: LD_EXP 28
6338: PUSH
6339: LD_EXP 29
6343: PUSH
6344: LD_EXP 30
6348: PUSH
6349: LD_EXP 16
6353: PUSH
6354: LD_EXP 31
6358: PUSH
6359: LD_EXP 32
6363: PUSH
6364: LD_EXP 34
6368: PUSH
6369: EMPTY
6370: LIST
6371: LIST
6372: LIST
6373: LIST
6374: LIST
6375: LIST
6376: LIST
6377: LIST
6378: LIST
6379: LIST
6380: LIST
6381: LIST
6382: LIST
6383: LIST
6384: DIFF
6385: ST_TO_ADDR
// if not result then
6386: LD_VAR 0 3
6390: NOT
6391: IFFALSE 6395
// exit ;
6393: GO 6423
// result := result [ 1 ] ;
6395: LD_ADDR_VAR 0 3
6399: PUSH
6400: LD_VAR 0 3
6404: PUSH
6405: LD_INT 1
6407: ARRAY
6408: ST_TO_ADDR
// Say ( result , dial ) ;
6409: LD_VAR 0 3
6413: PPUSH
6414: LD_VAR 0 2
6418: PPUSH
6419: CALL_OW 88
// end ;
6423: LD_VAR 0 3
6427: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
6428: LD_INT 0
6430: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
6431: LD_ADDR_VAR 0 4
6435: PUSH
6436: LD_INT 22
6438: PUSH
6439: LD_INT 1
6441: PUSH
6442: EMPTY
6443: LIST
6444: LIST
6445: PUSH
6446: LD_INT 26
6448: PUSH
6449: LD_VAR 0 1
6453: PUSH
6454: EMPTY
6455: LIST
6456: LIST
6457: PUSH
6458: LD_INT 2
6460: PUSH
6461: LD_INT 25
6463: PUSH
6464: LD_INT 1
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: PUSH
6471: LD_INT 25
6473: PUSH
6474: LD_INT 2
6476: PUSH
6477: EMPTY
6478: LIST
6479: LIST
6480: PUSH
6481: LD_INT 25
6483: PUSH
6484: LD_INT 3
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: PUSH
6491: LD_INT 25
6493: PUSH
6494: LD_INT 4
6496: PUSH
6497: EMPTY
6498: LIST
6499: LIST
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: LIST
6505: LIST
6506: LIST
6507: PUSH
6508: EMPTY
6509: LIST
6510: LIST
6511: LIST
6512: PPUSH
6513: CALL_OW 69
6517: PUSH
6518: LD_EXP 14
6522: PUSH
6523: LD_EXP 33
6527: PUSH
6528: LD_EXP 23
6532: PUSH
6533: LD_EXP 24
6537: PUSH
6538: LD_EXP 25
6542: PUSH
6543: LD_EXP 26
6547: PUSH
6548: LD_EXP 27
6552: PUSH
6553: LD_EXP 28
6557: PUSH
6558: LD_EXP 29
6562: PUSH
6563: LD_EXP 30
6567: PUSH
6568: LD_EXP 16
6572: PUSH
6573: LD_EXP 31
6577: PUSH
6578: LD_EXP 32
6582: PUSH
6583: LD_EXP 34
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: LIST
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: PUSH
6604: LD_VAR 0 3
6608: ADD
6609: DIFF
6610: ST_TO_ADDR
// if not result then
6611: LD_VAR 0 4
6615: NOT
6616: IFFALSE 6620
// exit ;
6618: GO 6648
// result := result [ 1 ] ;
6620: LD_ADDR_VAR 0 4
6624: PUSH
6625: LD_VAR 0 4
6629: PUSH
6630: LD_INT 1
6632: ARRAY
6633: ST_TO_ADDR
// Say ( result , dial ) ;
6634: LD_VAR 0 4
6638: PPUSH
6639: LD_VAR 0 2
6643: PPUSH
6644: CALL_OW 88
// end ;
6648: LD_VAR 0 4
6652: RET
// export function Patrol ( unit , path , flags ) ; var i , x , y , c , p , station , tmp_path , status , enemy , e , spot_dist , safe_place , chase_range , need_refuel ; begin
6653: LD_INT 0
6655: PPUSH
6656: PPUSH
6657: PPUSH
6658: PPUSH
6659: PPUSH
6660: PPUSH
6661: PPUSH
6662: PPUSH
6663: PPUSH
6664: PPUSH
6665: PPUSH
6666: PPUSH
6667: PPUSH
6668: PPUSH
6669: PPUSH
// if not unit or not path or GetType ( unit ) = unit_building then
6670: LD_VAR 0 1
6674: NOT
6675: PUSH
6676: LD_VAR 0 2
6680: NOT
6681: OR
6682: PUSH
6683: LD_VAR 0 1
6687: PPUSH
6688: CALL_OW 247
6692: PUSH
6693: LD_INT 3
6695: EQUAL
6696: OR
6697: IFFALSE 6701
// exit ;
6699: GO 8240
// for i = path downto 1 do
6701: LD_ADDR_VAR 0 5
6705: PUSH
6706: DOUBLE
6707: LD_VAR 0 2
6711: INC
6712: ST_TO_ADDR
6713: LD_INT 1
6715: PUSH
6716: FOR_DOWNTO
6717: IFFALSE 6778
// begin if not ValidHex ( path [ i ] [ 1 ] , path [ i ] [ 2 ] ) then
6719: LD_VAR 0 2
6723: PUSH
6724: LD_VAR 0 5
6728: ARRAY
6729: PUSH
6730: LD_INT 1
6732: ARRAY
6733: PPUSH
6734: LD_VAR 0 2
6738: PUSH
6739: LD_VAR 0 5
6743: ARRAY
6744: PUSH
6745: LD_INT 2
6747: ARRAY
6748: PPUSH
6749: CALL_OW 488
6753: NOT
6754: IFFALSE 6776
// path = Delete ( path , i ) ;
6756: LD_ADDR_VAR 0 2
6760: PUSH
6761: LD_VAR 0 2
6765: PPUSH
6766: LD_VAR 0 5
6770: PPUSH
6771: CALL_OW 3
6775: ST_TO_ADDR
// end ;
6776: GO 6716
6778: POP
6779: POP
// if not path then
6780: LD_VAR 0 2
6784: NOT
6785: IFFALSE 6789
// exit ;
6787: GO 8240
// tmp_path := [ ] ;
6789: LD_ADDR_VAR 0 11
6793: PUSH
6794: EMPTY
6795: ST_TO_ADDR
// if flags then
6796: LD_VAR 0 3
6800: IFFALSE 6874
// begin if flags [ 1 ] then
6802: LD_VAR 0 3
6806: PUSH
6807: LD_INT 1
6809: ARRAY
6810: IFFALSE 6826
// safe_place = flags [ 1 ] ;
6812: LD_ADDR_VAR 0 16
6816: PUSH
6817: LD_VAR 0 3
6821: PUSH
6822: LD_INT 1
6824: ARRAY
6825: ST_TO_ADDR
// if flags [ 2 ] then
6826: LD_VAR 0 3
6830: PUSH
6831: LD_INT 2
6833: ARRAY
6834: IFFALSE 6850
// spot_dist = flags [ 2 ] ;
6836: LD_ADDR_VAR 0 15
6840: PUSH
6841: LD_VAR 0 3
6845: PUSH
6846: LD_INT 2
6848: ARRAY
6849: ST_TO_ADDR
// if flags [ 3 ] then
6850: LD_VAR 0 3
6854: PUSH
6855: LD_INT 3
6857: ARRAY
6858: IFFALSE 6874
// chase_range = flags [ 3 ] ;
6860: LD_ADDR_VAR 0 17
6864: PUSH
6865: LD_VAR 0 3
6869: PUSH
6870: LD_INT 3
6872: ARRAY
6873: ST_TO_ADDR
// end ; if not chase_range then
6874: LD_VAR 0 17
6878: NOT
6879: IFFALSE 6889
// chase_range = 8 ;
6881: LD_ADDR_VAR 0 17
6885: PUSH
6886: LD_INT 8
6888: ST_TO_ADDR
// if not spot_dist then
6889: LD_VAR 0 15
6893: NOT
6894: IFFALSE 6904
// spot_dist := 8 ;
6896: LD_ADDR_VAR 0 15
6900: PUSH
6901: LD_INT 8
6903: ST_TO_ADDR
// need_refuel = ( GetType ( unit ) = unit_vehicle and GetEngine ( unit ) <> engine_siberite ) ;
6904: LD_ADDR_VAR 0 18
6908: PUSH
6909: LD_VAR 0 1
6913: PPUSH
6914: CALL_OW 247
6918: PUSH
6919: LD_INT 2
6921: EQUAL
6922: PUSH
6923: LD_VAR 0 1
6927: PPUSH
6928: CALL_OW 262
6932: PUSH
6933: LD_INT 3
6935: NONEQUAL
6936: AND
6937: ST_TO_ADDR
// status = 1 ;
6938: LD_ADDR_VAR 0 12
6942: PUSH
6943: LD_INT 1
6945: ST_TO_ADDR
// tmp_path = [ 1 , path [ 1 ] ] ;
6946: LD_ADDR_VAR 0 11
6950: PUSH
6951: LD_INT 1
6953: PUSH
6954: LD_VAR 0 2
6958: PUSH
6959: LD_INT 1
6961: ARRAY
6962: PUSH
6963: EMPTY
6964: LIST
6965: LIST
6966: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6967: LD_INT 35
6969: PPUSH
6970: CALL_OW 67
// if need_refuel and GetFuel ( unit ) < 20 then
6974: LD_VAR 0 18
6978: PUSH
6979: LD_VAR 0 1
6983: PPUSH
6984: CALL_OW 261
6988: PUSH
6989: LD_INT 20
6991: LESS
6992: AND
6993: IFFALSE 7186
// begin station := FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_oil_mine ] , [ f_btype , b_factory ] ] ] ) ;
6995: LD_ADDR_VAR 0 10
6999: PUSH
7000: LD_INT 22
7002: PUSH
7003: LD_VAR 0 1
7007: PPUSH
7008: CALL_OW 255
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: PUSH
7017: LD_INT 2
7019: PUSH
7020: LD_INT 30
7022: PUSH
7023: LD_INT 0
7025: PUSH
7026: EMPTY
7027: LIST
7028: LIST
7029: PUSH
7030: LD_INT 30
7032: PUSH
7033: LD_INT 1
7035: PUSH
7036: EMPTY
7037: LIST
7038: LIST
7039: PUSH
7040: LD_INT 30
7042: PUSH
7043: LD_INT 29
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: PUSH
7050: LD_INT 30
7052: PUSH
7053: LD_INT 3
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: LIST
7064: LIST
7065: LIST
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: PPUSH
7071: CALL_OW 69
7075: ST_TO_ADDR
// if not station then
7076: LD_VAR 0 10
7080: NOT
7081: IFFALSE 7097
// begin SetFuel ( unit , 40 ) ;
7083: LD_VAR 0 1
7087: PPUSH
7088: LD_INT 40
7090: PPUSH
7091: CALL_OW 240
// continue ;
7095: GO 6967
// end ; status := 6 ;
7097: LD_ADDR_VAR 0 12
7101: PUSH
7102: LD_INT 6
7104: ST_TO_ADDR
// station := NearestUnitToUnit ( station , unit ) ;
7105: LD_ADDR_VAR 0 10
7109: PUSH
7110: LD_VAR 0 10
7114: PPUSH
7115: LD_VAR 0 1
7119: PPUSH
7120: CALL_OW 74
7124: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7125: LD_INT 35
7127: PPUSH
7128: CALL_OW 67
// ComMoveUnit ( unit , station ) ;
7132: LD_VAR 0 1
7136: PPUSH
7137: LD_VAR 0 10
7141: PPUSH
7142: CALL_OW 112
// until GetDistUnits ( unit , station ) < 6 ;
7146: LD_VAR 0 1
7150: PPUSH
7151: LD_VAR 0 10
7155: PPUSH
7156: CALL_OW 296
7160: PUSH
7161: LD_INT 6
7163: LESS
7164: IFFALSE 7125
// SetFuel ( unit , 100 ) ;
7166: LD_VAR 0 1
7170: PPUSH
7171: LD_INT 100
7173: PPUSH
7174: CALL_OW 240
// status := 5 ;
7178: LD_ADDR_VAR 0 12
7182: PUSH
7183: LD_INT 5
7185: ST_TO_ADDR
// end ; if status = 1 then
7186: LD_VAR 0 12
7190: PUSH
7191: LD_INT 1
7193: EQUAL
7194: IFFALSE 7570
// begin enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] , [ f_dist , unit , spot_dist ] , [ f_see , 1 ] ] ) ;
7196: LD_ADDR_VAR 0 13
7200: PUSH
7201: LD_INT 81
7203: PUSH
7204: LD_VAR 0 1
7208: PPUSH
7209: CALL_OW 255
7213: PUSH
7214: EMPTY
7215: LIST
7216: LIST
7217: PUSH
7218: LD_INT 3
7220: PUSH
7221: LD_INT 21
7223: PUSH
7224: LD_INT 3
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: PUSH
7235: LD_INT 91
7237: PUSH
7238: LD_VAR 0 1
7242: PUSH
7243: LD_VAR 0 15
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: LIST
7252: PUSH
7253: LD_INT 101
7255: PUSH
7256: LD_INT 1
7258: PUSH
7259: EMPTY
7260: LIST
7261: LIST
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: LIST
7267: LIST
7268: PPUSH
7269: CALL_OW 69
7273: ST_TO_ADDR
// for i in enemy do
7274: LD_ADDR_VAR 0 5
7278: PUSH
7279: LD_VAR 0 13
7283: PUSH
7284: FOR_IN
7285: IFFALSE 7316
// if IsInvisible ( i ) then
7287: LD_VAR 0 5
7291: PPUSH
7292: CALL_OW 571
7296: IFFALSE 7314
// enemy := enemy diff i ;
7298: LD_ADDR_VAR 0 13
7302: PUSH
7303: LD_VAR 0 13
7307: PUSH
7308: LD_VAR 0 5
7312: DIFF
7313: ST_TO_ADDR
7314: GO 7284
7316: POP
7317: POP
// if enemy then
7318: LD_VAR 0 13
7322: IFFALSE 7372
// begin SetRememberedX ( unit , GetX ( unit ) ) ;
7324: LD_VAR 0 1
7328: PPUSH
7329: LD_VAR 0 1
7333: PPUSH
7334: CALL_OW 250
7338: PPUSH
7339: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
7343: LD_VAR 0 1
7347: PPUSH
7348: LD_VAR 0 1
7352: PPUSH
7353: CALL_OW 251
7357: PPUSH
7358: CALL_OW 232
// status = 2 ;
7362: LD_ADDR_VAR 0 12
7366: PUSH
7367: LD_INT 2
7369: ST_TO_ADDR
// end else
7370: GO 7570
// begin if IsAt ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) or not HasTask ( unit ) then
7372: LD_VAR 0 1
7376: PPUSH
7377: LD_VAR 0 11
7381: PUSH
7382: LD_INT 2
7384: ARRAY
7385: PUSH
7386: LD_INT 1
7388: ARRAY
7389: PPUSH
7390: LD_VAR 0 11
7394: PUSH
7395: LD_INT 2
7397: ARRAY
7398: PUSH
7399: LD_INT 2
7401: ARRAY
7402: PPUSH
7403: CALL_OW 307
7407: PUSH
7408: LD_VAR 0 1
7412: PPUSH
7413: CALL_OW 314
7417: NOT
7418: OR
7419: IFFALSE 7570
// begin wait ( 0 0$2 ) ;
7421: LD_INT 70
7423: PPUSH
7424: CALL_OW 67
// if tmp_path [ 1 ] + 1 > path then
7428: LD_VAR 0 11
7432: PUSH
7433: LD_INT 1
7435: ARRAY
7436: PUSH
7437: LD_INT 1
7439: PLUS
7440: PUSH
7441: LD_VAR 0 2
7445: GREATER
7446: IFFALSE 7471
// tmp_path := Replace ( tmp_path , 1 , 1 ) else
7448: LD_ADDR_VAR 0 11
7452: PUSH
7453: LD_VAR 0 11
7457: PPUSH
7458: LD_INT 1
7460: PPUSH
7461: LD_INT 1
7463: PPUSH
7464: CALL_OW 1
7468: ST_TO_ADDR
7469: GO 7502
// tmp_path := Replace ( tmp_path , 1 , tmp_path [ 1 ] + 1 ) ;
7471: LD_ADDR_VAR 0 11
7475: PUSH
7476: LD_VAR 0 11
7480: PPUSH
7481: LD_INT 1
7483: PPUSH
7484: LD_VAR 0 11
7488: PUSH
7489: LD_INT 1
7491: ARRAY
7492: PUSH
7493: LD_INT 1
7495: PLUS
7496: PPUSH
7497: CALL_OW 1
7501: ST_TO_ADDR
// tmp_path := Replace ( tmp_path , 2 , path [ tmp_path [ 1 ] ] ) ;
7502: LD_ADDR_VAR 0 11
7506: PUSH
7507: LD_VAR 0 11
7511: PPUSH
7512: LD_INT 2
7514: PPUSH
7515: LD_VAR 0 2
7519: PUSH
7520: LD_VAR 0 11
7524: PUSH
7525: LD_INT 1
7527: ARRAY
7528: ARRAY
7529: PPUSH
7530: CALL_OW 1
7534: ST_TO_ADDR
// ComAgressiveMove ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) ;
7535: LD_VAR 0 1
7539: PPUSH
7540: LD_VAR 0 11
7544: PUSH
7545: LD_INT 2
7547: ARRAY
7548: PUSH
7549: LD_INT 1
7551: ARRAY
7552: PPUSH
7553: LD_VAR 0 11
7557: PUSH
7558: LD_INT 2
7560: ARRAY
7561: PUSH
7562: LD_INT 2
7564: ARRAY
7565: PPUSH
7566: CALL_OW 114
// end ; end ; end ; if status = 2 then
7570: LD_VAR 0 12
7574: PUSH
7575: LD_INT 2
7577: EQUAL
7578: IFFALSE 7799
// begin if GetLives ( unit ) < 650 and safe_place then
7580: LD_VAR 0 1
7584: PPUSH
7585: CALL_OW 256
7589: PUSH
7590: LD_INT 650
7592: LESS
7593: PUSH
7594: LD_VAR 0 16
7598: AND
7599: IFFALSE 7611
// begin status = 3 ;
7601: LD_ADDR_VAR 0 12
7605: PUSH
7606: LD_INT 3
7608: ST_TO_ADDR
// continue ;
7609: GO 6967
// end ; x := GetRememberedX ( unit ) ;
7611: LD_ADDR_VAR 0 6
7615: PUSH
7616: LD_VAR 0 1
7620: PPUSH
7621: CALL_OW 252
7625: ST_TO_ADDR
// y := GetRememberedY ( unit ) ;
7626: LD_ADDR_VAR 0 7
7630: PUSH
7631: LD_VAR 0 1
7635: PPUSH
7636: CALL_OW 253
7640: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_distxy , x , y , spot_dist ] , [ f_see , 1 ] ] ) ;
7641: LD_ADDR_VAR 0 13
7645: PUSH
7646: LD_INT 81
7648: PUSH
7649: LD_VAR 0 1
7653: PPUSH
7654: CALL_OW 255
7658: PUSH
7659: EMPTY
7660: LIST
7661: LIST
7662: PUSH
7663: LD_INT 92
7665: PUSH
7666: LD_VAR 0 6
7670: PUSH
7671: LD_VAR 0 7
7675: PUSH
7676: LD_VAR 0 15
7680: PUSH
7681: EMPTY
7682: LIST
7683: LIST
7684: LIST
7685: LIST
7686: PUSH
7687: LD_INT 101
7689: PUSH
7690: LD_INT 1
7692: PUSH
7693: EMPTY
7694: LIST
7695: LIST
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: LIST
7701: PPUSH
7702: CALL_OW 69
7706: ST_TO_ADDR
// if enemy then
7707: LD_VAR 0 13
7711: IFFALSE 7782
// begin e := NearestUnitToUnit ( enemy , unit ) ;
7713: LD_ADDR_VAR 0 14
7717: PUSH
7718: LD_VAR 0 13
7722: PPUSH
7723: LD_VAR 0 1
7727: PPUSH
7728: CALL_OW 74
7732: ST_TO_ADDR
// if GetDistUnitXY ( e , x , y ) < spot_dist + chase_range then
7733: LD_VAR 0 14
7737: PPUSH
7738: LD_VAR 0 6
7742: PPUSH
7743: LD_VAR 0 7
7747: PPUSH
7748: CALL_OW 297
7752: PUSH
7753: LD_VAR 0 15
7757: PUSH
7758: LD_VAR 0 17
7762: PLUS
7763: LESS
7764: IFFALSE 7780
// ComAttackUnit ( unit , e ) ;
7766: LD_VAR 0 1
7770: PPUSH
7771: LD_VAR 0 14
7775: PPUSH
7776: CALL_OW 115
// end else
7780: GO 7799
// begin ComStop ( unit ) ;
7782: LD_VAR 0 1
7786: PPUSH
7787: CALL_OW 141
// status = 5 ;
7791: LD_ADDR_VAR 0 12
7795: PUSH
7796: LD_INT 5
7798: ST_TO_ADDR
// end ; end ; if status = 3 and safe_place then
7799: LD_VAR 0 12
7803: PUSH
7804: LD_INT 3
7806: EQUAL
7807: PUSH
7808: LD_VAR 0 16
7812: AND
7813: IFFALSE 7899
// begin repeat ComMoveXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) ;
7815: LD_VAR 0 1
7819: PPUSH
7820: LD_VAR 0 16
7824: PUSH
7825: LD_INT 1
7827: ARRAY
7828: PPUSH
7829: LD_VAR 0 16
7833: PUSH
7834: LD_INT 2
7836: ARRAY
7837: PPUSH
7838: CALL_OW 111
// wait ( 0 0$1 ) ;
7842: LD_INT 35
7844: PPUSH
7845: CALL_OW 67
// until GetDistUnitXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) < 4 ;
7849: LD_VAR 0 1
7853: PPUSH
7854: LD_VAR 0 16
7858: PUSH
7859: LD_INT 1
7861: ARRAY
7862: PPUSH
7863: LD_VAR 0 16
7867: PUSH
7868: LD_INT 2
7870: ARRAY
7871: PPUSH
7872: CALL_OW 297
7876: PUSH
7877: LD_INT 4
7879: LESS
7880: IFFALSE 7815
// ComStop ( unit ) ;
7882: LD_VAR 0 1
7886: PPUSH
7887: CALL_OW 141
// status = 4 ;
7891: LD_ADDR_VAR 0 12
7895: PUSH
7896: LD_INT 4
7898: ST_TO_ADDR
// end ; if status = 4 then
7899: LD_VAR 0 12
7903: PUSH
7904: LD_INT 4
7906: EQUAL
7907: IFFALSE 7939
// begin repeat wait ( 0 0$1 ) ;
7909: LD_INT 35
7911: PPUSH
7912: CALL_OW 67
// until GetLives ( unit ) = 1000 ;
7916: LD_VAR 0 1
7920: PPUSH
7921: CALL_OW 256
7925: PUSH
7926: LD_INT 1000
7928: EQUAL
7929: IFFALSE 7909
// status = 5 ;
7931: LD_ADDR_VAR 0 12
7935: PUSH
7936: LD_INT 5
7938: ST_TO_ADDR
// end ; if status = 5 then
7939: LD_VAR 0 12
7943: PUSH
7944: LD_INT 5
7946: EQUAL
7947: IFFALSE 8229
// begin p := 999 ;
7949: LD_ADDR_VAR 0 9
7953: PUSH
7954: LD_INT 999
7956: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ] ;
7957: LD_ADDR_VAR 0 14
7961: PUSH
7962: LD_VAR 0 11
7966: PUSH
7967: LD_INT 2
7969: ARRAY
7970: PUSH
7971: LD_INT 1
7973: ARRAY
7974: PUSH
7975: LD_VAR 0 11
7979: PUSH
7980: LD_INT 2
7982: ARRAY
7983: PUSH
7984: LD_INT 2
7986: ARRAY
7987: PUSH
7988: EMPTY
7989: LIST
7990: LIST
7991: ST_TO_ADDR
// c := 1 ;
7992: LD_ADDR_VAR 0 8
7996: PUSH
7997: LD_INT 1
7999: ST_TO_ADDR
// for i = 1 to tmp_path [ 2 ] div 2 do
8000: LD_ADDR_VAR 0 5
8004: PUSH
8005: DOUBLE
8006: LD_INT 1
8008: DEC
8009: ST_TO_ADDR
8010: LD_VAR 0 11
8014: PUSH
8015: LD_INT 2
8017: ARRAY
8018: PUSH
8019: LD_INT 2
8021: DIV
8022: PUSH
8023: FOR_TO
8024: IFFALSE 8156
// begin x := GetDistUnitXY ( unit , tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ) ;
8026: LD_ADDR_VAR 0 6
8030: PUSH
8031: LD_VAR 0 1
8035: PPUSH
8036: LD_VAR 0 11
8040: PUSH
8041: LD_INT 2
8043: ARRAY
8044: PUSH
8045: LD_VAR 0 8
8049: ARRAY
8050: PPUSH
8051: LD_VAR 0 11
8055: PUSH
8056: LD_INT 2
8058: ARRAY
8059: PUSH
8060: LD_VAR 0 8
8064: PUSH
8065: LD_INT 1
8067: PLUS
8068: ARRAY
8069: PPUSH
8070: CALL_OW 297
8074: ST_TO_ADDR
// if x < p then
8075: LD_VAR 0 6
8079: PUSH
8080: LD_VAR 0 9
8084: LESS
8085: IFFALSE 8140
// begin p := x ;
8087: LD_ADDR_VAR 0 9
8091: PUSH
8092: LD_VAR 0 6
8096: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ] ;
8097: LD_ADDR_VAR 0 14
8101: PUSH
8102: LD_VAR 0 11
8106: PUSH
8107: LD_INT 2
8109: ARRAY
8110: PUSH
8111: LD_VAR 0 8
8115: ARRAY
8116: PUSH
8117: LD_VAR 0 11
8121: PUSH
8122: LD_INT 2
8124: ARRAY
8125: PUSH
8126: LD_VAR 0 8
8130: PUSH
8131: LD_INT 1
8133: PLUS
8134: ARRAY
8135: PUSH
8136: EMPTY
8137: LIST
8138: LIST
8139: ST_TO_ADDR
// end ; c = c + 2 ;
8140: LD_ADDR_VAR 0 8
8144: PUSH
8145: LD_VAR 0 8
8149: PUSH
8150: LD_INT 2
8152: PLUS
8153: ST_TO_ADDR
// end ;
8154: GO 8023
8156: POP
8157: POP
// repeat ComMoveXY ( unit , e [ 1 ] , e [ 2 ] ) ;
8158: LD_VAR 0 1
8162: PPUSH
8163: LD_VAR 0 14
8167: PUSH
8168: LD_INT 1
8170: ARRAY
8171: PPUSH
8172: LD_VAR 0 14
8176: PUSH
8177: LD_INT 2
8179: ARRAY
8180: PPUSH
8181: CALL_OW 111
// wait ( 0 0$1 ) ;
8185: LD_INT 35
8187: PPUSH
8188: CALL_OW 67
// until IsAt ( unit , e [ 1 ] , e [ 2 ] ) ;
8192: LD_VAR 0 1
8196: PPUSH
8197: LD_VAR 0 14
8201: PUSH
8202: LD_INT 1
8204: ARRAY
8205: PPUSH
8206: LD_VAR 0 14
8210: PUSH
8211: LD_INT 2
8213: ARRAY
8214: PPUSH
8215: CALL_OW 307
8219: IFFALSE 8158
// status = 1 ;
8221: LD_ADDR_VAR 0 12
8225: PUSH
8226: LD_INT 1
8228: ST_TO_ADDR
// end ; until IsDead ( unit ) ;
8229: LD_VAR 0 1
8233: PPUSH
8234: CALL_OW 301
8238: IFFALSE 6967
// end ;
8240: LD_VAR 0 4
8244: RET
// export function Talk ( units , type , sequence , sex , class , id , order_id ) ; var i , unit , tmp , unit_id , dialog_id , sex_id , class_id ; begin
8245: LD_INT 0
8247: PPUSH
8248: PPUSH
8249: PPUSH
8250: PPUSH
8251: PPUSH
8252: PPUSH
8253: PPUSH
8254: PPUSH
// if not units or not sequence or not sex in [ sex_male , sex_female , 0 ] or not id or not order_id then
8255: LD_VAR 0 1
8259: NOT
8260: PUSH
8261: LD_VAR 0 3
8265: NOT
8266: OR
8267: PUSH
8268: LD_VAR 0 4
8272: PUSH
8273: LD_INT 1
8275: PUSH
8276: LD_INT 2
8278: PUSH
8279: LD_INT 0
8281: PUSH
8282: EMPTY
8283: LIST
8284: LIST
8285: LIST
8286: IN
8287: NOT
8288: OR
8289: PUSH
8290: LD_VAR 0 6
8294: NOT
8295: OR
8296: PUSH
8297: LD_VAR 0 7
8301: NOT
8302: OR
8303: IFFALSE 8307
// exit ;
8305: GO 8698
// sex_id :=  ;
8307: LD_ADDR_VAR 0 14
8311: PUSH
8312: LD_STRING 
8314: ST_TO_ADDR
// case class of 1 :
8315: LD_VAR 0 5
8319: PUSH
8320: LD_INT 1
8322: DOUBLE
8323: EQUAL
8324: IFTRUE 8328
8326: GO 8339
8328: POP
// class_id := Sol ; 2 :
8329: LD_ADDR_VAR 0 15
8333: PUSH
8334: LD_STRING Sol
8336: ST_TO_ADDR
8337: GO 8397
8339: LD_INT 2
8341: DOUBLE
8342: EQUAL
8343: IFTRUE 8347
8345: GO 8358
8347: POP
// class_id := Eng ; 3 :
8348: LD_ADDR_VAR 0 15
8352: PUSH
8353: LD_STRING Eng
8355: ST_TO_ADDR
8356: GO 8397
8358: LD_INT 3
8360: DOUBLE
8361: EQUAL
8362: IFTRUE 8366
8364: GO 8377
8366: POP
// class_id := Mech ; 4 :
8367: LD_ADDR_VAR 0 15
8371: PUSH
8372: LD_STRING Mech
8374: ST_TO_ADDR
8375: GO 8397
8377: LD_INT 4
8379: DOUBLE
8380: EQUAL
8381: IFTRUE 8385
8383: GO 8396
8385: POP
// class_id := Sci ; end ;
8386: LD_ADDR_VAR 0 15
8390: PUSH
8391: LD_STRING Sci
8393: ST_TO_ADDR
8394: GO 8397
8396: POP
// tmp := UnitFilter ( units , [ f_class , class ] ) ;
8397: LD_ADDR_VAR 0 11
8401: PUSH
8402: LD_VAR 0 1
8406: PPUSH
8407: LD_INT 25
8409: PUSH
8410: LD_VAR 0 5
8414: PUSH
8415: EMPTY
8416: LIST
8417: LIST
8418: PPUSH
8419: CALL_OW 72
8423: ST_TO_ADDR
// if tmp then
8424: LD_VAR 0 11
8428: IFFALSE 8440
// units := tmp ;
8430: LD_ADDR_VAR 0 1
8434: PUSH
8435: LD_VAR 0 11
8439: ST_TO_ADDR
// if sex then
8440: LD_VAR 0 4
8444: IFFALSE 8500
// begin if sex = sex_female then
8446: LD_VAR 0 4
8450: PUSH
8451: LD_INT 2
8453: EQUAL
8454: IFFALSE 8464
// sex_id := F ;
8456: LD_ADDR_VAR 0 14
8460: PUSH
8461: LD_STRING F
8463: ST_TO_ADDR
// units := UnitFilter ( units , [ f_sex , sex ] ) ;
8464: LD_ADDR_VAR 0 1
8468: PUSH
8469: LD_VAR 0 1
8473: PPUSH
8474: LD_INT 26
8476: PUSH
8477: LD_VAR 0 4
8481: PUSH
8482: EMPTY
8483: LIST
8484: LIST
8485: PPUSH
8486: CALL_OW 72
8490: ST_TO_ADDR
// if not units then
8491: LD_VAR 0 1
8495: NOT
8496: IFFALSE 8500
// exit ;
8498: GO 8698
// end ; unit_id := id ;
8500: LD_ADDR_VAR 0 12
8504: PUSH
8505: LD_VAR 0 6
8509: ST_TO_ADDR
// if unit_id > units then
8510: LD_VAR 0 12
8514: PUSH
8515: LD_VAR 0 1
8519: GREATER
8520: IFFALSE 8530
// unit_id := 1 ;
8522: LD_ADDR_VAR 0 12
8526: PUSH
8527: LD_INT 1
8529: ST_TO_ADDR
// if not units [ unit_id ] then
8530: LD_VAR 0 1
8534: PUSH
8535: LD_VAR 0 12
8539: ARRAY
8540: NOT
8541: IFFALSE 8545
// exit ;
8543: GO 8698
// unit := units [ unit_id ] ;
8545: LD_ADDR_VAR 0 10
8549: PUSH
8550: LD_VAR 0 1
8554: PUSH
8555: LD_VAR 0 12
8559: ARRAY
8560: ST_TO_ADDR
// dialog_id := D & sequence & - & sex_id & class_id & id & - & order_id ;
8561: LD_ADDR_VAR 0 13
8565: PUSH
8566: LD_STRING D
8568: PUSH
8569: LD_VAR 0 3
8573: STR
8574: PUSH
8575: LD_STRING -
8577: STR
8578: PUSH
8579: LD_VAR 0 14
8583: STR
8584: PUSH
8585: LD_VAR 0 15
8589: STR
8590: PUSH
8591: LD_VAR 0 6
8595: STR
8596: PUSH
8597: LD_STRING -
8599: STR
8600: PUSH
8601: LD_VAR 0 7
8605: STR
8606: ST_TO_ADDR
// case type of 0 :
8607: LD_VAR 0 2
8611: PUSH
8612: LD_INT 0
8614: DOUBLE
8615: EQUAL
8616: IFTRUE 8620
8618: GO 8637
8620: POP
// Say ( unit , dialog_id ) ; 1 :
8621: LD_VAR 0 10
8625: PPUSH
8626: LD_VAR 0 13
8630: PPUSH
8631: CALL_OW 88
8635: GO 8688
8637: LD_INT 1
8639: DOUBLE
8640: EQUAL
8641: IFTRUE 8645
8643: GO 8662
8645: POP
// SayRadio ( unit , dialog_id ) ; 2 :
8646: LD_VAR 0 10
8650: PPUSH
8651: LD_VAR 0 13
8655: PPUSH
8656: CALL_OW 94
8660: GO 8688
8662: LD_INT 2
8664: DOUBLE
8665: EQUAL
8666: IFTRUE 8670
8668: GO 8687
8670: POP
// ForceSay ( unit , dialog_id ) ; end ;
8671: LD_VAR 0 10
8675: PPUSH
8676: LD_VAR 0 13
8680: PPUSH
8681: CALL_OW 91
8685: GO 8688
8687: POP
// result := unit ;
8688: LD_ADDR_VAR 0 8
8692: PUSH
8693: LD_VAR 0 10
8697: ST_TO_ADDR
// end ;
8698: LD_VAR 0 8
8702: RET
// export function IsNearbyEntrance ( unit , building , distance ) ; var i , entrance ; begin
8703: LD_INT 0
8705: PPUSH
8706: PPUSH
8707: PPUSH
// result := false ;
8708: LD_ADDR_VAR 0 4
8712: PUSH
8713: LD_INT 0
8715: ST_TO_ADDR
// if not unit or not building or IsInUnit ( unit ) then
8716: LD_VAR 0 1
8720: NOT
8721: PUSH
8722: LD_VAR 0 2
8726: NOT
8727: OR
8728: PUSH
8729: LD_VAR 0 1
8733: PPUSH
8734: CALL_OW 310
8738: OR
8739: IFFALSE 8743
// exit ;
8741: GO 8947
// if distance < 0 then
8743: LD_VAR 0 3
8747: PUSH
8748: LD_INT 0
8750: LESS
8751: IFFALSE 8761
// distance := 0 ;
8753: LD_ADDR_VAR 0 3
8757: PUSH
8758: LD_INT 0
8760: ST_TO_ADDR
// entrance := GetBuildingHexes ( GetBType ( building ) , GetX ( building ) , GetY ( building ) , GetDir ( building ) , GetNation ( building ) , 1 ) ;
8761: LD_ADDR_VAR 0 6
8765: PUSH
8766: LD_VAR 0 2
8770: PPUSH
8771: CALL_OW 266
8775: PPUSH
8776: LD_VAR 0 2
8780: PPUSH
8781: CALL_OW 250
8785: PPUSH
8786: LD_VAR 0 2
8790: PPUSH
8791: CALL_OW 251
8795: PPUSH
8796: LD_VAR 0 2
8800: PPUSH
8801: CALL_OW 254
8805: PPUSH
8806: LD_VAR 0 2
8810: PPUSH
8811: CALL_OW 248
8815: PPUSH
8816: LD_INT 1
8818: PPUSH
8819: CALL 45842 0 6
8823: ST_TO_ADDR
// if not entrance then
8824: LD_VAR 0 6
8828: NOT
8829: IFFALSE 8833
// exit ;
8831: GO 8947
// for i in entrance do
8833: LD_ADDR_VAR 0 5
8837: PUSH
8838: LD_VAR 0 6
8842: PUSH
8843: FOR_IN
8844: IFFALSE 8945
// begin if not distance then
8846: LD_VAR 0 3
8850: NOT
8851: IFFALSE 8896
// begin if IsAt ( unit , i [ 1 ] , i [ 2 ] ) then
8853: LD_VAR 0 1
8857: PPUSH
8858: LD_VAR 0 5
8862: PUSH
8863: LD_INT 1
8865: ARRAY
8866: PPUSH
8867: LD_VAR 0 5
8871: PUSH
8872: LD_INT 2
8874: ARRAY
8875: PPUSH
8876: CALL_OW 307
8880: IFFALSE 8894
// begin result := true ;
8882: LD_ADDR_VAR 0 4
8886: PUSH
8887: LD_INT 1
8889: ST_TO_ADDR
// exit ;
8890: POP
8891: POP
8892: GO 8947
// end ; end else
8894: GO 8943
// begin if GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) <= distance then
8896: LD_VAR 0 1
8900: PPUSH
8901: LD_VAR 0 5
8905: PUSH
8906: LD_INT 1
8908: ARRAY
8909: PPUSH
8910: LD_VAR 0 5
8914: PUSH
8915: LD_INT 2
8917: ARRAY
8918: PPUSH
8919: CALL_OW 297
8923: PUSH
8924: LD_VAR 0 3
8928: LESSEQUAL
8929: IFFALSE 8943
// begin result := true ;
8931: LD_ADDR_VAR 0 4
8935: PUSH
8936: LD_INT 1
8938: ST_TO_ADDR
// exit ;
8939: POP
8940: POP
8941: GO 8947
// end ; end ; end ;
8943: GO 8843
8945: POP
8946: POP
// end ;
8947: LD_VAR 0 4
8951: RET
// export function CanSpot ( unit , unit2 ) ; var i , building ; begin
8952: LD_INT 0
8954: PPUSH
8955: PPUSH
8956: PPUSH
// result := false ;
8957: LD_ADDR_VAR 0 3
8961: PUSH
8962: LD_INT 0
8964: ST_TO_ADDR
// if not unit or not unit2 or not IsOk ( unit ) or not IsOk ( unit2 ) then
8965: LD_VAR 0 1
8969: NOT
8970: PUSH
8971: LD_VAR 0 2
8975: NOT
8976: OR
8977: PUSH
8978: LD_VAR 0 1
8982: PPUSH
8983: CALL_OW 302
8987: NOT
8988: OR
8989: PUSH
8990: LD_VAR 0 2
8994: PPUSH
8995: CALL_OW 302
8999: NOT
9000: OR
9001: IFFALSE 9005
// exit ;
9003: GO 9166
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] ] ) , unit ) ) < 8 then
9005: LD_VAR 0 1
9009: PPUSH
9010: LD_INT 81
9012: PUSH
9013: LD_VAR 0 1
9017: PPUSH
9018: CALL_OW 255
9022: PUSH
9023: EMPTY
9024: LIST
9025: LIST
9026: PUSH
9027: LD_INT 3
9029: PUSH
9030: LD_INT 21
9032: PUSH
9033: LD_INT 3
9035: PUSH
9036: EMPTY
9037: LIST
9038: LIST
9039: PUSH
9040: EMPTY
9041: LIST
9042: LIST
9043: PUSH
9044: EMPTY
9045: LIST
9046: LIST
9047: PPUSH
9048: CALL_OW 69
9052: PPUSH
9053: LD_VAR 0 1
9057: PPUSH
9058: CALL_OW 74
9062: PPUSH
9063: CALL_OW 296
9067: PUSH
9068: LD_INT 8
9070: LESS
9071: IFFALSE 9075
// exit ;
9073: GO 9166
// building := IsInUnit ( unit2 ) ;
9075: LD_ADDR_VAR 0 5
9079: PUSH
9080: LD_VAR 0 2
9084: PPUSH
9085: CALL_OW 310
9089: ST_TO_ADDR
// if building then
9090: LD_VAR 0 5
9094: IFFALSE 9121
// result := IsNearbyEntrance ( unit , building , 2 ) else
9096: LD_ADDR_VAR 0 3
9100: PUSH
9101: LD_VAR 0 1
9105: PPUSH
9106: LD_VAR 0 5
9110: PPUSH
9111: LD_INT 2
9113: PPUSH
9114: CALL 8703 0 3
9118: ST_TO_ADDR
9119: GO 9166
// result := ( GetDistUnits ( unit , unit2 ) < 6 and See ( GetSide ( unit2 ) , unit ) ) ;
9121: LD_ADDR_VAR 0 3
9125: PUSH
9126: LD_VAR 0 1
9130: PPUSH
9131: LD_VAR 0 2
9135: PPUSH
9136: CALL_OW 296
9140: PUSH
9141: LD_INT 6
9143: LESS
9144: PUSH
9145: LD_VAR 0 2
9149: PPUSH
9150: CALL_OW 255
9154: PPUSH
9155: LD_VAR 0 1
9159: PPUSH
9160: CALL_OW 292
9164: AND
9165: ST_TO_ADDR
// end ;
9166: LD_VAR 0 3
9170: RET
// export function CreateNature ; var i , animal , nat_area ; begin
9171: LD_INT 0
9173: PPUSH
9174: PPUSH
9175: PPUSH
9176: PPUSH
// uc_side = 0 ;
9177: LD_ADDR_OWVAR 20
9181: PUSH
9182: LD_INT 0
9184: ST_TO_ADDR
// uc_nation = 0 ;
9185: LD_ADDR_OWVAR 21
9189: PUSH
9190: LD_INT 0
9192: ST_TO_ADDR
// nat_area := nature_area ;
9193: LD_ADDR_VAR 0 4
9197: PUSH
9198: LD_INT 24
9200: ST_TO_ADDR
// InitHc ;
9201: CALL_OW 19
// for i = 1 to 4 do
9205: LD_ADDR_VAR 0 2
9209: PUSH
9210: DOUBLE
9211: LD_INT 1
9213: DEC
9214: ST_TO_ADDR
9215: LD_INT 4
9217: PUSH
9218: FOR_TO
9219: IFFALSE 9266
// begin hc_class = 18 ;
9221: LD_ADDR_OWVAR 28
9225: PUSH
9226: LD_INT 18
9228: ST_TO_ADDR
// hc_gallery =  ;
9229: LD_ADDR_OWVAR 33
9233: PUSH
9234: LD_STRING 
9236: ST_TO_ADDR
// animal := CreateHuman ;
9237: LD_ADDR_VAR 0 3
9241: PUSH
9242: CALL_OW 44
9246: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9247: LD_VAR 0 3
9251: PPUSH
9252: LD_VAR 0 4
9256: PPUSH
9257: LD_INT 0
9259: PPUSH
9260: CALL_OW 49
// end ;
9264: GO 9218
9266: POP
9267: POP
// for i = 1 to 3 do
9268: LD_ADDR_VAR 0 2
9272: PUSH
9273: DOUBLE
9274: LD_INT 1
9276: DEC
9277: ST_TO_ADDR
9278: LD_INT 3
9280: PUSH
9281: FOR_TO
9282: IFFALSE 9376
// begin hc_class = class_apeman ;
9284: LD_ADDR_OWVAR 28
9288: PUSH
9289: LD_INT 12
9291: ST_TO_ADDR
// hc_gallery =  ;
9292: LD_ADDR_OWVAR 33
9296: PUSH
9297: LD_STRING 
9299: ST_TO_ADDR
// hc_agressivity = 0 ;
9300: LD_ADDR_OWVAR 35
9304: PUSH
9305: LD_INT 0
9307: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
9308: LD_ADDR_OWVAR 31
9312: PUSH
9313: LD_INT 1
9315: PPUSH
9316: LD_INT 3
9318: PPUSH
9319: CALL_OW 12
9323: PUSH
9324: LD_INT 1
9326: PPUSH
9327: LD_INT 3
9329: PPUSH
9330: CALL_OW 12
9334: PUSH
9335: LD_INT 0
9337: PUSH
9338: LD_INT 0
9340: PUSH
9341: EMPTY
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: ST_TO_ADDR
// animal := CreateHuman ;
9347: LD_ADDR_VAR 0 3
9351: PUSH
9352: CALL_OW 44
9356: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9357: LD_VAR 0 3
9361: PPUSH
9362: LD_VAR 0 4
9366: PPUSH
9367: LD_INT 0
9369: PPUSH
9370: CALL_OW 49
// end ;
9374: GO 9281
9376: POP
9377: POP
// for i = 1 to 3 do
9378: LD_ADDR_VAR 0 2
9382: PUSH
9383: DOUBLE
9384: LD_INT 1
9386: DEC
9387: ST_TO_ADDR
9388: LD_INT 3
9390: PUSH
9391: FOR_TO
9392: IFFALSE 9439
// begin hc_class = 13 ;
9394: LD_ADDR_OWVAR 28
9398: PUSH
9399: LD_INT 13
9401: ST_TO_ADDR
// hc_gallery =  ;
9402: LD_ADDR_OWVAR 33
9406: PUSH
9407: LD_STRING 
9409: ST_TO_ADDR
// animal := CreateHuman ;
9410: LD_ADDR_VAR 0 3
9414: PUSH
9415: CALL_OW 44
9419: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9420: LD_VAR 0 3
9424: PPUSH
9425: LD_VAR 0 4
9429: PPUSH
9430: LD_INT 0
9432: PPUSH
9433: CALL_OW 49
// end ;
9437: GO 9391
9439: POP
9440: POP
// for i = 1 to 3 do
9441: LD_ADDR_VAR 0 2
9445: PUSH
9446: DOUBLE
9447: LD_INT 1
9449: DEC
9450: ST_TO_ADDR
9451: LD_INT 3
9453: PUSH
9454: FOR_TO
9455: IFFALSE 9500
// begin hc_class = 20 ;
9457: LD_ADDR_OWVAR 28
9461: PUSH
9462: LD_INT 20
9464: ST_TO_ADDR
// hc_gallery =  ;
9465: LD_ADDR_OWVAR 33
9469: PUSH
9470: LD_STRING 
9472: ST_TO_ADDR
// animal := CreateHuman ;
9473: LD_ADDR_VAR 0 3
9477: PUSH
9478: CALL_OW 44
9482: ST_TO_ADDR
// PlaceUnitArea ( animal , lake_area , false ) ;
9483: LD_VAR 0 3
9487: PPUSH
9488: LD_INT 4
9490: PPUSH
9491: LD_INT 0
9493: PPUSH
9494: CALL_OW 49
// end ;
9498: GO 9454
9500: POP
9501: POP
// end ; end_of_file
9502: LD_VAR 0 1
9506: RET
// export function Action ; begin
9507: LD_INT 0
9509: PPUSH
// InGameOn ;
9510: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
9514: LD_EXP 14
9518: PPUSH
9519: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
9523: LD_EXP 14
9527: PPUSH
9528: LD_STRING D1-JMM-1
9530: PPUSH
9531: CALL_OW 88
// Say ( Roth , D1-Roth-1 ) ;
9535: LD_EXP 15
9539: PPUSH
9540: LD_STRING D1-Roth-1
9542: PPUSH
9543: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
9547: LD_EXP 14
9551: PPUSH
9552: LD_STRING D1-JMM-2
9554: PPUSH
9555: CALL_OW 88
// Say ( Roth , D1-Roth-2 ) ;
9559: LD_EXP 15
9563: PPUSH
9564: LD_STRING D1-Roth-2
9566: PPUSH
9567: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9571: LD_EXP 14
9575: PPUSH
9576: LD_STRING D1-JMM-3
9578: PPUSH
9579: CALL_OW 88
// Say ( Roth , D1-Roth-3 ) ;
9583: LD_EXP 15
9587: PPUSH
9588: LD_STRING D1-Roth-3
9590: PPUSH
9591: CALL_OW 88
// ComInvisible ( Roth ) ;
9595: LD_EXP 15
9599: PPUSH
9600: CALL_OW 152
// wait ( 0 0$1.3 ) ;
9604: LD_INT 46
9606: PPUSH
9607: CALL_OW 67
// Say ( JMM , D1-JMM-4 ) ;
9611: LD_EXP 14
9615: PPUSH
9616: LD_STRING D1-JMM-4
9618: PPUSH
9619: CALL_OW 88
// wait ( 0 0$0.3 ) ;
9623: LD_INT 10
9625: PPUSH
9626: CALL_OW 67
// ComTurnUnit ( Roth , JMM ) ;
9630: LD_EXP 15
9634: PPUSH
9635: LD_EXP 14
9639: PPUSH
9640: CALL_OW 119
// Say ( JMM , D1-JMM-4a ) ;
9644: LD_EXP 14
9648: PPUSH
9649: LD_STRING D1-JMM-4a
9651: PPUSH
9652: CALL_OW 88
// Say ( Roth , D1-Roth-4 ) ;
9656: LD_EXP 15
9660: PPUSH
9661: LD_STRING D1-Roth-4
9663: PPUSH
9664: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
9668: LD_EXP 14
9672: PPUSH
9673: LD_STRING D1-JMM-5
9675: PPUSH
9676: CALL_OW 88
// Say ( Roth , D1-Roth-5 ) ;
9680: LD_EXP 15
9684: PPUSH
9685: LD_STRING D1-Roth-5
9687: PPUSH
9688: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
9692: LD_EXP 14
9696: PPUSH
9697: LD_STRING D1-JMM-6
9699: PPUSH
9700: CALL_OW 88
// Say ( Roth , D1-Roth-6 ) ;
9704: LD_EXP 15
9708: PPUSH
9709: LD_STRING D1-Roth-6
9711: PPUSH
9712: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
9716: LD_EXP 14
9720: PPUSH
9721: LD_STRING D1-JMM-7
9723: PPUSH
9724: CALL_OW 88
// ComMoveXY ( Powell , GetX ( JMM ) , GetY ( JMM ) ) ;
9728: LD_EXP 16
9732: PPUSH
9733: LD_EXP 14
9737: PPUSH
9738: CALL_OW 250
9742: PPUSH
9743: LD_EXP 14
9747: PPUSH
9748: CALL_OW 251
9752: PPUSH
9753: CALL_OW 111
// Say ( Roth , D1-Roth-7 ) ;
9757: LD_EXP 15
9761: PPUSH
9762: LD_STRING D1-Roth-7
9764: PPUSH
9765: CALL_OW 88
// repeat wait ( 0 0$0.3 ) ;
9769: LD_INT 10
9771: PPUSH
9772: CALL_OW 67
// until GetDistUnits ( Powell , JMM ) < 6 ;
9776: LD_EXP 16
9780: PPUSH
9781: LD_EXP 14
9785: PPUSH
9786: CALL_OW 296
9790: PUSH
9791: LD_INT 6
9793: LESS
9794: IFFALSE 9769
// ComTurnUnit ( Powell , JMM ) ;
9796: LD_EXP 16
9800: PPUSH
9801: LD_EXP 14
9805: PPUSH
9806: CALL_OW 119
// Say ( Powell , D1-Pow-7 ) ;
9810: LD_EXP 16
9814: PPUSH
9815: LD_STRING D1-Pow-7
9817: PPUSH
9818: CALL_OW 88
// ComTurnUnit ( JMM , Powell ) ;
9822: LD_EXP 14
9826: PPUSH
9827: LD_EXP 16
9831: PPUSH
9832: CALL_OW 119
// ComTurnUnit ( Roth , Powell ) ;
9836: LD_EXP 15
9840: PPUSH
9841: LD_EXP 16
9845: PPUSH
9846: CALL_OW 119
// Say ( JMM , D1-JMM-8 ) ;
9850: LD_EXP 14
9854: PPUSH
9855: LD_STRING D1-JMM-8
9857: PPUSH
9858: CALL_OW 88
// Say ( Powell , D1-Pow-8 ) ;
9862: LD_EXP 16
9866: PPUSH
9867: LD_STRING D1-Pow-8
9869: PPUSH
9870: CALL_OW 88
// Say ( JMM , D1-JMM-9 ) ;
9874: LD_EXP 14
9878: PPUSH
9879: LD_STRING D1-JMM-9
9881: PPUSH
9882: CALL_OW 88
// ComMoveXY ( Powell , 124 , 61 ) ;
9886: LD_EXP 16
9890: PPUSH
9891: LD_INT 124
9893: PPUSH
9894: LD_INT 61
9896: PPUSH
9897: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9901: LD_INT 35
9903: PPUSH
9904: CALL_OW 67
// until GetDistUnits ( JMM , Powell ) > 6 ;
9908: LD_EXP 14
9912: PPUSH
9913: LD_EXP 16
9917: PPUSH
9918: CALL_OW 296
9922: PUSH
9923: LD_INT 6
9925: GREATER
9926: IFFALSE 9901
// SayRadio ( Powell , D1-Pow-9 ) ;
9928: LD_EXP 16
9932: PPUSH
9933: LD_STRING D1-Pow-9
9935: PPUSH
9936: CALL_OW 94
// RemoveUnit ( Powell ) ;
9940: LD_EXP 16
9944: PPUSH
9945: CALL_OW 64
// PlaceHumanInUnit ( Powell , ambar0 ) ;
9949: LD_EXP 16
9953: PPUSH
9954: LD_INT 18
9956: PPUSH
9957: CALL_OW 52
// if Joan and not Joan in selected then
9961: LD_EXP 36
9965: PUSH
9966: LD_EXP 36
9970: PUSH
9971: LD_EXP 3
9975: IN
9976: NOT
9977: AND
9978: IFFALSE 9992
// SayRadio ( Joan , D1-Joan-9 ) ;
9980: LD_EXP 36
9984: PPUSH
9985: LD_STRING D1-Joan-9
9987: PPUSH
9988: CALL_OW 94
// ComTurnUnit ( Roth , JMM ) ;
9992: LD_EXP 15
9996: PPUSH
9997: LD_EXP 14
10001: PPUSH
10002: CALL_OW 119
// ComTurnUnit ( JMM , Roth ) ;
10006: LD_EXP 14
10010: PPUSH
10011: LD_EXP 15
10015: PPUSH
10016: CALL_OW 119
// Say ( Roth , D1-Roth-9 ) ;
10020: LD_EXP 15
10024: PPUSH
10025: LD_STRING D1-Roth-9
10027: PPUSH
10028: CALL_OW 88
// Say ( JMM , D1-JMM-10 ) ;
10032: LD_EXP 14
10036: PPUSH
10037: LD_STRING D1-JMM-10
10039: PPUSH
10040: CALL_OW 88
// InGameOff ;
10044: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
10048: LD_STRING M1
10050: PPUSH
10051: CALL_OW 337
// if Difficulty < 3 then
10055: LD_OWVAR 67
10059: PUSH
10060: LD_INT 3
10062: LESS
10063: IFFALSE 10075
// ChangeSideFog ( 4 , 7 ) ;
10065: LD_INT 4
10067: PPUSH
10068: LD_INT 7
10070: PPUSH
10071: CALL_OW 343
// SaveForQuickRestart ;
10075: CALL_OW 22
// SetAttitude ( 7 , 1 , att_enemy , true ) ;
10079: LD_INT 7
10081: PPUSH
10082: LD_INT 1
10084: PPUSH
10085: LD_INT 2
10087: PPUSH
10088: LD_INT 1
10090: PPUSH
10091: CALL_OW 80
// wait ( 0 0$3 ) ;
10095: LD_INT 105
10097: PPUSH
10098: CALL_OW 67
// ComMoveXY ( Roth , 124 , 18 ) ;
10102: LD_EXP 15
10106: PPUSH
10107: LD_INT 124
10109: PPUSH
10110: LD_INT 18
10112: PPUSH
10113: CALL_OW 111
// AddComInvisible ( Roth ) ;
10117: LD_EXP 15
10121: PPUSH
10122: CALL_OW 212
// wait ( 0 0$30 ) ;
10126: LD_INT 1050
10128: PPUSH
10129: CALL_OW 67
// AddComWait ( Roth , 1 1$00 ) ;
10133: LD_EXP 15
10137: PPUSH
10138: LD_INT 2100
10140: PPUSH
10141: CALL_OW 202
// AddComMoveXY ( Roth , 156 , 20 ) ;
10145: LD_EXP 15
10149: PPUSH
10150: LD_INT 156
10152: PPUSH
10153: LD_INT 20
10155: PPUSH
10156: CALL_OW 171
// AddComMoveXY ( Roth , 178 , 42 ) ;
10160: LD_EXP 15
10164: PPUSH
10165: LD_INT 178
10167: PPUSH
10168: LD_INT 42
10170: PPUSH
10171: CALL_OW 171
// AddComInvisible ( Roth ) ;
10175: LD_EXP 15
10179: PPUSH
10180: CALL_OW 212
// end ;
10184: LD_VAR 0 1
10188: RET
// every 0 0$1 do var i , tmp ;
10189: GO 10191
10191: DISABLE
10192: LD_INT 0
10194: PPUSH
10195: PPUSH
// begin tmp := selected union friends ;
10196: LD_ADDR_VAR 0 2
10200: PUSH
10201: LD_EXP 3
10205: PUSH
10206: LD_EXP 4
10210: UNION
10211: ST_TO_ADDR
// if not tmp then
10212: LD_VAR 0 2
10216: NOT
10217: IFFALSE 10221
// exit ;
10219: GO 10293
// repeat wait ( 0 0$1 ) ;
10221: LD_INT 35
10223: PPUSH
10224: CALL_OW 67
// for i in tmp do
10228: LD_ADDR_VAR 0 1
10232: PUSH
10233: LD_VAR 0 2
10237: PUSH
10238: FOR_IN
10239: IFFALSE 10284
// if CanSpot ( JMM , i ) then
10241: LD_EXP 14
10245: PPUSH
10246: LD_VAR 0 1
10250: PPUSH
10251: CALL 8952 0 2
10255: IFFALSE 10282
// begin tmp := tmp diff i ;
10257: LD_ADDR_VAR 0 2
10261: PUSH
10262: LD_VAR 0 2
10266: PUSH
10267: LD_VAR 0 1
10271: DIFF
10272: ST_TO_ADDR
// Spot ( i ) ;
10273: LD_VAR 0 1
10277: PPUSH
10278: CALL 10296 0 1
// end ;
10282: GO 10238
10284: POP
10285: POP
// until not tmp ;
10286: LD_VAR 0 2
10290: NOT
10291: IFFALSE 10221
// end ;
10293: PPOPN 2
10295: END
// export function Spot ( unit ) ; var building , side , joined ; begin
10296: LD_INT 0
10298: PPUSH
10299: PPUSH
10300: PPUSH
10301: PPUSH
// if not unit or GetSide ( unit ) <> 4 or IsSleeping ( unit ) or not IsOk ( unit ) then
10302: LD_VAR 0 1
10306: NOT
10307: PUSH
10308: LD_VAR 0 1
10312: PPUSH
10313: CALL_OW 255
10317: PUSH
10318: LD_INT 4
10320: NONEQUAL
10321: OR
10322: PUSH
10323: LD_VAR 0 1
10327: PPUSH
10328: CALL_OW 555
10332: OR
10333: PUSH
10334: LD_VAR 0 1
10338: PPUSH
10339: CALL_OW 302
10343: NOT
10344: OR
10345: IFFALSE 10349
// exit ;
10347: GO 12238
// InGameOn ;
10349: CALL_OW 8
// side := GetSide ( JMM ) ;
10353: LD_ADDR_VAR 0 4
10357: PUSH
10358: LD_EXP 14
10362: PPUSH
10363: CALL_OW 255
10367: ST_TO_ADDR
// joined := false ;
10368: LD_ADDR_VAR 0 5
10372: PUSH
10373: LD_INT 0
10375: ST_TO_ADDR
// building := IsInUnit ( unit ) ;
10376: LD_ADDR_VAR 0 3
10380: PUSH
10381: LD_VAR 0 1
10385: PPUSH
10386: CALL_OW 310
10390: ST_TO_ADDR
// if building then
10391: LD_VAR 0 3
10395: IFFALSE 10454
// begin SetSide ( JMM , GetSide ( unit ) ) ;
10397: LD_EXP 14
10401: PPUSH
10402: LD_VAR 0 1
10406: PPUSH
10407: CALL_OW 255
10411: PPUSH
10412: CALL_OW 235
// ComEnterUnit ( JMM , building ) ;
10416: LD_EXP 14
10420: PPUSH
10421: LD_VAR 0 3
10425: PPUSH
10426: CALL_OW 120
// repeat wait ( 3 ) ;
10430: LD_INT 3
10432: PPUSH
10433: CALL_OW 67
// until IsInUnit ( JMM ) ;
10437: LD_EXP 14
10441: PPUSH
10442: CALL_OW 310
10446: IFFALSE 10430
// DialogueOn ;
10448: CALL_OW 6
// end else
10452: GO 10486
// begin ComTurnUnit ( JMM , unit ) ;
10454: LD_EXP 14
10458: PPUSH
10459: LD_VAR 0 1
10463: PPUSH
10464: CALL_OW 119
// ComTurnUnit ( unit , JMM ) ;
10468: LD_VAR 0 1
10472: PPUSH
10473: LD_EXP 14
10477: PPUSH
10478: CALL_OW 119
// DialogueOn ;
10482: CALL_OW 6
// end ; if unit = Joan then
10486: LD_VAR 0 1
10490: PUSH
10491: LD_EXP 36
10495: EQUAL
10496: IFFALSE 10606
// begin joined := true ;
10498: LD_ADDR_VAR 0 5
10502: PUSH
10503: LD_INT 1
10505: ST_TO_ADDR
// if Joan in selected then
10506: LD_EXP 36
10510: PUSH
10511: LD_EXP 3
10515: IN
10516: IFFALSE 10544
// begin Say ( Joan , D3-Joan-Joan-1 ) ;
10518: LD_EXP 36
10522: PPUSH
10523: LD_STRING D3-Joan-Joan-1
10525: PPUSH
10526: CALL_OW 88
// Say ( JMM , D3-Joan-JMM-1 ) ;
10530: LD_EXP 14
10534: PPUSH
10535: LD_STRING D3-Joan-JMM-1
10537: PPUSH
10538: CALL_OW 88
// end else
10542: GO 10604
// begin Say ( Joan , D4-Joan-Joan-1 ) ;
10544: LD_EXP 36
10548: PPUSH
10549: LD_STRING D4-Joan-Joan-1
10551: PPUSH
10552: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-1 ) ;
10556: LD_EXP 14
10560: PPUSH
10561: LD_STRING D4-Joan-JMM-1
10563: PPUSH
10564: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-2 ) ;
10568: LD_EXP 36
10572: PPUSH
10573: LD_STRING D4-Joan-Joan-2
10575: PPUSH
10576: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-2 ) ;
10580: LD_EXP 14
10584: PPUSH
10585: LD_STRING D4-Joan-JMM-2
10587: PPUSH
10588: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-3 ) ;
10592: LD_EXP 36
10596: PPUSH
10597: LD_STRING D4-Joan-Joan-3
10599: PPUSH
10600: CALL_OW 88
// end ; end else
10604: GO 12046
// if unit = Lisa then
10606: LD_VAR 0 1
10610: PUSH
10611: LD_EXP 23
10615: EQUAL
10616: IFFALSE 10808
// begin if Lisa in selected then
10618: LD_EXP 23
10622: PUSH
10623: LD_EXP 3
10627: IN
10628: IFFALSE 10741
// begin if GetSide ( Joan ) = 7 then
10630: LD_EXP 36
10634: PPUSH
10635: CALL_OW 255
10639: PUSH
10640: LD_INT 7
10642: EQUAL
10643: IFFALSE 10707
// begin Say ( Lisa , D3-LisaJ-Lisa-1 ) ;
10645: LD_EXP 23
10649: PPUSH
10650: LD_STRING D3-LisaJ-Lisa-1
10652: PPUSH
10653: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-1 ) ;
10657: LD_EXP 14
10661: PPUSH
10662: LD_STRING D3-LisaJ-JMM-1
10664: PPUSH
10665: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-2 ) ;
10669: LD_EXP 23
10673: PPUSH
10674: LD_STRING D3-LisaJ-Lisa-2
10676: PPUSH
10677: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-2 ) ;
10681: LD_EXP 14
10685: PPUSH
10686: LD_STRING D3-LisaJ-JMM-2
10688: PPUSH
10689: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-3 ) ;
10693: LD_EXP 23
10697: PPUSH
10698: LD_STRING D3-LisaJ-Lisa-3
10700: PPUSH
10701: CALL_OW 88
// end else
10705: GO 10739
// begin Say ( Lisa , D3-LisaL-Lisa-1 ) ;
10707: LD_EXP 23
10711: PPUSH
10712: LD_STRING D3-LisaL-Lisa-1
10714: PPUSH
10715: CALL_OW 88
// Say ( JMM , D3-LisaL-JMM-1 ) ;
10719: LD_EXP 14
10723: PPUSH
10724: LD_STRING D3-LisaL-JMM-1
10726: PPUSH
10727: CALL_OW 88
// joined := true ;
10731: LD_ADDR_VAR 0 5
10735: PUSH
10736: LD_INT 1
10738: ST_TO_ADDR
// end ; end else
10739: GO 10806
// begin if GetSide ( Joan ) = 7 then
10741: LD_EXP 36
10745: PPUSH
10746: CALL_OW 255
10750: PUSH
10751: LD_INT 7
10753: EQUAL
10754: IFFALSE 10794
// begin Say ( Lisa , D4-LisaJ-Lisa-1 ) ;
10756: LD_EXP 23
10760: PPUSH
10761: LD_STRING D4-LisaJ-Lisa-1
10763: PPUSH
10764: CALL_OW 88
// Say ( JMM , D4-LisaJ-JMM-1 ) ;
10768: LD_EXP 14
10772: PPUSH
10773: LD_STRING D4-LisaJ-JMM-1
10775: PPUSH
10776: CALL_OW 88
// Say ( Lisa , D4-LisaJ-Lisa-2 ) ;
10780: LD_EXP 23
10784: PPUSH
10785: LD_STRING D4-LisaJ-Lisa-2
10787: PPUSH
10788: CALL_OW 88
// end else
10792: GO 10806
// begin Say ( Lisa , D4-LisaL-Lisa-1 ) ;
10794: LD_EXP 23
10798: PPUSH
10799: LD_STRING D4-LisaL-Lisa-1
10801: PPUSH
10802: CALL_OW 88
// end ; end ; end else
10806: GO 12046
// if unit = Frank then
10808: LD_VAR 0 1
10812: PUSH
10813: LD_EXP 33
10817: EQUAL
10818: IFFALSE 10958
// begin joined := true ;
10820: LD_ADDR_VAR 0 5
10824: PUSH
10825: LD_INT 1
10827: ST_TO_ADDR
// if Frank in selected then
10828: LD_EXP 33
10832: PUSH
10833: LD_EXP 3
10837: IN
10838: IFFALSE 10908
// begin Say ( Frank , D3-Frank-Frank-1 ) ;
10840: LD_EXP 33
10844: PPUSH
10845: LD_STRING D3-Frank-Frank-1
10847: PPUSH
10848: CALL_OW 88
// Say ( JMM , D3-Frank-JMM-1 ) ;
10852: LD_EXP 14
10856: PPUSH
10857: LD_STRING D3-Frank-JMM-1
10859: PPUSH
10860: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-2 ) ;
10864: LD_EXP 33
10868: PPUSH
10869: LD_STRING D3-Frank-Frank-2
10871: PPUSH
10872: CALL_OW 88
// if reached_lab then
10876: LD_EXP 5
10880: IFFALSE 10906
// begin Say ( JMM , D3-Frank-JMM-2 ) ;
10882: LD_EXP 14
10886: PPUSH
10887: LD_STRING D3-Frank-JMM-2
10889: PPUSH
10890: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-3 ) ;
10894: LD_EXP 33
10898: PPUSH
10899: LD_STRING D3-Frank-Frank-3
10901: PPUSH
10902: CALL_OW 88
// end ; end else
10906: GO 10956
// begin Say ( Frank , D4-Frank-Frank-1 ) ;
10908: LD_EXP 33
10912: PPUSH
10913: LD_STRING D4-Frank-Frank-1
10915: PPUSH
10916: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-1 ) ;
10920: LD_EXP 14
10924: PPUSH
10925: LD_STRING D4-Frank-JMM-1
10927: PPUSH
10928: CALL_OW 88
// Say ( Frank , D4-Frank-Frank-2 ) ;
10932: LD_EXP 33
10936: PPUSH
10937: LD_STRING D4-Frank-Frank-2
10939: PPUSH
10940: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-2 ) ;
10944: LD_EXP 14
10948: PPUSH
10949: LD_STRING D4-Frank-JMM-2
10951: PPUSH
10952: CALL_OW 88
// end ; end else
10956: GO 12046
// if unit = Brown then
10958: LD_VAR 0 1
10962: PUSH
10963: LD_EXP 28
10967: EQUAL
10968: IFFALSE 11064
// begin if Brown in selected or gamma_commander = 2 then
10970: LD_EXP 28
10974: PUSH
10975: LD_EXP 3
10979: IN
10980: PUSH
10981: LD_EXP 10
10985: PUSH
10986: LD_INT 2
10988: EQUAL
10989: OR
10990: IFFALSE 11026
// begin Say ( Brown , D3-Soldier1-Sol1-1 ) ;
10992: LD_EXP 28
10996: PPUSH
10997: LD_STRING D3-Soldier1-Sol1-1
10999: PPUSH
11000: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
11004: LD_EXP 14
11008: PPUSH
11009: LD_STRING D3-Soldier1-JMM-1
11011: PPUSH
11012: CALL_OW 88
// joined := true ;
11016: LD_ADDR_VAR 0 5
11020: PUSH
11021: LD_INT 1
11023: ST_TO_ADDR
// end else
11024: GO 11062
// begin Say ( Brown , D4-Soldier2-Sol1-1 ) ;
11026: LD_EXP 28
11030: PPUSH
11031: LD_STRING D4-Soldier2-Sol1-1
11033: PPUSH
11034: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11038: LD_EXP 14
11042: PPUSH
11043: LD_STRING D4-Soldier1-JMM-1
11045: PPUSH
11046: CALL_OW 88
// Say ( Brown , D4-Soldier2-Sol1-2 ) ;
11050: LD_EXP 28
11054: PPUSH
11055: LD_STRING D4-Soldier2-Sol1-2
11057: PPUSH
11058: CALL_OW 88
// end ; end else
11062: GO 12046
// if unit = Donaldson then
11064: LD_VAR 0 1
11068: PUSH
11069: LD_EXP 24
11073: EQUAL
11074: IFFALSE 11170
// begin if Donaldson in selected or gamma_commander = 1 then
11076: LD_EXP 24
11080: PUSH
11081: LD_EXP 3
11085: IN
11086: PUSH
11087: LD_EXP 10
11091: PUSH
11092: LD_INT 1
11094: EQUAL
11095: OR
11096: IFFALSE 11132
// begin Say ( Donaldson , D3-Soldier2-FSol2-1 ) ;
11098: LD_EXP 24
11102: PPUSH
11103: LD_STRING D3-Soldier2-FSol2-1
11105: PPUSH
11106: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11110: LD_EXP 14
11114: PPUSH
11115: LD_STRING D3-Soldier2-JMM-1
11117: PPUSH
11118: CALL_OW 88
// joined := true ;
11122: LD_ADDR_VAR 0 5
11126: PUSH
11127: LD_INT 1
11129: ST_TO_ADDR
// end else
11130: GO 11168
// begin Say ( unit , D4-Soldier1-FSol1-1 ) ;
11132: LD_VAR 0 1
11136: PPUSH
11137: LD_STRING D4-Soldier1-FSol1-1
11139: PPUSH
11140: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11144: LD_EXP 14
11148: PPUSH
11149: LD_STRING D4-Soldier1-JMM-1
11151: PPUSH
11152: CALL_OW 88
// Say ( unit , D4-Soldier1-FSol1-2 ) ;
11156: LD_VAR 0 1
11160: PPUSH
11161: LD_STRING D4-Soldier1-FSol1-2
11163: PPUSH
11164: CALL_OW 88
// end ; end else
11168: GO 12046
// if unit = Cyrus then
11170: LD_VAR 0 1
11174: PUSH
11175: LD_EXP 26
11179: EQUAL
11180: IFFALSE 11254
// begin if Cyrus in selected then
11182: LD_EXP 26
11186: PUSH
11187: LD_EXP 3
11191: IN
11192: IFFALSE 11228
// begin Say ( Cyrus , D3-Cyrus-Cyrus-1 ) ;
11194: LD_EXP 26
11198: PPUSH
11199: LD_STRING D3-Cyrus-Cyrus-1
11201: PPUSH
11202: CALL_OW 88
// Say ( JMM , D3-Cyrus-JMM-1 ) ;
11206: LD_EXP 14
11210: PPUSH
11211: LD_STRING D3-Cyrus-JMM-1
11213: PPUSH
11214: CALL_OW 88
// joined := true ;
11218: LD_ADDR_VAR 0 5
11222: PUSH
11223: LD_INT 1
11225: ST_TO_ADDR
// end else
11226: GO 11252
// begin Say ( Cyrus , D4-Cyrus-Cyrus-1 ) ;
11228: LD_EXP 26
11232: PPUSH
11233: LD_STRING D4-Cyrus-Cyrus-1
11235: PPUSH
11236: CALL_OW 88
// Say ( JMM , D4-Cyrus-JMM-1 ) ;
11240: LD_EXP 14
11244: PPUSH
11245: LD_STRING D4-Cyrus-JMM-1
11247: PPUSH
11248: CALL_OW 88
// end ; end else
11252: GO 12046
// if unit = Bobby then
11254: LD_VAR 0 1
11258: PUSH
11259: LD_EXP 25
11263: EQUAL
11264: IFFALSE 11350
// begin if Bobby in selected then
11266: LD_EXP 25
11270: PUSH
11271: LD_EXP 3
11275: IN
11276: IFFALSE 11312
// begin Say ( Bobby , D3-Bobby-Bobby-1 ) ;
11278: LD_EXP 25
11282: PPUSH
11283: LD_STRING D3-Bobby-Bobby-1
11285: PPUSH
11286: CALL_OW 88
// Say ( JMM , D3-Bobby-JMM-1 ) ;
11290: LD_EXP 14
11294: PPUSH
11295: LD_STRING D3-Bobby-JMM-1
11297: PPUSH
11298: CALL_OW 88
// joined := true ;
11302: LD_ADDR_VAR 0 5
11306: PUSH
11307: LD_INT 1
11309: ST_TO_ADDR
// end else
11310: GO 11348
// begin Say ( Bobby , D4-Bobby-Bobby-1 ) ;
11312: LD_EXP 25
11316: PPUSH
11317: LD_STRING D4-Bobby-Bobby-1
11319: PPUSH
11320: CALL_OW 88
// Say ( JMM , D4-Bobby-JMM-1 ) ;
11324: LD_EXP 14
11328: PPUSH
11329: LD_STRING D4-Bobby-JMM-1
11331: PPUSH
11332: CALL_OW 88
// Say ( Bobby , D4-Bobby-Bobby-2 ) ;
11336: LD_EXP 25
11340: PPUSH
11341: LD_STRING D4-Bobby-Bobby-2
11343: PPUSH
11344: CALL_OW 88
// end ; end else
11348: GO 12046
// if unit = Cornel then
11350: LD_VAR 0 1
11354: PUSH
11355: LD_EXP 31
11359: EQUAL
11360: IFFALSE 11458
// begin if Cornel in selected then
11362: LD_EXP 31
11366: PUSH
11367: LD_EXP 3
11371: IN
11372: IFFALSE 11420
// begin Say ( Cornel , D3-Mark-Corn-1 ) ;
11374: LD_EXP 31
11378: PPUSH
11379: LD_STRING D3-Mark-Corn-1
11381: PPUSH
11382: CALL_OW 88
// Say ( JMM , D3-Mark-JMM-1 ) ;
11386: LD_EXP 14
11390: PPUSH
11391: LD_STRING D3-Mark-JMM-1
11393: PPUSH
11394: CALL_OW 88
// Say ( Cornel , D3-Mark-Corn-2 ) ;
11398: LD_EXP 31
11402: PPUSH
11403: LD_STRING D3-Mark-Corn-2
11405: PPUSH
11406: CALL_OW 88
// joined := true ;
11410: LD_ADDR_VAR 0 5
11414: PUSH
11415: LD_INT 1
11417: ST_TO_ADDR
// end else
11418: GO 11456
// begin Say ( Cornel , D4-Mark-Corn-1 ) ;
11420: LD_EXP 31
11424: PPUSH
11425: LD_STRING D4-Mark-Corn-1
11427: PPUSH
11428: CALL_OW 88
// Say ( JMM , D3-Joan-JMM-1 ) ;
11432: LD_EXP 14
11436: PPUSH
11437: LD_STRING D3-Joan-JMM-1
11439: PPUSH
11440: CALL_OW 88
// Say ( Cornel , D4-Mark-Corn-2 ) ;
11444: LD_EXP 31
11448: PPUSH
11449: LD_STRING D4-Mark-Corn-2
11451: PPUSH
11452: CALL_OW 88
// end ; end else
11456: GO 12046
// if unit = Gary then
11458: LD_VAR 0 1
11462: PUSH
11463: LD_EXP 32
11467: EQUAL
11468: IFFALSE 11552
// begin if Gary in selected then
11470: LD_EXP 32
11474: PUSH
11475: LD_EXP 3
11479: IN
11480: IFFALSE 11516
// begin Say ( Gary , D3-Gary-Gary-1 ) ;
11482: LD_EXP 32
11486: PPUSH
11487: LD_STRING D3-Gary-Gary-1
11489: PPUSH
11490: CALL_OW 88
// Say ( JMM , D3-Gary-JMM-1 ) ;
11494: LD_EXP 14
11498: PPUSH
11499: LD_STRING D3-Gary-JMM-1
11501: PPUSH
11502: CALL_OW 88
// joined := true ;
11506: LD_ADDR_VAR 0 5
11510: PUSH
11511: LD_INT 1
11513: ST_TO_ADDR
// end else
11514: GO 11550
// begin Say ( Gary , D4-Gary-Gary-1 ) ;
11516: LD_EXP 32
11520: PPUSH
11521: LD_STRING D4-Gary-Gary-1
11523: PPUSH
11524: CALL_OW 88
// SetSide ( Gary , 1 ) ;
11528: LD_EXP 32
11532: PPUSH
11533: LD_INT 1
11535: PPUSH
11536: CALL_OW 235
// DialogueOff ;
11540: CALL_OW 7
// InGameOff ;
11544: CALL_OW 9
// exit ;
11548: GO 12238
// end ; end else
11550: GO 12046
// if unit = Kikuchi then
11552: LD_VAR 0 1
11556: PUSH
11557: LD_EXP 34
11561: EQUAL
11562: IFFALSE 11646
// begin if Kikuchi in selected then
11564: LD_EXP 34
11568: PUSH
11569: LD_EXP 3
11573: IN
11574: IFFALSE 11610
// begin Say ( Kikuchi , D3-Yamako-Yam-1 ) ;
11576: LD_EXP 34
11580: PPUSH
11581: LD_STRING D3-Yamako-Yam-1
11583: PPUSH
11584: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11588: LD_EXP 14
11592: PPUSH
11593: LD_STRING D3-Soldier2-JMM-1
11595: PPUSH
11596: CALL_OW 88
// joined := true ;
11600: LD_ADDR_VAR 0 5
11604: PUSH
11605: LD_INT 1
11607: ST_TO_ADDR
// end else
11608: GO 11644
// begin Say ( Kikuchi , D4-Yamako-Yam-1 ) ;
11610: LD_EXP 34
11614: PPUSH
11615: LD_STRING D4-Yamako-Yam-1
11617: PPUSH
11618: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
11622: LD_EXP 34
11626: PPUSH
11627: LD_INT 1
11629: PPUSH
11630: CALL_OW 235
// DialogueOff ;
11634: CALL_OW 7
// InGameOff ;
11638: CALL_OW 9
// exit ;
11642: GO 12238
// end ; end else
11644: GO 12046
// if unit = Gladstone then
11646: LD_VAR 0 1
11650: PUSH
11651: LD_EXP 29
11655: EQUAL
11656: IFFALSE 11730
// begin if Gladstone in selected then
11658: LD_EXP 29
11662: PUSH
11663: LD_EXP 3
11667: IN
11668: IFFALSE 11704
// begin joined := true ;
11670: LD_ADDR_VAR 0 5
11674: PUSH
11675: LD_INT 1
11677: ST_TO_ADDR
// Say ( JMM , D3-Tim-JMM-1 ) ;
11678: LD_EXP 14
11682: PPUSH
11683: LD_STRING D3-Tim-JMM-1
11685: PPUSH
11686: CALL_OW 88
// Say ( Gladstone , D3-Tim-Glad-1 ) ;
11690: LD_EXP 29
11694: PPUSH
11695: LD_STRING D3-Tim-Glad-1
11697: PPUSH
11698: CALL_OW 88
// end else
11702: GO 11728
// begin Say ( JMM , D4-Tim-JMM-1 ) ;
11704: LD_EXP 14
11708: PPUSH
11709: LD_STRING D4-Tim-JMM-1
11711: PPUSH
11712: CALL_OW 88
// Say ( Gladstone , D4-Tim-Glad-1 ) ;
11716: LD_EXP 29
11720: PPUSH
11721: LD_STRING D4-Tim-Glad-1
11723: PPUSH
11724: CALL_OW 88
// end ; end else
11728: GO 12046
// if unit = Denis then
11730: LD_VAR 0 1
11734: PUSH
11735: LD_EXP 27
11739: EQUAL
11740: IFFALSE 11776
// begin joined := true ;
11742: LD_ADDR_VAR 0 5
11746: PUSH
11747: LD_INT 1
11749: ST_TO_ADDR
// Say ( Denis , D3-Denis-Den-1 ) ;
11750: LD_EXP 27
11754: PPUSH
11755: LD_STRING D3-Denis-Den-1
11757: PPUSH
11758: CALL_OW 88
// Say ( JMM , D3-Denis-JMM-1 ) ;
11762: LD_EXP 14
11766: PPUSH
11767: LD_STRING D3-Denis-JMM-1
11769: PPUSH
11770: CALL_OW 88
// end else
11774: GO 12046
// if unit = Simms then
11776: LD_VAR 0 1
11780: PUSH
11781: LD_EXP 35
11785: EQUAL
11786: IFFALSE 11822
// begin joined := true ;
11788: LD_ADDR_VAR 0 5
11792: PUSH
11793: LD_INT 1
11795: ST_TO_ADDR
// Say ( Simms , D3-Simms-Sim-1 ) ;
11796: LD_EXP 35
11800: PPUSH
11801: LD_STRING D3-Simms-Sim-1
11803: PPUSH
11804: CALL_OW 88
// Say ( JMM , D3-Simms-JMM-1 ) ;
11808: LD_EXP 14
11812: PPUSH
11813: LD_STRING D3-Simms-JMM-1
11815: PPUSH
11816: CALL_OW 88
// end else
11820: GO 12046
// if unit = DeltaDoctor then
11822: LD_VAR 0 1
11826: PUSH
11827: LD_EXP 37
11831: EQUAL
11832: IFFALSE 11868
// begin joined := true ;
11834: LD_ADDR_VAR 0 5
11838: PUSH
11839: LD_INT 1
11841: ST_TO_ADDR
// Say ( DeltaDoctor , D3-Soldier1-Sol1-1 ) ;
11842: LD_EXP 37
11846: PPUSH
11847: LD_STRING D3-Soldier1-Sol1-1
11849: PPUSH
11850: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
11854: LD_EXP 14
11858: PPUSH
11859: LD_STRING D3-Soldier1-JMM-1
11861: PPUSH
11862: CALL_OW 88
// end else
11866: GO 12046
// begin joined := unit in selected ;
11868: LD_ADDR_VAR 0 5
11872: PUSH
11873: LD_VAR 0 1
11877: PUSH
11878: LD_EXP 3
11882: IN
11883: ST_TO_ADDR
// if joined then
11884: LD_VAR 0 5
11888: IFFALSE 11957
// begin if GetSex ( unit ) = sex_male then
11890: LD_VAR 0 1
11894: PPUSH
11895: CALL_OW 258
11899: PUSH
11900: LD_INT 1
11902: EQUAL
11903: IFFALSE 11931
// begin Say ( unit , D3-Soldier1-Sol1-1 ) ;
11905: LD_VAR 0 1
11909: PPUSH
11910: LD_STRING D3-Soldier1-Sol1-1
11912: PPUSH
11913: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
11917: LD_EXP 14
11921: PPUSH
11922: LD_STRING D3-Soldier1-JMM-1
11924: PPUSH
11925: CALL_OW 88
// end else
11929: GO 11955
// begin Say ( unit , D3-Soldier2-FSol2-1 ) ;
11931: LD_VAR 0 1
11935: PPUSH
11936: LD_STRING D3-Soldier2-FSol2-1
11938: PPUSH
11939: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11943: LD_EXP 14
11947: PPUSH
11948: LD_STRING D3-Soldier2-JMM-1
11950: PPUSH
11951: CALL_OW 88
// end ; end else
11955: GO 12046
// begin if GetSex ( unit ) = sex_male then
11957: LD_VAR 0 1
11961: PPUSH
11962: CALL_OW 258
11966: PUSH
11967: LD_INT 1
11969: EQUAL
11970: IFFALSE 12010
// begin Say ( unit , D4-Soldier2-Sol1-1 ) ;
11972: LD_VAR 0 1
11976: PPUSH
11977: LD_STRING D4-Soldier2-Sol1-1
11979: PPUSH
11980: CALL_OW 88
// Say ( JMM , D4-Soldier2-JMM-1 ) ;
11984: LD_EXP 14
11988: PPUSH
11989: LD_STRING D4-Soldier2-JMM-1
11991: PPUSH
11992: CALL_OW 88
// Say ( unit , D4-Soldier2-Sol2-1 ) ;
11996: LD_VAR 0 1
12000: PPUSH
12001: LD_STRING D4-Soldier2-Sol2-1
12003: PPUSH
12004: CALL_OW 88
// end else
12008: GO 12046
// begin Say ( unit , D4-Soldier1-FSol1-1 ) ;
12010: LD_VAR 0 1
12014: PPUSH
12015: LD_STRING D4-Soldier1-FSol1-1
12017: PPUSH
12018: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
12022: LD_EXP 14
12026: PPUSH
12027: LD_STRING D4-Soldier1-JMM-1
12029: PPUSH
12030: CALL_OW 88
// Say ( unit , D4-Soldier1-FSol1-2 ) ;
12034: LD_VAR 0 1
12038: PPUSH
12039: LD_STRING D4-Soldier1-FSol1-2
12041: PPUSH
12042: CALL_OW 88
// end ; end ; end ; DialogueOff ;
12046: CALL_OW 7
// InGameOff ;
12050: CALL_OW 9
// if building then
12054: LD_VAR 0 3
12058: IFFALSE 12159
// begin SetSide ( JMM , side ) ;
12060: LD_EXP 14
12064: PPUSH
12065: LD_VAR 0 4
12069: PPUSH
12070: CALL_OW 235
// ComExitBuilding ( JMM ) ;
12074: LD_EXP 14
12078: PPUSH
12079: CALL_OW 122
// if joined then
12083: LD_VAR 0 5
12087: IFFALSE 12126
// begin SetSide ( unit , side ) ;
12089: LD_VAR 0 1
12093: PPUSH
12094: LD_VAR 0 4
12098: PPUSH
12099: CALL_OW 235
// SetSide ( building , 1 ) ;
12103: LD_VAR 0 3
12107: PPUSH
12108: LD_INT 1
12110: PPUSH
12111: CALL_OW 235
// ComExitBuilding ( unit ) ;
12115: LD_VAR 0 1
12119: PPUSH
12120: CALL_OW 122
// end else
12124: GO 12157
// begin wait ( 0 0$10 ) ;
12126: LD_INT 350
12128: PPUSH
12129: CALL_OW 67
// SetSide ( unit , 1 ) ;
12133: LD_VAR 0 1
12137: PPUSH
12138: LD_INT 1
12140: PPUSH
12141: CALL_OW 235
// SetSide ( building , 1 ) ;
12145: LD_VAR 0 3
12149: PPUSH
12150: LD_INT 1
12152: PPUSH
12153: CALL_OW 235
// end ; end else
12157: GO 12238
// begin ComStop ( [ JMM , unit ] ) ;
12159: LD_EXP 14
12163: PUSH
12164: LD_VAR 0 1
12168: PUSH
12169: EMPTY
12170: LIST
12171: LIST
12172: PPUSH
12173: CALL_OW 141
// if joined then
12177: LD_VAR 0 5
12181: IFFALSE 12199
// SetSide ( unit , side ) else
12183: LD_VAR 0 1
12187: PPUSH
12188: LD_VAR 0 4
12192: PPUSH
12193: CALL_OW 235
12197: GO 12238
// begin repeat wait ( 0 0$1 ) ;
12199: LD_INT 35
12201: PPUSH
12202: CALL_OW 67
// until GetDistUnits ( JMM , unit ) > 11 ;
12206: LD_EXP 14
12210: PPUSH
12211: LD_VAR 0 1
12215: PPUSH
12216: CALL_OW 296
12220: PUSH
12221: LD_INT 11
12223: GREATER
12224: IFFALSE 12199
// SetSide ( unit , 1 ) ;
12226: LD_VAR 0 1
12230: PPUSH
12231: LD_INT 1
12233: PPUSH
12234: CALL_OW 235
// end ; end ; end ;
12238: LD_VAR 0 2
12242: RET
// every 0 0$01 trigger IsInUnit ( JMM ) = amlab do
12243: LD_EXP 14
12247: PPUSH
12248: CALL_OW 310
12252: PUSH
12253: LD_INT 47
12255: EQUAL
12256: IFFALSE 12324
12258: GO 12260
12260: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
12261: LD_STRING M1a
12263: PPUSH
12264: CALL_OW 337
// SetTech ( tech_Soporific , 7 , state_researched ) ;
12268: LD_INT 13
12270: PPUSH
12271: LD_INT 7
12273: PPUSH
12274: LD_INT 2
12276: PPUSH
12277: CALL_OW 322
// SetTech ( tech_SpacAnom , 7 , state_researched ) ;
12281: LD_INT 29
12283: PPUSH
12284: LD_INT 7
12286: PPUSH
12287: LD_INT 2
12289: PPUSH
12290: CALL_OW 322
// SetClass ( JMM , class_bazooker ) ;
12294: LD_EXP 14
12298: PPUSH
12299: LD_INT 9
12301: PPUSH
12302: CALL_OW 336
// can_escape := true ;
12306: LD_ADDR_EXP 6
12310: PUSH
12311: LD_INT 1
12313: ST_TO_ADDR
// SetAreaMapShow ( escape_area , 1 ) ;
12314: LD_INT 19
12316: PPUSH
12317: LD_INT 1
12319: PPUSH
12320: CALL_OW 424
// end ;
12324: END
// every 0 0$1 trigger GetLives ( Powell ) < 999 do
12325: LD_EXP 16
12329: PPUSH
12330: CALL_OW 256
12334: PUSH
12335: LD_INT 999
12337: LESS
12338: IFFALSE 12389
12340: GO 12342
12342: DISABLE
// begin enable ;
12343: ENABLE
// if HexInfo ( 25 , 48 ) = Powell then
12344: LD_INT 25
12346: PPUSH
12347: LD_INT 48
12349: PPUSH
12350: CALL_OW 428
12354: PUSH
12355: LD_EXP 16
12359: EQUAL
12360: IFFALSE 12374
// begin RemoveUnit ( Powell ) ;
12362: LD_EXP 16
12366: PPUSH
12367: CALL_OW 64
// disable ;
12371: DISABLE
// end else
12372: GO 12389
// ComMoveXY ( Powell , 25 , 48 ) ;
12374: LD_EXP 16
12378: PPUSH
12379: LD_INT 25
12381: PPUSH
12382: LD_INT 48
12384: PPUSH
12385: CALL_OW 111
// end ;
12389: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do var i ;
12390: LD_INT 22
12392: PUSH
12393: LD_INT 4
12395: PUSH
12396: EMPTY
12397: LIST
12398: LIST
12399: PUSH
12400: LD_INT 21
12402: PUSH
12403: LD_INT 1
12405: PUSH
12406: EMPTY
12407: LIST
12408: LIST
12409: PUSH
12410: LD_INT 3
12412: PUSH
12413: LD_INT 24
12415: PUSH
12416: LD_INT 990
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: PUSH
12427: EMPTY
12428: LIST
12429: LIST
12430: LIST
12431: PPUSH
12432: CALL_OW 69
12436: PUSH
12437: LD_EXP 15
12441: DIFF
12442: IFFALSE 12586
12444: GO 12446
12446: DISABLE
12447: LD_INT 0
12449: PPUSH
// begin enable ;
12450: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do
12451: LD_ADDR_VAR 0 1
12455: PUSH
12456: LD_INT 22
12458: PUSH
12459: LD_INT 4
12461: PUSH
12462: EMPTY
12463: LIST
12464: LIST
12465: PUSH
12466: LD_INT 21
12468: PUSH
12469: LD_INT 1
12471: PUSH
12472: EMPTY
12473: LIST
12474: LIST
12475: PUSH
12476: LD_INT 3
12478: PUSH
12479: LD_INT 24
12481: PUSH
12482: LD_INT 990
12484: PUSH
12485: EMPTY
12486: LIST
12487: LIST
12488: PUSH
12489: EMPTY
12490: LIST
12491: LIST
12492: PUSH
12493: EMPTY
12494: LIST
12495: LIST
12496: LIST
12497: PPUSH
12498: CALL_OW 69
12502: PUSH
12503: LD_EXP 15
12507: DIFF
12508: PUSH
12509: FOR_IN
12510: IFFALSE 12584
// begin ComFree ( i ) ;
12512: LD_VAR 0 1
12516: PPUSH
12517: CALL_OW 139
// SetSide ( i , 1 ) ;
12521: LD_VAR 0 1
12525: PPUSH
12526: LD_INT 1
12528: PPUSH
12529: CALL_OW 235
// if GetDistUnits ( i , JMM ) < 14 then
12533: LD_VAR 0 1
12537: PPUSH
12538: LD_EXP 14
12542: PPUSH
12543: CALL_OW 296
12547: PUSH
12548: LD_INT 14
12550: LESS
12551: IFFALSE 12582
// ComAgressiveMove ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
12553: LD_VAR 0 1
12557: PPUSH
12558: LD_EXP 14
12562: PPUSH
12563: CALL_OW 250
12567: PPUSH
12568: LD_EXP 14
12572: PPUSH
12573: CALL_OW 251
12577: PPUSH
12578: CALL_OW 114
// end ;
12582: GO 12509
12584: POP
12585: POP
// end ;
12586: PPOPN 1
12588: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var i ;
12589: LD_INT 22
12591: PUSH
12592: LD_INT 4
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: PUSH
12599: LD_INT 34
12601: PUSH
12602: LD_INT 12
12604: PUSH
12605: EMPTY
12606: LIST
12607: LIST
12608: PUSH
12609: EMPTY
12610: LIST
12611: LIST
12612: PPUSH
12613: CALL_OW 69
12617: IFFALSE 12699
12619: GO 12621
12621: DISABLE
12622: LD_INT 0
12624: PPUSH
// begin enable ;
12625: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do
12626: LD_ADDR_VAR 0 1
12630: PUSH
12631: LD_INT 22
12633: PUSH
12634: LD_INT 4
12636: PUSH
12637: EMPTY
12638: LIST
12639: LIST
12640: PUSH
12641: LD_INT 34
12643: PUSH
12644: LD_INT 12
12646: PUSH
12647: EMPTY
12648: LIST
12649: LIST
12650: PUSH
12651: EMPTY
12652: LIST
12653: LIST
12654: PPUSH
12655: CALL_OW 69
12659: PUSH
12660: FOR_IN
12661: IFFALSE 12697
// if GetDistUnits ( i , JMM ) < 6 then
12663: LD_VAR 0 1
12667: PPUSH
12668: LD_EXP 14
12672: PPUSH
12673: CALL_OW 296
12677: PUSH
12678: LD_INT 6
12680: LESS
12681: IFFALSE 12695
// SetSide ( i , 7 ) ;
12683: LD_VAR 0 1
12687: PPUSH
12688: LD_INT 7
12690: PPUSH
12691: CALL_OW 235
12695: GO 12660
12697: POP
12698: POP
// end ;
12699: PPOPN 1
12701: END
// every 0 0$01 trigger can_escape and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) do var all_taken , tmp , m1 , m2 , m3 ;
12702: LD_EXP 6
12706: PUSH
12707: LD_INT 19
12709: PPUSH
12710: LD_INT 22
12712: PUSH
12713: LD_INT 7
12715: PUSH
12716: EMPTY
12717: LIST
12718: LIST
12719: PUSH
12720: LD_INT 21
12722: PUSH
12723: LD_INT 1
12725: PUSH
12726: EMPTY
12727: LIST
12728: LIST
12729: PUSH
12730: EMPTY
12731: LIST
12732: LIST
12733: PPUSH
12734: CALL_OW 71
12738: NOT
12739: AND
12740: PUSH
12741: LD_INT 3
12743: PPUSH
12744: CALL_OW 469
12748: NOT
12749: AND
12750: PUSH
12751: LD_INT 5
12753: PPUSH
12754: CALL_OW 469
12758: NOT
12759: AND
12760: IFFALSE 14382
12762: GO 12764
12764: DISABLE
12765: LD_INT 0
12767: PPUSH
12768: PPUSH
12769: PPUSH
12770: PPUSH
12771: PPUSH
// begin m1 := false ;
12772: LD_ADDR_VAR 0 3
12776: PUSH
12777: LD_INT 0
12779: ST_TO_ADDR
// m2 := false ;
12780: LD_ADDR_VAR 0 4
12784: PUSH
12785: LD_INT 0
12787: ST_TO_ADDR
// m3 := false ;
12788: LD_ADDR_VAR 0 5
12792: PUSH
12793: LD_INT 0
12795: ST_TO_ADDR
// all_taken := ( UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 ) ;
12796: LD_ADDR_VAR 0 1
12800: PUSH
12801: LD_EXP 3
12805: PPUSH
12806: LD_INT 22
12808: PUSH
12809: LD_INT 4
12811: PUSH
12812: EMPTY
12813: LIST
12814: LIST
12815: PUSH
12816: LD_INT 21
12818: PUSH
12819: LD_INT 1
12821: PUSH
12822: EMPTY
12823: LIST
12824: LIST
12825: PUSH
12826: EMPTY
12827: LIST
12828: LIST
12829: PPUSH
12830: CALL_OW 72
12834: PUSH
12835: LD_INT 0
12837: EQUAL
12838: ST_TO_ADDR
// if not all_taken then
12839: LD_VAR 0 1
12843: NOT
12844: IFFALSE 12985
// case query ( Q1 ) of 1 :
12846: LD_STRING Q1
12848: PPUSH
12849: CALL_OW 97
12853: PUSH
12854: LD_INT 1
12856: DOUBLE
12857: EQUAL
12858: IFTRUE 12862
12860: GO 12973
12862: POP
// begin repeat wait ( 0 0$1 ) ;
12863: LD_INT 35
12865: PPUSH
12866: CALL_OW 67
// until UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) ;
12870: LD_EXP 3
12874: PPUSH
12875: LD_INT 22
12877: PUSH
12878: LD_INT 4
12880: PUSH
12881: EMPTY
12882: LIST
12883: LIST
12884: PUSH
12885: LD_INT 21
12887: PUSH
12888: LD_INT 1
12890: PUSH
12891: EMPTY
12892: LIST
12893: LIST
12894: PUSH
12895: EMPTY
12896: LIST
12897: LIST
12898: PPUSH
12899: CALL_OW 72
12903: PUSH
12904: LD_INT 0
12906: EQUAL
12907: PUSH
12908: LD_INT 19
12910: PPUSH
12911: LD_INT 22
12913: PUSH
12914: LD_INT 7
12916: PUSH
12917: EMPTY
12918: LIST
12919: LIST
12920: PUSH
12921: LD_INT 21
12923: PUSH
12924: LD_INT 1
12926: PUSH
12927: EMPTY
12928: LIST
12929: LIST
12930: PUSH
12931: EMPTY
12932: LIST
12933: LIST
12934: PPUSH
12935: CALL_OW 71
12939: NOT
12940: AND
12941: PUSH
12942: LD_INT 3
12944: PPUSH
12945: CALL_OW 469
12949: NOT
12950: AND
12951: PUSH
12952: LD_INT 5
12954: PPUSH
12955: CALL_OW 469
12959: NOT
12960: AND
12961: IFFALSE 12863
// all_taken := true ;
12963: LD_ADDR_VAR 0 1
12967: PUSH
12968: LD_INT 1
12970: ST_TO_ADDR
// end ; 2 :
12971: GO 12985
12973: LD_INT 2
12975: DOUBLE
12976: EQUAL
12977: IFTRUE 12981
12979: GO 12984
12981: POP
// ; end ;
12982: GO 12985
12984: POP
// if team_kill_counter then
12985: LD_EXP 9
12989: IFFALSE 13005
// Say ( JMM , D5-JMM-1 ) else
12991: LD_EXP 14
12995: PPUSH
12996: LD_STRING D5-JMM-1
12998: PPUSH
12999: CALL_OW 88
13003: GO 13017
// Say ( JMM , D5-JMM-1a ) ;
13005: LD_EXP 14
13009: PPUSH
13010: LD_STRING D5-JMM-1a
13012: PPUSH
13013: CALL_OW 88
// if ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Roth ] ) >= 10 then
13017: LD_INT 22
13019: PUSH
13020: LD_INT 7
13022: PUSH
13023: EMPTY
13024: LIST
13025: LIST
13026: PUSH
13027: LD_INT 21
13029: PUSH
13030: LD_INT 1
13032: PUSH
13033: EMPTY
13034: LIST
13035: LIST
13036: PUSH
13037: LD_INT 23
13039: PUSH
13040: LD_INT 1
13042: PUSH
13043: EMPTY
13044: LIST
13045: LIST
13046: PUSH
13047: EMPTY
13048: LIST
13049: LIST
13050: LIST
13051: PPUSH
13052: CALL_OW 69
13056: PUSH
13057: LD_EXP 14
13061: PUSH
13062: LD_EXP 15
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: DIFF
13071: PUSH
13072: LD_INT 10
13074: GREATEREQUAL
13075: IFFALSE 13084
// SetAchievement ( ACH_TEAM ) ;
13077: LD_STRING ACH_TEAM
13079: PPUSH
13080: CALL_OW 543
// if not invis_used then
13084: LD_EXP 12
13088: NOT
13089: IFFALSE 13105
// begin wait ( 3 ) ;
13091: LD_INT 3
13093: PPUSH
13094: CALL_OW 67
// SetAchievement ( ACH_NOINVIS ) ;
13098: LD_STRING ACH_NOINVIS
13100: PPUSH
13101: CALL_OW 543
// end ; if not alert then
13105: LD_EXP 13
13109: NOT
13110: IFFALSE 13126
// begin wait ( 3 ) ;
13112: LD_INT 3
13114: PPUSH
13115: CALL_OW 67
// SetAchievement ( ACH_ALARM ) ;
13119: LD_STRING ACH_ALARM
13121: PPUSH
13122: CALL_OW 543
// end ; if tick < 15 15$00 then
13126: LD_OWVAR 1
13130: PUSH
13131: LD_INT 31500
13133: LESS
13134: IFFALSE 13150
// begin wait ( 3 ) ;
13136: LD_INT 3
13138: PPUSH
13139: CALL_OW 67
// SetAchievement ( ACH_ASPEED_16 ) ;
13143: LD_STRING ACH_ASPEED_16
13145: PPUSH
13146: CALL_OW 543
// end ; if all_taken then
13150: LD_VAR 0 1
13154: IFFALSE 13176
// begin AddMedal ( All , 1 ) ;
13156: LD_STRING All
13158: PPUSH
13159: LD_INT 1
13161: PPUSH
13162: CALL_OW 101
// m1 := true ;
13166: LD_ADDR_VAR 0 3
13170: PUSH
13171: LD_INT 1
13173: ST_TO_ADDR
// end else
13174: GO 13187
// AddMedal ( All , - 1 ) ;
13176: LD_STRING All
13178: PPUSH
13179: LD_INT 1
13181: NEG
13182: PPUSH
13183: CALL_OW 101
// if team_kill_counter then
13187: LD_EXP 9
13191: IFFALSE 13206
// AddMedal ( Save , - 1 ) else
13193: LD_STRING Save
13195: PPUSH
13196: LD_INT 1
13198: NEG
13199: PPUSH
13200: CALL_OW 101
13204: GO 13224
// begin AddMedal ( Save , 1 ) ;
13206: LD_STRING Save
13208: PPUSH
13209: LD_INT 1
13211: PPUSH
13212: CALL_OW 101
// m2 := true ;
13216: LD_ADDR_VAR 0 4
13220: PUSH
13221: LD_INT 1
13223: ST_TO_ADDR
// end ; if friends_kill_counter >= [ 2 , 1 , 1 ] [ Difficulty ] then
13224: LD_EXP 8
13228: PUSH
13229: LD_INT 2
13231: PUSH
13232: LD_INT 1
13234: PUSH
13235: LD_INT 1
13237: PUSH
13238: EMPTY
13239: LIST
13240: LIST
13241: LIST
13242: PUSH
13243: LD_OWVAR 67
13247: ARRAY
13248: GREATEREQUAL
13249: IFFALSE 13264
// AddMedal ( Friendship , - 1 ) else
13251: LD_STRING Friendship
13253: PPUSH
13254: LD_INT 1
13256: NEG
13257: PPUSH
13258: CALL_OW 101
13262: GO 13282
// begin AddMedal ( Friendship , 1 ) ;
13264: LD_STRING Friendship
13266: PPUSH
13267: LD_INT 1
13269: PPUSH
13270: CALL_OW 101
// m3 := true ;
13274: LD_ADDR_VAR 0 5
13278: PUSH
13279: LD_INT 1
13281: ST_TO_ADDR
// end ; if m1 and m2 and m3 and Difficulty = 3 then
13282: LD_VAR 0 3
13286: PUSH
13287: LD_VAR 0 4
13291: AND
13292: PUSH
13293: LD_VAR 0 5
13297: AND
13298: PUSH
13299: LD_OWVAR 67
13303: PUSH
13304: LD_INT 3
13306: EQUAL
13307: AND
13308: IFFALSE 13320
// SetAchievementEX ( ACH_AMER , 16 ) ;
13310: LD_STRING ACH_AMER
13312: PPUSH
13313: LD_INT 16
13315: PPUSH
13316: CALL_OW 564
// GiveMedals ( MAIN ) ;
13320: LD_STRING MAIN
13322: PPUSH
13323: CALL_OW 102
// tmp := FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ] ) ;
13327: LD_ADDR_VAR 0 2
13331: PUSH
13332: LD_INT 22
13334: PUSH
13335: LD_INT 7
13337: PUSH
13338: EMPTY
13339: LIST
13340: LIST
13341: PUSH
13342: LD_INT 2
13344: PUSH
13345: LD_INT 25
13347: PUSH
13348: LD_INT 1
13350: PUSH
13351: EMPTY
13352: LIST
13353: LIST
13354: PUSH
13355: LD_INT 25
13357: PUSH
13358: LD_INT 2
13360: PUSH
13361: EMPTY
13362: LIST
13363: LIST
13364: PUSH
13365: LD_INT 25
13367: PUSH
13368: LD_INT 3
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: PUSH
13375: LD_INT 25
13377: PUSH
13378: LD_INT 4
13380: PUSH
13381: EMPTY
13382: LIST
13383: LIST
13384: PUSH
13385: LD_INT 25
13387: PUSH
13388: LD_INT 5
13390: PUSH
13391: EMPTY
13392: LIST
13393: LIST
13394: PUSH
13395: LD_INT 25
13397: PUSH
13398: LD_INT 8
13400: PUSH
13401: EMPTY
13402: LIST
13403: LIST
13404: PUSH
13405: LD_INT 25
13407: PUSH
13408: LD_INT 9
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PUSH
13415: EMPTY
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: PUSH
13425: EMPTY
13426: LIST
13427: LIST
13428: PUSH
13429: EMPTY
13430: LIST
13431: PPUSH
13432: CALL_OW 69
13436: ST_TO_ADDR
// RewardPeople ( tmp ^ Roth ) ;
13437: LD_VAR 0 2
13441: PUSH
13442: LD_EXP 15
13446: ADD
13447: PPUSH
13448: CALL_OW 43
// SaveCharacters ( JMM , 12a_JMM ) ;
13452: LD_EXP 14
13456: PPUSH
13457: LD_STRING 12a_JMM
13459: PPUSH
13460: CALL_OW 38
// if IsLive ( Roth ) then
13464: LD_EXP 15
13468: PPUSH
13469: CALL_OW 300
13473: IFFALSE 13487
// SaveCharacters ( Roth , 12a_Roth ) ;
13475: LD_EXP 15
13479: PPUSH
13480: LD_STRING 12a_Roth
13482: PPUSH
13483: CALL_OW 38
// if Lisa in tmp then
13487: LD_EXP 23
13491: PUSH
13492: LD_VAR 0 2
13496: IN
13497: IFFALSE 13513
// SaveCharacters ( Lisa , 12a_Lisa ) else
13499: LD_EXP 23
13503: PPUSH
13504: LD_STRING 12a_Lisa
13506: PPUSH
13507: CALL_OW 38
13511: GO 13531
// if Lisa then
13513: LD_EXP 23
13517: IFFALSE 13531
// SaveCharacters ( Lisa , 12p_Lisa ) ;
13519: LD_EXP 23
13523: PPUSH
13524: LD_STRING 12p_Lisa
13526: PPUSH
13527: CALL_OW 38
// if Donaldson in tmp then
13531: LD_EXP 24
13535: PUSH
13536: LD_VAR 0 2
13540: IN
13541: IFFALSE 13557
// SaveCharacters ( Donaldson , 12a_Donaldson ) else
13543: LD_EXP 24
13547: PPUSH
13548: LD_STRING 12a_Donaldson
13550: PPUSH
13551: CALL_OW 38
13555: GO 13575
// if Donaldson then
13557: LD_EXP 24
13561: IFFALSE 13575
// SaveCharacters ( Donaldson , 12p_Donaldson ) ;
13563: LD_EXP 24
13567: PPUSH
13568: LD_STRING 12p_Donaldson
13570: PPUSH
13571: CALL_OW 38
// if Bobby in tmp then
13575: LD_EXP 25
13579: PUSH
13580: LD_VAR 0 2
13584: IN
13585: IFFALSE 13601
// SaveCharacters ( Bobby , 12a_Bobby ) else
13587: LD_EXP 25
13591: PPUSH
13592: LD_STRING 12a_Bobby
13594: PPUSH
13595: CALL_OW 38
13599: GO 13619
// if Bobby then
13601: LD_EXP 25
13605: IFFALSE 13619
// SaveCharacters ( Bobby , 12p_Bobby ) ;
13607: LD_EXP 25
13611: PPUSH
13612: LD_STRING 12p_Bobby
13614: PPUSH
13615: CALL_OW 38
// if Cyrus in tmp then
13619: LD_EXP 26
13623: PUSH
13624: LD_VAR 0 2
13628: IN
13629: IFFALSE 13645
// SaveCharacters ( Cyrus , 12a_Cyrus ) else
13631: LD_EXP 26
13635: PPUSH
13636: LD_STRING 12a_Cyrus
13638: PPUSH
13639: CALL_OW 38
13643: GO 13663
// if Cyrus then
13645: LD_EXP 26
13649: IFFALSE 13663
// SaveCharacters ( Cyrus , 12p_Cyrus ) ;
13651: LD_EXP 26
13655: PPUSH
13656: LD_STRING 12p_Cyrus
13658: PPUSH
13659: CALL_OW 38
// if Denis in tmp then
13663: LD_EXP 27
13667: PUSH
13668: LD_VAR 0 2
13672: IN
13673: IFFALSE 13687
// SaveCharacters ( Denis , 12a_Denis ) ;
13675: LD_EXP 27
13679: PPUSH
13680: LD_STRING 12a_Denis
13682: PPUSH
13683: CALL_OW 38
// if Brown in tmp then
13687: LD_EXP 28
13691: PUSH
13692: LD_VAR 0 2
13696: IN
13697: IFFALSE 13713
// SaveCharacters ( Brown , 12a_Brown ) else
13699: LD_EXP 28
13703: PPUSH
13704: LD_STRING 12a_Brown
13706: PPUSH
13707: CALL_OW 38
13711: GO 13737
// if Brown in tmp then
13713: LD_EXP 28
13717: PUSH
13718: LD_VAR 0 2
13722: IN
13723: IFFALSE 13737
// SaveCharacters ( Brown , 12p_Brown ) ;
13725: LD_EXP 28
13729: PPUSH
13730: LD_STRING 12p_Brown
13732: PPUSH
13733: CALL_OW 38
// if Gladstone in tmp then
13737: LD_EXP 29
13741: PUSH
13742: LD_VAR 0 2
13746: IN
13747: IFFALSE 13763
// SaveCharacters ( Gladstone , 12a_Gladstone ) else
13749: LD_EXP 29
13753: PPUSH
13754: LD_STRING 12a_Gladstone
13756: PPUSH
13757: CALL_OW 38
13761: GO 13781
// if Gladstone then
13763: LD_EXP 29
13767: IFFALSE 13781
// SaveCharacters ( Gladstone , 12p_Gladstone ) ;
13769: LD_EXP 29
13773: PPUSH
13774: LD_STRING 12p_Gladstone
13776: PPUSH
13777: CALL_OW 38
// if Houten in tmp then
13781: LD_EXP 30
13785: PUSH
13786: LD_VAR 0 2
13790: IN
13791: IFFALSE 13807
// SaveCharacters ( Houten , 12a_Houten ) else
13793: LD_EXP 30
13797: PPUSH
13798: LD_STRING 12a_Houten
13800: PPUSH
13801: CALL_OW 38
13805: GO 13825
// if Houten then
13807: LD_EXP 30
13811: IFFALSE 13825
// SaveCharacters ( Houten , 12p_Houten ) ;
13813: LD_EXP 30
13817: PPUSH
13818: LD_STRING 12p_Houten
13820: PPUSH
13821: CALL_OW 38
// if Cornel in tmp then
13825: LD_EXP 31
13829: PUSH
13830: LD_VAR 0 2
13834: IN
13835: IFFALSE 13851
// SaveCharacters ( Cornel , 12a_Cornell ) else
13837: LD_EXP 31
13841: PPUSH
13842: LD_STRING 12a_Cornell
13844: PPUSH
13845: CALL_OW 38
13849: GO 13869
// if Cornel then
13851: LD_EXP 31
13855: IFFALSE 13869
// SaveCharacters ( Cornel , 12p_Cornell ) ;
13857: LD_EXP 31
13861: PPUSH
13862: LD_STRING 12p_Cornell
13864: PPUSH
13865: CALL_OW 38
// if Gary in tmp then
13869: LD_EXP 32
13873: PUSH
13874: LD_VAR 0 2
13878: IN
13879: IFFALSE 13895
// SaveCharacters ( Gary , 12a_Gary ) else
13881: LD_EXP 32
13885: PPUSH
13886: LD_STRING 12a_Gary
13888: PPUSH
13889: CALL_OW 38
13893: GO 13913
// if Gary then
13895: LD_EXP 32
13899: IFFALSE 13913
// SaveCharacters ( Gary , 12p_Gary ) ;
13901: LD_EXP 32
13905: PPUSH
13906: LD_STRING 12p_Gary
13908: PPUSH
13909: CALL_OW 38
// if Frank in tmp then
13913: LD_EXP 33
13917: PUSH
13918: LD_VAR 0 2
13922: IN
13923: IFFALSE 13937
// SaveCharacters ( Frank , 12a_Frank ) ;
13925: LD_EXP 33
13929: PPUSH
13930: LD_STRING 12a_Frank
13932: PPUSH
13933: CALL_OW 38
// if Kikuchi in tmp then
13937: LD_EXP 34
13941: PUSH
13942: LD_VAR 0 2
13946: IN
13947: IFFALSE 13963
// SaveCharacters ( Kikuchi , 12a_Kikuchi ) else
13949: LD_EXP 34
13953: PPUSH
13954: LD_STRING 12a_Kikuchi
13956: PPUSH
13957: CALL_OW 38
13961: GO 13981
// if Kikuchi then
13963: LD_EXP 34
13967: IFFALSE 13981
// SaveCharacters ( Kikuchi , 12p_Kikuchi ) ;
13969: LD_EXP 34
13973: PPUSH
13974: LD_STRING 12p_Kikuchi
13976: PPUSH
13977: CALL_OW 38
// if Simms in tmp then
13981: LD_EXP 35
13985: PUSH
13986: LD_VAR 0 2
13990: IN
13991: IFFALSE 14005
// SaveCharacters ( Simms , 12a_Simms ) ;
13993: LD_EXP 35
13997: PPUSH
13998: LD_STRING 12a_Simms
14000: PPUSH
14001: CALL_OW 38
// if Joan in tmp then
14005: LD_EXP 36
14009: PUSH
14010: LD_VAR 0 2
14014: IN
14015: IFFALSE 14029
// SaveCharacters ( Joan , 12a_Joan ) ;
14017: LD_EXP 36
14021: PPUSH
14022: LD_STRING 12a_Joan
14024: PPUSH
14025: CALL_OW 38
// if DeltaDoctor in tmp then
14029: LD_EXP 37
14033: PUSH
14034: LD_VAR 0 2
14038: IN
14039: IFFALSE 14053
// SaveCharacters ( DeltaDoctor , 12a_DeltaDoctor ) ;
14041: LD_EXP 37
14045: PPUSH
14046: LD_STRING 12a_DeltaDoctor
14048: PPUSH
14049: CALL_OW 38
// tmp := tmp diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor ] ;
14053: LD_ADDR_VAR 0 2
14057: PUSH
14058: LD_VAR 0 2
14062: PUSH
14063: LD_EXP 14
14067: PUSH
14068: LD_EXP 15
14072: PUSH
14073: LD_EXP 23
14077: PUSH
14078: LD_EXP 24
14082: PUSH
14083: LD_EXP 25
14087: PUSH
14088: LD_EXP 26
14092: PUSH
14093: LD_EXP 27
14097: PUSH
14098: LD_EXP 28
14102: PUSH
14103: LD_EXP 29
14107: PUSH
14108: LD_EXP 30
14112: PUSH
14113: LD_EXP 31
14117: PUSH
14118: LD_EXP 32
14122: PUSH
14123: LD_EXP 33
14127: PUSH
14128: LD_EXP 34
14132: PUSH
14133: LD_EXP 35
14137: PUSH
14138: LD_EXP 36
14142: PUSH
14143: LD_EXP 37
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: DIFF
14167: ST_TO_ADDR
// if tmp then
14168: LD_VAR 0 2
14172: IFFALSE 14186
// SaveCharacters ( tmp , 12a_others ) ;
14174: LD_VAR 0 2
14178: PPUSH
14179: LD_STRING 12a_others
14181: PPUSH
14182: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_side , 1 ] , [ f_side , 4 ] ] ] ) diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Powell ] ;
14186: LD_ADDR_VAR 0 2
14190: PUSH
14191: LD_INT 21
14193: PUSH
14194: LD_INT 1
14196: PUSH
14197: EMPTY
14198: LIST
14199: LIST
14200: PUSH
14201: LD_INT 23
14203: PUSH
14204: LD_INT 1
14206: PUSH
14207: EMPTY
14208: LIST
14209: LIST
14210: PUSH
14211: LD_INT 2
14213: PUSH
14214: LD_INT 22
14216: PUSH
14217: LD_INT 1
14219: PUSH
14220: EMPTY
14221: LIST
14222: LIST
14223: PUSH
14224: LD_INT 22
14226: PUSH
14227: LD_INT 4
14229: PUSH
14230: EMPTY
14231: LIST
14232: LIST
14233: PUSH
14234: EMPTY
14235: LIST
14236: LIST
14237: LIST
14238: PUSH
14239: EMPTY
14240: LIST
14241: LIST
14242: LIST
14243: PPUSH
14244: CALL_OW 69
14248: PUSH
14249: LD_EXP 14
14253: PUSH
14254: LD_EXP 15
14258: PUSH
14259: LD_EXP 23
14263: PUSH
14264: LD_EXP 24
14268: PUSH
14269: LD_EXP 25
14273: PUSH
14274: LD_EXP 26
14278: PUSH
14279: LD_EXP 27
14283: PUSH
14284: LD_EXP 28
14288: PUSH
14289: LD_EXP 29
14293: PUSH
14294: LD_EXP 30
14298: PUSH
14299: LD_EXP 31
14303: PUSH
14304: LD_EXP 32
14308: PUSH
14309: LD_EXP 33
14313: PUSH
14314: LD_EXP 34
14318: PUSH
14319: LD_EXP 35
14323: PUSH
14324: LD_EXP 36
14328: PUSH
14329: LD_EXP 37
14333: PUSH
14334: LD_EXP 16
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: LIST
14356: LIST
14357: LIST
14358: DIFF
14359: ST_TO_ADDR
// if tmp then
14360: LD_VAR 0 2
14364: IFFALSE 14378
// SaveCharacters ( tmp , 12p_others ) ;
14366: LD_VAR 0 2
14370: PPUSH
14371: LD_STRING 12p_others
14373: PPUSH
14374: CALL_OW 38
// YouWin ;
14378: CALL_OW 103
// end ; end_of_file
14382: PPOPN 5
14384: END
// on SailEvent ( event ) do var tmp ;
14385: LD_INT 0
14387: PPUSH
// begin if event = 1 then
14388: LD_VAR 0 1
14392: PUSH
14393: LD_INT 1
14395: EQUAL
14396: IFFALSE 14469
// begin if not mobile_patrol then
14398: LD_EXP 17
14402: NOT
14403: IFFALSE 14407
// exit ;
14405: GO 14469
// tmp := mobile_patrol [ mobile_patrol ] ;
14407: LD_ADDR_VAR 0 2
14411: PUSH
14412: LD_EXP 17
14416: PUSH
14417: LD_EXP 17
14421: ARRAY
14422: ST_TO_ADDR
// mobile_patrol := Delete ( mobile_patrol , mobile_patrol ) ;
14423: LD_ADDR_EXP 17
14427: PUSH
14428: LD_EXP 17
14432: PPUSH
14433: LD_EXP 17
14437: PPUSH
14438: CALL_OW 3
14442: ST_TO_ADDR
// Patrol ( tmp , mobile_points [ mobile_patrol + 1 ] , [ ] ) ;
14443: LD_VAR 0 2
14447: PPUSH
14448: LD_EXP 18
14452: PUSH
14453: LD_EXP 17
14457: PUSH
14458: LD_INT 1
14460: PLUS
14461: ARRAY
14462: PPUSH
14463: EMPTY
14464: PPUSH
14465: CALL 6653 0 3
// end ; end ;
14469: PPOPN 2
14471: END
// on UnitDestroyed ( un ) do begin if un = JMM then
14472: LD_VAR 0 1
14476: PUSH
14477: LD_EXP 14
14481: EQUAL
14482: IFFALSE 14491
// YouLost ( JMM ) ;
14484: LD_STRING JMM
14486: PPUSH
14487: CALL_OW 104
// if GetSide ( un ) = 7 and GetWeapon ( un ) = us_cargo_bay then
14491: LD_VAR 0 1
14495: PPUSH
14496: CALL_OW 255
14500: PUSH
14501: LD_INT 7
14503: EQUAL
14504: PUSH
14505: LD_VAR 0 1
14509: PPUSH
14510: CALL_OW 264
14514: PUSH
14515: LD_INT 12
14517: EQUAL
14518: AND
14519: IFFALSE 14528
// YouLost ( Artifact ) ;
14521: LD_STRING Artifact
14523: PPUSH
14524: CALL_OW 104
// if ( GetSide ( un ) = 7 and GetType ( un ) = unit_human ) or un = Roth then
14528: LD_VAR 0 1
14532: PPUSH
14533: CALL_OW 255
14537: PUSH
14538: LD_INT 7
14540: EQUAL
14541: PUSH
14542: LD_VAR 0 1
14546: PPUSH
14547: CALL_OW 247
14551: PUSH
14552: LD_INT 1
14554: EQUAL
14555: AND
14556: PUSH
14557: LD_VAR 0 1
14561: PUSH
14562: LD_EXP 15
14566: EQUAL
14567: OR
14568: IFFALSE 14584
// team_kill_counter := team_kill_counter + 1 ;
14570: LD_ADDR_EXP 9
14574: PUSH
14575: LD_EXP 9
14579: PUSH
14580: LD_INT 1
14582: PLUS
14583: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetType ( un ) = unit_human then
14584: LD_VAR 0 1
14588: PPUSH
14589: CALL_OW 255
14593: PUSH
14594: LD_INT 1
14596: EQUAL
14597: PUSH
14598: LD_VAR 0 1
14602: PPUSH
14603: CALL_OW 247
14607: PUSH
14608: LD_INT 1
14610: EQUAL
14611: AND
14612: IFFALSE 14628
// friends_kill_counter := friends_kill_counter + 1 ;
14614: LD_ADDR_EXP 8
14618: PUSH
14619: LD_EXP 8
14623: PUSH
14624: LD_INT 1
14626: PLUS
14627: ST_TO_ADDR
// if GetSide ( un ) <> 1 then
14628: LD_VAR 0 1
14632: PPUSH
14633: CALL_OW 255
14637: PUSH
14638: LD_INT 1
14640: NONEQUAL
14641: IFFALSE 14645
// exit ;
14643: GO 14722
// if GetControl ( un ) = control_remote then
14645: LD_VAR 0 1
14649: PPUSH
14650: CALL_OW 263
14654: PUSH
14655: LD_INT 2
14657: EQUAL
14658: IFFALSE 14676
// defenders := defenders diff un ;
14660: LD_ADDR_EXP 20
14664: PUSH
14665: LD_EXP 20
14669: PUSH
14670: LD_VAR 0 1
14674: DIFF
14675: ST_TO_ADDR
// if not un in defenders then
14676: LD_VAR 0 1
14680: PUSH
14681: LD_EXP 20
14685: IN
14686: NOT
14687: IFFALSE 14722
// begin defcon := [ GetX ( un ) , GetY ( un ) ] ;
14689: LD_ADDR_EXP 21
14693: PUSH
14694: LD_VAR 0 1
14698: PPUSH
14699: CALL_OW 250
14703: PUSH
14704: LD_VAR 0 1
14708: PPUSH
14709: CALL_OW 251
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: ST_TO_ADDR
// Defend ;
14718: CALL 2779 0 0
// end ; end ;
14722: PPOPN 1
14724: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) <> 1 then
14725: LD_VAR 0 1
14729: PPUSH
14730: CALL_OW 255
14734: PUSH
14735: LD_INT 1
14737: NONEQUAL
14738: IFFALSE 14742
// exit ;
14740: GO 14766
// if GetControl ( veh ) = control_remote then
14742: LD_VAR 0 1
14746: PPUSH
14747: CALL_OW 263
14751: PUSH
14752: LD_INT 2
14754: EQUAL
14755: IFFALSE 14766
// Connect ( veh ) ;
14757: LD_VAR 0 1
14761: PPUSH
14762: CALL 40227 0 1
// end ;
14766: PPOPN 2
14768: END
// on UnitGoesToRed ( un ) do var i , veh ;
14769: LD_INT 0
14771: PPUSH
14772: PPUSH
// begin if GetSide ( un ) = 1 and GetControl ( un ) = control_remote then
14773: LD_VAR 0 1
14777: PPUSH
14778: CALL_OW 255
14782: PUSH
14783: LD_INT 1
14785: EQUAL
14786: PUSH
14787: LD_VAR 0 1
14791: PPUSH
14792: CALL_OW 263
14796: PUSH
14797: LD_INT 2
14799: EQUAL
14800: AND
14801: IFFALSE 14812
// ComUnlink ( un ) ;
14803: LD_VAR 0 1
14807: PPUSH
14808: CALL_OW 136
// if un = ambar0 then
14812: LD_VAR 0 1
14816: PUSH
14817: LD_INT 18
14819: EQUAL
14820: IFFALSE 14930
// begin uc_side := 1 ;
14822: LD_ADDR_OWVAR 20
14826: PUSH
14827: LD_INT 1
14829: ST_TO_ADDR
// uc_nation := 1 ;
14830: LD_ADDR_OWVAR 21
14834: PUSH
14835: LD_INT 1
14837: ST_TO_ADDR
// for i = 1 to 6 do
14838: LD_ADDR_VAR 0 2
14842: PUSH
14843: DOUBLE
14844: LD_INT 1
14846: DEC
14847: ST_TO_ADDR
14848: LD_INT 6
14850: PUSH
14851: FOR_TO
14852: IFFALSE 14928
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
14854: LD_INT 3
14856: PPUSH
14857: LD_INT 1
14859: PPUSH
14860: LD_INT 3
14862: PPUSH
14863: LD_INT 4
14865: PPUSH
14866: LD_INT 100
14868: PPUSH
14869: CALL 37140 0 5
// veh := CreateVehicle ;
14873: LD_ADDR_VAR 0 3
14877: PUSH
14878: CALL_OW 45
14882: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
14883: LD_VAR 0 3
14887: PPUSH
14888: LD_INT 1
14890: PPUSH
14891: CALL_OW 233
// PlaceUnitArea ( veh , west_spawn , false ) ;
14895: LD_VAR 0 3
14899: PPUSH
14900: LD_INT 25
14902: PPUSH
14903: LD_INT 0
14905: PPUSH
14906: CALL_OW 49
// defenders := defenders ^ veh ;
14910: LD_ADDR_EXP 20
14914: PUSH
14915: LD_EXP 20
14919: PUSH
14920: LD_VAR 0 3
14924: ADD
14925: ST_TO_ADDR
// end ;
14926: GO 14851
14928: POP
14929: POP
// end ; end ;
14930: PPOPN 3
14932: END
// on EnterBuilding ( building , unit ) do begin if unit = Powell then
14933: LD_VAR 0 2
14937: PUSH
14938: LD_EXP 16
14942: EQUAL
14943: IFFALSE 14954
// RemoveUnit ( Powell ) ;
14945: LD_EXP 16
14949: PPUSH
14950: CALL_OW 64
// end ;
14954: PPOPN 2
14956: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
14957: LD_VAR 0 1
14961: PPUSH
14962: CALL 28407 0 1
// end ; end_of_file
14966: PPOPN 1
14968: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
14969: LD_INT 0
14971: PPUSH
// ar_miner := 81 ;
14972: LD_ADDR_EXP 45
14976: PUSH
14977: LD_INT 81
14979: ST_TO_ADDR
// ar_crane := 88 ;
14980: LD_ADDR_EXP 44
14984: PUSH
14985: LD_INT 88
14987: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
14988: LD_ADDR_EXP 39
14992: PUSH
14993: LD_INT 89
14995: ST_TO_ADDR
// us_hack := 99 ;
14996: LD_ADDR_EXP 40
15000: PUSH
15001: LD_INT 99
15003: ST_TO_ADDR
// us_artillery := 97 ;
15004: LD_ADDR_EXP 41
15008: PUSH
15009: LD_INT 97
15011: ST_TO_ADDR
// ar_bio_bomb := 91 ;
15012: LD_ADDR_EXP 42
15016: PUSH
15017: LD_INT 91
15019: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
15020: LD_ADDR_EXP 43
15024: PUSH
15025: LD_INT 92
15027: ST_TO_ADDR
// ru_radar := 98 ;
15028: LD_ADDR_EXP 38
15032: PUSH
15033: LD_INT 98
15035: ST_TO_ADDR
// tech_Artillery := 80 ;
15036: LD_ADDR_EXP 46
15040: PUSH
15041: LD_INT 80
15043: ST_TO_ADDR
// tech_RadMat := 81 ;
15044: LD_ADDR_EXP 47
15048: PUSH
15049: LD_INT 81
15051: ST_TO_ADDR
// tech_BasicTools := 82 ;
15052: LD_ADDR_EXP 48
15056: PUSH
15057: LD_INT 82
15059: ST_TO_ADDR
// tech_Cargo := 83 ;
15060: LD_ADDR_EXP 49
15064: PUSH
15065: LD_INT 83
15067: ST_TO_ADDR
// tech_Track := 84 ;
15068: LD_ADDR_EXP 50
15072: PUSH
15073: LD_INT 84
15075: ST_TO_ADDR
// tech_Crane := 85 ;
15076: LD_ADDR_EXP 51
15080: PUSH
15081: LD_INT 85
15083: ST_TO_ADDR
// tech_Bulldozer := 86 ;
15084: LD_ADDR_EXP 52
15088: PUSH
15089: LD_INT 86
15091: ST_TO_ADDR
// tech_Hovercraft := 87 ;
15092: LD_ADDR_EXP 53
15096: PUSH
15097: LD_INT 87
15099: ST_TO_ADDR
// class_mastodont := 31 ;
15100: LD_ADDR_EXP 54
15104: PUSH
15105: LD_INT 31
15107: ST_TO_ADDR
// class_horse := 21 ;
15108: LD_ADDR_EXP 55
15112: PUSH
15113: LD_INT 21
15115: ST_TO_ADDR
// end ;
15116: LD_VAR 0 1
15120: RET
// every 1 do
15121: GO 15123
15123: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
15124: CALL 14969 0 0
15128: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15129: LD_INT 0
15131: PPUSH
// if p2 = 100 then
15132: LD_VAR 0 2
15136: PUSH
15137: LD_INT 100
15139: EQUAL
15140: IFFALSE 16089
// begin if not StreamModeActive then
15142: LD_EXP 56
15146: NOT
15147: IFFALSE 15157
// StreamModeActive := true ;
15149: LD_ADDR_EXP 56
15153: PUSH
15154: LD_INT 1
15156: ST_TO_ADDR
// if p3 = 0 then
15157: LD_VAR 0 3
15161: PUSH
15162: LD_INT 0
15164: EQUAL
15165: IFFALSE 15171
// InitStreamMode ;
15167: CALL 16249 0 0
// if p3 = 1 then
15171: LD_VAR 0 3
15175: PUSH
15176: LD_INT 1
15178: EQUAL
15179: IFFALSE 15189
// sRocket := true ;
15181: LD_ADDR_EXP 61
15185: PUSH
15186: LD_INT 1
15188: ST_TO_ADDR
// if p3 = 2 then
15189: LD_VAR 0 3
15193: PUSH
15194: LD_INT 2
15196: EQUAL
15197: IFFALSE 15207
// sSpeed := true ;
15199: LD_ADDR_EXP 60
15203: PUSH
15204: LD_INT 1
15206: ST_TO_ADDR
// if p3 = 3 then
15207: LD_VAR 0 3
15211: PUSH
15212: LD_INT 3
15214: EQUAL
15215: IFFALSE 15225
// sEngine := true ;
15217: LD_ADDR_EXP 62
15221: PUSH
15222: LD_INT 1
15224: ST_TO_ADDR
// if p3 = 4 then
15225: LD_VAR 0 3
15229: PUSH
15230: LD_INT 4
15232: EQUAL
15233: IFFALSE 15243
// sSpec := true ;
15235: LD_ADDR_EXP 59
15239: PUSH
15240: LD_INT 1
15242: ST_TO_ADDR
// if p3 = 5 then
15243: LD_VAR 0 3
15247: PUSH
15248: LD_INT 5
15250: EQUAL
15251: IFFALSE 15261
// sLevel := true ;
15253: LD_ADDR_EXP 63
15257: PUSH
15258: LD_INT 1
15260: ST_TO_ADDR
// if p3 = 6 then
15261: LD_VAR 0 3
15265: PUSH
15266: LD_INT 6
15268: EQUAL
15269: IFFALSE 15279
// sArmoury := true ;
15271: LD_ADDR_EXP 64
15275: PUSH
15276: LD_INT 1
15278: ST_TO_ADDR
// if p3 = 7 then
15279: LD_VAR 0 3
15283: PUSH
15284: LD_INT 7
15286: EQUAL
15287: IFFALSE 15297
// sRadar := true ;
15289: LD_ADDR_EXP 65
15293: PUSH
15294: LD_INT 1
15296: ST_TO_ADDR
// if p3 = 8 then
15297: LD_VAR 0 3
15301: PUSH
15302: LD_INT 8
15304: EQUAL
15305: IFFALSE 15315
// sBunker := true ;
15307: LD_ADDR_EXP 66
15311: PUSH
15312: LD_INT 1
15314: ST_TO_ADDR
// if p3 = 9 then
15315: LD_VAR 0 3
15319: PUSH
15320: LD_INT 9
15322: EQUAL
15323: IFFALSE 15333
// sHack := true ;
15325: LD_ADDR_EXP 67
15329: PUSH
15330: LD_INT 1
15332: ST_TO_ADDR
// if p3 = 10 then
15333: LD_VAR 0 3
15337: PUSH
15338: LD_INT 10
15340: EQUAL
15341: IFFALSE 15351
// sFire := true ;
15343: LD_ADDR_EXP 68
15347: PUSH
15348: LD_INT 1
15350: ST_TO_ADDR
// if p3 = 11 then
15351: LD_VAR 0 3
15355: PUSH
15356: LD_INT 11
15358: EQUAL
15359: IFFALSE 15369
// sRefresh := true ;
15361: LD_ADDR_EXP 69
15365: PUSH
15366: LD_INT 1
15368: ST_TO_ADDR
// if p3 = 12 then
15369: LD_VAR 0 3
15373: PUSH
15374: LD_INT 12
15376: EQUAL
15377: IFFALSE 15387
// sExp := true ;
15379: LD_ADDR_EXP 70
15383: PUSH
15384: LD_INT 1
15386: ST_TO_ADDR
// if p3 = 13 then
15387: LD_VAR 0 3
15391: PUSH
15392: LD_INT 13
15394: EQUAL
15395: IFFALSE 15405
// sDepot := true ;
15397: LD_ADDR_EXP 71
15401: PUSH
15402: LD_INT 1
15404: ST_TO_ADDR
// if p3 = 14 then
15405: LD_VAR 0 3
15409: PUSH
15410: LD_INT 14
15412: EQUAL
15413: IFFALSE 15423
// sFlag := true ;
15415: LD_ADDR_EXP 72
15419: PUSH
15420: LD_INT 1
15422: ST_TO_ADDR
// if p3 = 15 then
15423: LD_VAR 0 3
15427: PUSH
15428: LD_INT 15
15430: EQUAL
15431: IFFALSE 15441
// sKamikadze := true ;
15433: LD_ADDR_EXP 80
15437: PUSH
15438: LD_INT 1
15440: ST_TO_ADDR
// if p3 = 16 then
15441: LD_VAR 0 3
15445: PUSH
15446: LD_INT 16
15448: EQUAL
15449: IFFALSE 15459
// sTroll := true ;
15451: LD_ADDR_EXP 81
15455: PUSH
15456: LD_INT 1
15458: ST_TO_ADDR
// if p3 = 17 then
15459: LD_VAR 0 3
15463: PUSH
15464: LD_INT 17
15466: EQUAL
15467: IFFALSE 15477
// sSlow := true ;
15469: LD_ADDR_EXP 82
15473: PUSH
15474: LD_INT 1
15476: ST_TO_ADDR
// if p3 = 18 then
15477: LD_VAR 0 3
15481: PUSH
15482: LD_INT 18
15484: EQUAL
15485: IFFALSE 15495
// sLack := true ;
15487: LD_ADDR_EXP 83
15491: PUSH
15492: LD_INT 1
15494: ST_TO_ADDR
// if p3 = 19 then
15495: LD_VAR 0 3
15499: PUSH
15500: LD_INT 19
15502: EQUAL
15503: IFFALSE 15513
// sTank := true ;
15505: LD_ADDR_EXP 85
15509: PUSH
15510: LD_INT 1
15512: ST_TO_ADDR
// if p3 = 20 then
15513: LD_VAR 0 3
15517: PUSH
15518: LD_INT 20
15520: EQUAL
15521: IFFALSE 15531
// sRemote := true ;
15523: LD_ADDR_EXP 86
15527: PUSH
15528: LD_INT 1
15530: ST_TO_ADDR
// if p3 = 21 then
15531: LD_VAR 0 3
15535: PUSH
15536: LD_INT 21
15538: EQUAL
15539: IFFALSE 15549
// sPowell := true ;
15541: LD_ADDR_EXP 87
15545: PUSH
15546: LD_INT 1
15548: ST_TO_ADDR
// if p3 = 22 then
15549: LD_VAR 0 3
15553: PUSH
15554: LD_INT 22
15556: EQUAL
15557: IFFALSE 15567
// sTeleport := true ;
15559: LD_ADDR_EXP 90
15563: PUSH
15564: LD_INT 1
15566: ST_TO_ADDR
// if p3 = 23 then
15567: LD_VAR 0 3
15571: PUSH
15572: LD_INT 23
15574: EQUAL
15575: IFFALSE 15585
// sOilTower := true ;
15577: LD_ADDR_EXP 92
15581: PUSH
15582: LD_INT 1
15584: ST_TO_ADDR
// if p3 = 24 then
15585: LD_VAR 0 3
15589: PUSH
15590: LD_INT 24
15592: EQUAL
15593: IFFALSE 15603
// sShovel := true ;
15595: LD_ADDR_EXP 93
15599: PUSH
15600: LD_INT 1
15602: ST_TO_ADDR
// if p3 = 25 then
15603: LD_VAR 0 3
15607: PUSH
15608: LD_INT 25
15610: EQUAL
15611: IFFALSE 15621
// sSheik := true ;
15613: LD_ADDR_EXP 94
15617: PUSH
15618: LD_INT 1
15620: ST_TO_ADDR
// if p3 = 26 then
15621: LD_VAR 0 3
15625: PUSH
15626: LD_INT 26
15628: EQUAL
15629: IFFALSE 15639
// sEarthquake := true ;
15631: LD_ADDR_EXP 96
15635: PUSH
15636: LD_INT 1
15638: ST_TO_ADDR
// if p3 = 27 then
15639: LD_VAR 0 3
15643: PUSH
15644: LD_INT 27
15646: EQUAL
15647: IFFALSE 15657
// sAI := true ;
15649: LD_ADDR_EXP 97
15653: PUSH
15654: LD_INT 1
15656: ST_TO_ADDR
// if p3 = 28 then
15657: LD_VAR 0 3
15661: PUSH
15662: LD_INT 28
15664: EQUAL
15665: IFFALSE 15675
// sCargo := true ;
15667: LD_ADDR_EXP 100
15671: PUSH
15672: LD_INT 1
15674: ST_TO_ADDR
// if p3 = 29 then
15675: LD_VAR 0 3
15679: PUSH
15680: LD_INT 29
15682: EQUAL
15683: IFFALSE 15693
// sDLaser := true ;
15685: LD_ADDR_EXP 101
15689: PUSH
15690: LD_INT 1
15692: ST_TO_ADDR
// if p3 = 30 then
15693: LD_VAR 0 3
15697: PUSH
15698: LD_INT 30
15700: EQUAL
15701: IFFALSE 15711
// sExchange := true ;
15703: LD_ADDR_EXP 102
15707: PUSH
15708: LD_INT 1
15710: ST_TO_ADDR
// if p3 = 31 then
15711: LD_VAR 0 3
15715: PUSH
15716: LD_INT 31
15718: EQUAL
15719: IFFALSE 15729
// sFac := true ;
15721: LD_ADDR_EXP 103
15725: PUSH
15726: LD_INT 1
15728: ST_TO_ADDR
// if p3 = 32 then
15729: LD_VAR 0 3
15733: PUSH
15734: LD_INT 32
15736: EQUAL
15737: IFFALSE 15747
// sPower := true ;
15739: LD_ADDR_EXP 104
15743: PUSH
15744: LD_INT 1
15746: ST_TO_ADDR
// if p3 = 33 then
15747: LD_VAR 0 3
15751: PUSH
15752: LD_INT 33
15754: EQUAL
15755: IFFALSE 15765
// sRandom := true ;
15757: LD_ADDR_EXP 105
15761: PUSH
15762: LD_INT 1
15764: ST_TO_ADDR
// if p3 = 34 then
15765: LD_VAR 0 3
15769: PUSH
15770: LD_INT 34
15772: EQUAL
15773: IFFALSE 15783
// sShield := true ;
15775: LD_ADDR_EXP 106
15779: PUSH
15780: LD_INT 1
15782: ST_TO_ADDR
// if p3 = 35 then
15783: LD_VAR 0 3
15787: PUSH
15788: LD_INT 35
15790: EQUAL
15791: IFFALSE 15801
// sTime := true ;
15793: LD_ADDR_EXP 107
15797: PUSH
15798: LD_INT 1
15800: ST_TO_ADDR
// if p3 = 36 then
15801: LD_VAR 0 3
15805: PUSH
15806: LD_INT 36
15808: EQUAL
15809: IFFALSE 15819
// sTools := true ;
15811: LD_ADDR_EXP 108
15815: PUSH
15816: LD_INT 1
15818: ST_TO_ADDR
// if p3 = 101 then
15819: LD_VAR 0 3
15823: PUSH
15824: LD_INT 101
15826: EQUAL
15827: IFFALSE 15837
// sSold := true ;
15829: LD_ADDR_EXP 73
15833: PUSH
15834: LD_INT 1
15836: ST_TO_ADDR
// if p3 = 102 then
15837: LD_VAR 0 3
15841: PUSH
15842: LD_INT 102
15844: EQUAL
15845: IFFALSE 15855
// sDiff := true ;
15847: LD_ADDR_EXP 74
15851: PUSH
15852: LD_INT 1
15854: ST_TO_ADDR
// if p3 = 103 then
15855: LD_VAR 0 3
15859: PUSH
15860: LD_INT 103
15862: EQUAL
15863: IFFALSE 15873
// sFog := true ;
15865: LD_ADDR_EXP 77
15869: PUSH
15870: LD_INT 1
15872: ST_TO_ADDR
// if p3 = 104 then
15873: LD_VAR 0 3
15877: PUSH
15878: LD_INT 104
15880: EQUAL
15881: IFFALSE 15891
// sReset := true ;
15883: LD_ADDR_EXP 78
15887: PUSH
15888: LD_INT 1
15890: ST_TO_ADDR
// if p3 = 105 then
15891: LD_VAR 0 3
15895: PUSH
15896: LD_INT 105
15898: EQUAL
15899: IFFALSE 15909
// sSun := true ;
15901: LD_ADDR_EXP 79
15905: PUSH
15906: LD_INT 1
15908: ST_TO_ADDR
// if p3 = 106 then
15909: LD_VAR 0 3
15913: PUSH
15914: LD_INT 106
15916: EQUAL
15917: IFFALSE 15927
// sTiger := true ;
15919: LD_ADDR_EXP 75
15923: PUSH
15924: LD_INT 1
15926: ST_TO_ADDR
// if p3 = 107 then
15927: LD_VAR 0 3
15931: PUSH
15932: LD_INT 107
15934: EQUAL
15935: IFFALSE 15945
// sBomb := true ;
15937: LD_ADDR_EXP 76
15941: PUSH
15942: LD_INT 1
15944: ST_TO_ADDR
// if p3 = 108 then
15945: LD_VAR 0 3
15949: PUSH
15950: LD_INT 108
15952: EQUAL
15953: IFFALSE 15963
// sWound := true ;
15955: LD_ADDR_EXP 84
15959: PUSH
15960: LD_INT 1
15962: ST_TO_ADDR
// if p3 = 109 then
15963: LD_VAR 0 3
15967: PUSH
15968: LD_INT 109
15970: EQUAL
15971: IFFALSE 15981
// sBetray := true ;
15973: LD_ADDR_EXP 88
15977: PUSH
15978: LD_INT 1
15980: ST_TO_ADDR
// if p3 = 110 then
15981: LD_VAR 0 3
15985: PUSH
15986: LD_INT 110
15988: EQUAL
15989: IFFALSE 15999
// sContamin := true ;
15991: LD_ADDR_EXP 89
15995: PUSH
15996: LD_INT 1
15998: ST_TO_ADDR
// if p3 = 111 then
15999: LD_VAR 0 3
16003: PUSH
16004: LD_INT 111
16006: EQUAL
16007: IFFALSE 16017
// sOil := true ;
16009: LD_ADDR_EXP 91
16013: PUSH
16014: LD_INT 1
16016: ST_TO_ADDR
// if p3 = 112 then
16017: LD_VAR 0 3
16021: PUSH
16022: LD_INT 112
16024: EQUAL
16025: IFFALSE 16035
// sStu := true ;
16027: LD_ADDR_EXP 95
16031: PUSH
16032: LD_INT 1
16034: ST_TO_ADDR
// if p3 = 113 then
16035: LD_VAR 0 3
16039: PUSH
16040: LD_INT 113
16042: EQUAL
16043: IFFALSE 16053
// sBazooka := true ;
16045: LD_ADDR_EXP 98
16049: PUSH
16050: LD_INT 1
16052: ST_TO_ADDR
// if p3 = 114 then
16053: LD_VAR 0 3
16057: PUSH
16058: LD_INT 114
16060: EQUAL
16061: IFFALSE 16071
// sMortar := true ;
16063: LD_ADDR_EXP 99
16067: PUSH
16068: LD_INT 1
16070: ST_TO_ADDR
// if p3 = 115 then
16071: LD_VAR 0 3
16075: PUSH
16076: LD_INT 115
16078: EQUAL
16079: IFFALSE 16089
// sRanger := true ;
16081: LD_ADDR_EXP 109
16085: PUSH
16086: LD_INT 1
16088: ST_TO_ADDR
// end ; if p2 = 101 then
16089: LD_VAR 0 2
16093: PUSH
16094: LD_INT 101
16096: EQUAL
16097: IFFALSE 16225
// begin case p3 of 1 :
16099: LD_VAR 0 3
16103: PUSH
16104: LD_INT 1
16106: DOUBLE
16107: EQUAL
16108: IFTRUE 16112
16110: GO 16119
16112: POP
// hHackUnlimitedResources ; 2 :
16113: CALL 27262 0 0
16117: GO 16225
16119: LD_INT 2
16121: DOUBLE
16122: EQUAL
16123: IFTRUE 16127
16125: GO 16134
16127: POP
// hHackSetLevel10 ; 3 :
16128: CALL 27395 0 0
16132: GO 16225
16134: LD_INT 3
16136: DOUBLE
16137: EQUAL
16138: IFTRUE 16142
16140: GO 16149
16142: POP
// hHackSetLevel10YourUnits ; 4 :
16143: CALL 27480 0 0
16147: GO 16225
16149: LD_INT 4
16151: DOUBLE
16152: EQUAL
16153: IFTRUE 16157
16155: GO 16164
16157: POP
// hHackInvincible ; 5 :
16158: CALL 27928 0 0
16162: GO 16225
16164: LD_INT 5
16166: DOUBLE
16167: EQUAL
16168: IFTRUE 16172
16170: GO 16179
16172: POP
// hHackInvisible ; 6 :
16173: CALL 28039 0 0
16177: GO 16225
16179: LD_INT 6
16181: DOUBLE
16182: EQUAL
16183: IFTRUE 16187
16185: GO 16194
16187: POP
// hHackChangeYourSide ; 7 :
16188: CALL 28096 0 0
16192: GO 16225
16194: LD_INT 7
16196: DOUBLE
16197: EQUAL
16198: IFTRUE 16202
16200: GO 16209
16202: POP
// hHackChangeUnitSide ; 8 :
16203: CALL 28138 0 0
16207: GO 16225
16209: LD_INT 8
16211: DOUBLE
16212: EQUAL
16213: IFTRUE 16217
16215: GO 16224
16217: POP
// hHackFog ; end ;
16218: CALL 28239 0 0
16222: GO 16225
16224: POP
// end ; end ;
16225: LD_VAR 0 7
16229: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
16230: GO 16232
16232: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
16233: LD_STRING initStreamRollete();
16235: PPUSH
16236: CALL_OW 559
// InitStreamMode ;
16240: CALL 16249 0 0
// DefineStreamItems ( ) ;
16244: CALL 16689 0 0
// end ;
16248: END
// function InitStreamMode ; begin
16249: LD_INT 0
16251: PPUSH
// streamModeActive := false ;
16252: LD_ADDR_EXP 56
16256: PUSH
16257: LD_INT 0
16259: ST_TO_ADDR
// normalCounter := 36 ;
16260: LD_ADDR_EXP 57
16264: PUSH
16265: LD_INT 36
16267: ST_TO_ADDR
// hardcoreCounter := 16 ;
16268: LD_ADDR_EXP 58
16272: PUSH
16273: LD_INT 16
16275: ST_TO_ADDR
// sRocket := false ;
16276: LD_ADDR_EXP 61
16280: PUSH
16281: LD_INT 0
16283: ST_TO_ADDR
// sSpeed := false ;
16284: LD_ADDR_EXP 60
16288: PUSH
16289: LD_INT 0
16291: ST_TO_ADDR
// sEngine := false ;
16292: LD_ADDR_EXP 62
16296: PUSH
16297: LD_INT 0
16299: ST_TO_ADDR
// sSpec := false ;
16300: LD_ADDR_EXP 59
16304: PUSH
16305: LD_INT 0
16307: ST_TO_ADDR
// sLevel := false ;
16308: LD_ADDR_EXP 63
16312: PUSH
16313: LD_INT 0
16315: ST_TO_ADDR
// sArmoury := false ;
16316: LD_ADDR_EXP 64
16320: PUSH
16321: LD_INT 0
16323: ST_TO_ADDR
// sRadar := false ;
16324: LD_ADDR_EXP 65
16328: PUSH
16329: LD_INT 0
16331: ST_TO_ADDR
// sBunker := false ;
16332: LD_ADDR_EXP 66
16336: PUSH
16337: LD_INT 0
16339: ST_TO_ADDR
// sHack := false ;
16340: LD_ADDR_EXP 67
16344: PUSH
16345: LD_INT 0
16347: ST_TO_ADDR
// sFire := false ;
16348: LD_ADDR_EXP 68
16352: PUSH
16353: LD_INT 0
16355: ST_TO_ADDR
// sRefresh := false ;
16356: LD_ADDR_EXP 69
16360: PUSH
16361: LD_INT 0
16363: ST_TO_ADDR
// sExp := false ;
16364: LD_ADDR_EXP 70
16368: PUSH
16369: LD_INT 0
16371: ST_TO_ADDR
// sDepot := false ;
16372: LD_ADDR_EXP 71
16376: PUSH
16377: LD_INT 0
16379: ST_TO_ADDR
// sFlag := false ;
16380: LD_ADDR_EXP 72
16384: PUSH
16385: LD_INT 0
16387: ST_TO_ADDR
// sKamikadze := false ;
16388: LD_ADDR_EXP 80
16392: PUSH
16393: LD_INT 0
16395: ST_TO_ADDR
// sTroll := false ;
16396: LD_ADDR_EXP 81
16400: PUSH
16401: LD_INT 0
16403: ST_TO_ADDR
// sSlow := false ;
16404: LD_ADDR_EXP 82
16408: PUSH
16409: LD_INT 0
16411: ST_TO_ADDR
// sLack := false ;
16412: LD_ADDR_EXP 83
16416: PUSH
16417: LD_INT 0
16419: ST_TO_ADDR
// sTank := false ;
16420: LD_ADDR_EXP 85
16424: PUSH
16425: LD_INT 0
16427: ST_TO_ADDR
// sRemote := false ;
16428: LD_ADDR_EXP 86
16432: PUSH
16433: LD_INT 0
16435: ST_TO_ADDR
// sPowell := false ;
16436: LD_ADDR_EXP 87
16440: PUSH
16441: LD_INT 0
16443: ST_TO_ADDR
// sTeleport := false ;
16444: LD_ADDR_EXP 90
16448: PUSH
16449: LD_INT 0
16451: ST_TO_ADDR
// sOilTower := false ;
16452: LD_ADDR_EXP 92
16456: PUSH
16457: LD_INT 0
16459: ST_TO_ADDR
// sShovel := false ;
16460: LD_ADDR_EXP 93
16464: PUSH
16465: LD_INT 0
16467: ST_TO_ADDR
// sSheik := false ;
16468: LD_ADDR_EXP 94
16472: PUSH
16473: LD_INT 0
16475: ST_TO_ADDR
// sEarthquake := false ;
16476: LD_ADDR_EXP 96
16480: PUSH
16481: LD_INT 0
16483: ST_TO_ADDR
// sAI := false ;
16484: LD_ADDR_EXP 97
16488: PUSH
16489: LD_INT 0
16491: ST_TO_ADDR
// sCargo := false ;
16492: LD_ADDR_EXP 100
16496: PUSH
16497: LD_INT 0
16499: ST_TO_ADDR
// sDLaser := false ;
16500: LD_ADDR_EXP 101
16504: PUSH
16505: LD_INT 0
16507: ST_TO_ADDR
// sExchange := false ;
16508: LD_ADDR_EXP 102
16512: PUSH
16513: LD_INT 0
16515: ST_TO_ADDR
// sFac := false ;
16516: LD_ADDR_EXP 103
16520: PUSH
16521: LD_INT 0
16523: ST_TO_ADDR
// sPower := false ;
16524: LD_ADDR_EXP 104
16528: PUSH
16529: LD_INT 0
16531: ST_TO_ADDR
// sRandom := false ;
16532: LD_ADDR_EXP 105
16536: PUSH
16537: LD_INT 0
16539: ST_TO_ADDR
// sShield := false ;
16540: LD_ADDR_EXP 106
16544: PUSH
16545: LD_INT 0
16547: ST_TO_ADDR
// sTime := false ;
16548: LD_ADDR_EXP 107
16552: PUSH
16553: LD_INT 0
16555: ST_TO_ADDR
// sTools := false ;
16556: LD_ADDR_EXP 108
16560: PUSH
16561: LD_INT 0
16563: ST_TO_ADDR
// sSold := false ;
16564: LD_ADDR_EXP 73
16568: PUSH
16569: LD_INT 0
16571: ST_TO_ADDR
// sDiff := false ;
16572: LD_ADDR_EXP 74
16576: PUSH
16577: LD_INT 0
16579: ST_TO_ADDR
// sFog := false ;
16580: LD_ADDR_EXP 77
16584: PUSH
16585: LD_INT 0
16587: ST_TO_ADDR
// sReset := false ;
16588: LD_ADDR_EXP 78
16592: PUSH
16593: LD_INT 0
16595: ST_TO_ADDR
// sSun := false ;
16596: LD_ADDR_EXP 79
16600: PUSH
16601: LD_INT 0
16603: ST_TO_ADDR
// sTiger := false ;
16604: LD_ADDR_EXP 75
16608: PUSH
16609: LD_INT 0
16611: ST_TO_ADDR
// sBomb := false ;
16612: LD_ADDR_EXP 76
16616: PUSH
16617: LD_INT 0
16619: ST_TO_ADDR
// sWound := false ;
16620: LD_ADDR_EXP 84
16624: PUSH
16625: LD_INT 0
16627: ST_TO_ADDR
// sBetray := false ;
16628: LD_ADDR_EXP 88
16632: PUSH
16633: LD_INT 0
16635: ST_TO_ADDR
// sContamin := false ;
16636: LD_ADDR_EXP 89
16640: PUSH
16641: LD_INT 0
16643: ST_TO_ADDR
// sOil := false ;
16644: LD_ADDR_EXP 91
16648: PUSH
16649: LD_INT 0
16651: ST_TO_ADDR
// sStu := false ;
16652: LD_ADDR_EXP 95
16656: PUSH
16657: LD_INT 0
16659: ST_TO_ADDR
// sBazooka := false ;
16660: LD_ADDR_EXP 98
16664: PUSH
16665: LD_INT 0
16667: ST_TO_ADDR
// sMortar := false ;
16668: LD_ADDR_EXP 99
16672: PUSH
16673: LD_INT 0
16675: ST_TO_ADDR
// sRanger := false ;
16676: LD_ADDR_EXP 109
16680: PUSH
16681: LD_INT 0
16683: ST_TO_ADDR
// end ;
16684: LD_VAR 0 1
16688: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
16689: LD_INT 0
16691: PPUSH
16692: PPUSH
16693: PPUSH
16694: PPUSH
16695: PPUSH
// result := [ ] ;
16696: LD_ADDR_VAR 0 1
16700: PUSH
16701: EMPTY
16702: ST_TO_ADDR
// if campaign_id = 1 then
16703: LD_OWVAR 69
16707: PUSH
16708: LD_INT 1
16710: EQUAL
16711: IFFALSE 19649
// begin case mission_number of 1 :
16713: LD_OWVAR 70
16717: PUSH
16718: LD_INT 1
16720: DOUBLE
16721: EQUAL
16722: IFTRUE 16726
16724: GO 16790
16726: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
16727: LD_ADDR_VAR 0 1
16731: PUSH
16732: LD_INT 2
16734: PUSH
16735: LD_INT 4
16737: PUSH
16738: LD_INT 11
16740: PUSH
16741: LD_INT 12
16743: PUSH
16744: LD_INT 15
16746: PUSH
16747: LD_INT 16
16749: PUSH
16750: LD_INT 22
16752: PUSH
16753: LD_INT 23
16755: PUSH
16756: LD_INT 26
16758: PUSH
16759: EMPTY
16760: LIST
16761: LIST
16762: LIST
16763: LIST
16764: LIST
16765: LIST
16766: LIST
16767: LIST
16768: LIST
16769: PUSH
16770: LD_INT 101
16772: PUSH
16773: LD_INT 102
16775: PUSH
16776: LD_INT 106
16778: PUSH
16779: EMPTY
16780: LIST
16781: LIST
16782: LIST
16783: PUSH
16784: EMPTY
16785: LIST
16786: LIST
16787: ST_TO_ADDR
16788: GO 19647
16790: LD_INT 2
16792: DOUBLE
16793: EQUAL
16794: IFTRUE 16798
16796: GO 16870
16798: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
16799: LD_ADDR_VAR 0 1
16803: PUSH
16804: LD_INT 2
16806: PUSH
16807: LD_INT 4
16809: PUSH
16810: LD_INT 11
16812: PUSH
16813: LD_INT 12
16815: PUSH
16816: LD_INT 15
16818: PUSH
16819: LD_INT 16
16821: PUSH
16822: LD_INT 22
16824: PUSH
16825: LD_INT 23
16827: PUSH
16828: LD_INT 26
16830: PUSH
16831: EMPTY
16832: LIST
16833: LIST
16834: LIST
16835: LIST
16836: LIST
16837: LIST
16838: LIST
16839: LIST
16840: LIST
16841: PUSH
16842: LD_INT 101
16844: PUSH
16845: LD_INT 102
16847: PUSH
16848: LD_INT 105
16850: PUSH
16851: LD_INT 106
16853: PUSH
16854: LD_INT 108
16856: PUSH
16857: EMPTY
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: PUSH
16864: EMPTY
16865: LIST
16866: LIST
16867: ST_TO_ADDR
16868: GO 19647
16870: LD_INT 3
16872: DOUBLE
16873: EQUAL
16874: IFTRUE 16878
16876: GO 16954
16878: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
16879: LD_ADDR_VAR 0 1
16883: PUSH
16884: LD_INT 2
16886: PUSH
16887: LD_INT 4
16889: PUSH
16890: LD_INT 5
16892: PUSH
16893: LD_INT 11
16895: PUSH
16896: LD_INT 12
16898: PUSH
16899: LD_INT 15
16901: PUSH
16902: LD_INT 16
16904: PUSH
16905: LD_INT 22
16907: PUSH
16908: LD_INT 26
16910: PUSH
16911: LD_INT 36
16913: PUSH
16914: EMPTY
16915: LIST
16916: LIST
16917: LIST
16918: LIST
16919: LIST
16920: LIST
16921: LIST
16922: LIST
16923: LIST
16924: LIST
16925: PUSH
16926: LD_INT 101
16928: PUSH
16929: LD_INT 102
16931: PUSH
16932: LD_INT 105
16934: PUSH
16935: LD_INT 106
16937: PUSH
16938: LD_INT 108
16940: PUSH
16941: EMPTY
16942: LIST
16943: LIST
16944: LIST
16945: LIST
16946: LIST
16947: PUSH
16948: EMPTY
16949: LIST
16950: LIST
16951: ST_TO_ADDR
16952: GO 19647
16954: LD_INT 4
16956: DOUBLE
16957: EQUAL
16958: IFTRUE 16962
16960: GO 17046
16962: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
16963: LD_ADDR_VAR 0 1
16967: PUSH
16968: LD_INT 2
16970: PUSH
16971: LD_INT 4
16973: PUSH
16974: LD_INT 5
16976: PUSH
16977: LD_INT 8
16979: PUSH
16980: LD_INT 11
16982: PUSH
16983: LD_INT 12
16985: PUSH
16986: LD_INT 15
16988: PUSH
16989: LD_INT 16
16991: PUSH
16992: LD_INT 22
16994: PUSH
16995: LD_INT 23
16997: PUSH
16998: LD_INT 26
17000: PUSH
17001: LD_INT 36
17003: PUSH
17004: EMPTY
17005: LIST
17006: LIST
17007: LIST
17008: LIST
17009: LIST
17010: LIST
17011: LIST
17012: LIST
17013: LIST
17014: LIST
17015: LIST
17016: LIST
17017: PUSH
17018: LD_INT 101
17020: PUSH
17021: LD_INT 102
17023: PUSH
17024: LD_INT 105
17026: PUSH
17027: LD_INT 106
17029: PUSH
17030: LD_INT 108
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: PUSH
17040: EMPTY
17041: LIST
17042: LIST
17043: ST_TO_ADDR
17044: GO 19647
17046: LD_INT 5
17048: DOUBLE
17049: EQUAL
17050: IFTRUE 17054
17052: GO 17154
17054: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
17055: LD_ADDR_VAR 0 1
17059: PUSH
17060: LD_INT 2
17062: PUSH
17063: LD_INT 4
17065: PUSH
17066: LD_INT 5
17068: PUSH
17069: LD_INT 6
17071: PUSH
17072: LD_INT 8
17074: PUSH
17075: LD_INT 11
17077: PUSH
17078: LD_INT 12
17080: PUSH
17081: LD_INT 15
17083: PUSH
17084: LD_INT 16
17086: PUSH
17087: LD_INT 22
17089: PUSH
17090: LD_INT 23
17092: PUSH
17093: LD_INT 25
17095: PUSH
17096: LD_INT 26
17098: PUSH
17099: LD_INT 36
17101: PUSH
17102: EMPTY
17103: LIST
17104: LIST
17105: LIST
17106: LIST
17107: LIST
17108: LIST
17109: LIST
17110: LIST
17111: LIST
17112: LIST
17113: LIST
17114: LIST
17115: LIST
17116: LIST
17117: PUSH
17118: LD_INT 101
17120: PUSH
17121: LD_INT 102
17123: PUSH
17124: LD_INT 105
17126: PUSH
17127: LD_INT 106
17129: PUSH
17130: LD_INT 108
17132: PUSH
17133: LD_INT 109
17135: PUSH
17136: LD_INT 112
17138: PUSH
17139: EMPTY
17140: LIST
17141: LIST
17142: LIST
17143: LIST
17144: LIST
17145: LIST
17146: LIST
17147: PUSH
17148: EMPTY
17149: LIST
17150: LIST
17151: ST_TO_ADDR
17152: GO 19647
17154: LD_INT 6
17156: DOUBLE
17157: EQUAL
17158: IFTRUE 17162
17160: GO 17282
17162: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
17163: LD_ADDR_VAR 0 1
17167: PUSH
17168: LD_INT 2
17170: PUSH
17171: LD_INT 4
17173: PUSH
17174: LD_INT 5
17176: PUSH
17177: LD_INT 6
17179: PUSH
17180: LD_INT 8
17182: PUSH
17183: LD_INT 11
17185: PUSH
17186: LD_INT 12
17188: PUSH
17189: LD_INT 15
17191: PUSH
17192: LD_INT 16
17194: PUSH
17195: LD_INT 20
17197: PUSH
17198: LD_INT 21
17200: PUSH
17201: LD_INT 22
17203: PUSH
17204: LD_INT 23
17206: PUSH
17207: LD_INT 25
17209: PUSH
17210: LD_INT 26
17212: PUSH
17213: LD_INT 30
17215: PUSH
17216: LD_INT 31
17218: PUSH
17219: LD_INT 32
17221: PUSH
17222: LD_INT 36
17224: PUSH
17225: EMPTY
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: LIST
17241: LIST
17242: LIST
17243: LIST
17244: LIST
17245: PUSH
17246: LD_INT 101
17248: PUSH
17249: LD_INT 102
17251: PUSH
17252: LD_INT 105
17254: PUSH
17255: LD_INT 106
17257: PUSH
17258: LD_INT 108
17260: PUSH
17261: LD_INT 109
17263: PUSH
17264: LD_INT 112
17266: PUSH
17267: EMPTY
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: PUSH
17276: EMPTY
17277: LIST
17278: LIST
17279: ST_TO_ADDR
17280: GO 19647
17282: LD_INT 7
17284: DOUBLE
17285: EQUAL
17286: IFTRUE 17290
17288: GO 17390
17290: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
17291: LD_ADDR_VAR 0 1
17295: PUSH
17296: LD_INT 2
17298: PUSH
17299: LD_INT 4
17301: PUSH
17302: LD_INT 5
17304: PUSH
17305: LD_INT 7
17307: PUSH
17308: LD_INT 11
17310: PUSH
17311: LD_INT 12
17313: PUSH
17314: LD_INT 15
17316: PUSH
17317: LD_INT 16
17319: PUSH
17320: LD_INT 20
17322: PUSH
17323: LD_INT 21
17325: PUSH
17326: LD_INT 22
17328: PUSH
17329: LD_INT 23
17331: PUSH
17332: LD_INT 25
17334: PUSH
17335: LD_INT 26
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: LIST
17342: LIST
17343: LIST
17344: LIST
17345: LIST
17346: LIST
17347: LIST
17348: LIST
17349: LIST
17350: LIST
17351: LIST
17352: LIST
17353: PUSH
17354: LD_INT 101
17356: PUSH
17357: LD_INT 102
17359: PUSH
17360: LD_INT 103
17362: PUSH
17363: LD_INT 105
17365: PUSH
17366: LD_INT 106
17368: PUSH
17369: LD_INT 108
17371: PUSH
17372: LD_INT 112
17374: PUSH
17375: EMPTY
17376: LIST
17377: LIST
17378: LIST
17379: LIST
17380: LIST
17381: LIST
17382: LIST
17383: PUSH
17384: EMPTY
17385: LIST
17386: LIST
17387: ST_TO_ADDR
17388: GO 19647
17390: LD_INT 8
17392: DOUBLE
17393: EQUAL
17394: IFTRUE 17398
17396: GO 17526
17398: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
17399: LD_ADDR_VAR 0 1
17403: PUSH
17404: LD_INT 2
17406: PUSH
17407: LD_INT 4
17409: PUSH
17410: LD_INT 5
17412: PUSH
17413: LD_INT 6
17415: PUSH
17416: LD_INT 7
17418: PUSH
17419: LD_INT 8
17421: PUSH
17422: LD_INT 11
17424: PUSH
17425: LD_INT 12
17427: PUSH
17428: LD_INT 15
17430: PUSH
17431: LD_INT 16
17433: PUSH
17434: LD_INT 20
17436: PUSH
17437: LD_INT 21
17439: PUSH
17440: LD_INT 22
17442: PUSH
17443: LD_INT 23
17445: PUSH
17446: LD_INT 25
17448: PUSH
17449: LD_INT 26
17451: PUSH
17452: LD_INT 30
17454: PUSH
17455: LD_INT 31
17457: PUSH
17458: LD_INT 32
17460: PUSH
17461: LD_INT 36
17463: PUSH
17464: EMPTY
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: PUSH
17486: LD_INT 101
17488: PUSH
17489: LD_INT 102
17491: PUSH
17492: LD_INT 103
17494: PUSH
17495: LD_INT 105
17497: PUSH
17498: LD_INT 106
17500: PUSH
17501: LD_INT 108
17503: PUSH
17504: LD_INT 109
17506: PUSH
17507: LD_INT 112
17509: PUSH
17510: EMPTY
17511: LIST
17512: LIST
17513: LIST
17514: LIST
17515: LIST
17516: LIST
17517: LIST
17518: LIST
17519: PUSH
17520: EMPTY
17521: LIST
17522: LIST
17523: ST_TO_ADDR
17524: GO 19647
17526: LD_INT 9
17528: DOUBLE
17529: EQUAL
17530: IFTRUE 17534
17532: GO 17670
17534: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
17535: LD_ADDR_VAR 0 1
17539: PUSH
17540: LD_INT 2
17542: PUSH
17543: LD_INT 4
17545: PUSH
17546: LD_INT 5
17548: PUSH
17549: LD_INT 6
17551: PUSH
17552: LD_INT 7
17554: PUSH
17555: LD_INT 8
17557: PUSH
17558: LD_INT 11
17560: PUSH
17561: LD_INT 12
17563: PUSH
17564: LD_INT 15
17566: PUSH
17567: LD_INT 16
17569: PUSH
17570: LD_INT 20
17572: PUSH
17573: LD_INT 21
17575: PUSH
17576: LD_INT 22
17578: PUSH
17579: LD_INT 23
17581: PUSH
17582: LD_INT 25
17584: PUSH
17585: LD_INT 26
17587: PUSH
17588: LD_INT 28
17590: PUSH
17591: LD_INT 30
17593: PUSH
17594: LD_INT 31
17596: PUSH
17597: LD_INT 32
17599: PUSH
17600: LD_INT 36
17602: PUSH
17603: EMPTY
17604: LIST
17605: LIST
17606: LIST
17607: LIST
17608: LIST
17609: LIST
17610: LIST
17611: LIST
17612: LIST
17613: LIST
17614: LIST
17615: LIST
17616: LIST
17617: LIST
17618: LIST
17619: LIST
17620: LIST
17621: LIST
17622: LIST
17623: LIST
17624: LIST
17625: PUSH
17626: LD_INT 101
17628: PUSH
17629: LD_INT 102
17631: PUSH
17632: LD_INT 103
17634: PUSH
17635: LD_INT 105
17637: PUSH
17638: LD_INT 106
17640: PUSH
17641: LD_INT 108
17643: PUSH
17644: LD_INT 109
17646: PUSH
17647: LD_INT 112
17649: PUSH
17650: LD_INT 114
17652: PUSH
17653: EMPTY
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: LIST
17660: LIST
17661: LIST
17662: LIST
17663: PUSH
17664: EMPTY
17665: LIST
17666: LIST
17667: ST_TO_ADDR
17668: GO 19647
17670: LD_INT 10
17672: DOUBLE
17673: EQUAL
17674: IFTRUE 17678
17676: GO 17862
17678: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
17679: LD_ADDR_VAR 0 1
17683: PUSH
17684: LD_INT 2
17686: PUSH
17687: LD_INT 4
17689: PUSH
17690: LD_INT 5
17692: PUSH
17693: LD_INT 6
17695: PUSH
17696: LD_INT 7
17698: PUSH
17699: LD_INT 8
17701: PUSH
17702: LD_INT 9
17704: PUSH
17705: LD_INT 10
17707: PUSH
17708: LD_INT 11
17710: PUSH
17711: LD_INT 12
17713: PUSH
17714: LD_INT 13
17716: PUSH
17717: LD_INT 14
17719: PUSH
17720: LD_INT 15
17722: PUSH
17723: LD_INT 16
17725: PUSH
17726: LD_INT 17
17728: PUSH
17729: LD_INT 18
17731: PUSH
17732: LD_INT 19
17734: PUSH
17735: LD_INT 20
17737: PUSH
17738: LD_INT 21
17740: PUSH
17741: LD_INT 22
17743: PUSH
17744: LD_INT 23
17746: PUSH
17747: LD_INT 24
17749: PUSH
17750: LD_INT 25
17752: PUSH
17753: LD_INT 26
17755: PUSH
17756: LD_INT 28
17758: PUSH
17759: LD_INT 30
17761: PUSH
17762: LD_INT 31
17764: PUSH
17765: LD_INT 32
17767: PUSH
17768: LD_INT 36
17770: PUSH
17771: EMPTY
17772: LIST
17773: LIST
17774: LIST
17775: LIST
17776: LIST
17777: LIST
17778: LIST
17779: LIST
17780: LIST
17781: LIST
17782: LIST
17783: LIST
17784: LIST
17785: LIST
17786: LIST
17787: LIST
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: LIST
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: PUSH
17802: LD_INT 101
17804: PUSH
17805: LD_INT 102
17807: PUSH
17808: LD_INT 103
17810: PUSH
17811: LD_INT 104
17813: PUSH
17814: LD_INT 105
17816: PUSH
17817: LD_INT 106
17819: PUSH
17820: LD_INT 107
17822: PUSH
17823: LD_INT 108
17825: PUSH
17826: LD_INT 109
17828: PUSH
17829: LD_INT 110
17831: PUSH
17832: LD_INT 111
17834: PUSH
17835: LD_INT 112
17837: PUSH
17838: LD_INT 114
17840: PUSH
17841: EMPTY
17842: LIST
17843: LIST
17844: LIST
17845: LIST
17846: LIST
17847: LIST
17848: LIST
17849: LIST
17850: LIST
17851: LIST
17852: LIST
17853: LIST
17854: LIST
17855: PUSH
17856: EMPTY
17857: LIST
17858: LIST
17859: ST_TO_ADDR
17860: GO 19647
17862: LD_INT 11
17864: DOUBLE
17865: EQUAL
17866: IFTRUE 17870
17868: GO 18062
17870: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
17871: LD_ADDR_VAR 0 1
17875: PUSH
17876: LD_INT 2
17878: PUSH
17879: LD_INT 3
17881: PUSH
17882: LD_INT 4
17884: PUSH
17885: LD_INT 5
17887: PUSH
17888: LD_INT 6
17890: PUSH
17891: LD_INT 7
17893: PUSH
17894: LD_INT 8
17896: PUSH
17897: LD_INT 9
17899: PUSH
17900: LD_INT 10
17902: PUSH
17903: LD_INT 11
17905: PUSH
17906: LD_INT 12
17908: PUSH
17909: LD_INT 13
17911: PUSH
17912: LD_INT 14
17914: PUSH
17915: LD_INT 15
17917: PUSH
17918: LD_INT 16
17920: PUSH
17921: LD_INT 17
17923: PUSH
17924: LD_INT 18
17926: PUSH
17927: LD_INT 19
17929: PUSH
17930: LD_INT 20
17932: PUSH
17933: LD_INT 21
17935: PUSH
17936: LD_INT 22
17938: PUSH
17939: LD_INT 23
17941: PUSH
17942: LD_INT 24
17944: PUSH
17945: LD_INT 25
17947: PUSH
17948: LD_INT 26
17950: PUSH
17951: LD_INT 28
17953: PUSH
17954: LD_INT 30
17956: PUSH
17957: LD_INT 31
17959: PUSH
17960: LD_INT 32
17962: PUSH
17963: LD_INT 34
17965: PUSH
17966: LD_INT 36
17968: PUSH
17969: EMPTY
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: LIST
17982: LIST
17983: LIST
17984: LIST
17985: LIST
17986: LIST
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: LIST
17997: LIST
17998: LIST
17999: LIST
18000: LIST
18001: PUSH
18002: LD_INT 101
18004: PUSH
18005: LD_INT 102
18007: PUSH
18008: LD_INT 103
18010: PUSH
18011: LD_INT 104
18013: PUSH
18014: LD_INT 105
18016: PUSH
18017: LD_INT 106
18019: PUSH
18020: LD_INT 107
18022: PUSH
18023: LD_INT 108
18025: PUSH
18026: LD_INT 109
18028: PUSH
18029: LD_INT 110
18031: PUSH
18032: LD_INT 111
18034: PUSH
18035: LD_INT 112
18037: PUSH
18038: LD_INT 114
18040: PUSH
18041: EMPTY
18042: LIST
18043: LIST
18044: LIST
18045: LIST
18046: LIST
18047: LIST
18048: LIST
18049: LIST
18050: LIST
18051: LIST
18052: LIST
18053: LIST
18054: LIST
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: ST_TO_ADDR
18060: GO 19647
18062: LD_INT 12
18064: DOUBLE
18065: EQUAL
18066: IFTRUE 18070
18068: GO 18278
18070: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
18071: LD_ADDR_VAR 0 1
18075: PUSH
18076: LD_INT 1
18078: PUSH
18079: LD_INT 2
18081: PUSH
18082: LD_INT 3
18084: PUSH
18085: LD_INT 4
18087: PUSH
18088: LD_INT 5
18090: PUSH
18091: LD_INT 6
18093: PUSH
18094: LD_INT 7
18096: PUSH
18097: LD_INT 8
18099: PUSH
18100: LD_INT 9
18102: PUSH
18103: LD_INT 10
18105: PUSH
18106: LD_INT 11
18108: PUSH
18109: LD_INT 12
18111: PUSH
18112: LD_INT 13
18114: PUSH
18115: LD_INT 14
18117: PUSH
18118: LD_INT 15
18120: PUSH
18121: LD_INT 16
18123: PUSH
18124: LD_INT 17
18126: PUSH
18127: LD_INT 18
18129: PUSH
18130: LD_INT 19
18132: PUSH
18133: LD_INT 20
18135: PUSH
18136: LD_INT 21
18138: PUSH
18139: LD_INT 22
18141: PUSH
18142: LD_INT 23
18144: PUSH
18145: LD_INT 24
18147: PUSH
18148: LD_INT 25
18150: PUSH
18151: LD_INT 26
18153: PUSH
18154: LD_INT 27
18156: PUSH
18157: LD_INT 28
18159: PUSH
18160: LD_INT 30
18162: PUSH
18163: LD_INT 31
18165: PUSH
18166: LD_INT 32
18168: PUSH
18169: LD_INT 33
18171: PUSH
18172: LD_INT 34
18174: PUSH
18175: LD_INT 36
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: LIST
18182: LIST
18183: LIST
18184: LIST
18185: LIST
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: LIST
18193: LIST
18194: LIST
18195: LIST
18196: LIST
18197: LIST
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: LIST
18203: LIST
18204: LIST
18205: LIST
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: PUSH
18214: LD_INT 101
18216: PUSH
18217: LD_INT 102
18219: PUSH
18220: LD_INT 103
18222: PUSH
18223: LD_INT 104
18225: PUSH
18226: LD_INT 105
18228: PUSH
18229: LD_INT 106
18231: PUSH
18232: LD_INT 107
18234: PUSH
18235: LD_INT 108
18237: PUSH
18238: LD_INT 109
18240: PUSH
18241: LD_INT 110
18243: PUSH
18244: LD_INT 111
18246: PUSH
18247: LD_INT 112
18249: PUSH
18250: LD_INT 113
18252: PUSH
18253: LD_INT 114
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: LIST
18264: LIST
18265: LIST
18266: LIST
18267: LIST
18268: LIST
18269: LIST
18270: LIST
18271: PUSH
18272: EMPTY
18273: LIST
18274: LIST
18275: ST_TO_ADDR
18276: GO 19647
18278: LD_INT 13
18280: DOUBLE
18281: EQUAL
18282: IFTRUE 18286
18284: GO 18482
18286: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
18287: LD_ADDR_VAR 0 1
18291: PUSH
18292: LD_INT 1
18294: PUSH
18295: LD_INT 2
18297: PUSH
18298: LD_INT 3
18300: PUSH
18301: LD_INT 4
18303: PUSH
18304: LD_INT 5
18306: PUSH
18307: LD_INT 8
18309: PUSH
18310: LD_INT 9
18312: PUSH
18313: LD_INT 10
18315: PUSH
18316: LD_INT 11
18318: PUSH
18319: LD_INT 12
18321: PUSH
18322: LD_INT 14
18324: PUSH
18325: LD_INT 15
18327: PUSH
18328: LD_INT 16
18330: PUSH
18331: LD_INT 17
18333: PUSH
18334: LD_INT 18
18336: PUSH
18337: LD_INT 19
18339: PUSH
18340: LD_INT 20
18342: PUSH
18343: LD_INT 21
18345: PUSH
18346: LD_INT 22
18348: PUSH
18349: LD_INT 23
18351: PUSH
18352: LD_INT 24
18354: PUSH
18355: LD_INT 25
18357: PUSH
18358: LD_INT 26
18360: PUSH
18361: LD_INT 27
18363: PUSH
18364: LD_INT 28
18366: PUSH
18367: LD_INT 30
18369: PUSH
18370: LD_INT 31
18372: PUSH
18373: LD_INT 32
18375: PUSH
18376: LD_INT 33
18378: PUSH
18379: LD_INT 34
18381: PUSH
18382: LD_INT 36
18384: PUSH
18385: EMPTY
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: LIST
18395: LIST
18396: LIST
18397: LIST
18398: LIST
18399: LIST
18400: LIST
18401: LIST
18402: LIST
18403: LIST
18404: LIST
18405: LIST
18406: LIST
18407: LIST
18408: LIST
18409: LIST
18410: LIST
18411: LIST
18412: LIST
18413: LIST
18414: LIST
18415: LIST
18416: LIST
18417: PUSH
18418: LD_INT 101
18420: PUSH
18421: LD_INT 102
18423: PUSH
18424: LD_INT 103
18426: PUSH
18427: LD_INT 104
18429: PUSH
18430: LD_INT 105
18432: PUSH
18433: LD_INT 106
18435: PUSH
18436: LD_INT 107
18438: PUSH
18439: LD_INT 108
18441: PUSH
18442: LD_INT 109
18444: PUSH
18445: LD_INT 110
18447: PUSH
18448: LD_INT 111
18450: PUSH
18451: LD_INT 112
18453: PUSH
18454: LD_INT 113
18456: PUSH
18457: LD_INT 114
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: LIST
18471: LIST
18472: LIST
18473: LIST
18474: LIST
18475: PUSH
18476: EMPTY
18477: LIST
18478: LIST
18479: ST_TO_ADDR
18480: GO 19647
18482: LD_INT 14
18484: DOUBLE
18485: EQUAL
18486: IFTRUE 18490
18488: GO 18702
18490: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
18491: LD_ADDR_VAR 0 1
18495: PUSH
18496: LD_INT 1
18498: PUSH
18499: LD_INT 2
18501: PUSH
18502: LD_INT 3
18504: PUSH
18505: LD_INT 4
18507: PUSH
18508: LD_INT 5
18510: PUSH
18511: LD_INT 6
18513: PUSH
18514: LD_INT 7
18516: PUSH
18517: LD_INT 8
18519: PUSH
18520: LD_INT 9
18522: PUSH
18523: LD_INT 10
18525: PUSH
18526: LD_INT 11
18528: PUSH
18529: LD_INT 12
18531: PUSH
18532: LD_INT 13
18534: PUSH
18535: LD_INT 14
18537: PUSH
18538: LD_INT 15
18540: PUSH
18541: LD_INT 16
18543: PUSH
18544: LD_INT 17
18546: PUSH
18547: LD_INT 18
18549: PUSH
18550: LD_INT 19
18552: PUSH
18553: LD_INT 20
18555: PUSH
18556: LD_INT 21
18558: PUSH
18559: LD_INT 22
18561: PUSH
18562: LD_INT 23
18564: PUSH
18565: LD_INT 24
18567: PUSH
18568: LD_INT 25
18570: PUSH
18571: LD_INT 26
18573: PUSH
18574: LD_INT 27
18576: PUSH
18577: LD_INT 28
18579: PUSH
18580: LD_INT 29
18582: PUSH
18583: LD_INT 30
18585: PUSH
18586: LD_INT 31
18588: PUSH
18589: LD_INT 32
18591: PUSH
18592: LD_INT 33
18594: PUSH
18595: LD_INT 34
18597: PUSH
18598: LD_INT 36
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: LIST
18605: LIST
18606: LIST
18607: LIST
18608: LIST
18609: LIST
18610: LIST
18611: LIST
18612: LIST
18613: LIST
18614: LIST
18615: LIST
18616: LIST
18617: LIST
18618: LIST
18619: LIST
18620: LIST
18621: LIST
18622: LIST
18623: LIST
18624: LIST
18625: LIST
18626: LIST
18627: LIST
18628: LIST
18629: LIST
18630: LIST
18631: LIST
18632: LIST
18633: LIST
18634: LIST
18635: LIST
18636: LIST
18637: PUSH
18638: LD_INT 101
18640: PUSH
18641: LD_INT 102
18643: PUSH
18644: LD_INT 103
18646: PUSH
18647: LD_INT 104
18649: PUSH
18650: LD_INT 105
18652: PUSH
18653: LD_INT 106
18655: PUSH
18656: LD_INT 107
18658: PUSH
18659: LD_INT 108
18661: PUSH
18662: LD_INT 109
18664: PUSH
18665: LD_INT 110
18667: PUSH
18668: LD_INT 111
18670: PUSH
18671: LD_INT 112
18673: PUSH
18674: LD_INT 113
18676: PUSH
18677: LD_INT 114
18679: PUSH
18680: EMPTY
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: LIST
18694: LIST
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: ST_TO_ADDR
18700: GO 19647
18702: LD_INT 15
18704: DOUBLE
18705: EQUAL
18706: IFTRUE 18710
18708: GO 18922
18710: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
18711: LD_ADDR_VAR 0 1
18715: PUSH
18716: LD_INT 1
18718: PUSH
18719: LD_INT 2
18721: PUSH
18722: LD_INT 3
18724: PUSH
18725: LD_INT 4
18727: PUSH
18728: LD_INT 5
18730: PUSH
18731: LD_INT 6
18733: PUSH
18734: LD_INT 7
18736: PUSH
18737: LD_INT 8
18739: PUSH
18740: LD_INT 9
18742: PUSH
18743: LD_INT 10
18745: PUSH
18746: LD_INT 11
18748: PUSH
18749: LD_INT 12
18751: PUSH
18752: LD_INT 13
18754: PUSH
18755: LD_INT 14
18757: PUSH
18758: LD_INT 15
18760: PUSH
18761: LD_INT 16
18763: PUSH
18764: LD_INT 17
18766: PUSH
18767: LD_INT 18
18769: PUSH
18770: LD_INT 19
18772: PUSH
18773: LD_INT 20
18775: PUSH
18776: LD_INT 21
18778: PUSH
18779: LD_INT 22
18781: PUSH
18782: LD_INT 23
18784: PUSH
18785: LD_INT 24
18787: PUSH
18788: LD_INT 25
18790: PUSH
18791: LD_INT 26
18793: PUSH
18794: LD_INT 27
18796: PUSH
18797: LD_INT 28
18799: PUSH
18800: LD_INT 29
18802: PUSH
18803: LD_INT 30
18805: PUSH
18806: LD_INT 31
18808: PUSH
18809: LD_INT 32
18811: PUSH
18812: LD_INT 33
18814: PUSH
18815: LD_INT 34
18817: PUSH
18818: LD_INT 36
18820: PUSH
18821: EMPTY
18822: LIST
18823: LIST
18824: LIST
18825: LIST
18826: LIST
18827: LIST
18828: LIST
18829: LIST
18830: LIST
18831: LIST
18832: LIST
18833: LIST
18834: LIST
18835: LIST
18836: LIST
18837: LIST
18838: LIST
18839: LIST
18840: LIST
18841: LIST
18842: LIST
18843: LIST
18844: LIST
18845: LIST
18846: LIST
18847: LIST
18848: LIST
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: PUSH
18858: LD_INT 101
18860: PUSH
18861: LD_INT 102
18863: PUSH
18864: LD_INT 103
18866: PUSH
18867: LD_INT 104
18869: PUSH
18870: LD_INT 105
18872: PUSH
18873: LD_INT 106
18875: PUSH
18876: LD_INT 107
18878: PUSH
18879: LD_INT 108
18881: PUSH
18882: LD_INT 109
18884: PUSH
18885: LD_INT 110
18887: PUSH
18888: LD_INT 111
18890: PUSH
18891: LD_INT 112
18893: PUSH
18894: LD_INT 113
18896: PUSH
18897: LD_INT 114
18899: PUSH
18900: EMPTY
18901: LIST
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: PUSH
18916: EMPTY
18917: LIST
18918: LIST
18919: ST_TO_ADDR
18920: GO 19647
18922: LD_INT 16
18924: DOUBLE
18925: EQUAL
18926: IFTRUE 18930
18928: GO 19054
18930: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
18931: LD_ADDR_VAR 0 1
18935: PUSH
18936: LD_INT 2
18938: PUSH
18939: LD_INT 4
18941: PUSH
18942: LD_INT 5
18944: PUSH
18945: LD_INT 7
18947: PUSH
18948: LD_INT 11
18950: PUSH
18951: LD_INT 12
18953: PUSH
18954: LD_INT 15
18956: PUSH
18957: LD_INT 16
18959: PUSH
18960: LD_INT 20
18962: PUSH
18963: LD_INT 21
18965: PUSH
18966: LD_INT 22
18968: PUSH
18969: LD_INT 23
18971: PUSH
18972: LD_INT 25
18974: PUSH
18975: LD_INT 26
18977: PUSH
18978: LD_INT 30
18980: PUSH
18981: LD_INT 31
18983: PUSH
18984: LD_INT 32
18986: PUSH
18987: LD_INT 33
18989: PUSH
18990: LD_INT 34
18992: PUSH
18993: EMPTY
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: LIST
19000: LIST
19001: LIST
19002: LIST
19003: LIST
19004: LIST
19005: LIST
19006: LIST
19007: LIST
19008: LIST
19009: LIST
19010: LIST
19011: LIST
19012: LIST
19013: PUSH
19014: LD_INT 101
19016: PUSH
19017: LD_INT 102
19019: PUSH
19020: LD_INT 103
19022: PUSH
19023: LD_INT 106
19025: PUSH
19026: LD_INT 108
19028: PUSH
19029: LD_INT 112
19031: PUSH
19032: LD_INT 113
19034: PUSH
19035: LD_INT 114
19037: PUSH
19038: EMPTY
19039: LIST
19040: LIST
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: LIST
19046: LIST
19047: PUSH
19048: EMPTY
19049: LIST
19050: LIST
19051: ST_TO_ADDR
19052: GO 19647
19054: LD_INT 17
19056: DOUBLE
19057: EQUAL
19058: IFTRUE 19062
19060: GO 19274
19062: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
19063: LD_ADDR_VAR 0 1
19067: PUSH
19068: LD_INT 1
19070: PUSH
19071: LD_INT 2
19073: PUSH
19074: LD_INT 3
19076: PUSH
19077: LD_INT 4
19079: PUSH
19080: LD_INT 5
19082: PUSH
19083: LD_INT 6
19085: PUSH
19086: LD_INT 7
19088: PUSH
19089: LD_INT 8
19091: PUSH
19092: LD_INT 9
19094: PUSH
19095: LD_INT 10
19097: PUSH
19098: LD_INT 11
19100: PUSH
19101: LD_INT 12
19103: PUSH
19104: LD_INT 13
19106: PUSH
19107: LD_INT 14
19109: PUSH
19110: LD_INT 15
19112: PUSH
19113: LD_INT 16
19115: PUSH
19116: LD_INT 17
19118: PUSH
19119: LD_INT 18
19121: PUSH
19122: LD_INT 19
19124: PUSH
19125: LD_INT 20
19127: PUSH
19128: LD_INT 21
19130: PUSH
19131: LD_INT 22
19133: PUSH
19134: LD_INT 23
19136: PUSH
19137: LD_INT 24
19139: PUSH
19140: LD_INT 25
19142: PUSH
19143: LD_INT 26
19145: PUSH
19146: LD_INT 27
19148: PUSH
19149: LD_INT 28
19151: PUSH
19152: LD_INT 29
19154: PUSH
19155: LD_INT 30
19157: PUSH
19158: LD_INT 31
19160: PUSH
19161: LD_INT 32
19163: PUSH
19164: LD_INT 33
19166: PUSH
19167: LD_INT 34
19169: PUSH
19170: LD_INT 36
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: LIST
19188: LIST
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: LIST
19194: LIST
19195: LIST
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: LIST
19201: LIST
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: LIST
19208: LIST
19209: PUSH
19210: LD_INT 101
19212: PUSH
19213: LD_INT 102
19215: PUSH
19216: LD_INT 103
19218: PUSH
19219: LD_INT 104
19221: PUSH
19222: LD_INT 105
19224: PUSH
19225: LD_INT 106
19227: PUSH
19228: LD_INT 107
19230: PUSH
19231: LD_INT 108
19233: PUSH
19234: LD_INT 109
19236: PUSH
19237: LD_INT 110
19239: PUSH
19240: LD_INT 111
19242: PUSH
19243: LD_INT 112
19245: PUSH
19246: LD_INT 113
19248: PUSH
19249: LD_INT 114
19251: PUSH
19252: EMPTY
19253: LIST
19254: LIST
19255: LIST
19256: LIST
19257: LIST
19258: LIST
19259: LIST
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: PUSH
19268: EMPTY
19269: LIST
19270: LIST
19271: ST_TO_ADDR
19272: GO 19647
19274: LD_INT 18
19276: DOUBLE
19277: EQUAL
19278: IFTRUE 19282
19280: GO 19418
19282: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
19283: LD_ADDR_VAR 0 1
19287: PUSH
19288: LD_INT 2
19290: PUSH
19291: LD_INT 4
19293: PUSH
19294: LD_INT 5
19296: PUSH
19297: LD_INT 7
19299: PUSH
19300: LD_INT 11
19302: PUSH
19303: LD_INT 12
19305: PUSH
19306: LD_INT 15
19308: PUSH
19309: LD_INT 16
19311: PUSH
19312: LD_INT 20
19314: PUSH
19315: LD_INT 21
19317: PUSH
19318: LD_INT 22
19320: PUSH
19321: LD_INT 23
19323: PUSH
19324: LD_INT 25
19326: PUSH
19327: LD_INT 26
19329: PUSH
19330: LD_INT 30
19332: PUSH
19333: LD_INT 31
19335: PUSH
19336: LD_INT 32
19338: PUSH
19339: LD_INT 33
19341: PUSH
19342: LD_INT 34
19344: PUSH
19345: LD_INT 35
19347: PUSH
19348: LD_INT 36
19350: PUSH
19351: EMPTY
19352: LIST
19353: LIST
19354: LIST
19355: LIST
19356: LIST
19357: LIST
19358: LIST
19359: LIST
19360: LIST
19361: LIST
19362: LIST
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: LIST
19368: LIST
19369: LIST
19370: LIST
19371: LIST
19372: LIST
19373: PUSH
19374: LD_INT 101
19376: PUSH
19377: LD_INT 102
19379: PUSH
19380: LD_INT 103
19382: PUSH
19383: LD_INT 106
19385: PUSH
19386: LD_INT 108
19388: PUSH
19389: LD_INT 112
19391: PUSH
19392: LD_INT 113
19394: PUSH
19395: LD_INT 114
19397: PUSH
19398: LD_INT 115
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: LIST
19411: PUSH
19412: EMPTY
19413: LIST
19414: LIST
19415: ST_TO_ADDR
19416: GO 19647
19418: LD_INT 19
19420: DOUBLE
19421: EQUAL
19422: IFTRUE 19426
19424: GO 19646
19426: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
19427: LD_ADDR_VAR 0 1
19431: PUSH
19432: LD_INT 1
19434: PUSH
19435: LD_INT 2
19437: PUSH
19438: LD_INT 3
19440: PUSH
19441: LD_INT 4
19443: PUSH
19444: LD_INT 5
19446: PUSH
19447: LD_INT 6
19449: PUSH
19450: LD_INT 7
19452: PUSH
19453: LD_INT 8
19455: PUSH
19456: LD_INT 9
19458: PUSH
19459: LD_INT 10
19461: PUSH
19462: LD_INT 11
19464: PUSH
19465: LD_INT 12
19467: PUSH
19468: LD_INT 13
19470: PUSH
19471: LD_INT 14
19473: PUSH
19474: LD_INT 15
19476: PUSH
19477: LD_INT 16
19479: PUSH
19480: LD_INT 17
19482: PUSH
19483: LD_INT 18
19485: PUSH
19486: LD_INT 19
19488: PUSH
19489: LD_INT 20
19491: PUSH
19492: LD_INT 21
19494: PUSH
19495: LD_INT 22
19497: PUSH
19498: LD_INT 23
19500: PUSH
19501: LD_INT 24
19503: PUSH
19504: LD_INT 25
19506: PUSH
19507: LD_INT 26
19509: PUSH
19510: LD_INT 27
19512: PUSH
19513: LD_INT 28
19515: PUSH
19516: LD_INT 29
19518: PUSH
19519: LD_INT 30
19521: PUSH
19522: LD_INT 31
19524: PUSH
19525: LD_INT 32
19527: PUSH
19528: LD_INT 33
19530: PUSH
19531: LD_INT 34
19533: PUSH
19534: LD_INT 35
19536: PUSH
19537: LD_INT 36
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: LIST
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: PUSH
19578: LD_INT 101
19580: PUSH
19581: LD_INT 102
19583: PUSH
19584: LD_INT 103
19586: PUSH
19587: LD_INT 104
19589: PUSH
19590: LD_INT 105
19592: PUSH
19593: LD_INT 106
19595: PUSH
19596: LD_INT 107
19598: PUSH
19599: LD_INT 108
19601: PUSH
19602: LD_INT 109
19604: PUSH
19605: LD_INT 110
19607: PUSH
19608: LD_INT 111
19610: PUSH
19611: LD_INT 112
19613: PUSH
19614: LD_INT 113
19616: PUSH
19617: LD_INT 114
19619: PUSH
19620: LD_INT 115
19622: PUSH
19623: EMPTY
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: PUSH
19640: EMPTY
19641: LIST
19642: LIST
19643: ST_TO_ADDR
19644: GO 19647
19646: POP
// end else
19647: GO 19866
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
19649: LD_ADDR_VAR 0 1
19653: PUSH
19654: LD_INT 1
19656: PUSH
19657: LD_INT 2
19659: PUSH
19660: LD_INT 3
19662: PUSH
19663: LD_INT 4
19665: PUSH
19666: LD_INT 5
19668: PUSH
19669: LD_INT 6
19671: PUSH
19672: LD_INT 7
19674: PUSH
19675: LD_INT 8
19677: PUSH
19678: LD_INT 9
19680: PUSH
19681: LD_INT 10
19683: PUSH
19684: LD_INT 11
19686: PUSH
19687: LD_INT 12
19689: PUSH
19690: LD_INT 13
19692: PUSH
19693: LD_INT 14
19695: PUSH
19696: LD_INT 15
19698: PUSH
19699: LD_INT 16
19701: PUSH
19702: LD_INT 17
19704: PUSH
19705: LD_INT 18
19707: PUSH
19708: LD_INT 19
19710: PUSH
19711: LD_INT 20
19713: PUSH
19714: LD_INT 21
19716: PUSH
19717: LD_INT 22
19719: PUSH
19720: LD_INT 23
19722: PUSH
19723: LD_INT 24
19725: PUSH
19726: LD_INT 25
19728: PUSH
19729: LD_INT 26
19731: PUSH
19732: LD_INT 27
19734: PUSH
19735: LD_INT 28
19737: PUSH
19738: LD_INT 29
19740: PUSH
19741: LD_INT 30
19743: PUSH
19744: LD_INT 31
19746: PUSH
19747: LD_INT 32
19749: PUSH
19750: LD_INT 33
19752: PUSH
19753: LD_INT 34
19755: PUSH
19756: LD_INT 35
19758: PUSH
19759: LD_INT 36
19761: PUSH
19762: EMPTY
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: LIST
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: PUSH
19800: LD_INT 101
19802: PUSH
19803: LD_INT 102
19805: PUSH
19806: LD_INT 103
19808: PUSH
19809: LD_INT 104
19811: PUSH
19812: LD_INT 105
19814: PUSH
19815: LD_INT 106
19817: PUSH
19818: LD_INT 107
19820: PUSH
19821: LD_INT 108
19823: PUSH
19824: LD_INT 109
19826: PUSH
19827: LD_INT 110
19829: PUSH
19830: LD_INT 111
19832: PUSH
19833: LD_INT 112
19835: PUSH
19836: LD_INT 113
19838: PUSH
19839: LD_INT 114
19841: PUSH
19842: LD_INT 115
19844: PUSH
19845: EMPTY
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: ST_TO_ADDR
// if result then
19866: LD_VAR 0 1
19870: IFFALSE 20159
// begin normal :=  ;
19872: LD_ADDR_VAR 0 3
19876: PUSH
19877: LD_STRING 
19879: ST_TO_ADDR
// hardcore :=  ;
19880: LD_ADDR_VAR 0 4
19884: PUSH
19885: LD_STRING 
19887: ST_TO_ADDR
// for i = 1 to normalCounter do
19888: LD_ADDR_VAR 0 5
19892: PUSH
19893: DOUBLE
19894: LD_INT 1
19896: DEC
19897: ST_TO_ADDR
19898: LD_EXP 57
19902: PUSH
19903: FOR_TO
19904: IFFALSE 20005
// begin tmp := 0 ;
19906: LD_ADDR_VAR 0 2
19910: PUSH
19911: LD_STRING 0
19913: ST_TO_ADDR
// if result [ 1 ] then
19914: LD_VAR 0 1
19918: PUSH
19919: LD_INT 1
19921: ARRAY
19922: IFFALSE 19987
// if result [ 1 ] [ 1 ] = i then
19924: LD_VAR 0 1
19928: PUSH
19929: LD_INT 1
19931: ARRAY
19932: PUSH
19933: LD_INT 1
19935: ARRAY
19936: PUSH
19937: LD_VAR 0 5
19941: EQUAL
19942: IFFALSE 19987
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
19944: LD_ADDR_VAR 0 1
19948: PUSH
19949: LD_VAR 0 1
19953: PPUSH
19954: LD_INT 1
19956: PPUSH
19957: LD_VAR 0 1
19961: PUSH
19962: LD_INT 1
19964: ARRAY
19965: PPUSH
19966: LD_INT 1
19968: PPUSH
19969: CALL_OW 3
19973: PPUSH
19974: CALL_OW 1
19978: ST_TO_ADDR
// tmp := 1 ;
19979: LD_ADDR_VAR 0 2
19983: PUSH
19984: LD_STRING 1
19986: ST_TO_ADDR
// end ; normal := normal & tmp ;
19987: LD_ADDR_VAR 0 3
19991: PUSH
19992: LD_VAR 0 3
19996: PUSH
19997: LD_VAR 0 2
20001: STR
20002: ST_TO_ADDR
// end ;
20003: GO 19903
20005: POP
20006: POP
// for i = 1 to hardcoreCounter do
20007: LD_ADDR_VAR 0 5
20011: PUSH
20012: DOUBLE
20013: LD_INT 1
20015: DEC
20016: ST_TO_ADDR
20017: LD_EXP 58
20021: PUSH
20022: FOR_TO
20023: IFFALSE 20128
// begin tmp := 0 ;
20025: LD_ADDR_VAR 0 2
20029: PUSH
20030: LD_STRING 0
20032: ST_TO_ADDR
// if result [ 2 ] then
20033: LD_VAR 0 1
20037: PUSH
20038: LD_INT 2
20040: ARRAY
20041: IFFALSE 20110
// if result [ 2 ] [ 1 ] = 100 + i then
20043: LD_VAR 0 1
20047: PUSH
20048: LD_INT 2
20050: ARRAY
20051: PUSH
20052: LD_INT 1
20054: ARRAY
20055: PUSH
20056: LD_INT 100
20058: PUSH
20059: LD_VAR 0 5
20063: PLUS
20064: EQUAL
20065: IFFALSE 20110
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
20067: LD_ADDR_VAR 0 1
20071: PUSH
20072: LD_VAR 0 1
20076: PPUSH
20077: LD_INT 2
20079: PPUSH
20080: LD_VAR 0 1
20084: PUSH
20085: LD_INT 2
20087: ARRAY
20088: PPUSH
20089: LD_INT 1
20091: PPUSH
20092: CALL_OW 3
20096: PPUSH
20097: CALL_OW 1
20101: ST_TO_ADDR
// tmp := 1 ;
20102: LD_ADDR_VAR 0 2
20106: PUSH
20107: LD_STRING 1
20109: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
20110: LD_ADDR_VAR 0 4
20114: PUSH
20115: LD_VAR 0 4
20119: PUSH
20120: LD_VAR 0 2
20124: STR
20125: ST_TO_ADDR
// end ;
20126: GO 20022
20128: POP
20129: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
20130: LD_STRING getStreamItemsFromMission("
20132: PUSH
20133: LD_VAR 0 3
20137: STR
20138: PUSH
20139: LD_STRING ","
20141: STR
20142: PUSH
20143: LD_VAR 0 4
20147: STR
20148: PUSH
20149: LD_STRING ")
20151: STR
20152: PPUSH
20153: CALL_OW 559
// end else
20157: GO 20166
// ToLua ( getStreamItemsFromMission("","") ) ;
20159: LD_STRING getStreamItemsFromMission("","")
20161: PPUSH
20162: CALL_OW 559
// end ;
20166: LD_VAR 0 1
20170: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
20171: LD_EXP 56
20175: PUSH
20176: LD_EXP 61
20180: AND
20181: IFFALSE 20305
20183: GO 20185
20185: DISABLE
20186: LD_INT 0
20188: PPUSH
20189: PPUSH
// begin enable ;
20190: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
20191: LD_ADDR_VAR 0 2
20195: PUSH
20196: LD_INT 22
20198: PUSH
20199: LD_OWVAR 2
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: PUSH
20208: LD_INT 2
20210: PUSH
20211: LD_INT 34
20213: PUSH
20214: LD_INT 7
20216: PUSH
20217: EMPTY
20218: LIST
20219: LIST
20220: PUSH
20221: LD_INT 34
20223: PUSH
20224: LD_INT 45
20226: PUSH
20227: EMPTY
20228: LIST
20229: LIST
20230: PUSH
20231: LD_INT 34
20233: PUSH
20234: LD_INT 28
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: PUSH
20241: LD_INT 34
20243: PUSH
20244: LD_INT 47
20246: PUSH
20247: EMPTY
20248: LIST
20249: LIST
20250: PUSH
20251: EMPTY
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: LIST
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: PPUSH
20262: CALL_OW 69
20266: ST_TO_ADDR
// if not tmp then
20267: LD_VAR 0 2
20271: NOT
20272: IFFALSE 20276
// exit ;
20274: GO 20305
// for i in tmp do
20276: LD_ADDR_VAR 0 1
20280: PUSH
20281: LD_VAR 0 2
20285: PUSH
20286: FOR_IN
20287: IFFALSE 20303
// begin SetLives ( i , 0 ) ;
20289: LD_VAR 0 1
20293: PPUSH
20294: LD_INT 0
20296: PPUSH
20297: CALL_OW 234
// end ;
20301: GO 20286
20303: POP
20304: POP
// end ;
20305: PPOPN 2
20307: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
20308: LD_EXP 56
20312: PUSH
20313: LD_EXP 62
20317: AND
20318: IFFALSE 20402
20320: GO 20322
20322: DISABLE
20323: LD_INT 0
20325: PPUSH
20326: PPUSH
// begin enable ;
20327: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
20328: LD_ADDR_VAR 0 2
20332: PUSH
20333: LD_INT 22
20335: PUSH
20336: LD_OWVAR 2
20340: PUSH
20341: EMPTY
20342: LIST
20343: LIST
20344: PUSH
20345: LD_INT 32
20347: PUSH
20348: LD_INT 3
20350: PUSH
20351: EMPTY
20352: LIST
20353: LIST
20354: PUSH
20355: EMPTY
20356: LIST
20357: LIST
20358: PPUSH
20359: CALL_OW 69
20363: ST_TO_ADDR
// if not tmp then
20364: LD_VAR 0 2
20368: NOT
20369: IFFALSE 20373
// exit ;
20371: GO 20402
// for i in tmp do
20373: LD_ADDR_VAR 0 1
20377: PUSH
20378: LD_VAR 0 2
20382: PUSH
20383: FOR_IN
20384: IFFALSE 20400
// begin SetLives ( i , 0 ) ;
20386: LD_VAR 0 1
20390: PPUSH
20391: LD_INT 0
20393: PPUSH
20394: CALL_OW 234
// end ;
20398: GO 20383
20400: POP
20401: POP
// end ;
20402: PPOPN 2
20404: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
20405: LD_EXP 56
20409: PUSH
20410: LD_EXP 59
20414: AND
20415: IFFALSE 20508
20417: GO 20419
20419: DISABLE
20420: LD_INT 0
20422: PPUSH
// begin enable ;
20423: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
20424: LD_ADDR_VAR 0 1
20428: PUSH
20429: LD_INT 22
20431: PUSH
20432: LD_OWVAR 2
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: PUSH
20441: LD_INT 2
20443: PUSH
20444: LD_INT 25
20446: PUSH
20447: LD_INT 5
20449: PUSH
20450: EMPTY
20451: LIST
20452: LIST
20453: PUSH
20454: LD_INT 25
20456: PUSH
20457: LD_INT 9
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: PUSH
20464: LD_INT 25
20466: PUSH
20467: LD_INT 8
20469: PUSH
20470: EMPTY
20471: LIST
20472: LIST
20473: PUSH
20474: EMPTY
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: PUSH
20480: EMPTY
20481: LIST
20482: LIST
20483: PPUSH
20484: CALL_OW 69
20488: PUSH
20489: FOR_IN
20490: IFFALSE 20506
// begin SetClass ( i , 1 ) ;
20492: LD_VAR 0 1
20496: PPUSH
20497: LD_INT 1
20499: PPUSH
20500: CALL_OW 336
// end ;
20504: GO 20489
20506: POP
20507: POP
// end ;
20508: PPOPN 1
20510: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
20511: LD_EXP 56
20515: PUSH
20516: LD_EXP 60
20520: AND
20521: PUSH
20522: LD_OWVAR 65
20526: PUSH
20527: LD_INT 7
20529: LESS
20530: AND
20531: IFFALSE 20545
20533: GO 20535
20535: DISABLE
// begin enable ;
20536: ENABLE
// game_speed := 7 ;
20537: LD_ADDR_OWVAR 65
20541: PUSH
20542: LD_INT 7
20544: ST_TO_ADDR
// end ;
20545: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
20546: LD_EXP 56
20550: PUSH
20551: LD_EXP 63
20555: AND
20556: IFFALSE 20758
20558: GO 20560
20560: DISABLE
20561: LD_INT 0
20563: PPUSH
20564: PPUSH
20565: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20566: LD_ADDR_VAR 0 3
20570: PUSH
20571: LD_INT 81
20573: PUSH
20574: LD_OWVAR 2
20578: PUSH
20579: EMPTY
20580: LIST
20581: LIST
20582: PUSH
20583: LD_INT 21
20585: PUSH
20586: LD_INT 1
20588: PUSH
20589: EMPTY
20590: LIST
20591: LIST
20592: PUSH
20593: EMPTY
20594: LIST
20595: LIST
20596: PPUSH
20597: CALL_OW 69
20601: ST_TO_ADDR
// if not tmp then
20602: LD_VAR 0 3
20606: NOT
20607: IFFALSE 20611
// exit ;
20609: GO 20758
// if tmp > 5 then
20611: LD_VAR 0 3
20615: PUSH
20616: LD_INT 5
20618: GREATER
20619: IFFALSE 20631
// k := 5 else
20621: LD_ADDR_VAR 0 2
20625: PUSH
20626: LD_INT 5
20628: ST_TO_ADDR
20629: GO 20641
// k := tmp ;
20631: LD_ADDR_VAR 0 2
20635: PUSH
20636: LD_VAR 0 3
20640: ST_TO_ADDR
// for i := 1 to k do
20641: LD_ADDR_VAR 0 1
20645: PUSH
20646: DOUBLE
20647: LD_INT 1
20649: DEC
20650: ST_TO_ADDR
20651: LD_VAR 0 2
20655: PUSH
20656: FOR_TO
20657: IFFALSE 20756
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
20659: LD_VAR 0 3
20663: PUSH
20664: LD_VAR 0 1
20668: ARRAY
20669: PPUSH
20670: LD_VAR 0 1
20674: PUSH
20675: LD_INT 4
20677: MOD
20678: PUSH
20679: LD_INT 1
20681: PLUS
20682: PPUSH
20683: CALL_OW 259
20687: PUSH
20688: LD_INT 10
20690: LESS
20691: IFFALSE 20754
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
20693: LD_VAR 0 3
20697: PUSH
20698: LD_VAR 0 1
20702: ARRAY
20703: PPUSH
20704: LD_VAR 0 1
20708: PUSH
20709: LD_INT 4
20711: MOD
20712: PUSH
20713: LD_INT 1
20715: PLUS
20716: PPUSH
20717: LD_VAR 0 3
20721: PUSH
20722: LD_VAR 0 1
20726: ARRAY
20727: PPUSH
20728: LD_VAR 0 1
20732: PUSH
20733: LD_INT 4
20735: MOD
20736: PUSH
20737: LD_INT 1
20739: PLUS
20740: PPUSH
20741: CALL_OW 259
20745: PUSH
20746: LD_INT 1
20748: PLUS
20749: PPUSH
20750: CALL_OW 237
20754: GO 20656
20756: POP
20757: POP
// end ;
20758: PPOPN 3
20760: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
20761: LD_EXP 56
20765: PUSH
20766: LD_EXP 64
20770: AND
20771: IFFALSE 20791
20773: GO 20775
20775: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
20776: LD_INT 4
20778: PPUSH
20779: LD_OWVAR 2
20783: PPUSH
20784: LD_INT 0
20786: PPUSH
20787: CALL_OW 324
20791: END
// every 0 0$1 trigger StreamModeActive and sShovel do
20792: LD_EXP 56
20796: PUSH
20797: LD_EXP 93
20801: AND
20802: IFFALSE 20822
20804: GO 20806
20806: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
20807: LD_INT 19
20809: PPUSH
20810: LD_OWVAR 2
20814: PPUSH
20815: LD_INT 0
20817: PPUSH
20818: CALL_OW 324
20822: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
20823: LD_EXP 56
20827: PUSH
20828: LD_EXP 65
20832: AND
20833: IFFALSE 20935
20835: GO 20837
20837: DISABLE
20838: LD_INT 0
20840: PPUSH
20841: PPUSH
// begin enable ;
20842: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
20843: LD_ADDR_VAR 0 2
20847: PUSH
20848: LD_INT 22
20850: PUSH
20851: LD_OWVAR 2
20855: PUSH
20856: EMPTY
20857: LIST
20858: LIST
20859: PUSH
20860: LD_INT 2
20862: PUSH
20863: LD_INT 34
20865: PUSH
20866: LD_INT 11
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: PUSH
20873: LD_INT 34
20875: PUSH
20876: LD_INT 30
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: PUSH
20883: EMPTY
20884: LIST
20885: LIST
20886: LIST
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: PPUSH
20892: CALL_OW 69
20896: ST_TO_ADDR
// if not tmp then
20897: LD_VAR 0 2
20901: NOT
20902: IFFALSE 20906
// exit ;
20904: GO 20935
// for i in tmp do
20906: LD_ADDR_VAR 0 1
20910: PUSH
20911: LD_VAR 0 2
20915: PUSH
20916: FOR_IN
20917: IFFALSE 20933
// begin SetLives ( i , 0 ) ;
20919: LD_VAR 0 1
20923: PPUSH
20924: LD_INT 0
20926: PPUSH
20927: CALL_OW 234
// end ;
20931: GO 20916
20933: POP
20934: POP
// end ;
20935: PPOPN 2
20937: END
// every 0 0$1 trigger StreamModeActive and sBunker do
20938: LD_EXP 56
20942: PUSH
20943: LD_EXP 66
20947: AND
20948: IFFALSE 20968
20950: GO 20952
20952: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
20953: LD_INT 32
20955: PPUSH
20956: LD_OWVAR 2
20960: PPUSH
20961: LD_INT 0
20963: PPUSH
20964: CALL_OW 324
20968: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
20969: LD_EXP 56
20973: PUSH
20974: LD_EXP 67
20978: AND
20979: IFFALSE 21160
20981: GO 20983
20983: DISABLE
20984: LD_INT 0
20986: PPUSH
20987: PPUSH
20988: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
20989: LD_ADDR_VAR 0 2
20993: PUSH
20994: LD_INT 22
20996: PUSH
20997: LD_OWVAR 2
21001: PUSH
21002: EMPTY
21003: LIST
21004: LIST
21005: PUSH
21006: LD_INT 33
21008: PUSH
21009: LD_INT 3
21011: PUSH
21012: EMPTY
21013: LIST
21014: LIST
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PPUSH
21020: CALL_OW 69
21024: ST_TO_ADDR
// if not tmp then
21025: LD_VAR 0 2
21029: NOT
21030: IFFALSE 21034
// exit ;
21032: GO 21160
// side := 0 ;
21034: LD_ADDR_VAR 0 3
21038: PUSH
21039: LD_INT 0
21041: ST_TO_ADDR
// for i := 1 to 8 do
21042: LD_ADDR_VAR 0 1
21046: PUSH
21047: DOUBLE
21048: LD_INT 1
21050: DEC
21051: ST_TO_ADDR
21052: LD_INT 8
21054: PUSH
21055: FOR_TO
21056: IFFALSE 21104
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
21058: LD_OWVAR 2
21062: PUSH
21063: LD_VAR 0 1
21067: NONEQUAL
21068: PUSH
21069: LD_OWVAR 2
21073: PPUSH
21074: LD_VAR 0 1
21078: PPUSH
21079: CALL_OW 81
21083: PUSH
21084: LD_INT 2
21086: EQUAL
21087: AND
21088: IFFALSE 21102
// begin side := i ;
21090: LD_ADDR_VAR 0 3
21094: PUSH
21095: LD_VAR 0 1
21099: ST_TO_ADDR
// break ;
21100: GO 21104
// end ;
21102: GO 21055
21104: POP
21105: POP
// if not side then
21106: LD_VAR 0 3
21110: NOT
21111: IFFALSE 21115
// exit ;
21113: GO 21160
// for i := 1 to tmp do
21115: LD_ADDR_VAR 0 1
21119: PUSH
21120: DOUBLE
21121: LD_INT 1
21123: DEC
21124: ST_TO_ADDR
21125: LD_VAR 0 2
21129: PUSH
21130: FOR_TO
21131: IFFALSE 21158
// if Prob ( 60 ) then
21133: LD_INT 60
21135: PPUSH
21136: CALL_OW 13
21140: IFFALSE 21156
// SetSide ( i , side ) ;
21142: LD_VAR 0 1
21146: PPUSH
21147: LD_VAR 0 3
21151: PPUSH
21152: CALL_OW 235
21156: GO 21130
21158: POP
21159: POP
// end ;
21160: PPOPN 3
21162: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
21163: LD_EXP 56
21167: PUSH
21168: LD_EXP 69
21172: AND
21173: IFFALSE 21292
21175: GO 21177
21177: DISABLE
21178: LD_INT 0
21180: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
21181: LD_ADDR_VAR 0 1
21185: PUSH
21186: LD_INT 22
21188: PUSH
21189: LD_OWVAR 2
21193: PUSH
21194: EMPTY
21195: LIST
21196: LIST
21197: PUSH
21198: LD_INT 21
21200: PUSH
21201: LD_INT 1
21203: PUSH
21204: EMPTY
21205: LIST
21206: LIST
21207: PUSH
21208: LD_INT 3
21210: PUSH
21211: LD_INT 23
21213: PUSH
21214: LD_INT 0
21216: PUSH
21217: EMPTY
21218: LIST
21219: LIST
21220: PUSH
21221: EMPTY
21222: LIST
21223: LIST
21224: PUSH
21225: EMPTY
21226: LIST
21227: LIST
21228: LIST
21229: PPUSH
21230: CALL_OW 69
21234: PUSH
21235: FOR_IN
21236: IFFALSE 21290
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
21238: LD_VAR 0 1
21242: PPUSH
21243: CALL_OW 257
21247: PUSH
21248: LD_INT 1
21250: PUSH
21251: LD_INT 2
21253: PUSH
21254: LD_INT 3
21256: PUSH
21257: LD_INT 4
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: IN
21266: IFFALSE 21288
// SetClass ( un , rand ( 1 , 4 ) ) ;
21268: LD_VAR 0 1
21272: PPUSH
21273: LD_INT 1
21275: PPUSH
21276: LD_INT 4
21278: PPUSH
21279: CALL_OW 12
21283: PPUSH
21284: CALL_OW 336
21288: GO 21235
21290: POP
21291: POP
// end ;
21292: PPOPN 1
21294: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
21295: LD_EXP 56
21299: PUSH
21300: LD_EXP 68
21304: AND
21305: IFFALSE 21384
21307: GO 21309
21309: DISABLE
21310: LD_INT 0
21312: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21313: LD_ADDR_VAR 0 1
21317: PUSH
21318: LD_INT 22
21320: PUSH
21321: LD_OWVAR 2
21325: PUSH
21326: EMPTY
21327: LIST
21328: LIST
21329: PUSH
21330: LD_INT 21
21332: PUSH
21333: LD_INT 3
21335: PUSH
21336: EMPTY
21337: LIST
21338: LIST
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: PPUSH
21344: CALL_OW 69
21348: ST_TO_ADDR
// if not tmp then
21349: LD_VAR 0 1
21353: NOT
21354: IFFALSE 21358
// exit ;
21356: GO 21384
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
21358: LD_VAR 0 1
21362: PUSH
21363: LD_INT 1
21365: PPUSH
21366: LD_VAR 0 1
21370: PPUSH
21371: CALL_OW 12
21375: ARRAY
21376: PPUSH
21377: LD_INT 100
21379: PPUSH
21380: CALL_OW 234
// end ;
21384: PPOPN 1
21386: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
21387: LD_EXP 56
21391: PUSH
21392: LD_EXP 70
21396: AND
21397: IFFALSE 21495
21399: GO 21401
21401: DISABLE
21402: LD_INT 0
21404: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21405: LD_ADDR_VAR 0 1
21409: PUSH
21410: LD_INT 22
21412: PUSH
21413: LD_OWVAR 2
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: PUSH
21422: LD_INT 21
21424: PUSH
21425: LD_INT 1
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: PUSH
21432: EMPTY
21433: LIST
21434: LIST
21435: PPUSH
21436: CALL_OW 69
21440: ST_TO_ADDR
// if not tmp then
21441: LD_VAR 0 1
21445: NOT
21446: IFFALSE 21450
// exit ;
21448: GO 21495
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
21450: LD_VAR 0 1
21454: PUSH
21455: LD_INT 1
21457: PPUSH
21458: LD_VAR 0 1
21462: PPUSH
21463: CALL_OW 12
21467: ARRAY
21468: PPUSH
21469: LD_INT 1
21471: PPUSH
21472: LD_INT 4
21474: PPUSH
21475: CALL_OW 12
21479: PPUSH
21480: LD_INT 3000
21482: PPUSH
21483: LD_INT 9000
21485: PPUSH
21486: CALL_OW 12
21490: PPUSH
21491: CALL_OW 492
// end ;
21495: PPOPN 1
21497: END
// every 0 0$1 trigger StreamModeActive and sDepot do
21498: LD_EXP 56
21502: PUSH
21503: LD_EXP 71
21507: AND
21508: IFFALSE 21528
21510: GO 21512
21512: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
21513: LD_INT 1
21515: PPUSH
21516: LD_OWVAR 2
21520: PPUSH
21521: LD_INT 0
21523: PPUSH
21524: CALL_OW 324
21528: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
21529: LD_EXP 56
21533: PUSH
21534: LD_EXP 72
21538: AND
21539: IFFALSE 21622
21541: GO 21543
21543: DISABLE
21544: LD_INT 0
21546: PPUSH
21547: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21548: LD_ADDR_VAR 0 2
21552: PUSH
21553: LD_INT 22
21555: PUSH
21556: LD_OWVAR 2
21560: PUSH
21561: EMPTY
21562: LIST
21563: LIST
21564: PUSH
21565: LD_INT 21
21567: PUSH
21568: LD_INT 3
21570: PUSH
21571: EMPTY
21572: LIST
21573: LIST
21574: PUSH
21575: EMPTY
21576: LIST
21577: LIST
21578: PPUSH
21579: CALL_OW 69
21583: ST_TO_ADDR
// if not tmp then
21584: LD_VAR 0 2
21588: NOT
21589: IFFALSE 21593
// exit ;
21591: GO 21622
// for i in tmp do
21593: LD_ADDR_VAR 0 1
21597: PUSH
21598: LD_VAR 0 2
21602: PUSH
21603: FOR_IN
21604: IFFALSE 21620
// SetBLevel ( i , 10 ) ;
21606: LD_VAR 0 1
21610: PPUSH
21611: LD_INT 10
21613: PPUSH
21614: CALL_OW 241
21618: GO 21603
21620: POP
21621: POP
// end ;
21622: PPOPN 2
21624: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
21625: LD_EXP 56
21629: PUSH
21630: LD_EXP 73
21634: AND
21635: IFFALSE 21746
21637: GO 21639
21639: DISABLE
21640: LD_INT 0
21642: PPUSH
21643: PPUSH
21644: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21645: LD_ADDR_VAR 0 3
21649: PUSH
21650: LD_INT 22
21652: PUSH
21653: LD_OWVAR 2
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: PUSH
21662: LD_INT 25
21664: PUSH
21665: LD_INT 1
21667: PUSH
21668: EMPTY
21669: LIST
21670: LIST
21671: PUSH
21672: EMPTY
21673: LIST
21674: LIST
21675: PPUSH
21676: CALL_OW 69
21680: ST_TO_ADDR
// if not tmp then
21681: LD_VAR 0 3
21685: NOT
21686: IFFALSE 21690
// exit ;
21688: GO 21746
// un := tmp [ rand ( 1 , tmp ) ] ;
21690: LD_ADDR_VAR 0 2
21694: PUSH
21695: LD_VAR 0 3
21699: PUSH
21700: LD_INT 1
21702: PPUSH
21703: LD_VAR 0 3
21707: PPUSH
21708: CALL_OW 12
21712: ARRAY
21713: ST_TO_ADDR
// if Crawls ( un ) then
21714: LD_VAR 0 2
21718: PPUSH
21719: CALL_OW 318
21723: IFFALSE 21734
// ComWalk ( un ) ;
21725: LD_VAR 0 2
21729: PPUSH
21730: CALL_OW 138
// SetClass ( un , class_sniper ) ;
21734: LD_VAR 0 2
21738: PPUSH
21739: LD_INT 5
21741: PPUSH
21742: CALL_OW 336
// end ;
21746: PPOPN 3
21748: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
21749: LD_EXP 56
21753: PUSH
21754: LD_EXP 74
21758: AND
21759: PUSH
21760: LD_OWVAR 67
21764: PUSH
21765: LD_INT 3
21767: LESS
21768: AND
21769: IFFALSE 21788
21771: GO 21773
21773: DISABLE
// Difficulty := Difficulty + 1 ;
21774: LD_ADDR_OWVAR 67
21778: PUSH
21779: LD_OWVAR 67
21783: PUSH
21784: LD_INT 1
21786: PLUS
21787: ST_TO_ADDR
21788: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
21789: LD_EXP 56
21793: PUSH
21794: LD_EXP 75
21798: AND
21799: IFFALSE 21902
21801: GO 21803
21803: DISABLE
21804: LD_INT 0
21806: PPUSH
// begin for i := 1 to 5 do
21807: LD_ADDR_VAR 0 1
21811: PUSH
21812: DOUBLE
21813: LD_INT 1
21815: DEC
21816: ST_TO_ADDR
21817: LD_INT 5
21819: PUSH
21820: FOR_TO
21821: IFFALSE 21900
// begin uc_nation := nation_nature ;
21823: LD_ADDR_OWVAR 21
21827: PUSH
21828: LD_INT 0
21830: ST_TO_ADDR
// uc_side := 0 ;
21831: LD_ADDR_OWVAR 20
21835: PUSH
21836: LD_INT 0
21838: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21839: LD_ADDR_OWVAR 29
21843: PUSH
21844: LD_INT 12
21846: PUSH
21847: LD_INT 12
21849: PUSH
21850: EMPTY
21851: LIST
21852: LIST
21853: ST_TO_ADDR
// hc_agressivity := 20 ;
21854: LD_ADDR_OWVAR 35
21858: PUSH
21859: LD_INT 20
21861: ST_TO_ADDR
// hc_class := class_tiger ;
21862: LD_ADDR_OWVAR 28
21866: PUSH
21867: LD_INT 14
21869: ST_TO_ADDR
// hc_gallery :=  ;
21870: LD_ADDR_OWVAR 33
21874: PUSH
21875: LD_STRING 
21877: ST_TO_ADDR
// hc_name :=  ;
21878: LD_ADDR_OWVAR 26
21882: PUSH
21883: LD_STRING 
21885: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
21886: CALL_OW 44
21890: PPUSH
21891: LD_INT 0
21893: PPUSH
21894: CALL_OW 51
// end ;
21898: GO 21820
21900: POP
21901: POP
// end ;
21902: PPOPN 1
21904: END
// every 0 0$1 trigger StreamModeActive and sBomb do
21905: LD_EXP 56
21909: PUSH
21910: LD_EXP 76
21914: AND
21915: IFFALSE 21924
21917: GO 21919
21919: DISABLE
// StreamSibBomb ;
21920: CALL 21925 0 0
21924: END
// export function StreamSibBomb ; var i , x , y ; begin
21925: LD_INT 0
21927: PPUSH
21928: PPUSH
21929: PPUSH
21930: PPUSH
// result := false ;
21931: LD_ADDR_VAR 0 1
21935: PUSH
21936: LD_INT 0
21938: ST_TO_ADDR
// for i := 1 to 16 do
21939: LD_ADDR_VAR 0 2
21943: PUSH
21944: DOUBLE
21945: LD_INT 1
21947: DEC
21948: ST_TO_ADDR
21949: LD_INT 16
21951: PUSH
21952: FOR_TO
21953: IFFALSE 22152
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
21955: LD_ADDR_VAR 0 3
21959: PUSH
21960: LD_INT 10
21962: PUSH
21963: LD_INT 20
21965: PUSH
21966: LD_INT 30
21968: PUSH
21969: LD_INT 40
21971: PUSH
21972: LD_INT 50
21974: PUSH
21975: LD_INT 60
21977: PUSH
21978: LD_INT 70
21980: PUSH
21981: LD_INT 80
21983: PUSH
21984: LD_INT 90
21986: PUSH
21987: LD_INT 100
21989: PUSH
21990: LD_INT 110
21992: PUSH
21993: LD_INT 120
21995: PUSH
21996: LD_INT 130
21998: PUSH
21999: LD_INT 140
22001: PUSH
22002: LD_INT 150
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: PUSH
22022: LD_INT 1
22024: PPUSH
22025: LD_INT 15
22027: PPUSH
22028: CALL_OW 12
22032: ARRAY
22033: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22034: LD_ADDR_VAR 0 4
22038: PUSH
22039: LD_INT 10
22041: PUSH
22042: LD_INT 20
22044: PUSH
22045: LD_INT 30
22047: PUSH
22048: LD_INT 40
22050: PUSH
22051: LD_INT 50
22053: PUSH
22054: LD_INT 60
22056: PUSH
22057: LD_INT 70
22059: PUSH
22060: LD_INT 80
22062: PUSH
22063: LD_INT 90
22065: PUSH
22066: LD_INT 100
22068: PUSH
22069: LD_INT 110
22071: PUSH
22072: LD_INT 120
22074: PUSH
22075: LD_INT 130
22077: PUSH
22078: LD_INT 140
22080: PUSH
22081: LD_INT 150
22083: PUSH
22084: EMPTY
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: PUSH
22101: LD_INT 1
22103: PPUSH
22104: LD_INT 15
22106: PPUSH
22107: CALL_OW 12
22111: ARRAY
22112: ST_TO_ADDR
// if ValidHex ( x , y ) then
22113: LD_VAR 0 3
22117: PPUSH
22118: LD_VAR 0 4
22122: PPUSH
22123: CALL_OW 488
22127: IFFALSE 22150
// begin result := [ x , y ] ;
22129: LD_ADDR_VAR 0 1
22133: PUSH
22134: LD_VAR 0 3
22138: PUSH
22139: LD_VAR 0 4
22143: PUSH
22144: EMPTY
22145: LIST
22146: LIST
22147: ST_TO_ADDR
// break ;
22148: GO 22152
// end ; end ;
22150: GO 21952
22152: POP
22153: POP
// if result then
22154: LD_VAR 0 1
22158: IFFALSE 22218
// begin ToLua ( playSibBomb() ) ;
22160: LD_STRING playSibBomb()
22162: PPUSH
22163: CALL_OW 559
// wait ( 0 0$14 ) ;
22167: LD_INT 490
22169: PPUSH
22170: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
22174: LD_VAR 0 1
22178: PUSH
22179: LD_INT 1
22181: ARRAY
22182: PPUSH
22183: LD_VAR 0 1
22187: PUSH
22188: LD_INT 2
22190: ARRAY
22191: PPUSH
22192: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
22196: LD_VAR 0 1
22200: PUSH
22201: LD_INT 1
22203: ARRAY
22204: PPUSH
22205: LD_VAR 0 1
22209: PUSH
22210: LD_INT 2
22212: ARRAY
22213: PPUSH
22214: CALL_OW 429
// end ; end ;
22218: LD_VAR 0 1
22222: RET
// every 0 0$1 trigger StreamModeActive and sReset do
22223: LD_EXP 56
22227: PUSH
22228: LD_EXP 78
22232: AND
22233: IFFALSE 22245
22235: GO 22237
22237: DISABLE
// YouLost (  ) ;
22238: LD_STRING 
22240: PPUSH
22241: CALL_OW 104
22245: END
// every 0 0$1 trigger StreamModeActive and sFog do
22246: LD_EXP 56
22250: PUSH
22251: LD_EXP 77
22255: AND
22256: IFFALSE 22270
22258: GO 22260
22260: DISABLE
// FogOff ( your_side ) ;
22261: LD_OWVAR 2
22265: PPUSH
22266: CALL_OW 344
22270: END
// every 0 0$1 trigger StreamModeActive and sSun do
22271: LD_EXP 56
22275: PUSH
22276: LD_EXP 79
22280: AND
22281: IFFALSE 22309
22283: GO 22285
22285: DISABLE
// begin solar_recharge_percent := 0 ;
22286: LD_ADDR_OWVAR 79
22290: PUSH
22291: LD_INT 0
22293: ST_TO_ADDR
// wait ( 5 5$00 ) ;
22294: LD_INT 10500
22296: PPUSH
22297: CALL_OW 67
// solar_recharge_percent := 100 ;
22301: LD_ADDR_OWVAR 79
22305: PUSH
22306: LD_INT 100
22308: ST_TO_ADDR
// end ;
22309: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
22310: LD_EXP 56
22314: PUSH
22315: LD_EXP 80
22319: AND
22320: IFFALSE 22559
22322: GO 22324
22324: DISABLE
22325: LD_INT 0
22327: PPUSH
22328: PPUSH
22329: PPUSH
// begin tmp := [ ] ;
22330: LD_ADDR_VAR 0 3
22334: PUSH
22335: EMPTY
22336: ST_TO_ADDR
// for i := 1 to 6 do
22337: LD_ADDR_VAR 0 1
22341: PUSH
22342: DOUBLE
22343: LD_INT 1
22345: DEC
22346: ST_TO_ADDR
22347: LD_INT 6
22349: PUSH
22350: FOR_TO
22351: IFFALSE 22456
// begin uc_nation := nation_nature ;
22353: LD_ADDR_OWVAR 21
22357: PUSH
22358: LD_INT 0
22360: ST_TO_ADDR
// uc_side := 0 ;
22361: LD_ADDR_OWVAR 20
22365: PUSH
22366: LD_INT 0
22368: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22369: LD_ADDR_OWVAR 29
22373: PUSH
22374: LD_INT 12
22376: PUSH
22377: LD_INT 12
22379: PUSH
22380: EMPTY
22381: LIST
22382: LIST
22383: ST_TO_ADDR
// hc_agressivity := 20 ;
22384: LD_ADDR_OWVAR 35
22388: PUSH
22389: LD_INT 20
22391: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
22392: LD_ADDR_OWVAR 28
22396: PUSH
22397: LD_INT 17
22399: ST_TO_ADDR
// hc_gallery :=  ;
22400: LD_ADDR_OWVAR 33
22404: PUSH
22405: LD_STRING 
22407: ST_TO_ADDR
// hc_name :=  ;
22408: LD_ADDR_OWVAR 26
22412: PUSH
22413: LD_STRING 
22415: ST_TO_ADDR
// un := CreateHuman ;
22416: LD_ADDR_VAR 0 2
22420: PUSH
22421: CALL_OW 44
22425: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
22426: LD_VAR 0 2
22430: PPUSH
22431: LD_INT 1
22433: PPUSH
22434: CALL_OW 51
// tmp := tmp ^ un ;
22438: LD_ADDR_VAR 0 3
22442: PUSH
22443: LD_VAR 0 3
22447: PUSH
22448: LD_VAR 0 2
22452: ADD
22453: ST_TO_ADDR
// end ;
22454: GO 22350
22456: POP
22457: POP
// repeat wait ( 0 0$1 ) ;
22458: LD_INT 35
22460: PPUSH
22461: CALL_OW 67
// for un in tmp do
22465: LD_ADDR_VAR 0 2
22469: PUSH
22470: LD_VAR 0 3
22474: PUSH
22475: FOR_IN
22476: IFFALSE 22550
// begin if IsDead ( un ) then
22478: LD_VAR 0 2
22482: PPUSH
22483: CALL_OW 301
22487: IFFALSE 22507
// begin tmp := tmp diff un ;
22489: LD_ADDR_VAR 0 3
22493: PUSH
22494: LD_VAR 0 3
22498: PUSH
22499: LD_VAR 0 2
22503: DIFF
22504: ST_TO_ADDR
// continue ;
22505: GO 22475
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
22507: LD_VAR 0 2
22511: PPUSH
22512: LD_INT 3
22514: PUSH
22515: LD_INT 22
22517: PUSH
22518: LD_INT 0
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: PPUSH
22529: CALL_OW 69
22533: PPUSH
22534: LD_VAR 0 2
22538: PPUSH
22539: CALL_OW 74
22543: PPUSH
22544: CALL_OW 115
// end ;
22548: GO 22475
22550: POP
22551: POP
// until not tmp ;
22552: LD_VAR 0 3
22556: NOT
22557: IFFALSE 22458
// end ;
22559: PPOPN 3
22561: END
// every 0 0$1 trigger StreamModeActive and sTroll do
22562: LD_EXP 56
22566: PUSH
22567: LD_EXP 81
22571: AND
22572: IFFALSE 22626
22574: GO 22576
22576: DISABLE
// begin ToLua ( displayTroll(); ) ;
22577: LD_STRING displayTroll();
22579: PPUSH
22580: CALL_OW 559
// wait ( 3 3$00 ) ;
22584: LD_INT 6300
22586: PPUSH
22587: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22591: LD_STRING hideTroll();
22593: PPUSH
22594: CALL_OW 559
// wait ( 1 1$00 ) ;
22598: LD_INT 2100
22600: PPUSH
22601: CALL_OW 67
// ToLua ( displayTroll(); ) ;
22605: LD_STRING displayTroll();
22607: PPUSH
22608: CALL_OW 559
// wait ( 1 1$00 ) ;
22612: LD_INT 2100
22614: PPUSH
22615: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22619: LD_STRING hideTroll();
22621: PPUSH
22622: CALL_OW 559
// end ;
22626: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
22627: LD_EXP 56
22631: PUSH
22632: LD_EXP 82
22636: AND
22637: IFFALSE 22700
22639: GO 22641
22641: DISABLE
22642: LD_INT 0
22644: PPUSH
// begin p := 0 ;
22645: LD_ADDR_VAR 0 1
22649: PUSH
22650: LD_INT 0
22652: ST_TO_ADDR
// repeat game_speed := 1 ;
22653: LD_ADDR_OWVAR 65
22657: PUSH
22658: LD_INT 1
22660: ST_TO_ADDR
// wait ( 0 0$1 ) ;
22661: LD_INT 35
22663: PPUSH
22664: CALL_OW 67
// p := p + 1 ;
22668: LD_ADDR_VAR 0 1
22672: PUSH
22673: LD_VAR 0 1
22677: PUSH
22678: LD_INT 1
22680: PLUS
22681: ST_TO_ADDR
// until p >= 60 ;
22682: LD_VAR 0 1
22686: PUSH
22687: LD_INT 60
22689: GREATEREQUAL
22690: IFFALSE 22653
// game_speed := 4 ;
22692: LD_ADDR_OWVAR 65
22696: PUSH
22697: LD_INT 4
22699: ST_TO_ADDR
// end ;
22700: PPOPN 1
22702: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
22703: LD_EXP 56
22707: PUSH
22708: LD_EXP 83
22712: AND
22713: IFFALSE 22859
22715: GO 22717
22717: DISABLE
22718: LD_INT 0
22720: PPUSH
22721: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22722: LD_ADDR_VAR 0 1
22726: PUSH
22727: LD_INT 22
22729: PUSH
22730: LD_OWVAR 2
22734: PUSH
22735: EMPTY
22736: LIST
22737: LIST
22738: PUSH
22739: LD_INT 2
22741: PUSH
22742: LD_INT 30
22744: PUSH
22745: LD_INT 0
22747: PUSH
22748: EMPTY
22749: LIST
22750: LIST
22751: PUSH
22752: LD_INT 30
22754: PUSH
22755: LD_INT 1
22757: PUSH
22758: EMPTY
22759: LIST
22760: LIST
22761: PUSH
22762: EMPTY
22763: LIST
22764: LIST
22765: LIST
22766: PUSH
22767: EMPTY
22768: LIST
22769: LIST
22770: PPUSH
22771: CALL_OW 69
22775: ST_TO_ADDR
// if not depot then
22776: LD_VAR 0 1
22780: NOT
22781: IFFALSE 22785
// exit ;
22783: GO 22859
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
22785: LD_ADDR_VAR 0 2
22789: PUSH
22790: LD_VAR 0 1
22794: PUSH
22795: LD_INT 1
22797: PPUSH
22798: LD_VAR 0 1
22802: PPUSH
22803: CALL_OW 12
22807: ARRAY
22808: PPUSH
22809: CALL_OW 274
22813: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
22814: LD_VAR 0 2
22818: PPUSH
22819: LD_INT 1
22821: PPUSH
22822: LD_INT 0
22824: PPUSH
22825: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
22829: LD_VAR 0 2
22833: PPUSH
22834: LD_INT 2
22836: PPUSH
22837: LD_INT 0
22839: PPUSH
22840: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
22844: LD_VAR 0 2
22848: PPUSH
22849: LD_INT 3
22851: PPUSH
22852: LD_INT 0
22854: PPUSH
22855: CALL_OW 277
// end ;
22859: PPOPN 2
22861: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
22862: LD_EXP 56
22866: PUSH
22867: LD_EXP 84
22871: AND
22872: IFFALSE 22969
22874: GO 22876
22876: DISABLE
22877: LD_INT 0
22879: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22880: LD_ADDR_VAR 0 1
22884: PUSH
22885: LD_INT 22
22887: PUSH
22888: LD_OWVAR 2
22892: PUSH
22893: EMPTY
22894: LIST
22895: LIST
22896: PUSH
22897: LD_INT 21
22899: PUSH
22900: LD_INT 1
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: PUSH
22907: LD_INT 3
22909: PUSH
22910: LD_INT 23
22912: PUSH
22913: LD_INT 0
22915: PUSH
22916: EMPTY
22917: LIST
22918: LIST
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: LIST
22928: PPUSH
22929: CALL_OW 69
22933: ST_TO_ADDR
// if not tmp then
22934: LD_VAR 0 1
22938: NOT
22939: IFFALSE 22943
// exit ;
22941: GO 22969
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
22943: LD_VAR 0 1
22947: PUSH
22948: LD_INT 1
22950: PPUSH
22951: LD_VAR 0 1
22955: PPUSH
22956: CALL_OW 12
22960: ARRAY
22961: PPUSH
22962: LD_INT 200
22964: PPUSH
22965: CALL_OW 234
// end ;
22969: PPOPN 1
22971: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
22972: LD_EXP 56
22976: PUSH
22977: LD_EXP 85
22981: AND
22982: IFFALSE 23061
22984: GO 22986
22986: DISABLE
22987: LD_INT 0
22989: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
22990: LD_ADDR_VAR 0 1
22994: PUSH
22995: LD_INT 22
22997: PUSH
22998: LD_OWVAR 2
23002: PUSH
23003: EMPTY
23004: LIST
23005: LIST
23006: PUSH
23007: LD_INT 21
23009: PUSH
23010: LD_INT 2
23012: PUSH
23013: EMPTY
23014: LIST
23015: LIST
23016: PUSH
23017: EMPTY
23018: LIST
23019: LIST
23020: PPUSH
23021: CALL_OW 69
23025: ST_TO_ADDR
// if not tmp then
23026: LD_VAR 0 1
23030: NOT
23031: IFFALSE 23035
// exit ;
23033: GO 23061
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
23035: LD_VAR 0 1
23039: PUSH
23040: LD_INT 1
23042: PPUSH
23043: LD_VAR 0 1
23047: PPUSH
23048: CALL_OW 12
23052: ARRAY
23053: PPUSH
23054: LD_INT 60
23056: PPUSH
23057: CALL_OW 234
// end ;
23061: PPOPN 1
23063: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
23064: LD_EXP 56
23068: PUSH
23069: LD_EXP 86
23073: AND
23074: IFFALSE 23173
23076: GO 23078
23078: DISABLE
23079: LD_INT 0
23081: PPUSH
23082: PPUSH
// begin enable ;
23083: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
23084: LD_ADDR_VAR 0 1
23088: PUSH
23089: LD_INT 22
23091: PUSH
23092: LD_OWVAR 2
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: PUSH
23101: LD_INT 61
23103: PUSH
23104: EMPTY
23105: LIST
23106: PUSH
23107: LD_INT 33
23109: PUSH
23110: LD_INT 2
23112: PUSH
23113: EMPTY
23114: LIST
23115: LIST
23116: PUSH
23117: EMPTY
23118: LIST
23119: LIST
23120: LIST
23121: PPUSH
23122: CALL_OW 69
23126: ST_TO_ADDR
// if not tmp then
23127: LD_VAR 0 1
23131: NOT
23132: IFFALSE 23136
// exit ;
23134: GO 23173
// for i in tmp do
23136: LD_ADDR_VAR 0 2
23140: PUSH
23141: LD_VAR 0 1
23145: PUSH
23146: FOR_IN
23147: IFFALSE 23171
// if IsControledBy ( i ) then
23149: LD_VAR 0 2
23153: PPUSH
23154: CALL_OW 312
23158: IFFALSE 23169
// ComUnlink ( i ) ;
23160: LD_VAR 0 2
23164: PPUSH
23165: CALL_OW 136
23169: GO 23146
23171: POP
23172: POP
// end ;
23173: PPOPN 2
23175: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
23176: LD_EXP 56
23180: PUSH
23181: LD_EXP 87
23185: AND
23186: IFFALSE 23326
23188: GO 23190
23190: DISABLE
23191: LD_INT 0
23193: PPUSH
23194: PPUSH
// begin ToLua ( displayPowell(); ) ;
23195: LD_STRING displayPowell();
23197: PPUSH
23198: CALL_OW 559
// uc_side := 0 ;
23202: LD_ADDR_OWVAR 20
23206: PUSH
23207: LD_INT 0
23209: ST_TO_ADDR
// uc_nation := 2 ;
23210: LD_ADDR_OWVAR 21
23214: PUSH
23215: LD_INT 2
23217: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
23218: LD_ADDR_OWVAR 37
23222: PUSH
23223: LD_INT 14
23225: ST_TO_ADDR
// vc_engine := engine_siberite ;
23226: LD_ADDR_OWVAR 39
23230: PUSH
23231: LD_INT 3
23233: ST_TO_ADDR
// vc_control := control_apeman ;
23234: LD_ADDR_OWVAR 38
23238: PUSH
23239: LD_INT 5
23241: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
23242: LD_ADDR_OWVAR 40
23246: PUSH
23247: LD_INT 29
23249: ST_TO_ADDR
// un := CreateVehicle ;
23250: LD_ADDR_VAR 0 2
23254: PUSH
23255: CALL_OW 45
23259: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23260: LD_VAR 0 2
23264: PPUSH
23265: LD_INT 1
23267: PPUSH
23268: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23272: LD_INT 35
23274: PPUSH
23275: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23279: LD_VAR 0 2
23283: PPUSH
23284: LD_INT 22
23286: PUSH
23287: LD_OWVAR 2
23291: PUSH
23292: EMPTY
23293: LIST
23294: LIST
23295: PPUSH
23296: CALL_OW 69
23300: PPUSH
23301: LD_VAR 0 2
23305: PPUSH
23306: CALL_OW 74
23310: PPUSH
23311: CALL_OW 115
// until IsDead ( un ) ;
23315: LD_VAR 0 2
23319: PPUSH
23320: CALL_OW 301
23324: IFFALSE 23272
// end ;
23326: PPOPN 2
23328: END
// every 0 0$1 trigger StreamModeActive and sStu do
23329: LD_EXP 56
23333: PUSH
23334: LD_EXP 95
23338: AND
23339: IFFALSE 23355
23341: GO 23343
23343: DISABLE
// begin ToLua ( displayStucuk(); ) ;
23344: LD_STRING displayStucuk();
23346: PPUSH
23347: CALL_OW 559
// ResetFog ;
23351: CALL_OW 335
// end ;
23355: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
23356: LD_EXP 56
23360: PUSH
23361: LD_EXP 88
23365: AND
23366: IFFALSE 23507
23368: GO 23370
23370: DISABLE
23371: LD_INT 0
23373: PPUSH
23374: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23375: LD_ADDR_VAR 0 2
23379: PUSH
23380: LD_INT 22
23382: PUSH
23383: LD_OWVAR 2
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: PUSH
23392: LD_INT 21
23394: PUSH
23395: LD_INT 1
23397: PUSH
23398: EMPTY
23399: LIST
23400: LIST
23401: PUSH
23402: EMPTY
23403: LIST
23404: LIST
23405: PPUSH
23406: CALL_OW 69
23410: ST_TO_ADDR
// if not tmp then
23411: LD_VAR 0 2
23415: NOT
23416: IFFALSE 23420
// exit ;
23418: GO 23507
// un := tmp [ rand ( 1 , tmp ) ] ;
23420: LD_ADDR_VAR 0 1
23424: PUSH
23425: LD_VAR 0 2
23429: PUSH
23430: LD_INT 1
23432: PPUSH
23433: LD_VAR 0 2
23437: PPUSH
23438: CALL_OW 12
23442: ARRAY
23443: ST_TO_ADDR
// SetSide ( un , 0 ) ;
23444: LD_VAR 0 1
23448: PPUSH
23449: LD_INT 0
23451: PPUSH
23452: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
23456: LD_VAR 0 1
23460: PPUSH
23461: LD_OWVAR 3
23465: PUSH
23466: LD_VAR 0 1
23470: DIFF
23471: PPUSH
23472: LD_VAR 0 1
23476: PPUSH
23477: CALL_OW 74
23481: PPUSH
23482: CALL_OW 115
// wait ( 0 0$20 ) ;
23486: LD_INT 700
23488: PPUSH
23489: CALL_OW 67
// SetSide ( un , your_side ) ;
23493: LD_VAR 0 1
23497: PPUSH
23498: LD_OWVAR 2
23502: PPUSH
23503: CALL_OW 235
// end ;
23507: PPOPN 2
23509: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
23510: LD_EXP 56
23514: PUSH
23515: LD_EXP 89
23519: AND
23520: IFFALSE 23626
23522: GO 23524
23524: DISABLE
23525: LD_INT 0
23527: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23528: LD_ADDR_VAR 0 1
23532: PUSH
23533: LD_INT 22
23535: PUSH
23536: LD_OWVAR 2
23540: PUSH
23541: EMPTY
23542: LIST
23543: LIST
23544: PUSH
23545: LD_INT 2
23547: PUSH
23548: LD_INT 30
23550: PUSH
23551: LD_INT 0
23553: PUSH
23554: EMPTY
23555: LIST
23556: LIST
23557: PUSH
23558: LD_INT 30
23560: PUSH
23561: LD_INT 1
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: PUSH
23568: EMPTY
23569: LIST
23570: LIST
23571: LIST
23572: PUSH
23573: EMPTY
23574: LIST
23575: LIST
23576: PPUSH
23577: CALL_OW 69
23581: ST_TO_ADDR
// if not depot then
23582: LD_VAR 0 1
23586: NOT
23587: IFFALSE 23591
// exit ;
23589: GO 23626
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
23591: LD_VAR 0 1
23595: PUSH
23596: LD_INT 1
23598: ARRAY
23599: PPUSH
23600: CALL_OW 250
23604: PPUSH
23605: LD_VAR 0 1
23609: PUSH
23610: LD_INT 1
23612: ARRAY
23613: PPUSH
23614: CALL_OW 251
23618: PPUSH
23619: LD_INT 70
23621: PPUSH
23622: CALL_OW 495
// end ;
23626: PPOPN 1
23628: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
23629: LD_EXP 56
23633: PUSH
23634: LD_EXP 90
23638: AND
23639: IFFALSE 23850
23641: GO 23643
23643: DISABLE
23644: LD_INT 0
23646: PPUSH
23647: PPUSH
23648: PPUSH
23649: PPUSH
23650: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23651: LD_ADDR_VAR 0 5
23655: PUSH
23656: LD_INT 22
23658: PUSH
23659: LD_OWVAR 2
23663: PUSH
23664: EMPTY
23665: LIST
23666: LIST
23667: PUSH
23668: LD_INT 21
23670: PUSH
23671: LD_INT 1
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: PUSH
23678: EMPTY
23679: LIST
23680: LIST
23681: PPUSH
23682: CALL_OW 69
23686: ST_TO_ADDR
// if not tmp then
23687: LD_VAR 0 5
23691: NOT
23692: IFFALSE 23696
// exit ;
23694: GO 23850
// for i in tmp do
23696: LD_ADDR_VAR 0 1
23700: PUSH
23701: LD_VAR 0 5
23705: PUSH
23706: FOR_IN
23707: IFFALSE 23848
// begin d := rand ( 0 , 5 ) ;
23709: LD_ADDR_VAR 0 4
23713: PUSH
23714: LD_INT 0
23716: PPUSH
23717: LD_INT 5
23719: PPUSH
23720: CALL_OW 12
23724: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
23725: LD_ADDR_VAR 0 2
23729: PUSH
23730: LD_VAR 0 1
23734: PPUSH
23735: CALL_OW 250
23739: PPUSH
23740: LD_VAR 0 4
23744: PPUSH
23745: LD_INT 3
23747: PPUSH
23748: LD_INT 12
23750: PPUSH
23751: CALL_OW 12
23755: PPUSH
23756: CALL_OW 272
23760: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
23761: LD_ADDR_VAR 0 3
23765: PUSH
23766: LD_VAR 0 1
23770: PPUSH
23771: CALL_OW 251
23775: PPUSH
23776: LD_VAR 0 4
23780: PPUSH
23781: LD_INT 3
23783: PPUSH
23784: LD_INT 12
23786: PPUSH
23787: CALL_OW 12
23791: PPUSH
23792: CALL_OW 273
23796: ST_TO_ADDR
// if ValidHex ( x , y ) then
23797: LD_VAR 0 2
23801: PPUSH
23802: LD_VAR 0 3
23806: PPUSH
23807: CALL_OW 488
23811: IFFALSE 23846
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
23813: LD_VAR 0 1
23817: PPUSH
23818: LD_VAR 0 2
23822: PPUSH
23823: LD_VAR 0 3
23827: PPUSH
23828: LD_INT 3
23830: PPUSH
23831: LD_INT 6
23833: PPUSH
23834: CALL_OW 12
23838: PPUSH
23839: LD_INT 1
23841: PPUSH
23842: CALL_OW 483
// end ;
23846: GO 23706
23848: POP
23849: POP
// end ;
23850: PPOPN 5
23852: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
23853: LD_EXP 56
23857: PUSH
23858: LD_EXP 91
23862: AND
23863: IFFALSE 23957
23865: GO 23867
23867: DISABLE
23868: LD_INT 0
23870: PPUSH
23871: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
23872: LD_ADDR_VAR 0 2
23876: PUSH
23877: LD_INT 22
23879: PUSH
23880: LD_OWVAR 2
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: PUSH
23889: LD_INT 32
23891: PUSH
23892: LD_INT 1
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: PUSH
23899: LD_INT 21
23901: PUSH
23902: LD_INT 2
23904: PUSH
23905: EMPTY
23906: LIST
23907: LIST
23908: PUSH
23909: EMPTY
23910: LIST
23911: LIST
23912: LIST
23913: PPUSH
23914: CALL_OW 69
23918: ST_TO_ADDR
// if not tmp then
23919: LD_VAR 0 2
23923: NOT
23924: IFFALSE 23928
// exit ;
23926: GO 23957
// for i in tmp do
23928: LD_ADDR_VAR 0 1
23932: PUSH
23933: LD_VAR 0 2
23937: PUSH
23938: FOR_IN
23939: IFFALSE 23955
// SetFuel ( i , 0 ) ;
23941: LD_VAR 0 1
23945: PPUSH
23946: LD_INT 0
23948: PPUSH
23949: CALL_OW 240
23953: GO 23938
23955: POP
23956: POP
// end ;
23957: PPOPN 2
23959: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
23960: LD_EXP 56
23964: PUSH
23965: LD_EXP 92
23969: AND
23970: IFFALSE 24036
23972: GO 23974
23974: DISABLE
23975: LD_INT 0
23977: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23978: LD_ADDR_VAR 0 1
23982: PUSH
23983: LD_INT 22
23985: PUSH
23986: LD_OWVAR 2
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: PUSH
23995: LD_INT 30
23997: PUSH
23998: LD_INT 29
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: PUSH
24005: EMPTY
24006: LIST
24007: LIST
24008: PPUSH
24009: CALL_OW 69
24013: ST_TO_ADDR
// if not tmp then
24014: LD_VAR 0 1
24018: NOT
24019: IFFALSE 24023
// exit ;
24021: GO 24036
// DestroyUnit ( tmp [ 1 ] ) ;
24023: LD_VAR 0 1
24027: PUSH
24028: LD_INT 1
24030: ARRAY
24031: PPUSH
24032: CALL_OW 65
// end ;
24036: PPOPN 1
24038: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
24039: LD_EXP 56
24043: PUSH
24044: LD_EXP 94
24048: AND
24049: IFFALSE 24178
24051: GO 24053
24053: DISABLE
24054: LD_INT 0
24056: PPUSH
// begin uc_side := 0 ;
24057: LD_ADDR_OWVAR 20
24061: PUSH
24062: LD_INT 0
24064: ST_TO_ADDR
// uc_nation := nation_arabian ;
24065: LD_ADDR_OWVAR 21
24069: PUSH
24070: LD_INT 2
24072: ST_TO_ADDR
// hc_gallery :=  ;
24073: LD_ADDR_OWVAR 33
24077: PUSH
24078: LD_STRING 
24080: ST_TO_ADDR
// hc_name :=  ;
24081: LD_ADDR_OWVAR 26
24085: PUSH
24086: LD_STRING 
24088: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
24089: LD_INT 1
24091: PPUSH
24092: LD_INT 11
24094: PPUSH
24095: LD_INT 10
24097: PPUSH
24098: CALL_OW 380
// un := CreateHuman ;
24102: LD_ADDR_VAR 0 1
24106: PUSH
24107: CALL_OW 44
24111: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24112: LD_VAR 0 1
24116: PPUSH
24117: LD_INT 1
24119: PPUSH
24120: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24124: LD_INT 35
24126: PPUSH
24127: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24131: LD_VAR 0 1
24135: PPUSH
24136: LD_INT 22
24138: PUSH
24139: LD_OWVAR 2
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: PPUSH
24148: CALL_OW 69
24152: PPUSH
24153: LD_VAR 0 1
24157: PPUSH
24158: CALL_OW 74
24162: PPUSH
24163: CALL_OW 115
// until IsDead ( un ) ;
24167: LD_VAR 0 1
24171: PPUSH
24172: CALL_OW 301
24176: IFFALSE 24124
// end ;
24178: PPOPN 1
24180: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
24181: LD_EXP 56
24185: PUSH
24186: LD_EXP 96
24190: AND
24191: IFFALSE 24203
24193: GO 24195
24195: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
24196: LD_STRING earthquake(getX(game), 0, 32)
24198: PPUSH
24199: CALL_OW 559
24203: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
24204: LD_EXP 56
24208: PUSH
24209: LD_EXP 97
24213: AND
24214: IFFALSE 24305
24216: GO 24218
24218: DISABLE
24219: LD_INT 0
24221: PPUSH
// begin enable ;
24222: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
24223: LD_ADDR_VAR 0 1
24227: PUSH
24228: LD_INT 22
24230: PUSH
24231: LD_OWVAR 2
24235: PUSH
24236: EMPTY
24237: LIST
24238: LIST
24239: PUSH
24240: LD_INT 21
24242: PUSH
24243: LD_INT 2
24245: PUSH
24246: EMPTY
24247: LIST
24248: LIST
24249: PUSH
24250: LD_INT 33
24252: PUSH
24253: LD_INT 3
24255: PUSH
24256: EMPTY
24257: LIST
24258: LIST
24259: PUSH
24260: EMPTY
24261: LIST
24262: LIST
24263: LIST
24264: PPUSH
24265: CALL_OW 69
24269: ST_TO_ADDR
// if not tmp then
24270: LD_VAR 0 1
24274: NOT
24275: IFFALSE 24279
// exit ;
24277: GO 24305
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24279: LD_VAR 0 1
24283: PUSH
24284: LD_INT 1
24286: PPUSH
24287: LD_VAR 0 1
24291: PPUSH
24292: CALL_OW 12
24296: ARRAY
24297: PPUSH
24298: LD_INT 1
24300: PPUSH
24301: CALL_OW 234
// end ;
24305: PPOPN 1
24307: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
24308: LD_EXP 56
24312: PUSH
24313: LD_EXP 98
24317: AND
24318: IFFALSE 24459
24320: GO 24322
24322: DISABLE
24323: LD_INT 0
24325: PPUSH
24326: PPUSH
24327: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24328: LD_ADDR_VAR 0 3
24332: PUSH
24333: LD_INT 22
24335: PUSH
24336: LD_OWVAR 2
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: PUSH
24345: LD_INT 25
24347: PUSH
24348: LD_INT 1
24350: PUSH
24351: EMPTY
24352: LIST
24353: LIST
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: PPUSH
24359: CALL_OW 69
24363: ST_TO_ADDR
// if not tmp then
24364: LD_VAR 0 3
24368: NOT
24369: IFFALSE 24373
// exit ;
24371: GO 24459
// un := tmp [ rand ( 1 , tmp ) ] ;
24373: LD_ADDR_VAR 0 2
24377: PUSH
24378: LD_VAR 0 3
24382: PUSH
24383: LD_INT 1
24385: PPUSH
24386: LD_VAR 0 3
24390: PPUSH
24391: CALL_OW 12
24395: ARRAY
24396: ST_TO_ADDR
// if Crawls ( un ) then
24397: LD_VAR 0 2
24401: PPUSH
24402: CALL_OW 318
24406: IFFALSE 24417
// ComWalk ( un ) ;
24408: LD_VAR 0 2
24412: PPUSH
24413: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
24417: LD_VAR 0 2
24421: PPUSH
24422: LD_INT 9
24424: PPUSH
24425: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
24429: LD_INT 28
24431: PPUSH
24432: LD_OWVAR 2
24436: PPUSH
24437: LD_INT 2
24439: PPUSH
24440: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
24444: LD_INT 29
24446: PPUSH
24447: LD_OWVAR 2
24451: PPUSH
24452: LD_INT 2
24454: PPUSH
24455: CALL_OW 322
// end ;
24459: PPOPN 3
24461: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
24462: LD_EXP 56
24466: PUSH
24467: LD_EXP 99
24471: AND
24472: IFFALSE 24583
24474: GO 24476
24476: DISABLE
24477: LD_INT 0
24479: PPUSH
24480: PPUSH
24481: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24482: LD_ADDR_VAR 0 3
24486: PUSH
24487: LD_INT 22
24489: PUSH
24490: LD_OWVAR 2
24494: PUSH
24495: EMPTY
24496: LIST
24497: LIST
24498: PUSH
24499: LD_INT 25
24501: PUSH
24502: LD_INT 1
24504: PUSH
24505: EMPTY
24506: LIST
24507: LIST
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: PPUSH
24513: CALL_OW 69
24517: ST_TO_ADDR
// if not tmp then
24518: LD_VAR 0 3
24522: NOT
24523: IFFALSE 24527
// exit ;
24525: GO 24583
// un := tmp [ rand ( 1 , tmp ) ] ;
24527: LD_ADDR_VAR 0 2
24531: PUSH
24532: LD_VAR 0 3
24536: PUSH
24537: LD_INT 1
24539: PPUSH
24540: LD_VAR 0 3
24544: PPUSH
24545: CALL_OW 12
24549: ARRAY
24550: ST_TO_ADDR
// if Crawls ( un ) then
24551: LD_VAR 0 2
24555: PPUSH
24556: CALL_OW 318
24560: IFFALSE 24571
// ComWalk ( un ) ;
24562: LD_VAR 0 2
24566: PPUSH
24567: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24571: LD_VAR 0 2
24575: PPUSH
24576: LD_INT 8
24578: PPUSH
24579: CALL_OW 336
// end ;
24583: PPOPN 3
24585: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
24586: LD_EXP 56
24590: PUSH
24591: LD_EXP 100
24595: AND
24596: IFFALSE 24740
24598: GO 24600
24600: DISABLE
24601: LD_INT 0
24603: PPUSH
24604: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
24605: LD_ADDR_VAR 0 2
24609: PUSH
24610: LD_INT 22
24612: PUSH
24613: LD_OWVAR 2
24617: PUSH
24618: EMPTY
24619: LIST
24620: LIST
24621: PUSH
24622: LD_INT 21
24624: PUSH
24625: LD_INT 2
24627: PUSH
24628: EMPTY
24629: LIST
24630: LIST
24631: PUSH
24632: LD_INT 2
24634: PUSH
24635: LD_INT 34
24637: PUSH
24638: LD_INT 12
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: PUSH
24645: LD_INT 34
24647: PUSH
24648: LD_INT 51
24650: PUSH
24651: EMPTY
24652: LIST
24653: LIST
24654: PUSH
24655: LD_INT 34
24657: PUSH
24658: LD_INT 32
24660: PUSH
24661: EMPTY
24662: LIST
24663: LIST
24664: PUSH
24665: EMPTY
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: PUSH
24671: EMPTY
24672: LIST
24673: LIST
24674: LIST
24675: PPUSH
24676: CALL_OW 69
24680: ST_TO_ADDR
// if not tmp then
24681: LD_VAR 0 2
24685: NOT
24686: IFFALSE 24690
// exit ;
24688: GO 24740
// for i in tmp do
24690: LD_ADDR_VAR 0 1
24694: PUSH
24695: LD_VAR 0 2
24699: PUSH
24700: FOR_IN
24701: IFFALSE 24738
// if GetCargo ( i , mat_artifact ) = 0 then
24703: LD_VAR 0 1
24707: PPUSH
24708: LD_INT 4
24710: PPUSH
24711: CALL_OW 289
24715: PUSH
24716: LD_INT 0
24718: EQUAL
24719: IFFALSE 24736
// SetCargo ( i , mat_siberit , 100 ) ;
24721: LD_VAR 0 1
24725: PPUSH
24726: LD_INT 3
24728: PPUSH
24729: LD_INT 100
24731: PPUSH
24732: CALL_OW 290
24736: GO 24700
24738: POP
24739: POP
// end ;
24740: PPOPN 2
24742: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
24743: LD_EXP 56
24747: PUSH
24748: LD_EXP 101
24752: AND
24753: IFFALSE 24936
24755: GO 24757
24757: DISABLE
24758: LD_INT 0
24760: PPUSH
24761: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24762: LD_ADDR_VAR 0 2
24766: PUSH
24767: LD_INT 22
24769: PUSH
24770: LD_OWVAR 2
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: PPUSH
24779: CALL_OW 69
24783: ST_TO_ADDR
// if not tmp then
24784: LD_VAR 0 2
24788: NOT
24789: IFFALSE 24793
// exit ;
24791: GO 24936
// for i := 1 to 2 do
24793: LD_ADDR_VAR 0 1
24797: PUSH
24798: DOUBLE
24799: LD_INT 1
24801: DEC
24802: ST_TO_ADDR
24803: LD_INT 2
24805: PUSH
24806: FOR_TO
24807: IFFALSE 24934
// begin uc_side := your_side ;
24809: LD_ADDR_OWVAR 20
24813: PUSH
24814: LD_OWVAR 2
24818: ST_TO_ADDR
// uc_nation := nation_american ;
24819: LD_ADDR_OWVAR 21
24823: PUSH
24824: LD_INT 1
24826: ST_TO_ADDR
// vc_chassis := us_morphling ;
24827: LD_ADDR_OWVAR 37
24831: PUSH
24832: LD_INT 5
24834: ST_TO_ADDR
// vc_engine := engine_siberite ;
24835: LD_ADDR_OWVAR 39
24839: PUSH
24840: LD_INT 3
24842: ST_TO_ADDR
// vc_control := control_computer ;
24843: LD_ADDR_OWVAR 38
24847: PUSH
24848: LD_INT 3
24850: ST_TO_ADDR
// vc_weapon := us_double_laser ;
24851: LD_ADDR_OWVAR 40
24855: PUSH
24856: LD_INT 10
24858: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
24859: LD_VAR 0 2
24863: PUSH
24864: LD_INT 1
24866: ARRAY
24867: PPUSH
24868: CALL_OW 310
24872: NOT
24873: IFFALSE 24920
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
24875: CALL_OW 45
24879: PPUSH
24880: LD_VAR 0 2
24884: PUSH
24885: LD_INT 1
24887: ARRAY
24888: PPUSH
24889: CALL_OW 250
24893: PPUSH
24894: LD_VAR 0 2
24898: PUSH
24899: LD_INT 1
24901: ARRAY
24902: PPUSH
24903: CALL_OW 251
24907: PPUSH
24908: LD_INT 12
24910: PPUSH
24911: LD_INT 1
24913: PPUSH
24914: CALL_OW 50
24918: GO 24932
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
24920: CALL_OW 45
24924: PPUSH
24925: LD_INT 1
24927: PPUSH
24928: CALL_OW 51
// end ;
24932: GO 24806
24934: POP
24935: POP
// end ;
24936: PPOPN 2
24938: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
24939: LD_EXP 56
24943: PUSH
24944: LD_EXP 102
24948: AND
24949: IFFALSE 25171
24951: GO 24953
24953: DISABLE
24954: LD_INT 0
24956: PPUSH
24957: PPUSH
24958: PPUSH
24959: PPUSH
24960: PPUSH
24961: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24962: LD_ADDR_VAR 0 6
24966: PUSH
24967: LD_INT 22
24969: PUSH
24970: LD_OWVAR 2
24974: PUSH
24975: EMPTY
24976: LIST
24977: LIST
24978: PUSH
24979: LD_INT 21
24981: PUSH
24982: LD_INT 1
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: PUSH
24989: LD_INT 3
24991: PUSH
24992: LD_INT 23
24994: PUSH
24995: LD_INT 0
24997: PUSH
24998: EMPTY
24999: LIST
25000: LIST
25001: PUSH
25002: EMPTY
25003: LIST
25004: LIST
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: LIST
25010: PPUSH
25011: CALL_OW 69
25015: ST_TO_ADDR
// if not tmp then
25016: LD_VAR 0 6
25020: NOT
25021: IFFALSE 25025
// exit ;
25023: GO 25171
// s1 := rand ( 1 , 4 ) ;
25025: LD_ADDR_VAR 0 2
25029: PUSH
25030: LD_INT 1
25032: PPUSH
25033: LD_INT 4
25035: PPUSH
25036: CALL_OW 12
25040: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
25041: LD_ADDR_VAR 0 4
25045: PUSH
25046: LD_VAR 0 6
25050: PUSH
25051: LD_INT 1
25053: ARRAY
25054: PPUSH
25055: LD_VAR 0 2
25059: PPUSH
25060: CALL_OW 259
25064: ST_TO_ADDR
// if s1 = 1 then
25065: LD_VAR 0 2
25069: PUSH
25070: LD_INT 1
25072: EQUAL
25073: IFFALSE 25093
// s2 := rand ( 2 , 4 ) else
25075: LD_ADDR_VAR 0 3
25079: PUSH
25080: LD_INT 2
25082: PPUSH
25083: LD_INT 4
25085: PPUSH
25086: CALL_OW 12
25090: ST_TO_ADDR
25091: GO 25101
// s2 := 1 ;
25093: LD_ADDR_VAR 0 3
25097: PUSH
25098: LD_INT 1
25100: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
25101: LD_ADDR_VAR 0 5
25105: PUSH
25106: LD_VAR 0 6
25110: PUSH
25111: LD_INT 1
25113: ARRAY
25114: PPUSH
25115: LD_VAR 0 3
25119: PPUSH
25120: CALL_OW 259
25124: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
25125: LD_VAR 0 6
25129: PUSH
25130: LD_INT 1
25132: ARRAY
25133: PPUSH
25134: LD_VAR 0 2
25138: PPUSH
25139: LD_VAR 0 5
25143: PPUSH
25144: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
25148: LD_VAR 0 6
25152: PUSH
25153: LD_INT 1
25155: ARRAY
25156: PPUSH
25157: LD_VAR 0 3
25161: PPUSH
25162: LD_VAR 0 4
25166: PPUSH
25167: CALL_OW 237
// end ;
25171: PPOPN 6
25173: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
25174: LD_EXP 56
25178: PUSH
25179: LD_EXP 103
25183: AND
25184: IFFALSE 25263
25186: GO 25188
25188: DISABLE
25189: LD_INT 0
25191: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
25192: LD_ADDR_VAR 0 1
25196: PUSH
25197: LD_INT 22
25199: PUSH
25200: LD_OWVAR 2
25204: PUSH
25205: EMPTY
25206: LIST
25207: LIST
25208: PUSH
25209: LD_INT 30
25211: PUSH
25212: LD_INT 3
25214: PUSH
25215: EMPTY
25216: LIST
25217: LIST
25218: PUSH
25219: EMPTY
25220: LIST
25221: LIST
25222: PPUSH
25223: CALL_OW 69
25227: ST_TO_ADDR
// if not tmp then
25228: LD_VAR 0 1
25232: NOT
25233: IFFALSE 25237
// exit ;
25235: GO 25263
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25237: LD_VAR 0 1
25241: PUSH
25242: LD_INT 1
25244: PPUSH
25245: LD_VAR 0 1
25249: PPUSH
25250: CALL_OW 12
25254: ARRAY
25255: PPUSH
25256: LD_INT 1
25258: PPUSH
25259: CALL_OW 234
// end ;
25263: PPOPN 1
25265: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
25266: LD_EXP 56
25270: PUSH
25271: LD_EXP 104
25275: AND
25276: IFFALSE 25388
25278: GO 25280
25280: DISABLE
25281: LD_INT 0
25283: PPUSH
25284: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
25285: LD_ADDR_VAR 0 2
25289: PUSH
25290: LD_INT 22
25292: PUSH
25293: LD_OWVAR 2
25297: PUSH
25298: EMPTY
25299: LIST
25300: LIST
25301: PUSH
25302: LD_INT 2
25304: PUSH
25305: LD_INT 30
25307: PUSH
25308: LD_INT 27
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: PUSH
25315: LD_INT 30
25317: PUSH
25318: LD_INT 26
25320: PUSH
25321: EMPTY
25322: LIST
25323: LIST
25324: PUSH
25325: LD_INT 30
25327: PUSH
25328: LD_INT 28
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: PUSH
25335: EMPTY
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: PPUSH
25345: CALL_OW 69
25349: ST_TO_ADDR
// if not tmp then
25350: LD_VAR 0 2
25354: NOT
25355: IFFALSE 25359
// exit ;
25357: GO 25388
// for i in tmp do
25359: LD_ADDR_VAR 0 1
25363: PUSH
25364: LD_VAR 0 2
25368: PUSH
25369: FOR_IN
25370: IFFALSE 25386
// SetLives ( i , 1 ) ;
25372: LD_VAR 0 1
25376: PPUSH
25377: LD_INT 1
25379: PPUSH
25380: CALL_OW 234
25384: GO 25369
25386: POP
25387: POP
// end ;
25388: PPOPN 2
25390: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
25391: LD_EXP 56
25395: PUSH
25396: LD_EXP 105
25400: AND
25401: IFFALSE 25675
25403: GO 25405
25405: DISABLE
25406: LD_INT 0
25408: PPUSH
25409: PPUSH
25410: PPUSH
// begin i := rand ( 1 , 7 ) ;
25411: LD_ADDR_VAR 0 1
25415: PUSH
25416: LD_INT 1
25418: PPUSH
25419: LD_INT 7
25421: PPUSH
25422: CALL_OW 12
25426: ST_TO_ADDR
// case i of 1 :
25427: LD_VAR 0 1
25431: PUSH
25432: LD_INT 1
25434: DOUBLE
25435: EQUAL
25436: IFTRUE 25440
25438: GO 25450
25440: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
25441: LD_STRING earthquake(getX(game), 0, 32)
25443: PPUSH
25444: CALL_OW 559
25448: GO 25675
25450: LD_INT 2
25452: DOUBLE
25453: EQUAL
25454: IFTRUE 25458
25456: GO 25472
25458: POP
// begin ToLua ( displayStucuk(); ) ;
25459: LD_STRING displayStucuk();
25461: PPUSH
25462: CALL_OW 559
// ResetFog ;
25466: CALL_OW 335
// end ; 3 :
25470: GO 25675
25472: LD_INT 3
25474: DOUBLE
25475: EQUAL
25476: IFTRUE 25480
25478: GO 25584
25480: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25481: LD_ADDR_VAR 0 2
25485: PUSH
25486: LD_INT 22
25488: PUSH
25489: LD_OWVAR 2
25493: PUSH
25494: EMPTY
25495: LIST
25496: LIST
25497: PUSH
25498: LD_INT 25
25500: PUSH
25501: LD_INT 1
25503: PUSH
25504: EMPTY
25505: LIST
25506: LIST
25507: PUSH
25508: EMPTY
25509: LIST
25510: LIST
25511: PPUSH
25512: CALL_OW 69
25516: ST_TO_ADDR
// if not tmp then
25517: LD_VAR 0 2
25521: NOT
25522: IFFALSE 25526
// exit ;
25524: GO 25675
// un := tmp [ rand ( 1 , tmp ) ] ;
25526: LD_ADDR_VAR 0 3
25530: PUSH
25531: LD_VAR 0 2
25535: PUSH
25536: LD_INT 1
25538: PPUSH
25539: LD_VAR 0 2
25543: PPUSH
25544: CALL_OW 12
25548: ARRAY
25549: ST_TO_ADDR
// if Crawls ( un ) then
25550: LD_VAR 0 3
25554: PPUSH
25555: CALL_OW 318
25559: IFFALSE 25570
// ComWalk ( un ) ;
25561: LD_VAR 0 3
25565: PPUSH
25566: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25570: LD_VAR 0 3
25574: PPUSH
25575: LD_INT 8
25577: PPUSH
25578: CALL_OW 336
// end ; 4 :
25582: GO 25675
25584: LD_INT 4
25586: DOUBLE
25587: EQUAL
25588: IFTRUE 25592
25590: GO 25653
25592: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25593: LD_ADDR_VAR 0 2
25597: PUSH
25598: LD_INT 22
25600: PUSH
25601: LD_OWVAR 2
25605: PUSH
25606: EMPTY
25607: LIST
25608: LIST
25609: PUSH
25610: LD_INT 30
25612: PUSH
25613: LD_INT 29
25615: PUSH
25616: EMPTY
25617: LIST
25618: LIST
25619: PUSH
25620: EMPTY
25621: LIST
25622: LIST
25623: PPUSH
25624: CALL_OW 69
25628: ST_TO_ADDR
// if not tmp then
25629: LD_VAR 0 2
25633: NOT
25634: IFFALSE 25638
// exit ;
25636: GO 25675
// DestroyUnit ( tmp [ 1 ] ) ;
25638: LD_VAR 0 2
25642: PUSH
25643: LD_INT 1
25645: ARRAY
25646: PPUSH
25647: CALL_OW 65
// end ; 5 .. 7 :
25651: GO 25675
25653: LD_INT 5
25655: DOUBLE
25656: GREATEREQUAL
25657: IFFALSE 25665
25659: LD_INT 7
25661: DOUBLE
25662: LESSEQUAL
25663: IFTRUE 25667
25665: GO 25674
25667: POP
// StreamSibBomb ; end ;
25668: CALL 21925 0 0
25672: GO 25675
25674: POP
// end ;
25675: PPOPN 3
25677: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
25678: LD_EXP 56
25682: PUSH
25683: LD_EXP 106
25687: AND
25688: IFFALSE 25844
25690: GO 25692
25692: DISABLE
25693: LD_INT 0
25695: PPUSH
25696: PPUSH
25697: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
25698: LD_ADDR_VAR 0 2
25702: PUSH
25703: LD_INT 81
25705: PUSH
25706: LD_OWVAR 2
25710: PUSH
25711: EMPTY
25712: LIST
25713: LIST
25714: PUSH
25715: LD_INT 2
25717: PUSH
25718: LD_INT 21
25720: PUSH
25721: LD_INT 1
25723: PUSH
25724: EMPTY
25725: LIST
25726: LIST
25727: PUSH
25728: LD_INT 21
25730: PUSH
25731: LD_INT 2
25733: PUSH
25734: EMPTY
25735: LIST
25736: LIST
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: LIST
25742: PUSH
25743: EMPTY
25744: LIST
25745: LIST
25746: PPUSH
25747: CALL_OW 69
25751: ST_TO_ADDR
// if not tmp then
25752: LD_VAR 0 2
25756: NOT
25757: IFFALSE 25761
// exit ;
25759: GO 25844
// p := 0 ;
25761: LD_ADDR_VAR 0 3
25765: PUSH
25766: LD_INT 0
25768: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25769: LD_INT 35
25771: PPUSH
25772: CALL_OW 67
// p := p + 1 ;
25776: LD_ADDR_VAR 0 3
25780: PUSH
25781: LD_VAR 0 3
25785: PUSH
25786: LD_INT 1
25788: PLUS
25789: ST_TO_ADDR
// for i in tmp do
25790: LD_ADDR_VAR 0 1
25794: PUSH
25795: LD_VAR 0 2
25799: PUSH
25800: FOR_IN
25801: IFFALSE 25832
// if GetLives ( i ) < 1000 then
25803: LD_VAR 0 1
25807: PPUSH
25808: CALL_OW 256
25812: PUSH
25813: LD_INT 1000
25815: LESS
25816: IFFALSE 25830
// SetLives ( i , 1000 ) ;
25818: LD_VAR 0 1
25822: PPUSH
25823: LD_INT 1000
25825: PPUSH
25826: CALL_OW 234
25830: GO 25800
25832: POP
25833: POP
// until p > 20 ;
25834: LD_VAR 0 3
25838: PUSH
25839: LD_INT 20
25841: GREATER
25842: IFFALSE 25769
// end ;
25844: PPOPN 3
25846: END
// every 0 0$1 trigger StreamModeActive and sTime do
25847: LD_EXP 56
25851: PUSH
25852: LD_EXP 107
25856: AND
25857: IFFALSE 25892
25859: GO 25861
25861: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
25862: LD_INT 28
25864: PPUSH
25865: LD_OWVAR 2
25869: PPUSH
25870: LD_INT 2
25872: PPUSH
25873: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
25877: LD_INT 30
25879: PPUSH
25880: LD_OWVAR 2
25884: PPUSH
25885: LD_INT 2
25887: PPUSH
25888: CALL_OW 322
// end ;
25892: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
25893: LD_EXP 56
25897: PUSH
25898: LD_EXP 108
25902: AND
25903: IFFALSE 26024
25905: GO 25907
25907: DISABLE
25908: LD_INT 0
25910: PPUSH
25911: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25912: LD_ADDR_VAR 0 2
25916: PUSH
25917: LD_INT 22
25919: PUSH
25920: LD_OWVAR 2
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: PUSH
25929: LD_INT 21
25931: PUSH
25932: LD_INT 1
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: PUSH
25939: LD_INT 3
25941: PUSH
25942: LD_INT 23
25944: PUSH
25945: LD_INT 0
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: PUSH
25956: EMPTY
25957: LIST
25958: LIST
25959: LIST
25960: PPUSH
25961: CALL_OW 69
25965: ST_TO_ADDR
// if not tmp then
25966: LD_VAR 0 2
25970: NOT
25971: IFFALSE 25975
// exit ;
25973: GO 26024
// for i in tmp do
25975: LD_ADDR_VAR 0 1
25979: PUSH
25980: LD_VAR 0 2
25984: PUSH
25985: FOR_IN
25986: IFFALSE 26022
// begin if Crawls ( i ) then
25988: LD_VAR 0 1
25992: PPUSH
25993: CALL_OW 318
25997: IFFALSE 26008
// ComWalk ( i ) ;
25999: LD_VAR 0 1
26003: PPUSH
26004: CALL_OW 138
// SetClass ( i , 2 ) ;
26008: LD_VAR 0 1
26012: PPUSH
26013: LD_INT 2
26015: PPUSH
26016: CALL_OW 336
// end ;
26020: GO 25985
26022: POP
26023: POP
// end ;
26024: PPOPN 2
26026: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
26027: LD_EXP 56
26031: PUSH
26032: LD_EXP 109
26036: AND
26037: IFFALSE 26318
26039: GO 26041
26041: DISABLE
26042: LD_INT 0
26044: PPUSH
26045: PPUSH
26046: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
26047: LD_OWVAR 2
26051: PPUSH
26052: LD_INT 9
26054: PPUSH
26055: LD_INT 1
26057: PPUSH
26058: LD_INT 1
26060: PPUSH
26061: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
26065: LD_INT 9
26067: PPUSH
26068: LD_OWVAR 2
26072: PPUSH
26073: CALL_OW 343
// uc_side := 9 ;
26077: LD_ADDR_OWVAR 20
26081: PUSH
26082: LD_INT 9
26084: ST_TO_ADDR
// uc_nation := 2 ;
26085: LD_ADDR_OWVAR 21
26089: PUSH
26090: LD_INT 2
26092: ST_TO_ADDR
// hc_name := Dark Warrior ;
26093: LD_ADDR_OWVAR 26
26097: PUSH
26098: LD_STRING Dark Warrior
26100: ST_TO_ADDR
// hc_gallery :=  ;
26101: LD_ADDR_OWVAR 33
26105: PUSH
26106: LD_STRING 
26108: ST_TO_ADDR
// hc_noskilllimit := true ;
26109: LD_ADDR_OWVAR 76
26113: PUSH
26114: LD_INT 1
26116: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
26117: LD_ADDR_OWVAR 31
26121: PUSH
26122: LD_INT 30
26124: PUSH
26125: LD_INT 30
26127: PUSH
26128: LD_INT 30
26130: PUSH
26131: LD_INT 30
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: LIST
26138: LIST
26139: ST_TO_ADDR
// un := CreateHuman ;
26140: LD_ADDR_VAR 0 3
26144: PUSH
26145: CALL_OW 44
26149: ST_TO_ADDR
// hc_noskilllimit := false ;
26150: LD_ADDR_OWVAR 76
26154: PUSH
26155: LD_INT 0
26157: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26158: LD_VAR 0 3
26162: PPUSH
26163: LD_INT 1
26165: PPUSH
26166: CALL_OW 51
// p := 0 ;
26170: LD_ADDR_VAR 0 2
26174: PUSH
26175: LD_INT 0
26177: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26178: LD_INT 35
26180: PPUSH
26181: CALL_OW 67
// p := p + 1 ;
26185: LD_ADDR_VAR 0 2
26189: PUSH
26190: LD_VAR 0 2
26194: PUSH
26195: LD_INT 1
26197: PLUS
26198: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
26199: LD_VAR 0 3
26203: PPUSH
26204: CALL_OW 256
26208: PUSH
26209: LD_INT 1000
26211: LESS
26212: IFFALSE 26226
// SetLives ( un , 1000 ) ;
26214: LD_VAR 0 3
26218: PPUSH
26219: LD_INT 1000
26221: PPUSH
26222: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
26226: LD_VAR 0 3
26230: PPUSH
26231: LD_INT 81
26233: PUSH
26234: LD_OWVAR 2
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: PUSH
26243: LD_INT 91
26245: PUSH
26246: LD_VAR 0 3
26250: PUSH
26251: LD_INT 30
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: LIST
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: PPUSH
26263: CALL_OW 69
26267: PPUSH
26268: LD_VAR 0 3
26272: PPUSH
26273: CALL_OW 74
26277: PPUSH
26278: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
26282: LD_VAR 0 2
26286: PUSH
26287: LD_INT 60
26289: GREATER
26290: PUSH
26291: LD_VAR 0 3
26295: PPUSH
26296: CALL_OW 301
26300: OR
26301: IFFALSE 26178
// if un then
26303: LD_VAR 0 3
26307: IFFALSE 26318
// RemoveUnit ( un ) ;
26309: LD_VAR 0 3
26313: PPUSH
26314: CALL_OW 64
// end ;
26318: PPOPN 3
26320: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
26321: LD_INT 0
26323: PPUSH
// case cmd of 301 :
26324: LD_VAR 0 1
26328: PUSH
26329: LD_INT 301
26331: DOUBLE
26332: EQUAL
26333: IFTRUE 26337
26335: GO 26369
26337: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
26338: LD_VAR 0 6
26342: PPUSH
26343: LD_VAR 0 7
26347: PPUSH
26348: LD_VAR 0 8
26352: PPUSH
26353: LD_VAR 0 4
26357: PPUSH
26358: LD_VAR 0 5
26362: PPUSH
26363: CALL 27570 0 5
26367: GO 26490
26369: LD_INT 302
26371: DOUBLE
26372: EQUAL
26373: IFTRUE 26377
26375: GO 26414
26377: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
26378: LD_VAR 0 6
26382: PPUSH
26383: LD_VAR 0 7
26387: PPUSH
26388: LD_VAR 0 8
26392: PPUSH
26393: LD_VAR 0 9
26397: PPUSH
26398: LD_VAR 0 4
26402: PPUSH
26403: LD_VAR 0 5
26407: PPUSH
26408: CALL 27661 0 6
26412: GO 26490
26414: LD_INT 303
26416: DOUBLE
26417: EQUAL
26418: IFTRUE 26422
26420: GO 26459
26422: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
26423: LD_VAR 0 6
26427: PPUSH
26428: LD_VAR 0 7
26432: PPUSH
26433: LD_VAR 0 8
26437: PPUSH
26438: LD_VAR 0 9
26442: PPUSH
26443: LD_VAR 0 4
26447: PPUSH
26448: LD_VAR 0 5
26452: PPUSH
26453: CALL 26495 0 6
26457: GO 26490
26459: LD_INT 304
26461: DOUBLE
26462: EQUAL
26463: IFTRUE 26467
26465: GO 26489
26467: POP
// hHackTeleport ( unit , x , y ) ; end ;
26468: LD_VAR 0 2
26472: PPUSH
26473: LD_VAR 0 4
26477: PPUSH
26478: LD_VAR 0 5
26482: PPUSH
26483: CALL 28254 0 3
26487: GO 26490
26489: POP
// end ;
26490: LD_VAR 0 12
26494: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
26495: LD_INT 0
26497: PPUSH
26498: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
26499: LD_VAR 0 1
26503: PUSH
26504: LD_INT 1
26506: LESS
26507: PUSH
26508: LD_VAR 0 1
26512: PUSH
26513: LD_INT 3
26515: GREATER
26516: OR
26517: PUSH
26518: LD_VAR 0 5
26522: PPUSH
26523: LD_VAR 0 6
26527: PPUSH
26528: CALL_OW 428
26532: OR
26533: IFFALSE 26537
// exit ;
26535: GO 27257
// uc_side := your_side ;
26537: LD_ADDR_OWVAR 20
26541: PUSH
26542: LD_OWVAR 2
26546: ST_TO_ADDR
// uc_nation := nation ;
26547: LD_ADDR_OWVAR 21
26551: PUSH
26552: LD_VAR 0 1
26556: ST_TO_ADDR
// bc_level = 1 ;
26557: LD_ADDR_OWVAR 43
26561: PUSH
26562: LD_INT 1
26564: ST_TO_ADDR
// case btype of 1 :
26565: LD_VAR 0 2
26569: PUSH
26570: LD_INT 1
26572: DOUBLE
26573: EQUAL
26574: IFTRUE 26578
26576: GO 26589
26578: POP
// bc_type := b_depot ; 2 :
26579: LD_ADDR_OWVAR 42
26583: PUSH
26584: LD_INT 0
26586: ST_TO_ADDR
26587: GO 27201
26589: LD_INT 2
26591: DOUBLE
26592: EQUAL
26593: IFTRUE 26597
26595: GO 26608
26597: POP
// bc_type := b_warehouse ; 3 :
26598: LD_ADDR_OWVAR 42
26602: PUSH
26603: LD_INT 1
26605: ST_TO_ADDR
26606: GO 27201
26608: LD_INT 3
26610: DOUBLE
26611: EQUAL
26612: IFTRUE 26616
26614: GO 26627
26616: POP
// bc_type := b_lab ; 4 .. 9 :
26617: LD_ADDR_OWVAR 42
26621: PUSH
26622: LD_INT 6
26624: ST_TO_ADDR
26625: GO 27201
26627: LD_INT 4
26629: DOUBLE
26630: GREATEREQUAL
26631: IFFALSE 26639
26633: LD_INT 9
26635: DOUBLE
26636: LESSEQUAL
26637: IFTRUE 26641
26639: GO 26693
26641: POP
// begin bc_type := b_lab_half ;
26642: LD_ADDR_OWVAR 42
26646: PUSH
26647: LD_INT 7
26649: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
26650: LD_ADDR_OWVAR 44
26654: PUSH
26655: LD_INT 10
26657: PUSH
26658: LD_INT 11
26660: PUSH
26661: LD_INT 12
26663: PUSH
26664: LD_INT 15
26666: PUSH
26667: LD_INT 14
26669: PUSH
26670: LD_INT 13
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: LIST
26677: LIST
26678: LIST
26679: LIST
26680: PUSH
26681: LD_VAR 0 2
26685: PUSH
26686: LD_INT 3
26688: MINUS
26689: ARRAY
26690: ST_TO_ADDR
// end ; 10 .. 13 :
26691: GO 27201
26693: LD_INT 10
26695: DOUBLE
26696: GREATEREQUAL
26697: IFFALSE 26705
26699: LD_INT 13
26701: DOUBLE
26702: LESSEQUAL
26703: IFTRUE 26707
26705: GO 26784
26707: POP
// begin bc_type := b_lab_full ;
26708: LD_ADDR_OWVAR 42
26712: PUSH
26713: LD_INT 8
26715: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
26716: LD_ADDR_OWVAR 44
26720: PUSH
26721: LD_INT 10
26723: PUSH
26724: LD_INT 12
26726: PUSH
26727: LD_INT 14
26729: PUSH
26730: LD_INT 13
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: LIST
26737: LIST
26738: PUSH
26739: LD_VAR 0 2
26743: PUSH
26744: LD_INT 9
26746: MINUS
26747: ARRAY
26748: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
26749: LD_ADDR_OWVAR 45
26753: PUSH
26754: LD_INT 11
26756: PUSH
26757: LD_INT 15
26759: PUSH
26760: LD_INT 12
26762: PUSH
26763: LD_INT 15
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: PUSH
26772: LD_VAR 0 2
26776: PUSH
26777: LD_INT 9
26779: MINUS
26780: ARRAY
26781: ST_TO_ADDR
// end ; 14 :
26782: GO 27201
26784: LD_INT 14
26786: DOUBLE
26787: EQUAL
26788: IFTRUE 26792
26790: GO 26803
26792: POP
// bc_type := b_workshop ; 15 :
26793: LD_ADDR_OWVAR 42
26797: PUSH
26798: LD_INT 2
26800: ST_TO_ADDR
26801: GO 27201
26803: LD_INT 15
26805: DOUBLE
26806: EQUAL
26807: IFTRUE 26811
26809: GO 26822
26811: POP
// bc_type := b_factory ; 16 :
26812: LD_ADDR_OWVAR 42
26816: PUSH
26817: LD_INT 3
26819: ST_TO_ADDR
26820: GO 27201
26822: LD_INT 16
26824: DOUBLE
26825: EQUAL
26826: IFTRUE 26830
26828: GO 26841
26830: POP
// bc_type := b_ext_gun ; 17 :
26831: LD_ADDR_OWVAR 42
26835: PUSH
26836: LD_INT 17
26838: ST_TO_ADDR
26839: GO 27201
26841: LD_INT 17
26843: DOUBLE
26844: EQUAL
26845: IFTRUE 26849
26847: GO 26877
26849: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
26850: LD_ADDR_OWVAR 42
26854: PUSH
26855: LD_INT 19
26857: PUSH
26858: LD_INT 23
26860: PUSH
26861: LD_INT 19
26863: PUSH
26864: EMPTY
26865: LIST
26866: LIST
26867: LIST
26868: PUSH
26869: LD_VAR 0 1
26873: ARRAY
26874: ST_TO_ADDR
26875: GO 27201
26877: LD_INT 18
26879: DOUBLE
26880: EQUAL
26881: IFTRUE 26885
26883: GO 26896
26885: POP
// bc_type := b_ext_radar ; 19 :
26886: LD_ADDR_OWVAR 42
26890: PUSH
26891: LD_INT 20
26893: ST_TO_ADDR
26894: GO 27201
26896: LD_INT 19
26898: DOUBLE
26899: EQUAL
26900: IFTRUE 26904
26902: GO 26915
26904: POP
// bc_type := b_ext_radio ; 20 :
26905: LD_ADDR_OWVAR 42
26909: PUSH
26910: LD_INT 22
26912: ST_TO_ADDR
26913: GO 27201
26915: LD_INT 20
26917: DOUBLE
26918: EQUAL
26919: IFTRUE 26923
26921: GO 26934
26923: POP
// bc_type := b_ext_siberium ; 21 :
26924: LD_ADDR_OWVAR 42
26928: PUSH
26929: LD_INT 21
26931: ST_TO_ADDR
26932: GO 27201
26934: LD_INT 21
26936: DOUBLE
26937: EQUAL
26938: IFTRUE 26942
26940: GO 26953
26942: POP
// bc_type := b_ext_computer ; 22 :
26943: LD_ADDR_OWVAR 42
26947: PUSH
26948: LD_INT 24
26950: ST_TO_ADDR
26951: GO 27201
26953: LD_INT 22
26955: DOUBLE
26956: EQUAL
26957: IFTRUE 26961
26959: GO 26972
26961: POP
// bc_type := b_ext_track ; 23 :
26962: LD_ADDR_OWVAR 42
26966: PUSH
26967: LD_INT 16
26969: ST_TO_ADDR
26970: GO 27201
26972: LD_INT 23
26974: DOUBLE
26975: EQUAL
26976: IFTRUE 26980
26978: GO 26991
26980: POP
// bc_type := b_ext_laser ; 24 :
26981: LD_ADDR_OWVAR 42
26985: PUSH
26986: LD_INT 25
26988: ST_TO_ADDR
26989: GO 27201
26991: LD_INT 24
26993: DOUBLE
26994: EQUAL
26995: IFTRUE 26999
26997: GO 27010
26999: POP
// bc_type := b_control_tower ; 25 :
27000: LD_ADDR_OWVAR 42
27004: PUSH
27005: LD_INT 36
27007: ST_TO_ADDR
27008: GO 27201
27010: LD_INT 25
27012: DOUBLE
27013: EQUAL
27014: IFTRUE 27018
27016: GO 27029
27018: POP
// bc_type := b_breastwork ; 26 :
27019: LD_ADDR_OWVAR 42
27023: PUSH
27024: LD_INT 31
27026: ST_TO_ADDR
27027: GO 27201
27029: LD_INT 26
27031: DOUBLE
27032: EQUAL
27033: IFTRUE 27037
27035: GO 27048
27037: POP
// bc_type := b_bunker ; 27 :
27038: LD_ADDR_OWVAR 42
27042: PUSH
27043: LD_INT 32
27045: ST_TO_ADDR
27046: GO 27201
27048: LD_INT 27
27050: DOUBLE
27051: EQUAL
27052: IFTRUE 27056
27054: GO 27067
27056: POP
// bc_type := b_turret ; 28 :
27057: LD_ADDR_OWVAR 42
27061: PUSH
27062: LD_INT 33
27064: ST_TO_ADDR
27065: GO 27201
27067: LD_INT 28
27069: DOUBLE
27070: EQUAL
27071: IFTRUE 27075
27073: GO 27086
27075: POP
// bc_type := b_armoury ; 29 :
27076: LD_ADDR_OWVAR 42
27080: PUSH
27081: LD_INT 4
27083: ST_TO_ADDR
27084: GO 27201
27086: LD_INT 29
27088: DOUBLE
27089: EQUAL
27090: IFTRUE 27094
27092: GO 27105
27094: POP
// bc_type := b_barracks ; 30 :
27095: LD_ADDR_OWVAR 42
27099: PUSH
27100: LD_INT 5
27102: ST_TO_ADDR
27103: GO 27201
27105: LD_INT 30
27107: DOUBLE
27108: EQUAL
27109: IFTRUE 27113
27111: GO 27124
27113: POP
// bc_type := b_solar_power ; 31 :
27114: LD_ADDR_OWVAR 42
27118: PUSH
27119: LD_INT 27
27121: ST_TO_ADDR
27122: GO 27201
27124: LD_INT 31
27126: DOUBLE
27127: EQUAL
27128: IFTRUE 27132
27130: GO 27143
27132: POP
// bc_type := b_oil_power ; 32 :
27133: LD_ADDR_OWVAR 42
27137: PUSH
27138: LD_INT 26
27140: ST_TO_ADDR
27141: GO 27201
27143: LD_INT 32
27145: DOUBLE
27146: EQUAL
27147: IFTRUE 27151
27149: GO 27162
27151: POP
// bc_type := b_siberite_power ; 33 :
27152: LD_ADDR_OWVAR 42
27156: PUSH
27157: LD_INT 28
27159: ST_TO_ADDR
27160: GO 27201
27162: LD_INT 33
27164: DOUBLE
27165: EQUAL
27166: IFTRUE 27170
27168: GO 27181
27170: POP
// bc_type := b_oil_mine ; 34 :
27171: LD_ADDR_OWVAR 42
27175: PUSH
27176: LD_INT 29
27178: ST_TO_ADDR
27179: GO 27201
27181: LD_INT 34
27183: DOUBLE
27184: EQUAL
27185: IFTRUE 27189
27187: GO 27200
27189: POP
// bc_type := b_siberite_mine ; end ;
27190: LD_ADDR_OWVAR 42
27194: PUSH
27195: LD_INT 30
27197: ST_TO_ADDR
27198: GO 27201
27200: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
27201: LD_ADDR_VAR 0 8
27205: PUSH
27206: LD_VAR 0 5
27210: PPUSH
27211: LD_VAR 0 6
27215: PPUSH
27216: LD_VAR 0 3
27220: PPUSH
27221: CALL_OW 47
27225: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
27226: LD_OWVAR 42
27230: PUSH
27231: LD_INT 32
27233: PUSH
27234: LD_INT 33
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: IN
27241: IFFALSE 27257
// PlaceWeaponTurret ( b , weapon ) ;
27243: LD_VAR 0 8
27247: PPUSH
27248: LD_VAR 0 4
27252: PPUSH
27253: CALL_OW 431
// end ;
27257: LD_VAR 0 7
27261: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
27262: LD_INT 0
27264: PPUSH
27265: PPUSH
27266: PPUSH
27267: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27268: LD_ADDR_VAR 0 4
27272: PUSH
27273: LD_INT 22
27275: PUSH
27276: LD_OWVAR 2
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: PUSH
27285: LD_INT 2
27287: PUSH
27288: LD_INT 30
27290: PUSH
27291: LD_INT 0
27293: PUSH
27294: EMPTY
27295: LIST
27296: LIST
27297: PUSH
27298: LD_INT 30
27300: PUSH
27301: LD_INT 1
27303: PUSH
27304: EMPTY
27305: LIST
27306: LIST
27307: PUSH
27308: EMPTY
27309: LIST
27310: LIST
27311: LIST
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: PPUSH
27317: CALL_OW 69
27321: ST_TO_ADDR
// if not tmp then
27322: LD_VAR 0 4
27326: NOT
27327: IFFALSE 27331
// exit ;
27329: GO 27390
// for i in tmp do
27331: LD_ADDR_VAR 0 2
27335: PUSH
27336: LD_VAR 0 4
27340: PUSH
27341: FOR_IN
27342: IFFALSE 27388
// for j = 1 to 3 do
27344: LD_ADDR_VAR 0 3
27348: PUSH
27349: DOUBLE
27350: LD_INT 1
27352: DEC
27353: ST_TO_ADDR
27354: LD_INT 3
27356: PUSH
27357: FOR_TO
27358: IFFALSE 27384
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
27360: LD_VAR 0 2
27364: PPUSH
27365: CALL_OW 274
27369: PPUSH
27370: LD_VAR 0 3
27374: PPUSH
27375: LD_INT 99999
27377: PPUSH
27378: CALL_OW 277
27382: GO 27357
27384: POP
27385: POP
27386: GO 27341
27388: POP
27389: POP
// end ;
27390: LD_VAR 0 1
27394: RET
// export function hHackSetLevel10 ; var i , j ; begin
27395: LD_INT 0
27397: PPUSH
27398: PPUSH
27399: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27400: LD_ADDR_VAR 0 2
27404: PUSH
27405: LD_INT 21
27407: PUSH
27408: LD_INT 1
27410: PUSH
27411: EMPTY
27412: LIST
27413: LIST
27414: PPUSH
27415: CALL_OW 69
27419: PUSH
27420: FOR_IN
27421: IFFALSE 27473
// if IsSelected ( i ) then
27423: LD_VAR 0 2
27427: PPUSH
27428: CALL_OW 306
27432: IFFALSE 27471
// begin for j := 1 to 4 do
27434: LD_ADDR_VAR 0 3
27438: PUSH
27439: DOUBLE
27440: LD_INT 1
27442: DEC
27443: ST_TO_ADDR
27444: LD_INT 4
27446: PUSH
27447: FOR_TO
27448: IFFALSE 27469
// SetSkill ( i , j , 10 ) ;
27450: LD_VAR 0 2
27454: PPUSH
27455: LD_VAR 0 3
27459: PPUSH
27460: LD_INT 10
27462: PPUSH
27463: CALL_OW 237
27467: GO 27447
27469: POP
27470: POP
// end ;
27471: GO 27420
27473: POP
27474: POP
// end ;
27475: LD_VAR 0 1
27479: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
27480: LD_INT 0
27482: PPUSH
27483: PPUSH
27484: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
27485: LD_ADDR_VAR 0 2
27489: PUSH
27490: LD_INT 22
27492: PUSH
27493: LD_OWVAR 2
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: PUSH
27502: LD_INT 21
27504: PUSH
27505: LD_INT 1
27507: PUSH
27508: EMPTY
27509: LIST
27510: LIST
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: PPUSH
27516: CALL_OW 69
27520: PUSH
27521: FOR_IN
27522: IFFALSE 27563
// begin for j := 1 to 4 do
27524: LD_ADDR_VAR 0 3
27528: PUSH
27529: DOUBLE
27530: LD_INT 1
27532: DEC
27533: ST_TO_ADDR
27534: LD_INT 4
27536: PUSH
27537: FOR_TO
27538: IFFALSE 27559
// SetSkill ( i , j , 10 ) ;
27540: LD_VAR 0 2
27544: PPUSH
27545: LD_VAR 0 3
27549: PPUSH
27550: LD_INT 10
27552: PPUSH
27553: CALL_OW 237
27557: GO 27537
27559: POP
27560: POP
// end ;
27561: GO 27521
27563: POP
27564: POP
// end ;
27565: LD_VAR 0 1
27569: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
27570: LD_INT 0
27572: PPUSH
// uc_side := your_side ;
27573: LD_ADDR_OWVAR 20
27577: PUSH
27578: LD_OWVAR 2
27582: ST_TO_ADDR
// uc_nation := nation ;
27583: LD_ADDR_OWVAR 21
27587: PUSH
27588: LD_VAR 0 1
27592: ST_TO_ADDR
// InitHc ;
27593: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
27597: LD_INT 0
27599: PPUSH
27600: LD_VAR 0 2
27604: PPUSH
27605: LD_VAR 0 3
27609: PPUSH
27610: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
27614: LD_VAR 0 4
27618: PPUSH
27619: LD_VAR 0 5
27623: PPUSH
27624: CALL_OW 428
27628: PUSH
27629: LD_INT 0
27631: EQUAL
27632: IFFALSE 27656
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
27634: CALL_OW 44
27638: PPUSH
27639: LD_VAR 0 4
27643: PPUSH
27644: LD_VAR 0 5
27648: PPUSH
27649: LD_INT 1
27651: PPUSH
27652: CALL_OW 48
// end ;
27656: LD_VAR 0 6
27660: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
27661: LD_INT 0
27663: PPUSH
27664: PPUSH
// uc_side := your_side ;
27665: LD_ADDR_OWVAR 20
27669: PUSH
27670: LD_OWVAR 2
27674: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
27675: LD_VAR 0 1
27679: PUSH
27680: LD_INT 1
27682: PUSH
27683: LD_INT 2
27685: PUSH
27686: LD_INT 3
27688: PUSH
27689: LD_INT 4
27691: PUSH
27692: LD_INT 5
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: IN
27702: IFFALSE 27714
// uc_nation := nation_american else
27704: LD_ADDR_OWVAR 21
27708: PUSH
27709: LD_INT 1
27711: ST_TO_ADDR
27712: GO 27757
// if chassis in [ 11 , 12 , 13 , 14 ] then
27714: LD_VAR 0 1
27718: PUSH
27719: LD_INT 11
27721: PUSH
27722: LD_INT 12
27724: PUSH
27725: LD_INT 13
27727: PUSH
27728: LD_INT 14
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: LIST
27735: LIST
27736: IN
27737: IFFALSE 27749
// uc_nation := nation_arabian else
27739: LD_ADDR_OWVAR 21
27743: PUSH
27744: LD_INT 2
27746: ST_TO_ADDR
27747: GO 27757
// uc_nation := nation_russian ;
27749: LD_ADDR_OWVAR 21
27753: PUSH
27754: LD_INT 3
27756: ST_TO_ADDR
// vc_chassis := chassis ;
27757: LD_ADDR_OWVAR 37
27761: PUSH
27762: LD_VAR 0 1
27766: ST_TO_ADDR
// vc_engine := engine ;
27767: LD_ADDR_OWVAR 39
27771: PUSH
27772: LD_VAR 0 2
27776: ST_TO_ADDR
// vc_control := control ;
27777: LD_ADDR_OWVAR 38
27781: PUSH
27782: LD_VAR 0 3
27786: ST_TO_ADDR
// vc_weapon := weapon ;
27787: LD_ADDR_OWVAR 40
27791: PUSH
27792: LD_VAR 0 4
27796: ST_TO_ADDR
// un := CreateVehicle ;
27797: LD_ADDR_VAR 0 8
27801: PUSH
27802: CALL_OW 45
27806: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
27807: LD_VAR 0 8
27811: PPUSH
27812: LD_INT 0
27814: PPUSH
27815: LD_INT 5
27817: PPUSH
27818: CALL_OW 12
27822: PPUSH
27823: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
27827: LD_VAR 0 8
27831: PPUSH
27832: LD_VAR 0 5
27836: PPUSH
27837: LD_VAR 0 6
27841: PPUSH
27842: LD_INT 1
27844: PPUSH
27845: CALL_OW 48
// end ;
27849: LD_VAR 0 7
27853: RET
// export hInvincible ; every 1 do
27854: GO 27856
27856: DISABLE
// hInvincible := [ ] ;
27857: LD_ADDR_EXP 110
27861: PUSH
27862: EMPTY
27863: ST_TO_ADDR
27864: END
// every 10 do var i ;
27865: GO 27867
27867: DISABLE
27868: LD_INT 0
27870: PPUSH
// begin enable ;
27871: ENABLE
// if not hInvincible then
27872: LD_EXP 110
27876: NOT
27877: IFFALSE 27881
// exit ;
27879: GO 27925
// for i in hInvincible do
27881: LD_ADDR_VAR 0 1
27885: PUSH
27886: LD_EXP 110
27890: PUSH
27891: FOR_IN
27892: IFFALSE 27923
// if GetLives ( i ) < 1000 then
27894: LD_VAR 0 1
27898: PPUSH
27899: CALL_OW 256
27903: PUSH
27904: LD_INT 1000
27906: LESS
27907: IFFALSE 27921
// SetLives ( i , 1000 ) ;
27909: LD_VAR 0 1
27913: PPUSH
27914: LD_INT 1000
27916: PPUSH
27917: CALL_OW 234
27921: GO 27891
27923: POP
27924: POP
// end ;
27925: PPOPN 1
27927: END
// export function hHackInvincible ; var i ; begin
27928: LD_INT 0
27930: PPUSH
27931: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
27932: LD_ADDR_VAR 0 2
27936: PUSH
27937: LD_INT 2
27939: PUSH
27940: LD_INT 21
27942: PUSH
27943: LD_INT 1
27945: PUSH
27946: EMPTY
27947: LIST
27948: LIST
27949: PUSH
27950: LD_INT 21
27952: PUSH
27953: LD_INT 2
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: LIST
27964: PPUSH
27965: CALL_OW 69
27969: PUSH
27970: FOR_IN
27971: IFFALSE 28032
// if IsSelected ( i ) then
27973: LD_VAR 0 2
27977: PPUSH
27978: CALL_OW 306
27982: IFFALSE 28030
// begin if i in hInvincible then
27984: LD_VAR 0 2
27988: PUSH
27989: LD_EXP 110
27993: IN
27994: IFFALSE 28014
// hInvincible := hInvincible diff i else
27996: LD_ADDR_EXP 110
28000: PUSH
28001: LD_EXP 110
28005: PUSH
28006: LD_VAR 0 2
28010: DIFF
28011: ST_TO_ADDR
28012: GO 28030
// hInvincible := hInvincible union i ;
28014: LD_ADDR_EXP 110
28018: PUSH
28019: LD_EXP 110
28023: PUSH
28024: LD_VAR 0 2
28028: UNION
28029: ST_TO_ADDR
// end ;
28030: GO 27970
28032: POP
28033: POP
// end ;
28034: LD_VAR 0 1
28038: RET
// export function hHackInvisible ; var i , j ; begin
28039: LD_INT 0
28041: PPUSH
28042: PPUSH
28043: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28044: LD_ADDR_VAR 0 2
28048: PUSH
28049: LD_INT 21
28051: PUSH
28052: LD_INT 1
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: PPUSH
28059: CALL_OW 69
28063: PUSH
28064: FOR_IN
28065: IFFALSE 28089
// if IsSelected ( i ) then
28067: LD_VAR 0 2
28071: PPUSH
28072: CALL_OW 306
28076: IFFALSE 28087
// ComForceInvisible ( i ) ;
28078: LD_VAR 0 2
28082: PPUSH
28083: CALL_OW 496
28087: GO 28064
28089: POP
28090: POP
// end ;
28091: LD_VAR 0 1
28095: RET
// export function hHackChangeYourSide ; begin
28096: LD_INT 0
28098: PPUSH
// if your_side = 8 then
28099: LD_OWVAR 2
28103: PUSH
28104: LD_INT 8
28106: EQUAL
28107: IFFALSE 28119
// your_side := 0 else
28109: LD_ADDR_OWVAR 2
28113: PUSH
28114: LD_INT 0
28116: ST_TO_ADDR
28117: GO 28133
// your_side := your_side + 1 ;
28119: LD_ADDR_OWVAR 2
28123: PUSH
28124: LD_OWVAR 2
28128: PUSH
28129: LD_INT 1
28131: PLUS
28132: ST_TO_ADDR
// end ;
28133: LD_VAR 0 1
28137: RET
// export function hHackChangeUnitSide ; var i , j ; begin
28138: LD_INT 0
28140: PPUSH
28141: PPUSH
28142: PPUSH
// for i in all_units do
28143: LD_ADDR_VAR 0 2
28147: PUSH
28148: LD_OWVAR 3
28152: PUSH
28153: FOR_IN
28154: IFFALSE 28232
// if IsSelected ( i ) then
28156: LD_VAR 0 2
28160: PPUSH
28161: CALL_OW 306
28165: IFFALSE 28230
// begin j := GetSide ( i ) ;
28167: LD_ADDR_VAR 0 3
28171: PUSH
28172: LD_VAR 0 2
28176: PPUSH
28177: CALL_OW 255
28181: ST_TO_ADDR
// if j = 8 then
28182: LD_VAR 0 3
28186: PUSH
28187: LD_INT 8
28189: EQUAL
28190: IFFALSE 28202
// j := 0 else
28192: LD_ADDR_VAR 0 3
28196: PUSH
28197: LD_INT 0
28199: ST_TO_ADDR
28200: GO 28216
// j := j + 1 ;
28202: LD_ADDR_VAR 0 3
28206: PUSH
28207: LD_VAR 0 3
28211: PUSH
28212: LD_INT 1
28214: PLUS
28215: ST_TO_ADDR
// SetSide ( i , j ) ;
28216: LD_VAR 0 2
28220: PPUSH
28221: LD_VAR 0 3
28225: PPUSH
28226: CALL_OW 235
// end ;
28230: GO 28153
28232: POP
28233: POP
// end ;
28234: LD_VAR 0 1
28238: RET
// export function hHackFog ; begin
28239: LD_INT 0
28241: PPUSH
// FogOff ( true ) ;
28242: LD_INT 1
28244: PPUSH
28245: CALL_OW 344
// end ;
28249: LD_VAR 0 1
28253: RET
// export function hHackTeleport ( unit , x , y ) ; begin
28254: LD_INT 0
28256: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
28257: LD_VAR 0 1
28261: PPUSH
28262: LD_VAR 0 2
28266: PPUSH
28267: LD_VAR 0 3
28271: PPUSH
28272: LD_INT 1
28274: PPUSH
28275: LD_INT 1
28277: PPUSH
28278: CALL_OW 483
// CenterOnXY ( x , y ) ;
28282: LD_VAR 0 2
28286: PPUSH
28287: LD_VAR 0 3
28291: PPUSH
28292: CALL_OW 84
// end ; end_of_file
28296: LD_VAR 0 4
28300: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
28301: LD_INT 0
28303: PPUSH
28304: PPUSH
28305: PPUSH
28306: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
28307: LD_VAR 0 1
28311: PPUSH
28312: CALL_OW 264
28316: PUSH
28317: LD_EXP 42
28321: EQUAL
28322: IFFALSE 28394
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
28324: LD_INT 68
28326: PPUSH
28327: LD_VAR 0 1
28331: PPUSH
28332: CALL_OW 255
28336: PPUSH
28337: CALL_OW 321
28341: PUSH
28342: LD_INT 2
28344: EQUAL
28345: IFFALSE 28357
// eff := 70 else
28347: LD_ADDR_VAR 0 4
28351: PUSH
28352: LD_INT 70
28354: ST_TO_ADDR
28355: GO 28365
// eff := 30 ;
28357: LD_ADDR_VAR 0 4
28361: PUSH
28362: LD_INT 30
28364: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
28365: LD_VAR 0 1
28369: PPUSH
28370: CALL_OW 250
28374: PPUSH
28375: LD_VAR 0 1
28379: PPUSH
28380: CALL_OW 251
28384: PPUSH
28385: LD_VAR 0 4
28389: PPUSH
28390: CALL_OW 495
// end ; end ;
28394: LD_VAR 0 2
28398: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
28399: LD_INT 0
28401: PPUSH
// end ;
28402: LD_VAR 0 4
28406: RET
// export function SOS_Command ( cmd ) ; begin
28407: LD_INT 0
28409: PPUSH
// end ;
28410: LD_VAR 0 2
28414: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
28415: LD_INT 0
28417: PPUSH
// if cmd = 121 then
28418: LD_VAR 0 1
28422: PUSH
28423: LD_INT 121
28425: EQUAL
28426: IFFALSE 28428
// end ;
28428: LD_VAR 0 6
28432: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
28433: LD_INT 0
28435: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
28436: LD_VAR 0 1
28440: PUSH
28441: LD_INT 250
28443: EQUAL
28444: PUSH
28445: LD_VAR 0 2
28449: PPUSH
28450: CALL_OW 264
28454: PUSH
28455: LD_EXP 45
28459: EQUAL
28460: AND
28461: IFFALSE 28482
// MinerPlaceMine ( unit , x , y ) ;
28463: LD_VAR 0 2
28467: PPUSH
28468: LD_VAR 0 4
28472: PPUSH
28473: LD_VAR 0 5
28477: PPUSH
28478: CALL 30831 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
28482: LD_VAR 0 1
28486: PUSH
28487: LD_INT 251
28489: EQUAL
28490: PUSH
28491: LD_VAR 0 2
28495: PPUSH
28496: CALL_OW 264
28500: PUSH
28501: LD_EXP 45
28505: EQUAL
28506: AND
28507: IFFALSE 28528
// MinerDetonateMine ( unit , x , y ) ;
28509: LD_VAR 0 2
28513: PPUSH
28514: LD_VAR 0 4
28518: PPUSH
28519: LD_VAR 0 5
28523: PPUSH
28524: CALL 31108 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
28528: LD_VAR 0 1
28532: PUSH
28533: LD_INT 252
28535: EQUAL
28536: PUSH
28537: LD_VAR 0 2
28541: PPUSH
28542: CALL_OW 264
28546: PUSH
28547: LD_EXP 45
28551: EQUAL
28552: AND
28553: IFFALSE 28574
// MinerCreateMinefield ( unit , x , y ) ;
28555: LD_VAR 0 2
28559: PPUSH
28560: LD_VAR 0 4
28564: PPUSH
28565: LD_VAR 0 5
28569: PPUSH
28570: CALL 31525 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
28574: LD_VAR 0 1
28578: PUSH
28579: LD_INT 253
28581: EQUAL
28582: PUSH
28583: LD_VAR 0 2
28587: PPUSH
28588: CALL_OW 257
28592: PUSH
28593: LD_INT 5
28595: EQUAL
28596: AND
28597: IFFALSE 28618
// ComBinocular ( unit , x , y ) ;
28599: LD_VAR 0 2
28603: PPUSH
28604: LD_VAR 0 4
28608: PPUSH
28609: LD_VAR 0 5
28613: PPUSH
28614: CALL 31896 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
28618: LD_VAR 0 1
28622: PUSH
28623: LD_INT 254
28625: EQUAL
28626: PUSH
28627: LD_VAR 0 2
28631: PPUSH
28632: CALL_OW 264
28636: PUSH
28637: LD_EXP 40
28641: EQUAL
28642: AND
28643: PUSH
28644: LD_VAR 0 3
28648: PPUSH
28649: CALL_OW 263
28653: PUSH
28654: LD_INT 3
28656: EQUAL
28657: AND
28658: IFFALSE 28674
// HackDestroyVehicle ( unit , selectedUnit ) ;
28660: LD_VAR 0 2
28664: PPUSH
28665: LD_VAR 0 3
28669: PPUSH
28670: CALL 30191 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
28674: LD_VAR 0 1
28678: PUSH
28679: LD_INT 255
28681: EQUAL
28682: PUSH
28683: LD_VAR 0 2
28687: PPUSH
28688: CALL_OW 264
28692: PUSH
28693: LD_INT 14
28695: PUSH
28696: LD_INT 53
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: IN
28703: AND
28704: PUSH
28705: LD_VAR 0 4
28709: PPUSH
28710: LD_VAR 0 5
28714: PPUSH
28715: CALL_OW 488
28719: AND
28720: IFFALSE 28744
// CutTreeXYR ( unit , x , y , 12 ) ;
28722: LD_VAR 0 2
28726: PPUSH
28727: LD_VAR 0 4
28731: PPUSH
28732: LD_VAR 0 5
28736: PPUSH
28737: LD_INT 12
28739: PPUSH
28740: CALL 28757 0 4
// end ;
28744: LD_VAR 0 6
28748: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
28749: LD_INT 0
28751: PPUSH
// end ;
28752: LD_VAR 0 4
28756: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
28757: LD_INT 0
28759: PPUSH
28760: PPUSH
28761: PPUSH
28762: PPUSH
28763: PPUSH
28764: PPUSH
28765: PPUSH
28766: PPUSH
28767: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
28768: LD_VAR 0 1
28772: NOT
28773: PUSH
28774: LD_VAR 0 2
28778: PPUSH
28779: LD_VAR 0 3
28783: PPUSH
28784: CALL_OW 488
28788: NOT
28789: OR
28790: PUSH
28791: LD_VAR 0 4
28795: NOT
28796: OR
28797: IFFALSE 28801
// exit ;
28799: GO 29141
// list := [ ] ;
28801: LD_ADDR_VAR 0 13
28805: PUSH
28806: EMPTY
28807: ST_TO_ADDR
// if x - r < 0 then
28808: LD_VAR 0 2
28812: PUSH
28813: LD_VAR 0 4
28817: MINUS
28818: PUSH
28819: LD_INT 0
28821: LESS
28822: IFFALSE 28834
// min_x := 0 else
28824: LD_ADDR_VAR 0 7
28828: PUSH
28829: LD_INT 0
28831: ST_TO_ADDR
28832: GO 28850
// min_x := x - r ;
28834: LD_ADDR_VAR 0 7
28838: PUSH
28839: LD_VAR 0 2
28843: PUSH
28844: LD_VAR 0 4
28848: MINUS
28849: ST_TO_ADDR
// if y - r < 0 then
28850: LD_VAR 0 3
28854: PUSH
28855: LD_VAR 0 4
28859: MINUS
28860: PUSH
28861: LD_INT 0
28863: LESS
28864: IFFALSE 28876
// min_y := 0 else
28866: LD_ADDR_VAR 0 8
28870: PUSH
28871: LD_INT 0
28873: ST_TO_ADDR
28874: GO 28892
// min_y := y - r ;
28876: LD_ADDR_VAR 0 8
28880: PUSH
28881: LD_VAR 0 3
28885: PUSH
28886: LD_VAR 0 4
28890: MINUS
28891: ST_TO_ADDR
// max_x := x + r ;
28892: LD_ADDR_VAR 0 9
28896: PUSH
28897: LD_VAR 0 2
28901: PUSH
28902: LD_VAR 0 4
28906: PLUS
28907: ST_TO_ADDR
// max_y := y + r ;
28908: LD_ADDR_VAR 0 10
28912: PUSH
28913: LD_VAR 0 3
28917: PUSH
28918: LD_VAR 0 4
28922: PLUS
28923: ST_TO_ADDR
// for _x = min_x to max_x do
28924: LD_ADDR_VAR 0 11
28928: PUSH
28929: DOUBLE
28930: LD_VAR 0 7
28934: DEC
28935: ST_TO_ADDR
28936: LD_VAR 0 9
28940: PUSH
28941: FOR_TO
28942: IFFALSE 29059
// for _y = min_y to max_y do
28944: LD_ADDR_VAR 0 12
28948: PUSH
28949: DOUBLE
28950: LD_VAR 0 8
28954: DEC
28955: ST_TO_ADDR
28956: LD_VAR 0 10
28960: PUSH
28961: FOR_TO
28962: IFFALSE 29055
// begin if not ValidHex ( _x , _y ) then
28964: LD_VAR 0 11
28968: PPUSH
28969: LD_VAR 0 12
28973: PPUSH
28974: CALL_OW 488
28978: NOT
28979: IFFALSE 28983
// continue ;
28981: GO 28961
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28983: LD_VAR 0 11
28987: PPUSH
28988: LD_VAR 0 12
28992: PPUSH
28993: CALL_OW 351
28997: PUSH
28998: LD_VAR 0 11
29002: PPUSH
29003: LD_VAR 0 12
29007: PPUSH
29008: CALL_OW 554
29012: AND
29013: IFFALSE 29053
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29015: LD_ADDR_VAR 0 13
29019: PUSH
29020: LD_VAR 0 13
29024: PPUSH
29025: LD_VAR 0 13
29029: PUSH
29030: LD_INT 1
29032: PLUS
29033: PPUSH
29034: LD_VAR 0 11
29038: PUSH
29039: LD_VAR 0 12
29043: PUSH
29044: EMPTY
29045: LIST
29046: LIST
29047: PPUSH
29048: CALL_OW 2
29052: ST_TO_ADDR
// end ;
29053: GO 28961
29055: POP
29056: POP
29057: GO 28941
29059: POP
29060: POP
// if not list then
29061: LD_VAR 0 13
29065: NOT
29066: IFFALSE 29070
// exit ;
29068: GO 29141
// for i in list do
29070: LD_ADDR_VAR 0 6
29074: PUSH
29075: LD_VAR 0 13
29079: PUSH
29080: FOR_IN
29081: IFFALSE 29139
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
29083: LD_VAR 0 1
29087: PPUSH
29088: LD_STRING M
29090: PUSH
29091: LD_VAR 0 6
29095: PUSH
29096: LD_INT 1
29098: ARRAY
29099: PUSH
29100: LD_VAR 0 6
29104: PUSH
29105: LD_INT 2
29107: ARRAY
29108: PUSH
29109: LD_INT 0
29111: PUSH
29112: LD_INT 0
29114: PUSH
29115: LD_INT 0
29117: PUSH
29118: LD_INT 0
29120: PUSH
29121: EMPTY
29122: LIST
29123: LIST
29124: LIST
29125: LIST
29126: LIST
29127: LIST
29128: LIST
29129: PUSH
29130: EMPTY
29131: LIST
29132: PPUSH
29133: CALL_OW 447
29137: GO 29080
29139: POP
29140: POP
// end ;
29141: LD_VAR 0 5
29145: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
29146: LD_EXP 113
29150: NOT
29151: IFFALSE 29201
29153: GO 29155
29155: DISABLE
// begin initHack := true ;
29156: LD_ADDR_EXP 113
29160: PUSH
29161: LD_INT 1
29163: ST_TO_ADDR
// hackTanks := [ ] ;
29164: LD_ADDR_EXP 114
29168: PUSH
29169: EMPTY
29170: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
29171: LD_ADDR_EXP 115
29175: PUSH
29176: EMPTY
29177: ST_TO_ADDR
// hackLimit := 3 ;
29178: LD_ADDR_EXP 116
29182: PUSH
29183: LD_INT 3
29185: ST_TO_ADDR
// hackDist := 12 ;
29186: LD_ADDR_EXP 117
29190: PUSH
29191: LD_INT 12
29193: ST_TO_ADDR
// hackCounter := [ ] ;
29194: LD_ADDR_EXP 118
29198: PUSH
29199: EMPTY
29200: ST_TO_ADDR
// end ;
29201: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29202: LD_EXP 113
29206: PUSH
29207: LD_INT 34
29209: PUSH
29210: LD_EXP 40
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: PPUSH
29219: CALL_OW 69
29223: AND
29224: IFFALSE 29479
29226: GO 29228
29228: DISABLE
29229: LD_INT 0
29231: PPUSH
29232: PPUSH
// begin enable ;
29233: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29234: LD_ADDR_VAR 0 1
29238: PUSH
29239: LD_INT 34
29241: PUSH
29242: LD_EXP 40
29246: PUSH
29247: EMPTY
29248: LIST
29249: LIST
29250: PPUSH
29251: CALL_OW 69
29255: PUSH
29256: FOR_IN
29257: IFFALSE 29477
// begin if not i in hackTanks then
29259: LD_VAR 0 1
29263: PUSH
29264: LD_EXP 114
29268: IN
29269: NOT
29270: IFFALSE 29353
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29272: LD_ADDR_EXP 114
29276: PUSH
29277: LD_EXP 114
29281: PPUSH
29282: LD_EXP 114
29286: PUSH
29287: LD_INT 1
29289: PLUS
29290: PPUSH
29291: LD_VAR 0 1
29295: PPUSH
29296: CALL_OW 1
29300: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
29301: LD_ADDR_EXP 115
29305: PUSH
29306: LD_EXP 115
29310: PPUSH
29311: LD_EXP 115
29315: PUSH
29316: LD_INT 1
29318: PLUS
29319: PPUSH
29320: EMPTY
29321: PPUSH
29322: CALL_OW 1
29326: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
29327: LD_ADDR_EXP 118
29331: PUSH
29332: LD_EXP 118
29336: PPUSH
29337: LD_EXP 118
29341: PUSH
29342: LD_INT 1
29344: PLUS
29345: PPUSH
29346: EMPTY
29347: PPUSH
29348: CALL_OW 1
29352: ST_TO_ADDR
// end ; if not IsOk ( i ) then
29353: LD_VAR 0 1
29357: PPUSH
29358: CALL_OW 302
29362: NOT
29363: IFFALSE 29376
// begin HackUnlinkAll ( i ) ;
29365: LD_VAR 0 1
29369: PPUSH
29370: CALL 29482 0 1
// continue ;
29374: GO 29256
// end ; HackCheckCapturedStatus ( i ) ;
29376: LD_VAR 0 1
29380: PPUSH
29381: CALL 29925 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
29385: LD_ADDR_VAR 0 2
29389: PUSH
29390: LD_INT 81
29392: PUSH
29393: LD_VAR 0 1
29397: PPUSH
29398: CALL_OW 255
29402: PUSH
29403: EMPTY
29404: LIST
29405: LIST
29406: PUSH
29407: LD_INT 33
29409: PUSH
29410: LD_INT 3
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: PUSH
29417: LD_INT 91
29419: PUSH
29420: LD_VAR 0 1
29424: PUSH
29425: LD_EXP 117
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: LIST
29434: PUSH
29435: LD_INT 50
29437: PUSH
29438: EMPTY
29439: LIST
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: LIST
29445: LIST
29446: PPUSH
29447: CALL_OW 69
29451: ST_TO_ADDR
// if not tmp then
29452: LD_VAR 0 2
29456: NOT
29457: IFFALSE 29461
// continue ;
29459: GO 29256
// HackLink ( i , tmp ) ;
29461: LD_VAR 0 1
29465: PPUSH
29466: LD_VAR 0 2
29470: PPUSH
29471: CALL 29618 0 2
// end ;
29475: GO 29256
29477: POP
29478: POP
// end ;
29479: PPOPN 2
29481: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
29482: LD_INT 0
29484: PPUSH
29485: PPUSH
29486: PPUSH
// if not hack in hackTanks then
29487: LD_VAR 0 1
29491: PUSH
29492: LD_EXP 114
29496: IN
29497: NOT
29498: IFFALSE 29502
// exit ;
29500: GO 29613
// index := GetElementIndex ( hackTanks , hack ) ;
29502: LD_ADDR_VAR 0 4
29506: PUSH
29507: LD_EXP 114
29511: PPUSH
29512: LD_VAR 0 1
29516: PPUSH
29517: CALL 37047 0 2
29521: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
29522: LD_EXP 115
29526: PUSH
29527: LD_VAR 0 4
29531: ARRAY
29532: IFFALSE 29613
// begin for i in hackTanksCaptured [ index ] do
29534: LD_ADDR_VAR 0 3
29538: PUSH
29539: LD_EXP 115
29543: PUSH
29544: LD_VAR 0 4
29548: ARRAY
29549: PUSH
29550: FOR_IN
29551: IFFALSE 29577
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
29553: LD_VAR 0 3
29557: PUSH
29558: LD_INT 1
29560: ARRAY
29561: PPUSH
29562: LD_VAR 0 3
29566: PUSH
29567: LD_INT 2
29569: ARRAY
29570: PPUSH
29571: CALL_OW 235
29575: GO 29550
29577: POP
29578: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
29579: LD_ADDR_EXP 115
29583: PUSH
29584: LD_EXP 115
29588: PPUSH
29589: LD_VAR 0 4
29593: PPUSH
29594: EMPTY
29595: PPUSH
29596: CALL_OW 1
29600: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
29601: LD_VAR 0 1
29605: PPUSH
29606: LD_INT 0
29608: PPUSH
29609: CALL_OW 505
// end ; end ;
29613: LD_VAR 0 2
29617: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
29618: LD_INT 0
29620: PPUSH
29621: PPUSH
29622: PPUSH
// if not hack in hackTanks or not vehicles then
29623: LD_VAR 0 1
29627: PUSH
29628: LD_EXP 114
29632: IN
29633: NOT
29634: PUSH
29635: LD_VAR 0 2
29639: NOT
29640: OR
29641: IFFALSE 29645
// exit ;
29643: GO 29920
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
29645: LD_ADDR_VAR 0 2
29649: PUSH
29650: LD_VAR 0 1
29654: PPUSH
29655: LD_VAR 0 2
29659: PPUSH
29660: LD_INT 1
29662: PPUSH
29663: LD_INT 1
29665: PPUSH
29666: CALL 37697 0 4
29670: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
29671: LD_ADDR_VAR 0 5
29675: PUSH
29676: LD_EXP 114
29680: PPUSH
29681: LD_VAR 0 1
29685: PPUSH
29686: CALL 37047 0 2
29690: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
29691: LD_EXP 115
29695: PUSH
29696: LD_VAR 0 5
29700: ARRAY
29701: PUSH
29702: LD_EXP 116
29706: LESS
29707: IFFALSE 29896
// begin for i := 1 to vehicles do
29709: LD_ADDR_VAR 0 4
29713: PUSH
29714: DOUBLE
29715: LD_INT 1
29717: DEC
29718: ST_TO_ADDR
29719: LD_VAR 0 2
29723: PUSH
29724: FOR_TO
29725: IFFALSE 29894
// begin if hackTanksCaptured [ index ] = hackLimit then
29727: LD_EXP 115
29731: PUSH
29732: LD_VAR 0 5
29736: ARRAY
29737: PUSH
29738: LD_EXP 116
29742: EQUAL
29743: IFFALSE 29747
// break ;
29745: GO 29894
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
29747: LD_ADDR_EXP 118
29751: PUSH
29752: LD_EXP 118
29756: PPUSH
29757: LD_VAR 0 5
29761: PPUSH
29762: LD_EXP 118
29766: PUSH
29767: LD_VAR 0 5
29771: ARRAY
29772: PUSH
29773: LD_INT 1
29775: PLUS
29776: PPUSH
29777: CALL_OW 1
29781: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
29782: LD_ADDR_EXP 115
29786: PUSH
29787: LD_EXP 115
29791: PPUSH
29792: LD_VAR 0 5
29796: PUSH
29797: LD_EXP 115
29801: PUSH
29802: LD_VAR 0 5
29806: ARRAY
29807: PUSH
29808: LD_INT 1
29810: PLUS
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: PPUSH
29816: LD_VAR 0 2
29820: PUSH
29821: LD_VAR 0 4
29825: ARRAY
29826: PUSH
29827: LD_VAR 0 2
29831: PUSH
29832: LD_VAR 0 4
29836: ARRAY
29837: PPUSH
29838: CALL_OW 255
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: PPUSH
29847: CALL 37262 0 3
29851: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
29852: LD_VAR 0 2
29856: PUSH
29857: LD_VAR 0 4
29861: ARRAY
29862: PPUSH
29863: LD_VAR 0 1
29867: PPUSH
29868: CALL_OW 255
29872: PPUSH
29873: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
29877: LD_VAR 0 2
29881: PUSH
29882: LD_VAR 0 4
29886: ARRAY
29887: PPUSH
29888: CALL_OW 141
// end ;
29892: GO 29724
29894: POP
29895: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29896: LD_VAR 0 1
29900: PPUSH
29901: LD_EXP 115
29905: PUSH
29906: LD_VAR 0 5
29910: ARRAY
29911: PUSH
29912: LD_INT 0
29914: PLUS
29915: PPUSH
29916: CALL_OW 505
// end ;
29920: LD_VAR 0 3
29924: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
29925: LD_INT 0
29927: PPUSH
29928: PPUSH
29929: PPUSH
29930: PPUSH
// if not hack in hackTanks then
29931: LD_VAR 0 1
29935: PUSH
29936: LD_EXP 114
29940: IN
29941: NOT
29942: IFFALSE 29946
// exit ;
29944: GO 30186
// index := GetElementIndex ( hackTanks , hack ) ;
29946: LD_ADDR_VAR 0 4
29950: PUSH
29951: LD_EXP 114
29955: PPUSH
29956: LD_VAR 0 1
29960: PPUSH
29961: CALL 37047 0 2
29965: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
29966: LD_ADDR_VAR 0 3
29970: PUSH
29971: DOUBLE
29972: LD_EXP 115
29976: PUSH
29977: LD_VAR 0 4
29981: ARRAY
29982: INC
29983: ST_TO_ADDR
29984: LD_INT 1
29986: PUSH
29987: FOR_DOWNTO
29988: IFFALSE 30160
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
29990: LD_ADDR_VAR 0 5
29994: PUSH
29995: LD_EXP 115
29999: PUSH
30000: LD_VAR 0 4
30004: ARRAY
30005: PUSH
30006: LD_VAR 0 3
30010: ARRAY
30011: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
30012: LD_VAR 0 5
30016: PUSH
30017: LD_INT 1
30019: ARRAY
30020: PPUSH
30021: CALL_OW 302
30025: NOT
30026: PUSH
30027: LD_VAR 0 5
30031: PUSH
30032: LD_INT 1
30034: ARRAY
30035: PPUSH
30036: CALL_OW 255
30040: PUSH
30041: LD_VAR 0 1
30045: PPUSH
30046: CALL_OW 255
30050: NONEQUAL
30051: OR
30052: IFFALSE 30158
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
30054: LD_VAR 0 5
30058: PUSH
30059: LD_INT 1
30061: ARRAY
30062: PPUSH
30063: CALL_OW 305
30067: PUSH
30068: LD_VAR 0 5
30072: PUSH
30073: LD_INT 1
30075: ARRAY
30076: PPUSH
30077: CALL_OW 255
30081: PUSH
30082: LD_VAR 0 1
30086: PPUSH
30087: CALL_OW 255
30091: EQUAL
30092: AND
30093: IFFALSE 30117
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
30095: LD_VAR 0 5
30099: PUSH
30100: LD_INT 1
30102: ARRAY
30103: PPUSH
30104: LD_VAR 0 5
30108: PUSH
30109: LD_INT 2
30111: ARRAY
30112: PPUSH
30113: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
30117: LD_ADDR_EXP 115
30121: PUSH
30122: LD_EXP 115
30126: PPUSH
30127: LD_VAR 0 4
30131: PPUSH
30132: LD_EXP 115
30136: PUSH
30137: LD_VAR 0 4
30141: ARRAY
30142: PPUSH
30143: LD_VAR 0 3
30147: PPUSH
30148: CALL_OW 3
30152: PPUSH
30153: CALL_OW 1
30157: ST_TO_ADDR
// end ; end ;
30158: GO 29987
30160: POP
30161: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30162: LD_VAR 0 1
30166: PPUSH
30167: LD_EXP 115
30171: PUSH
30172: LD_VAR 0 4
30176: ARRAY
30177: PUSH
30178: LD_INT 0
30180: PLUS
30181: PPUSH
30182: CALL_OW 505
// end ;
30186: LD_VAR 0 2
30190: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
30191: LD_INT 0
30193: PPUSH
30194: PPUSH
30195: PPUSH
30196: PPUSH
// if not hack in hackTanks then
30197: LD_VAR 0 1
30201: PUSH
30202: LD_EXP 114
30206: IN
30207: NOT
30208: IFFALSE 30212
// exit ;
30210: GO 30297
// index := GetElementIndex ( hackTanks , hack ) ;
30212: LD_ADDR_VAR 0 5
30216: PUSH
30217: LD_EXP 114
30221: PPUSH
30222: LD_VAR 0 1
30226: PPUSH
30227: CALL 37047 0 2
30231: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30232: LD_ADDR_VAR 0 4
30236: PUSH
30237: DOUBLE
30238: LD_INT 1
30240: DEC
30241: ST_TO_ADDR
30242: LD_EXP 115
30246: PUSH
30247: LD_VAR 0 5
30251: ARRAY
30252: PUSH
30253: FOR_TO
30254: IFFALSE 30295
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30256: LD_EXP 115
30260: PUSH
30261: LD_VAR 0 5
30265: ARRAY
30266: PUSH
30267: LD_VAR 0 4
30271: ARRAY
30272: PUSH
30273: LD_INT 1
30275: ARRAY
30276: PUSH
30277: LD_VAR 0 2
30281: EQUAL
30282: IFFALSE 30293
// KillUnit ( vehicle ) ;
30284: LD_VAR 0 2
30288: PPUSH
30289: CALL_OW 66
30293: GO 30253
30295: POP
30296: POP
// end ;
30297: LD_VAR 0 3
30301: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
30302: LD_EXP 119
30306: NOT
30307: IFFALSE 30342
30309: GO 30311
30311: DISABLE
// begin initMiner := true ;
30312: LD_ADDR_EXP 119
30316: PUSH
30317: LD_INT 1
30319: ST_TO_ADDR
// minersList := [ ] ;
30320: LD_ADDR_EXP 120
30324: PUSH
30325: EMPTY
30326: ST_TO_ADDR
// minerMinesList := [ ] ;
30327: LD_ADDR_EXP 121
30331: PUSH
30332: EMPTY
30333: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
30334: LD_ADDR_EXP 122
30338: PUSH
30339: LD_INT 5
30341: ST_TO_ADDR
// end ;
30342: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
30343: LD_EXP 119
30347: PUSH
30348: LD_INT 34
30350: PUSH
30351: LD_EXP 45
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PPUSH
30360: CALL_OW 69
30364: AND
30365: IFFALSE 30828
30367: GO 30369
30369: DISABLE
30370: LD_INT 0
30372: PPUSH
30373: PPUSH
30374: PPUSH
30375: PPUSH
// begin enable ;
30376: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
30377: LD_ADDR_VAR 0 1
30381: PUSH
30382: LD_INT 34
30384: PUSH
30385: LD_EXP 45
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: PPUSH
30394: CALL_OW 69
30398: PUSH
30399: FOR_IN
30400: IFFALSE 30472
// begin if not i in minersList then
30402: LD_VAR 0 1
30406: PUSH
30407: LD_EXP 120
30411: IN
30412: NOT
30413: IFFALSE 30470
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
30415: LD_ADDR_EXP 120
30419: PUSH
30420: LD_EXP 120
30424: PPUSH
30425: LD_EXP 120
30429: PUSH
30430: LD_INT 1
30432: PLUS
30433: PPUSH
30434: LD_VAR 0 1
30438: PPUSH
30439: CALL_OW 1
30443: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
30444: LD_ADDR_EXP 121
30448: PUSH
30449: LD_EXP 121
30453: PPUSH
30454: LD_EXP 121
30458: PUSH
30459: LD_INT 1
30461: PLUS
30462: PPUSH
30463: EMPTY
30464: PPUSH
30465: CALL_OW 1
30469: ST_TO_ADDR
// end end ;
30470: GO 30399
30472: POP
30473: POP
// for i := minerMinesList downto 1 do
30474: LD_ADDR_VAR 0 1
30478: PUSH
30479: DOUBLE
30480: LD_EXP 121
30484: INC
30485: ST_TO_ADDR
30486: LD_INT 1
30488: PUSH
30489: FOR_DOWNTO
30490: IFFALSE 30826
// begin if IsLive ( minersList [ i ] ) then
30492: LD_EXP 120
30496: PUSH
30497: LD_VAR 0 1
30501: ARRAY
30502: PPUSH
30503: CALL_OW 300
30507: IFFALSE 30535
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
30509: LD_EXP 120
30513: PUSH
30514: LD_VAR 0 1
30518: ARRAY
30519: PPUSH
30520: LD_EXP 121
30524: PUSH
30525: LD_VAR 0 1
30529: ARRAY
30530: PPUSH
30531: CALL_OW 505
// if not minerMinesList [ i ] then
30535: LD_EXP 121
30539: PUSH
30540: LD_VAR 0 1
30544: ARRAY
30545: NOT
30546: IFFALSE 30550
// continue ;
30548: GO 30489
// for j := minerMinesList [ i ] downto 1 do
30550: LD_ADDR_VAR 0 2
30554: PUSH
30555: DOUBLE
30556: LD_EXP 121
30560: PUSH
30561: LD_VAR 0 1
30565: ARRAY
30566: INC
30567: ST_TO_ADDR
30568: LD_INT 1
30570: PUSH
30571: FOR_DOWNTO
30572: IFFALSE 30822
// begin side := GetSide ( minersList [ i ] ) ;
30574: LD_ADDR_VAR 0 3
30578: PUSH
30579: LD_EXP 120
30583: PUSH
30584: LD_VAR 0 1
30588: ARRAY
30589: PPUSH
30590: CALL_OW 255
30594: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
30595: LD_ADDR_VAR 0 4
30599: PUSH
30600: LD_EXP 121
30604: PUSH
30605: LD_VAR 0 1
30609: ARRAY
30610: PUSH
30611: LD_VAR 0 2
30615: ARRAY
30616: PUSH
30617: LD_INT 1
30619: ARRAY
30620: PPUSH
30621: LD_EXP 121
30625: PUSH
30626: LD_VAR 0 1
30630: ARRAY
30631: PUSH
30632: LD_VAR 0 2
30636: ARRAY
30637: PUSH
30638: LD_INT 2
30640: ARRAY
30641: PPUSH
30642: CALL_OW 428
30646: ST_TO_ADDR
// if not tmp then
30647: LD_VAR 0 4
30651: NOT
30652: IFFALSE 30656
// continue ;
30654: GO 30571
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
30656: LD_VAR 0 4
30660: PUSH
30661: LD_INT 81
30663: PUSH
30664: LD_VAR 0 3
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PPUSH
30673: CALL_OW 69
30677: IN
30678: PUSH
30679: LD_EXP 121
30683: PUSH
30684: LD_VAR 0 1
30688: ARRAY
30689: PUSH
30690: LD_VAR 0 2
30694: ARRAY
30695: PUSH
30696: LD_INT 1
30698: ARRAY
30699: PPUSH
30700: LD_EXP 121
30704: PUSH
30705: LD_VAR 0 1
30709: ARRAY
30710: PUSH
30711: LD_VAR 0 2
30715: ARRAY
30716: PUSH
30717: LD_INT 2
30719: ARRAY
30720: PPUSH
30721: CALL_OW 458
30725: AND
30726: IFFALSE 30820
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
30728: LD_EXP 121
30732: PUSH
30733: LD_VAR 0 1
30737: ARRAY
30738: PUSH
30739: LD_VAR 0 2
30743: ARRAY
30744: PUSH
30745: LD_INT 1
30747: ARRAY
30748: PPUSH
30749: LD_EXP 121
30753: PUSH
30754: LD_VAR 0 1
30758: ARRAY
30759: PUSH
30760: LD_VAR 0 2
30764: ARRAY
30765: PUSH
30766: LD_INT 2
30768: ARRAY
30769: PPUSH
30770: LD_VAR 0 3
30774: PPUSH
30775: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
30779: LD_ADDR_EXP 121
30783: PUSH
30784: LD_EXP 121
30788: PPUSH
30789: LD_VAR 0 1
30793: PPUSH
30794: LD_EXP 121
30798: PUSH
30799: LD_VAR 0 1
30803: ARRAY
30804: PPUSH
30805: LD_VAR 0 2
30809: PPUSH
30810: CALL_OW 3
30814: PPUSH
30815: CALL_OW 1
30819: ST_TO_ADDR
// end ; end ;
30820: GO 30571
30822: POP
30823: POP
// end ;
30824: GO 30489
30826: POP
30827: POP
// end ;
30828: PPOPN 4
30830: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
30831: LD_INT 0
30833: PPUSH
30834: PPUSH
// result := false ;
30835: LD_ADDR_VAR 0 4
30839: PUSH
30840: LD_INT 0
30842: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
30843: LD_VAR 0 1
30847: PPUSH
30848: CALL_OW 264
30852: PUSH
30853: LD_EXP 45
30857: EQUAL
30858: NOT
30859: IFFALSE 30863
// exit ;
30861: GO 31103
// index := GetElementIndex ( minersList , unit ) ;
30863: LD_ADDR_VAR 0 5
30867: PUSH
30868: LD_EXP 120
30872: PPUSH
30873: LD_VAR 0 1
30877: PPUSH
30878: CALL 37047 0 2
30882: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
30883: LD_EXP 121
30887: PUSH
30888: LD_VAR 0 5
30892: ARRAY
30893: PUSH
30894: LD_EXP 122
30898: GREATEREQUAL
30899: IFFALSE 30903
// exit ;
30901: GO 31103
// ComMoveXY ( unit , x , y ) ;
30903: LD_VAR 0 1
30907: PPUSH
30908: LD_VAR 0 2
30912: PPUSH
30913: LD_VAR 0 3
30917: PPUSH
30918: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30922: LD_INT 35
30924: PPUSH
30925: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
30929: LD_VAR 0 1
30933: PPUSH
30934: LD_VAR 0 2
30938: PPUSH
30939: LD_VAR 0 3
30943: PPUSH
30944: CALL 67444 0 3
30948: NOT
30949: PUSH
30950: LD_VAR 0 1
30954: PPUSH
30955: CALL_OW 314
30959: AND
30960: IFFALSE 30964
// exit ;
30962: GO 31103
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
30964: LD_VAR 0 2
30968: PPUSH
30969: LD_VAR 0 3
30973: PPUSH
30974: CALL_OW 428
30978: PUSH
30979: LD_VAR 0 1
30983: EQUAL
30984: PUSH
30985: LD_VAR 0 1
30989: PPUSH
30990: CALL_OW 314
30994: NOT
30995: AND
30996: IFFALSE 30922
// PlaySoundXY ( x , y , PlantMine ) ;
30998: LD_VAR 0 2
31002: PPUSH
31003: LD_VAR 0 3
31007: PPUSH
31008: LD_STRING PlantMine
31010: PPUSH
31011: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
31015: LD_VAR 0 2
31019: PPUSH
31020: LD_VAR 0 3
31024: PPUSH
31025: LD_VAR 0 1
31029: PPUSH
31030: CALL_OW 255
31034: PPUSH
31035: LD_INT 0
31037: PPUSH
31038: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
31042: LD_ADDR_EXP 121
31046: PUSH
31047: LD_EXP 121
31051: PPUSH
31052: LD_VAR 0 5
31056: PUSH
31057: LD_EXP 121
31061: PUSH
31062: LD_VAR 0 5
31066: ARRAY
31067: PUSH
31068: LD_INT 1
31070: PLUS
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: PPUSH
31076: LD_VAR 0 2
31080: PUSH
31081: LD_VAR 0 3
31085: PUSH
31086: EMPTY
31087: LIST
31088: LIST
31089: PPUSH
31090: CALL 37262 0 3
31094: ST_TO_ADDR
// result := true ;
31095: LD_ADDR_VAR 0 4
31099: PUSH
31100: LD_INT 1
31102: ST_TO_ADDR
// end ;
31103: LD_VAR 0 4
31107: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
31108: LD_INT 0
31110: PPUSH
31111: PPUSH
31112: PPUSH
// if not unit in minersList then
31113: LD_VAR 0 1
31117: PUSH
31118: LD_EXP 120
31122: IN
31123: NOT
31124: IFFALSE 31128
// exit ;
31126: GO 31520
// index := GetElementIndex ( minersList , unit ) ;
31128: LD_ADDR_VAR 0 6
31132: PUSH
31133: LD_EXP 120
31137: PPUSH
31138: LD_VAR 0 1
31142: PPUSH
31143: CALL 37047 0 2
31147: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
31148: LD_ADDR_VAR 0 5
31152: PUSH
31153: DOUBLE
31154: LD_EXP 121
31158: PUSH
31159: LD_VAR 0 6
31163: ARRAY
31164: INC
31165: ST_TO_ADDR
31166: LD_INT 1
31168: PUSH
31169: FOR_DOWNTO
31170: IFFALSE 31331
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
31172: LD_EXP 121
31176: PUSH
31177: LD_VAR 0 6
31181: ARRAY
31182: PUSH
31183: LD_VAR 0 5
31187: ARRAY
31188: PUSH
31189: LD_INT 1
31191: ARRAY
31192: PUSH
31193: LD_VAR 0 2
31197: EQUAL
31198: PUSH
31199: LD_EXP 121
31203: PUSH
31204: LD_VAR 0 6
31208: ARRAY
31209: PUSH
31210: LD_VAR 0 5
31214: ARRAY
31215: PUSH
31216: LD_INT 2
31218: ARRAY
31219: PUSH
31220: LD_VAR 0 3
31224: EQUAL
31225: AND
31226: IFFALSE 31329
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31228: LD_EXP 121
31232: PUSH
31233: LD_VAR 0 6
31237: ARRAY
31238: PUSH
31239: LD_VAR 0 5
31243: ARRAY
31244: PUSH
31245: LD_INT 1
31247: ARRAY
31248: PPUSH
31249: LD_EXP 121
31253: PUSH
31254: LD_VAR 0 6
31258: ARRAY
31259: PUSH
31260: LD_VAR 0 5
31264: ARRAY
31265: PUSH
31266: LD_INT 2
31268: ARRAY
31269: PPUSH
31270: LD_VAR 0 1
31274: PPUSH
31275: CALL_OW 255
31279: PPUSH
31280: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31284: LD_ADDR_EXP 121
31288: PUSH
31289: LD_EXP 121
31293: PPUSH
31294: LD_VAR 0 6
31298: PPUSH
31299: LD_EXP 121
31303: PUSH
31304: LD_VAR 0 6
31308: ARRAY
31309: PPUSH
31310: LD_VAR 0 5
31314: PPUSH
31315: CALL_OW 3
31319: PPUSH
31320: CALL_OW 1
31324: ST_TO_ADDR
// exit ;
31325: POP
31326: POP
31327: GO 31520
// end ; end ;
31329: GO 31169
31331: POP
31332: POP
// for i := minerMinesList [ index ] downto 1 do
31333: LD_ADDR_VAR 0 5
31337: PUSH
31338: DOUBLE
31339: LD_EXP 121
31343: PUSH
31344: LD_VAR 0 6
31348: ARRAY
31349: INC
31350: ST_TO_ADDR
31351: LD_INT 1
31353: PUSH
31354: FOR_DOWNTO
31355: IFFALSE 31518
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
31357: LD_EXP 121
31361: PUSH
31362: LD_VAR 0 6
31366: ARRAY
31367: PUSH
31368: LD_VAR 0 5
31372: ARRAY
31373: PUSH
31374: LD_INT 1
31376: ARRAY
31377: PPUSH
31378: LD_EXP 121
31382: PUSH
31383: LD_VAR 0 6
31387: ARRAY
31388: PUSH
31389: LD_VAR 0 5
31393: ARRAY
31394: PUSH
31395: LD_INT 2
31397: ARRAY
31398: PPUSH
31399: LD_VAR 0 2
31403: PPUSH
31404: LD_VAR 0 3
31408: PPUSH
31409: CALL_OW 298
31413: PUSH
31414: LD_INT 6
31416: LESS
31417: IFFALSE 31516
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31419: LD_EXP 121
31423: PUSH
31424: LD_VAR 0 6
31428: ARRAY
31429: PUSH
31430: LD_VAR 0 5
31434: ARRAY
31435: PUSH
31436: LD_INT 1
31438: ARRAY
31439: PPUSH
31440: LD_EXP 121
31444: PUSH
31445: LD_VAR 0 6
31449: ARRAY
31450: PUSH
31451: LD_VAR 0 5
31455: ARRAY
31456: PUSH
31457: LD_INT 2
31459: ARRAY
31460: PPUSH
31461: LD_VAR 0 1
31465: PPUSH
31466: CALL_OW 255
31470: PPUSH
31471: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31475: LD_ADDR_EXP 121
31479: PUSH
31480: LD_EXP 121
31484: PPUSH
31485: LD_VAR 0 6
31489: PPUSH
31490: LD_EXP 121
31494: PUSH
31495: LD_VAR 0 6
31499: ARRAY
31500: PPUSH
31501: LD_VAR 0 5
31505: PPUSH
31506: CALL_OW 3
31510: PPUSH
31511: CALL_OW 1
31515: ST_TO_ADDR
// end ; end ;
31516: GO 31354
31518: POP
31519: POP
// end ;
31520: LD_VAR 0 4
31524: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
31525: LD_INT 0
31527: PPUSH
31528: PPUSH
31529: PPUSH
31530: PPUSH
31531: PPUSH
31532: PPUSH
31533: PPUSH
31534: PPUSH
31535: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
31536: LD_VAR 0 1
31540: PPUSH
31541: CALL_OW 264
31545: PUSH
31546: LD_EXP 45
31550: EQUAL
31551: NOT
31552: PUSH
31553: LD_VAR 0 1
31557: PUSH
31558: LD_EXP 120
31562: IN
31563: NOT
31564: OR
31565: IFFALSE 31569
// exit ;
31567: GO 31891
// index := GetElementIndex ( minersList , unit ) ;
31569: LD_ADDR_VAR 0 6
31573: PUSH
31574: LD_EXP 120
31578: PPUSH
31579: LD_VAR 0 1
31583: PPUSH
31584: CALL 37047 0 2
31588: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
31589: LD_ADDR_VAR 0 8
31593: PUSH
31594: LD_EXP 122
31598: PUSH
31599: LD_EXP 121
31603: PUSH
31604: LD_VAR 0 6
31608: ARRAY
31609: MINUS
31610: ST_TO_ADDR
// if not minesFreeAmount then
31611: LD_VAR 0 8
31615: NOT
31616: IFFALSE 31620
// exit ;
31618: GO 31891
// tmp := [ ] ;
31620: LD_ADDR_VAR 0 7
31624: PUSH
31625: EMPTY
31626: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
31627: LD_ADDR_VAR 0 5
31631: PUSH
31632: DOUBLE
31633: LD_INT 1
31635: DEC
31636: ST_TO_ADDR
31637: LD_VAR 0 8
31641: PUSH
31642: FOR_TO
31643: IFFALSE 31838
// begin _d := rand ( 0 , 5 ) ;
31645: LD_ADDR_VAR 0 11
31649: PUSH
31650: LD_INT 0
31652: PPUSH
31653: LD_INT 5
31655: PPUSH
31656: CALL_OW 12
31660: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
31661: LD_ADDR_VAR 0 12
31665: PUSH
31666: LD_INT 2
31668: PPUSH
31669: LD_INT 6
31671: PPUSH
31672: CALL_OW 12
31676: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
31677: LD_ADDR_VAR 0 9
31681: PUSH
31682: LD_VAR 0 2
31686: PPUSH
31687: LD_VAR 0 11
31691: PPUSH
31692: LD_VAR 0 12
31696: PPUSH
31697: CALL_OW 272
31701: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
31702: LD_ADDR_VAR 0 10
31706: PUSH
31707: LD_VAR 0 3
31711: PPUSH
31712: LD_VAR 0 11
31716: PPUSH
31717: LD_VAR 0 12
31721: PPUSH
31722: CALL_OW 273
31726: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
31727: LD_VAR 0 9
31731: PPUSH
31732: LD_VAR 0 10
31736: PPUSH
31737: CALL_OW 488
31741: PUSH
31742: LD_VAR 0 9
31746: PUSH
31747: LD_VAR 0 10
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: PUSH
31756: LD_VAR 0 7
31760: IN
31761: NOT
31762: AND
31763: PUSH
31764: LD_VAR 0 9
31768: PPUSH
31769: LD_VAR 0 10
31773: PPUSH
31774: CALL_OW 458
31778: NOT
31779: AND
31780: IFFALSE 31822
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
31782: LD_ADDR_VAR 0 7
31786: PUSH
31787: LD_VAR 0 7
31791: PPUSH
31792: LD_VAR 0 7
31796: PUSH
31797: LD_INT 1
31799: PLUS
31800: PPUSH
31801: LD_VAR 0 9
31805: PUSH
31806: LD_VAR 0 10
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: PPUSH
31815: CALL_OW 1
31819: ST_TO_ADDR
31820: GO 31836
// i := i - 1 ;
31822: LD_ADDR_VAR 0 5
31826: PUSH
31827: LD_VAR 0 5
31831: PUSH
31832: LD_INT 1
31834: MINUS
31835: ST_TO_ADDR
// end ;
31836: GO 31642
31838: POP
31839: POP
// for i in tmp do
31840: LD_ADDR_VAR 0 5
31844: PUSH
31845: LD_VAR 0 7
31849: PUSH
31850: FOR_IN
31851: IFFALSE 31889
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
31853: LD_VAR 0 1
31857: PPUSH
31858: LD_VAR 0 5
31862: PUSH
31863: LD_INT 1
31865: ARRAY
31866: PPUSH
31867: LD_VAR 0 5
31871: PUSH
31872: LD_INT 2
31874: ARRAY
31875: PPUSH
31876: CALL 30831 0 3
31880: NOT
31881: IFFALSE 31887
// exit ;
31883: POP
31884: POP
31885: GO 31891
31887: GO 31850
31889: POP
31890: POP
// end ;
31891: LD_VAR 0 4
31895: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
31896: LD_INT 0
31898: PPUSH
31899: PPUSH
31900: PPUSH
31901: PPUSH
31902: PPUSH
31903: PPUSH
31904: PPUSH
// if not GetClass ( unit ) = class_sniper then
31905: LD_VAR 0 1
31909: PPUSH
31910: CALL_OW 257
31914: PUSH
31915: LD_INT 5
31917: EQUAL
31918: NOT
31919: IFFALSE 31923
// exit ;
31921: GO 32311
// dist := 8 ;
31923: LD_ADDR_VAR 0 5
31927: PUSH
31928: LD_INT 8
31930: ST_TO_ADDR
// viewRange := 12 ;
31931: LD_ADDR_VAR 0 7
31935: PUSH
31936: LD_INT 12
31938: ST_TO_ADDR
// side := GetSide ( unit ) ;
31939: LD_ADDR_VAR 0 6
31943: PUSH
31944: LD_VAR 0 1
31948: PPUSH
31949: CALL_OW 255
31953: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
31954: LD_INT 61
31956: PPUSH
31957: LD_VAR 0 6
31961: PPUSH
31962: CALL_OW 321
31966: PUSH
31967: LD_INT 2
31969: EQUAL
31970: IFFALSE 31980
// viewRange := 16 ;
31972: LD_ADDR_VAR 0 7
31976: PUSH
31977: LD_INT 16
31979: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
31980: LD_VAR 0 1
31984: PPUSH
31985: LD_VAR 0 2
31989: PPUSH
31990: LD_VAR 0 3
31994: PPUSH
31995: CALL_OW 297
31999: PUSH
32000: LD_VAR 0 5
32004: GREATER
32005: IFFALSE 32084
// begin ComMoveXY ( unit , x , y ) ;
32007: LD_VAR 0 1
32011: PPUSH
32012: LD_VAR 0 2
32016: PPUSH
32017: LD_VAR 0 3
32021: PPUSH
32022: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32026: LD_INT 35
32028: PPUSH
32029: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
32033: LD_VAR 0 1
32037: PPUSH
32038: LD_VAR 0 2
32042: PPUSH
32043: LD_VAR 0 3
32047: PPUSH
32048: CALL 67444 0 3
32052: NOT
32053: IFFALSE 32057
// exit ;
32055: GO 32311
// until GetDistUnitXY ( unit , x , y ) < dist ;
32057: LD_VAR 0 1
32061: PPUSH
32062: LD_VAR 0 2
32066: PPUSH
32067: LD_VAR 0 3
32071: PPUSH
32072: CALL_OW 297
32076: PUSH
32077: LD_VAR 0 5
32081: LESS
32082: IFFALSE 32026
// end ; ComTurnXY ( unit , x , y ) ;
32084: LD_VAR 0 1
32088: PPUSH
32089: LD_VAR 0 2
32093: PPUSH
32094: LD_VAR 0 3
32098: PPUSH
32099: CALL_OW 118
// wait ( 5 ) ;
32103: LD_INT 5
32105: PPUSH
32106: CALL_OW 67
// _d := GetDir ( unit ) ;
32110: LD_ADDR_VAR 0 10
32114: PUSH
32115: LD_VAR 0 1
32119: PPUSH
32120: CALL_OW 254
32124: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
32125: LD_ADDR_VAR 0 8
32129: PUSH
32130: LD_VAR 0 1
32134: PPUSH
32135: CALL_OW 250
32139: PPUSH
32140: LD_VAR 0 10
32144: PPUSH
32145: LD_VAR 0 5
32149: PPUSH
32150: CALL_OW 272
32154: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
32155: LD_ADDR_VAR 0 9
32159: PUSH
32160: LD_VAR 0 1
32164: PPUSH
32165: CALL_OW 251
32169: PPUSH
32170: LD_VAR 0 10
32174: PPUSH
32175: LD_VAR 0 5
32179: PPUSH
32180: CALL_OW 273
32184: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32185: LD_VAR 0 8
32189: PPUSH
32190: LD_VAR 0 9
32194: PPUSH
32195: CALL_OW 488
32199: NOT
32200: IFFALSE 32204
// exit ;
32202: GO 32311
// ComAnimCustom ( unit , 1 ) ;
32204: LD_VAR 0 1
32208: PPUSH
32209: LD_INT 1
32211: PPUSH
32212: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
32216: LD_VAR 0 8
32220: PPUSH
32221: LD_VAR 0 9
32225: PPUSH
32226: LD_VAR 0 6
32230: PPUSH
32231: LD_VAR 0 7
32235: PPUSH
32236: CALL_OW 330
// repeat wait ( 1 ) ;
32240: LD_INT 1
32242: PPUSH
32243: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
32247: LD_VAR 0 1
32251: PPUSH
32252: CALL_OW 316
32256: PUSH
32257: LD_VAR 0 1
32261: PPUSH
32262: CALL_OW 314
32266: OR
32267: PUSH
32268: LD_VAR 0 1
32272: PPUSH
32273: CALL_OW 302
32277: NOT
32278: OR
32279: PUSH
32280: LD_VAR 0 1
32284: PPUSH
32285: CALL_OW 301
32289: OR
32290: IFFALSE 32240
// RemoveSeeing ( _x , _y , side ) ;
32292: LD_VAR 0 8
32296: PPUSH
32297: LD_VAR 0 9
32301: PPUSH
32302: LD_VAR 0 6
32306: PPUSH
32307: CALL_OW 331
// end ; end_of_file
32311: LD_VAR 0 4
32315: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
32316: LD_INT 0
32318: PPUSH
32319: PPUSH
// if exist_mode then
32320: LD_VAR 0 2
32324: IFFALSE 32349
// unit := CreateCharacter ( prefix & ident ) else
32326: LD_ADDR_VAR 0 5
32330: PUSH
32331: LD_VAR 0 3
32335: PUSH
32336: LD_VAR 0 1
32340: STR
32341: PPUSH
32342: CALL_OW 34
32346: ST_TO_ADDR
32347: GO 32364
// unit := NewCharacter ( ident ) ;
32349: LD_ADDR_VAR 0 5
32353: PUSH
32354: LD_VAR 0 1
32358: PPUSH
32359: CALL_OW 25
32363: ST_TO_ADDR
// result := unit ;
32364: LD_ADDR_VAR 0 4
32368: PUSH
32369: LD_VAR 0 5
32373: ST_TO_ADDR
// end ;
32374: LD_VAR 0 4
32378: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
32379: LD_INT 0
32381: PPUSH
32382: PPUSH
// if not side or not nation then
32383: LD_VAR 0 1
32387: NOT
32388: PUSH
32389: LD_VAR 0 2
32393: NOT
32394: OR
32395: IFFALSE 32399
// exit ;
32397: GO 33163
// case nation of nation_american :
32399: LD_VAR 0 2
32403: PUSH
32404: LD_INT 1
32406: DOUBLE
32407: EQUAL
32408: IFTRUE 32412
32410: GO 32626
32412: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
32413: LD_ADDR_VAR 0 4
32417: PUSH
32418: LD_INT 35
32420: PUSH
32421: LD_INT 45
32423: PUSH
32424: LD_INT 46
32426: PUSH
32427: LD_INT 47
32429: PUSH
32430: LD_INT 82
32432: PUSH
32433: LD_INT 83
32435: PUSH
32436: LD_INT 84
32438: PUSH
32439: LD_INT 85
32441: PUSH
32442: LD_INT 86
32444: PUSH
32445: LD_INT 1
32447: PUSH
32448: LD_INT 2
32450: PUSH
32451: LD_INT 6
32453: PUSH
32454: LD_INT 15
32456: PUSH
32457: LD_INT 16
32459: PUSH
32460: LD_INT 7
32462: PUSH
32463: LD_INT 12
32465: PUSH
32466: LD_INT 13
32468: PUSH
32469: LD_INT 10
32471: PUSH
32472: LD_INT 14
32474: PUSH
32475: LD_INT 20
32477: PUSH
32478: LD_INT 21
32480: PUSH
32481: LD_INT 22
32483: PUSH
32484: LD_INT 25
32486: PUSH
32487: LD_INT 32
32489: PUSH
32490: LD_INT 27
32492: PUSH
32493: LD_INT 36
32495: PUSH
32496: LD_INT 69
32498: PUSH
32499: LD_INT 39
32501: PUSH
32502: LD_INT 34
32504: PUSH
32505: LD_INT 40
32507: PUSH
32508: LD_INT 48
32510: PUSH
32511: LD_INT 49
32513: PUSH
32514: LD_INT 50
32516: PUSH
32517: LD_INT 51
32519: PUSH
32520: LD_INT 52
32522: PUSH
32523: LD_INT 53
32525: PUSH
32526: LD_INT 54
32528: PUSH
32529: LD_INT 55
32531: PUSH
32532: LD_INT 56
32534: PUSH
32535: LD_INT 57
32537: PUSH
32538: LD_INT 58
32540: PUSH
32541: LD_INT 59
32543: PUSH
32544: LD_INT 60
32546: PUSH
32547: LD_INT 61
32549: PUSH
32550: LD_INT 62
32552: PUSH
32553: LD_INT 80
32555: PUSH
32556: LD_INT 82
32558: PUSH
32559: LD_INT 83
32561: PUSH
32562: LD_INT 84
32564: PUSH
32565: LD_INT 85
32567: PUSH
32568: LD_INT 86
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: LIST
32578: LIST
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: ST_TO_ADDR
32624: GO 33087
32626: LD_INT 2
32628: DOUBLE
32629: EQUAL
32630: IFTRUE 32634
32632: GO 32856
32634: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
32635: LD_ADDR_VAR 0 4
32639: PUSH
32640: LD_INT 35
32642: PUSH
32643: LD_INT 45
32645: PUSH
32646: LD_INT 46
32648: PUSH
32649: LD_INT 47
32651: PUSH
32652: LD_INT 82
32654: PUSH
32655: LD_INT 83
32657: PUSH
32658: LD_INT 84
32660: PUSH
32661: LD_INT 85
32663: PUSH
32664: LD_INT 87
32666: PUSH
32667: LD_INT 70
32669: PUSH
32670: LD_INT 1
32672: PUSH
32673: LD_INT 11
32675: PUSH
32676: LD_INT 3
32678: PUSH
32679: LD_INT 4
32681: PUSH
32682: LD_INT 5
32684: PUSH
32685: LD_INT 6
32687: PUSH
32688: LD_INT 15
32690: PUSH
32691: LD_INT 18
32693: PUSH
32694: LD_INT 7
32696: PUSH
32697: LD_INT 17
32699: PUSH
32700: LD_INT 8
32702: PUSH
32703: LD_INT 20
32705: PUSH
32706: LD_INT 21
32708: PUSH
32709: LD_INT 22
32711: PUSH
32712: LD_INT 72
32714: PUSH
32715: LD_INT 26
32717: PUSH
32718: LD_INT 69
32720: PUSH
32721: LD_INT 39
32723: PUSH
32724: LD_INT 40
32726: PUSH
32727: LD_INT 41
32729: PUSH
32730: LD_INT 42
32732: PUSH
32733: LD_INT 43
32735: PUSH
32736: LD_INT 48
32738: PUSH
32739: LD_INT 49
32741: PUSH
32742: LD_INT 50
32744: PUSH
32745: LD_INT 51
32747: PUSH
32748: LD_INT 52
32750: PUSH
32751: LD_INT 53
32753: PUSH
32754: LD_INT 54
32756: PUSH
32757: LD_INT 55
32759: PUSH
32760: LD_INT 56
32762: PUSH
32763: LD_INT 60
32765: PUSH
32766: LD_INT 61
32768: PUSH
32769: LD_INT 62
32771: PUSH
32772: LD_INT 66
32774: PUSH
32775: LD_INT 67
32777: PUSH
32778: LD_INT 68
32780: PUSH
32781: LD_INT 81
32783: PUSH
32784: LD_INT 82
32786: PUSH
32787: LD_INT 83
32789: PUSH
32790: LD_INT 84
32792: PUSH
32793: LD_INT 85
32795: PUSH
32796: LD_INT 87
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: LIST
32803: LIST
32804: LIST
32805: LIST
32806: LIST
32807: LIST
32808: LIST
32809: LIST
32810: LIST
32811: LIST
32812: LIST
32813: LIST
32814: LIST
32815: LIST
32816: LIST
32817: LIST
32818: LIST
32819: LIST
32820: LIST
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: ST_TO_ADDR
32854: GO 33087
32856: LD_INT 3
32858: DOUBLE
32859: EQUAL
32860: IFTRUE 32864
32862: GO 33086
32864: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
32865: LD_ADDR_VAR 0 4
32869: PUSH
32870: LD_INT 46
32872: PUSH
32873: LD_INT 47
32875: PUSH
32876: LD_INT 1
32878: PUSH
32879: LD_INT 2
32881: PUSH
32882: LD_INT 82
32884: PUSH
32885: LD_INT 83
32887: PUSH
32888: LD_INT 84
32890: PUSH
32891: LD_INT 85
32893: PUSH
32894: LD_INT 86
32896: PUSH
32897: LD_INT 11
32899: PUSH
32900: LD_INT 9
32902: PUSH
32903: LD_INT 20
32905: PUSH
32906: LD_INT 19
32908: PUSH
32909: LD_INT 21
32911: PUSH
32912: LD_INT 24
32914: PUSH
32915: LD_INT 22
32917: PUSH
32918: LD_INT 25
32920: PUSH
32921: LD_INT 28
32923: PUSH
32924: LD_INT 29
32926: PUSH
32927: LD_INT 30
32929: PUSH
32930: LD_INT 31
32932: PUSH
32933: LD_INT 37
32935: PUSH
32936: LD_INT 38
32938: PUSH
32939: LD_INT 32
32941: PUSH
32942: LD_INT 27
32944: PUSH
32945: LD_INT 33
32947: PUSH
32948: LD_INT 69
32950: PUSH
32951: LD_INT 39
32953: PUSH
32954: LD_INT 34
32956: PUSH
32957: LD_INT 40
32959: PUSH
32960: LD_INT 71
32962: PUSH
32963: LD_INT 23
32965: PUSH
32966: LD_INT 44
32968: PUSH
32969: LD_INT 48
32971: PUSH
32972: LD_INT 49
32974: PUSH
32975: LD_INT 50
32977: PUSH
32978: LD_INT 51
32980: PUSH
32981: LD_INT 52
32983: PUSH
32984: LD_INT 53
32986: PUSH
32987: LD_INT 54
32989: PUSH
32990: LD_INT 55
32992: PUSH
32993: LD_INT 56
32995: PUSH
32996: LD_INT 57
32998: PUSH
32999: LD_INT 58
33001: PUSH
33002: LD_INT 59
33004: PUSH
33005: LD_INT 63
33007: PUSH
33008: LD_INT 64
33010: PUSH
33011: LD_INT 65
33013: PUSH
33014: LD_INT 82
33016: PUSH
33017: LD_INT 83
33019: PUSH
33020: LD_INT 84
33022: PUSH
33023: LD_INT 85
33025: PUSH
33026: LD_INT 86
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: LIST
33033: LIST
33034: LIST
33035: LIST
33036: LIST
33037: LIST
33038: LIST
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: LIST
33051: LIST
33052: LIST
33053: LIST
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: LIST
33073: LIST
33074: LIST
33075: LIST
33076: LIST
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: LIST
33082: LIST
33083: ST_TO_ADDR
33084: GO 33087
33086: POP
// if state > - 1 and state < 3 then
33087: LD_VAR 0 3
33091: PUSH
33092: LD_INT 1
33094: NEG
33095: GREATER
33096: PUSH
33097: LD_VAR 0 3
33101: PUSH
33102: LD_INT 3
33104: LESS
33105: AND
33106: IFFALSE 33163
// for i in result do
33108: LD_ADDR_VAR 0 5
33112: PUSH
33113: LD_VAR 0 4
33117: PUSH
33118: FOR_IN
33119: IFFALSE 33161
// if GetTech ( i , side ) <> state then
33121: LD_VAR 0 5
33125: PPUSH
33126: LD_VAR 0 1
33130: PPUSH
33131: CALL_OW 321
33135: PUSH
33136: LD_VAR 0 3
33140: NONEQUAL
33141: IFFALSE 33159
// result := result diff i ;
33143: LD_ADDR_VAR 0 4
33147: PUSH
33148: LD_VAR 0 4
33152: PUSH
33153: LD_VAR 0 5
33157: DIFF
33158: ST_TO_ADDR
33159: GO 33118
33161: POP
33162: POP
// end ;
33163: LD_VAR 0 4
33167: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
33168: LD_INT 0
33170: PPUSH
33171: PPUSH
33172: PPUSH
// result := true ;
33173: LD_ADDR_VAR 0 3
33177: PUSH
33178: LD_INT 1
33180: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
33181: LD_ADDR_VAR 0 5
33185: PUSH
33186: LD_VAR 0 2
33190: PPUSH
33191: CALL_OW 480
33195: ST_TO_ADDR
// if not tmp then
33196: LD_VAR 0 5
33200: NOT
33201: IFFALSE 33205
// exit ;
33203: GO 33254
// for i in tmp do
33205: LD_ADDR_VAR 0 4
33209: PUSH
33210: LD_VAR 0 5
33214: PUSH
33215: FOR_IN
33216: IFFALSE 33252
// if GetTech ( i , side ) <> state_researched then
33218: LD_VAR 0 4
33222: PPUSH
33223: LD_VAR 0 1
33227: PPUSH
33228: CALL_OW 321
33232: PUSH
33233: LD_INT 2
33235: NONEQUAL
33236: IFFALSE 33250
// begin result := false ;
33238: LD_ADDR_VAR 0 3
33242: PUSH
33243: LD_INT 0
33245: ST_TO_ADDR
// exit ;
33246: POP
33247: POP
33248: GO 33254
// end ;
33250: GO 33215
33252: POP
33253: POP
// end ;
33254: LD_VAR 0 3
33258: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
33259: LD_INT 0
33261: PPUSH
33262: PPUSH
33263: PPUSH
33264: PPUSH
33265: PPUSH
33266: PPUSH
33267: PPUSH
33268: PPUSH
33269: PPUSH
33270: PPUSH
33271: PPUSH
33272: PPUSH
33273: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
33274: LD_VAR 0 1
33278: NOT
33279: PUSH
33280: LD_VAR 0 1
33284: PPUSH
33285: CALL_OW 257
33289: PUSH
33290: LD_INT 9
33292: NONEQUAL
33293: OR
33294: IFFALSE 33298
// exit ;
33296: GO 33871
// side := GetSide ( unit ) ;
33298: LD_ADDR_VAR 0 9
33302: PUSH
33303: LD_VAR 0 1
33307: PPUSH
33308: CALL_OW 255
33312: ST_TO_ADDR
// tech_space := tech_spacanom ;
33313: LD_ADDR_VAR 0 12
33317: PUSH
33318: LD_INT 29
33320: ST_TO_ADDR
// tech_time := tech_taurad ;
33321: LD_ADDR_VAR 0 13
33325: PUSH
33326: LD_INT 28
33328: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
33329: LD_ADDR_VAR 0 11
33333: PUSH
33334: LD_VAR 0 1
33338: PPUSH
33339: CALL_OW 310
33343: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
33344: LD_VAR 0 11
33348: PPUSH
33349: CALL_OW 247
33353: PUSH
33354: LD_INT 2
33356: EQUAL
33357: IFFALSE 33361
// exit ;
33359: GO 33871
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33361: LD_ADDR_VAR 0 8
33365: PUSH
33366: LD_INT 81
33368: PUSH
33369: LD_VAR 0 9
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: PUSH
33378: LD_INT 3
33380: PUSH
33381: LD_INT 21
33383: PUSH
33384: LD_INT 3
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: PPUSH
33399: CALL_OW 69
33403: ST_TO_ADDR
// if not tmp then
33404: LD_VAR 0 8
33408: NOT
33409: IFFALSE 33413
// exit ;
33411: GO 33871
// if in_unit then
33413: LD_VAR 0 11
33417: IFFALSE 33441
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
33419: LD_ADDR_VAR 0 10
33423: PUSH
33424: LD_VAR 0 8
33428: PPUSH
33429: LD_VAR 0 11
33433: PPUSH
33434: CALL_OW 74
33438: ST_TO_ADDR
33439: GO 33461
// enemy := NearestUnitToUnit ( tmp , unit ) ;
33441: LD_ADDR_VAR 0 10
33445: PUSH
33446: LD_VAR 0 8
33450: PPUSH
33451: LD_VAR 0 1
33455: PPUSH
33456: CALL_OW 74
33460: ST_TO_ADDR
// if not enemy then
33461: LD_VAR 0 10
33465: NOT
33466: IFFALSE 33470
// exit ;
33468: GO 33871
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
33470: LD_VAR 0 11
33474: PUSH
33475: LD_VAR 0 11
33479: PPUSH
33480: LD_VAR 0 10
33484: PPUSH
33485: CALL_OW 296
33489: PUSH
33490: LD_INT 13
33492: GREATER
33493: AND
33494: PUSH
33495: LD_VAR 0 1
33499: PPUSH
33500: LD_VAR 0 10
33504: PPUSH
33505: CALL_OW 296
33509: PUSH
33510: LD_INT 12
33512: GREATER
33513: OR
33514: IFFALSE 33518
// exit ;
33516: GO 33871
// missile := [ 1 ] ;
33518: LD_ADDR_VAR 0 14
33522: PUSH
33523: LD_INT 1
33525: PUSH
33526: EMPTY
33527: LIST
33528: ST_TO_ADDR
// if Researched ( side , tech_space ) then
33529: LD_VAR 0 9
33533: PPUSH
33534: LD_VAR 0 12
33538: PPUSH
33539: CALL_OW 325
33543: IFFALSE 33572
// missile := Insert ( missile , missile + 1 , 2 ) ;
33545: LD_ADDR_VAR 0 14
33549: PUSH
33550: LD_VAR 0 14
33554: PPUSH
33555: LD_VAR 0 14
33559: PUSH
33560: LD_INT 1
33562: PLUS
33563: PPUSH
33564: LD_INT 2
33566: PPUSH
33567: CALL_OW 2
33571: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
33572: LD_VAR 0 9
33576: PPUSH
33577: LD_VAR 0 13
33581: PPUSH
33582: CALL_OW 325
33586: PUSH
33587: LD_VAR 0 10
33591: PPUSH
33592: CALL_OW 255
33596: PPUSH
33597: LD_VAR 0 13
33601: PPUSH
33602: CALL_OW 325
33606: NOT
33607: AND
33608: IFFALSE 33637
// missile := Insert ( missile , missile + 1 , 3 ) ;
33610: LD_ADDR_VAR 0 14
33614: PUSH
33615: LD_VAR 0 14
33619: PPUSH
33620: LD_VAR 0 14
33624: PUSH
33625: LD_INT 1
33627: PLUS
33628: PPUSH
33629: LD_INT 3
33631: PPUSH
33632: CALL_OW 2
33636: ST_TO_ADDR
// if missile < 2 then
33637: LD_VAR 0 14
33641: PUSH
33642: LD_INT 2
33644: LESS
33645: IFFALSE 33649
// exit ;
33647: GO 33871
// x := GetX ( enemy ) ;
33649: LD_ADDR_VAR 0 4
33653: PUSH
33654: LD_VAR 0 10
33658: PPUSH
33659: CALL_OW 250
33663: ST_TO_ADDR
// y := GetY ( enemy ) ;
33664: LD_ADDR_VAR 0 5
33668: PUSH
33669: LD_VAR 0 10
33673: PPUSH
33674: CALL_OW 251
33678: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
33679: LD_ADDR_VAR 0 6
33683: PUSH
33684: LD_VAR 0 4
33688: PUSH
33689: LD_INT 1
33691: NEG
33692: PPUSH
33693: LD_INT 1
33695: PPUSH
33696: CALL_OW 12
33700: PLUS
33701: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
33702: LD_ADDR_VAR 0 7
33706: PUSH
33707: LD_VAR 0 5
33711: PUSH
33712: LD_INT 1
33714: NEG
33715: PPUSH
33716: LD_INT 1
33718: PPUSH
33719: CALL_OW 12
33723: PLUS
33724: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33725: LD_VAR 0 6
33729: PPUSH
33730: LD_VAR 0 7
33734: PPUSH
33735: CALL_OW 488
33739: NOT
33740: IFFALSE 33762
// begin _x := x ;
33742: LD_ADDR_VAR 0 6
33746: PUSH
33747: LD_VAR 0 4
33751: ST_TO_ADDR
// _y := y ;
33752: LD_ADDR_VAR 0 7
33756: PUSH
33757: LD_VAR 0 5
33761: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
33762: LD_ADDR_VAR 0 3
33766: PUSH
33767: LD_INT 1
33769: PPUSH
33770: LD_VAR 0 14
33774: PPUSH
33775: CALL_OW 12
33779: ST_TO_ADDR
// case i of 1 :
33780: LD_VAR 0 3
33784: PUSH
33785: LD_INT 1
33787: DOUBLE
33788: EQUAL
33789: IFTRUE 33793
33791: GO 33810
33793: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
33794: LD_VAR 0 1
33798: PPUSH
33799: LD_VAR 0 10
33803: PPUSH
33804: CALL_OW 115
33808: GO 33871
33810: LD_INT 2
33812: DOUBLE
33813: EQUAL
33814: IFTRUE 33818
33816: GO 33840
33818: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33819: LD_VAR 0 1
33823: PPUSH
33824: LD_VAR 0 6
33828: PPUSH
33829: LD_VAR 0 7
33833: PPUSH
33834: CALL_OW 153
33838: GO 33871
33840: LD_INT 3
33842: DOUBLE
33843: EQUAL
33844: IFTRUE 33848
33846: GO 33870
33848: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33849: LD_VAR 0 1
33853: PPUSH
33854: LD_VAR 0 6
33858: PPUSH
33859: LD_VAR 0 7
33863: PPUSH
33864: CALL_OW 154
33868: GO 33871
33870: POP
// end ;
33871: LD_VAR 0 2
33875: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33876: LD_INT 0
33878: PPUSH
33879: PPUSH
33880: PPUSH
33881: PPUSH
33882: PPUSH
33883: PPUSH
// if not unit or not building then
33884: LD_VAR 0 1
33888: NOT
33889: PUSH
33890: LD_VAR 0 2
33894: NOT
33895: OR
33896: IFFALSE 33900
// exit ;
33898: GO 34058
// x := GetX ( building ) ;
33900: LD_ADDR_VAR 0 5
33904: PUSH
33905: LD_VAR 0 2
33909: PPUSH
33910: CALL_OW 250
33914: ST_TO_ADDR
// y := GetY ( building ) ;
33915: LD_ADDR_VAR 0 6
33919: PUSH
33920: LD_VAR 0 2
33924: PPUSH
33925: CALL_OW 251
33929: ST_TO_ADDR
// for i = 0 to 5 do
33930: LD_ADDR_VAR 0 4
33934: PUSH
33935: DOUBLE
33936: LD_INT 0
33938: DEC
33939: ST_TO_ADDR
33940: LD_INT 5
33942: PUSH
33943: FOR_TO
33944: IFFALSE 34056
// begin _x := ShiftX ( x , i , 3 ) ;
33946: LD_ADDR_VAR 0 7
33950: PUSH
33951: LD_VAR 0 5
33955: PPUSH
33956: LD_VAR 0 4
33960: PPUSH
33961: LD_INT 3
33963: PPUSH
33964: CALL_OW 272
33968: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33969: LD_ADDR_VAR 0 8
33973: PUSH
33974: LD_VAR 0 6
33978: PPUSH
33979: LD_VAR 0 4
33983: PPUSH
33984: LD_INT 3
33986: PPUSH
33987: CALL_OW 273
33991: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33992: LD_VAR 0 7
33996: PPUSH
33997: LD_VAR 0 8
34001: PPUSH
34002: CALL_OW 488
34006: NOT
34007: IFFALSE 34011
// continue ;
34009: GO 33943
// if HexInfo ( _x , _y ) = 0 then
34011: LD_VAR 0 7
34015: PPUSH
34016: LD_VAR 0 8
34020: PPUSH
34021: CALL_OW 428
34025: PUSH
34026: LD_INT 0
34028: EQUAL
34029: IFFALSE 34054
// begin ComMoveXY ( unit , _x , _y ) ;
34031: LD_VAR 0 1
34035: PPUSH
34036: LD_VAR 0 7
34040: PPUSH
34041: LD_VAR 0 8
34045: PPUSH
34046: CALL_OW 111
// exit ;
34050: POP
34051: POP
34052: GO 34058
// end ; end ;
34054: GO 33943
34056: POP
34057: POP
// end ;
34058: LD_VAR 0 3
34062: RET
// export function ScanBase ( side , base_area ) ; begin
34063: LD_INT 0
34065: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
34066: LD_ADDR_VAR 0 3
34070: PUSH
34071: LD_VAR 0 2
34075: PPUSH
34076: LD_INT 81
34078: PUSH
34079: LD_VAR 0 1
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: PPUSH
34088: CALL_OW 70
34092: ST_TO_ADDR
// end ;
34093: LD_VAR 0 3
34097: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
34098: LD_INT 0
34100: PPUSH
34101: PPUSH
34102: PPUSH
34103: PPUSH
// result := false ;
34104: LD_ADDR_VAR 0 2
34108: PUSH
34109: LD_INT 0
34111: ST_TO_ADDR
// side := GetSide ( unit ) ;
34112: LD_ADDR_VAR 0 3
34116: PUSH
34117: LD_VAR 0 1
34121: PPUSH
34122: CALL_OW 255
34126: ST_TO_ADDR
// nat := GetNation ( unit ) ;
34127: LD_ADDR_VAR 0 4
34131: PUSH
34132: LD_VAR 0 1
34136: PPUSH
34137: CALL_OW 248
34141: ST_TO_ADDR
// case nat of 1 :
34142: LD_VAR 0 4
34146: PUSH
34147: LD_INT 1
34149: DOUBLE
34150: EQUAL
34151: IFTRUE 34155
34153: GO 34166
34155: POP
// tech := tech_lassight ; 2 :
34156: LD_ADDR_VAR 0 5
34160: PUSH
34161: LD_INT 12
34163: ST_TO_ADDR
34164: GO 34205
34166: LD_INT 2
34168: DOUBLE
34169: EQUAL
34170: IFTRUE 34174
34172: GO 34185
34174: POP
// tech := tech_mortar ; 3 :
34175: LD_ADDR_VAR 0 5
34179: PUSH
34180: LD_INT 41
34182: ST_TO_ADDR
34183: GO 34205
34185: LD_INT 3
34187: DOUBLE
34188: EQUAL
34189: IFTRUE 34193
34191: GO 34204
34193: POP
// tech := tech_bazooka ; end ;
34194: LD_ADDR_VAR 0 5
34198: PUSH
34199: LD_INT 44
34201: ST_TO_ADDR
34202: GO 34205
34204: POP
// if Researched ( side , tech ) then
34205: LD_VAR 0 3
34209: PPUSH
34210: LD_VAR 0 5
34214: PPUSH
34215: CALL_OW 325
34219: IFFALSE 34246
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
34221: LD_ADDR_VAR 0 2
34225: PUSH
34226: LD_INT 5
34228: PUSH
34229: LD_INT 8
34231: PUSH
34232: LD_INT 9
34234: PUSH
34235: EMPTY
34236: LIST
34237: LIST
34238: LIST
34239: PUSH
34240: LD_VAR 0 4
34244: ARRAY
34245: ST_TO_ADDR
// end ;
34246: LD_VAR 0 2
34250: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
34251: LD_INT 0
34253: PPUSH
34254: PPUSH
34255: PPUSH
// if not mines then
34256: LD_VAR 0 2
34260: NOT
34261: IFFALSE 34265
// exit ;
34263: GO 34409
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34265: LD_ADDR_VAR 0 5
34269: PUSH
34270: LD_INT 81
34272: PUSH
34273: LD_VAR 0 1
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: PUSH
34282: LD_INT 3
34284: PUSH
34285: LD_INT 21
34287: PUSH
34288: LD_INT 3
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: PPUSH
34303: CALL_OW 69
34307: ST_TO_ADDR
// for i in mines do
34308: LD_ADDR_VAR 0 4
34312: PUSH
34313: LD_VAR 0 2
34317: PUSH
34318: FOR_IN
34319: IFFALSE 34407
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
34321: LD_VAR 0 4
34325: PUSH
34326: LD_INT 1
34328: ARRAY
34329: PPUSH
34330: LD_VAR 0 4
34334: PUSH
34335: LD_INT 2
34337: ARRAY
34338: PPUSH
34339: CALL_OW 458
34343: NOT
34344: IFFALSE 34348
// continue ;
34346: GO 34318
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
34348: LD_VAR 0 4
34352: PUSH
34353: LD_INT 1
34355: ARRAY
34356: PPUSH
34357: LD_VAR 0 4
34361: PUSH
34362: LD_INT 2
34364: ARRAY
34365: PPUSH
34366: CALL_OW 428
34370: PUSH
34371: LD_VAR 0 5
34375: IN
34376: IFFALSE 34405
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
34378: LD_VAR 0 4
34382: PUSH
34383: LD_INT 1
34385: ARRAY
34386: PPUSH
34387: LD_VAR 0 4
34391: PUSH
34392: LD_INT 2
34394: ARRAY
34395: PPUSH
34396: LD_VAR 0 1
34400: PPUSH
34401: CALL_OW 456
// end ;
34405: GO 34318
34407: POP
34408: POP
// end ;
34409: LD_VAR 0 3
34413: RET
// export function Count ( array ) ; var i ; begin
34414: LD_INT 0
34416: PPUSH
34417: PPUSH
// result := 0 ;
34418: LD_ADDR_VAR 0 2
34422: PUSH
34423: LD_INT 0
34425: ST_TO_ADDR
// for i in array do
34426: LD_ADDR_VAR 0 3
34430: PUSH
34431: LD_VAR 0 1
34435: PUSH
34436: FOR_IN
34437: IFFALSE 34461
// if i then
34439: LD_VAR 0 3
34443: IFFALSE 34459
// result := result + 1 ;
34445: LD_ADDR_VAR 0 2
34449: PUSH
34450: LD_VAR 0 2
34454: PUSH
34455: LD_INT 1
34457: PLUS
34458: ST_TO_ADDR
34459: GO 34436
34461: POP
34462: POP
// end ;
34463: LD_VAR 0 2
34467: RET
// export function IsEmpty ( building ) ; begin
34468: LD_INT 0
34470: PPUSH
// if not building then
34471: LD_VAR 0 1
34475: NOT
34476: IFFALSE 34480
// exit ;
34478: GO 34523
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
34480: LD_ADDR_VAR 0 2
34484: PUSH
34485: LD_VAR 0 1
34489: PUSH
34490: LD_INT 22
34492: PUSH
34493: LD_VAR 0 1
34497: PPUSH
34498: CALL_OW 255
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: PUSH
34507: LD_INT 58
34509: PUSH
34510: EMPTY
34511: LIST
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: PPUSH
34517: CALL_OW 69
34521: IN
34522: ST_TO_ADDR
// end ;
34523: LD_VAR 0 2
34527: RET
// export function IsNotFull ( building ) ; begin
34528: LD_INT 0
34530: PPUSH
// if not building then
34531: LD_VAR 0 1
34535: NOT
34536: IFFALSE 34540
// exit ;
34538: GO 34559
// result := UnitsInside ( building ) < 6 ;
34540: LD_ADDR_VAR 0 2
34544: PUSH
34545: LD_VAR 0 1
34549: PPUSH
34550: CALL_OW 313
34554: PUSH
34555: LD_INT 6
34557: LESS
34558: ST_TO_ADDR
// end ;
34559: LD_VAR 0 2
34563: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
34564: LD_INT 0
34566: PPUSH
34567: PPUSH
34568: PPUSH
34569: PPUSH
// tmp := [ ] ;
34570: LD_ADDR_VAR 0 3
34574: PUSH
34575: EMPTY
34576: ST_TO_ADDR
// list := [ ] ;
34577: LD_ADDR_VAR 0 5
34581: PUSH
34582: EMPTY
34583: ST_TO_ADDR
// for i = 16 to 25 do
34584: LD_ADDR_VAR 0 4
34588: PUSH
34589: DOUBLE
34590: LD_INT 16
34592: DEC
34593: ST_TO_ADDR
34594: LD_INT 25
34596: PUSH
34597: FOR_TO
34598: IFFALSE 34671
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
34600: LD_ADDR_VAR 0 3
34604: PUSH
34605: LD_VAR 0 3
34609: PUSH
34610: LD_INT 22
34612: PUSH
34613: LD_VAR 0 1
34617: PPUSH
34618: CALL_OW 255
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: PUSH
34627: LD_INT 91
34629: PUSH
34630: LD_VAR 0 1
34634: PUSH
34635: LD_INT 6
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: LIST
34642: PUSH
34643: LD_INT 30
34645: PUSH
34646: LD_VAR 0 4
34650: PUSH
34651: EMPTY
34652: LIST
34653: LIST
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: LIST
34659: PUSH
34660: EMPTY
34661: LIST
34662: PPUSH
34663: CALL_OW 69
34667: ADD
34668: ST_TO_ADDR
34669: GO 34597
34671: POP
34672: POP
// for i = 1 to tmp do
34673: LD_ADDR_VAR 0 4
34677: PUSH
34678: DOUBLE
34679: LD_INT 1
34681: DEC
34682: ST_TO_ADDR
34683: LD_VAR 0 3
34687: PUSH
34688: FOR_TO
34689: IFFALSE 34777
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
34691: LD_ADDR_VAR 0 5
34695: PUSH
34696: LD_VAR 0 5
34700: PUSH
34701: LD_VAR 0 3
34705: PUSH
34706: LD_VAR 0 4
34710: ARRAY
34711: PPUSH
34712: CALL_OW 266
34716: PUSH
34717: LD_VAR 0 3
34721: PUSH
34722: LD_VAR 0 4
34726: ARRAY
34727: PPUSH
34728: CALL_OW 250
34732: PUSH
34733: LD_VAR 0 3
34737: PUSH
34738: LD_VAR 0 4
34742: ARRAY
34743: PPUSH
34744: CALL_OW 251
34748: PUSH
34749: LD_VAR 0 3
34753: PUSH
34754: LD_VAR 0 4
34758: ARRAY
34759: PPUSH
34760: CALL_OW 254
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: PUSH
34771: EMPTY
34772: LIST
34773: ADD
34774: ST_TO_ADDR
34775: GO 34688
34777: POP
34778: POP
// result := list ;
34779: LD_ADDR_VAR 0 2
34783: PUSH
34784: LD_VAR 0 5
34788: ST_TO_ADDR
// end ;
34789: LD_VAR 0 2
34793: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
34794: LD_INT 0
34796: PPUSH
34797: PPUSH
34798: PPUSH
34799: PPUSH
34800: PPUSH
34801: PPUSH
34802: PPUSH
// if not factory then
34803: LD_VAR 0 1
34807: NOT
34808: IFFALSE 34812
// exit ;
34810: GO 35405
// if control = control_apeman then
34812: LD_VAR 0 4
34816: PUSH
34817: LD_INT 5
34819: EQUAL
34820: IFFALSE 34929
// begin tmp := UnitsInside ( factory ) ;
34822: LD_ADDR_VAR 0 8
34826: PUSH
34827: LD_VAR 0 1
34831: PPUSH
34832: CALL_OW 313
34836: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34837: LD_VAR 0 8
34841: PPUSH
34842: LD_INT 25
34844: PUSH
34845: LD_INT 12
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PPUSH
34852: CALL_OW 72
34856: NOT
34857: IFFALSE 34867
// control := control_manual ;
34859: LD_ADDR_VAR 0 4
34863: PUSH
34864: LD_INT 1
34866: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34867: LD_ADDR_VAR 0 8
34871: PUSH
34872: LD_VAR 0 1
34876: PPUSH
34877: CALL 34564 0 1
34881: ST_TO_ADDR
// if tmp then
34882: LD_VAR 0 8
34886: IFFALSE 34929
// begin for i in tmp do
34888: LD_ADDR_VAR 0 7
34892: PUSH
34893: LD_VAR 0 8
34897: PUSH
34898: FOR_IN
34899: IFFALSE 34927
// if i [ 1 ] = b_ext_radio then
34901: LD_VAR 0 7
34905: PUSH
34906: LD_INT 1
34908: ARRAY
34909: PUSH
34910: LD_INT 22
34912: EQUAL
34913: IFFALSE 34925
// begin control := control_remote ;
34915: LD_ADDR_VAR 0 4
34919: PUSH
34920: LD_INT 2
34922: ST_TO_ADDR
// break ;
34923: GO 34927
// end ;
34925: GO 34898
34927: POP
34928: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34929: LD_VAR 0 1
34933: PPUSH
34934: LD_VAR 0 2
34938: PPUSH
34939: LD_VAR 0 3
34943: PPUSH
34944: LD_VAR 0 4
34948: PPUSH
34949: LD_VAR 0 5
34953: PPUSH
34954: CALL_OW 448
34958: IFFALSE 34993
// begin result := [ chassis , engine , control , weapon ] ;
34960: LD_ADDR_VAR 0 6
34964: PUSH
34965: LD_VAR 0 2
34969: PUSH
34970: LD_VAR 0 3
34974: PUSH
34975: LD_VAR 0 4
34979: PUSH
34980: LD_VAR 0 5
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: LIST
34989: LIST
34990: ST_TO_ADDR
// exit ;
34991: GO 35405
// end ; _chassis := AvailableChassisList ( factory ) ;
34993: LD_ADDR_VAR 0 9
34997: PUSH
34998: LD_VAR 0 1
35002: PPUSH
35003: CALL_OW 475
35007: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
35008: LD_ADDR_VAR 0 11
35012: PUSH
35013: LD_VAR 0 1
35017: PPUSH
35018: CALL_OW 476
35022: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
35023: LD_ADDR_VAR 0 12
35027: PUSH
35028: LD_VAR 0 1
35032: PPUSH
35033: CALL_OW 477
35037: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
35038: LD_ADDR_VAR 0 10
35042: PUSH
35043: LD_VAR 0 1
35047: PPUSH
35048: CALL_OW 478
35052: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
35053: LD_VAR 0 9
35057: NOT
35058: PUSH
35059: LD_VAR 0 11
35063: NOT
35064: OR
35065: PUSH
35066: LD_VAR 0 12
35070: NOT
35071: OR
35072: PUSH
35073: LD_VAR 0 10
35077: NOT
35078: OR
35079: IFFALSE 35114
// begin result := [ chassis , engine , control , weapon ] ;
35081: LD_ADDR_VAR 0 6
35085: PUSH
35086: LD_VAR 0 2
35090: PUSH
35091: LD_VAR 0 3
35095: PUSH
35096: LD_VAR 0 4
35100: PUSH
35101: LD_VAR 0 5
35105: PUSH
35106: EMPTY
35107: LIST
35108: LIST
35109: LIST
35110: LIST
35111: ST_TO_ADDR
// exit ;
35112: GO 35405
// end ; if not chassis in _chassis then
35114: LD_VAR 0 2
35118: PUSH
35119: LD_VAR 0 9
35123: IN
35124: NOT
35125: IFFALSE 35151
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
35127: LD_ADDR_VAR 0 2
35131: PUSH
35132: LD_VAR 0 9
35136: PUSH
35137: LD_INT 1
35139: PPUSH
35140: LD_VAR 0 9
35144: PPUSH
35145: CALL_OW 12
35149: ARRAY
35150: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
35151: LD_VAR 0 2
35155: PPUSH
35156: LD_VAR 0 3
35160: PPUSH
35161: CALL 35410 0 2
35165: NOT
35166: IFFALSE 35225
// repeat engine := _engine [ 1 ] ;
35168: LD_ADDR_VAR 0 3
35172: PUSH
35173: LD_VAR 0 11
35177: PUSH
35178: LD_INT 1
35180: ARRAY
35181: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
35182: LD_ADDR_VAR 0 11
35186: PUSH
35187: LD_VAR 0 11
35191: PPUSH
35192: LD_INT 1
35194: PPUSH
35195: CALL_OW 3
35199: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
35200: LD_VAR 0 2
35204: PPUSH
35205: LD_VAR 0 3
35209: PPUSH
35210: CALL 35410 0 2
35214: PUSH
35215: LD_VAR 0 11
35219: PUSH
35220: EMPTY
35221: EQUAL
35222: OR
35223: IFFALSE 35168
// if not control in _control then
35225: LD_VAR 0 4
35229: PUSH
35230: LD_VAR 0 12
35234: IN
35235: NOT
35236: IFFALSE 35262
// control := _control [ rand ( 1 , _control ) ] ;
35238: LD_ADDR_VAR 0 4
35242: PUSH
35243: LD_VAR 0 12
35247: PUSH
35248: LD_INT 1
35250: PPUSH
35251: LD_VAR 0 12
35255: PPUSH
35256: CALL_OW 12
35260: ARRAY
35261: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
35262: LD_VAR 0 2
35266: PPUSH
35267: LD_VAR 0 5
35271: PPUSH
35272: CALL 35630 0 2
35276: NOT
35277: IFFALSE 35336
// repeat weapon := _weapon [ 1 ] ;
35279: LD_ADDR_VAR 0 5
35283: PUSH
35284: LD_VAR 0 10
35288: PUSH
35289: LD_INT 1
35291: ARRAY
35292: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
35293: LD_ADDR_VAR 0 10
35297: PUSH
35298: LD_VAR 0 10
35302: PPUSH
35303: LD_INT 1
35305: PPUSH
35306: CALL_OW 3
35310: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
35311: LD_VAR 0 2
35315: PPUSH
35316: LD_VAR 0 5
35320: PPUSH
35321: CALL 35630 0 2
35325: PUSH
35326: LD_VAR 0 10
35330: PUSH
35331: EMPTY
35332: EQUAL
35333: OR
35334: IFFALSE 35279
// result := [ ] ;
35336: LD_ADDR_VAR 0 6
35340: PUSH
35341: EMPTY
35342: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35343: LD_VAR 0 1
35347: PPUSH
35348: LD_VAR 0 2
35352: PPUSH
35353: LD_VAR 0 3
35357: PPUSH
35358: LD_VAR 0 4
35362: PPUSH
35363: LD_VAR 0 5
35367: PPUSH
35368: CALL_OW 448
35372: IFFALSE 35405
// result := [ chassis , engine , control , weapon ] ;
35374: LD_ADDR_VAR 0 6
35378: PUSH
35379: LD_VAR 0 2
35383: PUSH
35384: LD_VAR 0 3
35388: PUSH
35389: LD_VAR 0 4
35393: PUSH
35394: LD_VAR 0 5
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: LIST
35403: LIST
35404: ST_TO_ADDR
// end ;
35405: LD_VAR 0 6
35409: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
35410: LD_INT 0
35412: PPUSH
// if not chassis or not engine then
35413: LD_VAR 0 1
35417: NOT
35418: PUSH
35419: LD_VAR 0 2
35423: NOT
35424: OR
35425: IFFALSE 35429
// exit ;
35427: GO 35625
// case engine of engine_solar :
35429: LD_VAR 0 2
35433: PUSH
35434: LD_INT 2
35436: DOUBLE
35437: EQUAL
35438: IFTRUE 35442
35440: GO 35480
35442: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
35443: LD_ADDR_VAR 0 3
35447: PUSH
35448: LD_INT 11
35450: PUSH
35451: LD_INT 12
35453: PUSH
35454: LD_INT 13
35456: PUSH
35457: LD_INT 14
35459: PUSH
35460: LD_INT 1
35462: PUSH
35463: LD_INT 2
35465: PUSH
35466: LD_INT 3
35468: PUSH
35469: EMPTY
35470: LIST
35471: LIST
35472: LIST
35473: LIST
35474: LIST
35475: LIST
35476: LIST
35477: ST_TO_ADDR
35478: GO 35609
35480: LD_INT 1
35482: DOUBLE
35483: EQUAL
35484: IFTRUE 35488
35486: GO 35550
35488: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
35489: LD_ADDR_VAR 0 3
35493: PUSH
35494: LD_INT 11
35496: PUSH
35497: LD_INT 12
35499: PUSH
35500: LD_INT 13
35502: PUSH
35503: LD_INT 14
35505: PUSH
35506: LD_INT 1
35508: PUSH
35509: LD_INT 2
35511: PUSH
35512: LD_INT 3
35514: PUSH
35515: LD_INT 4
35517: PUSH
35518: LD_INT 5
35520: PUSH
35521: LD_INT 21
35523: PUSH
35524: LD_INT 23
35526: PUSH
35527: LD_INT 22
35529: PUSH
35530: LD_INT 24
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: LIST
35537: LIST
35538: LIST
35539: LIST
35540: LIST
35541: LIST
35542: LIST
35543: LIST
35544: LIST
35545: LIST
35546: LIST
35547: ST_TO_ADDR
35548: GO 35609
35550: LD_INT 3
35552: DOUBLE
35553: EQUAL
35554: IFTRUE 35558
35556: GO 35608
35558: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35559: LD_ADDR_VAR 0 3
35563: PUSH
35564: LD_INT 13
35566: PUSH
35567: LD_INT 14
35569: PUSH
35570: LD_INT 2
35572: PUSH
35573: LD_INT 3
35575: PUSH
35576: LD_INT 4
35578: PUSH
35579: LD_INT 5
35581: PUSH
35582: LD_INT 21
35584: PUSH
35585: LD_INT 22
35587: PUSH
35588: LD_INT 23
35590: PUSH
35591: LD_INT 24
35593: PUSH
35594: EMPTY
35595: LIST
35596: LIST
35597: LIST
35598: LIST
35599: LIST
35600: LIST
35601: LIST
35602: LIST
35603: LIST
35604: LIST
35605: ST_TO_ADDR
35606: GO 35609
35608: POP
// result := ( chassis in result ) ;
35609: LD_ADDR_VAR 0 3
35613: PUSH
35614: LD_VAR 0 1
35618: PUSH
35619: LD_VAR 0 3
35623: IN
35624: ST_TO_ADDR
// end ;
35625: LD_VAR 0 3
35629: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
35630: LD_INT 0
35632: PPUSH
// if not chassis or not weapon then
35633: LD_VAR 0 1
35637: NOT
35638: PUSH
35639: LD_VAR 0 2
35643: NOT
35644: OR
35645: IFFALSE 35649
// exit ;
35647: GO 36675
// case weapon of us_machine_gun :
35649: LD_VAR 0 2
35653: PUSH
35654: LD_INT 2
35656: DOUBLE
35657: EQUAL
35658: IFTRUE 35662
35660: GO 35692
35662: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
35663: LD_ADDR_VAR 0 3
35667: PUSH
35668: LD_INT 1
35670: PUSH
35671: LD_INT 2
35673: PUSH
35674: LD_INT 3
35676: PUSH
35677: LD_INT 4
35679: PUSH
35680: LD_INT 5
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: LIST
35687: LIST
35688: LIST
35689: ST_TO_ADDR
35690: GO 36659
35692: LD_INT 3
35694: DOUBLE
35695: EQUAL
35696: IFTRUE 35700
35698: GO 35730
35700: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
35701: LD_ADDR_VAR 0 3
35705: PUSH
35706: LD_INT 1
35708: PUSH
35709: LD_INT 2
35711: PUSH
35712: LD_INT 3
35714: PUSH
35715: LD_INT 4
35717: PUSH
35718: LD_INT 5
35720: PUSH
35721: EMPTY
35722: LIST
35723: LIST
35724: LIST
35725: LIST
35726: LIST
35727: ST_TO_ADDR
35728: GO 36659
35730: LD_INT 11
35732: DOUBLE
35733: EQUAL
35734: IFTRUE 35738
35736: GO 35768
35738: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
35739: LD_ADDR_VAR 0 3
35743: PUSH
35744: LD_INT 1
35746: PUSH
35747: LD_INT 2
35749: PUSH
35750: LD_INT 3
35752: PUSH
35753: LD_INT 4
35755: PUSH
35756: LD_INT 5
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: LIST
35763: LIST
35764: LIST
35765: ST_TO_ADDR
35766: GO 36659
35768: LD_INT 4
35770: DOUBLE
35771: EQUAL
35772: IFTRUE 35776
35774: GO 35802
35776: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
35777: LD_ADDR_VAR 0 3
35781: PUSH
35782: LD_INT 2
35784: PUSH
35785: LD_INT 3
35787: PUSH
35788: LD_INT 4
35790: PUSH
35791: LD_INT 5
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: LIST
35798: LIST
35799: ST_TO_ADDR
35800: GO 36659
35802: LD_INT 5
35804: DOUBLE
35805: EQUAL
35806: IFTRUE 35810
35808: GO 35836
35810: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35811: LD_ADDR_VAR 0 3
35815: PUSH
35816: LD_INT 2
35818: PUSH
35819: LD_INT 3
35821: PUSH
35822: LD_INT 4
35824: PUSH
35825: LD_INT 5
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: LIST
35832: LIST
35833: ST_TO_ADDR
35834: GO 36659
35836: LD_INT 9
35838: DOUBLE
35839: EQUAL
35840: IFTRUE 35844
35842: GO 35870
35844: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35845: LD_ADDR_VAR 0 3
35849: PUSH
35850: LD_INT 2
35852: PUSH
35853: LD_INT 3
35855: PUSH
35856: LD_INT 4
35858: PUSH
35859: LD_INT 5
35861: PUSH
35862: EMPTY
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: ST_TO_ADDR
35868: GO 36659
35870: LD_INT 7
35872: DOUBLE
35873: EQUAL
35874: IFTRUE 35878
35876: GO 35904
35878: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35879: LD_ADDR_VAR 0 3
35883: PUSH
35884: LD_INT 2
35886: PUSH
35887: LD_INT 3
35889: PUSH
35890: LD_INT 4
35892: PUSH
35893: LD_INT 5
35895: PUSH
35896: EMPTY
35897: LIST
35898: LIST
35899: LIST
35900: LIST
35901: ST_TO_ADDR
35902: GO 36659
35904: LD_INT 12
35906: DOUBLE
35907: EQUAL
35908: IFTRUE 35912
35910: GO 35938
35912: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35913: LD_ADDR_VAR 0 3
35917: PUSH
35918: LD_INT 2
35920: PUSH
35921: LD_INT 3
35923: PUSH
35924: LD_INT 4
35926: PUSH
35927: LD_INT 5
35929: PUSH
35930: EMPTY
35931: LIST
35932: LIST
35933: LIST
35934: LIST
35935: ST_TO_ADDR
35936: GO 36659
35938: LD_INT 13
35940: DOUBLE
35941: EQUAL
35942: IFTRUE 35946
35944: GO 35972
35946: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35947: LD_ADDR_VAR 0 3
35951: PUSH
35952: LD_INT 2
35954: PUSH
35955: LD_INT 3
35957: PUSH
35958: LD_INT 4
35960: PUSH
35961: LD_INT 5
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: LIST
35968: LIST
35969: ST_TO_ADDR
35970: GO 36659
35972: LD_INT 14
35974: DOUBLE
35975: EQUAL
35976: IFTRUE 35980
35978: GO 35998
35980: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35981: LD_ADDR_VAR 0 3
35985: PUSH
35986: LD_INT 4
35988: PUSH
35989: LD_INT 5
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: ST_TO_ADDR
35996: GO 36659
35998: LD_INT 6
36000: DOUBLE
36001: EQUAL
36002: IFTRUE 36006
36004: GO 36024
36006: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
36007: LD_ADDR_VAR 0 3
36011: PUSH
36012: LD_INT 4
36014: PUSH
36015: LD_INT 5
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: ST_TO_ADDR
36022: GO 36659
36024: LD_INT 10
36026: DOUBLE
36027: EQUAL
36028: IFTRUE 36032
36030: GO 36050
36032: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
36033: LD_ADDR_VAR 0 3
36037: PUSH
36038: LD_INT 4
36040: PUSH
36041: LD_INT 5
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: ST_TO_ADDR
36048: GO 36659
36050: LD_INT 22
36052: DOUBLE
36053: EQUAL
36054: IFTRUE 36058
36056: GO 36084
36058: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
36059: LD_ADDR_VAR 0 3
36063: PUSH
36064: LD_INT 11
36066: PUSH
36067: LD_INT 12
36069: PUSH
36070: LD_INT 13
36072: PUSH
36073: LD_INT 14
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: LIST
36080: LIST
36081: ST_TO_ADDR
36082: GO 36659
36084: LD_INT 23
36086: DOUBLE
36087: EQUAL
36088: IFTRUE 36092
36090: GO 36118
36092: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
36093: LD_ADDR_VAR 0 3
36097: PUSH
36098: LD_INT 11
36100: PUSH
36101: LD_INT 12
36103: PUSH
36104: LD_INT 13
36106: PUSH
36107: LD_INT 14
36109: PUSH
36110: EMPTY
36111: LIST
36112: LIST
36113: LIST
36114: LIST
36115: ST_TO_ADDR
36116: GO 36659
36118: LD_INT 24
36120: DOUBLE
36121: EQUAL
36122: IFTRUE 36126
36124: GO 36152
36126: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
36127: LD_ADDR_VAR 0 3
36131: PUSH
36132: LD_INT 11
36134: PUSH
36135: LD_INT 12
36137: PUSH
36138: LD_INT 13
36140: PUSH
36141: LD_INT 14
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: LIST
36148: LIST
36149: ST_TO_ADDR
36150: GO 36659
36152: LD_INT 30
36154: DOUBLE
36155: EQUAL
36156: IFTRUE 36160
36158: GO 36186
36160: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
36161: LD_ADDR_VAR 0 3
36165: PUSH
36166: LD_INT 11
36168: PUSH
36169: LD_INT 12
36171: PUSH
36172: LD_INT 13
36174: PUSH
36175: LD_INT 14
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: LIST
36182: LIST
36183: ST_TO_ADDR
36184: GO 36659
36186: LD_INT 25
36188: DOUBLE
36189: EQUAL
36190: IFTRUE 36194
36192: GO 36212
36194: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
36195: LD_ADDR_VAR 0 3
36199: PUSH
36200: LD_INT 13
36202: PUSH
36203: LD_INT 14
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: ST_TO_ADDR
36210: GO 36659
36212: LD_INT 27
36214: DOUBLE
36215: EQUAL
36216: IFTRUE 36220
36218: GO 36238
36220: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
36221: LD_ADDR_VAR 0 3
36225: PUSH
36226: LD_INT 13
36228: PUSH
36229: LD_INT 14
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: ST_TO_ADDR
36236: GO 36659
36238: LD_INT 28
36240: DOUBLE
36241: EQUAL
36242: IFTRUE 36246
36244: GO 36264
36246: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
36247: LD_ADDR_VAR 0 3
36251: PUSH
36252: LD_INT 13
36254: PUSH
36255: LD_INT 14
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: ST_TO_ADDR
36262: GO 36659
36264: LD_INT 29
36266: DOUBLE
36267: EQUAL
36268: IFTRUE 36272
36270: GO 36290
36272: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
36273: LD_ADDR_VAR 0 3
36277: PUSH
36278: LD_INT 13
36280: PUSH
36281: LD_INT 14
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: ST_TO_ADDR
36288: GO 36659
36290: LD_INT 31
36292: DOUBLE
36293: EQUAL
36294: IFTRUE 36298
36296: GO 36316
36298: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
36299: LD_ADDR_VAR 0 3
36303: PUSH
36304: LD_INT 13
36306: PUSH
36307: LD_INT 14
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: ST_TO_ADDR
36314: GO 36659
36316: LD_INT 26
36318: DOUBLE
36319: EQUAL
36320: IFTRUE 36324
36322: GO 36342
36324: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
36325: LD_ADDR_VAR 0 3
36329: PUSH
36330: LD_INT 13
36332: PUSH
36333: LD_INT 14
36335: PUSH
36336: EMPTY
36337: LIST
36338: LIST
36339: ST_TO_ADDR
36340: GO 36659
36342: LD_INT 42
36344: DOUBLE
36345: EQUAL
36346: IFTRUE 36350
36348: GO 36376
36350: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
36351: LD_ADDR_VAR 0 3
36355: PUSH
36356: LD_INT 21
36358: PUSH
36359: LD_INT 22
36361: PUSH
36362: LD_INT 23
36364: PUSH
36365: LD_INT 24
36367: PUSH
36368: EMPTY
36369: LIST
36370: LIST
36371: LIST
36372: LIST
36373: ST_TO_ADDR
36374: GO 36659
36376: LD_INT 43
36378: DOUBLE
36379: EQUAL
36380: IFTRUE 36384
36382: GO 36410
36384: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
36385: LD_ADDR_VAR 0 3
36389: PUSH
36390: LD_INT 21
36392: PUSH
36393: LD_INT 22
36395: PUSH
36396: LD_INT 23
36398: PUSH
36399: LD_INT 24
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: ST_TO_ADDR
36408: GO 36659
36410: LD_INT 44
36412: DOUBLE
36413: EQUAL
36414: IFTRUE 36418
36416: GO 36444
36418: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
36419: LD_ADDR_VAR 0 3
36423: PUSH
36424: LD_INT 21
36426: PUSH
36427: LD_INT 22
36429: PUSH
36430: LD_INT 23
36432: PUSH
36433: LD_INT 24
36435: PUSH
36436: EMPTY
36437: LIST
36438: LIST
36439: LIST
36440: LIST
36441: ST_TO_ADDR
36442: GO 36659
36444: LD_INT 45
36446: DOUBLE
36447: EQUAL
36448: IFTRUE 36452
36450: GO 36478
36452: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
36453: LD_ADDR_VAR 0 3
36457: PUSH
36458: LD_INT 21
36460: PUSH
36461: LD_INT 22
36463: PUSH
36464: LD_INT 23
36466: PUSH
36467: LD_INT 24
36469: PUSH
36470: EMPTY
36471: LIST
36472: LIST
36473: LIST
36474: LIST
36475: ST_TO_ADDR
36476: GO 36659
36478: LD_INT 49
36480: DOUBLE
36481: EQUAL
36482: IFTRUE 36486
36484: GO 36512
36486: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
36487: LD_ADDR_VAR 0 3
36491: PUSH
36492: LD_INT 21
36494: PUSH
36495: LD_INT 22
36497: PUSH
36498: LD_INT 23
36500: PUSH
36501: LD_INT 24
36503: PUSH
36504: EMPTY
36505: LIST
36506: LIST
36507: LIST
36508: LIST
36509: ST_TO_ADDR
36510: GO 36659
36512: LD_INT 51
36514: DOUBLE
36515: EQUAL
36516: IFTRUE 36520
36518: GO 36546
36520: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
36521: LD_ADDR_VAR 0 3
36525: PUSH
36526: LD_INT 21
36528: PUSH
36529: LD_INT 22
36531: PUSH
36532: LD_INT 23
36534: PUSH
36535: LD_INT 24
36537: PUSH
36538: EMPTY
36539: LIST
36540: LIST
36541: LIST
36542: LIST
36543: ST_TO_ADDR
36544: GO 36659
36546: LD_INT 52
36548: DOUBLE
36549: EQUAL
36550: IFTRUE 36554
36552: GO 36580
36554: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
36555: LD_ADDR_VAR 0 3
36559: PUSH
36560: LD_INT 21
36562: PUSH
36563: LD_INT 22
36565: PUSH
36566: LD_INT 23
36568: PUSH
36569: LD_INT 24
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: LIST
36576: LIST
36577: ST_TO_ADDR
36578: GO 36659
36580: LD_INT 53
36582: DOUBLE
36583: EQUAL
36584: IFTRUE 36588
36586: GO 36606
36588: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
36589: LD_ADDR_VAR 0 3
36593: PUSH
36594: LD_INT 23
36596: PUSH
36597: LD_INT 24
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: ST_TO_ADDR
36604: GO 36659
36606: LD_INT 46
36608: DOUBLE
36609: EQUAL
36610: IFTRUE 36614
36612: GO 36632
36614: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
36615: LD_ADDR_VAR 0 3
36619: PUSH
36620: LD_INT 23
36622: PUSH
36623: LD_INT 24
36625: PUSH
36626: EMPTY
36627: LIST
36628: LIST
36629: ST_TO_ADDR
36630: GO 36659
36632: LD_INT 47
36634: DOUBLE
36635: EQUAL
36636: IFTRUE 36640
36638: GO 36658
36640: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36641: LD_ADDR_VAR 0 3
36645: PUSH
36646: LD_INT 23
36648: PUSH
36649: LD_INT 24
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: ST_TO_ADDR
36656: GO 36659
36658: POP
// result := ( chassis in result ) ;
36659: LD_ADDR_VAR 0 3
36663: PUSH
36664: LD_VAR 0 1
36668: PUSH
36669: LD_VAR 0 3
36673: IN
36674: ST_TO_ADDR
// end ;
36675: LD_VAR 0 3
36679: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
36680: LD_INT 0
36682: PPUSH
36683: PPUSH
36684: PPUSH
36685: PPUSH
36686: PPUSH
36687: PPUSH
36688: PPUSH
// result := array ;
36689: LD_ADDR_VAR 0 5
36693: PUSH
36694: LD_VAR 0 1
36698: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
36699: LD_VAR 0 1
36703: NOT
36704: PUSH
36705: LD_VAR 0 2
36709: NOT
36710: OR
36711: PUSH
36712: LD_VAR 0 3
36716: NOT
36717: OR
36718: PUSH
36719: LD_VAR 0 2
36723: PUSH
36724: LD_VAR 0 1
36728: GREATER
36729: OR
36730: PUSH
36731: LD_VAR 0 3
36735: PUSH
36736: LD_VAR 0 1
36740: GREATER
36741: OR
36742: IFFALSE 36746
// exit ;
36744: GO 37042
// if direction then
36746: LD_VAR 0 4
36750: IFFALSE 36814
// begin d := 1 ;
36752: LD_ADDR_VAR 0 9
36756: PUSH
36757: LD_INT 1
36759: ST_TO_ADDR
// if i_from > i_to then
36760: LD_VAR 0 2
36764: PUSH
36765: LD_VAR 0 3
36769: GREATER
36770: IFFALSE 36796
// length := ( array - i_from ) + i_to else
36772: LD_ADDR_VAR 0 11
36776: PUSH
36777: LD_VAR 0 1
36781: PUSH
36782: LD_VAR 0 2
36786: MINUS
36787: PUSH
36788: LD_VAR 0 3
36792: PLUS
36793: ST_TO_ADDR
36794: GO 36812
// length := i_to - i_from ;
36796: LD_ADDR_VAR 0 11
36800: PUSH
36801: LD_VAR 0 3
36805: PUSH
36806: LD_VAR 0 2
36810: MINUS
36811: ST_TO_ADDR
// end else
36812: GO 36875
// begin d := - 1 ;
36814: LD_ADDR_VAR 0 9
36818: PUSH
36819: LD_INT 1
36821: NEG
36822: ST_TO_ADDR
// if i_from > i_to then
36823: LD_VAR 0 2
36827: PUSH
36828: LD_VAR 0 3
36832: GREATER
36833: IFFALSE 36853
// length := i_from - i_to else
36835: LD_ADDR_VAR 0 11
36839: PUSH
36840: LD_VAR 0 2
36844: PUSH
36845: LD_VAR 0 3
36849: MINUS
36850: ST_TO_ADDR
36851: GO 36875
// length := ( array - i_to ) + i_from ;
36853: LD_ADDR_VAR 0 11
36857: PUSH
36858: LD_VAR 0 1
36862: PUSH
36863: LD_VAR 0 3
36867: MINUS
36868: PUSH
36869: LD_VAR 0 2
36873: PLUS
36874: ST_TO_ADDR
// end ; if not length then
36875: LD_VAR 0 11
36879: NOT
36880: IFFALSE 36884
// exit ;
36882: GO 37042
// tmp := array ;
36884: LD_ADDR_VAR 0 10
36888: PUSH
36889: LD_VAR 0 1
36893: ST_TO_ADDR
// for i = 1 to length do
36894: LD_ADDR_VAR 0 6
36898: PUSH
36899: DOUBLE
36900: LD_INT 1
36902: DEC
36903: ST_TO_ADDR
36904: LD_VAR 0 11
36908: PUSH
36909: FOR_TO
36910: IFFALSE 37030
// begin for j = 1 to array do
36912: LD_ADDR_VAR 0 7
36916: PUSH
36917: DOUBLE
36918: LD_INT 1
36920: DEC
36921: ST_TO_ADDR
36922: LD_VAR 0 1
36926: PUSH
36927: FOR_TO
36928: IFFALSE 37016
// begin k := j + d ;
36930: LD_ADDR_VAR 0 8
36934: PUSH
36935: LD_VAR 0 7
36939: PUSH
36940: LD_VAR 0 9
36944: PLUS
36945: ST_TO_ADDR
// if k > array then
36946: LD_VAR 0 8
36950: PUSH
36951: LD_VAR 0 1
36955: GREATER
36956: IFFALSE 36966
// k := 1 ;
36958: LD_ADDR_VAR 0 8
36962: PUSH
36963: LD_INT 1
36965: ST_TO_ADDR
// if not k then
36966: LD_VAR 0 8
36970: NOT
36971: IFFALSE 36983
// k := array ;
36973: LD_ADDR_VAR 0 8
36977: PUSH
36978: LD_VAR 0 1
36982: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36983: LD_ADDR_VAR 0 10
36987: PUSH
36988: LD_VAR 0 10
36992: PPUSH
36993: LD_VAR 0 8
36997: PPUSH
36998: LD_VAR 0 1
37002: PUSH
37003: LD_VAR 0 7
37007: ARRAY
37008: PPUSH
37009: CALL_OW 1
37013: ST_TO_ADDR
// end ;
37014: GO 36927
37016: POP
37017: POP
// array := tmp ;
37018: LD_ADDR_VAR 0 1
37022: PUSH
37023: LD_VAR 0 10
37027: ST_TO_ADDR
// end ;
37028: GO 36909
37030: POP
37031: POP
// result := array ;
37032: LD_ADDR_VAR 0 5
37036: PUSH
37037: LD_VAR 0 1
37041: ST_TO_ADDR
// end ;
37042: LD_VAR 0 5
37046: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
37047: LD_INT 0
37049: PPUSH
37050: PPUSH
// result := 0 ;
37051: LD_ADDR_VAR 0 3
37055: PUSH
37056: LD_INT 0
37058: ST_TO_ADDR
// if not array or not value in array then
37059: LD_VAR 0 1
37063: NOT
37064: PUSH
37065: LD_VAR 0 2
37069: PUSH
37070: LD_VAR 0 1
37074: IN
37075: NOT
37076: OR
37077: IFFALSE 37081
// exit ;
37079: GO 37135
// for i = 1 to array do
37081: LD_ADDR_VAR 0 4
37085: PUSH
37086: DOUBLE
37087: LD_INT 1
37089: DEC
37090: ST_TO_ADDR
37091: LD_VAR 0 1
37095: PUSH
37096: FOR_TO
37097: IFFALSE 37133
// if value = array [ i ] then
37099: LD_VAR 0 2
37103: PUSH
37104: LD_VAR 0 1
37108: PUSH
37109: LD_VAR 0 4
37113: ARRAY
37114: EQUAL
37115: IFFALSE 37131
// begin result := i ;
37117: LD_ADDR_VAR 0 3
37121: PUSH
37122: LD_VAR 0 4
37126: ST_TO_ADDR
// exit ;
37127: POP
37128: POP
37129: GO 37135
// end ;
37131: GO 37096
37133: POP
37134: POP
// end ;
37135: LD_VAR 0 3
37139: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
37140: LD_INT 0
37142: PPUSH
// vc_chassis := chassis ;
37143: LD_ADDR_OWVAR 37
37147: PUSH
37148: LD_VAR 0 1
37152: ST_TO_ADDR
// vc_engine := engine ;
37153: LD_ADDR_OWVAR 39
37157: PUSH
37158: LD_VAR 0 2
37162: ST_TO_ADDR
// vc_control := control ;
37163: LD_ADDR_OWVAR 38
37167: PUSH
37168: LD_VAR 0 3
37172: ST_TO_ADDR
// vc_weapon := weapon ;
37173: LD_ADDR_OWVAR 40
37177: PUSH
37178: LD_VAR 0 4
37182: ST_TO_ADDR
// vc_fuel_battery := fuel ;
37183: LD_ADDR_OWVAR 41
37187: PUSH
37188: LD_VAR 0 5
37192: ST_TO_ADDR
// end ;
37193: LD_VAR 0 6
37197: RET
// export function WantPlant ( unit ) ; var task ; begin
37198: LD_INT 0
37200: PPUSH
37201: PPUSH
// result := false ;
37202: LD_ADDR_VAR 0 2
37206: PUSH
37207: LD_INT 0
37209: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
37210: LD_ADDR_VAR 0 3
37214: PUSH
37215: LD_VAR 0 1
37219: PPUSH
37220: CALL_OW 437
37224: ST_TO_ADDR
// if task then
37225: LD_VAR 0 3
37229: IFFALSE 37257
// if task [ 1 ] [ 1 ] = p then
37231: LD_VAR 0 3
37235: PUSH
37236: LD_INT 1
37238: ARRAY
37239: PUSH
37240: LD_INT 1
37242: ARRAY
37243: PUSH
37244: LD_STRING p
37246: EQUAL
37247: IFFALSE 37257
// result := true ;
37249: LD_ADDR_VAR 0 2
37253: PUSH
37254: LD_INT 1
37256: ST_TO_ADDR
// end ;
37257: LD_VAR 0 2
37261: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
37262: LD_INT 0
37264: PPUSH
37265: PPUSH
37266: PPUSH
37267: PPUSH
// if pos < 1 then
37268: LD_VAR 0 2
37272: PUSH
37273: LD_INT 1
37275: LESS
37276: IFFALSE 37280
// exit ;
37278: GO 37583
// if pos = 1 then
37280: LD_VAR 0 2
37284: PUSH
37285: LD_INT 1
37287: EQUAL
37288: IFFALSE 37321
// result := Replace ( arr , pos [ 1 ] , value ) else
37290: LD_ADDR_VAR 0 4
37294: PUSH
37295: LD_VAR 0 1
37299: PPUSH
37300: LD_VAR 0 2
37304: PUSH
37305: LD_INT 1
37307: ARRAY
37308: PPUSH
37309: LD_VAR 0 3
37313: PPUSH
37314: CALL_OW 1
37318: ST_TO_ADDR
37319: GO 37583
// begin tmp := arr ;
37321: LD_ADDR_VAR 0 6
37325: PUSH
37326: LD_VAR 0 1
37330: ST_TO_ADDR
// s_arr := [ tmp ] ;
37331: LD_ADDR_VAR 0 7
37335: PUSH
37336: LD_VAR 0 6
37340: PUSH
37341: EMPTY
37342: LIST
37343: ST_TO_ADDR
// for i = 1 to pos - 1 do
37344: LD_ADDR_VAR 0 5
37348: PUSH
37349: DOUBLE
37350: LD_INT 1
37352: DEC
37353: ST_TO_ADDR
37354: LD_VAR 0 2
37358: PUSH
37359: LD_INT 1
37361: MINUS
37362: PUSH
37363: FOR_TO
37364: IFFALSE 37409
// begin tmp := tmp [ pos [ i ] ] ;
37366: LD_ADDR_VAR 0 6
37370: PUSH
37371: LD_VAR 0 6
37375: PUSH
37376: LD_VAR 0 2
37380: PUSH
37381: LD_VAR 0 5
37385: ARRAY
37386: ARRAY
37387: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
37388: LD_ADDR_VAR 0 7
37392: PUSH
37393: LD_VAR 0 7
37397: PUSH
37398: LD_VAR 0 6
37402: PUSH
37403: EMPTY
37404: LIST
37405: ADD
37406: ST_TO_ADDR
// end ;
37407: GO 37363
37409: POP
37410: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
37411: LD_ADDR_VAR 0 6
37415: PUSH
37416: LD_VAR 0 6
37420: PPUSH
37421: LD_VAR 0 2
37425: PUSH
37426: LD_VAR 0 2
37430: ARRAY
37431: PPUSH
37432: LD_VAR 0 3
37436: PPUSH
37437: CALL_OW 1
37441: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
37442: LD_ADDR_VAR 0 7
37446: PUSH
37447: LD_VAR 0 7
37451: PPUSH
37452: LD_VAR 0 7
37456: PPUSH
37457: LD_VAR 0 6
37461: PPUSH
37462: CALL_OW 1
37466: ST_TO_ADDR
// for i = s_arr downto 2 do
37467: LD_ADDR_VAR 0 5
37471: PUSH
37472: DOUBLE
37473: LD_VAR 0 7
37477: INC
37478: ST_TO_ADDR
37479: LD_INT 2
37481: PUSH
37482: FOR_DOWNTO
37483: IFFALSE 37567
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
37485: LD_ADDR_VAR 0 6
37489: PUSH
37490: LD_VAR 0 7
37494: PUSH
37495: LD_VAR 0 5
37499: PUSH
37500: LD_INT 1
37502: MINUS
37503: ARRAY
37504: PPUSH
37505: LD_VAR 0 2
37509: PUSH
37510: LD_VAR 0 5
37514: PUSH
37515: LD_INT 1
37517: MINUS
37518: ARRAY
37519: PPUSH
37520: LD_VAR 0 7
37524: PUSH
37525: LD_VAR 0 5
37529: ARRAY
37530: PPUSH
37531: CALL_OW 1
37535: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
37536: LD_ADDR_VAR 0 7
37540: PUSH
37541: LD_VAR 0 7
37545: PPUSH
37546: LD_VAR 0 5
37550: PUSH
37551: LD_INT 1
37553: MINUS
37554: PPUSH
37555: LD_VAR 0 6
37559: PPUSH
37560: CALL_OW 1
37564: ST_TO_ADDR
// end ;
37565: GO 37482
37567: POP
37568: POP
// result := s_arr [ 1 ] ;
37569: LD_ADDR_VAR 0 4
37573: PUSH
37574: LD_VAR 0 7
37578: PUSH
37579: LD_INT 1
37581: ARRAY
37582: ST_TO_ADDR
// end ; end ;
37583: LD_VAR 0 4
37587: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
37588: LD_INT 0
37590: PPUSH
37591: PPUSH
// if not list then
37592: LD_VAR 0 1
37596: NOT
37597: IFFALSE 37601
// exit ;
37599: GO 37692
// i := list [ pos1 ] ;
37601: LD_ADDR_VAR 0 5
37605: PUSH
37606: LD_VAR 0 1
37610: PUSH
37611: LD_VAR 0 2
37615: ARRAY
37616: ST_TO_ADDR
// if not i then
37617: LD_VAR 0 5
37621: NOT
37622: IFFALSE 37626
// exit ;
37624: GO 37692
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
37626: LD_ADDR_VAR 0 1
37630: PUSH
37631: LD_VAR 0 1
37635: PPUSH
37636: LD_VAR 0 2
37640: PPUSH
37641: LD_VAR 0 1
37645: PUSH
37646: LD_VAR 0 3
37650: ARRAY
37651: PPUSH
37652: CALL_OW 1
37656: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
37657: LD_ADDR_VAR 0 1
37661: PUSH
37662: LD_VAR 0 1
37666: PPUSH
37667: LD_VAR 0 3
37671: PPUSH
37672: LD_VAR 0 5
37676: PPUSH
37677: CALL_OW 1
37681: ST_TO_ADDR
// result := list ;
37682: LD_ADDR_VAR 0 4
37686: PUSH
37687: LD_VAR 0 1
37691: ST_TO_ADDR
// end ;
37692: LD_VAR 0 4
37696: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
37697: LD_INT 0
37699: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
37700: LD_ADDR_VAR 0 5
37704: PUSH
37705: LD_VAR 0 1
37709: PPUSH
37710: CALL_OW 250
37714: PPUSH
37715: LD_VAR 0 1
37719: PPUSH
37720: CALL_OW 251
37724: PPUSH
37725: LD_VAR 0 2
37729: PPUSH
37730: LD_VAR 0 3
37734: PPUSH
37735: LD_VAR 0 4
37739: PPUSH
37740: CALL 37750 0 5
37744: ST_TO_ADDR
// end ;
37745: LD_VAR 0 5
37749: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37750: LD_INT 0
37752: PPUSH
37753: PPUSH
37754: PPUSH
37755: PPUSH
// if not list then
37756: LD_VAR 0 3
37760: NOT
37761: IFFALSE 37765
// exit ;
37763: GO 38153
// result := [ ] ;
37765: LD_ADDR_VAR 0 6
37769: PUSH
37770: EMPTY
37771: ST_TO_ADDR
// for i in list do
37772: LD_ADDR_VAR 0 7
37776: PUSH
37777: LD_VAR 0 3
37781: PUSH
37782: FOR_IN
37783: IFFALSE 37985
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37785: LD_ADDR_VAR 0 9
37789: PUSH
37790: LD_VAR 0 7
37794: PPUSH
37795: LD_VAR 0 1
37799: PPUSH
37800: LD_VAR 0 2
37804: PPUSH
37805: CALL_OW 297
37809: ST_TO_ADDR
// if not result then
37810: LD_VAR 0 6
37814: NOT
37815: IFFALSE 37841
// result := [ [ i , tmp ] ] else
37817: LD_ADDR_VAR 0 6
37821: PUSH
37822: LD_VAR 0 7
37826: PUSH
37827: LD_VAR 0 9
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: PUSH
37836: EMPTY
37837: LIST
37838: ST_TO_ADDR
37839: GO 37983
// begin if result [ result ] [ 2 ] < tmp then
37841: LD_VAR 0 6
37845: PUSH
37846: LD_VAR 0 6
37850: ARRAY
37851: PUSH
37852: LD_INT 2
37854: ARRAY
37855: PUSH
37856: LD_VAR 0 9
37860: LESS
37861: IFFALSE 37903
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37863: LD_ADDR_VAR 0 6
37867: PUSH
37868: LD_VAR 0 6
37872: PPUSH
37873: LD_VAR 0 6
37877: PUSH
37878: LD_INT 1
37880: PLUS
37881: PPUSH
37882: LD_VAR 0 7
37886: PUSH
37887: LD_VAR 0 9
37891: PUSH
37892: EMPTY
37893: LIST
37894: LIST
37895: PPUSH
37896: CALL_OW 2
37900: ST_TO_ADDR
37901: GO 37983
// for j = 1 to result do
37903: LD_ADDR_VAR 0 8
37907: PUSH
37908: DOUBLE
37909: LD_INT 1
37911: DEC
37912: ST_TO_ADDR
37913: LD_VAR 0 6
37917: PUSH
37918: FOR_TO
37919: IFFALSE 37981
// begin if tmp < result [ j ] [ 2 ] then
37921: LD_VAR 0 9
37925: PUSH
37926: LD_VAR 0 6
37930: PUSH
37931: LD_VAR 0 8
37935: ARRAY
37936: PUSH
37937: LD_INT 2
37939: ARRAY
37940: LESS
37941: IFFALSE 37979
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37943: LD_ADDR_VAR 0 6
37947: PUSH
37948: LD_VAR 0 6
37952: PPUSH
37953: LD_VAR 0 8
37957: PPUSH
37958: LD_VAR 0 7
37962: PUSH
37963: LD_VAR 0 9
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PPUSH
37972: CALL_OW 2
37976: ST_TO_ADDR
// break ;
37977: GO 37981
// end ; end ;
37979: GO 37918
37981: POP
37982: POP
// end ; end ;
37983: GO 37782
37985: POP
37986: POP
// if result and not asc then
37987: LD_VAR 0 6
37991: PUSH
37992: LD_VAR 0 4
37996: NOT
37997: AND
37998: IFFALSE 38073
// begin tmp := result ;
38000: LD_ADDR_VAR 0 9
38004: PUSH
38005: LD_VAR 0 6
38009: ST_TO_ADDR
// for i = tmp downto 1 do
38010: LD_ADDR_VAR 0 7
38014: PUSH
38015: DOUBLE
38016: LD_VAR 0 9
38020: INC
38021: ST_TO_ADDR
38022: LD_INT 1
38024: PUSH
38025: FOR_DOWNTO
38026: IFFALSE 38071
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
38028: LD_ADDR_VAR 0 6
38032: PUSH
38033: LD_VAR 0 6
38037: PPUSH
38038: LD_VAR 0 9
38042: PUSH
38043: LD_VAR 0 7
38047: MINUS
38048: PUSH
38049: LD_INT 1
38051: PLUS
38052: PPUSH
38053: LD_VAR 0 9
38057: PUSH
38058: LD_VAR 0 7
38062: ARRAY
38063: PPUSH
38064: CALL_OW 1
38068: ST_TO_ADDR
38069: GO 38025
38071: POP
38072: POP
// end ; tmp := [ ] ;
38073: LD_ADDR_VAR 0 9
38077: PUSH
38078: EMPTY
38079: ST_TO_ADDR
// if mode then
38080: LD_VAR 0 5
38084: IFFALSE 38153
// begin for i = 1 to result do
38086: LD_ADDR_VAR 0 7
38090: PUSH
38091: DOUBLE
38092: LD_INT 1
38094: DEC
38095: ST_TO_ADDR
38096: LD_VAR 0 6
38100: PUSH
38101: FOR_TO
38102: IFFALSE 38141
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
38104: LD_ADDR_VAR 0 9
38108: PUSH
38109: LD_VAR 0 9
38113: PPUSH
38114: LD_VAR 0 7
38118: PPUSH
38119: LD_VAR 0 6
38123: PUSH
38124: LD_VAR 0 7
38128: ARRAY
38129: PUSH
38130: LD_INT 1
38132: ARRAY
38133: PPUSH
38134: CALL_OW 1
38138: ST_TO_ADDR
38139: GO 38101
38141: POP
38142: POP
// result := tmp ;
38143: LD_ADDR_VAR 0 6
38147: PUSH
38148: LD_VAR 0 9
38152: ST_TO_ADDR
// end ; end ;
38153: LD_VAR 0 6
38157: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
38158: LD_INT 0
38160: PPUSH
38161: PPUSH
38162: PPUSH
38163: PPUSH
38164: PPUSH
38165: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
38166: LD_ADDR_VAR 0 5
38170: PUSH
38171: LD_INT 0
38173: PUSH
38174: LD_INT 0
38176: PUSH
38177: LD_INT 0
38179: PUSH
38180: EMPTY
38181: PUSH
38182: EMPTY
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: ST_TO_ADDR
// if not x or not y then
38188: LD_VAR 0 2
38192: NOT
38193: PUSH
38194: LD_VAR 0 3
38198: NOT
38199: OR
38200: IFFALSE 38204
// exit ;
38202: GO 39850
// if not range then
38204: LD_VAR 0 4
38208: NOT
38209: IFFALSE 38219
// range := 10 ;
38211: LD_ADDR_VAR 0 4
38215: PUSH
38216: LD_INT 10
38218: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38219: LD_ADDR_VAR 0 8
38223: PUSH
38224: LD_INT 81
38226: PUSH
38227: LD_VAR 0 1
38231: PUSH
38232: EMPTY
38233: LIST
38234: LIST
38235: PUSH
38236: LD_INT 92
38238: PUSH
38239: LD_VAR 0 2
38243: PUSH
38244: LD_VAR 0 3
38248: PUSH
38249: LD_VAR 0 4
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: PUSH
38260: LD_INT 3
38262: PUSH
38263: LD_INT 21
38265: PUSH
38266: LD_INT 3
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: PUSH
38277: EMPTY
38278: LIST
38279: LIST
38280: LIST
38281: PPUSH
38282: CALL_OW 69
38286: ST_TO_ADDR
// if not tmp then
38287: LD_VAR 0 8
38291: NOT
38292: IFFALSE 38296
// exit ;
38294: GO 39850
// for i in tmp do
38296: LD_ADDR_VAR 0 6
38300: PUSH
38301: LD_VAR 0 8
38305: PUSH
38306: FOR_IN
38307: IFFALSE 39825
// begin points := [ 0 , 0 , 0 ] ;
38309: LD_ADDR_VAR 0 9
38313: PUSH
38314: LD_INT 0
38316: PUSH
38317: LD_INT 0
38319: PUSH
38320: LD_INT 0
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: LIST
38327: ST_TO_ADDR
// bpoints := 1 ;
38328: LD_ADDR_VAR 0 10
38332: PUSH
38333: LD_INT 1
38335: ST_TO_ADDR
// case GetType ( i ) of unit_human :
38336: LD_VAR 0 6
38340: PPUSH
38341: CALL_OW 247
38345: PUSH
38346: LD_INT 1
38348: DOUBLE
38349: EQUAL
38350: IFTRUE 38354
38352: GO 38932
38354: POP
// begin if GetClass ( i ) = 1 then
38355: LD_VAR 0 6
38359: PPUSH
38360: CALL_OW 257
38364: PUSH
38365: LD_INT 1
38367: EQUAL
38368: IFFALSE 38389
// points := [ 10 , 5 , 3 ] ;
38370: LD_ADDR_VAR 0 9
38374: PUSH
38375: LD_INT 10
38377: PUSH
38378: LD_INT 5
38380: PUSH
38381: LD_INT 3
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: LIST
38388: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
38389: LD_VAR 0 6
38393: PPUSH
38394: CALL_OW 257
38398: PUSH
38399: LD_INT 2
38401: PUSH
38402: LD_INT 3
38404: PUSH
38405: LD_INT 4
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: LIST
38412: IN
38413: IFFALSE 38434
// points := [ 3 , 2 , 1 ] ;
38415: LD_ADDR_VAR 0 9
38419: PUSH
38420: LD_INT 3
38422: PUSH
38423: LD_INT 2
38425: PUSH
38426: LD_INT 1
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: LIST
38433: ST_TO_ADDR
// if GetClass ( i ) = 5 then
38434: LD_VAR 0 6
38438: PPUSH
38439: CALL_OW 257
38443: PUSH
38444: LD_INT 5
38446: EQUAL
38447: IFFALSE 38468
// points := [ 130 , 5 , 2 ] ;
38449: LD_ADDR_VAR 0 9
38453: PUSH
38454: LD_INT 130
38456: PUSH
38457: LD_INT 5
38459: PUSH
38460: LD_INT 2
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: LIST
38467: ST_TO_ADDR
// if GetClass ( i ) = 8 then
38468: LD_VAR 0 6
38472: PPUSH
38473: CALL_OW 257
38477: PUSH
38478: LD_INT 8
38480: EQUAL
38481: IFFALSE 38502
// points := [ 35 , 35 , 30 ] ;
38483: LD_ADDR_VAR 0 9
38487: PUSH
38488: LD_INT 35
38490: PUSH
38491: LD_INT 35
38493: PUSH
38494: LD_INT 30
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: LIST
38501: ST_TO_ADDR
// if GetClass ( i ) = 9 then
38502: LD_VAR 0 6
38506: PPUSH
38507: CALL_OW 257
38511: PUSH
38512: LD_INT 9
38514: EQUAL
38515: IFFALSE 38536
// points := [ 20 , 55 , 40 ] ;
38517: LD_ADDR_VAR 0 9
38521: PUSH
38522: LD_INT 20
38524: PUSH
38525: LD_INT 55
38527: PUSH
38528: LD_INT 40
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: LIST
38535: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
38536: LD_VAR 0 6
38540: PPUSH
38541: CALL_OW 257
38545: PUSH
38546: LD_INT 12
38548: PUSH
38549: LD_INT 16
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: IN
38556: IFFALSE 38577
// points := [ 5 , 3 , 2 ] ;
38558: LD_ADDR_VAR 0 9
38562: PUSH
38563: LD_INT 5
38565: PUSH
38566: LD_INT 3
38568: PUSH
38569: LD_INT 2
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: LIST
38576: ST_TO_ADDR
// if GetClass ( i ) = 17 then
38577: LD_VAR 0 6
38581: PPUSH
38582: CALL_OW 257
38586: PUSH
38587: LD_INT 17
38589: EQUAL
38590: IFFALSE 38611
// points := [ 100 , 50 , 75 ] ;
38592: LD_ADDR_VAR 0 9
38596: PUSH
38597: LD_INT 100
38599: PUSH
38600: LD_INT 50
38602: PUSH
38603: LD_INT 75
38605: PUSH
38606: EMPTY
38607: LIST
38608: LIST
38609: LIST
38610: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38611: LD_VAR 0 6
38615: PPUSH
38616: CALL_OW 257
38620: PUSH
38621: LD_INT 15
38623: EQUAL
38624: IFFALSE 38645
// points := [ 10 , 5 , 3 ] ;
38626: LD_ADDR_VAR 0 9
38630: PUSH
38631: LD_INT 10
38633: PUSH
38634: LD_INT 5
38636: PUSH
38637: LD_INT 3
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: LIST
38644: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38645: LD_VAR 0 6
38649: PPUSH
38650: CALL_OW 257
38654: PUSH
38655: LD_INT 14
38657: EQUAL
38658: IFFALSE 38679
// points := [ 10 , 0 , 0 ] ;
38660: LD_ADDR_VAR 0 9
38664: PUSH
38665: LD_INT 10
38667: PUSH
38668: LD_INT 0
38670: PUSH
38671: LD_INT 0
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: LIST
38678: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38679: LD_VAR 0 6
38683: PPUSH
38684: CALL_OW 257
38688: PUSH
38689: LD_INT 11
38691: EQUAL
38692: IFFALSE 38713
// points := [ 30 , 10 , 5 ] ;
38694: LD_ADDR_VAR 0 9
38698: PUSH
38699: LD_INT 30
38701: PUSH
38702: LD_INT 10
38704: PUSH
38705: LD_INT 5
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: LIST
38712: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38713: LD_VAR 0 1
38717: PPUSH
38718: LD_INT 5
38720: PPUSH
38721: CALL_OW 321
38725: PUSH
38726: LD_INT 2
38728: EQUAL
38729: IFFALSE 38746
// bpoints := bpoints * 1.8 ;
38731: LD_ADDR_VAR 0 10
38735: PUSH
38736: LD_VAR 0 10
38740: PUSH
38741: LD_REAL  1.80000000000000E+0000
38744: MUL
38745: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38746: LD_VAR 0 6
38750: PPUSH
38751: CALL_OW 257
38755: PUSH
38756: LD_INT 1
38758: PUSH
38759: LD_INT 2
38761: PUSH
38762: LD_INT 3
38764: PUSH
38765: LD_INT 4
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: LIST
38772: LIST
38773: IN
38774: PUSH
38775: LD_VAR 0 1
38779: PPUSH
38780: LD_INT 51
38782: PPUSH
38783: CALL_OW 321
38787: PUSH
38788: LD_INT 2
38790: EQUAL
38791: AND
38792: IFFALSE 38809
// bpoints := bpoints * 1.2 ;
38794: LD_ADDR_VAR 0 10
38798: PUSH
38799: LD_VAR 0 10
38803: PUSH
38804: LD_REAL  1.20000000000000E+0000
38807: MUL
38808: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38809: LD_VAR 0 6
38813: PPUSH
38814: CALL_OW 257
38818: PUSH
38819: LD_INT 5
38821: PUSH
38822: LD_INT 7
38824: PUSH
38825: LD_INT 9
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: LIST
38832: IN
38833: PUSH
38834: LD_VAR 0 1
38838: PPUSH
38839: LD_INT 52
38841: PPUSH
38842: CALL_OW 321
38846: PUSH
38847: LD_INT 2
38849: EQUAL
38850: AND
38851: IFFALSE 38868
// bpoints := bpoints * 1.5 ;
38853: LD_ADDR_VAR 0 10
38857: PUSH
38858: LD_VAR 0 10
38862: PUSH
38863: LD_REAL  1.50000000000000E+0000
38866: MUL
38867: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38868: LD_VAR 0 1
38872: PPUSH
38873: LD_INT 66
38875: PPUSH
38876: CALL_OW 321
38880: PUSH
38881: LD_INT 2
38883: EQUAL
38884: IFFALSE 38901
// bpoints := bpoints * 1.1 ;
38886: LD_ADDR_VAR 0 10
38890: PUSH
38891: LD_VAR 0 10
38895: PUSH
38896: LD_REAL  1.10000000000000E+0000
38899: MUL
38900: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38901: LD_ADDR_VAR 0 10
38905: PUSH
38906: LD_VAR 0 10
38910: PUSH
38911: LD_VAR 0 6
38915: PPUSH
38916: LD_INT 1
38918: PPUSH
38919: CALL_OW 259
38923: PUSH
38924: LD_REAL  1.15000000000000E+0000
38927: MUL
38928: MUL
38929: ST_TO_ADDR
// end ; unit_vehicle :
38930: GO 39754
38932: LD_INT 2
38934: DOUBLE
38935: EQUAL
38936: IFTRUE 38940
38938: GO 39742
38940: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38941: LD_VAR 0 6
38945: PPUSH
38946: CALL_OW 264
38950: PUSH
38951: LD_INT 2
38953: PUSH
38954: LD_INT 42
38956: PUSH
38957: LD_INT 24
38959: PUSH
38960: EMPTY
38961: LIST
38962: LIST
38963: LIST
38964: IN
38965: IFFALSE 38986
// points := [ 25 , 5 , 3 ] ;
38967: LD_ADDR_VAR 0 9
38971: PUSH
38972: LD_INT 25
38974: PUSH
38975: LD_INT 5
38977: PUSH
38978: LD_INT 3
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: LIST
38985: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38986: LD_VAR 0 6
38990: PPUSH
38991: CALL_OW 264
38995: PUSH
38996: LD_INT 4
38998: PUSH
38999: LD_INT 43
39001: PUSH
39002: LD_INT 25
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: LIST
39009: IN
39010: IFFALSE 39031
// points := [ 40 , 15 , 5 ] ;
39012: LD_ADDR_VAR 0 9
39016: PUSH
39017: LD_INT 40
39019: PUSH
39020: LD_INT 15
39022: PUSH
39023: LD_INT 5
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: LIST
39030: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
39031: LD_VAR 0 6
39035: PPUSH
39036: CALL_OW 264
39040: PUSH
39041: LD_INT 3
39043: PUSH
39044: LD_INT 23
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: IN
39051: IFFALSE 39072
// points := [ 7 , 25 , 8 ] ;
39053: LD_ADDR_VAR 0 9
39057: PUSH
39058: LD_INT 7
39060: PUSH
39061: LD_INT 25
39063: PUSH
39064: LD_INT 8
39066: PUSH
39067: EMPTY
39068: LIST
39069: LIST
39070: LIST
39071: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39072: LD_VAR 0 6
39076: PPUSH
39077: CALL_OW 264
39081: PUSH
39082: LD_INT 5
39084: PUSH
39085: LD_INT 27
39087: PUSH
39088: LD_INT 44
39090: PUSH
39091: EMPTY
39092: LIST
39093: LIST
39094: LIST
39095: IN
39096: IFFALSE 39117
// points := [ 14 , 50 , 16 ] ;
39098: LD_ADDR_VAR 0 9
39102: PUSH
39103: LD_INT 14
39105: PUSH
39106: LD_INT 50
39108: PUSH
39109: LD_INT 16
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: LIST
39116: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
39117: LD_VAR 0 6
39121: PPUSH
39122: CALL_OW 264
39126: PUSH
39127: LD_INT 6
39129: PUSH
39130: LD_INT 46
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: IN
39137: IFFALSE 39158
// points := [ 32 , 120 , 70 ] ;
39139: LD_ADDR_VAR 0 9
39143: PUSH
39144: LD_INT 32
39146: PUSH
39147: LD_INT 120
39149: PUSH
39150: LD_INT 70
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: LIST
39157: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
39158: LD_VAR 0 6
39162: PPUSH
39163: CALL_OW 264
39167: PUSH
39168: LD_INT 7
39170: PUSH
39171: LD_INT 28
39173: PUSH
39174: LD_INT 45
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: LIST
39181: IN
39182: IFFALSE 39203
// points := [ 35 , 20 , 45 ] ;
39184: LD_ADDR_VAR 0 9
39188: PUSH
39189: LD_INT 35
39191: PUSH
39192: LD_INT 20
39194: PUSH
39195: LD_INT 45
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: LIST
39202: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39203: LD_VAR 0 6
39207: PPUSH
39208: CALL_OW 264
39212: PUSH
39213: LD_INT 47
39215: PUSH
39216: EMPTY
39217: LIST
39218: IN
39219: IFFALSE 39240
// points := [ 67 , 45 , 75 ] ;
39221: LD_ADDR_VAR 0 9
39225: PUSH
39226: LD_INT 67
39228: PUSH
39229: LD_INT 45
39231: PUSH
39232: LD_INT 75
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: LIST
39239: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
39240: LD_VAR 0 6
39244: PPUSH
39245: CALL_OW 264
39249: PUSH
39250: LD_INT 26
39252: PUSH
39253: EMPTY
39254: LIST
39255: IN
39256: IFFALSE 39277
// points := [ 120 , 30 , 80 ] ;
39258: LD_ADDR_VAR 0 9
39262: PUSH
39263: LD_INT 120
39265: PUSH
39266: LD_INT 30
39268: PUSH
39269: LD_INT 80
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: LIST
39276: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
39277: LD_VAR 0 6
39281: PPUSH
39282: CALL_OW 264
39286: PUSH
39287: LD_INT 22
39289: PUSH
39290: EMPTY
39291: LIST
39292: IN
39293: IFFALSE 39314
// points := [ 40 , 1 , 1 ] ;
39295: LD_ADDR_VAR 0 9
39299: PUSH
39300: LD_INT 40
39302: PUSH
39303: LD_INT 1
39305: PUSH
39306: LD_INT 1
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: LIST
39313: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
39314: LD_VAR 0 6
39318: PPUSH
39319: CALL_OW 264
39323: PUSH
39324: LD_INT 29
39326: PUSH
39327: EMPTY
39328: LIST
39329: IN
39330: IFFALSE 39351
// points := [ 70 , 200 , 400 ] ;
39332: LD_ADDR_VAR 0 9
39336: PUSH
39337: LD_INT 70
39339: PUSH
39340: LD_INT 200
39342: PUSH
39343: LD_INT 400
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: LIST
39350: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
39351: LD_VAR 0 6
39355: PPUSH
39356: CALL_OW 264
39360: PUSH
39361: LD_INT 14
39363: PUSH
39364: LD_INT 53
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: IN
39371: IFFALSE 39392
// points := [ 40 , 10 , 20 ] ;
39373: LD_ADDR_VAR 0 9
39377: PUSH
39378: LD_INT 40
39380: PUSH
39381: LD_INT 10
39383: PUSH
39384: LD_INT 20
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: LIST
39391: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
39392: LD_VAR 0 6
39396: PPUSH
39397: CALL_OW 264
39401: PUSH
39402: LD_INT 9
39404: PUSH
39405: EMPTY
39406: LIST
39407: IN
39408: IFFALSE 39429
// points := [ 5 , 70 , 20 ] ;
39410: LD_ADDR_VAR 0 9
39414: PUSH
39415: LD_INT 5
39417: PUSH
39418: LD_INT 70
39420: PUSH
39421: LD_INT 20
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: LIST
39428: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
39429: LD_VAR 0 6
39433: PPUSH
39434: CALL_OW 264
39438: PUSH
39439: LD_INT 10
39441: PUSH
39442: EMPTY
39443: LIST
39444: IN
39445: IFFALSE 39466
// points := [ 35 , 110 , 70 ] ;
39447: LD_ADDR_VAR 0 9
39451: PUSH
39452: LD_INT 35
39454: PUSH
39455: LD_INT 110
39457: PUSH
39458: LD_INT 70
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: LIST
39465: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
39466: LD_VAR 0 6
39470: PPUSH
39471: CALL_OW 265
39475: PUSH
39476: LD_INT 25
39478: EQUAL
39479: IFFALSE 39500
// points := [ 80 , 65 , 100 ] ;
39481: LD_ADDR_VAR 0 9
39485: PUSH
39486: LD_INT 80
39488: PUSH
39489: LD_INT 65
39491: PUSH
39492: LD_INT 100
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: LIST
39499: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
39500: LD_VAR 0 6
39504: PPUSH
39505: CALL_OW 263
39509: PUSH
39510: LD_INT 1
39512: EQUAL
39513: IFFALSE 39548
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
39515: LD_ADDR_VAR 0 10
39519: PUSH
39520: LD_VAR 0 10
39524: PUSH
39525: LD_VAR 0 6
39529: PPUSH
39530: CALL_OW 311
39534: PPUSH
39535: LD_INT 3
39537: PPUSH
39538: CALL_OW 259
39542: PUSH
39543: LD_INT 4
39545: MUL
39546: MUL
39547: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
39548: LD_VAR 0 6
39552: PPUSH
39553: CALL_OW 263
39557: PUSH
39558: LD_INT 2
39560: EQUAL
39561: IFFALSE 39612
// begin j := IsControledBy ( i ) ;
39563: LD_ADDR_VAR 0 7
39567: PUSH
39568: LD_VAR 0 6
39572: PPUSH
39573: CALL_OW 312
39577: ST_TO_ADDR
// if j then
39578: LD_VAR 0 7
39582: IFFALSE 39612
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39584: LD_ADDR_VAR 0 10
39588: PUSH
39589: LD_VAR 0 10
39593: PUSH
39594: LD_VAR 0 7
39598: PPUSH
39599: LD_INT 3
39601: PPUSH
39602: CALL_OW 259
39606: PUSH
39607: LD_INT 3
39609: MUL
39610: MUL
39611: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39612: LD_VAR 0 6
39616: PPUSH
39617: CALL_OW 264
39621: PUSH
39622: LD_INT 5
39624: PUSH
39625: LD_INT 6
39627: PUSH
39628: LD_INT 46
39630: PUSH
39631: LD_INT 44
39633: PUSH
39634: LD_INT 47
39636: PUSH
39637: LD_INT 45
39639: PUSH
39640: LD_INT 28
39642: PUSH
39643: LD_INT 7
39645: PUSH
39646: LD_INT 27
39648: PUSH
39649: LD_INT 29
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: LIST
39663: IN
39664: PUSH
39665: LD_VAR 0 1
39669: PPUSH
39670: LD_INT 52
39672: PPUSH
39673: CALL_OW 321
39677: PUSH
39678: LD_INT 2
39680: EQUAL
39681: AND
39682: IFFALSE 39699
// bpoints := bpoints * 1.2 ;
39684: LD_ADDR_VAR 0 10
39688: PUSH
39689: LD_VAR 0 10
39693: PUSH
39694: LD_REAL  1.20000000000000E+0000
39697: MUL
39698: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39699: LD_VAR 0 6
39703: PPUSH
39704: CALL_OW 264
39708: PUSH
39709: LD_INT 6
39711: PUSH
39712: LD_INT 46
39714: PUSH
39715: LD_INT 47
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: LIST
39722: IN
39723: IFFALSE 39740
// bpoints := bpoints * 1.2 ;
39725: LD_ADDR_VAR 0 10
39729: PUSH
39730: LD_VAR 0 10
39734: PUSH
39735: LD_REAL  1.20000000000000E+0000
39738: MUL
39739: ST_TO_ADDR
// end ; unit_building :
39740: GO 39754
39742: LD_INT 3
39744: DOUBLE
39745: EQUAL
39746: IFTRUE 39750
39748: GO 39753
39750: POP
// ; end ;
39751: GO 39754
39753: POP
// for j = 1 to 3 do
39754: LD_ADDR_VAR 0 7
39758: PUSH
39759: DOUBLE
39760: LD_INT 1
39762: DEC
39763: ST_TO_ADDR
39764: LD_INT 3
39766: PUSH
39767: FOR_TO
39768: IFFALSE 39821
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39770: LD_ADDR_VAR 0 5
39774: PUSH
39775: LD_VAR 0 5
39779: PPUSH
39780: LD_VAR 0 7
39784: PPUSH
39785: LD_VAR 0 5
39789: PUSH
39790: LD_VAR 0 7
39794: ARRAY
39795: PUSH
39796: LD_VAR 0 9
39800: PUSH
39801: LD_VAR 0 7
39805: ARRAY
39806: PUSH
39807: LD_VAR 0 10
39811: MUL
39812: PLUS
39813: PPUSH
39814: CALL_OW 1
39818: ST_TO_ADDR
39819: GO 39767
39821: POP
39822: POP
// end ;
39823: GO 38306
39825: POP
39826: POP
// result := Replace ( result , 4 , tmp ) ;
39827: LD_ADDR_VAR 0 5
39831: PUSH
39832: LD_VAR 0 5
39836: PPUSH
39837: LD_INT 4
39839: PPUSH
39840: LD_VAR 0 8
39844: PPUSH
39845: CALL_OW 1
39849: ST_TO_ADDR
// end ;
39850: LD_VAR 0 5
39854: RET
// export function DangerAtRange ( unit , range ) ; begin
39855: LD_INT 0
39857: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39858: LD_ADDR_VAR 0 3
39862: PUSH
39863: LD_VAR 0 1
39867: PPUSH
39868: CALL_OW 255
39872: PPUSH
39873: LD_VAR 0 1
39877: PPUSH
39878: CALL_OW 250
39882: PPUSH
39883: LD_VAR 0 1
39887: PPUSH
39888: CALL_OW 251
39892: PPUSH
39893: LD_VAR 0 2
39897: PPUSH
39898: CALL 38158 0 4
39902: ST_TO_ADDR
// end ;
39903: LD_VAR 0 3
39907: RET
// export function DangerInArea ( side , area ) ; begin
39908: LD_INT 0
39910: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39911: LD_ADDR_VAR 0 3
39915: PUSH
39916: LD_VAR 0 2
39920: PPUSH
39921: LD_INT 81
39923: PUSH
39924: LD_VAR 0 1
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: PPUSH
39933: CALL_OW 70
39937: ST_TO_ADDR
// end ;
39938: LD_VAR 0 3
39942: RET
// export function IsExtension ( b ) ; begin
39943: LD_INT 0
39945: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39946: LD_ADDR_VAR 0 2
39950: PUSH
39951: LD_VAR 0 1
39955: PUSH
39956: LD_INT 23
39958: PUSH
39959: LD_INT 20
39961: PUSH
39962: LD_INT 22
39964: PUSH
39965: LD_INT 17
39967: PUSH
39968: LD_INT 24
39970: PUSH
39971: LD_INT 21
39973: PUSH
39974: LD_INT 19
39976: PUSH
39977: LD_INT 16
39979: PUSH
39980: LD_INT 25
39982: PUSH
39983: LD_INT 18
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: IN
39998: ST_TO_ADDR
// end ;
39999: LD_VAR 0 2
40003: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
40004: LD_INT 0
40006: PPUSH
40007: PPUSH
40008: PPUSH
// result := [ ] ;
40009: LD_ADDR_VAR 0 4
40013: PUSH
40014: EMPTY
40015: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
40016: LD_ADDR_VAR 0 5
40020: PUSH
40021: LD_VAR 0 2
40025: PPUSH
40026: LD_INT 21
40028: PUSH
40029: LD_INT 3
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PPUSH
40036: CALL_OW 70
40040: ST_TO_ADDR
// if not tmp then
40041: LD_VAR 0 5
40045: NOT
40046: IFFALSE 40050
// exit ;
40048: GO 40114
// if checkLink then
40050: LD_VAR 0 3
40054: IFFALSE 40104
// begin for i in tmp do
40056: LD_ADDR_VAR 0 6
40060: PUSH
40061: LD_VAR 0 5
40065: PUSH
40066: FOR_IN
40067: IFFALSE 40102
// if GetBase ( i ) <> base then
40069: LD_VAR 0 6
40073: PPUSH
40074: CALL_OW 274
40078: PUSH
40079: LD_VAR 0 1
40083: NONEQUAL
40084: IFFALSE 40100
// ComLinkToBase ( base , i ) ;
40086: LD_VAR 0 1
40090: PPUSH
40091: LD_VAR 0 6
40095: PPUSH
40096: CALL_OW 169
40100: GO 40066
40102: POP
40103: POP
// end ; result := tmp ;
40104: LD_ADDR_VAR 0 4
40108: PUSH
40109: LD_VAR 0 5
40113: ST_TO_ADDR
// end ;
40114: LD_VAR 0 4
40118: RET
// export function ComComplete ( units , b ) ; var i ; begin
40119: LD_INT 0
40121: PPUSH
40122: PPUSH
// if not units then
40123: LD_VAR 0 1
40127: NOT
40128: IFFALSE 40132
// exit ;
40130: GO 40222
// for i in units do
40132: LD_ADDR_VAR 0 4
40136: PUSH
40137: LD_VAR 0 1
40141: PUSH
40142: FOR_IN
40143: IFFALSE 40220
// if BuildingStatus ( b ) = bs_build then
40145: LD_VAR 0 2
40149: PPUSH
40150: CALL_OW 461
40154: PUSH
40155: LD_INT 1
40157: EQUAL
40158: IFFALSE 40218
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40160: LD_VAR 0 4
40164: PPUSH
40165: LD_STRING h
40167: PUSH
40168: LD_VAR 0 2
40172: PPUSH
40173: CALL_OW 250
40177: PUSH
40178: LD_VAR 0 2
40182: PPUSH
40183: CALL_OW 251
40187: PUSH
40188: LD_VAR 0 2
40192: PUSH
40193: LD_INT 0
40195: PUSH
40196: LD_INT 0
40198: PUSH
40199: LD_INT 0
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: PUSH
40211: EMPTY
40212: LIST
40213: PPUSH
40214: CALL_OW 446
40218: GO 40142
40220: POP
40221: POP
// end ;
40222: LD_VAR 0 3
40226: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40227: LD_INT 0
40229: PPUSH
40230: PPUSH
40231: PPUSH
40232: PPUSH
40233: PPUSH
40234: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
40235: LD_VAR 0 1
40239: NOT
40240: PUSH
40241: LD_VAR 0 1
40245: PPUSH
40246: CALL_OW 263
40250: PUSH
40251: LD_INT 2
40253: EQUAL
40254: NOT
40255: OR
40256: IFFALSE 40260
// exit ;
40258: GO 40576
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
40260: LD_ADDR_VAR 0 6
40264: PUSH
40265: LD_INT 22
40267: PUSH
40268: LD_VAR 0 1
40272: PPUSH
40273: CALL_OW 255
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: LD_INT 2
40284: PUSH
40285: LD_INT 30
40287: PUSH
40288: LD_INT 36
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: LD_INT 34
40297: PUSH
40298: LD_INT 31
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: LIST
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: PPUSH
40314: CALL_OW 69
40318: ST_TO_ADDR
// if not tmp then
40319: LD_VAR 0 6
40323: NOT
40324: IFFALSE 40328
// exit ;
40326: GO 40576
// result := [ ] ;
40328: LD_ADDR_VAR 0 2
40332: PUSH
40333: EMPTY
40334: ST_TO_ADDR
// for i in tmp do
40335: LD_ADDR_VAR 0 3
40339: PUSH
40340: LD_VAR 0 6
40344: PUSH
40345: FOR_IN
40346: IFFALSE 40417
// begin t := UnitsInside ( i ) ;
40348: LD_ADDR_VAR 0 4
40352: PUSH
40353: LD_VAR 0 3
40357: PPUSH
40358: CALL_OW 313
40362: ST_TO_ADDR
// if t then
40363: LD_VAR 0 4
40367: IFFALSE 40415
// for j in t do
40369: LD_ADDR_VAR 0 7
40373: PUSH
40374: LD_VAR 0 4
40378: PUSH
40379: FOR_IN
40380: IFFALSE 40413
// result := Insert ( result , result + 1 , j ) ;
40382: LD_ADDR_VAR 0 2
40386: PUSH
40387: LD_VAR 0 2
40391: PPUSH
40392: LD_VAR 0 2
40396: PUSH
40397: LD_INT 1
40399: PLUS
40400: PPUSH
40401: LD_VAR 0 7
40405: PPUSH
40406: CALL_OW 2
40410: ST_TO_ADDR
40411: GO 40379
40413: POP
40414: POP
// end ;
40415: GO 40345
40417: POP
40418: POP
// if not result then
40419: LD_VAR 0 2
40423: NOT
40424: IFFALSE 40428
// exit ;
40426: GO 40576
// mech := result [ 1 ] ;
40428: LD_ADDR_VAR 0 5
40432: PUSH
40433: LD_VAR 0 2
40437: PUSH
40438: LD_INT 1
40440: ARRAY
40441: ST_TO_ADDR
// if result > 1 then
40442: LD_VAR 0 2
40446: PUSH
40447: LD_INT 1
40449: GREATER
40450: IFFALSE 40562
// for i = 2 to result do
40452: LD_ADDR_VAR 0 3
40456: PUSH
40457: DOUBLE
40458: LD_INT 2
40460: DEC
40461: ST_TO_ADDR
40462: LD_VAR 0 2
40466: PUSH
40467: FOR_TO
40468: IFFALSE 40560
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
40470: LD_ADDR_VAR 0 4
40474: PUSH
40475: LD_VAR 0 2
40479: PUSH
40480: LD_VAR 0 3
40484: ARRAY
40485: PPUSH
40486: LD_INT 3
40488: PPUSH
40489: CALL_OW 259
40493: PUSH
40494: LD_VAR 0 2
40498: PUSH
40499: LD_VAR 0 3
40503: ARRAY
40504: PPUSH
40505: CALL_OW 432
40509: MINUS
40510: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
40511: LD_VAR 0 4
40515: PUSH
40516: LD_VAR 0 5
40520: PPUSH
40521: LD_INT 3
40523: PPUSH
40524: CALL_OW 259
40528: PUSH
40529: LD_VAR 0 5
40533: PPUSH
40534: CALL_OW 432
40538: MINUS
40539: GREATEREQUAL
40540: IFFALSE 40558
// mech := result [ i ] ;
40542: LD_ADDR_VAR 0 5
40546: PUSH
40547: LD_VAR 0 2
40551: PUSH
40552: LD_VAR 0 3
40556: ARRAY
40557: ST_TO_ADDR
// end ;
40558: GO 40467
40560: POP
40561: POP
// ComLinkTo ( vehicle , mech ) ;
40562: LD_VAR 0 1
40566: PPUSH
40567: LD_VAR 0 5
40571: PPUSH
40572: CALL_OW 135
// end ;
40576: LD_VAR 0 2
40580: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40581: LD_INT 0
40583: PPUSH
40584: PPUSH
40585: PPUSH
40586: PPUSH
40587: PPUSH
40588: PPUSH
40589: PPUSH
40590: PPUSH
40591: PPUSH
40592: PPUSH
40593: PPUSH
40594: PPUSH
40595: PPUSH
// result := [ ] ;
40596: LD_ADDR_VAR 0 7
40600: PUSH
40601: EMPTY
40602: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40603: LD_VAR 0 1
40607: PPUSH
40608: CALL_OW 266
40612: PUSH
40613: LD_INT 0
40615: PUSH
40616: LD_INT 1
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: IN
40623: NOT
40624: IFFALSE 40628
// exit ;
40626: GO 42262
// if name then
40628: LD_VAR 0 3
40632: IFFALSE 40648
// SetBName ( base_dep , name ) ;
40634: LD_VAR 0 1
40638: PPUSH
40639: LD_VAR 0 3
40643: PPUSH
40644: CALL_OW 500
// base := GetBase ( base_dep ) ;
40648: LD_ADDR_VAR 0 15
40652: PUSH
40653: LD_VAR 0 1
40657: PPUSH
40658: CALL_OW 274
40662: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40663: LD_ADDR_VAR 0 16
40667: PUSH
40668: LD_VAR 0 1
40672: PPUSH
40673: CALL_OW 255
40677: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40678: LD_ADDR_VAR 0 17
40682: PUSH
40683: LD_VAR 0 1
40687: PPUSH
40688: CALL_OW 248
40692: ST_TO_ADDR
// if sources then
40693: LD_VAR 0 5
40697: IFFALSE 40744
// for i = 1 to 3 do
40699: LD_ADDR_VAR 0 8
40703: PUSH
40704: DOUBLE
40705: LD_INT 1
40707: DEC
40708: ST_TO_ADDR
40709: LD_INT 3
40711: PUSH
40712: FOR_TO
40713: IFFALSE 40742
// AddResourceType ( base , i , sources [ i ] ) ;
40715: LD_VAR 0 15
40719: PPUSH
40720: LD_VAR 0 8
40724: PPUSH
40725: LD_VAR 0 5
40729: PUSH
40730: LD_VAR 0 8
40734: ARRAY
40735: PPUSH
40736: CALL_OW 276
40740: GO 40712
40742: POP
40743: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
40744: LD_ADDR_VAR 0 18
40748: PUSH
40749: LD_VAR 0 15
40753: PPUSH
40754: LD_VAR 0 2
40758: PPUSH
40759: LD_INT 1
40761: PPUSH
40762: CALL 40004 0 3
40766: ST_TO_ADDR
// InitHc ;
40767: CALL_OW 19
// InitUc ;
40771: CALL_OW 18
// uc_side := side ;
40775: LD_ADDR_OWVAR 20
40779: PUSH
40780: LD_VAR 0 16
40784: ST_TO_ADDR
// uc_nation := nation ;
40785: LD_ADDR_OWVAR 21
40789: PUSH
40790: LD_VAR 0 17
40794: ST_TO_ADDR
// if buildings then
40795: LD_VAR 0 18
40799: IFFALSE 42121
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40801: LD_ADDR_VAR 0 19
40805: PUSH
40806: LD_VAR 0 18
40810: PPUSH
40811: LD_INT 2
40813: PUSH
40814: LD_INT 30
40816: PUSH
40817: LD_INT 29
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: LD_INT 30
40826: PUSH
40827: LD_INT 30
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: LIST
40838: PPUSH
40839: CALL_OW 72
40843: ST_TO_ADDR
// if tmp then
40844: LD_VAR 0 19
40848: IFFALSE 40896
// for i in tmp do
40850: LD_ADDR_VAR 0 8
40854: PUSH
40855: LD_VAR 0 19
40859: PUSH
40860: FOR_IN
40861: IFFALSE 40894
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40863: LD_VAR 0 8
40867: PPUSH
40868: CALL_OW 250
40872: PPUSH
40873: LD_VAR 0 8
40877: PPUSH
40878: CALL_OW 251
40882: PPUSH
40883: LD_VAR 0 16
40887: PPUSH
40888: CALL_OW 441
40892: GO 40860
40894: POP
40895: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40896: LD_VAR 0 18
40900: PPUSH
40901: LD_INT 2
40903: PUSH
40904: LD_INT 30
40906: PUSH
40907: LD_INT 32
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: LD_INT 30
40916: PUSH
40917: LD_INT 33
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: LIST
40928: PPUSH
40929: CALL_OW 72
40933: IFFALSE 41021
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40935: LD_ADDR_VAR 0 8
40939: PUSH
40940: LD_VAR 0 18
40944: PPUSH
40945: LD_INT 2
40947: PUSH
40948: LD_INT 30
40950: PUSH
40951: LD_INT 32
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 30
40960: PUSH
40961: LD_INT 33
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: LIST
40972: PPUSH
40973: CALL_OW 72
40977: PUSH
40978: FOR_IN
40979: IFFALSE 41019
// begin if not GetBWeapon ( i ) then
40981: LD_VAR 0 8
40985: PPUSH
40986: CALL_OW 269
40990: NOT
40991: IFFALSE 41017
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40993: LD_VAR 0 8
40997: PPUSH
40998: LD_VAR 0 8
41002: PPUSH
41003: LD_VAR 0 2
41007: PPUSH
41008: CALL 42267 0 2
41012: PPUSH
41013: CALL_OW 431
// end ;
41017: GO 40978
41019: POP
41020: POP
// end ; for i = 1 to personel do
41021: LD_ADDR_VAR 0 8
41025: PUSH
41026: DOUBLE
41027: LD_INT 1
41029: DEC
41030: ST_TO_ADDR
41031: LD_VAR 0 6
41035: PUSH
41036: FOR_TO
41037: IFFALSE 42101
// begin if i > 4 then
41039: LD_VAR 0 8
41043: PUSH
41044: LD_INT 4
41046: GREATER
41047: IFFALSE 41051
// break ;
41049: GO 42101
// case i of 1 :
41051: LD_VAR 0 8
41055: PUSH
41056: LD_INT 1
41058: DOUBLE
41059: EQUAL
41060: IFTRUE 41064
41062: GO 41144
41064: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
41065: LD_ADDR_VAR 0 12
41069: PUSH
41070: LD_VAR 0 18
41074: PPUSH
41075: LD_INT 22
41077: PUSH
41078: LD_VAR 0 16
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: PUSH
41087: LD_INT 58
41089: PUSH
41090: EMPTY
41091: LIST
41092: PUSH
41093: LD_INT 2
41095: PUSH
41096: LD_INT 30
41098: PUSH
41099: LD_INT 32
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 30
41108: PUSH
41109: LD_INT 4
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 30
41118: PUSH
41119: LD_INT 5
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: LIST
41136: PPUSH
41137: CALL_OW 72
41141: ST_TO_ADDR
41142: GO 41366
41144: LD_INT 2
41146: DOUBLE
41147: EQUAL
41148: IFTRUE 41152
41150: GO 41214
41152: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
41153: LD_ADDR_VAR 0 12
41157: PUSH
41158: LD_VAR 0 18
41162: PPUSH
41163: LD_INT 22
41165: PUSH
41166: LD_VAR 0 16
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: LD_INT 2
41177: PUSH
41178: LD_INT 30
41180: PUSH
41181: LD_INT 0
41183: PUSH
41184: EMPTY
41185: LIST
41186: LIST
41187: PUSH
41188: LD_INT 30
41190: PUSH
41191: LD_INT 1
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: LIST
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PPUSH
41207: CALL_OW 72
41211: ST_TO_ADDR
41212: GO 41366
41214: LD_INT 3
41216: DOUBLE
41217: EQUAL
41218: IFTRUE 41222
41220: GO 41284
41222: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41223: LD_ADDR_VAR 0 12
41227: PUSH
41228: LD_VAR 0 18
41232: PPUSH
41233: LD_INT 22
41235: PUSH
41236: LD_VAR 0 16
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 2
41247: PUSH
41248: LD_INT 30
41250: PUSH
41251: LD_INT 2
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 30
41260: PUSH
41261: LD_INT 3
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: LIST
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PPUSH
41277: CALL_OW 72
41281: ST_TO_ADDR
41282: GO 41366
41284: LD_INT 4
41286: DOUBLE
41287: EQUAL
41288: IFTRUE 41292
41290: GO 41365
41292: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
41293: LD_ADDR_VAR 0 12
41297: PUSH
41298: LD_VAR 0 18
41302: PPUSH
41303: LD_INT 22
41305: PUSH
41306: LD_VAR 0 16
41310: PUSH
41311: EMPTY
41312: LIST
41313: LIST
41314: PUSH
41315: LD_INT 2
41317: PUSH
41318: LD_INT 30
41320: PUSH
41321: LD_INT 6
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: LD_INT 30
41330: PUSH
41331: LD_INT 7
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 30
41340: PUSH
41341: LD_INT 8
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PPUSH
41358: CALL_OW 72
41362: ST_TO_ADDR
41363: GO 41366
41365: POP
// if i = 1 then
41366: LD_VAR 0 8
41370: PUSH
41371: LD_INT 1
41373: EQUAL
41374: IFFALSE 41485
// begin tmp := [ ] ;
41376: LD_ADDR_VAR 0 19
41380: PUSH
41381: EMPTY
41382: ST_TO_ADDR
// for j in f do
41383: LD_ADDR_VAR 0 9
41387: PUSH
41388: LD_VAR 0 12
41392: PUSH
41393: FOR_IN
41394: IFFALSE 41467
// if GetBType ( j ) = b_bunker then
41396: LD_VAR 0 9
41400: PPUSH
41401: CALL_OW 266
41405: PUSH
41406: LD_INT 32
41408: EQUAL
41409: IFFALSE 41436
// tmp := Insert ( tmp , 1 , j ) else
41411: LD_ADDR_VAR 0 19
41415: PUSH
41416: LD_VAR 0 19
41420: PPUSH
41421: LD_INT 1
41423: PPUSH
41424: LD_VAR 0 9
41428: PPUSH
41429: CALL_OW 2
41433: ST_TO_ADDR
41434: GO 41465
// tmp := Insert ( tmp , tmp + 1 , j ) ;
41436: LD_ADDR_VAR 0 19
41440: PUSH
41441: LD_VAR 0 19
41445: PPUSH
41446: LD_VAR 0 19
41450: PUSH
41451: LD_INT 1
41453: PLUS
41454: PPUSH
41455: LD_VAR 0 9
41459: PPUSH
41460: CALL_OW 2
41464: ST_TO_ADDR
41465: GO 41393
41467: POP
41468: POP
// if tmp then
41469: LD_VAR 0 19
41473: IFFALSE 41485
// f := tmp ;
41475: LD_ADDR_VAR 0 12
41479: PUSH
41480: LD_VAR 0 19
41484: ST_TO_ADDR
// end ; x := personel [ i ] ;
41485: LD_ADDR_VAR 0 13
41489: PUSH
41490: LD_VAR 0 6
41494: PUSH
41495: LD_VAR 0 8
41499: ARRAY
41500: ST_TO_ADDR
// if x = - 1 then
41501: LD_VAR 0 13
41505: PUSH
41506: LD_INT 1
41508: NEG
41509: EQUAL
41510: IFFALSE 41719
// begin for j in f do
41512: LD_ADDR_VAR 0 9
41516: PUSH
41517: LD_VAR 0 12
41521: PUSH
41522: FOR_IN
41523: IFFALSE 41715
// repeat InitHc ;
41525: CALL_OW 19
// if GetBType ( j ) = b_barracks then
41529: LD_VAR 0 9
41533: PPUSH
41534: CALL_OW 266
41538: PUSH
41539: LD_INT 5
41541: EQUAL
41542: IFFALSE 41612
// begin if UnitsInside ( j ) < 3 then
41544: LD_VAR 0 9
41548: PPUSH
41549: CALL_OW 313
41553: PUSH
41554: LD_INT 3
41556: LESS
41557: IFFALSE 41593
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41559: LD_INT 0
41561: PPUSH
41562: LD_INT 5
41564: PUSH
41565: LD_INT 8
41567: PUSH
41568: LD_INT 9
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: LIST
41575: PUSH
41576: LD_VAR 0 17
41580: ARRAY
41581: PPUSH
41582: LD_VAR 0 4
41586: PPUSH
41587: CALL_OW 380
41591: GO 41610
// PrepareHuman ( false , i , skill ) ;
41593: LD_INT 0
41595: PPUSH
41596: LD_VAR 0 8
41600: PPUSH
41601: LD_VAR 0 4
41605: PPUSH
41606: CALL_OW 380
// end else
41610: GO 41629
// PrepareHuman ( false , i , skill ) ;
41612: LD_INT 0
41614: PPUSH
41615: LD_VAR 0 8
41619: PPUSH
41620: LD_VAR 0 4
41624: PPUSH
41625: CALL_OW 380
// un := CreateHuman ;
41629: LD_ADDR_VAR 0 14
41633: PUSH
41634: CALL_OW 44
41638: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41639: LD_ADDR_VAR 0 7
41643: PUSH
41644: LD_VAR 0 7
41648: PPUSH
41649: LD_INT 1
41651: PPUSH
41652: LD_VAR 0 14
41656: PPUSH
41657: CALL_OW 2
41661: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41662: LD_VAR 0 14
41666: PPUSH
41667: LD_VAR 0 9
41671: PPUSH
41672: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41676: LD_VAR 0 9
41680: PPUSH
41681: CALL_OW 313
41685: PUSH
41686: LD_INT 6
41688: EQUAL
41689: PUSH
41690: LD_VAR 0 9
41694: PPUSH
41695: CALL_OW 266
41699: PUSH
41700: LD_INT 32
41702: PUSH
41703: LD_INT 31
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: IN
41710: OR
41711: IFFALSE 41525
41713: GO 41522
41715: POP
41716: POP
// end else
41717: GO 42099
// for j = 1 to x do
41719: LD_ADDR_VAR 0 9
41723: PUSH
41724: DOUBLE
41725: LD_INT 1
41727: DEC
41728: ST_TO_ADDR
41729: LD_VAR 0 13
41733: PUSH
41734: FOR_TO
41735: IFFALSE 42097
// begin InitHc ;
41737: CALL_OW 19
// if not f then
41741: LD_VAR 0 12
41745: NOT
41746: IFFALSE 41835
// begin PrepareHuman ( false , i , skill ) ;
41748: LD_INT 0
41750: PPUSH
41751: LD_VAR 0 8
41755: PPUSH
41756: LD_VAR 0 4
41760: PPUSH
41761: CALL_OW 380
// un := CreateHuman ;
41765: LD_ADDR_VAR 0 14
41769: PUSH
41770: CALL_OW 44
41774: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41775: LD_ADDR_VAR 0 7
41779: PUSH
41780: LD_VAR 0 7
41784: PPUSH
41785: LD_INT 1
41787: PPUSH
41788: LD_VAR 0 14
41792: PPUSH
41793: CALL_OW 2
41797: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41798: LD_VAR 0 14
41802: PPUSH
41803: LD_VAR 0 1
41807: PPUSH
41808: CALL_OW 250
41812: PPUSH
41813: LD_VAR 0 1
41817: PPUSH
41818: CALL_OW 251
41822: PPUSH
41823: LD_INT 10
41825: PPUSH
41826: LD_INT 0
41828: PPUSH
41829: CALL_OW 50
// continue ;
41833: GO 41734
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41835: LD_VAR 0 12
41839: PUSH
41840: LD_INT 1
41842: ARRAY
41843: PPUSH
41844: CALL_OW 313
41848: PUSH
41849: LD_VAR 0 12
41853: PUSH
41854: LD_INT 1
41856: ARRAY
41857: PPUSH
41858: CALL_OW 266
41862: PUSH
41863: LD_INT 32
41865: PUSH
41866: LD_INT 31
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: IN
41873: AND
41874: PUSH
41875: LD_VAR 0 12
41879: PUSH
41880: LD_INT 1
41882: ARRAY
41883: PPUSH
41884: CALL_OW 313
41888: PUSH
41889: LD_INT 6
41891: EQUAL
41892: OR
41893: IFFALSE 41913
// f := Delete ( f , 1 ) ;
41895: LD_ADDR_VAR 0 12
41899: PUSH
41900: LD_VAR 0 12
41904: PPUSH
41905: LD_INT 1
41907: PPUSH
41908: CALL_OW 3
41912: ST_TO_ADDR
// if not f then
41913: LD_VAR 0 12
41917: NOT
41918: IFFALSE 41936
// begin x := x + 2 ;
41920: LD_ADDR_VAR 0 13
41924: PUSH
41925: LD_VAR 0 13
41929: PUSH
41930: LD_INT 2
41932: PLUS
41933: ST_TO_ADDR
// continue ;
41934: GO 41734
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41936: LD_VAR 0 12
41940: PUSH
41941: LD_INT 1
41943: ARRAY
41944: PPUSH
41945: CALL_OW 266
41949: PUSH
41950: LD_INT 5
41952: EQUAL
41953: IFFALSE 42027
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41955: LD_VAR 0 12
41959: PUSH
41960: LD_INT 1
41962: ARRAY
41963: PPUSH
41964: CALL_OW 313
41968: PUSH
41969: LD_INT 3
41971: LESS
41972: IFFALSE 42008
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41974: LD_INT 0
41976: PPUSH
41977: LD_INT 5
41979: PUSH
41980: LD_INT 8
41982: PUSH
41983: LD_INT 9
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: LIST
41990: PUSH
41991: LD_VAR 0 17
41995: ARRAY
41996: PPUSH
41997: LD_VAR 0 4
42001: PPUSH
42002: CALL_OW 380
42006: GO 42025
// PrepareHuman ( false , i , skill ) ;
42008: LD_INT 0
42010: PPUSH
42011: LD_VAR 0 8
42015: PPUSH
42016: LD_VAR 0 4
42020: PPUSH
42021: CALL_OW 380
// end else
42025: GO 42044
// PrepareHuman ( false , i , skill ) ;
42027: LD_INT 0
42029: PPUSH
42030: LD_VAR 0 8
42034: PPUSH
42035: LD_VAR 0 4
42039: PPUSH
42040: CALL_OW 380
// un := CreateHuman ;
42044: LD_ADDR_VAR 0 14
42048: PUSH
42049: CALL_OW 44
42053: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42054: LD_ADDR_VAR 0 7
42058: PUSH
42059: LD_VAR 0 7
42063: PPUSH
42064: LD_INT 1
42066: PPUSH
42067: LD_VAR 0 14
42071: PPUSH
42072: CALL_OW 2
42076: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
42077: LD_VAR 0 14
42081: PPUSH
42082: LD_VAR 0 12
42086: PUSH
42087: LD_INT 1
42089: ARRAY
42090: PPUSH
42091: CALL_OW 52
// end ;
42095: GO 41734
42097: POP
42098: POP
// end ;
42099: GO 41036
42101: POP
42102: POP
// result := result ^ buildings ;
42103: LD_ADDR_VAR 0 7
42107: PUSH
42108: LD_VAR 0 7
42112: PUSH
42113: LD_VAR 0 18
42117: ADD
42118: ST_TO_ADDR
// end else
42119: GO 42262
// begin for i = 1 to personel do
42121: LD_ADDR_VAR 0 8
42125: PUSH
42126: DOUBLE
42127: LD_INT 1
42129: DEC
42130: ST_TO_ADDR
42131: LD_VAR 0 6
42135: PUSH
42136: FOR_TO
42137: IFFALSE 42260
// begin if i > 4 then
42139: LD_VAR 0 8
42143: PUSH
42144: LD_INT 4
42146: GREATER
42147: IFFALSE 42151
// break ;
42149: GO 42260
// x := personel [ i ] ;
42151: LD_ADDR_VAR 0 13
42155: PUSH
42156: LD_VAR 0 6
42160: PUSH
42161: LD_VAR 0 8
42165: ARRAY
42166: ST_TO_ADDR
// if x = - 1 then
42167: LD_VAR 0 13
42171: PUSH
42172: LD_INT 1
42174: NEG
42175: EQUAL
42176: IFFALSE 42180
// continue ;
42178: GO 42136
// PrepareHuman ( false , i , skill ) ;
42180: LD_INT 0
42182: PPUSH
42183: LD_VAR 0 8
42187: PPUSH
42188: LD_VAR 0 4
42192: PPUSH
42193: CALL_OW 380
// un := CreateHuman ;
42197: LD_ADDR_VAR 0 14
42201: PUSH
42202: CALL_OW 44
42206: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42207: LD_VAR 0 14
42211: PPUSH
42212: LD_VAR 0 1
42216: PPUSH
42217: CALL_OW 250
42221: PPUSH
42222: LD_VAR 0 1
42226: PPUSH
42227: CALL_OW 251
42231: PPUSH
42232: LD_INT 10
42234: PPUSH
42235: LD_INT 0
42237: PPUSH
42238: CALL_OW 50
// result := result ^ un ;
42242: LD_ADDR_VAR 0 7
42246: PUSH
42247: LD_VAR 0 7
42251: PUSH
42252: LD_VAR 0 14
42256: ADD
42257: ST_TO_ADDR
// end ;
42258: GO 42136
42260: POP
42261: POP
// end ; end ;
42262: LD_VAR 0 7
42266: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
42267: LD_INT 0
42269: PPUSH
42270: PPUSH
42271: PPUSH
42272: PPUSH
42273: PPUSH
42274: PPUSH
42275: PPUSH
42276: PPUSH
42277: PPUSH
42278: PPUSH
42279: PPUSH
42280: PPUSH
42281: PPUSH
42282: PPUSH
42283: PPUSH
42284: PPUSH
// result := false ;
42285: LD_ADDR_VAR 0 3
42289: PUSH
42290: LD_INT 0
42292: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
42293: LD_VAR 0 1
42297: NOT
42298: PUSH
42299: LD_VAR 0 1
42303: PPUSH
42304: CALL_OW 266
42308: PUSH
42309: LD_INT 32
42311: PUSH
42312: LD_INT 33
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: IN
42319: NOT
42320: OR
42321: IFFALSE 42325
// exit ;
42323: GO 43464
// nat := GetNation ( tower ) ;
42325: LD_ADDR_VAR 0 12
42329: PUSH
42330: LD_VAR 0 1
42334: PPUSH
42335: CALL_OW 248
42339: ST_TO_ADDR
// side := GetSide ( tower ) ;
42340: LD_ADDR_VAR 0 16
42344: PUSH
42345: LD_VAR 0 1
42349: PPUSH
42350: CALL_OW 255
42354: ST_TO_ADDR
// x := GetX ( tower ) ;
42355: LD_ADDR_VAR 0 10
42359: PUSH
42360: LD_VAR 0 1
42364: PPUSH
42365: CALL_OW 250
42369: ST_TO_ADDR
// y := GetY ( tower ) ;
42370: LD_ADDR_VAR 0 11
42374: PUSH
42375: LD_VAR 0 1
42379: PPUSH
42380: CALL_OW 251
42384: ST_TO_ADDR
// if not x or not y then
42385: LD_VAR 0 10
42389: NOT
42390: PUSH
42391: LD_VAR 0 11
42395: NOT
42396: OR
42397: IFFALSE 42401
// exit ;
42399: GO 43464
// weapon := 0 ;
42401: LD_ADDR_VAR 0 18
42405: PUSH
42406: LD_INT 0
42408: ST_TO_ADDR
// fac_list := [ ] ;
42409: LD_ADDR_VAR 0 17
42413: PUSH
42414: EMPTY
42415: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
42416: LD_ADDR_VAR 0 6
42420: PUSH
42421: LD_VAR 0 1
42425: PPUSH
42426: CALL_OW 274
42430: PPUSH
42431: LD_VAR 0 2
42435: PPUSH
42436: LD_INT 0
42438: PPUSH
42439: CALL 40004 0 3
42443: PPUSH
42444: LD_INT 30
42446: PUSH
42447: LD_INT 3
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PPUSH
42454: CALL_OW 72
42458: ST_TO_ADDR
// if not factories then
42459: LD_VAR 0 6
42463: NOT
42464: IFFALSE 42468
// exit ;
42466: GO 43464
// for i in factories do
42468: LD_ADDR_VAR 0 8
42472: PUSH
42473: LD_VAR 0 6
42477: PUSH
42478: FOR_IN
42479: IFFALSE 42504
// fac_list := fac_list union AvailableWeaponList ( i ) ;
42481: LD_ADDR_VAR 0 17
42485: PUSH
42486: LD_VAR 0 17
42490: PUSH
42491: LD_VAR 0 8
42495: PPUSH
42496: CALL_OW 478
42500: UNION
42501: ST_TO_ADDR
42502: GO 42478
42504: POP
42505: POP
// if not fac_list then
42506: LD_VAR 0 17
42510: NOT
42511: IFFALSE 42515
// exit ;
42513: GO 43464
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
42515: LD_ADDR_VAR 0 5
42519: PUSH
42520: LD_INT 4
42522: PUSH
42523: LD_INT 5
42525: PUSH
42526: LD_INT 9
42528: PUSH
42529: LD_INT 10
42531: PUSH
42532: LD_INT 6
42534: PUSH
42535: LD_INT 7
42537: PUSH
42538: LD_INT 11
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: PUSH
42550: LD_INT 27
42552: PUSH
42553: LD_INT 28
42555: PUSH
42556: LD_INT 26
42558: PUSH
42559: LD_INT 30
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: PUSH
42568: LD_INT 43
42570: PUSH
42571: LD_INT 44
42573: PUSH
42574: LD_INT 46
42576: PUSH
42577: LD_INT 45
42579: PUSH
42580: LD_INT 47
42582: PUSH
42583: LD_INT 49
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: LIST
42598: PUSH
42599: LD_VAR 0 12
42603: ARRAY
42604: ST_TO_ADDR
// for i in list do
42605: LD_ADDR_VAR 0 8
42609: PUSH
42610: LD_VAR 0 5
42614: PUSH
42615: FOR_IN
42616: IFFALSE 42649
// if not i in fac_list then
42618: LD_VAR 0 8
42622: PUSH
42623: LD_VAR 0 17
42627: IN
42628: NOT
42629: IFFALSE 42647
// list := list diff i ;
42631: LD_ADDR_VAR 0 5
42635: PUSH
42636: LD_VAR 0 5
42640: PUSH
42641: LD_VAR 0 8
42645: DIFF
42646: ST_TO_ADDR
42647: GO 42615
42649: POP
42650: POP
// if not list then
42651: LD_VAR 0 5
42655: NOT
42656: IFFALSE 42660
// exit ;
42658: GO 43464
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42660: LD_VAR 0 12
42664: PUSH
42665: LD_INT 3
42667: EQUAL
42668: PUSH
42669: LD_INT 49
42671: PUSH
42672: LD_VAR 0 5
42676: IN
42677: AND
42678: PUSH
42679: LD_INT 31
42681: PPUSH
42682: LD_VAR 0 16
42686: PPUSH
42687: CALL_OW 321
42691: PUSH
42692: LD_INT 2
42694: EQUAL
42695: AND
42696: IFFALSE 42756
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42698: LD_INT 22
42700: PUSH
42701: LD_VAR 0 16
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PUSH
42710: LD_INT 35
42712: PUSH
42713: LD_INT 49
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: LD_INT 91
42722: PUSH
42723: LD_VAR 0 1
42727: PUSH
42728: LD_INT 10
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: LIST
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: LIST
42740: PPUSH
42741: CALL_OW 69
42745: NOT
42746: IFFALSE 42756
// weapon := ru_time_lapser ;
42748: LD_ADDR_VAR 0 18
42752: PUSH
42753: LD_INT 49
42755: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42756: LD_VAR 0 12
42760: PUSH
42761: LD_INT 1
42763: PUSH
42764: LD_INT 2
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: IN
42771: PUSH
42772: LD_INT 11
42774: PUSH
42775: LD_VAR 0 5
42779: IN
42780: PUSH
42781: LD_INT 30
42783: PUSH
42784: LD_VAR 0 5
42788: IN
42789: OR
42790: AND
42791: PUSH
42792: LD_INT 6
42794: PPUSH
42795: LD_VAR 0 16
42799: PPUSH
42800: CALL_OW 321
42804: PUSH
42805: LD_INT 2
42807: EQUAL
42808: AND
42809: IFFALSE 42974
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42811: LD_INT 22
42813: PUSH
42814: LD_VAR 0 16
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: LD_INT 2
42825: PUSH
42826: LD_INT 35
42828: PUSH
42829: LD_INT 11
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 35
42838: PUSH
42839: LD_INT 30
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 91
42853: PUSH
42854: LD_VAR 0 1
42858: PUSH
42859: LD_INT 18
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: LIST
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: LIST
42871: PPUSH
42872: CALL_OW 69
42876: NOT
42877: PUSH
42878: LD_INT 22
42880: PUSH
42881: LD_VAR 0 16
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 2
42892: PUSH
42893: LD_INT 30
42895: PUSH
42896: LD_INT 32
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 30
42905: PUSH
42906: LD_INT 33
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 91
42920: PUSH
42921: LD_VAR 0 1
42925: PUSH
42926: LD_INT 12
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: LIST
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: LIST
42938: PUSH
42939: EMPTY
42940: LIST
42941: PPUSH
42942: CALL_OW 69
42946: PUSH
42947: LD_INT 2
42949: GREATER
42950: AND
42951: IFFALSE 42974
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42953: LD_ADDR_VAR 0 18
42957: PUSH
42958: LD_INT 11
42960: PUSH
42961: LD_INT 30
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_VAR 0 12
42972: ARRAY
42973: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42974: LD_VAR 0 18
42978: NOT
42979: PUSH
42980: LD_INT 40
42982: PPUSH
42983: LD_VAR 0 16
42987: PPUSH
42988: CALL_OW 321
42992: PUSH
42993: LD_INT 2
42995: EQUAL
42996: AND
42997: PUSH
42998: LD_INT 7
43000: PUSH
43001: LD_VAR 0 5
43005: IN
43006: PUSH
43007: LD_INT 28
43009: PUSH
43010: LD_VAR 0 5
43014: IN
43015: OR
43016: PUSH
43017: LD_INT 45
43019: PUSH
43020: LD_VAR 0 5
43024: IN
43025: OR
43026: AND
43027: IFFALSE 43281
// begin hex := GetHexInfo ( x , y ) ;
43029: LD_ADDR_VAR 0 4
43033: PUSH
43034: LD_VAR 0 10
43038: PPUSH
43039: LD_VAR 0 11
43043: PPUSH
43044: CALL_OW 546
43048: ST_TO_ADDR
// if hex [ 1 ] then
43049: LD_VAR 0 4
43053: PUSH
43054: LD_INT 1
43056: ARRAY
43057: IFFALSE 43061
// exit ;
43059: GO 43464
// height := hex [ 2 ] ;
43061: LD_ADDR_VAR 0 15
43065: PUSH
43066: LD_VAR 0 4
43070: PUSH
43071: LD_INT 2
43073: ARRAY
43074: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43075: LD_ADDR_VAR 0 14
43079: PUSH
43080: LD_INT 0
43082: PUSH
43083: LD_INT 2
43085: PUSH
43086: LD_INT 3
43088: PUSH
43089: LD_INT 5
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: LIST
43096: LIST
43097: ST_TO_ADDR
// for i in tmp do
43098: LD_ADDR_VAR 0 8
43102: PUSH
43103: LD_VAR 0 14
43107: PUSH
43108: FOR_IN
43109: IFFALSE 43279
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43111: LD_ADDR_VAR 0 9
43115: PUSH
43116: LD_VAR 0 10
43120: PPUSH
43121: LD_VAR 0 8
43125: PPUSH
43126: LD_INT 5
43128: PPUSH
43129: CALL_OW 272
43133: PUSH
43134: LD_VAR 0 11
43138: PPUSH
43139: LD_VAR 0 8
43143: PPUSH
43144: LD_INT 5
43146: PPUSH
43147: CALL_OW 273
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
43156: LD_VAR 0 9
43160: PUSH
43161: LD_INT 1
43163: ARRAY
43164: PPUSH
43165: LD_VAR 0 9
43169: PUSH
43170: LD_INT 2
43172: ARRAY
43173: PPUSH
43174: CALL_OW 488
43178: IFFALSE 43277
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
43180: LD_ADDR_VAR 0 4
43184: PUSH
43185: LD_VAR 0 9
43189: PUSH
43190: LD_INT 1
43192: ARRAY
43193: PPUSH
43194: LD_VAR 0 9
43198: PUSH
43199: LD_INT 2
43201: ARRAY
43202: PPUSH
43203: CALL_OW 546
43207: ST_TO_ADDR
// if hex [ 1 ] then
43208: LD_VAR 0 4
43212: PUSH
43213: LD_INT 1
43215: ARRAY
43216: IFFALSE 43220
// continue ;
43218: GO 43108
// h := hex [ 2 ] ;
43220: LD_ADDR_VAR 0 13
43224: PUSH
43225: LD_VAR 0 4
43229: PUSH
43230: LD_INT 2
43232: ARRAY
43233: ST_TO_ADDR
// if h + 7 < height then
43234: LD_VAR 0 13
43238: PUSH
43239: LD_INT 7
43241: PLUS
43242: PUSH
43243: LD_VAR 0 15
43247: LESS
43248: IFFALSE 43277
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43250: LD_ADDR_VAR 0 18
43254: PUSH
43255: LD_INT 7
43257: PUSH
43258: LD_INT 28
43260: PUSH
43261: LD_INT 45
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: LIST
43268: PUSH
43269: LD_VAR 0 12
43273: ARRAY
43274: ST_TO_ADDR
// break ;
43275: GO 43279
// end ; end ; end ;
43277: GO 43108
43279: POP
43280: POP
// end ; if not weapon then
43281: LD_VAR 0 18
43285: NOT
43286: IFFALSE 43346
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
43288: LD_ADDR_VAR 0 5
43292: PUSH
43293: LD_VAR 0 5
43297: PUSH
43298: LD_INT 11
43300: PUSH
43301: LD_INT 30
43303: PUSH
43304: LD_INT 49
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: LIST
43311: DIFF
43312: ST_TO_ADDR
// if not list then
43313: LD_VAR 0 5
43317: NOT
43318: IFFALSE 43322
// exit ;
43320: GO 43464
// weapon := list [ rand ( 1 , list ) ] ;
43322: LD_ADDR_VAR 0 18
43326: PUSH
43327: LD_VAR 0 5
43331: PUSH
43332: LD_INT 1
43334: PPUSH
43335: LD_VAR 0 5
43339: PPUSH
43340: CALL_OW 12
43344: ARRAY
43345: ST_TO_ADDR
// end ; if weapon then
43346: LD_VAR 0 18
43350: IFFALSE 43464
// begin tmp := CostOfWeapon ( weapon ) ;
43352: LD_ADDR_VAR 0 14
43356: PUSH
43357: LD_VAR 0 18
43361: PPUSH
43362: CALL_OW 451
43366: ST_TO_ADDR
// j := GetBase ( tower ) ;
43367: LD_ADDR_VAR 0 9
43371: PUSH
43372: LD_VAR 0 1
43376: PPUSH
43377: CALL_OW 274
43381: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
43382: LD_VAR 0 9
43386: PPUSH
43387: LD_INT 1
43389: PPUSH
43390: CALL_OW 275
43394: PUSH
43395: LD_VAR 0 14
43399: PUSH
43400: LD_INT 1
43402: ARRAY
43403: GREATEREQUAL
43404: PUSH
43405: LD_VAR 0 9
43409: PPUSH
43410: LD_INT 2
43412: PPUSH
43413: CALL_OW 275
43417: PUSH
43418: LD_VAR 0 14
43422: PUSH
43423: LD_INT 2
43425: ARRAY
43426: GREATEREQUAL
43427: AND
43428: PUSH
43429: LD_VAR 0 9
43433: PPUSH
43434: LD_INT 3
43436: PPUSH
43437: CALL_OW 275
43441: PUSH
43442: LD_VAR 0 14
43446: PUSH
43447: LD_INT 3
43449: ARRAY
43450: GREATEREQUAL
43451: AND
43452: IFFALSE 43464
// result := weapon ;
43454: LD_ADDR_VAR 0 3
43458: PUSH
43459: LD_VAR 0 18
43463: ST_TO_ADDR
// end ; end ;
43464: LD_VAR 0 3
43468: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
43469: LD_INT 0
43471: PPUSH
43472: PPUSH
// result := true ;
43473: LD_ADDR_VAR 0 3
43477: PUSH
43478: LD_INT 1
43480: ST_TO_ADDR
// if array1 = array2 then
43481: LD_VAR 0 1
43485: PUSH
43486: LD_VAR 0 2
43490: EQUAL
43491: IFFALSE 43551
// begin for i = 1 to array1 do
43493: LD_ADDR_VAR 0 4
43497: PUSH
43498: DOUBLE
43499: LD_INT 1
43501: DEC
43502: ST_TO_ADDR
43503: LD_VAR 0 1
43507: PUSH
43508: FOR_TO
43509: IFFALSE 43547
// if array1 [ i ] <> array2 [ i ] then
43511: LD_VAR 0 1
43515: PUSH
43516: LD_VAR 0 4
43520: ARRAY
43521: PUSH
43522: LD_VAR 0 2
43526: PUSH
43527: LD_VAR 0 4
43531: ARRAY
43532: NONEQUAL
43533: IFFALSE 43545
// begin result := false ;
43535: LD_ADDR_VAR 0 3
43539: PUSH
43540: LD_INT 0
43542: ST_TO_ADDR
// break ;
43543: GO 43547
// end ;
43545: GO 43508
43547: POP
43548: POP
// end else
43549: GO 43559
// result := false ;
43551: LD_ADDR_VAR 0 3
43555: PUSH
43556: LD_INT 0
43558: ST_TO_ADDR
// end ;
43559: LD_VAR 0 3
43563: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
43564: LD_INT 0
43566: PPUSH
43567: PPUSH
// if not array1 or not array2 then
43568: LD_VAR 0 1
43572: NOT
43573: PUSH
43574: LD_VAR 0 2
43578: NOT
43579: OR
43580: IFFALSE 43584
// exit ;
43582: GO 43648
// result := true ;
43584: LD_ADDR_VAR 0 3
43588: PUSH
43589: LD_INT 1
43591: ST_TO_ADDR
// for i = 1 to array1 do
43592: LD_ADDR_VAR 0 4
43596: PUSH
43597: DOUBLE
43598: LD_INT 1
43600: DEC
43601: ST_TO_ADDR
43602: LD_VAR 0 1
43606: PUSH
43607: FOR_TO
43608: IFFALSE 43646
// if array1 [ i ] <> array2 [ i ] then
43610: LD_VAR 0 1
43614: PUSH
43615: LD_VAR 0 4
43619: ARRAY
43620: PUSH
43621: LD_VAR 0 2
43625: PUSH
43626: LD_VAR 0 4
43630: ARRAY
43631: NONEQUAL
43632: IFFALSE 43644
// begin result := false ;
43634: LD_ADDR_VAR 0 3
43638: PUSH
43639: LD_INT 0
43641: ST_TO_ADDR
// break ;
43642: GO 43646
// end ;
43644: GO 43607
43646: POP
43647: POP
// end ;
43648: LD_VAR 0 3
43652: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43653: LD_INT 0
43655: PPUSH
43656: PPUSH
43657: PPUSH
// pom := GetBase ( fac ) ;
43658: LD_ADDR_VAR 0 5
43662: PUSH
43663: LD_VAR 0 1
43667: PPUSH
43668: CALL_OW 274
43672: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43673: LD_ADDR_VAR 0 4
43677: PUSH
43678: LD_VAR 0 2
43682: PUSH
43683: LD_INT 1
43685: ARRAY
43686: PPUSH
43687: LD_VAR 0 2
43691: PUSH
43692: LD_INT 2
43694: ARRAY
43695: PPUSH
43696: LD_VAR 0 2
43700: PUSH
43701: LD_INT 3
43703: ARRAY
43704: PPUSH
43705: LD_VAR 0 2
43709: PUSH
43710: LD_INT 4
43712: ARRAY
43713: PPUSH
43714: CALL_OW 449
43718: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43719: LD_ADDR_VAR 0 3
43723: PUSH
43724: LD_VAR 0 5
43728: PPUSH
43729: LD_INT 1
43731: PPUSH
43732: CALL_OW 275
43736: PUSH
43737: LD_VAR 0 4
43741: PUSH
43742: LD_INT 1
43744: ARRAY
43745: GREATEREQUAL
43746: PUSH
43747: LD_VAR 0 5
43751: PPUSH
43752: LD_INT 2
43754: PPUSH
43755: CALL_OW 275
43759: PUSH
43760: LD_VAR 0 4
43764: PUSH
43765: LD_INT 2
43767: ARRAY
43768: GREATEREQUAL
43769: AND
43770: PUSH
43771: LD_VAR 0 5
43775: PPUSH
43776: LD_INT 3
43778: PPUSH
43779: CALL_OW 275
43783: PUSH
43784: LD_VAR 0 4
43788: PUSH
43789: LD_INT 3
43791: ARRAY
43792: GREATEREQUAL
43793: AND
43794: ST_TO_ADDR
// end ;
43795: LD_VAR 0 3
43799: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43800: LD_INT 0
43802: PPUSH
43803: PPUSH
43804: PPUSH
43805: PPUSH
// pom := GetBase ( building ) ;
43806: LD_ADDR_VAR 0 3
43810: PUSH
43811: LD_VAR 0 1
43815: PPUSH
43816: CALL_OW 274
43820: ST_TO_ADDR
// if not pom then
43821: LD_VAR 0 3
43825: NOT
43826: IFFALSE 43830
// exit ;
43828: GO 44000
// btype := GetBType ( building ) ;
43830: LD_ADDR_VAR 0 5
43834: PUSH
43835: LD_VAR 0 1
43839: PPUSH
43840: CALL_OW 266
43844: ST_TO_ADDR
// if btype = b_armoury then
43845: LD_VAR 0 5
43849: PUSH
43850: LD_INT 4
43852: EQUAL
43853: IFFALSE 43863
// btype := b_barracks ;
43855: LD_ADDR_VAR 0 5
43859: PUSH
43860: LD_INT 5
43862: ST_TO_ADDR
// if btype = b_depot then
43863: LD_VAR 0 5
43867: PUSH
43868: LD_INT 0
43870: EQUAL
43871: IFFALSE 43881
// btype := b_warehouse ;
43873: LD_ADDR_VAR 0 5
43877: PUSH
43878: LD_INT 1
43880: ST_TO_ADDR
// if btype = b_workshop then
43881: LD_VAR 0 5
43885: PUSH
43886: LD_INT 2
43888: EQUAL
43889: IFFALSE 43899
// btype := b_factory ;
43891: LD_ADDR_VAR 0 5
43895: PUSH
43896: LD_INT 3
43898: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43899: LD_ADDR_VAR 0 4
43903: PUSH
43904: LD_VAR 0 5
43908: PPUSH
43909: LD_VAR 0 1
43913: PPUSH
43914: CALL_OW 248
43918: PPUSH
43919: CALL_OW 450
43923: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43924: LD_ADDR_VAR 0 2
43928: PUSH
43929: LD_VAR 0 3
43933: PPUSH
43934: LD_INT 1
43936: PPUSH
43937: CALL_OW 275
43941: PUSH
43942: LD_VAR 0 4
43946: PUSH
43947: LD_INT 1
43949: ARRAY
43950: GREATEREQUAL
43951: PUSH
43952: LD_VAR 0 3
43956: PPUSH
43957: LD_INT 2
43959: PPUSH
43960: CALL_OW 275
43964: PUSH
43965: LD_VAR 0 4
43969: PUSH
43970: LD_INT 2
43972: ARRAY
43973: GREATEREQUAL
43974: AND
43975: PUSH
43976: LD_VAR 0 3
43980: PPUSH
43981: LD_INT 3
43983: PPUSH
43984: CALL_OW 275
43988: PUSH
43989: LD_VAR 0 4
43993: PUSH
43994: LD_INT 3
43996: ARRAY
43997: GREATEREQUAL
43998: AND
43999: ST_TO_ADDR
// end ;
44000: LD_VAR 0 2
44004: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
44005: LD_INT 0
44007: PPUSH
44008: PPUSH
44009: PPUSH
// pom := GetBase ( building ) ;
44010: LD_ADDR_VAR 0 4
44014: PUSH
44015: LD_VAR 0 1
44019: PPUSH
44020: CALL_OW 274
44024: ST_TO_ADDR
// if not pom then
44025: LD_VAR 0 4
44029: NOT
44030: IFFALSE 44034
// exit ;
44032: GO 44135
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44034: LD_ADDR_VAR 0 5
44038: PUSH
44039: LD_VAR 0 2
44043: PPUSH
44044: LD_VAR 0 1
44048: PPUSH
44049: CALL_OW 248
44053: PPUSH
44054: CALL_OW 450
44058: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44059: LD_ADDR_VAR 0 3
44063: PUSH
44064: LD_VAR 0 4
44068: PPUSH
44069: LD_INT 1
44071: PPUSH
44072: CALL_OW 275
44076: PUSH
44077: LD_VAR 0 5
44081: PUSH
44082: LD_INT 1
44084: ARRAY
44085: GREATEREQUAL
44086: PUSH
44087: LD_VAR 0 4
44091: PPUSH
44092: LD_INT 2
44094: PPUSH
44095: CALL_OW 275
44099: PUSH
44100: LD_VAR 0 5
44104: PUSH
44105: LD_INT 2
44107: ARRAY
44108: GREATEREQUAL
44109: AND
44110: PUSH
44111: LD_VAR 0 4
44115: PPUSH
44116: LD_INT 3
44118: PPUSH
44119: CALL_OW 275
44123: PUSH
44124: LD_VAR 0 5
44128: PUSH
44129: LD_INT 3
44131: ARRAY
44132: GREATEREQUAL
44133: AND
44134: ST_TO_ADDR
// end ;
44135: LD_VAR 0 3
44139: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
44140: LD_INT 0
44142: PPUSH
44143: PPUSH
44144: PPUSH
44145: PPUSH
44146: PPUSH
44147: PPUSH
44148: PPUSH
44149: PPUSH
44150: PPUSH
44151: PPUSH
44152: PPUSH
// result := false ;
44153: LD_ADDR_VAR 0 8
44157: PUSH
44158: LD_INT 0
44160: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
44161: LD_VAR 0 5
44165: NOT
44166: PUSH
44167: LD_VAR 0 1
44171: NOT
44172: OR
44173: PUSH
44174: LD_VAR 0 2
44178: NOT
44179: OR
44180: PUSH
44181: LD_VAR 0 3
44185: NOT
44186: OR
44187: IFFALSE 44191
// exit ;
44189: GO 45005
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
44191: LD_ADDR_VAR 0 14
44195: PUSH
44196: LD_VAR 0 1
44200: PPUSH
44201: LD_VAR 0 2
44205: PPUSH
44206: LD_VAR 0 3
44210: PPUSH
44211: LD_VAR 0 4
44215: PPUSH
44216: LD_VAR 0 5
44220: PUSH
44221: LD_INT 1
44223: ARRAY
44224: PPUSH
44225: CALL_OW 248
44229: PPUSH
44230: LD_INT 0
44232: PPUSH
44233: CALL 45842 0 6
44237: ST_TO_ADDR
// if not hexes then
44238: LD_VAR 0 14
44242: NOT
44243: IFFALSE 44247
// exit ;
44245: GO 45005
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44247: LD_ADDR_VAR 0 17
44251: PUSH
44252: LD_VAR 0 5
44256: PPUSH
44257: LD_INT 22
44259: PUSH
44260: LD_VAR 0 13
44264: PPUSH
44265: CALL_OW 255
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 2
44276: PUSH
44277: LD_INT 30
44279: PUSH
44280: LD_INT 0
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 30
44289: PUSH
44290: LD_INT 1
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: LIST
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PPUSH
44306: CALL_OW 72
44310: ST_TO_ADDR
// for i = 1 to hexes do
44311: LD_ADDR_VAR 0 9
44315: PUSH
44316: DOUBLE
44317: LD_INT 1
44319: DEC
44320: ST_TO_ADDR
44321: LD_VAR 0 14
44325: PUSH
44326: FOR_TO
44327: IFFALSE 45003
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44329: LD_ADDR_VAR 0 13
44333: PUSH
44334: LD_VAR 0 14
44338: PUSH
44339: LD_VAR 0 9
44343: ARRAY
44344: PUSH
44345: LD_INT 1
44347: ARRAY
44348: PPUSH
44349: LD_VAR 0 14
44353: PUSH
44354: LD_VAR 0 9
44358: ARRAY
44359: PUSH
44360: LD_INT 2
44362: ARRAY
44363: PPUSH
44364: CALL_OW 428
44368: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
44369: LD_VAR 0 14
44373: PUSH
44374: LD_VAR 0 9
44378: ARRAY
44379: PUSH
44380: LD_INT 1
44382: ARRAY
44383: PPUSH
44384: LD_VAR 0 14
44388: PUSH
44389: LD_VAR 0 9
44393: ARRAY
44394: PUSH
44395: LD_INT 2
44397: ARRAY
44398: PPUSH
44399: CALL_OW 351
44403: PUSH
44404: LD_VAR 0 14
44408: PUSH
44409: LD_VAR 0 9
44413: ARRAY
44414: PUSH
44415: LD_INT 1
44417: ARRAY
44418: PPUSH
44419: LD_VAR 0 14
44423: PUSH
44424: LD_VAR 0 9
44428: ARRAY
44429: PUSH
44430: LD_INT 2
44432: ARRAY
44433: PPUSH
44434: CALL_OW 488
44438: NOT
44439: OR
44440: PUSH
44441: LD_VAR 0 13
44445: PPUSH
44446: CALL_OW 247
44450: PUSH
44451: LD_INT 3
44453: EQUAL
44454: OR
44455: IFFALSE 44461
// exit ;
44457: POP
44458: POP
44459: GO 45005
// if not tmp then
44461: LD_VAR 0 13
44465: NOT
44466: IFFALSE 44470
// continue ;
44468: GO 44326
// result := true ;
44470: LD_ADDR_VAR 0 8
44474: PUSH
44475: LD_INT 1
44477: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
44478: LD_VAR 0 6
44482: PUSH
44483: LD_VAR 0 13
44487: PPUSH
44488: CALL_OW 247
44492: PUSH
44493: LD_INT 2
44495: EQUAL
44496: AND
44497: PUSH
44498: LD_VAR 0 13
44502: PPUSH
44503: CALL_OW 263
44507: PUSH
44508: LD_INT 1
44510: EQUAL
44511: AND
44512: IFFALSE 44676
// begin if IsDrivenBy ( tmp ) then
44514: LD_VAR 0 13
44518: PPUSH
44519: CALL_OW 311
44523: IFFALSE 44527
// continue ;
44525: GO 44326
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
44527: LD_VAR 0 6
44531: PPUSH
44532: LD_INT 3
44534: PUSH
44535: LD_INT 60
44537: PUSH
44538: EMPTY
44539: LIST
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 3
44547: PUSH
44548: LD_INT 55
44550: PUSH
44551: EMPTY
44552: LIST
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PPUSH
44562: CALL_OW 72
44566: IFFALSE 44674
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
44568: LD_ADDR_VAR 0 18
44572: PUSH
44573: LD_VAR 0 6
44577: PPUSH
44578: LD_INT 3
44580: PUSH
44581: LD_INT 60
44583: PUSH
44584: EMPTY
44585: LIST
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 3
44593: PUSH
44594: LD_INT 55
44596: PUSH
44597: EMPTY
44598: LIST
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PPUSH
44608: CALL_OW 72
44612: PUSH
44613: LD_INT 1
44615: ARRAY
44616: ST_TO_ADDR
// if IsInUnit ( driver ) then
44617: LD_VAR 0 18
44621: PPUSH
44622: CALL_OW 310
44626: IFFALSE 44637
// ComExit ( driver ) ;
44628: LD_VAR 0 18
44632: PPUSH
44633: CALL 69026 0 1
// AddComEnterUnit ( driver , tmp ) ;
44637: LD_VAR 0 18
44641: PPUSH
44642: LD_VAR 0 13
44646: PPUSH
44647: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
44651: LD_VAR 0 18
44655: PPUSH
44656: LD_VAR 0 7
44660: PPUSH
44661: CALL_OW 173
// AddComExitVehicle ( driver ) ;
44665: LD_VAR 0 18
44669: PPUSH
44670: CALL_OW 181
// end ; continue ;
44674: GO 44326
// end ; if not cleaners or not tmp in cleaners then
44676: LD_VAR 0 6
44680: NOT
44681: PUSH
44682: LD_VAR 0 13
44686: PUSH
44687: LD_VAR 0 6
44691: IN
44692: NOT
44693: OR
44694: IFFALSE 45001
// begin if dep then
44696: LD_VAR 0 17
44700: IFFALSE 44836
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
44702: LD_ADDR_VAR 0 16
44706: PUSH
44707: LD_VAR 0 17
44711: PUSH
44712: LD_INT 1
44714: ARRAY
44715: PPUSH
44716: CALL_OW 250
44720: PPUSH
44721: LD_VAR 0 17
44725: PUSH
44726: LD_INT 1
44728: ARRAY
44729: PPUSH
44730: CALL_OW 254
44734: PPUSH
44735: LD_INT 5
44737: PPUSH
44738: CALL_OW 272
44742: PUSH
44743: LD_VAR 0 17
44747: PUSH
44748: LD_INT 1
44750: ARRAY
44751: PPUSH
44752: CALL_OW 251
44756: PPUSH
44757: LD_VAR 0 17
44761: PUSH
44762: LD_INT 1
44764: ARRAY
44765: PPUSH
44766: CALL_OW 254
44770: PPUSH
44771: LD_INT 5
44773: PPUSH
44774: CALL_OW 273
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44783: LD_VAR 0 16
44787: PUSH
44788: LD_INT 1
44790: ARRAY
44791: PPUSH
44792: LD_VAR 0 16
44796: PUSH
44797: LD_INT 2
44799: ARRAY
44800: PPUSH
44801: CALL_OW 488
44805: IFFALSE 44836
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44807: LD_VAR 0 13
44811: PPUSH
44812: LD_VAR 0 16
44816: PUSH
44817: LD_INT 1
44819: ARRAY
44820: PPUSH
44821: LD_VAR 0 16
44825: PUSH
44826: LD_INT 2
44828: ARRAY
44829: PPUSH
44830: CALL_OW 111
// continue ;
44834: GO 44326
// end ; end ; r := GetDir ( tmp ) ;
44836: LD_ADDR_VAR 0 15
44840: PUSH
44841: LD_VAR 0 13
44845: PPUSH
44846: CALL_OW 254
44850: ST_TO_ADDR
// if r = 5 then
44851: LD_VAR 0 15
44855: PUSH
44856: LD_INT 5
44858: EQUAL
44859: IFFALSE 44869
// r := 0 ;
44861: LD_ADDR_VAR 0 15
44865: PUSH
44866: LD_INT 0
44868: ST_TO_ADDR
// for j = r to 5 do
44869: LD_ADDR_VAR 0 10
44873: PUSH
44874: DOUBLE
44875: LD_VAR 0 15
44879: DEC
44880: ST_TO_ADDR
44881: LD_INT 5
44883: PUSH
44884: FOR_TO
44885: IFFALSE 44999
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44887: LD_ADDR_VAR 0 11
44891: PUSH
44892: LD_VAR 0 13
44896: PPUSH
44897: CALL_OW 250
44901: PPUSH
44902: LD_VAR 0 10
44906: PPUSH
44907: LD_INT 2
44909: PPUSH
44910: CALL_OW 272
44914: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44915: LD_ADDR_VAR 0 12
44919: PUSH
44920: LD_VAR 0 13
44924: PPUSH
44925: CALL_OW 251
44929: PPUSH
44930: LD_VAR 0 10
44934: PPUSH
44935: LD_INT 2
44937: PPUSH
44938: CALL_OW 273
44942: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44943: LD_VAR 0 11
44947: PPUSH
44948: LD_VAR 0 12
44952: PPUSH
44953: CALL_OW 488
44957: PUSH
44958: LD_VAR 0 11
44962: PPUSH
44963: LD_VAR 0 12
44967: PPUSH
44968: CALL_OW 428
44972: NOT
44973: AND
44974: IFFALSE 44997
// begin ComMoveXY ( tmp , _x , _y ) ;
44976: LD_VAR 0 13
44980: PPUSH
44981: LD_VAR 0 11
44985: PPUSH
44986: LD_VAR 0 12
44990: PPUSH
44991: CALL_OW 111
// break ;
44995: GO 44999
// end ; end ;
44997: GO 44884
44999: POP
45000: POP
// end ; end ;
45001: GO 44326
45003: POP
45004: POP
// end ;
45005: LD_VAR 0 8
45009: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
45010: LD_INT 0
45012: PPUSH
45013: PPUSH
45014: PPUSH
45015: PPUSH
45016: PPUSH
45017: PPUSH
45018: PPUSH
45019: PPUSH
45020: PPUSH
45021: PPUSH
// result := false ;
45022: LD_ADDR_VAR 0 6
45026: PUSH
45027: LD_INT 0
45029: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
45030: LD_VAR 0 1
45034: NOT
45035: PUSH
45036: LD_VAR 0 1
45040: PPUSH
45041: CALL_OW 266
45045: PUSH
45046: LD_INT 0
45048: PUSH
45049: LD_INT 1
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: IN
45056: NOT
45057: OR
45058: PUSH
45059: LD_VAR 0 2
45063: NOT
45064: OR
45065: PUSH
45066: LD_VAR 0 5
45070: PUSH
45071: LD_INT 0
45073: PUSH
45074: LD_INT 1
45076: PUSH
45077: LD_INT 2
45079: PUSH
45080: LD_INT 3
45082: PUSH
45083: LD_INT 4
45085: PUSH
45086: LD_INT 5
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: LIST
45093: LIST
45094: LIST
45095: LIST
45096: IN
45097: NOT
45098: OR
45099: PUSH
45100: LD_VAR 0 3
45104: PPUSH
45105: LD_VAR 0 4
45109: PPUSH
45110: CALL_OW 488
45114: NOT
45115: OR
45116: IFFALSE 45120
// exit ;
45118: GO 45837
// pom := GetBase ( depot ) ;
45120: LD_ADDR_VAR 0 10
45124: PUSH
45125: LD_VAR 0 1
45129: PPUSH
45130: CALL_OW 274
45134: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45135: LD_ADDR_VAR 0 11
45139: PUSH
45140: LD_VAR 0 2
45144: PPUSH
45145: LD_VAR 0 1
45149: PPUSH
45150: CALL_OW 248
45154: PPUSH
45155: CALL_OW 450
45159: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
45160: LD_VAR 0 10
45164: PPUSH
45165: LD_INT 1
45167: PPUSH
45168: CALL_OW 275
45172: PUSH
45173: LD_VAR 0 11
45177: PUSH
45178: LD_INT 1
45180: ARRAY
45181: GREATEREQUAL
45182: PUSH
45183: LD_VAR 0 10
45187: PPUSH
45188: LD_INT 2
45190: PPUSH
45191: CALL_OW 275
45195: PUSH
45196: LD_VAR 0 11
45200: PUSH
45201: LD_INT 2
45203: ARRAY
45204: GREATEREQUAL
45205: AND
45206: PUSH
45207: LD_VAR 0 10
45211: PPUSH
45212: LD_INT 3
45214: PPUSH
45215: CALL_OW 275
45219: PUSH
45220: LD_VAR 0 11
45224: PUSH
45225: LD_INT 3
45227: ARRAY
45228: GREATEREQUAL
45229: AND
45230: NOT
45231: IFFALSE 45235
// exit ;
45233: GO 45837
// if GetBType ( depot ) = b_depot then
45235: LD_VAR 0 1
45239: PPUSH
45240: CALL_OW 266
45244: PUSH
45245: LD_INT 0
45247: EQUAL
45248: IFFALSE 45260
// dist := 28 else
45250: LD_ADDR_VAR 0 14
45254: PUSH
45255: LD_INT 28
45257: ST_TO_ADDR
45258: GO 45268
// dist := 36 ;
45260: LD_ADDR_VAR 0 14
45264: PUSH
45265: LD_INT 36
45267: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
45268: LD_VAR 0 1
45272: PPUSH
45273: LD_VAR 0 3
45277: PPUSH
45278: LD_VAR 0 4
45282: PPUSH
45283: CALL_OW 297
45287: PUSH
45288: LD_VAR 0 14
45292: GREATER
45293: IFFALSE 45297
// exit ;
45295: GO 45837
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45297: LD_ADDR_VAR 0 12
45301: PUSH
45302: LD_VAR 0 2
45306: PPUSH
45307: LD_VAR 0 3
45311: PPUSH
45312: LD_VAR 0 4
45316: PPUSH
45317: LD_VAR 0 5
45321: PPUSH
45322: LD_VAR 0 1
45326: PPUSH
45327: CALL_OW 248
45331: PPUSH
45332: LD_INT 0
45334: PPUSH
45335: CALL 45842 0 6
45339: ST_TO_ADDR
// if not hexes then
45340: LD_VAR 0 12
45344: NOT
45345: IFFALSE 45349
// exit ;
45347: GO 45837
// hex := GetHexInfo ( x , y ) ;
45349: LD_ADDR_VAR 0 15
45353: PUSH
45354: LD_VAR 0 3
45358: PPUSH
45359: LD_VAR 0 4
45363: PPUSH
45364: CALL_OW 546
45368: ST_TO_ADDR
// if hex [ 1 ] then
45369: LD_VAR 0 15
45373: PUSH
45374: LD_INT 1
45376: ARRAY
45377: IFFALSE 45381
// exit ;
45379: GO 45837
// height := hex [ 2 ] ;
45381: LD_ADDR_VAR 0 13
45385: PUSH
45386: LD_VAR 0 15
45390: PUSH
45391: LD_INT 2
45393: ARRAY
45394: ST_TO_ADDR
// for i = 1 to hexes do
45395: LD_ADDR_VAR 0 7
45399: PUSH
45400: DOUBLE
45401: LD_INT 1
45403: DEC
45404: ST_TO_ADDR
45405: LD_VAR 0 12
45409: PUSH
45410: FOR_TO
45411: IFFALSE 45741
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45413: LD_VAR 0 12
45417: PUSH
45418: LD_VAR 0 7
45422: ARRAY
45423: PUSH
45424: LD_INT 1
45426: ARRAY
45427: PPUSH
45428: LD_VAR 0 12
45432: PUSH
45433: LD_VAR 0 7
45437: ARRAY
45438: PUSH
45439: LD_INT 2
45441: ARRAY
45442: PPUSH
45443: CALL_OW 488
45447: NOT
45448: PUSH
45449: LD_VAR 0 12
45453: PUSH
45454: LD_VAR 0 7
45458: ARRAY
45459: PUSH
45460: LD_INT 1
45462: ARRAY
45463: PPUSH
45464: LD_VAR 0 12
45468: PUSH
45469: LD_VAR 0 7
45473: ARRAY
45474: PUSH
45475: LD_INT 2
45477: ARRAY
45478: PPUSH
45479: CALL_OW 428
45483: PUSH
45484: LD_INT 0
45486: GREATER
45487: OR
45488: PUSH
45489: LD_VAR 0 12
45493: PUSH
45494: LD_VAR 0 7
45498: ARRAY
45499: PUSH
45500: LD_INT 1
45502: ARRAY
45503: PPUSH
45504: LD_VAR 0 12
45508: PUSH
45509: LD_VAR 0 7
45513: ARRAY
45514: PUSH
45515: LD_INT 2
45517: ARRAY
45518: PPUSH
45519: CALL_OW 351
45523: OR
45524: IFFALSE 45530
// exit ;
45526: POP
45527: POP
45528: GO 45837
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45530: LD_ADDR_VAR 0 8
45534: PUSH
45535: LD_VAR 0 12
45539: PUSH
45540: LD_VAR 0 7
45544: ARRAY
45545: PUSH
45546: LD_INT 1
45548: ARRAY
45549: PPUSH
45550: LD_VAR 0 12
45554: PUSH
45555: LD_VAR 0 7
45559: ARRAY
45560: PUSH
45561: LD_INT 2
45563: ARRAY
45564: PPUSH
45565: CALL_OW 546
45569: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
45570: LD_VAR 0 8
45574: PUSH
45575: LD_INT 1
45577: ARRAY
45578: PUSH
45579: LD_VAR 0 8
45583: PUSH
45584: LD_INT 2
45586: ARRAY
45587: PUSH
45588: LD_VAR 0 13
45592: PUSH
45593: LD_INT 2
45595: PLUS
45596: GREATER
45597: OR
45598: PUSH
45599: LD_VAR 0 8
45603: PUSH
45604: LD_INT 2
45606: ARRAY
45607: PUSH
45608: LD_VAR 0 13
45612: PUSH
45613: LD_INT 2
45615: MINUS
45616: LESS
45617: OR
45618: PUSH
45619: LD_VAR 0 8
45623: PUSH
45624: LD_INT 3
45626: ARRAY
45627: PUSH
45628: LD_INT 0
45630: PUSH
45631: LD_INT 8
45633: PUSH
45634: LD_INT 9
45636: PUSH
45637: LD_INT 10
45639: PUSH
45640: LD_INT 11
45642: PUSH
45643: LD_INT 12
45645: PUSH
45646: LD_INT 13
45648: PUSH
45649: LD_INT 16
45651: PUSH
45652: LD_INT 17
45654: PUSH
45655: LD_INT 18
45657: PUSH
45658: LD_INT 19
45660: PUSH
45661: LD_INT 20
45663: PUSH
45664: LD_INT 21
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: IN
45682: NOT
45683: OR
45684: PUSH
45685: LD_VAR 0 8
45689: PUSH
45690: LD_INT 5
45692: ARRAY
45693: NOT
45694: OR
45695: PUSH
45696: LD_VAR 0 8
45700: PUSH
45701: LD_INT 6
45703: ARRAY
45704: PUSH
45705: LD_INT 1
45707: PUSH
45708: LD_INT 2
45710: PUSH
45711: LD_INT 7
45713: PUSH
45714: LD_INT 9
45716: PUSH
45717: LD_INT 10
45719: PUSH
45720: LD_INT 11
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: IN
45731: NOT
45732: OR
45733: IFFALSE 45739
// exit ;
45735: POP
45736: POP
45737: GO 45837
// end ;
45739: GO 45410
45741: POP
45742: POP
// side := GetSide ( depot ) ;
45743: LD_ADDR_VAR 0 9
45747: PUSH
45748: LD_VAR 0 1
45752: PPUSH
45753: CALL_OW 255
45757: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45758: LD_VAR 0 9
45762: PPUSH
45763: LD_VAR 0 3
45767: PPUSH
45768: LD_VAR 0 4
45772: PPUSH
45773: LD_INT 20
45775: PPUSH
45776: CALL 38158 0 4
45780: PUSH
45781: LD_INT 4
45783: ARRAY
45784: IFFALSE 45788
// exit ;
45786: GO 45837
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45788: LD_VAR 0 2
45792: PUSH
45793: LD_INT 29
45795: PUSH
45796: LD_INT 30
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: IN
45803: PUSH
45804: LD_VAR 0 3
45808: PPUSH
45809: LD_VAR 0 4
45813: PPUSH
45814: LD_VAR 0 9
45818: PPUSH
45819: CALL_OW 440
45823: NOT
45824: AND
45825: IFFALSE 45829
// exit ;
45827: GO 45837
// result := true ;
45829: LD_ADDR_VAR 0 6
45833: PUSH
45834: LD_INT 1
45836: ST_TO_ADDR
// end ;
45837: LD_VAR 0 6
45841: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45842: LD_INT 0
45844: PPUSH
45845: PPUSH
45846: PPUSH
45847: PPUSH
45848: PPUSH
45849: PPUSH
45850: PPUSH
45851: PPUSH
45852: PPUSH
45853: PPUSH
45854: PPUSH
45855: PPUSH
45856: PPUSH
45857: PPUSH
45858: PPUSH
45859: PPUSH
45860: PPUSH
45861: PPUSH
45862: PPUSH
45863: PPUSH
45864: PPUSH
45865: PPUSH
45866: PPUSH
45867: PPUSH
45868: PPUSH
45869: PPUSH
45870: PPUSH
45871: PPUSH
45872: PPUSH
45873: PPUSH
45874: PPUSH
45875: PPUSH
45876: PPUSH
45877: PPUSH
45878: PPUSH
45879: PPUSH
45880: PPUSH
45881: PPUSH
45882: PPUSH
45883: PPUSH
45884: PPUSH
45885: PPUSH
45886: PPUSH
45887: PPUSH
45888: PPUSH
45889: PPUSH
45890: PPUSH
45891: PPUSH
45892: PPUSH
45893: PPUSH
45894: PPUSH
45895: PPUSH
45896: PPUSH
45897: PPUSH
45898: PPUSH
45899: PPUSH
45900: PPUSH
45901: PPUSH
// result = [ ] ;
45902: LD_ADDR_VAR 0 7
45906: PUSH
45907: EMPTY
45908: ST_TO_ADDR
// temp_list = [ ] ;
45909: LD_ADDR_VAR 0 9
45913: PUSH
45914: EMPTY
45915: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45916: LD_VAR 0 4
45920: PUSH
45921: LD_INT 0
45923: PUSH
45924: LD_INT 1
45926: PUSH
45927: LD_INT 2
45929: PUSH
45930: LD_INT 3
45932: PUSH
45933: LD_INT 4
45935: PUSH
45936: LD_INT 5
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: IN
45947: NOT
45948: PUSH
45949: LD_VAR 0 1
45953: PUSH
45954: LD_INT 0
45956: PUSH
45957: LD_INT 1
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: IN
45964: PUSH
45965: LD_VAR 0 5
45969: PUSH
45970: LD_INT 1
45972: PUSH
45973: LD_INT 2
45975: PUSH
45976: LD_INT 3
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: LIST
45983: IN
45984: NOT
45985: AND
45986: OR
45987: IFFALSE 45991
// exit ;
45989: GO 64382
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45991: LD_VAR 0 1
45995: PUSH
45996: LD_INT 6
45998: PUSH
45999: LD_INT 7
46001: PUSH
46002: LD_INT 8
46004: PUSH
46005: LD_INT 13
46007: PUSH
46008: LD_INT 12
46010: PUSH
46011: LD_INT 15
46013: PUSH
46014: LD_INT 11
46016: PUSH
46017: LD_INT 14
46019: PUSH
46020: LD_INT 10
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: IN
46034: IFFALSE 46044
// btype = b_lab ;
46036: LD_ADDR_VAR 0 1
46040: PUSH
46041: LD_INT 6
46043: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
46044: LD_VAR 0 6
46048: PUSH
46049: LD_INT 0
46051: PUSH
46052: LD_INT 1
46054: PUSH
46055: LD_INT 2
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: LIST
46062: IN
46063: NOT
46064: PUSH
46065: LD_VAR 0 1
46069: PUSH
46070: LD_INT 0
46072: PUSH
46073: LD_INT 1
46075: PUSH
46076: LD_INT 2
46078: PUSH
46079: LD_INT 3
46081: PUSH
46082: LD_INT 6
46084: PUSH
46085: LD_INT 36
46087: PUSH
46088: LD_INT 4
46090: PUSH
46091: LD_INT 5
46093: PUSH
46094: LD_INT 31
46096: PUSH
46097: LD_INT 32
46099: PUSH
46100: LD_INT 33
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: LIST
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: LIST
46114: LIST
46115: IN
46116: NOT
46117: PUSH
46118: LD_VAR 0 6
46122: PUSH
46123: LD_INT 1
46125: EQUAL
46126: AND
46127: OR
46128: PUSH
46129: LD_VAR 0 1
46133: PUSH
46134: LD_INT 2
46136: PUSH
46137: LD_INT 3
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: IN
46144: NOT
46145: PUSH
46146: LD_VAR 0 6
46150: PUSH
46151: LD_INT 2
46153: EQUAL
46154: AND
46155: OR
46156: IFFALSE 46166
// mode = 0 ;
46158: LD_ADDR_VAR 0 6
46162: PUSH
46163: LD_INT 0
46165: ST_TO_ADDR
// case mode of 0 :
46166: LD_VAR 0 6
46170: PUSH
46171: LD_INT 0
46173: DOUBLE
46174: EQUAL
46175: IFTRUE 46179
46177: GO 57632
46179: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46180: LD_ADDR_VAR 0 11
46184: PUSH
46185: LD_INT 0
46187: PUSH
46188: LD_INT 0
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 0
46197: PUSH
46198: LD_INT 1
46200: NEG
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 1
46208: PUSH
46209: LD_INT 0
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: PUSH
46216: LD_INT 1
46218: PUSH
46219: LD_INT 1
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 0
46228: PUSH
46229: LD_INT 1
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 1
46238: NEG
46239: PUSH
46240: LD_INT 0
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 1
46249: NEG
46250: PUSH
46251: LD_INT 1
46253: NEG
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 1
46261: NEG
46262: PUSH
46263: LD_INT 2
46265: NEG
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 0
46273: PUSH
46274: LD_INT 2
46276: NEG
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 1
46284: PUSH
46285: LD_INT 1
46287: NEG
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: LD_INT 1
46295: PUSH
46296: LD_INT 2
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 0
46305: PUSH
46306: LD_INT 2
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 1
46315: NEG
46316: PUSH
46317: LD_INT 1
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 1
46326: PUSH
46327: LD_INT 3
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 0
46336: PUSH
46337: LD_INT 3
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 1
46346: NEG
46347: PUSH
46348: LD_INT 2
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46373: LD_ADDR_VAR 0 12
46377: PUSH
46378: LD_INT 0
46380: PUSH
46381: LD_INT 0
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 0
46390: PUSH
46391: LD_INT 1
46393: NEG
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 1
46401: PUSH
46402: LD_INT 0
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 1
46411: PUSH
46412: LD_INT 1
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 0
46421: PUSH
46422: LD_INT 1
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: LD_INT 1
46431: NEG
46432: PUSH
46433: LD_INT 0
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 1
46442: NEG
46443: PUSH
46444: LD_INT 1
46446: NEG
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 1
46454: PUSH
46455: LD_INT 1
46457: NEG
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 2
46465: PUSH
46466: LD_INT 0
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 2
46475: PUSH
46476: LD_INT 1
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 1
46485: NEG
46486: PUSH
46487: LD_INT 1
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 2
46496: NEG
46497: PUSH
46498: LD_INT 0
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 2
46507: NEG
46508: PUSH
46509: LD_INT 1
46511: NEG
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 2
46519: NEG
46520: PUSH
46521: LD_INT 1
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 3
46530: NEG
46531: PUSH
46532: LD_INT 0
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: LD_INT 3
46541: NEG
46542: PUSH
46543: LD_INT 1
46545: NEG
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46569: LD_ADDR_VAR 0 13
46573: PUSH
46574: LD_INT 0
46576: PUSH
46577: LD_INT 0
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 0
46586: PUSH
46587: LD_INT 1
46589: NEG
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 1
46597: PUSH
46598: LD_INT 0
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 1
46607: PUSH
46608: LD_INT 1
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 0
46617: PUSH
46618: LD_INT 1
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 1
46627: NEG
46628: PUSH
46629: LD_INT 0
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 1
46638: NEG
46639: PUSH
46640: LD_INT 1
46642: NEG
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 1
46650: NEG
46651: PUSH
46652: LD_INT 2
46654: NEG
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 2
46662: PUSH
46663: LD_INT 1
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 2
46672: PUSH
46673: LD_INT 2
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 1
46682: PUSH
46683: LD_INT 2
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 2
46692: NEG
46693: PUSH
46694: LD_INT 1
46696: NEG
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 2
46704: NEG
46705: PUSH
46706: LD_INT 2
46708: NEG
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 2
46716: NEG
46717: PUSH
46718: LD_INT 3
46720: NEG
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 3
46728: NEG
46729: PUSH
46730: LD_INT 2
46732: NEG
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 3
46740: NEG
46741: PUSH
46742: LD_INT 3
46744: NEG
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46768: LD_ADDR_VAR 0 14
46772: PUSH
46773: LD_INT 0
46775: PUSH
46776: LD_INT 0
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 0
46785: PUSH
46786: LD_INT 1
46788: NEG
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 1
46796: PUSH
46797: LD_INT 0
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: LD_INT 1
46806: PUSH
46807: LD_INT 1
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 0
46816: PUSH
46817: LD_INT 1
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 1
46826: NEG
46827: PUSH
46828: LD_INT 0
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 1
46837: NEG
46838: PUSH
46839: LD_INT 1
46841: NEG
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 1
46849: NEG
46850: PUSH
46851: LD_INT 2
46853: NEG
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 0
46861: PUSH
46862: LD_INT 2
46864: NEG
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 1
46872: PUSH
46873: LD_INT 1
46875: NEG
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 1
46883: PUSH
46884: LD_INT 2
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 0
46893: PUSH
46894: LD_INT 2
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: PUSH
46901: LD_INT 1
46903: NEG
46904: PUSH
46905: LD_INT 1
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 1
46914: NEG
46915: PUSH
46916: LD_INT 3
46918: NEG
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 0
46926: PUSH
46927: LD_INT 3
46929: NEG
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 1
46937: PUSH
46938: LD_INT 2
46940: NEG
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46964: LD_ADDR_VAR 0 15
46968: PUSH
46969: LD_INT 0
46971: PUSH
46972: LD_INT 0
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 0
46981: PUSH
46982: LD_INT 1
46984: NEG
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 1
46992: PUSH
46993: LD_INT 0
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 1
47002: PUSH
47003: LD_INT 1
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 0
47012: PUSH
47013: LD_INT 1
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 1
47022: NEG
47023: PUSH
47024: LD_INT 0
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 1
47033: NEG
47034: PUSH
47035: LD_INT 1
47037: NEG
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 1
47045: PUSH
47046: LD_INT 1
47048: NEG
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 2
47056: PUSH
47057: LD_INT 0
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 2
47066: PUSH
47067: LD_INT 1
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 1
47076: NEG
47077: PUSH
47078: LD_INT 1
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 2
47087: NEG
47088: PUSH
47089: LD_INT 0
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 2
47098: NEG
47099: PUSH
47100: LD_INT 1
47102: NEG
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 2
47110: PUSH
47111: LD_INT 1
47113: NEG
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 3
47121: PUSH
47122: LD_INT 0
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 3
47131: PUSH
47132: LD_INT 1
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: LIST
47143: LIST
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47157: LD_ADDR_VAR 0 16
47161: PUSH
47162: LD_INT 0
47164: PUSH
47165: LD_INT 0
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 0
47174: PUSH
47175: LD_INT 1
47177: NEG
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 1
47185: PUSH
47186: LD_INT 0
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 1
47195: PUSH
47196: LD_INT 1
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 0
47205: PUSH
47206: LD_INT 1
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 1
47215: NEG
47216: PUSH
47217: LD_INT 0
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 1
47226: NEG
47227: PUSH
47228: LD_INT 1
47230: NEG
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 1
47238: NEG
47239: PUSH
47240: LD_INT 2
47242: NEG
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 2
47250: PUSH
47251: LD_INT 1
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 2
47260: PUSH
47261: LD_INT 2
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 1
47270: PUSH
47271: LD_INT 2
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 2
47280: NEG
47281: PUSH
47282: LD_INT 1
47284: NEG
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 2
47292: NEG
47293: PUSH
47294: LD_INT 2
47296: NEG
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 3
47304: PUSH
47305: LD_INT 2
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 3
47314: PUSH
47315: LD_INT 3
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 2
47324: PUSH
47325: LD_INT 3
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: LIST
47344: LIST
47345: LIST
47346: LIST
47347: LIST
47348: LIST
47349: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47350: LD_ADDR_VAR 0 17
47354: PUSH
47355: LD_INT 0
47357: PUSH
47358: LD_INT 0
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: LD_INT 0
47367: PUSH
47368: LD_INT 1
47370: NEG
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 1
47378: PUSH
47379: LD_INT 0
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 1
47388: PUSH
47389: LD_INT 1
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 0
47398: PUSH
47399: LD_INT 1
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 1
47408: NEG
47409: PUSH
47410: LD_INT 0
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 1
47419: NEG
47420: PUSH
47421: LD_INT 1
47423: NEG
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 1
47431: NEG
47432: PUSH
47433: LD_INT 2
47435: NEG
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 0
47443: PUSH
47444: LD_INT 2
47446: NEG
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 1
47454: PUSH
47455: LD_INT 1
47457: NEG
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 2
47465: PUSH
47466: LD_INT 0
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 2
47475: PUSH
47476: LD_INT 1
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 2
47485: PUSH
47486: LD_INT 2
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 1
47495: PUSH
47496: LD_INT 2
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 0
47505: PUSH
47506: LD_INT 2
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 1
47515: NEG
47516: PUSH
47517: LD_INT 1
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 2
47526: NEG
47527: PUSH
47528: LD_INT 0
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: LD_INT 2
47537: NEG
47538: PUSH
47539: LD_INT 1
47541: NEG
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: LD_INT 2
47549: NEG
47550: PUSH
47551: LD_INT 2
47553: NEG
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: LIST
47574: LIST
47575: LIST
47576: LIST
47577: LIST
47578: LIST
47579: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47580: LD_ADDR_VAR 0 18
47584: PUSH
47585: LD_INT 0
47587: PUSH
47588: LD_INT 0
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 0
47597: PUSH
47598: LD_INT 1
47600: NEG
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 1
47608: PUSH
47609: LD_INT 0
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 1
47618: PUSH
47619: LD_INT 1
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 0
47628: PUSH
47629: LD_INT 1
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 1
47638: NEG
47639: PUSH
47640: LD_INT 0
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 1
47649: NEG
47650: PUSH
47651: LD_INT 1
47653: NEG
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 1
47661: NEG
47662: PUSH
47663: LD_INT 2
47665: NEG
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 0
47673: PUSH
47674: LD_INT 2
47676: NEG
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 1
47684: PUSH
47685: LD_INT 1
47687: NEG
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 2
47695: PUSH
47696: LD_INT 0
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 2
47705: PUSH
47706: LD_INT 1
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 2
47715: PUSH
47716: LD_INT 2
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 1
47725: PUSH
47726: LD_INT 2
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 0
47735: PUSH
47736: LD_INT 2
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 1
47745: NEG
47746: PUSH
47747: LD_INT 1
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 2
47756: NEG
47757: PUSH
47758: LD_INT 0
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 2
47767: NEG
47768: PUSH
47769: LD_INT 1
47771: NEG
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 2
47779: NEG
47780: PUSH
47781: LD_INT 2
47783: NEG
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47810: LD_ADDR_VAR 0 19
47814: PUSH
47815: LD_INT 0
47817: PUSH
47818: LD_INT 0
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: LD_INT 0
47827: PUSH
47828: LD_INT 1
47830: NEG
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 1
47838: PUSH
47839: LD_INT 0
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 1
47848: PUSH
47849: LD_INT 1
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 0
47858: PUSH
47859: LD_INT 1
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 1
47868: NEG
47869: PUSH
47870: LD_INT 0
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 1
47879: NEG
47880: PUSH
47881: LD_INT 1
47883: NEG
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 1
47891: NEG
47892: PUSH
47893: LD_INT 2
47895: NEG
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 0
47903: PUSH
47904: LD_INT 2
47906: NEG
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 1
47914: PUSH
47915: LD_INT 1
47917: NEG
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 2
47925: PUSH
47926: LD_INT 0
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 2
47935: PUSH
47936: LD_INT 1
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 2
47945: PUSH
47946: LD_INT 2
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 1
47955: PUSH
47956: LD_INT 2
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 0
47965: PUSH
47966: LD_INT 2
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 1
47975: NEG
47976: PUSH
47977: LD_INT 1
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 2
47986: NEG
47987: PUSH
47988: LD_INT 0
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 2
47997: NEG
47998: PUSH
47999: LD_INT 1
48001: NEG
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 2
48009: NEG
48010: PUSH
48011: LD_INT 2
48013: NEG
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48040: LD_ADDR_VAR 0 20
48044: PUSH
48045: LD_INT 0
48047: PUSH
48048: LD_INT 0
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 0
48057: PUSH
48058: LD_INT 1
48060: NEG
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 1
48068: PUSH
48069: LD_INT 0
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 1
48078: PUSH
48079: LD_INT 1
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 0
48088: PUSH
48089: LD_INT 1
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 1
48098: NEG
48099: PUSH
48100: LD_INT 0
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: LD_INT 1
48109: NEG
48110: PUSH
48111: LD_INT 1
48113: NEG
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 1
48121: NEG
48122: PUSH
48123: LD_INT 2
48125: NEG
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 0
48133: PUSH
48134: LD_INT 2
48136: NEG
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 1
48144: PUSH
48145: LD_INT 1
48147: NEG
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 2
48155: PUSH
48156: LD_INT 0
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 2
48165: PUSH
48166: LD_INT 1
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 2
48175: PUSH
48176: LD_INT 2
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 1
48185: PUSH
48186: LD_INT 2
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 0
48195: PUSH
48196: LD_INT 2
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 1
48205: NEG
48206: PUSH
48207: LD_INT 1
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 2
48216: NEG
48217: PUSH
48218: LD_INT 0
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 2
48227: NEG
48228: PUSH
48229: LD_INT 1
48231: NEG
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 2
48239: NEG
48240: PUSH
48241: LD_INT 2
48243: NEG
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48270: LD_ADDR_VAR 0 21
48274: PUSH
48275: LD_INT 0
48277: PUSH
48278: LD_INT 0
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: LD_INT 0
48287: PUSH
48288: LD_INT 1
48290: NEG
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 1
48298: PUSH
48299: LD_INT 0
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 1
48308: PUSH
48309: LD_INT 1
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 0
48318: PUSH
48319: LD_INT 1
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: LD_INT 1
48328: NEG
48329: PUSH
48330: LD_INT 0
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 1
48339: NEG
48340: PUSH
48341: LD_INT 1
48343: NEG
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: LD_INT 1
48351: NEG
48352: PUSH
48353: LD_INT 2
48355: NEG
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 0
48363: PUSH
48364: LD_INT 2
48366: NEG
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 1
48374: PUSH
48375: LD_INT 1
48377: NEG
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 2
48385: PUSH
48386: LD_INT 0
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 2
48395: PUSH
48396: LD_INT 1
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 2
48405: PUSH
48406: LD_INT 2
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 1
48415: PUSH
48416: LD_INT 2
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 0
48425: PUSH
48426: LD_INT 2
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 1
48435: NEG
48436: PUSH
48437: LD_INT 1
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 2
48446: NEG
48447: PUSH
48448: LD_INT 0
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 2
48457: NEG
48458: PUSH
48459: LD_INT 1
48461: NEG
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 2
48469: NEG
48470: PUSH
48471: LD_INT 2
48473: NEG
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48500: LD_ADDR_VAR 0 22
48504: PUSH
48505: LD_INT 0
48507: PUSH
48508: LD_INT 0
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 0
48517: PUSH
48518: LD_INT 1
48520: NEG
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: LD_INT 1
48528: PUSH
48529: LD_INT 0
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: LD_INT 1
48538: PUSH
48539: LD_INT 1
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 0
48548: PUSH
48549: LD_INT 1
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 1
48558: NEG
48559: PUSH
48560: LD_INT 0
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_INT 1
48569: NEG
48570: PUSH
48571: LD_INT 1
48573: NEG
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 1
48581: NEG
48582: PUSH
48583: LD_INT 2
48585: NEG
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 0
48593: PUSH
48594: LD_INT 2
48596: NEG
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 1
48604: PUSH
48605: LD_INT 1
48607: NEG
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 2
48615: PUSH
48616: LD_INT 0
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 2
48625: PUSH
48626: LD_INT 1
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: LD_INT 2
48635: PUSH
48636: LD_INT 2
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 1
48645: PUSH
48646: LD_INT 2
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 0
48655: PUSH
48656: LD_INT 2
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 1
48665: NEG
48666: PUSH
48667: LD_INT 1
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 2
48676: NEG
48677: PUSH
48678: LD_INT 0
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 2
48687: NEG
48688: PUSH
48689: LD_INT 1
48691: NEG
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 2
48699: NEG
48700: PUSH
48701: LD_INT 2
48703: NEG
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: LIST
48717: LIST
48718: LIST
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: LIST
48726: LIST
48727: LIST
48728: LIST
48729: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48730: LD_ADDR_VAR 0 23
48734: PUSH
48735: LD_INT 0
48737: PUSH
48738: LD_INT 0
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 0
48747: PUSH
48748: LD_INT 1
48750: NEG
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: LD_INT 1
48758: PUSH
48759: LD_INT 0
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 1
48768: PUSH
48769: LD_INT 1
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 0
48778: PUSH
48779: LD_INT 1
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: LD_INT 1
48788: NEG
48789: PUSH
48790: LD_INT 0
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 1
48799: NEG
48800: PUSH
48801: LD_INT 1
48803: NEG
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 1
48811: NEG
48812: PUSH
48813: LD_INT 2
48815: NEG
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 0
48823: PUSH
48824: LD_INT 2
48826: NEG
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 1
48834: PUSH
48835: LD_INT 1
48837: NEG
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 2
48845: PUSH
48846: LD_INT 0
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 2
48855: PUSH
48856: LD_INT 1
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 2
48865: PUSH
48866: LD_INT 2
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 1
48875: PUSH
48876: LD_INT 2
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 0
48885: PUSH
48886: LD_INT 2
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 1
48895: NEG
48896: PUSH
48897: LD_INT 1
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 2
48906: NEG
48907: PUSH
48908: LD_INT 0
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 2
48917: NEG
48918: PUSH
48919: LD_INT 1
48921: NEG
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 2
48929: NEG
48930: PUSH
48931: LD_INT 2
48933: NEG
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 2
48941: NEG
48942: PUSH
48943: LD_INT 3
48945: NEG
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 1
48953: NEG
48954: PUSH
48955: LD_INT 3
48957: NEG
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 1
48965: PUSH
48966: LD_INT 2
48968: NEG
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 2
48976: PUSH
48977: LD_INT 1
48979: NEG
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
49010: LD_ADDR_VAR 0 24
49014: PUSH
49015: LD_INT 0
49017: PUSH
49018: LD_INT 0
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 0
49027: PUSH
49028: LD_INT 1
49030: NEG
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 1
49038: PUSH
49039: LD_INT 0
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 1
49048: PUSH
49049: LD_INT 1
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 0
49058: PUSH
49059: LD_INT 1
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 1
49068: NEG
49069: PUSH
49070: LD_INT 0
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: PUSH
49077: LD_INT 1
49079: NEG
49080: PUSH
49081: LD_INT 1
49083: NEG
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 1
49091: NEG
49092: PUSH
49093: LD_INT 2
49095: NEG
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_INT 0
49103: PUSH
49104: LD_INT 2
49106: NEG
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 1
49114: PUSH
49115: LD_INT 1
49117: NEG
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 2
49125: PUSH
49126: LD_INT 0
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 2
49135: PUSH
49136: LD_INT 1
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 2
49145: PUSH
49146: LD_INT 2
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 1
49155: PUSH
49156: LD_INT 2
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 0
49165: PUSH
49166: LD_INT 2
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 1
49175: NEG
49176: PUSH
49177: LD_INT 1
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 2
49186: NEG
49187: PUSH
49188: LD_INT 0
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 2
49197: NEG
49198: PUSH
49199: LD_INT 1
49201: NEG
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 2
49209: NEG
49210: PUSH
49211: LD_INT 2
49213: NEG
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 1
49221: PUSH
49222: LD_INT 2
49224: NEG
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 2
49232: PUSH
49233: LD_INT 1
49235: NEG
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 3
49243: PUSH
49244: LD_INT 1
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 3
49253: PUSH
49254: LD_INT 2
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
49286: LD_ADDR_VAR 0 25
49290: PUSH
49291: LD_INT 0
49293: PUSH
49294: LD_INT 0
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 0
49303: PUSH
49304: LD_INT 1
49306: NEG
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 1
49314: PUSH
49315: LD_INT 0
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 1
49324: PUSH
49325: LD_INT 1
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 0
49334: PUSH
49335: LD_INT 1
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 1
49344: NEG
49345: PUSH
49346: LD_INT 0
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 1
49355: NEG
49356: PUSH
49357: LD_INT 1
49359: NEG
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 1
49367: NEG
49368: PUSH
49369: LD_INT 2
49371: NEG
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 0
49379: PUSH
49380: LD_INT 2
49382: NEG
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 1
49390: PUSH
49391: LD_INT 1
49393: NEG
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 2
49401: PUSH
49402: LD_INT 0
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 2
49411: PUSH
49412: LD_INT 1
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 2
49421: PUSH
49422: LD_INT 2
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 1
49431: PUSH
49432: LD_INT 2
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 0
49441: PUSH
49442: LD_INT 2
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 1
49451: NEG
49452: PUSH
49453: LD_INT 1
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 2
49462: NEG
49463: PUSH
49464: LD_INT 0
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 2
49473: NEG
49474: PUSH
49475: LD_INT 1
49477: NEG
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: LD_INT 2
49485: NEG
49486: PUSH
49487: LD_INT 2
49489: NEG
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 3
49497: PUSH
49498: LD_INT 1
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 3
49507: PUSH
49508: LD_INT 2
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 2
49517: PUSH
49518: LD_INT 3
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 1
49527: PUSH
49528: LD_INT 3
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49560: LD_ADDR_VAR 0 26
49564: PUSH
49565: LD_INT 0
49567: PUSH
49568: LD_INT 0
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 0
49577: PUSH
49578: LD_INT 1
49580: NEG
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 1
49588: PUSH
49589: LD_INT 0
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 1
49598: PUSH
49599: LD_INT 1
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 0
49608: PUSH
49609: LD_INT 1
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 1
49618: NEG
49619: PUSH
49620: LD_INT 0
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 1
49629: NEG
49630: PUSH
49631: LD_INT 1
49633: NEG
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 1
49641: NEG
49642: PUSH
49643: LD_INT 2
49645: NEG
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 0
49653: PUSH
49654: LD_INT 2
49656: NEG
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 1
49664: PUSH
49665: LD_INT 1
49667: NEG
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 2
49675: PUSH
49676: LD_INT 0
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 2
49685: PUSH
49686: LD_INT 1
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 2
49695: PUSH
49696: LD_INT 2
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 1
49705: PUSH
49706: LD_INT 2
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 0
49715: PUSH
49716: LD_INT 2
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: LD_INT 1
49725: NEG
49726: PUSH
49727: LD_INT 1
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 2
49736: NEG
49737: PUSH
49738: LD_INT 0
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 2
49747: NEG
49748: PUSH
49749: LD_INT 1
49751: NEG
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 2
49759: NEG
49760: PUSH
49761: LD_INT 2
49763: NEG
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 2
49771: PUSH
49772: LD_INT 3
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 1
49781: PUSH
49782: LD_INT 3
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 1
49791: NEG
49792: PUSH
49793: LD_INT 2
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 2
49802: NEG
49803: PUSH
49804: LD_INT 1
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49836: LD_ADDR_VAR 0 27
49840: PUSH
49841: LD_INT 0
49843: PUSH
49844: LD_INT 0
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 0
49853: PUSH
49854: LD_INT 1
49856: NEG
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 1
49864: PUSH
49865: LD_INT 0
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 1
49874: PUSH
49875: LD_INT 1
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 0
49884: PUSH
49885: LD_INT 1
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 1
49894: NEG
49895: PUSH
49896: LD_INT 0
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 1
49905: NEG
49906: PUSH
49907: LD_INT 1
49909: NEG
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 1
49917: NEG
49918: PUSH
49919: LD_INT 2
49921: NEG
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 0
49929: PUSH
49930: LD_INT 2
49932: NEG
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 1
49940: PUSH
49941: LD_INT 1
49943: NEG
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 2
49951: PUSH
49952: LD_INT 0
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 2
49961: PUSH
49962: LD_INT 1
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 2
49971: PUSH
49972: LD_INT 2
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 1
49981: PUSH
49982: LD_INT 2
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 0
49991: PUSH
49992: LD_INT 2
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 1
50001: NEG
50002: PUSH
50003: LD_INT 1
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 2
50012: NEG
50013: PUSH
50014: LD_INT 0
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 2
50023: NEG
50024: PUSH
50025: LD_INT 1
50027: NEG
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 2
50035: NEG
50036: PUSH
50037: LD_INT 2
50039: NEG
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 1
50047: NEG
50048: PUSH
50049: LD_INT 2
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 2
50058: NEG
50059: PUSH
50060: LD_INT 1
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 3
50069: NEG
50070: PUSH
50071: LD_INT 1
50073: NEG
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 3
50081: NEG
50082: PUSH
50083: LD_INT 2
50085: NEG
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50116: LD_ADDR_VAR 0 28
50120: PUSH
50121: LD_INT 0
50123: PUSH
50124: LD_INT 0
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 0
50133: PUSH
50134: LD_INT 1
50136: NEG
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 1
50144: PUSH
50145: LD_INT 0
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 1
50154: PUSH
50155: LD_INT 1
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 0
50164: PUSH
50165: LD_INT 1
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 1
50174: NEG
50175: PUSH
50176: LD_INT 0
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 1
50185: NEG
50186: PUSH
50187: LD_INT 1
50189: NEG
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 1
50197: NEG
50198: PUSH
50199: LD_INT 2
50201: NEG
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 0
50209: PUSH
50210: LD_INT 2
50212: NEG
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 1
50220: PUSH
50221: LD_INT 1
50223: NEG
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 2
50231: PUSH
50232: LD_INT 0
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: LD_INT 2
50241: PUSH
50242: LD_INT 1
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 2
50251: PUSH
50252: LD_INT 2
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 1
50261: PUSH
50262: LD_INT 2
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 0
50271: PUSH
50272: LD_INT 2
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 1
50281: NEG
50282: PUSH
50283: LD_INT 1
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 2
50292: NEG
50293: PUSH
50294: LD_INT 0
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 2
50303: NEG
50304: PUSH
50305: LD_INT 1
50307: NEG
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 2
50315: NEG
50316: PUSH
50317: LD_INT 2
50319: NEG
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 2
50327: NEG
50328: PUSH
50329: LD_INT 3
50331: NEG
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 1
50339: NEG
50340: PUSH
50341: LD_INT 3
50343: NEG
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 3
50351: NEG
50352: PUSH
50353: LD_INT 1
50355: NEG
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 3
50363: NEG
50364: PUSH
50365: LD_INT 2
50367: NEG
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50398: LD_ADDR_VAR 0 29
50402: PUSH
50403: LD_INT 0
50405: PUSH
50406: LD_INT 0
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 0
50415: PUSH
50416: LD_INT 1
50418: NEG
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 1
50426: PUSH
50427: LD_INT 0
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 1
50436: PUSH
50437: LD_INT 1
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 0
50446: PUSH
50447: LD_INT 1
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 1
50456: NEG
50457: PUSH
50458: LD_INT 0
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 1
50467: NEG
50468: PUSH
50469: LD_INT 1
50471: NEG
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 1
50479: NEG
50480: PUSH
50481: LD_INT 2
50483: NEG
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 0
50491: PUSH
50492: LD_INT 2
50494: NEG
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 1
50502: PUSH
50503: LD_INT 1
50505: NEG
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 2
50513: PUSH
50514: LD_INT 0
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 2
50523: PUSH
50524: LD_INT 1
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 1
50533: PUSH
50534: LD_INT 2
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 0
50543: PUSH
50544: LD_INT 2
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 1
50553: NEG
50554: PUSH
50555: LD_INT 1
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 2
50564: NEG
50565: PUSH
50566: LD_INT 1
50568: NEG
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 2
50576: NEG
50577: PUSH
50578: LD_INT 2
50580: NEG
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 2
50588: NEG
50589: PUSH
50590: LD_INT 3
50592: NEG
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 2
50600: PUSH
50601: LD_INT 1
50603: NEG
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 3
50611: PUSH
50612: LD_INT 1
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 1
50621: PUSH
50622: LD_INT 3
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 1
50631: NEG
50632: PUSH
50633: LD_INT 2
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 3
50642: NEG
50643: PUSH
50644: LD_INT 2
50646: NEG
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50677: LD_ADDR_VAR 0 30
50681: PUSH
50682: LD_INT 0
50684: PUSH
50685: LD_INT 0
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 0
50694: PUSH
50695: LD_INT 1
50697: NEG
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 1
50705: PUSH
50706: LD_INT 0
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 1
50715: PUSH
50716: LD_INT 1
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 0
50725: PUSH
50726: LD_INT 1
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 1
50735: NEG
50736: PUSH
50737: LD_INT 0
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 1
50746: NEG
50747: PUSH
50748: LD_INT 1
50750: NEG
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 1
50758: NEG
50759: PUSH
50760: LD_INT 2
50762: NEG
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 0
50770: PUSH
50771: LD_INT 2
50773: NEG
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 1
50781: PUSH
50782: LD_INT 1
50784: NEG
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 2
50792: PUSH
50793: LD_INT 0
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 2
50802: PUSH
50803: LD_INT 1
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 2
50812: PUSH
50813: LD_INT 2
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 1
50822: PUSH
50823: LD_INT 2
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 1
50832: NEG
50833: PUSH
50834: LD_INT 1
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 2
50843: NEG
50844: PUSH
50845: LD_INT 0
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 2
50854: NEG
50855: PUSH
50856: LD_INT 1
50858: NEG
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 1
50866: NEG
50867: PUSH
50868: LD_INT 3
50870: NEG
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 1
50878: PUSH
50879: LD_INT 2
50881: NEG
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 3
50889: PUSH
50890: LD_INT 2
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 2
50899: PUSH
50900: LD_INT 3
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 2
50909: NEG
50910: PUSH
50911: LD_INT 1
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 3
50920: NEG
50921: PUSH
50922: LD_INT 1
50924: NEG
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50955: LD_ADDR_VAR 0 31
50959: PUSH
50960: LD_INT 0
50962: PUSH
50963: LD_INT 0
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 0
50972: PUSH
50973: LD_INT 1
50975: NEG
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 1
50983: PUSH
50984: LD_INT 0
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 1
50993: PUSH
50994: LD_INT 1
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 0
51003: PUSH
51004: LD_INT 1
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 1
51013: NEG
51014: PUSH
51015: LD_INT 0
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 1
51024: NEG
51025: PUSH
51026: LD_INT 1
51028: NEG
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 1
51036: NEG
51037: PUSH
51038: LD_INT 2
51040: NEG
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 1
51048: PUSH
51049: LD_INT 1
51051: NEG
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 2
51059: PUSH
51060: LD_INT 0
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 2
51069: PUSH
51070: LD_INT 1
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 2
51079: PUSH
51080: LD_INT 2
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 1
51089: PUSH
51090: LD_INT 2
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 0
51099: PUSH
51100: LD_INT 2
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 1
51109: NEG
51110: PUSH
51111: LD_INT 1
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 2
51120: NEG
51121: PUSH
51122: LD_INT 1
51124: NEG
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 2
51132: NEG
51133: PUSH
51134: LD_INT 2
51136: NEG
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 2
51144: NEG
51145: PUSH
51146: LD_INT 3
51148: NEG
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 2
51156: PUSH
51157: LD_INT 1
51159: NEG
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 3
51167: PUSH
51168: LD_INT 1
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 1
51177: PUSH
51178: LD_INT 3
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 1
51187: NEG
51188: PUSH
51189: LD_INT 2
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 3
51198: NEG
51199: PUSH
51200: LD_INT 2
51202: NEG
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51233: LD_ADDR_VAR 0 32
51237: PUSH
51238: LD_INT 0
51240: PUSH
51241: LD_INT 0
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 0
51250: PUSH
51251: LD_INT 1
51253: NEG
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 1
51261: PUSH
51262: LD_INT 0
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 1
51271: PUSH
51272: LD_INT 1
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 0
51281: PUSH
51282: LD_INT 1
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 1
51291: NEG
51292: PUSH
51293: LD_INT 0
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 1
51302: NEG
51303: PUSH
51304: LD_INT 1
51306: NEG
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 1
51314: NEG
51315: PUSH
51316: LD_INT 2
51318: NEG
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 0
51326: PUSH
51327: LD_INT 2
51329: NEG
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 1
51337: PUSH
51338: LD_INT 1
51340: NEG
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 2
51348: PUSH
51349: LD_INT 1
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 2
51358: PUSH
51359: LD_INT 2
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 1
51368: PUSH
51369: LD_INT 2
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 0
51378: PUSH
51379: LD_INT 2
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 1
51388: NEG
51389: PUSH
51390: LD_INT 1
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 2
51399: NEG
51400: PUSH
51401: LD_INT 0
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 2
51410: NEG
51411: PUSH
51412: LD_INT 1
51414: NEG
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 1
51422: NEG
51423: PUSH
51424: LD_INT 3
51426: NEG
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 1
51434: PUSH
51435: LD_INT 2
51437: NEG
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 3
51445: PUSH
51446: LD_INT 2
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 2
51455: PUSH
51456: LD_INT 3
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 2
51465: NEG
51466: PUSH
51467: LD_INT 1
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 3
51476: NEG
51477: PUSH
51478: LD_INT 1
51480: NEG
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51511: LD_ADDR_VAR 0 33
51515: PUSH
51516: LD_INT 0
51518: PUSH
51519: LD_INT 0
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 0
51528: PUSH
51529: LD_INT 1
51531: NEG
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 1
51539: PUSH
51540: LD_INT 0
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 1
51549: PUSH
51550: LD_INT 1
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 0
51559: PUSH
51560: LD_INT 1
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 1
51569: NEG
51570: PUSH
51571: LD_INT 0
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 1
51580: NEG
51581: PUSH
51582: LD_INT 1
51584: NEG
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 1
51592: NEG
51593: PUSH
51594: LD_INT 2
51596: NEG
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 1
51604: PUSH
51605: LD_INT 1
51607: NEG
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 2
51615: PUSH
51616: LD_INT 0
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 2
51625: PUSH
51626: LD_INT 1
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 1
51635: PUSH
51636: LD_INT 2
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 0
51645: PUSH
51646: LD_INT 2
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 1
51655: NEG
51656: PUSH
51657: LD_INT 1
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 2
51666: NEG
51667: PUSH
51668: LD_INT 0
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 2
51677: NEG
51678: PUSH
51679: LD_INT 1
51681: NEG
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 2
51689: NEG
51690: PUSH
51691: LD_INT 2
51693: NEG
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 2
51701: NEG
51702: PUSH
51703: LD_INT 3
51705: NEG
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 2
51713: PUSH
51714: LD_INT 1
51716: NEG
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 3
51724: PUSH
51725: LD_INT 1
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 1
51734: PUSH
51735: LD_INT 3
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 1
51744: NEG
51745: PUSH
51746: LD_INT 2
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 3
51755: NEG
51756: PUSH
51757: LD_INT 2
51759: NEG
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51790: LD_ADDR_VAR 0 34
51794: PUSH
51795: LD_INT 0
51797: PUSH
51798: LD_INT 0
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 0
51807: PUSH
51808: LD_INT 1
51810: NEG
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 1
51818: PUSH
51819: LD_INT 0
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 1
51828: PUSH
51829: LD_INT 1
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 0
51838: PUSH
51839: LD_INT 1
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 1
51848: NEG
51849: PUSH
51850: LD_INT 0
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 1
51859: NEG
51860: PUSH
51861: LD_INT 1
51863: NEG
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 1
51871: NEG
51872: PUSH
51873: LD_INT 2
51875: NEG
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 0
51883: PUSH
51884: LD_INT 2
51886: NEG
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 1
51894: PUSH
51895: LD_INT 1
51897: NEG
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 2
51905: PUSH
51906: LD_INT 1
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 2
51915: PUSH
51916: LD_INT 2
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 1
51925: PUSH
51926: LD_INT 2
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 1
51935: NEG
51936: PUSH
51937: LD_INT 1
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 2
51946: NEG
51947: PUSH
51948: LD_INT 0
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 2
51957: NEG
51958: PUSH
51959: LD_INT 1
51961: NEG
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 2
51969: NEG
51970: PUSH
51971: LD_INT 2
51973: NEG
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 1
51981: NEG
51982: PUSH
51983: LD_INT 3
51985: NEG
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 1
51993: PUSH
51994: LD_INT 2
51996: NEG
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 3
52004: PUSH
52005: LD_INT 2
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 2
52014: PUSH
52015: LD_INT 3
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 2
52024: NEG
52025: PUSH
52026: LD_INT 1
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 3
52035: NEG
52036: PUSH
52037: LD_INT 1
52039: NEG
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52070: LD_ADDR_VAR 0 35
52074: PUSH
52075: LD_INT 0
52077: PUSH
52078: LD_INT 0
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 0
52087: PUSH
52088: LD_INT 1
52090: NEG
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 1
52098: PUSH
52099: LD_INT 0
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 1
52108: PUSH
52109: LD_INT 1
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 0
52118: PUSH
52119: LD_INT 1
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 1
52128: NEG
52129: PUSH
52130: LD_INT 0
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 1
52139: NEG
52140: PUSH
52141: LD_INT 1
52143: NEG
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 2
52151: PUSH
52152: LD_INT 1
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 2
52161: NEG
52162: PUSH
52163: LD_INT 1
52165: NEG
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52182: LD_ADDR_VAR 0 36
52186: PUSH
52187: LD_INT 0
52189: PUSH
52190: LD_INT 0
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 0
52199: PUSH
52200: LD_INT 1
52202: NEG
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 1
52210: PUSH
52211: LD_INT 0
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 1
52220: PUSH
52221: LD_INT 1
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 0
52230: PUSH
52231: LD_INT 1
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 1
52240: NEG
52241: PUSH
52242: LD_INT 0
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 1
52251: NEG
52252: PUSH
52253: LD_INT 1
52255: NEG
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 1
52263: NEG
52264: PUSH
52265: LD_INT 2
52267: NEG
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 1
52275: PUSH
52276: LD_INT 2
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52294: LD_ADDR_VAR 0 37
52298: PUSH
52299: LD_INT 0
52301: PUSH
52302: LD_INT 0
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 0
52311: PUSH
52312: LD_INT 1
52314: NEG
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 1
52322: PUSH
52323: LD_INT 0
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 1
52332: PUSH
52333: LD_INT 1
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 0
52342: PUSH
52343: LD_INT 1
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 1
52352: NEG
52353: PUSH
52354: LD_INT 0
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 1
52363: NEG
52364: PUSH
52365: LD_INT 1
52367: NEG
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 1
52375: PUSH
52376: LD_INT 1
52378: NEG
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 1
52386: NEG
52387: PUSH
52388: LD_INT 1
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52406: LD_ADDR_VAR 0 38
52410: PUSH
52411: LD_INT 0
52413: PUSH
52414: LD_INT 0
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 0
52423: PUSH
52424: LD_INT 1
52426: NEG
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: LD_INT 1
52434: PUSH
52435: LD_INT 0
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 1
52444: PUSH
52445: LD_INT 1
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 0
52454: PUSH
52455: LD_INT 1
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 1
52464: NEG
52465: PUSH
52466: LD_INT 0
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 1
52475: NEG
52476: PUSH
52477: LD_INT 1
52479: NEG
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 2
52487: PUSH
52488: LD_INT 1
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 2
52497: NEG
52498: PUSH
52499: LD_INT 1
52501: NEG
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52518: LD_ADDR_VAR 0 39
52522: PUSH
52523: LD_INT 0
52525: PUSH
52526: LD_INT 0
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 0
52535: PUSH
52536: LD_INT 1
52538: NEG
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 1
52546: PUSH
52547: LD_INT 0
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 1
52556: PUSH
52557: LD_INT 1
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 0
52566: PUSH
52567: LD_INT 1
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 1
52576: NEG
52577: PUSH
52578: LD_INT 0
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 1
52587: NEG
52588: PUSH
52589: LD_INT 1
52591: NEG
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 1
52599: NEG
52600: PUSH
52601: LD_INT 2
52603: NEG
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 1
52611: PUSH
52612: LD_INT 2
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52630: LD_ADDR_VAR 0 40
52634: PUSH
52635: LD_INT 0
52637: PUSH
52638: LD_INT 0
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 0
52647: PUSH
52648: LD_INT 1
52650: NEG
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 1
52658: PUSH
52659: LD_INT 0
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 1
52668: PUSH
52669: LD_INT 1
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 0
52678: PUSH
52679: LD_INT 1
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 1
52688: NEG
52689: PUSH
52690: LD_INT 0
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 1
52699: NEG
52700: PUSH
52701: LD_INT 1
52703: NEG
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 1
52711: PUSH
52712: LD_INT 1
52714: NEG
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 1
52722: NEG
52723: PUSH
52724: LD_INT 1
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52742: LD_ADDR_VAR 0 41
52746: PUSH
52747: LD_INT 0
52749: PUSH
52750: LD_INT 0
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 0
52759: PUSH
52760: LD_INT 1
52762: NEG
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 1
52770: PUSH
52771: LD_INT 0
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 1
52780: PUSH
52781: LD_INT 1
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 0
52790: PUSH
52791: LD_INT 1
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 1
52800: NEG
52801: PUSH
52802: LD_INT 0
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 1
52811: NEG
52812: PUSH
52813: LD_INT 1
52815: NEG
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 1
52823: NEG
52824: PUSH
52825: LD_INT 2
52827: NEG
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 1
52835: PUSH
52836: LD_INT 1
52838: NEG
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 2
52846: PUSH
52847: LD_INT 0
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 2
52856: PUSH
52857: LD_INT 1
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 2
52866: PUSH
52867: LD_INT 2
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 1
52876: PUSH
52877: LD_INT 2
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 1
52886: NEG
52887: PUSH
52888: LD_INT 1
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 2
52897: NEG
52898: PUSH
52899: LD_INT 0
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 2
52908: NEG
52909: PUSH
52910: LD_INT 1
52912: NEG
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 2
52920: NEG
52921: PUSH
52922: LD_INT 2
52924: NEG
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 2
52932: NEG
52933: PUSH
52934: LD_INT 3
52936: NEG
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 2
52944: PUSH
52945: LD_INT 1
52947: NEG
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 3
52955: PUSH
52956: LD_INT 0
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 3
52965: PUSH
52966: LD_INT 1
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 3
52975: PUSH
52976: LD_INT 2
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 3
52985: PUSH
52986: LD_INT 3
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 2
52995: PUSH
52996: LD_INT 3
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 2
53005: NEG
53006: PUSH
53007: LD_INT 1
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 3
53016: NEG
53017: PUSH
53018: LD_INT 0
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 3
53027: NEG
53028: PUSH
53029: LD_INT 1
53031: NEG
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 3
53039: NEG
53040: PUSH
53041: LD_INT 2
53043: NEG
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 3
53051: NEG
53052: PUSH
53053: LD_INT 3
53055: NEG
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53092: LD_ADDR_VAR 0 42
53096: PUSH
53097: LD_INT 0
53099: PUSH
53100: LD_INT 0
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 0
53109: PUSH
53110: LD_INT 1
53112: NEG
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 1
53120: PUSH
53121: LD_INT 0
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 1
53130: PUSH
53131: LD_INT 1
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 0
53140: PUSH
53141: LD_INT 1
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 1
53150: NEG
53151: PUSH
53152: LD_INT 0
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 1
53161: NEG
53162: PUSH
53163: LD_INT 1
53165: NEG
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 1
53173: NEG
53174: PUSH
53175: LD_INT 2
53177: NEG
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 0
53185: PUSH
53186: LD_INT 2
53188: NEG
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 1
53196: PUSH
53197: LD_INT 1
53199: NEG
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 2
53207: PUSH
53208: LD_INT 1
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 2
53217: PUSH
53218: LD_INT 2
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 1
53227: PUSH
53228: LD_INT 2
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 0
53237: PUSH
53238: LD_INT 2
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 1
53247: NEG
53248: PUSH
53249: LD_INT 1
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 2
53258: NEG
53259: PUSH
53260: LD_INT 1
53262: NEG
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 2
53270: NEG
53271: PUSH
53272: LD_INT 2
53274: NEG
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 2
53282: NEG
53283: PUSH
53284: LD_INT 3
53286: NEG
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 1
53294: NEG
53295: PUSH
53296: LD_INT 3
53298: NEG
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 0
53306: PUSH
53307: LD_INT 3
53309: NEG
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 1
53317: PUSH
53318: LD_INT 2
53320: NEG
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 3
53328: PUSH
53329: LD_INT 2
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 3
53338: PUSH
53339: LD_INT 3
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 2
53348: PUSH
53349: LD_INT 3
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 1
53358: PUSH
53359: LD_INT 3
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 0
53368: PUSH
53369: LD_INT 3
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 1
53378: NEG
53379: PUSH
53380: LD_INT 2
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 3
53389: NEG
53390: PUSH
53391: LD_INT 2
53393: NEG
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 3
53401: NEG
53402: PUSH
53403: LD_INT 3
53405: NEG
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53442: LD_ADDR_VAR 0 43
53446: PUSH
53447: LD_INT 0
53449: PUSH
53450: LD_INT 0
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 0
53459: PUSH
53460: LD_INT 1
53462: NEG
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 1
53470: PUSH
53471: LD_INT 0
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 1
53480: PUSH
53481: LD_INT 1
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 0
53490: PUSH
53491: LD_INT 1
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 1
53500: NEG
53501: PUSH
53502: LD_INT 0
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 1
53511: NEG
53512: PUSH
53513: LD_INT 1
53515: NEG
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 1
53523: NEG
53524: PUSH
53525: LD_INT 2
53527: NEG
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 0
53535: PUSH
53536: LD_INT 2
53538: NEG
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 1
53546: PUSH
53547: LD_INT 1
53549: NEG
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 2
53557: PUSH
53558: LD_INT 0
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 2
53567: PUSH
53568: LD_INT 1
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 1
53577: PUSH
53578: LD_INT 2
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 0
53587: PUSH
53588: LD_INT 2
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 1
53597: NEG
53598: PUSH
53599: LD_INT 1
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 2
53608: NEG
53609: PUSH
53610: LD_INT 0
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 2
53619: NEG
53620: PUSH
53621: LD_INT 1
53623: NEG
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 1
53631: NEG
53632: PUSH
53633: LD_INT 3
53635: NEG
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 0
53643: PUSH
53644: LD_INT 3
53646: NEG
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 1
53654: PUSH
53655: LD_INT 2
53657: NEG
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 2
53665: PUSH
53666: LD_INT 1
53668: NEG
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 3
53676: PUSH
53677: LD_INT 0
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 3
53686: PUSH
53687: LD_INT 1
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 1
53696: PUSH
53697: LD_INT 3
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 0
53706: PUSH
53707: LD_INT 3
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 1
53716: NEG
53717: PUSH
53718: LD_INT 2
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 2
53727: NEG
53728: PUSH
53729: LD_INT 1
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 3
53738: NEG
53739: PUSH
53740: LD_INT 0
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 3
53749: NEG
53750: PUSH
53751: LD_INT 1
53753: NEG
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53790: LD_ADDR_VAR 0 44
53794: PUSH
53795: LD_INT 0
53797: PUSH
53798: LD_INT 0
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 0
53807: PUSH
53808: LD_INT 1
53810: NEG
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 1
53818: PUSH
53819: LD_INT 0
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: LD_INT 1
53828: PUSH
53829: LD_INT 1
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 0
53838: PUSH
53839: LD_INT 1
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 1
53848: NEG
53849: PUSH
53850: LD_INT 0
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 1
53859: NEG
53860: PUSH
53861: LD_INT 1
53863: NEG
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 1
53871: NEG
53872: PUSH
53873: LD_INT 2
53875: NEG
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 1
53883: PUSH
53884: LD_INT 1
53886: NEG
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 2
53894: PUSH
53895: LD_INT 0
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 2
53904: PUSH
53905: LD_INT 1
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 2
53914: PUSH
53915: LD_INT 2
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 1
53924: PUSH
53925: LD_INT 2
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 1
53934: NEG
53935: PUSH
53936: LD_INT 1
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 2
53945: NEG
53946: PUSH
53947: LD_INT 0
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 2
53956: NEG
53957: PUSH
53958: LD_INT 1
53960: NEG
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 2
53968: NEG
53969: PUSH
53970: LD_INT 2
53972: NEG
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 2
53980: NEG
53981: PUSH
53982: LD_INT 3
53984: NEG
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 2
53992: PUSH
53993: LD_INT 1
53995: NEG
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 3
54003: PUSH
54004: LD_INT 0
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 3
54013: PUSH
54014: LD_INT 1
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 3
54023: PUSH
54024: LD_INT 2
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 3
54033: PUSH
54034: LD_INT 3
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 2
54043: PUSH
54044: LD_INT 3
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 2
54053: NEG
54054: PUSH
54055: LD_INT 1
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 3
54064: NEG
54065: PUSH
54066: LD_INT 0
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 3
54075: NEG
54076: PUSH
54077: LD_INT 1
54079: NEG
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 3
54087: NEG
54088: PUSH
54089: LD_INT 2
54091: NEG
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 3
54099: NEG
54100: PUSH
54101: LD_INT 3
54103: NEG
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54140: LD_ADDR_VAR 0 45
54144: PUSH
54145: LD_INT 0
54147: PUSH
54148: LD_INT 0
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 0
54157: PUSH
54158: LD_INT 1
54160: NEG
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 1
54168: PUSH
54169: LD_INT 0
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 1
54178: PUSH
54179: LD_INT 1
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 0
54188: PUSH
54189: LD_INT 1
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 1
54198: NEG
54199: PUSH
54200: LD_INT 0
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 1
54209: NEG
54210: PUSH
54211: LD_INT 1
54213: NEG
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 1
54221: NEG
54222: PUSH
54223: LD_INT 2
54225: NEG
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 0
54233: PUSH
54234: LD_INT 2
54236: NEG
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 1
54244: PUSH
54245: LD_INT 1
54247: NEG
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 2
54255: PUSH
54256: LD_INT 1
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 2
54265: PUSH
54266: LD_INT 2
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 1
54275: PUSH
54276: LD_INT 2
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 0
54285: PUSH
54286: LD_INT 2
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 1
54295: NEG
54296: PUSH
54297: LD_INT 1
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 2
54306: NEG
54307: PUSH
54308: LD_INT 1
54310: NEG
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 2
54318: NEG
54319: PUSH
54320: LD_INT 2
54322: NEG
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 2
54330: NEG
54331: PUSH
54332: LD_INT 3
54334: NEG
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 1
54342: NEG
54343: PUSH
54344: LD_INT 3
54346: NEG
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 0
54354: PUSH
54355: LD_INT 3
54357: NEG
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 1
54365: PUSH
54366: LD_INT 2
54368: NEG
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 3
54376: PUSH
54377: LD_INT 2
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 3
54386: PUSH
54387: LD_INT 3
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 2
54396: PUSH
54397: LD_INT 3
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 1
54406: PUSH
54407: LD_INT 3
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 0
54416: PUSH
54417: LD_INT 3
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 1
54426: NEG
54427: PUSH
54428: LD_INT 2
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 3
54437: NEG
54438: PUSH
54439: LD_INT 2
54441: NEG
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 3
54449: NEG
54450: PUSH
54451: LD_INT 3
54453: NEG
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: LIST
54488: LIST
54489: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54490: LD_ADDR_VAR 0 46
54494: PUSH
54495: LD_INT 0
54497: PUSH
54498: LD_INT 0
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 0
54507: PUSH
54508: LD_INT 1
54510: NEG
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 1
54518: PUSH
54519: LD_INT 0
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 1
54528: PUSH
54529: LD_INT 1
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 0
54538: PUSH
54539: LD_INT 1
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 1
54548: NEG
54549: PUSH
54550: LD_INT 0
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 1
54559: NEG
54560: PUSH
54561: LD_INT 1
54563: NEG
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 1
54571: NEG
54572: PUSH
54573: LD_INT 2
54575: NEG
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 0
54583: PUSH
54584: LD_INT 2
54586: NEG
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 1
54594: PUSH
54595: LD_INT 1
54597: NEG
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 2
54605: PUSH
54606: LD_INT 0
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 2
54615: PUSH
54616: LD_INT 1
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 1
54625: PUSH
54626: LD_INT 2
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 0
54635: PUSH
54636: LD_INT 2
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 1
54645: NEG
54646: PUSH
54647: LD_INT 1
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 2
54656: NEG
54657: PUSH
54658: LD_INT 0
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 2
54667: NEG
54668: PUSH
54669: LD_INT 1
54671: NEG
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 1
54679: NEG
54680: PUSH
54681: LD_INT 3
54683: NEG
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 0
54691: PUSH
54692: LD_INT 3
54694: NEG
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 1
54702: PUSH
54703: LD_INT 2
54705: NEG
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 2
54713: PUSH
54714: LD_INT 1
54716: NEG
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 3
54724: PUSH
54725: LD_INT 0
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 3
54734: PUSH
54735: LD_INT 1
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 1
54744: PUSH
54745: LD_INT 3
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 0
54754: PUSH
54755: LD_INT 3
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 1
54764: NEG
54765: PUSH
54766: LD_INT 2
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 2
54775: NEG
54776: PUSH
54777: LD_INT 1
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 3
54786: NEG
54787: PUSH
54788: LD_INT 0
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 3
54797: NEG
54798: PUSH
54799: LD_INT 1
54801: NEG
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54838: LD_ADDR_VAR 0 47
54842: PUSH
54843: LD_INT 0
54845: PUSH
54846: LD_INT 0
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 0
54855: PUSH
54856: LD_INT 1
54858: NEG
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 1
54866: PUSH
54867: LD_INT 0
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 1
54876: PUSH
54877: LD_INT 1
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 0
54886: PUSH
54887: LD_INT 1
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 1
54896: NEG
54897: PUSH
54898: LD_INT 0
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 1
54907: NEG
54908: PUSH
54909: LD_INT 1
54911: NEG
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 1
54919: NEG
54920: PUSH
54921: LD_INT 2
54923: NEG
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 0
54931: PUSH
54932: LD_INT 2
54934: NEG
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 1
54942: PUSH
54943: LD_INT 1
54945: NEG
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 2
54953: NEG
54954: PUSH
54955: LD_INT 1
54957: NEG
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 2
54965: NEG
54966: PUSH
54967: LD_INT 2
54969: NEG
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54989: LD_ADDR_VAR 0 48
54993: PUSH
54994: LD_INT 0
54996: PUSH
54997: LD_INT 0
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 0
55006: PUSH
55007: LD_INT 1
55009: NEG
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 1
55017: PUSH
55018: LD_INT 0
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 1
55027: PUSH
55028: LD_INT 1
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 0
55037: PUSH
55038: LD_INT 1
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 1
55047: NEG
55048: PUSH
55049: LD_INT 0
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 1
55058: NEG
55059: PUSH
55060: LD_INT 1
55062: NEG
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 1
55070: NEG
55071: PUSH
55072: LD_INT 2
55074: NEG
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 0
55082: PUSH
55083: LD_INT 2
55085: NEG
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 1
55093: PUSH
55094: LD_INT 1
55096: NEG
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 2
55104: PUSH
55105: LD_INT 0
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 2
55114: PUSH
55115: LD_INT 1
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55136: LD_ADDR_VAR 0 49
55140: PUSH
55141: LD_INT 0
55143: PUSH
55144: LD_INT 0
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 0
55153: PUSH
55154: LD_INT 1
55156: NEG
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 1
55164: PUSH
55165: LD_INT 0
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 1
55174: PUSH
55175: LD_INT 1
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 0
55184: PUSH
55185: LD_INT 1
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 1
55194: NEG
55195: PUSH
55196: LD_INT 0
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 1
55205: NEG
55206: PUSH
55207: LD_INT 1
55209: NEG
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 1
55217: PUSH
55218: LD_INT 1
55220: NEG
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 2
55228: PUSH
55229: LD_INT 0
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 2
55238: PUSH
55239: LD_INT 1
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 2
55248: PUSH
55249: LD_INT 2
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 1
55258: PUSH
55259: LD_INT 2
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55280: LD_ADDR_VAR 0 50
55284: PUSH
55285: LD_INT 0
55287: PUSH
55288: LD_INT 0
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 0
55297: PUSH
55298: LD_INT 1
55300: NEG
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 1
55308: PUSH
55309: LD_INT 0
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 1
55318: PUSH
55319: LD_INT 1
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 0
55328: PUSH
55329: LD_INT 1
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 1
55338: NEG
55339: PUSH
55340: LD_INT 0
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 1
55349: NEG
55350: PUSH
55351: LD_INT 1
55353: NEG
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 2
55361: PUSH
55362: LD_INT 1
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 2
55371: PUSH
55372: LD_INT 2
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 1
55381: PUSH
55382: LD_INT 2
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 0
55391: PUSH
55392: LD_INT 2
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 1
55401: NEG
55402: PUSH
55403: LD_INT 1
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55424: LD_ADDR_VAR 0 51
55428: PUSH
55429: LD_INT 0
55431: PUSH
55432: LD_INT 0
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 0
55441: PUSH
55442: LD_INT 1
55444: NEG
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 1
55452: PUSH
55453: LD_INT 0
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 1
55462: PUSH
55463: LD_INT 1
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 0
55472: PUSH
55473: LD_INT 1
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 1
55482: NEG
55483: PUSH
55484: LD_INT 0
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 1
55493: NEG
55494: PUSH
55495: LD_INT 1
55497: NEG
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 1
55505: PUSH
55506: LD_INT 2
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 0
55515: PUSH
55516: LD_INT 2
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 1
55525: NEG
55526: PUSH
55527: LD_INT 1
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 2
55536: NEG
55537: PUSH
55538: LD_INT 0
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 2
55547: NEG
55548: PUSH
55549: LD_INT 1
55551: NEG
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55571: LD_ADDR_VAR 0 52
55575: PUSH
55576: LD_INT 0
55578: PUSH
55579: LD_INT 0
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 0
55588: PUSH
55589: LD_INT 1
55591: NEG
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 1
55599: PUSH
55600: LD_INT 0
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 1
55609: PUSH
55610: LD_INT 1
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 0
55619: PUSH
55620: LD_INT 1
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 1
55629: NEG
55630: PUSH
55631: LD_INT 0
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 1
55640: NEG
55641: PUSH
55642: LD_INT 1
55644: NEG
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 1
55652: NEG
55653: PUSH
55654: LD_INT 2
55656: NEG
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 1
55664: NEG
55665: PUSH
55666: LD_INT 1
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 2
55675: NEG
55676: PUSH
55677: LD_INT 0
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 2
55686: NEG
55687: PUSH
55688: LD_INT 1
55690: NEG
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 2
55698: NEG
55699: PUSH
55700: LD_INT 2
55702: NEG
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55722: LD_ADDR_VAR 0 53
55726: PUSH
55727: LD_INT 0
55729: PUSH
55730: LD_INT 0
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 0
55739: PUSH
55740: LD_INT 1
55742: NEG
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 1
55750: PUSH
55751: LD_INT 0
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 1
55760: PUSH
55761: LD_INT 1
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 0
55770: PUSH
55771: LD_INT 1
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 1
55780: NEG
55781: PUSH
55782: LD_INT 0
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 1
55791: NEG
55792: PUSH
55793: LD_INT 1
55795: NEG
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 1
55803: NEG
55804: PUSH
55805: LD_INT 2
55807: NEG
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 0
55815: PUSH
55816: LD_INT 2
55818: NEG
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 1
55826: PUSH
55827: LD_INT 1
55829: NEG
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: LD_INT 2
55837: PUSH
55838: LD_INT 0
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 2
55847: PUSH
55848: LD_INT 1
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 2
55857: PUSH
55858: LD_INT 2
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 1
55867: PUSH
55868: LD_INT 2
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 0
55877: PUSH
55878: LD_INT 2
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 1
55887: NEG
55888: PUSH
55889: LD_INT 1
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 2
55898: NEG
55899: PUSH
55900: LD_INT 0
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 2
55909: NEG
55910: PUSH
55911: LD_INT 1
55913: NEG
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 2
55921: NEG
55922: PUSH
55923: LD_INT 2
55925: NEG
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55952: LD_ADDR_VAR 0 54
55956: PUSH
55957: LD_INT 0
55959: PUSH
55960: LD_INT 0
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 0
55969: PUSH
55970: LD_INT 1
55972: NEG
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 1
55980: PUSH
55981: LD_INT 0
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 1
55990: PUSH
55991: LD_INT 1
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 0
56000: PUSH
56001: LD_INT 1
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 1
56010: NEG
56011: PUSH
56012: LD_INT 0
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 1
56021: NEG
56022: PUSH
56023: LD_INT 1
56025: NEG
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 1
56033: NEG
56034: PUSH
56035: LD_INT 2
56037: NEG
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 0
56045: PUSH
56046: LD_INT 2
56048: NEG
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 1
56056: PUSH
56057: LD_INT 1
56059: NEG
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 2
56067: PUSH
56068: LD_INT 0
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 2
56077: PUSH
56078: LD_INT 1
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 2
56087: PUSH
56088: LD_INT 2
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 1
56097: PUSH
56098: LD_INT 2
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 0
56107: PUSH
56108: LD_INT 2
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 1
56117: NEG
56118: PUSH
56119: LD_INT 1
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 2
56128: NEG
56129: PUSH
56130: LD_INT 0
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 2
56139: NEG
56140: PUSH
56141: LD_INT 1
56143: NEG
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 2
56151: NEG
56152: PUSH
56153: LD_INT 2
56155: NEG
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56182: LD_ADDR_VAR 0 55
56186: PUSH
56187: LD_INT 0
56189: PUSH
56190: LD_INT 0
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 0
56199: PUSH
56200: LD_INT 1
56202: NEG
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 1
56210: PUSH
56211: LD_INT 0
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 1
56220: PUSH
56221: LD_INT 1
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 0
56230: PUSH
56231: LD_INT 1
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 1
56240: NEG
56241: PUSH
56242: LD_INT 0
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 1
56251: NEG
56252: PUSH
56253: LD_INT 1
56255: NEG
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 1
56263: NEG
56264: PUSH
56265: LD_INT 2
56267: NEG
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 0
56275: PUSH
56276: LD_INT 2
56278: NEG
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 1
56286: PUSH
56287: LD_INT 1
56289: NEG
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 2
56297: PUSH
56298: LD_INT 0
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 2
56307: PUSH
56308: LD_INT 1
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 2
56317: PUSH
56318: LD_INT 2
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 1
56327: PUSH
56328: LD_INT 2
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 0
56337: PUSH
56338: LD_INT 2
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 1
56347: NEG
56348: PUSH
56349: LD_INT 1
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 2
56358: NEG
56359: PUSH
56360: LD_INT 0
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 2
56369: NEG
56370: PUSH
56371: LD_INT 1
56373: NEG
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 2
56381: NEG
56382: PUSH
56383: LD_INT 2
56385: NEG
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56412: LD_ADDR_VAR 0 56
56416: PUSH
56417: LD_INT 0
56419: PUSH
56420: LD_INT 0
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 0
56429: PUSH
56430: LD_INT 1
56432: NEG
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 1
56440: PUSH
56441: LD_INT 0
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 1
56450: PUSH
56451: LD_INT 1
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 0
56460: PUSH
56461: LD_INT 1
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 1
56470: NEG
56471: PUSH
56472: LD_INT 0
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 1
56481: NEG
56482: PUSH
56483: LD_INT 1
56485: NEG
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 1
56493: NEG
56494: PUSH
56495: LD_INT 2
56497: NEG
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 0
56505: PUSH
56506: LD_INT 2
56508: NEG
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: LD_INT 1
56516: PUSH
56517: LD_INT 1
56519: NEG
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 2
56527: PUSH
56528: LD_INT 0
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 2
56537: PUSH
56538: LD_INT 1
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 2
56547: PUSH
56548: LD_INT 2
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 1
56557: PUSH
56558: LD_INT 2
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 0
56567: PUSH
56568: LD_INT 2
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 1
56577: NEG
56578: PUSH
56579: LD_INT 1
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 2
56588: NEG
56589: PUSH
56590: LD_INT 0
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 2
56599: NEG
56600: PUSH
56601: LD_INT 1
56603: NEG
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 2
56611: NEG
56612: PUSH
56613: LD_INT 2
56615: NEG
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56642: LD_ADDR_VAR 0 57
56646: PUSH
56647: LD_INT 0
56649: PUSH
56650: LD_INT 0
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 0
56659: PUSH
56660: LD_INT 1
56662: NEG
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 1
56670: PUSH
56671: LD_INT 0
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 1
56680: PUSH
56681: LD_INT 1
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 0
56690: PUSH
56691: LD_INT 1
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 1
56700: NEG
56701: PUSH
56702: LD_INT 0
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 1
56711: NEG
56712: PUSH
56713: LD_INT 1
56715: NEG
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 1
56723: NEG
56724: PUSH
56725: LD_INT 2
56727: NEG
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 0
56735: PUSH
56736: LD_INT 2
56738: NEG
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 1
56746: PUSH
56747: LD_INT 1
56749: NEG
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: LD_INT 2
56757: PUSH
56758: LD_INT 0
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 2
56767: PUSH
56768: LD_INT 1
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 2
56777: PUSH
56778: LD_INT 2
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 1
56787: PUSH
56788: LD_INT 2
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 0
56797: PUSH
56798: LD_INT 2
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 1
56807: NEG
56808: PUSH
56809: LD_INT 1
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 2
56818: NEG
56819: PUSH
56820: LD_INT 0
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 2
56829: NEG
56830: PUSH
56831: LD_INT 1
56833: NEG
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 2
56841: NEG
56842: PUSH
56843: LD_INT 2
56845: NEG
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56872: LD_ADDR_VAR 0 58
56876: PUSH
56877: LD_INT 0
56879: PUSH
56880: LD_INT 0
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: LD_INT 0
56889: PUSH
56890: LD_INT 1
56892: NEG
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 1
56900: PUSH
56901: LD_INT 0
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 1
56910: PUSH
56911: LD_INT 1
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 0
56920: PUSH
56921: LD_INT 1
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: PUSH
56928: LD_INT 1
56930: NEG
56931: PUSH
56932: LD_INT 0
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: LD_INT 1
56941: NEG
56942: PUSH
56943: LD_INT 1
56945: NEG
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PUSH
56951: LD_INT 1
56953: NEG
56954: PUSH
56955: LD_INT 2
56957: NEG
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 0
56965: PUSH
56966: LD_INT 2
56968: NEG
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 1
56976: PUSH
56977: LD_INT 1
56979: NEG
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 2
56987: PUSH
56988: LD_INT 0
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 2
56997: PUSH
56998: LD_INT 1
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 2
57007: PUSH
57008: LD_INT 2
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 1
57017: PUSH
57018: LD_INT 2
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 0
57027: PUSH
57028: LD_INT 2
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 1
57037: NEG
57038: PUSH
57039: LD_INT 1
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 2
57048: NEG
57049: PUSH
57050: LD_INT 0
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 2
57059: NEG
57060: PUSH
57061: LD_INT 1
57063: NEG
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 2
57071: NEG
57072: PUSH
57073: LD_INT 2
57075: NEG
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57102: LD_ADDR_VAR 0 59
57106: PUSH
57107: LD_INT 0
57109: PUSH
57110: LD_INT 0
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 0
57119: PUSH
57120: LD_INT 1
57122: NEG
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 1
57130: PUSH
57131: LD_INT 0
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 1
57140: PUSH
57141: LD_INT 1
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 0
57150: PUSH
57151: LD_INT 1
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 1
57160: NEG
57161: PUSH
57162: LD_INT 0
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 1
57171: NEG
57172: PUSH
57173: LD_INT 1
57175: NEG
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57190: LD_ADDR_VAR 0 60
57194: PUSH
57195: LD_INT 0
57197: PUSH
57198: LD_INT 0
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 0
57207: PUSH
57208: LD_INT 1
57210: NEG
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 1
57218: PUSH
57219: LD_INT 0
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 1
57228: PUSH
57229: LD_INT 1
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 0
57238: PUSH
57239: LD_INT 1
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 1
57248: NEG
57249: PUSH
57250: LD_INT 0
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: LD_INT 1
57259: NEG
57260: PUSH
57261: LD_INT 1
57263: NEG
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: LIST
57273: LIST
57274: LIST
57275: LIST
57276: LIST
57277: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57278: LD_ADDR_VAR 0 61
57282: PUSH
57283: LD_INT 0
57285: PUSH
57286: LD_INT 0
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 0
57295: PUSH
57296: LD_INT 1
57298: NEG
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 1
57306: PUSH
57307: LD_INT 0
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 1
57316: PUSH
57317: LD_INT 1
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 0
57326: PUSH
57327: LD_INT 1
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 1
57336: NEG
57337: PUSH
57338: LD_INT 0
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 1
57347: NEG
57348: PUSH
57349: LD_INT 1
57351: NEG
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: LIST
57364: LIST
57365: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57366: LD_ADDR_VAR 0 62
57370: PUSH
57371: LD_INT 0
57373: PUSH
57374: LD_INT 0
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 0
57383: PUSH
57384: LD_INT 1
57386: NEG
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 1
57394: PUSH
57395: LD_INT 0
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 1
57404: PUSH
57405: LD_INT 1
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 0
57414: PUSH
57415: LD_INT 1
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 1
57424: NEG
57425: PUSH
57426: LD_INT 0
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 1
57435: NEG
57436: PUSH
57437: LD_INT 1
57439: NEG
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57454: LD_ADDR_VAR 0 63
57458: PUSH
57459: LD_INT 0
57461: PUSH
57462: LD_INT 0
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 0
57471: PUSH
57472: LD_INT 1
57474: NEG
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 1
57482: PUSH
57483: LD_INT 0
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 1
57492: PUSH
57493: LD_INT 1
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 0
57502: PUSH
57503: LD_INT 1
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 1
57512: NEG
57513: PUSH
57514: LD_INT 0
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 1
57523: NEG
57524: PUSH
57525: LD_INT 1
57527: NEG
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57542: LD_ADDR_VAR 0 64
57546: PUSH
57547: LD_INT 0
57549: PUSH
57550: LD_INT 0
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 0
57559: PUSH
57560: LD_INT 1
57562: NEG
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 1
57570: PUSH
57571: LD_INT 0
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 1
57580: PUSH
57581: LD_INT 1
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 0
57590: PUSH
57591: LD_INT 1
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 1
57600: NEG
57601: PUSH
57602: LD_INT 0
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 1
57611: NEG
57612: PUSH
57613: LD_INT 1
57615: NEG
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: ST_TO_ADDR
// end ; 1 :
57630: GO 63527
57632: LD_INT 1
57634: DOUBLE
57635: EQUAL
57636: IFTRUE 57640
57638: GO 60263
57640: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57641: LD_ADDR_VAR 0 11
57645: PUSH
57646: LD_INT 1
57648: NEG
57649: PUSH
57650: LD_INT 3
57652: NEG
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 0
57660: PUSH
57661: LD_INT 3
57663: NEG
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 1
57671: PUSH
57672: LD_INT 2
57674: NEG
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: LIST
57684: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57685: LD_ADDR_VAR 0 12
57689: PUSH
57690: LD_INT 2
57692: PUSH
57693: LD_INT 1
57695: NEG
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 3
57703: PUSH
57704: LD_INT 0
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 3
57713: PUSH
57714: LD_INT 1
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: LIST
57725: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57726: LD_ADDR_VAR 0 13
57730: PUSH
57731: LD_INT 3
57733: PUSH
57734: LD_INT 2
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 3
57743: PUSH
57744: LD_INT 3
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 2
57753: PUSH
57754: LD_INT 3
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: LIST
57765: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57766: LD_ADDR_VAR 0 14
57770: PUSH
57771: LD_INT 1
57773: PUSH
57774: LD_INT 3
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 0
57783: PUSH
57784: LD_INT 3
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 1
57793: NEG
57794: PUSH
57795: LD_INT 2
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: LIST
57806: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57807: LD_ADDR_VAR 0 15
57811: PUSH
57812: LD_INT 2
57814: NEG
57815: PUSH
57816: LD_INT 1
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: LD_INT 3
57825: NEG
57826: PUSH
57827: LD_INT 0
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 3
57836: NEG
57837: PUSH
57838: LD_INT 1
57840: NEG
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: LIST
57850: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57851: LD_ADDR_VAR 0 16
57855: PUSH
57856: LD_INT 2
57858: NEG
57859: PUSH
57860: LD_INT 3
57862: NEG
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 3
57870: NEG
57871: PUSH
57872: LD_INT 2
57874: NEG
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 3
57882: NEG
57883: PUSH
57884: LD_INT 3
57886: NEG
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: LIST
57896: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57897: LD_ADDR_VAR 0 17
57901: PUSH
57902: LD_INT 1
57904: NEG
57905: PUSH
57906: LD_INT 3
57908: NEG
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 0
57916: PUSH
57917: LD_INT 3
57919: NEG
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 1
57927: PUSH
57928: LD_INT 2
57930: NEG
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: LIST
57940: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57941: LD_ADDR_VAR 0 18
57945: PUSH
57946: LD_INT 2
57948: PUSH
57949: LD_INT 1
57951: NEG
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 3
57959: PUSH
57960: LD_INT 0
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: LD_INT 3
57969: PUSH
57970: LD_INT 1
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: LIST
57981: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57982: LD_ADDR_VAR 0 19
57986: PUSH
57987: LD_INT 3
57989: PUSH
57990: LD_INT 2
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 3
57999: PUSH
58000: LD_INT 3
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 2
58009: PUSH
58010: LD_INT 3
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: LIST
58021: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58022: LD_ADDR_VAR 0 20
58026: PUSH
58027: LD_INT 1
58029: PUSH
58030: LD_INT 3
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 0
58039: PUSH
58040: LD_INT 3
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 1
58049: NEG
58050: PUSH
58051: LD_INT 2
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: LIST
58062: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58063: LD_ADDR_VAR 0 21
58067: PUSH
58068: LD_INT 2
58070: NEG
58071: PUSH
58072: LD_INT 1
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 3
58081: NEG
58082: PUSH
58083: LD_INT 0
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 3
58092: NEG
58093: PUSH
58094: LD_INT 1
58096: NEG
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: LIST
58106: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58107: LD_ADDR_VAR 0 22
58111: PUSH
58112: LD_INT 2
58114: NEG
58115: PUSH
58116: LD_INT 3
58118: NEG
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 3
58126: NEG
58127: PUSH
58128: LD_INT 2
58130: NEG
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 3
58138: NEG
58139: PUSH
58140: LD_INT 3
58142: NEG
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: LIST
58152: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
58153: LD_ADDR_VAR 0 23
58157: PUSH
58158: LD_INT 0
58160: PUSH
58161: LD_INT 3
58163: NEG
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 1
58171: NEG
58172: PUSH
58173: LD_INT 4
58175: NEG
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 1
58183: PUSH
58184: LD_INT 3
58186: NEG
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: LIST
58196: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
58197: LD_ADDR_VAR 0 24
58201: PUSH
58202: LD_INT 3
58204: PUSH
58205: LD_INT 0
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 3
58214: PUSH
58215: LD_INT 1
58217: NEG
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 4
58225: PUSH
58226: LD_INT 1
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: LIST
58237: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
58238: LD_ADDR_VAR 0 25
58242: PUSH
58243: LD_INT 3
58245: PUSH
58246: LD_INT 3
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 4
58255: PUSH
58256: LD_INT 3
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 3
58265: PUSH
58266: LD_INT 4
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: LIST
58277: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
58278: LD_ADDR_VAR 0 26
58282: PUSH
58283: LD_INT 0
58285: PUSH
58286: LD_INT 3
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 1
58295: PUSH
58296: LD_INT 4
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 1
58305: NEG
58306: PUSH
58307: LD_INT 3
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: LIST
58318: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58319: LD_ADDR_VAR 0 27
58323: PUSH
58324: LD_INT 3
58326: NEG
58327: PUSH
58328: LD_INT 0
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 3
58337: NEG
58338: PUSH
58339: LD_INT 1
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 4
58348: NEG
58349: PUSH
58350: LD_INT 1
58352: NEG
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: LIST
58362: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58363: LD_ADDR_VAR 0 28
58367: PUSH
58368: LD_INT 3
58370: NEG
58371: PUSH
58372: LD_INT 3
58374: NEG
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 3
58382: NEG
58383: PUSH
58384: LD_INT 4
58386: NEG
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 4
58394: NEG
58395: PUSH
58396: LD_INT 3
58398: NEG
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: LIST
58408: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58409: LD_ADDR_VAR 0 29
58413: PUSH
58414: LD_INT 1
58416: NEG
58417: PUSH
58418: LD_INT 3
58420: NEG
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 0
58428: PUSH
58429: LD_INT 3
58431: NEG
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 1
58439: PUSH
58440: LD_INT 2
58442: NEG
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 1
58450: NEG
58451: PUSH
58452: LD_INT 4
58454: NEG
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: PUSH
58460: LD_INT 0
58462: PUSH
58463: LD_INT 4
58465: NEG
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 1
58473: PUSH
58474: LD_INT 3
58476: NEG
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 1
58484: NEG
58485: PUSH
58486: LD_INT 5
58488: NEG
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 0
58496: PUSH
58497: LD_INT 5
58499: NEG
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 1
58507: PUSH
58508: LD_INT 4
58510: NEG
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 1
58518: NEG
58519: PUSH
58520: LD_INT 6
58522: NEG
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 0
58530: PUSH
58531: LD_INT 6
58533: NEG
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 1
58541: PUSH
58542: LD_INT 5
58544: NEG
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58564: LD_ADDR_VAR 0 30
58568: PUSH
58569: LD_INT 2
58571: PUSH
58572: LD_INT 1
58574: NEG
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: LD_INT 3
58582: PUSH
58583: LD_INT 0
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 3
58592: PUSH
58593: LD_INT 1
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 3
58602: PUSH
58603: LD_INT 1
58605: NEG
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 4
58613: PUSH
58614: LD_INT 0
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 4
58623: PUSH
58624: LD_INT 1
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 4
58633: PUSH
58634: LD_INT 1
58636: NEG
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 5
58644: PUSH
58645: LD_INT 0
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 5
58654: PUSH
58655: LD_INT 1
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 5
58664: PUSH
58665: LD_INT 1
58667: NEG
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 6
58675: PUSH
58676: LD_INT 0
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 6
58685: PUSH
58686: LD_INT 1
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58707: LD_ADDR_VAR 0 31
58711: PUSH
58712: LD_INT 3
58714: PUSH
58715: LD_INT 2
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 3
58724: PUSH
58725: LD_INT 3
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 2
58734: PUSH
58735: LD_INT 3
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 4
58744: PUSH
58745: LD_INT 3
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 4
58754: PUSH
58755: LD_INT 4
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 3
58764: PUSH
58765: LD_INT 4
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 5
58774: PUSH
58775: LD_INT 4
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 5
58784: PUSH
58785: LD_INT 5
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 4
58794: PUSH
58795: LD_INT 5
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 6
58804: PUSH
58805: LD_INT 5
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 6
58814: PUSH
58815: LD_INT 6
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 5
58824: PUSH
58825: LD_INT 6
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58846: LD_ADDR_VAR 0 32
58850: PUSH
58851: LD_INT 1
58853: PUSH
58854: LD_INT 3
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 0
58863: PUSH
58864: LD_INT 3
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: LD_INT 1
58873: NEG
58874: PUSH
58875: LD_INT 2
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 1
58884: PUSH
58885: LD_INT 4
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 0
58894: PUSH
58895: LD_INT 4
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 1
58904: NEG
58905: PUSH
58906: LD_INT 3
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 1
58915: PUSH
58916: LD_INT 5
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 0
58925: PUSH
58926: LD_INT 5
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 1
58935: NEG
58936: PUSH
58937: LD_INT 4
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 1
58946: PUSH
58947: LD_INT 6
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 0
58956: PUSH
58957: LD_INT 6
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 1
58966: NEG
58967: PUSH
58968: LD_INT 5
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58989: LD_ADDR_VAR 0 33
58993: PUSH
58994: LD_INT 2
58996: NEG
58997: PUSH
58998: LD_INT 1
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 3
59007: NEG
59008: PUSH
59009: LD_INT 0
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 3
59018: NEG
59019: PUSH
59020: LD_INT 1
59022: NEG
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: LD_INT 3
59030: NEG
59031: PUSH
59032: LD_INT 1
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 4
59041: NEG
59042: PUSH
59043: LD_INT 0
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 4
59052: NEG
59053: PUSH
59054: LD_INT 1
59056: NEG
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 4
59064: NEG
59065: PUSH
59066: LD_INT 1
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 5
59075: NEG
59076: PUSH
59077: LD_INT 0
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: LD_INT 5
59086: NEG
59087: PUSH
59088: LD_INT 1
59090: NEG
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 5
59098: NEG
59099: PUSH
59100: LD_INT 1
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: LD_INT 6
59109: NEG
59110: PUSH
59111: LD_INT 0
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: LD_INT 6
59120: NEG
59121: PUSH
59122: LD_INT 1
59124: NEG
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
59144: LD_ADDR_VAR 0 34
59148: PUSH
59149: LD_INT 2
59151: NEG
59152: PUSH
59153: LD_INT 3
59155: NEG
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 3
59163: NEG
59164: PUSH
59165: LD_INT 2
59167: NEG
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 3
59175: NEG
59176: PUSH
59177: LD_INT 3
59179: NEG
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 3
59187: NEG
59188: PUSH
59189: LD_INT 4
59191: NEG
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 4
59199: NEG
59200: PUSH
59201: LD_INT 3
59203: NEG
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 4
59211: NEG
59212: PUSH
59213: LD_INT 4
59215: NEG
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 4
59223: NEG
59224: PUSH
59225: LD_INT 5
59227: NEG
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 5
59235: NEG
59236: PUSH
59237: LD_INT 4
59239: NEG
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 5
59247: NEG
59248: PUSH
59249: LD_INT 5
59251: NEG
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: LD_INT 5
59259: NEG
59260: PUSH
59261: LD_INT 6
59263: NEG
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 6
59271: NEG
59272: PUSH
59273: LD_INT 5
59275: NEG
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 6
59283: NEG
59284: PUSH
59285: LD_INT 6
59287: NEG
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59307: LD_ADDR_VAR 0 41
59311: PUSH
59312: LD_INT 0
59314: PUSH
59315: LD_INT 2
59317: NEG
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 1
59325: NEG
59326: PUSH
59327: LD_INT 3
59329: NEG
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 1
59337: PUSH
59338: LD_INT 2
59340: NEG
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: LIST
59350: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59351: LD_ADDR_VAR 0 42
59355: PUSH
59356: LD_INT 2
59358: PUSH
59359: LD_INT 0
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 2
59368: PUSH
59369: LD_INT 1
59371: NEG
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 3
59379: PUSH
59380: LD_INT 1
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: LIST
59391: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59392: LD_ADDR_VAR 0 43
59396: PUSH
59397: LD_INT 2
59399: PUSH
59400: LD_INT 2
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: LD_INT 3
59409: PUSH
59410: LD_INT 2
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: LD_INT 2
59419: PUSH
59420: LD_INT 3
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: LIST
59431: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59432: LD_ADDR_VAR 0 44
59436: PUSH
59437: LD_INT 0
59439: PUSH
59440: LD_INT 2
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 1
59449: PUSH
59450: LD_INT 3
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 1
59459: NEG
59460: PUSH
59461: LD_INT 2
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: LIST
59472: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59473: LD_ADDR_VAR 0 45
59477: PUSH
59478: LD_INT 2
59480: NEG
59481: PUSH
59482: LD_INT 0
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: LD_INT 2
59491: NEG
59492: PUSH
59493: LD_INT 1
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: PUSH
59500: LD_INT 3
59502: NEG
59503: PUSH
59504: LD_INT 1
59506: NEG
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: LIST
59516: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59517: LD_ADDR_VAR 0 46
59521: PUSH
59522: LD_INT 2
59524: NEG
59525: PUSH
59526: LD_INT 2
59528: NEG
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: LD_INT 2
59536: NEG
59537: PUSH
59538: LD_INT 3
59540: NEG
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 3
59548: NEG
59549: PUSH
59550: LD_INT 2
59552: NEG
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: LIST
59562: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59563: LD_ADDR_VAR 0 47
59567: PUSH
59568: LD_INT 2
59570: NEG
59571: PUSH
59572: LD_INT 3
59574: NEG
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 1
59582: NEG
59583: PUSH
59584: LD_INT 3
59586: NEG
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59596: LD_ADDR_VAR 0 48
59600: PUSH
59601: LD_INT 1
59603: PUSH
59604: LD_INT 2
59606: NEG
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 2
59614: PUSH
59615: LD_INT 1
59617: NEG
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
59627: LD_ADDR_VAR 0 49
59631: PUSH
59632: LD_INT 3
59634: PUSH
59635: LD_INT 1
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 3
59644: PUSH
59645: LD_INT 2
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
59656: LD_ADDR_VAR 0 50
59660: PUSH
59661: LD_INT 2
59663: PUSH
59664: LD_INT 3
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 1
59673: PUSH
59674: LD_INT 3
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59685: LD_ADDR_VAR 0 51
59689: PUSH
59690: LD_INT 1
59692: NEG
59693: PUSH
59694: LD_INT 2
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: LD_INT 2
59703: NEG
59704: PUSH
59705: LD_INT 1
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59716: LD_ADDR_VAR 0 52
59720: PUSH
59721: LD_INT 3
59723: NEG
59724: PUSH
59725: LD_INT 1
59727: NEG
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: PUSH
59733: LD_INT 3
59735: NEG
59736: PUSH
59737: LD_INT 2
59739: NEG
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59749: LD_ADDR_VAR 0 53
59753: PUSH
59754: LD_INT 1
59756: NEG
59757: PUSH
59758: LD_INT 3
59760: NEG
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 0
59768: PUSH
59769: LD_INT 3
59771: NEG
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 1
59779: PUSH
59780: LD_INT 2
59782: NEG
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: LIST
59792: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59793: LD_ADDR_VAR 0 54
59797: PUSH
59798: LD_INT 2
59800: PUSH
59801: LD_INT 1
59803: NEG
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 3
59811: PUSH
59812: LD_INT 0
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: LD_INT 3
59821: PUSH
59822: LD_INT 1
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: LIST
59833: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59834: LD_ADDR_VAR 0 55
59838: PUSH
59839: LD_INT 3
59841: PUSH
59842: LD_INT 2
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 3
59851: PUSH
59852: LD_INT 3
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PUSH
59859: LD_INT 2
59861: PUSH
59862: LD_INT 3
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: LIST
59873: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59874: LD_ADDR_VAR 0 56
59878: PUSH
59879: LD_INT 1
59881: PUSH
59882: LD_INT 3
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 0
59891: PUSH
59892: LD_INT 3
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: LD_INT 1
59901: NEG
59902: PUSH
59903: LD_INT 2
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: LIST
59914: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59915: LD_ADDR_VAR 0 57
59919: PUSH
59920: LD_INT 2
59922: NEG
59923: PUSH
59924: LD_INT 1
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 3
59933: NEG
59934: PUSH
59935: LD_INT 0
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PUSH
59942: LD_INT 3
59944: NEG
59945: PUSH
59946: LD_INT 1
59948: NEG
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: LIST
59958: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59959: LD_ADDR_VAR 0 58
59963: PUSH
59964: LD_INT 2
59966: NEG
59967: PUSH
59968: LD_INT 3
59970: NEG
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 3
59978: NEG
59979: PUSH
59980: LD_INT 2
59982: NEG
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 3
59990: NEG
59991: PUSH
59992: LD_INT 3
59994: NEG
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: LIST
60004: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
60005: LD_ADDR_VAR 0 59
60009: PUSH
60010: LD_INT 1
60012: NEG
60013: PUSH
60014: LD_INT 2
60016: NEG
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 0
60024: PUSH
60025: LD_INT 2
60027: NEG
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PUSH
60033: LD_INT 1
60035: PUSH
60036: LD_INT 1
60038: NEG
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: LIST
60048: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60049: LD_ADDR_VAR 0 60
60053: PUSH
60054: LD_INT 1
60056: PUSH
60057: LD_INT 1
60059: NEG
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 2
60067: PUSH
60068: LD_INT 0
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 2
60077: PUSH
60078: LD_INT 1
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: LIST
60089: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60090: LD_ADDR_VAR 0 61
60094: PUSH
60095: LD_INT 2
60097: PUSH
60098: LD_INT 1
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: PUSH
60105: LD_INT 2
60107: PUSH
60108: LD_INT 2
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 1
60117: PUSH
60118: LD_INT 2
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: LIST
60129: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60130: LD_ADDR_VAR 0 62
60134: PUSH
60135: LD_INT 1
60137: PUSH
60138: LD_INT 2
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 0
60147: PUSH
60148: LD_INT 2
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 1
60157: NEG
60158: PUSH
60159: LD_INT 1
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: LIST
60170: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60171: LD_ADDR_VAR 0 63
60175: PUSH
60176: LD_INT 1
60178: NEG
60179: PUSH
60180: LD_INT 1
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 2
60189: NEG
60190: PUSH
60191: LD_INT 0
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 2
60200: NEG
60201: PUSH
60202: LD_INT 1
60204: NEG
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: LIST
60214: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60215: LD_ADDR_VAR 0 64
60219: PUSH
60220: LD_INT 1
60222: NEG
60223: PUSH
60224: LD_INT 2
60226: NEG
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: LD_INT 2
60234: NEG
60235: PUSH
60236: LD_INT 1
60238: NEG
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 2
60246: NEG
60247: PUSH
60248: LD_INT 2
60250: NEG
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: LIST
60260: ST_TO_ADDR
// end ; 2 :
60261: GO 63527
60263: LD_INT 2
60265: DOUBLE
60266: EQUAL
60267: IFTRUE 60271
60269: GO 63526
60271: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
60272: LD_ADDR_VAR 0 29
60276: PUSH
60277: LD_INT 4
60279: PUSH
60280: LD_INT 0
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 4
60289: PUSH
60290: LD_INT 1
60292: NEG
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 5
60300: PUSH
60301: LD_INT 0
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 5
60310: PUSH
60311: LD_INT 1
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: LD_INT 4
60320: PUSH
60321: LD_INT 1
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: LD_INT 3
60330: PUSH
60331: LD_INT 0
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 3
60340: PUSH
60341: LD_INT 1
60343: NEG
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 3
60351: PUSH
60352: LD_INT 2
60354: NEG
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 5
60362: PUSH
60363: LD_INT 2
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: PUSH
60370: LD_INT 3
60372: PUSH
60373: LD_INT 3
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: LD_INT 3
60382: PUSH
60383: LD_INT 2
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: PUSH
60390: LD_INT 4
60392: PUSH
60393: LD_INT 3
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PUSH
60400: LD_INT 4
60402: PUSH
60403: LD_INT 4
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 3
60412: PUSH
60413: LD_INT 4
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 2
60422: PUSH
60423: LD_INT 3
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 2
60432: PUSH
60433: LD_INT 2
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 4
60442: PUSH
60443: LD_INT 2
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 2
60452: PUSH
60453: LD_INT 4
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 0
60462: PUSH
60463: LD_INT 4
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 0
60472: PUSH
60473: LD_INT 3
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 1
60482: PUSH
60483: LD_INT 4
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: PUSH
60490: LD_INT 1
60492: PUSH
60493: LD_INT 5
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 0
60502: PUSH
60503: LD_INT 5
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 1
60512: NEG
60513: PUSH
60514: LD_INT 4
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 1
60523: NEG
60524: PUSH
60525: LD_INT 3
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 2
60534: PUSH
60535: LD_INT 5
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 2
60544: NEG
60545: PUSH
60546: LD_INT 3
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: LD_INT 3
60555: NEG
60556: PUSH
60557: LD_INT 0
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: LD_INT 3
60566: NEG
60567: PUSH
60568: LD_INT 1
60570: NEG
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 2
60578: NEG
60579: PUSH
60580: LD_INT 0
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 2
60589: NEG
60590: PUSH
60591: LD_INT 1
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: LD_INT 3
60600: NEG
60601: PUSH
60602: LD_INT 1
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 4
60611: NEG
60612: PUSH
60613: LD_INT 0
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: PUSH
60620: LD_INT 4
60622: NEG
60623: PUSH
60624: LD_INT 1
60626: NEG
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 4
60634: NEG
60635: PUSH
60636: LD_INT 2
60638: NEG
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 2
60646: NEG
60647: PUSH
60648: LD_INT 2
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: LD_INT 4
60657: NEG
60658: PUSH
60659: LD_INT 4
60661: NEG
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 4
60669: NEG
60670: PUSH
60671: LD_INT 5
60673: NEG
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: LD_INT 3
60681: NEG
60682: PUSH
60683: LD_INT 4
60685: NEG
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 3
60693: NEG
60694: PUSH
60695: LD_INT 3
60697: NEG
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: LD_INT 4
60705: NEG
60706: PUSH
60707: LD_INT 3
60709: NEG
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 5
60717: NEG
60718: PUSH
60719: LD_INT 4
60721: NEG
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: LD_INT 5
60729: NEG
60730: PUSH
60731: LD_INT 5
60733: NEG
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 3
60741: NEG
60742: PUSH
60743: LD_INT 5
60745: NEG
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 5
60753: NEG
60754: PUSH
60755: LD_INT 3
60757: NEG
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: LIST
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60810: LD_ADDR_VAR 0 30
60814: PUSH
60815: LD_INT 4
60817: PUSH
60818: LD_INT 4
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: PUSH
60825: LD_INT 4
60827: PUSH
60828: LD_INT 3
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: PUSH
60835: LD_INT 5
60837: PUSH
60838: LD_INT 4
60840: PUSH
60841: EMPTY
60842: LIST
60843: LIST
60844: PUSH
60845: LD_INT 5
60847: PUSH
60848: LD_INT 5
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: LD_INT 4
60857: PUSH
60858: LD_INT 5
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 3
60867: PUSH
60868: LD_INT 4
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 3
60877: PUSH
60878: LD_INT 3
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 5
60887: PUSH
60888: LD_INT 3
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 3
60897: PUSH
60898: LD_INT 5
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 0
60907: PUSH
60908: LD_INT 3
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 0
60917: PUSH
60918: LD_INT 2
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 1
60927: PUSH
60928: LD_INT 3
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 1
60937: PUSH
60938: LD_INT 4
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 0
60947: PUSH
60948: LD_INT 4
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 1
60957: NEG
60958: PUSH
60959: LD_INT 3
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 1
60968: NEG
60969: PUSH
60970: LD_INT 2
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: LD_INT 2
60979: PUSH
60980: LD_INT 4
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 2
60989: NEG
60990: PUSH
60991: LD_INT 2
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: PUSH
60998: LD_INT 4
61000: NEG
61001: PUSH
61002: LD_INT 0
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: LD_INT 4
61011: NEG
61012: PUSH
61013: LD_INT 1
61015: NEG
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 3
61023: NEG
61024: PUSH
61025: LD_INT 0
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 3
61034: NEG
61035: PUSH
61036: LD_INT 1
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: PUSH
61043: LD_INT 4
61045: NEG
61046: PUSH
61047: LD_INT 1
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PUSH
61054: LD_INT 5
61056: NEG
61057: PUSH
61058: LD_INT 0
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: LD_INT 5
61067: NEG
61068: PUSH
61069: LD_INT 1
61071: NEG
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: LD_INT 5
61079: NEG
61080: PUSH
61081: LD_INT 2
61083: NEG
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: LD_INT 3
61091: NEG
61092: PUSH
61093: LD_INT 2
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: PUSH
61100: LD_INT 3
61102: NEG
61103: PUSH
61104: LD_INT 3
61106: NEG
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 3
61114: NEG
61115: PUSH
61116: LD_INT 4
61118: NEG
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 2
61126: NEG
61127: PUSH
61128: LD_INT 3
61130: NEG
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 2
61138: NEG
61139: PUSH
61140: LD_INT 2
61142: NEG
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: LD_INT 3
61150: NEG
61151: PUSH
61152: LD_INT 2
61154: NEG
61155: PUSH
61156: EMPTY
61157: LIST
61158: LIST
61159: PUSH
61160: LD_INT 4
61162: NEG
61163: PUSH
61164: LD_INT 3
61166: NEG
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PUSH
61172: LD_INT 4
61174: NEG
61175: PUSH
61176: LD_INT 4
61178: NEG
61179: PUSH
61180: EMPTY
61181: LIST
61182: LIST
61183: PUSH
61184: LD_INT 2
61186: NEG
61187: PUSH
61188: LD_INT 4
61190: NEG
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: PUSH
61196: LD_INT 4
61198: NEG
61199: PUSH
61200: LD_INT 2
61202: NEG
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: PUSH
61208: LD_INT 0
61210: PUSH
61211: LD_INT 4
61213: NEG
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 0
61221: PUSH
61222: LD_INT 5
61224: NEG
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 1
61232: PUSH
61233: LD_INT 4
61235: NEG
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 1
61243: PUSH
61244: LD_INT 3
61246: NEG
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: PUSH
61252: LD_INT 0
61254: PUSH
61255: LD_INT 3
61257: NEG
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 1
61265: NEG
61266: PUSH
61267: LD_INT 4
61269: NEG
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: LD_INT 1
61277: NEG
61278: PUSH
61279: LD_INT 5
61281: NEG
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: PUSH
61287: LD_INT 2
61289: PUSH
61290: LD_INT 3
61292: NEG
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 2
61300: NEG
61301: PUSH
61302: LD_INT 5
61304: NEG
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: LIST
61314: LIST
61315: LIST
61316: LIST
61317: LIST
61318: LIST
61319: LIST
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: LIST
61326: LIST
61327: LIST
61328: LIST
61329: LIST
61330: LIST
61331: LIST
61332: LIST
61333: LIST
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61357: LD_ADDR_VAR 0 31
61361: PUSH
61362: LD_INT 0
61364: PUSH
61365: LD_INT 4
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: LD_INT 0
61374: PUSH
61375: LD_INT 3
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: PUSH
61382: LD_INT 1
61384: PUSH
61385: LD_INT 4
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: LD_INT 1
61394: PUSH
61395: LD_INT 5
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: PUSH
61402: LD_INT 0
61404: PUSH
61405: LD_INT 5
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PUSH
61412: LD_INT 1
61414: NEG
61415: PUSH
61416: LD_INT 4
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: LD_INT 1
61425: NEG
61426: PUSH
61427: LD_INT 3
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: PUSH
61434: LD_INT 2
61436: PUSH
61437: LD_INT 5
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: PUSH
61444: LD_INT 2
61446: NEG
61447: PUSH
61448: LD_INT 3
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 3
61457: NEG
61458: PUSH
61459: LD_INT 0
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: LD_INT 3
61468: NEG
61469: PUSH
61470: LD_INT 1
61472: NEG
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: PUSH
61478: LD_INT 2
61480: NEG
61481: PUSH
61482: LD_INT 0
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: PUSH
61489: LD_INT 2
61491: NEG
61492: PUSH
61493: LD_INT 1
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 3
61502: NEG
61503: PUSH
61504: LD_INT 1
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: PUSH
61511: LD_INT 4
61513: NEG
61514: PUSH
61515: LD_INT 0
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: PUSH
61522: LD_INT 4
61524: NEG
61525: PUSH
61526: LD_INT 1
61528: NEG
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: PUSH
61534: LD_INT 4
61536: NEG
61537: PUSH
61538: LD_INT 2
61540: NEG
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 2
61548: NEG
61549: PUSH
61550: LD_INT 2
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 4
61559: NEG
61560: PUSH
61561: LD_INT 4
61563: NEG
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: PUSH
61569: LD_INT 4
61571: NEG
61572: PUSH
61573: LD_INT 5
61575: NEG
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: PUSH
61581: LD_INT 3
61583: NEG
61584: PUSH
61585: LD_INT 4
61587: NEG
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: LD_INT 3
61595: NEG
61596: PUSH
61597: LD_INT 3
61599: NEG
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PUSH
61605: LD_INT 4
61607: NEG
61608: PUSH
61609: LD_INT 3
61611: NEG
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 5
61619: NEG
61620: PUSH
61621: LD_INT 4
61623: NEG
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 5
61631: NEG
61632: PUSH
61633: LD_INT 5
61635: NEG
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: PUSH
61641: LD_INT 3
61643: NEG
61644: PUSH
61645: LD_INT 5
61647: NEG
61648: PUSH
61649: EMPTY
61650: LIST
61651: LIST
61652: PUSH
61653: LD_INT 5
61655: NEG
61656: PUSH
61657: LD_INT 3
61659: NEG
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: PUSH
61665: LD_INT 0
61667: PUSH
61668: LD_INT 3
61670: NEG
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: LD_INT 0
61678: PUSH
61679: LD_INT 4
61681: NEG
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 1
61689: PUSH
61690: LD_INT 3
61692: NEG
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: LD_INT 1
61700: PUSH
61701: LD_INT 2
61703: NEG
61704: PUSH
61705: EMPTY
61706: LIST
61707: LIST
61708: PUSH
61709: LD_INT 0
61711: PUSH
61712: LD_INT 2
61714: NEG
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: PUSH
61720: LD_INT 1
61722: NEG
61723: PUSH
61724: LD_INT 3
61726: NEG
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: LD_INT 1
61734: NEG
61735: PUSH
61736: LD_INT 4
61738: NEG
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 2
61746: PUSH
61747: LD_INT 2
61749: NEG
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: LD_INT 2
61757: NEG
61758: PUSH
61759: LD_INT 4
61761: NEG
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 4
61769: PUSH
61770: LD_INT 0
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: PUSH
61777: LD_INT 4
61779: PUSH
61780: LD_INT 1
61782: NEG
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: LD_INT 5
61790: PUSH
61791: LD_INT 0
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: PUSH
61798: LD_INT 5
61800: PUSH
61801: LD_INT 1
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 4
61810: PUSH
61811: LD_INT 1
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: PUSH
61818: LD_INT 3
61820: PUSH
61821: LD_INT 0
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: PUSH
61828: LD_INT 3
61830: PUSH
61831: LD_INT 1
61833: NEG
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: LD_INT 3
61841: PUSH
61842: LD_INT 2
61844: NEG
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 5
61852: PUSH
61853: LD_INT 2
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: LIST
61871: LIST
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61907: LD_ADDR_VAR 0 32
61911: PUSH
61912: LD_INT 4
61914: NEG
61915: PUSH
61916: LD_INT 0
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: PUSH
61923: LD_INT 4
61925: NEG
61926: PUSH
61927: LD_INT 1
61929: NEG
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: LD_INT 3
61937: NEG
61938: PUSH
61939: LD_INT 0
61941: PUSH
61942: EMPTY
61943: LIST
61944: LIST
61945: PUSH
61946: LD_INT 3
61948: NEG
61949: PUSH
61950: LD_INT 1
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 4
61959: NEG
61960: PUSH
61961: LD_INT 1
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: LD_INT 5
61970: NEG
61971: PUSH
61972: LD_INT 0
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 5
61981: NEG
61982: PUSH
61983: LD_INT 1
61985: NEG
61986: PUSH
61987: EMPTY
61988: LIST
61989: LIST
61990: PUSH
61991: LD_INT 5
61993: NEG
61994: PUSH
61995: LD_INT 2
61997: NEG
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: LD_INT 3
62005: NEG
62006: PUSH
62007: LD_INT 2
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PUSH
62014: LD_INT 3
62016: NEG
62017: PUSH
62018: LD_INT 3
62020: NEG
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: LD_INT 3
62028: NEG
62029: PUSH
62030: LD_INT 4
62032: NEG
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: PUSH
62038: LD_INT 2
62040: NEG
62041: PUSH
62042: LD_INT 3
62044: NEG
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: PUSH
62050: LD_INT 2
62052: NEG
62053: PUSH
62054: LD_INT 2
62056: NEG
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: LD_INT 3
62064: NEG
62065: PUSH
62066: LD_INT 2
62068: NEG
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: LD_INT 4
62076: NEG
62077: PUSH
62078: LD_INT 3
62080: NEG
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: PUSH
62086: LD_INT 4
62088: NEG
62089: PUSH
62090: LD_INT 4
62092: NEG
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: PUSH
62098: LD_INT 2
62100: NEG
62101: PUSH
62102: LD_INT 4
62104: NEG
62105: PUSH
62106: EMPTY
62107: LIST
62108: LIST
62109: PUSH
62110: LD_INT 4
62112: NEG
62113: PUSH
62114: LD_INT 2
62116: NEG
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: LD_INT 0
62124: PUSH
62125: LD_INT 4
62127: NEG
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 0
62135: PUSH
62136: LD_INT 5
62138: NEG
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: LD_INT 1
62146: PUSH
62147: LD_INT 4
62149: NEG
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 1
62157: PUSH
62158: LD_INT 3
62160: NEG
62161: PUSH
62162: EMPTY
62163: LIST
62164: LIST
62165: PUSH
62166: LD_INT 0
62168: PUSH
62169: LD_INT 3
62171: NEG
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: PUSH
62177: LD_INT 1
62179: NEG
62180: PUSH
62181: LD_INT 4
62183: NEG
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: LD_INT 1
62191: NEG
62192: PUSH
62193: LD_INT 5
62195: NEG
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: LD_INT 2
62203: PUSH
62204: LD_INT 3
62206: NEG
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: PUSH
62212: LD_INT 2
62214: NEG
62215: PUSH
62216: LD_INT 5
62218: NEG
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: LD_INT 3
62226: PUSH
62227: LD_INT 0
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: PUSH
62234: LD_INT 3
62236: PUSH
62237: LD_INT 1
62239: NEG
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: PUSH
62245: LD_INT 4
62247: PUSH
62248: LD_INT 0
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: PUSH
62255: LD_INT 4
62257: PUSH
62258: LD_INT 1
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: PUSH
62265: LD_INT 3
62267: PUSH
62268: LD_INT 1
62270: PUSH
62271: EMPTY
62272: LIST
62273: LIST
62274: PUSH
62275: LD_INT 2
62277: PUSH
62278: LD_INT 0
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: PUSH
62285: LD_INT 2
62287: PUSH
62288: LD_INT 1
62290: NEG
62291: PUSH
62292: EMPTY
62293: LIST
62294: LIST
62295: PUSH
62296: LD_INT 2
62298: PUSH
62299: LD_INT 2
62301: NEG
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: PUSH
62307: LD_INT 4
62309: PUSH
62310: LD_INT 2
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: PUSH
62317: LD_INT 4
62319: PUSH
62320: LD_INT 4
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: PUSH
62327: LD_INT 4
62329: PUSH
62330: LD_INT 3
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 5
62339: PUSH
62340: LD_INT 4
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 5
62349: PUSH
62350: LD_INT 5
62352: PUSH
62353: EMPTY
62354: LIST
62355: LIST
62356: PUSH
62357: LD_INT 4
62359: PUSH
62360: LD_INT 5
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: PUSH
62367: LD_INT 3
62369: PUSH
62370: LD_INT 4
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: PUSH
62377: LD_INT 3
62379: PUSH
62380: LD_INT 3
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: PUSH
62387: LD_INT 5
62389: PUSH
62390: LD_INT 3
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 3
62399: PUSH
62400: LD_INT 5
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: PUSH
62407: EMPTY
62408: LIST
62409: LIST
62410: LIST
62411: LIST
62412: LIST
62413: LIST
62414: LIST
62415: LIST
62416: LIST
62417: LIST
62418: LIST
62419: LIST
62420: LIST
62421: LIST
62422: LIST
62423: LIST
62424: LIST
62425: LIST
62426: LIST
62427: LIST
62428: LIST
62429: LIST
62430: LIST
62431: LIST
62432: LIST
62433: LIST
62434: LIST
62435: LIST
62436: LIST
62437: LIST
62438: LIST
62439: LIST
62440: LIST
62441: LIST
62442: LIST
62443: LIST
62444: LIST
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62454: LD_ADDR_VAR 0 33
62458: PUSH
62459: LD_INT 4
62461: NEG
62462: PUSH
62463: LD_INT 4
62465: NEG
62466: PUSH
62467: EMPTY
62468: LIST
62469: LIST
62470: PUSH
62471: LD_INT 4
62473: NEG
62474: PUSH
62475: LD_INT 5
62477: NEG
62478: PUSH
62479: EMPTY
62480: LIST
62481: LIST
62482: PUSH
62483: LD_INT 3
62485: NEG
62486: PUSH
62487: LD_INT 4
62489: NEG
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: PUSH
62495: LD_INT 3
62497: NEG
62498: PUSH
62499: LD_INT 3
62501: NEG
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: PUSH
62507: LD_INT 4
62509: NEG
62510: PUSH
62511: LD_INT 3
62513: NEG
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: PUSH
62519: LD_INT 5
62521: NEG
62522: PUSH
62523: LD_INT 4
62525: NEG
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: PUSH
62531: LD_INT 5
62533: NEG
62534: PUSH
62535: LD_INT 5
62537: NEG
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: PUSH
62543: LD_INT 3
62545: NEG
62546: PUSH
62547: LD_INT 5
62549: NEG
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: PUSH
62555: LD_INT 5
62557: NEG
62558: PUSH
62559: LD_INT 3
62561: NEG
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: PUSH
62567: LD_INT 0
62569: PUSH
62570: LD_INT 3
62572: NEG
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: PUSH
62578: LD_INT 0
62580: PUSH
62581: LD_INT 4
62583: NEG
62584: PUSH
62585: EMPTY
62586: LIST
62587: LIST
62588: PUSH
62589: LD_INT 1
62591: PUSH
62592: LD_INT 3
62594: NEG
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: PUSH
62600: LD_INT 1
62602: PUSH
62603: LD_INT 2
62605: NEG
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: PUSH
62611: LD_INT 0
62613: PUSH
62614: LD_INT 2
62616: NEG
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: PUSH
62622: LD_INT 1
62624: NEG
62625: PUSH
62626: LD_INT 3
62628: NEG
62629: PUSH
62630: EMPTY
62631: LIST
62632: LIST
62633: PUSH
62634: LD_INT 1
62636: NEG
62637: PUSH
62638: LD_INT 4
62640: NEG
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: PUSH
62646: LD_INT 2
62648: PUSH
62649: LD_INT 2
62651: NEG
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: PUSH
62657: LD_INT 2
62659: NEG
62660: PUSH
62661: LD_INT 4
62663: NEG
62664: PUSH
62665: EMPTY
62666: LIST
62667: LIST
62668: PUSH
62669: LD_INT 4
62671: PUSH
62672: LD_INT 0
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PUSH
62679: LD_INT 4
62681: PUSH
62682: LD_INT 1
62684: NEG
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: PUSH
62690: LD_INT 5
62692: PUSH
62693: LD_INT 0
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: LD_INT 5
62702: PUSH
62703: LD_INT 1
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: LD_INT 4
62712: PUSH
62713: LD_INT 1
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: PUSH
62720: LD_INT 3
62722: PUSH
62723: LD_INT 0
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: LD_INT 3
62732: PUSH
62733: LD_INT 1
62735: NEG
62736: PUSH
62737: EMPTY
62738: LIST
62739: LIST
62740: PUSH
62741: LD_INT 3
62743: PUSH
62744: LD_INT 2
62746: NEG
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: PUSH
62752: LD_INT 5
62754: PUSH
62755: LD_INT 2
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: LD_INT 3
62764: PUSH
62765: LD_INT 3
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: PUSH
62772: LD_INT 3
62774: PUSH
62775: LD_INT 2
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: PUSH
62782: LD_INT 4
62784: PUSH
62785: LD_INT 3
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: PUSH
62792: LD_INT 4
62794: PUSH
62795: LD_INT 4
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: LD_INT 3
62804: PUSH
62805: LD_INT 4
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: PUSH
62812: LD_INT 2
62814: PUSH
62815: LD_INT 3
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: PUSH
62822: LD_INT 2
62824: PUSH
62825: LD_INT 2
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: PUSH
62832: LD_INT 4
62834: PUSH
62835: LD_INT 2
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_INT 2
62844: PUSH
62845: LD_INT 4
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: PUSH
62852: LD_INT 0
62854: PUSH
62855: LD_INT 4
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: PUSH
62862: LD_INT 0
62864: PUSH
62865: LD_INT 3
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: PUSH
62872: LD_INT 1
62874: PUSH
62875: LD_INT 4
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: PUSH
62882: LD_INT 1
62884: PUSH
62885: LD_INT 5
62887: PUSH
62888: EMPTY
62889: LIST
62890: LIST
62891: PUSH
62892: LD_INT 0
62894: PUSH
62895: LD_INT 5
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: LD_INT 1
62904: NEG
62905: PUSH
62906: LD_INT 4
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: PUSH
62913: LD_INT 1
62915: NEG
62916: PUSH
62917: LD_INT 3
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: PUSH
62924: LD_INT 2
62926: PUSH
62927: LD_INT 5
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: PUSH
62934: LD_INT 2
62936: NEG
62937: PUSH
62938: LD_INT 3
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: PUSH
62945: EMPTY
62946: LIST
62947: LIST
62948: LIST
62949: LIST
62950: LIST
62951: LIST
62952: LIST
62953: LIST
62954: LIST
62955: LIST
62956: LIST
62957: LIST
62958: LIST
62959: LIST
62960: LIST
62961: LIST
62962: LIST
62963: LIST
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: LIST
62969: LIST
62970: LIST
62971: LIST
62972: LIST
62973: LIST
62974: LIST
62975: LIST
62976: LIST
62977: LIST
62978: LIST
62979: LIST
62980: LIST
62981: LIST
62982: LIST
62983: LIST
62984: LIST
62985: LIST
62986: LIST
62987: LIST
62988: LIST
62989: LIST
62990: LIST
62991: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62992: LD_ADDR_VAR 0 34
62996: PUSH
62997: LD_INT 0
62999: PUSH
63000: LD_INT 4
63002: NEG
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: PUSH
63008: LD_INT 0
63010: PUSH
63011: LD_INT 5
63013: NEG
63014: PUSH
63015: EMPTY
63016: LIST
63017: LIST
63018: PUSH
63019: LD_INT 1
63021: PUSH
63022: LD_INT 4
63024: NEG
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: PUSH
63030: LD_INT 1
63032: PUSH
63033: LD_INT 3
63035: NEG
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: PUSH
63041: LD_INT 0
63043: PUSH
63044: LD_INT 3
63046: NEG
63047: PUSH
63048: EMPTY
63049: LIST
63050: LIST
63051: PUSH
63052: LD_INT 1
63054: NEG
63055: PUSH
63056: LD_INT 4
63058: NEG
63059: PUSH
63060: EMPTY
63061: LIST
63062: LIST
63063: PUSH
63064: LD_INT 1
63066: NEG
63067: PUSH
63068: LD_INT 5
63070: NEG
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: PUSH
63076: LD_INT 2
63078: PUSH
63079: LD_INT 3
63081: NEG
63082: PUSH
63083: EMPTY
63084: LIST
63085: LIST
63086: PUSH
63087: LD_INT 2
63089: NEG
63090: PUSH
63091: LD_INT 5
63093: NEG
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: LD_INT 3
63101: PUSH
63102: LD_INT 0
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: LD_INT 3
63111: PUSH
63112: LD_INT 1
63114: NEG
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: PUSH
63120: LD_INT 4
63122: PUSH
63123: LD_INT 0
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PUSH
63130: LD_INT 4
63132: PUSH
63133: LD_INT 1
63135: PUSH
63136: EMPTY
63137: LIST
63138: LIST
63139: PUSH
63140: LD_INT 3
63142: PUSH
63143: LD_INT 1
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: PUSH
63150: LD_INT 2
63152: PUSH
63153: LD_INT 0
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: LD_INT 2
63162: PUSH
63163: LD_INT 1
63165: NEG
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 2
63173: PUSH
63174: LD_INT 2
63176: NEG
63177: PUSH
63178: EMPTY
63179: LIST
63180: LIST
63181: PUSH
63182: LD_INT 4
63184: PUSH
63185: LD_INT 2
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PUSH
63192: LD_INT 4
63194: PUSH
63195: LD_INT 4
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: LD_INT 4
63204: PUSH
63205: LD_INT 3
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: PUSH
63212: LD_INT 5
63214: PUSH
63215: LD_INT 4
63217: PUSH
63218: EMPTY
63219: LIST
63220: LIST
63221: PUSH
63222: LD_INT 5
63224: PUSH
63225: LD_INT 5
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PUSH
63232: LD_INT 4
63234: PUSH
63235: LD_INT 5
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: PUSH
63242: LD_INT 3
63244: PUSH
63245: LD_INT 4
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: LD_INT 3
63254: PUSH
63255: LD_INT 3
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: PUSH
63262: LD_INT 5
63264: PUSH
63265: LD_INT 3
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: PUSH
63272: LD_INT 3
63274: PUSH
63275: LD_INT 5
63277: PUSH
63278: EMPTY
63279: LIST
63280: LIST
63281: PUSH
63282: LD_INT 0
63284: PUSH
63285: LD_INT 3
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: PUSH
63292: LD_INT 0
63294: PUSH
63295: LD_INT 2
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: PUSH
63302: LD_INT 1
63304: PUSH
63305: LD_INT 3
63307: PUSH
63308: EMPTY
63309: LIST
63310: LIST
63311: PUSH
63312: LD_INT 1
63314: PUSH
63315: LD_INT 4
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: PUSH
63322: LD_INT 0
63324: PUSH
63325: LD_INT 4
63327: PUSH
63328: EMPTY
63329: LIST
63330: LIST
63331: PUSH
63332: LD_INT 1
63334: NEG
63335: PUSH
63336: LD_INT 3
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: PUSH
63343: LD_INT 1
63345: NEG
63346: PUSH
63347: LD_INT 2
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 2
63356: PUSH
63357: LD_INT 4
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: LD_INT 2
63366: NEG
63367: PUSH
63368: LD_INT 2
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: PUSH
63375: LD_INT 4
63377: NEG
63378: PUSH
63379: LD_INT 0
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: PUSH
63386: LD_INT 4
63388: NEG
63389: PUSH
63390: LD_INT 1
63392: NEG
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: PUSH
63398: LD_INT 3
63400: NEG
63401: PUSH
63402: LD_INT 0
63404: PUSH
63405: EMPTY
63406: LIST
63407: LIST
63408: PUSH
63409: LD_INT 3
63411: NEG
63412: PUSH
63413: LD_INT 1
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: PUSH
63420: LD_INT 4
63422: NEG
63423: PUSH
63424: LD_INT 1
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: PUSH
63431: LD_INT 5
63433: NEG
63434: PUSH
63435: LD_INT 0
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: PUSH
63442: LD_INT 5
63444: NEG
63445: PUSH
63446: LD_INT 1
63448: NEG
63449: PUSH
63450: EMPTY
63451: LIST
63452: LIST
63453: PUSH
63454: LD_INT 5
63456: NEG
63457: PUSH
63458: LD_INT 2
63460: NEG
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: LD_INT 3
63468: NEG
63469: PUSH
63470: LD_INT 2
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: PUSH
63477: EMPTY
63478: LIST
63479: LIST
63480: LIST
63481: LIST
63482: LIST
63483: LIST
63484: LIST
63485: LIST
63486: LIST
63487: LIST
63488: LIST
63489: LIST
63490: LIST
63491: LIST
63492: LIST
63493: LIST
63494: LIST
63495: LIST
63496: LIST
63497: LIST
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: ST_TO_ADDR
// end ; end ;
63524: GO 63527
63526: POP
// case btype of b_depot , b_warehouse :
63527: LD_VAR 0 1
63531: PUSH
63532: LD_INT 0
63534: DOUBLE
63535: EQUAL
63536: IFTRUE 63546
63538: LD_INT 1
63540: DOUBLE
63541: EQUAL
63542: IFTRUE 63546
63544: GO 63747
63546: POP
// case nation of nation_american :
63547: LD_VAR 0 5
63551: PUSH
63552: LD_INT 1
63554: DOUBLE
63555: EQUAL
63556: IFTRUE 63560
63558: GO 63616
63560: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
63561: LD_ADDR_VAR 0 9
63565: PUSH
63566: LD_VAR 0 11
63570: PUSH
63571: LD_VAR 0 12
63575: PUSH
63576: LD_VAR 0 13
63580: PUSH
63581: LD_VAR 0 14
63585: PUSH
63586: LD_VAR 0 15
63590: PUSH
63591: LD_VAR 0 16
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: LIST
63600: LIST
63601: LIST
63602: LIST
63603: PUSH
63604: LD_VAR 0 4
63608: PUSH
63609: LD_INT 1
63611: PLUS
63612: ARRAY
63613: ST_TO_ADDR
63614: GO 63745
63616: LD_INT 2
63618: DOUBLE
63619: EQUAL
63620: IFTRUE 63624
63622: GO 63680
63624: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
63625: LD_ADDR_VAR 0 9
63629: PUSH
63630: LD_VAR 0 17
63634: PUSH
63635: LD_VAR 0 18
63639: PUSH
63640: LD_VAR 0 19
63644: PUSH
63645: LD_VAR 0 20
63649: PUSH
63650: LD_VAR 0 21
63654: PUSH
63655: LD_VAR 0 22
63659: PUSH
63660: EMPTY
63661: LIST
63662: LIST
63663: LIST
63664: LIST
63665: LIST
63666: LIST
63667: PUSH
63668: LD_VAR 0 4
63672: PUSH
63673: LD_INT 1
63675: PLUS
63676: ARRAY
63677: ST_TO_ADDR
63678: GO 63745
63680: LD_INT 3
63682: DOUBLE
63683: EQUAL
63684: IFTRUE 63688
63686: GO 63744
63688: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63689: LD_ADDR_VAR 0 9
63693: PUSH
63694: LD_VAR 0 23
63698: PUSH
63699: LD_VAR 0 24
63703: PUSH
63704: LD_VAR 0 25
63708: PUSH
63709: LD_VAR 0 26
63713: PUSH
63714: LD_VAR 0 27
63718: PUSH
63719: LD_VAR 0 28
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: LIST
63728: LIST
63729: LIST
63730: LIST
63731: PUSH
63732: LD_VAR 0 4
63736: PUSH
63737: LD_INT 1
63739: PLUS
63740: ARRAY
63741: ST_TO_ADDR
63742: GO 63745
63744: POP
63745: GO 64300
63747: LD_INT 2
63749: DOUBLE
63750: EQUAL
63751: IFTRUE 63761
63753: LD_INT 3
63755: DOUBLE
63756: EQUAL
63757: IFTRUE 63761
63759: GO 63817
63761: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63762: LD_ADDR_VAR 0 9
63766: PUSH
63767: LD_VAR 0 29
63771: PUSH
63772: LD_VAR 0 30
63776: PUSH
63777: LD_VAR 0 31
63781: PUSH
63782: LD_VAR 0 32
63786: PUSH
63787: LD_VAR 0 33
63791: PUSH
63792: LD_VAR 0 34
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: LIST
63801: LIST
63802: LIST
63803: LIST
63804: PUSH
63805: LD_VAR 0 4
63809: PUSH
63810: LD_INT 1
63812: PLUS
63813: ARRAY
63814: ST_TO_ADDR
63815: GO 64300
63817: LD_INT 16
63819: DOUBLE
63820: EQUAL
63821: IFTRUE 63879
63823: LD_INT 17
63825: DOUBLE
63826: EQUAL
63827: IFTRUE 63879
63829: LD_INT 18
63831: DOUBLE
63832: EQUAL
63833: IFTRUE 63879
63835: LD_INT 19
63837: DOUBLE
63838: EQUAL
63839: IFTRUE 63879
63841: LD_INT 22
63843: DOUBLE
63844: EQUAL
63845: IFTRUE 63879
63847: LD_INT 20
63849: DOUBLE
63850: EQUAL
63851: IFTRUE 63879
63853: LD_INT 21
63855: DOUBLE
63856: EQUAL
63857: IFTRUE 63879
63859: LD_INT 23
63861: DOUBLE
63862: EQUAL
63863: IFTRUE 63879
63865: LD_INT 24
63867: DOUBLE
63868: EQUAL
63869: IFTRUE 63879
63871: LD_INT 25
63873: DOUBLE
63874: EQUAL
63875: IFTRUE 63879
63877: GO 63935
63879: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63880: LD_ADDR_VAR 0 9
63884: PUSH
63885: LD_VAR 0 35
63889: PUSH
63890: LD_VAR 0 36
63894: PUSH
63895: LD_VAR 0 37
63899: PUSH
63900: LD_VAR 0 38
63904: PUSH
63905: LD_VAR 0 39
63909: PUSH
63910: LD_VAR 0 40
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: LIST
63919: LIST
63920: LIST
63921: LIST
63922: PUSH
63923: LD_VAR 0 4
63927: PUSH
63928: LD_INT 1
63930: PLUS
63931: ARRAY
63932: ST_TO_ADDR
63933: GO 64300
63935: LD_INT 6
63937: DOUBLE
63938: EQUAL
63939: IFTRUE 63991
63941: LD_INT 7
63943: DOUBLE
63944: EQUAL
63945: IFTRUE 63991
63947: LD_INT 8
63949: DOUBLE
63950: EQUAL
63951: IFTRUE 63991
63953: LD_INT 13
63955: DOUBLE
63956: EQUAL
63957: IFTRUE 63991
63959: LD_INT 12
63961: DOUBLE
63962: EQUAL
63963: IFTRUE 63991
63965: LD_INT 15
63967: DOUBLE
63968: EQUAL
63969: IFTRUE 63991
63971: LD_INT 11
63973: DOUBLE
63974: EQUAL
63975: IFTRUE 63991
63977: LD_INT 14
63979: DOUBLE
63980: EQUAL
63981: IFTRUE 63991
63983: LD_INT 10
63985: DOUBLE
63986: EQUAL
63987: IFTRUE 63991
63989: GO 64047
63991: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63992: LD_ADDR_VAR 0 9
63996: PUSH
63997: LD_VAR 0 41
64001: PUSH
64002: LD_VAR 0 42
64006: PUSH
64007: LD_VAR 0 43
64011: PUSH
64012: LD_VAR 0 44
64016: PUSH
64017: LD_VAR 0 45
64021: PUSH
64022: LD_VAR 0 46
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: LIST
64031: LIST
64032: LIST
64033: LIST
64034: PUSH
64035: LD_VAR 0 4
64039: PUSH
64040: LD_INT 1
64042: PLUS
64043: ARRAY
64044: ST_TO_ADDR
64045: GO 64300
64047: LD_INT 36
64049: DOUBLE
64050: EQUAL
64051: IFTRUE 64055
64053: GO 64111
64055: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
64056: LD_ADDR_VAR 0 9
64060: PUSH
64061: LD_VAR 0 47
64065: PUSH
64066: LD_VAR 0 48
64070: PUSH
64071: LD_VAR 0 49
64075: PUSH
64076: LD_VAR 0 50
64080: PUSH
64081: LD_VAR 0 51
64085: PUSH
64086: LD_VAR 0 52
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: LIST
64095: LIST
64096: LIST
64097: LIST
64098: PUSH
64099: LD_VAR 0 4
64103: PUSH
64104: LD_INT 1
64106: PLUS
64107: ARRAY
64108: ST_TO_ADDR
64109: GO 64300
64111: LD_INT 4
64113: DOUBLE
64114: EQUAL
64115: IFTRUE 64137
64117: LD_INT 5
64119: DOUBLE
64120: EQUAL
64121: IFTRUE 64137
64123: LD_INT 34
64125: DOUBLE
64126: EQUAL
64127: IFTRUE 64137
64129: LD_INT 37
64131: DOUBLE
64132: EQUAL
64133: IFTRUE 64137
64135: GO 64193
64137: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
64138: LD_ADDR_VAR 0 9
64142: PUSH
64143: LD_VAR 0 53
64147: PUSH
64148: LD_VAR 0 54
64152: PUSH
64153: LD_VAR 0 55
64157: PUSH
64158: LD_VAR 0 56
64162: PUSH
64163: LD_VAR 0 57
64167: PUSH
64168: LD_VAR 0 58
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: LIST
64177: LIST
64178: LIST
64179: LIST
64180: PUSH
64181: LD_VAR 0 4
64185: PUSH
64186: LD_INT 1
64188: PLUS
64189: ARRAY
64190: ST_TO_ADDR
64191: GO 64300
64193: LD_INT 31
64195: DOUBLE
64196: EQUAL
64197: IFTRUE 64243
64199: LD_INT 32
64201: DOUBLE
64202: EQUAL
64203: IFTRUE 64243
64205: LD_INT 33
64207: DOUBLE
64208: EQUAL
64209: IFTRUE 64243
64211: LD_INT 27
64213: DOUBLE
64214: EQUAL
64215: IFTRUE 64243
64217: LD_INT 26
64219: DOUBLE
64220: EQUAL
64221: IFTRUE 64243
64223: LD_INT 28
64225: DOUBLE
64226: EQUAL
64227: IFTRUE 64243
64229: LD_INT 29
64231: DOUBLE
64232: EQUAL
64233: IFTRUE 64243
64235: LD_INT 30
64237: DOUBLE
64238: EQUAL
64239: IFTRUE 64243
64241: GO 64299
64243: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
64244: LD_ADDR_VAR 0 9
64248: PUSH
64249: LD_VAR 0 59
64253: PUSH
64254: LD_VAR 0 60
64258: PUSH
64259: LD_VAR 0 61
64263: PUSH
64264: LD_VAR 0 62
64268: PUSH
64269: LD_VAR 0 63
64273: PUSH
64274: LD_VAR 0 64
64278: PUSH
64279: EMPTY
64280: LIST
64281: LIST
64282: LIST
64283: LIST
64284: LIST
64285: LIST
64286: PUSH
64287: LD_VAR 0 4
64291: PUSH
64292: LD_INT 1
64294: PLUS
64295: ARRAY
64296: ST_TO_ADDR
64297: GO 64300
64299: POP
// temp_list2 = [ ] ;
64300: LD_ADDR_VAR 0 10
64304: PUSH
64305: EMPTY
64306: ST_TO_ADDR
// for i in temp_list do
64307: LD_ADDR_VAR 0 8
64311: PUSH
64312: LD_VAR 0 9
64316: PUSH
64317: FOR_IN
64318: IFFALSE 64370
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64320: LD_ADDR_VAR 0 10
64324: PUSH
64325: LD_VAR 0 10
64329: PUSH
64330: LD_VAR 0 8
64334: PUSH
64335: LD_INT 1
64337: ARRAY
64338: PUSH
64339: LD_VAR 0 2
64343: PLUS
64344: PUSH
64345: LD_VAR 0 8
64349: PUSH
64350: LD_INT 2
64352: ARRAY
64353: PUSH
64354: LD_VAR 0 3
64358: PLUS
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: PUSH
64364: EMPTY
64365: LIST
64366: ADD
64367: ST_TO_ADDR
64368: GO 64317
64370: POP
64371: POP
// result = temp_list2 ;
64372: LD_ADDR_VAR 0 7
64376: PUSH
64377: LD_VAR 0 10
64381: ST_TO_ADDR
// end ;
64382: LD_VAR 0 7
64386: RET
// export function EnemyInRange ( unit , dist ) ; begin
64387: LD_INT 0
64389: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64390: LD_ADDR_VAR 0 3
64394: PUSH
64395: LD_VAR 0 1
64399: PPUSH
64400: CALL_OW 255
64404: PPUSH
64405: LD_VAR 0 1
64409: PPUSH
64410: CALL_OW 250
64414: PPUSH
64415: LD_VAR 0 1
64419: PPUSH
64420: CALL_OW 251
64424: PPUSH
64425: LD_VAR 0 2
64429: PPUSH
64430: CALL 38158 0 4
64434: PUSH
64435: LD_INT 4
64437: ARRAY
64438: ST_TO_ADDR
// end ;
64439: LD_VAR 0 3
64443: RET
// export function PlayerSeeMe ( unit ) ; begin
64444: LD_INT 0
64446: PPUSH
// result := See ( your_side , unit ) ;
64447: LD_ADDR_VAR 0 2
64451: PUSH
64452: LD_OWVAR 2
64456: PPUSH
64457: LD_VAR 0 1
64461: PPUSH
64462: CALL_OW 292
64466: ST_TO_ADDR
// end ;
64467: LD_VAR 0 2
64471: RET
// export function ReverseDir ( unit ) ; begin
64472: LD_INT 0
64474: PPUSH
// if not unit then
64475: LD_VAR 0 1
64479: NOT
64480: IFFALSE 64484
// exit ;
64482: GO 64507
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64484: LD_ADDR_VAR 0 2
64488: PUSH
64489: LD_VAR 0 1
64493: PPUSH
64494: CALL_OW 254
64498: PUSH
64499: LD_INT 3
64501: PLUS
64502: PUSH
64503: LD_INT 6
64505: MOD
64506: ST_TO_ADDR
// end ;
64507: LD_VAR 0 2
64511: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
64512: LD_INT 0
64514: PPUSH
64515: PPUSH
64516: PPUSH
64517: PPUSH
64518: PPUSH
// if not hexes then
64519: LD_VAR 0 2
64523: NOT
64524: IFFALSE 64528
// exit ;
64526: GO 64676
// dist := 9999 ;
64528: LD_ADDR_VAR 0 5
64532: PUSH
64533: LD_INT 9999
64535: ST_TO_ADDR
// for i = 1 to hexes do
64536: LD_ADDR_VAR 0 4
64540: PUSH
64541: DOUBLE
64542: LD_INT 1
64544: DEC
64545: ST_TO_ADDR
64546: LD_VAR 0 2
64550: PUSH
64551: FOR_TO
64552: IFFALSE 64664
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
64554: LD_VAR 0 1
64558: PPUSH
64559: LD_VAR 0 2
64563: PUSH
64564: LD_VAR 0 4
64568: ARRAY
64569: PUSH
64570: LD_INT 1
64572: ARRAY
64573: PPUSH
64574: LD_VAR 0 2
64578: PUSH
64579: LD_VAR 0 4
64583: ARRAY
64584: PUSH
64585: LD_INT 2
64587: ARRAY
64588: PPUSH
64589: CALL_OW 297
64593: PUSH
64594: LD_VAR 0 5
64598: LESS
64599: IFFALSE 64662
// begin hex := hexes [ i ] ;
64601: LD_ADDR_VAR 0 7
64605: PUSH
64606: LD_VAR 0 2
64610: PUSH
64611: LD_VAR 0 4
64615: ARRAY
64616: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64617: LD_ADDR_VAR 0 5
64621: PUSH
64622: LD_VAR 0 1
64626: PPUSH
64627: LD_VAR 0 2
64631: PUSH
64632: LD_VAR 0 4
64636: ARRAY
64637: PUSH
64638: LD_INT 1
64640: ARRAY
64641: PPUSH
64642: LD_VAR 0 2
64646: PUSH
64647: LD_VAR 0 4
64651: ARRAY
64652: PUSH
64653: LD_INT 2
64655: ARRAY
64656: PPUSH
64657: CALL_OW 297
64661: ST_TO_ADDR
// end ; end ;
64662: GO 64551
64664: POP
64665: POP
// result := hex ;
64666: LD_ADDR_VAR 0 3
64670: PUSH
64671: LD_VAR 0 7
64675: ST_TO_ADDR
// end ;
64676: LD_VAR 0 3
64680: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64681: LD_INT 0
64683: PPUSH
64684: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64685: LD_VAR 0 1
64689: NOT
64690: PUSH
64691: LD_VAR 0 1
64695: PUSH
64696: LD_INT 21
64698: PUSH
64699: LD_INT 2
64701: PUSH
64702: EMPTY
64703: LIST
64704: LIST
64705: PUSH
64706: LD_INT 23
64708: PUSH
64709: LD_INT 2
64711: PUSH
64712: EMPTY
64713: LIST
64714: LIST
64715: PUSH
64716: EMPTY
64717: LIST
64718: LIST
64719: PPUSH
64720: CALL_OW 69
64724: IN
64725: NOT
64726: OR
64727: IFFALSE 64731
// exit ;
64729: GO 64778
// for i = 1 to 3 do
64731: LD_ADDR_VAR 0 3
64735: PUSH
64736: DOUBLE
64737: LD_INT 1
64739: DEC
64740: ST_TO_ADDR
64741: LD_INT 3
64743: PUSH
64744: FOR_TO
64745: IFFALSE 64776
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64747: LD_VAR 0 1
64751: PPUSH
64752: CALL_OW 250
64756: PPUSH
64757: LD_VAR 0 1
64761: PPUSH
64762: CALL_OW 251
64766: PPUSH
64767: LD_INT 1
64769: PPUSH
64770: CALL_OW 453
64774: GO 64744
64776: POP
64777: POP
// end ;
64778: LD_VAR 0 2
64782: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64783: LD_INT 0
64785: PPUSH
64786: PPUSH
64787: PPUSH
64788: PPUSH
64789: PPUSH
64790: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
64791: LD_VAR 0 1
64795: NOT
64796: PUSH
64797: LD_VAR 0 2
64801: NOT
64802: OR
64803: PUSH
64804: LD_VAR 0 1
64808: PPUSH
64809: CALL_OW 314
64813: OR
64814: IFFALSE 64818
// exit ;
64816: GO 65259
// x := GetX ( enemy_unit ) ;
64818: LD_ADDR_VAR 0 7
64822: PUSH
64823: LD_VAR 0 2
64827: PPUSH
64828: CALL_OW 250
64832: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64833: LD_ADDR_VAR 0 8
64837: PUSH
64838: LD_VAR 0 2
64842: PPUSH
64843: CALL_OW 251
64847: ST_TO_ADDR
// if not x or not y then
64848: LD_VAR 0 7
64852: NOT
64853: PUSH
64854: LD_VAR 0 8
64858: NOT
64859: OR
64860: IFFALSE 64864
// exit ;
64862: GO 65259
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64864: LD_ADDR_VAR 0 6
64868: PUSH
64869: LD_VAR 0 7
64873: PPUSH
64874: LD_INT 0
64876: PPUSH
64877: LD_INT 4
64879: PPUSH
64880: CALL_OW 272
64884: PUSH
64885: LD_VAR 0 8
64889: PPUSH
64890: LD_INT 0
64892: PPUSH
64893: LD_INT 4
64895: PPUSH
64896: CALL_OW 273
64900: PUSH
64901: EMPTY
64902: LIST
64903: LIST
64904: PUSH
64905: LD_VAR 0 7
64909: PPUSH
64910: LD_INT 1
64912: PPUSH
64913: LD_INT 4
64915: PPUSH
64916: CALL_OW 272
64920: PUSH
64921: LD_VAR 0 8
64925: PPUSH
64926: LD_INT 1
64928: PPUSH
64929: LD_INT 4
64931: PPUSH
64932: CALL_OW 273
64936: PUSH
64937: EMPTY
64938: LIST
64939: LIST
64940: PUSH
64941: LD_VAR 0 7
64945: PPUSH
64946: LD_INT 2
64948: PPUSH
64949: LD_INT 4
64951: PPUSH
64952: CALL_OW 272
64956: PUSH
64957: LD_VAR 0 8
64961: PPUSH
64962: LD_INT 2
64964: PPUSH
64965: LD_INT 4
64967: PPUSH
64968: CALL_OW 273
64972: PUSH
64973: EMPTY
64974: LIST
64975: LIST
64976: PUSH
64977: LD_VAR 0 7
64981: PPUSH
64982: LD_INT 3
64984: PPUSH
64985: LD_INT 4
64987: PPUSH
64988: CALL_OW 272
64992: PUSH
64993: LD_VAR 0 8
64997: PPUSH
64998: LD_INT 3
65000: PPUSH
65001: LD_INT 4
65003: PPUSH
65004: CALL_OW 273
65008: PUSH
65009: EMPTY
65010: LIST
65011: LIST
65012: PUSH
65013: LD_VAR 0 7
65017: PPUSH
65018: LD_INT 4
65020: PPUSH
65021: LD_INT 4
65023: PPUSH
65024: CALL_OW 272
65028: PUSH
65029: LD_VAR 0 8
65033: PPUSH
65034: LD_INT 4
65036: PPUSH
65037: LD_INT 4
65039: PPUSH
65040: CALL_OW 273
65044: PUSH
65045: EMPTY
65046: LIST
65047: LIST
65048: PUSH
65049: LD_VAR 0 7
65053: PPUSH
65054: LD_INT 5
65056: PPUSH
65057: LD_INT 4
65059: PPUSH
65060: CALL_OW 272
65064: PUSH
65065: LD_VAR 0 8
65069: PPUSH
65070: LD_INT 5
65072: PPUSH
65073: LD_INT 4
65075: PPUSH
65076: CALL_OW 273
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: PUSH
65085: EMPTY
65086: LIST
65087: LIST
65088: LIST
65089: LIST
65090: LIST
65091: LIST
65092: ST_TO_ADDR
// for i = tmp downto 1 do
65093: LD_ADDR_VAR 0 4
65097: PUSH
65098: DOUBLE
65099: LD_VAR 0 6
65103: INC
65104: ST_TO_ADDR
65105: LD_INT 1
65107: PUSH
65108: FOR_DOWNTO
65109: IFFALSE 65210
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
65111: LD_VAR 0 6
65115: PUSH
65116: LD_VAR 0 4
65120: ARRAY
65121: PUSH
65122: LD_INT 1
65124: ARRAY
65125: PPUSH
65126: LD_VAR 0 6
65130: PUSH
65131: LD_VAR 0 4
65135: ARRAY
65136: PUSH
65137: LD_INT 2
65139: ARRAY
65140: PPUSH
65141: CALL_OW 488
65145: NOT
65146: PUSH
65147: LD_VAR 0 6
65151: PUSH
65152: LD_VAR 0 4
65156: ARRAY
65157: PUSH
65158: LD_INT 1
65160: ARRAY
65161: PPUSH
65162: LD_VAR 0 6
65166: PUSH
65167: LD_VAR 0 4
65171: ARRAY
65172: PUSH
65173: LD_INT 2
65175: ARRAY
65176: PPUSH
65177: CALL_OW 428
65181: PUSH
65182: LD_INT 0
65184: NONEQUAL
65185: OR
65186: IFFALSE 65208
// tmp := Delete ( tmp , i ) ;
65188: LD_ADDR_VAR 0 6
65192: PUSH
65193: LD_VAR 0 6
65197: PPUSH
65198: LD_VAR 0 4
65202: PPUSH
65203: CALL_OW 3
65207: ST_TO_ADDR
65208: GO 65108
65210: POP
65211: POP
// j := GetClosestHex ( unit , tmp ) ;
65212: LD_ADDR_VAR 0 5
65216: PUSH
65217: LD_VAR 0 1
65221: PPUSH
65222: LD_VAR 0 6
65226: PPUSH
65227: CALL 64512 0 2
65231: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65232: LD_VAR 0 1
65236: PPUSH
65237: LD_VAR 0 5
65241: PUSH
65242: LD_INT 1
65244: ARRAY
65245: PPUSH
65246: LD_VAR 0 5
65250: PUSH
65251: LD_INT 2
65253: ARRAY
65254: PPUSH
65255: CALL_OW 111
// end ;
65259: LD_VAR 0 3
65263: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65264: LD_INT 0
65266: PPUSH
65267: PPUSH
65268: PPUSH
// uc_side = 0 ;
65269: LD_ADDR_OWVAR 20
65273: PUSH
65274: LD_INT 0
65276: ST_TO_ADDR
// uc_nation = 0 ;
65277: LD_ADDR_OWVAR 21
65281: PUSH
65282: LD_INT 0
65284: ST_TO_ADDR
// InitHc_All ( ) ;
65285: CALL_OW 584
// InitVc ;
65289: CALL_OW 20
// if mastodonts then
65293: LD_VAR 0 6
65297: IFFALSE 65364
// for i = 1 to mastodonts do
65299: LD_ADDR_VAR 0 11
65303: PUSH
65304: DOUBLE
65305: LD_INT 1
65307: DEC
65308: ST_TO_ADDR
65309: LD_VAR 0 6
65313: PUSH
65314: FOR_TO
65315: IFFALSE 65362
// begin vc_chassis := 31 ;
65317: LD_ADDR_OWVAR 37
65321: PUSH
65322: LD_INT 31
65324: ST_TO_ADDR
// vc_control := control_rider ;
65325: LD_ADDR_OWVAR 38
65329: PUSH
65330: LD_INT 4
65332: ST_TO_ADDR
// animal := CreateVehicle ;
65333: LD_ADDR_VAR 0 12
65337: PUSH
65338: CALL_OW 45
65342: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65343: LD_VAR 0 12
65347: PPUSH
65348: LD_VAR 0 8
65352: PPUSH
65353: LD_INT 0
65355: PPUSH
65356: CALL 67552 0 3
// end ;
65360: GO 65314
65362: POP
65363: POP
// if horses then
65364: LD_VAR 0 5
65368: IFFALSE 65435
// for i = 1 to horses do
65370: LD_ADDR_VAR 0 11
65374: PUSH
65375: DOUBLE
65376: LD_INT 1
65378: DEC
65379: ST_TO_ADDR
65380: LD_VAR 0 5
65384: PUSH
65385: FOR_TO
65386: IFFALSE 65433
// begin hc_class := 21 ;
65388: LD_ADDR_OWVAR 28
65392: PUSH
65393: LD_INT 21
65395: ST_TO_ADDR
// hc_gallery :=  ;
65396: LD_ADDR_OWVAR 33
65400: PUSH
65401: LD_STRING 
65403: ST_TO_ADDR
// animal := CreateHuman ;
65404: LD_ADDR_VAR 0 12
65408: PUSH
65409: CALL_OW 44
65413: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65414: LD_VAR 0 12
65418: PPUSH
65419: LD_VAR 0 8
65423: PPUSH
65424: LD_INT 0
65426: PPUSH
65427: CALL 67552 0 3
// end ;
65431: GO 65385
65433: POP
65434: POP
// if birds then
65435: LD_VAR 0 1
65439: IFFALSE 65506
// for i = 1 to birds do
65441: LD_ADDR_VAR 0 11
65445: PUSH
65446: DOUBLE
65447: LD_INT 1
65449: DEC
65450: ST_TO_ADDR
65451: LD_VAR 0 1
65455: PUSH
65456: FOR_TO
65457: IFFALSE 65504
// begin hc_class = 18 ;
65459: LD_ADDR_OWVAR 28
65463: PUSH
65464: LD_INT 18
65466: ST_TO_ADDR
// hc_gallery =  ;
65467: LD_ADDR_OWVAR 33
65471: PUSH
65472: LD_STRING 
65474: ST_TO_ADDR
// animal := CreateHuman ;
65475: LD_ADDR_VAR 0 12
65479: PUSH
65480: CALL_OW 44
65484: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65485: LD_VAR 0 12
65489: PPUSH
65490: LD_VAR 0 8
65494: PPUSH
65495: LD_INT 0
65497: PPUSH
65498: CALL 67552 0 3
// end ;
65502: GO 65456
65504: POP
65505: POP
// if tigers then
65506: LD_VAR 0 2
65510: IFFALSE 65594
// for i = 1 to tigers do
65512: LD_ADDR_VAR 0 11
65516: PUSH
65517: DOUBLE
65518: LD_INT 1
65520: DEC
65521: ST_TO_ADDR
65522: LD_VAR 0 2
65526: PUSH
65527: FOR_TO
65528: IFFALSE 65592
// begin hc_class = class_tiger ;
65530: LD_ADDR_OWVAR 28
65534: PUSH
65535: LD_INT 14
65537: ST_TO_ADDR
// hc_gallery =  ;
65538: LD_ADDR_OWVAR 33
65542: PUSH
65543: LD_STRING 
65545: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65546: LD_ADDR_OWVAR 35
65550: PUSH
65551: LD_INT 7
65553: NEG
65554: PPUSH
65555: LD_INT 7
65557: PPUSH
65558: CALL_OW 12
65562: ST_TO_ADDR
// animal := CreateHuman ;
65563: LD_ADDR_VAR 0 12
65567: PUSH
65568: CALL_OW 44
65572: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65573: LD_VAR 0 12
65577: PPUSH
65578: LD_VAR 0 8
65582: PPUSH
65583: LD_INT 0
65585: PPUSH
65586: CALL 67552 0 3
// end ;
65590: GO 65527
65592: POP
65593: POP
// if apemans then
65594: LD_VAR 0 3
65598: IFFALSE 65721
// for i = 1 to apemans do
65600: LD_ADDR_VAR 0 11
65604: PUSH
65605: DOUBLE
65606: LD_INT 1
65608: DEC
65609: ST_TO_ADDR
65610: LD_VAR 0 3
65614: PUSH
65615: FOR_TO
65616: IFFALSE 65719
// begin hc_class = class_apeman ;
65618: LD_ADDR_OWVAR 28
65622: PUSH
65623: LD_INT 12
65625: ST_TO_ADDR
// hc_gallery =  ;
65626: LD_ADDR_OWVAR 33
65630: PUSH
65631: LD_STRING 
65633: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
65634: LD_ADDR_OWVAR 35
65638: PUSH
65639: LD_INT 5
65641: NEG
65642: PPUSH
65643: LD_INT 5
65645: PPUSH
65646: CALL_OW 12
65650: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65651: LD_ADDR_OWVAR 31
65655: PUSH
65656: LD_INT 1
65658: PPUSH
65659: LD_INT 3
65661: PPUSH
65662: CALL_OW 12
65666: PUSH
65667: LD_INT 1
65669: PPUSH
65670: LD_INT 3
65672: PPUSH
65673: CALL_OW 12
65677: PUSH
65678: LD_INT 0
65680: PUSH
65681: LD_INT 0
65683: PUSH
65684: EMPTY
65685: LIST
65686: LIST
65687: LIST
65688: LIST
65689: ST_TO_ADDR
// animal := CreateHuman ;
65690: LD_ADDR_VAR 0 12
65694: PUSH
65695: CALL_OW 44
65699: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65700: LD_VAR 0 12
65704: PPUSH
65705: LD_VAR 0 8
65709: PPUSH
65710: LD_INT 0
65712: PPUSH
65713: CALL 67552 0 3
// end ;
65717: GO 65615
65719: POP
65720: POP
// if enchidnas then
65721: LD_VAR 0 4
65725: IFFALSE 65792
// for i = 1 to enchidnas do
65727: LD_ADDR_VAR 0 11
65731: PUSH
65732: DOUBLE
65733: LD_INT 1
65735: DEC
65736: ST_TO_ADDR
65737: LD_VAR 0 4
65741: PUSH
65742: FOR_TO
65743: IFFALSE 65790
// begin hc_class = 13 ;
65745: LD_ADDR_OWVAR 28
65749: PUSH
65750: LD_INT 13
65752: ST_TO_ADDR
// hc_gallery =  ;
65753: LD_ADDR_OWVAR 33
65757: PUSH
65758: LD_STRING 
65760: ST_TO_ADDR
// animal := CreateHuman ;
65761: LD_ADDR_VAR 0 12
65765: PUSH
65766: CALL_OW 44
65770: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65771: LD_VAR 0 12
65775: PPUSH
65776: LD_VAR 0 8
65780: PPUSH
65781: LD_INT 0
65783: PPUSH
65784: CALL 67552 0 3
// end ;
65788: GO 65742
65790: POP
65791: POP
// if fishes then
65792: LD_VAR 0 7
65796: IFFALSE 65863
// for i = 1 to fishes do
65798: LD_ADDR_VAR 0 11
65802: PUSH
65803: DOUBLE
65804: LD_INT 1
65806: DEC
65807: ST_TO_ADDR
65808: LD_VAR 0 7
65812: PUSH
65813: FOR_TO
65814: IFFALSE 65861
// begin hc_class = 20 ;
65816: LD_ADDR_OWVAR 28
65820: PUSH
65821: LD_INT 20
65823: ST_TO_ADDR
// hc_gallery =  ;
65824: LD_ADDR_OWVAR 33
65828: PUSH
65829: LD_STRING 
65831: ST_TO_ADDR
// animal := CreateHuman ;
65832: LD_ADDR_VAR 0 12
65836: PUSH
65837: CALL_OW 44
65841: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65842: LD_VAR 0 12
65846: PPUSH
65847: LD_VAR 0 9
65851: PPUSH
65852: LD_INT 0
65854: PPUSH
65855: CALL 67552 0 3
// end ;
65859: GO 65813
65861: POP
65862: POP
// end ;
65863: LD_VAR 0 10
65867: RET
// export function WantHeal ( sci , unit ) ; begin
65868: LD_INT 0
65870: PPUSH
// if GetTaskList ( sci ) > 0 then
65871: LD_VAR 0 1
65875: PPUSH
65876: CALL_OW 437
65880: PUSH
65881: LD_INT 0
65883: GREATER
65884: IFFALSE 65954
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65886: LD_VAR 0 1
65890: PPUSH
65891: CALL_OW 437
65895: PUSH
65896: LD_INT 1
65898: ARRAY
65899: PUSH
65900: LD_INT 1
65902: ARRAY
65903: PUSH
65904: LD_STRING l
65906: EQUAL
65907: PUSH
65908: LD_VAR 0 1
65912: PPUSH
65913: CALL_OW 437
65917: PUSH
65918: LD_INT 1
65920: ARRAY
65921: PUSH
65922: LD_INT 4
65924: ARRAY
65925: PUSH
65926: LD_VAR 0 2
65930: EQUAL
65931: AND
65932: IFFALSE 65944
// result := true else
65934: LD_ADDR_VAR 0 3
65938: PUSH
65939: LD_INT 1
65941: ST_TO_ADDR
65942: GO 65952
// result := false ;
65944: LD_ADDR_VAR 0 3
65948: PUSH
65949: LD_INT 0
65951: ST_TO_ADDR
// end else
65952: GO 65962
// result := false ;
65954: LD_ADDR_VAR 0 3
65958: PUSH
65959: LD_INT 0
65961: ST_TO_ADDR
// end ;
65962: LD_VAR 0 3
65966: RET
// export function HealTarget ( sci ) ; begin
65967: LD_INT 0
65969: PPUSH
// if not sci then
65970: LD_VAR 0 1
65974: NOT
65975: IFFALSE 65979
// exit ;
65977: GO 66044
// result := 0 ;
65979: LD_ADDR_VAR 0 2
65983: PUSH
65984: LD_INT 0
65986: ST_TO_ADDR
// if GetTaskList ( sci ) then
65987: LD_VAR 0 1
65991: PPUSH
65992: CALL_OW 437
65996: IFFALSE 66044
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65998: LD_VAR 0 1
66002: PPUSH
66003: CALL_OW 437
66007: PUSH
66008: LD_INT 1
66010: ARRAY
66011: PUSH
66012: LD_INT 1
66014: ARRAY
66015: PUSH
66016: LD_STRING l
66018: EQUAL
66019: IFFALSE 66044
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
66021: LD_ADDR_VAR 0 2
66025: PUSH
66026: LD_VAR 0 1
66030: PPUSH
66031: CALL_OW 437
66035: PUSH
66036: LD_INT 1
66038: ARRAY
66039: PUSH
66040: LD_INT 4
66042: ARRAY
66043: ST_TO_ADDR
// end ;
66044: LD_VAR 0 2
66048: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
66049: LD_INT 0
66051: PPUSH
66052: PPUSH
66053: PPUSH
66054: PPUSH
// if not base_units then
66055: LD_VAR 0 1
66059: NOT
66060: IFFALSE 66064
// exit ;
66062: GO 66151
// result := false ;
66064: LD_ADDR_VAR 0 2
66068: PUSH
66069: LD_INT 0
66071: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66072: LD_ADDR_VAR 0 5
66076: PUSH
66077: LD_VAR 0 1
66081: PPUSH
66082: LD_INT 21
66084: PUSH
66085: LD_INT 3
66087: PUSH
66088: EMPTY
66089: LIST
66090: LIST
66091: PPUSH
66092: CALL_OW 72
66096: ST_TO_ADDR
// if not tmp then
66097: LD_VAR 0 5
66101: NOT
66102: IFFALSE 66106
// exit ;
66104: GO 66151
// for i in tmp do
66106: LD_ADDR_VAR 0 3
66110: PUSH
66111: LD_VAR 0 5
66115: PUSH
66116: FOR_IN
66117: IFFALSE 66149
// begin result := EnemyInRange ( i , 22 ) ;
66119: LD_ADDR_VAR 0 2
66123: PUSH
66124: LD_VAR 0 3
66128: PPUSH
66129: LD_INT 22
66131: PPUSH
66132: CALL 64387 0 2
66136: ST_TO_ADDR
// if result then
66137: LD_VAR 0 2
66141: IFFALSE 66147
// exit ;
66143: POP
66144: POP
66145: GO 66151
// end ;
66147: GO 66116
66149: POP
66150: POP
// end ;
66151: LD_VAR 0 2
66155: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
66156: LD_INT 0
66158: PPUSH
66159: PPUSH
// if not units then
66160: LD_VAR 0 1
66164: NOT
66165: IFFALSE 66169
// exit ;
66167: GO 66239
// result := [ ] ;
66169: LD_ADDR_VAR 0 3
66173: PUSH
66174: EMPTY
66175: ST_TO_ADDR
// for i in units do
66176: LD_ADDR_VAR 0 4
66180: PUSH
66181: LD_VAR 0 1
66185: PUSH
66186: FOR_IN
66187: IFFALSE 66237
// if GetTag ( i ) = tag then
66189: LD_VAR 0 4
66193: PPUSH
66194: CALL_OW 110
66198: PUSH
66199: LD_VAR 0 2
66203: EQUAL
66204: IFFALSE 66235
// result := Insert ( result , result + 1 , i ) ;
66206: LD_ADDR_VAR 0 3
66210: PUSH
66211: LD_VAR 0 3
66215: PPUSH
66216: LD_VAR 0 3
66220: PUSH
66221: LD_INT 1
66223: PLUS
66224: PPUSH
66225: LD_VAR 0 4
66229: PPUSH
66230: CALL_OW 2
66234: ST_TO_ADDR
66235: GO 66186
66237: POP
66238: POP
// end ;
66239: LD_VAR 0 3
66243: RET
// export function IsDriver ( un ) ; begin
66244: LD_INT 0
66246: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66247: LD_ADDR_VAR 0 2
66251: PUSH
66252: LD_VAR 0 1
66256: PUSH
66257: LD_INT 55
66259: PUSH
66260: EMPTY
66261: LIST
66262: PPUSH
66263: CALL_OW 69
66267: IN
66268: ST_TO_ADDR
// end ;
66269: LD_VAR 0 2
66273: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66274: LD_INT 0
66276: PPUSH
66277: PPUSH
// list := [ ] ;
66278: LD_ADDR_VAR 0 5
66282: PUSH
66283: EMPTY
66284: ST_TO_ADDR
// case d of 0 :
66285: LD_VAR 0 3
66289: PUSH
66290: LD_INT 0
66292: DOUBLE
66293: EQUAL
66294: IFTRUE 66298
66296: GO 66431
66298: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66299: LD_ADDR_VAR 0 5
66303: PUSH
66304: LD_VAR 0 1
66308: PUSH
66309: LD_INT 4
66311: MINUS
66312: PUSH
66313: LD_VAR 0 2
66317: PUSH
66318: LD_INT 4
66320: MINUS
66321: PUSH
66322: LD_INT 2
66324: PUSH
66325: EMPTY
66326: LIST
66327: LIST
66328: LIST
66329: PUSH
66330: LD_VAR 0 1
66334: PUSH
66335: LD_INT 3
66337: MINUS
66338: PUSH
66339: LD_VAR 0 2
66343: PUSH
66344: LD_INT 1
66346: PUSH
66347: EMPTY
66348: LIST
66349: LIST
66350: LIST
66351: PUSH
66352: LD_VAR 0 1
66356: PUSH
66357: LD_INT 4
66359: PLUS
66360: PUSH
66361: LD_VAR 0 2
66365: PUSH
66366: LD_INT 4
66368: PUSH
66369: EMPTY
66370: LIST
66371: LIST
66372: LIST
66373: PUSH
66374: LD_VAR 0 1
66378: PUSH
66379: LD_INT 3
66381: PLUS
66382: PUSH
66383: LD_VAR 0 2
66387: PUSH
66388: LD_INT 3
66390: PLUS
66391: PUSH
66392: LD_INT 5
66394: PUSH
66395: EMPTY
66396: LIST
66397: LIST
66398: LIST
66399: PUSH
66400: LD_VAR 0 1
66404: PUSH
66405: LD_VAR 0 2
66409: PUSH
66410: LD_INT 4
66412: PLUS
66413: PUSH
66414: LD_INT 0
66416: PUSH
66417: EMPTY
66418: LIST
66419: LIST
66420: LIST
66421: PUSH
66422: EMPTY
66423: LIST
66424: LIST
66425: LIST
66426: LIST
66427: LIST
66428: ST_TO_ADDR
// end ; 1 :
66429: GO 67129
66431: LD_INT 1
66433: DOUBLE
66434: EQUAL
66435: IFTRUE 66439
66437: GO 66572
66439: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66440: LD_ADDR_VAR 0 5
66444: PUSH
66445: LD_VAR 0 1
66449: PUSH
66450: LD_VAR 0 2
66454: PUSH
66455: LD_INT 4
66457: MINUS
66458: PUSH
66459: LD_INT 3
66461: PUSH
66462: EMPTY
66463: LIST
66464: LIST
66465: LIST
66466: PUSH
66467: LD_VAR 0 1
66471: PUSH
66472: LD_INT 3
66474: MINUS
66475: PUSH
66476: LD_VAR 0 2
66480: PUSH
66481: LD_INT 3
66483: MINUS
66484: PUSH
66485: LD_INT 2
66487: PUSH
66488: EMPTY
66489: LIST
66490: LIST
66491: LIST
66492: PUSH
66493: LD_VAR 0 1
66497: PUSH
66498: LD_INT 4
66500: MINUS
66501: PUSH
66502: LD_VAR 0 2
66506: PUSH
66507: LD_INT 1
66509: PUSH
66510: EMPTY
66511: LIST
66512: LIST
66513: LIST
66514: PUSH
66515: LD_VAR 0 1
66519: PUSH
66520: LD_VAR 0 2
66524: PUSH
66525: LD_INT 3
66527: PLUS
66528: PUSH
66529: LD_INT 0
66531: PUSH
66532: EMPTY
66533: LIST
66534: LIST
66535: LIST
66536: PUSH
66537: LD_VAR 0 1
66541: PUSH
66542: LD_INT 4
66544: PLUS
66545: PUSH
66546: LD_VAR 0 2
66550: PUSH
66551: LD_INT 4
66553: PLUS
66554: PUSH
66555: LD_INT 5
66557: PUSH
66558: EMPTY
66559: LIST
66560: LIST
66561: LIST
66562: PUSH
66563: EMPTY
66564: LIST
66565: LIST
66566: LIST
66567: LIST
66568: LIST
66569: ST_TO_ADDR
// end ; 2 :
66570: GO 67129
66572: LD_INT 2
66574: DOUBLE
66575: EQUAL
66576: IFTRUE 66580
66578: GO 66709
66580: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66581: LD_ADDR_VAR 0 5
66585: PUSH
66586: LD_VAR 0 1
66590: PUSH
66591: LD_VAR 0 2
66595: PUSH
66596: LD_INT 3
66598: MINUS
66599: PUSH
66600: LD_INT 3
66602: PUSH
66603: EMPTY
66604: LIST
66605: LIST
66606: LIST
66607: PUSH
66608: LD_VAR 0 1
66612: PUSH
66613: LD_INT 4
66615: PLUS
66616: PUSH
66617: LD_VAR 0 2
66621: PUSH
66622: LD_INT 4
66624: PUSH
66625: EMPTY
66626: LIST
66627: LIST
66628: LIST
66629: PUSH
66630: LD_VAR 0 1
66634: PUSH
66635: LD_VAR 0 2
66639: PUSH
66640: LD_INT 4
66642: PLUS
66643: PUSH
66644: LD_INT 0
66646: PUSH
66647: EMPTY
66648: LIST
66649: LIST
66650: LIST
66651: PUSH
66652: LD_VAR 0 1
66656: PUSH
66657: LD_INT 3
66659: MINUS
66660: PUSH
66661: LD_VAR 0 2
66665: PUSH
66666: LD_INT 1
66668: PUSH
66669: EMPTY
66670: LIST
66671: LIST
66672: LIST
66673: PUSH
66674: LD_VAR 0 1
66678: PUSH
66679: LD_INT 4
66681: MINUS
66682: PUSH
66683: LD_VAR 0 2
66687: PUSH
66688: LD_INT 4
66690: MINUS
66691: PUSH
66692: LD_INT 2
66694: PUSH
66695: EMPTY
66696: LIST
66697: LIST
66698: LIST
66699: PUSH
66700: EMPTY
66701: LIST
66702: LIST
66703: LIST
66704: LIST
66705: LIST
66706: ST_TO_ADDR
// end ; 3 :
66707: GO 67129
66709: LD_INT 3
66711: DOUBLE
66712: EQUAL
66713: IFTRUE 66717
66715: GO 66850
66717: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66718: LD_ADDR_VAR 0 5
66722: PUSH
66723: LD_VAR 0 1
66727: PUSH
66728: LD_INT 3
66730: PLUS
66731: PUSH
66732: LD_VAR 0 2
66736: PUSH
66737: LD_INT 4
66739: PUSH
66740: EMPTY
66741: LIST
66742: LIST
66743: LIST
66744: PUSH
66745: LD_VAR 0 1
66749: PUSH
66750: LD_INT 4
66752: PLUS
66753: PUSH
66754: LD_VAR 0 2
66758: PUSH
66759: LD_INT 4
66761: PLUS
66762: PUSH
66763: LD_INT 5
66765: PUSH
66766: EMPTY
66767: LIST
66768: LIST
66769: LIST
66770: PUSH
66771: LD_VAR 0 1
66775: PUSH
66776: LD_INT 4
66778: MINUS
66779: PUSH
66780: LD_VAR 0 2
66784: PUSH
66785: LD_INT 1
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: LIST
66792: PUSH
66793: LD_VAR 0 1
66797: PUSH
66798: LD_VAR 0 2
66802: PUSH
66803: LD_INT 4
66805: MINUS
66806: PUSH
66807: LD_INT 3
66809: PUSH
66810: EMPTY
66811: LIST
66812: LIST
66813: LIST
66814: PUSH
66815: LD_VAR 0 1
66819: PUSH
66820: LD_INT 3
66822: MINUS
66823: PUSH
66824: LD_VAR 0 2
66828: PUSH
66829: LD_INT 3
66831: MINUS
66832: PUSH
66833: LD_INT 2
66835: PUSH
66836: EMPTY
66837: LIST
66838: LIST
66839: LIST
66840: PUSH
66841: EMPTY
66842: LIST
66843: LIST
66844: LIST
66845: LIST
66846: LIST
66847: ST_TO_ADDR
// end ; 4 :
66848: GO 67129
66850: LD_INT 4
66852: DOUBLE
66853: EQUAL
66854: IFTRUE 66858
66856: GO 66991
66858: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66859: LD_ADDR_VAR 0 5
66863: PUSH
66864: LD_VAR 0 1
66868: PUSH
66869: LD_VAR 0 2
66873: PUSH
66874: LD_INT 4
66876: PLUS
66877: PUSH
66878: LD_INT 0
66880: PUSH
66881: EMPTY
66882: LIST
66883: LIST
66884: LIST
66885: PUSH
66886: LD_VAR 0 1
66890: PUSH
66891: LD_INT 3
66893: PLUS
66894: PUSH
66895: LD_VAR 0 2
66899: PUSH
66900: LD_INT 3
66902: PLUS
66903: PUSH
66904: LD_INT 5
66906: PUSH
66907: EMPTY
66908: LIST
66909: LIST
66910: LIST
66911: PUSH
66912: LD_VAR 0 1
66916: PUSH
66917: LD_INT 4
66919: PLUS
66920: PUSH
66921: LD_VAR 0 2
66925: PUSH
66926: LD_INT 4
66928: PUSH
66929: EMPTY
66930: LIST
66931: LIST
66932: LIST
66933: PUSH
66934: LD_VAR 0 1
66938: PUSH
66939: LD_VAR 0 2
66943: PUSH
66944: LD_INT 3
66946: MINUS
66947: PUSH
66948: LD_INT 3
66950: PUSH
66951: EMPTY
66952: LIST
66953: LIST
66954: LIST
66955: PUSH
66956: LD_VAR 0 1
66960: PUSH
66961: LD_INT 4
66963: MINUS
66964: PUSH
66965: LD_VAR 0 2
66969: PUSH
66970: LD_INT 4
66972: MINUS
66973: PUSH
66974: LD_INT 2
66976: PUSH
66977: EMPTY
66978: LIST
66979: LIST
66980: LIST
66981: PUSH
66982: EMPTY
66983: LIST
66984: LIST
66985: LIST
66986: LIST
66987: LIST
66988: ST_TO_ADDR
// end ; 5 :
66989: GO 67129
66991: LD_INT 5
66993: DOUBLE
66994: EQUAL
66995: IFTRUE 66999
66997: GO 67128
66999: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67000: LD_ADDR_VAR 0 5
67004: PUSH
67005: LD_VAR 0 1
67009: PUSH
67010: LD_INT 4
67012: MINUS
67013: PUSH
67014: LD_VAR 0 2
67018: PUSH
67019: LD_INT 1
67021: PUSH
67022: EMPTY
67023: LIST
67024: LIST
67025: LIST
67026: PUSH
67027: LD_VAR 0 1
67031: PUSH
67032: LD_VAR 0 2
67036: PUSH
67037: LD_INT 4
67039: MINUS
67040: PUSH
67041: LD_INT 3
67043: PUSH
67044: EMPTY
67045: LIST
67046: LIST
67047: LIST
67048: PUSH
67049: LD_VAR 0 1
67053: PUSH
67054: LD_INT 4
67056: PLUS
67057: PUSH
67058: LD_VAR 0 2
67062: PUSH
67063: LD_INT 4
67065: PLUS
67066: PUSH
67067: LD_INT 5
67069: PUSH
67070: EMPTY
67071: LIST
67072: LIST
67073: LIST
67074: PUSH
67075: LD_VAR 0 1
67079: PUSH
67080: LD_INT 3
67082: PLUS
67083: PUSH
67084: LD_VAR 0 2
67088: PUSH
67089: LD_INT 4
67091: PUSH
67092: EMPTY
67093: LIST
67094: LIST
67095: LIST
67096: PUSH
67097: LD_VAR 0 1
67101: PUSH
67102: LD_VAR 0 2
67106: PUSH
67107: LD_INT 3
67109: PLUS
67110: PUSH
67111: LD_INT 0
67113: PUSH
67114: EMPTY
67115: LIST
67116: LIST
67117: LIST
67118: PUSH
67119: EMPTY
67120: LIST
67121: LIST
67122: LIST
67123: LIST
67124: LIST
67125: ST_TO_ADDR
// end ; end ;
67126: GO 67129
67128: POP
// result := list ;
67129: LD_ADDR_VAR 0 4
67133: PUSH
67134: LD_VAR 0 5
67138: ST_TO_ADDR
// end ;
67139: LD_VAR 0 4
67143: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67144: LD_INT 0
67146: PPUSH
67147: PPUSH
67148: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67149: LD_VAR 0 1
67153: NOT
67154: PUSH
67155: LD_VAR 0 2
67159: PUSH
67160: LD_INT 1
67162: PUSH
67163: LD_INT 2
67165: PUSH
67166: LD_INT 3
67168: PUSH
67169: LD_INT 4
67171: PUSH
67172: EMPTY
67173: LIST
67174: LIST
67175: LIST
67176: LIST
67177: IN
67178: NOT
67179: OR
67180: IFFALSE 67184
// exit ;
67182: GO 67276
// tmp := [ ] ;
67184: LD_ADDR_VAR 0 5
67188: PUSH
67189: EMPTY
67190: ST_TO_ADDR
// for i in units do
67191: LD_ADDR_VAR 0 4
67195: PUSH
67196: LD_VAR 0 1
67200: PUSH
67201: FOR_IN
67202: IFFALSE 67245
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
67204: LD_ADDR_VAR 0 5
67208: PUSH
67209: LD_VAR 0 5
67213: PPUSH
67214: LD_VAR 0 5
67218: PUSH
67219: LD_INT 1
67221: PLUS
67222: PPUSH
67223: LD_VAR 0 4
67227: PPUSH
67228: LD_VAR 0 2
67232: PPUSH
67233: CALL_OW 259
67237: PPUSH
67238: CALL_OW 2
67242: ST_TO_ADDR
67243: GO 67201
67245: POP
67246: POP
// if not tmp then
67247: LD_VAR 0 5
67251: NOT
67252: IFFALSE 67256
// exit ;
67254: GO 67276
// result := SortListByListDesc ( units , tmp ) ;
67256: LD_ADDR_VAR 0 3
67260: PUSH
67261: LD_VAR 0 1
67265: PPUSH
67266: LD_VAR 0 5
67270: PPUSH
67271: CALL_OW 77
67275: ST_TO_ADDR
// end ;
67276: LD_VAR 0 3
67280: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67281: LD_INT 0
67283: PPUSH
67284: PPUSH
67285: PPUSH
// result := false ;
67286: LD_ADDR_VAR 0 3
67290: PUSH
67291: LD_INT 0
67293: ST_TO_ADDR
// x := GetX ( building ) ;
67294: LD_ADDR_VAR 0 4
67298: PUSH
67299: LD_VAR 0 2
67303: PPUSH
67304: CALL_OW 250
67308: ST_TO_ADDR
// y := GetY ( building ) ;
67309: LD_ADDR_VAR 0 5
67313: PUSH
67314: LD_VAR 0 2
67318: PPUSH
67319: CALL_OW 251
67323: ST_TO_ADDR
// if not building or not x or not y then
67324: LD_VAR 0 2
67328: NOT
67329: PUSH
67330: LD_VAR 0 4
67334: NOT
67335: OR
67336: PUSH
67337: LD_VAR 0 5
67341: NOT
67342: OR
67343: IFFALSE 67347
// exit ;
67345: GO 67439
// if GetTaskList ( unit ) then
67347: LD_VAR 0 1
67351: PPUSH
67352: CALL_OW 437
67356: IFFALSE 67439
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67358: LD_STRING e
67360: PUSH
67361: LD_VAR 0 1
67365: PPUSH
67366: CALL_OW 437
67370: PUSH
67371: LD_INT 1
67373: ARRAY
67374: PUSH
67375: LD_INT 1
67377: ARRAY
67378: EQUAL
67379: PUSH
67380: LD_VAR 0 4
67384: PUSH
67385: LD_VAR 0 1
67389: PPUSH
67390: CALL_OW 437
67394: PUSH
67395: LD_INT 1
67397: ARRAY
67398: PUSH
67399: LD_INT 2
67401: ARRAY
67402: EQUAL
67403: AND
67404: PUSH
67405: LD_VAR 0 5
67409: PUSH
67410: LD_VAR 0 1
67414: PPUSH
67415: CALL_OW 437
67419: PUSH
67420: LD_INT 1
67422: ARRAY
67423: PUSH
67424: LD_INT 3
67426: ARRAY
67427: EQUAL
67428: AND
67429: IFFALSE 67439
// result := true end ;
67431: LD_ADDR_VAR 0 3
67435: PUSH
67436: LD_INT 1
67438: ST_TO_ADDR
// end ;
67439: LD_VAR 0 3
67443: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67444: LD_INT 0
67446: PPUSH
// result := false ;
67447: LD_ADDR_VAR 0 4
67451: PUSH
67452: LD_INT 0
67454: ST_TO_ADDR
// if GetTaskList ( unit ) then
67455: LD_VAR 0 1
67459: PPUSH
67460: CALL_OW 437
67464: IFFALSE 67547
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67466: LD_STRING M
67468: PUSH
67469: LD_VAR 0 1
67473: PPUSH
67474: CALL_OW 437
67478: PUSH
67479: LD_INT 1
67481: ARRAY
67482: PUSH
67483: LD_INT 1
67485: ARRAY
67486: EQUAL
67487: PUSH
67488: LD_VAR 0 2
67492: PUSH
67493: LD_VAR 0 1
67497: PPUSH
67498: CALL_OW 437
67502: PUSH
67503: LD_INT 1
67505: ARRAY
67506: PUSH
67507: LD_INT 2
67509: ARRAY
67510: EQUAL
67511: AND
67512: PUSH
67513: LD_VAR 0 3
67517: PUSH
67518: LD_VAR 0 1
67522: PPUSH
67523: CALL_OW 437
67527: PUSH
67528: LD_INT 1
67530: ARRAY
67531: PUSH
67532: LD_INT 3
67534: ARRAY
67535: EQUAL
67536: AND
67537: IFFALSE 67547
// result := true ;
67539: LD_ADDR_VAR 0 4
67543: PUSH
67544: LD_INT 1
67546: ST_TO_ADDR
// end ; end ;
67547: LD_VAR 0 4
67551: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67552: LD_INT 0
67554: PPUSH
67555: PPUSH
67556: PPUSH
67557: PPUSH
// if not unit or not area then
67558: LD_VAR 0 1
67562: NOT
67563: PUSH
67564: LD_VAR 0 2
67568: NOT
67569: OR
67570: IFFALSE 67574
// exit ;
67572: GO 67738
// tmp := AreaToList ( area , i ) ;
67574: LD_ADDR_VAR 0 6
67578: PUSH
67579: LD_VAR 0 2
67583: PPUSH
67584: LD_VAR 0 5
67588: PPUSH
67589: CALL_OW 517
67593: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67594: LD_ADDR_VAR 0 5
67598: PUSH
67599: DOUBLE
67600: LD_INT 1
67602: DEC
67603: ST_TO_ADDR
67604: LD_VAR 0 6
67608: PUSH
67609: LD_INT 1
67611: ARRAY
67612: PUSH
67613: FOR_TO
67614: IFFALSE 67736
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67616: LD_ADDR_VAR 0 7
67620: PUSH
67621: LD_VAR 0 6
67625: PUSH
67626: LD_INT 1
67628: ARRAY
67629: PUSH
67630: LD_VAR 0 5
67634: ARRAY
67635: PUSH
67636: LD_VAR 0 6
67640: PUSH
67641: LD_INT 2
67643: ARRAY
67644: PUSH
67645: LD_VAR 0 5
67649: ARRAY
67650: PUSH
67651: EMPTY
67652: LIST
67653: LIST
67654: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
67655: LD_VAR 0 7
67659: PUSH
67660: LD_INT 1
67662: ARRAY
67663: PPUSH
67664: LD_VAR 0 7
67668: PUSH
67669: LD_INT 2
67671: ARRAY
67672: PPUSH
67673: CALL_OW 428
67677: PUSH
67678: LD_INT 0
67680: EQUAL
67681: IFFALSE 67734
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67683: LD_VAR 0 1
67687: PPUSH
67688: LD_VAR 0 7
67692: PUSH
67693: LD_INT 1
67695: ARRAY
67696: PPUSH
67697: LD_VAR 0 7
67701: PUSH
67702: LD_INT 2
67704: ARRAY
67705: PPUSH
67706: LD_VAR 0 3
67710: PPUSH
67711: CALL_OW 48
// result := IsPlaced ( unit ) ;
67715: LD_ADDR_VAR 0 4
67719: PUSH
67720: LD_VAR 0 1
67724: PPUSH
67725: CALL_OW 305
67729: ST_TO_ADDR
// exit ;
67730: POP
67731: POP
67732: GO 67738
// end ; end ;
67734: GO 67613
67736: POP
67737: POP
// end ;
67738: LD_VAR 0 4
67742: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67743: LD_INT 0
67745: PPUSH
67746: PPUSH
67747: PPUSH
// if not side or side > 8 then
67748: LD_VAR 0 1
67752: NOT
67753: PUSH
67754: LD_VAR 0 1
67758: PUSH
67759: LD_INT 8
67761: GREATER
67762: OR
67763: IFFALSE 67767
// exit ;
67765: GO 67954
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67767: LD_ADDR_VAR 0 4
67771: PUSH
67772: LD_INT 22
67774: PUSH
67775: LD_VAR 0 1
67779: PUSH
67780: EMPTY
67781: LIST
67782: LIST
67783: PUSH
67784: LD_INT 21
67786: PUSH
67787: LD_INT 3
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: PUSH
67794: EMPTY
67795: LIST
67796: LIST
67797: PPUSH
67798: CALL_OW 69
67802: ST_TO_ADDR
// if not tmp then
67803: LD_VAR 0 4
67807: NOT
67808: IFFALSE 67812
// exit ;
67810: GO 67954
// enable_addtolog := true ;
67812: LD_ADDR_OWVAR 81
67816: PUSH
67817: LD_INT 1
67819: ST_TO_ADDR
// AddToLog ( [ ) ;
67820: LD_STRING [
67822: PPUSH
67823: CALL_OW 561
// for i in tmp do
67827: LD_ADDR_VAR 0 3
67831: PUSH
67832: LD_VAR 0 4
67836: PUSH
67837: FOR_IN
67838: IFFALSE 67945
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67840: LD_STRING [
67842: PUSH
67843: LD_VAR 0 3
67847: PPUSH
67848: CALL_OW 266
67852: STR
67853: PUSH
67854: LD_STRING , 
67856: STR
67857: PUSH
67858: LD_VAR 0 3
67862: PPUSH
67863: CALL_OW 250
67867: STR
67868: PUSH
67869: LD_STRING , 
67871: STR
67872: PUSH
67873: LD_VAR 0 3
67877: PPUSH
67878: CALL_OW 251
67882: STR
67883: PUSH
67884: LD_STRING , 
67886: STR
67887: PUSH
67888: LD_VAR 0 3
67892: PPUSH
67893: CALL_OW 254
67897: STR
67898: PUSH
67899: LD_STRING , 
67901: STR
67902: PUSH
67903: LD_VAR 0 3
67907: PPUSH
67908: LD_INT 1
67910: PPUSH
67911: CALL_OW 268
67915: STR
67916: PUSH
67917: LD_STRING , 
67919: STR
67920: PUSH
67921: LD_VAR 0 3
67925: PPUSH
67926: LD_INT 2
67928: PPUSH
67929: CALL_OW 268
67933: STR
67934: PUSH
67935: LD_STRING ],
67937: STR
67938: PPUSH
67939: CALL_OW 561
// end ;
67943: GO 67837
67945: POP
67946: POP
// AddToLog ( ]; ) ;
67947: LD_STRING ];
67949: PPUSH
67950: CALL_OW 561
// end ;
67954: LD_VAR 0 2
67958: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67959: LD_INT 0
67961: PPUSH
67962: PPUSH
67963: PPUSH
67964: PPUSH
67965: PPUSH
// if not area or not rate or not max then
67966: LD_VAR 0 1
67970: NOT
67971: PUSH
67972: LD_VAR 0 2
67976: NOT
67977: OR
67978: PUSH
67979: LD_VAR 0 4
67983: NOT
67984: OR
67985: IFFALSE 67989
// exit ;
67987: GO 68181
// while 1 do
67989: LD_INT 1
67991: IFFALSE 68181
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67993: LD_ADDR_VAR 0 9
67997: PUSH
67998: LD_VAR 0 1
68002: PPUSH
68003: LD_INT 1
68005: PPUSH
68006: CALL_OW 287
68010: PUSH
68011: LD_INT 10
68013: MUL
68014: ST_TO_ADDR
// r := rate / 10 ;
68015: LD_ADDR_VAR 0 7
68019: PUSH
68020: LD_VAR 0 2
68024: PUSH
68025: LD_INT 10
68027: DIVREAL
68028: ST_TO_ADDR
// time := 1 1$00 ;
68029: LD_ADDR_VAR 0 8
68033: PUSH
68034: LD_INT 2100
68036: ST_TO_ADDR
// if amount < min then
68037: LD_VAR 0 9
68041: PUSH
68042: LD_VAR 0 3
68046: LESS
68047: IFFALSE 68065
// r := r * 2 else
68049: LD_ADDR_VAR 0 7
68053: PUSH
68054: LD_VAR 0 7
68058: PUSH
68059: LD_INT 2
68061: MUL
68062: ST_TO_ADDR
68063: GO 68091
// if amount > max then
68065: LD_VAR 0 9
68069: PUSH
68070: LD_VAR 0 4
68074: GREATER
68075: IFFALSE 68091
// r := r / 2 ;
68077: LD_ADDR_VAR 0 7
68081: PUSH
68082: LD_VAR 0 7
68086: PUSH
68087: LD_INT 2
68089: DIVREAL
68090: ST_TO_ADDR
// time := time / r ;
68091: LD_ADDR_VAR 0 8
68095: PUSH
68096: LD_VAR 0 8
68100: PUSH
68101: LD_VAR 0 7
68105: DIVREAL
68106: ST_TO_ADDR
// if time < 0 then
68107: LD_VAR 0 8
68111: PUSH
68112: LD_INT 0
68114: LESS
68115: IFFALSE 68132
// time := time * - 1 ;
68117: LD_ADDR_VAR 0 8
68121: PUSH
68122: LD_VAR 0 8
68126: PUSH
68127: LD_INT 1
68129: NEG
68130: MUL
68131: ST_TO_ADDR
// wait ( time ) ;
68132: LD_VAR 0 8
68136: PPUSH
68137: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
68141: LD_INT 35
68143: PPUSH
68144: LD_INT 875
68146: PPUSH
68147: CALL_OW 12
68151: PPUSH
68152: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68156: LD_INT 1
68158: PPUSH
68159: LD_INT 5
68161: PPUSH
68162: CALL_OW 12
68166: PPUSH
68167: LD_VAR 0 1
68171: PPUSH
68172: LD_INT 1
68174: PPUSH
68175: CALL_OW 55
// end ;
68179: GO 67989
// end ;
68181: LD_VAR 0 5
68185: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68186: LD_INT 0
68188: PPUSH
68189: PPUSH
68190: PPUSH
68191: PPUSH
68192: PPUSH
68193: PPUSH
68194: PPUSH
68195: PPUSH
// if not turrets or not factories then
68196: LD_VAR 0 1
68200: NOT
68201: PUSH
68202: LD_VAR 0 2
68206: NOT
68207: OR
68208: IFFALSE 68212
// exit ;
68210: GO 68519
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68212: LD_ADDR_VAR 0 10
68216: PUSH
68217: LD_INT 5
68219: PUSH
68220: LD_INT 6
68222: PUSH
68223: EMPTY
68224: LIST
68225: LIST
68226: PUSH
68227: LD_INT 2
68229: PUSH
68230: LD_INT 4
68232: PUSH
68233: EMPTY
68234: LIST
68235: LIST
68236: PUSH
68237: LD_INT 3
68239: PUSH
68240: LD_INT 5
68242: PUSH
68243: EMPTY
68244: LIST
68245: LIST
68246: PUSH
68247: EMPTY
68248: LIST
68249: LIST
68250: LIST
68251: PUSH
68252: LD_INT 24
68254: PUSH
68255: LD_INT 25
68257: PUSH
68258: EMPTY
68259: LIST
68260: LIST
68261: PUSH
68262: LD_INT 23
68264: PUSH
68265: LD_INT 27
68267: PUSH
68268: EMPTY
68269: LIST
68270: LIST
68271: PUSH
68272: EMPTY
68273: LIST
68274: LIST
68275: PUSH
68276: LD_INT 42
68278: PUSH
68279: LD_INT 43
68281: PUSH
68282: EMPTY
68283: LIST
68284: LIST
68285: PUSH
68286: LD_INT 44
68288: PUSH
68289: LD_INT 46
68291: PUSH
68292: EMPTY
68293: LIST
68294: LIST
68295: PUSH
68296: LD_INT 45
68298: PUSH
68299: LD_INT 47
68301: PUSH
68302: EMPTY
68303: LIST
68304: LIST
68305: PUSH
68306: EMPTY
68307: LIST
68308: LIST
68309: LIST
68310: PUSH
68311: EMPTY
68312: LIST
68313: LIST
68314: LIST
68315: ST_TO_ADDR
// result := [ ] ;
68316: LD_ADDR_VAR 0 3
68320: PUSH
68321: EMPTY
68322: ST_TO_ADDR
// for i in turrets do
68323: LD_ADDR_VAR 0 4
68327: PUSH
68328: LD_VAR 0 1
68332: PUSH
68333: FOR_IN
68334: IFFALSE 68517
// begin nat := GetNation ( i ) ;
68336: LD_ADDR_VAR 0 7
68340: PUSH
68341: LD_VAR 0 4
68345: PPUSH
68346: CALL_OW 248
68350: ST_TO_ADDR
// weapon := 0 ;
68351: LD_ADDR_VAR 0 8
68355: PUSH
68356: LD_INT 0
68358: ST_TO_ADDR
// if not nat then
68359: LD_VAR 0 7
68363: NOT
68364: IFFALSE 68368
// continue ;
68366: GO 68333
// for j in list [ nat ] do
68368: LD_ADDR_VAR 0 5
68372: PUSH
68373: LD_VAR 0 10
68377: PUSH
68378: LD_VAR 0 7
68382: ARRAY
68383: PUSH
68384: FOR_IN
68385: IFFALSE 68426
// if GetBWeapon ( i ) = j [ 1 ] then
68387: LD_VAR 0 4
68391: PPUSH
68392: CALL_OW 269
68396: PUSH
68397: LD_VAR 0 5
68401: PUSH
68402: LD_INT 1
68404: ARRAY
68405: EQUAL
68406: IFFALSE 68424
// begin weapon := j [ 2 ] ;
68408: LD_ADDR_VAR 0 8
68412: PUSH
68413: LD_VAR 0 5
68417: PUSH
68418: LD_INT 2
68420: ARRAY
68421: ST_TO_ADDR
// break ;
68422: GO 68426
// end ;
68424: GO 68384
68426: POP
68427: POP
// if not weapon then
68428: LD_VAR 0 8
68432: NOT
68433: IFFALSE 68437
// continue ;
68435: GO 68333
// for k in factories do
68437: LD_ADDR_VAR 0 6
68441: PUSH
68442: LD_VAR 0 2
68446: PUSH
68447: FOR_IN
68448: IFFALSE 68513
// begin weapons := AvailableWeaponList ( k ) ;
68450: LD_ADDR_VAR 0 9
68454: PUSH
68455: LD_VAR 0 6
68459: PPUSH
68460: CALL_OW 478
68464: ST_TO_ADDR
// if not weapons then
68465: LD_VAR 0 9
68469: NOT
68470: IFFALSE 68474
// continue ;
68472: GO 68447
// if weapon in weapons then
68474: LD_VAR 0 8
68478: PUSH
68479: LD_VAR 0 9
68483: IN
68484: IFFALSE 68511
// begin result := [ i , weapon ] ;
68486: LD_ADDR_VAR 0 3
68490: PUSH
68491: LD_VAR 0 4
68495: PUSH
68496: LD_VAR 0 8
68500: PUSH
68501: EMPTY
68502: LIST
68503: LIST
68504: ST_TO_ADDR
// exit ;
68505: POP
68506: POP
68507: POP
68508: POP
68509: GO 68519
// end ; end ;
68511: GO 68447
68513: POP
68514: POP
// end ;
68515: GO 68333
68517: POP
68518: POP
// end ;
68519: LD_VAR 0 3
68523: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68524: LD_INT 0
68526: PPUSH
// if not side or side > 8 then
68527: LD_VAR 0 3
68531: NOT
68532: PUSH
68533: LD_VAR 0 3
68537: PUSH
68538: LD_INT 8
68540: GREATER
68541: OR
68542: IFFALSE 68546
// exit ;
68544: GO 68605
// if not range then
68546: LD_VAR 0 4
68550: NOT
68551: IFFALSE 68562
// range := - 12 ;
68553: LD_ADDR_VAR 0 4
68557: PUSH
68558: LD_INT 12
68560: NEG
68561: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68562: LD_VAR 0 1
68566: PPUSH
68567: LD_VAR 0 2
68571: PPUSH
68572: LD_VAR 0 3
68576: PPUSH
68577: LD_VAR 0 4
68581: PPUSH
68582: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68586: LD_VAR 0 1
68590: PPUSH
68591: LD_VAR 0 2
68595: PPUSH
68596: LD_VAR 0 3
68600: PPUSH
68601: CALL_OW 331
// end ;
68605: LD_VAR 0 5
68609: RET
// export function Video ( mode ) ; begin
68610: LD_INT 0
68612: PPUSH
// ingame_video = mode ;
68613: LD_ADDR_OWVAR 52
68617: PUSH
68618: LD_VAR 0 1
68622: ST_TO_ADDR
// interface_hidden = mode ;
68623: LD_ADDR_OWVAR 54
68627: PUSH
68628: LD_VAR 0 1
68632: ST_TO_ADDR
// end ;
68633: LD_VAR 0 2
68637: RET
// export function Join ( array , element ) ; begin
68638: LD_INT 0
68640: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68641: LD_ADDR_VAR 0 3
68645: PUSH
68646: LD_VAR 0 1
68650: PPUSH
68651: LD_VAR 0 1
68655: PUSH
68656: LD_INT 1
68658: PLUS
68659: PPUSH
68660: LD_VAR 0 2
68664: PPUSH
68665: CALL_OW 1
68669: ST_TO_ADDR
// end ;
68670: LD_VAR 0 3
68674: RET
// export function JoinUnion ( array , element ) ; begin
68675: LD_INT 0
68677: PPUSH
// result := array union element ;
68678: LD_ADDR_VAR 0 3
68682: PUSH
68683: LD_VAR 0 1
68687: PUSH
68688: LD_VAR 0 2
68692: UNION
68693: ST_TO_ADDR
// end ;
68694: LD_VAR 0 3
68698: RET
// export function GetBehemoths ( side ) ; begin
68699: LD_INT 0
68701: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
68702: LD_ADDR_VAR 0 2
68706: PUSH
68707: LD_INT 22
68709: PUSH
68710: LD_VAR 0 1
68714: PUSH
68715: EMPTY
68716: LIST
68717: LIST
68718: PUSH
68719: LD_INT 31
68721: PUSH
68722: LD_INT 25
68724: PUSH
68725: EMPTY
68726: LIST
68727: LIST
68728: PUSH
68729: EMPTY
68730: LIST
68731: LIST
68732: PPUSH
68733: CALL_OW 69
68737: ST_TO_ADDR
// end ;
68738: LD_VAR 0 2
68742: RET
// export function Shuffle ( array ) ; var i , index ; begin
68743: LD_INT 0
68745: PPUSH
68746: PPUSH
68747: PPUSH
// result := [ ] ;
68748: LD_ADDR_VAR 0 2
68752: PUSH
68753: EMPTY
68754: ST_TO_ADDR
// if not array then
68755: LD_VAR 0 1
68759: NOT
68760: IFFALSE 68764
// exit ;
68762: GO 68863
// Randomize ;
68764: CALL_OW 10
// for i = array downto 1 do
68768: LD_ADDR_VAR 0 3
68772: PUSH
68773: DOUBLE
68774: LD_VAR 0 1
68778: INC
68779: ST_TO_ADDR
68780: LD_INT 1
68782: PUSH
68783: FOR_DOWNTO
68784: IFFALSE 68861
// begin index := rand ( 1 , array ) ;
68786: LD_ADDR_VAR 0 4
68790: PUSH
68791: LD_INT 1
68793: PPUSH
68794: LD_VAR 0 1
68798: PPUSH
68799: CALL_OW 12
68803: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68804: LD_ADDR_VAR 0 2
68808: PUSH
68809: LD_VAR 0 2
68813: PPUSH
68814: LD_VAR 0 2
68818: PUSH
68819: LD_INT 1
68821: PLUS
68822: PPUSH
68823: LD_VAR 0 1
68827: PUSH
68828: LD_VAR 0 4
68832: ARRAY
68833: PPUSH
68834: CALL_OW 2
68838: ST_TO_ADDR
// array := Delete ( array , index ) ;
68839: LD_ADDR_VAR 0 1
68843: PUSH
68844: LD_VAR 0 1
68848: PPUSH
68849: LD_VAR 0 4
68853: PPUSH
68854: CALL_OW 3
68858: ST_TO_ADDR
// end ;
68859: GO 68783
68861: POP
68862: POP
// end ;
68863: LD_VAR 0 2
68867: RET
// export function GetBaseMaterials ( base ) ; begin
68868: LD_INT 0
68870: PPUSH
// result := [ 0 , 0 , 0 ] ;
68871: LD_ADDR_VAR 0 2
68875: PUSH
68876: LD_INT 0
68878: PUSH
68879: LD_INT 0
68881: PUSH
68882: LD_INT 0
68884: PUSH
68885: EMPTY
68886: LIST
68887: LIST
68888: LIST
68889: ST_TO_ADDR
// if not base then
68890: LD_VAR 0 1
68894: NOT
68895: IFFALSE 68899
// exit ;
68897: GO 68948
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68899: LD_ADDR_VAR 0 2
68903: PUSH
68904: LD_VAR 0 1
68908: PPUSH
68909: LD_INT 1
68911: PPUSH
68912: CALL_OW 275
68916: PUSH
68917: LD_VAR 0 1
68921: PPUSH
68922: LD_INT 2
68924: PPUSH
68925: CALL_OW 275
68929: PUSH
68930: LD_VAR 0 1
68934: PPUSH
68935: LD_INT 3
68937: PPUSH
68938: CALL_OW 275
68942: PUSH
68943: EMPTY
68944: LIST
68945: LIST
68946: LIST
68947: ST_TO_ADDR
// end ;
68948: LD_VAR 0 2
68952: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68953: LD_INT 0
68955: PPUSH
68956: PPUSH
// result := array ;
68957: LD_ADDR_VAR 0 3
68961: PUSH
68962: LD_VAR 0 1
68966: ST_TO_ADDR
// if size > 0 then
68967: LD_VAR 0 2
68971: PUSH
68972: LD_INT 0
68974: GREATER
68975: IFFALSE 69021
// for i := array downto size do
68977: LD_ADDR_VAR 0 4
68981: PUSH
68982: DOUBLE
68983: LD_VAR 0 1
68987: INC
68988: ST_TO_ADDR
68989: LD_VAR 0 2
68993: PUSH
68994: FOR_DOWNTO
68995: IFFALSE 69019
// result := Delete ( result , result ) ;
68997: LD_ADDR_VAR 0 3
69001: PUSH
69002: LD_VAR 0 3
69006: PPUSH
69007: LD_VAR 0 3
69011: PPUSH
69012: CALL_OW 3
69016: ST_TO_ADDR
69017: GO 68994
69019: POP
69020: POP
// end ;
69021: LD_VAR 0 3
69025: RET
// export function ComExit ( unit ) ; var tmp ; begin
69026: LD_INT 0
69028: PPUSH
69029: PPUSH
// if not IsInUnit ( unit ) then
69030: LD_VAR 0 1
69034: PPUSH
69035: CALL_OW 310
69039: NOT
69040: IFFALSE 69044
// exit ;
69042: GO 69104
// tmp := IsInUnit ( unit ) ;
69044: LD_ADDR_VAR 0 3
69048: PUSH
69049: LD_VAR 0 1
69053: PPUSH
69054: CALL_OW 310
69058: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
69059: LD_VAR 0 3
69063: PPUSH
69064: CALL_OW 247
69068: PUSH
69069: LD_INT 2
69071: EQUAL
69072: IFFALSE 69085
// ComExitVehicle ( unit ) else
69074: LD_VAR 0 1
69078: PPUSH
69079: CALL_OW 121
69083: GO 69094
// ComExitBuilding ( unit ) ;
69085: LD_VAR 0 1
69089: PPUSH
69090: CALL_OW 122
// result := tmp ;
69094: LD_ADDR_VAR 0 2
69098: PUSH
69099: LD_VAR 0 3
69103: ST_TO_ADDR
// end ;
69104: LD_VAR 0 2
69108: RET
// export function ComExitAll ( units ) ; var i ; begin
69109: LD_INT 0
69111: PPUSH
69112: PPUSH
// if not units then
69113: LD_VAR 0 1
69117: NOT
69118: IFFALSE 69122
// exit ;
69120: GO 69148
// for i in units do
69122: LD_ADDR_VAR 0 3
69126: PUSH
69127: LD_VAR 0 1
69131: PUSH
69132: FOR_IN
69133: IFFALSE 69146
// ComExit ( i ) ;
69135: LD_VAR 0 3
69139: PPUSH
69140: CALL 69026 0 1
69144: GO 69132
69146: POP
69147: POP
// end ;
69148: LD_VAR 0 2
69152: RET
// export function ResetHc ; begin
69153: LD_INT 0
69155: PPUSH
// InitHc ;
69156: CALL_OW 19
// hc_importance := 0 ;
69160: LD_ADDR_OWVAR 32
69164: PUSH
69165: LD_INT 0
69167: ST_TO_ADDR
// end ;
69168: LD_VAR 0 1
69172: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
69173: LD_INT 0
69175: PPUSH
69176: PPUSH
69177: PPUSH
// _x := ( x1 + x2 ) div 2 ;
69178: LD_ADDR_VAR 0 6
69182: PUSH
69183: LD_VAR 0 1
69187: PUSH
69188: LD_VAR 0 3
69192: PLUS
69193: PUSH
69194: LD_INT 2
69196: DIV
69197: ST_TO_ADDR
// if _x < 0 then
69198: LD_VAR 0 6
69202: PUSH
69203: LD_INT 0
69205: LESS
69206: IFFALSE 69223
// _x := _x * - 1 ;
69208: LD_ADDR_VAR 0 6
69212: PUSH
69213: LD_VAR 0 6
69217: PUSH
69218: LD_INT 1
69220: NEG
69221: MUL
69222: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69223: LD_ADDR_VAR 0 7
69227: PUSH
69228: LD_VAR 0 2
69232: PUSH
69233: LD_VAR 0 4
69237: PLUS
69238: PUSH
69239: LD_INT 2
69241: DIV
69242: ST_TO_ADDR
// if _y < 0 then
69243: LD_VAR 0 7
69247: PUSH
69248: LD_INT 0
69250: LESS
69251: IFFALSE 69268
// _y := _y * - 1 ;
69253: LD_ADDR_VAR 0 7
69257: PUSH
69258: LD_VAR 0 7
69262: PUSH
69263: LD_INT 1
69265: NEG
69266: MUL
69267: ST_TO_ADDR
// result := [ _x , _y ] ;
69268: LD_ADDR_VAR 0 5
69272: PUSH
69273: LD_VAR 0 6
69277: PUSH
69278: LD_VAR 0 7
69282: PUSH
69283: EMPTY
69284: LIST
69285: LIST
69286: ST_TO_ADDR
// end ;
69287: LD_VAR 0 5
69291: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69292: LD_INT 0
69294: PPUSH
69295: PPUSH
69296: PPUSH
69297: PPUSH
// task := GetTaskList ( unit ) ;
69298: LD_ADDR_VAR 0 7
69302: PUSH
69303: LD_VAR 0 1
69307: PPUSH
69308: CALL_OW 437
69312: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69313: LD_VAR 0 7
69317: NOT
69318: PUSH
69319: LD_VAR 0 1
69323: PPUSH
69324: LD_VAR 0 2
69328: PPUSH
69329: CALL_OW 308
69333: NOT
69334: AND
69335: IFFALSE 69339
// exit ;
69337: GO 69457
// if IsInArea ( unit , area ) then
69339: LD_VAR 0 1
69343: PPUSH
69344: LD_VAR 0 2
69348: PPUSH
69349: CALL_OW 308
69353: IFFALSE 69371
// begin ComMoveToArea ( unit , goAway ) ;
69355: LD_VAR 0 1
69359: PPUSH
69360: LD_VAR 0 3
69364: PPUSH
69365: CALL_OW 113
// exit ;
69369: GO 69457
// end ; if task [ 1 ] [ 1 ] <> M then
69371: LD_VAR 0 7
69375: PUSH
69376: LD_INT 1
69378: ARRAY
69379: PUSH
69380: LD_INT 1
69382: ARRAY
69383: PUSH
69384: LD_STRING M
69386: NONEQUAL
69387: IFFALSE 69391
// exit ;
69389: GO 69457
// x := task [ 1 ] [ 2 ] ;
69391: LD_ADDR_VAR 0 5
69395: PUSH
69396: LD_VAR 0 7
69400: PUSH
69401: LD_INT 1
69403: ARRAY
69404: PUSH
69405: LD_INT 2
69407: ARRAY
69408: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69409: LD_ADDR_VAR 0 6
69413: PUSH
69414: LD_VAR 0 7
69418: PUSH
69419: LD_INT 1
69421: ARRAY
69422: PUSH
69423: LD_INT 3
69425: ARRAY
69426: ST_TO_ADDR
// if InArea ( x , y , area ) then
69427: LD_VAR 0 5
69431: PPUSH
69432: LD_VAR 0 6
69436: PPUSH
69437: LD_VAR 0 2
69441: PPUSH
69442: CALL_OW 309
69446: IFFALSE 69457
// ComStop ( unit ) ;
69448: LD_VAR 0 1
69452: PPUSH
69453: CALL_OW 141
// end ;
69457: LD_VAR 0 4
69461: RET
// export function Abs ( value ) ; begin
69462: LD_INT 0
69464: PPUSH
// result := value ;
69465: LD_ADDR_VAR 0 2
69469: PUSH
69470: LD_VAR 0 1
69474: ST_TO_ADDR
// if value < 0 then
69475: LD_VAR 0 1
69479: PUSH
69480: LD_INT 0
69482: LESS
69483: IFFALSE 69500
// result := value * - 1 ;
69485: LD_ADDR_VAR 0 2
69489: PUSH
69490: LD_VAR 0 1
69494: PUSH
69495: LD_INT 1
69497: NEG
69498: MUL
69499: ST_TO_ADDR
// end ;
69500: LD_VAR 0 2
69504: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69505: LD_INT 0
69507: PPUSH
69508: PPUSH
69509: PPUSH
69510: PPUSH
69511: PPUSH
69512: PPUSH
69513: PPUSH
69514: PPUSH
// if not unit or not building then
69515: LD_VAR 0 1
69519: NOT
69520: PUSH
69521: LD_VAR 0 2
69525: NOT
69526: OR
69527: IFFALSE 69531
// exit ;
69529: GO 69757
// x := GetX ( building ) ;
69531: LD_ADDR_VAR 0 4
69535: PUSH
69536: LD_VAR 0 2
69540: PPUSH
69541: CALL_OW 250
69545: ST_TO_ADDR
// y := GetY ( building ) ;
69546: LD_ADDR_VAR 0 6
69550: PUSH
69551: LD_VAR 0 2
69555: PPUSH
69556: CALL_OW 251
69560: ST_TO_ADDR
// d := GetDir ( building ) ;
69561: LD_ADDR_VAR 0 8
69565: PUSH
69566: LD_VAR 0 2
69570: PPUSH
69571: CALL_OW 254
69575: ST_TO_ADDR
// r := 4 ;
69576: LD_ADDR_VAR 0 9
69580: PUSH
69581: LD_INT 4
69583: ST_TO_ADDR
// for i := 1 to 5 do
69584: LD_ADDR_VAR 0 10
69588: PUSH
69589: DOUBLE
69590: LD_INT 1
69592: DEC
69593: ST_TO_ADDR
69594: LD_INT 5
69596: PUSH
69597: FOR_TO
69598: IFFALSE 69755
// begin _x := ShiftX ( x , d , r + i ) ;
69600: LD_ADDR_VAR 0 5
69604: PUSH
69605: LD_VAR 0 4
69609: PPUSH
69610: LD_VAR 0 8
69614: PPUSH
69615: LD_VAR 0 9
69619: PUSH
69620: LD_VAR 0 10
69624: PLUS
69625: PPUSH
69626: CALL_OW 272
69630: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69631: LD_ADDR_VAR 0 7
69635: PUSH
69636: LD_VAR 0 6
69640: PPUSH
69641: LD_VAR 0 8
69645: PPUSH
69646: LD_VAR 0 9
69650: PUSH
69651: LD_VAR 0 10
69655: PLUS
69656: PPUSH
69657: CALL_OW 273
69661: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69662: LD_VAR 0 5
69666: PPUSH
69667: LD_VAR 0 7
69671: PPUSH
69672: CALL_OW 488
69676: PUSH
69677: LD_VAR 0 5
69681: PPUSH
69682: LD_VAR 0 7
69686: PPUSH
69687: CALL_OW 428
69691: PPUSH
69692: CALL_OW 247
69696: PUSH
69697: LD_INT 3
69699: PUSH
69700: LD_INT 2
69702: PUSH
69703: EMPTY
69704: LIST
69705: LIST
69706: IN
69707: NOT
69708: AND
69709: IFFALSE 69753
// begin ComMoveXY ( unit , _x , _y ) ;
69711: LD_VAR 0 1
69715: PPUSH
69716: LD_VAR 0 5
69720: PPUSH
69721: LD_VAR 0 7
69725: PPUSH
69726: CALL_OW 111
// result := [ _x , _y ] ;
69730: LD_ADDR_VAR 0 3
69734: PUSH
69735: LD_VAR 0 5
69739: PUSH
69740: LD_VAR 0 7
69744: PUSH
69745: EMPTY
69746: LIST
69747: LIST
69748: ST_TO_ADDR
// exit ;
69749: POP
69750: POP
69751: GO 69757
// end ; end ;
69753: GO 69597
69755: POP
69756: POP
// end ;
69757: LD_VAR 0 3
69761: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69762: LD_INT 0
69764: PPUSH
69765: PPUSH
69766: PPUSH
// result := 0 ;
69767: LD_ADDR_VAR 0 3
69771: PUSH
69772: LD_INT 0
69774: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69775: LD_VAR 0 1
69779: PUSH
69780: LD_INT 0
69782: LESS
69783: PUSH
69784: LD_VAR 0 1
69788: PUSH
69789: LD_INT 8
69791: GREATER
69792: OR
69793: PUSH
69794: LD_VAR 0 2
69798: PUSH
69799: LD_INT 0
69801: LESS
69802: OR
69803: PUSH
69804: LD_VAR 0 2
69808: PUSH
69809: LD_INT 8
69811: GREATER
69812: OR
69813: IFFALSE 69817
// exit ;
69815: GO 69892
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69817: LD_ADDR_VAR 0 4
69821: PUSH
69822: LD_INT 22
69824: PUSH
69825: LD_VAR 0 2
69829: PUSH
69830: EMPTY
69831: LIST
69832: LIST
69833: PPUSH
69834: CALL_OW 69
69838: PUSH
69839: FOR_IN
69840: IFFALSE 69890
// begin un := UnitShoot ( i ) ;
69842: LD_ADDR_VAR 0 5
69846: PUSH
69847: LD_VAR 0 4
69851: PPUSH
69852: CALL_OW 504
69856: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69857: LD_VAR 0 5
69861: PPUSH
69862: CALL_OW 255
69866: PUSH
69867: LD_VAR 0 1
69871: EQUAL
69872: IFFALSE 69888
// begin result := un ;
69874: LD_ADDR_VAR 0 3
69878: PUSH
69879: LD_VAR 0 5
69883: ST_TO_ADDR
// exit ;
69884: POP
69885: POP
69886: GO 69892
// end ; end ;
69888: GO 69839
69890: POP
69891: POP
// end ;
69892: LD_VAR 0 3
69896: RET
// export function GetCargoBay ( units ) ; begin
69897: LD_INT 0
69899: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69900: LD_ADDR_VAR 0 2
69904: PUSH
69905: LD_VAR 0 1
69909: PPUSH
69910: LD_INT 2
69912: PUSH
69913: LD_INT 34
69915: PUSH
69916: LD_INT 12
69918: PUSH
69919: EMPTY
69920: LIST
69921: LIST
69922: PUSH
69923: LD_INT 34
69925: PUSH
69926: LD_INT 51
69928: PUSH
69929: EMPTY
69930: LIST
69931: LIST
69932: PUSH
69933: LD_INT 34
69935: PUSH
69936: LD_INT 32
69938: PUSH
69939: EMPTY
69940: LIST
69941: LIST
69942: PUSH
69943: LD_INT 34
69945: PUSH
69946: LD_EXP 39
69950: PUSH
69951: EMPTY
69952: LIST
69953: LIST
69954: PUSH
69955: EMPTY
69956: LIST
69957: LIST
69958: LIST
69959: LIST
69960: LIST
69961: PPUSH
69962: CALL_OW 72
69966: ST_TO_ADDR
// end ; end_of_file
69967: LD_VAR 0 2
69971: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
69972: LD_VAR 0 1
69976: PUSH
69977: LD_INT 200
69979: DOUBLE
69980: GREATEREQUAL
69981: IFFALSE 69989
69983: LD_INT 299
69985: DOUBLE
69986: LESSEQUAL
69987: IFTRUE 69991
69989: GO 70023
69991: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
69992: LD_VAR 0 1
69996: PPUSH
69997: LD_VAR 0 2
70001: PPUSH
70002: LD_VAR 0 3
70006: PPUSH
70007: LD_VAR 0 4
70011: PPUSH
70012: LD_VAR 0 5
70016: PPUSH
70017: CALL 28433 0 5
70021: GO 70100
70023: LD_INT 300
70025: DOUBLE
70026: GREATEREQUAL
70027: IFFALSE 70035
70029: LD_INT 399
70031: DOUBLE
70032: LESSEQUAL
70033: IFTRUE 70037
70035: GO 70099
70037: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
70038: LD_VAR 0 1
70042: PPUSH
70043: LD_VAR 0 2
70047: PPUSH
70048: LD_VAR 0 3
70052: PPUSH
70053: LD_VAR 0 4
70057: PPUSH
70058: LD_VAR 0 5
70062: PPUSH
70063: LD_VAR 0 6
70067: PPUSH
70068: LD_VAR 0 7
70072: PPUSH
70073: LD_VAR 0 8
70077: PPUSH
70078: LD_VAR 0 9
70082: PPUSH
70083: LD_VAR 0 10
70087: PPUSH
70088: LD_VAR 0 11
70092: PPUSH
70093: CALL 26321 0 11
70097: GO 70100
70099: POP
// end ;
70100: PPOPN 11
70102: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
70103: LD_VAR 0 1
70107: PPUSH
70108: LD_VAR 0 2
70112: PPUSH
70113: LD_VAR 0 3
70117: PPUSH
70118: LD_VAR 0 4
70122: PPUSH
70123: LD_VAR 0 5
70127: PPUSH
70128: CALL 28415 0 5
// end ; end_of_file
70132: PPOPN 5
70134: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
70135: LD_VAR 0 1
70139: PPUSH
70140: LD_VAR 0 2
70144: PPUSH
70145: LD_VAR 0 3
70149: PPUSH
70150: LD_VAR 0 4
70154: PPUSH
70155: LD_VAR 0 5
70159: PPUSH
70160: LD_VAR 0 6
70164: PPUSH
70165: CALL 15129 0 6
// end ;
70169: PPOPN 6
70171: END
