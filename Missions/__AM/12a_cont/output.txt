// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitVariables ;
  11: CALL 130 0 0
// CreateNature ;
  15: CALL 9503 0 0
// PrepareAlliance ;
  19: CALL 344 0 0
// PrepareFriends ;
  23: CALL 3813 0 0
// PrepareAmerican ;
  27: CALL 781 0 0
// PlaceSeeing ( 91 , 70 , 7 , - 32178 ) ;
  31: LD_INT 91
  33: PPUSH
  34: LD_INT 70
  36: PPUSH
  37: LD_INT 7
  39: PPUSH
  40: LD_INT 32178
  42: NEG
  43: PPUSH
  44: CALL_OW 330
// RemoveSeeing ( 91 , 70 , 7 ) ;
  48: LD_INT 91
  50: PPUSH
  51: LD_INT 70
  53: PPUSH
  54: LD_INT 7
  56: PPUSH
  57: CALL_OW 331
// if debug then
  61: LD_EXP 1
  65: IFFALSE 113
// begin SetAttitude ( 1 , 7 , att_enemy , true ) ;
  67: LD_INT 1
  69: PPUSH
  70: LD_INT 7
  72: PPUSH
  73: LD_INT 2
  75: PPUSH
  76: LD_INT 1
  78: PPUSH
  79: CALL_OW 80
// RemoveUnit ( Powell ) ;
  83: LD_EXP 16
  87: PPUSH
  88: CALL_OW 64
// DoNotAttack ( 1 , JMM ) ;
  92: LD_INT 1
  94: PPUSH
  95: LD_EXP 14
  99: PPUSH
 100: CALL_OW 471
// FogOff ( 1 ) ;
 104: LD_INT 1
 106: PPUSH
 107: CALL_OW 344
// end else
 111: GO 117
// Action ;
 113: CALL 9839 0 0
// PreparePatrol ;
 117: CALL 1405 0 0
// game := true ;
 121: LD_ADDR_EXP 2
 125: PUSH
 126: LD_INT 1
 128: ST_TO_ADDR
// end ;
 129: END
// export debug , game , selected , friends , reached_lab , can_escape , on_hill , friends_kill_counter , team_kill_counter , gamma_commander , extra_patrol , invis_used , alert ; export function InitVariables ; begin
 130: LD_INT 0
 132: PPUSH
// debug := false ;
 133: LD_ADDR_EXP 1
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// friends := [ ] ;
 141: LD_ADDR_EXP 4
 145: PUSH
 146: EMPTY
 147: ST_TO_ADDR
// selected := [ ] ;
 148: LD_ADDR_EXP 3
 152: PUSH
 153: EMPTY
 154: ST_TO_ADDR
// reached_lab := false ;
 155: LD_ADDR_EXP 5
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// can_escape := false ;
 163: LD_ADDR_EXP 6
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// game := false ;
 171: LD_ADDR_EXP 2
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// gamma_commander := LoadVariable ( GammaCommander , 1 ) ;
 179: LD_ADDR_EXP 10
 183: PUSH
 184: LD_STRING GammaCommander
 186: PPUSH
 187: LD_INT 1
 189: PPUSH
 190: CALL_OW 30
 194: ST_TO_ADDR
// friends_kill_counter := 0 ;
 195: LD_ADDR_EXP 8
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// team_kill_counter := 0 ;
 203: LD_ADDR_EXP 9
 207: PUSH
 208: LD_INT 0
 210: ST_TO_ADDR
// extra_patrol := true ;
 211: LD_ADDR_EXP 11
 215: PUSH
 216: LD_INT 1
 218: ST_TO_ADDR
// on_hill := false ;
 219: LD_ADDR_EXP 7
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// invis_used := false ;
 227: LD_ADDR_EXP 12
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// alert := false ;
 235: LD_ADDR_EXP 13
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// end ;
 243: LD_VAR 0 1
 247: RET
// every 0 0$1 trigger on_hill do
 248: LD_EXP 7
 252: IFFALSE 264
 254: GO 256
 256: DISABLE
// SetAchievement ( ACH_EYE ) ;
 257: LD_STRING ACH_EYE
 259: PPUSH
 260: CALL_OW 543
 264: END
// every 0 0$1 trigger not invis_used do var i ;
 265: LD_EXP 12
 269: NOT
 270: IFFALSE 341
 272: GO 274
 274: DISABLE
 275: LD_INT 0
 277: PPUSH
// begin enable ;
 278: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do
 279: LD_ADDR_VAR 0 1
 283: PUSH
 284: LD_INT 22
 286: PUSH
 287: LD_INT 7
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PUSH
 294: LD_INT 21
 296: PUSH
 297: LD_INT 1
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: PUSH
 304: EMPTY
 305: LIST
 306: LIST
 307: PPUSH
 308: CALL_OW 69
 312: PUSH
 313: FOR_IN
 314: IFFALSE 339
// if IsInvisible ( i ) then
 316: LD_VAR 0 1
 320: PPUSH
 321: CALL_OW 571
 325: IFFALSE 337
// begin invis_used := true ;
 327: LD_ADDR_EXP 12
 331: PUSH
 332: LD_INT 1
 334: ST_TO_ADDR
// break ;
 335: GO 339
// end ;
 337: GO 313
 339: POP
 340: POP
// end ; end_of_file
 341: PPOPN 1
 343: END
// export JMM , Roth ; export function PrepareAlliance ; var cargo ; begin
 344: LD_INT 0
 346: PPUSH
 347: PPUSH
// uc_side := 7 ;
 348: LD_ADDR_OWVAR 20
 352: PUSH
 353: LD_INT 7
 355: ST_TO_ADDR
// uc_nation := 1 ;
 356: LD_ADDR_OWVAR 21
 360: PUSH
 361: LD_INT 1
 363: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 11_ ) ;
 364: LD_ADDR_EXP 14
 368: PUSH
 369: LD_STRING JMM
 371: PPUSH
 372: LD_EXP 1
 376: NOT
 377: PPUSH
 378: LD_STRING 11_
 380: PPUSH
 381: CALL 36058 0 3
 385: ST_TO_ADDR
// uc_side := 4 ;
 386: LD_ADDR_OWVAR 20
 390: PUSH
 391: LD_INT 4
 393: ST_TO_ADDR
// Roth := NewCharacter ( Roth ) ;
 394: LD_ADDR_EXP 15
 398: PUSH
 399: LD_STRING Roth
 401: PPUSH
 402: CALL_OW 25
 406: ST_TO_ADDR
// SetDir ( JMM , 1 ) ;
 407: LD_EXP 14
 411: PPUSH
 412: LD_INT 1
 414: PPUSH
 415: CALL_OW 233
// SetClass ( JMM , 1 ) ;
 419: LD_EXP 14
 423: PPUSH
 424: LD_INT 1
 426: PPUSH
 427: CALL_OW 336
// PlaceUnitXY ( JMM , 105 , 10 , false ) ;
 431: LD_EXP 14
 435: PPUSH
 436: LD_INT 105
 438: PPUSH
 439: LD_INT 10
 441: PPUSH
 442: LD_INT 0
 444: PPUSH
 445: CALL_OW 48
// SetDir ( Roth , 4 ) ;
 449: LD_EXP 15
 453: PPUSH
 454: LD_INT 4
 456: PPUSH
 457: CALL_OW 233
// PlaceUnitXY ( Roth , 109 , 10 , false ) ;
 461: LD_EXP 15
 465: PPUSH
 466: LD_INT 109
 468: PPUSH
 469: LD_INT 10
 471: PPUSH
 472: LD_INT 0
 474: PPUSH
 475: CALL_OW 48
// ComTurnUnit ( JMM , Roth ) ;
 479: LD_EXP 14
 483: PPUSH
 484: LD_EXP 15
 488: PPUSH
 489: CALL_OW 119
// ComTurnUnit ( Roth , JMM ) ;
 493: LD_EXP 15
 497: PPUSH
 498: LD_EXP 14
 502: PPUSH
 503: CALL_OW 119
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
 507: LD_INT 3
 509: PPUSH
 510: LD_INT 3
 512: PPUSH
 513: LD_INT 3
 515: PPUSH
 516: LD_INT 12
 518: PPUSH
 519: LD_INT 100
 521: PPUSH
 522: CALL 40898 0 5
// cargo := CreateVehicle ;
 526: LD_ADDR_VAR 0 2
 530: PUSH
 531: CALL_OW 45
 535: ST_TO_ADDR
// SetDir ( cargo , 1 ) ;
 536: LD_VAR 0 2
 540: PPUSH
 541: LD_INT 1
 543: PPUSH
 544: CALL_OW 233
// PlaceUnitXY ( cargo , 179 , 45 , false ) ;
 548: LD_VAR 0 2
 552: PPUSH
 553: LD_INT 179
 555: PPUSH
 556: LD_INT 45
 558: PPUSH
 559: LD_INT 0
 561: PPUSH
 562: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 30 ) ;
 566: LD_VAR 0 2
 570: PPUSH
 571: LD_INT 4
 573: PPUSH
 574: LD_INT 30
 576: PPUSH
 577: CALL_OW 290
// if LoadVariable ( 11_artifact_captured , 0 ) then
 581: LD_STRING 11_artifact_captured
 583: PPUSH
 584: LD_INT 0
 586: PPUSH
 587: CALL_OW 30
 591: IFFALSE 648
// begin cargo := CreateVehicle ;
 593: LD_ADDR_VAR 0 2
 597: PUSH
 598: CALL_OW 45
 602: ST_TO_ADDR
// SetDir ( cargo , 0 ) ;
 603: LD_VAR 0 2
 607: PPUSH
 608: LD_INT 0
 610: PPUSH
 611: CALL_OW 233
// PlaceUnitXY ( cargo , 171 , 85 , false ) ;
 615: LD_VAR 0 2
 619: PPUSH
 620: LD_INT 171
 622: PPUSH
 623: LD_INT 85
 625: PPUSH
 626: LD_INT 0
 628: PPUSH
 629: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 50 ) ;
 633: LD_VAR 0 2
 637: PPUSH
 638: LD_INT 4
 640: PPUSH
 641: LD_INT 50
 643: PPUSH
 644: CALL_OW 290
// end ; SetSide ( amlab , 7 ) ;
 648: LD_INT 47
 650: PPUSH
 651: LD_INT 7
 653: PPUSH
 654: CALL_OW 235
// DoNotAttack ( 1 , amlab ) ;
 658: LD_INT 1
 660: PPUSH
 661: LD_INT 47
 663: PPUSH
 664: CALL_OW 471
// end ;
 668: LD_VAR 0 1
 672: RET
// every 0 0$1 trigger FilterUnitsInArea ( hill , [ f_side , 7 ] ) and not on_hill do
 673: LD_INT 38
 675: PPUSH
 676: LD_INT 22
 678: PUSH
 679: LD_INT 7
 681: PUSH
 682: EMPTY
 683: LIST
 684: LIST
 685: PPUSH
 686: CALL_OW 70
 690: PUSH
 691: LD_EXP 7
 695: NOT
 696: AND
 697: IFFALSE 728
 699: GO 701
 701: DISABLE
// begin enable ;
 702: ENABLE
// on_hill := true ;
 703: LD_ADDR_EXP 7
 707: PUSH
 708: LD_INT 1
 710: ST_TO_ADDR
// PlaceSeeing ( 126 , 13 , 7 , - 90 ) ;
 711: LD_INT 126
 713: PPUSH
 714: LD_INT 13
 716: PPUSH
 717: LD_INT 7
 719: PPUSH
 720: LD_INT 90
 722: NEG
 723: PPUSH
 724: CALL_OW 330
// end ;
 728: END
// every 0 0$1 trigger not FilterUnitsInArea ( hill , [ f_side , 7 ] ) and on_hill do
 729: LD_INT 38
 731: PPUSH
 732: LD_INT 22
 734: PUSH
 735: LD_INT 7
 737: PUSH
 738: EMPTY
 739: LIST
 740: LIST
 741: PPUSH
 742: CALL_OW 70
 746: NOT
 747: PUSH
 748: LD_EXP 7
 752: AND
 753: IFFALSE 780
 755: GO 757
 757: DISABLE
// begin enable ;
 758: ENABLE
// on_hill := false ;
 759: LD_ADDR_EXP 7
 763: PUSH
 764: LD_INT 0
 766: ST_TO_ADDR
// RemoveSeeing ( 126 , 13 , 7 ) ;
 767: LD_INT 126
 769: PPUSH
 770: LD_INT 13
 772: PPUSH
 773: LD_INT 7
 775: PPUSH
 776: CALL_OW 331
// end ; end_of_file
 780: END
// export Powell , mobile_patrol , mobile_points , powell_guards , defenders , defcon , defcon_wave ; export function PrepareAmerican ; var i , j , b , un , tmp ; begin
 781: LD_INT 0
 783: PPUSH
 784: PPUSH
 785: PPUSH
 786: PPUSH
 787: PPUSH
 788: PPUSH
// if Difficulty = 1 then
 789: LD_OWVAR 67
 793: PUSH
 794: LD_INT 1
 796: EQUAL
 797: IFFALSE 905
// begin tmp := [ [ 155 , 77 ] , [ 193 , 93 ] , [ 188 , 81 ] , [ 56 , 85 ] , [ 98 , 87 ] ] ;
 799: LD_ADDR_VAR 0 6
 803: PUSH
 804: LD_INT 155
 806: PUSH
 807: LD_INT 77
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: PUSH
 814: LD_INT 193
 816: PUSH
 817: LD_INT 93
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PUSH
 824: LD_INT 188
 826: PUSH
 827: LD_INT 81
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: PUSH
 834: LD_INT 56
 836: PUSH
 837: LD_INT 85
 839: PUSH
 840: EMPTY
 841: LIST
 842: LIST
 843: PUSH
 844: LD_INT 98
 846: PUSH
 847: LD_INT 87
 849: PUSH
 850: EMPTY
 851: LIST
 852: LIST
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: ST_TO_ADDR
// for i in tmp do
 861: LD_ADDR_VAR 0 2
 865: PUSH
 866: LD_VAR 0 6
 870: PUSH
 871: FOR_IN
 872: IFFALSE 903
// RemoveUnit ( HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
 874: LD_VAR 0 2
 878: PUSH
 879: LD_INT 1
 881: ARRAY
 882: PPUSH
 883: LD_VAR 0 2
 887: PUSH
 888: LD_INT 2
 890: ARRAY
 891: PPUSH
 892: CALL_OW 428
 896: PPUSH
 897: CALL_OW 64
 901: GO 871
 903: POP
 904: POP
// end ; defcon := 0 ;
 905: LD_ADDR_EXP 21
 909: PUSH
 910: LD_INT 0
 912: ST_TO_ADDR
// defcon_wave := 0 ;
 913: LD_ADDR_EXP 22
 917: PUSH
 918: LD_INT 0
 920: ST_TO_ADDR
// defenders := [ ] ;
 921: LD_ADDR_EXP 20
 925: PUSH
 926: EMPTY
 927: ST_TO_ADDR
// SetBName ( alfa , alfa ) ;
 928: LD_INT 5
 930: PPUSH
 931: LD_STRING alfa
 933: PPUSH
 934: CALL_OW 500
// uc_side := 1 ;
 938: LD_ADDR_OWVAR 20
 942: PUSH
 943: LD_INT 1
 945: ST_TO_ADDR
// uc_nation := 1 ;
 946: LD_ADDR_OWVAR 21
 950: PUSH
 951: LD_INT 1
 953: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
 954: LD_ADDR_EXP 16
 958: PUSH
 959: LD_STRING Powell
 961: PPUSH
 962: CALL_OW 25
 966: ST_TO_ADDR
// PlaceUnitXY ( Powell , 110 , 26 , false ) ;
 967: LD_EXP 16
 971: PPUSH
 972: LD_INT 110
 974: PPUSH
 975: LD_INT 26
 977: PPUSH
 978: LD_INT 0
 980: PPUSH
 981: CALL_OW 48
// ComHold ( Powell ) ;
 985: LD_EXP 16
 989: PPUSH
 990: CALL_OW 140
// for i := 1 to 5 do
 994: LD_ADDR_VAR 0 2
 998: PUSH
 999: DOUBLE
1000: LD_INT 1
1002: DEC
1003: ST_TO_ADDR
1004: LD_INT 5
1006: PUSH
1007: FOR_TO
1008: IFFALSE 1064
// begin PrepareHuman ( false , 1 , 10 ) ;
1010: LD_INT 0
1012: PPUSH
1013: LD_INT 1
1015: PPUSH
1016: LD_INT 10
1018: PPUSH
1019: CALL_OW 380
// powell_guards := Insert ( powell_guards , 1 , CreateHuman ) ;
1023: LD_ADDR_EXP 19
1027: PUSH
1028: LD_EXP 19
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: CALL_OW 44
1040: PPUSH
1041: CALL_OW 2
1045: ST_TO_ADDR
// PlaceHumanInUnit ( powell_guards [ 1 ] , ambar0 ) ;
1046: LD_EXP 19
1050: PUSH
1051: LD_INT 1
1053: ARRAY
1054: PPUSH
1055: LD_INT 18
1057: PPUSH
1058: CALL_OW 52
// end ;
1062: GO 1007
1064: POP
1065: POP
// if Difficulty > 1 then
1066: LD_OWVAR 67
1070: PUSH
1071: LD_INT 1
1073: GREATER
1074: IFFALSE 1225
// begin tmp := [ [ 81 , 33 ] , [ 134 , 114 ] , [ 193 , 102 ] ] ;
1076: LD_ADDR_VAR 0 6
1080: PUSH
1081: LD_INT 81
1083: PUSH
1084: LD_INT 33
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: PUSH
1091: LD_INT 134
1093: PUSH
1094: LD_INT 114
1096: PUSH
1097: EMPTY
1098: LIST
1099: LIST
1100: PUSH
1101: LD_INT 193
1103: PUSH
1104: LD_INT 102
1106: PUSH
1107: EMPTY
1108: LIST
1109: LIST
1110: PUSH
1111: EMPTY
1112: LIST
1113: LIST
1114: LIST
1115: ST_TO_ADDR
// for i := 1 to Difficulty - 1 do
1116: LD_ADDR_VAR 0 2
1120: PUSH
1121: DOUBLE
1122: LD_INT 1
1124: DEC
1125: ST_TO_ADDR
1126: LD_OWVAR 67
1130: PUSH
1131: LD_INT 1
1133: MINUS
1134: PUSH
1135: FOR_TO
1136: IFFALSE 1223
// begin PrepareSoldier ( false , 10 ) ;
1138: LD_INT 0
1140: PPUSH
1141: LD_INT 10
1143: PPUSH
1144: CALL_OW 381
// un := CreateHuman ;
1148: LD_ADDR_VAR 0 5
1152: PUSH
1153: CALL_OW 44
1157: ST_TO_ADDR
// SetClass ( un , class_sniper ) ;
1158: LD_VAR 0 5
1162: PPUSH
1163: LD_INT 5
1165: PPUSH
1166: CALL_OW 336
// PlaceUnitXY ( un , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
1170: LD_VAR 0 5
1174: PPUSH
1175: LD_VAR 0 6
1179: PUSH
1180: LD_VAR 0 2
1184: ARRAY
1185: PUSH
1186: LD_INT 1
1188: ARRAY
1189: PPUSH
1190: LD_VAR 0 6
1194: PUSH
1195: LD_VAR 0 2
1199: ARRAY
1200: PUSH
1201: LD_INT 2
1203: ARRAY
1204: PPUSH
1205: LD_INT 0
1207: PPUSH
1208: CALL_OW 48
// ComHold ( un ) ;
1212: LD_VAR 0 5
1216: PPUSH
1217: CALL_OW 140
// end ;
1221: GO 1135
1223: POP
1224: POP
// end ; if Difficulty > 2 then
1225: LD_OWVAR 67
1229: PUSH
1230: LD_INT 2
1232: GREATER
1233: IFFALSE 1282
// begin bc_type := b_turret ;
1235: LD_ADDR_OWVAR 42
1239: PUSH
1240: LD_INT 33
1242: ST_TO_ADDR
// bc_level := 7 ;
1243: LD_ADDR_OWVAR 43
1247: PUSH
1248: LD_INT 7
1250: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 107 , 55 , 5 ) ;
1251: LD_ADDR_VAR 0 4
1255: PUSH
1256: LD_INT 107
1258: PPUSH
1259: LD_INT 55
1261: PPUSH
1262: LD_INT 5
1264: PPUSH
1265: CALL_OW 47
1269: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_rocket_launcher ) ;
1270: LD_VAR 0 4
1274: PPUSH
1275: LD_INT 7
1277: PPUSH
1278: CALL_OW 431
// end ; for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ^ FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) do
1282: LD_ADDR_VAR 0 2
1286: PUSH
1287: LD_INT 22
1289: PUSH
1290: LD_INT 1
1292: PUSH
1293: EMPTY
1294: LIST
1295: LIST
1296: PUSH
1297: LD_INT 30
1299: PUSH
1300: LD_INT 3
1302: PUSH
1303: EMPTY
1304: LIST
1305: LIST
1306: PUSH
1307: EMPTY
1308: LIST
1309: LIST
1310: PPUSH
1311: CALL_OW 69
1315: PUSH
1316: LD_INT 22
1318: PUSH
1319: LD_INT 1
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: PUSH
1326: LD_INT 30
1328: PUSH
1329: LD_INT 36
1331: PUSH
1332: EMPTY
1333: LIST
1334: LIST
1335: PUSH
1336: EMPTY
1337: LIST
1338: LIST
1339: PPUSH
1340: CALL_OW 69
1344: ADD
1345: PUSH
1346: FOR_IN
1347: IFFALSE 1398
// for j = 1 to 3 do
1349: LD_ADDR_VAR 0 3
1353: PUSH
1354: DOUBLE
1355: LD_INT 1
1357: DEC
1358: ST_TO_ADDR
1359: LD_INT 3
1361: PUSH
1362: FOR_TO
1363: IFFALSE 1394
// begin PrepareHuman ( false , 3 , 6 ) ;
1365: LD_INT 0
1367: PPUSH
1368: LD_INT 3
1370: PPUSH
1371: LD_INT 6
1373: PPUSH
1374: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
1378: CALL_OW 44
1382: PPUSH
1383: LD_VAR 0 2
1387: PPUSH
1388: CALL_OW 52
// end ;
1392: GO 1362
1394: POP
1395: POP
1396: GO 1346
1398: POP
1399: POP
// end ;
1400: LD_VAR 0 1
1404: RET
// export function PreparePatrol ; var i , un ; begin
1405: LD_INT 0
1407: PPUSH
1408: PPUSH
1409: PPUSH
// uc_side := 1 ;
1410: LD_ADDR_OWVAR 20
1414: PUSH
1415: LD_INT 1
1417: ST_TO_ADDR
// uc_nation := 1 ;
1418: LD_ADDR_OWVAR 21
1422: PUSH
1423: LD_INT 1
1425: ST_TO_ADDR
// mobile_points := [ [ [ 99 , 55 ] , [ 113 , 67 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 103 , 41 ] ] , [ [ 27 , 49 ] , [ 46 , 49 ] , [ 87 , 70 ] , [ 99 , 79 ] , [ 118 , 111 ] , [ 99 , 79 ] , [ 87 , 70 ] , [ 46 , 49 ] ] , [ [ 200 , 88 ] , [ 175 , 80 ] , [ 135 , 62 ] , [ 117 , 53 ] , [ 103 , 41 ] , [ 99 , 24 ] , [ 85 , 3 ] , [ 99 , 24 ] , [ 103 , 41 ] , [ 98 , 47 ] , [ 99 , 56 ] , [ 96 , 66 ] , [ 99 , 56 ] , [ 112 , 66 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 156 , 71 ] , [ 168 , 76 ] , [ 168 , 61 ] , [ 168 , 75 ] , [ 185 , 85 ] ] ] ;
1426: LD_ADDR_EXP 18
1430: PUSH
1431: LD_INT 99
1433: PUSH
1434: LD_INT 55
1436: PUSH
1437: EMPTY
1438: LIST
1439: LIST
1440: PUSH
1441: LD_INT 113
1443: PUSH
1444: LD_INT 67
1446: PUSH
1447: EMPTY
1448: LIST
1449: LIST
1450: PUSH
1451: LD_INT 129
1453: PUSH
1454: LD_INT 68
1456: PUSH
1457: EMPTY
1458: LIST
1459: LIST
1460: PUSH
1461: LD_INT 135
1463: PUSH
1464: LD_INT 62
1466: PUSH
1467: EMPTY
1468: LIST
1469: LIST
1470: PUSH
1471: LD_INT 103
1473: PUSH
1474: LD_INT 41
1476: PUSH
1477: EMPTY
1478: LIST
1479: LIST
1480: PUSH
1481: EMPTY
1482: LIST
1483: LIST
1484: LIST
1485: LIST
1486: LIST
1487: PUSH
1488: LD_INT 27
1490: PUSH
1491: LD_INT 49
1493: PUSH
1494: EMPTY
1495: LIST
1496: LIST
1497: PUSH
1498: LD_INT 46
1500: PUSH
1501: LD_INT 49
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: PUSH
1508: LD_INT 87
1510: PUSH
1511: LD_INT 70
1513: PUSH
1514: EMPTY
1515: LIST
1516: LIST
1517: PUSH
1518: LD_INT 99
1520: PUSH
1521: LD_INT 79
1523: PUSH
1524: EMPTY
1525: LIST
1526: LIST
1527: PUSH
1528: LD_INT 118
1530: PUSH
1531: LD_INT 111
1533: PUSH
1534: EMPTY
1535: LIST
1536: LIST
1537: PUSH
1538: LD_INT 99
1540: PUSH
1541: LD_INT 79
1543: PUSH
1544: EMPTY
1545: LIST
1546: LIST
1547: PUSH
1548: LD_INT 87
1550: PUSH
1551: LD_INT 70
1553: PUSH
1554: EMPTY
1555: LIST
1556: LIST
1557: PUSH
1558: LD_INT 46
1560: PUSH
1561: LD_INT 49
1563: PUSH
1564: EMPTY
1565: LIST
1566: LIST
1567: PUSH
1568: EMPTY
1569: LIST
1570: LIST
1571: LIST
1572: LIST
1573: LIST
1574: LIST
1575: LIST
1576: LIST
1577: PUSH
1578: LD_INT 200
1580: PUSH
1581: LD_INT 88
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: PUSH
1588: LD_INT 175
1590: PUSH
1591: LD_INT 80
1593: PUSH
1594: EMPTY
1595: LIST
1596: LIST
1597: PUSH
1598: LD_INT 135
1600: PUSH
1601: LD_INT 62
1603: PUSH
1604: EMPTY
1605: LIST
1606: LIST
1607: PUSH
1608: LD_INT 117
1610: PUSH
1611: LD_INT 53
1613: PUSH
1614: EMPTY
1615: LIST
1616: LIST
1617: PUSH
1618: LD_INT 103
1620: PUSH
1621: LD_INT 41
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: PUSH
1628: LD_INT 99
1630: PUSH
1631: LD_INT 24
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: PUSH
1638: LD_INT 85
1640: PUSH
1641: LD_INT 3
1643: PUSH
1644: EMPTY
1645: LIST
1646: LIST
1647: PUSH
1648: LD_INT 99
1650: PUSH
1651: LD_INT 24
1653: PUSH
1654: EMPTY
1655: LIST
1656: LIST
1657: PUSH
1658: LD_INT 103
1660: PUSH
1661: LD_INT 41
1663: PUSH
1664: EMPTY
1665: LIST
1666: LIST
1667: PUSH
1668: LD_INT 98
1670: PUSH
1671: LD_INT 47
1673: PUSH
1674: EMPTY
1675: LIST
1676: LIST
1677: PUSH
1678: LD_INT 99
1680: PUSH
1681: LD_INT 56
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: PUSH
1688: LD_INT 96
1690: PUSH
1691: LD_INT 66
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: PUSH
1698: LD_INT 99
1700: PUSH
1701: LD_INT 56
1703: PUSH
1704: EMPTY
1705: LIST
1706: LIST
1707: PUSH
1708: LD_INT 112
1710: PUSH
1711: LD_INT 66
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: PUSH
1718: LD_INT 129
1720: PUSH
1721: LD_INT 68
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: PUSH
1728: LD_INT 135
1730: PUSH
1731: LD_INT 62
1733: PUSH
1734: EMPTY
1735: LIST
1736: LIST
1737: PUSH
1738: LD_INT 156
1740: PUSH
1741: LD_INT 71
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: PUSH
1748: LD_INT 168
1750: PUSH
1751: LD_INT 76
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: LD_INT 168
1760: PUSH
1761: LD_INT 61
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: PUSH
1768: LD_INT 168
1770: PUSH
1771: LD_INT 75
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: PUSH
1778: LD_INT 185
1780: PUSH
1781: LD_INT 85
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: PUSH
1788: EMPTY
1789: LIST
1790: LIST
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: PUSH
1811: EMPTY
1812: LIST
1813: LIST
1814: LIST
1815: ST_TO_ADDR
// mobile_patrol := [ ] ;
1816: LD_ADDR_EXP 17
1820: PUSH
1821: EMPTY
1822: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1823: LD_INT 3
1825: PPUSH
1826: LD_INT 1
1828: PPUSH
1829: LD_INT 3
1831: PPUSH
1832: LD_INT 4
1834: PPUSH
1835: LD_INT 100
1837: PPUSH
1838: CALL 40898 0 5
// mobile_patrol := Insert ( mobile_patrol , 1 , CreateVehicle ) ;
1842: LD_ADDR_EXP 17
1846: PUSH
1847: LD_EXP 17
1851: PPUSH
1852: LD_INT 1
1854: PPUSH
1855: CALL_OW 45
1859: PPUSH
1860: CALL_OW 2
1864: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 1 ] , 99 , 55 , false ) ;
1865: LD_EXP 17
1869: PUSH
1870: LD_INT 1
1872: ARRAY
1873: PPUSH
1874: LD_INT 99
1876: PPUSH
1877: LD_INT 55
1879: PPUSH
1880: LD_INT 0
1882: PPUSH
1883: CALL_OW 48
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1887: LD_INT 2
1889: PPUSH
1890: LD_INT 1
1892: PPUSH
1893: LD_INT 3
1895: PPUSH
1896: LD_INT 4
1898: PPUSH
1899: LD_INT 100
1901: PPUSH
1902: CALL 40898 0 5
// mobile_patrol := Insert ( mobile_patrol , 2 , CreateVehicle ) ;
1906: LD_ADDR_EXP 17
1910: PUSH
1911: LD_EXP 17
1915: PPUSH
1916: LD_INT 2
1918: PPUSH
1919: CALL_OW 45
1923: PPUSH
1924: CALL_OW 2
1928: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 2 ] , 27 , 49 , false ) ;
1929: LD_EXP 17
1933: PUSH
1934: LD_INT 2
1936: ARRAY
1937: PPUSH
1938: LD_INT 27
1940: PPUSH
1941: LD_INT 49
1943: PPUSH
1944: LD_INT 0
1946: PPUSH
1947: CALL_OW 48
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , [ us_laser , us_rocket_launcher , us_rocket_launcher , us_rocket_launcher ] [ Difficulty ] , 100 ) ;
1951: LD_INT 3
1953: PPUSH
1954: LD_INT 1
1956: PPUSH
1957: LD_INT 3
1959: PPUSH
1960: LD_INT 9
1962: PUSH
1963: LD_INT 7
1965: PUSH
1966: LD_INT 7
1968: PUSH
1969: LD_INT 7
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: PUSH
1978: LD_OWVAR 67
1982: ARRAY
1983: PPUSH
1984: LD_INT 100
1986: PPUSH
1987: CALL 40898 0 5
// mobile_patrol := Insert ( mobile_patrol , 3 , CreateVehicle ) ;
1991: LD_ADDR_EXP 17
1995: PUSH
1996: LD_EXP 17
2000: PPUSH
2001: LD_INT 3
2003: PPUSH
2004: CALL_OW 45
2008: PPUSH
2009: CALL_OW 2
2013: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 3 ] , 200 , 88 , false ) ;
2014: LD_EXP 17
2018: PUSH
2019: LD_INT 3
2021: ARRAY
2022: PPUSH
2023: LD_INT 200
2025: PPUSH
2026: LD_INT 88
2028: PPUSH
2029: LD_INT 0
2031: PPUSH
2032: CALL_OW 48
// for i := mobile_patrol downto 1 do
2036: LD_ADDR_VAR 0 2
2040: PUSH
2041: DOUBLE
2042: LD_EXP 17
2046: INC
2047: ST_TO_ADDR
2048: LD_INT 1
2050: PUSH
2051: FOR_DOWNTO
2052: IFFALSE 2063
// RaiseSailEvent ( 1 ) ;
2054: LD_INT 1
2056: PPUSH
2057: CALL_OW 427
2061: GO 2051
2063: POP
2064: POP
// end ;
2065: LD_VAR 0 1
2069: RET
// export function SpawnCargo ( ) ; var i , c , k , areas , road , tmp , veh ; begin
2070: LD_INT 0
2072: PPUSH
2073: PPUSH
2074: PPUSH
2075: PPUSH
2076: PPUSH
2077: PPUSH
2078: PPUSH
2079: PPUSH
// areas := [ [ road_east , 4 ] , [ road_south , 5 ] , [ road_west , 1 ] ] ;
2080: LD_ADDR_VAR 0 5
2084: PUSH
2085: LD_INT 20
2087: PUSH
2088: LD_INT 4
2090: PUSH
2091: EMPTY
2092: LIST
2093: LIST
2094: PUSH
2095: LD_INT 21
2097: PUSH
2098: LD_INT 5
2100: PUSH
2101: EMPTY
2102: LIST
2103: LIST
2104: PUSH
2105: LD_INT 22
2107: PUSH
2108: LD_INT 1
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: PUSH
2115: EMPTY
2116: LIST
2117: LIST
2118: LIST
2119: ST_TO_ADDR
// road := [ [ 176 , 81 , 135 , 62 , 114 , 67 , 93 , 71 , 76 , 67 ] , [ 107 , 92 , 92 , 72 , 77 , 68 ] , [ 45 , 49 , 67 , 59 , 77 , 68 ] ] ;
2120: LD_ADDR_VAR 0 6
2124: PUSH
2125: LD_INT 176
2127: PUSH
2128: LD_INT 81
2130: PUSH
2131: LD_INT 135
2133: PUSH
2134: LD_INT 62
2136: PUSH
2137: LD_INT 114
2139: PUSH
2140: LD_INT 67
2142: PUSH
2143: LD_INT 93
2145: PUSH
2146: LD_INT 71
2148: PUSH
2149: LD_INT 76
2151: PUSH
2152: LD_INT 67
2154: PUSH
2155: EMPTY
2156: LIST
2157: LIST
2158: LIST
2159: LIST
2160: LIST
2161: LIST
2162: LIST
2163: LIST
2164: LIST
2165: LIST
2166: PUSH
2167: LD_INT 107
2169: PUSH
2170: LD_INT 92
2172: PUSH
2173: LD_INT 92
2175: PUSH
2176: LD_INT 72
2178: PUSH
2179: LD_INT 77
2181: PUSH
2182: LD_INT 68
2184: PUSH
2185: EMPTY
2186: LIST
2187: LIST
2188: LIST
2189: LIST
2190: LIST
2191: LIST
2192: PUSH
2193: LD_INT 45
2195: PUSH
2196: LD_INT 49
2198: PUSH
2199: LD_INT 67
2201: PUSH
2202: LD_INT 59
2204: PUSH
2205: LD_INT 77
2207: PUSH
2208: LD_INT 68
2210: PUSH
2211: EMPTY
2212: LIST
2213: LIST
2214: LIST
2215: LIST
2216: LIST
2217: LIST
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: LIST
2223: ST_TO_ADDR
// k := rand ( 1 , areas ) ;
2224: LD_ADDR_VAR 0 4
2228: PUSH
2229: LD_INT 1
2231: PPUSH
2232: LD_VAR 0 5
2236: PPUSH
2237: CALL_OW 12
2241: ST_TO_ADDR
// c := rand ( 1 , 2 ) ;
2242: LD_ADDR_VAR 0 3
2246: PUSH
2247: LD_INT 1
2249: PPUSH
2250: LD_INT 2
2252: PPUSH
2253: CALL_OW 12
2257: ST_TO_ADDR
// uc_side := 1 ;
2258: LD_ADDR_OWVAR 20
2262: PUSH
2263: LD_INT 1
2265: ST_TO_ADDR
// uc_nation := 1 ;
2266: LD_ADDR_OWVAR 21
2270: PUSH
2271: LD_INT 1
2273: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
2274: LD_INT 2
2276: PPUSH
2277: LD_INT 3
2279: PPUSH
2280: LD_INT 3
2282: PPUSH
2283: LD_INT 12
2285: PPUSH
2286: LD_INT 100
2288: PPUSH
2289: CALL 40898 0 5
// veh := CreateVehicle ;
2293: LD_ADDR_VAR 0 8
2297: PUSH
2298: CALL_OW 45
2302: ST_TO_ADDR
// SetDir ( veh , areas [ k ] [ 2 ] ) ;
2303: LD_VAR 0 8
2307: PPUSH
2308: LD_VAR 0 5
2312: PUSH
2313: LD_VAR 0 4
2317: ARRAY
2318: PUSH
2319: LD_INT 2
2321: ARRAY
2322: PPUSH
2323: CALL_OW 233
// PlaceUnitArea ( veh , areas [ k ] [ 1 ] , false ) ;
2327: LD_VAR 0 8
2331: PPUSH
2332: LD_VAR 0 5
2336: PUSH
2337: LD_VAR 0 4
2341: ARRAY
2342: PUSH
2343: LD_INT 1
2345: ARRAY
2346: PPUSH
2347: LD_INT 0
2349: PPUSH
2350: CALL_OW 49
// SetCargo ( veh , [ mat_cans , mat_siberit ] [ c ] , 100 ) ;
2354: LD_VAR 0 8
2358: PPUSH
2359: LD_INT 1
2361: PUSH
2362: LD_INT 3
2364: PUSH
2365: EMPTY
2366: LIST
2367: LIST
2368: PUSH
2369: LD_VAR 0 3
2373: ARRAY
2374: PPUSH
2375: LD_INT 100
2377: PPUSH
2378: CALL_OW 290
// tmp := road [ k ] ;
2382: LD_ADDR_VAR 0 7
2386: PUSH
2387: LD_VAR 0 6
2391: PUSH
2392: LD_VAR 0 4
2396: ARRAY
2397: ST_TO_ADDR
// for i = 1 to tmp div 2 do
2398: LD_ADDR_VAR 0 2
2402: PUSH
2403: DOUBLE
2404: LD_INT 1
2406: DEC
2407: ST_TO_ADDR
2408: LD_VAR 0 7
2412: PUSH
2413: LD_INT 2
2415: DIV
2416: PUSH
2417: FOR_TO
2418: IFFALSE 2465
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2420: LD_VAR 0 8
2424: PPUSH
2425: LD_VAR 0 7
2429: PUSH
2430: LD_VAR 0 2
2434: PUSH
2435: LD_INT 2
2437: MUL
2438: PUSH
2439: LD_INT 1
2441: MINUS
2442: ARRAY
2443: PPUSH
2444: LD_VAR 0 7
2448: PUSH
2449: LD_VAR 0 2
2453: PUSH
2454: LD_INT 2
2456: MUL
2457: ARRAY
2458: PPUSH
2459: CALL_OW 171
2463: GO 2417
2465: POP
2466: POP
// AddComGive ( veh , alfa ) ;
2467: LD_VAR 0 8
2471: PPUSH
2472: LD_INT 5
2474: PPUSH
2475: CALL_OW 221
// AddComWait ( veh , 0 0$2 ) ;
2479: LD_VAR 0 8
2483: PPUSH
2484: LD_INT 70
2486: PPUSH
2487: CALL_OW 202
// for i = tmp div 2 downto 1 do
2491: LD_ADDR_VAR 0 2
2495: PUSH
2496: DOUBLE
2497: LD_VAR 0 7
2501: PUSH
2502: LD_INT 2
2504: DIV
2505: INC
2506: ST_TO_ADDR
2507: LD_INT 1
2509: PUSH
2510: FOR_DOWNTO
2511: IFFALSE 2558
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2513: LD_VAR 0 8
2517: PPUSH
2518: LD_VAR 0 7
2522: PUSH
2523: LD_VAR 0 2
2527: PUSH
2528: LD_INT 2
2530: MUL
2531: PUSH
2532: LD_INT 1
2534: MINUS
2535: ARRAY
2536: PPUSH
2537: LD_VAR 0 7
2541: PUSH
2542: LD_VAR 0 2
2546: PUSH
2547: LD_INT 2
2549: MUL
2550: ARRAY
2551: PPUSH
2552: CALL_OW 171
2556: GO 2510
2558: POP
2559: POP
// AddComMoveToArea ( veh , areas [ k ] [ 1 ] ) ;
2560: LD_VAR 0 8
2564: PPUSH
2565: LD_VAR 0 5
2569: PUSH
2570: LD_VAR 0 4
2574: ARRAY
2575: PUSH
2576: LD_INT 1
2578: ARRAY
2579: PPUSH
2580: CALL_OW 173
// repeat wait ( 0 0$1 ) ;
2584: LD_INT 35
2586: PPUSH
2587: CALL_OW 67
// until IsInArea ( veh , areas [ k ] [ 1 ] ) and GetCargo ( veh , c ) = 0 ;
2591: LD_VAR 0 8
2595: PPUSH
2596: LD_VAR 0 5
2600: PUSH
2601: LD_VAR 0 4
2605: ARRAY
2606: PUSH
2607: LD_INT 1
2609: ARRAY
2610: PPUSH
2611: CALL_OW 308
2615: PUSH
2616: LD_VAR 0 8
2620: PPUSH
2621: LD_VAR 0 3
2625: PPUSH
2626: CALL_OW 289
2630: PUSH
2631: LD_INT 0
2633: EQUAL
2634: AND
2635: IFFALSE 2584
// RemoveUnit ( veh ) ;
2637: LD_VAR 0 8
2641: PPUSH
2642: CALL_OW 64
// end ;
2646: LD_VAR 0 1
2650: RET
// every 3 3$00 do
2651: GO 2653
2653: DISABLE
// begin enable ;
2654: ENABLE
// SpawnCargo ;
2655: CALL 2070 0 0
// end ;
2659: END
// export function PrepareDefenders ; var i , tmp ; begin
2660: LD_INT 0
2662: PPUSH
2663: PPUSH
2664: PPUSH
// if defenders then
2665: LD_EXP 20
2669: IFFALSE 2673
// exit ;
2671: GO 2945
// for i = 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
2673: LD_ADDR_VAR 0 2
2677: PUSH
2678: DOUBLE
2679: LD_INT 1
2681: DEC
2682: ST_TO_ADDR
2683: LD_INT 4
2685: PUSH
2686: LD_INT 5
2688: PUSH
2689: LD_INT 6
2691: PUSH
2692: LD_INT 7
2694: PUSH
2695: EMPTY
2696: LIST
2697: LIST
2698: LIST
2699: LIST
2700: PUSH
2701: LD_OWVAR 67
2705: ARRAY
2706: PUSH
2707: FOR_TO
2708: IFFALSE 2847
// begin tmp := Produce ( amfac2 , [ us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_remote , [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ) ;
2710: LD_ADDR_VAR 0 3
2714: PUSH
2715: LD_INT 6
2717: PPUSH
2718: LD_INT 2
2720: PUSH
2721: LD_INT 3
2723: PUSH
2724: EMPTY
2725: LIST
2726: LIST
2727: PUSH
2728: LD_INT 1
2730: PPUSH
2731: LD_INT 2
2733: PPUSH
2734: CALL_OW 12
2738: ARRAY
2739: PPUSH
2740: LD_INT 1
2742: PUSH
2743: LD_INT 3
2745: PUSH
2746: EMPTY
2747: LIST
2748: LIST
2749: PUSH
2750: LD_INT 1
2752: PPUSH
2753: LD_INT 2
2755: PPUSH
2756: CALL_OW 12
2760: ARRAY
2761: PPUSH
2762: LD_INT 2
2764: PPUSH
2765: LD_INT 4
2767: PUSH
2768: LD_INT 5
2770: PUSH
2771: LD_INT 9
2773: PUSH
2774: EMPTY
2775: LIST
2776: LIST
2777: LIST
2778: PUSH
2779: LD_INT 1
2781: PPUSH
2782: LD_INT 3
2784: PPUSH
2785: CALL_OW 12
2789: ARRAY
2790: PPUSH
2791: CALL 38518 0 5
2795: ST_TO_ADDR
// if tmp then
2796: LD_VAR 0 3
2800: IFFALSE 2845
// AddComConstruct ( amfac2 , tmp [ 1 ] , tmp [ 2 ] , tmp [ 3 ] , tmp [ 4 ] ) ;
2802: LD_INT 6
2804: PPUSH
2805: LD_VAR 0 3
2809: PUSH
2810: LD_INT 1
2812: ARRAY
2813: PPUSH
2814: LD_VAR 0 3
2818: PUSH
2819: LD_INT 2
2821: ARRAY
2822: PPUSH
2823: LD_VAR 0 3
2827: PUSH
2828: LD_INT 3
2830: ARRAY
2831: PPUSH
2832: LD_VAR 0 3
2836: PUSH
2837: LD_INT 4
2839: ARRAY
2840: PPUSH
2841: CALL_OW 185
// end ;
2845: GO 2707
2847: POP
2848: POP
// repeat wait ( 0 0$1 ) ;
2849: LD_INT 35
2851: PPUSH
2852: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
2856: LD_INT 22
2858: PUSH
2859: LD_INT 1
2861: PUSH
2862: EMPTY
2863: LIST
2864: LIST
2865: PUSH
2866: LD_INT 33
2868: PUSH
2869: LD_INT 2
2871: PUSH
2872: EMPTY
2873: LIST
2874: LIST
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: PPUSH
2880: CALL_OW 69
2884: PUSH
2885: LD_INT 4
2887: PUSH
2888: LD_INT 5
2890: PUSH
2891: LD_INT 6
2893: PUSH
2894: LD_INT 7
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: LIST
2901: LIST
2902: PUSH
2903: LD_OWVAR 67
2907: ARRAY
2908: GREATEREQUAL
2909: IFFALSE 2849
// defenders := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ;
2911: LD_ADDR_EXP 20
2915: PUSH
2916: LD_INT 22
2918: PUSH
2919: LD_INT 1
2921: PUSH
2922: EMPTY
2923: LIST
2924: LIST
2925: PUSH
2926: LD_INT 33
2928: PUSH
2929: LD_INT 2
2931: PUSH
2932: EMPTY
2933: LIST
2934: LIST
2935: PUSH
2936: EMPTY
2937: LIST
2938: LIST
2939: PPUSH
2940: CALL_OW 69
2944: ST_TO_ADDR
// end ;
2945: LD_VAR 0 1
2949: RET
// export function Defend ; var i , un , veh , tmp ; begin
2950: LD_INT 0
2952: PPUSH
2953: PPUSH
2954: PPUSH
2955: PPUSH
2956: PPUSH
// defcon_wave := defcon_wave + 1 ;
2957: LD_ADDR_EXP 22
2961: PUSH
2962: LD_EXP 22
2966: PUSH
2967: LD_INT 1
2969: PLUS
2970: ST_TO_ADDR
// if not defenders then
2971: LD_EXP 20
2975: NOT
2976: IFFALSE 2982
// PrepareDefenders ;
2978: CALL 2660 0 0
// if defcon_wave > 1 then
2982: LD_EXP 22
2986: PUSH
2987: LD_INT 1
2989: GREATER
2990: IFFALSE 3248
// begin for i = 1 to defcon_wave + 2 do
2992: LD_ADDR_VAR 0 2
2996: PUSH
2997: DOUBLE
2998: LD_INT 1
3000: DEC
3001: ST_TO_ADDR
3002: LD_EXP 22
3006: PUSH
3007: LD_INT 2
3009: PLUS
3010: PUSH
3011: FOR_TO
3012: IFFALSE 3154
// begin uc_side := 1 ;
3014: LD_ADDR_OWVAR 20
3018: PUSH
3019: LD_INT 1
3021: ST_TO_ADDR
// uc_nation := 1 ;
3022: LD_ADDR_OWVAR 21
3026: PUSH
3027: LD_INT 1
3029: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_siberite , control_manual , [ us_gatling_gun , us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
3030: LD_INT 4
3032: PPUSH
3033: LD_INT 3
3035: PPUSH
3036: LD_INT 1
3038: PPUSH
3039: LD_INT 4
3041: PUSH
3042: LD_INT 6
3044: PUSH
3045: LD_INT 7
3047: PUSH
3048: EMPTY
3049: LIST
3050: LIST
3051: LIST
3052: PUSH
3053: LD_INT 1
3055: PPUSH
3056: LD_INT 3
3058: PPUSH
3059: CALL_OW 12
3063: ARRAY
3064: PPUSH
3065: LD_INT 100
3067: PPUSH
3068: CALL 40898 0 5
// veh := CreateVehicle ;
3072: LD_ADDR_VAR 0 4
3076: PUSH
3077: CALL_OW 45
3081: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
3082: LD_VAR 0 4
3086: PPUSH
3087: LD_INT 1
3089: PPUSH
3090: CALL_OW 233
// defenders := defenders ^ veh ;
3094: LD_ADDR_EXP 20
3098: PUSH
3099: LD_EXP 20
3103: PUSH
3104: LD_VAR 0 4
3108: ADD
3109: ST_TO_ADDR
// PrepareHuman ( false , 3 , 9 ) ;
3110: LD_INT 0
3112: PPUSH
3113: LD_INT 3
3115: PPUSH
3116: LD_INT 9
3118: PPUSH
3119: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3123: CALL_OW 44
3127: PPUSH
3128: LD_VAR 0 4
3132: PPUSH
3133: CALL_OW 52
// PlaceUnitArea ( veh , west_spawn , false ) ;
3137: LD_VAR 0 4
3141: PPUSH
3142: LD_INT 25
3144: PPUSH
3145: LD_INT 0
3147: PPUSH
3148: CALL_OW 49
// end ;
3152: GO 3011
3154: POP
3155: POP
// for i = 1 to defcon_wave do
3156: LD_ADDR_VAR 0 2
3160: PUSH
3161: DOUBLE
3162: LD_INT 1
3164: DEC
3165: ST_TO_ADDR
3166: LD_EXP 22
3170: PUSH
3171: FOR_TO
3172: IFFALSE 3246
// begin uc_side := 1 ;
3174: LD_ADDR_OWVAR 20
3178: PUSH
3179: LD_INT 1
3181: ST_TO_ADDR
// uc_nation := 1 ;
3182: LD_ADDR_OWVAR 21
3186: PUSH
3187: LD_INT 1
3189: ST_TO_ADDR
// PrepareHuman ( false , 5 , 9 ) ;
3190: LD_INT 0
3192: PPUSH
3193: LD_INT 5
3195: PPUSH
3196: LD_INT 9
3198: PPUSH
3199: CALL_OW 380
// un := CreateHuman ;
3203: LD_ADDR_VAR 0 3
3207: PUSH
3208: CALL_OW 44
3212: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
3213: LD_VAR 0 3
3217: PPUSH
3218: LD_INT 25
3220: PPUSH
3221: LD_INT 0
3223: PPUSH
3224: CALL_OW 49
// defenders := defenders ^ un ;
3228: LD_ADDR_EXP 20
3232: PUSH
3233: LD_EXP 20
3237: PUSH
3238: LD_VAR 0 3
3242: ADD
3243: ST_TO_ADDR
// end ;
3244: GO 3171
3246: POP
3247: POP
// end ; repeat wait ( 0 0$1 ) ;
3248: LD_INT 35
3250: PPUSH
3251: CALL_OW 67
// for i in defenders do
3255: LD_ADDR_VAR 0 2
3259: PUSH
3260: LD_EXP 20
3264: PUSH
3265: FOR_IN
3266: IFFALSE 3348
// begin if defcon and GetDistUnitXY ( i , defcon [ 1 ] , defcon [ 2 ] ) > 10 and not HasTask ( i ) then
3268: LD_EXP 21
3272: PUSH
3273: LD_VAR 0 2
3277: PPUSH
3278: LD_EXP 21
3282: PUSH
3283: LD_INT 1
3285: ARRAY
3286: PPUSH
3287: LD_EXP 21
3291: PUSH
3292: LD_INT 2
3294: ARRAY
3295: PPUSH
3296: CALL_OW 297
3300: PUSH
3301: LD_INT 10
3303: GREATER
3304: AND
3305: PUSH
3306: LD_VAR 0 2
3310: PPUSH
3311: CALL_OW 314
3315: NOT
3316: AND
3317: IFFALSE 3346
// ComAgressiveMove ( i , defcon [ 1 ] , defcon [ 2 ] ) ;
3319: LD_VAR 0 2
3323: PPUSH
3324: LD_EXP 21
3328: PUSH
3329: LD_INT 1
3331: ARRAY
3332: PPUSH
3333: LD_EXP 21
3337: PUSH
3338: LD_INT 2
3340: ARRAY
3341: PPUSH
3342: CALL_OW 114
// end ;
3346: GO 3265
3348: POP
3349: POP
// until not defenders ;
3350: LD_EXP 20
3354: NOT
3355: IFFALSE 3248
// end ;
3357: LD_VAR 0 1
3361: RET
// every 0 0$1 do var radar , i ;
3362: GO 3364
3364: DISABLE
3365: LD_INT 0
3367: PPUSH
3368: PPUSH
// begin uc_side := 1 ;
3369: LD_ADDR_OWVAR 20
3373: PUSH
3374: LD_INT 1
3376: ST_TO_ADDR
// uc_nation := 1 ;
3377: LD_ADDR_OWVAR 21
3381: PUSH
3382: LD_INT 1
3384: ST_TO_ADDR
// PrepareVehicle ( us_light_wheeled , engine_solar , control_computer , us_radar , 100 ) ;
3385: LD_INT 1
3387: PPUSH
3388: LD_INT 2
3390: PPUSH
3391: LD_INT 3
3393: PPUSH
3394: LD_INT 11
3396: PPUSH
3397: LD_INT 100
3399: PPUSH
3400: CALL 40898 0 5
// radar := CreateVehicle ;
3404: LD_ADDR_VAR 0 1
3408: PUSH
3409: CALL_OW 45
3413: ST_TO_ADDR
// SetDir ( radar , 4 ) ;
3414: LD_VAR 0 1
3418: PPUSH
3419: LD_INT 4
3421: PPUSH
3422: CALL_OW 233
// PlaceUnitXY ( radar , 51 , 45 , false ) ;
3426: LD_VAR 0 1
3430: PPUSH
3431: LD_INT 51
3433: PPUSH
3434: LD_INT 45
3436: PPUSH
3437: LD_INT 0
3439: PPUSH
3440: CALL_OW 48
// repeat AddComWait ( radar , 0 0$20 ) ;
3444: LD_VAR 0 1
3448: PPUSH
3449: LD_INT 700
3451: PPUSH
3452: CALL_OW 202
// AddComMoveXY ( radar , 65 , 75 ) ;
3456: LD_VAR 0 1
3460: PPUSH
3461: LD_INT 65
3463: PPUSH
3464: LD_INT 75
3466: PPUSH
3467: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3471: LD_VAR 0 1
3475: PPUSH
3476: LD_INT 350
3478: PPUSH
3479: CALL_OW 202
// AddComMoveXY ( radar , 83 , 87 ) ;
3483: LD_VAR 0 1
3487: PPUSH
3488: LD_INT 83
3490: PPUSH
3491: LD_INT 87
3493: PPUSH
3494: CALL_OW 171
// AddComWait ( radar , 0 0$15 ) ;
3498: LD_VAR 0 1
3502: PPUSH
3503: LD_INT 525
3505: PPUSH
3506: CALL_OW 202
// AddComMoveXY ( radar , 94 , 81 ) ;
3510: LD_VAR 0 1
3514: PPUSH
3515: LD_INT 94
3517: PPUSH
3518: LD_INT 81
3520: PPUSH
3521: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3525: LD_VAR 0 1
3529: PPUSH
3530: LD_INT 350
3532: PPUSH
3533: CALL_OW 202
// AddComMoveXY ( radar , 55 , 48 ) ;
3537: LD_VAR 0 1
3541: PPUSH
3542: LD_INT 55
3544: PPUSH
3545: LD_INT 48
3547: PPUSH
3548: CALL_OW 171
// wait ( 1 1$00 ) ;
3552: LD_INT 2100
3554: PPUSH
3555: CALL_OW 67
// until not IsOk ( radar ) ;
3559: LD_VAR 0 1
3563: PPUSH
3564: CALL_OW 302
3568: NOT
3569: IFFALSE 3444
// end ;
3571: PPOPN 2
3573: END
// every 7 7$30 trigger Difficulty > 1 and extra_patrol do var un ;
3574: LD_OWVAR 67
3578: PUSH
3579: LD_INT 1
3581: GREATER
3582: PUSH
3583: LD_EXP 11
3587: AND
3588: IFFALSE 3810
3590: GO 3592
3592: DISABLE
3593: LD_INT 0
3595: PPUSH
// begin enable ;
3596: ENABLE
// uc_side := 1 ;
3597: LD_ADDR_OWVAR 20
3601: PUSH
3602: LD_INT 1
3604: ST_TO_ADDR
// uc_nation := 1 ;
3605: LD_ADDR_OWVAR 21
3609: PUSH
3610: LD_INT 1
3612: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_gatling_gun , 100 ) ;
3613: LD_INT 5
3615: PPUSH
3616: LD_INT 3
3618: PPUSH
3619: LD_INT 3
3621: PPUSH
3622: LD_INT 4
3624: PPUSH
3625: LD_INT 100
3627: PPUSH
3628: CALL 40898 0 5
// un := CreateVehicle ;
3632: LD_ADDR_VAR 0 1
3636: PUSH
3637: CALL_OW 45
3641: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3642: LD_VAR 0 1
3646: PPUSH
3647: LD_INT 3
3649: PPUSH
3650: CALL_OW 233
// PlaceUnitXY ( un , 155 , 2 , false ) ;
3654: LD_VAR 0 1
3658: PPUSH
3659: LD_INT 155
3661: PPUSH
3662: LD_INT 2
3664: PPUSH
3665: LD_INT 0
3667: PPUSH
3668: CALL_OW 48
// ComAgressiveMove ( un , 169 , 77 ) ;
3672: LD_VAR 0 1
3676: PPUSH
3677: LD_INT 169
3679: PPUSH
3680: LD_INT 77
3682: PPUSH
3683: CALL_OW 114
// AddComWait ( un , 0 0$2 ) ;
3687: LD_VAR 0 1
3691: PPUSH
3692: LD_INT 70
3694: PPUSH
3695: CALL_OW 202
// AddComAgressiveMove ( un , 134 , 62 ) ;
3699: LD_VAR 0 1
3703: PPUSH
3704: LD_INT 134
3706: PPUSH
3707: LD_INT 62
3709: PPUSH
3710: CALL_OW 174
// AddComAgressiveMove ( un , 103 , 42 ) ;
3714: LD_VAR 0 1
3718: PPUSH
3719: LD_INT 103
3721: PPUSH
3722: LD_INT 42
3724: PPUSH
3725: CALL_OW 174
// AddComWait ( un , 0 0$2 ) ;
3729: LD_VAR 0 1
3733: PPUSH
3734: LD_INT 70
3736: PPUSH
3737: CALL_OW 202
// AddComAgressiveMove ( un , 84 , 2 ) ;
3741: LD_VAR 0 1
3745: PPUSH
3746: LD_INT 84
3748: PPUSH
3749: LD_INT 2
3751: PPUSH
3752: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
3756: LD_INT 35
3758: PPUSH
3759: CALL_OW 67
// if IsDead ( un ) then
3763: LD_VAR 0 1
3767: PPUSH
3768: CALL_OW 301
3772: IFFALSE 3784
// begin extra_patrol := false ;
3774: LD_ADDR_EXP 11
3778: PUSH
3779: LD_INT 0
3781: ST_TO_ADDR
// exit ;
3782: GO 3810
// end ; until IsAt ( un , 84 , 2 ) ;
3784: LD_VAR 0 1
3788: PPUSH
3789: LD_INT 84
3791: PPUSH
3792: LD_INT 2
3794: PPUSH
3795: CALL_OW 307
3799: IFFALSE 3756
// RemoveUnit ( un ) ;
3801: LD_VAR 0 1
3805: PPUSH
3806: CALL_OW 64
// end ; end_of_file
3810: PPOPN 1
3812: END
// export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Mike ; export function PrepareFriends ; var i , tmp , buildings , areas , bunkers , cl , gammaCommander ; begin
3813: LD_INT 0
3815: PPUSH
3816: PPUSH
3817: PPUSH
3818: PPUSH
3819: PPUSH
3820: PPUSH
3821: PPUSH
3822: PPUSH
// uc_side := 4 ;
3823: LD_ADDR_OWVAR 20
3827: PUSH
3828: LD_INT 4
3830: ST_TO_ADDR
// uc_nation := 1 ;
3831: LD_ADDR_OWVAR 21
3835: PUSH
3836: LD_INT 1
3838: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 10c_ ) ;
3839: LD_ADDR_EXP 37
3843: PUSH
3844: LD_STRING DeltaDoctor
3846: PPUSH
3847: LD_EXP 1
3851: NOT
3852: PPUSH
3853: LD_STRING 10c_
3855: PPUSH
3856: CALL 36058 0 3
3860: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 10c_ ) ;
3861: LD_ADDR_EXP 36
3865: PUSH
3866: LD_STRING Joan
3868: PPUSH
3869: LD_EXP 1
3873: NOT
3874: PPUSH
3875: LD_STRING 10c_
3877: PPUSH
3878: CALL 36058 0 3
3882: ST_TO_ADDR
// if Joan then
3883: LD_EXP 36
3887: IFFALSE 3918
// friends := Insert ( friends , friends + 1 , Joan ) ;
3889: LD_ADDR_EXP 4
3893: PUSH
3894: LD_EXP 4
3898: PPUSH
3899: LD_EXP 4
3903: PUSH
3904: LD_INT 1
3906: PLUS
3907: PPUSH
3908: LD_EXP 36
3912: PPUSH
3913: CALL_OW 2
3917: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 10c_ ) ;
3918: LD_ADDR_EXP 35
3922: PUSH
3923: LD_STRING Simms
3925: PPUSH
3926: LD_EXP 1
3930: NOT
3931: PPUSH
3932: LD_STRING 10c_
3934: PPUSH
3935: CALL 36058 0 3
3939: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 11_ ) ;
3940: LD_ADDR_EXP 34
3944: PUSH
3945: LD_STRING Kikuchi
3947: PPUSH
3948: LD_EXP 1
3952: NOT
3953: PPUSH
3954: LD_STRING 11_
3956: PPUSH
3957: CALL 36058 0 3
3961: ST_TO_ADDR
// if Kikuchi then
3962: LD_EXP 34
3966: IFFALSE 3997
// friends := Insert ( friends , friends + 1 , Kikuchi ) ;
3968: LD_ADDR_EXP 4
3972: PUSH
3973: LD_EXP 4
3977: PPUSH
3978: LD_EXP 4
3982: PUSH
3983: LD_INT 1
3985: PLUS
3986: PPUSH
3987: LD_EXP 34
3991: PPUSH
3992: CALL_OW 2
3996: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 11_ ) ;
3997: LD_ADDR_EXP 33
4001: PUSH
4002: LD_STRING Frank
4004: PPUSH
4005: LD_EXP 1
4009: NOT
4010: PPUSH
4011: LD_STRING 11_
4013: PPUSH
4014: CALL 36058 0 3
4018: ST_TO_ADDR
// if Frank then
4019: LD_EXP 33
4023: IFFALSE 4054
// friends := Insert ( friends , friends + 1 , Frank ) ;
4025: LD_ADDR_EXP 4
4029: PUSH
4030: LD_EXP 4
4034: PPUSH
4035: LD_EXP 4
4039: PUSH
4040: LD_INT 1
4042: PLUS
4043: PPUSH
4044: LD_EXP 33
4048: PPUSH
4049: CALL_OW 2
4053: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , 11_ ) ;
4054: LD_ADDR_EXP 32
4058: PUSH
4059: LD_STRING Gary
4061: PPUSH
4062: LD_EXP 1
4066: NOT
4067: PPUSH
4068: LD_STRING 11_
4070: PPUSH
4071: CALL 36058 0 3
4075: ST_TO_ADDR
// if Gary then
4076: LD_EXP 32
4080: IFFALSE 4111
// friends := Insert ( friends , friends + 1 , Gary ) ;
4082: LD_ADDR_EXP 4
4086: PUSH
4087: LD_EXP 4
4091: PPUSH
4092: LD_EXP 4
4096: PUSH
4097: LD_INT 1
4099: PLUS
4100: PPUSH
4101: LD_EXP 32
4105: PPUSH
4106: CALL_OW 2
4110: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , ( not debug ) , 11_ ) ;
4111: LD_ADDR_EXP 31
4115: PUSH
4116: LD_STRING Cornell
4118: PPUSH
4119: LD_EXP 1
4123: NOT
4124: PPUSH
4125: LD_STRING 11_
4127: PPUSH
4128: CALL 36058 0 3
4132: ST_TO_ADDR
// if Cornel then
4133: LD_EXP 31
4137: IFFALSE 4168
// friends := Insert ( friends , friends + 1 , Cornel ) ;
4139: LD_ADDR_EXP 4
4143: PUSH
4144: LD_EXP 4
4148: PPUSH
4149: LD_EXP 4
4153: PUSH
4154: LD_INT 1
4156: PLUS
4157: PPUSH
4158: LD_EXP 31
4162: PPUSH
4163: CALL_OW 2
4167: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , 11_ ) ;
4168: LD_ADDR_EXP 30
4172: PUSH
4173: LD_STRING Houten
4175: PPUSH
4176: LD_EXP 1
4180: NOT
4181: PPUSH
4182: LD_STRING 11_
4184: PPUSH
4185: CALL 36058 0 3
4189: ST_TO_ADDR
// if Houten then
4190: LD_EXP 30
4194: IFFALSE 4225
// friends := Insert ( friends , friends + 1 , Houten ) ;
4196: LD_ADDR_EXP 4
4200: PUSH
4201: LD_EXP 4
4205: PPUSH
4206: LD_EXP 4
4210: PUSH
4211: LD_INT 1
4213: PLUS
4214: PPUSH
4215: LD_EXP 30
4219: PPUSH
4220: CALL_OW 2
4224: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 11_ ) ;
4225: LD_ADDR_EXP 29
4229: PUSH
4230: LD_STRING Gladstone
4232: PPUSH
4233: LD_EXP 1
4237: NOT
4238: PPUSH
4239: LD_STRING 11_
4241: PPUSH
4242: CALL 36058 0 3
4246: ST_TO_ADDR
// if Gladstone then
4247: LD_EXP 29
4251: IFFALSE 4282
// friends := Insert ( friends , friends + 1 , Gladstone ) ;
4253: LD_ADDR_EXP 4
4257: PUSH
4258: LD_EXP 4
4262: PPUSH
4263: LD_EXP 4
4267: PUSH
4268: LD_INT 1
4270: PLUS
4271: PPUSH
4272: LD_EXP 29
4276: PPUSH
4277: CALL_OW 2
4281: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 11_ ) ;
4282: LD_ADDR_EXP 23
4286: PUSH
4287: LD_STRING Lisa
4289: PPUSH
4290: LD_EXP 1
4294: NOT
4295: PPUSH
4296: LD_STRING 11_
4298: PPUSH
4299: CALL 36058 0 3
4303: ST_TO_ADDR
// if Lisa then
4304: LD_EXP 23
4308: IFFALSE 4333
// friends := Insert ( friends , 1 , Lisa ) ;
4310: LD_ADDR_EXP 4
4314: PUSH
4315: LD_EXP 4
4319: PPUSH
4320: LD_INT 1
4322: PPUSH
4323: LD_EXP 23
4327: PPUSH
4328: CALL_OW 2
4332: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 11_ ) ;
4333: LD_ADDR_EXP 24
4337: PUSH
4338: LD_STRING Donaldson
4340: PPUSH
4341: LD_EXP 1
4345: NOT
4346: PPUSH
4347: LD_STRING 11_
4349: PPUSH
4350: CALL 36058 0 3
4354: ST_TO_ADDR
// if Donaldson then
4355: LD_EXP 24
4359: IFFALSE 4390
// friends := Insert ( friends , friends + 1 , Donaldson ) ;
4361: LD_ADDR_EXP 4
4365: PUSH
4366: LD_EXP 4
4370: PPUSH
4371: LD_EXP 4
4375: PUSH
4376: LD_INT 1
4378: PLUS
4379: PPUSH
4380: LD_EXP 24
4384: PPUSH
4385: CALL_OW 2
4389: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 11_ ) ;
4390: LD_ADDR_EXP 25
4394: PUSH
4395: LD_STRING Bobby
4397: PPUSH
4398: LD_EXP 1
4402: NOT
4403: PPUSH
4404: LD_STRING 11_
4406: PPUSH
4407: CALL 36058 0 3
4411: ST_TO_ADDR
// if Bobby then
4412: LD_EXP 25
4416: IFFALSE 4447
// friends := Insert ( friends , friends + 1 , Bobby ) ;
4418: LD_ADDR_EXP 4
4422: PUSH
4423: LD_EXP 4
4427: PPUSH
4428: LD_EXP 4
4432: PUSH
4433: LD_INT 1
4435: PLUS
4436: PPUSH
4437: LD_EXP 25
4441: PPUSH
4442: CALL_OW 2
4446: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 11_ ) ;
4447: LD_ADDR_EXP 26
4451: PUSH
4452: LD_STRING Cyrus
4454: PPUSH
4455: LD_EXP 1
4459: NOT
4460: PPUSH
4461: LD_STRING 11_
4463: PPUSH
4464: CALL 36058 0 3
4468: ST_TO_ADDR
// if Cyrus then
4469: LD_EXP 26
4473: IFFALSE 4504
// friends := Insert ( friends , friends + 1 , Cyrus ) ;
4475: LD_ADDR_EXP 4
4479: PUSH
4480: LD_EXP 4
4484: PPUSH
4485: LD_EXP 4
4489: PUSH
4490: LD_INT 1
4492: PLUS
4493: PPUSH
4494: LD_EXP 26
4498: PPUSH
4499: CALL_OW 2
4503: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 11_ ) ;
4504: LD_ADDR_EXP 27
4508: PUSH
4509: LD_STRING Denis
4511: PPUSH
4512: LD_EXP 1
4516: NOT
4517: PPUSH
4518: LD_STRING 11_
4520: PPUSH
4521: CALL 36058 0 3
4525: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , 11_ ) ;
4526: LD_ADDR_EXP 28
4530: PUSH
4531: LD_STRING Brown
4533: PPUSH
4534: LD_EXP 1
4538: NOT
4539: PPUSH
4540: LD_STRING 11_
4542: PPUSH
4543: CALL 36058 0 3
4547: ST_TO_ADDR
// if Brown then
4548: LD_EXP 28
4552: IFFALSE 4583
// friends := Insert ( friends , friends + 1 , Brown ) ;
4554: LD_ADDR_EXP 4
4558: PUSH
4559: LD_EXP 4
4563: PPUSH
4564: LD_EXP 4
4568: PUSH
4569: LD_INT 1
4571: PLUS
4572: PPUSH
4573: LD_EXP 28
4577: PPUSH
4578: CALL_OW 2
4582: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , 10c_ ) ;
4583: LD_ADDR_EXP 38
4587: PUSH
4588: LD_STRING Mike
4590: PPUSH
4591: LD_EXP 1
4595: NOT
4596: PPUSH
4597: LD_STRING 10c_
4599: PPUSH
4600: CALL 36058 0 3
4604: ST_TO_ADDR
// if Mike then
4605: LD_EXP 38
4609: IFFALSE 4650
// begin SetClass ( Mike , class_apeman_engineer ) ;
4611: LD_EXP 38
4615: PPUSH
4616: LD_INT 16
4618: PPUSH
4619: CALL_OW 336
// PlaceUnitXY ( Mike , 180 , 87 , false ) ;
4623: LD_EXP 38
4627: PPUSH
4628: LD_INT 180
4630: PPUSH
4631: LD_INT 87
4633: PPUSH
4634: LD_INT 0
4636: PPUSH
4637: CALL_OW 48
// ComHold ( Mike ) ;
4641: LD_EXP 38
4645: PPUSH
4646: CALL_OW 140
// end ; friends := friends ^ CreateCharacterSet ( 11c_others ) ^ CreateCharacterSet ( 11_others ) ;
4650: LD_ADDR_EXP 4
4654: PUSH
4655: LD_EXP 4
4659: PUSH
4660: LD_STRING 11c_others
4662: PPUSH
4663: CALL_OW 31
4667: ADD
4668: PUSH
4669: LD_STRING 11_others
4671: PPUSH
4672: CALL_OW 31
4676: ADD
4677: ST_TO_ADDR
// if friends < 18 then
4678: LD_EXP 4
4682: PUSH
4683: LD_INT 18
4685: LESS
4686: IFFALSE 4758
// for i = 1 to 18 do
4688: LD_ADDR_VAR 0 2
4692: PUSH
4693: DOUBLE
4694: LD_INT 1
4696: DEC
4697: ST_TO_ADDR
4698: LD_INT 18
4700: PUSH
4701: FOR_TO
4702: IFFALSE 4756
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 7 ) ;
4704: LD_INT 0
4706: PPUSH
4707: LD_INT 1
4709: PPUSH
4710: LD_INT 4
4712: PPUSH
4713: CALL_OW 12
4717: PPUSH
4718: LD_INT 7
4720: PPUSH
4721: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
4725: LD_ADDR_EXP 4
4729: PUSH
4730: LD_EXP 4
4734: PPUSH
4735: LD_EXP 4
4739: PUSH
4740: LD_INT 1
4742: PLUS
4743: PPUSH
4744: CALL_OW 44
4748: PPUSH
4749: CALL_OW 2
4753: ST_TO_ADDR
// end ;
4754: GO 4701
4756: POP
4757: POP
// for i in friends do
4758: LD_ADDR_VAR 0 2
4762: PUSH
4763: LD_EXP 4
4767: PUSH
4768: FOR_IN
4769: IFFALSE 4842
// if GetNation ( i ) = nation_american and GetSkill ( i , 1 ) >= GetSkill ( i , 4 ) then
4771: LD_VAR 0 2
4775: PPUSH
4776: CALL_OW 248
4780: PUSH
4781: LD_INT 1
4783: EQUAL
4784: PUSH
4785: LD_VAR 0 2
4789: PPUSH
4790: LD_INT 1
4792: PPUSH
4793: CALL_OW 259
4797: PUSH
4798: LD_VAR 0 2
4802: PPUSH
4803: LD_INT 4
4805: PPUSH
4806: CALL_OW 259
4810: GREATEREQUAL
4811: AND
4812: IFFALSE 4828
// SetClass ( i , class_soldier ) else
4814: LD_VAR 0 2
4818: PPUSH
4819: LD_INT 1
4821: PPUSH
4822: CALL_OW 336
4826: GO 4840
// SetClass ( i , class_scientistic ) ;
4828: LD_VAR 0 2
4832: PPUSH
4833: LD_INT 4
4835: PPUSH
4836: CALL_OW 336
4840: GO 4768
4842: POP
4843: POP
// if Frank then
4844: LD_EXP 33
4848: IFFALSE 4862
// SetClass ( Frank , class_sniper ) ;
4850: LD_EXP 33
4854: PPUSH
4855: LD_INT 5
4857: PPUSH
4858: CALL_OW 336
// SetClass ( [ Joan , Denis , DeltaDoctor , Simms ] , class_scientistic ) ;
4862: LD_EXP 36
4866: PUSH
4867: LD_EXP 27
4871: PUSH
4872: LD_EXP 37
4876: PUSH
4877: LD_EXP 35
4881: PUSH
4882: EMPTY
4883: LIST
4884: LIST
4885: LIST
4886: LIST
4887: PPUSH
4888: LD_INT 4
4890: PPUSH
4891: CALL_OW 336
// selected = CharacterSelection (  , 7 , 7 , [ sel_dont_change_class , JMM , Roth , Simms , Denis , DeltaDoctor , sel_not_hired , sel_changeable , sel_change_class ] ^ friends , [ class_soldier , [ class_scientistic , 2 ] , [ class_sniper , 0 , 3 ] ] ) ;
4895: LD_ADDR_EXP 3
4899: PUSH
4900: LD_STRING 
4902: PPUSH
4903: LD_INT 7
4905: PPUSH
4906: LD_INT 7
4908: PPUSH
4909: LD_INT -6
4911: PUSH
4912: LD_EXP 14
4916: PUSH
4917: LD_EXP 15
4921: PUSH
4922: LD_EXP 35
4926: PUSH
4927: LD_EXP 27
4931: PUSH
4932: LD_EXP 37
4936: PUSH
4937: LD_INT -2
4939: PUSH
4940: LD_INT -3
4942: PUSH
4943: LD_INT -5
4945: PUSH
4946: EMPTY
4947: LIST
4948: LIST
4949: LIST
4950: LIST
4951: LIST
4952: LIST
4953: LIST
4954: LIST
4955: LIST
4956: PUSH
4957: LD_EXP 4
4961: ADD
4962: PPUSH
4963: LD_INT 1
4965: PUSH
4966: LD_INT 4
4968: PUSH
4969: LD_INT 2
4971: PUSH
4972: EMPTY
4973: LIST
4974: LIST
4975: PUSH
4976: LD_INT 5
4978: PUSH
4979: LD_INT 0
4981: PUSH
4982: LD_INT 3
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: LIST
4989: PUSH
4990: EMPTY
4991: LIST
4992: LIST
4993: LIST
4994: PPUSH
4995: CALL_OW 42
4999: ST_TO_ADDR
// if Simms then
5000: LD_EXP 35
5004: IFFALSE 5022
// selected := selected ^ Simms ;
5006: LD_ADDR_EXP 3
5010: PUSH
5011: LD_EXP 3
5015: PUSH
5016: LD_EXP 35
5020: ADD
5021: ST_TO_ADDR
// if Denis then
5022: LD_EXP 27
5026: IFFALSE 5044
// selected := selected ^ Denis ;
5028: LD_ADDR_EXP 3
5032: PUSH
5033: LD_EXP 3
5037: PUSH
5038: LD_EXP 27
5042: ADD
5043: ST_TO_ADDR
// if DeltaDoctor then
5044: LD_EXP 37
5048: IFFALSE 5066
// selected := selected ^ DeltaDoctor ;
5050: LD_ADDR_EXP 3
5054: PUSH
5055: LD_EXP 3
5059: PUSH
5060: LD_EXP 37
5064: ADD
5065: ST_TO_ADDR
// if gamma_commander = 1 and Donaldson then
5066: LD_EXP 10
5070: PUSH
5071: LD_INT 1
5073: EQUAL
5074: PUSH
5075: LD_EXP 24
5079: AND
5080: IFFALSE 5092
// gammaCommander := Donaldson ;
5082: LD_ADDR_VAR 0 8
5086: PUSH
5087: LD_EXP 24
5091: ST_TO_ADDR
// if gamma_commander = 2 and Brown then
5092: LD_EXP 10
5096: PUSH
5097: LD_INT 2
5099: EQUAL
5100: PUSH
5101: LD_EXP 28
5105: AND
5106: IFFALSE 5118
// gammaCommander := Brown ;
5108: LD_ADDR_VAR 0 8
5112: PUSH
5113: LD_EXP 28
5117: ST_TO_ADDR
// friends := friends diff selected ;
5118: LD_ADDR_EXP 4
5122: PUSH
5123: LD_EXP 4
5127: PUSH
5128: LD_EXP 3
5132: DIFF
5133: ST_TO_ADDR
// friends := friends diff gammaCommander ;
5134: LD_ADDR_EXP 4
5138: PUSH
5139: LD_EXP 4
5143: PUSH
5144: LD_VAR 0 8
5148: DIFF
5149: ST_TO_ADDR
// buildings := [ [ ambar1 , ambar2 , ambar3 ] , [ amlab2 , amlab3 , amlab4 ] ] ;
5150: LD_ADDR_VAR 0 4
5154: PUSH
5155: LD_INT 111
5157: PUSH
5158: LD_INT 137
5160: PUSH
5161: LD_INT 51
5163: PUSH
5164: EMPTY
5165: LIST
5166: LIST
5167: LIST
5168: PUSH
5169: LD_INT 147
5171: PUSH
5172: LD_INT 129
5174: PUSH
5175: LD_INT 25
5177: PUSH
5178: EMPTY
5179: LIST
5180: LIST
5181: LIST
5182: PUSH
5183: EMPTY
5184: LIST
5185: LIST
5186: ST_TO_ADDR
// areas := [ friends_spawn_1 , friends_spawn_2 , friends_spawn_3 , friends_spawn_4 , friends_spawn_5 , friends_spawn_6 ] ;
5187: LD_ADDR_VAR 0 5
5191: PUSH
5192: LD_INT 5
5194: PUSH
5195: LD_INT 6
5197: PUSH
5198: LD_INT 7
5200: PUSH
5201: LD_INT 8
5203: PUSH
5204: LD_INT 17
5206: PUSH
5207: LD_INT 18
5209: PUSH
5210: EMPTY
5211: LIST
5212: LIST
5213: LIST
5214: LIST
5215: LIST
5216: LIST
5217: ST_TO_ADDR
// for i in buildings do
5218: LD_ADDR_VAR 0 2
5222: PUSH
5223: LD_VAR 0 4
5227: PUSH
5228: FOR_IN
5229: IFFALSE 5245
// SetSide ( i , 4 ) ;
5231: LD_VAR 0 2
5235: PPUSH
5236: LD_INT 4
5238: PPUSH
5239: CALL_OW 235
5243: GO 5228
5245: POP
5246: POP
// for i in selected union gammaCommander do
5247: LD_ADDR_VAR 0 2
5251: PUSH
5252: LD_EXP 3
5256: PUSH
5257: LD_VAR 0 8
5261: UNION
5262: PUSH
5263: FOR_IN
5264: IFFALSE 5604
// begin if GetClass ( i ) in [ 1 , 5 ] then
5266: LD_VAR 0 2
5270: PPUSH
5271: CALL_OW 257
5275: PUSH
5276: LD_INT 1
5278: PUSH
5279: LD_INT 5
5281: PUSH
5282: EMPTY
5283: LIST
5284: LIST
5285: IN
5286: IFFALSE 5446
// begin if buildings [ 1 ] then
5288: LD_VAR 0 4
5292: PUSH
5293: LD_INT 1
5295: ARRAY
5296: IFFALSE 5357
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
5298: LD_VAR 0 2
5302: PPUSH
5303: LD_VAR 0 4
5307: PUSH
5308: LD_INT 1
5310: ARRAY
5311: PUSH
5312: LD_INT 1
5314: ARRAY
5315: PPUSH
5316: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
5320: LD_ADDR_VAR 0 4
5324: PUSH
5325: LD_VAR 0 4
5329: PPUSH
5330: LD_INT 1
5332: PPUSH
5333: LD_VAR 0 4
5337: PUSH
5338: LD_INT 1
5340: ARRAY
5341: PPUSH
5342: LD_INT 1
5344: PPUSH
5345: CALL_OW 3
5349: PPUSH
5350: CALL_OW 1
5354: ST_TO_ADDR
// end else
5355: GO 5444
// begin if not areas then
5357: LD_VAR 0 5
5361: NOT
5362: IFFALSE 5396
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5364: LD_VAR 0 2
5368: PPUSH
5369: LD_INT 87
5371: PPUSH
5372: LD_INT 68
5374: PPUSH
5375: LD_INT 8
5377: PPUSH
5378: LD_INT 0
5380: PPUSH
5381: CALL_OW 50
// ComHold ( i ) ;
5385: LD_VAR 0 2
5389: PPUSH
5390: CALL_OW 140
// end else
5394: GO 5444
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5396: LD_VAR 0 2
5400: PPUSH
5401: LD_VAR 0 5
5405: PUSH
5406: LD_INT 1
5408: ARRAY
5409: PPUSH
5410: LD_INT 0
5412: PPUSH
5413: CALL_OW 49
// ComHold ( i ) ;
5417: LD_VAR 0 2
5421: PPUSH
5422: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5426: LD_ADDR_VAR 0 5
5430: PUSH
5431: LD_VAR 0 5
5435: PPUSH
5436: LD_INT 1
5438: PPUSH
5439: CALL_OW 3
5443: ST_TO_ADDR
// end ; end ; end else
5444: GO 5602
// begin if buildings [ 2 ] then
5446: LD_VAR 0 4
5450: PUSH
5451: LD_INT 2
5453: ARRAY
5454: IFFALSE 5515
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
5456: LD_VAR 0 2
5460: PPUSH
5461: LD_VAR 0 4
5465: PUSH
5466: LD_INT 2
5468: ARRAY
5469: PUSH
5470: LD_INT 1
5472: ARRAY
5473: PPUSH
5474: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
5478: LD_ADDR_VAR 0 4
5482: PUSH
5483: LD_VAR 0 4
5487: PPUSH
5488: LD_INT 2
5490: PPUSH
5491: LD_VAR 0 4
5495: PUSH
5496: LD_INT 2
5498: ARRAY
5499: PPUSH
5500: LD_INT 1
5502: PPUSH
5503: CALL_OW 3
5507: PPUSH
5508: CALL_OW 1
5512: ST_TO_ADDR
// end else
5513: GO 5602
// begin if not areas then
5515: LD_VAR 0 5
5519: NOT
5520: IFFALSE 5554
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5522: LD_VAR 0 2
5526: PPUSH
5527: LD_INT 87
5529: PPUSH
5530: LD_INT 68
5532: PPUSH
5533: LD_INT 8
5535: PPUSH
5536: LD_INT 0
5538: PPUSH
5539: CALL_OW 50
// ComHold ( i ) ;
5543: LD_VAR 0 2
5547: PPUSH
5548: CALL_OW 140
// end else
5552: GO 5602
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5554: LD_VAR 0 2
5558: PPUSH
5559: LD_VAR 0 5
5563: PUSH
5564: LD_INT 1
5566: ARRAY
5567: PPUSH
5568: LD_INT 0
5570: PPUSH
5571: CALL_OW 49
// ComHold ( i ) ;
5575: LD_VAR 0 2
5579: PPUSH
5580: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5584: LD_ADDR_VAR 0 5
5588: PUSH
5589: LD_VAR 0 5
5593: PPUSH
5594: LD_INT 1
5596: PPUSH
5597: CALL_OW 3
5601: ST_TO_ADDR
// end ; end ; end ; end ;
5602: GO 5263
5604: POP
5605: POP
// bunkers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) ;
5606: LD_ADDR_VAR 0 6
5610: PUSH
5611: LD_INT 22
5613: PUSH
5614: LD_INT 1
5616: PUSH
5617: EMPTY
5618: LIST
5619: LIST
5620: PUSH
5621: LD_INT 30
5623: PUSH
5624: LD_INT 32
5626: PUSH
5627: EMPTY
5628: LIST
5629: LIST
5630: PUSH
5631: EMPTY
5632: LIST
5633: LIST
5634: PPUSH
5635: CALL_OW 69
5639: ST_TO_ADDR
// for i = bunkers - friends downto 1 do
5640: LD_ADDR_VAR 0 2
5644: PUSH
5645: DOUBLE
5646: LD_VAR 0 6
5650: PUSH
5651: LD_EXP 4
5655: MINUS
5656: INC
5657: ST_TO_ADDR
5658: LD_INT 1
5660: PUSH
5661: FOR_DOWNTO
5662: IFFALSE 5729
// begin PrepareHuman ( false , 1 , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
5664: LD_INT 0
5666: PPUSH
5667: LD_INT 1
5669: PPUSH
5670: LD_INT 7
5672: PUSH
5673: LD_INT 8
5675: PUSH
5676: LD_INT 9
5678: PUSH
5679: LD_INT 10
5681: PUSH
5682: EMPTY
5683: LIST
5684: LIST
5685: LIST
5686: LIST
5687: PUSH
5688: LD_OWVAR 67
5692: ARRAY
5693: PPUSH
5694: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
5698: LD_ADDR_EXP 4
5702: PUSH
5703: LD_EXP 4
5707: PPUSH
5708: LD_EXP 4
5712: PUSH
5713: LD_INT 1
5715: PLUS
5716: PPUSH
5717: CALL_OW 44
5721: PPUSH
5722: CALL_OW 2
5726: ST_TO_ADDR
// end ;
5727: GO 5661
5729: POP
5730: POP
// if friends then
5731: LD_EXP 4
5735: IFFALSE 5851
// begin tmp := friends ;
5737: LD_ADDR_VAR 0 3
5741: PUSH
5742: LD_EXP 4
5746: ST_TO_ADDR
// for i = 1 to bunkers do
5747: LD_ADDR_VAR 0 2
5751: PUSH
5752: DOUBLE
5753: LD_INT 1
5755: DEC
5756: ST_TO_ADDR
5757: LD_VAR 0 6
5761: PUSH
5762: FOR_TO
5763: IFFALSE 5849
// begin SetSide ( tmp [ tmp ] , 1 ) ;
5765: LD_VAR 0 3
5769: PUSH
5770: LD_VAR 0 3
5774: ARRAY
5775: PPUSH
5776: LD_INT 1
5778: PPUSH
5779: CALL_OW 235
// SetClass ( tmp [ tmp ] , 1 ) ;
5783: LD_VAR 0 3
5787: PUSH
5788: LD_VAR 0 3
5792: ARRAY
5793: PPUSH
5794: LD_INT 1
5796: PPUSH
5797: CALL_OW 336
// PlaceHumanInUnit ( tmp [ tmp ] , bunkers [ i ] ) ;
5801: LD_VAR 0 3
5805: PUSH
5806: LD_VAR 0 3
5810: ARRAY
5811: PPUSH
5812: LD_VAR 0 6
5816: PUSH
5817: LD_VAR 0 2
5821: ARRAY
5822: PPUSH
5823: CALL_OW 52
// tmp := Delete ( tmp , tmp ) ;
5827: LD_ADDR_VAR 0 3
5831: PUSH
5832: LD_VAR 0 3
5836: PPUSH
5837: LD_VAR 0 3
5841: PPUSH
5842: CALL_OW 3
5846: ST_TO_ADDR
// end ;
5847: GO 5762
5849: POP
5850: POP
// end ; areas := areas union [ guard_spawn_1 , guard_spawn_2 , guard_spawn_3 , guard_spawn_4 , guard_spawn_5 , guard_spawn_6 , guard_spawn_7 , guard_spawn_8 , guard_spawn_9 , guard_spawn_10 , guard_spawn_11 , guard_spawn_12 , guard_spawn_13 , guard_spawn_14 , guard_spawn_15 , guard_spawn_16 , guard_spawn_17 , guard_spawn_18 , guard_spawn_19 , guard_spawn_20 ] ;
5851: LD_ADDR_VAR 0 5
5855: PUSH
5856: LD_VAR 0 5
5860: PUSH
5861: LD_INT 9
5863: PUSH
5864: LD_INT 10
5866: PUSH
5867: LD_INT 11
5869: PUSH
5870: LD_INT 12
5872: PUSH
5873: LD_INT 13
5875: PUSH
5876: LD_INT 14
5878: PUSH
5879: LD_INT 15
5881: PUSH
5882: LD_INT 16
5884: PUSH
5885: LD_INT 26
5887: PUSH
5888: LD_INT 27
5890: PUSH
5891: LD_INT 28
5893: PUSH
5894: LD_INT 29
5896: PUSH
5897: LD_INT 30
5899: PUSH
5900: LD_INT 31
5902: PUSH
5903: LD_INT 32
5905: PUSH
5906: LD_INT 33
5908: PUSH
5909: LD_INT 34
5911: PUSH
5912: LD_INT 35
5914: PUSH
5915: LD_INT 36
5917: PUSH
5918: LD_INT 37
5920: PUSH
5921: EMPTY
5922: LIST
5923: LIST
5924: LIST
5925: LIST
5926: LIST
5927: LIST
5928: LIST
5929: LIST
5930: LIST
5931: LIST
5932: LIST
5933: LIST
5934: LIST
5935: LIST
5936: LIST
5937: LIST
5938: LIST
5939: LIST
5940: LIST
5941: LIST
5942: UNION
5943: ST_TO_ADDR
// for i in friends do
5944: LD_ADDR_VAR 0 2
5948: PUSH
5949: LD_EXP 4
5953: PUSH
5954: FOR_IN
5955: IFFALSE 6242
// begin SetTag ( i , 2 ) ;
5957: LD_VAR 0 2
5961: PPUSH
5962: LD_INT 2
5964: PPUSH
5965: CALL_OW 109
// if not GetClass ( i ) in [ class_soldier , class_scientistic , class_sniper ] then
5969: LD_VAR 0 2
5973: PPUSH
5974: CALL_OW 257
5978: PUSH
5979: LD_INT 1
5981: PUSH
5982: LD_INT 4
5984: PUSH
5985: LD_INT 5
5987: PUSH
5988: EMPTY
5989: LIST
5990: LIST
5991: LIST
5992: IN
5993: NOT
5994: IFFALSE 6008
// SetClass ( i , 1 ) ;
5996: LD_VAR 0 2
6000: PPUSH
6001: LD_INT 1
6003: PPUSH
6004: CALL_OW 336
// if GetClass ( i ) in [ class_soldier , class_sniper ] and buildings [ 1 ] then
6008: LD_VAR 0 2
6012: PPUSH
6013: CALL_OW 257
6017: PUSH
6018: LD_INT 1
6020: PUSH
6021: LD_INT 5
6023: PUSH
6024: EMPTY
6025: LIST
6026: LIST
6027: IN
6028: PUSH
6029: LD_VAR 0 4
6033: PUSH
6034: LD_INT 1
6036: ARRAY
6037: AND
6038: IFFALSE 6099
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
6040: LD_VAR 0 2
6044: PPUSH
6045: LD_VAR 0 4
6049: PUSH
6050: LD_INT 1
6052: ARRAY
6053: PUSH
6054: LD_INT 1
6056: ARRAY
6057: PPUSH
6058: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
6062: LD_ADDR_VAR 0 4
6066: PUSH
6067: LD_VAR 0 4
6071: PPUSH
6072: LD_INT 1
6074: PPUSH
6075: LD_VAR 0 4
6079: PUSH
6080: LD_INT 1
6082: ARRAY
6083: PPUSH
6084: LD_INT 1
6086: PPUSH
6087: CALL_OW 3
6091: PPUSH
6092: CALL_OW 1
6096: ST_TO_ADDR
// continue ;
6097: GO 5954
// end ; if GetClass ( i ) = class_scientistic and buildings [ 2 ] then
6099: LD_VAR 0 2
6103: PPUSH
6104: CALL_OW 257
6108: PUSH
6109: LD_INT 4
6111: EQUAL
6112: PUSH
6113: LD_VAR 0 4
6117: PUSH
6118: LD_INT 2
6120: ARRAY
6121: AND
6122: IFFALSE 6183
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
6124: LD_VAR 0 2
6128: PPUSH
6129: LD_VAR 0 4
6133: PUSH
6134: LD_INT 2
6136: ARRAY
6137: PUSH
6138: LD_INT 1
6140: ARRAY
6141: PPUSH
6142: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
6146: LD_ADDR_VAR 0 4
6150: PUSH
6151: LD_VAR 0 4
6155: PPUSH
6156: LD_INT 2
6158: PPUSH
6159: LD_VAR 0 4
6163: PUSH
6164: LD_INT 2
6166: ARRAY
6167: PPUSH
6168: LD_INT 1
6170: PPUSH
6171: CALL_OW 3
6175: PPUSH
6176: CALL_OW 1
6180: ST_TO_ADDR
// continue ;
6181: GO 5954
// end ; PlaceUnitArea ( i , areas [ 1 ] , false ) ;
6183: LD_VAR 0 2
6187: PPUSH
6188: LD_VAR 0 5
6192: PUSH
6193: LD_INT 1
6195: ARRAY
6196: PPUSH
6197: LD_INT 0
6199: PPUSH
6200: CALL_OW 49
// areas := Delete ( areas , 1 ) ;
6204: LD_ADDR_VAR 0 5
6208: PUSH
6209: LD_VAR 0 5
6213: PPUSH
6214: LD_INT 1
6216: PPUSH
6217: CALL_OW 3
6221: ST_TO_ADDR
// ComHold ( i ) ;
6222: LD_VAR 0 2
6226: PPUSH
6227: CALL_OW 140
// if not areas then
6231: LD_VAR 0 5
6235: NOT
6236: IFFALSE 6240
// break ;
6238: GO 6242
// end ;
6240: GO 5954
6242: POP
6243: POP
// if UnitFilter ( friends , [ f_not , [ f_placed ] ] ) then
6244: LD_EXP 4
6248: PPUSH
6249: LD_INT 3
6251: PUSH
6252: LD_INT 52
6254: PUSH
6255: EMPTY
6256: LIST
6257: PUSH
6258: EMPTY
6259: LIST
6260: LIST
6261: PPUSH
6262: CALL_OW 72
6266: IFFALSE 6333
// for i in UnitFilter ( friends , [ f_not , [ f_placed ] ] ) do
6268: LD_ADDR_VAR 0 2
6272: PUSH
6273: LD_EXP 4
6277: PPUSH
6278: LD_INT 3
6280: PUSH
6281: LD_INT 52
6283: PUSH
6284: EMPTY
6285: LIST
6286: PUSH
6287: EMPTY
6288: LIST
6289: LIST
6290: PPUSH
6291: CALL_OW 72
6295: PUSH
6296: FOR_IN
6297: IFFALSE 6331
// begin PlaceUnitXYR ( i , 65 , 58 , 7 , false ) ;
6299: LD_VAR 0 2
6303: PPUSH
6304: LD_INT 65
6306: PPUSH
6307: LD_INT 58
6309: PPUSH
6310: LD_INT 7
6312: PPUSH
6313: LD_INT 0
6315: PPUSH
6316: CALL_OW 50
// ComHold ( i ) ;
6320: LD_VAR 0 2
6324: PPUSH
6325: CALL_OW 140
// end ;
6329: GO 6296
6331: POP
6332: POP
// if Frank then
6333: LD_EXP 33
6337: IFFALSE 6351
// SetClass ( Frank , class_sniper ) ;
6339: LD_EXP 33
6343: PPUSH
6344: LD_INT 5
6346: PPUSH
6347: CALL_OW 336
// end ; end_of_file
6351: LD_VAR 0 1
6355: RET
// export function CanSayRand ( side ) ; begin
6356: LD_INT 0
6358: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6359: LD_ADDR_VAR 0 2
6363: PUSH
6364: LD_INT 52
6366: PUSH
6367: EMPTY
6368: LIST
6369: PUSH
6370: LD_INT 22
6372: PUSH
6373: LD_VAR 0 1
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: PUSH
6382: LD_INT 2
6384: PUSH
6385: LD_INT 25
6387: PUSH
6388: LD_INT 1
6390: PUSH
6391: EMPTY
6392: LIST
6393: LIST
6394: PUSH
6395: LD_INT 25
6397: PUSH
6398: LD_INT 2
6400: PUSH
6401: EMPTY
6402: LIST
6403: LIST
6404: PUSH
6405: LD_INT 25
6407: PUSH
6408: LD_INT 3
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: PUSH
6415: LD_INT 25
6417: PUSH
6418: LD_INT 4
6420: PUSH
6421: EMPTY
6422: LIST
6423: LIST
6424: PUSH
6425: EMPTY
6426: LIST
6427: LIST
6428: LIST
6429: LIST
6430: LIST
6431: PUSH
6432: EMPTY
6433: LIST
6434: LIST
6435: LIST
6436: PPUSH
6437: CALL_OW 69
6441: PUSH
6442: LD_EXP 14
6446: PUSH
6447: LD_EXP 33
6451: PUSH
6452: LD_EXP 23
6456: PUSH
6457: LD_EXP 24
6461: PUSH
6462: LD_EXP 25
6466: PUSH
6467: LD_EXP 26
6471: PUSH
6472: LD_EXP 27
6476: PUSH
6477: LD_EXP 28
6481: PUSH
6482: LD_EXP 29
6486: PUSH
6487: LD_EXP 30
6491: PUSH
6492: LD_EXP 16
6496: PUSH
6497: LD_EXP 31
6501: PUSH
6502: LD_EXP 32
6506: PUSH
6507: LD_EXP 34
6511: PUSH
6512: EMPTY
6513: LIST
6514: LIST
6515: LIST
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: LIST
6521: LIST
6522: LIST
6523: LIST
6524: LIST
6525: LIST
6526: LIST
6527: DIFF
6528: ST_TO_ADDR
// end ;
6529: LD_VAR 0 2
6533: RET
// export function SayRand ( sex , dial ) ; begin
6534: LD_INT 0
6536: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6537: LD_ADDR_VAR 0 3
6541: PUSH
6542: LD_INT 52
6544: PUSH
6545: EMPTY
6546: LIST
6547: PUSH
6548: LD_INT 22
6550: PUSH
6551: LD_INT 1
6553: PUSH
6554: EMPTY
6555: LIST
6556: LIST
6557: PUSH
6558: LD_INT 26
6560: PUSH
6561: LD_VAR 0 1
6565: PUSH
6566: EMPTY
6567: LIST
6568: LIST
6569: PUSH
6570: LD_INT 2
6572: PUSH
6573: LD_INT 25
6575: PUSH
6576: LD_INT 1
6578: PUSH
6579: EMPTY
6580: LIST
6581: LIST
6582: PUSH
6583: LD_INT 25
6585: PUSH
6586: LD_INT 2
6588: PUSH
6589: EMPTY
6590: LIST
6591: LIST
6592: PUSH
6593: LD_INT 25
6595: PUSH
6596: LD_INT 3
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: PUSH
6603: LD_INT 25
6605: PUSH
6606: LD_INT 4
6608: PUSH
6609: EMPTY
6610: LIST
6611: LIST
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: PUSH
6620: EMPTY
6621: LIST
6622: LIST
6623: LIST
6624: LIST
6625: PPUSH
6626: CALL_OW 69
6630: PUSH
6631: LD_EXP 14
6635: PUSH
6636: LD_EXP 33
6640: PUSH
6641: LD_EXP 23
6645: PUSH
6646: LD_EXP 24
6650: PUSH
6651: LD_EXP 25
6655: PUSH
6656: LD_EXP 26
6660: PUSH
6661: LD_EXP 27
6665: PUSH
6666: LD_EXP 28
6670: PUSH
6671: LD_EXP 29
6675: PUSH
6676: LD_EXP 30
6680: PUSH
6681: LD_EXP 16
6685: PUSH
6686: LD_EXP 31
6690: PUSH
6691: LD_EXP 32
6695: PUSH
6696: LD_EXP 34
6700: PUSH
6701: EMPTY
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: LIST
6708: LIST
6709: LIST
6710: LIST
6711: LIST
6712: LIST
6713: LIST
6714: LIST
6715: LIST
6716: DIFF
6717: ST_TO_ADDR
// if not result then
6718: LD_VAR 0 3
6722: NOT
6723: IFFALSE 6727
// exit ;
6725: GO 6755
// result := result [ 1 ] ;
6727: LD_ADDR_VAR 0 3
6731: PUSH
6732: LD_VAR 0 3
6736: PUSH
6737: LD_INT 1
6739: ARRAY
6740: ST_TO_ADDR
// Say ( result , dial ) ;
6741: LD_VAR 0 3
6745: PPUSH
6746: LD_VAR 0 2
6750: PPUSH
6751: CALL_OW 88
// end ;
6755: LD_VAR 0 3
6759: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
6760: LD_INT 0
6762: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
6763: LD_ADDR_VAR 0 4
6767: PUSH
6768: LD_INT 22
6770: PUSH
6771: LD_INT 1
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: PUSH
6778: LD_INT 26
6780: PUSH
6781: LD_VAR 0 1
6785: PUSH
6786: EMPTY
6787: LIST
6788: LIST
6789: PUSH
6790: LD_INT 2
6792: PUSH
6793: LD_INT 25
6795: PUSH
6796: LD_INT 1
6798: PUSH
6799: EMPTY
6800: LIST
6801: LIST
6802: PUSH
6803: LD_INT 25
6805: PUSH
6806: LD_INT 2
6808: PUSH
6809: EMPTY
6810: LIST
6811: LIST
6812: PUSH
6813: LD_INT 25
6815: PUSH
6816: LD_INT 3
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: PUSH
6823: LD_INT 25
6825: PUSH
6826: LD_INT 4
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: PUSH
6833: EMPTY
6834: LIST
6835: LIST
6836: LIST
6837: LIST
6838: LIST
6839: PUSH
6840: EMPTY
6841: LIST
6842: LIST
6843: LIST
6844: PPUSH
6845: CALL_OW 69
6849: PUSH
6850: LD_EXP 14
6854: PUSH
6855: LD_EXP 33
6859: PUSH
6860: LD_EXP 23
6864: PUSH
6865: LD_EXP 24
6869: PUSH
6870: LD_EXP 25
6874: PUSH
6875: LD_EXP 26
6879: PUSH
6880: LD_EXP 27
6884: PUSH
6885: LD_EXP 28
6889: PUSH
6890: LD_EXP 29
6894: PUSH
6895: LD_EXP 30
6899: PUSH
6900: LD_EXP 16
6904: PUSH
6905: LD_EXP 31
6909: PUSH
6910: LD_EXP 32
6914: PUSH
6915: LD_EXP 34
6919: PUSH
6920: EMPTY
6921: LIST
6922: LIST
6923: LIST
6924: LIST
6925: LIST
6926: LIST
6927: LIST
6928: LIST
6929: LIST
6930: LIST
6931: LIST
6932: LIST
6933: LIST
6934: LIST
6935: PUSH
6936: LD_VAR 0 3
6940: ADD
6941: DIFF
6942: ST_TO_ADDR
// if not result then
6943: LD_VAR 0 4
6947: NOT
6948: IFFALSE 6952
// exit ;
6950: GO 6980
// result := result [ 1 ] ;
6952: LD_ADDR_VAR 0 4
6956: PUSH
6957: LD_VAR 0 4
6961: PUSH
6962: LD_INT 1
6964: ARRAY
6965: ST_TO_ADDR
// Say ( result , dial ) ;
6966: LD_VAR 0 4
6970: PPUSH
6971: LD_VAR 0 2
6975: PPUSH
6976: CALL_OW 88
// end ;
6980: LD_VAR 0 4
6984: RET
// export function Patrol ( unit , path , flags ) ; var i , x , y , c , p , station , tmp_path , status , enemy , e , spot_dist , safe_place , chase_range , need_refuel ; begin
6985: LD_INT 0
6987: PPUSH
6988: PPUSH
6989: PPUSH
6990: PPUSH
6991: PPUSH
6992: PPUSH
6993: PPUSH
6994: PPUSH
6995: PPUSH
6996: PPUSH
6997: PPUSH
6998: PPUSH
6999: PPUSH
7000: PPUSH
7001: PPUSH
// if not unit or not path or GetType ( unit ) = unit_building then
7002: LD_VAR 0 1
7006: NOT
7007: PUSH
7008: LD_VAR 0 2
7012: NOT
7013: OR
7014: PUSH
7015: LD_VAR 0 1
7019: PPUSH
7020: CALL_OW 247
7024: PUSH
7025: LD_INT 3
7027: EQUAL
7028: OR
7029: IFFALSE 7033
// exit ;
7031: GO 8572
// for i = path downto 1 do
7033: LD_ADDR_VAR 0 5
7037: PUSH
7038: DOUBLE
7039: LD_VAR 0 2
7043: INC
7044: ST_TO_ADDR
7045: LD_INT 1
7047: PUSH
7048: FOR_DOWNTO
7049: IFFALSE 7110
// begin if not ValidHex ( path [ i ] [ 1 ] , path [ i ] [ 2 ] ) then
7051: LD_VAR 0 2
7055: PUSH
7056: LD_VAR 0 5
7060: ARRAY
7061: PUSH
7062: LD_INT 1
7064: ARRAY
7065: PPUSH
7066: LD_VAR 0 2
7070: PUSH
7071: LD_VAR 0 5
7075: ARRAY
7076: PUSH
7077: LD_INT 2
7079: ARRAY
7080: PPUSH
7081: CALL_OW 488
7085: NOT
7086: IFFALSE 7108
// path = Delete ( path , i ) ;
7088: LD_ADDR_VAR 0 2
7092: PUSH
7093: LD_VAR 0 2
7097: PPUSH
7098: LD_VAR 0 5
7102: PPUSH
7103: CALL_OW 3
7107: ST_TO_ADDR
// end ;
7108: GO 7048
7110: POP
7111: POP
// if not path then
7112: LD_VAR 0 2
7116: NOT
7117: IFFALSE 7121
// exit ;
7119: GO 8572
// tmp_path := [ ] ;
7121: LD_ADDR_VAR 0 11
7125: PUSH
7126: EMPTY
7127: ST_TO_ADDR
// if flags then
7128: LD_VAR 0 3
7132: IFFALSE 7206
// begin if flags [ 1 ] then
7134: LD_VAR 0 3
7138: PUSH
7139: LD_INT 1
7141: ARRAY
7142: IFFALSE 7158
// safe_place = flags [ 1 ] ;
7144: LD_ADDR_VAR 0 16
7148: PUSH
7149: LD_VAR 0 3
7153: PUSH
7154: LD_INT 1
7156: ARRAY
7157: ST_TO_ADDR
// if flags [ 2 ] then
7158: LD_VAR 0 3
7162: PUSH
7163: LD_INT 2
7165: ARRAY
7166: IFFALSE 7182
// spot_dist = flags [ 2 ] ;
7168: LD_ADDR_VAR 0 15
7172: PUSH
7173: LD_VAR 0 3
7177: PUSH
7178: LD_INT 2
7180: ARRAY
7181: ST_TO_ADDR
// if flags [ 3 ] then
7182: LD_VAR 0 3
7186: PUSH
7187: LD_INT 3
7189: ARRAY
7190: IFFALSE 7206
// chase_range = flags [ 3 ] ;
7192: LD_ADDR_VAR 0 17
7196: PUSH
7197: LD_VAR 0 3
7201: PUSH
7202: LD_INT 3
7204: ARRAY
7205: ST_TO_ADDR
// end ; if not chase_range then
7206: LD_VAR 0 17
7210: NOT
7211: IFFALSE 7221
// chase_range = 8 ;
7213: LD_ADDR_VAR 0 17
7217: PUSH
7218: LD_INT 8
7220: ST_TO_ADDR
// if not spot_dist then
7221: LD_VAR 0 15
7225: NOT
7226: IFFALSE 7236
// spot_dist := 8 ;
7228: LD_ADDR_VAR 0 15
7232: PUSH
7233: LD_INT 8
7235: ST_TO_ADDR
// need_refuel = ( GetType ( unit ) = unit_vehicle and GetEngine ( unit ) <> engine_siberite ) ;
7236: LD_ADDR_VAR 0 18
7240: PUSH
7241: LD_VAR 0 1
7245: PPUSH
7246: CALL_OW 247
7250: PUSH
7251: LD_INT 2
7253: EQUAL
7254: PUSH
7255: LD_VAR 0 1
7259: PPUSH
7260: CALL_OW 262
7264: PUSH
7265: LD_INT 3
7267: NONEQUAL
7268: AND
7269: ST_TO_ADDR
// status = 1 ;
7270: LD_ADDR_VAR 0 12
7274: PUSH
7275: LD_INT 1
7277: ST_TO_ADDR
// tmp_path = [ 1 , path [ 1 ] ] ;
7278: LD_ADDR_VAR 0 11
7282: PUSH
7283: LD_INT 1
7285: PUSH
7286: LD_VAR 0 2
7290: PUSH
7291: LD_INT 1
7293: ARRAY
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7299: LD_INT 35
7301: PPUSH
7302: CALL_OW 67
// if need_refuel and GetFuel ( unit ) < 20 then
7306: LD_VAR 0 18
7310: PUSH
7311: LD_VAR 0 1
7315: PPUSH
7316: CALL_OW 261
7320: PUSH
7321: LD_INT 20
7323: LESS
7324: AND
7325: IFFALSE 7518
// begin station := FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_oil_mine ] , [ f_btype , b_factory ] ] ] ) ;
7327: LD_ADDR_VAR 0 10
7331: PUSH
7332: LD_INT 22
7334: PUSH
7335: LD_VAR 0 1
7339: PPUSH
7340: CALL_OW 255
7344: PUSH
7345: EMPTY
7346: LIST
7347: LIST
7348: PUSH
7349: LD_INT 2
7351: PUSH
7352: LD_INT 30
7354: PUSH
7355: LD_INT 0
7357: PUSH
7358: EMPTY
7359: LIST
7360: LIST
7361: PUSH
7362: LD_INT 30
7364: PUSH
7365: LD_INT 1
7367: PUSH
7368: EMPTY
7369: LIST
7370: LIST
7371: PUSH
7372: LD_INT 30
7374: PUSH
7375: LD_INT 29
7377: PUSH
7378: EMPTY
7379: LIST
7380: LIST
7381: PUSH
7382: LD_INT 30
7384: PUSH
7385: LD_INT 3
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: PUSH
7392: EMPTY
7393: LIST
7394: LIST
7395: LIST
7396: LIST
7397: LIST
7398: PUSH
7399: EMPTY
7400: LIST
7401: LIST
7402: PPUSH
7403: CALL_OW 69
7407: ST_TO_ADDR
// if not station then
7408: LD_VAR 0 10
7412: NOT
7413: IFFALSE 7429
// begin SetFuel ( unit , 40 ) ;
7415: LD_VAR 0 1
7419: PPUSH
7420: LD_INT 40
7422: PPUSH
7423: CALL_OW 240
// continue ;
7427: GO 7299
// end ; status := 6 ;
7429: LD_ADDR_VAR 0 12
7433: PUSH
7434: LD_INT 6
7436: ST_TO_ADDR
// station := NearestUnitToUnit ( station , unit ) ;
7437: LD_ADDR_VAR 0 10
7441: PUSH
7442: LD_VAR 0 10
7446: PPUSH
7447: LD_VAR 0 1
7451: PPUSH
7452: CALL_OW 74
7456: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7457: LD_INT 35
7459: PPUSH
7460: CALL_OW 67
// ComMoveUnit ( unit , station ) ;
7464: LD_VAR 0 1
7468: PPUSH
7469: LD_VAR 0 10
7473: PPUSH
7474: CALL_OW 112
// until GetDistUnits ( unit , station ) < 6 ;
7478: LD_VAR 0 1
7482: PPUSH
7483: LD_VAR 0 10
7487: PPUSH
7488: CALL_OW 296
7492: PUSH
7493: LD_INT 6
7495: LESS
7496: IFFALSE 7457
// SetFuel ( unit , 100 ) ;
7498: LD_VAR 0 1
7502: PPUSH
7503: LD_INT 100
7505: PPUSH
7506: CALL_OW 240
// status := 5 ;
7510: LD_ADDR_VAR 0 12
7514: PUSH
7515: LD_INT 5
7517: ST_TO_ADDR
// end ; if status = 1 then
7518: LD_VAR 0 12
7522: PUSH
7523: LD_INT 1
7525: EQUAL
7526: IFFALSE 7902
// begin enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] , [ f_dist , unit , spot_dist ] , [ f_see , 1 ] ] ) ;
7528: LD_ADDR_VAR 0 13
7532: PUSH
7533: LD_INT 81
7535: PUSH
7536: LD_VAR 0 1
7540: PPUSH
7541: CALL_OW 255
7545: PUSH
7546: EMPTY
7547: LIST
7548: LIST
7549: PUSH
7550: LD_INT 3
7552: PUSH
7553: LD_INT 21
7555: PUSH
7556: LD_INT 3
7558: PUSH
7559: EMPTY
7560: LIST
7561: LIST
7562: PUSH
7563: EMPTY
7564: LIST
7565: LIST
7566: PUSH
7567: LD_INT 91
7569: PUSH
7570: LD_VAR 0 1
7574: PUSH
7575: LD_VAR 0 15
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: LIST
7584: PUSH
7585: LD_INT 101
7587: PUSH
7588: LD_INT 1
7590: PUSH
7591: EMPTY
7592: LIST
7593: LIST
7594: PUSH
7595: EMPTY
7596: LIST
7597: LIST
7598: LIST
7599: LIST
7600: PPUSH
7601: CALL_OW 69
7605: ST_TO_ADDR
// for i in enemy do
7606: LD_ADDR_VAR 0 5
7610: PUSH
7611: LD_VAR 0 13
7615: PUSH
7616: FOR_IN
7617: IFFALSE 7648
// if IsInvisible ( i ) then
7619: LD_VAR 0 5
7623: PPUSH
7624: CALL_OW 571
7628: IFFALSE 7646
// enemy := enemy diff i ;
7630: LD_ADDR_VAR 0 13
7634: PUSH
7635: LD_VAR 0 13
7639: PUSH
7640: LD_VAR 0 5
7644: DIFF
7645: ST_TO_ADDR
7646: GO 7616
7648: POP
7649: POP
// if enemy then
7650: LD_VAR 0 13
7654: IFFALSE 7704
// begin SetRememberedX ( unit , GetX ( unit ) ) ;
7656: LD_VAR 0 1
7660: PPUSH
7661: LD_VAR 0 1
7665: PPUSH
7666: CALL_OW 250
7670: PPUSH
7671: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
7675: LD_VAR 0 1
7679: PPUSH
7680: LD_VAR 0 1
7684: PPUSH
7685: CALL_OW 251
7689: PPUSH
7690: CALL_OW 232
// status = 2 ;
7694: LD_ADDR_VAR 0 12
7698: PUSH
7699: LD_INT 2
7701: ST_TO_ADDR
// end else
7702: GO 7902
// begin if IsAt ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) or not HasTask ( unit ) then
7704: LD_VAR 0 1
7708: PPUSH
7709: LD_VAR 0 11
7713: PUSH
7714: LD_INT 2
7716: ARRAY
7717: PUSH
7718: LD_INT 1
7720: ARRAY
7721: PPUSH
7722: LD_VAR 0 11
7726: PUSH
7727: LD_INT 2
7729: ARRAY
7730: PUSH
7731: LD_INT 2
7733: ARRAY
7734: PPUSH
7735: CALL_OW 307
7739: PUSH
7740: LD_VAR 0 1
7744: PPUSH
7745: CALL_OW 314
7749: NOT
7750: OR
7751: IFFALSE 7902
// begin wait ( 0 0$2 ) ;
7753: LD_INT 70
7755: PPUSH
7756: CALL_OW 67
// if tmp_path [ 1 ] + 1 > path then
7760: LD_VAR 0 11
7764: PUSH
7765: LD_INT 1
7767: ARRAY
7768: PUSH
7769: LD_INT 1
7771: PLUS
7772: PUSH
7773: LD_VAR 0 2
7777: GREATER
7778: IFFALSE 7803
// tmp_path := Replace ( tmp_path , 1 , 1 ) else
7780: LD_ADDR_VAR 0 11
7784: PUSH
7785: LD_VAR 0 11
7789: PPUSH
7790: LD_INT 1
7792: PPUSH
7793: LD_INT 1
7795: PPUSH
7796: CALL_OW 1
7800: ST_TO_ADDR
7801: GO 7834
// tmp_path := Replace ( tmp_path , 1 , tmp_path [ 1 ] + 1 ) ;
7803: LD_ADDR_VAR 0 11
7807: PUSH
7808: LD_VAR 0 11
7812: PPUSH
7813: LD_INT 1
7815: PPUSH
7816: LD_VAR 0 11
7820: PUSH
7821: LD_INT 1
7823: ARRAY
7824: PUSH
7825: LD_INT 1
7827: PLUS
7828: PPUSH
7829: CALL_OW 1
7833: ST_TO_ADDR
// tmp_path := Replace ( tmp_path , 2 , path [ tmp_path [ 1 ] ] ) ;
7834: LD_ADDR_VAR 0 11
7838: PUSH
7839: LD_VAR 0 11
7843: PPUSH
7844: LD_INT 2
7846: PPUSH
7847: LD_VAR 0 2
7851: PUSH
7852: LD_VAR 0 11
7856: PUSH
7857: LD_INT 1
7859: ARRAY
7860: ARRAY
7861: PPUSH
7862: CALL_OW 1
7866: ST_TO_ADDR
// ComAgressiveMove ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) ;
7867: LD_VAR 0 1
7871: PPUSH
7872: LD_VAR 0 11
7876: PUSH
7877: LD_INT 2
7879: ARRAY
7880: PUSH
7881: LD_INT 1
7883: ARRAY
7884: PPUSH
7885: LD_VAR 0 11
7889: PUSH
7890: LD_INT 2
7892: ARRAY
7893: PUSH
7894: LD_INT 2
7896: ARRAY
7897: PPUSH
7898: CALL_OW 114
// end ; end ; end ; if status = 2 then
7902: LD_VAR 0 12
7906: PUSH
7907: LD_INT 2
7909: EQUAL
7910: IFFALSE 8131
// begin if GetLives ( unit ) < 650 and safe_place then
7912: LD_VAR 0 1
7916: PPUSH
7917: CALL_OW 256
7921: PUSH
7922: LD_INT 650
7924: LESS
7925: PUSH
7926: LD_VAR 0 16
7930: AND
7931: IFFALSE 7943
// begin status = 3 ;
7933: LD_ADDR_VAR 0 12
7937: PUSH
7938: LD_INT 3
7940: ST_TO_ADDR
// continue ;
7941: GO 7299
// end ; x := GetRememberedX ( unit ) ;
7943: LD_ADDR_VAR 0 6
7947: PUSH
7948: LD_VAR 0 1
7952: PPUSH
7953: CALL_OW 252
7957: ST_TO_ADDR
// y := GetRememberedY ( unit ) ;
7958: LD_ADDR_VAR 0 7
7962: PUSH
7963: LD_VAR 0 1
7967: PPUSH
7968: CALL_OW 253
7972: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_distxy , x , y , spot_dist ] , [ f_see , 1 ] ] ) ;
7973: LD_ADDR_VAR 0 13
7977: PUSH
7978: LD_INT 81
7980: PUSH
7981: LD_VAR 0 1
7985: PPUSH
7986: CALL_OW 255
7990: PUSH
7991: EMPTY
7992: LIST
7993: LIST
7994: PUSH
7995: LD_INT 92
7997: PUSH
7998: LD_VAR 0 6
8002: PUSH
8003: LD_VAR 0 7
8007: PUSH
8008: LD_VAR 0 15
8012: PUSH
8013: EMPTY
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: PUSH
8019: LD_INT 101
8021: PUSH
8022: LD_INT 1
8024: PUSH
8025: EMPTY
8026: LIST
8027: LIST
8028: PUSH
8029: EMPTY
8030: LIST
8031: LIST
8032: LIST
8033: PPUSH
8034: CALL_OW 69
8038: ST_TO_ADDR
// if enemy then
8039: LD_VAR 0 13
8043: IFFALSE 8114
// begin e := NearestUnitToUnit ( enemy , unit ) ;
8045: LD_ADDR_VAR 0 14
8049: PUSH
8050: LD_VAR 0 13
8054: PPUSH
8055: LD_VAR 0 1
8059: PPUSH
8060: CALL_OW 74
8064: ST_TO_ADDR
// if GetDistUnitXY ( e , x , y ) < spot_dist + chase_range then
8065: LD_VAR 0 14
8069: PPUSH
8070: LD_VAR 0 6
8074: PPUSH
8075: LD_VAR 0 7
8079: PPUSH
8080: CALL_OW 297
8084: PUSH
8085: LD_VAR 0 15
8089: PUSH
8090: LD_VAR 0 17
8094: PLUS
8095: LESS
8096: IFFALSE 8112
// ComAttackUnit ( unit , e ) ;
8098: LD_VAR 0 1
8102: PPUSH
8103: LD_VAR 0 14
8107: PPUSH
8108: CALL_OW 115
// end else
8112: GO 8131
// begin ComStop ( unit ) ;
8114: LD_VAR 0 1
8118: PPUSH
8119: CALL_OW 141
// status = 5 ;
8123: LD_ADDR_VAR 0 12
8127: PUSH
8128: LD_INT 5
8130: ST_TO_ADDR
// end ; end ; if status = 3 and safe_place then
8131: LD_VAR 0 12
8135: PUSH
8136: LD_INT 3
8138: EQUAL
8139: PUSH
8140: LD_VAR 0 16
8144: AND
8145: IFFALSE 8231
// begin repeat ComMoveXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) ;
8147: LD_VAR 0 1
8151: PPUSH
8152: LD_VAR 0 16
8156: PUSH
8157: LD_INT 1
8159: ARRAY
8160: PPUSH
8161: LD_VAR 0 16
8165: PUSH
8166: LD_INT 2
8168: ARRAY
8169: PPUSH
8170: CALL_OW 111
// wait ( 0 0$1 ) ;
8174: LD_INT 35
8176: PPUSH
8177: CALL_OW 67
// until GetDistUnitXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) < 4 ;
8181: LD_VAR 0 1
8185: PPUSH
8186: LD_VAR 0 16
8190: PUSH
8191: LD_INT 1
8193: ARRAY
8194: PPUSH
8195: LD_VAR 0 16
8199: PUSH
8200: LD_INT 2
8202: ARRAY
8203: PPUSH
8204: CALL_OW 297
8208: PUSH
8209: LD_INT 4
8211: LESS
8212: IFFALSE 8147
// ComStop ( unit ) ;
8214: LD_VAR 0 1
8218: PPUSH
8219: CALL_OW 141
// status = 4 ;
8223: LD_ADDR_VAR 0 12
8227: PUSH
8228: LD_INT 4
8230: ST_TO_ADDR
// end ; if status = 4 then
8231: LD_VAR 0 12
8235: PUSH
8236: LD_INT 4
8238: EQUAL
8239: IFFALSE 8271
// begin repeat wait ( 0 0$1 ) ;
8241: LD_INT 35
8243: PPUSH
8244: CALL_OW 67
// until GetLives ( unit ) = 1000 ;
8248: LD_VAR 0 1
8252: PPUSH
8253: CALL_OW 256
8257: PUSH
8258: LD_INT 1000
8260: EQUAL
8261: IFFALSE 8241
// status = 5 ;
8263: LD_ADDR_VAR 0 12
8267: PUSH
8268: LD_INT 5
8270: ST_TO_ADDR
// end ; if status = 5 then
8271: LD_VAR 0 12
8275: PUSH
8276: LD_INT 5
8278: EQUAL
8279: IFFALSE 8561
// begin p := 999 ;
8281: LD_ADDR_VAR 0 9
8285: PUSH
8286: LD_INT 999
8288: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ] ;
8289: LD_ADDR_VAR 0 14
8293: PUSH
8294: LD_VAR 0 11
8298: PUSH
8299: LD_INT 2
8301: ARRAY
8302: PUSH
8303: LD_INT 1
8305: ARRAY
8306: PUSH
8307: LD_VAR 0 11
8311: PUSH
8312: LD_INT 2
8314: ARRAY
8315: PUSH
8316: LD_INT 2
8318: ARRAY
8319: PUSH
8320: EMPTY
8321: LIST
8322: LIST
8323: ST_TO_ADDR
// c := 1 ;
8324: LD_ADDR_VAR 0 8
8328: PUSH
8329: LD_INT 1
8331: ST_TO_ADDR
// for i = 1 to tmp_path [ 2 ] div 2 do
8332: LD_ADDR_VAR 0 5
8336: PUSH
8337: DOUBLE
8338: LD_INT 1
8340: DEC
8341: ST_TO_ADDR
8342: LD_VAR 0 11
8346: PUSH
8347: LD_INT 2
8349: ARRAY
8350: PUSH
8351: LD_INT 2
8353: DIV
8354: PUSH
8355: FOR_TO
8356: IFFALSE 8488
// begin x := GetDistUnitXY ( unit , tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ) ;
8358: LD_ADDR_VAR 0 6
8362: PUSH
8363: LD_VAR 0 1
8367: PPUSH
8368: LD_VAR 0 11
8372: PUSH
8373: LD_INT 2
8375: ARRAY
8376: PUSH
8377: LD_VAR 0 8
8381: ARRAY
8382: PPUSH
8383: LD_VAR 0 11
8387: PUSH
8388: LD_INT 2
8390: ARRAY
8391: PUSH
8392: LD_VAR 0 8
8396: PUSH
8397: LD_INT 1
8399: PLUS
8400: ARRAY
8401: PPUSH
8402: CALL_OW 297
8406: ST_TO_ADDR
// if x < p then
8407: LD_VAR 0 6
8411: PUSH
8412: LD_VAR 0 9
8416: LESS
8417: IFFALSE 8472
// begin p := x ;
8419: LD_ADDR_VAR 0 9
8423: PUSH
8424: LD_VAR 0 6
8428: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ] ;
8429: LD_ADDR_VAR 0 14
8433: PUSH
8434: LD_VAR 0 11
8438: PUSH
8439: LD_INT 2
8441: ARRAY
8442: PUSH
8443: LD_VAR 0 8
8447: ARRAY
8448: PUSH
8449: LD_VAR 0 11
8453: PUSH
8454: LD_INT 2
8456: ARRAY
8457: PUSH
8458: LD_VAR 0 8
8462: PUSH
8463: LD_INT 1
8465: PLUS
8466: ARRAY
8467: PUSH
8468: EMPTY
8469: LIST
8470: LIST
8471: ST_TO_ADDR
// end ; c = c + 2 ;
8472: LD_ADDR_VAR 0 8
8476: PUSH
8477: LD_VAR 0 8
8481: PUSH
8482: LD_INT 2
8484: PLUS
8485: ST_TO_ADDR
// end ;
8486: GO 8355
8488: POP
8489: POP
// repeat ComMoveXY ( unit , e [ 1 ] , e [ 2 ] ) ;
8490: LD_VAR 0 1
8494: PPUSH
8495: LD_VAR 0 14
8499: PUSH
8500: LD_INT 1
8502: ARRAY
8503: PPUSH
8504: LD_VAR 0 14
8508: PUSH
8509: LD_INT 2
8511: ARRAY
8512: PPUSH
8513: CALL_OW 111
// wait ( 0 0$1 ) ;
8517: LD_INT 35
8519: PPUSH
8520: CALL_OW 67
// until IsAt ( unit , e [ 1 ] , e [ 2 ] ) ;
8524: LD_VAR 0 1
8528: PPUSH
8529: LD_VAR 0 14
8533: PUSH
8534: LD_INT 1
8536: ARRAY
8537: PPUSH
8538: LD_VAR 0 14
8542: PUSH
8543: LD_INT 2
8545: ARRAY
8546: PPUSH
8547: CALL_OW 307
8551: IFFALSE 8490
// status = 1 ;
8553: LD_ADDR_VAR 0 12
8557: PUSH
8558: LD_INT 1
8560: ST_TO_ADDR
// end ; until IsDead ( unit ) ;
8561: LD_VAR 0 1
8565: PPUSH
8566: CALL_OW 301
8570: IFFALSE 7299
// end ;
8572: LD_VAR 0 4
8576: RET
// export function Talk ( units , type , sequence , sex , class , id , order_id ) ; var i , unit , tmp , unit_id , dialog_id , sex_id , class_id ; begin
8577: LD_INT 0
8579: PPUSH
8580: PPUSH
8581: PPUSH
8582: PPUSH
8583: PPUSH
8584: PPUSH
8585: PPUSH
8586: PPUSH
// if not units or not sequence or not sex in [ sex_male , sex_female , 0 ] or not id or not order_id then
8587: LD_VAR 0 1
8591: NOT
8592: PUSH
8593: LD_VAR 0 3
8597: NOT
8598: OR
8599: PUSH
8600: LD_VAR 0 4
8604: PUSH
8605: LD_INT 1
8607: PUSH
8608: LD_INT 2
8610: PUSH
8611: LD_INT 0
8613: PUSH
8614: EMPTY
8615: LIST
8616: LIST
8617: LIST
8618: IN
8619: NOT
8620: OR
8621: PUSH
8622: LD_VAR 0 6
8626: NOT
8627: OR
8628: PUSH
8629: LD_VAR 0 7
8633: NOT
8634: OR
8635: IFFALSE 8639
// exit ;
8637: GO 9030
// sex_id :=  ;
8639: LD_ADDR_VAR 0 14
8643: PUSH
8644: LD_STRING 
8646: ST_TO_ADDR
// case class of 1 :
8647: LD_VAR 0 5
8651: PUSH
8652: LD_INT 1
8654: DOUBLE
8655: EQUAL
8656: IFTRUE 8660
8658: GO 8671
8660: POP
// class_id := Sol ; 2 :
8661: LD_ADDR_VAR 0 15
8665: PUSH
8666: LD_STRING Sol
8668: ST_TO_ADDR
8669: GO 8729
8671: LD_INT 2
8673: DOUBLE
8674: EQUAL
8675: IFTRUE 8679
8677: GO 8690
8679: POP
// class_id := Eng ; 3 :
8680: LD_ADDR_VAR 0 15
8684: PUSH
8685: LD_STRING Eng
8687: ST_TO_ADDR
8688: GO 8729
8690: LD_INT 3
8692: DOUBLE
8693: EQUAL
8694: IFTRUE 8698
8696: GO 8709
8698: POP
// class_id := Mech ; 4 :
8699: LD_ADDR_VAR 0 15
8703: PUSH
8704: LD_STRING Mech
8706: ST_TO_ADDR
8707: GO 8729
8709: LD_INT 4
8711: DOUBLE
8712: EQUAL
8713: IFTRUE 8717
8715: GO 8728
8717: POP
// class_id := Sci ; end ;
8718: LD_ADDR_VAR 0 15
8722: PUSH
8723: LD_STRING Sci
8725: ST_TO_ADDR
8726: GO 8729
8728: POP
// tmp := UnitFilter ( units , [ f_class , class ] ) ;
8729: LD_ADDR_VAR 0 11
8733: PUSH
8734: LD_VAR 0 1
8738: PPUSH
8739: LD_INT 25
8741: PUSH
8742: LD_VAR 0 5
8746: PUSH
8747: EMPTY
8748: LIST
8749: LIST
8750: PPUSH
8751: CALL_OW 72
8755: ST_TO_ADDR
// if tmp then
8756: LD_VAR 0 11
8760: IFFALSE 8772
// units := tmp ;
8762: LD_ADDR_VAR 0 1
8766: PUSH
8767: LD_VAR 0 11
8771: ST_TO_ADDR
// if sex then
8772: LD_VAR 0 4
8776: IFFALSE 8832
// begin if sex = sex_female then
8778: LD_VAR 0 4
8782: PUSH
8783: LD_INT 2
8785: EQUAL
8786: IFFALSE 8796
// sex_id := F ;
8788: LD_ADDR_VAR 0 14
8792: PUSH
8793: LD_STRING F
8795: ST_TO_ADDR
// units := UnitFilter ( units , [ f_sex , sex ] ) ;
8796: LD_ADDR_VAR 0 1
8800: PUSH
8801: LD_VAR 0 1
8805: PPUSH
8806: LD_INT 26
8808: PUSH
8809: LD_VAR 0 4
8813: PUSH
8814: EMPTY
8815: LIST
8816: LIST
8817: PPUSH
8818: CALL_OW 72
8822: ST_TO_ADDR
// if not units then
8823: LD_VAR 0 1
8827: NOT
8828: IFFALSE 8832
// exit ;
8830: GO 9030
// end ; unit_id := id ;
8832: LD_ADDR_VAR 0 12
8836: PUSH
8837: LD_VAR 0 6
8841: ST_TO_ADDR
// if unit_id > units then
8842: LD_VAR 0 12
8846: PUSH
8847: LD_VAR 0 1
8851: GREATER
8852: IFFALSE 8862
// unit_id := 1 ;
8854: LD_ADDR_VAR 0 12
8858: PUSH
8859: LD_INT 1
8861: ST_TO_ADDR
// if not units [ unit_id ] then
8862: LD_VAR 0 1
8866: PUSH
8867: LD_VAR 0 12
8871: ARRAY
8872: NOT
8873: IFFALSE 8877
// exit ;
8875: GO 9030
// unit := units [ unit_id ] ;
8877: LD_ADDR_VAR 0 10
8881: PUSH
8882: LD_VAR 0 1
8886: PUSH
8887: LD_VAR 0 12
8891: ARRAY
8892: ST_TO_ADDR
// dialog_id := D & sequence & - & sex_id & class_id & id & - & order_id ;
8893: LD_ADDR_VAR 0 13
8897: PUSH
8898: LD_STRING D
8900: PUSH
8901: LD_VAR 0 3
8905: STR
8906: PUSH
8907: LD_STRING -
8909: STR
8910: PUSH
8911: LD_VAR 0 14
8915: STR
8916: PUSH
8917: LD_VAR 0 15
8921: STR
8922: PUSH
8923: LD_VAR 0 6
8927: STR
8928: PUSH
8929: LD_STRING -
8931: STR
8932: PUSH
8933: LD_VAR 0 7
8937: STR
8938: ST_TO_ADDR
// case type of 0 :
8939: LD_VAR 0 2
8943: PUSH
8944: LD_INT 0
8946: DOUBLE
8947: EQUAL
8948: IFTRUE 8952
8950: GO 8969
8952: POP
// Say ( unit , dialog_id ) ; 1 :
8953: LD_VAR 0 10
8957: PPUSH
8958: LD_VAR 0 13
8962: PPUSH
8963: CALL_OW 88
8967: GO 9020
8969: LD_INT 1
8971: DOUBLE
8972: EQUAL
8973: IFTRUE 8977
8975: GO 8994
8977: POP
// SayRadio ( unit , dialog_id ) ; 2 :
8978: LD_VAR 0 10
8982: PPUSH
8983: LD_VAR 0 13
8987: PPUSH
8988: CALL_OW 94
8992: GO 9020
8994: LD_INT 2
8996: DOUBLE
8997: EQUAL
8998: IFTRUE 9002
9000: GO 9019
9002: POP
// ForceSay ( unit , dialog_id ) ; end ;
9003: LD_VAR 0 10
9007: PPUSH
9008: LD_VAR 0 13
9012: PPUSH
9013: CALL_OW 91
9017: GO 9020
9019: POP
// result := unit ;
9020: LD_ADDR_VAR 0 8
9024: PUSH
9025: LD_VAR 0 10
9029: ST_TO_ADDR
// end ;
9030: LD_VAR 0 8
9034: RET
// export function IsNearbyEntrance ( unit , building , distance ) ; var i , entrance ; begin
9035: LD_INT 0
9037: PPUSH
9038: PPUSH
9039: PPUSH
// result := false ;
9040: LD_ADDR_VAR 0 4
9044: PUSH
9045: LD_INT 0
9047: ST_TO_ADDR
// if not unit or not building or IsInUnit ( unit ) then
9048: LD_VAR 0 1
9052: NOT
9053: PUSH
9054: LD_VAR 0 2
9058: NOT
9059: OR
9060: PUSH
9061: LD_VAR 0 1
9065: PPUSH
9066: CALL_OW 310
9070: OR
9071: IFFALSE 9075
// exit ;
9073: GO 9279
// if distance < 0 then
9075: LD_VAR 0 3
9079: PUSH
9080: LD_INT 0
9082: LESS
9083: IFFALSE 9093
// distance := 0 ;
9085: LD_ADDR_VAR 0 3
9089: PUSH
9090: LD_INT 0
9092: ST_TO_ADDR
// entrance := GetBuildingHexes ( GetBType ( building ) , GetX ( building ) , GetY ( building ) , GetDir ( building ) , GetNation ( building ) , 1 ) ;
9093: LD_ADDR_VAR 0 6
9097: PUSH
9098: LD_VAR 0 2
9102: PPUSH
9103: CALL_OW 266
9107: PPUSH
9108: LD_VAR 0 2
9112: PPUSH
9113: CALL_OW 250
9117: PPUSH
9118: LD_VAR 0 2
9122: PPUSH
9123: CALL_OW 251
9127: PPUSH
9128: LD_VAR 0 2
9132: PPUSH
9133: CALL_OW 254
9137: PPUSH
9138: LD_VAR 0 2
9142: PPUSH
9143: CALL_OW 248
9147: PPUSH
9148: LD_INT 1
9150: PPUSH
9151: CALL 50366 0 6
9155: ST_TO_ADDR
// if not entrance then
9156: LD_VAR 0 6
9160: NOT
9161: IFFALSE 9165
// exit ;
9163: GO 9279
// for i in entrance do
9165: LD_ADDR_VAR 0 5
9169: PUSH
9170: LD_VAR 0 6
9174: PUSH
9175: FOR_IN
9176: IFFALSE 9277
// begin if not distance then
9178: LD_VAR 0 3
9182: NOT
9183: IFFALSE 9228
// begin if IsAt ( unit , i [ 1 ] , i [ 2 ] ) then
9185: LD_VAR 0 1
9189: PPUSH
9190: LD_VAR 0 5
9194: PUSH
9195: LD_INT 1
9197: ARRAY
9198: PPUSH
9199: LD_VAR 0 5
9203: PUSH
9204: LD_INT 2
9206: ARRAY
9207: PPUSH
9208: CALL_OW 307
9212: IFFALSE 9226
// begin result := true ;
9214: LD_ADDR_VAR 0 4
9218: PUSH
9219: LD_INT 1
9221: ST_TO_ADDR
// exit ;
9222: POP
9223: POP
9224: GO 9279
// end ; end else
9226: GO 9275
// begin if GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) <= distance then
9228: LD_VAR 0 1
9232: PPUSH
9233: LD_VAR 0 5
9237: PUSH
9238: LD_INT 1
9240: ARRAY
9241: PPUSH
9242: LD_VAR 0 5
9246: PUSH
9247: LD_INT 2
9249: ARRAY
9250: PPUSH
9251: CALL_OW 297
9255: PUSH
9256: LD_VAR 0 3
9260: LESSEQUAL
9261: IFFALSE 9275
// begin result := true ;
9263: LD_ADDR_VAR 0 4
9267: PUSH
9268: LD_INT 1
9270: ST_TO_ADDR
// exit ;
9271: POP
9272: POP
9273: GO 9279
// end ; end ; end ;
9275: GO 9175
9277: POP
9278: POP
// end ;
9279: LD_VAR 0 4
9283: RET
// export function CanSpot ( unit , unit2 ) ; var i , building ; begin
9284: LD_INT 0
9286: PPUSH
9287: PPUSH
9288: PPUSH
// result := false ;
9289: LD_ADDR_VAR 0 3
9293: PUSH
9294: LD_INT 0
9296: ST_TO_ADDR
// if not unit or not unit2 or not IsOk ( unit ) or not IsOk ( unit2 ) then
9297: LD_VAR 0 1
9301: NOT
9302: PUSH
9303: LD_VAR 0 2
9307: NOT
9308: OR
9309: PUSH
9310: LD_VAR 0 1
9314: PPUSH
9315: CALL_OW 302
9319: NOT
9320: OR
9321: PUSH
9322: LD_VAR 0 2
9326: PPUSH
9327: CALL_OW 302
9331: NOT
9332: OR
9333: IFFALSE 9337
// exit ;
9335: GO 9498
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] ] ) , unit ) ) < 8 then
9337: LD_VAR 0 1
9341: PPUSH
9342: LD_INT 81
9344: PUSH
9345: LD_VAR 0 1
9349: PPUSH
9350: CALL_OW 255
9354: PUSH
9355: EMPTY
9356: LIST
9357: LIST
9358: PUSH
9359: LD_INT 3
9361: PUSH
9362: LD_INT 21
9364: PUSH
9365: LD_INT 3
9367: PUSH
9368: EMPTY
9369: LIST
9370: LIST
9371: PUSH
9372: EMPTY
9373: LIST
9374: LIST
9375: PUSH
9376: EMPTY
9377: LIST
9378: LIST
9379: PPUSH
9380: CALL_OW 69
9384: PPUSH
9385: LD_VAR 0 1
9389: PPUSH
9390: CALL_OW 74
9394: PPUSH
9395: CALL_OW 296
9399: PUSH
9400: LD_INT 8
9402: LESS
9403: IFFALSE 9407
// exit ;
9405: GO 9498
// building := IsInUnit ( unit2 ) ;
9407: LD_ADDR_VAR 0 5
9411: PUSH
9412: LD_VAR 0 2
9416: PPUSH
9417: CALL_OW 310
9421: ST_TO_ADDR
// if building then
9422: LD_VAR 0 5
9426: IFFALSE 9453
// result := IsNearbyEntrance ( unit , building , 2 ) else
9428: LD_ADDR_VAR 0 3
9432: PUSH
9433: LD_VAR 0 1
9437: PPUSH
9438: LD_VAR 0 5
9442: PPUSH
9443: LD_INT 2
9445: PPUSH
9446: CALL 9035 0 3
9450: ST_TO_ADDR
9451: GO 9498
// result := ( GetDistUnits ( unit , unit2 ) < 6 and See ( GetSide ( unit2 ) , unit ) ) ;
9453: LD_ADDR_VAR 0 3
9457: PUSH
9458: LD_VAR 0 1
9462: PPUSH
9463: LD_VAR 0 2
9467: PPUSH
9468: CALL_OW 296
9472: PUSH
9473: LD_INT 6
9475: LESS
9476: PUSH
9477: LD_VAR 0 2
9481: PPUSH
9482: CALL_OW 255
9486: PPUSH
9487: LD_VAR 0 1
9491: PPUSH
9492: CALL_OW 292
9496: AND
9497: ST_TO_ADDR
// end ;
9498: LD_VAR 0 3
9502: RET
// export function CreateNature ; var i , animal , nat_area ; begin
9503: LD_INT 0
9505: PPUSH
9506: PPUSH
9507: PPUSH
9508: PPUSH
// uc_side = 0 ;
9509: LD_ADDR_OWVAR 20
9513: PUSH
9514: LD_INT 0
9516: ST_TO_ADDR
// uc_nation = 0 ;
9517: LD_ADDR_OWVAR 21
9521: PUSH
9522: LD_INT 0
9524: ST_TO_ADDR
// nat_area := nature_area ;
9525: LD_ADDR_VAR 0 4
9529: PUSH
9530: LD_INT 24
9532: ST_TO_ADDR
// InitHc ;
9533: CALL_OW 19
// for i = 1 to 4 do
9537: LD_ADDR_VAR 0 2
9541: PUSH
9542: DOUBLE
9543: LD_INT 1
9545: DEC
9546: ST_TO_ADDR
9547: LD_INT 4
9549: PUSH
9550: FOR_TO
9551: IFFALSE 9598
// begin hc_class = 18 ;
9553: LD_ADDR_OWVAR 28
9557: PUSH
9558: LD_INT 18
9560: ST_TO_ADDR
// hc_gallery =  ;
9561: LD_ADDR_OWVAR 33
9565: PUSH
9566: LD_STRING 
9568: ST_TO_ADDR
// animal := CreateHuman ;
9569: LD_ADDR_VAR 0 3
9573: PUSH
9574: CALL_OW 44
9578: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9579: LD_VAR 0 3
9583: PPUSH
9584: LD_VAR 0 4
9588: PPUSH
9589: LD_INT 0
9591: PPUSH
9592: CALL_OW 49
// end ;
9596: GO 9550
9598: POP
9599: POP
// for i = 1 to 3 do
9600: LD_ADDR_VAR 0 2
9604: PUSH
9605: DOUBLE
9606: LD_INT 1
9608: DEC
9609: ST_TO_ADDR
9610: LD_INT 3
9612: PUSH
9613: FOR_TO
9614: IFFALSE 9708
// begin hc_class = class_apeman ;
9616: LD_ADDR_OWVAR 28
9620: PUSH
9621: LD_INT 12
9623: ST_TO_ADDR
// hc_gallery =  ;
9624: LD_ADDR_OWVAR 33
9628: PUSH
9629: LD_STRING 
9631: ST_TO_ADDR
// hc_agressivity = 0 ;
9632: LD_ADDR_OWVAR 35
9636: PUSH
9637: LD_INT 0
9639: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
9640: LD_ADDR_OWVAR 31
9644: PUSH
9645: LD_INT 1
9647: PPUSH
9648: LD_INT 3
9650: PPUSH
9651: CALL_OW 12
9655: PUSH
9656: LD_INT 1
9658: PPUSH
9659: LD_INT 3
9661: PPUSH
9662: CALL_OW 12
9666: PUSH
9667: LD_INT 0
9669: PUSH
9670: LD_INT 0
9672: PUSH
9673: EMPTY
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: ST_TO_ADDR
// animal := CreateHuman ;
9679: LD_ADDR_VAR 0 3
9683: PUSH
9684: CALL_OW 44
9688: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9689: LD_VAR 0 3
9693: PPUSH
9694: LD_VAR 0 4
9698: PPUSH
9699: LD_INT 0
9701: PPUSH
9702: CALL_OW 49
// end ;
9706: GO 9613
9708: POP
9709: POP
// for i = 1 to 3 do
9710: LD_ADDR_VAR 0 2
9714: PUSH
9715: DOUBLE
9716: LD_INT 1
9718: DEC
9719: ST_TO_ADDR
9720: LD_INT 3
9722: PUSH
9723: FOR_TO
9724: IFFALSE 9771
// begin hc_class = 13 ;
9726: LD_ADDR_OWVAR 28
9730: PUSH
9731: LD_INT 13
9733: ST_TO_ADDR
// hc_gallery =  ;
9734: LD_ADDR_OWVAR 33
9738: PUSH
9739: LD_STRING 
9741: ST_TO_ADDR
// animal := CreateHuman ;
9742: LD_ADDR_VAR 0 3
9746: PUSH
9747: CALL_OW 44
9751: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9752: LD_VAR 0 3
9756: PPUSH
9757: LD_VAR 0 4
9761: PPUSH
9762: LD_INT 0
9764: PPUSH
9765: CALL_OW 49
// end ;
9769: GO 9723
9771: POP
9772: POP
// for i = 1 to 3 do
9773: LD_ADDR_VAR 0 2
9777: PUSH
9778: DOUBLE
9779: LD_INT 1
9781: DEC
9782: ST_TO_ADDR
9783: LD_INT 3
9785: PUSH
9786: FOR_TO
9787: IFFALSE 9832
// begin hc_class = 20 ;
9789: LD_ADDR_OWVAR 28
9793: PUSH
9794: LD_INT 20
9796: ST_TO_ADDR
// hc_gallery =  ;
9797: LD_ADDR_OWVAR 33
9801: PUSH
9802: LD_STRING 
9804: ST_TO_ADDR
// animal := CreateHuman ;
9805: LD_ADDR_VAR 0 3
9809: PUSH
9810: CALL_OW 44
9814: ST_TO_ADDR
// PlaceUnitArea ( animal , lake_area , false ) ;
9815: LD_VAR 0 3
9819: PPUSH
9820: LD_INT 4
9822: PPUSH
9823: LD_INT 0
9825: PPUSH
9826: CALL_OW 49
// end ;
9830: GO 9786
9832: POP
9833: POP
// end ; end_of_file
9834: LD_VAR 0 1
9838: RET
// export function Action ; begin
9839: LD_INT 0
9841: PPUSH
// InGameOn ;
9842: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
9846: LD_EXP 14
9850: PPUSH
9851: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
9855: LD_EXP 14
9859: PPUSH
9860: LD_STRING D1-JMM-1
9862: PPUSH
9863: CALL_OW 88
// Say ( Roth , D1-Roth-1 ) ;
9867: LD_EXP 15
9871: PPUSH
9872: LD_STRING D1-Roth-1
9874: PPUSH
9875: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
9879: LD_EXP 14
9883: PPUSH
9884: LD_STRING D1-JMM-2
9886: PPUSH
9887: CALL_OW 88
// Say ( Roth , D1-Roth-2 ) ;
9891: LD_EXP 15
9895: PPUSH
9896: LD_STRING D1-Roth-2
9898: PPUSH
9899: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9903: LD_EXP 14
9907: PPUSH
9908: LD_STRING D1-JMM-3
9910: PPUSH
9911: CALL_OW 88
// Say ( Roth , D1-Roth-3 ) ;
9915: LD_EXP 15
9919: PPUSH
9920: LD_STRING D1-Roth-3
9922: PPUSH
9923: CALL_OW 88
// ComInvisible ( Roth ) ;
9927: LD_EXP 15
9931: PPUSH
9932: CALL_OW 152
// wait ( 0 0$1.3 ) ;
9936: LD_INT 46
9938: PPUSH
9939: CALL_OW 67
// Say ( JMM , D1-JMM-4 ) ;
9943: LD_EXP 14
9947: PPUSH
9948: LD_STRING D1-JMM-4
9950: PPUSH
9951: CALL_OW 88
// wait ( 0 0$0.3 ) ;
9955: LD_INT 10
9957: PPUSH
9958: CALL_OW 67
// ComTurnUnit ( Roth , JMM ) ;
9962: LD_EXP 15
9966: PPUSH
9967: LD_EXP 14
9971: PPUSH
9972: CALL_OW 119
// Say ( JMM , D1-JMM-4a ) ;
9976: LD_EXP 14
9980: PPUSH
9981: LD_STRING D1-JMM-4a
9983: PPUSH
9984: CALL_OW 88
// Say ( Roth , D1-Roth-4 ) ;
9988: LD_EXP 15
9992: PPUSH
9993: LD_STRING D1-Roth-4
9995: PPUSH
9996: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
10000: LD_EXP 14
10004: PPUSH
10005: LD_STRING D1-JMM-5
10007: PPUSH
10008: CALL_OW 88
// Say ( Roth , D1-Roth-5 ) ;
10012: LD_EXP 15
10016: PPUSH
10017: LD_STRING D1-Roth-5
10019: PPUSH
10020: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
10024: LD_EXP 14
10028: PPUSH
10029: LD_STRING D1-JMM-6
10031: PPUSH
10032: CALL_OW 88
// Say ( Roth , D1-Roth-6 ) ;
10036: LD_EXP 15
10040: PPUSH
10041: LD_STRING D1-Roth-6
10043: PPUSH
10044: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
10048: LD_EXP 14
10052: PPUSH
10053: LD_STRING D1-JMM-7
10055: PPUSH
10056: CALL_OW 88
// ComMoveXY ( Powell , GetX ( JMM ) , GetY ( JMM ) ) ;
10060: LD_EXP 16
10064: PPUSH
10065: LD_EXP 14
10069: PPUSH
10070: CALL_OW 250
10074: PPUSH
10075: LD_EXP 14
10079: PPUSH
10080: CALL_OW 251
10084: PPUSH
10085: CALL_OW 111
// Say ( Roth , D1-Roth-7 ) ;
10089: LD_EXP 15
10093: PPUSH
10094: LD_STRING D1-Roth-7
10096: PPUSH
10097: CALL_OW 88
// repeat wait ( 0 0$0.3 ) ;
10101: LD_INT 10
10103: PPUSH
10104: CALL_OW 67
// until GetDistUnits ( Powell , JMM ) < 6 ;
10108: LD_EXP 16
10112: PPUSH
10113: LD_EXP 14
10117: PPUSH
10118: CALL_OW 296
10122: PUSH
10123: LD_INT 6
10125: LESS
10126: IFFALSE 10101
// ComTurnUnit ( Powell , JMM ) ;
10128: LD_EXP 16
10132: PPUSH
10133: LD_EXP 14
10137: PPUSH
10138: CALL_OW 119
// Say ( Powell , D1-Pow-7 ) ;
10142: LD_EXP 16
10146: PPUSH
10147: LD_STRING D1-Pow-7
10149: PPUSH
10150: CALL_OW 88
// ComTurnUnit ( JMM , Powell ) ;
10154: LD_EXP 14
10158: PPUSH
10159: LD_EXP 16
10163: PPUSH
10164: CALL_OW 119
// ComTurnUnit ( Roth , Powell ) ;
10168: LD_EXP 15
10172: PPUSH
10173: LD_EXP 16
10177: PPUSH
10178: CALL_OW 119
// Say ( JMM , D1-JMM-8 ) ;
10182: LD_EXP 14
10186: PPUSH
10187: LD_STRING D1-JMM-8
10189: PPUSH
10190: CALL_OW 88
// Say ( Powell , D1-Pow-8 ) ;
10194: LD_EXP 16
10198: PPUSH
10199: LD_STRING D1-Pow-8
10201: PPUSH
10202: CALL_OW 88
// Say ( JMM , D1-JMM-9 ) ;
10206: LD_EXP 14
10210: PPUSH
10211: LD_STRING D1-JMM-9
10213: PPUSH
10214: CALL_OW 88
// ComMoveXY ( Powell , 124 , 61 ) ;
10218: LD_EXP 16
10222: PPUSH
10223: LD_INT 124
10225: PPUSH
10226: LD_INT 61
10228: PPUSH
10229: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10233: LD_INT 35
10235: PPUSH
10236: CALL_OW 67
// until GetDistUnits ( JMM , Powell ) > 6 ;
10240: LD_EXP 14
10244: PPUSH
10245: LD_EXP 16
10249: PPUSH
10250: CALL_OW 296
10254: PUSH
10255: LD_INT 6
10257: GREATER
10258: IFFALSE 10233
// SayRadio ( Powell , D1-Pow-9 ) ;
10260: LD_EXP 16
10264: PPUSH
10265: LD_STRING D1-Pow-9
10267: PPUSH
10268: CALL_OW 94
// RemoveUnit ( Powell ) ;
10272: LD_EXP 16
10276: PPUSH
10277: CALL_OW 64
// PlaceHumanInUnit ( Powell , ambar0 ) ;
10281: LD_EXP 16
10285: PPUSH
10286: LD_INT 18
10288: PPUSH
10289: CALL_OW 52
// if Joan and not Joan in selected then
10293: LD_EXP 36
10297: PUSH
10298: LD_EXP 36
10302: PUSH
10303: LD_EXP 3
10307: IN
10308: NOT
10309: AND
10310: IFFALSE 10324
// SayRadio ( Joan , D1-Joan-9 ) ;
10312: LD_EXP 36
10316: PPUSH
10317: LD_STRING D1-Joan-9
10319: PPUSH
10320: CALL_OW 94
// ComTurnUnit ( Roth , JMM ) ;
10324: LD_EXP 15
10328: PPUSH
10329: LD_EXP 14
10333: PPUSH
10334: CALL_OW 119
// ComTurnUnit ( JMM , Roth ) ;
10338: LD_EXP 14
10342: PPUSH
10343: LD_EXP 15
10347: PPUSH
10348: CALL_OW 119
// Say ( Roth , D1-Roth-9 ) ;
10352: LD_EXP 15
10356: PPUSH
10357: LD_STRING D1-Roth-9
10359: PPUSH
10360: CALL_OW 88
// Say ( JMM , D1-JMM-10 ) ;
10364: LD_EXP 14
10368: PPUSH
10369: LD_STRING D1-JMM-10
10371: PPUSH
10372: CALL_OW 88
// InGameOff ;
10376: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
10380: LD_STRING M1
10382: PPUSH
10383: CALL_OW 337
// if Difficulty < 3 then
10387: LD_OWVAR 67
10391: PUSH
10392: LD_INT 3
10394: LESS
10395: IFFALSE 10407
// ChangeSideFog ( 4 , 7 ) ;
10397: LD_INT 4
10399: PPUSH
10400: LD_INT 7
10402: PPUSH
10403: CALL_OW 343
// ToLua ( enableBioCharacter(BIO_ROTH) ) ;
10407: LD_STRING enableBioCharacter(BIO_ROTH)
10409: PPUSH
10410: CALL_OW 559
// SaveForQuickRestart ;
10414: CALL_OW 22
// SetAttitude ( 7 , 1 , att_enemy , true ) ;
10418: LD_INT 7
10420: PPUSH
10421: LD_INT 1
10423: PPUSH
10424: LD_INT 2
10426: PPUSH
10427: LD_INT 1
10429: PPUSH
10430: CALL_OW 80
// wait ( 0 0$3 ) ;
10434: LD_INT 105
10436: PPUSH
10437: CALL_OW 67
// ComMoveXY ( Roth , 124 , 18 ) ;
10441: LD_EXP 15
10445: PPUSH
10446: LD_INT 124
10448: PPUSH
10449: LD_INT 18
10451: PPUSH
10452: CALL_OW 111
// AddComInvisible ( Roth ) ;
10456: LD_EXP 15
10460: PPUSH
10461: CALL_OW 212
// wait ( 0 0$30 ) ;
10465: LD_INT 1050
10467: PPUSH
10468: CALL_OW 67
// AddComWait ( Roth , 1 1$00 ) ;
10472: LD_EXP 15
10476: PPUSH
10477: LD_INT 2100
10479: PPUSH
10480: CALL_OW 202
// AddComMoveXY ( Roth , 156 , 20 ) ;
10484: LD_EXP 15
10488: PPUSH
10489: LD_INT 156
10491: PPUSH
10492: LD_INT 20
10494: PPUSH
10495: CALL_OW 171
// AddComMoveXY ( Roth , 178 , 42 ) ;
10499: LD_EXP 15
10503: PPUSH
10504: LD_INT 178
10506: PPUSH
10507: LD_INT 42
10509: PPUSH
10510: CALL_OW 171
// AddComInvisible ( Roth ) ;
10514: LD_EXP 15
10518: PPUSH
10519: CALL_OW 212
// end ;
10523: LD_VAR 0 1
10527: RET
// every 0 0$1 do var i , tmp ;
10528: GO 10530
10530: DISABLE
10531: LD_INT 0
10533: PPUSH
10534: PPUSH
// begin tmp := selected union friends ;
10535: LD_ADDR_VAR 0 2
10539: PUSH
10540: LD_EXP 3
10544: PUSH
10545: LD_EXP 4
10549: UNION
10550: ST_TO_ADDR
// if gamma_commander = 1 then
10551: LD_EXP 10
10555: PUSH
10556: LD_INT 1
10558: EQUAL
10559: IFFALSE 10577
// tmp := tmp union Donaldson ;
10561: LD_ADDR_VAR 0 2
10565: PUSH
10566: LD_VAR 0 2
10570: PUSH
10571: LD_EXP 24
10575: UNION
10576: ST_TO_ADDR
// if gamma_commander = 2 then
10577: LD_EXP 10
10581: PUSH
10582: LD_INT 2
10584: EQUAL
10585: IFFALSE 10603
// tmp := tmp union Brown ;
10587: LD_ADDR_VAR 0 2
10591: PUSH
10592: LD_VAR 0 2
10596: PUSH
10597: LD_EXP 28
10601: UNION
10602: ST_TO_ADDR
// if not tmp then
10603: LD_VAR 0 2
10607: NOT
10608: IFFALSE 10612
// exit ;
10610: GO 10684
// repeat wait ( 0 0$1 ) ;
10612: LD_INT 35
10614: PPUSH
10615: CALL_OW 67
// for i in tmp do
10619: LD_ADDR_VAR 0 1
10623: PUSH
10624: LD_VAR 0 2
10628: PUSH
10629: FOR_IN
10630: IFFALSE 10675
// if CanSpot ( JMM , i ) then
10632: LD_EXP 14
10636: PPUSH
10637: LD_VAR 0 1
10641: PPUSH
10642: CALL 9284 0 2
10646: IFFALSE 10673
// begin tmp := tmp diff i ;
10648: LD_ADDR_VAR 0 2
10652: PUSH
10653: LD_VAR 0 2
10657: PUSH
10658: LD_VAR 0 1
10662: DIFF
10663: ST_TO_ADDR
// Spot ( i ) ;
10664: LD_VAR 0 1
10668: PPUSH
10669: CALL 10687 0 1
// end ;
10673: GO 10629
10675: POP
10676: POP
// until not tmp ;
10677: LD_VAR 0 2
10681: NOT
10682: IFFALSE 10612
// end ;
10684: PPOPN 2
10686: END
// export function Spot ( unit ) ; var building , side , joined ; begin
10687: LD_INT 0
10689: PPUSH
10690: PPUSH
10691: PPUSH
10692: PPUSH
// if not unit or GetSide ( unit ) <> 4 or IsSleeping ( unit ) or not IsOk ( unit ) then
10693: LD_VAR 0 1
10697: NOT
10698: PUSH
10699: LD_VAR 0 1
10703: PPUSH
10704: CALL_OW 255
10708: PUSH
10709: LD_INT 4
10711: NONEQUAL
10712: OR
10713: PUSH
10714: LD_VAR 0 1
10718: PPUSH
10719: CALL_OW 555
10723: OR
10724: PUSH
10725: LD_VAR 0 1
10729: PPUSH
10730: CALL_OW 302
10734: NOT
10735: OR
10736: IFFALSE 10740
// exit ;
10738: GO 12622
// InGameOn ;
10740: CALL_OW 8
// side := 7 ;
10744: LD_ADDR_VAR 0 4
10748: PUSH
10749: LD_INT 7
10751: ST_TO_ADDR
// joined := false ;
10752: LD_ADDR_VAR 0 5
10756: PUSH
10757: LD_INT 0
10759: ST_TO_ADDR
// building := IsInUnit ( unit ) ;
10760: LD_ADDR_VAR 0 3
10764: PUSH
10765: LD_VAR 0 1
10769: PPUSH
10770: CALL_OW 310
10774: ST_TO_ADDR
// if building then
10775: LD_VAR 0 3
10779: IFFALSE 10838
// begin SetSide ( JMM , GetSide ( unit ) ) ;
10781: LD_EXP 14
10785: PPUSH
10786: LD_VAR 0 1
10790: PPUSH
10791: CALL_OW 255
10795: PPUSH
10796: CALL_OW 235
// ComEnterUnit ( JMM , building ) ;
10800: LD_EXP 14
10804: PPUSH
10805: LD_VAR 0 3
10809: PPUSH
10810: CALL_OW 120
// repeat wait ( 3 ) ;
10814: LD_INT 3
10816: PPUSH
10817: CALL_OW 67
// until IsInUnit ( JMM ) ;
10821: LD_EXP 14
10825: PPUSH
10826: CALL_OW 310
10830: IFFALSE 10814
// DialogueOn ;
10832: CALL_OW 6
// end else
10836: GO 10870
// begin ComTurnUnit ( JMM , unit ) ;
10838: LD_EXP 14
10842: PPUSH
10843: LD_VAR 0 1
10847: PPUSH
10848: CALL_OW 119
// ComTurnUnit ( unit , JMM ) ;
10852: LD_VAR 0 1
10856: PPUSH
10857: LD_EXP 14
10861: PPUSH
10862: CALL_OW 119
// DialogueOn ;
10866: CALL_OW 6
// end ; if unit = Joan then
10870: LD_VAR 0 1
10874: PUSH
10875: LD_EXP 36
10879: EQUAL
10880: IFFALSE 10990
// begin joined := true ;
10882: LD_ADDR_VAR 0 5
10886: PUSH
10887: LD_INT 1
10889: ST_TO_ADDR
// if Joan in selected then
10890: LD_EXP 36
10894: PUSH
10895: LD_EXP 3
10899: IN
10900: IFFALSE 10928
// begin Say ( Joan , D3-Joan-Joan-1 ) ;
10902: LD_EXP 36
10906: PPUSH
10907: LD_STRING D3-Joan-Joan-1
10909: PPUSH
10910: CALL_OW 88
// Say ( JMM , D3-Joan-JMM-1 ) ;
10914: LD_EXP 14
10918: PPUSH
10919: LD_STRING D3-Joan-JMM-1
10921: PPUSH
10922: CALL_OW 88
// end else
10926: GO 10988
// begin Say ( Joan , D4-Joan-Joan-1 ) ;
10928: LD_EXP 36
10932: PPUSH
10933: LD_STRING D4-Joan-Joan-1
10935: PPUSH
10936: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-1 ) ;
10940: LD_EXP 14
10944: PPUSH
10945: LD_STRING D4-Joan-JMM-1
10947: PPUSH
10948: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-2 ) ;
10952: LD_EXP 36
10956: PPUSH
10957: LD_STRING D4-Joan-Joan-2
10959: PPUSH
10960: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-2 ) ;
10964: LD_EXP 14
10968: PPUSH
10969: LD_STRING D4-Joan-JMM-2
10971: PPUSH
10972: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-3 ) ;
10976: LD_EXP 36
10980: PPUSH
10981: LD_STRING D4-Joan-Joan-3
10983: PPUSH
10984: CALL_OW 88
// end ; end else
10988: GO 12430
// if unit = Lisa then
10990: LD_VAR 0 1
10994: PUSH
10995: LD_EXP 23
10999: EQUAL
11000: IFFALSE 11192
// begin if Lisa in selected then
11002: LD_EXP 23
11006: PUSH
11007: LD_EXP 3
11011: IN
11012: IFFALSE 11125
// begin if GetSide ( Joan ) = 7 then
11014: LD_EXP 36
11018: PPUSH
11019: CALL_OW 255
11023: PUSH
11024: LD_INT 7
11026: EQUAL
11027: IFFALSE 11091
// begin Say ( Lisa , D3-LisaJ-Lisa-1 ) ;
11029: LD_EXP 23
11033: PPUSH
11034: LD_STRING D3-LisaJ-Lisa-1
11036: PPUSH
11037: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-1 ) ;
11041: LD_EXP 14
11045: PPUSH
11046: LD_STRING D3-LisaJ-JMM-1
11048: PPUSH
11049: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-2 ) ;
11053: LD_EXP 23
11057: PPUSH
11058: LD_STRING D3-LisaJ-Lisa-2
11060: PPUSH
11061: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-2 ) ;
11065: LD_EXP 14
11069: PPUSH
11070: LD_STRING D3-LisaJ-JMM-2
11072: PPUSH
11073: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-3 ) ;
11077: LD_EXP 23
11081: PPUSH
11082: LD_STRING D3-LisaJ-Lisa-3
11084: PPUSH
11085: CALL_OW 88
// end else
11089: GO 11123
// begin Say ( Lisa , D3-LisaL-Lisa-1 ) ;
11091: LD_EXP 23
11095: PPUSH
11096: LD_STRING D3-LisaL-Lisa-1
11098: PPUSH
11099: CALL_OW 88
// Say ( JMM , D3-LisaL-JMM-1 ) ;
11103: LD_EXP 14
11107: PPUSH
11108: LD_STRING D3-LisaL-JMM-1
11110: PPUSH
11111: CALL_OW 88
// joined := true ;
11115: LD_ADDR_VAR 0 5
11119: PUSH
11120: LD_INT 1
11122: ST_TO_ADDR
// end ; end else
11123: GO 11190
// begin if GetSide ( Joan ) = 7 then
11125: LD_EXP 36
11129: PPUSH
11130: CALL_OW 255
11134: PUSH
11135: LD_INT 7
11137: EQUAL
11138: IFFALSE 11178
// begin Say ( Lisa , D4-LisaJ-Lisa-1 ) ;
11140: LD_EXP 23
11144: PPUSH
11145: LD_STRING D4-LisaJ-Lisa-1
11147: PPUSH
11148: CALL_OW 88
// Say ( JMM , D4-LisaJ-JMM-1 ) ;
11152: LD_EXP 14
11156: PPUSH
11157: LD_STRING D4-LisaJ-JMM-1
11159: PPUSH
11160: CALL_OW 88
// Say ( Lisa , D4-LisaJ-Lisa-2 ) ;
11164: LD_EXP 23
11168: PPUSH
11169: LD_STRING D4-LisaJ-Lisa-2
11171: PPUSH
11172: CALL_OW 88
// end else
11176: GO 11190
// begin Say ( Lisa , D4-LisaL-Lisa-1 ) ;
11178: LD_EXP 23
11182: PPUSH
11183: LD_STRING D4-LisaL-Lisa-1
11185: PPUSH
11186: CALL_OW 88
// end ; end ; end else
11190: GO 12430
// if unit = Frank then
11192: LD_VAR 0 1
11196: PUSH
11197: LD_EXP 33
11201: EQUAL
11202: IFFALSE 11342
// begin joined := true ;
11204: LD_ADDR_VAR 0 5
11208: PUSH
11209: LD_INT 1
11211: ST_TO_ADDR
// if Frank in selected then
11212: LD_EXP 33
11216: PUSH
11217: LD_EXP 3
11221: IN
11222: IFFALSE 11292
// begin Say ( Frank , D3-Frank-Frank-1 ) ;
11224: LD_EXP 33
11228: PPUSH
11229: LD_STRING D3-Frank-Frank-1
11231: PPUSH
11232: CALL_OW 88
// Say ( JMM , D3-Frank-JMM-1 ) ;
11236: LD_EXP 14
11240: PPUSH
11241: LD_STRING D3-Frank-JMM-1
11243: PPUSH
11244: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-2 ) ;
11248: LD_EXP 33
11252: PPUSH
11253: LD_STRING D3-Frank-Frank-2
11255: PPUSH
11256: CALL_OW 88
// if reached_lab then
11260: LD_EXP 5
11264: IFFALSE 11290
// begin Say ( JMM , D3-Frank-JMM-2 ) ;
11266: LD_EXP 14
11270: PPUSH
11271: LD_STRING D3-Frank-JMM-2
11273: PPUSH
11274: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-3 ) ;
11278: LD_EXP 33
11282: PPUSH
11283: LD_STRING D3-Frank-Frank-3
11285: PPUSH
11286: CALL_OW 88
// end ; end else
11290: GO 11340
// begin Say ( Frank , D4-Frank-Frank-1 ) ;
11292: LD_EXP 33
11296: PPUSH
11297: LD_STRING D4-Frank-Frank-1
11299: PPUSH
11300: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-1 ) ;
11304: LD_EXP 14
11308: PPUSH
11309: LD_STRING D4-Frank-JMM-1
11311: PPUSH
11312: CALL_OW 88
// Say ( Frank , D4-Frank-Frank-2 ) ;
11316: LD_EXP 33
11320: PPUSH
11321: LD_STRING D4-Frank-Frank-2
11323: PPUSH
11324: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-2 ) ;
11328: LD_EXP 14
11332: PPUSH
11333: LD_STRING D4-Frank-JMM-2
11335: PPUSH
11336: CALL_OW 88
// end ; end else
11340: GO 12430
// if unit = Brown then
11342: LD_VAR 0 1
11346: PUSH
11347: LD_EXP 28
11351: EQUAL
11352: IFFALSE 11448
// begin if Brown in selected or gamma_commander = 2 then
11354: LD_EXP 28
11358: PUSH
11359: LD_EXP 3
11363: IN
11364: PUSH
11365: LD_EXP 10
11369: PUSH
11370: LD_INT 2
11372: EQUAL
11373: OR
11374: IFFALSE 11410
// begin Say ( Brown , D3-Soldier1-Sol1-1 ) ;
11376: LD_EXP 28
11380: PPUSH
11381: LD_STRING D3-Soldier1-Sol1-1
11383: PPUSH
11384: CALL_OW 88
// Say ( JMM , D6-JMM-Brown-1 ) ;
11388: LD_EXP 14
11392: PPUSH
11393: LD_STRING D6-JMM-Brown-1
11395: PPUSH
11396: CALL_OW 88
// joined := true ;
11400: LD_ADDR_VAR 0 5
11404: PUSH
11405: LD_INT 1
11407: ST_TO_ADDR
// end else
11408: GO 11446
// begin Say ( Brown , D4-Soldier2-Sol1-1 ) ;
11410: LD_EXP 28
11414: PPUSH
11415: LD_STRING D4-Soldier2-Sol1-1
11417: PPUSH
11418: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11422: LD_EXP 14
11426: PPUSH
11427: LD_STRING D4-Soldier1-JMM-1
11429: PPUSH
11430: CALL_OW 88
// Say ( Brown , D4-Soldier2-Sol1-2 ) ;
11434: LD_EXP 28
11438: PPUSH
11439: LD_STRING D4-Soldier2-Sol1-2
11441: PPUSH
11442: CALL_OW 88
// end ; end else
11446: GO 12430
// if unit = Donaldson then
11448: LD_VAR 0 1
11452: PUSH
11453: LD_EXP 24
11457: EQUAL
11458: IFFALSE 11554
// begin if Donaldson in selected or gamma_commander = 1 then
11460: LD_EXP 24
11464: PUSH
11465: LD_EXP 3
11469: IN
11470: PUSH
11471: LD_EXP 10
11475: PUSH
11476: LD_INT 1
11478: EQUAL
11479: OR
11480: IFFALSE 11516
// begin Say ( Donaldson , D3-Soldier2-FSol2-1 ) ;
11482: LD_EXP 24
11486: PPUSH
11487: LD_STRING D3-Soldier2-FSol2-1
11489: PPUSH
11490: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11494: LD_EXP 14
11498: PPUSH
11499: LD_STRING D3-Soldier2-JMM-1
11501: PPUSH
11502: CALL_OW 88
// joined := true ;
11506: LD_ADDR_VAR 0 5
11510: PUSH
11511: LD_INT 1
11513: ST_TO_ADDR
// end else
11514: GO 11552
// begin Say ( Donaldson , D4-Soldier1-FSol1-1 ) ;
11516: LD_EXP 24
11520: PPUSH
11521: LD_STRING D4-Soldier1-FSol1-1
11523: PPUSH
11524: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11528: LD_EXP 14
11532: PPUSH
11533: LD_STRING D4-Soldier1-JMM-1
11535: PPUSH
11536: CALL_OW 88
// Say ( Donaldson , D4-Soldier1-FSol1-2 ) ;
11540: LD_EXP 24
11544: PPUSH
11545: LD_STRING D4-Soldier1-FSol1-2
11547: PPUSH
11548: CALL_OW 88
// end ; end else
11552: GO 12430
// if unit = Cyrus then
11554: LD_VAR 0 1
11558: PUSH
11559: LD_EXP 26
11563: EQUAL
11564: IFFALSE 11638
// begin if Cyrus in selected then
11566: LD_EXP 26
11570: PUSH
11571: LD_EXP 3
11575: IN
11576: IFFALSE 11612
// begin Say ( Cyrus , D3-Cyrus-Cyrus-1 ) ;
11578: LD_EXP 26
11582: PPUSH
11583: LD_STRING D3-Cyrus-Cyrus-1
11585: PPUSH
11586: CALL_OW 88
// Say ( JMM , D3-Cyrus-JMM-1 ) ;
11590: LD_EXP 14
11594: PPUSH
11595: LD_STRING D3-Cyrus-JMM-1
11597: PPUSH
11598: CALL_OW 88
// joined := true ;
11602: LD_ADDR_VAR 0 5
11606: PUSH
11607: LD_INT 1
11609: ST_TO_ADDR
// end else
11610: GO 11636
// begin Say ( Cyrus , D4-Cyrus-Cyrus-1 ) ;
11612: LD_EXP 26
11616: PPUSH
11617: LD_STRING D4-Cyrus-Cyrus-1
11619: PPUSH
11620: CALL_OW 88
// Say ( JMM , D4-Cyrus-JMM-1 ) ;
11624: LD_EXP 14
11628: PPUSH
11629: LD_STRING D4-Cyrus-JMM-1
11631: PPUSH
11632: CALL_OW 88
// end ; end else
11636: GO 12430
// if unit = Bobby then
11638: LD_VAR 0 1
11642: PUSH
11643: LD_EXP 25
11647: EQUAL
11648: IFFALSE 11734
// begin if Bobby in selected then
11650: LD_EXP 25
11654: PUSH
11655: LD_EXP 3
11659: IN
11660: IFFALSE 11696
// begin Say ( Bobby , D3-Bobby-Bobby-1 ) ;
11662: LD_EXP 25
11666: PPUSH
11667: LD_STRING D3-Bobby-Bobby-1
11669: PPUSH
11670: CALL_OW 88
// Say ( JMM , D3-Bobby-JMM-1 ) ;
11674: LD_EXP 14
11678: PPUSH
11679: LD_STRING D3-Bobby-JMM-1
11681: PPUSH
11682: CALL_OW 88
// joined := true ;
11686: LD_ADDR_VAR 0 5
11690: PUSH
11691: LD_INT 1
11693: ST_TO_ADDR
// end else
11694: GO 11732
// begin Say ( Bobby , D4-Bobby-Bobby-1 ) ;
11696: LD_EXP 25
11700: PPUSH
11701: LD_STRING D4-Bobby-Bobby-1
11703: PPUSH
11704: CALL_OW 88
// Say ( JMM , D4-Bobby-JMM-1 ) ;
11708: LD_EXP 14
11712: PPUSH
11713: LD_STRING D4-Bobby-JMM-1
11715: PPUSH
11716: CALL_OW 88
// Say ( Bobby , D4-Bobby-Bobby-2 ) ;
11720: LD_EXP 25
11724: PPUSH
11725: LD_STRING D4-Bobby-Bobby-2
11727: PPUSH
11728: CALL_OW 88
// end ; end else
11732: GO 12430
// if unit = Cornel then
11734: LD_VAR 0 1
11738: PUSH
11739: LD_EXP 31
11743: EQUAL
11744: IFFALSE 11842
// begin if Cornel in selected then
11746: LD_EXP 31
11750: PUSH
11751: LD_EXP 3
11755: IN
11756: IFFALSE 11804
// begin Say ( Cornel , D3-Mark-Corn-1 ) ;
11758: LD_EXP 31
11762: PPUSH
11763: LD_STRING D3-Mark-Corn-1
11765: PPUSH
11766: CALL_OW 88
// Say ( JMM , D3-Mark-JMM-1 ) ;
11770: LD_EXP 14
11774: PPUSH
11775: LD_STRING D3-Mark-JMM-1
11777: PPUSH
11778: CALL_OW 88
// Say ( Cornel , D3-Mark-Corn-2 ) ;
11782: LD_EXP 31
11786: PPUSH
11787: LD_STRING D3-Mark-Corn-2
11789: PPUSH
11790: CALL_OW 88
// joined := true ;
11794: LD_ADDR_VAR 0 5
11798: PUSH
11799: LD_INT 1
11801: ST_TO_ADDR
// end else
11802: GO 11840
// begin Say ( Cornel , D4-Mark-Corn-1 ) ;
11804: LD_EXP 31
11808: PPUSH
11809: LD_STRING D4-Mark-Corn-1
11811: PPUSH
11812: CALL_OW 88
// Say ( JMM , D4-Mark-JMM-1 ) ;
11816: LD_EXP 14
11820: PPUSH
11821: LD_STRING D4-Mark-JMM-1
11823: PPUSH
11824: CALL_OW 88
// Say ( Cornel , D4-Mark-Corn-2 ) ;
11828: LD_EXP 31
11832: PPUSH
11833: LD_STRING D4-Mark-Corn-2
11835: PPUSH
11836: CALL_OW 88
// end ; end else
11840: GO 12430
// if unit = Gary then
11842: LD_VAR 0 1
11846: PUSH
11847: LD_EXP 32
11851: EQUAL
11852: IFFALSE 11936
// begin if Gary in selected then
11854: LD_EXP 32
11858: PUSH
11859: LD_EXP 3
11863: IN
11864: IFFALSE 11900
// begin Say ( Gary , D3-Gary-Gary-1 ) ;
11866: LD_EXP 32
11870: PPUSH
11871: LD_STRING D3-Gary-Gary-1
11873: PPUSH
11874: CALL_OW 88
// Say ( JMM , D3-Gary-JMM-1 ) ;
11878: LD_EXP 14
11882: PPUSH
11883: LD_STRING D3-Gary-JMM-1
11885: PPUSH
11886: CALL_OW 88
// joined := true ;
11890: LD_ADDR_VAR 0 5
11894: PUSH
11895: LD_INT 1
11897: ST_TO_ADDR
// end else
11898: GO 11934
// begin Say ( Gary , D4-Gary-Gary-1 ) ;
11900: LD_EXP 32
11904: PPUSH
11905: LD_STRING D4-Gary-Gary-1
11907: PPUSH
11908: CALL_OW 88
// SetSide ( Gary , 1 ) ;
11912: LD_EXP 32
11916: PPUSH
11917: LD_INT 1
11919: PPUSH
11920: CALL_OW 235
// DialogueOff ;
11924: CALL_OW 7
// InGameOff ;
11928: CALL_OW 9
// exit ;
11932: GO 12622
// end ; end else
11934: GO 12430
// if unit = Kikuchi then
11936: LD_VAR 0 1
11940: PUSH
11941: LD_EXP 34
11945: EQUAL
11946: IFFALSE 12030
// begin if Kikuchi in selected then
11948: LD_EXP 34
11952: PUSH
11953: LD_EXP 3
11957: IN
11958: IFFALSE 11994
// begin Say ( Kikuchi , D3-Yamako-Yam-1 ) ;
11960: LD_EXP 34
11964: PPUSH
11965: LD_STRING D3-Yamako-Yam-1
11967: PPUSH
11968: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11972: LD_EXP 14
11976: PPUSH
11977: LD_STRING D3-Soldier2-JMM-1
11979: PPUSH
11980: CALL_OW 88
// joined := true ;
11984: LD_ADDR_VAR 0 5
11988: PUSH
11989: LD_INT 1
11991: ST_TO_ADDR
// end else
11992: GO 12028
// begin Say ( Kikuchi , D4-Yamako-Yam-1 ) ;
11994: LD_EXP 34
11998: PPUSH
11999: LD_STRING D4-Yamako-Yam-1
12001: PPUSH
12002: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
12006: LD_EXP 34
12010: PPUSH
12011: LD_INT 1
12013: PPUSH
12014: CALL_OW 235
// DialogueOff ;
12018: CALL_OW 7
// InGameOff ;
12022: CALL_OW 9
// exit ;
12026: GO 12622
// end ; end else
12028: GO 12430
// if unit = Gladstone then
12030: LD_VAR 0 1
12034: PUSH
12035: LD_EXP 29
12039: EQUAL
12040: IFFALSE 12114
// begin if Gladstone in selected then
12042: LD_EXP 29
12046: PUSH
12047: LD_EXP 3
12051: IN
12052: IFFALSE 12088
// begin joined := true ;
12054: LD_ADDR_VAR 0 5
12058: PUSH
12059: LD_INT 1
12061: ST_TO_ADDR
// Say ( JMM , D3-Tim-JMM-1 ) ;
12062: LD_EXP 14
12066: PPUSH
12067: LD_STRING D3-Tim-JMM-1
12069: PPUSH
12070: CALL_OW 88
// Say ( Gladstone , D3-Tim-Glad-1 ) ;
12074: LD_EXP 29
12078: PPUSH
12079: LD_STRING D3-Tim-Glad-1
12081: PPUSH
12082: CALL_OW 88
// end else
12086: GO 12112
// begin Say ( JMM , D4-Tim-JMM-1 ) ;
12088: LD_EXP 14
12092: PPUSH
12093: LD_STRING D4-Tim-JMM-1
12095: PPUSH
12096: CALL_OW 88
// Say ( Gladstone , D4-Tim-Glad-1 ) ;
12100: LD_EXP 29
12104: PPUSH
12105: LD_STRING D4-Tim-Glad-1
12107: PPUSH
12108: CALL_OW 88
// end ; end else
12112: GO 12430
// if unit = Denis then
12114: LD_VAR 0 1
12118: PUSH
12119: LD_EXP 27
12123: EQUAL
12124: IFFALSE 12160
// begin joined := true ;
12126: LD_ADDR_VAR 0 5
12130: PUSH
12131: LD_INT 1
12133: ST_TO_ADDR
// Say ( Denis , D3-Denis-Den-1 ) ;
12134: LD_EXP 27
12138: PPUSH
12139: LD_STRING D3-Denis-Den-1
12141: PPUSH
12142: CALL_OW 88
// Say ( JMM , D3-Denis-JMM-1 ) ;
12146: LD_EXP 14
12150: PPUSH
12151: LD_STRING D3-Denis-JMM-1
12153: PPUSH
12154: CALL_OW 88
// end else
12158: GO 12430
// if unit = Simms then
12160: LD_VAR 0 1
12164: PUSH
12165: LD_EXP 35
12169: EQUAL
12170: IFFALSE 12206
// begin joined := true ;
12172: LD_ADDR_VAR 0 5
12176: PUSH
12177: LD_INT 1
12179: ST_TO_ADDR
// Say ( Simms , D3-Simms-Sim-1 ) ;
12180: LD_EXP 35
12184: PPUSH
12185: LD_STRING D3-Simms-Sim-1
12187: PPUSH
12188: CALL_OW 88
// Say ( JMM , D3-Simms-JMM-1 ) ;
12192: LD_EXP 14
12196: PPUSH
12197: LD_STRING D3-Simms-JMM-1
12199: PPUSH
12200: CALL_OW 88
// end else
12204: GO 12430
// if unit = DeltaDoctor then
12206: LD_VAR 0 1
12210: PUSH
12211: LD_EXP 37
12215: EQUAL
12216: IFFALSE 12252
// begin joined := true ;
12218: LD_ADDR_VAR 0 5
12222: PUSH
12223: LD_INT 1
12225: ST_TO_ADDR
// Say ( DeltaDoctor , D3-Soldier1-Sol1-1 ) ;
12226: LD_EXP 37
12230: PPUSH
12231: LD_STRING D3-Soldier1-Sol1-1
12233: PPUSH
12234: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
12238: LD_EXP 14
12242: PPUSH
12243: LD_STRING D3-Soldier1-JMM-1
12245: PPUSH
12246: CALL_OW 88
// end else
12250: GO 12430
// begin joined := unit in selected ;
12252: LD_ADDR_VAR 0 5
12256: PUSH
12257: LD_VAR 0 1
12261: PUSH
12262: LD_EXP 3
12266: IN
12267: ST_TO_ADDR
// if joined then
12268: LD_VAR 0 5
12272: IFFALSE 12341
// begin if GetSex ( unit ) = sex_male then
12274: LD_VAR 0 1
12278: PPUSH
12279: CALL_OW 258
12283: PUSH
12284: LD_INT 1
12286: EQUAL
12287: IFFALSE 12315
// begin Say ( unit , D3-Soldier1-Sol1-1 ) ;
12289: LD_VAR 0 1
12293: PPUSH
12294: LD_STRING D3-Soldier1-Sol1-1
12296: PPUSH
12297: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
12301: LD_EXP 14
12305: PPUSH
12306: LD_STRING D3-Soldier1-JMM-1
12308: PPUSH
12309: CALL_OW 88
// end else
12313: GO 12339
// begin Say ( unit , D3-Soldier2-FSol2-1 ) ;
12315: LD_VAR 0 1
12319: PPUSH
12320: LD_STRING D3-Soldier2-FSol2-1
12322: PPUSH
12323: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
12327: LD_EXP 14
12331: PPUSH
12332: LD_STRING D3-Soldier2-JMM-1
12334: PPUSH
12335: CALL_OW 88
// end ; end else
12339: GO 12430
// begin if GetSex ( unit ) = sex_male then
12341: LD_VAR 0 1
12345: PPUSH
12346: CALL_OW 258
12350: PUSH
12351: LD_INT 1
12353: EQUAL
12354: IFFALSE 12394
// begin Say ( unit , D4-Soldier2-Sol1-1 ) ;
12356: LD_VAR 0 1
12360: PPUSH
12361: LD_STRING D4-Soldier2-Sol1-1
12363: PPUSH
12364: CALL_OW 88
// Say ( JMM , D4-Soldier2-JMM-1 ) ;
12368: LD_EXP 14
12372: PPUSH
12373: LD_STRING D4-Soldier2-JMM-1
12375: PPUSH
12376: CALL_OW 88
// Say ( unit , D4-Soldier2-Sol2-1 ) ;
12380: LD_VAR 0 1
12384: PPUSH
12385: LD_STRING D4-Soldier2-Sol2-1
12387: PPUSH
12388: CALL_OW 88
// end else
12392: GO 12430
// begin Say ( unit , D4-Soldier1-FSol1-1 ) ;
12394: LD_VAR 0 1
12398: PPUSH
12399: LD_STRING D4-Soldier1-FSol1-1
12401: PPUSH
12402: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
12406: LD_EXP 14
12410: PPUSH
12411: LD_STRING D4-Soldier1-JMM-1
12413: PPUSH
12414: CALL_OW 88
// Say ( unit , D4-Soldier1-FSol1-2 ) ;
12418: LD_VAR 0 1
12422: PPUSH
12423: LD_STRING D4-Soldier1-FSol1-2
12425: PPUSH
12426: CALL_OW 88
// end ; end ; end ; DialogueOff ;
12430: CALL_OW 7
// InGameOff ;
12434: CALL_OW 9
// if building then
12438: LD_VAR 0 3
12442: IFFALSE 12543
// begin SetSide ( JMM , side ) ;
12444: LD_EXP 14
12448: PPUSH
12449: LD_VAR 0 4
12453: PPUSH
12454: CALL_OW 235
// ComExitBuilding ( JMM ) ;
12458: LD_EXP 14
12462: PPUSH
12463: CALL_OW 122
// if joined then
12467: LD_VAR 0 5
12471: IFFALSE 12510
// begin SetSide ( unit , side ) ;
12473: LD_VAR 0 1
12477: PPUSH
12478: LD_VAR 0 4
12482: PPUSH
12483: CALL_OW 235
// SetSide ( building , 1 ) ;
12487: LD_VAR 0 3
12491: PPUSH
12492: LD_INT 1
12494: PPUSH
12495: CALL_OW 235
// ComExitBuilding ( unit ) ;
12499: LD_VAR 0 1
12503: PPUSH
12504: CALL_OW 122
// end else
12508: GO 12541
// begin wait ( 0 0$10 ) ;
12510: LD_INT 350
12512: PPUSH
12513: CALL_OW 67
// SetSide ( unit , 1 ) ;
12517: LD_VAR 0 1
12521: PPUSH
12522: LD_INT 1
12524: PPUSH
12525: CALL_OW 235
// SetSide ( building , 1 ) ;
12529: LD_VAR 0 3
12533: PPUSH
12534: LD_INT 1
12536: PPUSH
12537: CALL_OW 235
// end ; end else
12541: GO 12622
// begin ComStop ( [ JMM , unit ] ) ;
12543: LD_EXP 14
12547: PUSH
12548: LD_VAR 0 1
12552: PUSH
12553: EMPTY
12554: LIST
12555: LIST
12556: PPUSH
12557: CALL_OW 141
// if joined then
12561: LD_VAR 0 5
12565: IFFALSE 12583
// SetSide ( unit , side ) else
12567: LD_VAR 0 1
12571: PPUSH
12572: LD_VAR 0 4
12576: PPUSH
12577: CALL_OW 235
12581: GO 12622
// begin repeat wait ( 0 0$1 ) ;
12583: LD_INT 35
12585: PPUSH
12586: CALL_OW 67
// until GetDistUnits ( JMM , unit ) > 11 ;
12590: LD_EXP 14
12594: PPUSH
12595: LD_VAR 0 1
12599: PPUSH
12600: CALL_OW 296
12604: PUSH
12605: LD_INT 11
12607: GREATER
12608: IFFALSE 12583
// SetSide ( unit , 1 ) ;
12610: LD_VAR 0 1
12614: PPUSH
12615: LD_INT 1
12617: PPUSH
12618: CALL_OW 235
// end ; end ; end ;
12622: LD_VAR 0 2
12626: RET
// every 0 0$1 trigger GetDistUnits ( JMM , Mike ) < 6 and See ( 7 , Mike ) do
12627: LD_EXP 14
12631: PPUSH
12632: LD_EXP 38
12636: PPUSH
12637: CALL_OW 296
12641: PUSH
12642: LD_INT 6
12644: LESS
12645: PUSH
12646: LD_INT 7
12648: PPUSH
12649: LD_EXP 38
12653: PPUSH
12654: CALL_OW 292
12658: AND
12659: IFFALSE 12717
12661: GO 12663
12663: DISABLE
// begin DialogueOn ;
12664: CALL_OW 6
// CenterNowOnUnits ( Mike ) ;
12668: LD_EXP 38
12672: PPUSH
12673: CALL_OW 87
// Say ( JMM , D6-JMM-Mike-1 ) ;
12677: LD_EXP 14
12681: PPUSH
12682: LD_STRING D6-JMM-Mike-1
12684: PPUSH
12685: CALL_OW 88
// Say ( Mike , D6-Mike-1 ) ;
12689: LD_EXP 38
12693: PPUSH
12694: LD_STRING D6-Mike-1
12696: PPUSH
12697: CALL_OW 88
// SetSide ( Mike , 7 ) ;
12701: LD_EXP 38
12705: PPUSH
12706: LD_INT 7
12708: PPUSH
12709: CALL_OW 235
// DialogueOff ;
12713: CALL_OW 7
// end ;
12717: END
// every 0 0$01 trigger IsInUnit ( JMM ) = amlab do
12718: LD_EXP 14
12722: PPUSH
12723: CALL_OW 310
12727: PUSH
12728: LD_INT 47
12730: EQUAL
12731: IFFALSE 12799
12733: GO 12735
12735: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
12736: LD_STRING M1a
12738: PPUSH
12739: CALL_OW 337
// SetTech ( tech_Soporific , 7 , state_researched ) ;
12743: LD_INT 13
12745: PPUSH
12746: LD_INT 7
12748: PPUSH
12749: LD_INT 2
12751: PPUSH
12752: CALL_OW 322
// SetTech ( tech_SpacAnom , 7 , state_researched ) ;
12756: LD_INT 29
12758: PPUSH
12759: LD_INT 7
12761: PPUSH
12762: LD_INT 2
12764: PPUSH
12765: CALL_OW 322
// SetClass ( JMM , class_bazooker ) ;
12769: LD_EXP 14
12773: PPUSH
12774: LD_INT 9
12776: PPUSH
12777: CALL_OW 336
// can_escape := true ;
12781: LD_ADDR_EXP 6
12785: PUSH
12786: LD_INT 1
12788: ST_TO_ADDR
// SetAreaMapShow ( escape_area , 1 ) ;
12789: LD_INT 19
12791: PPUSH
12792: LD_INT 1
12794: PPUSH
12795: CALL_OW 424
// end ;
12799: END
// every 0 0$1 trigger GetLives ( Powell ) < 999 do
12800: LD_EXP 16
12804: PPUSH
12805: CALL_OW 256
12809: PUSH
12810: LD_INT 999
12812: LESS
12813: IFFALSE 12864
12815: GO 12817
12817: DISABLE
// begin enable ;
12818: ENABLE
// if HexInfo ( 25 , 48 ) = Powell then
12819: LD_INT 25
12821: PPUSH
12822: LD_INT 48
12824: PPUSH
12825: CALL_OW 428
12829: PUSH
12830: LD_EXP 16
12834: EQUAL
12835: IFFALSE 12849
// begin RemoveUnit ( Powell ) ;
12837: LD_EXP 16
12841: PPUSH
12842: CALL_OW 64
// disable ;
12846: DISABLE
// end else
12847: GO 12864
// ComMoveXY ( Powell , 25 , 48 ) ;
12849: LD_EXP 16
12853: PPUSH
12854: LD_INT 25
12856: PPUSH
12857: LD_INT 48
12859: PPUSH
12860: CALL_OW 111
// end ;
12864: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do var i ;
12865: LD_INT 22
12867: PUSH
12868: LD_INT 4
12870: PUSH
12871: EMPTY
12872: LIST
12873: LIST
12874: PUSH
12875: LD_INT 21
12877: PUSH
12878: LD_INT 1
12880: PUSH
12881: EMPTY
12882: LIST
12883: LIST
12884: PUSH
12885: LD_INT 3
12887: PUSH
12888: LD_INT 24
12890: PUSH
12891: LD_INT 990
12893: PUSH
12894: EMPTY
12895: LIST
12896: LIST
12897: PUSH
12898: EMPTY
12899: LIST
12900: LIST
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: LIST
12906: PPUSH
12907: CALL_OW 69
12911: PUSH
12912: LD_EXP 15
12916: DIFF
12917: IFFALSE 13061
12919: GO 12921
12921: DISABLE
12922: LD_INT 0
12924: PPUSH
// begin enable ;
12925: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do
12926: LD_ADDR_VAR 0 1
12930: PUSH
12931: LD_INT 22
12933: PUSH
12934: LD_INT 4
12936: PUSH
12937: EMPTY
12938: LIST
12939: LIST
12940: PUSH
12941: LD_INT 21
12943: PUSH
12944: LD_INT 1
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: PUSH
12951: LD_INT 3
12953: PUSH
12954: LD_INT 24
12956: PUSH
12957: LD_INT 990
12959: PUSH
12960: EMPTY
12961: LIST
12962: LIST
12963: PUSH
12964: EMPTY
12965: LIST
12966: LIST
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: LIST
12972: PPUSH
12973: CALL_OW 69
12977: PUSH
12978: LD_EXP 15
12982: DIFF
12983: PUSH
12984: FOR_IN
12985: IFFALSE 13059
// begin ComFree ( i ) ;
12987: LD_VAR 0 1
12991: PPUSH
12992: CALL_OW 139
// SetSide ( i , 1 ) ;
12996: LD_VAR 0 1
13000: PPUSH
13001: LD_INT 1
13003: PPUSH
13004: CALL_OW 235
// if GetDistUnits ( i , JMM ) < 14 then
13008: LD_VAR 0 1
13012: PPUSH
13013: LD_EXP 14
13017: PPUSH
13018: CALL_OW 296
13022: PUSH
13023: LD_INT 14
13025: LESS
13026: IFFALSE 13057
// ComAgressiveMove ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
13028: LD_VAR 0 1
13032: PPUSH
13033: LD_EXP 14
13037: PPUSH
13038: CALL_OW 250
13042: PPUSH
13043: LD_EXP 14
13047: PPUSH
13048: CALL_OW 251
13052: PPUSH
13053: CALL_OW 114
// end ;
13057: GO 12984
13059: POP
13060: POP
// end ;
13061: PPOPN 1
13063: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var i ;
13064: LD_INT 22
13066: PUSH
13067: LD_INT 4
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: PUSH
13074: LD_INT 34
13076: PUSH
13077: LD_INT 12
13079: PUSH
13080: EMPTY
13081: LIST
13082: LIST
13083: PUSH
13084: EMPTY
13085: LIST
13086: LIST
13087: PPUSH
13088: CALL_OW 69
13092: IFFALSE 13174
13094: GO 13096
13096: DISABLE
13097: LD_INT 0
13099: PPUSH
// begin enable ;
13100: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do
13101: LD_ADDR_VAR 0 1
13105: PUSH
13106: LD_INT 22
13108: PUSH
13109: LD_INT 4
13111: PUSH
13112: EMPTY
13113: LIST
13114: LIST
13115: PUSH
13116: LD_INT 34
13118: PUSH
13119: LD_INT 12
13121: PUSH
13122: EMPTY
13123: LIST
13124: LIST
13125: PUSH
13126: EMPTY
13127: LIST
13128: LIST
13129: PPUSH
13130: CALL_OW 69
13134: PUSH
13135: FOR_IN
13136: IFFALSE 13172
// if GetDistUnits ( i , JMM ) < 6 then
13138: LD_VAR 0 1
13142: PPUSH
13143: LD_EXP 14
13147: PPUSH
13148: CALL_OW 296
13152: PUSH
13153: LD_INT 6
13155: LESS
13156: IFFALSE 13170
// SetSide ( i , 7 ) ;
13158: LD_VAR 0 1
13162: PPUSH
13163: LD_INT 7
13165: PPUSH
13166: CALL_OW 235
13170: GO 13135
13172: POP
13173: POP
// end ;
13174: PPOPN 1
13176: END
// every 0 0$01 trigger can_escape and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) do var all_taken , tmp , m1 , m2 , m3 ;
13177: LD_EXP 6
13181: PUSH
13182: LD_INT 19
13184: PPUSH
13185: LD_INT 22
13187: PUSH
13188: LD_INT 7
13190: PUSH
13191: EMPTY
13192: LIST
13193: LIST
13194: PUSH
13195: LD_INT 21
13197: PUSH
13198: LD_INT 1
13200: PUSH
13201: EMPTY
13202: LIST
13203: LIST
13204: PUSH
13205: EMPTY
13206: LIST
13207: LIST
13208: PPUSH
13209: CALL_OW 71
13213: NOT
13214: AND
13215: PUSH
13216: LD_INT 3
13218: PPUSH
13219: CALL_OW 469
13223: NOT
13224: AND
13225: PUSH
13226: LD_INT 5
13228: PPUSH
13229: CALL_OW 469
13233: NOT
13234: AND
13235: IFFALSE 14918
13237: GO 13239
13239: DISABLE
13240: LD_INT 0
13242: PPUSH
13243: PPUSH
13244: PPUSH
13245: PPUSH
13246: PPUSH
// begin m1 := false ;
13247: LD_ADDR_VAR 0 3
13251: PUSH
13252: LD_INT 0
13254: ST_TO_ADDR
// m2 := false ;
13255: LD_ADDR_VAR 0 4
13259: PUSH
13260: LD_INT 0
13262: ST_TO_ADDR
// m3 := false ;
13263: LD_ADDR_VAR 0 5
13267: PUSH
13268: LD_INT 0
13270: ST_TO_ADDR
// all_taken := ( UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 ) ;
13271: LD_ADDR_VAR 0 1
13275: PUSH
13276: LD_EXP 3
13280: PPUSH
13281: LD_INT 22
13283: PUSH
13284: LD_INT 4
13286: PUSH
13287: EMPTY
13288: LIST
13289: LIST
13290: PUSH
13291: LD_INT 21
13293: PUSH
13294: LD_INT 1
13296: PUSH
13297: EMPTY
13298: LIST
13299: LIST
13300: PUSH
13301: EMPTY
13302: LIST
13303: LIST
13304: PPUSH
13305: CALL_OW 72
13309: PUSH
13310: LD_INT 0
13312: EQUAL
13313: ST_TO_ADDR
// if not all_taken then
13314: LD_VAR 0 1
13318: NOT
13319: IFFALSE 13460
// case Query ( Q1 ) of 1 :
13321: LD_STRING Q1
13323: PPUSH
13324: CALL_OW 97
13328: PUSH
13329: LD_INT 1
13331: DOUBLE
13332: EQUAL
13333: IFTRUE 13337
13335: GO 13448
13337: POP
// begin repeat wait ( 0 0$1 ) ;
13338: LD_INT 35
13340: PPUSH
13341: CALL_OW 67
// until UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) ;
13345: LD_EXP 3
13349: PPUSH
13350: LD_INT 22
13352: PUSH
13353: LD_INT 4
13355: PUSH
13356: EMPTY
13357: LIST
13358: LIST
13359: PUSH
13360: LD_INT 21
13362: PUSH
13363: LD_INT 1
13365: PUSH
13366: EMPTY
13367: LIST
13368: LIST
13369: PUSH
13370: EMPTY
13371: LIST
13372: LIST
13373: PPUSH
13374: CALL_OW 72
13378: PUSH
13379: LD_INT 0
13381: EQUAL
13382: PUSH
13383: LD_INT 19
13385: PPUSH
13386: LD_INT 22
13388: PUSH
13389: LD_INT 7
13391: PUSH
13392: EMPTY
13393: LIST
13394: LIST
13395: PUSH
13396: LD_INT 21
13398: PUSH
13399: LD_INT 1
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: PPUSH
13410: CALL_OW 71
13414: NOT
13415: AND
13416: PUSH
13417: LD_INT 3
13419: PPUSH
13420: CALL_OW 469
13424: NOT
13425: AND
13426: PUSH
13427: LD_INT 5
13429: PPUSH
13430: CALL_OW 469
13434: NOT
13435: AND
13436: IFFALSE 13338
// all_taken := true ;
13438: LD_ADDR_VAR 0 1
13442: PUSH
13443: LD_INT 1
13445: ST_TO_ADDR
// end ; 2 :
13446: GO 13460
13448: LD_INT 2
13450: DOUBLE
13451: EQUAL
13452: IFTRUE 13456
13454: GO 13459
13456: POP
// ; end ;
13457: GO 13460
13459: POP
// if team_kill_counter < 3 then
13460: LD_EXP 9
13464: PUSH
13465: LD_INT 3
13467: LESS
13468: IFFALSE 13484
// Say ( JMM , D5-JMM-1 ) else
13470: LD_EXP 14
13474: PPUSH
13475: LD_STRING D5-JMM-1
13477: PPUSH
13478: CALL_OW 88
13482: GO 13496
// Say ( JMM , D5-JMM-1a ) ;
13484: LD_EXP 14
13488: PPUSH
13489: LD_STRING D5-JMM-1a
13491: PPUSH
13492: CALL_OW 88
// if ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Roth ] ) >= 10 then
13496: LD_INT 22
13498: PUSH
13499: LD_INT 7
13501: PUSH
13502: EMPTY
13503: LIST
13504: LIST
13505: PUSH
13506: LD_INT 21
13508: PUSH
13509: LD_INT 1
13511: PUSH
13512: EMPTY
13513: LIST
13514: LIST
13515: PUSH
13516: LD_INT 23
13518: PUSH
13519: LD_INT 1
13521: PUSH
13522: EMPTY
13523: LIST
13524: LIST
13525: PUSH
13526: EMPTY
13527: LIST
13528: LIST
13529: LIST
13530: PPUSH
13531: CALL_OW 69
13535: PUSH
13536: LD_EXP 14
13540: PUSH
13541: LD_EXP 15
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: DIFF
13550: PUSH
13551: LD_INT 10
13553: GREATEREQUAL
13554: IFFALSE 13563
// SetAchievement ( ACH_TEAM ) ;
13556: LD_STRING ACH_TEAM
13558: PPUSH
13559: CALL_OW 543
// if not invis_used then
13563: LD_EXP 12
13567: NOT
13568: IFFALSE 13584
// begin wait ( 3 ) ;
13570: LD_INT 3
13572: PPUSH
13573: CALL_OW 67
// SetAchievement ( ACH_NOINVIS ) ;
13577: LD_STRING ACH_NOINVIS
13579: PPUSH
13580: CALL_OW 543
// end ; if not alert then
13584: LD_EXP 13
13588: NOT
13589: IFFALSE 13605
// begin wait ( 3 ) ;
13591: LD_INT 3
13593: PPUSH
13594: CALL_OW 67
// SetAchievement ( ACH_ALARM ) ;
13598: LD_STRING ACH_ALARM
13600: PPUSH
13601: CALL_OW 543
// end ; if tick < 15 15$00 then
13605: LD_OWVAR 1
13609: PUSH
13610: LD_INT 31500
13612: LESS
13613: IFFALSE 13629
// begin wait ( 3 ) ;
13615: LD_INT 3
13617: PPUSH
13618: CALL_OW 67
// SetAchievement ( ACH_ASPEED_16 ) ;
13622: LD_STRING ACH_ASPEED_16
13624: PPUSH
13625: CALL_OW 543
// end ; if all_taken then
13629: LD_VAR 0 1
13633: IFFALSE 13655
// begin AddMedal ( All , 1 ) ;
13635: LD_STRING All
13637: PPUSH
13638: LD_INT 1
13640: PPUSH
13641: CALL_OW 101
// m1 := true ;
13645: LD_ADDR_VAR 0 3
13649: PUSH
13650: LD_INT 1
13652: ST_TO_ADDR
// end else
13653: GO 13666
// AddMedal ( All , - 1 ) ;
13655: LD_STRING All
13657: PPUSH
13658: LD_INT 1
13660: NEG
13661: PPUSH
13662: CALL_OW 101
// if team_kill_counter then
13666: LD_EXP 9
13670: IFFALSE 13685
// AddMedal ( Save , - 1 ) else
13672: LD_STRING Save
13674: PPUSH
13675: LD_INT 1
13677: NEG
13678: PPUSH
13679: CALL_OW 101
13683: GO 13703
// begin AddMedal ( Save , 1 ) ;
13685: LD_STRING Save
13687: PPUSH
13688: LD_INT 1
13690: PPUSH
13691: CALL_OW 101
// m2 := true ;
13695: LD_ADDR_VAR 0 4
13699: PUSH
13700: LD_INT 1
13702: ST_TO_ADDR
// end ; if friends_kill_counter >= [ 2 , 2 , 1 , 1 ] [ Difficulty ] then
13703: LD_EXP 8
13707: PUSH
13708: LD_INT 2
13710: PUSH
13711: LD_INT 2
13713: PUSH
13714: LD_INT 1
13716: PUSH
13717: LD_INT 1
13719: PUSH
13720: EMPTY
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: PUSH
13726: LD_OWVAR 67
13730: ARRAY
13731: GREATEREQUAL
13732: IFFALSE 13747
// AddMedal ( Friendship , - 1 ) else
13734: LD_STRING Friendship
13736: PPUSH
13737: LD_INT 1
13739: NEG
13740: PPUSH
13741: CALL_OW 101
13745: GO 13765
// begin AddMedal ( Friendship , 1 ) ;
13747: LD_STRING Friendship
13749: PPUSH
13750: LD_INT 1
13752: PPUSH
13753: CALL_OW 101
// m3 := true ;
13757: LD_ADDR_VAR 0 5
13761: PUSH
13762: LD_INT 1
13764: ST_TO_ADDR
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
13765: LD_VAR 0 3
13769: PUSH
13770: LD_VAR 0 4
13774: AND
13775: PUSH
13776: LD_VAR 0 5
13780: AND
13781: PUSH
13782: LD_OWVAR 67
13786: PUSH
13787: LD_INT 3
13789: GREATEREQUAL
13790: AND
13791: IFFALSE 13803
// SetAchievementEX ( ACH_AMER , 16 ) ;
13793: LD_STRING ACH_AMER
13795: PPUSH
13796: LD_INT 16
13798: PPUSH
13799: CALL_OW 564
// GiveMedals ( MAIN ) ;
13803: LD_STRING MAIN
13805: PPUSH
13806: CALL_OW 102
// tmp := FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] , [ f_class , class_apeman_engineer ] ] ] ] ) ;
13810: LD_ADDR_VAR 0 2
13814: PUSH
13815: LD_INT 22
13817: PUSH
13818: LD_INT 7
13820: PUSH
13821: EMPTY
13822: LIST
13823: LIST
13824: PUSH
13825: LD_INT 2
13827: PUSH
13828: LD_INT 25
13830: PUSH
13831: LD_INT 1
13833: PUSH
13834: EMPTY
13835: LIST
13836: LIST
13837: PUSH
13838: LD_INT 25
13840: PUSH
13841: LD_INT 2
13843: PUSH
13844: EMPTY
13845: LIST
13846: LIST
13847: PUSH
13848: LD_INT 25
13850: PUSH
13851: LD_INT 3
13853: PUSH
13854: EMPTY
13855: LIST
13856: LIST
13857: PUSH
13858: LD_INT 25
13860: PUSH
13861: LD_INT 4
13863: PUSH
13864: EMPTY
13865: LIST
13866: LIST
13867: PUSH
13868: LD_INT 25
13870: PUSH
13871: LD_INT 5
13873: PUSH
13874: EMPTY
13875: LIST
13876: LIST
13877: PUSH
13878: LD_INT 25
13880: PUSH
13881: LD_INT 8
13883: PUSH
13884: EMPTY
13885: LIST
13886: LIST
13887: PUSH
13888: LD_INT 25
13890: PUSH
13891: LD_INT 9
13893: PUSH
13894: EMPTY
13895: LIST
13896: LIST
13897: PUSH
13898: LD_INT 25
13900: PUSH
13901: LD_INT 16
13903: PUSH
13904: EMPTY
13905: LIST
13906: LIST
13907: PUSH
13908: EMPTY
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: PUSH
13919: EMPTY
13920: LIST
13921: LIST
13922: PUSH
13923: EMPTY
13924: LIST
13925: PPUSH
13926: CALL_OW 69
13930: ST_TO_ADDR
// RewardPeople ( tmp union Roth diff Mike ) ;
13931: LD_VAR 0 2
13935: PUSH
13936: LD_EXP 15
13940: UNION
13941: PUSH
13942: LD_EXP 38
13946: DIFF
13947: PPUSH
13948: CALL_OW 43
// SaveCharacters ( JMM , 12a_JMM ) ;
13952: LD_EXP 14
13956: PPUSH
13957: LD_STRING 12a_JMM
13959: PPUSH
13960: CALL_OW 38
// if IsLive ( Roth ) then
13964: LD_EXP 15
13968: PPUSH
13969: CALL_OW 300
13973: IFFALSE 13987
// SaveCharacters ( Roth , 12a_Roth ) ;
13975: LD_EXP 15
13979: PPUSH
13980: LD_STRING 12a_Roth
13982: PPUSH
13983: CALL_OW 38
// if Lisa in tmp then
13987: LD_EXP 23
13991: PUSH
13992: LD_VAR 0 2
13996: IN
13997: IFFALSE 14013
// SaveCharacters ( Lisa , 12a_Lisa ) else
13999: LD_EXP 23
14003: PPUSH
14004: LD_STRING 12a_Lisa
14006: PPUSH
14007: CALL_OW 38
14011: GO 14031
// if Lisa then
14013: LD_EXP 23
14017: IFFALSE 14031
// SaveCharacters ( Lisa , 12p_Lisa ) ;
14019: LD_EXP 23
14023: PPUSH
14024: LD_STRING 12p_Lisa
14026: PPUSH
14027: CALL_OW 38
// if Mike in tmp then
14031: LD_EXP 38
14035: PUSH
14036: LD_VAR 0 2
14040: IN
14041: IFFALSE 14055
// SaveCharacters ( Mike , 12a_Mike ) ;
14043: LD_EXP 38
14047: PPUSH
14048: LD_STRING 12a_Mike
14050: PPUSH
14051: CALL_OW 38
// if Donaldson in tmp then
14055: LD_EXP 24
14059: PUSH
14060: LD_VAR 0 2
14064: IN
14065: IFFALSE 14081
// SaveCharacters ( Donaldson , 12a_Donaldson ) else
14067: LD_EXP 24
14071: PPUSH
14072: LD_STRING 12a_Donaldson
14074: PPUSH
14075: CALL_OW 38
14079: GO 14099
// if Donaldson then
14081: LD_EXP 24
14085: IFFALSE 14099
// SaveCharacters ( Donaldson , 12p_Donaldson ) ;
14087: LD_EXP 24
14091: PPUSH
14092: LD_STRING 12p_Donaldson
14094: PPUSH
14095: CALL_OW 38
// if Bobby in tmp then
14099: LD_EXP 25
14103: PUSH
14104: LD_VAR 0 2
14108: IN
14109: IFFALSE 14125
// SaveCharacters ( Bobby , 12a_Bobby ) else
14111: LD_EXP 25
14115: PPUSH
14116: LD_STRING 12a_Bobby
14118: PPUSH
14119: CALL_OW 38
14123: GO 14143
// if Bobby then
14125: LD_EXP 25
14129: IFFALSE 14143
// SaveCharacters ( Bobby , 12p_Bobby ) ;
14131: LD_EXP 25
14135: PPUSH
14136: LD_STRING 12p_Bobby
14138: PPUSH
14139: CALL_OW 38
// if Cyrus in tmp then
14143: LD_EXP 26
14147: PUSH
14148: LD_VAR 0 2
14152: IN
14153: IFFALSE 14169
// SaveCharacters ( Cyrus , 12a_Cyrus ) else
14155: LD_EXP 26
14159: PPUSH
14160: LD_STRING 12a_Cyrus
14162: PPUSH
14163: CALL_OW 38
14167: GO 14187
// if Cyrus then
14169: LD_EXP 26
14173: IFFALSE 14187
// SaveCharacters ( Cyrus , 12p_Cyrus ) ;
14175: LD_EXP 26
14179: PPUSH
14180: LD_STRING 12p_Cyrus
14182: PPUSH
14183: CALL_OW 38
// if Denis in tmp then
14187: LD_EXP 27
14191: PUSH
14192: LD_VAR 0 2
14196: IN
14197: IFFALSE 14211
// SaveCharacters ( Denis , 12a_Denis ) ;
14199: LD_EXP 27
14203: PPUSH
14204: LD_STRING 12a_Denis
14206: PPUSH
14207: CALL_OW 38
// if Brown in tmp then
14211: LD_EXP 28
14215: PUSH
14216: LD_VAR 0 2
14220: IN
14221: IFFALSE 14237
// SaveCharacters ( Brown , 12a_Brown ) else
14223: LD_EXP 28
14227: PPUSH
14228: LD_STRING 12a_Brown
14230: PPUSH
14231: CALL_OW 38
14235: GO 14261
// if Brown in tmp then
14237: LD_EXP 28
14241: PUSH
14242: LD_VAR 0 2
14246: IN
14247: IFFALSE 14261
// SaveCharacters ( Brown , 12p_Brown ) ;
14249: LD_EXP 28
14253: PPUSH
14254: LD_STRING 12p_Brown
14256: PPUSH
14257: CALL_OW 38
// if Gladstone in tmp then
14261: LD_EXP 29
14265: PUSH
14266: LD_VAR 0 2
14270: IN
14271: IFFALSE 14287
// SaveCharacters ( Gladstone , 12a_Gladstone ) else
14273: LD_EXP 29
14277: PPUSH
14278: LD_STRING 12a_Gladstone
14280: PPUSH
14281: CALL_OW 38
14285: GO 14305
// if Gladstone then
14287: LD_EXP 29
14291: IFFALSE 14305
// SaveCharacters ( Gladstone , 12p_Gladstone ) ;
14293: LD_EXP 29
14297: PPUSH
14298: LD_STRING 12p_Gladstone
14300: PPUSH
14301: CALL_OW 38
// if Houten in tmp then
14305: LD_EXP 30
14309: PUSH
14310: LD_VAR 0 2
14314: IN
14315: IFFALSE 14331
// SaveCharacters ( Houten , 12a_Houten ) else
14317: LD_EXP 30
14321: PPUSH
14322: LD_STRING 12a_Houten
14324: PPUSH
14325: CALL_OW 38
14329: GO 14349
// if Houten then
14331: LD_EXP 30
14335: IFFALSE 14349
// SaveCharacters ( Houten , 12p_Houten ) ;
14337: LD_EXP 30
14341: PPUSH
14342: LD_STRING 12p_Houten
14344: PPUSH
14345: CALL_OW 38
// if Cornel in tmp then
14349: LD_EXP 31
14353: PUSH
14354: LD_VAR 0 2
14358: IN
14359: IFFALSE 14375
// SaveCharacters ( Cornel , 12a_Cornell ) else
14361: LD_EXP 31
14365: PPUSH
14366: LD_STRING 12a_Cornell
14368: PPUSH
14369: CALL_OW 38
14373: GO 14393
// if Cornel then
14375: LD_EXP 31
14379: IFFALSE 14393
// SaveCharacters ( Cornel , 12p_Cornell ) ;
14381: LD_EXP 31
14385: PPUSH
14386: LD_STRING 12p_Cornell
14388: PPUSH
14389: CALL_OW 38
// if Gary in tmp then
14393: LD_EXP 32
14397: PUSH
14398: LD_VAR 0 2
14402: IN
14403: IFFALSE 14419
// SaveCharacters ( Gary , 12a_Gary ) else
14405: LD_EXP 32
14409: PPUSH
14410: LD_STRING 12a_Gary
14412: PPUSH
14413: CALL_OW 38
14417: GO 14437
// if Gary then
14419: LD_EXP 32
14423: IFFALSE 14437
// SaveCharacters ( Gary , 12p_Gary ) ;
14425: LD_EXP 32
14429: PPUSH
14430: LD_STRING 12p_Gary
14432: PPUSH
14433: CALL_OW 38
// if Frank in tmp then
14437: LD_EXP 33
14441: PUSH
14442: LD_VAR 0 2
14446: IN
14447: IFFALSE 14461
// SaveCharacters ( Frank , 12a_Frank ) ;
14449: LD_EXP 33
14453: PPUSH
14454: LD_STRING 12a_Frank
14456: PPUSH
14457: CALL_OW 38
// if Kikuchi in tmp then
14461: LD_EXP 34
14465: PUSH
14466: LD_VAR 0 2
14470: IN
14471: IFFALSE 14487
// SaveCharacters ( Kikuchi , 12a_Kikuchi ) else
14473: LD_EXP 34
14477: PPUSH
14478: LD_STRING 12a_Kikuchi
14480: PPUSH
14481: CALL_OW 38
14485: GO 14505
// if Kikuchi then
14487: LD_EXP 34
14491: IFFALSE 14505
// SaveCharacters ( Kikuchi , 12p_Kikuchi ) ;
14493: LD_EXP 34
14497: PPUSH
14498: LD_STRING 12p_Kikuchi
14500: PPUSH
14501: CALL_OW 38
// if Simms in tmp then
14505: LD_EXP 35
14509: PUSH
14510: LD_VAR 0 2
14514: IN
14515: IFFALSE 14529
// SaveCharacters ( Simms , 12a_Simms ) ;
14517: LD_EXP 35
14521: PPUSH
14522: LD_STRING 12a_Simms
14524: PPUSH
14525: CALL_OW 38
// if Joan in tmp then
14529: LD_EXP 36
14533: PUSH
14534: LD_VAR 0 2
14538: IN
14539: IFFALSE 14553
// SaveCharacters ( Joan , 12a_Joan ) ;
14541: LD_EXP 36
14545: PPUSH
14546: LD_STRING 12a_Joan
14548: PPUSH
14549: CALL_OW 38
// if DeltaDoctor in tmp then
14553: LD_EXP 37
14557: PUSH
14558: LD_VAR 0 2
14562: IN
14563: IFFALSE 14577
// SaveCharacters ( DeltaDoctor , 12a_DeltaDoctor ) ;
14565: LD_EXP 37
14569: PPUSH
14570: LD_STRING 12a_DeltaDoctor
14572: PPUSH
14573: CALL_OW 38
// tmp := tmp diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Mike ] ;
14577: LD_ADDR_VAR 0 2
14581: PUSH
14582: LD_VAR 0 2
14586: PUSH
14587: LD_EXP 14
14591: PUSH
14592: LD_EXP 15
14596: PUSH
14597: LD_EXP 23
14601: PUSH
14602: LD_EXP 24
14606: PUSH
14607: LD_EXP 25
14611: PUSH
14612: LD_EXP 26
14616: PUSH
14617: LD_EXP 27
14621: PUSH
14622: LD_EXP 28
14626: PUSH
14627: LD_EXP 29
14631: PUSH
14632: LD_EXP 30
14636: PUSH
14637: LD_EXP 31
14641: PUSH
14642: LD_EXP 32
14646: PUSH
14647: LD_EXP 33
14651: PUSH
14652: LD_EXP 34
14656: PUSH
14657: LD_EXP 35
14661: PUSH
14662: LD_EXP 36
14666: PUSH
14667: LD_EXP 37
14671: PUSH
14672: LD_EXP 38
14676: PUSH
14677: EMPTY
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: DIFF
14697: ST_TO_ADDR
// if tmp then
14698: LD_VAR 0 2
14702: IFFALSE 14716
// SaveCharacters ( tmp , 12a_others ) ;
14704: LD_VAR 0 2
14708: PPUSH
14709: LD_STRING 12a_others
14711: PPUSH
14712: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_side , 1 ] , [ f_side , 4 ] ] ] ) diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Powell , Mike ] ;
14716: LD_ADDR_VAR 0 2
14720: PUSH
14721: LD_INT 21
14723: PUSH
14724: LD_INT 1
14726: PUSH
14727: EMPTY
14728: LIST
14729: LIST
14730: PUSH
14731: LD_INT 23
14733: PUSH
14734: LD_INT 1
14736: PUSH
14737: EMPTY
14738: LIST
14739: LIST
14740: PUSH
14741: LD_INT 2
14743: PUSH
14744: LD_INT 22
14746: PUSH
14747: LD_INT 1
14749: PUSH
14750: EMPTY
14751: LIST
14752: LIST
14753: PUSH
14754: LD_INT 22
14756: PUSH
14757: LD_INT 4
14759: PUSH
14760: EMPTY
14761: LIST
14762: LIST
14763: PUSH
14764: EMPTY
14765: LIST
14766: LIST
14767: LIST
14768: PUSH
14769: EMPTY
14770: LIST
14771: LIST
14772: LIST
14773: PPUSH
14774: CALL_OW 69
14778: PUSH
14779: LD_EXP 14
14783: PUSH
14784: LD_EXP 15
14788: PUSH
14789: LD_EXP 23
14793: PUSH
14794: LD_EXP 24
14798: PUSH
14799: LD_EXP 25
14803: PUSH
14804: LD_EXP 26
14808: PUSH
14809: LD_EXP 27
14813: PUSH
14814: LD_EXP 28
14818: PUSH
14819: LD_EXP 29
14823: PUSH
14824: LD_EXP 30
14828: PUSH
14829: LD_EXP 31
14833: PUSH
14834: LD_EXP 32
14838: PUSH
14839: LD_EXP 33
14843: PUSH
14844: LD_EXP 34
14848: PUSH
14849: LD_EXP 35
14853: PUSH
14854: LD_EXP 36
14858: PUSH
14859: LD_EXP 37
14863: PUSH
14864: LD_EXP 16
14868: PUSH
14869: LD_EXP 38
14873: PUSH
14874: EMPTY
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: DIFF
14895: ST_TO_ADDR
// if tmp then
14896: LD_VAR 0 2
14900: IFFALSE 14914
// SaveCharacters ( tmp , 12p_others ) ;
14902: LD_VAR 0 2
14906: PPUSH
14907: LD_STRING 12p_others
14909: PPUSH
14910: CALL_OW 38
// YouWin ;
14914: CALL_OW 103
// end ; end_of_file
14918: PPOPN 5
14920: END
// on SailEvent ( event ) do var tmp ;
14921: LD_INT 0
14923: PPUSH
// begin if event = 1 then
14924: LD_VAR 0 1
14928: PUSH
14929: LD_INT 1
14931: EQUAL
14932: IFFALSE 15005
// begin if not mobile_patrol then
14934: LD_EXP 17
14938: NOT
14939: IFFALSE 14943
// exit ;
14941: GO 15005
// tmp := mobile_patrol [ mobile_patrol ] ;
14943: LD_ADDR_VAR 0 2
14947: PUSH
14948: LD_EXP 17
14952: PUSH
14953: LD_EXP 17
14957: ARRAY
14958: ST_TO_ADDR
// mobile_patrol := Delete ( mobile_patrol , mobile_patrol ) ;
14959: LD_ADDR_EXP 17
14963: PUSH
14964: LD_EXP 17
14968: PPUSH
14969: LD_EXP 17
14973: PPUSH
14974: CALL_OW 3
14978: ST_TO_ADDR
// Patrol ( tmp , mobile_points [ mobile_patrol + 1 ] , [ ] ) ;
14979: LD_VAR 0 2
14983: PPUSH
14984: LD_EXP 18
14988: PUSH
14989: LD_EXP 17
14993: PUSH
14994: LD_INT 1
14996: PLUS
14997: ARRAY
14998: PPUSH
14999: EMPTY
15000: PPUSH
15001: CALL 6985 0 3
// end ; end ;
15005: PPOPN 2
15007: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
15008: LD_VAR 0 1
15012: PPUSH
15013: CALL 31330 0 1
// if un = JMM then
15017: LD_VAR 0 1
15021: PUSH
15022: LD_EXP 14
15026: EQUAL
15027: IFFALSE 15036
// YouLost ( JMM ) ;
15029: LD_STRING JMM
15031: PPUSH
15032: CALL_OW 104
// if GetSide ( un ) = 7 and GetWeapon ( un ) = us_cargo_bay then
15036: LD_VAR 0 1
15040: PPUSH
15041: CALL_OW 255
15045: PUSH
15046: LD_INT 7
15048: EQUAL
15049: PUSH
15050: LD_VAR 0 1
15054: PPUSH
15055: CALL_OW 264
15059: PUSH
15060: LD_INT 12
15062: EQUAL
15063: AND
15064: IFFALSE 15073
// YouLost ( Artifact ) ;
15066: LD_STRING Artifact
15068: PPUSH
15069: CALL_OW 104
// if ( GetSide ( un ) = 7 and GetType ( un ) = unit_human ) or un = Roth then
15073: LD_VAR 0 1
15077: PPUSH
15078: CALL_OW 255
15082: PUSH
15083: LD_INT 7
15085: EQUAL
15086: PUSH
15087: LD_VAR 0 1
15091: PPUSH
15092: CALL_OW 247
15096: PUSH
15097: LD_INT 1
15099: EQUAL
15100: AND
15101: PUSH
15102: LD_VAR 0 1
15106: PUSH
15107: LD_EXP 15
15111: EQUAL
15112: OR
15113: IFFALSE 15129
// team_kill_counter := team_kill_counter + 1 ;
15115: LD_ADDR_EXP 9
15119: PUSH
15120: LD_EXP 9
15124: PUSH
15125: LD_INT 1
15127: PLUS
15128: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetType ( un ) = unit_human then
15129: LD_VAR 0 1
15133: PPUSH
15134: CALL_OW 255
15138: PUSH
15139: LD_INT 1
15141: EQUAL
15142: PUSH
15143: LD_VAR 0 1
15147: PPUSH
15148: CALL_OW 247
15152: PUSH
15153: LD_INT 1
15155: EQUAL
15156: AND
15157: IFFALSE 15173
// friends_kill_counter := friends_kill_counter + 1 ;
15159: LD_ADDR_EXP 8
15163: PUSH
15164: LD_EXP 8
15168: PUSH
15169: LD_INT 1
15171: PLUS
15172: ST_TO_ADDR
// if GetSide ( un ) <> 1 then
15173: LD_VAR 0 1
15177: PPUSH
15178: CALL_OW 255
15182: PUSH
15183: LD_INT 1
15185: NONEQUAL
15186: IFFALSE 15190
// exit ;
15188: GO 15267
// if GetControl ( un ) = control_remote then
15190: LD_VAR 0 1
15194: PPUSH
15195: CALL_OW 263
15199: PUSH
15200: LD_INT 2
15202: EQUAL
15203: IFFALSE 15221
// defenders := defenders diff un ;
15205: LD_ADDR_EXP 20
15209: PUSH
15210: LD_EXP 20
15214: PUSH
15215: LD_VAR 0 1
15219: DIFF
15220: ST_TO_ADDR
// if not un in defenders then
15221: LD_VAR 0 1
15225: PUSH
15226: LD_EXP 20
15230: IN
15231: NOT
15232: IFFALSE 15267
// begin defcon := [ GetX ( un ) , GetY ( un ) ] ;
15234: LD_ADDR_EXP 21
15238: PUSH
15239: LD_VAR 0 1
15243: PPUSH
15244: CALL_OW 250
15248: PUSH
15249: LD_VAR 0 1
15253: PPUSH
15254: CALL_OW 251
15258: PUSH
15259: EMPTY
15260: LIST
15261: LIST
15262: ST_TO_ADDR
// Defend ;
15263: CALL 2950 0 0
// end ; end ;
15267: PPOPN 1
15269: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
15270: LD_VAR 0 1
15274: PPUSH
15275: LD_VAR 0 2
15279: PPUSH
15280: CALL 31450 0 2
// if GetSide ( veh ) <> 1 then
15284: LD_VAR 0 1
15288: PPUSH
15289: CALL_OW 255
15293: PUSH
15294: LD_INT 1
15296: NONEQUAL
15297: IFFALSE 15301
// exit ;
15299: GO 15325
// if GetControl ( veh ) = control_remote then
15301: LD_VAR 0 1
15305: PPUSH
15306: CALL_OW 263
15310: PUSH
15311: LD_INT 2
15313: EQUAL
15314: IFFALSE 15325
// Connect ( veh ) ;
15316: LD_VAR 0 1
15320: PPUSH
15321: CALL 44366 0 1
// end ;
15325: PPOPN 2
15327: END
// on UnitGoesToRed ( un ) do var i , veh ;
15328: LD_INT 0
15330: PPUSH
15331: PPUSH
// begin if GetSide ( un ) = 1 and GetControl ( un ) = control_remote then
15332: LD_VAR 0 1
15336: PPUSH
15337: CALL_OW 255
15341: PUSH
15342: LD_INT 1
15344: EQUAL
15345: PUSH
15346: LD_VAR 0 1
15350: PPUSH
15351: CALL_OW 263
15355: PUSH
15356: LD_INT 2
15358: EQUAL
15359: AND
15360: IFFALSE 15371
// ComUnlink ( un ) ;
15362: LD_VAR 0 1
15366: PPUSH
15367: CALL_OW 136
// if un = ambar0 then
15371: LD_VAR 0 1
15375: PUSH
15376: LD_INT 18
15378: EQUAL
15379: IFFALSE 15489
// begin uc_side := 1 ;
15381: LD_ADDR_OWVAR 20
15385: PUSH
15386: LD_INT 1
15388: ST_TO_ADDR
// uc_nation := 1 ;
15389: LD_ADDR_OWVAR 21
15393: PUSH
15394: LD_INT 1
15396: ST_TO_ADDR
// for i = 1 to 6 do
15397: LD_ADDR_VAR 0 2
15401: PUSH
15402: DOUBLE
15403: LD_INT 1
15405: DEC
15406: ST_TO_ADDR
15407: LD_INT 6
15409: PUSH
15410: FOR_TO
15411: IFFALSE 15487
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
15413: LD_INT 3
15415: PPUSH
15416: LD_INT 1
15418: PPUSH
15419: LD_INT 3
15421: PPUSH
15422: LD_INT 4
15424: PPUSH
15425: LD_INT 100
15427: PPUSH
15428: CALL 40898 0 5
// veh := CreateVehicle ;
15432: LD_ADDR_VAR 0 3
15436: PUSH
15437: CALL_OW 45
15441: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
15442: LD_VAR 0 3
15446: PPUSH
15447: LD_INT 1
15449: PPUSH
15450: CALL_OW 233
// PlaceUnitArea ( veh , west_spawn , false ) ;
15454: LD_VAR 0 3
15458: PPUSH
15459: LD_INT 25
15461: PPUSH
15462: LD_INT 0
15464: PPUSH
15465: CALL_OW 49
// defenders := defenders ^ veh ;
15469: LD_ADDR_EXP 20
15473: PUSH
15474: LD_EXP 20
15478: PUSH
15479: LD_VAR 0 3
15483: ADD
15484: ST_TO_ADDR
// end ;
15485: GO 15410
15487: POP
15488: POP
// end ; end ;
15489: PPOPN 3
15491: END
// on EnterBuilding ( building , unit ) do begin if unit = Powell then
15492: LD_VAR 0 2
15496: PUSH
15497: LD_EXP 16
15501: EQUAL
15502: IFFALSE 15513
// RemoveUnit ( Powell ) ;
15504: LD_EXP 16
15508: PPUSH
15509: CALL_OW 64
// end ;
15513: PPOPN 2
15515: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
15516: LD_VAR 0 1
15520: PPUSH
15521: CALL 31434 0 1
// end ; end_of_file end_of_file
15525: PPOPN 1
15527: END
// export globalGameSaveCounter ; every 0 0$1 do
15528: GO 15530
15530: DISABLE
// begin enable ;
15531: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
15532: LD_STRING updateTimer(
15534: PUSH
15535: LD_OWVAR 1
15539: STR
15540: PUSH
15541: LD_STRING );
15543: STR
15544: PPUSH
15545: CALL_OW 559
// end ;
15549: END
// every 0 0$1 do
15550: GO 15552
15552: DISABLE
// begin globalGameSaveCounter := 0 ;
15553: LD_ADDR_EXP 39
15557: PUSH
15558: LD_INT 0
15560: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
15561: LD_STRING setGameSaveCounter(0)
15563: PPUSH
15564: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
15568: LD_STRING initStreamRollete();
15570: PPUSH
15571: CALL_OW 559
// InitStreamMode ;
15575: CALL 16901 0 0
// DefineStreamItems ( false ) ;
15579: LD_INT 0
15581: PPUSH
15582: CALL 17365 0 1
// end ;
15586: END
// export function SOS_MapStart ( ) ; begin
15587: LD_INT 0
15589: PPUSH
// if streamModeActive then
15590: LD_EXP 40
15594: IFFALSE 15603
// DefineStreamItems ( true ) ;
15596: LD_INT 1
15598: PPUSH
15599: CALL 17365 0 1
// UpdateLuaVariables ( ) ;
15603: CALL 15620 0 0
// UpdateFactoryWaypoints ( ) ;
15607: CALL 30234 0 0
// UpdateWarehouseGatheringPoints ( ) ;
15611: CALL 30491 0 0
// end ;
15615: LD_VAR 0 1
15619: RET
// function UpdateLuaVariables ( ) ; begin
15620: LD_INT 0
15622: PPUSH
// if globalGameSaveCounter then
15623: LD_EXP 39
15627: IFFALSE 15661
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
15629: LD_ADDR_EXP 39
15633: PUSH
15634: LD_EXP 39
15638: PPUSH
15639: CALL 75121 0 1
15643: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
15644: LD_STRING setGameSaveCounter(
15646: PUSH
15647: LD_EXP 39
15651: STR
15652: PUSH
15653: LD_STRING )
15655: STR
15656: PPUSH
15657: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
15661: LD_STRING setGameDifficulty(
15663: PUSH
15664: LD_OWVAR 67
15668: STR
15669: PUSH
15670: LD_STRING )
15672: STR
15673: PPUSH
15674: CALL_OW 559
// end ;
15678: LD_VAR 0 1
15682: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15683: LD_INT 0
15685: PPUSH
// if p2 = stream_mode then
15686: LD_VAR 0 2
15690: PUSH
15691: LD_INT 100
15693: EQUAL
15694: IFFALSE 16697
// begin if not StreamModeActive then
15696: LD_EXP 40
15700: NOT
15701: IFFALSE 15711
// StreamModeActive := true ;
15703: LD_ADDR_EXP 40
15707: PUSH
15708: LD_INT 1
15710: ST_TO_ADDR
// if p3 = 0 then
15711: LD_VAR 0 3
15715: PUSH
15716: LD_INT 0
15718: EQUAL
15719: IFFALSE 15725
// InitStreamMode ;
15721: CALL 16901 0 0
// if p3 = 1 then
15725: LD_VAR 0 3
15729: PUSH
15730: LD_INT 1
15732: EQUAL
15733: IFFALSE 15743
// sRocket := true ;
15735: LD_ADDR_EXP 45
15739: PUSH
15740: LD_INT 1
15742: ST_TO_ADDR
// if p3 = 2 then
15743: LD_VAR 0 3
15747: PUSH
15748: LD_INT 2
15750: EQUAL
15751: IFFALSE 15761
// sSpeed := true ;
15753: LD_ADDR_EXP 44
15757: PUSH
15758: LD_INT 1
15760: ST_TO_ADDR
// if p3 = 3 then
15761: LD_VAR 0 3
15765: PUSH
15766: LD_INT 3
15768: EQUAL
15769: IFFALSE 15779
// sEngine := true ;
15771: LD_ADDR_EXP 46
15775: PUSH
15776: LD_INT 1
15778: ST_TO_ADDR
// if p3 = 4 then
15779: LD_VAR 0 3
15783: PUSH
15784: LD_INT 4
15786: EQUAL
15787: IFFALSE 15797
// sSpec := true ;
15789: LD_ADDR_EXP 43
15793: PUSH
15794: LD_INT 1
15796: ST_TO_ADDR
// if p3 = 5 then
15797: LD_VAR 0 3
15801: PUSH
15802: LD_INT 5
15804: EQUAL
15805: IFFALSE 15815
// sLevel := true ;
15807: LD_ADDR_EXP 47
15811: PUSH
15812: LD_INT 1
15814: ST_TO_ADDR
// if p3 = 6 then
15815: LD_VAR 0 3
15819: PUSH
15820: LD_INT 6
15822: EQUAL
15823: IFFALSE 15833
// sArmoury := true ;
15825: LD_ADDR_EXP 48
15829: PUSH
15830: LD_INT 1
15832: ST_TO_ADDR
// if p3 = 7 then
15833: LD_VAR 0 3
15837: PUSH
15838: LD_INT 7
15840: EQUAL
15841: IFFALSE 15851
// sRadar := true ;
15843: LD_ADDR_EXP 49
15847: PUSH
15848: LD_INT 1
15850: ST_TO_ADDR
// if p3 = 8 then
15851: LD_VAR 0 3
15855: PUSH
15856: LD_INT 8
15858: EQUAL
15859: IFFALSE 15869
// sBunker := true ;
15861: LD_ADDR_EXP 50
15865: PUSH
15866: LD_INT 1
15868: ST_TO_ADDR
// if p3 = 9 then
15869: LD_VAR 0 3
15873: PUSH
15874: LD_INT 9
15876: EQUAL
15877: IFFALSE 15887
// sHack := true ;
15879: LD_ADDR_EXP 51
15883: PUSH
15884: LD_INT 1
15886: ST_TO_ADDR
// if p3 = 10 then
15887: LD_VAR 0 3
15891: PUSH
15892: LD_INT 10
15894: EQUAL
15895: IFFALSE 15905
// sFire := true ;
15897: LD_ADDR_EXP 52
15901: PUSH
15902: LD_INT 1
15904: ST_TO_ADDR
// if p3 = 11 then
15905: LD_VAR 0 3
15909: PUSH
15910: LD_INT 11
15912: EQUAL
15913: IFFALSE 15923
// sRefresh := true ;
15915: LD_ADDR_EXP 53
15919: PUSH
15920: LD_INT 1
15922: ST_TO_ADDR
// if p3 = 12 then
15923: LD_VAR 0 3
15927: PUSH
15928: LD_INT 12
15930: EQUAL
15931: IFFALSE 15941
// sExp := true ;
15933: LD_ADDR_EXP 54
15937: PUSH
15938: LD_INT 1
15940: ST_TO_ADDR
// if p3 = 13 then
15941: LD_VAR 0 3
15945: PUSH
15946: LD_INT 13
15948: EQUAL
15949: IFFALSE 15959
// sDepot := true ;
15951: LD_ADDR_EXP 55
15955: PUSH
15956: LD_INT 1
15958: ST_TO_ADDR
// if p3 = 14 then
15959: LD_VAR 0 3
15963: PUSH
15964: LD_INT 14
15966: EQUAL
15967: IFFALSE 15977
// sFlag := true ;
15969: LD_ADDR_EXP 56
15973: PUSH
15974: LD_INT 1
15976: ST_TO_ADDR
// if p3 = 15 then
15977: LD_VAR 0 3
15981: PUSH
15982: LD_INT 15
15984: EQUAL
15985: IFFALSE 15995
// sKamikadze := true ;
15987: LD_ADDR_EXP 64
15991: PUSH
15992: LD_INT 1
15994: ST_TO_ADDR
// if p3 = 16 then
15995: LD_VAR 0 3
15999: PUSH
16000: LD_INT 16
16002: EQUAL
16003: IFFALSE 16013
// sTroll := true ;
16005: LD_ADDR_EXP 65
16009: PUSH
16010: LD_INT 1
16012: ST_TO_ADDR
// if p3 = 17 then
16013: LD_VAR 0 3
16017: PUSH
16018: LD_INT 17
16020: EQUAL
16021: IFFALSE 16031
// sSlow := true ;
16023: LD_ADDR_EXP 66
16027: PUSH
16028: LD_INT 1
16030: ST_TO_ADDR
// if p3 = 18 then
16031: LD_VAR 0 3
16035: PUSH
16036: LD_INT 18
16038: EQUAL
16039: IFFALSE 16049
// sLack := true ;
16041: LD_ADDR_EXP 67
16045: PUSH
16046: LD_INT 1
16048: ST_TO_ADDR
// if p3 = 19 then
16049: LD_VAR 0 3
16053: PUSH
16054: LD_INT 19
16056: EQUAL
16057: IFFALSE 16067
// sTank := true ;
16059: LD_ADDR_EXP 69
16063: PUSH
16064: LD_INT 1
16066: ST_TO_ADDR
// if p3 = 20 then
16067: LD_VAR 0 3
16071: PUSH
16072: LD_INT 20
16074: EQUAL
16075: IFFALSE 16085
// sRemote := true ;
16077: LD_ADDR_EXP 70
16081: PUSH
16082: LD_INT 1
16084: ST_TO_ADDR
// if p3 = 21 then
16085: LD_VAR 0 3
16089: PUSH
16090: LD_INT 21
16092: EQUAL
16093: IFFALSE 16103
// sPowell := true ;
16095: LD_ADDR_EXP 71
16099: PUSH
16100: LD_INT 1
16102: ST_TO_ADDR
// if p3 = 22 then
16103: LD_VAR 0 3
16107: PUSH
16108: LD_INT 22
16110: EQUAL
16111: IFFALSE 16121
// sTeleport := true ;
16113: LD_ADDR_EXP 74
16117: PUSH
16118: LD_INT 1
16120: ST_TO_ADDR
// if p3 = 23 then
16121: LD_VAR 0 3
16125: PUSH
16126: LD_INT 23
16128: EQUAL
16129: IFFALSE 16139
// sOilTower := true ;
16131: LD_ADDR_EXP 76
16135: PUSH
16136: LD_INT 1
16138: ST_TO_ADDR
// if p3 = 24 then
16139: LD_VAR 0 3
16143: PUSH
16144: LD_INT 24
16146: EQUAL
16147: IFFALSE 16157
// sShovel := true ;
16149: LD_ADDR_EXP 77
16153: PUSH
16154: LD_INT 1
16156: ST_TO_ADDR
// if p3 = 25 then
16157: LD_VAR 0 3
16161: PUSH
16162: LD_INT 25
16164: EQUAL
16165: IFFALSE 16175
// sSheik := true ;
16167: LD_ADDR_EXP 78
16171: PUSH
16172: LD_INT 1
16174: ST_TO_ADDR
// if p3 = 26 then
16175: LD_VAR 0 3
16179: PUSH
16180: LD_INT 26
16182: EQUAL
16183: IFFALSE 16193
// sEarthquake := true ;
16185: LD_ADDR_EXP 80
16189: PUSH
16190: LD_INT 1
16192: ST_TO_ADDR
// if p3 = 27 then
16193: LD_VAR 0 3
16197: PUSH
16198: LD_INT 27
16200: EQUAL
16201: IFFALSE 16211
// sAI := true ;
16203: LD_ADDR_EXP 81
16207: PUSH
16208: LD_INT 1
16210: ST_TO_ADDR
// if p3 = 28 then
16211: LD_VAR 0 3
16215: PUSH
16216: LD_INT 28
16218: EQUAL
16219: IFFALSE 16229
// sCargo := true ;
16221: LD_ADDR_EXP 84
16225: PUSH
16226: LD_INT 1
16228: ST_TO_ADDR
// if p3 = 29 then
16229: LD_VAR 0 3
16233: PUSH
16234: LD_INT 29
16236: EQUAL
16237: IFFALSE 16247
// sDLaser := true ;
16239: LD_ADDR_EXP 85
16243: PUSH
16244: LD_INT 1
16246: ST_TO_ADDR
// if p3 = 30 then
16247: LD_VAR 0 3
16251: PUSH
16252: LD_INT 30
16254: EQUAL
16255: IFFALSE 16265
// sExchange := true ;
16257: LD_ADDR_EXP 86
16261: PUSH
16262: LD_INT 1
16264: ST_TO_ADDR
// if p3 = 31 then
16265: LD_VAR 0 3
16269: PUSH
16270: LD_INT 31
16272: EQUAL
16273: IFFALSE 16283
// sFac := true ;
16275: LD_ADDR_EXP 87
16279: PUSH
16280: LD_INT 1
16282: ST_TO_ADDR
// if p3 = 32 then
16283: LD_VAR 0 3
16287: PUSH
16288: LD_INT 32
16290: EQUAL
16291: IFFALSE 16301
// sPower := true ;
16293: LD_ADDR_EXP 88
16297: PUSH
16298: LD_INT 1
16300: ST_TO_ADDR
// if p3 = 33 then
16301: LD_VAR 0 3
16305: PUSH
16306: LD_INT 33
16308: EQUAL
16309: IFFALSE 16319
// sRandom := true ;
16311: LD_ADDR_EXP 89
16315: PUSH
16316: LD_INT 1
16318: ST_TO_ADDR
// if p3 = 34 then
16319: LD_VAR 0 3
16323: PUSH
16324: LD_INT 34
16326: EQUAL
16327: IFFALSE 16337
// sShield := true ;
16329: LD_ADDR_EXP 90
16333: PUSH
16334: LD_INT 1
16336: ST_TO_ADDR
// if p3 = 35 then
16337: LD_VAR 0 3
16341: PUSH
16342: LD_INT 35
16344: EQUAL
16345: IFFALSE 16355
// sTime := true ;
16347: LD_ADDR_EXP 91
16351: PUSH
16352: LD_INT 1
16354: ST_TO_ADDR
// if p3 = 36 then
16355: LD_VAR 0 3
16359: PUSH
16360: LD_INT 36
16362: EQUAL
16363: IFFALSE 16373
// sTools := true ;
16365: LD_ADDR_EXP 92
16369: PUSH
16370: LD_INT 1
16372: ST_TO_ADDR
// if p3 = 101 then
16373: LD_VAR 0 3
16377: PUSH
16378: LD_INT 101
16380: EQUAL
16381: IFFALSE 16391
// sSold := true ;
16383: LD_ADDR_EXP 57
16387: PUSH
16388: LD_INT 1
16390: ST_TO_ADDR
// if p3 = 102 then
16391: LD_VAR 0 3
16395: PUSH
16396: LD_INT 102
16398: EQUAL
16399: IFFALSE 16409
// sDiff := true ;
16401: LD_ADDR_EXP 58
16405: PUSH
16406: LD_INT 1
16408: ST_TO_ADDR
// if p3 = 103 then
16409: LD_VAR 0 3
16413: PUSH
16414: LD_INT 103
16416: EQUAL
16417: IFFALSE 16427
// sFog := true ;
16419: LD_ADDR_EXP 61
16423: PUSH
16424: LD_INT 1
16426: ST_TO_ADDR
// if p3 = 104 then
16427: LD_VAR 0 3
16431: PUSH
16432: LD_INT 104
16434: EQUAL
16435: IFFALSE 16445
// sReset := true ;
16437: LD_ADDR_EXP 62
16441: PUSH
16442: LD_INT 1
16444: ST_TO_ADDR
// if p3 = 105 then
16445: LD_VAR 0 3
16449: PUSH
16450: LD_INT 105
16452: EQUAL
16453: IFFALSE 16463
// sSun := true ;
16455: LD_ADDR_EXP 63
16459: PUSH
16460: LD_INT 1
16462: ST_TO_ADDR
// if p3 = 106 then
16463: LD_VAR 0 3
16467: PUSH
16468: LD_INT 106
16470: EQUAL
16471: IFFALSE 16481
// sTiger := true ;
16473: LD_ADDR_EXP 59
16477: PUSH
16478: LD_INT 1
16480: ST_TO_ADDR
// if p3 = 107 then
16481: LD_VAR 0 3
16485: PUSH
16486: LD_INT 107
16488: EQUAL
16489: IFFALSE 16499
// sBomb := true ;
16491: LD_ADDR_EXP 60
16495: PUSH
16496: LD_INT 1
16498: ST_TO_ADDR
// if p3 = 108 then
16499: LD_VAR 0 3
16503: PUSH
16504: LD_INT 108
16506: EQUAL
16507: IFFALSE 16517
// sWound := true ;
16509: LD_ADDR_EXP 68
16513: PUSH
16514: LD_INT 1
16516: ST_TO_ADDR
// if p3 = 109 then
16517: LD_VAR 0 3
16521: PUSH
16522: LD_INT 109
16524: EQUAL
16525: IFFALSE 16535
// sBetray := true ;
16527: LD_ADDR_EXP 72
16531: PUSH
16532: LD_INT 1
16534: ST_TO_ADDR
// if p3 = 110 then
16535: LD_VAR 0 3
16539: PUSH
16540: LD_INT 110
16542: EQUAL
16543: IFFALSE 16553
// sContamin := true ;
16545: LD_ADDR_EXP 73
16549: PUSH
16550: LD_INT 1
16552: ST_TO_ADDR
// if p3 = 111 then
16553: LD_VAR 0 3
16557: PUSH
16558: LD_INT 111
16560: EQUAL
16561: IFFALSE 16571
// sOil := true ;
16563: LD_ADDR_EXP 75
16567: PUSH
16568: LD_INT 1
16570: ST_TO_ADDR
// if p3 = 112 then
16571: LD_VAR 0 3
16575: PUSH
16576: LD_INT 112
16578: EQUAL
16579: IFFALSE 16589
// sStu := true ;
16581: LD_ADDR_EXP 79
16585: PUSH
16586: LD_INT 1
16588: ST_TO_ADDR
// if p3 = 113 then
16589: LD_VAR 0 3
16593: PUSH
16594: LD_INT 113
16596: EQUAL
16597: IFFALSE 16607
// sBazooka := true ;
16599: LD_ADDR_EXP 82
16603: PUSH
16604: LD_INT 1
16606: ST_TO_ADDR
// if p3 = 114 then
16607: LD_VAR 0 3
16611: PUSH
16612: LD_INT 114
16614: EQUAL
16615: IFFALSE 16625
// sMortar := true ;
16617: LD_ADDR_EXP 83
16621: PUSH
16622: LD_INT 1
16624: ST_TO_ADDR
// if p3 = 115 then
16625: LD_VAR 0 3
16629: PUSH
16630: LD_INT 115
16632: EQUAL
16633: IFFALSE 16643
// sRanger := true ;
16635: LD_ADDR_EXP 93
16639: PUSH
16640: LD_INT 1
16642: ST_TO_ADDR
// if p3 = 116 then
16643: LD_VAR 0 3
16647: PUSH
16648: LD_INT 116
16650: EQUAL
16651: IFFALSE 16661
// sComputer := true ;
16653: LD_ADDR_EXP 94
16657: PUSH
16658: LD_INT 1
16660: ST_TO_ADDR
// if p3 = 117 then
16661: LD_VAR 0 3
16665: PUSH
16666: LD_INT 117
16668: EQUAL
16669: IFFALSE 16679
// s30 := true ;
16671: LD_ADDR_EXP 95
16675: PUSH
16676: LD_INT 1
16678: ST_TO_ADDR
// if p3 = 118 then
16679: LD_VAR 0 3
16683: PUSH
16684: LD_INT 118
16686: EQUAL
16687: IFFALSE 16697
// s60 := true ;
16689: LD_ADDR_EXP 96
16693: PUSH
16694: LD_INT 1
16696: ST_TO_ADDR
// end ; if p2 = hack_mode then
16697: LD_VAR 0 2
16701: PUSH
16702: LD_INT 101
16704: EQUAL
16705: IFFALSE 16833
// begin case p3 of 1 :
16707: LD_VAR 0 3
16711: PUSH
16712: LD_INT 1
16714: DOUBLE
16715: EQUAL
16716: IFTRUE 16720
16718: GO 16727
16720: POP
// hHackUnlimitedResources ; 2 :
16721: CALL 28980 0 0
16725: GO 16833
16727: LD_INT 2
16729: DOUBLE
16730: EQUAL
16731: IFTRUE 16735
16733: GO 16742
16735: POP
// hHackSetLevel10 ; 3 :
16736: CALL 29113 0 0
16740: GO 16833
16742: LD_INT 3
16744: DOUBLE
16745: EQUAL
16746: IFTRUE 16750
16748: GO 16757
16750: POP
// hHackSetLevel10YourUnits ; 4 :
16751: CALL 29198 0 0
16755: GO 16833
16757: LD_INT 4
16759: DOUBLE
16760: EQUAL
16761: IFTRUE 16765
16763: GO 16772
16765: POP
// hHackInvincible ; 5 :
16766: CALL 29646 0 0
16770: GO 16833
16772: LD_INT 5
16774: DOUBLE
16775: EQUAL
16776: IFTRUE 16780
16778: GO 16787
16780: POP
// hHackInvisible ; 6 :
16781: CALL 29757 0 0
16785: GO 16833
16787: LD_INT 6
16789: DOUBLE
16790: EQUAL
16791: IFTRUE 16795
16793: GO 16802
16795: POP
// hHackChangeYourSide ; 7 :
16796: CALL 29814 0 0
16800: GO 16833
16802: LD_INT 7
16804: DOUBLE
16805: EQUAL
16806: IFTRUE 16810
16808: GO 16817
16810: POP
// hHackChangeUnitSide ; 8 :
16811: CALL 29856 0 0
16815: GO 16833
16817: LD_INT 8
16819: DOUBLE
16820: EQUAL
16821: IFTRUE 16825
16823: GO 16832
16825: POP
// hHackFog ; end ;
16826: CALL 29957 0 0
16830: GO 16833
16832: POP
// end ; if p2 = game_save_mode then
16833: LD_VAR 0 2
16837: PUSH
16838: LD_INT 102
16840: EQUAL
16841: IFFALSE 16896
// begin if p3 = 1 then
16843: LD_VAR 0 3
16847: PUSH
16848: LD_INT 1
16850: EQUAL
16851: IFFALSE 16863
// globalGameSaveCounter := p4 ;
16853: LD_ADDR_EXP 39
16857: PUSH
16858: LD_VAR 0 4
16862: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
16863: LD_VAR 0 3
16867: PUSH
16868: LD_INT 2
16870: EQUAL
16871: PUSH
16872: LD_EXP 39
16876: AND
16877: IFFALSE 16896
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
16879: LD_STRING setGameSaveCounter(
16881: PUSH
16882: LD_EXP 39
16886: STR
16887: PUSH
16888: LD_STRING )
16890: STR
16891: PPUSH
16892: CALL_OW 559
// end ; end ;
16896: LD_VAR 0 7
16900: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
16901: LD_INT 0
16903: PPUSH
// streamModeActive := false ;
16904: LD_ADDR_EXP 40
16908: PUSH
16909: LD_INT 0
16911: ST_TO_ADDR
// normalCounter := 36 ;
16912: LD_ADDR_EXP 41
16916: PUSH
16917: LD_INT 36
16919: ST_TO_ADDR
// hardcoreCounter := 18 ;
16920: LD_ADDR_EXP 42
16924: PUSH
16925: LD_INT 18
16927: ST_TO_ADDR
// sRocket := false ;
16928: LD_ADDR_EXP 45
16932: PUSH
16933: LD_INT 0
16935: ST_TO_ADDR
// sSpeed := false ;
16936: LD_ADDR_EXP 44
16940: PUSH
16941: LD_INT 0
16943: ST_TO_ADDR
// sEngine := false ;
16944: LD_ADDR_EXP 46
16948: PUSH
16949: LD_INT 0
16951: ST_TO_ADDR
// sSpec := false ;
16952: LD_ADDR_EXP 43
16956: PUSH
16957: LD_INT 0
16959: ST_TO_ADDR
// sLevel := false ;
16960: LD_ADDR_EXP 47
16964: PUSH
16965: LD_INT 0
16967: ST_TO_ADDR
// sArmoury := false ;
16968: LD_ADDR_EXP 48
16972: PUSH
16973: LD_INT 0
16975: ST_TO_ADDR
// sRadar := false ;
16976: LD_ADDR_EXP 49
16980: PUSH
16981: LD_INT 0
16983: ST_TO_ADDR
// sBunker := false ;
16984: LD_ADDR_EXP 50
16988: PUSH
16989: LD_INT 0
16991: ST_TO_ADDR
// sHack := false ;
16992: LD_ADDR_EXP 51
16996: PUSH
16997: LD_INT 0
16999: ST_TO_ADDR
// sFire := false ;
17000: LD_ADDR_EXP 52
17004: PUSH
17005: LD_INT 0
17007: ST_TO_ADDR
// sRefresh := false ;
17008: LD_ADDR_EXP 53
17012: PUSH
17013: LD_INT 0
17015: ST_TO_ADDR
// sExp := false ;
17016: LD_ADDR_EXP 54
17020: PUSH
17021: LD_INT 0
17023: ST_TO_ADDR
// sDepot := false ;
17024: LD_ADDR_EXP 55
17028: PUSH
17029: LD_INT 0
17031: ST_TO_ADDR
// sFlag := false ;
17032: LD_ADDR_EXP 56
17036: PUSH
17037: LD_INT 0
17039: ST_TO_ADDR
// sKamikadze := false ;
17040: LD_ADDR_EXP 64
17044: PUSH
17045: LD_INT 0
17047: ST_TO_ADDR
// sTroll := false ;
17048: LD_ADDR_EXP 65
17052: PUSH
17053: LD_INT 0
17055: ST_TO_ADDR
// sSlow := false ;
17056: LD_ADDR_EXP 66
17060: PUSH
17061: LD_INT 0
17063: ST_TO_ADDR
// sLack := false ;
17064: LD_ADDR_EXP 67
17068: PUSH
17069: LD_INT 0
17071: ST_TO_ADDR
// sTank := false ;
17072: LD_ADDR_EXP 69
17076: PUSH
17077: LD_INT 0
17079: ST_TO_ADDR
// sRemote := false ;
17080: LD_ADDR_EXP 70
17084: PUSH
17085: LD_INT 0
17087: ST_TO_ADDR
// sPowell := false ;
17088: LD_ADDR_EXP 71
17092: PUSH
17093: LD_INT 0
17095: ST_TO_ADDR
// sTeleport := false ;
17096: LD_ADDR_EXP 74
17100: PUSH
17101: LD_INT 0
17103: ST_TO_ADDR
// sOilTower := false ;
17104: LD_ADDR_EXP 76
17108: PUSH
17109: LD_INT 0
17111: ST_TO_ADDR
// sShovel := false ;
17112: LD_ADDR_EXP 77
17116: PUSH
17117: LD_INT 0
17119: ST_TO_ADDR
// sSheik := false ;
17120: LD_ADDR_EXP 78
17124: PUSH
17125: LD_INT 0
17127: ST_TO_ADDR
// sEarthquake := false ;
17128: LD_ADDR_EXP 80
17132: PUSH
17133: LD_INT 0
17135: ST_TO_ADDR
// sAI := false ;
17136: LD_ADDR_EXP 81
17140: PUSH
17141: LD_INT 0
17143: ST_TO_ADDR
// sCargo := false ;
17144: LD_ADDR_EXP 84
17148: PUSH
17149: LD_INT 0
17151: ST_TO_ADDR
// sDLaser := false ;
17152: LD_ADDR_EXP 85
17156: PUSH
17157: LD_INT 0
17159: ST_TO_ADDR
// sExchange := false ;
17160: LD_ADDR_EXP 86
17164: PUSH
17165: LD_INT 0
17167: ST_TO_ADDR
// sFac := false ;
17168: LD_ADDR_EXP 87
17172: PUSH
17173: LD_INT 0
17175: ST_TO_ADDR
// sPower := false ;
17176: LD_ADDR_EXP 88
17180: PUSH
17181: LD_INT 0
17183: ST_TO_ADDR
// sRandom := false ;
17184: LD_ADDR_EXP 89
17188: PUSH
17189: LD_INT 0
17191: ST_TO_ADDR
// sShield := false ;
17192: LD_ADDR_EXP 90
17196: PUSH
17197: LD_INT 0
17199: ST_TO_ADDR
// sTime := false ;
17200: LD_ADDR_EXP 91
17204: PUSH
17205: LD_INT 0
17207: ST_TO_ADDR
// sTools := false ;
17208: LD_ADDR_EXP 92
17212: PUSH
17213: LD_INT 0
17215: ST_TO_ADDR
// sSold := false ;
17216: LD_ADDR_EXP 57
17220: PUSH
17221: LD_INT 0
17223: ST_TO_ADDR
// sDiff := false ;
17224: LD_ADDR_EXP 58
17228: PUSH
17229: LD_INT 0
17231: ST_TO_ADDR
// sFog := false ;
17232: LD_ADDR_EXP 61
17236: PUSH
17237: LD_INT 0
17239: ST_TO_ADDR
// sReset := false ;
17240: LD_ADDR_EXP 62
17244: PUSH
17245: LD_INT 0
17247: ST_TO_ADDR
// sSun := false ;
17248: LD_ADDR_EXP 63
17252: PUSH
17253: LD_INT 0
17255: ST_TO_ADDR
// sTiger := false ;
17256: LD_ADDR_EXP 59
17260: PUSH
17261: LD_INT 0
17263: ST_TO_ADDR
// sBomb := false ;
17264: LD_ADDR_EXP 60
17268: PUSH
17269: LD_INT 0
17271: ST_TO_ADDR
// sWound := false ;
17272: LD_ADDR_EXP 68
17276: PUSH
17277: LD_INT 0
17279: ST_TO_ADDR
// sBetray := false ;
17280: LD_ADDR_EXP 72
17284: PUSH
17285: LD_INT 0
17287: ST_TO_ADDR
// sContamin := false ;
17288: LD_ADDR_EXP 73
17292: PUSH
17293: LD_INT 0
17295: ST_TO_ADDR
// sOil := false ;
17296: LD_ADDR_EXP 75
17300: PUSH
17301: LD_INT 0
17303: ST_TO_ADDR
// sStu := false ;
17304: LD_ADDR_EXP 79
17308: PUSH
17309: LD_INT 0
17311: ST_TO_ADDR
// sBazooka := false ;
17312: LD_ADDR_EXP 82
17316: PUSH
17317: LD_INT 0
17319: ST_TO_ADDR
// sMortar := false ;
17320: LD_ADDR_EXP 83
17324: PUSH
17325: LD_INT 0
17327: ST_TO_ADDR
// sRanger := false ;
17328: LD_ADDR_EXP 93
17332: PUSH
17333: LD_INT 0
17335: ST_TO_ADDR
// sComputer := false ;
17336: LD_ADDR_EXP 94
17340: PUSH
17341: LD_INT 0
17343: ST_TO_ADDR
// s30 := false ;
17344: LD_ADDR_EXP 95
17348: PUSH
17349: LD_INT 0
17351: ST_TO_ADDR
// s60 := false ;
17352: LD_ADDR_EXP 96
17356: PUSH
17357: LD_INT 0
17359: ST_TO_ADDR
// end ;
17360: LD_VAR 0 1
17364: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
17365: LD_INT 0
17367: PPUSH
17368: PPUSH
17369: PPUSH
17370: PPUSH
17371: PPUSH
17372: PPUSH
17373: PPUSH
// result := [ ] ;
17374: LD_ADDR_VAR 0 2
17378: PUSH
17379: EMPTY
17380: ST_TO_ADDR
// if campaign_id = 1 then
17381: LD_OWVAR 69
17385: PUSH
17386: LD_INT 1
17388: EQUAL
17389: IFFALSE 20555
// begin case mission_number of 1 :
17391: LD_OWVAR 70
17395: PUSH
17396: LD_INT 1
17398: DOUBLE
17399: EQUAL
17400: IFTRUE 17404
17402: GO 17480
17404: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
17405: LD_ADDR_VAR 0 2
17409: PUSH
17410: LD_INT 2
17412: PUSH
17413: LD_INT 4
17415: PUSH
17416: LD_INT 11
17418: PUSH
17419: LD_INT 12
17421: PUSH
17422: LD_INT 15
17424: PUSH
17425: LD_INT 16
17427: PUSH
17428: LD_INT 22
17430: PUSH
17431: LD_INT 23
17433: PUSH
17434: LD_INT 26
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: PUSH
17448: LD_INT 101
17450: PUSH
17451: LD_INT 102
17453: PUSH
17454: LD_INT 106
17456: PUSH
17457: LD_INT 116
17459: PUSH
17460: LD_INT 117
17462: PUSH
17463: LD_INT 118
17465: PUSH
17466: EMPTY
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: ST_TO_ADDR
17478: GO 20553
17480: LD_INT 2
17482: DOUBLE
17483: EQUAL
17484: IFTRUE 17488
17486: GO 17572
17488: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
17489: LD_ADDR_VAR 0 2
17493: PUSH
17494: LD_INT 2
17496: PUSH
17497: LD_INT 4
17499: PUSH
17500: LD_INT 11
17502: PUSH
17503: LD_INT 12
17505: PUSH
17506: LD_INT 15
17508: PUSH
17509: LD_INT 16
17511: PUSH
17512: LD_INT 22
17514: PUSH
17515: LD_INT 23
17517: PUSH
17518: LD_INT 26
17520: PUSH
17521: EMPTY
17522: LIST
17523: LIST
17524: LIST
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: PUSH
17532: LD_INT 101
17534: PUSH
17535: LD_INT 102
17537: PUSH
17538: LD_INT 105
17540: PUSH
17541: LD_INT 106
17543: PUSH
17544: LD_INT 108
17546: PUSH
17547: LD_INT 116
17549: PUSH
17550: LD_INT 117
17552: PUSH
17553: LD_INT 118
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: ST_TO_ADDR
17570: GO 20553
17572: LD_INT 3
17574: DOUBLE
17575: EQUAL
17576: IFTRUE 17580
17578: GO 17668
17580: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
17581: LD_ADDR_VAR 0 2
17585: PUSH
17586: LD_INT 2
17588: PUSH
17589: LD_INT 4
17591: PUSH
17592: LD_INT 5
17594: PUSH
17595: LD_INT 11
17597: PUSH
17598: LD_INT 12
17600: PUSH
17601: LD_INT 15
17603: PUSH
17604: LD_INT 16
17606: PUSH
17607: LD_INT 22
17609: PUSH
17610: LD_INT 26
17612: PUSH
17613: LD_INT 36
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: LIST
17620: LIST
17621: LIST
17622: LIST
17623: LIST
17624: LIST
17625: LIST
17626: LIST
17627: PUSH
17628: LD_INT 101
17630: PUSH
17631: LD_INT 102
17633: PUSH
17634: LD_INT 105
17636: PUSH
17637: LD_INT 106
17639: PUSH
17640: LD_INT 108
17642: PUSH
17643: LD_INT 116
17645: PUSH
17646: LD_INT 117
17648: PUSH
17649: LD_INT 118
17651: PUSH
17652: EMPTY
17653: LIST
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: LIST
17660: LIST
17661: PUSH
17662: EMPTY
17663: LIST
17664: LIST
17665: ST_TO_ADDR
17666: GO 20553
17668: LD_INT 4
17670: DOUBLE
17671: EQUAL
17672: IFTRUE 17676
17674: GO 17772
17676: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
17677: LD_ADDR_VAR 0 2
17681: PUSH
17682: LD_INT 2
17684: PUSH
17685: LD_INT 4
17687: PUSH
17688: LD_INT 5
17690: PUSH
17691: LD_INT 8
17693: PUSH
17694: LD_INT 11
17696: PUSH
17697: LD_INT 12
17699: PUSH
17700: LD_INT 15
17702: PUSH
17703: LD_INT 16
17705: PUSH
17706: LD_INT 22
17708: PUSH
17709: LD_INT 23
17711: PUSH
17712: LD_INT 26
17714: PUSH
17715: LD_INT 36
17717: PUSH
17718: EMPTY
17719: LIST
17720: LIST
17721: LIST
17722: LIST
17723: LIST
17724: LIST
17725: LIST
17726: LIST
17727: LIST
17728: LIST
17729: LIST
17730: LIST
17731: PUSH
17732: LD_INT 101
17734: PUSH
17735: LD_INT 102
17737: PUSH
17738: LD_INT 105
17740: PUSH
17741: LD_INT 106
17743: PUSH
17744: LD_INT 108
17746: PUSH
17747: LD_INT 116
17749: PUSH
17750: LD_INT 117
17752: PUSH
17753: LD_INT 118
17755: PUSH
17756: EMPTY
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: LIST
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: ST_TO_ADDR
17770: GO 20553
17772: LD_INT 5
17774: DOUBLE
17775: EQUAL
17776: IFTRUE 17780
17778: GO 17892
17780: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
17781: LD_ADDR_VAR 0 2
17785: PUSH
17786: LD_INT 2
17788: PUSH
17789: LD_INT 4
17791: PUSH
17792: LD_INT 5
17794: PUSH
17795: LD_INT 6
17797: PUSH
17798: LD_INT 8
17800: PUSH
17801: LD_INT 11
17803: PUSH
17804: LD_INT 12
17806: PUSH
17807: LD_INT 15
17809: PUSH
17810: LD_INT 16
17812: PUSH
17813: LD_INT 22
17815: PUSH
17816: LD_INT 23
17818: PUSH
17819: LD_INT 25
17821: PUSH
17822: LD_INT 26
17824: PUSH
17825: LD_INT 36
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: LIST
17832: LIST
17833: LIST
17834: LIST
17835: LIST
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: LIST
17841: LIST
17842: LIST
17843: PUSH
17844: LD_INT 101
17846: PUSH
17847: LD_INT 102
17849: PUSH
17850: LD_INT 105
17852: PUSH
17853: LD_INT 106
17855: PUSH
17856: LD_INT 108
17858: PUSH
17859: LD_INT 109
17861: PUSH
17862: LD_INT 112
17864: PUSH
17865: LD_INT 116
17867: PUSH
17868: LD_INT 117
17870: PUSH
17871: LD_INT 118
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: LIST
17878: LIST
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: LIST
17884: LIST
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: ST_TO_ADDR
17890: GO 20553
17892: LD_INT 6
17894: DOUBLE
17895: EQUAL
17896: IFTRUE 17900
17898: GO 18032
17900: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
17901: LD_ADDR_VAR 0 2
17905: PUSH
17906: LD_INT 2
17908: PUSH
17909: LD_INT 4
17911: PUSH
17912: LD_INT 5
17914: PUSH
17915: LD_INT 6
17917: PUSH
17918: LD_INT 8
17920: PUSH
17921: LD_INT 11
17923: PUSH
17924: LD_INT 12
17926: PUSH
17927: LD_INT 15
17929: PUSH
17930: LD_INT 16
17932: PUSH
17933: LD_INT 20
17935: PUSH
17936: LD_INT 21
17938: PUSH
17939: LD_INT 22
17941: PUSH
17942: LD_INT 23
17944: PUSH
17945: LD_INT 25
17947: PUSH
17948: LD_INT 26
17950: PUSH
17951: LD_INT 30
17953: PUSH
17954: LD_INT 31
17956: PUSH
17957: LD_INT 32
17959: PUSH
17960: LD_INT 36
17962: PUSH
17963: EMPTY
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: LIST
17982: LIST
17983: PUSH
17984: LD_INT 101
17986: PUSH
17987: LD_INT 102
17989: PUSH
17990: LD_INT 105
17992: PUSH
17993: LD_INT 106
17995: PUSH
17996: LD_INT 108
17998: PUSH
17999: LD_INT 109
18001: PUSH
18002: LD_INT 112
18004: PUSH
18005: LD_INT 116
18007: PUSH
18008: LD_INT 117
18010: PUSH
18011: LD_INT 118
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: PUSH
18026: EMPTY
18027: LIST
18028: LIST
18029: ST_TO_ADDR
18030: GO 20553
18032: LD_INT 7
18034: DOUBLE
18035: EQUAL
18036: IFTRUE 18040
18038: GO 18152
18040: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
18041: LD_ADDR_VAR 0 2
18045: PUSH
18046: LD_INT 2
18048: PUSH
18049: LD_INT 4
18051: PUSH
18052: LD_INT 5
18054: PUSH
18055: LD_INT 7
18057: PUSH
18058: LD_INT 11
18060: PUSH
18061: LD_INT 12
18063: PUSH
18064: LD_INT 15
18066: PUSH
18067: LD_INT 16
18069: PUSH
18070: LD_INT 20
18072: PUSH
18073: LD_INT 21
18075: PUSH
18076: LD_INT 22
18078: PUSH
18079: LD_INT 23
18081: PUSH
18082: LD_INT 25
18084: PUSH
18085: LD_INT 26
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: LIST
18100: LIST
18101: LIST
18102: LIST
18103: PUSH
18104: LD_INT 101
18106: PUSH
18107: LD_INT 102
18109: PUSH
18110: LD_INT 103
18112: PUSH
18113: LD_INT 105
18115: PUSH
18116: LD_INT 106
18118: PUSH
18119: LD_INT 108
18121: PUSH
18122: LD_INT 112
18124: PUSH
18125: LD_INT 116
18127: PUSH
18128: LD_INT 117
18130: PUSH
18131: LD_INT 118
18133: PUSH
18134: EMPTY
18135: LIST
18136: LIST
18137: LIST
18138: LIST
18139: LIST
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: LIST
18145: PUSH
18146: EMPTY
18147: LIST
18148: LIST
18149: ST_TO_ADDR
18150: GO 20553
18152: LD_INT 8
18154: DOUBLE
18155: EQUAL
18156: IFTRUE 18160
18158: GO 18300
18160: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
18161: LD_ADDR_VAR 0 2
18165: PUSH
18166: LD_INT 2
18168: PUSH
18169: LD_INT 4
18171: PUSH
18172: LD_INT 5
18174: PUSH
18175: LD_INT 6
18177: PUSH
18178: LD_INT 7
18180: PUSH
18181: LD_INT 8
18183: PUSH
18184: LD_INT 11
18186: PUSH
18187: LD_INT 12
18189: PUSH
18190: LD_INT 15
18192: PUSH
18193: LD_INT 16
18195: PUSH
18196: LD_INT 20
18198: PUSH
18199: LD_INT 21
18201: PUSH
18202: LD_INT 22
18204: PUSH
18205: LD_INT 23
18207: PUSH
18208: LD_INT 25
18210: PUSH
18211: LD_INT 26
18213: PUSH
18214: LD_INT 30
18216: PUSH
18217: LD_INT 31
18219: PUSH
18220: LD_INT 32
18222: PUSH
18223: LD_INT 36
18225: PUSH
18226: EMPTY
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: LIST
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: LIST
18240: LIST
18241: LIST
18242: LIST
18243: LIST
18244: LIST
18245: LIST
18246: LIST
18247: PUSH
18248: LD_INT 101
18250: PUSH
18251: LD_INT 102
18253: PUSH
18254: LD_INT 103
18256: PUSH
18257: LD_INT 105
18259: PUSH
18260: LD_INT 106
18262: PUSH
18263: LD_INT 108
18265: PUSH
18266: LD_INT 109
18268: PUSH
18269: LD_INT 112
18271: PUSH
18272: LD_INT 116
18274: PUSH
18275: LD_INT 117
18277: PUSH
18278: LD_INT 118
18280: PUSH
18281: EMPTY
18282: LIST
18283: LIST
18284: LIST
18285: LIST
18286: LIST
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: ST_TO_ADDR
18298: GO 20553
18300: LD_INT 9
18302: DOUBLE
18303: EQUAL
18304: IFTRUE 18308
18306: GO 18456
18308: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
18309: LD_ADDR_VAR 0 2
18313: PUSH
18314: LD_INT 2
18316: PUSH
18317: LD_INT 4
18319: PUSH
18320: LD_INT 5
18322: PUSH
18323: LD_INT 6
18325: PUSH
18326: LD_INT 7
18328: PUSH
18329: LD_INT 8
18331: PUSH
18332: LD_INT 11
18334: PUSH
18335: LD_INT 12
18337: PUSH
18338: LD_INT 15
18340: PUSH
18341: LD_INT 16
18343: PUSH
18344: LD_INT 20
18346: PUSH
18347: LD_INT 21
18349: PUSH
18350: LD_INT 22
18352: PUSH
18353: LD_INT 23
18355: PUSH
18356: LD_INT 25
18358: PUSH
18359: LD_INT 26
18361: PUSH
18362: LD_INT 28
18364: PUSH
18365: LD_INT 30
18367: PUSH
18368: LD_INT 31
18370: PUSH
18371: LD_INT 32
18373: PUSH
18374: LD_INT 36
18376: PUSH
18377: EMPTY
18378: LIST
18379: LIST
18380: LIST
18381: LIST
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: LIST
18395: LIST
18396: LIST
18397: LIST
18398: LIST
18399: PUSH
18400: LD_INT 101
18402: PUSH
18403: LD_INT 102
18405: PUSH
18406: LD_INT 103
18408: PUSH
18409: LD_INT 105
18411: PUSH
18412: LD_INT 106
18414: PUSH
18415: LD_INT 108
18417: PUSH
18418: LD_INT 109
18420: PUSH
18421: LD_INT 112
18423: PUSH
18424: LD_INT 114
18426: PUSH
18427: LD_INT 116
18429: PUSH
18430: LD_INT 117
18432: PUSH
18433: LD_INT 118
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: LIST
18440: LIST
18441: LIST
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: LIST
18448: LIST
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: ST_TO_ADDR
18454: GO 20553
18456: LD_INT 10
18458: DOUBLE
18459: EQUAL
18460: IFTRUE 18464
18462: GO 18660
18464: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
18465: LD_ADDR_VAR 0 2
18469: PUSH
18470: LD_INT 2
18472: PUSH
18473: LD_INT 4
18475: PUSH
18476: LD_INT 5
18478: PUSH
18479: LD_INT 6
18481: PUSH
18482: LD_INT 7
18484: PUSH
18485: LD_INT 8
18487: PUSH
18488: LD_INT 9
18490: PUSH
18491: LD_INT 10
18493: PUSH
18494: LD_INT 11
18496: PUSH
18497: LD_INT 12
18499: PUSH
18500: LD_INT 13
18502: PUSH
18503: LD_INT 14
18505: PUSH
18506: LD_INT 15
18508: PUSH
18509: LD_INT 16
18511: PUSH
18512: LD_INT 17
18514: PUSH
18515: LD_INT 18
18517: PUSH
18518: LD_INT 19
18520: PUSH
18521: LD_INT 20
18523: PUSH
18524: LD_INT 21
18526: PUSH
18527: LD_INT 22
18529: PUSH
18530: LD_INT 23
18532: PUSH
18533: LD_INT 24
18535: PUSH
18536: LD_INT 25
18538: PUSH
18539: LD_INT 26
18541: PUSH
18542: LD_INT 28
18544: PUSH
18545: LD_INT 30
18547: PUSH
18548: LD_INT 31
18550: PUSH
18551: LD_INT 32
18553: PUSH
18554: LD_INT 36
18556: PUSH
18557: EMPTY
18558: LIST
18559: LIST
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: LIST
18587: PUSH
18588: LD_INT 101
18590: PUSH
18591: LD_INT 102
18593: PUSH
18594: LD_INT 103
18596: PUSH
18597: LD_INT 104
18599: PUSH
18600: LD_INT 105
18602: PUSH
18603: LD_INT 106
18605: PUSH
18606: LD_INT 107
18608: PUSH
18609: LD_INT 108
18611: PUSH
18612: LD_INT 109
18614: PUSH
18615: LD_INT 110
18617: PUSH
18618: LD_INT 111
18620: PUSH
18621: LD_INT 112
18623: PUSH
18624: LD_INT 114
18626: PUSH
18627: LD_INT 116
18629: PUSH
18630: LD_INT 117
18632: PUSH
18633: LD_INT 118
18635: PUSH
18636: EMPTY
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: LIST
18648: LIST
18649: LIST
18650: LIST
18651: LIST
18652: LIST
18653: PUSH
18654: EMPTY
18655: LIST
18656: LIST
18657: ST_TO_ADDR
18658: GO 20553
18660: LD_INT 11
18662: DOUBLE
18663: EQUAL
18664: IFTRUE 18668
18666: GO 18872
18668: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
18669: LD_ADDR_VAR 0 2
18673: PUSH
18674: LD_INT 2
18676: PUSH
18677: LD_INT 3
18679: PUSH
18680: LD_INT 4
18682: PUSH
18683: LD_INT 5
18685: PUSH
18686: LD_INT 6
18688: PUSH
18689: LD_INT 7
18691: PUSH
18692: LD_INT 8
18694: PUSH
18695: LD_INT 9
18697: PUSH
18698: LD_INT 10
18700: PUSH
18701: LD_INT 11
18703: PUSH
18704: LD_INT 12
18706: PUSH
18707: LD_INT 13
18709: PUSH
18710: LD_INT 14
18712: PUSH
18713: LD_INT 15
18715: PUSH
18716: LD_INT 16
18718: PUSH
18719: LD_INT 17
18721: PUSH
18722: LD_INT 18
18724: PUSH
18725: LD_INT 19
18727: PUSH
18728: LD_INT 20
18730: PUSH
18731: LD_INT 21
18733: PUSH
18734: LD_INT 22
18736: PUSH
18737: LD_INT 23
18739: PUSH
18740: LD_INT 24
18742: PUSH
18743: LD_INT 25
18745: PUSH
18746: LD_INT 26
18748: PUSH
18749: LD_INT 28
18751: PUSH
18752: LD_INT 30
18754: PUSH
18755: LD_INT 31
18757: PUSH
18758: LD_INT 32
18760: PUSH
18761: LD_INT 34
18763: PUSH
18764: LD_INT 36
18766: PUSH
18767: EMPTY
18768: LIST
18769: LIST
18770: LIST
18771: LIST
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: LIST
18784: LIST
18785: LIST
18786: LIST
18787: LIST
18788: LIST
18789: LIST
18790: LIST
18791: LIST
18792: LIST
18793: LIST
18794: LIST
18795: LIST
18796: LIST
18797: LIST
18798: LIST
18799: PUSH
18800: LD_INT 101
18802: PUSH
18803: LD_INT 102
18805: PUSH
18806: LD_INT 103
18808: PUSH
18809: LD_INT 104
18811: PUSH
18812: LD_INT 105
18814: PUSH
18815: LD_INT 106
18817: PUSH
18818: LD_INT 107
18820: PUSH
18821: LD_INT 108
18823: PUSH
18824: LD_INT 109
18826: PUSH
18827: LD_INT 110
18829: PUSH
18830: LD_INT 111
18832: PUSH
18833: LD_INT 112
18835: PUSH
18836: LD_INT 114
18838: PUSH
18839: LD_INT 116
18841: PUSH
18842: LD_INT 117
18844: PUSH
18845: LD_INT 118
18847: PUSH
18848: EMPTY
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: LIST
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: ST_TO_ADDR
18870: GO 20553
18872: LD_INT 12
18874: DOUBLE
18875: EQUAL
18876: IFTRUE 18880
18878: GO 19100
18880: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
18881: LD_ADDR_VAR 0 2
18885: PUSH
18886: LD_INT 1
18888: PUSH
18889: LD_INT 2
18891: PUSH
18892: LD_INT 3
18894: PUSH
18895: LD_INT 4
18897: PUSH
18898: LD_INT 5
18900: PUSH
18901: LD_INT 6
18903: PUSH
18904: LD_INT 7
18906: PUSH
18907: LD_INT 8
18909: PUSH
18910: LD_INT 9
18912: PUSH
18913: LD_INT 10
18915: PUSH
18916: LD_INT 11
18918: PUSH
18919: LD_INT 12
18921: PUSH
18922: LD_INT 13
18924: PUSH
18925: LD_INT 14
18927: PUSH
18928: LD_INT 15
18930: PUSH
18931: LD_INT 16
18933: PUSH
18934: LD_INT 17
18936: PUSH
18937: LD_INT 18
18939: PUSH
18940: LD_INT 19
18942: PUSH
18943: LD_INT 20
18945: PUSH
18946: LD_INT 21
18948: PUSH
18949: LD_INT 22
18951: PUSH
18952: LD_INT 23
18954: PUSH
18955: LD_INT 24
18957: PUSH
18958: LD_INT 25
18960: PUSH
18961: LD_INT 26
18963: PUSH
18964: LD_INT 27
18966: PUSH
18967: LD_INT 28
18969: PUSH
18970: LD_INT 30
18972: PUSH
18973: LD_INT 31
18975: PUSH
18976: LD_INT 32
18978: PUSH
18979: LD_INT 33
18981: PUSH
18982: LD_INT 34
18984: PUSH
18985: LD_INT 36
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: LIST
19000: LIST
19001: LIST
19002: LIST
19003: LIST
19004: LIST
19005: LIST
19006: LIST
19007: LIST
19008: LIST
19009: LIST
19010: LIST
19011: LIST
19012: LIST
19013: LIST
19014: LIST
19015: LIST
19016: LIST
19017: LIST
19018: LIST
19019: LIST
19020: LIST
19021: LIST
19022: LIST
19023: PUSH
19024: LD_INT 101
19026: PUSH
19027: LD_INT 102
19029: PUSH
19030: LD_INT 103
19032: PUSH
19033: LD_INT 104
19035: PUSH
19036: LD_INT 105
19038: PUSH
19039: LD_INT 106
19041: PUSH
19042: LD_INT 107
19044: PUSH
19045: LD_INT 108
19047: PUSH
19048: LD_INT 109
19050: PUSH
19051: LD_INT 110
19053: PUSH
19054: LD_INT 111
19056: PUSH
19057: LD_INT 112
19059: PUSH
19060: LD_INT 113
19062: PUSH
19063: LD_INT 114
19065: PUSH
19066: LD_INT 116
19068: PUSH
19069: LD_INT 117
19071: PUSH
19072: LD_INT 118
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: LIST
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: LIST
19084: LIST
19085: LIST
19086: LIST
19087: LIST
19088: LIST
19089: LIST
19090: LIST
19091: LIST
19092: LIST
19093: PUSH
19094: EMPTY
19095: LIST
19096: LIST
19097: ST_TO_ADDR
19098: GO 20553
19100: LD_INT 13
19102: DOUBLE
19103: EQUAL
19104: IFTRUE 19108
19106: GO 19316
19108: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
19109: LD_ADDR_VAR 0 2
19113: PUSH
19114: LD_INT 1
19116: PUSH
19117: LD_INT 2
19119: PUSH
19120: LD_INT 3
19122: PUSH
19123: LD_INT 4
19125: PUSH
19126: LD_INT 5
19128: PUSH
19129: LD_INT 8
19131: PUSH
19132: LD_INT 9
19134: PUSH
19135: LD_INT 10
19137: PUSH
19138: LD_INT 11
19140: PUSH
19141: LD_INT 12
19143: PUSH
19144: LD_INT 14
19146: PUSH
19147: LD_INT 15
19149: PUSH
19150: LD_INT 16
19152: PUSH
19153: LD_INT 17
19155: PUSH
19156: LD_INT 18
19158: PUSH
19159: LD_INT 19
19161: PUSH
19162: LD_INT 20
19164: PUSH
19165: LD_INT 21
19167: PUSH
19168: LD_INT 22
19170: PUSH
19171: LD_INT 23
19173: PUSH
19174: LD_INT 24
19176: PUSH
19177: LD_INT 25
19179: PUSH
19180: LD_INT 26
19182: PUSH
19183: LD_INT 27
19185: PUSH
19186: LD_INT 28
19188: PUSH
19189: LD_INT 30
19191: PUSH
19192: LD_INT 31
19194: PUSH
19195: LD_INT 32
19197: PUSH
19198: LD_INT 33
19200: PUSH
19201: LD_INT 34
19203: PUSH
19204: LD_INT 36
19206: PUSH
19207: EMPTY
19208: LIST
19209: LIST
19210: LIST
19211: LIST
19212: LIST
19213: LIST
19214: LIST
19215: LIST
19216: LIST
19217: LIST
19218: LIST
19219: LIST
19220: LIST
19221: LIST
19222: LIST
19223: LIST
19224: LIST
19225: LIST
19226: LIST
19227: LIST
19228: LIST
19229: LIST
19230: LIST
19231: LIST
19232: LIST
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: PUSH
19240: LD_INT 101
19242: PUSH
19243: LD_INT 102
19245: PUSH
19246: LD_INT 103
19248: PUSH
19249: LD_INT 104
19251: PUSH
19252: LD_INT 105
19254: PUSH
19255: LD_INT 106
19257: PUSH
19258: LD_INT 107
19260: PUSH
19261: LD_INT 108
19263: PUSH
19264: LD_INT 109
19266: PUSH
19267: LD_INT 110
19269: PUSH
19270: LD_INT 111
19272: PUSH
19273: LD_INT 112
19275: PUSH
19276: LD_INT 113
19278: PUSH
19279: LD_INT 114
19281: PUSH
19282: LD_INT 116
19284: PUSH
19285: LD_INT 117
19287: PUSH
19288: LD_INT 118
19290: PUSH
19291: EMPTY
19292: LIST
19293: LIST
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: LIST
19300: LIST
19301: LIST
19302: LIST
19303: LIST
19304: LIST
19305: LIST
19306: LIST
19307: LIST
19308: LIST
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: ST_TO_ADDR
19314: GO 20553
19316: LD_INT 14
19318: DOUBLE
19319: EQUAL
19320: IFTRUE 19324
19322: GO 19548
19324: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
19325: LD_ADDR_VAR 0 2
19329: PUSH
19330: LD_INT 1
19332: PUSH
19333: LD_INT 2
19335: PUSH
19336: LD_INT 3
19338: PUSH
19339: LD_INT 4
19341: PUSH
19342: LD_INT 5
19344: PUSH
19345: LD_INT 6
19347: PUSH
19348: LD_INT 7
19350: PUSH
19351: LD_INT 8
19353: PUSH
19354: LD_INT 9
19356: PUSH
19357: LD_INT 10
19359: PUSH
19360: LD_INT 11
19362: PUSH
19363: LD_INT 12
19365: PUSH
19366: LD_INT 13
19368: PUSH
19369: LD_INT 14
19371: PUSH
19372: LD_INT 15
19374: PUSH
19375: LD_INT 16
19377: PUSH
19378: LD_INT 17
19380: PUSH
19381: LD_INT 18
19383: PUSH
19384: LD_INT 19
19386: PUSH
19387: LD_INT 20
19389: PUSH
19390: LD_INT 21
19392: PUSH
19393: LD_INT 22
19395: PUSH
19396: LD_INT 23
19398: PUSH
19399: LD_INT 24
19401: PUSH
19402: LD_INT 25
19404: PUSH
19405: LD_INT 26
19407: PUSH
19408: LD_INT 27
19410: PUSH
19411: LD_INT 28
19413: PUSH
19414: LD_INT 29
19416: PUSH
19417: LD_INT 30
19419: PUSH
19420: LD_INT 31
19422: PUSH
19423: LD_INT 32
19425: PUSH
19426: LD_INT 33
19428: PUSH
19429: LD_INT 34
19431: PUSH
19432: LD_INT 36
19434: PUSH
19435: EMPTY
19436: LIST
19437: LIST
19438: LIST
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: LIST
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: LIST
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: LIST
19466: LIST
19467: LIST
19468: LIST
19469: LIST
19470: LIST
19471: PUSH
19472: LD_INT 101
19474: PUSH
19475: LD_INT 102
19477: PUSH
19478: LD_INT 103
19480: PUSH
19481: LD_INT 104
19483: PUSH
19484: LD_INT 105
19486: PUSH
19487: LD_INT 106
19489: PUSH
19490: LD_INT 107
19492: PUSH
19493: LD_INT 108
19495: PUSH
19496: LD_INT 109
19498: PUSH
19499: LD_INT 110
19501: PUSH
19502: LD_INT 111
19504: PUSH
19505: LD_INT 112
19507: PUSH
19508: LD_INT 113
19510: PUSH
19511: LD_INT 114
19513: PUSH
19514: LD_INT 116
19516: PUSH
19517: LD_INT 117
19519: PUSH
19520: LD_INT 118
19522: PUSH
19523: EMPTY
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: PUSH
19542: EMPTY
19543: LIST
19544: LIST
19545: ST_TO_ADDR
19546: GO 20553
19548: LD_INT 15
19550: DOUBLE
19551: EQUAL
19552: IFTRUE 19556
19554: GO 19780
19556: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
19557: LD_ADDR_VAR 0 2
19561: PUSH
19562: LD_INT 1
19564: PUSH
19565: LD_INT 2
19567: PUSH
19568: LD_INT 3
19570: PUSH
19571: LD_INT 4
19573: PUSH
19574: LD_INT 5
19576: PUSH
19577: LD_INT 6
19579: PUSH
19580: LD_INT 7
19582: PUSH
19583: LD_INT 8
19585: PUSH
19586: LD_INT 9
19588: PUSH
19589: LD_INT 10
19591: PUSH
19592: LD_INT 11
19594: PUSH
19595: LD_INT 12
19597: PUSH
19598: LD_INT 13
19600: PUSH
19601: LD_INT 14
19603: PUSH
19604: LD_INT 15
19606: PUSH
19607: LD_INT 16
19609: PUSH
19610: LD_INT 17
19612: PUSH
19613: LD_INT 18
19615: PUSH
19616: LD_INT 19
19618: PUSH
19619: LD_INT 20
19621: PUSH
19622: LD_INT 21
19624: PUSH
19625: LD_INT 22
19627: PUSH
19628: LD_INT 23
19630: PUSH
19631: LD_INT 24
19633: PUSH
19634: LD_INT 25
19636: PUSH
19637: LD_INT 26
19639: PUSH
19640: LD_INT 27
19642: PUSH
19643: LD_INT 28
19645: PUSH
19646: LD_INT 29
19648: PUSH
19649: LD_INT 30
19651: PUSH
19652: LD_INT 31
19654: PUSH
19655: LD_INT 32
19657: PUSH
19658: LD_INT 33
19660: PUSH
19661: LD_INT 34
19663: PUSH
19664: LD_INT 36
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: LIST
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: LIST
19678: LIST
19679: LIST
19680: LIST
19681: LIST
19682: LIST
19683: LIST
19684: LIST
19685: LIST
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: LIST
19691: LIST
19692: LIST
19693: LIST
19694: LIST
19695: LIST
19696: LIST
19697: LIST
19698: LIST
19699: LIST
19700: LIST
19701: LIST
19702: LIST
19703: PUSH
19704: LD_INT 101
19706: PUSH
19707: LD_INT 102
19709: PUSH
19710: LD_INT 103
19712: PUSH
19713: LD_INT 104
19715: PUSH
19716: LD_INT 105
19718: PUSH
19719: LD_INT 106
19721: PUSH
19722: LD_INT 107
19724: PUSH
19725: LD_INT 108
19727: PUSH
19728: LD_INT 109
19730: PUSH
19731: LD_INT 110
19733: PUSH
19734: LD_INT 111
19736: PUSH
19737: LD_INT 112
19739: PUSH
19740: LD_INT 113
19742: PUSH
19743: LD_INT 114
19745: PUSH
19746: LD_INT 116
19748: PUSH
19749: LD_INT 117
19751: PUSH
19752: LD_INT 118
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: PUSH
19774: EMPTY
19775: LIST
19776: LIST
19777: ST_TO_ADDR
19778: GO 20553
19780: LD_INT 16
19782: DOUBLE
19783: EQUAL
19784: IFTRUE 19788
19786: GO 19924
19788: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
19789: LD_ADDR_VAR 0 2
19793: PUSH
19794: LD_INT 2
19796: PUSH
19797: LD_INT 4
19799: PUSH
19800: LD_INT 5
19802: PUSH
19803: LD_INT 7
19805: PUSH
19806: LD_INT 11
19808: PUSH
19809: LD_INT 12
19811: PUSH
19812: LD_INT 15
19814: PUSH
19815: LD_INT 16
19817: PUSH
19818: LD_INT 20
19820: PUSH
19821: LD_INT 21
19823: PUSH
19824: LD_INT 22
19826: PUSH
19827: LD_INT 23
19829: PUSH
19830: LD_INT 25
19832: PUSH
19833: LD_INT 26
19835: PUSH
19836: LD_INT 30
19838: PUSH
19839: LD_INT 31
19841: PUSH
19842: LD_INT 32
19844: PUSH
19845: LD_INT 33
19847: PUSH
19848: LD_INT 34
19850: PUSH
19851: EMPTY
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: PUSH
19872: LD_INT 101
19874: PUSH
19875: LD_INT 102
19877: PUSH
19878: LD_INT 103
19880: PUSH
19881: LD_INT 106
19883: PUSH
19884: LD_INT 108
19886: PUSH
19887: LD_INT 112
19889: PUSH
19890: LD_INT 113
19892: PUSH
19893: LD_INT 114
19895: PUSH
19896: LD_INT 116
19898: PUSH
19899: LD_INT 117
19901: PUSH
19902: LD_INT 118
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: PUSH
19918: EMPTY
19919: LIST
19920: LIST
19921: ST_TO_ADDR
19922: GO 20553
19924: LD_INT 17
19926: DOUBLE
19927: EQUAL
19928: IFTRUE 19932
19930: GO 20156
19932: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
19933: LD_ADDR_VAR 0 2
19937: PUSH
19938: LD_INT 1
19940: PUSH
19941: LD_INT 2
19943: PUSH
19944: LD_INT 3
19946: PUSH
19947: LD_INT 4
19949: PUSH
19950: LD_INT 5
19952: PUSH
19953: LD_INT 6
19955: PUSH
19956: LD_INT 7
19958: PUSH
19959: LD_INT 8
19961: PUSH
19962: LD_INT 9
19964: PUSH
19965: LD_INT 10
19967: PUSH
19968: LD_INT 11
19970: PUSH
19971: LD_INT 12
19973: PUSH
19974: LD_INT 13
19976: PUSH
19977: LD_INT 14
19979: PUSH
19980: LD_INT 15
19982: PUSH
19983: LD_INT 16
19985: PUSH
19986: LD_INT 17
19988: PUSH
19989: LD_INT 18
19991: PUSH
19992: LD_INT 19
19994: PUSH
19995: LD_INT 20
19997: PUSH
19998: LD_INT 21
20000: PUSH
20001: LD_INT 22
20003: PUSH
20004: LD_INT 23
20006: PUSH
20007: LD_INT 24
20009: PUSH
20010: LD_INT 25
20012: PUSH
20013: LD_INT 26
20015: PUSH
20016: LD_INT 27
20018: PUSH
20019: LD_INT 28
20021: PUSH
20022: LD_INT 29
20024: PUSH
20025: LD_INT 30
20027: PUSH
20028: LD_INT 31
20030: PUSH
20031: LD_INT 32
20033: PUSH
20034: LD_INT 33
20036: PUSH
20037: LD_INT 34
20039: PUSH
20040: LD_INT 36
20042: PUSH
20043: EMPTY
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: LIST
20052: LIST
20053: LIST
20054: LIST
20055: LIST
20056: LIST
20057: LIST
20058: LIST
20059: LIST
20060: LIST
20061: LIST
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: LIST
20078: LIST
20079: PUSH
20080: LD_INT 101
20082: PUSH
20083: LD_INT 102
20085: PUSH
20086: LD_INT 103
20088: PUSH
20089: LD_INT 104
20091: PUSH
20092: LD_INT 105
20094: PUSH
20095: LD_INT 106
20097: PUSH
20098: LD_INT 107
20100: PUSH
20101: LD_INT 108
20103: PUSH
20104: LD_INT 109
20106: PUSH
20107: LD_INT 110
20109: PUSH
20110: LD_INT 111
20112: PUSH
20113: LD_INT 112
20115: PUSH
20116: LD_INT 113
20118: PUSH
20119: LD_INT 114
20121: PUSH
20122: LD_INT 116
20124: PUSH
20125: LD_INT 117
20127: PUSH
20128: LD_INT 118
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: PUSH
20150: EMPTY
20151: LIST
20152: LIST
20153: ST_TO_ADDR
20154: GO 20553
20156: LD_INT 18
20158: DOUBLE
20159: EQUAL
20160: IFTRUE 20164
20162: GO 20312
20164: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
20165: LD_ADDR_VAR 0 2
20169: PUSH
20170: LD_INT 2
20172: PUSH
20173: LD_INT 4
20175: PUSH
20176: LD_INT 5
20178: PUSH
20179: LD_INT 7
20181: PUSH
20182: LD_INT 11
20184: PUSH
20185: LD_INT 12
20187: PUSH
20188: LD_INT 15
20190: PUSH
20191: LD_INT 16
20193: PUSH
20194: LD_INT 20
20196: PUSH
20197: LD_INT 21
20199: PUSH
20200: LD_INT 22
20202: PUSH
20203: LD_INT 23
20205: PUSH
20206: LD_INT 25
20208: PUSH
20209: LD_INT 26
20211: PUSH
20212: LD_INT 30
20214: PUSH
20215: LD_INT 31
20217: PUSH
20218: LD_INT 32
20220: PUSH
20221: LD_INT 33
20223: PUSH
20224: LD_INT 34
20226: PUSH
20227: LD_INT 35
20229: PUSH
20230: LD_INT 36
20232: PUSH
20233: EMPTY
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: PUSH
20256: LD_INT 101
20258: PUSH
20259: LD_INT 102
20261: PUSH
20262: LD_INT 103
20264: PUSH
20265: LD_INT 106
20267: PUSH
20268: LD_INT 108
20270: PUSH
20271: LD_INT 112
20273: PUSH
20274: LD_INT 113
20276: PUSH
20277: LD_INT 114
20279: PUSH
20280: LD_INT 115
20282: PUSH
20283: LD_INT 116
20285: PUSH
20286: LD_INT 117
20288: PUSH
20289: LD_INT 118
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: PUSH
20306: EMPTY
20307: LIST
20308: LIST
20309: ST_TO_ADDR
20310: GO 20553
20312: LD_INT 19
20314: DOUBLE
20315: EQUAL
20316: IFTRUE 20320
20318: GO 20552
20320: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
20321: LD_ADDR_VAR 0 2
20325: PUSH
20326: LD_INT 1
20328: PUSH
20329: LD_INT 2
20331: PUSH
20332: LD_INT 3
20334: PUSH
20335: LD_INT 4
20337: PUSH
20338: LD_INT 5
20340: PUSH
20341: LD_INT 6
20343: PUSH
20344: LD_INT 7
20346: PUSH
20347: LD_INT 8
20349: PUSH
20350: LD_INT 9
20352: PUSH
20353: LD_INT 10
20355: PUSH
20356: LD_INT 11
20358: PUSH
20359: LD_INT 12
20361: PUSH
20362: LD_INT 13
20364: PUSH
20365: LD_INT 14
20367: PUSH
20368: LD_INT 15
20370: PUSH
20371: LD_INT 16
20373: PUSH
20374: LD_INT 17
20376: PUSH
20377: LD_INT 18
20379: PUSH
20380: LD_INT 19
20382: PUSH
20383: LD_INT 20
20385: PUSH
20386: LD_INT 21
20388: PUSH
20389: LD_INT 22
20391: PUSH
20392: LD_INT 23
20394: PUSH
20395: LD_INT 24
20397: PUSH
20398: LD_INT 25
20400: PUSH
20401: LD_INT 26
20403: PUSH
20404: LD_INT 27
20406: PUSH
20407: LD_INT 28
20409: PUSH
20410: LD_INT 29
20412: PUSH
20413: LD_INT 30
20415: PUSH
20416: LD_INT 31
20418: PUSH
20419: LD_INT 32
20421: PUSH
20422: LD_INT 33
20424: PUSH
20425: LD_INT 34
20427: PUSH
20428: LD_INT 35
20430: PUSH
20431: LD_INT 36
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: LIST
20438: LIST
20439: LIST
20440: LIST
20441: LIST
20442: LIST
20443: LIST
20444: LIST
20445: LIST
20446: LIST
20447: LIST
20448: LIST
20449: LIST
20450: LIST
20451: LIST
20452: LIST
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: LIST
20466: LIST
20467: LIST
20468: LIST
20469: LIST
20470: LIST
20471: PUSH
20472: LD_INT 101
20474: PUSH
20475: LD_INT 102
20477: PUSH
20478: LD_INT 103
20480: PUSH
20481: LD_INT 104
20483: PUSH
20484: LD_INT 105
20486: PUSH
20487: LD_INT 106
20489: PUSH
20490: LD_INT 107
20492: PUSH
20493: LD_INT 108
20495: PUSH
20496: LD_INT 109
20498: PUSH
20499: LD_INT 110
20501: PUSH
20502: LD_INT 111
20504: PUSH
20505: LD_INT 112
20507: PUSH
20508: LD_INT 113
20510: PUSH
20511: LD_INT 114
20513: PUSH
20514: LD_INT 115
20516: PUSH
20517: LD_INT 116
20519: PUSH
20520: LD_INT 117
20522: PUSH
20523: LD_INT 118
20525: PUSH
20526: EMPTY
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: LIST
20538: LIST
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: LIST
20544: LIST
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: ST_TO_ADDR
20550: GO 20553
20552: POP
// end else
20553: GO 20784
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
20555: LD_ADDR_VAR 0 2
20559: PUSH
20560: LD_INT 1
20562: PUSH
20563: LD_INT 2
20565: PUSH
20566: LD_INT 3
20568: PUSH
20569: LD_INT 4
20571: PUSH
20572: LD_INT 5
20574: PUSH
20575: LD_INT 6
20577: PUSH
20578: LD_INT 7
20580: PUSH
20581: LD_INT 8
20583: PUSH
20584: LD_INT 9
20586: PUSH
20587: LD_INT 10
20589: PUSH
20590: LD_INT 11
20592: PUSH
20593: LD_INT 12
20595: PUSH
20596: LD_INT 13
20598: PUSH
20599: LD_INT 14
20601: PUSH
20602: LD_INT 15
20604: PUSH
20605: LD_INT 16
20607: PUSH
20608: LD_INT 17
20610: PUSH
20611: LD_INT 18
20613: PUSH
20614: LD_INT 19
20616: PUSH
20617: LD_INT 20
20619: PUSH
20620: LD_INT 21
20622: PUSH
20623: LD_INT 22
20625: PUSH
20626: LD_INT 23
20628: PUSH
20629: LD_INT 24
20631: PUSH
20632: LD_INT 25
20634: PUSH
20635: LD_INT 26
20637: PUSH
20638: LD_INT 27
20640: PUSH
20641: LD_INT 28
20643: PUSH
20644: LD_INT 29
20646: PUSH
20647: LD_INT 30
20649: PUSH
20650: LD_INT 31
20652: PUSH
20653: LD_INT 32
20655: PUSH
20656: LD_INT 33
20658: PUSH
20659: LD_INT 34
20661: PUSH
20662: LD_INT 35
20664: PUSH
20665: LD_INT 36
20667: PUSH
20668: EMPTY
20669: LIST
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: PUSH
20706: LD_INT 101
20708: PUSH
20709: LD_INT 102
20711: PUSH
20712: LD_INT 103
20714: PUSH
20715: LD_INT 104
20717: PUSH
20718: LD_INT 105
20720: PUSH
20721: LD_INT 106
20723: PUSH
20724: LD_INT 107
20726: PUSH
20727: LD_INT 108
20729: PUSH
20730: LD_INT 109
20732: PUSH
20733: LD_INT 110
20735: PUSH
20736: LD_INT 111
20738: PUSH
20739: LD_INT 112
20741: PUSH
20742: LD_INT 113
20744: PUSH
20745: LD_INT 114
20747: PUSH
20748: LD_INT 115
20750: PUSH
20751: LD_INT 116
20753: PUSH
20754: LD_INT 117
20756: PUSH
20757: LD_INT 118
20759: PUSH
20760: EMPTY
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: PUSH
20780: EMPTY
20781: LIST
20782: LIST
20783: ST_TO_ADDR
// if result then
20784: LD_VAR 0 2
20788: IFFALSE 21574
// begin normal :=  ;
20790: LD_ADDR_VAR 0 5
20794: PUSH
20795: LD_STRING 
20797: ST_TO_ADDR
// hardcore :=  ;
20798: LD_ADDR_VAR 0 6
20802: PUSH
20803: LD_STRING 
20805: ST_TO_ADDR
// active :=  ;
20806: LD_ADDR_VAR 0 7
20810: PUSH
20811: LD_STRING 
20813: ST_TO_ADDR
// for i = 1 to normalCounter do
20814: LD_ADDR_VAR 0 8
20818: PUSH
20819: DOUBLE
20820: LD_INT 1
20822: DEC
20823: ST_TO_ADDR
20824: LD_EXP 41
20828: PUSH
20829: FOR_TO
20830: IFFALSE 20931
// begin tmp := 0 ;
20832: LD_ADDR_VAR 0 3
20836: PUSH
20837: LD_STRING 0
20839: ST_TO_ADDR
// if result [ 1 ] then
20840: LD_VAR 0 2
20844: PUSH
20845: LD_INT 1
20847: ARRAY
20848: IFFALSE 20913
// if result [ 1 ] [ 1 ] = i then
20850: LD_VAR 0 2
20854: PUSH
20855: LD_INT 1
20857: ARRAY
20858: PUSH
20859: LD_INT 1
20861: ARRAY
20862: PUSH
20863: LD_VAR 0 8
20867: EQUAL
20868: IFFALSE 20913
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
20870: LD_ADDR_VAR 0 2
20874: PUSH
20875: LD_VAR 0 2
20879: PPUSH
20880: LD_INT 1
20882: PPUSH
20883: LD_VAR 0 2
20887: PUSH
20888: LD_INT 1
20890: ARRAY
20891: PPUSH
20892: LD_INT 1
20894: PPUSH
20895: CALL_OW 3
20899: PPUSH
20900: CALL_OW 1
20904: ST_TO_ADDR
// tmp := 1 ;
20905: LD_ADDR_VAR 0 3
20909: PUSH
20910: LD_STRING 1
20912: ST_TO_ADDR
// end ; normal := normal & tmp ;
20913: LD_ADDR_VAR 0 5
20917: PUSH
20918: LD_VAR 0 5
20922: PUSH
20923: LD_VAR 0 3
20927: STR
20928: ST_TO_ADDR
// end ;
20929: GO 20829
20931: POP
20932: POP
// for i = 1 to hardcoreCounter do
20933: LD_ADDR_VAR 0 8
20937: PUSH
20938: DOUBLE
20939: LD_INT 1
20941: DEC
20942: ST_TO_ADDR
20943: LD_EXP 42
20947: PUSH
20948: FOR_TO
20949: IFFALSE 21054
// begin tmp := 0 ;
20951: LD_ADDR_VAR 0 3
20955: PUSH
20956: LD_STRING 0
20958: ST_TO_ADDR
// if result [ 2 ] then
20959: LD_VAR 0 2
20963: PUSH
20964: LD_INT 2
20966: ARRAY
20967: IFFALSE 21036
// if result [ 2 ] [ 1 ] = 100 + i then
20969: LD_VAR 0 2
20973: PUSH
20974: LD_INT 2
20976: ARRAY
20977: PUSH
20978: LD_INT 1
20980: ARRAY
20981: PUSH
20982: LD_INT 100
20984: PUSH
20985: LD_VAR 0 8
20989: PLUS
20990: EQUAL
20991: IFFALSE 21036
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
20993: LD_ADDR_VAR 0 2
20997: PUSH
20998: LD_VAR 0 2
21002: PPUSH
21003: LD_INT 2
21005: PPUSH
21006: LD_VAR 0 2
21010: PUSH
21011: LD_INT 2
21013: ARRAY
21014: PPUSH
21015: LD_INT 1
21017: PPUSH
21018: CALL_OW 3
21022: PPUSH
21023: CALL_OW 1
21027: ST_TO_ADDR
// tmp := 1 ;
21028: LD_ADDR_VAR 0 3
21032: PUSH
21033: LD_STRING 1
21035: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
21036: LD_ADDR_VAR 0 6
21040: PUSH
21041: LD_VAR 0 6
21045: PUSH
21046: LD_VAR 0 3
21050: STR
21051: ST_TO_ADDR
// end ;
21052: GO 20948
21054: POP
21055: POP
// if isGameLoad then
21056: LD_VAR 0 1
21060: IFFALSE 21535
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
21062: LD_ADDR_VAR 0 4
21066: PUSH
21067: LD_EXP 45
21071: PUSH
21072: LD_EXP 44
21076: PUSH
21077: LD_EXP 46
21081: PUSH
21082: LD_EXP 43
21086: PUSH
21087: LD_EXP 47
21091: PUSH
21092: LD_EXP 48
21096: PUSH
21097: LD_EXP 49
21101: PUSH
21102: LD_EXP 50
21106: PUSH
21107: LD_EXP 51
21111: PUSH
21112: LD_EXP 52
21116: PUSH
21117: LD_EXP 53
21121: PUSH
21122: LD_EXP 54
21126: PUSH
21127: LD_EXP 55
21131: PUSH
21132: LD_EXP 56
21136: PUSH
21137: LD_EXP 64
21141: PUSH
21142: LD_EXP 65
21146: PUSH
21147: LD_EXP 66
21151: PUSH
21152: LD_EXP 67
21156: PUSH
21157: LD_EXP 69
21161: PUSH
21162: LD_EXP 70
21166: PUSH
21167: LD_EXP 71
21171: PUSH
21172: LD_EXP 74
21176: PUSH
21177: LD_EXP 76
21181: PUSH
21182: LD_EXP 77
21186: PUSH
21187: LD_EXP 78
21191: PUSH
21192: LD_EXP 80
21196: PUSH
21197: LD_EXP 81
21201: PUSH
21202: LD_EXP 84
21206: PUSH
21207: LD_EXP 85
21211: PUSH
21212: LD_EXP 86
21216: PUSH
21217: LD_EXP 87
21221: PUSH
21222: LD_EXP 88
21226: PUSH
21227: LD_EXP 89
21231: PUSH
21232: LD_EXP 90
21236: PUSH
21237: LD_EXP 91
21241: PUSH
21242: LD_EXP 92
21246: PUSH
21247: LD_EXP 57
21251: PUSH
21252: LD_EXP 58
21256: PUSH
21257: LD_EXP 61
21261: PUSH
21262: LD_EXP 62
21266: PUSH
21267: LD_EXP 63
21271: PUSH
21272: LD_EXP 59
21276: PUSH
21277: LD_EXP 60
21281: PUSH
21282: LD_EXP 68
21286: PUSH
21287: LD_EXP 72
21291: PUSH
21292: LD_EXP 73
21296: PUSH
21297: LD_EXP 75
21301: PUSH
21302: LD_EXP 79
21306: PUSH
21307: LD_EXP 82
21311: PUSH
21312: LD_EXP 83
21316: PUSH
21317: LD_EXP 93
21321: PUSH
21322: LD_EXP 94
21326: PUSH
21327: LD_EXP 95
21331: PUSH
21332: LD_EXP 96
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: ST_TO_ADDR
// tmp :=  ;
21393: LD_ADDR_VAR 0 3
21397: PUSH
21398: LD_STRING 
21400: ST_TO_ADDR
// for i = 1 to normalCounter do
21401: LD_ADDR_VAR 0 8
21405: PUSH
21406: DOUBLE
21407: LD_INT 1
21409: DEC
21410: ST_TO_ADDR
21411: LD_EXP 41
21415: PUSH
21416: FOR_TO
21417: IFFALSE 21453
// begin if flags [ i ] then
21419: LD_VAR 0 4
21423: PUSH
21424: LD_VAR 0 8
21428: ARRAY
21429: IFFALSE 21451
// tmp := tmp & i & ; ;
21431: LD_ADDR_VAR 0 3
21435: PUSH
21436: LD_VAR 0 3
21440: PUSH
21441: LD_VAR 0 8
21445: STR
21446: PUSH
21447: LD_STRING ;
21449: STR
21450: ST_TO_ADDR
// end ;
21451: GO 21416
21453: POP
21454: POP
// for i = 1 to hardcoreCounter do
21455: LD_ADDR_VAR 0 8
21459: PUSH
21460: DOUBLE
21461: LD_INT 1
21463: DEC
21464: ST_TO_ADDR
21465: LD_EXP 42
21469: PUSH
21470: FOR_TO
21471: IFFALSE 21517
// begin if flags [ normalCounter + i ] then
21473: LD_VAR 0 4
21477: PUSH
21478: LD_EXP 41
21482: PUSH
21483: LD_VAR 0 8
21487: PLUS
21488: ARRAY
21489: IFFALSE 21515
// tmp := tmp & ( 100 + i ) & ; ;
21491: LD_ADDR_VAR 0 3
21495: PUSH
21496: LD_VAR 0 3
21500: PUSH
21501: LD_INT 100
21503: PUSH
21504: LD_VAR 0 8
21508: PLUS
21509: STR
21510: PUSH
21511: LD_STRING ;
21513: STR
21514: ST_TO_ADDR
// end ;
21515: GO 21470
21517: POP
21518: POP
// if tmp then
21519: LD_VAR 0 3
21523: IFFALSE 21535
// active := tmp ;
21525: LD_ADDR_VAR 0 7
21529: PUSH
21530: LD_VAR 0 3
21534: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
21535: LD_STRING getStreamItemsFromMission("
21537: PUSH
21538: LD_VAR 0 5
21542: STR
21543: PUSH
21544: LD_STRING ","
21546: STR
21547: PUSH
21548: LD_VAR 0 6
21552: STR
21553: PUSH
21554: LD_STRING ","
21556: STR
21557: PUSH
21558: LD_VAR 0 7
21562: STR
21563: PUSH
21564: LD_STRING ")
21566: STR
21567: PPUSH
21568: CALL_OW 559
// end else
21572: GO 21581
// ToLua ( getStreamItemsFromMission("","","") ) ;
21574: LD_STRING getStreamItemsFromMission("","","")
21576: PPUSH
21577: CALL_OW 559
// end ;
21581: LD_VAR 0 2
21585: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
21586: LD_EXP 40
21590: PUSH
21591: LD_EXP 45
21595: AND
21596: IFFALSE 21720
21598: GO 21600
21600: DISABLE
21601: LD_INT 0
21603: PPUSH
21604: PPUSH
// begin enable ;
21605: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
21606: LD_ADDR_VAR 0 2
21610: PUSH
21611: LD_INT 22
21613: PUSH
21614: LD_OWVAR 2
21618: PUSH
21619: EMPTY
21620: LIST
21621: LIST
21622: PUSH
21623: LD_INT 2
21625: PUSH
21626: LD_INT 34
21628: PUSH
21629: LD_INT 7
21631: PUSH
21632: EMPTY
21633: LIST
21634: LIST
21635: PUSH
21636: LD_INT 34
21638: PUSH
21639: LD_INT 45
21641: PUSH
21642: EMPTY
21643: LIST
21644: LIST
21645: PUSH
21646: LD_INT 34
21648: PUSH
21649: LD_INT 28
21651: PUSH
21652: EMPTY
21653: LIST
21654: LIST
21655: PUSH
21656: LD_INT 34
21658: PUSH
21659: LD_INT 47
21661: PUSH
21662: EMPTY
21663: LIST
21664: LIST
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: PUSH
21673: EMPTY
21674: LIST
21675: LIST
21676: PPUSH
21677: CALL_OW 69
21681: ST_TO_ADDR
// if not tmp then
21682: LD_VAR 0 2
21686: NOT
21687: IFFALSE 21691
// exit ;
21689: GO 21720
// for i in tmp do
21691: LD_ADDR_VAR 0 1
21695: PUSH
21696: LD_VAR 0 2
21700: PUSH
21701: FOR_IN
21702: IFFALSE 21718
// begin SetLives ( i , 0 ) ;
21704: LD_VAR 0 1
21708: PPUSH
21709: LD_INT 0
21711: PPUSH
21712: CALL_OW 234
// end ;
21716: GO 21701
21718: POP
21719: POP
// end ;
21720: PPOPN 2
21722: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
21723: LD_EXP 40
21727: PUSH
21728: LD_EXP 46
21732: AND
21733: IFFALSE 21817
21735: GO 21737
21737: DISABLE
21738: LD_INT 0
21740: PPUSH
21741: PPUSH
// begin enable ;
21742: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
21743: LD_ADDR_VAR 0 2
21747: PUSH
21748: LD_INT 22
21750: PUSH
21751: LD_OWVAR 2
21755: PUSH
21756: EMPTY
21757: LIST
21758: LIST
21759: PUSH
21760: LD_INT 32
21762: PUSH
21763: LD_INT 3
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: PUSH
21770: EMPTY
21771: LIST
21772: LIST
21773: PPUSH
21774: CALL_OW 69
21778: ST_TO_ADDR
// if not tmp then
21779: LD_VAR 0 2
21783: NOT
21784: IFFALSE 21788
// exit ;
21786: GO 21817
// for i in tmp do
21788: LD_ADDR_VAR 0 1
21792: PUSH
21793: LD_VAR 0 2
21797: PUSH
21798: FOR_IN
21799: IFFALSE 21815
// begin SetLives ( i , 0 ) ;
21801: LD_VAR 0 1
21805: PPUSH
21806: LD_INT 0
21808: PPUSH
21809: CALL_OW 234
// end ;
21813: GO 21798
21815: POP
21816: POP
// end ;
21817: PPOPN 2
21819: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
21820: LD_EXP 40
21824: PUSH
21825: LD_EXP 43
21829: AND
21830: IFFALSE 21923
21832: GO 21834
21834: DISABLE
21835: LD_INT 0
21837: PPUSH
// begin enable ;
21838: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
21839: LD_ADDR_VAR 0 1
21843: PUSH
21844: LD_INT 22
21846: PUSH
21847: LD_OWVAR 2
21851: PUSH
21852: EMPTY
21853: LIST
21854: LIST
21855: PUSH
21856: LD_INT 2
21858: PUSH
21859: LD_INT 25
21861: PUSH
21862: LD_INT 5
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: PUSH
21869: LD_INT 25
21871: PUSH
21872: LD_INT 9
21874: PUSH
21875: EMPTY
21876: LIST
21877: LIST
21878: PUSH
21879: LD_INT 25
21881: PUSH
21882: LD_INT 8
21884: PUSH
21885: EMPTY
21886: LIST
21887: LIST
21888: PUSH
21889: EMPTY
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: PUSH
21895: EMPTY
21896: LIST
21897: LIST
21898: PPUSH
21899: CALL_OW 69
21903: PUSH
21904: FOR_IN
21905: IFFALSE 21921
// begin SetClass ( i , 1 ) ;
21907: LD_VAR 0 1
21911: PPUSH
21912: LD_INT 1
21914: PPUSH
21915: CALL_OW 336
// end ;
21919: GO 21904
21921: POP
21922: POP
// end ;
21923: PPOPN 1
21925: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
21926: LD_EXP 40
21930: PUSH
21931: LD_EXP 44
21935: AND
21936: PUSH
21937: LD_OWVAR 65
21941: PUSH
21942: LD_INT 7
21944: LESS
21945: AND
21946: IFFALSE 21960
21948: GO 21950
21950: DISABLE
// begin enable ;
21951: ENABLE
// game_speed := 7 ;
21952: LD_ADDR_OWVAR 65
21956: PUSH
21957: LD_INT 7
21959: ST_TO_ADDR
// end ;
21960: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
21961: LD_EXP 40
21965: PUSH
21966: LD_EXP 47
21970: AND
21971: IFFALSE 22173
21973: GO 21975
21975: DISABLE
21976: LD_INT 0
21978: PPUSH
21979: PPUSH
21980: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21981: LD_ADDR_VAR 0 3
21985: PUSH
21986: LD_INT 81
21988: PUSH
21989: LD_OWVAR 2
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: PUSH
21998: LD_INT 21
22000: PUSH
22001: LD_INT 1
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: PUSH
22008: EMPTY
22009: LIST
22010: LIST
22011: PPUSH
22012: CALL_OW 69
22016: ST_TO_ADDR
// if not tmp then
22017: LD_VAR 0 3
22021: NOT
22022: IFFALSE 22026
// exit ;
22024: GO 22173
// if tmp > 5 then
22026: LD_VAR 0 3
22030: PUSH
22031: LD_INT 5
22033: GREATER
22034: IFFALSE 22046
// k := 5 else
22036: LD_ADDR_VAR 0 2
22040: PUSH
22041: LD_INT 5
22043: ST_TO_ADDR
22044: GO 22056
// k := tmp ;
22046: LD_ADDR_VAR 0 2
22050: PUSH
22051: LD_VAR 0 3
22055: ST_TO_ADDR
// for i := 1 to k do
22056: LD_ADDR_VAR 0 1
22060: PUSH
22061: DOUBLE
22062: LD_INT 1
22064: DEC
22065: ST_TO_ADDR
22066: LD_VAR 0 2
22070: PUSH
22071: FOR_TO
22072: IFFALSE 22171
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
22074: LD_VAR 0 3
22078: PUSH
22079: LD_VAR 0 1
22083: ARRAY
22084: PPUSH
22085: LD_VAR 0 1
22089: PUSH
22090: LD_INT 4
22092: MOD
22093: PUSH
22094: LD_INT 1
22096: PLUS
22097: PPUSH
22098: CALL_OW 259
22102: PUSH
22103: LD_INT 10
22105: LESS
22106: IFFALSE 22169
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
22108: LD_VAR 0 3
22112: PUSH
22113: LD_VAR 0 1
22117: ARRAY
22118: PPUSH
22119: LD_VAR 0 1
22123: PUSH
22124: LD_INT 4
22126: MOD
22127: PUSH
22128: LD_INT 1
22130: PLUS
22131: PPUSH
22132: LD_VAR 0 3
22136: PUSH
22137: LD_VAR 0 1
22141: ARRAY
22142: PPUSH
22143: LD_VAR 0 1
22147: PUSH
22148: LD_INT 4
22150: MOD
22151: PUSH
22152: LD_INT 1
22154: PLUS
22155: PPUSH
22156: CALL_OW 259
22160: PUSH
22161: LD_INT 1
22163: PLUS
22164: PPUSH
22165: CALL_OW 237
22169: GO 22071
22171: POP
22172: POP
// end ;
22173: PPOPN 3
22175: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
22176: LD_EXP 40
22180: PUSH
22181: LD_EXP 48
22185: AND
22186: IFFALSE 22206
22188: GO 22190
22190: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
22191: LD_INT 4
22193: PPUSH
22194: LD_OWVAR 2
22198: PPUSH
22199: LD_INT 0
22201: PPUSH
22202: CALL_OW 324
22206: END
// every 0 0$1 trigger StreamModeActive and sShovel do
22207: LD_EXP 40
22211: PUSH
22212: LD_EXP 77
22216: AND
22217: IFFALSE 22237
22219: GO 22221
22221: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
22222: LD_INT 19
22224: PPUSH
22225: LD_OWVAR 2
22229: PPUSH
22230: LD_INT 0
22232: PPUSH
22233: CALL_OW 324
22237: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
22238: LD_EXP 40
22242: PUSH
22243: LD_EXP 49
22247: AND
22248: IFFALSE 22350
22250: GO 22252
22252: DISABLE
22253: LD_INT 0
22255: PPUSH
22256: PPUSH
// begin enable ;
22257: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
22258: LD_ADDR_VAR 0 2
22262: PUSH
22263: LD_INT 22
22265: PUSH
22266: LD_OWVAR 2
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: PUSH
22275: LD_INT 2
22277: PUSH
22278: LD_INT 34
22280: PUSH
22281: LD_INT 11
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: PUSH
22288: LD_INT 34
22290: PUSH
22291: LD_INT 30
22293: PUSH
22294: EMPTY
22295: LIST
22296: LIST
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: LIST
22302: PUSH
22303: EMPTY
22304: LIST
22305: LIST
22306: PPUSH
22307: CALL_OW 69
22311: ST_TO_ADDR
// if not tmp then
22312: LD_VAR 0 2
22316: NOT
22317: IFFALSE 22321
// exit ;
22319: GO 22350
// for i in tmp do
22321: LD_ADDR_VAR 0 1
22325: PUSH
22326: LD_VAR 0 2
22330: PUSH
22331: FOR_IN
22332: IFFALSE 22348
// begin SetLives ( i , 0 ) ;
22334: LD_VAR 0 1
22338: PPUSH
22339: LD_INT 0
22341: PPUSH
22342: CALL_OW 234
// end ;
22346: GO 22331
22348: POP
22349: POP
// end ;
22350: PPOPN 2
22352: END
// every 0 0$1 trigger StreamModeActive and sBunker do
22353: LD_EXP 40
22357: PUSH
22358: LD_EXP 50
22362: AND
22363: IFFALSE 22383
22365: GO 22367
22367: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
22368: LD_INT 32
22370: PPUSH
22371: LD_OWVAR 2
22375: PPUSH
22376: LD_INT 0
22378: PPUSH
22379: CALL_OW 324
22383: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
22384: LD_EXP 40
22388: PUSH
22389: LD_EXP 51
22393: AND
22394: IFFALSE 22575
22396: GO 22398
22398: DISABLE
22399: LD_INT 0
22401: PPUSH
22402: PPUSH
22403: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
22404: LD_ADDR_VAR 0 2
22408: PUSH
22409: LD_INT 22
22411: PUSH
22412: LD_OWVAR 2
22416: PUSH
22417: EMPTY
22418: LIST
22419: LIST
22420: PUSH
22421: LD_INT 33
22423: PUSH
22424: LD_INT 3
22426: PUSH
22427: EMPTY
22428: LIST
22429: LIST
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: PPUSH
22435: CALL_OW 69
22439: ST_TO_ADDR
// if not tmp then
22440: LD_VAR 0 2
22444: NOT
22445: IFFALSE 22449
// exit ;
22447: GO 22575
// side := 0 ;
22449: LD_ADDR_VAR 0 3
22453: PUSH
22454: LD_INT 0
22456: ST_TO_ADDR
// for i := 1 to 8 do
22457: LD_ADDR_VAR 0 1
22461: PUSH
22462: DOUBLE
22463: LD_INT 1
22465: DEC
22466: ST_TO_ADDR
22467: LD_INT 8
22469: PUSH
22470: FOR_TO
22471: IFFALSE 22519
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
22473: LD_OWVAR 2
22477: PUSH
22478: LD_VAR 0 1
22482: NONEQUAL
22483: PUSH
22484: LD_OWVAR 2
22488: PPUSH
22489: LD_VAR 0 1
22493: PPUSH
22494: CALL_OW 81
22498: PUSH
22499: LD_INT 2
22501: EQUAL
22502: AND
22503: IFFALSE 22517
// begin side := i ;
22505: LD_ADDR_VAR 0 3
22509: PUSH
22510: LD_VAR 0 1
22514: ST_TO_ADDR
// break ;
22515: GO 22519
// end ;
22517: GO 22470
22519: POP
22520: POP
// if not side then
22521: LD_VAR 0 3
22525: NOT
22526: IFFALSE 22530
// exit ;
22528: GO 22575
// for i := 1 to tmp do
22530: LD_ADDR_VAR 0 1
22534: PUSH
22535: DOUBLE
22536: LD_INT 1
22538: DEC
22539: ST_TO_ADDR
22540: LD_VAR 0 2
22544: PUSH
22545: FOR_TO
22546: IFFALSE 22573
// if Prob ( 60 ) then
22548: LD_INT 60
22550: PPUSH
22551: CALL_OW 13
22555: IFFALSE 22571
// SetSide ( i , side ) ;
22557: LD_VAR 0 1
22561: PPUSH
22562: LD_VAR 0 3
22566: PPUSH
22567: CALL_OW 235
22571: GO 22545
22573: POP
22574: POP
// end ;
22575: PPOPN 3
22577: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
22578: LD_EXP 40
22582: PUSH
22583: LD_EXP 53
22587: AND
22588: IFFALSE 22707
22590: GO 22592
22592: DISABLE
22593: LD_INT 0
22595: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
22596: LD_ADDR_VAR 0 1
22600: PUSH
22601: LD_INT 22
22603: PUSH
22604: LD_OWVAR 2
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: PUSH
22613: LD_INT 21
22615: PUSH
22616: LD_INT 1
22618: PUSH
22619: EMPTY
22620: LIST
22621: LIST
22622: PUSH
22623: LD_INT 3
22625: PUSH
22626: LD_INT 23
22628: PUSH
22629: LD_INT 0
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: LIST
22644: PPUSH
22645: CALL_OW 69
22649: PUSH
22650: FOR_IN
22651: IFFALSE 22705
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
22653: LD_VAR 0 1
22657: PPUSH
22658: CALL_OW 257
22662: PUSH
22663: LD_INT 1
22665: PUSH
22666: LD_INT 2
22668: PUSH
22669: LD_INT 3
22671: PUSH
22672: LD_INT 4
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: IN
22681: IFFALSE 22703
// SetClass ( un , rand ( 1 , 4 ) ) ;
22683: LD_VAR 0 1
22687: PPUSH
22688: LD_INT 1
22690: PPUSH
22691: LD_INT 4
22693: PPUSH
22694: CALL_OW 12
22698: PPUSH
22699: CALL_OW 336
22703: GO 22650
22705: POP
22706: POP
// end ;
22707: PPOPN 1
22709: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
22710: LD_EXP 40
22714: PUSH
22715: LD_EXP 52
22719: AND
22720: IFFALSE 22799
22722: GO 22724
22724: DISABLE
22725: LD_INT 0
22727: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22728: LD_ADDR_VAR 0 1
22732: PUSH
22733: LD_INT 22
22735: PUSH
22736: LD_OWVAR 2
22740: PUSH
22741: EMPTY
22742: LIST
22743: LIST
22744: PUSH
22745: LD_INT 21
22747: PUSH
22748: LD_INT 3
22750: PUSH
22751: EMPTY
22752: LIST
22753: LIST
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: PPUSH
22759: CALL_OW 69
22763: ST_TO_ADDR
// if not tmp then
22764: LD_VAR 0 1
22768: NOT
22769: IFFALSE 22773
// exit ;
22771: GO 22799
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
22773: LD_VAR 0 1
22777: PUSH
22778: LD_INT 1
22780: PPUSH
22781: LD_VAR 0 1
22785: PPUSH
22786: CALL_OW 12
22790: ARRAY
22791: PPUSH
22792: LD_INT 100
22794: PPUSH
22795: CALL_OW 234
// end ;
22799: PPOPN 1
22801: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
22802: LD_EXP 40
22806: PUSH
22807: LD_EXP 54
22811: AND
22812: IFFALSE 22910
22814: GO 22816
22816: DISABLE
22817: LD_INT 0
22819: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22820: LD_ADDR_VAR 0 1
22824: PUSH
22825: LD_INT 22
22827: PUSH
22828: LD_OWVAR 2
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: PUSH
22837: LD_INT 21
22839: PUSH
22840: LD_INT 1
22842: PUSH
22843: EMPTY
22844: LIST
22845: LIST
22846: PUSH
22847: EMPTY
22848: LIST
22849: LIST
22850: PPUSH
22851: CALL_OW 69
22855: ST_TO_ADDR
// if not tmp then
22856: LD_VAR 0 1
22860: NOT
22861: IFFALSE 22865
// exit ;
22863: GO 22910
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
22865: LD_VAR 0 1
22869: PUSH
22870: LD_INT 1
22872: PPUSH
22873: LD_VAR 0 1
22877: PPUSH
22878: CALL_OW 12
22882: ARRAY
22883: PPUSH
22884: LD_INT 1
22886: PPUSH
22887: LD_INT 4
22889: PPUSH
22890: CALL_OW 12
22894: PPUSH
22895: LD_INT 3000
22897: PPUSH
22898: LD_INT 9000
22900: PPUSH
22901: CALL_OW 12
22905: PPUSH
22906: CALL_OW 492
// end ;
22910: PPOPN 1
22912: END
// every 0 0$1 trigger StreamModeActive and sDepot do
22913: LD_EXP 40
22917: PUSH
22918: LD_EXP 55
22922: AND
22923: IFFALSE 22943
22925: GO 22927
22927: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
22928: LD_INT 1
22930: PPUSH
22931: LD_OWVAR 2
22935: PPUSH
22936: LD_INT 0
22938: PPUSH
22939: CALL_OW 324
22943: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
22944: LD_EXP 40
22948: PUSH
22949: LD_EXP 56
22953: AND
22954: IFFALSE 23037
22956: GO 22958
22958: DISABLE
22959: LD_INT 0
22961: PPUSH
22962: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22963: LD_ADDR_VAR 0 2
22967: PUSH
22968: LD_INT 22
22970: PUSH
22971: LD_OWVAR 2
22975: PUSH
22976: EMPTY
22977: LIST
22978: LIST
22979: PUSH
22980: LD_INT 21
22982: PUSH
22983: LD_INT 3
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: PUSH
22990: EMPTY
22991: LIST
22992: LIST
22993: PPUSH
22994: CALL_OW 69
22998: ST_TO_ADDR
// if not tmp then
22999: LD_VAR 0 2
23003: NOT
23004: IFFALSE 23008
// exit ;
23006: GO 23037
// for i in tmp do
23008: LD_ADDR_VAR 0 1
23012: PUSH
23013: LD_VAR 0 2
23017: PUSH
23018: FOR_IN
23019: IFFALSE 23035
// SetBLevel ( i , 10 ) ;
23021: LD_VAR 0 1
23025: PPUSH
23026: LD_INT 10
23028: PPUSH
23029: CALL_OW 241
23033: GO 23018
23035: POP
23036: POP
// end ;
23037: PPOPN 2
23039: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
23040: LD_EXP 40
23044: PUSH
23045: LD_EXP 57
23049: AND
23050: IFFALSE 23161
23052: GO 23054
23054: DISABLE
23055: LD_INT 0
23057: PPUSH
23058: PPUSH
23059: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23060: LD_ADDR_VAR 0 3
23064: PUSH
23065: LD_INT 22
23067: PUSH
23068: LD_OWVAR 2
23072: PUSH
23073: EMPTY
23074: LIST
23075: LIST
23076: PUSH
23077: LD_INT 25
23079: PUSH
23080: LD_INT 1
23082: PUSH
23083: EMPTY
23084: LIST
23085: LIST
23086: PUSH
23087: EMPTY
23088: LIST
23089: LIST
23090: PPUSH
23091: CALL_OW 69
23095: ST_TO_ADDR
// if not tmp then
23096: LD_VAR 0 3
23100: NOT
23101: IFFALSE 23105
// exit ;
23103: GO 23161
// un := tmp [ rand ( 1 , tmp ) ] ;
23105: LD_ADDR_VAR 0 2
23109: PUSH
23110: LD_VAR 0 3
23114: PUSH
23115: LD_INT 1
23117: PPUSH
23118: LD_VAR 0 3
23122: PPUSH
23123: CALL_OW 12
23127: ARRAY
23128: ST_TO_ADDR
// if Crawls ( un ) then
23129: LD_VAR 0 2
23133: PPUSH
23134: CALL_OW 318
23138: IFFALSE 23149
// ComWalk ( un ) ;
23140: LD_VAR 0 2
23144: PPUSH
23145: CALL_OW 138
// SetClass ( un , class_sniper ) ;
23149: LD_VAR 0 2
23153: PPUSH
23154: LD_INT 5
23156: PPUSH
23157: CALL_OW 336
// end ;
23161: PPOPN 3
23163: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
23164: LD_EXP 40
23168: PUSH
23169: LD_EXP 58
23173: AND
23174: PUSH
23175: LD_OWVAR 67
23179: PUSH
23180: LD_INT 4
23182: LESS
23183: AND
23184: IFFALSE 23203
23186: GO 23188
23188: DISABLE
// begin Difficulty := Difficulty + 1 ;
23189: LD_ADDR_OWVAR 67
23193: PUSH
23194: LD_OWVAR 67
23198: PUSH
23199: LD_INT 1
23201: PLUS
23202: ST_TO_ADDR
// end ;
23203: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
23204: LD_EXP 40
23208: PUSH
23209: LD_EXP 59
23213: AND
23214: IFFALSE 23317
23216: GO 23218
23218: DISABLE
23219: LD_INT 0
23221: PPUSH
// begin for i := 1 to 5 do
23222: LD_ADDR_VAR 0 1
23226: PUSH
23227: DOUBLE
23228: LD_INT 1
23230: DEC
23231: ST_TO_ADDR
23232: LD_INT 5
23234: PUSH
23235: FOR_TO
23236: IFFALSE 23315
// begin uc_nation := nation_nature ;
23238: LD_ADDR_OWVAR 21
23242: PUSH
23243: LD_INT 0
23245: ST_TO_ADDR
// uc_side := 0 ;
23246: LD_ADDR_OWVAR 20
23250: PUSH
23251: LD_INT 0
23253: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23254: LD_ADDR_OWVAR 29
23258: PUSH
23259: LD_INT 12
23261: PUSH
23262: LD_INT 12
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: ST_TO_ADDR
// hc_agressivity := 20 ;
23269: LD_ADDR_OWVAR 35
23273: PUSH
23274: LD_INT 20
23276: ST_TO_ADDR
// hc_class := class_tiger ;
23277: LD_ADDR_OWVAR 28
23281: PUSH
23282: LD_INT 14
23284: ST_TO_ADDR
// hc_gallery :=  ;
23285: LD_ADDR_OWVAR 33
23289: PUSH
23290: LD_STRING 
23292: ST_TO_ADDR
// hc_name :=  ;
23293: LD_ADDR_OWVAR 26
23297: PUSH
23298: LD_STRING 
23300: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
23301: CALL_OW 44
23305: PPUSH
23306: LD_INT 0
23308: PPUSH
23309: CALL_OW 51
// end ;
23313: GO 23235
23315: POP
23316: POP
// end ;
23317: PPOPN 1
23319: END
// every 0 0$1 trigger StreamModeActive and sBomb do
23320: LD_EXP 40
23324: PUSH
23325: LD_EXP 60
23329: AND
23330: IFFALSE 23339
23332: GO 23334
23334: DISABLE
// StreamSibBomb ;
23335: CALL 23340 0 0
23339: END
// export function StreamSibBomb ; var i , x , y ; begin
23340: LD_INT 0
23342: PPUSH
23343: PPUSH
23344: PPUSH
23345: PPUSH
// result := false ;
23346: LD_ADDR_VAR 0 1
23350: PUSH
23351: LD_INT 0
23353: ST_TO_ADDR
// for i := 1 to 16 do
23354: LD_ADDR_VAR 0 2
23358: PUSH
23359: DOUBLE
23360: LD_INT 1
23362: DEC
23363: ST_TO_ADDR
23364: LD_INT 16
23366: PUSH
23367: FOR_TO
23368: IFFALSE 23567
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23370: LD_ADDR_VAR 0 3
23374: PUSH
23375: LD_INT 10
23377: PUSH
23378: LD_INT 20
23380: PUSH
23381: LD_INT 30
23383: PUSH
23384: LD_INT 40
23386: PUSH
23387: LD_INT 50
23389: PUSH
23390: LD_INT 60
23392: PUSH
23393: LD_INT 70
23395: PUSH
23396: LD_INT 80
23398: PUSH
23399: LD_INT 90
23401: PUSH
23402: LD_INT 100
23404: PUSH
23405: LD_INT 110
23407: PUSH
23408: LD_INT 120
23410: PUSH
23411: LD_INT 130
23413: PUSH
23414: LD_INT 140
23416: PUSH
23417: LD_INT 150
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: PUSH
23437: LD_INT 1
23439: PPUSH
23440: LD_INT 15
23442: PPUSH
23443: CALL_OW 12
23447: ARRAY
23448: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23449: LD_ADDR_VAR 0 4
23453: PUSH
23454: LD_INT 10
23456: PUSH
23457: LD_INT 20
23459: PUSH
23460: LD_INT 30
23462: PUSH
23463: LD_INT 40
23465: PUSH
23466: LD_INT 50
23468: PUSH
23469: LD_INT 60
23471: PUSH
23472: LD_INT 70
23474: PUSH
23475: LD_INT 80
23477: PUSH
23478: LD_INT 90
23480: PUSH
23481: LD_INT 100
23483: PUSH
23484: LD_INT 110
23486: PUSH
23487: LD_INT 120
23489: PUSH
23490: LD_INT 130
23492: PUSH
23493: LD_INT 140
23495: PUSH
23496: LD_INT 150
23498: PUSH
23499: EMPTY
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: PUSH
23516: LD_INT 1
23518: PPUSH
23519: LD_INT 15
23521: PPUSH
23522: CALL_OW 12
23526: ARRAY
23527: ST_TO_ADDR
// if ValidHex ( x , y ) then
23528: LD_VAR 0 3
23532: PPUSH
23533: LD_VAR 0 4
23537: PPUSH
23538: CALL_OW 488
23542: IFFALSE 23565
// begin result := [ x , y ] ;
23544: LD_ADDR_VAR 0 1
23548: PUSH
23549: LD_VAR 0 3
23553: PUSH
23554: LD_VAR 0 4
23558: PUSH
23559: EMPTY
23560: LIST
23561: LIST
23562: ST_TO_ADDR
// break ;
23563: GO 23567
// end ; end ;
23565: GO 23367
23567: POP
23568: POP
// if result then
23569: LD_VAR 0 1
23573: IFFALSE 23633
// begin ToLua ( playSibBomb() ) ;
23575: LD_STRING playSibBomb()
23577: PPUSH
23578: CALL_OW 559
// wait ( 0 0$14 ) ;
23582: LD_INT 490
23584: PPUSH
23585: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
23589: LD_VAR 0 1
23593: PUSH
23594: LD_INT 1
23596: ARRAY
23597: PPUSH
23598: LD_VAR 0 1
23602: PUSH
23603: LD_INT 2
23605: ARRAY
23606: PPUSH
23607: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
23611: LD_VAR 0 1
23615: PUSH
23616: LD_INT 1
23618: ARRAY
23619: PPUSH
23620: LD_VAR 0 1
23624: PUSH
23625: LD_INT 2
23627: ARRAY
23628: PPUSH
23629: CALL_OW 429
// end ; end ;
23633: LD_VAR 0 1
23637: RET
// every 0 0$1 trigger StreamModeActive and sReset do
23638: LD_EXP 40
23642: PUSH
23643: LD_EXP 62
23647: AND
23648: IFFALSE 23660
23650: GO 23652
23652: DISABLE
// YouLost (  ) ;
23653: LD_STRING 
23655: PPUSH
23656: CALL_OW 104
23660: END
// every 0 0$1 trigger StreamModeActive and sFog do
23661: LD_EXP 40
23665: PUSH
23666: LD_EXP 61
23670: AND
23671: IFFALSE 23685
23673: GO 23675
23675: DISABLE
// FogOff ( your_side ) ;
23676: LD_OWVAR 2
23680: PPUSH
23681: CALL_OW 344
23685: END
// every 0 0$1 trigger StreamModeActive and sSun do
23686: LD_EXP 40
23690: PUSH
23691: LD_EXP 63
23695: AND
23696: IFFALSE 23724
23698: GO 23700
23700: DISABLE
// begin solar_recharge_percent := 0 ;
23701: LD_ADDR_OWVAR 79
23705: PUSH
23706: LD_INT 0
23708: ST_TO_ADDR
// wait ( 5 5$00 ) ;
23709: LD_INT 10500
23711: PPUSH
23712: CALL_OW 67
// solar_recharge_percent := 100 ;
23716: LD_ADDR_OWVAR 79
23720: PUSH
23721: LD_INT 100
23723: ST_TO_ADDR
// end ;
23724: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
23725: LD_EXP 40
23729: PUSH
23730: LD_EXP 64
23734: AND
23735: IFFALSE 23974
23737: GO 23739
23739: DISABLE
23740: LD_INT 0
23742: PPUSH
23743: PPUSH
23744: PPUSH
// begin tmp := [ ] ;
23745: LD_ADDR_VAR 0 3
23749: PUSH
23750: EMPTY
23751: ST_TO_ADDR
// for i := 1 to 6 do
23752: LD_ADDR_VAR 0 1
23756: PUSH
23757: DOUBLE
23758: LD_INT 1
23760: DEC
23761: ST_TO_ADDR
23762: LD_INT 6
23764: PUSH
23765: FOR_TO
23766: IFFALSE 23871
// begin uc_nation := nation_nature ;
23768: LD_ADDR_OWVAR 21
23772: PUSH
23773: LD_INT 0
23775: ST_TO_ADDR
// uc_side := 0 ;
23776: LD_ADDR_OWVAR 20
23780: PUSH
23781: LD_INT 0
23783: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23784: LD_ADDR_OWVAR 29
23788: PUSH
23789: LD_INT 12
23791: PUSH
23792: LD_INT 12
23794: PUSH
23795: EMPTY
23796: LIST
23797: LIST
23798: ST_TO_ADDR
// hc_agressivity := 20 ;
23799: LD_ADDR_OWVAR 35
23803: PUSH
23804: LD_INT 20
23806: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
23807: LD_ADDR_OWVAR 28
23811: PUSH
23812: LD_INT 17
23814: ST_TO_ADDR
// hc_gallery :=  ;
23815: LD_ADDR_OWVAR 33
23819: PUSH
23820: LD_STRING 
23822: ST_TO_ADDR
// hc_name :=  ;
23823: LD_ADDR_OWVAR 26
23827: PUSH
23828: LD_STRING 
23830: ST_TO_ADDR
// un := CreateHuman ;
23831: LD_ADDR_VAR 0 2
23835: PUSH
23836: CALL_OW 44
23840: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
23841: LD_VAR 0 2
23845: PPUSH
23846: LD_INT 1
23848: PPUSH
23849: CALL_OW 51
// tmp := tmp ^ un ;
23853: LD_ADDR_VAR 0 3
23857: PUSH
23858: LD_VAR 0 3
23862: PUSH
23863: LD_VAR 0 2
23867: ADD
23868: ST_TO_ADDR
// end ;
23869: GO 23765
23871: POP
23872: POP
// repeat wait ( 0 0$1 ) ;
23873: LD_INT 35
23875: PPUSH
23876: CALL_OW 67
// for un in tmp do
23880: LD_ADDR_VAR 0 2
23884: PUSH
23885: LD_VAR 0 3
23889: PUSH
23890: FOR_IN
23891: IFFALSE 23965
// begin if IsDead ( un ) then
23893: LD_VAR 0 2
23897: PPUSH
23898: CALL_OW 301
23902: IFFALSE 23922
// begin tmp := tmp diff un ;
23904: LD_ADDR_VAR 0 3
23908: PUSH
23909: LD_VAR 0 3
23913: PUSH
23914: LD_VAR 0 2
23918: DIFF
23919: ST_TO_ADDR
// continue ;
23920: GO 23890
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
23922: LD_VAR 0 2
23926: PPUSH
23927: LD_INT 3
23929: PUSH
23930: LD_INT 22
23932: PUSH
23933: LD_INT 0
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: PUSH
23940: EMPTY
23941: LIST
23942: LIST
23943: PPUSH
23944: CALL_OW 69
23948: PPUSH
23949: LD_VAR 0 2
23953: PPUSH
23954: CALL_OW 74
23958: PPUSH
23959: CALL_OW 115
// end ;
23963: GO 23890
23965: POP
23966: POP
// until not tmp ;
23967: LD_VAR 0 3
23971: NOT
23972: IFFALSE 23873
// end ;
23974: PPOPN 3
23976: END
// every 0 0$1 trigger StreamModeActive and sTroll do
23977: LD_EXP 40
23981: PUSH
23982: LD_EXP 65
23986: AND
23987: IFFALSE 24041
23989: GO 23991
23991: DISABLE
// begin ToLua ( displayTroll(); ) ;
23992: LD_STRING displayTroll();
23994: PPUSH
23995: CALL_OW 559
// wait ( 3 3$00 ) ;
23999: LD_INT 6300
24001: PPUSH
24002: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24006: LD_STRING hideTroll();
24008: PPUSH
24009: CALL_OW 559
// wait ( 1 1$00 ) ;
24013: LD_INT 2100
24015: PPUSH
24016: CALL_OW 67
// ToLua ( displayTroll(); ) ;
24020: LD_STRING displayTroll();
24022: PPUSH
24023: CALL_OW 559
// wait ( 1 1$00 ) ;
24027: LD_INT 2100
24029: PPUSH
24030: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24034: LD_STRING hideTroll();
24036: PPUSH
24037: CALL_OW 559
// end ;
24041: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
24042: LD_EXP 40
24046: PUSH
24047: LD_EXP 66
24051: AND
24052: IFFALSE 24115
24054: GO 24056
24056: DISABLE
24057: LD_INT 0
24059: PPUSH
// begin p := 0 ;
24060: LD_ADDR_VAR 0 1
24064: PUSH
24065: LD_INT 0
24067: ST_TO_ADDR
// repeat game_speed := 1 ;
24068: LD_ADDR_OWVAR 65
24072: PUSH
24073: LD_INT 1
24075: ST_TO_ADDR
// wait ( 0 0$1 ) ;
24076: LD_INT 35
24078: PPUSH
24079: CALL_OW 67
// p := p + 1 ;
24083: LD_ADDR_VAR 0 1
24087: PUSH
24088: LD_VAR 0 1
24092: PUSH
24093: LD_INT 1
24095: PLUS
24096: ST_TO_ADDR
// until p >= 60 ;
24097: LD_VAR 0 1
24101: PUSH
24102: LD_INT 60
24104: GREATEREQUAL
24105: IFFALSE 24068
// game_speed := 4 ;
24107: LD_ADDR_OWVAR 65
24111: PUSH
24112: LD_INT 4
24114: ST_TO_ADDR
// end ;
24115: PPOPN 1
24117: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
24118: LD_EXP 40
24122: PUSH
24123: LD_EXP 67
24127: AND
24128: IFFALSE 24274
24130: GO 24132
24132: DISABLE
24133: LD_INT 0
24135: PPUSH
24136: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24137: LD_ADDR_VAR 0 1
24141: PUSH
24142: LD_INT 22
24144: PUSH
24145: LD_OWVAR 2
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: PUSH
24154: LD_INT 2
24156: PUSH
24157: LD_INT 30
24159: PUSH
24160: LD_INT 0
24162: PUSH
24163: EMPTY
24164: LIST
24165: LIST
24166: PUSH
24167: LD_INT 30
24169: PUSH
24170: LD_INT 1
24172: PUSH
24173: EMPTY
24174: LIST
24175: LIST
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: LIST
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PPUSH
24186: CALL_OW 69
24190: ST_TO_ADDR
// if not depot then
24191: LD_VAR 0 1
24195: NOT
24196: IFFALSE 24200
// exit ;
24198: GO 24274
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
24200: LD_ADDR_VAR 0 2
24204: PUSH
24205: LD_VAR 0 1
24209: PUSH
24210: LD_INT 1
24212: PPUSH
24213: LD_VAR 0 1
24217: PPUSH
24218: CALL_OW 12
24222: ARRAY
24223: PPUSH
24224: CALL_OW 274
24228: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
24229: LD_VAR 0 2
24233: PPUSH
24234: LD_INT 1
24236: PPUSH
24237: LD_INT 0
24239: PPUSH
24240: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
24244: LD_VAR 0 2
24248: PPUSH
24249: LD_INT 2
24251: PPUSH
24252: LD_INT 0
24254: PPUSH
24255: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
24259: LD_VAR 0 2
24263: PPUSH
24264: LD_INT 3
24266: PPUSH
24267: LD_INT 0
24269: PPUSH
24270: CALL_OW 277
// end ;
24274: PPOPN 2
24276: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
24277: LD_EXP 40
24281: PUSH
24282: LD_EXP 68
24286: AND
24287: IFFALSE 24384
24289: GO 24291
24291: DISABLE
24292: LD_INT 0
24294: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24295: LD_ADDR_VAR 0 1
24299: PUSH
24300: LD_INT 22
24302: PUSH
24303: LD_OWVAR 2
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: PUSH
24312: LD_INT 21
24314: PUSH
24315: LD_INT 1
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: PUSH
24322: LD_INT 3
24324: PUSH
24325: LD_INT 23
24327: PUSH
24328: LD_INT 0
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: PUSH
24339: EMPTY
24340: LIST
24341: LIST
24342: LIST
24343: PPUSH
24344: CALL_OW 69
24348: ST_TO_ADDR
// if not tmp then
24349: LD_VAR 0 1
24353: NOT
24354: IFFALSE 24358
// exit ;
24356: GO 24384
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
24358: LD_VAR 0 1
24362: PUSH
24363: LD_INT 1
24365: PPUSH
24366: LD_VAR 0 1
24370: PPUSH
24371: CALL_OW 12
24375: ARRAY
24376: PPUSH
24377: LD_INT 200
24379: PPUSH
24380: CALL_OW 234
// end ;
24384: PPOPN 1
24386: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
24387: LD_EXP 40
24391: PUSH
24392: LD_EXP 69
24396: AND
24397: IFFALSE 24476
24399: GO 24401
24401: DISABLE
24402: LD_INT 0
24404: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
24405: LD_ADDR_VAR 0 1
24409: PUSH
24410: LD_INT 22
24412: PUSH
24413: LD_OWVAR 2
24417: PUSH
24418: EMPTY
24419: LIST
24420: LIST
24421: PUSH
24422: LD_INT 21
24424: PUSH
24425: LD_INT 2
24427: PUSH
24428: EMPTY
24429: LIST
24430: LIST
24431: PUSH
24432: EMPTY
24433: LIST
24434: LIST
24435: PPUSH
24436: CALL_OW 69
24440: ST_TO_ADDR
// if not tmp then
24441: LD_VAR 0 1
24445: NOT
24446: IFFALSE 24450
// exit ;
24448: GO 24476
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
24450: LD_VAR 0 1
24454: PUSH
24455: LD_INT 1
24457: PPUSH
24458: LD_VAR 0 1
24462: PPUSH
24463: CALL_OW 12
24467: ARRAY
24468: PPUSH
24469: LD_INT 60
24471: PPUSH
24472: CALL_OW 234
// end ;
24476: PPOPN 1
24478: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
24479: LD_EXP 40
24483: PUSH
24484: LD_EXP 70
24488: AND
24489: IFFALSE 24588
24491: GO 24493
24493: DISABLE
24494: LD_INT 0
24496: PPUSH
24497: PPUSH
// begin enable ;
24498: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
24499: LD_ADDR_VAR 0 1
24503: PUSH
24504: LD_INT 22
24506: PUSH
24507: LD_OWVAR 2
24511: PUSH
24512: EMPTY
24513: LIST
24514: LIST
24515: PUSH
24516: LD_INT 61
24518: PUSH
24519: EMPTY
24520: LIST
24521: PUSH
24522: LD_INT 33
24524: PUSH
24525: LD_INT 2
24527: PUSH
24528: EMPTY
24529: LIST
24530: LIST
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: LIST
24536: PPUSH
24537: CALL_OW 69
24541: ST_TO_ADDR
// if not tmp then
24542: LD_VAR 0 1
24546: NOT
24547: IFFALSE 24551
// exit ;
24549: GO 24588
// for i in tmp do
24551: LD_ADDR_VAR 0 2
24555: PUSH
24556: LD_VAR 0 1
24560: PUSH
24561: FOR_IN
24562: IFFALSE 24586
// if IsControledBy ( i ) then
24564: LD_VAR 0 2
24568: PPUSH
24569: CALL_OW 312
24573: IFFALSE 24584
// ComUnlink ( i ) ;
24575: LD_VAR 0 2
24579: PPUSH
24580: CALL_OW 136
24584: GO 24561
24586: POP
24587: POP
// end ;
24588: PPOPN 2
24590: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
24591: LD_EXP 40
24595: PUSH
24596: LD_EXP 71
24600: AND
24601: IFFALSE 24741
24603: GO 24605
24605: DISABLE
24606: LD_INT 0
24608: PPUSH
24609: PPUSH
// begin ToLua ( displayPowell(); ) ;
24610: LD_STRING displayPowell();
24612: PPUSH
24613: CALL_OW 559
// uc_side := 0 ;
24617: LD_ADDR_OWVAR 20
24621: PUSH
24622: LD_INT 0
24624: ST_TO_ADDR
// uc_nation := 2 ;
24625: LD_ADDR_OWVAR 21
24629: PUSH
24630: LD_INT 2
24632: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
24633: LD_ADDR_OWVAR 37
24637: PUSH
24638: LD_INT 14
24640: ST_TO_ADDR
// vc_engine := engine_siberite ;
24641: LD_ADDR_OWVAR 39
24645: PUSH
24646: LD_INT 3
24648: ST_TO_ADDR
// vc_control := control_apeman ;
24649: LD_ADDR_OWVAR 38
24653: PUSH
24654: LD_INT 5
24656: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
24657: LD_ADDR_OWVAR 40
24661: PUSH
24662: LD_INT 29
24664: ST_TO_ADDR
// un := CreateVehicle ;
24665: LD_ADDR_VAR 0 2
24669: PUSH
24670: CALL_OW 45
24674: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24675: LD_VAR 0 2
24679: PPUSH
24680: LD_INT 1
24682: PPUSH
24683: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24687: LD_INT 35
24689: PPUSH
24690: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24694: LD_VAR 0 2
24698: PPUSH
24699: LD_INT 22
24701: PUSH
24702: LD_OWVAR 2
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PPUSH
24711: CALL_OW 69
24715: PPUSH
24716: LD_VAR 0 2
24720: PPUSH
24721: CALL_OW 74
24725: PPUSH
24726: CALL_OW 115
// until IsDead ( un ) ;
24730: LD_VAR 0 2
24734: PPUSH
24735: CALL_OW 301
24739: IFFALSE 24687
// end ;
24741: PPOPN 2
24743: END
// every 0 0$1 trigger StreamModeActive and sStu do
24744: LD_EXP 40
24748: PUSH
24749: LD_EXP 79
24753: AND
24754: IFFALSE 24770
24756: GO 24758
24758: DISABLE
// begin ToLua ( displayStucuk(); ) ;
24759: LD_STRING displayStucuk();
24761: PPUSH
24762: CALL_OW 559
// ResetFog ;
24766: CALL_OW 335
// end ;
24770: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
24771: LD_EXP 40
24775: PUSH
24776: LD_EXP 72
24780: AND
24781: IFFALSE 24922
24783: GO 24785
24785: DISABLE
24786: LD_INT 0
24788: PPUSH
24789: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24790: LD_ADDR_VAR 0 2
24794: PUSH
24795: LD_INT 22
24797: PUSH
24798: LD_OWVAR 2
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: PUSH
24807: LD_INT 21
24809: PUSH
24810: LD_INT 1
24812: PUSH
24813: EMPTY
24814: LIST
24815: LIST
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: PPUSH
24821: CALL_OW 69
24825: ST_TO_ADDR
// if not tmp then
24826: LD_VAR 0 2
24830: NOT
24831: IFFALSE 24835
// exit ;
24833: GO 24922
// un := tmp [ rand ( 1 , tmp ) ] ;
24835: LD_ADDR_VAR 0 1
24839: PUSH
24840: LD_VAR 0 2
24844: PUSH
24845: LD_INT 1
24847: PPUSH
24848: LD_VAR 0 2
24852: PPUSH
24853: CALL_OW 12
24857: ARRAY
24858: ST_TO_ADDR
// SetSide ( un , 0 ) ;
24859: LD_VAR 0 1
24863: PPUSH
24864: LD_INT 0
24866: PPUSH
24867: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
24871: LD_VAR 0 1
24875: PPUSH
24876: LD_OWVAR 3
24880: PUSH
24881: LD_VAR 0 1
24885: DIFF
24886: PPUSH
24887: LD_VAR 0 1
24891: PPUSH
24892: CALL_OW 74
24896: PPUSH
24897: CALL_OW 115
// wait ( 0 0$20 ) ;
24901: LD_INT 700
24903: PPUSH
24904: CALL_OW 67
// SetSide ( un , your_side ) ;
24908: LD_VAR 0 1
24912: PPUSH
24913: LD_OWVAR 2
24917: PPUSH
24918: CALL_OW 235
// end ;
24922: PPOPN 2
24924: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
24925: LD_EXP 40
24929: PUSH
24930: LD_EXP 73
24934: AND
24935: IFFALSE 25041
24937: GO 24939
24939: DISABLE
24940: LD_INT 0
24942: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24943: LD_ADDR_VAR 0 1
24947: PUSH
24948: LD_INT 22
24950: PUSH
24951: LD_OWVAR 2
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: PUSH
24960: LD_INT 2
24962: PUSH
24963: LD_INT 30
24965: PUSH
24966: LD_INT 0
24968: PUSH
24969: EMPTY
24970: LIST
24971: LIST
24972: PUSH
24973: LD_INT 30
24975: PUSH
24976: LD_INT 1
24978: PUSH
24979: EMPTY
24980: LIST
24981: LIST
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: LIST
24987: PUSH
24988: EMPTY
24989: LIST
24990: LIST
24991: PPUSH
24992: CALL_OW 69
24996: ST_TO_ADDR
// if not depot then
24997: LD_VAR 0 1
25001: NOT
25002: IFFALSE 25006
// exit ;
25004: GO 25041
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
25006: LD_VAR 0 1
25010: PUSH
25011: LD_INT 1
25013: ARRAY
25014: PPUSH
25015: CALL_OW 250
25019: PPUSH
25020: LD_VAR 0 1
25024: PUSH
25025: LD_INT 1
25027: ARRAY
25028: PPUSH
25029: CALL_OW 251
25033: PPUSH
25034: LD_INT 70
25036: PPUSH
25037: CALL_OW 495
// end ;
25041: PPOPN 1
25043: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
25044: LD_EXP 40
25048: PUSH
25049: LD_EXP 74
25053: AND
25054: IFFALSE 25265
25056: GO 25058
25058: DISABLE
25059: LD_INT 0
25061: PPUSH
25062: PPUSH
25063: PPUSH
25064: PPUSH
25065: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25066: LD_ADDR_VAR 0 5
25070: PUSH
25071: LD_INT 22
25073: PUSH
25074: LD_OWVAR 2
25078: PUSH
25079: EMPTY
25080: LIST
25081: LIST
25082: PUSH
25083: LD_INT 21
25085: PUSH
25086: LD_INT 1
25088: PUSH
25089: EMPTY
25090: LIST
25091: LIST
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: PPUSH
25097: CALL_OW 69
25101: ST_TO_ADDR
// if not tmp then
25102: LD_VAR 0 5
25106: NOT
25107: IFFALSE 25111
// exit ;
25109: GO 25265
// for i in tmp do
25111: LD_ADDR_VAR 0 1
25115: PUSH
25116: LD_VAR 0 5
25120: PUSH
25121: FOR_IN
25122: IFFALSE 25263
// begin d := rand ( 0 , 5 ) ;
25124: LD_ADDR_VAR 0 4
25128: PUSH
25129: LD_INT 0
25131: PPUSH
25132: LD_INT 5
25134: PPUSH
25135: CALL_OW 12
25139: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
25140: LD_ADDR_VAR 0 2
25144: PUSH
25145: LD_VAR 0 1
25149: PPUSH
25150: CALL_OW 250
25154: PPUSH
25155: LD_VAR 0 4
25159: PPUSH
25160: LD_INT 3
25162: PPUSH
25163: LD_INT 12
25165: PPUSH
25166: CALL_OW 12
25170: PPUSH
25171: CALL_OW 272
25175: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
25176: LD_ADDR_VAR 0 3
25180: PUSH
25181: LD_VAR 0 1
25185: PPUSH
25186: CALL_OW 251
25190: PPUSH
25191: LD_VAR 0 4
25195: PPUSH
25196: LD_INT 3
25198: PPUSH
25199: LD_INT 12
25201: PPUSH
25202: CALL_OW 12
25206: PPUSH
25207: CALL_OW 273
25211: ST_TO_ADDR
// if ValidHex ( x , y ) then
25212: LD_VAR 0 2
25216: PPUSH
25217: LD_VAR 0 3
25221: PPUSH
25222: CALL_OW 488
25226: IFFALSE 25261
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
25228: LD_VAR 0 1
25232: PPUSH
25233: LD_VAR 0 2
25237: PPUSH
25238: LD_VAR 0 3
25242: PPUSH
25243: LD_INT 3
25245: PPUSH
25246: LD_INT 6
25248: PPUSH
25249: CALL_OW 12
25253: PPUSH
25254: LD_INT 1
25256: PPUSH
25257: CALL_OW 483
// end ;
25261: GO 25121
25263: POP
25264: POP
// end ;
25265: PPOPN 5
25267: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
25268: LD_EXP 40
25272: PUSH
25273: LD_EXP 75
25277: AND
25278: IFFALSE 25372
25280: GO 25282
25282: DISABLE
25283: LD_INT 0
25285: PPUSH
25286: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
25287: LD_ADDR_VAR 0 2
25291: PUSH
25292: LD_INT 22
25294: PUSH
25295: LD_OWVAR 2
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: PUSH
25304: LD_INT 32
25306: PUSH
25307: LD_INT 1
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PUSH
25314: LD_INT 21
25316: PUSH
25317: LD_INT 2
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: PUSH
25324: EMPTY
25325: LIST
25326: LIST
25327: LIST
25328: PPUSH
25329: CALL_OW 69
25333: ST_TO_ADDR
// if not tmp then
25334: LD_VAR 0 2
25338: NOT
25339: IFFALSE 25343
// exit ;
25341: GO 25372
// for i in tmp do
25343: LD_ADDR_VAR 0 1
25347: PUSH
25348: LD_VAR 0 2
25352: PUSH
25353: FOR_IN
25354: IFFALSE 25370
// SetFuel ( i , 0 ) ;
25356: LD_VAR 0 1
25360: PPUSH
25361: LD_INT 0
25363: PPUSH
25364: CALL_OW 240
25368: GO 25353
25370: POP
25371: POP
// end ;
25372: PPOPN 2
25374: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
25375: LD_EXP 40
25379: PUSH
25380: LD_EXP 76
25384: AND
25385: IFFALSE 25451
25387: GO 25389
25389: DISABLE
25390: LD_INT 0
25392: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25393: LD_ADDR_VAR 0 1
25397: PUSH
25398: LD_INT 22
25400: PUSH
25401: LD_OWVAR 2
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: PUSH
25410: LD_INT 30
25412: PUSH
25413: LD_INT 29
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: PPUSH
25424: CALL_OW 69
25428: ST_TO_ADDR
// if not tmp then
25429: LD_VAR 0 1
25433: NOT
25434: IFFALSE 25438
// exit ;
25436: GO 25451
// DestroyUnit ( tmp [ 1 ] ) ;
25438: LD_VAR 0 1
25442: PUSH
25443: LD_INT 1
25445: ARRAY
25446: PPUSH
25447: CALL_OW 65
// end ;
25451: PPOPN 1
25453: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
25454: LD_EXP 40
25458: PUSH
25459: LD_EXP 78
25463: AND
25464: IFFALSE 25593
25466: GO 25468
25468: DISABLE
25469: LD_INT 0
25471: PPUSH
// begin uc_side := 0 ;
25472: LD_ADDR_OWVAR 20
25476: PUSH
25477: LD_INT 0
25479: ST_TO_ADDR
// uc_nation := nation_arabian ;
25480: LD_ADDR_OWVAR 21
25484: PUSH
25485: LD_INT 2
25487: ST_TO_ADDR
// hc_gallery :=  ;
25488: LD_ADDR_OWVAR 33
25492: PUSH
25493: LD_STRING 
25495: ST_TO_ADDR
// hc_name :=  ;
25496: LD_ADDR_OWVAR 26
25500: PUSH
25501: LD_STRING 
25503: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
25504: LD_INT 1
25506: PPUSH
25507: LD_INT 11
25509: PPUSH
25510: LD_INT 10
25512: PPUSH
25513: CALL_OW 380
// un := CreateHuman ;
25517: LD_ADDR_VAR 0 1
25521: PUSH
25522: CALL_OW 44
25526: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25527: LD_VAR 0 1
25531: PPUSH
25532: LD_INT 1
25534: PPUSH
25535: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25539: LD_INT 35
25541: PPUSH
25542: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25546: LD_VAR 0 1
25550: PPUSH
25551: LD_INT 22
25553: PUSH
25554: LD_OWVAR 2
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: PPUSH
25563: CALL_OW 69
25567: PPUSH
25568: LD_VAR 0 1
25572: PPUSH
25573: CALL_OW 74
25577: PPUSH
25578: CALL_OW 115
// until IsDead ( un ) ;
25582: LD_VAR 0 1
25586: PPUSH
25587: CALL_OW 301
25591: IFFALSE 25539
// end ;
25593: PPOPN 1
25595: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
25596: LD_EXP 40
25600: PUSH
25601: LD_EXP 80
25605: AND
25606: IFFALSE 25618
25608: GO 25610
25610: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
25611: LD_STRING earthquake(getX(game), 0, 32)
25613: PPUSH
25614: CALL_OW 559
25618: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
25619: LD_EXP 40
25623: PUSH
25624: LD_EXP 81
25628: AND
25629: IFFALSE 25720
25631: GO 25633
25633: DISABLE
25634: LD_INT 0
25636: PPUSH
// begin enable ;
25637: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
25638: LD_ADDR_VAR 0 1
25642: PUSH
25643: LD_INT 22
25645: PUSH
25646: LD_OWVAR 2
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: PUSH
25655: LD_INT 21
25657: PUSH
25658: LD_INT 2
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: PUSH
25665: LD_INT 33
25667: PUSH
25668: LD_INT 3
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: LIST
25679: PPUSH
25680: CALL_OW 69
25684: ST_TO_ADDR
// if not tmp then
25685: LD_VAR 0 1
25689: NOT
25690: IFFALSE 25694
// exit ;
25692: GO 25720
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25694: LD_VAR 0 1
25698: PUSH
25699: LD_INT 1
25701: PPUSH
25702: LD_VAR 0 1
25706: PPUSH
25707: CALL_OW 12
25711: ARRAY
25712: PPUSH
25713: LD_INT 1
25715: PPUSH
25716: CALL_OW 234
// end ;
25720: PPOPN 1
25722: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
25723: LD_EXP 40
25727: PUSH
25728: LD_EXP 82
25732: AND
25733: IFFALSE 25874
25735: GO 25737
25737: DISABLE
25738: LD_INT 0
25740: PPUSH
25741: PPUSH
25742: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25743: LD_ADDR_VAR 0 3
25747: PUSH
25748: LD_INT 22
25750: PUSH
25751: LD_OWVAR 2
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: PUSH
25760: LD_INT 25
25762: PUSH
25763: LD_INT 1
25765: PUSH
25766: EMPTY
25767: LIST
25768: LIST
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PPUSH
25774: CALL_OW 69
25778: ST_TO_ADDR
// if not tmp then
25779: LD_VAR 0 3
25783: NOT
25784: IFFALSE 25788
// exit ;
25786: GO 25874
// un := tmp [ rand ( 1 , tmp ) ] ;
25788: LD_ADDR_VAR 0 2
25792: PUSH
25793: LD_VAR 0 3
25797: PUSH
25798: LD_INT 1
25800: PPUSH
25801: LD_VAR 0 3
25805: PPUSH
25806: CALL_OW 12
25810: ARRAY
25811: ST_TO_ADDR
// if Crawls ( un ) then
25812: LD_VAR 0 2
25816: PPUSH
25817: CALL_OW 318
25821: IFFALSE 25832
// ComWalk ( un ) ;
25823: LD_VAR 0 2
25827: PPUSH
25828: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
25832: LD_VAR 0 2
25836: PPUSH
25837: LD_INT 9
25839: PPUSH
25840: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
25844: LD_INT 28
25846: PPUSH
25847: LD_OWVAR 2
25851: PPUSH
25852: LD_INT 2
25854: PPUSH
25855: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
25859: LD_INT 29
25861: PPUSH
25862: LD_OWVAR 2
25866: PPUSH
25867: LD_INT 2
25869: PPUSH
25870: CALL_OW 322
// end ;
25874: PPOPN 3
25876: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
25877: LD_EXP 40
25881: PUSH
25882: LD_EXP 83
25886: AND
25887: IFFALSE 25998
25889: GO 25891
25891: DISABLE
25892: LD_INT 0
25894: PPUSH
25895: PPUSH
25896: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25897: LD_ADDR_VAR 0 3
25901: PUSH
25902: LD_INT 22
25904: PUSH
25905: LD_OWVAR 2
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: PUSH
25914: LD_INT 25
25916: PUSH
25917: LD_INT 1
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PPUSH
25928: CALL_OW 69
25932: ST_TO_ADDR
// if not tmp then
25933: LD_VAR 0 3
25937: NOT
25938: IFFALSE 25942
// exit ;
25940: GO 25998
// un := tmp [ rand ( 1 , tmp ) ] ;
25942: LD_ADDR_VAR 0 2
25946: PUSH
25947: LD_VAR 0 3
25951: PUSH
25952: LD_INT 1
25954: PPUSH
25955: LD_VAR 0 3
25959: PPUSH
25960: CALL_OW 12
25964: ARRAY
25965: ST_TO_ADDR
// if Crawls ( un ) then
25966: LD_VAR 0 2
25970: PPUSH
25971: CALL_OW 318
25975: IFFALSE 25986
// ComWalk ( un ) ;
25977: LD_VAR 0 2
25981: PPUSH
25982: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25986: LD_VAR 0 2
25990: PPUSH
25991: LD_INT 8
25993: PPUSH
25994: CALL_OW 336
// end ;
25998: PPOPN 3
26000: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
26001: LD_EXP 40
26005: PUSH
26006: LD_EXP 84
26010: AND
26011: IFFALSE 26155
26013: GO 26015
26015: DISABLE
26016: LD_INT 0
26018: PPUSH
26019: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
26020: LD_ADDR_VAR 0 2
26024: PUSH
26025: LD_INT 22
26027: PUSH
26028: LD_OWVAR 2
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: PUSH
26037: LD_INT 21
26039: PUSH
26040: LD_INT 2
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 2
26049: PUSH
26050: LD_INT 34
26052: PUSH
26053: LD_INT 12
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: PUSH
26060: LD_INT 34
26062: PUSH
26063: LD_INT 51
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: PUSH
26070: LD_INT 34
26072: PUSH
26073: LD_INT 32
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: LIST
26090: PPUSH
26091: CALL_OW 69
26095: ST_TO_ADDR
// if not tmp then
26096: LD_VAR 0 2
26100: NOT
26101: IFFALSE 26105
// exit ;
26103: GO 26155
// for i in tmp do
26105: LD_ADDR_VAR 0 1
26109: PUSH
26110: LD_VAR 0 2
26114: PUSH
26115: FOR_IN
26116: IFFALSE 26153
// if GetCargo ( i , mat_artifact ) = 0 then
26118: LD_VAR 0 1
26122: PPUSH
26123: LD_INT 4
26125: PPUSH
26126: CALL_OW 289
26130: PUSH
26131: LD_INT 0
26133: EQUAL
26134: IFFALSE 26151
// SetCargo ( i , mat_siberit , 100 ) ;
26136: LD_VAR 0 1
26140: PPUSH
26141: LD_INT 3
26143: PPUSH
26144: LD_INT 100
26146: PPUSH
26147: CALL_OW 290
26151: GO 26115
26153: POP
26154: POP
// end ;
26155: PPOPN 2
26157: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
26158: LD_EXP 40
26162: PUSH
26163: LD_EXP 85
26167: AND
26168: IFFALSE 26351
26170: GO 26172
26172: DISABLE
26173: LD_INT 0
26175: PPUSH
26176: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26177: LD_ADDR_VAR 0 2
26181: PUSH
26182: LD_INT 22
26184: PUSH
26185: LD_OWVAR 2
26189: PUSH
26190: EMPTY
26191: LIST
26192: LIST
26193: PPUSH
26194: CALL_OW 69
26198: ST_TO_ADDR
// if not tmp then
26199: LD_VAR 0 2
26203: NOT
26204: IFFALSE 26208
// exit ;
26206: GO 26351
// for i := 1 to 2 do
26208: LD_ADDR_VAR 0 1
26212: PUSH
26213: DOUBLE
26214: LD_INT 1
26216: DEC
26217: ST_TO_ADDR
26218: LD_INT 2
26220: PUSH
26221: FOR_TO
26222: IFFALSE 26349
// begin uc_side := your_side ;
26224: LD_ADDR_OWVAR 20
26228: PUSH
26229: LD_OWVAR 2
26233: ST_TO_ADDR
// uc_nation := nation_american ;
26234: LD_ADDR_OWVAR 21
26238: PUSH
26239: LD_INT 1
26241: ST_TO_ADDR
// vc_chassis := us_morphling ;
26242: LD_ADDR_OWVAR 37
26246: PUSH
26247: LD_INT 5
26249: ST_TO_ADDR
// vc_engine := engine_siberite ;
26250: LD_ADDR_OWVAR 39
26254: PUSH
26255: LD_INT 3
26257: ST_TO_ADDR
// vc_control := control_computer ;
26258: LD_ADDR_OWVAR 38
26262: PUSH
26263: LD_INT 3
26265: ST_TO_ADDR
// vc_weapon := us_double_laser ;
26266: LD_ADDR_OWVAR 40
26270: PUSH
26271: LD_INT 10
26273: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
26274: LD_VAR 0 2
26278: PUSH
26279: LD_INT 1
26281: ARRAY
26282: PPUSH
26283: CALL_OW 310
26287: NOT
26288: IFFALSE 26335
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
26290: CALL_OW 45
26294: PPUSH
26295: LD_VAR 0 2
26299: PUSH
26300: LD_INT 1
26302: ARRAY
26303: PPUSH
26304: CALL_OW 250
26308: PPUSH
26309: LD_VAR 0 2
26313: PUSH
26314: LD_INT 1
26316: ARRAY
26317: PPUSH
26318: CALL_OW 251
26322: PPUSH
26323: LD_INT 12
26325: PPUSH
26326: LD_INT 1
26328: PPUSH
26329: CALL_OW 50
26333: GO 26347
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
26335: CALL_OW 45
26339: PPUSH
26340: LD_INT 1
26342: PPUSH
26343: CALL_OW 51
// end ;
26347: GO 26221
26349: POP
26350: POP
// end ;
26351: PPOPN 2
26353: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
26354: LD_EXP 40
26358: PUSH
26359: LD_EXP 86
26363: AND
26364: IFFALSE 26586
26366: GO 26368
26368: DISABLE
26369: LD_INT 0
26371: PPUSH
26372: PPUSH
26373: PPUSH
26374: PPUSH
26375: PPUSH
26376: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26377: LD_ADDR_VAR 0 6
26381: PUSH
26382: LD_INT 22
26384: PUSH
26385: LD_OWVAR 2
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 21
26396: PUSH
26397: LD_INT 1
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: LD_INT 3
26406: PUSH
26407: LD_INT 23
26409: PUSH
26410: LD_INT 0
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PUSH
26417: EMPTY
26418: LIST
26419: LIST
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: LIST
26425: PPUSH
26426: CALL_OW 69
26430: ST_TO_ADDR
// if not tmp then
26431: LD_VAR 0 6
26435: NOT
26436: IFFALSE 26440
// exit ;
26438: GO 26586
// s1 := rand ( 1 , 4 ) ;
26440: LD_ADDR_VAR 0 2
26444: PUSH
26445: LD_INT 1
26447: PPUSH
26448: LD_INT 4
26450: PPUSH
26451: CALL_OW 12
26455: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
26456: LD_ADDR_VAR 0 4
26460: PUSH
26461: LD_VAR 0 6
26465: PUSH
26466: LD_INT 1
26468: ARRAY
26469: PPUSH
26470: LD_VAR 0 2
26474: PPUSH
26475: CALL_OW 259
26479: ST_TO_ADDR
// if s1 = 1 then
26480: LD_VAR 0 2
26484: PUSH
26485: LD_INT 1
26487: EQUAL
26488: IFFALSE 26508
// s2 := rand ( 2 , 4 ) else
26490: LD_ADDR_VAR 0 3
26494: PUSH
26495: LD_INT 2
26497: PPUSH
26498: LD_INT 4
26500: PPUSH
26501: CALL_OW 12
26505: ST_TO_ADDR
26506: GO 26516
// s2 := 1 ;
26508: LD_ADDR_VAR 0 3
26512: PUSH
26513: LD_INT 1
26515: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
26516: LD_ADDR_VAR 0 5
26520: PUSH
26521: LD_VAR 0 6
26525: PUSH
26526: LD_INT 1
26528: ARRAY
26529: PPUSH
26530: LD_VAR 0 3
26534: PPUSH
26535: CALL_OW 259
26539: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
26540: LD_VAR 0 6
26544: PUSH
26545: LD_INT 1
26547: ARRAY
26548: PPUSH
26549: LD_VAR 0 2
26553: PPUSH
26554: LD_VAR 0 5
26558: PPUSH
26559: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
26563: LD_VAR 0 6
26567: PUSH
26568: LD_INT 1
26570: ARRAY
26571: PPUSH
26572: LD_VAR 0 3
26576: PPUSH
26577: LD_VAR 0 4
26581: PPUSH
26582: CALL_OW 237
// end ;
26586: PPOPN 6
26588: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
26589: LD_EXP 40
26593: PUSH
26594: LD_EXP 87
26598: AND
26599: IFFALSE 26678
26601: GO 26603
26603: DISABLE
26604: LD_INT 0
26606: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
26607: LD_ADDR_VAR 0 1
26611: PUSH
26612: LD_INT 22
26614: PUSH
26615: LD_OWVAR 2
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PUSH
26624: LD_INT 30
26626: PUSH
26627: LD_INT 3
26629: PUSH
26630: EMPTY
26631: LIST
26632: LIST
26633: PUSH
26634: EMPTY
26635: LIST
26636: LIST
26637: PPUSH
26638: CALL_OW 69
26642: ST_TO_ADDR
// if not tmp then
26643: LD_VAR 0 1
26647: NOT
26648: IFFALSE 26652
// exit ;
26650: GO 26678
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26652: LD_VAR 0 1
26656: PUSH
26657: LD_INT 1
26659: PPUSH
26660: LD_VAR 0 1
26664: PPUSH
26665: CALL_OW 12
26669: ARRAY
26670: PPUSH
26671: LD_INT 1
26673: PPUSH
26674: CALL_OW 234
// end ;
26678: PPOPN 1
26680: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
26681: LD_EXP 40
26685: PUSH
26686: LD_EXP 88
26690: AND
26691: IFFALSE 26803
26693: GO 26695
26695: DISABLE
26696: LD_INT 0
26698: PPUSH
26699: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
26700: LD_ADDR_VAR 0 2
26704: PUSH
26705: LD_INT 22
26707: PUSH
26708: LD_OWVAR 2
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: PUSH
26717: LD_INT 2
26719: PUSH
26720: LD_INT 30
26722: PUSH
26723: LD_INT 27
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: PUSH
26730: LD_INT 30
26732: PUSH
26733: LD_INT 26
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: PUSH
26740: LD_INT 30
26742: PUSH
26743: LD_INT 28
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: LIST
26754: LIST
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: PPUSH
26760: CALL_OW 69
26764: ST_TO_ADDR
// if not tmp then
26765: LD_VAR 0 2
26769: NOT
26770: IFFALSE 26774
// exit ;
26772: GO 26803
// for i in tmp do
26774: LD_ADDR_VAR 0 1
26778: PUSH
26779: LD_VAR 0 2
26783: PUSH
26784: FOR_IN
26785: IFFALSE 26801
// SetLives ( i , 1 ) ;
26787: LD_VAR 0 1
26791: PPUSH
26792: LD_INT 1
26794: PPUSH
26795: CALL_OW 234
26799: GO 26784
26801: POP
26802: POP
// end ;
26803: PPOPN 2
26805: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
26806: LD_EXP 40
26810: PUSH
26811: LD_EXP 89
26815: AND
26816: IFFALSE 27103
26818: GO 26820
26820: DISABLE
26821: LD_INT 0
26823: PPUSH
26824: PPUSH
26825: PPUSH
// begin i := rand ( 1 , 7 ) ;
26826: LD_ADDR_VAR 0 1
26830: PUSH
26831: LD_INT 1
26833: PPUSH
26834: LD_INT 7
26836: PPUSH
26837: CALL_OW 12
26841: ST_TO_ADDR
// case i of 1 :
26842: LD_VAR 0 1
26846: PUSH
26847: LD_INT 1
26849: DOUBLE
26850: EQUAL
26851: IFTRUE 26855
26853: GO 26865
26855: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
26856: LD_STRING earthquake(getX(game), 0, 32)
26858: PPUSH
26859: CALL_OW 559
26863: GO 27103
26865: LD_INT 2
26867: DOUBLE
26868: EQUAL
26869: IFTRUE 26873
26871: GO 26887
26873: POP
// begin ToLua ( displayStucuk(); ) ;
26874: LD_STRING displayStucuk();
26876: PPUSH
26877: CALL_OW 559
// ResetFog ;
26881: CALL_OW 335
// end ; 3 :
26885: GO 27103
26887: LD_INT 3
26889: DOUBLE
26890: EQUAL
26891: IFTRUE 26895
26893: GO 26999
26895: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26896: LD_ADDR_VAR 0 2
26900: PUSH
26901: LD_INT 22
26903: PUSH
26904: LD_OWVAR 2
26908: PUSH
26909: EMPTY
26910: LIST
26911: LIST
26912: PUSH
26913: LD_INT 25
26915: PUSH
26916: LD_INT 1
26918: PUSH
26919: EMPTY
26920: LIST
26921: LIST
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: PPUSH
26927: CALL_OW 69
26931: ST_TO_ADDR
// if not tmp then
26932: LD_VAR 0 2
26936: NOT
26937: IFFALSE 26941
// exit ;
26939: GO 27103
// un := tmp [ rand ( 1 , tmp ) ] ;
26941: LD_ADDR_VAR 0 3
26945: PUSH
26946: LD_VAR 0 2
26950: PUSH
26951: LD_INT 1
26953: PPUSH
26954: LD_VAR 0 2
26958: PPUSH
26959: CALL_OW 12
26963: ARRAY
26964: ST_TO_ADDR
// if Crawls ( un ) then
26965: LD_VAR 0 3
26969: PPUSH
26970: CALL_OW 318
26974: IFFALSE 26985
// ComWalk ( un ) ;
26976: LD_VAR 0 3
26980: PPUSH
26981: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26985: LD_VAR 0 3
26989: PPUSH
26990: LD_INT 8
26992: PPUSH
26993: CALL_OW 336
// end ; 4 :
26997: GO 27103
26999: LD_INT 4
27001: DOUBLE
27002: EQUAL
27003: IFTRUE 27007
27005: GO 27081
27007: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27008: LD_ADDR_VAR 0 2
27012: PUSH
27013: LD_INT 22
27015: PUSH
27016: LD_OWVAR 2
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: PUSH
27025: LD_INT 30
27027: PUSH
27028: LD_INT 29
27030: PUSH
27031: EMPTY
27032: LIST
27033: LIST
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: PPUSH
27039: CALL_OW 69
27043: ST_TO_ADDR
// if not tmp then
27044: LD_VAR 0 2
27048: NOT
27049: IFFALSE 27053
// exit ;
27051: GO 27103
// CenterNowOnUnits ( tmp [ 1 ] ) ;
27053: LD_VAR 0 2
27057: PUSH
27058: LD_INT 1
27060: ARRAY
27061: PPUSH
27062: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
27066: LD_VAR 0 2
27070: PUSH
27071: LD_INT 1
27073: ARRAY
27074: PPUSH
27075: CALL_OW 65
// end ; 5 .. 7 :
27079: GO 27103
27081: LD_INT 5
27083: DOUBLE
27084: GREATEREQUAL
27085: IFFALSE 27093
27087: LD_INT 7
27089: DOUBLE
27090: LESSEQUAL
27091: IFTRUE 27095
27093: GO 27102
27095: POP
// StreamSibBomb ; end ;
27096: CALL 23340 0 0
27100: GO 27103
27102: POP
// end ;
27103: PPOPN 3
27105: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
27106: LD_EXP 40
27110: PUSH
27111: LD_EXP 90
27115: AND
27116: IFFALSE 27272
27118: GO 27120
27120: DISABLE
27121: LD_INT 0
27123: PPUSH
27124: PPUSH
27125: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
27126: LD_ADDR_VAR 0 2
27130: PUSH
27131: LD_INT 81
27133: PUSH
27134: LD_OWVAR 2
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: PUSH
27143: LD_INT 2
27145: PUSH
27146: LD_INT 21
27148: PUSH
27149: LD_INT 1
27151: PUSH
27152: EMPTY
27153: LIST
27154: LIST
27155: PUSH
27156: LD_INT 21
27158: PUSH
27159: LD_INT 2
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: LIST
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: PPUSH
27175: CALL_OW 69
27179: ST_TO_ADDR
// if not tmp then
27180: LD_VAR 0 2
27184: NOT
27185: IFFALSE 27189
// exit ;
27187: GO 27272
// p := 0 ;
27189: LD_ADDR_VAR 0 3
27193: PUSH
27194: LD_INT 0
27196: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27197: LD_INT 35
27199: PPUSH
27200: CALL_OW 67
// p := p + 1 ;
27204: LD_ADDR_VAR 0 3
27208: PUSH
27209: LD_VAR 0 3
27213: PUSH
27214: LD_INT 1
27216: PLUS
27217: ST_TO_ADDR
// for i in tmp do
27218: LD_ADDR_VAR 0 1
27222: PUSH
27223: LD_VAR 0 2
27227: PUSH
27228: FOR_IN
27229: IFFALSE 27260
// if GetLives ( i ) < 1000 then
27231: LD_VAR 0 1
27235: PPUSH
27236: CALL_OW 256
27240: PUSH
27241: LD_INT 1000
27243: LESS
27244: IFFALSE 27258
// SetLives ( i , 1000 ) ;
27246: LD_VAR 0 1
27250: PPUSH
27251: LD_INT 1000
27253: PPUSH
27254: CALL_OW 234
27258: GO 27228
27260: POP
27261: POP
// until p > 20 ;
27262: LD_VAR 0 3
27266: PUSH
27267: LD_INT 20
27269: GREATER
27270: IFFALSE 27197
// end ;
27272: PPOPN 3
27274: END
// every 0 0$1 trigger StreamModeActive and sTime do
27275: LD_EXP 40
27279: PUSH
27280: LD_EXP 91
27284: AND
27285: IFFALSE 27320
27287: GO 27289
27289: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
27290: LD_INT 28
27292: PPUSH
27293: LD_OWVAR 2
27297: PPUSH
27298: LD_INT 2
27300: PPUSH
27301: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
27305: LD_INT 30
27307: PPUSH
27308: LD_OWVAR 2
27312: PPUSH
27313: LD_INT 2
27315: PPUSH
27316: CALL_OW 322
// end ;
27320: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
27321: LD_EXP 40
27325: PUSH
27326: LD_EXP 92
27330: AND
27331: IFFALSE 27452
27333: GO 27335
27335: DISABLE
27336: LD_INT 0
27338: PPUSH
27339: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27340: LD_ADDR_VAR 0 2
27344: PUSH
27345: LD_INT 22
27347: PUSH
27348: LD_OWVAR 2
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: PUSH
27357: LD_INT 21
27359: PUSH
27360: LD_INT 1
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: PUSH
27367: LD_INT 3
27369: PUSH
27370: LD_INT 23
27372: PUSH
27373: LD_INT 0
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: LIST
27388: PPUSH
27389: CALL_OW 69
27393: ST_TO_ADDR
// if not tmp then
27394: LD_VAR 0 2
27398: NOT
27399: IFFALSE 27403
// exit ;
27401: GO 27452
// for i in tmp do
27403: LD_ADDR_VAR 0 1
27407: PUSH
27408: LD_VAR 0 2
27412: PUSH
27413: FOR_IN
27414: IFFALSE 27450
// begin if Crawls ( i ) then
27416: LD_VAR 0 1
27420: PPUSH
27421: CALL_OW 318
27425: IFFALSE 27436
// ComWalk ( i ) ;
27427: LD_VAR 0 1
27431: PPUSH
27432: CALL_OW 138
// SetClass ( i , 2 ) ;
27436: LD_VAR 0 1
27440: PPUSH
27441: LD_INT 2
27443: PPUSH
27444: CALL_OW 336
// end ;
27448: GO 27413
27450: POP
27451: POP
// end ;
27452: PPOPN 2
27454: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
27455: LD_EXP 40
27459: PUSH
27460: LD_EXP 93
27464: AND
27465: IFFALSE 27753
27467: GO 27469
27469: DISABLE
27470: LD_INT 0
27472: PPUSH
27473: PPUSH
27474: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
27475: LD_OWVAR 2
27479: PPUSH
27480: LD_INT 9
27482: PPUSH
27483: LD_INT 1
27485: PPUSH
27486: LD_INT 1
27488: PPUSH
27489: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
27493: LD_INT 9
27495: PPUSH
27496: LD_OWVAR 2
27500: PPUSH
27501: CALL_OW 343
// uc_side := 9 ;
27505: LD_ADDR_OWVAR 20
27509: PUSH
27510: LD_INT 9
27512: ST_TO_ADDR
// uc_nation := 2 ;
27513: LD_ADDR_OWVAR 21
27517: PUSH
27518: LD_INT 2
27520: ST_TO_ADDR
// hc_name := Dark Warrior ;
27521: LD_ADDR_OWVAR 26
27525: PUSH
27526: LD_STRING Dark Warrior
27528: ST_TO_ADDR
// hc_gallery :=  ;
27529: LD_ADDR_OWVAR 33
27533: PUSH
27534: LD_STRING 
27536: ST_TO_ADDR
// hc_noskilllimit := true ;
27537: LD_ADDR_OWVAR 76
27541: PUSH
27542: LD_INT 1
27544: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
27545: LD_ADDR_OWVAR 31
27549: PUSH
27550: LD_INT 30
27552: PUSH
27553: LD_INT 30
27555: PUSH
27556: LD_INT 30
27558: PUSH
27559: LD_INT 30
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: LIST
27566: LIST
27567: ST_TO_ADDR
// un := CreateHuman ;
27568: LD_ADDR_VAR 0 3
27572: PUSH
27573: CALL_OW 44
27577: ST_TO_ADDR
// hc_noskilllimit := false ;
27578: LD_ADDR_OWVAR 76
27582: PUSH
27583: LD_INT 0
27585: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27586: LD_VAR 0 3
27590: PPUSH
27591: LD_INT 1
27593: PPUSH
27594: CALL_OW 51
// ToLua ( playRanger() ) ;
27598: LD_STRING playRanger()
27600: PPUSH
27601: CALL_OW 559
// p := 0 ;
27605: LD_ADDR_VAR 0 2
27609: PUSH
27610: LD_INT 0
27612: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27613: LD_INT 35
27615: PPUSH
27616: CALL_OW 67
// p := p + 1 ;
27620: LD_ADDR_VAR 0 2
27624: PUSH
27625: LD_VAR 0 2
27629: PUSH
27630: LD_INT 1
27632: PLUS
27633: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
27634: LD_VAR 0 3
27638: PPUSH
27639: CALL_OW 256
27643: PUSH
27644: LD_INT 1000
27646: LESS
27647: IFFALSE 27661
// SetLives ( un , 1000 ) ;
27649: LD_VAR 0 3
27653: PPUSH
27654: LD_INT 1000
27656: PPUSH
27657: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
27661: LD_VAR 0 3
27665: PPUSH
27666: LD_INT 81
27668: PUSH
27669: LD_OWVAR 2
27673: PUSH
27674: EMPTY
27675: LIST
27676: LIST
27677: PUSH
27678: LD_INT 91
27680: PUSH
27681: LD_VAR 0 3
27685: PUSH
27686: LD_INT 30
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: LIST
27693: PUSH
27694: EMPTY
27695: LIST
27696: LIST
27697: PPUSH
27698: CALL_OW 69
27702: PPUSH
27703: LD_VAR 0 3
27707: PPUSH
27708: CALL_OW 74
27712: PPUSH
27713: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
27717: LD_VAR 0 2
27721: PUSH
27722: LD_INT 80
27724: GREATER
27725: PUSH
27726: LD_VAR 0 3
27730: PPUSH
27731: CALL_OW 301
27735: OR
27736: IFFALSE 27613
// if un then
27738: LD_VAR 0 3
27742: IFFALSE 27753
// RemoveUnit ( un ) ;
27744: LD_VAR 0 3
27748: PPUSH
27749: CALL_OW 64
// end ;
27753: PPOPN 3
27755: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
27756: LD_EXP 94
27760: IFFALSE 27876
27762: GO 27764
27764: DISABLE
27765: LD_INT 0
27767: PPUSH
27768: PPUSH
27769: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27770: LD_ADDR_VAR 0 2
27774: PUSH
27775: LD_INT 81
27777: PUSH
27778: LD_OWVAR 2
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PUSH
27787: LD_INT 21
27789: PUSH
27790: LD_INT 1
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: PPUSH
27801: CALL_OW 69
27805: ST_TO_ADDR
// ToLua ( playComputer() ) ;
27806: LD_STRING playComputer()
27808: PPUSH
27809: CALL_OW 559
// if not tmp then
27813: LD_VAR 0 2
27817: NOT
27818: IFFALSE 27822
// exit ;
27820: GO 27876
// for i in tmp do
27822: LD_ADDR_VAR 0 1
27826: PUSH
27827: LD_VAR 0 2
27831: PUSH
27832: FOR_IN
27833: IFFALSE 27874
// for j := 1 to 4 do
27835: LD_ADDR_VAR 0 3
27839: PUSH
27840: DOUBLE
27841: LD_INT 1
27843: DEC
27844: ST_TO_ADDR
27845: LD_INT 4
27847: PUSH
27848: FOR_TO
27849: IFFALSE 27870
// SetSkill ( i , j , 10 ) ;
27851: LD_VAR 0 1
27855: PPUSH
27856: LD_VAR 0 3
27860: PPUSH
27861: LD_INT 10
27863: PPUSH
27864: CALL_OW 237
27868: GO 27848
27870: POP
27871: POP
27872: GO 27832
27874: POP
27875: POP
// end ;
27876: PPOPN 3
27878: END
// every 0 0$1 trigger s30 do var i , tmp ;
27879: LD_EXP 95
27883: IFFALSE 27952
27885: GO 27887
27887: DISABLE
27888: LD_INT 0
27890: PPUSH
27891: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27892: LD_ADDR_VAR 0 2
27896: PUSH
27897: LD_INT 22
27899: PUSH
27900: LD_OWVAR 2
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: PPUSH
27909: CALL_OW 69
27913: ST_TO_ADDR
// if not tmp then
27914: LD_VAR 0 2
27918: NOT
27919: IFFALSE 27923
// exit ;
27921: GO 27952
// for i in tmp do
27923: LD_ADDR_VAR 0 1
27927: PUSH
27928: LD_VAR 0 2
27932: PUSH
27933: FOR_IN
27934: IFFALSE 27950
// SetLives ( i , 300 ) ;
27936: LD_VAR 0 1
27940: PPUSH
27941: LD_INT 300
27943: PPUSH
27944: CALL_OW 234
27948: GO 27933
27950: POP
27951: POP
// end ;
27952: PPOPN 2
27954: END
// every 0 0$1 trigger s60 do var i , tmp ;
27955: LD_EXP 96
27959: IFFALSE 28028
27961: GO 27963
27963: DISABLE
27964: LD_INT 0
27966: PPUSH
27967: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27968: LD_ADDR_VAR 0 2
27972: PUSH
27973: LD_INT 22
27975: PUSH
27976: LD_OWVAR 2
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: PPUSH
27985: CALL_OW 69
27989: ST_TO_ADDR
// if not tmp then
27990: LD_VAR 0 2
27994: NOT
27995: IFFALSE 27999
// exit ;
27997: GO 28028
// for i in tmp do
27999: LD_ADDR_VAR 0 1
28003: PUSH
28004: LD_VAR 0 2
28008: PUSH
28009: FOR_IN
28010: IFFALSE 28026
// SetLives ( i , 600 ) ;
28012: LD_VAR 0 1
28016: PPUSH
28017: LD_INT 600
28019: PPUSH
28020: CALL_OW 234
28024: GO 28009
28026: POP
28027: POP
// end ;
28028: PPOPN 2
28030: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
28031: LD_INT 0
28033: PPUSH
// case cmd of 301 :
28034: LD_VAR 0 1
28038: PUSH
28039: LD_INT 301
28041: DOUBLE
28042: EQUAL
28043: IFTRUE 28047
28045: GO 28079
28047: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
28048: LD_VAR 0 6
28052: PPUSH
28053: LD_VAR 0 7
28057: PPUSH
28058: LD_VAR 0 8
28062: PPUSH
28063: LD_VAR 0 4
28067: PPUSH
28068: LD_VAR 0 5
28072: PPUSH
28073: CALL 29288 0 5
28077: GO 28200
28079: LD_INT 302
28081: DOUBLE
28082: EQUAL
28083: IFTRUE 28087
28085: GO 28124
28087: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
28088: LD_VAR 0 6
28092: PPUSH
28093: LD_VAR 0 7
28097: PPUSH
28098: LD_VAR 0 8
28102: PPUSH
28103: LD_VAR 0 9
28107: PPUSH
28108: LD_VAR 0 4
28112: PPUSH
28113: LD_VAR 0 5
28117: PPUSH
28118: CALL 29379 0 6
28122: GO 28200
28124: LD_INT 303
28126: DOUBLE
28127: EQUAL
28128: IFTRUE 28132
28130: GO 28169
28132: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
28133: LD_VAR 0 6
28137: PPUSH
28138: LD_VAR 0 7
28142: PPUSH
28143: LD_VAR 0 8
28147: PPUSH
28148: LD_VAR 0 9
28152: PPUSH
28153: LD_VAR 0 4
28157: PPUSH
28158: LD_VAR 0 5
28162: PPUSH
28163: CALL 28205 0 6
28167: GO 28200
28169: LD_INT 304
28171: DOUBLE
28172: EQUAL
28173: IFTRUE 28177
28175: GO 28199
28177: POP
// hHackTeleport ( unit , x , y ) ; end ;
28178: LD_VAR 0 2
28182: PPUSH
28183: LD_VAR 0 4
28187: PPUSH
28188: LD_VAR 0 5
28192: PPUSH
28193: CALL 29972 0 3
28197: GO 28200
28199: POP
// end ;
28200: LD_VAR 0 12
28204: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
28205: LD_INT 0
28207: PPUSH
28208: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
28209: LD_VAR 0 1
28213: PUSH
28214: LD_INT 1
28216: LESS
28217: PUSH
28218: LD_VAR 0 1
28222: PUSH
28223: LD_INT 3
28225: GREATER
28226: OR
28227: PUSH
28228: LD_VAR 0 5
28232: PPUSH
28233: LD_VAR 0 6
28237: PPUSH
28238: CALL_OW 428
28242: OR
28243: IFFALSE 28247
// exit ;
28245: GO 28975
// uc_side := your_side ;
28247: LD_ADDR_OWVAR 20
28251: PUSH
28252: LD_OWVAR 2
28256: ST_TO_ADDR
// uc_nation := nation ;
28257: LD_ADDR_OWVAR 21
28261: PUSH
28262: LD_VAR 0 1
28266: ST_TO_ADDR
// bc_level = 1 ;
28267: LD_ADDR_OWVAR 43
28271: PUSH
28272: LD_INT 1
28274: ST_TO_ADDR
// case btype of 1 :
28275: LD_VAR 0 2
28279: PUSH
28280: LD_INT 1
28282: DOUBLE
28283: EQUAL
28284: IFTRUE 28288
28286: GO 28299
28288: POP
// bc_type := b_depot ; 2 :
28289: LD_ADDR_OWVAR 42
28293: PUSH
28294: LD_INT 0
28296: ST_TO_ADDR
28297: GO 28919
28299: LD_INT 2
28301: DOUBLE
28302: EQUAL
28303: IFTRUE 28307
28305: GO 28318
28307: POP
// bc_type := b_warehouse ; 3 :
28308: LD_ADDR_OWVAR 42
28312: PUSH
28313: LD_INT 1
28315: ST_TO_ADDR
28316: GO 28919
28318: LD_INT 3
28320: DOUBLE
28321: EQUAL
28322: IFTRUE 28326
28324: GO 28337
28326: POP
// bc_type := b_lab ; 4 .. 9 :
28327: LD_ADDR_OWVAR 42
28331: PUSH
28332: LD_INT 6
28334: ST_TO_ADDR
28335: GO 28919
28337: LD_INT 4
28339: DOUBLE
28340: GREATEREQUAL
28341: IFFALSE 28349
28343: LD_INT 9
28345: DOUBLE
28346: LESSEQUAL
28347: IFTRUE 28351
28349: GO 28411
28351: POP
// begin bc_type := b_lab_half ;
28352: LD_ADDR_OWVAR 42
28356: PUSH
28357: LD_INT 7
28359: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
28360: LD_ADDR_OWVAR 44
28364: PUSH
28365: LD_INT 10
28367: PUSH
28368: LD_INT 11
28370: PUSH
28371: LD_INT 12
28373: PUSH
28374: LD_INT 15
28376: PUSH
28377: LD_INT 14
28379: PUSH
28380: LD_INT 13
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: LIST
28390: PUSH
28391: LD_VAR 0 2
28395: PUSH
28396: LD_INT 3
28398: MINUS
28399: ARRAY
28400: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
28401: LD_ADDR_OWVAR 45
28405: PUSH
28406: LD_INT 9
28408: ST_TO_ADDR
// end ; 10 .. 13 :
28409: GO 28919
28411: LD_INT 10
28413: DOUBLE
28414: GREATEREQUAL
28415: IFFALSE 28423
28417: LD_INT 13
28419: DOUBLE
28420: LESSEQUAL
28421: IFTRUE 28425
28423: GO 28502
28425: POP
// begin bc_type := b_lab_full ;
28426: LD_ADDR_OWVAR 42
28430: PUSH
28431: LD_INT 8
28433: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
28434: LD_ADDR_OWVAR 44
28438: PUSH
28439: LD_INT 10
28441: PUSH
28442: LD_INT 12
28444: PUSH
28445: LD_INT 14
28447: PUSH
28448: LD_INT 13
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: LIST
28455: LIST
28456: PUSH
28457: LD_VAR 0 2
28461: PUSH
28462: LD_INT 9
28464: MINUS
28465: ARRAY
28466: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
28467: LD_ADDR_OWVAR 45
28471: PUSH
28472: LD_INT 11
28474: PUSH
28475: LD_INT 15
28477: PUSH
28478: LD_INT 12
28480: PUSH
28481: LD_INT 15
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: LIST
28488: LIST
28489: PUSH
28490: LD_VAR 0 2
28494: PUSH
28495: LD_INT 9
28497: MINUS
28498: ARRAY
28499: ST_TO_ADDR
// end ; 14 :
28500: GO 28919
28502: LD_INT 14
28504: DOUBLE
28505: EQUAL
28506: IFTRUE 28510
28508: GO 28521
28510: POP
// bc_type := b_workshop ; 15 :
28511: LD_ADDR_OWVAR 42
28515: PUSH
28516: LD_INT 2
28518: ST_TO_ADDR
28519: GO 28919
28521: LD_INT 15
28523: DOUBLE
28524: EQUAL
28525: IFTRUE 28529
28527: GO 28540
28529: POP
// bc_type := b_factory ; 16 :
28530: LD_ADDR_OWVAR 42
28534: PUSH
28535: LD_INT 3
28537: ST_TO_ADDR
28538: GO 28919
28540: LD_INT 16
28542: DOUBLE
28543: EQUAL
28544: IFTRUE 28548
28546: GO 28559
28548: POP
// bc_type := b_ext_gun ; 17 :
28549: LD_ADDR_OWVAR 42
28553: PUSH
28554: LD_INT 17
28556: ST_TO_ADDR
28557: GO 28919
28559: LD_INT 17
28561: DOUBLE
28562: EQUAL
28563: IFTRUE 28567
28565: GO 28595
28567: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
28568: LD_ADDR_OWVAR 42
28572: PUSH
28573: LD_INT 19
28575: PUSH
28576: LD_INT 23
28578: PUSH
28579: LD_INT 19
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: LIST
28586: PUSH
28587: LD_VAR 0 1
28591: ARRAY
28592: ST_TO_ADDR
28593: GO 28919
28595: LD_INT 18
28597: DOUBLE
28598: EQUAL
28599: IFTRUE 28603
28601: GO 28614
28603: POP
// bc_type := b_ext_radar ; 19 :
28604: LD_ADDR_OWVAR 42
28608: PUSH
28609: LD_INT 20
28611: ST_TO_ADDR
28612: GO 28919
28614: LD_INT 19
28616: DOUBLE
28617: EQUAL
28618: IFTRUE 28622
28620: GO 28633
28622: POP
// bc_type := b_ext_radio ; 20 :
28623: LD_ADDR_OWVAR 42
28627: PUSH
28628: LD_INT 22
28630: ST_TO_ADDR
28631: GO 28919
28633: LD_INT 20
28635: DOUBLE
28636: EQUAL
28637: IFTRUE 28641
28639: GO 28652
28641: POP
// bc_type := b_ext_siberium ; 21 :
28642: LD_ADDR_OWVAR 42
28646: PUSH
28647: LD_INT 21
28649: ST_TO_ADDR
28650: GO 28919
28652: LD_INT 21
28654: DOUBLE
28655: EQUAL
28656: IFTRUE 28660
28658: GO 28671
28660: POP
// bc_type := b_ext_computer ; 22 :
28661: LD_ADDR_OWVAR 42
28665: PUSH
28666: LD_INT 24
28668: ST_TO_ADDR
28669: GO 28919
28671: LD_INT 22
28673: DOUBLE
28674: EQUAL
28675: IFTRUE 28679
28677: GO 28690
28679: POP
// bc_type := b_ext_track ; 23 :
28680: LD_ADDR_OWVAR 42
28684: PUSH
28685: LD_INT 16
28687: ST_TO_ADDR
28688: GO 28919
28690: LD_INT 23
28692: DOUBLE
28693: EQUAL
28694: IFTRUE 28698
28696: GO 28709
28698: POP
// bc_type := b_ext_laser ; 24 :
28699: LD_ADDR_OWVAR 42
28703: PUSH
28704: LD_INT 25
28706: ST_TO_ADDR
28707: GO 28919
28709: LD_INT 24
28711: DOUBLE
28712: EQUAL
28713: IFTRUE 28717
28715: GO 28728
28717: POP
// bc_type := b_control_tower ; 25 :
28718: LD_ADDR_OWVAR 42
28722: PUSH
28723: LD_INT 36
28725: ST_TO_ADDR
28726: GO 28919
28728: LD_INT 25
28730: DOUBLE
28731: EQUAL
28732: IFTRUE 28736
28734: GO 28747
28736: POP
// bc_type := b_breastwork ; 26 :
28737: LD_ADDR_OWVAR 42
28741: PUSH
28742: LD_INT 31
28744: ST_TO_ADDR
28745: GO 28919
28747: LD_INT 26
28749: DOUBLE
28750: EQUAL
28751: IFTRUE 28755
28753: GO 28766
28755: POP
// bc_type := b_bunker ; 27 :
28756: LD_ADDR_OWVAR 42
28760: PUSH
28761: LD_INT 32
28763: ST_TO_ADDR
28764: GO 28919
28766: LD_INT 27
28768: DOUBLE
28769: EQUAL
28770: IFTRUE 28774
28772: GO 28785
28774: POP
// bc_type := b_turret ; 28 :
28775: LD_ADDR_OWVAR 42
28779: PUSH
28780: LD_INT 33
28782: ST_TO_ADDR
28783: GO 28919
28785: LD_INT 28
28787: DOUBLE
28788: EQUAL
28789: IFTRUE 28793
28791: GO 28804
28793: POP
// bc_type := b_armoury ; 29 :
28794: LD_ADDR_OWVAR 42
28798: PUSH
28799: LD_INT 4
28801: ST_TO_ADDR
28802: GO 28919
28804: LD_INT 29
28806: DOUBLE
28807: EQUAL
28808: IFTRUE 28812
28810: GO 28823
28812: POP
// bc_type := b_barracks ; 30 :
28813: LD_ADDR_OWVAR 42
28817: PUSH
28818: LD_INT 5
28820: ST_TO_ADDR
28821: GO 28919
28823: LD_INT 30
28825: DOUBLE
28826: EQUAL
28827: IFTRUE 28831
28829: GO 28842
28831: POP
// bc_type := b_solar_power ; 31 :
28832: LD_ADDR_OWVAR 42
28836: PUSH
28837: LD_INT 27
28839: ST_TO_ADDR
28840: GO 28919
28842: LD_INT 31
28844: DOUBLE
28845: EQUAL
28846: IFTRUE 28850
28848: GO 28861
28850: POP
// bc_type := b_oil_power ; 32 :
28851: LD_ADDR_OWVAR 42
28855: PUSH
28856: LD_INT 26
28858: ST_TO_ADDR
28859: GO 28919
28861: LD_INT 32
28863: DOUBLE
28864: EQUAL
28865: IFTRUE 28869
28867: GO 28880
28869: POP
// bc_type := b_siberite_power ; 33 :
28870: LD_ADDR_OWVAR 42
28874: PUSH
28875: LD_INT 28
28877: ST_TO_ADDR
28878: GO 28919
28880: LD_INT 33
28882: DOUBLE
28883: EQUAL
28884: IFTRUE 28888
28886: GO 28899
28888: POP
// bc_type := b_oil_mine ; 34 :
28889: LD_ADDR_OWVAR 42
28893: PUSH
28894: LD_INT 29
28896: ST_TO_ADDR
28897: GO 28919
28899: LD_INT 34
28901: DOUBLE
28902: EQUAL
28903: IFTRUE 28907
28905: GO 28918
28907: POP
// bc_type := b_siberite_mine ; end ;
28908: LD_ADDR_OWVAR 42
28912: PUSH
28913: LD_INT 30
28915: ST_TO_ADDR
28916: GO 28919
28918: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
28919: LD_ADDR_VAR 0 8
28923: PUSH
28924: LD_VAR 0 5
28928: PPUSH
28929: LD_VAR 0 6
28933: PPUSH
28934: LD_VAR 0 3
28938: PPUSH
28939: CALL_OW 47
28943: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
28944: LD_OWVAR 42
28948: PUSH
28949: LD_INT 32
28951: PUSH
28952: LD_INT 33
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: IN
28959: IFFALSE 28975
// PlaceWeaponTurret ( b , weapon ) ;
28961: LD_VAR 0 8
28965: PPUSH
28966: LD_VAR 0 4
28970: PPUSH
28971: CALL_OW 431
// end ;
28975: LD_VAR 0 7
28979: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
28980: LD_INT 0
28982: PPUSH
28983: PPUSH
28984: PPUSH
28985: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28986: LD_ADDR_VAR 0 4
28990: PUSH
28991: LD_INT 22
28993: PUSH
28994: LD_OWVAR 2
28998: PUSH
28999: EMPTY
29000: LIST
29001: LIST
29002: PUSH
29003: LD_INT 2
29005: PUSH
29006: LD_INT 30
29008: PUSH
29009: LD_INT 0
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: PUSH
29016: LD_INT 30
29018: PUSH
29019: LD_INT 1
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: PUSH
29026: EMPTY
29027: LIST
29028: LIST
29029: LIST
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: PPUSH
29035: CALL_OW 69
29039: ST_TO_ADDR
// if not tmp then
29040: LD_VAR 0 4
29044: NOT
29045: IFFALSE 29049
// exit ;
29047: GO 29108
// for i in tmp do
29049: LD_ADDR_VAR 0 2
29053: PUSH
29054: LD_VAR 0 4
29058: PUSH
29059: FOR_IN
29060: IFFALSE 29106
// for j = 1 to 3 do
29062: LD_ADDR_VAR 0 3
29066: PUSH
29067: DOUBLE
29068: LD_INT 1
29070: DEC
29071: ST_TO_ADDR
29072: LD_INT 3
29074: PUSH
29075: FOR_TO
29076: IFFALSE 29102
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
29078: LD_VAR 0 2
29082: PPUSH
29083: CALL_OW 274
29087: PPUSH
29088: LD_VAR 0 3
29092: PPUSH
29093: LD_INT 99999
29095: PPUSH
29096: CALL_OW 277
29100: GO 29075
29102: POP
29103: POP
29104: GO 29059
29106: POP
29107: POP
// end ;
29108: LD_VAR 0 1
29112: RET
// export function hHackSetLevel10 ; var i , j ; begin
29113: LD_INT 0
29115: PPUSH
29116: PPUSH
29117: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29118: LD_ADDR_VAR 0 2
29122: PUSH
29123: LD_INT 21
29125: PUSH
29126: LD_INT 1
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: PPUSH
29133: CALL_OW 69
29137: PUSH
29138: FOR_IN
29139: IFFALSE 29191
// if IsSelected ( i ) then
29141: LD_VAR 0 2
29145: PPUSH
29146: CALL_OW 306
29150: IFFALSE 29189
// begin for j := 1 to 4 do
29152: LD_ADDR_VAR 0 3
29156: PUSH
29157: DOUBLE
29158: LD_INT 1
29160: DEC
29161: ST_TO_ADDR
29162: LD_INT 4
29164: PUSH
29165: FOR_TO
29166: IFFALSE 29187
// SetSkill ( i , j , 10 ) ;
29168: LD_VAR 0 2
29172: PPUSH
29173: LD_VAR 0 3
29177: PPUSH
29178: LD_INT 10
29180: PPUSH
29181: CALL_OW 237
29185: GO 29165
29187: POP
29188: POP
// end ;
29189: GO 29138
29191: POP
29192: POP
// end ;
29193: LD_VAR 0 1
29197: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
29198: LD_INT 0
29200: PPUSH
29201: PPUSH
29202: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
29203: LD_ADDR_VAR 0 2
29207: PUSH
29208: LD_INT 22
29210: PUSH
29211: LD_OWVAR 2
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: PUSH
29220: LD_INT 21
29222: PUSH
29223: LD_INT 1
29225: PUSH
29226: EMPTY
29227: LIST
29228: LIST
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: PPUSH
29234: CALL_OW 69
29238: PUSH
29239: FOR_IN
29240: IFFALSE 29281
// begin for j := 1 to 4 do
29242: LD_ADDR_VAR 0 3
29246: PUSH
29247: DOUBLE
29248: LD_INT 1
29250: DEC
29251: ST_TO_ADDR
29252: LD_INT 4
29254: PUSH
29255: FOR_TO
29256: IFFALSE 29277
// SetSkill ( i , j , 10 ) ;
29258: LD_VAR 0 2
29262: PPUSH
29263: LD_VAR 0 3
29267: PPUSH
29268: LD_INT 10
29270: PPUSH
29271: CALL_OW 237
29275: GO 29255
29277: POP
29278: POP
// end ;
29279: GO 29239
29281: POP
29282: POP
// end ;
29283: LD_VAR 0 1
29287: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
29288: LD_INT 0
29290: PPUSH
// uc_side := your_side ;
29291: LD_ADDR_OWVAR 20
29295: PUSH
29296: LD_OWVAR 2
29300: ST_TO_ADDR
// uc_nation := nation ;
29301: LD_ADDR_OWVAR 21
29305: PUSH
29306: LD_VAR 0 1
29310: ST_TO_ADDR
// InitHc ;
29311: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
29315: LD_INT 0
29317: PPUSH
29318: LD_VAR 0 2
29322: PPUSH
29323: LD_VAR 0 3
29327: PPUSH
29328: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
29332: LD_VAR 0 4
29336: PPUSH
29337: LD_VAR 0 5
29341: PPUSH
29342: CALL_OW 428
29346: PUSH
29347: LD_INT 0
29349: EQUAL
29350: IFFALSE 29374
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
29352: CALL_OW 44
29356: PPUSH
29357: LD_VAR 0 4
29361: PPUSH
29362: LD_VAR 0 5
29366: PPUSH
29367: LD_INT 1
29369: PPUSH
29370: CALL_OW 48
// end ;
29374: LD_VAR 0 6
29378: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
29379: LD_INT 0
29381: PPUSH
29382: PPUSH
// uc_side := your_side ;
29383: LD_ADDR_OWVAR 20
29387: PUSH
29388: LD_OWVAR 2
29392: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
29393: LD_VAR 0 1
29397: PUSH
29398: LD_INT 1
29400: PUSH
29401: LD_INT 2
29403: PUSH
29404: LD_INT 3
29406: PUSH
29407: LD_INT 4
29409: PUSH
29410: LD_INT 5
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: LIST
29417: LIST
29418: LIST
29419: IN
29420: IFFALSE 29432
// uc_nation := nation_american else
29422: LD_ADDR_OWVAR 21
29426: PUSH
29427: LD_INT 1
29429: ST_TO_ADDR
29430: GO 29475
// if chassis in [ 11 , 12 , 13 , 14 ] then
29432: LD_VAR 0 1
29436: PUSH
29437: LD_INT 11
29439: PUSH
29440: LD_INT 12
29442: PUSH
29443: LD_INT 13
29445: PUSH
29446: LD_INT 14
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: LIST
29453: LIST
29454: IN
29455: IFFALSE 29467
// uc_nation := nation_arabian else
29457: LD_ADDR_OWVAR 21
29461: PUSH
29462: LD_INT 2
29464: ST_TO_ADDR
29465: GO 29475
// uc_nation := nation_russian ;
29467: LD_ADDR_OWVAR 21
29471: PUSH
29472: LD_INT 3
29474: ST_TO_ADDR
// vc_chassis := chassis ;
29475: LD_ADDR_OWVAR 37
29479: PUSH
29480: LD_VAR 0 1
29484: ST_TO_ADDR
// vc_engine := engine ;
29485: LD_ADDR_OWVAR 39
29489: PUSH
29490: LD_VAR 0 2
29494: ST_TO_ADDR
// vc_control := control ;
29495: LD_ADDR_OWVAR 38
29499: PUSH
29500: LD_VAR 0 3
29504: ST_TO_ADDR
// vc_weapon := weapon ;
29505: LD_ADDR_OWVAR 40
29509: PUSH
29510: LD_VAR 0 4
29514: ST_TO_ADDR
// un := CreateVehicle ;
29515: LD_ADDR_VAR 0 8
29519: PUSH
29520: CALL_OW 45
29524: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
29525: LD_VAR 0 8
29529: PPUSH
29530: LD_INT 0
29532: PPUSH
29533: LD_INT 5
29535: PPUSH
29536: CALL_OW 12
29540: PPUSH
29541: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
29545: LD_VAR 0 8
29549: PPUSH
29550: LD_VAR 0 5
29554: PPUSH
29555: LD_VAR 0 6
29559: PPUSH
29560: LD_INT 1
29562: PPUSH
29563: CALL_OW 48
// end ;
29567: LD_VAR 0 7
29571: RET
// export hInvincible ; every 1 do
29572: GO 29574
29574: DISABLE
// hInvincible := [ ] ;
29575: LD_ADDR_EXP 97
29579: PUSH
29580: EMPTY
29581: ST_TO_ADDR
29582: END
// every 10 do var i ;
29583: GO 29585
29585: DISABLE
29586: LD_INT 0
29588: PPUSH
// begin enable ;
29589: ENABLE
// if not hInvincible then
29590: LD_EXP 97
29594: NOT
29595: IFFALSE 29599
// exit ;
29597: GO 29643
// for i in hInvincible do
29599: LD_ADDR_VAR 0 1
29603: PUSH
29604: LD_EXP 97
29608: PUSH
29609: FOR_IN
29610: IFFALSE 29641
// if GetLives ( i ) < 1000 then
29612: LD_VAR 0 1
29616: PPUSH
29617: CALL_OW 256
29621: PUSH
29622: LD_INT 1000
29624: LESS
29625: IFFALSE 29639
// SetLives ( i , 1000 ) ;
29627: LD_VAR 0 1
29631: PPUSH
29632: LD_INT 1000
29634: PPUSH
29635: CALL_OW 234
29639: GO 29609
29641: POP
29642: POP
// end ;
29643: PPOPN 1
29645: END
// export function hHackInvincible ; var i ; begin
29646: LD_INT 0
29648: PPUSH
29649: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
29650: LD_ADDR_VAR 0 2
29654: PUSH
29655: LD_INT 2
29657: PUSH
29658: LD_INT 21
29660: PUSH
29661: LD_INT 1
29663: PUSH
29664: EMPTY
29665: LIST
29666: LIST
29667: PUSH
29668: LD_INT 21
29670: PUSH
29671: LD_INT 2
29673: PUSH
29674: EMPTY
29675: LIST
29676: LIST
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: LIST
29682: PPUSH
29683: CALL_OW 69
29687: PUSH
29688: FOR_IN
29689: IFFALSE 29750
// if IsSelected ( i ) then
29691: LD_VAR 0 2
29695: PPUSH
29696: CALL_OW 306
29700: IFFALSE 29748
// begin if i in hInvincible then
29702: LD_VAR 0 2
29706: PUSH
29707: LD_EXP 97
29711: IN
29712: IFFALSE 29732
// hInvincible := hInvincible diff i else
29714: LD_ADDR_EXP 97
29718: PUSH
29719: LD_EXP 97
29723: PUSH
29724: LD_VAR 0 2
29728: DIFF
29729: ST_TO_ADDR
29730: GO 29748
// hInvincible := hInvincible union i ;
29732: LD_ADDR_EXP 97
29736: PUSH
29737: LD_EXP 97
29741: PUSH
29742: LD_VAR 0 2
29746: UNION
29747: ST_TO_ADDR
// end ;
29748: GO 29688
29750: POP
29751: POP
// end ;
29752: LD_VAR 0 1
29756: RET
// export function hHackInvisible ; var i , j ; begin
29757: LD_INT 0
29759: PPUSH
29760: PPUSH
29761: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29762: LD_ADDR_VAR 0 2
29766: PUSH
29767: LD_INT 21
29769: PUSH
29770: LD_INT 1
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: PPUSH
29777: CALL_OW 69
29781: PUSH
29782: FOR_IN
29783: IFFALSE 29807
// if IsSelected ( i ) then
29785: LD_VAR 0 2
29789: PPUSH
29790: CALL_OW 306
29794: IFFALSE 29805
// ComForceInvisible ( i ) ;
29796: LD_VAR 0 2
29800: PPUSH
29801: CALL_OW 496
29805: GO 29782
29807: POP
29808: POP
// end ;
29809: LD_VAR 0 1
29813: RET
// export function hHackChangeYourSide ; begin
29814: LD_INT 0
29816: PPUSH
// if your_side = 8 then
29817: LD_OWVAR 2
29821: PUSH
29822: LD_INT 8
29824: EQUAL
29825: IFFALSE 29837
// your_side := 0 else
29827: LD_ADDR_OWVAR 2
29831: PUSH
29832: LD_INT 0
29834: ST_TO_ADDR
29835: GO 29851
// your_side := your_side + 1 ;
29837: LD_ADDR_OWVAR 2
29841: PUSH
29842: LD_OWVAR 2
29846: PUSH
29847: LD_INT 1
29849: PLUS
29850: ST_TO_ADDR
// end ;
29851: LD_VAR 0 1
29855: RET
// export function hHackChangeUnitSide ; var i , j ; begin
29856: LD_INT 0
29858: PPUSH
29859: PPUSH
29860: PPUSH
// for i in all_units do
29861: LD_ADDR_VAR 0 2
29865: PUSH
29866: LD_OWVAR 3
29870: PUSH
29871: FOR_IN
29872: IFFALSE 29950
// if IsSelected ( i ) then
29874: LD_VAR 0 2
29878: PPUSH
29879: CALL_OW 306
29883: IFFALSE 29948
// begin j := GetSide ( i ) ;
29885: LD_ADDR_VAR 0 3
29889: PUSH
29890: LD_VAR 0 2
29894: PPUSH
29895: CALL_OW 255
29899: ST_TO_ADDR
// if j = 8 then
29900: LD_VAR 0 3
29904: PUSH
29905: LD_INT 8
29907: EQUAL
29908: IFFALSE 29920
// j := 0 else
29910: LD_ADDR_VAR 0 3
29914: PUSH
29915: LD_INT 0
29917: ST_TO_ADDR
29918: GO 29934
// j := j + 1 ;
29920: LD_ADDR_VAR 0 3
29924: PUSH
29925: LD_VAR 0 3
29929: PUSH
29930: LD_INT 1
29932: PLUS
29933: ST_TO_ADDR
// SetSide ( i , j ) ;
29934: LD_VAR 0 2
29938: PPUSH
29939: LD_VAR 0 3
29943: PPUSH
29944: CALL_OW 235
// end ;
29948: GO 29871
29950: POP
29951: POP
// end ;
29952: LD_VAR 0 1
29956: RET
// export function hHackFog ; begin
29957: LD_INT 0
29959: PPUSH
// FogOff ( true ) ;
29960: LD_INT 1
29962: PPUSH
29963: CALL_OW 344
// end ;
29967: LD_VAR 0 1
29971: RET
// export function hHackTeleport ( unit , x , y ) ; begin
29972: LD_INT 0
29974: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
29975: LD_VAR 0 1
29979: PPUSH
29980: LD_VAR 0 2
29984: PPUSH
29985: LD_VAR 0 3
29989: PPUSH
29990: LD_INT 1
29992: PPUSH
29993: LD_INT 1
29995: PPUSH
29996: CALL_OW 483
// CenterOnXY ( x , y ) ;
30000: LD_VAR 0 2
30004: PPUSH
30005: LD_VAR 0 3
30009: PPUSH
30010: CALL_OW 84
// end ;
30014: LD_VAR 0 4
30018: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
30019: LD_INT 0
30021: PPUSH
30022: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
30023: LD_VAR 0 1
30027: NOT
30028: PUSH
30029: LD_VAR 0 2
30033: PPUSH
30034: LD_VAR 0 3
30038: PPUSH
30039: CALL_OW 488
30043: NOT
30044: OR
30045: PUSH
30046: LD_VAR 0 1
30050: PPUSH
30051: CALL_OW 266
30055: PUSH
30056: LD_INT 3
30058: NONEQUAL
30059: PUSH
30060: LD_VAR 0 1
30064: PPUSH
30065: CALL_OW 247
30069: PUSH
30070: LD_INT 1
30072: EQUAL
30073: NOT
30074: AND
30075: OR
30076: IFFALSE 30080
// exit ;
30078: GO 30229
// if GetType ( factory ) = unit_human then
30080: LD_VAR 0 1
30084: PPUSH
30085: CALL_OW 247
30089: PUSH
30090: LD_INT 1
30092: EQUAL
30093: IFFALSE 30110
// factory := IsInUnit ( factory ) ;
30095: LD_ADDR_VAR 0 1
30099: PUSH
30100: LD_VAR 0 1
30104: PPUSH
30105: CALL_OW 310
30109: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
30110: LD_VAR 0 1
30114: PPUSH
30115: CALL_OW 266
30119: PUSH
30120: LD_INT 3
30122: NONEQUAL
30123: IFFALSE 30127
// exit ;
30125: GO 30229
// if HexInfo ( x , y ) = factory then
30127: LD_VAR 0 2
30131: PPUSH
30132: LD_VAR 0 3
30136: PPUSH
30137: CALL_OW 428
30141: PUSH
30142: LD_VAR 0 1
30146: EQUAL
30147: IFFALSE 30174
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
30149: LD_ADDR_EXP 98
30153: PUSH
30154: LD_EXP 98
30158: PPUSH
30159: LD_VAR 0 1
30163: PPUSH
30164: LD_INT 0
30166: PPUSH
30167: CALL_OW 1
30171: ST_TO_ADDR
30172: GO 30225
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
30174: LD_ADDR_EXP 98
30178: PUSH
30179: LD_EXP 98
30183: PPUSH
30184: LD_VAR 0 1
30188: PPUSH
30189: LD_VAR 0 1
30193: PPUSH
30194: CALL_OW 255
30198: PUSH
30199: LD_VAR 0 1
30203: PUSH
30204: LD_VAR 0 2
30208: PUSH
30209: LD_VAR 0 3
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: PPUSH
30220: CALL_OW 1
30224: ST_TO_ADDR
// UpdateFactoryWaypoints ;
30225: CALL 30234 0 0
// end ;
30229: LD_VAR 0 4
30233: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
30234: LD_INT 0
30236: PPUSH
30237: PPUSH
30238: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
30239: LD_STRING resetFactoryWaypoint();
30241: PPUSH
30242: CALL_OW 559
// if factoryWaypoints then
30246: LD_EXP 98
30250: IFFALSE 30376
// begin list := PrepareArray ( factoryWaypoints ) ;
30252: LD_ADDR_VAR 0 3
30256: PUSH
30257: LD_EXP 98
30261: PPUSH
30262: CALL 77518 0 1
30266: ST_TO_ADDR
// for i := 1 to list do
30267: LD_ADDR_VAR 0 2
30271: PUSH
30272: DOUBLE
30273: LD_INT 1
30275: DEC
30276: ST_TO_ADDR
30277: LD_VAR 0 3
30281: PUSH
30282: FOR_TO
30283: IFFALSE 30374
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
30285: LD_STRING setFactoryWaypointXY(
30287: PUSH
30288: LD_VAR 0 3
30292: PUSH
30293: LD_VAR 0 2
30297: ARRAY
30298: PUSH
30299: LD_INT 1
30301: ARRAY
30302: STR
30303: PUSH
30304: LD_STRING ,
30306: STR
30307: PUSH
30308: LD_VAR 0 3
30312: PUSH
30313: LD_VAR 0 2
30317: ARRAY
30318: PUSH
30319: LD_INT 2
30321: ARRAY
30322: STR
30323: PUSH
30324: LD_STRING ,
30326: STR
30327: PUSH
30328: LD_VAR 0 3
30332: PUSH
30333: LD_VAR 0 2
30337: ARRAY
30338: PUSH
30339: LD_INT 3
30341: ARRAY
30342: STR
30343: PUSH
30344: LD_STRING ,
30346: STR
30347: PUSH
30348: LD_VAR 0 3
30352: PUSH
30353: LD_VAR 0 2
30357: ARRAY
30358: PUSH
30359: LD_INT 4
30361: ARRAY
30362: STR
30363: PUSH
30364: LD_STRING )
30366: STR
30367: PPUSH
30368: CALL_OW 559
30372: GO 30282
30374: POP
30375: POP
// end ; end ;
30376: LD_VAR 0 1
30380: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
30381: LD_INT 0
30383: PPUSH
// if HexInfo ( x , y ) = warehouse then
30384: LD_VAR 0 2
30388: PPUSH
30389: LD_VAR 0 3
30393: PPUSH
30394: CALL_OW 428
30398: PUSH
30399: LD_VAR 0 1
30403: EQUAL
30404: IFFALSE 30431
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
30406: LD_ADDR_EXP 99
30410: PUSH
30411: LD_EXP 99
30415: PPUSH
30416: LD_VAR 0 1
30420: PPUSH
30421: LD_INT 0
30423: PPUSH
30424: CALL_OW 1
30428: ST_TO_ADDR
30429: GO 30482
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
30431: LD_ADDR_EXP 99
30435: PUSH
30436: LD_EXP 99
30440: PPUSH
30441: LD_VAR 0 1
30445: PPUSH
30446: LD_VAR 0 1
30450: PPUSH
30451: CALL_OW 255
30455: PUSH
30456: LD_VAR 0 1
30460: PUSH
30461: LD_VAR 0 2
30465: PUSH
30466: LD_VAR 0 3
30470: PUSH
30471: EMPTY
30472: LIST
30473: LIST
30474: LIST
30475: LIST
30476: PPUSH
30477: CALL_OW 1
30481: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
30482: CALL 30491 0 0
// end ;
30486: LD_VAR 0 4
30490: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
30491: LD_INT 0
30493: PPUSH
30494: PPUSH
30495: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
30496: LD_STRING resetWarehouseGatheringPoints();
30498: PPUSH
30499: CALL_OW 559
// if warehouseGatheringPoints then
30503: LD_EXP 99
30507: IFFALSE 30633
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
30509: LD_ADDR_VAR 0 3
30513: PUSH
30514: LD_EXP 99
30518: PPUSH
30519: CALL 77518 0 1
30523: ST_TO_ADDR
// for i := 1 to list do
30524: LD_ADDR_VAR 0 2
30528: PUSH
30529: DOUBLE
30530: LD_INT 1
30532: DEC
30533: ST_TO_ADDR
30534: LD_VAR 0 3
30538: PUSH
30539: FOR_TO
30540: IFFALSE 30631
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
30542: LD_STRING setWarehouseGatheringPointXY(
30544: PUSH
30545: LD_VAR 0 3
30549: PUSH
30550: LD_VAR 0 2
30554: ARRAY
30555: PUSH
30556: LD_INT 1
30558: ARRAY
30559: STR
30560: PUSH
30561: LD_STRING ,
30563: STR
30564: PUSH
30565: LD_VAR 0 3
30569: PUSH
30570: LD_VAR 0 2
30574: ARRAY
30575: PUSH
30576: LD_INT 2
30578: ARRAY
30579: STR
30580: PUSH
30581: LD_STRING ,
30583: STR
30584: PUSH
30585: LD_VAR 0 3
30589: PUSH
30590: LD_VAR 0 2
30594: ARRAY
30595: PUSH
30596: LD_INT 3
30598: ARRAY
30599: STR
30600: PUSH
30601: LD_STRING ,
30603: STR
30604: PUSH
30605: LD_VAR 0 3
30609: PUSH
30610: LD_VAR 0 2
30614: ARRAY
30615: PUSH
30616: LD_INT 4
30618: ARRAY
30619: STR
30620: PUSH
30621: LD_STRING )
30623: STR
30624: PPUSH
30625: CALL_OW 559
30629: GO 30539
30631: POP
30632: POP
// end ; end ;
30633: LD_VAR 0 1
30637: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
30638: LD_EXP 99
30642: IFFALSE 31327
30644: GO 30646
30646: DISABLE
30647: LD_INT 0
30649: PPUSH
30650: PPUSH
30651: PPUSH
30652: PPUSH
30653: PPUSH
30654: PPUSH
30655: PPUSH
30656: PPUSH
30657: PPUSH
// begin enable ;
30658: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
30659: LD_ADDR_VAR 0 3
30663: PUSH
30664: LD_EXP 99
30668: PPUSH
30669: CALL 77518 0 1
30673: ST_TO_ADDR
// if not list then
30674: LD_VAR 0 3
30678: NOT
30679: IFFALSE 30683
// exit ;
30681: GO 31327
// for i := 1 to list do
30683: LD_ADDR_VAR 0 1
30687: PUSH
30688: DOUBLE
30689: LD_INT 1
30691: DEC
30692: ST_TO_ADDR
30693: LD_VAR 0 3
30697: PUSH
30698: FOR_TO
30699: IFFALSE 31325
// begin depot := list [ i ] [ 2 ] ;
30701: LD_ADDR_VAR 0 8
30705: PUSH
30706: LD_VAR 0 3
30710: PUSH
30711: LD_VAR 0 1
30715: ARRAY
30716: PUSH
30717: LD_INT 2
30719: ARRAY
30720: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
30721: LD_ADDR_VAR 0 5
30725: PUSH
30726: LD_VAR 0 3
30730: PUSH
30731: LD_VAR 0 1
30735: ARRAY
30736: PUSH
30737: LD_INT 1
30739: ARRAY
30740: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
30741: LD_VAR 0 8
30745: PPUSH
30746: CALL_OW 301
30750: PUSH
30751: LD_VAR 0 5
30755: PUSH
30756: LD_VAR 0 8
30760: PPUSH
30761: CALL_OW 255
30765: NONEQUAL
30766: OR
30767: IFFALSE 30796
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
30769: LD_ADDR_EXP 99
30773: PUSH
30774: LD_EXP 99
30778: PPUSH
30779: LD_VAR 0 8
30783: PPUSH
30784: LD_INT 0
30786: PPUSH
30787: CALL_OW 1
30791: ST_TO_ADDR
// exit ;
30792: POP
30793: POP
30794: GO 31327
// end ; x := list [ i ] [ 3 ] ;
30796: LD_ADDR_VAR 0 6
30800: PUSH
30801: LD_VAR 0 3
30805: PUSH
30806: LD_VAR 0 1
30810: ARRAY
30811: PUSH
30812: LD_INT 3
30814: ARRAY
30815: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
30816: LD_ADDR_VAR 0 7
30820: PUSH
30821: LD_VAR 0 3
30825: PUSH
30826: LD_VAR 0 1
30830: ARRAY
30831: PUSH
30832: LD_INT 4
30834: ARRAY
30835: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
30836: LD_ADDR_VAR 0 9
30840: PUSH
30841: LD_VAR 0 6
30845: PPUSH
30846: LD_VAR 0 7
30850: PPUSH
30851: LD_INT 16
30853: PPUSH
30854: CALL 76106 0 3
30858: ST_TO_ADDR
// if not cratesNearbyPoint then
30859: LD_VAR 0 9
30863: NOT
30864: IFFALSE 30870
// exit ;
30866: POP
30867: POP
30868: GO 31327
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
30870: LD_ADDR_VAR 0 4
30874: PUSH
30875: LD_INT 22
30877: PUSH
30878: LD_VAR 0 5
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: PUSH
30887: LD_INT 3
30889: PUSH
30890: LD_INT 60
30892: PUSH
30893: EMPTY
30894: LIST
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: LD_INT 91
30902: PUSH
30903: LD_VAR 0 8
30907: PUSH
30908: LD_INT 6
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: LIST
30915: PUSH
30916: LD_INT 2
30918: PUSH
30919: LD_INT 25
30921: PUSH
30922: LD_INT 2
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: PUSH
30929: LD_INT 25
30931: PUSH
30932: LD_INT 16
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: PUSH
30939: EMPTY
30940: LIST
30941: LIST
30942: LIST
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: PPUSH
30950: CALL_OW 69
30954: PUSH
30955: LD_VAR 0 8
30959: PPUSH
30960: CALL_OW 313
30964: PPUSH
30965: LD_INT 3
30967: PUSH
30968: LD_INT 60
30970: PUSH
30971: EMPTY
30972: LIST
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: PUSH
30978: LD_INT 2
30980: PUSH
30981: LD_INT 25
30983: PUSH
30984: LD_INT 2
30986: PUSH
30987: EMPTY
30988: LIST
30989: LIST
30990: PUSH
30991: LD_INT 25
30993: PUSH
30994: LD_INT 16
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: LIST
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: PPUSH
31010: CALL_OW 72
31014: UNION
31015: ST_TO_ADDR
// if tmp then
31016: LD_VAR 0 4
31020: IFFALSE 31100
// begin tmp := ShrinkArray ( tmp , 3 ) ;
31022: LD_ADDR_VAR 0 4
31026: PUSH
31027: LD_VAR 0 4
31031: PPUSH
31032: LD_INT 3
31034: PPUSH
31035: CALL 74075 0 2
31039: ST_TO_ADDR
// for j in tmp do
31040: LD_ADDR_VAR 0 2
31044: PUSH
31045: LD_VAR 0 4
31049: PUSH
31050: FOR_IN
31051: IFFALSE 31094
// begin if IsInUnit ( j ) then
31053: LD_VAR 0 2
31057: PPUSH
31058: CALL_OW 310
31062: IFFALSE 31073
// ComExit ( j ) ;
31064: LD_VAR 0 2
31068: PPUSH
31069: CALL 74158 0 1
// AddComCollect ( j , x , y ) ;
31073: LD_VAR 0 2
31077: PPUSH
31078: LD_VAR 0 6
31082: PPUSH
31083: LD_VAR 0 7
31087: PPUSH
31088: CALL_OW 177
// end ;
31092: GO 31050
31094: POP
31095: POP
// exit ;
31096: POP
31097: POP
31098: GO 31327
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
31100: LD_ADDR_VAR 0 4
31104: PUSH
31105: LD_INT 22
31107: PUSH
31108: LD_VAR 0 5
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: PUSH
31117: LD_INT 91
31119: PUSH
31120: LD_VAR 0 8
31124: PUSH
31125: LD_INT 8
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 2
31135: PUSH
31136: LD_INT 34
31138: PUSH
31139: LD_INT 12
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: PUSH
31146: LD_INT 34
31148: PUSH
31149: LD_INT 51
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: PUSH
31156: LD_INT 34
31158: PUSH
31159: LD_INT 32
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: PUSH
31166: LD_INT 34
31168: PUSH
31169: LD_INT 89
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: LIST
31180: LIST
31181: LIST
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: LIST
31187: PPUSH
31188: CALL_OW 69
31192: ST_TO_ADDR
// if tmp then
31193: LD_VAR 0 4
31197: IFFALSE 31323
// begin for j in tmp do
31199: LD_ADDR_VAR 0 2
31203: PUSH
31204: LD_VAR 0 4
31208: PUSH
31209: FOR_IN
31210: IFFALSE 31321
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
31212: LD_VAR 0 2
31216: PPUSH
31217: CALL_OW 262
31221: PUSH
31222: LD_INT 3
31224: EQUAL
31225: PUSH
31226: LD_VAR 0 2
31230: PPUSH
31231: CALL_OW 261
31235: PUSH
31236: LD_INT 20
31238: GREATER
31239: OR
31240: PUSH
31241: LD_VAR 0 2
31245: PPUSH
31246: CALL_OW 314
31250: NOT
31251: AND
31252: PUSH
31253: LD_VAR 0 2
31257: PPUSH
31258: CALL_OW 263
31262: PUSH
31263: LD_INT 1
31265: NONEQUAL
31266: PUSH
31267: LD_VAR 0 2
31271: PPUSH
31272: CALL_OW 311
31276: OR
31277: AND
31278: IFFALSE 31319
// begin ComCollect ( j , x , y ) ;
31280: LD_VAR 0 2
31284: PPUSH
31285: LD_VAR 0 6
31289: PPUSH
31290: LD_VAR 0 7
31294: PPUSH
31295: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
31299: LD_VAR 0 2
31303: PPUSH
31304: LD_VAR 0 8
31308: PPUSH
31309: CALL_OW 172
// exit ;
31313: POP
31314: POP
31315: POP
31316: POP
31317: GO 31327
// end ;
31319: GO 31209
31321: POP
31322: POP
// end ; end ;
31323: GO 30698
31325: POP
31326: POP
// end ; end_of_file
31327: PPOPN 9
31329: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
31330: LD_INT 0
31332: PPUSH
31333: PPUSH
31334: PPUSH
31335: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
31336: LD_VAR 0 1
31340: PPUSH
31341: CALL_OW 264
31345: PUSH
31346: LD_INT 91
31348: EQUAL
31349: IFFALSE 31421
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
31351: LD_INT 68
31353: PPUSH
31354: LD_VAR 0 1
31358: PPUSH
31359: CALL_OW 255
31363: PPUSH
31364: CALL_OW 321
31368: PUSH
31369: LD_INT 2
31371: EQUAL
31372: IFFALSE 31384
// eff := 70 else
31374: LD_ADDR_VAR 0 4
31378: PUSH
31379: LD_INT 70
31381: ST_TO_ADDR
31382: GO 31392
// eff := 30 ;
31384: LD_ADDR_VAR 0 4
31388: PUSH
31389: LD_INT 30
31391: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
31392: LD_VAR 0 1
31396: PPUSH
31397: CALL_OW 250
31401: PPUSH
31402: LD_VAR 0 1
31406: PPUSH
31407: CALL_OW 251
31411: PPUSH
31412: LD_VAR 0 4
31416: PPUSH
31417: CALL_OW 495
// end ; end ;
31421: LD_VAR 0 2
31425: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
31426: LD_INT 0
31428: PPUSH
// end ;
31429: LD_VAR 0 4
31433: RET
// export function SOS_Command ( cmd ) ; begin
31434: LD_INT 0
31436: PPUSH
// end ;
31437: LD_VAR 0 2
31441: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
31442: LD_INT 0
31444: PPUSH
// end ;
31445: LD_VAR 0 6
31449: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
31450: LD_INT 0
31452: PPUSH
31453: PPUSH
// if not vehicle or not factory then
31454: LD_VAR 0 1
31458: NOT
31459: PUSH
31460: LD_VAR 0 2
31464: NOT
31465: OR
31466: IFFALSE 31470
// exit ;
31468: GO 31701
// if factoryWaypoints >= factory then
31470: LD_EXP 98
31474: PUSH
31475: LD_VAR 0 2
31479: GREATEREQUAL
31480: IFFALSE 31701
// if factoryWaypoints [ factory ] then
31482: LD_EXP 98
31486: PUSH
31487: LD_VAR 0 2
31491: ARRAY
31492: IFFALSE 31701
// begin if GetControl ( vehicle ) = control_manual then
31494: LD_VAR 0 1
31498: PPUSH
31499: CALL_OW 263
31503: PUSH
31504: LD_INT 1
31506: EQUAL
31507: IFFALSE 31588
// begin driver := IsDrivenBy ( vehicle ) ;
31509: LD_ADDR_VAR 0 4
31513: PUSH
31514: LD_VAR 0 1
31518: PPUSH
31519: CALL_OW 311
31523: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
31524: LD_VAR 0 4
31528: PPUSH
31529: LD_EXP 98
31533: PUSH
31534: LD_VAR 0 2
31538: ARRAY
31539: PUSH
31540: LD_INT 3
31542: ARRAY
31543: PPUSH
31544: LD_EXP 98
31548: PUSH
31549: LD_VAR 0 2
31553: ARRAY
31554: PUSH
31555: LD_INT 4
31557: ARRAY
31558: PPUSH
31559: CALL_OW 171
// AddComExitVehicle ( driver ) ;
31563: LD_VAR 0 4
31567: PPUSH
31568: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
31572: LD_VAR 0 4
31576: PPUSH
31577: LD_VAR 0 2
31581: PPUSH
31582: CALL_OW 180
// end else
31586: GO 31701
// if GetControl ( vehicle ) = control_remote then
31588: LD_VAR 0 1
31592: PPUSH
31593: CALL_OW 263
31597: PUSH
31598: LD_INT 2
31600: EQUAL
31601: IFFALSE 31662
// begin wait ( 0 0$2 ) ;
31603: LD_INT 70
31605: PPUSH
31606: CALL_OW 67
// if Connect ( vehicle ) then
31610: LD_VAR 0 1
31614: PPUSH
31615: CALL 44366 0 1
31619: IFFALSE 31660
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
31621: LD_VAR 0 1
31625: PPUSH
31626: LD_EXP 98
31630: PUSH
31631: LD_VAR 0 2
31635: ARRAY
31636: PUSH
31637: LD_INT 3
31639: ARRAY
31640: PPUSH
31641: LD_EXP 98
31645: PUSH
31646: LD_VAR 0 2
31650: ARRAY
31651: PUSH
31652: LD_INT 4
31654: ARRAY
31655: PPUSH
31656: CALL_OW 171
// end else
31660: GO 31701
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
31662: LD_VAR 0 1
31666: PPUSH
31667: LD_EXP 98
31671: PUSH
31672: LD_VAR 0 2
31676: ARRAY
31677: PUSH
31678: LD_INT 3
31680: ARRAY
31681: PPUSH
31682: LD_EXP 98
31686: PUSH
31687: LD_VAR 0 2
31691: ARRAY
31692: PUSH
31693: LD_INT 4
31695: ARRAY
31696: PPUSH
31697: CALL_OW 171
// end ; end ;
31701: LD_VAR 0 3
31705: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
31706: LD_INT 0
31708: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
31709: LD_VAR 0 1
31713: PUSH
31714: LD_INT 250
31716: EQUAL
31717: PUSH
31718: LD_VAR 0 2
31722: PPUSH
31723: CALL_OW 264
31727: PUSH
31728: LD_INT 81
31730: EQUAL
31731: AND
31732: IFFALSE 31753
// MinerPlaceMine ( unit , x , y ) ;
31734: LD_VAR 0 2
31738: PPUSH
31739: LD_VAR 0 4
31743: PPUSH
31744: LD_VAR 0 5
31748: PPUSH
31749: CALL 34577 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
31753: LD_VAR 0 1
31757: PUSH
31758: LD_INT 251
31760: EQUAL
31761: PUSH
31762: LD_VAR 0 2
31766: PPUSH
31767: CALL_OW 264
31771: PUSH
31772: LD_INT 81
31774: EQUAL
31775: AND
31776: IFFALSE 31797
// MinerDetonateMine ( unit , x , y ) ;
31778: LD_VAR 0 2
31782: PPUSH
31783: LD_VAR 0 4
31787: PPUSH
31788: LD_VAR 0 5
31792: PPUSH
31793: CALL 34852 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
31797: LD_VAR 0 1
31801: PUSH
31802: LD_INT 252
31804: EQUAL
31805: PUSH
31806: LD_VAR 0 2
31810: PPUSH
31811: CALL_OW 264
31815: PUSH
31816: LD_INT 81
31818: EQUAL
31819: AND
31820: IFFALSE 31841
// MinerCreateMinefield ( unit , x , y ) ;
31822: LD_VAR 0 2
31826: PPUSH
31827: LD_VAR 0 4
31831: PPUSH
31832: LD_VAR 0 5
31836: PPUSH
31837: CALL 35269 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
31841: LD_VAR 0 1
31845: PUSH
31846: LD_INT 253
31848: EQUAL
31849: PUSH
31850: LD_VAR 0 2
31854: PPUSH
31855: CALL_OW 257
31859: PUSH
31860: LD_INT 5
31862: EQUAL
31863: AND
31864: IFFALSE 31885
// ComBinocular ( unit , x , y ) ;
31866: LD_VAR 0 2
31870: PPUSH
31871: LD_VAR 0 4
31875: PPUSH
31876: LD_VAR 0 5
31880: PPUSH
31881: CALL 35638 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
31885: LD_VAR 0 1
31889: PUSH
31890: LD_INT 254
31892: EQUAL
31893: PUSH
31894: LD_VAR 0 2
31898: PPUSH
31899: CALL_OW 264
31903: PUSH
31904: LD_INT 99
31906: EQUAL
31907: AND
31908: PUSH
31909: LD_VAR 0 3
31913: PPUSH
31914: CALL_OW 263
31918: PUSH
31919: LD_INT 3
31921: EQUAL
31922: AND
31923: IFFALSE 31939
// HackDestroyVehicle ( unit , selectedUnit ) ;
31925: LD_VAR 0 2
31929: PPUSH
31930: LD_VAR 0 3
31934: PPUSH
31935: CALL 33941 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
31939: LD_VAR 0 1
31943: PUSH
31944: LD_INT 255
31946: EQUAL
31947: PUSH
31948: LD_VAR 0 2
31952: PPUSH
31953: CALL_OW 264
31957: PUSH
31958: LD_INT 14
31960: PUSH
31961: LD_INT 53
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: IN
31968: AND
31969: PUSH
31970: LD_VAR 0 4
31974: PPUSH
31975: LD_VAR 0 5
31979: PPUSH
31980: CALL_OW 488
31984: AND
31985: IFFALSE 32009
// CutTreeXYR ( unit , x , y , 12 ) ;
31987: LD_VAR 0 2
31991: PPUSH
31992: LD_VAR 0 4
31996: PPUSH
31997: LD_VAR 0 5
32001: PPUSH
32002: LD_INT 12
32004: PPUSH
32005: CALL 32104 0 4
// if cmd = 256 then
32009: LD_VAR 0 1
32013: PUSH
32014: LD_INT 256
32016: EQUAL
32017: IFFALSE 32038
// SetFactoryWaypoint ( unit , x , y ) ;
32019: LD_VAR 0 2
32023: PPUSH
32024: LD_VAR 0 4
32028: PPUSH
32029: LD_VAR 0 5
32033: PPUSH
32034: CALL 30019 0 3
// if cmd = 257 then
32038: LD_VAR 0 1
32042: PUSH
32043: LD_INT 257
32045: EQUAL
32046: IFFALSE 32067
// SetWarehouseGatheringPoint ( unit , x , y ) ;
32048: LD_VAR 0 2
32052: PPUSH
32053: LD_VAR 0 4
32057: PPUSH
32058: LD_VAR 0 5
32062: PPUSH
32063: CALL 30381 0 3
// if cmd = 258 then
32067: LD_VAR 0 1
32071: PUSH
32072: LD_INT 258
32074: EQUAL
32075: IFFALSE 32099
// BurnTreeXYR ( unit , x , y , 8 ) ;
32077: LD_VAR 0 2
32081: PPUSH
32082: LD_VAR 0 4
32086: PPUSH
32087: LD_VAR 0 5
32091: PPUSH
32092: LD_INT 8
32094: PPUSH
32095: CALL 32498 0 4
// end ;
32099: LD_VAR 0 6
32103: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
32104: LD_INT 0
32106: PPUSH
32107: PPUSH
32108: PPUSH
32109: PPUSH
32110: PPUSH
32111: PPUSH
32112: PPUSH
32113: PPUSH
32114: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
32115: LD_VAR 0 1
32119: PPUSH
32120: CALL_OW 302
32124: NOT
32125: PUSH
32126: LD_VAR 0 2
32130: PPUSH
32131: LD_VAR 0 3
32135: PPUSH
32136: CALL_OW 488
32140: NOT
32141: OR
32142: PUSH
32143: LD_VAR 0 4
32147: NOT
32148: OR
32149: IFFALSE 32153
// exit ;
32151: GO 32493
// list := [ ] ;
32153: LD_ADDR_VAR 0 13
32157: PUSH
32158: EMPTY
32159: ST_TO_ADDR
// if x - r < 0 then
32160: LD_VAR 0 2
32164: PUSH
32165: LD_VAR 0 4
32169: MINUS
32170: PUSH
32171: LD_INT 0
32173: LESS
32174: IFFALSE 32186
// min_x := 0 else
32176: LD_ADDR_VAR 0 7
32180: PUSH
32181: LD_INT 0
32183: ST_TO_ADDR
32184: GO 32202
// min_x := x - r ;
32186: LD_ADDR_VAR 0 7
32190: PUSH
32191: LD_VAR 0 2
32195: PUSH
32196: LD_VAR 0 4
32200: MINUS
32201: ST_TO_ADDR
// if y - r < 0 then
32202: LD_VAR 0 3
32206: PUSH
32207: LD_VAR 0 4
32211: MINUS
32212: PUSH
32213: LD_INT 0
32215: LESS
32216: IFFALSE 32228
// min_y := 0 else
32218: LD_ADDR_VAR 0 8
32222: PUSH
32223: LD_INT 0
32225: ST_TO_ADDR
32226: GO 32244
// min_y := y - r ;
32228: LD_ADDR_VAR 0 8
32232: PUSH
32233: LD_VAR 0 3
32237: PUSH
32238: LD_VAR 0 4
32242: MINUS
32243: ST_TO_ADDR
// max_x := x + r ;
32244: LD_ADDR_VAR 0 9
32248: PUSH
32249: LD_VAR 0 2
32253: PUSH
32254: LD_VAR 0 4
32258: PLUS
32259: ST_TO_ADDR
// max_y := y + r ;
32260: LD_ADDR_VAR 0 10
32264: PUSH
32265: LD_VAR 0 3
32269: PUSH
32270: LD_VAR 0 4
32274: PLUS
32275: ST_TO_ADDR
// for _x = min_x to max_x do
32276: LD_ADDR_VAR 0 11
32280: PUSH
32281: DOUBLE
32282: LD_VAR 0 7
32286: DEC
32287: ST_TO_ADDR
32288: LD_VAR 0 9
32292: PUSH
32293: FOR_TO
32294: IFFALSE 32411
// for _y = min_y to max_y do
32296: LD_ADDR_VAR 0 12
32300: PUSH
32301: DOUBLE
32302: LD_VAR 0 8
32306: DEC
32307: ST_TO_ADDR
32308: LD_VAR 0 10
32312: PUSH
32313: FOR_TO
32314: IFFALSE 32407
// begin if not ValidHex ( _x , _y ) then
32316: LD_VAR 0 11
32320: PPUSH
32321: LD_VAR 0 12
32325: PPUSH
32326: CALL_OW 488
32330: NOT
32331: IFFALSE 32335
// continue ;
32333: GO 32313
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
32335: LD_VAR 0 11
32339: PPUSH
32340: LD_VAR 0 12
32344: PPUSH
32345: CALL_OW 351
32349: PUSH
32350: LD_VAR 0 11
32354: PPUSH
32355: LD_VAR 0 12
32359: PPUSH
32360: CALL_OW 554
32364: AND
32365: IFFALSE 32405
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
32367: LD_ADDR_VAR 0 13
32371: PUSH
32372: LD_VAR 0 13
32376: PPUSH
32377: LD_VAR 0 13
32381: PUSH
32382: LD_INT 1
32384: PLUS
32385: PPUSH
32386: LD_VAR 0 11
32390: PUSH
32391: LD_VAR 0 12
32395: PUSH
32396: EMPTY
32397: LIST
32398: LIST
32399: PPUSH
32400: CALL_OW 2
32404: ST_TO_ADDR
// end ;
32405: GO 32313
32407: POP
32408: POP
32409: GO 32293
32411: POP
32412: POP
// if not list then
32413: LD_VAR 0 13
32417: NOT
32418: IFFALSE 32422
// exit ;
32420: GO 32493
// for i in list do
32422: LD_ADDR_VAR 0 6
32426: PUSH
32427: LD_VAR 0 13
32431: PUSH
32432: FOR_IN
32433: IFFALSE 32491
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
32435: LD_VAR 0 1
32439: PPUSH
32440: LD_STRING M
32442: PUSH
32443: LD_VAR 0 6
32447: PUSH
32448: LD_INT 1
32450: ARRAY
32451: PUSH
32452: LD_VAR 0 6
32456: PUSH
32457: LD_INT 2
32459: ARRAY
32460: PUSH
32461: LD_INT 0
32463: PUSH
32464: LD_INT 0
32466: PUSH
32467: LD_INT 0
32469: PUSH
32470: LD_INT 0
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: LIST
32477: LIST
32478: LIST
32479: LIST
32480: LIST
32481: PUSH
32482: EMPTY
32483: LIST
32484: PPUSH
32485: CALL_OW 447
32489: GO 32432
32491: POP
32492: POP
// end ;
32493: LD_VAR 0 5
32497: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
32498: LD_INT 0
32500: PPUSH
32501: PPUSH
32502: PPUSH
32503: PPUSH
32504: PPUSH
32505: PPUSH
32506: PPUSH
32507: PPUSH
32508: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
32509: LD_VAR 0 1
32513: PPUSH
32514: CALL_OW 302
32518: NOT
32519: PUSH
32520: LD_VAR 0 2
32524: PPUSH
32525: LD_VAR 0 3
32529: PPUSH
32530: CALL_OW 488
32534: NOT
32535: OR
32536: PUSH
32537: LD_VAR 0 4
32541: NOT
32542: OR
32543: IFFALSE 32547
// exit ;
32545: GO 32895
// list := [ ] ;
32547: LD_ADDR_VAR 0 13
32551: PUSH
32552: EMPTY
32553: ST_TO_ADDR
// if x - r < 0 then
32554: LD_VAR 0 2
32558: PUSH
32559: LD_VAR 0 4
32563: MINUS
32564: PUSH
32565: LD_INT 0
32567: LESS
32568: IFFALSE 32580
// min_x := 0 else
32570: LD_ADDR_VAR 0 7
32574: PUSH
32575: LD_INT 0
32577: ST_TO_ADDR
32578: GO 32596
// min_x := x - r ;
32580: LD_ADDR_VAR 0 7
32584: PUSH
32585: LD_VAR 0 2
32589: PUSH
32590: LD_VAR 0 4
32594: MINUS
32595: ST_TO_ADDR
// if y - r < 0 then
32596: LD_VAR 0 3
32600: PUSH
32601: LD_VAR 0 4
32605: MINUS
32606: PUSH
32607: LD_INT 0
32609: LESS
32610: IFFALSE 32622
// min_y := 0 else
32612: LD_ADDR_VAR 0 8
32616: PUSH
32617: LD_INT 0
32619: ST_TO_ADDR
32620: GO 32638
// min_y := y - r ;
32622: LD_ADDR_VAR 0 8
32626: PUSH
32627: LD_VAR 0 3
32631: PUSH
32632: LD_VAR 0 4
32636: MINUS
32637: ST_TO_ADDR
// max_x := x + r ;
32638: LD_ADDR_VAR 0 9
32642: PUSH
32643: LD_VAR 0 2
32647: PUSH
32648: LD_VAR 0 4
32652: PLUS
32653: ST_TO_ADDR
// max_y := y + r ;
32654: LD_ADDR_VAR 0 10
32658: PUSH
32659: LD_VAR 0 3
32663: PUSH
32664: LD_VAR 0 4
32668: PLUS
32669: ST_TO_ADDR
// for _x = min_x to max_x do
32670: LD_ADDR_VAR 0 11
32674: PUSH
32675: DOUBLE
32676: LD_VAR 0 7
32680: DEC
32681: ST_TO_ADDR
32682: LD_VAR 0 9
32686: PUSH
32687: FOR_TO
32688: IFFALSE 32805
// for _y = min_y to max_y do
32690: LD_ADDR_VAR 0 12
32694: PUSH
32695: DOUBLE
32696: LD_VAR 0 8
32700: DEC
32701: ST_TO_ADDR
32702: LD_VAR 0 10
32706: PUSH
32707: FOR_TO
32708: IFFALSE 32801
// begin if not ValidHex ( _x , _y ) then
32710: LD_VAR 0 11
32714: PPUSH
32715: LD_VAR 0 12
32719: PPUSH
32720: CALL_OW 488
32724: NOT
32725: IFFALSE 32729
// continue ;
32727: GO 32707
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
32729: LD_VAR 0 11
32733: PPUSH
32734: LD_VAR 0 12
32738: PPUSH
32739: CALL_OW 351
32743: PUSH
32744: LD_VAR 0 11
32748: PPUSH
32749: LD_VAR 0 12
32753: PPUSH
32754: CALL_OW 554
32758: AND
32759: IFFALSE 32799
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
32761: LD_ADDR_VAR 0 13
32765: PUSH
32766: LD_VAR 0 13
32770: PPUSH
32771: LD_VAR 0 13
32775: PUSH
32776: LD_INT 1
32778: PLUS
32779: PPUSH
32780: LD_VAR 0 11
32784: PUSH
32785: LD_VAR 0 12
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: PPUSH
32794: CALL_OW 2
32798: ST_TO_ADDR
// end ;
32799: GO 32707
32801: POP
32802: POP
32803: GO 32687
32805: POP
32806: POP
// if not list then
32807: LD_VAR 0 13
32811: NOT
32812: IFFALSE 32816
// exit ;
32814: GO 32895
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
32816: LD_ADDR_VAR 0 13
32820: PUSH
32821: LD_VAR 0 1
32825: PPUSH
32826: LD_VAR 0 13
32830: PPUSH
32831: LD_INT 1
32833: PPUSH
32834: LD_INT 1
32836: PPUSH
32837: CALL 41508 0 4
32841: ST_TO_ADDR
// ComStop ( flame ) ;
32842: LD_VAR 0 1
32846: PPUSH
32847: CALL_OW 141
// for i in list do
32851: LD_ADDR_VAR 0 6
32855: PUSH
32856: LD_VAR 0 13
32860: PUSH
32861: FOR_IN
32862: IFFALSE 32893
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
32864: LD_VAR 0 1
32868: PPUSH
32869: LD_VAR 0 6
32873: PUSH
32874: LD_INT 1
32876: ARRAY
32877: PPUSH
32878: LD_VAR 0 6
32882: PUSH
32883: LD_INT 2
32885: ARRAY
32886: PPUSH
32887: CALL_OW 176
32891: GO 32861
32893: POP
32894: POP
// end ;
32895: LD_VAR 0 5
32899: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
32900: LD_EXP 101
32904: NOT
32905: IFFALSE 32955
32907: GO 32909
32909: DISABLE
// begin initHack := true ;
32910: LD_ADDR_EXP 101
32914: PUSH
32915: LD_INT 1
32917: ST_TO_ADDR
// hackTanks := [ ] ;
32918: LD_ADDR_EXP 102
32922: PUSH
32923: EMPTY
32924: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
32925: LD_ADDR_EXP 103
32929: PUSH
32930: EMPTY
32931: ST_TO_ADDR
// hackLimit := 3 ;
32932: LD_ADDR_EXP 104
32936: PUSH
32937: LD_INT 3
32939: ST_TO_ADDR
// hackDist := 12 ;
32940: LD_ADDR_EXP 105
32944: PUSH
32945: LD_INT 12
32947: ST_TO_ADDR
// hackCounter := [ ] ;
32948: LD_ADDR_EXP 106
32952: PUSH
32953: EMPTY
32954: ST_TO_ADDR
// end ;
32955: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
32956: LD_EXP 101
32960: PUSH
32961: LD_INT 34
32963: PUSH
32964: LD_INT 99
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: PPUSH
32971: CALL_OW 69
32975: AND
32976: IFFALSE 33229
32978: GO 32980
32980: DISABLE
32981: LD_INT 0
32983: PPUSH
32984: PPUSH
// begin enable ;
32985: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
32986: LD_ADDR_VAR 0 1
32990: PUSH
32991: LD_INT 34
32993: PUSH
32994: LD_INT 99
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PPUSH
33001: CALL_OW 69
33005: PUSH
33006: FOR_IN
33007: IFFALSE 33227
// begin if not i in hackTanks then
33009: LD_VAR 0 1
33013: PUSH
33014: LD_EXP 102
33018: IN
33019: NOT
33020: IFFALSE 33103
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
33022: LD_ADDR_EXP 102
33026: PUSH
33027: LD_EXP 102
33031: PPUSH
33032: LD_EXP 102
33036: PUSH
33037: LD_INT 1
33039: PLUS
33040: PPUSH
33041: LD_VAR 0 1
33045: PPUSH
33046: CALL_OW 1
33050: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
33051: LD_ADDR_EXP 103
33055: PUSH
33056: LD_EXP 103
33060: PPUSH
33061: LD_EXP 103
33065: PUSH
33066: LD_INT 1
33068: PLUS
33069: PPUSH
33070: EMPTY
33071: PPUSH
33072: CALL_OW 1
33076: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
33077: LD_ADDR_EXP 106
33081: PUSH
33082: LD_EXP 106
33086: PPUSH
33087: LD_EXP 106
33091: PUSH
33092: LD_INT 1
33094: PLUS
33095: PPUSH
33096: EMPTY
33097: PPUSH
33098: CALL_OW 1
33102: ST_TO_ADDR
// end ; if not IsOk ( i ) then
33103: LD_VAR 0 1
33107: PPUSH
33108: CALL_OW 302
33112: NOT
33113: IFFALSE 33126
// begin HackUnlinkAll ( i ) ;
33115: LD_VAR 0 1
33119: PPUSH
33120: CALL 33232 0 1
// continue ;
33124: GO 33006
// end ; HackCheckCapturedStatus ( i ) ;
33126: LD_VAR 0 1
33130: PPUSH
33131: CALL 33675 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
33135: LD_ADDR_VAR 0 2
33139: PUSH
33140: LD_INT 81
33142: PUSH
33143: LD_VAR 0 1
33147: PPUSH
33148: CALL_OW 255
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: PUSH
33157: LD_INT 33
33159: PUSH
33160: LD_INT 3
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: PUSH
33167: LD_INT 91
33169: PUSH
33170: LD_VAR 0 1
33174: PUSH
33175: LD_EXP 105
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: LIST
33184: PUSH
33185: LD_INT 50
33187: PUSH
33188: EMPTY
33189: LIST
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: LIST
33195: LIST
33196: PPUSH
33197: CALL_OW 69
33201: ST_TO_ADDR
// if not tmp then
33202: LD_VAR 0 2
33206: NOT
33207: IFFALSE 33211
// continue ;
33209: GO 33006
// HackLink ( i , tmp ) ;
33211: LD_VAR 0 1
33215: PPUSH
33216: LD_VAR 0 2
33220: PPUSH
33221: CALL 33368 0 2
// end ;
33225: GO 33006
33227: POP
33228: POP
// end ;
33229: PPOPN 2
33231: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33232: LD_INT 0
33234: PPUSH
33235: PPUSH
33236: PPUSH
// if not hack in hackTanks then
33237: LD_VAR 0 1
33241: PUSH
33242: LD_EXP 102
33246: IN
33247: NOT
33248: IFFALSE 33252
// exit ;
33250: GO 33363
// index := GetElementIndex ( hackTanks , hack ) ;
33252: LD_ADDR_VAR 0 4
33256: PUSH
33257: LD_EXP 102
33261: PPUSH
33262: LD_VAR 0 1
33266: PPUSH
33267: CALL 40805 0 2
33271: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
33272: LD_EXP 103
33276: PUSH
33277: LD_VAR 0 4
33281: ARRAY
33282: IFFALSE 33363
// begin for i in hackTanksCaptured [ index ] do
33284: LD_ADDR_VAR 0 3
33288: PUSH
33289: LD_EXP 103
33293: PUSH
33294: LD_VAR 0 4
33298: ARRAY
33299: PUSH
33300: FOR_IN
33301: IFFALSE 33327
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
33303: LD_VAR 0 3
33307: PUSH
33308: LD_INT 1
33310: ARRAY
33311: PPUSH
33312: LD_VAR 0 3
33316: PUSH
33317: LD_INT 2
33319: ARRAY
33320: PPUSH
33321: CALL_OW 235
33325: GO 33300
33327: POP
33328: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
33329: LD_ADDR_EXP 103
33333: PUSH
33334: LD_EXP 103
33338: PPUSH
33339: LD_VAR 0 4
33343: PPUSH
33344: EMPTY
33345: PPUSH
33346: CALL_OW 1
33350: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
33351: LD_VAR 0 1
33355: PPUSH
33356: LD_INT 0
33358: PPUSH
33359: CALL_OW 505
// end ; end ;
33363: LD_VAR 0 2
33367: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
33368: LD_INT 0
33370: PPUSH
33371: PPUSH
33372: PPUSH
// if not hack in hackTanks or not vehicles then
33373: LD_VAR 0 1
33377: PUSH
33378: LD_EXP 102
33382: IN
33383: NOT
33384: PUSH
33385: LD_VAR 0 2
33389: NOT
33390: OR
33391: IFFALSE 33395
// exit ;
33393: GO 33670
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
33395: LD_ADDR_VAR 0 2
33399: PUSH
33400: LD_VAR 0 1
33404: PPUSH
33405: LD_VAR 0 2
33409: PPUSH
33410: LD_INT 1
33412: PPUSH
33413: LD_INT 1
33415: PPUSH
33416: CALL 41455 0 4
33420: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
33421: LD_ADDR_VAR 0 5
33425: PUSH
33426: LD_EXP 102
33430: PPUSH
33431: LD_VAR 0 1
33435: PPUSH
33436: CALL 40805 0 2
33440: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
33441: LD_EXP 103
33445: PUSH
33446: LD_VAR 0 5
33450: ARRAY
33451: PUSH
33452: LD_EXP 104
33456: LESS
33457: IFFALSE 33646
// begin for i := 1 to vehicles do
33459: LD_ADDR_VAR 0 4
33463: PUSH
33464: DOUBLE
33465: LD_INT 1
33467: DEC
33468: ST_TO_ADDR
33469: LD_VAR 0 2
33473: PUSH
33474: FOR_TO
33475: IFFALSE 33644
// begin if hackTanksCaptured [ index ] = hackLimit then
33477: LD_EXP 103
33481: PUSH
33482: LD_VAR 0 5
33486: ARRAY
33487: PUSH
33488: LD_EXP 104
33492: EQUAL
33493: IFFALSE 33497
// break ;
33495: GO 33644
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
33497: LD_ADDR_EXP 106
33501: PUSH
33502: LD_EXP 106
33506: PPUSH
33507: LD_VAR 0 5
33511: PPUSH
33512: LD_EXP 106
33516: PUSH
33517: LD_VAR 0 5
33521: ARRAY
33522: PUSH
33523: LD_INT 1
33525: PLUS
33526: PPUSH
33527: CALL_OW 1
33531: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
33532: LD_ADDR_EXP 103
33536: PUSH
33537: LD_EXP 103
33541: PPUSH
33542: LD_VAR 0 5
33546: PUSH
33547: LD_EXP 103
33551: PUSH
33552: LD_VAR 0 5
33556: ARRAY
33557: PUSH
33558: LD_INT 1
33560: PLUS
33561: PUSH
33562: EMPTY
33563: LIST
33564: LIST
33565: PPUSH
33566: LD_VAR 0 2
33570: PUSH
33571: LD_VAR 0 4
33575: ARRAY
33576: PUSH
33577: LD_VAR 0 2
33581: PUSH
33582: LD_VAR 0 4
33586: ARRAY
33587: PPUSH
33588: CALL_OW 255
33592: PUSH
33593: EMPTY
33594: LIST
33595: LIST
33596: PPUSH
33597: CALL 41020 0 3
33601: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
33602: LD_VAR 0 2
33606: PUSH
33607: LD_VAR 0 4
33611: ARRAY
33612: PPUSH
33613: LD_VAR 0 1
33617: PPUSH
33618: CALL_OW 255
33622: PPUSH
33623: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
33627: LD_VAR 0 2
33631: PUSH
33632: LD_VAR 0 4
33636: ARRAY
33637: PPUSH
33638: CALL_OW 141
// end ;
33642: GO 33474
33644: POP
33645: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33646: LD_VAR 0 1
33650: PPUSH
33651: LD_EXP 103
33655: PUSH
33656: LD_VAR 0 5
33660: ARRAY
33661: PUSH
33662: LD_INT 0
33664: PLUS
33665: PPUSH
33666: CALL_OW 505
// end ;
33670: LD_VAR 0 3
33674: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
33675: LD_INT 0
33677: PPUSH
33678: PPUSH
33679: PPUSH
33680: PPUSH
// if not hack in hackTanks then
33681: LD_VAR 0 1
33685: PUSH
33686: LD_EXP 102
33690: IN
33691: NOT
33692: IFFALSE 33696
// exit ;
33694: GO 33936
// index := GetElementIndex ( hackTanks , hack ) ;
33696: LD_ADDR_VAR 0 4
33700: PUSH
33701: LD_EXP 102
33705: PPUSH
33706: LD_VAR 0 1
33710: PPUSH
33711: CALL 40805 0 2
33715: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
33716: LD_ADDR_VAR 0 3
33720: PUSH
33721: DOUBLE
33722: LD_EXP 103
33726: PUSH
33727: LD_VAR 0 4
33731: ARRAY
33732: INC
33733: ST_TO_ADDR
33734: LD_INT 1
33736: PUSH
33737: FOR_DOWNTO
33738: IFFALSE 33910
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
33740: LD_ADDR_VAR 0 5
33744: PUSH
33745: LD_EXP 103
33749: PUSH
33750: LD_VAR 0 4
33754: ARRAY
33755: PUSH
33756: LD_VAR 0 3
33760: ARRAY
33761: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
33762: LD_VAR 0 5
33766: PUSH
33767: LD_INT 1
33769: ARRAY
33770: PPUSH
33771: CALL_OW 302
33775: NOT
33776: PUSH
33777: LD_VAR 0 5
33781: PUSH
33782: LD_INT 1
33784: ARRAY
33785: PPUSH
33786: CALL_OW 255
33790: PUSH
33791: LD_VAR 0 1
33795: PPUSH
33796: CALL_OW 255
33800: NONEQUAL
33801: OR
33802: IFFALSE 33908
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
33804: LD_VAR 0 5
33808: PUSH
33809: LD_INT 1
33811: ARRAY
33812: PPUSH
33813: CALL_OW 305
33817: PUSH
33818: LD_VAR 0 5
33822: PUSH
33823: LD_INT 1
33825: ARRAY
33826: PPUSH
33827: CALL_OW 255
33831: PUSH
33832: LD_VAR 0 1
33836: PPUSH
33837: CALL_OW 255
33841: EQUAL
33842: AND
33843: IFFALSE 33867
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
33845: LD_VAR 0 5
33849: PUSH
33850: LD_INT 1
33852: ARRAY
33853: PPUSH
33854: LD_VAR 0 5
33858: PUSH
33859: LD_INT 2
33861: ARRAY
33862: PPUSH
33863: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
33867: LD_ADDR_EXP 103
33871: PUSH
33872: LD_EXP 103
33876: PPUSH
33877: LD_VAR 0 4
33881: PPUSH
33882: LD_EXP 103
33886: PUSH
33887: LD_VAR 0 4
33891: ARRAY
33892: PPUSH
33893: LD_VAR 0 3
33897: PPUSH
33898: CALL_OW 3
33902: PPUSH
33903: CALL_OW 1
33907: ST_TO_ADDR
// end ; end ;
33908: GO 33737
33910: POP
33911: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33912: LD_VAR 0 1
33916: PPUSH
33917: LD_EXP 103
33921: PUSH
33922: LD_VAR 0 4
33926: ARRAY
33927: PUSH
33928: LD_INT 0
33930: PLUS
33931: PPUSH
33932: CALL_OW 505
// end ;
33936: LD_VAR 0 2
33940: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
33941: LD_INT 0
33943: PPUSH
33944: PPUSH
33945: PPUSH
33946: PPUSH
// if not hack in hackTanks then
33947: LD_VAR 0 1
33951: PUSH
33952: LD_EXP 102
33956: IN
33957: NOT
33958: IFFALSE 33962
// exit ;
33960: GO 34047
// index := GetElementIndex ( hackTanks , hack ) ;
33962: LD_ADDR_VAR 0 5
33966: PUSH
33967: LD_EXP 102
33971: PPUSH
33972: LD_VAR 0 1
33976: PPUSH
33977: CALL 40805 0 2
33981: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
33982: LD_ADDR_VAR 0 4
33986: PUSH
33987: DOUBLE
33988: LD_INT 1
33990: DEC
33991: ST_TO_ADDR
33992: LD_EXP 103
33996: PUSH
33997: LD_VAR 0 5
34001: ARRAY
34002: PUSH
34003: FOR_TO
34004: IFFALSE 34045
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
34006: LD_EXP 103
34010: PUSH
34011: LD_VAR 0 5
34015: ARRAY
34016: PUSH
34017: LD_VAR 0 4
34021: ARRAY
34022: PUSH
34023: LD_INT 1
34025: ARRAY
34026: PUSH
34027: LD_VAR 0 2
34031: EQUAL
34032: IFFALSE 34043
// KillUnit ( vehicle ) ;
34034: LD_VAR 0 2
34038: PPUSH
34039: CALL_OW 66
34043: GO 34003
34045: POP
34046: POP
// end ;
34047: LD_VAR 0 3
34051: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
34052: LD_EXP 107
34056: NOT
34057: IFFALSE 34092
34059: GO 34061
34061: DISABLE
// begin initMiner := true ;
34062: LD_ADDR_EXP 107
34066: PUSH
34067: LD_INT 1
34069: ST_TO_ADDR
// minersList := [ ] ;
34070: LD_ADDR_EXP 108
34074: PUSH
34075: EMPTY
34076: ST_TO_ADDR
// minerMinesList := [ ] ;
34077: LD_ADDR_EXP 109
34081: PUSH
34082: EMPTY
34083: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
34084: LD_ADDR_EXP 110
34088: PUSH
34089: LD_INT 5
34091: ST_TO_ADDR
// end ;
34092: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
34093: LD_EXP 107
34097: PUSH
34098: LD_INT 34
34100: PUSH
34101: LD_INT 81
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: PPUSH
34108: CALL_OW 69
34112: AND
34113: IFFALSE 34574
34115: GO 34117
34117: DISABLE
34118: LD_INT 0
34120: PPUSH
34121: PPUSH
34122: PPUSH
34123: PPUSH
// begin enable ;
34124: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
34125: LD_ADDR_VAR 0 1
34129: PUSH
34130: LD_INT 34
34132: PUSH
34133: LD_INT 81
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: PPUSH
34140: CALL_OW 69
34144: PUSH
34145: FOR_IN
34146: IFFALSE 34218
// begin if not i in minersList then
34148: LD_VAR 0 1
34152: PUSH
34153: LD_EXP 108
34157: IN
34158: NOT
34159: IFFALSE 34216
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
34161: LD_ADDR_EXP 108
34165: PUSH
34166: LD_EXP 108
34170: PPUSH
34171: LD_EXP 108
34175: PUSH
34176: LD_INT 1
34178: PLUS
34179: PPUSH
34180: LD_VAR 0 1
34184: PPUSH
34185: CALL_OW 1
34189: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34190: LD_ADDR_EXP 109
34194: PUSH
34195: LD_EXP 109
34199: PPUSH
34200: LD_EXP 109
34204: PUSH
34205: LD_INT 1
34207: PLUS
34208: PPUSH
34209: EMPTY
34210: PPUSH
34211: CALL_OW 1
34215: ST_TO_ADDR
// end end ;
34216: GO 34145
34218: POP
34219: POP
// for i := minerMinesList downto 1 do
34220: LD_ADDR_VAR 0 1
34224: PUSH
34225: DOUBLE
34226: LD_EXP 109
34230: INC
34231: ST_TO_ADDR
34232: LD_INT 1
34234: PUSH
34235: FOR_DOWNTO
34236: IFFALSE 34572
// begin if IsLive ( minersList [ i ] ) then
34238: LD_EXP 108
34242: PUSH
34243: LD_VAR 0 1
34247: ARRAY
34248: PPUSH
34249: CALL_OW 300
34253: IFFALSE 34281
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
34255: LD_EXP 108
34259: PUSH
34260: LD_VAR 0 1
34264: ARRAY
34265: PPUSH
34266: LD_EXP 109
34270: PUSH
34271: LD_VAR 0 1
34275: ARRAY
34276: PPUSH
34277: CALL_OW 505
// if not minerMinesList [ i ] then
34281: LD_EXP 109
34285: PUSH
34286: LD_VAR 0 1
34290: ARRAY
34291: NOT
34292: IFFALSE 34296
// continue ;
34294: GO 34235
// for j := minerMinesList [ i ] downto 1 do
34296: LD_ADDR_VAR 0 2
34300: PUSH
34301: DOUBLE
34302: LD_EXP 109
34306: PUSH
34307: LD_VAR 0 1
34311: ARRAY
34312: INC
34313: ST_TO_ADDR
34314: LD_INT 1
34316: PUSH
34317: FOR_DOWNTO
34318: IFFALSE 34568
// begin side := GetSide ( minersList [ i ] ) ;
34320: LD_ADDR_VAR 0 3
34324: PUSH
34325: LD_EXP 108
34329: PUSH
34330: LD_VAR 0 1
34334: ARRAY
34335: PPUSH
34336: CALL_OW 255
34340: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
34341: LD_ADDR_VAR 0 4
34345: PUSH
34346: LD_EXP 109
34350: PUSH
34351: LD_VAR 0 1
34355: ARRAY
34356: PUSH
34357: LD_VAR 0 2
34361: ARRAY
34362: PUSH
34363: LD_INT 1
34365: ARRAY
34366: PPUSH
34367: LD_EXP 109
34371: PUSH
34372: LD_VAR 0 1
34376: ARRAY
34377: PUSH
34378: LD_VAR 0 2
34382: ARRAY
34383: PUSH
34384: LD_INT 2
34386: ARRAY
34387: PPUSH
34388: CALL_OW 428
34392: ST_TO_ADDR
// if not tmp then
34393: LD_VAR 0 4
34397: NOT
34398: IFFALSE 34402
// continue ;
34400: GO 34317
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
34402: LD_VAR 0 4
34406: PUSH
34407: LD_INT 81
34409: PUSH
34410: LD_VAR 0 3
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PPUSH
34419: CALL_OW 69
34423: IN
34424: PUSH
34425: LD_EXP 109
34429: PUSH
34430: LD_VAR 0 1
34434: ARRAY
34435: PUSH
34436: LD_VAR 0 2
34440: ARRAY
34441: PUSH
34442: LD_INT 1
34444: ARRAY
34445: PPUSH
34446: LD_EXP 109
34450: PUSH
34451: LD_VAR 0 1
34455: ARRAY
34456: PUSH
34457: LD_VAR 0 2
34461: ARRAY
34462: PUSH
34463: LD_INT 2
34465: ARRAY
34466: PPUSH
34467: CALL_OW 458
34471: AND
34472: IFFALSE 34566
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
34474: LD_EXP 109
34478: PUSH
34479: LD_VAR 0 1
34483: ARRAY
34484: PUSH
34485: LD_VAR 0 2
34489: ARRAY
34490: PUSH
34491: LD_INT 1
34493: ARRAY
34494: PPUSH
34495: LD_EXP 109
34499: PUSH
34500: LD_VAR 0 1
34504: ARRAY
34505: PUSH
34506: LD_VAR 0 2
34510: ARRAY
34511: PUSH
34512: LD_INT 2
34514: ARRAY
34515: PPUSH
34516: LD_VAR 0 3
34520: PPUSH
34521: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
34525: LD_ADDR_EXP 109
34529: PUSH
34530: LD_EXP 109
34534: PPUSH
34535: LD_VAR 0 1
34539: PPUSH
34540: LD_EXP 109
34544: PUSH
34545: LD_VAR 0 1
34549: ARRAY
34550: PPUSH
34551: LD_VAR 0 2
34555: PPUSH
34556: CALL_OW 3
34560: PPUSH
34561: CALL_OW 1
34565: ST_TO_ADDR
// end ; end ;
34566: GO 34317
34568: POP
34569: POP
// end ;
34570: GO 34235
34572: POP
34573: POP
// end ;
34574: PPOPN 4
34576: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
34577: LD_INT 0
34579: PPUSH
34580: PPUSH
// result := false ;
34581: LD_ADDR_VAR 0 4
34585: PUSH
34586: LD_INT 0
34588: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
34589: LD_VAR 0 1
34593: PPUSH
34594: CALL_OW 264
34598: PUSH
34599: LD_INT 81
34601: EQUAL
34602: NOT
34603: IFFALSE 34607
// exit ;
34605: GO 34847
// index := GetElementIndex ( minersList , unit ) ;
34607: LD_ADDR_VAR 0 5
34611: PUSH
34612: LD_EXP 108
34616: PPUSH
34617: LD_VAR 0 1
34621: PPUSH
34622: CALL 40805 0 2
34626: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
34627: LD_EXP 109
34631: PUSH
34632: LD_VAR 0 5
34636: ARRAY
34637: PUSH
34638: LD_EXP 110
34642: GREATEREQUAL
34643: IFFALSE 34647
// exit ;
34645: GO 34847
// ComMoveXY ( unit , x , y ) ;
34647: LD_VAR 0 1
34651: PPUSH
34652: LD_VAR 0 2
34656: PPUSH
34657: LD_VAR 0 3
34661: PPUSH
34662: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
34666: LD_INT 35
34668: PPUSH
34669: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
34673: LD_VAR 0 1
34677: PPUSH
34678: LD_VAR 0 2
34682: PPUSH
34683: LD_VAR 0 3
34687: PPUSH
34688: CALL 72557 0 3
34692: NOT
34693: PUSH
34694: LD_VAR 0 1
34698: PPUSH
34699: CALL_OW 314
34703: AND
34704: IFFALSE 34708
// exit ;
34706: GO 34847
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
34708: LD_VAR 0 2
34712: PPUSH
34713: LD_VAR 0 3
34717: PPUSH
34718: CALL_OW 428
34722: PUSH
34723: LD_VAR 0 1
34727: EQUAL
34728: PUSH
34729: LD_VAR 0 1
34733: PPUSH
34734: CALL_OW 314
34738: NOT
34739: AND
34740: IFFALSE 34666
// PlaySoundXY ( x , y , PlantMine ) ;
34742: LD_VAR 0 2
34746: PPUSH
34747: LD_VAR 0 3
34751: PPUSH
34752: LD_STRING PlantMine
34754: PPUSH
34755: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
34759: LD_VAR 0 2
34763: PPUSH
34764: LD_VAR 0 3
34768: PPUSH
34769: LD_VAR 0 1
34773: PPUSH
34774: CALL_OW 255
34778: PPUSH
34779: LD_INT 0
34781: PPUSH
34782: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
34786: LD_ADDR_EXP 109
34790: PUSH
34791: LD_EXP 109
34795: PPUSH
34796: LD_VAR 0 5
34800: PUSH
34801: LD_EXP 109
34805: PUSH
34806: LD_VAR 0 5
34810: ARRAY
34811: PUSH
34812: LD_INT 1
34814: PLUS
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: PPUSH
34820: LD_VAR 0 2
34824: PUSH
34825: LD_VAR 0 3
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: PPUSH
34834: CALL 41020 0 3
34838: ST_TO_ADDR
// result := true ;
34839: LD_ADDR_VAR 0 4
34843: PUSH
34844: LD_INT 1
34846: ST_TO_ADDR
// end ;
34847: LD_VAR 0 4
34851: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
34852: LD_INT 0
34854: PPUSH
34855: PPUSH
34856: PPUSH
// if not unit in minersList then
34857: LD_VAR 0 1
34861: PUSH
34862: LD_EXP 108
34866: IN
34867: NOT
34868: IFFALSE 34872
// exit ;
34870: GO 35264
// index := GetElementIndex ( minersList , unit ) ;
34872: LD_ADDR_VAR 0 6
34876: PUSH
34877: LD_EXP 108
34881: PPUSH
34882: LD_VAR 0 1
34886: PPUSH
34887: CALL 40805 0 2
34891: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
34892: LD_ADDR_VAR 0 5
34896: PUSH
34897: DOUBLE
34898: LD_EXP 109
34902: PUSH
34903: LD_VAR 0 6
34907: ARRAY
34908: INC
34909: ST_TO_ADDR
34910: LD_INT 1
34912: PUSH
34913: FOR_DOWNTO
34914: IFFALSE 35075
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
34916: LD_EXP 109
34920: PUSH
34921: LD_VAR 0 6
34925: ARRAY
34926: PUSH
34927: LD_VAR 0 5
34931: ARRAY
34932: PUSH
34933: LD_INT 1
34935: ARRAY
34936: PUSH
34937: LD_VAR 0 2
34941: EQUAL
34942: PUSH
34943: LD_EXP 109
34947: PUSH
34948: LD_VAR 0 6
34952: ARRAY
34953: PUSH
34954: LD_VAR 0 5
34958: ARRAY
34959: PUSH
34960: LD_INT 2
34962: ARRAY
34963: PUSH
34964: LD_VAR 0 3
34968: EQUAL
34969: AND
34970: IFFALSE 35073
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
34972: LD_EXP 109
34976: PUSH
34977: LD_VAR 0 6
34981: ARRAY
34982: PUSH
34983: LD_VAR 0 5
34987: ARRAY
34988: PUSH
34989: LD_INT 1
34991: ARRAY
34992: PPUSH
34993: LD_EXP 109
34997: PUSH
34998: LD_VAR 0 6
35002: ARRAY
35003: PUSH
35004: LD_VAR 0 5
35008: ARRAY
35009: PUSH
35010: LD_INT 2
35012: ARRAY
35013: PPUSH
35014: LD_VAR 0 1
35018: PPUSH
35019: CALL_OW 255
35023: PPUSH
35024: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35028: LD_ADDR_EXP 109
35032: PUSH
35033: LD_EXP 109
35037: PPUSH
35038: LD_VAR 0 6
35042: PPUSH
35043: LD_EXP 109
35047: PUSH
35048: LD_VAR 0 6
35052: ARRAY
35053: PPUSH
35054: LD_VAR 0 5
35058: PPUSH
35059: CALL_OW 3
35063: PPUSH
35064: CALL_OW 1
35068: ST_TO_ADDR
// exit ;
35069: POP
35070: POP
35071: GO 35264
// end ; end ;
35073: GO 34913
35075: POP
35076: POP
// for i := minerMinesList [ index ] downto 1 do
35077: LD_ADDR_VAR 0 5
35081: PUSH
35082: DOUBLE
35083: LD_EXP 109
35087: PUSH
35088: LD_VAR 0 6
35092: ARRAY
35093: INC
35094: ST_TO_ADDR
35095: LD_INT 1
35097: PUSH
35098: FOR_DOWNTO
35099: IFFALSE 35262
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
35101: LD_EXP 109
35105: PUSH
35106: LD_VAR 0 6
35110: ARRAY
35111: PUSH
35112: LD_VAR 0 5
35116: ARRAY
35117: PUSH
35118: LD_INT 1
35120: ARRAY
35121: PPUSH
35122: LD_EXP 109
35126: PUSH
35127: LD_VAR 0 6
35131: ARRAY
35132: PUSH
35133: LD_VAR 0 5
35137: ARRAY
35138: PUSH
35139: LD_INT 2
35141: ARRAY
35142: PPUSH
35143: LD_VAR 0 2
35147: PPUSH
35148: LD_VAR 0 3
35152: PPUSH
35153: CALL_OW 298
35157: PUSH
35158: LD_INT 6
35160: LESS
35161: IFFALSE 35260
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35163: LD_EXP 109
35167: PUSH
35168: LD_VAR 0 6
35172: ARRAY
35173: PUSH
35174: LD_VAR 0 5
35178: ARRAY
35179: PUSH
35180: LD_INT 1
35182: ARRAY
35183: PPUSH
35184: LD_EXP 109
35188: PUSH
35189: LD_VAR 0 6
35193: ARRAY
35194: PUSH
35195: LD_VAR 0 5
35199: ARRAY
35200: PUSH
35201: LD_INT 2
35203: ARRAY
35204: PPUSH
35205: LD_VAR 0 1
35209: PPUSH
35210: CALL_OW 255
35214: PPUSH
35215: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35219: LD_ADDR_EXP 109
35223: PUSH
35224: LD_EXP 109
35228: PPUSH
35229: LD_VAR 0 6
35233: PPUSH
35234: LD_EXP 109
35238: PUSH
35239: LD_VAR 0 6
35243: ARRAY
35244: PPUSH
35245: LD_VAR 0 5
35249: PPUSH
35250: CALL_OW 3
35254: PPUSH
35255: CALL_OW 1
35259: ST_TO_ADDR
// end ; end ;
35260: GO 35098
35262: POP
35263: POP
// end ;
35264: LD_VAR 0 4
35268: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
35269: LD_INT 0
35271: PPUSH
35272: PPUSH
35273: PPUSH
35274: PPUSH
35275: PPUSH
35276: PPUSH
35277: PPUSH
35278: PPUSH
35279: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
35280: LD_VAR 0 1
35284: PPUSH
35285: CALL_OW 264
35289: PUSH
35290: LD_INT 81
35292: EQUAL
35293: NOT
35294: PUSH
35295: LD_VAR 0 1
35299: PUSH
35300: LD_EXP 108
35304: IN
35305: NOT
35306: OR
35307: IFFALSE 35311
// exit ;
35309: GO 35633
// index := GetElementIndex ( minersList , unit ) ;
35311: LD_ADDR_VAR 0 6
35315: PUSH
35316: LD_EXP 108
35320: PPUSH
35321: LD_VAR 0 1
35325: PPUSH
35326: CALL 40805 0 2
35330: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
35331: LD_ADDR_VAR 0 8
35335: PUSH
35336: LD_EXP 110
35340: PUSH
35341: LD_EXP 109
35345: PUSH
35346: LD_VAR 0 6
35350: ARRAY
35351: MINUS
35352: ST_TO_ADDR
// if not minesFreeAmount then
35353: LD_VAR 0 8
35357: NOT
35358: IFFALSE 35362
// exit ;
35360: GO 35633
// tmp := [ ] ;
35362: LD_ADDR_VAR 0 7
35366: PUSH
35367: EMPTY
35368: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
35369: LD_ADDR_VAR 0 5
35373: PUSH
35374: DOUBLE
35375: LD_INT 1
35377: DEC
35378: ST_TO_ADDR
35379: LD_VAR 0 8
35383: PUSH
35384: FOR_TO
35385: IFFALSE 35580
// begin _d := rand ( 0 , 5 ) ;
35387: LD_ADDR_VAR 0 11
35391: PUSH
35392: LD_INT 0
35394: PPUSH
35395: LD_INT 5
35397: PPUSH
35398: CALL_OW 12
35402: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
35403: LD_ADDR_VAR 0 12
35407: PUSH
35408: LD_INT 2
35410: PPUSH
35411: LD_INT 6
35413: PPUSH
35414: CALL_OW 12
35418: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
35419: LD_ADDR_VAR 0 9
35423: PUSH
35424: LD_VAR 0 2
35428: PPUSH
35429: LD_VAR 0 11
35433: PPUSH
35434: LD_VAR 0 12
35438: PPUSH
35439: CALL_OW 272
35443: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
35444: LD_ADDR_VAR 0 10
35448: PUSH
35449: LD_VAR 0 3
35453: PPUSH
35454: LD_VAR 0 11
35458: PPUSH
35459: LD_VAR 0 12
35463: PPUSH
35464: CALL_OW 273
35468: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
35469: LD_VAR 0 9
35473: PPUSH
35474: LD_VAR 0 10
35478: PPUSH
35479: CALL_OW 488
35483: PUSH
35484: LD_VAR 0 9
35488: PUSH
35489: LD_VAR 0 10
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: PUSH
35498: LD_VAR 0 7
35502: IN
35503: NOT
35504: AND
35505: PUSH
35506: LD_VAR 0 9
35510: PPUSH
35511: LD_VAR 0 10
35515: PPUSH
35516: CALL_OW 458
35520: NOT
35521: AND
35522: IFFALSE 35564
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
35524: LD_ADDR_VAR 0 7
35528: PUSH
35529: LD_VAR 0 7
35533: PPUSH
35534: LD_VAR 0 7
35538: PUSH
35539: LD_INT 1
35541: PLUS
35542: PPUSH
35543: LD_VAR 0 9
35547: PUSH
35548: LD_VAR 0 10
35552: PUSH
35553: EMPTY
35554: LIST
35555: LIST
35556: PPUSH
35557: CALL_OW 1
35561: ST_TO_ADDR
35562: GO 35578
// i := i - 1 ;
35564: LD_ADDR_VAR 0 5
35568: PUSH
35569: LD_VAR 0 5
35573: PUSH
35574: LD_INT 1
35576: MINUS
35577: ST_TO_ADDR
// end ;
35578: GO 35384
35580: POP
35581: POP
// for i in tmp do
35582: LD_ADDR_VAR 0 5
35586: PUSH
35587: LD_VAR 0 7
35591: PUSH
35592: FOR_IN
35593: IFFALSE 35631
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
35595: LD_VAR 0 1
35599: PPUSH
35600: LD_VAR 0 5
35604: PUSH
35605: LD_INT 1
35607: ARRAY
35608: PPUSH
35609: LD_VAR 0 5
35613: PUSH
35614: LD_INT 2
35616: ARRAY
35617: PPUSH
35618: CALL 34577 0 3
35622: NOT
35623: IFFALSE 35629
// exit ;
35625: POP
35626: POP
35627: GO 35633
35629: GO 35592
35631: POP
35632: POP
// end ;
35633: LD_VAR 0 4
35637: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
35638: LD_INT 0
35640: PPUSH
35641: PPUSH
35642: PPUSH
35643: PPUSH
35644: PPUSH
35645: PPUSH
35646: PPUSH
// if not GetClass ( unit ) = class_sniper then
35647: LD_VAR 0 1
35651: PPUSH
35652: CALL_OW 257
35656: PUSH
35657: LD_INT 5
35659: EQUAL
35660: NOT
35661: IFFALSE 35665
// exit ;
35663: GO 36053
// dist := 8 ;
35665: LD_ADDR_VAR 0 5
35669: PUSH
35670: LD_INT 8
35672: ST_TO_ADDR
// viewRange := 12 ;
35673: LD_ADDR_VAR 0 7
35677: PUSH
35678: LD_INT 12
35680: ST_TO_ADDR
// side := GetSide ( unit ) ;
35681: LD_ADDR_VAR 0 6
35685: PUSH
35686: LD_VAR 0 1
35690: PPUSH
35691: CALL_OW 255
35695: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
35696: LD_INT 61
35698: PPUSH
35699: LD_VAR 0 6
35703: PPUSH
35704: CALL_OW 321
35708: PUSH
35709: LD_INT 2
35711: EQUAL
35712: IFFALSE 35722
// viewRange := 16 ;
35714: LD_ADDR_VAR 0 7
35718: PUSH
35719: LD_INT 16
35721: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
35722: LD_VAR 0 1
35726: PPUSH
35727: LD_VAR 0 2
35731: PPUSH
35732: LD_VAR 0 3
35736: PPUSH
35737: CALL_OW 297
35741: PUSH
35742: LD_VAR 0 5
35746: GREATER
35747: IFFALSE 35826
// begin ComMoveXY ( unit , x , y ) ;
35749: LD_VAR 0 1
35753: PPUSH
35754: LD_VAR 0 2
35758: PPUSH
35759: LD_VAR 0 3
35763: PPUSH
35764: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35768: LD_INT 35
35770: PPUSH
35771: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
35775: LD_VAR 0 1
35779: PPUSH
35780: LD_VAR 0 2
35784: PPUSH
35785: LD_VAR 0 3
35789: PPUSH
35790: CALL 72557 0 3
35794: NOT
35795: IFFALSE 35799
// exit ;
35797: GO 36053
// until GetDistUnitXY ( unit , x , y ) < dist ;
35799: LD_VAR 0 1
35803: PPUSH
35804: LD_VAR 0 2
35808: PPUSH
35809: LD_VAR 0 3
35813: PPUSH
35814: CALL_OW 297
35818: PUSH
35819: LD_VAR 0 5
35823: LESS
35824: IFFALSE 35768
// end ; ComTurnXY ( unit , x , y ) ;
35826: LD_VAR 0 1
35830: PPUSH
35831: LD_VAR 0 2
35835: PPUSH
35836: LD_VAR 0 3
35840: PPUSH
35841: CALL_OW 118
// wait ( 5 ) ;
35845: LD_INT 5
35847: PPUSH
35848: CALL_OW 67
// _d := GetDir ( unit ) ;
35852: LD_ADDR_VAR 0 10
35856: PUSH
35857: LD_VAR 0 1
35861: PPUSH
35862: CALL_OW 254
35866: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
35867: LD_ADDR_VAR 0 8
35871: PUSH
35872: LD_VAR 0 1
35876: PPUSH
35877: CALL_OW 250
35881: PPUSH
35882: LD_VAR 0 10
35886: PPUSH
35887: LD_VAR 0 5
35891: PPUSH
35892: CALL_OW 272
35896: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
35897: LD_ADDR_VAR 0 9
35901: PUSH
35902: LD_VAR 0 1
35906: PPUSH
35907: CALL_OW 251
35911: PPUSH
35912: LD_VAR 0 10
35916: PPUSH
35917: LD_VAR 0 5
35921: PPUSH
35922: CALL_OW 273
35926: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35927: LD_VAR 0 8
35931: PPUSH
35932: LD_VAR 0 9
35936: PPUSH
35937: CALL_OW 488
35941: NOT
35942: IFFALSE 35946
// exit ;
35944: GO 36053
// ComAnimCustom ( unit , 1 ) ;
35946: LD_VAR 0 1
35950: PPUSH
35951: LD_INT 1
35953: PPUSH
35954: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
35958: LD_VAR 0 8
35962: PPUSH
35963: LD_VAR 0 9
35967: PPUSH
35968: LD_VAR 0 6
35972: PPUSH
35973: LD_VAR 0 7
35977: PPUSH
35978: CALL_OW 330
// repeat wait ( 1 ) ;
35982: LD_INT 1
35984: PPUSH
35985: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
35989: LD_VAR 0 1
35993: PPUSH
35994: CALL_OW 316
35998: PUSH
35999: LD_VAR 0 1
36003: PPUSH
36004: CALL_OW 314
36008: OR
36009: PUSH
36010: LD_VAR 0 1
36014: PPUSH
36015: CALL_OW 302
36019: NOT
36020: OR
36021: PUSH
36022: LD_VAR 0 1
36026: PPUSH
36027: CALL_OW 301
36031: OR
36032: IFFALSE 35982
// RemoveSeeing ( _x , _y , side ) ;
36034: LD_VAR 0 8
36038: PPUSH
36039: LD_VAR 0 9
36043: PPUSH
36044: LD_VAR 0 6
36048: PPUSH
36049: CALL_OW 331
// end ; end_of_file
36053: LD_VAR 0 4
36057: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
36058: LD_INT 0
36060: PPUSH
36061: PPUSH
// if exist_mode then
36062: LD_VAR 0 2
36066: IFFALSE 36091
// unit := CreateCharacter ( prefix & ident ) else
36068: LD_ADDR_VAR 0 5
36072: PUSH
36073: LD_VAR 0 3
36077: PUSH
36078: LD_VAR 0 1
36082: STR
36083: PPUSH
36084: CALL_OW 34
36088: ST_TO_ADDR
36089: GO 36106
// unit := NewCharacter ( ident ) ;
36091: LD_ADDR_VAR 0 5
36095: PUSH
36096: LD_VAR 0 1
36100: PPUSH
36101: CALL_OW 25
36105: ST_TO_ADDR
// result := unit ;
36106: LD_ADDR_VAR 0 4
36110: PUSH
36111: LD_VAR 0 5
36115: ST_TO_ADDR
// end ;
36116: LD_VAR 0 4
36120: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36121: LD_INT 0
36123: PPUSH
36124: PPUSH
// if not side or not nation then
36125: LD_VAR 0 1
36129: NOT
36130: PUSH
36131: LD_VAR 0 2
36135: NOT
36136: OR
36137: IFFALSE 36141
// exit ;
36139: GO 36909
// case nation of nation_american :
36141: LD_VAR 0 2
36145: PUSH
36146: LD_INT 1
36148: DOUBLE
36149: EQUAL
36150: IFTRUE 36154
36152: GO 36368
36154: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36155: LD_ADDR_VAR 0 4
36159: PUSH
36160: LD_INT 35
36162: PUSH
36163: LD_INT 45
36165: PUSH
36166: LD_INT 46
36168: PUSH
36169: LD_INT 47
36171: PUSH
36172: LD_INT 82
36174: PUSH
36175: LD_INT 83
36177: PUSH
36178: LD_INT 84
36180: PUSH
36181: LD_INT 85
36183: PUSH
36184: LD_INT 86
36186: PUSH
36187: LD_INT 1
36189: PUSH
36190: LD_INT 2
36192: PUSH
36193: LD_INT 6
36195: PUSH
36196: LD_INT 15
36198: PUSH
36199: LD_INT 16
36201: PUSH
36202: LD_INT 7
36204: PUSH
36205: LD_INT 12
36207: PUSH
36208: LD_INT 13
36210: PUSH
36211: LD_INT 10
36213: PUSH
36214: LD_INT 14
36216: PUSH
36217: LD_INT 20
36219: PUSH
36220: LD_INT 21
36222: PUSH
36223: LD_INT 22
36225: PUSH
36226: LD_INT 25
36228: PUSH
36229: LD_INT 32
36231: PUSH
36232: LD_INT 27
36234: PUSH
36235: LD_INT 36
36237: PUSH
36238: LD_INT 69
36240: PUSH
36241: LD_INT 39
36243: PUSH
36244: LD_INT 34
36246: PUSH
36247: LD_INT 40
36249: PUSH
36250: LD_INT 48
36252: PUSH
36253: LD_INT 49
36255: PUSH
36256: LD_INT 50
36258: PUSH
36259: LD_INT 51
36261: PUSH
36262: LD_INT 52
36264: PUSH
36265: LD_INT 53
36267: PUSH
36268: LD_INT 54
36270: PUSH
36271: LD_INT 55
36273: PUSH
36274: LD_INT 56
36276: PUSH
36277: LD_INT 57
36279: PUSH
36280: LD_INT 58
36282: PUSH
36283: LD_INT 59
36285: PUSH
36286: LD_INT 60
36288: PUSH
36289: LD_INT 61
36291: PUSH
36292: LD_INT 62
36294: PUSH
36295: LD_INT 80
36297: PUSH
36298: LD_INT 82
36300: PUSH
36301: LD_INT 83
36303: PUSH
36304: LD_INT 84
36306: PUSH
36307: LD_INT 85
36309: PUSH
36310: LD_INT 86
36312: PUSH
36313: EMPTY
36314: LIST
36315: LIST
36316: LIST
36317: LIST
36318: LIST
36319: LIST
36320: LIST
36321: LIST
36322: LIST
36323: LIST
36324: LIST
36325: LIST
36326: LIST
36327: LIST
36328: LIST
36329: LIST
36330: LIST
36331: LIST
36332: LIST
36333: LIST
36334: LIST
36335: LIST
36336: LIST
36337: LIST
36338: LIST
36339: LIST
36340: LIST
36341: LIST
36342: LIST
36343: LIST
36344: LIST
36345: LIST
36346: LIST
36347: LIST
36348: LIST
36349: LIST
36350: LIST
36351: LIST
36352: LIST
36353: LIST
36354: LIST
36355: LIST
36356: LIST
36357: LIST
36358: LIST
36359: LIST
36360: LIST
36361: LIST
36362: LIST
36363: LIST
36364: LIST
36365: ST_TO_ADDR
36366: GO 36833
36368: LD_INT 2
36370: DOUBLE
36371: EQUAL
36372: IFTRUE 36376
36374: GO 36602
36376: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
36377: LD_ADDR_VAR 0 4
36381: PUSH
36382: LD_INT 35
36384: PUSH
36385: LD_INT 45
36387: PUSH
36388: LD_INT 46
36390: PUSH
36391: LD_INT 47
36393: PUSH
36394: LD_INT 82
36396: PUSH
36397: LD_INT 83
36399: PUSH
36400: LD_INT 84
36402: PUSH
36403: LD_INT 85
36405: PUSH
36406: LD_INT 87
36408: PUSH
36409: LD_INT 70
36411: PUSH
36412: LD_INT 1
36414: PUSH
36415: LD_INT 11
36417: PUSH
36418: LD_INT 3
36420: PUSH
36421: LD_INT 4
36423: PUSH
36424: LD_INT 5
36426: PUSH
36427: LD_INT 6
36429: PUSH
36430: LD_INT 15
36432: PUSH
36433: LD_INT 18
36435: PUSH
36436: LD_INT 7
36438: PUSH
36439: LD_INT 17
36441: PUSH
36442: LD_INT 8
36444: PUSH
36445: LD_INT 20
36447: PUSH
36448: LD_INT 21
36450: PUSH
36451: LD_INT 22
36453: PUSH
36454: LD_INT 72
36456: PUSH
36457: LD_INT 26
36459: PUSH
36460: LD_INT 69
36462: PUSH
36463: LD_INT 39
36465: PUSH
36466: LD_INT 40
36468: PUSH
36469: LD_INT 41
36471: PUSH
36472: LD_INT 42
36474: PUSH
36475: LD_INT 43
36477: PUSH
36478: LD_INT 48
36480: PUSH
36481: LD_INT 49
36483: PUSH
36484: LD_INT 50
36486: PUSH
36487: LD_INT 51
36489: PUSH
36490: LD_INT 52
36492: PUSH
36493: LD_INT 53
36495: PUSH
36496: LD_INT 54
36498: PUSH
36499: LD_INT 55
36501: PUSH
36502: LD_INT 56
36504: PUSH
36505: LD_INT 60
36507: PUSH
36508: LD_INT 61
36510: PUSH
36511: LD_INT 62
36513: PUSH
36514: LD_INT 66
36516: PUSH
36517: LD_INT 67
36519: PUSH
36520: LD_INT 68
36522: PUSH
36523: LD_INT 81
36525: PUSH
36526: LD_INT 82
36528: PUSH
36529: LD_INT 83
36531: PUSH
36532: LD_INT 84
36534: PUSH
36535: LD_INT 85
36537: PUSH
36538: LD_INT 87
36540: PUSH
36541: LD_INT 88
36543: PUSH
36544: EMPTY
36545: LIST
36546: LIST
36547: LIST
36548: LIST
36549: LIST
36550: LIST
36551: LIST
36552: LIST
36553: LIST
36554: LIST
36555: LIST
36556: LIST
36557: LIST
36558: LIST
36559: LIST
36560: LIST
36561: LIST
36562: LIST
36563: LIST
36564: LIST
36565: LIST
36566: LIST
36567: LIST
36568: LIST
36569: LIST
36570: LIST
36571: LIST
36572: LIST
36573: LIST
36574: LIST
36575: LIST
36576: LIST
36577: LIST
36578: LIST
36579: LIST
36580: LIST
36581: LIST
36582: LIST
36583: LIST
36584: LIST
36585: LIST
36586: LIST
36587: LIST
36588: LIST
36589: LIST
36590: LIST
36591: LIST
36592: LIST
36593: LIST
36594: LIST
36595: LIST
36596: LIST
36597: LIST
36598: LIST
36599: ST_TO_ADDR
36600: GO 36833
36602: LD_INT 3
36604: DOUBLE
36605: EQUAL
36606: IFTRUE 36610
36608: GO 36832
36610: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
36611: LD_ADDR_VAR 0 4
36615: PUSH
36616: LD_INT 46
36618: PUSH
36619: LD_INT 47
36621: PUSH
36622: LD_INT 1
36624: PUSH
36625: LD_INT 2
36627: PUSH
36628: LD_INT 82
36630: PUSH
36631: LD_INT 83
36633: PUSH
36634: LD_INT 84
36636: PUSH
36637: LD_INT 85
36639: PUSH
36640: LD_INT 86
36642: PUSH
36643: LD_INT 11
36645: PUSH
36646: LD_INT 9
36648: PUSH
36649: LD_INT 20
36651: PUSH
36652: LD_INT 19
36654: PUSH
36655: LD_INT 21
36657: PUSH
36658: LD_INT 24
36660: PUSH
36661: LD_INT 22
36663: PUSH
36664: LD_INT 25
36666: PUSH
36667: LD_INT 28
36669: PUSH
36670: LD_INT 29
36672: PUSH
36673: LD_INT 30
36675: PUSH
36676: LD_INT 31
36678: PUSH
36679: LD_INT 37
36681: PUSH
36682: LD_INT 38
36684: PUSH
36685: LD_INT 32
36687: PUSH
36688: LD_INT 27
36690: PUSH
36691: LD_INT 33
36693: PUSH
36694: LD_INT 69
36696: PUSH
36697: LD_INT 39
36699: PUSH
36700: LD_INT 34
36702: PUSH
36703: LD_INT 40
36705: PUSH
36706: LD_INT 71
36708: PUSH
36709: LD_INT 23
36711: PUSH
36712: LD_INT 44
36714: PUSH
36715: LD_INT 48
36717: PUSH
36718: LD_INT 49
36720: PUSH
36721: LD_INT 50
36723: PUSH
36724: LD_INT 51
36726: PUSH
36727: LD_INT 52
36729: PUSH
36730: LD_INT 53
36732: PUSH
36733: LD_INT 54
36735: PUSH
36736: LD_INT 55
36738: PUSH
36739: LD_INT 56
36741: PUSH
36742: LD_INT 57
36744: PUSH
36745: LD_INT 58
36747: PUSH
36748: LD_INT 59
36750: PUSH
36751: LD_INT 63
36753: PUSH
36754: LD_INT 64
36756: PUSH
36757: LD_INT 65
36759: PUSH
36760: LD_INT 82
36762: PUSH
36763: LD_INT 83
36765: PUSH
36766: LD_INT 84
36768: PUSH
36769: LD_INT 85
36771: PUSH
36772: LD_INT 86
36774: PUSH
36775: EMPTY
36776: LIST
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: LIST
36792: LIST
36793: LIST
36794: LIST
36795: LIST
36796: LIST
36797: LIST
36798: LIST
36799: LIST
36800: LIST
36801: LIST
36802: LIST
36803: LIST
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: LIST
36809: LIST
36810: LIST
36811: LIST
36812: LIST
36813: LIST
36814: LIST
36815: LIST
36816: LIST
36817: LIST
36818: LIST
36819: LIST
36820: LIST
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: ST_TO_ADDR
36830: GO 36833
36832: POP
// if state > - 1 and state < 3 then
36833: LD_VAR 0 3
36837: PUSH
36838: LD_INT 1
36840: NEG
36841: GREATER
36842: PUSH
36843: LD_VAR 0 3
36847: PUSH
36848: LD_INT 3
36850: LESS
36851: AND
36852: IFFALSE 36909
// for i in result do
36854: LD_ADDR_VAR 0 5
36858: PUSH
36859: LD_VAR 0 4
36863: PUSH
36864: FOR_IN
36865: IFFALSE 36907
// if GetTech ( i , side ) <> state then
36867: LD_VAR 0 5
36871: PPUSH
36872: LD_VAR 0 1
36876: PPUSH
36877: CALL_OW 321
36881: PUSH
36882: LD_VAR 0 3
36886: NONEQUAL
36887: IFFALSE 36905
// result := result diff i ;
36889: LD_ADDR_VAR 0 4
36893: PUSH
36894: LD_VAR 0 4
36898: PUSH
36899: LD_VAR 0 5
36903: DIFF
36904: ST_TO_ADDR
36905: GO 36864
36907: POP
36908: POP
// end ;
36909: LD_VAR 0 4
36913: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
36914: LD_INT 0
36916: PPUSH
36917: PPUSH
36918: PPUSH
// result := true ;
36919: LD_ADDR_VAR 0 3
36923: PUSH
36924: LD_INT 1
36926: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
36927: LD_ADDR_VAR 0 5
36931: PUSH
36932: LD_VAR 0 2
36936: PPUSH
36937: CALL_OW 480
36941: ST_TO_ADDR
// if not tmp then
36942: LD_VAR 0 5
36946: NOT
36947: IFFALSE 36951
// exit ;
36949: GO 37000
// for i in tmp do
36951: LD_ADDR_VAR 0 4
36955: PUSH
36956: LD_VAR 0 5
36960: PUSH
36961: FOR_IN
36962: IFFALSE 36998
// if GetTech ( i , side ) <> state_researched then
36964: LD_VAR 0 4
36968: PPUSH
36969: LD_VAR 0 1
36973: PPUSH
36974: CALL_OW 321
36978: PUSH
36979: LD_INT 2
36981: NONEQUAL
36982: IFFALSE 36996
// begin result := false ;
36984: LD_ADDR_VAR 0 3
36988: PUSH
36989: LD_INT 0
36991: ST_TO_ADDR
// exit ;
36992: POP
36993: POP
36994: GO 37000
// end ;
36996: GO 36961
36998: POP
36999: POP
// end ;
37000: LD_VAR 0 3
37004: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
37005: LD_INT 0
37007: PPUSH
37008: PPUSH
37009: PPUSH
37010: PPUSH
37011: PPUSH
37012: PPUSH
37013: PPUSH
37014: PPUSH
37015: PPUSH
37016: PPUSH
37017: PPUSH
37018: PPUSH
37019: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
37020: LD_VAR 0 1
37024: NOT
37025: PUSH
37026: LD_VAR 0 1
37030: PPUSH
37031: CALL_OW 257
37035: PUSH
37036: LD_INT 9
37038: NONEQUAL
37039: OR
37040: IFFALSE 37044
// exit ;
37042: GO 37617
// side := GetSide ( unit ) ;
37044: LD_ADDR_VAR 0 9
37048: PUSH
37049: LD_VAR 0 1
37053: PPUSH
37054: CALL_OW 255
37058: ST_TO_ADDR
// tech_space := tech_spacanom ;
37059: LD_ADDR_VAR 0 12
37063: PUSH
37064: LD_INT 29
37066: ST_TO_ADDR
// tech_time := tech_taurad ;
37067: LD_ADDR_VAR 0 13
37071: PUSH
37072: LD_INT 28
37074: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37075: LD_ADDR_VAR 0 11
37079: PUSH
37080: LD_VAR 0 1
37084: PPUSH
37085: CALL_OW 310
37089: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37090: LD_VAR 0 11
37094: PPUSH
37095: CALL_OW 247
37099: PUSH
37100: LD_INT 2
37102: EQUAL
37103: IFFALSE 37107
// exit ;
37105: GO 37617
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37107: LD_ADDR_VAR 0 8
37111: PUSH
37112: LD_INT 81
37114: PUSH
37115: LD_VAR 0 9
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: PUSH
37124: LD_INT 3
37126: PUSH
37127: LD_INT 21
37129: PUSH
37130: LD_INT 3
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: PUSH
37141: EMPTY
37142: LIST
37143: LIST
37144: PPUSH
37145: CALL_OW 69
37149: ST_TO_ADDR
// if not tmp then
37150: LD_VAR 0 8
37154: NOT
37155: IFFALSE 37159
// exit ;
37157: GO 37617
// if in_unit then
37159: LD_VAR 0 11
37163: IFFALSE 37187
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37165: LD_ADDR_VAR 0 10
37169: PUSH
37170: LD_VAR 0 8
37174: PPUSH
37175: LD_VAR 0 11
37179: PPUSH
37180: CALL_OW 74
37184: ST_TO_ADDR
37185: GO 37207
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37187: LD_ADDR_VAR 0 10
37191: PUSH
37192: LD_VAR 0 8
37196: PPUSH
37197: LD_VAR 0 1
37201: PPUSH
37202: CALL_OW 74
37206: ST_TO_ADDR
// if not enemy then
37207: LD_VAR 0 10
37211: NOT
37212: IFFALSE 37216
// exit ;
37214: GO 37617
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37216: LD_VAR 0 11
37220: PUSH
37221: LD_VAR 0 11
37225: PPUSH
37226: LD_VAR 0 10
37230: PPUSH
37231: CALL_OW 296
37235: PUSH
37236: LD_INT 13
37238: GREATER
37239: AND
37240: PUSH
37241: LD_VAR 0 1
37245: PPUSH
37246: LD_VAR 0 10
37250: PPUSH
37251: CALL_OW 296
37255: PUSH
37256: LD_INT 12
37258: GREATER
37259: OR
37260: IFFALSE 37264
// exit ;
37262: GO 37617
// missile := [ 1 ] ;
37264: LD_ADDR_VAR 0 14
37268: PUSH
37269: LD_INT 1
37271: PUSH
37272: EMPTY
37273: LIST
37274: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37275: LD_VAR 0 9
37279: PPUSH
37280: LD_VAR 0 12
37284: PPUSH
37285: CALL_OW 325
37289: IFFALSE 37318
// missile := Replace ( missile , missile + 1 , 2 ) ;
37291: LD_ADDR_VAR 0 14
37295: PUSH
37296: LD_VAR 0 14
37300: PPUSH
37301: LD_VAR 0 14
37305: PUSH
37306: LD_INT 1
37308: PLUS
37309: PPUSH
37310: LD_INT 2
37312: PPUSH
37313: CALL_OW 1
37317: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
37318: LD_VAR 0 9
37322: PPUSH
37323: LD_VAR 0 13
37327: PPUSH
37328: CALL_OW 325
37332: PUSH
37333: LD_VAR 0 10
37337: PPUSH
37338: CALL_OW 255
37342: PPUSH
37343: LD_VAR 0 13
37347: PPUSH
37348: CALL_OW 325
37352: NOT
37353: AND
37354: IFFALSE 37383
// missile := Replace ( missile , missile + 1 , 3 ) ;
37356: LD_ADDR_VAR 0 14
37360: PUSH
37361: LD_VAR 0 14
37365: PPUSH
37366: LD_VAR 0 14
37370: PUSH
37371: LD_INT 1
37373: PLUS
37374: PPUSH
37375: LD_INT 3
37377: PPUSH
37378: CALL_OW 1
37382: ST_TO_ADDR
// if missile < 2 then
37383: LD_VAR 0 14
37387: PUSH
37388: LD_INT 2
37390: LESS
37391: IFFALSE 37395
// exit ;
37393: GO 37617
// x := GetX ( enemy ) ;
37395: LD_ADDR_VAR 0 4
37399: PUSH
37400: LD_VAR 0 10
37404: PPUSH
37405: CALL_OW 250
37409: ST_TO_ADDR
// y := GetY ( enemy ) ;
37410: LD_ADDR_VAR 0 5
37414: PUSH
37415: LD_VAR 0 10
37419: PPUSH
37420: CALL_OW 251
37424: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
37425: LD_ADDR_VAR 0 6
37429: PUSH
37430: LD_VAR 0 4
37434: PUSH
37435: LD_INT 1
37437: NEG
37438: PPUSH
37439: LD_INT 1
37441: PPUSH
37442: CALL_OW 12
37446: PLUS
37447: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
37448: LD_ADDR_VAR 0 7
37452: PUSH
37453: LD_VAR 0 5
37457: PUSH
37458: LD_INT 1
37460: NEG
37461: PPUSH
37462: LD_INT 1
37464: PPUSH
37465: CALL_OW 12
37469: PLUS
37470: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37471: LD_VAR 0 6
37475: PPUSH
37476: LD_VAR 0 7
37480: PPUSH
37481: CALL_OW 488
37485: NOT
37486: IFFALSE 37508
// begin _x := x ;
37488: LD_ADDR_VAR 0 6
37492: PUSH
37493: LD_VAR 0 4
37497: ST_TO_ADDR
// _y := y ;
37498: LD_ADDR_VAR 0 7
37502: PUSH
37503: LD_VAR 0 5
37507: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
37508: LD_ADDR_VAR 0 3
37512: PUSH
37513: LD_INT 1
37515: PPUSH
37516: LD_VAR 0 14
37520: PPUSH
37521: CALL_OW 12
37525: ST_TO_ADDR
// case i of 1 :
37526: LD_VAR 0 3
37530: PUSH
37531: LD_INT 1
37533: DOUBLE
37534: EQUAL
37535: IFTRUE 37539
37537: GO 37556
37539: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
37540: LD_VAR 0 1
37544: PPUSH
37545: LD_VAR 0 10
37549: PPUSH
37550: CALL_OW 115
37554: GO 37617
37556: LD_INT 2
37558: DOUBLE
37559: EQUAL
37560: IFTRUE 37564
37562: GO 37586
37564: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
37565: LD_VAR 0 1
37569: PPUSH
37570: LD_VAR 0 6
37574: PPUSH
37575: LD_VAR 0 7
37579: PPUSH
37580: CALL_OW 153
37584: GO 37617
37586: LD_INT 3
37588: DOUBLE
37589: EQUAL
37590: IFTRUE 37594
37592: GO 37616
37594: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
37595: LD_VAR 0 1
37599: PPUSH
37600: LD_VAR 0 6
37604: PPUSH
37605: LD_VAR 0 7
37609: PPUSH
37610: CALL_OW 154
37614: GO 37617
37616: POP
// end ;
37617: LD_VAR 0 2
37621: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
37622: LD_INT 0
37624: PPUSH
37625: PPUSH
37626: PPUSH
37627: PPUSH
37628: PPUSH
37629: PPUSH
// if not unit or not building then
37630: LD_VAR 0 1
37634: NOT
37635: PUSH
37636: LD_VAR 0 2
37640: NOT
37641: OR
37642: IFFALSE 37646
// exit ;
37644: GO 37804
// x := GetX ( building ) ;
37646: LD_ADDR_VAR 0 5
37650: PUSH
37651: LD_VAR 0 2
37655: PPUSH
37656: CALL_OW 250
37660: ST_TO_ADDR
// y := GetY ( building ) ;
37661: LD_ADDR_VAR 0 6
37665: PUSH
37666: LD_VAR 0 2
37670: PPUSH
37671: CALL_OW 251
37675: ST_TO_ADDR
// for i = 0 to 5 do
37676: LD_ADDR_VAR 0 4
37680: PUSH
37681: DOUBLE
37682: LD_INT 0
37684: DEC
37685: ST_TO_ADDR
37686: LD_INT 5
37688: PUSH
37689: FOR_TO
37690: IFFALSE 37802
// begin _x := ShiftX ( x , i , 3 ) ;
37692: LD_ADDR_VAR 0 7
37696: PUSH
37697: LD_VAR 0 5
37701: PPUSH
37702: LD_VAR 0 4
37706: PPUSH
37707: LD_INT 3
37709: PPUSH
37710: CALL_OW 272
37714: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
37715: LD_ADDR_VAR 0 8
37719: PUSH
37720: LD_VAR 0 6
37724: PPUSH
37725: LD_VAR 0 4
37729: PPUSH
37730: LD_INT 3
37732: PPUSH
37733: CALL_OW 273
37737: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37738: LD_VAR 0 7
37742: PPUSH
37743: LD_VAR 0 8
37747: PPUSH
37748: CALL_OW 488
37752: NOT
37753: IFFALSE 37757
// continue ;
37755: GO 37689
// if HexInfo ( _x , _y ) = 0 then
37757: LD_VAR 0 7
37761: PPUSH
37762: LD_VAR 0 8
37766: PPUSH
37767: CALL_OW 428
37771: PUSH
37772: LD_INT 0
37774: EQUAL
37775: IFFALSE 37800
// begin ComMoveXY ( unit , _x , _y ) ;
37777: LD_VAR 0 1
37781: PPUSH
37782: LD_VAR 0 7
37786: PPUSH
37787: LD_VAR 0 8
37791: PPUSH
37792: CALL_OW 111
// exit ;
37796: POP
37797: POP
37798: GO 37804
// end ; end ;
37800: GO 37689
37802: POP
37803: POP
// end ;
37804: LD_VAR 0 3
37808: RET
// export function ScanBase ( side , base_area ) ; begin
37809: LD_INT 0
37811: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
37812: LD_ADDR_VAR 0 3
37816: PUSH
37817: LD_VAR 0 2
37821: PPUSH
37822: LD_INT 81
37824: PUSH
37825: LD_VAR 0 1
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: PPUSH
37834: CALL_OW 70
37838: ST_TO_ADDR
// end ;
37839: LD_VAR 0 3
37843: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
37844: LD_INT 0
37846: PPUSH
37847: PPUSH
37848: PPUSH
37849: PPUSH
// result := false ;
37850: LD_ADDR_VAR 0 2
37854: PUSH
37855: LD_INT 0
37857: ST_TO_ADDR
// side := GetSide ( unit ) ;
37858: LD_ADDR_VAR 0 3
37862: PUSH
37863: LD_VAR 0 1
37867: PPUSH
37868: CALL_OW 255
37872: ST_TO_ADDR
// nat := GetNation ( unit ) ;
37873: LD_ADDR_VAR 0 4
37877: PUSH
37878: LD_VAR 0 1
37882: PPUSH
37883: CALL_OW 248
37887: ST_TO_ADDR
// case nat of 1 :
37888: LD_VAR 0 4
37892: PUSH
37893: LD_INT 1
37895: DOUBLE
37896: EQUAL
37897: IFTRUE 37901
37899: GO 37912
37901: POP
// tech := tech_lassight ; 2 :
37902: LD_ADDR_VAR 0 5
37906: PUSH
37907: LD_INT 12
37909: ST_TO_ADDR
37910: GO 37951
37912: LD_INT 2
37914: DOUBLE
37915: EQUAL
37916: IFTRUE 37920
37918: GO 37931
37920: POP
// tech := tech_mortar ; 3 :
37921: LD_ADDR_VAR 0 5
37925: PUSH
37926: LD_INT 41
37928: ST_TO_ADDR
37929: GO 37951
37931: LD_INT 3
37933: DOUBLE
37934: EQUAL
37935: IFTRUE 37939
37937: GO 37950
37939: POP
// tech := tech_bazooka ; end ;
37940: LD_ADDR_VAR 0 5
37944: PUSH
37945: LD_INT 44
37947: ST_TO_ADDR
37948: GO 37951
37950: POP
// if Researched ( side , tech ) then
37951: LD_VAR 0 3
37955: PPUSH
37956: LD_VAR 0 5
37960: PPUSH
37961: CALL_OW 325
37965: IFFALSE 37992
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
37967: LD_ADDR_VAR 0 2
37971: PUSH
37972: LD_INT 5
37974: PUSH
37975: LD_INT 8
37977: PUSH
37978: LD_INT 9
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: LIST
37985: PUSH
37986: LD_VAR 0 4
37990: ARRAY
37991: ST_TO_ADDR
// end ;
37992: LD_VAR 0 2
37996: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
37997: LD_INT 0
37999: PPUSH
38000: PPUSH
38001: PPUSH
// if not mines then
38002: LD_VAR 0 2
38006: NOT
38007: IFFALSE 38011
// exit ;
38009: GO 38155
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38011: LD_ADDR_VAR 0 5
38015: PUSH
38016: LD_INT 81
38018: PUSH
38019: LD_VAR 0 1
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: PUSH
38028: LD_INT 3
38030: PUSH
38031: LD_INT 21
38033: PUSH
38034: LD_INT 3
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PPUSH
38049: CALL_OW 69
38053: ST_TO_ADDR
// for i in mines do
38054: LD_ADDR_VAR 0 4
38058: PUSH
38059: LD_VAR 0 2
38063: PUSH
38064: FOR_IN
38065: IFFALSE 38153
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38067: LD_VAR 0 4
38071: PUSH
38072: LD_INT 1
38074: ARRAY
38075: PPUSH
38076: LD_VAR 0 4
38080: PUSH
38081: LD_INT 2
38083: ARRAY
38084: PPUSH
38085: CALL_OW 458
38089: NOT
38090: IFFALSE 38094
// continue ;
38092: GO 38064
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38094: LD_VAR 0 4
38098: PUSH
38099: LD_INT 1
38101: ARRAY
38102: PPUSH
38103: LD_VAR 0 4
38107: PUSH
38108: LD_INT 2
38110: ARRAY
38111: PPUSH
38112: CALL_OW 428
38116: PUSH
38117: LD_VAR 0 5
38121: IN
38122: IFFALSE 38151
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38124: LD_VAR 0 4
38128: PUSH
38129: LD_INT 1
38131: ARRAY
38132: PPUSH
38133: LD_VAR 0 4
38137: PUSH
38138: LD_INT 2
38140: ARRAY
38141: PPUSH
38142: LD_VAR 0 1
38146: PPUSH
38147: CALL_OW 456
// end ;
38151: GO 38064
38153: POP
38154: POP
// end ;
38155: LD_VAR 0 3
38159: RET
// export function Count ( array ) ; begin
38160: LD_INT 0
38162: PPUSH
// result := array + 0 ;
38163: LD_ADDR_VAR 0 2
38167: PUSH
38168: LD_VAR 0 1
38172: PUSH
38173: LD_INT 0
38175: PLUS
38176: ST_TO_ADDR
// end ;
38177: LD_VAR 0 2
38181: RET
// export function IsEmpty ( building ) ; begin
38182: LD_INT 0
38184: PPUSH
// if not building then
38185: LD_VAR 0 1
38189: NOT
38190: IFFALSE 38194
// exit ;
38192: GO 38237
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38194: LD_ADDR_VAR 0 2
38198: PUSH
38199: LD_VAR 0 1
38203: PUSH
38204: LD_INT 22
38206: PUSH
38207: LD_VAR 0 1
38211: PPUSH
38212: CALL_OW 255
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: PUSH
38221: LD_INT 58
38223: PUSH
38224: EMPTY
38225: LIST
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: PPUSH
38231: CALL_OW 69
38235: IN
38236: ST_TO_ADDR
// end ;
38237: LD_VAR 0 2
38241: RET
// export function IsNotFull ( building ) ; var places ; begin
38242: LD_INT 0
38244: PPUSH
38245: PPUSH
// if not building then
38246: LD_VAR 0 1
38250: NOT
38251: IFFALSE 38255
// exit ;
38253: GO 38283
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
38255: LD_ADDR_VAR 0 2
38259: PUSH
38260: LD_VAR 0 1
38264: PPUSH
38265: LD_INT 3
38267: PUSH
38268: LD_INT 62
38270: PUSH
38271: EMPTY
38272: LIST
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PPUSH
38278: CALL_OW 72
38282: ST_TO_ADDR
// end ;
38283: LD_VAR 0 2
38287: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
38288: LD_INT 0
38290: PPUSH
38291: PPUSH
38292: PPUSH
38293: PPUSH
// tmp := [ ] ;
38294: LD_ADDR_VAR 0 3
38298: PUSH
38299: EMPTY
38300: ST_TO_ADDR
// list := [ ] ;
38301: LD_ADDR_VAR 0 5
38305: PUSH
38306: EMPTY
38307: ST_TO_ADDR
// for i = 16 to 25 do
38308: LD_ADDR_VAR 0 4
38312: PUSH
38313: DOUBLE
38314: LD_INT 16
38316: DEC
38317: ST_TO_ADDR
38318: LD_INT 25
38320: PUSH
38321: FOR_TO
38322: IFFALSE 38395
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
38324: LD_ADDR_VAR 0 3
38328: PUSH
38329: LD_VAR 0 3
38333: PUSH
38334: LD_INT 22
38336: PUSH
38337: LD_VAR 0 1
38341: PPUSH
38342: CALL_OW 255
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: PUSH
38351: LD_INT 91
38353: PUSH
38354: LD_VAR 0 1
38358: PUSH
38359: LD_INT 6
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: LIST
38366: PUSH
38367: LD_INT 30
38369: PUSH
38370: LD_VAR 0 4
38374: PUSH
38375: EMPTY
38376: LIST
38377: LIST
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: LIST
38383: PUSH
38384: EMPTY
38385: LIST
38386: PPUSH
38387: CALL_OW 69
38391: ADD
38392: ST_TO_ADDR
38393: GO 38321
38395: POP
38396: POP
// for i = 1 to tmp do
38397: LD_ADDR_VAR 0 4
38401: PUSH
38402: DOUBLE
38403: LD_INT 1
38405: DEC
38406: ST_TO_ADDR
38407: LD_VAR 0 3
38411: PUSH
38412: FOR_TO
38413: IFFALSE 38501
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
38415: LD_ADDR_VAR 0 5
38419: PUSH
38420: LD_VAR 0 5
38424: PUSH
38425: LD_VAR 0 3
38429: PUSH
38430: LD_VAR 0 4
38434: ARRAY
38435: PPUSH
38436: CALL_OW 266
38440: PUSH
38441: LD_VAR 0 3
38445: PUSH
38446: LD_VAR 0 4
38450: ARRAY
38451: PPUSH
38452: CALL_OW 250
38456: PUSH
38457: LD_VAR 0 3
38461: PUSH
38462: LD_VAR 0 4
38466: ARRAY
38467: PPUSH
38468: CALL_OW 251
38472: PUSH
38473: LD_VAR 0 3
38477: PUSH
38478: LD_VAR 0 4
38482: ARRAY
38483: PPUSH
38484: CALL_OW 254
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: PUSH
38495: EMPTY
38496: LIST
38497: ADD
38498: ST_TO_ADDR
38499: GO 38412
38501: POP
38502: POP
// result := list ;
38503: LD_ADDR_VAR 0 2
38507: PUSH
38508: LD_VAR 0 5
38512: ST_TO_ADDR
// end ;
38513: LD_VAR 0 2
38517: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
38518: LD_INT 0
38520: PPUSH
38521: PPUSH
38522: PPUSH
38523: PPUSH
38524: PPUSH
38525: PPUSH
38526: PPUSH
// if not factory then
38527: LD_VAR 0 1
38531: NOT
38532: IFFALSE 38536
// exit ;
38534: GO 39129
// if control = control_apeman then
38536: LD_VAR 0 4
38540: PUSH
38541: LD_INT 5
38543: EQUAL
38544: IFFALSE 38653
// begin tmp := UnitsInside ( factory ) ;
38546: LD_ADDR_VAR 0 8
38550: PUSH
38551: LD_VAR 0 1
38555: PPUSH
38556: CALL_OW 313
38560: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
38561: LD_VAR 0 8
38565: PPUSH
38566: LD_INT 25
38568: PUSH
38569: LD_INT 12
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: PPUSH
38576: CALL_OW 72
38580: NOT
38581: IFFALSE 38591
// control := control_manual ;
38583: LD_ADDR_VAR 0 4
38587: PUSH
38588: LD_INT 1
38590: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
38591: LD_ADDR_VAR 0 8
38595: PUSH
38596: LD_VAR 0 1
38600: PPUSH
38601: CALL 38288 0 1
38605: ST_TO_ADDR
// if tmp then
38606: LD_VAR 0 8
38610: IFFALSE 38653
// begin for i in tmp do
38612: LD_ADDR_VAR 0 7
38616: PUSH
38617: LD_VAR 0 8
38621: PUSH
38622: FOR_IN
38623: IFFALSE 38651
// if i [ 1 ] = b_ext_radio then
38625: LD_VAR 0 7
38629: PUSH
38630: LD_INT 1
38632: ARRAY
38633: PUSH
38634: LD_INT 22
38636: EQUAL
38637: IFFALSE 38649
// begin control := control_remote ;
38639: LD_ADDR_VAR 0 4
38643: PUSH
38644: LD_INT 2
38646: ST_TO_ADDR
// break ;
38647: GO 38651
// end ;
38649: GO 38622
38651: POP
38652: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38653: LD_VAR 0 1
38657: PPUSH
38658: LD_VAR 0 2
38662: PPUSH
38663: LD_VAR 0 3
38667: PPUSH
38668: LD_VAR 0 4
38672: PPUSH
38673: LD_VAR 0 5
38677: PPUSH
38678: CALL_OW 448
38682: IFFALSE 38717
// begin result := [ chassis , engine , control , weapon ] ;
38684: LD_ADDR_VAR 0 6
38688: PUSH
38689: LD_VAR 0 2
38693: PUSH
38694: LD_VAR 0 3
38698: PUSH
38699: LD_VAR 0 4
38703: PUSH
38704: LD_VAR 0 5
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: LIST
38713: LIST
38714: ST_TO_ADDR
// exit ;
38715: GO 39129
// end ; _chassis := AvailableChassisList ( factory ) ;
38717: LD_ADDR_VAR 0 9
38721: PUSH
38722: LD_VAR 0 1
38726: PPUSH
38727: CALL_OW 475
38731: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
38732: LD_ADDR_VAR 0 11
38736: PUSH
38737: LD_VAR 0 1
38741: PPUSH
38742: CALL_OW 476
38746: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
38747: LD_ADDR_VAR 0 12
38751: PUSH
38752: LD_VAR 0 1
38756: PPUSH
38757: CALL_OW 477
38761: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
38762: LD_ADDR_VAR 0 10
38766: PUSH
38767: LD_VAR 0 1
38771: PPUSH
38772: CALL_OW 478
38776: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
38777: LD_VAR 0 9
38781: NOT
38782: PUSH
38783: LD_VAR 0 11
38787: NOT
38788: OR
38789: PUSH
38790: LD_VAR 0 12
38794: NOT
38795: OR
38796: PUSH
38797: LD_VAR 0 10
38801: NOT
38802: OR
38803: IFFALSE 38838
// begin result := [ chassis , engine , control , weapon ] ;
38805: LD_ADDR_VAR 0 6
38809: PUSH
38810: LD_VAR 0 2
38814: PUSH
38815: LD_VAR 0 3
38819: PUSH
38820: LD_VAR 0 4
38824: PUSH
38825: LD_VAR 0 5
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: LIST
38834: LIST
38835: ST_TO_ADDR
// exit ;
38836: GO 39129
// end ; if not chassis in _chassis then
38838: LD_VAR 0 2
38842: PUSH
38843: LD_VAR 0 9
38847: IN
38848: NOT
38849: IFFALSE 38875
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
38851: LD_ADDR_VAR 0 2
38855: PUSH
38856: LD_VAR 0 9
38860: PUSH
38861: LD_INT 1
38863: PPUSH
38864: LD_VAR 0 9
38868: PPUSH
38869: CALL_OW 12
38873: ARRAY
38874: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
38875: LD_VAR 0 2
38879: PPUSH
38880: LD_VAR 0 3
38884: PPUSH
38885: CALL 39134 0 2
38889: NOT
38890: IFFALSE 38949
// repeat engine := _engine [ 1 ] ;
38892: LD_ADDR_VAR 0 3
38896: PUSH
38897: LD_VAR 0 11
38901: PUSH
38902: LD_INT 1
38904: ARRAY
38905: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
38906: LD_ADDR_VAR 0 11
38910: PUSH
38911: LD_VAR 0 11
38915: PPUSH
38916: LD_INT 1
38918: PPUSH
38919: CALL_OW 3
38923: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
38924: LD_VAR 0 2
38928: PPUSH
38929: LD_VAR 0 3
38933: PPUSH
38934: CALL 39134 0 2
38938: PUSH
38939: LD_VAR 0 11
38943: PUSH
38944: EMPTY
38945: EQUAL
38946: OR
38947: IFFALSE 38892
// if not control in _control then
38949: LD_VAR 0 4
38953: PUSH
38954: LD_VAR 0 12
38958: IN
38959: NOT
38960: IFFALSE 38986
// control := _control [ rand ( 1 , _control ) ] ;
38962: LD_ADDR_VAR 0 4
38966: PUSH
38967: LD_VAR 0 12
38971: PUSH
38972: LD_INT 1
38974: PPUSH
38975: LD_VAR 0 12
38979: PPUSH
38980: CALL_OW 12
38984: ARRAY
38985: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
38986: LD_VAR 0 2
38990: PPUSH
38991: LD_VAR 0 5
38995: PPUSH
38996: CALL 39354 0 2
39000: NOT
39001: IFFALSE 39060
// repeat weapon := _weapon [ 1 ] ;
39003: LD_ADDR_VAR 0 5
39007: PUSH
39008: LD_VAR 0 10
39012: PUSH
39013: LD_INT 1
39015: ARRAY
39016: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
39017: LD_ADDR_VAR 0 10
39021: PUSH
39022: LD_VAR 0 10
39026: PPUSH
39027: LD_INT 1
39029: PPUSH
39030: CALL_OW 3
39034: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
39035: LD_VAR 0 2
39039: PPUSH
39040: LD_VAR 0 5
39044: PPUSH
39045: CALL 39354 0 2
39049: PUSH
39050: LD_VAR 0 10
39054: PUSH
39055: EMPTY
39056: EQUAL
39057: OR
39058: IFFALSE 39003
// result := [ ] ;
39060: LD_ADDR_VAR 0 6
39064: PUSH
39065: EMPTY
39066: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39067: LD_VAR 0 1
39071: PPUSH
39072: LD_VAR 0 2
39076: PPUSH
39077: LD_VAR 0 3
39081: PPUSH
39082: LD_VAR 0 4
39086: PPUSH
39087: LD_VAR 0 5
39091: PPUSH
39092: CALL_OW 448
39096: IFFALSE 39129
// result := [ chassis , engine , control , weapon ] ;
39098: LD_ADDR_VAR 0 6
39102: PUSH
39103: LD_VAR 0 2
39107: PUSH
39108: LD_VAR 0 3
39112: PUSH
39113: LD_VAR 0 4
39117: PUSH
39118: LD_VAR 0 5
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: ST_TO_ADDR
// end ;
39129: LD_VAR 0 6
39133: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39134: LD_INT 0
39136: PPUSH
// if not chassis or not engine then
39137: LD_VAR 0 1
39141: NOT
39142: PUSH
39143: LD_VAR 0 2
39147: NOT
39148: OR
39149: IFFALSE 39153
// exit ;
39151: GO 39349
// case engine of engine_solar :
39153: LD_VAR 0 2
39157: PUSH
39158: LD_INT 2
39160: DOUBLE
39161: EQUAL
39162: IFTRUE 39166
39164: GO 39204
39166: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39167: LD_ADDR_VAR 0 3
39171: PUSH
39172: LD_INT 11
39174: PUSH
39175: LD_INT 12
39177: PUSH
39178: LD_INT 13
39180: PUSH
39181: LD_INT 14
39183: PUSH
39184: LD_INT 1
39186: PUSH
39187: LD_INT 2
39189: PUSH
39190: LD_INT 3
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: ST_TO_ADDR
39202: GO 39333
39204: LD_INT 1
39206: DOUBLE
39207: EQUAL
39208: IFTRUE 39212
39210: GO 39274
39212: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39213: LD_ADDR_VAR 0 3
39217: PUSH
39218: LD_INT 11
39220: PUSH
39221: LD_INT 12
39223: PUSH
39224: LD_INT 13
39226: PUSH
39227: LD_INT 14
39229: PUSH
39230: LD_INT 1
39232: PUSH
39233: LD_INT 2
39235: PUSH
39236: LD_INT 3
39238: PUSH
39239: LD_INT 4
39241: PUSH
39242: LD_INT 5
39244: PUSH
39245: LD_INT 21
39247: PUSH
39248: LD_INT 23
39250: PUSH
39251: LD_INT 22
39253: PUSH
39254: LD_INT 24
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: LIST
39261: LIST
39262: LIST
39263: LIST
39264: LIST
39265: LIST
39266: LIST
39267: LIST
39268: LIST
39269: LIST
39270: LIST
39271: ST_TO_ADDR
39272: GO 39333
39274: LD_INT 3
39276: DOUBLE
39277: EQUAL
39278: IFTRUE 39282
39280: GO 39332
39282: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39283: LD_ADDR_VAR 0 3
39287: PUSH
39288: LD_INT 13
39290: PUSH
39291: LD_INT 14
39293: PUSH
39294: LD_INT 2
39296: PUSH
39297: LD_INT 3
39299: PUSH
39300: LD_INT 4
39302: PUSH
39303: LD_INT 5
39305: PUSH
39306: LD_INT 21
39308: PUSH
39309: LD_INT 22
39311: PUSH
39312: LD_INT 23
39314: PUSH
39315: LD_INT 24
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: ST_TO_ADDR
39330: GO 39333
39332: POP
// result := ( chassis in result ) ;
39333: LD_ADDR_VAR 0 3
39337: PUSH
39338: LD_VAR 0 1
39342: PUSH
39343: LD_VAR 0 3
39347: IN
39348: ST_TO_ADDR
// end ;
39349: LD_VAR 0 3
39353: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
39354: LD_INT 0
39356: PPUSH
// if not chassis or not weapon then
39357: LD_VAR 0 1
39361: NOT
39362: PUSH
39363: LD_VAR 0 2
39367: NOT
39368: OR
39369: IFFALSE 39373
// exit ;
39371: GO 40433
// case weapon of us_machine_gun :
39373: LD_VAR 0 2
39377: PUSH
39378: LD_INT 2
39380: DOUBLE
39381: EQUAL
39382: IFTRUE 39386
39384: GO 39416
39386: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
39387: LD_ADDR_VAR 0 3
39391: PUSH
39392: LD_INT 1
39394: PUSH
39395: LD_INT 2
39397: PUSH
39398: LD_INT 3
39400: PUSH
39401: LD_INT 4
39403: PUSH
39404: LD_INT 5
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: ST_TO_ADDR
39414: GO 40417
39416: LD_INT 3
39418: DOUBLE
39419: EQUAL
39420: IFTRUE 39424
39422: GO 39454
39424: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
39425: LD_ADDR_VAR 0 3
39429: PUSH
39430: LD_INT 1
39432: PUSH
39433: LD_INT 2
39435: PUSH
39436: LD_INT 3
39438: PUSH
39439: LD_INT 4
39441: PUSH
39442: LD_INT 5
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: LIST
39449: LIST
39450: LIST
39451: ST_TO_ADDR
39452: GO 40417
39454: LD_INT 11
39456: DOUBLE
39457: EQUAL
39458: IFTRUE 39462
39460: GO 39492
39462: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
39463: LD_ADDR_VAR 0 3
39467: PUSH
39468: LD_INT 1
39470: PUSH
39471: LD_INT 2
39473: PUSH
39474: LD_INT 3
39476: PUSH
39477: LD_INT 4
39479: PUSH
39480: LD_INT 5
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: LIST
39487: LIST
39488: LIST
39489: ST_TO_ADDR
39490: GO 40417
39492: LD_INT 4
39494: DOUBLE
39495: EQUAL
39496: IFTRUE 39500
39498: GO 39526
39500: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
39501: LD_ADDR_VAR 0 3
39505: PUSH
39506: LD_INT 2
39508: PUSH
39509: LD_INT 3
39511: PUSH
39512: LD_INT 4
39514: PUSH
39515: LD_INT 5
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: ST_TO_ADDR
39524: GO 40417
39526: LD_INT 5
39528: DOUBLE
39529: EQUAL
39530: IFTRUE 39534
39532: GO 39560
39534: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
39535: LD_ADDR_VAR 0 3
39539: PUSH
39540: LD_INT 2
39542: PUSH
39543: LD_INT 3
39545: PUSH
39546: LD_INT 4
39548: PUSH
39549: LD_INT 5
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: ST_TO_ADDR
39558: GO 40417
39560: LD_INT 9
39562: DOUBLE
39563: EQUAL
39564: IFTRUE 39568
39566: GO 39594
39568: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
39569: LD_ADDR_VAR 0 3
39573: PUSH
39574: LD_INT 2
39576: PUSH
39577: LD_INT 3
39579: PUSH
39580: LD_INT 4
39582: PUSH
39583: LD_INT 5
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: ST_TO_ADDR
39592: GO 40417
39594: LD_INT 7
39596: DOUBLE
39597: EQUAL
39598: IFTRUE 39602
39600: GO 39628
39602: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
39603: LD_ADDR_VAR 0 3
39607: PUSH
39608: LD_INT 2
39610: PUSH
39611: LD_INT 3
39613: PUSH
39614: LD_INT 4
39616: PUSH
39617: LD_INT 5
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: ST_TO_ADDR
39626: GO 40417
39628: LD_INT 12
39630: DOUBLE
39631: EQUAL
39632: IFTRUE 39636
39634: GO 39662
39636: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
39637: LD_ADDR_VAR 0 3
39641: PUSH
39642: LD_INT 2
39644: PUSH
39645: LD_INT 3
39647: PUSH
39648: LD_INT 4
39650: PUSH
39651: LD_INT 5
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: ST_TO_ADDR
39660: GO 40417
39662: LD_INT 13
39664: DOUBLE
39665: EQUAL
39666: IFTRUE 39670
39668: GO 39696
39670: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
39671: LD_ADDR_VAR 0 3
39675: PUSH
39676: LD_INT 2
39678: PUSH
39679: LD_INT 3
39681: PUSH
39682: LD_INT 4
39684: PUSH
39685: LD_INT 5
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: LIST
39692: LIST
39693: ST_TO_ADDR
39694: GO 40417
39696: LD_INT 14
39698: DOUBLE
39699: EQUAL
39700: IFTRUE 39704
39702: GO 39722
39704: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
39705: LD_ADDR_VAR 0 3
39709: PUSH
39710: LD_INT 4
39712: PUSH
39713: LD_INT 5
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: ST_TO_ADDR
39720: GO 40417
39722: LD_INT 6
39724: DOUBLE
39725: EQUAL
39726: IFTRUE 39730
39728: GO 39748
39730: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
39731: LD_ADDR_VAR 0 3
39735: PUSH
39736: LD_INT 4
39738: PUSH
39739: LD_INT 5
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: ST_TO_ADDR
39746: GO 40417
39748: LD_INT 10
39750: DOUBLE
39751: EQUAL
39752: IFTRUE 39756
39754: GO 39774
39756: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
39757: LD_ADDR_VAR 0 3
39761: PUSH
39762: LD_INT 4
39764: PUSH
39765: LD_INT 5
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: ST_TO_ADDR
39772: GO 40417
39774: LD_INT 22
39776: DOUBLE
39777: EQUAL
39778: IFTRUE 39782
39780: GO 39808
39782: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
39783: LD_ADDR_VAR 0 3
39787: PUSH
39788: LD_INT 11
39790: PUSH
39791: LD_INT 12
39793: PUSH
39794: LD_INT 13
39796: PUSH
39797: LD_INT 14
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: ST_TO_ADDR
39806: GO 40417
39808: LD_INT 23
39810: DOUBLE
39811: EQUAL
39812: IFTRUE 39816
39814: GO 39842
39816: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
39817: LD_ADDR_VAR 0 3
39821: PUSH
39822: LD_INT 11
39824: PUSH
39825: LD_INT 12
39827: PUSH
39828: LD_INT 13
39830: PUSH
39831: LD_INT 14
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: ST_TO_ADDR
39840: GO 40417
39842: LD_INT 24
39844: DOUBLE
39845: EQUAL
39846: IFTRUE 39850
39848: GO 39876
39850: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
39851: LD_ADDR_VAR 0 3
39855: PUSH
39856: LD_INT 11
39858: PUSH
39859: LD_INT 12
39861: PUSH
39862: LD_INT 13
39864: PUSH
39865: LD_INT 14
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: ST_TO_ADDR
39874: GO 40417
39876: LD_INT 30
39878: DOUBLE
39879: EQUAL
39880: IFTRUE 39884
39882: GO 39910
39884: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
39885: LD_ADDR_VAR 0 3
39889: PUSH
39890: LD_INT 11
39892: PUSH
39893: LD_INT 12
39895: PUSH
39896: LD_INT 13
39898: PUSH
39899: LD_INT 14
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: LIST
39906: LIST
39907: ST_TO_ADDR
39908: GO 40417
39910: LD_INT 25
39912: DOUBLE
39913: EQUAL
39914: IFTRUE 39918
39916: GO 39936
39918: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
39919: LD_ADDR_VAR 0 3
39923: PUSH
39924: LD_INT 13
39926: PUSH
39927: LD_INT 14
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: ST_TO_ADDR
39934: GO 40417
39936: LD_INT 27
39938: DOUBLE
39939: EQUAL
39940: IFTRUE 39944
39942: GO 39962
39944: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
39945: LD_ADDR_VAR 0 3
39949: PUSH
39950: LD_INT 13
39952: PUSH
39953: LD_INT 14
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: ST_TO_ADDR
39960: GO 40417
39962: LD_INT 92
39964: DOUBLE
39965: EQUAL
39966: IFTRUE 39970
39968: GO 39996
39970: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
39971: LD_ADDR_VAR 0 3
39975: PUSH
39976: LD_INT 11
39978: PUSH
39979: LD_INT 12
39981: PUSH
39982: LD_INT 13
39984: PUSH
39985: LD_INT 14
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: ST_TO_ADDR
39994: GO 40417
39996: LD_INT 28
39998: DOUBLE
39999: EQUAL
40000: IFTRUE 40004
40002: GO 40022
40004: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
40005: LD_ADDR_VAR 0 3
40009: PUSH
40010: LD_INT 13
40012: PUSH
40013: LD_INT 14
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: ST_TO_ADDR
40020: GO 40417
40022: LD_INT 29
40024: DOUBLE
40025: EQUAL
40026: IFTRUE 40030
40028: GO 40048
40030: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
40031: LD_ADDR_VAR 0 3
40035: PUSH
40036: LD_INT 13
40038: PUSH
40039: LD_INT 14
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: ST_TO_ADDR
40046: GO 40417
40048: LD_INT 31
40050: DOUBLE
40051: EQUAL
40052: IFTRUE 40056
40054: GO 40074
40056: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
40057: LD_ADDR_VAR 0 3
40061: PUSH
40062: LD_INT 13
40064: PUSH
40065: LD_INT 14
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: ST_TO_ADDR
40072: GO 40417
40074: LD_INT 26
40076: DOUBLE
40077: EQUAL
40078: IFTRUE 40082
40080: GO 40100
40082: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40083: LD_ADDR_VAR 0 3
40087: PUSH
40088: LD_INT 13
40090: PUSH
40091: LD_INT 14
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: ST_TO_ADDR
40098: GO 40417
40100: LD_INT 42
40102: DOUBLE
40103: EQUAL
40104: IFTRUE 40108
40106: GO 40134
40108: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40109: LD_ADDR_VAR 0 3
40113: PUSH
40114: LD_INT 21
40116: PUSH
40117: LD_INT 22
40119: PUSH
40120: LD_INT 23
40122: PUSH
40123: LD_INT 24
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: ST_TO_ADDR
40132: GO 40417
40134: LD_INT 43
40136: DOUBLE
40137: EQUAL
40138: IFTRUE 40142
40140: GO 40168
40142: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40143: LD_ADDR_VAR 0 3
40147: PUSH
40148: LD_INT 21
40150: PUSH
40151: LD_INT 22
40153: PUSH
40154: LD_INT 23
40156: PUSH
40157: LD_INT 24
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: LIST
40164: LIST
40165: ST_TO_ADDR
40166: GO 40417
40168: LD_INT 44
40170: DOUBLE
40171: EQUAL
40172: IFTRUE 40176
40174: GO 40202
40176: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40177: LD_ADDR_VAR 0 3
40181: PUSH
40182: LD_INT 21
40184: PUSH
40185: LD_INT 22
40187: PUSH
40188: LD_INT 23
40190: PUSH
40191: LD_INT 24
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: LIST
40198: LIST
40199: ST_TO_ADDR
40200: GO 40417
40202: LD_INT 45
40204: DOUBLE
40205: EQUAL
40206: IFTRUE 40210
40208: GO 40236
40210: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40211: LD_ADDR_VAR 0 3
40215: PUSH
40216: LD_INT 21
40218: PUSH
40219: LD_INT 22
40221: PUSH
40222: LD_INT 23
40224: PUSH
40225: LD_INT 24
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: ST_TO_ADDR
40234: GO 40417
40236: LD_INT 49
40238: DOUBLE
40239: EQUAL
40240: IFTRUE 40244
40242: GO 40270
40244: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
40245: LD_ADDR_VAR 0 3
40249: PUSH
40250: LD_INT 21
40252: PUSH
40253: LD_INT 22
40255: PUSH
40256: LD_INT 23
40258: PUSH
40259: LD_INT 24
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: LIST
40266: LIST
40267: ST_TO_ADDR
40268: GO 40417
40270: LD_INT 51
40272: DOUBLE
40273: EQUAL
40274: IFTRUE 40278
40276: GO 40304
40278: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
40279: LD_ADDR_VAR 0 3
40283: PUSH
40284: LD_INT 21
40286: PUSH
40287: LD_INT 22
40289: PUSH
40290: LD_INT 23
40292: PUSH
40293: LD_INT 24
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: ST_TO_ADDR
40302: GO 40417
40304: LD_INT 52
40306: DOUBLE
40307: EQUAL
40308: IFTRUE 40312
40310: GO 40338
40312: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
40313: LD_ADDR_VAR 0 3
40317: PUSH
40318: LD_INT 21
40320: PUSH
40321: LD_INT 22
40323: PUSH
40324: LD_INT 23
40326: PUSH
40327: LD_INT 24
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: ST_TO_ADDR
40336: GO 40417
40338: LD_INT 53
40340: DOUBLE
40341: EQUAL
40342: IFTRUE 40346
40344: GO 40364
40346: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
40347: LD_ADDR_VAR 0 3
40351: PUSH
40352: LD_INT 23
40354: PUSH
40355: LD_INT 24
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: ST_TO_ADDR
40362: GO 40417
40364: LD_INT 46
40366: DOUBLE
40367: EQUAL
40368: IFTRUE 40372
40370: GO 40390
40372: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
40373: LD_ADDR_VAR 0 3
40377: PUSH
40378: LD_INT 23
40380: PUSH
40381: LD_INT 24
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: ST_TO_ADDR
40388: GO 40417
40390: LD_INT 47
40392: DOUBLE
40393: EQUAL
40394: IFTRUE 40398
40396: GO 40416
40398: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40399: LD_ADDR_VAR 0 3
40403: PUSH
40404: LD_INT 23
40406: PUSH
40407: LD_INT 24
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: ST_TO_ADDR
40414: GO 40417
40416: POP
// result := ( chassis in result ) ;
40417: LD_ADDR_VAR 0 3
40421: PUSH
40422: LD_VAR 0 1
40426: PUSH
40427: LD_VAR 0 3
40431: IN
40432: ST_TO_ADDR
// end ;
40433: LD_VAR 0 3
40437: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
40438: LD_INT 0
40440: PPUSH
40441: PPUSH
40442: PPUSH
40443: PPUSH
40444: PPUSH
40445: PPUSH
40446: PPUSH
// result := array ;
40447: LD_ADDR_VAR 0 5
40451: PUSH
40452: LD_VAR 0 1
40456: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
40457: LD_VAR 0 1
40461: NOT
40462: PUSH
40463: LD_VAR 0 2
40467: NOT
40468: OR
40469: PUSH
40470: LD_VAR 0 3
40474: NOT
40475: OR
40476: PUSH
40477: LD_VAR 0 2
40481: PUSH
40482: LD_VAR 0 1
40486: GREATER
40487: OR
40488: PUSH
40489: LD_VAR 0 3
40493: PUSH
40494: LD_VAR 0 1
40498: GREATER
40499: OR
40500: IFFALSE 40504
// exit ;
40502: GO 40800
// if direction then
40504: LD_VAR 0 4
40508: IFFALSE 40572
// begin d := 1 ;
40510: LD_ADDR_VAR 0 9
40514: PUSH
40515: LD_INT 1
40517: ST_TO_ADDR
// if i_from > i_to then
40518: LD_VAR 0 2
40522: PUSH
40523: LD_VAR 0 3
40527: GREATER
40528: IFFALSE 40554
// length := ( array - i_from ) + i_to else
40530: LD_ADDR_VAR 0 11
40534: PUSH
40535: LD_VAR 0 1
40539: PUSH
40540: LD_VAR 0 2
40544: MINUS
40545: PUSH
40546: LD_VAR 0 3
40550: PLUS
40551: ST_TO_ADDR
40552: GO 40570
// length := i_to - i_from ;
40554: LD_ADDR_VAR 0 11
40558: PUSH
40559: LD_VAR 0 3
40563: PUSH
40564: LD_VAR 0 2
40568: MINUS
40569: ST_TO_ADDR
// end else
40570: GO 40633
// begin d := - 1 ;
40572: LD_ADDR_VAR 0 9
40576: PUSH
40577: LD_INT 1
40579: NEG
40580: ST_TO_ADDR
// if i_from > i_to then
40581: LD_VAR 0 2
40585: PUSH
40586: LD_VAR 0 3
40590: GREATER
40591: IFFALSE 40611
// length := i_from - i_to else
40593: LD_ADDR_VAR 0 11
40597: PUSH
40598: LD_VAR 0 2
40602: PUSH
40603: LD_VAR 0 3
40607: MINUS
40608: ST_TO_ADDR
40609: GO 40633
// length := ( array - i_to ) + i_from ;
40611: LD_ADDR_VAR 0 11
40615: PUSH
40616: LD_VAR 0 1
40620: PUSH
40621: LD_VAR 0 3
40625: MINUS
40626: PUSH
40627: LD_VAR 0 2
40631: PLUS
40632: ST_TO_ADDR
// end ; if not length then
40633: LD_VAR 0 11
40637: NOT
40638: IFFALSE 40642
// exit ;
40640: GO 40800
// tmp := array ;
40642: LD_ADDR_VAR 0 10
40646: PUSH
40647: LD_VAR 0 1
40651: ST_TO_ADDR
// for i = 1 to length do
40652: LD_ADDR_VAR 0 6
40656: PUSH
40657: DOUBLE
40658: LD_INT 1
40660: DEC
40661: ST_TO_ADDR
40662: LD_VAR 0 11
40666: PUSH
40667: FOR_TO
40668: IFFALSE 40788
// begin for j = 1 to array do
40670: LD_ADDR_VAR 0 7
40674: PUSH
40675: DOUBLE
40676: LD_INT 1
40678: DEC
40679: ST_TO_ADDR
40680: LD_VAR 0 1
40684: PUSH
40685: FOR_TO
40686: IFFALSE 40774
// begin k := j + d ;
40688: LD_ADDR_VAR 0 8
40692: PUSH
40693: LD_VAR 0 7
40697: PUSH
40698: LD_VAR 0 9
40702: PLUS
40703: ST_TO_ADDR
// if k > array then
40704: LD_VAR 0 8
40708: PUSH
40709: LD_VAR 0 1
40713: GREATER
40714: IFFALSE 40724
// k := 1 ;
40716: LD_ADDR_VAR 0 8
40720: PUSH
40721: LD_INT 1
40723: ST_TO_ADDR
// if not k then
40724: LD_VAR 0 8
40728: NOT
40729: IFFALSE 40741
// k := array ;
40731: LD_ADDR_VAR 0 8
40735: PUSH
40736: LD_VAR 0 1
40740: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
40741: LD_ADDR_VAR 0 10
40745: PUSH
40746: LD_VAR 0 10
40750: PPUSH
40751: LD_VAR 0 8
40755: PPUSH
40756: LD_VAR 0 1
40760: PUSH
40761: LD_VAR 0 7
40765: ARRAY
40766: PPUSH
40767: CALL_OW 1
40771: ST_TO_ADDR
// end ;
40772: GO 40685
40774: POP
40775: POP
// array := tmp ;
40776: LD_ADDR_VAR 0 1
40780: PUSH
40781: LD_VAR 0 10
40785: ST_TO_ADDR
// end ;
40786: GO 40667
40788: POP
40789: POP
// result := array ;
40790: LD_ADDR_VAR 0 5
40794: PUSH
40795: LD_VAR 0 1
40799: ST_TO_ADDR
// end ;
40800: LD_VAR 0 5
40804: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
40805: LD_INT 0
40807: PPUSH
40808: PPUSH
// result := 0 ;
40809: LD_ADDR_VAR 0 3
40813: PUSH
40814: LD_INT 0
40816: ST_TO_ADDR
// if not array or not value in array then
40817: LD_VAR 0 1
40821: NOT
40822: PUSH
40823: LD_VAR 0 2
40827: PUSH
40828: LD_VAR 0 1
40832: IN
40833: NOT
40834: OR
40835: IFFALSE 40839
// exit ;
40837: GO 40893
// for i = 1 to array do
40839: LD_ADDR_VAR 0 4
40843: PUSH
40844: DOUBLE
40845: LD_INT 1
40847: DEC
40848: ST_TO_ADDR
40849: LD_VAR 0 1
40853: PUSH
40854: FOR_TO
40855: IFFALSE 40891
// if value = array [ i ] then
40857: LD_VAR 0 2
40861: PUSH
40862: LD_VAR 0 1
40866: PUSH
40867: LD_VAR 0 4
40871: ARRAY
40872: EQUAL
40873: IFFALSE 40889
// begin result := i ;
40875: LD_ADDR_VAR 0 3
40879: PUSH
40880: LD_VAR 0 4
40884: ST_TO_ADDR
// exit ;
40885: POP
40886: POP
40887: GO 40893
// end ;
40889: GO 40854
40891: POP
40892: POP
// end ;
40893: LD_VAR 0 3
40897: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
40898: LD_INT 0
40900: PPUSH
// vc_chassis := chassis ;
40901: LD_ADDR_OWVAR 37
40905: PUSH
40906: LD_VAR 0 1
40910: ST_TO_ADDR
// vc_engine := engine ;
40911: LD_ADDR_OWVAR 39
40915: PUSH
40916: LD_VAR 0 2
40920: ST_TO_ADDR
// vc_control := control ;
40921: LD_ADDR_OWVAR 38
40925: PUSH
40926: LD_VAR 0 3
40930: ST_TO_ADDR
// vc_weapon := weapon ;
40931: LD_ADDR_OWVAR 40
40935: PUSH
40936: LD_VAR 0 4
40940: ST_TO_ADDR
// vc_fuel_battery := fuel ;
40941: LD_ADDR_OWVAR 41
40945: PUSH
40946: LD_VAR 0 5
40950: ST_TO_ADDR
// end ;
40951: LD_VAR 0 6
40955: RET
// export function WantPlant ( unit ) ; var task ; begin
40956: LD_INT 0
40958: PPUSH
40959: PPUSH
// result := false ;
40960: LD_ADDR_VAR 0 2
40964: PUSH
40965: LD_INT 0
40967: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
40968: LD_ADDR_VAR 0 3
40972: PUSH
40973: LD_VAR 0 1
40977: PPUSH
40978: CALL_OW 437
40982: ST_TO_ADDR
// if task then
40983: LD_VAR 0 3
40987: IFFALSE 41015
// if task [ 1 ] [ 1 ] = p then
40989: LD_VAR 0 3
40993: PUSH
40994: LD_INT 1
40996: ARRAY
40997: PUSH
40998: LD_INT 1
41000: ARRAY
41001: PUSH
41002: LD_STRING p
41004: EQUAL
41005: IFFALSE 41015
// result := true ;
41007: LD_ADDR_VAR 0 2
41011: PUSH
41012: LD_INT 1
41014: ST_TO_ADDR
// end ;
41015: LD_VAR 0 2
41019: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
41020: LD_INT 0
41022: PPUSH
41023: PPUSH
41024: PPUSH
41025: PPUSH
// if pos < 1 then
41026: LD_VAR 0 2
41030: PUSH
41031: LD_INT 1
41033: LESS
41034: IFFALSE 41038
// exit ;
41036: GO 41341
// if pos = 1 then
41038: LD_VAR 0 2
41042: PUSH
41043: LD_INT 1
41045: EQUAL
41046: IFFALSE 41079
// result := Replace ( arr , pos [ 1 ] , value ) else
41048: LD_ADDR_VAR 0 4
41052: PUSH
41053: LD_VAR 0 1
41057: PPUSH
41058: LD_VAR 0 2
41062: PUSH
41063: LD_INT 1
41065: ARRAY
41066: PPUSH
41067: LD_VAR 0 3
41071: PPUSH
41072: CALL_OW 1
41076: ST_TO_ADDR
41077: GO 41341
// begin tmp := arr ;
41079: LD_ADDR_VAR 0 6
41083: PUSH
41084: LD_VAR 0 1
41088: ST_TO_ADDR
// s_arr := [ tmp ] ;
41089: LD_ADDR_VAR 0 7
41093: PUSH
41094: LD_VAR 0 6
41098: PUSH
41099: EMPTY
41100: LIST
41101: ST_TO_ADDR
// for i = 1 to pos - 1 do
41102: LD_ADDR_VAR 0 5
41106: PUSH
41107: DOUBLE
41108: LD_INT 1
41110: DEC
41111: ST_TO_ADDR
41112: LD_VAR 0 2
41116: PUSH
41117: LD_INT 1
41119: MINUS
41120: PUSH
41121: FOR_TO
41122: IFFALSE 41167
// begin tmp := tmp [ pos [ i ] ] ;
41124: LD_ADDR_VAR 0 6
41128: PUSH
41129: LD_VAR 0 6
41133: PUSH
41134: LD_VAR 0 2
41138: PUSH
41139: LD_VAR 0 5
41143: ARRAY
41144: ARRAY
41145: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41146: LD_ADDR_VAR 0 7
41150: PUSH
41151: LD_VAR 0 7
41155: PUSH
41156: LD_VAR 0 6
41160: PUSH
41161: EMPTY
41162: LIST
41163: ADD
41164: ST_TO_ADDR
// end ;
41165: GO 41121
41167: POP
41168: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41169: LD_ADDR_VAR 0 6
41173: PUSH
41174: LD_VAR 0 6
41178: PPUSH
41179: LD_VAR 0 2
41183: PUSH
41184: LD_VAR 0 2
41188: ARRAY
41189: PPUSH
41190: LD_VAR 0 3
41194: PPUSH
41195: CALL_OW 1
41199: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41200: LD_ADDR_VAR 0 7
41204: PUSH
41205: LD_VAR 0 7
41209: PPUSH
41210: LD_VAR 0 7
41214: PPUSH
41215: LD_VAR 0 6
41219: PPUSH
41220: CALL_OW 1
41224: ST_TO_ADDR
// for i = s_arr downto 2 do
41225: LD_ADDR_VAR 0 5
41229: PUSH
41230: DOUBLE
41231: LD_VAR 0 7
41235: INC
41236: ST_TO_ADDR
41237: LD_INT 2
41239: PUSH
41240: FOR_DOWNTO
41241: IFFALSE 41325
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
41243: LD_ADDR_VAR 0 6
41247: PUSH
41248: LD_VAR 0 7
41252: PUSH
41253: LD_VAR 0 5
41257: PUSH
41258: LD_INT 1
41260: MINUS
41261: ARRAY
41262: PPUSH
41263: LD_VAR 0 2
41267: PUSH
41268: LD_VAR 0 5
41272: PUSH
41273: LD_INT 1
41275: MINUS
41276: ARRAY
41277: PPUSH
41278: LD_VAR 0 7
41282: PUSH
41283: LD_VAR 0 5
41287: ARRAY
41288: PPUSH
41289: CALL_OW 1
41293: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
41294: LD_ADDR_VAR 0 7
41298: PUSH
41299: LD_VAR 0 7
41303: PPUSH
41304: LD_VAR 0 5
41308: PUSH
41309: LD_INT 1
41311: MINUS
41312: PPUSH
41313: LD_VAR 0 6
41317: PPUSH
41318: CALL_OW 1
41322: ST_TO_ADDR
// end ;
41323: GO 41240
41325: POP
41326: POP
// result := s_arr [ 1 ] ;
41327: LD_ADDR_VAR 0 4
41331: PUSH
41332: LD_VAR 0 7
41336: PUSH
41337: LD_INT 1
41339: ARRAY
41340: ST_TO_ADDR
// end ; end ;
41341: LD_VAR 0 4
41345: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
41346: LD_INT 0
41348: PPUSH
41349: PPUSH
// if not list then
41350: LD_VAR 0 1
41354: NOT
41355: IFFALSE 41359
// exit ;
41357: GO 41450
// i := list [ pos1 ] ;
41359: LD_ADDR_VAR 0 5
41363: PUSH
41364: LD_VAR 0 1
41368: PUSH
41369: LD_VAR 0 2
41373: ARRAY
41374: ST_TO_ADDR
// if not i then
41375: LD_VAR 0 5
41379: NOT
41380: IFFALSE 41384
// exit ;
41382: GO 41450
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
41384: LD_ADDR_VAR 0 1
41388: PUSH
41389: LD_VAR 0 1
41393: PPUSH
41394: LD_VAR 0 2
41398: PPUSH
41399: LD_VAR 0 1
41403: PUSH
41404: LD_VAR 0 3
41408: ARRAY
41409: PPUSH
41410: CALL_OW 1
41414: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
41415: LD_ADDR_VAR 0 1
41419: PUSH
41420: LD_VAR 0 1
41424: PPUSH
41425: LD_VAR 0 3
41429: PPUSH
41430: LD_VAR 0 5
41434: PPUSH
41435: CALL_OW 1
41439: ST_TO_ADDR
// result := list ;
41440: LD_ADDR_VAR 0 4
41444: PUSH
41445: LD_VAR 0 1
41449: ST_TO_ADDR
// end ;
41450: LD_VAR 0 4
41454: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
41455: LD_INT 0
41457: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
41458: LD_ADDR_VAR 0 5
41462: PUSH
41463: LD_VAR 0 1
41467: PPUSH
41468: CALL_OW 250
41472: PPUSH
41473: LD_VAR 0 1
41477: PPUSH
41478: CALL_OW 251
41482: PPUSH
41483: LD_VAR 0 2
41487: PPUSH
41488: LD_VAR 0 3
41492: PPUSH
41493: LD_VAR 0 4
41497: PPUSH
41498: CALL 41876 0 5
41502: ST_TO_ADDR
// end ;
41503: LD_VAR 0 5
41507: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
41508: LD_INT 0
41510: PPUSH
41511: PPUSH
41512: PPUSH
41513: PPUSH
// if not list or not unit then
41514: LD_VAR 0 2
41518: NOT
41519: PUSH
41520: LD_VAR 0 1
41524: NOT
41525: OR
41526: IFFALSE 41530
// exit ;
41528: GO 41871
// result := [ ] ;
41530: LD_ADDR_VAR 0 5
41534: PUSH
41535: EMPTY
41536: ST_TO_ADDR
// for i in list do
41537: LD_ADDR_VAR 0 6
41541: PUSH
41542: LD_VAR 0 2
41546: PUSH
41547: FOR_IN
41548: IFFALSE 41766
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
41550: LD_ADDR_VAR 0 8
41554: PUSH
41555: LD_VAR 0 1
41559: PPUSH
41560: LD_VAR 0 6
41564: PUSH
41565: LD_INT 1
41567: ARRAY
41568: PPUSH
41569: LD_VAR 0 6
41573: PUSH
41574: LD_INT 2
41576: ARRAY
41577: PPUSH
41578: CALL_OW 297
41582: ST_TO_ADDR
// if not Count ( result ) then
41583: LD_VAR 0 5
41587: PPUSH
41588: CALL 38160 0 1
41592: NOT
41593: IFFALSE 41626
// begin result := Join ( result , [ i , tmp ] ) ;
41595: LD_ADDR_VAR 0 5
41599: PUSH
41600: LD_VAR 0 5
41604: PPUSH
41605: LD_VAR 0 6
41609: PUSH
41610: LD_VAR 0 8
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: PPUSH
41619: CALL 73760 0 2
41623: ST_TO_ADDR
// continue ;
41624: GO 41547
// end ; if result [ result ] [ 2 ] <= tmp then
41626: LD_VAR 0 5
41630: PUSH
41631: LD_VAR 0 5
41635: ARRAY
41636: PUSH
41637: LD_INT 2
41639: ARRAY
41640: PUSH
41641: LD_VAR 0 8
41645: LESSEQUAL
41646: IFFALSE 41679
// result := Join ( result , [ i , tmp ] ) else
41648: LD_ADDR_VAR 0 5
41652: PUSH
41653: LD_VAR 0 5
41657: PPUSH
41658: LD_VAR 0 6
41662: PUSH
41663: LD_VAR 0 8
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PPUSH
41672: CALL 73760 0 2
41676: ST_TO_ADDR
41677: GO 41764
// begin for j := 1 to Count ( result ) do
41679: LD_ADDR_VAR 0 7
41683: PUSH
41684: DOUBLE
41685: LD_INT 1
41687: DEC
41688: ST_TO_ADDR
41689: LD_VAR 0 5
41693: PPUSH
41694: CALL 38160 0 1
41698: PUSH
41699: FOR_TO
41700: IFFALSE 41762
// begin if tmp < result [ j ] [ 2 ] then
41702: LD_VAR 0 8
41706: PUSH
41707: LD_VAR 0 5
41711: PUSH
41712: LD_VAR 0 7
41716: ARRAY
41717: PUSH
41718: LD_INT 2
41720: ARRAY
41721: LESS
41722: IFFALSE 41760
// begin result := Insert ( result , j , [ i , tmp ] ) ;
41724: LD_ADDR_VAR 0 5
41728: PUSH
41729: LD_VAR 0 5
41733: PPUSH
41734: LD_VAR 0 7
41738: PPUSH
41739: LD_VAR 0 6
41743: PUSH
41744: LD_VAR 0 8
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: PPUSH
41753: CALL_OW 2
41757: ST_TO_ADDR
// break ;
41758: GO 41762
// end ; end ;
41760: GO 41699
41762: POP
41763: POP
// end ; end ;
41764: GO 41547
41766: POP
41767: POP
// if result and not asc then
41768: LD_VAR 0 5
41772: PUSH
41773: LD_VAR 0 3
41777: NOT
41778: AND
41779: IFFALSE 41796
// result := ReverseArray ( result ) ;
41781: LD_ADDR_VAR 0 5
41785: PUSH
41786: LD_VAR 0 5
41790: PPUSH
41791: CALL 69036 0 1
41795: ST_TO_ADDR
// tmp := [ ] ;
41796: LD_ADDR_VAR 0 8
41800: PUSH
41801: EMPTY
41802: ST_TO_ADDR
// if mode then
41803: LD_VAR 0 4
41807: IFFALSE 41871
// begin for i := 1 to result do
41809: LD_ADDR_VAR 0 6
41813: PUSH
41814: DOUBLE
41815: LD_INT 1
41817: DEC
41818: ST_TO_ADDR
41819: LD_VAR 0 5
41823: PUSH
41824: FOR_TO
41825: IFFALSE 41859
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
41827: LD_ADDR_VAR 0 8
41831: PUSH
41832: LD_VAR 0 8
41836: PPUSH
41837: LD_VAR 0 5
41841: PUSH
41842: LD_VAR 0 6
41846: ARRAY
41847: PUSH
41848: LD_INT 1
41850: ARRAY
41851: PPUSH
41852: CALL 73760 0 2
41856: ST_TO_ADDR
41857: GO 41824
41859: POP
41860: POP
// result := tmp ;
41861: LD_ADDR_VAR 0 5
41865: PUSH
41866: LD_VAR 0 8
41870: ST_TO_ADDR
// end ; end ;
41871: LD_VAR 0 5
41875: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
41876: LD_INT 0
41878: PPUSH
41879: PPUSH
41880: PPUSH
41881: PPUSH
// if not list then
41882: LD_VAR 0 3
41886: NOT
41887: IFFALSE 41891
// exit ;
41889: GO 42279
// result := [ ] ;
41891: LD_ADDR_VAR 0 6
41895: PUSH
41896: EMPTY
41897: ST_TO_ADDR
// for i in list do
41898: LD_ADDR_VAR 0 7
41902: PUSH
41903: LD_VAR 0 3
41907: PUSH
41908: FOR_IN
41909: IFFALSE 42111
// begin tmp := GetDistUnitXY ( i , x , y ) ;
41911: LD_ADDR_VAR 0 9
41915: PUSH
41916: LD_VAR 0 7
41920: PPUSH
41921: LD_VAR 0 1
41925: PPUSH
41926: LD_VAR 0 2
41930: PPUSH
41931: CALL_OW 297
41935: ST_TO_ADDR
// if not result then
41936: LD_VAR 0 6
41940: NOT
41941: IFFALSE 41967
// result := [ [ i , tmp ] ] else
41943: LD_ADDR_VAR 0 6
41947: PUSH
41948: LD_VAR 0 7
41952: PUSH
41953: LD_VAR 0 9
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: EMPTY
41963: LIST
41964: ST_TO_ADDR
41965: GO 42109
// begin if result [ result ] [ 2 ] < tmp then
41967: LD_VAR 0 6
41971: PUSH
41972: LD_VAR 0 6
41976: ARRAY
41977: PUSH
41978: LD_INT 2
41980: ARRAY
41981: PUSH
41982: LD_VAR 0 9
41986: LESS
41987: IFFALSE 42029
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
41989: LD_ADDR_VAR 0 6
41993: PUSH
41994: LD_VAR 0 6
41998: PPUSH
41999: LD_VAR 0 6
42003: PUSH
42004: LD_INT 1
42006: PLUS
42007: PPUSH
42008: LD_VAR 0 7
42012: PUSH
42013: LD_VAR 0 9
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PPUSH
42022: CALL_OW 2
42026: ST_TO_ADDR
42027: GO 42109
// for j = 1 to result do
42029: LD_ADDR_VAR 0 8
42033: PUSH
42034: DOUBLE
42035: LD_INT 1
42037: DEC
42038: ST_TO_ADDR
42039: LD_VAR 0 6
42043: PUSH
42044: FOR_TO
42045: IFFALSE 42107
// begin if tmp < result [ j ] [ 2 ] then
42047: LD_VAR 0 9
42051: PUSH
42052: LD_VAR 0 6
42056: PUSH
42057: LD_VAR 0 8
42061: ARRAY
42062: PUSH
42063: LD_INT 2
42065: ARRAY
42066: LESS
42067: IFFALSE 42105
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42069: LD_ADDR_VAR 0 6
42073: PUSH
42074: LD_VAR 0 6
42078: PPUSH
42079: LD_VAR 0 8
42083: PPUSH
42084: LD_VAR 0 7
42088: PUSH
42089: LD_VAR 0 9
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PPUSH
42098: CALL_OW 2
42102: ST_TO_ADDR
// break ;
42103: GO 42107
// end ; end ;
42105: GO 42044
42107: POP
42108: POP
// end ; end ;
42109: GO 41908
42111: POP
42112: POP
// if result and not asc then
42113: LD_VAR 0 6
42117: PUSH
42118: LD_VAR 0 4
42122: NOT
42123: AND
42124: IFFALSE 42199
// begin tmp := result ;
42126: LD_ADDR_VAR 0 9
42130: PUSH
42131: LD_VAR 0 6
42135: ST_TO_ADDR
// for i = tmp downto 1 do
42136: LD_ADDR_VAR 0 7
42140: PUSH
42141: DOUBLE
42142: LD_VAR 0 9
42146: INC
42147: ST_TO_ADDR
42148: LD_INT 1
42150: PUSH
42151: FOR_DOWNTO
42152: IFFALSE 42197
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
42154: LD_ADDR_VAR 0 6
42158: PUSH
42159: LD_VAR 0 6
42163: PPUSH
42164: LD_VAR 0 9
42168: PUSH
42169: LD_VAR 0 7
42173: MINUS
42174: PUSH
42175: LD_INT 1
42177: PLUS
42178: PPUSH
42179: LD_VAR 0 9
42183: PUSH
42184: LD_VAR 0 7
42188: ARRAY
42189: PPUSH
42190: CALL_OW 1
42194: ST_TO_ADDR
42195: GO 42151
42197: POP
42198: POP
// end ; tmp := [ ] ;
42199: LD_ADDR_VAR 0 9
42203: PUSH
42204: EMPTY
42205: ST_TO_ADDR
// if mode then
42206: LD_VAR 0 5
42210: IFFALSE 42279
// begin for i = 1 to result do
42212: LD_ADDR_VAR 0 7
42216: PUSH
42217: DOUBLE
42218: LD_INT 1
42220: DEC
42221: ST_TO_ADDR
42222: LD_VAR 0 6
42226: PUSH
42227: FOR_TO
42228: IFFALSE 42267
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
42230: LD_ADDR_VAR 0 9
42234: PUSH
42235: LD_VAR 0 9
42239: PPUSH
42240: LD_VAR 0 7
42244: PPUSH
42245: LD_VAR 0 6
42249: PUSH
42250: LD_VAR 0 7
42254: ARRAY
42255: PUSH
42256: LD_INT 1
42258: ARRAY
42259: PPUSH
42260: CALL_OW 1
42264: ST_TO_ADDR
42265: GO 42227
42267: POP
42268: POP
// result := tmp ;
42269: LD_ADDR_VAR 0 6
42273: PUSH
42274: LD_VAR 0 9
42278: ST_TO_ADDR
// end ; end ;
42279: LD_VAR 0 6
42283: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
42284: LD_INT 0
42286: PPUSH
42287: PPUSH
42288: PPUSH
42289: PPUSH
42290: PPUSH
42291: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
42292: LD_ADDR_VAR 0 5
42296: PUSH
42297: LD_INT 0
42299: PUSH
42300: LD_INT 0
42302: PUSH
42303: LD_INT 0
42305: PUSH
42306: EMPTY
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: LIST
42312: LIST
42313: ST_TO_ADDR
// if not x or not y then
42314: LD_VAR 0 2
42318: NOT
42319: PUSH
42320: LD_VAR 0 3
42324: NOT
42325: OR
42326: IFFALSE 42330
// exit ;
42328: GO 43980
// if not range then
42330: LD_VAR 0 4
42334: NOT
42335: IFFALSE 42345
// range := 10 ;
42337: LD_ADDR_VAR 0 4
42341: PUSH
42342: LD_INT 10
42344: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42345: LD_ADDR_VAR 0 8
42349: PUSH
42350: LD_INT 81
42352: PUSH
42353: LD_VAR 0 1
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: LD_INT 92
42364: PUSH
42365: LD_VAR 0 2
42369: PUSH
42370: LD_VAR 0 3
42374: PUSH
42375: LD_VAR 0 4
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: PUSH
42386: LD_INT 3
42388: PUSH
42389: LD_INT 21
42391: PUSH
42392: LD_INT 3
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: LIST
42407: PPUSH
42408: CALL_OW 69
42412: ST_TO_ADDR
// if not tmp then
42413: LD_VAR 0 8
42417: NOT
42418: IFFALSE 42422
// exit ;
42420: GO 43980
// for i in tmp do
42422: LD_ADDR_VAR 0 6
42426: PUSH
42427: LD_VAR 0 8
42431: PUSH
42432: FOR_IN
42433: IFFALSE 43955
// begin points := [ 0 , 0 , 0 ] ;
42435: LD_ADDR_VAR 0 9
42439: PUSH
42440: LD_INT 0
42442: PUSH
42443: LD_INT 0
42445: PUSH
42446: LD_INT 0
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: LIST
42453: ST_TO_ADDR
// bpoints := 1 ;
42454: LD_ADDR_VAR 0 10
42458: PUSH
42459: LD_INT 1
42461: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42462: LD_VAR 0 6
42466: PPUSH
42467: CALL_OW 247
42471: PUSH
42472: LD_INT 1
42474: DOUBLE
42475: EQUAL
42476: IFTRUE 42480
42478: GO 43058
42480: POP
// begin if GetClass ( i ) = 1 then
42481: LD_VAR 0 6
42485: PPUSH
42486: CALL_OW 257
42490: PUSH
42491: LD_INT 1
42493: EQUAL
42494: IFFALSE 42515
// points := [ 10 , 5 , 3 ] ;
42496: LD_ADDR_VAR 0 9
42500: PUSH
42501: LD_INT 10
42503: PUSH
42504: LD_INT 5
42506: PUSH
42507: LD_INT 3
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: LIST
42514: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42515: LD_VAR 0 6
42519: PPUSH
42520: CALL_OW 257
42524: PUSH
42525: LD_INT 2
42527: PUSH
42528: LD_INT 3
42530: PUSH
42531: LD_INT 4
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: LIST
42538: IN
42539: IFFALSE 42560
// points := [ 3 , 2 , 1 ] ;
42541: LD_ADDR_VAR 0 9
42545: PUSH
42546: LD_INT 3
42548: PUSH
42549: LD_INT 2
42551: PUSH
42552: LD_INT 1
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: LIST
42559: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42560: LD_VAR 0 6
42564: PPUSH
42565: CALL_OW 257
42569: PUSH
42570: LD_INT 5
42572: EQUAL
42573: IFFALSE 42594
// points := [ 130 , 5 , 2 ] ;
42575: LD_ADDR_VAR 0 9
42579: PUSH
42580: LD_INT 130
42582: PUSH
42583: LD_INT 5
42585: PUSH
42586: LD_INT 2
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: LIST
42593: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42594: LD_VAR 0 6
42598: PPUSH
42599: CALL_OW 257
42603: PUSH
42604: LD_INT 8
42606: EQUAL
42607: IFFALSE 42628
// points := [ 35 , 35 , 30 ] ;
42609: LD_ADDR_VAR 0 9
42613: PUSH
42614: LD_INT 35
42616: PUSH
42617: LD_INT 35
42619: PUSH
42620: LD_INT 30
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: LIST
42627: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42628: LD_VAR 0 6
42632: PPUSH
42633: CALL_OW 257
42637: PUSH
42638: LD_INT 9
42640: EQUAL
42641: IFFALSE 42662
// points := [ 20 , 55 , 40 ] ;
42643: LD_ADDR_VAR 0 9
42647: PUSH
42648: LD_INT 20
42650: PUSH
42651: LD_INT 55
42653: PUSH
42654: LD_INT 40
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: LIST
42661: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
42662: LD_VAR 0 6
42666: PPUSH
42667: CALL_OW 257
42671: PUSH
42672: LD_INT 12
42674: PUSH
42675: LD_INT 16
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: IN
42682: IFFALSE 42703
// points := [ 5 , 3 , 2 ] ;
42684: LD_ADDR_VAR 0 9
42688: PUSH
42689: LD_INT 5
42691: PUSH
42692: LD_INT 3
42694: PUSH
42695: LD_INT 2
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: LIST
42702: ST_TO_ADDR
// if GetClass ( i ) = 17 then
42703: LD_VAR 0 6
42707: PPUSH
42708: CALL_OW 257
42712: PUSH
42713: LD_INT 17
42715: EQUAL
42716: IFFALSE 42737
// points := [ 100 , 50 , 75 ] ;
42718: LD_ADDR_VAR 0 9
42722: PUSH
42723: LD_INT 100
42725: PUSH
42726: LD_INT 50
42728: PUSH
42729: LD_INT 75
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: LIST
42736: ST_TO_ADDR
// if GetClass ( i ) = 15 then
42737: LD_VAR 0 6
42741: PPUSH
42742: CALL_OW 257
42746: PUSH
42747: LD_INT 15
42749: EQUAL
42750: IFFALSE 42771
// points := [ 10 , 5 , 3 ] ;
42752: LD_ADDR_VAR 0 9
42756: PUSH
42757: LD_INT 10
42759: PUSH
42760: LD_INT 5
42762: PUSH
42763: LD_INT 3
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: LIST
42770: ST_TO_ADDR
// if GetClass ( i ) = 14 then
42771: LD_VAR 0 6
42775: PPUSH
42776: CALL_OW 257
42780: PUSH
42781: LD_INT 14
42783: EQUAL
42784: IFFALSE 42805
// points := [ 10 , 0 , 0 ] ;
42786: LD_ADDR_VAR 0 9
42790: PUSH
42791: LD_INT 10
42793: PUSH
42794: LD_INT 0
42796: PUSH
42797: LD_INT 0
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: LIST
42804: ST_TO_ADDR
// if GetClass ( i ) = 11 then
42805: LD_VAR 0 6
42809: PPUSH
42810: CALL_OW 257
42814: PUSH
42815: LD_INT 11
42817: EQUAL
42818: IFFALSE 42839
// points := [ 30 , 10 , 5 ] ;
42820: LD_ADDR_VAR 0 9
42824: PUSH
42825: LD_INT 30
42827: PUSH
42828: LD_INT 10
42830: PUSH
42831: LD_INT 5
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: LIST
42838: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
42839: LD_VAR 0 1
42843: PPUSH
42844: LD_INT 5
42846: PPUSH
42847: CALL_OW 321
42851: PUSH
42852: LD_INT 2
42854: EQUAL
42855: IFFALSE 42872
// bpoints := bpoints * 1.8 ;
42857: LD_ADDR_VAR 0 10
42861: PUSH
42862: LD_VAR 0 10
42866: PUSH
42867: LD_REAL  1.80000000000000E+0000
42870: MUL
42871: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
42872: LD_VAR 0 6
42876: PPUSH
42877: CALL_OW 257
42881: PUSH
42882: LD_INT 1
42884: PUSH
42885: LD_INT 2
42887: PUSH
42888: LD_INT 3
42890: PUSH
42891: LD_INT 4
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: IN
42900: PUSH
42901: LD_VAR 0 1
42905: PPUSH
42906: LD_INT 51
42908: PPUSH
42909: CALL_OW 321
42913: PUSH
42914: LD_INT 2
42916: EQUAL
42917: AND
42918: IFFALSE 42935
// bpoints := bpoints * 1.2 ;
42920: LD_ADDR_VAR 0 10
42924: PUSH
42925: LD_VAR 0 10
42929: PUSH
42930: LD_REAL  1.20000000000000E+0000
42933: MUL
42934: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
42935: LD_VAR 0 6
42939: PPUSH
42940: CALL_OW 257
42944: PUSH
42945: LD_INT 5
42947: PUSH
42948: LD_INT 7
42950: PUSH
42951: LD_INT 9
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: LIST
42958: IN
42959: PUSH
42960: LD_VAR 0 1
42964: PPUSH
42965: LD_INT 52
42967: PPUSH
42968: CALL_OW 321
42972: PUSH
42973: LD_INT 2
42975: EQUAL
42976: AND
42977: IFFALSE 42994
// bpoints := bpoints * 1.5 ;
42979: LD_ADDR_VAR 0 10
42983: PUSH
42984: LD_VAR 0 10
42988: PUSH
42989: LD_REAL  1.50000000000000E+0000
42992: MUL
42993: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
42994: LD_VAR 0 1
42998: PPUSH
42999: LD_INT 66
43001: PPUSH
43002: CALL_OW 321
43006: PUSH
43007: LD_INT 2
43009: EQUAL
43010: IFFALSE 43027
// bpoints := bpoints * 1.1 ;
43012: LD_ADDR_VAR 0 10
43016: PUSH
43017: LD_VAR 0 10
43021: PUSH
43022: LD_REAL  1.10000000000000E+0000
43025: MUL
43026: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
43027: LD_ADDR_VAR 0 10
43031: PUSH
43032: LD_VAR 0 10
43036: PUSH
43037: LD_VAR 0 6
43041: PPUSH
43042: LD_INT 1
43044: PPUSH
43045: CALL_OW 259
43049: PUSH
43050: LD_REAL  1.15000000000000E+0000
43053: MUL
43054: MUL
43055: ST_TO_ADDR
// end ; unit_vehicle :
43056: GO 43884
43058: LD_INT 2
43060: DOUBLE
43061: EQUAL
43062: IFTRUE 43066
43064: GO 43872
43066: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
43067: LD_VAR 0 6
43071: PPUSH
43072: CALL_OW 264
43076: PUSH
43077: LD_INT 2
43079: PUSH
43080: LD_INT 42
43082: PUSH
43083: LD_INT 24
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: LIST
43090: IN
43091: IFFALSE 43112
// points := [ 25 , 5 , 3 ] ;
43093: LD_ADDR_VAR 0 9
43097: PUSH
43098: LD_INT 25
43100: PUSH
43101: LD_INT 5
43103: PUSH
43104: LD_INT 3
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: LIST
43111: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
43112: LD_VAR 0 6
43116: PPUSH
43117: CALL_OW 264
43121: PUSH
43122: LD_INT 4
43124: PUSH
43125: LD_INT 43
43127: PUSH
43128: LD_INT 25
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: LIST
43135: IN
43136: IFFALSE 43157
// points := [ 40 , 15 , 5 ] ;
43138: LD_ADDR_VAR 0 9
43142: PUSH
43143: LD_INT 40
43145: PUSH
43146: LD_INT 15
43148: PUSH
43149: LD_INT 5
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: LIST
43156: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
43157: LD_VAR 0 6
43161: PPUSH
43162: CALL_OW 264
43166: PUSH
43167: LD_INT 3
43169: PUSH
43170: LD_INT 23
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: IN
43177: IFFALSE 43198
// points := [ 7 , 25 , 8 ] ;
43179: LD_ADDR_VAR 0 9
43183: PUSH
43184: LD_INT 7
43186: PUSH
43187: LD_INT 25
43189: PUSH
43190: LD_INT 8
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: LIST
43197: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
43198: LD_VAR 0 6
43202: PPUSH
43203: CALL_OW 264
43207: PUSH
43208: LD_INT 5
43210: PUSH
43211: LD_INT 27
43213: PUSH
43214: LD_INT 44
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: LIST
43221: IN
43222: IFFALSE 43243
// points := [ 14 , 50 , 16 ] ;
43224: LD_ADDR_VAR 0 9
43228: PUSH
43229: LD_INT 14
43231: PUSH
43232: LD_INT 50
43234: PUSH
43235: LD_INT 16
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: LIST
43242: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
43243: LD_VAR 0 6
43247: PPUSH
43248: CALL_OW 264
43252: PUSH
43253: LD_INT 6
43255: PUSH
43256: LD_INT 46
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: IN
43263: IFFALSE 43284
// points := [ 32 , 120 , 70 ] ;
43265: LD_ADDR_VAR 0 9
43269: PUSH
43270: LD_INT 32
43272: PUSH
43273: LD_INT 120
43275: PUSH
43276: LD_INT 70
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: LIST
43283: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
43284: LD_VAR 0 6
43288: PPUSH
43289: CALL_OW 264
43293: PUSH
43294: LD_INT 7
43296: PUSH
43297: LD_INT 28
43299: PUSH
43300: LD_INT 45
43302: PUSH
43303: LD_INT 92
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: IN
43312: IFFALSE 43333
// points := [ 35 , 20 , 45 ] ;
43314: LD_ADDR_VAR 0 9
43318: PUSH
43319: LD_INT 35
43321: PUSH
43322: LD_INT 20
43324: PUSH
43325: LD_INT 45
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: LIST
43332: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
43333: LD_VAR 0 6
43337: PPUSH
43338: CALL_OW 264
43342: PUSH
43343: LD_INT 47
43345: PUSH
43346: EMPTY
43347: LIST
43348: IN
43349: IFFALSE 43370
// points := [ 67 , 45 , 75 ] ;
43351: LD_ADDR_VAR 0 9
43355: PUSH
43356: LD_INT 67
43358: PUSH
43359: LD_INT 45
43361: PUSH
43362: LD_INT 75
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: LIST
43369: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
43370: LD_VAR 0 6
43374: PPUSH
43375: CALL_OW 264
43379: PUSH
43380: LD_INT 26
43382: PUSH
43383: EMPTY
43384: LIST
43385: IN
43386: IFFALSE 43407
// points := [ 120 , 30 , 80 ] ;
43388: LD_ADDR_VAR 0 9
43392: PUSH
43393: LD_INT 120
43395: PUSH
43396: LD_INT 30
43398: PUSH
43399: LD_INT 80
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: LIST
43406: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
43407: LD_VAR 0 6
43411: PPUSH
43412: CALL_OW 264
43416: PUSH
43417: LD_INT 22
43419: PUSH
43420: EMPTY
43421: LIST
43422: IN
43423: IFFALSE 43444
// points := [ 40 , 1 , 1 ] ;
43425: LD_ADDR_VAR 0 9
43429: PUSH
43430: LD_INT 40
43432: PUSH
43433: LD_INT 1
43435: PUSH
43436: LD_INT 1
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: LIST
43443: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
43444: LD_VAR 0 6
43448: PPUSH
43449: CALL_OW 264
43453: PUSH
43454: LD_INT 29
43456: PUSH
43457: EMPTY
43458: LIST
43459: IN
43460: IFFALSE 43481
// points := [ 70 , 200 , 400 ] ;
43462: LD_ADDR_VAR 0 9
43466: PUSH
43467: LD_INT 70
43469: PUSH
43470: LD_INT 200
43472: PUSH
43473: LD_INT 400
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: LIST
43480: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43481: LD_VAR 0 6
43485: PPUSH
43486: CALL_OW 264
43490: PUSH
43491: LD_INT 14
43493: PUSH
43494: LD_INT 53
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: IN
43501: IFFALSE 43522
// points := [ 40 , 10 , 20 ] ;
43503: LD_ADDR_VAR 0 9
43507: PUSH
43508: LD_INT 40
43510: PUSH
43511: LD_INT 10
43513: PUSH
43514: LD_INT 20
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: LIST
43521: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43522: LD_VAR 0 6
43526: PPUSH
43527: CALL_OW 264
43531: PUSH
43532: LD_INT 9
43534: PUSH
43535: EMPTY
43536: LIST
43537: IN
43538: IFFALSE 43559
// points := [ 5 , 70 , 20 ] ;
43540: LD_ADDR_VAR 0 9
43544: PUSH
43545: LD_INT 5
43547: PUSH
43548: LD_INT 70
43550: PUSH
43551: LD_INT 20
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: LIST
43558: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43559: LD_VAR 0 6
43563: PPUSH
43564: CALL_OW 264
43568: PUSH
43569: LD_INT 10
43571: PUSH
43572: EMPTY
43573: LIST
43574: IN
43575: IFFALSE 43596
// points := [ 35 , 110 , 70 ] ;
43577: LD_ADDR_VAR 0 9
43581: PUSH
43582: LD_INT 35
43584: PUSH
43585: LD_INT 110
43587: PUSH
43588: LD_INT 70
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: LIST
43595: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43596: LD_VAR 0 6
43600: PPUSH
43601: CALL_OW 265
43605: PUSH
43606: LD_INT 25
43608: EQUAL
43609: IFFALSE 43630
// points := [ 80 , 65 , 100 ] ;
43611: LD_ADDR_VAR 0 9
43615: PUSH
43616: LD_INT 80
43618: PUSH
43619: LD_INT 65
43621: PUSH
43622: LD_INT 100
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: LIST
43629: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43630: LD_VAR 0 6
43634: PPUSH
43635: CALL_OW 263
43639: PUSH
43640: LD_INT 1
43642: EQUAL
43643: IFFALSE 43678
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43645: LD_ADDR_VAR 0 10
43649: PUSH
43650: LD_VAR 0 10
43654: PUSH
43655: LD_VAR 0 6
43659: PPUSH
43660: CALL_OW 311
43664: PPUSH
43665: LD_INT 3
43667: PPUSH
43668: CALL_OW 259
43672: PUSH
43673: LD_INT 4
43675: MUL
43676: MUL
43677: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
43678: LD_VAR 0 6
43682: PPUSH
43683: CALL_OW 263
43687: PUSH
43688: LD_INT 2
43690: EQUAL
43691: IFFALSE 43742
// begin j := IsControledBy ( i ) ;
43693: LD_ADDR_VAR 0 7
43697: PUSH
43698: LD_VAR 0 6
43702: PPUSH
43703: CALL_OW 312
43707: ST_TO_ADDR
// if j then
43708: LD_VAR 0 7
43712: IFFALSE 43742
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
43714: LD_ADDR_VAR 0 10
43718: PUSH
43719: LD_VAR 0 10
43723: PUSH
43724: LD_VAR 0 7
43728: PPUSH
43729: LD_INT 3
43731: PPUSH
43732: CALL_OW 259
43736: PUSH
43737: LD_INT 3
43739: MUL
43740: MUL
43741: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
43742: LD_VAR 0 6
43746: PPUSH
43747: CALL_OW 264
43751: PUSH
43752: LD_INT 5
43754: PUSH
43755: LD_INT 6
43757: PUSH
43758: LD_INT 46
43760: PUSH
43761: LD_INT 44
43763: PUSH
43764: LD_INT 47
43766: PUSH
43767: LD_INT 45
43769: PUSH
43770: LD_INT 28
43772: PUSH
43773: LD_INT 7
43775: PUSH
43776: LD_INT 27
43778: PUSH
43779: LD_INT 29
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: IN
43794: PUSH
43795: LD_VAR 0 1
43799: PPUSH
43800: LD_INT 52
43802: PPUSH
43803: CALL_OW 321
43807: PUSH
43808: LD_INT 2
43810: EQUAL
43811: AND
43812: IFFALSE 43829
// bpoints := bpoints * 1.2 ;
43814: LD_ADDR_VAR 0 10
43818: PUSH
43819: LD_VAR 0 10
43823: PUSH
43824: LD_REAL  1.20000000000000E+0000
43827: MUL
43828: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
43829: LD_VAR 0 6
43833: PPUSH
43834: CALL_OW 264
43838: PUSH
43839: LD_INT 6
43841: PUSH
43842: LD_INT 46
43844: PUSH
43845: LD_INT 47
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: LIST
43852: IN
43853: IFFALSE 43870
// bpoints := bpoints * 1.2 ;
43855: LD_ADDR_VAR 0 10
43859: PUSH
43860: LD_VAR 0 10
43864: PUSH
43865: LD_REAL  1.20000000000000E+0000
43868: MUL
43869: ST_TO_ADDR
// end ; unit_building :
43870: GO 43884
43872: LD_INT 3
43874: DOUBLE
43875: EQUAL
43876: IFTRUE 43880
43878: GO 43883
43880: POP
// ; end ;
43881: GO 43884
43883: POP
// for j = 1 to 3 do
43884: LD_ADDR_VAR 0 7
43888: PUSH
43889: DOUBLE
43890: LD_INT 1
43892: DEC
43893: ST_TO_ADDR
43894: LD_INT 3
43896: PUSH
43897: FOR_TO
43898: IFFALSE 43951
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
43900: LD_ADDR_VAR 0 5
43904: PUSH
43905: LD_VAR 0 5
43909: PPUSH
43910: LD_VAR 0 7
43914: PPUSH
43915: LD_VAR 0 5
43919: PUSH
43920: LD_VAR 0 7
43924: ARRAY
43925: PUSH
43926: LD_VAR 0 9
43930: PUSH
43931: LD_VAR 0 7
43935: ARRAY
43936: PUSH
43937: LD_VAR 0 10
43941: MUL
43942: PLUS
43943: PPUSH
43944: CALL_OW 1
43948: ST_TO_ADDR
43949: GO 43897
43951: POP
43952: POP
// end ;
43953: GO 42432
43955: POP
43956: POP
// result := Replace ( result , 4 , tmp ) ;
43957: LD_ADDR_VAR 0 5
43961: PUSH
43962: LD_VAR 0 5
43966: PPUSH
43967: LD_INT 4
43969: PPUSH
43970: LD_VAR 0 8
43974: PPUSH
43975: CALL_OW 1
43979: ST_TO_ADDR
// end ;
43980: LD_VAR 0 5
43984: RET
// export function DangerAtRange ( unit , range ) ; begin
43985: LD_INT 0
43987: PPUSH
// if not unit then
43988: LD_VAR 0 1
43992: NOT
43993: IFFALSE 43997
// exit ;
43995: GO 44042
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
43997: LD_ADDR_VAR 0 3
44001: PUSH
44002: LD_VAR 0 1
44006: PPUSH
44007: CALL_OW 255
44011: PPUSH
44012: LD_VAR 0 1
44016: PPUSH
44017: CALL_OW 250
44021: PPUSH
44022: LD_VAR 0 1
44026: PPUSH
44027: CALL_OW 251
44031: PPUSH
44032: LD_VAR 0 2
44036: PPUSH
44037: CALL 42284 0 4
44041: ST_TO_ADDR
// end ;
44042: LD_VAR 0 3
44046: RET
// export function DangerInArea ( side , area ) ; begin
44047: LD_INT 0
44049: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
44050: LD_ADDR_VAR 0 3
44054: PUSH
44055: LD_VAR 0 2
44059: PPUSH
44060: LD_INT 81
44062: PUSH
44063: LD_VAR 0 1
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: PPUSH
44072: CALL_OW 70
44076: ST_TO_ADDR
// end ;
44077: LD_VAR 0 3
44081: RET
// export function IsExtension ( b ) ; begin
44082: LD_INT 0
44084: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
44085: LD_ADDR_VAR 0 2
44089: PUSH
44090: LD_VAR 0 1
44094: PUSH
44095: LD_INT 23
44097: PUSH
44098: LD_INT 20
44100: PUSH
44101: LD_INT 22
44103: PUSH
44104: LD_INT 17
44106: PUSH
44107: LD_INT 24
44109: PUSH
44110: LD_INT 21
44112: PUSH
44113: LD_INT 19
44115: PUSH
44116: LD_INT 16
44118: PUSH
44119: LD_INT 25
44121: PUSH
44122: LD_INT 18
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: IN
44137: ST_TO_ADDR
// end ;
44138: LD_VAR 0 2
44142: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
44143: LD_INT 0
44145: PPUSH
44146: PPUSH
44147: PPUSH
// result := [ ] ;
44148: LD_ADDR_VAR 0 4
44152: PUSH
44153: EMPTY
44154: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
44155: LD_ADDR_VAR 0 5
44159: PUSH
44160: LD_VAR 0 2
44164: PPUSH
44165: LD_INT 21
44167: PUSH
44168: LD_INT 3
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: PPUSH
44175: CALL_OW 70
44179: ST_TO_ADDR
// if not tmp then
44180: LD_VAR 0 5
44184: NOT
44185: IFFALSE 44189
// exit ;
44187: GO 44253
// if checkLink then
44189: LD_VAR 0 3
44193: IFFALSE 44243
// begin for i in tmp do
44195: LD_ADDR_VAR 0 6
44199: PUSH
44200: LD_VAR 0 5
44204: PUSH
44205: FOR_IN
44206: IFFALSE 44241
// if GetBase ( i ) <> base then
44208: LD_VAR 0 6
44212: PPUSH
44213: CALL_OW 274
44217: PUSH
44218: LD_VAR 0 1
44222: NONEQUAL
44223: IFFALSE 44239
// ComLinkToBase ( base , i ) ;
44225: LD_VAR 0 1
44229: PPUSH
44230: LD_VAR 0 6
44234: PPUSH
44235: CALL_OW 169
44239: GO 44205
44241: POP
44242: POP
// end ; result := tmp ;
44243: LD_ADDR_VAR 0 4
44247: PUSH
44248: LD_VAR 0 5
44252: ST_TO_ADDR
// end ;
44253: LD_VAR 0 4
44257: RET
// export function ComComplete ( units , b ) ; var i ; begin
44258: LD_INT 0
44260: PPUSH
44261: PPUSH
// if not units then
44262: LD_VAR 0 1
44266: NOT
44267: IFFALSE 44271
// exit ;
44269: GO 44361
// for i in units do
44271: LD_ADDR_VAR 0 4
44275: PUSH
44276: LD_VAR 0 1
44280: PUSH
44281: FOR_IN
44282: IFFALSE 44359
// if BuildingStatus ( b ) = bs_build then
44284: LD_VAR 0 2
44288: PPUSH
44289: CALL_OW 461
44293: PUSH
44294: LD_INT 1
44296: EQUAL
44297: IFFALSE 44357
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
44299: LD_VAR 0 4
44303: PPUSH
44304: LD_STRING h
44306: PUSH
44307: LD_VAR 0 2
44311: PPUSH
44312: CALL_OW 250
44316: PUSH
44317: LD_VAR 0 2
44321: PPUSH
44322: CALL_OW 251
44326: PUSH
44327: LD_VAR 0 2
44331: PUSH
44332: LD_INT 0
44334: PUSH
44335: LD_INT 0
44337: PUSH
44338: LD_INT 0
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: LIST
44345: LIST
44346: LIST
44347: LIST
44348: LIST
44349: PUSH
44350: EMPTY
44351: LIST
44352: PPUSH
44353: CALL_OW 446
44357: GO 44281
44359: POP
44360: POP
// end ;
44361: LD_VAR 0 3
44365: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
44366: LD_INT 0
44368: PPUSH
44369: PPUSH
44370: PPUSH
44371: PPUSH
44372: PPUSH
44373: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
44374: LD_VAR 0 1
44378: NOT
44379: PUSH
44380: LD_VAR 0 1
44384: PPUSH
44385: CALL_OW 263
44389: PUSH
44390: LD_INT 2
44392: NONEQUAL
44393: OR
44394: IFFALSE 44398
// exit ;
44396: GO 44714
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
44398: LD_ADDR_VAR 0 6
44402: PUSH
44403: LD_INT 22
44405: PUSH
44406: LD_VAR 0 1
44410: PPUSH
44411: CALL_OW 255
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 2
44422: PUSH
44423: LD_INT 30
44425: PUSH
44426: LD_INT 36
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 34
44435: PUSH
44436: LD_INT 31
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: LIST
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PPUSH
44452: CALL_OW 69
44456: ST_TO_ADDR
// if not tmp then
44457: LD_VAR 0 6
44461: NOT
44462: IFFALSE 44466
// exit ;
44464: GO 44714
// result := [ ] ;
44466: LD_ADDR_VAR 0 2
44470: PUSH
44471: EMPTY
44472: ST_TO_ADDR
// for i in tmp do
44473: LD_ADDR_VAR 0 3
44477: PUSH
44478: LD_VAR 0 6
44482: PUSH
44483: FOR_IN
44484: IFFALSE 44555
// begin t := UnitsInside ( i ) ;
44486: LD_ADDR_VAR 0 4
44490: PUSH
44491: LD_VAR 0 3
44495: PPUSH
44496: CALL_OW 313
44500: ST_TO_ADDR
// if t then
44501: LD_VAR 0 4
44505: IFFALSE 44553
// for j in t do
44507: LD_ADDR_VAR 0 7
44511: PUSH
44512: LD_VAR 0 4
44516: PUSH
44517: FOR_IN
44518: IFFALSE 44551
// result := Replace ( result , result + 1 , j ) ;
44520: LD_ADDR_VAR 0 2
44524: PUSH
44525: LD_VAR 0 2
44529: PPUSH
44530: LD_VAR 0 2
44534: PUSH
44535: LD_INT 1
44537: PLUS
44538: PPUSH
44539: LD_VAR 0 7
44543: PPUSH
44544: CALL_OW 1
44548: ST_TO_ADDR
44549: GO 44517
44551: POP
44552: POP
// end ;
44553: GO 44483
44555: POP
44556: POP
// if not result then
44557: LD_VAR 0 2
44561: NOT
44562: IFFALSE 44566
// exit ;
44564: GO 44714
// mech := result [ 1 ] ;
44566: LD_ADDR_VAR 0 5
44570: PUSH
44571: LD_VAR 0 2
44575: PUSH
44576: LD_INT 1
44578: ARRAY
44579: ST_TO_ADDR
// if result > 1 then
44580: LD_VAR 0 2
44584: PUSH
44585: LD_INT 1
44587: GREATER
44588: IFFALSE 44700
// begin for i = 2 to result do
44590: LD_ADDR_VAR 0 3
44594: PUSH
44595: DOUBLE
44596: LD_INT 2
44598: DEC
44599: ST_TO_ADDR
44600: LD_VAR 0 2
44604: PUSH
44605: FOR_TO
44606: IFFALSE 44698
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44608: LD_ADDR_VAR 0 4
44612: PUSH
44613: LD_VAR 0 2
44617: PUSH
44618: LD_VAR 0 3
44622: ARRAY
44623: PPUSH
44624: LD_INT 3
44626: PPUSH
44627: CALL_OW 259
44631: PUSH
44632: LD_VAR 0 2
44636: PUSH
44637: LD_VAR 0 3
44641: ARRAY
44642: PPUSH
44643: CALL_OW 432
44647: MINUS
44648: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44649: LD_VAR 0 4
44653: PUSH
44654: LD_VAR 0 5
44658: PPUSH
44659: LD_INT 3
44661: PPUSH
44662: CALL_OW 259
44666: PUSH
44667: LD_VAR 0 5
44671: PPUSH
44672: CALL_OW 432
44676: MINUS
44677: GREATEREQUAL
44678: IFFALSE 44696
// mech := result [ i ] ;
44680: LD_ADDR_VAR 0 5
44684: PUSH
44685: LD_VAR 0 2
44689: PUSH
44690: LD_VAR 0 3
44694: ARRAY
44695: ST_TO_ADDR
// end ;
44696: GO 44605
44698: POP
44699: POP
// end ; ComLinkTo ( vehicle , mech ) ;
44700: LD_VAR 0 1
44704: PPUSH
44705: LD_VAR 0 5
44709: PPUSH
44710: CALL_OW 135
// end ;
44714: LD_VAR 0 2
44718: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
44719: LD_INT 0
44721: PPUSH
44722: PPUSH
44723: PPUSH
44724: PPUSH
44725: PPUSH
44726: PPUSH
44727: PPUSH
44728: PPUSH
44729: PPUSH
44730: PPUSH
44731: PPUSH
44732: PPUSH
44733: PPUSH
// result := [ ] ;
44734: LD_ADDR_VAR 0 7
44738: PUSH
44739: EMPTY
44740: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
44741: LD_VAR 0 1
44745: PPUSH
44746: CALL_OW 266
44750: PUSH
44751: LD_INT 0
44753: PUSH
44754: LD_INT 1
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: IN
44761: NOT
44762: IFFALSE 44766
// exit ;
44764: GO 46400
// if name then
44766: LD_VAR 0 3
44770: IFFALSE 44786
// SetBName ( base_dep , name ) ;
44772: LD_VAR 0 1
44776: PPUSH
44777: LD_VAR 0 3
44781: PPUSH
44782: CALL_OW 500
// base := GetBase ( base_dep ) ;
44786: LD_ADDR_VAR 0 15
44790: PUSH
44791: LD_VAR 0 1
44795: PPUSH
44796: CALL_OW 274
44800: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
44801: LD_ADDR_VAR 0 16
44805: PUSH
44806: LD_VAR 0 1
44810: PPUSH
44811: CALL_OW 255
44815: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
44816: LD_ADDR_VAR 0 17
44820: PUSH
44821: LD_VAR 0 1
44825: PPUSH
44826: CALL_OW 248
44830: ST_TO_ADDR
// if sources then
44831: LD_VAR 0 5
44835: IFFALSE 44882
// for i = 1 to 3 do
44837: LD_ADDR_VAR 0 8
44841: PUSH
44842: DOUBLE
44843: LD_INT 1
44845: DEC
44846: ST_TO_ADDR
44847: LD_INT 3
44849: PUSH
44850: FOR_TO
44851: IFFALSE 44880
// AddResourceType ( base , i , sources [ i ] ) ;
44853: LD_VAR 0 15
44857: PPUSH
44858: LD_VAR 0 8
44862: PPUSH
44863: LD_VAR 0 5
44867: PUSH
44868: LD_VAR 0 8
44872: ARRAY
44873: PPUSH
44874: CALL_OW 276
44878: GO 44850
44880: POP
44881: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
44882: LD_ADDR_VAR 0 18
44886: PUSH
44887: LD_VAR 0 15
44891: PPUSH
44892: LD_VAR 0 2
44896: PPUSH
44897: LD_INT 1
44899: PPUSH
44900: CALL 44143 0 3
44904: ST_TO_ADDR
// InitHc ;
44905: CALL_OW 19
// InitUc ;
44909: CALL_OW 18
// uc_side := side ;
44913: LD_ADDR_OWVAR 20
44917: PUSH
44918: LD_VAR 0 16
44922: ST_TO_ADDR
// uc_nation := nation ;
44923: LD_ADDR_OWVAR 21
44927: PUSH
44928: LD_VAR 0 17
44932: ST_TO_ADDR
// if buildings then
44933: LD_VAR 0 18
44937: IFFALSE 46259
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
44939: LD_ADDR_VAR 0 19
44943: PUSH
44944: LD_VAR 0 18
44948: PPUSH
44949: LD_INT 2
44951: PUSH
44952: LD_INT 30
44954: PUSH
44955: LD_INT 29
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 30
44964: PUSH
44965: LD_INT 30
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: LIST
44976: PPUSH
44977: CALL_OW 72
44981: ST_TO_ADDR
// if tmp then
44982: LD_VAR 0 19
44986: IFFALSE 45034
// for i in tmp do
44988: LD_ADDR_VAR 0 8
44992: PUSH
44993: LD_VAR 0 19
44997: PUSH
44998: FOR_IN
44999: IFFALSE 45032
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
45001: LD_VAR 0 8
45005: PPUSH
45006: CALL_OW 250
45010: PPUSH
45011: LD_VAR 0 8
45015: PPUSH
45016: CALL_OW 251
45020: PPUSH
45021: LD_VAR 0 16
45025: PPUSH
45026: CALL_OW 441
45030: GO 44998
45032: POP
45033: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
45034: LD_VAR 0 18
45038: PPUSH
45039: LD_INT 2
45041: PUSH
45042: LD_INT 30
45044: PUSH
45045: LD_INT 32
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 30
45054: PUSH
45055: LD_INT 33
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: LIST
45066: PPUSH
45067: CALL_OW 72
45071: IFFALSE 45159
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
45073: LD_ADDR_VAR 0 8
45077: PUSH
45078: LD_VAR 0 18
45082: PPUSH
45083: LD_INT 2
45085: PUSH
45086: LD_INT 30
45088: PUSH
45089: LD_INT 32
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 30
45098: PUSH
45099: LD_INT 33
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: LIST
45110: PPUSH
45111: CALL_OW 72
45115: PUSH
45116: FOR_IN
45117: IFFALSE 45157
// begin if not GetBWeapon ( i ) then
45119: LD_VAR 0 8
45123: PPUSH
45124: CALL_OW 269
45128: NOT
45129: IFFALSE 45155
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
45131: LD_VAR 0 8
45135: PPUSH
45136: LD_VAR 0 8
45140: PPUSH
45141: LD_VAR 0 2
45145: PPUSH
45146: CALL 46405 0 2
45150: PPUSH
45151: CALL_OW 431
// end ;
45155: GO 45116
45157: POP
45158: POP
// end ; for i = 1 to personel do
45159: LD_ADDR_VAR 0 8
45163: PUSH
45164: DOUBLE
45165: LD_INT 1
45167: DEC
45168: ST_TO_ADDR
45169: LD_VAR 0 6
45173: PUSH
45174: FOR_TO
45175: IFFALSE 46239
// begin if i > 4 then
45177: LD_VAR 0 8
45181: PUSH
45182: LD_INT 4
45184: GREATER
45185: IFFALSE 45189
// break ;
45187: GO 46239
// case i of 1 :
45189: LD_VAR 0 8
45193: PUSH
45194: LD_INT 1
45196: DOUBLE
45197: EQUAL
45198: IFTRUE 45202
45200: GO 45282
45202: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
45203: LD_ADDR_VAR 0 12
45207: PUSH
45208: LD_VAR 0 18
45212: PPUSH
45213: LD_INT 22
45215: PUSH
45216: LD_VAR 0 16
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 58
45227: PUSH
45228: EMPTY
45229: LIST
45230: PUSH
45231: LD_INT 2
45233: PUSH
45234: LD_INT 30
45236: PUSH
45237: LD_INT 32
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 30
45246: PUSH
45247: LD_INT 4
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 30
45256: PUSH
45257: LD_INT 5
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: LIST
45274: PPUSH
45275: CALL_OW 72
45279: ST_TO_ADDR
45280: GO 45504
45282: LD_INT 2
45284: DOUBLE
45285: EQUAL
45286: IFTRUE 45290
45288: GO 45352
45290: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
45291: LD_ADDR_VAR 0 12
45295: PUSH
45296: LD_VAR 0 18
45300: PPUSH
45301: LD_INT 22
45303: PUSH
45304: LD_VAR 0 16
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 2
45315: PUSH
45316: LD_INT 30
45318: PUSH
45319: LD_INT 0
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 30
45328: PUSH
45329: LD_INT 1
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: LIST
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PPUSH
45345: CALL_OW 72
45349: ST_TO_ADDR
45350: GO 45504
45352: LD_INT 3
45354: DOUBLE
45355: EQUAL
45356: IFTRUE 45360
45358: GO 45422
45360: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
45361: LD_ADDR_VAR 0 12
45365: PUSH
45366: LD_VAR 0 18
45370: PPUSH
45371: LD_INT 22
45373: PUSH
45374: LD_VAR 0 16
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 2
45385: PUSH
45386: LD_INT 30
45388: PUSH
45389: LD_INT 2
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 30
45398: PUSH
45399: LD_INT 3
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: LIST
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PPUSH
45415: CALL_OW 72
45419: ST_TO_ADDR
45420: GO 45504
45422: LD_INT 4
45424: DOUBLE
45425: EQUAL
45426: IFTRUE 45430
45428: GO 45503
45430: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
45431: LD_ADDR_VAR 0 12
45435: PUSH
45436: LD_VAR 0 18
45440: PPUSH
45441: LD_INT 22
45443: PUSH
45444: LD_VAR 0 16
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 2
45455: PUSH
45456: LD_INT 30
45458: PUSH
45459: LD_INT 6
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 30
45468: PUSH
45469: LD_INT 7
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 30
45478: PUSH
45479: LD_INT 8
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PPUSH
45496: CALL_OW 72
45500: ST_TO_ADDR
45501: GO 45504
45503: POP
// if i = 1 then
45504: LD_VAR 0 8
45508: PUSH
45509: LD_INT 1
45511: EQUAL
45512: IFFALSE 45623
// begin tmp := [ ] ;
45514: LD_ADDR_VAR 0 19
45518: PUSH
45519: EMPTY
45520: ST_TO_ADDR
// for j in f do
45521: LD_ADDR_VAR 0 9
45525: PUSH
45526: LD_VAR 0 12
45530: PUSH
45531: FOR_IN
45532: IFFALSE 45605
// if GetBType ( j ) = b_bunker then
45534: LD_VAR 0 9
45538: PPUSH
45539: CALL_OW 266
45543: PUSH
45544: LD_INT 32
45546: EQUAL
45547: IFFALSE 45574
// tmp := Insert ( tmp , 1 , j ) else
45549: LD_ADDR_VAR 0 19
45553: PUSH
45554: LD_VAR 0 19
45558: PPUSH
45559: LD_INT 1
45561: PPUSH
45562: LD_VAR 0 9
45566: PPUSH
45567: CALL_OW 2
45571: ST_TO_ADDR
45572: GO 45603
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45574: LD_ADDR_VAR 0 19
45578: PUSH
45579: LD_VAR 0 19
45583: PPUSH
45584: LD_VAR 0 19
45588: PUSH
45589: LD_INT 1
45591: PLUS
45592: PPUSH
45593: LD_VAR 0 9
45597: PPUSH
45598: CALL_OW 2
45602: ST_TO_ADDR
45603: GO 45531
45605: POP
45606: POP
// if tmp then
45607: LD_VAR 0 19
45611: IFFALSE 45623
// f := tmp ;
45613: LD_ADDR_VAR 0 12
45617: PUSH
45618: LD_VAR 0 19
45622: ST_TO_ADDR
// end ; x := personel [ i ] ;
45623: LD_ADDR_VAR 0 13
45627: PUSH
45628: LD_VAR 0 6
45632: PUSH
45633: LD_VAR 0 8
45637: ARRAY
45638: ST_TO_ADDR
// if x = - 1 then
45639: LD_VAR 0 13
45643: PUSH
45644: LD_INT 1
45646: NEG
45647: EQUAL
45648: IFFALSE 45857
// begin for j in f do
45650: LD_ADDR_VAR 0 9
45654: PUSH
45655: LD_VAR 0 12
45659: PUSH
45660: FOR_IN
45661: IFFALSE 45853
// repeat InitHc ;
45663: CALL_OW 19
// if GetBType ( j ) = b_barracks then
45667: LD_VAR 0 9
45671: PPUSH
45672: CALL_OW 266
45676: PUSH
45677: LD_INT 5
45679: EQUAL
45680: IFFALSE 45750
// begin if UnitsInside ( j ) < 3 then
45682: LD_VAR 0 9
45686: PPUSH
45687: CALL_OW 313
45691: PUSH
45692: LD_INT 3
45694: LESS
45695: IFFALSE 45731
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45697: LD_INT 0
45699: PPUSH
45700: LD_INT 5
45702: PUSH
45703: LD_INT 8
45705: PUSH
45706: LD_INT 9
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: LIST
45713: PUSH
45714: LD_VAR 0 17
45718: ARRAY
45719: PPUSH
45720: LD_VAR 0 4
45724: PPUSH
45725: CALL_OW 380
45729: GO 45748
// PrepareHuman ( false , i , skill ) ;
45731: LD_INT 0
45733: PPUSH
45734: LD_VAR 0 8
45738: PPUSH
45739: LD_VAR 0 4
45743: PPUSH
45744: CALL_OW 380
// end else
45748: GO 45767
// PrepareHuman ( false , i , skill ) ;
45750: LD_INT 0
45752: PPUSH
45753: LD_VAR 0 8
45757: PPUSH
45758: LD_VAR 0 4
45762: PPUSH
45763: CALL_OW 380
// un := CreateHuman ;
45767: LD_ADDR_VAR 0 14
45771: PUSH
45772: CALL_OW 44
45776: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45777: LD_ADDR_VAR 0 7
45781: PUSH
45782: LD_VAR 0 7
45786: PPUSH
45787: LD_INT 1
45789: PPUSH
45790: LD_VAR 0 14
45794: PPUSH
45795: CALL_OW 2
45799: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
45800: LD_VAR 0 14
45804: PPUSH
45805: LD_VAR 0 9
45809: PPUSH
45810: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
45814: LD_VAR 0 9
45818: PPUSH
45819: CALL_OW 313
45823: PUSH
45824: LD_INT 6
45826: EQUAL
45827: PUSH
45828: LD_VAR 0 9
45832: PPUSH
45833: CALL_OW 266
45837: PUSH
45838: LD_INT 32
45840: PUSH
45841: LD_INT 31
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: IN
45848: OR
45849: IFFALSE 45663
45851: GO 45660
45853: POP
45854: POP
// end else
45855: GO 46237
// for j = 1 to x do
45857: LD_ADDR_VAR 0 9
45861: PUSH
45862: DOUBLE
45863: LD_INT 1
45865: DEC
45866: ST_TO_ADDR
45867: LD_VAR 0 13
45871: PUSH
45872: FOR_TO
45873: IFFALSE 46235
// begin InitHc ;
45875: CALL_OW 19
// if not f then
45879: LD_VAR 0 12
45883: NOT
45884: IFFALSE 45973
// begin PrepareHuman ( false , i , skill ) ;
45886: LD_INT 0
45888: PPUSH
45889: LD_VAR 0 8
45893: PPUSH
45894: LD_VAR 0 4
45898: PPUSH
45899: CALL_OW 380
// un := CreateHuman ;
45903: LD_ADDR_VAR 0 14
45907: PUSH
45908: CALL_OW 44
45912: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45913: LD_ADDR_VAR 0 7
45917: PUSH
45918: LD_VAR 0 7
45922: PPUSH
45923: LD_INT 1
45925: PPUSH
45926: LD_VAR 0 14
45930: PPUSH
45931: CALL_OW 2
45935: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45936: LD_VAR 0 14
45940: PPUSH
45941: LD_VAR 0 1
45945: PPUSH
45946: CALL_OW 250
45950: PPUSH
45951: LD_VAR 0 1
45955: PPUSH
45956: CALL_OW 251
45960: PPUSH
45961: LD_INT 10
45963: PPUSH
45964: LD_INT 0
45966: PPUSH
45967: CALL_OW 50
// continue ;
45971: GO 45872
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
45973: LD_VAR 0 12
45977: PUSH
45978: LD_INT 1
45980: ARRAY
45981: PPUSH
45982: CALL_OW 313
45986: PUSH
45987: LD_VAR 0 12
45991: PUSH
45992: LD_INT 1
45994: ARRAY
45995: PPUSH
45996: CALL_OW 266
46000: PUSH
46001: LD_INT 32
46003: PUSH
46004: LD_INT 31
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: IN
46011: AND
46012: PUSH
46013: LD_VAR 0 12
46017: PUSH
46018: LD_INT 1
46020: ARRAY
46021: PPUSH
46022: CALL_OW 313
46026: PUSH
46027: LD_INT 6
46029: EQUAL
46030: OR
46031: IFFALSE 46051
// f := Delete ( f , 1 ) ;
46033: LD_ADDR_VAR 0 12
46037: PUSH
46038: LD_VAR 0 12
46042: PPUSH
46043: LD_INT 1
46045: PPUSH
46046: CALL_OW 3
46050: ST_TO_ADDR
// if not f then
46051: LD_VAR 0 12
46055: NOT
46056: IFFALSE 46074
// begin x := x + 2 ;
46058: LD_ADDR_VAR 0 13
46062: PUSH
46063: LD_VAR 0 13
46067: PUSH
46068: LD_INT 2
46070: PLUS
46071: ST_TO_ADDR
// continue ;
46072: GO 45872
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
46074: LD_VAR 0 12
46078: PUSH
46079: LD_INT 1
46081: ARRAY
46082: PPUSH
46083: CALL_OW 266
46087: PUSH
46088: LD_INT 5
46090: EQUAL
46091: IFFALSE 46165
// begin if UnitsInside ( f [ 1 ] ) < 3 then
46093: LD_VAR 0 12
46097: PUSH
46098: LD_INT 1
46100: ARRAY
46101: PPUSH
46102: CALL_OW 313
46106: PUSH
46107: LD_INT 3
46109: LESS
46110: IFFALSE 46146
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46112: LD_INT 0
46114: PPUSH
46115: LD_INT 5
46117: PUSH
46118: LD_INT 8
46120: PUSH
46121: LD_INT 9
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: LIST
46128: PUSH
46129: LD_VAR 0 17
46133: ARRAY
46134: PPUSH
46135: LD_VAR 0 4
46139: PPUSH
46140: CALL_OW 380
46144: GO 46163
// PrepareHuman ( false , i , skill ) ;
46146: LD_INT 0
46148: PPUSH
46149: LD_VAR 0 8
46153: PPUSH
46154: LD_VAR 0 4
46158: PPUSH
46159: CALL_OW 380
// end else
46163: GO 46182
// PrepareHuman ( false , i , skill ) ;
46165: LD_INT 0
46167: PPUSH
46168: LD_VAR 0 8
46172: PPUSH
46173: LD_VAR 0 4
46177: PPUSH
46178: CALL_OW 380
// un := CreateHuman ;
46182: LD_ADDR_VAR 0 14
46186: PUSH
46187: CALL_OW 44
46191: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46192: LD_ADDR_VAR 0 7
46196: PUSH
46197: LD_VAR 0 7
46201: PPUSH
46202: LD_INT 1
46204: PPUSH
46205: LD_VAR 0 14
46209: PPUSH
46210: CALL_OW 2
46214: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
46215: LD_VAR 0 14
46219: PPUSH
46220: LD_VAR 0 12
46224: PUSH
46225: LD_INT 1
46227: ARRAY
46228: PPUSH
46229: CALL_OW 52
// end ;
46233: GO 45872
46235: POP
46236: POP
// end ;
46237: GO 45174
46239: POP
46240: POP
// result := result ^ buildings ;
46241: LD_ADDR_VAR 0 7
46245: PUSH
46246: LD_VAR 0 7
46250: PUSH
46251: LD_VAR 0 18
46255: ADD
46256: ST_TO_ADDR
// end else
46257: GO 46400
// begin for i = 1 to personel do
46259: LD_ADDR_VAR 0 8
46263: PUSH
46264: DOUBLE
46265: LD_INT 1
46267: DEC
46268: ST_TO_ADDR
46269: LD_VAR 0 6
46273: PUSH
46274: FOR_TO
46275: IFFALSE 46398
// begin if i > 4 then
46277: LD_VAR 0 8
46281: PUSH
46282: LD_INT 4
46284: GREATER
46285: IFFALSE 46289
// break ;
46287: GO 46398
// x := personel [ i ] ;
46289: LD_ADDR_VAR 0 13
46293: PUSH
46294: LD_VAR 0 6
46298: PUSH
46299: LD_VAR 0 8
46303: ARRAY
46304: ST_TO_ADDR
// if x = - 1 then
46305: LD_VAR 0 13
46309: PUSH
46310: LD_INT 1
46312: NEG
46313: EQUAL
46314: IFFALSE 46318
// continue ;
46316: GO 46274
// PrepareHuman ( false , i , skill ) ;
46318: LD_INT 0
46320: PPUSH
46321: LD_VAR 0 8
46325: PPUSH
46326: LD_VAR 0 4
46330: PPUSH
46331: CALL_OW 380
// un := CreateHuman ;
46335: LD_ADDR_VAR 0 14
46339: PUSH
46340: CALL_OW 44
46344: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46345: LD_VAR 0 14
46349: PPUSH
46350: LD_VAR 0 1
46354: PPUSH
46355: CALL_OW 250
46359: PPUSH
46360: LD_VAR 0 1
46364: PPUSH
46365: CALL_OW 251
46369: PPUSH
46370: LD_INT 10
46372: PPUSH
46373: LD_INT 0
46375: PPUSH
46376: CALL_OW 50
// result := result ^ un ;
46380: LD_ADDR_VAR 0 7
46384: PUSH
46385: LD_VAR 0 7
46389: PUSH
46390: LD_VAR 0 14
46394: ADD
46395: ST_TO_ADDR
// end ;
46396: GO 46274
46398: POP
46399: POP
// end ; end ;
46400: LD_VAR 0 7
46404: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
46405: LD_INT 0
46407: PPUSH
46408: PPUSH
46409: PPUSH
46410: PPUSH
46411: PPUSH
46412: PPUSH
46413: PPUSH
46414: PPUSH
46415: PPUSH
46416: PPUSH
46417: PPUSH
46418: PPUSH
46419: PPUSH
46420: PPUSH
46421: PPUSH
46422: PPUSH
// result := false ;
46423: LD_ADDR_VAR 0 3
46427: PUSH
46428: LD_INT 0
46430: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
46431: LD_VAR 0 1
46435: NOT
46436: PUSH
46437: LD_VAR 0 1
46441: PPUSH
46442: CALL_OW 266
46446: PUSH
46447: LD_INT 32
46449: PUSH
46450: LD_INT 33
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: IN
46457: NOT
46458: OR
46459: IFFALSE 46463
// exit ;
46461: GO 47572
// nat := GetNation ( tower ) ;
46463: LD_ADDR_VAR 0 12
46467: PUSH
46468: LD_VAR 0 1
46472: PPUSH
46473: CALL_OW 248
46477: ST_TO_ADDR
// side := GetSide ( tower ) ;
46478: LD_ADDR_VAR 0 16
46482: PUSH
46483: LD_VAR 0 1
46487: PPUSH
46488: CALL_OW 255
46492: ST_TO_ADDR
// x := GetX ( tower ) ;
46493: LD_ADDR_VAR 0 10
46497: PUSH
46498: LD_VAR 0 1
46502: PPUSH
46503: CALL_OW 250
46507: ST_TO_ADDR
// y := GetY ( tower ) ;
46508: LD_ADDR_VAR 0 11
46512: PUSH
46513: LD_VAR 0 1
46517: PPUSH
46518: CALL_OW 251
46522: ST_TO_ADDR
// if not x or not y then
46523: LD_VAR 0 10
46527: NOT
46528: PUSH
46529: LD_VAR 0 11
46533: NOT
46534: OR
46535: IFFALSE 46539
// exit ;
46537: GO 47572
// weapon := 0 ;
46539: LD_ADDR_VAR 0 18
46543: PUSH
46544: LD_INT 0
46546: ST_TO_ADDR
// fac_list := [ ] ;
46547: LD_ADDR_VAR 0 17
46551: PUSH
46552: EMPTY
46553: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
46554: LD_ADDR_VAR 0 6
46558: PUSH
46559: LD_VAR 0 1
46563: PPUSH
46564: CALL_OW 274
46568: PPUSH
46569: LD_VAR 0 2
46573: PPUSH
46574: LD_INT 0
46576: PPUSH
46577: CALL 44143 0 3
46581: PPUSH
46582: LD_INT 30
46584: PUSH
46585: LD_INT 3
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PPUSH
46592: CALL_OW 72
46596: ST_TO_ADDR
// if not factories then
46597: LD_VAR 0 6
46601: NOT
46602: IFFALSE 46606
// exit ;
46604: GO 47572
// for i in factories do
46606: LD_ADDR_VAR 0 8
46610: PUSH
46611: LD_VAR 0 6
46615: PUSH
46616: FOR_IN
46617: IFFALSE 46642
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46619: LD_ADDR_VAR 0 17
46623: PUSH
46624: LD_VAR 0 17
46628: PUSH
46629: LD_VAR 0 8
46633: PPUSH
46634: CALL_OW 478
46638: UNION
46639: ST_TO_ADDR
46640: GO 46616
46642: POP
46643: POP
// if not fac_list then
46644: LD_VAR 0 17
46648: NOT
46649: IFFALSE 46653
// exit ;
46651: GO 47572
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
46653: LD_ADDR_VAR 0 5
46657: PUSH
46658: LD_INT 4
46660: PUSH
46661: LD_INT 5
46663: PUSH
46664: LD_INT 9
46666: PUSH
46667: LD_INT 10
46669: PUSH
46670: LD_INT 6
46672: PUSH
46673: LD_INT 7
46675: PUSH
46676: LD_INT 11
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 27
46690: PUSH
46691: LD_INT 28
46693: PUSH
46694: LD_INT 26
46696: PUSH
46697: LD_INT 30
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 43
46708: PUSH
46709: LD_INT 44
46711: PUSH
46712: LD_INT 46
46714: PUSH
46715: LD_INT 45
46717: PUSH
46718: LD_INT 47
46720: PUSH
46721: LD_INT 49
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: LIST
46736: PUSH
46737: LD_VAR 0 12
46741: ARRAY
46742: ST_TO_ADDR
// list := list isect fac_list ;
46743: LD_ADDR_VAR 0 5
46747: PUSH
46748: LD_VAR 0 5
46752: PUSH
46753: LD_VAR 0 17
46757: ISECT
46758: ST_TO_ADDR
// if not list then
46759: LD_VAR 0 5
46763: NOT
46764: IFFALSE 46768
// exit ;
46766: GO 47572
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
46768: LD_VAR 0 12
46772: PUSH
46773: LD_INT 3
46775: EQUAL
46776: PUSH
46777: LD_INT 49
46779: PUSH
46780: LD_VAR 0 5
46784: IN
46785: AND
46786: PUSH
46787: LD_INT 31
46789: PPUSH
46790: LD_VAR 0 16
46794: PPUSH
46795: CALL_OW 321
46799: PUSH
46800: LD_INT 2
46802: EQUAL
46803: AND
46804: IFFALSE 46864
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
46806: LD_INT 22
46808: PUSH
46809: LD_VAR 0 16
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 35
46820: PUSH
46821: LD_INT 49
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 91
46830: PUSH
46831: LD_VAR 0 1
46835: PUSH
46836: LD_INT 10
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: LIST
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: LIST
46848: PPUSH
46849: CALL_OW 69
46853: NOT
46854: IFFALSE 46864
// weapon := ru_time_lapser ;
46856: LD_ADDR_VAR 0 18
46860: PUSH
46861: LD_INT 49
46863: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
46864: LD_VAR 0 12
46868: PUSH
46869: LD_INT 1
46871: PUSH
46872: LD_INT 2
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: IN
46879: PUSH
46880: LD_INT 11
46882: PUSH
46883: LD_VAR 0 5
46887: IN
46888: PUSH
46889: LD_INT 30
46891: PUSH
46892: LD_VAR 0 5
46896: IN
46897: OR
46898: AND
46899: PUSH
46900: LD_INT 6
46902: PPUSH
46903: LD_VAR 0 16
46907: PPUSH
46908: CALL_OW 321
46912: PUSH
46913: LD_INT 2
46915: EQUAL
46916: AND
46917: IFFALSE 47082
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
46919: LD_INT 22
46921: PUSH
46922: LD_VAR 0 16
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 2
46933: PUSH
46934: LD_INT 35
46936: PUSH
46937: LD_INT 11
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 35
46946: PUSH
46947: LD_INT 30
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 91
46961: PUSH
46962: LD_VAR 0 1
46966: PUSH
46967: LD_INT 18
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: LIST
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: LIST
46979: PPUSH
46980: CALL_OW 69
46984: NOT
46985: PUSH
46986: LD_INT 22
46988: PUSH
46989: LD_VAR 0 16
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 2
47000: PUSH
47001: LD_INT 30
47003: PUSH
47004: LD_INT 32
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 30
47013: PUSH
47014: LD_INT 33
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 91
47028: PUSH
47029: LD_VAR 0 1
47033: PUSH
47034: LD_INT 12
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: LIST
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: LIST
47046: PUSH
47047: EMPTY
47048: LIST
47049: PPUSH
47050: CALL_OW 69
47054: PUSH
47055: LD_INT 2
47057: GREATER
47058: AND
47059: IFFALSE 47082
// weapon := [ us_radar , ar_radar ] [ nat ] ;
47061: LD_ADDR_VAR 0 18
47065: PUSH
47066: LD_INT 11
47068: PUSH
47069: LD_INT 30
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_VAR 0 12
47080: ARRAY
47081: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
47082: LD_VAR 0 18
47086: NOT
47087: PUSH
47088: LD_INT 40
47090: PPUSH
47091: LD_VAR 0 16
47095: PPUSH
47096: CALL_OW 321
47100: PUSH
47101: LD_INT 2
47103: EQUAL
47104: AND
47105: PUSH
47106: LD_INT 7
47108: PUSH
47109: LD_VAR 0 5
47113: IN
47114: PUSH
47115: LD_INT 28
47117: PUSH
47118: LD_VAR 0 5
47122: IN
47123: OR
47124: PUSH
47125: LD_INT 45
47127: PUSH
47128: LD_VAR 0 5
47132: IN
47133: OR
47134: AND
47135: IFFALSE 47389
// begin hex := GetHexInfo ( x , y ) ;
47137: LD_ADDR_VAR 0 4
47141: PUSH
47142: LD_VAR 0 10
47146: PPUSH
47147: LD_VAR 0 11
47151: PPUSH
47152: CALL_OW 546
47156: ST_TO_ADDR
// if hex [ 1 ] then
47157: LD_VAR 0 4
47161: PUSH
47162: LD_INT 1
47164: ARRAY
47165: IFFALSE 47169
// exit ;
47167: GO 47572
// height := hex [ 2 ] ;
47169: LD_ADDR_VAR 0 15
47173: PUSH
47174: LD_VAR 0 4
47178: PUSH
47179: LD_INT 2
47181: ARRAY
47182: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
47183: LD_ADDR_VAR 0 14
47187: PUSH
47188: LD_INT 0
47190: PUSH
47191: LD_INT 2
47193: PUSH
47194: LD_INT 3
47196: PUSH
47197: LD_INT 5
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: ST_TO_ADDR
// for i in tmp do
47206: LD_ADDR_VAR 0 8
47210: PUSH
47211: LD_VAR 0 14
47215: PUSH
47216: FOR_IN
47217: IFFALSE 47387
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
47219: LD_ADDR_VAR 0 9
47223: PUSH
47224: LD_VAR 0 10
47228: PPUSH
47229: LD_VAR 0 8
47233: PPUSH
47234: LD_INT 5
47236: PPUSH
47237: CALL_OW 272
47241: PUSH
47242: LD_VAR 0 11
47246: PPUSH
47247: LD_VAR 0 8
47251: PPUSH
47252: LD_INT 5
47254: PPUSH
47255: CALL_OW 273
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
47264: LD_VAR 0 9
47268: PUSH
47269: LD_INT 1
47271: ARRAY
47272: PPUSH
47273: LD_VAR 0 9
47277: PUSH
47278: LD_INT 2
47280: ARRAY
47281: PPUSH
47282: CALL_OW 488
47286: IFFALSE 47385
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
47288: LD_ADDR_VAR 0 4
47292: PUSH
47293: LD_VAR 0 9
47297: PUSH
47298: LD_INT 1
47300: ARRAY
47301: PPUSH
47302: LD_VAR 0 9
47306: PUSH
47307: LD_INT 2
47309: ARRAY
47310: PPUSH
47311: CALL_OW 546
47315: ST_TO_ADDR
// if hex [ 1 ] then
47316: LD_VAR 0 4
47320: PUSH
47321: LD_INT 1
47323: ARRAY
47324: IFFALSE 47328
// continue ;
47326: GO 47216
// h := hex [ 2 ] ;
47328: LD_ADDR_VAR 0 13
47332: PUSH
47333: LD_VAR 0 4
47337: PUSH
47338: LD_INT 2
47340: ARRAY
47341: ST_TO_ADDR
// if h + 7 < height then
47342: LD_VAR 0 13
47346: PUSH
47347: LD_INT 7
47349: PLUS
47350: PUSH
47351: LD_VAR 0 15
47355: LESS
47356: IFFALSE 47385
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
47358: LD_ADDR_VAR 0 18
47362: PUSH
47363: LD_INT 7
47365: PUSH
47366: LD_INT 28
47368: PUSH
47369: LD_INT 45
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: LIST
47376: PUSH
47377: LD_VAR 0 12
47381: ARRAY
47382: ST_TO_ADDR
// break ;
47383: GO 47387
// end ; end ; end ;
47385: GO 47216
47387: POP
47388: POP
// end ; if not weapon then
47389: LD_VAR 0 18
47393: NOT
47394: IFFALSE 47454
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
47396: LD_ADDR_VAR 0 5
47400: PUSH
47401: LD_VAR 0 5
47405: PUSH
47406: LD_INT 11
47408: PUSH
47409: LD_INT 30
47411: PUSH
47412: LD_INT 49
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: LIST
47419: DIFF
47420: ST_TO_ADDR
// if not list then
47421: LD_VAR 0 5
47425: NOT
47426: IFFALSE 47430
// exit ;
47428: GO 47572
// weapon := list [ rand ( 1 , list ) ] ;
47430: LD_ADDR_VAR 0 18
47434: PUSH
47435: LD_VAR 0 5
47439: PUSH
47440: LD_INT 1
47442: PPUSH
47443: LD_VAR 0 5
47447: PPUSH
47448: CALL_OW 12
47452: ARRAY
47453: ST_TO_ADDR
// end ; if weapon then
47454: LD_VAR 0 18
47458: IFFALSE 47572
// begin tmp := CostOfWeapon ( weapon ) ;
47460: LD_ADDR_VAR 0 14
47464: PUSH
47465: LD_VAR 0 18
47469: PPUSH
47470: CALL_OW 451
47474: ST_TO_ADDR
// j := GetBase ( tower ) ;
47475: LD_ADDR_VAR 0 9
47479: PUSH
47480: LD_VAR 0 1
47484: PPUSH
47485: CALL_OW 274
47489: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47490: LD_VAR 0 9
47494: PPUSH
47495: LD_INT 1
47497: PPUSH
47498: CALL_OW 275
47502: PUSH
47503: LD_VAR 0 14
47507: PUSH
47508: LD_INT 1
47510: ARRAY
47511: GREATEREQUAL
47512: PUSH
47513: LD_VAR 0 9
47517: PPUSH
47518: LD_INT 2
47520: PPUSH
47521: CALL_OW 275
47525: PUSH
47526: LD_VAR 0 14
47530: PUSH
47531: LD_INT 2
47533: ARRAY
47534: GREATEREQUAL
47535: AND
47536: PUSH
47537: LD_VAR 0 9
47541: PPUSH
47542: LD_INT 3
47544: PPUSH
47545: CALL_OW 275
47549: PUSH
47550: LD_VAR 0 14
47554: PUSH
47555: LD_INT 3
47557: ARRAY
47558: GREATEREQUAL
47559: AND
47560: IFFALSE 47572
// result := weapon ;
47562: LD_ADDR_VAR 0 3
47566: PUSH
47567: LD_VAR 0 18
47571: ST_TO_ADDR
// end ; end ;
47572: LD_VAR 0 3
47576: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47577: LD_INT 0
47579: PPUSH
47580: PPUSH
// result := true ;
47581: LD_ADDR_VAR 0 3
47585: PUSH
47586: LD_INT 1
47588: ST_TO_ADDR
// if array1 = array2 then
47589: LD_VAR 0 1
47593: PUSH
47594: LD_VAR 0 2
47598: EQUAL
47599: IFFALSE 47659
// begin for i = 1 to array1 do
47601: LD_ADDR_VAR 0 4
47605: PUSH
47606: DOUBLE
47607: LD_INT 1
47609: DEC
47610: ST_TO_ADDR
47611: LD_VAR 0 1
47615: PUSH
47616: FOR_TO
47617: IFFALSE 47655
// if array1 [ i ] <> array2 [ i ] then
47619: LD_VAR 0 1
47623: PUSH
47624: LD_VAR 0 4
47628: ARRAY
47629: PUSH
47630: LD_VAR 0 2
47634: PUSH
47635: LD_VAR 0 4
47639: ARRAY
47640: NONEQUAL
47641: IFFALSE 47653
// begin result := false ;
47643: LD_ADDR_VAR 0 3
47647: PUSH
47648: LD_INT 0
47650: ST_TO_ADDR
// break ;
47651: GO 47655
// end ;
47653: GO 47616
47655: POP
47656: POP
// end else
47657: GO 47667
// result := false ;
47659: LD_ADDR_VAR 0 3
47663: PUSH
47664: LD_INT 0
47666: ST_TO_ADDR
// end ;
47667: LD_VAR 0 3
47671: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
47672: LD_INT 0
47674: PPUSH
47675: PPUSH
// if not array1 or not array2 then
47676: LD_VAR 0 1
47680: NOT
47681: PUSH
47682: LD_VAR 0 2
47686: NOT
47687: OR
47688: IFFALSE 47692
// exit ;
47690: GO 47756
// result := true ;
47692: LD_ADDR_VAR 0 3
47696: PUSH
47697: LD_INT 1
47699: ST_TO_ADDR
// for i = 1 to array1 do
47700: LD_ADDR_VAR 0 4
47704: PUSH
47705: DOUBLE
47706: LD_INT 1
47708: DEC
47709: ST_TO_ADDR
47710: LD_VAR 0 1
47714: PUSH
47715: FOR_TO
47716: IFFALSE 47754
// if array1 [ i ] <> array2 [ i ] then
47718: LD_VAR 0 1
47722: PUSH
47723: LD_VAR 0 4
47727: ARRAY
47728: PUSH
47729: LD_VAR 0 2
47733: PUSH
47734: LD_VAR 0 4
47738: ARRAY
47739: NONEQUAL
47740: IFFALSE 47752
// begin result := false ;
47742: LD_ADDR_VAR 0 3
47746: PUSH
47747: LD_INT 0
47749: ST_TO_ADDR
// break ;
47750: GO 47754
// end ;
47752: GO 47715
47754: POP
47755: POP
// end ;
47756: LD_VAR 0 3
47760: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
47761: LD_INT 0
47763: PPUSH
47764: PPUSH
47765: PPUSH
// pom := GetBase ( fac ) ;
47766: LD_ADDR_VAR 0 5
47770: PUSH
47771: LD_VAR 0 1
47775: PPUSH
47776: CALL_OW 274
47780: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
47781: LD_ADDR_VAR 0 4
47785: PUSH
47786: LD_VAR 0 2
47790: PUSH
47791: LD_INT 1
47793: ARRAY
47794: PPUSH
47795: LD_VAR 0 2
47799: PUSH
47800: LD_INT 2
47802: ARRAY
47803: PPUSH
47804: LD_VAR 0 2
47808: PUSH
47809: LD_INT 3
47811: ARRAY
47812: PPUSH
47813: LD_VAR 0 2
47817: PUSH
47818: LD_INT 4
47820: ARRAY
47821: PPUSH
47822: CALL_OW 449
47826: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47827: LD_ADDR_VAR 0 3
47831: PUSH
47832: LD_VAR 0 5
47836: PPUSH
47837: LD_INT 1
47839: PPUSH
47840: CALL_OW 275
47844: PUSH
47845: LD_VAR 0 4
47849: PUSH
47850: LD_INT 1
47852: ARRAY
47853: GREATEREQUAL
47854: PUSH
47855: LD_VAR 0 5
47859: PPUSH
47860: LD_INT 2
47862: PPUSH
47863: CALL_OW 275
47867: PUSH
47868: LD_VAR 0 4
47872: PUSH
47873: LD_INT 2
47875: ARRAY
47876: GREATEREQUAL
47877: AND
47878: PUSH
47879: LD_VAR 0 5
47883: PPUSH
47884: LD_INT 3
47886: PPUSH
47887: CALL_OW 275
47891: PUSH
47892: LD_VAR 0 4
47896: PUSH
47897: LD_INT 3
47899: ARRAY
47900: GREATEREQUAL
47901: AND
47902: ST_TO_ADDR
// end ;
47903: LD_VAR 0 3
47907: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
47908: LD_INT 0
47910: PPUSH
47911: PPUSH
47912: PPUSH
47913: PPUSH
// pom := GetBase ( building ) ;
47914: LD_ADDR_VAR 0 3
47918: PUSH
47919: LD_VAR 0 1
47923: PPUSH
47924: CALL_OW 274
47928: ST_TO_ADDR
// if not pom then
47929: LD_VAR 0 3
47933: NOT
47934: IFFALSE 47938
// exit ;
47936: GO 48108
// btype := GetBType ( building ) ;
47938: LD_ADDR_VAR 0 5
47942: PUSH
47943: LD_VAR 0 1
47947: PPUSH
47948: CALL_OW 266
47952: ST_TO_ADDR
// if btype = b_armoury then
47953: LD_VAR 0 5
47957: PUSH
47958: LD_INT 4
47960: EQUAL
47961: IFFALSE 47971
// btype := b_barracks ;
47963: LD_ADDR_VAR 0 5
47967: PUSH
47968: LD_INT 5
47970: ST_TO_ADDR
// if btype = b_depot then
47971: LD_VAR 0 5
47975: PUSH
47976: LD_INT 0
47978: EQUAL
47979: IFFALSE 47989
// btype := b_warehouse ;
47981: LD_ADDR_VAR 0 5
47985: PUSH
47986: LD_INT 1
47988: ST_TO_ADDR
// if btype = b_workshop then
47989: LD_VAR 0 5
47993: PUSH
47994: LD_INT 2
47996: EQUAL
47997: IFFALSE 48007
// btype := b_factory ;
47999: LD_ADDR_VAR 0 5
48003: PUSH
48004: LD_INT 3
48006: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48007: LD_ADDR_VAR 0 4
48011: PUSH
48012: LD_VAR 0 5
48016: PPUSH
48017: LD_VAR 0 1
48021: PPUSH
48022: CALL_OW 248
48026: PPUSH
48027: CALL_OW 450
48031: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48032: LD_ADDR_VAR 0 2
48036: PUSH
48037: LD_VAR 0 3
48041: PPUSH
48042: LD_INT 1
48044: PPUSH
48045: CALL_OW 275
48049: PUSH
48050: LD_VAR 0 4
48054: PUSH
48055: LD_INT 1
48057: ARRAY
48058: GREATEREQUAL
48059: PUSH
48060: LD_VAR 0 3
48064: PPUSH
48065: LD_INT 2
48067: PPUSH
48068: CALL_OW 275
48072: PUSH
48073: LD_VAR 0 4
48077: PUSH
48078: LD_INT 2
48080: ARRAY
48081: GREATEREQUAL
48082: AND
48083: PUSH
48084: LD_VAR 0 3
48088: PPUSH
48089: LD_INT 3
48091: PPUSH
48092: CALL_OW 275
48096: PUSH
48097: LD_VAR 0 4
48101: PUSH
48102: LD_INT 3
48104: ARRAY
48105: GREATEREQUAL
48106: AND
48107: ST_TO_ADDR
// end ;
48108: LD_VAR 0 2
48112: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
48113: LD_INT 0
48115: PPUSH
48116: PPUSH
48117: PPUSH
// pom := GetBase ( building ) ;
48118: LD_ADDR_VAR 0 4
48122: PUSH
48123: LD_VAR 0 1
48127: PPUSH
48128: CALL_OW 274
48132: ST_TO_ADDR
// if not pom then
48133: LD_VAR 0 4
48137: NOT
48138: IFFALSE 48142
// exit ;
48140: GO 48243
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48142: LD_ADDR_VAR 0 5
48146: PUSH
48147: LD_VAR 0 2
48151: PPUSH
48152: LD_VAR 0 1
48156: PPUSH
48157: CALL_OW 248
48161: PPUSH
48162: CALL_OW 450
48166: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48167: LD_ADDR_VAR 0 3
48171: PUSH
48172: LD_VAR 0 4
48176: PPUSH
48177: LD_INT 1
48179: PPUSH
48180: CALL_OW 275
48184: PUSH
48185: LD_VAR 0 5
48189: PUSH
48190: LD_INT 1
48192: ARRAY
48193: GREATEREQUAL
48194: PUSH
48195: LD_VAR 0 4
48199: PPUSH
48200: LD_INT 2
48202: PPUSH
48203: CALL_OW 275
48207: PUSH
48208: LD_VAR 0 5
48212: PUSH
48213: LD_INT 2
48215: ARRAY
48216: GREATEREQUAL
48217: AND
48218: PUSH
48219: LD_VAR 0 4
48223: PPUSH
48224: LD_INT 3
48226: PPUSH
48227: CALL_OW 275
48231: PUSH
48232: LD_VAR 0 5
48236: PUSH
48237: LD_INT 3
48239: ARRAY
48240: GREATEREQUAL
48241: AND
48242: ST_TO_ADDR
// end ;
48243: LD_VAR 0 3
48247: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
48248: LD_INT 0
48250: PPUSH
48251: PPUSH
48252: PPUSH
48253: PPUSH
48254: PPUSH
48255: PPUSH
48256: PPUSH
48257: PPUSH
48258: PPUSH
48259: PPUSH
48260: PPUSH
// result := false ;
48261: LD_ADDR_VAR 0 8
48265: PUSH
48266: LD_INT 0
48268: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
48269: LD_VAR 0 5
48273: NOT
48274: PUSH
48275: LD_VAR 0 1
48279: NOT
48280: OR
48281: PUSH
48282: LD_VAR 0 2
48286: NOT
48287: OR
48288: PUSH
48289: LD_VAR 0 3
48293: NOT
48294: OR
48295: IFFALSE 48299
// exit ;
48297: GO 49113
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
48299: LD_ADDR_VAR 0 14
48303: PUSH
48304: LD_VAR 0 1
48308: PPUSH
48309: LD_VAR 0 2
48313: PPUSH
48314: LD_VAR 0 3
48318: PPUSH
48319: LD_VAR 0 4
48323: PPUSH
48324: LD_VAR 0 5
48328: PUSH
48329: LD_INT 1
48331: ARRAY
48332: PPUSH
48333: CALL_OW 248
48337: PPUSH
48338: LD_INT 0
48340: PPUSH
48341: CALL 50366 0 6
48345: ST_TO_ADDR
// if not hexes then
48346: LD_VAR 0 14
48350: NOT
48351: IFFALSE 48355
// exit ;
48353: GO 49113
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48355: LD_ADDR_VAR 0 17
48359: PUSH
48360: LD_VAR 0 5
48364: PPUSH
48365: LD_INT 22
48367: PUSH
48368: LD_VAR 0 13
48372: PPUSH
48373: CALL_OW 255
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 2
48384: PUSH
48385: LD_INT 30
48387: PUSH
48388: LD_INT 0
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 30
48397: PUSH
48398: LD_INT 1
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: LIST
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PPUSH
48414: CALL_OW 72
48418: ST_TO_ADDR
// for i = 1 to hexes do
48419: LD_ADDR_VAR 0 9
48423: PUSH
48424: DOUBLE
48425: LD_INT 1
48427: DEC
48428: ST_TO_ADDR
48429: LD_VAR 0 14
48433: PUSH
48434: FOR_TO
48435: IFFALSE 49111
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48437: LD_ADDR_VAR 0 13
48441: PUSH
48442: LD_VAR 0 14
48446: PUSH
48447: LD_VAR 0 9
48451: ARRAY
48452: PUSH
48453: LD_INT 1
48455: ARRAY
48456: PPUSH
48457: LD_VAR 0 14
48461: PUSH
48462: LD_VAR 0 9
48466: ARRAY
48467: PUSH
48468: LD_INT 2
48470: ARRAY
48471: PPUSH
48472: CALL_OW 428
48476: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48477: LD_VAR 0 14
48481: PUSH
48482: LD_VAR 0 9
48486: ARRAY
48487: PUSH
48488: LD_INT 1
48490: ARRAY
48491: PPUSH
48492: LD_VAR 0 14
48496: PUSH
48497: LD_VAR 0 9
48501: ARRAY
48502: PUSH
48503: LD_INT 2
48505: ARRAY
48506: PPUSH
48507: CALL_OW 351
48511: PUSH
48512: LD_VAR 0 14
48516: PUSH
48517: LD_VAR 0 9
48521: ARRAY
48522: PUSH
48523: LD_INT 1
48525: ARRAY
48526: PPUSH
48527: LD_VAR 0 14
48531: PUSH
48532: LD_VAR 0 9
48536: ARRAY
48537: PUSH
48538: LD_INT 2
48540: ARRAY
48541: PPUSH
48542: CALL_OW 488
48546: NOT
48547: OR
48548: PUSH
48549: LD_VAR 0 13
48553: PPUSH
48554: CALL_OW 247
48558: PUSH
48559: LD_INT 3
48561: EQUAL
48562: OR
48563: IFFALSE 48569
// exit ;
48565: POP
48566: POP
48567: GO 49113
// if not tmp then
48569: LD_VAR 0 13
48573: NOT
48574: IFFALSE 48578
// continue ;
48576: GO 48434
// result := true ;
48578: LD_ADDR_VAR 0 8
48582: PUSH
48583: LD_INT 1
48585: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
48586: LD_VAR 0 6
48590: PUSH
48591: LD_VAR 0 13
48595: PPUSH
48596: CALL_OW 247
48600: PUSH
48601: LD_INT 2
48603: EQUAL
48604: AND
48605: PUSH
48606: LD_VAR 0 13
48610: PPUSH
48611: CALL_OW 263
48615: PUSH
48616: LD_INT 1
48618: EQUAL
48619: AND
48620: IFFALSE 48784
// begin if IsDrivenBy ( tmp ) then
48622: LD_VAR 0 13
48626: PPUSH
48627: CALL_OW 311
48631: IFFALSE 48635
// continue ;
48633: GO 48434
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
48635: LD_VAR 0 6
48639: PPUSH
48640: LD_INT 3
48642: PUSH
48643: LD_INT 60
48645: PUSH
48646: EMPTY
48647: LIST
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 3
48655: PUSH
48656: LD_INT 55
48658: PUSH
48659: EMPTY
48660: LIST
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PPUSH
48670: CALL_OW 72
48674: IFFALSE 48782
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
48676: LD_ADDR_VAR 0 18
48680: PUSH
48681: LD_VAR 0 6
48685: PPUSH
48686: LD_INT 3
48688: PUSH
48689: LD_INT 60
48691: PUSH
48692: EMPTY
48693: LIST
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 3
48701: PUSH
48702: LD_INT 55
48704: PUSH
48705: EMPTY
48706: LIST
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PPUSH
48716: CALL_OW 72
48720: PUSH
48721: LD_INT 1
48723: ARRAY
48724: ST_TO_ADDR
// if IsInUnit ( driver ) then
48725: LD_VAR 0 18
48729: PPUSH
48730: CALL_OW 310
48734: IFFALSE 48745
// ComExit ( driver ) ;
48736: LD_VAR 0 18
48740: PPUSH
48741: CALL 74158 0 1
// AddComEnterUnit ( driver , tmp ) ;
48745: LD_VAR 0 18
48749: PPUSH
48750: LD_VAR 0 13
48754: PPUSH
48755: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
48759: LD_VAR 0 18
48763: PPUSH
48764: LD_VAR 0 7
48768: PPUSH
48769: CALL_OW 173
// AddComExitVehicle ( driver ) ;
48773: LD_VAR 0 18
48777: PPUSH
48778: CALL_OW 181
// end ; continue ;
48782: GO 48434
// end ; if not cleaners or not tmp in cleaners then
48784: LD_VAR 0 6
48788: NOT
48789: PUSH
48790: LD_VAR 0 13
48794: PUSH
48795: LD_VAR 0 6
48799: IN
48800: NOT
48801: OR
48802: IFFALSE 49109
// begin if dep then
48804: LD_VAR 0 17
48808: IFFALSE 48944
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
48810: LD_ADDR_VAR 0 16
48814: PUSH
48815: LD_VAR 0 17
48819: PUSH
48820: LD_INT 1
48822: ARRAY
48823: PPUSH
48824: CALL_OW 250
48828: PPUSH
48829: LD_VAR 0 17
48833: PUSH
48834: LD_INT 1
48836: ARRAY
48837: PPUSH
48838: CALL_OW 254
48842: PPUSH
48843: LD_INT 5
48845: PPUSH
48846: CALL_OW 272
48850: PUSH
48851: LD_VAR 0 17
48855: PUSH
48856: LD_INT 1
48858: ARRAY
48859: PPUSH
48860: CALL_OW 251
48864: PPUSH
48865: LD_VAR 0 17
48869: PUSH
48870: LD_INT 1
48872: ARRAY
48873: PPUSH
48874: CALL_OW 254
48878: PPUSH
48879: LD_INT 5
48881: PPUSH
48882: CALL_OW 273
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
48891: LD_VAR 0 16
48895: PUSH
48896: LD_INT 1
48898: ARRAY
48899: PPUSH
48900: LD_VAR 0 16
48904: PUSH
48905: LD_INT 2
48907: ARRAY
48908: PPUSH
48909: CALL_OW 488
48913: IFFALSE 48944
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
48915: LD_VAR 0 13
48919: PPUSH
48920: LD_VAR 0 16
48924: PUSH
48925: LD_INT 1
48927: ARRAY
48928: PPUSH
48929: LD_VAR 0 16
48933: PUSH
48934: LD_INT 2
48936: ARRAY
48937: PPUSH
48938: CALL_OW 111
// continue ;
48942: GO 48434
// end ; end ; r := GetDir ( tmp ) ;
48944: LD_ADDR_VAR 0 15
48948: PUSH
48949: LD_VAR 0 13
48953: PPUSH
48954: CALL_OW 254
48958: ST_TO_ADDR
// if r = 5 then
48959: LD_VAR 0 15
48963: PUSH
48964: LD_INT 5
48966: EQUAL
48967: IFFALSE 48977
// r := 0 ;
48969: LD_ADDR_VAR 0 15
48973: PUSH
48974: LD_INT 0
48976: ST_TO_ADDR
// for j = r to 5 do
48977: LD_ADDR_VAR 0 10
48981: PUSH
48982: DOUBLE
48983: LD_VAR 0 15
48987: DEC
48988: ST_TO_ADDR
48989: LD_INT 5
48991: PUSH
48992: FOR_TO
48993: IFFALSE 49107
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
48995: LD_ADDR_VAR 0 11
48999: PUSH
49000: LD_VAR 0 13
49004: PPUSH
49005: CALL_OW 250
49009: PPUSH
49010: LD_VAR 0 10
49014: PPUSH
49015: LD_INT 2
49017: PPUSH
49018: CALL_OW 272
49022: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
49023: LD_ADDR_VAR 0 12
49027: PUSH
49028: LD_VAR 0 13
49032: PPUSH
49033: CALL_OW 251
49037: PPUSH
49038: LD_VAR 0 10
49042: PPUSH
49043: LD_INT 2
49045: PPUSH
49046: CALL_OW 273
49050: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
49051: LD_VAR 0 11
49055: PPUSH
49056: LD_VAR 0 12
49060: PPUSH
49061: CALL_OW 488
49065: PUSH
49066: LD_VAR 0 11
49070: PPUSH
49071: LD_VAR 0 12
49075: PPUSH
49076: CALL_OW 428
49080: NOT
49081: AND
49082: IFFALSE 49105
// begin ComMoveXY ( tmp , _x , _y ) ;
49084: LD_VAR 0 13
49088: PPUSH
49089: LD_VAR 0 11
49093: PPUSH
49094: LD_VAR 0 12
49098: PPUSH
49099: CALL_OW 111
// break ;
49103: GO 49107
// end ; end ;
49105: GO 48992
49107: POP
49108: POP
// end ; end ;
49109: GO 48434
49111: POP
49112: POP
// end ;
49113: LD_VAR 0 8
49117: RET
// export function BuildingTechInvented ( side , btype ) ; begin
49118: LD_INT 0
49120: PPUSH
// result := true ;
49121: LD_ADDR_VAR 0 3
49125: PUSH
49126: LD_INT 1
49128: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
49129: LD_VAR 0 2
49133: PUSH
49134: LD_INT 24
49136: DOUBLE
49137: EQUAL
49138: IFTRUE 49148
49140: LD_INT 33
49142: DOUBLE
49143: EQUAL
49144: IFTRUE 49148
49146: GO 49173
49148: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
49149: LD_ADDR_VAR 0 3
49153: PUSH
49154: LD_INT 32
49156: PPUSH
49157: LD_VAR 0 1
49161: PPUSH
49162: CALL_OW 321
49166: PUSH
49167: LD_INT 2
49169: EQUAL
49170: ST_TO_ADDR
49171: GO 49489
49173: LD_INT 20
49175: DOUBLE
49176: EQUAL
49177: IFTRUE 49181
49179: GO 49206
49181: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
49182: LD_ADDR_VAR 0 3
49186: PUSH
49187: LD_INT 6
49189: PPUSH
49190: LD_VAR 0 1
49194: PPUSH
49195: CALL_OW 321
49199: PUSH
49200: LD_INT 2
49202: EQUAL
49203: ST_TO_ADDR
49204: GO 49489
49206: LD_INT 22
49208: DOUBLE
49209: EQUAL
49210: IFTRUE 49220
49212: LD_INT 36
49214: DOUBLE
49215: EQUAL
49216: IFTRUE 49220
49218: GO 49245
49220: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
49221: LD_ADDR_VAR 0 3
49225: PUSH
49226: LD_INT 15
49228: PPUSH
49229: LD_VAR 0 1
49233: PPUSH
49234: CALL_OW 321
49238: PUSH
49239: LD_INT 2
49241: EQUAL
49242: ST_TO_ADDR
49243: GO 49489
49245: LD_INT 30
49247: DOUBLE
49248: EQUAL
49249: IFTRUE 49253
49251: GO 49278
49253: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
49254: LD_ADDR_VAR 0 3
49258: PUSH
49259: LD_INT 20
49261: PPUSH
49262: LD_VAR 0 1
49266: PPUSH
49267: CALL_OW 321
49271: PUSH
49272: LD_INT 2
49274: EQUAL
49275: ST_TO_ADDR
49276: GO 49489
49278: LD_INT 28
49280: DOUBLE
49281: EQUAL
49282: IFTRUE 49292
49284: LD_INT 21
49286: DOUBLE
49287: EQUAL
49288: IFTRUE 49292
49290: GO 49317
49292: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
49293: LD_ADDR_VAR 0 3
49297: PUSH
49298: LD_INT 21
49300: PPUSH
49301: LD_VAR 0 1
49305: PPUSH
49306: CALL_OW 321
49310: PUSH
49311: LD_INT 2
49313: EQUAL
49314: ST_TO_ADDR
49315: GO 49489
49317: LD_INT 16
49319: DOUBLE
49320: EQUAL
49321: IFTRUE 49325
49323: GO 49350
49325: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
49326: LD_ADDR_VAR 0 3
49330: PUSH
49331: LD_INT 84
49333: PPUSH
49334: LD_VAR 0 1
49338: PPUSH
49339: CALL_OW 321
49343: PUSH
49344: LD_INT 2
49346: EQUAL
49347: ST_TO_ADDR
49348: GO 49489
49350: LD_INT 19
49352: DOUBLE
49353: EQUAL
49354: IFTRUE 49364
49356: LD_INT 23
49358: DOUBLE
49359: EQUAL
49360: IFTRUE 49364
49362: GO 49389
49364: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
49365: LD_ADDR_VAR 0 3
49369: PUSH
49370: LD_INT 83
49372: PPUSH
49373: LD_VAR 0 1
49377: PPUSH
49378: CALL_OW 321
49382: PUSH
49383: LD_INT 2
49385: EQUAL
49386: ST_TO_ADDR
49387: GO 49489
49389: LD_INT 17
49391: DOUBLE
49392: EQUAL
49393: IFTRUE 49397
49395: GO 49422
49397: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
49398: LD_ADDR_VAR 0 3
49402: PUSH
49403: LD_INT 39
49405: PPUSH
49406: LD_VAR 0 1
49410: PPUSH
49411: CALL_OW 321
49415: PUSH
49416: LD_INT 2
49418: EQUAL
49419: ST_TO_ADDR
49420: GO 49489
49422: LD_INT 18
49424: DOUBLE
49425: EQUAL
49426: IFTRUE 49430
49428: GO 49455
49430: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
49431: LD_ADDR_VAR 0 3
49435: PUSH
49436: LD_INT 40
49438: PPUSH
49439: LD_VAR 0 1
49443: PPUSH
49444: CALL_OW 321
49448: PUSH
49449: LD_INT 2
49451: EQUAL
49452: ST_TO_ADDR
49453: GO 49489
49455: LD_INT 27
49457: DOUBLE
49458: EQUAL
49459: IFTRUE 49463
49461: GO 49488
49463: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
49464: LD_ADDR_VAR 0 3
49468: PUSH
49469: LD_INT 35
49471: PPUSH
49472: LD_VAR 0 1
49476: PPUSH
49477: CALL_OW 321
49481: PUSH
49482: LD_INT 2
49484: EQUAL
49485: ST_TO_ADDR
49486: GO 49489
49488: POP
// end ;
49489: LD_VAR 0 3
49493: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
49494: LD_INT 0
49496: PPUSH
49497: PPUSH
49498: PPUSH
49499: PPUSH
49500: PPUSH
49501: PPUSH
49502: PPUSH
49503: PPUSH
49504: PPUSH
49505: PPUSH
49506: PPUSH
// result := false ;
49507: LD_ADDR_VAR 0 6
49511: PUSH
49512: LD_INT 0
49514: ST_TO_ADDR
// if btype = b_depot then
49515: LD_VAR 0 2
49519: PUSH
49520: LD_INT 0
49522: EQUAL
49523: IFFALSE 49535
// begin result := true ;
49525: LD_ADDR_VAR 0 6
49529: PUSH
49530: LD_INT 1
49532: ST_TO_ADDR
// exit ;
49533: GO 50361
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
49535: LD_VAR 0 1
49539: NOT
49540: PUSH
49541: LD_VAR 0 1
49545: PPUSH
49546: CALL_OW 266
49550: PUSH
49551: LD_INT 0
49553: PUSH
49554: LD_INT 1
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: IN
49561: NOT
49562: OR
49563: PUSH
49564: LD_VAR 0 2
49568: NOT
49569: OR
49570: PUSH
49571: LD_VAR 0 5
49575: PUSH
49576: LD_INT 0
49578: PUSH
49579: LD_INT 1
49581: PUSH
49582: LD_INT 2
49584: PUSH
49585: LD_INT 3
49587: PUSH
49588: LD_INT 4
49590: PUSH
49591: LD_INT 5
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: IN
49602: NOT
49603: OR
49604: PUSH
49605: LD_VAR 0 3
49609: PPUSH
49610: LD_VAR 0 4
49614: PPUSH
49615: CALL_OW 488
49619: NOT
49620: OR
49621: IFFALSE 49625
// exit ;
49623: GO 50361
// side := GetSide ( depot ) ;
49625: LD_ADDR_VAR 0 9
49629: PUSH
49630: LD_VAR 0 1
49634: PPUSH
49635: CALL_OW 255
49639: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
49640: LD_VAR 0 9
49644: PPUSH
49645: LD_VAR 0 2
49649: PPUSH
49650: CALL 49118 0 2
49654: NOT
49655: IFFALSE 49659
// exit ;
49657: GO 50361
// pom := GetBase ( depot ) ;
49659: LD_ADDR_VAR 0 10
49663: PUSH
49664: LD_VAR 0 1
49668: PPUSH
49669: CALL_OW 274
49673: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
49674: LD_ADDR_VAR 0 11
49678: PUSH
49679: LD_VAR 0 2
49683: PPUSH
49684: LD_VAR 0 1
49688: PPUSH
49689: CALL_OW 248
49693: PPUSH
49694: CALL_OW 450
49698: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
49699: LD_VAR 0 10
49703: PPUSH
49704: LD_INT 1
49706: PPUSH
49707: CALL_OW 275
49711: PUSH
49712: LD_VAR 0 11
49716: PUSH
49717: LD_INT 1
49719: ARRAY
49720: GREATEREQUAL
49721: PUSH
49722: LD_VAR 0 10
49726: PPUSH
49727: LD_INT 2
49729: PPUSH
49730: CALL_OW 275
49734: PUSH
49735: LD_VAR 0 11
49739: PUSH
49740: LD_INT 2
49742: ARRAY
49743: GREATEREQUAL
49744: AND
49745: PUSH
49746: LD_VAR 0 10
49750: PPUSH
49751: LD_INT 3
49753: PPUSH
49754: CALL_OW 275
49758: PUSH
49759: LD_VAR 0 11
49763: PUSH
49764: LD_INT 3
49766: ARRAY
49767: GREATEREQUAL
49768: AND
49769: NOT
49770: IFFALSE 49774
// exit ;
49772: GO 50361
// if GetBType ( depot ) = b_depot then
49774: LD_VAR 0 1
49778: PPUSH
49779: CALL_OW 266
49783: PUSH
49784: LD_INT 0
49786: EQUAL
49787: IFFALSE 49799
// dist := 28 else
49789: LD_ADDR_VAR 0 14
49793: PUSH
49794: LD_INT 28
49796: ST_TO_ADDR
49797: GO 49807
// dist := 36 ;
49799: LD_ADDR_VAR 0 14
49803: PUSH
49804: LD_INT 36
49806: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
49807: LD_VAR 0 1
49811: PPUSH
49812: LD_VAR 0 3
49816: PPUSH
49817: LD_VAR 0 4
49821: PPUSH
49822: CALL_OW 297
49826: PUSH
49827: LD_VAR 0 14
49831: GREATER
49832: IFFALSE 49836
// exit ;
49834: GO 50361
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
49836: LD_ADDR_VAR 0 12
49840: PUSH
49841: LD_VAR 0 2
49845: PPUSH
49846: LD_VAR 0 3
49850: PPUSH
49851: LD_VAR 0 4
49855: PPUSH
49856: LD_VAR 0 5
49860: PPUSH
49861: LD_VAR 0 1
49865: PPUSH
49866: CALL_OW 248
49870: PPUSH
49871: LD_INT 0
49873: PPUSH
49874: CALL 50366 0 6
49878: ST_TO_ADDR
// if not hexes then
49879: LD_VAR 0 12
49883: NOT
49884: IFFALSE 49888
// exit ;
49886: GO 50361
// hex := GetHexInfo ( x , y ) ;
49888: LD_ADDR_VAR 0 15
49892: PUSH
49893: LD_VAR 0 3
49897: PPUSH
49898: LD_VAR 0 4
49902: PPUSH
49903: CALL_OW 546
49907: ST_TO_ADDR
// if hex [ 1 ] then
49908: LD_VAR 0 15
49912: PUSH
49913: LD_INT 1
49915: ARRAY
49916: IFFALSE 49920
// exit ;
49918: GO 50361
// height := hex [ 2 ] ;
49920: LD_ADDR_VAR 0 13
49924: PUSH
49925: LD_VAR 0 15
49929: PUSH
49930: LD_INT 2
49932: ARRAY
49933: ST_TO_ADDR
// for i = 1 to hexes do
49934: LD_ADDR_VAR 0 7
49938: PUSH
49939: DOUBLE
49940: LD_INT 1
49942: DEC
49943: ST_TO_ADDR
49944: LD_VAR 0 12
49948: PUSH
49949: FOR_TO
49950: IFFALSE 50280
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
49952: LD_VAR 0 12
49956: PUSH
49957: LD_VAR 0 7
49961: ARRAY
49962: PUSH
49963: LD_INT 1
49965: ARRAY
49966: PPUSH
49967: LD_VAR 0 12
49971: PUSH
49972: LD_VAR 0 7
49976: ARRAY
49977: PUSH
49978: LD_INT 2
49980: ARRAY
49981: PPUSH
49982: CALL_OW 488
49986: NOT
49987: PUSH
49988: LD_VAR 0 12
49992: PUSH
49993: LD_VAR 0 7
49997: ARRAY
49998: PUSH
49999: LD_INT 1
50001: ARRAY
50002: PPUSH
50003: LD_VAR 0 12
50007: PUSH
50008: LD_VAR 0 7
50012: ARRAY
50013: PUSH
50014: LD_INT 2
50016: ARRAY
50017: PPUSH
50018: CALL_OW 428
50022: PUSH
50023: LD_INT 0
50025: GREATER
50026: OR
50027: PUSH
50028: LD_VAR 0 12
50032: PUSH
50033: LD_VAR 0 7
50037: ARRAY
50038: PUSH
50039: LD_INT 1
50041: ARRAY
50042: PPUSH
50043: LD_VAR 0 12
50047: PUSH
50048: LD_VAR 0 7
50052: ARRAY
50053: PUSH
50054: LD_INT 2
50056: ARRAY
50057: PPUSH
50058: CALL_OW 351
50062: OR
50063: IFFALSE 50069
// exit ;
50065: POP
50066: POP
50067: GO 50361
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50069: LD_ADDR_VAR 0 8
50073: PUSH
50074: LD_VAR 0 12
50078: PUSH
50079: LD_VAR 0 7
50083: ARRAY
50084: PUSH
50085: LD_INT 1
50087: ARRAY
50088: PPUSH
50089: LD_VAR 0 12
50093: PUSH
50094: LD_VAR 0 7
50098: ARRAY
50099: PUSH
50100: LD_INT 2
50102: ARRAY
50103: PPUSH
50104: CALL_OW 546
50108: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
50109: LD_VAR 0 8
50113: PUSH
50114: LD_INT 1
50116: ARRAY
50117: PUSH
50118: LD_VAR 0 8
50122: PUSH
50123: LD_INT 2
50125: ARRAY
50126: PUSH
50127: LD_VAR 0 13
50131: PUSH
50132: LD_INT 2
50134: PLUS
50135: GREATER
50136: OR
50137: PUSH
50138: LD_VAR 0 8
50142: PUSH
50143: LD_INT 2
50145: ARRAY
50146: PUSH
50147: LD_VAR 0 13
50151: PUSH
50152: LD_INT 2
50154: MINUS
50155: LESS
50156: OR
50157: PUSH
50158: LD_VAR 0 8
50162: PUSH
50163: LD_INT 3
50165: ARRAY
50166: PUSH
50167: LD_INT 0
50169: PUSH
50170: LD_INT 8
50172: PUSH
50173: LD_INT 9
50175: PUSH
50176: LD_INT 10
50178: PUSH
50179: LD_INT 11
50181: PUSH
50182: LD_INT 12
50184: PUSH
50185: LD_INT 13
50187: PUSH
50188: LD_INT 16
50190: PUSH
50191: LD_INT 17
50193: PUSH
50194: LD_INT 18
50196: PUSH
50197: LD_INT 19
50199: PUSH
50200: LD_INT 20
50202: PUSH
50203: LD_INT 21
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: IN
50221: NOT
50222: OR
50223: PUSH
50224: LD_VAR 0 8
50228: PUSH
50229: LD_INT 5
50231: ARRAY
50232: NOT
50233: OR
50234: PUSH
50235: LD_VAR 0 8
50239: PUSH
50240: LD_INT 6
50242: ARRAY
50243: PUSH
50244: LD_INT 1
50246: PUSH
50247: LD_INT 2
50249: PUSH
50250: LD_INT 7
50252: PUSH
50253: LD_INT 9
50255: PUSH
50256: LD_INT 10
50258: PUSH
50259: LD_INT 11
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: IN
50270: NOT
50271: OR
50272: IFFALSE 50278
// exit ;
50274: POP
50275: POP
50276: GO 50361
// end ;
50278: GO 49949
50280: POP
50281: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
50282: LD_VAR 0 9
50286: PPUSH
50287: LD_VAR 0 3
50291: PPUSH
50292: LD_VAR 0 4
50296: PPUSH
50297: LD_INT 20
50299: PPUSH
50300: CALL 42284 0 4
50304: PUSH
50305: LD_INT 4
50307: ARRAY
50308: IFFALSE 50312
// exit ;
50310: GO 50361
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
50312: LD_VAR 0 2
50316: PUSH
50317: LD_INT 29
50319: PUSH
50320: LD_INT 30
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: IN
50327: PUSH
50328: LD_VAR 0 3
50332: PPUSH
50333: LD_VAR 0 4
50337: PPUSH
50338: LD_VAR 0 9
50342: PPUSH
50343: CALL_OW 440
50347: NOT
50348: AND
50349: IFFALSE 50353
// exit ;
50351: GO 50361
// result := true ;
50353: LD_ADDR_VAR 0 6
50357: PUSH
50358: LD_INT 1
50360: ST_TO_ADDR
// end ;
50361: LD_VAR 0 6
50365: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
50366: LD_INT 0
50368: PPUSH
50369: PPUSH
50370: PPUSH
50371: PPUSH
50372: PPUSH
50373: PPUSH
50374: PPUSH
50375: PPUSH
50376: PPUSH
50377: PPUSH
50378: PPUSH
50379: PPUSH
50380: PPUSH
50381: PPUSH
50382: PPUSH
50383: PPUSH
50384: PPUSH
50385: PPUSH
50386: PPUSH
50387: PPUSH
50388: PPUSH
50389: PPUSH
50390: PPUSH
50391: PPUSH
50392: PPUSH
50393: PPUSH
50394: PPUSH
50395: PPUSH
50396: PPUSH
50397: PPUSH
50398: PPUSH
50399: PPUSH
50400: PPUSH
50401: PPUSH
50402: PPUSH
50403: PPUSH
50404: PPUSH
50405: PPUSH
50406: PPUSH
50407: PPUSH
50408: PPUSH
50409: PPUSH
50410: PPUSH
50411: PPUSH
50412: PPUSH
50413: PPUSH
50414: PPUSH
50415: PPUSH
50416: PPUSH
50417: PPUSH
50418: PPUSH
50419: PPUSH
50420: PPUSH
50421: PPUSH
50422: PPUSH
50423: PPUSH
50424: PPUSH
50425: PPUSH
// result = [ ] ;
50426: LD_ADDR_VAR 0 7
50430: PUSH
50431: EMPTY
50432: ST_TO_ADDR
// temp_list = [ ] ;
50433: LD_ADDR_VAR 0 9
50437: PUSH
50438: EMPTY
50439: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
50440: LD_VAR 0 4
50444: PUSH
50445: LD_INT 0
50447: PUSH
50448: LD_INT 1
50450: PUSH
50451: LD_INT 2
50453: PUSH
50454: LD_INT 3
50456: PUSH
50457: LD_INT 4
50459: PUSH
50460: LD_INT 5
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: IN
50471: NOT
50472: PUSH
50473: LD_VAR 0 1
50477: PUSH
50478: LD_INT 0
50480: PUSH
50481: LD_INT 1
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: IN
50488: PUSH
50489: LD_VAR 0 5
50493: PUSH
50494: LD_INT 1
50496: PUSH
50497: LD_INT 2
50499: PUSH
50500: LD_INT 3
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: LIST
50507: IN
50508: NOT
50509: AND
50510: OR
50511: IFFALSE 50515
// exit ;
50513: GO 68906
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
50515: LD_VAR 0 1
50519: PUSH
50520: LD_INT 6
50522: PUSH
50523: LD_INT 7
50525: PUSH
50526: LD_INT 8
50528: PUSH
50529: LD_INT 13
50531: PUSH
50532: LD_INT 12
50534: PUSH
50535: LD_INT 15
50537: PUSH
50538: LD_INT 11
50540: PUSH
50541: LD_INT 14
50543: PUSH
50544: LD_INT 10
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: IN
50558: IFFALSE 50568
// btype = b_lab ;
50560: LD_ADDR_VAR 0 1
50564: PUSH
50565: LD_INT 6
50567: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
50568: LD_VAR 0 6
50572: PUSH
50573: LD_INT 0
50575: PUSH
50576: LD_INT 1
50578: PUSH
50579: LD_INT 2
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: LIST
50586: IN
50587: NOT
50588: PUSH
50589: LD_VAR 0 1
50593: PUSH
50594: LD_INT 0
50596: PUSH
50597: LD_INT 1
50599: PUSH
50600: LD_INT 2
50602: PUSH
50603: LD_INT 3
50605: PUSH
50606: LD_INT 6
50608: PUSH
50609: LD_INT 36
50611: PUSH
50612: LD_INT 4
50614: PUSH
50615: LD_INT 5
50617: PUSH
50618: LD_INT 31
50620: PUSH
50621: LD_INT 32
50623: PUSH
50624: LD_INT 33
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: IN
50640: NOT
50641: PUSH
50642: LD_VAR 0 6
50646: PUSH
50647: LD_INT 1
50649: EQUAL
50650: AND
50651: OR
50652: PUSH
50653: LD_VAR 0 1
50657: PUSH
50658: LD_INT 2
50660: PUSH
50661: LD_INT 3
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: IN
50668: NOT
50669: PUSH
50670: LD_VAR 0 6
50674: PUSH
50675: LD_INT 2
50677: EQUAL
50678: AND
50679: OR
50680: IFFALSE 50690
// mode = 0 ;
50682: LD_ADDR_VAR 0 6
50686: PUSH
50687: LD_INT 0
50689: ST_TO_ADDR
// case mode of 0 :
50690: LD_VAR 0 6
50694: PUSH
50695: LD_INT 0
50697: DOUBLE
50698: EQUAL
50699: IFTRUE 50703
50701: GO 62156
50703: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50704: LD_ADDR_VAR 0 11
50708: PUSH
50709: LD_INT 0
50711: PUSH
50712: LD_INT 0
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 0
50721: PUSH
50722: LD_INT 1
50724: NEG
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 1
50732: PUSH
50733: LD_INT 0
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 1
50742: PUSH
50743: LD_INT 1
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 0
50752: PUSH
50753: LD_INT 1
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 1
50762: NEG
50763: PUSH
50764: LD_INT 0
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 1
50773: NEG
50774: PUSH
50775: LD_INT 1
50777: NEG
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 1
50785: NEG
50786: PUSH
50787: LD_INT 2
50789: NEG
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 0
50797: PUSH
50798: LD_INT 2
50800: NEG
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 1
50808: PUSH
50809: LD_INT 1
50811: NEG
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 1
50819: PUSH
50820: LD_INT 2
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 0
50829: PUSH
50830: LD_INT 2
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 1
50839: NEG
50840: PUSH
50841: LD_INT 1
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 1
50850: PUSH
50851: LD_INT 3
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: LD_INT 0
50860: PUSH
50861: LD_INT 3
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 1
50870: NEG
50871: PUSH
50872: LD_INT 2
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50897: LD_ADDR_VAR 0 12
50901: PUSH
50902: LD_INT 0
50904: PUSH
50905: LD_INT 0
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 0
50914: PUSH
50915: LD_INT 1
50917: NEG
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 1
50925: PUSH
50926: LD_INT 0
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 1
50935: PUSH
50936: LD_INT 1
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 0
50945: PUSH
50946: LD_INT 1
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 1
50955: NEG
50956: PUSH
50957: LD_INT 0
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 1
50966: NEG
50967: PUSH
50968: LD_INT 1
50970: NEG
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 1
50978: PUSH
50979: LD_INT 1
50981: NEG
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 2
50989: PUSH
50990: LD_INT 0
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 2
50999: PUSH
51000: LD_INT 1
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 1
51009: NEG
51010: PUSH
51011: LD_INT 1
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 2
51020: NEG
51021: PUSH
51022: LD_INT 0
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 2
51031: NEG
51032: PUSH
51033: LD_INT 1
51035: NEG
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 2
51043: NEG
51044: PUSH
51045: LD_INT 1
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 3
51054: NEG
51055: PUSH
51056: LD_INT 0
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 3
51065: NEG
51066: PUSH
51067: LD_INT 1
51069: NEG
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51093: LD_ADDR_VAR 0 13
51097: PUSH
51098: LD_INT 0
51100: PUSH
51101: LD_INT 0
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 0
51110: PUSH
51111: LD_INT 1
51113: NEG
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 1
51121: PUSH
51122: LD_INT 0
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 1
51131: PUSH
51132: LD_INT 1
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 0
51141: PUSH
51142: LD_INT 1
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 1
51151: NEG
51152: PUSH
51153: LD_INT 0
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 1
51162: NEG
51163: PUSH
51164: LD_INT 1
51166: NEG
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 1
51174: NEG
51175: PUSH
51176: LD_INT 2
51178: NEG
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 2
51186: PUSH
51187: LD_INT 1
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 2
51196: PUSH
51197: LD_INT 2
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 1
51206: PUSH
51207: LD_INT 2
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 2
51216: NEG
51217: PUSH
51218: LD_INT 1
51220: NEG
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 2
51228: NEG
51229: PUSH
51230: LD_INT 2
51232: NEG
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 2
51240: NEG
51241: PUSH
51242: LD_INT 3
51244: NEG
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 3
51252: NEG
51253: PUSH
51254: LD_INT 2
51256: NEG
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 3
51264: NEG
51265: PUSH
51266: LD_INT 3
51268: NEG
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51292: LD_ADDR_VAR 0 14
51296: PUSH
51297: LD_INT 0
51299: PUSH
51300: LD_INT 0
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 0
51309: PUSH
51310: LD_INT 1
51312: NEG
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 1
51320: PUSH
51321: LD_INT 0
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 1
51330: PUSH
51331: LD_INT 1
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 0
51340: PUSH
51341: LD_INT 1
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 1
51350: NEG
51351: PUSH
51352: LD_INT 0
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 1
51361: NEG
51362: PUSH
51363: LD_INT 1
51365: NEG
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 1
51373: NEG
51374: PUSH
51375: LD_INT 2
51377: NEG
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 0
51385: PUSH
51386: LD_INT 2
51388: NEG
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 1
51396: PUSH
51397: LD_INT 1
51399: NEG
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 1
51407: PUSH
51408: LD_INT 2
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 0
51417: PUSH
51418: LD_INT 2
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 1
51427: NEG
51428: PUSH
51429: LD_INT 1
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 1
51438: NEG
51439: PUSH
51440: LD_INT 3
51442: NEG
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 0
51450: PUSH
51451: LD_INT 3
51453: NEG
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 1
51461: PUSH
51462: LD_INT 2
51464: NEG
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51488: LD_ADDR_VAR 0 15
51492: PUSH
51493: LD_INT 0
51495: PUSH
51496: LD_INT 0
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 0
51505: PUSH
51506: LD_INT 1
51508: NEG
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 1
51516: PUSH
51517: LD_INT 0
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 1
51526: PUSH
51527: LD_INT 1
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 0
51536: PUSH
51537: LD_INT 1
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 1
51546: NEG
51547: PUSH
51548: LD_INT 0
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 1
51557: NEG
51558: PUSH
51559: LD_INT 1
51561: NEG
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 1
51569: PUSH
51570: LD_INT 1
51572: NEG
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 2
51580: PUSH
51581: LD_INT 0
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 2
51590: PUSH
51591: LD_INT 1
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 1
51600: NEG
51601: PUSH
51602: LD_INT 1
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 2
51611: NEG
51612: PUSH
51613: LD_INT 0
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 2
51622: NEG
51623: PUSH
51624: LD_INT 1
51626: NEG
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 2
51634: PUSH
51635: LD_INT 1
51637: NEG
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 3
51645: PUSH
51646: LD_INT 0
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 3
51655: PUSH
51656: LD_INT 1
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51681: LD_ADDR_VAR 0 16
51685: PUSH
51686: LD_INT 0
51688: PUSH
51689: LD_INT 0
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 0
51698: PUSH
51699: LD_INT 1
51701: NEG
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 1
51709: PUSH
51710: LD_INT 0
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 1
51719: PUSH
51720: LD_INT 1
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 0
51729: PUSH
51730: LD_INT 1
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 1
51739: NEG
51740: PUSH
51741: LD_INT 0
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 1
51750: NEG
51751: PUSH
51752: LD_INT 1
51754: NEG
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 1
51762: NEG
51763: PUSH
51764: LD_INT 2
51766: NEG
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 2
51774: PUSH
51775: LD_INT 1
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 2
51784: PUSH
51785: LD_INT 2
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 1
51794: PUSH
51795: LD_INT 2
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 2
51804: NEG
51805: PUSH
51806: LD_INT 1
51808: NEG
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 2
51816: NEG
51817: PUSH
51818: LD_INT 2
51820: NEG
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 3
51828: PUSH
51829: LD_INT 2
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 3
51838: PUSH
51839: LD_INT 3
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 2
51848: PUSH
51849: LD_INT 3
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51874: LD_ADDR_VAR 0 17
51878: PUSH
51879: LD_INT 0
51881: PUSH
51882: LD_INT 0
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 0
51891: PUSH
51892: LD_INT 1
51894: NEG
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 1
51902: PUSH
51903: LD_INT 0
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 1
51912: PUSH
51913: LD_INT 1
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 0
51922: PUSH
51923: LD_INT 1
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 1
51932: NEG
51933: PUSH
51934: LD_INT 0
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 1
51943: NEG
51944: PUSH
51945: LD_INT 1
51947: NEG
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 1
51955: NEG
51956: PUSH
51957: LD_INT 2
51959: NEG
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 0
51967: PUSH
51968: LD_INT 2
51970: NEG
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 1
51978: PUSH
51979: LD_INT 1
51981: NEG
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 2
51989: PUSH
51990: LD_INT 0
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 2
51999: PUSH
52000: LD_INT 1
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 2
52009: PUSH
52010: LD_INT 2
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 1
52019: PUSH
52020: LD_INT 2
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 0
52029: PUSH
52030: LD_INT 2
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 1
52039: NEG
52040: PUSH
52041: LD_INT 1
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 2
52050: NEG
52051: PUSH
52052: LD_INT 0
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 2
52061: NEG
52062: PUSH
52063: LD_INT 1
52065: NEG
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 2
52073: NEG
52074: PUSH
52075: LD_INT 2
52077: NEG
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52104: LD_ADDR_VAR 0 18
52108: PUSH
52109: LD_INT 0
52111: PUSH
52112: LD_INT 0
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 0
52121: PUSH
52122: LD_INT 1
52124: NEG
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 1
52132: PUSH
52133: LD_INT 0
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 1
52142: PUSH
52143: LD_INT 1
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 0
52152: PUSH
52153: LD_INT 1
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 1
52162: NEG
52163: PUSH
52164: LD_INT 0
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 1
52173: NEG
52174: PUSH
52175: LD_INT 1
52177: NEG
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 1
52185: NEG
52186: PUSH
52187: LD_INT 2
52189: NEG
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 0
52197: PUSH
52198: LD_INT 2
52200: NEG
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 1
52208: PUSH
52209: LD_INT 1
52211: NEG
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 2
52219: PUSH
52220: LD_INT 0
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 2
52229: PUSH
52230: LD_INT 1
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 2
52239: PUSH
52240: LD_INT 2
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 1
52249: PUSH
52250: LD_INT 2
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 0
52259: PUSH
52260: LD_INT 2
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 1
52269: NEG
52270: PUSH
52271: LD_INT 1
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 2
52280: NEG
52281: PUSH
52282: LD_INT 0
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 2
52291: NEG
52292: PUSH
52293: LD_INT 1
52295: NEG
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 2
52303: NEG
52304: PUSH
52305: LD_INT 2
52307: NEG
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52334: LD_ADDR_VAR 0 19
52338: PUSH
52339: LD_INT 0
52341: PUSH
52342: LD_INT 0
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 0
52351: PUSH
52352: LD_INT 1
52354: NEG
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 1
52362: PUSH
52363: LD_INT 0
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 1
52372: PUSH
52373: LD_INT 1
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 0
52382: PUSH
52383: LD_INT 1
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 1
52392: NEG
52393: PUSH
52394: LD_INT 0
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 1
52403: NEG
52404: PUSH
52405: LD_INT 1
52407: NEG
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 1
52415: NEG
52416: PUSH
52417: LD_INT 2
52419: NEG
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 0
52427: PUSH
52428: LD_INT 2
52430: NEG
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 1
52438: PUSH
52439: LD_INT 1
52441: NEG
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: PUSH
52447: LD_INT 2
52449: PUSH
52450: LD_INT 0
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 2
52459: PUSH
52460: LD_INT 1
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 2
52469: PUSH
52470: LD_INT 2
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 1
52479: PUSH
52480: LD_INT 2
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 0
52489: PUSH
52490: LD_INT 2
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 1
52499: NEG
52500: PUSH
52501: LD_INT 1
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 2
52510: NEG
52511: PUSH
52512: LD_INT 0
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 2
52521: NEG
52522: PUSH
52523: LD_INT 1
52525: NEG
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 2
52533: NEG
52534: PUSH
52535: LD_INT 2
52537: NEG
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52564: LD_ADDR_VAR 0 20
52568: PUSH
52569: LD_INT 0
52571: PUSH
52572: LD_INT 0
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 0
52581: PUSH
52582: LD_INT 1
52584: NEG
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 1
52592: PUSH
52593: LD_INT 0
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 1
52602: PUSH
52603: LD_INT 1
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 0
52612: PUSH
52613: LD_INT 1
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 1
52622: NEG
52623: PUSH
52624: LD_INT 0
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 1
52633: NEG
52634: PUSH
52635: LD_INT 1
52637: NEG
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 1
52645: NEG
52646: PUSH
52647: LD_INT 2
52649: NEG
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 0
52657: PUSH
52658: LD_INT 2
52660: NEG
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 1
52668: PUSH
52669: LD_INT 1
52671: NEG
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 2
52679: PUSH
52680: LD_INT 0
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 2
52689: PUSH
52690: LD_INT 1
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 2
52699: PUSH
52700: LD_INT 2
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 1
52709: PUSH
52710: LD_INT 2
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 0
52719: PUSH
52720: LD_INT 2
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 1
52729: NEG
52730: PUSH
52731: LD_INT 1
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 2
52740: NEG
52741: PUSH
52742: LD_INT 0
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 2
52751: NEG
52752: PUSH
52753: LD_INT 1
52755: NEG
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 2
52763: NEG
52764: PUSH
52765: LD_INT 2
52767: NEG
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52794: LD_ADDR_VAR 0 21
52798: PUSH
52799: LD_INT 0
52801: PUSH
52802: LD_INT 0
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 0
52811: PUSH
52812: LD_INT 1
52814: NEG
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 1
52822: PUSH
52823: LD_INT 0
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 1
52832: PUSH
52833: LD_INT 1
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 0
52842: PUSH
52843: LD_INT 1
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 1
52852: NEG
52853: PUSH
52854: LD_INT 0
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 1
52863: NEG
52864: PUSH
52865: LD_INT 1
52867: NEG
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 1
52875: NEG
52876: PUSH
52877: LD_INT 2
52879: NEG
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 0
52887: PUSH
52888: LD_INT 2
52890: NEG
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 1
52898: PUSH
52899: LD_INT 1
52901: NEG
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 2
52909: PUSH
52910: LD_INT 0
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 2
52919: PUSH
52920: LD_INT 1
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 2
52929: PUSH
52930: LD_INT 2
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 1
52939: PUSH
52940: LD_INT 2
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 0
52949: PUSH
52950: LD_INT 2
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 1
52959: NEG
52960: PUSH
52961: LD_INT 1
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 2
52970: NEG
52971: PUSH
52972: LD_INT 0
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 2
52981: NEG
52982: PUSH
52983: LD_INT 1
52985: NEG
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 2
52993: NEG
52994: PUSH
52995: LD_INT 2
52997: NEG
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53024: LD_ADDR_VAR 0 22
53028: PUSH
53029: LD_INT 0
53031: PUSH
53032: LD_INT 0
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 0
53041: PUSH
53042: LD_INT 1
53044: NEG
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 1
53052: PUSH
53053: LD_INT 0
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 1
53062: PUSH
53063: LD_INT 1
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 0
53072: PUSH
53073: LD_INT 1
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 1
53082: NEG
53083: PUSH
53084: LD_INT 0
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 1
53093: NEG
53094: PUSH
53095: LD_INT 1
53097: NEG
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 1
53105: NEG
53106: PUSH
53107: LD_INT 2
53109: NEG
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 0
53117: PUSH
53118: LD_INT 2
53120: NEG
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 1
53128: PUSH
53129: LD_INT 1
53131: NEG
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 2
53139: PUSH
53140: LD_INT 0
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 2
53149: PUSH
53150: LD_INT 1
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 2
53159: PUSH
53160: LD_INT 2
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 1
53169: PUSH
53170: LD_INT 2
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: LD_INT 0
53179: PUSH
53180: LD_INT 2
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 1
53189: NEG
53190: PUSH
53191: LD_INT 1
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 2
53200: NEG
53201: PUSH
53202: LD_INT 0
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 2
53211: NEG
53212: PUSH
53213: LD_INT 1
53215: NEG
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 2
53223: NEG
53224: PUSH
53225: LD_INT 2
53227: NEG
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53254: LD_ADDR_VAR 0 23
53258: PUSH
53259: LD_INT 0
53261: PUSH
53262: LD_INT 0
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 0
53271: PUSH
53272: LD_INT 1
53274: NEG
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 1
53282: PUSH
53283: LD_INT 0
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 1
53292: PUSH
53293: LD_INT 1
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 0
53302: PUSH
53303: LD_INT 1
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 1
53312: NEG
53313: PUSH
53314: LD_INT 0
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 1
53323: NEG
53324: PUSH
53325: LD_INT 1
53327: NEG
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 1
53335: NEG
53336: PUSH
53337: LD_INT 2
53339: NEG
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 0
53347: PUSH
53348: LD_INT 2
53350: NEG
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 1
53358: PUSH
53359: LD_INT 1
53361: NEG
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 2
53369: PUSH
53370: LD_INT 0
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 2
53379: PUSH
53380: LD_INT 1
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 2
53389: PUSH
53390: LD_INT 2
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 1
53399: PUSH
53400: LD_INT 2
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 0
53409: PUSH
53410: LD_INT 2
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 1
53419: NEG
53420: PUSH
53421: LD_INT 1
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 2
53430: NEG
53431: PUSH
53432: LD_INT 0
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 2
53441: NEG
53442: PUSH
53443: LD_INT 1
53445: NEG
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 2
53453: NEG
53454: PUSH
53455: LD_INT 2
53457: NEG
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 2
53465: NEG
53466: PUSH
53467: LD_INT 3
53469: NEG
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 1
53477: NEG
53478: PUSH
53479: LD_INT 3
53481: NEG
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_INT 1
53489: PUSH
53490: LD_INT 2
53492: NEG
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 2
53500: PUSH
53501: LD_INT 1
53503: NEG
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
53534: LD_ADDR_VAR 0 24
53538: PUSH
53539: LD_INT 0
53541: PUSH
53542: LD_INT 0
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 0
53551: PUSH
53552: LD_INT 1
53554: NEG
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 1
53562: PUSH
53563: LD_INT 0
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 1
53572: PUSH
53573: LD_INT 1
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 0
53582: PUSH
53583: LD_INT 1
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 1
53592: NEG
53593: PUSH
53594: LD_INT 0
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 1
53603: NEG
53604: PUSH
53605: LD_INT 1
53607: NEG
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 1
53615: NEG
53616: PUSH
53617: LD_INT 2
53619: NEG
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 0
53627: PUSH
53628: LD_INT 2
53630: NEG
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 1
53638: PUSH
53639: LD_INT 1
53641: NEG
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 2
53649: PUSH
53650: LD_INT 0
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 2
53659: PUSH
53660: LD_INT 1
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 2
53669: PUSH
53670: LD_INT 2
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 1
53679: PUSH
53680: LD_INT 2
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 0
53689: PUSH
53690: LD_INT 2
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 1
53699: NEG
53700: PUSH
53701: LD_INT 1
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 2
53710: NEG
53711: PUSH
53712: LD_INT 0
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 2
53721: NEG
53722: PUSH
53723: LD_INT 1
53725: NEG
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 2
53733: NEG
53734: PUSH
53735: LD_INT 2
53737: NEG
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: PUSH
53743: LD_INT 1
53745: PUSH
53746: LD_INT 2
53748: NEG
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 2
53756: PUSH
53757: LD_INT 1
53759: NEG
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 3
53767: PUSH
53768: LD_INT 1
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 3
53777: PUSH
53778: LD_INT 2
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
53810: LD_ADDR_VAR 0 25
53814: PUSH
53815: LD_INT 0
53817: PUSH
53818: LD_INT 0
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 0
53827: PUSH
53828: LD_INT 1
53830: NEG
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 1
53838: PUSH
53839: LD_INT 0
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 1
53848: PUSH
53849: LD_INT 1
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 0
53858: PUSH
53859: LD_INT 1
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 1
53868: NEG
53869: PUSH
53870: LD_INT 0
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 1
53879: NEG
53880: PUSH
53881: LD_INT 1
53883: NEG
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 1
53891: NEG
53892: PUSH
53893: LD_INT 2
53895: NEG
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 0
53903: PUSH
53904: LD_INT 2
53906: NEG
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 1
53914: PUSH
53915: LD_INT 1
53917: NEG
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 2
53925: PUSH
53926: LD_INT 0
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 2
53935: PUSH
53936: LD_INT 1
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 2
53945: PUSH
53946: LD_INT 2
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 1
53955: PUSH
53956: LD_INT 2
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 0
53965: PUSH
53966: LD_INT 2
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 1
53975: NEG
53976: PUSH
53977: LD_INT 1
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 2
53986: NEG
53987: PUSH
53988: LD_INT 0
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 2
53997: NEG
53998: PUSH
53999: LD_INT 1
54001: NEG
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 2
54009: NEG
54010: PUSH
54011: LD_INT 2
54013: NEG
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 3
54021: PUSH
54022: LD_INT 1
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 3
54031: PUSH
54032: LD_INT 2
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 2
54041: PUSH
54042: LD_INT 3
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 1
54051: PUSH
54052: LD_INT 3
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54084: LD_ADDR_VAR 0 26
54088: PUSH
54089: LD_INT 0
54091: PUSH
54092: LD_INT 0
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 0
54101: PUSH
54102: LD_INT 1
54104: NEG
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 1
54112: PUSH
54113: LD_INT 0
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 1
54122: PUSH
54123: LD_INT 1
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 0
54132: PUSH
54133: LD_INT 1
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 1
54142: NEG
54143: PUSH
54144: LD_INT 0
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 1
54153: NEG
54154: PUSH
54155: LD_INT 1
54157: NEG
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 1
54165: NEG
54166: PUSH
54167: LD_INT 2
54169: NEG
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 0
54177: PUSH
54178: LD_INT 2
54180: NEG
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 1
54188: PUSH
54189: LD_INT 1
54191: NEG
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 2
54199: PUSH
54200: LD_INT 0
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 2
54209: PUSH
54210: LD_INT 1
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 2
54219: PUSH
54220: LD_INT 2
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 1
54229: PUSH
54230: LD_INT 2
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 0
54239: PUSH
54240: LD_INT 2
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 1
54249: NEG
54250: PUSH
54251: LD_INT 1
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 2
54260: NEG
54261: PUSH
54262: LD_INT 0
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 2
54271: NEG
54272: PUSH
54273: LD_INT 1
54275: NEG
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 2
54283: NEG
54284: PUSH
54285: LD_INT 2
54287: NEG
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 2
54295: PUSH
54296: LD_INT 3
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 1
54305: PUSH
54306: LD_INT 3
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 1
54315: NEG
54316: PUSH
54317: LD_INT 2
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 2
54326: NEG
54327: PUSH
54328: LD_INT 1
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54360: LD_ADDR_VAR 0 27
54364: PUSH
54365: LD_INT 0
54367: PUSH
54368: LD_INT 0
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 0
54377: PUSH
54378: LD_INT 1
54380: NEG
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 1
54388: PUSH
54389: LD_INT 0
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 1
54398: PUSH
54399: LD_INT 1
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 0
54408: PUSH
54409: LD_INT 1
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 1
54418: NEG
54419: PUSH
54420: LD_INT 0
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 1
54429: NEG
54430: PUSH
54431: LD_INT 1
54433: NEG
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 1
54441: NEG
54442: PUSH
54443: LD_INT 2
54445: NEG
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 0
54453: PUSH
54454: LD_INT 2
54456: NEG
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 1
54464: PUSH
54465: LD_INT 1
54467: NEG
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 2
54475: PUSH
54476: LD_INT 0
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 2
54485: PUSH
54486: LD_INT 1
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 2
54495: PUSH
54496: LD_INT 2
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 1
54505: PUSH
54506: LD_INT 2
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 0
54515: PUSH
54516: LD_INT 2
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 1
54525: NEG
54526: PUSH
54527: LD_INT 1
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 2
54536: NEG
54537: PUSH
54538: LD_INT 0
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 2
54547: NEG
54548: PUSH
54549: LD_INT 1
54551: NEG
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 2
54559: NEG
54560: PUSH
54561: LD_INT 2
54563: NEG
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 1
54571: NEG
54572: PUSH
54573: LD_INT 2
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 2
54582: NEG
54583: PUSH
54584: LD_INT 1
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 3
54593: NEG
54594: PUSH
54595: LD_INT 1
54597: NEG
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 3
54605: NEG
54606: PUSH
54607: LD_INT 2
54609: NEG
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54640: LD_ADDR_VAR 0 28
54644: PUSH
54645: LD_INT 0
54647: PUSH
54648: LD_INT 0
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 0
54657: PUSH
54658: LD_INT 1
54660: NEG
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: LD_INT 1
54668: PUSH
54669: LD_INT 0
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 1
54678: PUSH
54679: LD_INT 1
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 0
54688: PUSH
54689: LD_INT 1
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 1
54698: NEG
54699: PUSH
54700: LD_INT 0
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 1
54709: NEG
54710: PUSH
54711: LD_INT 1
54713: NEG
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 1
54721: NEG
54722: PUSH
54723: LD_INT 2
54725: NEG
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 0
54733: PUSH
54734: LD_INT 2
54736: NEG
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 1
54744: PUSH
54745: LD_INT 1
54747: NEG
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 2
54755: PUSH
54756: LD_INT 0
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 2
54765: PUSH
54766: LD_INT 1
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 2
54775: PUSH
54776: LD_INT 2
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 1
54785: PUSH
54786: LD_INT 2
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 0
54795: PUSH
54796: LD_INT 2
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 1
54805: NEG
54806: PUSH
54807: LD_INT 1
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 2
54816: NEG
54817: PUSH
54818: LD_INT 0
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 2
54827: NEG
54828: PUSH
54829: LD_INT 1
54831: NEG
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 2
54839: NEG
54840: PUSH
54841: LD_INT 2
54843: NEG
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 2
54851: NEG
54852: PUSH
54853: LD_INT 3
54855: NEG
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 1
54863: NEG
54864: PUSH
54865: LD_INT 3
54867: NEG
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 3
54875: NEG
54876: PUSH
54877: LD_INT 1
54879: NEG
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 3
54887: NEG
54888: PUSH
54889: LD_INT 2
54891: NEG
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54922: LD_ADDR_VAR 0 29
54926: PUSH
54927: LD_INT 0
54929: PUSH
54930: LD_INT 0
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 0
54939: PUSH
54940: LD_INT 1
54942: NEG
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 1
54950: PUSH
54951: LD_INT 0
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 1
54960: PUSH
54961: LD_INT 1
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 0
54970: PUSH
54971: LD_INT 1
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 1
54980: NEG
54981: PUSH
54982: LD_INT 0
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 1
54991: NEG
54992: PUSH
54993: LD_INT 1
54995: NEG
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 1
55003: NEG
55004: PUSH
55005: LD_INT 2
55007: NEG
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 0
55015: PUSH
55016: LD_INT 2
55018: NEG
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 1
55026: PUSH
55027: LD_INT 1
55029: NEG
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 2
55037: PUSH
55038: LD_INT 0
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 2
55047: PUSH
55048: LD_INT 1
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 1
55057: PUSH
55058: LD_INT 2
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 0
55067: PUSH
55068: LD_INT 2
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 1
55077: NEG
55078: PUSH
55079: LD_INT 1
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 2
55088: NEG
55089: PUSH
55090: LD_INT 1
55092: NEG
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 2
55100: NEG
55101: PUSH
55102: LD_INT 2
55104: NEG
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 2
55112: NEG
55113: PUSH
55114: LD_INT 3
55116: NEG
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 2
55124: PUSH
55125: LD_INT 1
55127: NEG
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 3
55135: PUSH
55136: LD_INT 1
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 1
55145: PUSH
55146: LD_INT 3
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 1
55155: NEG
55156: PUSH
55157: LD_INT 2
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 3
55166: NEG
55167: PUSH
55168: LD_INT 2
55170: NEG
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55201: LD_ADDR_VAR 0 30
55205: PUSH
55206: LD_INT 0
55208: PUSH
55209: LD_INT 0
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 0
55218: PUSH
55219: LD_INT 1
55221: NEG
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 1
55229: PUSH
55230: LD_INT 0
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 1
55239: PUSH
55240: LD_INT 1
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 0
55249: PUSH
55250: LD_INT 1
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 1
55259: NEG
55260: PUSH
55261: LD_INT 0
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 1
55270: NEG
55271: PUSH
55272: LD_INT 1
55274: NEG
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 1
55282: NEG
55283: PUSH
55284: LD_INT 2
55286: NEG
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 0
55294: PUSH
55295: LD_INT 2
55297: NEG
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 1
55305: PUSH
55306: LD_INT 1
55308: NEG
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 2
55316: PUSH
55317: LD_INT 0
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 2
55326: PUSH
55327: LD_INT 1
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 2
55336: PUSH
55337: LD_INT 2
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 1
55346: PUSH
55347: LD_INT 2
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 1
55356: NEG
55357: PUSH
55358: LD_INT 1
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 2
55367: NEG
55368: PUSH
55369: LD_INT 0
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 2
55378: NEG
55379: PUSH
55380: LD_INT 1
55382: NEG
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 1
55390: NEG
55391: PUSH
55392: LD_INT 3
55394: NEG
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 1
55402: PUSH
55403: LD_INT 2
55405: NEG
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 3
55413: PUSH
55414: LD_INT 2
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 2
55423: PUSH
55424: LD_INT 3
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 2
55433: NEG
55434: PUSH
55435: LD_INT 1
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 3
55444: NEG
55445: PUSH
55446: LD_INT 1
55448: NEG
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55479: LD_ADDR_VAR 0 31
55483: PUSH
55484: LD_INT 0
55486: PUSH
55487: LD_INT 0
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 0
55496: PUSH
55497: LD_INT 1
55499: NEG
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 1
55507: PUSH
55508: LD_INT 0
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 1
55517: PUSH
55518: LD_INT 1
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 0
55527: PUSH
55528: LD_INT 1
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 1
55537: NEG
55538: PUSH
55539: LD_INT 0
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 1
55548: NEG
55549: PUSH
55550: LD_INT 1
55552: NEG
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 1
55560: NEG
55561: PUSH
55562: LD_INT 2
55564: NEG
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 1
55572: PUSH
55573: LD_INT 1
55575: NEG
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 2
55583: PUSH
55584: LD_INT 0
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 2
55593: PUSH
55594: LD_INT 1
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 2
55603: PUSH
55604: LD_INT 2
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: LD_INT 1
55613: PUSH
55614: LD_INT 2
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 0
55623: PUSH
55624: LD_INT 2
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 1
55633: NEG
55634: PUSH
55635: LD_INT 1
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 2
55644: NEG
55645: PUSH
55646: LD_INT 1
55648: NEG
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 2
55656: NEG
55657: PUSH
55658: LD_INT 2
55660: NEG
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 2
55668: NEG
55669: PUSH
55670: LD_INT 3
55672: NEG
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 2
55680: PUSH
55681: LD_INT 1
55683: NEG
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 3
55691: PUSH
55692: LD_INT 1
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 1
55701: PUSH
55702: LD_INT 3
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 1
55711: NEG
55712: PUSH
55713: LD_INT 2
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 3
55722: NEG
55723: PUSH
55724: LD_INT 2
55726: NEG
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55757: LD_ADDR_VAR 0 32
55761: PUSH
55762: LD_INT 0
55764: PUSH
55765: LD_INT 0
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 0
55774: PUSH
55775: LD_INT 1
55777: NEG
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 1
55785: PUSH
55786: LD_INT 0
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 1
55795: PUSH
55796: LD_INT 1
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 0
55805: PUSH
55806: LD_INT 1
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 1
55815: NEG
55816: PUSH
55817: LD_INT 0
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 1
55826: NEG
55827: PUSH
55828: LD_INT 1
55830: NEG
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 1
55838: NEG
55839: PUSH
55840: LD_INT 2
55842: NEG
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 0
55850: PUSH
55851: LD_INT 2
55853: NEG
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 1
55861: PUSH
55862: LD_INT 1
55864: NEG
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 2
55872: PUSH
55873: LD_INT 1
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 2
55882: PUSH
55883: LD_INT 2
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 1
55892: PUSH
55893: LD_INT 2
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 0
55902: PUSH
55903: LD_INT 2
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 1
55912: NEG
55913: PUSH
55914: LD_INT 1
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 2
55923: NEG
55924: PUSH
55925: LD_INT 0
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 2
55934: NEG
55935: PUSH
55936: LD_INT 1
55938: NEG
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 1
55946: NEG
55947: PUSH
55948: LD_INT 3
55950: NEG
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 1
55958: PUSH
55959: LD_INT 2
55961: NEG
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 3
55969: PUSH
55970: LD_INT 2
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 2
55979: PUSH
55980: LD_INT 3
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 2
55989: NEG
55990: PUSH
55991: LD_INT 1
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 3
56000: NEG
56001: PUSH
56002: LD_INT 1
56004: NEG
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56035: LD_ADDR_VAR 0 33
56039: PUSH
56040: LD_INT 0
56042: PUSH
56043: LD_INT 0
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 0
56052: PUSH
56053: LD_INT 1
56055: NEG
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 1
56063: PUSH
56064: LD_INT 0
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 1
56073: PUSH
56074: LD_INT 1
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 0
56083: PUSH
56084: LD_INT 1
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 1
56093: NEG
56094: PUSH
56095: LD_INT 0
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 1
56104: NEG
56105: PUSH
56106: LD_INT 1
56108: NEG
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 1
56116: NEG
56117: PUSH
56118: LD_INT 2
56120: NEG
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 1
56128: PUSH
56129: LD_INT 1
56131: NEG
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 2
56139: PUSH
56140: LD_INT 0
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 2
56149: PUSH
56150: LD_INT 1
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 1
56159: PUSH
56160: LD_INT 2
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 0
56169: PUSH
56170: LD_INT 2
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 1
56179: NEG
56180: PUSH
56181: LD_INT 1
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 2
56190: NEG
56191: PUSH
56192: LD_INT 0
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 2
56201: NEG
56202: PUSH
56203: LD_INT 1
56205: NEG
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 2
56213: NEG
56214: PUSH
56215: LD_INT 2
56217: NEG
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 2
56225: NEG
56226: PUSH
56227: LD_INT 3
56229: NEG
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 2
56237: PUSH
56238: LD_INT 1
56240: NEG
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 3
56248: PUSH
56249: LD_INT 1
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 1
56258: PUSH
56259: LD_INT 3
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 1
56268: NEG
56269: PUSH
56270: LD_INT 2
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 3
56279: NEG
56280: PUSH
56281: LD_INT 2
56283: NEG
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56314: LD_ADDR_VAR 0 34
56318: PUSH
56319: LD_INT 0
56321: PUSH
56322: LD_INT 0
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 0
56331: PUSH
56332: LD_INT 1
56334: NEG
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 1
56342: PUSH
56343: LD_INT 0
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 1
56352: PUSH
56353: LD_INT 1
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 0
56362: PUSH
56363: LD_INT 1
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 1
56372: NEG
56373: PUSH
56374: LD_INT 0
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 1
56383: NEG
56384: PUSH
56385: LD_INT 1
56387: NEG
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 1
56395: NEG
56396: PUSH
56397: LD_INT 2
56399: NEG
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 0
56407: PUSH
56408: LD_INT 2
56410: NEG
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 1
56418: PUSH
56419: LD_INT 1
56421: NEG
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 2
56429: PUSH
56430: LD_INT 1
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 2
56439: PUSH
56440: LD_INT 2
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 1
56449: PUSH
56450: LD_INT 2
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 1
56459: NEG
56460: PUSH
56461: LD_INT 1
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 2
56470: NEG
56471: PUSH
56472: LD_INT 0
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 2
56481: NEG
56482: PUSH
56483: LD_INT 1
56485: NEG
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 2
56493: NEG
56494: PUSH
56495: LD_INT 2
56497: NEG
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 1
56505: NEG
56506: PUSH
56507: LD_INT 3
56509: NEG
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 1
56517: PUSH
56518: LD_INT 2
56520: NEG
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 3
56528: PUSH
56529: LD_INT 2
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 2
56538: PUSH
56539: LD_INT 3
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 2
56548: NEG
56549: PUSH
56550: LD_INT 1
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 3
56559: NEG
56560: PUSH
56561: LD_INT 1
56563: NEG
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56594: LD_ADDR_VAR 0 35
56598: PUSH
56599: LD_INT 0
56601: PUSH
56602: LD_INT 0
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 0
56611: PUSH
56612: LD_INT 1
56614: NEG
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 1
56622: PUSH
56623: LD_INT 0
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 1
56632: PUSH
56633: LD_INT 1
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 0
56642: PUSH
56643: LD_INT 1
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 1
56652: NEG
56653: PUSH
56654: LD_INT 0
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 1
56663: NEG
56664: PUSH
56665: LD_INT 1
56667: NEG
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 2
56675: PUSH
56676: LD_INT 1
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 2
56685: NEG
56686: PUSH
56687: LD_INT 1
56689: NEG
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56706: LD_ADDR_VAR 0 36
56710: PUSH
56711: LD_INT 0
56713: PUSH
56714: LD_INT 0
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 0
56723: PUSH
56724: LD_INT 1
56726: NEG
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 1
56734: PUSH
56735: LD_INT 0
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 1
56744: PUSH
56745: LD_INT 1
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 0
56754: PUSH
56755: LD_INT 1
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: LD_INT 1
56764: NEG
56765: PUSH
56766: LD_INT 0
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 1
56775: NEG
56776: PUSH
56777: LD_INT 1
56779: NEG
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 1
56787: NEG
56788: PUSH
56789: LD_INT 2
56791: NEG
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 1
56799: PUSH
56800: LD_INT 2
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56818: LD_ADDR_VAR 0 37
56822: PUSH
56823: LD_INT 0
56825: PUSH
56826: LD_INT 0
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: LD_INT 0
56835: PUSH
56836: LD_INT 1
56838: NEG
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 1
56846: PUSH
56847: LD_INT 0
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 1
56856: PUSH
56857: LD_INT 1
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 0
56866: PUSH
56867: LD_INT 1
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 1
56876: NEG
56877: PUSH
56878: LD_INT 0
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 1
56887: NEG
56888: PUSH
56889: LD_INT 1
56891: NEG
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 1
56899: PUSH
56900: LD_INT 1
56902: NEG
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 1
56910: NEG
56911: PUSH
56912: LD_INT 1
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56930: LD_ADDR_VAR 0 38
56934: PUSH
56935: LD_INT 0
56937: PUSH
56938: LD_INT 0
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 0
56947: PUSH
56948: LD_INT 1
56950: NEG
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 1
56958: PUSH
56959: LD_INT 0
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 1
56968: PUSH
56969: LD_INT 1
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 0
56978: PUSH
56979: LD_INT 1
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 1
56988: NEG
56989: PUSH
56990: LD_INT 0
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 1
56999: NEG
57000: PUSH
57001: LD_INT 1
57003: NEG
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 2
57011: PUSH
57012: LD_INT 1
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 2
57021: NEG
57022: PUSH
57023: LD_INT 1
57025: NEG
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57042: LD_ADDR_VAR 0 39
57046: PUSH
57047: LD_INT 0
57049: PUSH
57050: LD_INT 0
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 0
57059: PUSH
57060: LD_INT 1
57062: NEG
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 1
57070: PUSH
57071: LD_INT 0
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 1
57080: PUSH
57081: LD_INT 1
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 0
57090: PUSH
57091: LD_INT 1
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 1
57100: NEG
57101: PUSH
57102: LD_INT 0
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 1
57111: NEG
57112: PUSH
57113: LD_INT 1
57115: NEG
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 1
57123: NEG
57124: PUSH
57125: LD_INT 2
57127: NEG
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 1
57135: PUSH
57136: LD_INT 2
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57154: LD_ADDR_VAR 0 40
57158: PUSH
57159: LD_INT 0
57161: PUSH
57162: LD_INT 0
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 0
57171: PUSH
57172: LD_INT 1
57174: NEG
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 1
57182: PUSH
57183: LD_INT 0
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 1
57192: PUSH
57193: LD_INT 1
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 0
57202: PUSH
57203: LD_INT 1
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 1
57212: NEG
57213: PUSH
57214: LD_INT 0
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 1
57223: NEG
57224: PUSH
57225: LD_INT 1
57227: NEG
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 1
57235: PUSH
57236: LD_INT 1
57238: NEG
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 1
57246: NEG
57247: PUSH
57248: LD_INT 1
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57266: LD_ADDR_VAR 0 41
57270: PUSH
57271: LD_INT 0
57273: PUSH
57274: LD_INT 0
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 0
57283: PUSH
57284: LD_INT 1
57286: NEG
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 1
57294: PUSH
57295: LD_INT 0
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 1
57304: PUSH
57305: LD_INT 1
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 0
57314: PUSH
57315: LD_INT 1
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 1
57324: NEG
57325: PUSH
57326: LD_INT 0
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 1
57335: NEG
57336: PUSH
57337: LD_INT 1
57339: NEG
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 1
57347: NEG
57348: PUSH
57349: LD_INT 2
57351: NEG
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 1
57359: PUSH
57360: LD_INT 1
57362: NEG
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 2
57370: PUSH
57371: LD_INT 0
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 2
57380: PUSH
57381: LD_INT 1
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 2
57390: PUSH
57391: LD_INT 2
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 1
57400: PUSH
57401: LD_INT 2
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 1
57410: NEG
57411: PUSH
57412: LD_INT 1
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 2
57421: NEG
57422: PUSH
57423: LD_INT 0
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 2
57432: NEG
57433: PUSH
57434: LD_INT 1
57436: NEG
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 2
57444: NEG
57445: PUSH
57446: LD_INT 2
57448: NEG
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 2
57456: NEG
57457: PUSH
57458: LD_INT 3
57460: NEG
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 2
57468: PUSH
57469: LD_INT 1
57471: NEG
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 3
57479: PUSH
57480: LD_INT 0
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 3
57489: PUSH
57490: LD_INT 1
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 3
57499: PUSH
57500: LD_INT 2
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 3
57509: PUSH
57510: LD_INT 3
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 2
57519: PUSH
57520: LD_INT 3
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 2
57529: NEG
57530: PUSH
57531: LD_INT 1
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 3
57540: NEG
57541: PUSH
57542: LD_INT 0
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 3
57551: NEG
57552: PUSH
57553: LD_INT 1
57555: NEG
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 3
57563: NEG
57564: PUSH
57565: LD_INT 2
57567: NEG
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 3
57575: NEG
57576: PUSH
57577: LD_INT 3
57579: NEG
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: LIST
57613: LIST
57614: LIST
57615: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57616: LD_ADDR_VAR 0 42
57620: PUSH
57621: LD_INT 0
57623: PUSH
57624: LD_INT 0
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: LD_INT 0
57633: PUSH
57634: LD_INT 1
57636: NEG
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 1
57644: PUSH
57645: LD_INT 0
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 1
57654: PUSH
57655: LD_INT 1
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 0
57664: PUSH
57665: LD_INT 1
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 1
57674: NEG
57675: PUSH
57676: LD_INT 0
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 1
57685: NEG
57686: PUSH
57687: LD_INT 1
57689: NEG
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 1
57697: NEG
57698: PUSH
57699: LD_INT 2
57701: NEG
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 0
57709: PUSH
57710: LD_INT 2
57712: NEG
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 1
57720: PUSH
57721: LD_INT 1
57723: NEG
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 2
57731: PUSH
57732: LD_INT 1
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 2
57741: PUSH
57742: LD_INT 2
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 1
57751: PUSH
57752: LD_INT 2
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: LD_INT 0
57761: PUSH
57762: LD_INT 2
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 1
57771: NEG
57772: PUSH
57773: LD_INT 1
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 2
57782: NEG
57783: PUSH
57784: LD_INT 1
57786: NEG
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 2
57794: NEG
57795: PUSH
57796: LD_INT 2
57798: NEG
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 2
57806: NEG
57807: PUSH
57808: LD_INT 3
57810: NEG
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 1
57818: NEG
57819: PUSH
57820: LD_INT 3
57822: NEG
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 0
57830: PUSH
57831: LD_INT 3
57833: NEG
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 1
57841: PUSH
57842: LD_INT 2
57844: NEG
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 3
57852: PUSH
57853: LD_INT 2
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 3
57862: PUSH
57863: LD_INT 3
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 2
57872: PUSH
57873: LD_INT 3
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 1
57882: PUSH
57883: LD_INT 3
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 0
57892: PUSH
57893: LD_INT 3
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 1
57902: NEG
57903: PUSH
57904: LD_INT 2
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 3
57913: NEG
57914: PUSH
57915: LD_INT 2
57917: NEG
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 3
57925: NEG
57926: PUSH
57927: LD_INT 3
57929: NEG
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57966: LD_ADDR_VAR 0 43
57970: PUSH
57971: LD_INT 0
57973: PUSH
57974: LD_INT 0
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 0
57983: PUSH
57984: LD_INT 1
57986: NEG
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 1
57994: PUSH
57995: LD_INT 0
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 1
58004: PUSH
58005: LD_INT 1
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 0
58014: PUSH
58015: LD_INT 1
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 1
58024: NEG
58025: PUSH
58026: LD_INT 0
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: LD_INT 1
58035: NEG
58036: PUSH
58037: LD_INT 1
58039: NEG
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 1
58047: NEG
58048: PUSH
58049: LD_INT 2
58051: NEG
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 0
58059: PUSH
58060: LD_INT 2
58062: NEG
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 1
58070: PUSH
58071: LD_INT 1
58073: NEG
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 2
58081: PUSH
58082: LD_INT 0
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 2
58091: PUSH
58092: LD_INT 1
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 1
58101: PUSH
58102: LD_INT 2
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 0
58111: PUSH
58112: LD_INT 2
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 1
58121: NEG
58122: PUSH
58123: LD_INT 1
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 2
58132: NEG
58133: PUSH
58134: LD_INT 0
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 2
58143: NEG
58144: PUSH
58145: LD_INT 1
58147: NEG
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 1
58155: NEG
58156: PUSH
58157: LD_INT 3
58159: NEG
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 0
58167: PUSH
58168: LD_INT 3
58170: NEG
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 1
58178: PUSH
58179: LD_INT 2
58181: NEG
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 2
58189: PUSH
58190: LD_INT 1
58192: NEG
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 3
58200: PUSH
58201: LD_INT 0
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 3
58210: PUSH
58211: LD_INT 1
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 1
58220: PUSH
58221: LD_INT 3
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 0
58230: PUSH
58231: LD_INT 3
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 1
58240: NEG
58241: PUSH
58242: LD_INT 2
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 2
58251: NEG
58252: PUSH
58253: LD_INT 1
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 3
58262: NEG
58263: PUSH
58264: LD_INT 0
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 3
58273: NEG
58274: PUSH
58275: LD_INT 1
58277: NEG
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58314: LD_ADDR_VAR 0 44
58318: PUSH
58319: LD_INT 0
58321: PUSH
58322: LD_INT 0
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 0
58331: PUSH
58332: LD_INT 1
58334: NEG
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 1
58342: PUSH
58343: LD_INT 0
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 1
58352: PUSH
58353: LD_INT 1
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 0
58362: PUSH
58363: LD_INT 1
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 1
58372: NEG
58373: PUSH
58374: LD_INT 0
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 1
58383: NEG
58384: PUSH
58385: LD_INT 1
58387: NEG
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 1
58395: NEG
58396: PUSH
58397: LD_INT 2
58399: NEG
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 1
58407: PUSH
58408: LD_INT 1
58410: NEG
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 2
58418: PUSH
58419: LD_INT 0
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 2
58428: PUSH
58429: LD_INT 1
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 2
58438: PUSH
58439: LD_INT 2
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 1
58448: PUSH
58449: LD_INT 2
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: LD_INT 1
58458: NEG
58459: PUSH
58460: LD_INT 1
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 2
58469: NEG
58470: PUSH
58471: LD_INT 0
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 2
58480: NEG
58481: PUSH
58482: LD_INT 1
58484: NEG
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 2
58492: NEG
58493: PUSH
58494: LD_INT 2
58496: NEG
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 2
58504: NEG
58505: PUSH
58506: LD_INT 3
58508: NEG
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 2
58516: PUSH
58517: LD_INT 1
58519: NEG
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 3
58527: PUSH
58528: LD_INT 0
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 3
58537: PUSH
58538: LD_INT 1
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: PUSH
58545: LD_INT 3
58547: PUSH
58548: LD_INT 2
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 3
58557: PUSH
58558: LD_INT 3
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: LD_INT 2
58567: PUSH
58568: LD_INT 3
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 2
58577: NEG
58578: PUSH
58579: LD_INT 1
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 3
58588: NEG
58589: PUSH
58590: LD_INT 0
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 3
58599: NEG
58600: PUSH
58601: LD_INT 1
58603: NEG
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 3
58611: NEG
58612: PUSH
58613: LD_INT 2
58615: NEG
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 3
58623: NEG
58624: PUSH
58625: LD_INT 3
58627: NEG
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58664: LD_ADDR_VAR 0 45
58668: PUSH
58669: LD_INT 0
58671: PUSH
58672: LD_INT 0
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 0
58681: PUSH
58682: LD_INT 1
58684: NEG
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 1
58692: PUSH
58693: LD_INT 0
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 1
58702: PUSH
58703: LD_INT 1
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: LD_INT 0
58712: PUSH
58713: LD_INT 1
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: LD_INT 1
58722: NEG
58723: PUSH
58724: LD_INT 0
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 1
58733: NEG
58734: PUSH
58735: LD_INT 1
58737: NEG
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 1
58745: NEG
58746: PUSH
58747: LD_INT 2
58749: NEG
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: PUSH
58755: LD_INT 0
58757: PUSH
58758: LD_INT 2
58760: NEG
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: LD_INT 1
58768: PUSH
58769: LD_INT 1
58771: NEG
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 2
58779: PUSH
58780: LD_INT 1
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 2
58789: PUSH
58790: LD_INT 2
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 1
58799: PUSH
58800: LD_INT 2
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 0
58809: PUSH
58810: LD_INT 2
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 1
58819: NEG
58820: PUSH
58821: LD_INT 1
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 2
58830: NEG
58831: PUSH
58832: LD_INT 1
58834: NEG
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 2
58842: NEG
58843: PUSH
58844: LD_INT 2
58846: NEG
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 2
58854: NEG
58855: PUSH
58856: LD_INT 3
58858: NEG
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: LD_INT 1
58866: NEG
58867: PUSH
58868: LD_INT 3
58870: NEG
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 0
58878: PUSH
58879: LD_INT 3
58881: NEG
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 1
58889: PUSH
58890: LD_INT 2
58892: NEG
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 3
58900: PUSH
58901: LD_INT 2
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 3
58910: PUSH
58911: LD_INT 3
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 2
58920: PUSH
58921: LD_INT 3
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 1
58930: PUSH
58931: LD_INT 3
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 0
58940: PUSH
58941: LD_INT 3
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 1
58950: NEG
58951: PUSH
58952: LD_INT 2
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 3
58961: NEG
58962: PUSH
58963: LD_INT 2
58965: NEG
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: LD_INT 3
58973: NEG
58974: PUSH
58975: LD_INT 3
58977: NEG
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59014: LD_ADDR_VAR 0 46
59018: PUSH
59019: LD_INT 0
59021: PUSH
59022: LD_INT 0
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PUSH
59029: LD_INT 0
59031: PUSH
59032: LD_INT 1
59034: NEG
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: PUSH
59040: LD_INT 1
59042: PUSH
59043: LD_INT 0
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 1
59052: PUSH
59053: LD_INT 1
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 0
59062: PUSH
59063: LD_INT 1
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 1
59072: NEG
59073: PUSH
59074: LD_INT 0
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 1
59083: NEG
59084: PUSH
59085: LD_INT 1
59087: NEG
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 1
59095: NEG
59096: PUSH
59097: LD_INT 2
59099: NEG
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 0
59107: PUSH
59108: LD_INT 2
59110: NEG
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 1
59118: PUSH
59119: LD_INT 1
59121: NEG
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 2
59129: PUSH
59130: LD_INT 0
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 2
59139: PUSH
59140: LD_INT 1
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 1
59149: PUSH
59150: LD_INT 2
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 0
59159: PUSH
59160: LD_INT 2
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 1
59169: NEG
59170: PUSH
59171: LD_INT 1
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 2
59180: NEG
59181: PUSH
59182: LD_INT 0
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 2
59191: NEG
59192: PUSH
59193: LD_INT 1
59195: NEG
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 1
59203: NEG
59204: PUSH
59205: LD_INT 3
59207: NEG
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: LD_INT 0
59215: PUSH
59216: LD_INT 3
59218: NEG
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 1
59226: PUSH
59227: LD_INT 2
59229: NEG
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 2
59237: PUSH
59238: LD_INT 1
59240: NEG
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 3
59248: PUSH
59249: LD_INT 0
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 3
59258: PUSH
59259: LD_INT 1
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 1
59268: PUSH
59269: LD_INT 3
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 0
59278: PUSH
59279: LD_INT 3
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 1
59288: NEG
59289: PUSH
59290: LD_INT 2
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 2
59299: NEG
59300: PUSH
59301: LD_INT 1
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 3
59310: NEG
59311: PUSH
59312: LD_INT 0
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 3
59321: NEG
59322: PUSH
59323: LD_INT 1
59325: NEG
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59362: LD_ADDR_VAR 0 47
59366: PUSH
59367: LD_INT 0
59369: PUSH
59370: LD_INT 0
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 0
59379: PUSH
59380: LD_INT 1
59382: NEG
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 1
59390: PUSH
59391: LD_INT 0
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 1
59400: PUSH
59401: LD_INT 1
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: LD_INT 0
59410: PUSH
59411: LD_INT 1
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PUSH
59418: LD_INT 1
59420: NEG
59421: PUSH
59422: LD_INT 0
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 1
59431: NEG
59432: PUSH
59433: LD_INT 1
59435: NEG
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 1
59443: NEG
59444: PUSH
59445: LD_INT 2
59447: NEG
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 0
59455: PUSH
59456: LD_INT 2
59458: NEG
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 1
59466: PUSH
59467: LD_INT 1
59469: NEG
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: PUSH
59475: LD_INT 2
59477: NEG
59478: PUSH
59479: LD_INT 1
59481: NEG
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 2
59489: NEG
59490: PUSH
59491: LD_INT 2
59493: NEG
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: LIST
59509: LIST
59510: LIST
59511: LIST
59512: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59513: LD_ADDR_VAR 0 48
59517: PUSH
59518: LD_INT 0
59520: PUSH
59521: LD_INT 0
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 0
59530: PUSH
59531: LD_INT 1
59533: NEG
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 1
59541: PUSH
59542: LD_INT 0
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 1
59551: PUSH
59552: LD_INT 1
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 0
59561: PUSH
59562: LD_INT 1
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_INT 1
59571: NEG
59572: PUSH
59573: LD_INT 0
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 1
59582: NEG
59583: PUSH
59584: LD_INT 1
59586: NEG
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 1
59594: NEG
59595: PUSH
59596: LD_INT 2
59598: NEG
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 0
59606: PUSH
59607: LD_INT 2
59609: NEG
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: LD_INT 1
59617: PUSH
59618: LD_INT 1
59620: NEG
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 2
59628: PUSH
59629: LD_INT 0
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 2
59638: PUSH
59639: LD_INT 1
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59660: LD_ADDR_VAR 0 49
59664: PUSH
59665: LD_INT 0
59667: PUSH
59668: LD_INT 0
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 0
59677: PUSH
59678: LD_INT 1
59680: NEG
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 1
59688: PUSH
59689: LD_INT 0
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 1
59698: PUSH
59699: LD_INT 1
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 0
59708: PUSH
59709: LD_INT 1
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 1
59718: NEG
59719: PUSH
59720: LD_INT 0
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 1
59729: NEG
59730: PUSH
59731: LD_INT 1
59733: NEG
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: LD_INT 1
59741: PUSH
59742: LD_INT 1
59744: NEG
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 2
59752: PUSH
59753: LD_INT 0
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 2
59762: PUSH
59763: LD_INT 1
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 2
59772: PUSH
59773: LD_INT 2
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 1
59782: PUSH
59783: LD_INT 2
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: LIST
59794: LIST
59795: LIST
59796: LIST
59797: LIST
59798: LIST
59799: LIST
59800: LIST
59801: LIST
59802: LIST
59803: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59804: LD_ADDR_VAR 0 50
59808: PUSH
59809: LD_INT 0
59811: PUSH
59812: LD_INT 0
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: LD_INT 0
59821: PUSH
59822: LD_INT 1
59824: NEG
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: LD_INT 1
59832: PUSH
59833: LD_INT 0
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 1
59842: PUSH
59843: LD_INT 1
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 0
59852: PUSH
59853: LD_INT 1
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 1
59862: NEG
59863: PUSH
59864: LD_INT 0
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 1
59873: NEG
59874: PUSH
59875: LD_INT 1
59877: NEG
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PUSH
59883: LD_INT 2
59885: PUSH
59886: LD_INT 1
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 2
59895: PUSH
59896: LD_INT 2
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 1
59905: PUSH
59906: LD_INT 2
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: LD_INT 0
59915: PUSH
59916: LD_INT 2
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 1
59925: NEG
59926: PUSH
59927: LD_INT 1
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: LIST
59940: LIST
59941: LIST
59942: LIST
59943: LIST
59944: LIST
59945: LIST
59946: LIST
59947: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59948: LD_ADDR_VAR 0 51
59952: PUSH
59953: LD_INT 0
59955: PUSH
59956: LD_INT 0
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: LD_INT 0
59965: PUSH
59966: LD_INT 1
59968: NEG
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 1
59976: PUSH
59977: LD_INT 0
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 1
59986: PUSH
59987: LD_INT 1
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 0
59996: PUSH
59997: LD_INT 1
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 1
60006: NEG
60007: PUSH
60008: LD_INT 0
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 1
60017: NEG
60018: PUSH
60019: LD_INT 1
60021: NEG
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: LD_INT 1
60029: PUSH
60030: LD_INT 2
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: LD_INT 0
60039: PUSH
60040: LD_INT 2
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: PUSH
60047: LD_INT 1
60049: NEG
60050: PUSH
60051: LD_INT 1
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 2
60060: NEG
60061: PUSH
60062: LD_INT 0
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 2
60071: NEG
60072: PUSH
60073: LD_INT 1
60075: NEG
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60095: LD_ADDR_VAR 0 52
60099: PUSH
60100: LD_INT 0
60102: PUSH
60103: LD_INT 0
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 0
60112: PUSH
60113: LD_INT 1
60115: NEG
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 1
60123: PUSH
60124: LD_INT 0
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 1
60133: PUSH
60134: LD_INT 1
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 0
60143: PUSH
60144: LD_INT 1
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 1
60153: NEG
60154: PUSH
60155: LD_INT 0
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 1
60164: NEG
60165: PUSH
60166: LD_INT 1
60168: NEG
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 1
60176: NEG
60177: PUSH
60178: LD_INT 2
60180: NEG
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: LD_INT 1
60188: NEG
60189: PUSH
60190: LD_INT 1
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 2
60199: NEG
60200: PUSH
60201: LD_INT 0
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 2
60210: NEG
60211: PUSH
60212: LD_INT 1
60214: NEG
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 2
60222: NEG
60223: PUSH
60224: LD_INT 2
60226: NEG
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: LIST
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: LIST
60241: LIST
60242: LIST
60243: LIST
60244: LIST
60245: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60246: LD_ADDR_VAR 0 53
60250: PUSH
60251: LD_INT 0
60253: PUSH
60254: LD_INT 0
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 0
60263: PUSH
60264: LD_INT 1
60266: NEG
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 1
60274: PUSH
60275: LD_INT 0
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: LD_INT 1
60284: PUSH
60285: LD_INT 1
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 0
60294: PUSH
60295: LD_INT 1
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 1
60304: NEG
60305: PUSH
60306: LD_INT 0
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 1
60315: NEG
60316: PUSH
60317: LD_INT 1
60319: NEG
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 1
60327: NEG
60328: PUSH
60329: LD_INT 2
60331: NEG
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 0
60339: PUSH
60340: LD_INT 2
60342: NEG
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 1
60350: PUSH
60351: LD_INT 1
60353: NEG
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 2
60361: PUSH
60362: LD_INT 0
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 2
60371: PUSH
60372: LD_INT 1
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 2
60381: PUSH
60382: LD_INT 2
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 1
60391: PUSH
60392: LD_INT 2
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 0
60401: PUSH
60402: LD_INT 2
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 1
60411: NEG
60412: PUSH
60413: LD_INT 1
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 2
60422: NEG
60423: PUSH
60424: LD_INT 0
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 2
60433: NEG
60434: PUSH
60435: LD_INT 1
60437: NEG
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: LD_INT 2
60445: NEG
60446: PUSH
60447: LD_INT 2
60449: NEG
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60476: LD_ADDR_VAR 0 54
60480: PUSH
60481: LD_INT 0
60483: PUSH
60484: LD_INT 0
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 0
60493: PUSH
60494: LD_INT 1
60496: NEG
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PUSH
60502: LD_INT 1
60504: PUSH
60505: LD_INT 0
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 1
60514: PUSH
60515: LD_INT 1
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: LD_INT 0
60524: PUSH
60525: LD_INT 1
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 1
60534: NEG
60535: PUSH
60536: LD_INT 0
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 1
60545: NEG
60546: PUSH
60547: LD_INT 1
60549: NEG
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 1
60557: NEG
60558: PUSH
60559: LD_INT 2
60561: NEG
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: PUSH
60567: LD_INT 0
60569: PUSH
60570: LD_INT 2
60572: NEG
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: LD_INT 1
60580: PUSH
60581: LD_INT 1
60583: NEG
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 2
60591: PUSH
60592: LD_INT 0
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 2
60601: PUSH
60602: LD_INT 1
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 2
60611: PUSH
60612: LD_INT 2
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: LD_INT 1
60621: PUSH
60622: LD_INT 2
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 0
60631: PUSH
60632: LD_INT 2
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: LD_INT 1
60641: NEG
60642: PUSH
60643: LD_INT 1
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: LD_INT 2
60652: NEG
60653: PUSH
60654: LD_INT 0
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 2
60663: NEG
60664: PUSH
60665: LD_INT 1
60667: NEG
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 2
60675: NEG
60676: PUSH
60677: LD_INT 2
60679: NEG
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60706: LD_ADDR_VAR 0 55
60710: PUSH
60711: LD_INT 0
60713: PUSH
60714: LD_INT 0
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 0
60723: PUSH
60724: LD_INT 1
60726: NEG
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 1
60734: PUSH
60735: LD_INT 0
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 1
60744: PUSH
60745: LD_INT 1
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 0
60754: PUSH
60755: LD_INT 1
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 1
60764: NEG
60765: PUSH
60766: LD_INT 0
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 1
60775: NEG
60776: PUSH
60777: LD_INT 1
60779: NEG
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 1
60787: NEG
60788: PUSH
60789: LD_INT 2
60791: NEG
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 0
60799: PUSH
60800: LD_INT 2
60802: NEG
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 1
60810: PUSH
60811: LD_INT 1
60813: NEG
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 2
60821: PUSH
60822: LD_INT 0
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 2
60831: PUSH
60832: LD_INT 1
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: LD_INT 2
60841: PUSH
60842: LD_INT 2
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: LD_INT 1
60851: PUSH
60852: LD_INT 2
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: LD_INT 0
60861: PUSH
60862: LD_INT 2
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 1
60871: NEG
60872: PUSH
60873: LD_INT 1
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PUSH
60880: LD_INT 2
60882: NEG
60883: PUSH
60884: LD_INT 0
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 2
60893: NEG
60894: PUSH
60895: LD_INT 1
60897: NEG
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: LD_INT 2
60905: NEG
60906: PUSH
60907: LD_INT 2
60909: NEG
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60936: LD_ADDR_VAR 0 56
60940: PUSH
60941: LD_INT 0
60943: PUSH
60944: LD_INT 0
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 0
60953: PUSH
60954: LD_INT 1
60956: NEG
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 1
60964: PUSH
60965: LD_INT 0
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: LD_INT 1
60974: PUSH
60975: LD_INT 1
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: LD_INT 0
60984: PUSH
60985: LD_INT 1
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PUSH
60992: LD_INT 1
60994: NEG
60995: PUSH
60996: LD_INT 0
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: PUSH
61003: LD_INT 1
61005: NEG
61006: PUSH
61007: LD_INT 1
61009: NEG
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 1
61017: NEG
61018: PUSH
61019: LD_INT 2
61021: NEG
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_INT 0
61029: PUSH
61030: LD_INT 2
61032: NEG
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 1
61040: PUSH
61041: LD_INT 1
61043: NEG
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: LD_INT 2
61051: PUSH
61052: LD_INT 0
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: LD_INT 2
61061: PUSH
61062: LD_INT 1
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: LD_INT 2
61071: PUSH
61072: LD_INT 2
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: LD_INT 1
61081: PUSH
61082: LD_INT 2
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: LD_INT 0
61091: PUSH
61092: LD_INT 2
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: LD_INT 1
61101: NEG
61102: PUSH
61103: LD_INT 1
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_INT 2
61112: NEG
61113: PUSH
61114: LD_INT 0
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 2
61123: NEG
61124: PUSH
61125: LD_INT 1
61127: NEG
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 2
61135: NEG
61136: PUSH
61137: LD_INT 2
61139: NEG
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61166: LD_ADDR_VAR 0 57
61170: PUSH
61171: LD_INT 0
61173: PUSH
61174: LD_INT 0
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 0
61183: PUSH
61184: LD_INT 1
61186: NEG
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 1
61194: PUSH
61195: LD_INT 0
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: LD_INT 1
61204: PUSH
61205: LD_INT 1
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: PUSH
61212: LD_INT 0
61214: PUSH
61215: LD_INT 1
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 1
61224: NEG
61225: PUSH
61226: LD_INT 0
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: PUSH
61233: LD_INT 1
61235: NEG
61236: PUSH
61237: LD_INT 1
61239: NEG
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: PUSH
61245: LD_INT 1
61247: NEG
61248: PUSH
61249: LD_INT 2
61251: NEG
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: PUSH
61257: LD_INT 0
61259: PUSH
61260: LD_INT 2
61262: NEG
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 1
61270: PUSH
61271: LD_INT 1
61273: NEG
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: PUSH
61279: LD_INT 2
61281: PUSH
61282: LD_INT 0
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 2
61291: PUSH
61292: LD_INT 1
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: PUSH
61299: LD_INT 2
61301: PUSH
61302: LD_INT 2
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: PUSH
61309: LD_INT 1
61311: PUSH
61312: LD_INT 2
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: LD_INT 0
61321: PUSH
61322: LD_INT 2
61324: PUSH
61325: EMPTY
61326: LIST
61327: LIST
61328: PUSH
61329: LD_INT 1
61331: NEG
61332: PUSH
61333: LD_INT 1
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: PUSH
61340: LD_INT 2
61342: NEG
61343: PUSH
61344: LD_INT 0
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: LD_INT 2
61353: NEG
61354: PUSH
61355: LD_INT 1
61357: NEG
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: LD_INT 2
61365: NEG
61366: PUSH
61367: LD_INT 2
61369: NEG
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: LIST
61395: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61396: LD_ADDR_VAR 0 58
61400: PUSH
61401: LD_INT 0
61403: PUSH
61404: LD_INT 0
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: LD_INT 0
61413: PUSH
61414: LD_INT 1
61416: NEG
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PUSH
61422: LD_INT 1
61424: PUSH
61425: LD_INT 0
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: LD_INT 1
61434: PUSH
61435: LD_INT 1
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: PUSH
61442: LD_INT 0
61444: PUSH
61445: LD_INT 1
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 1
61454: NEG
61455: PUSH
61456: LD_INT 0
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: LD_INT 1
61465: NEG
61466: PUSH
61467: LD_INT 1
61469: NEG
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: PUSH
61475: LD_INT 1
61477: NEG
61478: PUSH
61479: LD_INT 2
61481: NEG
61482: PUSH
61483: EMPTY
61484: LIST
61485: LIST
61486: PUSH
61487: LD_INT 0
61489: PUSH
61490: LD_INT 2
61492: NEG
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: PUSH
61498: LD_INT 1
61500: PUSH
61501: LD_INT 1
61503: NEG
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: PUSH
61509: LD_INT 2
61511: PUSH
61512: LD_INT 0
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 2
61521: PUSH
61522: LD_INT 1
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: LD_INT 2
61531: PUSH
61532: LD_INT 2
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: PUSH
61539: LD_INT 1
61541: PUSH
61542: LD_INT 2
61544: PUSH
61545: EMPTY
61546: LIST
61547: LIST
61548: PUSH
61549: LD_INT 0
61551: PUSH
61552: LD_INT 2
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: LD_INT 1
61561: NEG
61562: PUSH
61563: LD_INT 1
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 2
61572: NEG
61573: PUSH
61574: LD_INT 0
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: PUSH
61581: LD_INT 2
61583: NEG
61584: PUSH
61585: LD_INT 1
61587: NEG
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: LD_INT 2
61595: NEG
61596: PUSH
61597: LD_INT 2
61599: NEG
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: LIST
61609: LIST
61610: LIST
61611: LIST
61612: LIST
61613: LIST
61614: LIST
61615: LIST
61616: LIST
61617: LIST
61618: LIST
61619: LIST
61620: LIST
61621: LIST
61622: LIST
61623: LIST
61624: LIST
61625: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61626: LD_ADDR_VAR 0 59
61630: PUSH
61631: LD_INT 0
61633: PUSH
61634: LD_INT 0
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: PUSH
61641: LD_INT 0
61643: PUSH
61644: LD_INT 1
61646: NEG
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: PUSH
61652: LD_INT 1
61654: PUSH
61655: LD_INT 0
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PUSH
61662: LD_INT 1
61664: PUSH
61665: LD_INT 1
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: PUSH
61672: LD_INT 0
61674: PUSH
61675: LD_INT 1
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: PUSH
61682: LD_INT 1
61684: NEG
61685: PUSH
61686: LD_INT 0
61688: PUSH
61689: EMPTY
61690: LIST
61691: LIST
61692: PUSH
61693: LD_INT 1
61695: NEG
61696: PUSH
61697: LD_INT 1
61699: NEG
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: PUSH
61705: EMPTY
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61714: LD_ADDR_VAR 0 60
61718: PUSH
61719: LD_INT 0
61721: PUSH
61722: LD_INT 0
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PUSH
61729: LD_INT 0
61731: PUSH
61732: LD_INT 1
61734: NEG
61735: PUSH
61736: EMPTY
61737: LIST
61738: LIST
61739: PUSH
61740: LD_INT 1
61742: PUSH
61743: LD_INT 0
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: PUSH
61750: LD_INT 1
61752: PUSH
61753: LD_INT 1
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: PUSH
61760: LD_INT 0
61762: PUSH
61763: LD_INT 1
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: PUSH
61770: LD_INT 1
61772: NEG
61773: PUSH
61774: LD_INT 0
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: LD_INT 1
61783: NEG
61784: PUSH
61785: LD_INT 1
61787: NEG
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61802: LD_ADDR_VAR 0 61
61806: PUSH
61807: LD_INT 0
61809: PUSH
61810: LD_INT 0
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: PUSH
61817: LD_INT 0
61819: PUSH
61820: LD_INT 1
61822: NEG
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: PUSH
61828: LD_INT 1
61830: PUSH
61831: LD_INT 0
61833: PUSH
61834: EMPTY
61835: LIST
61836: LIST
61837: PUSH
61838: LD_INT 1
61840: PUSH
61841: LD_INT 1
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: PUSH
61848: LD_INT 0
61850: PUSH
61851: LD_INT 1
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: LD_INT 1
61860: NEG
61861: PUSH
61862: LD_INT 0
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PUSH
61869: LD_INT 1
61871: NEG
61872: PUSH
61873: LD_INT 1
61875: NEG
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61890: LD_ADDR_VAR 0 62
61894: PUSH
61895: LD_INT 0
61897: PUSH
61898: LD_INT 0
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 0
61907: PUSH
61908: LD_INT 1
61910: NEG
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 1
61918: PUSH
61919: LD_INT 0
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: PUSH
61926: LD_INT 1
61928: PUSH
61929: LD_INT 1
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: LD_INT 0
61938: PUSH
61939: LD_INT 1
61941: PUSH
61942: EMPTY
61943: LIST
61944: LIST
61945: PUSH
61946: LD_INT 1
61948: NEG
61949: PUSH
61950: LD_INT 0
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 1
61959: NEG
61960: PUSH
61961: LD_INT 1
61963: NEG
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: LIST
61973: LIST
61974: LIST
61975: LIST
61976: LIST
61977: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61978: LD_ADDR_VAR 0 63
61982: PUSH
61983: LD_INT 0
61985: PUSH
61986: LD_INT 0
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 0
61995: PUSH
61996: LD_INT 1
61998: NEG
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_INT 1
62006: PUSH
62007: LD_INT 0
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PUSH
62014: LD_INT 1
62016: PUSH
62017: LD_INT 1
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 0
62026: PUSH
62027: LD_INT 1
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: PUSH
62034: LD_INT 1
62036: NEG
62037: PUSH
62038: LD_INT 0
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: LD_INT 1
62047: NEG
62048: PUSH
62049: LD_INT 1
62051: NEG
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: LIST
62061: LIST
62062: LIST
62063: LIST
62064: LIST
62065: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62066: LD_ADDR_VAR 0 64
62070: PUSH
62071: LD_INT 0
62073: PUSH
62074: LD_INT 0
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 0
62083: PUSH
62084: LD_INT 1
62086: NEG
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: LD_INT 1
62094: PUSH
62095: LD_INT 0
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 1
62104: PUSH
62105: LD_INT 1
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 0
62114: PUSH
62115: LD_INT 1
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: LD_INT 1
62124: NEG
62125: PUSH
62126: LD_INT 0
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 1
62135: NEG
62136: PUSH
62137: LD_INT 1
62139: NEG
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: LIST
62149: LIST
62150: LIST
62151: LIST
62152: LIST
62153: ST_TO_ADDR
// end ; 1 :
62154: GO 68051
62156: LD_INT 1
62158: DOUBLE
62159: EQUAL
62160: IFTRUE 62164
62162: GO 64787
62164: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62165: LD_ADDR_VAR 0 11
62169: PUSH
62170: LD_INT 1
62172: NEG
62173: PUSH
62174: LD_INT 3
62176: NEG
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 0
62184: PUSH
62185: LD_INT 3
62187: NEG
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: LD_INT 1
62195: PUSH
62196: LD_INT 2
62198: NEG
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: LIST
62208: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62209: LD_ADDR_VAR 0 12
62213: PUSH
62214: LD_INT 2
62216: PUSH
62217: LD_INT 1
62219: NEG
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: LD_INT 3
62227: PUSH
62228: LD_INT 0
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 3
62237: PUSH
62238: LD_INT 1
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: LIST
62249: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62250: LD_ADDR_VAR 0 13
62254: PUSH
62255: LD_INT 3
62257: PUSH
62258: LD_INT 2
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: PUSH
62265: LD_INT 3
62267: PUSH
62268: LD_INT 3
62270: PUSH
62271: EMPTY
62272: LIST
62273: LIST
62274: PUSH
62275: LD_INT 2
62277: PUSH
62278: LD_INT 3
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: LIST
62289: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62290: LD_ADDR_VAR 0 14
62294: PUSH
62295: LD_INT 1
62297: PUSH
62298: LD_INT 3
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: PUSH
62305: LD_INT 0
62307: PUSH
62308: LD_INT 3
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: LD_INT 1
62317: NEG
62318: PUSH
62319: LD_INT 2
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: LIST
62330: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62331: LD_ADDR_VAR 0 15
62335: PUSH
62336: LD_INT 2
62338: NEG
62339: PUSH
62340: LD_INT 1
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 3
62349: NEG
62350: PUSH
62351: LD_INT 0
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: LD_INT 3
62360: NEG
62361: PUSH
62362: LD_INT 1
62364: NEG
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: LIST
62374: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62375: LD_ADDR_VAR 0 16
62379: PUSH
62380: LD_INT 2
62382: NEG
62383: PUSH
62384: LD_INT 3
62386: NEG
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: LD_INT 3
62394: NEG
62395: PUSH
62396: LD_INT 2
62398: NEG
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: PUSH
62404: LD_INT 3
62406: NEG
62407: PUSH
62408: LD_INT 3
62410: NEG
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: LIST
62420: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62421: LD_ADDR_VAR 0 17
62425: PUSH
62426: LD_INT 1
62428: NEG
62429: PUSH
62430: LD_INT 3
62432: NEG
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PUSH
62438: LD_INT 0
62440: PUSH
62441: LD_INT 3
62443: NEG
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: PUSH
62449: LD_INT 1
62451: PUSH
62452: LD_INT 2
62454: NEG
62455: PUSH
62456: EMPTY
62457: LIST
62458: LIST
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: LIST
62464: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62465: LD_ADDR_VAR 0 18
62469: PUSH
62470: LD_INT 2
62472: PUSH
62473: LD_INT 1
62475: NEG
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 3
62483: PUSH
62484: LD_INT 0
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: PUSH
62491: LD_INT 3
62493: PUSH
62494: LD_INT 1
62496: PUSH
62497: EMPTY
62498: LIST
62499: LIST
62500: PUSH
62501: EMPTY
62502: LIST
62503: LIST
62504: LIST
62505: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62506: LD_ADDR_VAR 0 19
62510: PUSH
62511: LD_INT 3
62513: PUSH
62514: LD_INT 2
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: LD_INT 3
62523: PUSH
62524: LD_INT 3
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: PUSH
62531: LD_INT 2
62533: PUSH
62534: LD_INT 3
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: LIST
62545: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62546: LD_ADDR_VAR 0 20
62550: PUSH
62551: LD_INT 1
62553: PUSH
62554: LD_INT 3
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: PUSH
62561: LD_INT 0
62563: PUSH
62564: LD_INT 3
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: PUSH
62571: LD_INT 1
62573: NEG
62574: PUSH
62575: LD_INT 2
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: PUSH
62582: EMPTY
62583: LIST
62584: LIST
62585: LIST
62586: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62587: LD_ADDR_VAR 0 21
62591: PUSH
62592: LD_INT 2
62594: NEG
62595: PUSH
62596: LD_INT 1
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 3
62605: NEG
62606: PUSH
62607: LD_INT 0
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 3
62616: NEG
62617: PUSH
62618: LD_INT 1
62620: NEG
62621: PUSH
62622: EMPTY
62623: LIST
62624: LIST
62625: PUSH
62626: EMPTY
62627: LIST
62628: LIST
62629: LIST
62630: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62631: LD_ADDR_VAR 0 22
62635: PUSH
62636: LD_INT 2
62638: NEG
62639: PUSH
62640: LD_INT 3
62642: NEG
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: PUSH
62648: LD_INT 3
62650: NEG
62651: PUSH
62652: LD_INT 2
62654: NEG
62655: PUSH
62656: EMPTY
62657: LIST
62658: LIST
62659: PUSH
62660: LD_INT 3
62662: NEG
62663: PUSH
62664: LD_INT 3
62666: NEG
62667: PUSH
62668: EMPTY
62669: LIST
62670: LIST
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: LIST
62676: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
62677: LD_ADDR_VAR 0 23
62681: PUSH
62682: LD_INT 0
62684: PUSH
62685: LD_INT 3
62687: NEG
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 1
62695: NEG
62696: PUSH
62697: LD_INT 4
62699: NEG
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: PUSH
62705: LD_INT 1
62707: PUSH
62708: LD_INT 3
62710: NEG
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: LIST
62720: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
62721: LD_ADDR_VAR 0 24
62725: PUSH
62726: LD_INT 3
62728: PUSH
62729: LD_INT 0
62731: PUSH
62732: EMPTY
62733: LIST
62734: LIST
62735: PUSH
62736: LD_INT 3
62738: PUSH
62739: LD_INT 1
62741: NEG
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: LD_INT 4
62749: PUSH
62750: LD_INT 1
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: LIST
62761: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
62762: LD_ADDR_VAR 0 25
62766: PUSH
62767: LD_INT 3
62769: PUSH
62770: LD_INT 3
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: PUSH
62777: LD_INT 4
62779: PUSH
62780: LD_INT 3
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: LD_INT 3
62789: PUSH
62790: LD_INT 4
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: LIST
62801: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
62802: LD_ADDR_VAR 0 26
62806: PUSH
62807: LD_INT 0
62809: PUSH
62810: LD_INT 3
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: PUSH
62817: LD_INT 1
62819: PUSH
62820: LD_INT 4
62822: PUSH
62823: EMPTY
62824: LIST
62825: LIST
62826: PUSH
62827: LD_INT 1
62829: NEG
62830: PUSH
62831: LD_INT 3
62833: PUSH
62834: EMPTY
62835: LIST
62836: LIST
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: LIST
62842: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
62843: LD_ADDR_VAR 0 27
62847: PUSH
62848: LD_INT 3
62850: NEG
62851: PUSH
62852: LD_INT 0
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: LD_INT 3
62861: NEG
62862: PUSH
62863: LD_INT 1
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: LD_INT 4
62872: NEG
62873: PUSH
62874: LD_INT 1
62876: NEG
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: PUSH
62882: EMPTY
62883: LIST
62884: LIST
62885: LIST
62886: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
62887: LD_ADDR_VAR 0 28
62891: PUSH
62892: LD_INT 3
62894: NEG
62895: PUSH
62896: LD_INT 3
62898: NEG
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: LD_INT 3
62906: NEG
62907: PUSH
62908: LD_INT 4
62910: NEG
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: PUSH
62916: LD_INT 4
62918: NEG
62919: PUSH
62920: LD_INT 3
62922: NEG
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: LIST
62932: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
62933: LD_ADDR_VAR 0 29
62937: PUSH
62938: LD_INT 1
62940: NEG
62941: PUSH
62942: LD_INT 3
62944: NEG
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: PUSH
62950: LD_INT 0
62952: PUSH
62953: LD_INT 3
62955: NEG
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: PUSH
62961: LD_INT 1
62963: PUSH
62964: LD_INT 2
62966: NEG
62967: PUSH
62968: EMPTY
62969: LIST
62970: LIST
62971: PUSH
62972: LD_INT 1
62974: NEG
62975: PUSH
62976: LD_INT 4
62978: NEG
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: PUSH
62984: LD_INT 0
62986: PUSH
62987: LD_INT 4
62989: NEG
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: PUSH
62995: LD_INT 1
62997: PUSH
62998: LD_INT 3
63000: NEG
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: PUSH
63006: LD_INT 1
63008: NEG
63009: PUSH
63010: LD_INT 5
63012: NEG
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: PUSH
63018: LD_INT 0
63020: PUSH
63021: LD_INT 5
63023: NEG
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: PUSH
63029: LD_INT 1
63031: PUSH
63032: LD_INT 4
63034: NEG
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: LD_INT 1
63042: NEG
63043: PUSH
63044: LD_INT 6
63046: NEG
63047: PUSH
63048: EMPTY
63049: LIST
63050: LIST
63051: PUSH
63052: LD_INT 0
63054: PUSH
63055: LD_INT 6
63057: NEG
63058: PUSH
63059: EMPTY
63060: LIST
63061: LIST
63062: PUSH
63063: LD_INT 1
63065: PUSH
63066: LD_INT 5
63068: NEG
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: LIST
63078: LIST
63079: LIST
63080: LIST
63081: LIST
63082: LIST
63083: LIST
63084: LIST
63085: LIST
63086: LIST
63087: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
63088: LD_ADDR_VAR 0 30
63092: PUSH
63093: LD_INT 2
63095: PUSH
63096: LD_INT 1
63098: NEG
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: PUSH
63104: LD_INT 3
63106: PUSH
63107: LD_INT 0
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: PUSH
63114: LD_INT 3
63116: PUSH
63117: LD_INT 1
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: PUSH
63124: LD_INT 3
63126: PUSH
63127: LD_INT 1
63129: NEG
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: PUSH
63135: LD_INT 4
63137: PUSH
63138: LD_INT 0
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: PUSH
63145: LD_INT 4
63147: PUSH
63148: LD_INT 1
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: PUSH
63155: LD_INT 4
63157: PUSH
63158: LD_INT 1
63160: NEG
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: PUSH
63166: LD_INT 5
63168: PUSH
63169: LD_INT 0
63171: PUSH
63172: EMPTY
63173: LIST
63174: LIST
63175: PUSH
63176: LD_INT 5
63178: PUSH
63179: LD_INT 1
63181: PUSH
63182: EMPTY
63183: LIST
63184: LIST
63185: PUSH
63186: LD_INT 5
63188: PUSH
63189: LD_INT 1
63191: NEG
63192: PUSH
63193: EMPTY
63194: LIST
63195: LIST
63196: PUSH
63197: LD_INT 6
63199: PUSH
63200: LD_INT 0
63202: PUSH
63203: EMPTY
63204: LIST
63205: LIST
63206: PUSH
63207: LD_INT 6
63209: PUSH
63210: LD_INT 1
63212: PUSH
63213: EMPTY
63214: LIST
63215: LIST
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: LIST
63221: LIST
63222: LIST
63223: LIST
63224: LIST
63225: LIST
63226: LIST
63227: LIST
63228: LIST
63229: LIST
63230: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
63231: LD_ADDR_VAR 0 31
63235: PUSH
63236: LD_INT 3
63238: PUSH
63239: LD_INT 2
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: PUSH
63246: LD_INT 3
63248: PUSH
63249: LD_INT 3
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: PUSH
63256: LD_INT 2
63258: PUSH
63259: LD_INT 3
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: PUSH
63266: LD_INT 4
63268: PUSH
63269: LD_INT 3
63271: PUSH
63272: EMPTY
63273: LIST
63274: LIST
63275: PUSH
63276: LD_INT 4
63278: PUSH
63279: LD_INT 4
63281: PUSH
63282: EMPTY
63283: LIST
63284: LIST
63285: PUSH
63286: LD_INT 3
63288: PUSH
63289: LD_INT 4
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: PUSH
63296: LD_INT 5
63298: PUSH
63299: LD_INT 4
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: PUSH
63306: LD_INT 5
63308: PUSH
63309: LD_INT 5
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: PUSH
63316: LD_INT 4
63318: PUSH
63319: LD_INT 5
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: LD_INT 6
63328: PUSH
63329: LD_INT 5
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: LD_INT 6
63338: PUSH
63339: LD_INT 6
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: PUSH
63346: LD_INT 5
63348: PUSH
63349: LD_INT 6
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: PUSH
63356: EMPTY
63357: LIST
63358: LIST
63359: LIST
63360: LIST
63361: LIST
63362: LIST
63363: LIST
63364: LIST
63365: LIST
63366: LIST
63367: LIST
63368: LIST
63369: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
63370: LD_ADDR_VAR 0 32
63374: PUSH
63375: LD_INT 1
63377: PUSH
63378: LD_INT 3
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PUSH
63385: LD_INT 0
63387: PUSH
63388: LD_INT 3
63390: PUSH
63391: EMPTY
63392: LIST
63393: LIST
63394: PUSH
63395: LD_INT 1
63397: NEG
63398: PUSH
63399: LD_INT 2
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: PUSH
63406: LD_INT 1
63408: PUSH
63409: LD_INT 4
63411: PUSH
63412: EMPTY
63413: LIST
63414: LIST
63415: PUSH
63416: LD_INT 0
63418: PUSH
63419: LD_INT 4
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: PUSH
63426: LD_INT 1
63428: NEG
63429: PUSH
63430: LD_INT 3
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PUSH
63437: LD_INT 1
63439: PUSH
63440: LD_INT 5
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: PUSH
63447: LD_INT 0
63449: PUSH
63450: LD_INT 5
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: PUSH
63457: LD_INT 1
63459: NEG
63460: PUSH
63461: LD_INT 4
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: PUSH
63468: LD_INT 1
63470: PUSH
63471: LD_INT 6
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: PUSH
63478: LD_INT 0
63480: PUSH
63481: LD_INT 6
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: LD_INT 1
63490: NEG
63491: PUSH
63492: LD_INT 5
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
63513: LD_ADDR_VAR 0 33
63517: PUSH
63518: LD_INT 2
63520: NEG
63521: PUSH
63522: LD_INT 1
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: PUSH
63529: LD_INT 3
63531: NEG
63532: PUSH
63533: LD_INT 0
63535: PUSH
63536: EMPTY
63537: LIST
63538: LIST
63539: PUSH
63540: LD_INT 3
63542: NEG
63543: PUSH
63544: LD_INT 1
63546: NEG
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: PUSH
63552: LD_INT 3
63554: NEG
63555: PUSH
63556: LD_INT 1
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: PUSH
63563: LD_INT 4
63565: NEG
63566: PUSH
63567: LD_INT 0
63569: PUSH
63570: EMPTY
63571: LIST
63572: LIST
63573: PUSH
63574: LD_INT 4
63576: NEG
63577: PUSH
63578: LD_INT 1
63580: NEG
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: PUSH
63586: LD_INT 4
63588: NEG
63589: PUSH
63590: LD_INT 1
63592: PUSH
63593: EMPTY
63594: LIST
63595: LIST
63596: PUSH
63597: LD_INT 5
63599: NEG
63600: PUSH
63601: LD_INT 0
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: PUSH
63608: LD_INT 5
63610: NEG
63611: PUSH
63612: LD_INT 1
63614: NEG
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: PUSH
63620: LD_INT 5
63622: NEG
63623: PUSH
63624: LD_INT 1
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: LD_INT 6
63633: NEG
63634: PUSH
63635: LD_INT 0
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: PUSH
63642: LD_INT 6
63644: NEG
63645: PUSH
63646: LD_INT 1
63648: NEG
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: PUSH
63654: EMPTY
63655: LIST
63656: LIST
63657: LIST
63658: LIST
63659: LIST
63660: LIST
63661: LIST
63662: LIST
63663: LIST
63664: LIST
63665: LIST
63666: LIST
63667: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
63668: LD_ADDR_VAR 0 34
63672: PUSH
63673: LD_INT 2
63675: NEG
63676: PUSH
63677: LD_INT 3
63679: NEG
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: PUSH
63685: LD_INT 3
63687: NEG
63688: PUSH
63689: LD_INT 2
63691: NEG
63692: PUSH
63693: EMPTY
63694: LIST
63695: LIST
63696: PUSH
63697: LD_INT 3
63699: NEG
63700: PUSH
63701: LD_INT 3
63703: NEG
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: PUSH
63709: LD_INT 3
63711: NEG
63712: PUSH
63713: LD_INT 4
63715: NEG
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: PUSH
63721: LD_INT 4
63723: NEG
63724: PUSH
63725: LD_INT 3
63727: NEG
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: LD_INT 4
63735: NEG
63736: PUSH
63737: LD_INT 4
63739: NEG
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: PUSH
63745: LD_INT 4
63747: NEG
63748: PUSH
63749: LD_INT 5
63751: NEG
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: PUSH
63757: LD_INT 5
63759: NEG
63760: PUSH
63761: LD_INT 4
63763: NEG
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: PUSH
63769: LD_INT 5
63771: NEG
63772: PUSH
63773: LD_INT 5
63775: NEG
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: PUSH
63781: LD_INT 5
63783: NEG
63784: PUSH
63785: LD_INT 6
63787: NEG
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: PUSH
63793: LD_INT 6
63795: NEG
63796: PUSH
63797: LD_INT 5
63799: NEG
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: PUSH
63805: LD_INT 6
63807: NEG
63808: PUSH
63809: LD_INT 6
63811: NEG
63812: PUSH
63813: EMPTY
63814: LIST
63815: LIST
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: LIST
63821: LIST
63822: LIST
63823: LIST
63824: LIST
63825: LIST
63826: LIST
63827: LIST
63828: LIST
63829: LIST
63830: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
63831: LD_ADDR_VAR 0 41
63835: PUSH
63836: LD_INT 0
63838: PUSH
63839: LD_INT 2
63841: NEG
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_INT 1
63849: NEG
63850: PUSH
63851: LD_INT 3
63853: NEG
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: PUSH
63859: LD_INT 1
63861: PUSH
63862: LD_INT 2
63864: NEG
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: LIST
63874: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
63875: LD_ADDR_VAR 0 42
63879: PUSH
63880: LD_INT 2
63882: PUSH
63883: LD_INT 0
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: PUSH
63890: LD_INT 2
63892: PUSH
63893: LD_INT 1
63895: NEG
63896: PUSH
63897: EMPTY
63898: LIST
63899: LIST
63900: PUSH
63901: LD_INT 3
63903: PUSH
63904: LD_INT 1
63906: PUSH
63907: EMPTY
63908: LIST
63909: LIST
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: LIST
63915: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
63916: LD_ADDR_VAR 0 43
63920: PUSH
63921: LD_INT 2
63923: PUSH
63924: LD_INT 2
63926: PUSH
63927: EMPTY
63928: LIST
63929: LIST
63930: PUSH
63931: LD_INT 3
63933: PUSH
63934: LD_INT 2
63936: PUSH
63937: EMPTY
63938: LIST
63939: LIST
63940: PUSH
63941: LD_INT 2
63943: PUSH
63944: LD_INT 3
63946: PUSH
63947: EMPTY
63948: LIST
63949: LIST
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: LIST
63955: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
63956: LD_ADDR_VAR 0 44
63960: PUSH
63961: LD_INT 0
63963: PUSH
63964: LD_INT 2
63966: PUSH
63967: EMPTY
63968: LIST
63969: LIST
63970: PUSH
63971: LD_INT 1
63973: PUSH
63974: LD_INT 3
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: PUSH
63981: LD_INT 1
63983: NEG
63984: PUSH
63985: LD_INT 2
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: PUSH
63992: EMPTY
63993: LIST
63994: LIST
63995: LIST
63996: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63997: LD_ADDR_VAR 0 45
64001: PUSH
64002: LD_INT 2
64004: NEG
64005: PUSH
64006: LD_INT 0
64008: PUSH
64009: EMPTY
64010: LIST
64011: LIST
64012: PUSH
64013: LD_INT 2
64015: NEG
64016: PUSH
64017: LD_INT 1
64019: PUSH
64020: EMPTY
64021: LIST
64022: LIST
64023: PUSH
64024: LD_INT 3
64026: NEG
64027: PUSH
64028: LD_INT 1
64030: NEG
64031: PUSH
64032: EMPTY
64033: LIST
64034: LIST
64035: PUSH
64036: EMPTY
64037: LIST
64038: LIST
64039: LIST
64040: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
64041: LD_ADDR_VAR 0 46
64045: PUSH
64046: LD_INT 2
64048: NEG
64049: PUSH
64050: LD_INT 2
64052: NEG
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: PUSH
64058: LD_INT 2
64060: NEG
64061: PUSH
64062: LD_INT 3
64064: NEG
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: PUSH
64070: LD_INT 3
64072: NEG
64073: PUSH
64074: LD_INT 2
64076: NEG
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: LIST
64086: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
64087: LD_ADDR_VAR 0 47
64091: PUSH
64092: LD_INT 2
64094: NEG
64095: PUSH
64096: LD_INT 3
64098: NEG
64099: PUSH
64100: EMPTY
64101: LIST
64102: LIST
64103: PUSH
64104: LD_INT 1
64106: NEG
64107: PUSH
64108: LD_INT 3
64110: NEG
64111: PUSH
64112: EMPTY
64113: LIST
64114: LIST
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
64120: LD_ADDR_VAR 0 48
64124: PUSH
64125: LD_INT 1
64127: PUSH
64128: LD_INT 2
64130: NEG
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: PUSH
64136: LD_INT 2
64138: PUSH
64139: LD_INT 1
64141: NEG
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: PUSH
64147: EMPTY
64148: LIST
64149: LIST
64150: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
64151: LD_ADDR_VAR 0 49
64155: PUSH
64156: LD_INT 3
64158: PUSH
64159: LD_INT 1
64161: PUSH
64162: EMPTY
64163: LIST
64164: LIST
64165: PUSH
64166: LD_INT 3
64168: PUSH
64169: LD_INT 2
64171: PUSH
64172: EMPTY
64173: LIST
64174: LIST
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
64180: LD_ADDR_VAR 0 50
64184: PUSH
64185: LD_INT 2
64187: PUSH
64188: LD_INT 3
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: PUSH
64195: LD_INT 1
64197: PUSH
64198: LD_INT 3
64200: PUSH
64201: EMPTY
64202: LIST
64203: LIST
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
64209: LD_ADDR_VAR 0 51
64213: PUSH
64214: LD_INT 1
64216: NEG
64217: PUSH
64218: LD_INT 2
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: PUSH
64225: LD_INT 2
64227: NEG
64228: PUSH
64229: LD_INT 1
64231: PUSH
64232: EMPTY
64233: LIST
64234: LIST
64235: PUSH
64236: EMPTY
64237: LIST
64238: LIST
64239: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64240: LD_ADDR_VAR 0 52
64244: PUSH
64245: LD_INT 3
64247: NEG
64248: PUSH
64249: LD_INT 1
64251: NEG
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_INT 3
64259: NEG
64260: PUSH
64261: LD_INT 2
64263: NEG
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: PUSH
64269: EMPTY
64270: LIST
64271: LIST
64272: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64273: LD_ADDR_VAR 0 53
64277: PUSH
64278: LD_INT 1
64280: NEG
64281: PUSH
64282: LD_INT 3
64284: NEG
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: PUSH
64290: LD_INT 0
64292: PUSH
64293: LD_INT 3
64295: NEG
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: LD_INT 1
64303: PUSH
64304: LD_INT 2
64306: NEG
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: LIST
64316: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64317: LD_ADDR_VAR 0 54
64321: PUSH
64322: LD_INT 2
64324: PUSH
64325: LD_INT 1
64327: NEG
64328: PUSH
64329: EMPTY
64330: LIST
64331: LIST
64332: PUSH
64333: LD_INT 3
64335: PUSH
64336: LD_INT 0
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: PUSH
64343: LD_INT 3
64345: PUSH
64346: LD_INT 1
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: PUSH
64353: EMPTY
64354: LIST
64355: LIST
64356: LIST
64357: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64358: LD_ADDR_VAR 0 55
64362: PUSH
64363: LD_INT 3
64365: PUSH
64366: LD_INT 2
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: PUSH
64373: LD_INT 3
64375: PUSH
64376: LD_INT 3
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: PUSH
64383: LD_INT 2
64385: PUSH
64386: LD_INT 3
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: PUSH
64393: EMPTY
64394: LIST
64395: LIST
64396: LIST
64397: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64398: LD_ADDR_VAR 0 56
64402: PUSH
64403: LD_INT 1
64405: PUSH
64406: LD_INT 3
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: PUSH
64413: LD_INT 0
64415: PUSH
64416: LD_INT 3
64418: PUSH
64419: EMPTY
64420: LIST
64421: LIST
64422: PUSH
64423: LD_INT 1
64425: NEG
64426: PUSH
64427: LD_INT 2
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: PUSH
64434: EMPTY
64435: LIST
64436: LIST
64437: LIST
64438: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64439: LD_ADDR_VAR 0 57
64443: PUSH
64444: LD_INT 2
64446: NEG
64447: PUSH
64448: LD_INT 1
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: PUSH
64455: LD_INT 3
64457: NEG
64458: PUSH
64459: LD_INT 0
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: PUSH
64466: LD_INT 3
64468: NEG
64469: PUSH
64470: LD_INT 1
64472: NEG
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: LIST
64482: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64483: LD_ADDR_VAR 0 58
64487: PUSH
64488: LD_INT 2
64490: NEG
64491: PUSH
64492: LD_INT 3
64494: NEG
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: PUSH
64500: LD_INT 3
64502: NEG
64503: PUSH
64504: LD_INT 2
64506: NEG
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: PUSH
64512: LD_INT 3
64514: NEG
64515: PUSH
64516: LD_INT 3
64518: NEG
64519: PUSH
64520: EMPTY
64521: LIST
64522: LIST
64523: PUSH
64524: EMPTY
64525: LIST
64526: LIST
64527: LIST
64528: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
64529: LD_ADDR_VAR 0 59
64533: PUSH
64534: LD_INT 1
64536: NEG
64537: PUSH
64538: LD_INT 2
64540: NEG
64541: PUSH
64542: EMPTY
64543: LIST
64544: LIST
64545: PUSH
64546: LD_INT 0
64548: PUSH
64549: LD_INT 2
64551: NEG
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: PUSH
64557: LD_INT 1
64559: PUSH
64560: LD_INT 1
64562: NEG
64563: PUSH
64564: EMPTY
64565: LIST
64566: LIST
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: LIST
64572: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64573: LD_ADDR_VAR 0 60
64577: PUSH
64578: LD_INT 1
64580: PUSH
64581: LD_INT 1
64583: NEG
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: PUSH
64589: LD_INT 2
64591: PUSH
64592: LD_INT 0
64594: PUSH
64595: EMPTY
64596: LIST
64597: LIST
64598: PUSH
64599: LD_INT 2
64601: PUSH
64602: LD_INT 1
64604: PUSH
64605: EMPTY
64606: LIST
64607: LIST
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: LIST
64613: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64614: LD_ADDR_VAR 0 61
64618: PUSH
64619: LD_INT 2
64621: PUSH
64622: LD_INT 1
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: PUSH
64629: LD_INT 2
64631: PUSH
64632: LD_INT 2
64634: PUSH
64635: EMPTY
64636: LIST
64637: LIST
64638: PUSH
64639: LD_INT 1
64641: PUSH
64642: LD_INT 2
64644: PUSH
64645: EMPTY
64646: LIST
64647: LIST
64648: PUSH
64649: EMPTY
64650: LIST
64651: LIST
64652: LIST
64653: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64654: LD_ADDR_VAR 0 62
64658: PUSH
64659: LD_INT 1
64661: PUSH
64662: LD_INT 2
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: PUSH
64669: LD_INT 0
64671: PUSH
64672: LD_INT 2
64674: PUSH
64675: EMPTY
64676: LIST
64677: LIST
64678: PUSH
64679: LD_INT 1
64681: NEG
64682: PUSH
64683: LD_INT 1
64685: PUSH
64686: EMPTY
64687: LIST
64688: LIST
64689: PUSH
64690: EMPTY
64691: LIST
64692: LIST
64693: LIST
64694: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64695: LD_ADDR_VAR 0 63
64699: PUSH
64700: LD_INT 1
64702: NEG
64703: PUSH
64704: LD_INT 1
64706: PUSH
64707: EMPTY
64708: LIST
64709: LIST
64710: PUSH
64711: LD_INT 2
64713: NEG
64714: PUSH
64715: LD_INT 0
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: PUSH
64722: LD_INT 2
64724: NEG
64725: PUSH
64726: LD_INT 1
64728: NEG
64729: PUSH
64730: EMPTY
64731: LIST
64732: LIST
64733: PUSH
64734: EMPTY
64735: LIST
64736: LIST
64737: LIST
64738: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64739: LD_ADDR_VAR 0 64
64743: PUSH
64744: LD_INT 1
64746: NEG
64747: PUSH
64748: LD_INT 2
64750: NEG
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: PUSH
64756: LD_INT 2
64758: NEG
64759: PUSH
64760: LD_INT 1
64762: NEG
64763: PUSH
64764: EMPTY
64765: LIST
64766: LIST
64767: PUSH
64768: LD_INT 2
64770: NEG
64771: PUSH
64772: LD_INT 2
64774: NEG
64775: PUSH
64776: EMPTY
64777: LIST
64778: LIST
64779: PUSH
64780: EMPTY
64781: LIST
64782: LIST
64783: LIST
64784: ST_TO_ADDR
// end ; 2 :
64785: GO 68051
64787: LD_INT 2
64789: DOUBLE
64790: EQUAL
64791: IFTRUE 64795
64793: GO 68050
64795: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
64796: LD_ADDR_VAR 0 29
64800: PUSH
64801: LD_INT 4
64803: PUSH
64804: LD_INT 0
64806: PUSH
64807: EMPTY
64808: LIST
64809: LIST
64810: PUSH
64811: LD_INT 4
64813: PUSH
64814: LD_INT 1
64816: NEG
64817: PUSH
64818: EMPTY
64819: LIST
64820: LIST
64821: PUSH
64822: LD_INT 5
64824: PUSH
64825: LD_INT 0
64827: PUSH
64828: EMPTY
64829: LIST
64830: LIST
64831: PUSH
64832: LD_INT 5
64834: PUSH
64835: LD_INT 1
64837: PUSH
64838: EMPTY
64839: LIST
64840: LIST
64841: PUSH
64842: LD_INT 4
64844: PUSH
64845: LD_INT 1
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: PUSH
64852: LD_INT 3
64854: PUSH
64855: LD_INT 0
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: PUSH
64862: LD_INT 3
64864: PUSH
64865: LD_INT 1
64867: NEG
64868: PUSH
64869: EMPTY
64870: LIST
64871: LIST
64872: PUSH
64873: LD_INT 3
64875: PUSH
64876: LD_INT 2
64878: NEG
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: PUSH
64884: LD_INT 5
64886: PUSH
64887: LD_INT 2
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: PUSH
64894: LD_INT 3
64896: PUSH
64897: LD_INT 3
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: PUSH
64904: LD_INT 3
64906: PUSH
64907: LD_INT 2
64909: PUSH
64910: EMPTY
64911: LIST
64912: LIST
64913: PUSH
64914: LD_INT 4
64916: PUSH
64917: LD_INT 3
64919: PUSH
64920: EMPTY
64921: LIST
64922: LIST
64923: PUSH
64924: LD_INT 4
64926: PUSH
64927: LD_INT 4
64929: PUSH
64930: EMPTY
64931: LIST
64932: LIST
64933: PUSH
64934: LD_INT 3
64936: PUSH
64937: LD_INT 4
64939: PUSH
64940: EMPTY
64941: LIST
64942: LIST
64943: PUSH
64944: LD_INT 2
64946: PUSH
64947: LD_INT 3
64949: PUSH
64950: EMPTY
64951: LIST
64952: LIST
64953: PUSH
64954: LD_INT 2
64956: PUSH
64957: LD_INT 2
64959: PUSH
64960: EMPTY
64961: LIST
64962: LIST
64963: PUSH
64964: LD_INT 4
64966: PUSH
64967: LD_INT 2
64969: PUSH
64970: EMPTY
64971: LIST
64972: LIST
64973: PUSH
64974: LD_INT 2
64976: PUSH
64977: LD_INT 4
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: PUSH
64984: LD_INT 0
64986: PUSH
64987: LD_INT 4
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: PUSH
64994: LD_INT 0
64996: PUSH
64997: LD_INT 3
64999: PUSH
65000: EMPTY
65001: LIST
65002: LIST
65003: PUSH
65004: LD_INT 1
65006: PUSH
65007: LD_INT 4
65009: PUSH
65010: EMPTY
65011: LIST
65012: LIST
65013: PUSH
65014: LD_INT 1
65016: PUSH
65017: LD_INT 5
65019: PUSH
65020: EMPTY
65021: LIST
65022: LIST
65023: PUSH
65024: LD_INT 0
65026: PUSH
65027: LD_INT 5
65029: PUSH
65030: EMPTY
65031: LIST
65032: LIST
65033: PUSH
65034: LD_INT 1
65036: NEG
65037: PUSH
65038: LD_INT 4
65040: PUSH
65041: EMPTY
65042: LIST
65043: LIST
65044: PUSH
65045: LD_INT 1
65047: NEG
65048: PUSH
65049: LD_INT 3
65051: PUSH
65052: EMPTY
65053: LIST
65054: LIST
65055: PUSH
65056: LD_INT 2
65058: PUSH
65059: LD_INT 5
65061: PUSH
65062: EMPTY
65063: LIST
65064: LIST
65065: PUSH
65066: LD_INT 2
65068: NEG
65069: PUSH
65070: LD_INT 3
65072: PUSH
65073: EMPTY
65074: LIST
65075: LIST
65076: PUSH
65077: LD_INT 3
65079: NEG
65080: PUSH
65081: LD_INT 0
65083: PUSH
65084: EMPTY
65085: LIST
65086: LIST
65087: PUSH
65088: LD_INT 3
65090: NEG
65091: PUSH
65092: LD_INT 1
65094: NEG
65095: PUSH
65096: EMPTY
65097: LIST
65098: LIST
65099: PUSH
65100: LD_INT 2
65102: NEG
65103: PUSH
65104: LD_INT 0
65106: PUSH
65107: EMPTY
65108: LIST
65109: LIST
65110: PUSH
65111: LD_INT 2
65113: NEG
65114: PUSH
65115: LD_INT 1
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: PUSH
65122: LD_INT 3
65124: NEG
65125: PUSH
65126: LD_INT 1
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: PUSH
65133: LD_INT 4
65135: NEG
65136: PUSH
65137: LD_INT 0
65139: PUSH
65140: EMPTY
65141: LIST
65142: LIST
65143: PUSH
65144: LD_INT 4
65146: NEG
65147: PUSH
65148: LD_INT 1
65150: NEG
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: PUSH
65156: LD_INT 4
65158: NEG
65159: PUSH
65160: LD_INT 2
65162: NEG
65163: PUSH
65164: EMPTY
65165: LIST
65166: LIST
65167: PUSH
65168: LD_INT 2
65170: NEG
65171: PUSH
65172: LD_INT 2
65174: PUSH
65175: EMPTY
65176: LIST
65177: LIST
65178: PUSH
65179: LD_INT 4
65181: NEG
65182: PUSH
65183: LD_INT 4
65185: NEG
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: PUSH
65191: LD_INT 4
65193: NEG
65194: PUSH
65195: LD_INT 5
65197: NEG
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: PUSH
65203: LD_INT 3
65205: NEG
65206: PUSH
65207: LD_INT 4
65209: NEG
65210: PUSH
65211: EMPTY
65212: LIST
65213: LIST
65214: PUSH
65215: LD_INT 3
65217: NEG
65218: PUSH
65219: LD_INT 3
65221: NEG
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: PUSH
65227: LD_INT 4
65229: NEG
65230: PUSH
65231: LD_INT 3
65233: NEG
65234: PUSH
65235: EMPTY
65236: LIST
65237: LIST
65238: PUSH
65239: LD_INT 5
65241: NEG
65242: PUSH
65243: LD_INT 4
65245: NEG
65246: PUSH
65247: EMPTY
65248: LIST
65249: LIST
65250: PUSH
65251: LD_INT 5
65253: NEG
65254: PUSH
65255: LD_INT 5
65257: NEG
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: PUSH
65263: LD_INT 3
65265: NEG
65266: PUSH
65267: LD_INT 5
65269: NEG
65270: PUSH
65271: EMPTY
65272: LIST
65273: LIST
65274: PUSH
65275: LD_INT 5
65277: NEG
65278: PUSH
65279: LD_INT 3
65281: NEG
65282: PUSH
65283: EMPTY
65284: LIST
65285: LIST
65286: PUSH
65287: EMPTY
65288: LIST
65289: LIST
65290: LIST
65291: LIST
65292: LIST
65293: LIST
65294: LIST
65295: LIST
65296: LIST
65297: LIST
65298: LIST
65299: LIST
65300: LIST
65301: LIST
65302: LIST
65303: LIST
65304: LIST
65305: LIST
65306: LIST
65307: LIST
65308: LIST
65309: LIST
65310: LIST
65311: LIST
65312: LIST
65313: LIST
65314: LIST
65315: LIST
65316: LIST
65317: LIST
65318: LIST
65319: LIST
65320: LIST
65321: LIST
65322: LIST
65323: LIST
65324: LIST
65325: LIST
65326: LIST
65327: LIST
65328: LIST
65329: LIST
65330: LIST
65331: LIST
65332: LIST
65333: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
65334: LD_ADDR_VAR 0 30
65338: PUSH
65339: LD_INT 4
65341: PUSH
65342: LD_INT 4
65344: PUSH
65345: EMPTY
65346: LIST
65347: LIST
65348: PUSH
65349: LD_INT 4
65351: PUSH
65352: LD_INT 3
65354: PUSH
65355: EMPTY
65356: LIST
65357: LIST
65358: PUSH
65359: LD_INT 5
65361: PUSH
65362: LD_INT 4
65364: PUSH
65365: EMPTY
65366: LIST
65367: LIST
65368: PUSH
65369: LD_INT 5
65371: PUSH
65372: LD_INT 5
65374: PUSH
65375: EMPTY
65376: LIST
65377: LIST
65378: PUSH
65379: LD_INT 4
65381: PUSH
65382: LD_INT 5
65384: PUSH
65385: EMPTY
65386: LIST
65387: LIST
65388: PUSH
65389: LD_INT 3
65391: PUSH
65392: LD_INT 4
65394: PUSH
65395: EMPTY
65396: LIST
65397: LIST
65398: PUSH
65399: LD_INT 3
65401: PUSH
65402: LD_INT 3
65404: PUSH
65405: EMPTY
65406: LIST
65407: LIST
65408: PUSH
65409: LD_INT 5
65411: PUSH
65412: LD_INT 3
65414: PUSH
65415: EMPTY
65416: LIST
65417: LIST
65418: PUSH
65419: LD_INT 3
65421: PUSH
65422: LD_INT 5
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: PUSH
65429: LD_INT 0
65431: PUSH
65432: LD_INT 3
65434: PUSH
65435: EMPTY
65436: LIST
65437: LIST
65438: PUSH
65439: LD_INT 0
65441: PUSH
65442: LD_INT 2
65444: PUSH
65445: EMPTY
65446: LIST
65447: LIST
65448: PUSH
65449: LD_INT 1
65451: PUSH
65452: LD_INT 3
65454: PUSH
65455: EMPTY
65456: LIST
65457: LIST
65458: PUSH
65459: LD_INT 1
65461: PUSH
65462: LD_INT 4
65464: PUSH
65465: EMPTY
65466: LIST
65467: LIST
65468: PUSH
65469: LD_INT 0
65471: PUSH
65472: LD_INT 4
65474: PUSH
65475: EMPTY
65476: LIST
65477: LIST
65478: PUSH
65479: LD_INT 1
65481: NEG
65482: PUSH
65483: LD_INT 3
65485: PUSH
65486: EMPTY
65487: LIST
65488: LIST
65489: PUSH
65490: LD_INT 1
65492: NEG
65493: PUSH
65494: LD_INT 2
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: PUSH
65501: LD_INT 2
65503: PUSH
65504: LD_INT 4
65506: PUSH
65507: EMPTY
65508: LIST
65509: LIST
65510: PUSH
65511: LD_INT 2
65513: NEG
65514: PUSH
65515: LD_INT 2
65517: PUSH
65518: EMPTY
65519: LIST
65520: LIST
65521: PUSH
65522: LD_INT 4
65524: NEG
65525: PUSH
65526: LD_INT 0
65528: PUSH
65529: EMPTY
65530: LIST
65531: LIST
65532: PUSH
65533: LD_INT 4
65535: NEG
65536: PUSH
65537: LD_INT 1
65539: NEG
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: PUSH
65545: LD_INT 3
65547: NEG
65548: PUSH
65549: LD_INT 0
65551: PUSH
65552: EMPTY
65553: LIST
65554: LIST
65555: PUSH
65556: LD_INT 3
65558: NEG
65559: PUSH
65560: LD_INT 1
65562: PUSH
65563: EMPTY
65564: LIST
65565: LIST
65566: PUSH
65567: LD_INT 4
65569: NEG
65570: PUSH
65571: LD_INT 1
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: PUSH
65578: LD_INT 5
65580: NEG
65581: PUSH
65582: LD_INT 0
65584: PUSH
65585: EMPTY
65586: LIST
65587: LIST
65588: PUSH
65589: LD_INT 5
65591: NEG
65592: PUSH
65593: LD_INT 1
65595: NEG
65596: PUSH
65597: EMPTY
65598: LIST
65599: LIST
65600: PUSH
65601: LD_INT 5
65603: NEG
65604: PUSH
65605: LD_INT 2
65607: NEG
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: PUSH
65613: LD_INT 3
65615: NEG
65616: PUSH
65617: LD_INT 2
65619: PUSH
65620: EMPTY
65621: LIST
65622: LIST
65623: PUSH
65624: LD_INT 3
65626: NEG
65627: PUSH
65628: LD_INT 3
65630: NEG
65631: PUSH
65632: EMPTY
65633: LIST
65634: LIST
65635: PUSH
65636: LD_INT 3
65638: NEG
65639: PUSH
65640: LD_INT 4
65642: NEG
65643: PUSH
65644: EMPTY
65645: LIST
65646: LIST
65647: PUSH
65648: LD_INT 2
65650: NEG
65651: PUSH
65652: LD_INT 3
65654: NEG
65655: PUSH
65656: EMPTY
65657: LIST
65658: LIST
65659: PUSH
65660: LD_INT 2
65662: NEG
65663: PUSH
65664: LD_INT 2
65666: NEG
65667: PUSH
65668: EMPTY
65669: LIST
65670: LIST
65671: PUSH
65672: LD_INT 3
65674: NEG
65675: PUSH
65676: LD_INT 2
65678: NEG
65679: PUSH
65680: EMPTY
65681: LIST
65682: LIST
65683: PUSH
65684: LD_INT 4
65686: NEG
65687: PUSH
65688: LD_INT 3
65690: NEG
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: PUSH
65696: LD_INT 4
65698: NEG
65699: PUSH
65700: LD_INT 4
65702: NEG
65703: PUSH
65704: EMPTY
65705: LIST
65706: LIST
65707: PUSH
65708: LD_INT 2
65710: NEG
65711: PUSH
65712: LD_INT 4
65714: NEG
65715: PUSH
65716: EMPTY
65717: LIST
65718: LIST
65719: PUSH
65720: LD_INT 4
65722: NEG
65723: PUSH
65724: LD_INT 2
65726: NEG
65727: PUSH
65728: EMPTY
65729: LIST
65730: LIST
65731: PUSH
65732: LD_INT 0
65734: PUSH
65735: LD_INT 4
65737: NEG
65738: PUSH
65739: EMPTY
65740: LIST
65741: LIST
65742: PUSH
65743: LD_INT 0
65745: PUSH
65746: LD_INT 5
65748: NEG
65749: PUSH
65750: EMPTY
65751: LIST
65752: LIST
65753: PUSH
65754: LD_INT 1
65756: PUSH
65757: LD_INT 4
65759: NEG
65760: PUSH
65761: EMPTY
65762: LIST
65763: LIST
65764: PUSH
65765: LD_INT 1
65767: PUSH
65768: LD_INT 3
65770: NEG
65771: PUSH
65772: EMPTY
65773: LIST
65774: LIST
65775: PUSH
65776: LD_INT 0
65778: PUSH
65779: LD_INT 3
65781: NEG
65782: PUSH
65783: EMPTY
65784: LIST
65785: LIST
65786: PUSH
65787: LD_INT 1
65789: NEG
65790: PUSH
65791: LD_INT 4
65793: NEG
65794: PUSH
65795: EMPTY
65796: LIST
65797: LIST
65798: PUSH
65799: LD_INT 1
65801: NEG
65802: PUSH
65803: LD_INT 5
65805: NEG
65806: PUSH
65807: EMPTY
65808: LIST
65809: LIST
65810: PUSH
65811: LD_INT 2
65813: PUSH
65814: LD_INT 3
65816: NEG
65817: PUSH
65818: EMPTY
65819: LIST
65820: LIST
65821: PUSH
65822: LD_INT 2
65824: NEG
65825: PUSH
65826: LD_INT 5
65828: NEG
65829: PUSH
65830: EMPTY
65831: LIST
65832: LIST
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: LIST
65838: LIST
65839: LIST
65840: LIST
65841: LIST
65842: LIST
65843: LIST
65844: LIST
65845: LIST
65846: LIST
65847: LIST
65848: LIST
65849: LIST
65850: LIST
65851: LIST
65852: LIST
65853: LIST
65854: LIST
65855: LIST
65856: LIST
65857: LIST
65858: LIST
65859: LIST
65860: LIST
65861: LIST
65862: LIST
65863: LIST
65864: LIST
65865: LIST
65866: LIST
65867: LIST
65868: LIST
65869: LIST
65870: LIST
65871: LIST
65872: LIST
65873: LIST
65874: LIST
65875: LIST
65876: LIST
65877: LIST
65878: LIST
65879: LIST
65880: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
65881: LD_ADDR_VAR 0 31
65885: PUSH
65886: LD_INT 0
65888: PUSH
65889: LD_INT 4
65891: PUSH
65892: EMPTY
65893: LIST
65894: LIST
65895: PUSH
65896: LD_INT 0
65898: PUSH
65899: LD_INT 3
65901: PUSH
65902: EMPTY
65903: LIST
65904: LIST
65905: PUSH
65906: LD_INT 1
65908: PUSH
65909: LD_INT 4
65911: PUSH
65912: EMPTY
65913: LIST
65914: LIST
65915: PUSH
65916: LD_INT 1
65918: PUSH
65919: LD_INT 5
65921: PUSH
65922: EMPTY
65923: LIST
65924: LIST
65925: PUSH
65926: LD_INT 0
65928: PUSH
65929: LD_INT 5
65931: PUSH
65932: EMPTY
65933: LIST
65934: LIST
65935: PUSH
65936: LD_INT 1
65938: NEG
65939: PUSH
65940: LD_INT 4
65942: PUSH
65943: EMPTY
65944: LIST
65945: LIST
65946: PUSH
65947: LD_INT 1
65949: NEG
65950: PUSH
65951: LD_INT 3
65953: PUSH
65954: EMPTY
65955: LIST
65956: LIST
65957: PUSH
65958: LD_INT 2
65960: PUSH
65961: LD_INT 5
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: PUSH
65968: LD_INT 2
65970: NEG
65971: PUSH
65972: LD_INT 3
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: PUSH
65979: LD_INT 3
65981: NEG
65982: PUSH
65983: LD_INT 0
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: PUSH
65990: LD_INT 3
65992: NEG
65993: PUSH
65994: LD_INT 1
65996: NEG
65997: PUSH
65998: EMPTY
65999: LIST
66000: LIST
66001: PUSH
66002: LD_INT 2
66004: NEG
66005: PUSH
66006: LD_INT 0
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: PUSH
66013: LD_INT 2
66015: NEG
66016: PUSH
66017: LD_INT 1
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: PUSH
66024: LD_INT 3
66026: NEG
66027: PUSH
66028: LD_INT 1
66030: PUSH
66031: EMPTY
66032: LIST
66033: LIST
66034: PUSH
66035: LD_INT 4
66037: NEG
66038: PUSH
66039: LD_INT 0
66041: PUSH
66042: EMPTY
66043: LIST
66044: LIST
66045: PUSH
66046: LD_INT 4
66048: NEG
66049: PUSH
66050: LD_INT 1
66052: NEG
66053: PUSH
66054: EMPTY
66055: LIST
66056: LIST
66057: PUSH
66058: LD_INT 4
66060: NEG
66061: PUSH
66062: LD_INT 2
66064: NEG
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: PUSH
66070: LD_INT 2
66072: NEG
66073: PUSH
66074: LD_INT 2
66076: PUSH
66077: EMPTY
66078: LIST
66079: LIST
66080: PUSH
66081: LD_INT 4
66083: NEG
66084: PUSH
66085: LD_INT 4
66087: NEG
66088: PUSH
66089: EMPTY
66090: LIST
66091: LIST
66092: PUSH
66093: LD_INT 4
66095: NEG
66096: PUSH
66097: LD_INT 5
66099: NEG
66100: PUSH
66101: EMPTY
66102: LIST
66103: LIST
66104: PUSH
66105: LD_INT 3
66107: NEG
66108: PUSH
66109: LD_INT 4
66111: NEG
66112: PUSH
66113: EMPTY
66114: LIST
66115: LIST
66116: PUSH
66117: LD_INT 3
66119: NEG
66120: PUSH
66121: LD_INT 3
66123: NEG
66124: PUSH
66125: EMPTY
66126: LIST
66127: LIST
66128: PUSH
66129: LD_INT 4
66131: NEG
66132: PUSH
66133: LD_INT 3
66135: NEG
66136: PUSH
66137: EMPTY
66138: LIST
66139: LIST
66140: PUSH
66141: LD_INT 5
66143: NEG
66144: PUSH
66145: LD_INT 4
66147: NEG
66148: PUSH
66149: EMPTY
66150: LIST
66151: LIST
66152: PUSH
66153: LD_INT 5
66155: NEG
66156: PUSH
66157: LD_INT 5
66159: NEG
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: PUSH
66165: LD_INT 3
66167: NEG
66168: PUSH
66169: LD_INT 5
66171: NEG
66172: PUSH
66173: EMPTY
66174: LIST
66175: LIST
66176: PUSH
66177: LD_INT 5
66179: NEG
66180: PUSH
66181: LD_INT 3
66183: NEG
66184: PUSH
66185: EMPTY
66186: LIST
66187: LIST
66188: PUSH
66189: LD_INT 0
66191: PUSH
66192: LD_INT 3
66194: NEG
66195: PUSH
66196: EMPTY
66197: LIST
66198: LIST
66199: PUSH
66200: LD_INT 0
66202: PUSH
66203: LD_INT 4
66205: NEG
66206: PUSH
66207: EMPTY
66208: LIST
66209: LIST
66210: PUSH
66211: LD_INT 1
66213: PUSH
66214: LD_INT 3
66216: NEG
66217: PUSH
66218: EMPTY
66219: LIST
66220: LIST
66221: PUSH
66222: LD_INT 1
66224: PUSH
66225: LD_INT 2
66227: NEG
66228: PUSH
66229: EMPTY
66230: LIST
66231: LIST
66232: PUSH
66233: LD_INT 0
66235: PUSH
66236: LD_INT 2
66238: NEG
66239: PUSH
66240: EMPTY
66241: LIST
66242: LIST
66243: PUSH
66244: LD_INT 1
66246: NEG
66247: PUSH
66248: LD_INT 3
66250: NEG
66251: PUSH
66252: EMPTY
66253: LIST
66254: LIST
66255: PUSH
66256: LD_INT 1
66258: NEG
66259: PUSH
66260: LD_INT 4
66262: NEG
66263: PUSH
66264: EMPTY
66265: LIST
66266: LIST
66267: PUSH
66268: LD_INT 2
66270: PUSH
66271: LD_INT 2
66273: NEG
66274: PUSH
66275: EMPTY
66276: LIST
66277: LIST
66278: PUSH
66279: LD_INT 2
66281: NEG
66282: PUSH
66283: LD_INT 4
66285: NEG
66286: PUSH
66287: EMPTY
66288: LIST
66289: LIST
66290: PUSH
66291: LD_INT 4
66293: PUSH
66294: LD_INT 0
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: PUSH
66301: LD_INT 4
66303: PUSH
66304: LD_INT 1
66306: NEG
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: PUSH
66312: LD_INT 5
66314: PUSH
66315: LD_INT 0
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: PUSH
66322: LD_INT 5
66324: PUSH
66325: LD_INT 1
66327: PUSH
66328: EMPTY
66329: LIST
66330: LIST
66331: PUSH
66332: LD_INT 4
66334: PUSH
66335: LD_INT 1
66337: PUSH
66338: EMPTY
66339: LIST
66340: LIST
66341: PUSH
66342: LD_INT 3
66344: PUSH
66345: LD_INT 0
66347: PUSH
66348: EMPTY
66349: LIST
66350: LIST
66351: PUSH
66352: LD_INT 3
66354: PUSH
66355: LD_INT 1
66357: NEG
66358: PUSH
66359: EMPTY
66360: LIST
66361: LIST
66362: PUSH
66363: LD_INT 3
66365: PUSH
66366: LD_INT 2
66368: NEG
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: PUSH
66374: LD_INT 5
66376: PUSH
66377: LD_INT 2
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: LIST
66388: LIST
66389: LIST
66390: LIST
66391: LIST
66392: LIST
66393: LIST
66394: LIST
66395: LIST
66396: LIST
66397: LIST
66398: LIST
66399: LIST
66400: LIST
66401: LIST
66402: LIST
66403: LIST
66404: LIST
66405: LIST
66406: LIST
66407: LIST
66408: LIST
66409: LIST
66410: LIST
66411: LIST
66412: LIST
66413: LIST
66414: LIST
66415: LIST
66416: LIST
66417: LIST
66418: LIST
66419: LIST
66420: LIST
66421: LIST
66422: LIST
66423: LIST
66424: LIST
66425: LIST
66426: LIST
66427: LIST
66428: LIST
66429: LIST
66430: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
66431: LD_ADDR_VAR 0 32
66435: PUSH
66436: LD_INT 4
66438: NEG
66439: PUSH
66440: LD_INT 0
66442: PUSH
66443: EMPTY
66444: LIST
66445: LIST
66446: PUSH
66447: LD_INT 4
66449: NEG
66450: PUSH
66451: LD_INT 1
66453: NEG
66454: PUSH
66455: EMPTY
66456: LIST
66457: LIST
66458: PUSH
66459: LD_INT 3
66461: NEG
66462: PUSH
66463: LD_INT 0
66465: PUSH
66466: EMPTY
66467: LIST
66468: LIST
66469: PUSH
66470: LD_INT 3
66472: NEG
66473: PUSH
66474: LD_INT 1
66476: PUSH
66477: EMPTY
66478: LIST
66479: LIST
66480: PUSH
66481: LD_INT 4
66483: NEG
66484: PUSH
66485: LD_INT 1
66487: PUSH
66488: EMPTY
66489: LIST
66490: LIST
66491: PUSH
66492: LD_INT 5
66494: NEG
66495: PUSH
66496: LD_INT 0
66498: PUSH
66499: EMPTY
66500: LIST
66501: LIST
66502: PUSH
66503: LD_INT 5
66505: NEG
66506: PUSH
66507: LD_INT 1
66509: NEG
66510: PUSH
66511: EMPTY
66512: LIST
66513: LIST
66514: PUSH
66515: LD_INT 5
66517: NEG
66518: PUSH
66519: LD_INT 2
66521: NEG
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: PUSH
66527: LD_INT 3
66529: NEG
66530: PUSH
66531: LD_INT 2
66533: PUSH
66534: EMPTY
66535: LIST
66536: LIST
66537: PUSH
66538: LD_INT 3
66540: NEG
66541: PUSH
66542: LD_INT 3
66544: NEG
66545: PUSH
66546: EMPTY
66547: LIST
66548: LIST
66549: PUSH
66550: LD_INT 3
66552: NEG
66553: PUSH
66554: LD_INT 4
66556: NEG
66557: PUSH
66558: EMPTY
66559: LIST
66560: LIST
66561: PUSH
66562: LD_INT 2
66564: NEG
66565: PUSH
66566: LD_INT 3
66568: NEG
66569: PUSH
66570: EMPTY
66571: LIST
66572: LIST
66573: PUSH
66574: LD_INT 2
66576: NEG
66577: PUSH
66578: LD_INT 2
66580: NEG
66581: PUSH
66582: EMPTY
66583: LIST
66584: LIST
66585: PUSH
66586: LD_INT 3
66588: NEG
66589: PUSH
66590: LD_INT 2
66592: NEG
66593: PUSH
66594: EMPTY
66595: LIST
66596: LIST
66597: PUSH
66598: LD_INT 4
66600: NEG
66601: PUSH
66602: LD_INT 3
66604: NEG
66605: PUSH
66606: EMPTY
66607: LIST
66608: LIST
66609: PUSH
66610: LD_INT 4
66612: NEG
66613: PUSH
66614: LD_INT 4
66616: NEG
66617: PUSH
66618: EMPTY
66619: LIST
66620: LIST
66621: PUSH
66622: LD_INT 2
66624: NEG
66625: PUSH
66626: LD_INT 4
66628: NEG
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: PUSH
66634: LD_INT 4
66636: NEG
66637: PUSH
66638: LD_INT 2
66640: NEG
66641: PUSH
66642: EMPTY
66643: LIST
66644: LIST
66645: PUSH
66646: LD_INT 0
66648: PUSH
66649: LD_INT 4
66651: NEG
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: PUSH
66657: LD_INT 0
66659: PUSH
66660: LD_INT 5
66662: NEG
66663: PUSH
66664: EMPTY
66665: LIST
66666: LIST
66667: PUSH
66668: LD_INT 1
66670: PUSH
66671: LD_INT 4
66673: NEG
66674: PUSH
66675: EMPTY
66676: LIST
66677: LIST
66678: PUSH
66679: LD_INT 1
66681: PUSH
66682: LD_INT 3
66684: NEG
66685: PUSH
66686: EMPTY
66687: LIST
66688: LIST
66689: PUSH
66690: LD_INT 0
66692: PUSH
66693: LD_INT 3
66695: NEG
66696: PUSH
66697: EMPTY
66698: LIST
66699: LIST
66700: PUSH
66701: LD_INT 1
66703: NEG
66704: PUSH
66705: LD_INT 4
66707: NEG
66708: PUSH
66709: EMPTY
66710: LIST
66711: LIST
66712: PUSH
66713: LD_INT 1
66715: NEG
66716: PUSH
66717: LD_INT 5
66719: NEG
66720: PUSH
66721: EMPTY
66722: LIST
66723: LIST
66724: PUSH
66725: LD_INT 2
66727: PUSH
66728: LD_INT 3
66730: NEG
66731: PUSH
66732: EMPTY
66733: LIST
66734: LIST
66735: PUSH
66736: LD_INT 2
66738: NEG
66739: PUSH
66740: LD_INT 5
66742: NEG
66743: PUSH
66744: EMPTY
66745: LIST
66746: LIST
66747: PUSH
66748: LD_INT 3
66750: PUSH
66751: LD_INT 0
66753: PUSH
66754: EMPTY
66755: LIST
66756: LIST
66757: PUSH
66758: LD_INT 3
66760: PUSH
66761: LD_INT 1
66763: NEG
66764: PUSH
66765: EMPTY
66766: LIST
66767: LIST
66768: PUSH
66769: LD_INT 4
66771: PUSH
66772: LD_INT 0
66774: PUSH
66775: EMPTY
66776: LIST
66777: LIST
66778: PUSH
66779: LD_INT 4
66781: PUSH
66782: LD_INT 1
66784: PUSH
66785: EMPTY
66786: LIST
66787: LIST
66788: PUSH
66789: LD_INT 3
66791: PUSH
66792: LD_INT 1
66794: PUSH
66795: EMPTY
66796: LIST
66797: LIST
66798: PUSH
66799: LD_INT 2
66801: PUSH
66802: LD_INT 0
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: PUSH
66809: LD_INT 2
66811: PUSH
66812: LD_INT 1
66814: NEG
66815: PUSH
66816: EMPTY
66817: LIST
66818: LIST
66819: PUSH
66820: LD_INT 2
66822: PUSH
66823: LD_INT 2
66825: NEG
66826: PUSH
66827: EMPTY
66828: LIST
66829: LIST
66830: PUSH
66831: LD_INT 4
66833: PUSH
66834: LD_INT 2
66836: PUSH
66837: EMPTY
66838: LIST
66839: LIST
66840: PUSH
66841: LD_INT 4
66843: PUSH
66844: LD_INT 4
66846: PUSH
66847: EMPTY
66848: LIST
66849: LIST
66850: PUSH
66851: LD_INT 4
66853: PUSH
66854: LD_INT 3
66856: PUSH
66857: EMPTY
66858: LIST
66859: LIST
66860: PUSH
66861: LD_INT 5
66863: PUSH
66864: LD_INT 4
66866: PUSH
66867: EMPTY
66868: LIST
66869: LIST
66870: PUSH
66871: LD_INT 5
66873: PUSH
66874: LD_INT 5
66876: PUSH
66877: EMPTY
66878: LIST
66879: LIST
66880: PUSH
66881: LD_INT 4
66883: PUSH
66884: LD_INT 5
66886: PUSH
66887: EMPTY
66888: LIST
66889: LIST
66890: PUSH
66891: LD_INT 3
66893: PUSH
66894: LD_INT 4
66896: PUSH
66897: EMPTY
66898: LIST
66899: LIST
66900: PUSH
66901: LD_INT 3
66903: PUSH
66904: LD_INT 3
66906: PUSH
66907: EMPTY
66908: LIST
66909: LIST
66910: PUSH
66911: LD_INT 5
66913: PUSH
66914: LD_INT 3
66916: PUSH
66917: EMPTY
66918: LIST
66919: LIST
66920: PUSH
66921: LD_INT 3
66923: PUSH
66924: LD_INT 5
66926: PUSH
66927: EMPTY
66928: LIST
66929: LIST
66930: PUSH
66931: EMPTY
66932: LIST
66933: LIST
66934: LIST
66935: LIST
66936: LIST
66937: LIST
66938: LIST
66939: LIST
66940: LIST
66941: LIST
66942: LIST
66943: LIST
66944: LIST
66945: LIST
66946: LIST
66947: LIST
66948: LIST
66949: LIST
66950: LIST
66951: LIST
66952: LIST
66953: LIST
66954: LIST
66955: LIST
66956: LIST
66957: LIST
66958: LIST
66959: LIST
66960: LIST
66961: LIST
66962: LIST
66963: LIST
66964: LIST
66965: LIST
66966: LIST
66967: LIST
66968: LIST
66969: LIST
66970: LIST
66971: LIST
66972: LIST
66973: LIST
66974: LIST
66975: LIST
66976: LIST
66977: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
66978: LD_ADDR_VAR 0 33
66982: PUSH
66983: LD_INT 4
66985: NEG
66986: PUSH
66987: LD_INT 4
66989: NEG
66990: PUSH
66991: EMPTY
66992: LIST
66993: LIST
66994: PUSH
66995: LD_INT 4
66997: NEG
66998: PUSH
66999: LD_INT 5
67001: NEG
67002: PUSH
67003: EMPTY
67004: LIST
67005: LIST
67006: PUSH
67007: LD_INT 3
67009: NEG
67010: PUSH
67011: LD_INT 4
67013: NEG
67014: PUSH
67015: EMPTY
67016: LIST
67017: LIST
67018: PUSH
67019: LD_INT 3
67021: NEG
67022: PUSH
67023: LD_INT 3
67025: NEG
67026: PUSH
67027: EMPTY
67028: LIST
67029: LIST
67030: PUSH
67031: LD_INT 4
67033: NEG
67034: PUSH
67035: LD_INT 3
67037: NEG
67038: PUSH
67039: EMPTY
67040: LIST
67041: LIST
67042: PUSH
67043: LD_INT 5
67045: NEG
67046: PUSH
67047: LD_INT 4
67049: NEG
67050: PUSH
67051: EMPTY
67052: LIST
67053: LIST
67054: PUSH
67055: LD_INT 5
67057: NEG
67058: PUSH
67059: LD_INT 5
67061: NEG
67062: PUSH
67063: EMPTY
67064: LIST
67065: LIST
67066: PUSH
67067: LD_INT 3
67069: NEG
67070: PUSH
67071: LD_INT 5
67073: NEG
67074: PUSH
67075: EMPTY
67076: LIST
67077: LIST
67078: PUSH
67079: LD_INT 5
67081: NEG
67082: PUSH
67083: LD_INT 3
67085: NEG
67086: PUSH
67087: EMPTY
67088: LIST
67089: LIST
67090: PUSH
67091: LD_INT 0
67093: PUSH
67094: LD_INT 3
67096: NEG
67097: PUSH
67098: EMPTY
67099: LIST
67100: LIST
67101: PUSH
67102: LD_INT 0
67104: PUSH
67105: LD_INT 4
67107: NEG
67108: PUSH
67109: EMPTY
67110: LIST
67111: LIST
67112: PUSH
67113: LD_INT 1
67115: PUSH
67116: LD_INT 3
67118: NEG
67119: PUSH
67120: EMPTY
67121: LIST
67122: LIST
67123: PUSH
67124: LD_INT 1
67126: PUSH
67127: LD_INT 2
67129: NEG
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: PUSH
67135: LD_INT 0
67137: PUSH
67138: LD_INT 2
67140: NEG
67141: PUSH
67142: EMPTY
67143: LIST
67144: LIST
67145: PUSH
67146: LD_INT 1
67148: NEG
67149: PUSH
67150: LD_INT 3
67152: NEG
67153: PUSH
67154: EMPTY
67155: LIST
67156: LIST
67157: PUSH
67158: LD_INT 1
67160: NEG
67161: PUSH
67162: LD_INT 4
67164: NEG
67165: PUSH
67166: EMPTY
67167: LIST
67168: LIST
67169: PUSH
67170: LD_INT 2
67172: PUSH
67173: LD_INT 2
67175: NEG
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: PUSH
67181: LD_INT 2
67183: NEG
67184: PUSH
67185: LD_INT 4
67187: NEG
67188: PUSH
67189: EMPTY
67190: LIST
67191: LIST
67192: PUSH
67193: LD_INT 4
67195: PUSH
67196: LD_INT 0
67198: PUSH
67199: EMPTY
67200: LIST
67201: LIST
67202: PUSH
67203: LD_INT 4
67205: PUSH
67206: LD_INT 1
67208: NEG
67209: PUSH
67210: EMPTY
67211: LIST
67212: LIST
67213: PUSH
67214: LD_INT 5
67216: PUSH
67217: LD_INT 0
67219: PUSH
67220: EMPTY
67221: LIST
67222: LIST
67223: PUSH
67224: LD_INT 5
67226: PUSH
67227: LD_INT 1
67229: PUSH
67230: EMPTY
67231: LIST
67232: LIST
67233: PUSH
67234: LD_INT 4
67236: PUSH
67237: LD_INT 1
67239: PUSH
67240: EMPTY
67241: LIST
67242: LIST
67243: PUSH
67244: LD_INT 3
67246: PUSH
67247: LD_INT 0
67249: PUSH
67250: EMPTY
67251: LIST
67252: LIST
67253: PUSH
67254: LD_INT 3
67256: PUSH
67257: LD_INT 1
67259: NEG
67260: PUSH
67261: EMPTY
67262: LIST
67263: LIST
67264: PUSH
67265: LD_INT 3
67267: PUSH
67268: LD_INT 2
67270: NEG
67271: PUSH
67272: EMPTY
67273: LIST
67274: LIST
67275: PUSH
67276: LD_INT 5
67278: PUSH
67279: LD_INT 2
67281: PUSH
67282: EMPTY
67283: LIST
67284: LIST
67285: PUSH
67286: LD_INT 3
67288: PUSH
67289: LD_INT 3
67291: PUSH
67292: EMPTY
67293: LIST
67294: LIST
67295: PUSH
67296: LD_INT 3
67298: PUSH
67299: LD_INT 2
67301: PUSH
67302: EMPTY
67303: LIST
67304: LIST
67305: PUSH
67306: LD_INT 4
67308: PUSH
67309: LD_INT 3
67311: PUSH
67312: EMPTY
67313: LIST
67314: LIST
67315: PUSH
67316: LD_INT 4
67318: PUSH
67319: LD_INT 4
67321: PUSH
67322: EMPTY
67323: LIST
67324: LIST
67325: PUSH
67326: LD_INT 3
67328: PUSH
67329: LD_INT 4
67331: PUSH
67332: EMPTY
67333: LIST
67334: LIST
67335: PUSH
67336: LD_INT 2
67338: PUSH
67339: LD_INT 3
67341: PUSH
67342: EMPTY
67343: LIST
67344: LIST
67345: PUSH
67346: LD_INT 2
67348: PUSH
67349: LD_INT 2
67351: PUSH
67352: EMPTY
67353: LIST
67354: LIST
67355: PUSH
67356: LD_INT 4
67358: PUSH
67359: LD_INT 2
67361: PUSH
67362: EMPTY
67363: LIST
67364: LIST
67365: PUSH
67366: LD_INT 2
67368: PUSH
67369: LD_INT 4
67371: PUSH
67372: EMPTY
67373: LIST
67374: LIST
67375: PUSH
67376: LD_INT 0
67378: PUSH
67379: LD_INT 4
67381: PUSH
67382: EMPTY
67383: LIST
67384: LIST
67385: PUSH
67386: LD_INT 0
67388: PUSH
67389: LD_INT 3
67391: PUSH
67392: EMPTY
67393: LIST
67394: LIST
67395: PUSH
67396: LD_INT 1
67398: PUSH
67399: LD_INT 4
67401: PUSH
67402: EMPTY
67403: LIST
67404: LIST
67405: PUSH
67406: LD_INT 1
67408: PUSH
67409: LD_INT 5
67411: PUSH
67412: EMPTY
67413: LIST
67414: LIST
67415: PUSH
67416: LD_INT 0
67418: PUSH
67419: LD_INT 5
67421: PUSH
67422: EMPTY
67423: LIST
67424: LIST
67425: PUSH
67426: LD_INT 1
67428: NEG
67429: PUSH
67430: LD_INT 4
67432: PUSH
67433: EMPTY
67434: LIST
67435: LIST
67436: PUSH
67437: LD_INT 1
67439: NEG
67440: PUSH
67441: LD_INT 3
67443: PUSH
67444: EMPTY
67445: LIST
67446: LIST
67447: PUSH
67448: LD_INT 2
67450: PUSH
67451: LD_INT 5
67453: PUSH
67454: EMPTY
67455: LIST
67456: LIST
67457: PUSH
67458: LD_INT 2
67460: NEG
67461: PUSH
67462: LD_INT 3
67464: PUSH
67465: EMPTY
67466: LIST
67467: LIST
67468: PUSH
67469: EMPTY
67470: LIST
67471: LIST
67472: LIST
67473: LIST
67474: LIST
67475: LIST
67476: LIST
67477: LIST
67478: LIST
67479: LIST
67480: LIST
67481: LIST
67482: LIST
67483: LIST
67484: LIST
67485: LIST
67486: LIST
67487: LIST
67488: LIST
67489: LIST
67490: LIST
67491: LIST
67492: LIST
67493: LIST
67494: LIST
67495: LIST
67496: LIST
67497: LIST
67498: LIST
67499: LIST
67500: LIST
67501: LIST
67502: LIST
67503: LIST
67504: LIST
67505: LIST
67506: LIST
67507: LIST
67508: LIST
67509: LIST
67510: LIST
67511: LIST
67512: LIST
67513: LIST
67514: LIST
67515: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
67516: LD_ADDR_VAR 0 34
67520: PUSH
67521: LD_INT 0
67523: PUSH
67524: LD_INT 4
67526: NEG
67527: PUSH
67528: EMPTY
67529: LIST
67530: LIST
67531: PUSH
67532: LD_INT 0
67534: PUSH
67535: LD_INT 5
67537: NEG
67538: PUSH
67539: EMPTY
67540: LIST
67541: LIST
67542: PUSH
67543: LD_INT 1
67545: PUSH
67546: LD_INT 4
67548: NEG
67549: PUSH
67550: EMPTY
67551: LIST
67552: LIST
67553: PUSH
67554: LD_INT 1
67556: PUSH
67557: LD_INT 3
67559: NEG
67560: PUSH
67561: EMPTY
67562: LIST
67563: LIST
67564: PUSH
67565: LD_INT 0
67567: PUSH
67568: LD_INT 3
67570: NEG
67571: PUSH
67572: EMPTY
67573: LIST
67574: LIST
67575: PUSH
67576: LD_INT 1
67578: NEG
67579: PUSH
67580: LD_INT 4
67582: NEG
67583: PUSH
67584: EMPTY
67585: LIST
67586: LIST
67587: PUSH
67588: LD_INT 1
67590: NEG
67591: PUSH
67592: LD_INT 5
67594: NEG
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: PUSH
67600: LD_INT 2
67602: PUSH
67603: LD_INT 3
67605: NEG
67606: PUSH
67607: EMPTY
67608: LIST
67609: LIST
67610: PUSH
67611: LD_INT 2
67613: NEG
67614: PUSH
67615: LD_INT 5
67617: NEG
67618: PUSH
67619: EMPTY
67620: LIST
67621: LIST
67622: PUSH
67623: LD_INT 3
67625: PUSH
67626: LD_INT 0
67628: PUSH
67629: EMPTY
67630: LIST
67631: LIST
67632: PUSH
67633: LD_INT 3
67635: PUSH
67636: LD_INT 1
67638: NEG
67639: PUSH
67640: EMPTY
67641: LIST
67642: LIST
67643: PUSH
67644: LD_INT 4
67646: PUSH
67647: LD_INT 0
67649: PUSH
67650: EMPTY
67651: LIST
67652: LIST
67653: PUSH
67654: LD_INT 4
67656: PUSH
67657: LD_INT 1
67659: PUSH
67660: EMPTY
67661: LIST
67662: LIST
67663: PUSH
67664: LD_INT 3
67666: PUSH
67667: LD_INT 1
67669: PUSH
67670: EMPTY
67671: LIST
67672: LIST
67673: PUSH
67674: LD_INT 2
67676: PUSH
67677: LD_INT 0
67679: PUSH
67680: EMPTY
67681: LIST
67682: LIST
67683: PUSH
67684: LD_INT 2
67686: PUSH
67687: LD_INT 1
67689: NEG
67690: PUSH
67691: EMPTY
67692: LIST
67693: LIST
67694: PUSH
67695: LD_INT 2
67697: PUSH
67698: LD_INT 2
67700: NEG
67701: PUSH
67702: EMPTY
67703: LIST
67704: LIST
67705: PUSH
67706: LD_INT 4
67708: PUSH
67709: LD_INT 2
67711: PUSH
67712: EMPTY
67713: LIST
67714: LIST
67715: PUSH
67716: LD_INT 4
67718: PUSH
67719: LD_INT 4
67721: PUSH
67722: EMPTY
67723: LIST
67724: LIST
67725: PUSH
67726: LD_INT 4
67728: PUSH
67729: LD_INT 3
67731: PUSH
67732: EMPTY
67733: LIST
67734: LIST
67735: PUSH
67736: LD_INT 5
67738: PUSH
67739: LD_INT 4
67741: PUSH
67742: EMPTY
67743: LIST
67744: LIST
67745: PUSH
67746: LD_INT 5
67748: PUSH
67749: LD_INT 5
67751: PUSH
67752: EMPTY
67753: LIST
67754: LIST
67755: PUSH
67756: LD_INT 4
67758: PUSH
67759: LD_INT 5
67761: PUSH
67762: EMPTY
67763: LIST
67764: LIST
67765: PUSH
67766: LD_INT 3
67768: PUSH
67769: LD_INT 4
67771: PUSH
67772: EMPTY
67773: LIST
67774: LIST
67775: PUSH
67776: LD_INT 3
67778: PUSH
67779: LD_INT 3
67781: PUSH
67782: EMPTY
67783: LIST
67784: LIST
67785: PUSH
67786: LD_INT 5
67788: PUSH
67789: LD_INT 3
67791: PUSH
67792: EMPTY
67793: LIST
67794: LIST
67795: PUSH
67796: LD_INT 3
67798: PUSH
67799: LD_INT 5
67801: PUSH
67802: EMPTY
67803: LIST
67804: LIST
67805: PUSH
67806: LD_INT 0
67808: PUSH
67809: LD_INT 3
67811: PUSH
67812: EMPTY
67813: LIST
67814: LIST
67815: PUSH
67816: LD_INT 0
67818: PUSH
67819: LD_INT 2
67821: PUSH
67822: EMPTY
67823: LIST
67824: LIST
67825: PUSH
67826: LD_INT 1
67828: PUSH
67829: LD_INT 3
67831: PUSH
67832: EMPTY
67833: LIST
67834: LIST
67835: PUSH
67836: LD_INT 1
67838: PUSH
67839: LD_INT 4
67841: PUSH
67842: EMPTY
67843: LIST
67844: LIST
67845: PUSH
67846: LD_INT 0
67848: PUSH
67849: LD_INT 4
67851: PUSH
67852: EMPTY
67853: LIST
67854: LIST
67855: PUSH
67856: LD_INT 1
67858: NEG
67859: PUSH
67860: LD_INT 3
67862: PUSH
67863: EMPTY
67864: LIST
67865: LIST
67866: PUSH
67867: LD_INT 1
67869: NEG
67870: PUSH
67871: LD_INT 2
67873: PUSH
67874: EMPTY
67875: LIST
67876: LIST
67877: PUSH
67878: LD_INT 2
67880: PUSH
67881: LD_INT 4
67883: PUSH
67884: EMPTY
67885: LIST
67886: LIST
67887: PUSH
67888: LD_INT 2
67890: NEG
67891: PUSH
67892: LD_INT 2
67894: PUSH
67895: EMPTY
67896: LIST
67897: LIST
67898: PUSH
67899: LD_INT 4
67901: NEG
67902: PUSH
67903: LD_INT 0
67905: PUSH
67906: EMPTY
67907: LIST
67908: LIST
67909: PUSH
67910: LD_INT 4
67912: NEG
67913: PUSH
67914: LD_INT 1
67916: NEG
67917: PUSH
67918: EMPTY
67919: LIST
67920: LIST
67921: PUSH
67922: LD_INT 3
67924: NEG
67925: PUSH
67926: LD_INT 0
67928: PUSH
67929: EMPTY
67930: LIST
67931: LIST
67932: PUSH
67933: LD_INT 3
67935: NEG
67936: PUSH
67937: LD_INT 1
67939: PUSH
67940: EMPTY
67941: LIST
67942: LIST
67943: PUSH
67944: LD_INT 4
67946: NEG
67947: PUSH
67948: LD_INT 1
67950: PUSH
67951: EMPTY
67952: LIST
67953: LIST
67954: PUSH
67955: LD_INT 5
67957: NEG
67958: PUSH
67959: LD_INT 0
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: PUSH
67966: LD_INT 5
67968: NEG
67969: PUSH
67970: LD_INT 1
67972: NEG
67973: PUSH
67974: EMPTY
67975: LIST
67976: LIST
67977: PUSH
67978: LD_INT 5
67980: NEG
67981: PUSH
67982: LD_INT 2
67984: NEG
67985: PUSH
67986: EMPTY
67987: LIST
67988: LIST
67989: PUSH
67990: LD_INT 3
67992: NEG
67993: PUSH
67994: LD_INT 2
67996: PUSH
67997: EMPTY
67998: LIST
67999: LIST
68000: PUSH
68001: EMPTY
68002: LIST
68003: LIST
68004: LIST
68005: LIST
68006: LIST
68007: LIST
68008: LIST
68009: LIST
68010: LIST
68011: LIST
68012: LIST
68013: LIST
68014: LIST
68015: LIST
68016: LIST
68017: LIST
68018: LIST
68019: LIST
68020: LIST
68021: LIST
68022: LIST
68023: LIST
68024: LIST
68025: LIST
68026: LIST
68027: LIST
68028: LIST
68029: LIST
68030: LIST
68031: LIST
68032: LIST
68033: LIST
68034: LIST
68035: LIST
68036: LIST
68037: LIST
68038: LIST
68039: LIST
68040: LIST
68041: LIST
68042: LIST
68043: LIST
68044: LIST
68045: LIST
68046: LIST
68047: ST_TO_ADDR
// end ; end ;
68048: GO 68051
68050: POP
// case btype of b_depot , b_warehouse :
68051: LD_VAR 0 1
68055: PUSH
68056: LD_INT 0
68058: DOUBLE
68059: EQUAL
68060: IFTRUE 68070
68062: LD_INT 1
68064: DOUBLE
68065: EQUAL
68066: IFTRUE 68070
68068: GO 68271
68070: POP
// case nation of nation_american :
68071: LD_VAR 0 5
68075: PUSH
68076: LD_INT 1
68078: DOUBLE
68079: EQUAL
68080: IFTRUE 68084
68082: GO 68140
68084: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
68085: LD_ADDR_VAR 0 9
68089: PUSH
68090: LD_VAR 0 11
68094: PUSH
68095: LD_VAR 0 12
68099: PUSH
68100: LD_VAR 0 13
68104: PUSH
68105: LD_VAR 0 14
68109: PUSH
68110: LD_VAR 0 15
68114: PUSH
68115: LD_VAR 0 16
68119: PUSH
68120: EMPTY
68121: LIST
68122: LIST
68123: LIST
68124: LIST
68125: LIST
68126: LIST
68127: PUSH
68128: LD_VAR 0 4
68132: PUSH
68133: LD_INT 1
68135: PLUS
68136: ARRAY
68137: ST_TO_ADDR
68138: GO 68269
68140: LD_INT 2
68142: DOUBLE
68143: EQUAL
68144: IFTRUE 68148
68146: GO 68204
68148: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
68149: LD_ADDR_VAR 0 9
68153: PUSH
68154: LD_VAR 0 17
68158: PUSH
68159: LD_VAR 0 18
68163: PUSH
68164: LD_VAR 0 19
68168: PUSH
68169: LD_VAR 0 20
68173: PUSH
68174: LD_VAR 0 21
68178: PUSH
68179: LD_VAR 0 22
68183: PUSH
68184: EMPTY
68185: LIST
68186: LIST
68187: LIST
68188: LIST
68189: LIST
68190: LIST
68191: PUSH
68192: LD_VAR 0 4
68196: PUSH
68197: LD_INT 1
68199: PLUS
68200: ARRAY
68201: ST_TO_ADDR
68202: GO 68269
68204: LD_INT 3
68206: DOUBLE
68207: EQUAL
68208: IFTRUE 68212
68210: GO 68268
68212: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
68213: LD_ADDR_VAR 0 9
68217: PUSH
68218: LD_VAR 0 23
68222: PUSH
68223: LD_VAR 0 24
68227: PUSH
68228: LD_VAR 0 25
68232: PUSH
68233: LD_VAR 0 26
68237: PUSH
68238: LD_VAR 0 27
68242: PUSH
68243: LD_VAR 0 28
68247: PUSH
68248: EMPTY
68249: LIST
68250: LIST
68251: LIST
68252: LIST
68253: LIST
68254: LIST
68255: PUSH
68256: LD_VAR 0 4
68260: PUSH
68261: LD_INT 1
68263: PLUS
68264: ARRAY
68265: ST_TO_ADDR
68266: GO 68269
68268: POP
68269: GO 68824
68271: LD_INT 2
68273: DOUBLE
68274: EQUAL
68275: IFTRUE 68285
68277: LD_INT 3
68279: DOUBLE
68280: EQUAL
68281: IFTRUE 68285
68283: GO 68341
68285: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
68286: LD_ADDR_VAR 0 9
68290: PUSH
68291: LD_VAR 0 29
68295: PUSH
68296: LD_VAR 0 30
68300: PUSH
68301: LD_VAR 0 31
68305: PUSH
68306: LD_VAR 0 32
68310: PUSH
68311: LD_VAR 0 33
68315: PUSH
68316: LD_VAR 0 34
68320: PUSH
68321: EMPTY
68322: LIST
68323: LIST
68324: LIST
68325: LIST
68326: LIST
68327: LIST
68328: PUSH
68329: LD_VAR 0 4
68333: PUSH
68334: LD_INT 1
68336: PLUS
68337: ARRAY
68338: ST_TO_ADDR
68339: GO 68824
68341: LD_INT 16
68343: DOUBLE
68344: EQUAL
68345: IFTRUE 68403
68347: LD_INT 17
68349: DOUBLE
68350: EQUAL
68351: IFTRUE 68403
68353: LD_INT 18
68355: DOUBLE
68356: EQUAL
68357: IFTRUE 68403
68359: LD_INT 19
68361: DOUBLE
68362: EQUAL
68363: IFTRUE 68403
68365: LD_INT 22
68367: DOUBLE
68368: EQUAL
68369: IFTRUE 68403
68371: LD_INT 20
68373: DOUBLE
68374: EQUAL
68375: IFTRUE 68403
68377: LD_INT 21
68379: DOUBLE
68380: EQUAL
68381: IFTRUE 68403
68383: LD_INT 23
68385: DOUBLE
68386: EQUAL
68387: IFTRUE 68403
68389: LD_INT 24
68391: DOUBLE
68392: EQUAL
68393: IFTRUE 68403
68395: LD_INT 25
68397: DOUBLE
68398: EQUAL
68399: IFTRUE 68403
68401: GO 68459
68403: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
68404: LD_ADDR_VAR 0 9
68408: PUSH
68409: LD_VAR 0 35
68413: PUSH
68414: LD_VAR 0 36
68418: PUSH
68419: LD_VAR 0 37
68423: PUSH
68424: LD_VAR 0 38
68428: PUSH
68429: LD_VAR 0 39
68433: PUSH
68434: LD_VAR 0 40
68438: PUSH
68439: EMPTY
68440: LIST
68441: LIST
68442: LIST
68443: LIST
68444: LIST
68445: LIST
68446: PUSH
68447: LD_VAR 0 4
68451: PUSH
68452: LD_INT 1
68454: PLUS
68455: ARRAY
68456: ST_TO_ADDR
68457: GO 68824
68459: LD_INT 6
68461: DOUBLE
68462: EQUAL
68463: IFTRUE 68515
68465: LD_INT 7
68467: DOUBLE
68468: EQUAL
68469: IFTRUE 68515
68471: LD_INT 8
68473: DOUBLE
68474: EQUAL
68475: IFTRUE 68515
68477: LD_INT 13
68479: DOUBLE
68480: EQUAL
68481: IFTRUE 68515
68483: LD_INT 12
68485: DOUBLE
68486: EQUAL
68487: IFTRUE 68515
68489: LD_INT 15
68491: DOUBLE
68492: EQUAL
68493: IFTRUE 68515
68495: LD_INT 11
68497: DOUBLE
68498: EQUAL
68499: IFTRUE 68515
68501: LD_INT 14
68503: DOUBLE
68504: EQUAL
68505: IFTRUE 68515
68507: LD_INT 10
68509: DOUBLE
68510: EQUAL
68511: IFTRUE 68515
68513: GO 68571
68515: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
68516: LD_ADDR_VAR 0 9
68520: PUSH
68521: LD_VAR 0 41
68525: PUSH
68526: LD_VAR 0 42
68530: PUSH
68531: LD_VAR 0 43
68535: PUSH
68536: LD_VAR 0 44
68540: PUSH
68541: LD_VAR 0 45
68545: PUSH
68546: LD_VAR 0 46
68550: PUSH
68551: EMPTY
68552: LIST
68553: LIST
68554: LIST
68555: LIST
68556: LIST
68557: LIST
68558: PUSH
68559: LD_VAR 0 4
68563: PUSH
68564: LD_INT 1
68566: PLUS
68567: ARRAY
68568: ST_TO_ADDR
68569: GO 68824
68571: LD_INT 36
68573: DOUBLE
68574: EQUAL
68575: IFTRUE 68579
68577: GO 68635
68579: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
68580: LD_ADDR_VAR 0 9
68584: PUSH
68585: LD_VAR 0 47
68589: PUSH
68590: LD_VAR 0 48
68594: PUSH
68595: LD_VAR 0 49
68599: PUSH
68600: LD_VAR 0 50
68604: PUSH
68605: LD_VAR 0 51
68609: PUSH
68610: LD_VAR 0 52
68614: PUSH
68615: EMPTY
68616: LIST
68617: LIST
68618: LIST
68619: LIST
68620: LIST
68621: LIST
68622: PUSH
68623: LD_VAR 0 4
68627: PUSH
68628: LD_INT 1
68630: PLUS
68631: ARRAY
68632: ST_TO_ADDR
68633: GO 68824
68635: LD_INT 4
68637: DOUBLE
68638: EQUAL
68639: IFTRUE 68661
68641: LD_INT 5
68643: DOUBLE
68644: EQUAL
68645: IFTRUE 68661
68647: LD_INT 34
68649: DOUBLE
68650: EQUAL
68651: IFTRUE 68661
68653: LD_INT 37
68655: DOUBLE
68656: EQUAL
68657: IFTRUE 68661
68659: GO 68717
68661: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
68662: LD_ADDR_VAR 0 9
68666: PUSH
68667: LD_VAR 0 53
68671: PUSH
68672: LD_VAR 0 54
68676: PUSH
68677: LD_VAR 0 55
68681: PUSH
68682: LD_VAR 0 56
68686: PUSH
68687: LD_VAR 0 57
68691: PUSH
68692: LD_VAR 0 58
68696: PUSH
68697: EMPTY
68698: LIST
68699: LIST
68700: LIST
68701: LIST
68702: LIST
68703: LIST
68704: PUSH
68705: LD_VAR 0 4
68709: PUSH
68710: LD_INT 1
68712: PLUS
68713: ARRAY
68714: ST_TO_ADDR
68715: GO 68824
68717: LD_INT 31
68719: DOUBLE
68720: EQUAL
68721: IFTRUE 68767
68723: LD_INT 32
68725: DOUBLE
68726: EQUAL
68727: IFTRUE 68767
68729: LD_INT 33
68731: DOUBLE
68732: EQUAL
68733: IFTRUE 68767
68735: LD_INT 27
68737: DOUBLE
68738: EQUAL
68739: IFTRUE 68767
68741: LD_INT 26
68743: DOUBLE
68744: EQUAL
68745: IFTRUE 68767
68747: LD_INT 28
68749: DOUBLE
68750: EQUAL
68751: IFTRUE 68767
68753: LD_INT 29
68755: DOUBLE
68756: EQUAL
68757: IFTRUE 68767
68759: LD_INT 30
68761: DOUBLE
68762: EQUAL
68763: IFTRUE 68767
68765: GO 68823
68767: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
68768: LD_ADDR_VAR 0 9
68772: PUSH
68773: LD_VAR 0 59
68777: PUSH
68778: LD_VAR 0 60
68782: PUSH
68783: LD_VAR 0 61
68787: PUSH
68788: LD_VAR 0 62
68792: PUSH
68793: LD_VAR 0 63
68797: PUSH
68798: LD_VAR 0 64
68802: PUSH
68803: EMPTY
68804: LIST
68805: LIST
68806: LIST
68807: LIST
68808: LIST
68809: LIST
68810: PUSH
68811: LD_VAR 0 4
68815: PUSH
68816: LD_INT 1
68818: PLUS
68819: ARRAY
68820: ST_TO_ADDR
68821: GO 68824
68823: POP
// temp_list2 = [ ] ;
68824: LD_ADDR_VAR 0 10
68828: PUSH
68829: EMPTY
68830: ST_TO_ADDR
// for i in temp_list do
68831: LD_ADDR_VAR 0 8
68835: PUSH
68836: LD_VAR 0 9
68840: PUSH
68841: FOR_IN
68842: IFFALSE 68894
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
68844: LD_ADDR_VAR 0 10
68848: PUSH
68849: LD_VAR 0 10
68853: PUSH
68854: LD_VAR 0 8
68858: PUSH
68859: LD_INT 1
68861: ARRAY
68862: PUSH
68863: LD_VAR 0 2
68867: PLUS
68868: PUSH
68869: LD_VAR 0 8
68873: PUSH
68874: LD_INT 2
68876: ARRAY
68877: PUSH
68878: LD_VAR 0 3
68882: PLUS
68883: PUSH
68884: EMPTY
68885: LIST
68886: LIST
68887: PUSH
68888: EMPTY
68889: LIST
68890: ADD
68891: ST_TO_ADDR
68892: GO 68841
68894: POP
68895: POP
// result = temp_list2 ;
68896: LD_ADDR_VAR 0 7
68900: PUSH
68901: LD_VAR 0 10
68905: ST_TO_ADDR
// end ;
68906: LD_VAR 0 7
68910: RET
// export function EnemyInRange ( unit , dist ) ; begin
68911: LD_INT 0
68913: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
68914: LD_ADDR_VAR 0 3
68918: PUSH
68919: LD_VAR 0 1
68923: PPUSH
68924: CALL_OW 255
68928: PPUSH
68929: LD_VAR 0 1
68933: PPUSH
68934: CALL_OW 250
68938: PPUSH
68939: LD_VAR 0 1
68943: PPUSH
68944: CALL_OW 251
68948: PPUSH
68949: LD_VAR 0 2
68953: PPUSH
68954: CALL 42284 0 4
68958: PUSH
68959: LD_INT 4
68961: ARRAY
68962: ST_TO_ADDR
// end ;
68963: LD_VAR 0 3
68967: RET
// export function PlayerSeeMe ( unit ) ; begin
68968: LD_INT 0
68970: PPUSH
// result := See ( your_side , unit ) ;
68971: LD_ADDR_VAR 0 2
68975: PUSH
68976: LD_OWVAR 2
68980: PPUSH
68981: LD_VAR 0 1
68985: PPUSH
68986: CALL_OW 292
68990: ST_TO_ADDR
// end ;
68991: LD_VAR 0 2
68995: RET
// export function ReverseDir ( unit ) ; begin
68996: LD_INT 0
68998: PPUSH
// if not unit then
68999: LD_VAR 0 1
69003: NOT
69004: IFFALSE 69008
// exit ;
69006: GO 69031
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
69008: LD_ADDR_VAR 0 2
69012: PUSH
69013: LD_VAR 0 1
69017: PPUSH
69018: CALL_OW 254
69022: PUSH
69023: LD_INT 3
69025: PLUS
69026: PUSH
69027: LD_INT 6
69029: MOD
69030: ST_TO_ADDR
// end ;
69031: LD_VAR 0 2
69035: RET
// export function ReverseArray ( array ) ; var i ; begin
69036: LD_INT 0
69038: PPUSH
69039: PPUSH
// if not array then
69040: LD_VAR 0 1
69044: NOT
69045: IFFALSE 69049
// exit ;
69047: GO 69104
// result := [ ] ;
69049: LD_ADDR_VAR 0 2
69053: PUSH
69054: EMPTY
69055: ST_TO_ADDR
// for i := array downto 1 do
69056: LD_ADDR_VAR 0 3
69060: PUSH
69061: DOUBLE
69062: LD_VAR 0 1
69066: INC
69067: ST_TO_ADDR
69068: LD_INT 1
69070: PUSH
69071: FOR_DOWNTO
69072: IFFALSE 69102
// result := Join ( result , array [ i ] ) ;
69074: LD_ADDR_VAR 0 2
69078: PUSH
69079: LD_VAR 0 2
69083: PPUSH
69084: LD_VAR 0 1
69088: PUSH
69089: LD_VAR 0 3
69093: ARRAY
69094: PPUSH
69095: CALL 73760 0 2
69099: ST_TO_ADDR
69100: GO 69071
69102: POP
69103: POP
// end ;
69104: LD_VAR 0 2
69108: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
69109: LD_INT 0
69111: PPUSH
69112: PPUSH
69113: PPUSH
69114: PPUSH
69115: PPUSH
69116: PPUSH
// if not unit or not hexes then
69117: LD_VAR 0 1
69121: NOT
69122: PUSH
69123: LD_VAR 0 2
69127: NOT
69128: OR
69129: IFFALSE 69133
// exit ;
69131: GO 69256
// dist := 9999 ;
69133: LD_ADDR_VAR 0 5
69137: PUSH
69138: LD_INT 9999
69140: ST_TO_ADDR
// for i = 1 to hexes do
69141: LD_ADDR_VAR 0 4
69145: PUSH
69146: DOUBLE
69147: LD_INT 1
69149: DEC
69150: ST_TO_ADDR
69151: LD_VAR 0 2
69155: PUSH
69156: FOR_TO
69157: IFFALSE 69244
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
69159: LD_ADDR_VAR 0 6
69163: PUSH
69164: LD_VAR 0 1
69168: PPUSH
69169: LD_VAR 0 2
69173: PUSH
69174: LD_VAR 0 4
69178: ARRAY
69179: PUSH
69180: LD_INT 1
69182: ARRAY
69183: PPUSH
69184: LD_VAR 0 2
69188: PUSH
69189: LD_VAR 0 4
69193: ARRAY
69194: PUSH
69195: LD_INT 2
69197: ARRAY
69198: PPUSH
69199: CALL_OW 297
69203: ST_TO_ADDR
// if tdist < dist then
69204: LD_VAR 0 6
69208: PUSH
69209: LD_VAR 0 5
69213: LESS
69214: IFFALSE 69242
// begin hex := hexes [ i ] ;
69216: LD_ADDR_VAR 0 8
69220: PUSH
69221: LD_VAR 0 2
69225: PUSH
69226: LD_VAR 0 4
69230: ARRAY
69231: ST_TO_ADDR
// dist := tdist ;
69232: LD_ADDR_VAR 0 5
69236: PUSH
69237: LD_VAR 0 6
69241: ST_TO_ADDR
// end ; end ;
69242: GO 69156
69244: POP
69245: POP
// result := hex ;
69246: LD_ADDR_VAR 0 3
69250: PUSH
69251: LD_VAR 0 8
69255: ST_TO_ADDR
// end ;
69256: LD_VAR 0 3
69260: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
69261: LD_INT 0
69263: PPUSH
69264: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
69265: LD_VAR 0 1
69269: NOT
69270: PUSH
69271: LD_VAR 0 1
69275: PUSH
69276: LD_INT 21
69278: PUSH
69279: LD_INT 2
69281: PUSH
69282: EMPTY
69283: LIST
69284: LIST
69285: PUSH
69286: LD_INT 23
69288: PUSH
69289: LD_INT 2
69291: PUSH
69292: EMPTY
69293: LIST
69294: LIST
69295: PUSH
69296: EMPTY
69297: LIST
69298: LIST
69299: PPUSH
69300: CALL_OW 69
69304: IN
69305: NOT
69306: OR
69307: IFFALSE 69311
// exit ;
69309: GO 69358
// for i = 1 to 3 do
69311: LD_ADDR_VAR 0 3
69315: PUSH
69316: DOUBLE
69317: LD_INT 1
69319: DEC
69320: ST_TO_ADDR
69321: LD_INT 3
69323: PUSH
69324: FOR_TO
69325: IFFALSE 69356
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
69327: LD_VAR 0 1
69331: PPUSH
69332: CALL_OW 250
69336: PPUSH
69337: LD_VAR 0 1
69341: PPUSH
69342: CALL_OW 251
69346: PPUSH
69347: LD_INT 1
69349: PPUSH
69350: CALL_OW 453
69354: GO 69324
69356: POP
69357: POP
// end ;
69358: LD_VAR 0 2
69362: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
69363: LD_INT 0
69365: PPUSH
69366: PPUSH
69367: PPUSH
69368: PPUSH
69369: PPUSH
69370: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
69371: LD_VAR 0 1
69375: NOT
69376: PUSH
69377: LD_VAR 0 2
69381: NOT
69382: OR
69383: PUSH
69384: LD_VAR 0 1
69388: PPUSH
69389: CALL_OW 314
69393: OR
69394: IFFALSE 69398
// exit ;
69396: GO 69865
// if GetLives ( i ) < 250 then
69398: LD_VAR 0 4
69402: PPUSH
69403: CALL_OW 256
69407: PUSH
69408: LD_INT 250
69410: LESS
69411: IFFALSE 69424
// begin ComAutodestruct ( i ) ;
69413: LD_VAR 0 4
69417: PPUSH
69418: CALL 69261 0 1
// exit ;
69422: GO 69865
// end ; x := GetX ( enemy_unit ) ;
69424: LD_ADDR_VAR 0 7
69428: PUSH
69429: LD_VAR 0 2
69433: PPUSH
69434: CALL_OW 250
69438: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
69439: LD_ADDR_VAR 0 8
69443: PUSH
69444: LD_VAR 0 2
69448: PPUSH
69449: CALL_OW 251
69453: ST_TO_ADDR
// if not x or not y then
69454: LD_VAR 0 7
69458: NOT
69459: PUSH
69460: LD_VAR 0 8
69464: NOT
69465: OR
69466: IFFALSE 69470
// exit ;
69468: GO 69865
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
69470: LD_ADDR_VAR 0 6
69474: PUSH
69475: LD_VAR 0 7
69479: PPUSH
69480: LD_INT 0
69482: PPUSH
69483: LD_INT 4
69485: PPUSH
69486: CALL_OW 272
69490: PUSH
69491: LD_VAR 0 8
69495: PPUSH
69496: LD_INT 0
69498: PPUSH
69499: LD_INT 4
69501: PPUSH
69502: CALL_OW 273
69506: PUSH
69507: EMPTY
69508: LIST
69509: LIST
69510: PUSH
69511: LD_VAR 0 7
69515: PPUSH
69516: LD_INT 1
69518: PPUSH
69519: LD_INT 4
69521: PPUSH
69522: CALL_OW 272
69526: PUSH
69527: LD_VAR 0 8
69531: PPUSH
69532: LD_INT 1
69534: PPUSH
69535: LD_INT 4
69537: PPUSH
69538: CALL_OW 273
69542: PUSH
69543: EMPTY
69544: LIST
69545: LIST
69546: PUSH
69547: LD_VAR 0 7
69551: PPUSH
69552: LD_INT 2
69554: PPUSH
69555: LD_INT 4
69557: PPUSH
69558: CALL_OW 272
69562: PUSH
69563: LD_VAR 0 8
69567: PPUSH
69568: LD_INT 2
69570: PPUSH
69571: LD_INT 4
69573: PPUSH
69574: CALL_OW 273
69578: PUSH
69579: EMPTY
69580: LIST
69581: LIST
69582: PUSH
69583: LD_VAR 0 7
69587: PPUSH
69588: LD_INT 3
69590: PPUSH
69591: LD_INT 4
69593: PPUSH
69594: CALL_OW 272
69598: PUSH
69599: LD_VAR 0 8
69603: PPUSH
69604: LD_INT 3
69606: PPUSH
69607: LD_INT 4
69609: PPUSH
69610: CALL_OW 273
69614: PUSH
69615: EMPTY
69616: LIST
69617: LIST
69618: PUSH
69619: LD_VAR 0 7
69623: PPUSH
69624: LD_INT 4
69626: PPUSH
69627: LD_INT 4
69629: PPUSH
69630: CALL_OW 272
69634: PUSH
69635: LD_VAR 0 8
69639: PPUSH
69640: LD_INT 4
69642: PPUSH
69643: LD_INT 4
69645: PPUSH
69646: CALL_OW 273
69650: PUSH
69651: EMPTY
69652: LIST
69653: LIST
69654: PUSH
69655: LD_VAR 0 7
69659: PPUSH
69660: LD_INT 5
69662: PPUSH
69663: LD_INT 4
69665: PPUSH
69666: CALL_OW 272
69670: PUSH
69671: LD_VAR 0 8
69675: PPUSH
69676: LD_INT 5
69678: PPUSH
69679: LD_INT 4
69681: PPUSH
69682: CALL_OW 273
69686: PUSH
69687: EMPTY
69688: LIST
69689: LIST
69690: PUSH
69691: EMPTY
69692: LIST
69693: LIST
69694: LIST
69695: LIST
69696: LIST
69697: LIST
69698: ST_TO_ADDR
// for i = tmp downto 1 do
69699: LD_ADDR_VAR 0 4
69703: PUSH
69704: DOUBLE
69705: LD_VAR 0 6
69709: INC
69710: ST_TO_ADDR
69711: LD_INT 1
69713: PUSH
69714: FOR_DOWNTO
69715: IFFALSE 69816
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
69717: LD_VAR 0 6
69721: PUSH
69722: LD_VAR 0 4
69726: ARRAY
69727: PUSH
69728: LD_INT 1
69730: ARRAY
69731: PPUSH
69732: LD_VAR 0 6
69736: PUSH
69737: LD_VAR 0 4
69741: ARRAY
69742: PUSH
69743: LD_INT 2
69745: ARRAY
69746: PPUSH
69747: CALL_OW 488
69751: NOT
69752: PUSH
69753: LD_VAR 0 6
69757: PUSH
69758: LD_VAR 0 4
69762: ARRAY
69763: PUSH
69764: LD_INT 1
69766: ARRAY
69767: PPUSH
69768: LD_VAR 0 6
69772: PUSH
69773: LD_VAR 0 4
69777: ARRAY
69778: PUSH
69779: LD_INT 2
69781: ARRAY
69782: PPUSH
69783: CALL_OW 428
69787: PUSH
69788: LD_INT 0
69790: NONEQUAL
69791: OR
69792: IFFALSE 69814
// tmp := Delete ( tmp , i ) ;
69794: LD_ADDR_VAR 0 6
69798: PUSH
69799: LD_VAR 0 6
69803: PPUSH
69804: LD_VAR 0 4
69808: PPUSH
69809: CALL_OW 3
69813: ST_TO_ADDR
69814: GO 69714
69816: POP
69817: POP
// j := GetClosestHex ( unit , tmp ) ;
69818: LD_ADDR_VAR 0 5
69822: PUSH
69823: LD_VAR 0 1
69827: PPUSH
69828: LD_VAR 0 6
69832: PPUSH
69833: CALL 69109 0 2
69837: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
69838: LD_VAR 0 1
69842: PPUSH
69843: LD_VAR 0 5
69847: PUSH
69848: LD_INT 1
69850: ARRAY
69851: PPUSH
69852: LD_VAR 0 5
69856: PUSH
69857: LD_INT 2
69859: ARRAY
69860: PPUSH
69861: CALL_OW 111
// end ;
69865: LD_VAR 0 3
69869: RET
// export function PrepareApemanSoldier ( ) ; begin
69870: LD_INT 0
69872: PPUSH
// uc_nation := 0 ;
69873: LD_ADDR_OWVAR 21
69877: PUSH
69878: LD_INT 0
69880: ST_TO_ADDR
// hc_sex := sex_male ;
69881: LD_ADDR_OWVAR 27
69885: PUSH
69886: LD_INT 1
69888: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
69889: LD_ADDR_OWVAR 28
69893: PUSH
69894: LD_INT 15
69896: ST_TO_ADDR
// hc_gallery :=  ;
69897: LD_ADDR_OWVAR 33
69901: PUSH
69902: LD_STRING 
69904: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
69905: LD_ADDR_OWVAR 31
69909: PUSH
69910: LD_INT 0
69912: PPUSH
69913: LD_INT 3
69915: PPUSH
69916: CALL_OW 12
69920: PUSH
69921: LD_INT 0
69923: PPUSH
69924: LD_INT 3
69926: PPUSH
69927: CALL_OW 12
69931: PUSH
69932: LD_INT 0
69934: PUSH
69935: LD_INT 0
69937: PUSH
69938: EMPTY
69939: LIST
69940: LIST
69941: LIST
69942: LIST
69943: ST_TO_ADDR
// end ;
69944: LD_VAR 0 1
69948: RET
// export function PrepareApemanEngineer ( ) ; begin
69949: LD_INT 0
69951: PPUSH
// uc_nation := 0 ;
69952: LD_ADDR_OWVAR 21
69956: PUSH
69957: LD_INT 0
69959: ST_TO_ADDR
// hc_sex := sex_male ;
69960: LD_ADDR_OWVAR 27
69964: PUSH
69965: LD_INT 1
69967: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
69968: LD_ADDR_OWVAR 28
69972: PUSH
69973: LD_INT 16
69975: ST_TO_ADDR
// hc_gallery :=  ;
69976: LD_ADDR_OWVAR 33
69980: PUSH
69981: LD_STRING 
69983: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
69984: LD_ADDR_OWVAR 31
69988: PUSH
69989: LD_INT 0
69991: PPUSH
69992: LD_INT 3
69994: PPUSH
69995: CALL_OW 12
69999: PUSH
70000: LD_INT 0
70002: PPUSH
70003: LD_INT 3
70005: PPUSH
70006: CALL_OW 12
70010: PUSH
70011: LD_INT 0
70013: PUSH
70014: LD_INT 0
70016: PUSH
70017: EMPTY
70018: LIST
70019: LIST
70020: LIST
70021: LIST
70022: ST_TO_ADDR
// end ;
70023: LD_VAR 0 1
70027: RET
// export function PrepareApeman ( agressivity ) ; begin
70028: LD_INT 0
70030: PPUSH
// uc_side := 0 ;
70031: LD_ADDR_OWVAR 20
70035: PUSH
70036: LD_INT 0
70038: ST_TO_ADDR
// uc_nation := 0 ;
70039: LD_ADDR_OWVAR 21
70043: PUSH
70044: LD_INT 0
70046: ST_TO_ADDR
// hc_sex := sex_male ;
70047: LD_ADDR_OWVAR 27
70051: PUSH
70052: LD_INT 1
70054: ST_TO_ADDR
// hc_class := class_apeman ;
70055: LD_ADDR_OWVAR 28
70059: PUSH
70060: LD_INT 12
70062: ST_TO_ADDR
// hc_gallery :=  ;
70063: LD_ADDR_OWVAR 33
70067: PUSH
70068: LD_STRING 
70070: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
70071: LD_ADDR_OWVAR 35
70075: PUSH
70076: LD_VAR 0 1
70080: NEG
70081: PPUSH
70082: LD_VAR 0 1
70086: PPUSH
70087: CALL_OW 12
70091: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70092: LD_ADDR_OWVAR 31
70096: PUSH
70097: LD_INT 0
70099: PPUSH
70100: LD_INT 3
70102: PPUSH
70103: CALL_OW 12
70107: PUSH
70108: LD_INT 0
70110: PPUSH
70111: LD_INT 3
70113: PPUSH
70114: CALL_OW 12
70118: PUSH
70119: LD_INT 0
70121: PUSH
70122: LD_INT 0
70124: PUSH
70125: EMPTY
70126: LIST
70127: LIST
70128: LIST
70129: LIST
70130: ST_TO_ADDR
// end ;
70131: LD_VAR 0 2
70135: RET
// export function PrepareTiger ( agressivity ) ; begin
70136: LD_INT 0
70138: PPUSH
// uc_side := 0 ;
70139: LD_ADDR_OWVAR 20
70143: PUSH
70144: LD_INT 0
70146: ST_TO_ADDR
// uc_nation := 0 ;
70147: LD_ADDR_OWVAR 21
70151: PUSH
70152: LD_INT 0
70154: ST_TO_ADDR
// hc_class := class_tiger ;
70155: LD_ADDR_OWVAR 28
70159: PUSH
70160: LD_INT 14
70162: ST_TO_ADDR
// hc_gallery :=  ;
70163: LD_ADDR_OWVAR 33
70167: PUSH
70168: LD_STRING 
70170: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
70171: LD_ADDR_OWVAR 35
70175: PUSH
70176: LD_VAR 0 1
70180: NEG
70181: PPUSH
70182: LD_VAR 0 1
70186: PPUSH
70187: CALL_OW 12
70191: ST_TO_ADDR
// end ;
70192: LD_VAR 0 2
70196: RET
// export function PrepareEnchidna ( ) ; begin
70197: LD_INT 0
70199: PPUSH
// uc_side := 0 ;
70200: LD_ADDR_OWVAR 20
70204: PUSH
70205: LD_INT 0
70207: ST_TO_ADDR
// uc_nation := 0 ;
70208: LD_ADDR_OWVAR 21
70212: PUSH
70213: LD_INT 0
70215: ST_TO_ADDR
// hc_class := class_baggie ;
70216: LD_ADDR_OWVAR 28
70220: PUSH
70221: LD_INT 13
70223: ST_TO_ADDR
// hc_gallery :=  ;
70224: LD_ADDR_OWVAR 33
70228: PUSH
70229: LD_STRING 
70231: ST_TO_ADDR
// end ;
70232: LD_VAR 0 1
70236: RET
// export function PrepareFrog ( ) ; begin
70237: LD_INT 0
70239: PPUSH
// uc_side := 0 ;
70240: LD_ADDR_OWVAR 20
70244: PUSH
70245: LD_INT 0
70247: ST_TO_ADDR
// uc_nation := 0 ;
70248: LD_ADDR_OWVAR 21
70252: PUSH
70253: LD_INT 0
70255: ST_TO_ADDR
// hc_class := class_frog ;
70256: LD_ADDR_OWVAR 28
70260: PUSH
70261: LD_INT 19
70263: ST_TO_ADDR
// hc_gallery :=  ;
70264: LD_ADDR_OWVAR 33
70268: PUSH
70269: LD_STRING 
70271: ST_TO_ADDR
// end ;
70272: LD_VAR 0 1
70276: RET
// export function PrepareFish ( ) ; begin
70277: LD_INT 0
70279: PPUSH
// uc_side := 0 ;
70280: LD_ADDR_OWVAR 20
70284: PUSH
70285: LD_INT 0
70287: ST_TO_ADDR
// uc_nation := 0 ;
70288: LD_ADDR_OWVAR 21
70292: PUSH
70293: LD_INT 0
70295: ST_TO_ADDR
// hc_class := class_fish ;
70296: LD_ADDR_OWVAR 28
70300: PUSH
70301: LD_INT 20
70303: ST_TO_ADDR
// hc_gallery :=  ;
70304: LD_ADDR_OWVAR 33
70308: PUSH
70309: LD_STRING 
70311: ST_TO_ADDR
// end ;
70312: LD_VAR 0 1
70316: RET
// export function PrepareBird ( ) ; begin
70317: LD_INT 0
70319: PPUSH
// uc_side := 0 ;
70320: LD_ADDR_OWVAR 20
70324: PUSH
70325: LD_INT 0
70327: ST_TO_ADDR
// uc_nation := 0 ;
70328: LD_ADDR_OWVAR 21
70332: PUSH
70333: LD_INT 0
70335: ST_TO_ADDR
// hc_class := class_phororhacos ;
70336: LD_ADDR_OWVAR 28
70340: PUSH
70341: LD_INT 18
70343: ST_TO_ADDR
// hc_gallery :=  ;
70344: LD_ADDR_OWVAR 33
70348: PUSH
70349: LD_STRING 
70351: ST_TO_ADDR
// end ;
70352: LD_VAR 0 1
70356: RET
// export function PrepareHorse ( ) ; begin
70357: LD_INT 0
70359: PPUSH
// uc_side := 0 ;
70360: LD_ADDR_OWVAR 20
70364: PUSH
70365: LD_INT 0
70367: ST_TO_ADDR
// uc_nation := 0 ;
70368: LD_ADDR_OWVAR 21
70372: PUSH
70373: LD_INT 0
70375: ST_TO_ADDR
// hc_class := class_horse ;
70376: LD_ADDR_OWVAR 28
70380: PUSH
70381: LD_INT 21
70383: ST_TO_ADDR
// hc_gallery :=  ;
70384: LD_ADDR_OWVAR 33
70388: PUSH
70389: LD_STRING 
70391: ST_TO_ADDR
// end ;
70392: LD_VAR 0 1
70396: RET
// export function PrepareMastodont ( ) ; begin
70397: LD_INT 0
70399: PPUSH
// uc_side := 0 ;
70400: LD_ADDR_OWVAR 20
70404: PUSH
70405: LD_INT 0
70407: ST_TO_ADDR
// uc_nation := 0 ;
70408: LD_ADDR_OWVAR 21
70412: PUSH
70413: LD_INT 0
70415: ST_TO_ADDR
// vc_chassis := class_mastodont ;
70416: LD_ADDR_OWVAR 37
70420: PUSH
70421: LD_INT 31
70423: ST_TO_ADDR
// vc_control := control_rider ;
70424: LD_ADDR_OWVAR 38
70428: PUSH
70429: LD_INT 4
70431: ST_TO_ADDR
// end ;
70432: LD_VAR 0 1
70436: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
70437: LD_INT 0
70439: PPUSH
70440: PPUSH
70441: PPUSH
// uc_side = 0 ;
70442: LD_ADDR_OWVAR 20
70446: PUSH
70447: LD_INT 0
70449: ST_TO_ADDR
// uc_nation = 0 ;
70450: LD_ADDR_OWVAR 21
70454: PUSH
70455: LD_INT 0
70457: ST_TO_ADDR
// InitHc_All ( ) ;
70458: CALL_OW 584
// InitVc ;
70462: CALL_OW 20
// if mastodonts then
70466: LD_VAR 0 6
70470: IFFALSE 70537
// for i = 1 to mastodonts do
70472: LD_ADDR_VAR 0 11
70476: PUSH
70477: DOUBLE
70478: LD_INT 1
70480: DEC
70481: ST_TO_ADDR
70482: LD_VAR 0 6
70486: PUSH
70487: FOR_TO
70488: IFFALSE 70535
// begin vc_chassis := 31 ;
70490: LD_ADDR_OWVAR 37
70494: PUSH
70495: LD_INT 31
70497: ST_TO_ADDR
// vc_control := control_rider ;
70498: LD_ADDR_OWVAR 38
70502: PUSH
70503: LD_INT 4
70505: ST_TO_ADDR
// animal := CreateVehicle ;
70506: LD_ADDR_VAR 0 12
70510: PUSH
70511: CALL_OW 45
70515: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70516: LD_VAR 0 12
70520: PPUSH
70521: LD_VAR 0 8
70525: PPUSH
70526: LD_INT 0
70528: PPUSH
70529: CALL 72665 0 3
// end ;
70533: GO 70487
70535: POP
70536: POP
// if horses then
70537: LD_VAR 0 5
70541: IFFALSE 70608
// for i = 1 to horses do
70543: LD_ADDR_VAR 0 11
70547: PUSH
70548: DOUBLE
70549: LD_INT 1
70551: DEC
70552: ST_TO_ADDR
70553: LD_VAR 0 5
70557: PUSH
70558: FOR_TO
70559: IFFALSE 70606
// begin hc_class := 21 ;
70561: LD_ADDR_OWVAR 28
70565: PUSH
70566: LD_INT 21
70568: ST_TO_ADDR
// hc_gallery :=  ;
70569: LD_ADDR_OWVAR 33
70573: PUSH
70574: LD_STRING 
70576: ST_TO_ADDR
// animal := CreateHuman ;
70577: LD_ADDR_VAR 0 12
70581: PUSH
70582: CALL_OW 44
70586: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70587: LD_VAR 0 12
70591: PPUSH
70592: LD_VAR 0 8
70596: PPUSH
70597: LD_INT 0
70599: PPUSH
70600: CALL 72665 0 3
// end ;
70604: GO 70558
70606: POP
70607: POP
// if birds then
70608: LD_VAR 0 1
70612: IFFALSE 70679
// for i = 1 to birds do
70614: LD_ADDR_VAR 0 11
70618: PUSH
70619: DOUBLE
70620: LD_INT 1
70622: DEC
70623: ST_TO_ADDR
70624: LD_VAR 0 1
70628: PUSH
70629: FOR_TO
70630: IFFALSE 70677
// begin hc_class := 18 ;
70632: LD_ADDR_OWVAR 28
70636: PUSH
70637: LD_INT 18
70639: ST_TO_ADDR
// hc_gallery =  ;
70640: LD_ADDR_OWVAR 33
70644: PUSH
70645: LD_STRING 
70647: ST_TO_ADDR
// animal := CreateHuman ;
70648: LD_ADDR_VAR 0 12
70652: PUSH
70653: CALL_OW 44
70657: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70658: LD_VAR 0 12
70662: PPUSH
70663: LD_VAR 0 8
70667: PPUSH
70668: LD_INT 0
70670: PPUSH
70671: CALL 72665 0 3
// end ;
70675: GO 70629
70677: POP
70678: POP
// if tigers then
70679: LD_VAR 0 2
70683: IFFALSE 70767
// for i = 1 to tigers do
70685: LD_ADDR_VAR 0 11
70689: PUSH
70690: DOUBLE
70691: LD_INT 1
70693: DEC
70694: ST_TO_ADDR
70695: LD_VAR 0 2
70699: PUSH
70700: FOR_TO
70701: IFFALSE 70765
// begin hc_class = class_tiger ;
70703: LD_ADDR_OWVAR 28
70707: PUSH
70708: LD_INT 14
70710: ST_TO_ADDR
// hc_gallery =  ;
70711: LD_ADDR_OWVAR 33
70715: PUSH
70716: LD_STRING 
70718: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
70719: LD_ADDR_OWVAR 35
70723: PUSH
70724: LD_INT 7
70726: NEG
70727: PPUSH
70728: LD_INT 7
70730: PPUSH
70731: CALL_OW 12
70735: ST_TO_ADDR
// animal := CreateHuman ;
70736: LD_ADDR_VAR 0 12
70740: PUSH
70741: CALL_OW 44
70745: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70746: LD_VAR 0 12
70750: PPUSH
70751: LD_VAR 0 8
70755: PPUSH
70756: LD_INT 0
70758: PPUSH
70759: CALL 72665 0 3
// end ;
70763: GO 70700
70765: POP
70766: POP
// if apemans then
70767: LD_VAR 0 3
70771: IFFALSE 70894
// for i = 1 to apemans do
70773: LD_ADDR_VAR 0 11
70777: PUSH
70778: DOUBLE
70779: LD_INT 1
70781: DEC
70782: ST_TO_ADDR
70783: LD_VAR 0 3
70787: PUSH
70788: FOR_TO
70789: IFFALSE 70892
// begin hc_class = class_apeman ;
70791: LD_ADDR_OWVAR 28
70795: PUSH
70796: LD_INT 12
70798: ST_TO_ADDR
// hc_gallery =  ;
70799: LD_ADDR_OWVAR 33
70803: PUSH
70804: LD_STRING 
70806: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
70807: LD_ADDR_OWVAR 35
70811: PUSH
70812: LD_INT 2
70814: NEG
70815: PPUSH
70816: LD_INT 2
70818: PPUSH
70819: CALL_OW 12
70823: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
70824: LD_ADDR_OWVAR 31
70828: PUSH
70829: LD_INT 1
70831: PPUSH
70832: LD_INT 3
70834: PPUSH
70835: CALL_OW 12
70839: PUSH
70840: LD_INT 1
70842: PPUSH
70843: LD_INT 3
70845: PPUSH
70846: CALL_OW 12
70850: PUSH
70851: LD_INT 0
70853: PUSH
70854: LD_INT 0
70856: PUSH
70857: EMPTY
70858: LIST
70859: LIST
70860: LIST
70861: LIST
70862: ST_TO_ADDR
// animal := CreateHuman ;
70863: LD_ADDR_VAR 0 12
70867: PUSH
70868: CALL_OW 44
70872: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70873: LD_VAR 0 12
70877: PPUSH
70878: LD_VAR 0 8
70882: PPUSH
70883: LD_INT 0
70885: PPUSH
70886: CALL 72665 0 3
// end ;
70890: GO 70788
70892: POP
70893: POP
// if enchidnas then
70894: LD_VAR 0 4
70898: IFFALSE 70965
// for i = 1 to enchidnas do
70900: LD_ADDR_VAR 0 11
70904: PUSH
70905: DOUBLE
70906: LD_INT 1
70908: DEC
70909: ST_TO_ADDR
70910: LD_VAR 0 4
70914: PUSH
70915: FOR_TO
70916: IFFALSE 70963
// begin hc_class = 13 ;
70918: LD_ADDR_OWVAR 28
70922: PUSH
70923: LD_INT 13
70925: ST_TO_ADDR
// hc_gallery =  ;
70926: LD_ADDR_OWVAR 33
70930: PUSH
70931: LD_STRING 
70933: ST_TO_ADDR
// animal := CreateHuman ;
70934: LD_ADDR_VAR 0 12
70938: PUSH
70939: CALL_OW 44
70943: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70944: LD_VAR 0 12
70948: PPUSH
70949: LD_VAR 0 8
70953: PPUSH
70954: LD_INT 0
70956: PPUSH
70957: CALL 72665 0 3
// end ;
70961: GO 70915
70963: POP
70964: POP
// if fishes then
70965: LD_VAR 0 7
70969: IFFALSE 71036
// for i = 1 to fishes do
70971: LD_ADDR_VAR 0 11
70975: PUSH
70976: DOUBLE
70977: LD_INT 1
70979: DEC
70980: ST_TO_ADDR
70981: LD_VAR 0 7
70985: PUSH
70986: FOR_TO
70987: IFFALSE 71034
// begin hc_class = 20 ;
70989: LD_ADDR_OWVAR 28
70993: PUSH
70994: LD_INT 20
70996: ST_TO_ADDR
// hc_gallery =  ;
70997: LD_ADDR_OWVAR 33
71001: PUSH
71002: LD_STRING 
71004: ST_TO_ADDR
// animal := CreateHuman ;
71005: LD_ADDR_VAR 0 12
71009: PUSH
71010: CALL_OW 44
71014: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
71015: LD_VAR 0 12
71019: PPUSH
71020: LD_VAR 0 9
71024: PPUSH
71025: LD_INT 0
71027: PPUSH
71028: CALL 72665 0 3
// end ;
71032: GO 70986
71034: POP
71035: POP
// end ;
71036: LD_VAR 0 10
71040: RET
// export function WantHeal ( sci , unit ) ; begin
71041: LD_INT 0
71043: PPUSH
// if GetTaskList ( sci ) > 0 then
71044: LD_VAR 0 1
71048: PPUSH
71049: CALL_OW 437
71053: PUSH
71054: LD_INT 0
71056: GREATER
71057: IFFALSE 71127
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
71059: LD_VAR 0 1
71063: PPUSH
71064: CALL_OW 437
71068: PUSH
71069: LD_INT 1
71071: ARRAY
71072: PUSH
71073: LD_INT 1
71075: ARRAY
71076: PUSH
71077: LD_STRING l
71079: EQUAL
71080: PUSH
71081: LD_VAR 0 1
71085: PPUSH
71086: CALL_OW 437
71090: PUSH
71091: LD_INT 1
71093: ARRAY
71094: PUSH
71095: LD_INT 4
71097: ARRAY
71098: PUSH
71099: LD_VAR 0 2
71103: EQUAL
71104: AND
71105: IFFALSE 71117
// result := true else
71107: LD_ADDR_VAR 0 3
71111: PUSH
71112: LD_INT 1
71114: ST_TO_ADDR
71115: GO 71125
// result := false ;
71117: LD_ADDR_VAR 0 3
71121: PUSH
71122: LD_INT 0
71124: ST_TO_ADDR
// end else
71125: GO 71135
// result := false ;
71127: LD_ADDR_VAR 0 3
71131: PUSH
71132: LD_INT 0
71134: ST_TO_ADDR
// end ;
71135: LD_VAR 0 3
71139: RET
// export function HealTarget ( sci ) ; begin
71140: LD_INT 0
71142: PPUSH
// if not sci then
71143: LD_VAR 0 1
71147: NOT
71148: IFFALSE 71152
// exit ;
71150: GO 71217
// result := 0 ;
71152: LD_ADDR_VAR 0 2
71156: PUSH
71157: LD_INT 0
71159: ST_TO_ADDR
// if GetTaskList ( sci ) then
71160: LD_VAR 0 1
71164: PPUSH
71165: CALL_OW 437
71169: IFFALSE 71217
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
71171: LD_VAR 0 1
71175: PPUSH
71176: CALL_OW 437
71180: PUSH
71181: LD_INT 1
71183: ARRAY
71184: PUSH
71185: LD_INT 1
71187: ARRAY
71188: PUSH
71189: LD_STRING l
71191: EQUAL
71192: IFFALSE 71217
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
71194: LD_ADDR_VAR 0 2
71198: PUSH
71199: LD_VAR 0 1
71203: PPUSH
71204: CALL_OW 437
71208: PUSH
71209: LD_INT 1
71211: ARRAY
71212: PUSH
71213: LD_INT 4
71215: ARRAY
71216: ST_TO_ADDR
// end ;
71217: LD_VAR 0 2
71221: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
71222: LD_INT 0
71224: PPUSH
71225: PPUSH
71226: PPUSH
71227: PPUSH
// if not base_units then
71228: LD_VAR 0 1
71232: NOT
71233: IFFALSE 71237
// exit ;
71235: GO 71324
// result := false ;
71237: LD_ADDR_VAR 0 2
71241: PUSH
71242: LD_INT 0
71244: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
71245: LD_ADDR_VAR 0 5
71249: PUSH
71250: LD_VAR 0 1
71254: PPUSH
71255: LD_INT 21
71257: PUSH
71258: LD_INT 3
71260: PUSH
71261: EMPTY
71262: LIST
71263: LIST
71264: PPUSH
71265: CALL_OW 72
71269: ST_TO_ADDR
// if not tmp then
71270: LD_VAR 0 5
71274: NOT
71275: IFFALSE 71279
// exit ;
71277: GO 71324
// for i in tmp do
71279: LD_ADDR_VAR 0 3
71283: PUSH
71284: LD_VAR 0 5
71288: PUSH
71289: FOR_IN
71290: IFFALSE 71322
// begin result := EnemyInRange ( i , 22 ) ;
71292: LD_ADDR_VAR 0 2
71296: PUSH
71297: LD_VAR 0 3
71301: PPUSH
71302: LD_INT 22
71304: PPUSH
71305: CALL 68911 0 2
71309: ST_TO_ADDR
// if result then
71310: LD_VAR 0 2
71314: IFFALSE 71320
// exit ;
71316: POP
71317: POP
71318: GO 71324
// end ;
71320: GO 71289
71322: POP
71323: POP
// end ;
71324: LD_VAR 0 2
71328: RET
// export function FilterByTag ( units , tag ) ; begin
71329: LD_INT 0
71331: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
71332: LD_ADDR_VAR 0 3
71336: PUSH
71337: LD_VAR 0 1
71341: PPUSH
71342: LD_INT 120
71344: PUSH
71345: LD_VAR 0 2
71349: PUSH
71350: EMPTY
71351: LIST
71352: LIST
71353: PPUSH
71354: CALL_OW 72
71358: ST_TO_ADDR
// end ;
71359: LD_VAR 0 3
71363: RET
// export function IsDriver ( un ) ; begin
71364: LD_INT 0
71366: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
71367: LD_ADDR_VAR 0 2
71371: PUSH
71372: LD_VAR 0 1
71376: PUSH
71377: LD_INT 55
71379: PUSH
71380: EMPTY
71381: LIST
71382: PPUSH
71383: CALL_OW 69
71387: IN
71388: ST_TO_ADDR
// end ;
71389: LD_VAR 0 2
71393: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
71394: LD_INT 0
71396: PPUSH
71397: PPUSH
// list := [ ] ;
71398: LD_ADDR_VAR 0 5
71402: PUSH
71403: EMPTY
71404: ST_TO_ADDR
// case d of 0 :
71405: LD_VAR 0 3
71409: PUSH
71410: LD_INT 0
71412: DOUBLE
71413: EQUAL
71414: IFTRUE 71418
71416: GO 71551
71418: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
71419: LD_ADDR_VAR 0 5
71423: PUSH
71424: LD_VAR 0 1
71428: PUSH
71429: LD_INT 4
71431: MINUS
71432: PUSH
71433: LD_VAR 0 2
71437: PUSH
71438: LD_INT 4
71440: MINUS
71441: PUSH
71442: LD_INT 2
71444: PUSH
71445: EMPTY
71446: LIST
71447: LIST
71448: LIST
71449: PUSH
71450: LD_VAR 0 1
71454: PUSH
71455: LD_INT 3
71457: MINUS
71458: PUSH
71459: LD_VAR 0 2
71463: PUSH
71464: LD_INT 1
71466: PUSH
71467: EMPTY
71468: LIST
71469: LIST
71470: LIST
71471: PUSH
71472: LD_VAR 0 1
71476: PUSH
71477: LD_INT 4
71479: PLUS
71480: PUSH
71481: LD_VAR 0 2
71485: PUSH
71486: LD_INT 4
71488: PUSH
71489: EMPTY
71490: LIST
71491: LIST
71492: LIST
71493: PUSH
71494: LD_VAR 0 1
71498: PUSH
71499: LD_INT 3
71501: PLUS
71502: PUSH
71503: LD_VAR 0 2
71507: PUSH
71508: LD_INT 3
71510: PLUS
71511: PUSH
71512: LD_INT 5
71514: PUSH
71515: EMPTY
71516: LIST
71517: LIST
71518: LIST
71519: PUSH
71520: LD_VAR 0 1
71524: PUSH
71525: LD_VAR 0 2
71529: PUSH
71530: LD_INT 4
71532: PLUS
71533: PUSH
71534: LD_INT 0
71536: PUSH
71537: EMPTY
71538: LIST
71539: LIST
71540: LIST
71541: PUSH
71542: EMPTY
71543: LIST
71544: LIST
71545: LIST
71546: LIST
71547: LIST
71548: ST_TO_ADDR
// end ; 1 :
71549: GO 72249
71551: LD_INT 1
71553: DOUBLE
71554: EQUAL
71555: IFTRUE 71559
71557: GO 71692
71559: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
71560: LD_ADDR_VAR 0 5
71564: PUSH
71565: LD_VAR 0 1
71569: PUSH
71570: LD_VAR 0 2
71574: PUSH
71575: LD_INT 4
71577: MINUS
71578: PUSH
71579: LD_INT 3
71581: PUSH
71582: EMPTY
71583: LIST
71584: LIST
71585: LIST
71586: PUSH
71587: LD_VAR 0 1
71591: PUSH
71592: LD_INT 3
71594: MINUS
71595: PUSH
71596: LD_VAR 0 2
71600: PUSH
71601: LD_INT 3
71603: MINUS
71604: PUSH
71605: LD_INT 2
71607: PUSH
71608: EMPTY
71609: LIST
71610: LIST
71611: LIST
71612: PUSH
71613: LD_VAR 0 1
71617: PUSH
71618: LD_INT 4
71620: MINUS
71621: PUSH
71622: LD_VAR 0 2
71626: PUSH
71627: LD_INT 1
71629: PUSH
71630: EMPTY
71631: LIST
71632: LIST
71633: LIST
71634: PUSH
71635: LD_VAR 0 1
71639: PUSH
71640: LD_VAR 0 2
71644: PUSH
71645: LD_INT 3
71647: PLUS
71648: PUSH
71649: LD_INT 0
71651: PUSH
71652: EMPTY
71653: LIST
71654: LIST
71655: LIST
71656: PUSH
71657: LD_VAR 0 1
71661: PUSH
71662: LD_INT 4
71664: PLUS
71665: PUSH
71666: LD_VAR 0 2
71670: PUSH
71671: LD_INT 4
71673: PLUS
71674: PUSH
71675: LD_INT 5
71677: PUSH
71678: EMPTY
71679: LIST
71680: LIST
71681: LIST
71682: PUSH
71683: EMPTY
71684: LIST
71685: LIST
71686: LIST
71687: LIST
71688: LIST
71689: ST_TO_ADDR
// end ; 2 :
71690: GO 72249
71692: LD_INT 2
71694: DOUBLE
71695: EQUAL
71696: IFTRUE 71700
71698: GO 71829
71700: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
71701: LD_ADDR_VAR 0 5
71705: PUSH
71706: LD_VAR 0 1
71710: PUSH
71711: LD_VAR 0 2
71715: PUSH
71716: LD_INT 3
71718: MINUS
71719: PUSH
71720: LD_INT 3
71722: PUSH
71723: EMPTY
71724: LIST
71725: LIST
71726: LIST
71727: PUSH
71728: LD_VAR 0 1
71732: PUSH
71733: LD_INT 4
71735: PLUS
71736: PUSH
71737: LD_VAR 0 2
71741: PUSH
71742: LD_INT 4
71744: PUSH
71745: EMPTY
71746: LIST
71747: LIST
71748: LIST
71749: PUSH
71750: LD_VAR 0 1
71754: PUSH
71755: LD_VAR 0 2
71759: PUSH
71760: LD_INT 4
71762: PLUS
71763: PUSH
71764: LD_INT 0
71766: PUSH
71767: EMPTY
71768: LIST
71769: LIST
71770: LIST
71771: PUSH
71772: LD_VAR 0 1
71776: PUSH
71777: LD_INT 3
71779: MINUS
71780: PUSH
71781: LD_VAR 0 2
71785: PUSH
71786: LD_INT 1
71788: PUSH
71789: EMPTY
71790: LIST
71791: LIST
71792: LIST
71793: PUSH
71794: LD_VAR 0 1
71798: PUSH
71799: LD_INT 4
71801: MINUS
71802: PUSH
71803: LD_VAR 0 2
71807: PUSH
71808: LD_INT 4
71810: MINUS
71811: PUSH
71812: LD_INT 2
71814: PUSH
71815: EMPTY
71816: LIST
71817: LIST
71818: LIST
71819: PUSH
71820: EMPTY
71821: LIST
71822: LIST
71823: LIST
71824: LIST
71825: LIST
71826: ST_TO_ADDR
// end ; 3 :
71827: GO 72249
71829: LD_INT 3
71831: DOUBLE
71832: EQUAL
71833: IFTRUE 71837
71835: GO 71970
71837: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
71838: LD_ADDR_VAR 0 5
71842: PUSH
71843: LD_VAR 0 1
71847: PUSH
71848: LD_INT 3
71850: PLUS
71851: PUSH
71852: LD_VAR 0 2
71856: PUSH
71857: LD_INT 4
71859: PUSH
71860: EMPTY
71861: LIST
71862: LIST
71863: LIST
71864: PUSH
71865: LD_VAR 0 1
71869: PUSH
71870: LD_INT 4
71872: PLUS
71873: PUSH
71874: LD_VAR 0 2
71878: PUSH
71879: LD_INT 4
71881: PLUS
71882: PUSH
71883: LD_INT 5
71885: PUSH
71886: EMPTY
71887: LIST
71888: LIST
71889: LIST
71890: PUSH
71891: LD_VAR 0 1
71895: PUSH
71896: LD_INT 4
71898: MINUS
71899: PUSH
71900: LD_VAR 0 2
71904: PUSH
71905: LD_INT 1
71907: PUSH
71908: EMPTY
71909: LIST
71910: LIST
71911: LIST
71912: PUSH
71913: LD_VAR 0 1
71917: PUSH
71918: LD_VAR 0 2
71922: PUSH
71923: LD_INT 4
71925: MINUS
71926: PUSH
71927: LD_INT 3
71929: PUSH
71930: EMPTY
71931: LIST
71932: LIST
71933: LIST
71934: PUSH
71935: LD_VAR 0 1
71939: PUSH
71940: LD_INT 3
71942: MINUS
71943: PUSH
71944: LD_VAR 0 2
71948: PUSH
71949: LD_INT 3
71951: MINUS
71952: PUSH
71953: LD_INT 2
71955: PUSH
71956: EMPTY
71957: LIST
71958: LIST
71959: LIST
71960: PUSH
71961: EMPTY
71962: LIST
71963: LIST
71964: LIST
71965: LIST
71966: LIST
71967: ST_TO_ADDR
// end ; 4 :
71968: GO 72249
71970: LD_INT 4
71972: DOUBLE
71973: EQUAL
71974: IFTRUE 71978
71976: GO 72111
71978: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
71979: LD_ADDR_VAR 0 5
71983: PUSH
71984: LD_VAR 0 1
71988: PUSH
71989: LD_VAR 0 2
71993: PUSH
71994: LD_INT 4
71996: PLUS
71997: PUSH
71998: LD_INT 0
72000: PUSH
72001: EMPTY
72002: LIST
72003: LIST
72004: LIST
72005: PUSH
72006: LD_VAR 0 1
72010: PUSH
72011: LD_INT 3
72013: PLUS
72014: PUSH
72015: LD_VAR 0 2
72019: PUSH
72020: LD_INT 3
72022: PLUS
72023: PUSH
72024: LD_INT 5
72026: PUSH
72027: EMPTY
72028: LIST
72029: LIST
72030: LIST
72031: PUSH
72032: LD_VAR 0 1
72036: PUSH
72037: LD_INT 4
72039: PLUS
72040: PUSH
72041: LD_VAR 0 2
72045: PUSH
72046: LD_INT 4
72048: PUSH
72049: EMPTY
72050: LIST
72051: LIST
72052: LIST
72053: PUSH
72054: LD_VAR 0 1
72058: PUSH
72059: LD_VAR 0 2
72063: PUSH
72064: LD_INT 3
72066: MINUS
72067: PUSH
72068: LD_INT 3
72070: PUSH
72071: EMPTY
72072: LIST
72073: LIST
72074: LIST
72075: PUSH
72076: LD_VAR 0 1
72080: PUSH
72081: LD_INT 4
72083: MINUS
72084: PUSH
72085: LD_VAR 0 2
72089: PUSH
72090: LD_INT 4
72092: MINUS
72093: PUSH
72094: LD_INT 2
72096: PUSH
72097: EMPTY
72098: LIST
72099: LIST
72100: LIST
72101: PUSH
72102: EMPTY
72103: LIST
72104: LIST
72105: LIST
72106: LIST
72107: LIST
72108: ST_TO_ADDR
// end ; 5 :
72109: GO 72249
72111: LD_INT 5
72113: DOUBLE
72114: EQUAL
72115: IFTRUE 72119
72117: GO 72248
72119: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
72120: LD_ADDR_VAR 0 5
72124: PUSH
72125: LD_VAR 0 1
72129: PUSH
72130: LD_INT 4
72132: MINUS
72133: PUSH
72134: LD_VAR 0 2
72138: PUSH
72139: LD_INT 1
72141: PUSH
72142: EMPTY
72143: LIST
72144: LIST
72145: LIST
72146: PUSH
72147: LD_VAR 0 1
72151: PUSH
72152: LD_VAR 0 2
72156: PUSH
72157: LD_INT 4
72159: MINUS
72160: PUSH
72161: LD_INT 3
72163: PUSH
72164: EMPTY
72165: LIST
72166: LIST
72167: LIST
72168: PUSH
72169: LD_VAR 0 1
72173: PUSH
72174: LD_INT 4
72176: PLUS
72177: PUSH
72178: LD_VAR 0 2
72182: PUSH
72183: LD_INT 4
72185: PLUS
72186: PUSH
72187: LD_INT 5
72189: PUSH
72190: EMPTY
72191: LIST
72192: LIST
72193: LIST
72194: PUSH
72195: LD_VAR 0 1
72199: PUSH
72200: LD_INT 3
72202: PLUS
72203: PUSH
72204: LD_VAR 0 2
72208: PUSH
72209: LD_INT 4
72211: PUSH
72212: EMPTY
72213: LIST
72214: LIST
72215: LIST
72216: PUSH
72217: LD_VAR 0 1
72221: PUSH
72222: LD_VAR 0 2
72226: PUSH
72227: LD_INT 3
72229: PLUS
72230: PUSH
72231: LD_INT 0
72233: PUSH
72234: EMPTY
72235: LIST
72236: LIST
72237: LIST
72238: PUSH
72239: EMPTY
72240: LIST
72241: LIST
72242: LIST
72243: LIST
72244: LIST
72245: ST_TO_ADDR
// end ; end ;
72246: GO 72249
72248: POP
// result := list ;
72249: LD_ADDR_VAR 0 4
72253: PUSH
72254: LD_VAR 0 5
72258: ST_TO_ADDR
// end ;
72259: LD_VAR 0 4
72263: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
72264: LD_INT 0
72266: PPUSH
72267: PPUSH
72268: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
72269: LD_VAR 0 1
72273: NOT
72274: PUSH
72275: LD_VAR 0 2
72279: PUSH
72280: LD_INT 1
72282: PUSH
72283: LD_INT 2
72285: PUSH
72286: LD_INT 3
72288: PUSH
72289: LD_INT 4
72291: PUSH
72292: EMPTY
72293: LIST
72294: LIST
72295: LIST
72296: LIST
72297: IN
72298: NOT
72299: OR
72300: IFFALSE 72304
// exit ;
72302: GO 72387
// tmp := [ ] ;
72304: LD_ADDR_VAR 0 5
72308: PUSH
72309: EMPTY
72310: ST_TO_ADDR
// for i in units do
72311: LD_ADDR_VAR 0 4
72315: PUSH
72316: LD_VAR 0 1
72320: PUSH
72321: FOR_IN
72322: IFFALSE 72356
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
72324: LD_ADDR_VAR 0 5
72328: PUSH
72329: LD_VAR 0 5
72333: PPUSH
72334: LD_VAR 0 4
72338: PPUSH
72339: LD_VAR 0 2
72343: PPUSH
72344: CALL_OW 259
72348: PPUSH
72349: CALL 73760 0 2
72353: ST_TO_ADDR
72354: GO 72321
72356: POP
72357: POP
// if not tmp then
72358: LD_VAR 0 5
72362: NOT
72363: IFFALSE 72367
// exit ;
72365: GO 72387
// result := SortListByListDesc ( units , tmp ) ;
72367: LD_ADDR_VAR 0 3
72371: PUSH
72372: LD_VAR 0 1
72376: PPUSH
72377: LD_VAR 0 5
72381: PPUSH
72382: CALL_OW 77
72386: ST_TO_ADDR
// end ;
72387: LD_VAR 0 3
72391: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
72392: LD_INT 0
72394: PPUSH
72395: PPUSH
72396: PPUSH
// result := false ;
72397: LD_ADDR_VAR 0 3
72401: PUSH
72402: LD_INT 0
72404: ST_TO_ADDR
// if not building then
72405: LD_VAR 0 2
72409: NOT
72410: IFFALSE 72414
// exit ;
72412: GO 72552
// x := GetX ( building ) ;
72414: LD_ADDR_VAR 0 4
72418: PUSH
72419: LD_VAR 0 2
72423: PPUSH
72424: CALL_OW 250
72428: ST_TO_ADDR
// y := GetY ( building ) ;
72429: LD_ADDR_VAR 0 5
72433: PUSH
72434: LD_VAR 0 2
72438: PPUSH
72439: CALL_OW 251
72443: ST_TO_ADDR
// if not x or not y then
72444: LD_VAR 0 4
72448: NOT
72449: PUSH
72450: LD_VAR 0 5
72454: NOT
72455: OR
72456: IFFALSE 72460
// exit ;
72458: GO 72552
// if GetTaskList ( unit ) then
72460: LD_VAR 0 1
72464: PPUSH
72465: CALL_OW 437
72469: IFFALSE 72552
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72471: LD_STRING e
72473: PUSH
72474: LD_VAR 0 1
72478: PPUSH
72479: CALL_OW 437
72483: PUSH
72484: LD_INT 1
72486: ARRAY
72487: PUSH
72488: LD_INT 1
72490: ARRAY
72491: EQUAL
72492: PUSH
72493: LD_VAR 0 4
72497: PUSH
72498: LD_VAR 0 1
72502: PPUSH
72503: CALL_OW 437
72507: PUSH
72508: LD_INT 1
72510: ARRAY
72511: PUSH
72512: LD_INT 2
72514: ARRAY
72515: EQUAL
72516: AND
72517: PUSH
72518: LD_VAR 0 5
72522: PUSH
72523: LD_VAR 0 1
72527: PPUSH
72528: CALL_OW 437
72532: PUSH
72533: LD_INT 1
72535: ARRAY
72536: PUSH
72537: LD_INT 3
72539: ARRAY
72540: EQUAL
72541: AND
72542: IFFALSE 72552
// result := true end ;
72544: LD_ADDR_VAR 0 3
72548: PUSH
72549: LD_INT 1
72551: ST_TO_ADDR
// end ;
72552: LD_VAR 0 3
72556: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
72557: LD_INT 0
72559: PPUSH
// result := false ;
72560: LD_ADDR_VAR 0 4
72564: PUSH
72565: LD_INT 0
72567: ST_TO_ADDR
// if GetTaskList ( unit ) then
72568: LD_VAR 0 1
72572: PPUSH
72573: CALL_OW 437
72577: IFFALSE 72660
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72579: LD_STRING M
72581: PUSH
72582: LD_VAR 0 1
72586: PPUSH
72587: CALL_OW 437
72591: PUSH
72592: LD_INT 1
72594: ARRAY
72595: PUSH
72596: LD_INT 1
72598: ARRAY
72599: EQUAL
72600: PUSH
72601: LD_VAR 0 2
72605: PUSH
72606: LD_VAR 0 1
72610: PPUSH
72611: CALL_OW 437
72615: PUSH
72616: LD_INT 1
72618: ARRAY
72619: PUSH
72620: LD_INT 2
72622: ARRAY
72623: EQUAL
72624: AND
72625: PUSH
72626: LD_VAR 0 3
72630: PUSH
72631: LD_VAR 0 1
72635: PPUSH
72636: CALL_OW 437
72640: PUSH
72641: LD_INT 1
72643: ARRAY
72644: PUSH
72645: LD_INT 3
72647: ARRAY
72648: EQUAL
72649: AND
72650: IFFALSE 72660
// result := true ;
72652: LD_ADDR_VAR 0 4
72656: PUSH
72657: LD_INT 1
72659: ST_TO_ADDR
// end ; end ;
72660: LD_VAR 0 4
72664: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
72665: LD_INT 0
72667: PPUSH
72668: PPUSH
72669: PPUSH
72670: PPUSH
// if not unit or not area then
72671: LD_VAR 0 1
72675: NOT
72676: PUSH
72677: LD_VAR 0 2
72681: NOT
72682: OR
72683: IFFALSE 72687
// exit ;
72685: GO 72863
// tmp := AreaToList ( area , i ) ;
72687: LD_ADDR_VAR 0 6
72691: PUSH
72692: LD_VAR 0 2
72696: PPUSH
72697: LD_VAR 0 5
72701: PPUSH
72702: CALL_OW 517
72706: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
72707: LD_ADDR_VAR 0 5
72711: PUSH
72712: DOUBLE
72713: LD_INT 1
72715: DEC
72716: ST_TO_ADDR
72717: LD_VAR 0 6
72721: PUSH
72722: LD_INT 1
72724: ARRAY
72725: PUSH
72726: FOR_TO
72727: IFFALSE 72861
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
72729: LD_ADDR_VAR 0 7
72733: PUSH
72734: LD_VAR 0 6
72738: PUSH
72739: LD_INT 1
72741: ARRAY
72742: PUSH
72743: LD_VAR 0 5
72747: ARRAY
72748: PUSH
72749: LD_VAR 0 6
72753: PUSH
72754: LD_INT 2
72756: ARRAY
72757: PUSH
72758: LD_VAR 0 5
72762: ARRAY
72763: PUSH
72764: EMPTY
72765: LIST
72766: LIST
72767: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
72768: LD_INT 92
72770: PUSH
72771: LD_VAR 0 7
72775: PUSH
72776: LD_INT 1
72778: ARRAY
72779: PUSH
72780: LD_VAR 0 7
72784: PUSH
72785: LD_INT 2
72787: ARRAY
72788: PUSH
72789: LD_INT 2
72791: PUSH
72792: EMPTY
72793: LIST
72794: LIST
72795: LIST
72796: LIST
72797: PPUSH
72798: CALL_OW 69
72802: PUSH
72803: LD_INT 0
72805: EQUAL
72806: IFFALSE 72859
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
72808: LD_VAR 0 1
72812: PPUSH
72813: LD_VAR 0 7
72817: PUSH
72818: LD_INT 1
72820: ARRAY
72821: PPUSH
72822: LD_VAR 0 7
72826: PUSH
72827: LD_INT 2
72829: ARRAY
72830: PPUSH
72831: LD_VAR 0 3
72835: PPUSH
72836: CALL_OW 48
// result := IsPlaced ( unit ) ;
72840: LD_ADDR_VAR 0 4
72844: PUSH
72845: LD_VAR 0 1
72849: PPUSH
72850: CALL_OW 305
72854: ST_TO_ADDR
// exit ;
72855: POP
72856: POP
72857: GO 72863
// end ; end ;
72859: GO 72726
72861: POP
72862: POP
// end ;
72863: LD_VAR 0 4
72867: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
72868: LD_INT 0
72870: PPUSH
72871: PPUSH
72872: PPUSH
// if not side or side > 8 then
72873: LD_VAR 0 1
72877: NOT
72878: PUSH
72879: LD_VAR 0 1
72883: PUSH
72884: LD_INT 8
72886: GREATER
72887: OR
72888: IFFALSE 72892
// exit ;
72890: GO 73079
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
72892: LD_ADDR_VAR 0 4
72896: PUSH
72897: LD_INT 22
72899: PUSH
72900: LD_VAR 0 1
72904: PUSH
72905: EMPTY
72906: LIST
72907: LIST
72908: PUSH
72909: LD_INT 21
72911: PUSH
72912: LD_INT 3
72914: PUSH
72915: EMPTY
72916: LIST
72917: LIST
72918: PUSH
72919: EMPTY
72920: LIST
72921: LIST
72922: PPUSH
72923: CALL_OW 69
72927: ST_TO_ADDR
// if not tmp then
72928: LD_VAR 0 4
72932: NOT
72933: IFFALSE 72937
// exit ;
72935: GO 73079
// enable_addtolog := true ;
72937: LD_ADDR_OWVAR 81
72941: PUSH
72942: LD_INT 1
72944: ST_TO_ADDR
// AddToLog ( [ ) ;
72945: LD_STRING [
72947: PPUSH
72948: CALL_OW 561
// for i in tmp do
72952: LD_ADDR_VAR 0 3
72956: PUSH
72957: LD_VAR 0 4
72961: PUSH
72962: FOR_IN
72963: IFFALSE 73070
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
72965: LD_STRING [
72967: PUSH
72968: LD_VAR 0 3
72972: PPUSH
72973: CALL_OW 266
72977: STR
72978: PUSH
72979: LD_STRING , 
72981: STR
72982: PUSH
72983: LD_VAR 0 3
72987: PPUSH
72988: CALL_OW 250
72992: STR
72993: PUSH
72994: LD_STRING , 
72996: STR
72997: PUSH
72998: LD_VAR 0 3
73002: PPUSH
73003: CALL_OW 251
73007: STR
73008: PUSH
73009: LD_STRING , 
73011: STR
73012: PUSH
73013: LD_VAR 0 3
73017: PPUSH
73018: CALL_OW 254
73022: STR
73023: PUSH
73024: LD_STRING , 
73026: STR
73027: PUSH
73028: LD_VAR 0 3
73032: PPUSH
73033: LD_INT 1
73035: PPUSH
73036: CALL_OW 268
73040: STR
73041: PUSH
73042: LD_STRING , 
73044: STR
73045: PUSH
73046: LD_VAR 0 3
73050: PPUSH
73051: LD_INT 2
73053: PPUSH
73054: CALL_OW 268
73058: STR
73059: PUSH
73060: LD_STRING ],
73062: STR
73063: PPUSH
73064: CALL_OW 561
// end ;
73068: GO 72962
73070: POP
73071: POP
// AddToLog ( ]; ) ;
73072: LD_STRING ];
73074: PPUSH
73075: CALL_OW 561
// end ;
73079: LD_VAR 0 2
73083: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
73084: LD_INT 0
73086: PPUSH
73087: PPUSH
73088: PPUSH
73089: PPUSH
73090: PPUSH
// if not area or not rate or not max then
73091: LD_VAR 0 1
73095: NOT
73096: PUSH
73097: LD_VAR 0 2
73101: NOT
73102: OR
73103: PUSH
73104: LD_VAR 0 4
73108: NOT
73109: OR
73110: IFFALSE 73114
// exit ;
73112: GO 73303
// while 1 do
73114: LD_INT 1
73116: IFFALSE 73303
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
73118: LD_ADDR_VAR 0 9
73122: PUSH
73123: LD_VAR 0 1
73127: PPUSH
73128: LD_INT 1
73130: PPUSH
73131: CALL_OW 287
73135: PUSH
73136: LD_INT 10
73138: MUL
73139: ST_TO_ADDR
// r := rate / 10 ;
73140: LD_ADDR_VAR 0 7
73144: PUSH
73145: LD_VAR 0 2
73149: PUSH
73150: LD_INT 10
73152: DIVREAL
73153: ST_TO_ADDR
// time := 1 1$00 ;
73154: LD_ADDR_VAR 0 8
73158: PUSH
73159: LD_INT 2100
73161: ST_TO_ADDR
// if amount < min then
73162: LD_VAR 0 9
73166: PUSH
73167: LD_VAR 0 3
73171: LESS
73172: IFFALSE 73190
// r := r * 2 else
73174: LD_ADDR_VAR 0 7
73178: PUSH
73179: LD_VAR 0 7
73183: PUSH
73184: LD_INT 2
73186: MUL
73187: ST_TO_ADDR
73188: GO 73216
// if amount > max then
73190: LD_VAR 0 9
73194: PUSH
73195: LD_VAR 0 4
73199: GREATER
73200: IFFALSE 73216
// r := r / 2 ;
73202: LD_ADDR_VAR 0 7
73206: PUSH
73207: LD_VAR 0 7
73211: PUSH
73212: LD_INT 2
73214: DIVREAL
73215: ST_TO_ADDR
// time := time / r ;
73216: LD_ADDR_VAR 0 8
73220: PUSH
73221: LD_VAR 0 8
73225: PUSH
73226: LD_VAR 0 7
73230: DIVREAL
73231: ST_TO_ADDR
// if time < 0 then
73232: LD_VAR 0 8
73236: PUSH
73237: LD_INT 0
73239: LESS
73240: IFFALSE 73257
// time := time * - 1 ;
73242: LD_ADDR_VAR 0 8
73246: PUSH
73247: LD_VAR 0 8
73251: PUSH
73252: LD_INT 1
73254: NEG
73255: MUL
73256: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
73257: LD_VAR 0 8
73261: PUSH
73262: LD_INT 35
73264: PPUSH
73265: LD_INT 875
73267: PPUSH
73268: CALL_OW 12
73272: PLUS
73273: PPUSH
73274: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
73278: LD_INT 1
73280: PPUSH
73281: LD_INT 5
73283: PPUSH
73284: CALL_OW 12
73288: PPUSH
73289: LD_VAR 0 1
73293: PPUSH
73294: LD_INT 1
73296: PPUSH
73297: CALL_OW 55
// end ;
73301: GO 73114
// end ;
73303: LD_VAR 0 5
73307: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
73308: LD_INT 0
73310: PPUSH
73311: PPUSH
73312: PPUSH
73313: PPUSH
73314: PPUSH
73315: PPUSH
73316: PPUSH
73317: PPUSH
// if not turrets or not factories then
73318: LD_VAR 0 1
73322: NOT
73323: PUSH
73324: LD_VAR 0 2
73328: NOT
73329: OR
73330: IFFALSE 73334
// exit ;
73332: GO 73641
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
73334: LD_ADDR_VAR 0 10
73338: PUSH
73339: LD_INT 5
73341: PUSH
73342: LD_INT 6
73344: PUSH
73345: EMPTY
73346: LIST
73347: LIST
73348: PUSH
73349: LD_INT 2
73351: PUSH
73352: LD_INT 4
73354: PUSH
73355: EMPTY
73356: LIST
73357: LIST
73358: PUSH
73359: LD_INT 3
73361: PUSH
73362: LD_INT 5
73364: PUSH
73365: EMPTY
73366: LIST
73367: LIST
73368: PUSH
73369: EMPTY
73370: LIST
73371: LIST
73372: LIST
73373: PUSH
73374: LD_INT 24
73376: PUSH
73377: LD_INT 25
73379: PUSH
73380: EMPTY
73381: LIST
73382: LIST
73383: PUSH
73384: LD_INT 23
73386: PUSH
73387: LD_INT 27
73389: PUSH
73390: EMPTY
73391: LIST
73392: LIST
73393: PUSH
73394: EMPTY
73395: LIST
73396: LIST
73397: PUSH
73398: LD_INT 42
73400: PUSH
73401: LD_INT 43
73403: PUSH
73404: EMPTY
73405: LIST
73406: LIST
73407: PUSH
73408: LD_INT 44
73410: PUSH
73411: LD_INT 46
73413: PUSH
73414: EMPTY
73415: LIST
73416: LIST
73417: PUSH
73418: LD_INT 45
73420: PUSH
73421: LD_INT 47
73423: PUSH
73424: EMPTY
73425: LIST
73426: LIST
73427: PUSH
73428: EMPTY
73429: LIST
73430: LIST
73431: LIST
73432: PUSH
73433: EMPTY
73434: LIST
73435: LIST
73436: LIST
73437: ST_TO_ADDR
// result := [ ] ;
73438: LD_ADDR_VAR 0 3
73442: PUSH
73443: EMPTY
73444: ST_TO_ADDR
// for i in turrets do
73445: LD_ADDR_VAR 0 4
73449: PUSH
73450: LD_VAR 0 1
73454: PUSH
73455: FOR_IN
73456: IFFALSE 73639
// begin nat := GetNation ( i ) ;
73458: LD_ADDR_VAR 0 7
73462: PUSH
73463: LD_VAR 0 4
73467: PPUSH
73468: CALL_OW 248
73472: ST_TO_ADDR
// weapon := 0 ;
73473: LD_ADDR_VAR 0 8
73477: PUSH
73478: LD_INT 0
73480: ST_TO_ADDR
// if not nat then
73481: LD_VAR 0 7
73485: NOT
73486: IFFALSE 73490
// continue ;
73488: GO 73455
// for j in list [ nat ] do
73490: LD_ADDR_VAR 0 5
73494: PUSH
73495: LD_VAR 0 10
73499: PUSH
73500: LD_VAR 0 7
73504: ARRAY
73505: PUSH
73506: FOR_IN
73507: IFFALSE 73548
// if GetBWeapon ( i ) = j [ 1 ] then
73509: LD_VAR 0 4
73513: PPUSH
73514: CALL_OW 269
73518: PUSH
73519: LD_VAR 0 5
73523: PUSH
73524: LD_INT 1
73526: ARRAY
73527: EQUAL
73528: IFFALSE 73546
// begin weapon := j [ 2 ] ;
73530: LD_ADDR_VAR 0 8
73534: PUSH
73535: LD_VAR 0 5
73539: PUSH
73540: LD_INT 2
73542: ARRAY
73543: ST_TO_ADDR
// break ;
73544: GO 73548
// end ;
73546: GO 73506
73548: POP
73549: POP
// if not weapon then
73550: LD_VAR 0 8
73554: NOT
73555: IFFALSE 73559
// continue ;
73557: GO 73455
// for k in factories do
73559: LD_ADDR_VAR 0 6
73563: PUSH
73564: LD_VAR 0 2
73568: PUSH
73569: FOR_IN
73570: IFFALSE 73635
// begin weapons := AvailableWeaponList ( k ) ;
73572: LD_ADDR_VAR 0 9
73576: PUSH
73577: LD_VAR 0 6
73581: PPUSH
73582: CALL_OW 478
73586: ST_TO_ADDR
// if not weapons then
73587: LD_VAR 0 9
73591: NOT
73592: IFFALSE 73596
// continue ;
73594: GO 73569
// if weapon in weapons then
73596: LD_VAR 0 8
73600: PUSH
73601: LD_VAR 0 9
73605: IN
73606: IFFALSE 73633
// begin result := [ i , weapon ] ;
73608: LD_ADDR_VAR 0 3
73612: PUSH
73613: LD_VAR 0 4
73617: PUSH
73618: LD_VAR 0 8
73622: PUSH
73623: EMPTY
73624: LIST
73625: LIST
73626: ST_TO_ADDR
// exit ;
73627: POP
73628: POP
73629: POP
73630: POP
73631: GO 73641
// end ; end ;
73633: GO 73569
73635: POP
73636: POP
// end ;
73637: GO 73455
73639: POP
73640: POP
// end ;
73641: LD_VAR 0 3
73645: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
73646: LD_INT 0
73648: PPUSH
// if not side or side > 8 then
73649: LD_VAR 0 3
73653: NOT
73654: PUSH
73655: LD_VAR 0 3
73659: PUSH
73660: LD_INT 8
73662: GREATER
73663: OR
73664: IFFALSE 73668
// exit ;
73666: GO 73727
// if not range then
73668: LD_VAR 0 4
73672: NOT
73673: IFFALSE 73684
// range := - 12 ;
73675: LD_ADDR_VAR 0 4
73679: PUSH
73680: LD_INT 12
73682: NEG
73683: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
73684: LD_VAR 0 1
73688: PPUSH
73689: LD_VAR 0 2
73693: PPUSH
73694: LD_VAR 0 3
73698: PPUSH
73699: LD_VAR 0 4
73703: PPUSH
73704: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
73708: LD_VAR 0 1
73712: PPUSH
73713: LD_VAR 0 2
73717: PPUSH
73718: LD_VAR 0 3
73722: PPUSH
73723: CALL_OW 331
// end ;
73727: LD_VAR 0 5
73731: RET
// export function Video ( mode ) ; begin
73732: LD_INT 0
73734: PPUSH
// ingame_video = mode ;
73735: LD_ADDR_OWVAR 52
73739: PUSH
73740: LD_VAR 0 1
73744: ST_TO_ADDR
// interface_hidden = mode ;
73745: LD_ADDR_OWVAR 54
73749: PUSH
73750: LD_VAR 0 1
73754: ST_TO_ADDR
// end ;
73755: LD_VAR 0 2
73759: RET
// export function Join ( array , element ) ; begin
73760: LD_INT 0
73762: PPUSH
// result := Replace ( array , array + 1 , element ) ;
73763: LD_ADDR_VAR 0 3
73767: PUSH
73768: LD_VAR 0 1
73772: PPUSH
73773: LD_VAR 0 1
73777: PUSH
73778: LD_INT 1
73780: PLUS
73781: PPUSH
73782: LD_VAR 0 2
73786: PPUSH
73787: CALL_OW 1
73791: ST_TO_ADDR
// end ;
73792: LD_VAR 0 3
73796: RET
// export function JoinUnion ( array , element ) ; begin
73797: LD_INT 0
73799: PPUSH
// result := array union element ;
73800: LD_ADDR_VAR 0 3
73804: PUSH
73805: LD_VAR 0 1
73809: PUSH
73810: LD_VAR 0 2
73814: UNION
73815: ST_TO_ADDR
// end ;
73816: LD_VAR 0 3
73820: RET
// export function GetBehemoths ( side ) ; begin
73821: LD_INT 0
73823: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
73824: LD_ADDR_VAR 0 2
73828: PUSH
73829: LD_INT 22
73831: PUSH
73832: LD_VAR 0 1
73836: PUSH
73837: EMPTY
73838: LIST
73839: LIST
73840: PUSH
73841: LD_INT 31
73843: PUSH
73844: LD_INT 25
73846: PUSH
73847: EMPTY
73848: LIST
73849: LIST
73850: PUSH
73851: EMPTY
73852: LIST
73853: LIST
73854: PPUSH
73855: CALL_OW 69
73859: ST_TO_ADDR
// end ;
73860: LD_VAR 0 2
73864: RET
// export function Shuffle ( array ) ; var i , index ; begin
73865: LD_INT 0
73867: PPUSH
73868: PPUSH
73869: PPUSH
// result := [ ] ;
73870: LD_ADDR_VAR 0 2
73874: PUSH
73875: EMPTY
73876: ST_TO_ADDR
// if not array then
73877: LD_VAR 0 1
73881: NOT
73882: IFFALSE 73886
// exit ;
73884: GO 73985
// Randomize ;
73886: CALL_OW 10
// for i = array downto 1 do
73890: LD_ADDR_VAR 0 3
73894: PUSH
73895: DOUBLE
73896: LD_VAR 0 1
73900: INC
73901: ST_TO_ADDR
73902: LD_INT 1
73904: PUSH
73905: FOR_DOWNTO
73906: IFFALSE 73983
// begin index := rand ( 1 , array ) ;
73908: LD_ADDR_VAR 0 4
73912: PUSH
73913: LD_INT 1
73915: PPUSH
73916: LD_VAR 0 1
73920: PPUSH
73921: CALL_OW 12
73925: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
73926: LD_ADDR_VAR 0 2
73930: PUSH
73931: LD_VAR 0 2
73935: PPUSH
73936: LD_VAR 0 2
73940: PUSH
73941: LD_INT 1
73943: PLUS
73944: PPUSH
73945: LD_VAR 0 1
73949: PUSH
73950: LD_VAR 0 4
73954: ARRAY
73955: PPUSH
73956: CALL_OW 2
73960: ST_TO_ADDR
// array := Delete ( array , index ) ;
73961: LD_ADDR_VAR 0 1
73965: PUSH
73966: LD_VAR 0 1
73970: PPUSH
73971: LD_VAR 0 4
73975: PPUSH
73976: CALL_OW 3
73980: ST_TO_ADDR
// end ;
73981: GO 73905
73983: POP
73984: POP
// end ;
73985: LD_VAR 0 2
73989: RET
// export function GetBaseMaterials ( base ) ; begin
73990: LD_INT 0
73992: PPUSH
// result := [ 0 , 0 , 0 ] ;
73993: LD_ADDR_VAR 0 2
73997: PUSH
73998: LD_INT 0
74000: PUSH
74001: LD_INT 0
74003: PUSH
74004: LD_INT 0
74006: PUSH
74007: EMPTY
74008: LIST
74009: LIST
74010: LIST
74011: ST_TO_ADDR
// if not base then
74012: LD_VAR 0 1
74016: NOT
74017: IFFALSE 74021
// exit ;
74019: GO 74070
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
74021: LD_ADDR_VAR 0 2
74025: PUSH
74026: LD_VAR 0 1
74030: PPUSH
74031: LD_INT 1
74033: PPUSH
74034: CALL_OW 275
74038: PUSH
74039: LD_VAR 0 1
74043: PPUSH
74044: LD_INT 2
74046: PPUSH
74047: CALL_OW 275
74051: PUSH
74052: LD_VAR 0 1
74056: PPUSH
74057: LD_INT 3
74059: PPUSH
74060: CALL_OW 275
74064: PUSH
74065: EMPTY
74066: LIST
74067: LIST
74068: LIST
74069: ST_TO_ADDR
// end ;
74070: LD_VAR 0 2
74074: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
74075: LD_INT 0
74077: PPUSH
74078: PPUSH
// result := array ;
74079: LD_ADDR_VAR 0 3
74083: PUSH
74084: LD_VAR 0 1
74088: ST_TO_ADDR
// if size >= result then
74089: LD_VAR 0 2
74093: PUSH
74094: LD_VAR 0 3
74098: GREATEREQUAL
74099: IFFALSE 74103
// exit ;
74101: GO 74153
// if size then
74103: LD_VAR 0 2
74107: IFFALSE 74153
// for i := array downto size do
74109: LD_ADDR_VAR 0 4
74113: PUSH
74114: DOUBLE
74115: LD_VAR 0 1
74119: INC
74120: ST_TO_ADDR
74121: LD_VAR 0 2
74125: PUSH
74126: FOR_DOWNTO
74127: IFFALSE 74151
// result := Delete ( result , result ) ;
74129: LD_ADDR_VAR 0 3
74133: PUSH
74134: LD_VAR 0 3
74138: PPUSH
74139: LD_VAR 0 3
74143: PPUSH
74144: CALL_OW 3
74148: ST_TO_ADDR
74149: GO 74126
74151: POP
74152: POP
// end ;
74153: LD_VAR 0 3
74157: RET
// export function ComExit ( unit ) ; var tmp ; begin
74158: LD_INT 0
74160: PPUSH
74161: PPUSH
// if not IsInUnit ( unit ) then
74162: LD_VAR 0 1
74166: PPUSH
74167: CALL_OW 310
74171: NOT
74172: IFFALSE 74176
// exit ;
74174: GO 74236
// tmp := IsInUnit ( unit ) ;
74176: LD_ADDR_VAR 0 3
74180: PUSH
74181: LD_VAR 0 1
74185: PPUSH
74186: CALL_OW 310
74190: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
74191: LD_VAR 0 3
74195: PPUSH
74196: CALL_OW 247
74200: PUSH
74201: LD_INT 2
74203: EQUAL
74204: IFFALSE 74217
// ComExitVehicle ( unit ) else
74206: LD_VAR 0 1
74210: PPUSH
74211: CALL_OW 121
74215: GO 74226
// ComExitBuilding ( unit ) ;
74217: LD_VAR 0 1
74221: PPUSH
74222: CALL_OW 122
// result := tmp ;
74226: LD_ADDR_VAR 0 2
74230: PUSH
74231: LD_VAR 0 3
74235: ST_TO_ADDR
// end ;
74236: LD_VAR 0 2
74240: RET
// export function ComExitAll ( units ) ; var i ; begin
74241: LD_INT 0
74243: PPUSH
74244: PPUSH
// if not units then
74245: LD_VAR 0 1
74249: NOT
74250: IFFALSE 74254
// exit ;
74252: GO 74280
// for i in units do
74254: LD_ADDR_VAR 0 3
74258: PUSH
74259: LD_VAR 0 1
74263: PUSH
74264: FOR_IN
74265: IFFALSE 74278
// ComExit ( i ) ;
74267: LD_VAR 0 3
74271: PPUSH
74272: CALL 74158 0 1
74276: GO 74264
74278: POP
74279: POP
// end ;
74280: LD_VAR 0 2
74284: RET
// export function ResetHc ; begin
74285: LD_INT 0
74287: PPUSH
// InitHc ;
74288: CALL_OW 19
// hc_importance := 0 ;
74292: LD_ADDR_OWVAR 32
74296: PUSH
74297: LD_INT 0
74299: ST_TO_ADDR
// end ;
74300: LD_VAR 0 1
74304: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
74305: LD_INT 0
74307: PPUSH
74308: PPUSH
74309: PPUSH
// _x := ( x1 + x2 ) div 2 ;
74310: LD_ADDR_VAR 0 6
74314: PUSH
74315: LD_VAR 0 1
74319: PUSH
74320: LD_VAR 0 3
74324: PLUS
74325: PUSH
74326: LD_INT 2
74328: DIV
74329: ST_TO_ADDR
// if _x < 0 then
74330: LD_VAR 0 6
74334: PUSH
74335: LD_INT 0
74337: LESS
74338: IFFALSE 74355
// _x := _x * - 1 ;
74340: LD_ADDR_VAR 0 6
74344: PUSH
74345: LD_VAR 0 6
74349: PUSH
74350: LD_INT 1
74352: NEG
74353: MUL
74354: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
74355: LD_ADDR_VAR 0 7
74359: PUSH
74360: LD_VAR 0 2
74364: PUSH
74365: LD_VAR 0 4
74369: PLUS
74370: PUSH
74371: LD_INT 2
74373: DIV
74374: ST_TO_ADDR
// if _y < 0 then
74375: LD_VAR 0 7
74379: PUSH
74380: LD_INT 0
74382: LESS
74383: IFFALSE 74400
// _y := _y * - 1 ;
74385: LD_ADDR_VAR 0 7
74389: PUSH
74390: LD_VAR 0 7
74394: PUSH
74395: LD_INT 1
74397: NEG
74398: MUL
74399: ST_TO_ADDR
// result := [ _x , _y ] ;
74400: LD_ADDR_VAR 0 5
74404: PUSH
74405: LD_VAR 0 6
74409: PUSH
74410: LD_VAR 0 7
74414: PUSH
74415: EMPTY
74416: LIST
74417: LIST
74418: ST_TO_ADDR
// end ;
74419: LD_VAR 0 5
74423: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
74424: LD_INT 0
74426: PPUSH
74427: PPUSH
74428: PPUSH
74429: PPUSH
// task := GetTaskList ( unit ) ;
74430: LD_ADDR_VAR 0 7
74434: PUSH
74435: LD_VAR 0 1
74439: PPUSH
74440: CALL_OW 437
74444: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
74445: LD_VAR 0 7
74449: NOT
74450: PUSH
74451: LD_VAR 0 1
74455: PPUSH
74456: LD_VAR 0 2
74460: PPUSH
74461: CALL_OW 308
74465: NOT
74466: AND
74467: IFFALSE 74471
// exit ;
74469: GO 74589
// if IsInArea ( unit , area ) then
74471: LD_VAR 0 1
74475: PPUSH
74476: LD_VAR 0 2
74480: PPUSH
74481: CALL_OW 308
74485: IFFALSE 74503
// begin ComMoveToArea ( unit , goAway ) ;
74487: LD_VAR 0 1
74491: PPUSH
74492: LD_VAR 0 3
74496: PPUSH
74497: CALL_OW 113
// exit ;
74501: GO 74589
// end ; if task [ 1 ] [ 1 ] <> M then
74503: LD_VAR 0 7
74507: PUSH
74508: LD_INT 1
74510: ARRAY
74511: PUSH
74512: LD_INT 1
74514: ARRAY
74515: PUSH
74516: LD_STRING M
74518: NONEQUAL
74519: IFFALSE 74523
// exit ;
74521: GO 74589
// x := task [ 1 ] [ 2 ] ;
74523: LD_ADDR_VAR 0 5
74527: PUSH
74528: LD_VAR 0 7
74532: PUSH
74533: LD_INT 1
74535: ARRAY
74536: PUSH
74537: LD_INT 2
74539: ARRAY
74540: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
74541: LD_ADDR_VAR 0 6
74545: PUSH
74546: LD_VAR 0 7
74550: PUSH
74551: LD_INT 1
74553: ARRAY
74554: PUSH
74555: LD_INT 3
74557: ARRAY
74558: ST_TO_ADDR
// if InArea ( x , y , area ) then
74559: LD_VAR 0 5
74563: PPUSH
74564: LD_VAR 0 6
74568: PPUSH
74569: LD_VAR 0 2
74573: PPUSH
74574: CALL_OW 309
74578: IFFALSE 74589
// ComStop ( unit ) ;
74580: LD_VAR 0 1
74584: PPUSH
74585: CALL_OW 141
// end ;
74589: LD_VAR 0 4
74593: RET
// export function Abs ( value ) ; begin
74594: LD_INT 0
74596: PPUSH
// result := value ;
74597: LD_ADDR_VAR 0 2
74601: PUSH
74602: LD_VAR 0 1
74606: ST_TO_ADDR
// if value < 0 then
74607: LD_VAR 0 1
74611: PUSH
74612: LD_INT 0
74614: LESS
74615: IFFALSE 74632
// result := value * - 1 ;
74617: LD_ADDR_VAR 0 2
74621: PUSH
74622: LD_VAR 0 1
74626: PUSH
74627: LD_INT 1
74629: NEG
74630: MUL
74631: ST_TO_ADDR
// end ;
74632: LD_VAR 0 2
74636: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
74637: LD_INT 0
74639: PPUSH
74640: PPUSH
74641: PPUSH
74642: PPUSH
74643: PPUSH
74644: PPUSH
74645: PPUSH
74646: PPUSH
// if not unit or not building then
74647: LD_VAR 0 1
74651: NOT
74652: PUSH
74653: LD_VAR 0 2
74657: NOT
74658: OR
74659: IFFALSE 74663
// exit ;
74661: GO 74889
// x := GetX ( building ) ;
74663: LD_ADDR_VAR 0 4
74667: PUSH
74668: LD_VAR 0 2
74672: PPUSH
74673: CALL_OW 250
74677: ST_TO_ADDR
// y := GetY ( building ) ;
74678: LD_ADDR_VAR 0 6
74682: PUSH
74683: LD_VAR 0 2
74687: PPUSH
74688: CALL_OW 251
74692: ST_TO_ADDR
// d := GetDir ( building ) ;
74693: LD_ADDR_VAR 0 8
74697: PUSH
74698: LD_VAR 0 2
74702: PPUSH
74703: CALL_OW 254
74707: ST_TO_ADDR
// r := 4 ;
74708: LD_ADDR_VAR 0 9
74712: PUSH
74713: LD_INT 4
74715: ST_TO_ADDR
// for i := 1 to 5 do
74716: LD_ADDR_VAR 0 10
74720: PUSH
74721: DOUBLE
74722: LD_INT 1
74724: DEC
74725: ST_TO_ADDR
74726: LD_INT 5
74728: PUSH
74729: FOR_TO
74730: IFFALSE 74887
// begin _x := ShiftX ( x , d , r + i ) ;
74732: LD_ADDR_VAR 0 5
74736: PUSH
74737: LD_VAR 0 4
74741: PPUSH
74742: LD_VAR 0 8
74746: PPUSH
74747: LD_VAR 0 9
74751: PUSH
74752: LD_VAR 0 10
74756: PLUS
74757: PPUSH
74758: CALL_OW 272
74762: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
74763: LD_ADDR_VAR 0 7
74767: PUSH
74768: LD_VAR 0 6
74772: PPUSH
74773: LD_VAR 0 8
74777: PPUSH
74778: LD_VAR 0 9
74782: PUSH
74783: LD_VAR 0 10
74787: PLUS
74788: PPUSH
74789: CALL_OW 273
74793: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
74794: LD_VAR 0 5
74798: PPUSH
74799: LD_VAR 0 7
74803: PPUSH
74804: CALL_OW 488
74808: PUSH
74809: LD_VAR 0 5
74813: PPUSH
74814: LD_VAR 0 7
74818: PPUSH
74819: CALL_OW 428
74823: PPUSH
74824: CALL_OW 247
74828: PUSH
74829: LD_INT 3
74831: PUSH
74832: LD_INT 2
74834: PUSH
74835: EMPTY
74836: LIST
74837: LIST
74838: IN
74839: NOT
74840: AND
74841: IFFALSE 74885
// begin ComMoveXY ( unit , _x , _y ) ;
74843: LD_VAR 0 1
74847: PPUSH
74848: LD_VAR 0 5
74852: PPUSH
74853: LD_VAR 0 7
74857: PPUSH
74858: CALL_OW 111
// result := [ _x , _y ] ;
74862: LD_ADDR_VAR 0 3
74866: PUSH
74867: LD_VAR 0 5
74871: PUSH
74872: LD_VAR 0 7
74876: PUSH
74877: EMPTY
74878: LIST
74879: LIST
74880: ST_TO_ADDR
// exit ;
74881: POP
74882: POP
74883: GO 74889
// end ; end ;
74885: GO 74729
74887: POP
74888: POP
// end ;
74889: LD_VAR 0 3
74893: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
74894: LD_INT 0
74896: PPUSH
74897: PPUSH
74898: PPUSH
// result := 0 ;
74899: LD_ADDR_VAR 0 3
74903: PUSH
74904: LD_INT 0
74906: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
74907: LD_VAR 0 1
74911: PUSH
74912: LD_INT 0
74914: LESS
74915: PUSH
74916: LD_VAR 0 1
74920: PUSH
74921: LD_INT 8
74923: GREATER
74924: OR
74925: PUSH
74926: LD_VAR 0 2
74930: PUSH
74931: LD_INT 0
74933: LESS
74934: OR
74935: PUSH
74936: LD_VAR 0 2
74940: PUSH
74941: LD_INT 8
74943: GREATER
74944: OR
74945: IFFALSE 74949
// exit ;
74947: GO 75024
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
74949: LD_ADDR_VAR 0 4
74953: PUSH
74954: LD_INT 22
74956: PUSH
74957: LD_VAR 0 2
74961: PUSH
74962: EMPTY
74963: LIST
74964: LIST
74965: PPUSH
74966: CALL_OW 69
74970: PUSH
74971: FOR_IN
74972: IFFALSE 75022
// begin un := UnitShoot ( i ) ;
74974: LD_ADDR_VAR 0 5
74978: PUSH
74979: LD_VAR 0 4
74983: PPUSH
74984: CALL_OW 504
74988: ST_TO_ADDR
// if GetSide ( un ) = side1 then
74989: LD_VAR 0 5
74993: PPUSH
74994: CALL_OW 255
74998: PUSH
74999: LD_VAR 0 1
75003: EQUAL
75004: IFFALSE 75020
// begin result := un ;
75006: LD_ADDR_VAR 0 3
75010: PUSH
75011: LD_VAR 0 5
75015: ST_TO_ADDR
// exit ;
75016: POP
75017: POP
75018: GO 75024
// end ; end ;
75020: GO 74971
75022: POP
75023: POP
// end ;
75024: LD_VAR 0 3
75028: RET
// export function GetCargoBay ( units ) ; begin
75029: LD_INT 0
75031: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
75032: LD_ADDR_VAR 0 2
75036: PUSH
75037: LD_VAR 0 1
75041: PPUSH
75042: LD_INT 2
75044: PUSH
75045: LD_INT 34
75047: PUSH
75048: LD_INT 12
75050: PUSH
75051: EMPTY
75052: LIST
75053: LIST
75054: PUSH
75055: LD_INT 34
75057: PUSH
75058: LD_INT 51
75060: PUSH
75061: EMPTY
75062: LIST
75063: LIST
75064: PUSH
75065: LD_INT 34
75067: PUSH
75068: LD_INT 32
75070: PUSH
75071: EMPTY
75072: LIST
75073: LIST
75074: PUSH
75075: LD_INT 34
75077: PUSH
75078: LD_INT 89
75080: PUSH
75081: EMPTY
75082: LIST
75083: LIST
75084: PUSH
75085: EMPTY
75086: LIST
75087: LIST
75088: LIST
75089: LIST
75090: LIST
75091: PPUSH
75092: CALL_OW 72
75096: ST_TO_ADDR
// end ;
75097: LD_VAR 0 2
75101: RET
// export function Negate ( value ) ; begin
75102: LD_INT 0
75104: PPUSH
// result := not value ;
75105: LD_ADDR_VAR 0 2
75109: PUSH
75110: LD_VAR 0 1
75114: NOT
75115: ST_TO_ADDR
// end ;
75116: LD_VAR 0 2
75120: RET
// export function Inc ( value ) ; begin
75121: LD_INT 0
75123: PPUSH
// result := value + 1 ;
75124: LD_ADDR_VAR 0 2
75128: PUSH
75129: LD_VAR 0 1
75133: PUSH
75134: LD_INT 1
75136: PLUS
75137: ST_TO_ADDR
// end ;
75138: LD_VAR 0 2
75142: RET
// export function Dec ( value ) ; begin
75143: LD_INT 0
75145: PPUSH
// result := value - 1 ;
75146: LD_ADDR_VAR 0 2
75150: PUSH
75151: LD_VAR 0 1
75155: PUSH
75156: LD_INT 1
75158: MINUS
75159: ST_TO_ADDR
// end ;
75160: LD_VAR 0 2
75164: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
75165: LD_INT 0
75167: PPUSH
75168: PPUSH
75169: PPUSH
75170: PPUSH
75171: PPUSH
75172: PPUSH
75173: PPUSH
75174: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
75175: LD_VAR 0 1
75179: PPUSH
75180: LD_VAR 0 2
75184: PPUSH
75185: CALL_OW 488
75189: NOT
75190: PUSH
75191: LD_VAR 0 3
75195: PPUSH
75196: LD_VAR 0 4
75200: PPUSH
75201: CALL_OW 488
75205: NOT
75206: OR
75207: IFFALSE 75220
// begin result := - 1 ;
75209: LD_ADDR_VAR 0 5
75213: PUSH
75214: LD_INT 1
75216: NEG
75217: ST_TO_ADDR
// exit ;
75218: GO 75455
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
75220: LD_ADDR_VAR 0 12
75224: PUSH
75225: LD_VAR 0 1
75229: PPUSH
75230: LD_VAR 0 2
75234: PPUSH
75235: LD_VAR 0 3
75239: PPUSH
75240: LD_VAR 0 4
75244: PPUSH
75245: CALL 74305 0 4
75249: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
75250: LD_ADDR_VAR 0 11
75254: PUSH
75255: LD_VAR 0 1
75259: PPUSH
75260: LD_VAR 0 2
75264: PPUSH
75265: LD_VAR 0 12
75269: PUSH
75270: LD_INT 1
75272: ARRAY
75273: PPUSH
75274: LD_VAR 0 12
75278: PUSH
75279: LD_INT 2
75281: ARRAY
75282: PPUSH
75283: CALL_OW 298
75287: ST_TO_ADDR
// distance := 9999 ;
75288: LD_ADDR_VAR 0 10
75292: PUSH
75293: LD_INT 9999
75295: ST_TO_ADDR
// for i := 0 to 5 do
75296: LD_ADDR_VAR 0 6
75300: PUSH
75301: DOUBLE
75302: LD_INT 0
75304: DEC
75305: ST_TO_ADDR
75306: LD_INT 5
75308: PUSH
75309: FOR_TO
75310: IFFALSE 75453
// begin _x := ShiftX ( x1 , i , centerDist ) ;
75312: LD_ADDR_VAR 0 7
75316: PUSH
75317: LD_VAR 0 1
75321: PPUSH
75322: LD_VAR 0 6
75326: PPUSH
75327: LD_VAR 0 11
75331: PPUSH
75332: CALL_OW 272
75336: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
75337: LD_ADDR_VAR 0 8
75341: PUSH
75342: LD_VAR 0 2
75346: PPUSH
75347: LD_VAR 0 6
75351: PPUSH
75352: LD_VAR 0 11
75356: PPUSH
75357: CALL_OW 273
75361: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
75362: LD_VAR 0 7
75366: PPUSH
75367: LD_VAR 0 8
75371: PPUSH
75372: CALL_OW 488
75376: NOT
75377: IFFALSE 75381
// continue ;
75379: GO 75309
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
75381: LD_ADDR_VAR 0 9
75385: PUSH
75386: LD_VAR 0 12
75390: PUSH
75391: LD_INT 1
75393: ARRAY
75394: PPUSH
75395: LD_VAR 0 12
75399: PUSH
75400: LD_INT 2
75402: ARRAY
75403: PPUSH
75404: LD_VAR 0 7
75408: PPUSH
75409: LD_VAR 0 8
75413: PPUSH
75414: CALL_OW 298
75418: ST_TO_ADDR
// if tmp < distance then
75419: LD_VAR 0 9
75423: PUSH
75424: LD_VAR 0 10
75428: LESS
75429: IFFALSE 75451
// begin result := i ;
75431: LD_ADDR_VAR 0 5
75435: PUSH
75436: LD_VAR 0 6
75440: ST_TO_ADDR
// distance := tmp ;
75441: LD_ADDR_VAR 0 10
75445: PUSH
75446: LD_VAR 0 9
75450: ST_TO_ADDR
// end ; end ;
75451: GO 75309
75453: POP
75454: POP
// end ;
75455: LD_VAR 0 5
75459: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75460: LD_INT 0
75462: PPUSH
75463: PPUSH
// if not driver or not IsInUnit ( driver ) then
75464: LD_VAR 0 1
75468: NOT
75469: PUSH
75470: LD_VAR 0 1
75474: PPUSH
75475: CALL_OW 310
75479: NOT
75480: OR
75481: IFFALSE 75485
// exit ;
75483: GO 75575
// vehicle := IsInUnit ( driver ) ;
75485: LD_ADDR_VAR 0 3
75489: PUSH
75490: LD_VAR 0 1
75494: PPUSH
75495: CALL_OW 310
75499: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75500: LD_VAR 0 1
75504: PPUSH
75505: LD_STRING \
75507: PUSH
75508: LD_INT 0
75510: PUSH
75511: LD_INT 0
75513: PUSH
75514: LD_INT 0
75516: PUSH
75517: LD_INT 0
75519: PUSH
75520: LD_INT 0
75522: PUSH
75523: LD_INT 0
75525: PUSH
75526: EMPTY
75527: LIST
75528: LIST
75529: LIST
75530: LIST
75531: LIST
75532: LIST
75533: LIST
75534: PUSH
75535: LD_STRING E
75537: PUSH
75538: LD_INT 0
75540: PUSH
75541: LD_INT 0
75543: PUSH
75544: LD_VAR 0 3
75548: PUSH
75549: LD_INT 0
75551: PUSH
75552: LD_INT 0
75554: PUSH
75555: LD_INT 0
75557: PUSH
75558: EMPTY
75559: LIST
75560: LIST
75561: LIST
75562: LIST
75563: LIST
75564: LIST
75565: LIST
75566: PUSH
75567: EMPTY
75568: LIST
75569: LIST
75570: PPUSH
75571: CALL_OW 446
// end ;
75575: LD_VAR 0 2
75579: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75580: LD_INT 0
75582: PPUSH
75583: PPUSH
// if not driver or not IsInUnit ( driver ) then
75584: LD_VAR 0 1
75588: NOT
75589: PUSH
75590: LD_VAR 0 1
75594: PPUSH
75595: CALL_OW 310
75599: NOT
75600: OR
75601: IFFALSE 75605
// exit ;
75603: GO 75695
// vehicle := IsInUnit ( driver ) ;
75605: LD_ADDR_VAR 0 3
75609: PUSH
75610: LD_VAR 0 1
75614: PPUSH
75615: CALL_OW 310
75619: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75620: LD_VAR 0 1
75624: PPUSH
75625: LD_STRING \
75627: PUSH
75628: LD_INT 0
75630: PUSH
75631: LD_INT 0
75633: PUSH
75634: LD_INT 0
75636: PUSH
75637: LD_INT 0
75639: PUSH
75640: LD_INT 0
75642: PUSH
75643: LD_INT 0
75645: PUSH
75646: EMPTY
75647: LIST
75648: LIST
75649: LIST
75650: LIST
75651: LIST
75652: LIST
75653: LIST
75654: PUSH
75655: LD_STRING E
75657: PUSH
75658: LD_INT 0
75660: PUSH
75661: LD_INT 0
75663: PUSH
75664: LD_VAR 0 3
75668: PUSH
75669: LD_INT 0
75671: PUSH
75672: LD_INT 0
75674: PUSH
75675: LD_INT 0
75677: PUSH
75678: EMPTY
75679: LIST
75680: LIST
75681: LIST
75682: LIST
75683: LIST
75684: LIST
75685: LIST
75686: PUSH
75687: EMPTY
75688: LIST
75689: LIST
75690: PPUSH
75691: CALL_OW 447
// end ;
75695: LD_VAR 0 2
75699: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
75700: LD_INT 0
75702: PPUSH
75703: PPUSH
75704: PPUSH
// tmp := [ ] ;
75705: LD_ADDR_VAR 0 5
75709: PUSH
75710: EMPTY
75711: ST_TO_ADDR
// for i in units do
75712: LD_ADDR_VAR 0 4
75716: PUSH
75717: LD_VAR 0 1
75721: PUSH
75722: FOR_IN
75723: IFFALSE 75761
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
75725: LD_ADDR_VAR 0 5
75729: PUSH
75730: LD_VAR 0 5
75734: PPUSH
75735: LD_VAR 0 5
75739: PUSH
75740: LD_INT 1
75742: PLUS
75743: PPUSH
75744: LD_VAR 0 4
75748: PPUSH
75749: CALL_OW 256
75753: PPUSH
75754: CALL_OW 2
75758: ST_TO_ADDR
75759: GO 75722
75761: POP
75762: POP
// if not tmp then
75763: LD_VAR 0 5
75767: NOT
75768: IFFALSE 75772
// exit ;
75770: GO 75820
// if asc then
75772: LD_VAR 0 2
75776: IFFALSE 75800
// result := SortListByListAsc ( units , tmp ) else
75778: LD_ADDR_VAR 0 3
75782: PUSH
75783: LD_VAR 0 1
75787: PPUSH
75788: LD_VAR 0 5
75792: PPUSH
75793: CALL_OW 76
75797: ST_TO_ADDR
75798: GO 75820
// result := SortListByListDesc ( units , tmp ) ;
75800: LD_ADDR_VAR 0 3
75804: PUSH
75805: LD_VAR 0 1
75809: PPUSH
75810: LD_VAR 0 5
75814: PPUSH
75815: CALL_OW 77
75819: ST_TO_ADDR
// end ;
75820: LD_VAR 0 3
75824: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
75825: LD_INT 0
75827: PPUSH
75828: PPUSH
// task := GetTaskList ( mech ) ;
75829: LD_ADDR_VAR 0 4
75833: PUSH
75834: LD_VAR 0 1
75838: PPUSH
75839: CALL_OW 437
75843: ST_TO_ADDR
// if not task then
75844: LD_VAR 0 4
75848: NOT
75849: IFFALSE 75853
// exit ;
75851: GO 75895
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
75853: LD_ADDR_VAR 0 3
75857: PUSH
75858: LD_VAR 0 4
75862: PUSH
75863: LD_INT 1
75865: ARRAY
75866: PUSH
75867: LD_INT 1
75869: ARRAY
75870: PUSH
75871: LD_STRING r
75873: EQUAL
75874: PUSH
75875: LD_VAR 0 4
75879: PUSH
75880: LD_INT 1
75882: ARRAY
75883: PUSH
75884: LD_INT 4
75886: ARRAY
75887: PUSH
75888: LD_VAR 0 2
75892: EQUAL
75893: AND
75894: ST_TO_ADDR
// end ;
75895: LD_VAR 0 3
75899: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
75900: LD_INT 0
75902: PPUSH
// SetDir ( unit , d ) ;
75903: LD_VAR 0 1
75907: PPUSH
75908: LD_VAR 0 4
75912: PPUSH
75913: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
75917: LD_VAR 0 1
75921: PPUSH
75922: LD_VAR 0 2
75926: PPUSH
75927: LD_VAR 0 3
75931: PPUSH
75932: LD_VAR 0 5
75936: PPUSH
75937: CALL_OW 48
// end ;
75941: LD_VAR 0 6
75945: RET
// export function ToNaturalNumber ( number ) ; begin
75946: LD_INT 0
75948: PPUSH
// result := number div 1 ;
75949: LD_ADDR_VAR 0 2
75953: PUSH
75954: LD_VAR 0 1
75958: PUSH
75959: LD_INT 1
75961: DIV
75962: ST_TO_ADDR
// if number < 0 then
75963: LD_VAR 0 1
75967: PUSH
75968: LD_INT 0
75970: LESS
75971: IFFALSE 75981
// result := 0 ;
75973: LD_ADDR_VAR 0 2
75977: PUSH
75978: LD_INT 0
75980: ST_TO_ADDR
// end ;
75981: LD_VAR 0 2
75985: RET
// export function SortByClass ( units , class ) ; var un ; begin
75986: LD_INT 0
75988: PPUSH
75989: PPUSH
// if not units or not class then
75990: LD_VAR 0 1
75994: NOT
75995: PUSH
75996: LD_VAR 0 2
76000: NOT
76001: OR
76002: IFFALSE 76006
// exit ;
76004: GO 76101
// result := [ ] ;
76006: LD_ADDR_VAR 0 3
76010: PUSH
76011: EMPTY
76012: ST_TO_ADDR
// for un in units do
76013: LD_ADDR_VAR 0 4
76017: PUSH
76018: LD_VAR 0 1
76022: PUSH
76023: FOR_IN
76024: IFFALSE 76099
// if GetClass ( un ) = class then
76026: LD_VAR 0 4
76030: PPUSH
76031: CALL_OW 257
76035: PUSH
76036: LD_VAR 0 2
76040: EQUAL
76041: IFFALSE 76068
// result := Insert ( result , 1 , un ) else
76043: LD_ADDR_VAR 0 3
76047: PUSH
76048: LD_VAR 0 3
76052: PPUSH
76053: LD_INT 1
76055: PPUSH
76056: LD_VAR 0 4
76060: PPUSH
76061: CALL_OW 2
76065: ST_TO_ADDR
76066: GO 76097
// result := Replace ( result , result + 1 , un ) ;
76068: LD_ADDR_VAR 0 3
76072: PUSH
76073: LD_VAR 0 3
76077: PPUSH
76078: LD_VAR 0 3
76082: PUSH
76083: LD_INT 1
76085: PLUS
76086: PPUSH
76087: LD_VAR 0 4
76091: PPUSH
76092: CALL_OW 1
76096: ST_TO_ADDR
76097: GO 76023
76099: POP
76100: POP
// end ;
76101: LD_VAR 0 3
76105: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
76106: LD_INT 0
76108: PPUSH
76109: PPUSH
76110: PPUSH
76111: PPUSH
76112: PPUSH
76113: PPUSH
76114: PPUSH
// result := [ ] ;
76115: LD_ADDR_VAR 0 4
76119: PUSH
76120: EMPTY
76121: ST_TO_ADDR
// if x - r < 0 then
76122: LD_VAR 0 1
76126: PUSH
76127: LD_VAR 0 3
76131: MINUS
76132: PUSH
76133: LD_INT 0
76135: LESS
76136: IFFALSE 76148
// min_x := 0 else
76138: LD_ADDR_VAR 0 8
76142: PUSH
76143: LD_INT 0
76145: ST_TO_ADDR
76146: GO 76164
// min_x := x - r ;
76148: LD_ADDR_VAR 0 8
76152: PUSH
76153: LD_VAR 0 1
76157: PUSH
76158: LD_VAR 0 3
76162: MINUS
76163: ST_TO_ADDR
// if y - r < 0 then
76164: LD_VAR 0 2
76168: PUSH
76169: LD_VAR 0 3
76173: MINUS
76174: PUSH
76175: LD_INT 0
76177: LESS
76178: IFFALSE 76190
// min_y := 0 else
76180: LD_ADDR_VAR 0 7
76184: PUSH
76185: LD_INT 0
76187: ST_TO_ADDR
76188: GO 76206
// min_y := y - r ;
76190: LD_ADDR_VAR 0 7
76194: PUSH
76195: LD_VAR 0 2
76199: PUSH
76200: LD_VAR 0 3
76204: MINUS
76205: ST_TO_ADDR
// max_x := x + r ;
76206: LD_ADDR_VAR 0 9
76210: PUSH
76211: LD_VAR 0 1
76215: PUSH
76216: LD_VAR 0 3
76220: PLUS
76221: ST_TO_ADDR
// max_y := y + r ;
76222: LD_ADDR_VAR 0 10
76226: PUSH
76227: LD_VAR 0 2
76231: PUSH
76232: LD_VAR 0 3
76236: PLUS
76237: ST_TO_ADDR
// for _x = min_x to max_x do
76238: LD_ADDR_VAR 0 5
76242: PUSH
76243: DOUBLE
76244: LD_VAR 0 8
76248: DEC
76249: ST_TO_ADDR
76250: LD_VAR 0 9
76254: PUSH
76255: FOR_TO
76256: IFFALSE 76357
// for _y = min_y to max_y do
76258: LD_ADDR_VAR 0 6
76262: PUSH
76263: DOUBLE
76264: LD_VAR 0 7
76268: DEC
76269: ST_TO_ADDR
76270: LD_VAR 0 10
76274: PUSH
76275: FOR_TO
76276: IFFALSE 76353
// begin if not ValidHex ( _x , _y ) then
76278: LD_VAR 0 5
76282: PPUSH
76283: LD_VAR 0 6
76287: PPUSH
76288: CALL_OW 488
76292: NOT
76293: IFFALSE 76297
// continue ;
76295: GO 76275
// if GetResourceTypeXY ( _x , _y ) then
76297: LD_VAR 0 5
76301: PPUSH
76302: LD_VAR 0 6
76306: PPUSH
76307: CALL_OW 283
76311: IFFALSE 76351
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
76313: LD_ADDR_VAR 0 4
76317: PUSH
76318: LD_VAR 0 4
76322: PPUSH
76323: LD_VAR 0 4
76327: PUSH
76328: LD_INT 1
76330: PLUS
76331: PPUSH
76332: LD_VAR 0 5
76336: PUSH
76337: LD_VAR 0 6
76341: PUSH
76342: EMPTY
76343: LIST
76344: LIST
76345: PPUSH
76346: CALL_OW 1
76350: ST_TO_ADDR
// end ;
76351: GO 76275
76353: POP
76354: POP
76355: GO 76255
76357: POP
76358: POP
// end ;
76359: LD_VAR 0 4
76363: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
76364: LD_INT 0
76366: PPUSH
76367: PPUSH
76368: PPUSH
76369: PPUSH
76370: PPUSH
76371: PPUSH
76372: PPUSH
76373: PPUSH
// if not units then
76374: LD_VAR 0 1
76378: NOT
76379: IFFALSE 76383
// exit ;
76381: GO 76907
// result := UnitFilter ( units , [ f_ok ] ) ;
76383: LD_ADDR_VAR 0 3
76387: PUSH
76388: LD_VAR 0 1
76392: PPUSH
76393: LD_INT 50
76395: PUSH
76396: EMPTY
76397: LIST
76398: PPUSH
76399: CALL_OW 72
76403: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
76404: LD_ADDR_VAR 0 8
76408: PUSH
76409: LD_VAR 0 1
76413: PUSH
76414: LD_INT 1
76416: ARRAY
76417: PPUSH
76418: CALL_OW 255
76422: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
76423: LD_ADDR_VAR 0 10
76427: PUSH
76428: LD_INT 29
76430: PUSH
76431: LD_INT 91
76433: PUSH
76434: LD_INT 49
76436: PUSH
76437: EMPTY
76438: LIST
76439: LIST
76440: LIST
76441: ST_TO_ADDR
// if not result then
76442: LD_VAR 0 3
76446: NOT
76447: IFFALSE 76451
// exit ;
76449: GO 76907
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
76451: LD_ADDR_VAR 0 5
76455: PUSH
76456: LD_INT 81
76458: PUSH
76459: LD_VAR 0 8
76463: PUSH
76464: EMPTY
76465: LIST
76466: LIST
76467: PPUSH
76468: CALL_OW 69
76472: ST_TO_ADDR
// for i in result do
76473: LD_ADDR_VAR 0 4
76477: PUSH
76478: LD_VAR 0 3
76482: PUSH
76483: FOR_IN
76484: IFFALSE 76905
// begin tag := GetTag ( i ) + 1 ;
76486: LD_ADDR_VAR 0 9
76490: PUSH
76491: LD_VAR 0 4
76495: PPUSH
76496: CALL_OW 110
76500: PUSH
76501: LD_INT 1
76503: PLUS
76504: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
76505: LD_ADDR_VAR 0 7
76509: PUSH
76510: LD_VAR 0 4
76514: PPUSH
76515: CALL_OW 250
76519: PPUSH
76520: LD_VAR 0 4
76524: PPUSH
76525: CALL_OW 251
76529: PPUSH
76530: LD_INT 6
76532: PPUSH
76533: CALL 76106 0 3
76537: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
76538: LD_VAR 0 4
76542: PPUSH
76543: CALL_OW 247
76547: PUSH
76548: LD_INT 2
76550: EQUAL
76551: PUSH
76552: LD_VAR 0 7
76556: AND
76557: PUSH
76558: LD_VAR 0 4
76562: PPUSH
76563: CALL_OW 264
76567: PUSH
76568: LD_VAR 0 10
76572: IN
76573: NOT
76574: AND
76575: IFFALSE 76614
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
76577: LD_VAR 0 4
76581: PPUSH
76582: LD_VAR 0 7
76586: PUSH
76587: LD_INT 1
76589: ARRAY
76590: PUSH
76591: LD_INT 1
76593: ARRAY
76594: PPUSH
76595: LD_VAR 0 7
76599: PUSH
76600: LD_INT 1
76602: ARRAY
76603: PUSH
76604: LD_INT 2
76606: ARRAY
76607: PPUSH
76608: CALL_OW 116
76612: GO 76903
// if path > tag then
76614: LD_VAR 0 2
76618: PUSH
76619: LD_VAR 0 9
76623: GREATER
76624: IFFALSE 76832
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
76626: LD_ADDR_VAR 0 6
76630: PUSH
76631: LD_VAR 0 5
76635: PPUSH
76636: LD_INT 91
76638: PUSH
76639: LD_VAR 0 4
76643: PUSH
76644: LD_INT 8
76646: PUSH
76647: EMPTY
76648: LIST
76649: LIST
76650: LIST
76651: PPUSH
76652: CALL_OW 72
76656: ST_TO_ADDR
// if nearEnemy then
76657: LD_VAR 0 6
76661: IFFALSE 76730
// begin if GetWeapon ( i ) = ru_time_lapser then
76663: LD_VAR 0 4
76667: PPUSH
76668: CALL_OW 264
76672: PUSH
76673: LD_INT 49
76675: EQUAL
76676: IFFALSE 76704
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
76678: LD_VAR 0 4
76682: PPUSH
76683: LD_VAR 0 6
76687: PPUSH
76688: LD_VAR 0 4
76692: PPUSH
76693: CALL_OW 74
76697: PPUSH
76698: CALL_OW 112
76702: GO 76728
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
76704: LD_VAR 0 4
76708: PPUSH
76709: LD_VAR 0 6
76713: PPUSH
76714: LD_VAR 0 4
76718: PPUSH
76719: CALL_OW 74
76723: PPUSH
76724: CALL 77832 0 2
// end else
76728: GO 76830
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
76730: LD_VAR 0 4
76734: PPUSH
76735: LD_VAR 0 2
76739: PUSH
76740: LD_VAR 0 9
76744: ARRAY
76745: PUSH
76746: LD_INT 1
76748: ARRAY
76749: PPUSH
76750: LD_VAR 0 2
76754: PUSH
76755: LD_VAR 0 9
76759: ARRAY
76760: PUSH
76761: LD_INT 2
76763: ARRAY
76764: PPUSH
76765: CALL_OW 297
76769: PUSH
76770: LD_INT 6
76772: GREATER
76773: IFFALSE 76816
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
76775: LD_VAR 0 4
76779: PPUSH
76780: LD_VAR 0 2
76784: PUSH
76785: LD_VAR 0 9
76789: ARRAY
76790: PUSH
76791: LD_INT 1
76793: ARRAY
76794: PPUSH
76795: LD_VAR 0 2
76799: PUSH
76800: LD_VAR 0 9
76804: ARRAY
76805: PUSH
76806: LD_INT 2
76808: ARRAY
76809: PPUSH
76810: CALL_OW 114
76814: GO 76830
// SetTag ( i , tag ) ;
76816: LD_VAR 0 4
76820: PPUSH
76821: LD_VAR 0 9
76825: PPUSH
76826: CALL_OW 109
// end else
76830: GO 76903
// if enemy then
76832: LD_VAR 0 5
76836: IFFALSE 76903
// begin if GetWeapon ( i ) = ru_time_lapser then
76838: LD_VAR 0 4
76842: PPUSH
76843: CALL_OW 264
76847: PUSH
76848: LD_INT 49
76850: EQUAL
76851: IFFALSE 76879
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
76853: LD_VAR 0 4
76857: PPUSH
76858: LD_VAR 0 5
76862: PPUSH
76863: LD_VAR 0 4
76867: PPUSH
76868: CALL_OW 74
76872: PPUSH
76873: CALL_OW 112
76877: GO 76903
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
76879: LD_VAR 0 4
76883: PPUSH
76884: LD_VAR 0 5
76888: PPUSH
76889: LD_VAR 0 4
76893: PPUSH
76894: CALL_OW 74
76898: PPUSH
76899: CALL 77832 0 2
// end ; end ;
76903: GO 76483
76905: POP
76906: POP
// end ;
76907: LD_VAR 0 3
76911: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
76912: LD_INT 0
76914: PPUSH
76915: PPUSH
76916: PPUSH
// if not unit or IsInUnit ( unit ) then
76917: LD_VAR 0 1
76921: NOT
76922: PUSH
76923: LD_VAR 0 1
76927: PPUSH
76928: CALL_OW 310
76932: OR
76933: IFFALSE 76937
// exit ;
76935: GO 77028
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
76937: LD_ADDR_VAR 0 4
76941: PUSH
76942: LD_VAR 0 1
76946: PPUSH
76947: CALL_OW 250
76951: PPUSH
76952: LD_VAR 0 2
76956: PPUSH
76957: LD_INT 1
76959: PPUSH
76960: CALL_OW 272
76964: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
76965: LD_ADDR_VAR 0 5
76969: PUSH
76970: LD_VAR 0 1
76974: PPUSH
76975: CALL_OW 251
76979: PPUSH
76980: LD_VAR 0 2
76984: PPUSH
76985: LD_INT 1
76987: PPUSH
76988: CALL_OW 273
76992: ST_TO_ADDR
// if ValidHex ( x , y ) then
76993: LD_VAR 0 4
76997: PPUSH
76998: LD_VAR 0 5
77002: PPUSH
77003: CALL_OW 488
77007: IFFALSE 77028
// ComTurnXY ( unit , x , y ) ;
77009: LD_VAR 0 1
77013: PPUSH
77014: LD_VAR 0 4
77018: PPUSH
77019: LD_VAR 0 5
77023: PPUSH
77024: CALL_OW 118
// end ;
77028: LD_VAR 0 3
77032: RET
// export function SeeUnits ( side , units ) ; var i ; begin
77033: LD_INT 0
77035: PPUSH
77036: PPUSH
// result := false ;
77037: LD_ADDR_VAR 0 3
77041: PUSH
77042: LD_INT 0
77044: ST_TO_ADDR
// if not units then
77045: LD_VAR 0 2
77049: NOT
77050: IFFALSE 77054
// exit ;
77052: GO 77099
// for i in units do
77054: LD_ADDR_VAR 0 4
77058: PUSH
77059: LD_VAR 0 2
77063: PUSH
77064: FOR_IN
77065: IFFALSE 77097
// if See ( side , i ) then
77067: LD_VAR 0 1
77071: PPUSH
77072: LD_VAR 0 4
77076: PPUSH
77077: CALL_OW 292
77081: IFFALSE 77095
// begin result := true ;
77083: LD_ADDR_VAR 0 3
77087: PUSH
77088: LD_INT 1
77090: ST_TO_ADDR
// exit ;
77091: POP
77092: POP
77093: GO 77099
// end ;
77095: GO 77064
77097: POP
77098: POP
// end ;
77099: LD_VAR 0 3
77103: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
77104: LD_INT 0
77106: PPUSH
77107: PPUSH
77108: PPUSH
77109: PPUSH
// if not unit or not points then
77110: LD_VAR 0 1
77114: NOT
77115: PUSH
77116: LD_VAR 0 2
77120: NOT
77121: OR
77122: IFFALSE 77126
// exit ;
77124: GO 77216
// dist := 99999 ;
77126: LD_ADDR_VAR 0 5
77130: PUSH
77131: LD_INT 99999
77133: ST_TO_ADDR
// for i in points do
77134: LD_ADDR_VAR 0 4
77138: PUSH
77139: LD_VAR 0 2
77143: PUSH
77144: FOR_IN
77145: IFFALSE 77214
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
77147: LD_ADDR_VAR 0 6
77151: PUSH
77152: LD_VAR 0 1
77156: PPUSH
77157: LD_VAR 0 4
77161: PUSH
77162: LD_INT 1
77164: ARRAY
77165: PPUSH
77166: LD_VAR 0 4
77170: PUSH
77171: LD_INT 2
77173: ARRAY
77174: PPUSH
77175: CALL_OW 297
77179: ST_TO_ADDR
// if tmpDist < dist then
77180: LD_VAR 0 6
77184: PUSH
77185: LD_VAR 0 5
77189: LESS
77190: IFFALSE 77212
// begin result := i ;
77192: LD_ADDR_VAR 0 3
77196: PUSH
77197: LD_VAR 0 4
77201: ST_TO_ADDR
// dist := tmpDist ;
77202: LD_ADDR_VAR 0 5
77206: PUSH
77207: LD_VAR 0 6
77211: ST_TO_ADDR
// end ; end ;
77212: GO 77144
77214: POP
77215: POP
// end ;
77216: LD_VAR 0 3
77220: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
77221: LD_INT 0
77223: PPUSH
// uc_side := side ;
77224: LD_ADDR_OWVAR 20
77228: PUSH
77229: LD_VAR 0 1
77233: ST_TO_ADDR
// uc_nation := 3 ;
77234: LD_ADDR_OWVAR 21
77238: PUSH
77239: LD_INT 3
77241: ST_TO_ADDR
// vc_chassis := 25 ;
77242: LD_ADDR_OWVAR 37
77246: PUSH
77247: LD_INT 25
77249: ST_TO_ADDR
// vc_engine := engine_siberite ;
77250: LD_ADDR_OWVAR 39
77254: PUSH
77255: LD_INT 3
77257: ST_TO_ADDR
// vc_control := control_computer ;
77258: LD_ADDR_OWVAR 38
77262: PUSH
77263: LD_INT 3
77265: ST_TO_ADDR
// vc_weapon := 59 ;
77266: LD_ADDR_OWVAR 40
77270: PUSH
77271: LD_INT 59
77273: ST_TO_ADDR
// result := CreateVehicle ;
77274: LD_ADDR_VAR 0 5
77278: PUSH
77279: CALL_OW 45
77283: ST_TO_ADDR
// SetDir ( result , d ) ;
77284: LD_VAR 0 5
77288: PPUSH
77289: LD_VAR 0 4
77293: PPUSH
77294: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
77298: LD_VAR 0 5
77302: PPUSH
77303: LD_VAR 0 2
77307: PPUSH
77308: LD_VAR 0 3
77312: PPUSH
77313: LD_INT 0
77315: PPUSH
77316: CALL_OW 48
// end ;
77320: LD_VAR 0 5
77324: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
77325: LD_INT 0
77327: PPUSH
77328: PPUSH
77329: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
77330: LD_ADDR_VAR 0 2
77334: PUSH
77335: LD_INT 0
77337: PUSH
77338: LD_INT 0
77340: PUSH
77341: LD_INT 0
77343: PUSH
77344: LD_INT 0
77346: PUSH
77347: EMPTY
77348: LIST
77349: LIST
77350: LIST
77351: LIST
77352: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
77353: LD_VAR 0 1
77357: NOT
77358: PUSH
77359: LD_VAR 0 1
77363: PPUSH
77364: CALL_OW 264
77368: PUSH
77369: LD_INT 12
77371: PUSH
77372: LD_INT 51
77374: PUSH
77375: LD_INT 32
77377: PUSH
77378: LD_INT 89
77380: PUSH
77381: EMPTY
77382: LIST
77383: LIST
77384: LIST
77385: LIST
77386: IN
77387: NOT
77388: OR
77389: IFFALSE 77393
// exit ;
77391: GO 77491
// for i := 1 to 3 do
77393: LD_ADDR_VAR 0 3
77397: PUSH
77398: DOUBLE
77399: LD_INT 1
77401: DEC
77402: ST_TO_ADDR
77403: LD_INT 3
77405: PUSH
77406: FOR_TO
77407: IFFALSE 77489
// begin tmp := GetCargo ( cargo , i ) ;
77409: LD_ADDR_VAR 0 4
77413: PUSH
77414: LD_VAR 0 1
77418: PPUSH
77419: LD_VAR 0 3
77423: PPUSH
77424: CALL_OW 289
77428: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
77429: LD_ADDR_VAR 0 2
77433: PUSH
77434: LD_VAR 0 2
77438: PPUSH
77439: LD_VAR 0 3
77443: PPUSH
77444: LD_VAR 0 4
77448: PPUSH
77449: CALL_OW 1
77453: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
77454: LD_ADDR_VAR 0 2
77458: PUSH
77459: LD_VAR 0 2
77463: PPUSH
77464: LD_INT 4
77466: PPUSH
77467: LD_VAR 0 2
77471: PUSH
77472: LD_INT 4
77474: ARRAY
77475: PUSH
77476: LD_VAR 0 4
77480: PLUS
77481: PPUSH
77482: CALL_OW 1
77486: ST_TO_ADDR
// end ;
77487: GO 77406
77489: POP
77490: POP
// end ;
77491: LD_VAR 0 2
77495: RET
// export function Length ( array ) ; begin
77496: LD_INT 0
77498: PPUSH
// result := array + 0 ;
77499: LD_ADDR_VAR 0 2
77503: PUSH
77504: LD_VAR 0 1
77508: PUSH
77509: LD_INT 0
77511: PLUS
77512: ST_TO_ADDR
// end ;
77513: LD_VAR 0 2
77517: RET
// export function PrepareArray ( array ) ; begin
77518: LD_INT 0
77520: PPUSH
// result := array diff 0 ;
77521: LD_ADDR_VAR 0 2
77525: PUSH
77526: LD_VAR 0 1
77530: PUSH
77531: LD_INT 0
77533: DIFF
77534: ST_TO_ADDR
// if not result [ 1 ] then
77535: LD_VAR 0 2
77539: PUSH
77540: LD_INT 1
77542: ARRAY
77543: NOT
77544: IFFALSE 77564
// result := Delete ( result , 1 ) ;
77546: LD_ADDR_VAR 0 2
77550: PUSH
77551: LD_VAR 0 2
77555: PPUSH
77556: LD_INT 1
77558: PPUSH
77559: CALL_OW 3
77563: ST_TO_ADDR
// end ;
77564: LD_VAR 0 2
77568: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
77569: LD_INT 0
77571: PPUSH
77572: PPUSH
77573: PPUSH
77574: PPUSH
// sibRocketRange := 25 ;
77575: LD_ADDR_VAR 0 6
77579: PUSH
77580: LD_INT 25
77582: ST_TO_ADDR
// result := false ;
77583: LD_ADDR_VAR 0 4
77587: PUSH
77588: LD_INT 0
77590: ST_TO_ADDR
// for i := 0 to 5 do
77591: LD_ADDR_VAR 0 5
77595: PUSH
77596: DOUBLE
77597: LD_INT 0
77599: DEC
77600: ST_TO_ADDR
77601: LD_INT 5
77603: PUSH
77604: FOR_TO
77605: IFFALSE 77672
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
77607: LD_VAR 0 1
77611: PPUSH
77612: LD_VAR 0 5
77616: PPUSH
77617: LD_VAR 0 6
77621: PPUSH
77622: CALL_OW 272
77626: PPUSH
77627: LD_VAR 0 2
77631: PPUSH
77632: LD_VAR 0 5
77636: PPUSH
77637: LD_VAR 0 6
77641: PPUSH
77642: CALL_OW 273
77646: PPUSH
77647: LD_VAR 0 3
77651: PPUSH
77652: CALL_OW 309
77656: IFFALSE 77670
// begin result := true ;
77658: LD_ADDR_VAR 0 4
77662: PUSH
77663: LD_INT 1
77665: ST_TO_ADDR
// exit ;
77666: POP
77667: POP
77668: GO 77674
// end ;
77670: GO 77604
77672: POP
77673: POP
// end ;
77674: LD_VAR 0 4
77678: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
77679: LD_INT 0
77681: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
77682: LD_VAR 0 1
77686: PPUSH
77687: LD_VAR 0 2
77691: PPUSH
77692: LD_INT 0
77694: PPUSH
77695: LD_INT 0
77697: PPUSH
77698: LD_INT 1
77700: PPUSH
77701: LD_INT 0
77703: PPUSH
77704: CALL_OW 587
// end ;
77708: LD_VAR 0 3
77712: RET
// export function CenterOnNow ( unit ) ; begin
77713: LD_INT 0
77715: PPUSH
// result := IsInUnit ( unit ) ;
77716: LD_ADDR_VAR 0 2
77720: PUSH
77721: LD_VAR 0 1
77725: PPUSH
77726: CALL_OW 310
77730: ST_TO_ADDR
// if not result then
77731: LD_VAR 0 2
77735: NOT
77736: IFFALSE 77748
// result := unit ;
77738: LD_ADDR_VAR 0 2
77742: PUSH
77743: LD_VAR 0 1
77747: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
77748: LD_VAR 0 1
77752: PPUSH
77753: CALL_OW 87
// end ;
77757: LD_VAR 0 2
77761: RET
// export function ComMoveHex ( unit , hex ) ; begin
77762: LD_INT 0
77764: PPUSH
// if not hex then
77765: LD_VAR 0 2
77769: NOT
77770: IFFALSE 77774
// exit ;
77772: GO 77827
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
77774: LD_VAR 0 2
77778: PUSH
77779: LD_INT 1
77781: ARRAY
77782: PPUSH
77783: LD_VAR 0 2
77787: PUSH
77788: LD_INT 2
77790: ARRAY
77791: PPUSH
77792: CALL_OW 428
77796: IFFALSE 77800
// exit ;
77798: GO 77827
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
77800: LD_VAR 0 1
77804: PPUSH
77805: LD_VAR 0 2
77809: PUSH
77810: LD_INT 1
77812: ARRAY
77813: PPUSH
77814: LD_VAR 0 2
77818: PUSH
77819: LD_INT 2
77821: ARRAY
77822: PPUSH
77823: CALL_OW 111
// end ;
77827: LD_VAR 0 3
77831: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
77832: LD_INT 0
77834: PPUSH
77835: PPUSH
77836: PPUSH
// if not unit or not enemy then
77837: LD_VAR 0 1
77841: NOT
77842: PUSH
77843: LD_VAR 0 2
77847: NOT
77848: OR
77849: IFFALSE 77853
// exit ;
77851: GO 77977
// x := GetX ( enemy ) ;
77853: LD_ADDR_VAR 0 4
77857: PUSH
77858: LD_VAR 0 2
77862: PPUSH
77863: CALL_OW 250
77867: ST_TO_ADDR
// y := GetY ( enemy ) ;
77868: LD_ADDR_VAR 0 5
77872: PUSH
77873: LD_VAR 0 2
77877: PPUSH
77878: CALL_OW 251
77882: ST_TO_ADDR
// if ValidHex ( x , y ) then
77883: LD_VAR 0 4
77887: PPUSH
77888: LD_VAR 0 5
77892: PPUSH
77893: CALL_OW 488
77897: IFFALSE 77977
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
77899: LD_VAR 0 2
77903: PPUSH
77904: CALL_OW 247
77908: PUSH
77909: LD_INT 3
77911: PUSH
77912: LD_INT 2
77914: PUSH
77915: EMPTY
77916: LIST
77917: LIST
77918: IN
77919: PUSH
77920: LD_VAR 0 1
77924: PPUSH
77925: CALL_OW 255
77929: PPUSH
77930: LD_VAR 0 2
77934: PPUSH
77935: CALL_OW 292
77939: AND
77940: IFFALSE 77958
// ComAttackUnit ( unit , enemy ) else
77942: LD_VAR 0 1
77946: PPUSH
77947: LD_VAR 0 2
77951: PPUSH
77952: CALL_OW 115
77956: GO 77977
// ComAgressiveMove ( unit , x , y ) ;
77958: LD_VAR 0 1
77962: PPUSH
77963: LD_VAR 0 4
77967: PPUSH
77968: LD_VAR 0 5
77972: PPUSH
77973: CALL_OW 114
// end ; end_of_file
77977: LD_VAR 0 3
77981: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
77982: LD_VAR 0 1
77986: PUSH
77987: LD_INT 200
77989: DOUBLE
77990: GREATEREQUAL
77991: IFFALSE 77999
77993: LD_INT 299
77995: DOUBLE
77996: LESSEQUAL
77997: IFTRUE 78001
77999: GO 78033
78001: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
78002: LD_VAR 0 1
78006: PPUSH
78007: LD_VAR 0 2
78011: PPUSH
78012: LD_VAR 0 3
78016: PPUSH
78017: LD_VAR 0 4
78021: PPUSH
78022: LD_VAR 0 5
78026: PPUSH
78027: CALL 31706 0 5
78031: GO 78110
78033: LD_INT 300
78035: DOUBLE
78036: GREATEREQUAL
78037: IFFALSE 78045
78039: LD_INT 399
78041: DOUBLE
78042: LESSEQUAL
78043: IFTRUE 78047
78045: GO 78109
78047: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
78048: LD_VAR 0 1
78052: PPUSH
78053: LD_VAR 0 2
78057: PPUSH
78058: LD_VAR 0 3
78062: PPUSH
78063: LD_VAR 0 4
78067: PPUSH
78068: LD_VAR 0 5
78072: PPUSH
78073: LD_VAR 0 6
78077: PPUSH
78078: LD_VAR 0 7
78082: PPUSH
78083: LD_VAR 0 8
78087: PPUSH
78088: LD_VAR 0 9
78092: PPUSH
78093: LD_VAR 0 10
78097: PPUSH
78098: LD_VAR 0 11
78102: PPUSH
78103: CALL 28031 0 11
78107: GO 78110
78109: POP
// end ;
78110: PPOPN 11
78112: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
78113: LD_VAR 0 1
78117: PPUSH
78118: LD_VAR 0 2
78122: PPUSH
78123: LD_VAR 0 3
78127: PPUSH
78128: LD_VAR 0 4
78132: PPUSH
78133: LD_VAR 0 5
78137: PPUSH
78138: CALL 31442 0 5
// end ; end_of_file
78142: PPOPN 5
78144: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
78145: LD_VAR 0 1
78149: PPUSH
78150: LD_VAR 0 2
78154: PPUSH
78155: LD_VAR 0 3
78159: PPUSH
78160: LD_VAR 0 4
78164: PPUSH
78165: LD_VAR 0 5
78169: PPUSH
78170: LD_VAR 0 6
78174: PPUSH
78175: CALL 15683 0 6
// end ;
78179: PPOPN 6
78181: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
78182: LD_INT 0
78184: PPUSH
// begin if not units then
78185: LD_VAR 0 1
78189: NOT
78190: IFFALSE 78194
// exit ;
78192: GO 78194
// end ;
78194: PPOPN 7
78196: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
78197: CALL 15587 0 0
// end ;
78201: PPOPN 1
78203: END
