// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitVariables ;
  11: CALL 130 0 0
// CreateNature ;
  15: CALL 9269 0 0
// PrepareAlliance ;
  19: CALL 344 0 0
// PrepareFriends ;
  23: CALL 3654 0 0
// PrepareAmerican ;
  27: CALL 781 0 0
// PlaceSeeing ( 91 , 70 , 7 , - 32178 ) ;
  31: LD_INT 91
  33: PPUSH
  34: LD_INT 70
  36: PPUSH
  37: LD_INT 7
  39: PPUSH
  40: LD_INT 32178
  42: NEG
  43: PPUSH
  44: CALL_OW 330
// RemoveSeeing ( 91 , 70 , 7 ) ;
  48: LD_INT 91
  50: PPUSH
  51: LD_INT 70
  53: PPUSH
  54: LD_INT 7
  56: PPUSH
  57: CALL_OW 331
// if debug then
  61: LD_EXP 1
  65: IFFALSE 113
// begin SetAttitude ( 1 , 7 , att_enemy , true ) ;
  67: LD_INT 1
  69: PPUSH
  70: LD_INT 7
  72: PPUSH
  73: LD_INT 2
  75: PPUSH
  76: LD_INT 1
  78: PPUSH
  79: CALL_OW 80
// RemoveUnit ( Powell ) ;
  83: LD_EXP 16
  87: PPUSH
  88: CALL_OW 64
// DoNotAttack ( 1 , JMM ) ;
  92: LD_INT 1
  94: PPUSH
  95: LD_EXP 14
  99: PPUSH
 100: CALL_OW 471
// FogOff ( 1 ) ;
 104: LD_INT 1
 106: PPUSH
 107: CALL_OW 344
// end else
 111: GO 117
// Action ;
 113: CALL 9605 0 0
// PreparePatrol ;
 117: CALL 1246 0 0
// game := true ;
 121: LD_ADDR_EXP 2
 125: PUSH
 126: LD_INT 1
 128: ST_TO_ADDR
// end ;
 129: END
// export debug , game , selected , friends , reached_lab , can_escape , on_hill , friends_kill_counter , team_kill_counter , gamma_commander , extra_patrol , invis_used , alert ; export function InitVariables ; begin
 130: LD_INT 0
 132: PPUSH
// debug := false ;
 133: LD_ADDR_EXP 1
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// friends := [ ] ;
 141: LD_ADDR_EXP 4
 145: PUSH
 146: EMPTY
 147: ST_TO_ADDR
// selected := [ ] ;
 148: LD_ADDR_EXP 3
 152: PUSH
 153: EMPTY
 154: ST_TO_ADDR
// reached_lab := false ;
 155: LD_ADDR_EXP 5
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// can_escape := false ;
 163: LD_ADDR_EXP 6
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// game := false ;
 171: LD_ADDR_EXP 2
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// gamma_commander := LoadVariable ( GammaCommander , 2 ) ;
 179: LD_ADDR_EXP 10
 183: PUSH
 184: LD_STRING GammaCommander
 186: PPUSH
 187: LD_INT 2
 189: PPUSH
 190: CALL_OW 30
 194: ST_TO_ADDR
// friends_kill_counter := 0 ;
 195: LD_ADDR_EXP 8
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// team_kill_counter := 0 ;
 203: LD_ADDR_EXP 9
 207: PUSH
 208: LD_INT 0
 210: ST_TO_ADDR
// extra_patrol := true ;
 211: LD_ADDR_EXP 11
 215: PUSH
 216: LD_INT 1
 218: ST_TO_ADDR
// on_hill := false ;
 219: LD_ADDR_EXP 7
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// invis_used := false ;
 227: LD_ADDR_EXP 12
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// alert := false ;
 235: LD_ADDR_EXP 13
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// end ;
 243: LD_VAR 0 1
 247: RET
// every 0 0$1 trigger on_hill do
 248: LD_EXP 7
 252: IFFALSE 264
 254: GO 256
 256: DISABLE
// SetAchievement ( ACH_EYE ) ;
 257: LD_STRING ACH_EYE
 259: PPUSH
 260: CALL_OW 543
 264: END
// every 0 0$1 trigger not invis_used do var i ;
 265: LD_EXP 12
 269: NOT
 270: IFFALSE 341
 272: GO 274
 274: DISABLE
 275: LD_INT 0
 277: PPUSH
// begin enable ;
 278: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do
 279: LD_ADDR_VAR 0 1
 283: PUSH
 284: LD_INT 22
 286: PUSH
 287: LD_INT 7
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PUSH
 294: LD_INT 21
 296: PUSH
 297: LD_INT 1
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: PUSH
 304: EMPTY
 305: LIST
 306: LIST
 307: PPUSH
 308: CALL_OW 69
 312: PUSH
 313: FOR_IN
 314: IFFALSE 339
// if IsInvisible ( i ) then
 316: LD_VAR 0 1
 320: PPUSH
 321: CALL_OW 571
 325: IFFALSE 337
// begin invis_used := true ;
 327: LD_ADDR_EXP 12
 331: PUSH
 332: LD_INT 1
 334: ST_TO_ADDR
// break ;
 335: GO 339
// end ;
 337: GO 313
 339: POP
 340: POP
// end ; end_of_file
 341: PPOPN 1
 343: END
// export JMM , Roth ; export function PrepareAlliance ; var cargo ; begin
 344: LD_INT 0
 346: PPUSH
 347: PPUSH
// uc_side := 7 ;
 348: LD_ADDR_OWVAR 20
 352: PUSH
 353: LD_INT 7
 355: ST_TO_ADDR
// uc_nation := 1 ;
 356: LD_ADDR_OWVAR 21
 360: PUSH
 361: LD_INT 1
 363: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 11_ ) ;
 364: LD_ADDR_EXP 14
 368: PUSH
 369: LD_STRING JMM
 371: PPUSH
 372: LD_EXP 1
 376: NOT
 377: PPUSH
 378: LD_STRING 11_
 380: PPUSH
 381: CALL 35323 0 3
 385: ST_TO_ADDR
// uc_side := 4 ;
 386: LD_ADDR_OWVAR 20
 390: PUSH
 391: LD_INT 4
 393: ST_TO_ADDR
// Roth := NewCharacter ( Roth ) ;
 394: LD_ADDR_EXP 15
 398: PUSH
 399: LD_STRING Roth
 401: PPUSH
 402: CALL_OW 25
 406: ST_TO_ADDR
// SetDir ( JMM , 1 ) ;
 407: LD_EXP 14
 411: PPUSH
 412: LD_INT 1
 414: PPUSH
 415: CALL_OW 233
// SetClass ( JMM , 1 ) ;
 419: LD_EXP 14
 423: PPUSH
 424: LD_INT 1
 426: PPUSH
 427: CALL_OW 336
// PlaceUnitXY ( JMM , 105 , 10 , false ) ;
 431: LD_EXP 14
 435: PPUSH
 436: LD_INT 105
 438: PPUSH
 439: LD_INT 10
 441: PPUSH
 442: LD_INT 0
 444: PPUSH
 445: CALL_OW 48
// SetDir ( Roth , 4 ) ;
 449: LD_EXP 15
 453: PPUSH
 454: LD_INT 4
 456: PPUSH
 457: CALL_OW 233
// PlaceUnitXY ( Roth , 109 , 10 , false ) ;
 461: LD_EXP 15
 465: PPUSH
 466: LD_INT 109
 468: PPUSH
 469: LD_INT 10
 471: PPUSH
 472: LD_INT 0
 474: PPUSH
 475: CALL_OW 48
// ComTurnUnit ( JMM , Roth ) ;
 479: LD_EXP 14
 483: PPUSH
 484: LD_EXP 15
 488: PPUSH
 489: CALL_OW 119
// ComTurnUnit ( Roth , JMM ) ;
 493: LD_EXP 15
 497: PPUSH
 498: LD_EXP 14
 502: PPUSH
 503: CALL_OW 119
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
 507: LD_INT 3
 509: PPUSH
 510: LD_INT 3
 512: PPUSH
 513: LD_INT 3
 515: PPUSH
 516: LD_INT 12
 518: PPUSH
 519: LD_INT 100
 521: PPUSH
 522: CALL 40338 0 5
// cargo := CreateVehicle ;
 526: LD_ADDR_VAR 0 2
 530: PUSH
 531: CALL_OW 45
 535: ST_TO_ADDR
// SetDir ( cargo , 1 ) ;
 536: LD_VAR 0 2
 540: PPUSH
 541: LD_INT 1
 543: PPUSH
 544: CALL_OW 233
// PlaceUnitXY ( cargo , 179 , 45 , false ) ;
 548: LD_VAR 0 2
 552: PPUSH
 553: LD_INT 179
 555: PPUSH
 556: LD_INT 45
 558: PPUSH
 559: LD_INT 0
 561: PPUSH
 562: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 30 ) ;
 566: LD_VAR 0 2
 570: PPUSH
 571: LD_INT 4
 573: PPUSH
 574: LD_INT 30
 576: PPUSH
 577: CALL_OW 290
// if LoadVariable ( 11_artifact_captured , 0 ) then
 581: LD_STRING 11_artifact_captured
 583: PPUSH
 584: LD_INT 0
 586: PPUSH
 587: CALL_OW 30
 591: IFFALSE 648
// begin cargo := CreateVehicle ;
 593: LD_ADDR_VAR 0 2
 597: PUSH
 598: CALL_OW 45
 602: ST_TO_ADDR
// SetDir ( cargo , 0 ) ;
 603: LD_VAR 0 2
 607: PPUSH
 608: LD_INT 0
 610: PPUSH
 611: CALL_OW 233
// PlaceUnitXY ( cargo , 171 , 85 , false ) ;
 615: LD_VAR 0 2
 619: PPUSH
 620: LD_INT 171
 622: PPUSH
 623: LD_INT 85
 625: PPUSH
 626: LD_INT 0
 628: PPUSH
 629: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 50 ) ;
 633: LD_VAR 0 2
 637: PPUSH
 638: LD_INT 4
 640: PPUSH
 641: LD_INT 50
 643: PPUSH
 644: CALL_OW 290
// end ; SetSide ( amlab , 7 ) ;
 648: LD_INT 47
 650: PPUSH
 651: LD_INT 7
 653: PPUSH
 654: CALL_OW 235
// DoNotAttack ( 1 , amlab ) ;
 658: LD_INT 1
 660: PPUSH
 661: LD_INT 47
 663: PPUSH
 664: CALL_OW 471
// end ;
 668: LD_VAR 0 1
 672: RET
// every 0 0$1 trigger FilterUnitsInArea ( hill , [ f_side , 7 ] ) and not on_hill do
 673: LD_INT 38
 675: PPUSH
 676: LD_INT 22
 678: PUSH
 679: LD_INT 7
 681: PUSH
 682: EMPTY
 683: LIST
 684: LIST
 685: PPUSH
 686: CALL_OW 70
 690: PUSH
 691: LD_EXP 7
 695: NOT
 696: AND
 697: IFFALSE 728
 699: GO 701
 701: DISABLE
// begin enable ;
 702: ENABLE
// on_hill := true ;
 703: LD_ADDR_EXP 7
 707: PUSH
 708: LD_INT 1
 710: ST_TO_ADDR
// PlaceSeeing ( 126 , 13 , 7 , - 90 ) ;
 711: LD_INT 126
 713: PPUSH
 714: LD_INT 13
 716: PPUSH
 717: LD_INT 7
 719: PPUSH
 720: LD_INT 90
 722: NEG
 723: PPUSH
 724: CALL_OW 330
// end ;
 728: END
// every 0 0$1 trigger not FilterUnitsInArea ( hill , [ f_side , 7 ] ) and on_hill do
 729: LD_INT 38
 731: PPUSH
 732: LD_INT 22
 734: PUSH
 735: LD_INT 7
 737: PUSH
 738: EMPTY
 739: LIST
 740: LIST
 741: PPUSH
 742: CALL_OW 70
 746: NOT
 747: PUSH
 748: LD_EXP 7
 752: AND
 753: IFFALSE 780
 755: GO 757
 757: DISABLE
// begin enable ;
 758: ENABLE
// on_hill := false ;
 759: LD_ADDR_EXP 7
 763: PUSH
 764: LD_INT 0
 766: ST_TO_ADDR
// RemoveSeeing ( 126 , 13 , 7 ) ;
 767: LD_INT 126
 769: PPUSH
 770: LD_INT 13
 772: PPUSH
 773: LD_INT 7
 775: PPUSH
 776: CALL_OW 331
// end ; end_of_file
 780: END
// export Powell , mobile_patrol , mobile_points , powell_guards , defenders , defcon , defcon_wave ; export function PrepareAmerican ; var i , j , b , un , tmp ; begin
 781: LD_INT 0
 783: PPUSH
 784: PPUSH
 785: PPUSH
 786: PPUSH
 787: PPUSH
 788: PPUSH
// if Difficulty = 1 then
 789: LD_OWVAR 67
 793: PUSH
 794: LD_INT 1
 796: EQUAL
 797: IFFALSE 905
// begin tmp := [ [ 155 , 77 ] , [ 193 , 93 ] , [ 188 , 81 ] , [ 56 , 85 ] , [ 98 , 87 ] ] ;
 799: LD_ADDR_VAR 0 6
 803: PUSH
 804: LD_INT 155
 806: PUSH
 807: LD_INT 77
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: PUSH
 814: LD_INT 193
 816: PUSH
 817: LD_INT 93
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PUSH
 824: LD_INT 188
 826: PUSH
 827: LD_INT 81
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: PUSH
 834: LD_INT 56
 836: PUSH
 837: LD_INT 85
 839: PUSH
 840: EMPTY
 841: LIST
 842: LIST
 843: PUSH
 844: LD_INT 98
 846: PUSH
 847: LD_INT 87
 849: PUSH
 850: EMPTY
 851: LIST
 852: LIST
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: ST_TO_ADDR
// for i in tmp do
 861: LD_ADDR_VAR 0 2
 865: PUSH
 866: LD_VAR 0 6
 870: PUSH
 871: FOR_IN
 872: IFFALSE 903
// RemoveUnit ( HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
 874: LD_VAR 0 2
 878: PUSH
 879: LD_INT 1
 881: ARRAY
 882: PPUSH
 883: LD_VAR 0 2
 887: PUSH
 888: LD_INT 2
 890: ARRAY
 891: PPUSH
 892: CALL_OW 428
 896: PPUSH
 897: CALL_OW 64
 901: GO 871
 903: POP
 904: POP
// end ; defcon := 0 ;
 905: LD_ADDR_EXP 21
 909: PUSH
 910: LD_INT 0
 912: ST_TO_ADDR
// defcon_wave := 0 ;
 913: LD_ADDR_EXP 22
 917: PUSH
 918: LD_INT 0
 920: ST_TO_ADDR
// defenders := [ ] ;
 921: LD_ADDR_EXP 20
 925: PUSH
 926: EMPTY
 927: ST_TO_ADDR
// SetBName ( alfa , alpha ) ;
 928: LD_INT 5
 930: PPUSH
 931: LD_STRING alpha
 933: PPUSH
 934: CALL_OW 500
// uc_side := 1 ;
 938: LD_ADDR_OWVAR 20
 942: PUSH
 943: LD_INT 1
 945: ST_TO_ADDR
// uc_nation := 1 ;
 946: LD_ADDR_OWVAR 21
 950: PUSH
 951: LD_INT 1
 953: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
 954: LD_ADDR_EXP 16
 958: PUSH
 959: LD_STRING Powell
 961: PPUSH
 962: CALL_OW 25
 966: ST_TO_ADDR
// PlaceUnitXY ( Powell , 110 , 26 , false ) ;
 967: LD_EXP 16
 971: PPUSH
 972: LD_INT 110
 974: PPUSH
 975: LD_INT 26
 977: PPUSH
 978: LD_INT 0
 980: PPUSH
 981: CALL_OW 48
// ComHold ( Powell ) ;
 985: LD_EXP 16
 989: PPUSH
 990: CALL_OW 140
// for i = 1 to 5 do
 994: LD_ADDR_VAR 0 2
 998: PUSH
 999: DOUBLE
1000: LD_INT 1
1002: DEC
1003: ST_TO_ADDR
1004: LD_INT 5
1006: PUSH
1007: FOR_TO
1008: IFFALSE 1064
// begin PrepareHuman ( false , 1 , 10 ) ;
1010: LD_INT 0
1012: PPUSH
1013: LD_INT 1
1015: PPUSH
1016: LD_INT 10
1018: PPUSH
1019: CALL_OW 380
// powell_guards := Insert ( powell_guards , 1 , CreateHuman ) ;
1023: LD_ADDR_EXP 19
1027: PUSH
1028: LD_EXP 19
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: CALL_OW 44
1040: PPUSH
1041: CALL_OW 2
1045: ST_TO_ADDR
// PlaceHumanInUnit ( powell_guards [ 1 ] , ambar0 ) ;
1046: LD_EXP 19
1050: PUSH
1051: LD_INT 1
1053: ARRAY
1054: PPUSH
1055: LD_INT 18
1057: PPUSH
1058: CALL_OW 52
// end ;
1062: GO 1007
1064: POP
1065: POP
// if Difficulty > 2 then
1066: LD_OWVAR 67
1070: PUSH
1071: LD_INT 2
1073: GREATER
1074: IFFALSE 1123
// begin bc_type := b_turret ;
1076: LD_ADDR_OWVAR 42
1080: PUSH
1081: LD_INT 33
1083: ST_TO_ADDR
// bc_level := 7 ;
1084: LD_ADDR_OWVAR 43
1088: PUSH
1089: LD_INT 7
1091: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 107 , 55 , 5 ) ;
1092: LD_ADDR_VAR 0 4
1096: PUSH
1097: LD_INT 107
1099: PPUSH
1100: LD_INT 55
1102: PPUSH
1103: LD_INT 5
1105: PPUSH
1106: CALL_OW 47
1110: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_rocket_launcher ) ;
1111: LD_VAR 0 4
1115: PPUSH
1116: LD_INT 7
1118: PPUSH
1119: CALL_OW 431
// end ; for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ^ FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) do
1123: LD_ADDR_VAR 0 2
1127: PUSH
1128: LD_INT 22
1130: PUSH
1131: LD_INT 1
1133: PUSH
1134: EMPTY
1135: LIST
1136: LIST
1137: PUSH
1138: LD_INT 30
1140: PUSH
1141: LD_INT 3
1143: PUSH
1144: EMPTY
1145: LIST
1146: LIST
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: PPUSH
1152: CALL_OW 69
1156: PUSH
1157: LD_INT 22
1159: PUSH
1160: LD_INT 1
1162: PUSH
1163: EMPTY
1164: LIST
1165: LIST
1166: PUSH
1167: LD_INT 30
1169: PUSH
1170: LD_INT 36
1172: PUSH
1173: EMPTY
1174: LIST
1175: LIST
1176: PUSH
1177: EMPTY
1178: LIST
1179: LIST
1180: PPUSH
1181: CALL_OW 69
1185: ADD
1186: PUSH
1187: FOR_IN
1188: IFFALSE 1239
// for j = 1 to 3 do
1190: LD_ADDR_VAR 0 3
1194: PUSH
1195: DOUBLE
1196: LD_INT 1
1198: DEC
1199: ST_TO_ADDR
1200: LD_INT 3
1202: PUSH
1203: FOR_TO
1204: IFFALSE 1235
// begin PrepareHuman ( false , 3 , 6 ) ;
1206: LD_INT 0
1208: PPUSH
1209: LD_INT 3
1211: PPUSH
1212: LD_INT 6
1214: PPUSH
1215: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
1219: CALL_OW 44
1223: PPUSH
1224: LD_VAR 0 2
1228: PPUSH
1229: CALL_OW 52
// end ;
1233: GO 1203
1235: POP
1236: POP
1237: GO 1187
1239: POP
1240: POP
// end ;
1241: LD_VAR 0 1
1245: RET
// export function PreparePatrol ; var i , un ; begin
1246: LD_INT 0
1248: PPUSH
1249: PPUSH
1250: PPUSH
// uc_side := 1 ;
1251: LD_ADDR_OWVAR 20
1255: PUSH
1256: LD_INT 1
1258: ST_TO_ADDR
// uc_nation := 1 ;
1259: LD_ADDR_OWVAR 21
1263: PUSH
1264: LD_INT 1
1266: ST_TO_ADDR
// mobile_points := [ [ [ 99 , 55 ] , [ 113 , 67 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 103 , 41 ] ] , [ [ 27 , 49 ] , [ 46 , 49 ] , [ 87 , 70 ] , [ 99 , 79 ] , [ 118 , 111 ] , [ 99 , 79 ] , [ 87 , 70 ] , [ 46 , 49 ] ] , [ [ 200 , 88 ] , [ 175 , 80 ] , [ 135 , 62 ] , [ 117 , 53 ] , [ 103 , 41 ] , [ 99 , 24 ] , [ 85 , 3 ] , [ 99 , 24 ] , [ 103 , 41 ] , [ 98 , 47 ] , [ 99 , 56 ] , [ 96 , 66 ] , [ 99 , 56 ] , [ 112 , 66 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 156 , 71 ] , [ 168 , 76 ] , [ 168 , 61 ] , [ 168 , 75 ] , [ 185 , 85 ] ] ] ;
1267: LD_ADDR_EXP 18
1271: PUSH
1272: LD_INT 99
1274: PUSH
1275: LD_INT 55
1277: PUSH
1278: EMPTY
1279: LIST
1280: LIST
1281: PUSH
1282: LD_INT 113
1284: PUSH
1285: LD_INT 67
1287: PUSH
1288: EMPTY
1289: LIST
1290: LIST
1291: PUSH
1292: LD_INT 129
1294: PUSH
1295: LD_INT 68
1297: PUSH
1298: EMPTY
1299: LIST
1300: LIST
1301: PUSH
1302: LD_INT 135
1304: PUSH
1305: LD_INT 62
1307: PUSH
1308: EMPTY
1309: LIST
1310: LIST
1311: PUSH
1312: LD_INT 103
1314: PUSH
1315: LD_INT 41
1317: PUSH
1318: EMPTY
1319: LIST
1320: LIST
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: PUSH
1329: LD_INT 27
1331: PUSH
1332: LD_INT 49
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: PUSH
1339: LD_INT 46
1341: PUSH
1342: LD_INT 49
1344: PUSH
1345: EMPTY
1346: LIST
1347: LIST
1348: PUSH
1349: LD_INT 87
1351: PUSH
1352: LD_INT 70
1354: PUSH
1355: EMPTY
1356: LIST
1357: LIST
1358: PUSH
1359: LD_INT 99
1361: PUSH
1362: LD_INT 79
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: PUSH
1369: LD_INT 118
1371: PUSH
1372: LD_INT 111
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: LD_INT 99
1381: PUSH
1382: LD_INT 79
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: PUSH
1389: LD_INT 87
1391: PUSH
1392: LD_INT 70
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: PUSH
1399: LD_INT 46
1401: PUSH
1402: LD_INT 49
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: PUSH
1419: LD_INT 200
1421: PUSH
1422: LD_INT 88
1424: PUSH
1425: EMPTY
1426: LIST
1427: LIST
1428: PUSH
1429: LD_INT 175
1431: PUSH
1432: LD_INT 80
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: PUSH
1439: LD_INT 135
1441: PUSH
1442: LD_INT 62
1444: PUSH
1445: EMPTY
1446: LIST
1447: LIST
1448: PUSH
1449: LD_INT 117
1451: PUSH
1452: LD_INT 53
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: PUSH
1459: LD_INT 103
1461: PUSH
1462: LD_INT 41
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: PUSH
1469: LD_INT 99
1471: PUSH
1472: LD_INT 24
1474: PUSH
1475: EMPTY
1476: LIST
1477: LIST
1478: PUSH
1479: LD_INT 85
1481: PUSH
1482: LD_INT 3
1484: PUSH
1485: EMPTY
1486: LIST
1487: LIST
1488: PUSH
1489: LD_INT 99
1491: PUSH
1492: LD_INT 24
1494: PUSH
1495: EMPTY
1496: LIST
1497: LIST
1498: PUSH
1499: LD_INT 103
1501: PUSH
1502: LD_INT 41
1504: PUSH
1505: EMPTY
1506: LIST
1507: LIST
1508: PUSH
1509: LD_INT 98
1511: PUSH
1512: LD_INT 47
1514: PUSH
1515: EMPTY
1516: LIST
1517: LIST
1518: PUSH
1519: LD_INT 99
1521: PUSH
1522: LD_INT 56
1524: PUSH
1525: EMPTY
1526: LIST
1527: LIST
1528: PUSH
1529: LD_INT 96
1531: PUSH
1532: LD_INT 66
1534: PUSH
1535: EMPTY
1536: LIST
1537: LIST
1538: PUSH
1539: LD_INT 99
1541: PUSH
1542: LD_INT 56
1544: PUSH
1545: EMPTY
1546: LIST
1547: LIST
1548: PUSH
1549: LD_INT 112
1551: PUSH
1552: LD_INT 66
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: PUSH
1559: LD_INT 129
1561: PUSH
1562: LD_INT 68
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: PUSH
1569: LD_INT 135
1571: PUSH
1572: LD_INT 62
1574: PUSH
1575: EMPTY
1576: LIST
1577: LIST
1578: PUSH
1579: LD_INT 156
1581: PUSH
1582: LD_INT 71
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PUSH
1589: LD_INT 168
1591: PUSH
1592: LD_INT 76
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: PUSH
1599: LD_INT 168
1601: PUSH
1602: LD_INT 61
1604: PUSH
1605: EMPTY
1606: LIST
1607: LIST
1608: PUSH
1609: LD_INT 168
1611: PUSH
1612: LD_INT 75
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: PUSH
1619: LD_INT 185
1621: PUSH
1622: LD_INT 85
1624: PUSH
1625: EMPTY
1626: LIST
1627: LIST
1628: PUSH
1629: EMPTY
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: LIST
1645: LIST
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: LIST
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: LIST
1656: ST_TO_ADDR
// mobile_patrol := [ ] ;
1657: LD_ADDR_EXP 17
1661: PUSH
1662: EMPTY
1663: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1664: LD_INT 3
1666: PPUSH
1667: LD_INT 1
1669: PPUSH
1670: LD_INT 3
1672: PPUSH
1673: LD_INT 4
1675: PPUSH
1676: LD_INT 100
1678: PPUSH
1679: CALL 40338 0 5
// mobile_patrol := Insert ( mobile_patrol , 1 , CreateVehicle ) ;
1683: LD_ADDR_EXP 17
1687: PUSH
1688: LD_EXP 17
1692: PPUSH
1693: LD_INT 1
1695: PPUSH
1696: CALL_OW 45
1700: PPUSH
1701: CALL_OW 2
1705: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 1 ] , 99 , 55 , false ) ;
1706: LD_EXP 17
1710: PUSH
1711: LD_INT 1
1713: ARRAY
1714: PPUSH
1715: LD_INT 99
1717: PPUSH
1718: LD_INT 55
1720: PPUSH
1721: LD_INT 0
1723: PPUSH
1724: CALL_OW 48
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1728: LD_INT 2
1730: PPUSH
1731: LD_INT 1
1733: PPUSH
1734: LD_INT 3
1736: PPUSH
1737: LD_INT 4
1739: PPUSH
1740: LD_INT 100
1742: PPUSH
1743: CALL 40338 0 5
// mobile_patrol := Insert ( mobile_patrol , 2 , CreateVehicle ) ;
1747: LD_ADDR_EXP 17
1751: PUSH
1752: LD_EXP 17
1756: PPUSH
1757: LD_INT 2
1759: PPUSH
1760: CALL_OW 45
1764: PPUSH
1765: CALL_OW 2
1769: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 2 ] , 27 , 49 , false ) ;
1770: LD_EXP 17
1774: PUSH
1775: LD_INT 2
1777: ARRAY
1778: PPUSH
1779: LD_INT 27
1781: PPUSH
1782: LD_INT 49
1784: PPUSH
1785: LD_INT 0
1787: PPUSH
1788: CALL_OW 48
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , [ us_laser , us_rocket_launcher , us_rocket_launcher , us_rocket_launcher ] [ Difficulty ] , 100 ) ;
1792: LD_INT 3
1794: PPUSH
1795: LD_INT 1
1797: PPUSH
1798: LD_INT 3
1800: PPUSH
1801: LD_INT 9
1803: PUSH
1804: LD_INT 7
1806: PUSH
1807: LD_INT 7
1809: PUSH
1810: LD_INT 7
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: PUSH
1819: LD_OWVAR 67
1823: ARRAY
1824: PPUSH
1825: LD_INT 100
1827: PPUSH
1828: CALL 40338 0 5
// mobile_patrol := Insert ( mobile_patrol , 3 , CreateVehicle ) ;
1832: LD_ADDR_EXP 17
1836: PUSH
1837: LD_EXP 17
1841: PPUSH
1842: LD_INT 3
1844: PPUSH
1845: CALL_OW 45
1849: PPUSH
1850: CALL_OW 2
1854: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 3 ] , 200 , 88 , false ) ;
1855: LD_EXP 17
1859: PUSH
1860: LD_INT 3
1862: ARRAY
1863: PPUSH
1864: LD_INT 200
1866: PPUSH
1867: LD_INT 88
1869: PPUSH
1870: LD_INT 0
1872: PPUSH
1873: CALL_OW 48
// for i = mobile_patrol downto 1 do
1877: LD_ADDR_VAR 0 2
1881: PUSH
1882: DOUBLE
1883: LD_EXP 17
1887: INC
1888: ST_TO_ADDR
1889: LD_INT 1
1891: PUSH
1892: FOR_DOWNTO
1893: IFFALSE 1904
// RaiseSailEvent ( 1 ) ;
1895: LD_INT 1
1897: PPUSH
1898: CALL_OW 427
1902: GO 1892
1904: POP
1905: POP
// end ;
1906: LD_VAR 0 1
1910: RET
// export function SpawnCargo ( ) ; var i , c , k , areas , road , tmp , veh ; begin
1911: LD_INT 0
1913: PPUSH
1914: PPUSH
1915: PPUSH
1916: PPUSH
1917: PPUSH
1918: PPUSH
1919: PPUSH
1920: PPUSH
// areas := [ [ road_east , 4 ] , [ road_south , 5 ] , [ road_west , 1 ] ] ;
1921: LD_ADDR_VAR 0 5
1925: PUSH
1926: LD_INT 20
1928: PUSH
1929: LD_INT 4
1931: PUSH
1932: EMPTY
1933: LIST
1934: LIST
1935: PUSH
1936: LD_INT 21
1938: PUSH
1939: LD_INT 5
1941: PUSH
1942: EMPTY
1943: LIST
1944: LIST
1945: PUSH
1946: LD_INT 22
1948: PUSH
1949: LD_INT 1
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: PUSH
1956: EMPTY
1957: LIST
1958: LIST
1959: LIST
1960: ST_TO_ADDR
// road := [ [ 176 , 81 , 135 , 62 , 114 , 67 , 93 , 71 , 76 , 67 ] , [ 107 , 92 , 92 , 72 , 77 , 68 ] , [ 45 , 49 , 67 , 59 , 77 , 68 ] ] ;
1961: LD_ADDR_VAR 0 6
1965: PUSH
1966: LD_INT 176
1968: PUSH
1969: LD_INT 81
1971: PUSH
1972: LD_INT 135
1974: PUSH
1975: LD_INT 62
1977: PUSH
1978: LD_INT 114
1980: PUSH
1981: LD_INT 67
1983: PUSH
1984: LD_INT 93
1986: PUSH
1987: LD_INT 71
1989: PUSH
1990: LD_INT 76
1992: PUSH
1993: LD_INT 67
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: LIST
2000: LIST
2001: LIST
2002: LIST
2003: LIST
2004: LIST
2005: LIST
2006: LIST
2007: PUSH
2008: LD_INT 107
2010: PUSH
2011: LD_INT 92
2013: PUSH
2014: LD_INT 92
2016: PUSH
2017: LD_INT 72
2019: PUSH
2020: LD_INT 77
2022: PUSH
2023: LD_INT 68
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: LIST
2030: LIST
2031: LIST
2032: LIST
2033: PUSH
2034: LD_INT 45
2036: PUSH
2037: LD_INT 49
2039: PUSH
2040: LD_INT 67
2042: PUSH
2043: LD_INT 59
2045: PUSH
2046: LD_INT 77
2048: PUSH
2049: LD_INT 68
2051: PUSH
2052: EMPTY
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: LIST
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: LIST
2064: ST_TO_ADDR
// k := rand ( 1 , areas ) ;
2065: LD_ADDR_VAR 0 4
2069: PUSH
2070: LD_INT 1
2072: PPUSH
2073: LD_VAR 0 5
2077: PPUSH
2078: CALL_OW 12
2082: ST_TO_ADDR
// c := rand ( 1 , 2 ) ;
2083: LD_ADDR_VAR 0 3
2087: PUSH
2088: LD_INT 1
2090: PPUSH
2091: LD_INT 2
2093: PPUSH
2094: CALL_OW 12
2098: ST_TO_ADDR
// uc_side := 1 ;
2099: LD_ADDR_OWVAR 20
2103: PUSH
2104: LD_INT 1
2106: ST_TO_ADDR
// uc_nation := 1 ;
2107: LD_ADDR_OWVAR 21
2111: PUSH
2112: LD_INT 1
2114: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
2115: LD_INT 2
2117: PPUSH
2118: LD_INT 3
2120: PPUSH
2121: LD_INT 3
2123: PPUSH
2124: LD_INT 12
2126: PPUSH
2127: LD_INT 100
2129: PPUSH
2130: CALL 40338 0 5
// veh := CreateVehicle ;
2134: LD_ADDR_VAR 0 8
2138: PUSH
2139: CALL_OW 45
2143: ST_TO_ADDR
// SetDir ( veh , areas [ k ] [ 2 ] ) ;
2144: LD_VAR 0 8
2148: PPUSH
2149: LD_VAR 0 5
2153: PUSH
2154: LD_VAR 0 4
2158: ARRAY
2159: PUSH
2160: LD_INT 2
2162: ARRAY
2163: PPUSH
2164: CALL_OW 233
// PlaceUnitArea ( veh , areas [ k ] [ 1 ] , false ) ;
2168: LD_VAR 0 8
2172: PPUSH
2173: LD_VAR 0 5
2177: PUSH
2178: LD_VAR 0 4
2182: ARRAY
2183: PUSH
2184: LD_INT 1
2186: ARRAY
2187: PPUSH
2188: LD_INT 0
2190: PPUSH
2191: CALL_OW 49
// SetCargo ( veh , [ mat_cans , mat_siberit ] [ c ] , 100 ) ;
2195: LD_VAR 0 8
2199: PPUSH
2200: LD_INT 1
2202: PUSH
2203: LD_INT 3
2205: PUSH
2206: EMPTY
2207: LIST
2208: LIST
2209: PUSH
2210: LD_VAR 0 3
2214: ARRAY
2215: PPUSH
2216: LD_INT 100
2218: PPUSH
2219: CALL_OW 290
// tmp := road [ k ] ;
2223: LD_ADDR_VAR 0 7
2227: PUSH
2228: LD_VAR 0 6
2232: PUSH
2233: LD_VAR 0 4
2237: ARRAY
2238: ST_TO_ADDR
// for i = 1 to tmp div 2 do
2239: LD_ADDR_VAR 0 2
2243: PUSH
2244: DOUBLE
2245: LD_INT 1
2247: DEC
2248: ST_TO_ADDR
2249: LD_VAR 0 7
2253: PUSH
2254: LD_INT 2
2256: DIV
2257: PUSH
2258: FOR_TO
2259: IFFALSE 2306
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2261: LD_VAR 0 8
2265: PPUSH
2266: LD_VAR 0 7
2270: PUSH
2271: LD_VAR 0 2
2275: PUSH
2276: LD_INT 2
2278: MUL
2279: PUSH
2280: LD_INT 1
2282: MINUS
2283: ARRAY
2284: PPUSH
2285: LD_VAR 0 7
2289: PUSH
2290: LD_VAR 0 2
2294: PUSH
2295: LD_INT 2
2297: MUL
2298: ARRAY
2299: PPUSH
2300: CALL_OW 171
2304: GO 2258
2306: POP
2307: POP
// AddComGive ( veh , alfa ) ;
2308: LD_VAR 0 8
2312: PPUSH
2313: LD_INT 5
2315: PPUSH
2316: CALL_OW 221
// AddComWait ( veh , 0 0$2 ) ;
2320: LD_VAR 0 8
2324: PPUSH
2325: LD_INT 70
2327: PPUSH
2328: CALL_OW 202
// for i = tmp div 2 downto 1 do
2332: LD_ADDR_VAR 0 2
2336: PUSH
2337: DOUBLE
2338: LD_VAR 0 7
2342: PUSH
2343: LD_INT 2
2345: DIV
2346: INC
2347: ST_TO_ADDR
2348: LD_INT 1
2350: PUSH
2351: FOR_DOWNTO
2352: IFFALSE 2399
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2354: LD_VAR 0 8
2358: PPUSH
2359: LD_VAR 0 7
2363: PUSH
2364: LD_VAR 0 2
2368: PUSH
2369: LD_INT 2
2371: MUL
2372: PUSH
2373: LD_INT 1
2375: MINUS
2376: ARRAY
2377: PPUSH
2378: LD_VAR 0 7
2382: PUSH
2383: LD_VAR 0 2
2387: PUSH
2388: LD_INT 2
2390: MUL
2391: ARRAY
2392: PPUSH
2393: CALL_OW 171
2397: GO 2351
2399: POP
2400: POP
// AddComMoveToArea ( veh , areas [ k ] [ 1 ] ) ;
2401: LD_VAR 0 8
2405: PPUSH
2406: LD_VAR 0 5
2410: PUSH
2411: LD_VAR 0 4
2415: ARRAY
2416: PUSH
2417: LD_INT 1
2419: ARRAY
2420: PPUSH
2421: CALL_OW 173
// repeat wait ( 0 0$1 ) ;
2425: LD_INT 35
2427: PPUSH
2428: CALL_OW 67
// until IsInArea ( veh , areas [ k ] [ 1 ] ) and GetCargo ( veh , c ) = 0 ;
2432: LD_VAR 0 8
2436: PPUSH
2437: LD_VAR 0 5
2441: PUSH
2442: LD_VAR 0 4
2446: ARRAY
2447: PUSH
2448: LD_INT 1
2450: ARRAY
2451: PPUSH
2452: CALL_OW 308
2456: PUSH
2457: LD_VAR 0 8
2461: PPUSH
2462: LD_VAR 0 3
2466: PPUSH
2467: CALL_OW 289
2471: PUSH
2472: LD_INT 0
2474: EQUAL
2475: AND
2476: IFFALSE 2425
// RemoveUnit ( veh ) ;
2478: LD_VAR 0 8
2482: PPUSH
2483: CALL_OW 64
// end ;
2487: LD_VAR 0 1
2491: RET
// every 3 3$00 do
2492: GO 2494
2494: DISABLE
// begin enable ;
2495: ENABLE
// SpawnCargo ;
2496: CALL 1911 0 0
// end ;
2500: END
// export function PrepareDefenders ; var i , tmp ; begin
2501: LD_INT 0
2503: PPUSH
2504: PPUSH
2505: PPUSH
// if defenders then
2506: LD_EXP 20
2510: IFFALSE 2514
// exit ;
2512: GO 2786
// for i = 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
2514: LD_ADDR_VAR 0 2
2518: PUSH
2519: DOUBLE
2520: LD_INT 1
2522: DEC
2523: ST_TO_ADDR
2524: LD_INT 4
2526: PUSH
2527: LD_INT 5
2529: PUSH
2530: LD_INT 6
2532: PUSH
2533: LD_INT 7
2535: PUSH
2536: EMPTY
2537: LIST
2538: LIST
2539: LIST
2540: LIST
2541: PUSH
2542: LD_OWVAR 67
2546: ARRAY
2547: PUSH
2548: FOR_TO
2549: IFFALSE 2688
// begin tmp := Produce ( amfac2 , [ us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_remote , [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ) ;
2551: LD_ADDR_VAR 0 3
2555: PUSH
2556: LD_INT 6
2558: PPUSH
2559: LD_INT 2
2561: PUSH
2562: LD_INT 3
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: PUSH
2569: LD_INT 1
2571: PPUSH
2572: LD_INT 2
2574: PPUSH
2575: CALL_OW 12
2579: ARRAY
2580: PPUSH
2581: LD_INT 1
2583: PUSH
2584: LD_INT 3
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: PUSH
2591: LD_INT 1
2593: PPUSH
2594: LD_INT 2
2596: PPUSH
2597: CALL_OW 12
2601: ARRAY
2602: PPUSH
2603: LD_INT 2
2605: PPUSH
2606: LD_INT 4
2608: PUSH
2609: LD_INT 5
2611: PUSH
2612: LD_INT 9
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: LIST
2619: PUSH
2620: LD_INT 1
2622: PPUSH
2623: LD_INT 3
2625: PPUSH
2626: CALL_OW 12
2630: ARRAY
2631: PPUSH
2632: CALL 37958 0 5
2636: ST_TO_ADDR
// if tmp then
2637: LD_VAR 0 3
2641: IFFALSE 2686
// AddComConstruct ( amfac2 , tmp [ 1 ] , tmp [ 2 ] , tmp [ 3 ] , tmp [ 4 ] ) ;
2643: LD_INT 6
2645: PPUSH
2646: LD_VAR 0 3
2650: PUSH
2651: LD_INT 1
2653: ARRAY
2654: PPUSH
2655: LD_VAR 0 3
2659: PUSH
2660: LD_INT 2
2662: ARRAY
2663: PPUSH
2664: LD_VAR 0 3
2668: PUSH
2669: LD_INT 3
2671: ARRAY
2672: PPUSH
2673: LD_VAR 0 3
2677: PUSH
2678: LD_INT 4
2680: ARRAY
2681: PPUSH
2682: CALL_OW 185
// end ;
2686: GO 2548
2688: POP
2689: POP
// repeat wait ( 0 0$1 ) ;
2690: LD_INT 35
2692: PPUSH
2693: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
2697: LD_INT 22
2699: PUSH
2700: LD_INT 1
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: PUSH
2707: LD_INT 33
2709: PUSH
2710: LD_INT 2
2712: PUSH
2713: EMPTY
2714: LIST
2715: LIST
2716: PUSH
2717: EMPTY
2718: LIST
2719: LIST
2720: PPUSH
2721: CALL_OW 69
2725: PUSH
2726: LD_INT 4
2728: PUSH
2729: LD_INT 5
2731: PUSH
2732: LD_INT 6
2734: PUSH
2735: LD_INT 7
2737: PUSH
2738: EMPTY
2739: LIST
2740: LIST
2741: LIST
2742: LIST
2743: PUSH
2744: LD_OWVAR 67
2748: ARRAY
2749: GREATEREQUAL
2750: IFFALSE 2690
// defenders := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ;
2752: LD_ADDR_EXP 20
2756: PUSH
2757: LD_INT 22
2759: PUSH
2760: LD_INT 1
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: PUSH
2767: LD_INT 33
2769: PUSH
2770: LD_INT 2
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: PUSH
2777: EMPTY
2778: LIST
2779: LIST
2780: PPUSH
2781: CALL_OW 69
2785: ST_TO_ADDR
// end ;
2786: LD_VAR 0 1
2790: RET
// export function Defend ; var i , un , veh , tmp ; begin
2791: LD_INT 0
2793: PPUSH
2794: PPUSH
2795: PPUSH
2796: PPUSH
2797: PPUSH
// defcon_wave := defcon_wave + 1 ;
2798: LD_ADDR_EXP 22
2802: PUSH
2803: LD_EXP 22
2807: PUSH
2808: LD_INT 1
2810: PLUS
2811: ST_TO_ADDR
// if not defenders then
2812: LD_EXP 20
2816: NOT
2817: IFFALSE 2823
// PrepareDefenders ;
2819: CALL 2501 0 0
// if defcon_wave > 1 then
2823: LD_EXP 22
2827: PUSH
2828: LD_INT 1
2830: GREATER
2831: IFFALSE 3089
// begin for i = 1 to defcon_wave + 2 do
2833: LD_ADDR_VAR 0 2
2837: PUSH
2838: DOUBLE
2839: LD_INT 1
2841: DEC
2842: ST_TO_ADDR
2843: LD_EXP 22
2847: PUSH
2848: LD_INT 2
2850: PLUS
2851: PUSH
2852: FOR_TO
2853: IFFALSE 2995
// begin uc_side := 1 ;
2855: LD_ADDR_OWVAR 20
2859: PUSH
2860: LD_INT 1
2862: ST_TO_ADDR
// uc_nation := 1 ;
2863: LD_ADDR_OWVAR 21
2867: PUSH
2868: LD_INT 1
2870: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_siberite , control_manual , [ us_gatling_gun , us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
2871: LD_INT 4
2873: PPUSH
2874: LD_INT 3
2876: PPUSH
2877: LD_INT 1
2879: PPUSH
2880: LD_INT 4
2882: PUSH
2883: LD_INT 6
2885: PUSH
2886: LD_INT 7
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: LIST
2893: PUSH
2894: LD_INT 1
2896: PPUSH
2897: LD_INT 3
2899: PPUSH
2900: CALL_OW 12
2904: ARRAY
2905: PPUSH
2906: LD_INT 100
2908: PPUSH
2909: CALL 40338 0 5
// veh := CreateVehicle ;
2913: LD_ADDR_VAR 0 4
2917: PUSH
2918: CALL_OW 45
2922: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2923: LD_VAR 0 4
2927: PPUSH
2928: LD_INT 1
2930: PPUSH
2931: CALL_OW 233
// defenders := defenders ^ veh ;
2935: LD_ADDR_EXP 20
2939: PUSH
2940: LD_EXP 20
2944: PUSH
2945: LD_VAR 0 4
2949: ADD
2950: ST_TO_ADDR
// PrepareHuman ( false , 3 , 9 ) ;
2951: LD_INT 0
2953: PPUSH
2954: LD_INT 3
2956: PPUSH
2957: LD_INT 9
2959: PPUSH
2960: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2964: CALL_OW 44
2968: PPUSH
2969: LD_VAR 0 4
2973: PPUSH
2974: CALL_OW 52
// PlaceUnitArea ( veh , west_spawn , false ) ;
2978: LD_VAR 0 4
2982: PPUSH
2983: LD_INT 25
2985: PPUSH
2986: LD_INT 0
2988: PPUSH
2989: CALL_OW 49
// end ;
2993: GO 2852
2995: POP
2996: POP
// for i = 1 to defcon_wave do
2997: LD_ADDR_VAR 0 2
3001: PUSH
3002: DOUBLE
3003: LD_INT 1
3005: DEC
3006: ST_TO_ADDR
3007: LD_EXP 22
3011: PUSH
3012: FOR_TO
3013: IFFALSE 3087
// begin uc_side := 1 ;
3015: LD_ADDR_OWVAR 20
3019: PUSH
3020: LD_INT 1
3022: ST_TO_ADDR
// uc_nation := 1 ;
3023: LD_ADDR_OWVAR 21
3027: PUSH
3028: LD_INT 1
3030: ST_TO_ADDR
// PrepareHuman ( false , 5 , 9 ) ;
3031: LD_INT 0
3033: PPUSH
3034: LD_INT 5
3036: PPUSH
3037: LD_INT 9
3039: PPUSH
3040: CALL_OW 380
// un := CreateHuman ;
3044: LD_ADDR_VAR 0 3
3048: PUSH
3049: CALL_OW 44
3053: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
3054: LD_VAR 0 3
3058: PPUSH
3059: LD_INT 25
3061: PPUSH
3062: LD_INT 0
3064: PPUSH
3065: CALL_OW 49
// defenders := defenders ^ un ;
3069: LD_ADDR_EXP 20
3073: PUSH
3074: LD_EXP 20
3078: PUSH
3079: LD_VAR 0 3
3083: ADD
3084: ST_TO_ADDR
// end ;
3085: GO 3012
3087: POP
3088: POP
// end ; repeat wait ( 0 0$1 ) ;
3089: LD_INT 35
3091: PPUSH
3092: CALL_OW 67
// for i in defenders do
3096: LD_ADDR_VAR 0 2
3100: PUSH
3101: LD_EXP 20
3105: PUSH
3106: FOR_IN
3107: IFFALSE 3189
// begin if defcon and GetDistUnitXY ( i , defcon [ 1 ] , defcon [ 2 ] ) > 10 and not HasTask ( i ) then
3109: LD_EXP 21
3113: PUSH
3114: LD_VAR 0 2
3118: PPUSH
3119: LD_EXP 21
3123: PUSH
3124: LD_INT 1
3126: ARRAY
3127: PPUSH
3128: LD_EXP 21
3132: PUSH
3133: LD_INT 2
3135: ARRAY
3136: PPUSH
3137: CALL_OW 297
3141: PUSH
3142: LD_INT 10
3144: GREATER
3145: AND
3146: PUSH
3147: LD_VAR 0 2
3151: PPUSH
3152: CALL_OW 314
3156: NOT
3157: AND
3158: IFFALSE 3187
// ComAgressiveMove ( i , defcon [ 1 ] , defcon [ 2 ] ) ;
3160: LD_VAR 0 2
3164: PPUSH
3165: LD_EXP 21
3169: PUSH
3170: LD_INT 1
3172: ARRAY
3173: PPUSH
3174: LD_EXP 21
3178: PUSH
3179: LD_INT 2
3181: ARRAY
3182: PPUSH
3183: CALL_OW 114
// end ;
3187: GO 3106
3189: POP
3190: POP
// until not defenders ;
3191: LD_EXP 20
3195: NOT
3196: IFFALSE 3089
// end ;
3198: LD_VAR 0 1
3202: RET
// every 0 0$1 do var radar , i ;
3203: GO 3205
3205: DISABLE
3206: LD_INT 0
3208: PPUSH
3209: PPUSH
// begin uc_side := 1 ;
3210: LD_ADDR_OWVAR 20
3214: PUSH
3215: LD_INT 1
3217: ST_TO_ADDR
// uc_nation := 1 ;
3218: LD_ADDR_OWVAR 21
3222: PUSH
3223: LD_INT 1
3225: ST_TO_ADDR
// PrepareVehicle ( us_light_wheeled , engine_solar , control_computer , us_radar , 100 ) ;
3226: LD_INT 1
3228: PPUSH
3229: LD_INT 2
3231: PPUSH
3232: LD_INT 3
3234: PPUSH
3235: LD_INT 11
3237: PPUSH
3238: LD_INT 100
3240: PPUSH
3241: CALL 40338 0 5
// radar := CreateVehicle ;
3245: LD_ADDR_VAR 0 1
3249: PUSH
3250: CALL_OW 45
3254: ST_TO_ADDR
// SetDir ( radar , 4 ) ;
3255: LD_VAR 0 1
3259: PPUSH
3260: LD_INT 4
3262: PPUSH
3263: CALL_OW 233
// PlaceUnitXY ( radar , 51 , 45 , false ) ;
3267: LD_VAR 0 1
3271: PPUSH
3272: LD_INT 51
3274: PPUSH
3275: LD_INT 45
3277: PPUSH
3278: LD_INT 0
3280: PPUSH
3281: CALL_OW 48
// repeat AddComWait ( radar , 0 0$20 ) ;
3285: LD_VAR 0 1
3289: PPUSH
3290: LD_INT 700
3292: PPUSH
3293: CALL_OW 202
// AddComMoveXY ( radar , 65 , 75 ) ;
3297: LD_VAR 0 1
3301: PPUSH
3302: LD_INT 65
3304: PPUSH
3305: LD_INT 75
3307: PPUSH
3308: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3312: LD_VAR 0 1
3316: PPUSH
3317: LD_INT 350
3319: PPUSH
3320: CALL_OW 202
// AddComMoveXY ( radar , 83 , 87 ) ;
3324: LD_VAR 0 1
3328: PPUSH
3329: LD_INT 83
3331: PPUSH
3332: LD_INT 87
3334: PPUSH
3335: CALL_OW 171
// AddComWait ( radar , 0 0$15 ) ;
3339: LD_VAR 0 1
3343: PPUSH
3344: LD_INT 525
3346: PPUSH
3347: CALL_OW 202
// AddComMoveXY ( radar , 94 , 81 ) ;
3351: LD_VAR 0 1
3355: PPUSH
3356: LD_INT 94
3358: PPUSH
3359: LD_INT 81
3361: PPUSH
3362: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3366: LD_VAR 0 1
3370: PPUSH
3371: LD_INT 350
3373: PPUSH
3374: CALL_OW 202
// AddComMoveXY ( radar , 55 , 48 ) ;
3378: LD_VAR 0 1
3382: PPUSH
3383: LD_INT 55
3385: PPUSH
3386: LD_INT 48
3388: PPUSH
3389: CALL_OW 171
// wait ( 1 1$00 ) ;
3393: LD_INT 2100
3395: PPUSH
3396: CALL_OW 67
// until not IsOk ( radar ) ;
3400: LD_VAR 0 1
3404: PPUSH
3405: CALL_OW 302
3409: NOT
3410: IFFALSE 3285
// end ;
3412: PPOPN 2
3414: END
// every 7 7$30 trigger Difficulty > 1 and extra_patrol do var un ;
3415: LD_OWVAR 67
3419: PUSH
3420: LD_INT 1
3422: GREATER
3423: PUSH
3424: LD_EXP 11
3428: AND
3429: IFFALSE 3651
3431: GO 3433
3433: DISABLE
3434: LD_INT 0
3436: PPUSH
// begin enable ;
3437: ENABLE
// uc_side := 1 ;
3438: LD_ADDR_OWVAR 20
3442: PUSH
3443: LD_INT 1
3445: ST_TO_ADDR
// uc_nation := 1 ;
3446: LD_ADDR_OWVAR 21
3450: PUSH
3451: LD_INT 1
3453: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_gatling_gun , 100 ) ;
3454: LD_INT 5
3456: PPUSH
3457: LD_INT 3
3459: PPUSH
3460: LD_INT 3
3462: PPUSH
3463: LD_INT 4
3465: PPUSH
3466: LD_INT 100
3468: PPUSH
3469: CALL 40338 0 5
// un := CreateVehicle ;
3473: LD_ADDR_VAR 0 1
3477: PUSH
3478: CALL_OW 45
3482: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3483: LD_VAR 0 1
3487: PPUSH
3488: LD_INT 3
3490: PPUSH
3491: CALL_OW 233
// PlaceUnitXY ( un , 155 , 2 , false ) ;
3495: LD_VAR 0 1
3499: PPUSH
3500: LD_INT 155
3502: PPUSH
3503: LD_INT 2
3505: PPUSH
3506: LD_INT 0
3508: PPUSH
3509: CALL_OW 48
// ComAgressiveMove ( un , 169 , 77 ) ;
3513: LD_VAR 0 1
3517: PPUSH
3518: LD_INT 169
3520: PPUSH
3521: LD_INT 77
3523: PPUSH
3524: CALL_OW 114
// AddComWait ( un , 0 0$2 ) ;
3528: LD_VAR 0 1
3532: PPUSH
3533: LD_INT 70
3535: PPUSH
3536: CALL_OW 202
// AddComAgressiveMove ( un , 134 , 62 ) ;
3540: LD_VAR 0 1
3544: PPUSH
3545: LD_INT 134
3547: PPUSH
3548: LD_INT 62
3550: PPUSH
3551: CALL_OW 174
// AddComAgressiveMove ( un , 103 , 42 ) ;
3555: LD_VAR 0 1
3559: PPUSH
3560: LD_INT 103
3562: PPUSH
3563: LD_INT 42
3565: PPUSH
3566: CALL_OW 174
// AddComWait ( un , 0 0$2 ) ;
3570: LD_VAR 0 1
3574: PPUSH
3575: LD_INT 70
3577: PPUSH
3578: CALL_OW 202
// AddComAgressiveMove ( un , 84 , 2 ) ;
3582: LD_VAR 0 1
3586: PPUSH
3587: LD_INT 84
3589: PPUSH
3590: LD_INT 2
3592: PPUSH
3593: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
3597: LD_INT 35
3599: PPUSH
3600: CALL_OW 67
// if IsDead ( un ) then
3604: LD_VAR 0 1
3608: PPUSH
3609: CALL_OW 301
3613: IFFALSE 3625
// begin extra_patrol := false ;
3615: LD_ADDR_EXP 11
3619: PUSH
3620: LD_INT 0
3622: ST_TO_ADDR
// exit ;
3623: GO 3651
// end ; until IsAt ( un , 84 , 2 ) ;
3625: LD_VAR 0 1
3629: PPUSH
3630: LD_INT 84
3632: PPUSH
3633: LD_INT 2
3635: PPUSH
3636: CALL_OW 307
3640: IFFALSE 3597
// RemoveUnit ( un ) ;
3642: LD_VAR 0 1
3646: PPUSH
3647: CALL_OW 64
// end ; end_of_file
3651: PPOPN 1
3653: END
// export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Mike ; export function PrepareFriends ; var i , tmp , buildings , areas , bunkers , cl ; begin
3654: LD_INT 0
3656: PPUSH
3657: PPUSH
3658: PPUSH
3659: PPUSH
3660: PPUSH
3661: PPUSH
3662: PPUSH
// uc_side := 4 ;
3663: LD_ADDR_OWVAR 20
3667: PUSH
3668: LD_INT 4
3670: ST_TO_ADDR
// uc_nation := 1 ;
3671: LD_ADDR_OWVAR 21
3675: PUSH
3676: LD_INT 1
3678: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 10c_ ) ;
3679: LD_ADDR_EXP 37
3683: PUSH
3684: LD_STRING DeltaDoctor
3686: PPUSH
3687: LD_EXP 1
3691: NOT
3692: PPUSH
3693: LD_STRING 10c_
3695: PPUSH
3696: CALL 35323 0 3
3700: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 10c_ ) ;
3701: LD_ADDR_EXP 36
3705: PUSH
3706: LD_STRING Joan
3708: PPUSH
3709: LD_EXP 1
3713: NOT
3714: PPUSH
3715: LD_STRING 10c_
3717: PPUSH
3718: CALL 35323 0 3
3722: ST_TO_ADDR
// if Joan then
3723: LD_EXP 36
3727: IFFALSE 3758
// friends := Insert ( friends , friends + 1 , Joan ) ;
3729: LD_ADDR_EXP 4
3733: PUSH
3734: LD_EXP 4
3738: PPUSH
3739: LD_EXP 4
3743: PUSH
3744: LD_INT 1
3746: PLUS
3747: PPUSH
3748: LD_EXP 36
3752: PPUSH
3753: CALL_OW 2
3757: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 10c_ ) ;
3758: LD_ADDR_EXP 35
3762: PUSH
3763: LD_STRING Simms
3765: PPUSH
3766: LD_EXP 1
3770: NOT
3771: PPUSH
3772: LD_STRING 10c_
3774: PPUSH
3775: CALL 35323 0 3
3779: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 11_ ) ;
3780: LD_ADDR_EXP 34
3784: PUSH
3785: LD_STRING Kikuchi
3787: PPUSH
3788: LD_EXP 1
3792: NOT
3793: PPUSH
3794: LD_STRING 11_
3796: PPUSH
3797: CALL 35323 0 3
3801: ST_TO_ADDR
// if Kikuchi then
3802: LD_EXP 34
3806: IFFALSE 3837
// friends := Insert ( friends , friends + 1 , Kikuchi ) ;
3808: LD_ADDR_EXP 4
3812: PUSH
3813: LD_EXP 4
3817: PPUSH
3818: LD_EXP 4
3822: PUSH
3823: LD_INT 1
3825: PLUS
3826: PPUSH
3827: LD_EXP 34
3831: PPUSH
3832: CALL_OW 2
3836: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 11_ ) ;
3837: LD_ADDR_EXP 33
3841: PUSH
3842: LD_STRING Frank
3844: PPUSH
3845: LD_EXP 1
3849: NOT
3850: PPUSH
3851: LD_STRING 11_
3853: PPUSH
3854: CALL 35323 0 3
3858: ST_TO_ADDR
// if Frank then
3859: LD_EXP 33
3863: IFFALSE 3894
// friends := Insert ( friends , friends + 1 , Frank ) ;
3865: LD_ADDR_EXP 4
3869: PUSH
3870: LD_EXP 4
3874: PPUSH
3875: LD_EXP 4
3879: PUSH
3880: LD_INT 1
3882: PLUS
3883: PPUSH
3884: LD_EXP 33
3888: PPUSH
3889: CALL_OW 2
3893: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , 11_ ) ;
3894: LD_ADDR_EXP 32
3898: PUSH
3899: LD_STRING Gary
3901: PPUSH
3902: LD_EXP 1
3906: NOT
3907: PPUSH
3908: LD_STRING 11_
3910: PPUSH
3911: CALL 35323 0 3
3915: ST_TO_ADDR
// if Gary then
3916: LD_EXP 32
3920: IFFALSE 3951
// friends := Insert ( friends , friends + 1 , Gary ) ;
3922: LD_ADDR_EXP 4
3926: PUSH
3927: LD_EXP 4
3931: PPUSH
3932: LD_EXP 4
3936: PUSH
3937: LD_INT 1
3939: PLUS
3940: PPUSH
3941: LD_EXP 32
3945: PPUSH
3946: CALL_OW 2
3950: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , ( not debug ) , 11_ ) ;
3951: LD_ADDR_EXP 31
3955: PUSH
3956: LD_STRING Cornell
3958: PPUSH
3959: LD_EXP 1
3963: NOT
3964: PPUSH
3965: LD_STRING 11_
3967: PPUSH
3968: CALL 35323 0 3
3972: ST_TO_ADDR
// if Cornel then
3973: LD_EXP 31
3977: IFFALSE 4008
// friends := Insert ( friends , friends + 1 , Cornel ) ;
3979: LD_ADDR_EXP 4
3983: PUSH
3984: LD_EXP 4
3988: PPUSH
3989: LD_EXP 4
3993: PUSH
3994: LD_INT 1
3996: PLUS
3997: PPUSH
3998: LD_EXP 31
4002: PPUSH
4003: CALL_OW 2
4007: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , 11_ ) ;
4008: LD_ADDR_EXP 30
4012: PUSH
4013: LD_STRING Houten
4015: PPUSH
4016: LD_EXP 1
4020: NOT
4021: PPUSH
4022: LD_STRING 11_
4024: PPUSH
4025: CALL 35323 0 3
4029: ST_TO_ADDR
// if Houten then
4030: LD_EXP 30
4034: IFFALSE 4065
// friends := Insert ( friends , friends + 1 , Houten ) ;
4036: LD_ADDR_EXP 4
4040: PUSH
4041: LD_EXP 4
4045: PPUSH
4046: LD_EXP 4
4050: PUSH
4051: LD_INT 1
4053: PLUS
4054: PPUSH
4055: LD_EXP 30
4059: PPUSH
4060: CALL_OW 2
4064: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 11_ ) ;
4065: LD_ADDR_EXP 29
4069: PUSH
4070: LD_STRING Gladstone
4072: PPUSH
4073: LD_EXP 1
4077: NOT
4078: PPUSH
4079: LD_STRING 11_
4081: PPUSH
4082: CALL 35323 0 3
4086: ST_TO_ADDR
// if Gladstone then
4087: LD_EXP 29
4091: IFFALSE 4122
// friends := Insert ( friends , friends + 1 , Gladstone ) ;
4093: LD_ADDR_EXP 4
4097: PUSH
4098: LD_EXP 4
4102: PPUSH
4103: LD_EXP 4
4107: PUSH
4108: LD_INT 1
4110: PLUS
4111: PPUSH
4112: LD_EXP 29
4116: PPUSH
4117: CALL_OW 2
4121: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 11_ ) ;
4122: LD_ADDR_EXP 23
4126: PUSH
4127: LD_STRING Lisa
4129: PPUSH
4130: LD_EXP 1
4134: NOT
4135: PPUSH
4136: LD_STRING 11_
4138: PPUSH
4139: CALL 35323 0 3
4143: ST_TO_ADDR
// if Lisa then
4144: LD_EXP 23
4148: IFFALSE 4173
// friends := Insert ( friends , 1 , Lisa ) ;
4150: LD_ADDR_EXP 4
4154: PUSH
4155: LD_EXP 4
4159: PPUSH
4160: LD_INT 1
4162: PPUSH
4163: LD_EXP 23
4167: PPUSH
4168: CALL_OW 2
4172: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 11_ ) ;
4173: LD_ADDR_EXP 24
4177: PUSH
4178: LD_STRING Donaldson
4180: PPUSH
4181: LD_EXP 1
4185: NOT
4186: PPUSH
4187: LD_STRING 11_
4189: PPUSH
4190: CALL 35323 0 3
4194: ST_TO_ADDR
// if Donaldson then
4195: LD_EXP 24
4199: IFFALSE 4230
// friends := Insert ( friends , friends + 1 , Donaldson ) ;
4201: LD_ADDR_EXP 4
4205: PUSH
4206: LD_EXP 4
4210: PPUSH
4211: LD_EXP 4
4215: PUSH
4216: LD_INT 1
4218: PLUS
4219: PPUSH
4220: LD_EXP 24
4224: PPUSH
4225: CALL_OW 2
4229: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 11_ ) ;
4230: LD_ADDR_EXP 25
4234: PUSH
4235: LD_STRING Bobby
4237: PPUSH
4238: LD_EXP 1
4242: NOT
4243: PPUSH
4244: LD_STRING 11_
4246: PPUSH
4247: CALL 35323 0 3
4251: ST_TO_ADDR
// if Bobby then
4252: LD_EXP 25
4256: IFFALSE 4287
// friends := Insert ( friends , friends + 1 , Bobby ) ;
4258: LD_ADDR_EXP 4
4262: PUSH
4263: LD_EXP 4
4267: PPUSH
4268: LD_EXP 4
4272: PUSH
4273: LD_INT 1
4275: PLUS
4276: PPUSH
4277: LD_EXP 25
4281: PPUSH
4282: CALL_OW 2
4286: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 11_ ) ;
4287: LD_ADDR_EXP 26
4291: PUSH
4292: LD_STRING Cyrus
4294: PPUSH
4295: LD_EXP 1
4299: NOT
4300: PPUSH
4301: LD_STRING 11_
4303: PPUSH
4304: CALL 35323 0 3
4308: ST_TO_ADDR
// if Cyrus then
4309: LD_EXP 26
4313: IFFALSE 4344
// friends := Insert ( friends , friends + 1 , Cyrus ) ;
4315: LD_ADDR_EXP 4
4319: PUSH
4320: LD_EXP 4
4324: PPUSH
4325: LD_EXP 4
4329: PUSH
4330: LD_INT 1
4332: PLUS
4333: PPUSH
4334: LD_EXP 26
4338: PPUSH
4339: CALL_OW 2
4343: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 11_ ) ;
4344: LD_ADDR_EXP 27
4348: PUSH
4349: LD_STRING Denis
4351: PPUSH
4352: LD_EXP 1
4356: NOT
4357: PPUSH
4358: LD_STRING 11_
4360: PPUSH
4361: CALL 35323 0 3
4365: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , 11_ ) ;
4366: LD_ADDR_EXP 28
4370: PUSH
4371: LD_STRING Brown
4373: PPUSH
4374: LD_EXP 1
4378: NOT
4379: PPUSH
4380: LD_STRING 11_
4382: PPUSH
4383: CALL 35323 0 3
4387: ST_TO_ADDR
// if Brown then
4388: LD_EXP 28
4392: IFFALSE 4423
// friends := Insert ( friends , friends + 1 , Brown ) ;
4394: LD_ADDR_EXP 4
4398: PUSH
4399: LD_EXP 4
4403: PPUSH
4404: LD_EXP 4
4408: PUSH
4409: LD_INT 1
4411: PLUS
4412: PPUSH
4413: LD_EXP 28
4417: PPUSH
4418: CALL_OW 2
4422: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , 10c_ ) ;
4423: LD_ADDR_EXP 38
4427: PUSH
4428: LD_STRING Mike
4430: PPUSH
4431: LD_EXP 1
4435: NOT
4436: PPUSH
4437: LD_STRING 10c_
4439: PPUSH
4440: CALL 35323 0 3
4444: ST_TO_ADDR
// if Mike then
4445: LD_EXP 38
4449: IFFALSE 4490
// begin SetClass ( Mike , class_apeman_engineer ) ;
4451: LD_EXP 38
4455: PPUSH
4456: LD_INT 16
4458: PPUSH
4459: CALL_OW 336
// PlaceUnitXY ( Mike , 180 , 87 , false ) ;
4463: LD_EXP 38
4467: PPUSH
4468: LD_INT 180
4470: PPUSH
4471: LD_INT 87
4473: PPUSH
4474: LD_INT 0
4476: PPUSH
4477: CALL_OW 48
// ComHold ( Mike ) ;
4481: LD_EXP 38
4485: PPUSH
4486: CALL_OW 140
// end ; friends := friends ^ CreateCharacterSet ( 11c_others ) ^ CreateCharacterSet ( 11_others ) ;
4490: LD_ADDR_EXP 4
4494: PUSH
4495: LD_EXP 4
4499: PUSH
4500: LD_STRING 11c_others
4502: PPUSH
4503: CALL_OW 31
4507: ADD
4508: PUSH
4509: LD_STRING 11_others
4511: PPUSH
4512: CALL_OW 31
4516: ADD
4517: ST_TO_ADDR
// if friends < 18 then
4518: LD_EXP 4
4522: PUSH
4523: LD_INT 18
4525: LESS
4526: IFFALSE 4598
// for i = 1 to 18 do
4528: LD_ADDR_VAR 0 2
4532: PUSH
4533: DOUBLE
4534: LD_INT 1
4536: DEC
4537: ST_TO_ADDR
4538: LD_INT 18
4540: PUSH
4541: FOR_TO
4542: IFFALSE 4596
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 7 ) ;
4544: LD_INT 0
4546: PPUSH
4547: LD_INT 1
4549: PPUSH
4550: LD_INT 4
4552: PPUSH
4553: CALL_OW 12
4557: PPUSH
4558: LD_INT 7
4560: PPUSH
4561: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
4565: LD_ADDR_EXP 4
4569: PUSH
4570: LD_EXP 4
4574: PPUSH
4575: LD_EXP 4
4579: PUSH
4580: LD_INT 1
4582: PLUS
4583: PPUSH
4584: CALL_OW 44
4588: PPUSH
4589: CALL_OW 2
4593: ST_TO_ADDR
// end ;
4594: GO 4541
4596: POP
4597: POP
// for i in friends do
4598: LD_ADDR_VAR 0 2
4602: PUSH
4603: LD_EXP 4
4607: PUSH
4608: FOR_IN
4609: IFFALSE 4682
// if GetNation ( i ) = nation_american and GetSkill ( i , 1 ) >= GetSkill ( i , 4 ) then
4611: LD_VAR 0 2
4615: PPUSH
4616: CALL_OW 248
4620: PUSH
4621: LD_INT 1
4623: EQUAL
4624: PUSH
4625: LD_VAR 0 2
4629: PPUSH
4630: LD_INT 1
4632: PPUSH
4633: CALL_OW 259
4637: PUSH
4638: LD_VAR 0 2
4642: PPUSH
4643: LD_INT 4
4645: PPUSH
4646: CALL_OW 259
4650: GREATEREQUAL
4651: AND
4652: IFFALSE 4668
// SetClass ( i , class_soldier ) else
4654: LD_VAR 0 2
4658: PPUSH
4659: LD_INT 1
4661: PPUSH
4662: CALL_OW 336
4666: GO 4680
// SetClass ( i , class_scientistic ) ;
4668: LD_VAR 0 2
4672: PPUSH
4673: LD_INT 4
4675: PPUSH
4676: CALL_OW 336
4680: GO 4608
4682: POP
4683: POP
// if Frank then
4684: LD_EXP 33
4688: IFFALSE 4702
// SetClass ( Frank , class_sniper ) ;
4690: LD_EXP 33
4694: PPUSH
4695: LD_INT 5
4697: PPUSH
4698: CALL_OW 336
// SetClass ( [ Joan , Denis , DeltaDoctor , Simms ] , class_scientistic ) ;
4702: LD_EXP 36
4706: PUSH
4707: LD_EXP 27
4711: PUSH
4712: LD_EXP 37
4716: PUSH
4717: LD_EXP 35
4721: PUSH
4722: EMPTY
4723: LIST
4724: LIST
4725: LIST
4726: LIST
4727: PPUSH
4728: LD_INT 4
4730: PPUSH
4731: CALL_OW 336
// selected = CharacterSelection (  , 7 , 7 , [ sel_dont_change_class , JMM , Roth , Simms , Denis , DeltaDoctor , sel_not_hired , sel_changeable , sel_change_class ] ^ friends , [ class_soldier , [ class_scientistic , 2 ] , [ class_sniper , 0 , 3 ] ] ) ;
4735: LD_ADDR_EXP 3
4739: PUSH
4740: LD_STRING 
4742: PPUSH
4743: LD_INT 7
4745: PPUSH
4746: LD_INT 7
4748: PPUSH
4749: LD_INT -6
4751: PUSH
4752: LD_EXP 14
4756: PUSH
4757: LD_EXP 15
4761: PUSH
4762: LD_EXP 35
4766: PUSH
4767: LD_EXP 27
4771: PUSH
4772: LD_EXP 37
4776: PUSH
4777: LD_INT -2
4779: PUSH
4780: LD_INT -3
4782: PUSH
4783: LD_INT -5
4785: PUSH
4786: EMPTY
4787: LIST
4788: LIST
4789: LIST
4790: LIST
4791: LIST
4792: LIST
4793: LIST
4794: LIST
4795: LIST
4796: PUSH
4797: LD_EXP 4
4801: ADD
4802: PPUSH
4803: LD_INT 1
4805: PUSH
4806: LD_INT 4
4808: PUSH
4809: LD_INT 2
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: PUSH
4816: LD_INT 5
4818: PUSH
4819: LD_INT 0
4821: PUSH
4822: LD_INT 3
4824: PUSH
4825: EMPTY
4826: LIST
4827: LIST
4828: LIST
4829: PUSH
4830: EMPTY
4831: LIST
4832: LIST
4833: LIST
4834: PPUSH
4835: CALL_OW 42
4839: ST_TO_ADDR
// if Simms then
4840: LD_EXP 35
4844: IFFALSE 4862
// selected := selected ^ Simms ;
4846: LD_ADDR_EXP 3
4850: PUSH
4851: LD_EXP 3
4855: PUSH
4856: LD_EXP 35
4860: ADD
4861: ST_TO_ADDR
// if Denis then
4862: LD_EXP 27
4866: IFFALSE 4884
// selected := selected ^ Denis ;
4868: LD_ADDR_EXP 3
4872: PUSH
4873: LD_EXP 3
4877: PUSH
4878: LD_EXP 27
4882: ADD
4883: ST_TO_ADDR
// if DeltaDoctor then
4884: LD_EXP 37
4888: IFFALSE 4906
// selected := selected ^ DeltaDoctor ;
4890: LD_ADDR_EXP 3
4894: PUSH
4895: LD_EXP 3
4899: PUSH
4900: LD_EXP 37
4904: ADD
4905: ST_TO_ADDR
// friends := friends diff selected ;
4906: LD_ADDR_EXP 4
4910: PUSH
4911: LD_EXP 4
4915: PUSH
4916: LD_EXP 3
4920: DIFF
4921: ST_TO_ADDR
// buildings := [ [ ambar1 , ambar2 , ambar3 ] , [ amlab2 , amlab3 , amlab4 ] ] ;
4922: LD_ADDR_VAR 0 4
4926: PUSH
4927: LD_INT 111
4929: PUSH
4930: LD_INT 137
4932: PUSH
4933: LD_INT 51
4935: PUSH
4936: EMPTY
4937: LIST
4938: LIST
4939: LIST
4940: PUSH
4941: LD_INT 147
4943: PUSH
4944: LD_INT 129
4946: PUSH
4947: LD_INT 25
4949: PUSH
4950: EMPTY
4951: LIST
4952: LIST
4953: LIST
4954: PUSH
4955: EMPTY
4956: LIST
4957: LIST
4958: ST_TO_ADDR
// areas := [ friends_spawn_1 , friends_spawn_2 , friends_spawn_3 , friends_spawn_4 , friends_spawn_5 , friends_spawn_6 ] ;
4959: LD_ADDR_VAR 0 5
4963: PUSH
4964: LD_INT 5
4966: PUSH
4967: LD_INT 6
4969: PUSH
4970: LD_INT 7
4972: PUSH
4973: LD_INT 8
4975: PUSH
4976: LD_INT 17
4978: PUSH
4979: LD_INT 18
4981: PUSH
4982: EMPTY
4983: LIST
4984: LIST
4985: LIST
4986: LIST
4987: LIST
4988: LIST
4989: ST_TO_ADDR
// for i in buildings do
4990: LD_ADDR_VAR 0 2
4994: PUSH
4995: LD_VAR 0 4
4999: PUSH
5000: FOR_IN
5001: IFFALSE 5017
// SetSide ( i , 4 ) ;
5003: LD_VAR 0 2
5007: PPUSH
5008: LD_INT 4
5010: PPUSH
5011: CALL_OW 235
5015: GO 5000
5017: POP
5018: POP
// for i in selected do
5019: LD_ADDR_VAR 0 2
5023: PUSH
5024: LD_EXP 3
5028: PUSH
5029: FOR_IN
5030: IFFALSE 5370
// begin if GetClass ( i ) in [ 1 , 5 ] then
5032: LD_VAR 0 2
5036: PPUSH
5037: CALL_OW 257
5041: PUSH
5042: LD_INT 1
5044: PUSH
5045: LD_INT 5
5047: PUSH
5048: EMPTY
5049: LIST
5050: LIST
5051: IN
5052: IFFALSE 5212
// begin if buildings [ 1 ] then
5054: LD_VAR 0 4
5058: PUSH
5059: LD_INT 1
5061: ARRAY
5062: IFFALSE 5123
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
5064: LD_VAR 0 2
5068: PPUSH
5069: LD_VAR 0 4
5073: PUSH
5074: LD_INT 1
5076: ARRAY
5077: PUSH
5078: LD_INT 1
5080: ARRAY
5081: PPUSH
5082: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
5086: LD_ADDR_VAR 0 4
5090: PUSH
5091: LD_VAR 0 4
5095: PPUSH
5096: LD_INT 1
5098: PPUSH
5099: LD_VAR 0 4
5103: PUSH
5104: LD_INT 1
5106: ARRAY
5107: PPUSH
5108: LD_INT 1
5110: PPUSH
5111: CALL_OW 3
5115: PPUSH
5116: CALL_OW 1
5120: ST_TO_ADDR
// end else
5121: GO 5210
// begin if not areas then
5123: LD_VAR 0 5
5127: NOT
5128: IFFALSE 5162
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5130: LD_VAR 0 2
5134: PPUSH
5135: LD_INT 87
5137: PPUSH
5138: LD_INT 68
5140: PPUSH
5141: LD_INT 8
5143: PPUSH
5144: LD_INT 0
5146: PPUSH
5147: CALL_OW 50
// ComHold ( i ) ;
5151: LD_VAR 0 2
5155: PPUSH
5156: CALL_OW 140
// end else
5160: GO 5210
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5162: LD_VAR 0 2
5166: PPUSH
5167: LD_VAR 0 5
5171: PUSH
5172: LD_INT 1
5174: ARRAY
5175: PPUSH
5176: LD_INT 0
5178: PPUSH
5179: CALL_OW 49
// ComHold ( i ) ;
5183: LD_VAR 0 2
5187: PPUSH
5188: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5192: LD_ADDR_VAR 0 5
5196: PUSH
5197: LD_VAR 0 5
5201: PPUSH
5202: LD_INT 1
5204: PPUSH
5205: CALL_OW 3
5209: ST_TO_ADDR
// end ; end ; end else
5210: GO 5368
// begin if buildings [ 2 ] then
5212: LD_VAR 0 4
5216: PUSH
5217: LD_INT 2
5219: ARRAY
5220: IFFALSE 5281
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
5222: LD_VAR 0 2
5226: PPUSH
5227: LD_VAR 0 4
5231: PUSH
5232: LD_INT 2
5234: ARRAY
5235: PUSH
5236: LD_INT 1
5238: ARRAY
5239: PPUSH
5240: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
5244: LD_ADDR_VAR 0 4
5248: PUSH
5249: LD_VAR 0 4
5253: PPUSH
5254: LD_INT 2
5256: PPUSH
5257: LD_VAR 0 4
5261: PUSH
5262: LD_INT 2
5264: ARRAY
5265: PPUSH
5266: LD_INT 1
5268: PPUSH
5269: CALL_OW 3
5273: PPUSH
5274: CALL_OW 1
5278: ST_TO_ADDR
// end else
5279: GO 5368
// begin if not areas then
5281: LD_VAR 0 5
5285: NOT
5286: IFFALSE 5320
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5288: LD_VAR 0 2
5292: PPUSH
5293: LD_INT 87
5295: PPUSH
5296: LD_INT 68
5298: PPUSH
5299: LD_INT 8
5301: PPUSH
5302: LD_INT 0
5304: PPUSH
5305: CALL_OW 50
// ComHold ( i ) ;
5309: LD_VAR 0 2
5313: PPUSH
5314: CALL_OW 140
// end else
5318: GO 5368
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5320: LD_VAR 0 2
5324: PPUSH
5325: LD_VAR 0 5
5329: PUSH
5330: LD_INT 1
5332: ARRAY
5333: PPUSH
5334: LD_INT 0
5336: PPUSH
5337: CALL_OW 49
// ComHold ( i ) ;
5341: LD_VAR 0 2
5345: PPUSH
5346: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5350: LD_ADDR_VAR 0 5
5354: PUSH
5355: LD_VAR 0 5
5359: PPUSH
5360: LD_INT 1
5362: PPUSH
5363: CALL_OW 3
5367: ST_TO_ADDR
// end ; end ; end ; end ;
5368: GO 5029
5370: POP
5371: POP
// bunkers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) ;
5372: LD_ADDR_VAR 0 6
5376: PUSH
5377: LD_INT 22
5379: PUSH
5380: LD_INT 1
5382: PUSH
5383: EMPTY
5384: LIST
5385: LIST
5386: PUSH
5387: LD_INT 30
5389: PUSH
5390: LD_INT 32
5392: PUSH
5393: EMPTY
5394: LIST
5395: LIST
5396: PUSH
5397: EMPTY
5398: LIST
5399: LIST
5400: PPUSH
5401: CALL_OW 69
5405: ST_TO_ADDR
// for i = bunkers - friends downto 1 do
5406: LD_ADDR_VAR 0 2
5410: PUSH
5411: DOUBLE
5412: LD_VAR 0 6
5416: PUSH
5417: LD_EXP 4
5421: MINUS
5422: INC
5423: ST_TO_ADDR
5424: LD_INT 1
5426: PUSH
5427: FOR_DOWNTO
5428: IFFALSE 5495
// begin PrepareHuman ( false , 1 , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
5430: LD_INT 0
5432: PPUSH
5433: LD_INT 1
5435: PPUSH
5436: LD_INT 7
5438: PUSH
5439: LD_INT 8
5441: PUSH
5442: LD_INT 9
5444: PUSH
5445: LD_INT 10
5447: PUSH
5448: EMPTY
5449: LIST
5450: LIST
5451: LIST
5452: LIST
5453: PUSH
5454: LD_OWVAR 67
5458: ARRAY
5459: PPUSH
5460: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
5464: LD_ADDR_EXP 4
5468: PUSH
5469: LD_EXP 4
5473: PPUSH
5474: LD_EXP 4
5478: PUSH
5479: LD_INT 1
5481: PLUS
5482: PPUSH
5483: CALL_OW 44
5487: PPUSH
5488: CALL_OW 2
5492: ST_TO_ADDR
// end ;
5493: GO 5427
5495: POP
5496: POP
// if friends then
5497: LD_EXP 4
5501: IFFALSE 5617
// begin tmp := friends ;
5503: LD_ADDR_VAR 0 3
5507: PUSH
5508: LD_EXP 4
5512: ST_TO_ADDR
// for i = 1 to bunkers do
5513: LD_ADDR_VAR 0 2
5517: PUSH
5518: DOUBLE
5519: LD_INT 1
5521: DEC
5522: ST_TO_ADDR
5523: LD_VAR 0 6
5527: PUSH
5528: FOR_TO
5529: IFFALSE 5615
// begin SetSide ( tmp [ tmp ] , 1 ) ;
5531: LD_VAR 0 3
5535: PUSH
5536: LD_VAR 0 3
5540: ARRAY
5541: PPUSH
5542: LD_INT 1
5544: PPUSH
5545: CALL_OW 235
// SetClass ( tmp [ tmp ] , 1 ) ;
5549: LD_VAR 0 3
5553: PUSH
5554: LD_VAR 0 3
5558: ARRAY
5559: PPUSH
5560: LD_INT 1
5562: PPUSH
5563: CALL_OW 336
// PlaceHumanInUnit ( tmp [ tmp ] , bunkers [ i ] ) ;
5567: LD_VAR 0 3
5571: PUSH
5572: LD_VAR 0 3
5576: ARRAY
5577: PPUSH
5578: LD_VAR 0 6
5582: PUSH
5583: LD_VAR 0 2
5587: ARRAY
5588: PPUSH
5589: CALL_OW 52
// tmp := Delete ( tmp , tmp ) ;
5593: LD_ADDR_VAR 0 3
5597: PUSH
5598: LD_VAR 0 3
5602: PPUSH
5603: LD_VAR 0 3
5607: PPUSH
5608: CALL_OW 3
5612: ST_TO_ADDR
// end ;
5613: GO 5528
5615: POP
5616: POP
// end ; areas := areas union [ guard_spawn_1 , guard_spawn_2 , guard_spawn_3 , guard_spawn_4 , guard_spawn_5 , guard_spawn_6 , guard_spawn_7 , guard_spawn_8 , guard_spawn_9 , guard_spawn_10 , guard_spawn_11 , guard_spawn_12 , guard_spawn_13 , guard_spawn_14 , guard_spawn_15 , guard_spawn_16 , guard_spawn_17 , guard_spawn_18 , guard_spawn_19 , guard_spawn_20 ] ;
5617: LD_ADDR_VAR 0 5
5621: PUSH
5622: LD_VAR 0 5
5626: PUSH
5627: LD_INT 9
5629: PUSH
5630: LD_INT 10
5632: PUSH
5633: LD_INT 11
5635: PUSH
5636: LD_INT 12
5638: PUSH
5639: LD_INT 13
5641: PUSH
5642: LD_INT 14
5644: PUSH
5645: LD_INT 15
5647: PUSH
5648: LD_INT 16
5650: PUSH
5651: LD_INT 26
5653: PUSH
5654: LD_INT 27
5656: PUSH
5657: LD_INT 28
5659: PUSH
5660: LD_INT 29
5662: PUSH
5663: LD_INT 30
5665: PUSH
5666: LD_INT 31
5668: PUSH
5669: LD_INT 32
5671: PUSH
5672: LD_INT 33
5674: PUSH
5675: LD_INT 34
5677: PUSH
5678: LD_INT 35
5680: PUSH
5681: LD_INT 36
5683: PUSH
5684: LD_INT 37
5686: PUSH
5687: EMPTY
5688: LIST
5689: LIST
5690: LIST
5691: LIST
5692: LIST
5693: LIST
5694: LIST
5695: LIST
5696: LIST
5697: LIST
5698: LIST
5699: LIST
5700: LIST
5701: LIST
5702: LIST
5703: LIST
5704: LIST
5705: LIST
5706: LIST
5707: LIST
5708: UNION
5709: ST_TO_ADDR
// for i in friends do
5710: LD_ADDR_VAR 0 2
5714: PUSH
5715: LD_EXP 4
5719: PUSH
5720: FOR_IN
5721: IFFALSE 6008
// begin SetTag ( i , 2 ) ;
5723: LD_VAR 0 2
5727: PPUSH
5728: LD_INT 2
5730: PPUSH
5731: CALL_OW 109
// if not GetClass ( i ) in [ class_soldier , class_scientistic , class_sniper ] then
5735: LD_VAR 0 2
5739: PPUSH
5740: CALL_OW 257
5744: PUSH
5745: LD_INT 1
5747: PUSH
5748: LD_INT 4
5750: PUSH
5751: LD_INT 5
5753: PUSH
5754: EMPTY
5755: LIST
5756: LIST
5757: LIST
5758: IN
5759: NOT
5760: IFFALSE 5774
// SetClass ( i , 1 ) ;
5762: LD_VAR 0 2
5766: PPUSH
5767: LD_INT 1
5769: PPUSH
5770: CALL_OW 336
// if GetClass ( i ) in [ class_soldier , class_sniper ] and buildings [ 1 ] then
5774: LD_VAR 0 2
5778: PPUSH
5779: CALL_OW 257
5783: PUSH
5784: LD_INT 1
5786: PUSH
5787: LD_INT 5
5789: PUSH
5790: EMPTY
5791: LIST
5792: LIST
5793: IN
5794: PUSH
5795: LD_VAR 0 4
5799: PUSH
5800: LD_INT 1
5802: ARRAY
5803: AND
5804: IFFALSE 5865
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
5806: LD_VAR 0 2
5810: PPUSH
5811: LD_VAR 0 4
5815: PUSH
5816: LD_INT 1
5818: ARRAY
5819: PUSH
5820: LD_INT 1
5822: ARRAY
5823: PPUSH
5824: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
5828: LD_ADDR_VAR 0 4
5832: PUSH
5833: LD_VAR 0 4
5837: PPUSH
5838: LD_INT 1
5840: PPUSH
5841: LD_VAR 0 4
5845: PUSH
5846: LD_INT 1
5848: ARRAY
5849: PPUSH
5850: LD_INT 1
5852: PPUSH
5853: CALL_OW 3
5857: PPUSH
5858: CALL_OW 1
5862: ST_TO_ADDR
// continue ;
5863: GO 5720
// end ; if GetClass ( i ) = class_scientistic and buildings [ 2 ] then
5865: LD_VAR 0 2
5869: PPUSH
5870: CALL_OW 257
5874: PUSH
5875: LD_INT 4
5877: EQUAL
5878: PUSH
5879: LD_VAR 0 4
5883: PUSH
5884: LD_INT 2
5886: ARRAY
5887: AND
5888: IFFALSE 5949
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
5890: LD_VAR 0 2
5894: PPUSH
5895: LD_VAR 0 4
5899: PUSH
5900: LD_INT 2
5902: ARRAY
5903: PUSH
5904: LD_INT 1
5906: ARRAY
5907: PPUSH
5908: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
5912: LD_ADDR_VAR 0 4
5916: PUSH
5917: LD_VAR 0 4
5921: PPUSH
5922: LD_INT 2
5924: PPUSH
5925: LD_VAR 0 4
5929: PUSH
5930: LD_INT 2
5932: ARRAY
5933: PPUSH
5934: LD_INT 1
5936: PPUSH
5937: CALL_OW 3
5941: PPUSH
5942: CALL_OW 1
5946: ST_TO_ADDR
// continue ;
5947: GO 5720
// end ; PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5949: LD_VAR 0 2
5953: PPUSH
5954: LD_VAR 0 5
5958: PUSH
5959: LD_INT 1
5961: ARRAY
5962: PPUSH
5963: LD_INT 0
5965: PPUSH
5966: CALL_OW 49
// areas := Delete ( areas , 1 ) ;
5970: LD_ADDR_VAR 0 5
5974: PUSH
5975: LD_VAR 0 5
5979: PPUSH
5980: LD_INT 1
5982: PPUSH
5983: CALL_OW 3
5987: ST_TO_ADDR
// ComHold ( i ) ;
5988: LD_VAR 0 2
5992: PPUSH
5993: CALL_OW 140
// if not areas then
5997: LD_VAR 0 5
6001: NOT
6002: IFFALSE 6006
// break ;
6004: GO 6008
// end ;
6006: GO 5720
6008: POP
6009: POP
// if UnitFilter ( friends , [ f_not , [ f_placed ] ] ) then
6010: LD_EXP 4
6014: PPUSH
6015: LD_INT 3
6017: PUSH
6018: LD_INT 52
6020: PUSH
6021: EMPTY
6022: LIST
6023: PUSH
6024: EMPTY
6025: LIST
6026: LIST
6027: PPUSH
6028: CALL_OW 72
6032: IFFALSE 6099
// for i in UnitFilter ( friends , [ f_not , [ f_placed ] ] ) do
6034: LD_ADDR_VAR 0 2
6038: PUSH
6039: LD_EXP 4
6043: PPUSH
6044: LD_INT 3
6046: PUSH
6047: LD_INT 52
6049: PUSH
6050: EMPTY
6051: LIST
6052: PUSH
6053: EMPTY
6054: LIST
6055: LIST
6056: PPUSH
6057: CALL_OW 72
6061: PUSH
6062: FOR_IN
6063: IFFALSE 6097
// begin PlaceUnitXYR ( i , 65 , 58 , 7 , false ) ;
6065: LD_VAR 0 2
6069: PPUSH
6070: LD_INT 65
6072: PPUSH
6073: LD_INT 58
6075: PPUSH
6076: LD_INT 7
6078: PPUSH
6079: LD_INT 0
6081: PPUSH
6082: CALL_OW 50
// ComHold ( i ) ;
6086: LD_VAR 0 2
6090: PPUSH
6091: CALL_OW 140
// end ;
6095: GO 6062
6097: POP
6098: POP
// if Frank then
6099: LD_EXP 33
6103: IFFALSE 6117
// SetClass ( Frank , class_sniper ) ;
6105: LD_EXP 33
6109: PPUSH
6110: LD_INT 5
6112: PPUSH
6113: CALL_OW 336
// end ; end_of_file
6117: LD_VAR 0 1
6121: RET
// export function CanSayRand ( side ) ; begin
6122: LD_INT 0
6124: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6125: LD_ADDR_VAR 0 2
6129: PUSH
6130: LD_INT 52
6132: PUSH
6133: EMPTY
6134: LIST
6135: PUSH
6136: LD_INT 22
6138: PUSH
6139: LD_VAR 0 1
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: PUSH
6148: LD_INT 2
6150: PUSH
6151: LD_INT 25
6153: PUSH
6154: LD_INT 1
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: PUSH
6161: LD_INT 25
6163: PUSH
6164: LD_INT 2
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: PUSH
6171: LD_INT 25
6173: PUSH
6174: LD_INT 3
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: PUSH
6181: LD_INT 25
6183: PUSH
6184: LD_INT 4
6186: PUSH
6187: EMPTY
6188: LIST
6189: LIST
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: LIST
6195: LIST
6196: LIST
6197: PUSH
6198: EMPTY
6199: LIST
6200: LIST
6201: LIST
6202: PPUSH
6203: CALL_OW 69
6207: PUSH
6208: LD_EXP 14
6212: PUSH
6213: LD_EXP 33
6217: PUSH
6218: LD_EXP 23
6222: PUSH
6223: LD_EXP 24
6227: PUSH
6228: LD_EXP 25
6232: PUSH
6233: LD_EXP 26
6237: PUSH
6238: LD_EXP 27
6242: PUSH
6243: LD_EXP 28
6247: PUSH
6248: LD_EXP 29
6252: PUSH
6253: LD_EXP 30
6257: PUSH
6258: LD_EXP 16
6262: PUSH
6263: LD_EXP 31
6267: PUSH
6268: LD_EXP 32
6272: PUSH
6273: LD_EXP 34
6277: PUSH
6278: EMPTY
6279: LIST
6280: LIST
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: LIST
6293: DIFF
6294: ST_TO_ADDR
// end ;
6295: LD_VAR 0 2
6299: RET
// export function SayRand ( sex , dial ) ; begin
6300: LD_INT 0
6302: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6303: LD_ADDR_VAR 0 3
6307: PUSH
6308: LD_INT 52
6310: PUSH
6311: EMPTY
6312: LIST
6313: PUSH
6314: LD_INT 22
6316: PUSH
6317: LD_INT 1
6319: PUSH
6320: EMPTY
6321: LIST
6322: LIST
6323: PUSH
6324: LD_INT 26
6326: PUSH
6327: LD_VAR 0 1
6331: PUSH
6332: EMPTY
6333: LIST
6334: LIST
6335: PUSH
6336: LD_INT 2
6338: PUSH
6339: LD_INT 25
6341: PUSH
6342: LD_INT 1
6344: PUSH
6345: EMPTY
6346: LIST
6347: LIST
6348: PUSH
6349: LD_INT 25
6351: PUSH
6352: LD_INT 2
6354: PUSH
6355: EMPTY
6356: LIST
6357: LIST
6358: PUSH
6359: LD_INT 25
6361: PUSH
6362: LD_INT 3
6364: PUSH
6365: EMPTY
6366: LIST
6367: LIST
6368: PUSH
6369: LD_INT 25
6371: PUSH
6372: LD_INT 4
6374: PUSH
6375: EMPTY
6376: LIST
6377: LIST
6378: PUSH
6379: EMPTY
6380: LIST
6381: LIST
6382: LIST
6383: LIST
6384: LIST
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: LIST
6390: LIST
6391: PPUSH
6392: CALL_OW 69
6396: PUSH
6397: LD_EXP 14
6401: PUSH
6402: LD_EXP 33
6406: PUSH
6407: LD_EXP 23
6411: PUSH
6412: LD_EXP 24
6416: PUSH
6417: LD_EXP 25
6421: PUSH
6422: LD_EXP 26
6426: PUSH
6427: LD_EXP 27
6431: PUSH
6432: LD_EXP 28
6436: PUSH
6437: LD_EXP 29
6441: PUSH
6442: LD_EXP 30
6446: PUSH
6447: LD_EXP 16
6451: PUSH
6452: LD_EXP 31
6456: PUSH
6457: LD_EXP 32
6461: PUSH
6462: LD_EXP 34
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: LIST
6476: LIST
6477: LIST
6478: LIST
6479: LIST
6480: LIST
6481: LIST
6482: DIFF
6483: ST_TO_ADDR
// if not result then
6484: LD_VAR 0 3
6488: NOT
6489: IFFALSE 6493
// exit ;
6491: GO 6521
// result := result [ 1 ] ;
6493: LD_ADDR_VAR 0 3
6497: PUSH
6498: LD_VAR 0 3
6502: PUSH
6503: LD_INT 1
6505: ARRAY
6506: ST_TO_ADDR
// Say ( result , dial ) ;
6507: LD_VAR 0 3
6511: PPUSH
6512: LD_VAR 0 2
6516: PPUSH
6517: CALL_OW 88
// end ;
6521: LD_VAR 0 3
6525: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
6526: LD_INT 0
6528: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
6529: LD_ADDR_VAR 0 4
6533: PUSH
6534: LD_INT 22
6536: PUSH
6537: LD_INT 1
6539: PUSH
6540: EMPTY
6541: LIST
6542: LIST
6543: PUSH
6544: LD_INT 26
6546: PUSH
6547: LD_VAR 0 1
6551: PUSH
6552: EMPTY
6553: LIST
6554: LIST
6555: PUSH
6556: LD_INT 2
6558: PUSH
6559: LD_INT 25
6561: PUSH
6562: LD_INT 1
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: PUSH
6569: LD_INT 25
6571: PUSH
6572: LD_INT 2
6574: PUSH
6575: EMPTY
6576: LIST
6577: LIST
6578: PUSH
6579: LD_INT 25
6581: PUSH
6582: LD_INT 3
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: PUSH
6589: LD_INT 25
6591: PUSH
6592: LD_INT 4
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: LIST
6603: LIST
6604: LIST
6605: PUSH
6606: EMPTY
6607: LIST
6608: LIST
6609: LIST
6610: PPUSH
6611: CALL_OW 69
6615: PUSH
6616: LD_EXP 14
6620: PUSH
6621: LD_EXP 33
6625: PUSH
6626: LD_EXP 23
6630: PUSH
6631: LD_EXP 24
6635: PUSH
6636: LD_EXP 25
6640: PUSH
6641: LD_EXP 26
6645: PUSH
6646: LD_EXP 27
6650: PUSH
6651: LD_EXP 28
6655: PUSH
6656: LD_EXP 29
6660: PUSH
6661: LD_EXP 30
6665: PUSH
6666: LD_EXP 16
6670: PUSH
6671: LD_EXP 31
6675: PUSH
6676: LD_EXP 32
6680: PUSH
6681: LD_EXP 34
6685: PUSH
6686: EMPTY
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: LIST
6692: LIST
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: PUSH
6702: LD_VAR 0 3
6706: ADD
6707: DIFF
6708: ST_TO_ADDR
// if not result then
6709: LD_VAR 0 4
6713: NOT
6714: IFFALSE 6718
// exit ;
6716: GO 6746
// result := result [ 1 ] ;
6718: LD_ADDR_VAR 0 4
6722: PUSH
6723: LD_VAR 0 4
6727: PUSH
6728: LD_INT 1
6730: ARRAY
6731: ST_TO_ADDR
// Say ( result , dial ) ;
6732: LD_VAR 0 4
6736: PPUSH
6737: LD_VAR 0 2
6741: PPUSH
6742: CALL_OW 88
// end ;
6746: LD_VAR 0 4
6750: RET
// export function Patrol ( unit , path , flags ) ; var i , x , y , c , p , station , tmp_path , status , enemy , e , spot_dist , safe_place , chase_range , need_refuel ; begin
6751: LD_INT 0
6753: PPUSH
6754: PPUSH
6755: PPUSH
6756: PPUSH
6757: PPUSH
6758: PPUSH
6759: PPUSH
6760: PPUSH
6761: PPUSH
6762: PPUSH
6763: PPUSH
6764: PPUSH
6765: PPUSH
6766: PPUSH
6767: PPUSH
// if not unit or not path or GetType ( unit ) = unit_building then
6768: LD_VAR 0 1
6772: NOT
6773: PUSH
6774: LD_VAR 0 2
6778: NOT
6779: OR
6780: PUSH
6781: LD_VAR 0 1
6785: PPUSH
6786: CALL_OW 247
6790: PUSH
6791: LD_INT 3
6793: EQUAL
6794: OR
6795: IFFALSE 6799
// exit ;
6797: GO 8338
// for i = path downto 1 do
6799: LD_ADDR_VAR 0 5
6803: PUSH
6804: DOUBLE
6805: LD_VAR 0 2
6809: INC
6810: ST_TO_ADDR
6811: LD_INT 1
6813: PUSH
6814: FOR_DOWNTO
6815: IFFALSE 6876
// begin if not ValidHex ( path [ i ] [ 1 ] , path [ i ] [ 2 ] ) then
6817: LD_VAR 0 2
6821: PUSH
6822: LD_VAR 0 5
6826: ARRAY
6827: PUSH
6828: LD_INT 1
6830: ARRAY
6831: PPUSH
6832: LD_VAR 0 2
6836: PUSH
6837: LD_VAR 0 5
6841: ARRAY
6842: PUSH
6843: LD_INT 2
6845: ARRAY
6846: PPUSH
6847: CALL_OW 488
6851: NOT
6852: IFFALSE 6874
// path = Delete ( path , i ) ;
6854: LD_ADDR_VAR 0 2
6858: PUSH
6859: LD_VAR 0 2
6863: PPUSH
6864: LD_VAR 0 5
6868: PPUSH
6869: CALL_OW 3
6873: ST_TO_ADDR
// end ;
6874: GO 6814
6876: POP
6877: POP
// if not path then
6878: LD_VAR 0 2
6882: NOT
6883: IFFALSE 6887
// exit ;
6885: GO 8338
// tmp_path := [ ] ;
6887: LD_ADDR_VAR 0 11
6891: PUSH
6892: EMPTY
6893: ST_TO_ADDR
// if flags then
6894: LD_VAR 0 3
6898: IFFALSE 6972
// begin if flags [ 1 ] then
6900: LD_VAR 0 3
6904: PUSH
6905: LD_INT 1
6907: ARRAY
6908: IFFALSE 6924
// safe_place = flags [ 1 ] ;
6910: LD_ADDR_VAR 0 16
6914: PUSH
6915: LD_VAR 0 3
6919: PUSH
6920: LD_INT 1
6922: ARRAY
6923: ST_TO_ADDR
// if flags [ 2 ] then
6924: LD_VAR 0 3
6928: PUSH
6929: LD_INT 2
6931: ARRAY
6932: IFFALSE 6948
// spot_dist = flags [ 2 ] ;
6934: LD_ADDR_VAR 0 15
6938: PUSH
6939: LD_VAR 0 3
6943: PUSH
6944: LD_INT 2
6946: ARRAY
6947: ST_TO_ADDR
// if flags [ 3 ] then
6948: LD_VAR 0 3
6952: PUSH
6953: LD_INT 3
6955: ARRAY
6956: IFFALSE 6972
// chase_range = flags [ 3 ] ;
6958: LD_ADDR_VAR 0 17
6962: PUSH
6963: LD_VAR 0 3
6967: PUSH
6968: LD_INT 3
6970: ARRAY
6971: ST_TO_ADDR
// end ; if not chase_range then
6972: LD_VAR 0 17
6976: NOT
6977: IFFALSE 6987
// chase_range = 8 ;
6979: LD_ADDR_VAR 0 17
6983: PUSH
6984: LD_INT 8
6986: ST_TO_ADDR
// if not spot_dist then
6987: LD_VAR 0 15
6991: NOT
6992: IFFALSE 7002
// spot_dist := 8 ;
6994: LD_ADDR_VAR 0 15
6998: PUSH
6999: LD_INT 8
7001: ST_TO_ADDR
// need_refuel = ( GetType ( unit ) = unit_vehicle and GetEngine ( unit ) <> engine_siberite ) ;
7002: LD_ADDR_VAR 0 18
7006: PUSH
7007: LD_VAR 0 1
7011: PPUSH
7012: CALL_OW 247
7016: PUSH
7017: LD_INT 2
7019: EQUAL
7020: PUSH
7021: LD_VAR 0 1
7025: PPUSH
7026: CALL_OW 262
7030: PUSH
7031: LD_INT 3
7033: NONEQUAL
7034: AND
7035: ST_TO_ADDR
// status = 1 ;
7036: LD_ADDR_VAR 0 12
7040: PUSH
7041: LD_INT 1
7043: ST_TO_ADDR
// tmp_path = [ 1 , path [ 1 ] ] ;
7044: LD_ADDR_VAR 0 11
7048: PUSH
7049: LD_INT 1
7051: PUSH
7052: LD_VAR 0 2
7056: PUSH
7057: LD_INT 1
7059: ARRAY
7060: PUSH
7061: EMPTY
7062: LIST
7063: LIST
7064: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7065: LD_INT 35
7067: PPUSH
7068: CALL_OW 67
// if need_refuel and GetFuel ( unit ) < 20 then
7072: LD_VAR 0 18
7076: PUSH
7077: LD_VAR 0 1
7081: PPUSH
7082: CALL_OW 261
7086: PUSH
7087: LD_INT 20
7089: LESS
7090: AND
7091: IFFALSE 7284
// begin station := FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_oil_mine ] , [ f_btype , b_factory ] ] ] ) ;
7093: LD_ADDR_VAR 0 10
7097: PUSH
7098: LD_INT 22
7100: PUSH
7101: LD_VAR 0 1
7105: PPUSH
7106: CALL_OW 255
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: PUSH
7115: LD_INT 2
7117: PUSH
7118: LD_INT 30
7120: PUSH
7121: LD_INT 0
7123: PUSH
7124: EMPTY
7125: LIST
7126: LIST
7127: PUSH
7128: LD_INT 30
7130: PUSH
7131: LD_INT 1
7133: PUSH
7134: EMPTY
7135: LIST
7136: LIST
7137: PUSH
7138: LD_INT 30
7140: PUSH
7141: LD_INT 29
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: PUSH
7148: LD_INT 30
7150: PUSH
7151: LD_INT 3
7153: PUSH
7154: EMPTY
7155: LIST
7156: LIST
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: LIST
7162: LIST
7163: LIST
7164: PUSH
7165: EMPTY
7166: LIST
7167: LIST
7168: PPUSH
7169: CALL_OW 69
7173: ST_TO_ADDR
// if not station then
7174: LD_VAR 0 10
7178: NOT
7179: IFFALSE 7195
// begin SetFuel ( unit , 40 ) ;
7181: LD_VAR 0 1
7185: PPUSH
7186: LD_INT 40
7188: PPUSH
7189: CALL_OW 240
// continue ;
7193: GO 7065
// end ; status := 6 ;
7195: LD_ADDR_VAR 0 12
7199: PUSH
7200: LD_INT 6
7202: ST_TO_ADDR
// station := NearestUnitToUnit ( station , unit ) ;
7203: LD_ADDR_VAR 0 10
7207: PUSH
7208: LD_VAR 0 10
7212: PPUSH
7213: LD_VAR 0 1
7217: PPUSH
7218: CALL_OW 74
7222: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7223: LD_INT 35
7225: PPUSH
7226: CALL_OW 67
// ComMoveUnit ( unit , station ) ;
7230: LD_VAR 0 1
7234: PPUSH
7235: LD_VAR 0 10
7239: PPUSH
7240: CALL_OW 112
// until GetDistUnits ( unit , station ) < 6 ;
7244: LD_VAR 0 1
7248: PPUSH
7249: LD_VAR 0 10
7253: PPUSH
7254: CALL_OW 296
7258: PUSH
7259: LD_INT 6
7261: LESS
7262: IFFALSE 7223
// SetFuel ( unit , 100 ) ;
7264: LD_VAR 0 1
7268: PPUSH
7269: LD_INT 100
7271: PPUSH
7272: CALL_OW 240
// status := 5 ;
7276: LD_ADDR_VAR 0 12
7280: PUSH
7281: LD_INT 5
7283: ST_TO_ADDR
// end ; if status = 1 then
7284: LD_VAR 0 12
7288: PUSH
7289: LD_INT 1
7291: EQUAL
7292: IFFALSE 7668
// begin enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] , [ f_dist , unit , spot_dist ] , [ f_see , 1 ] ] ) ;
7294: LD_ADDR_VAR 0 13
7298: PUSH
7299: LD_INT 81
7301: PUSH
7302: LD_VAR 0 1
7306: PPUSH
7307: CALL_OW 255
7311: PUSH
7312: EMPTY
7313: LIST
7314: LIST
7315: PUSH
7316: LD_INT 3
7318: PUSH
7319: LD_INT 21
7321: PUSH
7322: LD_INT 3
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: PUSH
7333: LD_INT 91
7335: PUSH
7336: LD_VAR 0 1
7340: PUSH
7341: LD_VAR 0 15
7345: PUSH
7346: EMPTY
7347: LIST
7348: LIST
7349: LIST
7350: PUSH
7351: LD_INT 101
7353: PUSH
7354: LD_INT 1
7356: PUSH
7357: EMPTY
7358: LIST
7359: LIST
7360: PUSH
7361: EMPTY
7362: LIST
7363: LIST
7364: LIST
7365: LIST
7366: PPUSH
7367: CALL_OW 69
7371: ST_TO_ADDR
// for i in enemy do
7372: LD_ADDR_VAR 0 5
7376: PUSH
7377: LD_VAR 0 13
7381: PUSH
7382: FOR_IN
7383: IFFALSE 7414
// if IsInvisible ( i ) then
7385: LD_VAR 0 5
7389: PPUSH
7390: CALL_OW 571
7394: IFFALSE 7412
// enemy := enemy diff i ;
7396: LD_ADDR_VAR 0 13
7400: PUSH
7401: LD_VAR 0 13
7405: PUSH
7406: LD_VAR 0 5
7410: DIFF
7411: ST_TO_ADDR
7412: GO 7382
7414: POP
7415: POP
// if enemy then
7416: LD_VAR 0 13
7420: IFFALSE 7470
// begin SetRememberedX ( unit , GetX ( unit ) ) ;
7422: LD_VAR 0 1
7426: PPUSH
7427: LD_VAR 0 1
7431: PPUSH
7432: CALL_OW 250
7436: PPUSH
7437: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
7441: LD_VAR 0 1
7445: PPUSH
7446: LD_VAR 0 1
7450: PPUSH
7451: CALL_OW 251
7455: PPUSH
7456: CALL_OW 232
// status = 2 ;
7460: LD_ADDR_VAR 0 12
7464: PUSH
7465: LD_INT 2
7467: ST_TO_ADDR
// end else
7468: GO 7668
// begin if IsAt ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) or not HasTask ( unit ) then
7470: LD_VAR 0 1
7474: PPUSH
7475: LD_VAR 0 11
7479: PUSH
7480: LD_INT 2
7482: ARRAY
7483: PUSH
7484: LD_INT 1
7486: ARRAY
7487: PPUSH
7488: LD_VAR 0 11
7492: PUSH
7493: LD_INT 2
7495: ARRAY
7496: PUSH
7497: LD_INT 2
7499: ARRAY
7500: PPUSH
7501: CALL_OW 307
7505: PUSH
7506: LD_VAR 0 1
7510: PPUSH
7511: CALL_OW 314
7515: NOT
7516: OR
7517: IFFALSE 7668
// begin wait ( 0 0$2 ) ;
7519: LD_INT 70
7521: PPUSH
7522: CALL_OW 67
// if tmp_path [ 1 ] + 1 > path then
7526: LD_VAR 0 11
7530: PUSH
7531: LD_INT 1
7533: ARRAY
7534: PUSH
7535: LD_INT 1
7537: PLUS
7538: PUSH
7539: LD_VAR 0 2
7543: GREATER
7544: IFFALSE 7569
// tmp_path := Replace ( tmp_path , 1 , 1 ) else
7546: LD_ADDR_VAR 0 11
7550: PUSH
7551: LD_VAR 0 11
7555: PPUSH
7556: LD_INT 1
7558: PPUSH
7559: LD_INT 1
7561: PPUSH
7562: CALL_OW 1
7566: ST_TO_ADDR
7567: GO 7600
// tmp_path := Replace ( tmp_path , 1 , tmp_path [ 1 ] + 1 ) ;
7569: LD_ADDR_VAR 0 11
7573: PUSH
7574: LD_VAR 0 11
7578: PPUSH
7579: LD_INT 1
7581: PPUSH
7582: LD_VAR 0 11
7586: PUSH
7587: LD_INT 1
7589: ARRAY
7590: PUSH
7591: LD_INT 1
7593: PLUS
7594: PPUSH
7595: CALL_OW 1
7599: ST_TO_ADDR
// tmp_path := Replace ( tmp_path , 2 , path [ tmp_path [ 1 ] ] ) ;
7600: LD_ADDR_VAR 0 11
7604: PUSH
7605: LD_VAR 0 11
7609: PPUSH
7610: LD_INT 2
7612: PPUSH
7613: LD_VAR 0 2
7617: PUSH
7618: LD_VAR 0 11
7622: PUSH
7623: LD_INT 1
7625: ARRAY
7626: ARRAY
7627: PPUSH
7628: CALL_OW 1
7632: ST_TO_ADDR
// ComAgressiveMove ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) ;
7633: LD_VAR 0 1
7637: PPUSH
7638: LD_VAR 0 11
7642: PUSH
7643: LD_INT 2
7645: ARRAY
7646: PUSH
7647: LD_INT 1
7649: ARRAY
7650: PPUSH
7651: LD_VAR 0 11
7655: PUSH
7656: LD_INT 2
7658: ARRAY
7659: PUSH
7660: LD_INT 2
7662: ARRAY
7663: PPUSH
7664: CALL_OW 114
// end ; end ; end ; if status = 2 then
7668: LD_VAR 0 12
7672: PUSH
7673: LD_INT 2
7675: EQUAL
7676: IFFALSE 7897
// begin if GetLives ( unit ) < 650 and safe_place then
7678: LD_VAR 0 1
7682: PPUSH
7683: CALL_OW 256
7687: PUSH
7688: LD_INT 650
7690: LESS
7691: PUSH
7692: LD_VAR 0 16
7696: AND
7697: IFFALSE 7709
// begin status = 3 ;
7699: LD_ADDR_VAR 0 12
7703: PUSH
7704: LD_INT 3
7706: ST_TO_ADDR
// continue ;
7707: GO 7065
// end ; x := GetRememberedX ( unit ) ;
7709: LD_ADDR_VAR 0 6
7713: PUSH
7714: LD_VAR 0 1
7718: PPUSH
7719: CALL_OW 252
7723: ST_TO_ADDR
// y := GetRememberedY ( unit ) ;
7724: LD_ADDR_VAR 0 7
7728: PUSH
7729: LD_VAR 0 1
7733: PPUSH
7734: CALL_OW 253
7738: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_distxy , x , y , spot_dist ] , [ f_see , 1 ] ] ) ;
7739: LD_ADDR_VAR 0 13
7743: PUSH
7744: LD_INT 81
7746: PUSH
7747: LD_VAR 0 1
7751: PPUSH
7752: CALL_OW 255
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: PUSH
7761: LD_INT 92
7763: PUSH
7764: LD_VAR 0 6
7768: PUSH
7769: LD_VAR 0 7
7773: PUSH
7774: LD_VAR 0 15
7778: PUSH
7779: EMPTY
7780: LIST
7781: LIST
7782: LIST
7783: LIST
7784: PUSH
7785: LD_INT 101
7787: PUSH
7788: LD_INT 1
7790: PUSH
7791: EMPTY
7792: LIST
7793: LIST
7794: PUSH
7795: EMPTY
7796: LIST
7797: LIST
7798: LIST
7799: PPUSH
7800: CALL_OW 69
7804: ST_TO_ADDR
// if enemy then
7805: LD_VAR 0 13
7809: IFFALSE 7880
// begin e := NearestUnitToUnit ( enemy , unit ) ;
7811: LD_ADDR_VAR 0 14
7815: PUSH
7816: LD_VAR 0 13
7820: PPUSH
7821: LD_VAR 0 1
7825: PPUSH
7826: CALL_OW 74
7830: ST_TO_ADDR
// if GetDistUnitXY ( e , x , y ) < spot_dist + chase_range then
7831: LD_VAR 0 14
7835: PPUSH
7836: LD_VAR 0 6
7840: PPUSH
7841: LD_VAR 0 7
7845: PPUSH
7846: CALL_OW 297
7850: PUSH
7851: LD_VAR 0 15
7855: PUSH
7856: LD_VAR 0 17
7860: PLUS
7861: LESS
7862: IFFALSE 7878
// ComAttackUnit ( unit , e ) ;
7864: LD_VAR 0 1
7868: PPUSH
7869: LD_VAR 0 14
7873: PPUSH
7874: CALL_OW 115
// end else
7878: GO 7897
// begin ComStop ( unit ) ;
7880: LD_VAR 0 1
7884: PPUSH
7885: CALL_OW 141
// status = 5 ;
7889: LD_ADDR_VAR 0 12
7893: PUSH
7894: LD_INT 5
7896: ST_TO_ADDR
// end ; end ; if status = 3 and safe_place then
7897: LD_VAR 0 12
7901: PUSH
7902: LD_INT 3
7904: EQUAL
7905: PUSH
7906: LD_VAR 0 16
7910: AND
7911: IFFALSE 7997
// begin repeat ComMoveXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) ;
7913: LD_VAR 0 1
7917: PPUSH
7918: LD_VAR 0 16
7922: PUSH
7923: LD_INT 1
7925: ARRAY
7926: PPUSH
7927: LD_VAR 0 16
7931: PUSH
7932: LD_INT 2
7934: ARRAY
7935: PPUSH
7936: CALL_OW 111
// wait ( 0 0$1 ) ;
7940: LD_INT 35
7942: PPUSH
7943: CALL_OW 67
// until GetDistUnitXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) < 4 ;
7947: LD_VAR 0 1
7951: PPUSH
7952: LD_VAR 0 16
7956: PUSH
7957: LD_INT 1
7959: ARRAY
7960: PPUSH
7961: LD_VAR 0 16
7965: PUSH
7966: LD_INT 2
7968: ARRAY
7969: PPUSH
7970: CALL_OW 297
7974: PUSH
7975: LD_INT 4
7977: LESS
7978: IFFALSE 7913
// ComStop ( unit ) ;
7980: LD_VAR 0 1
7984: PPUSH
7985: CALL_OW 141
// status = 4 ;
7989: LD_ADDR_VAR 0 12
7993: PUSH
7994: LD_INT 4
7996: ST_TO_ADDR
// end ; if status = 4 then
7997: LD_VAR 0 12
8001: PUSH
8002: LD_INT 4
8004: EQUAL
8005: IFFALSE 8037
// begin repeat wait ( 0 0$1 ) ;
8007: LD_INT 35
8009: PPUSH
8010: CALL_OW 67
// until GetLives ( unit ) = 1000 ;
8014: LD_VAR 0 1
8018: PPUSH
8019: CALL_OW 256
8023: PUSH
8024: LD_INT 1000
8026: EQUAL
8027: IFFALSE 8007
// status = 5 ;
8029: LD_ADDR_VAR 0 12
8033: PUSH
8034: LD_INT 5
8036: ST_TO_ADDR
// end ; if status = 5 then
8037: LD_VAR 0 12
8041: PUSH
8042: LD_INT 5
8044: EQUAL
8045: IFFALSE 8327
// begin p := 999 ;
8047: LD_ADDR_VAR 0 9
8051: PUSH
8052: LD_INT 999
8054: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ] ;
8055: LD_ADDR_VAR 0 14
8059: PUSH
8060: LD_VAR 0 11
8064: PUSH
8065: LD_INT 2
8067: ARRAY
8068: PUSH
8069: LD_INT 1
8071: ARRAY
8072: PUSH
8073: LD_VAR 0 11
8077: PUSH
8078: LD_INT 2
8080: ARRAY
8081: PUSH
8082: LD_INT 2
8084: ARRAY
8085: PUSH
8086: EMPTY
8087: LIST
8088: LIST
8089: ST_TO_ADDR
// c := 1 ;
8090: LD_ADDR_VAR 0 8
8094: PUSH
8095: LD_INT 1
8097: ST_TO_ADDR
// for i = 1 to tmp_path [ 2 ] div 2 do
8098: LD_ADDR_VAR 0 5
8102: PUSH
8103: DOUBLE
8104: LD_INT 1
8106: DEC
8107: ST_TO_ADDR
8108: LD_VAR 0 11
8112: PUSH
8113: LD_INT 2
8115: ARRAY
8116: PUSH
8117: LD_INT 2
8119: DIV
8120: PUSH
8121: FOR_TO
8122: IFFALSE 8254
// begin x := GetDistUnitXY ( unit , tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ) ;
8124: LD_ADDR_VAR 0 6
8128: PUSH
8129: LD_VAR 0 1
8133: PPUSH
8134: LD_VAR 0 11
8138: PUSH
8139: LD_INT 2
8141: ARRAY
8142: PUSH
8143: LD_VAR 0 8
8147: ARRAY
8148: PPUSH
8149: LD_VAR 0 11
8153: PUSH
8154: LD_INT 2
8156: ARRAY
8157: PUSH
8158: LD_VAR 0 8
8162: PUSH
8163: LD_INT 1
8165: PLUS
8166: ARRAY
8167: PPUSH
8168: CALL_OW 297
8172: ST_TO_ADDR
// if x < p then
8173: LD_VAR 0 6
8177: PUSH
8178: LD_VAR 0 9
8182: LESS
8183: IFFALSE 8238
// begin p := x ;
8185: LD_ADDR_VAR 0 9
8189: PUSH
8190: LD_VAR 0 6
8194: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ] ;
8195: LD_ADDR_VAR 0 14
8199: PUSH
8200: LD_VAR 0 11
8204: PUSH
8205: LD_INT 2
8207: ARRAY
8208: PUSH
8209: LD_VAR 0 8
8213: ARRAY
8214: PUSH
8215: LD_VAR 0 11
8219: PUSH
8220: LD_INT 2
8222: ARRAY
8223: PUSH
8224: LD_VAR 0 8
8228: PUSH
8229: LD_INT 1
8231: PLUS
8232: ARRAY
8233: PUSH
8234: EMPTY
8235: LIST
8236: LIST
8237: ST_TO_ADDR
// end ; c = c + 2 ;
8238: LD_ADDR_VAR 0 8
8242: PUSH
8243: LD_VAR 0 8
8247: PUSH
8248: LD_INT 2
8250: PLUS
8251: ST_TO_ADDR
// end ;
8252: GO 8121
8254: POP
8255: POP
// repeat ComMoveXY ( unit , e [ 1 ] , e [ 2 ] ) ;
8256: LD_VAR 0 1
8260: PPUSH
8261: LD_VAR 0 14
8265: PUSH
8266: LD_INT 1
8268: ARRAY
8269: PPUSH
8270: LD_VAR 0 14
8274: PUSH
8275: LD_INT 2
8277: ARRAY
8278: PPUSH
8279: CALL_OW 111
// wait ( 0 0$1 ) ;
8283: LD_INT 35
8285: PPUSH
8286: CALL_OW 67
// until IsAt ( unit , e [ 1 ] , e [ 2 ] ) ;
8290: LD_VAR 0 1
8294: PPUSH
8295: LD_VAR 0 14
8299: PUSH
8300: LD_INT 1
8302: ARRAY
8303: PPUSH
8304: LD_VAR 0 14
8308: PUSH
8309: LD_INT 2
8311: ARRAY
8312: PPUSH
8313: CALL_OW 307
8317: IFFALSE 8256
// status = 1 ;
8319: LD_ADDR_VAR 0 12
8323: PUSH
8324: LD_INT 1
8326: ST_TO_ADDR
// end ; until IsDead ( unit ) ;
8327: LD_VAR 0 1
8331: PPUSH
8332: CALL_OW 301
8336: IFFALSE 7065
// end ;
8338: LD_VAR 0 4
8342: RET
// export function Talk ( units , type , sequence , sex , class , id , order_id ) ; var i , unit , tmp , unit_id , dialog_id , sex_id , class_id ; begin
8343: LD_INT 0
8345: PPUSH
8346: PPUSH
8347: PPUSH
8348: PPUSH
8349: PPUSH
8350: PPUSH
8351: PPUSH
8352: PPUSH
// if not units or not sequence or not sex in [ sex_male , sex_female , 0 ] or not id or not order_id then
8353: LD_VAR 0 1
8357: NOT
8358: PUSH
8359: LD_VAR 0 3
8363: NOT
8364: OR
8365: PUSH
8366: LD_VAR 0 4
8370: PUSH
8371: LD_INT 1
8373: PUSH
8374: LD_INT 2
8376: PUSH
8377: LD_INT 0
8379: PUSH
8380: EMPTY
8381: LIST
8382: LIST
8383: LIST
8384: IN
8385: NOT
8386: OR
8387: PUSH
8388: LD_VAR 0 6
8392: NOT
8393: OR
8394: PUSH
8395: LD_VAR 0 7
8399: NOT
8400: OR
8401: IFFALSE 8405
// exit ;
8403: GO 8796
// sex_id :=  ;
8405: LD_ADDR_VAR 0 14
8409: PUSH
8410: LD_STRING 
8412: ST_TO_ADDR
// case class of 1 :
8413: LD_VAR 0 5
8417: PUSH
8418: LD_INT 1
8420: DOUBLE
8421: EQUAL
8422: IFTRUE 8426
8424: GO 8437
8426: POP
// class_id := Sol ; 2 :
8427: LD_ADDR_VAR 0 15
8431: PUSH
8432: LD_STRING Sol
8434: ST_TO_ADDR
8435: GO 8495
8437: LD_INT 2
8439: DOUBLE
8440: EQUAL
8441: IFTRUE 8445
8443: GO 8456
8445: POP
// class_id := Eng ; 3 :
8446: LD_ADDR_VAR 0 15
8450: PUSH
8451: LD_STRING Eng
8453: ST_TO_ADDR
8454: GO 8495
8456: LD_INT 3
8458: DOUBLE
8459: EQUAL
8460: IFTRUE 8464
8462: GO 8475
8464: POP
// class_id := Mech ; 4 :
8465: LD_ADDR_VAR 0 15
8469: PUSH
8470: LD_STRING Mech
8472: ST_TO_ADDR
8473: GO 8495
8475: LD_INT 4
8477: DOUBLE
8478: EQUAL
8479: IFTRUE 8483
8481: GO 8494
8483: POP
// class_id := Sci ; end ;
8484: LD_ADDR_VAR 0 15
8488: PUSH
8489: LD_STRING Sci
8491: ST_TO_ADDR
8492: GO 8495
8494: POP
// tmp := UnitFilter ( units , [ f_class , class ] ) ;
8495: LD_ADDR_VAR 0 11
8499: PUSH
8500: LD_VAR 0 1
8504: PPUSH
8505: LD_INT 25
8507: PUSH
8508: LD_VAR 0 5
8512: PUSH
8513: EMPTY
8514: LIST
8515: LIST
8516: PPUSH
8517: CALL_OW 72
8521: ST_TO_ADDR
// if tmp then
8522: LD_VAR 0 11
8526: IFFALSE 8538
// units := tmp ;
8528: LD_ADDR_VAR 0 1
8532: PUSH
8533: LD_VAR 0 11
8537: ST_TO_ADDR
// if sex then
8538: LD_VAR 0 4
8542: IFFALSE 8598
// begin if sex = sex_female then
8544: LD_VAR 0 4
8548: PUSH
8549: LD_INT 2
8551: EQUAL
8552: IFFALSE 8562
// sex_id := F ;
8554: LD_ADDR_VAR 0 14
8558: PUSH
8559: LD_STRING F
8561: ST_TO_ADDR
// units := UnitFilter ( units , [ f_sex , sex ] ) ;
8562: LD_ADDR_VAR 0 1
8566: PUSH
8567: LD_VAR 0 1
8571: PPUSH
8572: LD_INT 26
8574: PUSH
8575: LD_VAR 0 4
8579: PUSH
8580: EMPTY
8581: LIST
8582: LIST
8583: PPUSH
8584: CALL_OW 72
8588: ST_TO_ADDR
// if not units then
8589: LD_VAR 0 1
8593: NOT
8594: IFFALSE 8598
// exit ;
8596: GO 8796
// end ; unit_id := id ;
8598: LD_ADDR_VAR 0 12
8602: PUSH
8603: LD_VAR 0 6
8607: ST_TO_ADDR
// if unit_id > units then
8608: LD_VAR 0 12
8612: PUSH
8613: LD_VAR 0 1
8617: GREATER
8618: IFFALSE 8628
// unit_id := 1 ;
8620: LD_ADDR_VAR 0 12
8624: PUSH
8625: LD_INT 1
8627: ST_TO_ADDR
// if not units [ unit_id ] then
8628: LD_VAR 0 1
8632: PUSH
8633: LD_VAR 0 12
8637: ARRAY
8638: NOT
8639: IFFALSE 8643
// exit ;
8641: GO 8796
// unit := units [ unit_id ] ;
8643: LD_ADDR_VAR 0 10
8647: PUSH
8648: LD_VAR 0 1
8652: PUSH
8653: LD_VAR 0 12
8657: ARRAY
8658: ST_TO_ADDR
// dialog_id := D & sequence & - & sex_id & class_id & id & - & order_id ;
8659: LD_ADDR_VAR 0 13
8663: PUSH
8664: LD_STRING D
8666: PUSH
8667: LD_VAR 0 3
8671: STR
8672: PUSH
8673: LD_STRING -
8675: STR
8676: PUSH
8677: LD_VAR 0 14
8681: STR
8682: PUSH
8683: LD_VAR 0 15
8687: STR
8688: PUSH
8689: LD_VAR 0 6
8693: STR
8694: PUSH
8695: LD_STRING -
8697: STR
8698: PUSH
8699: LD_VAR 0 7
8703: STR
8704: ST_TO_ADDR
// case type of 0 :
8705: LD_VAR 0 2
8709: PUSH
8710: LD_INT 0
8712: DOUBLE
8713: EQUAL
8714: IFTRUE 8718
8716: GO 8735
8718: POP
// Say ( unit , dialog_id ) ; 1 :
8719: LD_VAR 0 10
8723: PPUSH
8724: LD_VAR 0 13
8728: PPUSH
8729: CALL_OW 88
8733: GO 8786
8735: LD_INT 1
8737: DOUBLE
8738: EQUAL
8739: IFTRUE 8743
8741: GO 8760
8743: POP
// SayRadio ( unit , dialog_id ) ; 2 :
8744: LD_VAR 0 10
8748: PPUSH
8749: LD_VAR 0 13
8753: PPUSH
8754: CALL_OW 94
8758: GO 8786
8760: LD_INT 2
8762: DOUBLE
8763: EQUAL
8764: IFTRUE 8768
8766: GO 8785
8768: POP
// ForceSay ( unit , dialog_id ) ; end ;
8769: LD_VAR 0 10
8773: PPUSH
8774: LD_VAR 0 13
8778: PPUSH
8779: CALL_OW 91
8783: GO 8786
8785: POP
// result := unit ;
8786: LD_ADDR_VAR 0 8
8790: PUSH
8791: LD_VAR 0 10
8795: ST_TO_ADDR
// end ;
8796: LD_VAR 0 8
8800: RET
// export function IsNearbyEntrance ( unit , building , distance ) ; var i , entrance ; begin
8801: LD_INT 0
8803: PPUSH
8804: PPUSH
8805: PPUSH
// result := false ;
8806: LD_ADDR_VAR 0 4
8810: PUSH
8811: LD_INT 0
8813: ST_TO_ADDR
// if not unit or not building or IsInUnit ( unit ) then
8814: LD_VAR 0 1
8818: NOT
8819: PUSH
8820: LD_VAR 0 2
8824: NOT
8825: OR
8826: PUSH
8827: LD_VAR 0 1
8831: PPUSH
8832: CALL_OW 310
8836: OR
8837: IFFALSE 8841
// exit ;
8839: GO 9045
// if distance < 0 then
8841: LD_VAR 0 3
8845: PUSH
8846: LD_INT 0
8848: LESS
8849: IFFALSE 8859
// distance := 0 ;
8851: LD_ADDR_VAR 0 3
8855: PUSH
8856: LD_INT 0
8858: ST_TO_ADDR
// entrance := GetBuildingHexes ( GetBType ( building ) , GetX ( building ) , GetY ( building ) , GetDir ( building ) , GetNation ( building ) , 1 ) ;
8859: LD_ADDR_VAR 0 6
8863: PUSH
8864: LD_VAR 0 2
8868: PPUSH
8869: CALL_OW 266
8873: PPUSH
8874: LD_VAR 0 2
8878: PPUSH
8879: CALL_OW 250
8883: PPUSH
8884: LD_VAR 0 2
8888: PPUSH
8889: CALL_OW 251
8893: PPUSH
8894: LD_VAR 0 2
8898: PPUSH
8899: CALL_OW 254
8903: PPUSH
8904: LD_VAR 0 2
8908: PPUSH
8909: CALL_OW 248
8913: PPUSH
8914: LD_INT 1
8916: PPUSH
8917: CALL 49409 0 6
8921: ST_TO_ADDR
// if not entrance then
8922: LD_VAR 0 6
8926: NOT
8927: IFFALSE 8931
// exit ;
8929: GO 9045
// for i in entrance do
8931: LD_ADDR_VAR 0 5
8935: PUSH
8936: LD_VAR 0 6
8940: PUSH
8941: FOR_IN
8942: IFFALSE 9043
// begin if not distance then
8944: LD_VAR 0 3
8948: NOT
8949: IFFALSE 8994
// begin if IsAt ( unit , i [ 1 ] , i [ 2 ] ) then
8951: LD_VAR 0 1
8955: PPUSH
8956: LD_VAR 0 5
8960: PUSH
8961: LD_INT 1
8963: ARRAY
8964: PPUSH
8965: LD_VAR 0 5
8969: PUSH
8970: LD_INT 2
8972: ARRAY
8973: PPUSH
8974: CALL_OW 307
8978: IFFALSE 8992
// begin result := true ;
8980: LD_ADDR_VAR 0 4
8984: PUSH
8985: LD_INT 1
8987: ST_TO_ADDR
// exit ;
8988: POP
8989: POP
8990: GO 9045
// end ; end else
8992: GO 9041
// begin if GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) <= distance then
8994: LD_VAR 0 1
8998: PPUSH
8999: LD_VAR 0 5
9003: PUSH
9004: LD_INT 1
9006: ARRAY
9007: PPUSH
9008: LD_VAR 0 5
9012: PUSH
9013: LD_INT 2
9015: ARRAY
9016: PPUSH
9017: CALL_OW 297
9021: PUSH
9022: LD_VAR 0 3
9026: LESSEQUAL
9027: IFFALSE 9041
// begin result := true ;
9029: LD_ADDR_VAR 0 4
9033: PUSH
9034: LD_INT 1
9036: ST_TO_ADDR
// exit ;
9037: POP
9038: POP
9039: GO 9045
// end ; end ; end ;
9041: GO 8941
9043: POP
9044: POP
// end ;
9045: LD_VAR 0 4
9049: RET
// export function CanSpot ( unit , unit2 ) ; var i , building ; begin
9050: LD_INT 0
9052: PPUSH
9053: PPUSH
9054: PPUSH
// result := false ;
9055: LD_ADDR_VAR 0 3
9059: PUSH
9060: LD_INT 0
9062: ST_TO_ADDR
// if not unit or not unit2 or not IsOk ( unit ) or not IsOk ( unit2 ) then
9063: LD_VAR 0 1
9067: NOT
9068: PUSH
9069: LD_VAR 0 2
9073: NOT
9074: OR
9075: PUSH
9076: LD_VAR 0 1
9080: PPUSH
9081: CALL_OW 302
9085: NOT
9086: OR
9087: PUSH
9088: LD_VAR 0 2
9092: PPUSH
9093: CALL_OW 302
9097: NOT
9098: OR
9099: IFFALSE 9103
// exit ;
9101: GO 9264
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] ] ) , unit ) ) < 8 then
9103: LD_VAR 0 1
9107: PPUSH
9108: LD_INT 81
9110: PUSH
9111: LD_VAR 0 1
9115: PPUSH
9116: CALL_OW 255
9120: PUSH
9121: EMPTY
9122: LIST
9123: LIST
9124: PUSH
9125: LD_INT 3
9127: PUSH
9128: LD_INT 21
9130: PUSH
9131: LD_INT 3
9133: PUSH
9134: EMPTY
9135: LIST
9136: LIST
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: PUSH
9142: EMPTY
9143: LIST
9144: LIST
9145: PPUSH
9146: CALL_OW 69
9150: PPUSH
9151: LD_VAR 0 1
9155: PPUSH
9156: CALL_OW 74
9160: PPUSH
9161: CALL_OW 296
9165: PUSH
9166: LD_INT 8
9168: LESS
9169: IFFALSE 9173
// exit ;
9171: GO 9264
// building := IsInUnit ( unit2 ) ;
9173: LD_ADDR_VAR 0 5
9177: PUSH
9178: LD_VAR 0 2
9182: PPUSH
9183: CALL_OW 310
9187: ST_TO_ADDR
// if building then
9188: LD_VAR 0 5
9192: IFFALSE 9219
// result := IsNearbyEntrance ( unit , building , 2 ) else
9194: LD_ADDR_VAR 0 3
9198: PUSH
9199: LD_VAR 0 1
9203: PPUSH
9204: LD_VAR 0 5
9208: PPUSH
9209: LD_INT 2
9211: PPUSH
9212: CALL 8801 0 3
9216: ST_TO_ADDR
9217: GO 9264
// result := ( GetDistUnits ( unit , unit2 ) < 6 and See ( GetSide ( unit2 ) , unit ) ) ;
9219: LD_ADDR_VAR 0 3
9223: PUSH
9224: LD_VAR 0 1
9228: PPUSH
9229: LD_VAR 0 2
9233: PPUSH
9234: CALL_OW 296
9238: PUSH
9239: LD_INT 6
9241: LESS
9242: PUSH
9243: LD_VAR 0 2
9247: PPUSH
9248: CALL_OW 255
9252: PPUSH
9253: LD_VAR 0 1
9257: PPUSH
9258: CALL_OW 292
9262: AND
9263: ST_TO_ADDR
// end ;
9264: LD_VAR 0 3
9268: RET
// export function CreateNature ; var i , animal , nat_area ; begin
9269: LD_INT 0
9271: PPUSH
9272: PPUSH
9273: PPUSH
9274: PPUSH
// uc_side = 0 ;
9275: LD_ADDR_OWVAR 20
9279: PUSH
9280: LD_INT 0
9282: ST_TO_ADDR
// uc_nation = 0 ;
9283: LD_ADDR_OWVAR 21
9287: PUSH
9288: LD_INT 0
9290: ST_TO_ADDR
// nat_area := nature_area ;
9291: LD_ADDR_VAR 0 4
9295: PUSH
9296: LD_INT 24
9298: ST_TO_ADDR
// InitHc ;
9299: CALL_OW 19
// for i = 1 to 4 do
9303: LD_ADDR_VAR 0 2
9307: PUSH
9308: DOUBLE
9309: LD_INT 1
9311: DEC
9312: ST_TO_ADDR
9313: LD_INT 4
9315: PUSH
9316: FOR_TO
9317: IFFALSE 9364
// begin hc_class = 18 ;
9319: LD_ADDR_OWVAR 28
9323: PUSH
9324: LD_INT 18
9326: ST_TO_ADDR
// hc_gallery =  ;
9327: LD_ADDR_OWVAR 33
9331: PUSH
9332: LD_STRING 
9334: ST_TO_ADDR
// animal := CreateHuman ;
9335: LD_ADDR_VAR 0 3
9339: PUSH
9340: CALL_OW 44
9344: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9345: LD_VAR 0 3
9349: PPUSH
9350: LD_VAR 0 4
9354: PPUSH
9355: LD_INT 0
9357: PPUSH
9358: CALL_OW 49
// end ;
9362: GO 9316
9364: POP
9365: POP
// for i = 1 to 3 do
9366: LD_ADDR_VAR 0 2
9370: PUSH
9371: DOUBLE
9372: LD_INT 1
9374: DEC
9375: ST_TO_ADDR
9376: LD_INT 3
9378: PUSH
9379: FOR_TO
9380: IFFALSE 9474
// begin hc_class = class_apeman ;
9382: LD_ADDR_OWVAR 28
9386: PUSH
9387: LD_INT 12
9389: ST_TO_ADDR
// hc_gallery =  ;
9390: LD_ADDR_OWVAR 33
9394: PUSH
9395: LD_STRING 
9397: ST_TO_ADDR
// hc_agressivity = 0 ;
9398: LD_ADDR_OWVAR 35
9402: PUSH
9403: LD_INT 0
9405: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
9406: LD_ADDR_OWVAR 31
9410: PUSH
9411: LD_INT 1
9413: PPUSH
9414: LD_INT 3
9416: PPUSH
9417: CALL_OW 12
9421: PUSH
9422: LD_INT 1
9424: PPUSH
9425: LD_INT 3
9427: PPUSH
9428: CALL_OW 12
9432: PUSH
9433: LD_INT 0
9435: PUSH
9436: LD_INT 0
9438: PUSH
9439: EMPTY
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: ST_TO_ADDR
// animal := CreateHuman ;
9445: LD_ADDR_VAR 0 3
9449: PUSH
9450: CALL_OW 44
9454: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9455: LD_VAR 0 3
9459: PPUSH
9460: LD_VAR 0 4
9464: PPUSH
9465: LD_INT 0
9467: PPUSH
9468: CALL_OW 49
// end ;
9472: GO 9379
9474: POP
9475: POP
// for i = 1 to 3 do
9476: LD_ADDR_VAR 0 2
9480: PUSH
9481: DOUBLE
9482: LD_INT 1
9484: DEC
9485: ST_TO_ADDR
9486: LD_INT 3
9488: PUSH
9489: FOR_TO
9490: IFFALSE 9537
// begin hc_class = 13 ;
9492: LD_ADDR_OWVAR 28
9496: PUSH
9497: LD_INT 13
9499: ST_TO_ADDR
// hc_gallery =  ;
9500: LD_ADDR_OWVAR 33
9504: PUSH
9505: LD_STRING 
9507: ST_TO_ADDR
// animal := CreateHuman ;
9508: LD_ADDR_VAR 0 3
9512: PUSH
9513: CALL_OW 44
9517: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9518: LD_VAR 0 3
9522: PPUSH
9523: LD_VAR 0 4
9527: PPUSH
9528: LD_INT 0
9530: PPUSH
9531: CALL_OW 49
// end ;
9535: GO 9489
9537: POP
9538: POP
// for i = 1 to 3 do
9539: LD_ADDR_VAR 0 2
9543: PUSH
9544: DOUBLE
9545: LD_INT 1
9547: DEC
9548: ST_TO_ADDR
9549: LD_INT 3
9551: PUSH
9552: FOR_TO
9553: IFFALSE 9598
// begin hc_class = 20 ;
9555: LD_ADDR_OWVAR 28
9559: PUSH
9560: LD_INT 20
9562: ST_TO_ADDR
// hc_gallery =  ;
9563: LD_ADDR_OWVAR 33
9567: PUSH
9568: LD_STRING 
9570: ST_TO_ADDR
// animal := CreateHuman ;
9571: LD_ADDR_VAR 0 3
9575: PUSH
9576: CALL_OW 44
9580: ST_TO_ADDR
// PlaceUnitArea ( animal , lake_area , false ) ;
9581: LD_VAR 0 3
9585: PPUSH
9586: LD_INT 4
9588: PPUSH
9589: LD_INT 0
9591: PPUSH
9592: CALL_OW 49
// end ;
9596: GO 9552
9598: POP
9599: POP
// end ; end_of_file
9600: LD_VAR 0 1
9604: RET
// export function Action ; begin
9605: LD_INT 0
9607: PPUSH
// InGameOn ;
9608: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
9612: LD_EXP 14
9616: PPUSH
9617: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
9621: LD_EXP 14
9625: PPUSH
9626: LD_STRING D1-JMM-1
9628: PPUSH
9629: CALL_OW 88
// Say ( Roth , D1-Roth-1 ) ;
9633: LD_EXP 15
9637: PPUSH
9638: LD_STRING D1-Roth-1
9640: PPUSH
9641: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
9645: LD_EXP 14
9649: PPUSH
9650: LD_STRING D1-JMM-2
9652: PPUSH
9653: CALL_OW 88
// Say ( Roth , D1-Roth-2 ) ;
9657: LD_EXP 15
9661: PPUSH
9662: LD_STRING D1-Roth-2
9664: PPUSH
9665: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9669: LD_EXP 14
9673: PPUSH
9674: LD_STRING D1-JMM-3
9676: PPUSH
9677: CALL_OW 88
// Say ( Roth , D1-Roth-3 ) ;
9681: LD_EXP 15
9685: PPUSH
9686: LD_STRING D1-Roth-3
9688: PPUSH
9689: CALL_OW 88
// ComInvisible ( Roth ) ;
9693: LD_EXP 15
9697: PPUSH
9698: CALL_OW 152
// wait ( 0 0$1.3 ) ;
9702: LD_INT 46
9704: PPUSH
9705: CALL_OW 67
// Say ( JMM , D1-JMM-4 ) ;
9709: LD_EXP 14
9713: PPUSH
9714: LD_STRING D1-JMM-4
9716: PPUSH
9717: CALL_OW 88
// wait ( 0 0$0.3 ) ;
9721: LD_INT 10
9723: PPUSH
9724: CALL_OW 67
// ComTurnUnit ( Roth , JMM ) ;
9728: LD_EXP 15
9732: PPUSH
9733: LD_EXP 14
9737: PPUSH
9738: CALL_OW 119
// Say ( JMM , D1-JMM-4a ) ;
9742: LD_EXP 14
9746: PPUSH
9747: LD_STRING D1-JMM-4a
9749: PPUSH
9750: CALL_OW 88
// Say ( Roth , D1-Roth-4 ) ;
9754: LD_EXP 15
9758: PPUSH
9759: LD_STRING D1-Roth-4
9761: PPUSH
9762: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
9766: LD_EXP 14
9770: PPUSH
9771: LD_STRING D1-JMM-5
9773: PPUSH
9774: CALL_OW 88
// Say ( Roth , D1-Roth-5 ) ;
9778: LD_EXP 15
9782: PPUSH
9783: LD_STRING D1-Roth-5
9785: PPUSH
9786: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
9790: LD_EXP 14
9794: PPUSH
9795: LD_STRING D1-JMM-6
9797: PPUSH
9798: CALL_OW 88
// Say ( Roth , D1-Roth-6 ) ;
9802: LD_EXP 15
9806: PPUSH
9807: LD_STRING D1-Roth-6
9809: PPUSH
9810: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
9814: LD_EXP 14
9818: PPUSH
9819: LD_STRING D1-JMM-7
9821: PPUSH
9822: CALL_OW 88
// ComMoveXY ( Powell , GetX ( JMM ) , GetY ( JMM ) ) ;
9826: LD_EXP 16
9830: PPUSH
9831: LD_EXP 14
9835: PPUSH
9836: CALL_OW 250
9840: PPUSH
9841: LD_EXP 14
9845: PPUSH
9846: CALL_OW 251
9850: PPUSH
9851: CALL_OW 111
// Say ( Roth , D1-Roth-7 ) ;
9855: LD_EXP 15
9859: PPUSH
9860: LD_STRING D1-Roth-7
9862: PPUSH
9863: CALL_OW 88
// repeat wait ( 0 0$0.3 ) ;
9867: LD_INT 10
9869: PPUSH
9870: CALL_OW 67
// until GetDistUnits ( Powell , JMM ) < 6 ;
9874: LD_EXP 16
9878: PPUSH
9879: LD_EXP 14
9883: PPUSH
9884: CALL_OW 296
9888: PUSH
9889: LD_INT 6
9891: LESS
9892: IFFALSE 9867
// ComTurnUnit ( Powell , JMM ) ;
9894: LD_EXP 16
9898: PPUSH
9899: LD_EXP 14
9903: PPUSH
9904: CALL_OW 119
// Say ( Powell , D1-Pow-7 ) ;
9908: LD_EXP 16
9912: PPUSH
9913: LD_STRING D1-Pow-7
9915: PPUSH
9916: CALL_OW 88
// ComTurnUnit ( JMM , Powell ) ;
9920: LD_EXP 14
9924: PPUSH
9925: LD_EXP 16
9929: PPUSH
9930: CALL_OW 119
// ComTurnUnit ( Roth , Powell ) ;
9934: LD_EXP 15
9938: PPUSH
9939: LD_EXP 16
9943: PPUSH
9944: CALL_OW 119
// Say ( JMM , D1-JMM-8 ) ;
9948: LD_EXP 14
9952: PPUSH
9953: LD_STRING D1-JMM-8
9955: PPUSH
9956: CALL_OW 88
// Say ( Powell , D1-Pow-8 ) ;
9960: LD_EXP 16
9964: PPUSH
9965: LD_STRING D1-Pow-8
9967: PPUSH
9968: CALL_OW 88
// Say ( JMM , D1-JMM-9 ) ;
9972: LD_EXP 14
9976: PPUSH
9977: LD_STRING D1-JMM-9
9979: PPUSH
9980: CALL_OW 88
// ComMoveXY ( Powell , 124 , 61 ) ;
9984: LD_EXP 16
9988: PPUSH
9989: LD_INT 124
9991: PPUSH
9992: LD_INT 61
9994: PPUSH
9995: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9999: LD_INT 35
10001: PPUSH
10002: CALL_OW 67
// until GetDistUnits ( JMM , Powell ) > 6 ;
10006: LD_EXP 14
10010: PPUSH
10011: LD_EXP 16
10015: PPUSH
10016: CALL_OW 296
10020: PUSH
10021: LD_INT 6
10023: GREATER
10024: IFFALSE 9999
// SayRadio ( Powell , D1-Pow-9 ) ;
10026: LD_EXP 16
10030: PPUSH
10031: LD_STRING D1-Pow-9
10033: PPUSH
10034: CALL_OW 94
// RemoveUnit ( Powell ) ;
10038: LD_EXP 16
10042: PPUSH
10043: CALL_OW 64
// PlaceHumanInUnit ( Powell , ambar0 ) ;
10047: LD_EXP 16
10051: PPUSH
10052: LD_INT 18
10054: PPUSH
10055: CALL_OW 52
// if Joan and not Joan in selected then
10059: LD_EXP 36
10063: PUSH
10064: LD_EXP 36
10068: PUSH
10069: LD_EXP 3
10073: IN
10074: NOT
10075: AND
10076: IFFALSE 10090
// SayRadio ( Joan , D1-Joan-9 ) ;
10078: LD_EXP 36
10082: PPUSH
10083: LD_STRING D1-Joan-9
10085: PPUSH
10086: CALL_OW 94
// ComTurnUnit ( Roth , JMM ) ;
10090: LD_EXP 15
10094: PPUSH
10095: LD_EXP 14
10099: PPUSH
10100: CALL_OW 119
// ComTurnUnit ( JMM , Roth ) ;
10104: LD_EXP 14
10108: PPUSH
10109: LD_EXP 15
10113: PPUSH
10114: CALL_OW 119
// Say ( Roth , D1-Roth-9 ) ;
10118: LD_EXP 15
10122: PPUSH
10123: LD_STRING D1-Roth-9
10125: PPUSH
10126: CALL_OW 88
// Say ( JMM , D1-JMM-10 ) ;
10130: LD_EXP 14
10134: PPUSH
10135: LD_STRING D1-JMM-10
10137: PPUSH
10138: CALL_OW 88
// InGameOff ;
10142: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
10146: LD_STRING M1
10148: PPUSH
10149: CALL_OW 337
// if Difficulty < 3 then
10153: LD_OWVAR 67
10157: PUSH
10158: LD_INT 3
10160: LESS
10161: IFFALSE 10173
// ChangeSideFog ( 4 , 7 ) ;
10163: LD_INT 4
10165: PPUSH
10166: LD_INT 7
10168: PPUSH
10169: CALL_OW 343
// SaveForQuickRestart ;
10173: CALL_OW 22
// SetAttitude ( 7 , 1 , att_enemy , true ) ;
10177: LD_INT 7
10179: PPUSH
10180: LD_INT 1
10182: PPUSH
10183: LD_INT 2
10185: PPUSH
10186: LD_INT 1
10188: PPUSH
10189: CALL_OW 80
// wait ( 0 0$3 ) ;
10193: LD_INT 105
10195: PPUSH
10196: CALL_OW 67
// ComMoveXY ( Roth , 124 , 18 ) ;
10200: LD_EXP 15
10204: PPUSH
10205: LD_INT 124
10207: PPUSH
10208: LD_INT 18
10210: PPUSH
10211: CALL_OW 111
// AddComInvisible ( Roth ) ;
10215: LD_EXP 15
10219: PPUSH
10220: CALL_OW 212
// wait ( 0 0$30 ) ;
10224: LD_INT 1050
10226: PPUSH
10227: CALL_OW 67
// AddComWait ( Roth , 1 1$00 ) ;
10231: LD_EXP 15
10235: PPUSH
10236: LD_INT 2100
10238: PPUSH
10239: CALL_OW 202
// AddComMoveXY ( Roth , 156 , 20 ) ;
10243: LD_EXP 15
10247: PPUSH
10248: LD_INT 156
10250: PPUSH
10251: LD_INT 20
10253: PPUSH
10254: CALL_OW 171
// AddComMoveXY ( Roth , 178 , 42 ) ;
10258: LD_EXP 15
10262: PPUSH
10263: LD_INT 178
10265: PPUSH
10266: LD_INT 42
10268: PPUSH
10269: CALL_OW 171
// AddComInvisible ( Roth ) ;
10273: LD_EXP 15
10277: PPUSH
10278: CALL_OW 212
// end ;
10282: LD_VAR 0 1
10286: RET
// every 0 0$1 do var i , tmp ;
10287: GO 10289
10289: DISABLE
10290: LD_INT 0
10292: PPUSH
10293: PPUSH
// begin tmp := selected union friends ;
10294: LD_ADDR_VAR 0 2
10298: PUSH
10299: LD_EXP 3
10303: PUSH
10304: LD_EXP 4
10308: UNION
10309: ST_TO_ADDR
// if not tmp then
10310: LD_VAR 0 2
10314: NOT
10315: IFFALSE 10319
// exit ;
10317: GO 10391
// repeat wait ( 0 0$1 ) ;
10319: LD_INT 35
10321: PPUSH
10322: CALL_OW 67
// for i in tmp do
10326: LD_ADDR_VAR 0 1
10330: PUSH
10331: LD_VAR 0 2
10335: PUSH
10336: FOR_IN
10337: IFFALSE 10382
// if CanSpot ( JMM , i ) then
10339: LD_EXP 14
10343: PPUSH
10344: LD_VAR 0 1
10348: PPUSH
10349: CALL 9050 0 2
10353: IFFALSE 10380
// begin tmp := tmp diff i ;
10355: LD_ADDR_VAR 0 2
10359: PUSH
10360: LD_VAR 0 2
10364: PUSH
10365: LD_VAR 0 1
10369: DIFF
10370: ST_TO_ADDR
// Spot ( i ) ;
10371: LD_VAR 0 1
10375: PPUSH
10376: CALL 10394 0 1
// end ;
10380: GO 10336
10382: POP
10383: POP
// until not tmp ;
10384: LD_VAR 0 2
10388: NOT
10389: IFFALSE 10319
// end ;
10391: PPOPN 2
10393: END
// export function Spot ( unit ) ; var building , side , joined ; begin
10394: LD_INT 0
10396: PPUSH
10397: PPUSH
10398: PPUSH
10399: PPUSH
// if not unit or GetSide ( unit ) <> 4 or IsSleeping ( unit ) or not IsOk ( unit ) then
10400: LD_VAR 0 1
10404: NOT
10405: PUSH
10406: LD_VAR 0 1
10410: PPUSH
10411: CALL_OW 255
10415: PUSH
10416: LD_INT 4
10418: NONEQUAL
10419: OR
10420: PUSH
10421: LD_VAR 0 1
10425: PPUSH
10426: CALL_OW 555
10430: OR
10431: PUSH
10432: LD_VAR 0 1
10436: PPUSH
10437: CALL_OW 302
10441: NOT
10442: OR
10443: IFFALSE 10447
// exit ;
10445: GO 12329
// InGameOn ;
10447: CALL_OW 8
// side := 7 ;
10451: LD_ADDR_VAR 0 4
10455: PUSH
10456: LD_INT 7
10458: ST_TO_ADDR
// joined := false ;
10459: LD_ADDR_VAR 0 5
10463: PUSH
10464: LD_INT 0
10466: ST_TO_ADDR
// building := IsInUnit ( unit ) ;
10467: LD_ADDR_VAR 0 3
10471: PUSH
10472: LD_VAR 0 1
10476: PPUSH
10477: CALL_OW 310
10481: ST_TO_ADDR
// if building then
10482: LD_VAR 0 3
10486: IFFALSE 10545
// begin SetSide ( JMM , GetSide ( unit ) ) ;
10488: LD_EXP 14
10492: PPUSH
10493: LD_VAR 0 1
10497: PPUSH
10498: CALL_OW 255
10502: PPUSH
10503: CALL_OW 235
// ComEnterUnit ( JMM , building ) ;
10507: LD_EXP 14
10511: PPUSH
10512: LD_VAR 0 3
10516: PPUSH
10517: CALL_OW 120
// repeat wait ( 3 ) ;
10521: LD_INT 3
10523: PPUSH
10524: CALL_OW 67
// until IsInUnit ( JMM ) ;
10528: LD_EXP 14
10532: PPUSH
10533: CALL_OW 310
10537: IFFALSE 10521
// DialogueOn ;
10539: CALL_OW 6
// end else
10543: GO 10577
// begin ComTurnUnit ( JMM , unit ) ;
10545: LD_EXP 14
10549: PPUSH
10550: LD_VAR 0 1
10554: PPUSH
10555: CALL_OW 119
// ComTurnUnit ( unit , JMM ) ;
10559: LD_VAR 0 1
10563: PPUSH
10564: LD_EXP 14
10568: PPUSH
10569: CALL_OW 119
// DialogueOn ;
10573: CALL_OW 6
// end ; if unit = Joan then
10577: LD_VAR 0 1
10581: PUSH
10582: LD_EXP 36
10586: EQUAL
10587: IFFALSE 10697
// begin joined := true ;
10589: LD_ADDR_VAR 0 5
10593: PUSH
10594: LD_INT 1
10596: ST_TO_ADDR
// if Joan in selected then
10597: LD_EXP 36
10601: PUSH
10602: LD_EXP 3
10606: IN
10607: IFFALSE 10635
// begin Say ( Joan , D3-Joan-Joan-1 ) ;
10609: LD_EXP 36
10613: PPUSH
10614: LD_STRING D3-Joan-Joan-1
10616: PPUSH
10617: CALL_OW 88
// Say ( JMM , D3-Joan-JMM-1 ) ;
10621: LD_EXP 14
10625: PPUSH
10626: LD_STRING D3-Joan-JMM-1
10628: PPUSH
10629: CALL_OW 88
// end else
10633: GO 10695
// begin Say ( Joan , D4-Joan-Joan-1 ) ;
10635: LD_EXP 36
10639: PPUSH
10640: LD_STRING D4-Joan-Joan-1
10642: PPUSH
10643: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-1 ) ;
10647: LD_EXP 14
10651: PPUSH
10652: LD_STRING D4-Joan-JMM-1
10654: PPUSH
10655: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-2 ) ;
10659: LD_EXP 36
10663: PPUSH
10664: LD_STRING D4-Joan-Joan-2
10666: PPUSH
10667: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-2 ) ;
10671: LD_EXP 14
10675: PPUSH
10676: LD_STRING D4-Joan-JMM-2
10678: PPUSH
10679: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-3 ) ;
10683: LD_EXP 36
10687: PPUSH
10688: LD_STRING D4-Joan-Joan-3
10690: PPUSH
10691: CALL_OW 88
// end ; end else
10695: GO 12137
// if unit = Lisa then
10697: LD_VAR 0 1
10701: PUSH
10702: LD_EXP 23
10706: EQUAL
10707: IFFALSE 10899
// begin if Lisa in selected then
10709: LD_EXP 23
10713: PUSH
10714: LD_EXP 3
10718: IN
10719: IFFALSE 10832
// begin if GetSide ( Joan ) = 7 then
10721: LD_EXP 36
10725: PPUSH
10726: CALL_OW 255
10730: PUSH
10731: LD_INT 7
10733: EQUAL
10734: IFFALSE 10798
// begin Say ( Lisa , D3-LisaJ-Lisa-1 ) ;
10736: LD_EXP 23
10740: PPUSH
10741: LD_STRING D3-LisaJ-Lisa-1
10743: PPUSH
10744: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-1 ) ;
10748: LD_EXP 14
10752: PPUSH
10753: LD_STRING D3-LisaJ-JMM-1
10755: PPUSH
10756: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-2 ) ;
10760: LD_EXP 23
10764: PPUSH
10765: LD_STRING D3-LisaJ-Lisa-2
10767: PPUSH
10768: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-2 ) ;
10772: LD_EXP 14
10776: PPUSH
10777: LD_STRING D3-LisaJ-JMM-2
10779: PPUSH
10780: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-3 ) ;
10784: LD_EXP 23
10788: PPUSH
10789: LD_STRING D3-LisaJ-Lisa-3
10791: PPUSH
10792: CALL_OW 88
// end else
10796: GO 10830
// begin Say ( Lisa , D3-LisaL-Lisa-1 ) ;
10798: LD_EXP 23
10802: PPUSH
10803: LD_STRING D3-LisaL-Lisa-1
10805: PPUSH
10806: CALL_OW 88
// Say ( JMM , D3-LisaL-JMM-1 ) ;
10810: LD_EXP 14
10814: PPUSH
10815: LD_STRING D3-LisaL-JMM-1
10817: PPUSH
10818: CALL_OW 88
// joined := true ;
10822: LD_ADDR_VAR 0 5
10826: PUSH
10827: LD_INT 1
10829: ST_TO_ADDR
// end ; end else
10830: GO 10897
// begin if GetSide ( Joan ) = 7 then
10832: LD_EXP 36
10836: PPUSH
10837: CALL_OW 255
10841: PUSH
10842: LD_INT 7
10844: EQUAL
10845: IFFALSE 10885
// begin Say ( Lisa , D4-LisaJ-Lisa-1 ) ;
10847: LD_EXP 23
10851: PPUSH
10852: LD_STRING D4-LisaJ-Lisa-1
10854: PPUSH
10855: CALL_OW 88
// Say ( JMM , D4-LisaJ-JMM-1 ) ;
10859: LD_EXP 14
10863: PPUSH
10864: LD_STRING D4-LisaJ-JMM-1
10866: PPUSH
10867: CALL_OW 88
// Say ( Lisa , D4-LisaJ-Lisa-2 ) ;
10871: LD_EXP 23
10875: PPUSH
10876: LD_STRING D4-LisaJ-Lisa-2
10878: PPUSH
10879: CALL_OW 88
// end else
10883: GO 10897
// begin Say ( Lisa , D4-LisaL-Lisa-1 ) ;
10885: LD_EXP 23
10889: PPUSH
10890: LD_STRING D4-LisaL-Lisa-1
10892: PPUSH
10893: CALL_OW 88
// end ; end ; end else
10897: GO 12137
// if unit = Frank then
10899: LD_VAR 0 1
10903: PUSH
10904: LD_EXP 33
10908: EQUAL
10909: IFFALSE 11049
// begin joined := true ;
10911: LD_ADDR_VAR 0 5
10915: PUSH
10916: LD_INT 1
10918: ST_TO_ADDR
// if Frank in selected then
10919: LD_EXP 33
10923: PUSH
10924: LD_EXP 3
10928: IN
10929: IFFALSE 10999
// begin Say ( Frank , D3-Frank-Frank-1 ) ;
10931: LD_EXP 33
10935: PPUSH
10936: LD_STRING D3-Frank-Frank-1
10938: PPUSH
10939: CALL_OW 88
// Say ( JMM , D3-Frank-JMM-1 ) ;
10943: LD_EXP 14
10947: PPUSH
10948: LD_STRING D3-Frank-JMM-1
10950: PPUSH
10951: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-2 ) ;
10955: LD_EXP 33
10959: PPUSH
10960: LD_STRING D3-Frank-Frank-2
10962: PPUSH
10963: CALL_OW 88
// if reached_lab then
10967: LD_EXP 5
10971: IFFALSE 10997
// begin Say ( JMM , D3-Frank-JMM-2 ) ;
10973: LD_EXP 14
10977: PPUSH
10978: LD_STRING D3-Frank-JMM-2
10980: PPUSH
10981: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-3 ) ;
10985: LD_EXP 33
10989: PPUSH
10990: LD_STRING D3-Frank-Frank-3
10992: PPUSH
10993: CALL_OW 88
// end ; end else
10997: GO 11047
// begin Say ( Frank , D4-Frank-Frank-1 ) ;
10999: LD_EXP 33
11003: PPUSH
11004: LD_STRING D4-Frank-Frank-1
11006: PPUSH
11007: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-1 ) ;
11011: LD_EXP 14
11015: PPUSH
11016: LD_STRING D4-Frank-JMM-1
11018: PPUSH
11019: CALL_OW 88
// Say ( Frank , D4-Frank-Frank-2 ) ;
11023: LD_EXP 33
11027: PPUSH
11028: LD_STRING D4-Frank-Frank-2
11030: PPUSH
11031: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-2 ) ;
11035: LD_EXP 14
11039: PPUSH
11040: LD_STRING D4-Frank-JMM-2
11042: PPUSH
11043: CALL_OW 88
// end ; end else
11047: GO 12137
// if unit = Brown then
11049: LD_VAR 0 1
11053: PUSH
11054: LD_EXP 28
11058: EQUAL
11059: IFFALSE 11155
// begin if Brown in selected or gamma_commander = 2 then
11061: LD_EXP 28
11065: PUSH
11066: LD_EXP 3
11070: IN
11071: PUSH
11072: LD_EXP 10
11076: PUSH
11077: LD_INT 2
11079: EQUAL
11080: OR
11081: IFFALSE 11117
// begin Say ( Brown , D3-Soldier1-Sol1-1 ) ;
11083: LD_EXP 28
11087: PPUSH
11088: LD_STRING D3-Soldier1-Sol1-1
11090: PPUSH
11091: CALL_OW 88
// Say ( JMM , D6-JMM-Brown-1 ) ;
11095: LD_EXP 14
11099: PPUSH
11100: LD_STRING D6-JMM-Brown-1
11102: PPUSH
11103: CALL_OW 88
// joined := true ;
11107: LD_ADDR_VAR 0 5
11111: PUSH
11112: LD_INT 1
11114: ST_TO_ADDR
// end else
11115: GO 11153
// begin Say ( Brown , D4-Soldier2-Sol1-1 ) ;
11117: LD_EXP 28
11121: PPUSH
11122: LD_STRING D4-Soldier2-Sol1-1
11124: PPUSH
11125: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11129: LD_EXP 14
11133: PPUSH
11134: LD_STRING D4-Soldier1-JMM-1
11136: PPUSH
11137: CALL_OW 88
// Say ( Brown , D4-Soldier2-Sol1-2 ) ;
11141: LD_EXP 28
11145: PPUSH
11146: LD_STRING D4-Soldier2-Sol1-2
11148: PPUSH
11149: CALL_OW 88
// end ; end else
11153: GO 12137
// if unit = Donaldson then
11155: LD_VAR 0 1
11159: PUSH
11160: LD_EXP 24
11164: EQUAL
11165: IFFALSE 11261
// begin if Donaldson in selected or gamma_commander = 1 then
11167: LD_EXP 24
11171: PUSH
11172: LD_EXP 3
11176: IN
11177: PUSH
11178: LD_EXP 10
11182: PUSH
11183: LD_INT 1
11185: EQUAL
11186: OR
11187: IFFALSE 11223
// begin Say ( Donaldson , D3-Soldier2-FSol2-1 ) ;
11189: LD_EXP 24
11193: PPUSH
11194: LD_STRING D3-Soldier2-FSol2-1
11196: PPUSH
11197: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11201: LD_EXP 14
11205: PPUSH
11206: LD_STRING D3-Soldier2-JMM-1
11208: PPUSH
11209: CALL_OW 88
// joined := true ;
11213: LD_ADDR_VAR 0 5
11217: PUSH
11218: LD_INT 1
11220: ST_TO_ADDR
// end else
11221: GO 11259
// begin Say ( unit , D4-Soldier1-FSol1-1 ) ;
11223: LD_VAR 0 1
11227: PPUSH
11228: LD_STRING D4-Soldier1-FSol1-1
11230: PPUSH
11231: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11235: LD_EXP 14
11239: PPUSH
11240: LD_STRING D4-Soldier1-JMM-1
11242: PPUSH
11243: CALL_OW 88
// Say ( unit , D4-Soldier1-FSol1-2 ) ;
11247: LD_VAR 0 1
11251: PPUSH
11252: LD_STRING D4-Soldier1-FSol1-2
11254: PPUSH
11255: CALL_OW 88
// end ; end else
11259: GO 12137
// if unit = Cyrus then
11261: LD_VAR 0 1
11265: PUSH
11266: LD_EXP 26
11270: EQUAL
11271: IFFALSE 11345
// begin if Cyrus in selected then
11273: LD_EXP 26
11277: PUSH
11278: LD_EXP 3
11282: IN
11283: IFFALSE 11319
// begin Say ( Cyrus , D3-Cyrus-Cyrus-1 ) ;
11285: LD_EXP 26
11289: PPUSH
11290: LD_STRING D3-Cyrus-Cyrus-1
11292: PPUSH
11293: CALL_OW 88
// Say ( JMM , D3-Cyrus-JMM-1 ) ;
11297: LD_EXP 14
11301: PPUSH
11302: LD_STRING D3-Cyrus-JMM-1
11304: PPUSH
11305: CALL_OW 88
// joined := true ;
11309: LD_ADDR_VAR 0 5
11313: PUSH
11314: LD_INT 1
11316: ST_TO_ADDR
// end else
11317: GO 11343
// begin Say ( Cyrus , D4-Cyrus-Cyrus-1 ) ;
11319: LD_EXP 26
11323: PPUSH
11324: LD_STRING D4-Cyrus-Cyrus-1
11326: PPUSH
11327: CALL_OW 88
// Say ( JMM , D4-Cyrus-JMM-1 ) ;
11331: LD_EXP 14
11335: PPUSH
11336: LD_STRING D4-Cyrus-JMM-1
11338: PPUSH
11339: CALL_OW 88
// end ; end else
11343: GO 12137
// if unit = Bobby then
11345: LD_VAR 0 1
11349: PUSH
11350: LD_EXP 25
11354: EQUAL
11355: IFFALSE 11441
// begin if Bobby in selected then
11357: LD_EXP 25
11361: PUSH
11362: LD_EXP 3
11366: IN
11367: IFFALSE 11403
// begin Say ( Bobby , D3-Bobby-Bobby-1 ) ;
11369: LD_EXP 25
11373: PPUSH
11374: LD_STRING D3-Bobby-Bobby-1
11376: PPUSH
11377: CALL_OW 88
// Say ( JMM , D3-Bobby-JMM-1 ) ;
11381: LD_EXP 14
11385: PPUSH
11386: LD_STRING D3-Bobby-JMM-1
11388: PPUSH
11389: CALL_OW 88
// joined := true ;
11393: LD_ADDR_VAR 0 5
11397: PUSH
11398: LD_INT 1
11400: ST_TO_ADDR
// end else
11401: GO 11439
// begin Say ( Bobby , D4-Bobby-Bobby-1 ) ;
11403: LD_EXP 25
11407: PPUSH
11408: LD_STRING D4-Bobby-Bobby-1
11410: PPUSH
11411: CALL_OW 88
// Say ( JMM , D4-Bobby-JMM-1 ) ;
11415: LD_EXP 14
11419: PPUSH
11420: LD_STRING D4-Bobby-JMM-1
11422: PPUSH
11423: CALL_OW 88
// Say ( Bobby , D4-Bobby-Bobby-2 ) ;
11427: LD_EXP 25
11431: PPUSH
11432: LD_STRING D4-Bobby-Bobby-2
11434: PPUSH
11435: CALL_OW 88
// end ; end else
11439: GO 12137
// if unit = Cornel then
11441: LD_VAR 0 1
11445: PUSH
11446: LD_EXP 31
11450: EQUAL
11451: IFFALSE 11549
// begin if Cornel in selected then
11453: LD_EXP 31
11457: PUSH
11458: LD_EXP 3
11462: IN
11463: IFFALSE 11511
// begin Say ( Cornel , D3-Mark-Corn-1 ) ;
11465: LD_EXP 31
11469: PPUSH
11470: LD_STRING D3-Mark-Corn-1
11472: PPUSH
11473: CALL_OW 88
// Say ( JMM , D3-Mark-JMM-1 ) ;
11477: LD_EXP 14
11481: PPUSH
11482: LD_STRING D3-Mark-JMM-1
11484: PPUSH
11485: CALL_OW 88
// Say ( Cornel , D3-Mark-Corn-2 ) ;
11489: LD_EXP 31
11493: PPUSH
11494: LD_STRING D3-Mark-Corn-2
11496: PPUSH
11497: CALL_OW 88
// joined := true ;
11501: LD_ADDR_VAR 0 5
11505: PUSH
11506: LD_INT 1
11508: ST_TO_ADDR
// end else
11509: GO 11547
// begin Say ( Cornel , D4-Mark-Corn-1 ) ;
11511: LD_EXP 31
11515: PPUSH
11516: LD_STRING D4-Mark-Corn-1
11518: PPUSH
11519: CALL_OW 88
// Say ( JMM , D4-Mark-JMM-1 ) ;
11523: LD_EXP 14
11527: PPUSH
11528: LD_STRING D4-Mark-JMM-1
11530: PPUSH
11531: CALL_OW 88
// Say ( Cornel , D4-Mark-Corn-2 ) ;
11535: LD_EXP 31
11539: PPUSH
11540: LD_STRING D4-Mark-Corn-2
11542: PPUSH
11543: CALL_OW 88
// end ; end else
11547: GO 12137
// if unit = Gary then
11549: LD_VAR 0 1
11553: PUSH
11554: LD_EXP 32
11558: EQUAL
11559: IFFALSE 11643
// begin if Gary in selected then
11561: LD_EXP 32
11565: PUSH
11566: LD_EXP 3
11570: IN
11571: IFFALSE 11607
// begin Say ( Gary , D3-Gary-Gary-1 ) ;
11573: LD_EXP 32
11577: PPUSH
11578: LD_STRING D3-Gary-Gary-1
11580: PPUSH
11581: CALL_OW 88
// Say ( JMM , D3-Gary-JMM-1 ) ;
11585: LD_EXP 14
11589: PPUSH
11590: LD_STRING D3-Gary-JMM-1
11592: PPUSH
11593: CALL_OW 88
// joined := true ;
11597: LD_ADDR_VAR 0 5
11601: PUSH
11602: LD_INT 1
11604: ST_TO_ADDR
// end else
11605: GO 11641
// begin Say ( Gary , D4-Gary-Gary-1 ) ;
11607: LD_EXP 32
11611: PPUSH
11612: LD_STRING D4-Gary-Gary-1
11614: PPUSH
11615: CALL_OW 88
// SetSide ( Gary , 1 ) ;
11619: LD_EXP 32
11623: PPUSH
11624: LD_INT 1
11626: PPUSH
11627: CALL_OW 235
// DialogueOff ;
11631: CALL_OW 7
// InGameOff ;
11635: CALL_OW 9
// exit ;
11639: GO 12329
// end ; end else
11641: GO 12137
// if unit = Kikuchi then
11643: LD_VAR 0 1
11647: PUSH
11648: LD_EXP 34
11652: EQUAL
11653: IFFALSE 11737
// begin if Kikuchi in selected then
11655: LD_EXP 34
11659: PUSH
11660: LD_EXP 3
11664: IN
11665: IFFALSE 11701
// begin Say ( Kikuchi , D3-Yamako-Yam-1 ) ;
11667: LD_EXP 34
11671: PPUSH
11672: LD_STRING D3-Yamako-Yam-1
11674: PPUSH
11675: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11679: LD_EXP 14
11683: PPUSH
11684: LD_STRING D3-Soldier2-JMM-1
11686: PPUSH
11687: CALL_OW 88
// joined := true ;
11691: LD_ADDR_VAR 0 5
11695: PUSH
11696: LD_INT 1
11698: ST_TO_ADDR
// end else
11699: GO 11735
// begin Say ( Kikuchi , D4-Yamako-Yam-1 ) ;
11701: LD_EXP 34
11705: PPUSH
11706: LD_STRING D4-Yamako-Yam-1
11708: PPUSH
11709: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
11713: LD_EXP 34
11717: PPUSH
11718: LD_INT 1
11720: PPUSH
11721: CALL_OW 235
// DialogueOff ;
11725: CALL_OW 7
// InGameOff ;
11729: CALL_OW 9
// exit ;
11733: GO 12329
// end ; end else
11735: GO 12137
// if unit = Gladstone then
11737: LD_VAR 0 1
11741: PUSH
11742: LD_EXP 29
11746: EQUAL
11747: IFFALSE 11821
// begin if Gladstone in selected then
11749: LD_EXP 29
11753: PUSH
11754: LD_EXP 3
11758: IN
11759: IFFALSE 11795
// begin joined := true ;
11761: LD_ADDR_VAR 0 5
11765: PUSH
11766: LD_INT 1
11768: ST_TO_ADDR
// Say ( JMM , D3-Tim-JMM-1 ) ;
11769: LD_EXP 14
11773: PPUSH
11774: LD_STRING D3-Tim-JMM-1
11776: PPUSH
11777: CALL_OW 88
// Say ( Gladstone , D3-Tim-Glad-1 ) ;
11781: LD_EXP 29
11785: PPUSH
11786: LD_STRING D3-Tim-Glad-1
11788: PPUSH
11789: CALL_OW 88
// end else
11793: GO 11819
// begin Say ( JMM , D4-Tim-JMM-1 ) ;
11795: LD_EXP 14
11799: PPUSH
11800: LD_STRING D4-Tim-JMM-1
11802: PPUSH
11803: CALL_OW 88
// Say ( Gladstone , D4-Tim-Glad-1 ) ;
11807: LD_EXP 29
11811: PPUSH
11812: LD_STRING D4-Tim-Glad-1
11814: PPUSH
11815: CALL_OW 88
// end ; end else
11819: GO 12137
// if unit = Denis then
11821: LD_VAR 0 1
11825: PUSH
11826: LD_EXP 27
11830: EQUAL
11831: IFFALSE 11867
// begin joined := true ;
11833: LD_ADDR_VAR 0 5
11837: PUSH
11838: LD_INT 1
11840: ST_TO_ADDR
// Say ( Denis , D3-Denis-Den-1 ) ;
11841: LD_EXP 27
11845: PPUSH
11846: LD_STRING D3-Denis-Den-1
11848: PPUSH
11849: CALL_OW 88
// Say ( JMM , D3-Denis-JMM-1 ) ;
11853: LD_EXP 14
11857: PPUSH
11858: LD_STRING D3-Denis-JMM-1
11860: PPUSH
11861: CALL_OW 88
// end else
11865: GO 12137
// if unit = Simms then
11867: LD_VAR 0 1
11871: PUSH
11872: LD_EXP 35
11876: EQUAL
11877: IFFALSE 11913
// begin joined := true ;
11879: LD_ADDR_VAR 0 5
11883: PUSH
11884: LD_INT 1
11886: ST_TO_ADDR
// Say ( Simms , D3-Simms-Sim-1 ) ;
11887: LD_EXP 35
11891: PPUSH
11892: LD_STRING D3-Simms-Sim-1
11894: PPUSH
11895: CALL_OW 88
// Say ( JMM , D3-Simms-JMM-1 ) ;
11899: LD_EXP 14
11903: PPUSH
11904: LD_STRING D3-Simms-JMM-1
11906: PPUSH
11907: CALL_OW 88
// end else
11911: GO 12137
// if unit = DeltaDoctor then
11913: LD_VAR 0 1
11917: PUSH
11918: LD_EXP 37
11922: EQUAL
11923: IFFALSE 11959
// begin joined := true ;
11925: LD_ADDR_VAR 0 5
11929: PUSH
11930: LD_INT 1
11932: ST_TO_ADDR
// Say ( DeltaDoctor , D3-Soldier1-Sol1-1 ) ;
11933: LD_EXP 37
11937: PPUSH
11938: LD_STRING D3-Soldier1-Sol1-1
11940: PPUSH
11941: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
11945: LD_EXP 14
11949: PPUSH
11950: LD_STRING D3-Soldier1-JMM-1
11952: PPUSH
11953: CALL_OW 88
// end else
11957: GO 12137
// begin joined := unit in selected ;
11959: LD_ADDR_VAR 0 5
11963: PUSH
11964: LD_VAR 0 1
11968: PUSH
11969: LD_EXP 3
11973: IN
11974: ST_TO_ADDR
// if joined then
11975: LD_VAR 0 5
11979: IFFALSE 12048
// begin if GetSex ( unit ) = sex_male then
11981: LD_VAR 0 1
11985: PPUSH
11986: CALL_OW 258
11990: PUSH
11991: LD_INT 1
11993: EQUAL
11994: IFFALSE 12022
// begin Say ( unit , D3-Soldier1-Sol1-1 ) ;
11996: LD_VAR 0 1
12000: PPUSH
12001: LD_STRING D3-Soldier1-Sol1-1
12003: PPUSH
12004: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
12008: LD_EXP 14
12012: PPUSH
12013: LD_STRING D3-Soldier1-JMM-1
12015: PPUSH
12016: CALL_OW 88
// end else
12020: GO 12046
// begin Say ( unit , D3-Soldier2-FSol2-1 ) ;
12022: LD_VAR 0 1
12026: PPUSH
12027: LD_STRING D3-Soldier2-FSol2-1
12029: PPUSH
12030: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
12034: LD_EXP 14
12038: PPUSH
12039: LD_STRING D3-Soldier2-JMM-1
12041: PPUSH
12042: CALL_OW 88
// end ; end else
12046: GO 12137
// begin if GetSex ( unit ) = sex_male then
12048: LD_VAR 0 1
12052: PPUSH
12053: CALL_OW 258
12057: PUSH
12058: LD_INT 1
12060: EQUAL
12061: IFFALSE 12101
// begin Say ( unit , D4-Soldier2-Sol1-1 ) ;
12063: LD_VAR 0 1
12067: PPUSH
12068: LD_STRING D4-Soldier2-Sol1-1
12070: PPUSH
12071: CALL_OW 88
// Say ( JMM , D4-Soldier2-JMM-1 ) ;
12075: LD_EXP 14
12079: PPUSH
12080: LD_STRING D4-Soldier2-JMM-1
12082: PPUSH
12083: CALL_OW 88
// Say ( unit , D4-Soldier2-Sol2-1 ) ;
12087: LD_VAR 0 1
12091: PPUSH
12092: LD_STRING D4-Soldier2-Sol2-1
12094: PPUSH
12095: CALL_OW 88
// end else
12099: GO 12137
// begin Say ( unit , D4-Soldier1-FSol1-1 ) ;
12101: LD_VAR 0 1
12105: PPUSH
12106: LD_STRING D4-Soldier1-FSol1-1
12108: PPUSH
12109: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
12113: LD_EXP 14
12117: PPUSH
12118: LD_STRING D4-Soldier1-JMM-1
12120: PPUSH
12121: CALL_OW 88
// Say ( unit , D4-Soldier1-FSol1-2 ) ;
12125: LD_VAR 0 1
12129: PPUSH
12130: LD_STRING D4-Soldier1-FSol1-2
12132: PPUSH
12133: CALL_OW 88
// end ; end ; end ; DialogueOff ;
12137: CALL_OW 7
// InGameOff ;
12141: CALL_OW 9
// if building then
12145: LD_VAR 0 3
12149: IFFALSE 12250
// begin SetSide ( JMM , side ) ;
12151: LD_EXP 14
12155: PPUSH
12156: LD_VAR 0 4
12160: PPUSH
12161: CALL_OW 235
// ComExitBuilding ( JMM ) ;
12165: LD_EXP 14
12169: PPUSH
12170: CALL_OW 122
// if joined then
12174: LD_VAR 0 5
12178: IFFALSE 12217
// begin SetSide ( unit , side ) ;
12180: LD_VAR 0 1
12184: PPUSH
12185: LD_VAR 0 4
12189: PPUSH
12190: CALL_OW 235
// SetSide ( building , 1 ) ;
12194: LD_VAR 0 3
12198: PPUSH
12199: LD_INT 1
12201: PPUSH
12202: CALL_OW 235
// ComExitBuilding ( unit ) ;
12206: LD_VAR 0 1
12210: PPUSH
12211: CALL_OW 122
// end else
12215: GO 12248
// begin wait ( 0 0$10 ) ;
12217: LD_INT 350
12219: PPUSH
12220: CALL_OW 67
// SetSide ( unit , 1 ) ;
12224: LD_VAR 0 1
12228: PPUSH
12229: LD_INT 1
12231: PPUSH
12232: CALL_OW 235
// SetSide ( building , 1 ) ;
12236: LD_VAR 0 3
12240: PPUSH
12241: LD_INT 1
12243: PPUSH
12244: CALL_OW 235
// end ; end else
12248: GO 12329
// begin ComStop ( [ JMM , unit ] ) ;
12250: LD_EXP 14
12254: PUSH
12255: LD_VAR 0 1
12259: PUSH
12260: EMPTY
12261: LIST
12262: LIST
12263: PPUSH
12264: CALL_OW 141
// if joined then
12268: LD_VAR 0 5
12272: IFFALSE 12290
// SetSide ( unit , side ) else
12274: LD_VAR 0 1
12278: PPUSH
12279: LD_VAR 0 4
12283: PPUSH
12284: CALL_OW 235
12288: GO 12329
// begin repeat wait ( 0 0$1 ) ;
12290: LD_INT 35
12292: PPUSH
12293: CALL_OW 67
// until GetDistUnits ( JMM , unit ) > 11 ;
12297: LD_EXP 14
12301: PPUSH
12302: LD_VAR 0 1
12306: PPUSH
12307: CALL_OW 296
12311: PUSH
12312: LD_INT 11
12314: GREATER
12315: IFFALSE 12290
// SetSide ( unit , 1 ) ;
12317: LD_VAR 0 1
12321: PPUSH
12322: LD_INT 1
12324: PPUSH
12325: CALL_OW 235
// end ; end ; end ;
12329: LD_VAR 0 2
12333: RET
// every 0 0$1 trigger GetDistUnits ( JMM , Mike ) < 6 and See ( 7 , Mike ) do
12334: LD_EXP 14
12338: PPUSH
12339: LD_EXP 38
12343: PPUSH
12344: CALL_OW 296
12348: PUSH
12349: LD_INT 6
12351: LESS
12352: PUSH
12353: LD_INT 7
12355: PPUSH
12356: LD_EXP 38
12360: PPUSH
12361: CALL_OW 292
12365: AND
12366: IFFALSE 12424
12368: GO 12370
12370: DISABLE
// begin DialogueOn ;
12371: CALL_OW 6
// CenterNowOnUnits ( Mike ) ;
12375: LD_EXP 38
12379: PPUSH
12380: CALL_OW 87
// Say ( JMM , D6-JMM-Mike-1 ) ;
12384: LD_EXP 14
12388: PPUSH
12389: LD_STRING D6-JMM-Mike-1
12391: PPUSH
12392: CALL_OW 88
// Say ( Mike , D6-Mike-1 ) ;
12396: LD_EXP 38
12400: PPUSH
12401: LD_STRING D6-Mike-1
12403: PPUSH
12404: CALL_OW 88
// SetSide ( Mike , 7 ) ;
12408: LD_EXP 38
12412: PPUSH
12413: LD_INT 7
12415: PPUSH
12416: CALL_OW 235
// DialogueOff ;
12420: CALL_OW 7
// end ;
12424: END
// every 0 0$01 trigger IsInUnit ( JMM ) = amlab do
12425: LD_EXP 14
12429: PPUSH
12430: CALL_OW 310
12434: PUSH
12435: LD_INT 47
12437: EQUAL
12438: IFFALSE 12506
12440: GO 12442
12442: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
12443: LD_STRING M1a
12445: PPUSH
12446: CALL_OW 337
// SetTech ( tech_Soporific , 7 , state_researched ) ;
12450: LD_INT 13
12452: PPUSH
12453: LD_INT 7
12455: PPUSH
12456: LD_INT 2
12458: PPUSH
12459: CALL_OW 322
// SetTech ( tech_SpacAnom , 7 , state_researched ) ;
12463: LD_INT 29
12465: PPUSH
12466: LD_INT 7
12468: PPUSH
12469: LD_INT 2
12471: PPUSH
12472: CALL_OW 322
// SetClass ( JMM , class_bazooker ) ;
12476: LD_EXP 14
12480: PPUSH
12481: LD_INT 9
12483: PPUSH
12484: CALL_OW 336
// can_escape := true ;
12488: LD_ADDR_EXP 6
12492: PUSH
12493: LD_INT 1
12495: ST_TO_ADDR
// SetAreaMapShow ( escape_area , 1 ) ;
12496: LD_INT 19
12498: PPUSH
12499: LD_INT 1
12501: PPUSH
12502: CALL_OW 424
// end ;
12506: END
// every 0 0$1 trigger GetLives ( Powell ) < 999 do
12507: LD_EXP 16
12511: PPUSH
12512: CALL_OW 256
12516: PUSH
12517: LD_INT 999
12519: LESS
12520: IFFALSE 12571
12522: GO 12524
12524: DISABLE
// begin enable ;
12525: ENABLE
// if HexInfo ( 25 , 48 ) = Powell then
12526: LD_INT 25
12528: PPUSH
12529: LD_INT 48
12531: PPUSH
12532: CALL_OW 428
12536: PUSH
12537: LD_EXP 16
12541: EQUAL
12542: IFFALSE 12556
// begin RemoveUnit ( Powell ) ;
12544: LD_EXP 16
12548: PPUSH
12549: CALL_OW 64
// disable ;
12553: DISABLE
// end else
12554: GO 12571
// ComMoveXY ( Powell , 25 , 48 ) ;
12556: LD_EXP 16
12560: PPUSH
12561: LD_INT 25
12563: PPUSH
12564: LD_INT 48
12566: PPUSH
12567: CALL_OW 111
// end ;
12571: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do var i ;
12572: LD_INT 22
12574: PUSH
12575: LD_INT 4
12577: PUSH
12578: EMPTY
12579: LIST
12580: LIST
12581: PUSH
12582: LD_INT 21
12584: PUSH
12585: LD_INT 1
12587: PUSH
12588: EMPTY
12589: LIST
12590: LIST
12591: PUSH
12592: LD_INT 3
12594: PUSH
12595: LD_INT 24
12597: PUSH
12598: LD_INT 990
12600: PUSH
12601: EMPTY
12602: LIST
12603: LIST
12604: PUSH
12605: EMPTY
12606: LIST
12607: LIST
12608: PUSH
12609: EMPTY
12610: LIST
12611: LIST
12612: LIST
12613: PPUSH
12614: CALL_OW 69
12618: PUSH
12619: LD_EXP 15
12623: DIFF
12624: IFFALSE 12768
12626: GO 12628
12628: DISABLE
12629: LD_INT 0
12631: PPUSH
// begin enable ;
12632: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do
12633: LD_ADDR_VAR 0 1
12637: PUSH
12638: LD_INT 22
12640: PUSH
12641: LD_INT 4
12643: PUSH
12644: EMPTY
12645: LIST
12646: LIST
12647: PUSH
12648: LD_INT 21
12650: PUSH
12651: LD_INT 1
12653: PUSH
12654: EMPTY
12655: LIST
12656: LIST
12657: PUSH
12658: LD_INT 3
12660: PUSH
12661: LD_INT 24
12663: PUSH
12664: LD_INT 990
12666: PUSH
12667: EMPTY
12668: LIST
12669: LIST
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: PUSH
12675: EMPTY
12676: LIST
12677: LIST
12678: LIST
12679: PPUSH
12680: CALL_OW 69
12684: PUSH
12685: LD_EXP 15
12689: DIFF
12690: PUSH
12691: FOR_IN
12692: IFFALSE 12766
// begin ComFree ( i ) ;
12694: LD_VAR 0 1
12698: PPUSH
12699: CALL_OW 139
// SetSide ( i , 1 ) ;
12703: LD_VAR 0 1
12707: PPUSH
12708: LD_INT 1
12710: PPUSH
12711: CALL_OW 235
// if GetDistUnits ( i , JMM ) < 14 then
12715: LD_VAR 0 1
12719: PPUSH
12720: LD_EXP 14
12724: PPUSH
12725: CALL_OW 296
12729: PUSH
12730: LD_INT 14
12732: LESS
12733: IFFALSE 12764
// ComAgressiveMove ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
12735: LD_VAR 0 1
12739: PPUSH
12740: LD_EXP 14
12744: PPUSH
12745: CALL_OW 250
12749: PPUSH
12750: LD_EXP 14
12754: PPUSH
12755: CALL_OW 251
12759: PPUSH
12760: CALL_OW 114
// end ;
12764: GO 12691
12766: POP
12767: POP
// end ;
12768: PPOPN 1
12770: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var i ;
12771: LD_INT 22
12773: PUSH
12774: LD_INT 4
12776: PUSH
12777: EMPTY
12778: LIST
12779: LIST
12780: PUSH
12781: LD_INT 34
12783: PUSH
12784: LD_INT 12
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: PUSH
12791: EMPTY
12792: LIST
12793: LIST
12794: PPUSH
12795: CALL_OW 69
12799: IFFALSE 12881
12801: GO 12803
12803: DISABLE
12804: LD_INT 0
12806: PPUSH
// begin enable ;
12807: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do
12808: LD_ADDR_VAR 0 1
12812: PUSH
12813: LD_INT 22
12815: PUSH
12816: LD_INT 4
12818: PUSH
12819: EMPTY
12820: LIST
12821: LIST
12822: PUSH
12823: LD_INT 34
12825: PUSH
12826: LD_INT 12
12828: PUSH
12829: EMPTY
12830: LIST
12831: LIST
12832: PUSH
12833: EMPTY
12834: LIST
12835: LIST
12836: PPUSH
12837: CALL_OW 69
12841: PUSH
12842: FOR_IN
12843: IFFALSE 12879
// if GetDistUnits ( i , JMM ) < 6 then
12845: LD_VAR 0 1
12849: PPUSH
12850: LD_EXP 14
12854: PPUSH
12855: CALL_OW 296
12859: PUSH
12860: LD_INT 6
12862: LESS
12863: IFFALSE 12877
// SetSide ( i , 7 ) ;
12865: LD_VAR 0 1
12869: PPUSH
12870: LD_INT 7
12872: PPUSH
12873: CALL_OW 235
12877: GO 12842
12879: POP
12880: POP
// end ;
12881: PPOPN 1
12883: END
// every 0 0$01 trigger can_escape and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) do var all_taken , tmp , m1 , m2 , m3 ;
12884: LD_EXP 6
12888: PUSH
12889: LD_INT 19
12891: PPUSH
12892: LD_INT 22
12894: PUSH
12895: LD_INT 7
12897: PUSH
12898: EMPTY
12899: LIST
12900: LIST
12901: PUSH
12902: LD_INT 21
12904: PUSH
12905: LD_INT 1
12907: PUSH
12908: EMPTY
12909: LIST
12910: LIST
12911: PUSH
12912: EMPTY
12913: LIST
12914: LIST
12915: PPUSH
12916: CALL_OW 71
12920: NOT
12921: AND
12922: PUSH
12923: LD_INT 3
12925: PPUSH
12926: CALL_OW 469
12930: NOT
12931: AND
12932: PUSH
12933: LD_INT 5
12935: PPUSH
12936: CALL_OW 469
12940: NOT
12941: AND
12942: IFFALSE 14625
12944: GO 12946
12946: DISABLE
12947: LD_INT 0
12949: PPUSH
12950: PPUSH
12951: PPUSH
12952: PPUSH
12953: PPUSH
// begin m1 := false ;
12954: LD_ADDR_VAR 0 3
12958: PUSH
12959: LD_INT 0
12961: ST_TO_ADDR
// m2 := false ;
12962: LD_ADDR_VAR 0 4
12966: PUSH
12967: LD_INT 0
12969: ST_TO_ADDR
// m3 := false ;
12970: LD_ADDR_VAR 0 5
12974: PUSH
12975: LD_INT 0
12977: ST_TO_ADDR
// all_taken := ( UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 ) ;
12978: LD_ADDR_VAR 0 1
12982: PUSH
12983: LD_EXP 3
12987: PPUSH
12988: LD_INT 22
12990: PUSH
12991: LD_INT 4
12993: PUSH
12994: EMPTY
12995: LIST
12996: LIST
12997: PUSH
12998: LD_INT 21
13000: PUSH
13001: LD_INT 1
13003: PUSH
13004: EMPTY
13005: LIST
13006: LIST
13007: PUSH
13008: EMPTY
13009: LIST
13010: LIST
13011: PPUSH
13012: CALL_OW 72
13016: PUSH
13017: LD_INT 0
13019: EQUAL
13020: ST_TO_ADDR
// if not all_taken then
13021: LD_VAR 0 1
13025: NOT
13026: IFFALSE 13167
// case Query ( Q1 ) of 1 :
13028: LD_STRING Q1
13030: PPUSH
13031: CALL_OW 97
13035: PUSH
13036: LD_INT 1
13038: DOUBLE
13039: EQUAL
13040: IFTRUE 13044
13042: GO 13155
13044: POP
// begin repeat wait ( 0 0$1 ) ;
13045: LD_INT 35
13047: PPUSH
13048: CALL_OW 67
// until UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) ;
13052: LD_EXP 3
13056: PPUSH
13057: LD_INT 22
13059: PUSH
13060: LD_INT 4
13062: PUSH
13063: EMPTY
13064: LIST
13065: LIST
13066: PUSH
13067: LD_INT 21
13069: PUSH
13070: LD_INT 1
13072: PUSH
13073: EMPTY
13074: LIST
13075: LIST
13076: PUSH
13077: EMPTY
13078: LIST
13079: LIST
13080: PPUSH
13081: CALL_OW 72
13085: PUSH
13086: LD_INT 0
13088: EQUAL
13089: PUSH
13090: LD_INT 19
13092: PPUSH
13093: LD_INT 22
13095: PUSH
13096: LD_INT 7
13098: PUSH
13099: EMPTY
13100: LIST
13101: LIST
13102: PUSH
13103: LD_INT 21
13105: PUSH
13106: LD_INT 1
13108: PUSH
13109: EMPTY
13110: LIST
13111: LIST
13112: PUSH
13113: EMPTY
13114: LIST
13115: LIST
13116: PPUSH
13117: CALL_OW 71
13121: NOT
13122: AND
13123: PUSH
13124: LD_INT 3
13126: PPUSH
13127: CALL_OW 469
13131: NOT
13132: AND
13133: PUSH
13134: LD_INT 5
13136: PPUSH
13137: CALL_OW 469
13141: NOT
13142: AND
13143: IFFALSE 13045
// all_taken := true ;
13145: LD_ADDR_VAR 0 1
13149: PUSH
13150: LD_INT 1
13152: ST_TO_ADDR
// end ; 2 :
13153: GO 13167
13155: LD_INT 2
13157: DOUBLE
13158: EQUAL
13159: IFTRUE 13163
13161: GO 13166
13163: POP
// ; end ;
13164: GO 13167
13166: POP
// if team_kill_counter < 3 then
13167: LD_EXP 9
13171: PUSH
13172: LD_INT 3
13174: LESS
13175: IFFALSE 13191
// Say ( JMM , D5-JMM-1 ) else
13177: LD_EXP 14
13181: PPUSH
13182: LD_STRING D5-JMM-1
13184: PPUSH
13185: CALL_OW 88
13189: GO 13203
// Say ( JMM , D5-JMM-1a ) ;
13191: LD_EXP 14
13195: PPUSH
13196: LD_STRING D5-JMM-1a
13198: PPUSH
13199: CALL_OW 88
// if ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Roth ] ) >= 10 then
13203: LD_INT 22
13205: PUSH
13206: LD_INT 7
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: PUSH
13213: LD_INT 21
13215: PUSH
13216: LD_INT 1
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: PUSH
13223: LD_INT 23
13225: PUSH
13226: LD_INT 1
13228: PUSH
13229: EMPTY
13230: LIST
13231: LIST
13232: PUSH
13233: EMPTY
13234: LIST
13235: LIST
13236: LIST
13237: PPUSH
13238: CALL_OW 69
13242: PUSH
13243: LD_EXP 14
13247: PUSH
13248: LD_EXP 15
13252: PUSH
13253: EMPTY
13254: LIST
13255: LIST
13256: DIFF
13257: PUSH
13258: LD_INT 10
13260: GREATEREQUAL
13261: IFFALSE 13270
// SetAchievement ( ACH_TEAM ) ;
13263: LD_STRING ACH_TEAM
13265: PPUSH
13266: CALL_OW 543
// if not invis_used then
13270: LD_EXP 12
13274: NOT
13275: IFFALSE 13291
// begin wait ( 3 ) ;
13277: LD_INT 3
13279: PPUSH
13280: CALL_OW 67
// SetAchievement ( ACH_NOINVIS ) ;
13284: LD_STRING ACH_NOINVIS
13286: PPUSH
13287: CALL_OW 543
// end ; if not alert then
13291: LD_EXP 13
13295: NOT
13296: IFFALSE 13312
// begin wait ( 3 ) ;
13298: LD_INT 3
13300: PPUSH
13301: CALL_OW 67
// SetAchievement ( ACH_ALARM ) ;
13305: LD_STRING ACH_ALARM
13307: PPUSH
13308: CALL_OW 543
// end ; if tick < 15 15$00 then
13312: LD_OWVAR 1
13316: PUSH
13317: LD_INT 31500
13319: LESS
13320: IFFALSE 13336
// begin wait ( 3 ) ;
13322: LD_INT 3
13324: PPUSH
13325: CALL_OW 67
// SetAchievement ( ACH_ASPEED_16 ) ;
13329: LD_STRING ACH_ASPEED_16
13331: PPUSH
13332: CALL_OW 543
// end ; if all_taken then
13336: LD_VAR 0 1
13340: IFFALSE 13362
// begin AddMedal ( All , 1 ) ;
13342: LD_STRING All
13344: PPUSH
13345: LD_INT 1
13347: PPUSH
13348: CALL_OW 101
// m1 := true ;
13352: LD_ADDR_VAR 0 3
13356: PUSH
13357: LD_INT 1
13359: ST_TO_ADDR
// end else
13360: GO 13373
// AddMedal ( All , - 1 ) ;
13362: LD_STRING All
13364: PPUSH
13365: LD_INT 1
13367: NEG
13368: PPUSH
13369: CALL_OW 101
// if team_kill_counter then
13373: LD_EXP 9
13377: IFFALSE 13392
// AddMedal ( Save , - 1 ) else
13379: LD_STRING Save
13381: PPUSH
13382: LD_INT 1
13384: NEG
13385: PPUSH
13386: CALL_OW 101
13390: GO 13410
// begin AddMedal ( Save , 1 ) ;
13392: LD_STRING Save
13394: PPUSH
13395: LD_INT 1
13397: PPUSH
13398: CALL_OW 101
// m2 := true ;
13402: LD_ADDR_VAR 0 4
13406: PUSH
13407: LD_INT 1
13409: ST_TO_ADDR
// end ; if friends_kill_counter >= [ 2 , 2 , 1 , 1 ] [ Difficulty ] then
13410: LD_EXP 8
13414: PUSH
13415: LD_INT 2
13417: PUSH
13418: LD_INT 2
13420: PUSH
13421: LD_INT 1
13423: PUSH
13424: LD_INT 1
13426: PUSH
13427: EMPTY
13428: LIST
13429: LIST
13430: LIST
13431: LIST
13432: PUSH
13433: LD_OWVAR 67
13437: ARRAY
13438: GREATEREQUAL
13439: IFFALSE 13454
// AddMedal ( Friendship , - 1 ) else
13441: LD_STRING Friendship
13443: PPUSH
13444: LD_INT 1
13446: NEG
13447: PPUSH
13448: CALL_OW 101
13452: GO 13472
// begin AddMedal ( Friendship , 1 ) ;
13454: LD_STRING Friendship
13456: PPUSH
13457: LD_INT 1
13459: PPUSH
13460: CALL_OW 101
// m3 := true ;
13464: LD_ADDR_VAR 0 5
13468: PUSH
13469: LD_INT 1
13471: ST_TO_ADDR
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
13472: LD_VAR 0 3
13476: PUSH
13477: LD_VAR 0 4
13481: AND
13482: PUSH
13483: LD_VAR 0 5
13487: AND
13488: PUSH
13489: LD_OWVAR 67
13493: PUSH
13494: LD_INT 3
13496: GREATEREQUAL
13497: AND
13498: IFFALSE 13510
// SetAchievementEX ( ACH_AMER , 16 ) ;
13500: LD_STRING ACH_AMER
13502: PPUSH
13503: LD_INT 16
13505: PPUSH
13506: CALL_OW 564
// GiveMedals ( MAIN ) ;
13510: LD_STRING MAIN
13512: PPUSH
13513: CALL_OW 102
// tmp := FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] , [ f_class , class_apeman_engineer ] ] ] ] ) ;
13517: LD_ADDR_VAR 0 2
13521: PUSH
13522: LD_INT 22
13524: PUSH
13525: LD_INT 7
13527: PUSH
13528: EMPTY
13529: LIST
13530: LIST
13531: PUSH
13532: LD_INT 2
13534: PUSH
13535: LD_INT 25
13537: PUSH
13538: LD_INT 1
13540: PUSH
13541: EMPTY
13542: LIST
13543: LIST
13544: PUSH
13545: LD_INT 25
13547: PUSH
13548: LD_INT 2
13550: PUSH
13551: EMPTY
13552: LIST
13553: LIST
13554: PUSH
13555: LD_INT 25
13557: PUSH
13558: LD_INT 3
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: PUSH
13565: LD_INT 25
13567: PUSH
13568: LD_INT 4
13570: PUSH
13571: EMPTY
13572: LIST
13573: LIST
13574: PUSH
13575: LD_INT 25
13577: PUSH
13578: LD_INT 5
13580: PUSH
13581: EMPTY
13582: LIST
13583: LIST
13584: PUSH
13585: LD_INT 25
13587: PUSH
13588: LD_INT 8
13590: PUSH
13591: EMPTY
13592: LIST
13593: LIST
13594: PUSH
13595: LD_INT 25
13597: PUSH
13598: LD_INT 9
13600: PUSH
13601: EMPTY
13602: LIST
13603: LIST
13604: PUSH
13605: LD_INT 25
13607: PUSH
13608: LD_INT 16
13610: PUSH
13611: EMPTY
13612: LIST
13613: LIST
13614: PUSH
13615: EMPTY
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: PUSH
13630: EMPTY
13631: LIST
13632: PPUSH
13633: CALL_OW 69
13637: ST_TO_ADDR
// RewardPeople ( tmp union Roth diff Mike ) ;
13638: LD_VAR 0 2
13642: PUSH
13643: LD_EXP 15
13647: UNION
13648: PUSH
13649: LD_EXP 38
13653: DIFF
13654: PPUSH
13655: CALL_OW 43
// SaveCharacters ( JMM , 12a_JMM ) ;
13659: LD_EXP 14
13663: PPUSH
13664: LD_STRING 12a_JMM
13666: PPUSH
13667: CALL_OW 38
// if IsLive ( Roth ) then
13671: LD_EXP 15
13675: PPUSH
13676: CALL_OW 300
13680: IFFALSE 13694
// SaveCharacters ( Roth , 12a_Roth ) ;
13682: LD_EXP 15
13686: PPUSH
13687: LD_STRING 12a_Roth
13689: PPUSH
13690: CALL_OW 38
// if Lisa in tmp then
13694: LD_EXP 23
13698: PUSH
13699: LD_VAR 0 2
13703: IN
13704: IFFALSE 13720
// SaveCharacters ( Lisa , 12a_Lisa ) else
13706: LD_EXP 23
13710: PPUSH
13711: LD_STRING 12a_Lisa
13713: PPUSH
13714: CALL_OW 38
13718: GO 13738
// if Lisa then
13720: LD_EXP 23
13724: IFFALSE 13738
// SaveCharacters ( Lisa , 12p_Lisa ) ;
13726: LD_EXP 23
13730: PPUSH
13731: LD_STRING 12p_Lisa
13733: PPUSH
13734: CALL_OW 38
// if Mike in tmp then
13738: LD_EXP 38
13742: PUSH
13743: LD_VAR 0 2
13747: IN
13748: IFFALSE 13762
// SaveCharacters ( Mike , 12a_Mike ) ;
13750: LD_EXP 38
13754: PPUSH
13755: LD_STRING 12a_Mike
13757: PPUSH
13758: CALL_OW 38
// if Donaldson in tmp then
13762: LD_EXP 24
13766: PUSH
13767: LD_VAR 0 2
13771: IN
13772: IFFALSE 13788
// SaveCharacters ( Donaldson , 12a_Donaldson ) else
13774: LD_EXP 24
13778: PPUSH
13779: LD_STRING 12a_Donaldson
13781: PPUSH
13782: CALL_OW 38
13786: GO 13806
// if Donaldson then
13788: LD_EXP 24
13792: IFFALSE 13806
// SaveCharacters ( Donaldson , 12p_Donaldson ) ;
13794: LD_EXP 24
13798: PPUSH
13799: LD_STRING 12p_Donaldson
13801: PPUSH
13802: CALL_OW 38
// if Bobby in tmp then
13806: LD_EXP 25
13810: PUSH
13811: LD_VAR 0 2
13815: IN
13816: IFFALSE 13832
// SaveCharacters ( Bobby , 12a_Bobby ) else
13818: LD_EXP 25
13822: PPUSH
13823: LD_STRING 12a_Bobby
13825: PPUSH
13826: CALL_OW 38
13830: GO 13850
// if Bobby then
13832: LD_EXP 25
13836: IFFALSE 13850
// SaveCharacters ( Bobby , 12p_Bobby ) ;
13838: LD_EXP 25
13842: PPUSH
13843: LD_STRING 12p_Bobby
13845: PPUSH
13846: CALL_OW 38
// if Cyrus in tmp then
13850: LD_EXP 26
13854: PUSH
13855: LD_VAR 0 2
13859: IN
13860: IFFALSE 13876
// SaveCharacters ( Cyrus , 12a_Cyrus ) else
13862: LD_EXP 26
13866: PPUSH
13867: LD_STRING 12a_Cyrus
13869: PPUSH
13870: CALL_OW 38
13874: GO 13894
// if Cyrus then
13876: LD_EXP 26
13880: IFFALSE 13894
// SaveCharacters ( Cyrus , 12p_Cyrus ) ;
13882: LD_EXP 26
13886: PPUSH
13887: LD_STRING 12p_Cyrus
13889: PPUSH
13890: CALL_OW 38
// if Denis in tmp then
13894: LD_EXP 27
13898: PUSH
13899: LD_VAR 0 2
13903: IN
13904: IFFALSE 13918
// SaveCharacters ( Denis , 12a_Denis ) ;
13906: LD_EXP 27
13910: PPUSH
13911: LD_STRING 12a_Denis
13913: PPUSH
13914: CALL_OW 38
// if Brown in tmp then
13918: LD_EXP 28
13922: PUSH
13923: LD_VAR 0 2
13927: IN
13928: IFFALSE 13944
// SaveCharacters ( Brown , 12a_Brown ) else
13930: LD_EXP 28
13934: PPUSH
13935: LD_STRING 12a_Brown
13937: PPUSH
13938: CALL_OW 38
13942: GO 13968
// if Brown in tmp then
13944: LD_EXP 28
13948: PUSH
13949: LD_VAR 0 2
13953: IN
13954: IFFALSE 13968
// SaveCharacters ( Brown , 12p_Brown ) ;
13956: LD_EXP 28
13960: PPUSH
13961: LD_STRING 12p_Brown
13963: PPUSH
13964: CALL_OW 38
// if Gladstone in tmp then
13968: LD_EXP 29
13972: PUSH
13973: LD_VAR 0 2
13977: IN
13978: IFFALSE 13994
// SaveCharacters ( Gladstone , 12a_Gladstone ) else
13980: LD_EXP 29
13984: PPUSH
13985: LD_STRING 12a_Gladstone
13987: PPUSH
13988: CALL_OW 38
13992: GO 14012
// if Gladstone then
13994: LD_EXP 29
13998: IFFALSE 14012
// SaveCharacters ( Gladstone , 12p_Gladstone ) ;
14000: LD_EXP 29
14004: PPUSH
14005: LD_STRING 12p_Gladstone
14007: PPUSH
14008: CALL_OW 38
// if Houten in tmp then
14012: LD_EXP 30
14016: PUSH
14017: LD_VAR 0 2
14021: IN
14022: IFFALSE 14038
// SaveCharacters ( Houten , 12a_Houten ) else
14024: LD_EXP 30
14028: PPUSH
14029: LD_STRING 12a_Houten
14031: PPUSH
14032: CALL_OW 38
14036: GO 14056
// if Houten then
14038: LD_EXP 30
14042: IFFALSE 14056
// SaveCharacters ( Houten , 12p_Houten ) ;
14044: LD_EXP 30
14048: PPUSH
14049: LD_STRING 12p_Houten
14051: PPUSH
14052: CALL_OW 38
// if Cornel in tmp then
14056: LD_EXP 31
14060: PUSH
14061: LD_VAR 0 2
14065: IN
14066: IFFALSE 14082
// SaveCharacters ( Cornel , 12a_Cornell ) else
14068: LD_EXP 31
14072: PPUSH
14073: LD_STRING 12a_Cornell
14075: PPUSH
14076: CALL_OW 38
14080: GO 14100
// if Cornel then
14082: LD_EXP 31
14086: IFFALSE 14100
// SaveCharacters ( Cornel , 12p_Cornell ) ;
14088: LD_EXP 31
14092: PPUSH
14093: LD_STRING 12p_Cornell
14095: PPUSH
14096: CALL_OW 38
// if Gary in tmp then
14100: LD_EXP 32
14104: PUSH
14105: LD_VAR 0 2
14109: IN
14110: IFFALSE 14126
// SaveCharacters ( Gary , 12a_Gary ) else
14112: LD_EXP 32
14116: PPUSH
14117: LD_STRING 12a_Gary
14119: PPUSH
14120: CALL_OW 38
14124: GO 14144
// if Gary then
14126: LD_EXP 32
14130: IFFALSE 14144
// SaveCharacters ( Gary , 12p_Gary ) ;
14132: LD_EXP 32
14136: PPUSH
14137: LD_STRING 12p_Gary
14139: PPUSH
14140: CALL_OW 38
// if Frank in tmp then
14144: LD_EXP 33
14148: PUSH
14149: LD_VAR 0 2
14153: IN
14154: IFFALSE 14168
// SaveCharacters ( Frank , 12a_Frank ) ;
14156: LD_EXP 33
14160: PPUSH
14161: LD_STRING 12a_Frank
14163: PPUSH
14164: CALL_OW 38
// if Kikuchi in tmp then
14168: LD_EXP 34
14172: PUSH
14173: LD_VAR 0 2
14177: IN
14178: IFFALSE 14194
// SaveCharacters ( Kikuchi , 12a_Kikuchi ) else
14180: LD_EXP 34
14184: PPUSH
14185: LD_STRING 12a_Kikuchi
14187: PPUSH
14188: CALL_OW 38
14192: GO 14212
// if Kikuchi then
14194: LD_EXP 34
14198: IFFALSE 14212
// SaveCharacters ( Kikuchi , 12p_Kikuchi ) ;
14200: LD_EXP 34
14204: PPUSH
14205: LD_STRING 12p_Kikuchi
14207: PPUSH
14208: CALL_OW 38
// if Simms in tmp then
14212: LD_EXP 35
14216: PUSH
14217: LD_VAR 0 2
14221: IN
14222: IFFALSE 14236
// SaveCharacters ( Simms , 12a_Simms ) ;
14224: LD_EXP 35
14228: PPUSH
14229: LD_STRING 12a_Simms
14231: PPUSH
14232: CALL_OW 38
// if Joan in tmp then
14236: LD_EXP 36
14240: PUSH
14241: LD_VAR 0 2
14245: IN
14246: IFFALSE 14260
// SaveCharacters ( Joan , 12a_Joan ) ;
14248: LD_EXP 36
14252: PPUSH
14253: LD_STRING 12a_Joan
14255: PPUSH
14256: CALL_OW 38
// if DeltaDoctor in tmp then
14260: LD_EXP 37
14264: PUSH
14265: LD_VAR 0 2
14269: IN
14270: IFFALSE 14284
// SaveCharacters ( DeltaDoctor , 12a_DeltaDoctor ) ;
14272: LD_EXP 37
14276: PPUSH
14277: LD_STRING 12a_DeltaDoctor
14279: PPUSH
14280: CALL_OW 38
// tmp := tmp diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Mike ] ;
14284: LD_ADDR_VAR 0 2
14288: PUSH
14289: LD_VAR 0 2
14293: PUSH
14294: LD_EXP 14
14298: PUSH
14299: LD_EXP 15
14303: PUSH
14304: LD_EXP 23
14308: PUSH
14309: LD_EXP 24
14313: PUSH
14314: LD_EXP 25
14318: PUSH
14319: LD_EXP 26
14323: PUSH
14324: LD_EXP 27
14328: PUSH
14329: LD_EXP 28
14333: PUSH
14334: LD_EXP 29
14338: PUSH
14339: LD_EXP 30
14343: PUSH
14344: LD_EXP 31
14348: PUSH
14349: LD_EXP 32
14353: PUSH
14354: LD_EXP 33
14358: PUSH
14359: LD_EXP 34
14363: PUSH
14364: LD_EXP 35
14368: PUSH
14369: LD_EXP 36
14373: PUSH
14374: LD_EXP 37
14378: PUSH
14379: LD_EXP 38
14383: PUSH
14384: EMPTY
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: LIST
14403: DIFF
14404: ST_TO_ADDR
// if tmp then
14405: LD_VAR 0 2
14409: IFFALSE 14423
// SaveCharacters ( tmp , 12a_others ) ;
14411: LD_VAR 0 2
14415: PPUSH
14416: LD_STRING 12a_others
14418: PPUSH
14419: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_side , 1 ] , [ f_side , 4 ] ] ] ) diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Powell , Mike ] ;
14423: LD_ADDR_VAR 0 2
14427: PUSH
14428: LD_INT 21
14430: PUSH
14431: LD_INT 1
14433: PUSH
14434: EMPTY
14435: LIST
14436: LIST
14437: PUSH
14438: LD_INT 23
14440: PUSH
14441: LD_INT 1
14443: PUSH
14444: EMPTY
14445: LIST
14446: LIST
14447: PUSH
14448: LD_INT 2
14450: PUSH
14451: LD_INT 22
14453: PUSH
14454: LD_INT 1
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: PUSH
14461: LD_INT 22
14463: PUSH
14464: LD_INT 4
14466: PUSH
14467: EMPTY
14468: LIST
14469: LIST
14470: PUSH
14471: EMPTY
14472: LIST
14473: LIST
14474: LIST
14475: PUSH
14476: EMPTY
14477: LIST
14478: LIST
14479: LIST
14480: PPUSH
14481: CALL_OW 69
14485: PUSH
14486: LD_EXP 14
14490: PUSH
14491: LD_EXP 15
14495: PUSH
14496: LD_EXP 23
14500: PUSH
14501: LD_EXP 24
14505: PUSH
14506: LD_EXP 25
14510: PUSH
14511: LD_EXP 26
14515: PUSH
14516: LD_EXP 27
14520: PUSH
14521: LD_EXP 28
14525: PUSH
14526: LD_EXP 29
14530: PUSH
14531: LD_EXP 30
14535: PUSH
14536: LD_EXP 31
14540: PUSH
14541: LD_EXP 32
14545: PUSH
14546: LD_EXP 33
14550: PUSH
14551: LD_EXP 34
14555: PUSH
14556: LD_EXP 35
14560: PUSH
14561: LD_EXP 36
14565: PUSH
14566: LD_EXP 37
14570: PUSH
14571: LD_EXP 16
14575: PUSH
14576: LD_EXP 38
14580: PUSH
14581: EMPTY
14582: LIST
14583: LIST
14584: LIST
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: DIFF
14602: ST_TO_ADDR
// if tmp then
14603: LD_VAR 0 2
14607: IFFALSE 14621
// SaveCharacters ( tmp , 12p_others ) ;
14609: LD_VAR 0 2
14613: PPUSH
14614: LD_STRING 12p_others
14616: PPUSH
14617: CALL_OW 38
// YouWin ;
14621: CALL_OW 103
// end ; end_of_file
14625: PPOPN 5
14627: END
// on SailEvent ( event ) do var tmp ;
14628: LD_INT 0
14630: PPUSH
// begin if event = 1 then
14631: LD_VAR 0 1
14635: PUSH
14636: LD_INT 1
14638: EQUAL
14639: IFFALSE 14712
// begin if not mobile_patrol then
14641: LD_EXP 17
14645: NOT
14646: IFFALSE 14650
// exit ;
14648: GO 14712
// tmp := mobile_patrol [ mobile_patrol ] ;
14650: LD_ADDR_VAR 0 2
14654: PUSH
14655: LD_EXP 17
14659: PUSH
14660: LD_EXP 17
14664: ARRAY
14665: ST_TO_ADDR
// mobile_patrol := Delete ( mobile_patrol , mobile_patrol ) ;
14666: LD_ADDR_EXP 17
14670: PUSH
14671: LD_EXP 17
14675: PPUSH
14676: LD_EXP 17
14680: PPUSH
14681: CALL_OW 3
14685: ST_TO_ADDR
// Patrol ( tmp , mobile_points [ mobile_patrol + 1 ] , [ ] ) ;
14686: LD_VAR 0 2
14690: PPUSH
14691: LD_EXP 18
14695: PUSH
14696: LD_EXP 17
14700: PUSH
14701: LD_INT 1
14703: PLUS
14704: ARRAY
14705: PPUSH
14706: EMPTY
14707: PPUSH
14708: CALL 6751 0 3
// end ; end ;
14712: PPOPN 2
14714: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
14715: LD_VAR 0 1
14719: PPUSH
14720: CALL 31034 0 1
// if un = JMM then
14724: LD_VAR 0 1
14728: PUSH
14729: LD_EXP 14
14733: EQUAL
14734: IFFALSE 14743
// YouLost ( JMM ) ;
14736: LD_STRING JMM
14738: PPUSH
14739: CALL_OW 104
// if GetSide ( un ) = 7 and GetWeapon ( un ) = us_cargo_bay then
14743: LD_VAR 0 1
14747: PPUSH
14748: CALL_OW 255
14752: PUSH
14753: LD_INT 7
14755: EQUAL
14756: PUSH
14757: LD_VAR 0 1
14761: PPUSH
14762: CALL_OW 264
14766: PUSH
14767: LD_INT 12
14769: EQUAL
14770: AND
14771: IFFALSE 14780
// YouLost ( Artifact ) ;
14773: LD_STRING Artifact
14775: PPUSH
14776: CALL_OW 104
// if ( GetSide ( un ) = 7 and GetType ( un ) = unit_human ) or un = Roth then
14780: LD_VAR 0 1
14784: PPUSH
14785: CALL_OW 255
14789: PUSH
14790: LD_INT 7
14792: EQUAL
14793: PUSH
14794: LD_VAR 0 1
14798: PPUSH
14799: CALL_OW 247
14803: PUSH
14804: LD_INT 1
14806: EQUAL
14807: AND
14808: PUSH
14809: LD_VAR 0 1
14813: PUSH
14814: LD_EXP 15
14818: EQUAL
14819: OR
14820: IFFALSE 14836
// team_kill_counter := team_kill_counter + 1 ;
14822: LD_ADDR_EXP 9
14826: PUSH
14827: LD_EXP 9
14831: PUSH
14832: LD_INT 1
14834: PLUS
14835: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetType ( un ) = unit_human then
14836: LD_VAR 0 1
14840: PPUSH
14841: CALL_OW 255
14845: PUSH
14846: LD_INT 1
14848: EQUAL
14849: PUSH
14850: LD_VAR 0 1
14854: PPUSH
14855: CALL_OW 247
14859: PUSH
14860: LD_INT 1
14862: EQUAL
14863: AND
14864: IFFALSE 14880
// friends_kill_counter := friends_kill_counter + 1 ;
14866: LD_ADDR_EXP 8
14870: PUSH
14871: LD_EXP 8
14875: PUSH
14876: LD_INT 1
14878: PLUS
14879: ST_TO_ADDR
// if GetSide ( un ) <> 1 then
14880: LD_VAR 0 1
14884: PPUSH
14885: CALL_OW 255
14889: PUSH
14890: LD_INT 1
14892: NONEQUAL
14893: IFFALSE 14897
// exit ;
14895: GO 14974
// if GetControl ( un ) = control_remote then
14897: LD_VAR 0 1
14901: PPUSH
14902: CALL_OW 263
14906: PUSH
14907: LD_INT 2
14909: EQUAL
14910: IFFALSE 14928
// defenders := defenders diff un ;
14912: LD_ADDR_EXP 20
14916: PUSH
14917: LD_EXP 20
14921: PUSH
14922: LD_VAR 0 1
14926: DIFF
14927: ST_TO_ADDR
// if not un in defenders then
14928: LD_VAR 0 1
14932: PUSH
14933: LD_EXP 20
14937: IN
14938: NOT
14939: IFFALSE 14974
// begin defcon := [ GetX ( un ) , GetY ( un ) ] ;
14941: LD_ADDR_EXP 21
14945: PUSH
14946: LD_VAR 0 1
14950: PPUSH
14951: CALL_OW 250
14955: PUSH
14956: LD_VAR 0 1
14960: PPUSH
14961: CALL_OW 251
14965: PUSH
14966: EMPTY
14967: LIST
14968: LIST
14969: ST_TO_ADDR
// Defend ;
14970: CALL 2791 0 0
// end ; end ;
14974: PPOPN 1
14976: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
14977: LD_VAR 0 1
14981: PPUSH
14982: LD_VAR 0 2
14986: PPUSH
14987: CALL 31154 0 2
// if GetSide ( veh ) <> 1 then
14991: LD_VAR 0 1
14995: PPUSH
14996: CALL_OW 255
15000: PUSH
15001: LD_INT 1
15003: NONEQUAL
15004: IFFALSE 15008
// exit ;
15006: GO 15032
// if GetControl ( veh ) = control_remote then
15008: LD_VAR 0 1
15012: PPUSH
15013: CALL_OW 263
15017: PUSH
15018: LD_INT 2
15020: EQUAL
15021: IFFALSE 15032
// Connect ( veh ) ;
15023: LD_VAR 0 1
15027: PPUSH
15028: CALL 43429 0 1
// end ;
15032: PPOPN 2
15034: END
// on UnitGoesToRed ( un ) do var i , veh ;
15035: LD_INT 0
15037: PPUSH
15038: PPUSH
// begin if GetSide ( un ) = 1 and GetControl ( un ) = control_remote then
15039: LD_VAR 0 1
15043: PPUSH
15044: CALL_OW 255
15048: PUSH
15049: LD_INT 1
15051: EQUAL
15052: PUSH
15053: LD_VAR 0 1
15057: PPUSH
15058: CALL_OW 263
15062: PUSH
15063: LD_INT 2
15065: EQUAL
15066: AND
15067: IFFALSE 15078
// ComUnlink ( un ) ;
15069: LD_VAR 0 1
15073: PPUSH
15074: CALL_OW 136
// if un = ambar0 then
15078: LD_VAR 0 1
15082: PUSH
15083: LD_INT 18
15085: EQUAL
15086: IFFALSE 15196
// begin uc_side := 1 ;
15088: LD_ADDR_OWVAR 20
15092: PUSH
15093: LD_INT 1
15095: ST_TO_ADDR
// uc_nation := 1 ;
15096: LD_ADDR_OWVAR 21
15100: PUSH
15101: LD_INT 1
15103: ST_TO_ADDR
// for i = 1 to 6 do
15104: LD_ADDR_VAR 0 2
15108: PUSH
15109: DOUBLE
15110: LD_INT 1
15112: DEC
15113: ST_TO_ADDR
15114: LD_INT 6
15116: PUSH
15117: FOR_TO
15118: IFFALSE 15194
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
15120: LD_INT 3
15122: PPUSH
15123: LD_INT 1
15125: PPUSH
15126: LD_INT 3
15128: PPUSH
15129: LD_INT 4
15131: PPUSH
15132: LD_INT 100
15134: PPUSH
15135: CALL 40338 0 5
// veh := CreateVehicle ;
15139: LD_ADDR_VAR 0 3
15143: PUSH
15144: CALL_OW 45
15148: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
15149: LD_VAR 0 3
15153: PPUSH
15154: LD_INT 1
15156: PPUSH
15157: CALL_OW 233
// PlaceUnitArea ( veh , west_spawn , false ) ;
15161: LD_VAR 0 3
15165: PPUSH
15166: LD_INT 25
15168: PPUSH
15169: LD_INT 0
15171: PPUSH
15172: CALL_OW 49
// defenders := defenders ^ veh ;
15176: LD_ADDR_EXP 20
15180: PUSH
15181: LD_EXP 20
15185: PUSH
15186: LD_VAR 0 3
15190: ADD
15191: ST_TO_ADDR
// end ;
15192: GO 15117
15194: POP
15195: POP
// end ; end ;
15196: PPOPN 3
15198: END
// on EnterBuilding ( building , unit ) do begin if unit = Powell then
15199: LD_VAR 0 2
15203: PUSH
15204: LD_EXP 16
15208: EQUAL
15209: IFFALSE 15220
// RemoveUnit ( Powell ) ;
15211: LD_EXP 16
15215: PPUSH
15216: CALL_OW 64
// end ;
15220: PPOPN 2
15222: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
15223: LD_VAR 0 1
15227: PPUSH
15228: CALL 31138 0 1
// end ; end_of_file end_of_file
15232: PPOPN 1
15234: END
// every 0 0$1 do
15235: GO 15237
15237: DISABLE
// begin enable ;
15238: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
15239: LD_STRING updateTimer(
15241: PUSH
15242: LD_OWVAR 1
15246: STR
15247: PUSH
15248: LD_STRING );
15250: STR
15251: PPUSH
15252: CALL_OW 559
// end ;
15256: END
// export function SOS_MapStart ( ) ; begin
15257: LD_INT 0
15259: PPUSH
// if streamModeActive then
15260: LD_EXP 40
15264: IFFALSE 15273
// DefineStreamItems ( true ) ;
15266: LD_INT 1
15268: PPUSH
15269: CALL 17077 0 1
// UpdateLuaVariables ( ) ;
15273: CALL 15290 0 0
// UpdateFactoryWaypoints ( ) ;
15277: CALL 29938 0 0
// UpdateWarehouseGatheringPoints ( ) ;
15281: CALL 30195 0 0
// end ;
15285: LD_VAR 0 1
15289: RET
// export globalGameSaveCounter ; function UpdateLuaVariables ( ) ; begin
15290: LD_INT 0
15292: PPUSH
// if not globalGameSaveCounter then
15293: LD_EXP 39
15297: NOT
15298: IFFALSE 15309
// ToLua ( setGameSaveCounter(0) ) else
15300: LD_STRING setGameSaveCounter(0)
15302: PPUSH
15303: CALL_OW 559
15307: GO 15341
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
15309: LD_ADDR_EXP 39
15313: PUSH
15314: LD_EXP 39
15318: PPUSH
15319: CALL 74152 0 1
15323: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
15324: LD_STRING setGameSaveCounter(
15326: PUSH
15327: LD_EXP 39
15331: STR
15332: PUSH
15333: LD_STRING )
15335: STR
15336: PPUSH
15337: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
15341: LD_STRING setGameDifficulty(
15343: PUSH
15344: LD_OWVAR 67
15348: STR
15349: PUSH
15350: LD_STRING )
15352: STR
15353: PPUSH
15354: CALL_OW 559
// end ;
15358: LD_VAR 0 1
15362: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15363: LD_INT 0
15365: PPUSH
// if p2 = stream_mode then
15366: LD_VAR 0 2
15370: PUSH
15371: LD_INT 100
15373: EQUAL
15374: IFFALSE 16377
// begin if not StreamModeActive then
15376: LD_EXP 40
15380: NOT
15381: IFFALSE 15391
// StreamModeActive := true ;
15383: LD_ADDR_EXP 40
15387: PUSH
15388: LD_INT 1
15390: ST_TO_ADDR
// if p3 = 0 then
15391: LD_VAR 0 3
15395: PUSH
15396: LD_INT 0
15398: EQUAL
15399: IFFALSE 15405
// InitStreamMode ;
15401: CALL 16613 0 0
// if p3 = 1 then
15405: LD_VAR 0 3
15409: PUSH
15410: LD_INT 1
15412: EQUAL
15413: IFFALSE 15423
// sRocket := true ;
15415: LD_ADDR_EXP 45
15419: PUSH
15420: LD_INT 1
15422: ST_TO_ADDR
// if p3 = 2 then
15423: LD_VAR 0 3
15427: PUSH
15428: LD_INT 2
15430: EQUAL
15431: IFFALSE 15441
// sSpeed := true ;
15433: LD_ADDR_EXP 44
15437: PUSH
15438: LD_INT 1
15440: ST_TO_ADDR
// if p3 = 3 then
15441: LD_VAR 0 3
15445: PUSH
15446: LD_INT 3
15448: EQUAL
15449: IFFALSE 15459
// sEngine := true ;
15451: LD_ADDR_EXP 46
15455: PUSH
15456: LD_INT 1
15458: ST_TO_ADDR
// if p3 = 4 then
15459: LD_VAR 0 3
15463: PUSH
15464: LD_INT 4
15466: EQUAL
15467: IFFALSE 15477
// sSpec := true ;
15469: LD_ADDR_EXP 43
15473: PUSH
15474: LD_INT 1
15476: ST_TO_ADDR
// if p3 = 5 then
15477: LD_VAR 0 3
15481: PUSH
15482: LD_INT 5
15484: EQUAL
15485: IFFALSE 15495
// sLevel := true ;
15487: LD_ADDR_EXP 47
15491: PUSH
15492: LD_INT 1
15494: ST_TO_ADDR
// if p3 = 6 then
15495: LD_VAR 0 3
15499: PUSH
15500: LD_INT 6
15502: EQUAL
15503: IFFALSE 15513
// sArmoury := true ;
15505: LD_ADDR_EXP 48
15509: PUSH
15510: LD_INT 1
15512: ST_TO_ADDR
// if p3 = 7 then
15513: LD_VAR 0 3
15517: PUSH
15518: LD_INT 7
15520: EQUAL
15521: IFFALSE 15531
// sRadar := true ;
15523: LD_ADDR_EXP 49
15527: PUSH
15528: LD_INT 1
15530: ST_TO_ADDR
// if p3 = 8 then
15531: LD_VAR 0 3
15535: PUSH
15536: LD_INT 8
15538: EQUAL
15539: IFFALSE 15549
// sBunker := true ;
15541: LD_ADDR_EXP 50
15545: PUSH
15546: LD_INT 1
15548: ST_TO_ADDR
// if p3 = 9 then
15549: LD_VAR 0 3
15553: PUSH
15554: LD_INT 9
15556: EQUAL
15557: IFFALSE 15567
// sHack := true ;
15559: LD_ADDR_EXP 51
15563: PUSH
15564: LD_INT 1
15566: ST_TO_ADDR
// if p3 = 10 then
15567: LD_VAR 0 3
15571: PUSH
15572: LD_INT 10
15574: EQUAL
15575: IFFALSE 15585
// sFire := true ;
15577: LD_ADDR_EXP 52
15581: PUSH
15582: LD_INT 1
15584: ST_TO_ADDR
// if p3 = 11 then
15585: LD_VAR 0 3
15589: PUSH
15590: LD_INT 11
15592: EQUAL
15593: IFFALSE 15603
// sRefresh := true ;
15595: LD_ADDR_EXP 53
15599: PUSH
15600: LD_INT 1
15602: ST_TO_ADDR
// if p3 = 12 then
15603: LD_VAR 0 3
15607: PUSH
15608: LD_INT 12
15610: EQUAL
15611: IFFALSE 15621
// sExp := true ;
15613: LD_ADDR_EXP 54
15617: PUSH
15618: LD_INT 1
15620: ST_TO_ADDR
// if p3 = 13 then
15621: LD_VAR 0 3
15625: PUSH
15626: LD_INT 13
15628: EQUAL
15629: IFFALSE 15639
// sDepot := true ;
15631: LD_ADDR_EXP 55
15635: PUSH
15636: LD_INT 1
15638: ST_TO_ADDR
// if p3 = 14 then
15639: LD_VAR 0 3
15643: PUSH
15644: LD_INT 14
15646: EQUAL
15647: IFFALSE 15657
// sFlag := true ;
15649: LD_ADDR_EXP 56
15653: PUSH
15654: LD_INT 1
15656: ST_TO_ADDR
// if p3 = 15 then
15657: LD_VAR 0 3
15661: PUSH
15662: LD_INT 15
15664: EQUAL
15665: IFFALSE 15675
// sKamikadze := true ;
15667: LD_ADDR_EXP 64
15671: PUSH
15672: LD_INT 1
15674: ST_TO_ADDR
// if p3 = 16 then
15675: LD_VAR 0 3
15679: PUSH
15680: LD_INT 16
15682: EQUAL
15683: IFFALSE 15693
// sTroll := true ;
15685: LD_ADDR_EXP 65
15689: PUSH
15690: LD_INT 1
15692: ST_TO_ADDR
// if p3 = 17 then
15693: LD_VAR 0 3
15697: PUSH
15698: LD_INT 17
15700: EQUAL
15701: IFFALSE 15711
// sSlow := true ;
15703: LD_ADDR_EXP 66
15707: PUSH
15708: LD_INT 1
15710: ST_TO_ADDR
// if p3 = 18 then
15711: LD_VAR 0 3
15715: PUSH
15716: LD_INT 18
15718: EQUAL
15719: IFFALSE 15729
// sLack := true ;
15721: LD_ADDR_EXP 67
15725: PUSH
15726: LD_INT 1
15728: ST_TO_ADDR
// if p3 = 19 then
15729: LD_VAR 0 3
15733: PUSH
15734: LD_INT 19
15736: EQUAL
15737: IFFALSE 15747
// sTank := true ;
15739: LD_ADDR_EXP 69
15743: PUSH
15744: LD_INT 1
15746: ST_TO_ADDR
// if p3 = 20 then
15747: LD_VAR 0 3
15751: PUSH
15752: LD_INT 20
15754: EQUAL
15755: IFFALSE 15765
// sRemote := true ;
15757: LD_ADDR_EXP 70
15761: PUSH
15762: LD_INT 1
15764: ST_TO_ADDR
// if p3 = 21 then
15765: LD_VAR 0 3
15769: PUSH
15770: LD_INT 21
15772: EQUAL
15773: IFFALSE 15783
// sPowell := true ;
15775: LD_ADDR_EXP 71
15779: PUSH
15780: LD_INT 1
15782: ST_TO_ADDR
// if p3 = 22 then
15783: LD_VAR 0 3
15787: PUSH
15788: LD_INT 22
15790: EQUAL
15791: IFFALSE 15801
// sTeleport := true ;
15793: LD_ADDR_EXP 74
15797: PUSH
15798: LD_INT 1
15800: ST_TO_ADDR
// if p3 = 23 then
15801: LD_VAR 0 3
15805: PUSH
15806: LD_INT 23
15808: EQUAL
15809: IFFALSE 15819
// sOilTower := true ;
15811: LD_ADDR_EXP 76
15815: PUSH
15816: LD_INT 1
15818: ST_TO_ADDR
// if p3 = 24 then
15819: LD_VAR 0 3
15823: PUSH
15824: LD_INT 24
15826: EQUAL
15827: IFFALSE 15837
// sShovel := true ;
15829: LD_ADDR_EXP 77
15833: PUSH
15834: LD_INT 1
15836: ST_TO_ADDR
// if p3 = 25 then
15837: LD_VAR 0 3
15841: PUSH
15842: LD_INT 25
15844: EQUAL
15845: IFFALSE 15855
// sSheik := true ;
15847: LD_ADDR_EXP 78
15851: PUSH
15852: LD_INT 1
15854: ST_TO_ADDR
// if p3 = 26 then
15855: LD_VAR 0 3
15859: PUSH
15860: LD_INT 26
15862: EQUAL
15863: IFFALSE 15873
// sEarthquake := true ;
15865: LD_ADDR_EXP 80
15869: PUSH
15870: LD_INT 1
15872: ST_TO_ADDR
// if p3 = 27 then
15873: LD_VAR 0 3
15877: PUSH
15878: LD_INT 27
15880: EQUAL
15881: IFFALSE 15891
// sAI := true ;
15883: LD_ADDR_EXP 81
15887: PUSH
15888: LD_INT 1
15890: ST_TO_ADDR
// if p3 = 28 then
15891: LD_VAR 0 3
15895: PUSH
15896: LD_INT 28
15898: EQUAL
15899: IFFALSE 15909
// sCargo := true ;
15901: LD_ADDR_EXP 84
15905: PUSH
15906: LD_INT 1
15908: ST_TO_ADDR
// if p3 = 29 then
15909: LD_VAR 0 3
15913: PUSH
15914: LD_INT 29
15916: EQUAL
15917: IFFALSE 15927
// sDLaser := true ;
15919: LD_ADDR_EXP 85
15923: PUSH
15924: LD_INT 1
15926: ST_TO_ADDR
// if p3 = 30 then
15927: LD_VAR 0 3
15931: PUSH
15932: LD_INT 30
15934: EQUAL
15935: IFFALSE 15945
// sExchange := true ;
15937: LD_ADDR_EXP 86
15941: PUSH
15942: LD_INT 1
15944: ST_TO_ADDR
// if p3 = 31 then
15945: LD_VAR 0 3
15949: PUSH
15950: LD_INT 31
15952: EQUAL
15953: IFFALSE 15963
// sFac := true ;
15955: LD_ADDR_EXP 87
15959: PUSH
15960: LD_INT 1
15962: ST_TO_ADDR
// if p3 = 32 then
15963: LD_VAR 0 3
15967: PUSH
15968: LD_INT 32
15970: EQUAL
15971: IFFALSE 15981
// sPower := true ;
15973: LD_ADDR_EXP 88
15977: PUSH
15978: LD_INT 1
15980: ST_TO_ADDR
// if p3 = 33 then
15981: LD_VAR 0 3
15985: PUSH
15986: LD_INT 33
15988: EQUAL
15989: IFFALSE 15999
// sRandom := true ;
15991: LD_ADDR_EXP 89
15995: PUSH
15996: LD_INT 1
15998: ST_TO_ADDR
// if p3 = 34 then
15999: LD_VAR 0 3
16003: PUSH
16004: LD_INT 34
16006: EQUAL
16007: IFFALSE 16017
// sShield := true ;
16009: LD_ADDR_EXP 90
16013: PUSH
16014: LD_INT 1
16016: ST_TO_ADDR
// if p3 = 35 then
16017: LD_VAR 0 3
16021: PUSH
16022: LD_INT 35
16024: EQUAL
16025: IFFALSE 16035
// sTime := true ;
16027: LD_ADDR_EXP 91
16031: PUSH
16032: LD_INT 1
16034: ST_TO_ADDR
// if p3 = 36 then
16035: LD_VAR 0 3
16039: PUSH
16040: LD_INT 36
16042: EQUAL
16043: IFFALSE 16053
// sTools := true ;
16045: LD_ADDR_EXP 92
16049: PUSH
16050: LD_INT 1
16052: ST_TO_ADDR
// if p3 = 101 then
16053: LD_VAR 0 3
16057: PUSH
16058: LD_INT 101
16060: EQUAL
16061: IFFALSE 16071
// sSold := true ;
16063: LD_ADDR_EXP 57
16067: PUSH
16068: LD_INT 1
16070: ST_TO_ADDR
// if p3 = 102 then
16071: LD_VAR 0 3
16075: PUSH
16076: LD_INT 102
16078: EQUAL
16079: IFFALSE 16089
// sDiff := true ;
16081: LD_ADDR_EXP 58
16085: PUSH
16086: LD_INT 1
16088: ST_TO_ADDR
// if p3 = 103 then
16089: LD_VAR 0 3
16093: PUSH
16094: LD_INT 103
16096: EQUAL
16097: IFFALSE 16107
// sFog := true ;
16099: LD_ADDR_EXP 61
16103: PUSH
16104: LD_INT 1
16106: ST_TO_ADDR
// if p3 = 104 then
16107: LD_VAR 0 3
16111: PUSH
16112: LD_INT 104
16114: EQUAL
16115: IFFALSE 16125
// sReset := true ;
16117: LD_ADDR_EXP 62
16121: PUSH
16122: LD_INT 1
16124: ST_TO_ADDR
// if p3 = 105 then
16125: LD_VAR 0 3
16129: PUSH
16130: LD_INT 105
16132: EQUAL
16133: IFFALSE 16143
// sSun := true ;
16135: LD_ADDR_EXP 63
16139: PUSH
16140: LD_INT 1
16142: ST_TO_ADDR
// if p3 = 106 then
16143: LD_VAR 0 3
16147: PUSH
16148: LD_INT 106
16150: EQUAL
16151: IFFALSE 16161
// sTiger := true ;
16153: LD_ADDR_EXP 59
16157: PUSH
16158: LD_INT 1
16160: ST_TO_ADDR
// if p3 = 107 then
16161: LD_VAR 0 3
16165: PUSH
16166: LD_INT 107
16168: EQUAL
16169: IFFALSE 16179
// sBomb := true ;
16171: LD_ADDR_EXP 60
16175: PUSH
16176: LD_INT 1
16178: ST_TO_ADDR
// if p3 = 108 then
16179: LD_VAR 0 3
16183: PUSH
16184: LD_INT 108
16186: EQUAL
16187: IFFALSE 16197
// sWound := true ;
16189: LD_ADDR_EXP 68
16193: PUSH
16194: LD_INT 1
16196: ST_TO_ADDR
// if p3 = 109 then
16197: LD_VAR 0 3
16201: PUSH
16202: LD_INT 109
16204: EQUAL
16205: IFFALSE 16215
// sBetray := true ;
16207: LD_ADDR_EXP 72
16211: PUSH
16212: LD_INT 1
16214: ST_TO_ADDR
// if p3 = 110 then
16215: LD_VAR 0 3
16219: PUSH
16220: LD_INT 110
16222: EQUAL
16223: IFFALSE 16233
// sContamin := true ;
16225: LD_ADDR_EXP 73
16229: PUSH
16230: LD_INT 1
16232: ST_TO_ADDR
// if p3 = 111 then
16233: LD_VAR 0 3
16237: PUSH
16238: LD_INT 111
16240: EQUAL
16241: IFFALSE 16251
// sOil := true ;
16243: LD_ADDR_EXP 75
16247: PUSH
16248: LD_INT 1
16250: ST_TO_ADDR
// if p3 = 112 then
16251: LD_VAR 0 3
16255: PUSH
16256: LD_INT 112
16258: EQUAL
16259: IFFALSE 16269
// sStu := true ;
16261: LD_ADDR_EXP 79
16265: PUSH
16266: LD_INT 1
16268: ST_TO_ADDR
// if p3 = 113 then
16269: LD_VAR 0 3
16273: PUSH
16274: LD_INT 113
16276: EQUAL
16277: IFFALSE 16287
// sBazooka := true ;
16279: LD_ADDR_EXP 82
16283: PUSH
16284: LD_INT 1
16286: ST_TO_ADDR
// if p3 = 114 then
16287: LD_VAR 0 3
16291: PUSH
16292: LD_INT 114
16294: EQUAL
16295: IFFALSE 16305
// sMortar := true ;
16297: LD_ADDR_EXP 83
16301: PUSH
16302: LD_INT 1
16304: ST_TO_ADDR
// if p3 = 115 then
16305: LD_VAR 0 3
16309: PUSH
16310: LD_INT 115
16312: EQUAL
16313: IFFALSE 16323
// sRanger := true ;
16315: LD_ADDR_EXP 93
16319: PUSH
16320: LD_INT 1
16322: ST_TO_ADDR
// if p3 = 116 then
16323: LD_VAR 0 3
16327: PUSH
16328: LD_INT 116
16330: EQUAL
16331: IFFALSE 16341
// sComputer := true ;
16333: LD_ADDR_EXP 94
16337: PUSH
16338: LD_INT 1
16340: ST_TO_ADDR
// if p3 = 117 then
16341: LD_VAR 0 3
16345: PUSH
16346: LD_INT 117
16348: EQUAL
16349: IFFALSE 16359
// s30 := true ;
16351: LD_ADDR_EXP 95
16355: PUSH
16356: LD_INT 1
16358: ST_TO_ADDR
// if p3 = 118 then
16359: LD_VAR 0 3
16363: PUSH
16364: LD_INT 118
16366: EQUAL
16367: IFFALSE 16377
// s60 := true ;
16369: LD_ADDR_EXP 96
16373: PUSH
16374: LD_INT 1
16376: ST_TO_ADDR
// end ; if p2 = hack_mode then
16377: LD_VAR 0 2
16381: PUSH
16382: LD_INT 101
16384: EQUAL
16385: IFFALSE 16513
// begin case p3 of 1 :
16387: LD_VAR 0 3
16391: PUSH
16392: LD_INT 1
16394: DOUBLE
16395: EQUAL
16396: IFTRUE 16400
16398: GO 16407
16400: POP
// hHackUnlimitedResources ; 2 :
16401: CALL 28684 0 0
16405: GO 16513
16407: LD_INT 2
16409: DOUBLE
16410: EQUAL
16411: IFTRUE 16415
16413: GO 16422
16415: POP
// hHackSetLevel10 ; 3 :
16416: CALL 28817 0 0
16420: GO 16513
16422: LD_INT 3
16424: DOUBLE
16425: EQUAL
16426: IFTRUE 16430
16428: GO 16437
16430: POP
// hHackSetLevel10YourUnits ; 4 :
16431: CALL 28902 0 0
16435: GO 16513
16437: LD_INT 4
16439: DOUBLE
16440: EQUAL
16441: IFTRUE 16445
16443: GO 16452
16445: POP
// hHackInvincible ; 5 :
16446: CALL 29350 0 0
16450: GO 16513
16452: LD_INT 5
16454: DOUBLE
16455: EQUAL
16456: IFTRUE 16460
16458: GO 16467
16460: POP
// hHackInvisible ; 6 :
16461: CALL 29461 0 0
16465: GO 16513
16467: LD_INT 6
16469: DOUBLE
16470: EQUAL
16471: IFTRUE 16475
16473: GO 16482
16475: POP
// hHackChangeYourSide ; 7 :
16476: CALL 29518 0 0
16480: GO 16513
16482: LD_INT 7
16484: DOUBLE
16485: EQUAL
16486: IFTRUE 16490
16488: GO 16497
16490: POP
// hHackChangeUnitSide ; 8 :
16491: CALL 29560 0 0
16495: GO 16513
16497: LD_INT 8
16499: DOUBLE
16500: EQUAL
16501: IFTRUE 16505
16503: GO 16512
16505: POP
// hHackFog ; end ;
16506: CALL 29661 0 0
16510: GO 16513
16512: POP
// end ; if p2 = game_save_mode then
16513: LD_VAR 0 2
16517: PUSH
16518: LD_INT 102
16520: EQUAL
16521: IFFALSE 16586
// begin if p3 = 1 then
16523: LD_VAR 0 3
16527: PUSH
16528: LD_INT 1
16530: EQUAL
16531: IFFALSE 16543
// globalGameSaveCounter := p4 ;
16533: LD_ADDR_EXP 39
16537: PUSH
16538: LD_VAR 0 4
16542: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
16543: LD_VAR 0 3
16547: PUSH
16548: LD_INT 2
16550: EQUAL
16551: PUSH
16552: LD_EXP 39
16556: AND
16557: IFFALSE 16576
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
16559: LD_STRING setGameSaveCounter(
16561: PUSH
16562: LD_EXP 39
16566: STR
16567: PUSH
16568: LD_STRING )
16570: STR
16571: PPUSH
16572: CALL_OW 559
// display_strings := globalGameSaveCounter ;
16576: LD_ADDR_OWVAR 47
16580: PUSH
16581: LD_EXP 39
16585: ST_TO_ADDR
// end ; end ;
16586: LD_VAR 0 7
16590: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
16591: GO 16593
16593: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
16594: LD_STRING initStreamRollete();
16596: PPUSH
16597: CALL_OW 559
// InitStreamMode ;
16601: CALL 16613 0 0
// DefineStreamItems ( false ) ;
16605: LD_INT 0
16607: PPUSH
16608: CALL 17077 0 1
// end ;
16612: END
// function InitStreamMode ; begin
16613: LD_INT 0
16615: PPUSH
// streamModeActive := false ;
16616: LD_ADDR_EXP 40
16620: PUSH
16621: LD_INT 0
16623: ST_TO_ADDR
// normalCounter := 36 ;
16624: LD_ADDR_EXP 41
16628: PUSH
16629: LD_INT 36
16631: ST_TO_ADDR
// hardcoreCounter := 18 ;
16632: LD_ADDR_EXP 42
16636: PUSH
16637: LD_INT 18
16639: ST_TO_ADDR
// sRocket := false ;
16640: LD_ADDR_EXP 45
16644: PUSH
16645: LD_INT 0
16647: ST_TO_ADDR
// sSpeed := false ;
16648: LD_ADDR_EXP 44
16652: PUSH
16653: LD_INT 0
16655: ST_TO_ADDR
// sEngine := false ;
16656: LD_ADDR_EXP 46
16660: PUSH
16661: LD_INT 0
16663: ST_TO_ADDR
// sSpec := false ;
16664: LD_ADDR_EXP 43
16668: PUSH
16669: LD_INT 0
16671: ST_TO_ADDR
// sLevel := false ;
16672: LD_ADDR_EXP 47
16676: PUSH
16677: LD_INT 0
16679: ST_TO_ADDR
// sArmoury := false ;
16680: LD_ADDR_EXP 48
16684: PUSH
16685: LD_INT 0
16687: ST_TO_ADDR
// sRadar := false ;
16688: LD_ADDR_EXP 49
16692: PUSH
16693: LD_INT 0
16695: ST_TO_ADDR
// sBunker := false ;
16696: LD_ADDR_EXP 50
16700: PUSH
16701: LD_INT 0
16703: ST_TO_ADDR
// sHack := false ;
16704: LD_ADDR_EXP 51
16708: PUSH
16709: LD_INT 0
16711: ST_TO_ADDR
// sFire := false ;
16712: LD_ADDR_EXP 52
16716: PUSH
16717: LD_INT 0
16719: ST_TO_ADDR
// sRefresh := false ;
16720: LD_ADDR_EXP 53
16724: PUSH
16725: LD_INT 0
16727: ST_TO_ADDR
// sExp := false ;
16728: LD_ADDR_EXP 54
16732: PUSH
16733: LD_INT 0
16735: ST_TO_ADDR
// sDepot := false ;
16736: LD_ADDR_EXP 55
16740: PUSH
16741: LD_INT 0
16743: ST_TO_ADDR
// sFlag := false ;
16744: LD_ADDR_EXP 56
16748: PUSH
16749: LD_INT 0
16751: ST_TO_ADDR
// sKamikadze := false ;
16752: LD_ADDR_EXP 64
16756: PUSH
16757: LD_INT 0
16759: ST_TO_ADDR
// sTroll := false ;
16760: LD_ADDR_EXP 65
16764: PUSH
16765: LD_INT 0
16767: ST_TO_ADDR
// sSlow := false ;
16768: LD_ADDR_EXP 66
16772: PUSH
16773: LD_INT 0
16775: ST_TO_ADDR
// sLack := false ;
16776: LD_ADDR_EXP 67
16780: PUSH
16781: LD_INT 0
16783: ST_TO_ADDR
// sTank := false ;
16784: LD_ADDR_EXP 69
16788: PUSH
16789: LD_INT 0
16791: ST_TO_ADDR
// sRemote := false ;
16792: LD_ADDR_EXP 70
16796: PUSH
16797: LD_INT 0
16799: ST_TO_ADDR
// sPowell := false ;
16800: LD_ADDR_EXP 71
16804: PUSH
16805: LD_INT 0
16807: ST_TO_ADDR
// sTeleport := false ;
16808: LD_ADDR_EXP 74
16812: PUSH
16813: LD_INT 0
16815: ST_TO_ADDR
// sOilTower := false ;
16816: LD_ADDR_EXP 76
16820: PUSH
16821: LD_INT 0
16823: ST_TO_ADDR
// sShovel := false ;
16824: LD_ADDR_EXP 77
16828: PUSH
16829: LD_INT 0
16831: ST_TO_ADDR
// sSheik := false ;
16832: LD_ADDR_EXP 78
16836: PUSH
16837: LD_INT 0
16839: ST_TO_ADDR
// sEarthquake := false ;
16840: LD_ADDR_EXP 80
16844: PUSH
16845: LD_INT 0
16847: ST_TO_ADDR
// sAI := false ;
16848: LD_ADDR_EXP 81
16852: PUSH
16853: LD_INT 0
16855: ST_TO_ADDR
// sCargo := false ;
16856: LD_ADDR_EXP 84
16860: PUSH
16861: LD_INT 0
16863: ST_TO_ADDR
// sDLaser := false ;
16864: LD_ADDR_EXP 85
16868: PUSH
16869: LD_INT 0
16871: ST_TO_ADDR
// sExchange := false ;
16872: LD_ADDR_EXP 86
16876: PUSH
16877: LD_INT 0
16879: ST_TO_ADDR
// sFac := false ;
16880: LD_ADDR_EXP 87
16884: PUSH
16885: LD_INT 0
16887: ST_TO_ADDR
// sPower := false ;
16888: LD_ADDR_EXP 88
16892: PUSH
16893: LD_INT 0
16895: ST_TO_ADDR
// sRandom := false ;
16896: LD_ADDR_EXP 89
16900: PUSH
16901: LD_INT 0
16903: ST_TO_ADDR
// sShield := false ;
16904: LD_ADDR_EXP 90
16908: PUSH
16909: LD_INT 0
16911: ST_TO_ADDR
// sTime := false ;
16912: LD_ADDR_EXP 91
16916: PUSH
16917: LD_INT 0
16919: ST_TO_ADDR
// sTools := false ;
16920: LD_ADDR_EXP 92
16924: PUSH
16925: LD_INT 0
16927: ST_TO_ADDR
// sSold := false ;
16928: LD_ADDR_EXP 57
16932: PUSH
16933: LD_INT 0
16935: ST_TO_ADDR
// sDiff := false ;
16936: LD_ADDR_EXP 58
16940: PUSH
16941: LD_INT 0
16943: ST_TO_ADDR
// sFog := false ;
16944: LD_ADDR_EXP 61
16948: PUSH
16949: LD_INT 0
16951: ST_TO_ADDR
// sReset := false ;
16952: LD_ADDR_EXP 62
16956: PUSH
16957: LD_INT 0
16959: ST_TO_ADDR
// sSun := false ;
16960: LD_ADDR_EXP 63
16964: PUSH
16965: LD_INT 0
16967: ST_TO_ADDR
// sTiger := false ;
16968: LD_ADDR_EXP 59
16972: PUSH
16973: LD_INT 0
16975: ST_TO_ADDR
// sBomb := false ;
16976: LD_ADDR_EXP 60
16980: PUSH
16981: LD_INT 0
16983: ST_TO_ADDR
// sWound := false ;
16984: LD_ADDR_EXP 68
16988: PUSH
16989: LD_INT 0
16991: ST_TO_ADDR
// sBetray := false ;
16992: LD_ADDR_EXP 72
16996: PUSH
16997: LD_INT 0
16999: ST_TO_ADDR
// sContamin := false ;
17000: LD_ADDR_EXP 73
17004: PUSH
17005: LD_INT 0
17007: ST_TO_ADDR
// sOil := false ;
17008: LD_ADDR_EXP 75
17012: PUSH
17013: LD_INT 0
17015: ST_TO_ADDR
// sStu := false ;
17016: LD_ADDR_EXP 79
17020: PUSH
17021: LD_INT 0
17023: ST_TO_ADDR
// sBazooka := false ;
17024: LD_ADDR_EXP 82
17028: PUSH
17029: LD_INT 0
17031: ST_TO_ADDR
// sMortar := false ;
17032: LD_ADDR_EXP 83
17036: PUSH
17037: LD_INT 0
17039: ST_TO_ADDR
// sRanger := false ;
17040: LD_ADDR_EXP 93
17044: PUSH
17045: LD_INT 0
17047: ST_TO_ADDR
// sComputer := false ;
17048: LD_ADDR_EXP 94
17052: PUSH
17053: LD_INT 0
17055: ST_TO_ADDR
// s30 := false ;
17056: LD_ADDR_EXP 95
17060: PUSH
17061: LD_INT 0
17063: ST_TO_ADDR
// s60 := false ;
17064: LD_ADDR_EXP 96
17068: PUSH
17069: LD_INT 0
17071: ST_TO_ADDR
// end ;
17072: LD_VAR 0 1
17076: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
17077: LD_INT 0
17079: PPUSH
17080: PPUSH
17081: PPUSH
17082: PPUSH
17083: PPUSH
17084: PPUSH
17085: PPUSH
// result := [ ] ;
17086: LD_ADDR_VAR 0 2
17090: PUSH
17091: EMPTY
17092: ST_TO_ADDR
// if campaign_id = 1 then
17093: LD_OWVAR 69
17097: PUSH
17098: LD_INT 1
17100: EQUAL
17101: IFFALSE 20267
// begin case mission_number of 1 :
17103: LD_OWVAR 70
17107: PUSH
17108: LD_INT 1
17110: DOUBLE
17111: EQUAL
17112: IFTRUE 17116
17114: GO 17192
17116: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
17117: LD_ADDR_VAR 0 2
17121: PUSH
17122: LD_INT 2
17124: PUSH
17125: LD_INT 4
17127: PUSH
17128: LD_INT 11
17130: PUSH
17131: LD_INT 12
17133: PUSH
17134: LD_INT 15
17136: PUSH
17137: LD_INT 16
17139: PUSH
17140: LD_INT 22
17142: PUSH
17143: LD_INT 23
17145: PUSH
17146: LD_INT 26
17148: PUSH
17149: EMPTY
17150: LIST
17151: LIST
17152: LIST
17153: LIST
17154: LIST
17155: LIST
17156: LIST
17157: LIST
17158: LIST
17159: PUSH
17160: LD_INT 101
17162: PUSH
17163: LD_INT 102
17165: PUSH
17166: LD_INT 106
17168: PUSH
17169: LD_INT 116
17171: PUSH
17172: LD_INT 117
17174: PUSH
17175: LD_INT 118
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: PUSH
17186: EMPTY
17187: LIST
17188: LIST
17189: ST_TO_ADDR
17190: GO 20265
17192: LD_INT 2
17194: DOUBLE
17195: EQUAL
17196: IFTRUE 17200
17198: GO 17284
17200: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
17201: LD_ADDR_VAR 0 2
17205: PUSH
17206: LD_INT 2
17208: PUSH
17209: LD_INT 4
17211: PUSH
17212: LD_INT 11
17214: PUSH
17215: LD_INT 12
17217: PUSH
17218: LD_INT 15
17220: PUSH
17221: LD_INT 16
17223: PUSH
17224: LD_INT 22
17226: PUSH
17227: LD_INT 23
17229: PUSH
17230: LD_INT 26
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: LIST
17241: LIST
17242: LIST
17243: PUSH
17244: LD_INT 101
17246: PUSH
17247: LD_INT 102
17249: PUSH
17250: LD_INT 105
17252: PUSH
17253: LD_INT 106
17255: PUSH
17256: LD_INT 108
17258: PUSH
17259: LD_INT 116
17261: PUSH
17262: LD_INT 117
17264: PUSH
17265: LD_INT 118
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: LIST
17277: PUSH
17278: EMPTY
17279: LIST
17280: LIST
17281: ST_TO_ADDR
17282: GO 20265
17284: LD_INT 3
17286: DOUBLE
17287: EQUAL
17288: IFTRUE 17292
17290: GO 17380
17292: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
17293: LD_ADDR_VAR 0 2
17297: PUSH
17298: LD_INT 2
17300: PUSH
17301: LD_INT 4
17303: PUSH
17304: LD_INT 5
17306: PUSH
17307: LD_INT 11
17309: PUSH
17310: LD_INT 12
17312: PUSH
17313: LD_INT 15
17315: PUSH
17316: LD_INT 16
17318: PUSH
17319: LD_INT 22
17321: PUSH
17322: LD_INT 26
17324: PUSH
17325: LD_INT 36
17327: PUSH
17328: EMPTY
17329: LIST
17330: LIST
17331: LIST
17332: LIST
17333: LIST
17334: LIST
17335: LIST
17336: LIST
17337: LIST
17338: LIST
17339: PUSH
17340: LD_INT 101
17342: PUSH
17343: LD_INT 102
17345: PUSH
17346: LD_INT 105
17348: PUSH
17349: LD_INT 106
17351: PUSH
17352: LD_INT 108
17354: PUSH
17355: LD_INT 116
17357: PUSH
17358: LD_INT 117
17360: PUSH
17361: LD_INT 118
17363: PUSH
17364: EMPTY
17365: LIST
17366: LIST
17367: LIST
17368: LIST
17369: LIST
17370: LIST
17371: LIST
17372: LIST
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: ST_TO_ADDR
17378: GO 20265
17380: LD_INT 4
17382: DOUBLE
17383: EQUAL
17384: IFTRUE 17388
17386: GO 17484
17388: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
17389: LD_ADDR_VAR 0 2
17393: PUSH
17394: LD_INT 2
17396: PUSH
17397: LD_INT 4
17399: PUSH
17400: LD_INT 5
17402: PUSH
17403: LD_INT 8
17405: PUSH
17406: LD_INT 11
17408: PUSH
17409: LD_INT 12
17411: PUSH
17412: LD_INT 15
17414: PUSH
17415: LD_INT 16
17417: PUSH
17418: LD_INT 22
17420: PUSH
17421: LD_INT 23
17423: PUSH
17424: LD_INT 26
17426: PUSH
17427: LD_INT 36
17429: PUSH
17430: EMPTY
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: PUSH
17444: LD_INT 101
17446: PUSH
17447: LD_INT 102
17449: PUSH
17450: LD_INT 105
17452: PUSH
17453: LD_INT 106
17455: PUSH
17456: LD_INT 108
17458: PUSH
17459: LD_INT 116
17461: PUSH
17462: LD_INT 117
17464: PUSH
17465: LD_INT 118
17467: PUSH
17468: EMPTY
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: PUSH
17478: EMPTY
17479: LIST
17480: LIST
17481: ST_TO_ADDR
17482: GO 20265
17484: LD_INT 5
17486: DOUBLE
17487: EQUAL
17488: IFTRUE 17492
17490: GO 17604
17492: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
17493: LD_ADDR_VAR 0 2
17497: PUSH
17498: LD_INT 2
17500: PUSH
17501: LD_INT 4
17503: PUSH
17504: LD_INT 5
17506: PUSH
17507: LD_INT 6
17509: PUSH
17510: LD_INT 8
17512: PUSH
17513: LD_INT 11
17515: PUSH
17516: LD_INT 12
17518: PUSH
17519: LD_INT 15
17521: PUSH
17522: LD_INT 16
17524: PUSH
17525: LD_INT 22
17527: PUSH
17528: LD_INT 23
17530: PUSH
17531: LD_INT 25
17533: PUSH
17534: LD_INT 26
17536: PUSH
17537: LD_INT 36
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: LIST
17544: LIST
17545: LIST
17546: LIST
17547: LIST
17548: LIST
17549: LIST
17550: LIST
17551: LIST
17552: LIST
17553: LIST
17554: LIST
17555: PUSH
17556: LD_INT 101
17558: PUSH
17559: LD_INT 102
17561: PUSH
17562: LD_INT 105
17564: PUSH
17565: LD_INT 106
17567: PUSH
17568: LD_INT 108
17570: PUSH
17571: LD_INT 109
17573: PUSH
17574: LD_INT 112
17576: PUSH
17577: LD_INT 116
17579: PUSH
17580: LD_INT 117
17582: PUSH
17583: LD_INT 118
17585: PUSH
17586: EMPTY
17587: LIST
17588: LIST
17589: LIST
17590: LIST
17591: LIST
17592: LIST
17593: LIST
17594: LIST
17595: LIST
17596: LIST
17597: PUSH
17598: EMPTY
17599: LIST
17600: LIST
17601: ST_TO_ADDR
17602: GO 20265
17604: LD_INT 6
17606: DOUBLE
17607: EQUAL
17608: IFTRUE 17612
17610: GO 17744
17612: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
17613: LD_ADDR_VAR 0 2
17617: PUSH
17618: LD_INT 2
17620: PUSH
17621: LD_INT 4
17623: PUSH
17624: LD_INT 5
17626: PUSH
17627: LD_INT 6
17629: PUSH
17630: LD_INT 8
17632: PUSH
17633: LD_INT 11
17635: PUSH
17636: LD_INT 12
17638: PUSH
17639: LD_INT 15
17641: PUSH
17642: LD_INT 16
17644: PUSH
17645: LD_INT 20
17647: PUSH
17648: LD_INT 21
17650: PUSH
17651: LD_INT 22
17653: PUSH
17654: LD_INT 23
17656: PUSH
17657: LD_INT 25
17659: PUSH
17660: LD_INT 26
17662: PUSH
17663: LD_INT 30
17665: PUSH
17666: LD_INT 31
17668: PUSH
17669: LD_INT 32
17671: PUSH
17672: LD_INT 36
17674: PUSH
17675: EMPTY
17676: LIST
17677: LIST
17678: LIST
17679: LIST
17680: LIST
17681: LIST
17682: LIST
17683: LIST
17684: LIST
17685: LIST
17686: LIST
17687: LIST
17688: LIST
17689: LIST
17690: LIST
17691: LIST
17692: LIST
17693: LIST
17694: LIST
17695: PUSH
17696: LD_INT 101
17698: PUSH
17699: LD_INT 102
17701: PUSH
17702: LD_INT 105
17704: PUSH
17705: LD_INT 106
17707: PUSH
17708: LD_INT 108
17710: PUSH
17711: LD_INT 109
17713: PUSH
17714: LD_INT 112
17716: PUSH
17717: LD_INT 116
17719: PUSH
17720: LD_INT 117
17722: PUSH
17723: LD_INT 118
17725: PUSH
17726: EMPTY
17727: LIST
17728: LIST
17729: LIST
17730: LIST
17731: LIST
17732: LIST
17733: LIST
17734: LIST
17735: LIST
17736: LIST
17737: PUSH
17738: EMPTY
17739: LIST
17740: LIST
17741: ST_TO_ADDR
17742: GO 20265
17744: LD_INT 7
17746: DOUBLE
17747: EQUAL
17748: IFTRUE 17752
17750: GO 17864
17752: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
17753: LD_ADDR_VAR 0 2
17757: PUSH
17758: LD_INT 2
17760: PUSH
17761: LD_INT 4
17763: PUSH
17764: LD_INT 5
17766: PUSH
17767: LD_INT 7
17769: PUSH
17770: LD_INT 11
17772: PUSH
17773: LD_INT 12
17775: PUSH
17776: LD_INT 15
17778: PUSH
17779: LD_INT 16
17781: PUSH
17782: LD_INT 20
17784: PUSH
17785: LD_INT 21
17787: PUSH
17788: LD_INT 22
17790: PUSH
17791: LD_INT 23
17793: PUSH
17794: LD_INT 25
17796: PUSH
17797: LD_INT 26
17799: PUSH
17800: EMPTY
17801: LIST
17802: LIST
17803: LIST
17804: LIST
17805: LIST
17806: LIST
17807: LIST
17808: LIST
17809: LIST
17810: LIST
17811: LIST
17812: LIST
17813: LIST
17814: LIST
17815: PUSH
17816: LD_INT 101
17818: PUSH
17819: LD_INT 102
17821: PUSH
17822: LD_INT 103
17824: PUSH
17825: LD_INT 105
17827: PUSH
17828: LD_INT 106
17830: PUSH
17831: LD_INT 108
17833: PUSH
17834: LD_INT 112
17836: PUSH
17837: LD_INT 116
17839: PUSH
17840: LD_INT 117
17842: PUSH
17843: LD_INT 118
17845: PUSH
17846: EMPTY
17847: LIST
17848: LIST
17849: LIST
17850: LIST
17851: LIST
17852: LIST
17853: LIST
17854: LIST
17855: LIST
17856: LIST
17857: PUSH
17858: EMPTY
17859: LIST
17860: LIST
17861: ST_TO_ADDR
17862: GO 20265
17864: LD_INT 8
17866: DOUBLE
17867: EQUAL
17868: IFTRUE 17872
17870: GO 18012
17872: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
17873: LD_ADDR_VAR 0 2
17877: PUSH
17878: LD_INT 2
17880: PUSH
17881: LD_INT 4
17883: PUSH
17884: LD_INT 5
17886: PUSH
17887: LD_INT 6
17889: PUSH
17890: LD_INT 7
17892: PUSH
17893: LD_INT 8
17895: PUSH
17896: LD_INT 11
17898: PUSH
17899: LD_INT 12
17901: PUSH
17902: LD_INT 15
17904: PUSH
17905: LD_INT 16
17907: PUSH
17908: LD_INT 20
17910: PUSH
17911: LD_INT 21
17913: PUSH
17914: LD_INT 22
17916: PUSH
17917: LD_INT 23
17919: PUSH
17920: LD_INT 25
17922: PUSH
17923: LD_INT 26
17925: PUSH
17926: LD_INT 30
17928: PUSH
17929: LD_INT 31
17931: PUSH
17932: LD_INT 32
17934: PUSH
17935: LD_INT 36
17937: PUSH
17938: EMPTY
17939: LIST
17940: LIST
17941: LIST
17942: LIST
17943: LIST
17944: LIST
17945: LIST
17946: LIST
17947: LIST
17948: LIST
17949: LIST
17950: LIST
17951: LIST
17952: LIST
17953: LIST
17954: LIST
17955: LIST
17956: LIST
17957: LIST
17958: LIST
17959: PUSH
17960: LD_INT 101
17962: PUSH
17963: LD_INT 102
17965: PUSH
17966: LD_INT 103
17968: PUSH
17969: LD_INT 105
17971: PUSH
17972: LD_INT 106
17974: PUSH
17975: LD_INT 108
17977: PUSH
17978: LD_INT 109
17980: PUSH
17981: LD_INT 112
17983: PUSH
17984: LD_INT 116
17986: PUSH
17987: LD_INT 117
17989: PUSH
17990: LD_INT 118
17992: PUSH
17993: EMPTY
17994: LIST
17995: LIST
17996: LIST
17997: LIST
17998: LIST
17999: LIST
18000: LIST
18001: LIST
18002: LIST
18003: LIST
18004: LIST
18005: PUSH
18006: EMPTY
18007: LIST
18008: LIST
18009: ST_TO_ADDR
18010: GO 20265
18012: LD_INT 9
18014: DOUBLE
18015: EQUAL
18016: IFTRUE 18020
18018: GO 18168
18020: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
18021: LD_ADDR_VAR 0 2
18025: PUSH
18026: LD_INT 2
18028: PUSH
18029: LD_INT 4
18031: PUSH
18032: LD_INT 5
18034: PUSH
18035: LD_INT 6
18037: PUSH
18038: LD_INT 7
18040: PUSH
18041: LD_INT 8
18043: PUSH
18044: LD_INT 11
18046: PUSH
18047: LD_INT 12
18049: PUSH
18050: LD_INT 15
18052: PUSH
18053: LD_INT 16
18055: PUSH
18056: LD_INT 20
18058: PUSH
18059: LD_INT 21
18061: PUSH
18062: LD_INT 22
18064: PUSH
18065: LD_INT 23
18067: PUSH
18068: LD_INT 25
18070: PUSH
18071: LD_INT 26
18073: PUSH
18074: LD_INT 28
18076: PUSH
18077: LD_INT 30
18079: PUSH
18080: LD_INT 31
18082: PUSH
18083: LD_INT 32
18085: PUSH
18086: LD_INT 36
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: LIST
18100: LIST
18101: LIST
18102: LIST
18103: LIST
18104: LIST
18105: LIST
18106: LIST
18107: LIST
18108: LIST
18109: LIST
18110: LIST
18111: PUSH
18112: LD_INT 101
18114: PUSH
18115: LD_INT 102
18117: PUSH
18118: LD_INT 103
18120: PUSH
18121: LD_INT 105
18123: PUSH
18124: LD_INT 106
18126: PUSH
18127: LD_INT 108
18129: PUSH
18130: LD_INT 109
18132: PUSH
18133: LD_INT 112
18135: PUSH
18136: LD_INT 114
18138: PUSH
18139: LD_INT 116
18141: PUSH
18142: LD_INT 117
18144: PUSH
18145: LD_INT 118
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: LIST
18154: LIST
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: PUSH
18162: EMPTY
18163: LIST
18164: LIST
18165: ST_TO_ADDR
18166: GO 20265
18168: LD_INT 10
18170: DOUBLE
18171: EQUAL
18172: IFTRUE 18176
18174: GO 18372
18176: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
18177: LD_ADDR_VAR 0 2
18181: PUSH
18182: LD_INT 2
18184: PUSH
18185: LD_INT 4
18187: PUSH
18188: LD_INT 5
18190: PUSH
18191: LD_INT 6
18193: PUSH
18194: LD_INT 7
18196: PUSH
18197: LD_INT 8
18199: PUSH
18200: LD_INT 9
18202: PUSH
18203: LD_INT 10
18205: PUSH
18206: LD_INT 11
18208: PUSH
18209: LD_INT 12
18211: PUSH
18212: LD_INT 13
18214: PUSH
18215: LD_INT 14
18217: PUSH
18218: LD_INT 15
18220: PUSH
18221: LD_INT 16
18223: PUSH
18224: LD_INT 17
18226: PUSH
18227: LD_INT 18
18229: PUSH
18230: LD_INT 19
18232: PUSH
18233: LD_INT 20
18235: PUSH
18236: LD_INT 21
18238: PUSH
18239: LD_INT 22
18241: PUSH
18242: LD_INT 23
18244: PUSH
18245: LD_INT 24
18247: PUSH
18248: LD_INT 25
18250: PUSH
18251: LD_INT 26
18253: PUSH
18254: LD_INT 28
18256: PUSH
18257: LD_INT 30
18259: PUSH
18260: LD_INT 31
18262: PUSH
18263: LD_INT 32
18265: PUSH
18266: LD_INT 36
18268: PUSH
18269: EMPTY
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: LIST
18275: LIST
18276: LIST
18277: LIST
18278: LIST
18279: LIST
18280: LIST
18281: LIST
18282: LIST
18283: LIST
18284: LIST
18285: LIST
18286: LIST
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: LIST
18294: LIST
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: PUSH
18300: LD_INT 101
18302: PUSH
18303: LD_INT 102
18305: PUSH
18306: LD_INT 103
18308: PUSH
18309: LD_INT 104
18311: PUSH
18312: LD_INT 105
18314: PUSH
18315: LD_INT 106
18317: PUSH
18318: LD_INT 107
18320: PUSH
18321: LD_INT 108
18323: PUSH
18324: LD_INT 109
18326: PUSH
18327: LD_INT 110
18329: PUSH
18330: LD_INT 111
18332: PUSH
18333: LD_INT 112
18335: PUSH
18336: LD_INT 114
18338: PUSH
18339: LD_INT 116
18341: PUSH
18342: LD_INT 117
18344: PUSH
18345: LD_INT 118
18347: PUSH
18348: EMPTY
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: LIST
18354: LIST
18355: LIST
18356: LIST
18357: LIST
18358: LIST
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: LIST
18364: LIST
18365: PUSH
18366: EMPTY
18367: LIST
18368: LIST
18369: ST_TO_ADDR
18370: GO 20265
18372: LD_INT 11
18374: DOUBLE
18375: EQUAL
18376: IFTRUE 18380
18378: GO 18584
18380: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
18381: LD_ADDR_VAR 0 2
18385: PUSH
18386: LD_INT 2
18388: PUSH
18389: LD_INT 3
18391: PUSH
18392: LD_INT 4
18394: PUSH
18395: LD_INT 5
18397: PUSH
18398: LD_INT 6
18400: PUSH
18401: LD_INT 7
18403: PUSH
18404: LD_INT 8
18406: PUSH
18407: LD_INT 9
18409: PUSH
18410: LD_INT 10
18412: PUSH
18413: LD_INT 11
18415: PUSH
18416: LD_INT 12
18418: PUSH
18419: LD_INT 13
18421: PUSH
18422: LD_INT 14
18424: PUSH
18425: LD_INT 15
18427: PUSH
18428: LD_INT 16
18430: PUSH
18431: LD_INT 17
18433: PUSH
18434: LD_INT 18
18436: PUSH
18437: LD_INT 19
18439: PUSH
18440: LD_INT 20
18442: PUSH
18443: LD_INT 21
18445: PUSH
18446: LD_INT 22
18448: PUSH
18449: LD_INT 23
18451: PUSH
18452: LD_INT 24
18454: PUSH
18455: LD_INT 25
18457: PUSH
18458: LD_INT 26
18460: PUSH
18461: LD_INT 28
18463: PUSH
18464: LD_INT 30
18466: PUSH
18467: LD_INT 31
18469: PUSH
18470: LD_INT 32
18472: PUSH
18473: LD_INT 34
18475: PUSH
18476: LD_INT 36
18478: PUSH
18479: EMPTY
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: LIST
18495: LIST
18496: LIST
18497: LIST
18498: LIST
18499: LIST
18500: LIST
18501: LIST
18502: LIST
18503: LIST
18504: LIST
18505: LIST
18506: LIST
18507: LIST
18508: LIST
18509: LIST
18510: LIST
18511: PUSH
18512: LD_INT 101
18514: PUSH
18515: LD_INT 102
18517: PUSH
18518: LD_INT 103
18520: PUSH
18521: LD_INT 104
18523: PUSH
18524: LD_INT 105
18526: PUSH
18527: LD_INT 106
18529: PUSH
18530: LD_INT 107
18532: PUSH
18533: LD_INT 108
18535: PUSH
18536: LD_INT 109
18538: PUSH
18539: LD_INT 110
18541: PUSH
18542: LD_INT 111
18544: PUSH
18545: LD_INT 112
18547: PUSH
18548: LD_INT 114
18550: PUSH
18551: LD_INT 116
18553: PUSH
18554: LD_INT 117
18556: PUSH
18557: LD_INT 118
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: PUSH
18578: EMPTY
18579: LIST
18580: LIST
18581: ST_TO_ADDR
18582: GO 20265
18584: LD_INT 12
18586: DOUBLE
18587: EQUAL
18588: IFTRUE 18592
18590: GO 18812
18592: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
18593: LD_ADDR_VAR 0 2
18597: PUSH
18598: LD_INT 1
18600: PUSH
18601: LD_INT 2
18603: PUSH
18604: LD_INT 3
18606: PUSH
18607: LD_INT 4
18609: PUSH
18610: LD_INT 5
18612: PUSH
18613: LD_INT 6
18615: PUSH
18616: LD_INT 7
18618: PUSH
18619: LD_INT 8
18621: PUSH
18622: LD_INT 9
18624: PUSH
18625: LD_INT 10
18627: PUSH
18628: LD_INT 11
18630: PUSH
18631: LD_INT 12
18633: PUSH
18634: LD_INT 13
18636: PUSH
18637: LD_INT 14
18639: PUSH
18640: LD_INT 15
18642: PUSH
18643: LD_INT 16
18645: PUSH
18646: LD_INT 17
18648: PUSH
18649: LD_INT 18
18651: PUSH
18652: LD_INT 19
18654: PUSH
18655: LD_INT 20
18657: PUSH
18658: LD_INT 21
18660: PUSH
18661: LD_INT 22
18663: PUSH
18664: LD_INT 23
18666: PUSH
18667: LD_INT 24
18669: PUSH
18670: LD_INT 25
18672: PUSH
18673: LD_INT 26
18675: PUSH
18676: LD_INT 27
18678: PUSH
18679: LD_INT 28
18681: PUSH
18682: LD_INT 30
18684: PUSH
18685: LD_INT 31
18687: PUSH
18688: LD_INT 32
18690: PUSH
18691: LD_INT 33
18693: PUSH
18694: LD_INT 34
18696: PUSH
18697: LD_INT 36
18699: PUSH
18700: EMPTY
18701: LIST
18702: LIST
18703: LIST
18704: LIST
18705: LIST
18706: LIST
18707: LIST
18708: LIST
18709: LIST
18710: LIST
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: LIST
18717: LIST
18718: LIST
18719: LIST
18720: LIST
18721: LIST
18722: LIST
18723: LIST
18724: LIST
18725: LIST
18726: LIST
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: LIST
18734: LIST
18735: PUSH
18736: LD_INT 101
18738: PUSH
18739: LD_INT 102
18741: PUSH
18742: LD_INT 103
18744: PUSH
18745: LD_INT 104
18747: PUSH
18748: LD_INT 105
18750: PUSH
18751: LD_INT 106
18753: PUSH
18754: LD_INT 107
18756: PUSH
18757: LD_INT 108
18759: PUSH
18760: LD_INT 109
18762: PUSH
18763: LD_INT 110
18765: PUSH
18766: LD_INT 111
18768: PUSH
18769: LD_INT 112
18771: PUSH
18772: LD_INT 113
18774: PUSH
18775: LD_INT 114
18777: PUSH
18778: LD_INT 116
18780: PUSH
18781: LD_INT 117
18783: PUSH
18784: LD_INT 118
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: LIST
18791: LIST
18792: LIST
18793: LIST
18794: LIST
18795: LIST
18796: LIST
18797: LIST
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: PUSH
18806: EMPTY
18807: LIST
18808: LIST
18809: ST_TO_ADDR
18810: GO 20265
18812: LD_INT 13
18814: DOUBLE
18815: EQUAL
18816: IFTRUE 18820
18818: GO 19028
18820: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
18821: LD_ADDR_VAR 0 2
18825: PUSH
18826: LD_INT 1
18828: PUSH
18829: LD_INT 2
18831: PUSH
18832: LD_INT 3
18834: PUSH
18835: LD_INT 4
18837: PUSH
18838: LD_INT 5
18840: PUSH
18841: LD_INT 8
18843: PUSH
18844: LD_INT 9
18846: PUSH
18847: LD_INT 10
18849: PUSH
18850: LD_INT 11
18852: PUSH
18853: LD_INT 12
18855: PUSH
18856: LD_INT 14
18858: PUSH
18859: LD_INT 15
18861: PUSH
18862: LD_INT 16
18864: PUSH
18865: LD_INT 17
18867: PUSH
18868: LD_INT 18
18870: PUSH
18871: LD_INT 19
18873: PUSH
18874: LD_INT 20
18876: PUSH
18877: LD_INT 21
18879: PUSH
18880: LD_INT 22
18882: PUSH
18883: LD_INT 23
18885: PUSH
18886: LD_INT 24
18888: PUSH
18889: LD_INT 25
18891: PUSH
18892: LD_INT 26
18894: PUSH
18895: LD_INT 27
18897: PUSH
18898: LD_INT 28
18900: PUSH
18901: LD_INT 30
18903: PUSH
18904: LD_INT 31
18906: PUSH
18907: LD_INT 32
18909: PUSH
18910: LD_INT 33
18912: PUSH
18913: LD_INT 34
18915: PUSH
18916: LD_INT 36
18918: PUSH
18919: EMPTY
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: LIST
18941: LIST
18942: LIST
18943: LIST
18944: LIST
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: PUSH
18952: LD_INT 101
18954: PUSH
18955: LD_INT 102
18957: PUSH
18958: LD_INT 103
18960: PUSH
18961: LD_INT 104
18963: PUSH
18964: LD_INT 105
18966: PUSH
18967: LD_INT 106
18969: PUSH
18970: LD_INT 107
18972: PUSH
18973: LD_INT 108
18975: PUSH
18976: LD_INT 109
18978: PUSH
18979: LD_INT 110
18981: PUSH
18982: LD_INT 111
18984: PUSH
18985: LD_INT 112
18987: PUSH
18988: LD_INT 113
18990: PUSH
18991: LD_INT 114
18993: PUSH
18994: LD_INT 116
18996: PUSH
18997: LD_INT 117
18999: PUSH
19000: LD_INT 118
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: LIST
19007: LIST
19008: LIST
19009: LIST
19010: LIST
19011: LIST
19012: LIST
19013: LIST
19014: LIST
19015: LIST
19016: LIST
19017: LIST
19018: LIST
19019: LIST
19020: LIST
19021: PUSH
19022: EMPTY
19023: LIST
19024: LIST
19025: ST_TO_ADDR
19026: GO 20265
19028: LD_INT 14
19030: DOUBLE
19031: EQUAL
19032: IFTRUE 19036
19034: GO 19260
19036: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
19037: LD_ADDR_VAR 0 2
19041: PUSH
19042: LD_INT 1
19044: PUSH
19045: LD_INT 2
19047: PUSH
19048: LD_INT 3
19050: PUSH
19051: LD_INT 4
19053: PUSH
19054: LD_INT 5
19056: PUSH
19057: LD_INT 6
19059: PUSH
19060: LD_INT 7
19062: PUSH
19063: LD_INT 8
19065: PUSH
19066: LD_INT 9
19068: PUSH
19069: LD_INT 10
19071: PUSH
19072: LD_INT 11
19074: PUSH
19075: LD_INT 12
19077: PUSH
19078: LD_INT 13
19080: PUSH
19081: LD_INT 14
19083: PUSH
19084: LD_INT 15
19086: PUSH
19087: LD_INT 16
19089: PUSH
19090: LD_INT 17
19092: PUSH
19093: LD_INT 18
19095: PUSH
19096: LD_INT 19
19098: PUSH
19099: LD_INT 20
19101: PUSH
19102: LD_INT 21
19104: PUSH
19105: LD_INT 22
19107: PUSH
19108: LD_INT 23
19110: PUSH
19111: LD_INT 24
19113: PUSH
19114: LD_INT 25
19116: PUSH
19117: LD_INT 26
19119: PUSH
19120: LD_INT 27
19122: PUSH
19123: LD_INT 28
19125: PUSH
19126: LD_INT 29
19128: PUSH
19129: LD_INT 30
19131: PUSH
19132: LD_INT 31
19134: PUSH
19135: LD_INT 32
19137: PUSH
19138: LD_INT 33
19140: PUSH
19141: LD_INT 34
19143: PUSH
19144: LD_INT 36
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: LIST
19157: LIST
19158: LIST
19159: LIST
19160: LIST
19161: LIST
19162: LIST
19163: LIST
19164: LIST
19165: LIST
19166: LIST
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: LIST
19183: PUSH
19184: LD_INT 101
19186: PUSH
19187: LD_INT 102
19189: PUSH
19190: LD_INT 103
19192: PUSH
19193: LD_INT 104
19195: PUSH
19196: LD_INT 105
19198: PUSH
19199: LD_INT 106
19201: PUSH
19202: LD_INT 107
19204: PUSH
19205: LD_INT 108
19207: PUSH
19208: LD_INT 109
19210: PUSH
19211: LD_INT 110
19213: PUSH
19214: LD_INT 111
19216: PUSH
19217: LD_INT 112
19219: PUSH
19220: LD_INT 113
19222: PUSH
19223: LD_INT 114
19225: PUSH
19226: LD_INT 116
19228: PUSH
19229: LD_INT 117
19231: PUSH
19232: LD_INT 118
19234: PUSH
19235: EMPTY
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: LIST
19247: LIST
19248: LIST
19249: LIST
19250: LIST
19251: LIST
19252: LIST
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: ST_TO_ADDR
19258: GO 20265
19260: LD_INT 15
19262: DOUBLE
19263: EQUAL
19264: IFTRUE 19268
19266: GO 19492
19268: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
19269: LD_ADDR_VAR 0 2
19273: PUSH
19274: LD_INT 1
19276: PUSH
19277: LD_INT 2
19279: PUSH
19280: LD_INT 3
19282: PUSH
19283: LD_INT 4
19285: PUSH
19286: LD_INT 5
19288: PUSH
19289: LD_INT 6
19291: PUSH
19292: LD_INT 7
19294: PUSH
19295: LD_INT 8
19297: PUSH
19298: LD_INT 9
19300: PUSH
19301: LD_INT 10
19303: PUSH
19304: LD_INT 11
19306: PUSH
19307: LD_INT 12
19309: PUSH
19310: LD_INT 13
19312: PUSH
19313: LD_INT 14
19315: PUSH
19316: LD_INT 15
19318: PUSH
19319: LD_INT 16
19321: PUSH
19322: LD_INT 17
19324: PUSH
19325: LD_INT 18
19327: PUSH
19328: LD_INT 19
19330: PUSH
19331: LD_INT 20
19333: PUSH
19334: LD_INT 21
19336: PUSH
19337: LD_INT 22
19339: PUSH
19340: LD_INT 23
19342: PUSH
19343: LD_INT 24
19345: PUSH
19346: LD_INT 25
19348: PUSH
19349: LD_INT 26
19351: PUSH
19352: LD_INT 27
19354: PUSH
19355: LD_INT 28
19357: PUSH
19358: LD_INT 29
19360: PUSH
19361: LD_INT 30
19363: PUSH
19364: LD_INT 31
19366: PUSH
19367: LD_INT 32
19369: PUSH
19370: LD_INT 33
19372: PUSH
19373: LD_INT 34
19375: PUSH
19376: LD_INT 36
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: LIST
19398: LIST
19399: LIST
19400: LIST
19401: LIST
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: LIST
19411: LIST
19412: LIST
19413: LIST
19414: LIST
19415: PUSH
19416: LD_INT 101
19418: PUSH
19419: LD_INT 102
19421: PUSH
19422: LD_INT 103
19424: PUSH
19425: LD_INT 104
19427: PUSH
19428: LD_INT 105
19430: PUSH
19431: LD_INT 106
19433: PUSH
19434: LD_INT 107
19436: PUSH
19437: LD_INT 108
19439: PUSH
19440: LD_INT 109
19442: PUSH
19443: LD_INT 110
19445: PUSH
19446: LD_INT 111
19448: PUSH
19449: LD_INT 112
19451: PUSH
19452: LD_INT 113
19454: PUSH
19455: LD_INT 114
19457: PUSH
19458: LD_INT 116
19460: PUSH
19461: LD_INT 117
19463: PUSH
19464: LD_INT 118
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: LIST
19471: LIST
19472: LIST
19473: LIST
19474: LIST
19475: LIST
19476: LIST
19477: LIST
19478: LIST
19479: LIST
19480: LIST
19481: LIST
19482: LIST
19483: LIST
19484: LIST
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: ST_TO_ADDR
19490: GO 20265
19492: LD_INT 16
19494: DOUBLE
19495: EQUAL
19496: IFTRUE 19500
19498: GO 19636
19500: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
19501: LD_ADDR_VAR 0 2
19505: PUSH
19506: LD_INT 2
19508: PUSH
19509: LD_INT 4
19511: PUSH
19512: LD_INT 5
19514: PUSH
19515: LD_INT 7
19517: PUSH
19518: LD_INT 11
19520: PUSH
19521: LD_INT 12
19523: PUSH
19524: LD_INT 15
19526: PUSH
19527: LD_INT 16
19529: PUSH
19530: LD_INT 20
19532: PUSH
19533: LD_INT 21
19535: PUSH
19536: LD_INT 22
19538: PUSH
19539: LD_INT 23
19541: PUSH
19542: LD_INT 25
19544: PUSH
19545: LD_INT 26
19547: PUSH
19548: LD_INT 30
19550: PUSH
19551: LD_INT 31
19553: PUSH
19554: LD_INT 32
19556: PUSH
19557: LD_INT 33
19559: PUSH
19560: LD_INT 34
19562: PUSH
19563: EMPTY
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: PUSH
19584: LD_INT 101
19586: PUSH
19587: LD_INT 102
19589: PUSH
19590: LD_INT 103
19592: PUSH
19593: LD_INT 106
19595: PUSH
19596: LD_INT 108
19598: PUSH
19599: LD_INT 112
19601: PUSH
19602: LD_INT 113
19604: PUSH
19605: LD_INT 114
19607: PUSH
19608: LD_INT 116
19610: PUSH
19611: LD_INT 117
19613: PUSH
19614: LD_INT 118
19616: PUSH
19617: EMPTY
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: ST_TO_ADDR
19634: GO 20265
19636: LD_INT 17
19638: DOUBLE
19639: EQUAL
19640: IFTRUE 19644
19642: GO 19868
19644: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
19645: LD_ADDR_VAR 0 2
19649: PUSH
19650: LD_INT 1
19652: PUSH
19653: LD_INT 2
19655: PUSH
19656: LD_INT 3
19658: PUSH
19659: LD_INT 4
19661: PUSH
19662: LD_INT 5
19664: PUSH
19665: LD_INT 6
19667: PUSH
19668: LD_INT 7
19670: PUSH
19671: LD_INT 8
19673: PUSH
19674: LD_INT 9
19676: PUSH
19677: LD_INT 10
19679: PUSH
19680: LD_INT 11
19682: PUSH
19683: LD_INT 12
19685: PUSH
19686: LD_INT 13
19688: PUSH
19689: LD_INT 14
19691: PUSH
19692: LD_INT 15
19694: PUSH
19695: LD_INT 16
19697: PUSH
19698: LD_INT 17
19700: PUSH
19701: LD_INT 18
19703: PUSH
19704: LD_INT 19
19706: PUSH
19707: LD_INT 20
19709: PUSH
19710: LD_INT 21
19712: PUSH
19713: LD_INT 22
19715: PUSH
19716: LD_INT 23
19718: PUSH
19719: LD_INT 24
19721: PUSH
19722: LD_INT 25
19724: PUSH
19725: LD_INT 26
19727: PUSH
19728: LD_INT 27
19730: PUSH
19731: LD_INT 28
19733: PUSH
19734: LD_INT 29
19736: PUSH
19737: LD_INT 30
19739: PUSH
19740: LD_INT 31
19742: PUSH
19743: LD_INT 32
19745: PUSH
19746: LD_INT 33
19748: PUSH
19749: LD_INT 34
19751: PUSH
19752: LD_INT 36
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: LIST
19790: LIST
19791: PUSH
19792: LD_INT 101
19794: PUSH
19795: LD_INT 102
19797: PUSH
19798: LD_INT 103
19800: PUSH
19801: LD_INT 104
19803: PUSH
19804: LD_INT 105
19806: PUSH
19807: LD_INT 106
19809: PUSH
19810: LD_INT 107
19812: PUSH
19813: LD_INT 108
19815: PUSH
19816: LD_INT 109
19818: PUSH
19819: LD_INT 110
19821: PUSH
19822: LD_INT 111
19824: PUSH
19825: LD_INT 112
19827: PUSH
19828: LD_INT 113
19830: PUSH
19831: LD_INT 114
19833: PUSH
19834: LD_INT 116
19836: PUSH
19837: LD_INT 117
19839: PUSH
19840: LD_INT 118
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: ST_TO_ADDR
19866: GO 20265
19868: LD_INT 18
19870: DOUBLE
19871: EQUAL
19872: IFTRUE 19876
19874: GO 20024
19876: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
19877: LD_ADDR_VAR 0 2
19881: PUSH
19882: LD_INT 2
19884: PUSH
19885: LD_INT 4
19887: PUSH
19888: LD_INT 5
19890: PUSH
19891: LD_INT 7
19893: PUSH
19894: LD_INT 11
19896: PUSH
19897: LD_INT 12
19899: PUSH
19900: LD_INT 15
19902: PUSH
19903: LD_INT 16
19905: PUSH
19906: LD_INT 20
19908: PUSH
19909: LD_INT 21
19911: PUSH
19912: LD_INT 22
19914: PUSH
19915: LD_INT 23
19917: PUSH
19918: LD_INT 25
19920: PUSH
19921: LD_INT 26
19923: PUSH
19924: LD_INT 30
19926: PUSH
19927: LD_INT 31
19929: PUSH
19930: LD_INT 32
19932: PUSH
19933: LD_INT 33
19935: PUSH
19936: LD_INT 34
19938: PUSH
19939: LD_INT 35
19941: PUSH
19942: LD_INT 36
19944: PUSH
19945: EMPTY
19946: LIST
19947: LIST
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: PUSH
19968: LD_INT 101
19970: PUSH
19971: LD_INT 102
19973: PUSH
19974: LD_INT 103
19976: PUSH
19977: LD_INT 106
19979: PUSH
19980: LD_INT 108
19982: PUSH
19983: LD_INT 112
19985: PUSH
19986: LD_INT 113
19988: PUSH
19989: LD_INT 114
19991: PUSH
19992: LD_INT 115
19994: PUSH
19995: LD_INT 116
19997: PUSH
19998: LD_INT 117
20000: PUSH
20001: LD_INT 118
20003: PUSH
20004: EMPTY
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: ST_TO_ADDR
20022: GO 20265
20024: LD_INT 19
20026: DOUBLE
20027: EQUAL
20028: IFTRUE 20032
20030: GO 20264
20032: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
20033: LD_ADDR_VAR 0 2
20037: PUSH
20038: LD_INT 1
20040: PUSH
20041: LD_INT 2
20043: PUSH
20044: LD_INT 3
20046: PUSH
20047: LD_INT 4
20049: PUSH
20050: LD_INT 5
20052: PUSH
20053: LD_INT 6
20055: PUSH
20056: LD_INT 7
20058: PUSH
20059: LD_INT 8
20061: PUSH
20062: LD_INT 9
20064: PUSH
20065: LD_INT 10
20067: PUSH
20068: LD_INT 11
20070: PUSH
20071: LD_INT 12
20073: PUSH
20074: LD_INT 13
20076: PUSH
20077: LD_INT 14
20079: PUSH
20080: LD_INT 15
20082: PUSH
20083: LD_INT 16
20085: PUSH
20086: LD_INT 17
20088: PUSH
20089: LD_INT 18
20091: PUSH
20092: LD_INT 19
20094: PUSH
20095: LD_INT 20
20097: PUSH
20098: LD_INT 21
20100: PUSH
20101: LD_INT 22
20103: PUSH
20104: LD_INT 23
20106: PUSH
20107: LD_INT 24
20109: PUSH
20110: LD_INT 25
20112: PUSH
20113: LD_INT 26
20115: PUSH
20116: LD_INT 27
20118: PUSH
20119: LD_INT 28
20121: PUSH
20122: LD_INT 29
20124: PUSH
20125: LD_INT 30
20127: PUSH
20128: LD_INT 31
20130: PUSH
20131: LD_INT 32
20133: PUSH
20134: LD_INT 33
20136: PUSH
20137: LD_INT 34
20139: PUSH
20140: LD_INT 35
20142: PUSH
20143: LD_INT 36
20145: PUSH
20146: EMPTY
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: LIST
20164: LIST
20165: LIST
20166: LIST
20167: LIST
20168: LIST
20169: LIST
20170: LIST
20171: LIST
20172: LIST
20173: LIST
20174: LIST
20175: LIST
20176: LIST
20177: LIST
20178: LIST
20179: LIST
20180: LIST
20181: LIST
20182: LIST
20183: PUSH
20184: LD_INT 101
20186: PUSH
20187: LD_INT 102
20189: PUSH
20190: LD_INT 103
20192: PUSH
20193: LD_INT 104
20195: PUSH
20196: LD_INT 105
20198: PUSH
20199: LD_INT 106
20201: PUSH
20202: LD_INT 107
20204: PUSH
20205: LD_INT 108
20207: PUSH
20208: LD_INT 109
20210: PUSH
20211: LD_INT 110
20213: PUSH
20214: LD_INT 111
20216: PUSH
20217: LD_INT 112
20219: PUSH
20220: LD_INT 113
20222: PUSH
20223: LD_INT 114
20225: PUSH
20226: LD_INT 115
20228: PUSH
20229: LD_INT 116
20231: PUSH
20232: LD_INT 117
20234: PUSH
20235: LD_INT 118
20237: PUSH
20238: EMPTY
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: LIST
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: ST_TO_ADDR
20262: GO 20265
20264: POP
// end else
20265: GO 20496
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
20267: LD_ADDR_VAR 0 2
20271: PUSH
20272: LD_INT 1
20274: PUSH
20275: LD_INT 2
20277: PUSH
20278: LD_INT 3
20280: PUSH
20281: LD_INT 4
20283: PUSH
20284: LD_INT 5
20286: PUSH
20287: LD_INT 6
20289: PUSH
20290: LD_INT 7
20292: PUSH
20293: LD_INT 8
20295: PUSH
20296: LD_INT 9
20298: PUSH
20299: LD_INT 10
20301: PUSH
20302: LD_INT 11
20304: PUSH
20305: LD_INT 12
20307: PUSH
20308: LD_INT 13
20310: PUSH
20311: LD_INT 14
20313: PUSH
20314: LD_INT 15
20316: PUSH
20317: LD_INT 16
20319: PUSH
20320: LD_INT 17
20322: PUSH
20323: LD_INT 18
20325: PUSH
20326: LD_INT 19
20328: PUSH
20329: LD_INT 20
20331: PUSH
20332: LD_INT 21
20334: PUSH
20335: LD_INT 22
20337: PUSH
20338: LD_INT 23
20340: PUSH
20341: LD_INT 24
20343: PUSH
20344: LD_INT 25
20346: PUSH
20347: LD_INT 26
20349: PUSH
20350: LD_INT 27
20352: PUSH
20353: LD_INT 28
20355: PUSH
20356: LD_INT 29
20358: PUSH
20359: LD_INT 30
20361: PUSH
20362: LD_INT 31
20364: PUSH
20365: LD_INT 32
20367: PUSH
20368: LD_INT 33
20370: PUSH
20371: LD_INT 34
20373: PUSH
20374: LD_INT 35
20376: PUSH
20377: LD_INT 36
20379: PUSH
20380: EMPTY
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: LIST
20396: LIST
20397: LIST
20398: LIST
20399: LIST
20400: LIST
20401: LIST
20402: LIST
20403: LIST
20404: LIST
20405: LIST
20406: LIST
20407: LIST
20408: LIST
20409: LIST
20410: LIST
20411: LIST
20412: LIST
20413: LIST
20414: LIST
20415: LIST
20416: LIST
20417: PUSH
20418: LD_INT 101
20420: PUSH
20421: LD_INT 102
20423: PUSH
20424: LD_INT 103
20426: PUSH
20427: LD_INT 104
20429: PUSH
20430: LD_INT 105
20432: PUSH
20433: LD_INT 106
20435: PUSH
20436: LD_INT 107
20438: PUSH
20439: LD_INT 108
20441: PUSH
20442: LD_INT 109
20444: PUSH
20445: LD_INT 110
20447: PUSH
20448: LD_INT 111
20450: PUSH
20451: LD_INT 112
20453: PUSH
20454: LD_INT 113
20456: PUSH
20457: LD_INT 114
20459: PUSH
20460: LD_INT 115
20462: PUSH
20463: LD_INT 116
20465: PUSH
20466: LD_INT 117
20468: PUSH
20469: LD_INT 118
20471: PUSH
20472: EMPTY
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: PUSH
20492: EMPTY
20493: LIST
20494: LIST
20495: ST_TO_ADDR
// if result then
20496: LD_VAR 0 2
20500: IFFALSE 21286
// begin normal :=  ;
20502: LD_ADDR_VAR 0 5
20506: PUSH
20507: LD_STRING 
20509: ST_TO_ADDR
// hardcore :=  ;
20510: LD_ADDR_VAR 0 6
20514: PUSH
20515: LD_STRING 
20517: ST_TO_ADDR
// active :=  ;
20518: LD_ADDR_VAR 0 7
20522: PUSH
20523: LD_STRING 
20525: ST_TO_ADDR
// for i = 1 to normalCounter do
20526: LD_ADDR_VAR 0 8
20530: PUSH
20531: DOUBLE
20532: LD_INT 1
20534: DEC
20535: ST_TO_ADDR
20536: LD_EXP 41
20540: PUSH
20541: FOR_TO
20542: IFFALSE 20643
// begin tmp := 0 ;
20544: LD_ADDR_VAR 0 3
20548: PUSH
20549: LD_STRING 0
20551: ST_TO_ADDR
// if result [ 1 ] then
20552: LD_VAR 0 2
20556: PUSH
20557: LD_INT 1
20559: ARRAY
20560: IFFALSE 20625
// if result [ 1 ] [ 1 ] = i then
20562: LD_VAR 0 2
20566: PUSH
20567: LD_INT 1
20569: ARRAY
20570: PUSH
20571: LD_INT 1
20573: ARRAY
20574: PUSH
20575: LD_VAR 0 8
20579: EQUAL
20580: IFFALSE 20625
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
20582: LD_ADDR_VAR 0 2
20586: PUSH
20587: LD_VAR 0 2
20591: PPUSH
20592: LD_INT 1
20594: PPUSH
20595: LD_VAR 0 2
20599: PUSH
20600: LD_INT 1
20602: ARRAY
20603: PPUSH
20604: LD_INT 1
20606: PPUSH
20607: CALL_OW 3
20611: PPUSH
20612: CALL_OW 1
20616: ST_TO_ADDR
// tmp := 1 ;
20617: LD_ADDR_VAR 0 3
20621: PUSH
20622: LD_STRING 1
20624: ST_TO_ADDR
// end ; normal := normal & tmp ;
20625: LD_ADDR_VAR 0 5
20629: PUSH
20630: LD_VAR 0 5
20634: PUSH
20635: LD_VAR 0 3
20639: STR
20640: ST_TO_ADDR
// end ;
20641: GO 20541
20643: POP
20644: POP
// for i = 1 to hardcoreCounter do
20645: LD_ADDR_VAR 0 8
20649: PUSH
20650: DOUBLE
20651: LD_INT 1
20653: DEC
20654: ST_TO_ADDR
20655: LD_EXP 42
20659: PUSH
20660: FOR_TO
20661: IFFALSE 20766
// begin tmp := 0 ;
20663: LD_ADDR_VAR 0 3
20667: PUSH
20668: LD_STRING 0
20670: ST_TO_ADDR
// if result [ 2 ] then
20671: LD_VAR 0 2
20675: PUSH
20676: LD_INT 2
20678: ARRAY
20679: IFFALSE 20748
// if result [ 2 ] [ 1 ] = 100 + i then
20681: LD_VAR 0 2
20685: PUSH
20686: LD_INT 2
20688: ARRAY
20689: PUSH
20690: LD_INT 1
20692: ARRAY
20693: PUSH
20694: LD_INT 100
20696: PUSH
20697: LD_VAR 0 8
20701: PLUS
20702: EQUAL
20703: IFFALSE 20748
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
20705: LD_ADDR_VAR 0 2
20709: PUSH
20710: LD_VAR 0 2
20714: PPUSH
20715: LD_INT 2
20717: PPUSH
20718: LD_VAR 0 2
20722: PUSH
20723: LD_INT 2
20725: ARRAY
20726: PPUSH
20727: LD_INT 1
20729: PPUSH
20730: CALL_OW 3
20734: PPUSH
20735: CALL_OW 1
20739: ST_TO_ADDR
// tmp := 1 ;
20740: LD_ADDR_VAR 0 3
20744: PUSH
20745: LD_STRING 1
20747: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
20748: LD_ADDR_VAR 0 6
20752: PUSH
20753: LD_VAR 0 6
20757: PUSH
20758: LD_VAR 0 3
20762: STR
20763: ST_TO_ADDR
// end ;
20764: GO 20660
20766: POP
20767: POP
// if isGameLoad then
20768: LD_VAR 0 1
20772: IFFALSE 21247
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
20774: LD_ADDR_VAR 0 4
20778: PUSH
20779: LD_EXP 45
20783: PUSH
20784: LD_EXP 44
20788: PUSH
20789: LD_EXP 46
20793: PUSH
20794: LD_EXP 43
20798: PUSH
20799: LD_EXP 47
20803: PUSH
20804: LD_EXP 48
20808: PUSH
20809: LD_EXP 49
20813: PUSH
20814: LD_EXP 50
20818: PUSH
20819: LD_EXP 51
20823: PUSH
20824: LD_EXP 52
20828: PUSH
20829: LD_EXP 53
20833: PUSH
20834: LD_EXP 54
20838: PUSH
20839: LD_EXP 55
20843: PUSH
20844: LD_EXP 56
20848: PUSH
20849: LD_EXP 64
20853: PUSH
20854: LD_EXP 65
20858: PUSH
20859: LD_EXP 66
20863: PUSH
20864: LD_EXP 67
20868: PUSH
20869: LD_EXP 69
20873: PUSH
20874: LD_EXP 70
20878: PUSH
20879: LD_EXP 71
20883: PUSH
20884: LD_EXP 74
20888: PUSH
20889: LD_EXP 76
20893: PUSH
20894: LD_EXP 77
20898: PUSH
20899: LD_EXP 78
20903: PUSH
20904: LD_EXP 80
20908: PUSH
20909: LD_EXP 81
20913: PUSH
20914: LD_EXP 84
20918: PUSH
20919: LD_EXP 85
20923: PUSH
20924: LD_EXP 86
20928: PUSH
20929: LD_EXP 87
20933: PUSH
20934: LD_EXP 88
20938: PUSH
20939: LD_EXP 89
20943: PUSH
20944: LD_EXP 90
20948: PUSH
20949: LD_EXP 91
20953: PUSH
20954: LD_EXP 92
20958: PUSH
20959: LD_EXP 57
20963: PUSH
20964: LD_EXP 58
20968: PUSH
20969: LD_EXP 61
20973: PUSH
20974: LD_EXP 62
20978: PUSH
20979: LD_EXP 63
20983: PUSH
20984: LD_EXP 59
20988: PUSH
20989: LD_EXP 60
20993: PUSH
20994: LD_EXP 68
20998: PUSH
20999: LD_EXP 72
21003: PUSH
21004: LD_EXP 73
21008: PUSH
21009: LD_EXP 75
21013: PUSH
21014: LD_EXP 79
21018: PUSH
21019: LD_EXP 82
21023: PUSH
21024: LD_EXP 83
21028: PUSH
21029: LD_EXP 93
21033: PUSH
21034: LD_EXP 94
21038: PUSH
21039: LD_EXP 95
21043: PUSH
21044: LD_EXP 96
21048: PUSH
21049: EMPTY
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: LIST
21087: LIST
21088: LIST
21089: LIST
21090: LIST
21091: LIST
21092: LIST
21093: LIST
21094: LIST
21095: LIST
21096: LIST
21097: LIST
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: LIST
21103: LIST
21104: ST_TO_ADDR
// tmp :=  ;
21105: LD_ADDR_VAR 0 3
21109: PUSH
21110: LD_STRING 
21112: ST_TO_ADDR
// for i = 1 to normalCounter do
21113: LD_ADDR_VAR 0 8
21117: PUSH
21118: DOUBLE
21119: LD_INT 1
21121: DEC
21122: ST_TO_ADDR
21123: LD_EXP 41
21127: PUSH
21128: FOR_TO
21129: IFFALSE 21165
// begin if flags [ i ] then
21131: LD_VAR 0 4
21135: PUSH
21136: LD_VAR 0 8
21140: ARRAY
21141: IFFALSE 21163
// tmp := tmp & i & ; ;
21143: LD_ADDR_VAR 0 3
21147: PUSH
21148: LD_VAR 0 3
21152: PUSH
21153: LD_VAR 0 8
21157: STR
21158: PUSH
21159: LD_STRING ;
21161: STR
21162: ST_TO_ADDR
// end ;
21163: GO 21128
21165: POP
21166: POP
// for i = 1 to hardcoreCounter do
21167: LD_ADDR_VAR 0 8
21171: PUSH
21172: DOUBLE
21173: LD_INT 1
21175: DEC
21176: ST_TO_ADDR
21177: LD_EXP 42
21181: PUSH
21182: FOR_TO
21183: IFFALSE 21229
// begin if flags [ normalCounter + i ] then
21185: LD_VAR 0 4
21189: PUSH
21190: LD_EXP 41
21194: PUSH
21195: LD_VAR 0 8
21199: PLUS
21200: ARRAY
21201: IFFALSE 21227
// tmp := tmp & ( 100 + i ) & ; ;
21203: LD_ADDR_VAR 0 3
21207: PUSH
21208: LD_VAR 0 3
21212: PUSH
21213: LD_INT 100
21215: PUSH
21216: LD_VAR 0 8
21220: PLUS
21221: STR
21222: PUSH
21223: LD_STRING ;
21225: STR
21226: ST_TO_ADDR
// end ;
21227: GO 21182
21229: POP
21230: POP
// if tmp then
21231: LD_VAR 0 3
21235: IFFALSE 21247
// active := tmp ;
21237: LD_ADDR_VAR 0 7
21241: PUSH
21242: LD_VAR 0 3
21246: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
21247: LD_STRING getStreamItemsFromMission("
21249: PUSH
21250: LD_VAR 0 5
21254: STR
21255: PUSH
21256: LD_STRING ","
21258: STR
21259: PUSH
21260: LD_VAR 0 6
21264: STR
21265: PUSH
21266: LD_STRING ","
21268: STR
21269: PUSH
21270: LD_VAR 0 7
21274: STR
21275: PUSH
21276: LD_STRING ")
21278: STR
21279: PPUSH
21280: CALL_OW 559
// end else
21284: GO 21293
// ToLua ( getStreamItemsFromMission("","","") ) ;
21286: LD_STRING getStreamItemsFromMission("","","")
21288: PPUSH
21289: CALL_OW 559
// end ;
21293: LD_VAR 0 2
21297: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
21298: LD_EXP 40
21302: PUSH
21303: LD_EXP 45
21307: AND
21308: IFFALSE 21432
21310: GO 21312
21312: DISABLE
21313: LD_INT 0
21315: PPUSH
21316: PPUSH
// begin enable ;
21317: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
21318: LD_ADDR_VAR 0 2
21322: PUSH
21323: LD_INT 22
21325: PUSH
21326: LD_OWVAR 2
21330: PUSH
21331: EMPTY
21332: LIST
21333: LIST
21334: PUSH
21335: LD_INT 2
21337: PUSH
21338: LD_INT 34
21340: PUSH
21341: LD_INT 7
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: PUSH
21348: LD_INT 34
21350: PUSH
21351: LD_INT 45
21353: PUSH
21354: EMPTY
21355: LIST
21356: LIST
21357: PUSH
21358: LD_INT 34
21360: PUSH
21361: LD_INT 28
21363: PUSH
21364: EMPTY
21365: LIST
21366: LIST
21367: PUSH
21368: LD_INT 34
21370: PUSH
21371: LD_INT 47
21373: PUSH
21374: EMPTY
21375: LIST
21376: LIST
21377: PUSH
21378: EMPTY
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: PPUSH
21389: CALL_OW 69
21393: ST_TO_ADDR
// if not tmp then
21394: LD_VAR 0 2
21398: NOT
21399: IFFALSE 21403
// exit ;
21401: GO 21432
// for i in tmp do
21403: LD_ADDR_VAR 0 1
21407: PUSH
21408: LD_VAR 0 2
21412: PUSH
21413: FOR_IN
21414: IFFALSE 21430
// begin SetLives ( i , 0 ) ;
21416: LD_VAR 0 1
21420: PPUSH
21421: LD_INT 0
21423: PPUSH
21424: CALL_OW 234
// end ;
21428: GO 21413
21430: POP
21431: POP
// end ;
21432: PPOPN 2
21434: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
21435: LD_EXP 40
21439: PUSH
21440: LD_EXP 46
21444: AND
21445: IFFALSE 21529
21447: GO 21449
21449: DISABLE
21450: LD_INT 0
21452: PPUSH
21453: PPUSH
// begin enable ;
21454: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
21455: LD_ADDR_VAR 0 2
21459: PUSH
21460: LD_INT 22
21462: PUSH
21463: LD_OWVAR 2
21467: PUSH
21468: EMPTY
21469: LIST
21470: LIST
21471: PUSH
21472: LD_INT 32
21474: PUSH
21475: LD_INT 3
21477: PUSH
21478: EMPTY
21479: LIST
21480: LIST
21481: PUSH
21482: EMPTY
21483: LIST
21484: LIST
21485: PPUSH
21486: CALL_OW 69
21490: ST_TO_ADDR
// if not tmp then
21491: LD_VAR 0 2
21495: NOT
21496: IFFALSE 21500
// exit ;
21498: GO 21529
// for i in tmp do
21500: LD_ADDR_VAR 0 1
21504: PUSH
21505: LD_VAR 0 2
21509: PUSH
21510: FOR_IN
21511: IFFALSE 21527
// begin SetLives ( i , 0 ) ;
21513: LD_VAR 0 1
21517: PPUSH
21518: LD_INT 0
21520: PPUSH
21521: CALL_OW 234
// end ;
21525: GO 21510
21527: POP
21528: POP
// end ;
21529: PPOPN 2
21531: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
21532: LD_EXP 40
21536: PUSH
21537: LD_EXP 43
21541: AND
21542: IFFALSE 21635
21544: GO 21546
21546: DISABLE
21547: LD_INT 0
21549: PPUSH
// begin enable ;
21550: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
21551: LD_ADDR_VAR 0 1
21555: PUSH
21556: LD_INT 22
21558: PUSH
21559: LD_OWVAR 2
21563: PUSH
21564: EMPTY
21565: LIST
21566: LIST
21567: PUSH
21568: LD_INT 2
21570: PUSH
21571: LD_INT 25
21573: PUSH
21574: LD_INT 5
21576: PUSH
21577: EMPTY
21578: LIST
21579: LIST
21580: PUSH
21581: LD_INT 25
21583: PUSH
21584: LD_INT 9
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: PUSH
21591: LD_INT 25
21593: PUSH
21594: LD_INT 8
21596: PUSH
21597: EMPTY
21598: LIST
21599: LIST
21600: PUSH
21601: EMPTY
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: PUSH
21607: EMPTY
21608: LIST
21609: LIST
21610: PPUSH
21611: CALL_OW 69
21615: PUSH
21616: FOR_IN
21617: IFFALSE 21633
// begin SetClass ( i , 1 ) ;
21619: LD_VAR 0 1
21623: PPUSH
21624: LD_INT 1
21626: PPUSH
21627: CALL_OW 336
// end ;
21631: GO 21616
21633: POP
21634: POP
// end ;
21635: PPOPN 1
21637: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
21638: LD_EXP 40
21642: PUSH
21643: LD_EXP 44
21647: AND
21648: PUSH
21649: LD_OWVAR 65
21653: PUSH
21654: LD_INT 7
21656: LESS
21657: AND
21658: IFFALSE 21672
21660: GO 21662
21662: DISABLE
// begin enable ;
21663: ENABLE
// game_speed := 7 ;
21664: LD_ADDR_OWVAR 65
21668: PUSH
21669: LD_INT 7
21671: ST_TO_ADDR
// end ;
21672: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
21673: LD_EXP 40
21677: PUSH
21678: LD_EXP 47
21682: AND
21683: IFFALSE 21885
21685: GO 21687
21687: DISABLE
21688: LD_INT 0
21690: PPUSH
21691: PPUSH
21692: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21693: LD_ADDR_VAR 0 3
21697: PUSH
21698: LD_INT 81
21700: PUSH
21701: LD_OWVAR 2
21705: PUSH
21706: EMPTY
21707: LIST
21708: LIST
21709: PUSH
21710: LD_INT 21
21712: PUSH
21713: LD_INT 1
21715: PUSH
21716: EMPTY
21717: LIST
21718: LIST
21719: PUSH
21720: EMPTY
21721: LIST
21722: LIST
21723: PPUSH
21724: CALL_OW 69
21728: ST_TO_ADDR
// if not tmp then
21729: LD_VAR 0 3
21733: NOT
21734: IFFALSE 21738
// exit ;
21736: GO 21885
// if tmp > 5 then
21738: LD_VAR 0 3
21742: PUSH
21743: LD_INT 5
21745: GREATER
21746: IFFALSE 21758
// k := 5 else
21748: LD_ADDR_VAR 0 2
21752: PUSH
21753: LD_INT 5
21755: ST_TO_ADDR
21756: GO 21768
// k := tmp ;
21758: LD_ADDR_VAR 0 2
21762: PUSH
21763: LD_VAR 0 3
21767: ST_TO_ADDR
// for i := 1 to k do
21768: LD_ADDR_VAR 0 1
21772: PUSH
21773: DOUBLE
21774: LD_INT 1
21776: DEC
21777: ST_TO_ADDR
21778: LD_VAR 0 2
21782: PUSH
21783: FOR_TO
21784: IFFALSE 21883
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
21786: LD_VAR 0 3
21790: PUSH
21791: LD_VAR 0 1
21795: ARRAY
21796: PPUSH
21797: LD_VAR 0 1
21801: PUSH
21802: LD_INT 4
21804: MOD
21805: PUSH
21806: LD_INT 1
21808: PLUS
21809: PPUSH
21810: CALL_OW 259
21814: PUSH
21815: LD_INT 10
21817: LESS
21818: IFFALSE 21881
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
21820: LD_VAR 0 3
21824: PUSH
21825: LD_VAR 0 1
21829: ARRAY
21830: PPUSH
21831: LD_VAR 0 1
21835: PUSH
21836: LD_INT 4
21838: MOD
21839: PUSH
21840: LD_INT 1
21842: PLUS
21843: PPUSH
21844: LD_VAR 0 3
21848: PUSH
21849: LD_VAR 0 1
21853: ARRAY
21854: PPUSH
21855: LD_VAR 0 1
21859: PUSH
21860: LD_INT 4
21862: MOD
21863: PUSH
21864: LD_INT 1
21866: PLUS
21867: PPUSH
21868: CALL_OW 259
21872: PUSH
21873: LD_INT 1
21875: PLUS
21876: PPUSH
21877: CALL_OW 237
21881: GO 21783
21883: POP
21884: POP
// end ;
21885: PPOPN 3
21887: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
21888: LD_EXP 40
21892: PUSH
21893: LD_EXP 48
21897: AND
21898: IFFALSE 21918
21900: GO 21902
21902: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
21903: LD_INT 4
21905: PPUSH
21906: LD_OWVAR 2
21910: PPUSH
21911: LD_INT 0
21913: PPUSH
21914: CALL_OW 324
21918: END
// every 0 0$1 trigger StreamModeActive and sShovel do
21919: LD_EXP 40
21923: PUSH
21924: LD_EXP 77
21928: AND
21929: IFFALSE 21949
21931: GO 21933
21933: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
21934: LD_INT 19
21936: PPUSH
21937: LD_OWVAR 2
21941: PPUSH
21942: LD_INT 0
21944: PPUSH
21945: CALL_OW 324
21949: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
21950: LD_EXP 40
21954: PUSH
21955: LD_EXP 49
21959: AND
21960: IFFALSE 22062
21962: GO 21964
21964: DISABLE
21965: LD_INT 0
21967: PPUSH
21968: PPUSH
// begin enable ;
21969: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
21970: LD_ADDR_VAR 0 2
21974: PUSH
21975: LD_INT 22
21977: PUSH
21978: LD_OWVAR 2
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: PUSH
21987: LD_INT 2
21989: PUSH
21990: LD_INT 34
21992: PUSH
21993: LD_INT 11
21995: PUSH
21996: EMPTY
21997: LIST
21998: LIST
21999: PUSH
22000: LD_INT 34
22002: PUSH
22003: LD_INT 30
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: PUSH
22010: EMPTY
22011: LIST
22012: LIST
22013: LIST
22014: PUSH
22015: EMPTY
22016: LIST
22017: LIST
22018: PPUSH
22019: CALL_OW 69
22023: ST_TO_ADDR
// if not tmp then
22024: LD_VAR 0 2
22028: NOT
22029: IFFALSE 22033
// exit ;
22031: GO 22062
// for i in tmp do
22033: LD_ADDR_VAR 0 1
22037: PUSH
22038: LD_VAR 0 2
22042: PUSH
22043: FOR_IN
22044: IFFALSE 22060
// begin SetLives ( i , 0 ) ;
22046: LD_VAR 0 1
22050: PPUSH
22051: LD_INT 0
22053: PPUSH
22054: CALL_OW 234
// end ;
22058: GO 22043
22060: POP
22061: POP
// end ;
22062: PPOPN 2
22064: END
// every 0 0$1 trigger StreamModeActive and sBunker do
22065: LD_EXP 40
22069: PUSH
22070: LD_EXP 50
22074: AND
22075: IFFALSE 22095
22077: GO 22079
22079: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
22080: LD_INT 32
22082: PPUSH
22083: LD_OWVAR 2
22087: PPUSH
22088: LD_INT 0
22090: PPUSH
22091: CALL_OW 324
22095: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
22096: LD_EXP 40
22100: PUSH
22101: LD_EXP 51
22105: AND
22106: IFFALSE 22287
22108: GO 22110
22110: DISABLE
22111: LD_INT 0
22113: PPUSH
22114: PPUSH
22115: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
22116: LD_ADDR_VAR 0 2
22120: PUSH
22121: LD_INT 22
22123: PUSH
22124: LD_OWVAR 2
22128: PUSH
22129: EMPTY
22130: LIST
22131: LIST
22132: PUSH
22133: LD_INT 33
22135: PUSH
22136: LD_INT 3
22138: PUSH
22139: EMPTY
22140: LIST
22141: LIST
22142: PUSH
22143: EMPTY
22144: LIST
22145: LIST
22146: PPUSH
22147: CALL_OW 69
22151: ST_TO_ADDR
// if not tmp then
22152: LD_VAR 0 2
22156: NOT
22157: IFFALSE 22161
// exit ;
22159: GO 22287
// side := 0 ;
22161: LD_ADDR_VAR 0 3
22165: PUSH
22166: LD_INT 0
22168: ST_TO_ADDR
// for i := 1 to 8 do
22169: LD_ADDR_VAR 0 1
22173: PUSH
22174: DOUBLE
22175: LD_INT 1
22177: DEC
22178: ST_TO_ADDR
22179: LD_INT 8
22181: PUSH
22182: FOR_TO
22183: IFFALSE 22231
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
22185: LD_OWVAR 2
22189: PUSH
22190: LD_VAR 0 1
22194: NONEQUAL
22195: PUSH
22196: LD_OWVAR 2
22200: PPUSH
22201: LD_VAR 0 1
22205: PPUSH
22206: CALL_OW 81
22210: PUSH
22211: LD_INT 2
22213: EQUAL
22214: AND
22215: IFFALSE 22229
// begin side := i ;
22217: LD_ADDR_VAR 0 3
22221: PUSH
22222: LD_VAR 0 1
22226: ST_TO_ADDR
// break ;
22227: GO 22231
// end ;
22229: GO 22182
22231: POP
22232: POP
// if not side then
22233: LD_VAR 0 3
22237: NOT
22238: IFFALSE 22242
// exit ;
22240: GO 22287
// for i := 1 to tmp do
22242: LD_ADDR_VAR 0 1
22246: PUSH
22247: DOUBLE
22248: LD_INT 1
22250: DEC
22251: ST_TO_ADDR
22252: LD_VAR 0 2
22256: PUSH
22257: FOR_TO
22258: IFFALSE 22285
// if Prob ( 60 ) then
22260: LD_INT 60
22262: PPUSH
22263: CALL_OW 13
22267: IFFALSE 22283
// SetSide ( i , side ) ;
22269: LD_VAR 0 1
22273: PPUSH
22274: LD_VAR 0 3
22278: PPUSH
22279: CALL_OW 235
22283: GO 22257
22285: POP
22286: POP
// end ;
22287: PPOPN 3
22289: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
22290: LD_EXP 40
22294: PUSH
22295: LD_EXP 53
22299: AND
22300: IFFALSE 22419
22302: GO 22304
22304: DISABLE
22305: LD_INT 0
22307: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
22308: LD_ADDR_VAR 0 1
22312: PUSH
22313: LD_INT 22
22315: PUSH
22316: LD_OWVAR 2
22320: PUSH
22321: EMPTY
22322: LIST
22323: LIST
22324: PUSH
22325: LD_INT 21
22327: PUSH
22328: LD_INT 1
22330: PUSH
22331: EMPTY
22332: LIST
22333: LIST
22334: PUSH
22335: LD_INT 3
22337: PUSH
22338: LD_INT 23
22340: PUSH
22341: LD_INT 0
22343: PUSH
22344: EMPTY
22345: LIST
22346: LIST
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: PUSH
22352: EMPTY
22353: LIST
22354: LIST
22355: LIST
22356: PPUSH
22357: CALL_OW 69
22361: PUSH
22362: FOR_IN
22363: IFFALSE 22417
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
22365: LD_VAR 0 1
22369: PPUSH
22370: CALL_OW 257
22374: PUSH
22375: LD_INT 1
22377: PUSH
22378: LD_INT 2
22380: PUSH
22381: LD_INT 3
22383: PUSH
22384: LD_INT 4
22386: PUSH
22387: EMPTY
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: IN
22393: IFFALSE 22415
// SetClass ( un , rand ( 1 , 4 ) ) ;
22395: LD_VAR 0 1
22399: PPUSH
22400: LD_INT 1
22402: PPUSH
22403: LD_INT 4
22405: PPUSH
22406: CALL_OW 12
22410: PPUSH
22411: CALL_OW 336
22415: GO 22362
22417: POP
22418: POP
// end ;
22419: PPOPN 1
22421: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
22422: LD_EXP 40
22426: PUSH
22427: LD_EXP 52
22431: AND
22432: IFFALSE 22511
22434: GO 22436
22436: DISABLE
22437: LD_INT 0
22439: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22440: LD_ADDR_VAR 0 1
22444: PUSH
22445: LD_INT 22
22447: PUSH
22448: LD_OWVAR 2
22452: PUSH
22453: EMPTY
22454: LIST
22455: LIST
22456: PUSH
22457: LD_INT 21
22459: PUSH
22460: LD_INT 3
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: PUSH
22467: EMPTY
22468: LIST
22469: LIST
22470: PPUSH
22471: CALL_OW 69
22475: ST_TO_ADDR
// if not tmp then
22476: LD_VAR 0 1
22480: NOT
22481: IFFALSE 22485
// exit ;
22483: GO 22511
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
22485: LD_VAR 0 1
22489: PUSH
22490: LD_INT 1
22492: PPUSH
22493: LD_VAR 0 1
22497: PPUSH
22498: CALL_OW 12
22502: ARRAY
22503: PPUSH
22504: LD_INT 100
22506: PPUSH
22507: CALL_OW 234
// end ;
22511: PPOPN 1
22513: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
22514: LD_EXP 40
22518: PUSH
22519: LD_EXP 54
22523: AND
22524: IFFALSE 22622
22526: GO 22528
22528: DISABLE
22529: LD_INT 0
22531: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22532: LD_ADDR_VAR 0 1
22536: PUSH
22537: LD_INT 22
22539: PUSH
22540: LD_OWVAR 2
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: PUSH
22549: LD_INT 21
22551: PUSH
22552: LD_INT 1
22554: PUSH
22555: EMPTY
22556: LIST
22557: LIST
22558: PUSH
22559: EMPTY
22560: LIST
22561: LIST
22562: PPUSH
22563: CALL_OW 69
22567: ST_TO_ADDR
// if not tmp then
22568: LD_VAR 0 1
22572: NOT
22573: IFFALSE 22577
// exit ;
22575: GO 22622
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
22577: LD_VAR 0 1
22581: PUSH
22582: LD_INT 1
22584: PPUSH
22585: LD_VAR 0 1
22589: PPUSH
22590: CALL_OW 12
22594: ARRAY
22595: PPUSH
22596: LD_INT 1
22598: PPUSH
22599: LD_INT 4
22601: PPUSH
22602: CALL_OW 12
22606: PPUSH
22607: LD_INT 3000
22609: PPUSH
22610: LD_INT 9000
22612: PPUSH
22613: CALL_OW 12
22617: PPUSH
22618: CALL_OW 492
// end ;
22622: PPOPN 1
22624: END
// every 0 0$1 trigger StreamModeActive and sDepot do
22625: LD_EXP 40
22629: PUSH
22630: LD_EXP 55
22634: AND
22635: IFFALSE 22655
22637: GO 22639
22639: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
22640: LD_INT 1
22642: PPUSH
22643: LD_OWVAR 2
22647: PPUSH
22648: LD_INT 0
22650: PPUSH
22651: CALL_OW 324
22655: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
22656: LD_EXP 40
22660: PUSH
22661: LD_EXP 56
22665: AND
22666: IFFALSE 22749
22668: GO 22670
22670: DISABLE
22671: LD_INT 0
22673: PPUSH
22674: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22675: LD_ADDR_VAR 0 2
22679: PUSH
22680: LD_INT 22
22682: PUSH
22683: LD_OWVAR 2
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: PUSH
22692: LD_INT 21
22694: PUSH
22695: LD_INT 3
22697: PUSH
22698: EMPTY
22699: LIST
22700: LIST
22701: PUSH
22702: EMPTY
22703: LIST
22704: LIST
22705: PPUSH
22706: CALL_OW 69
22710: ST_TO_ADDR
// if not tmp then
22711: LD_VAR 0 2
22715: NOT
22716: IFFALSE 22720
// exit ;
22718: GO 22749
// for i in tmp do
22720: LD_ADDR_VAR 0 1
22724: PUSH
22725: LD_VAR 0 2
22729: PUSH
22730: FOR_IN
22731: IFFALSE 22747
// SetBLevel ( i , 10 ) ;
22733: LD_VAR 0 1
22737: PPUSH
22738: LD_INT 10
22740: PPUSH
22741: CALL_OW 241
22745: GO 22730
22747: POP
22748: POP
// end ;
22749: PPOPN 2
22751: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
22752: LD_EXP 40
22756: PUSH
22757: LD_EXP 57
22761: AND
22762: IFFALSE 22873
22764: GO 22766
22766: DISABLE
22767: LD_INT 0
22769: PPUSH
22770: PPUSH
22771: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22772: LD_ADDR_VAR 0 3
22776: PUSH
22777: LD_INT 22
22779: PUSH
22780: LD_OWVAR 2
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: PUSH
22789: LD_INT 25
22791: PUSH
22792: LD_INT 1
22794: PUSH
22795: EMPTY
22796: LIST
22797: LIST
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: PPUSH
22803: CALL_OW 69
22807: ST_TO_ADDR
// if not tmp then
22808: LD_VAR 0 3
22812: NOT
22813: IFFALSE 22817
// exit ;
22815: GO 22873
// un := tmp [ rand ( 1 , tmp ) ] ;
22817: LD_ADDR_VAR 0 2
22821: PUSH
22822: LD_VAR 0 3
22826: PUSH
22827: LD_INT 1
22829: PPUSH
22830: LD_VAR 0 3
22834: PPUSH
22835: CALL_OW 12
22839: ARRAY
22840: ST_TO_ADDR
// if Crawls ( un ) then
22841: LD_VAR 0 2
22845: PPUSH
22846: CALL_OW 318
22850: IFFALSE 22861
// ComWalk ( un ) ;
22852: LD_VAR 0 2
22856: PPUSH
22857: CALL_OW 138
// SetClass ( un , class_sniper ) ;
22861: LD_VAR 0 2
22865: PPUSH
22866: LD_INT 5
22868: PPUSH
22869: CALL_OW 336
// end ;
22873: PPOPN 3
22875: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
22876: LD_EXP 40
22880: PUSH
22881: LD_EXP 58
22885: AND
22886: PUSH
22887: LD_OWVAR 67
22891: PUSH
22892: LD_INT 4
22894: LESS
22895: AND
22896: IFFALSE 22915
22898: GO 22900
22900: DISABLE
// begin Difficulty := Difficulty + 1 ;
22901: LD_ADDR_OWVAR 67
22905: PUSH
22906: LD_OWVAR 67
22910: PUSH
22911: LD_INT 1
22913: PLUS
22914: ST_TO_ADDR
// end ;
22915: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
22916: LD_EXP 40
22920: PUSH
22921: LD_EXP 59
22925: AND
22926: IFFALSE 23029
22928: GO 22930
22930: DISABLE
22931: LD_INT 0
22933: PPUSH
// begin for i := 1 to 5 do
22934: LD_ADDR_VAR 0 1
22938: PUSH
22939: DOUBLE
22940: LD_INT 1
22942: DEC
22943: ST_TO_ADDR
22944: LD_INT 5
22946: PUSH
22947: FOR_TO
22948: IFFALSE 23027
// begin uc_nation := nation_nature ;
22950: LD_ADDR_OWVAR 21
22954: PUSH
22955: LD_INT 0
22957: ST_TO_ADDR
// uc_side := 0 ;
22958: LD_ADDR_OWVAR 20
22962: PUSH
22963: LD_INT 0
22965: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22966: LD_ADDR_OWVAR 29
22970: PUSH
22971: LD_INT 12
22973: PUSH
22974: LD_INT 12
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: ST_TO_ADDR
// hc_agressivity := 20 ;
22981: LD_ADDR_OWVAR 35
22985: PUSH
22986: LD_INT 20
22988: ST_TO_ADDR
// hc_class := class_tiger ;
22989: LD_ADDR_OWVAR 28
22993: PUSH
22994: LD_INT 14
22996: ST_TO_ADDR
// hc_gallery :=  ;
22997: LD_ADDR_OWVAR 33
23001: PUSH
23002: LD_STRING 
23004: ST_TO_ADDR
// hc_name :=  ;
23005: LD_ADDR_OWVAR 26
23009: PUSH
23010: LD_STRING 
23012: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
23013: CALL_OW 44
23017: PPUSH
23018: LD_INT 0
23020: PPUSH
23021: CALL_OW 51
// end ;
23025: GO 22947
23027: POP
23028: POP
// end ;
23029: PPOPN 1
23031: END
// every 0 0$1 trigger StreamModeActive and sBomb do
23032: LD_EXP 40
23036: PUSH
23037: LD_EXP 60
23041: AND
23042: IFFALSE 23051
23044: GO 23046
23046: DISABLE
// StreamSibBomb ;
23047: CALL 23052 0 0
23051: END
// export function StreamSibBomb ; var i , x , y ; begin
23052: LD_INT 0
23054: PPUSH
23055: PPUSH
23056: PPUSH
23057: PPUSH
// result := false ;
23058: LD_ADDR_VAR 0 1
23062: PUSH
23063: LD_INT 0
23065: ST_TO_ADDR
// for i := 1 to 16 do
23066: LD_ADDR_VAR 0 2
23070: PUSH
23071: DOUBLE
23072: LD_INT 1
23074: DEC
23075: ST_TO_ADDR
23076: LD_INT 16
23078: PUSH
23079: FOR_TO
23080: IFFALSE 23279
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23082: LD_ADDR_VAR 0 3
23086: PUSH
23087: LD_INT 10
23089: PUSH
23090: LD_INT 20
23092: PUSH
23093: LD_INT 30
23095: PUSH
23096: LD_INT 40
23098: PUSH
23099: LD_INT 50
23101: PUSH
23102: LD_INT 60
23104: PUSH
23105: LD_INT 70
23107: PUSH
23108: LD_INT 80
23110: PUSH
23111: LD_INT 90
23113: PUSH
23114: LD_INT 100
23116: PUSH
23117: LD_INT 110
23119: PUSH
23120: LD_INT 120
23122: PUSH
23123: LD_INT 130
23125: PUSH
23126: LD_INT 140
23128: PUSH
23129: LD_INT 150
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: PUSH
23149: LD_INT 1
23151: PPUSH
23152: LD_INT 15
23154: PPUSH
23155: CALL_OW 12
23159: ARRAY
23160: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23161: LD_ADDR_VAR 0 4
23165: PUSH
23166: LD_INT 10
23168: PUSH
23169: LD_INT 20
23171: PUSH
23172: LD_INT 30
23174: PUSH
23175: LD_INT 40
23177: PUSH
23178: LD_INT 50
23180: PUSH
23181: LD_INT 60
23183: PUSH
23184: LD_INT 70
23186: PUSH
23187: LD_INT 80
23189: PUSH
23190: LD_INT 90
23192: PUSH
23193: LD_INT 100
23195: PUSH
23196: LD_INT 110
23198: PUSH
23199: LD_INT 120
23201: PUSH
23202: LD_INT 130
23204: PUSH
23205: LD_INT 140
23207: PUSH
23208: LD_INT 150
23210: PUSH
23211: EMPTY
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: PUSH
23228: LD_INT 1
23230: PPUSH
23231: LD_INT 15
23233: PPUSH
23234: CALL_OW 12
23238: ARRAY
23239: ST_TO_ADDR
// if ValidHex ( x , y ) then
23240: LD_VAR 0 3
23244: PPUSH
23245: LD_VAR 0 4
23249: PPUSH
23250: CALL_OW 488
23254: IFFALSE 23277
// begin result := [ x , y ] ;
23256: LD_ADDR_VAR 0 1
23260: PUSH
23261: LD_VAR 0 3
23265: PUSH
23266: LD_VAR 0 4
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: ST_TO_ADDR
// break ;
23275: GO 23279
// end ; end ;
23277: GO 23079
23279: POP
23280: POP
// if result then
23281: LD_VAR 0 1
23285: IFFALSE 23345
// begin ToLua ( playSibBomb() ) ;
23287: LD_STRING playSibBomb()
23289: PPUSH
23290: CALL_OW 559
// wait ( 0 0$14 ) ;
23294: LD_INT 490
23296: PPUSH
23297: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
23301: LD_VAR 0 1
23305: PUSH
23306: LD_INT 1
23308: ARRAY
23309: PPUSH
23310: LD_VAR 0 1
23314: PUSH
23315: LD_INT 2
23317: ARRAY
23318: PPUSH
23319: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
23323: LD_VAR 0 1
23327: PUSH
23328: LD_INT 1
23330: ARRAY
23331: PPUSH
23332: LD_VAR 0 1
23336: PUSH
23337: LD_INT 2
23339: ARRAY
23340: PPUSH
23341: CALL_OW 429
// end ; end ;
23345: LD_VAR 0 1
23349: RET
// every 0 0$1 trigger StreamModeActive and sReset do
23350: LD_EXP 40
23354: PUSH
23355: LD_EXP 62
23359: AND
23360: IFFALSE 23372
23362: GO 23364
23364: DISABLE
// YouLost (  ) ;
23365: LD_STRING 
23367: PPUSH
23368: CALL_OW 104
23372: END
// every 0 0$1 trigger StreamModeActive and sFog do
23373: LD_EXP 40
23377: PUSH
23378: LD_EXP 61
23382: AND
23383: IFFALSE 23397
23385: GO 23387
23387: DISABLE
// FogOff ( your_side ) ;
23388: LD_OWVAR 2
23392: PPUSH
23393: CALL_OW 344
23397: END
// every 0 0$1 trigger StreamModeActive and sSun do
23398: LD_EXP 40
23402: PUSH
23403: LD_EXP 63
23407: AND
23408: IFFALSE 23436
23410: GO 23412
23412: DISABLE
// begin solar_recharge_percent := 0 ;
23413: LD_ADDR_OWVAR 79
23417: PUSH
23418: LD_INT 0
23420: ST_TO_ADDR
// wait ( 5 5$00 ) ;
23421: LD_INT 10500
23423: PPUSH
23424: CALL_OW 67
// solar_recharge_percent := 100 ;
23428: LD_ADDR_OWVAR 79
23432: PUSH
23433: LD_INT 100
23435: ST_TO_ADDR
// end ;
23436: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
23437: LD_EXP 40
23441: PUSH
23442: LD_EXP 64
23446: AND
23447: IFFALSE 23686
23449: GO 23451
23451: DISABLE
23452: LD_INT 0
23454: PPUSH
23455: PPUSH
23456: PPUSH
// begin tmp := [ ] ;
23457: LD_ADDR_VAR 0 3
23461: PUSH
23462: EMPTY
23463: ST_TO_ADDR
// for i := 1 to 6 do
23464: LD_ADDR_VAR 0 1
23468: PUSH
23469: DOUBLE
23470: LD_INT 1
23472: DEC
23473: ST_TO_ADDR
23474: LD_INT 6
23476: PUSH
23477: FOR_TO
23478: IFFALSE 23583
// begin uc_nation := nation_nature ;
23480: LD_ADDR_OWVAR 21
23484: PUSH
23485: LD_INT 0
23487: ST_TO_ADDR
// uc_side := 0 ;
23488: LD_ADDR_OWVAR 20
23492: PUSH
23493: LD_INT 0
23495: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23496: LD_ADDR_OWVAR 29
23500: PUSH
23501: LD_INT 12
23503: PUSH
23504: LD_INT 12
23506: PUSH
23507: EMPTY
23508: LIST
23509: LIST
23510: ST_TO_ADDR
// hc_agressivity := 20 ;
23511: LD_ADDR_OWVAR 35
23515: PUSH
23516: LD_INT 20
23518: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
23519: LD_ADDR_OWVAR 28
23523: PUSH
23524: LD_INT 17
23526: ST_TO_ADDR
// hc_gallery :=  ;
23527: LD_ADDR_OWVAR 33
23531: PUSH
23532: LD_STRING 
23534: ST_TO_ADDR
// hc_name :=  ;
23535: LD_ADDR_OWVAR 26
23539: PUSH
23540: LD_STRING 
23542: ST_TO_ADDR
// un := CreateHuman ;
23543: LD_ADDR_VAR 0 2
23547: PUSH
23548: CALL_OW 44
23552: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
23553: LD_VAR 0 2
23557: PPUSH
23558: LD_INT 1
23560: PPUSH
23561: CALL_OW 51
// tmp := tmp ^ un ;
23565: LD_ADDR_VAR 0 3
23569: PUSH
23570: LD_VAR 0 3
23574: PUSH
23575: LD_VAR 0 2
23579: ADD
23580: ST_TO_ADDR
// end ;
23581: GO 23477
23583: POP
23584: POP
// repeat wait ( 0 0$1 ) ;
23585: LD_INT 35
23587: PPUSH
23588: CALL_OW 67
// for un in tmp do
23592: LD_ADDR_VAR 0 2
23596: PUSH
23597: LD_VAR 0 3
23601: PUSH
23602: FOR_IN
23603: IFFALSE 23677
// begin if IsDead ( un ) then
23605: LD_VAR 0 2
23609: PPUSH
23610: CALL_OW 301
23614: IFFALSE 23634
// begin tmp := tmp diff un ;
23616: LD_ADDR_VAR 0 3
23620: PUSH
23621: LD_VAR 0 3
23625: PUSH
23626: LD_VAR 0 2
23630: DIFF
23631: ST_TO_ADDR
// continue ;
23632: GO 23602
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
23634: LD_VAR 0 2
23638: PPUSH
23639: LD_INT 3
23641: PUSH
23642: LD_INT 22
23644: PUSH
23645: LD_INT 0
23647: PUSH
23648: EMPTY
23649: LIST
23650: LIST
23651: PUSH
23652: EMPTY
23653: LIST
23654: LIST
23655: PPUSH
23656: CALL_OW 69
23660: PPUSH
23661: LD_VAR 0 2
23665: PPUSH
23666: CALL_OW 74
23670: PPUSH
23671: CALL_OW 115
// end ;
23675: GO 23602
23677: POP
23678: POP
// until not tmp ;
23679: LD_VAR 0 3
23683: NOT
23684: IFFALSE 23585
// end ;
23686: PPOPN 3
23688: END
// every 0 0$1 trigger StreamModeActive and sTroll do
23689: LD_EXP 40
23693: PUSH
23694: LD_EXP 65
23698: AND
23699: IFFALSE 23753
23701: GO 23703
23703: DISABLE
// begin ToLua ( displayTroll(); ) ;
23704: LD_STRING displayTroll();
23706: PPUSH
23707: CALL_OW 559
// wait ( 3 3$00 ) ;
23711: LD_INT 6300
23713: PPUSH
23714: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23718: LD_STRING hideTroll();
23720: PPUSH
23721: CALL_OW 559
// wait ( 1 1$00 ) ;
23725: LD_INT 2100
23727: PPUSH
23728: CALL_OW 67
// ToLua ( displayTroll(); ) ;
23732: LD_STRING displayTroll();
23734: PPUSH
23735: CALL_OW 559
// wait ( 1 1$00 ) ;
23739: LD_INT 2100
23741: PPUSH
23742: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23746: LD_STRING hideTroll();
23748: PPUSH
23749: CALL_OW 559
// end ;
23753: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
23754: LD_EXP 40
23758: PUSH
23759: LD_EXP 66
23763: AND
23764: IFFALSE 23827
23766: GO 23768
23768: DISABLE
23769: LD_INT 0
23771: PPUSH
// begin p := 0 ;
23772: LD_ADDR_VAR 0 1
23776: PUSH
23777: LD_INT 0
23779: ST_TO_ADDR
// repeat game_speed := 1 ;
23780: LD_ADDR_OWVAR 65
23784: PUSH
23785: LD_INT 1
23787: ST_TO_ADDR
// wait ( 0 0$1 ) ;
23788: LD_INT 35
23790: PPUSH
23791: CALL_OW 67
// p := p + 1 ;
23795: LD_ADDR_VAR 0 1
23799: PUSH
23800: LD_VAR 0 1
23804: PUSH
23805: LD_INT 1
23807: PLUS
23808: ST_TO_ADDR
// until p >= 60 ;
23809: LD_VAR 0 1
23813: PUSH
23814: LD_INT 60
23816: GREATEREQUAL
23817: IFFALSE 23780
// game_speed := 4 ;
23819: LD_ADDR_OWVAR 65
23823: PUSH
23824: LD_INT 4
23826: ST_TO_ADDR
// end ;
23827: PPOPN 1
23829: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
23830: LD_EXP 40
23834: PUSH
23835: LD_EXP 67
23839: AND
23840: IFFALSE 23986
23842: GO 23844
23844: DISABLE
23845: LD_INT 0
23847: PPUSH
23848: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23849: LD_ADDR_VAR 0 1
23853: PUSH
23854: LD_INT 22
23856: PUSH
23857: LD_OWVAR 2
23861: PUSH
23862: EMPTY
23863: LIST
23864: LIST
23865: PUSH
23866: LD_INT 2
23868: PUSH
23869: LD_INT 30
23871: PUSH
23872: LD_INT 0
23874: PUSH
23875: EMPTY
23876: LIST
23877: LIST
23878: PUSH
23879: LD_INT 30
23881: PUSH
23882: LD_INT 1
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: PUSH
23889: EMPTY
23890: LIST
23891: LIST
23892: LIST
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: PPUSH
23898: CALL_OW 69
23902: ST_TO_ADDR
// if not depot then
23903: LD_VAR 0 1
23907: NOT
23908: IFFALSE 23912
// exit ;
23910: GO 23986
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
23912: LD_ADDR_VAR 0 2
23916: PUSH
23917: LD_VAR 0 1
23921: PUSH
23922: LD_INT 1
23924: PPUSH
23925: LD_VAR 0 1
23929: PPUSH
23930: CALL_OW 12
23934: ARRAY
23935: PPUSH
23936: CALL_OW 274
23940: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
23941: LD_VAR 0 2
23945: PPUSH
23946: LD_INT 1
23948: PPUSH
23949: LD_INT 0
23951: PPUSH
23952: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
23956: LD_VAR 0 2
23960: PPUSH
23961: LD_INT 2
23963: PPUSH
23964: LD_INT 0
23966: PPUSH
23967: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
23971: LD_VAR 0 2
23975: PPUSH
23976: LD_INT 3
23978: PPUSH
23979: LD_INT 0
23981: PPUSH
23982: CALL_OW 277
// end ;
23986: PPOPN 2
23988: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
23989: LD_EXP 40
23993: PUSH
23994: LD_EXP 68
23998: AND
23999: IFFALSE 24096
24001: GO 24003
24003: DISABLE
24004: LD_INT 0
24006: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24007: LD_ADDR_VAR 0 1
24011: PUSH
24012: LD_INT 22
24014: PUSH
24015: LD_OWVAR 2
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: PUSH
24024: LD_INT 21
24026: PUSH
24027: LD_INT 1
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: PUSH
24034: LD_INT 3
24036: PUSH
24037: LD_INT 23
24039: PUSH
24040: LD_INT 0
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: PUSH
24047: EMPTY
24048: LIST
24049: LIST
24050: PUSH
24051: EMPTY
24052: LIST
24053: LIST
24054: LIST
24055: PPUSH
24056: CALL_OW 69
24060: ST_TO_ADDR
// if not tmp then
24061: LD_VAR 0 1
24065: NOT
24066: IFFALSE 24070
// exit ;
24068: GO 24096
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
24070: LD_VAR 0 1
24074: PUSH
24075: LD_INT 1
24077: PPUSH
24078: LD_VAR 0 1
24082: PPUSH
24083: CALL_OW 12
24087: ARRAY
24088: PPUSH
24089: LD_INT 200
24091: PPUSH
24092: CALL_OW 234
// end ;
24096: PPOPN 1
24098: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
24099: LD_EXP 40
24103: PUSH
24104: LD_EXP 69
24108: AND
24109: IFFALSE 24188
24111: GO 24113
24113: DISABLE
24114: LD_INT 0
24116: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
24117: LD_ADDR_VAR 0 1
24121: PUSH
24122: LD_INT 22
24124: PUSH
24125: LD_OWVAR 2
24129: PUSH
24130: EMPTY
24131: LIST
24132: LIST
24133: PUSH
24134: LD_INT 21
24136: PUSH
24137: LD_INT 2
24139: PUSH
24140: EMPTY
24141: LIST
24142: LIST
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: PPUSH
24148: CALL_OW 69
24152: ST_TO_ADDR
// if not tmp then
24153: LD_VAR 0 1
24157: NOT
24158: IFFALSE 24162
// exit ;
24160: GO 24188
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
24162: LD_VAR 0 1
24166: PUSH
24167: LD_INT 1
24169: PPUSH
24170: LD_VAR 0 1
24174: PPUSH
24175: CALL_OW 12
24179: ARRAY
24180: PPUSH
24181: LD_INT 60
24183: PPUSH
24184: CALL_OW 234
// end ;
24188: PPOPN 1
24190: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
24191: LD_EXP 40
24195: PUSH
24196: LD_EXP 70
24200: AND
24201: IFFALSE 24300
24203: GO 24205
24205: DISABLE
24206: LD_INT 0
24208: PPUSH
24209: PPUSH
// begin enable ;
24210: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
24211: LD_ADDR_VAR 0 1
24215: PUSH
24216: LD_INT 22
24218: PUSH
24219: LD_OWVAR 2
24223: PUSH
24224: EMPTY
24225: LIST
24226: LIST
24227: PUSH
24228: LD_INT 61
24230: PUSH
24231: EMPTY
24232: LIST
24233: PUSH
24234: LD_INT 33
24236: PUSH
24237: LD_INT 2
24239: PUSH
24240: EMPTY
24241: LIST
24242: LIST
24243: PUSH
24244: EMPTY
24245: LIST
24246: LIST
24247: LIST
24248: PPUSH
24249: CALL_OW 69
24253: ST_TO_ADDR
// if not tmp then
24254: LD_VAR 0 1
24258: NOT
24259: IFFALSE 24263
// exit ;
24261: GO 24300
// for i in tmp do
24263: LD_ADDR_VAR 0 2
24267: PUSH
24268: LD_VAR 0 1
24272: PUSH
24273: FOR_IN
24274: IFFALSE 24298
// if IsControledBy ( i ) then
24276: LD_VAR 0 2
24280: PPUSH
24281: CALL_OW 312
24285: IFFALSE 24296
// ComUnlink ( i ) ;
24287: LD_VAR 0 2
24291: PPUSH
24292: CALL_OW 136
24296: GO 24273
24298: POP
24299: POP
// end ;
24300: PPOPN 2
24302: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
24303: LD_EXP 40
24307: PUSH
24308: LD_EXP 71
24312: AND
24313: IFFALSE 24453
24315: GO 24317
24317: DISABLE
24318: LD_INT 0
24320: PPUSH
24321: PPUSH
// begin ToLua ( displayPowell(); ) ;
24322: LD_STRING displayPowell();
24324: PPUSH
24325: CALL_OW 559
// uc_side := 0 ;
24329: LD_ADDR_OWVAR 20
24333: PUSH
24334: LD_INT 0
24336: ST_TO_ADDR
// uc_nation := 2 ;
24337: LD_ADDR_OWVAR 21
24341: PUSH
24342: LD_INT 2
24344: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
24345: LD_ADDR_OWVAR 37
24349: PUSH
24350: LD_INT 14
24352: ST_TO_ADDR
// vc_engine := engine_siberite ;
24353: LD_ADDR_OWVAR 39
24357: PUSH
24358: LD_INT 3
24360: ST_TO_ADDR
// vc_control := control_apeman ;
24361: LD_ADDR_OWVAR 38
24365: PUSH
24366: LD_INT 5
24368: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
24369: LD_ADDR_OWVAR 40
24373: PUSH
24374: LD_INT 29
24376: ST_TO_ADDR
// un := CreateVehicle ;
24377: LD_ADDR_VAR 0 2
24381: PUSH
24382: CALL_OW 45
24386: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24387: LD_VAR 0 2
24391: PPUSH
24392: LD_INT 1
24394: PPUSH
24395: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24399: LD_INT 35
24401: PPUSH
24402: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24406: LD_VAR 0 2
24410: PPUSH
24411: LD_INT 22
24413: PUSH
24414: LD_OWVAR 2
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: PPUSH
24423: CALL_OW 69
24427: PPUSH
24428: LD_VAR 0 2
24432: PPUSH
24433: CALL_OW 74
24437: PPUSH
24438: CALL_OW 115
// until IsDead ( un ) ;
24442: LD_VAR 0 2
24446: PPUSH
24447: CALL_OW 301
24451: IFFALSE 24399
// end ;
24453: PPOPN 2
24455: END
// every 0 0$1 trigger StreamModeActive and sStu do
24456: LD_EXP 40
24460: PUSH
24461: LD_EXP 79
24465: AND
24466: IFFALSE 24482
24468: GO 24470
24470: DISABLE
// begin ToLua ( displayStucuk(); ) ;
24471: LD_STRING displayStucuk();
24473: PPUSH
24474: CALL_OW 559
// ResetFog ;
24478: CALL_OW 335
// end ;
24482: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
24483: LD_EXP 40
24487: PUSH
24488: LD_EXP 72
24492: AND
24493: IFFALSE 24634
24495: GO 24497
24497: DISABLE
24498: LD_INT 0
24500: PPUSH
24501: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24502: LD_ADDR_VAR 0 2
24506: PUSH
24507: LD_INT 22
24509: PUSH
24510: LD_OWVAR 2
24514: PUSH
24515: EMPTY
24516: LIST
24517: LIST
24518: PUSH
24519: LD_INT 21
24521: PUSH
24522: LD_INT 1
24524: PUSH
24525: EMPTY
24526: LIST
24527: LIST
24528: PUSH
24529: EMPTY
24530: LIST
24531: LIST
24532: PPUSH
24533: CALL_OW 69
24537: ST_TO_ADDR
// if not tmp then
24538: LD_VAR 0 2
24542: NOT
24543: IFFALSE 24547
// exit ;
24545: GO 24634
// un := tmp [ rand ( 1 , tmp ) ] ;
24547: LD_ADDR_VAR 0 1
24551: PUSH
24552: LD_VAR 0 2
24556: PUSH
24557: LD_INT 1
24559: PPUSH
24560: LD_VAR 0 2
24564: PPUSH
24565: CALL_OW 12
24569: ARRAY
24570: ST_TO_ADDR
// SetSide ( un , 0 ) ;
24571: LD_VAR 0 1
24575: PPUSH
24576: LD_INT 0
24578: PPUSH
24579: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
24583: LD_VAR 0 1
24587: PPUSH
24588: LD_OWVAR 3
24592: PUSH
24593: LD_VAR 0 1
24597: DIFF
24598: PPUSH
24599: LD_VAR 0 1
24603: PPUSH
24604: CALL_OW 74
24608: PPUSH
24609: CALL_OW 115
// wait ( 0 0$20 ) ;
24613: LD_INT 700
24615: PPUSH
24616: CALL_OW 67
// SetSide ( un , your_side ) ;
24620: LD_VAR 0 1
24624: PPUSH
24625: LD_OWVAR 2
24629: PPUSH
24630: CALL_OW 235
// end ;
24634: PPOPN 2
24636: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
24637: LD_EXP 40
24641: PUSH
24642: LD_EXP 73
24646: AND
24647: IFFALSE 24753
24649: GO 24651
24651: DISABLE
24652: LD_INT 0
24654: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24655: LD_ADDR_VAR 0 1
24659: PUSH
24660: LD_INT 22
24662: PUSH
24663: LD_OWVAR 2
24667: PUSH
24668: EMPTY
24669: LIST
24670: LIST
24671: PUSH
24672: LD_INT 2
24674: PUSH
24675: LD_INT 30
24677: PUSH
24678: LD_INT 0
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PUSH
24685: LD_INT 30
24687: PUSH
24688: LD_INT 1
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PUSH
24695: EMPTY
24696: LIST
24697: LIST
24698: LIST
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: PPUSH
24704: CALL_OW 69
24708: ST_TO_ADDR
// if not depot then
24709: LD_VAR 0 1
24713: NOT
24714: IFFALSE 24718
// exit ;
24716: GO 24753
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
24718: LD_VAR 0 1
24722: PUSH
24723: LD_INT 1
24725: ARRAY
24726: PPUSH
24727: CALL_OW 250
24731: PPUSH
24732: LD_VAR 0 1
24736: PUSH
24737: LD_INT 1
24739: ARRAY
24740: PPUSH
24741: CALL_OW 251
24745: PPUSH
24746: LD_INT 70
24748: PPUSH
24749: CALL_OW 495
// end ;
24753: PPOPN 1
24755: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
24756: LD_EXP 40
24760: PUSH
24761: LD_EXP 74
24765: AND
24766: IFFALSE 24977
24768: GO 24770
24770: DISABLE
24771: LD_INT 0
24773: PPUSH
24774: PPUSH
24775: PPUSH
24776: PPUSH
24777: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24778: LD_ADDR_VAR 0 5
24782: PUSH
24783: LD_INT 22
24785: PUSH
24786: LD_OWVAR 2
24790: PUSH
24791: EMPTY
24792: LIST
24793: LIST
24794: PUSH
24795: LD_INT 21
24797: PUSH
24798: LD_INT 1
24800: PUSH
24801: EMPTY
24802: LIST
24803: LIST
24804: PUSH
24805: EMPTY
24806: LIST
24807: LIST
24808: PPUSH
24809: CALL_OW 69
24813: ST_TO_ADDR
// if not tmp then
24814: LD_VAR 0 5
24818: NOT
24819: IFFALSE 24823
// exit ;
24821: GO 24977
// for i in tmp do
24823: LD_ADDR_VAR 0 1
24827: PUSH
24828: LD_VAR 0 5
24832: PUSH
24833: FOR_IN
24834: IFFALSE 24975
// begin d := rand ( 0 , 5 ) ;
24836: LD_ADDR_VAR 0 4
24840: PUSH
24841: LD_INT 0
24843: PPUSH
24844: LD_INT 5
24846: PPUSH
24847: CALL_OW 12
24851: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
24852: LD_ADDR_VAR 0 2
24856: PUSH
24857: LD_VAR 0 1
24861: PPUSH
24862: CALL_OW 250
24866: PPUSH
24867: LD_VAR 0 4
24871: PPUSH
24872: LD_INT 3
24874: PPUSH
24875: LD_INT 12
24877: PPUSH
24878: CALL_OW 12
24882: PPUSH
24883: CALL_OW 272
24887: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
24888: LD_ADDR_VAR 0 3
24892: PUSH
24893: LD_VAR 0 1
24897: PPUSH
24898: CALL_OW 251
24902: PPUSH
24903: LD_VAR 0 4
24907: PPUSH
24908: LD_INT 3
24910: PPUSH
24911: LD_INT 12
24913: PPUSH
24914: CALL_OW 12
24918: PPUSH
24919: CALL_OW 273
24923: ST_TO_ADDR
// if ValidHex ( x , y ) then
24924: LD_VAR 0 2
24928: PPUSH
24929: LD_VAR 0 3
24933: PPUSH
24934: CALL_OW 488
24938: IFFALSE 24973
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
24940: LD_VAR 0 1
24944: PPUSH
24945: LD_VAR 0 2
24949: PPUSH
24950: LD_VAR 0 3
24954: PPUSH
24955: LD_INT 3
24957: PPUSH
24958: LD_INT 6
24960: PPUSH
24961: CALL_OW 12
24965: PPUSH
24966: LD_INT 1
24968: PPUSH
24969: CALL_OW 483
// end ;
24973: GO 24833
24975: POP
24976: POP
// end ;
24977: PPOPN 5
24979: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
24980: LD_EXP 40
24984: PUSH
24985: LD_EXP 75
24989: AND
24990: IFFALSE 25084
24992: GO 24994
24994: DISABLE
24995: LD_INT 0
24997: PPUSH
24998: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
24999: LD_ADDR_VAR 0 2
25003: PUSH
25004: LD_INT 22
25006: PUSH
25007: LD_OWVAR 2
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: PUSH
25016: LD_INT 32
25018: PUSH
25019: LD_INT 1
25021: PUSH
25022: EMPTY
25023: LIST
25024: LIST
25025: PUSH
25026: LD_INT 21
25028: PUSH
25029: LD_INT 2
25031: PUSH
25032: EMPTY
25033: LIST
25034: LIST
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: LIST
25040: PPUSH
25041: CALL_OW 69
25045: ST_TO_ADDR
// if not tmp then
25046: LD_VAR 0 2
25050: NOT
25051: IFFALSE 25055
// exit ;
25053: GO 25084
// for i in tmp do
25055: LD_ADDR_VAR 0 1
25059: PUSH
25060: LD_VAR 0 2
25064: PUSH
25065: FOR_IN
25066: IFFALSE 25082
// SetFuel ( i , 0 ) ;
25068: LD_VAR 0 1
25072: PPUSH
25073: LD_INT 0
25075: PPUSH
25076: CALL_OW 240
25080: GO 25065
25082: POP
25083: POP
// end ;
25084: PPOPN 2
25086: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
25087: LD_EXP 40
25091: PUSH
25092: LD_EXP 76
25096: AND
25097: IFFALSE 25163
25099: GO 25101
25101: DISABLE
25102: LD_INT 0
25104: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25105: LD_ADDR_VAR 0 1
25109: PUSH
25110: LD_INT 22
25112: PUSH
25113: LD_OWVAR 2
25117: PUSH
25118: EMPTY
25119: LIST
25120: LIST
25121: PUSH
25122: LD_INT 30
25124: PUSH
25125: LD_INT 29
25127: PUSH
25128: EMPTY
25129: LIST
25130: LIST
25131: PUSH
25132: EMPTY
25133: LIST
25134: LIST
25135: PPUSH
25136: CALL_OW 69
25140: ST_TO_ADDR
// if not tmp then
25141: LD_VAR 0 1
25145: NOT
25146: IFFALSE 25150
// exit ;
25148: GO 25163
// DestroyUnit ( tmp [ 1 ] ) ;
25150: LD_VAR 0 1
25154: PUSH
25155: LD_INT 1
25157: ARRAY
25158: PPUSH
25159: CALL_OW 65
// end ;
25163: PPOPN 1
25165: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
25166: LD_EXP 40
25170: PUSH
25171: LD_EXP 78
25175: AND
25176: IFFALSE 25305
25178: GO 25180
25180: DISABLE
25181: LD_INT 0
25183: PPUSH
// begin uc_side := 0 ;
25184: LD_ADDR_OWVAR 20
25188: PUSH
25189: LD_INT 0
25191: ST_TO_ADDR
// uc_nation := nation_arabian ;
25192: LD_ADDR_OWVAR 21
25196: PUSH
25197: LD_INT 2
25199: ST_TO_ADDR
// hc_gallery :=  ;
25200: LD_ADDR_OWVAR 33
25204: PUSH
25205: LD_STRING 
25207: ST_TO_ADDR
// hc_name :=  ;
25208: LD_ADDR_OWVAR 26
25212: PUSH
25213: LD_STRING 
25215: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
25216: LD_INT 1
25218: PPUSH
25219: LD_INT 11
25221: PPUSH
25222: LD_INT 10
25224: PPUSH
25225: CALL_OW 380
// un := CreateHuman ;
25229: LD_ADDR_VAR 0 1
25233: PUSH
25234: CALL_OW 44
25238: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25239: LD_VAR 0 1
25243: PPUSH
25244: LD_INT 1
25246: PPUSH
25247: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25251: LD_INT 35
25253: PPUSH
25254: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25258: LD_VAR 0 1
25262: PPUSH
25263: LD_INT 22
25265: PUSH
25266: LD_OWVAR 2
25270: PUSH
25271: EMPTY
25272: LIST
25273: LIST
25274: PPUSH
25275: CALL_OW 69
25279: PPUSH
25280: LD_VAR 0 1
25284: PPUSH
25285: CALL_OW 74
25289: PPUSH
25290: CALL_OW 115
// until IsDead ( un ) ;
25294: LD_VAR 0 1
25298: PPUSH
25299: CALL_OW 301
25303: IFFALSE 25251
// end ;
25305: PPOPN 1
25307: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
25308: LD_EXP 40
25312: PUSH
25313: LD_EXP 80
25317: AND
25318: IFFALSE 25330
25320: GO 25322
25322: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
25323: LD_STRING earthquake(getX(game), 0, 32)
25325: PPUSH
25326: CALL_OW 559
25330: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
25331: LD_EXP 40
25335: PUSH
25336: LD_EXP 81
25340: AND
25341: IFFALSE 25432
25343: GO 25345
25345: DISABLE
25346: LD_INT 0
25348: PPUSH
// begin enable ;
25349: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
25350: LD_ADDR_VAR 0 1
25354: PUSH
25355: LD_INT 22
25357: PUSH
25358: LD_OWVAR 2
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: PUSH
25367: LD_INT 21
25369: PUSH
25370: LD_INT 2
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: PUSH
25377: LD_INT 33
25379: PUSH
25380: LD_INT 3
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: PUSH
25387: EMPTY
25388: LIST
25389: LIST
25390: LIST
25391: PPUSH
25392: CALL_OW 69
25396: ST_TO_ADDR
// if not tmp then
25397: LD_VAR 0 1
25401: NOT
25402: IFFALSE 25406
// exit ;
25404: GO 25432
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25406: LD_VAR 0 1
25410: PUSH
25411: LD_INT 1
25413: PPUSH
25414: LD_VAR 0 1
25418: PPUSH
25419: CALL_OW 12
25423: ARRAY
25424: PPUSH
25425: LD_INT 1
25427: PPUSH
25428: CALL_OW 234
// end ;
25432: PPOPN 1
25434: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
25435: LD_EXP 40
25439: PUSH
25440: LD_EXP 82
25444: AND
25445: IFFALSE 25586
25447: GO 25449
25449: DISABLE
25450: LD_INT 0
25452: PPUSH
25453: PPUSH
25454: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25455: LD_ADDR_VAR 0 3
25459: PUSH
25460: LD_INT 22
25462: PUSH
25463: LD_OWVAR 2
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: PUSH
25472: LD_INT 25
25474: PUSH
25475: LD_INT 1
25477: PUSH
25478: EMPTY
25479: LIST
25480: LIST
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: PPUSH
25486: CALL_OW 69
25490: ST_TO_ADDR
// if not tmp then
25491: LD_VAR 0 3
25495: NOT
25496: IFFALSE 25500
// exit ;
25498: GO 25586
// un := tmp [ rand ( 1 , tmp ) ] ;
25500: LD_ADDR_VAR 0 2
25504: PUSH
25505: LD_VAR 0 3
25509: PUSH
25510: LD_INT 1
25512: PPUSH
25513: LD_VAR 0 3
25517: PPUSH
25518: CALL_OW 12
25522: ARRAY
25523: ST_TO_ADDR
// if Crawls ( un ) then
25524: LD_VAR 0 2
25528: PPUSH
25529: CALL_OW 318
25533: IFFALSE 25544
// ComWalk ( un ) ;
25535: LD_VAR 0 2
25539: PPUSH
25540: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
25544: LD_VAR 0 2
25548: PPUSH
25549: LD_INT 9
25551: PPUSH
25552: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
25556: LD_INT 28
25558: PPUSH
25559: LD_OWVAR 2
25563: PPUSH
25564: LD_INT 2
25566: PPUSH
25567: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
25571: LD_INT 29
25573: PPUSH
25574: LD_OWVAR 2
25578: PPUSH
25579: LD_INT 2
25581: PPUSH
25582: CALL_OW 322
// end ;
25586: PPOPN 3
25588: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
25589: LD_EXP 40
25593: PUSH
25594: LD_EXP 83
25598: AND
25599: IFFALSE 25710
25601: GO 25603
25603: DISABLE
25604: LD_INT 0
25606: PPUSH
25607: PPUSH
25608: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25609: LD_ADDR_VAR 0 3
25613: PUSH
25614: LD_INT 22
25616: PUSH
25617: LD_OWVAR 2
25621: PUSH
25622: EMPTY
25623: LIST
25624: LIST
25625: PUSH
25626: LD_INT 25
25628: PUSH
25629: LD_INT 1
25631: PUSH
25632: EMPTY
25633: LIST
25634: LIST
25635: PUSH
25636: EMPTY
25637: LIST
25638: LIST
25639: PPUSH
25640: CALL_OW 69
25644: ST_TO_ADDR
// if not tmp then
25645: LD_VAR 0 3
25649: NOT
25650: IFFALSE 25654
// exit ;
25652: GO 25710
// un := tmp [ rand ( 1 , tmp ) ] ;
25654: LD_ADDR_VAR 0 2
25658: PUSH
25659: LD_VAR 0 3
25663: PUSH
25664: LD_INT 1
25666: PPUSH
25667: LD_VAR 0 3
25671: PPUSH
25672: CALL_OW 12
25676: ARRAY
25677: ST_TO_ADDR
// if Crawls ( un ) then
25678: LD_VAR 0 2
25682: PPUSH
25683: CALL_OW 318
25687: IFFALSE 25698
// ComWalk ( un ) ;
25689: LD_VAR 0 2
25693: PPUSH
25694: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25698: LD_VAR 0 2
25702: PPUSH
25703: LD_INT 8
25705: PPUSH
25706: CALL_OW 336
// end ;
25710: PPOPN 3
25712: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
25713: LD_EXP 40
25717: PUSH
25718: LD_EXP 84
25722: AND
25723: IFFALSE 25867
25725: GO 25727
25727: DISABLE
25728: LD_INT 0
25730: PPUSH
25731: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
25732: LD_ADDR_VAR 0 2
25736: PUSH
25737: LD_INT 22
25739: PUSH
25740: LD_OWVAR 2
25744: PUSH
25745: EMPTY
25746: LIST
25747: LIST
25748: PUSH
25749: LD_INT 21
25751: PUSH
25752: LD_INT 2
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: PUSH
25759: LD_INT 2
25761: PUSH
25762: LD_INT 34
25764: PUSH
25765: LD_INT 12
25767: PUSH
25768: EMPTY
25769: LIST
25770: LIST
25771: PUSH
25772: LD_INT 34
25774: PUSH
25775: LD_INT 51
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: PUSH
25782: LD_INT 34
25784: PUSH
25785: LD_INT 32
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: PUSH
25792: EMPTY
25793: LIST
25794: LIST
25795: LIST
25796: LIST
25797: PUSH
25798: EMPTY
25799: LIST
25800: LIST
25801: LIST
25802: PPUSH
25803: CALL_OW 69
25807: ST_TO_ADDR
// if not tmp then
25808: LD_VAR 0 2
25812: NOT
25813: IFFALSE 25817
// exit ;
25815: GO 25867
// for i in tmp do
25817: LD_ADDR_VAR 0 1
25821: PUSH
25822: LD_VAR 0 2
25826: PUSH
25827: FOR_IN
25828: IFFALSE 25865
// if GetCargo ( i , mat_artifact ) = 0 then
25830: LD_VAR 0 1
25834: PPUSH
25835: LD_INT 4
25837: PPUSH
25838: CALL_OW 289
25842: PUSH
25843: LD_INT 0
25845: EQUAL
25846: IFFALSE 25863
// SetCargo ( i , mat_siberit , 100 ) ;
25848: LD_VAR 0 1
25852: PPUSH
25853: LD_INT 3
25855: PPUSH
25856: LD_INT 100
25858: PPUSH
25859: CALL_OW 290
25863: GO 25827
25865: POP
25866: POP
// end ;
25867: PPOPN 2
25869: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
25870: LD_EXP 40
25874: PUSH
25875: LD_EXP 85
25879: AND
25880: IFFALSE 26063
25882: GO 25884
25884: DISABLE
25885: LD_INT 0
25887: PPUSH
25888: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25889: LD_ADDR_VAR 0 2
25893: PUSH
25894: LD_INT 22
25896: PUSH
25897: LD_OWVAR 2
25901: PUSH
25902: EMPTY
25903: LIST
25904: LIST
25905: PPUSH
25906: CALL_OW 69
25910: ST_TO_ADDR
// if not tmp then
25911: LD_VAR 0 2
25915: NOT
25916: IFFALSE 25920
// exit ;
25918: GO 26063
// for i := 1 to 2 do
25920: LD_ADDR_VAR 0 1
25924: PUSH
25925: DOUBLE
25926: LD_INT 1
25928: DEC
25929: ST_TO_ADDR
25930: LD_INT 2
25932: PUSH
25933: FOR_TO
25934: IFFALSE 26061
// begin uc_side := your_side ;
25936: LD_ADDR_OWVAR 20
25940: PUSH
25941: LD_OWVAR 2
25945: ST_TO_ADDR
// uc_nation := nation_american ;
25946: LD_ADDR_OWVAR 21
25950: PUSH
25951: LD_INT 1
25953: ST_TO_ADDR
// vc_chassis := us_morphling ;
25954: LD_ADDR_OWVAR 37
25958: PUSH
25959: LD_INT 5
25961: ST_TO_ADDR
// vc_engine := engine_siberite ;
25962: LD_ADDR_OWVAR 39
25966: PUSH
25967: LD_INT 3
25969: ST_TO_ADDR
// vc_control := control_computer ;
25970: LD_ADDR_OWVAR 38
25974: PUSH
25975: LD_INT 3
25977: ST_TO_ADDR
// vc_weapon := us_double_laser ;
25978: LD_ADDR_OWVAR 40
25982: PUSH
25983: LD_INT 10
25985: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
25986: LD_VAR 0 2
25990: PUSH
25991: LD_INT 1
25993: ARRAY
25994: PPUSH
25995: CALL_OW 310
25999: NOT
26000: IFFALSE 26047
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
26002: CALL_OW 45
26006: PPUSH
26007: LD_VAR 0 2
26011: PUSH
26012: LD_INT 1
26014: ARRAY
26015: PPUSH
26016: CALL_OW 250
26020: PPUSH
26021: LD_VAR 0 2
26025: PUSH
26026: LD_INT 1
26028: ARRAY
26029: PPUSH
26030: CALL_OW 251
26034: PPUSH
26035: LD_INT 12
26037: PPUSH
26038: LD_INT 1
26040: PPUSH
26041: CALL_OW 50
26045: GO 26059
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
26047: CALL_OW 45
26051: PPUSH
26052: LD_INT 1
26054: PPUSH
26055: CALL_OW 51
// end ;
26059: GO 25933
26061: POP
26062: POP
// end ;
26063: PPOPN 2
26065: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
26066: LD_EXP 40
26070: PUSH
26071: LD_EXP 86
26075: AND
26076: IFFALSE 26298
26078: GO 26080
26080: DISABLE
26081: LD_INT 0
26083: PPUSH
26084: PPUSH
26085: PPUSH
26086: PPUSH
26087: PPUSH
26088: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26089: LD_ADDR_VAR 0 6
26093: PUSH
26094: LD_INT 22
26096: PUSH
26097: LD_OWVAR 2
26101: PUSH
26102: EMPTY
26103: LIST
26104: LIST
26105: PUSH
26106: LD_INT 21
26108: PUSH
26109: LD_INT 1
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: PUSH
26116: LD_INT 3
26118: PUSH
26119: LD_INT 23
26121: PUSH
26122: LD_INT 0
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: PUSH
26133: EMPTY
26134: LIST
26135: LIST
26136: LIST
26137: PPUSH
26138: CALL_OW 69
26142: ST_TO_ADDR
// if not tmp then
26143: LD_VAR 0 6
26147: NOT
26148: IFFALSE 26152
// exit ;
26150: GO 26298
// s1 := rand ( 1 , 4 ) ;
26152: LD_ADDR_VAR 0 2
26156: PUSH
26157: LD_INT 1
26159: PPUSH
26160: LD_INT 4
26162: PPUSH
26163: CALL_OW 12
26167: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
26168: LD_ADDR_VAR 0 4
26172: PUSH
26173: LD_VAR 0 6
26177: PUSH
26178: LD_INT 1
26180: ARRAY
26181: PPUSH
26182: LD_VAR 0 2
26186: PPUSH
26187: CALL_OW 259
26191: ST_TO_ADDR
// if s1 = 1 then
26192: LD_VAR 0 2
26196: PUSH
26197: LD_INT 1
26199: EQUAL
26200: IFFALSE 26220
// s2 := rand ( 2 , 4 ) else
26202: LD_ADDR_VAR 0 3
26206: PUSH
26207: LD_INT 2
26209: PPUSH
26210: LD_INT 4
26212: PPUSH
26213: CALL_OW 12
26217: ST_TO_ADDR
26218: GO 26228
// s2 := 1 ;
26220: LD_ADDR_VAR 0 3
26224: PUSH
26225: LD_INT 1
26227: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
26228: LD_ADDR_VAR 0 5
26232: PUSH
26233: LD_VAR 0 6
26237: PUSH
26238: LD_INT 1
26240: ARRAY
26241: PPUSH
26242: LD_VAR 0 3
26246: PPUSH
26247: CALL_OW 259
26251: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
26252: LD_VAR 0 6
26256: PUSH
26257: LD_INT 1
26259: ARRAY
26260: PPUSH
26261: LD_VAR 0 2
26265: PPUSH
26266: LD_VAR 0 5
26270: PPUSH
26271: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
26275: LD_VAR 0 6
26279: PUSH
26280: LD_INT 1
26282: ARRAY
26283: PPUSH
26284: LD_VAR 0 3
26288: PPUSH
26289: LD_VAR 0 4
26293: PPUSH
26294: CALL_OW 237
// end ;
26298: PPOPN 6
26300: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
26301: LD_EXP 40
26305: PUSH
26306: LD_EXP 87
26310: AND
26311: IFFALSE 26390
26313: GO 26315
26315: DISABLE
26316: LD_INT 0
26318: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
26319: LD_ADDR_VAR 0 1
26323: PUSH
26324: LD_INT 22
26326: PUSH
26327: LD_OWVAR 2
26331: PUSH
26332: EMPTY
26333: LIST
26334: LIST
26335: PUSH
26336: LD_INT 30
26338: PUSH
26339: LD_INT 3
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: PPUSH
26350: CALL_OW 69
26354: ST_TO_ADDR
// if not tmp then
26355: LD_VAR 0 1
26359: NOT
26360: IFFALSE 26364
// exit ;
26362: GO 26390
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26364: LD_VAR 0 1
26368: PUSH
26369: LD_INT 1
26371: PPUSH
26372: LD_VAR 0 1
26376: PPUSH
26377: CALL_OW 12
26381: ARRAY
26382: PPUSH
26383: LD_INT 1
26385: PPUSH
26386: CALL_OW 234
// end ;
26390: PPOPN 1
26392: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
26393: LD_EXP 40
26397: PUSH
26398: LD_EXP 88
26402: AND
26403: IFFALSE 26515
26405: GO 26407
26407: DISABLE
26408: LD_INT 0
26410: PPUSH
26411: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
26412: LD_ADDR_VAR 0 2
26416: PUSH
26417: LD_INT 22
26419: PUSH
26420: LD_OWVAR 2
26424: PUSH
26425: EMPTY
26426: LIST
26427: LIST
26428: PUSH
26429: LD_INT 2
26431: PUSH
26432: LD_INT 30
26434: PUSH
26435: LD_INT 27
26437: PUSH
26438: EMPTY
26439: LIST
26440: LIST
26441: PUSH
26442: LD_INT 30
26444: PUSH
26445: LD_INT 26
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: PUSH
26452: LD_INT 30
26454: PUSH
26455: LD_INT 28
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: PPUSH
26472: CALL_OW 69
26476: ST_TO_ADDR
// if not tmp then
26477: LD_VAR 0 2
26481: NOT
26482: IFFALSE 26486
// exit ;
26484: GO 26515
// for i in tmp do
26486: LD_ADDR_VAR 0 1
26490: PUSH
26491: LD_VAR 0 2
26495: PUSH
26496: FOR_IN
26497: IFFALSE 26513
// SetLives ( i , 1 ) ;
26499: LD_VAR 0 1
26503: PPUSH
26504: LD_INT 1
26506: PPUSH
26507: CALL_OW 234
26511: GO 26496
26513: POP
26514: POP
// end ;
26515: PPOPN 2
26517: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
26518: LD_EXP 40
26522: PUSH
26523: LD_EXP 89
26527: AND
26528: IFFALSE 26815
26530: GO 26532
26532: DISABLE
26533: LD_INT 0
26535: PPUSH
26536: PPUSH
26537: PPUSH
// begin i := rand ( 1 , 7 ) ;
26538: LD_ADDR_VAR 0 1
26542: PUSH
26543: LD_INT 1
26545: PPUSH
26546: LD_INT 7
26548: PPUSH
26549: CALL_OW 12
26553: ST_TO_ADDR
// case i of 1 :
26554: LD_VAR 0 1
26558: PUSH
26559: LD_INT 1
26561: DOUBLE
26562: EQUAL
26563: IFTRUE 26567
26565: GO 26577
26567: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
26568: LD_STRING earthquake(getX(game), 0, 32)
26570: PPUSH
26571: CALL_OW 559
26575: GO 26815
26577: LD_INT 2
26579: DOUBLE
26580: EQUAL
26581: IFTRUE 26585
26583: GO 26599
26585: POP
// begin ToLua ( displayStucuk(); ) ;
26586: LD_STRING displayStucuk();
26588: PPUSH
26589: CALL_OW 559
// ResetFog ;
26593: CALL_OW 335
// end ; 3 :
26597: GO 26815
26599: LD_INT 3
26601: DOUBLE
26602: EQUAL
26603: IFTRUE 26607
26605: GO 26711
26607: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26608: LD_ADDR_VAR 0 2
26612: PUSH
26613: LD_INT 22
26615: PUSH
26616: LD_OWVAR 2
26620: PUSH
26621: EMPTY
26622: LIST
26623: LIST
26624: PUSH
26625: LD_INT 25
26627: PUSH
26628: LD_INT 1
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: PPUSH
26639: CALL_OW 69
26643: ST_TO_ADDR
// if not tmp then
26644: LD_VAR 0 2
26648: NOT
26649: IFFALSE 26653
// exit ;
26651: GO 26815
// un := tmp [ rand ( 1 , tmp ) ] ;
26653: LD_ADDR_VAR 0 3
26657: PUSH
26658: LD_VAR 0 2
26662: PUSH
26663: LD_INT 1
26665: PPUSH
26666: LD_VAR 0 2
26670: PPUSH
26671: CALL_OW 12
26675: ARRAY
26676: ST_TO_ADDR
// if Crawls ( un ) then
26677: LD_VAR 0 3
26681: PPUSH
26682: CALL_OW 318
26686: IFFALSE 26697
// ComWalk ( un ) ;
26688: LD_VAR 0 3
26692: PPUSH
26693: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26697: LD_VAR 0 3
26701: PPUSH
26702: LD_INT 8
26704: PPUSH
26705: CALL_OW 336
// end ; 4 :
26709: GO 26815
26711: LD_INT 4
26713: DOUBLE
26714: EQUAL
26715: IFTRUE 26719
26717: GO 26793
26719: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26720: LD_ADDR_VAR 0 2
26724: PUSH
26725: LD_INT 22
26727: PUSH
26728: LD_OWVAR 2
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: PUSH
26737: LD_INT 30
26739: PUSH
26740: LD_INT 29
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: PUSH
26747: EMPTY
26748: LIST
26749: LIST
26750: PPUSH
26751: CALL_OW 69
26755: ST_TO_ADDR
// if not tmp then
26756: LD_VAR 0 2
26760: NOT
26761: IFFALSE 26765
// exit ;
26763: GO 26815
// CenterNowOnUnits ( tmp [ 1 ] ) ;
26765: LD_VAR 0 2
26769: PUSH
26770: LD_INT 1
26772: ARRAY
26773: PPUSH
26774: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
26778: LD_VAR 0 2
26782: PUSH
26783: LD_INT 1
26785: ARRAY
26786: PPUSH
26787: CALL_OW 65
// end ; 5 .. 7 :
26791: GO 26815
26793: LD_INT 5
26795: DOUBLE
26796: GREATEREQUAL
26797: IFFALSE 26805
26799: LD_INT 7
26801: DOUBLE
26802: LESSEQUAL
26803: IFTRUE 26807
26805: GO 26814
26807: POP
// StreamSibBomb ; end ;
26808: CALL 23052 0 0
26812: GO 26815
26814: POP
// end ;
26815: PPOPN 3
26817: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
26818: LD_EXP 40
26822: PUSH
26823: LD_EXP 90
26827: AND
26828: IFFALSE 26984
26830: GO 26832
26832: DISABLE
26833: LD_INT 0
26835: PPUSH
26836: PPUSH
26837: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
26838: LD_ADDR_VAR 0 2
26842: PUSH
26843: LD_INT 81
26845: PUSH
26846: LD_OWVAR 2
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: PUSH
26855: LD_INT 2
26857: PUSH
26858: LD_INT 21
26860: PUSH
26861: LD_INT 1
26863: PUSH
26864: EMPTY
26865: LIST
26866: LIST
26867: PUSH
26868: LD_INT 21
26870: PUSH
26871: LD_INT 2
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: PUSH
26878: EMPTY
26879: LIST
26880: LIST
26881: LIST
26882: PUSH
26883: EMPTY
26884: LIST
26885: LIST
26886: PPUSH
26887: CALL_OW 69
26891: ST_TO_ADDR
// if not tmp then
26892: LD_VAR 0 2
26896: NOT
26897: IFFALSE 26901
// exit ;
26899: GO 26984
// p := 0 ;
26901: LD_ADDR_VAR 0 3
26905: PUSH
26906: LD_INT 0
26908: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26909: LD_INT 35
26911: PPUSH
26912: CALL_OW 67
// p := p + 1 ;
26916: LD_ADDR_VAR 0 3
26920: PUSH
26921: LD_VAR 0 3
26925: PUSH
26926: LD_INT 1
26928: PLUS
26929: ST_TO_ADDR
// for i in tmp do
26930: LD_ADDR_VAR 0 1
26934: PUSH
26935: LD_VAR 0 2
26939: PUSH
26940: FOR_IN
26941: IFFALSE 26972
// if GetLives ( i ) < 1000 then
26943: LD_VAR 0 1
26947: PPUSH
26948: CALL_OW 256
26952: PUSH
26953: LD_INT 1000
26955: LESS
26956: IFFALSE 26970
// SetLives ( i , 1000 ) ;
26958: LD_VAR 0 1
26962: PPUSH
26963: LD_INT 1000
26965: PPUSH
26966: CALL_OW 234
26970: GO 26940
26972: POP
26973: POP
// until p > 20 ;
26974: LD_VAR 0 3
26978: PUSH
26979: LD_INT 20
26981: GREATER
26982: IFFALSE 26909
// end ;
26984: PPOPN 3
26986: END
// every 0 0$1 trigger StreamModeActive and sTime do
26987: LD_EXP 40
26991: PUSH
26992: LD_EXP 91
26996: AND
26997: IFFALSE 27032
26999: GO 27001
27001: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
27002: LD_INT 28
27004: PPUSH
27005: LD_OWVAR 2
27009: PPUSH
27010: LD_INT 2
27012: PPUSH
27013: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
27017: LD_INT 30
27019: PPUSH
27020: LD_OWVAR 2
27024: PPUSH
27025: LD_INT 2
27027: PPUSH
27028: CALL_OW 322
// end ;
27032: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
27033: LD_EXP 40
27037: PUSH
27038: LD_EXP 92
27042: AND
27043: IFFALSE 27164
27045: GO 27047
27047: DISABLE
27048: LD_INT 0
27050: PPUSH
27051: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27052: LD_ADDR_VAR 0 2
27056: PUSH
27057: LD_INT 22
27059: PUSH
27060: LD_OWVAR 2
27064: PUSH
27065: EMPTY
27066: LIST
27067: LIST
27068: PUSH
27069: LD_INT 21
27071: PUSH
27072: LD_INT 1
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: PUSH
27079: LD_INT 3
27081: PUSH
27082: LD_INT 23
27084: PUSH
27085: LD_INT 0
27087: PUSH
27088: EMPTY
27089: LIST
27090: LIST
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: LIST
27100: PPUSH
27101: CALL_OW 69
27105: ST_TO_ADDR
// if not tmp then
27106: LD_VAR 0 2
27110: NOT
27111: IFFALSE 27115
// exit ;
27113: GO 27164
// for i in tmp do
27115: LD_ADDR_VAR 0 1
27119: PUSH
27120: LD_VAR 0 2
27124: PUSH
27125: FOR_IN
27126: IFFALSE 27162
// begin if Crawls ( i ) then
27128: LD_VAR 0 1
27132: PPUSH
27133: CALL_OW 318
27137: IFFALSE 27148
// ComWalk ( i ) ;
27139: LD_VAR 0 1
27143: PPUSH
27144: CALL_OW 138
// SetClass ( i , 2 ) ;
27148: LD_VAR 0 1
27152: PPUSH
27153: LD_INT 2
27155: PPUSH
27156: CALL_OW 336
// end ;
27160: GO 27125
27162: POP
27163: POP
// end ;
27164: PPOPN 2
27166: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
27167: LD_EXP 40
27171: PUSH
27172: LD_EXP 93
27176: AND
27177: IFFALSE 27465
27179: GO 27181
27181: DISABLE
27182: LD_INT 0
27184: PPUSH
27185: PPUSH
27186: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
27187: LD_OWVAR 2
27191: PPUSH
27192: LD_INT 9
27194: PPUSH
27195: LD_INT 1
27197: PPUSH
27198: LD_INT 1
27200: PPUSH
27201: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
27205: LD_INT 9
27207: PPUSH
27208: LD_OWVAR 2
27212: PPUSH
27213: CALL_OW 343
// uc_side := 9 ;
27217: LD_ADDR_OWVAR 20
27221: PUSH
27222: LD_INT 9
27224: ST_TO_ADDR
// uc_nation := 2 ;
27225: LD_ADDR_OWVAR 21
27229: PUSH
27230: LD_INT 2
27232: ST_TO_ADDR
// hc_name := Dark Warrior ;
27233: LD_ADDR_OWVAR 26
27237: PUSH
27238: LD_STRING Dark Warrior
27240: ST_TO_ADDR
// hc_gallery :=  ;
27241: LD_ADDR_OWVAR 33
27245: PUSH
27246: LD_STRING 
27248: ST_TO_ADDR
// hc_noskilllimit := true ;
27249: LD_ADDR_OWVAR 76
27253: PUSH
27254: LD_INT 1
27256: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
27257: LD_ADDR_OWVAR 31
27261: PUSH
27262: LD_INT 30
27264: PUSH
27265: LD_INT 30
27267: PUSH
27268: LD_INT 30
27270: PUSH
27271: LD_INT 30
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: LIST
27278: LIST
27279: ST_TO_ADDR
// un := CreateHuman ;
27280: LD_ADDR_VAR 0 3
27284: PUSH
27285: CALL_OW 44
27289: ST_TO_ADDR
// hc_noskilllimit := false ;
27290: LD_ADDR_OWVAR 76
27294: PUSH
27295: LD_INT 0
27297: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27298: LD_VAR 0 3
27302: PPUSH
27303: LD_INT 1
27305: PPUSH
27306: CALL_OW 51
// ToLua ( playRanger() ) ;
27310: LD_STRING playRanger()
27312: PPUSH
27313: CALL_OW 559
// p := 0 ;
27317: LD_ADDR_VAR 0 2
27321: PUSH
27322: LD_INT 0
27324: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27325: LD_INT 35
27327: PPUSH
27328: CALL_OW 67
// p := p + 1 ;
27332: LD_ADDR_VAR 0 2
27336: PUSH
27337: LD_VAR 0 2
27341: PUSH
27342: LD_INT 1
27344: PLUS
27345: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
27346: LD_VAR 0 3
27350: PPUSH
27351: CALL_OW 256
27355: PUSH
27356: LD_INT 1000
27358: LESS
27359: IFFALSE 27373
// SetLives ( un , 1000 ) ;
27361: LD_VAR 0 3
27365: PPUSH
27366: LD_INT 1000
27368: PPUSH
27369: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
27373: LD_VAR 0 3
27377: PPUSH
27378: LD_INT 81
27380: PUSH
27381: LD_OWVAR 2
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: PUSH
27390: LD_INT 91
27392: PUSH
27393: LD_VAR 0 3
27397: PUSH
27398: LD_INT 30
27400: PUSH
27401: EMPTY
27402: LIST
27403: LIST
27404: LIST
27405: PUSH
27406: EMPTY
27407: LIST
27408: LIST
27409: PPUSH
27410: CALL_OW 69
27414: PPUSH
27415: LD_VAR 0 3
27419: PPUSH
27420: CALL_OW 74
27424: PPUSH
27425: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
27429: LD_VAR 0 2
27433: PUSH
27434: LD_INT 80
27436: GREATER
27437: PUSH
27438: LD_VAR 0 3
27442: PPUSH
27443: CALL_OW 301
27447: OR
27448: IFFALSE 27325
// if un then
27450: LD_VAR 0 3
27454: IFFALSE 27465
// RemoveUnit ( un ) ;
27456: LD_VAR 0 3
27460: PPUSH
27461: CALL_OW 64
// end ;
27465: PPOPN 3
27467: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
27468: LD_EXP 94
27472: IFFALSE 27588
27474: GO 27476
27476: DISABLE
27477: LD_INT 0
27479: PPUSH
27480: PPUSH
27481: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27482: LD_ADDR_VAR 0 2
27486: PUSH
27487: LD_INT 81
27489: PUSH
27490: LD_OWVAR 2
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PUSH
27499: LD_INT 21
27501: PUSH
27502: LD_INT 1
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: PUSH
27509: EMPTY
27510: LIST
27511: LIST
27512: PPUSH
27513: CALL_OW 69
27517: ST_TO_ADDR
// ToLua ( playComputer() ) ;
27518: LD_STRING playComputer()
27520: PPUSH
27521: CALL_OW 559
// if not tmp then
27525: LD_VAR 0 2
27529: NOT
27530: IFFALSE 27534
// exit ;
27532: GO 27588
// for i in tmp do
27534: LD_ADDR_VAR 0 1
27538: PUSH
27539: LD_VAR 0 2
27543: PUSH
27544: FOR_IN
27545: IFFALSE 27586
// for j := 1 to 4 do
27547: LD_ADDR_VAR 0 3
27551: PUSH
27552: DOUBLE
27553: LD_INT 1
27555: DEC
27556: ST_TO_ADDR
27557: LD_INT 4
27559: PUSH
27560: FOR_TO
27561: IFFALSE 27582
// SetSkill ( i , j , 10 ) ;
27563: LD_VAR 0 1
27567: PPUSH
27568: LD_VAR 0 3
27572: PPUSH
27573: LD_INT 10
27575: PPUSH
27576: CALL_OW 237
27580: GO 27560
27582: POP
27583: POP
27584: GO 27544
27586: POP
27587: POP
// end ;
27588: PPOPN 3
27590: END
// every 0 0$1 trigger s30 do var i , tmp ;
27591: LD_EXP 95
27595: IFFALSE 27664
27597: GO 27599
27599: DISABLE
27600: LD_INT 0
27602: PPUSH
27603: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27604: LD_ADDR_VAR 0 2
27608: PUSH
27609: LD_INT 22
27611: PUSH
27612: LD_OWVAR 2
27616: PUSH
27617: EMPTY
27618: LIST
27619: LIST
27620: PPUSH
27621: CALL_OW 69
27625: ST_TO_ADDR
// if not tmp then
27626: LD_VAR 0 2
27630: NOT
27631: IFFALSE 27635
// exit ;
27633: GO 27664
// for i in tmp do
27635: LD_ADDR_VAR 0 1
27639: PUSH
27640: LD_VAR 0 2
27644: PUSH
27645: FOR_IN
27646: IFFALSE 27662
// SetLives ( i , 300 ) ;
27648: LD_VAR 0 1
27652: PPUSH
27653: LD_INT 300
27655: PPUSH
27656: CALL_OW 234
27660: GO 27645
27662: POP
27663: POP
// end ;
27664: PPOPN 2
27666: END
// every 0 0$1 trigger s60 do var i , tmp ;
27667: LD_EXP 96
27671: IFFALSE 27740
27673: GO 27675
27675: DISABLE
27676: LD_INT 0
27678: PPUSH
27679: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27680: LD_ADDR_VAR 0 2
27684: PUSH
27685: LD_INT 22
27687: PUSH
27688: LD_OWVAR 2
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: PPUSH
27697: CALL_OW 69
27701: ST_TO_ADDR
// if not tmp then
27702: LD_VAR 0 2
27706: NOT
27707: IFFALSE 27711
// exit ;
27709: GO 27740
// for i in tmp do
27711: LD_ADDR_VAR 0 1
27715: PUSH
27716: LD_VAR 0 2
27720: PUSH
27721: FOR_IN
27722: IFFALSE 27738
// SetLives ( i , 600 ) ;
27724: LD_VAR 0 1
27728: PPUSH
27729: LD_INT 600
27731: PPUSH
27732: CALL_OW 234
27736: GO 27721
27738: POP
27739: POP
// end ;
27740: PPOPN 2
27742: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
27743: LD_INT 0
27745: PPUSH
// case cmd of 301 :
27746: LD_VAR 0 1
27750: PUSH
27751: LD_INT 301
27753: DOUBLE
27754: EQUAL
27755: IFTRUE 27759
27757: GO 27791
27759: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
27760: LD_VAR 0 6
27764: PPUSH
27765: LD_VAR 0 7
27769: PPUSH
27770: LD_VAR 0 8
27774: PPUSH
27775: LD_VAR 0 4
27779: PPUSH
27780: LD_VAR 0 5
27784: PPUSH
27785: CALL 28992 0 5
27789: GO 27912
27791: LD_INT 302
27793: DOUBLE
27794: EQUAL
27795: IFTRUE 27799
27797: GO 27836
27799: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
27800: LD_VAR 0 6
27804: PPUSH
27805: LD_VAR 0 7
27809: PPUSH
27810: LD_VAR 0 8
27814: PPUSH
27815: LD_VAR 0 9
27819: PPUSH
27820: LD_VAR 0 4
27824: PPUSH
27825: LD_VAR 0 5
27829: PPUSH
27830: CALL 29083 0 6
27834: GO 27912
27836: LD_INT 303
27838: DOUBLE
27839: EQUAL
27840: IFTRUE 27844
27842: GO 27881
27844: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
27845: LD_VAR 0 6
27849: PPUSH
27850: LD_VAR 0 7
27854: PPUSH
27855: LD_VAR 0 8
27859: PPUSH
27860: LD_VAR 0 9
27864: PPUSH
27865: LD_VAR 0 4
27869: PPUSH
27870: LD_VAR 0 5
27874: PPUSH
27875: CALL 27917 0 6
27879: GO 27912
27881: LD_INT 304
27883: DOUBLE
27884: EQUAL
27885: IFTRUE 27889
27887: GO 27911
27889: POP
// hHackTeleport ( unit , x , y ) ; end ;
27890: LD_VAR 0 2
27894: PPUSH
27895: LD_VAR 0 4
27899: PPUSH
27900: LD_VAR 0 5
27904: PPUSH
27905: CALL 29676 0 3
27909: GO 27912
27911: POP
// end ;
27912: LD_VAR 0 12
27916: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
27917: LD_INT 0
27919: PPUSH
27920: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
27921: LD_VAR 0 1
27925: PUSH
27926: LD_INT 1
27928: LESS
27929: PUSH
27930: LD_VAR 0 1
27934: PUSH
27935: LD_INT 3
27937: GREATER
27938: OR
27939: PUSH
27940: LD_VAR 0 5
27944: PPUSH
27945: LD_VAR 0 6
27949: PPUSH
27950: CALL_OW 428
27954: OR
27955: IFFALSE 27959
// exit ;
27957: GO 28679
// uc_side := your_side ;
27959: LD_ADDR_OWVAR 20
27963: PUSH
27964: LD_OWVAR 2
27968: ST_TO_ADDR
// uc_nation := nation ;
27969: LD_ADDR_OWVAR 21
27973: PUSH
27974: LD_VAR 0 1
27978: ST_TO_ADDR
// bc_level = 1 ;
27979: LD_ADDR_OWVAR 43
27983: PUSH
27984: LD_INT 1
27986: ST_TO_ADDR
// case btype of 1 :
27987: LD_VAR 0 2
27991: PUSH
27992: LD_INT 1
27994: DOUBLE
27995: EQUAL
27996: IFTRUE 28000
27998: GO 28011
28000: POP
// bc_type := b_depot ; 2 :
28001: LD_ADDR_OWVAR 42
28005: PUSH
28006: LD_INT 0
28008: ST_TO_ADDR
28009: GO 28623
28011: LD_INT 2
28013: DOUBLE
28014: EQUAL
28015: IFTRUE 28019
28017: GO 28030
28019: POP
// bc_type := b_warehouse ; 3 :
28020: LD_ADDR_OWVAR 42
28024: PUSH
28025: LD_INT 1
28027: ST_TO_ADDR
28028: GO 28623
28030: LD_INT 3
28032: DOUBLE
28033: EQUAL
28034: IFTRUE 28038
28036: GO 28049
28038: POP
// bc_type := b_lab ; 4 .. 9 :
28039: LD_ADDR_OWVAR 42
28043: PUSH
28044: LD_INT 6
28046: ST_TO_ADDR
28047: GO 28623
28049: LD_INT 4
28051: DOUBLE
28052: GREATEREQUAL
28053: IFFALSE 28061
28055: LD_INT 9
28057: DOUBLE
28058: LESSEQUAL
28059: IFTRUE 28063
28061: GO 28115
28063: POP
// begin bc_type := b_lab_half ;
28064: LD_ADDR_OWVAR 42
28068: PUSH
28069: LD_INT 7
28071: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
28072: LD_ADDR_OWVAR 44
28076: PUSH
28077: LD_INT 10
28079: PUSH
28080: LD_INT 11
28082: PUSH
28083: LD_INT 12
28085: PUSH
28086: LD_INT 15
28088: PUSH
28089: LD_INT 14
28091: PUSH
28092: LD_INT 13
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: LIST
28099: LIST
28100: LIST
28101: LIST
28102: PUSH
28103: LD_VAR 0 2
28107: PUSH
28108: LD_INT 3
28110: MINUS
28111: ARRAY
28112: ST_TO_ADDR
// end ; 10 .. 13 :
28113: GO 28623
28115: LD_INT 10
28117: DOUBLE
28118: GREATEREQUAL
28119: IFFALSE 28127
28121: LD_INT 13
28123: DOUBLE
28124: LESSEQUAL
28125: IFTRUE 28129
28127: GO 28206
28129: POP
// begin bc_type := b_lab_full ;
28130: LD_ADDR_OWVAR 42
28134: PUSH
28135: LD_INT 8
28137: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
28138: LD_ADDR_OWVAR 44
28142: PUSH
28143: LD_INT 10
28145: PUSH
28146: LD_INT 12
28148: PUSH
28149: LD_INT 14
28151: PUSH
28152: LD_INT 13
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: LIST
28159: LIST
28160: PUSH
28161: LD_VAR 0 2
28165: PUSH
28166: LD_INT 9
28168: MINUS
28169: ARRAY
28170: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
28171: LD_ADDR_OWVAR 45
28175: PUSH
28176: LD_INT 11
28178: PUSH
28179: LD_INT 15
28181: PUSH
28182: LD_INT 12
28184: PUSH
28185: LD_INT 15
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: LIST
28192: LIST
28193: PUSH
28194: LD_VAR 0 2
28198: PUSH
28199: LD_INT 9
28201: MINUS
28202: ARRAY
28203: ST_TO_ADDR
// end ; 14 :
28204: GO 28623
28206: LD_INT 14
28208: DOUBLE
28209: EQUAL
28210: IFTRUE 28214
28212: GO 28225
28214: POP
// bc_type := b_workshop ; 15 :
28215: LD_ADDR_OWVAR 42
28219: PUSH
28220: LD_INT 2
28222: ST_TO_ADDR
28223: GO 28623
28225: LD_INT 15
28227: DOUBLE
28228: EQUAL
28229: IFTRUE 28233
28231: GO 28244
28233: POP
// bc_type := b_factory ; 16 :
28234: LD_ADDR_OWVAR 42
28238: PUSH
28239: LD_INT 3
28241: ST_TO_ADDR
28242: GO 28623
28244: LD_INT 16
28246: DOUBLE
28247: EQUAL
28248: IFTRUE 28252
28250: GO 28263
28252: POP
// bc_type := b_ext_gun ; 17 :
28253: LD_ADDR_OWVAR 42
28257: PUSH
28258: LD_INT 17
28260: ST_TO_ADDR
28261: GO 28623
28263: LD_INT 17
28265: DOUBLE
28266: EQUAL
28267: IFTRUE 28271
28269: GO 28299
28271: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
28272: LD_ADDR_OWVAR 42
28276: PUSH
28277: LD_INT 19
28279: PUSH
28280: LD_INT 23
28282: PUSH
28283: LD_INT 19
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: LIST
28290: PUSH
28291: LD_VAR 0 1
28295: ARRAY
28296: ST_TO_ADDR
28297: GO 28623
28299: LD_INT 18
28301: DOUBLE
28302: EQUAL
28303: IFTRUE 28307
28305: GO 28318
28307: POP
// bc_type := b_ext_radar ; 19 :
28308: LD_ADDR_OWVAR 42
28312: PUSH
28313: LD_INT 20
28315: ST_TO_ADDR
28316: GO 28623
28318: LD_INT 19
28320: DOUBLE
28321: EQUAL
28322: IFTRUE 28326
28324: GO 28337
28326: POP
// bc_type := b_ext_radio ; 20 :
28327: LD_ADDR_OWVAR 42
28331: PUSH
28332: LD_INT 22
28334: ST_TO_ADDR
28335: GO 28623
28337: LD_INT 20
28339: DOUBLE
28340: EQUAL
28341: IFTRUE 28345
28343: GO 28356
28345: POP
// bc_type := b_ext_siberium ; 21 :
28346: LD_ADDR_OWVAR 42
28350: PUSH
28351: LD_INT 21
28353: ST_TO_ADDR
28354: GO 28623
28356: LD_INT 21
28358: DOUBLE
28359: EQUAL
28360: IFTRUE 28364
28362: GO 28375
28364: POP
// bc_type := b_ext_computer ; 22 :
28365: LD_ADDR_OWVAR 42
28369: PUSH
28370: LD_INT 24
28372: ST_TO_ADDR
28373: GO 28623
28375: LD_INT 22
28377: DOUBLE
28378: EQUAL
28379: IFTRUE 28383
28381: GO 28394
28383: POP
// bc_type := b_ext_track ; 23 :
28384: LD_ADDR_OWVAR 42
28388: PUSH
28389: LD_INT 16
28391: ST_TO_ADDR
28392: GO 28623
28394: LD_INT 23
28396: DOUBLE
28397: EQUAL
28398: IFTRUE 28402
28400: GO 28413
28402: POP
// bc_type := b_ext_laser ; 24 :
28403: LD_ADDR_OWVAR 42
28407: PUSH
28408: LD_INT 25
28410: ST_TO_ADDR
28411: GO 28623
28413: LD_INT 24
28415: DOUBLE
28416: EQUAL
28417: IFTRUE 28421
28419: GO 28432
28421: POP
// bc_type := b_control_tower ; 25 :
28422: LD_ADDR_OWVAR 42
28426: PUSH
28427: LD_INT 36
28429: ST_TO_ADDR
28430: GO 28623
28432: LD_INT 25
28434: DOUBLE
28435: EQUAL
28436: IFTRUE 28440
28438: GO 28451
28440: POP
// bc_type := b_breastwork ; 26 :
28441: LD_ADDR_OWVAR 42
28445: PUSH
28446: LD_INT 31
28448: ST_TO_ADDR
28449: GO 28623
28451: LD_INT 26
28453: DOUBLE
28454: EQUAL
28455: IFTRUE 28459
28457: GO 28470
28459: POP
// bc_type := b_bunker ; 27 :
28460: LD_ADDR_OWVAR 42
28464: PUSH
28465: LD_INT 32
28467: ST_TO_ADDR
28468: GO 28623
28470: LD_INT 27
28472: DOUBLE
28473: EQUAL
28474: IFTRUE 28478
28476: GO 28489
28478: POP
// bc_type := b_turret ; 28 :
28479: LD_ADDR_OWVAR 42
28483: PUSH
28484: LD_INT 33
28486: ST_TO_ADDR
28487: GO 28623
28489: LD_INT 28
28491: DOUBLE
28492: EQUAL
28493: IFTRUE 28497
28495: GO 28508
28497: POP
// bc_type := b_armoury ; 29 :
28498: LD_ADDR_OWVAR 42
28502: PUSH
28503: LD_INT 4
28505: ST_TO_ADDR
28506: GO 28623
28508: LD_INT 29
28510: DOUBLE
28511: EQUAL
28512: IFTRUE 28516
28514: GO 28527
28516: POP
// bc_type := b_barracks ; 30 :
28517: LD_ADDR_OWVAR 42
28521: PUSH
28522: LD_INT 5
28524: ST_TO_ADDR
28525: GO 28623
28527: LD_INT 30
28529: DOUBLE
28530: EQUAL
28531: IFTRUE 28535
28533: GO 28546
28535: POP
// bc_type := b_solar_power ; 31 :
28536: LD_ADDR_OWVAR 42
28540: PUSH
28541: LD_INT 27
28543: ST_TO_ADDR
28544: GO 28623
28546: LD_INT 31
28548: DOUBLE
28549: EQUAL
28550: IFTRUE 28554
28552: GO 28565
28554: POP
// bc_type := b_oil_power ; 32 :
28555: LD_ADDR_OWVAR 42
28559: PUSH
28560: LD_INT 26
28562: ST_TO_ADDR
28563: GO 28623
28565: LD_INT 32
28567: DOUBLE
28568: EQUAL
28569: IFTRUE 28573
28571: GO 28584
28573: POP
// bc_type := b_siberite_power ; 33 :
28574: LD_ADDR_OWVAR 42
28578: PUSH
28579: LD_INT 28
28581: ST_TO_ADDR
28582: GO 28623
28584: LD_INT 33
28586: DOUBLE
28587: EQUAL
28588: IFTRUE 28592
28590: GO 28603
28592: POP
// bc_type := b_oil_mine ; 34 :
28593: LD_ADDR_OWVAR 42
28597: PUSH
28598: LD_INT 29
28600: ST_TO_ADDR
28601: GO 28623
28603: LD_INT 34
28605: DOUBLE
28606: EQUAL
28607: IFTRUE 28611
28609: GO 28622
28611: POP
// bc_type := b_siberite_mine ; end ;
28612: LD_ADDR_OWVAR 42
28616: PUSH
28617: LD_INT 30
28619: ST_TO_ADDR
28620: GO 28623
28622: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
28623: LD_ADDR_VAR 0 8
28627: PUSH
28628: LD_VAR 0 5
28632: PPUSH
28633: LD_VAR 0 6
28637: PPUSH
28638: LD_VAR 0 3
28642: PPUSH
28643: CALL_OW 47
28647: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
28648: LD_OWVAR 42
28652: PUSH
28653: LD_INT 32
28655: PUSH
28656: LD_INT 33
28658: PUSH
28659: EMPTY
28660: LIST
28661: LIST
28662: IN
28663: IFFALSE 28679
// PlaceWeaponTurret ( b , weapon ) ;
28665: LD_VAR 0 8
28669: PPUSH
28670: LD_VAR 0 4
28674: PPUSH
28675: CALL_OW 431
// end ;
28679: LD_VAR 0 7
28683: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
28684: LD_INT 0
28686: PPUSH
28687: PPUSH
28688: PPUSH
28689: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28690: LD_ADDR_VAR 0 4
28694: PUSH
28695: LD_INT 22
28697: PUSH
28698: LD_OWVAR 2
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: PUSH
28707: LD_INT 2
28709: PUSH
28710: LD_INT 30
28712: PUSH
28713: LD_INT 0
28715: PUSH
28716: EMPTY
28717: LIST
28718: LIST
28719: PUSH
28720: LD_INT 30
28722: PUSH
28723: LD_INT 1
28725: PUSH
28726: EMPTY
28727: LIST
28728: LIST
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: LIST
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: PPUSH
28739: CALL_OW 69
28743: ST_TO_ADDR
// if not tmp then
28744: LD_VAR 0 4
28748: NOT
28749: IFFALSE 28753
// exit ;
28751: GO 28812
// for i in tmp do
28753: LD_ADDR_VAR 0 2
28757: PUSH
28758: LD_VAR 0 4
28762: PUSH
28763: FOR_IN
28764: IFFALSE 28810
// for j = 1 to 3 do
28766: LD_ADDR_VAR 0 3
28770: PUSH
28771: DOUBLE
28772: LD_INT 1
28774: DEC
28775: ST_TO_ADDR
28776: LD_INT 3
28778: PUSH
28779: FOR_TO
28780: IFFALSE 28806
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
28782: LD_VAR 0 2
28786: PPUSH
28787: CALL_OW 274
28791: PPUSH
28792: LD_VAR 0 3
28796: PPUSH
28797: LD_INT 99999
28799: PPUSH
28800: CALL_OW 277
28804: GO 28779
28806: POP
28807: POP
28808: GO 28763
28810: POP
28811: POP
// end ;
28812: LD_VAR 0 1
28816: RET
// export function hHackSetLevel10 ; var i , j ; begin
28817: LD_INT 0
28819: PPUSH
28820: PPUSH
28821: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28822: LD_ADDR_VAR 0 2
28826: PUSH
28827: LD_INT 21
28829: PUSH
28830: LD_INT 1
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: PPUSH
28837: CALL_OW 69
28841: PUSH
28842: FOR_IN
28843: IFFALSE 28895
// if IsSelected ( i ) then
28845: LD_VAR 0 2
28849: PPUSH
28850: CALL_OW 306
28854: IFFALSE 28893
// begin for j := 1 to 4 do
28856: LD_ADDR_VAR 0 3
28860: PUSH
28861: DOUBLE
28862: LD_INT 1
28864: DEC
28865: ST_TO_ADDR
28866: LD_INT 4
28868: PUSH
28869: FOR_TO
28870: IFFALSE 28891
// SetSkill ( i , j , 10 ) ;
28872: LD_VAR 0 2
28876: PPUSH
28877: LD_VAR 0 3
28881: PPUSH
28882: LD_INT 10
28884: PPUSH
28885: CALL_OW 237
28889: GO 28869
28891: POP
28892: POP
// end ;
28893: GO 28842
28895: POP
28896: POP
// end ;
28897: LD_VAR 0 1
28901: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
28902: LD_INT 0
28904: PPUSH
28905: PPUSH
28906: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
28907: LD_ADDR_VAR 0 2
28911: PUSH
28912: LD_INT 22
28914: PUSH
28915: LD_OWVAR 2
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: PUSH
28924: LD_INT 21
28926: PUSH
28927: LD_INT 1
28929: PUSH
28930: EMPTY
28931: LIST
28932: LIST
28933: PUSH
28934: EMPTY
28935: LIST
28936: LIST
28937: PPUSH
28938: CALL_OW 69
28942: PUSH
28943: FOR_IN
28944: IFFALSE 28985
// begin for j := 1 to 4 do
28946: LD_ADDR_VAR 0 3
28950: PUSH
28951: DOUBLE
28952: LD_INT 1
28954: DEC
28955: ST_TO_ADDR
28956: LD_INT 4
28958: PUSH
28959: FOR_TO
28960: IFFALSE 28981
// SetSkill ( i , j , 10 ) ;
28962: LD_VAR 0 2
28966: PPUSH
28967: LD_VAR 0 3
28971: PPUSH
28972: LD_INT 10
28974: PPUSH
28975: CALL_OW 237
28979: GO 28959
28981: POP
28982: POP
// end ;
28983: GO 28943
28985: POP
28986: POP
// end ;
28987: LD_VAR 0 1
28991: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
28992: LD_INT 0
28994: PPUSH
// uc_side := your_side ;
28995: LD_ADDR_OWVAR 20
28999: PUSH
29000: LD_OWVAR 2
29004: ST_TO_ADDR
// uc_nation := nation ;
29005: LD_ADDR_OWVAR 21
29009: PUSH
29010: LD_VAR 0 1
29014: ST_TO_ADDR
// InitHc ;
29015: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
29019: LD_INT 0
29021: PPUSH
29022: LD_VAR 0 2
29026: PPUSH
29027: LD_VAR 0 3
29031: PPUSH
29032: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
29036: LD_VAR 0 4
29040: PPUSH
29041: LD_VAR 0 5
29045: PPUSH
29046: CALL_OW 428
29050: PUSH
29051: LD_INT 0
29053: EQUAL
29054: IFFALSE 29078
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
29056: CALL_OW 44
29060: PPUSH
29061: LD_VAR 0 4
29065: PPUSH
29066: LD_VAR 0 5
29070: PPUSH
29071: LD_INT 1
29073: PPUSH
29074: CALL_OW 48
// end ;
29078: LD_VAR 0 6
29082: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
29083: LD_INT 0
29085: PPUSH
29086: PPUSH
// uc_side := your_side ;
29087: LD_ADDR_OWVAR 20
29091: PUSH
29092: LD_OWVAR 2
29096: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
29097: LD_VAR 0 1
29101: PUSH
29102: LD_INT 1
29104: PUSH
29105: LD_INT 2
29107: PUSH
29108: LD_INT 3
29110: PUSH
29111: LD_INT 4
29113: PUSH
29114: LD_INT 5
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: LIST
29121: LIST
29122: LIST
29123: IN
29124: IFFALSE 29136
// uc_nation := nation_american else
29126: LD_ADDR_OWVAR 21
29130: PUSH
29131: LD_INT 1
29133: ST_TO_ADDR
29134: GO 29179
// if chassis in [ 11 , 12 , 13 , 14 ] then
29136: LD_VAR 0 1
29140: PUSH
29141: LD_INT 11
29143: PUSH
29144: LD_INT 12
29146: PUSH
29147: LD_INT 13
29149: PUSH
29150: LD_INT 14
29152: PUSH
29153: EMPTY
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: IN
29159: IFFALSE 29171
// uc_nation := nation_arabian else
29161: LD_ADDR_OWVAR 21
29165: PUSH
29166: LD_INT 2
29168: ST_TO_ADDR
29169: GO 29179
// uc_nation := nation_russian ;
29171: LD_ADDR_OWVAR 21
29175: PUSH
29176: LD_INT 3
29178: ST_TO_ADDR
// vc_chassis := chassis ;
29179: LD_ADDR_OWVAR 37
29183: PUSH
29184: LD_VAR 0 1
29188: ST_TO_ADDR
// vc_engine := engine ;
29189: LD_ADDR_OWVAR 39
29193: PUSH
29194: LD_VAR 0 2
29198: ST_TO_ADDR
// vc_control := control ;
29199: LD_ADDR_OWVAR 38
29203: PUSH
29204: LD_VAR 0 3
29208: ST_TO_ADDR
// vc_weapon := weapon ;
29209: LD_ADDR_OWVAR 40
29213: PUSH
29214: LD_VAR 0 4
29218: ST_TO_ADDR
// un := CreateVehicle ;
29219: LD_ADDR_VAR 0 8
29223: PUSH
29224: CALL_OW 45
29228: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
29229: LD_VAR 0 8
29233: PPUSH
29234: LD_INT 0
29236: PPUSH
29237: LD_INT 5
29239: PPUSH
29240: CALL_OW 12
29244: PPUSH
29245: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
29249: LD_VAR 0 8
29253: PPUSH
29254: LD_VAR 0 5
29258: PPUSH
29259: LD_VAR 0 6
29263: PPUSH
29264: LD_INT 1
29266: PPUSH
29267: CALL_OW 48
// end ;
29271: LD_VAR 0 7
29275: RET
// export hInvincible ; every 1 do
29276: GO 29278
29278: DISABLE
// hInvincible := [ ] ;
29279: LD_ADDR_EXP 97
29283: PUSH
29284: EMPTY
29285: ST_TO_ADDR
29286: END
// every 10 do var i ;
29287: GO 29289
29289: DISABLE
29290: LD_INT 0
29292: PPUSH
// begin enable ;
29293: ENABLE
// if not hInvincible then
29294: LD_EXP 97
29298: NOT
29299: IFFALSE 29303
// exit ;
29301: GO 29347
// for i in hInvincible do
29303: LD_ADDR_VAR 0 1
29307: PUSH
29308: LD_EXP 97
29312: PUSH
29313: FOR_IN
29314: IFFALSE 29345
// if GetLives ( i ) < 1000 then
29316: LD_VAR 0 1
29320: PPUSH
29321: CALL_OW 256
29325: PUSH
29326: LD_INT 1000
29328: LESS
29329: IFFALSE 29343
// SetLives ( i , 1000 ) ;
29331: LD_VAR 0 1
29335: PPUSH
29336: LD_INT 1000
29338: PPUSH
29339: CALL_OW 234
29343: GO 29313
29345: POP
29346: POP
// end ;
29347: PPOPN 1
29349: END
// export function hHackInvincible ; var i ; begin
29350: LD_INT 0
29352: PPUSH
29353: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
29354: LD_ADDR_VAR 0 2
29358: PUSH
29359: LD_INT 2
29361: PUSH
29362: LD_INT 21
29364: PUSH
29365: LD_INT 1
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: LD_INT 21
29374: PUSH
29375: LD_INT 2
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: PUSH
29382: EMPTY
29383: LIST
29384: LIST
29385: LIST
29386: PPUSH
29387: CALL_OW 69
29391: PUSH
29392: FOR_IN
29393: IFFALSE 29454
// if IsSelected ( i ) then
29395: LD_VAR 0 2
29399: PPUSH
29400: CALL_OW 306
29404: IFFALSE 29452
// begin if i in hInvincible then
29406: LD_VAR 0 2
29410: PUSH
29411: LD_EXP 97
29415: IN
29416: IFFALSE 29436
// hInvincible := hInvincible diff i else
29418: LD_ADDR_EXP 97
29422: PUSH
29423: LD_EXP 97
29427: PUSH
29428: LD_VAR 0 2
29432: DIFF
29433: ST_TO_ADDR
29434: GO 29452
// hInvincible := hInvincible union i ;
29436: LD_ADDR_EXP 97
29440: PUSH
29441: LD_EXP 97
29445: PUSH
29446: LD_VAR 0 2
29450: UNION
29451: ST_TO_ADDR
// end ;
29452: GO 29392
29454: POP
29455: POP
// end ;
29456: LD_VAR 0 1
29460: RET
// export function hHackInvisible ; var i , j ; begin
29461: LD_INT 0
29463: PPUSH
29464: PPUSH
29465: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29466: LD_ADDR_VAR 0 2
29470: PUSH
29471: LD_INT 21
29473: PUSH
29474: LD_INT 1
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PPUSH
29481: CALL_OW 69
29485: PUSH
29486: FOR_IN
29487: IFFALSE 29511
// if IsSelected ( i ) then
29489: LD_VAR 0 2
29493: PPUSH
29494: CALL_OW 306
29498: IFFALSE 29509
// ComForceInvisible ( i ) ;
29500: LD_VAR 0 2
29504: PPUSH
29505: CALL_OW 496
29509: GO 29486
29511: POP
29512: POP
// end ;
29513: LD_VAR 0 1
29517: RET
// export function hHackChangeYourSide ; begin
29518: LD_INT 0
29520: PPUSH
// if your_side = 8 then
29521: LD_OWVAR 2
29525: PUSH
29526: LD_INT 8
29528: EQUAL
29529: IFFALSE 29541
// your_side := 0 else
29531: LD_ADDR_OWVAR 2
29535: PUSH
29536: LD_INT 0
29538: ST_TO_ADDR
29539: GO 29555
// your_side := your_side + 1 ;
29541: LD_ADDR_OWVAR 2
29545: PUSH
29546: LD_OWVAR 2
29550: PUSH
29551: LD_INT 1
29553: PLUS
29554: ST_TO_ADDR
// end ;
29555: LD_VAR 0 1
29559: RET
// export function hHackChangeUnitSide ; var i , j ; begin
29560: LD_INT 0
29562: PPUSH
29563: PPUSH
29564: PPUSH
// for i in all_units do
29565: LD_ADDR_VAR 0 2
29569: PUSH
29570: LD_OWVAR 3
29574: PUSH
29575: FOR_IN
29576: IFFALSE 29654
// if IsSelected ( i ) then
29578: LD_VAR 0 2
29582: PPUSH
29583: CALL_OW 306
29587: IFFALSE 29652
// begin j := GetSide ( i ) ;
29589: LD_ADDR_VAR 0 3
29593: PUSH
29594: LD_VAR 0 2
29598: PPUSH
29599: CALL_OW 255
29603: ST_TO_ADDR
// if j = 8 then
29604: LD_VAR 0 3
29608: PUSH
29609: LD_INT 8
29611: EQUAL
29612: IFFALSE 29624
// j := 0 else
29614: LD_ADDR_VAR 0 3
29618: PUSH
29619: LD_INT 0
29621: ST_TO_ADDR
29622: GO 29638
// j := j + 1 ;
29624: LD_ADDR_VAR 0 3
29628: PUSH
29629: LD_VAR 0 3
29633: PUSH
29634: LD_INT 1
29636: PLUS
29637: ST_TO_ADDR
// SetSide ( i , j ) ;
29638: LD_VAR 0 2
29642: PPUSH
29643: LD_VAR 0 3
29647: PPUSH
29648: CALL_OW 235
// end ;
29652: GO 29575
29654: POP
29655: POP
// end ;
29656: LD_VAR 0 1
29660: RET
// export function hHackFog ; begin
29661: LD_INT 0
29663: PPUSH
// FogOff ( true ) ;
29664: LD_INT 1
29666: PPUSH
29667: CALL_OW 344
// end ;
29671: LD_VAR 0 1
29675: RET
// export function hHackTeleport ( unit , x , y ) ; begin
29676: LD_INT 0
29678: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
29679: LD_VAR 0 1
29683: PPUSH
29684: LD_VAR 0 2
29688: PPUSH
29689: LD_VAR 0 3
29693: PPUSH
29694: LD_INT 1
29696: PPUSH
29697: LD_INT 1
29699: PPUSH
29700: CALL_OW 483
// CenterOnXY ( x , y ) ;
29704: LD_VAR 0 2
29708: PPUSH
29709: LD_VAR 0 3
29713: PPUSH
29714: CALL_OW 84
// end ;
29718: LD_VAR 0 4
29722: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
29723: LD_INT 0
29725: PPUSH
29726: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
29727: LD_VAR 0 1
29731: NOT
29732: PUSH
29733: LD_VAR 0 2
29737: PPUSH
29738: LD_VAR 0 3
29742: PPUSH
29743: CALL_OW 488
29747: NOT
29748: OR
29749: PUSH
29750: LD_VAR 0 1
29754: PPUSH
29755: CALL_OW 266
29759: PUSH
29760: LD_INT 3
29762: NONEQUAL
29763: PUSH
29764: LD_VAR 0 1
29768: PPUSH
29769: CALL_OW 247
29773: PUSH
29774: LD_INT 1
29776: EQUAL
29777: NOT
29778: AND
29779: OR
29780: IFFALSE 29784
// exit ;
29782: GO 29933
// if GetType ( factory ) = unit_human then
29784: LD_VAR 0 1
29788: PPUSH
29789: CALL_OW 247
29793: PUSH
29794: LD_INT 1
29796: EQUAL
29797: IFFALSE 29814
// factory := IsInUnit ( factory ) ;
29799: LD_ADDR_VAR 0 1
29803: PUSH
29804: LD_VAR 0 1
29808: PPUSH
29809: CALL_OW 310
29813: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
29814: LD_VAR 0 1
29818: PPUSH
29819: CALL_OW 266
29823: PUSH
29824: LD_INT 3
29826: NONEQUAL
29827: IFFALSE 29831
// exit ;
29829: GO 29933
// if HexInfo ( x , y ) = factory then
29831: LD_VAR 0 2
29835: PPUSH
29836: LD_VAR 0 3
29840: PPUSH
29841: CALL_OW 428
29845: PUSH
29846: LD_VAR 0 1
29850: EQUAL
29851: IFFALSE 29878
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
29853: LD_ADDR_EXP 98
29857: PUSH
29858: LD_EXP 98
29862: PPUSH
29863: LD_VAR 0 1
29867: PPUSH
29868: LD_INT 0
29870: PPUSH
29871: CALL_OW 1
29875: ST_TO_ADDR
29876: GO 29929
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
29878: LD_ADDR_EXP 98
29882: PUSH
29883: LD_EXP 98
29887: PPUSH
29888: LD_VAR 0 1
29892: PPUSH
29893: LD_VAR 0 1
29897: PPUSH
29898: CALL_OW 255
29902: PUSH
29903: LD_VAR 0 1
29907: PUSH
29908: LD_VAR 0 2
29912: PUSH
29913: LD_VAR 0 3
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: LIST
29922: LIST
29923: PPUSH
29924: CALL_OW 1
29928: ST_TO_ADDR
// UpdateFactoryWaypoints ;
29929: CALL 29938 0 0
// end ;
29933: LD_VAR 0 4
29937: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
29938: LD_INT 0
29940: PPUSH
29941: PPUSH
29942: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
29943: LD_STRING resetFactoryWaypoint();
29945: PPUSH
29946: CALL_OW 559
// if factoryWaypoints then
29950: LD_EXP 98
29954: IFFALSE 30080
// begin list := PrepareArray ( factoryWaypoints ) ;
29956: LD_ADDR_VAR 0 3
29960: PUSH
29961: LD_EXP 98
29965: PPUSH
29966: CALL 76549 0 1
29970: ST_TO_ADDR
// for i := 1 to list do
29971: LD_ADDR_VAR 0 2
29975: PUSH
29976: DOUBLE
29977: LD_INT 1
29979: DEC
29980: ST_TO_ADDR
29981: LD_VAR 0 3
29985: PUSH
29986: FOR_TO
29987: IFFALSE 30078
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
29989: LD_STRING setFactoryWaypointXY(
29991: PUSH
29992: LD_VAR 0 3
29996: PUSH
29997: LD_VAR 0 2
30001: ARRAY
30002: PUSH
30003: LD_INT 1
30005: ARRAY
30006: STR
30007: PUSH
30008: LD_STRING ,
30010: STR
30011: PUSH
30012: LD_VAR 0 3
30016: PUSH
30017: LD_VAR 0 2
30021: ARRAY
30022: PUSH
30023: LD_INT 2
30025: ARRAY
30026: STR
30027: PUSH
30028: LD_STRING ,
30030: STR
30031: PUSH
30032: LD_VAR 0 3
30036: PUSH
30037: LD_VAR 0 2
30041: ARRAY
30042: PUSH
30043: LD_INT 3
30045: ARRAY
30046: STR
30047: PUSH
30048: LD_STRING ,
30050: STR
30051: PUSH
30052: LD_VAR 0 3
30056: PUSH
30057: LD_VAR 0 2
30061: ARRAY
30062: PUSH
30063: LD_INT 4
30065: ARRAY
30066: STR
30067: PUSH
30068: LD_STRING )
30070: STR
30071: PPUSH
30072: CALL_OW 559
30076: GO 29986
30078: POP
30079: POP
// end ; end ;
30080: LD_VAR 0 1
30084: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
30085: LD_INT 0
30087: PPUSH
// if HexInfo ( x , y ) = warehouse then
30088: LD_VAR 0 2
30092: PPUSH
30093: LD_VAR 0 3
30097: PPUSH
30098: CALL_OW 428
30102: PUSH
30103: LD_VAR 0 1
30107: EQUAL
30108: IFFALSE 30135
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
30110: LD_ADDR_EXP 99
30114: PUSH
30115: LD_EXP 99
30119: PPUSH
30120: LD_VAR 0 1
30124: PPUSH
30125: LD_INT 0
30127: PPUSH
30128: CALL_OW 1
30132: ST_TO_ADDR
30133: GO 30186
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
30135: LD_ADDR_EXP 99
30139: PUSH
30140: LD_EXP 99
30144: PPUSH
30145: LD_VAR 0 1
30149: PPUSH
30150: LD_VAR 0 1
30154: PPUSH
30155: CALL_OW 255
30159: PUSH
30160: LD_VAR 0 1
30164: PUSH
30165: LD_VAR 0 2
30169: PUSH
30170: LD_VAR 0 3
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: LIST
30179: LIST
30180: PPUSH
30181: CALL_OW 1
30185: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
30186: CALL 30195 0 0
// end ;
30190: LD_VAR 0 4
30194: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
30195: LD_INT 0
30197: PPUSH
30198: PPUSH
30199: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
30200: LD_STRING resetWarehouseGatheringPoints();
30202: PPUSH
30203: CALL_OW 559
// if warehouseGatheringPoints then
30207: LD_EXP 99
30211: IFFALSE 30337
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
30213: LD_ADDR_VAR 0 3
30217: PUSH
30218: LD_EXP 99
30222: PPUSH
30223: CALL 76549 0 1
30227: ST_TO_ADDR
// for i := 1 to list do
30228: LD_ADDR_VAR 0 2
30232: PUSH
30233: DOUBLE
30234: LD_INT 1
30236: DEC
30237: ST_TO_ADDR
30238: LD_VAR 0 3
30242: PUSH
30243: FOR_TO
30244: IFFALSE 30335
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
30246: LD_STRING setWarehouseGatheringPointXY(
30248: PUSH
30249: LD_VAR 0 3
30253: PUSH
30254: LD_VAR 0 2
30258: ARRAY
30259: PUSH
30260: LD_INT 1
30262: ARRAY
30263: STR
30264: PUSH
30265: LD_STRING ,
30267: STR
30268: PUSH
30269: LD_VAR 0 3
30273: PUSH
30274: LD_VAR 0 2
30278: ARRAY
30279: PUSH
30280: LD_INT 2
30282: ARRAY
30283: STR
30284: PUSH
30285: LD_STRING ,
30287: STR
30288: PUSH
30289: LD_VAR 0 3
30293: PUSH
30294: LD_VAR 0 2
30298: ARRAY
30299: PUSH
30300: LD_INT 3
30302: ARRAY
30303: STR
30304: PUSH
30305: LD_STRING ,
30307: STR
30308: PUSH
30309: LD_VAR 0 3
30313: PUSH
30314: LD_VAR 0 2
30318: ARRAY
30319: PUSH
30320: LD_INT 4
30322: ARRAY
30323: STR
30324: PUSH
30325: LD_STRING )
30327: STR
30328: PPUSH
30329: CALL_OW 559
30333: GO 30243
30335: POP
30336: POP
// end ; end ;
30337: LD_VAR 0 1
30341: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
30342: LD_EXP 99
30346: IFFALSE 31031
30348: GO 30350
30350: DISABLE
30351: LD_INT 0
30353: PPUSH
30354: PPUSH
30355: PPUSH
30356: PPUSH
30357: PPUSH
30358: PPUSH
30359: PPUSH
30360: PPUSH
30361: PPUSH
// begin enable ;
30362: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
30363: LD_ADDR_VAR 0 3
30367: PUSH
30368: LD_EXP 99
30372: PPUSH
30373: CALL 76549 0 1
30377: ST_TO_ADDR
// if not list then
30378: LD_VAR 0 3
30382: NOT
30383: IFFALSE 30387
// exit ;
30385: GO 31031
// for i := 1 to list do
30387: LD_ADDR_VAR 0 1
30391: PUSH
30392: DOUBLE
30393: LD_INT 1
30395: DEC
30396: ST_TO_ADDR
30397: LD_VAR 0 3
30401: PUSH
30402: FOR_TO
30403: IFFALSE 31029
// begin depot := list [ i ] [ 2 ] ;
30405: LD_ADDR_VAR 0 8
30409: PUSH
30410: LD_VAR 0 3
30414: PUSH
30415: LD_VAR 0 1
30419: ARRAY
30420: PUSH
30421: LD_INT 2
30423: ARRAY
30424: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
30425: LD_ADDR_VAR 0 5
30429: PUSH
30430: LD_VAR 0 3
30434: PUSH
30435: LD_VAR 0 1
30439: ARRAY
30440: PUSH
30441: LD_INT 1
30443: ARRAY
30444: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
30445: LD_VAR 0 8
30449: PPUSH
30450: CALL_OW 301
30454: PUSH
30455: LD_VAR 0 5
30459: PUSH
30460: LD_VAR 0 8
30464: PPUSH
30465: CALL_OW 255
30469: NONEQUAL
30470: OR
30471: IFFALSE 30500
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
30473: LD_ADDR_EXP 99
30477: PUSH
30478: LD_EXP 99
30482: PPUSH
30483: LD_VAR 0 8
30487: PPUSH
30488: LD_INT 0
30490: PPUSH
30491: CALL_OW 1
30495: ST_TO_ADDR
// exit ;
30496: POP
30497: POP
30498: GO 31031
// end ; x := list [ i ] [ 3 ] ;
30500: LD_ADDR_VAR 0 6
30504: PUSH
30505: LD_VAR 0 3
30509: PUSH
30510: LD_VAR 0 1
30514: ARRAY
30515: PUSH
30516: LD_INT 3
30518: ARRAY
30519: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
30520: LD_ADDR_VAR 0 7
30524: PUSH
30525: LD_VAR 0 3
30529: PUSH
30530: LD_VAR 0 1
30534: ARRAY
30535: PUSH
30536: LD_INT 4
30538: ARRAY
30539: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
30540: LD_ADDR_VAR 0 9
30544: PUSH
30545: LD_VAR 0 6
30549: PPUSH
30550: LD_VAR 0 7
30554: PPUSH
30555: LD_INT 16
30557: PPUSH
30558: CALL 75137 0 3
30562: ST_TO_ADDR
// if not cratesNearbyPoint then
30563: LD_VAR 0 9
30567: NOT
30568: IFFALSE 30574
// exit ;
30570: POP
30571: POP
30572: GO 31031
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
30574: LD_ADDR_VAR 0 4
30578: PUSH
30579: LD_INT 22
30581: PUSH
30582: LD_VAR 0 5
30586: PUSH
30587: EMPTY
30588: LIST
30589: LIST
30590: PUSH
30591: LD_INT 3
30593: PUSH
30594: LD_INT 60
30596: PUSH
30597: EMPTY
30598: LIST
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: PUSH
30604: LD_INT 91
30606: PUSH
30607: LD_VAR 0 8
30611: PUSH
30612: LD_INT 6
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 2
30622: PUSH
30623: LD_INT 25
30625: PUSH
30626: LD_INT 2
30628: PUSH
30629: EMPTY
30630: LIST
30631: LIST
30632: PUSH
30633: LD_INT 25
30635: PUSH
30636: LD_INT 16
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: LIST
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: PPUSH
30654: CALL_OW 69
30658: PUSH
30659: LD_VAR 0 8
30663: PPUSH
30664: CALL_OW 313
30668: PPUSH
30669: LD_INT 3
30671: PUSH
30672: LD_INT 60
30674: PUSH
30675: EMPTY
30676: LIST
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: PUSH
30682: LD_INT 2
30684: PUSH
30685: LD_INT 25
30687: PUSH
30688: LD_INT 2
30690: PUSH
30691: EMPTY
30692: LIST
30693: LIST
30694: PUSH
30695: LD_INT 25
30697: PUSH
30698: LD_INT 16
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: PUSH
30705: EMPTY
30706: LIST
30707: LIST
30708: LIST
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PPUSH
30714: CALL_OW 72
30718: UNION
30719: ST_TO_ADDR
// if tmp then
30720: LD_VAR 0 4
30724: IFFALSE 30804
// begin tmp := ShrinkArray ( tmp , 3 ) ;
30726: LD_ADDR_VAR 0 4
30730: PUSH
30731: LD_VAR 0 4
30735: PPUSH
30736: LD_INT 3
30738: PPUSH
30739: CALL 73106 0 2
30743: ST_TO_ADDR
// for j in tmp do
30744: LD_ADDR_VAR 0 2
30748: PUSH
30749: LD_VAR 0 4
30753: PUSH
30754: FOR_IN
30755: IFFALSE 30798
// begin if IsInUnit ( j ) then
30757: LD_VAR 0 2
30761: PPUSH
30762: CALL_OW 310
30766: IFFALSE 30777
// ComExit ( j ) ;
30768: LD_VAR 0 2
30772: PPUSH
30773: CALL 73189 0 1
// AddComCollect ( j , x , y ) ;
30777: LD_VAR 0 2
30781: PPUSH
30782: LD_VAR 0 6
30786: PPUSH
30787: LD_VAR 0 7
30791: PPUSH
30792: CALL_OW 177
// end ;
30796: GO 30754
30798: POP
30799: POP
// exit ;
30800: POP
30801: POP
30802: GO 31031
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
30804: LD_ADDR_VAR 0 4
30808: PUSH
30809: LD_INT 22
30811: PUSH
30812: LD_VAR 0 5
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: PUSH
30821: LD_INT 91
30823: PUSH
30824: LD_VAR 0 8
30828: PUSH
30829: LD_INT 8
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: LIST
30836: PUSH
30837: LD_INT 2
30839: PUSH
30840: LD_INT 34
30842: PUSH
30843: LD_INT 12
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: LD_INT 34
30852: PUSH
30853: LD_INT 51
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: PUSH
30860: LD_INT 34
30862: PUSH
30863: LD_INT 32
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: PUSH
30870: LD_INT 34
30872: PUSH
30873: LD_INT 89
30875: PUSH
30876: EMPTY
30877: LIST
30878: LIST
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: PUSH
30887: EMPTY
30888: LIST
30889: LIST
30890: LIST
30891: PPUSH
30892: CALL_OW 69
30896: ST_TO_ADDR
// if tmp then
30897: LD_VAR 0 4
30901: IFFALSE 31027
// begin for j in tmp do
30903: LD_ADDR_VAR 0 2
30907: PUSH
30908: LD_VAR 0 4
30912: PUSH
30913: FOR_IN
30914: IFFALSE 31025
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
30916: LD_VAR 0 2
30920: PPUSH
30921: CALL_OW 262
30925: PUSH
30926: LD_INT 3
30928: EQUAL
30929: PUSH
30930: LD_VAR 0 2
30934: PPUSH
30935: CALL_OW 261
30939: PUSH
30940: LD_INT 20
30942: GREATER
30943: OR
30944: PUSH
30945: LD_VAR 0 2
30949: PPUSH
30950: CALL_OW 314
30954: NOT
30955: AND
30956: PUSH
30957: LD_VAR 0 2
30961: PPUSH
30962: CALL_OW 263
30966: PUSH
30967: LD_INT 1
30969: NONEQUAL
30970: PUSH
30971: LD_VAR 0 2
30975: PPUSH
30976: CALL_OW 311
30980: OR
30981: AND
30982: IFFALSE 31023
// begin ComCollect ( j , x , y ) ;
30984: LD_VAR 0 2
30988: PPUSH
30989: LD_VAR 0 6
30993: PPUSH
30994: LD_VAR 0 7
30998: PPUSH
30999: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
31003: LD_VAR 0 2
31007: PPUSH
31008: LD_VAR 0 8
31012: PPUSH
31013: CALL_OW 172
// exit ;
31017: POP
31018: POP
31019: POP
31020: POP
31021: GO 31031
// end ;
31023: GO 30913
31025: POP
31026: POP
// end ; end ;
31027: GO 30402
31029: POP
31030: POP
// end ; end_of_file
31031: PPOPN 9
31033: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
31034: LD_INT 0
31036: PPUSH
31037: PPUSH
31038: PPUSH
31039: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
31040: LD_VAR 0 1
31044: PPUSH
31045: CALL_OW 264
31049: PUSH
31050: LD_INT 91
31052: EQUAL
31053: IFFALSE 31125
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
31055: LD_INT 68
31057: PPUSH
31058: LD_VAR 0 1
31062: PPUSH
31063: CALL_OW 255
31067: PPUSH
31068: CALL_OW 321
31072: PUSH
31073: LD_INT 2
31075: EQUAL
31076: IFFALSE 31088
// eff := 70 else
31078: LD_ADDR_VAR 0 4
31082: PUSH
31083: LD_INT 70
31085: ST_TO_ADDR
31086: GO 31096
// eff := 30 ;
31088: LD_ADDR_VAR 0 4
31092: PUSH
31093: LD_INT 30
31095: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
31096: LD_VAR 0 1
31100: PPUSH
31101: CALL_OW 250
31105: PPUSH
31106: LD_VAR 0 1
31110: PPUSH
31111: CALL_OW 251
31115: PPUSH
31116: LD_VAR 0 4
31120: PPUSH
31121: CALL_OW 495
// end ; end ;
31125: LD_VAR 0 2
31129: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
31130: LD_INT 0
31132: PPUSH
// end ;
31133: LD_VAR 0 4
31137: RET
// export function SOS_Command ( cmd ) ; begin
31138: LD_INT 0
31140: PPUSH
// end ;
31141: LD_VAR 0 2
31145: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
31146: LD_INT 0
31148: PPUSH
// end ;
31149: LD_VAR 0 6
31153: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
31154: LD_INT 0
31156: PPUSH
31157: PPUSH
// if not vehicle or not factory then
31158: LD_VAR 0 1
31162: NOT
31163: PUSH
31164: LD_VAR 0 2
31168: NOT
31169: OR
31170: IFFALSE 31174
// exit ;
31172: GO 31405
// if factoryWaypoints >= factory then
31174: LD_EXP 98
31178: PUSH
31179: LD_VAR 0 2
31183: GREATEREQUAL
31184: IFFALSE 31405
// if factoryWaypoints [ factory ] then
31186: LD_EXP 98
31190: PUSH
31191: LD_VAR 0 2
31195: ARRAY
31196: IFFALSE 31405
// begin if GetControl ( vehicle ) = control_manual then
31198: LD_VAR 0 1
31202: PPUSH
31203: CALL_OW 263
31207: PUSH
31208: LD_INT 1
31210: EQUAL
31211: IFFALSE 31292
// begin driver := IsDrivenBy ( vehicle ) ;
31213: LD_ADDR_VAR 0 4
31217: PUSH
31218: LD_VAR 0 1
31222: PPUSH
31223: CALL_OW 311
31227: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
31228: LD_VAR 0 4
31232: PPUSH
31233: LD_EXP 98
31237: PUSH
31238: LD_VAR 0 2
31242: ARRAY
31243: PUSH
31244: LD_INT 3
31246: ARRAY
31247: PPUSH
31248: LD_EXP 98
31252: PUSH
31253: LD_VAR 0 2
31257: ARRAY
31258: PUSH
31259: LD_INT 4
31261: ARRAY
31262: PPUSH
31263: CALL_OW 171
// AddComExitVehicle ( driver ) ;
31267: LD_VAR 0 4
31271: PPUSH
31272: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
31276: LD_VAR 0 4
31280: PPUSH
31281: LD_VAR 0 2
31285: PPUSH
31286: CALL_OW 180
// end else
31290: GO 31405
// if GetControl ( vehicle ) = control_remote then
31292: LD_VAR 0 1
31296: PPUSH
31297: CALL_OW 263
31301: PUSH
31302: LD_INT 2
31304: EQUAL
31305: IFFALSE 31366
// begin wait ( 0 0$2 ) ;
31307: LD_INT 70
31309: PPUSH
31310: CALL_OW 67
// if Connect ( vehicle ) then
31314: LD_VAR 0 1
31318: PPUSH
31319: CALL 43429 0 1
31323: IFFALSE 31364
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
31325: LD_VAR 0 1
31329: PPUSH
31330: LD_EXP 98
31334: PUSH
31335: LD_VAR 0 2
31339: ARRAY
31340: PUSH
31341: LD_INT 3
31343: ARRAY
31344: PPUSH
31345: LD_EXP 98
31349: PUSH
31350: LD_VAR 0 2
31354: ARRAY
31355: PUSH
31356: LD_INT 4
31358: ARRAY
31359: PPUSH
31360: CALL_OW 171
// end else
31364: GO 31405
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
31366: LD_VAR 0 1
31370: PPUSH
31371: LD_EXP 98
31375: PUSH
31376: LD_VAR 0 2
31380: ARRAY
31381: PUSH
31382: LD_INT 3
31384: ARRAY
31385: PPUSH
31386: LD_EXP 98
31390: PUSH
31391: LD_VAR 0 2
31395: ARRAY
31396: PUSH
31397: LD_INT 4
31399: ARRAY
31400: PPUSH
31401: CALL_OW 171
// end ; end ;
31405: LD_VAR 0 3
31409: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
31410: LD_INT 0
31412: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
31413: LD_VAR 0 1
31417: PUSH
31418: LD_INT 250
31420: EQUAL
31421: PUSH
31422: LD_VAR 0 2
31426: PPUSH
31427: CALL_OW 264
31431: PUSH
31432: LD_INT 81
31434: EQUAL
31435: AND
31436: IFFALSE 31457
// MinerPlaceMine ( unit , x , y ) ;
31438: LD_VAR 0 2
31442: PPUSH
31443: LD_VAR 0 4
31447: PPUSH
31448: LD_VAR 0 5
31452: PPUSH
31453: CALL 33842 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
31457: LD_VAR 0 1
31461: PUSH
31462: LD_INT 251
31464: EQUAL
31465: PUSH
31466: LD_VAR 0 2
31470: PPUSH
31471: CALL_OW 264
31475: PUSH
31476: LD_INT 81
31478: EQUAL
31479: AND
31480: IFFALSE 31501
// MinerDetonateMine ( unit , x , y ) ;
31482: LD_VAR 0 2
31486: PPUSH
31487: LD_VAR 0 4
31491: PPUSH
31492: LD_VAR 0 5
31496: PPUSH
31497: CALL 34117 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
31501: LD_VAR 0 1
31505: PUSH
31506: LD_INT 252
31508: EQUAL
31509: PUSH
31510: LD_VAR 0 2
31514: PPUSH
31515: CALL_OW 264
31519: PUSH
31520: LD_INT 81
31522: EQUAL
31523: AND
31524: IFFALSE 31545
// MinerCreateMinefield ( unit , x , y ) ;
31526: LD_VAR 0 2
31530: PPUSH
31531: LD_VAR 0 4
31535: PPUSH
31536: LD_VAR 0 5
31540: PPUSH
31541: CALL 34534 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
31545: LD_VAR 0 1
31549: PUSH
31550: LD_INT 253
31552: EQUAL
31553: PUSH
31554: LD_VAR 0 2
31558: PPUSH
31559: CALL_OW 257
31563: PUSH
31564: LD_INT 5
31566: EQUAL
31567: AND
31568: IFFALSE 31589
// ComBinocular ( unit , x , y ) ;
31570: LD_VAR 0 2
31574: PPUSH
31575: LD_VAR 0 4
31579: PPUSH
31580: LD_VAR 0 5
31584: PPUSH
31585: CALL 34903 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
31589: LD_VAR 0 1
31593: PUSH
31594: LD_INT 254
31596: EQUAL
31597: PUSH
31598: LD_VAR 0 2
31602: PPUSH
31603: CALL_OW 264
31607: PUSH
31608: LD_INT 99
31610: EQUAL
31611: AND
31612: PUSH
31613: LD_VAR 0 3
31617: PPUSH
31618: CALL_OW 263
31622: PUSH
31623: LD_INT 3
31625: EQUAL
31626: AND
31627: IFFALSE 31643
// HackDestroyVehicle ( unit , selectedUnit ) ;
31629: LD_VAR 0 2
31633: PPUSH
31634: LD_VAR 0 3
31638: PPUSH
31639: CALL 33206 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
31643: LD_VAR 0 1
31647: PUSH
31648: LD_INT 255
31650: EQUAL
31651: PUSH
31652: LD_VAR 0 2
31656: PPUSH
31657: CALL_OW 264
31661: PUSH
31662: LD_INT 14
31664: PUSH
31665: LD_INT 53
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: IN
31672: AND
31673: PUSH
31674: LD_VAR 0 4
31678: PPUSH
31679: LD_VAR 0 5
31683: PPUSH
31684: CALL_OW 488
31688: AND
31689: IFFALSE 31713
// CutTreeXYR ( unit , x , y , 12 ) ;
31691: LD_VAR 0 2
31695: PPUSH
31696: LD_VAR 0 4
31700: PPUSH
31701: LD_VAR 0 5
31705: PPUSH
31706: LD_INT 12
31708: PPUSH
31709: CALL 31776 0 4
// if cmd = 256 then
31713: LD_VAR 0 1
31717: PUSH
31718: LD_INT 256
31720: EQUAL
31721: IFFALSE 31742
// SetFactoryWaypoint ( unit , x , y ) ;
31723: LD_VAR 0 2
31727: PPUSH
31728: LD_VAR 0 4
31732: PPUSH
31733: LD_VAR 0 5
31737: PPUSH
31738: CALL 29723 0 3
// if cmd = 257 then
31742: LD_VAR 0 1
31746: PUSH
31747: LD_INT 257
31749: EQUAL
31750: IFFALSE 31771
// SetWarehouseGatheringPoint ( unit , x , y ) ;
31752: LD_VAR 0 2
31756: PPUSH
31757: LD_VAR 0 4
31761: PPUSH
31762: LD_VAR 0 5
31766: PPUSH
31767: CALL 30085 0 3
// end ;
31771: LD_VAR 0 6
31775: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
31776: LD_INT 0
31778: PPUSH
31779: PPUSH
31780: PPUSH
31781: PPUSH
31782: PPUSH
31783: PPUSH
31784: PPUSH
31785: PPUSH
31786: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
31787: LD_VAR 0 1
31791: NOT
31792: PUSH
31793: LD_VAR 0 2
31797: PPUSH
31798: LD_VAR 0 3
31802: PPUSH
31803: CALL_OW 488
31807: NOT
31808: OR
31809: PUSH
31810: LD_VAR 0 4
31814: NOT
31815: OR
31816: IFFALSE 31820
// exit ;
31818: GO 32160
// list := [ ] ;
31820: LD_ADDR_VAR 0 13
31824: PUSH
31825: EMPTY
31826: ST_TO_ADDR
// if x - r < 0 then
31827: LD_VAR 0 2
31831: PUSH
31832: LD_VAR 0 4
31836: MINUS
31837: PUSH
31838: LD_INT 0
31840: LESS
31841: IFFALSE 31853
// min_x := 0 else
31843: LD_ADDR_VAR 0 7
31847: PUSH
31848: LD_INT 0
31850: ST_TO_ADDR
31851: GO 31869
// min_x := x - r ;
31853: LD_ADDR_VAR 0 7
31857: PUSH
31858: LD_VAR 0 2
31862: PUSH
31863: LD_VAR 0 4
31867: MINUS
31868: ST_TO_ADDR
// if y - r < 0 then
31869: LD_VAR 0 3
31873: PUSH
31874: LD_VAR 0 4
31878: MINUS
31879: PUSH
31880: LD_INT 0
31882: LESS
31883: IFFALSE 31895
// min_y := 0 else
31885: LD_ADDR_VAR 0 8
31889: PUSH
31890: LD_INT 0
31892: ST_TO_ADDR
31893: GO 31911
// min_y := y - r ;
31895: LD_ADDR_VAR 0 8
31899: PUSH
31900: LD_VAR 0 3
31904: PUSH
31905: LD_VAR 0 4
31909: MINUS
31910: ST_TO_ADDR
// max_x := x + r ;
31911: LD_ADDR_VAR 0 9
31915: PUSH
31916: LD_VAR 0 2
31920: PUSH
31921: LD_VAR 0 4
31925: PLUS
31926: ST_TO_ADDR
// max_y := y + r ;
31927: LD_ADDR_VAR 0 10
31931: PUSH
31932: LD_VAR 0 3
31936: PUSH
31937: LD_VAR 0 4
31941: PLUS
31942: ST_TO_ADDR
// for _x = min_x to max_x do
31943: LD_ADDR_VAR 0 11
31947: PUSH
31948: DOUBLE
31949: LD_VAR 0 7
31953: DEC
31954: ST_TO_ADDR
31955: LD_VAR 0 9
31959: PUSH
31960: FOR_TO
31961: IFFALSE 32078
// for _y = min_y to max_y do
31963: LD_ADDR_VAR 0 12
31967: PUSH
31968: DOUBLE
31969: LD_VAR 0 8
31973: DEC
31974: ST_TO_ADDR
31975: LD_VAR 0 10
31979: PUSH
31980: FOR_TO
31981: IFFALSE 32074
// begin if not ValidHex ( _x , _y ) then
31983: LD_VAR 0 11
31987: PPUSH
31988: LD_VAR 0 12
31992: PPUSH
31993: CALL_OW 488
31997: NOT
31998: IFFALSE 32002
// continue ;
32000: GO 31980
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
32002: LD_VAR 0 11
32006: PPUSH
32007: LD_VAR 0 12
32011: PPUSH
32012: CALL_OW 351
32016: PUSH
32017: LD_VAR 0 11
32021: PPUSH
32022: LD_VAR 0 12
32026: PPUSH
32027: CALL_OW 554
32031: AND
32032: IFFALSE 32072
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
32034: LD_ADDR_VAR 0 13
32038: PUSH
32039: LD_VAR 0 13
32043: PPUSH
32044: LD_VAR 0 13
32048: PUSH
32049: LD_INT 1
32051: PLUS
32052: PPUSH
32053: LD_VAR 0 11
32057: PUSH
32058: LD_VAR 0 12
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: PPUSH
32067: CALL_OW 2
32071: ST_TO_ADDR
// end ;
32072: GO 31980
32074: POP
32075: POP
32076: GO 31960
32078: POP
32079: POP
// if not list then
32080: LD_VAR 0 13
32084: NOT
32085: IFFALSE 32089
// exit ;
32087: GO 32160
// for i in list do
32089: LD_ADDR_VAR 0 6
32093: PUSH
32094: LD_VAR 0 13
32098: PUSH
32099: FOR_IN
32100: IFFALSE 32158
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
32102: LD_VAR 0 1
32106: PPUSH
32107: LD_STRING M
32109: PUSH
32110: LD_VAR 0 6
32114: PUSH
32115: LD_INT 1
32117: ARRAY
32118: PUSH
32119: LD_VAR 0 6
32123: PUSH
32124: LD_INT 2
32126: ARRAY
32127: PUSH
32128: LD_INT 0
32130: PUSH
32131: LD_INT 0
32133: PUSH
32134: LD_INT 0
32136: PUSH
32137: LD_INT 0
32139: PUSH
32140: EMPTY
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: PUSH
32149: EMPTY
32150: LIST
32151: PPUSH
32152: CALL_OW 447
32156: GO 32099
32158: POP
32159: POP
// end ;
32160: LD_VAR 0 5
32164: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
32165: LD_EXP 101
32169: NOT
32170: IFFALSE 32220
32172: GO 32174
32174: DISABLE
// begin initHack := true ;
32175: LD_ADDR_EXP 101
32179: PUSH
32180: LD_INT 1
32182: ST_TO_ADDR
// hackTanks := [ ] ;
32183: LD_ADDR_EXP 102
32187: PUSH
32188: EMPTY
32189: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
32190: LD_ADDR_EXP 103
32194: PUSH
32195: EMPTY
32196: ST_TO_ADDR
// hackLimit := 3 ;
32197: LD_ADDR_EXP 104
32201: PUSH
32202: LD_INT 3
32204: ST_TO_ADDR
// hackDist := 12 ;
32205: LD_ADDR_EXP 105
32209: PUSH
32210: LD_INT 12
32212: ST_TO_ADDR
// hackCounter := [ ] ;
32213: LD_ADDR_EXP 106
32217: PUSH
32218: EMPTY
32219: ST_TO_ADDR
// end ;
32220: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
32221: LD_EXP 101
32225: PUSH
32226: LD_INT 34
32228: PUSH
32229: LD_INT 99
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PPUSH
32236: CALL_OW 69
32240: AND
32241: IFFALSE 32494
32243: GO 32245
32245: DISABLE
32246: LD_INT 0
32248: PPUSH
32249: PPUSH
// begin enable ;
32250: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
32251: LD_ADDR_VAR 0 1
32255: PUSH
32256: LD_INT 34
32258: PUSH
32259: LD_INT 99
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: PPUSH
32266: CALL_OW 69
32270: PUSH
32271: FOR_IN
32272: IFFALSE 32492
// begin if not i in hackTanks then
32274: LD_VAR 0 1
32278: PUSH
32279: LD_EXP 102
32283: IN
32284: NOT
32285: IFFALSE 32368
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
32287: LD_ADDR_EXP 102
32291: PUSH
32292: LD_EXP 102
32296: PPUSH
32297: LD_EXP 102
32301: PUSH
32302: LD_INT 1
32304: PLUS
32305: PPUSH
32306: LD_VAR 0 1
32310: PPUSH
32311: CALL_OW 1
32315: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
32316: LD_ADDR_EXP 103
32320: PUSH
32321: LD_EXP 103
32325: PPUSH
32326: LD_EXP 103
32330: PUSH
32331: LD_INT 1
32333: PLUS
32334: PPUSH
32335: EMPTY
32336: PPUSH
32337: CALL_OW 1
32341: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
32342: LD_ADDR_EXP 106
32346: PUSH
32347: LD_EXP 106
32351: PPUSH
32352: LD_EXP 106
32356: PUSH
32357: LD_INT 1
32359: PLUS
32360: PPUSH
32361: EMPTY
32362: PPUSH
32363: CALL_OW 1
32367: ST_TO_ADDR
// end ; if not IsOk ( i ) then
32368: LD_VAR 0 1
32372: PPUSH
32373: CALL_OW 302
32377: NOT
32378: IFFALSE 32391
// begin HackUnlinkAll ( i ) ;
32380: LD_VAR 0 1
32384: PPUSH
32385: CALL 32497 0 1
// continue ;
32389: GO 32271
// end ; HackCheckCapturedStatus ( i ) ;
32391: LD_VAR 0 1
32395: PPUSH
32396: CALL 32940 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
32400: LD_ADDR_VAR 0 2
32404: PUSH
32405: LD_INT 81
32407: PUSH
32408: LD_VAR 0 1
32412: PPUSH
32413: CALL_OW 255
32417: PUSH
32418: EMPTY
32419: LIST
32420: LIST
32421: PUSH
32422: LD_INT 33
32424: PUSH
32425: LD_INT 3
32427: PUSH
32428: EMPTY
32429: LIST
32430: LIST
32431: PUSH
32432: LD_INT 91
32434: PUSH
32435: LD_VAR 0 1
32439: PUSH
32440: LD_EXP 105
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: LIST
32449: PUSH
32450: LD_INT 50
32452: PUSH
32453: EMPTY
32454: LIST
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: LIST
32460: LIST
32461: PPUSH
32462: CALL_OW 69
32466: ST_TO_ADDR
// if not tmp then
32467: LD_VAR 0 2
32471: NOT
32472: IFFALSE 32476
// continue ;
32474: GO 32271
// HackLink ( i , tmp ) ;
32476: LD_VAR 0 1
32480: PPUSH
32481: LD_VAR 0 2
32485: PPUSH
32486: CALL 32633 0 2
// end ;
32490: GO 32271
32492: POP
32493: POP
// end ;
32494: PPOPN 2
32496: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
32497: LD_INT 0
32499: PPUSH
32500: PPUSH
32501: PPUSH
// if not hack in hackTanks then
32502: LD_VAR 0 1
32506: PUSH
32507: LD_EXP 102
32511: IN
32512: NOT
32513: IFFALSE 32517
// exit ;
32515: GO 32628
// index := GetElementIndex ( hackTanks , hack ) ;
32517: LD_ADDR_VAR 0 4
32521: PUSH
32522: LD_EXP 102
32526: PPUSH
32527: LD_VAR 0 1
32531: PPUSH
32532: CALL 40245 0 2
32536: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
32537: LD_EXP 103
32541: PUSH
32542: LD_VAR 0 4
32546: ARRAY
32547: IFFALSE 32628
// begin for i in hackTanksCaptured [ index ] do
32549: LD_ADDR_VAR 0 3
32553: PUSH
32554: LD_EXP 103
32558: PUSH
32559: LD_VAR 0 4
32563: ARRAY
32564: PUSH
32565: FOR_IN
32566: IFFALSE 32592
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
32568: LD_VAR 0 3
32572: PUSH
32573: LD_INT 1
32575: ARRAY
32576: PPUSH
32577: LD_VAR 0 3
32581: PUSH
32582: LD_INT 2
32584: ARRAY
32585: PPUSH
32586: CALL_OW 235
32590: GO 32565
32592: POP
32593: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
32594: LD_ADDR_EXP 103
32598: PUSH
32599: LD_EXP 103
32603: PPUSH
32604: LD_VAR 0 4
32608: PPUSH
32609: EMPTY
32610: PPUSH
32611: CALL_OW 1
32615: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
32616: LD_VAR 0 1
32620: PPUSH
32621: LD_INT 0
32623: PPUSH
32624: CALL_OW 505
// end ; end ;
32628: LD_VAR 0 2
32632: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
32633: LD_INT 0
32635: PPUSH
32636: PPUSH
32637: PPUSH
// if not hack in hackTanks or not vehicles then
32638: LD_VAR 0 1
32642: PUSH
32643: LD_EXP 102
32647: IN
32648: NOT
32649: PUSH
32650: LD_VAR 0 2
32654: NOT
32655: OR
32656: IFFALSE 32660
// exit ;
32658: GO 32935
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
32660: LD_ADDR_VAR 0 2
32664: PUSH
32665: LD_VAR 0 1
32669: PPUSH
32670: LD_VAR 0 2
32674: PPUSH
32675: LD_INT 1
32677: PPUSH
32678: LD_INT 1
32680: PPUSH
32681: CALL 40895 0 4
32685: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
32686: LD_ADDR_VAR 0 5
32690: PUSH
32691: LD_EXP 102
32695: PPUSH
32696: LD_VAR 0 1
32700: PPUSH
32701: CALL 40245 0 2
32705: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
32706: LD_EXP 103
32710: PUSH
32711: LD_VAR 0 5
32715: ARRAY
32716: PUSH
32717: LD_EXP 104
32721: LESS
32722: IFFALSE 32911
// begin for i := 1 to vehicles do
32724: LD_ADDR_VAR 0 4
32728: PUSH
32729: DOUBLE
32730: LD_INT 1
32732: DEC
32733: ST_TO_ADDR
32734: LD_VAR 0 2
32738: PUSH
32739: FOR_TO
32740: IFFALSE 32909
// begin if hackTanksCaptured [ index ] = hackLimit then
32742: LD_EXP 103
32746: PUSH
32747: LD_VAR 0 5
32751: ARRAY
32752: PUSH
32753: LD_EXP 104
32757: EQUAL
32758: IFFALSE 32762
// break ;
32760: GO 32909
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
32762: LD_ADDR_EXP 106
32766: PUSH
32767: LD_EXP 106
32771: PPUSH
32772: LD_VAR 0 5
32776: PPUSH
32777: LD_EXP 106
32781: PUSH
32782: LD_VAR 0 5
32786: ARRAY
32787: PUSH
32788: LD_INT 1
32790: PLUS
32791: PPUSH
32792: CALL_OW 1
32796: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
32797: LD_ADDR_EXP 103
32801: PUSH
32802: LD_EXP 103
32806: PPUSH
32807: LD_VAR 0 5
32811: PUSH
32812: LD_EXP 103
32816: PUSH
32817: LD_VAR 0 5
32821: ARRAY
32822: PUSH
32823: LD_INT 1
32825: PLUS
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: PPUSH
32831: LD_VAR 0 2
32835: PUSH
32836: LD_VAR 0 4
32840: ARRAY
32841: PUSH
32842: LD_VAR 0 2
32846: PUSH
32847: LD_VAR 0 4
32851: ARRAY
32852: PPUSH
32853: CALL_OW 255
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: PPUSH
32862: CALL 40460 0 3
32866: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
32867: LD_VAR 0 2
32871: PUSH
32872: LD_VAR 0 4
32876: ARRAY
32877: PPUSH
32878: LD_VAR 0 1
32882: PPUSH
32883: CALL_OW 255
32887: PPUSH
32888: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
32892: LD_VAR 0 2
32896: PUSH
32897: LD_VAR 0 4
32901: ARRAY
32902: PPUSH
32903: CALL_OW 141
// end ;
32907: GO 32739
32909: POP
32910: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
32911: LD_VAR 0 1
32915: PPUSH
32916: LD_EXP 103
32920: PUSH
32921: LD_VAR 0 5
32925: ARRAY
32926: PUSH
32927: LD_INT 0
32929: PLUS
32930: PPUSH
32931: CALL_OW 505
// end ;
32935: LD_VAR 0 3
32939: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
32940: LD_INT 0
32942: PPUSH
32943: PPUSH
32944: PPUSH
32945: PPUSH
// if not hack in hackTanks then
32946: LD_VAR 0 1
32950: PUSH
32951: LD_EXP 102
32955: IN
32956: NOT
32957: IFFALSE 32961
// exit ;
32959: GO 33201
// index := GetElementIndex ( hackTanks , hack ) ;
32961: LD_ADDR_VAR 0 4
32965: PUSH
32966: LD_EXP 102
32970: PPUSH
32971: LD_VAR 0 1
32975: PPUSH
32976: CALL 40245 0 2
32980: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
32981: LD_ADDR_VAR 0 3
32985: PUSH
32986: DOUBLE
32987: LD_EXP 103
32991: PUSH
32992: LD_VAR 0 4
32996: ARRAY
32997: INC
32998: ST_TO_ADDR
32999: LD_INT 1
33001: PUSH
33002: FOR_DOWNTO
33003: IFFALSE 33175
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
33005: LD_ADDR_VAR 0 5
33009: PUSH
33010: LD_EXP 103
33014: PUSH
33015: LD_VAR 0 4
33019: ARRAY
33020: PUSH
33021: LD_VAR 0 3
33025: ARRAY
33026: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
33027: LD_VAR 0 5
33031: PUSH
33032: LD_INT 1
33034: ARRAY
33035: PPUSH
33036: CALL_OW 302
33040: NOT
33041: PUSH
33042: LD_VAR 0 5
33046: PUSH
33047: LD_INT 1
33049: ARRAY
33050: PPUSH
33051: CALL_OW 255
33055: PUSH
33056: LD_VAR 0 1
33060: PPUSH
33061: CALL_OW 255
33065: NONEQUAL
33066: OR
33067: IFFALSE 33173
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
33069: LD_VAR 0 5
33073: PUSH
33074: LD_INT 1
33076: ARRAY
33077: PPUSH
33078: CALL_OW 305
33082: PUSH
33083: LD_VAR 0 5
33087: PUSH
33088: LD_INT 1
33090: ARRAY
33091: PPUSH
33092: CALL_OW 255
33096: PUSH
33097: LD_VAR 0 1
33101: PPUSH
33102: CALL_OW 255
33106: EQUAL
33107: AND
33108: IFFALSE 33132
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
33110: LD_VAR 0 5
33114: PUSH
33115: LD_INT 1
33117: ARRAY
33118: PPUSH
33119: LD_VAR 0 5
33123: PUSH
33124: LD_INT 2
33126: ARRAY
33127: PPUSH
33128: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
33132: LD_ADDR_EXP 103
33136: PUSH
33137: LD_EXP 103
33141: PPUSH
33142: LD_VAR 0 4
33146: PPUSH
33147: LD_EXP 103
33151: PUSH
33152: LD_VAR 0 4
33156: ARRAY
33157: PPUSH
33158: LD_VAR 0 3
33162: PPUSH
33163: CALL_OW 3
33167: PPUSH
33168: CALL_OW 1
33172: ST_TO_ADDR
// end ; end ;
33173: GO 33002
33175: POP
33176: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33177: LD_VAR 0 1
33181: PPUSH
33182: LD_EXP 103
33186: PUSH
33187: LD_VAR 0 4
33191: ARRAY
33192: PUSH
33193: LD_INT 0
33195: PLUS
33196: PPUSH
33197: CALL_OW 505
// end ;
33201: LD_VAR 0 2
33205: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
33206: LD_INT 0
33208: PPUSH
33209: PPUSH
33210: PPUSH
33211: PPUSH
// if not hack in hackTanks then
33212: LD_VAR 0 1
33216: PUSH
33217: LD_EXP 102
33221: IN
33222: NOT
33223: IFFALSE 33227
// exit ;
33225: GO 33312
// index := GetElementIndex ( hackTanks , hack ) ;
33227: LD_ADDR_VAR 0 5
33231: PUSH
33232: LD_EXP 102
33236: PPUSH
33237: LD_VAR 0 1
33241: PPUSH
33242: CALL 40245 0 2
33246: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
33247: LD_ADDR_VAR 0 4
33251: PUSH
33252: DOUBLE
33253: LD_INT 1
33255: DEC
33256: ST_TO_ADDR
33257: LD_EXP 103
33261: PUSH
33262: LD_VAR 0 5
33266: ARRAY
33267: PUSH
33268: FOR_TO
33269: IFFALSE 33310
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
33271: LD_EXP 103
33275: PUSH
33276: LD_VAR 0 5
33280: ARRAY
33281: PUSH
33282: LD_VAR 0 4
33286: ARRAY
33287: PUSH
33288: LD_INT 1
33290: ARRAY
33291: PUSH
33292: LD_VAR 0 2
33296: EQUAL
33297: IFFALSE 33308
// KillUnit ( vehicle ) ;
33299: LD_VAR 0 2
33303: PPUSH
33304: CALL_OW 66
33308: GO 33268
33310: POP
33311: POP
// end ;
33312: LD_VAR 0 3
33316: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
33317: LD_EXP 107
33321: NOT
33322: IFFALSE 33357
33324: GO 33326
33326: DISABLE
// begin initMiner := true ;
33327: LD_ADDR_EXP 107
33331: PUSH
33332: LD_INT 1
33334: ST_TO_ADDR
// minersList := [ ] ;
33335: LD_ADDR_EXP 108
33339: PUSH
33340: EMPTY
33341: ST_TO_ADDR
// minerMinesList := [ ] ;
33342: LD_ADDR_EXP 109
33346: PUSH
33347: EMPTY
33348: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
33349: LD_ADDR_EXP 110
33353: PUSH
33354: LD_INT 5
33356: ST_TO_ADDR
// end ;
33357: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
33358: LD_EXP 107
33362: PUSH
33363: LD_INT 34
33365: PUSH
33366: LD_INT 81
33368: PUSH
33369: EMPTY
33370: LIST
33371: LIST
33372: PPUSH
33373: CALL_OW 69
33377: AND
33378: IFFALSE 33839
33380: GO 33382
33382: DISABLE
33383: LD_INT 0
33385: PPUSH
33386: PPUSH
33387: PPUSH
33388: PPUSH
// begin enable ;
33389: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
33390: LD_ADDR_VAR 0 1
33394: PUSH
33395: LD_INT 34
33397: PUSH
33398: LD_INT 81
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: PPUSH
33405: CALL_OW 69
33409: PUSH
33410: FOR_IN
33411: IFFALSE 33483
// begin if not i in minersList then
33413: LD_VAR 0 1
33417: PUSH
33418: LD_EXP 108
33422: IN
33423: NOT
33424: IFFALSE 33481
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
33426: LD_ADDR_EXP 108
33430: PUSH
33431: LD_EXP 108
33435: PPUSH
33436: LD_EXP 108
33440: PUSH
33441: LD_INT 1
33443: PLUS
33444: PPUSH
33445: LD_VAR 0 1
33449: PPUSH
33450: CALL_OW 1
33454: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
33455: LD_ADDR_EXP 109
33459: PUSH
33460: LD_EXP 109
33464: PPUSH
33465: LD_EXP 109
33469: PUSH
33470: LD_INT 1
33472: PLUS
33473: PPUSH
33474: EMPTY
33475: PPUSH
33476: CALL_OW 1
33480: ST_TO_ADDR
// end end ;
33481: GO 33410
33483: POP
33484: POP
// for i := minerMinesList downto 1 do
33485: LD_ADDR_VAR 0 1
33489: PUSH
33490: DOUBLE
33491: LD_EXP 109
33495: INC
33496: ST_TO_ADDR
33497: LD_INT 1
33499: PUSH
33500: FOR_DOWNTO
33501: IFFALSE 33837
// begin if IsLive ( minersList [ i ] ) then
33503: LD_EXP 108
33507: PUSH
33508: LD_VAR 0 1
33512: ARRAY
33513: PPUSH
33514: CALL_OW 300
33518: IFFALSE 33546
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
33520: LD_EXP 108
33524: PUSH
33525: LD_VAR 0 1
33529: ARRAY
33530: PPUSH
33531: LD_EXP 109
33535: PUSH
33536: LD_VAR 0 1
33540: ARRAY
33541: PPUSH
33542: CALL_OW 505
// if not minerMinesList [ i ] then
33546: LD_EXP 109
33550: PUSH
33551: LD_VAR 0 1
33555: ARRAY
33556: NOT
33557: IFFALSE 33561
// continue ;
33559: GO 33500
// for j := minerMinesList [ i ] downto 1 do
33561: LD_ADDR_VAR 0 2
33565: PUSH
33566: DOUBLE
33567: LD_EXP 109
33571: PUSH
33572: LD_VAR 0 1
33576: ARRAY
33577: INC
33578: ST_TO_ADDR
33579: LD_INT 1
33581: PUSH
33582: FOR_DOWNTO
33583: IFFALSE 33833
// begin side := GetSide ( minersList [ i ] ) ;
33585: LD_ADDR_VAR 0 3
33589: PUSH
33590: LD_EXP 108
33594: PUSH
33595: LD_VAR 0 1
33599: ARRAY
33600: PPUSH
33601: CALL_OW 255
33605: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
33606: LD_ADDR_VAR 0 4
33610: PUSH
33611: LD_EXP 109
33615: PUSH
33616: LD_VAR 0 1
33620: ARRAY
33621: PUSH
33622: LD_VAR 0 2
33626: ARRAY
33627: PUSH
33628: LD_INT 1
33630: ARRAY
33631: PPUSH
33632: LD_EXP 109
33636: PUSH
33637: LD_VAR 0 1
33641: ARRAY
33642: PUSH
33643: LD_VAR 0 2
33647: ARRAY
33648: PUSH
33649: LD_INT 2
33651: ARRAY
33652: PPUSH
33653: CALL_OW 428
33657: ST_TO_ADDR
// if not tmp then
33658: LD_VAR 0 4
33662: NOT
33663: IFFALSE 33667
// continue ;
33665: GO 33582
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
33667: LD_VAR 0 4
33671: PUSH
33672: LD_INT 81
33674: PUSH
33675: LD_VAR 0 3
33679: PUSH
33680: EMPTY
33681: LIST
33682: LIST
33683: PPUSH
33684: CALL_OW 69
33688: IN
33689: PUSH
33690: LD_EXP 109
33694: PUSH
33695: LD_VAR 0 1
33699: ARRAY
33700: PUSH
33701: LD_VAR 0 2
33705: ARRAY
33706: PUSH
33707: LD_INT 1
33709: ARRAY
33710: PPUSH
33711: LD_EXP 109
33715: PUSH
33716: LD_VAR 0 1
33720: ARRAY
33721: PUSH
33722: LD_VAR 0 2
33726: ARRAY
33727: PUSH
33728: LD_INT 2
33730: ARRAY
33731: PPUSH
33732: CALL_OW 458
33736: AND
33737: IFFALSE 33831
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
33739: LD_EXP 109
33743: PUSH
33744: LD_VAR 0 1
33748: ARRAY
33749: PUSH
33750: LD_VAR 0 2
33754: ARRAY
33755: PUSH
33756: LD_INT 1
33758: ARRAY
33759: PPUSH
33760: LD_EXP 109
33764: PUSH
33765: LD_VAR 0 1
33769: ARRAY
33770: PUSH
33771: LD_VAR 0 2
33775: ARRAY
33776: PUSH
33777: LD_INT 2
33779: ARRAY
33780: PPUSH
33781: LD_VAR 0 3
33785: PPUSH
33786: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
33790: LD_ADDR_EXP 109
33794: PUSH
33795: LD_EXP 109
33799: PPUSH
33800: LD_VAR 0 1
33804: PPUSH
33805: LD_EXP 109
33809: PUSH
33810: LD_VAR 0 1
33814: ARRAY
33815: PPUSH
33816: LD_VAR 0 2
33820: PPUSH
33821: CALL_OW 3
33825: PPUSH
33826: CALL_OW 1
33830: ST_TO_ADDR
// end ; end ;
33831: GO 33582
33833: POP
33834: POP
// end ;
33835: GO 33500
33837: POP
33838: POP
// end ;
33839: PPOPN 4
33841: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
33842: LD_INT 0
33844: PPUSH
33845: PPUSH
// result := false ;
33846: LD_ADDR_VAR 0 4
33850: PUSH
33851: LD_INT 0
33853: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
33854: LD_VAR 0 1
33858: PPUSH
33859: CALL_OW 264
33863: PUSH
33864: LD_INT 81
33866: EQUAL
33867: NOT
33868: IFFALSE 33872
// exit ;
33870: GO 34112
// index := GetElementIndex ( minersList , unit ) ;
33872: LD_ADDR_VAR 0 5
33876: PUSH
33877: LD_EXP 108
33881: PPUSH
33882: LD_VAR 0 1
33886: PPUSH
33887: CALL 40245 0 2
33891: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
33892: LD_EXP 109
33896: PUSH
33897: LD_VAR 0 5
33901: ARRAY
33902: PUSH
33903: LD_EXP 110
33907: GREATEREQUAL
33908: IFFALSE 33912
// exit ;
33910: GO 34112
// ComMoveXY ( unit , x , y ) ;
33912: LD_VAR 0 1
33916: PPUSH
33917: LD_VAR 0 2
33921: PPUSH
33922: LD_VAR 0 3
33926: PPUSH
33927: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
33931: LD_INT 35
33933: PPUSH
33934: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
33938: LD_VAR 0 1
33942: PPUSH
33943: LD_VAR 0 2
33947: PPUSH
33948: LD_VAR 0 3
33952: PPUSH
33953: CALL 71600 0 3
33957: NOT
33958: PUSH
33959: LD_VAR 0 1
33963: PPUSH
33964: CALL_OW 314
33968: AND
33969: IFFALSE 33973
// exit ;
33971: GO 34112
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
33973: LD_VAR 0 2
33977: PPUSH
33978: LD_VAR 0 3
33982: PPUSH
33983: CALL_OW 428
33987: PUSH
33988: LD_VAR 0 1
33992: EQUAL
33993: PUSH
33994: LD_VAR 0 1
33998: PPUSH
33999: CALL_OW 314
34003: NOT
34004: AND
34005: IFFALSE 33931
// PlaySoundXY ( x , y , PlantMine ) ;
34007: LD_VAR 0 2
34011: PPUSH
34012: LD_VAR 0 3
34016: PPUSH
34017: LD_STRING PlantMine
34019: PPUSH
34020: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
34024: LD_VAR 0 2
34028: PPUSH
34029: LD_VAR 0 3
34033: PPUSH
34034: LD_VAR 0 1
34038: PPUSH
34039: CALL_OW 255
34043: PPUSH
34044: LD_INT 0
34046: PPUSH
34047: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
34051: LD_ADDR_EXP 109
34055: PUSH
34056: LD_EXP 109
34060: PPUSH
34061: LD_VAR 0 5
34065: PUSH
34066: LD_EXP 109
34070: PUSH
34071: LD_VAR 0 5
34075: ARRAY
34076: PUSH
34077: LD_INT 1
34079: PLUS
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: PPUSH
34085: LD_VAR 0 2
34089: PUSH
34090: LD_VAR 0 3
34094: PUSH
34095: EMPTY
34096: LIST
34097: LIST
34098: PPUSH
34099: CALL 40460 0 3
34103: ST_TO_ADDR
// result := true ;
34104: LD_ADDR_VAR 0 4
34108: PUSH
34109: LD_INT 1
34111: ST_TO_ADDR
// end ;
34112: LD_VAR 0 4
34116: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
34117: LD_INT 0
34119: PPUSH
34120: PPUSH
34121: PPUSH
// if not unit in minersList then
34122: LD_VAR 0 1
34126: PUSH
34127: LD_EXP 108
34131: IN
34132: NOT
34133: IFFALSE 34137
// exit ;
34135: GO 34529
// index := GetElementIndex ( minersList , unit ) ;
34137: LD_ADDR_VAR 0 6
34141: PUSH
34142: LD_EXP 108
34146: PPUSH
34147: LD_VAR 0 1
34151: PPUSH
34152: CALL 40245 0 2
34156: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
34157: LD_ADDR_VAR 0 5
34161: PUSH
34162: DOUBLE
34163: LD_EXP 109
34167: PUSH
34168: LD_VAR 0 6
34172: ARRAY
34173: INC
34174: ST_TO_ADDR
34175: LD_INT 1
34177: PUSH
34178: FOR_DOWNTO
34179: IFFALSE 34340
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
34181: LD_EXP 109
34185: PUSH
34186: LD_VAR 0 6
34190: ARRAY
34191: PUSH
34192: LD_VAR 0 5
34196: ARRAY
34197: PUSH
34198: LD_INT 1
34200: ARRAY
34201: PUSH
34202: LD_VAR 0 2
34206: EQUAL
34207: PUSH
34208: LD_EXP 109
34212: PUSH
34213: LD_VAR 0 6
34217: ARRAY
34218: PUSH
34219: LD_VAR 0 5
34223: ARRAY
34224: PUSH
34225: LD_INT 2
34227: ARRAY
34228: PUSH
34229: LD_VAR 0 3
34233: EQUAL
34234: AND
34235: IFFALSE 34338
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
34237: LD_EXP 109
34241: PUSH
34242: LD_VAR 0 6
34246: ARRAY
34247: PUSH
34248: LD_VAR 0 5
34252: ARRAY
34253: PUSH
34254: LD_INT 1
34256: ARRAY
34257: PPUSH
34258: LD_EXP 109
34262: PUSH
34263: LD_VAR 0 6
34267: ARRAY
34268: PUSH
34269: LD_VAR 0 5
34273: ARRAY
34274: PUSH
34275: LD_INT 2
34277: ARRAY
34278: PPUSH
34279: LD_VAR 0 1
34283: PPUSH
34284: CALL_OW 255
34288: PPUSH
34289: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
34293: LD_ADDR_EXP 109
34297: PUSH
34298: LD_EXP 109
34302: PPUSH
34303: LD_VAR 0 6
34307: PPUSH
34308: LD_EXP 109
34312: PUSH
34313: LD_VAR 0 6
34317: ARRAY
34318: PPUSH
34319: LD_VAR 0 5
34323: PPUSH
34324: CALL_OW 3
34328: PPUSH
34329: CALL_OW 1
34333: ST_TO_ADDR
// exit ;
34334: POP
34335: POP
34336: GO 34529
// end ; end ;
34338: GO 34178
34340: POP
34341: POP
// for i := minerMinesList [ index ] downto 1 do
34342: LD_ADDR_VAR 0 5
34346: PUSH
34347: DOUBLE
34348: LD_EXP 109
34352: PUSH
34353: LD_VAR 0 6
34357: ARRAY
34358: INC
34359: ST_TO_ADDR
34360: LD_INT 1
34362: PUSH
34363: FOR_DOWNTO
34364: IFFALSE 34527
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
34366: LD_EXP 109
34370: PUSH
34371: LD_VAR 0 6
34375: ARRAY
34376: PUSH
34377: LD_VAR 0 5
34381: ARRAY
34382: PUSH
34383: LD_INT 1
34385: ARRAY
34386: PPUSH
34387: LD_EXP 109
34391: PUSH
34392: LD_VAR 0 6
34396: ARRAY
34397: PUSH
34398: LD_VAR 0 5
34402: ARRAY
34403: PUSH
34404: LD_INT 2
34406: ARRAY
34407: PPUSH
34408: LD_VAR 0 2
34412: PPUSH
34413: LD_VAR 0 3
34417: PPUSH
34418: CALL_OW 298
34422: PUSH
34423: LD_INT 6
34425: LESS
34426: IFFALSE 34525
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
34428: LD_EXP 109
34432: PUSH
34433: LD_VAR 0 6
34437: ARRAY
34438: PUSH
34439: LD_VAR 0 5
34443: ARRAY
34444: PUSH
34445: LD_INT 1
34447: ARRAY
34448: PPUSH
34449: LD_EXP 109
34453: PUSH
34454: LD_VAR 0 6
34458: ARRAY
34459: PUSH
34460: LD_VAR 0 5
34464: ARRAY
34465: PUSH
34466: LD_INT 2
34468: ARRAY
34469: PPUSH
34470: LD_VAR 0 1
34474: PPUSH
34475: CALL_OW 255
34479: PPUSH
34480: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
34484: LD_ADDR_EXP 109
34488: PUSH
34489: LD_EXP 109
34493: PPUSH
34494: LD_VAR 0 6
34498: PPUSH
34499: LD_EXP 109
34503: PUSH
34504: LD_VAR 0 6
34508: ARRAY
34509: PPUSH
34510: LD_VAR 0 5
34514: PPUSH
34515: CALL_OW 3
34519: PPUSH
34520: CALL_OW 1
34524: ST_TO_ADDR
// end ; end ;
34525: GO 34363
34527: POP
34528: POP
// end ;
34529: LD_VAR 0 4
34533: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
34534: LD_INT 0
34536: PPUSH
34537: PPUSH
34538: PPUSH
34539: PPUSH
34540: PPUSH
34541: PPUSH
34542: PPUSH
34543: PPUSH
34544: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
34545: LD_VAR 0 1
34549: PPUSH
34550: CALL_OW 264
34554: PUSH
34555: LD_INT 81
34557: EQUAL
34558: NOT
34559: PUSH
34560: LD_VAR 0 1
34564: PUSH
34565: LD_EXP 108
34569: IN
34570: NOT
34571: OR
34572: IFFALSE 34576
// exit ;
34574: GO 34898
// index := GetElementIndex ( minersList , unit ) ;
34576: LD_ADDR_VAR 0 6
34580: PUSH
34581: LD_EXP 108
34585: PPUSH
34586: LD_VAR 0 1
34590: PPUSH
34591: CALL 40245 0 2
34595: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
34596: LD_ADDR_VAR 0 8
34600: PUSH
34601: LD_EXP 110
34605: PUSH
34606: LD_EXP 109
34610: PUSH
34611: LD_VAR 0 6
34615: ARRAY
34616: MINUS
34617: ST_TO_ADDR
// if not minesFreeAmount then
34618: LD_VAR 0 8
34622: NOT
34623: IFFALSE 34627
// exit ;
34625: GO 34898
// tmp := [ ] ;
34627: LD_ADDR_VAR 0 7
34631: PUSH
34632: EMPTY
34633: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
34634: LD_ADDR_VAR 0 5
34638: PUSH
34639: DOUBLE
34640: LD_INT 1
34642: DEC
34643: ST_TO_ADDR
34644: LD_VAR 0 8
34648: PUSH
34649: FOR_TO
34650: IFFALSE 34845
// begin _d := rand ( 0 , 5 ) ;
34652: LD_ADDR_VAR 0 11
34656: PUSH
34657: LD_INT 0
34659: PPUSH
34660: LD_INT 5
34662: PPUSH
34663: CALL_OW 12
34667: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
34668: LD_ADDR_VAR 0 12
34672: PUSH
34673: LD_INT 2
34675: PPUSH
34676: LD_INT 6
34678: PPUSH
34679: CALL_OW 12
34683: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
34684: LD_ADDR_VAR 0 9
34688: PUSH
34689: LD_VAR 0 2
34693: PPUSH
34694: LD_VAR 0 11
34698: PPUSH
34699: LD_VAR 0 12
34703: PPUSH
34704: CALL_OW 272
34708: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
34709: LD_ADDR_VAR 0 10
34713: PUSH
34714: LD_VAR 0 3
34718: PPUSH
34719: LD_VAR 0 11
34723: PPUSH
34724: LD_VAR 0 12
34728: PPUSH
34729: CALL_OW 273
34733: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
34734: LD_VAR 0 9
34738: PPUSH
34739: LD_VAR 0 10
34743: PPUSH
34744: CALL_OW 488
34748: PUSH
34749: LD_VAR 0 9
34753: PUSH
34754: LD_VAR 0 10
34758: PUSH
34759: EMPTY
34760: LIST
34761: LIST
34762: PUSH
34763: LD_VAR 0 7
34767: IN
34768: NOT
34769: AND
34770: PUSH
34771: LD_VAR 0 9
34775: PPUSH
34776: LD_VAR 0 10
34780: PPUSH
34781: CALL_OW 458
34785: NOT
34786: AND
34787: IFFALSE 34829
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
34789: LD_ADDR_VAR 0 7
34793: PUSH
34794: LD_VAR 0 7
34798: PPUSH
34799: LD_VAR 0 7
34803: PUSH
34804: LD_INT 1
34806: PLUS
34807: PPUSH
34808: LD_VAR 0 9
34812: PUSH
34813: LD_VAR 0 10
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: PPUSH
34822: CALL_OW 1
34826: ST_TO_ADDR
34827: GO 34843
// i := i - 1 ;
34829: LD_ADDR_VAR 0 5
34833: PUSH
34834: LD_VAR 0 5
34838: PUSH
34839: LD_INT 1
34841: MINUS
34842: ST_TO_ADDR
// end ;
34843: GO 34649
34845: POP
34846: POP
// for i in tmp do
34847: LD_ADDR_VAR 0 5
34851: PUSH
34852: LD_VAR 0 7
34856: PUSH
34857: FOR_IN
34858: IFFALSE 34896
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
34860: LD_VAR 0 1
34864: PPUSH
34865: LD_VAR 0 5
34869: PUSH
34870: LD_INT 1
34872: ARRAY
34873: PPUSH
34874: LD_VAR 0 5
34878: PUSH
34879: LD_INT 2
34881: ARRAY
34882: PPUSH
34883: CALL 33842 0 3
34887: NOT
34888: IFFALSE 34894
// exit ;
34890: POP
34891: POP
34892: GO 34898
34894: GO 34857
34896: POP
34897: POP
// end ;
34898: LD_VAR 0 4
34902: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
34903: LD_INT 0
34905: PPUSH
34906: PPUSH
34907: PPUSH
34908: PPUSH
34909: PPUSH
34910: PPUSH
34911: PPUSH
// if not GetClass ( unit ) = class_sniper then
34912: LD_VAR 0 1
34916: PPUSH
34917: CALL_OW 257
34921: PUSH
34922: LD_INT 5
34924: EQUAL
34925: NOT
34926: IFFALSE 34930
// exit ;
34928: GO 35318
// dist := 8 ;
34930: LD_ADDR_VAR 0 5
34934: PUSH
34935: LD_INT 8
34937: ST_TO_ADDR
// viewRange := 12 ;
34938: LD_ADDR_VAR 0 7
34942: PUSH
34943: LD_INT 12
34945: ST_TO_ADDR
// side := GetSide ( unit ) ;
34946: LD_ADDR_VAR 0 6
34950: PUSH
34951: LD_VAR 0 1
34955: PPUSH
34956: CALL_OW 255
34960: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
34961: LD_INT 61
34963: PPUSH
34964: LD_VAR 0 6
34968: PPUSH
34969: CALL_OW 321
34973: PUSH
34974: LD_INT 2
34976: EQUAL
34977: IFFALSE 34987
// viewRange := 16 ;
34979: LD_ADDR_VAR 0 7
34983: PUSH
34984: LD_INT 16
34986: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
34987: LD_VAR 0 1
34991: PPUSH
34992: LD_VAR 0 2
34996: PPUSH
34997: LD_VAR 0 3
35001: PPUSH
35002: CALL_OW 297
35006: PUSH
35007: LD_VAR 0 5
35011: GREATER
35012: IFFALSE 35091
// begin ComMoveXY ( unit , x , y ) ;
35014: LD_VAR 0 1
35018: PPUSH
35019: LD_VAR 0 2
35023: PPUSH
35024: LD_VAR 0 3
35028: PPUSH
35029: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35033: LD_INT 35
35035: PPUSH
35036: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
35040: LD_VAR 0 1
35044: PPUSH
35045: LD_VAR 0 2
35049: PPUSH
35050: LD_VAR 0 3
35054: PPUSH
35055: CALL 71600 0 3
35059: NOT
35060: IFFALSE 35064
// exit ;
35062: GO 35318
// until GetDistUnitXY ( unit , x , y ) < dist ;
35064: LD_VAR 0 1
35068: PPUSH
35069: LD_VAR 0 2
35073: PPUSH
35074: LD_VAR 0 3
35078: PPUSH
35079: CALL_OW 297
35083: PUSH
35084: LD_VAR 0 5
35088: LESS
35089: IFFALSE 35033
// end ; ComTurnXY ( unit , x , y ) ;
35091: LD_VAR 0 1
35095: PPUSH
35096: LD_VAR 0 2
35100: PPUSH
35101: LD_VAR 0 3
35105: PPUSH
35106: CALL_OW 118
// wait ( 5 ) ;
35110: LD_INT 5
35112: PPUSH
35113: CALL_OW 67
// _d := GetDir ( unit ) ;
35117: LD_ADDR_VAR 0 10
35121: PUSH
35122: LD_VAR 0 1
35126: PPUSH
35127: CALL_OW 254
35131: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
35132: LD_ADDR_VAR 0 8
35136: PUSH
35137: LD_VAR 0 1
35141: PPUSH
35142: CALL_OW 250
35146: PPUSH
35147: LD_VAR 0 10
35151: PPUSH
35152: LD_VAR 0 5
35156: PPUSH
35157: CALL_OW 272
35161: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
35162: LD_ADDR_VAR 0 9
35166: PUSH
35167: LD_VAR 0 1
35171: PPUSH
35172: CALL_OW 251
35176: PPUSH
35177: LD_VAR 0 10
35181: PPUSH
35182: LD_VAR 0 5
35186: PPUSH
35187: CALL_OW 273
35191: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35192: LD_VAR 0 8
35196: PPUSH
35197: LD_VAR 0 9
35201: PPUSH
35202: CALL_OW 488
35206: NOT
35207: IFFALSE 35211
// exit ;
35209: GO 35318
// ComAnimCustom ( unit , 1 ) ;
35211: LD_VAR 0 1
35215: PPUSH
35216: LD_INT 1
35218: PPUSH
35219: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
35223: LD_VAR 0 8
35227: PPUSH
35228: LD_VAR 0 9
35232: PPUSH
35233: LD_VAR 0 6
35237: PPUSH
35238: LD_VAR 0 7
35242: PPUSH
35243: CALL_OW 330
// repeat wait ( 1 ) ;
35247: LD_INT 1
35249: PPUSH
35250: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
35254: LD_VAR 0 1
35258: PPUSH
35259: CALL_OW 316
35263: PUSH
35264: LD_VAR 0 1
35268: PPUSH
35269: CALL_OW 314
35273: OR
35274: PUSH
35275: LD_VAR 0 1
35279: PPUSH
35280: CALL_OW 302
35284: NOT
35285: OR
35286: PUSH
35287: LD_VAR 0 1
35291: PPUSH
35292: CALL_OW 301
35296: OR
35297: IFFALSE 35247
// RemoveSeeing ( _x , _y , side ) ;
35299: LD_VAR 0 8
35303: PPUSH
35304: LD_VAR 0 9
35308: PPUSH
35309: LD_VAR 0 6
35313: PPUSH
35314: CALL_OW 331
// end ; end_of_file
35318: LD_VAR 0 4
35322: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
35323: LD_INT 0
35325: PPUSH
35326: PPUSH
// if exist_mode then
35327: LD_VAR 0 2
35331: IFFALSE 35356
// unit := CreateCharacter ( prefix & ident ) else
35333: LD_ADDR_VAR 0 5
35337: PUSH
35338: LD_VAR 0 3
35342: PUSH
35343: LD_VAR 0 1
35347: STR
35348: PPUSH
35349: CALL_OW 34
35353: ST_TO_ADDR
35354: GO 35371
// unit := NewCharacter ( ident ) ;
35356: LD_ADDR_VAR 0 5
35360: PUSH
35361: LD_VAR 0 1
35365: PPUSH
35366: CALL_OW 25
35370: ST_TO_ADDR
// result := unit ;
35371: LD_ADDR_VAR 0 4
35375: PUSH
35376: LD_VAR 0 5
35380: ST_TO_ADDR
// end ;
35381: LD_VAR 0 4
35385: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
35386: LD_INT 0
35388: PPUSH
35389: PPUSH
// if not side or not nation then
35390: LD_VAR 0 1
35394: NOT
35395: PUSH
35396: LD_VAR 0 2
35400: NOT
35401: OR
35402: IFFALSE 35406
// exit ;
35404: GO 36174
// case nation of nation_american :
35406: LD_VAR 0 2
35410: PUSH
35411: LD_INT 1
35413: DOUBLE
35414: EQUAL
35415: IFTRUE 35419
35417: GO 35633
35419: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
35420: LD_ADDR_VAR 0 4
35424: PUSH
35425: LD_INT 35
35427: PUSH
35428: LD_INT 45
35430: PUSH
35431: LD_INT 46
35433: PUSH
35434: LD_INT 47
35436: PUSH
35437: LD_INT 82
35439: PUSH
35440: LD_INT 83
35442: PUSH
35443: LD_INT 84
35445: PUSH
35446: LD_INT 85
35448: PUSH
35449: LD_INT 86
35451: PUSH
35452: LD_INT 1
35454: PUSH
35455: LD_INT 2
35457: PUSH
35458: LD_INT 6
35460: PUSH
35461: LD_INT 15
35463: PUSH
35464: LD_INT 16
35466: PUSH
35467: LD_INT 7
35469: PUSH
35470: LD_INT 12
35472: PUSH
35473: LD_INT 13
35475: PUSH
35476: LD_INT 10
35478: PUSH
35479: LD_INT 14
35481: PUSH
35482: LD_INT 20
35484: PUSH
35485: LD_INT 21
35487: PUSH
35488: LD_INT 22
35490: PUSH
35491: LD_INT 25
35493: PUSH
35494: LD_INT 32
35496: PUSH
35497: LD_INT 27
35499: PUSH
35500: LD_INT 36
35502: PUSH
35503: LD_INT 69
35505: PUSH
35506: LD_INT 39
35508: PUSH
35509: LD_INT 34
35511: PUSH
35512: LD_INT 40
35514: PUSH
35515: LD_INT 48
35517: PUSH
35518: LD_INT 49
35520: PUSH
35521: LD_INT 50
35523: PUSH
35524: LD_INT 51
35526: PUSH
35527: LD_INT 52
35529: PUSH
35530: LD_INT 53
35532: PUSH
35533: LD_INT 54
35535: PUSH
35536: LD_INT 55
35538: PUSH
35539: LD_INT 56
35541: PUSH
35542: LD_INT 57
35544: PUSH
35545: LD_INT 58
35547: PUSH
35548: LD_INT 59
35550: PUSH
35551: LD_INT 60
35553: PUSH
35554: LD_INT 61
35556: PUSH
35557: LD_INT 62
35559: PUSH
35560: LD_INT 80
35562: PUSH
35563: LD_INT 82
35565: PUSH
35566: LD_INT 83
35568: PUSH
35569: LD_INT 84
35571: PUSH
35572: LD_INT 85
35574: PUSH
35575: LD_INT 86
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: LIST
35582: LIST
35583: LIST
35584: LIST
35585: LIST
35586: LIST
35587: LIST
35588: LIST
35589: LIST
35590: LIST
35591: LIST
35592: LIST
35593: LIST
35594: LIST
35595: LIST
35596: LIST
35597: LIST
35598: LIST
35599: LIST
35600: LIST
35601: LIST
35602: LIST
35603: LIST
35604: LIST
35605: LIST
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: ST_TO_ADDR
35631: GO 36098
35633: LD_INT 2
35635: DOUBLE
35636: EQUAL
35637: IFTRUE 35641
35639: GO 35867
35641: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
35642: LD_ADDR_VAR 0 4
35646: PUSH
35647: LD_INT 35
35649: PUSH
35650: LD_INT 45
35652: PUSH
35653: LD_INT 46
35655: PUSH
35656: LD_INT 47
35658: PUSH
35659: LD_INT 82
35661: PUSH
35662: LD_INT 83
35664: PUSH
35665: LD_INT 84
35667: PUSH
35668: LD_INT 85
35670: PUSH
35671: LD_INT 87
35673: PUSH
35674: LD_INT 70
35676: PUSH
35677: LD_INT 1
35679: PUSH
35680: LD_INT 11
35682: PUSH
35683: LD_INT 3
35685: PUSH
35686: LD_INT 4
35688: PUSH
35689: LD_INT 5
35691: PUSH
35692: LD_INT 6
35694: PUSH
35695: LD_INT 15
35697: PUSH
35698: LD_INT 18
35700: PUSH
35701: LD_INT 7
35703: PUSH
35704: LD_INT 17
35706: PUSH
35707: LD_INT 8
35709: PUSH
35710: LD_INT 20
35712: PUSH
35713: LD_INT 21
35715: PUSH
35716: LD_INT 22
35718: PUSH
35719: LD_INT 72
35721: PUSH
35722: LD_INT 26
35724: PUSH
35725: LD_INT 69
35727: PUSH
35728: LD_INT 39
35730: PUSH
35731: LD_INT 40
35733: PUSH
35734: LD_INT 41
35736: PUSH
35737: LD_INT 42
35739: PUSH
35740: LD_INT 43
35742: PUSH
35743: LD_INT 48
35745: PUSH
35746: LD_INT 49
35748: PUSH
35749: LD_INT 50
35751: PUSH
35752: LD_INT 51
35754: PUSH
35755: LD_INT 52
35757: PUSH
35758: LD_INT 53
35760: PUSH
35761: LD_INT 54
35763: PUSH
35764: LD_INT 55
35766: PUSH
35767: LD_INT 56
35769: PUSH
35770: LD_INT 60
35772: PUSH
35773: LD_INT 61
35775: PUSH
35776: LD_INT 62
35778: PUSH
35779: LD_INT 66
35781: PUSH
35782: LD_INT 67
35784: PUSH
35785: LD_INT 68
35787: PUSH
35788: LD_INT 81
35790: PUSH
35791: LD_INT 82
35793: PUSH
35794: LD_INT 83
35796: PUSH
35797: LD_INT 84
35799: PUSH
35800: LD_INT 85
35802: PUSH
35803: LD_INT 87
35805: PUSH
35806: LD_INT 88
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: LIST
35813: LIST
35814: LIST
35815: LIST
35816: LIST
35817: LIST
35818: LIST
35819: LIST
35820: LIST
35821: LIST
35822: LIST
35823: LIST
35824: LIST
35825: LIST
35826: LIST
35827: LIST
35828: LIST
35829: LIST
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: ST_TO_ADDR
35865: GO 36098
35867: LD_INT 3
35869: DOUBLE
35870: EQUAL
35871: IFTRUE 35875
35873: GO 36097
35875: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
35876: LD_ADDR_VAR 0 4
35880: PUSH
35881: LD_INT 46
35883: PUSH
35884: LD_INT 47
35886: PUSH
35887: LD_INT 1
35889: PUSH
35890: LD_INT 2
35892: PUSH
35893: LD_INT 82
35895: PUSH
35896: LD_INT 83
35898: PUSH
35899: LD_INT 84
35901: PUSH
35902: LD_INT 85
35904: PUSH
35905: LD_INT 86
35907: PUSH
35908: LD_INT 11
35910: PUSH
35911: LD_INT 9
35913: PUSH
35914: LD_INT 20
35916: PUSH
35917: LD_INT 19
35919: PUSH
35920: LD_INT 21
35922: PUSH
35923: LD_INT 24
35925: PUSH
35926: LD_INT 22
35928: PUSH
35929: LD_INT 25
35931: PUSH
35932: LD_INT 28
35934: PUSH
35935: LD_INT 29
35937: PUSH
35938: LD_INT 30
35940: PUSH
35941: LD_INT 31
35943: PUSH
35944: LD_INT 37
35946: PUSH
35947: LD_INT 38
35949: PUSH
35950: LD_INT 32
35952: PUSH
35953: LD_INT 27
35955: PUSH
35956: LD_INT 33
35958: PUSH
35959: LD_INT 69
35961: PUSH
35962: LD_INT 39
35964: PUSH
35965: LD_INT 34
35967: PUSH
35968: LD_INT 40
35970: PUSH
35971: LD_INT 71
35973: PUSH
35974: LD_INT 23
35976: PUSH
35977: LD_INT 44
35979: PUSH
35980: LD_INT 48
35982: PUSH
35983: LD_INT 49
35985: PUSH
35986: LD_INT 50
35988: PUSH
35989: LD_INT 51
35991: PUSH
35992: LD_INT 52
35994: PUSH
35995: LD_INT 53
35997: PUSH
35998: LD_INT 54
36000: PUSH
36001: LD_INT 55
36003: PUSH
36004: LD_INT 56
36006: PUSH
36007: LD_INT 57
36009: PUSH
36010: LD_INT 58
36012: PUSH
36013: LD_INT 59
36015: PUSH
36016: LD_INT 63
36018: PUSH
36019: LD_INT 64
36021: PUSH
36022: LD_INT 65
36024: PUSH
36025: LD_INT 82
36027: PUSH
36028: LD_INT 83
36030: PUSH
36031: LD_INT 84
36033: PUSH
36034: LD_INT 85
36036: PUSH
36037: LD_INT 86
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: LIST
36044: LIST
36045: LIST
36046: LIST
36047: LIST
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: LIST
36053: LIST
36054: LIST
36055: LIST
36056: LIST
36057: LIST
36058: LIST
36059: LIST
36060: LIST
36061: LIST
36062: LIST
36063: LIST
36064: LIST
36065: LIST
36066: LIST
36067: LIST
36068: LIST
36069: LIST
36070: LIST
36071: LIST
36072: LIST
36073: LIST
36074: LIST
36075: LIST
36076: LIST
36077: LIST
36078: LIST
36079: LIST
36080: LIST
36081: LIST
36082: LIST
36083: LIST
36084: LIST
36085: LIST
36086: LIST
36087: LIST
36088: LIST
36089: LIST
36090: LIST
36091: LIST
36092: LIST
36093: LIST
36094: ST_TO_ADDR
36095: GO 36098
36097: POP
// if state > - 1 and state < 3 then
36098: LD_VAR 0 3
36102: PUSH
36103: LD_INT 1
36105: NEG
36106: GREATER
36107: PUSH
36108: LD_VAR 0 3
36112: PUSH
36113: LD_INT 3
36115: LESS
36116: AND
36117: IFFALSE 36174
// for i in result do
36119: LD_ADDR_VAR 0 5
36123: PUSH
36124: LD_VAR 0 4
36128: PUSH
36129: FOR_IN
36130: IFFALSE 36172
// if GetTech ( i , side ) <> state then
36132: LD_VAR 0 5
36136: PPUSH
36137: LD_VAR 0 1
36141: PPUSH
36142: CALL_OW 321
36146: PUSH
36147: LD_VAR 0 3
36151: NONEQUAL
36152: IFFALSE 36170
// result := result diff i ;
36154: LD_ADDR_VAR 0 4
36158: PUSH
36159: LD_VAR 0 4
36163: PUSH
36164: LD_VAR 0 5
36168: DIFF
36169: ST_TO_ADDR
36170: GO 36129
36172: POP
36173: POP
// end ;
36174: LD_VAR 0 4
36178: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
36179: LD_INT 0
36181: PPUSH
36182: PPUSH
36183: PPUSH
// result := true ;
36184: LD_ADDR_VAR 0 3
36188: PUSH
36189: LD_INT 1
36191: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
36192: LD_ADDR_VAR 0 5
36196: PUSH
36197: LD_VAR 0 2
36201: PPUSH
36202: CALL_OW 480
36206: ST_TO_ADDR
// if not tmp then
36207: LD_VAR 0 5
36211: NOT
36212: IFFALSE 36216
// exit ;
36214: GO 36265
// for i in tmp do
36216: LD_ADDR_VAR 0 4
36220: PUSH
36221: LD_VAR 0 5
36225: PUSH
36226: FOR_IN
36227: IFFALSE 36263
// if GetTech ( i , side ) <> state_researched then
36229: LD_VAR 0 4
36233: PPUSH
36234: LD_VAR 0 1
36238: PPUSH
36239: CALL_OW 321
36243: PUSH
36244: LD_INT 2
36246: NONEQUAL
36247: IFFALSE 36261
// begin result := false ;
36249: LD_ADDR_VAR 0 3
36253: PUSH
36254: LD_INT 0
36256: ST_TO_ADDR
// exit ;
36257: POP
36258: POP
36259: GO 36265
// end ;
36261: GO 36226
36263: POP
36264: POP
// end ;
36265: LD_VAR 0 3
36269: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
36270: LD_INT 0
36272: PPUSH
36273: PPUSH
36274: PPUSH
36275: PPUSH
36276: PPUSH
36277: PPUSH
36278: PPUSH
36279: PPUSH
36280: PPUSH
36281: PPUSH
36282: PPUSH
36283: PPUSH
36284: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
36285: LD_VAR 0 1
36289: NOT
36290: PUSH
36291: LD_VAR 0 1
36295: PPUSH
36296: CALL_OW 257
36300: PUSH
36301: LD_INT 9
36303: NONEQUAL
36304: OR
36305: IFFALSE 36309
// exit ;
36307: GO 36882
// side := GetSide ( unit ) ;
36309: LD_ADDR_VAR 0 9
36313: PUSH
36314: LD_VAR 0 1
36318: PPUSH
36319: CALL_OW 255
36323: ST_TO_ADDR
// tech_space := tech_spacanom ;
36324: LD_ADDR_VAR 0 12
36328: PUSH
36329: LD_INT 29
36331: ST_TO_ADDR
// tech_time := tech_taurad ;
36332: LD_ADDR_VAR 0 13
36336: PUSH
36337: LD_INT 28
36339: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
36340: LD_ADDR_VAR 0 11
36344: PUSH
36345: LD_VAR 0 1
36349: PPUSH
36350: CALL_OW 310
36354: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
36355: LD_VAR 0 11
36359: PPUSH
36360: CALL_OW 247
36364: PUSH
36365: LD_INT 2
36367: EQUAL
36368: IFFALSE 36372
// exit ;
36370: GO 36882
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36372: LD_ADDR_VAR 0 8
36376: PUSH
36377: LD_INT 81
36379: PUSH
36380: LD_VAR 0 9
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: LD_INT 3
36391: PUSH
36392: LD_INT 21
36394: PUSH
36395: LD_INT 3
36397: PUSH
36398: EMPTY
36399: LIST
36400: LIST
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: PPUSH
36410: CALL_OW 69
36414: ST_TO_ADDR
// if not tmp then
36415: LD_VAR 0 8
36419: NOT
36420: IFFALSE 36424
// exit ;
36422: GO 36882
// if in_unit then
36424: LD_VAR 0 11
36428: IFFALSE 36452
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
36430: LD_ADDR_VAR 0 10
36434: PUSH
36435: LD_VAR 0 8
36439: PPUSH
36440: LD_VAR 0 11
36444: PPUSH
36445: CALL_OW 74
36449: ST_TO_ADDR
36450: GO 36472
// enemy := NearestUnitToUnit ( tmp , unit ) ;
36452: LD_ADDR_VAR 0 10
36456: PUSH
36457: LD_VAR 0 8
36461: PPUSH
36462: LD_VAR 0 1
36466: PPUSH
36467: CALL_OW 74
36471: ST_TO_ADDR
// if not enemy then
36472: LD_VAR 0 10
36476: NOT
36477: IFFALSE 36481
// exit ;
36479: GO 36882
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
36481: LD_VAR 0 11
36485: PUSH
36486: LD_VAR 0 11
36490: PPUSH
36491: LD_VAR 0 10
36495: PPUSH
36496: CALL_OW 296
36500: PUSH
36501: LD_INT 13
36503: GREATER
36504: AND
36505: PUSH
36506: LD_VAR 0 1
36510: PPUSH
36511: LD_VAR 0 10
36515: PPUSH
36516: CALL_OW 296
36520: PUSH
36521: LD_INT 12
36523: GREATER
36524: OR
36525: IFFALSE 36529
// exit ;
36527: GO 36882
// missile := [ 1 ] ;
36529: LD_ADDR_VAR 0 14
36533: PUSH
36534: LD_INT 1
36536: PUSH
36537: EMPTY
36538: LIST
36539: ST_TO_ADDR
// if Researched ( side , tech_space ) then
36540: LD_VAR 0 9
36544: PPUSH
36545: LD_VAR 0 12
36549: PPUSH
36550: CALL_OW 325
36554: IFFALSE 36583
// missile := Replace ( missile , missile + 1 , 2 ) ;
36556: LD_ADDR_VAR 0 14
36560: PUSH
36561: LD_VAR 0 14
36565: PPUSH
36566: LD_VAR 0 14
36570: PUSH
36571: LD_INT 1
36573: PLUS
36574: PPUSH
36575: LD_INT 2
36577: PPUSH
36578: CALL_OW 1
36582: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
36583: LD_VAR 0 9
36587: PPUSH
36588: LD_VAR 0 13
36592: PPUSH
36593: CALL_OW 325
36597: PUSH
36598: LD_VAR 0 10
36602: PPUSH
36603: CALL_OW 255
36607: PPUSH
36608: LD_VAR 0 13
36612: PPUSH
36613: CALL_OW 325
36617: NOT
36618: AND
36619: IFFALSE 36648
// missile := Replace ( missile , missile + 1 , 3 ) ;
36621: LD_ADDR_VAR 0 14
36625: PUSH
36626: LD_VAR 0 14
36630: PPUSH
36631: LD_VAR 0 14
36635: PUSH
36636: LD_INT 1
36638: PLUS
36639: PPUSH
36640: LD_INT 3
36642: PPUSH
36643: CALL_OW 1
36647: ST_TO_ADDR
// if missile < 2 then
36648: LD_VAR 0 14
36652: PUSH
36653: LD_INT 2
36655: LESS
36656: IFFALSE 36660
// exit ;
36658: GO 36882
// x := GetX ( enemy ) ;
36660: LD_ADDR_VAR 0 4
36664: PUSH
36665: LD_VAR 0 10
36669: PPUSH
36670: CALL_OW 250
36674: ST_TO_ADDR
// y := GetY ( enemy ) ;
36675: LD_ADDR_VAR 0 5
36679: PUSH
36680: LD_VAR 0 10
36684: PPUSH
36685: CALL_OW 251
36689: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
36690: LD_ADDR_VAR 0 6
36694: PUSH
36695: LD_VAR 0 4
36699: PUSH
36700: LD_INT 1
36702: NEG
36703: PPUSH
36704: LD_INT 1
36706: PPUSH
36707: CALL_OW 12
36711: PLUS
36712: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
36713: LD_ADDR_VAR 0 7
36717: PUSH
36718: LD_VAR 0 5
36722: PUSH
36723: LD_INT 1
36725: NEG
36726: PPUSH
36727: LD_INT 1
36729: PPUSH
36730: CALL_OW 12
36734: PLUS
36735: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36736: LD_VAR 0 6
36740: PPUSH
36741: LD_VAR 0 7
36745: PPUSH
36746: CALL_OW 488
36750: NOT
36751: IFFALSE 36773
// begin _x := x ;
36753: LD_ADDR_VAR 0 6
36757: PUSH
36758: LD_VAR 0 4
36762: ST_TO_ADDR
// _y := y ;
36763: LD_ADDR_VAR 0 7
36767: PUSH
36768: LD_VAR 0 5
36772: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
36773: LD_ADDR_VAR 0 3
36777: PUSH
36778: LD_INT 1
36780: PPUSH
36781: LD_VAR 0 14
36785: PPUSH
36786: CALL_OW 12
36790: ST_TO_ADDR
// case i of 1 :
36791: LD_VAR 0 3
36795: PUSH
36796: LD_INT 1
36798: DOUBLE
36799: EQUAL
36800: IFTRUE 36804
36802: GO 36821
36804: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
36805: LD_VAR 0 1
36809: PPUSH
36810: LD_VAR 0 10
36814: PPUSH
36815: CALL_OW 115
36819: GO 36882
36821: LD_INT 2
36823: DOUBLE
36824: EQUAL
36825: IFTRUE 36829
36827: GO 36851
36829: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
36830: LD_VAR 0 1
36834: PPUSH
36835: LD_VAR 0 6
36839: PPUSH
36840: LD_VAR 0 7
36844: PPUSH
36845: CALL_OW 153
36849: GO 36882
36851: LD_INT 3
36853: DOUBLE
36854: EQUAL
36855: IFTRUE 36859
36857: GO 36881
36859: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
36860: LD_VAR 0 1
36864: PPUSH
36865: LD_VAR 0 6
36869: PPUSH
36870: LD_VAR 0 7
36874: PPUSH
36875: CALL_OW 154
36879: GO 36882
36881: POP
// end ;
36882: LD_VAR 0 2
36886: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
36887: LD_INT 0
36889: PPUSH
36890: PPUSH
36891: PPUSH
36892: PPUSH
36893: PPUSH
36894: PPUSH
// if not unit or not building then
36895: LD_VAR 0 1
36899: NOT
36900: PUSH
36901: LD_VAR 0 2
36905: NOT
36906: OR
36907: IFFALSE 36911
// exit ;
36909: GO 37069
// x := GetX ( building ) ;
36911: LD_ADDR_VAR 0 5
36915: PUSH
36916: LD_VAR 0 2
36920: PPUSH
36921: CALL_OW 250
36925: ST_TO_ADDR
// y := GetY ( building ) ;
36926: LD_ADDR_VAR 0 6
36930: PUSH
36931: LD_VAR 0 2
36935: PPUSH
36936: CALL_OW 251
36940: ST_TO_ADDR
// for i = 0 to 5 do
36941: LD_ADDR_VAR 0 4
36945: PUSH
36946: DOUBLE
36947: LD_INT 0
36949: DEC
36950: ST_TO_ADDR
36951: LD_INT 5
36953: PUSH
36954: FOR_TO
36955: IFFALSE 37067
// begin _x := ShiftX ( x , i , 3 ) ;
36957: LD_ADDR_VAR 0 7
36961: PUSH
36962: LD_VAR 0 5
36966: PPUSH
36967: LD_VAR 0 4
36971: PPUSH
36972: LD_INT 3
36974: PPUSH
36975: CALL_OW 272
36979: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
36980: LD_ADDR_VAR 0 8
36984: PUSH
36985: LD_VAR 0 6
36989: PPUSH
36990: LD_VAR 0 4
36994: PPUSH
36995: LD_INT 3
36997: PPUSH
36998: CALL_OW 273
37002: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37003: LD_VAR 0 7
37007: PPUSH
37008: LD_VAR 0 8
37012: PPUSH
37013: CALL_OW 488
37017: NOT
37018: IFFALSE 37022
// continue ;
37020: GO 36954
// if HexInfo ( _x , _y ) = 0 then
37022: LD_VAR 0 7
37026: PPUSH
37027: LD_VAR 0 8
37031: PPUSH
37032: CALL_OW 428
37036: PUSH
37037: LD_INT 0
37039: EQUAL
37040: IFFALSE 37065
// begin ComMoveXY ( unit , _x , _y ) ;
37042: LD_VAR 0 1
37046: PPUSH
37047: LD_VAR 0 7
37051: PPUSH
37052: LD_VAR 0 8
37056: PPUSH
37057: CALL_OW 111
// exit ;
37061: POP
37062: POP
37063: GO 37069
// end ; end ;
37065: GO 36954
37067: POP
37068: POP
// end ;
37069: LD_VAR 0 3
37073: RET
// export function ScanBase ( side , base_area ) ; begin
37074: LD_INT 0
37076: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
37077: LD_ADDR_VAR 0 3
37081: PUSH
37082: LD_VAR 0 2
37086: PPUSH
37087: LD_INT 81
37089: PUSH
37090: LD_VAR 0 1
37094: PUSH
37095: EMPTY
37096: LIST
37097: LIST
37098: PPUSH
37099: CALL_OW 70
37103: ST_TO_ADDR
// end ;
37104: LD_VAR 0 3
37108: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
37109: LD_INT 0
37111: PPUSH
37112: PPUSH
37113: PPUSH
37114: PPUSH
// result := false ;
37115: LD_ADDR_VAR 0 2
37119: PUSH
37120: LD_INT 0
37122: ST_TO_ADDR
// side := GetSide ( unit ) ;
37123: LD_ADDR_VAR 0 3
37127: PUSH
37128: LD_VAR 0 1
37132: PPUSH
37133: CALL_OW 255
37137: ST_TO_ADDR
// nat := GetNation ( unit ) ;
37138: LD_ADDR_VAR 0 4
37142: PUSH
37143: LD_VAR 0 1
37147: PPUSH
37148: CALL_OW 248
37152: ST_TO_ADDR
// case nat of 1 :
37153: LD_VAR 0 4
37157: PUSH
37158: LD_INT 1
37160: DOUBLE
37161: EQUAL
37162: IFTRUE 37166
37164: GO 37177
37166: POP
// tech := tech_lassight ; 2 :
37167: LD_ADDR_VAR 0 5
37171: PUSH
37172: LD_INT 12
37174: ST_TO_ADDR
37175: GO 37216
37177: LD_INT 2
37179: DOUBLE
37180: EQUAL
37181: IFTRUE 37185
37183: GO 37196
37185: POP
// tech := tech_mortar ; 3 :
37186: LD_ADDR_VAR 0 5
37190: PUSH
37191: LD_INT 41
37193: ST_TO_ADDR
37194: GO 37216
37196: LD_INT 3
37198: DOUBLE
37199: EQUAL
37200: IFTRUE 37204
37202: GO 37215
37204: POP
// tech := tech_bazooka ; end ;
37205: LD_ADDR_VAR 0 5
37209: PUSH
37210: LD_INT 44
37212: ST_TO_ADDR
37213: GO 37216
37215: POP
// if Researched ( side , tech ) then
37216: LD_VAR 0 3
37220: PPUSH
37221: LD_VAR 0 5
37225: PPUSH
37226: CALL_OW 325
37230: IFFALSE 37257
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
37232: LD_ADDR_VAR 0 2
37236: PUSH
37237: LD_INT 5
37239: PUSH
37240: LD_INT 8
37242: PUSH
37243: LD_INT 9
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: LIST
37250: PUSH
37251: LD_VAR 0 4
37255: ARRAY
37256: ST_TO_ADDR
// end ;
37257: LD_VAR 0 2
37261: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
37262: LD_INT 0
37264: PPUSH
37265: PPUSH
37266: PPUSH
// if not mines then
37267: LD_VAR 0 2
37271: NOT
37272: IFFALSE 37276
// exit ;
37274: GO 37420
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37276: LD_ADDR_VAR 0 5
37280: PUSH
37281: LD_INT 81
37283: PUSH
37284: LD_VAR 0 1
37288: PUSH
37289: EMPTY
37290: LIST
37291: LIST
37292: PUSH
37293: LD_INT 3
37295: PUSH
37296: LD_INT 21
37298: PUSH
37299: LD_INT 3
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: PPUSH
37314: CALL_OW 69
37318: ST_TO_ADDR
// for i in mines do
37319: LD_ADDR_VAR 0 4
37323: PUSH
37324: LD_VAR 0 2
37328: PUSH
37329: FOR_IN
37330: IFFALSE 37418
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
37332: LD_VAR 0 4
37336: PUSH
37337: LD_INT 1
37339: ARRAY
37340: PPUSH
37341: LD_VAR 0 4
37345: PUSH
37346: LD_INT 2
37348: ARRAY
37349: PPUSH
37350: CALL_OW 458
37354: NOT
37355: IFFALSE 37359
// continue ;
37357: GO 37329
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
37359: LD_VAR 0 4
37363: PUSH
37364: LD_INT 1
37366: ARRAY
37367: PPUSH
37368: LD_VAR 0 4
37372: PUSH
37373: LD_INT 2
37375: ARRAY
37376: PPUSH
37377: CALL_OW 428
37381: PUSH
37382: LD_VAR 0 5
37386: IN
37387: IFFALSE 37416
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
37389: LD_VAR 0 4
37393: PUSH
37394: LD_INT 1
37396: ARRAY
37397: PPUSH
37398: LD_VAR 0 4
37402: PUSH
37403: LD_INT 2
37405: ARRAY
37406: PPUSH
37407: LD_VAR 0 1
37411: PPUSH
37412: CALL_OW 456
// end ;
37416: GO 37329
37418: POP
37419: POP
// end ;
37420: LD_VAR 0 3
37424: RET
// export function Count ( array ) ; var i ; begin
37425: LD_INT 0
37427: PPUSH
37428: PPUSH
// result := 0 ;
37429: LD_ADDR_VAR 0 2
37433: PUSH
37434: LD_INT 0
37436: ST_TO_ADDR
// for i in array do
37437: LD_ADDR_VAR 0 3
37441: PUSH
37442: LD_VAR 0 1
37446: PUSH
37447: FOR_IN
37448: IFFALSE 37472
// if i then
37450: LD_VAR 0 3
37454: IFFALSE 37470
// result := result + 1 ;
37456: LD_ADDR_VAR 0 2
37460: PUSH
37461: LD_VAR 0 2
37465: PUSH
37466: LD_INT 1
37468: PLUS
37469: ST_TO_ADDR
37470: GO 37447
37472: POP
37473: POP
// end ;
37474: LD_VAR 0 2
37478: RET
// export function IsEmpty ( building ) ; begin
37479: LD_INT 0
37481: PPUSH
// if not building then
37482: LD_VAR 0 1
37486: NOT
37487: IFFALSE 37491
// exit ;
37489: GO 37534
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
37491: LD_ADDR_VAR 0 2
37495: PUSH
37496: LD_VAR 0 1
37500: PUSH
37501: LD_INT 22
37503: PUSH
37504: LD_VAR 0 1
37508: PPUSH
37509: CALL_OW 255
37513: PUSH
37514: EMPTY
37515: LIST
37516: LIST
37517: PUSH
37518: LD_INT 58
37520: PUSH
37521: EMPTY
37522: LIST
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PPUSH
37528: CALL_OW 69
37532: IN
37533: ST_TO_ADDR
// end ;
37534: LD_VAR 0 2
37538: RET
// export function IsNotFull ( building ) ; var places ; begin
37539: LD_INT 0
37541: PPUSH
37542: PPUSH
// if not building then
37543: LD_VAR 0 1
37547: NOT
37548: IFFALSE 37552
// exit ;
37550: GO 37723
// result := false ;
37552: LD_ADDR_VAR 0 2
37556: PUSH
37557: LD_INT 0
37559: ST_TO_ADDR
// places := 0 ;
37560: LD_ADDR_VAR 0 3
37564: PUSH
37565: LD_INT 0
37567: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
37568: LD_VAR 0 1
37572: PPUSH
37573: CALL_OW 266
37577: PUSH
37578: LD_INT 0
37580: DOUBLE
37581: EQUAL
37582: IFTRUE 37640
37584: LD_INT 1
37586: DOUBLE
37587: EQUAL
37588: IFTRUE 37640
37590: LD_INT 6
37592: DOUBLE
37593: EQUAL
37594: IFTRUE 37640
37596: LD_INT 7
37598: DOUBLE
37599: EQUAL
37600: IFTRUE 37640
37602: LD_INT 8
37604: DOUBLE
37605: EQUAL
37606: IFTRUE 37640
37608: LD_INT 4
37610: DOUBLE
37611: EQUAL
37612: IFTRUE 37640
37614: LD_INT 5
37616: DOUBLE
37617: EQUAL
37618: IFTRUE 37640
37620: LD_INT 2
37622: DOUBLE
37623: EQUAL
37624: IFTRUE 37640
37626: LD_INT 3
37628: DOUBLE
37629: EQUAL
37630: IFTRUE 37640
37632: LD_INT 35
37634: DOUBLE
37635: EQUAL
37636: IFTRUE 37640
37638: GO 37651
37640: POP
// places := 6 ; b_bunker , b_breastwork :
37641: LD_ADDR_VAR 0 3
37645: PUSH
37646: LD_INT 6
37648: ST_TO_ADDR
37649: GO 37696
37651: LD_INT 32
37653: DOUBLE
37654: EQUAL
37655: IFTRUE 37665
37657: LD_INT 31
37659: DOUBLE
37660: EQUAL
37661: IFTRUE 37665
37663: GO 37676
37665: POP
// places := 1 ; b_control_tower :
37666: LD_ADDR_VAR 0 3
37670: PUSH
37671: LD_INT 1
37673: ST_TO_ADDR
37674: GO 37696
37676: LD_INT 36
37678: DOUBLE
37679: EQUAL
37680: IFTRUE 37684
37682: GO 37695
37684: POP
// places := 3 ; end ;
37685: LD_ADDR_VAR 0 3
37689: PUSH
37690: LD_INT 3
37692: ST_TO_ADDR
37693: GO 37696
37695: POP
// if places then
37696: LD_VAR 0 3
37700: IFFALSE 37723
// result := UnitsInside ( building ) < places ;
37702: LD_ADDR_VAR 0 2
37706: PUSH
37707: LD_VAR 0 1
37711: PPUSH
37712: CALL_OW 313
37716: PUSH
37717: LD_VAR 0 3
37721: LESS
37722: ST_TO_ADDR
// end ;
37723: LD_VAR 0 2
37727: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
37728: LD_INT 0
37730: PPUSH
37731: PPUSH
37732: PPUSH
37733: PPUSH
// tmp := [ ] ;
37734: LD_ADDR_VAR 0 3
37738: PUSH
37739: EMPTY
37740: ST_TO_ADDR
// list := [ ] ;
37741: LD_ADDR_VAR 0 5
37745: PUSH
37746: EMPTY
37747: ST_TO_ADDR
// for i = 16 to 25 do
37748: LD_ADDR_VAR 0 4
37752: PUSH
37753: DOUBLE
37754: LD_INT 16
37756: DEC
37757: ST_TO_ADDR
37758: LD_INT 25
37760: PUSH
37761: FOR_TO
37762: IFFALSE 37835
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
37764: LD_ADDR_VAR 0 3
37768: PUSH
37769: LD_VAR 0 3
37773: PUSH
37774: LD_INT 22
37776: PUSH
37777: LD_VAR 0 1
37781: PPUSH
37782: CALL_OW 255
37786: PUSH
37787: EMPTY
37788: LIST
37789: LIST
37790: PUSH
37791: LD_INT 91
37793: PUSH
37794: LD_VAR 0 1
37798: PUSH
37799: LD_INT 6
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: LIST
37806: PUSH
37807: LD_INT 30
37809: PUSH
37810: LD_VAR 0 4
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: LIST
37823: PUSH
37824: EMPTY
37825: LIST
37826: PPUSH
37827: CALL_OW 69
37831: ADD
37832: ST_TO_ADDR
37833: GO 37761
37835: POP
37836: POP
// for i = 1 to tmp do
37837: LD_ADDR_VAR 0 4
37841: PUSH
37842: DOUBLE
37843: LD_INT 1
37845: DEC
37846: ST_TO_ADDR
37847: LD_VAR 0 3
37851: PUSH
37852: FOR_TO
37853: IFFALSE 37941
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
37855: LD_ADDR_VAR 0 5
37859: PUSH
37860: LD_VAR 0 5
37864: PUSH
37865: LD_VAR 0 3
37869: PUSH
37870: LD_VAR 0 4
37874: ARRAY
37875: PPUSH
37876: CALL_OW 266
37880: PUSH
37881: LD_VAR 0 3
37885: PUSH
37886: LD_VAR 0 4
37890: ARRAY
37891: PPUSH
37892: CALL_OW 250
37896: PUSH
37897: LD_VAR 0 3
37901: PUSH
37902: LD_VAR 0 4
37906: ARRAY
37907: PPUSH
37908: CALL_OW 251
37912: PUSH
37913: LD_VAR 0 3
37917: PUSH
37918: LD_VAR 0 4
37922: ARRAY
37923: PPUSH
37924: CALL_OW 254
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: PUSH
37935: EMPTY
37936: LIST
37937: ADD
37938: ST_TO_ADDR
37939: GO 37852
37941: POP
37942: POP
// result := list ;
37943: LD_ADDR_VAR 0 2
37947: PUSH
37948: LD_VAR 0 5
37952: ST_TO_ADDR
// end ;
37953: LD_VAR 0 2
37957: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
37958: LD_INT 0
37960: PPUSH
37961: PPUSH
37962: PPUSH
37963: PPUSH
37964: PPUSH
37965: PPUSH
37966: PPUSH
// if not factory then
37967: LD_VAR 0 1
37971: NOT
37972: IFFALSE 37976
// exit ;
37974: GO 38569
// if control = control_apeman then
37976: LD_VAR 0 4
37980: PUSH
37981: LD_INT 5
37983: EQUAL
37984: IFFALSE 38093
// begin tmp := UnitsInside ( factory ) ;
37986: LD_ADDR_VAR 0 8
37990: PUSH
37991: LD_VAR 0 1
37995: PPUSH
37996: CALL_OW 313
38000: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
38001: LD_VAR 0 8
38005: PPUSH
38006: LD_INT 25
38008: PUSH
38009: LD_INT 12
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PPUSH
38016: CALL_OW 72
38020: NOT
38021: IFFALSE 38031
// control := control_manual ;
38023: LD_ADDR_VAR 0 4
38027: PUSH
38028: LD_INT 1
38030: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
38031: LD_ADDR_VAR 0 8
38035: PUSH
38036: LD_VAR 0 1
38040: PPUSH
38041: CALL 37728 0 1
38045: ST_TO_ADDR
// if tmp then
38046: LD_VAR 0 8
38050: IFFALSE 38093
// begin for i in tmp do
38052: LD_ADDR_VAR 0 7
38056: PUSH
38057: LD_VAR 0 8
38061: PUSH
38062: FOR_IN
38063: IFFALSE 38091
// if i [ 1 ] = b_ext_radio then
38065: LD_VAR 0 7
38069: PUSH
38070: LD_INT 1
38072: ARRAY
38073: PUSH
38074: LD_INT 22
38076: EQUAL
38077: IFFALSE 38089
// begin control := control_remote ;
38079: LD_ADDR_VAR 0 4
38083: PUSH
38084: LD_INT 2
38086: ST_TO_ADDR
// break ;
38087: GO 38091
// end ;
38089: GO 38062
38091: POP
38092: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38093: LD_VAR 0 1
38097: PPUSH
38098: LD_VAR 0 2
38102: PPUSH
38103: LD_VAR 0 3
38107: PPUSH
38108: LD_VAR 0 4
38112: PPUSH
38113: LD_VAR 0 5
38117: PPUSH
38118: CALL_OW 448
38122: IFFALSE 38157
// begin result := [ chassis , engine , control , weapon ] ;
38124: LD_ADDR_VAR 0 6
38128: PUSH
38129: LD_VAR 0 2
38133: PUSH
38134: LD_VAR 0 3
38138: PUSH
38139: LD_VAR 0 4
38143: PUSH
38144: LD_VAR 0 5
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: ST_TO_ADDR
// exit ;
38155: GO 38569
// end ; _chassis := AvailableChassisList ( factory ) ;
38157: LD_ADDR_VAR 0 9
38161: PUSH
38162: LD_VAR 0 1
38166: PPUSH
38167: CALL_OW 475
38171: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
38172: LD_ADDR_VAR 0 11
38176: PUSH
38177: LD_VAR 0 1
38181: PPUSH
38182: CALL_OW 476
38186: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
38187: LD_ADDR_VAR 0 12
38191: PUSH
38192: LD_VAR 0 1
38196: PPUSH
38197: CALL_OW 477
38201: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
38202: LD_ADDR_VAR 0 10
38206: PUSH
38207: LD_VAR 0 1
38211: PPUSH
38212: CALL_OW 478
38216: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
38217: LD_VAR 0 9
38221: NOT
38222: PUSH
38223: LD_VAR 0 11
38227: NOT
38228: OR
38229: PUSH
38230: LD_VAR 0 12
38234: NOT
38235: OR
38236: PUSH
38237: LD_VAR 0 10
38241: NOT
38242: OR
38243: IFFALSE 38278
// begin result := [ chassis , engine , control , weapon ] ;
38245: LD_ADDR_VAR 0 6
38249: PUSH
38250: LD_VAR 0 2
38254: PUSH
38255: LD_VAR 0 3
38259: PUSH
38260: LD_VAR 0 4
38264: PUSH
38265: LD_VAR 0 5
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: LIST
38274: LIST
38275: ST_TO_ADDR
// exit ;
38276: GO 38569
// end ; if not chassis in _chassis then
38278: LD_VAR 0 2
38282: PUSH
38283: LD_VAR 0 9
38287: IN
38288: NOT
38289: IFFALSE 38315
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
38291: LD_ADDR_VAR 0 2
38295: PUSH
38296: LD_VAR 0 9
38300: PUSH
38301: LD_INT 1
38303: PPUSH
38304: LD_VAR 0 9
38308: PPUSH
38309: CALL_OW 12
38313: ARRAY
38314: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
38315: LD_VAR 0 2
38319: PPUSH
38320: LD_VAR 0 3
38324: PPUSH
38325: CALL 38574 0 2
38329: NOT
38330: IFFALSE 38389
// repeat engine := _engine [ 1 ] ;
38332: LD_ADDR_VAR 0 3
38336: PUSH
38337: LD_VAR 0 11
38341: PUSH
38342: LD_INT 1
38344: ARRAY
38345: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
38346: LD_ADDR_VAR 0 11
38350: PUSH
38351: LD_VAR 0 11
38355: PPUSH
38356: LD_INT 1
38358: PPUSH
38359: CALL_OW 3
38363: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
38364: LD_VAR 0 2
38368: PPUSH
38369: LD_VAR 0 3
38373: PPUSH
38374: CALL 38574 0 2
38378: PUSH
38379: LD_VAR 0 11
38383: PUSH
38384: EMPTY
38385: EQUAL
38386: OR
38387: IFFALSE 38332
// if not control in _control then
38389: LD_VAR 0 4
38393: PUSH
38394: LD_VAR 0 12
38398: IN
38399: NOT
38400: IFFALSE 38426
// control := _control [ rand ( 1 , _control ) ] ;
38402: LD_ADDR_VAR 0 4
38406: PUSH
38407: LD_VAR 0 12
38411: PUSH
38412: LD_INT 1
38414: PPUSH
38415: LD_VAR 0 12
38419: PPUSH
38420: CALL_OW 12
38424: ARRAY
38425: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
38426: LD_VAR 0 2
38430: PPUSH
38431: LD_VAR 0 5
38435: PPUSH
38436: CALL 38794 0 2
38440: NOT
38441: IFFALSE 38500
// repeat weapon := _weapon [ 1 ] ;
38443: LD_ADDR_VAR 0 5
38447: PUSH
38448: LD_VAR 0 10
38452: PUSH
38453: LD_INT 1
38455: ARRAY
38456: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
38457: LD_ADDR_VAR 0 10
38461: PUSH
38462: LD_VAR 0 10
38466: PPUSH
38467: LD_INT 1
38469: PPUSH
38470: CALL_OW 3
38474: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
38475: LD_VAR 0 2
38479: PPUSH
38480: LD_VAR 0 5
38484: PPUSH
38485: CALL 38794 0 2
38489: PUSH
38490: LD_VAR 0 10
38494: PUSH
38495: EMPTY
38496: EQUAL
38497: OR
38498: IFFALSE 38443
// result := [ ] ;
38500: LD_ADDR_VAR 0 6
38504: PUSH
38505: EMPTY
38506: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38507: LD_VAR 0 1
38511: PPUSH
38512: LD_VAR 0 2
38516: PPUSH
38517: LD_VAR 0 3
38521: PPUSH
38522: LD_VAR 0 4
38526: PPUSH
38527: LD_VAR 0 5
38531: PPUSH
38532: CALL_OW 448
38536: IFFALSE 38569
// result := [ chassis , engine , control , weapon ] ;
38538: LD_ADDR_VAR 0 6
38542: PUSH
38543: LD_VAR 0 2
38547: PUSH
38548: LD_VAR 0 3
38552: PUSH
38553: LD_VAR 0 4
38557: PUSH
38558: LD_VAR 0 5
38562: PUSH
38563: EMPTY
38564: LIST
38565: LIST
38566: LIST
38567: LIST
38568: ST_TO_ADDR
// end ;
38569: LD_VAR 0 6
38573: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
38574: LD_INT 0
38576: PPUSH
// if not chassis or not engine then
38577: LD_VAR 0 1
38581: NOT
38582: PUSH
38583: LD_VAR 0 2
38587: NOT
38588: OR
38589: IFFALSE 38593
// exit ;
38591: GO 38789
// case engine of engine_solar :
38593: LD_VAR 0 2
38597: PUSH
38598: LD_INT 2
38600: DOUBLE
38601: EQUAL
38602: IFTRUE 38606
38604: GO 38644
38606: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
38607: LD_ADDR_VAR 0 3
38611: PUSH
38612: LD_INT 11
38614: PUSH
38615: LD_INT 12
38617: PUSH
38618: LD_INT 13
38620: PUSH
38621: LD_INT 14
38623: PUSH
38624: LD_INT 1
38626: PUSH
38627: LD_INT 2
38629: PUSH
38630: LD_INT 3
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: LIST
38637: LIST
38638: LIST
38639: LIST
38640: LIST
38641: ST_TO_ADDR
38642: GO 38773
38644: LD_INT 1
38646: DOUBLE
38647: EQUAL
38648: IFTRUE 38652
38650: GO 38714
38652: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
38653: LD_ADDR_VAR 0 3
38657: PUSH
38658: LD_INT 11
38660: PUSH
38661: LD_INT 12
38663: PUSH
38664: LD_INT 13
38666: PUSH
38667: LD_INT 14
38669: PUSH
38670: LD_INT 1
38672: PUSH
38673: LD_INT 2
38675: PUSH
38676: LD_INT 3
38678: PUSH
38679: LD_INT 4
38681: PUSH
38682: LD_INT 5
38684: PUSH
38685: LD_INT 21
38687: PUSH
38688: LD_INT 23
38690: PUSH
38691: LD_INT 22
38693: PUSH
38694: LD_INT 24
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: LIST
38701: LIST
38702: LIST
38703: LIST
38704: LIST
38705: LIST
38706: LIST
38707: LIST
38708: LIST
38709: LIST
38710: LIST
38711: ST_TO_ADDR
38712: GO 38773
38714: LD_INT 3
38716: DOUBLE
38717: EQUAL
38718: IFTRUE 38722
38720: GO 38772
38722: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38723: LD_ADDR_VAR 0 3
38727: PUSH
38728: LD_INT 13
38730: PUSH
38731: LD_INT 14
38733: PUSH
38734: LD_INT 2
38736: PUSH
38737: LD_INT 3
38739: PUSH
38740: LD_INT 4
38742: PUSH
38743: LD_INT 5
38745: PUSH
38746: LD_INT 21
38748: PUSH
38749: LD_INT 22
38751: PUSH
38752: LD_INT 23
38754: PUSH
38755: LD_INT 24
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: LIST
38769: ST_TO_ADDR
38770: GO 38773
38772: POP
// result := ( chassis in result ) ;
38773: LD_ADDR_VAR 0 3
38777: PUSH
38778: LD_VAR 0 1
38782: PUSH
38783: LD_VAR 0 3
38787: IN
38788: ST_TO_ADDR
// end ;
38789: LD_VAR 0 3
38793: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
38794: LD_INT 0
38796: PPUSH
// if not chassis or not weapon then
38797: LD_VAR 0 1
38801: NOT
38802: PUSH
38803: LD_VAR 0 2
38807: NOT
38808: OR
38809: IFFALSE 38813
// exit ;
38811: GO 39873
// case weapon of us_machine_gun :
38813: LD_VAR 0 2
38817: PUSH
38818: LD_INT 2
38820: DOUBLE
38821: EQUAL
38822: IFTRUE 38826
38824: GO 38856
38826: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
38827: LD_ADDR_VAR 0 3
38831: PUSH
38832: LD_INT 1
38834: PUSH
38835: LD_INT 2
38837: PUSH
38838: LD_INT 3
38840: PUSH
38841: LD_INT 4
38843: PUSH
38844: LD_INT 5
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: LIST
38851: LIST
38852: LIST
38853: ST_TO_ADDR
38854: GO 39857
38856: LD_INT 3
38858: DOUBLE
38859: EQUAL
38860: IFTRUE 38864
38862: GO 38894
38864: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
38865: LD_ADDR_VAR 0 3
38869: PUSH
38870: LD_INT 1
38872: PUSH
38873: LD_INT 2
38875: PUSH
38876: LD_INT 3
38878: PUSH
38879: LD_INT 4
38881: PUSH
38882: LD_INT 5
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: LIST
38889: LIST
38890: LIST
38891: ST_TO_ADDR
38892: GO 39857
38894: LD_INT 11
38896: DOUBLE
38897: EQUAL
38898: IFTRUE 38902
38900: GO 38932
38902: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
38903: LD_ADDR_VAR 0 3
38907: PUSH
38908: LD_INT 1
38910: PUSH
38911: LD_INT 2
38913: PUSH
38914: LD_INT 3
38916: PUSH
38917: LD_INT 4
38919: PUSH
38920: LD_INT 5
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: LIST
38927: LIST
38928: LIST
38929: ST_TO_ADDR
38930: GO 39857
38932: LD_INT 4
38934: DOUBLE
38935: EQUAL
38936: IFTRUE 38940
38938: GO 38966
38940: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
38941: LD_ADDR_VAR 0 3
38945: PUSH
38946: LD_INT 2
38948: PUSH
38949: LD_INT 3
38951: PUSH
38952: LD_INT 4
38954: PUSH
38955: LD_INT 5
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: ST_TO_ADDR
38964: GO 39857
38966: LD_INT 5
38968: DOUBLE
38969: EQUAL
38970: IFTRUE 38974
38972: GO 39000
38974: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
38975: LD_ADDR_VAR 0 3
38979: PUSH
38980: LD_INT 2
38982: PUSH
38983: LD_INT 3
38985: PUSH
38986: LD_INT 4
38988: PUSH
38989: LD_INT 5
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: LIST
38996: LIST
38997: ST_TO_ADDR
38998: GO 39857
39000: LD_INT 9
39002: DOUBLE
39003: EQUAL
39004: IFTRUE 39008
39006: GO 39034
39008: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
39009: LD_ADDR_VAR 0 3
39013: PUSH
39014: LD_INT 2
39016: PUSH
39017: LD_INT 3
39019: PUSH
39020: LD_INT 4
39022: PUSH
39023: LD_INT 5
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: LIST
39030: LIST
39031: ST_TO_ADDR
39032: GO 39857
39034: LD_INT 7
39036: DOUBLE
39037: EQUAL
39038: IFTRUE 39042
39040: GO 39068
39042: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
39043: LD_ADDR_VAR 0 3
39047: PUSH
39048: LD_INT 2
39050: PUSH
39051: LD_INT 3
39053: PUSH
39054: LD_INT 4
39056: PUSH
39057: LD_INT 5
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: LIST
39064: LIST
39065: ST_TO_ADDR
39066: GO 39857
39068: LD_INT 12
39070: DOUBLE
39071: EQUAL
39072: IFTRUE 39076
39074: GO 39102
39076: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
39077: LD_ADDR_VAR 0 3
39081: PUSH
39082: LD_INT 2
39084: PUSH
39085: LD_INT 3
39087: PUSH
39088: LD_INT 4
39090: PUSH
39091: LD_INT 5
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: ST_TO_ADDR
39100: GO 39857
39102: LD_INT 13
39104: DOUBLE
39105: EQUAL
39106: IFTRUE 39110
39108: GO 39136
39110: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
39111: LD_ADDR_VAR 0 3
39115: PUSH
39116: LD_INT 2
39118: PUSH
39119: LD_INT 3
39121: PUSH
39122: LD_INT 4
39124: PUSH
39125: LD_INT 5
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: ST_TO_ADDR
39134: GO 39857
39136: LD_INT 14
39138: DOUBLE
39139: EQUAL
39140: IFTRUE 39144
39142: GO 39162
39144: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
39145: LD_ADDR_VAR 0 3
39149: PUSH
39150: LD_INT 4
39152: PUSH
39153: LD_INT 5
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: ST_TO_ADDR
39160: GO 39857
39162: LD_INT 6
39164: DOUBLE
39165: EQUAL
39166: IFTRUE 39170
39168: GO 39188
39170: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
39171: LD_ADDR_VAR 0 3
39175: PUSH
39176: LD_INT 4
39178: PUSH
39179: LD_INT 5
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: ST_TO_ADDR
39186: GO 39857
39188: LD_INT 10
39190: DOUBLE
39191: EQUAL
39192: IFTRUE 39196
39194: GO 39214
39196: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
39197: LD_ADDR_VAR 0 3
39201: PUSH
39202: LD_INT 4
39204: PUSH
39205: LD_INT 5
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: ST_TO_ADDR
39212: GO 39857
39214: LD_INT 22
39216: DOUBLE
39217: EQUAL
39218: IFTRUE 39222
39220: GO 39248
39222: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
39223: LD_ADDR_VAR 0 3
39227: PUSH
39228: LD_INT 11
39230: PUSH
39231: LD_INT 12
39233: PUSH
39234: LD_INT 13
39236: PUSH
39237: LD_INT 14
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: ST_TO_ADDR
39246: GO 39857
39248: LD_INT 23
39250: DOUBLE
39251: EQUAL
39252: IFTRUE 39256
39254: GO 39282
39256: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
39257: LD_ADDR_VAR 0 3
39261: PUSH
39262: LD_INT 11
39264: PUSH
39265: LD_INT 12
39267: PUSH
39268: LD_INT 13
39270: PUSH
39271: LD_INT 14
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: LIST
39278: LIST
39279: ST_TO_ADDR
39280: GO 39857
39282: LD_INT 24
39284: DOUBLE
39285: EQUAL
39286: IFTRUE 39290
39288: GO 39316
39290: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
39291: LD_ADDR_VAR 0 3
39295: PUSH
39296: LD_INT 11
39298: PUSH
39299: LD_INT 12
39301: PUSH
39302: LD_INT 13
39304: PUSH
39305: LD_INT 14
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: ST_TO_ADDR
39314: GO 39857
39316: LD_INT 30
39318: DOUBLE
39319: EQUAL
39320: IFTRUE 39324
39322: GO 39350
39324: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
39325: LD_ADDR_VAR 0 3
39329: PUSH
39330: LD_INT 11
39332: PUSH
39333: LD_INT 12
39335: PUSH
39336: LD_INT 13
39338: PUSH
39339: LD_INT 14
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: ST_TO_ADDR
39348: GO 39857
39350: LD_INT 25
39352: DOUBLE
39353: EQUAL
39354: IFTRUE 39358
39356: GO 39376
39358: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
39359: LD_ADDR_VAR 0 3
39363: PUSH
39364: LD_INT 13
39366: PUSH
39367: LD_INT 14
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: ST_TO_ADDR
39374: GO 39857
39376: LD_INT 27
39378: DOUBLE
39379: EQUAL
39380: IFTRUE 39384
39382: GO 39402
39384: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
39385: LD_ADDR_VAR 0 3
39389: PUSH
39390: LD_INT 13
39392: PUSH
39393: LD_INT 14
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: ST_TO_ADDR
39400: GO 39857
39402: LD_INT 92
39404: DOUBLE
39405: EQUAL
39406: IFTRUE 39410
39408: GO 39436
39410: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
39411: LD_ADDR_VAR 0 3
39415: PUSH
39416: LD_INT 11
39418: PUSH
39419: LD_INT 12
39421: PUSH
39422: LD_INT 13
39424: PUSH
39425: LD_INT 14
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: LIST
39432: LIST
39433: ST_TO_ADDR
39434: GO 39857
39436: LD_INT 28
39438: DOUBLE
39439: EQUAL
39440: IFTRUE 39444
39442: GO 39462
39444: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
39445: LD_ADDR_VAR 0 3
39449: PUSH
39450: LD_INT 13
39452: PUSH
39453: LD_INT 14
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: ST_TO_ADDR
39460: GO 39857
39462: LD_INT 29
39464: DOUBLE
39465: EQUAL
39466: IFTRUE 39470
39468: GO 39488
39470: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
39471: LD_ADDR_VAR 0 3
39475: PUSH
39476: LD_INT 13
39478: PUSH
39479: LD_INT 14
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: ST_TO_ADDR
39486: GO 39857
39488: LD_INT 31
39490: DOUBLE
39491: EQUAL
39492: IFTRUE 39496
39494: GO 39514
39496: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
39497: LD_ADDR_VAR 0 3
39501: PUSH
39502: LD_INT 13
39504: PUSH
39505: LD_INT 14
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: ST_TO_ADDR
39512: GO 39857
39514: LD_INT 26
39516: DOUBLE
39517: EQUAL
39518: IFTRUE 39522
39520: GO 39540
39522: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
39523: LD_ADDR_VAR 0 3
39527: PUSH
39528: LD_INT 13
39530: PUSH
39531: LD_INT 14
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: ST_TO_ADDR
39538: GO 39857
39540: LD_INT 42
39542: DOUBLE
39543: EQUAL
39544: IFTRUE 39548
39546: GO 39574
39548: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
39549: LD_ADDR_VAR 0 3
39553: PUSH
39554: LD_INT 21
39556: PUSH
39557: LD_INT 22
39559: PUSH
39560: LD_INT 23
39562: PUSH
39563: LD_INT 24
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: ST_TO_ADDR
39572: GO 39857
39574: LD_INT 43
39576: DOUBLE
39577: EQUAL
39578: IFTRUE 39582
39580: GO 39608
39582: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
39583: LD_ADDR_VAR 0 3
39587: PUSH
39588: LD_INT 21
39590: PUSH
39591: LD_INT 22
39593: PUSH
39594: LD_INT 23
39596: PUSH
39597: LD_INT 24
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: ST_TO_ADDR
39606: GO 39857
39608: LD_INT 44
39610: DOUBLE
39611: EQUAL
39612: IFTRUE 39616
39614: GO 39642
39616: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
39617: LD_ADDR_VAR 0 3
39621: PUSH
39622: LD_INT 21
39624: PUSH
39625: LD_INT 22
39627: PUSH
39628: LD_INT 23
39630: PUSH
39631: LD_INT 24
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: LIST
39638: LIST
39639: ST_TO_ADDR
39640: GO 39857
39642: LD_INT 45
39644: DOUBLE
39645: EQUAL
39646: IFTRUE 39650
39648: GO 39676
39650: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
39651: LD_ADDR_VAR 0 3
39655: PUSH
39656: LD_INT 21
39658: PUSH
39659: LD_INT 22
39661: PUSH
39662: LD_INT 23
39664: PUSH
39665: LD_INT 24
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: LIST
39672: LIST
39673: ST_TO_ADDR
39674: GO 39857
39676: LD_INT 49
39678: DOUBLE
39679: EQUAL
39680: IFTRUE 39684
39682: GO 39710
39684: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
39685: LD_ADDR_VAR 0 3
39689: PUSH
39690: LD_INT 21
39692: PUSH
39693: LD_INT 22
39695: PUSH
39696: LD_INT 23
39698: PUSH
39699: LD_INT 24
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: ST_TO_ADDR
39708: GO 39857
39710: LD_INT 51
39712: DOUBLE
39713: EQUAL
39714: IFTRUE 39718
39716: GO 39744
39718: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
39719: LD_ADDR_VAR 0 3
39723: PUSH
39724: LD_INT 21
39726: PUSH
39727: LD_INT 22
39729: PUSH
39730: LD_INT 23
39732: PUSH
39733: LD_INT 24
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: ST_TO_ADDR
39742: GO 39857
39744: LD_INT 52
39746: DOUBLE
39747: EQUAL
39748: IFTRUE 39752
39750: GO 39778
39752: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
39753: LD_ADDR_VAR 0 3
39757: PUSH
39758: LD_INT 21
39760: PUSH
39761: LD_INT 22
39763: PUSH
39764: LD_INT 23
39766: PUSH
39767: LD_INT 24
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: ST_TO_ADDR
39776: GO 39857
39778: LD_INT 53
39780: DOUBLE
39781: EQUAL
39782: IFTRUE 39786
39784: GO 39804
39786: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
39787: LD_ADDR_VAR 0 3
39791: PUSH
39792: LD_INT 23
39794: PUSH
39795: LD_INT 24
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: ST_TO_ADDR
39802: GO 39857
39804: LD_INT 46
39806: DOUBLE
39807: EQUAL
39808: IFTRUE 39812
39810: GO 39830
39812: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
39813: LD_ADDR_VAR 0 3
39817: PUSH
39818: LD_INT 23
39820: PUSH
39821: LD_INT 24
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: ST_TO_ADDR
39828: GO 39857
39830: LD_INT 47
39832: DOUBLE
39833: EQUAL
39834: IFTRUE 39838
39836: GO 39856
39838: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39839: LD_ADDR_VAR 0 3
39843: PUSH
39844: LD_INT 23
39846: PUSH
39847: LD_INT 24
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: ST_TO_ADDR
39854: GO 39857
39856: POP
// result := ( chassis in result ) ;
39857: LD_ADDR_VAR 0 3
39861: PUSH
39862: LD_VAR 0 1
39866: PUSH
39867: LD_VAR 0 3
39871: IN
39872: ST_TO_ADDR
// end ;
39873: LD_VAR 0 3
39877: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
39878: LD_INT 0
39880: PPUSH
39881: PPUSH
39882: PPUSH
39883: PPUSH
39884: PPUSH
39885: PPUSH
39886: PPUSH
// result := array ;
39887: LD_ADDR_VAR 0 5
39891: PUSH
39892: LD_VAR 0 1
39896: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
39897: LD_VAR 0 1
39901: NOT
39902: PUSH
39903: LD_VAR 0 2
39907: NOT
39908: OR
39909: PUSH
39910: LD_VAR 0 3
39914: NOT
39915: OR
39916: PUSH
39917: LD_VAR 0 2
39921: PUSH
39922: LD_VAR 0 1
39926: GREATER
39927: OR
39928: PUSH
39929: LD_VAR 0 3
39933: PUSH
39934: LD_VAR 0 1
39938: GREATER
39939: OR
39940: IFFALSE 39944
// exit ;
39942: GO 40240
// if direction then
39944: LD_VAR 0 4
39948: IFFALSE 40012
// begin d := 1 ;
39950: LD_ADDR_VAR 0 9
39954: PUSH
39955: LD_INT 1
39957: ST_TO_ADDR
// if i_from > i_to then
39958: LD_VAR 0 2
39962: PUSH
39963: LD_VAR 0 3
39967: GREATER
39968: IFFALSE 39994
// length := ( array - i_from ) + i_to else
39970: LD_ADDR_VAR 0 11
39974: PUSH
39975: LD_VAR 0 1
39979: PUSH
39980: LD_VAR 0 2
39984: MINUS
39985: PUSH
39986: LD_VAR 0 3
39990: PLUS
39991: ST_TO_ADDR
39992: GO 40010
// length := i_to - i_from ;
39994: LD_ADDR_VAR 0 11
39998: PUSH
39999: LD_VAR 0 3
40003: PUSH
40004: LD_VAR 0 2
40008: MINUS
40009: ST_TO_ADDR
// end else
40010: GO 40073
// begin d := - 1 ;
40012: LD_ADDR_VAR 0 9
40016: PUSH
40017: LD_INT 1
40019: NEG
40020: ST_TO_ADDR
// if i_from > i_to then
40021: LD_VAR 0 2
40025: PUSH
40026: LD_VAR 0 3
40030: GREATER
40031: IFFALSE 40051
// length := i_from - i_to else
40033: LD_ADDR_VAR 0 11
40037: PUSH
40038: LD_VAR 0 2
40042: PUSH
40043: LD_VAR 0 3
40047: MINUS
40048: ST_TO_ADDR
40049: GO 40073
// length := ( array - i_to ) + i_from ;
40051: LD_ADDR_VAR 0 11
40055: PUSH
40056: LD_VAR 0 1
40060: PUSH
40061: LD_VAR 0 3
40065: MINUS
40066: PUSH
40067: LD_VAR 0 2
40071: PLUS
40072: ST_TO_ADDR
// end ; if not length then
40073: LD_VAR 0 11
40077: NOT
40078: IFFALSE 40082
// exit ;
40080: GO 40240
// tmp := array ;
40082: LD_ADDR_VAR 0 10
40086: PUSH
40087: LD_VAR 0 1
40091: ST_TO_ADDR
// for i = 1 to length do
40092: LD_ADDR_VAR 0 6
40096: PUSH
40097: DOUBLE
40098: LD_INT 1
40100: DEC
40101: ST_TO_ADDR
40102: LD_VAR 0 11
40106: PUSH
40107: FOR_TO
40108: IFFALSE 40228
// begin for j = 1 to array do
40110: LD_ADDR_VAR 0 7
40114: PUSH
40115: DOUBLE
40116: LD_INT 1
40118: DEC
40119: ST_TO_ADDR
40120: LD_VAR 0 1
40124: PUSH
40125: FOR_TO
40126: IFFALSE 40214
// begin k := j + d ;
40128: LD_ADDR_VAR 0 8
40132: PUSH
40133: LD_VAR 0 7
40137: PUSH
40138: LD_VAR 0 9
40142: PLUS
40143: ST_TO_ADDR
// if k > array then
40144: LD_VAR 0 8
40148: PUSH
40149: LD_VAR 0 1
40153: GREATER
40154: IFFALSE 40164
// k := 1 ;
40156: LD_ADDR_VAR 0 8
40160: PUSH
40161: LD_INT 1
40163: ST_TO_ADDR
// if not k then
40164: LD_VAR 0 8
40168: NOT
40169: IFFALSE 40181
// k := array ;
40171: LD_ADDR_VAR 0 8
40175: PUSH
40176: LD_VAR 0 1
40180: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
40181: LD_ADDR_VAR 0 10
40185: PUSH
40186: LD_VAR 0 10
40190: PPUSH
40191: LD_VAR 0 8
40195: PPUSH
40196: LD_VAR 0 1
40200: PUSH
40201: LD_VAR 0 7
40205: ARRAY
40206: PPUSH
40207: CALL_OW 1
40211: ST_TO_ADDR
// end ;
40212: GO 40125
40214: POP
40215: POP
// array := tmp ;
40216: LD_ADDR_VAR 0 1
40220: PUSH
40221: LD_VAR 0 10
40225: ST_TO_ADDR
// end ;
40226: GO 40107
40228: POP
40229: POP
// result := array ;
40230: LD_ADDR_VAR 0 5
40234: PUSH
40235: LD_VAR 0 1
40239: ST_TO_ADDR
// end ;
40240: LD_VAR 0 5
40244: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
40245: LD_INT 0
40247: PPUSH
40248: PPUSH
// result := 0 ;
40249: LD_ADDR_VAR 0 3
40253: PUSH
40254: LD_INT 0
40256: ST_TO_ADDR
// if not array or not value in array then
40257: LD_VAR 0 1
40261: NOT
40262: PUSH
40263: LD_VAR 0 2
40267: PUSH
40268: LD_VAR 0 1
40272: IN
40273: NOT
40274: OR
40275: IFFALSE 40279
// exit ;
40277: GO 40333
// for i = 1 to array do
40279: LD_ADDR_VAR 0 4
40283: PUSH
40284: DOUBLE
40285: LD_INT 1
40287: DEC
40288: ST_TO_ADDR
40289: LD_VAR 0 1
40293: PUSH
40294: FOR_TO
40295: IFFALSE 40331
// if value = array [ i ] then
40297: LD_VAR 0 2
40301: PUSH
40302: LD_VAR 0 1
40306: PUSH
40307: LD_VAR 0 4
40311: ARRAY
40312: EQUAL
40313: IFFALSE 40329
// begin result := i ;
40315: LD_ADDR_VAR 0 3
40319: PUSH
40320: LD_VAR 0 4
40324: ST_TO_ADDR
// exit ;
40325: POP
40326: POP
40327: GO 40333
// end ;
40329: GO 40294
40331: POP
40332: POP
// end ;
40333: LD_VAR 0 3
40337: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
40338: LD_INT 0
40340: PPUSH
// vc_chassis := chassis ;
40341: LD_ADDR_OWVAR 37
40345: PUSH
40346: LD_VAR 0 1
40350: ST_TO_ADDR
// vc_engine := engine ;
40351: LD_ADDR_OWVAR 39
40355: PUSH
40356: LD_VAR 0 2
40360: ST_TO_ADDR
// vc_control := control ;
40361: LD_ADDR_OWVAR 38
40365: PUSH
40366: LD_VAR 0 3
40370: ST_TO_ADDR
// vc_weapon := weapon ;
40371: LD_ADDR_OWVAR 40
40375: PUSH
40376: LD_VAR 0 4
40380: ST_TO_ADDR
// vc_fuel_battery := fuel ;
40381: LD_ADDR_OWVAR 41
40385: PUSH
40386: LD_VAR 0 5
40390: ST_TO_ADDR
// end ;
40391: LD_VAR 0 6
40395: RET
// export function WantPlant ( unit ) ; var task ; begin
40396: LD_INT 0
40398: PPUSH
40399: PPUSH
// result := false ;
40400: LD_ADDR_VAR 0 2
40404: PUSH
40405: LD_INT 0
40407: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
40408: LD_ADDR_VAR 0 3
40412: PUSH
40413: LD_VAR 0 1
40417: PPUSH
40418: CALL_OW 437
40422: ST_TO_ADDR
// if task then
40423: LD_VAR 0 3
40427: IFFALSE 40455
// if task [ 1 ] [ 1 ] = p then
40429: LD_VAR 0 3
40433: PUSH
40434: LD_INT 1
40436: ARRAY
40437: PUSH
40438: LD_INT 1
40440: ARRAY
40441: PUSH
40442: LD_STRING p
40444: EQUAL
40445: IFFALSE 40455
// result := true ;
40447: LD_ADDR_VAR 0 2
40451: PUSH
40452: LD_INT 1
40454: ST_TO_ADDR
// end ;
40455: LD_VAR 0 2
40459: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
40460: LD_INT 0
40462: PPUSH
40463: PPUSH
40464: PPUSH
40465: PPUSH
// if pos < 1 then
40466: LD_VAR 0 2
40470: PUSH
40471: LD_INT 1
40473: LESS
40474: IFFALSE 40478
// exit ;
40476: GO 40781
// if pos = 1 then
40478: LD_VAR 0 2
40482: PUSH
40483: LD_INT 1
40485: EQUAL
40486: IFFALSE 40519
// result := Replace ( arr , pos [ 1 ] , value ) else
40488: LD_ADDR_VAR 0 4
40492: PUSH
40493: LD_VAR 0 1
40497: PPUSH
40498: LD_VAR 0 2
40502: PUSH
40503: LD_INT 1
40505: ARRAY
40506: PPUSH
40507: LD_VAR 0 3
40511: PPUSH
40512: CALL_OW 1
40516: ST_TO_ADDR
40517: GO 40781
// begin tmp := arr ;
40519: LD_ADDR_VAR 0 6
40523: PUSH
40524: LD_VAR 0 1
40528: ST_TO_ADDR
// s_arr := [ tmp ] ;
40529: LD_ADDR_VAR 0 7
40533: PUSH
40534: LD_VAR 0 6
40538: PUSH
40539: EMPTY
40540: LIST
40541: ST_TO_ADDR
// for i = 1 to pos - 1 do
40542: LD_ADDR_VAR 0 5
40546: PUSH
40547: DOUBLE
40548: LD_INT 1
40550: DEC
40551: ST_TO_ADDR
40552: LD_VAR 0 2
40556: PUSH
40557: LD_INT 1
40559: MINUS
40560: PUSH
40561: FOR_TO
40562: IFFALSE 40607
// begin tmp := tmp [ pos [ i ] ] ;
40564: LD_ADDR_VAR 0 6
40568: PUSH
40569: LD_VAR 0 6
40573: PUSH
40574: LD_VAR 0 2
40578: PUSH
40579: LD_VAR 0 5
40583: ARRAY
40584: ARRAY
40585: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
40586: LD_ADDR_VAR 0 7
40590: PUSH
40591: LD_VAR 0 7
40595: PUSH
40596: LD_VAR 0 6
40600: PUSH
40601: EMPTY
40602: LIST
40603: ADD
40604: ST_TO_ADDR
// end ;
40605: GO 40561
40607: POP
40608: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
40609: LD_ADDR_VAR 0 6
40613: PUSH
40614: LD_VAR 0 6
40618: PPUSH
40619: LD_VAR 0 2
40623: PUSH
40624: LD_VAR 0 2
40628: ARRAY
40629: PPUSH
40630: LD_VAR 0 3
40634: PPUSH
40635: CALL_OW 1
40639: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
40640: LD_ADDR_VAR 0 7
40644: PUSH
40645: LD_VAR 0 7
40649: PPUSH
40650: LD_VAR 0 7
40654: PPUSH
40655: LD_VAR 0 6
40659: PPUSH
40660: CALL_OW 1
40664: ST_TO_ADDR
// for i = s_arr downto 2 do
40665: LD_ADDR_VAR 0 5
40669: PUSH
40670: DOUBLE
40671: LD_VAR 0 7
40675: INC
40676: ST_TO_ADDR
40677: LD_INT 2
40679: PUSH
40680: FOR_DOWNTO
40681: IFFALSE 40765
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
40683: LD_ADDR_VAR 0 6
40687: PUSH
40688: LD_VAR 0 7
40692: PUSH
40693: LD_VAR 0 5
40697: PUSH
40698: LD_INT 1
40700: MINUS
40701: ARRAY
40702: PPUSH
40703: LD_VAR 0 2
40707: PUSH
40708: LD_VAR 0 5
40712: PUSH
40713: LD_INT 1
40715: MINUS
40716: ARRAY
40717: PPUSH
40718: LD_VAR 0 7
40722: PUSH
40723: LD_VAR 0 5
40727: ARRAY
40728: PPUSH
40729: CALL_OW 1
40733: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
40734: LD_ADDR_VAR 0 7
40738: PUSH
40739: LD_VAR 0 7
40743: PPUSH
40744: LD_VAR 0 5
40748: PUSH
40749: LD_INT 1
40751: MINUS
40752: PPUSH
40753: LD_VAR 0 6
40757: PPUSH
40758: CALL_OW 1
40762: ST_TO_ADDR
// end ;
40763: GO 40680
40765: POP
40766: POP
// result := s_arr [ 1 ] ;
40767: LD_ADDR_VAR 0 4
40771: PUSH
40772: LD_VAR 0 7
40776: PUSH
40777: LD_INT 1
40779: ARRAY
40780: ST_TO_ADDR
// end ; end ;
40781: LD_VAR 0 4
40785: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
40786: LD_INT 0
40788: PPUSH
40789: PPUSH
// if not list then
40790: LD_VAR 0 1
40794: NOT
40795: IFFALSE 40799
// exit ;
40797: GO 40890
// i := list [ pos1 ] ;
40799: LD_ADDR_VAR 0 5
40803: PUSH
40804: LD_VAR 0 1
40808: PUSH
40809: LD_VAR 0 2
40813: ARRAY
40814: ST_TO_ADDR
// if not i then
40815: LD_VAR 0 5
40819: NOT
40820: IFFALSE 40824
// exit ;
40822: GO 40890
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
40824: LD_ADDR_VAR 0 1
40828: PUSH
40829: LD_VAR 0 1
40833: PPUSH
40834: LD_VAR 0 2
40838: PPUSH
40839: LD_VAR 0 1
40843: PUSH
40844: LD_VAR 0 3
40848: ARRAY
40849: PPUSH
40850: CALL_OW 1
40854: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
40855: LD_ADDR_VAR 0 1
40859: PUSH
40860: LD_VAR 0 1
40864: PPUSH
40865: LD_VAR 0 3
40869: PPUSH
40870: LD_VAR 0 5
40874: PPUSH
40875: CALL_OW 1
40879: ST_TO_ADDR
// result := list ;
40880: LD_ADDR_VAR 0 4
40884: PUSH
40885: LD_VAR 0 1
40889: ST_TO_ADDR
// end ;
40890: LD_VAR 0 4
40894: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
40895: LD_INT 0
40897: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
40898: LD_ADDR_VAR 0 5
40902: PUSH
40903: LD_VAR 0 1
40907: PPUSH
40908: CALL_OW 250
40912: PPUSH
40913: LD_VAR 0 1
40917: PPUSH
40918: CALL_OW 251
40922: PPUSH
40923: LD_VAR 0 2
40927: PPUSH
40928: LD_VAR 0 3
40932: PPUSH
40933: LD_VAR 0 4
40937: PPUSH
40938: CALL 40948 0 5
40942: ST_TO_ADDR
// end ;
40943: LD_VAR 0 5
40947: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
40948: LD_INT 0
40950: PPUSH
40951: PPUSH
40952: PPUSH
40953: PPUSH
// if not list then
40954: LD_VAR 0 3
40958: NOT
40959: IFFALSE 40963
// exit ;
40961: GO 41351
// result := [ ] ;
40963: LD_ADDR_VAR 0 6
40967: PUSH
40968: EMPTY
40969: ST_TO_ADDR
// for i in list do
40970: LD_ADDR_VAR 0 7
40974: PUSH
40975: LD_VAR 0 3
40979: PUSH
40980: FOR_IN
40981: IFFALSE 41183
// begin tmp := GetDistUnitXY ( i , x , y ) ;
40983: LD_ADDR_VAR 0 9
40987: PUSH
40988: LD_VAR 0 7
40992: PPUSH
40993: LD_VAR 0 1
40997: PPUSH
40998: LD_VAR 0 2
41002: PPUSH
41003: CALL_OW 297
41007: ST_TO_ADDR
// if not result then
41008: LD_VAR 0 6
41012: NOT
41013: IFFALSE 41039
// result := [ [ i , tmp ] ] else
41015: LD_ADDR_VAR 0 6
41019: PUSH
41020: LD_VAR 0 7
41024: PUSH
41025: LD_VAR 0 9
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: EMPTY
41035: LIST
41036: ST_TO_ADDR
41037: GO 41181
// begin if result [ result ] [ 2 ] < tmp then
41039: LD_VAR 0 6
41043: PUSH
41044: LD_VAR 0 6
41048: ARRAY
41049: PUSH
41050: LD_INT 2
41052: ARRAY
41053: PUSH
41054: LD_VAR 0 9
41058: LESS
41059: IFFALSE 41101
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
41061: LD_ADDR_VAR 0 6
41065: PUSH
41066: LD_VAR 0 6
41070: PPUSH
41071: LD_VAR 0 6
41075: PUSH
41076: LD_INT 1
41078: PLUS
41079: PPUSH
41080: LD_VAR 0 7
41084: PUSH
41085: LD_VAR 0 9
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PPUSH
41094: CALL_OW 2
41098: ST_TO_ADDR
41099: GO 41181
// for j = 1 to result do
41101: LD_ADDR_VAR 0 8
41105: PUSH
41106: DOUBLE
41107: LD_INT 1
41109: DEC
41110: ST_TO_ADDR
41111: LD_VAR 0 6
41115: PUSH
41116: FOR_TO
41117: IFFALSE 41179
// begin if tmp < result [ j ] [ 2 ] then
41119: LD_VAR 0 9
41123: PUSH
41124: LD_VAR 0 6
41128: PUSH
41129: LD_VAR 0 8
41133: ARRAY
41134: PUSH
41135: LD_INT 2
41137: ARRAY
41138: LESS
41139: IFFALSE 41177
// begin result := Insert ( result , j , [ i , tmp ] ) ;
41141: LD_ADDR_VAR 0 6
41145: PUSH
41146: LD_VAR 0 6
41150: PPUSH
41151: LD_VAR 0 8
41155: PPUSH
41156: LD_VAR 0 7
41160: PUSH
41161: LD_VAR 0 9
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PPUSH
41170: CALL_OW 2
41174: ST_TO_ADDR
// break ;
41175: GO 41179
// end ; end ;
41177: GO 41116
41179: POP
41180: POP
// end ; end ;
41181: GO 40980
41183: POP
41184: POP
// if result and not asc then
41185: LD_VAR 0 6
41189: PUSH
41190: LD_VAR 0 4
41194: NOT
41195: AND
41196: IFFALSE 41271
// begin tmp := result ;
41198: LD_ADDR_VAR 0 9
41202: PUSH
41203: LD_VAR 0 6
41207: ST_TO_ADDR
// for i = tmp downto 1 do
41208: LD_ADDR_VAR 0 7
41212: PUSH
41213: DOUBLE
41214: LD_VAR 0 9
41218: INC
41219: ST_TO_ADDR
41220: LD_INT 1
41222: PUSH
41223: FOR_DOWNTO
41224: IFFALSE 41269
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
41226: LD_ADDR_VAR 0 6
41230: PUSH
41231: LD_VAR 0 6
41235: PPUSH
41236: LD_VAR 0 9
41240: PUSH
41241: LD_VAR 0 7
41245: MINUS
41246: PUSH
41247: LD_INT 1
41249: PLUS
41250: PPUSH
41251: LD_VAR 0 9
41255: PUSH
41256: LD_VAR 0 7
41260: ARRAY
41261: PPUSH
41262: CALL_OW 1
41266: ST_TO_ADDR
41267: GO 41223
41269: POP
41270: POP
// end ; tmp := [ ] ;
41271: LD_ADDR_VAR 0 9
41275: PUSH
41276: EMPTY
41277: ST_TO_ADDR
// if mode then
41278: LD_VAR 0 5
41282: IFFALSE 41351
// begin for i = 1 to result do
41284: LD_ADDR_VAR 0 7
41288: PUSH
41289: DOUBLE
41290: LD_INT 1
41292: DEC
41293: ST_TO_ADDR
41294: LD_VAR 0 6
41298: PUSH
41299: FOR_TO
41300: IFFALSE 41339
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
41302: LD_ADDR_VAR 0 9
41306: PUSH
41307: LD_VAR 0 9
41311: PPUSH
41312: LD_VAR 0 7
41316: PPUSH
41317: LD_VAR 0 6
41321: PUSH
41322: LD_VAR 0 7
41326: ARRAY
41327: PUSH
41328: LD_INT 1
41330: ARRAY
41331: PPUSH
41332: CALL_OW 1
41336: ST_TO_ADDR
41337: GO 41299
41339: POP
41340: POP
// result := tmp ;
41341: LD_ADDR_VAR 0 6
41345: PUSH
41346: LD_VAR 0 9
41350: ST_TO_ADDR
// end ; end ;
41351: LD_VAR 0 6
41355: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
41356: LD_INT 0
41358: PPUSH
41359: PPUSH
41360: PPUSH
41361: PPUSH
41362: PPUSH
41363: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
41364: LD_ADDR_VAR 0 5
41368: PUSH
41369: LD_INT 0
41371: PUSH
41372: LD_INT 0
41374: PUSH
41375: LD_INT 0
41377: PUSH
41378: EMPTY
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: LIST
41384: LIST
41385: ST_TO_ADDR
// if not x or not y then
41386: LD_VAR 0 2
41390: NOT
41391: PUSH
41392: LD_VAR 0 3
41396: NOT
41397: OR
41398: IFFALSE 41402
// exit ;
41400: GO 43052
// if not range then
41402: LD_VAR 0 4
41406: NOT
41407: IFFALSE 41417
// range := 10 ;
41409: LD_ADDR_VAR 0 4
41413: PUSH
41414: LD_INT 10
41416: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41417: LD_ADDR_VAR 0 8
41421: PUSH
41422: LD_INT 81
41424: PUSH
41425: LD_VAR 0 1
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: PUSH
41434: LD_INT 92
41436: PUSH
41437: LD_VAR 0 2
41441: PUSH
41442: LD_VAR 0 3
41446: PUSH
41447: LD_VAR 0 4
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 3
41460: PUSH
41461: LD_INT 21
41463: PUSH
41464: LD_INT 3
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: LIST
41479: PPUSH
41480: CALL_OW 69
41484: ST_TO_ADDR
// if not tmp then
41485: LD_VAR 0 8
41489: NOT
41490: IFFALSE 41494
// exit ;
41492: GO 43052
// for i in tmp do
41494: LD_ADDR_VAR 0 6
41498: PUSH
41499: LD_VAR 0 8
41503: PUSH
41504: FOR_IN
41505: IFFALSE 43027
// begin points := [ 0 , 0 , 0 ] ;
41507: LD_ADDR_VAR 0 9
41511: PUSH
41512: LD_INT 0
41514: PUSH
41515: LD_INT 0
41517: PUSH
41518: LD_INT 0
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: LIST
41525: ST_TO_ADDR
// bpoints := 1 ;
41526: LD_ADDR_VAR 0 10
41530: PUSH
41531: LD_INT 1
41533: ST_TO_ADDR
// case GetType ( i ) of unit_human :
41534: LD_VAR 0 6
41538: PPUSH
41539: CALL_OW 247
41543: PUSH
41544: LD_INT 1
41546: DOUBLE
41547: EQUAL
41548: IFTRUE 41552
41550: GO 42130
41552: POP
// begin if GetClass ( i ) = 1 then
41553: LD_VAR 0 6
41557: PPUSH
41558: CALL_OW 257
41562: PUSH
41563: LD_INT 1
41565: EQUAL
41566: IFFALSE 41587
// points := [ 10 , 5 , 3 ] ;
41568: LD_ADDR_VAR 0 9
41572: PUSH
41573: LD_INT 10
41575: PUSH
41576: LD_INT 5
41578: PUSH
41579: LD_INT 3
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: LIST
41586: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
41587: LD_VAR 0 6
41591: PPUSH
41592: CALL_OW 257
41596: PUSH
41597: LD_INT 2
41599: PUSH
41600: LD_INT 3
41602: PUSH
41603: LD_INT 4
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: LIST
41610: IN
41611: IFFALSE 41632
// points := [ 3 , 2 , 1 ] ;
41613: LD_ADDR_VAR 0 9
41617: PUSH
41618: LD_INT 3
41620: PUSH
41621: LD_INT 2
41623: PUSH
41624: LD_INT 1
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: LIST
41631: ST_TO_ADDR
// if GetClass ( i ) = 5 then
41632: LD_VAR 0 6
41636: PPUSH
41637: CALL_OW 257
41641: PUSH
41642: LD_INT 5
41644: EQUAL
41645: IFFALSE 41666
// points := [ 130 , 5 , 2 ] ;
41647: LD_ADDR_VAR 0 9
41651: PUSH
41652: LD_INT 130
41654: PUSH
41655: LD_INT 5
41657: PUSH
41658: LD_INT 2
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: LIST
41665: ST_TO_ADDR
// if GetClass ( i ) = 8 then
41666: LD_VAR 0 6
41670: PPUSH
41671: CALL_OW 257
41675: PUSH
41676: LD_INT 8
41678: EQUAL
41679: IFFALSE 41700
// points := [ 35 , 35 , 30 ] ;
41681: LD_ADDR_VAR 0 9
41685: PUSH
41686: LD_INT 35
41688: PUSH
41689: LD_INT 35
41691: PUSH
41692: LD_INT 30
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: LIST
41699: ST_TO_ADDR
// if GetClass ( i ) = 9 then
41700: LD_VAR 0 6
41704: PPUSH
41705: CALL_OW 257
41709: PUSH
41710: LD_INT 9
41712: EQUAL
41713: IFFALSE 41734
// points := [ 20 , 55 , 40 ] ;
41715: LD_ADDR_VAR 0 9
41719: PUSH
41720: LD_INT 20
41722: PUSH
41723: LD_INT 55
41725: PUSH
41726: LD_INT 40
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: LIST
41733: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
41734: LD_VAR 0 6
41738: PPUSH
41739: CALL_OW 257
41743: PUSH
41744: LD_INT 12
41746: PUSH
41747: LD_INT 16
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: IN
41754: IFFALSE 41775
// points := [ 5 , 3 , 2 ] ;
41756: LD_ADDR_VAR 0 9
41760: PUSH
41761: LD_INT 5
41763: PUSH
41764: LD_INT 3
41766: PUSH
41767: LD_INT 2
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: LIST
41774: ST_TO_ADDR
// if GetClass ( i ) = 17 then
41775: LD_VAR 0 6
41779: PPUSH
41780: CALL_OW 257
41784: PUSH
41785: LD_INT 17
41787: EQUAL
41788: IFFALSE 41809
// points := [ 100 , 50 , 75 ] ;
41790: LD_ADDR_VAR 0 9
41794: PUSH
41795: LD_INT 100
41797: PUSH
41798: LD_INT 50
41800: PUSH
41801: LD_INT 75
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: LIST
41808: ST_TO_ADDR
// if GetClass ( i ) = 15 then
41809: LD_VAR 0 6
41813: PPUSH
41814: CALL_OW 257
41818: PUSH
41819: LD_INT 15
41821: EQUAL
41822: IFFALSE 41843
// points := [ 10 , 5 , 3 ] ;
41824: LD_ADDR_VAR 0 9
41828: PUSH
41829: LD_INT 10
41831: PUSH
41832: LD_INT 5
41834: PUSH
41835: LD_INT 3
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: LIST
41842: ST_TO_ADDR
// if GetClass ( i ) = 14 then
41843: LD_VAR 0 6
41847: PPUSH
41848: CALL_OW 257
41852: PUSH
41853: LD_INT 14
41855: EQUAL
41856: IFFALSE 41877
// points := [ 10 , 0 , 0 ] ;
41858: LD_ADDR_VAR 0 9
41862: PUSH
41863: LD_INT 10
41865: PUSH
41866: LD_INT 0
41868: PUSH
41869: LD_INT 0
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: LIST
41876: ST_TO_ADDR
// if GetClass ( i ) = 11 then
41877: LD_VAR 0 6
41881: PPUSH
41882: CALL_OW 257
41886: PUSH
41887: LD_INT 11
41889: EQUAL
41890: IFFALSE 41911
// points := [ 30 , 10 , 5 ] ;
41892: LD_ADDR_VAR 0 9
41896: PUSH
41897: LD_INT 30
41899: PUSH
41900: LD_INT 10
41902: PUSH
41903: LD_INT 5
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: LIST
41910: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
41911: LD_VAR 0 1
41915: PPUSH
41916: LD_INT 5
41918: PPUSH
41919: CALL_OW 321
41923: PUSH
41924: LD_INT 2
41926: EQUAL
41927: IFFALSE 41944
// bpoints := bpoints * 1.8 ;
41929: LD_ADDR_VAR 0 10
41933: PUSH
41934: LD_VAR 0 10
41938: PUSH
41939: LD_REAL  1.80000000000000E+0000
41942: MUL
41943: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
41944: LD_VAR 0 6
41948: PPUSH
41949: CALL_OW 257
41953: PUSH
41954: LD_INT 1
41956: PUSH
41957: LD_INT 2
41959: PUSH
41960: LD_INT 3
41962: PUSH
41963: LD_INT 4
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: LIST
41970: LIST
41971: IN
41972: PUSH
41973: LD_VAR 0 1
41977: PPUSH
41978: LD_INT 51
41980: PPUSH
41981: CALL_OW 321
41985: PUSH
41986: LD_INT 2
41988: EQUAL
41989: AND
41990: IFFALSE 42007
// bpoints := bpoints * 1.2 ;
41992: LD_ADDR_VAR 0 10
41996: PUSH
41997: LD_VAR 0 10
42001: PUSH
42002: LD_REAL  1.20000000000000E+0000
42005: MUL
42006: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
42007: LD_VAR 0 6
42011: PPUSH
42012: CALL_OW 257
42016: PUSH
42017: LD_INT 5
42019: PUSH
42020: LD_INT 7
42022: PUSH
42023: LD_INT 9
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: LIST
42030: IN
42031: PUSH
42032: LD_VAR 0 1
42036: PPUSH
42037: LD_INT 52
42039: PPUSH
42040: CALL_OW 321
42044: PUSH
42045: LD_INT 2
42047: EQUAL
42048: AND
42049: IFFALSE 42066
// bpoints := bpoints * 1.5 ;
42051: LD_ADDR_VAR 0 10
42055: PUSH
42056: LD_VAR 0 10
42060: PUSH
42061: LD_REAL  1.50000000000000E+0000
42064: MUL
42065: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
42066: LD_VAR 0 1
42070: PPUSH
42071: LD_INT 66
42073: PPUSH
42074: CALL_OW 321
42078: PUSH
42079: LD_INT 2
42081: EQUAL
42082: IFFALSE 42099
// bpoints := bpoints * 1.1 ;
42084: LD_ADDR_VAR 0 10
42088: PUSH
42089: LD_VAR 0 10
42093: PUSH
42094: LD_REAL  1.10000000000000E+0000
42097: MUL
42098: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
42099: LD_ADDR_VAR 0 10
42103: PUSH
42104: LD_VAR 0 10
42108: PUSH
42109: LD_VAR 0 6
42113: PPUSH
42114: LD_INT 1
42116: PPUSH
42117: CALL_OW 259
42121: PUSH
42122: LD_REAL  1.15000000000000E+0000
42125: MUL
42126: MUL
42127: ST_TO_ADDR
// end ; unit_vehicle :
42128: GO 42956
42130: LD_INT 2
42132: DOUBLE
42133: EQUAL
42134: IFTRUE 42138
42136: GO 42944
42138: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
42139: LD_VAR 0 6
42143: PPUSH
42144: CALL_OW 264
42148: PUSH
42149: LD_INT 2
42151: PUSH
42152: LD_INT 42
42154: PUSH
42155: LD_INT 24
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: LIST
42162: IN
42163: IFFALSE 42184
// points := [ 25 , 5 , 3 ] ;
42165: LD_ADDR_VAR 0 9
42169: PUSH
42170: LD_INT 25
42172: PUSH
42173: LD_INT 5
42175: PUSH
42176: LD_INT 3
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: LIST
42183: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
42184: LD_VAR 0 6
42188: PPUSH
42189: CALL_OW 264
42193: PUSH
42194: LD_INT 4
42196: PUSH
42197: LD_INT 43
42199: PUSH
42200: LD_INT 25
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: LIST
42207: IN
42208: IFFALSE 42229
// points := [ 40 , 15 , 5 ] ;
42210: LD_ADDR_VAR 0 9
42214: PUSH
42215: LD_INT 40
42217: PUSH
42218: LD_INT 15
42220: PUSH
42221: LD_INT 5
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: LIST
42228: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
42229: LD_VAR 0 6
42233: PPUSH
42234: CALL_OW 264
42238: PUSH
42239: LD_INT 3
42241: PUSH
42242: LD_INT 23
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: IN
42249: IFFALSE 42270
// points := [ 7 , 25 , 8 ] ;
42251: LD_ADDR_VAR 0 9
42255: PUSH
42256: LD_INT 7
42258: PUSH
42259: LD_INT 25
42261: PUSH
42262: LD_INT 8
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: LIST
42269: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
42270: LD_VAR 0 6
42274: PPUSH
42275: CALL_OW 264
42279: PUSH
42280: LD_INT 5
42282: PUSH
42283: LD_INT 27
42285: PUSH
42286: LD_INT 44
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: LIST
42293: IN
42294: IFFALSE 42315
// points := [ 14 , 50 , 16 ] ;
42296: LD_ADDR_VAR 0 9
42300: PUSH
42301: LD_INT 14
42303: PUSH
42304: LD_INT 50
42306: PUSH
42307: LD_INT 16
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: LIST
42314: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
42315: LD_VAR 0 6
42319: PPUSH
42320: CALL_OW 264
42324: PUSH
42325: LD_INT 6
42327: PUSH
42328: LD_INT 46
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: IN
42335: IFFALSE 42356
// points := [ 32 , 120 , 70 ] ;
42337: LD_ADDR_VAR 0 9
42341: PUSH
42342: LD_INT 32
42344: PUSH
42345: LD_INT 120
42347: PUSH
42348: LD_INT 70
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: LIST
42355: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
42356: LD_VAR 0 6
42360: PPUSH
42361: CALL_OW 264
42365: PUSH
42366: LD_INT 7
42368: PUSH
42369: LD_INT 28
42371: PUSH
42372: LD_INT 45
42374: PUSH
42375: LD_INT 92
42377: PUSH
42378: EMPTY
42379: LIST
42380: LIST
42381: LIST
42382: LIST
42383: IN
42384: IFFALSE 42405
// points := [ 35 , 20 , 45 ] ;
42386: LD_ADDR_VAR 0 9
42390: PUSH
42391: LD_INT 35
42393: PUSH
42394: LD_INT 20
42396: PUSH
42397: LD_INT 45
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: LIST
42404: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
42405: LD_VAR 0 6
42409: PPUSH
42410: CALL_OW 264
42414: PUSH
42415: LD_INT 47
42417: PUSH
42418: EMPTY
42419: LIST
42420: IN
42421: IFFALSE 42442
// points := [ 67 , 45 , 75 ] ;
42423: LD_ADDR_VAR 0 9
42427: PUSH
42428: LD_INT 67
42430: PUSH
42431: LD_INT 45
42433: PUSH
42434: LD_INT 75
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: LIST
42441: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
42442: LD_VAR 0 6
42446: PPUSH
42447: CALL_OW 264
42451: PUSH
42452: LD_INT 26
42454: PUSH
42455: EMPTY
42456: LIST
42457: IN
42458: IFFALSE 42479
// points := [ 120 , 30 , 80 ] ;
42460: LD_ADDR_VAR 0 9
42464: PUSH
42465: LD_INT 120
42467: PUSH
42468: LD_INT 30
42470: PUSH
42471: LD_INT 80
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: LIST
42478: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
42479: LD_VAR 0 6
42483: PPUSH
42484: CALL_OW 264
42488: PUSH
42489: LD_INT 22
42491: PUSH
42492: EMPTY
42493: LIST
42494: IN
42495: IFFALSE 42516
// points := [ 40 , 1 , 1 ] ;
42497: LD_ADDR_VAR 0 9
42501: PUSH
42502: LD_INT 40
42504: PUSH
42505: LD_INT 1
42507: PUSH
42508: LD_INT 1
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: LIST
42515: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
42516: LD_VAR 0 6
42520: PPUSH
42521: CALL_OW 264
42525: PUSH
42526: LD_INT 29
42528: PUSH
42529: EMPTY
42530: LIST
42531: IN
42532: IFFALSE 42553
// points := [ 70 , 200 , 400 ] ;
42534: LD_ADDR_VAR 0 9
42538: PUSH
42539: LD_INT 70
42541: PUSH
42542: LD_INT 200
42544: PUSH
42545: LD_INT 400
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: LIST
42552: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
42553: LD_VAR 0 6
42557: PPUSH
42558: CALL_OW 264
42562: PUSH
42563: LD_INT 14
42565: PUSH
42566: LD_INT 53
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: IN
42573: IFFALSE 42594
// points := [ 40 , 10 , 20 ] ;
42575: LD_ADDR_VAR 0 9
42579: PUSH
42580: LD_INT 40
42582: PUSH
42583: LD_INT 10
42585: PUSH
42586: LD_INT 20
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: LIST
42593: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
42594: LD_VAR 0 6
42598: PPUSH
42599: CALL_OW 264
42603: PUSH
42604: LD_INT 9
42606: PUSH
42607: EMPTY
42608: LIST
42609: IN
42610: IFFALSE 42631
// points := [ 5 , 70 , 20 ] ;
42612: LD_ADDR_VAR 0 9
42616: PUSH
42617: LD_INT 5
42619: PUSH
42620: LD_INT 70
42622: PUSH
42623: LD_INT 20
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: LIST
42630: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
42631: LD_VAR 0 6
42635: PPUSH
42636: CALL_OW 264
42640: PUSH
42641: LD_INT 10
42643: PUSH
42644: EMPTY
42645: LIST
42646: IN
42647: IFFALSE 42668
// points := [ 35 , 110 , 70 ] ;
42649: LD_ADDR_VAR 0 9
42653: PUSH
42654: LD_INT 35
42656: PUSH
42657: LD_INT 110
42659: PUSH
42660: LD_INT 70
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: LIST
42667: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
42668: LD_VAR 0 6
42672: PPUSH
42673: CALL_OW 265
42677: PUSH
42678: LD_INT 25
42680: EQUAL
42681: IFFALSE 42702
// points := [ 80 , 65 , 100 ] ;
42683: LD_ADDR_VAR 0 9
42687: PUSH
42688: LD_INT 80
42690: PUSH
42691: LD_INT 65
42693: PUSH
42694: LD_INT 100
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: LIST
42701: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
42702: LD_VAR 0 6
42706: PPUSH
42707: CALL_OW 263
42711: PUSH
42712: LD_INT 1
42714: EQUAL
42715: IFFALSE 42750
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
42717: LD_ADDR_VAR 0 10
42721: PUSH
42722: LD_VAR 0 10
42726: PUSH
42727: LD_VAR 0 6
42731: PPUSH
42732: CALL_OW 311
42736: PPUSH
42737: LD_INT 3
42739: PPUSH
42740: CALL_OW 259
42744: PUSH
42745: LD_INT 4
42747: MUL
42748: MUL
42749: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
42750: LD_VAR 0 6
42754: PPUSH
42755: CALL_OW 263
42759: PUSH
42760: LD_INT 2
42762: EQUAL
42763: IFFALSE 42814
// begin j := IsControledBy ( i ) ;
42765: LD_ADDR_VAR 0 7
42769: PUSH
42770: LD_VAR 0 6
42774: PPUSH
42775: CALL_OW 312
42779: ST_TO_ADDR
// if j then
42780: LD_VAR 0 7
42784: IFFALSE 42814
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
42786: LD_ADDR_VAR 0 10
42790: PUSH
42791: LD_VAR 0 10
42795: PUSH
42796: LD_VAR 0 7
42800: PPUSH
42801: LD_INT 3
42803: PPUSH
42804: CALL_OW 259
42808: PUSH
42809: LD_INT 3
42811: MUL
42812: MUL
42813: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
42814: LD_VAR 0 6
42818: PPUSH
42819: CALL_OW 264
42823: PUSH
42824: LD_INT 5
42826: PUSH
42827: LD_INT 6
42829: PUSH
42830: LD_INT 46
42832: PUSH
42833: LD_INT 44
42835: PUSH
42836: LD_INT 47
42838: PUSH
42839: LD_INT 45
42841: PUSH
42842: LD_INT 28
42844: PUSH
42845: LD_INT 7
42847: PUSH
42848: LD_INT 27
42850: PUSH
42851: LD_INT 29
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: LIST
42858: LIST
42859: LIST
42860: LIST
42861: LIST
42862: LIST
42863: LIST
42864: LIST
42865: IN
42866: PUSH
42867: LD_VAR 0 1
42871: PPUSH
42872: LD_INT 52
42874: PPUSH
42875: CALL_OW 321
42879: PUSH
42880: LD_INT 2
42882: EQUAL
42883: AND
42884: IFFALSE 42901
// bpoints := bpoints * 1.2 ;
42886: LD_ADDR_VAR 0 10
42890: PUSH
42891: LD_VAR 0 10
42895: PUSH
42896: LD_REAL  1.20000000000000E+0000
42899: MUL
42900: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
42901: LD_VAR 0 6
42905: PPUSH
42906: CALL_OW 264
42910: PUSH
42911: LD_INT 6
42913: PUSH
42914: LD_INT 46
42916: PUSH
42917: LD_INT 47
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: LIST
42924: IN
42925: IFFALSE 42942
// bpoints := bpoints * 1.2 ;
42927: LD_ADDR_VAR 0 10
42931: PUSH
42932: LD_VAR 0 10
42936: PUSH
42937: LD_REAL  1.20000000000000E+0000
42940: MUL
42941: ST_TO_ADDR
// end ; unit_building :
42942: GO 42956
42944: LD_INT 3
42946: DOUBLE
42947: EQUAL
42948: IFTRUE 42952
42950: GO 42955
42952: POP
// ; end ;
42953: GO 42956
42955: POP
// for j = 1 to 3 do
42956: LD_ADDR_VAR 0 7
42960: PUSH
42961: DOUBLE
42962: LD_INT 1
42964: DEC
42965: ST_TO_ADDR
42966: LD_INT 3
42968: PUSH
42969: FOR_TO
42970: IFFALSE 43023
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
42972: LD_ADDR_VAR 0 5
42976: PUSH
42977: LD_VAR 0 5
42981: PPUSH
42982: LD_VAR 0 7
42986: PPUSH
42987: LD_VAR 0 5
42991: PUSH
42992: LD_VAR 0 7
42996: ARRAY
42997: PUSH
42998: LD_VAR 0 9
43002: PUSH
43003: LD_VAR 0 7
43007: ARRAY
43008: PUSH
43009: LD_VAR 0 10
43013: MUL
43014: PLUS
43015: PPUSH
43016: CALL_OW 1
43020: ST_TO_ADDR
43021: GO 42969
43023: POP
43024: POP
// end ;
43025: GO 41504
43027: POP
43028: POP
// result := Replace ( result , 4 , tmp ) ;
43029: LD_ADDR_VAR 0 5
43033: PUSH
43034: LD_VAR 0 5
43038: PPUSH
43039: LD_INT 4
43041: PPUSH
43042: LD_VAR 0 8
43046: PPUSH
43047: CALL_OW 1
43051: ST_TO_ADDR
// end ;
43052: LD_VAR 0 5
43056: RET
// export function DangerAtRange ( unit , range ) ; begin
43057: LD_INT 0
43059: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
43060: LD_ADDR_VAR 0 3
43064: PUSH
43065: LD_VAR 0 1
43069: PPUSH
43070: CALL_OW 255
43074: PPUSH
43075: LD_VAR 0 1
43079: PPUSH
43080: CALL_OW 250
43084: PPUSH
43085: LD_VAR 0 1
43089: PPUSH
43090: CALL_OW 251
43094: PPUSH
43095: LD_VAR 0 2
43099: PPUSH
43100: CALL 41356 0 4
43104: ST_TO_ADDR
// end ;
43105: LD_VAR 0 3
43109: RET
// export function DangerInArea ( side , area ) ; begin
43110: LD_INT 0
43112: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
43113: LD_ADDR_VAR 0 3
43117: PUSH
43118: LD_VAR 0 2
43122: PPUSH
43123: LD_INT 81
43125: PUSH
43126: LD_VAR 0 1
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: PPUSH
43135: CALL_OW 70
43139: ST_TO_ADDR
// end ;
43140: LD_VAR 0 3
43144: RET
// export function IsExtension ( b ) ; begin
43145: LD_INT 0
43147: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
43148: LD_ADDR_VAR 0 2
43152: PUSH
43153: LD_VAR 0 1
43157: PUSH
43158: LD_INT 23
43160: PUSH
43161: LD_INT 20
43163: PUSH
43164: LD_INT 22
43166: PUSH
43167: LD_INT 17
43169: PUSH
43170: LD_INT 24
43172: PUSH
43173: LD_INT 21
43175: PUSH
43176: LD_INT 19
43178: PUSH
43179: LD_INT 16
43181: PUSH
43182: LD_INT 25
43184: PUSH
43185: LD_INT 18
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: LIST
43198: LIST
43199: IN
43200: ST_TO_ADDR
// end ;
43201: LD_VAR 0 2
43205: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
43206: LD_INT 0
43208: PPUSH
43209: PPUSH
43210: PPUSH
// result := [ ] ;
43211: LD_ADDR_VAR 0 4
43215: PUSH
43216: EMPTY
43217: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
43218: LD_ADDR_VAR 0 5
43222: PUSH
43223: LD_VAR 0 2
43227: PPUSH
43228: LD_INT 21
43230: PUSH
43231: LD_INT 3
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PPUSH
43238: CALL_OW 70
43242: ST_TO_ADDR
// if not tmp then
43243: LD_VAR 0 5
43247: NOT
43248: IFFALSE 43252
// exit ;
43250: GO 43316
// if checkLink then
43252: LD_VAR 0 3
43256: IFFALSE 43306
// begin for i in tmp do
43258: LD_ADDR_VAR 0 6
43262: PUSH
43263: LD_VAR 0 5
43267: PUSH
43268: FOR_IN
43269: IFFALSE 43304
// if GetBase ( i ) <> base then
43271: LD_VAR 0 6
43275: PPUSH
43276: CALL_OW 274
43280: PUSH
43281: LD_VAR 0 1
43285: NONEQUAL
43286: IFFALSE 43302
// ComLinkToBase ( base , i ) ;
43288: LD_VAR 0 1
43292: PPUSH
43293: LD_VAR 0 6
43297: PPUSH
43298: CALL_OW 169
43302: GO 43268
43304: POP
43305: POP
// end ; result := tmp ;
43306: LD_ADDR_VAR 0 4
43310: PUSH
43311: LD_VAR 0 5
43315: ST_TO_ADDR
// end ;
43316: LD_VAR 0 4
43320: RET
// export function ComComplete ( units , b ) ; var i ; begin
43321: LD_INT 0
43323: PPUSH
43324: PPUSH
// if not units then
43325: LD_VAR 0 1
43329: NOT
43330: IFFALSE 43334
// exit ;
43332: GO 43424
// for i in units do
43334: LD_ADDR_VAR 0 4
43338: PUSH
43339: LD_VAR 0 1
43343: PUSH
43344: FOR_IN
43345: IFFALSE 43422
// if BuildingStatus ( b ) = bs_build then
43347: LD_VAR 0 2
43351: PPUSH
43352: CALL_OW 461
43356: PUSH
43357: LD_INT 1
43359: EQUAL
43360: IFFALSE 43420
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
43362: LD_VAR 0 4
43366: PPUSH
43367: LD_STRING h
43369: PUSH
43370: LD_VAR 0 2
43374: PPUSH
43375: CALL_OW 250
43379: PUSH
43380: LD_VAR 0 2
43384: PPUSH
43385: CALL_OW 251
43389: PUSH
43390: LD_VAR 0 2
43394: PUSH
43395: LD_INT 0
43397: PUSH
43398: LD_INT 0
43400: PUSH
43401: LD_INT 0
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: LIST
43410: LIST
43411: LIST
43412: PUSH
43413: EMPTY
43414: LIST
43415: PPUSH
43416: CALL_OW 446
43420: GO 43344
43422: POP
43423: POP
// end ;
43424: LD_VAR 0 3
43428: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
43429: LD_INT 0
43431: PPUSH
43432: PPUSH
43433: PPUSH
43434: PPUSH
43435: PPUSH
43436: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
43437: LD_VAR 0 1
43441: NOT
43442: PUSH
43443: LD_VAR 0 1
43447: PPUSH
43448: CALL_OW 263
43452: PUSH
43453: LD_INT 2
43455: NONEQUAL
43456: OR
43457: IFFALSE 43461
// exit ;
43459: GO 43777
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
43461: LD_ADDR_VAR 0 6
43465: PUSH
43466: LD_INT 22
43468: PUSH
43469: LD_VAR 0 1
43473: PPUSH
43474: CALL_OW 255
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 2
43485: PUSH
43486: LD_INT 30
43488: PUSH
43489: LD_INT 36
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 34
43498: PUSH
43499: LD_INT 31
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: LIST
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PPUSH
43515: CALL_OW 69
43519: ST_TO_ADDR
// if not tmp then
43520: LD_VAR 0 6
43524: NOT
43525: IFFALSE 43529
// exit ;
43527: GO 43777
// result := [ ] ;
43529: LD_ADDR_VAR 0 2
43533: PUSH
43534: EMPTY
43535: ST_TO_ADDR
// for i in tmp do
43536: LD_ADDR_VAR 0 3
43540: PUSH
43541: LD_VAR 0 6
43545: PUSH
43546: FOR_IN
43547: IFFALSE 43618
// begin t := UnitsInside ( i ) ;
43549: LD_ADDR_VAR 0 4
43553: PUSH
43554: LD_VAR 0 3
43558: PPUSH
43559: CALL_OW 313
43563: ST_TO_ADDR
// if t then
43564: LD_VAR 0 4
43568: IFFALSE 43616
// for j in t do
43570: LD_ADDR_VAR 0 7
43574: PUSH
43575: LD_VAR 0 4
43579: PUSH
43580: FOR_IN
43581: IFFALSE 43614
// result := Replace ( result , result + 1 , j ) ;
43583: LD_ADDR_VAR 0 2
43587: PUSH
43588: LD_VAR 0 2
43592: PPUSH
43593: LD_VAR 0 2
43597: PUSH
43598: LD_INT 1
43600: PLUS
43601: PPUSH
43602: LD_VAR 0 7
43606: PPUSH
43607: CALL_OW 1
43611: ST_TO_ADDR
43612: GO 43580
43614: POP
43615: POP
// end ;
43616: GO 43546
43618: POP
43619: POP
// if not result then
43620: LD_VAR 0 2
43624: NOT
43625: IFFALSE 43629
// exit ;
43627: GO 43777
// mech := result [ 1 ] ;
43629: LD_ADDR_VAR 0 5
43633: PUSH
43634: LD_VAR 0 2
43638: PUSH
43639: LD_INT 1
43641: ARRAY
43642: ST_TO_ADDR
// if result > 1 then
43643: LD_VAR 0 2
43647: PUSH
43648: LD_INT 1
43650: GREATER
43651: IFFALSE 43763
// begin for i = 2 to result do
43653: LD_ADDR_VAR 0 3
43657: PUSH
43658: DOUBLE
43659: LD_INT 2
43661: DEC
43662: ST_TO_ADDR
43663: LD_VAR 0 2
43667: PUSH
43668: FOR_TO
43669: IFFALSE 43761
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
43671: LD_ADDR_VAR 0 4
43675: PUSH
43676: LD_VAR 0 2
43680: PUSH
43681: LD_VAR 0 3
43685: ARRAY
43686: PPUSH
43687: LD_INT 3
43689: PPUSH
43690: CALL_OW 259
43694: PUSH
43695: LD_VAR 0 2
43699: PUSH
43700: LD_VAR 0 3
43704: ARRAY
43705: PPUSH
43706: CALL_OW 432
43710: MINUS
43711: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
43712: LD_VAR 0 4
43716: PUSH
43717: LD_VAR 0 5
43721: PPUSH
43722: LD_INT 3
43724: PPUSH
43725: CALL_OW 259
43729: PUSH
43730: LD_VAR 0 5
43734: PPUSH
43735: CALL_OW 432
43739: MINUS
43740: GREATEREQUAL
43741: IFFALSE 43759
// mech := result [ i ] ;
43743: LD_ADDR_VAR 0 5
43747: PUSH
43748: LD_VAR 0 2
43752: PUSH
43753: LD_VAR 0 3
43757: ARRAY
43758: ST_TO_ADDR
// end ;
43759: GO 43668
43761: POP
43762: POP
// end ; ComLinkTo ( vehicle , mech ) ;
43763: LD_VAR 0 1
43767: PPUSH
43768: LD_VAR 0 5
43772: PPUSH
43773: CALL_OW 135
// end ;
43777: LD_VAR 0 2
43781: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
43782: LD_INT 0
43784: PPUSH
43785: PPUSH
43786: PPUSH
43787: PPUSH
43788: PPUSH
43789: PPUSH
43790: PPUSH
43791: PPUSH
43792: PPUSH
43793: PPUSH
43794: PPUSH
43795: PPUSH
43796: PPUSH
// result := [ ] ;
43797: LD_ADDR_VAR 0 7
43801: PUSH
43802: EMPTY
43803: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
43804: LD_VAR 0 1
43808: PPUSH
43809: CALL_OW 266
43813: PUSH
43814: LD_INT 0
43816: PUSH
43817: LD_INT 1
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: IN
43824: NOT
43825: IFFALSE 43829
// exit ;
43827: GO 45463
// if name then
43829: LD_VAR 0 3
43833: IFFALSE 43849
// SetBName ( base_dep , name ) ;
43835: LD_VAR 0 1
43839: PPUSH
43840: LD_VAR 0 3
43844: PPUSH
43845: CALL_OW 500
// base := GetBase ( base_dep ) ;
43849: LD_ADDR_VAR 0 15
43853: PUSH
43854: LD_VAR 0 1
43858: PPUSH
43859: CALL_OW 274
43863: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
43864: LD_ADDR_VAR 0 16
43868: PUSH
43869: LD_VAR 0 1
43873: PPUSH
43874: CALL_OW 255
43878: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
43879: LD_ADDR_VAR 0 17
43883: PUSH
43884: LD_VAR 0 1
43888: PPUSH
43889: CALL_OW 248
43893: ST_TO_ADDR
// if sources then
43894: LD_VAR 0 5
43898: IFFALSE 43945
// for i = 1 to 3 do
43900: LD_ADDR_VAR 0 8
43904: PUSH
43905: DOUBLE
43906: LD_INT 1
43908: DEC
43909: ST_TO_ADDR
43910: LD_INT 3
43912: PUSH
43913: FOR_TO
43914: IFFALSE 43943
// AddResourceType ( base , i , sources [ i ] ) ;
43916: LD_VAR 0 15
43920: PPUSH
43921: LD_VAR 0 8
43925: PPUSH
43926: LD_VAR 0 5
43930: PUSH
43931: LD_VAR 0 8
43935: ARRAY
43936: PPUSH
43937: CALL_OW 276
43941: GO 43913
43943: POP
43944: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
43945: LD_ADDR_VAR 0 18
43949: PUSH
43950: LD_VAR 0 15
43954: PPUSH
43955: LD_VAR 0 2
43959: PPUSH
43960: LD_INT 1
43962: PPUSH
43963: CALL 43206 0 3
43967: ST_TO_ADDR
// InitHc ;
43968: CALL_OW 19
// InitUc ;
43972: CALL_OW 18
// uc_side := side ;
43976: LD_ADDR_OWVAR 20
43980: PUSH
43981: LD_VAR 0 16
43985: ST_TO_ADDR
// uc_nation := nation ;
43986: LD_ADDR_OWVAR 21
43990: PUSH
43991: LD_VAR 0 17
43995: ST_TO_ADDR
// if buildings then
43996: LD_VAR 0 18
44000: IFFALSE 45322
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
44002: LD_ADDR_VAR 0 19
44006: PUSH
44007: LD_VAR 0 18
44011: PPUSH
44012: LD_INT 2
44014: PUSH
44015: LD_INT 30
44017: PUSH
44018: LD_INT 29
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 30
44027: PUSH
44028: LD_INT 30
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: LIST
44039: PPUSH
44040: CALL_OW 72
44044: ST_TO_ADDR
// if tmp then
44045: LD_VAR 0 19
44049: IFFALSE 44097
// for i in tmp do
44051: LD_ADDR_VAR 0 8
44055: PUSH
44056: LD_VAR 0 19
44060: PUSH
44061: FOR_IN
44062: IFFALSE 44095
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
44064: LD_VAR 0 8
44068: PPUSH
44069: CALL_OW 250
44073: PPUSH
44074: LD_VAR 0 8
44078: PPUSH
44079: CALL_OW 251
44083: PPUSH
44084: LD_VAR 0 16
44088: PPUSH
44089: CALL_OW 441
44093: GO 44061
44095: POP
44096: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
44097: LD_VAR 0 18
44101: PPUSH
44102: LD_INT 2
44104: PUSH
44105: LD_INT 30
44107: PUSH
44108: LD_INT 32
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: LD_INT 30
44117: PUSH
44118: LD_INT 33
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: LIST
44129: PPUSH
44130: CALL_OW 72
44134: IFFALSE 44222
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
44136: LD_ADDR_VAR 0 8
44140: PUSH
44141: LD_VAR 0 18
44145: PPUSH
44146: LD_INT 2
44148: PUSH
44149: LD_INT 30
44151: PUSH
44152: LD_INT 32
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 30
44161: PUSH
44162: LD_INT 33
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: LIST
44173: PPUSH
44174: CALL_OW 72
44178: PUSH
44179: FOR_IN
44180: IFFALSE 44220
// begin if not GetBWeapon ( i ) then
44182: LD_VAR 0 8
44186: PPUSH
44187: CALL_OW 269
44191: NOT
44192: IFFALSE 44218
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
44194: LD_VAR 0 8
44198: PPUSH
44199: LD_VAR 0 8
44203: PPUSH
44204: LD_VAR 0 2
44208: PPUSH
44209: CALL 45468 0 2
44213: PPUSH
44214: CALL_OW 431
// end ;
44218: GO 44179
44220: POP
44221: POP
// end ; for i = 1 to personel do
44222: LD_ADDR_VAR 0 8
44226: PUSH
44227: DOUBLE
44228: LD_INT 1
44230: DEC
44231: ST_TO_ADDR
44232: LD_VAR 0 6
44236: PUSH
44237: FOR_TO
44238: IFFALSE 45302
// begin if i > 4 then
44240: LD_VAR 0 8
44244: PUSH
44245: LD_INT 4
44247: GREATER
44248: IFFALSE 44252
// break ;
44250: GO 45302
// case i of 1 :
44252: LD_VAR 0 8
44256: PUSH
44257: LD_INT 1
44259: DOUBLE
44260: EQUAL
44261: IFTRUE 44265
44263: GO 44345
44265: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
44266: LD_ADDR_VAR 0 12
44270: PUSH
44271: LD_VAR 0 18
44275: PPUSH
44276: LD_INT 22
44278: PUSH
44279: LD_VAR 0 16
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: LD_INT 58
44290: PUSH
44291: EMPTY
44292: LIST
44293: PUSH
44294: LD_INT 2
44296: PUSH
44297: LD_INT 30
44299: PUSH
44300: LD_INT 32
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 30
44309: PUSH
44310: LD_INT 4
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 30
44319: PUSH
44320: LD_INT 5
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: LIST
44337: PPUSH
44338: CALL_OW 72
44342: ST_TO_ADDR
44343: GO 44567
44345: LD_INT 2
44347: DOUBLE
44348: EQUAL
44349: IFTRUE 44353
44351: GO 44415
44353: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
44354: LD_ADDR_VAR 0 12
44358: PUSH
44359: LD_VAR 0 18
44363: PPUSH
44364: LD_INT 22
44366: PUSH
44367: LD_VAR 0 16
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 2
44378: PUSH
44379: LD_INT 30
44381: PUSH
44382: LD_INT 0
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 30
44391: PUSH
44392: LD_INT 1
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: LIST
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: PPUSH
44408: CALL_OW 72
44412: ST_TO_ADDR
44413: GO 44567
44415: LD_INT 3
44417: DOUBLE
44418: EQUAL
44419: IFTRUE 44423
44421: GO 44485
44423: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
44424: LD_ADDR_VAR 0 12
44428: PUSH
44429: LD_VAR 0 18
44433: PPUSH
44434: LD_INT 22
44436: PUSH
44437: LD_VAR 0 16
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: PUSH
44446: LD_INT 2
44448: PUSH
44449: LD_INT 30
44451: PUSH
44452: LD_INT 2
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 30
44461: PUSH
44462: LD_INT 3
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: LIST
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PPUSH
44478: CALL_OW 72
44482: ST_TO_ADDR
44483: GO 44567
44485: LD_INT 4
44487: DOUBLE
44488: EQUAL
44489: IFTRUE 44493
44491: GO 44566
44493: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
44494: LD_ADDR_VAR 0 12
44498: PUSH
44499: LD_VAR 0 18
44503: PPUSH
44504: LD_INT 22
44506: PUSH
44507: LD_VAR 0 16
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 2
44518: PUSH
44519: LD_INT 30
44521: PUSH
44522: LD_INT 6
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 30
44531: PUSH
44532: LD_INT 7
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 30
44541: PUSH
44542: LD_INT 8
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: LIST
44553: LIST
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PPUSH
44559: CALL_OW 72
44563: ST_TO_ADDR
44564: GO 44567
44566: POP
// if i = 1 then
44567: LD_VAR 0 8
44571: PUSH
44572: LD_INT 1
44574: EQUAL
44575: IFFALSE 44686
// begin tmp := [ ] ;
44577: LD_ADDR_VAR 0 19
44581: PUSH
44582: EMPTY
44583: ST_TO_ADDR
// for j in f do
44584: LD_ADDR_VAR 0 9
44588: PUSH
44589: LD_VAR 0 12
44593: PUSH
44594: FOR_IN
44595: IFFALSE 44668
// if GetBType ( j ) = b_bunker then
44597: LD_VAR 0 9
44601: PPUSH
44602: CALL_OW 266
44606: PUSH
44607: LD_INT 32
44609: EQUAL
44610: IFFALSE 44637
// tmp := Insert ( tmp , 1 , j ) else
44612: LD_ADDR_VAR 0 19
44616: PUSH
44617: LD_VAR 0 19
44621: PPUSH
44622: LD_INT 1
44624: PPUSH
44625: LD_VAR 0 9
44629: PPUSH
44630: CALL_OW 2
44634: ST_TO_ADDR
44635: GO 44666
// tmp := Insert ( tmp , tmp + 1 , j ) ;
44637: LD_ADDR_VAR 0 19
44641: PUSH
44642: LD_VAR 0 19
44646: PPUSH
44647: LD_VAR 0 19
44651: PUSH
44652: LD_INT 1
44654: PLUS
44655: PPUSH
44656: LD_VAR 0 9
44660: PPUSH
44661: CALL_OW 2
44665: ST_TO_ADDR
44666: GO 44594
44668: POP
44669: POP
// if tmp then
44670: LD_VAR 0 19
44674: IFFALSE 44686
// f := tmp ;
44676: LD_ADDR_VAR 0 12
44680: PUSH
44681: LD_VAR 0 19
44685: ST_TO_ADDR
// end ; x := personel [ i ] ;
44686: LD_ADDR_VAR 0 13
44690: PUSH
44691: LD_VAR 0 6
44695: PUSH
44696: LD_VAR 0 8
44700: ARRAY
44701: ST_TO_ADDR
// if x = - 1 then
44702: LD_VAR 0 13
44706: PUSH
44707: LD_INT 1
44709: NEG
44710: EQUAL
44711: IFFALSE 44920
// begin for j in f do
44713: LD_ADDR_VAR 0 9
44717: PUSH
44718: LD_VAR 0 12
44722: PUSH
44723: FOR_IN
44724: IFFALSE 44916
// repeat InitHc ;
44726: CALL_OW 19
// if GetBType ( j ) = b_barracks then
44730: LD_VAR 0 9
44734: PPUSH
44735: CALL_OW 266
44739: PUSH
44740: LD_INT 5
44742: EQUAL
44743: IFFALSE 44813
// begin if UnitsInside ( j ) < 3 then
44745: LD_VAR 0 9
44749: PPUSH
44750: CALL_OW 313
44754: PUSH
44755: LD_INT 3
44757: LESS
44758: IFFALSE 44794
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44760: LD_INT 0
44762: PPUSH
44763: LD_INT 5
44765: PUSH
44766: LD_INT 8
44768: PUSH
44769: LD_INT 9
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: LIST
44776: PUSH
44777: LD_VAR 0 17
44781: ARRAY
44782: PPUSH
44783: LD_VAR 0 4
44787: PPUSH
44788: CALL_OW 380
44792: GO 44811
// PrepareHuman ( false , i , skill ) ;
44794: LD_INT 0
44796: PPUSH
44797: LD_VAR 0 8
44801: PPUSH
44802: LD_VAR 0 4
44806: PPUSH
44807: CALL_OW 380
// end else
44811: GO 44830
// PrepareHuman ( false , i , skill ) ;
44813: LD_INT 0
44815: PPUSH
44816: LD_VAR 0 8
44820: PPUSH
44821: LD_VAR 0 4
44825: PPUSH
44826: CALL_OW 380
// un := CreateHuman ;
44830: LD_ADDR_VAR 0 14
44834: PUSH
44835: CALL_OW 44
44839: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44840: LD_ADDR_VAR 0 7
44844: PUSH
44845: LD_VAR 0 7
44849: PPUSH
44850: LD_INT 1
44852: PPUSH
44853: LD_VAR 0 14
44857: PPUSH
44858: CALL_OW 2
44862: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
44863: LD_VAR 0 14
44867: PPUSH
44868: LD_VAR 0 9
44872: PPUSH
44873: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
44877: LD_VAR 0 9
44881: PPUSH
44882: CALL_OW 313
44886: PUSH
44887: LD_INT 6
44889: EQUAL
44890: PUSH
44891: LD_VAR 0 9
44895: PPUSH
44896: CALL_OW 266
44900: PUSH
44901: LD_INT 32
44903: PUSH
44904: LD_INT 31
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: IN
44911: OR
44912: IFFALSE 44726
44914: GO 44723
44916: POP
44917: POP
// end else
44918: GO 45300
// for j = 1 to x do
44920: LD_ADDR_VAR 0 9
44924: PUSH
44925: DOUBLE
44926: LD_INT 1
44928: DEC
44929: ST_TO_ADDR
44930: LD_VAR 0 13
44934: PUSH
44935: FOR_TO
44936: IFFALSE 45298
// begin InitHc ;
44938: CALL_OW 19
// if not f then
44942: LD_VAR 0 12
44946: NOT
44947: IFFALSE 45036
// begin PrepareHuman ( false , i , skill ) ;
44949: LD_INT 0
44951: PPUSH
44952: LD_VAR 0 8
44956: PPUSH
44957: LD_VAR 0 4
44961: PPUSH
44962: CALL_OW 380
// un := CreateHuman ;
44966: LD_ADDR_VAR 0 14
44970: PUSH
44971: CALL_OW 44
44975: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44976: LD_ADDR_VAR 0 7
44980: PUSH
44981: LD_VAR 0 7
44985: PPUSH
44986: LD_INT 1
44988: PPUSH
44989: LD_VAR 0 14
44993: PPUSH
44994: CALL_OW 2
44998: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
44999: LD_VAR 0 14
45003: PPUSH
45004: LD_VAR 0 1
45008: PPUSH
45009: CALL_OW 250
45013: PPUSH
45014: LD_VAR 0 1
45018: PPUSH
45019: CALL_OW 251
45023: PPUSH
45024: LD_INT 10
45026: PPUSH
45027: LD_INT 0
45029: PPUSH
45030: CALL_OW 50
// continue ;
45034: GO 44935
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
45036: LD_VAR 0 12
45040: PUSH
45041: LD_INT 1
45043: ARRAY
45044: PPUSH
45045: CALL_OW 313
45049: PUSH
45050: LD_VAR 0 12
45054: PUSH
45055: LD_INT 1
45057: ARRAY
45058: PPUSH
45059: CALL_OW 266
45063: PUSH
45064: LD_INT 32
45066: PUSH
45067: LD_INT 31
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: IN
45074: AND
45075: PUSH
45076: LD_VAR 0 12
45080: PUSH
45081: LD_INT 1
45083: ARRAY
45084: PPUSH
45085: CALL_OW 313
45089: PUSH
45090: LD_INT 6
45092: EQUAL
45093: OR
45094: IFFALSE 45114
// f := Delete ( f , 1 ) ;
45096: LD_ADDR_VAR 0 12
45100: PUSH
45101: LD_VAR 0 12
45105: PPUSH
45106: LD_INT 1
45108: PPUSH
45109: CALL_OW 3
45113: ST_TO_ADDR
// if not f then
45114: LD_VAR 0 12
45118: NOT
45119: IFFALSE 45137
// begin x := x + 2 ;
45121: LD_ADDR_VAR 0 13
45125: PUSH
45126: LD_VAR 0 13
45130: PUSH
45131: LD_INT 2
45133: PLUS
45134: ST_TO_ADDR
// continue ;
45135: GO 44935
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
45137: LD_VAR 0 12
45141: PUSH
45142: LD_INT 1
45144: ARRAY
45145: PPUSH
45146: CALL_OW 266
45150: PUSH
45151: LD_INT 5
45153: EQUAL
45154: IFFALSE 45228
// begin if UnitsInside ( f [ 1 ] ) < 3 then
45156: LD_VAR 0 12
45160: PUSH
45161: LD_INT 1
45163: ARRAY
45164: PPUSH
45165: CALL_OW 313
45169: PUSH
45170: LD_INT 3
45172: LESS
45173: IFFALSE 45209
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45175: LD_INT 0
45177: PPUSH
45178: LD_INT 5
45180: PUSH
45181: LD_INT 8
45183: PUSH
45184: LD_INT 9
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: LIST
45191: PUSH
45192: LD_VAR 0 17
45196: ARRAY
45197: PPUSH
45198: LD_VAR 0 4
45202: PPUSH
45203: CALL_OW 380
45207: GO 45226
// PrepareHuman ( false , i , skill ) ;
45209: LD_INT 0
45211: PPUSH
45212: LD_VAR 0 8
45216: PPUSH
45217: LD_VAR 0 4
45221: PPUSH
45222: CALL_OW 380
// end else
45226: GO 45245
// PrepareHuman ( false , i , skill ) ;
45228: LD_INT 0
45230: PPUSH
45231: LD_VAR 0 8
45235: PPUSH
45236: LD_VAR 0 4
45240: PPUSH
45241: CALL_OW 380
// un := CreateHuman ;
45245: LD_ADDR_VAR 0 14
45249: PUSH
45250: CALL_OW 44
45254: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45255: LD_ADDR_VAR 0 7
45259: PUSH
45260: LD_VAR 0 7
45264: PPUSH
45265: LD_INT 1
45267: PPUSH
45268: LD_VAR 0 14
45272: PPUSH
45273: CALL_OW 2
45277: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
45278: LD_VAR 0 14
45282: PPUSH
45283: LD_VAR 0 12
45287: PUSH
45288: LD_INT 1
45290: ARRAY
45291: PPUSH
45292: CALL_OW 52
// end ;
45296: GO 44935
45298: POP
45299: POP
// end ;
45300: GO 44237
45302: POP
45303: POP
// result := result ^ buildings ;
45304: LD_ADDR_VAR 0 7
45308: PUSH
45309: LD_VAR 0 7
45313: PUSH
45314: LD_VAR 0 18
45318: ADD
45319: ST_TO_ADDR
// end else
45320: GO 45463
// begin for i = 1 to personel do
45322: LD_ADDR_VAR 0 8
45326: PUSH
45327: DOUBLE
45328: LD_INT 1
45330: DEC
45331: ST_TO_ADDR
45332: LD_VAR 0 6
45336: PUSH
45337: FOR_TO
45338: IFFALSE 45461
// begin if i > 4 then
45340: LD_VAR 0 8
45344: PUSH
45345: LD_INT 4
45347: GREATER
45348: IFFALSE 45352
// break ;
45350: GO 45461
// x := personel [ i ] ;
45352: LD_ADDR_VAR 0 13
45356: PUSH
45357: LD_VAR 0 6
45361: PUSH
45362: LD_VAR 0 8
45366: ARRAY
45367: ST_TO_ADDR
// if x = - 1 then
45368: LD_VAR 0 13
45372: PUSH
45373: LD_INT 1
45375: NEG
45376: EQUAL
45377: IFFALSE 45381
// continue ;
45379: GO 45337
// PrepareHuman ( false , i , skill ) ;
45381: LD_INT 0
45383: PPUSH
45384: LD_VAR 0 8
45388: PPUSH
45389: LD_VAR 0 4
45393: PPUSH
45394: CALL_OW 380
// un := CreateHuman ;
45398: LD_ADDR_VAR 0 14
45402: PUSH
45403: CALL_OW 44
45407: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45408: LD_VAR 0 14
45412: PPUSH
45413: LD_VAR 0 1
45417: PPUSH
45418: CALL_OW 250
45422: PPUSH
45423: LD_VAR 0 1
45427: PPUSH
45428: CALL_OW 251
45432: PPUSH
45433: LD_INT 10
45435: PPUSH
45436: LD_INT 0
45438: PPUSH
45439: CALL_OW 50
// result := result ^ un ;
45443: LD_ADDR_VAR 0 7
45447: PUSH
45448: LD_VAR 0 7
45452: PUSH
45453: LD_VAR 0 14
45457: ADD
45458: ST_TO_ADDR
// end ;
45459: GO 45337
45461: POP
45462: POP
// end ; end ;
45463: LD_VAR 0 7
45467: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
45468: LD_INT 0
45470: PPUSH
45471: PPUSH
45472: PPUSH
45473: PPUSH
45474: PPUSH
45475: PPUSH
45476: PPUSH
45477: PPUSH
45478: PPUSH
45479: PPUSH
45480: PPUSH
45481: PPUSH
45482: PPUSH
45483: PPUSH
45484: PPUSH
45485: PPUSH
// result := false ;
45486: LD_ADDR_VAR 0 3
45490: PUSH
45491: LD_INT 0
45493: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
45494: LD_VAR 0 1
45498: NOT
45499: PUSH
45500: LD_VAR 0 1
45504: PPUSH
45505: CALL_OW 266
45509: PUSH
45510: LD_INT 32
45512: PUSH
45513: LD_INT 33
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: IN
45520: NOT
45521: OR
45522: IFFALSE 45526
// exit ;
45524: GO 46635
// nat := GetNation ( tower ) ;
45526: LD_ADDR_VAR 0 12
45530: PUSH
45531: LD_VAR 0 1
45535: PPUSH
45536: CALL_OW 248
45540: ST_TO_ADDR
// side := GetSide ( tower ) ;
45541: LD_ADDR_VAR 0 16
45545: PUSH
45546: LD_VAR 0 1
45550: PPUSH
45551: CALL_OW 255
45555: ST_TO_ADDR
// x := GetX ( tower ) ;
45556: LD_ADDR_VAR 0 10
45560: PUSH
45561: LD_VAR 0 1
45565: PPUSH
45566: CALL_OW 250
45570: ST_TO_ADDR
// y := GetY ( tower ) ;
45571: LD_ADDR_VAR 0 11
45575: PUSH
45576: LD_VAR 0 1
45580: PPUSH
45581: CALL_OW 251
45585: ST_TO_ADDR
// if not x or not y then
45586: LD_VAR 0 10
45590: NOT
45591: PUSH
45592: LD_VAR 0 11
45596: NOT
45597: OR
45598: IFFALSE 45602
// exit ;
45600: GO 46635
// weapon := 0 ;
45602: LD_ADDR_VAR 0 18
45606: PUSH
45607: LD_INT 0
45609: ST_TO_ADDR
// fac_list := [ ] ;
45610: LD_ADDR_VAR 0 17
45614: PUSH
45615: EMPTY
45616: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
45617: LD_ADDR_VAR 0 6
45621: PUSH
45622: LD_VAR 0 1
45626: PPUSH
45627: CALL_OW 274
45631: PPUSH
45632: LD_VAR 0 2
45636: PPUSH
45637: LD_INT 0
45639: PPUSH
45640: CALL 43206 0 3
45644: PPUSH
45645: LD_INT 30
45647: PUSH
45648: LD_INT 3
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PPUSH
45655: CALL_OW 72
45659: ST_TO_ADDR
// if not factories then
45660: LD_VAR 0 6
45664: NOT
45665: IFFALSE 45669
// exit ;
45667: GO 46635
// for i in factories do
45669: LD_ADDR_VAR 0 8
45673: PUSH
45674: LD_VAR 0 6
45678: PUSH
45679: FOR_IN
45680: IFFALSE 45705
// fac_list := fac_list union AvailableWeaponList ( i ) ;
45682: LD_ADDR_VAR 0 17
45686: PUSH
45687: LD_VAR 0 17
45691: PUSH
45692: LD_VAR 0 8
45696: PPUSH
45697: CALL_OW 478
45701: UNION
45702: ST_TO_ADDR
45703: GO 45679
45705: POP
45706: POP
// if not fac_list then
45707: LD_VAR 0 17
45711: NOT
45712: IFFALSE 45716
// exit ;
45714: GO 46635
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
45716: LD_ADDR_VAR 0 5
45720: PUSH
45721: LD_INT 4
45723: PUSH
45724: LD_INT 5
45726: PUSH
45727: LD_INT 9
45729: PUSH
45730: LD_INT 10
45732: PUSH
45733: LD_INT 6
45735: PUSH
45736: LD_INT 7
45738: PUSH
45739: LD_INT 11
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 27
45753: PUSH
45754: LD_INT 28
45756: PUSH
45757: LD_INT 26
45759: PUSH
45760: LD_INT 30
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 43
45771: PUSH
45772: LD_INT 44
45774: PUSH
45775: LD_INT 46
45777: PUSH
45778: LD_INT 45
45780: PUSH
45781: LD_INT 47
45783: PUSH
45784: LD_INT 49
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: LIST
45799: PUSH
45800: LD_VAR 0 12
45804: ARRAY
45805: ST_TO_ADDR
// list := list isect fac_list ;
45806: LD_ADDR_VAR 0 5
45810: PUSH
45811: LD_VAR 0 5
45815: PUSH
45816: LD_VAR 0 17
45820: ISECT
45821: ST_TO_ADDR
// if not list then
45822: LD_VAR 0 5
45826: NOT
45827: IFFALSE 45831
// exit ;
45829: GO 46635
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
45831: LD_VAR 0 12
45835: PUSH
45836: LD_INT 3
45838: EQUAL
45839: PUSH
45840: LD_INT 49
45842: PUSH
45843: LD_VAR 0 5
45847: IN
45848: AND
45849: PUSH
45850: LD_INT 31
45852: PPUSH
45853: LD_VAR 0 16
45857: PPUSH
45858: CALL_OW 321
45862: PUSH
45863: LD_INT 2
45865: EQUAL
45866: AND
45867: IFFALSE 45927
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
45869: LD_INT 22
45871: PUSH
45872: LD_VAR 0 16
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 35
45883: PUSH
45884: LD_INT 49
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 91
45893: PUSH
45894: LD_VAR 0 1
45898: PUSH
45899: LD_INT 10
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: LIST
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: LIST
45911: PPUSH
45912: CALL_OW 69
45916: NOT
45917: IFFALSE 45927
// weapon := ru_time_lapser ;
45919: LD_ADDR_VAR 0 18
45923: PUSH
45924: LD_INT 49
45926: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
45927: LD_VAR 0 12
45931: PUSH
45932: LD_INT 1
45934: PUSH
45935: LD_INT 2
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: IN
45942: PUSH
45943: LD_INT 11
45945: PUSH
45946: LD_VAR 0 5
45950: IN
45951: PUSH
45952: LD_INT 30
45954: PUSH
45955: LD_VAR 0 5
45959: IN
45960: OR
45961: AND
45962: PUSH
45963: LD_INT 6
45965: PPUSH
45966: LD_VAR 0 16
45970: PPUSH
45971: CALL_OW 321
45975: PUSH
45976: LD_INT 2
45978: EQUAL
45979: AND
45980: IFFALSE 46145
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
45982: LD_INT 22
45984: PUSH
45985: LD_VAR 0 16
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 2
45996: PUSH
45997: LD_INT 35
45999: PUSH
46000: LD_INT 11
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 35
46009: PUSH
46010: LD_INT 30
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 91
46024: PUSH
46025: LD_VAR 0 1
46029: PUSH
46030: LD_INT 18
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: LIST
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: LIST
46042: PPUSH
46043: CALL_OW 69
46047: NOT
46048: PUSH
46049: LD_INT 22
46051: PUSH
46052: LD_VAR 0 16
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 2
46063: PUSH
46064: LD_INT 30
46066: PUSH
46067: LD_INT 32
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 30
46076: PUSH
46077: LD_INT 33
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 91
46091: PUSH
46092: LD_VAR 0 1
46096: PUSH
46097: LD_INT 12
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: LIST
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: LIST
46109: PUSH
46110: EMPTY
46111: LIST
46112: PPUSH
46113: CALL_OW 69
46117: PUSH
46118: LD_INT 2
46120: GREATER
46121: AND
46122: IFFALSE 46145
// weapon := [ us_radar , ar_radar ] [ nat ] ;
46124: LD_ADDR_VAR 0 18
46128: PUSH
46129: LD_INT 11
46131: PUSH
46132: LD_INT 30
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_VAR 0 12
46143: ARRAY
46144: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
46145: LD_VAR 0 18
46149: NOT
46150: PUSH
46151: LD_INT 40
46153: PPUSH
46154: LD_VAR 0 16
46158: PPUSH
46159: CALL_OW 321
46163: PUSH
46164: LD_INT 2
46166: EQUAL
46167: AND
46168: PUSH
46169: LD_INT 7
46171: PUSH
46172: LD_VAR 0 5
46176: IN
46177: PUSH
46178: LD_INT 28
46180: PUSH
46181: LD_VAR 0 5
46185: IN
46186: OR
46187: PUSH
46188: LD_INT 45
46190: PUSH
46191: LD_VAR 0 5
46195: IN
46196: OR
46197: AND
46198: IFFALSE 46452
// begin hex := GetHexInfo ( x , y ) ;
46200: LD_ADDR_VAR 0 4
46204: PUSH
46205: LD_VAR 0 10
46209: PPUSH
46210: LD_VAR 0 11
46214: PPUSH
46215: CALL_OW 546
46219: ST_TO_ADDR
// if hex [ 1 ] then
46220: LD_VAR 0 4
46224: PUSH
46225: LD_INT 1
46227: ARRAY
46228: IFFALSE 46232
// exit ;
46230: GO 46635
// height := hex [ 2 ] ;
46232: LD_ADDR_VAR 0 15
46236: PUSH
46237: LD_VAR 0 4
46241: PUSH
46242: LD_INT 2
46244: ARRAY
46245: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
46246: LD_ADDR_VAR 0 14
46250: PUSH
46251: LD_INT 0
46253: PUSH
46254: LD_INT 2
46256: PUSH
46257: LD_INT 3
46259: PUSH
46260: LD_INT 5
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: ST_TO_ADDR
// for i in tmp do
46269: LD_ADDR_VAR 0 8
46273: PUSH
46274: LD_VAR 0 14
46278: PUSH
46279: FOR_IN
46280: IFFALSE 46450
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
46282: LD_ADDR_VAR 0 9
46286: PUSH
46287: LD_VAR 0 10
46291: PPUSH
46292: LD_VAR 0 8
46296: PPUSH
46297: LD_INT 5
46299: PPUSH
46300: CALL_OW 272
46304: PUSH
46305: LD_VAR 0 11
46309: PPUSH
46310: LD_VAR 0 8
46314: PPUSH
46315: LD_INT 5
46317: PPUSH
46318: CALL_OW 273
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
46327: LD_VAR 0 9
46331: PUSH
46332: LD_INT 1
46334: ARRAY
46335: PPUSH
46336: LD_VAR 0 9
46340: PUSH
46341: LD_INT 2
46343: ARRAY
46344: PPUSH
46345: CALL_OW 488
46349: IFFALSE 46448
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
46351: LD_ADDR_VAR 0 4
46355: PUSH
46356: LD_VAR 0 9
46360: PUSH
46361: LD_INT 1
46363: ARRAY
46364: PPUSH
46365: LD_VAR 0 9
46369: PUSH
46370: LD_INT 2
46372: ARRAY
46373: PPUSH
46374: CALL_OW 546
46378: ST_TO_ADDR
// if hex [ 1 ] then
46379: LD_VAR 0 4
46383: PUSH
46384: LD_INT 1
46386: ARRAY
46387: IFFALSE 46391
// continue ;
46389: GO 46279
// h := hex [ 2 ] ;
46391: LD_ADDR_VAR 0 13
46395: PUSH
46396: LD_VAR 0 4
46400: PUSH
46401: LD_INT 2
46403: ARRAY
46404: ST_TO_ADDR
// if h + 7 < height then
46405: LD_VAR 0 13
46409: PUSH
46410: LD_INT 7
46412: PLUS
46413: PUSH
46414: LD_VAR 0 15
46418: LESS
46419: IFFALSE 46448
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
46421: LD_ADDR_VAR 0 18
46425: PUSH
46426: LD_INT 7
46428: PUSH
46429: LD_INT 28
46431: PUSH
46432: LD_INT 45
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: LIST
46439: PUSH
46440: LD_VAR 0 12
46444: ARRAY
46445: ST_TO_ADDR
// break ;
46446: GO 46450
// end ; end ; end ;
46448: GO 46279
46450: POP
46451: POP
// end ; if not weapon then
46452: LD_VAR 0 18
46456: NOT
46457: IFFALSE 46517
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
46459: LD_ADDR_VAR 0 5
46463: PUSH
46464: LD_VAR 0 5
46468: PUSH
46469: LD_INT 11
46471: PUSH
46472: LD_INT 30
46474: PUSH
46475: LD_INT 49
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: LIST
46482: DIFF
46483: ST_TO_ADDR
// if not list then
46484: LD_VAR 0 5
46488: NOT
46489: IFFALSE 46493
// exit ;
46491: GO 46635
// weapon := list [ rand ( 1 , list ) ] ;
46493: LD_ADDR_VAR 0 18
46497: PUSH
46498: LD_VAR 0 5
46502: PUSH
46503: LD_INT 1
46505: PPUSH
46506: LD_VAR 0 5
46510: PPUSH
46511: CALL_OW 12
46515: ARRAY
46516: ST_TO_ADDR
// end ; if weapon then
46517: LD_VAR 0 18
46521: IFFALSE 46635
// begin tmp := CostOfWeapon ( weapon ) ;
46523: LD_ADDR_VAR 0 14
46527: PUSH
46528: LD_VAR 0 18
46532: PPUSH
46533: CALL_OW 451
46537: ST_TO_ADDR
// j := GetBase ( tower ) ;
46538: LD_ADDR_VAR 0 9
46542: PUSH
46543: LD_VAR 0 1
46547: PPUSH
46548: CALL_OW 274
46552: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
46553: LD_VAR 0 9
46557: PPUSH
46558: LD_INT 1
46560: PPUSH
46561: CALL_OW 275
46565: PUSH
46566: LD_VAR 0 14
46570: PUSH
46571: LD_INT 1
46573: ARRAY
46574: GREATEREQUAL
46575: PUSH
46576: LD_VAR 0 9
46580: PPUSH
46581: LD_INT 2
46583: PPUSH
46584: CALL_OW 275
46588: PUSH
46589: LD_VAR 0 14
46593: PUSH
46594: LD_INT 2
46596: ARRAY
46597: GREATEREQUAL
46598: AND
46599: PUSH
46600: LD_VAR 0 9
46604: PPUSH
46605: LD_INT 3
46607: PPUSH
46608: CALL_OW 275
46612: PUSH
46613: LD_VAR 0 14
46617: PUSH
46618: LD_INT 3
46620: ARRAY
46621: GREATEREQUAL
46622: AND
46623: IFFALSE 46635
// result := weapon ;
46625: LD_ADDR_VAR 0 3
46629: PUSH
46630: LD_VAR 0 18
46634: ST_TO_ADDR
// end ; end ;
46635: LD_VAR 0 3
46639: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
46640: LD_INT 0
46642: PPUSH
46643: PPUSH
// result := true ;
46644: LD_ADDR_VAR 0 3
46648: PUSH
46649: LD_INT 1
46651: ST_TO_ADDR
// if array1 = array2 then
46652: LD_VAR 0 1
46656: PUSH
46657: LD_VAR 0 2
46661: EQUAL
46662: IFFALSE 46722
// begin for i = 1 to array1 do
46664: LD_ADDR_VAR 0 4
46668: PUSH
46669: DOUBLE
46670: LD_INT 1
46672: DEC
46673: ST_TO_ADDR
46674: LD_VAR 0 1
46678: PUSH
46679: FOR_TO
46680: IFFALSE 46718
// if array1 [ i ] <> array2 [ i ] then
46682: LD_VAR 0 1
46686: PUSH
46687: LD_VAR 0 4
46691: ARRAY
46692: PUSH
46693: LD_VAR 0 2
46697: PUSH
46698: LD_VAR 0 4
46702: ARRAY
46703: NONEQUAL
46704: IFFALSE 46716
// begin result := false ;
46706: LD_ADDR_VAR 0 3
46710: PUSH
46711: LD_INT 0
46713: ST_TO_ADDR
// break ;
46714: GO 46718
// end ;
46716: GO 46679
46718: POP
46719: POP
// end else
46720: GO 46730
// result := false ;
46722: LD_ADDR_VAR 0 3
46726: PUSH
46727: LD_INT 0
46729: ST_TO_ADDR
// end ;
46730: LD_VAR 0 3
46734: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
46735: LD_INT 0
46737: PPUSH
46738: PPUSH
// if not array1 or not array2 then
46739: LD_VAR 0 1
46743: NOT
46744: PUSH
46745: LD_VAR 0 2
46749: NOT
46750: OR
46751: IFFALSE 46755
// exit ;
46753: GO 46819
// result := true ;
46755: LD_ADDR_VAR 0 3
46759: PUSH
46760: LD_INT 1
46762: ST_TO_ADDR
// for i = 1 to array1 do
46763: LD_ADDR_VAR 0 4
46767: PUSH
46768: DOUBLE
46769: LD_INT 1
46771: DEC
46772: ST_TO_ADDR
46773: LD_VAR 0 1
46777: PUSH
46778: FOR_TO
46779: IFFALSE 46817
// if array1 [ i ] <> array2 [ i ] then
46781: LD_VAR 0 1
46785: PUSH
46786: LD_VAR 0 4
46790: ARRAY
46791: PUSH
46792: LD_VAR 0 2
46796: PUSH
46797: LD_VAR 0 4
46801: ARRAY
46802: NONEQUAL
46803: IFFALSE 46815
// begin result := false ;
46805: LD_ADDR_VAR 0 3
46809: PUSH
46810: LD_INT 0
46812: ST_TO_ADDR
// break ;
46813: GO 46817
// end ;
46815: GO 46778
46817: POP
46818: POP
// end ;
46819: LD_VAR 0 3
46823: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
46824: LD_INT 0
46826: PPUSH
46827: PPUSH
46828: PPUSH
// pom := GetBase ( fac ) ;
46829: LD_ADDR_VAR 0 5
46833: PUSH
46834: LD_VAR 0 1
46838: PPUSH
46839: CALL_OW 274
46843: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
46844: LD_ADDR_VAR 0 4
46848: PUSH
46849: LD_VAR 0 2
46853: PUSH
46854: LD_INT 1
46856: ARRAY
46857: PPUSH
46858: LD_VAR 0 2
46862: PUSH
46863: LD_INT 2
46865: ARRAY
46866: PPUSH
46867: LD_VAR 0 2
46871: PUSH
46872: LD_INT 3
46874: ARRAY
46875: PPUSH
46876: LD_VAR 0 2
46880: PUSH
46881: LD_INT 4
46883: ARRAY
46884: PPUSH
46885: CALL_OW 449
46889: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46890: LD_ADDR_VAR 0 3
46894: PUSH
46895: LD_VAR 0 5
46899: PPUSH
46900: LD_INT 1
46902: PPUSH
46903: CALL_OW 275
46907: PUSH
46908: LD_VAR 0 4
46912: PUSH
46913: LD_INT 1
46915: ARRAY
46916: GREATEREQUAL
46917: PUSH
46918: LD_VAR 0 5
46922: PPUSH
46923: LD_INT 2
46925: PPUSH
46926: CALL_OW 275
46930: PUSH
46931: LD_VAR 0 4
46935: PUSH
46936: LD_INT 2
46938: ARRAY
46939: GREATEREQUAL
46940: AND
46941: PUSH
46942: LD_VAR 0 5
46946: PPUSH
46947: LD_INT 3
46949: PPUSH
46950: CALL_OW 275
46954: PUSH
46955: LD_VAR 0 4
46959: PUSH
46960: LD_INT 3
46962: ARRAY
46963: GREATEREQUAL
46964: AND
46965: ST_TO_ADDR
// end ;
46966: LD_VAR 0 3
46970: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
46971: LD_INT 0
46973: PPUSH
46974: PPUSH
46975: PPUSH
46976: PPUSH
// pom := GetBase ( building ) ;
46977: LD_ADDR_VAR 0 3
46981: PUSH
46982: LD_VAR 0 1
46986: PPUSH
46987: CALL_OW 274
46991: ST_TO_ADDR
// if not pom then
46992: LD_VAR 0 3
46996: NOT
46997: IFFALSE 47001
// exit ;
46999: GO 47171
// btype := GetBType ( building ) ;
47001: LD_ADDR_VAR 0 5
47005: PUSH
47006: LD_VAR 0 1
47010: PPUSH
47011: CALL_OW 266
47015: ST_TO_ADDR
// if btype = b_armoury then
47016: LD_VAR 0 5
47020: PUSH
47021: LD_INT 4
47023: EQUAL
47024: IFFALSE 47034
// btype := b_barracks ;
47026: LD_ADDR_VAR 0 5
47030: PUSH
47031: LD_INT 5
47033: ST_TO_ADDR
// if btype = b_depot then
47034: LD_VAR 0 5
47038: PUSH
47039: LD_INT 0
47041: EQUAL
47042: IFFALSE 47052
// btype := b_warehouse ;
47044: LD_ADDR_VAR 0 5
47048: PUSH
47049: LD_INT 1
47051: ST_TO_ADDR
// if btype = b_workshop then
47052: LD_VAR 0 5
47056: PUSH
47057: LD_INT 2
47059: EQUAL
47060: IFFALSE 47070
// btype := b_factory ;
47062: LD_ADDR_VAR 0 5
47066: PUSH
47067: LD_INT 3
47069: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47070: LD_ADDR_VAR 0 4
47074: PUSH
47075: LD_VAR 0 5
47079: PPUSH
47080: LD_VAR 0 1
47084: PPUSH
47085: CALL_OW 248
47089: PPUSH
47090: CALL_OW 450
47094: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47095: LD_ADDR_VAR 0 2
47099: PUSH
47100: LD_VAR 0 3
47104: PPUSH
47105: LD_INT 1
47107: PPUSH
47108: CALL_OW 275
47112: PUSH
47113: LD_VAR 0 4
47117: PUSH
47118: LD_INT 1
47120: ARRAY
47121: GREATEREQUAL
47122: PUSH
47123: LD_VAR 0 3
47127: PPUSH
47128: LD_INT 2
47130: PPUSH
47131: CALL_OW 275
47135: PUSH
47136: LD_VAR 0 4
47140: PUSH
47141: LD_INT 2
47143: ARRAY
47144: GREATEREQUAL
47145: AND
47146: PUSH
47147: LD_VAR 0 3
47151: PPUSH
47152: LD_INT 3
47154: PPUSH
47155: CALL_OW 275
47159: PUSH
47160: LD_VAR 0 4
47164: PUSH
47165: LD_INT 3
47167: ARRAY
47168: GREATEREQUAL
47169: AND
47170: ST_TO_ADDR
// end ;
47171: LD_VAR 0 2
47175: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
47176: LD_INT 0
47178: PPUSH
47179: PPUSH
47180: PPUSH
// pom := GetBase ( building ) ;
47181: LD_ADDR_VAR 0 4
47185: PUSH
47186: LD_VAR 0 1
47190: PPUSH
47191: CALL_OW 274
47195: ST_TO_ADDR
// if not pom then
47196: LD_VAR 0 4
47200: NOT
47201: IFFALSE 47205
// exit ;
47203: GO 47306
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47205: LD_ADDR_VAR 0 5
47209: PUSH
47210: LD_VAR 0 2
47214: PPUSH
47215: LD_VAR 0 1
47219: PPUSH
47220: CALL_OW 248
47224: PPUSH
47225: CALL_OW 450
47229: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47230: LD_ADDR_VAR 0 3
47234: PUSH
47235: LD_VAR 0 4
47239: PPUSH
47240: LD_INT 1
47242: PPUSH
47243: CALL_OW 275
47247: PUSH
47248: LD_VAR 0 5
47252: PUSH
47253: LD_INT 1
47255: ARRAY
47256: GREATEREQUAL
47257: PUSH
47258: LD_VAR 0 4
47262: PPUSH
47263: LD_INT 2
47265: PPUSH
47266: CALL_OW 275
47270: PUSH
47271: LD_VAR 0 5
47275: PUSH
47276: LD_INT 2
47278: ARRAY
47279: GREATEREQUAL
47280: AND
47281: PUSH
47282: LD_VAR 0 4
47286: PPUSH
47287: LD_INT 3
47289: PPUSH
47290: CALL_OW 275
47294: PUSH
47295: LD_VAR 0 5
47299: PUSH
47300: LD_INT 3
47302: ARRAY
47303: GREATEREQUAL
47304: AND
47305: ST_TO_ADDR
// end ;
47306: LD_VAR 0 3
47310: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
47311: LD_INT 0
47313: PPUSH
47314: PPUSH
47315: PPUSH
47316: PPUSH
47317: PPUSH
47318: PPUSH
47319: PPUSH
47320: PPUSH
47321: PPUSH
47322: PPUSH
47323: PPUSH
// result := false ;
47324: LD_ADDR_VAR 0 8
47328: PUSH
47329: LD_INT 0
47331: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
47332: LD_VAR 0 5
47336: NOT
47337: PUSH
47338: LD_VAR 0 1
47342: NOT
47343: OR
47344: PUSH
47345: LD_VAR 0 2
47349: NOT
47350: OR
47351: PUSH
47352: LD_VAR 0 3
47356: NOT
47357: OR
47358: IFFALSE 47362
// exit ;
47360: GO 48176
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
47362: LD_ADDR_VAR 0 14
47366: PUSH
47367: LD_VAR 0 1
47371: PPUSH
47372: LD_VAR 0 2
47376: PPUSH
47377: LD_VAR 0 3
47381: PPUSH
47382: LD_VAR 0 4
47386: PPUSH
47387: LD_VAR 0 5
47391: PUSH
47392: LD_INT 1
47394: ARRAY
47395: PPUSH
47396: CALL_OW 248
47400: PPUSH
47401: LD_INT 0
47403: PPUSH
47404: CALL 49409 0 6
47408: ST_TO_ADDR
// if not hexes then
47409: LD_VAR 0 14
47413: NOT
47414: IFFALSE 47418
// exit ;
47416: GO 48176
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47418: LD_ADDR_VAR 0 17
47422: PUSH
47423: LD_VAR 0 5
47427: PPUSH
47428: LD_INT 22
47430: PUSH
47431: LD_VAR 0 13
47435: PPUSH
47436: CALL_OW 255
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 2
47447: PUSH
47448: LD_INT 30
47450: PUSH
47451: LD_INT 0
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 30
47460: PUSH
47461: LD_INT 1
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: LIST
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PPUSH
47477: CALL_OW 72
47481: ST_TO_ADDR
// for i = 1 to hexes do
47482: LD_ADDR_VAR 0 9
47486: PUSH
47487: DOUBLE
47488: LD_INT 1
47490: DEC
47491: ST_TO_ADDR
47492: LD_VAR 0 14
47496: PUSH
47497: FOR_TO
47498: IFFALSE 48174
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47500: LD_ADDR_VAR 0 13
47504: PUSH
47505: LD_VAR 0 14
47509: PUSH
47510: LD_VAR 0 9
47514: ARRAY
47515: PUSH
47516: LD_INT 1
47518: ARRAY
47519: PPUSH
47520: LD_VAR 0 14
47524: PUSH
47525: LD_VAR 0 9
47529: ARRAY
47530: PUSH
47531: LD_INT 2
47533: ARRAY
47534: PPUSH
47535: CALL_OW 428
47539: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
47540: LD_VAR 0 14
47544: PUSH
47545: LD_VAR 0 9
47549: ARRAY
47550: PUSH
47551: LD_INT 1
47553: ARRAY
47554: PPUSH
47555: LD_VAR 0 14
47559: PUSH
47560: LD_VAR 0 9
47564: ARRAY
47565: PUSH
47566: LD_INT 2
47568: ARRAY
47569: PPUSH
47570: CALL_OW 351
47574: PUSH
47575: LD_VAR 0 14
47579: PUSH
47580: LD_VAR 0 9
47584: ARRAY
47585: PUSH
47586: LD_INT 1
47588: ARRAY
47589: PPUSH
47590: LD_VAR 0 14
47594: PUSH
47595: LD_VAR 0 9
47599: ARRAY
47600: PUSH
47601: LD_INT 2
47603: ARRAY
47604: PPUSH
47605: CALL_OW 488
47609: NOT
47610: OR
47611: PUSH
47612: LD_VAR 0 13
47616: PPUSH
47617: CALL_OW 247
47621: PUSH
47622: LD_INT 3
47624: EQUAL
47625: OR
47626: IFFALSE 47632
// exit ;
47628: POP
47629: POP
47630: GO 48176
// if not tmp then
47632: LD_VAR 0 13
47636: NOT
47637: IFFALSE 47641
// continue ;
47639: GO 47497
// result := true ;
47641: LD_ADDR_VAR 0 8
47645: PUSH
47646: LD_INT 1
47648: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
47649: LD_VAR 0 6
47653: PUSH
47654: LD_VAR 0 13
47658: PPUSH
47659: CALL_OW 247
47663: PUSH
47664: LD_INT 2
47666: EQUAL
47667: AND
47668: PUSH
47669: LD_VAR 0 13
47673: PPUSH
47674: CALL_OW 263
47678: PUSH
47679: LD_INT 1
47681: EQUAL
47682: AND
47683: IFFALSE 47847
// begin if IsDrivenBy ( tmp ) then
47685: LD_VAR 0 13
47689: PPUSH
47690: CALL_OW 311
47694: IFFALSE 47698
// continue ;
47696: GO 47497
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
47698: LD_VAR 0 6
47702: PPUSH
47703: LD_INT 3
47705: PUSH
47706: LD_INT 60
47708: PUSH
47709: EMPTY
47710: LIST
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: LD_INT 3
47718: PUSH
47719: LD_INT 55
47721: PUSH
47722: EMPTY
47723: LIST
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PPUSH
47733: CALL_OW 72
47737: IFFALSE 47845
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
47739: LD_ADDR_VAR 0 18
47743: PUSH
47744: LD_VAR 0 6
47748: PPUSH
47749: LD_INT 3
47751: PUSH
47752: LD_INT 60
47754: PUSH
47755: EMPTY
47756: LIST
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 3
47764: PUSH
47765: LD_INT 55
47767: PUSH
47768: EMPTY
47769: LIST
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PPUSH
47779: CALL_OW 72
47783: PUSH
47784: LD_INT 1
47786: ARRAY
47787: ST_TO_ADDR
// if IsInUnit ( driver ) then
47788: LD_VAR 0 18
47792: PPUSH
47793: CALL_OW 310
47797: IFFALSE 47808
// ComExit ( driver ) ;
47799: LD_VAR 0 18
47803: PPUSH
47804: CALL 73189 0 1
// AddComEnterUnit ( driver , tmp ) ;
47808: LD_VAR 0 18
47812: PPUSH
47813: LD_VAR 0 13
47817: PPUSH
47818: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
47822: LD_VAR 0 18
47826: PPUSH
47827: LD_VAR 0 7
47831: PPUSH
47832: CALL_OW 173
// AddComExitVehicle ( driver ) ;
47836: LD_VAR 0 18
47840: PPUSH
47841: CALL_OW 181
// end ; continue ;
47845: GO 47497
// end ; if not cleaners or not tmp in cleaners then
47847: LD_VAR 0 6
47851: NOT
47852: PUSH
47853: LD_VAR 0 13
47857: PUSH
47858: LD_VAR 0 6
47862: IN
47863: NOT
47864: OR
47865: IFFALSE 48172
// begin if dep then
47867: LD_VAR 0 17
47871: IFFALSE 48007
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
47873: LD_ADDR_VAR 0 16
47877: PUSH
47878: LD_VAR 0 17
47882: PUSH
47883: LD_INT 1
47885: ARRAY
47886: PPUSH
47887: CALL_OW 250
47891: PPUSH
47892: LD_VAR 0 17
47896: PUSH
47897: LD_INT 1
47899: ARRAY
47900: PPUSH
47901: CALL_OW 254
47905: PPUSH
47906: LD_INT 5
47908: PPUSH
47909: CALL_OW 272
47913: PUSH
47914: LD_VAR 0 17
47918: PUSH
47919: LD_INT 1
47921: ARRAY
47922: PPUSH
47923: CALL_OW 251
47927: PPUSH
47928: LD_VAR 0 17
47932: PUSH
47933: LD_INT 1
47935: ARRAY
47936: PPUSH
47937: CALL_OW 254
47941: PPUSH
47942: LD_INT 5
47944: PPUSH
47945: CALL_OW 273
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
47954: LD_VAR 0 16
47958: PUSH
47959: LD_INT 1
47961: ARRAY
47962: PPUSH
47963: LD_VAR 0 16
47967: PUSH
47968: LD_INT 2
47970: ARRAY
47971: PPUSH
47972: CALL_OW 488
47976: IFFALSE 48007
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
47978: LD_VAR 0 13
47982: PPUSH
47983: LD_VAR 0 16
47987: PUSH
47988: LD_INT 1
47990: ARRAY
47991: PPUSH
47992: LD_VAR 0 16
47996: PUSH
47997: LD_INT 2
47999: ARRAY
48000: PPUSH
48001: CALL_OW 111
// continue ;
48005: GO 47497
// end ; end ; r := GetDir ( tmp ) ;
48007: LD_ADDR_VAR 0 15
48011: PUSH
48012: LD_VAR 0 13
48016: PPUSH
48017: CALL_OW 254
48021: ST_TO_ADDR
// if r = 5 then
48022: LD_VAR 0 15
48026: PUSH
48027: LD_INT 5
48029: EQUAL
48030: IFFALSE 48040
// r := 0 ;
48032: LD_ADDR_VAR 0 15
48036: PUSH
48037: LD_INT 0
48039: ST_TO_ADDR
// for j = r to 5 do
48040: LD_ADDR_VAR 0 10
48044: PUSH
48045: DOUBLE
48046: LD_VAR 0 15
48050: DEC
48051: ST_TO_ADDR
48052: LD_INT 5
48054: PUSH
48055: FOR_TO
48056: IFFALSE 48170
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
48058: LD_ADDR_VAR 0 11
48062: PUSH
48063: LD_VAR 0 13
48067: PPUSH
48068: CALL_OW 250
48072: PPUSH
48073: LD_VAR 0 10
48077: PPUSH
48078: LD_INT 2
48080: PPUSH
48081: CALL_OW 272
48085: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
48086: LD_ADDR_VAR 0 12
48090: PUSH
48091: LD_VAR 0 13
48095: PPUSH
48096: CALL_OW 251
48100: PPUSH
48101: LD_VAR 0 10
48105: PPUSH
48106: LD_INT 2
48108: PPUSH
48109: CALL_OW 273
48113: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
48114: LD_VAR 0 11
48118: PPUSH
48119: LD_VAR 0 12
48123: PPUSH
48124: CALL_OW 488
48128: PUSH
48129: LD_VAR 0 11
48133: PPUSH
48134: LD_VAR 0 12
48138: PPUSH
48139: CALL_OW 428
48143: NOT
48144: AND
48145: IFFALSE 48168
// begin ComMoveXY ( tmp , _x , _y ) ;
48147: LD_VAR 0 13
48151: PPUSH
48152: LD_VAR 0 11
48156: PPUSH
48157: LD_VAR 0 12
48161: PPUSH
48162: CALL_OW 111
// break ;
48166: GO 48170
// end ; end ;
48168: GO 48055
48170: POP
48171: POP
// end ; end ;
48172: GO 47497
48174: POP
48175: POP
// end ;
48176: LD_VAR 0 8
48180: RET
// export function BuildingTechInvented ( side , btype ) ; begin
48181: LD_INT 0
48183: PPUSH
// result := true ;
48184: LD_ADDR_VAR 0 3
48188: PUSH
48189: LD_INT 1
48191: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
48192: LD_VAR 0 2
48196: PUSH
48197: LD_INT 24
48199: DOUBLE
48200: EQUAL
48201: IFTRUE 48211
48203: LD_INT 33
48205: DOUBLE
48206: EQUAL
48207: IFTRUE 48211
48209: GO 48236
48211: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
48212: LD_ADDR_VAR 0 3
48216: PUSH
48217: LD_INT 32
48219: PPUSH
48220: LD_VAR 0 1
48224: PPUSH
48225: CALL_OW 321
48229: PUSH
48230: LD_INT 2
48232: EQUAL
48233: ST_TO_ADDR
48234: GO 48552
48236: LD_INT 20
48238: DOUBLE
48239: EQUAL
48240: IFTRUE 48244
48242: GO 48269
48244: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
48245: LD_ADDR_VAR 0 3
48249: PUSH
48250: LD_INT 6
48252: PPUSH
48253: LD_VAR 0 1
48257: PPUSH
48258: CALL_OW 321
48262: PUSH
48263: LD_INT 2
48265: EQUAL
48266: ST_TO_ADDR
48267: GO 48552
48269: LD_INT 22
48271: DOUBLE
48272: EQUAL
48273: IFTRUE 48283
48275: LD_INT 36
48277: DOUBLE
48278: EQUAL
48279: IFTRUE 48283
48281: GO 48308
48283: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
48284: LD_ADDR_VAR 0 3
48288: PUSH
48289: LD_INT 15
48291: PPUSH
48292: LD_VAR 0 1
48296: PPUSH
48297: CALL_OW 321
48301: PUSH
48302: LD_INT 2
48304: EQUAL
48305: ST_TO_ADDR
48306: GO 48552
48308: LD_INT 30
48310: DOUBLE
48311: EQUAL
48312: IFTRUE 48316
48314: GO 48341
48316: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
48317: LD_ADDR_VAR 0 3
48321: PUSH
48322: LD_INT 20
48324: PPUSH
48325: LD_VAR 0 1
48329: PPUSH
48330: CALL_OW 321
48334: PUSH
48335: LD_INT 2
48337: EQUAL
48338: ST_TO_ADDR
48339: GO 48552
48341: LD_INT 28
48343: DOUBLE
48344: EQUAL
48345: IFTRUE 48355
48347: LD_INT 21
48349: DOUBLE
48350: EQUAL
48351: IFTRUE 48355
48353: GO 48380
48355: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
48356: LD_ADDR_VAR 0 3
48360: PUSH
48361: LD_INT 21
48363: PPUSH
48364: LD_VAR 0 1
48368: PPUSH
48369: CALL_OW 321
48373: PUSH
48374: LD_INT 2
48376: EQUAL
48377: ST_TO_ADDR
48378: GO 48552
48380: LD_INT 16
48382: DOUBLE
48383: EQUAL
48384: IFTRUE 48388
48386: GO 48413
48388: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
48389: LD_ADDR_VAR 0 3
48393: PUSH
48394: LD_INT 84
48396: PPUSH
48397: LD_VAR 0 1
48401: PPUSH
48402: CALL_OW 321
48406: PUSH
48407: LD_INT 2
48409: EQUAL
48410: ST_TO_ADDR
48411: GO 48552
48413: LD_INT 19
48415: DOUBLE
48416: EQUAL
48417: IFTRUE 48427
48419: LD_INT 23
48421: DOUBLE
48422: EQUAL
48423: IFTRUE 48427
48425: GO 48452
48427: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
48428: LD_ADDR_VAR 0 3
48432: PUSH
48433: LD_INT 83
48435: PPUSH
48436: LD_VAR 0 1
48440: PPUSH
48441: CALL_OW 321
48445: PUSH
48446: LD_INT 2
48448: EQUAL
48449: ST_TO_ADDR
48450: GO 48552
48452: LD_INT 17
48454: DOUBLE
48455: EQUAL
48456: IFTRUE 48460
48458: GO 48485
48460: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
48461: LD_ADDR_VAR 0 3
48465: PUSH
48466: LD_INT 39
48468: PPUSH
48469: LD_VAR 0 1
48473: PPUSH
48474: CALL_OW 321
48478: PUSH
48479: LD_INT 2
48481: EQUAL
48482: ST_TO_ADDR
48483: GO 48552
48485: LD_INT 18
48487: DOUBLE
48488: EQUAL
48489: IFTRUE 48493
48491: GO 48518
48493: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
48494: LD_ADDR_VAR 0 3
48498: PUSH
48499: LD_INT 40
48501: PPUSH
48502: LD_VAR 0 1
48506: PPUSH
48507: CALL_OW 321
48511: PUSH
48512: LD_INT 2
48514: EQUAL
48515: ST_TO_ADDR
48516: GO 48552
48518: LD_INT 27
48520: DOUBLE
48521: EQUAL
48522: IFTRUE 48526
48524: GO 48551
48526: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
48527: LD_ADDR_VAR 0 3
48531: PUSH
48532: LD_INT 35
48534: PPUSH
48535: LD_VAR 0 1
48539: PPUSH
48540: CALL_OW 321
48544: PUSH
48545: LD_INT 2
48547: EQUAL
48548: ST_TO_ADDR
48549: GO 48552
48551: POP
// end ;
48552: LD_VAR 0 3
48556: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
48557: LD_INT 0
48559: PPUSH
48560: PPUSH
48561: PPUSH
48562: PPUSH
48563: PPUSH
48564: PPUSH
48565: PPUSH
48566: PPUSH
48567: PPUSH
48568: PPUSH
48569: PPUSH
// result := false ;
48570: LD_ADDR_VAR 0 6
48574: PUSH
48575: LD_INT 0
48577: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
48578: LD_VAR 0 1
48582: NOT
48583: PUSH
48584: LD_VAR 0 1
48588: PPUSH
48589: CALL_OW 266
48593: PUSH
48594: LD_INT 0
48596: PUSH
48597: LD_INT 1
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: IN
48604: NOT
48605: OR
48606: PUSH
48607: LD_VAR 0 2
48611: NOT
48612: OR
48613: PUSH
48614: LD_VAR 0 5
48618: PUSH
48619: LD_INT 0
48621: PUSH
48622: LD_INT 1
48624: PUSH
48625: LD_INT 2
48627: PUSH
48628: LD_INT 3
48630: PUSH
48631: LD_INT 4
48633: PUSH
48634: LD_INT 5
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: IN
48645: NOT
48646: OR
48647: PUSH
48648: LD_VAR 0 3
48652: PPUSH
48653: LD_VAR 0 4
48657: PPUSH
48658: CALL_OW 488
48662: NOT
48663: OR
48664: IFFALSE 48668
// exit ;
48666: GO 49404
// side := GetSide ( depot ) ;
48668: LD_ADDR_VAR 0 9
48672: PUSH
48673: LD_VAR 0 1
48677: PPUSH
48678: CALL_OW 255
48682: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
48683: LD_VAR 0 9
48687: PPUSH
48688: LD_VAR 0 2
48692: PPUSH
48693: CALL 48181 0 2
48697: NOT
48698: IFFALSE 48702
// exit ;
48700: GO 49404
// pom := GetBase ( depot ) ;
48702: LD_ADDR_VAR 0 10
48706: PUSH
48707: LD_VAR 0 1
48711: PPUSH
48712: CALL_OW 274
48716: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
48717: LD_ADDR_VAR 0 11
48721: PUSH
48722: LD_VAR 0 2
48726: PPUSH
48727: LD_VAR 0 1
48731: PPUSH
48732: CALL_OW 248
48736: PPUSH
48737: CALL_OW 450
48741: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
48742: LD_VAR 0 10
48746: PPUSH
48747: LD_INT 1
48749: PPUSH
48750: CALL_OW 275
48754: PUSH
48755: LD_VAR 0 11
48759: PUSH
48760: LD_INT 1
48762: ARRAY
48763: GREATEREQUAL
48764: PUSH
48765: LD_VAR 0 10
48769: PPUSH
48770: LD_INT 2
48772: PPUSH
48773: CALL_OW 275
48777: PUSH
48778: LD_VAR 0 11
48782: PUSH
48783: LD_INT 2
48785: ARRAY
48786: GREATEREQUAL
48787: AND
48788: PUSH
48789: LD_VAR 0 10
48793: PPUSH
48794: LD_INT 3
48796: PPUSH
48797: CALL_OW 275
48801: PUSH
48802: LD_VAR 0 11
48806: PUSH
48807: LD_INT 3
48809: ARRAY
48810: GREATEREQUAL
48811: AND
48812: NOT
48813: IFFALSE 48817
// exit ;
48815: GO 49404
// if GetBType ( depot ) = b_depot then
48817: LD_VAR 0 1
48821: PPUSH
48822: CALL_OW 266
48826: PUSH
48827: LD_INT 0
48829: EQUAL
48830: IFFALSE 48842
// dist := 28 else
48832: LD_ADDR_VAR 0 14
48836: PUSH
48837: LD_INT 28
48839: ST_TO_ADDR
48840: GO 48850
// dist := 36 ;
48842: LD_ADDR_VAR 0 14
48846: PUSH
48847: LD_INT 36
48849: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
48850: LD_VAR 0 1
48854: PPUSH
48855: LD_VAR 0 3
48859: PPUSH
48860: LD_VAR 0 4
48864: PPUSH
48865: CALL_OW 297
48869: PUSH
48870: LD_VAR 0 14
48874: GREATER
48875: IFFALSE 48879
// exit ;
48877: GO 49404
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
48879: LD_ADDR_VAR 0 12
48883: PUSH
48884: LD_VAR 0 2
48888: PPUSH
48889: LD_VAR 0 3
48893: PPUSH
48894: LD_VAR 0 4
48898: PPUSH
48899: LD_VAR 0 5
48903: PPUSH
48904: LD_VAR 0 1
48908: PPUSH
48909: CALL_OW 248
48913: PPUSH
48914: LD_INT 0
48916: PPUSH
48917: CALL 49409 0 6
48921: ST_TO_ADDR
// if not hexes then
48922: LD_VAR 0 12
48926: NOT
48927: IFFALSE 48931
// exit ;
48929: GO 49404
// hex := GetHexInfo ( x , y ) ;
48931: LD_ADDR_VAR 0 15
48935: PUSH
48936: LD_VAR 0 3
48940: PPUSH
48941: LD_VAR 0 4
48945: PPUSH
48946: CALL_OW 546
48950: ST_TO_ADDR
// if hex [ 1 ] then
48951: LD_VAR 0 15
48955: PUSH
48956: LD_INT 1
48958: ARRAY
48959: IFFALSE 48963
// exit ;
48961: GO 49404
// height := hex [ 2 ] ;
48963: LD_ADDR_VAR 0 13
48967: PUSH
48968: LD_VAR 0 15
48972: PUSH
48973: LD_INT 2
48975: ARRAY
48976: ST_TO_ADDR
// for i = 1 to hexes do
48977: LD_ADDR_VAR 0 7
48981: PUSH
48982: DOUBLE
48983: LD_INT 1
48985: DEC
48986: ST_TO_ADDR
48987: LD_VAR 0 12
48991: PUSH
48992: FOR_TO
48993: IFFALSE 49323
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
48995: LD_VAR 0 12
48999: PUSH
49000: LD_VAR 0 7
49004: ARRAY
49005: PUSH
49006: LD_INT 1
49008: ARRAY
49009: PPUSH
49010: LD_VAR 0 12
49014: PUSH
49015: LD_VAR 0 7
49019: ARRAY
49020: PUSH
49021: LD_INT 2
49023: ARRAY
49024: PPUSH
49025: CALL_OW 488
49029: NOT
49030: PUSH
49031: LD_VAR 0 12
49035: PUSH
49036: LD_VAR 0 7
49040: ARRAY
49041: PUSH
49042: LD_INT 1
49044: ARRAY
49045: PPUSH
49046: LD_VAR 0 12
49050: PUSH
49051: LD_VAR 0 7
49055: ARRAY
49056: PUSH
49057: LD_INT 2
49059: ARRAY
49060: PPUSH
49061: CALL_OW 428
49065: PUSH
49066: LD_INT 0
49068: GREATER
49069: OR
49070: PUSH
49071: LD_VAR 0 12
49075: PUSH
49076: LD_VAR 0 7
49080: ARRAY
49081: PUSH
49082: LD_INT 1
49084: ARRAY
49085: PPUSH
49086: LD_VAR 0 12
49090: PUSH
49091: LD_VAR 0 7
49095: ARRAY
49096: PUSH
49097: LD_INT 2
49099: ARRAY
49100: PPUSH
49101: CALL_OW 351
49105: OR
49106: IFFALSE 49112
// exit ;
49108: POP
49109: POP
49110: GO 49404
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49112: LD_ADDR_VAR 0 8
49116: PUSH
49117: LD_VAR 0 12
49121: PUSH
49122: LD_VAR 0 7
49126: ARRAY
49127: PUSH
49128: LD_INT 1
49130: ARRAY
49131: PPUSH
49132: LD_VAR 0 12
49136: PUSH
49137: LD_VAR 0 7
49141: ARRAY
49142: PUSH
49143: LD_INT 2
49145: ARRAY
49146: PPUSH
49147: CALL_OW 546
49151: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
49152: LD_VAR 0 8
49156: PUSH
49157: LD_INT 1
49159: ARRAY
49160: PUSH
49161: LD_VAR 0 8
49165: PUSH
49166: LD_INT 2
49168: ARRAY
49169: PUSH
49170: LD_VAR 0 13
49174: PUSH
49175: LD_INT 2
49177: PLUS
49178: GREATER
49179: OR
49180: PUSH
49181: LD_VAR 0 8
49185: PUSH
49186: LD_INT 2
49188: ARRAY
49189: PUSH
49190: LD_VAR 0 13
49194: PUSH
49195: LD_INT 2
49197: MINUS
49198: LESS
49199: OR
49200: PUSH
49201: LD_VAR 0 8
49205: PUSH
49206: LD_INT 3
49208: ARRAY
49209: PUSH
49210: LD_INT 0
49212: PUSH
49213: LD_INT 8
49215: PUSH
49216: LD_INT 9
49218: PUSH
49219: LD_INT 10
49221: PUSH
49222: LD_INT 11
49224: PUSH
49225: LD_INT 12
49227: PUSH
49228: LD_INT 13
49230: PUSH
49231: LD_INT 16
49233: PUSH
49234: LD_INT 17
49236: PUSH
49237: LD_INT 18
49239: PUSH
49240: LD_INT 19
49242: PUSH
49243: LD_INT 20
49245: PUSH
49246: LD_INT 21
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: IN
49264: NOT
49265: OR
49266: PUSH
49267: LD_VAR 0 8
49271: PUSH
49272: LD_INT 5
49274: ARRAY
49275: NOT
49276: OR
49277: PUSH
49278: LD_VAR 0 8
49282: PUSH
49283: LD_INT 6
49285: ARRAY
49286: PUSH
49287: LD_INT 1
49289: PUSH
49290: LD_INT 2
49292: PUSH
49293: LD_INT 7
49295: PUSH
49296: LD_INT 9
49298: PUSH
49299: LD_INT 10
49301: PUSH
49302: LD_INT 11
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: IN
49313: NOT
49314: OR
49315: IFFALSE 49321
// exit ;
49317: POP
49318: POP
49319: GO 49404
// end ;
49321: GO 48992
49323: POP
49324: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
49325: LD_VAR 0 9
49329: PPUSH
49330: LD_VAR 0 3
49334: PPUSH
49335: LD_VAR 0 4
49339: PPUSH
49340: LD_INT 20
49342: PPUSH
49343: CALL 41356 0 4
49347: PUSH
49348: LD_INT 4
49350: ARRAY
49351: IFFALSE 49355
// exit ;
49353: GO 49404
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
49355: LD_VAR 0 2
49359: PUSH
49360: LD_INT 29
49362: PUSH
49363: LD_INT 30
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: IN
49370: PUSH
49371: LD_VAR 0 3
49375: PPUSH
49376: LD_VAR 0 4
49380: PPUSH
49381: LD_VAR 0 9
49385: PPUSH
49386: CALL_OW 440
49390: NOT
49391: AND
49392: IFFALSE 49396
// exit ;
49394: GO 49404
// result := true ;
49396: LD_ADDR_VAR 0 6
49400: PUSH
49401: LD_INT 1
49403: ST_TO_ADDR
// end ;
49404: LD_VAR 0 6
49408: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
49409: LD_INT 0
49411: PPUSH
49412: PPUSH
49413: PPUSH
49414: PPUSH
49415: PPUSH
49416: PPUSH
49417: PPUSH
49418: PPUSH
49419: PPUSH
49420: PPUSH
49421: PPUSH
49422: PPUSH
49423: PPUSH
49424: PPUSH
49425: PPUSH
49426: PPUSH
49427: PPUSH
49428: PPUSH
49429: PPUSH
49430: PPUSH
49431: PPUSH
49432: PPUSH
49433: PPUSH
49434: PPUSH
49435: PPUSH
49436: PPUSH
49437: PPUSH
49438: PPUSH
49439: PPUSH
49440: PPUSH
49441: PPUSH
49442: PPUSH
49443: PPUSH
49444: PPUSH
49445: PPUSH
49446: PPUSH
49447: PPUSH
49448: PPUSH
49449: PPUSH
49450: PPUSH
49451: PPUSH
49452: PPUSH
49453: PPUSH
49454: PPUSH
49455: PPUSH
49456: PPUSH
49457: PPUSH
49458: PPUSH
49459: PPUSH
49460: PPUSH
49461: PPUSH
49462: PPUSH
49463: PPUSH
49464: PPUSH
49465: PPUSH
49466: PPUSH
49467: PPUSH
49468: PPUSH
// result = [ ] ;
49469: LD_ADDR_VAR 0 7
49473: PUSH
49474: EMPTY
49475: ST_TO_ADDR
// temp_list = [ ] ;
49476: LD_ADDR_VAR 0 9
49480: PUSH
49481: EMPTY
49482: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
49483: LD_VAR 0 4
49487: PUSH
49488: LD_INT 0
49490: PUSH
49491: LD_INT 1
49493: PUSH
49494: LD_INT 2
49496: PUSH
49497: LD_INT 3
49499: PUSH
49500: LD_INT 4
49502: PUSH
49503: LD_INT 5
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: IN
49514: NOT
49515: PUSH
49516: LD_VAR 0 1
49520: PUSH
49521: LD_INT 0
49523: PUSH
49524: LD_INT 1
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: IN
49531: PUSH
49532: LD_VAR 0 5
49536: PUSH
49537: LD_INT 1
49539: PUSH
49540: LD_INT 2
49542: PUSH
49543: LD_INT 3
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: LIST
49550: IN
49551: NOT
49552: AND
49553: OR
49554: IFFALSE 49558
// exit ;
49556: GO 67949
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
49558: LD_VAR 0 1
49562: PUSH
49563: LD_INT 6
49565: PUSH
49566: LD_INT 7
49568: PUSH
49569: LD_INT 8
49571: PUSH
49572: LD_INT 13
49574: PUSH
49575: LD_INT 12
49577: PUSH
49578: LD_INT 15
49580: PUSH
49581: LD_INT 11
49583: PUSH
49584: LD_INT 14
49586: PUSH
49587: LD_INT 10
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: IN
49601: IFFALSE 49611
// btype = b_lab ;
49603: LD_ADDR_VAR 0 1
49607: PUSH
49608: LD_INT 6
49610: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
49611: LD_VAR 0 6
49615: PUSH
49616: LD_INT 0
49618: PUSH
49619: LD_INT 1
49621: PUSH
49622: LD_INT 2
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: LIST
49629: IN
49630: NOT
49631: PUSH
49632: LD_VAR 0 1
49636: PUSH
49637: LD_INT 0
49639: PUSH
49640: LD_INT 1
49642: PUSH
49643: LD_INT 2
49645: PUSH
49646: LD_INT 3
49648: PUSH
49649: LD_INT 6
49651: PUSH
49652: LD_INT 36
49654: PUSH
49655: LD_INT 4
49657: PUSH
49658: LD_INT 5
49660: PUSH
49661: LD_INT 31
49663: PUSH
49664: LD_INT 32
49666: PUSH
49667: LD_INT 33
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: IN
49683: NOT
49684: PUSH
49685: LD_VAR 0 6
49689: PUSH
49690: LD_INT 1
49692: EQUAL
49693: AND
49694: OR
49695: PUSH
49696: LD_VAR 0 1
49700: PUSH
49701: LD_INT 2
49703: PUSH
49704: LD_INT 3
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: IN
49711: NOT
49712: PUSH
49713: LD_VAR 0 6
49717: PUSH
49718: LD_INT 2
49720: EQUAL
49721: AND
49722: OR
49723: IFFALSE 49733
// mode = 0 ;
49725: LD_ADDR_VAR 0 6
49729: PUSH
49730: LD_INT 0
49732: ST_TO_ADDR
// case mode of 0 :
49733: LD_VAR 0 6
49737: PUSH
49738: LD_INT 0
49740: DOUBLE
49741: EQUAL
49742: IFTRUE 49746
49744: GO 61199
49746: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49747: LD_ADDR_VAR 0 11
49751: PUSH
49752: LD_INT 0
49754: PUSH
49755: LD_INT 0
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 0
49764: PUSH
49765: LD_INT 1
49767: NEG
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 1
49775: PUSH
49776: LD_INT 0
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 1
49785: PUSH
49786: LD_INT 1
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 0
49795: PUSH
49796: LD_INT 1
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 1
49805: NEG
49806: PUSH
49807: LD_INT 0
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 1
49816: NEG
49817: PUSH
49818: LD_INT 1
49820: NEG
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 1
49828: NEG
49829: PUSH
49830: LD_INT 2
49832: NEG
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 0
49840: PUSH
49841: LD_INT 2
49843: NEG
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 1
49851: PUSH
49852: LD_INT 1
49854: NEG
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 1
49862: PUSH
49863: LD_INT 2
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 0
49872: PUSH
49873: LD_INT 2
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 1
49882: NEG
49883: PUSH
49884: LD_INT 1
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 1
49893: PUSH
49894: LD_INT 3
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 0
49903: PUSH
49904: LD_INT 3
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 1
49913: NEG
49914: PUSH
49915: LD_INT 2
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49940: LD_ADDR_VAR 0 12
49944: PUSH
49945: LD_INT 0
49947: PUSH
49948: LD_INT 0
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 0
49957: PUSH
49958: LD_INT 1
49960: NEG
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 1
49968: PUSH
49969: LD_INT 0
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 1
49978: PUSH
49979: LD_INT 1
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 0
49988: PUSH
49989: LD_INT 1
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 1
49998: NEG
49999: PUSH
50000: LD_INT 0
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 1
50009: NEG
50010: PUSH
50011: LD_INT 1
50013: NEG
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 1
50021: PUSH
50022: LD_INT 1
50024: NEG
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 2
50032: PUSH
50033: LD_INT 0
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 2
50042: PUSH
50043: LD_INT 1
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 1
50052: NEG
50053: PUSH
50054: LD_INT 1
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 2
50063: NEG
50064: PUSH
50065: LD_INT 0
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 2
50074: NEG
50075: PUSH
50076: LD_INT 1
50078: NEG
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 2
50086: NEG
50087: PUSH
50088: LD_INT 1
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 3
50097: NEG
50098: PUSH
50099: LD_INT 0
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 3
50108: NEG
50109: PUSH
50110: LD_INT 1
50112: NEG
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50136: LD_ADDR_VAR 0 13
50140: PUSH
50141: LD_INT 0
50143: PUSH
50144: LD_INT 0
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 0
50153: PUSH
50154: LD_INT 1
50156: NEG
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 1
50164: PUSH
50165: LD_INT 0
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 1
50174: PUSH
50175: LD_INT 1
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 0
50184: PUSH
50185: LD_INT 1
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 1
50194: NEG
50195: PUSH
50196: LD_INT 0
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 1
50205: NEG
50206: PUSH
50207: LD_INT 1
50209: NEG
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 1
50217: NEG
50218: PUSH
50219: LD_INT 2
50221: NEG
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 2
50229: PUSH
50230: LD_INT 1
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 2
50239: PUSH
50240: LD_INT 2
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 1
50249: PUSH
50250: LD_INT 2
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 2
50259: NEG
50260: PUSH
50261: LD_INT 1
50263: NEG
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 2
50271: NEG
50272: PUSH
50273: LD_INT 2
50275: NEG
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 2
50283: NEG
50284: PUSH
50285: LD_INT 3
50287: NEG
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 3
50295: NEG
50296: PUSH
50297: LD_INT 2
50299: NEG
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 3
50307: NEG
50308: PUSH
50309: LD_INT 3
50311: NEG
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50335: LD_ADDR_VAR 0 14
50339: PUSH
50340: LD_INT 0
50342: PUSH
50343: LD_INT 0
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 0
50352: PUSH
50353: LD_INT 1
50355: NEG
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 1
50363: PUSH
50364: LD_INT 0
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 1
50373: PUSH
50374: LD_INT 1
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 0
50383: PUSH
50384: LD_INT 1
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 1
50393: NEG
50394: PUSH
50395: LD_INT 0
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 1
50404: NEG
50405: PUSH
50406: LD_INT 1
50408: NEG
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 1
50416: NEG
50417: PUSH
50418: LD_INT 2
50420: NEG
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 0
50428: PUSH
50429: LD_INT 2
50431: NEG
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 1
50439: PUSH
50440: LD_INT 1
50442: NEG
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: PUSH
50448: LD_INT 1
50450: PUSH
50451: LD_INT 2
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 0
50460: PUSH
50461: LD_INT 2
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 1
50470: NEG
50471: PUSH
50472: LD_INT 1
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 1
50481: NEG
50482: PUSH
50483: LD_INT 3
50485: NEG
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 0
50493: PUSH
50494: LD_INT 3
50496: NEG
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 1
50504: PUSH
50505: LD_INT 2
50507: NEG
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50531: LD_ADDR_VAR 0 15
50535: PUSH
50536: LD_INT 0
50538: PUSH
50539: LD_INT 0
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 0
50548: PUSH
50549: LD_INT 1
50551: NEG
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 1
50559: PUSH
50560: LD_INT 0
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 1
50569: PUSH
50570: LD_INT 1
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 0
50579: PUSH
50580: LD_INT 1
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 1
50589: NEG
50590: PUSH
50591: LD_INT 0
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 1
50600: NEG
50601: PUSH
50602: LD_INT 1
50604: NEG
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 1
50612: PUSH
50613: LD_INT 1
50615: NEG
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 2
50623: PUSH
50624: LD_INT 0
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 2
50633: PUSH
50634: LD_INT 1
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 1
50643: NEG
50644: PUSH
50645: LD_INT 1
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 2
50654: NEG
50655: PUSH
50656: LD_INT 0
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 2
50665: NEG
50666: PUSH
50667: LD_INT 1
50669: NEG
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 2
50677: PUSH
50678: LD_INT 1
50680: NEG
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 3
50688: PUSH
50689: LD_INT 0
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 3
50698: PUSH
50699: LD_INT 1
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50724: LD_ADDR_VAR 0 16
50728: PUSH
50729: LD_INT 0
50731: PUSH
50732: LD_INT 0
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 0
50741: PUSH
50742: LD_INT 1
50744: NEG
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 1
50752: PUSH
50753: LD_INT 0
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 1
50762: PUSH
50763: LD_INT 1
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 0
50772: PUSH
50773: LD_INT 1
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 1
50782: NEG
50783: PUSH
50784: LD_INT 0
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 1
50793: NEG
50794: PUSH
50795: LD_INT 1
50797: NEG
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 1
50805: NEG
50806: PUSH
50807: LD_INT 2
50809: NEG
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 2
50817: PUSH
50818: LD_INT 1
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 2
50827: PUSH
50828: LD_INT 2
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 1
50837: PUSH
50838: LD_INT 2
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 2
50847: NEG
50848: PUSH
50849: LD_INT 1
50851: NEG
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 2
50859: NEG
50860: PUSH
50861: LD_INT 2
50863: NEG
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 3
50871: PUSH
50872: LD_INT 2
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 3
50881: PUSH
50882: LD_INT 3
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 2
50891: PUSH
50892: LD_INT 3
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50917: LD_ADDR_VAR 0 17
50921: PUSH
50922: LD_INT 0
50924: PUSH
50925: LD_INT 0
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 0
50934: PUSH
50935: LD_INT 1
50937: NEG
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 1
50945: PUSH
50946: LD_INT 0
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 1
50955: PUSH
50956: LD_INT 1
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 0
50965: PUSH
50966: LD_INT 1
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 1
50975: NEG
50976: PUSH
50977: LD_INT 0
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 1
50986: NEG
50987: PUSH
50988: LD_INT 1
50990: NEG
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 1
50998: NEG
50999: PUSH
51000: LD_INT 2
51002: NEG
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 0
51010: PUSH
51011: LD_INT 2
51013: NEG
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 1
51021: PUSH
51022: LD_INT 1
51024: NEG
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 2
51032: PUSH
51033: LD_INT 0
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 2
51042: PUSH
51043: LD_INT 1
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 2
51052: PUSH
51053: LD_INT 2
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 1
51062: PUSH
51063: LD_INT 2
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 0
51072: PUSH
51073: LD_INT 2
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 1
51082: NEG
51083: PUSH
51084: LD_INT 1
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 2
51093: NEG
51094: PUSH
51095: LD_INT 0
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 2
51104: NEG
51105: PUSH
51106: LD_INT 1
51108: NEG
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 2
51116: NEG
51117: PUSH
51118: LD_INT 2
51120: NEG
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51147: LD_ADDR_VAR 0 18
51151: PUSH
51152: LD_INT 0
51154: PUSH
51155: LD_INT 0
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 0
51164: PUSH
51165: LD_INT 1
51167: NEG
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 1
51175: PUSH
51176: LD_INT 0
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 1
51185: PUSH
51186: LD_INT 1
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 0
51195: PUSH
51196: LD_INT 1
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 1
51205: NEG
51206: PUSH
51207: LD_INT 0
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 1
51216: NEG
51217: PUSH
51218: LD_INT 1
51220: NEG
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 1
51228: NEG
51229: PUSH
51230: LD_INT 2
51232: NEG
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 0
51240: PUSH
51241: LD_INT 2
51243: NEG
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 1
51251: PUSH
51252: LD_INT 1
51254: NEG
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 2
51262: PUSH
51263: LD_INT 0
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 2
51272: PUSH
51273: LD_INT 1
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 2
51282: PUSH
51283: LD_INT 2
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 1
51292: PUSH
51293: LD_INT 2
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 0
51302: PUSH
51303: LD_INT 2
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 1
51312: NEG
51313: PUSH
51314: LD_INT 1
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 2
51323: NEG
51324: PUSH
51325: LD_INT 0
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 2
51334: NEG
51335: PUSH
51336: LD_INT 1
51338: NEG
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 2
51346: NEG
51347: PUSH
51348: LD_INT 2
51350: NEG
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51377: LD_ADDR_VAR 0 19
51381: PUSH
51382: LD_INT 0
51384: PUSH
51385: LD_INT 0
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 0
51394: PUSH
51395: LD_INT 1
51397: NEG
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 1
51405: PUSH
51406: LD_INT 0
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 1
51415: PUSH
51416: LD_INT 1
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 0
51425: PUSH
51426: LD_INT 1
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 1
51435: NEG
51436: PUSH
51437: LD_INT 0
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 1
51446: NEG
51447: PUSH
51448: LD_INT 1
51450: NEG
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 1
51458: NEG
51459: PUSH
51460: LD_INT 2
51462: NEG
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 0
51470: PUSH
51471: LD_INT 2
51473: NEG
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 1
51481: PUSH
51482: LD_INT 1
51484: NEG
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 2
51492: PUSH
51493: LD_INT 0
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 2
51502: PUSH
51503: LD_INT 1
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 2
51512: PUSH
51513: LD_INT 2
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 1
51522: PUSH
51523: LD_INT 2
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 0
51532: PUSH
51533: LD_INT 2
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 1
51542: NEG
51543: PUSH
51544: LD_INT 1
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 2
51553: NEG
51554: PUSH
51555: LD_INT 0
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 2
51564: NEG
51565: PUSH
51566: LD_INT 1
51568: NEG
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 2
51576: NEG
51577: PUSH
51578: LD_INT 2
51580: NEG
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51607: LD_ADDR_VAR 0 20
51611: PUSH
51612: LD_INT 0
51614: PUSH
51615: LD_INT 0
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 0
51624: PUSH
51625: LD_INT 1
51627: NEG
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 1
51635: PUSH
51636: LD_INT 0
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 1
51645: PUSH
51646: LD_INT 1
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 0
51655: PUSH
51656: LD_INT 1
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 1
51665: NEG
51666: PUSH
51667: LD_INT 0
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 1
51676: NEG
51677: PUSH
51678: LD_INT 1
51680: NEG
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 1
51688: NEG
51689: PUSH
51690: LD_INT 2
51692: NEG
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 0
51700: PUSH
51701: LD_INT 2
51703: NEG
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 1
51711: PUSH
51712: LD_INT 1
51714: NEG
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 2
51722: PUSH
51723: LD_INT 0
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 2
51732: PUSH
51733: LD_INT 1
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 2
51742: PUSH
51743: LD_INT 2
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 1
51752: PUSH
51753: LD_INT 2
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 0
51762: PUSH
51763: LD_INT 2
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 1
51772: NEG
51773: PUSH
51774: LD_INT 1
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 2
51783: NEG
51784: PUSH
51785: LD_INT 0
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 2
51794: NEG
51795: PUSH
51796: LD_INT 1
51798: NEG
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 2
51806: NEG
51807: PUSH
51808: LD_INT 2
51810: NEG
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51837: LD_ADDR_VAR 0 21
51841: PUSH
51842: LD_INT 0
51844: PUSH
51845: LD_INT 0
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 0
51854: PUSH
51855: LD_INT 1
51857: NEG
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 1
51865: PUSH
51866: LD_INT 0
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 1
51875: PUSH
51876: LD_INT 1
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 0
51885: PUSH
51886: LD_INT 1
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 1
51895: NEG
51896: PUSH
51897: LD_INT 0
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 1
51906: NEG
51907: PUSH
51908: LD_INT 1
51910: NEG
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 1
51918: NEG
51919: PUSH
51920: LD_INT 2
51922: NEG
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 0
51930: PUSH
51931: LD_INT 2
51933: NEG
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 1
51941: PUSH
51942: LD_INT 1
51944: NEG
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 2
51952: PUSH
51953: LD_INT 0
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 2
51962: PUSH
51963: LD_INT 1
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 2
51972: PUSH
51973: LD_INT 2
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 1
51982: PUSH
51983: LD_INT 2
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 0
51992: PUSH
51993: LD_INT 2
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 1
52002: NEG
52003: PUSH
52004: LD_INT 1
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 2
52013: NEG
52014: PUSH
52015: LD_INT 0
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 2
52024: NEG
52025: PUSH
52026: LD_INT 1
52028: NEG
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 2
52036: NEG
52037: PUSH
52038: LD_INT 2
52040: NEG
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52067: LD_ADDR_VAR 0 22
52071: PUSH
52072: LD_INT 0
52074: PUSH
52075: LD_INT 0
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 0
52084: PUSH
52085: LD_INT 1
52087: NEG
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 1
52095: PUSH
52096: LD_INT 0
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 1
52105: PUSH
52106: LD_INT 1
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 0
52115: PUSH
52116: LD_INT 1
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 1
52125: NEG
52126: PUSH
52127: LD_INT 0
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 1
52136: NEG
52137: PUSH
52138: LD_INT 1
52140: NEG
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 1
52148: NEG
52149: PUSH
52150: LD_INT 2
52152: NEG
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 0
52160: PUSH
52161: LD_INT 2
52163: NEG
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 1
52171: PUSH
52172: LD_INT 1
52174: NEG
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 2
52182: PUSH
52183: LD_INT 0
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 2
52192: PUSH
52193: LD_INT 1
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 2
52202: PUSH
52203: LD_INT 2
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 1
52212: PUSH
52213: LD_INT 2
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 0
52222: PUSH
52223: LD_INT 2
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 1
52232: NEG
52233: PUSH
52234: LD_INT 1
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 2
52243: NEG
52244: PUSH
52245: LD_INT 0
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 2
52254: NEG
52255: PUSH
52256: LD_INT 1
52258: NEG
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 2
52266: NEG
52267: PUSH
52268: LD_INT 2
52270: NEG
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52297: LD_ADDR_VAR 0 23
52301: PUSH
52302: LD_INT 0
52304: PUSH
52305: LD_INT 0
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 0
52314: PUSH
52315: LD_INT 1
52317: NEG
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 1
52325: PUSH
52326: LD_INT 0
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 1
52335: PUSH
52336: LD_INT 1
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 0
52345: PUSH
52346: LD_INT 1
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 1
52355: NEG
52356: PUSH
52357: LD_INT 0
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 1
52366: NEG
52367: PUSH
52368: LD_INT 1
52370: NEG
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 1
52378: NEG
52379: PUSH
52380: LD_INT 2
52382: NEG
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 0
52390: PUSH
52391: LD_INT 2
52393: NEG
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 1
52401: PUSH
52402: LD_INT 1
52404: NEG
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 2
52412: PUSH
52413: LD_INT 0
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: PUSH
52420: LD_INT 2
52422: PUSH
52423: LD_INT 1
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 2
52432: PUSH
52433: LD_INT 2
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 1
52442: PUSH
52443: LD_INT 2
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 0
52452: PUSH
52453: LD_INT 2
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 1
52462: NEG
52463: PUSH
52464: LD_INT 1
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 2
52473: NEG
52474: PUSH
52475: LD_INT 0
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 2
52484: NEG
52485: PUSH
52486: LD_INT 1
52488: NEG
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 2
52496: NEG
52497: PUSH
52498: LD_INT 2
52500: NEG
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 2
52508: NEG
52509: PUSH
52510: LD_INT 3
52512: NEG
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 1
52520: NEG
52521: PUSH
52522: LD_INT 3
52524: NEG
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 1
52532: PUSH
52533: LD_INT 2
52535: NEG
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 2
52543: PUSH
52544: LD_INT 1
52546: NEG
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
52577: LD_ADDR_VAR 0 24
52581: PUSH
52582: LD_INT 0
52584: PUSH
52585: LD_INT 0
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 0
52594: PUSH
52595: LD_INT 1
52597: NEG
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 1
52605: PUSH
52606: LD_INT 0
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 1
52615: PUSH
52616: LD_INT 1
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 0
52625: PUSH
52626: LD_INT 1
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 1
52635: NEG
52636: PUSH
52637: LD_INT 0
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 1
52646: NEG
52647: PUSH
52648: LD_INT 1
52650: NEG
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 1
52658: NEG
52659: PUSH
52660: LD_INT 2
52662: NEG
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 0
52670: PUSH
52671: LD_INT 2
52673: NEG
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 1
52681: PUSH
52682: LD_INT 1
52684: NEG
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 2
52692: PUSH
52693: LD_INT 0
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 2
52702: PUSH
52703: LD_INT 1
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 2
52712: PUSH
52713: LD_INT 2
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 1
52722: PUSH
52723: LD_INT 2
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: LD_INT 0
52732: PUSH
52733: LD_INT 2
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 1
52742: NEG
52743: PUSH
52744: LD_INT 1
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 2
52753: NEG
52754: PUSH
52755: LD_INT 0
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 2
52764: NEG
52765: PUSH
52766: LD_INT 1
52768: NEG
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 2
52776: NEG
52777: PUSH
52778: LD_INT 2
52780: NEG
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 1
52788: PUSH
52789: LD_INT 2
52791: NEG
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 2
52799: PUSH
52800: LD_INT 1
52802: NEG
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 3
52810: PUSH
52811: LD_INT 1
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 3
52820: PUSH
52821: LD_INT 2
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
52853: LD_ADDR_VAR 0 25
52857: PUSH
52858: LD_INT 0
52860: PUSH
52861: LD_INT 0
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 0
52870: PUSH
52871: LD_INT 1
52873: NEG
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 1
52881: PUSH
52882: LD_INT 0
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 1
52891: PUSH
52892: LD_INT 1
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 0
52901: PUSH
52902: LD_INT 1
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 1
52911: NEG
52912: PUSH
52913: LD_INT 0
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 1
52922: NEG
52923: PUSH
52924: LD_INT 1
52926: NEG
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 1
52934: NEG
52935: PUSH
52936: LD_INT 2
52938: NEG
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 0
52946: PUSH
52947: LD_INT 2
52949: NEG
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 1
52957: PUSH
52958: LD_INT 1
52960: NEG
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 2
52968: PUSH
52969: LD_INT 0
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 2
52978: PUSH
52979: LD_INT 1
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 2
52988: PUSH
52989: LD_INT 2
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 1
52998: PUSH
52999: LD_INT 2
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 0
53008: PUSH
53009: LD_INT 2
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 1
53018: NEG
53019: PUSH
53020: LD_INT 1
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 2
53029: NEG
53030: PUSH
53031: LD_INT 0
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 2
53040: NEG
53041: PUSH
53042: LD_INT 1
53044: NEG
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 2
53052: NEG
53053: PUSH
53054: LD_INT 2
53056: NEG
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 3
53064: PUSH
53065: LD_INT 1
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 3
53074: PUSH
53075: LD_INT 2
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 2
53084: PUSH
53085: LD_INT 3
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 1
53094: PUSH
53095: LD_INT 3
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53127: LD_ADDR_VAR 0 26
53131: PUSH
53132: LD_INT 0
53134: PUSH
53135: LD_INT 0
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 0
53144: PUSH
53145: LD_INT 1
53147: NEG
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 1
53155: PUSH
53156: LD_INT 0
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 1
53165: PUSH
53166: LD_INT 1
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 0
53175: PUSH
53176: LD_INT 1
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 1
53185: NEG
53186: PUSH
53187: LD_INT 0
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 1
53196: NEG
53197: PUSH
53198: LD_INT 1
53200: NEG
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 1
53208: NEG
53209: PUSH
53210: LD_INT 2
53212: NEG
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 0
53220: PUSH
53221: LD_INT 2
53223: NEG
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 1
53231: PUSH
53232: LD_INT 1
53234: NEG
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 2
53242: PUSH
53243: LD_INT 0
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 2
53252: PUSH
53253: LD_INT 1
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 2
53262: PUSH
53263: LD_INT 2
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 1
53272: PUSH
53273: LD_INT 2
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 0
53282: PUSH
53283: LD_INT 2
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 1
53292: NEG
53293: PUSH
53294: LD_INT 1
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 2
53303: NEG
53304: PUSH
53305: LD_INT 0
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 2
53314: NEG
53315: PUSH
53316: LD_INT 1
53318: NEG
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 2
53326: NEG
53327: PUSH
53328: LD_INT 2
53330: NEG
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 2
53338: PUSH
53339: LD_INT 3
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 1
53348: PUSH
53349: LD_INT 3
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 1
53358: NEG
53359: PUSH
53360: LD_INT 2
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 2
53369: NEG
53370: PUSH
53371: LD_INT 1
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53403: LD_ADDR_VAR 0 27
53407: PUSH
53408: LD_INT 0
53410: PUSH
53411: LD_INT 0
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 0
53420: PUSH
53421: LD_INT 1
53423: NEG
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 1
53431: PUSH
53432: LD_INT 0
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 1
53441: PUSH
53442: LD_INT 1
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 0
53451: PUSH
53452: LD_INT 1
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 1
53461: NEG
53462: PUSH
53463: LD_INT 0
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 1
53472: NEG
53473: PUSH
53474: LD_INT 1
53476: NEG
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 1
53484: NEG
53485: PUSH
53486: LD_INT 2
53488: NEG
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 0
53496: PUSH
53497: LD_INT 2
53499: NEG
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 1
53507: PUSH
53508: LD_INT 1
53510: NEG
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 2
53518: PUSH
53519: LD_INT 0
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 2
53528: PUSH
53529: LD_INT 1
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 2
53538: PUSH
53539: LD_INT 2
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 1
53548: PUSH
53549: LD_INT 2
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 0
53558: PUSH
53559: LD_INT 2
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 1
53568: NEG
53569: PUSH
53570: LD_INT 1
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 2
53579: NEG
53580: PUSH
53581: LD_INT 0
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 2
53590: NEG
53591: PUSH
53592: LD_INT 1
53594: NEG
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 2
53602: NEG
53603: PUSH
53604: LD_INT 2
53606: NEG
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 1
53614: NEG
53615: PUSH
53616: LD_INT 2
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 2
53625: NEG
53626: PUSH
53627: LD_INT 1
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 3
53636: NEG
53637: PUSH
53638: LD_INT 1
53640: NEG
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 3
53648: NEG
53649: PUSH
53650: LD_INT 2
53652: NEG
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53683: LD_ADDR_VAR 0 28
53687: PUSH
53688: LD_INT 0
53690: PUSH
53691: LD_INT 0
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 0
53700: PUSH
53701: LD_INT 1
53703: NEG
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 1
53711: PUSH
53712: LD_INT 0
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 1
53721: PUSH
53722: LD_INT 1
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 0
53731: PUSH
53732: LD_INT 1
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 1
53741: NEG
53742: PUSH
53743: LD_INT 0
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 1
53752: NEG
53753: PUSH
53754: LD_INT 1
53756: NEG
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 1
53764: NEG
53765: PUSH
53766: LD_INT 2
53768: NEG
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: LD_INT 0
53776: PUSH
53777: LD_INT 2
53779: NEG
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 1
53787: PUSH
53788: LD_INT 1
53790: NEG
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 2
53798: PUSH
53799: LD_INT 0
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 2
53808: PUSH
53809: LD_INT 1
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 2
53818: PUSH
53819: LD_INT 2
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: LD_INT 1
53828: PUSH
53829: LD_INT 2
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 0
53838: PUSH
53839: LD_INT 2
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 1
53848: NEG
53849: PUSH
53850: LD_INT 1
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 2
53859: NEG
53860: PUSH
53861: LD_INT 0
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 2
53870: NEG
53871: PUSH
53872: LD_INT 1
53874: NEG
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 2
53882: NEG
53883: PUSH
53884: LD_INT 2
53886: NEG
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 2
53894: NEG
53895: PUSH
53896: LD_INT 3
53898: NEG
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 1
53906: NEG
53907: PUSH
53908: LD_INT 3
53910: NEG
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 3
53918: NEG
53919: PUSH
53920: LD_INT 1
53922: NEG
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 3
53930: NEG
53931: PUSH
53932: LD_INT 2
53934: NEG
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53965: LD_ADDR_VAR 0 29
53969: PUSH
53970: LD_INT 0
53972: PUSH
53973: LD_INT 0
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 0
53982: PUSH
53983: LD_INT 1
53985: NEG
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 1
53993: PUSH
53994: LD_INT 0
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 1
54003: PUSH
54004: LD_INT 1
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 0
54013: PUSH
54014: LD_INT 1
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 1
54023: NEG
54024: PUSH
54025: LD_INT 0
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 1
54034: NEG
54035: PUSH
54036: LD_INT 1
54038: NEG
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 1
54046: NEG
54047: PUSH
54048: LD_INT 2
54050: NEG
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 0
54058: PUSH
54059: LD_INT 2
54061: NEG
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 1
54069: PUSH
54070: LD_INT 1
54072: NEG
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 2
54080: PUSH
54081: LD_INT 0
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 2
54090: PUSH
54091: LD_INT 1
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 1
54100: PUSH
54101: LD_INT 2
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 0
54110: PUSH
54111: LD_INT 2
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 1
54120: NEG
54121: PUSH
54122: LD_INT 1
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 2
54131: NEG
54132: PUSH
54133: LD_INT 1
54135: NEG
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 2
54143: NEG
54144: PUSH
54145: LD_INT 2
54147: NEG
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 2
54155: NEG
54156: PUSH
54157: LD_INT 3
54159: NEG
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 2
54167: PUSH
54168: LD_INT 1
54170: NEG
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 3
54178: PUSH
54179: LD_INT 1
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 1
54188: PUSH
54189: LD_INT 3
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 1
54198: NEG
54199: PUSH
54200: LD_INT 2
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 3
54209: NEG
54210: PUSH
54211: LD_INT 2
54213: NEG
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54244: LD_ADDR_VAR 0 30
54248: PUSH
54249: LD_INT 0
54251: PUSH
54252: LD_INT 0
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 0
54261: PUSH
54262: LD_INT 1
54264: NEG
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 1
54272: PUSH
54273: LD_INT 0
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 1
54282: PUSH
54283: LD_INT 1
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 0
54292: PUSH
54293: LD_INT 1
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 1
54302: NEG
54303: PUSH
54304: LD_INT 0
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 1
54313: NEG
54314: PUSH
54315: LD_INT 1
54317: NEG
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 1
54325: NEG
54326: PUSH
54327: LD_INT 2
54329: NEG
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 0
54337: PUSH
54338: LD_INT 2
54340: NEG
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 1
54348: PUSH
54349: LD_INT 1
54351: NEG
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 2
54359: PUSH
54360: LD_INT 0
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 2
54369: PUSH
54370: LD_INT 1
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 2
54379: PUSH
54380: LD_INT 2
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 1
54389: PUSH
54390: LD_INT 2
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 1
54399: NEG
54400: PUSH
54401: LD_INT 1
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 2
54410: NEG
54411: PUSH
54412: LD_INT 0
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 2
54421: NEG
54422: PUSH
54423: LD_INT 1
54425: NEG
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 1
54433: NEG
54434: PUSH
54435: LD_INT 3
54437: NEG
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 1
54445: PUSH
54446: LD_INT 2
54448: NEG
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 3
54456: PUSH
54457: LD_INT 2
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 2
54466: PUSH
54467: LD_INT 3
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 2
54476: NEG
54477: PUSH
54478: LD_INT 1
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 3
54487: NEG
54488: PUSH
54489: LD_INT 1
54491: NEG
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54522: LD_ADDR_VAR 0 31
54526: PUSH
54527: LD_INT 0
54529: PUSH
54530: LD_INT 0
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 0
54539: PUSH
54540: LD_INT 1
54542: NEG
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 1
54550: PUSH
54551: LD_INT 0
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 1
54560: PUSH
54561: LD_INT 1
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 0
54570: PUSH
54571: LD_INT 1
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 1
54580: NEG
54581: PUSH
54582: LD_INT 0
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 1
54591: NEG
54592: PUSH
54593: LD_INT 1
54595: NEG
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 1
54603: NEG
54604: PUSH
54605: LD_INT 2
54607: NEG
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 1
54615: PUSH
54616: LD_INT 1
54618: NEG
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 2
54626: PUSH
54627: LD_INT 0
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 2
54636: PUSH
54637: LD_INT 1
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 2
54646: PUSH
54647: LD_INT 2
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 1
54656: PUSH
54657: LD_INT 2
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 0
54666: PUSH
54667: LD_INT 2
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 1
54676: NEG
54677: PUSH
54678: LD_INT 1
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 2
54687: NEG
54688: PUSH
54689: LD_INT 1
54691: NEG
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 2
54699: NEG
54700: PUSH
54701: LD_INT 2
54703: NEG
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 2
54711: NEG
54712: PUSH
54713: LD_INT 3
54715: NEG
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 2
54723: PUSH
54724: LD_INT 1
54726: NEG
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 3
54734: PUSH
54735: LD_INT 1
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 1
54744: PUSH
54745: LD_INT 3
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 1
54754: NEG
54755: PUSH
54756: LD_INT 2
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 3
54765: NEG
54766: PUSH
54767: LD_INT 2
54769: NEG
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54800: LD_ADDR_VAR 0 32
54804: PUSH
54805: LD_INT 0
54807: PUSH
54808: LD_INT 0
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 0
54817: PUSH
54818: LD_INT 1
54820: NEG
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 1
54828: PUSH
54829: LD_INT 0
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 1
54838: PUSH
54839: LD_INT 1
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 0
54848: PUSH
54849: LD_INT 1
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 1
54858: NEG
54859: PUSH
54860: LD_INT 0
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 1
54869: NEG
54870: PUSH
54871: LD_INT 1
54873: NEG
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 1
54881: NEG
54882: PUSH
54883: LD_INT 2
54885: NEG
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 0
54893: PUSH
54894: LD_INT 2
54896: NEG
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 1
54904: PUSH
54905: LD_INT 1
54907: NEG
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 2
54915: PUSH
54916: LD_INT 1
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 2
54925: PUSH
54926: LD_INT 2
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 1
54935: PUSH
54936: LD_INT 2
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 0
54945: PUSH
54946: LD_INT 2
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 1
54955: NEG
54956: PUSH
54957: LD_INT 1
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 2
54966: NEG
54967: PUSH
54968: LD_INT 0
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 2
54977: NEG
54978: PUSH
54979: LD_INT 1
54981: NEG
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 1
54989: NEG
54990: PUSH
54991: LD_INT 3
54993: NEG
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 1
55001: PUSH
55002: LD_INT 2
55004: NEG
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 3
55012: PUSH
55013: LD_INT 2
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 2
55022: PUSH
55023: LD_INT 3
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 2
55032: NEG
55033: PUSH
55034: LD_INT 1
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 3
55043: NEG
55044: PUSH
55045: LD_INT 1
55047: NEG
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55078: LD_ADDR_VAR 0 33
55082: PUSH
55083: LD_INT 0
55085: PUSH
55086: LD_INT 0
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 0
55095: PUSH
55096: LD_INT 1
55098: NEG
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 1
55106: PUSH
55107: LD_INT 0
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 1
55116: PUSH
55117: LD_INT 1
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 0
55126: PUSH
55127: LD_INT 1
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 1
55136: NEG
55137: PUSH
55138: LD_INT 0
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 1
55147: NEG
55148: PUSH
55149: LD_INT 1
55151: NEG
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 1
55159: NEG
55160: PUSH
55161: LD_INT 2
55163: NEG
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 1
55171: PUSH
55172: LD_INT 1
55174: NEG
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 2
55182: PUSH
55183: LD_INT 0
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 2
55192: PUSH
55193: LD_INT 1
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 1
55202: PUSH
55203: LD_INT 2
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 0
55212: PUSH
55213: LD_INT 2
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 1
55222: NEG
55223: PUSH
55224: LD_INT 1
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 2
55233: NEG
55234: PUSH
55235: LD_INT 0
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 2
55244: NEG
55245: PUSH
55246: LD_INT 1
55248: NEG
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 2
55256: NEG
55257: PUSH
55258: LD_INT 2
55260: NEG
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 2
55268: NEG
55269: PUSH
55270: LD_INT 3
55272: NEG
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 2
55280: PUSH
55281: LD_INT 1
55283: NEG
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 3
55291: PUSH
55292: LD_INT 1
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 1
55301: PUSH
55302: LD_INT 3
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 1
55311: NEG
55312: PUSH
55313: LD_INT 2
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 3
55322: NEG
55323: PUSH
55324: LD_INT 2
55326: NEG
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55357: LD_ADDR_VAR 0 34
55361: PUSH
55362: LD_INT 0
55364: PUSH
55365: LD_INT 0
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 0
55374: PUSH
55375: LD_INT 1
55377: NEG
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 1
55385: PUSH
55386: LD_INT 0
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 1
55395: PUSH
55396: LD_INT 1
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 0
55405: PUSH
55406: LD_INT 1
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 1
55415: NEG
55416: PUSH
55417: LD_INT 0
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 1
55426: NEG
55427: PUSH
55428: LD_INT 1
55430: NEG
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 1
55438: NEG
55439: PUSH
55440: LD_INT 2
55442: NEG
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 0
55450: PUSH
55451: LD_INT 2
55453: NEG
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 1
55461: PUSH
55462: LD_INT 1
55464: NEG
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 2
55472: PUSH
55473: LD_INT 1
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 2
55482: PUSH
55483: LD_INT 2
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 1
55492: PUSH
55493: LD_INT 2
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 1
55502: NEG
55503: PUSH
55504: LD_INT 1
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 2
55513: NEG
55514: PUSH
55515: LD_INT 0
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 2
55524: NEG
55525: PUSH
55526: LD_INT 1
55528: NEG
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 2
55536: NEG
55537: PUSH
55538: LD_INT 2
55540: NEG
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 1
55548: NEG
55549: PUSH
55550: LD_INT 3
55552: NEG
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 1
55560: PUSH
55561: LD_INT 2
55563: NEG
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 3
55571: PUSH
55572: LD_INT 2
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 2
55581: PUSH
55582: LD_INT 3
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 2
55591: NEG
55592: PUSH
55593: LD_INT 1
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 3
55602: NEG
55603: PUSH
55604: LD_INT 1
55606: NEG
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55637: LD_ADDR_VAR 0 35
55641: PUSH
55642: LD_INT 0
55644: PUSH
55645: LD_INT 0
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 0
55654: PUSH
55655: LD_INT 1
55657: NEG
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 1
55665: PUSH
55666: LD_INT 0
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 1
55675: PUSH
55676: LD_INT 1
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 0
55685: PUSH
55686: LD_INT 1
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 1
55695: NEG
55696: PUSH
55697: LD_INT 0
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 1
55706: NEG
55707: PUSH
55708: LD_INT 1
55710: NEG
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 2
55718: PUSH
55719: LD_INT 1
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 2
55728: NEG
55729: PUSH
55730: LD_INT 1
55732: NEG
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55749: LD_ADDR_VAR 0 36
55753: PUSH
55754: LD_INT 0
55756: PUSH
55757: LD_INT 0
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 0
55766: PUSH
55767: LD_INT 1
55769: NEG
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 1
55777: PUSH
55778: LD_INT 0
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 1
55787: PUSH
55788: LD_INT 1
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: LD_INT 0
55797: PUSH
55798: LD_INT 1
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 1
55807: NEG
55808: PUSH
55809: LD_INT 0
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 1
55818: NEG
55819: PUSH
55820: LD_INT 1
55822: NEG
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 1
55830: NEG
55831: PUSH
55832: LD_INT 2
55834: NEG
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 1
55842: PUSH
55843: LD_INT 2
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55861: LD_ADDR_VAR 0 37
55865: PUSH
55866: LD_INT 0
55868: PUSH
55869: LD_INT 0
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 0
55878: PUSH
55879: LD_INT 1
55881: NEG
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 1
55889: PUSH
55890: LD_INT 0
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 1
55899: PUSH
55900: LD_INT 1
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 0
55909: PUSH
55910: LD_INT 1
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 1
55919: NEG
55920: PUSH
55921: LD_INT 0
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 1
55930: NEG
55931: PUSH
55932: LD_INT 1
55934: NEG
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 1
55942: PUSH
55943: LD_INT 1
55945: NEG
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 1
55953: NEG
55954: PUSH
55955: LD_INT 1
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55973: LD_ADDR_VAR 0 38
55977: PUSH
55978: LD_INT 0
55980: PUSH
55981: LD_INT 0
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 0
55990: PUSH
55991: LD_INT 1
55993: NEG
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 1
56001: PUSH
56002: LD_INT 0
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 1
56011: PUSH
56012: LD_INT 1
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 0
56021: PUSH
56022: LD_INT 1
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 1
56031: NEG
56032: PUSH
56033: LD_INT 0
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 1
56042: NEG
56043: PUSH
56044: LD_INT 1
56046: NEG
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 2
56054: PUSH
56055: LD_INT 1
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 2
56064: NEG
56065: PUSH
56066: LD_INT 1
56068: NEG
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56085: LD_ADDR_VAR 0 39
56089: PUSH
56090: LD_INT 0
56092: PUSH
56093: LD_INT 0
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 0
56102: PUSH
56103: LD_INT 1
56105: NEG
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 1
56113: PUSH
56114: LD_INT 0
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 1
56123: PUSH
56124: LD_INT 1
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 0
56133: PUSH
56134: LD_INT 1
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 1
56143: NEG
56144: PUSH
56145: LD_INT 0
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 1
56154: NEG
56155: PUSH
56156: LD_INT 1
56158: NEG
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 1
56166: NEG
56167: PUSH
56168: LD_INT 2
56170: NEG
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 1
56178: PUSH
56179: LD_INT 2
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56197: LD_ADDR_VAR 0 40
56201: PUSH
56202: LD_INT 0
56204: PUSH
56205: LD_INT 0
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 0
56214: PUSH
56215: LD_INT 1
56217: NEG
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 1
56225: PUSH
56226: LD_INT 0
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 1
56235: PUSH
56236: LD_INT 1
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 0
56245: PUSH
56246: LD_INT 1
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 1
56255: NEG
56256: PUSH
56257: LD_INT 0
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 1
56266: NEG
56267: PUSH
56268: LD_INT 1
56270: NEG
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 1
56278: PUSH
56279: LD_INT 1
56281: NEG
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 1
56289: NEG
56290: PUSH
56291: LD_INT 1
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56309: LD_ADDR_VAR 0 41
56313: PUSH
56314: LD_INT 0
56316: PUSH
56317: LD_INT 0
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 0
56326: PUSH
56327: LD_INT 1
56329: NEG
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 1
56337: PUSH
56338: LD_INT 0
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 1
56347: PUSH
56348: LD_INT 1
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 0
56357: PUSH
56358: LD_INT 1
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 1
56367: NEG
56368: PUSH
56369: LD_INT 0
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 1
56378: NEG
56379: PUSH
56380: LD_INT 1
56382: NEG
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 1
56390: NEG
56391: PUSH
56392: LD_INT 2
56394: NEG
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 1
56402: PUSH
56403: LD_INT 1
56405: NEG
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 2
56413: PUSH
56414: LD_INT 0
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 2
56423: PUSH
56424: LD_INT 1
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 2
56433: PUSH
56434: LD_INT 2
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 1
56443: PUSH
56444: LD_INT 2
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 1
56453: NEG
56454: PUSH
56455: LD_INT 1
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 2
56464: NEG
56465: PUSH
56466: LD_INT 0
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 2
56475: NEG
56476: PUSH
56477: LD_INT 1
56479: NEG
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 2
56487: NEG
56488: PUSH
56489: LD_INT 2
56491: NEG
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 2
56499: NEG
56500: PUSH
56501: LD_INT 3
56503: NEG
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 2
56511: PUSH
56512: LD_INT 1
56514: NEG
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 3
56522: PUSH
56523: LD_INT 0
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 3
56532: PUSH
56533: LD_INT 1
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 3
56542: PUSH
56543: LD_INT 2
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 3
56552: PUSH
56553: LD_INT 3
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 2
56562: PUSH
56563: LD_INT 3
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 2
56572: NEG
56573: PUSH
56574: LD_INT 1
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 3
56583: NEG
56584: PUSH
56585: LD_INT 0
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: LD_INT 3
56594: NEG
56595: PUSH
56596: LD_INT 1
56598: NEG
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 3
56606: NEG
56607: PUSH
56608: LD_INT 2
56610: NEG
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: LD_INT 3
56618: NEG
56619: PUSH
56620: LD_INT 3
56622: NEG
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56659: LD_ADDR_VAR 0 42
56663: PUSH
56664: LD_INT 0
56666: PUSH
56667: LD_INT 0
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 0
56676: PUSH
56677: LD_INT 1
56679: NEG
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 1
56687: PUSH
56688: LD_INT 0
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 1
56697: PUSH
56698: LD_INT 1
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 0
56707: PUSH
56708: LD_INT 1
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 1
56717: NEG
56718: PUSH
56719: LD_INT 0
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 1
56728: NEG
56729: PUSH
56730: LD_INT 1
56732: NEG
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 1
56740: NEG
56741: PUSH
56742: LD_INT 2
56744: NEG
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 0
56752: PUSH
56753: LD_INT 2
56755: NEG
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 1
56763: PUSH
56764: LD_INT 1
56766: NEG
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 2
56774: PUSH
56775: LD_INT 1
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 2
56784: PUSH
56785: LD_INT 2
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 1
56794: PUSH
56795: LD_INT 2
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 0
56804: PUSH
56805: LD_INT 2
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 1
56814: NEG
56815: PUSH
56816: LD_INT 1
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PUSH
56823: LD_INT 2
56825: NEG
56826: PUSH
56827: LD_INT 1
56829: NEG
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 2
56837: NEG
56838: PUSH
56839: LD_INT 2
56841: NEG
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 2
56849: NEG
56850: PUSH
56851: LD_INT 3
56853: NEG
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 1
56861: NEG
56862: PUSH
56863: LD_INT 3
56865: NEG
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 0
56873: PUSH
56874: LD_INT 3
56876: NEG
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 1
56884: PUSH
56885: LD_INT 2
56887: NEG
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 3
56895: PUSH
56896: LD_INT 2
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 3
56905: PUSH
56906: LD_INT 3
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 2
56915: PUSH
56916: LD_INT 3
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 1
56925: PUSH
56926: LD_INT 3
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 0
56935: PUSH
56936: LD_INT 3
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 1
56945: NEG
56946: PUSH
56947: LD_INT 2
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 3
56956: NEG
56957: PUSH
56958: LD_INT 2
56960: NEG
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 3
56968: NEG
56969: PUSH
56970: LD_INT 3
56972: NEG
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57009: LD_ADDR_VAR 0 43
57013: PUSH
57014: LD_INT 0
57016: PUSH
57017: LD_INT 0
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 0
57026: PUSH
57027: LD_INT 1
57029: NEG
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 1
57037: PUSH
57038: LD_INT 0
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 1
57047: PUSH
57048: LD_INT 1
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 0
57057: PUSH
57058: LD_INT 1
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 1
57067: NEG
57068: PUSH
57069: LD_INT 0
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 1
57078: NEG
57079: PUSH
57080: LD_INT 1
57082: NEG
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 1
57090: NEG
57091: PUSH
57092: LD_INT 2
57094: NEG
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 0
57102: PUSH
57103: LD_INT 2
57105: NEG
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 1
57113: PUSH
57114: LD_INT 1
57116: NEG
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 2
57124: PUSH
57125: LD_INT 0
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 2
57134: PUSH
57135: LD_INT 1
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 1
57144: PUSH
57145: LD_INT 2
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 0
57154: PUSH
57155: LD_INT 2
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 1
57164: NEG
57165: PUSH
57166: LD_INT 1
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: LD_INT 2
57175: NEG
57176: PUSH
57177: LD_INT 0
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 2
57186: NEG
57187: PUSH
57188: LD_INT 1
57190: NEG
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 1
57198: NEG
57199: PUSH
57200: LD_INT 3
57202: NEG
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 0
57210: PUSH
57211: LD_INT 3
57213: NEG
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 1
57221: PUSH
57222: LD_INT 2
57224: NEG
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: LD_INT 2
57232: PUSH
57233: LD_INT 1
57235: NEG
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 3
57243: PUSH
57244: LD_INT 0
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 3
57253: PUSH
57254: LD_INT 1
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 1
57263: PUSH
57264: LD_INT 3
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 0
57273: PUSH
57274: LD_INT 3
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 1
57283: NEG
57284: PUSH
57285: LD_INT 2
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 2
57294: NEG
57295: PUSH
57296: LD_INT 1
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 3
57305: NEG
57306: PUSH
57307: LD_INT 0
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 3
57316: NEG
57317: PUSH
57318: LD_INT 1
57320: NEG
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57357: LD_ADDR_VAR 0 44
57361: PUSH
57362: LD_INT 0
57364: PUSH
57365: LD_INT 0
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 0
57374: PUSH
57375: LD_INT 1
57377: NEG
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 1
57385: PUSH
57386: LD_INT 0
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 1
57395: PUSH
57396: LD_INT 1
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 0
57405: PUSH
57406: LD_INT 1
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 1
57415: NEG
57416: PUSH
57417: LD_INT 0
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 1
57426: NEG
57427: PUSH
57428: LD_INT 1
57430: NEG
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 1
57438: NEG
57439: PUSH
57440: LD_INT 2
57442: NEG
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 1
57450: PUSH
57451: LD_INT 1
57453: NEG
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 2
57461: PUSH
57462: LD_INT 0
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 2
57471: PUSH
57472: LD_INT 1
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 2
57481: PUSH
57482: LD_INT 2
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 1
57491: PUSH
57492: LD_INT 2
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 1
57501: NEG
57502: PUSH
57503: LD_INT 1
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 2
57512: NEG
57513: PUSH
57514: LD_INT 0
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 2
57523: NEG
57524: PUSH
57525: LD_INT 1
57527: NEG
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: LD_INT 2
57535: NEG
57536: PUSH
57537: LD_INT 2
57539: NEG
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 2
57547: NEG
57548: PUSH
57549: LD_INT 3
57551: NEG
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 2
57559: PUSH
57560: LD_INT 1
57562: NEG
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 3
57570: PUSH
57571: LD_INT 0
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 3
57580: PUSH
57581: LD_INT 1
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 3
57590: PUSH
57591: LD_INT 2
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 3
57600: PUSH
57601: LD_INT 3
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 2
57610: PUSH
57611: LD_INT 3
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 2
57620: NEG
57621: PUSH
57622: LD_INT 1
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 3
57631: NEG
57632: PUSH
57633: LD_INT 0
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 3
57642: NEG
57643: PUSH
57644: LD_INT 1
57646: NEG
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 3
57654: NEG
57655: PUSH
57656: LD_INT 2
57658: NEG
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 3
57666: NEG
57667: PUSH
57668: LD_INT 3
57670: NEG
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: LIST
57698: LIST
57699: LIST
57700: LIST
57701: LIST
57702: LIST
57703: LIST
57704: LIST
57705: LIST
57706: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57707: LD_ADDR_VAR 0 45
57711: PUSH
57712: LD_INT 0
57714: PUSH
57715: LD_INT 0
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 0
57724: PUSH
57725: LD_INT 1
57727: NEG
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 1
57735: PUSH
57736: LD_INT 0
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 1
57745: PUSH
57746: LD_INT 1
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 0
57755: PUSH
57756: LD_INT 1
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 1
57765: NEG
57766: PUSH
57767: LD_INT 0
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 1
57776: NEG
57777: PUSH
57778: LD_INT 1
57780: NEG
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: LD_INT 1
57788: NEG
57789: PUSH
57790: LD_INT 2
57792: NEG
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 0
57800: PUSH
57801: LD_INT 2
57803: NEG
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 1
57811: PUSH
57812: LD_INT 1
57814: NEG
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 2
57822: PUSH
57823: LD_INT 1
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 2
57832: PUSH
57833: LD_INT 2
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 1
57842: PUSH
57843: LD_INT 2
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 0
57852: PUSH
57853: LD_INT 2
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 1
57862: NEG
57863: PUSH
57864: LD_INT 1
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 2
57873: NEG
57874: PUSH
57875: LD_INT 1
57877: NEG
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: LD_INT 2
57885: NEG
57886: PUSH
57887: LD_INT 2
57889: NEG
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 2
57897: NEG
57898: PUSH
57899: LD_INT 3
57901: NEG
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 1
57909: NEG
57910: PUSH
57911: LD_INT 3
57913: NEG
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 0
57921: PUSH
57922: LD_INT 3
57924: NEG
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 1
57932: PUSH
57933: LD_INT 2
57935: NEG
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 3
57943: PUSH
57944: LD_INT 2
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 3
57953: PUSH
57954: LD_INT 3
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 2
57963: PUSH
57964: LD_INT 3
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 1
57973: PUSH
57974: LD_INT 3
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 0
57983: PUSH
57984: LD_INT 3
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PUSH
57991: LD_INT 1
57993: NEG
57994: PUSH
57995: LD_INT 2
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 3
58004: NEG
58005: PUSH
58006: LD_INT 2
58008: NEG
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 3
58016: NEG
58017: PUSH
58018: LD_INT 3
58020: NEG
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: LIST
58047: LIST
58048: LIST
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: LIST
58056: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58057: LD_ADDR_VAR 0 46
58061: PUSH
58062: LD_INT 0
58064: PUSH
58065: LD_INT 0
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 0
58074: PUSH
58075: LD_INT 1
58077: NEG
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 1
58085: PUSH
58086: LD_INT 0
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 1
58095: PUSH
58096: LD_INT 1
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 0
58105: PUSH
58106: LD_INT 1
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 1
58115: NEG
58116: PUSH
58117: LD_INT 0
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 1
58126: NEG
58127: PUSH
58128: LD_INT 1
58130: NEG
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 1
58138: NEG
58139: PUSH
58140: LD_INT 2
58142: NEG
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 0
58150: PUSH
58151: LD_INT 2
58153: NEG
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 1
58161: PUSH
58162: LD_INT 1
58164: NEG
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 2
58172: PUSH
58173: LD_INT 0
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 2
58182: PUSH
58183: LD_INT 1
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 1
58192: PUSH
58193: LD_INT 2
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 0
58202: PUSH
58203: LD_INT 2
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 1
58212: NEG
58213: PUSH
58214: LD_INT 1
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 2
58223: NEG
58224: PUSH
58225: LD_INT 0
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 2
58234: NEG
58235: PUSH
58236: LD_INT 1
58238: NEG
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 1
58246: NEG
58247: PUSH
58248: LD_INT 3
58250: NEG
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 0
58258: PUSH
58259: LD_INT 3
58261: NEG
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 1
58269: PUSH
58270: LD_INT 2
58272: NEG
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_INT 2
58280: PUSH
58281: LD_INT 1
58283: NEG
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 3
58291: PUSH
58292: LD_INT 0
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 3
58301: PUSH
58302: LD_INT 1
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 1
58311: PUSH
58312: LD_INT 3
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 0
58321: PUSH
58322: LD_INT 3
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 1
58331: NEG
58332: PUSH
58333: LD_INT 2
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 2
58342: NEG
58343: PUSH
58344: LD_INT 1
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 3
58353: NEG
58354: PUSH
58355: LD_INT 0
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 3
58364: NEG
58365: PUSH
58366: LD_INT 1
58368: NEG
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: LIST
58378: LIST
58379: LIST
58380: LIST
58381: LIST
58382: LIST
58383: LIST
58384: LIST
58385: LIST
58386: LIST
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: LIST
58404: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58405: LD_ADDR_VAR 0 47
58409: PUSH
58410: LD_INT 0
58412: PUSH
58413: LD_INT 0
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 0
58422: PUSH
58423: LD_INT 1
58425: NEG
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: LD_INT 1
58433: PUSH
58434: LD_INT 0
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 1
58443: PUSH
58444: LD_INT 1
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 0
58453: PUSH
58454: LD_INT 1
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 1
58463: NEG
58464: PUSH
58465: LD_INT 0
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 1
58474: NEG
58475: PUSH
58476: LD_INT 1
58478: NEG
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 1
58486: NEG
58487: PUSH
58488: LD_INT 2
58490: NEG
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 0
58498: PUSH
58499: LD_INT 2
58501: NEG
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 1
58509: PUSH
58510: LD_INT 1
58512: NEG
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PUSH
58518: LD_INT 2
58520: NEG
58521: PUSH
58522: LD_INT 1
58524: NEG
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 2
58532: NEG
58533: PUSH
58534: LD_INT 2
58536: NEG
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58556: LD_ADDR_VAR 0 48
58560: PUSH
58561: LD_INT 0
58563: PUSH
58564: LD_INT 0
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 0
58573: PUSH
58574: LD_INT 1
58576: NEG
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 1
58584: PUSH
58585: LD_INT 0
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 1
58594: PUSH
58595: LD_INT 1
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 0
58604: PUSH
58605: LD_INT 1
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 1
58614: NEG
58615: PUSH
58616: LD_INT 0
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 1
58625: NEG
58626: PUSH
58627: LD_INT 1
58629: NEG
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 1
58637: NEG
58638: PUSH
58639: LD_INT 2
58641: NEG
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: LD_INT 0
58649: PUSH
58650: LD_INT 2
58652: NEG
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 1
58660: PUSH
58661: LD_INT 1
58663: NEG
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 2
58671: PUSH
58672: LD_INT 0
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 2
58681: PUSH
58682: LD_INT 1
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58703: LD_ADDR_VAR 0 49
58707: PUSH
58708: LD_INT 0
58710: PUSH
58711: LD_INT 0
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 0
58720: PUSH
58721: LD_INT 1
58723: NEG
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 1
58731: PUSH
58732: LD_INT 0
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 1
58741: PUSH
58742: LD_INT 1
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 0
58751: PUSH
58752: LD_INT 1
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 1
58761: NEG
58762: PUSH
58763: LD_INT 0
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 1
58772: NEG
58773: PUSH
58774: LD_INT 1
58776: NEG
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 1
58784: PUSH
58785: LD_INT 1
58787: NEG
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 2
58795: PUSH
58796: LD_INT 0
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 2
58805: PUSH
58806: LD_INT 1
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 2
58815: PUSH
58816: LD_INT 2
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 1
58825: PUSH
58826: LD_INT 2
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58847: LD_ADDR_VAR 0 50
58851: PUSH
58852: LD_INT 0
58854: PUSH
58855: LD_INT 0
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 0
58864: PUSH
58865: LD_INT 1
58867: NEG
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 1
58875: PUSH
58876: LD_INT 0
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: LD_INT 1
58885: PUSH
58886: LD_INT 1
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PUSH
58893: LD_INT 0
58895: PUSH
58896: LD_INT 1
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 1
58905: NEG
58906: PUSH
58907: LD_INT 0
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 1
58916: NEG
58917: PUSH
58918: LD_INT 1
58920: NEG
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 2
58928: PUSH
58929: LD_INT 1
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 2
58938: PUSH
58939: LD_INT 2
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 1
58948: PUSH
58949: LD_INT 2
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 0
58958: PUSH
58959: LD_INT 2
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: LD_INT 1
58968: NEG
58969: PUSH
58970: LD_INT 1
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58991: LD_ADDR_VAR 0 51
58995: PUSH
58996: LD_INT 0
58998: PUSH
58999: LD_INT 0
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 0
59008: PUSH
59009: LD_INT 1
59011: NEG
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: LD_INT 1
59019: PUSH
59020: LD_INT 0
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 1
59029: PUSH
59030: LD_INT 1
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 0
59039: PUSH
59040: LD_INT 1
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 1
59049: NEG
59050: PUSH
59051: LD_INT 0
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 1
59060: NEG
59061: PUSH
59062: LD_INT 1
59064: NEG
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 1
59072: PUSH
59073: LD_INT 2
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 0
59082: PUSH
59083: LD_INT 2
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 1
59092: NEG
59093: PUSH
59094: LD_INT 1
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 2
59103: NEG
59104: PUSH
59105: LD_INT 0
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 2
59114: NEG
59115: PUSH
59116: LD_INT 1
59118: NEG
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59138: LD_ADDR_VAR 0 52
59142: PUSH
59143: LD_INT 0
59145: PUSH
59146: LD_INT 0
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PUSH
59153: LD_INT 0
59155: PUSH
59156: LD_INT 1
59158: NEG
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 1
59166: PUSH
59167: LD_INT 0
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: LD_INT 1
59176: PUSH
59177: LD_INT 1
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 0
59186: PUSH
59187: LD_INT 1
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: LD_INT 1
59196: NEG
59197: PUSH
59198: LD_INT 0
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 1
59207: NEG
59208: PUSH
59209: LD_INT 1
59211: NEG
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 1
59219: NEG
59220: PUSH
59221: LD_INT 2
59223: NEG
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 1
59231: NEG
59232: PUSH
59233: LD_INT 1
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 2
59242: NEG
59243: PUSH
59244: LD_INT 0
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 2
59253: NEG
59254: PUSH
59255: LD_INT 1
59257: NEG
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 2
59265: NEG
59266: PUSH
59267: LD_INT 2
59269: NEG
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59289: LD_ADDR_VAR 0 53
59293: PUSH
59294: LD_INT 0
59296: PUSH
59297: LD_INT 0
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 0
59306: PUSH
59307: LD_INT 1
59309: NEG
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 1
59317: PUSH
59318: LD_INT 0
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 1
59327: PUSH
59328: LD_INT 1
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 0
59337: PUSH
59338: LD_INT 1
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: LD_INT 1
59347: NEG
59348: PUSH
59349: LD_INT 0
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 1
59358: NEG
59359: PUSH
59360: LD_INT 1
59362: NEG
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: PUSH
59368: LD_INT 1
59370: NEG
59371: PUSH
59372: LD_INT 2
59374: NEG
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: PUSH
59380: LD_INT 0
59382: PUSH
59383: LD_INT 2
59385: NEG
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: LD_INT 1
59393: PUSH
59394: LD_INT 1
59396: NEG
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 2
59404: PUSH
59405: LD_INT 0
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 2
59414: PUSH
59415: LD_INT 1
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 2
59424: PUSH
59425: LD_INT 2
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 1
59434: PUSH
59435: LD_INT 2
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 0
59444: PUSH
59445: LD_INT 2
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: PUSH
59452: LD_INT 1
59454: NEG
59455: PUSH
59456: LD_INT 1
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_INT 2
59465: NEG
59466: PUSH
59467: LD_INT 0
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 2
59476: NEG
59477: PUSH
59478: LD_INT 1
59480: NEG
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 2
59488: NEG
59489: PUSH
59490: LD_INT 2
59492: NEG
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: LIST
59509: LIST
59510: LIST
59511: LIST
59512: LIST
59513: LIST
59514: LIST
59515: LIST
59516: LIST
59517: LIST
59518: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59519: LD_ADDR_VAR 0 54
59523: PUSH
59524: LD_INT 0
59526: PUSH
59527: LD_INT 0
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: LD_INT 0
59536: PUSH
59537: LD_INT 1
59539: NEG
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 1
59547: PUSH
59548: LD_INT 0
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 1
59557: PUSH
59558: LD_INT 1
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 0
59567: PUSH
59568: LD_INT 1
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 1
59577: NEG
59578: PUSH
59579: LD_INT 0
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 1
59588: NEG
59589: PUSH
59590: LD_INT 1
59592: NEG
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 1
59600: NEG
59601: PUSH
59602: LD_INT 2
59604: NEG
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: PUSH
59610: LD_INT 0
59612: PUSH
59613: LD_INT 2
59615: NEG
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 1
59623: PUSH
59624: LD_INT 1
59626: NEG
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 2
59634: PUSH
59635: LD_INT 0
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 2
59644: PUSH
59645: LD_INT 1
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 2
59654: PUSH
59655: LD_INT 2
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 1
59664: PUSH
59665: LD_INT 2
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 0
59674: PUSH
59675: LD_INT 2
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 1
59684: NEG
59685: PUSH
59686: LD_INT 1
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: LD_INT 2
59695: NEG
59696: PUSH
59697: LD_INT 0
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 2
59706: NEG
59707: PUSH
59708: LD_INT 1
59710: NEG
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 2
59718: NEG
59719: PUSH
59720: LD_INT 2
59722: NEG
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59749: LD_ADDR_VAR 0 55
59753: PUSH
59754: LD_INT 0
59756: PUSH
59757: LD_INT 0
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 0
59766: PUSH
59767: LD_INT 1
59769: NEG
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 1
59777: PUSH
59778: LD_INT 0
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 1
59787: PUSH
59788: LD_INT 1
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 0
59797: PUSH
59798: LD_INT 1
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 1
59807: NEG
59808: PUSH
59809: LD_INT 0
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 1
59818: NEG
59819: PUSH
59820: LD_INT 1
59822: NEG
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 1
59830: NEG
59831: PUSH
59832: LD_INT 2
59834: NEG
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 0
59842: PUSH
59843: LD_INT 2
59845: NEG
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: LD_INT 1
59853: PUSH
59854: LD_INT 1
59856: NEG
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: LD_INT 2
59864: PUSH
59865: LD_INT 0
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_INT 2
59874: PUSH
59875: LD_INT 1
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 2
59884: PUSH
59885: LD_INT 2
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 1
59894: PUSH
59895: LD_INT 2
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 0
59904: PUSH
59905: LD_INT 2
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 1
59914: NEG
59915: PUSH
59916: LD_INT 1
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 2
59925: NEG
59926: PUSH
59927: LD_INT 0
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 2
59936: NEG
59937: PUSH
59938: LD_INT 1
59940: NEG
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 2
59948: NEG
59949: PUSH
59950: LD_INT 2
59952: NEG
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59979: LD_ADDR_VAR 0 56
59983: PUSH
59984: LD_INT 0
59986: PUSH
59987: LD_INT 0
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 0
59996: PUSH
59997: LD_INT 1
59999: NEG
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: LD_INT 1
60007: PUSH
60008: LD_INT 0
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 1
60017: PUSH
60018: LD_INT 1
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 0
60027: PUSH
60028: LD_INT 1
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 1
60037: NEG
60038: PUSH
60039: LD_INT 0
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 1
60048: NEG
60049: PUSH
60050: LD_INT 1
60052: NEG
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 1
60060: NEG
60061: PUSH
60062: LD_INT 2
60064: NEG
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 0
60072: PUSH
60073: LD_INT 2
60075: NEG
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 1
60083: PUSH
60084: LD_INT 1
60086: NEG
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 2
60094: PUSH
60095: LD_INT 0
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 2
60104: PUSH
60105: LD_INT 1
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_INT 2
60114: PUSH
60115: LD_INT 2
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 1
60124: PUSH
60125: LD_INT 2
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 0
60134: PUSH
60135: LD_INT 2
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 1
60144: NEG
60145: PUSH
60146: LD_INT 1
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 2
60155: NEG
60156: PUSH
60157: LD_INT 0
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 2
60166: NEG
60167: PUSH
60168: LD_INT 1
60170: NEG
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 2
60178: NEG
60179: PUSH
60180: LD_INT 2
60182: NEG
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: LIST
60206: LIST
60207: LIST
60208: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60209: LD_ADDR_VAR 0 57
60213: PUSH
60214: LD_INT 0
60216: PUSH
60217: LD_INT 0
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PUSH
60224: LD_INT 0
60226: PUSH
60227: LD_INT 1
60229: NEG
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 1
60237: PUSH
60238: LD_INT 0
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: LD_INT 1
60247: PUSH
60248: LD_INT 1
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 0
60257: PUSH
60258: LD_INT 1
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 1
60267: NEG
60268: PUSH
60269: LD_INT 0
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 1
60278: NEG
60279: PUSH
60280: LD_INT 1
60282: NEG
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: LD_INT 1
60290: NEG
60291: PUSH
60292: LD_INT 2
60294: NEG
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: LD_INT 0
60302: PUSH
60303: LD_INT 2
60305: NEG
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 1
60313: PUSH
60314: LD_INT 1
60316: NEG
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 2
60324: PUSH
60325: LD_INT 0
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: PUSH
60332: LD_INT 2
60334: PUSH
60335: LD_INT 1
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: PUSH
60342: LD_INT 2
60344: PUSH
60345: LD_INT 2
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: LD_INT 1
60354: PUSH
60355: LD_INT 2
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 0
60364: PUSH
60365: LD_INT 2
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 1
60374: NEG
60375: PUSH
60376: LD_INT 1
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 2
60385: NEG
60386: PUSH
60387: LD_INT 0
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 2
60396: NEG
60397: PUSH
60398: LD_INT 1
60400: NEG
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 2
60408: NEG
60409: PUSH
60410: LD_INT 2
60412: NEG
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: LIST
60422: LIST
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60439: LD_ADDR_VAR 0 58
60443: PUSH
60444: LD_INT 0
60446: PUSH
60447: LD_INT 0
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: LD_INT 0
60456: PUSH
60457: LD_INT 1
60459: NEG
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 1
60467: PUSH
60468: LD_INT 0
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 1
60477: PUSH
60478: LD_INT 1
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: PUSH
60485: LD_INT 0
60487: PUSH
60488: LD_INT 1
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PUSH
60495: LD_INT 1
60497: NEG
60498: PUSH
60499: LD_INT 0
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 1
60508: NEG
60509: PUSH
60510: LD_INT 1
60512: NEG
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 1
60520: NEG
60521: PUSH
60522: LD_INT 2
60524: NEG
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: LD_INT 0
60532: PUSH
60533: LD_INT 2
60535: NEG
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 1
60543: PUSH
60544: LD_INT 1
60546: NEG
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: LD_INT 2
60554: PUSH
60555: LD_INT 0
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: LD_INT 2
60564: PUSH
60565: LD_INT 1
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_INT 2
60574: PUSH
60575: LD_INT 2
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 1
60584: PUSH
60585: LD_INT 2
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 0
60594: PUSH
60595: LD_INT 2
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 1
60604: NEG
60605: PUSH
60606: LD_INT 1
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 2
60615: NEG
60616: PUSH
60617: LD_INT 0
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: LD_INT 2
60626: NEG
60627: PUSH
60628: LD_INT 1
60630: NEG
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: PUSH
60636: LD_INT 2
60638: NEG
60639: PUSH
60640: LD_INT 2
60642: NEG
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: LIST
60664: LIST
60665: LIST
60666: LIST
60667: LIST
60668: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60669: LD_ADDR_VAR 0 59
60673: PUSH
60674: LD_INT 0
60676: PUSH
60677: LD_INT 0
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 0
60686: PUSH
60687: LD_INT 1
60689: NEG
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 1
60697: PUSH
60698: LD_INT 0
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 1
60707: PUSH
60708: LD_INT 1
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 0
60717: PUSH
60718: LD_INT 1
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 1
60727: NEG
60728: PUSH
60729: LD_INT 0
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 1
60738: NEG
60739: PUSH
60740: LD_INT 1
60742: NEG
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: LIST
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60757: LD_ADDR_VAR 0 60
60761: PUSH
60762: LD_INT 0
60764: PUSH
60765: LD_INT 0
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 0
60774: PUSH
60775: LD_INT 1
60777: NEG
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 1
60785: PUSH
60786: LD_INT 0
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 1
60795: PUSH
60796: LD_INT 1
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 0
60805: PUSH
60806: LD_INT 1
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 1
60815: NEG
60816: PUSH
60817: LD_INT 0
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: LD_INT 1
60826: NEG
60827: PUSH
60828: LD_INT 1
60830: NEG
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: LIST
60840: LIST
60841: LIST
60842: LIST
60843: LIST
60844: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60845: LD_ADDR_VAR 0 61
60849: PUSH
60850: LD_INT 0
60852: PUSH
60853: LD_INT 0
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 0
60862: PUSH
60863: LD_INT 1
60865: NEG
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 1
60873: PUSH
60874: LD_INT 0
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: LD_INT 1
60883: PUSH
60884: LD_INT 1
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 0
60893: PUSH
60894: LD_INT 1
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 1
60903: NEG
60904: PUSH
60905: LD_INT 0
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 1
60914: NEG
60915: PUSH
60916: LD_INT 1
60918: NEG
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60933: LD_ADDR_VAR 0 62
60937: PUSH
60938: LD_INT 0
60940: PUSH
60941: LD_INT 0
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 0
60950: PUSH
60951: LD_INT 1
60953: NEG
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: LD_INT 1
60961: PUSH
60962: LD_INT 0
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 1
60971: PUSH
60972: LD_INT 1
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: PUSH
60979: LD_INT 0
60981: PUSH
60982: LD_INT 1
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 1
60991: NEG
60992: PUSH
60993: LD_INT 0
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 1
61002: NEG
61003: PUSH
61004: LD_INT 1
61006: NEG
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61021: LD_ADDR_VAR 0 63
61025: PUSH
61026: LD_INT 0
61028: PUSH
61029: LD_INT 0
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 0
61038: PUSH
61039: LD_INT 1
61041: NEG
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 1
61049: PUSH
61050: LD_INT 0
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 1
61059: PUSH
61060: LD_INT 1
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 0
61069: PUSH
61070: LD_INT 1
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: LD_INT 1
61079: NEG
61080: PUSH
61081: LD_INT 0
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 1
61090: NEG
61091: PUSH
61092: LD_INT 1
61094: NEG
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: LIST
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61109: LD_ADDR_VAR 0 64
61113: PUSH
61114: LD_INT 0
61116: PUSH
61117: LD_INT 0
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 0
61126: PUSH
61127: LD_INT 1
61129: NEG
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 1
61137: PUSH
61138: LD_INT 0
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 1
61147: PUSH
61148: LD_INT 1
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 0
61157: PUSH
61158: LD_INT 1
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 1
61167: NEG
61168: PUSH
61169: LD_INT 0
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: LD_INT 1
61178: NEG
61179: PUSH
61180: LD_INT 1
61182: NEG
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: ST_TO_ADDR
// end ; 1 :
61197: GO 67094
61199: LD_INT 1
61201: DOUBLE
61202: EQUAL
61203: IFTRUE 61207
61205: GO 63830
61207: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61208: LD_ADDR_VAR 0 11
61212: PUSH
61213: LD_INT 1
61215: NEG
61216: PUSH
61217: LD_INT 3
61219: NEG
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 0
61227: PUSH
61228: LD_INT 3
61230: NEG
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 1
61238: PUSH
61239: LD_INT 2
61241: NEG
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: LIST
61251: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61252: LD_ADDR_VAR 0 12
61256: PUSH
61257: LD_INT 2
61259: PUSH
61260: LD_INT 1
61262: NEG
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 3
61270: PUSH
61271: LD_INT 0
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 3
61280: PUSH
61281: LD_INT 1
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: LIST
61292: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61293: LD_ADDR_VAR 0 13
61297: PUSH
61298: LD_INT 3
61300: PUSH
61301: LD_INT 2
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 3
61310: PUSH
61311: LD_INT 3
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 2
61320: PUSH
61321: LD_INT 3
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: LIST
61332: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61333: LD_ADDR_VAR 0 14
61337: PUSH
61338: LD_INT 1
61340: PUSH
61341: LD_INT 3
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: PUSH
61348: LD_INT 0
61350: PUSH
61351: LD_INT 3
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PUSH
61358: LD_INT 1
61360: NEG
61361: PUSH
61362: LD_INT 2
61364: PUSH
61365: EMPTY
61366: LIST
61367: LIST
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: LIST
61373: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61374: LD_ADDR_VAR 0 15
61378: PUSH
61379: LD_INT 2
61381: NEG
61382: PUSH
61383: LD_INT 1
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 3
61392: NEG
61393: PUSH
61394: LD_INT 0
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: PUSH
61401: LD_INT 3
61403: NEG
61404: PUSH
61405: LD_INT 1
61407: NEG
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: LIST
61417: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61418: LD_ADDR_VAR 0 16
61422: PUSH
61423: LD_INT 2
61425: NEG
61426: PUSH
61427: LD_INT 3
61429: NEG
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 3
61437: NEG
61438: PUSH
61439: LD_INT 2
61441: NEG
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 3
61449: NEG
61450: PUSH
61451: LD_INT 3
61453: NEG
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: LIST
61463: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61464: LD_ADDR_VAR 0 17
61468: PUSH
61469: LD_INT 1
61471: NEG
61472: PUSH
61473: LD_INT 3
61475: NEG
61476: PUSH
61477: EMPTY
61478: LIST
61479: LIST
61480: PUSH
61481: LD_INT 0
61483: PUSH
61484: LD_INT 3
61486: NEG
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: LD_INT 1
61494: PUSH
61495: LD_INT 2
61497: NEG
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: LIST
61507: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61508: LD_ADDR_VAR 0 18
61512: PUSH
61513: LD_INT 2
61515: PUSH
61516: LD_INT 1
61518: NEG
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 3
61526: PUSH
61527: LD_INT 0
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: PUSH
61534: LD_INT 3
61536: PUSH
61537: LD_INT 1
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: LIST
61548: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61549: LD_ADDR_VAR 0 19
61553: PUSH
61554: LD_INT 3
61556: PUSH
61557: LD_INT 2
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: LD_INT 3
61566: PUSH
61567: LD_INT 3
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: LD_INT 2
61576: PUSH
61577: LD_INT 3
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: LIST
61588: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61589: LD_ADDR_VAR 0 20
61593: PUSH
61594: LD_INT 1
61596: PUSH
61597: LD_INT 3
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 0
61606: PUSH
61607: LD_INT 3
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: LD_INT 1
61616: NEG
61617: PUSH
61618: LD_INT 2
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: LIST
61629: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61630: LD_ADDR_VAR 0 21
61634: PUSH
61635: LD_INT 2
61637: NEG
61638: PUSH
61639: LD_INT 1
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: LD_INT 3
61648: NEG
61649: PUSH
61650: LD_INT 0
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: LD_INT 3
61659: NEG
61660: PUSH
61661: LD_INT 1
61663: NEG
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: LIST
61673: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61674: LD_ADDR_VAR 0 22
61678: PUSH
61679: LD_INT 2
61681: NEG
61682: PUSH
61683: LD_INT 3
61685: NEG
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: LD_INT 3
61693: NEG
61694: PUSH
61695: LD_INT 2
61697: NEG
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 3
61705: NEG
61706: PUSH
61707: LD_INT 3
61709: NEG
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: LIST
61719: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
61720: LD_ADDR_VAR 0 23
61724: PUSH
61725: LD_INT 0
61727: PUSH
61728: LD_INT 3
61730: NEG
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: PUSH
61736: LD_INT 1
61738: NEG
61739: PUSH
61740: LD_INT 4
61742: NEG
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 1
61750: PUSH
61751: LD_INT 3
61753: NEG
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: LIST
61763: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
61764: LD_ADDR_VAR 0 24
61768: PUSH
61769: LD_INT 3
61771: PUSH
61772: LD_INT 0
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: PUSH
61779: LD_INT 3
61781: PUSH
61782: LD_INT 1
61784: NEG
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: LD_INT 4
61792: PUSH
61793: LD_INT 1
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: LIST
61804: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
61805: LD_ADDR_VAR 0 25
61809: PUSH
61810: LD_INT 3
61812: PUSH
61813: LD_INT 3
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: PUSH
61820: LD_INT 4
61822: PUSH
61823: LD_INT 3
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: LD_INT 3
61832: PUSH
61833: LD_INT 4
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: LIST
61844: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
61845: LD_ADDR_VAR 0 26
61849: PUSH
61850: LD_INT 0
61852: PUSH
61853: LD_INT 3
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PUSH
61860: LD_INT 1
61862: PUSH
61863: LD_INT 4
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PUSH
61870: LD_INT 1
61872: NEG
61873: PUSH
61874: LD_INT 3
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: LIST
61885: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
61886: LD_ADDR_VAR 0 27
61890: PUSH
61891: LD_INT 3
61893: NEG
61894: PUSH
61895: LD_INT 0
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: PUSH
61902: LD_INT 3
61904: NEG
61905: PUSH
61906: LD_INT 1
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PUSH
61913: LD_INT 4
61915: NEG
61916: PUSH
61917: LD_INT 1
61919: NEG
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: EMPTY
61926: LIST
61927: LIST
61928: LIST
61929: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
61930: LD_ADDR_VAR 0 28
61934: PUSH
61935: LD_INT 3
61937: NEG
61938: PUSH
61939: LD_INT 3
61941: NEG
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 3
61949: NEG
61950: PUSH
61951: LD_INT 4
61953: NEG
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: PUSH
61959: LD_INT 4
61961: NEG
61962: PUSH
61963: LD_INT 3
61965: NEG
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: LIST
61975: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
61976: LD_ADDR_VAR 0 29
61980: PUSH
61981: LD_INT 1
61983: NEG
61984: PUSH
61985: LD_INT 3
61987: NEG
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 0
61995: PUSH
61996: LD_INT 3
61998: NEG
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_INT 1
62006: PUSH
62007: LD_INT 2
62009: NEG
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: PUSH
62015: LD_INT 1
62017: NEG
62018: PUSH
62019: LD_INT 4
62021: NEG
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PUSH
62027: LD_INT 0
62029: PUSH
62030: LD_INT 4
62032: NEG
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: PUSH
62038: LD_INT 1
62040: PUSH
62041: LD_INT 3
62043: NEG
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: LD_INT 1
62051: NEG
62052: PUSH
62053: LD_INT 5
62055: NEG
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: LD_INT 0
62063: PUSH
62064: LD_INT 5
62066: NEG
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: LD_INT 1
62074: PUSH
62075: LD_INT 4
62077: NEG
62078: PUSH
62079: EMPTY
62080: LIST
62081: LIST
62082: PUSH
62083: LD_INT 1
62085: NEG
62086: PUSH
62087: LD_INT 6
62089: NEG
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: LD_INT 0
62097: PUSH
62098: LD_INT 6
62100: NEG
62101: PUSH
62102: EMPTY
62103: LIST
62104: LIST
62105: PUSH
62106: LD_INT 1
62108: PUSH
62109: LD_INT 5
62111: NEG
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: LIST
62121: LIST
62122: LIST
62123: LIST
62124: LIST
62125: LIST
62126: LIST
62127: LIST
62128: LIST
62129: LIST
62130: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
62131: LD_ADDR_VAR 0 30
62135: PUSH
62136: LD_INT 2
62138: PUSH
62139: LD_INT 1
62141: NEG
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PUSH
62147: LD_INT 3
62149: PUSH
62150: LD_INT 0
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: LD_INT 3
62159: PUSH
62160: LD_INT 1
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: LD_INT 3
62169: PUSH
62170: LD_INT 1
62172: NEG
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: PUSH
62178: LD_INT 4
62180: PUSH
62181: LD_INT 0
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: PUSH
62188: LD_INT 4
62190: PUSH
62191: LD_INT 1
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: PUSH
62198: LD_INT 4
62200: PUSH
62201: LD_INT 1
62203: NEG
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: PUSH
62209: LD_INT 5
62211: PUSH
62212: LD_INT 0
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: PUSH
62219: LD_INT 5
62221: PUSH
62222: LD_INT 1
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: PUSH
62229: LD_INT 5
62231: PUSH
62232: LD_INT 1
62234: NEG
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PUSH
62240: LD_INT 6
62242: PUSH
62243: LD_INT 0
62245: PUSH
62246: EMPTY
62247: LIST
62248: LIST
62249: PUSH
62250: LD_INT 6
62252: PUSH
62253: LD_INT 1
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
62274: LD_ADDR_VAR 0 31
62278: PUSH
62279: LD_INT 3
62281: PUSH
62282: LD_INT 2
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 3
62291: PUSH
62292: LD_INT 3
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: PUSH
62299: LD_INT 2
62301: PUSH
62302: LD_INT 3
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: PUSH
62309: LD_INT 4
62311: PUSH
62312: LD_INT 3
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: PUSH
62319: LD_INT 4
62321: PUSH
62322: LD_INT 4
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: PUSH
62329: LD_INT 3
62331: PUSH
62332: LD_INT 4
62334: PUSH
62335: EMPTY
62336: LIST
62337: LIST
62338: PUSH
62339: LD_INT 5
62341: PUSH
62342: LD_INT 4
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: LD_INT 5
62351: PUSH
62352: LD_INT 5
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: LD_INT 4
62361: PUSH
62362: LD_INT 5
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: LD_INT 6
62371: PUSH
62372: LD_INT 5
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 6
62381: PUSH
62382: LD_INT 6
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: LD_INT 5
62391: PUSH
62392: LD_INT 6
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: LIST
62403: LIST
62404: LIST
62405: LIST
62406: LIST
62407: LIST
62408: LIST
62409: LIST
62410: LIST
62411: LIST
62412: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
62413: LD_ADDR_VAR 0 32
62417: PUSH
62418: LD_INT 1
62420: PUSH
62421: LD_INT 3
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: LD_INT 0
62430: PUSH
62431: LD_INT 3
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PUSH
62438: LD_INT 1
62440: NEG
62441: PUSH
62442: LD_INT 2
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: PUSH
62449: LD_INT 1
62451: PUSH
62452: LD_INT 4
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PUSH
62459: LD_INT 0
62461: PUSH
62462: LD_INT 4
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 1
62471: NEG
62472: PUSH
62473: LD_INT 3
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: PUSH
62480: LD_INT 1
62482: PUSH
62483: LD_INT 5
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: LD_INT 0
62492: PUSH
62493: LD_INT 5
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: PUSH
62500: LD_INT 1
62502: NEG
62503: PUSH
62504: LD_INT 4
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PUSH
62511: LD_INT 1
62513: PUSH
62514: LD_INT 6
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: LD_INT 0
62523: PUSH
62524: LD_INT 6
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: PUSH
62531: LD_INT 1
62533: NEG
62534: PUSH
62535: LD_INT 5
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: LIST
62546: LIST
62547: LIST
62548: LIST
62549: LIST
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: LIST
62555: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
62556: LD_ADDR_VAR 0 33
62560: PUSH
62561: LD_INT 2
62563: NEG
62564: PUSH
62565: LD_INT 1
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: LD_INT 3
62574: NEG
62575: PUSH
62576: LD_INT 0
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: PUSH
62583: LD_INT 3
62585: NEG
62586: PUSH
62587: LD_INT 1
62589: NEG
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: PUSH
62595: LD_INT 3
62597: NEG
62598: PUSH
62599: LD_INT 1
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: PUSH
62606: LD_INT 4
62608: NEG
62609: PUSH
62610: LD_INT 0
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: LD_INT 4
62619: NEG
62620: PUSH
62621: LD_INT 1
62623: NEG
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: PUSH
62629: LD_INT 4
62631: NEG
62632: PUSH
62633: LD_INT 1
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: PUSH
62640: LD_INT 5
62642: NEG
62643: PUSH
62644: LD_INT 0
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: PUSH
62651: LD_INT 5
62653: NEG
62654: PUSH
62655: LD_INT 1
62657: NEG
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: LD_INT 5
62665: NEG
62666: PUSH
62667: LD_INT 1
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: LD_INT 6
62676: NEG
62677: PUSH
62678: LD_INT 0
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: PUSH
62685: LD_INT 6
62687: NEG
62688: PUSH
62689: LD_INT 1
62691: NEG
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: PUSH
62697: EMPTY
62698: LIST
62699: LIST
62700: LIST
62701: LIST
62702: LIST
62703: LIST
62704: LIST
62705: LIST
62706: LIST
62707: LIST
62708: LIST
62709: LIST
62710: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
62711: LD_ADDR_VAR 0 34
62715: PUSH
62716: LD_INT 2
62718: NEG
62719: PUSH
62720: LD_INT 3
62722: NEG
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: PUSH
62728: LD_INT 3
62730: NEG
62731: PUSH
62732: LD_INT 2
62734: NEG
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 3
62742: NEG
62743: PUSH
62744: LD_INT 3
62746: NEG
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: PUSH
62752: LD_INT 3
62754: NEG
62755: PUSH
62756: LD_INT 4
62758: NEG
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: PUSH
62764: LD_INT 4
62766: NEG
62767: PUSH
62768: LD_INT 3
62770: NEG
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: PUSH
62776: LD_INT 4
62778: NEG
62779: PUSH
62780: LD_INT 4
62782: NEG
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: PUSH
62788: LD_INT 4
62790: NEG
62791: PUSH
62792: LD_INT 5
62794: NEG
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 5
62802: NEG
62803: PUSH
62804: LD_INT 4
62806: NEG
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: PUSH
62812: LD_INT 5
62814: NEG
62815: PUSH
62816: LD_INT 5
62818: NEG
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 5
62826: NEG
62827: PUSH
62828: LD_INT 6
62830: NEG
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: PUSH
62836: LD_INT 6
62838: NEG
62839: PUSH
62840: LD_INT 5
62842: NEG
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: PUSH
62848: LD_INT 6
62850: NEG
62851: PUSH
62852: LD_INT 6
62854: NEG
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: LIST
62864: LIST
62865: LIST
62866: LIST
62867: LIST
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
62874: LD_ADDR_VAR 0 41
62878: PUSH
62879: LD_INT 0
62881: PUSH
62882: LD_INT 2
62884: NEG
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: PUSH
62890: LD_INT 1
62892: NEG
62893: PUSH
62894: LD_INT 3
62896: NEG
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: LD_INT 1
62904: PUSH
62905: LD_INT 2
62907: NEG
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: LIST
62917: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
62918: LD_ADDR_VAR 0 42
62922: PUSH
62923: LD_INT 2
62925: PUSH
62926: LD_INT 0
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: PUSH
62933: LD_INT 2
62935: PUSH
62936: LD_INT 1
62938: NEG
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PUSH
62944: LD_INT 3
62946: PUSH
62947: LD_INT 1
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: LIST
62958: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
62959: LD_ADDR_VAR 0 43
62963: PUSH
62964: LD_INT 2
62966: PUSH
62967: LD_INT 2
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: PUSH
62974: LD_INT 3
62976: PUSH
62977: LD_INT 2
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: PUSH
62984: LD_INT 2
62986: PUSH
62987: LD_INT 3
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: LIST
62998: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
62999: LD_ADDR_VAR 0 44
63003: PUSH
63004: LD_INT 0
63006: PUSH
63007: LD_INT 2
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: LD_INT 1
63016: PUSH
63017: LD_INT 3
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PUSH
63024: LD_INT 1
63026: NEG
63027: PUSH
63028: LD_INT 2
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: LIST
63039: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63040: LD_ADDR_VAR 0 45
63044: PUSH
63045: LD_INT 2
63047: NEG
63048: PUSH
63049: LD_INT 0
63051: PUSH
63052: EMPTY
63053: LIST
63054: LIST
63055: PUSH
63056: LD_INT 2
63058: NEG
63059: PUSH
63060: LD_INT 1
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: PUSH
63067: LD_INT 3
63069: NEG
63070: PUSH
63071: LD_INT 1
63073: NEG
63074: PUSH
63075: EMPTY
63076: LIST
63077: LIST
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: LIST
63083: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
63084: LD_ADDR_VAR 0 46
63088: PUSH
63089: LD_INT 2
63091: NEG
63092: PUSH
63093: LD_INT 2
63095: NEG
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: PUSH
63101: LD_INT 2
63103: NEG
63104: PUSH
63105: LD_INT 3
63107: NEG
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 3
63115: NEG
63116: PUSH
63117: LD_INT 2
63119: NEG
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: LIST
63129: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
63130: LD_ADDR_VAR 0 47
63134: PUSH
63135: LD_INT 2
63137: NEG
63138: PUSH
63139: LD_INT 3
63141: NEG
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: PUSH
63147: LD_INT 1
63149: NEG
63150: PUSH
63151: LD_INT 3
63153: NEG
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: EMPTY
63160: LIST
63161: LIST
63162: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
63163: LD_ADDR_VAR 0 48
63167: PUSH
63168: LD_INT 1
63170: PUSH
63171: LD_INT 2
63173: NEG
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: PUSH
63179: LD_INT 2
63181: PUSH
63182: LD_INT 1
63184: NEG
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
63194: LD_ADDR_VAR 0 49
63198: PUSH
63199: LD_INT 3
63201: PUSH
63202: LD_INT 1
63204: PUSH
63205: EMPTY
63206: LIST
63207: LIST
63208: PUSH
63209: LD_INT 3
63211: PUSH
63212: LD_INT 2
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PUSH
63219: EMPTY
63220: LIST
63221: LIST
63222: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
63223: LD_ADDR_VAR 0 50
63227: PUSH
63228: LD_INT 2
63230: PUSH
63231: LD_INT 3
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: PUSH
63238: LD_INT 1
63240: PUSH
63241: LD_INT 3
63243: PUSH
63244: EMPTY
63245: LIST
63246: LIST
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
63252: LD_ADDR_VAR 0 51
63256: PUSH
63257: LD_INT 1
63259: NEG
63260: PUSH
63261: LD_INT 2
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: PUSH
63268: LD_INT 2
63270: NEG
63271: PUSH
63272: LD_INT 1
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
63283: LD_ADDR_VAR 0 52
63287: PUSH
63288: LD_INT 3
63290: NEG
63291: PUSH
63292: LD_INT 1
63294: NEG
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: PUSH
63300: LD_INT 3
63302: NEG
63303: PUSH
63304: LD_INT 2
63306: NEG
63307: PUSH
63308: EMPTY
63309: LIST
63310: LIST
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63316: LD_ADDR_VAR 0 53
63320: PUSH
63321: LD_INT 1
63323: NEG
63324: PUSH
63325: LD_INT 3
63327: NEG
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: PUSH
63333: LD_INT 0
63335: PUSH
63336: LD_INT 3
63338: NEG
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: PUSH
63344: LD_INT 1
63346: PUSH
63347: LD_INT 2
63349: NEG
63350: PUSH
63351: EMPTY
63352: LIST
63353: LIST
63354: PUSH
63355: EMPTY
63356: LIST
63357: LIST
63358: LIST
63359: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63360: LD_ADDR_VAR 0 54
63364: PUSH
63365: LD_INT 2
63367: PUSH
63368: LD_INT 1
63370: NEG
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PUSH
63376: LD_INT 3
63378: PUSH
63379: LD_INT 0
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: PUSH
63386: LD_INT 3
63388: PUSH
63389: LD_INT 1
63391: PUSH
63392: EMPTY
63393: LIST
63394: LIST
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: LIST
63400: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63401: LD_ADDR_VAR 0 55
63405: PUSH
63406: LD_INT 3
63408: PUSH
63409: LD_INT 2
63411: PUSH
63412: EMPTY
63413: LIST
63414: LIST
63415: PUSH
63416: LD_INT 3
63418: PUSH
63419: LD_INT 3
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: PUSH
63426: LD_INT 2
63428: PUSH
63429: LD_INT 3
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: EMPTY
63437: LIST
63438: LIST
63439: LIST
63440: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63441: LD_ADDR_VAR 0 56
63445: PUSH
63446: LD_INT 1
63448: PUSH
63449: LD_INT 3
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: PUSH
63456: LD_INT 0
63458: PUSH
63459: LD_INT 3
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: LD_INT 1
63468: NEG
63469: PUSH
63470: LD_INT 2
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: PUSH
63477: EMPTY
63478: LIST
63479: LIST
63480: LIST
63481: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63482: LD_ADDR_VAR 0 57
63486: PUSH
63487: LD_INT 2
63489: NEG
63490: PUSH
63491: LD_INT 1
63493: PUSH
63494: EMPTY
63495: LIST
63496: LIST
63497: PUSH
63498: LD_INT 3
63500: NEG
63501: PUSH
63502: LD_INT 0
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: PUSH
63509: LD_INT 3
63511: NEG
63512: PUSH
63513: LD_INT 1
63515: NEG
63516: PUSH
63517: EMPTY
63518: LIST
63519: LIST
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: LIST
63525: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63526: LD_ADDR_VAR 0 58
63530: PUSH
63531: LD_INT 2
63533: NEG
63534: PUSH
63535: LD_INT 3
63537: NEG
63538: PUSH
63539: EMPTY
63540: LIST
63541: LIST
63542: PUSH
63543: LD_INT 3
63545: NEG
63546: PUSH
63547: LD_INT 2
63549: NEG
63550: PUSH
63551: EMPTY
63552: LIST
63553: LIST
63554: PUSH
63555: LD_INT 3
63557: NEG
63558: PUSH
63559: LD_INT 3
63561: NEG
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: LIST
63571: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
63572: LD_ADDR_VAR 0 59
63576: PUSH
63577: LD_INT 1
63579: NEG
63580: PUSH
63581: LD_INT 2
63583: NEG
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: PUSH
63589: LD_INT 0
63591: PUSH
63592: LD_INT 2
63594: NEG
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: PUSH
63600: LD_INT 1
63602: PUSH
63603: LD_INT 1
63605: NEG
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: PUSH
63611: EMPTY
63612: LIST
63613: LIST
63614: LIST
63615: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63616: LD_ADDR_VAR 0 60
63620: PUSH
63621: LD_INT 1
63623: PUSH
63624: LD_INT 1
63626: NEG
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: PUSH
63632: LD_INT 2
63634: PUSH
63635: LD_INT 0
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: PUSH
63642: LD_INT 2
63644: PUSH
63645: LD_INT 1
63647: PUSH
63648: EMPTY
63649: LIST
63650: LIST
63651: PUSH
63652: EMPTY
63653: LIST
63654: LIST
63655: LIST
63656: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63657: LD_ADDR_VAR 0 61
63661: PUSH
63662: LD_INT 2
63664: PUSH
63665: LD_INT 1
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: PUSH
63672: LD_INT 2
63674: PUSH
63675: LD_INT 2
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: PUSH
63682: LD_INT 1
63684: PUSH
63685: LD_INT 2
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: EMPTY
63693: LIST
63694: LIST
63695: LIST
63696: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63697: LD_ADDR_VAR 0 62
63701: PUSH
63702: LD_INT 1
63704: PUSH
63705: LD_INT 2
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: LD_INT 0
63714: PUSH
63715: LD_INT 2
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: LD_INT 1
63724: NEG
63725: PUSH
63726: LD_INT 1
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: LIST
63737: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63738: LD_ADDR_VAR 0 63
63742: PUSH
63743: LD_INT 1
63745: NEG
63746: PUSH
63747: LD_INT 1
63749: PUSH
63750: EMPTY
63751: LIST
63752: LIST
63753: PUSH
63754: LD_INT 2
63756: NEG
63757: PUSH
63758: LD_INT 0
63760: PUSH
63761: EMPTY
63762: LIST
63763: LIST
63764: PUSH
63765: LD_INT 2
63767: NEG
63768: PUSH
63769: LD_INT 1
63771: NEG
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: LIST
63781: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63782: LD_ADDR_VAR 0 64
63786: PUSH
63787: LD_INT 1
63789: NEG
63790: PUSH
63791: LD_INT 2
63793: NEG
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: PUSH
63799: LD_INT 2
63801: NEG
63802: PUSH
63803: LD_INT 1
63805: NEG
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: PUSH
63811: LD_INT 2
63813: NEG
63814: PUSH
63815: LD_INT 2
63817: NEG
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: PUSH
63823: EMPTY
63824: LIST
63825: LIST
63826: LIST
63827: ST_TO_ADDR
// end ; 2 :
63828: GO 67094
63830: LD_INT 2
63832: DOUBLE
63833: EQUAL
63834: IFTRUE 63838
63836: GO 67093
63838: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
63839: LD_ADDR_VAR 0 29
63843: PUSH
63844: LD_INT 4
63846: PUSH
63847: LD_INT 0
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: PUSH
63854: LD_INT 4
63856: PUSH
63857: LD_INT 1
63859: NEG
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: PUSH
63865: LD_INT 5
63867: PUSH
63868: LD_INT 0
63870: PUSH
63871: EMPTY
63872: LIST
63873: LIST
63874: PUSH
63875: LD_INT 5
63877: PUSH
63878: LD_INT 1
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: PUSH
63885: LD_INT 4
63887: PUSH
63888: LD_INT 1
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: PUSH
63895: LD_INT 3
63897: PUSH
63898: LD_INT 0
63900: PUSH
63901: EMPTY
63902: LIST
63903: LIST
63904: PUSH
63905: LD_INT 3
63907: PUSH
63908: LD_INT 1
63910: NEG
63911: PUSH
63912: EMPTY
63913: LIST
63914: LIST
63915: PUSH
63916: LD_INT 3
63918: PUSH
63919: LD_INT 2
63921: NEG
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: PUSH
63927: LD_INT 5
63929: PUSH
63930: LD_INT 2
63932: PUSH
63933: EMPTY
63934: LIST
63935: LIST
63936: PUSH
63937: LD_INT 3
63939: PUSH
63940: LD_INT 3
63942: PUSH
63943: EMPTY
63944: LIST
63945: LIST
63946: PUSH
63947: LD_INT 3
63949: PUSH
63950: LD_INT 2
63952: PUSH
63953: EMPTY
63954: LIST
63955: LIST
63956: PUSH
63957: LD_INT 4
63959: PUSH
63960: LD_INT 3
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: PUSH
63967: LD_INT 4
63969: PUSH
63970: LD_INT 4
63972: PUSH
63973: EMPTY
63974: LIST
63975: LIST
63976: PUSH
63977: LD_INT 3
63979: PUSH
63980: LD_INT 4
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: PUSH
63987: LD_INT 2
63989: PUSH
63990: LD_INT 3
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: PUSH
63997: LD_INT 2
63999: PUSH
64000: LD_INT 2
64002: PUSH
64003: EMPTY
64004: LIST
64005: LIST
64006: PUSH
64007: LD_INT 4
64009: PUSH
64010: LD_INT 2
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: PUSH
64017: LD_INT 2
64019: PUSH
64020: LD_INT 4
64022: PUSH
64023: EMPTY
64024: LIST
64025: LIST
64026: PUSH
64027: LD_INT 0
64029: PUSH
64030: LD_INT 4
64032: PUSH
64033: EMPTY
64034: LIST
64035: LIST
64036: PUSH
64037: LD_INT 0
64039: PUSH
64040: LD_INT 3
64042: PUSH
64043: EMPTY
64044: LIST
64045: LIST
64046: PUSH
64047: LD_INT 1
64049: PUSH
64050: LD_INT 4
64052: PUSH
64053: EMPTY
64054: LIST
64055: LIST
64056: PUSH
64057: LD_INT 1
64059: PUSH
64060: LD_INT 5
64062: PUSH
64063: EMPTY
64064: LIST
64065: LIST
64066: PUSH
64067: LD_INT 0
64069: PUSH
64070: LD_INT 5
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: PUSH
64077: LD_INT 1
64079: NEG
64080: PUSH
64081: LD_INT 4
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: PUSH
64088: LD_INT 1
64090: NEG
64091: PUSH
64092: LD_INT 3
64094: PUSH
64095: EMPTY
64096: LIST
64097: LIST
64098: PUSH
64099: LD_INT 2
64101: PUSH
64102: LD_INT 5
64104: PUSH
64105: EMPTY
64106: LIST
64107: LIST
64108: PUSH
64109: LD_INT 2
64111: NEG
64112: PUSH
64113: LD_INT 3
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: PUSH
64120: LD_INT 3
64122: NEG
64123: PUSH
64124: LD_INT 0
64126: PUSH
64127: EMPTY
64128: LIST
64129: LIST
64130: PUSH
64131: LD_INT 3
64133: NEG
64134: PUSH
64135: LD_INT 1
64137: NEG
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: PUSH
64143: LD_INT 2
64145: NEG
64146: PUSH
64147: LD_INT 0
64149: PUSH
64150: EMPTY
64151: LIST
64152: LIST
64153: PUSH
64154: LD_INT 2
64156: NEG
64157: PUSH
64158: LD_INT 1
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: PUSH
64165: LD_INT 3
64167: NEG
64168: PUSH
64169: LD_INT 1
64171: PUSH
64172: EMPTY
64173: LIST
64174: LIST
64175: PUSH
64176: LD_INT 4
64178: NEG
64179: PUSH
64180: LD_INT 0
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: PUSH
64187: LD_INT 4
64189: NEG
64190: PUSH
64191: LD_INT 1
64193: NEG
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PUSH
64199: LD_INT 4
64201: NEG
64202: PUSH
64203: LD_INT 2
64205: NEG
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: PUSH
64211: LD_INT 2
64213: NEG
64214: PUSH
64215: LD_INT 2
64217: PUSH
64218: EMPTY
64219: LIST
64220: LIST
64221: PUSH
64222: LD_INT 4
64224: NEG
64225: PUSH
64226: LD_INT 4
64228: NEG
64229: PUSH
64230: EMPTY
64231: LIST
64232: LIST
64233: PUSH
64234: LD_INT 4
64236: NEG
64237: PUSH
64238: LD_INT 5
64240: NEG
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: PUSH
64246: LD_INT 3
64248: NEG
64249: PUSH
64250: LD_INT 4
64252: NEG
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: PUSH
64258: LD_INT 3
64260: NEG
64261: PUSH
64262: LD_INT 3
64264: NEG
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: PUSH
64270: LD_INT 4
64272: NEG
64273: PUSH
64274: LD_INT 3
64276: NEG
64277: PUSH
64278: EMPTY
64279: LIST
64280: LIST
64281: PUSH
64282: LD_INT 5
64284: NEG
64285: PUSH
64286: LD_INT 4
64288: NEG
64289: PUSH
64290: EMPTY
64291: LIST
64292: LIST
64293: PUSH
64294: LD_INT 5
64296: NEG
64297: PUSH
64298: LD_INT 5
64300: NEG
64301: PUSH
64302: EMPTY
64303: LIST
64304: LIST
64305: PUSH
64306: LD_INT 3
64308: NEG
64309: PUSH
64310: LD_INT 5
64312: NEG
64313: PUSH
64314: EMPTY
64315: LIST
64316: LIST
64317: PUSH
64318: LD_INT 5
64320: NEG
64321: PUSH
64322: LD_INT 3
64324: NEG
64325: PUSH
64326: EMPTY
64327: LIST
64328: LIST
64329: PUSH
64330: EMPTY
64331: LIST
64332: LIST
64333: LIST
64334: LIST
64335: LIST
64336: LIST
64337: LIST
64338: LIST
64339: LIST
64340: LIST
64341: LIST
64342: LIST
64343: LIST
64344: LIST
64345: LIST
64346: LIST
64347: LIST
64348: LIST
64349: LIST
64350: LIST
64351: LIST
64352: LIST
64353: LIST
64354: LIST
64355: LIST
64356: LIST
64357: LIST
64358: LIST
64359: LIST
64360: LIST
64361: LIST
64362: LIST
64363: LIST
64364: LIST
64365: LIST
64366: LIST
64367: LIST
64368: LIST
64369: LIST
64370: LIST
64371: LIST
64372: LIST
64373: LIST
64374: LIST
64375: LIST
64376: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
64377: LD_ADDR_VAR 0 30
64381: PUSH
64382: LD_INT 4
64384: PUSH
64385: LD_INT 4
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: PUSH
64392: LD_INT 4
64394: PUSH
64395: LD_INT 3
64397: PUSH
64398: EMPTY
64399: LIST
64400: LIST
64401: PUSH
64402: LD_INT 5
64404: PUSH
64405: LD_INT 4
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: PUSH
64412: LD_INT 5
64414: PUSH
64415: LD_INT 5
64417: PUSH
64418: EMPTY
64419: LIST
64420: LIST
64421: PUSH
64422: LD_INT 4
64424: PUSH
64425: LD_INT 5
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: PUSH
64432: LD_INT 3
64434: PUSH
64435: LD_INT 4
64437: PUSH
64438: EMPTY
64439: LIST
64440: LIST
64441: PUSH
64442: LD_INT 3
64444: PUSH
64445: LD_INT 3
64447: PUSH
64448: EMPTY
64449: LIST
64450: LIST
64451: PUSH
64452: LD_INT 5
64454: PUSH
64455: LD_INT 3
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: PUSH
64462: LD_INT 3
64464: PUSH
64465: LD_INT 5
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: PUSH
64472: LD_INT 0
64474: PUSH
64475: LD_INT 3
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: PUSH
64482: LD_INT 0
64484: PUSH
64485: LD_INT 2
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: PUSH
64492: LD_INT 1
64494: PUSH
64495: LD_INT 3
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: PUSH
64502: LD_INT 1
64504: PUSH
64505: LD_INT 4
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: PUSH
64512: LD_INT 0
64514: PUSH
64515: LD_INT 4
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: PUSH
64522: LD_INT 1
64524: NEG
64525: PUSH
64526: LD_INT 3
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: PUSH
64533: LD_INT 1
64535: NEG
64536: PUSH
64537: LD_INT 2
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: LD_INT 2
64546: PUSH
64547: LD_INT 4
64549: PUSH
64550: EMPTY
64551: LIST
64552: LIST
64553: PUSH
64554: LD_INT 2
64556: NEG
64557: PUSH
64558: LD_INT 2
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: PUSH
64565: LD_INT 4
64567: NEG
64568: PUSH
64569: LD_INT 0
64571: PUSH
64572: EMPTY
64573: LIST
64574: LIST
64575: PUSH
64576: LD_INT 4
64578: NEG
64579: PUSH
64580: LD_INT 1
64582: NEG
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: PUSH
64588: LD_INT 3
64590: NEG
64591: PUSH
64592: LD_INT 0
64594: PUSH
64595: EMPTY
64596: LIST
64597: LIST
64598: PUSH
64599: LD_INT 3
64601: NEG
64602: PUSH
64603: LD_INT 1
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: PUSH
64610: LD_INT 4
64612: NEG
64613: PUSH
64614: LD_INT 1
64616: PUSH
64617: EMPTY
64618: LIST
64619: LIST
64620: PUSH
64621: LD_INT 5
64623: NEG
64624: PUSH
64625: LD_INT 0
64627: PUSH
64628: EMPTY
64629: LIST
64630: LIST
64631: PUSH
64632: LD_INT 5
64634: NEG
64635: PUSH
64636: LD_INT 1
64638: NEG
64639: PUSH
64640: EMPTY
64641: LIST
64642: LIST
64643: PUSH
64644: LD_INT 5
64646: NEG
64647: PUSH
64648: LD_INT 2
64650: NEG
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: PUSH
64656: LD_INT 3
64658: NEG
64659: PUSH
64660: LD_INT 2
64662: PUSH
64663: EMPTY
64664: LIST
64665: LIST
64666: PUSH
64667: LD_INT 3
64669: NEG
64670: PUSH
64671: LD_INT 3
64673: NEG
64674: PUSH
64675: EMPTY
64676: LIST
64677: LIST
64678: PUSH
64679: LD_INT 3
64681: NEG
64682: PUSH
64683: LD_INT 4
64685: NEG
64686: PUSH
64687: EMPTY
64688: LIST
64689: LIST
64690: PUSH
64691: LD_INT 2
64693: NEG
64694: PUSH
64695: LD_INT 3
64697: NEG
64698: PUSH
64699: EMPTY
64700: LIST
64701: LIST
64702: PUSH
64703: LD_INT 2
64705: NEG
64706: PUSH
64707: LD_INT 2
64709: NEG
64710: PUSH
64711: EMPTY
64712: LIST
64713: LIST
64714: PUSH
64715: LD_INT 3
64717: NEG
64718: PUSH
64719: LD_INT 2
64721: NEG
64722: PUSH
64723: EMPTY
64724: LIST
64725: LIST
64726: PUSH
64727: LD_INT 4
64729: NEG
64730: PUSH
64731: LD_INT 3
64733: NEG
64734: PUSH
64735: EMPTY
64736: LIST
64737: LIST
64738: PUSH
64739: LD_INT 4
64741: NEG
64742: PUSH
64743: LD_INT 4
64745: NEG
64746: PUSH
64747: EMPTY
64748: LIST
64749: LIST
64750: PUSH
64751: LD_INT 2
64753: NEG
64754: PUSH
64755: LD_INT 4
64757: NEG
64758: PUSH
64759: EMPTY
64760: LIST
64761: LIST
64762: PUSH
64763: LD_INT 4
64765: NEG
64766: PUSH
64767: LD_INT 2
64769: NEG
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: PUSH
64775: LD_INT 0
64777: PUSH
64778: LD_INT 4
64780: NEG
64781: PUSH
64782: EMPTY
64783: LIST
64784: LIST
64785: PUSH
64786: LD_INT 0
64788: PUSH
64789: LD_INT 5
64791: NEG
64792: PUSH
64793: EMPTY
64794: LIST
64795: LIST
64796: PUSH
64797: LD_INT 1
64799: PUSH
64800: LD_INT 4
64802: NEG
64803: PUSH
64804: EMPTY
64805: LIST
64806: LIST
64807: PUSH
64808: LD_INT 1
64810: PUSH
64811: LD_INT 3
64813: NEG
64814: PUSH
64815: EMPTY
64816: LIST
64817: LIST
64818: PUSH
64819: LD_INT 0
64821: PUSH
64822: LD_INT 3
64824: NEG
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: PUSH
64830: LD_INT 1
64832: NEG
64833: PUSH
64834: LD_INT 4
64836: NEG
64837: PUSH
64838: EMPTY
64839: LIST
64840: LIST
64841: PUSH
64842: LD_INT 1
64844: NEG
64845: PUSH
64846: LD_INT 5
64848: NEG
64849: PUSH
64850: EMPTY
64851: LIST
64852: LIST
64853: PUSH
64854: LD_INT 2
64856: PUSH
64857: LD_INT 3
64859: NEG
64860: PUSH
64861: EMPTY
64862: LIST
64863: LIST
64864: PUSH
64865: LD_INT 2
64867: NEG
64868: PUSH
64869: LD_INT 5
64871: NEG
64872: PUSH
64873: EMPTY
64874: LIST
64875: LIST
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: LIST
64881: LIST
64882: LIST
64883: LIST
64884: LIST
64885: LIST
64886: LIST
64887: LIST
64888: LIST
64889: LIST
64890: LIST
64891: LIST
64892: LIST
64893: LIST
64894: LIST
64895: LIST
64896: LIST
64897: LIST
64898: LIST
64899: LIST
64900: LIST
64901: LIST
64902: LIST
64903: LIST
64904: LIST
64905: LIST
64906: LIST
64907: LIST
64908: LIST
64909: LIST
64910: LIST
64911: LIST
64912: LIST
64913: LIST
64914: LIST
64915: LIST
64916: LIST
64917: LIST
64918: LIST
64919: LIST
64920: LIST
64921: LIST
64922: LIST
64923: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
64924: LD_ADDR_VAR 0 31
64928: PUSH
64929: LD_INT 0
64931: PUSH
64932: LD_INT 4
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: PUSH
64939: LD_INT 0
64941: PUSH
64942: LD_INT 3
64944: PUSH
64945: EMPTY
64946: LIST
64947: LIST
64948: PUSH
64949: LD_INT 1
64951: PUSH
64952: LD_INT 4
64954: PUSH
64955: EMPTY
64956: LIST
64957: LIST
64958: PUSH
64959: LD_INT 1
64961: PUSH
64962: LD_INT 5
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: PUSH
64969: LD_INT 0
64971: PUSH
64972: LD_INT 5
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: PUSH
64979: LD_INT 1
64981: NEG
64982: PUSH
64983: LD_INT 4
64985: PUSH
64986: EMPTY
64987: LIST
64988: LIST
64989: PUSH
64990: LD_INT 1
64992: NEG
64993: PUSH
64994: LD_INT 3
64996: PUSH
64997: EMPTY
64998: LIST
64999: LIST
65000: PUSH
65001: LD_INT 2
65003: PUSH
65004: LD_INT 5
65006: PUSH
65007: EMPTY
65008: LIST
65009: LIST
65010: PUSH
65011: LD_INT 2
65013: NEG
65014: PUSH
65015: LD_INT 3
65017: PUSH
65018: EMPTY
65019: LIST
65020: LIST
65021: PUSH
65022: LD_INT 3
65024: NEG
65025: PUSH
65026: LD_INT 0
65028: PUSH
65029: EMPTY
65030: LIST
65031: LIST
65032: PUSH
65033: LD_INT 3
65035: NEG
65036: PUSH
65037: LD_INT 1
65039: NEG
65040: PUSH
65041: EMPTY
65042: LIST
65043: LIST
65044: PUSH
65045: LD_INT 2
65047: NEG
65048: PUSH
65049: LD_INT 0
65051: PUSH
65052: EMPTY
65053: LIST
65054: LIST
65055: PUSH
65056: LD_INT 2
65058: NEG
65059: PUSH
65060: LD_INT 1
65062: PUSH
65063: EMPTY
65064: LIST
65065: LIST
65066: PUSH
65067: LD_INT 3
65069: NEG
65070: PUSH
65071: LD_INT 1
65073: PUSH
65074: EMPTY
65075: LIST
65076: LIST
65077: PUSH
65078: LD_INT 4
65080: NEG
65081: PUSH
65082: LD_INT 0
65084: PUSH
65085: EMPTY
65086: LIST
65087: LIST
65088: PUSH
65089: LD_INT 4
65091: NEG
65092: PUSH
65093: LD_INT 1
65095: NEG
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: PUSH
65101: LD_INT 4
65103: NEG
65104: PUSH
65105: LD_INT 2
65107: NEG
65108: PUSH
65109: EMPTY
65110: LIST
65111: LIST
65112: PUSH
65113: LD_INT 2
65115: NEG
65116: PUSH
65117: LD_INT 2
65119: PUSH
65120: EMPTY
65121: LIST
65122: LIST
65123: PUSH
65124: LD_INT 4
65126: NEG
65127: PUSH
65128: LD_INT 4
65130: NEG
65131: PUSH
65132: EMPTY
65133: LIST
65134: LIST
65135: PUSH
65136: LD_INT 4
65138: NEG
65139: PUSH
65140: LD_INT 5
65142: NEG
65143: PUSH
65144: EMPTY
65145: LIST
65146: LIST
65147: PUSH
65148: LD_INT 3
65150: NEG
65151: PUSH
65152: LD_INT 4
65154: NEG
65155: PUSH
65156: EMPTY
65157: LIST
65158: LIST
65159: PUSH
65160: LD_INT 3
65162: NEG
65163: PUSH
65164: LD_INT 3
65166: NEG
65167: PUSH
65168: EMPTY
65169: LIST
65170: LIST
65171: PUSH
65172: LD_INT 4
65174: NEG
65175: PUSH
65176: LD_INT 3
65178: NEG
65179: PUSH
65180: EMPTY
65181: LIST
65182: LIST
65183: PUSH
65184: LD_INT 5
65186: NEG
65187: PUSH
65188: LD_INT 4
65190: NEG
65191: PUSH
65192: EMPTY
65193: LIST
65194: LIST
65195: PUSH
65196: LD_INT 5
65198: NEG
65199: PUSH
65200: LD_INT 5
65202: NEG
65203: PUSH
65204: EMPTY
65205: LIST
65206: LIST
65207: PUSH
65208: LD_INT 3
65210: NEG
65211: PUSH
65212: LD_INT 5
65214: NEG
65215: PUSH
65216: EMPTY
65217: LIST
65218: LIST
65219: PUSH
65220: LD_INT 5
65222: NEG
65223: PUSH
65224: LD_INT 3
65226: NEG
65227: PUSH
65228: EMPTY
65229: LIST
65230: LIST
65231: PUSH
65232: LD_INT 0
65234: PUSH
65235: LD_INT 3
65237: NEG
65238: PUSH
65239: EMPTY
65240: LIST
65241: LIST
65242: PUSH
65243: LD_INT 0
65245: PUSH
65246: LD_INT 4
65248: NEG
65249: PUSH
65250: EMPTY
65251: LIST
65252: LIST
65253: PUSH
65254: LD_INT 1
65256: PUSH
65257: LD_INT 3
65259: NEG
65260: PUSH
65261: EMPTY
65262: LIST
65263: LIST
65264: PUSH
65265: LD_INT 1
65267: PUSH
65268: LD_INT 2
65270: NEG
65271: PUSH
65272: EMPTY
65273: LIST
65274: LIST
65275: PUSH
65276: LD_INT 0
65278: PUSH
65279: LD_INT 2
65281: NEG
65282: PUSH
65283: EMPTY
65284: LIST
65285: LIST
65286: PUSH
65287: LD_INT 1
65289: NEG
65290: PUSH
65291: LD_INT 3
65293: NEG
65294: PUSH
65295: EMPTY
65296: LIST
65297: LIST
65298: PUSH
65299: LD_INT 1
65301: NEG
65302: PUSH
65303: LD_INT 4
65305: NEG
65306: PUSH
65307: EMPTY
65308: LIST
65309: LIST
65310: PUSH
65311: LD_INT 2
65313: PUSH
65314: LD_INT 2
65316: NEG
65317: PUSH
65318: EMPTY
65319: LIST
65320: LIST
65321: PUSH
65322: LD_INT 2
65324: NEG
65325: PUSH
65326: LD_INT 4
65328: NEG
65329: PUSH
65330: EMPTY
65331: LIST
65332: LIST
65333: PUSH
65334: LD_INT 4
65336: PUSH
65337: LD_INT 0
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: PUSH
65344: LD_INT 4
65346: PUSH
65347: LD_INT 1
65349: NEG
65350: PUSH
65351: EMPTY
65352: LIST
65353: LIST
65354: PUSH
65355: LD_INT 5
65357: PUSH
65358: LD_INT 0
65360: PUSH
65361: EMPTY
65362: LIST
65363: LIST
65364: PUSH
65365: LD_INT 5
65367: PUSH
65368: LD_INT 1
65370: PUSH
65371: EMPTY
65372: LIST
65373: LIST
65374: PUSH
65375: LD_INT 4
65377: PUSH
65378: LD_INT 1
65380: PUSH
65381: EMPTY
65382: LIST
65383: LIST
65384: PUSH
65385: LD_INT 3
65387: PUSH
65388: LD_INT 0
65390: PUSH
65391: EMPTY
65392: LIST
65393: LIST
65394: PUSH
65395: LD_INT 3
65397: PUSH
65398: LD_INT 1
65400: NEG
65401: PUSH
65402: EMPTY
65403: LIST
65404: LIST
65405: PUSH
65406: LD_INT 3
65408: PUSH
65409: LD_INT 2
65411: NEG
65412: PUSH
65413: EMPTY
65414: LIST
65415: LIST
65416: PUSH
65417: LD_INT 5
65419: PUSH
65420: LD_INT 2
65422: PUSH
65423: EMPTY
65424: LIST
65425: LIST
65426: PUSH
65427: EMPTY
65428: LIST
65429: LIST
65430: LIST
65431: LIST
65432: LIST
65433: LIST
65434: LIST
65435: LIST
65436: LIST
65437: LIST
65438: LIST
65439: LIST
65440: LIST
65441: LIST
65442: LIST
65443: LIST
65444: LIST
65445: LIST
65446: LIST
65447: LIST
65448: LIST
65449: LIST
65450: LIST
65451: LIST
65452: LIST
65453: LIST
65454: LIST
65455: LIST
65456: LIST
65457: LIST
65458: LIST
65459: LIST
65460: LIST
65461: LIST
65462: LIST
65463: LIST
65464: LIST
65465: LIST
65466: LIST
65467: LIST
65468: LIST
65469: LIST
65470: LIST
65471: LIST
65472: LIST
65473: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
65474: LD_ADDR_VAR 0 32
65478: PUSH
65479: LD_INT 4
65481: NEG
65482: PUSH
65483: LD_INT 0
65485: PUSH
65486: EMPTY
65487: LIST
65488: LIST
65489: PUSH
65490: LD_INT 4
65492: NEG
65493: PUSH
65494: LD_INT 1
65496: NEG
65497: PUSH
65498: EMPTY
65499: LIST
65500: LIST
65501: PUSH
65502: LD_INT 3
65504: NEG
65505: PUSH
65506: LD_INT 0
65508: PUSH
65509: EMPTY
65510: LIST
65511: LIST
65512: PUSH
65513: LD_INT 3
65515: NEG
65516: PUSH
65517: LD_INT 1
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: PUSH
65524: LD_INT 4
65526: NEG
65527: PUSH
65528: LD_INT 1
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: PUSH
65535: LD_INT 5
65537: NEG
65538: PUSH
65539: LD_INT 0
65541: PUSH
65542: EMPTY
65543: LIST
65544: LIST
65545: PUSH
65546: LD_INT 5
65548: NEG
65549: PUSH
65550: LD_INT 1
65552: NEG
65553: PUSH
65554: EMPTY
65555: LIST
65556: LIST
65557: PUSH
65558: LD_INT 5
65560: NEG
65561: PUSH
65562: LD_INT 2
65564: NEG
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: PUSH
65570: LD_INT 3
65572: NEG
65573: PUSH
65574: LD_INT 2
65576: PUSH
65577: EMPTY
65578: LIST
65579: LIST
65580: PUSH
65581: LD_INT 3
65583: NEG
65584: PUSH
65585: LD_INT 3
65587: NEG
65588: PUSH
65589: EMPTY
65590: LIST
65591: LIST
65592: PUSH
65593: LD_INT 3
65595: NEG
65596: PUSH
65597: LD_INT 4
65599: NEG
65600: PUSH
65601: EMPTY
65602: LIST
65603: LIST
65604: PUSH
65605: LD_INT 2
65607: NEG
65608: PUSH
65609: LD_INT 3
65611: NEG
65612: PUSH
65613: EMPTY
65614: LIST
65615: LIST
65616: PUSH
65617: LD_INT 2
65619: NEG
65620: PUSH
65621: LD_INT 2
65623: NEG
65624: PUSH
65625: EMPTY
65626: LIST
65627: LIST
65628: PUSH
65629: LD_INT 3
65631: NEG
65632: PUSH
65633: LD_INT 2
65635: NEG
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: PUSH
65641: LD_INT 4
65643: NEG
65644: PUSH
65645: LD_INT 3
65647: NEG
65648: PUSH
65649: EMPTY
65650: LIST
65651: LIST
65652: PUSH
65653: LD_INT 4
65655: NEG
65656: PUSH
65657: LD_INT 4
65659: NEG
65660: PUSH
65661: EMPTY
65662: LIST
65663: LIST
65664: PUSH
65665: LD_INT 2
65667: NEG
65668: PUSH
65669: LD_INT 4
65671: NEG
65672: PUSH
65673: EMPTY
65674: LIST
65675: LIST
65676: PUSH
65677: LD_INT 4
65679: NEG
65680: PUSH
65681: LD_INT 2
65683: NEG
65684: PUSH
65685: EMPTY
65686: LIST
65687: LIST
65688: PUSH
65689: LD_INT 0
65691: PUSH
65692: LD_INT 4
65694: NEG
65695: PUSH
65696: EMPTY
65697: LIST
65698: LIST
65699: PUSH
65700: LD_INT 0
65702: PUSH
65703: LD_INT 5
65705: NEG
65706: PUSH
65707: EMPTY
65708: LIST
65709: LIST
65710: PUSH
65711: LD_INT 1
65713: PUSH
65714: LD_INT 4
65716: NEG
65717: PUSH
65718: EMPTY
65719: LIST
65720: LIST
65721: PUSH
65722: LD_INT 1
65724: PUSH
65725: LD_INT 3
65727: NEG
65728: PUSH
65729: EMPTY
65730: LIST
65731: LIST
65732: PUSH
65733: LD_INT 0
65735: PUSH
65736: LD_INT 3
65738: NEG
65739: PUSH
65740: EMPTY
65741: LIST
65742: LIST
65743: PUSH
65744: LD_INT 1
65746: NEG
65747: PUSH
65748: LD_INT 4
65750: NEG
65751: PUSH
65752: EMPTY
65753: LIST
65754: LIST
65755: PUSH
65756: LD_INT 1
65758: NEG
65759: PUSH
65760: LD_INT 5
65762: NEG
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: PUSH
65768: LD_INT 2
65770: PUSH
65771: LD_INT 3
65773: NEG
65774: PUSH
65775: EMPTY
65776: LIST
65777: LIST
65778: PUSH
65779: LD_INT 2
65781: NEG
65782: PUSH
65783: LD_INT 5
65785: NEG
65786: PUSH
65787: EMPTY
65788: LIST
65789: LIST
65790: PUSH
65791: LD_INT 3
65793: PUSH
65794: LD_INT 0
65796: PUSH
65797: EMPTY
65798: LIST
65799: LIST
65800: PUSH
65801: LD_INT 3
65803: PUSH
65804: LD_INT 1
65806: NEG
65807: PUSH
65808: EMPTY
65809: LIST
65810: LIST
65811: PUSH
65812: LD_INT 4
65814: PUSH
65815: LD_INT 0
65817: PUSH
65818: EMPTY
65819: LIST
65820: LIST
65821: PUSH
65822: LD_INT 4
65824: PUSH
65825: LD_INT 1
65827: PUSH
65828: EMPTY
65829: LIST
65830: LIST
65831: PUSH
65832: LD_INT 3
65834: PUSH
65835: LD_INT 1
65837: PUSH
65838: EMPTY
65839: LIST
65840: LIST
65841: PUSH
65842: LD_INT 2
65844: PUSH
65845: LD_INT 0
65847: PUSH
65848: EMPTY
65849: LIST
65850: LIST
65851: PUSH
65852: LD_INT 2
65854: PUSH
65855: LD_INT 1
65857: NEG
65858: PUSH
65859: EMPTY
65860: LIST
65861: LIST
65862: PUSH
65863: LD_INT 2
65865: PUSH
65866: LD_INT 2
65868: NEG
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: PUSH
65874: LD_INT 4
65876: PUSH
65877: LD_INT 2
65879: PUSH
65880: EMPTY
65881: LIST
65882: LIST
65883: PUSH
65884: LD_INT 4
65886: PUSH
65887: LD_INT 4
65889: PUSH
65890: EMPTY
65891: LIST
65892: LIST
65893: PUSH
65894: LD_INT 4
65896: PUSH
65897: LD_INT 3
65899: PUSH
65900: EMPTY
65901: LIST
65902: LIST
65903: PUSH
65904: LD_INT 5
65906: PUSH
65907: LD_INT 4
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: PUSH
65914: LD_INT 5
65916: PUSH
65917: LD_INT 5
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: PUSH
65924: LD_INT 4
65926: PUSH
65927: LD_INT 5
65929: PUSH
65930: EMPTY
65931: LIST
65932: LIST
65933: PUSH
65934: LD_INT 3
65936: PUSH
65937: LD_INT 4
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: PUSH
65944: LD_INT 3
65946: PUSH
65947: LD_INT 3
65949: PUSH
65950: EMPTY
65951: LIST
65952: LIST
65953: PUSH
65954: LD_INT 5
65956: PUSH
65957: LD_INT 3
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: PUSH
65964: LD_INT 3
65966: PUSH
65967: LD_INT 5
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: PUSH
65974: EMPTY
65975: LIST
65976: LIST
65977: LIST
65978: LIST
65979: LIST
65980: LIST
65981: LIST
65982: LIST
65983: LIST
65984: LIST
65985: LIST
65986: LIST
65987: LIST
65988: LIST
65989: LIST
65990: LIST
65991: LIST
65992: LIST
65993: LIST
65994: LIST
65995: LIST
65996: LIST
65997: LIST
65998: LIST
65999: LIST
66000: LIST
66001: LIST
66002: LIST
66003: LIST
66004: LIST
66005: LIST
66006: LIST
66007: LIST
66008: LIST
66009: LIST
66010: LIST
66011: LIST
66012: LIST
66013: LIST
66014: LIST
66015: LIST
66016: LIST
66017: LIST
66018: LIST
66019: LIST
66020: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
66021: LD_ADDR_VAR 0 33
66025: PUSH
66026: LD_INT 4
66028: NEG
66029: PUSH
66030: LD_INT 4
66032: NEG
66033: PUSH
66034: EMPTY
66035: LIST
66036: LIST
66037: PUSH
66038: LD_INT 4
66040: NEG
66041: PUSH
66042: LD_INT 5
66044: NEG
66045: PUSH
66046: EMPTY
66047: LIST
66048: LIST
66049: PUSH
66050: LD_INT 3
66052: NEG
66053: PUSH
66054: LD_INT 4
66056: NEG
66057: PUSH
66058: EMPTY
66059: LIST
66060: LIST
66061: PUSH
66062: LD_INT 3
66064: NEG
66065: PUSH
66066: LD_INT 3
66068: NEG
66069: PUSH
66070: EMPTY
66071: LIST
66072: LIST
66073: PUSH
66074: LD_INT 4
66076: NEG
66077: PUSH
66078: LD_INT 3
66080: NEG
66081: PUSH
66082: EMPTY
66083: LIST
66084: LIST
66085: PUSH
66086: LD_INT 5
66088: NEG
66089: PUSH
66090: LD_INT 4
66092: NEG
66093: PUSH
66094: EMPTY
66095: LIST
66096: LIST
66097: PUSH
66098: LD_INT 5
66100: NEG
66101: PUSH
66102: LD_INT 5
66104: NEG
66105: PUSH
66106: EMPTY
66107: LIST
66108: LIST
66109: PUSH
66110: LD_INT 3
66112: NEG
66113: PUSH
66114: LD_INT 5
66116: NEG
66117: PUSH
66118: EMPTY
66119: LIST
66120: LIST
66121: PUSH
66122: LD_INT 5
66124: NEG
66125: PUSH
66126: LD_INT 3
66128: NEG
66129: PUSH
66130: EMPTY
66131: LIST
66132: LIST
66133: PUSH
66134: LD_INT 0
66136: PUSH
66137: LD_INT 3
66139: NEG
66140: PUSH
66141: EMPTY
66142: LIST
66143: LIST
66144: PUSH
66145: LD_INT 0
66147: PUSH
66148: LD_INT 4
66150: NEG
66151: PUSH
66152: EMPTY
66153: LIST
66154: LIST
66155: PUSH
66156: LD_INT 1
66158: PUSH
66159: LD_INT 3
66161: NEG
66162: PUSH
66163: EMPTY
66164: LIST
66165: LIST
66166: PUSH
66167: LD_INT 1
66169: PUSH
66170: LD_INT 2
66172: NEG
66173: PUSH
66174: EMPTY
66175: LIST
66176: LIST
66177: PUSH
66178: LD_INT 0
66180: PUSH
66181: LD_INT 2
66183: NEG
66184: PUSH
66185: EMPTY
66186: LIST
66187: LIST
66188: PUSH
66189: LD_INT 1
66191: NEG
66192: PUSH
66193: LD_INT 3
66195: NEG
66196: PUSH
66197: EMPTY
66198: LIST
66199: LIST
66200: PUSH
66201: LD_INT 1
66203: NEG
66204: PUSH
66205: LD_INT 4
66207: NEG
66208: PUSH
66209: EMPTY
66210: LIST
66211: LIST
66212: PUSH
66213: LD_INT 2
66215: PUSH
66216: LD_INT 2
66218: NEG
66219: PUSH
66220: EMPTY
66221: LIST
66222: LIST
66223: PUSH
66224: LD_INT 2
66226: NEG
66227: PUSH
66228: LD_INT 4
66230: NEG
66231: PUSH
66232: EMPTY
66233: LIST
66234: LIST
66235: PUSH
66236: LD_INT 4
66238: PUSH
66239: LD_INT 0
66241: PUSH
66242: EMPTY
66243: LIST
66244: LIST
66245: PUSH
66246: LD_INT 4
66248: PUSH
66249: LD_INT 1
66251: NEG
66252: PUSH
66253: EMPTY
66254: LIST
66255: LIST
66256: PUSH
66257: LD_INT 5
66259: PUSH
66260: LD_INT 0
66262: PUSH
66263: EMPTY
66264: LIST
66265: LIST
66266: PUSH
66267: LD_INT 5
66269: PUSH
66270: LD_INT 1
66272: PUSH
66273: EMPTY
66274: LIST
66275: LIST
66276: PUSH
66277: LD_INT 4
66279: PUSH
66280: LD_INT 1
66282: PUSH
66283: EMPTY
66284: LIST
66285: LIST
66286: PUSH
66287: LD_INT 3
66289: PUSH
66290: LD_INT 0
66292: PUSH
66293: EMPTY
66294: LIST
66295: LIST
66296: PUSH
66297: LD_INT 3
66299: PUSH
66300: LD_INT 1
66302: NEG
66303: PUSH
66304: EMPTY
66305: LIST
66306: LIST
66307: PUSH
66308: LD_INT 3
66310: PUSH
66311: LD_INT 2
66313: NEG
66314: PUSH
66315: EMPTY
66316: LIST
66317: LIST
66318: PUSH
66319: LD_INT 5
66321: PUSH
66322: LD_INT 2
66324: PUSH
66325: EMPTY
66326: LIST
66327: LIST
66328: PUSH
66329: LD_INT 3
66331: PUSH
66332: LD_INT 3
66334: PUSH
66335: EMPTY
66336: LIST
66337: LIST
66338: PUSH
66339: LD_INT 3
66341: PUSH
66342: LD_INT 2
66344: PUSH
66345: EMPTY
66346: LIST
66347: LIST
66348: PUSH
66349: LD_INT 4
66351: PUSH
66352: LD_INT 3
66354: PUSH
66355: EMPTY
66356: LIST
66357: LIST
66358: PUSH
66359: LD_INT 4
66361: PUSH
66362: LD_INT 4
66364: PUSH
66365: EMPTY
66366: LIST
66367: LIST
66368: PUSH
66369: LD_INT 3
66371: PUSH
66372: LD_INT 4
66374: PUSH
66375: EMPTY
66376: LIST
66377: LIST
66378: PUSH
66379: LD_INT 2
66381: PUSH
66382: LD_INT 3
66384: PUSH
66385: EMPTY
66386: LIST
66387: LIST
66388: PUSH
66389: LD_INT 2
66391: PUSH
66392: LD_INT 2
66394: PUSH
66395: EMPTY
66396: LIST
66397: LIST
66398: PUSH
66399: LD_INT 4
66401: PUSH
66402: LD_INT 2
66404: PUSH
66405: EMPTY
66406: LIST
66407: LIST
66408: PUSH
66409: LD_INT 2
66411: PUSH
66412: LD_INT 4
66414: PUSH
66415: EMPTY
66416: LIST
66417: LIST
66418: PUSH
66419: LD_INT 0
66421: PUSH
66422: LD_INT 4
66424: PUSH
66425: EMPTY
66426: LIST
66427: LIST
66428: PUSH
66429: LD_INT 0
66431: PUSH
66432: LD_INT 3
66434: PUSH
66435: EMPTY
66436: LIST
66437: LIST
66438: PUSH
66439: LD_INT 1
66441: PUSH
66442: LD_INT 4
66444: PUSH
66445: EMPTY
66446: LIST
66447: LIST
66448: PUSH
66449: LD_INT 1
66451: PUSH
66452: LD_INT 5
66454: PUSH
66455: EMPTY
66456: LIST
66457: LIST
66458: PUSH
66459: LD_INT 0
66461: PUSH
66462: LD_INT 5
66464: PUSH
66465: EMPTY
66466: LIST
66467: LIST
66468: PUSH
66469: LD_INT 1
66471: NEG
66472: PUSH
66473: LD_INT 4
66475: PUSH
66476: EMPTY
66477: LIST
66478: LIST
66479: PUSH
66480: LD_INT 1
66482: NEG
66483: PUSH
66484: LD_INT 3
66486: PUSH
66487: EMPTY
66488: LIST
66489: LIST
66490: PUSH
66491: LD_INT 2
66493: PUSH
66494: LD_INT 5
66496: PUSH
66497: EMPTY
66498: LIST
66499: LIST
66500: PUSH
66501: LD_INT 2
66503: NEG
66504: PUSH
66505: LD_INT 3
66507: PUSH
66508: EMPTY
66509: LIST
66510: LIST
66511: PUSH
66512: EMPTY
66513: LIST
66514: LIST
66515: LIST
66516: LIST
66517: LIST
66518: LIST
66519: LIST
66520: LIST
66521: LIST
66522: LIST
66523: LIST
66524: LIST
66525: LIST
66526: LIST
66527: LIST
66528: LIST
66529: LIST
66530: LIST
66531: LIST
66532: LIST
66533: LIST
66534: LIST
66535: LIST
66536: LIST
66537: LIST
66538: LIST
66539: LIST
66540: LIST
66541: LIST
66542: LIST
66543: LIST
66544: LIST
66545: LIST
66546: LIST
66547: LIST
66548: LIST
66549: LIST
66550: LIST
66551: LIST
66552: LIST
66553: LIST
66554: LIST
66555: LIST
66556: LIST
66557: LIST
66558: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
66559: LD_ADDR_VAR 0 34
66563: PUSH
66564: LD_INT 0
66566: PUSH
66567: LD_INT 4
66569: NEG
66570: PUSH
66571: EMPTY
66572: LIST
66573: LIST
66574: PUSH
66575: LD_INT 0
66577: PUSH
66578: LD_INT 5
66580: NEG
66581: PUSH
66582: EMPTY
66583: LIST
66584: LIST
66585: PUSH
66586: LD_INT 1
66588: PUSH
66589: LD_INT 4
66591: NEG
66592: PUSH
66593: EMPTY
66594: LIST
66595: LIST
66596: PUSH
66597: LD_INT 1
66599: PUSH
66600: LD_INT 3
66602: NEG
66603: PUSH
66604: EMPTY
66605: LIST
66606: LIST
66607: PUSH
66608: LD_INT 0
66610: PUSH
66611: LD_INT 3
66613: NEG
66614: PUSH
66615: EMPTY
66616: LIST
66617: LIST
66618: PUSH
66619: LD_INT 1
66621: NEG
66622: PUSH
66623: LD_INT 4
66625: NEG
66626: PUSH
66627: EMPTY
66628: LIST
66629: LIST
66630: PUSH
66631: LD_INT 1
66633: NEG
66634: PUSH
66635: LD_INT 5
66637: NEG
66638: PUSH
66639: EMPTY
66640: LIST
66641: LIST
66642: PUSH
66643: LD_INT 2
66645: PUSH
66646: LD_INT 3
66648: NEG
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: PUSH
66654: LD_INT 2
66656: NEG
66657: PUSH
66658: LD_INT 5
66660: NEG
66661: PUSH
66662: EMPTY
66663: LIST
66664: LIST
66665: PUSH
66666: LD_INT 3
66668: PUSH
66669: LD_INT 0
66671: PUSH
66672: EMPTY
66673: LIST
66674: LIST
66675: PUSH
66676: LD_INT 3
66678: PUSH
66679: LD_INT 1
66681: NEG
66682: PUSH
66683: EMPTY
66684: LIST
66685: LIST
66686: PUSH
66687: LD_INT 4
66689: PUSH
66690: LD_INT 0
66692: PUSH
66693: EMPTY
66694: LIST
66695: LIST
66696: PUSH
66697: LD_INT 4
66699: PUSH
66700: LD_INT 1
66702: PUSH
66703: EMPTY
66704: LIST
66705: LIST
66706: PUSH
66707: LD_INT 3
66709: PUSH
66710: LD_INT 1
66712: PUSH
66713: EMPTY
66714: LIST
66715: LIST
66716: PUSH
66717: LD_INT 2
66719: PUSH
66720: LD_INT 0
66722: PUSH
66723: EMPTY
66724: LIST
66725: LIST
66726: PUSH
66727: LD_INT 2
66729: PUSH
66730: LD_INT 1
66732: NEG
66733: PUSH
66734: EMPTY
66735: LIST
66736: LIST
66737: PUSH
66738: LD_INT 2
66740: PUSH
66741: LD_INT 2
66743: NEG
66744: PUSH
66745: EMPTY
66746: LIST
66747: LIST
66748: PUSH
66749: LD_INT 4
66751: PUSH
66752: LD_INT 2
66754: PUSH
66755: EMPTY
66756: LIST
66757: LIST
66758: PUSH
66759: LD_INT 4
66761: PUSH
66762: LD_INT 4
66764: PUSH
66765: EMPTY
66766: LIST
66767: LIST
66768: PUSH
66769: LD_INT 4
66771: PUSH
66772: LD_INT 3
66774: PUSH
66775: EMPTY
66776: LIST
66777: LIST
66778: PUSH
66779: LD_INT 5
66781: PUSH
66782: LD_INT 4
66784: PUSH
66785: EMPTY
66786: LIST
66787: LIST
66788: PUSH
66789: LD_INT 5
66791: PUSH
66792: LD_INT 5
66794: PUSH
66795: EMPTY
66796: LIST
66797: LIST
66798: PUSH
66799: LD_INT 4
66801: PUSH
66802: LD_INT 5
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: PUSH
66809: LD_INT 3
66811: PUSH
66812: LD_INT 4
66814: PUSH
66815: EMPTY
66816: LIST
66817: LIST
66818: PUSH
66819: LD_INT 3
66821: PUSH
66822: LD_INT 3
66824: PUSH
66825: EMPTY
66826: LIST
66827: LIST
66828: PUSH
66829: LD_INT 5
66831: PUSH
66832: LD_INT 3
66834: PUSH
66835: EMPTY
66836: LIST
66837: LIST
66838: PUSH
66839: LD_INT 3
66841: PUSH
66842: LD_INT 5
66844: PUSH
66845: EMPTY
66846: LIST
66847: LIST
66848: PUSH
66849: LD_INT 0
66851: PUSH
66852: LD_INT 3
66854: PUSH
66855: EMPTY
66856: LIST
66857: LIST
66858: PUSH
66859: LD_INT 0
66861: PUSH
66862: LD_INT 2
66864: PUSH
66865: EMPTY
66866: LIST
66867: LIST
66868: PUSH
66869: LD_INT 1
66871: PUSH
66872: LD_INT 3
66874: PUSH
66875: EMPTY
66876: LIST
66877: LIST
66878: PUSH
66879: LD_INT 1
66881: PUSH
66882: LD_INT 4
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: PUSH
66889: LD_INT 0
66891: PUSH
66892: LD_INT 4
66894: PUSH
66895: EMPTY
66896: LIST
66897: LIST
66898: PUSH
66899: LD_INT 1
66901: NEG
66902: PUSH
66903: LD_INT 3
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: PUSH
66910: LD_INT 1
66912: NEG
66913: PUSH
66914: LD_INT 2
66916: PUSH
66917: EMPTY
66918: LIST
66919: LIST
66920: PUSH
66921: LD_INT 2
66923: PUSH
66924: LD_INT 4
66926: PUSH
66927: EMPTY
66928: LIST
66929: LIST
66930: PUSH
66931: LD_INT 2
66933: NEG
66934: PUSH
66935: LD_INT 2
66937: PUSH
66938: EMPTY
66939: LIST
66940: LIST
66941: PUSH
66942: LD_INT 4
66944: NEG
66945: PUSH
66946: LD_INT 0
66948: PUSH
66949: EMPTY
66950: LIST
66951: LIST
66952: PUSH
66953: LD_INT 4
66955: NEG
66956: PUSH
66957: LD_INT 1
66959: NEG
66960: PUSH
66961: EMPTY
66962: LIST
66963: LIST
66964: PUSH
66965: LD_INT 3
66967: NEG
66968: PUSH
66969: LD_INT 0
66971: PUSH
66972: EMPTY
66973: LIST
66974: LIST
66975: PUSH
66976: LD_INT 3
66978: NEG
66979: PUSH
66980: LD_INT 1
66982: PUSH
66983: EMPTY
66984: LIST
66985: LIST
66986: PUSH
66987: LD_INT 4
66989: NEG
66990: PUSH
66991: LD_INT 1
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: PUSH
66998: LD_INT 5
67000: NEG
67001: PUSH
67002: LD_INT 0
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: PUSH
67009: LD_INT 5
67011: NEG
67012: PUSH
67013: LD_INT 1
67015: NEG
67016: PUSH
67017: EMPTY
67018: LIST
67019: LIST
67020: PUSH
67021: LD_INT 5
67023: NEG
67024: PUSH
67025: LD_INT 2
67027: NEG
67028: PUSH
67029: EMPTY
67030: LIST
67031: LIST
67032: PUSH
67033: LD_INT 3
67035: NEG
67036: PUSH
67037: LD_INT 2
67039: PUSH
67040: EMPTY
67041: LIST
67042: LIST
67043: PUSH
67044: EMPTY
67045: LIST
67046: LIST
67047: LIST
67048: LIST
67049: LIST
67050: LIST
67051: LIST
67052: LIST
67053: LIST
67054: LIST
67055: LIST
67056: LIST
67057: LIST
67058: LIST
67059: LIST
67060: LIST
67061: LIST
67062: LIST
67063: LIST
67064: LIST
67065: LIST
67066: LIST
67067: LIST
67068: LIST
67069: LIST
67070: LIST
67071: LIST
67072: LIST
67073: LIST
67074: LIST
67075: LIST
67076: LIST
67077: LIST
67078: LIST
67079: LIST
67080: LIST
67081: LIST
67082: LIST
67083: LIST
67084: LIST
67085: LIST
67086: LIST
67087: LIST
67088: LIST
67089: LIST
67090: ST_TO_ADDR
// end ; end ;
67091: GO 67094
67093: POP
// case btype of b_depot , b_warehouse :
67094: LD_VAR 0 1
67098: PUSH
67099: LD_INT 0
67101: DOUBLE
67102: EQUAL
67103: IFTRUE 67113
67105: LD_INT 1
67107: DOUBLE
67108: EQUAL
67109: IFTRUE 67113
67111: GO 67314
67113: POP
// case nation of nation_american :
67114: LD_VAR 0 5
67118: PUSH
67119: LD_INT 1
67121: DOUBLE
67122: EQUAL
67123: IFTRUE 67127
67125: GO 67183
67127: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
67128: LD_ADDR_VAR 0 9
67132: PUSH
67133: LD_VAR 0 11
67137: PUSH
67138: LD_VAR 0 12
67142: PUSH
67143: LD_VAR 0 13
67147: PUSH
67148: LD_VAR 0 14
67152: PUSH
67153: LD_VAR 0 15
67157: PUSH
67158: LD_VAR 0 16
67162: PUSH
67163: EMPTY
67164: LIST
67165: LIST
67166: LIST
67167: LIST
67168: LIST
67169: LIST
67170: PUSH
67171: LD_VAR 0 4
67175: PUSH
67176: LD_INT 1
67178: PLUS
67179: ARRAY
67180: ST_TO_ADDR
67181: GO 67312
67183: LD_INT 2
67185: DOUBLE
67186: EQUAL
67187: IFTRUE 67191
67189: GO 67247
67191: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
67192: LD_ADDR_VAR 0 9
67196: PUSH
67197: LD_VAR 0 17
67201: PUSH
67202: LD_VAR 0 18
67206: PUSH
67207: LD_VAR 0 19
67211: PUSH
67212: LD_VAR 0 20
67216: PUSH
67217: LD_VAR 0 21
67221: PUSH
67222: LD_VAR 0 22
67226: PUSH
67227: EMPTY
67228: LIST
67229: LIST
67230: LIST
67231: LIST
67232: LIST
67233: LIST
67234: PUSH
67235: LD_VAR 0 4
67239: PUSH
67240: LD_INT 1
67242: PLUS
67243: ARRAY
67244: ST_TO_ADDR
67245: GO 67312
67247: LD_INT 3
67249: DOUBLE
67250: EQUAL
67251: IFTRUE 67255
67253: GO 67311
67255: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
67256: LD_ADDR_VAR 0 9
67260: PUSH
67261: LD_VAR 0 23
67265: PUSH
67266: LD_VAR 0 24
67270: PUSH
67271: LD_VAR 0 25
67275: PUSH
67276: LD_VAR 0 26
67280: PUSH
67281: LD_VAR 0 27
67285: PUSH
67286: LD_VAR 0 28
67290: PUSH
67291: EMPTY
67292: LIST
67293: LIST
67294: LIST
67295: LIST
67296: LIST
67297: LIST
67298: PUSH
67299: LD_VAR 0 4
67303: PUSH
67304: LD_INT 1
67306: PLUS
67307: ARRAY
67308: ST_TO_ADDR
67309: GO 67312
67311: POP
67312: GO 67867
67314: LD_INT 2
67316: DOUBLE
67317: EQUAL
67318: IFTRUE 67328
67320: LD_INT 3
67322: DOUBLE
67323: EQUAL
67324: IFTRUE 67328
67326: GO 67384
67328: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
67329: LD_ADDR_VAR 0 9
67333: PUSH
67334: LD_VAR 0 29
67338: PUSH
67339: LD_VAR 0 30
67343: PUSH
67344: LD_VAR 0 31
67348: PUSH
67349: LD_VAR 0 32
67353: PUSH
67354: LD_VAR 0 33
67358: PUSH
67359: LD_VAR 0 34
67363: PUSH
67364: EMPTY
67365: LIST
67366: LIST
67367: LIST
67368: LIST
67369: LIST
67370: LIST
67371: PUSH
67372: LD_VAR 0 4
67376: PUSH
67377: LD_INT 1
67379: PLUS
67380: ARRAY
67381: ST_TO_ADDR
67382: GO 67867
67384: LD_INT 16
67386: DOUBLE
67387: EQUAL
67388: IFTRUE 67446
67390: LD_INT 17
67392: DOUBLE
67393: EQUAL
67394: IFTRUE 67446
67396: LD_INT 18
67398: DOUBLE
67399: EQUAL
67400: IFTRUE 67446
67402: LD_INT 19
67404: DOUBLE
67405: EQUAL
67406: IFTRUE 67446
67408: LD_INT 22
67410: DOUBLE
67411: EQUAL
67412: IFTRUE 67446
67414: LD_INT 20
67416: DOUBLE
67417: EQUAL
67418: IFTRUE 67446
67420: LD_INT 21
67422: DOUBLE
67423: EQUAL
67424: IFTRUE 67446
67426: LD_INT 23
67428: DOUBLE
67429: EQUAL
67430: IFTRUE 67446
67432: LD_INT 24
67434: DOUBLE
67435: EQUAL
67436: IFTRUE 67446
67438: LD_INT 25
67440: DOUBLE
67441: EQUAL
67442: IFTRUE 67446
67444: GO 67502
67446: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
67447: LD_ADDR_VAR 0 9
67451: PUSH
67452: LD_VAR 0 35
67456: PUSH
67457: LD_VAR 0 36
67461: PUSH
67462: LD_VAR 0 37
67466: PUSH
67467: LD_VAR 0 38
67471: PUSH
67472: LD_VAR 0 39
67476: PUSH
67477: LD_VAR 0 40
67481: PUSH
67482: EMPTY
67483: LIST
67484: LIST
67485: LIST
67486: LIST
67487: LIST
67488: LIST
67489: PUSH
67490: LD_VAR 0 4
67494: PUSH
67495: LD_INT 1
67497: PLUS
67498: ARRAY
67499: ST_TO_ADDR
67500: GO 67867
67502: LD_INT 6
67504: DOUBLE
67505: EQUAL
67506: IFTRUE 67558
67508: LD_INT 7
67510: DOUBLE
67511: EQUAL
67512: IFTRUE 67558
67514: LD_INT 8
67516: DOUBLE
67517: EQUAL
67518: IFTRUE 67558
67520: LD_INT 13
67522: DOUBLE
67523: EQUAL
67524: IFTRUE 67558
67526: LD_INT 12
67528: DOUBLE
67529: EQUAL
67530: IFTRUE 67558
67532: LD_INT 15
67534: DOUBLE
67535: EQUAL
67536: IFTRUE 67558
67538: LD_INT 11
67540: DOUBLE
67541: EQUAL
67542: IFTRUE 67558
67544: LD_INT 14
67546: DOUBLE
67547: EQUAL
67548: IFTRUE 67558
67550: LD_INT 10
67552: DOUBLE
67553: EQUAL
67554: IFTRUE 67558
67556: GO 67614
67558: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
67559: LD_ADDR_VAR 0 9
67563: PUSH
67564: LD_VAR 0 41
67568: PUSH
67569: LD_VAR 0 42
67573: PUSH
67574: LD_VAR 0 43
67578: PUSH
67579: LD_VAR 0 44
67583: PUSH
67584: LD_VAR 0 45
67588: PUSH
67589: LD_VAR 0 46
67593: PUSH
67594: EMPTY
67595: LIST
67596: LIST
67597: LIST
67598: LIST
67599: LIST
67600: LIST
67601: PUSH
67602: LD_VAR 0 4
67606: PUSH
67607: LD_INT 1
67609: PLUS
67610: ARRAY
67611: ST_TO_ADDR
67612: GO 67867
67614: LD_INT 36
67616: DOUBLE
67617: EQUAL
67618: IFTRUE 67622
67620: GO 67678
67622: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
67623: LD_ADDR_VAR 0 9
67627: PUSH
67628: LD_VAR 0 47
67632: PUSH
67633: LD_VAR 0 48
67637: PUSH
67638: LD_VAR 0 49
67642: PUSH
67643: LD_VAR 0 50
67647: PUSH
67648: LD_VAR 0 51
67652: PUSH
67653: LD_VAR 0 52
67657: PUSH
67658: EMPTY
67659: LIST
67660: LIST
67661: LIST
67662: LIST
67663: LIST
67664: LIST
67665: PUSH
67666: LD_VAR 0 4
67670: PUSH
67671: LD_INT 1
67673: PLUS
67674: ARRAY
67675: ST_TO_ADDR
67676: GO 67867
67678: LD_INT 4
67680: DOUBLE
67681: EQUAL
67682: IFTRUE 67704
67684: LD_INT 5
67686: DOUBLE
67687: EQUAL
67688: IFTRUE 67704
67690: LD_INT 34
67692: DOUBLE
67693: EQUAL
67694: IFTRUE 67704
67696: LD_INT 37
67698: DOUBLE
67699: EQUAL
67700: IFTRUE 67704
67702: GO 67760
67704: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
67705: LD_ADDR_VAR 0 9
67709: PUSH
67710: LD_VAR 0 53
67714: PUSH
67715: LD_VAR 0 54
67719: PUSH
67720: LD_VAR 0 55
67724: PUSH
67725: LD_VAR 0 56
67729: PUSH
67730: LD_VAR 0 57
67734: PUSH
67735: LD_VAR 0 58
67739: PUSH
67740: EMPTY
67741: LIST
67742: LIST
67743: LIST
67744: LIST
67745: LIST
67746: LIST
67747: PUSH
67748: LD_VAR 0 4
67752: PUSH
67753: LD_INT 1
67755: PLUS
67756: ARRAY
67757: ST_TO_ADDR
67758: GO 67867
67760: LD_INT 31
67762: DOUBLE
67763: EQUAL
67764: IFTRUE 67810
67766: LD_INT 32
67768: DOUBLE
67769: EQUAL
67770: IFTRUE 67810
67772: LD_INT 33
67774: DOUBLE
67775: EQUAL
67776: IFTRUE 67810
67778: LD_INT 27
67780: DOUBLE
67781: EQUAL
67782: IFTRUE 67810
67784: LD_INT 26
67786: DOUBLE
67787: EQUAL
67788: IFTRUE 67810
67790: LD_INT 28
67792: DOUBLE
67793: EQUAL
67794: IFTRUE 67810
67796: LD_INT 29
67798: DOUBLE
67799: EQUAL
67800: IFTRUE 67810
67802: LD_INT 30
67804: DOUBLE
67805: EQUAL
67806: IFTRUE 67810
67808: GO 67866
67810: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
67811: LD_ADDR_VAR 0 9
67815: PUSH
67816: LD_VAR 0 59
67820: PUSH
67821: LD_VAR 0 60
67825: PUSH
67826: LD_VAR 0 61
67830: PUSH
67831: LD_VAR 0 62
67835: PUSH
67836: LD_VAR 0 63
67840: PUSH
67841: LD_VAR 0 64
67845: PUSH
67846: EMPTY
67847: LIST
67848: LIST
67849: LIST
67850: LIST
67851: LIST
67852: LIST
67853: PUSH
67854: LD_VAR 0 4
67858: PUSH
67859: LD_INT 1
67861: PLUS
67862: ARRAY
67863: ST_TO_ADDR
67864: GO 67867
67866: POP
// temp_list2 = [ ] ;
67867: LD_ADDR_VAR 0 10
67871: PUSH
67872: EMPTY
67873: ST_TO_ADDR
// for i in temp_list do
67874: LD_ADDR_VAR 0 8
67878: PUSH
67879: LD_VAR 0 9
67883: PUSH
67884: FOR_IN
67885: IFFALSE 67937
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
67887: LD_ADDR_VAR 0 10
67891: PUSH
67892: LD_VAR 0 10
67896: PUSH
67897: LD_VAR 0 8
67901: PUSH
67902: LD_INT 1
67904: ARRAY
67905: PUSH
67906: LD_VAR 0 2
67910: PLUS
67911: PUSH
67912: LD_VAR 0 8
67916: PUSH
67917: LD_INT 2
67919: ARRAY
67920: PUSH
67921: LD_VAR 0 3
67925: PLUS
67926: PUSH
67927: EMPTY
67928: LIST
67929: LIST
67930: PUSH
67931: EMPTY
67932: LIST
67933: ADD
67934: ST_TO_ADDR
67935: GO 67884
67937: POP
67938: POP
// result = temp_list2 ;
67939: LD_ADDR_VAR 0 7
67943: PUSH
67944: LD_VAR 0 10
67948: ST_TO_ADDR
// end ;
67949: LD_VAR 0 7
67953: RET
// export function EnemyInRange ( unit , dist ) ; begin
67954: LD_INT 0
67956: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
67957: LD_ADDR_VAR 0 3
67961: PUSH
67962: LD_VAR 0 1
67966: PPUSH
67967: CALL_OW 255
67971: PPUSH
67972: LD_VAR 0 1
67976: PPUSH
67977: CALL_OW 250
67981: PPUSH
67982: LD_VAR 0 1
67986: PPUSH
67987: CALL_OW 251
67991: PPUSH
67992: LD_VAR 0 2
67996: PPUSH
67997: CALL 41356 0 4
68001: PUSH
68002: LD_INT 4
68004: ARRAY
68005: ST_TO_ADDR
// end ;
68006: LD_VAR 0 3
68010: RET
// export function PlayerSeeMe ( unit ) ; begin
68011: LD_INT 0
68013: PPUSH
// result := See ( your_side , unit ) ;
68014: LD_ADDR_VAR 0 2
68018: PUSH
68019: LD_OWVAR 2
68023: PPUSH
68024: LD_VAR 0 1
68028: PPUSH
68029: CALL_OW 292
68033: ST_TO_ADDR
// end ;
68034: LD_VAR 0 2
68038: RET
// export function ReverseDir ( unit ) ; begin
68039: LD_INT 0
68041: PPUSH
// if not unit then
68042: LD_VAR 0 1
68046: NOT
68047: IFFALSE 68051
// exit ;
68049: GO 68074
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
68051: LD_ADDR_VAR 0 2
68055: PUSH
68056: LD_VAR 0 1
68060: PPUSH
68061: CALL_OW 254
68065: PUSH
68066: LD_INT 3
68068: PLUS
68069: PUSH
68070: LD_INT 6
68072: MOD
68073: ST_TO_ADDR
// end ;
68074: LD_VAR 0 2
68078: RET
// export function ReverseArray ( array ) ; var i ; begin
68079: LD_INT 0
68081: PPUSH
68082: PPUSH
// if not array then
68083: LD_VAR 0 1
68087: NOT
68088: IFFALSE 68092
// exit ;
68090: GO 68147
// result := [ ] ;
68092: LD_ADDR_VAR 0 2
68096: PUSH
68097: EMPTY
68098: ST_TO_ADDR
// for i := array downto 1 do
68099: LD_ADDR_VAR 0 3
68103: PUSH
68104: DOUBLE
68105: LD_VAR 0 1
68109: INC
68110: ST_TO_ADDR
68111: LD_INT 1
68113: PUSH
68114: FOR_DOWNTO
68115: IFFALSE 68145
// result := Join ( result , array [ i ] ) ;
68117: LD_ADDR_VAR 0 2
68121: PUSH
68122: LD_VAR 0 2
68126: PPUSH
68127: LD_VAR 0 1
68131: PUSH
68132: LD_VAR 0 3
68136: ARRAY
68137: PPUSH
68138: CALL 72791 0 2
68142: ST_TO_ADDR
68143: GO 68114
68145: POP
68146: POP
// end ;
68147: LD_VAR 0 2
68151: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
68152: LD_INT 0
68154: PPUSH
68155: PPUSH
68156: PPUSH
68157: PPUSH
68158: PPUSH
68159: PPUSH
// if not unit or not hexes then
68160: LD_VAR 0 1
68164: NOT
68165: PUSH
68166: LD_VAR 0 2
68170: NOT
68171: OR
68172: IFFALSE 68176
// exit ;
68174: GO 68299
// dist := 9999 ;
68176: LD_ADDR_VAR 0 5
68180: PUSH
68181: LD_INT 9999
68183: ST_TO_ADDR
// for i = 1 to hexes do
68184: LD_ADDR_VAR 0 4
68188: PUSH
68189: DOUBLE
68190: LD_INT 1
68192: DEC
68193: ST_TO_ADDR
68194: LD_VAR 0 2
68198: PUSH
68199: FOR_TO
68200: IFFALSE 68287
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
68202: LD_ADDR_VAR 0 6
68206: PUSH
68207: LD_VAR 0 1
68211: PPUSH
68212: LD_VAR 0 2
68216: PUSH
68217: LD_VAR 0 4
68221: ARRAY
68222: PUSH
68223: LD_INT 1
68225: ARRAY
68226: PPUSH
68227: LD_VAR 0 2
68231: PUSH
68232: LD_VAR 0 4
68236: ARRAY
68237: PUSH
68238: LD_INT 2
68240: ARRAY
68241: PPUSH
68242: CALL_OW 297
68246: ST_TO_ADDR
// if tdist < dist then
68247: LD_VAR 0 6
68251: PUSH
68252: LD_VAR 0 5
68256: LESS
68257: IFFALSE 68285
// begin hex := hexes [ i ] ;
68259: LD_ADDR_VAR 0 8
68263: PUSH
68264: LD_VAR 0 2
68268: PUSH
68269: LD_VAR 0 4
68273: ARRAY
68274: ST_TO_ADDR
// dist := tdist ;
68275: LD_ADDR_VAR 0 5
68279: PUSH
68280: LD_VAR 0 6
68284: ST_TO_ADDR
// end ; end ;
68285: GO 68199
68287: POP
68288: POP
// result := hex ;
68289: LD_ADDR_VAR 0 3
68293: PUSH
68294: LD_VAR 0 8
68298: ST_TO_ADDR
// end ;
68299: LD_VAR 0 3
68303: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
68304: LD_INT 0
68306: PPUSH
68307: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
68308: LD_VAR 0 1
68312: NOT
68313: PUSH
68314: LD_VAR 0 1
68318: PUSH
68319: LD_INT 21
68321: PUSH
68322: LD_INT 2
68324: PUSH
68325: EMPTY
68326: LIST
68327: LIST
68328: PUSH
68329: LD_INT 23
68331: PUSH
68332: LD_INT 2
68334: PUSH
68335: EMPTY
68336: LIST
68337: LIST
68338: PUSH
68339: EMPTY
68340: LIST
68341: LIST
68342: PPUSH
68343: CALL_OW 69
68347: IN
68348: NOT
68349: OR
68350: IFFALSE 68354
// exit ;
68352: GO 68401
// for i = 1 to 3 do
68354: LD_ADDR_VAR 0 3
68358: PUSH
68359: DOUBLE
68360: LD_INT 1
68362: DEC
68363: ST_TO_ADDR
68364: LD_INT 3
68366: PUSH
68367: FOR_TO
68368: IFFALSE 68399
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
68370: LD_VAR 0 1
68374: PPUSH
68375: CALL_OW 250
68379: PPUSH
68380: LD_VAR 0 1
68384: PPUSH
68385: CALL_OW 251
68389: PPUSH
68390: LD_INT 1
68392: PPUSH
68393: CALL_OW 453
68397: GO 68367
68399: POP
68400: POP
// end ;
68401: LD_VAR 0 2
68405: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
68406: LD_INT 0
68408: PPUSH
68409: PPUSH
68410: PPUSH
68411: PPUSH
68412: PPUSH
68413: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
68414: LD_VAR 0 1
68418: NOT
68419: PUSH
68420: LD_VAR 0 2
68424: NOT
68425: OR
68426: PUSH
68427: LD_VAR 0 1
68431: PPUSH
68432: CALL_OW 314
68436: OR
68437: IFFALSE 68441
// exit ;
68439: GO 68908
// if GetLives ( i ) < 250 then
68441: LD_VAR 0 4
68445: PPUSH
68446: CALL_OW 256
68450: PUSH
68451: LD_INT 250
68453: LESS
68454: IFFALSE 68467
// begin ComAutodestruct ( i ) ;
68456: LD_VAR 0 4
68460: PPUSH
68461: CALL 68304 0 1
// exit ;
68465: GO 68908
// end ; x := GetX ( enemy_unit ) ;
68467: LD_ADDR_VAR 0 7
68471: PUSH
68472: LD_VAR 0 2
68476: PPUSH
68477: CALL_OW 250
68481: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
68482: LD_ADDR_VAR 0 8
68486: PUSH
68487: LD_VAR 0 2
68491: PPUSH
68492: CALL_OW 251
68496: ST_TO_ADDR
// if not x or not y then
68497: LD_VAR 0 7
68501: NOT
68502: PUSH
68503: LD_VAR 0 8
68507: NOT
68508: OR
68509: IFFALSE 68513
// exit ;
68511: GO 68908
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
68513: LD_ADDR_VAR 0 6
68517: PUSH
68518: LD_VAR 0 7
68522: PPUSH
68523: LD_INT 0
68525: PPUSH
68526: LD_INT 4
68528: PPUSH
68529: CALL_OW 272
68533: PUSH
68534: LD_VAR 0 8
68538: PPUSH
68539: LD_INT 0
68541: PPUSH
68542: LD_INT 4
68544: PPUSH
68545: CALL_OW 273
68549: PUSH
68550: EMPTY
68551: LIST
68552: LIST
68553: PUSH
68554: LD_VAR 0 7
68558: PPUSH
68559: LD_INT 1
68561: PPUSH
68562: LD_INT 4
68564: PPUSH
68565: CALL_OW 272
68569: PUSH
68570: LD_VAR 0 8
68574: PPUSH
68575: LD_INT 1
68577: PPUSH
68578: LD_INT 4
68580: PPUSH
68581: CALL_OW 273
68585: PUSH
68586: EMPTY
68587: LIST
68588: LIST
68589: PUSH
68590: LD_VAR 0 7
68594: PPUSH
68595: LD_INT 2
68597: PPUSH
68598: LD_INT 4
68600: PPUSH
68601: CALL_OW 272
68605: PUSH
68606: LD_VAR 0 8
68610: PPUSH
68611: LD_INT 2
68613: PPUSH
68614: LD_INT 4
68616: PPUSH
68617: CALL_OW 273
68621: PUSH
68622: EMPTY
68623: LIST
68624: LIST
68625: PUSH
68626: LD_VAR 0 7
68630: PPUSH
68631: LD_INT 3
68633: PPUSH
68634: LD_INT 4
68636: PPUSH
68637: CALL_OW 272
68641: PUSH
68642: LD_VAR 0 8
68646: PPUSH
68647: LD_INT 3
68649: PPUSH
68650: LD_INT 4
68652: PPUSH
68653: CALL_OW 273
68657: PUSH
68658: EMPTY
68659: LIST
68660: LIST
68661: PUSH
68662: LD_VAR 0 7
68666: PPUSH
68667: LD_INT 4
68669: PPUSH
68670: LD_INT 4
68672: PPUSH
68673: CALL_OW 272
68677: PUSH
68678: LD_VAR 0 8
68682: PPUSH
68683: LD_INT 4
68685: PPUSH
68686: LD_INT 4
68688: PPUSH
68689: CALL_OW 273
68693: PUSH
68694: EMPTY
68695: LIST
68696: LIST
68697: PUSH
68698: LD_VAR 0 7
68702: PPUSH
68703: LD_INT 5
68705: PPUSH
68706: LD_INT 4
68708: PPUSH
68709: CALL_OW 272
68713: PUSH
68714: LD_VAR 0 8
68718: PPUSH
68719: LD_INT 5
68721: PPUSH
68722: LD_INT 4
68724: PPUSH
68725: CALL_OW 273
68729: PUSH
68730: EMPTY
68731: LIST
68732: LIST
68733: PUSH
68734: EMPTY
68735: LIST
68736: LIST
68737: LIST
68738: LIST
68739: LIST
68740: LIST
68741: ST_TO_ADDR
// for i = tmp downto 1 do
68742: LD_ADDR_VAR 0 4
68746: PUSH
68747: DOUBLE
68748: LD_VAR 0 6
68752: INC
68753: ST_TO_ADDR
68754: LD_INT 1
68756: PUSH
68757: FOR_DOWNTO
68758: IFFALSE 68859
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
68760: LD_VAR 0 6
68764: PUSH
68765: LD_VAR 0 4
68769: ARRAY
68770: PUSH
68771: LD_INT 1
68773: ARRAY
68774: PPUSH
68775: LD_VAR 0 6
68779: PUSH
68780: LD_VAR 0 4
68784: ARRAY
68785: PUSH
68786: LD_INT 2
68788: ARRAY
68789: PPUSH
68790: CALL_OW 488
68794: NOT
68795: PUSH
68796: LD_VAR 0 6
68800: PUSH
68801: LD_VAR 0 4
68805: ARRAY
68806: PUSH
68807: LD_INT 1
68809: ARRAY
68810: PPUSH
68811: LD_VAR 0 6
68815: PUSH
68816: LD_VAR 0 4
68820: ARRAY
68821: PUSH
68822: LD_INT 2
68824: ARRAY
68825: PPUSH
68826: CALL_OW 428
68830: PUSH
68831: LD_INT 0
68833: NONEQUAL
68834: OR
68835: IFFALSE 68857
// tmp := Delete ( tmp , i ) ;
68837: LD_ADDR_VAR 0 6
68841: PUSH
68842: LD_VAR 0 6
68846: PPUSH
68847: LD_VAR 0 4
68851: PPUSH
68852: CALL_OW 3
68856: ST_TO_ADDR
68857: GO 68757
68859: POP
68860: POP
// j := GetClosestHex ( unit , tmp ) ;
68861: LD_ADDR_VAR 0 5
68865: PUSH
68866: LD_VAR 0 1
68870: PPUSH
68871: LD_VAR 0 6
68875: PPUSH
68876: CALL 68152 0 2
68880: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
68881: LD_VAR 0 1
68885: PPUSH
68886: LD_VAR 0 5
68890: PUSH
68891: LD_INT 1
68893: ARRAY
68894: PPUSH
68895: LD_VAR 0 5
68899: PUSH
68900: LD_INT 2
68902: ARRAY
68903: PPUSH
68904: CALL_OW 111
// end ;
68908: LD_VAR 0 3
68912: RET
// export function PrepareApemanSoldier ( ) ; begin
68913: LD_INT 0
68915: PPUSH
// uc_nation := 0 ;
68916: LD_ADDR_OWVAR 21
68920: PUSH
68921: LD_INT 0
68923: ST_TO_ADDR
// hc_sex := sex_male ;
68924: LD_ADDR_OWVAR 27
68928: PUSH
68929: LD_INT 1
68931: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
68932: LD_ADDR_OWVAR 28
68936: PUSH
68937: LD_INT 15
68939: ST_TO_ADDR
// hc_gallery :=  ;
68940: LD_ADDR_OWVAR 33
68944: PUSH
68945: LD_STRING 
68947: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68948: LD_ADDR_OWVAR 31
68952: PUSH
68953: LD_INT 0
68955: PPUSH
68956: LD_INT 3
68958: PPUSH
68959: CALL_OW 12
68963: PUSH
68964: LD_INT 0
68966: PPUSH
68967: LD_INT 3
68969: PPUSH
68970: CALL_OW 12
68974: PUSH
68975: LD_INT 0
68977: PUSH
68978: LD_INT 0
68980: PUSH
68981: EMPTY
68982: LIST
68983: LIST
68984: LIST
68985: LIST
68986: ST_TO_ADDR
// end ;
68987: LD_VAR 0 1
68991: RET
// export function PrepareApemanEngineer ( ) ; begin
68992: LD_INT 0
68994: PPUSH
// uc_nation := 0 ;
68995: LD_ADDR_OWVAR 21
68999: PUSH
69000: LD_INT 0
69002: ST_TO_ADDR
// hc_sex := sex_male ;
69003: LD_ADDR_OWVAR 27
69007: PUSH
69008: LD_INT 1
69010: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
69011: LD_ADDR_OWVAR 28
69015: PUSH
69016: LD_INT 16
69018: ST_TO_ADDR
// hc_gallery :=  ;
69019: LD_ADDR_OWVAR 33
69023: PUSH
69024: LD_STRING 
69026: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
69027: LD_ADDR_OWVAR 31
69031: PUSH
69032: LD_INT 0
69034: PPUSH
69035: LD_INT 3
69037: PPUSH
69038: CALL_OW 12
69042: PUSH
69043: LD_INT 0
69045: PPUSH
69046: LD_INT 3
69048: PPUSH
69049: CALL_OW 12
69053: PUSH
69054: LD_INT 0
69056: PUSH
69057: LD_INT 0
69059: PUSH
69060: EMPTY
69061: LIST
69062: LIST
69063: LIST
69064: LIST
69065: ST_TO_ADDR
// end ;
69066: LD_VAR 0 1
69070: RET
// export function PrepareApeman ( agressivity ) ; begin
69071: LD_INT 0
69073: PPUSH
// uc_side := 0 ;
69074: LD_ADDR_OWVAR 20
69078: PUSH
69079: LD_INT 0
69081: ST_TO_ADDR
// uc_nation := 0 ;
69082: LD_ADDR_OWVAR 21
69086: PUSH
69087: LD_INT 0
69089: ST_TO_ADDR
// hc_sex := sex_male ;
69090: LD_ADDR_OWVAR 27
69094: PUSH
69095: LD_INT 1
69097: ST_TO_ADDR
// hc_class := class_apeman ;
69098: LD_ADDR_OWVAR 28
69102: PUSH
69103: LD_INT 12
69105: ST_TO_ADDR
// hc_gallery :=  ;
69106: LD_ADDR_OWVAR 33
69110: PUSH
69111: LD_STRING 
69113: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
69114: LD_ADDR_OWVAR 35
69118: PUSH
69119: LD_VAR 0 1
69123: NEG
69124: PPUSH
69125: LD_VAR 0 1
69129: PPUSH
69130: CALL_OW 12
69134: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
69135: LD_ADDR_OWVAR 31
69139: PUSH
69140: LD_INT 0
69142: PPUSH
69143: LD_INT 3
69145: PPUSH
69146: CALL_OW 12
69150: PUSH
69151: LD_INT 0
69153: PPUSH
69154: LD_INT 3
69156: PPUSH
69157: CALL_OW 12
69161: PUSH
69162: LD_INT 0
69164: PUSH
69165: LD_INT 0
69167: PUSH
69168: EMPTY
69169: LIST
69170: LIST
69171: LIST
69172: LIST
69173: ST_TO_ADDR
// end ;
69174: LD_VAR 0 2
69178: RET
// export function PrepareTiger ( agressivity ) ; begin
69179: LD_INT 0
69181: PPUSH
// uc_side := 0 ;
69182: LD_ADDR_OWVAR 20
69186: PUSH
69187: LD_INT 0
69189: ST_TO_ADDR
// uc_nation := 0 ;
69190: LD_ADDR_OWVAR 21
69194: PUSH
69195: LD_INT 0
69197: ST_TO_ADDR
// hc_class := class_tiger ;
69198: LD_ADDR_OWVAR 28
69202: PUSH
69203: LD_INT 14
69205: ST_TO_ADDR
// hc_gallery :=  ;
69206: LD_ADDR_OWVAR 33
69210: PUSH
69211: LD_STRING 
69213: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
69214: LD_ADDR_OWVAR 35
69218: PUSH
69219: LD_VAR 0 1
69223: NEG
69224: PPUSH
69225: LD_VAR 0 1
69229: PPUSH
69230: CALL_OW 12
69234: ST_TO_ADDR
// end ;
69235: LD_VAR 0 2
69239: RET
// export function PrepareEnchidna ( ) ; begin
69240: LD_INT 0
69242: PPUSH
// uc_side := 0 ;
69243: LD_ADDR_OWVAR 20
69247: PUSH
69248: LD_INT 0
69250: ST_TO_ADDR
// uc_nation := 0 ;
69251: LD_ADDR_OWVAR 21
69255: PUSH
69256: LD_INT 0
69258: ST_TO_ADDR
// hc_class := class_baggie ;
69259: LD_ADDR_OWVAR 28
69263: PUSH
69264: LD_INT 13
69266: ST_TO_ADDR
// hc_gallery :=  ;
69267: LD_ADDR_OWVAR 33
69271: PUSH
69272: LD_STRING 
69274: ST_TO_ADDR
// end ;
69275: LD_VAR 0 1
69279: RET
// export function PrepareFrog ( ) ; begin
69280: LD_INT 0
69282: PPUSH
// uc_side := 0 ;
69283: LD_ADDR_OWVAR 20
69287: PUSH
69288: LD_INT 0
69290: ST_TO_ADDR
// uc_nation := 0 ;
69291: LD_ADDR_OWVAR 21
69295: PUSH
69296: LD_INT 0
69298: ST_TO_ADDR
// hc_class := class_frog ;
69299: LD_ADDR_OWVAR 28
69303: PUSH
69304: LD_INT 19
69306: ST_TO_ADDR
// hc_gallery :=  ;
69307: LD_ADDR_OWVAR 33
69311: PUSH
69312: LD_STRING 
69314: ST_TO_ADDR
// end ;
69315: LD_VAR 0 1
69319: RET
// export function PrepareFish ( ) ; begin
69320: LD_INT 0
69322: PPUSH
// uc_side := 0 ;
69323: LD_ADDR_OWVAR 20
69327: PUSH
69328: LD_INT 0
69330: ST_TO_ADDR
// uc_nation := 0 ;
69331: LD_ADDR_OWVAR 21
69335: PUSH
69336: LD_INT 0
69338: ST_TO_ADDR
// hc_class := class_fish ;
69339: LD_ADDR_OWVAR 28
69343: PUSH
69344: LD_INT 20
69346: ST_TO_ADDR
// hc_gallery :=  ;
69347: LD_ADDR_OWVAR 33
69351: PUSH
69352: LD_STRING 
69354: ST_TO_ADDR
// end ;
69355: LD_VAR 0 1
69359: RET
// export function PrepareBird ( ) ; begin
69360: LD_INT 0
69362: PPUSH
// uc_side := 0 ;
69363: LD_ADDR_OWVAR 20
69367: PUSH
69368: LD_INT 0
69370: ST_TO_ADDR
// uc_nation := 0 ;
69371: LD_ADDR_OWVAR 21
69375: PUSH
69376: LD_INT 0
69378: ST_TO_ADDR
// hc_class := class_phororhacos ;
69379: LD_ADDR_OWVAR 28
69383: PUSH
69384: LD_INT 18
69386: ST_TO_ADDR
// hc_gallery :=  ;
69387: LD_ADDR_OWVAR 33
69391: PUSH
69392: LD_STRING 
69394: ST_TO_ADDR
// end ;
69395: LD_VAR 0 1
69399: RET
// export function PrepareHorse ( ) ; begin
69400: LD_INT 0
69402: PPUSH
// uc_side := 0 ;
69403: LD_ADDR_OWVAR 20
69407: PUSH
69408: LD_INT 0
69410: ST_TO_ADDR
// uc_nation := 0 ;
69411: LD_ADDR_OWVAR 21
69415: PUSH
69416: LD_INT 0
69418: ST_TO_ADDR
// hc_class := class_horse ;
69419: LD_ADDR_OWVAR 28
69423: PUSH
69424: LD_INT 21
69426: ST_TO_ADDR
// hc_gallery :=  ;
69427: LD_ADDR_OWVAR 33
69431: PUSH
69432: LD_STRING 
69434: ST_TO_ADDR
// end ;
69435: LD_VAR 0 1
69439: RET
// export function PrepareMastodont ( ) ; begin
69440: LD_INT 0
69442: PPUSH
// uc_side := 0 ;
69443: LD_ADDR_OWVAR 20
69447: PUSH
69448: LD_INT 0
69450: ST_TO_ADDR
// uc_nation := 0 ;
69451: LD_ADDR_OWVAR 21
69455: PUSH
69456: LD_INT 0
69458: ST_TO_ADDR
// vc_chassis := class_mastodont ;
69459: LD_ADDR_OWVAR 37
69463: PUSH
69464: LD_INT 31
69466: ST_TO_ADDR
// vc_control := control_rider ;
69467: LD_ADDR_OWVAR 38
69471: PUSH
69472: LD_INT 4
69474: ST_TO_ADDR
// end ;
69475: LD_VAR 0 1
69479: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
69480: LD_INT 0
69482: PPUSH
69483: PPUSH
69484: PPUSH
// uc_side = 0 ;
69485: LD_ADDR_OWVAR 20
69489: PUSH
69490: LD_INT 0
69492: ST_TO_ADDR
// uc_nation = 0 ;
69493: LD_ADDR_OWVAR 21
69497: PUSH
69498: LD_INT 0
69500: ST_TO_ADDR
// InitHc_All ( ) ;
69501: CALL_OW 584
// InitVc ;
69505: CALL_OW 20
// if mastodonts then
69509: LD_VAR 0 6
69513: IFFALSE 69580
// for i = 1 to mastodonts do
69515: LD_ADDR_VAR 0 11
69519: PUSH
69520: DOUBLE
69521: LD_INT 1
69523: DEC
69524: ST_TO_ADDR
69525: LD_VAR 0 6
69529: PUSH
69530: FOR_TO
69531: IFFALSE 69578
// begin vc_chassis := 31 ;
69533: LD_ADDR_OWVAR 37
69537: PUSH
69538: LD_INT 31
69540: ST_TO_ADDR
// vc_control := control_rider ;
69541: LD_ADDR_OWVAR 38
69545: PUSH
69546: LD_INT 4
69548: ST_TO_ADDR
// animal := CreateVehicle ;
69549: LD_ADDR_VAR 0 12
69553: PUSH
69554: CALL_OW 45
69558: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69559: LD_VAR 0 12
69563: PPUSH
69564: LD_VAR 0 8
69568: PPUSH
69569: LD_INT 0
69571: PPUSH
69572: CALL 71708 0 3
// end ;
69576: GO 69530
69578: POP
69579: POP
// if horses then
69580: LD_VAR 0 5
69584: IFFALSE 69651
// for i = 1 to horses do
69586: LD_ADDR_VAR 0 11
69590: PUSH
69591: DOUBLE
69592: LD_INT 1
69594: DEC
69595: ST_TO_ADDR
69596: LD_VAR 0 5
69600: PUSH
69601: FOR_TO
69602: IFFALSE 69649
// begin hc_class := 21 ;
69604: LD_ADDR_OWVAR 28
69608: PUSH
69609: LD_INT 21
69611: ST_TO_ADDR
// hc_gallery :=  ;
69612: LD_ADDR_OWVAR 33
69616: PUSH
69617: LD_STRING 
69619: ST_TO_ADDR
// animal := CreateHuman ;
69620: LD_ADDR_VAR 0 12
69624: PUSH
69625: CALL_OW 44
69629: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69630: LD_VAR 0 12
69634: PPUSH
69635: LD_VAR 0 8
69639: PPUSH
69640: LD_INT 0
69642: PPUSH
69643: CALL 71708 0 3
// end ;
69647: GO 69601
69649: POP
69650: POP
// if birds then
69651: LD_VAR 0 1
69655: IFFALSE 69722
// for i = 1 to birds do
69657: LD_ADDR_VAR 0 11
69661: PUSH
69662: DOUBLE
69663: LD_INT 1
69665: DEC
69666: ST_TO_ADDR
69667: LD_VAR 0 1
69671: PUSH
69672: FOR_TO
69673: IFFALSE 69720
// begin hc_class = 18 ;
69675: LD_ADDR_OWVAR 28
69679: PUSH
69680: LD_INT 18
69682: ST_TO_ADDR
// hc_gallery =  ;
69683: LD_ADDR_OWVAR 33
69687: PUSH
69688: LD_STRING 
69690: ST_TO_ADDR
// animal := CreateHuman ;
69691: LD_ADDR_VAR 0 12
69695: PUSH
69696: CALL_OW 44
69700: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69701: LD_VAR 0 12
69705: PPUSH
69706: LD_VAR 0 8
69710: PPUSH
69711: LD_INT 0
69713: PPUSH
69714: CALL 71708 0 3
// end ;
69718: GO 69672
69720: POP
69721: POP
// if tigers then
69722: LD_VAR 0 2
69726: IFFALSE 69810
// for i = 1 to tigers do
69728: LD_ADDR_VAR 0 11
69732: PUSH
69733: DOUBLE
69734: LD_INT 1
69736: DEC
69737: ST_TO_ADDR
69738: LD_VAR 0 2
69742: PUSH
69743: FOR_TO
69744: IFFALSE 69808
// begin hc_class = class_tiger ;
69746: LD_ADDR_OWVAR 28
69750: PUSH
69751: LD_INT 14
69753: ST_TO_ADDR
// hc_gallery =  ;
69754: LD_ADDR_OWVAR 33
69758: PUSH
69759: LD_STRING 
69761: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
69762: LD_ADDR_OWVAR 35
69766: PUSH
69767: LD_INT 7
69769: NEG
69770: PPUSH
69771: LD_INT 7
69773: PPUSH
69774: CALL_OW 12
69778: ST_TO_ADDR
// animal := CreateHuman ;
69779: LD_ADDR_VAR 0 12
69783: PUSH
69784: CALL_OW 44
69788: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69789: LD_VAR 0 12
69793: PPUSH
69794: LD_VAR 0 8
69798: PPUSH
69799: LD_INT 0
69801: PPUSH
69802: CALL 71708 0 3
// end ;
69806: GO 69743
69808: POP
69809: POP
// if apemans then
69810: LD_VAR 0 3
69814: IFFALSE 69937
// for i = 1 to apemans do
69816: LD_ADDR_VAR 0 11
69820: PUSH
69821: DOUBLE
69822: LD_INT 1
69824: DEC
69825: ST_TO_ADDR
69826: LD_VAR 0 3
69830: PUSH
69831: FOR_TO
69832: IFFALSE 69935
// begin hc_class = class_apeman ;
69834: LD_ADDR_OWVAR 28
69838: PUSH
69839: LD_INT 12
69841: ST_TO_ADDR
// hc_gallery =  ;
69842: LD_ADDR_OWVAR 33
69846: PUSH
69847: LD_STRING 
69849: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
69850: LD_ADDR_OWVAR 35
69854: PUSH
69855: LD_INT 2
69857: NEG
69858: PPUSH
69859: LD_INT 2
69861: PPUSH
69862: CALL_OW 12
69866: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
69867: LD_ADDR_OWVAR 31
69871: PUSH
69872: LD_INT 1
69874: PPUSH
69875: LD_INT 3
69877: PPUSH
69878: CALL_OW 12
69882: PUSH
69883: LD_INT 1
69885: PPUSH
69886: LD_INT 3
69888: PPUSH
69889: CALL_OW 12
69893: PUSH
69894: LD_INT 0
69896: PUSH
69897: LD_INT 0
69899: PUSH
69900: EMPTY
69901: LIST
69902: LIST
69903: LIST
69904: LIST
69905: ST_TO_ADDR
// animal := CreateHuman ;
69906: LD_ADDR_VAR 0 12
69910: PUSH
69911: CALL_OW 44
69915: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69916: LD_VAR 0 12
69920: PPUSH
69921: LD_VAR 0 8
69925: PPUSH
69926: LD_INT 0
69928: PPUSH
69929: CALL 71708 0 3
// end ;
69933: GO 69831
69935: POP
69936: POP
// if enchidnas then
69937: LD_VAR 0 4
69941: IFFALSE 70008
// for i = 1 to enchidnas do
69943: LD_ADDR_VAR 0 11
69947: PUSH
69948: DOUBLE
69949: LD_INT 1
69951: DEC
69952: ST_TO_ADDR
69953: LD_VAR 0 4
69957: PUSH
69958: FOR_TO
69959: IFFALSE 70006
// begin hc_class = 13 ;
69961: LD_ADDR_OWVAR 28
69965: PUSH
69966: LD_INT 13
69968: ST_TO_ADDR
// hc_gallery =  ;
69969: LD_ADDR_OWVAR 33
69973: PUSH
69974: LD_STRING 
69976: ST_TO_ADDR
// animal := CreateHuman ;
69977: LD_ADDR_VAR 0 12
69981: PUSH
69982: CALL_OW 44
69986: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69987: LD_VAR 0 12
69991: PPUSH
69992: LD_VAR 0 8
69996: PPUSH
69997: LD_INT 0
69999: PPUSH
70000: CALL 71708 0 3
// end ;
70004: GO 69958
70006: POP
70007: POP
// if fishes then
70008: LD_VAR 0 7
70012: IFFALSE 70079
// for i = 1 to fishes do
70014: LD_ADDR_VAR 0 11
70018: PUSH
70019: DOUBLE
70020: LD_INT 1
70022: DEC
70023: ST_TO_ADDR
70024: LD_VAR 0 7
70028: PUSH
70029: FOR_TO
70030: IFFALSE 70077
// begin hc_class = 20 ;
70032: LD_ADDR_OWVAR 28
70036: PUSH
70037: LD_INT 20
70039: ST_TO_ADDR
// hc_gallery =  ;
70040: LD_ADDR_OWVAR 33
70044: PUSH
70045: LD_STRING 
70047: ST_TO_ADDR
// animal := CreateHuman ;
70048: LD_ADDR_VAR 0 12
70052: PUSH
70053: CALL_OW 44
70057: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
70058: LD_VAR 0 12
70062: PPUSH
70063: LD_VAR 0 9
70067: PPUSH
70068: LD_INT 0
70070: PPUSH
70071: CALL 71708 0 3
// end ;
70075: GO 70029
70077: POP
70078: POP
// end ;
70079: LD_VAR 0 10
70083: RET
// export function WantHeal ( sci , unit ) ; begin
70084: LD_INT 0
70086: PPUSH
// if GetTaskList ( sci ) > 0 then
70087: LD_VAR 0 1
70091: PPUSH
70092: CALL_OW 437
70096: PUSH
70097: LD_INT 0
70099: GREATER
70100: IFFALSE 70170
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
70102: LD_VAR 0 1
70106: PPUSH
70107: CALL_OW 437
70111: PUSH
70112: LD_INT 1
70114: ARRAY
70115: PUSH
70116: LD_INT 1
70118: ARRAY
70119: PUSH
70120: LD_STRING l
70122: EQUAL
70123: PUSH
70124: LD_VAR 0 1
70128: PPUSH
70129: CALL_OW 437
70133: PUSH
70134: LD_INT 1
70136: ARRAY
70137: PUSH
70138: LD_INT 4
70140: ARRAY
70141: PUSH
70142: LD_VAR 0 2
70146: EQUAL
70147: AND
70148: IFFALSE 70160
// result := true else
70150: LD_ADDR_VAR 0 3
70154: PUSH
70155: LD_INT 1
70157: ST_TO_ADDR
70158: GO 70168
// result := false ;
70160: LD_ADDR_VAR 0 3
70164: PUSH
70165: LD_INT 0
70167: ST_TO_ADDR
// end else
70168: GO 70178
// result := false ;
70170: LD_ADDR_VAR 0 3
70174: PUSH
70175: LD_INT 0
70177: ST_TO_ADDR
// end ;
70178: LD_VAR 0 3
70182: RET
// export function HealTarget ( sci ) ; begin
70183: LD_INT 0
70185: PPUSH
// if not sci then
70186: LD_VAR 0 1
70190: NOT
70191: IFFALSE 70195
// exit ;
70193: GO 70260
// result := 0 ;
70195: LD_ADDR_VAR 0 2
70199: PUSH
70200: LD_INT 0
70202: ST_TO_ADDR
// if GetTaskList ( sci ) then
70203: LD_VAR 0 1
70207: PPUSH
70208: CALL_OW 437
70212: IFFALSE 70260
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
70214: LD_VAR 0 1
70218: PPUSH
70219: CALL_OW 437
70223: PUSH
70224: LD_INT 1
70226: ARRAY
70227: PUSH
70228: LD_INT 1
70230: ARRAY
70231: PUSH
70232: LD_STRING l
70234: EQUAL
70235: IFFALSE 70260
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
70237: LD_ADDR_VAR 0 2
70241: PUSH
70242: LD_VAR 0 1
70246: PPUSH
70247: CALL_OW 437
70251: PUSH
70252: LD_INT 1
70254: ARRAY
70255: PUSH
70256: LD_INT 4
70258: ARRAY
70259: ST_TO_ADDR
// end ;
70260: LD_VAR 0 2
70264: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
70265: LD_INT 0
70267: PPUSH
70268: PPUSH
70269: PPUSH
70270: PPUSH
// if not base_units then
70271: LD_VAR 0 1
70275: NOT
70276: IFFALSE 70280
// exit ;
70278: GO 70367
// result := false ;
70280: LD_ADDR_VAR 0 2
70284: PUSH
70285: LD_INT 0
70287: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
70288: LD_ADDR_VAR 0 5
70292: PUSH
70293: LD_VAR 0 1
70297: PPUSH
70298: LD_INT 21
70300: PUSH
70301: LD_INT 3
70303: PUSH
70304: EMPTY
70305: LIST
70306: LIST
70307: PPUSH
70308: CALL_OW 72
70312: ST_TO_ADDR
// if not tmp then
70313: LD_VAR 0 5
70317: NOT
70318: IFFALSE 70322
// exit ;
70320: GO 70367
// for i in tmp do
70322: LD_ADDR_VAR 0 3
70326: PUSH
70327: LD_VAR 0 5
70331: PUSH
70332: FOR_IN
70333: IFFALSE 70365
// begin result := EnemyInRange ( i , 22 ) ;
70335: LD_ADDR_VAR 0 2
70339: PUSH
70340: LD_VAR 0 3
70344: PPUSH
70345: LD_INT 22
70347: PPUSH
70348: CALL 67954 0 2
70352: ST_TO_ADDR
// if result then
70353: LD_VAR 0 2
70357: IFFALSE 70363
// exit ;
70359: POP
70360: POP
70361: GO 70367
// end ;
70363: GO 70332
70365: POP
70366: POP
// end ;
70367: LD_VAR 0 2
70371: RET
// export function FilterByTag ( units , tag ) ; begin
70372: LD_INT 0
70374: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
70375: LD_ADDR_VAR 0 3
70379: PUSH
70380: LD_VAR 0 1
70384: PPUSH
70385: LD_INT 120
70387: PUSH
70388: LD_VAR 0 2
70392: PUSH
70393: EMPTY
70394: LIST
70395: LIST
70396: PPUSH
70397: CALL_OW 72
70401: ST_TO_ADDR
// end ;
70402: LD_VAR 0 3
70406: RET
// export function IsDriver ( un ) ; begin
70407: LD_INT 0
70409: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
70410: LD_ADDR_VAR 0 2
70414: PUSH
70415: LD_VAR 0 1
70419: PUSH
70420: LD_INT 55
70422: PUSH
70423: EMPTY
70424: LIST
70425: PPUSH
70426: CALL_OW 69
70430: IN
70431: ST_TO_ADDR
// end ;
70432: LD_VAR 0 2
70436: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
70437: LD_INT 0
70439: PPUSH
70440: PPUSH
// list := [ ] ;
70441: LD_ADDR_VAR 0 5
70445: PUSH
70446: EMPTY
70447: ST_TO_ADDR
// case d of 0 :
70448: LD_VAR 0 3
70452: PUSH
70453: LD_INT 0
70455: DOUBLE
70456: EQUAL
70457: IFTRUE 70461
70459: GO 70594
70461: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
70462: LD_ADDR_VAR 0 5
70466: PUSH
70467: LD_VAR 0 1
70471: PUSH
70472: LD_INT 4
70474: MINUS
70475: PUSH
70476: LD_VAR 0 2
70480: PUSH
70481: LD_INT 4
70483: MINUS
70484: PUSH
70485: LD_INT 2
70487: PUSH
70488: EMPTY
70489: LIST
70490: LIST
70491: LIST
70492: PUSH
70493: LD_VAR 0 1
70497: PUSH
70498: LD_INT 3
70500: MINUS
70501: PUSH
70502: LD_VAR 0 2
70506: PUSH
70507: LD_INT 1
70509: PUSH
70510: EMPTY
70511: LIST
70512: LIST
70513: LIST
70514: PUSH
70515: LD_VAR 0 1
70519: PUSH
70520: LD_INT 4
70522: PLUS
70523: PUSH
70524: LD_VAR 0 2
70528: PUSH
70529: LD_INT 4
70531: PUSH
70532: EMPTY
70533: LIST
70534: LIST
70535: LIST
70536: PUSH
70537: LD_VAR 0 1
70541: PUSH
70542: LD_INT 3
70544: PLUS
70545: PUSH
70546: LD_VAR 0 2
70550: PUSH
70551: LD_INT 3
70553: PLUS
70554: PUSH
70555: LD_INT 5
70557: PUSH
70558: EMPTY
70559: LIST
70560: LIST
70561: LIST
70562: PUSH
70563: LD_VAR 0 1
70567: PUSH
70568: LD_VAR 0 2
70572: PUSH
70573: LD_INT 4
70575: PLUS
70576: PUSH
70577: LD_INT 0
70579: PUSH
70580: EMPTY
70581: LIST
70582: LIST
70583: LIST
70584: PUSH
70585: EMPTY
70586: LIST
70587: LIST
70588: LIST
70589: LIST
70590: LIST
70591: ST_TO_ADDR
// end ; 1 :
70592: GO 71292
70594: LD_INT 1
70596: DOUBLE
70597: EQUAL
70598: IFTRUE 70602
70600: GO 70735
70602: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
70603: LD_ADDR_VAR 0 5
70607: PUSH
70608: LD_VAR 0 1
70612: PUSH
70613: LD_VAR 0 2
70617: PUSH
70618: LD_INT 4
70620: MINUS
70621: PUSH
70622: LD_INT 3
70624: PUSH
70625: EMPTY
70626: LIST
70627: LIST
70628: LIST
70629: PUSH
70630: LD_VAR 0 1
70634: PUSH
70635: LD_INT 3
70637: MINUS
70638: PUSH
70639: LD_VAR 0 2
70643: PUSH
70644: LD_INT 3
70646: MINUS
70647: PUSH
70648: LD_INT 2
70650: PUSH
70651: EMPTY
70652: LIST
70653: LIST
70654: LIST
70655: PUSH
70656: LD_VAR 0 1
70660: PUSH
70661: LD_INT 4
70663: MINUS
70664: PUSH
70665: LD_VAR 0 2
70669: PUSH
70670: LD_INT 1
70672: PUSH
70673: EMPTY
70674: LIST
70675: LIST
70676: LIST
70677: PUSH
70678: LD_VAR 0 1
70682: PUSH
70683: LD_VAR 0 2
70687: PUSH
70688: LD_INT 3
70690: PLUS
70691: PUSH
70692: LD_INT 0
70694: PUSH
70695: EMPTY
70696: LIST
70697: LIST
70698: LIST
70699: PUSH
70700: LD_VAR 0 1
70704: PUSH
70705: LD_INT 4
70707: PLUS
70708: PUSH
70709: LD_VAR 0 2
70713: PUSH
70714: LD_INT 4
70716: PLUS
70717: PUSH
70718: LD_INT 5
70720: PUSH
70721: EMPTY
70722: LIST
70723: LIST
70724: LIST
70725: PUSH
70726: EMPTY
70727: LIST
70728: LIST
70729: LIST
70730: LIST
70731: LIST
70732: ST_TO_ADDR
// end ; 2 :
70733: GO 71292
70735: LD_INT 2
70737: DOUBLE
70738: EQUAL
70739: IFTRUE 70743
70741: GO 70872
70743: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
70744: LD_ADDR_VAR 0 5
70748: PUSH
70749: LD_VAR 0 1
70753: PUSH
70754: LD_VAR 0 2
70758: PUSH
70759: LD_INT 3
70761: MINUS
70762: PUSH
70763: LD_INT 3
70765: PUSH
70766: EMPTY
70767: LIST
70768: LIST
70769: LIST
70770: PUSH
70771: LD_VAR 0 1
70775: PUSH
70776: LD_INT 4
70778: PLUS
70779: PUSH
70780: LD_VAR 0 2
70784: PUSH
70785: LD_INT 4
70787: PUSH
70788: EMPTY
70789: LIST
70790: LIST
70791: LIST
70792: PUSH
70793: LD_VAR 0 1
70797: PUSH
70798: LD_VAR 0 2
70802: PUSH
70803: LD_INT 4
70805: PLUS
70806: PUSH
70807: LD_INT 0
70809: PUSH
70810: EMPTY
70811: LIST
70812: LIST
70813: LIST
70814: PUSH
70815: LD_VAR 0 1
70819: PUSH
70820: LD_INT 3
70822: MINUS
70823: PUSH
70824: LD_VAR 0 2
70828: PUSH
70829: LD_INT 1
70831: PUSH
70832: EMPTY
70833: LIST
70834: LIST
70835: LIST
70836: PUSH
70837: LD_VAR 0 1
70841: PUSH
70842: LD_INT 4
70844: MINUS
70845: PUSH
70846: LD_VAR 0 2
70850: PUSH
70851: LD_INT 4
70853: MINUS
70854: PUSH
70855: LD_INT 2
70857: PUSH
70858: EMPTY
70859: LIST
70860: LIST
70861: LIST
70862: PUSH
70863: EMPTY
70864: LIST
70865: LIST
70866: LIST
70867: LIST
70868: LIST
70869: ST_TO_ADDR
// end ; 3 :
70870: GO 71292
70872: LD_INT 3
70874: DOUBLE
70875: EQUAL
70876: IFTRUE 70880
70878: GO 71013
70880: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
70881: LD_ADDR_VAR 0 5
70885: PUSH
70886: LD_VAR 0 1
70890: PUSH
70891: LD_INT 3
70893: PLUS
70894: PUSH
70895: LD_VAR 0 2
70899: PUSH
70900: LD_INT 4
70902: PUSH
70903: EMPTY
70904: LIST
70905: LIST
70906: LIST
70907: PUSH
70908: LD_VAR 0 1
70912: PUSH
70913: LD_INT 4
70915: PLUS
70916: PUSH
70917: LD_VAR 0 2
70921: PUSH
70922: LD_INT 4
70924: PLUS
70925: PUSH
70926: LD_INT 5
70928: PUSH
70929: EMPTY
70930: LIST
70931: LIST
70932: LIST
70933: PUSH
70934: LD_VAR 0 1
70938: PUSH
70939: LD_INT 4
70941: MINUS
70942: PUSH
70943: LD_VAR 0 2
70947: PUSH
70948: LD_INT 1
70950: PUSH
70951: EMPTY
70952: LIST
70953: LIST
70954: LIST
70955: PUSH
70956: LD_VAR 0 1
70960: PUSH
70961: LD_VAR 0 2
70965: PUSH
70966: LD_INT 4
70968: MINUS
70969: PUSH
70970: LD_INT 3
70972: PUSH
70973: EMPTY
70974: LIST
70975: LIST
70976: LIST
70977: PUSH
70978: LD_VAR 0 1
70982: PUSH
70983: LD_INT 3
70985: MINUS
70986: PUSH
70987: LD_VAR 0 2
70991: PUSH
70992: LD_INT 3
70994: MINUS
70995: PUSH
70996: LD_INT 2
70998: PUSH
70999: EMPTY
71000: LIST
71001: LIST
71002: LIST
71003: PUSH
71004: EMPTY
71005: LIST
71006: LIST
71007: LIST
71008: LIST
71009: LIST
71010: ST_TO_ADDR
// end ; 4 :
71011: GO 71292
71013: LD_INT 4
71015: DOUBLE
71016: EQUAL
71017: IFTRUE 71021
71019: GO 71154
71021: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
71022: LD_ADDR_VAR 0 5
71026: PUSH
71027: LD_VAR 0 1
71031: PUSH
71032: LD_VAR 0 2
71036: PUSH
71037: LD_INT 4
71039: PLUS
71040: PUSH
71041: LD_INT 0
71043: PUSH
71044: EMPTY
71045: LIST
71046: LIST
71047: LIST
71048: PUSH
71049: LD_VAR 0 1
71053: PUSH
71054: LD_INT 3
71056: PLUS
71057: PUSH
71058: LD_VAR 0 2
71062: PUSH
71063: LD_INT 3
71065: PLUS
71066: PUSH
71067: LD_INT 5
71069: PUSH
71070: EMPTY
71071: LIST
71072: LIST
71073: LIST
71074: PUSH
71075: LD_VAR 0 1
71079: PUSH
71080: LD_INT 4
71082: PLUS
71083: PUSH
71084: LD_VAR 0 2
71088: PUSH
71089: LD_INT 4
71091: PUSH
71092: EMPTY
71093: LIST
71094: LIST
71095: LIST
71096: PUSH
71097: LD_VAR 0 1
71101: PUSH
71102: LD_VAR 0 2
71106: PUSH
71107: LD_INT 3
71109: MINUS
71110: PUSH
71111: LD_INT 3
71113: PUSH
71114: EMPTY
71115: LIST
71116: LIST
71117: LIST
71118: PUSH
71119: LD_VAR 0 1
71123: PUSH
71124: LD_INT 4
71126: MINUS
71127: PUSH
71128: LD_VAR 0 2
71132: PUSH
71133: LD_INT 4
71135: MINUS
71136: PUSH
71137: LD_INT 2
71139: PUSH
71140: EMPTY
71141: LIST
71142: LIST
71143: LIST
71144: PUSH
71145: EMPTY
71146: LIST
71147: LIST
71148: LIST
71149: LIST
71150: LIST
71151: ST_TO_ADDR
// end ; 5 :
71152: GO 71292
71154: LD_INT 5
71156: DOUBLE
71157: EQUAL
71158: IFTRUE 71162
71160: GO 71291
71162: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
71163: LD_ADDR_VAR 0 5
71167: PUSH
71168: LD_VAR 0 1
71172: PUSH
71173: LD_INT 4
71175: MINUS
71176: PUSH
71177: LD_VAR 0 2
71181: PUSH
71182: LD_INT 1
71184: PUSH
71185: EMPTY
71186: LIST
71187: LIST
71188: LIST
71189: PUSH
71190: LD_VAR 0 1
71194: PUSH
71195: LD_VAR 0 2
71199: PUSH
71200: LD_INT 4
71202: MINUS
71203: PUSH
71204: LD_INT 3
71206: PUSH
71207: EMPTY
71208: LIST
71209: LIST
71210: LIST
71211: PUSH
71212: LD_VAR 0 1
71216: PUSH
71217: LD_INT 4
71219: PLUS
71220: PUSH
71221: LD_VAR 0 2
71225: PUSH
71226: LD_INT 4
71228: PLUS
71229: PUSH
71230: LD_INT 5
71232: PUSH
71233: EMPTY
71234: LIST
71235: LIST
71236: LIST
71237: PUSH
71238: LD_VAR 0 1
71242: PUSH
71243: LD_INT 3
71245: PLUS
71246: PUSH
71247: LD_VAR 0 2
71251: PUSH
71252: LD_INT 4
71254: PUSH
71255: EMPTY
71256: LIST
71257: LIST
71258: LIST
71259: PUSH
71260: LD_VAR 0 1
71264: PUSH
71265: LD_VAR 0 2
71269: PUSH
71270: LD_INT 3
71272: PLUS
71273: PUSH
71274: LD_INT 0
71276: PUSH
71277: EMPTY
71278: LIST
71279: LIST
71280: LIST
71281: PUSH
71282: EMPTY
71283: LIST
71284: LIST
71285: LIST
71286: LIST
71287: LIST
71288: ST_TO_ADDR
// end ; end ;
71289: GO 71292
71291: POP
// result := list ;
71292: LD_ADDR_VAR 0 4
71296: PUSH
71297: LD_VAR 0 5
71301: ST_TO_ADDR
// end ;
71302: LD_VAR 0 4
71306: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
71307: LD_INT 0
71309: PPUSH
71310: PPUSH
71311: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
71312: LD_VAR 0 1
71316: NOT
71317: PUSH
71318: LD_VAR 0 2
71322: PUSH
71323: LD_INT 1
71325: PUSH
71326: LD_INT 2
71328: PUSH
71329: LD_INT 3
71331: PUSH
71332: LD_INT 4
71334: PUSH
71335: EMPTY
71336: LIST
71337: LIST
71338: LIST
71339: LIST
71340: IN
71341: NOT
71342: OR
71343: IFFALSE 71347
// exit ;
71345: GO 71430
// tmp := [ ] ;
71347: LD_ADDR_VAR 0 5
71351: PUSH
71352: EMPTY
71353: ST_TO_ADDR
// for i in units do
71354: LD_ADDR_VAR 0 4
71358: PUSH
71359: LD_VAR 0 1
71363: PUSH
71364: FOR_IN
71365: IFFALSE 71399
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
71367: LD_ADDR_VAR 0 5
71371: PUSH
71372: LD_VAR 0 5
71376: PPUSH
71377: LD_VAR 0 4
71381: PPUSH
71382: LD_VAR 0 2
71386: PPUSH
71387: CALL_OW 259
71391: PPUSH
71392: CALL 72791 0 2
71396: ST_TO_ADDR
71397: GO 71364
71399: POP
71400: POP
// if not tmp then
71401: LD_VAR 0 5
71405: NOT
71406: IFFALSE 71410
// exit ;
71408: GO 71430
// result := SortListByListDesc ( units , tmp ) ;
71410: LD_ADDR_VAR 0 3
71414: PUSH
71415: LD_VAR 0 1
71419: PPUSH
71420: LD_VAR 0 5
71424: PPUSH
71425: CALL_OW 77
71429: ST_TO_ADDR
// end ;
71430: LD_VAR 0 3
71434: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
71435: LD_INT 0
71437: PPUSH
71438: PPUSH
71439: PPUSH
// result := false ;
71440: LD_ADDR_VAR 0 3
71444: PUSH
71445: LD_INT 0
71447: ST_TO_ADDR
// if not building then
71448: LD_VAR 0 2
71452: NOT
71453: IFFALSE 71457
// exit ;
71455: GO 71595
// x := GetX ( building ) ;
71457: LD_ADDR_VAR 0 4
71461: PUSH
71462: LD_VAR 0 2
71466: PPUSH
71467: CALL_OW 250
71471: ST_TO_ADDR
// y := GetY ( building ) ;
71472: LD_ADDR_VAR 0 5
71476: PUSH
71477: LD_VAR 0 2
71481: PPUSH
71482: CALL_OW 251
71486: ST_TO_ADDR
// if not x or not y then
71487: LD_VAR 0 4
71491: NOT
71492: PUSH
71493: LD_VAR 0 5
71497: NOT
71498: OR
71499: IFFALSE 71503
// exit ;
71501: GO 71595
// if GetTaskList ( unit ) then
71503: LD_VAR 0 1
71507: PPUSH
71508: CALL_OW 437
71512: IFFALSE 71595
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71514: LD_STRING e
71516: PUSH
71517: LD_VAR 0 1
71521: PPUSH
71522: CALL_OW 437
71526: PUSH
71527: LD_INT 1
71529: ARRAY
71530: PUSH
71531: LD_INT 1
71533: ARRAY
71534: EQUAL
71535: PUSH
71536: LD_VAR 0 4
71540: PUSH
71541: LD_VAR 0 1
71545: PPUSH
71546: CALL_OW 437
71550: PUSH
71551: LD_INT 1
71553: ARRAY
71554: PUSH
71555: LD_INT 2
71557: ARRAY
71558: EQUAL
71559: AND
71560: PUSH
71561: LD_VAR 0 5
71565: PUSH
71566: LD_VAR 0 1
71570: PPUSH
71571: CALL_OW 437
71575: PUSH
71576: LD_INT 1
71578: ARRAY
71579: PUSH
71580: LD_INT 3
71582: ARRAY
71583: EQUAL
71584: AND
71585: IFFALSE 71595
// result := true end ;
71587: LD_ADDR_VAR 0 3
71591: PUSH
71592: LD_INT 1
71594: ST_TO_ADDR
// end ;
71595: LD_VAR 0 3
71599: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
71600: LD_INT 0
71602: PPUSH
// result := false ;
71603: LD_ADDR_VAR 0 4
71607: PUSH
71608: LD_INT 0
71610: ST_TO_ADDR
// if GetTaskList ( unit ) then
71611: LD_VAR 0 1
71615: PPUSH
71616: CALL_OW 437
71620: IFFALSE 71703
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71622: LD_STRING M
71624: PUSH
71625: LD_VAR 0 1
71629: PPUSH
71630: CALL_OW 437
71634: PUSH
71635: LD_INT 1
71637: ARRAY
71638: PUSH
71639: LD_INT 1
71641: ARRAY
71642: EQUAL
71643: PUSH
71644: LD_VAR 0 2
71648: PUSH
71649: LD_VAR 0 1
71653: PPUSH
71654: CALL_OW 437
71658: PUSH
71659: LD_INT 1
71661: ARRAY
71662: PUSH
71663: LD_INT 2
71665: ARRAY
71666: EQUAL
71667: AND
71668: PUSH
71669: LD_VAR 0 3
71673: PUSH
71674: LD_VAR 0 1
71678: PPUSH
71679: CALL_OW 437
71683: PUSH
71684: LD_INT 1
71686: ARRAY
71687: PUSH
71688: LD_INT 3
71690: ARRAY
71691: EQUAL
71692: AND
71693: IFFALSE 71703
// result := true ;
71695: LD_ADDR_VAR 0 4
71699: PUSH
71700: LD_INT 1
71702: ST_TO_ADDR
// end ; end ;
71703: LD_VAR 0 4
71707: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
71708: LD_INT 0
71710: PPUSH
71711: PPUSH
71712: PPUSH
71713: PPUSH
// if not unit or not area then
71714: LD_VAR 0 1
71718: NOT
71719: PUSH
71720: LD_VAR 0 2
71724: NOT
71725: OR
71726: IFFALSE 71730
// exit ;
71728: GO 71894
// tmp := AreaToList ( area , i ) ;
71730: LD_ADDR_VAR 0 6
71734: PUSH
71735: LD_VAR 0 2
71739: PPUSH
71740: LD_VAR 0 5
71744: PPUSH
71745: CALL_OW 517
71749: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
71750: LD_ADDR_VAR 0 5
71754: PUSH
71755: DOUBLE
71756: LD_INT 1
71758: DEC
71759: ST_TO_ADDR
71760: LD_VAR 0 6
71764: PUSH
71765: LD_INT 1
71767: ARRAY
71768: PUSH
71769: FOR_TO
71770: IFFALSE 71892
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
71772: LD_ADDR_VAR 0 7
71776: PUSH
71777: LD_VAR 0 6
71781: PUSH
71782: LD_INT 1
71784: ARRAY
71785: PUSH
71786: LD_VAR 0 5
71790: ARRAY
71791: PUSH
71792: LD_VAR 0 6
71796: PUSH
71797: LD_INT 2
71799: ARRAY
71800: PUSH
71801: LD_VAR 0 5
71805: ARRAY
71806: PUSH
71807: EMPTY
71808: LIST
71809: LIST
71810: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
71811: LD_VAR 0 7
71815: PUSH
71816: LD_INT 1
71818: ARRAY
71819: PPUSH
71820: LD_VAR 0 7
71824: PUSH
71825: LD_INT 2
71827: ARRAY
71828: PPUSH
71829: CALL_OW 428
71833: PUSH
71834: LD_INT 0
71836: EQUAL
71837: IFFALSE 71890
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
71839: LD_VAR 0 1
71843: PPUSH
71844: LD_VAR 0 7
71848: PUSH
71849: LD_INT 1
71851: ARRAY
71852: PPUSH
71853: LD_VAR 0 7
71857: PUSH
71858: LD_INT 2
71860: ARRAY
71861: PPUSH
71862: LD_VAR 0 3
71866: PPUSH
71867: CALL_OW 48
// result := IsPlaced ( unit ) ;
71871: LD_ADDR_VAR 0 4
71875: PUSH
71876: LD_VAR 0 1
71880: PPUSH
71881: CALL_OW 305
71885: ST_TO_ADDR
// exit ;
71886: POP
71887: POP
71888: GO 71894
// end ; end ;
71890: GO 71769
71892: POP
71893: POP
// end ;
71894: LD_VAR 0 4
71898: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
71899: LD_INT 0
71901: PPUSH
71902: PPUSH
71903: PPUSH
// if not side or side > 8 then
71904: LD_VAR 0 1
71908: NOT
71909: PUSH
71910: LD_VAR 0 1
71914: PUSH
71915: LD_INT 8
71917: GREATER
71918: OR
71919: IFFALSE 71923
// exit ;
71921: GO 72110
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
71923: LD_ADDR_VAR 0 4
71927: PUSH
71928: LD_INT 22
71930: PUSH
71931: LD_VAR 0 1
71935: PUSH
71936: EMPTY
71937: LIST
71938: LIST
71939: PUSH
71940: LD_INT 21
71942: PUSH
71943: LD_INT 3
71945: PUSH
71946: EMPTY
71947: LIST
71948: LIST
71949: PUSH
71950: EMPTY
71951: LIST
71952: LIST
71953: PPUSH
71954: CALL_OW 69
71958: ST_TO_ADDR
// if not tmp then
71959: LD_VAR 0 4
71963: NOT
71964: IFFALSE 71968
// exit ;
71966: GO 72110
// enable_addtolog := true ;
71968: LD_ADDR_OWVAR 81
71972: PUSH
71973: LD_INT 1
71975: ST_TO_ADDR
// AddToLog ( [ ) ;
71976: LD_STRING [
71978: PPUSH
71979: CALL_OW 561
// for i in tmp do
71983: LD_ADDR_VAR 0 3
71987: PUSH
71988: LD_VAR 0 4
71992: PUSH
71993: FOR_IN
71994: IFFALSE 72101
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
71996: LD_STRING [
71998: PUSH
71999: LD_VAR 0 3
72003: PPUSH
72004: CALL_OW 266
72008: STR
72009: PUSH
72010: LD_STRING , 
72012: STR
72013: PUSH
72014: LD_VAR 0 3
72018: PPUSH
72019: CALL_OW 250
72023: STR
72024: PUSH
72025: LD_STRING , 
72027: STR
72028: PUSH
72029: LD_VAR 0 3
72033: PPUSH
72034: CALL_OW 251
72038: STR
72039: PUSH
72040: LD_STRING , 
72042: STR
72043: PUSH
72044: LD_VAR 0 3
72048: PPUSH
72049: CALL_OW 254
72053: STR
72054: PUSH
72055: LD_STRING , 
72057: STR
72058: PUSH
72059: LD_VAR 0 3
72063: PPUSH
72064: LD_INT 1
72066: PPUSH
72067: CALL_OW 268
72071: STR
72072: PUSH
72073: LD_STRING , 
72075: STR
72076: PUSH
72077: LD_VAR 0 3
72081: PPUSH
72082: LD_INT 2
72084: PPUSH
72085: CALL_OW 268
72089: STR
72090: PUSH
72091: LD_STRING ],
72093: STR
72094: PPUSH
72095: CALL_OW 561
// end ;
72099: GO 71993
72101: POP
72102: POP
// AddToLog ( ]; ) ;
72103: LD_STRING ];
72105: PPUSH
72106: CALL_OW 561
// end ;
72110: LD_VAR 0 2
72114: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
72115: LD_INT 0
72117: PPUSH
72118: PPUSH
72119: PPUSH
72120: PPUSH
72121: PPUSH
// if not area or not rate or not max then
72122: LD_VAR 0 1
72126: NOT
72127: PUSH
72128: LD_VAR 0 2
72132: NOT
72133: OR
72134: PUSH
72135: LD_VAR 0 4
72139: NOT
72140: OR
72141: IFFALSE 72145
// exit ;
72143: GO 72334
// while 1 do
72145: LD_INT 1
72147: IFFALSE 72334
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
72149: LD_ADDR_VAR 0 9
72153: PUSH
72154: LD_VAR 0 1
72158: PPUSH
72159: LD_INT 1
72161: PPUSH
72162: CALL_OW 287
72166: PUSH
72167: LD_INT 10
72169: MUL
72170: ST_TO_ADDR
// r := rate / 10 ;
72171: LD_ADDR_VAR 0 7
72175: PUSH
72176: LD_VAR 0 2
72180: PUSH
72181: LD_INT 10
72183: DIVREAL
72184: ST_TO_ADDR
// time := 1 1$00 ;
72185: LD_ADDR_VAR 0 8
72189: PUSH
72190: LD_INT 2100
72192: ST_TO_ADDR
// if amount < min then
72193: LD_VAR 0 9
72197: PUSH
72198: LD_VAR 0 3
72202: LESS
72203: IFFALSE 72221
// r := r * 2 else
72205: LD_ADDR_VAR 0 7
72209: PUSH
72210: LD_VAR 0 7
72214: PUSH
72215: LD_INT 2
72217: MUL
72218: ST_TO_ADDR
72219: GO 72247
// if amount > max then
72221: LD_VAR 0 9
72225: PUSH
72226: LD_VAR 0 4
72230: GREATER
72231: IFFALSE 72247
// r := r / 2 ;
72233: LD_ADDR_VAR 0 7
72237: PUSH
72238: LD_VAR 0 7
72242: PUSH
72243: LD_INT 2
72245: DIVREAL
72246: ST_TO_ADDR
// time := time / r ;
72247: LD_ADDR_VAR 0 8
72251: PUSH
72252: LD_VAR 0 8
72256: PUSH
72257: LD_VAR 0 7
72261: DIVREAL
72262: ST_TO_ADDR
// if time < 0 then
72263: LD_VAR 0 8
72267: PUSH
72268: LD_INT 0
72270: LESS
72271: IFFALSE 72288
// time := time * - 1 ;
72273: LD_ADDR_VAR 0 8
72277: PUSH
72278: LD_VAR 0 8
72282: PUSH
72283: LD_INT 1
72285: NEG
72286: MUL
72287: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
72288: LD_VAR 0 8
72292: PUSH
72293: LD_INT 35
72295: PPUSH
72296: LD_INT 875
72298: PPUSH
72299: CALL_OW 12
72303: PLUS
72304: PPUSH
72305: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
72309: LD_INT 1
72311: PPUSH
72312: LD_INT 5
72314: PPUSH
72315: CALL_OW 12
72319: PPUSH
72320: LD_VAR 0 1
72324: PPUSH
72325: LD_INT 1
72327: PPUSH
72328: CALL_OW 55
// end ;
72332: GO 72145
// end ;
72334: LD_VAR 0 5
72338: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
72339: LD_INT 0
72341: PPUSH
72342: PPUSH
72343: PPUSH
72344: PPUSH
72345: PPUSH
72346: PPUSH
72347: PPUSH
72348: PPUSH
// if not turrets or not factories then
72349: LD_VAR 0 1
72353: NOT
72354: PUSH
72355: LD_VAR 0 2
72359: NOT
72360: OR
72361: IFFALSE 72365
// exit ;
72363: GO 72672
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
72365: LD_ADDR_VAR 0 10
72369: PUSH
72370: LD_INT 5
72372: PUSH
72373: LD_INT 6
72375: PUSH
72376: EMPTY
72377: LIST
72378: LIST
72379: PUSH
72380: LD_INT 2
72382: PUSH
72383: LD_INT 4
72385: PUSH
72386: EMPTY
72387: LIST
72388: LIST
72389: PUSH
72390: LD_INT 3
72392: PUSH
72393: LD_INT 5
72395: PUSH
72396: EMPTY
72397: LIST
72398: LIST
72399: PUSH
72400: EMPTY
72401: LIST
72402: LIST
72403: LIST
72404: PUSH
72405: LD_INT 24
72407: PUSH
72408: LD_INT 25
72410: PUSH
72411: EMPTY
72412: LIST
72413: LIST
72414: PUSH
72415: LD_INT 23
72417: PUSH
72418: LD_INT 27
72420: PUSH
72421: EMPTY
72422: LIST
72423: LIST
72424: PUSH
72425: EMPTY
72426: LIST
72427: LIST
72428: PUSH
72429: LD_INT 42
72431: PUSH
72432: LD_INT 43
72434: PUSH
72435: EMPTY
72436: LIST
72437: LIST
72438: PUSH
72439: LD_INT 44
72441: PUSH
72442: LD_INT 46
72444: PUSH
72445: EMPTY
72446: LIST
72447: LIST
72448: PUSH
72449: LD_INT 45
72451: PUSH
72452: LD_INT 47
72454: PUSH
72455: EMPTY
72456: LIST
72457: LIST
72458: PUSH
72459: EMPTY
72460: LIST
72461: LIST
72462: LIST
72463: PUSH
72464: EMPTY
72465: LIST
72466: LIST
72467: LIST
72468: ST_TO_ADDR
// result := [ ] ;
72469: LD_ADDR_VAR 0 3
72473: PUSH
72474: EMPTY
72475: ST_TO_ADDR
// for i in turrets do
72476: LD_ADDR_VAR 0 4
72480: PUSH
72481: LD_VAR 0 1
72485: PUSH
72486: FOR_IN
72487: IFFALSE 72670
// begin nat := GetNation ( i ) ;
72489: LD_ADDR_VAR 0 7
72493: PUSH
72494: LD_VAR 0 4
72498: PPUSH
72499: CALL_OW 248
72503: ST_TO_ADDR
// weapon := 0 ;
72504: LD_ADDR_VAR 0 8
72508: PUSH
72509: LD_INT 0
72511: ST_TO_ADDR
// if not nat then
72512: LD_VAR 0 7
72516: NOT
72517: IFFALSE 72521
// continue ;
72519: GO 72486
// for j in list [ nat ] do
72521: LD_ADDR_VAR 0 5
72525: PUSH
72526: LD_VAR 0 10
72530: PUSH
72531: LD_VAR 0 7
72535: ARRAY
72536: PUSH
72537: FOR_IN
72538: IFFALSE 72579
// if GetBWeapon ( i ) = j [ 1 ] then
72540: LD_VAR 0 4
72544: PPUSH
72545: CALL_OW 269
72549: PUSH
72550: LD_VAR 0 5
72554: PUSH
72555: LD_INT 1
72557: ARRAY
72558: EQUAL
72559: IFFALSE 72577
// begin weapon := j [ 2 ] ;
72561: LD_ADDR_VAR 0 8
72565: PUSH
72566: LD_VAR 0 5
72570: PUSH
72571: LD_INT 2
72573: ARRAY
72574: ST_TO_ADDR
// break ;
72575: GO 72579
// end ;
72577: GO 72537
72579: POP
72580: POP
// if not weapon then
72581: LD_VAR 0 8
72585: NOT
72586: IFFALSE 72590
// continue ;
72588: GO 72486
// for k in factories do
72590: LD_ADDR_VAR 0 6
72594: PUSH
72595: LD_VAR 0 2
72599: PUSH
72600: FOR_IN
72601: IFFALSE 72666
// begin weapons := AvailableWeaponList ( k ) ;
72603: LD_ADDR_VAR 0 9
72607: PUSH
72608: LD_VAR 0 6
72612: PPUSH
72613: CALL_OW 478
72617: ST_TO_ADDR
// if not weapons then
72618: LD_VAR 0 9
72622: NOT
72623: IFFALSE 72627
// continue ;
72625: GO 72600
// if weapon in weapons then
72627: LD_VAR 0 8
72631: PUSH
72632: LD_VAR 0 9
72636: IN
72637: IFFALSE 72664
// begin result := [ i , weapon ] ;
72639: LD_ADDR_VAR 0 3
72643: PUSH
72644: LD_VAR 0 4
72648: PUSH
72649: LD_VAR 0 8
72653: PUSH
72654: EMPTY
72655: LIST
72656: LIST
72657: ST_TO_ADDR
// exit ;
72658: POP
72659: POP
72660: POP
72661: POP
72662: GO 72672
// end ; end ;
72664: GO 72600
72666: POP
72667: POP
// end ;
72668: GO 72486
72670: POP
72671: POP
// end ;
72672: LD_VAR 0 3
72676: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
72677: LD_INT 0
72679: PPUSH
// if not side or side > 8 then
72680: LD_VAR 0 3
72684: NOT
72685: PUSH
72686: LD_VAR 0 3
72690: PUSH
72691: LD_INT 8
72693: GREATER
72694: OR
72695: IFFALSE 72699
// exit ;
72697: GO 72758
// if not range then
72699: LD_VAR 0 4
72703: NOT
72704: IFFALSE 72715
// range := - 12 ;
72706: LD_ADDR_VAR 0 4
72710: PUSH
72711: LD_INT 12
72713: NEG
72714: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
72715: LD_VAR 0 1
72719: PPUSH
72720: LD_VAR 0 2
72724: PPUSH
72725: LD_VAR 0 3
72729: PPUSH
72730: LD_VAR 0 4
72734: PPUSH
72735: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
72739: LD_VAR 0 1
72743: PPUSH
72744: LD_VAR 0 2
72748: PPUSH
72749: LD_VAR 0 3
72753: PPUSH
72754: CALL_OW 331
// end ;
72758: LD_VAR 0 5
72762: RET
// export function Video ( mode ) ; begin
72763: LD_INT 0
72765: PPUSH
// ingame_video = mode ;
72766: LD_ADDR_OWVAR 52
72770: PUSH
72771: LD_VAR 0 1
72775: ST_TO_ADDR
// interface_hidden = mode ;
72776: LD_ADDR_OWVAR 54
72780: PUSH
72781: LD_VAR 0 1
72785: ST_TO_ADDR
// end ;
72786: LD_VAR 0 2
72790: RET
// export function Join ( array , element ) ; begin
72791: LD_INT 0
72793: PPUSH
// result := Replace ( array , array + 1 , element ) ;
72794: LD_ADDR_VAR 0 3
72798: PUSH
72799: LD_VAR 0 1
72803: PPUSH
72804: LD_VAR 0 1
72808: PUSH
72809: LD_INT 1
72811: PLUS
72812: PPUSH
72813: LD_VAR 0 2
72817: PPUSH
72818: CALL_OW 1
72822: ST_TO_ADDR
// end ;
72823: LD_VAR 0 3
72827: RET
// export function JoinUnion ( array , element ) ; begin
72828: LD_INT 0
72830: PPUSH
// result := array union element ;
72831: LD_ADDR_VAR 0 3
72835: PUSH
72836: LD_VAR 0 1
72840: PUSH
72841: LD_VAR 0 2
72845: UNION
72846: ST_TO_ADDR
// end ;
72847: LD_VAR 0 3
72851: RET
// export function GetBehemoths ( side ) ; begin
72852: LD_INT 0
72854: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
72855: LD_ADDR_VAR 0 2
72859: PUSH
72860: LD_INT 22
72862: PUSH
72863: LD_VAR 0 1
72867: PUSH
72868: EMPTY
72869: LIST
72870: LIST
72871: PUSH
72872: LD_INT 31
72874: PUSH
72875: LD_INT 25
72877: PUSH
72878: EMPTY
72879: LIST
72880: LIST
72881: PUSH
72882: EMPTY
72883: LIST
72884: LIST
72885: PPUSH
72886: CALL_OW 69
72890: ST_TO_ADDR
// end ;
72891: LD_VAR 0 2
72895: RET
// export function Shuffle ( array ) ; var i , index ; begin
72896: LD_INT 0
72898: PPUSH
72899: PPUSH
72900: PPUSH
// result := [ ] ;
72901: LD_ADDR_VAR 0 2
72905: PUSH
72906: EMPTY
72907: ST_TO_ADDR
// if not array then
72908: LD_VAR 0 1
72912: NOT
72913: IFFALSE 72917
// exit ;
72915: GO 73016
// Randomize ;
72917: CALL_OW 10
// for i = array downto 1 do
72921: LD_ADDR_VAR 0 3
72925: PUSH
72926: DOUBLE
72927: LD_VAR 0 1
72931: INC
72932: ST_TO_ADDR
72933: LD_INT 1
72935: PUSH
72936: FOR_DOWNTO
72937: IFFALSE 73014
// begin index := rand ( 1 , array ) ;
72939: LD_ADDR_VAR 0 4
72943: PUSH
72944: LD_INT 1
72946: PPUSH
72947: LD_VAR 0 1
72951: PPUSH
72952: CALL_OW 12
72956: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
72957: LD_ADDR_VAR 0 2
72961: PUSH
72962: LD_VAR 0 2
72966: PPUSH
72967: LD_VAR 0 2
72971: PUSH
72972: LD_INT 1
72974: PLUS
72975: PPUSH
72976: LD_VAR 0 1
72980: PUSH
72981: LD_VAR 0 4
72985: ARRAY
72986: PPUSH
72987: CALL_OW 2
72991: ST_TO_ADDR
// array := Delete ( array , index ) ;
72992: LD_ADDR_VAR 0 1
72996: PUSH
72997: LD_VAR 0 1
73001: PPUSH
73002: LD_VAR 0 4
73006: PPUSH
73007: CALL_OW 3
73011: ST_TO_ADDR
// end ;
73012: GO 72936
73014: POP
73015: POP
// end ;
73016: LD_VAR 0 2
73020: RET
// export function GetBaseMaterials ( base ) ; begin
73021: LD_INT 0
73023: PPUSH
// result := [ 0 , 0 , 0 ] ;
73024: LD_ADDR_VAR 0 2
73028: PUSH
73029: LD_INT 0
73031: PUSH
73032: LD_INT 0
73034: PUSH
73035: LD_INT 0
73037: PUSH
73038: EMPTY
73039: LIST
73040: LIST
73041: LIST
73042: ST_TO_ADDR
// if not base then
73043: LD_VAR 0 1
73047: NOT
73048: IFFALSE 73052
// exit ;
73050: GO 73101
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
73052: LD_ADDR_VAR 0 2
73056: PUSH
73057: LD_VAR 0 1
73061: PPUSH
73062: LD_INT 1
73064: PPUSH
73065: CALL_OW 275
73069: PUSH
73070: LD_VAR 0 1
73074: PPUSH
73075: LD_INT 2
73077: PPUSH
73078: CALL_OW 275
73082: PUSH
73083: LD_VAR 0 1
73087: PPUSH
73088: LD_INT 3
73090: PPUSH
73091: CALL_OW 275
73095: PUSH
73096: EMPTY
73097: LIST
73098: LIST
73099: LIST
73100: ST_TO_ADDR
// end ;
73101: LD_VAR 0 2
73105: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
73106: LD_INT 0
73108: PPUSH
73109: PPUSH
// result := array ;
73110: LD_ADDR_VAR 0 3
73114: PUSH
73115: LD_VAR 0 1
73119: ST_TO_ADDR
// if size >= result then
73120: LD_VAR 0 2
73124: PUSH
73125: LD_VAR 0 3
73129: GREATEREQUAL
73130: IFFALSE 73134
// exit ;
73132: GO 73184
// if size then
73134: LD_VAR 0 2
73138: IFFALSE 73184
// for i := array downto size do
73140: LD_ADDR_VAR 0 4
73144: PUSH
73145: DOUBLE
73146: LD_VAR 0 1
73150: INC
73151: ST_TO_ADDR
73152: LD_VAR 0 2
73156: PUSH
73157: FOR_DOWNTO
73158: IFFALSE 73182
// result := Delete ( result , result ) ;
73160: LD_ADDR_VAR 0 3
73164: PUSH
73165: LD_VAR 0 3
73169: PPUSH
73170: LD_VAR 0 3
73174: PPUSH
73175: CALL_OW 3
73179: ST_TO_ADDR
73180: GO 73157
73182: POP
73183: POP
// end ;
73184: LD_VAR 0 3
73188: RET
// export function ComExit ( unit ) ; var tmp ; begin
73189: LD_INT 0
73191: PPUSH
73192: PPUSH
// if not IsInUnit ( unit ) then
73193: LD_VAR 0 1
73197: PPUSH
73198: CALL_OW 310
73202: NOT
73203: IFFALSE 73207
// exit ;
73205: GO 73267
// tmp := IsInUnit ( unit ) ;
73207: LD_ADDR_VAR 0 3
73211: PUSH
73212: LD_VAR 0 1
73216: PPUSH
73217: CALL_OW 310
73221: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
73222: LD_VAR 0 3
73226: PPUSH
73227: CALL_OW 247
73231: PUSH
73232: LD_INT 2
73234: EQUAL
73235: IFFALSE 73248
// ComExitVehicle ( unit ) else
73237: LD_VAR 0 1
73241: PPUSH
73242: CALL_OW 121
73246: GO 73257
// ComExitBuilding ( unit ) ;
73248: LD_VAR 0 1
73252: PPUSH
73253: CALL_OW 122
// result := tmp ;
73257: LD_ADDR_VAR 0 2
73261: PUSH
73262: LD_VAR 0 3
73266: ST_TO_ADDR
// end ;
73267: LD_VAR 0 2
73271: RET
// export function ComExitAll ( units ) ; var i ; begin
73272: LD_INT 0
73274: PPUSH
73275: PPUSH
// if not units then
73276: LD_VAR 0 1
73280: NOT
73281: IFFALSE 73285
// exit ;
73283: GO 73311
// for i in units do
73285: LD_ADDR_VAR 0 3
73289: PUSH
73290: LD_VAR 0 1
73294: PUSH
73295: FOR_IN
73296: IFFALSE 73309
// ComExit ( i ) ;
73298: LD_VAR 0 3
73302: PPUSH
73303: CALL 73189 0 1
73307: GO 73295
73309: POP
73310: POP
// end ;
73311: LD_VAR 0 2
73315: RET
// export function ResetHc ; begin
73316: LD_INT 0
73318: PPUSH
// InitHc ;
73319: CALL_OW 19
// hc_importance := 0 ;
73323: LD_ADDR_OWVAR 32
73327: PUSH
73328: LD_INT 0
73330: ST_TO_ADDR
// end ;
73331: LD_VAR 0 1
73335: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
73336: LD_INT 0
73338: PPUSH
73339: PPUSH
73340: PPUSH
// _x := ( x1 + x2 ) div 2 ;
73341: LD_ADDR_VAR 0 6
73345: PUSH
73346: LD_VAR 0 1
73350: PUSH
73351: LD_VAR 0 3
73355: PLUS
73356: PUSH
73357: LD_INT 2
73359: DIV
73360: ST_TO_ADDR
// if _x < 0 then
73361: LD_VAR 0 6
73365: PUSH
73366: LD_INT 0
73368: LESS
73369: IFFALSE 73386
// _x := _x * - 1 ;
73371: LD_ADDR_VAR 0 6
73375: PUSH
73376: LD_VAR 0 6
73380: PUSH
73381: LD_INT 1
73383: NEG
73384: MUL
73385: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
73386: LD_ADDR_VAR 0 7
73390: PUSH
73391: LD_VAR 0 2
73395: PUSH
73396: LD_VAR 0 4
73400: PLUS
73401: PUSH
73402: LD_INT 2
73404: DIV
73405: ST_TO_ADDR
// if _y < 0 then
73406: LD_VAR 0 7
73410: PUSH
73411: LD_INT 0
73413: LESS
73414: IFFALSE 73431
// _y := _y * - 1 ;
73416: LD_ADDR_VAR 0 7
73420: PUSH
73421: LD_VAR 0 7
73425: PUSH
73426: LD_INT 1
73428: NEG
73429: MUL
73430: ST_TO_ADDR
// result := [ _x , _y ] ;
73431: LD_ADDR_VAR 0 5
73435: PUSH
73436: LD_VAR 0 6
73440: PUSH
73441: LD_VAR 0 7
73445: PUSH
73446: EMPTY
73447: LIST
73448: LIST
73449: ST_TO_ADDR
// end ;
73450: LD_VAR 0 5
73454: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
73455: LD_INT 0
73457: PPUSH
73458: PPUSH
73459: PPUSH
73460: PPUSH
// task := GetTaskList ( unit ) ;
73461: LD_ADDR_VAR 0 7
73465: PUSH
73466: LD_VAR 0 1
73470: PPUSH
73471: CALL_OW 437
73475: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
73476: LD_VAR 0 7
73480: NOT
73481: PUSH
73482: LD_VAR 0 1
73486: PPUSH
73487: LD_VAR 0 2
73491: PPUSH
73492: CALL_OW 308
73496: NOT
73497: AND
73498: IFFALSE 73502
// exit ;
73500: GO 73620
// if IsInArea ( unit , area ) then
73502: LD_VAR 0 1
73506: PPUSH
73507: LD_VAR 0 2
73511: PPUSH
73512: CALL_OW 308
73516: IFFALSE 73534
// begin ComMoveToArea ( unit , goAway ) ;
73518: LD_VAR 0 1
73522: PPUSH
73523: LD_VAR 0 3
73527: PPUSH
73528: CALL_OW 113
// exit ;
73532: GO 73620
// end ; if task [ 1 ] [ 1 ] <> M then
73534: LD_VAR 0 7
73538: PUSH
73539: LD_INT 1
73541: ARRAY
73542: PUSH
73543: LD_INT 1
73545: ARRAY
73546: PUSH
73547: LD_STRING M
73549: NONEQUAL
73550: IFFALSE 73554
// exit ;
73552: GO 73620
// x := task [ 1 ] [ 2 ] ;
73554: LD_ADDR_VAR 0 5
73558: PUSH
73559: LD_VAR 0 7
73563: PUSH
73564: LD_INT 1
73566: ARRAY
73567: PUSH
73568: LD_INT 2
73570: ARRAY
73571: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
73572: LD_ADDR_VAR 0 6
73576: PUSH
73577: LD_VAR 0 7
73581: PUSH
73582: LD_INT 1
73584: ARRAY
73585: PUSH
73586: LD_INT 3
73588: ARRAY
73589: ST_TO_ADDR
// if InArea ( x , y , area ) then
73590: LD_VAR 0 5
73594: PPUSH
73595: LD_VAR 0 6
73599: PPUSH
73600: LD_VAR 0 2
73604: PPUSH
73605: CALL_OW 309
73609: IFFALSE 73620
// ComStop ( unit ) ;
73611: LD_VAR 0 1
73615: PPUSH
73616: CALL_OW 141
// end ;
73620: LD_VAR 0 4
73624: RET
// export function Abs ( value ) ; begin
73625: LD_INT 0
73627: PPUSH
// result := value ;
73628: LD_ADDR_VAR 0 2
73632: PUSH
73633: LD_VAR 0 1
73637: ST_TO_ADDR
// if value < 0 then
73638: LD_VAR 0 1
73642: PUSH
73643: LD_INT 0
73645: LESS
73646: IFFALSE 73663
// result := value * - 1 ;
73648: LD_ADDR_VAR 0 2
73652: PUSH
73653: LD_VAR 0 1
73657: PUSH
73658: LD_INT 1
73660: NEG
73661: MUL
73662: ST_TO_ADDR
// end ;
73663: LD_VAR 0 2
73667: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
73668: LD_INT 0
73670: PPUSH
73671: PPUSH
73672: PPUSH
73673: PPUSH
73674: PPUSH
73675: PPUSH
73676: PPUSH
73677: PPUSH
// if not unit or not building then
73678: LD_VAR 0 1
73682: NOT
73683: PUSH
73684: LD_VAR 0 2
73688: NOT
73689: OR
73690: IFFALSE 73694
// exit ;
73692: GO 73920
// x := GetX ( building ) ;
73694: LD_ADDR_VAR 0 4
73698: PUSH
73699: LD_VAR 0 2
73703: PPUSH
73704: CALL_OW 250
73708: ST_TO_ADDR
// y := GetY ( building ) ;
73709: LD_ADDR_VAR 0 6
73713: PUSH
73714: LD_VAR 0 2
73718: PPUSH
73719: CALL_OW 251
73723: ST_TO_ADDR
// d := GetDir ( building ) ;
73724: LD_ADDR_VAR 0 8
73728: PUSH
73729: LD_VAR 0 2
73733: PPUSH
73734: CALL_OW 254
73738: ST_TO_ADDR
// r := 4 ;
73739: LD_ADDR_VAR 0 9
73743: PUSH
73744: LD_INT 4
73746: ST_TO_ADDR
// for i := 1 to 5 do
73747: LD_ADDR_VAR 0 10
73751: PUSH
73752: DOUBLE
73753: LD_INT 1
73755: DEC
73756: ST_TO_ADDR
73757: LD_INT 5
73759: PUSH
73760: FOR_TO
73761: IFFALSE 73918
// begin _x := ShiftX ( x , d , r + i ) ;
73763: LD_ADDR_VAR 0 5
73767: PUSH
73768: LD_VAR 0 4
73772: PPUSH
73773: LD_VAR 0 8
73777: PPUSH
73778: LD_VAR 0 9
73782: PUSH
73783: LD_VAR 0 10
73787: PLUS
73788: PPUSH
73789: CALL_OW 272
73793: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
73794: LD_ADDR_VAR 0 7
73798: PUSH
73799: LD_VAR 0 6
73803: PPUSH
73804: LD_VAR 0 8
73808: PPUSH
73809: LD_VAR 0 9
73813: PUSH
73814: LD_VAR 0 10
73818: PLUS
73819: PPUSH
73820: CALL_OW 273
73824: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
73825: LD_VAR 0 5
73829: PPUSH
73830: LD_VAR 0 7
73834: PPUSH
73835: CALL_OW 488
73839: PUSH
73840: LD_VAR 0 5
73844: PPUSH
73845: LD_VAR 0 7
73849: PPUSH
73850: CALL_OW 428
73854: PPUSH
73855: CALL_OW 247
73859: PUSH
73860: LD_INT 3
73862: PUSH
73863: LD_INT 2
73865: PUSH
73866: EMPTY
73867: LIST
73868: LIST
73869: IN
73870: NOT
73871: AND
73872: IFFALSE 73916
// begin ComMoveXY ( unit , _x , _y ) ;
73874: LD_VAR 0 1
73878: PPUSH
73879: LD_VAR 0 5
73883: PPUSH
73884: LD_VAR 0 7
73888: PPUSH
73889: CALL_OW 111
// result := [ _x , _y ] ;
73893: LD_ADDR_VAR 0 3
73897: PUSH
73898: LD_VAR 0 5
73902: PUSH
73903: LD_VAR 0 7
73907: PUSH
73908: EMPTY
73909: LIST
73910: LIST
73911: ST_TO_ADDR
// exit ;
73912: POP
73913: POP
73914: GO 73920
// end ; end ;
73916: GO 73760
73918: POP
73919: POP
// end ;
73920: LD_VAR 0 3
73924: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
73925: LD_INT 0
73927: PPUSH
73928: PPUSH
73929: PPUSH
// result := 0 ;
73930: LD_ADDR_VAR 0 3
73934: PUSH
73935: LD_INT 0
73937: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
73938: LD_VAR 0 1
73942: PUSH
73943: LD_INT 0
73945: LESS
73946: PUSH
73947: LD_VAR 0 1
73951: PUSH
73952: LD_INT 8
73954: GREATER
73955: OR
73956: PUSH
73957: LD_VAR 0 2
73961: PUSH
73962: LD_INT 0
73964: LESS
73965: OR
73966: PUSH
73967: LD_VAR 0 2
73971: PUSH
73972: LD_INT 8
73974: GREATER
73975: OR
73976: IFFALSE 73980
// exit ;
73978: GO 74055
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
73980: LD_ADDR_VAR 0 4
73984: PUSH
73985: LD_INT 22
73987: PUSH
73988: LD_VAR 0 2
73992: PUSH
73993: EMPTY
73994: LIST
73995: LIST
73996: PPUSH
73997: CALL_OW 69
74001: PUSH
74002: FOR_IN
74003: IFFALSE 74053
// begin un := UnitShoot ( i ) ;
74005: LD_ADDR_VAR 0 5
74009: PUSH
74010: LD_VAR 0 4
74014: PPUSH
74015: CALL_OW 504
74019: ST_TO_ADDR
// if GetSide ( un ) = side1 then
74020: LD_VAR 0 5
74024: PPUSH
74025: CALL_OW 255
74029: PUSH
74030: LD_VAR 0 1
74034: EQUAL
74035: IFFALSE 74051
// begin result := un ;
74037: LD_ADDR_VAR 0 3
74041: PUSH
74042: LD_VAR 0 5
74046: ST_TO_ADDR
// exit ;
74047: POP
74048: POP
74049: GO 74055
// end ; end ;
74051: GO 74002
74053: POP
74054: POP
// end ;
74055: LD_VAR 0 3
74059: RET
// export function GetCargoBay ( units ) ; begin
74060: LD_INT 0
74062: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
74063: LD_ADDR_VAR 0 2
74067: PUSH
74068: LD_VAR 0 1
74072: PPUSH
74073: LD_INT 2
74075: PUSH
74076: LD_INT 34
74078: PUSH
74079: LD_INT 12
74081: PUSH
74082: EMPTY
74083: LIST
74084: LIST
74085: PUSH
74086: LD_INT 34
74088: PUSH
74089: LD_INT 51
74091: PUSH
74092: EMPTY
74093: LIST
74094: LIST
74095: PUSH
74096: LD_INT 34
74098: PUSH
74099: LD_INT 32
74101: PUSH
74102: EMPTY
74103: LIST
74104: LIST
74105: PUSH
74106: LD_INT 34
74108: PUSH
74109: LD_INT 89
74111: PUSH
74112: EMPTY
74113: LIST
74114: LIST
74115: PUSH
74116: EMPTY
74117: LIST
74118: LIST
74119: LIST
74120: LIST
74121: LIST
74122: PPUSH
74123: CALL_OW 72
74127: ST_TO_ADDR
// end ;
74128: LD_VAR 0 2
74132: RET
// export function Negate ( value ) ; begin
74133: LD_INT 0
74135: PPUSH
// result := not value ;
74136: LD_ADDR_VAR 0 2
74140: PUSH
74141: LD_VAR 0 1
74145: NOT
74146: ST_TO_ADDR
// end ;
74147: LD_VAR 0 2
74151: RET
// export function Inc ( value ) ; begin
74152: LD_INT 0
74154: PPUSH
// result := value + 1 ;
74155: LD_ADDR_VAR 0 2
74159: PUSH
74160: LD_VAR 0 1
74164: PUSH
74165: LD_INT 1
74167: PLUS
74168: ST_TO_ADDR
// end ;
74169: LD_VAR 0 2
74173: RET
// export function Dec ( value ) ; begin
74174: LD_INT 0
74176: PPUSH
// result := value - 1 ;
74177: LD_ADDR_VAR 0 2
74181: PUSH
74182: LD_VAR 0 1
74186: PUSH
74187: LD_INT 1
74189: MINUS
74190: ST_TO_ADDR
// end ;
74191: LD_VAR 0 2
74195: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
74196: LD_INT 0
74198: PPUSH
74199: PPUSH
74200: PPUSH
74201: PPUSH
74202: PPUSH
74203: PPUSH
74204: PPUSH
74205: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
74206: LD_VAR 0 1
74210: PPUSH
74211: LD_VAR 0 2
74215: PPUSH
74216: CALL_OW 488
74220: NOT
74221: PUSH
74222: LD_VAR 0 3
74226: PPUSH
74227: LD_VAR 0 4
74231: PPUSH
74232: CALL_OW 488
74236: NOT
74237: OR
74238: IFFALSE 74251
// begin result := - 1 ;
74240: LD_ADDR_VAR 0 5
74244: PUSH
74245: LD_INT 1
74247: NEG
74248: ST_TO_ADDR
// exit ;
74249: GO 74486
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
74251: LD_ADDR_VAR 0 12
74255: PUSH
74256: LD_VAR 0 1
74260: PPUSH
74261: LD_VAR 0 2
74265: PPUSH
74266: LD_VAR 0 3
74270: PPUSH
74271: LD_VAR 0 4
74275: PPUSH
74276: CALL 73336 0 4
74280: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
74281: LD_ADDR_VAR 0 11
74285: PUSH
74286: LD_VAR 0 1
74290: PPUSH
74291: LD_VAR 0 2
74295: PPUSH
74296: LD_VAR 0 12
74300: PUSH
74301: LD_INT 1
74303: ARRAY
74304: PPUSH
74305: LD_VAR 0 12
74309: PUSH
74310: LD_INT 2
74312: ARRAY
74313: PPUSH
74314: CALL_OW 298
74318: ST_TO_ADDR
// distance := 9999 ;
74319: LD_ADDR_VAR 0 10
74323: PUSH
74324: LD_INT 9999
74326: ST_TO_ADDR
// for i := 0 to 5 do
74327: LD_ADDR_VAR 0 6
74331: PUSH
74332: DOUBLE
74333: LD_INT 0
74335: DEC
74336: ST_TO_ADDR
74337: LD_INT 5
74339: PUSH
74340: FOR_TO
74341: IFFALSE 74484
// begin _x := ShiftX ( x1 , i , centerDist ) ;
74343: LD_ADDR_VAR 0 7
74347: PUSH
74348: LD_VAR 0 1
74352: PPUSH
74353: LD_VAR 0 6
74357: PPUSH
74358: LD_VAR 0 11
74362: PPUSH
74363: CALL_OW 272
74367: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
74368: LD_ADDR_VAR 0 8
74372: PUSH
74373: LD_VAR 0 2
74377: PPUSH
74378: LD_VAR 0 6
74382: PPUSH
74383: LD_VAR 0 11
74387: PPUSH
74388: CALL_OW 273
74392: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
74393: LD_VAR 0 7
74397: PPUSH
74398: LD_VAR 0 8
74402: PPUSH
74403: CALL_OW 488
74407: NOT
74408: IFFALSE 74412
// continue ;
74410: GO 74340
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
74412: LD_ADDR_VAR 0 9
74416: PUSH
74417: LD_VAR 0 12
74421: PUSH
74422: LD_INT 1
74424: ARRAY
74425: PPUSH
74426: LD_VAR 0 12
74430: PUSH
74431: LD_INT 2
74433: ARRAY
74434: PPUSH
74435: LD_VAR 0 7
74439: PPUSH
74440: LD_VAR 0 8
74444: PPUSH
74445: CALL_OW 298
74449: ST_TO_ADDR
// if tmp < distance then
74450: LD_VAR 0 9
74454: PUSH
74455: LD_VAR 0 10
74459: LESS
74460: IFFALSE 74482
// begin result := i ;
74462: LD_ADDR_VAR 0 5
74466: PUSH
74467: LD_VAR 0 6
74471: ST_TO_ADDR
// distance := tmp ;
74472: LD_ADDR_VAR 0 10
74476: PUSH
74477: LD_VAR 0 9
74481: ST_TO_ADDR
// end ; end ;
74482: GO 74340
74484: POP
74485: POP
// end ;
74486: LD_VAR 0 5
74490: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74491: LD_INT 0
74493: PPUSH
74494: PPUSH
// if not driver or not IsInUnit ( driver ) then
74495: LD_VAR 0 1
74499: NOT
74500: PUSH
74501: LD_VAR 0 1
74505: PPUSH
74506: CALL_OW 310
74510: NOT
74511: OR
74512: IFFALSE 74516
// exit ;
74514: GO 74606
// vehicle := IsInUnit ( driver ) ;
74516: LD_ADDR_VAR 0 3
74520: PUSH
74521: LD_VAR 0 1
74525: PPUSH
74526: CALL_OW 310
74530: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74531: LD_VAR 0 1
74535: PPUSH
74536: LD_STRING \
74538: PUSH
74539: LD_INT 0
74541: PUSH
74542: LD_INT 0
74544: PUSH
74545: LD_INT 0
74547: PUSH
74548: LD_INT 0
74550: PUSH
74551: LD_INT 0
74553: PUSH
74554: LD_INT 0
74556: PUSH
74557: EMPTY
74558: LIST
74559: LIST
74560: LIST
74561: LIST
74562: LIST
74563: LIST
74564: LIST
74565: PUSH
74566: LD_STRING E
74568: PUSH
74569: LD_INT 0
74571: PUSH
74572: LD_INT 0
74574: PUSH
74575: LD_VAR 0 3
74579: PUSH
74580: LD_INT 0
74582: PUSH
74583: LD_INT 0
74585: PUSH
74586: LD_INT 0
74588: PUSH
74589: EMPTY
74590: LIST
74591: LIST
74592: LIST
74593: LIST
74594: LIST
74595: LIST
74596: LIST
74597: PUSH
74598: EMPTY
74599: LIST
74600: LIST
74601: PPUSH
74602: CALL_OW 446
// end ;
74606: LD_VAR 0 2
74610: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74611: LD_INT 0
74613: PPUSH
74614: PPUSH
// if not driver or not IsInUnit ( driver ) then
74615: LD_VAR 0 1
74619: NOT
74620: PUSH
74621: LD_VAR 0 1
74625: PPUSH
74626: CALL_OW 310
74630: NOT
74631: OR
74632: IFFALSE 74636
// exit ;
74634: GO 74726
// vehicle := IsInUnit ( driver ) ;
74636: LD_ADDR_VAR 0 3
74640: PUSH
74641: LD_VAR 0 1
74645: PPUSH
74646: CALL_OW 310
74650: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74651: LD_VAR 0 1
74655: PPUSH
74656: LD_STRING \
74658: PUSH
74659: LD_INT 0
74661: PUSH
74662: LD_INT 0
74664: PUSH
74665: LD_INT 0
74667: PUSH
74668: LD_INT 0
74670: PUSH
74671: LD_INT 0
74673: PUSH
74674: LD_INT 0
74676: PUSH
74677: EMPTY
74678: LIST
74679: LIST
74680: LIST
74681: LIST
74682: LIST
74683: LIST
74684: LIST
74685: PUSH
74686: LD_STRING E
74688: PUSH
74689: LD_INT 0
74691: PUSH
74692: LD_INT 0
74694: PUSH
74695: LD_VAR 0 3
74699: PUSH
74700: LD_INT 0
74702: PUSH
74703: LD_INT 0
74705: PUSH
74706: LD_INT 0
74708: PUSH
74709: EMPTY
74710: LIST
74711: LIST
74712: LIST
74713: LIST
74714: LIST
74715: LIST
74716: LIST
74717: PUSH
74718: EMPTY
74719: LIST
74720: LIST
74721: PPUSH
74722: CALL_OW 447
// end ;
74726: LD_VAR 0 2
74730: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
74731: LD_INT 0
74733: PPUSH
74734: PPUSH
74735: PPUSH
// tmp := [ ] ;
74736: LD_ADDR_VAR 0 5
74740: PUSH
74741: EMPTY
74742: ST_TO_ADDR
// for i in units do
74743: LD_ADDR_VAR 0 4
74747: PUSH
74748: LD_VAR 0 1
74752: PUSH
74753: FOR_IN
74754: IFFALSE 74792
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
74756: LD_ADDR_VAR 0 5
74760: PUSH
74761: LD_VAR 0 5
74765: PPUSH
74766: LD_VAR 0 5
74770: PUSH
74771: LD_INT 1
74773: PLUS
74774: PPUSH
74775: LD_VAR 0 4
74779: PPUSH
74780: CALL_OW 256
74784: PPUSH
74785: CALL_OW 2
74789: ST_TO_ADDR
74790: GO 74753
74792: POP
74793: POP
// if not tmp then
74794: LD_VAR 0 5
74798: NOT
74799: IFFALSE 74803
// exit ;
74801: GO 74851
// if asc then
74803: LD_VAR 0 2
74807: IFFALSE 74831
// result := SortListByListAsc ( units , tmp ) else
74809: LD_ADDR_VAR 0 3
74813: PUSH
74814: LD_VAR 0 1
74818: PPUSH
74819: LD_VAR 0 5
74823: PPUSH
74824: CALL_OW 76
74828: ST_TO_ADDR
74829: GO 74851
// result := SortListByListDesc ( units , tmp ) ;
74831: LD_ADDR_VAR 0 3
74835: PUSH
74836: LD_VAR 0 1
74840: PPUSH
74841: LD_VAR 0 5
74845: PPUSH
74846: CALL_OW 77
74850: ST_TO_ADDR
// end ;
74851: LD_VAR 0 3
74855: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
74856: LD_INT 0
74858: PPUSH
74859: PPUSH
// task := GetTaskList ( mech ) ;
74860: LD_ADDR_VAR 0 4
74864: PUSH
74865: LD_VAR 0 1
74869: PPUSH
74870: CALL_OW 437
74874: ST_TO_ADDR
// if not task then
74875: LD_VAR 0 4
74879: NOT
74880: IFFALSE 74884
// exit ;
74882: GO 74926
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
74884: LD_ADDR_VAR 0 3
74888: PUSH
74889: LD_VAR 0 4
74893: PUSH
74894: LD_INT 1
74896: ARRAY
74897: PUSH
74898: LD_INT 1
74900: ARRAY
74901: PUSH
74902: LD_STRING r
74904: EQUAL
74905: PUSH
74906: LD_VAR 0 4
74910: PUSH
74911: LD_INT 1
74913: ARRAY
74914: PUSH
74915: LD_INT 4
74917: ARRAY
74918: PUSH
74919: LD_VAR 0 2
74923: EQUAL
74924: AND
74925: ST_TO_ADDR
// end ;
74926: LD_VAR 0 3
74930: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
74931: LD_INT 0
74933: PPUSH
// SetDir ( unit , d ) ;
74934: LD_VAR 0 1
74938: PPUSH
74939: LD_VAR 0 4
74943: PPUSH
74944: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
74948: LD_VAR 0 1
74952: PPUSH
74953: LD_VAR 0 2
74957: PPUSH
74958: LD_VAR 0 3
74962: PPUSH
74963: LD_VAR 0 5
74967: PPUSH
74968: CALL_OW 48
// end ;
74972: LD_VAR 0 6
74976: RET
// export function ToNaturalNumber ( number ) ; begin
74977: LD_INT 0
74979: PPUSH
// result := number div 1 ;
74980: LD_ADDR_VAR 0 2
74984: PUSH
74985: LD_VAR 0 1
74989: PUSH
74990: LD_INT 1
74992: DIV
74993: ST_TO_ADDR
// if number < 0 then
74994: LD_VAR 0 1
74998: PUSH
74999: LD_INT 0
75001: LESS
75002: IFFALSE 75012
// result := 0 ;
75004: LD_ADDR_VAR 0 2
75008: PUSH
75009: LD_INT 0
75011: ST_TO_ADDR
// end ;
75012: LD_VAR 0 2
75016: RET
// export function SortByClass ( units , class ) ; var un ; begin
75017: LD_INT 0
75019: PPUSH
75020: PPUSH
// if not units or not class then
75021: LD_VAR 0 1
75025: NOT
75026: PUSH
75027: LD_VAR 0 2
75031: NOT
75032: OR
75033: IFFALSE 75037
// exit ;
75035: GO 75132
// result := [ ] ;
75037: LD_ADDR_VAR 0 3
75041: PUSH
75042: EMPTY
75043: ST_TO_ADDR
// for un in units do
75044: LD_ADDR_VAR 0 4
75048: PUSH
75049: LD_VAR 0 1
75053: PUSH
75054: FOR_IN
75055: IFFALSE 75130
// if GetClass ( un ) = class then
75057: LD_VAR 0 4
75061: PPUSH
75062: CALL_OW 257
75066: PUSH
75067: LD_VAR 0 2
75071: EQUAL
75072: IFFALSE 75099
// result := Insert ( result , 1 , un ) else
75074: LD_ADDR_VAR 0 3
75078: PUSH
75079: LD_VAR 0 3
75083: PPUSH
75084: LD_INT 1
75086: PPUSH
75087: LD_VAR 0 4
75091: PPUSH
75092: CALL_OW 2
75096: ST_TO_ADDR
75097: GO 75128
// result := Replace ( result , result + 1 , un ) ;
75099: LD_ADDR_VAR 0 3
75103: PUSH
75104: LD_VAR 0 3
75108: PPUSH
75109: LD_VAR 0 3
75113: PUSH
75114: LD_INT 1
75116: PLUS
75117: PPUSH
75118: LD_VAR 0 4
75122: PPUSH
75123: CALL_OW 1
75127: ST_TO_ADDR
75128: GO 75054
75130: POP
75131: POP
// end ;
75132: LD_VAR 0 3
75136: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
75137: LD_INT 0
75139: PPUSH
75140: PPUSH
75141: PPUSH
75142: PPUSH
75143: PPUSH
75144: PPUSH
75145: PPUSH
// result := [ ] ;
75146: LD_ADDR_VAR 0 4
75150: PUSH
75151: EMPTY
75152: ST_TO_ADDR
// if x - r < 0 then
75153: LD_VAR 0 1
75157: PUSH
75158: LD_VAR 0 3
75162: MINUS
75163: PUSH
75164: LD_INT 0
75166: LESS
75167: IFFALSE 75179
// min_x := 0 else
75169: LD_ADDR_VAR 0 8
75173: PUSH
75174: LD_INT 0
75176: ST_TO_ADDR
75177: GO 75195
// min_x := x - r ;
75179: LD_ADDR_VAR 0 8
75183: PUSH
75184: LD_VAR 0 1
75188: PUSH
75189: LD_VAR 0 3
75193: MINUS
75194: ST_TO_ADDR
// if y - r < 0 then
75195: LD_VAR 0 2
75199: PUSH
75200: LD_VAR 0 3
75204: MINUS
75205: PUSH
75206: LD_INT 0
75208: LESS
75209: IFFALSE 75221
// min_y := 0 else
75211: LD_ADDR_VAR 0 7
75215: PUSH
75216: LD_INT 0
75218: ST_TO_ADDR
75219: GO 75237
// min_y := y - r ;
75221: LD_ADDR_VAR 0 7
75225: PUSH
75226: LD_VAR 0 2
75230: PUSH
75231: LD_VAR 0 3
75235: MINUS
75236: ST_TO_ADDR
// max_x := x + r ;
75237: LD_ADDR_VAR 0 9
75241: PUSH
75242: LD_VAR 0 1
75246: PUSH
75247: LD_VAR 0 3
75251: PLUS
75252: ST_TO_ADDR
// max_y := y + r ;
75253: LD_ADDR_VAR 0 10
75257: PUSH
75258: LD_VAR 0 2
75262: PUSH
75263: LD_VAR 0 3
75267: PLUS
75268: ST_TO_ADDR
// for _x = min_x to max_x do
75269: LD_ADDR_VAR 0 5
75273: PUSH
75274: DOUBLE
75275: LD_VAR 0 8
75279: DEC
75280: ST_TO_ADDR
75281: LD_VAR 0 9
75285: PUSH
75286: FOR_TO
75287: IFFALSE 75388
// for _y = min_y to max_y do
75289: LD_ADDR_VAR 0 6
75293: PUSH
75294: DOUBLE
75295: LD_VAR 0 7
75299: DEC
75300: ST_TO_ADDR
75301: LD_VAR 0 10
75305: PUSH
75306: FOR_TO
75307: IFFALSE 75384
// begin if not ValidHex ( _x , _y ) then
75309: LD_VAR 0 5
75313: PPUSH
75314: LD_VAR 0 6
75318: PPUSH
75319: CALL_OW 488
75323: NOT
75324: IFFALSE 75328
// continue ;
75326: GO 75306
// if GetResourceTypeXY ( _x , _y ) then
75328: LD_VAR 0 5
75332: PPUSH
75333: LD_VAR 0 6
75337: PPUSH
75338: CALL_OW 283
75342: IFFALSE 75382
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
75344: LD_ADDR_VAR 0 4
75348: PUSH
75349: LD_VAR 0 4
75353: PPUSH
75354: LD_VAR 0 4
75358: PUSH
75359: LD_INT 1
75361: PLUS
75362: PPUSH
75363: LD_VAR 0 5
75367: PUSH
75368: LD_VAR 0 6
75372: PUSH
75373: EMPTY
75374: LIST
75375: LIST
75376: PPUSH
75377: CALL_OW 1
75381: ST_TO_ADDR
// end ;
75382: GO 75306
75384: POP
75385: POP
75386: GO 75286
75388: POP
75389: POP
// end ;
75390: LD_VAR 0 4
75394: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
75395: LD_INT 0
75397: PPUSH
75398: PPUSH
75399: PPUSH
75400: PPUSH
75401: PPUSH
75402: PPUSH
75403: PPUSH
75404: PPUSH
// if not units then
75405: LD_VAR 0 1
75409: NOT
75410: IFFALSE 75414
// exit ;
75412: GO 75938
// result := UnitFilter ( units , [ f_ok ] ) ;
75414: LD_ADDR_VAR 0 3
75418: PUSH
75419: LD_VAR 0 1
75423: PPUSH
75424: LD_INT 50
75426: PUSH
75427: EMPTY
75428: LIST
75429: PPUSH
75430: CALL_OW 72
75434: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
75435: LD_ADDR_VAR 0 8
75439: PUSH
75440: LD_VAR 0 1
75444: PUSH
75445: LD_INT 1
75447: ARRAY
75448: PPUSH
75449: CALL_OW 255
75453: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
75454: LD_ADDR_VAR 0 10
75458: PUSH
75459: LD_INT 29
75461: PUSH
75462: LD_INT 91
75464: PUSH
75465: LD_INT 49
75467: PUSH
75468: EMPTY
75469: LIST
75470: LIST
75471: LIST
75472: ST_TO_ADDR
// if not result then
75473: LD_VAR 0 3
75477: NOT
75478: IFFALSE 75482
// exit ;
75480: GO 75938
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
75482: LD_ADDR_VAR 0 5
75486: PUSH
75487: LD_INT 81
75489: PUSH
75490: LD_VAR 0 8
75494: PUSH
75495: EMPTY
75496: LIST
75497: LIST
75498: PPUSH
75499: CALL_OW 69
75503: ST_TO_ADDR
// for i in result do
75504: LD_ADDR_VAR 0 4
75508: PUSH
75509: LD_VAR 0 3
75513: PUSH
75514: FOR_IN
75515: IFFALSE 75936
// begin tag := GetTag ( i ) + 1 ;
75517: LD_ADDR_VAR 0 9
75521: PUSH
75522: LD_VAR 0 4
75526: PPUSH
75527: CALL_OW 110
75531: PUSH
75532: LD_INT 1
75534: PLUS
75535: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
75536: LD_ADDR_VAR 0 7
75540: PUSH
75541: LD_VAR 0 4
75545: PPUSH
75546: CALL_OW 250
75550: PPUSH
75551: LD_VAR 0 4
75555: PPUSH
75556: CALL_OW 251
75560: PPUSH
75561: LD_INT 6
75563: PPUSH
75564: CALL 75137 0 3
75568: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
75569: LD_VAR 0 4
75573: PPUSH
75574: CALL_OW 247
75578: PUSH
75579: LD_INT 2
75581: EQUAL
75582: PUSH
75583: LD_VAR 0 7
75587: AND
75588: PUSH
75589: LD_VAR 0 4
75593: PPUSH
75594: CALL_OW 264
75598: PUSH
75599: LD_VAR 0 10
75603: IN
75604: NOT
75605: AND
75606: IFFALSE 75645
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
75608: LD_VAR 0 4
75612: PPUSH
75613: LD_VAR 0 7
75617: PUSH
75618: LD_INT 1
75620: ARRAY
75621: PUSH
75622: LD_INT 1
75624: ARRAY
75625: PPUSH
75626: LD_VAR 0 7
75630: PUSH
75631: LD_INT 1
75633: ARRAY
75634: PUSH
75635: LD_INT 2
75637: ARRAY
75638: PPUSH
75639: CALL_OW 116
75643: GO 75934
// if path > tag then
75645: LD_VAR 0 2
75649: PUSH
75650: LD_VAR 0 9
75654: GREATER
75655: IFFALSE 75863
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
75657: LD_ADDR_VAR 0 6
75661: PUSH
75662: LD_VAR 0 5
75666: PPUSH
75667: LD_INT 91
75669: PUSH
75670: LD_VAR 0 4
75674: PUSH
75675: LD_INT 8
75677: PUSH
75678: EMPTY
75679: LIST
75680: LIST
75681: LIST
75682: PPUSH
75683: CALL_OW 72
75687: ST_TO_ADDR
// if nearEnemy then
75688: LD_VAR 0 6
75692: IFFALSE 75761
// begin if GetWeapon ( i ) = ru_time_lapser then
75694: LD_VAR 0 4
75698: PPUSH
75699: CALL_OW 264
75703: PUSH
75704: LD_INT 49
75706: EQUAL
75707: IFFALSE 75735
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
75709: LD_VAR 0 4
75713: PPUSH
75714: LD_VAR 0 6
75718: PPUSH
75719: LD_VAR 0 4
75723: PPUSH
75724: CALL_OW 74
75728: PPUSH
75729: CALL_OW 112
75733: GO 75759
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
75735: LD_VAR 0 4
75739: PPUSH
75740: LD_VAR 0 6
75744: PPUSH
75745: LD_VAR 0 4
75749: PPUSH
75750: CALL_OW 74
75754: PPUSH
75755: CALL_OW 115
// end else
75759: GO 75861
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
75761: LD_VAR 0 4
75765: PPUSH
75766: LD_VAR 0 2
75770: PUSH
75771: LD_VAR 0 9
75775: ARRAY
75776: PUSH
75777: LD_INT 1
75779: ARRAY
75780: PPUSH
75781: LD_VAR 0 2
75785: PUSH
75786: LD_VAR 0 9
75790: ARRAY
75791: PUSH
75792: LD_INT 2
75794: ARRAY
75795: PPUSH
75796: CALL_OW 297
75800: PUSH
75801: LD_INT 6
75803: GREATER
75804: IFFALSE 75847
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
75806: LD_VAR 0 4
75810: PPUSH
75811: LD_VAR 0 2
75815: PUSH
75816: LD_VAR 0 9
75820: ARRAY
75821: PUSH
75822: LD_INT 1
75824: ARRAY
75825: PPUSH
75826: LD_VAR 0 2
75830: PUSH
75831: LD_VAR 0 9
75835: ARRAY
75836: PUSH
75837: LD_INT 2
75839: ARRAY
75840: PPUSH
75841: CALL_OW 114
75845: GO 75861
// SetTag ( i , tag ) ;
75847: LD_VAR 0 4
75851: PPUSH
75852: LD_VAR 0 9
75856: PPUSH
75857: CALL_OW 109
// end else
75861: GO 75934
// if enemy then
75863: LD_VAR 0 5
75867: IFFALSE 75934
// begin if GetWeapon ( i ) = ru_time_lapser then
75869: LD_VAR 0 4
75873: PPUSH
75874: CALL_OW 264
75878: PUSH
75879: LD_INT 49
75881: EQUAL
75882: IFFALSE 75910
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
75884: LD_VAR 0 4
75888: PPUSH
75889: LD_VAR 0 5
75893: PPUSH
75894: LD_VAR 0 4
75898: PPUSH
75899: CALL_OW 74
75903: PPUSH
75904: CALL_OW 112
75908: GO 75934
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
75910: LD_VAR 0 4
75914: PPUSH
75915: LD_VAR 0 5
75919: PPUSH
75920: LD_VAR 0 4
75924: PPUSH
75925: CALL_OW 74
75929: PPUSH
75930: CALL_OW 115
// end ; end ;
75934: GO 75514
75936: POP
75937: POP
// end ;
75938: LD_VAR 0 3
75942: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
75943: LD_INT 0
75945: PPUSH
75946: PPUSH
75947: PPUSH
// if not unit or IsInUnit ( unit ) then
75948: LD_VAR 0 1
75952: NOT
75953: PUSH
75954: LD_VAR 0 1
75958: PPUSH
75959: CALL_OW 310
75963: OR
75964: IFFALSE 75968
// exit ;
75966: GO 76059
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
75968: LD_ADDR_VAR 0 4
75972: PUSH
75973: LD_VAR 0 1
75977: PPUSH
75978: CALL_OW 250
75982: PPUSH
75983: LD_VAR 0 2
75987: PPUSH
75988: LD_INT 1
75990: PPUSH
75991: CALL_OW 272
75995: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
75996: LD_ADDR_VAR 0 5
76000: PUSH
76001: LD_VAR 0 1
76005: PPUSH
76006: CALL_OW 251
76010: PPUSH
76011: LD_VAR 0 2
76015: PPUSH
76016: LD_INT 1
76018: PPUSH
76019: CALL_OW 273
76023: ST_TO_ADDR
// if ValidHex ( x , y ) then
76024: LD_VAR 0 4
76028: PPUSH
76029: LD_VAR 0 5
76033: PPUSH
76034: CALL_OW 488
76038: IFFALSE 76059
// ComTurnXY ( unit , x , y ) ;
76040: LD_VAR 0 1
76044: PPUSH
76045: LD_VAR 0 4
76049: PPUSH
76050: LD_VAR 0 5
76054: PPUSH
76055: CALL_OW 118
// end ;
76059: LD_VAR 0 3
76063: RET
// export function SeeUnits ( side , units ) ; var i ; begin
76064: LD_INT 0
76066: PPUSH
76067: PPUSH
// result := false ;
76068: LD_ADDR_VAR 0 3
76072: PUSH
76073: LD_INT 0
76075: ST_TO_ADDR
// if not units then
76076: LD_VAR 0 2
76080: NOT
76081: IFFALSE 76085
// exit ;
76083: GO 76130
// for i in units do
76085: LD_ADDR_VAR 0 4
76089: PUSH
76090: LD_VAR 0 2
76094: PUSH
76095: FOR_IN
76096: IFFALSE 76128
// if See ( side , i ) then
76098: LD_VAR 0 1
76102: PPUSH
76103: LD_VAR 0 4
76107: PPUSH
76108: CALL_OW 292
76112: IFFALSE 76126
// begin result := true ;
76114: LD_ADDR_VAR 0 3
76118: PUSH
76119: LD_INT 1
76121: ST_TO_ADDR
// exit ;
76122: POP
76123: POP
76124: GO 76130
// end ;
76126: GO 76095
76128: POP
76129: POP
// end ;
76130: LD_VAR 0 3
76134: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
76135: LD_INT 0
76137: PPUSH
76138: PPUSH
76139: PPUSH
76140: PPUSH
// if not unit or not points then
76141: LD_VAR 0 1
76145: NOT
76146: PUSH
76147: LD_VAR 0 2
76151: NOT
76152: OR
76153: IFFALSE 76157
// exit ;
76155: GO 76247
// dist := 99999 ;
76157: LD_ADDR_VAR 0 5
76161: PUSH
76162: LD_INT 99999
76164: ST_TO_ADDR
// for i in points do
76165: LD_ADDR_VAR 0 4
76169: PUSH
76170: LD_VAR 0 2
76174: PUSH
76175: FOR_IN
76176: IFFALSE 76245
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
76178: LD_ADDR_VAR 0 6
76182: PUSH
76183: LD_VAR 0 1
76187: PPUSH
76188: LD_VAR 0 4
76192: PUSH
76193: LD_INT 1
76195: ARRAY
76196: PPUSH
76197: LD_VAR 0 4
76201: PUSH
76202: LD_INT 2
76204: ARRAY
76205: PPUSH
76206: CALL_OW 297
76210: ST_TO_ADDR
// if tmpDist < dist then
76211: LD_VAR 0 6
76215: PUSH
76216: LD_VAR 0 5
76220: LESS
76221: IFFALSE 76243
// begin result := i ;
76223: LD_ADDR_VAR 0 3
76227: PUSH
76228: LD_VAR 0 4
76232: ST_TO_ADDR
// dist := tmpDist ;
76233: LD_ADDR_VAR 0 5
76237: PUSH
76238: LD_VAR 0 6
76242: ST_TO_ADDR
// end ; end ;
76243: GO 76175
76245: POP
76246: POP
// end ;
76247: LD_VAR 0 3
76251: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
76252: LD_INT 0
76254: PPUSH
// uc_side := side ;
76255: LD_ADDR_OWVAR 20
76259: PUSH
76260: LD_VAR 0 1
76264: ST_TO_ADDR
// uc_nation := 3 ;
76265: LD_ADDR_OWVAR 21
76269: PUSH
76270: LD_INT 3
76272: ST_TO_ADDR
// vc_chassis := 25 ;
76273: LD_ADDR_OWVAR 37
76277: PUSH
76278: LD_INT 25
76280: ST_TO_ADDR
// vc_engine := engine_siberite ;
76281: LD_ADDR_OWVAR 39
76285: PUSH
76286: LD_INT 3
76288: ST_TO_ADDR
// vc_control := control_computer ;
76289: LD_ADDR_OWVAR 38
76293: PUSH
76294: LD_INT 3
76296: ST_TO_ADDR
// vc_weapon := 59 ;
76297: LD_ADDR_OWVAR 40
76301: PUSH
76302: LD_INT 59
76304: ST_TO_ADDR
// result := CreateVehicle ;
76305: LD_ADDR_VAR 0 5
76309: PUSH
76310: CALL_OW 45
76314: ST_TO_ADDR
// SetDir ( result , d ) ;
76315: LD_VAR 0 5
76319: PPUSH
76320: LD_VAR 0 4
76324: PPUSH
76325: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
76329: LD_VAR 0 5
76333: PPUSH
76334: LD_VAR 0 2
76338: PPUSH
76339: LD_VAR 0 3
76343: PPUSH
76344: LD_INT 0
76346: PPUSH
76347: CALL_OW 48
// end ;
76351: LD_VAR 0 5
76355: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
76356: LD_INT 0
76358: PPUSH
76359: PPUSH
76360: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
76361: LD_ADDR_VAR 0 2
76365: PUSH
76366: LD_INT 0
76368: PUSH
76369: LD_INT 0
76371: PUSH
76372: LD_INT 0
76374: PUSH
76375: LD_INT 0
76377: PUSH
76378: EMPTY
76379: LIST
76380: LIST
76381: LIST
76382: LIST
76383: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
76384: LD_VAR 0 1
76388: NOT
76389: PUSH
76390: LD_VAR 0 1
76394: PPUSH
76395: CALL_OW 264
76399: PUSH
76400: LD_INT 12
76402: PUSH
76403: LD_INT 51
76405: PUSH
76406: LD_INT 32
76408: PUSH
76409: LD_INT 89
76411: PUSH
76412: EMPTY
76413: LIST
76414: LIST
76415: LIST
76416: LIST
76417: IN
76418: NOT
76419: OR
76420: IFFALSE 76424
// exit ;
76422: GO 76522
// for i := 1 to 3 do
76424: LD_ADDR_VAR 0 3
76428: PUSH
76429: DOUBLE
76430: LD_INT 1
76432: DEC
76433: ST_TO_ADDR
76434: LD_INT 3
76436: PUSH
76437: FOR_TO
76438: IFFALSE 76520
// begin tmp := GetCargo ( cargo , i ) ;
76440: LD_ADDR_VAR 0 4
76444: PUSH
76445: LD_VAR 0 1
76449: PPUSH
76450: LD_VAR 0 3
76454: PPUSH
76455: CALL_OW 289
76459: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
76460: LD_ADDR_VAR 0 2
76464: PUSH
76465: LD_VAR 0 2
76469: PPUSH
76470: LD_VAR 0 3
76474: PPUSH
76475: LD_VAR 0 4
76479: PPUSH
76480: CALL_OW 1
76484: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
76485: LD_ADDR_VAR 0 2
76489: PUSH
76490: LD_VAR 0 2
76494: PPUSH
76495: LD_INT 4
76497: PPUSH
76498: LD_VAR 0 2
76502: PUSH
76503: LD_INT 4
76505: ARRAY
76506: PUSH
76507: LD_VAR 0 4
76511: PLUS
76512: PPUSH
76513: CALL_OW 1
76517: ST_TO_ADDR
// end ;
76518: GO 76437
76520: POP
76521: POP
// end ;
76522: LD_VAR 0 2
76526: RET
// export function Length ( array ) ; begin
76527: LD_INT 0
76529: PPUSH
// result := array + 0 ;
76530: LD_ADDR_VAR 0 2
76534: PUSH
76535: LD_VAR 0 1
76539: PUSH
76540: LD_INT 0
76542: PLUS
76543: ST_TO_ADDR
// end ;
76544: LD_VAR 0 2
76548: RET
// export function PrepareArray ( array ) ; begin
76549: LD_INT 0
76551: PPUSH
// result := array diff 0 ;
76552: LD_ADDR_VAR 0 2
76556: PUSH
76557: LD_VAR 0 1
76561: PUSH
76562: LD_INT 0
76564: DIFF
76565: ST_TO_ADDR
// if not result [ 1 ] then
76566: LD_VAR 0 2
76570: PUSH
76571: LD_INT 1
76573: ARRAY
76574: NOT
76575: IFFALSE 76595
// result := Delete ( result , 1 ) ;
76577: LD_ADDR_VAR 0 2
76581: PUSH
76582: LD_VAR 0 2
76586: PPUSH
76587: LD_INT 1
76589: PPUSH
76590: CALL_OW 3
76594: ST_TO_ADDR
// end ;
76595: LD_VAR 0 2
76599: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
76600: LD_INT 0
76602: PPUSH
76603: PPUSH
76604: PPUSH
76605: PPUSH
// sibRocketRange := 25 ;
76606: LD_ADDR_VAR 0 6
76610: PUSH
76611: LD_INT 25
76613: ST_TO_ADDR
// result := false ;
76614: LD_ADDR_VAR 0 4
76618: PUSH
76619: LD_INT 0
76621: ST_TO_ADDR
// for i := 0 to 5 do
76622: LD_ADDR_VAR 0 5
76626: PUSH
76627: DOUBLE
76628: LD_INT 0
76630: DEC
76631: ST_TO_ADDR
76632: LD_INT 5
76634: PUSH
76635: FOR_TO
76636: IFFALSE 76703
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
76638: LD_VAR 0 1
76642: PPUSH
76643: LD_VAR 0 5
76647: PPUSH
76648: LD_VAR 0 6
76652: PPUSH
76653: CALL_OW 272
76657: PPUSH
76658: LD_VAR 0 2
76662: PPUSH
76663: LD_VAR 0 5
76667: PPUSH
76668: LD_VAR 0 6
76672: PPUSH
76673: CALL_OW 273
76677: PPUSH
76678: LD_VAR 0 3
76682: PPUSH
76683: CALL_OW 309
76687: IFFALSE 76701
// begin result := true ;
76689: LD_ADDR_VAR 0 4
76693: PUSH
76694: LD_INT 1
76696: ST_TO_ADDR
// exit ;
76697: POP
76698: POP
76699: GO 76705
// end ;
76701: GO 76635
76703: POP
76704: POP
// end ;
76705: LD_VAR 0 4
76709: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
76710: LD_INT 0
76712: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
76713: LD_VAR 0 1
76717: PPUSH
76718: LD_VAR 0 2
76722: PPUSH
76723: LD_INT 0
76725: PPUSH
76726: LD_INT 0
76728: PPUSH
76729: LD_INT 1
76731: PPUSH
76732: LD_INT 0
76734: PPUSH
76735: CALL_OW 587
// end ; end_of_file
76739: LD_VAR 0 3
76743: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
76744: LD_VAR 0 1
76748: PUSH
76749: LD_INT 200
76751: DOUBLE
76752: GREATEREQUAL
76753: IFFALSE 76761
76755: LD_INT 299
76757: DOUBLE
76758: LESSEQUAL
76759: IFTRUE 76763
76761: GO 76795
76763: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
76764: LD_VAR 0 1
76768: PPUSH
76769: LD_VAR 0 2
76773: PPUSH
76774: LD_VAR 0 3
76778: PPUSH
76779: LD_VAR 0 4
76783: PPUSH
76784: LD_VAR 0 5
76788: PPUSH
76789: CALL 31410 0 5
76793: GO 76872
76795: LD_INT 300
76797: DOUBLE
76798: GREATEREQUAL
76799: IFFALSE 76807
76801: LD_INT 399
76803: DOUBLE
76804: LESSEQUAL
76805: IFTRUE 76809
76807: GO 76871
76809: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
76810: LD_VAR 0 1
76814: PPUSH
76815: LD_VAR 0 2
76819: PPUSH
76820: LD_VAR 0 3
76824: PPUSH
76825: LD_VAR 0 4
76829: PPUSH
76830: LD_VAR 0 5
76834: PPUSH
76835: LD_VAR 0 6
76839: PPUSH
76840: LD_VAR 0 7
76844: PPUSH
76845: LD_VAR 0 8
76849: PPUSH
76850: LD_VAR 0 9
76854: PPUSH
76855: LD_VAR 0 10
76859: PPUSH
76860: LD_VAR 0 11
76864: PPUSH
76865: CALL 27743 0 11
76869: GO 76872
76871: POP
// end ;
76872: PPOPN 11
76874: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
76875: LD_VAR 0 1
76879: PPUSH
76880: LD_VAR 0 2
76884: PPUSH
76885: LD_VAR 0 3
76889: PPUSH
76890: LD_VAR 0 4
76894: PPUSH
76895: LD_VAR 0 5
76899: PPUSH
76900: CALL 31146 0 5
// end ; end_of_file
76904: PPOPN 5
76906: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
76907: LD_VAR 0 1
76911: PPUSH
76912: LD_VAR 0 2
76916: PPUSH
76917: LD_VAR 0 3
76921: PPUSH
76922: LD_VAR 0 4
76926: PPUSH
76927: LD_VAR 0 5
76931: PPUSH
76932: LD_VAR 0 6
76936: PPUSH
76937: CALL 15363 0 6
// end ;
76941: PPOPN 6
76943: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
76944: LD_INT 0
76946: PPUSH
// begin if not units then
76947: LD_VAR 0 1
76951: NOT
76952: IFFALSE 76956
// exit ;
76954: GO 76956
// end ;
76956: PPOPN 7
76958: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
76959: CALL 15257 0 0
// end ;
76963: PPOPN 1
76965: END
