// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitVariables ;
  11: CALL 130 0 0
// CreateNature ;
  15: CALL 9539 0 0
// PrepareAlliance ;
  19: CALL 352 0 0
// PrepareFriends ;
  23: CALL 3821 0 0
// PrepareAmerican ;
  27: CALL 789 0 0
// PlaceSeeing ( 91 , 70 , 7 , - 32178 ) ;
  31: LD_INT 91
  33: PPUSH
  34: LD_INT 70
  36: PPUSH
  37: LD_INT 7
  39: PPUSH
  40: LD_INT 32178
  42: NEG
  43: PPUSH
  44: CALL_OW 330
// RemoveSeeing ( 91 , 70 , 7 ) ;
  48: LD_INT 91
  50: PPUSH
  51: LD_INT 70
  53: PPUSH
  54: LD_INT 7
  56: PPUSH
  57: CALL_OW 331
// if debug then
  61: LD_EXP 1
  65: IFFALSE 113
// begin SetAttitude ( 1 , 7 , att_enemy , true ) ;
  67: LD_INT 1
  69: PPUSH
  70: LD_INT 7
  72: PPUSH
  73: LD_INT 2
  75: PPUSH
  76: LD_INT 1
  78: PPUSH
  79: CALL_OW 80
// RemoveUnit ( Powell ) ;
  83: LD_EXP 17
  87: PPUSH
  88: CALL_OW 64
// DoNotAttack ( 1 , JMM ) ;
  92: LD_INT 1
  94: PPUSH
  95: LD_EXP 15
  99: PPUSH
 100: CALL_OW 471
// FogOff ( 1 ) ;
 104: LD_INT 1
 106: PPUSH
 107: CALL_OW 344
// end else
 111: GO 117
// Action ;
 113: CALL 9875 0 0
// PreparePatrol ;
 117: CALL 1413 0 0
// game := true ;
 121: LD_ADDR_EXP 2
 125: PUSH
 126: LD_INT 1
 128: ST_TO_ADDR
// end ;
 129: END
// export debug , game , selected , friends , reached_lab , can_escape , on_hill , friends_kill_counter , team_kill_counter , gamma_commander , extra_patrol , invis_used , alert , def_counter ; export function InitVariables ; begin
 130: LD_INT 0
 132: PPUSH
// debug := false ;
 133: LD_ADDR_EXP 1
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// friends := [ ] ;
 141: LD_ADDR_EXP 4
 145: PUSH
 146: EMPTY
 147: ST_TO_ADDR
// selected := [ ] ;
 148: LD_ADDR_EXP 3
 152: PUSH
 153: EMPTY
 154: ST_TO_ADDR
// reached_lab := false ;
 155: LD_ADDR_EXP 5
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// can_escape := false ;
 163: LD_ADDR_EXP 6
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// game := false ;
 171: LD_ADDR_EXP 2
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// gamma_commander := LoadVariable ( GammaCommander , 1 ) ;
 179: LD_ADDR_EXP 10
 183: PUSH
 184: LD_STRING GammaCommander
 186: PPUSH
 187: LD_INT 1
 189: PPUSH
 190: CALL_OW 30
 194: ST_TO_ADDR
// friends_kill_counter := 0 ;
 195: LD_ADDR_EXP 8
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// team_kill_counter := 0 ;
 203: LD_ADDR_EXP 9
 207: PUSH
 208: LD_INT 0
 210: ST_TO_ADDR
// extra_patrol := true ;
 211: LD_ADDR_EXP 11
 215: PUSH
 216: LD_INT 1
 218: ST_TO_ADDR
// on_hill := false ;
 219: LD_ADDR_EXP 7
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// invis_used := false ;
 227: LD_ADDR_EXP 12
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// alert := false ;
 235: LD_ADDR_EXP 13
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// def_counter := 0 ;
 243: LD_ADDR_EXP 14
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// end ;
 251: LD_VAR 0 1
 255: RET
// every 0 0$1 trigger on_hill do
 256: LD_EXP 7
 260: IFFALSE 272
 262: GO 264
 264: DISABLE
// SetAchievement ( ACH_EYE ) ;
 265: LD_STRING ACH_EYE
 267: PPUSH
 268: CALL_OW 543
 272: END
// every 0 0$1 trigger not invis_used do var i ;
 273: LD_EXP 12
 277: NOT
 278: IFFALSE 349
 280: GO 282
 282: DISABLE
 283: LD_INT 0
 285: PPUSH
// begin enable ;
 286: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do
 287: LD_ADDR_VAR 0 1
 291: PUSH
 292: LD_INT 22
 294: PUSH
 295: LD_INT 7
 297: PUSH
 298: EMPTY
 299: LIST
 300: LIST
 301: PUSH
 302: LD_INT 21
 304: PUSH
 305: LD_INT 1
 307: PUSH
 308: EMPTY
 309: LIST
 310: LIST
 311: PUSH
 312: EMPTY
 313: LIST
 314: LIST
 315: PPUSH
 316: CALL_OW 69
 320: PUSH
 321: FOR_IN
 322: IFFALSE 347
// if IsInvisible ( i ) then
 324: LD_VAR 0 1
 328: PPUSH
 329: CALL_OW 571
 333: IFFALSE 345
// begin invis_used := true ;
 335: LD_ADDR_EXP 12
 339: PUSH
 340: LD_INT 1
 342: ST_TO_ADDR
// break ;
 343: GO 347
// end ;
 345: GO 321
 347: POP
 348: POP
// end ; end_of_file
 349: PPOPN 1
 351: END
// export JMM , Roth ; export function PrepareAlliance ; var cargo ; begin
 352: LD_INT 0
 354: PPUSH
 355: PPUSH
// uc_side := 7 ;
 356: LD_ADDR_OWVAR 20
 360: PUSH
 361: LD_INT 7
 363: ST_TO_ADDR
// uc_nation := 1 ;
 364: LD_ADDR_OWVAR 21
 368: PUSH
 369: LD_INT 1
 371: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 11_ ) ;
 372: LD_ADDR_EXP 15
 376: PUSH
 377: LD_STRING JMM
 379: PPUSH
 380: LD_EXP 1
 384: NOT
 385: PPUSH
 386: LD_STRING 11_
 388: PPUSH
 389: CALL 36331 0 3
 393: ST_TO_ADDR
// uc_side := 4 ;
 394: LD_ADDR_OWVAR 20
 398: PUSH
 399: LD_INT 4
 401: ST_TO_ADDR
// Roth := NewCharacter ( Roth ) ;
 402: LD_ADDR_EXP 16
 406: PUSH
 407: LD_STRING Roth
 409: PPUSH
 410: CALL_OW 25
 414: ST_TO_ADDR
// SetDir ( JMM , 1 ) ;
 415: LD_EXP 15
 419: PPUSH
 420: LD_INT 1
 422: PPUSH
 423: CALL_OW 233
// SetClass ( JMM , 1 ) ;
 427: LD_EXP 15
 431: PPUSH
 432: LD_INT 1
 434: PPUSH
 435: CALL_OW 336
// PlaceUnitXY ( JMM , 105 , 10 , false ) ;
 439: LD_EXP 15
 443: PPUSH
 444: LD_INT 105
 446: PPUSH
 447: LD_INT 10
 449: PPUSH
 450: LD_INT 0
 452: PPUSH
 453: CALL_OW 48
// SetDir ( Roth , 4 ) ;
 457: LD_EXP 16
 461: PPUSH
 462: LD_INT 4
 464: PPUSH
 465: CALL_OW 233
// PlaceUnitXY ( Roth , 109 , 10 , false ) ;
 469: LD_EXP 16
 473: PPUSH
 474: LD_INT 109
 476: PPUSH
 477: LD_INT 10
 479: PPUSH
 480: LD_INT 0
 482: PPUSH
 483: CALL_OW 48
// ComTurnUnit ( JMM , Roth ) ;
 487: LD_EXP 15
 491: PPUSH
 492: LD_EXP 16
 496: PPUSH
 497: CALL_OW 119
// ComTurnUnit ( Roth , JMM ) ;
 501: LD_EXP 16
 505: PPUSH
 506: LD_EXP 15
 510: PPUSH
 511: CALL_OW 119
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
 515: LD_INT 3
 517: PPUSH
 518: LD_INT 3
 520: PPUSH
 521: LD_INT 3
 523: PPUSH
 524: LD_INT 12
 526: PPUSH
 527: LD_INT 100
 529: PPUSH
 530: CALL 41171 0 5
// cargo := CreateVehicle ;
 534: LD_ADDR_VAR 0 2
 538: PUSH
 539: CALL_OW 45
 543: ST_TO_ADDR
// SetDir ( cargo , 1 ) ;
 544: LD_VAR 0 2
 548: PPUSH
 549: LD_INT 1
 551: PPUSH
 552: CALL_OW 233
// PlaceUnitXY ( cargo , 179 , 45 , false ) ;
 556: LD_VAR 0 2
 560: PPUSH
 561: LD_INT 179
 563: PPUSH
 564: LD_INT 45
 566: PPUSH
 567: LD_INT 0
 569: PPUSH
 570: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 30 ) ;
 574: LD_VAR 0 2
 578: PPUSH
 579: LD_INT 4
 581: PPUSH
 582: LD_INT 30
 584: PPUSH
 585: CALL_OW 290
// if LoadVariable ( 11_artifact_captured , 0 ) then
 589: LD_STRING 11_artifact_captured
 591: PPUSH
 592: LD_INT 0
 594: PPUSH
 595: CALL_OW 30
 599: IFFALSE 656
// begin cargo := CreateVehicle ;
 601: LD_ADDR_VAR 0 2
 605: PUSH
 606: CALL_OW 45
 610: ST_TO_ADDR
// SetDir ( cargo , 0 ) ;
 611: LD_VAR 0 2
 615: PPUSH
 616: LD_INT 0
 618: PPUSH
 619: CALL_OW 233
// PlaceUnitXY ( cargo , 171 , 85 , false ) ;
 623: LD_VAR 0 2
 627: PPUSH
 628: LD_INT 171
 630: PPUSH
 631: LD_INT 85
 633: PPUSH
 634: LD_INT 0
 636: PPUSH
 637: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 50 ) ;
 641: LD_VAR 0 2
 645: PPUSH
 646: LD_INT 4
 648: PPUSH
 649: LD_INT 50
 651: PPUSH
 652: CALL_OW 290
// end ; SetSide ( amlab , 7 ) ;
 656: LD_INT 47
 658: PPUSH
 659: LD_INT 7
 661: PPUSH
 662: CALL_OW 235
// DoNotAttack ( 1 , amlab ) ;
 666: LD_INT 1
 668: PPUSH
 669: LD_INT 47
 671: PPUSH
 672: CALL_OW 471
// end ;
 676: LD_VAR 0 1
 680: RET
// every 0 0$1 trigger FilterUnitsInArea ( hill , [ f_side , 7 ] ) and not on_hill do
 681: LD_INT 38
 683: PPUSH
 684: LD_INT 22
 686: PUSH
 687: LD_INT 7
 689: PUSH
 690: EMPTY
 691: LIST
 692: LIST
 693: PPUSH
 694: CALL_OW 70
 698: PUSH
 699: LD_EXP 7
 703: NOT
 704: AND
 705: IFFALSE 736
 707: GO 709
 709: DISABLE
// begin enable ;
 710: ENABLE
// on_hill := true ;
 711: LD_ADDR_EXP 7
 715: PUSH
 716: LD_INT 1
 718: ST_TO_ADDR
// PlaceSeeing ( 126 , 13 , 7 , - 90 ) ;
 719: LD_INT 126
 721: PPUSH
 722: LD_INT 13
 724: PPUSH
 725: LD_INT 7
 727: PPUSH
 728: LD_INT 90
 730: NEG
 731: PPUSH
 732: CALL_OW 330
// end ;
 736: END
// every 0 0$1 trigger not FilterUnitsInArea ( hill , [ f_side , 7 ] ) and on_hill do
 737: LD_INT 38
 739: PPUSH
 740: LD_INT 22
 742: PUSH
 743: LD_INT 7
 745: PUSH
 746: EMPTY
 747: LIST
 748: LIST
 749: PPUSH
 750: CALL_OW 70
 754: NOT
 755: PUSH
 756: LD_EXP 7
 760: AND
 761: IFFALSE 788
 763: GO 765
 765: DISABLE
// begin enable ;
 766: ENABLE
// on_hill := false ;
 767: LD_ADDR_EXP 7
 771: PUSH
 772: LD_INT 0
 774: ST_TO_ADDR
// RemoveSeeing ( 126 , 13 , 7 ) ;
 775: LD_INT 126
 777: PPUSH
 778: LD_INT 13
 780: PPUSH
 781: LD_INT 7
 783: PPUSH
 784: CALL_OW 331
// end ; end_of_file
 788: END
// export Powell , mobile_patrol , mobile_points , powell_guards , defenders , defcon , defcon_wave ; export function PrepareAmerican ; var i , j , b , un , tmp ; begin
 789: LD_INT 0
 791: PPUSH
 792: PPUSH
 793: PPUSH
 794: PPUSH
 795: PPUSH
 796: PPUSH
// if Difficulty = 1 then
 797: LD_OWVAR 67
 801: PUSH
 802: LD_INT 1
 804: EQUAL
 805: IFFALSE 913
// begin tmp := [ [ 155 , 77 ] , [ 193 , 93 ] , [ 188 , 81 ] , [ 56 , 85 ] , [ 98 , 87 ] ] ;
 807: LD_ADDR_VAR 0 6
 811: PUSH
 812: LD_INT 155
 814: PUSH
 815: LD_INT 77
 817: PUSH
 818: EMPTY
 819: LIST
 820: LIST
 821: PUSH
 822: LD_INT 193
 824: PUSH
 825: LD_INT 93
 827: PUSH
 828: EMPTY
 829: LIST
 830: LIST
 831: PUSH
 832: LD_INT 188
 834: PUSH
 835: LD_INT 81
 837: PUSH
 838: EMPTY
 839: LIST
 840: LIST
 841: PUSH
 842: LD_INT 56
 844: PUSH
 845: LD_INT 85
 847: PUSH
 848: EMPTY
 849: LIST
 850: LIST
 851: PUSH
 852: LD_INT 98
 854: PUSH
 855: LD_INT 87
 857: PUSH
 858: EMPTY
 859: LIST
 860: LIST
 861: PUSH
 862: EMPTY
 863: LIST
 864: LIST
 865: LIST
 866: LIST
 867: LIST
 868: ST_TO_ADDR
// for i in tmp do
 869: LD_ADDR_VAR 0 2
 873: PUSH
 874: LD_VAR 0 6
 878: PUSH
 879: FOR_IN
 880: IFFALSE 911
// RemoveUnit ( HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
 882: LD_VAR 0 2
 886: PUSH
 887: LD_INT 1
 889: ARRAY
 890: PPUSH
 891: LD_VAR 0 2
 895: PUSH
 896: LD_INT 2
 898: ARRAY
 899: PPUSH
 900: CALL_OW 428
 904: PPUSH
 905: CALL_OW 64
 909: GO 879
 911: POP
 912: POP
// end ; defcon := 0 ;
 913: LD_ADDR_EXP 22
 917: PUSH
 918: LD_INT 0
 920: ST_TO_ADDR
// defcon_wave := 0 ;
 921: LD_ADDR_EXP 23
 925: PUSH
 926: LD_INT 0
 928: ST_TO_ADDR
// defenders := [ ] ;
 929: LD_ADDR_EXP 21
 933: PUSH
 934: EMPTY
 935: ST_TO_ADDR
// SetBName ( alfa , alfa ) ;
 936: LD_INT 5
 938: PPUSH
 939: LD_STRING alfa
 941: PPUSH
 942: CALL_OW 500
// uc_side := 1 ;
 946: LD_ADDR_OWVAR 20
 950: PUSH
 951: LD_INT 1
 953: ST_TO_ADDR
// uc_nation := 1 ;
 954: LD_ADDR_OWVAR 21
 958: PUSH
 959: LD_INT 1
 961: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
 962: LD_ADDR_EXP 17
 966: PUSH
 967: LD_STRING Powell
 969: PPUSH
 970: CALL_OW 25
 974: ST_TO_ADDR
// PlaceUnitXY ( Powell , 110 , 26 , false ) ;
 975: LD_EXP 17
 979: PPUSH
 980: LD_INT 110
 982: PPUSH
 983: LD_INT 26
 985: PPUSH
 986: LD_INT 0
 988: PPUSH
 989: CALL_OW 48
// ComHold ( Powell ) ;
 993: LD_EXP 17
 997: PPUSH
 998: CALL_OW 140
// for i := 1 to 5 do
1002: LD_ADDR_VAR 0 2
1006: PUSH
1007: DOUBLE
1008: LD_INT 1
1010: DEC
1011: ST_TO_ADDR
1012: LD_INT 5
1014: PUSH
1015: FOR_TO
1016: IFFALSE 1072
// begin PrepareHuman ( false , 1 , 10 ) ;
1018: LD_INT 0
1020: PPUSH
1021: LD_INT 1
1023: PPUSH
1024: LD_INT 10
1026: PPUSH
1027: CALL_OW 380
// powell_guards := Insert ( powell_guards , 1 , CreateHuman ) ;
1031: LD_ADDR_EXP 20
1035: PUSH
1036: LD_EXP 20
1040: PPUSH
1041: LD_INT 1
1043: PPUSH
1044: CALL_OW 44
1048: PPUSH
1049: CALL_OW 2
1053: ST_TO_ADDR
// PlaceHumanInUnit ( powell_guards [ 1 ] , ambar0 ) ;
1054: LD_EXP 20
1058: PUSH
1059: LD_INT 1
1061: ARRAY
1062: PPUSH
1063: LD_INT 18
1065: PPUSH
1066: CALL_OW 52
// end ;
1070: GO 1015
1072: POP
1073: POP
// if Difficulty > 1 then
1074: LD_OWVAR 67
1078: PUSH
1079: LD_INT 1
1081: GREATER
1082: IFFALSE 1233
// begin tmp := [ [ 81 , 33 ] , [ 134 , 114 ] , [ 193 , 102 ] ] ;
1084: LD_ADDR_VAR 0 6
1088: PUSH
1089: LD_INT 81
1091: PUSH
1092: LD_INT 33
1094: PUSH
1095: EMPTY
1096: LIST
1097: LIST
1098: PUSH
1099: LD_INT 134
1101: PUSH
1102: LD_INT 114
1104: PUSH
1105: EMPTY
1106: LIST
1107: LIST
1108: PUSH
1109: LD_INT 193
1111: PUSH
1112: LD_INT 102
1114: PUSH
1115: EMPTY
1116: LIST
1117: LIST
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: LIST
1123: ST_TO_ADDR
// for i := 1 to Difficulty - 1 do
1124: LD_ADDR_VAR 0 2
1128: PUSH
1129: DOUBLE
1130: LD_INT 1
1132: DEC
1133: ST_TO_ADDR
1134: LD_OWVAR 67
1138: PUSH
1139: LD_INT 1
1141: MINUS
1142: PUSH
1143: FOR_TO
1144: IFFALSE 1231
// begin PrepareSoldier ( false , 10 ) ;
1146: LD_INT 0
1148: PPUSH
1149: LD_INT 10
1151: PPUSH
1152: CALL_OW 381
// un := CreateHuman ;
1156: LD_ADDR_VAR 0 5
1160: PUSH
1161: CALL_OW 44
1165: ST_TO_ADDR
// SetClass ( un , class_sniper ) ;
1166: LD_VAR 0 5
1170: PPUSH
1171: LD_INT 5
1173: PPUSH
1174: CALL_OW 336
// PlaceUnitXY ( un , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
1178: LD_VAR 0 5
1182: PPUSH
1183: LD_VAR 0 6
1187: PUSH
1188: LD_VAR 0 2
1192: ARRAY
1193: PUSH
1194: LD_INT 1
1196: ARRAY
1197: PPUSH
1198: LD_VAR 0 6
1202: PUSH
1203: LD_VAR 0 2
1207: ARRAY
1208: PUSH
1209: LD_INT 2
1211: ARRAY
1212: PPUSH
1213: LD_INT 0
1215: PPUSH
1216: CALL_OW 48
// ComHold ( un ) ;
1220: LD_VAR 0 5
1224: PPUSH
1225: CALL_OW 140
// end ;
1229: GO 1143
1231: POP
1232: POP
// end ; if Difficulty > 2 then
1233: LD_OWVAR 67
1237: PUSH
1238: LD_INT 2
1240: GREATER
1241: IFFALSE 1290
// begin bc_type := b_turret ;
1243: LD_ADDR_OWVAR 42
1247: PUSH
1248: LD_INT 33
1250: ST_TO_ADDR
// bc_level := 7 ;
1251: LD_ADDR_OWVAR 43
1255: PUSH
1256: LD_INT 7
1258: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 107 , 55 , 5 ) ;
1259: LD_ADDR_VAR 0 4
1263: PUSH
1264: LD_INT 107
1266: PPUSH
1267: LD_INT 55
1269: PPUSH
1270: LD_INT 5
1272: PPUSH
1273: CALL_OW 47
1277: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_rocket_launcher ) ;
1278: LD_VAR 0 4
1282: PPUSH
1283: LD_INT 7
1285: PPUSH
1286: CALL_OW 431
// end ; for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ^ FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) do
1290: LD_ADDR_VAR 0 2
1294: PUSH
1295: LD_INT 22
1297: PUSH
1298: LD_INT 1
1300: PUSH
1301: EMPTY
1302: LIST
1303: LIST
1304: PUSH
1305: LD_INT 30
1307: PUSH
1308: LD_INT 3
1310: PUSH
1311: EMPTY
1312: LIST
1313: LIST
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: PPUSH
1319: CALL_OW 69
1323: PUSH
1324: LD_INT 22
1326: PUSH
1327: LD_INT 1
1329: PUSH
1330: EMPTY
1331: LIST
1332: LIST
1333: PUSH
1334: LD_INT 30
1336: PUSH
1337: LD_INT 36
1339: PUSH
1340: EMPTY
1341: LIST
1342: LIST
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: PPUSH
1348: CALL_OW 69
1352: ADD
1353: PUSH
1354: FOR_IN
1355: IFFALSE 1406
// for j = 1 to 3 do
1357: LD_ADDR_VAR 0 3
1361: PUSH
1362: DOUBLE
1363: LD_INT 1
1365: DEC
1366: ST_TO_ADDR
1367: LD_INT 3
1369: PUSH
1370: FOR_TO
1371: IFFALSE 1402
// begin PrepareHuman ( false , 3 , 6 ) ;
1373: LD_INT 0
1375: PPUSH
1376: LD_INT 3
1378: PPUSH
1379: LD_INT 6
1381: PPUSH
1382: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
1386: CALL_OW 44
1390: PPUSH
1391: LD_VAR 0 2
1395: PPUSH
1396: CALL_OW 52
// end ;
1400: GO 1370
1402: POP
1403: POP
1404: GO 1354
1406: POP
1407: POP
// end ;
1408: LD_VAR 0 1
1412: RET
// export function PreparePatrol ; var i , un ; begin
1413: LD_INT 0
1415: PPUSH
1416: PPUSH
1417: PPUSH
// uc_side := 1 ;
1418: LD_ADDR_OWVAR 20
1422: PUSH
1423: LD_INT 1
1425: ST_TO_ADDR
// uc_nation := 1 ;
1426: LD_ADDR_OWVAR 21
1430: PUSH
1431: LD_INT 1
1433: ST_TO_ADDR
// mobile_points := [ [ [ 99 , 55 ] , [ 113 , 67 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 103 , 41 ] ] , [ [ 27 , 49 ] , [ 46 , 49 ] , [ 87 , 70 ] , [ 99 , 79 ] , [ 118 , 111 ] , [ 99 , 79 ] , [ 87 , 70 ] , [ 46 , 49 ] ] , [ [ 200 , 88 ] , [ 175 , 80 ] , [ 135 , 62 ] , [ 117 , 53 ] , [ 103 , 41 ] , [ 99 , 24 ] , [ 85 , 3 ] , [ 99 , 24 ] , [ 103 , 41 ] , [ 98 , 47 ] , [ 99 , 56 ] , [ 96 , 66 ] , [ 99 , 56 ] , [ 112 , 66 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 156 , 71 ] , [ 168 , 76 ] , [ 168 , 61 ] , [ 168 , 75 ] , [ 185 , 85 ] ] ] ;
1434: LD_ADDR_EXP 19
1438: PUSH
1439: LD_INT 99
1441: PUSH
1442: LD_INT 55
1444: PUSH
1445: EMPTY
1446: LIST
1447: LIST
1448: PUSH
1449: LD_INT 113
1451: PUSH
1452: LD_INT 67
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: PUSH
1459: LD_INT 129
1461: PUSH
1462: LD_INT 68
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: PUSH
1469: LD_INT 135
1471: PUSH
1472: LD_INT 62
1474: PUSH
1475: EMPTY
1476: LIST
1477: LIST
1478: PUSH
1479: LD_INT 103
1481: PUSH
1482: LD_INT 41
1484: PUSH
1485: EMPTY
1486: LIST
1487: LIST
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: PUSH
1496: LD_INT 27
1498: PUSH
1499: LD_INT 49
1501: PUSH
1502: EMPTY
1503: LIST
1504: LIST
1505: PUSH
1506: LD_INT 46
1508: PUSH
1509: LD_INT 49
1511: PUSH
1512: EMPTY
1513: LIST
1514: LIST
1515: PUSH
1516: LD_INT 87
1518: PUSH
1519: LD_INT 70
1521: PUSH
1522: EMPTY
1523: LIST
1524: LIST
1525: PUSH
1526: LD_INT 99
1528: PUSH
1529: LD_INT 79
1531: PUSH
1532: EMPTY
1533: LIST
1534: LIST
1535: PUSH
1536: LD_INT 118
1538: PUSH
1539: LD_INT 111
1541: PUSH
1542: EMPTY
1543: LIST
1544: LIST
1545: PUSH
1546: LD_INT 99
1548: PUSH
1549: LD_INT 79
1551: PUSH
1552: EMPTY
1553: LIST
1554: LIST
1555: PUSH
1556: LD_INT 87
1558: PUSH
1559: LD_INT 70
1561: PUSH
1562: EMPTY
1563: LIST
1564: LIST
1565: PUSH
1566: LD_INT 46
1568: PUSH
1569: LD_INT 49
1571: PUSH
1572: EMPTY
1573: LIST
1574: LIST
1575: PUSH
1576: EMPTY
1577: LIST
1578: LIST
1579: LIST
1580: LIST
1581: LIST
1582: LIST
1583: LIST
1584: LIST
1585: PUSH
1586: LD_INT 200
1588: PUSH
1589: LD_INT 88
1591: PUSH
1592: EMPTY
1593: LIST
1594: LIST
1595: PUSH
1596: LD_INT 175
1598: PUSH
1599: LD_INT 80
1601: PUSH
1602: EMPTY
1603: LIST
1604: LIST
1605: PUSH
1606: LD_INT 135
1608: PUSH
1609: LD_INT 62
1611: PUSH
1612: EMPTY
1613: LIST
1614: LIST
1615: PUSH
1616: LD_INT 117
1618: PUSH
1619: LD_INT 53
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: PUSH
1626: LD_INT 103
1628: PUSH
1629: LD_INT 41
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: PUSH
1636: LD_INT 99
1638: PUSH
1639: LD_INT 24
1641: PUSH
1642: EMPTY
1643: LIST
1644: LIST
1645: PUSH
1646: LD_INT 85
1648: PUSH
1649: LD_INT 3
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: PUSH
1656: LD_INT 99
1658: PUSH
1659: LD_INT 24
1661: PUSH
1662: EMPTY
1663: LIST
1664: LIST
1665: PUSH
1666: LD_INT 103
1668: PUSH
1669: LD_INT 41
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: PUSH
1676: LD_INT 98
1678: PUSH
1679: LD_INT 47
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: PUSH
1686: LD_INT 99
1688: PUSH
1689: LD_INT 56
1691: PUSH
1692: EMPTY
1693: LIST
1694: LIST
1695: PUSH
1696: LD_INT 96
1698: PUSH
1699: LD_INT 66
1701: PUSH
1702: EMPTY
1703: LIST
1704: LIST
1705: PUSH
1706: LD_INT 99
1708: PUSH
1709: LD_INT 56
1711: PUSH
1712: EMPTY
1713: LIST
1714: LIST
1715: PUSH
1716: LD_INT 112
1718: PUSH
1719: LD_INT 66
1721: PUSH
1722: EMPTY
1723: LIST
1724: LIST
1725: PUSH
1726: LD_INT 129
1728: PUSH
1729: LD_INT 68
1731: PUSH
1732: EMPTY
1733: LIST
1734: LIST
1735: PUSH
1736: LD_INT 135
1738: PUSH
1739: LD_INT 62
1741: PUSH
1742: EMPTY
1743: LIST
1744: LIST
1745: PUSH
1746: LD_INT 156
1748: PUSH
1749: LD_INT 71
1751: PUSH
1752: EMPTY
1753: LIST
1754: LIST
1755: PUSH
1756: LD_INT 168
1758: PUSH
1759: LD_INT 76
1761: PUSH
1762: EMPTY
1763: LIST
1764: LIST
1765: PUSH
1766: LD_INT 168
1768: PUSH
1769: LD_INT 61
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: PUSH
1776: LD_INT 168
1778: PUSH
1779: LD_INT 75
1781: PUSH
1782: EMPTY
1783: LIST
1784: LIST
1785: PUSH
1786: LD_INT 185
1788: PUSH
1789: LD_INT 85
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: PUSH
1796: EMPTY
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: LIST
1823: ST_TO_ADDR
// mobile_patrol := [ ] ;
1824: LD_ADDR_EXP 18
1828: PUSH
1829: EMPTY
1830: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1831: LD_INT 3
1833: PPUSH
1834: LD_INT 1
1836: PPUSH
1837: LD_INT 3
1839: PPUSH
1840: LD_INT 4
1842: PPUSH
1843: LD_INT 100
1845: PPUSH
1846: CALL 41171 0 5
// mobile_patrol := Insert ( mobile_patrol , 1 , CreateVehicle ) ;
1850: LD_ADDR_EXP 18
1854: PUSH
1855: LD_EXP 18
1859: PPUSH
1860: LD_INT 1
1862: PPUSH
1863: CALL_OW 45
1867: PPUSH
1868: CALL_OW 2
1872: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 1 ] , 99 , 55 , false ) ;
1873: LD_EXP 18
1877: PUSH
1878: LD_INT 1
1880: ARRAY
1881: PPUSH
1882: LD_INT 99
1884: PPUSH
1885: LD_INT 55
1887: PPUSH
1888: LD_INT 0
1890: PPUSH
1891: CALL_OW 48
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1895: LD_INT 2
1897: PPUSH
1898: LD_INT 1
1900: PPUSH
1901: LD_INT 3
1903: PPUSH
1904: LD_INT 4
1906: PPUSH
1907: LD_INT 100
1909: PPUSH
1910: CALL 41171 0 5
// mobile_patrol := Insert ( mobile_patrol , 2 , CreateVehicle ) ;
1914: LD_ADDR_EXP 18
1918: PUSH
1919: LD_EXP 18
1923: PPUSH
1924: LD_INT 2
1926: PPUSH
1927: CALL_OW 45
1931: PPUSH
1932: CALL_OW 2
1936: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 2 ] , 27 , 49 , false ) ;
1937: LD_EXP 18
1941: PUSH
1942: LD_INT 2
1944: ARRAY
1945: PPUSH
1946: LD_INT 27
1948: PPUSH
1949: LD_INT 49
1951: PPUSH
1952: LD_INT 0
1954: PPUSH
1955: CALL_OW 48
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , [ us_laser , us_rocket_launcher , us_rocket_launcher , us_rocket_launcher ] [ Difficulty ] , 100 ) ;
1959: LD_INT 3
1961: PPUSH
1962: LD_INT 1
1964: PPUSH
1965: LD_INT 3
1967: PPUSH
1968: LD_INT 9
1970: PUSH
1971: LD_INT 7
1973: PUSH
1974: LD_INT 7
1976: PUSH
1977: LD_INT 7
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: PUSH
1986: LD_OWVAR 67
1990: ARRAY
1991: PPUSH
1992: LD_INT 100
1994: PPUSH
1995: CALL 41171 0 5
// mobile_patrol := Insert ( mobile_patrol , 3 , CreateVehicle ) ;
1999: LD_ADDR_EXP 18
2003: PUSH
2004: LD_EXP 18
2008: PPUSH
2009: LD_INT 3
2011: PPUSH
2012: CALL_OW 45
2016: PPUSH
2017: CALL_OW 2
2021: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 3 ] , 200 , 88 , false ) ;
2022: LD_EXP 18
2026: PUSH
2027: LD_INT 3
2029: ARRAY
2030: PPUSH
2031: LD_INT 200
2033: PPUSH
2034: LD_INT 88
2036: PPUSH
2037: LD_INT 0
2039: PPUSH
2040: CALL_OW 48
// for i := mobile_patrol downto 1 do
2044: LD_ADDR_VAR 0 2
2048: PUSH
2049: DOUBLE
2050: LD_EXP 18
2054: INC
2055: ST_TO_ADDR
2056: LD_INT 1
2058: PUSH
2059: FOR_DOWNTO
2060: IFFALSE 2071
// RaiseSailEvent ( 1 ) ;
2062: LD_INT 1
2064: PPUSH
2065: CALL_OW 427
2069: GO 2059
2071: POP
2072: POP
// end ;
2073: LD_VAR 0 1
2077: RET
// export function SpawnCargo ( ) ; var i , c , k , areas , road , tmp , veh ; begin
2078: LD_INT 0
2080: PPUSH
2081: PPUSH
2082: PPUSH
2083: PPUSH
2084: PPUSH
2085: PPUSH
2086: PPUSH
2087: PPUSH
// areas := [ [ road_east , 4 ] , [ road_south , 5 ] , [ road_west , 1 ] ] ;
2088: LD_ADDR_VAR 0 5
2092: PUSH
2093: LD_INT 20
2095: PUSH
2096: LD_INT 4
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: PUSH
2103: LD_INT 21
2105: PUSH
2106: LD_INT 5
2108: PUSH
2109: EMPTY
2110: LIST
2111: LIST
2112: PUSH
2113: LD_INT 22
2115: PUSH
2116: LD_INT 1
2118: PUSH
2119: EMPTY
2120: LIST
2121: LIST
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: LIST
2127: ST_TO_ADDR
// road := [ [ 176 , 81 , 135 , 62 , 114 , 67 , 93 , 71 , 76 , 67 ] , [ 107 , 92 , 92 , 72 , 77 , 68 ] , [ 45 , 49 , 67 , 59 , 77 , 68 ] ] ;
2128: LD_ADDR_VAR 0 6
2132: PUSH
2133: LD_INT 176
2135: PUSH
2136: LD_INT 81
2138: PUSH
2139: LD_INT 135
2141: PUSH
2142: LD_INT 62
2144: PUSH
2145: LD_INT 114
2147: PUSH
2148: LD_INT 67
2150: PUSH
2151: LD_INT 93
2153: PUSH
2154: LD_INT 71
2156: PUSH
2157: LD_INT 76
2159: PUSH
2160: LD_INT 67
2162: PUSH
2163: EMPTY
2164: LIST
2165: LIST
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: PUSH
2175: LD_INT 107
2177: PUSH
2178: LD_INT 92
2180: PUSH
2181: LD_INT 92
2183: PUSH
2184: LD_INT 72
2186: PUSH
2187: LD_INT 77
2189: PUSH
2190: LD_INT 68
2192: PUSH
2193: EMPTY
2194: LIST
2195: LIST
2196: LIST
2197: LIST
2198: LIST
2199: LIST
2200: PUSH
2201: LD_INT 45
2203: PUSH
2204: LD_INT 49
2206: PUSH
2207: LD_INT 67
2209: PUSH
2210: LD_INT 59
2212: PUSH
2213: LD_INT 77
2215: PUSH
2216: LD_INT 68
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: LIST
2223: LIST
2224: LIST
2225: LIST
2226: PUSH
2227: EMPTY
2228: LIST
2229: LIST
2230: LIST
2231: ST_TO_ADDR
// k := rand ( 1 , areas ) ;
2232: LD_ADDR_VAR 0 4
2236: PUSH
2237: LD_INT 1
2239: PPUSH
2240: LD_VAR 0 5
2244: PPUSH
2245: CALL_OW 12
2249: ST_TO_ADDR
// c := rand ( 1 , 2 ) ;
2250: LD_ADDR_VAR 0 3
2254: PUSH
2255: LD_INT 1
2257: PPUSH
2258: LD_INT 2
2260: PPUSH
2261: CALL_OW 12
2265: ST_TO_ADDR
// uc_side := 1 ;
2266: LD_ADDR_OWVAR 20
2270: PUSH
2271: LD_INT 1
2273: ST_TO_ADDR
// uc_nation := 1 ;
2274: LD_ADDR_OWVAR 21
2278: PUSH
2279: LD_INT 1
2281: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
2282: LD_INT 2
2284: PPUSH
2285: LD_INT 3
2287: PPUSH
2288: LD_INT 3
2290: PPUSH
2291: LD_INT 12
2293: PPUSH
2294: LD_INT 100
2296: PPUSH
2297: CALL 41171 0 5
// veh := CreateVehicle ;
2301: LD_ADDR_VAR 0 8
2305: PUSH
2306: CALL_OW 45
2310: ST_TO_ADDR
// SetDir ( veh , areas [ k ] [ 2 ] ) ;
2311: LD_VAR 0 8
2315: PPUSH
2316: LD_VAR 0 5
2320: PUSH
2321: LD_VAR 0 4
2325: ARRAY
2326: PUSH
2327: LD_INT 2
2329: ARRAY
2330: PPUSH
2331: CALL_OW 233
// PlaceUnitArea ( veh , areas [ k ] [ 1 ] , false ) ;
2335: LD_VAR 0 8
2339: PPUSH
2340: LD_VAR 0 5
2344: PUSH
2345: LD_VAR 0 4
2349: ARRAY
2350: PUSH
2351: LD_INT 1
2353: ARRAY
2354: PPUSH
2355: LD_INT 0
2357: PPUSH
2358: CALL_OW 49
// SetCargo ( veh , [ mat_cans , mat_siberit ] [ c ] , 100 ) ;
2362: LD_VAR 0 8
2366: PPUSH
2367: LD_INT 1
2369: PUSH
2370: LD_INT 3
2372: PUSH
2373: EMPTY
2374: LIST
2375: LIST
2376: PUSH
2377: LD_VAR 0 3
2381: ARRAY
2382: PPUSH
2383: LD_INT 100
2385: PPUSH
2386: CALL_OW 290
// tmp := road [ k ] ;
2390: LD_ADDR_VAR 0 7
2394: PUSH
2395: LD_VAR 0 6
2399: PUSH
2400: LD_VAR 0 4
2404: ARRAY
2405: ST_TO_ADDR
// for i = 1 to tmp div 2 do
2406: LD_ADDR_VAR 0 2
2410: PUSH
2411: DOUBLE
2412: LD_INT 1
2414: DEC
2415: ST_TO_ADDR
2416: LD_VAR 0 7
2420: PUSH
2421: LD_INT 2
2423: DIV
2424: PUSH
2425: FOR_TO
2426: IFFALSE 2473
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2428: LD_VAR 0 8
2432: PPUSH
2433: LD_VAR 0 7
2437: PUSH
2438: LD_VAR 0 2
2442: PUSH
2443: LD_INT 2
2445: MUL
2446: PUSH
2447: LD_INT 1
2449: MINUS
2450: ARRAY
2451: PPUSH
2452: LD_VAR 0 7
2456: PUSH
2457: LD_VAR 0 2
2461: PUSH
2462: LD_INT 2
2464: MUL
2465: ARRAY
2466: PPUSH
2467: CALL_OW 171
2471: GO 2425
2473: POP
2474: POP
// AddComGive ( veh , alfa ) ;
2475: LD_VAR 0 8
2479: PPUSH
2480: LD_INT 5
2482: PPUSH
2483: CALL_OW 221
// AddComWait ( veh , 0 0$2 ) ;
2487: LD_VAR 0 8
2491: PPUSH
2492: LD_INT 70
2494: PPUSH
2495: CALL_OW 202
// for i = tmp div 2 downto 1 do
2499: LD_ADDR_VAR 0 2
2503: PUSH
2504: DOUBLE
2505: LD_VAR 0 7
2509: PUSH
2510: LD_INT 2
2512: DIV
2513: INC
2514: ST_TO_ADDR
2515: LD_INT 1
2517: PUSH
2518: FOR_DOWNTO
2519: IFFALSE 2566
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2521: LD_VAR 0 8
2525: PPUSH
2526: LD_VAR 0 7
2530: PUSH
2531: LD_VAR 0 2
2535: PUSH
2536: LD_INT 2
2538: MUL
2539: PUSH
2540: LD_INT 1
2542: MINUS
2543: ARRAY
2544: PPUSH
2545: LD_VAR 0 7
2549: PUSH
2550: LD_VAR 0 2
2554: PUSH
2555: LD_INT 2
2557: MUL
2558: ARRAY
2559: PPUSH
2560: CALL_OW 171
2564: GO 2518
2566: POP
2567: POP
// AddComMoveToArea ( veh , areas [ k ] [ 1 ] ) ;
2568: LD_VAR 0 8
2572: PPUSH
2573: LD_VAR 0 5
2577: PUSH
2578: LD_VAR 0 4
2582: ARRAY
2583: PUSH
2584: LD_INT 1
2586: ARRAY
2587: PPUSH
2588: CALL_OW 173
// repeat wait ( 0 0$1 ) ;
2592: LD_INT 35
2594: PPUSH
2595: CALL_OW 67
// until IsInArea ( veh , areas [ k ] [ 1 ] ) and GetCargo ( veh , c ) = 0 ;
2599: LD_VAR 0 8
2603: PPUSH
2604: LD_VAR 0 5
2608: PUSH
2609: LD_VAR 0 4
2613: ARRAY
2614: PUSH
2615: LD_INT 1
2617: ARRAY
2618: PPUSH
2619: CALL_OW 308
2623: PUSH
2624: LD_VAR 0 8
2628: PPUSH
2629: LD_VAR 0 3
2633: PPUSH
2634: CALL_OW 289
2638: PUSH
2639: LD_INT 0
2641: EQUAL
2642: AND
2643: IFFALSE 2592
// RemoveUnit ( veh ) ;
2645: LD_VAR 0 8
2649: PPUSH
2650: CALL_OW 64
// end ;
2654: LD_VAR 0 1
2658: RET
// every 3 3$00 do
2659: GO 2661
2661: DISABLE
// begin enable ;
2662: ENABLE
// SpawnCargo ;
2663: CALL 2078 0 0
// end ;
2667: END
// export function PrepareDefenders ; var i , tmp ; begin
2668: LD_INT 0
2670: PPUSH
2671: PPUSH
2672: PPUSH
// if defenders then
2673: LD_EXP 21
2677: IFFALSE 2681
// exit ;
2679: GO 2953
// for i = 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
2681: LD_ADDR_VAR 0 2
2685: PUSH
2686: DOUBLE
2687: LD_INT 1
2689: DEC
2690: ST_TO_ADDR
2691: LD_INT 4
2693: PUSH
2694: LD_INT 5
2696: PUSH
2697: LD_INT 6
2699: PUSH
2700: LD_INT 7
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: LIST
2707: LIST
2708: PUSH
2709: LD_OWVAR 67
2713: ARRAY
2714: PUSH
2715: FOR_TO
2716: IFFALSE 2855
// begin tmp := Produce ( amfac2 , [ us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_remote , [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ) ;
2718: LD_ADDR_VAR 0 3
2722: PUSH
2723: LD_INT 6
2725: PPUSH
2726: LD_INT 2
2728: PUSH
2729: LD_INT 3
2731: PUSH
2732: EMPTY
2733: LIST
2734: LIST
2735: PUSH
2736: LD_INT 1
2738: PPUSH
2739: LD_INT 2
2741: PPUSH
2742: CALL_OW 12
2746: ARRAY
2747: PPUSH
2748: LD_INT 1
2750: PUSH
2751: LD_INT 3
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: PUSH
2758: LD_INT 1
2760: PPUSH
2761: LD_INT 2
2763: PPUSH
2764: CALL_OW 12
2768: ARRAY
2769: PPUSH
2770: LD_INT 2
2772: PPUSH
2773: LD_INT 4
2775: PUSH
2776: LD_INT 5
2778: PUSH
2779: LD_INT 9
2781: PUSH
2782: EMPTY
2783: LIST
2784: LIST
2785: LIST
2786: PUSH
2787: LD_INT 1
2789: PPUSH
2790: LD_INT 3
2792: PPUSH
2793: CALL_OW 12
2797: ARRAY
2798: PPUSH
2799: CALL 38791 0 5
2803: ST_TO_ADDR
// if tmp then
2804: LD_VAR 0 3
2808: IFFALSE 2853
// AddComConstruct ( amfac2 , tmp [ 1 ] , tmp [ 2 ] , tmp [ 3 ] , tmp [ 4 ] ) ;
2810: LD_INT 6
2812: PPUSH
2813: LD_VAR 0 3
2817: PUSH
2818: LD_INT 1
2820: ARRAY
2821: PPUSH
2822: LD_VAR 0 3
2826: PUSH
2827: LD_INT 2
2829: ARRAY
2830: PPUSH
2831: LD_VAR 0 3
2835: PUSH
2836: LD_INT 3
2838: ARRAY
2839: PPUSH
2840: LD_VAR 0 3
2844: PUSH
2845: LD_INT 4
2847: ARRAY
2848: PPUSH
2849: CALL_OW 185
// end ;
2853: GO 2715
2855: POP
2856: POP
// repeat wait ( 0 0$1 ) ;
2857: LD_INT 35
2859: PPUSH
2860: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
2864: LD_INT 22
2866: PUSH
2867: LD_INT 1
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: PUSH
2874: LD_INT 33
2876: PUSH
2877: LD_INT 2
2879: PUSH
2880: EMPTY
2881: LIST
2882: LIST
2883: PUSH
2884: EMPTY
2885: LIST
2886: LIST
2887: PPUSH
2888: CALL_OW 69
2892: PUSH
2893: LD_INT 4
2895: PUSH
2896: LD_INT 5
2898: PUSH
2899: LD_INT 6
2901: PUSH
2902: LD_INT 7
2904: PUSH
2905: EMPTY
2906: LIST
2907: LIST
2908: LIST
2909: LIST
2910: PUSH
2911: LD_OWVAR 67
2915: ARRAY
2916: GREATEREQUAL
2917: IFFALSE 2857
// defenders := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ;
2919: LD_ADDR_EXP 21
2923: PUSH
2924: LD_INT 22
2926: PUSH
2927: LD_INT 1
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: PUSH
2934: LD_INT 33
2936: PUSH
2937: LD_INT 2
2939: PUSH
2940: EMPTY
2941: LIST
2942: LIST
2943: PUSH
2944: EMPTY
2945: LIST
2946: LIST
2947: PPUSH
2948: CALL_OW 69
2952: ST_TO_ADDR
// end ;
2953: LD_VAR 0 1
2957: RET
// export function Defend ; var i , un , veh , tmp ; begin
2958: LD_INT 0
2960: PPUSH
2961: PPUSH
2962: PPUSH
2963: PPUSH
2964: PPUSH
// defcon_wave := defcon_wave + 1 ;
2965: LD_ADDR_EXP 23
2969: PUSH
2970: LD_EXP 23
2974: PUSH
2975: LD_INT 1
2977: PLUS
2978: ST_TO_ADDR
// if not defenders then
2979: LD_EXP 21
2983: NOT
2984: IFFALSE 2990
// PrepareDefenders ;
2986: CALL 2668 0 0
// if defcon_wave > 1 then
2990: LD_EXP 23
2994: PUSH
2995: LD_INT 1
2997: GREATER
2998: IFFALSE 3256
// begin for i = 1 to defcon_wave + 2 do
3000: LD_ADDR_VAR 0 2
3004: PUSH
3005: DOUBLE
3006: LD_INT 1
3008: DEC
3009: ST_TO_ADDR
3010: LD_EXP 23
3014: PUSH
3015: LD_INT 2
3017: PLUS
3018: PUSH
3019: FOR_TO
3020: IFFALSE 3162
// begin uc_side := 1 ;
3022: LD_ADDR_OWVAR 20
3026: PUSH
3027: LD_INT 1
3029: ST_TO_ADDR
// uc_nation := 1 ;
3030: LD_ADDR_OWVAR 21
3034: PUSH
3035: LD_INT 1
3037: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_siberite , control_manual , [ us_gatling_gun , us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
3038: LD_INT 4
3040: PPUSH
3041: LD_INT 3
3043: PPUSH
3044: LD_INT 1
3046: PPUSH
3047: LD_INT 4
3049: PUSH
3050: LD_INT 6
3052: PUSH
3053: LD_INT 7
3055: PUSH
3056: EMPTY
3057: LIST
3058: LIST
3059: LIST
3060: PUSH
3061: LD_INT 1
3063: PPUSH
3064: LD_INT 3
3066: PPUSH
3067: CALL_OW 12
3071: ARRAY
3072: PPUSH
3073: LD_INT 100
3075: PPUSH
3076: CALL 41171 0 5
// veh := CreateVehicle ;
3080: LD_ADDR_VAR 0 4
3084: PUSH
3085: CALL_OW 45
3089: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
3090: LD_VAR 0 4
3094: PPUSH
3095: LD_INT 1
3097: PPUSH
3098: CALL_OW 233
// defenders := defenders ^ veh ;
3102: LD_ADDR_EXP 21
3106: PUSH
3107: LD_EXP 21
3111: PUSH
3112: LD_VAR 0 4
3116: ADD
3117: ST_TO_ADDR
// PrepareHuman ( false , 3 , 9 ) ;
3118: LD_INT 0
3120: PPUSH
3121: LD_INT 3
3123: PPUSH
3124: LD_INT 9
3126: PPUSH
3127: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3131: CALL_OW 44
3135: PPUSH
3136: LD_VAR 0 4
3140: PPUSH
3141: CALL_OW 52
// PlaceUnitArea ( veh , west_spawn , false ) ;
3145: LD_VAR 0 4
3149: PPUSH
3150: LD_INT 25
3152: PPUSH
3153: LD_INT 0
3155: PPUSH
3156: CALL_OW 49
// end ;
3160: GO 3019
3162: POP
3163: POP
// for i = 1 to defcon_wave do
3164: LD_ADDR_VAR 0 2
3168: PUSH
3169: DOUBLE
3170: LD_INT 1
3172: DEC
3173: ST_TO_ADDR
3174: LD_EXP 23
3178: PUSH
3179: FOR_TO
3180: IFFALSE 3254
// begin uc_side := 1 ;
3182: LD_ADDR_OWVAR 20
3186: PUSH
3187: LD_INT 1
3189: ST_TO_ADDR
// uc_nation := 1 ;
3190: LD_ADDR_OWVAR 21
3194: PUSH
3195: LD_INT 1
3197: ST_TO_ADDR
// PrepareHuman ( false , 5 , 9 ) ;
3198: LD_INT 0
3200: PPUSH
3201: LD_INT 5
3203: PPUSH
3204: LD_INT 9
3206: PPUSH
3207: CALL_OW 380
// un := CreateHuman ;
3211: LD_ADDR_VAR 0 3
3215: PUSH
3216: CALL_OW 44
3220: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
3221: LD_VAR 0 3
3225: PPUSH
3226: LD_INT 25
3228: PPUSH
3229: LD_INT 0
3231: PPUSH
3232: CALL_OW 49
// defenders := defenders ^ un ;
3236: LD_ADDR_EXP 21
3240: PUSH
3241: LD_EXP 21
3245: PUSH
3246: LD_VAR 0 3
3250: ADD
3251: ST_TO_ADDR
// end ;
3252: GO 3179
3254: POP
3255: POP
// end ; repeat wait ( 0 0$1 ) ;
3256: LD_INT 35
3258: PPUSH
3259: CALL_OW 67
// for i in defenders do
3263: LD_ADDR_VAR 0 2
3267: PUSH
3268: LD_EXP 21
3272: PUSH
3273: FOR_IN
3274: IFFALSE 3356
// begin if defcon and GetDistUnitXY ( i , defcon [ 1 ] , defcon [ 2 ] ) > 10 and not HasTask ( i ) then
3276: LD_EXP 22
3280: PUSH
3281: LD_VAR 0 2
3285: PPUSH
3286: LD_EXP 22
3290: PUSH
3291: LD_INT 1
3293: ARRAY
3294: PPUSH
3295: LD_EXP 22
3299: PUSH
3300: LD_INT 2
3302: ARRAY
3303: PPUSH
3304: CALL_OW 297
3308: PUSH
3309: LD_INT 10
3311: GREATER
3312: AND
3313: PUSH
3314: LD_VAR 0 2
3318: PPUSH
3319: CALL_OW 314
3323: NOT
3324: AND
3325: IFFALSE 3354
// ComAgressiveMove ( i , defcon [ 1 ] , defcon [ 2 ] ) ;
3327: LD_VAR 0 2
3331: PPUSH
3332: LD_EXP 22
3336: PUSH
3337: LD_INT 1
3339: ARRAY
3340: PPUSH
3341: LD_EXP 22
3345: PUSH
3346: LD_INT 2
3348: ARRAY
3349: PPUSH
3350: CALL_OW 114
// end ;
3354: GO 3273
3356: POP
3357: POP
// until not defenders ;
3358: LD_EXP 21
3362: NOT
3363: IFFALSE 3256
// end ;
3365: LD_VAR 0 1
3369: RET
// every 0 0$1 do var radar , i ;
3370: GO 3372
3372: DISABLE
3373: LD_INT 0
3375: PPUSH
3376: PPUSH
// begin uc_side := 1 ;
3377: LD_ADDR_OWVAR 20
3381: PUSH
3382: LD_INT 1
3384: ST_TO_ADDR
// uc_nation := 1 ;
3385: LD_ADDR_OWVAR 21
3389: PUSH
3390: LD_INT 1
3392: ST_TO_ADDR
// PrepareVehicle ( us_light_wheeled , engine_solar , control_computer , us_radar , 100 ) ;
3393: LD_INT 1
3395: PPUSH
3396: LD_INT 2
3398: PPUSH
3399: LD_INT 3
3401: PPUSH
3402: LD_INT 11
3404: PPUSH
3405: LD_INT 100
3407: PPUSH
3408: CALL 41171 0 5
// radar := CreateVehicle ;
3412: LD_ADDR_VAR 0 1
3416: PUSH
3417: CALL_OW 45
3421: ST_TO_ADDR
// SetDir ( radar , 4 ) ;
3422: LD_VAR 0 1
3426: PPUSH
3427: LD_INT 4
3429: PPUSH
3430: CALL_OW 233
// PlaceUnitXY ( radar , 51 , 45 , false ) ;
3434: LD_VAR 0 1
3438: PPUSH
3439: LD_INT 51
3441: PPUSH
3442: LD_INT 45
3444: PPUSH
3445: LD_INT 0
3447: PPUSH
3448: CALL_OW 48
// repeat AddComWait ( radar , 0 0$20 ) ;
3452: LD_VAR 0 1
3456: PPUSH
3457: LD_INT 700
3459: PPUSH
3460: CALL_OW 202
// AddComMoveXY ( radar , 65 , 75 ) ;
3464: LD_VAR 0 1
3468: PPUSH
3469: LD_INT 65
3471: PPUSH
3472: LD_INT 75
3474: PPUSH
3475: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3479: LD_VAR 0 1
3483: PPUSH
3484: LD_INT 350
3486: PPUSH
3487: CALL_OW 202
// AddComMoveXY ( radar , 83 , 87 ) ;
3491: LD_VAR 0 1
3495: PPUSH
3496: LD_INT 83
3498: PPUSH
3499: LD_INT 87
3501: PPUSH
3502: CALL_OW 171
// AddComWait ( radar , 0 0$15 ) ;
3506: LD_VAR 0 1
3510: PPUSH
3511: LD_INT 525
3513: PPUSH
3514: CALL_OW 202
// AddComMoveXY ( radar , 94 , 81 ) ;
3518: LD_VAR 0 1
3522: PPUSH
3523: LD_INT 94
3525: PPUSH
3526: LD_INT 81
3528: PPUSH
3529: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3533: LD_VAR 0 1
3537: PPUSH
3538: LD_INT 350
3540: PPUSH
3541: CALL_OW 202
// AddComMoveXY ( radar , 55 , 48 ) ;
3545: LD_VAR 0 1
3549: PPUSH
3550: LD_INT 55
3552: PPUSH
3553: LD_INT 48
3555: PPUSH
3556: CALL_OW 171
// wait ( 1 1$00 ) ;
3560: LD_INT 2100
3562: PPUSH
3563: CALL_OW 67
// until not IsOk ( radar ) ;
3567: LD_VAR 0 1
3571: PPUSH
3572: CALL_OW 302
3576: NOT
3577: IFFALSE 3452
// end ;
3579: PPOPN 2
3581: END
// every 7 7$30 trigger Difficulty > 1 and extra_patrol do var un ;
3582: LD_OWVAR 67
3586: PUSH
3587: LD_INT 1
3589: GREATER
3590: PUSH
3591: LD_EXP 11
3595: AND
3596: IFFALSE 3818
3598: GO 3600
3600: DISABLE
3601: LD_INT 0
3603: PPUSH
// begin enable ;
3604: ENABLE
// uc_side := 1 ;
3605: LD_ADDR_OWVAR 20
3609: PUSH
3610: LD_INT 1
3612: ST_TO_ADDR
// uc_nation := 1 ;
3613: LD_ADDR_OWVAR 21
3617: PUSH
3618: LD_INT 1
3620: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_gatling_gun , 100 ) ;
3621: LD_INT 5
3623: PPUSH
3624: LD_INT 3
3626: PPUSH
3627: LD_INT 3
3629: PPUSH
3630: LD_INT 4
3632: PPUSH
3633: LD_INT 100
3635: PPUSH
3636: CALL 41171 0 5
// un := CreateVehicle ;
3640: LD_ADDR_VAR 0 1
3644: PUSH
3645: CALL_OW 45
3649: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3650: LD_VAR 0 1
3654: PPUSH
3655: LD_INT 3
3657: PPUSH
3658: CALL_OW 233
// PlaceUnitXY ( un , 155 , 2 , false ) ;
3662: LD_VAR 0 1
3666: PPUSH
3667: LD_INT 155
3669: PPUSH
3670: LD_INT 2
3672: PPUSH
3673: LD_INT 0
3675: PPUSH
3676: CALL_OW 48
// ComAgressiveMove ( un , 169 , 77 ) ;
3680: LD_VAR 0 1
3684: PPUSH
3685: LD_INT 169
3687: PPUSH
3688: LD_INT 77
3690: PPUSH
3691: CALL_OW 114
// AddComWait ( un , 0 0$2 ) ;
3695: LD_VAR 0 1
3699: PPUSH
3700: LD_INT 70
3702: PPUSH
3703: CALL_OW 202
// AddComAgressiveMove ( un , 134 , 62 ) ;
3707: LD_VAR 0 1
3711: PPUSH
3712: LD_INT 134
3714: PPUSH
3715: LD_INT 62
3717: PPUSH
3718: CALL_OW 174
// AddComAgressiveMove ( un , 103 , 42 ) ;
3722: LD_VAR 0 1
3726: PPUSH
3727: LD_INT 103
3729: PPUSH
3730: LD_INT 42
3732: PPUSH
3733: CALL_OW 174
// AddComWait ( un , 0 0$2 ) ;
3737: LD_VAR 0 1
3741: PPUSH
3742: LD_INT 70
3744: PPUSH
3745: CALL_OW 202
// AddComAgressiveMove ( un , 84 , 2 ) ;
3749: LD_VAR 0 1
3753: PPUSH
3754: LD_INT 84
3756: PPUSH
3757: LD_INT 2
3759: PPUSH
3760: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
3764: LD_INT 35
3766: PPUSH
3767: CALL_OW 67
// if IsDead ( un ) then
3771: LD_VAR 0 1
3775: PPUSH
3776: CALL_OW 301
3780: IFFALSE 3792
// begin extra_patrol := false ;
3782: LD_ADDR_EXP 11
3786: PUSH
3787: LD_INT 0
3789: ST_TO_ADDR
// exit ;
3790: GO 3818
// end ; until IsAt ( un , 84 , 2 ) ;
3792: LD_VAR 0 1
3796: PPUSH
3797: LD_INT 84
3799: PPUSH
3800: LD_INT 2
3802: PPUSH
3803: CALL_OW 307
3807: IFFALSE 3764
// RemoveUnit ( un ) ;
3809: LD_VAR 0 1
3813: PPUSH
3814: CALL_OW 64
// end ; end_of_file
3818: PPOPN 1
3820: END
// export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Mike ; export function PrepareFriends ; var i , tmp , buildings , areas , bunkers , cl , gammaCommander ; begin
3821: LD_INT 0
3823: PPUSH
3824: PPUSH
3825: PPUSH
3826: PPUSH
3827: PPUSH
3828: PPUSH
3829: PPUSH
3830: PPUSH
// uc_side := 4 ;
3831: LD_ADDR_OWVAR 20
3835: PUSH
3836: LD_INT 4
3838: ST_TO_ADDR
// uc_nation := 1 ;
3839: LD_ADDR_OWVAR 21
3843: PUSH
3844: LD_INT 1
3846: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 10c_ ) ;
3847: LD_ADDR_EXP 38
3851: PUSH
3852: LD_STRING DeltaDoctor
3854: PPUSH
3855: LD_EXP 1
3859: NOT
3860: PPUSH
3861: LD_STRING 10c_
3863: PPUSH
3864: CALL 36331 0 3
3868: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 10c_ ) ;
3869: LD_ADDR_EXP 37
3873: PUSH
3874: LD_STRING Joan
3876: PPUSH
3877: LD_EXP 1
3881: NOT
3882: PPUSH
3883: LD_STRING 10c_
3885: PPUSH
3886: CALL 36331 0 3
3890: ST_TO_ADDR
// if Joan then
3891: LD_EXP 37
3895: IFFALSE 3926
// friends := Insert ( friends , friends + 1 , Joan ) ;
3897: LD_ADDR_EXP 4
3901: PUSH
3902: LD_EXP 4
3906: PPUSH
3907: LD_EXP 4
3911: PUSH
3912: LD_INT 1
3914: PLUS
3915: PPUSH
3916: LD_EXP 37
3920: PPUSH
3921: CALL_OW 2
3925: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 10c_ ) ;
3926: LD_ADDR_EXP 36
3930: PUSH
3931: LD_STRING Simms
3933: PPUSH
3934: LD_EXP 1
3938: NOT
3939: PPUSH
3940: LD_STRING 10c_
3942: PPUSH
3943: CALL 36331 0 3
3947: ST_TO_ADDR
// if debug then
3948: LD_EXP 1
3952: IFFALSE 3969
// Kikuchi := NewCharacter ( Yamoko ) else
3954: LD_ADDR_EXP 35
3958: PUSH
3959: LD_STRING Yamoko
3961: PPUSH
3962: CALL_OW 25
3966: ST_TO_ADDR
3967: GO 3991
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 11_ ) ;
3969: LD_ADDR_EXP 35
3973: PUSH
3974: LD_STRING Kikuchi
3976: PPUSH
3977: LD_EXP 1
3981: NOT
3982: PPUSH
3983: LD_STRING 11_
3985: PPUSH
3986: CALL 36331 0 3
3990: ST_TO_ADDR
// if Kikuchi then
3991: LD_EXP 35
3995: IFFALSE 4026
// friends := Insert ( friends , friends + 1 , Kikuchi ) ;
3997: LD_ADDR_EXP 4
4001: PUSH
4002: LD_EXP 4
4006: PPUSH
4007: LD_EXP 4
4011: PUSH
4012: LD_INT 1
4014: PLUS
4015: PPUSH
4016: LD_EXP 35
4020: PPUSH
4021: CALL_OW 2
4025: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 11_ ) ;
4026: LD_ADDR_EXP 34
4030: PUSH
4031: LD_STRING Frank
4033: PPUSH
4034: LD_EXP 1
4038: NOT
4039: PPUSH
4040: LD_STRING 11_
4042: PPUSH
4043: CALL 36331 0 3
4047: ST_TO_ADDR
// if Frank then
4048: LD_EXP 34
4052: IFFALSE 4083
// friends := Insert ( friends , friends + 1 , Frank ) ;
4054: LD_ADDR_EXP 4
4058: PUSH
4059: LD_EXP 4
4063: PPUSH
4064: LD_EXP 4
4068: PUSH
4069: LD_INT 1
4071: PLUS
4072: PPUSH
4073: LD_EXP 34
4077: PPUSH
4078: CALL_OW 2
4082: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , 11_ ) ;
4083: LD_ADDR_EXP 33
4087: PUSH
4088: LD_STRING Gary
4090: PPUSH
4091: LD_EXP 1
4095: NOT
4096: PPUSH
4097: LD_STRING 11_
4099: PPUSH
4100: CALL 36331 0 3
4104: ST_TO_ADDR
// if Gary then
4105: LD_EXP 33
4109: IFFALSE 4140
// friends := Insert ( friends , friends + 1 , Gary ) ;
4111: LD_ADDR_EXP 4
4115: PUSH
4116: LD_EXP 4
4120: PPUSH
4121: LD_EXP 4
4125: PUSH
4126: LD_INT 1
4128: PLUS
4129: PPUSH
4130: LD_EXP 33
4134: PPUSH
4135: CALL_OW 2
4139: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , ( not debug ) , 11_ ) ;
4140: LD_ADDR_EXP 32
4144: PUSH
4145: LD_STRING Cornell
4147: PPUSH
4148: LD_EXP 1
4152: NOT
4153: PPUSH
4154: LD_STRING 11_
4156: PPUSH
4157: CALL 36331 0 3
4161: ST_TO_ADDR
// if Cornel then
4162: LD_EXP 32
4166: IFFALSE 4197
// friends := Insert ( friends , friends + 1 , Cornel ) ;
4168: LD_ADDR_EXP 4
4172: PUSH
4173: LD_EXP 4
4177: PPUSH
4178: LD_EXP 4
4182: PUSH
4183: LD_INT 1
4185: PLUS
4186: PPUSH
4187: LD_EXP 32
4191: PPUSH
4192: CALL_OW 2
4196: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , 11_ ) ;
4197: LD_ADDR_EXP 31
4201: PUSH
4202: LD_STRING Houten
4204: PPUSH
4205: LD_EXP 1
4209: NOT
4210: PPUSH
4211: LD_STRING 11_
4213: PPUSH
4214: CALL 36331 0 3
4218: ST_TO_ADDR
// if Houten then
4219: LD_EXP 31
4223: IFFALSE 4254
// friends := Insert ( friends , friends + 1 , Houten ) ;
4225: LD_ADDR_EXP 4
4229: PUSH
4230: LD_EXP 4
4234: PPUSH
4235: LD_EXP 4
4239: PUSH
4240: LD_INT 1
4242: PLUS
4243: PPUSH
4244: LD_EXP 31
4248: PPUSH
4249: CALL_OW 2
4253: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 11_ ) ;
4254: LD_ADDR_EXP 30
4258: PUSH
4259: LD_STRING Gladstone
4261: PPUSH
4262: LD_EXP 1
4266: NOT
4267: PPUSH
4268: LD_STRING 11_
4270: PPUSH
4271: CALL 36331 0 3
4275: ST_TO_ADDR
// if Gladstone then
4276: LD_EXP 30
4280: IFFALSE 4311
// friends := Insert ( friends , friends + 1 , Gladstone ) ;
4282: LD_ADDR_EXP 4
4286: PUSH
4287: LD_EXP 4
4291: PPUSH
4292: LD_EXP 4
4296: PUSH
4297: LD_INT 1
4299: PLUS
4300: PPUSH
4301: LD_EXP 30
4305: PPUSH
4306: CALL_OW 2
4310: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 11_ ) ;
4311: LD_ADDR_EXP 24
4315: PUSH
4316: LD_STRING Lisa
4318: PPUSH
4319: LD_EXP 1
4323: NOT
4324: PPUSH
4325: LD_STRING 11_
4327: PPUSH
4328: CALL 36331 0 3
4332: ST_TO_ADDR
// if Lisa then
4333: LD_EXP 24
4337: IFFALSE 4362
// friends := Insert ( friends , 1 , Lisa ) ;
4339: LD_ADDR_EXP 4
4343: PUSH
4344: LD_EXP 4
4348: PPUSH
4349: LD_INT 1
4351: PPUSH
4352: LD_EXP 24
4356: PPUSH
4357: CALL_OW 2
4361: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 11_ ) ;
4362: LD_ADDR_EXP 25
4366: PUSH
4367: LD_STRING Donaldson
4369: PPUSH
4370: LD_EXP 1
4374: NOT
4375: PPUSH
4376: LD_STRING 11_
4378: PPUSH
4379: CALL 36331 0 3
4383: ST_TO_ADDR
// if Donaldson then
4384: LD_EXP 25
4388: IFFALSE 4419
// friends := Insert ( friends , friends + 1 , Donaldson ) ;
4390: LD_ADDR_EXP 4
4394: PUSH
4395: LD_EXP 4
4399: PPUSH
4400: LD_EXP 4
4404: PUSH
4405: LD_INT 1
4407: PLUS
4408: PPUSH
4409: LD_EXP 25
4413: PPUSH
4414: CALL_OW 2
4418: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 11_ ) ;
4419: LD_ADDR_EXP 26
4423: PUSH
4424: LD_STRING Bobby
4426: PPUSH
4427: LD_EXP 1
4431: NOT
4432: PPUSH
4433: LD_STRING 11_
4435: PPUSH
4436: CALL 36331 0 3
4440: ST_TO_ADDR
// if Bobby then
4441: LD_EXP 26
4445: IFFALSE 4476
// friends := Insert ( friends , friends + 1 , Bobby ) ;
4447: LD_ADDR_EXP 4
4451: PUSH
4452: LD_EXP 4
4456: PPUSH
4457: LD_EXP 4
4461: PUSH
4462: LD_INT 1
4464: PLUS
4465: PPUSH
4466: LD_EXP 26
4470: PPUSH
4471: CALL_OW 2
4475: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 11_ ) ;
4476: LD_ADDR_EXP 27
4480: PUSH
4481: LD_STRING Cyrus
4483: PPUSH
4484: LD_EXP 1
4488: NOT
4489: PPUSH
4490: LD_STRING 11_
4492: PPUSH
4493: CALL 36331 0 3
4497: ST_TO_ADDR
// if Cyrus then
4498: LD_EXP 27
4502: IFFALSE 4533
// friends := Insert ( friends , friends + 1 , Cyrus ) ;
4504: LD_ADDR_EXP 4
4508: PUSH
4509: LD_EXP 4
4513: PPUSH
4514: LD_EXP 4
4518: PUSH
4519: LD_INT 1
4521: PLUS
4522: PPUSH
4523: LD_EXP 27
4527: PPUSH
4528: CALL_OW 2
4532: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 11_ ) ;
4533: LD_ADDR_EXP 28
4537: PUSH
4538: LD_STRING Denis
4540: PPUSH
4541: LD_EXP 1
4545: NOT
4546: PPUSH
4547: LD_STRING 11_
4549: PPUSH
4550: CALL 36331 0 3
4554: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , 11_ ) ;
4555: LD_ADDR_EXP 29
4559: PUSH
4560: LD_STRING Brown
4562: PPUSH
4563: LD_EXP 1
4567: NOT
4568: PPUSH
4569: LD_STRING 11_
4571: PPUSH
4572: CALL 36331 0 3
4576: ST_TO_ADDR
// if Brown then
4577: LD_EXP 29
4581: IFFALSE 4612
// friends := Insert ( friends , friends + 1 , Brown ) ;
4583: LD_ADDR_EXP 4
4587: PUSH
4588: LD_EXP 4
4592: PPUSH
4593: LD_EXP 4
4597: PUSH
4598: LD_INT 1
4600: PLUS
4601: PPUSH
4602: LD_EXP 29
4606: PPUSH
4607: CALL_OW 2
4611: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , 10c_ ) ;
4612: LD_ADDR_EXP 39
4616: PUSH
4617: LD_STRING Mike
4619: PPUSH
4620: LD_EXP 1
4624: NOT
4625: PPUSH
4626: LD_STRING 10c_
4628: PPUSH
4629: CALL 36331 0 3
4633: ST_TO_ADDR
// if Mike then
4634: LD_EXP 39
4638: IFFALSE 4679
// begin SetClass ( Mike , class_apeman_engineer ) ;
4640: LD_EXP 39
4644: PPUSH
4645: LD_INT 16
4647: PPUSH
4648: CALL_OW 336
// PlaceUnitXY ( Mike , 180 , 87 , false ) ;
4652: LD_EXP 39
4656: PPUSH
4657: LD_INT 180
4659: PPUSH
4660: LD_INT 87
4662: PPUSH
4663: LD_INT 0
4665: PPUSH
4666: CALL_OW 48
// ComHold ( Mike ) ;
4670: LD_EXP 39
4674: PPUSH
4675: CALL_OW 140
// end ; friends := friends ^ CreateCharacterSet ( 11c_others ) ^ CreateCharacterSet ( 11_others ) ;
4679: LD_ADDR_EXP 4
4683: PUSH
4684: LD_EXP 4
4688: PUSH
4689: LD_STRING 11c_others
4691: PPUSH
4692: CALL_OW 31
4696: ADD
4697: PUSH
4698: LD_STRING 11_others
4700: PPUSH
4701: CALL_OW 31
4705: ADD
4706: ST_TO_ADDR
// if friends < 18 then
4707: LD_EXP 4
4711: PUSH
4712: LD_INT 18
4714: LESS
4715: IFFALSE 4787
// for i = 1 to 18 do
4717: LD_ADDR_VAR 0 2
4721: PUSH
4722: DOUBLE
4723: LD_INT 1
4725: DEC
4726: ST_TO_ADDR
4727: LD_INT 18
4729: PUSH
4730: FOR_TO
4731: IFFALSE 4785
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 7 ) ;
4733: LD_INT 0
4735: PPUSH
4736: LD_INT 1
4738: PPUSH
4739: LD_INT 4
4741: PPUSH
4742: CALL_OW 12
4746: PPUSH
4747: LD_INT 7
4749: PPUSH
4750: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
4754: LD_ADDR_EXP 4
4758: PUSH
4759: LD_EXP 4
4763: PPUSH
4764: LD_EXP 4
4768: PUSH
4769: LD_INT 1
4771: PLUS
4772: PPUSH
4773: CALL_OW 44
4777: PPUSH
4778: CALL_OW 2
4782: ST_TO_ADDR
// end ;
4783: GO 4730
4785: POP
4786: POP
// for i in friends do
4787: LD_ADDR_VAR 0 2
4791: PUSH
4792: LD_EXP 4
4796: PUSH
4797: FOR_IN
4798: IFFALSE 4871
// if GetNation ( i ) = nation_american and GetSkill ( i , 1 ) >= GetSkill ( i , 4 ) then
4800: LD_VAR 0 2
4804: PPUSH
4805: CALL_OW 248
4809: PUSH
4810: LD_INT 1
4812: EQUAL
4813: PUSH
4814: LD_VAR 0 2
4818: PPUSH
4819: LD_INT 1
4821: PPUSH
4822: CALL_OW 259
4826: PUSH
4827: LD_VAR 0 2
4831: PPUSH
4832: LD_INT 4
4834: PPUSH
4835: CALL_OW 259
4839: GREATEREQUAL
4840: AND
4841: IFFALSE 4857
// SetClass ( i , class_soldier ) else
4843: LD_VAR 0 2
4847: PPUSH
4848: LD_INT 1
4850: PPUSH
4851: CALL_OW 336
4855: GO 4869
// SetClass ( i , class_scientistic ) ;
4857: LD_VAR 0 2
4861: PPUSH
4862: LD_INT 4
4864: PPUSH
4865: CALL_OW 336
4869: GO 4797
4871: POP
4872: POP
// if Frank then
4873: LD_EXP 34
4877: IFFALSE 4891
// SetClass ( Frank , class_sniper ) ;
4879: LD_EXP 34
4883: PPUSH
4884: LD_INT 5
4886: PPUSH
4887: CALL_OW 336
// SetClass ( [ Joan , Denis , DeltaDoctor , Simms ] , class_scientistic ) ;
4891: LD_EXP 37
4895: PUSH
4896: LD_EXP 28
4900: PUSH
4901: LD_EXP 38
4905: PUSH
4906: LD_EXP 36
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: LIST
4915: LIST
4916: PPUSH
4917: LD_INT 4
4919: PPUSH
4920: CALL_OW 336
// selected = CharacterSelection (  , 7 , 7 , [ sel_dont_change_class , JMM , Roth , Simms , Denis , DeltaDoctor , sel_not_hired , sel_changeable , sel_change_class ] ^ friends , [ [ class_soldier , 3 ] , [ class_scientistic , 2 , 5 ] , [ class_sniper , 0 , 2 ] ] ) ;
4924: LD_ADDR_EXP 3
4928: PUSH
4929: LD_STRING 
4931: PPUSH
4932: LD_INT 7
4934: PPUSH
4935: LD_INT 7
4937: PPUSH
4938: LD_INT -6
4940: PUSH
4941: LD_EXP 15
4945: PUSH
4946: LD_EXP 16
4950: PUSH
4951: LD_EXP 36
4955: PUSH
4956: LD_EXP 28
4960: PUSH
4961: LD_EXP 38
4965: PUSH
4966: LD_INT -2
4968: PUSH
4969: LD_INT -3
4971: PUSH
4972: LD_INT -5
4974: PUSH
4975: EMPTY
4976: LIST
4977: LIST
4978: LIST
4979: LIST
4980: LIST
4981: LIST
4982: LIST
4983: LIST
4984: LIST
4985: PUSH
4986: LD_EXP 4
4990: ADD
4991: PPUSH
4992: LD_INT 1
4994: PUSH
4995: LD_INT 3
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PUSH
5002: LD_INT 4
5004: PUSH
5005: LD_INT 2
5007: PUSH
5008: LD_INT 5
5010: PUSH
5011: EMPTY
5012: LIST
5013: LIST
5014: LIST
5015: PUSH
5016: LD_INT 5
5018: PUSH
5019: LD_INT 0
5021: PUSH
5022: LD_INT 2
5024: PUSH
5025: EMPTY
5026: LIST
5027: LIST
5028: LIST
5029: PUSH
5030: EMPTY
5031: LIST
5032: LIST
5033: LIST
5034: PPUSH
5035: CALL_OW 42
5039: ST_TO_ADDR
// if Simms then
5040: LD_EXP 36
5044: IFFALSE 5062
// selected := selected ^ Simms ;
5046: LD_ADDR_EXP 3
5050: PUSH
5051: LD_EXP 3
5055: PUSH
5056: LD_EXP 36
5060: ADD
5061: ST_TO_ADDR
// if Denis then
5062: LD_EXP 28
5066: IFFALSE 5084
// selected := selected ^ Denis ;
5068: LD_ADDR_EXP 3
5072: PUSH
5073: LD_EXP 3
5077: PUSH
5078: LD_EXP 28
5082: ADD
5083: ST_TO_ADDR
// if DeltaDoctor then
5084: LD_EXP 38
5088: IFFALSE 5106
// selected := selected ^ DeltaDoctor ;
5090: LD_ADDR_EXP 3
5094: PUSH
5095: LD_EXP 3
5099: PUSH
5100: LD_EXP 38
5104: ADD
5105: ST_TO_ADDR
// if gamma_commander = 1 and Donaldson then
5106: LD_EXP 10
5110: PUSH
5111: LD_INT 1
5113: EQUAL
5114: PUSH
5115: LD_EXP 25
5119: AND
5120: IFFALSE 5132
// gammaCommander := Donaldson ;
5122: LD_ADDR_VAR 0 8
5126: PUSH
5127: LD_EXP 25
5131: ST_TO_ADDR
// if gamma_commander = 2 and Brown then
5132: LD_EXP 10
5136: PUSH
5137: LD_INT 2
5139: EQUAL
5140: PUSH
5141: LD_EXP 29
5145: AND
5146: IFFALSE 5158
// gammaCommander := Brown ;
5148: LD_ADDR_VAR 0 8
5152: PUSH
5153: LD_EXP 29
5157: ST_TO_ADDR
// friends := friends diff selected ;
5158: LD_ADDR_EXP 4
5162: PUSH
5163: LD_EXP 4
5167: PUSH
5168: LD_EXP 3
5172: DIFF
5173: ST_TO_ADDR
// friends := friends diff gammaCommander ;
5174: LD_ADDR_EXP 4
5178: PUSH
5179: LD_EXP 4
5183: PUSH
5184: LD_VAR 0 8
5188: DIFF
5189: ST_TO_ADDR
// buildings := [ [ ambar1 , ambar2 , ambar3 ] , [ amlab2 , amlab3 , amlab4 ] ] ;
5190: LD_ADDR_VAR 0 4
5194: PUSH
5195: LD_INT 111
5197: PUSH
5198: LD_INT 137
5200: PUSH
5201: LD_INT 51
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: LIST
5208: PUSH
5209: LD_INT 147
5211: PUSH
5212: LD_INT 129
5214: PUSH
5215: LD_INT 25
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: LIST
5222: PUSH
5223: EMPTY
5224: LIST
5225: LIST
5226: ST_TO_ADDR
// areas := [ friends_spawn_1 , friends_spawn_2 , friends_spawn_3 , friends_spawn_4 , friends_spawn_5 , friends_spawn_6 ] ;
5227: LD_ADDR_VAR 0 5
5231: PUSH
5232: LD_INT 5
5234: PUSH
5235: LD_INT 6
5237: PUSH
5238: LD_INT 7
5240: PUSH
5241: LD_INT 8
5243: PUSH
5244: LD_INT 17
5246: PUSH
5247: LD_INT 18
5249: PUSH
5250: EMPTY
5251: LIST
5252: LIST
5253: LIST
5254: LIST
5255: LIST
5256: LIST
5257: ST_TO_ADDR
// for i in buildings do
5258: LD_ADDR_VAR 0 2
5262: PUSH
5263: LD_VAR 0 4
5267: PUSH
5268: FOR_IN
5269: IFFALSE 5285
// SetSide ( i , 4 ) ;
5271: LD_VAR 0 2
5275: PPUSH
5276: LD_INT 4
5278: PPUSH
5279: CALL_OW 235
5283: GO 5268
5285: POP
5286: POP
// for i in selected union gammaCommander do
5287: LD_ADDR_VAR 0 2
5291: PUSH
5292: LD_EXP 3
5296: PUSH
5297: LD_VAR 0 8
5301: UNION
5302: PUSH
5303: FOR_IN
5304: IFFALSE 5644
// begin if GetClass ( i ) in [ 1 , 5 ] then
5306: LD_VAR 0 2
5310: PPUSH
5311: CALL_OW 257
5315: PUSH
5316: LD_INT 1
5318: PUSH
5319: LD_INT 5
5321: PUSH
5322: EMPTY
5323: LIST
5324: LIST
5325: IN
5326: IFFALSE 5486
// begin if buildings [ 1 ] then
5328: LD_VAR 0 4
5332: PUSH
5333: LD_INT 1
5335: ARRAY
5336: IFFALSE 5397
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
5338: LD_VAR 0 2
5342: PPUSH
5343: LD_VAR 0 4
5347: PUSH
5348: LD_INT 1
5350: ARRAY
5351: PUSH
5352: LD_INT 1
5354: ARRAY
5355: PPUSH
5356: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
5360: LD_ADDR_VAR 0 4
5364: PUSH
5365: LD_VAR 0 4
5369: PPUSH
5370: LD_INT 1
5372: PPUSH
5373: LD_VAR 0 4
5377: PUSH
5378: LD_INT 1
5380: ARRAY
5381: PPUSH
5382: LD_INT 1
5384: PPUSH
5385: CALL_OW 3
5389: PPUSH
5390: CALL_OW 1
5394: ST_TO_ADDR
// end else
5395: GO 5484
// begin if not areas then
5397: LD_VAR 0 5
5401: NOT
5402: IFFALSE 5436
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5404: LD_VAR 0 2
5408: PPUSH
5409: LD_INT 87
5411: PPUSH
5412: LD_INT 68
5414: PPUSH
5415: LD_INT 8
5417: PPUSH
5418: LD_INT 0
5420: PPUSH
5421: CALL_OW 50
// ComHold ( i ) ;
5425: LD_VAR 0 2
5429: PPUSH
5430: CALL_OW 140
// end else
5434: GO 5484
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5436: LD_VAR 0 2
5440: PPUSH
5441: LD_VAR 0 5
5445: PUSH
5446: LD_INT 1
5448: ARRAY
5449: PPUSH
5450: LD_INT 0
5452: PPUSH
5453: CALL_OW 49
// ComHold ( i ) ;
5457: LD_VAR 0 2
5461: PPUSH
5462: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5466: LD_ADDR_VAR 0 5
5470: PUSH
5471: LD_VAR 0 5
5475: PPUSH
5476: LD_INT 1
5478: PPUSH
5479: CALL_OW 3
5483: ST_TO_ADDR
// end ; end ; end else
5484: GO 5642
// begin if buildings [ 2 ] then
5486: LD_VAR 0 4
5490: PUSH
5491: LD_INT 2
5493: ARRAY
5494: IFFALSE 5555
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
5496: LD_VAR 0 2
5500: PPUSH
5501: LD_VAR 0 4
5505: PUSH
5506: LD_INT 2
5508: ARRAY
5509: PUSH
5510: LD_INT 1
5512: ARRAY
5513: PPUSH
5514: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
5518: LD_ADDR_VAR 0 4
5522: PUSH
5523: LD_VAR 0 4
5527: PPUSH
5528: LD_INT 2
5530: PPUSH
5531: LD_VAR 0 4
5535: PUSH
5536: LD_INT 2
5538: ARRAY
5539: PPUSH
5540: LD_INT 1
5542: PPUSH
5543: CALL_OW 3
5547: PPUSH
5548: CALL_OW 1
5552: ST_TO_ADDR
// end else
5553: GO 5642
// begin if not areas then
5555: LD_VAR 0 5
5559: NOT
5560: IFFALSE 5594
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5562: LD_VAR 0 2
5566: PPUSH
5567: LD_INT 87
5569: PPUSH
5570: LD_INT 68
5572: PPUSH
5573: LD_INT 8
5575: PPUSH
5576: LD_INT 0
5578: PPUSH
5579: CALL_OW 50
// ComHold ( i ) ;
5583: LD_VAR 0 2
5587: PPUSH
5588: CALL_OW 140
// end else
5592: GO 5642
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5594: LD_VAR 0 2
5598: PPUSH
5599: LD_VAR 0 5
5603: PUSH
5604: LD_INT 1
5606: ARRAY
5607: PPUSH
5608: LD_INT 0
5610: PPUSH
5611: CALL_OW 49
// ComHold ( i ) ;
5615: LD_VAR 0 2
5619: PPUSH
5620: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5624: LD_ADDR_VAR 0 5
5628: PUSH
5629: LD_VAR 0 5
5633: PPUSH
5634: LD_INT 1
5636: PPUSH
5637: CALL_OW 3
5641: ST_TO_ADDR
// end ; end ; end ; end ;
5642: GO 5303
5644: POP
5645: POP
// bunkers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) ;
5646: LD_ADDR_VAR 0 6
5650: PUSH
5651: LD_INT 22
5653: PUSH
5654: LD_INT 1
5656: PUSH
5657: EMPTY
5658: LIST
5659: LIST
5660: PUSH
5661: LD_INT 30
5663: PUSH
5664: LD_INT 32
5666: PUSH
5667: EMPTY
5668: LIST
5669: LIST
5670: PUSH
5671: EMPTY
5672: LIST
5673: LIST
5674: PPUSH
5675: CALL_OW 69
5679: ST_TO_ADDR
// for i = bunkers - friends downto 1 do
5680: LD_ADDR_VAR 0 2
5684: PUSH
5685: DOUBLE
5686: LD_VAR 0 6
5690: PUSH
5691: LD_EXP 4
5695: MINUS
5696: INC
5697: ST_TO_ADDR
5698: LD_INT 1
5700: PUSH
5701: FOR_DOWNTO
5702: IFFALSE 5769
// begin PrepareHuman ( false , 1 , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
5704: LD_INT 0
5706: PPUSH
5707: LD_INT 1
5709: PPUSH
5710: LD_INT 7
5712: PUSH
5713: LD_INT 8
5715: PUSH
5716: LD_INT 9
5718: PUSH
5719: LD_INT 10
5721: PUSH
5722: EMPTY
5723: LIST
5724: LIST
5725: LIST
5726: LIST
5727: PUSH
5728: LD_OWVAR 67
5732: ARRAY
5733: PPUSH
5734: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
5738: LD_ADDR_EXP 4
5742: PUSH
5743: LD_EXP 4
5747: PPUSH
5748: LD_EXP 4
5752: PUSH
5753: LD_INT 1
5755: PLUS
5756: PPUSH
5757: CALL_OW 44
5761: PPUSH
5762: CALL_OW 2
5766: ST_TO_ADDR
// end ;
5767: GO 5701
5769: POP
5770: POP
// if friends then
5771: LD_EXP 4
5775: IFFALSE 5891
// begin tmp := friends ;
5777: LD_ADDR_VAR 0 3
5781: PUSH
5782: LD_EXP 4
5786: ST_TO_ADDR
// for i = 1 to bunkers do
5787: LD_ADDR_VAR 0 2
5791: PUSH
5792: DOUBLE
5793: LD_INT 1
5795: DEC
5796: ST_TO_ADDR
5797: LD_VAR 0 6
5801: PUSH
5802: FOR_TO
5803: IFFALSE 5889
// begin SetSide ( tmp [ tmp ] , 1 ) ;
5805: LD_VAR 0 3
5809: PUSH
5810: LD_VAR 0 3
5814: ARRAY
5815: PPUSH
5816: LD_INT 1
5818: PPUSH
5819: CALL_OW 235
// SetClass ( tmp [ tmp ] , 1 ) ;
5823: LD_VAR 0 3
5827: PUSH
5828: LD_VAR 0 3
5832: ARRAY
5833: PPUSH
5834: LD_INT 1
5836: PPUSH
5837: CALL_OW 336
// PlaceHumanInUnit ( tmp [ tmp ] , bunkers [ i ] ) ;
5841: LD_VAR 0 3
5845: PUSH
5846: LD_VAR 0 3
5850: ARRAY
5851: PPUSH
5852: LD_VAR 0 6
5856: PUSH
5857: LD_VAR 0 2
5861: ARRAY
5862: PPUSH
5863: CALL_OW 52
// tmp := Delete ( tmp , tmp ) ;
5867: LD_ADDR_VAR 0 3
5871: PUSH
5872: LD_VAR 0 3
5876: PPUSH
5877: LD_VAR 0 3
5881: PPUSH
5882: CALL_OW 3
5886: ST_TO_ADDR
// end ;
5887: GO 5802
5889: POP
5890: POP
// end ; areas := areas union [ guard_spawn_1 , guard_spawn_2 , guard_spawn_3 , guard_spawn_4 , guard_spawn_5 , guard_spawn_6 , guard_spawn_7 , guard_spawn_8 , guard_spawn_9 , guard_spawn_10 , guard_spawn_11 , guard_spawn_12 , guard_spawn_13 , guard_spawn_14 , guard_spawn_15 , guard_spawn_16 , guard_spawn_17 , guard_spawn_18 , guard_spawn_19 , guard_spawn_20 ] ;
5891: LD_ADDR_VAR 0 5
5895: PUSH
5896: LD_VAR 0 5
5900: PUSH
5901: LD_INT 9
5903: PUSH
5904: LD_INT 10
5906: PUSH
5907: LD_INT 11
5909: PUSH
5910: LD_INT 12
5912: PUSH
5913: LD_INT 13
5915: PUSH
5916: LD_INT 14
5918: PUSH
5919: LD_INT 15
5921: PUSH
5922: LD_INT 16
5924: PUSH
5925: LD_INT 26
5927: PUSH
5928: LD_INT 27
5930: PUSH
5931: LD_INT 28
5933: PUSH
5934: LD_INT 29
5936: PUSH
5937: LD_INT 30
5939: PUSH
5940: LD_INT 31
5942: PUSH
5943: LD_INT 32
5945: PUSH
5946: LD_INT 33
5948: PUSH
5949: LD_INT 34
5951: PUSH
5952: LD_INT 35
5954: PUSH
5955: LD_INT 36
5957: PUSH
5958: LD_INT 37
5960: PUSH
5961: EMPTY
5962: LIST
5963: LIST
5964: LIST
5965: LIST
5966: LIST
5967: LIST
5968: LIST
5969: LIST
5970: LIST
5971: LIST
5972: LIST
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: LIST
5978: LIST
5979: LIST
5980: LIST
5981: LIST
5982: UNION
5983: ST_TO_ADDR
// for i in friends do
5984: LD_ADDR_VAR 0 2
5988: PUSH
5989: LD_EXP 4
5993: PUSH
5994: FOR_IN
5995: IFFALSE 6278
// begin SetTag ( i , 2 ) ;
5997: LD_VAR 0 2
6001: PPUSH
6002: LD_INT 2
6004: PPUSH
6005: CALL_OW 109
// if not GetClass ( i ) in [ class_soldier , class_sniper ] then
6009: LD_VAR 0 2
6013: PPUSH
6014: CALL_OW 257
6018: PUSH
6019: LD_INT 1
6021: PUSH
6022: LD_INT 5
6024: PUSH
6025: EMPTY
6026: LIST
6027: LIST
6028: IN
6029: NOT
6030: IFFALSE 6044
// SetClass ( i , 1 ) ;
6032: LD_VAR 0 2
6036: PPUSH
6037: LD_INT 1
6039: PPUSH
6040: CALL_OW 336
// if GetClass ( i ) in [ class_soldier , class_sniper ] and buildings [ 1 ] then
6044: LD_VAR 0 2
6048: PPUSH
6049: CALL_OW 257
6053: PUSH
6054: LD_INT 1
6056: PUSH
6057: LD_INT 5
6059: PUSH
6060: EMPTY
6061: LIST
6062: LIST
6063: IN
6064: PUSH
6065: LD_VAR 0 4
6069: PUSH
6070: LD_INT 1
6072: ARRAY
6073: AND
6074: IFFALSE 6135
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
6076: LD_VAR 0 2
6080: PPUSH
6081: LD_VAR 0 4
6085: PUSH
6086: LD_INT 1
6088: ARRAY
6089: PUSH
6090: LD_INT 1
6092: ARRAY
6093: PPUSH
6094: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
6098: LD_ADDR_VAR 0 4
6102: PUSH
6103: LD_VAR 0 4
6107: PPUSH
6108: LD_INT 1
6110: PPUSH
6111: LD_VAR 0 4
6115: PUSH
6116: LD_INT 1
6118: ARRAY
6119: PPUSH
6120: LD_INT 1
6122: PPUSH
6123: CALL_OW 3
6127: PPUSH
6128: CALL_OW 1
6132: ST_TO_ADDR
// continue ;
6133: GO 5994
// end ; if GetClass ( i ) = class_scientistic and buildings [ 2 ] then
6135: LD_VAR 0 2
6139: PPUSH
6140: CALL_OW 257
6144: PUSH
6145: LD_INT 4
6147: EQUAL
6148: PUSH
6149: LD_VAR 0 4
6153: PUSH
6154: LD_INT 2
6156: ARRAY
6157: AND
6158: IFFALSE 6219
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
6160: LD_VAR 0 2
6164: PPUSH
6165: LD_VAR 0 4
6169: PUSH
6170: LD_INT 2
6172: ARRAY
6173: PUSH
6174: LD_INT 1
6176: ARRAY
6177: PPUSH
6178: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
6182: LD_ADDR_VAR 0 4
6186: PUSH
6187: LD_VAR 0 4
6191: PPUSH
6192: LD_INT 2
6194: PPUSH
6195: LD_VAR 0 4
6199: PUSH
6200: LD_INT 2
6202: ARRAY
6203: PPUSH
6204: LD_INT 1
6206: PPUSH
6207: CALL_OW 3
6211: PPUSH
6212: CALL_OW 1
6216: ST_TO_ADDR
// continue ;
6217: GO 5994
// end ; PlaceUnitArea ( i , areas [ 1 ] , false ) ;
6219: LD_VAR 0 2
6223: PPUSH
6224: LD_VAR 0 5
6228: PUSH
6229: LD_INT 1
6231: ARRAY
6232: PPUSH
6233: LD_INT 0
6235: PPUSH
6236: CALL_OW 49
// areas := Delete ( areas , 1 ) ;
6240: LD_ADDR_VAR 0 5
6244: PUSH
6245: LD_VAR 0 5
6249: PPUSH
6250: LD_INT 1
6252: PPUSH
6253: CALL_OW 3
6257: ST_TO_ADDR
// ComHold ( i ) ;
6258: LD_VAR 0 2
6262: PPUSH
6263: CALL_OW 140
// if not areas then
6267: LD_VAR 0 5
6271: NOT
6272: IFFALSE 6276
// break ;
6274: GO 6278
// end ;
6276: GO 5994
6278: POP
6279: POP
// if UnitFilter ( friends , [ f_not , [ f_placed ] ] ) then
6280: LD_EXP 4
6284: PPUSH
6285: LD_INT 3
6287: PUSH
6288: LD_INT 52
6290: PUSH
6291: EMPTY
6292: LIST
6293: PUSH
6294: EMPTY
6295: LIST
6296: LIST
6297: PPUSH
6298: CALL_OW 72
6302: IFFALSE 6369
// for i in UnitFilter ( friends , [ f_not , [ f_placed ] ] ) do
6304: LD_ADDR_VAR 0 2
6308: PUSH
6309: LD_EXP 4
6313: PPUSH
6314: LD_INT 3
6316: PUSH
6317: LD_INT 52
6319: PUSH
6320: EMPTY
6321: LIST
6322: PUSH
6323: EMPTY
6324: LIST
6325: LIST
6326: PPUSH
6327: CALL_OW 72
6331: PUSH
6332: FOR_IN
6333: IFFALSE 6367
// begin PlaceUnitXYR ( i , 65 , 58 , 7 , false ) ;
6335: LD_VAR 0 2
6339: PPUSH
6340: LD_INT 65
6342: PPUSH
6343: LD_INT 58
6345: PPUSH
6346: LD_INT 7
6348: PPUSH
6349: LD_INT 0
6351: PPUSH
6352: CALL_OW 50
// ComHold ( i ) ;
6356: LD_VAR 0 2
6360: PPUSH
6361: CALL_OW 140
// end ;
6365: GO 6332
6367: POP
6368: POP
// if Frank then
6369: LD_EXP 34
6373: IFFALSE 6387
// SetClass ( Frank , class_sniper ) ;
6375: LD_EXP 34
6379: PPUSH
6380: LD_INT 5
6382: PPUSH
6383: CALL_OW 336
// end ; end_of_file
6387: LD_VAR 0 1
6391: RET
// export function CanSayRand ( side ) ; begin
6392: LD_INT 0
6394: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6395: LD_ADDR_VAR 0 2
6399: PUSH
6400: LD_INT 52
6402: PUSH
6403: EMPTY
6404: LIST
6405: PUSH
6406: LD_INT 22
6408: PUSH
6409: LD_VAR 0 1
6413: PUSH
6414: EMPTY
6415: LIST
6416: LIST
6417: PUSH
6418: LD_INT 2
6420: PUSH
6421: LD_INT 25
6423: PUSH
6424: LD_INT 1
6426: PUSH
6427: EMPTY
6428: LIST
6429: LIST
6430: PUSH
6431: LD_INT 25
6433: PUSH
6434: LD_INT 2
6436: PUSH
6437: EMPTY
6438: LIST
6439: LIST
6440: PUSH
6441: LD_INT 25
6443: PUSH
6444: LD_INT 3
6446: PUSH
6447: EMPTY
6448: LIST
6449: LIST
6450: PUSH
6451: LD_INT 25
6453: PUSH
6454: LD_INT 4
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: LIST
6465: LIST
6466: LIST
6467: PUSH
6468: EMPTY
6469: LIST
6470: LIST
6471: LIST
6472: PPUSH
6473: CALL_OW 69
6477: PUSH
6478: LD_EXP 15
6482: PUSH
6483: LD_EXP 34
6487: PUSH
6488: LD_EXP 24
6492: PUSH
6493: LD_EXP 25
6497: PUSH
6498: LD_EXP 26
6502: PUSH
6503: LD_EXP 27
6507: PUSH
6508: LD_EXP 28
6512: PUSH
6513: LD_EXP 29
6517: PUSH
6518: LD_EXP 30
6522: PUSH
6523: LD_EXP 31
6527: PUSH
6528: LD_EXP 17
6532: PUSH
6533: LD_EXP 32
6537: PUSH
6538: LD_EXP 33
6542: PUSH
6543: LD_EXP 35
6547: PUSH
6548: EMPTY
6549: LIST
6550: LIST
6551: LIST
6552: LIST
6553: LIST
6554: LIST
6555: LIST
6556: LIST
6557: LIST
6558: LIST
6559: LIST
6560: LIST
6561: LIST
6562: LIST
6563: DIFF
6564: ST_TO_ADDR
// end ;
6565: LD_VAR 0 2
6569: RET
// export function SayRand ( sex , dial ) ; begin
6570: LD_INT 0
6572: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6573: LD_ADDR_VAR 0 3
6577: PUSH
6578: LD_INT 52
6580: PUSH
6581: EMPTY
6582: LIST
6583: PUSH
6584: LD_INT 22
6586: PUSH
6587: LD_INT 1
6589: PUSH
6590: EMPTY
6591: LIST
6592: LIST
6593: PUSH
6594: LD_INT 26
6596: PUSH
6597: LD_VAR 0 1
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: PUSH
6606: LD_INT 2
6608: PUSH
6609: LD_INT 25
6611: PUSH
6612: LD_INT 1
6614: PUSH
6615: EMPTY
6616: LIST
6617: LIST
6618: PUSH
6619: LD_INT 25
6621: PUSH
6622: LD_INT 2
6624: PUSH
6625: EMPTY
6626: LIST
6627: LIST
6628: PUSH
6629: LD_INT 25
6631: PUSH
6632: LD_INT 3
6634: PUSH
6635: EMPTY
6636: LIST
6637: LIST
6638: PUSH
6639: LD_INT 25
6641: PUSH
6642: LD_INT 4
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: PUSH
6656: EMPTY
6657: LIST
6658: LIST
6659: LIST
6660: LIST
6661: PPUSH
6662: CALL_OW 69
6666: PUSH
6667: LD_EXP 15
6671: PUSH
6672: LD_EXP 34
6676: PUSH
6677: LD_EXP 24
6681: PUSH
6682: LD_EXP 25
6686: PUSH
6687: LD_EXP 26
6691: PUSH
6692: LD_EXP 27
6696: PUSH
6697: LD_EXP 28
6701: PUSH
6702: LD_EXP 29
6706: PUSH
6707: LD_EXP 30
6711: PUSH
6712: LD_EXP 31
6716: PUSH
6717: LD_EXP 17
6721: PUSH
6722: LD_EXP 32
6726: PUSH
6727: LD_EXP 33
6731: PUSH
6732: LD_EXP 35
6736: PUSH
6737: EMPTY
6738: LIST
6739: LIST
6740: LIST
6741: LIST
6742: LIST
6743: LIST
6744: LIST
6745: LIST
6746: LIST
6747: LIST
6748: LIST
6749: LIST
6750: LIST
6751: LIST
6752: DIFF
6753: ST_TO_ADDR
// if not result then
6754: LD_VAR 0 3
6758: NOT
6759: IFFALSE 6763
// exit ;
6761: GO 6791
// result := result [ 1 ] ;
6763: LD_ADDR_VAR 0 3
6767: PUSH
6768: LD_VAR 0 3
6772: PUSH
6773: LD_INT 1
6775: ARRAY
6776: ST_TO_ADDR
// Say ( result , dial ) ;
6777: LD_VAR 0 3
6781: PPUSH
6782: LD_VAR 0 2
6786: PPUSH
6787: CALL_OW 88
// end ;
6791: LD_VAR 0 3
6795: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
6796: LD_INT 0
6798: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
6799: LD_ADDR_VAR 0 4
6803: PUSH
6804: LD_INT 22
6806: PUSH
6807: LD_INT 1
6809: PUSH
6810: EMPTY
6811: LIST
6812: LIST
6813: PUSH
6814: LD_INT 26
6816: PUSH
6817: LD_VAR 0 1
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: PUSH
6826: LD_INT 2
6828: PUSH
6829: LD_INT 25
6831: PUSH
6832: LD_INT 1
6834: PUSH
6835: EMPTY
6836: LIST
6837: LIST
6838: PUSH
6839: LD_INT 25
6841: PUSH
6842: LD_INT 2
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: PUSH
6849: LD_INT 25
6851: PUSH
6852: LD_INT 3
6854: PUSH
6855: EMPTY
6856: LIST
6857: LIST
6858: PUSH
6859: LD_INT 25
6861: PUSH
6862: LD_INT 4
6864: PUSH
6865: EMPTY
6866: LIST
6867: LIST
6868: PUSH
6869: EMPTY
6870: LIST
6871: LIST
6872: LIST
6873: LIST
6874: LIST
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: LIST
6880: PPUSH
6881: CALL_OW 69
6885: PUSH
6886: LD_EXP 15
6890: PUSH
6891: LD_EXP 34
6895: PUSH
6896: LD_EXP 24
6900: PUSH
6901: LD_EXP 25
6905: PUSH
6906: LD_EXP 26
6910: PUSH
6911: LD_EXP 27
6915: PUSH
6916: LD_EXP 28
6920: PUSH
6921: LD_EXP 29
6925: PUSH
6926: LD_EXP 30
6930: PUSH
6931: LD_EXP 31
6935: PUSH
6936: LD_EXP 17
6940: PUSH
6941: LD_EXP 32
6945: PUSH
6946: LD_EXP 33
6950: PUSH
6951: LD_EXP 35
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: LIST
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: LIST
6971: PUSH
6972: LD_VAR 0 3
6976: ADD
6977: DIFF
6978: ST_TO_ADDR
// if not result then
6979: LD_VAR 0 4
6983: NOT
6984: IFFALSE 6988
// exit ;
6986: GO 7016
// result := result [ 1 ] ;
6988: LD_ADDR_VAR 0 4
6992: PUSH
6993: LD_VAR 0 4
6997: PUSH
6998: LD_INT 1
7000: ARRAY
7001: ST_TO_ADDR
// Say ( result , dial ) ;
7002: LD_VAR 0 4
7006: PPUSH
7007: LD_VAR 0 2
7011: PPUSH
7012: CALL_OW 88
// end ;
7016: LD_VAR 0 4
7020: RET
// export function Patrol ( unit , path , flags ) ; var i , x , y , c , p , station , tmp_path , status , enemy , e , spot_dist , safe_place , chase_range , need_refuel ; begin
7021: LD_INT 0
7023: PPUSH
7024: PPUSH
7025: PPUSH
7026: PPUSH
7027: PPUSH
7028: PPUSH
7029: PPUSH
7030: PPUSH
7031: PPUSH
7032: PPUSH
7033: PPUSH
7034: PPUSH
7035: PPUSH
7036: PPUSH
7037: PPUSH
// if not unit or not path or GetType ( unit ) = unit_building then
7038: LD_VAR 0 1
7042: NOT
7043: PUSH
7044: LD_VAR 0 2
7048: NOT
7049: OR
7050: PUSH
7051: LD_VAR 0 1
7055: PPUSH
7056: CALL_OW 247
7060: PUSH
7061: LD_INT 3
7063: EQUAL
7064: OR
7065: IFFALSE 7069
// exit ;
7067: GO 8608
// for i = path downto 1 do
7069: LD_ADDR_VAR 0 5
7073: PUSH
7074: DOUBLE
7075: LD_VAR 0 2
7079: INC
7080: ST_TO_ADDR
7081: LD_INT 1
7083: PUSH
7084: FOR_DOWNTO
7085: IFFALSE 7146
// begin if not ValidHex ( path [ i ] [ 1 ] , path [ i ] [ 2 ] ) then
7087: LD_VAR 0 2
7091: PUSH
7092: LD_VAR 0 5
7096: ARRAY
7097: PUSH
7098: LD_INT 1
7100: ARRAY
7101: PPUSH
7102: LD_VAR 0 2
7106: PUSH
7107: LD_VAR 0 5
7111: ARRAY
7112: PUSH
7113: LD_INT 2
7115: ARRAY
7116: PPUSH
7117: CALL_OW 488
7121: NOT
7122: IFFALSE 7144
// path = Delete ( path , i ) ;
7124: LD_ADDR_VAR 0 2
7128: PUSH
7129: LD_VAR 0 2
7133: PPUSH
7134: LD_VAR 0 5
7138: PPUSH
7139: CALL_OW 3
7143: ST_TO_ADDR
// end ;
7144: GO 7084
7146: POP
7147: POP
// if not path then
7148: LD_VAR 0 2
7152: NOT
7153: IFFALSE 7157
// exit ;
7155: GO 8608
// tmp_path := [ ] ;
7157: LD_ADDR_VAR 0 11
7161: PUSH
7162: EMPTY
7163: ST_TO_ADDR
// if flags then
7164: LD_VAR 0 3
7168: IFFALSE 7242
// begin if flags [ 1 ] then
7170: LD_VAR 0 3
7174: PUSH
7175: LD_INT 1
7177: ARRAY
7178: IFFALSE 7194
// safe_place = flags [ 1 ] ;
7180: LD_ADDR_VAR 0 16
7184: PUSH
7185: LD_VAR 0 3
7189: PUSH
7190: LD_INT 1
7192: ARRAY
7193: ST_TO_ADDR
// if flags [ 2 ] then
7194: LD_VAR 0 3
7198: PUSH
7199: LD_INT 2
7201: ARRAY
7202: IFFALSE 7218
// spot_dist = flags [ 2 ] ;
7204: LD_ADDR_VAR 0 15
7208: PUSH
7209: LD_VAR 0 3
7213: PUSH
7214: LD_INT 2
7216: ARRAY
7217: ST_TO_ADDR
// if flags [ 3 ] then
7218: LD_VAR 0 3
7222: PUSH
7223: LD_INT 3
7225: ARRAY
7226: IFFALSE 7242
// chase_range = flags [ 3 ] ;
7228: LD_ADDR_VAR 0 17
7232: PUSH
7233: LD_VAR 0 3
7237: PUSH
7238: LD_INT 3
7240: ARRAY
7241: ST_TO_ADDR
// end ; if not chase_range then
7242: LD_VAR 0 17
7246: NOT
7247: IFFALSE 7257
// chase_range = 8 ;
7249: LD_ADDR_VAR 0 17
7253: PUSH
7254: LD_INT 8
7256: ST_TO_ADDR
// if not spot_dist then
7257: LD_VAR 0 15
7261: NOT
7262: IFFALSE 7272
// spot_dist := 8 ;
7264: LD_ADDR_VAR 0 15
7268: PUSH
7269: LD_INT 8
7271: ST_TO_ADDR
// need_refuel = ( GetType ( unit ) = unit_vehicle and GetEngine ( unit ) <> engine_siberite ) ;
7272: LD_ADDR_VAR 0 18
7276: PUSH
7277: LD_VAR 0 1
7281: PPUSH
7282: CALL_OW 247
7286: PUSH
7287: LD_INT 2
7289: EQUAL
7290: PUSH
7291: LD_VAR 0 1
7295: PPUSH
7296: CALL_OW 262
7300: PUSH
7301: LD_INT 3
7303: NONEQUAL
7304: AND
7305: ST_TO_ADDR
// status = 1 ;
7306: LD_ADDR_VAR 0 12
7310: PUSH
7311: LD_INT 1
7313: ST_TO_ADDR
// tmp_path = [ 1 , path [ 1 ] ] ;
7314: LD_ADDR_VAR 0 11
7318: PUSH
7319: LD_INT 1
7321: PUSH
7322: LD_VAR 0 2
7326: PUSH
7327: LD_INT 1
7329: ARRAY
7330: PUSH
7331: EMPTY
7332: LIST
7333: LIST
7334: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7335: LD_INT 35
7337: PPUSH
7338: CALL_OW 67
// if need_refuel and GetFuel ( unit ) < 20 then
7342: LD_VAR 0 18
7346: PUSH
7347: LD_VAR 0 1
7351: PPUSH
7352: CALL_OW 261
7356: PUSH
7357: LD_INT 20
7359: LESS
7360: AND
7361: IFFALSE 7554
// begin station := FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_oil_mine ] , [ f_btype , b_factory ] ] ] ) ;
7363: LD_ADDR_VAR 0 10
7367: PUSH
7368: LD_INT 22
7370: PUSH
7371: LD_VAR 0 1
7375: PPUSH
7376: CALL_OW 255
7380: PUSH
7381: EMPTY
7382: LIST
7383: LIST
7384: PUSH
7385: LD_INT 2
7387: PUSH
7388: LD_INT 30
7390: PUSH
7391: LD_INT 0
7393: PUSH
7394: EMPTY
7395: LIST
7396: LIST
7397: PUSH
7398: LD_INT 30
7400: PUSH
7401: LD_INT 1
7403: PUSH
7404: EMPTY
7405: LIST
7406: LIST
7407: PUSH
7408: LD_INT 30
7410: PUSH
7411: LD_INT 29
7413: PUSH
7414: EMPTY
7415: LIST
7416: LIST
7417: PUSH
7418: LD_INT 30
7420: PUSH
7421: LD_INT 3
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: PUSH
7428: EMPTY
7429: LIST
7430: LIST
7431: LIST
7432: LIST
7433: LIST
7434: PUSH
7435: EMPTY
7436: LIST
7437: LIST
7438: PPUSH
7439: CALL_OW 69
7443: ST_TO_ADDR
// if not station then
7444: LD_VAR 0 10
7448: NOT
7449: IFFALSE 7465
// begin SetFuel ( unit , 40 ) ;
7451: LD_VAR 0 1
7455: PPUSH
7456: LD_INT 40
7458: PPUSH
7459: CALL_OW 240
// continue ;
7463: GO 7335
// end ; status := 6 ;
7465: LD_ADDR_VAR 0 12
7469: PUSH
7470: LD_INT 6
7472: ST_TO_ADDR
// station := NearestUnitToUnit ( station , unit ) ;
7473: LD_ADDR_VAR 0 10
7477: PUSH
7478: LD_VAR 0 10
7482: PPUSH
7483: LD_VAR 0 1
7487: PPUSH
7488: CALL_OW 74
7492: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7493: LD_INT 35
7495: PPUSH
7496: CALL_OW 67
// ComMoveUnit ( unit , station ) ;
7500: LD_VAR 0 1
7504: PPUSH
7505: LD_VAR 0 10
7509: PPUSH
7510: CALL_OW 112
// until GetDistUnits ( unit , station ) < 6 ;
7514: LD_VAR 0 1
7518: PPUSH
7519: LD_VAR 0 10
7523: PPUSH
7524: CALL_OW 296
7528: PUSH
7529: LD_INT 6
7531: LESS
7532: IFFALSE 7493
// SetFuel ( unit , 100 ) ;
7534: LD_VAR 0 1
7538: PPUSH
7539: LD_INT 100
7541: PPUSH
7542: CALL_OW 240
// status := 5 ;
7546: LD_ADDR_VAR 0 12
7550: PUSH
7551: LD_INT 5
7553: ST_TO_ADDR
// end ; if status = 1 then
7554: LD_VAR 0 12
7558: PUSH
7559: LD_INT 1
7561: EQUAL
7562: IFFALSE 7938
// begin enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] , [ f_dist , unit , spot_dist ] , [ f_see , 1 ] ] ) ;
7564: LD_ADDR_VAR 0 13
7568: PUSH
7569: LD_INT 81
7571: PUSH
7572: LD_VAR 0 1
7576: PPUSH
7577: CALL_OW 255
7581: PUSH
7582: EMPTY
7583: LIST
7584: LIST
7585: PUSH
7586: LD_INT 3
7588: PUSH
7589: LD_INT 21
7591: PUSH
7592: LD_INT 3
7594: PUSH
7595: EMPTY
7596: LIST
7597: LIST
7598: PUSH
7599: EMPTY
7600: LIST
7601: LIST
7602: PUSH
7603: LD_INT 91
7605: PUSH
7606: LD_VAR 0 1
7610: PUSH
7611: LD_VAR 0 15
7615: PUSH
7616: EMPTY
7617: LIST
7618: LIST
7619: LIST
7620: PUSH
7621: LD_INT 101
7623: PUSH
7624: LD_INT 1
7626: PUSH
7627: EMPTY
7628: LIST
7629: LIST
7630: PUSH
7631: EMPTY
7632: LIST
7633: LIST
7634: LIST
7635: LIST
7636: PPUSH
7637: CALL_OW 69
7641: ST_TO_ADDR
// for i in enemy do
7642: LD_ADDR_VAR 0 5
7646: PUSH
7647: LD_VAR 0 13
7651: PUSH
7652: FOR_IN
7653: IFFALSE 7684
// if IsInvisible ( i ) then
7655: LD_VAR 0 5
7659: PPUSH
7660: CALL_OW 571
7664: IFFALSE 7682
// enemy := enemy diff i ;
7666: LD_ADDR_VAR 0 13
7670: PUSH
7671: LD_VAR 0 13
7675: PUSH
7676: LD_VAR 0 5
7680: DIFF
7681: ST_TO_ADDR
7682: GO 7652
7684: POP
7685: POP
// if enemy then
7686: LD_VAR 0 13
7690: IFFALSE 7740
// begin SetRememberedX ( unit , GetX ( unit ) ) ;
7692: LD_VAR 0 1
7696: PPUSH
7697: LD_VAR 0 1
7701: PPUSH
7702: CALL_OW 250
7706: PPUSH
7707: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
7711: LD_VAR 0 1
7715: PPUSH
7716: LD_VAR 0 1
7720: PPUSH
7721: CALL_OW 251
7725: PPUSH
7726: CALL_OW 232
// status = 2 ;
7730: LD_ADDR_VAR 0 12
7734: PUSH
7735: LD_INT 2
7737: ST_TO_ADDR
// end else
7738: GO 7938
// begin if IsAt ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) or not HasTask ( unit ) then
7740: LD_VAR 0 1
7744: PPUSH
7745: LD_VAR 0 11
7749: PUSH
7750: LD_INT 2
7752: ARRAY
7753: PUSH
7754: LD_INT 1
7756: ARRAY
7757: PPUSH
7758: LD_VAR 0 11
7762: PUSH
7763: LD_INT 2
7765: ARRAY
7766: PUSH
7767: LD_INT 2
7769: ARRAY
7770: PPUSH
7771: CALL_OW 307
7775: PUSH
7776: LD_VAR 0 1
7780: PPUSH
7781: CALL_OW 314
7785: NOT
7786: OR
7787: IFFALSE 7938
// begin wait ( 0 0$2 ) ;
7789: LD_INT 70
7791: PPUSH
7792: CALL_OW 67
// if tmp_path [ 1 ] + 1 > path then
7796: LD_VAR 0 11
7800: PUSH
7801: LD_INT 1
7803: ARRAY
7804: PUSH
7805: LD_INT 1
7807: PLUS
7808: PUSH
7809: LD_VAR 0 2
7813: GREATER
7814: IFFALSE 7839
// tmp_path := Replace ( tmp_path , 1 , 1 ) else
7816: LD_ADDR_VAR 0 11
7820: PUSH
7821: LD_VAR 0 11
7825: PPUSH
7826: LD_INT 1
7828: PPUSH
7829: LD_INT 1
7831: PPUSH
7832: CALL_OW 1
7836: ST_TO_ADDR
7837: GO 7870
// tmp_path := Replace ( tmp_path , 1 , tmp_path [ 1 ] + 1 ) ;
7839: LD_ADDR_VAR 0 11
7843: PUSH
7844: LD_VAR 0 11
7848: PPUSH
7849: LD_INT 1
7851: PPUSH
7852: LD_VAR 0 11
7856: PUSH
7857: LD_INT 1
7859: ARRAY
7860: PUSH
7861: LD_INT 1
7863: PLUS
7864: PPUSH
7865: CALL_OW 1
7869: ST_TO_ADDR
// tmp_path := Replace ( tmp_path , 2 , path [ tmp_path [ 1 ] ] ) ;
7870: LD_ADDR_VAR 0 11
7874: PUSH
7875: LD_VAR 0 11
7879: PPUSH
7880: LD_INT 2
7882: PPUSH
7883: LD_VAR 0 2
7887: PUSH
7888: LD_VAR 0 11
7892: PUSH
7893: LD_INT 1
7895: ARRAY
7896: ARRAY
7897: PPUSH
7898: CALL_OW 1
7902: ST_TO_ADDR
// ComAgressiveMove ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) ;
7903: LD_VAR 0 1
7907: PPUSH
7908: LD_VAR 0 11
7912: PUSH
7913: LD_INT 2
7915: ARRAY
7916: PUSH
7917: LD_INT 1
7919: ARRAY
7920: PPUSH
7921: LD_VAR 0 11
7925: PUSH
7926: LD_INT 2
7928: ARRAY
7929: PUSH
7930: LD_INT 2
7932: ARRAY
7933: PPUSH
7934: CALL_OW 114
// end ; end ; end ; if status = 2 then
7938: LD_VAR 0 12
7942: PUSH
7943: LD_INT 2
7945: EQUAL
7946: IFFALSE 8167
// begin if GetLives ( unit ) < 650 and safe_place then
7948: LD_VAR 0 1
7952: PPUSH
7953: CALL_OW 256
7957: PUSH
7958: LD_INT 650
7960: LESS
7961: PUSH
7962: LD_VAR 0 16
7966: AND
7967: IFFALSE 7979
// begin status = 3 ;
7969: LD_ADDR_VAR 0 12
7973: PUSH
7974: LD_INT 3
7976: ST_TO_ADDR
// continue ;
7977: GO 7335
// end ; x := GetRememberedX ( unit ) ;
7979: LD_ADDR_VAR 0 6
7983: PUSH
7984: LD_VAR 0 1
7988: PPUSH
7989: CALL_OW 252
7993: ST_TO_ADDR
// y := GetRememberedY ( unit ) ;
7994: LD_ADDR_VAR 0 7
7998: PUSH
7999: LD_VAR 0 1
8003: PPUSH
8004: CALL_OW 253
8008: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_distxy , x , y , spot_dist ] , [ f_see , 1 ] ] ) ;
8009: LD_ADDR_VAR 0 13
8013: PUSH
8014: LD_INT 81
8016: PUSH
8017: LD_VAR 0 1
8021: PPUSH
8022: CALL_OW 255
8026: PUSH
8027: EMPTY
8028: LIST
8029: LIST
8030: PUSH
8031: LD_INT 92
8033: PUSH
8034: LD_VAR 0 6
8038: PUSH
8039: LD_VAR 0 7
8043: PUSH
8044: LD_VAR 0 15
8048: PUSH
8049: EMPTY
8050: LIST
8051: LIST
8052: LIST
8053: LIST
8054: PUSH
8055: LD_INT 101
8057: PUSH
8058: LD_INT 1
8060: PUSH
8061: EMPTY
8062: LIST
8063: LIST
8064: PUSH
8065: EMPTY
8066: LIST
8067: LIST
8068: LIST
8069: PPUSH
8070: CALL_OW 69
8074: ST_TO_ADDR
// if enemy then
8075: LD_VAR 0 13
8079: IFFALSE 8150
// begin e := NearestUnitToUnit ( enemy , unit ) ;
8081: LD_ADDR_VAR 0 14
8085: PUSH
8086: LD_VAR 0 13
8090: PPUSH
8091: LD_VAR 0 1
8095: PPUSH
8096: CALL_OW 74
8100: ST_TO_ADDR
// if GetDistUnitXY ( e , x , y ) < spot_dist + chase_range then
8101: LD_VAR 0 14
8105: PPUSH
8106: LD_VAR 0 6
8110: PPUSH
8111: LD_VAR 0 7
8115: PPUSH
8116: CALL_OW 297
8120: PUSH
8121: LD_VAR 0 15
8125: PUSH
8126: LD_VAR 0 17
8130: PLUS
8131: LESS
8132: IFFALSE 8148
// ComAttackUnit ( unit , e ) ;
8134: LD_VAR 0 1
8138: PPUSH
8139: LD_VAR 0 14
8143: PPUSH
8144: CALL_OW 115
// end else
8148: GO 8167
// begin ComStop ( unit ) ;
8150: LD_VAR 0 1
8154: PPUSH
8155: CALL_OW 141
// status = 5 ;
8159: LD_ADDR_VAR 0 12
8163: PUSH
8164: LD_INT 5
8166: ST_TO_ADDR
// end ; end ; if status = 3 and safe_place then
8167: LD_VAR 0 12
8171: PUSH
8172: LD_INT 3
8174: EQUAL
8175: PUSH
8176: LD_VAR 0 16
8180: AND
8181: IFFALSE 8267
// begin repeat ComMoveXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) ;
8183: LD_VAR 0 1
8187: PPUSH
8188: LD_VAR 0 16
8192: PUSH
8193: LD_INT 1
8195: ARRAY
8196: PPUSH
8197: LD_VAR 0 16
8201: PUSH
8202: LD_INT 2
8204: ARRAY
8205: PPUSH
8206: CALL_OW 111
// wait ( 0 0$1 ) ;
8210: LD_INT 35
8212: PPUSH
8213: CALL_OW 67
// until GetDistUnitXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) < 4 ;
8217: LD_VAR 0 1
8221: PPUSH
8222: LD_VAR 0 16
8226: PUSH
8227: LD_INT 1
8229: ARRAY
8230: PPUSH
8231: LD_VAR 0 16
8235: PUSH
8236: LD_INT 2
8238: ARRAY
8239: PPUSH
8240: CALL_OW 297
8244: PUSH
8245: LD_INT 4
8247: LESS
8248: IFFALSE 8183
// ComStop ( unit ) ;
8250: LD_VAR 0 1
8254: PPUSH
8255: CALL_OW 141
// status = 4 ;
8259: LD_ADDR_VAR 0 12
8263: PUSH
8264: LD_INT 4
8266: ST_TO_ADDR
// end ; if status = 4 then
8267: LD_VAR 0 12
8271: PUSH
8272: LD_INT 4
8274: EQUAL
8275: IFFALSE 8307
// begin repeat wait ( 0 0$1 ) ;
8277: LD_INT 35
8279: PPUSH
8280: CALL_OW 67
// until GetLives ( unit ) = 1000 ;
8284: LD_VAR 0 1
8288: PPUSH
8289: CALL_OW 256
8293: PUSH
8294: LD_INT 1000
8296: EQUAL
8297: IFFALSE 8277
// status = 5 ;
8299: LD_ADDR_VAR 0 12
8303: PUSH
8304: LD_INT 5
8306: ST_TO_ADDR
// end ; if status = 5 then
8307: LD_VAR 0 12
8311: PUSH
8312: LD_INT 5
8314: EQUAL
8315: IFFALSE 8597
// begin p := 999 ;
8317: LD_ADDR_VAR 0 9
8321: PUSH
8322: LD_INT 999
8324: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ] ;
8325: LD_ADDR_VAR 0 14
8329: PUSH
8330: LD_VAR 0 11
8334: PUSH
8335: LD_INT 2
8337: ARRAY
8338: PUSH
8339: LD_INT 1
8341: ARRAY
8342: PUSH
8343: LD_VAR 0 11
8347: PUSH
8348: LD_INT 2
8350: ARRAY
8351: PUSH
8352: LD_INT 2
8354: ARRAY
8355: PUSH
8356: EMPTY
8357: LIST
8358: LIST
8359: ST_TO_ADDR
// c := 1 ;
8360: LD_ADDR_VAR 0 8
8364: PUSH
8365: LD_INT 1
8367: ST_TO_ADDR
// for i = 1 to tmp_path [ 2 ] div 2 do
8368: LD_ADDR_VAR 0 5
8372: PUSH
8373: DOUBLE
8374: LD_INT 1
8376: DEC
8377: ST_TO_ADDR
8378: LD_VAR 0 11
8382: PUSH
8383: LD_INT 2
8385: ARRAY
8386: PUSH
8387: LD_INT 2
8389: DIV
8390: PUSH
8391: FOR_TO
8392: IFFALSE 8524
// begin x := GetDistUnitXY ( unit , tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ) ;
8394: LD_ADDR_VAR 0 6
8398: PUSH
8399: LD_VAR 0 1
8403: PPUSH
8404: LD_VAR 0 11
8408: PUSH
8409: LD_INT 2
8411: ARRAY
8412: PUSH
8413: LD_VAR 0 8
8417: ARRAY
8418: PPUSH
8419: LD_VAR 0 11
8423: PUSH
8424: LD_INT 2
8426: ARRAY
8427: PUSH
8428: LD_VAR 0 8
8432: PUSH
8433: LD_INT 1
8435: PLUS
8436: ARRAY
8437: PPUSH
8438: CALL_OW 297
8442: ST_TO_ADDR
// if x < p then
8443: LD_VAR 0 6
8447: PUSH
8448: LD_VAR 0 9
8452: LESS
8453: IFFALSE 8508
// begin p := x ;
8455: LD_ADDR_VAR 0 9
8459: PUSH
8460: LD_VAR 0 6
8464: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ] ;
8465: LD_ADDR_VAR 0 14
8469: PUSH
8470: LD_VAR 0 11
8474: PUSH
8475: LD_INT 2
8477: ARRAY
8478: PUSH
8479: LD_VAR 0 8
8483: ARRAY
8484: PUSH
8485: LD_VAR 0 11
8489: PUSH
8490: LD_INT 2
8492: ARRAY
8493: PUSH
8494: LD_VAR 0 8
8498: PUSH
8499: LD_INT 1
8501: PLUS
8502: ARRAY
8503: PUSH
8504: EMPTY
8505: LIST
8506: LIST
8507: ST_TO_ADDR
// end ; c = c + 2 ;
8508: LD_ADDR_VAR 0 8
8512: PUSH
8513: LD_VAR 0 8
8517: PUSH
8518: LD_INT 2
8520: PLUS
8521: ST_TO_ADDR
// end ;
8522: GO 8391
8524: POP
8525: POP
// repeat ComMoveXY ( unit , e [ 1 ] , e [ 2 ] ) ;
8526: LD_VAR 0 1
8530: PPUSH
8531: LD_VAR 0 14
8535: PUSH
8536: LD_INT 1
8538: ARRAY
8539: PPUSH
8540: LD_VAR 0 14
8544: PUSH
8545: LD_INT 2
8547: ARRAY
8548: PPUSH
8549: CALL_OW 111
// wait ( 0 0$1 ) ;
8553: LD_INT 35
8555: PPUSH
8556: CALL_OW 67
// until IsAt ( unit , e [ 1 ] , e [ 2 ] ) ;
8560: LD_VAR 0 1
8564: PPUSH
8565: LD_VAR 0 14
8569: PUSH
8570: LD_INT 1
8572: ARRAY
8573: PPUSH
8574: LD_VAR 0 14
8578: PUSH
8579: LD_INT 2
8581: ARRAY
8582: PPUSH
8583: CALL_OW 307
8587: IFFALSE 8526
// status = 1 ;
8589: LD_ADDR_VAR 0 12
8593: PUSH
8594: LD_INT 1
8596: ST_TO_ADDR
// end ; until IsDead ( unit ) ;
8597: LD_VAR 0 1
8601: PPUSH
8602: CALL_OW 301
8606: IFFALSE 7335
// end ;
8608: LD_VAR 0 4
8612: RET
// export function Talk ( units , type , sequence , sex , class , id , order_id ) ; var i , unit , tmp , unit_id , dialog_id , sex_id , class_id ; begin
8613: LD_INT 0
8615: PPUSH
8616: PPUSH
8617: PPUSH
8618: PPUSH
8619: PPUSH
8620: PPUSH
8621: PPUSH
8622: PPUSH
// if not units or not sequence or not sex in [ sex_male , sex_female , 0 ] or not id or not order_id then
8623: LD_VAR 0 1
8627: NOT
8628: PUSH
8629: LD_VAR 0 3
8633: NOT
8634: OR
8635: PUSH
8636: LD_VAR 0 4
8640: PUSH
8641: LD_INT 1
8643: PUSH
8644: LD_INT 2
8646: PUSH
8647: LD_INT 0
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: LIST
8654: IN
8655: NOT
8656: OR
8657: PUSH
8658: LD_VAR 0 6
8662: NOT
8663: OR
8664: PUSH
8665: LD_VAR 0 7
8669: NOT
8670: OR
8671: IFFALSE 8675
// exit ;
8673: GO 9066
// sex_id :=  ;
8675: LD_ADDR_VAR 0 14
8679: PUSH
8680: LD_STRING 
8682: ST_TO_ADDR
// case class of 1 :
8683: LD_VAR 0 5
8687: PUSH
8688: LD_INT 1
8690: DOUBLE
8691: EQUAL
8692: IFTRUE 8696
8694: GO 8707
8696: POP
// class_id := Sol ; 2 :
8697: LD_ADDR_VAR 0 15
8701: PUSH
8702: LD_STRING Sol
8704: ST_TO_ADDR
8705: GO 8765
8707: LD_INT 2
8709: DOUBLE
8710: EQUAL
8711: IFTRUE 8715
8713: GO 8726
8715: POP
// class_id := Eng ; 3 :
8716: LD_ADDR_VAR 0 15
8720: PUSH
8721: LD_STRING Eng
8723: ST_TO_ADDR
8724: GO 8765
8726: LD_INT 3
8728: DOUBLE
8729: EQUAL
8730: IFTRUE 8734
8732: GO 8745
8734: POP
// class_id := Mech ; 4 :
8735: LD_ADDR_VAR 0 15
8739: PUSH
8740: LD_STRING Mech
8742: ST_TO_ADDR
8743: GO 8765
8745: LD_INT 4
8747: DOUBLE
8748: EQUAL
8749: IFTRUE 8753
8751: GO 8764
8753: POP
// class_id := Sci ; end ;
8754: LD_ADDR_VAR 0 15
8758: PUSH
8759: LD_STRING Sci
8761: ST_TO_ADDR
8762: GO 8765
8764: POP
// tmp := UnitFilter ( units , [ f_class , class ] ) ;
8765: LD_ADDR_VAR 0 11
8769: PUSH
8770: LD_VAR 0 1
8774: PPUSH
8775: LD_INT 25
8777: PUSH
8778: LD_VAR 0 5
8782: PUSH
8783: EMPTY
8784: LIST
8785: LIST
8786: PPUSH
8787: CALL_OW 72
8791: ST_TO_ADDR
// if tmp then
8792: LD_VAR 0 11
8796: IFFALSE 8808
// units := tmp ;
8798: LD_ADDR_VAR 0 1
8802: PUSH
8803: LD_VAR 0 11
8807: ST_TO_ADDR
// if sex then
8808: LD_VAR 0 4
8812: IFFALSE 8868
// begin if sex = sex_female then
8814: LD_VAR 0 4
8818: PUSH
8819: LD_INT 2
8821: EQUAL
8822: IFFALSE 8832
// sex_id := F ;
8824: LD_ADDR_VAR 0 14
8828: PUSH
8829: LD_STRING F
8831: ST_TO_ADDR
// units := UnitFilter ( units , [ f_sex , sex ] ) ;
8832: LD_ADDR_VAR 0 1
8836: PUSH
8837: LD_VAR 0 1
8841: PPUSH
8842: LD_INT 26
8844: PUSH
8845: LD_VAR 0 4
8849: PUSH
8850: EMPTY
8851: LIST
8852: LIST
8853: PPUSH
8854: CALL_OW 72
8858: ST_TO_ADDR
// if not units then
8859: LD_VAR 0 1
8863: NOT
8864: IFFALSE 8868
// exit ;
8866: GO 9066
// end ; unit_id := id ;
8868: LD_ADDR_VAR 0 12
8872: PUSH
8873: LD_VAR 0 6
8877: ST_TO_ADDR
// if unit_id > units then
8878: LD_VAR 0 12
8882: PUSH
8883: LD_VAR 0 1
8887: GREATER
8888: IFFALSE 8898
// unit_id := 1 ;
8890: LD_ADDR_VAR 0 12
8894: PUSH
8895: LD_INT 1
8897: ST_TO_ADDR
// if not units [ unit_id ] then
8898: LD_VAR 0 1
8902: PUSH
8903: LD_VAR 0 12
8907: ARRAY
8908: NOT
8909: IFFALSE 8913
// exit ;
8911: GO 9066
// unit := units [ unit_id ] ;
8913: LD_ADDR_VAR 0 10
8917: PUSH
8918: LD_VAR 0 1
8922: PUSH
8923: LD_VAR 0 12
8927: ARRAY
8928: ST_TO_ADDR
// dialog_id := D & sequence & - & sex_id & class_id & id & - & order_id ;
8929: LD_ADDR_VAR 0 13
8933: PUSH
8934: LD_STRING D
8936: PUSH
8937: LD_VAR 0 3
8941: STR
8942: PUSH
8943: LD_STRING -
8945: STR
8946: PUSH
8947: LD_VAR 0 14
8951: STR
8952: PUSH
8953: LD_VAR 0 15
8957: STR
8958: PUSH
8959: LD_VAR 0 6
8963: STR
8964: PUSH
8965: LD_STRING -
8967: STR
8968: PUSH
8969: LD_VAR 0 7
8973: STR
8974: ST_TO_ADDR
// case type of 0 :
8975: LD_VAR 0 2
8979: PUSH
8980: LD_INT 0
8982: DOUBLE
8983: EQUAL
8984: IFTRUE 8988
8986: GO 9005
8988: POP
// Say ( unit , dialog_id ) ; 1 :
8989: LD_VAR 0 10
8993: PPUSH
8994: LD_VAR 0 13
8998: PPUSH
8999: CALL_OW 88
9003: GO 9056
9005: LD_INT 1
9007: DOUBLE
9008: EQUAL
9009: IFTRUE 9013
9011: GO 9030
9013: POP
// SayRadio ( unit , dialog_id ) ; 2 :
9014: LD_VAR 0 10
9018: PPUSH
9019: LD_VAR 0 13
9023: PPUSH
9024: CALL_OW 94
9028: GO 9056
9030: LD_INT 2
9032: DOUBLE
9033: EQUAL
9034: IFTRUE 9038
9036: GO 9055
9038: POP
// ForceSay ( unit , dialog_id ) ; end ;
9039: LD_VAR 0 10
9043: PPUSH
9044: LD_VAR 0 13
9048: PPUSH
9049: CALL_OW 91
9053: GO 9056
9055: POP
// result := unit ;
9056: LD_ADDR_VAR 0 8
9060: PUSH
9061: LD_VAR 0 10
9065: ST_TO_ADDR
// end ;
9066: LD_VAR 0 8
9070: RET
// export function IsNearbyEntrance ( unit , building , distance ) ; var i , entrance ; begin
9071: LD_INT 0
9073: PPUSH
9074: PPUSH
9075: PPUSH
// result := false ;
9076: LD_ADDR_VAR 0 4
9080: PUSH
9081: LD_INT 0
9083: ST_TO_ADDR
// if not unit or not building or IsInUnit ( unit ) then
9084: LD_VAR 0 1
9088: NOT
9089: PUSH
9090: LD_VAR 0 2
9094: NOT
9095: OR
9096: PUSH
9097: LD_VAR 0 1
9101: PPUSH
9102: CALL_OW 310
9106: OR
9107: IFFALSE 9111
// exit ;
9109: GO 9315
// if distance < 0 then
9111: LD_VAR 0 3
9115: PUSH
9116: LD_INT 0
9118: LESS
9119: IFFALSE 9129
// distance := 0 ;
9121: LD_ADDR_VAR 0 3
9125: PUSH
9126: LD_INT 0
9128: ST_TO_ADDR
// entrance := GetBuildingHexes ( GetBType ( building ) , GetX ( building ) , GetY ( building ) , GetDir ( building ) , GetNation ( building ) , 1 ) ;
9129: LD_ADDR_VAR 0 6
9133: PUSH
9134: LD_VAR 0 2
9138: PPUSH
9139: CALL_OW 266
9143: PPUSH
9144: LD_VAR 0 2
9148: PPUSH
9149: CALL_OW 250
9153: PPUSH
9154: LD_VAR 0 2
9158: PPUSH
9159: CALL_OW 251
9163: PPUSH
9164: LD_VAR 0 2
9168: PPUSH
9169: CALL_OW 254
9173: PPUSH
9174: LD_VAR 0 2
9178: PPUSH
9179: CALL_OW 248
9183: PPUSH
9184: LD_INT 1
9186: PPUSH
9187: CALL 50639 0 6
9191: ST_TO_ADDR
// if not entrance then
9192: LD_VAR 0 6
9196: NOT
9197: IFFALSE 9201
// exit ;
9199: GO 9315
// for i in entrance do
9201: LD_ADDR_VAR 0 5
9205: PUSH
9206: LD_VAR 0 6
9210: PUSH
9211: FOR_IN
9212: IFFALSE 9313
// begin if not distance then
9214: LD_VAR 0 3
9218: NOT
9219: IFFALSE 9264
// begin if IsAt ( unit , i [ 1 ] , i [ 2 ] ) then
9221: LD_VAR 0 1
9225: PPUSH
9226: LD_VAR 0 5
9230: PUSH
9231: LD_INT 1
9233: ARRAY
9234: PPUSH
9235: LD_VAR 0 5
9239: PUSH
9240: LD_INT 2
9242: ARRAY
9243: PPUSH
9244: CALL_OW 307
9248: IFFALSE 9262
// begin result := true ;
9250: LD_ADDR_VAR 0 4
9254: PUSH
9255: LD_INT 1
9257: ST_TO_ADDR
// exit ;
9258: POP
9259: POP
9260: GO 9315
// end ; end else
9262: GO 9311
// begin if GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) <= distance then
9264: LD_VAR 0 1
9268: PPUSH
9269: LD_VAR 0 5
9273: PUSH
9274: LD_INT 1
9276: ARRAY
9277: PPUSH
9278: LD_VAR 0 5
9282: PUSH
9283: LD_INT 2
9285: ARRAY
9286: PPUSH
9287: CALL_OW 297
9291: PUSH
9292: LD_VAR 0 3
9296: LESSEQUAL
9297: IFFALSE 9311
// begin result := true ;
9299: LD_ADDR_VAR 0 4
9303: PUSH
9304: LD_INT 1
9306: ST_TO_ADDR
// exit ;
9307: POP
9308: POP
9309: GO 9315
// end ; end ; end ;
9311: GO 9211
9313: POP
9314: POP
// end ;
9315: LD_VAR 0 4
9319: RET
// export function CanSpot ( unit , unit2 ) ; var i , building ; begin
9320: LD_INT 0
9322: PPUSH
9323: PPUSH
9324: PPUSH
// result := false ;
9325: LD_ADDR_VAR 0 3
9329: PUSH
9330: LD_INT 0
9332: ST_TO_ADDR
// if not unit or not unit2 or not IsOk ( unit ) or not IsOk ( unit2 ) then
9333: LD_VAR 0 1
9337: NOT
9338: PUSH
9339: LD_VAR 0 2
9343: NOT
9344: OR
9345: PUSH
9346: LD_VAR 0 1
9350: PPUSH
9351: CALL_OW 302
9355: NOT
9356: OR
9357: PUSH
9358: LD_VAR 0 2
9362: PPUSH
9363: CALL_OW 302
9367: NOT
9368: OR
9369: IFFALSE 9373
// exit ;
9371: GO 9534
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] ] ) , unit ) ) < 8 then
9373: LD_VAR 0 1
9377: PPUSH
9378: LD_INT 81
9380: PUSH
9381: LD_VAR 0 1
9385: PPUSH
9386: CALL_OW 255
9390: PUSH
9391: EMPTY
9392: LIST
9393: LIST
9394: PUSH
9395: LD_INT 3
9397: PUSH
9398: LD_INT 21
9400: PUSH
9401: LD_INT 3
9403: PUSH
9404: EMPTY
9405: LIST
9406: LIST
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: PUSH
9412: EMPTY
9413: LIST
9414: LIST
9415: PPUSH
9416: CALL_OW 69
9420: PPUSH
9421: LD_VAR 0 1
9425: PPUSH
9426: CALL_OW 74
9430: PPUSH
9431: CALL_OW 296
9435: PUSH
9436: LD_INT 8
9438: LESS
9439: IFFALSE 9443
// exit ;
9441: GO 9534
// building := IsInUnit ( unit2 ) ;
9443: LD_ADDR_VAR 0 5
9447: PUSH
9448: LD_VAR 0 2
9452: PPUSH
9453: CALL_OW 310
9457: ST_TO_ADDR
// if building then
9458: LD_VAR 0 5
9462: IFFALSE 9489
// result := IsNearbyEntrance ( unit , building , 2 ) else
9464: LD_ADDR_VAR 0 3
9468: PUSH
9469: LD_VAR 0 1
9473: PPUSH
9474: LD_VAR 0 5
9478: PPUSH
9479: LD_INT 2
9481: PPUSH
9482: CALL 9071 0 3
9486: ST_TO_ADDR
9487: GO 9534
// result := ( GetDistUnits ( unit , unit2 ) < 6 and See ( GetSide ( unit2 ) , unit ) ) ;
9489: LD_ADDR_VAR 0 3
9493: PUSH
9494: LD_VAR 0 1
9498: PPUSH
9499: LD_VAR 0 2
9503: PPUSH
9504: CALL_OW 296
9508: PUSH
9509: LD_INT 6
9511: LESS
9512: PUSH
9513: LD_VAR 0 2
9517: PPUSH
9518: CALL_OW 255
9522: PPUSH
9523: LD_VAR 0 1
9527: PPUSH
9528: CALL_OW 292
9532: AND
9533: ST_TO_ADDR
// end ;
9534: LD_VAR 0 3
9538: RET
// export function CreateNature ; var i , animal , nat_area ; begin
9539: LD_INT 0
9541: PPUSH
9542: PPUSH
9543: PPUSH
9544: PPUSH
// uc_side = 0 ;
9545: LD_ADDR_OWVAR 20
9549: PUSH
9550: LD_INT 0
9552: ST_TO_ADDR
// uc_nation = 0 ;
9553: LD_ADDR_OWVAR 21
9557: PUSH
9558: LD_INT 0
9560: ST_TO_ADDR
// nat_area := nature_area ;
9561: LD_ADDR_VAR 0 4
9565: PUSH
9566: LD_INT 24
9568: ST_TO_ADDR
// InitHc ;
9569: CALL_OW 19
// for i = 1 to 4 do
9573: LD_ADDR_VAR 0 2
9577: PUSH
9578: DOUBLE
9579: LD_INT 1
9581: DEC
9582: ST_TO_ADDR
9583: LD_INT 4
9585: PUSH
9586: FOR_TO
9587: IFFALSE 9634
// begin hc_class = 18 ;
9589: LD_ADDR_OWVAR 28
9593: PUSH
9594: LD_INT 18
9596: ST_TO_ADDR
// hc_gallery =  ;
9597: LD_ADDR_OWVAR 33
9601: PUSH
9602: LD_STRING 
9604: ST_TO_ADDR
// animal := CreateHuman ;
9605: LD_ADDR_VAR 0 3
9609: PUSH
9610: CALL_OW 44
9614: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9615: LD_VAR 0 3
9619: PPUSH
9620: LD_VAR 0 4
9624: PPUSH
9625: LD_INT 0
9627: PPUSH
9628: CALL_OW 49
// end ;
9632: GO 9586
9634: POP
9635: POP
// for i = 1 to 3 do
9636: LD_ADDR_VAR 0 2
9640: PUSH
9641: DOUBLE
9642: LD_INT 1
9644: DEC
9645: ST_TO_ADDR
9646: LD_INT 3
9648: PUSH
9649: FOR_TO
9650: IFFALSE 9744
// begin hc_class = class_apeman ;
9652: LD_ADDR_OWVAR 28
9656: PUSH
9657: LD_INT 12
9659: ST_TO_ADDR
// hc_gallery =  ;
9660: LD_ADDR_OWVAR 33
9664: PUSH
9665: LD_STRING 
9667: ST_TO_ADDR
// hc_agressivity = 0 ;
9668: LD_ADDR_OWVAR 35
9672: PUSH
9673: LD_INT 0
9675: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
9676: LD_ADDR_OWVAR 31
9680: PUSH
9681: LD_INT 1
9683: PPUSH
9684: LD_INT 3
9686: PPUSH
9687: CALL_OW 12
9691: PUSH
9692: LD_INT 1
9694: PPUSH
9695: LD_INT 3
9697: PPUSH
9698: CALL_OW 12
9702: PUSH
9703: LD_INT 0
9705: PUSH
9706: LD_INT 0
9708: PUSH
9709: EMPTY
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: ST_TO_ADDR
// animal := CreateHuman ;
9715: LD_ADDR_VAR 0 3
9719: PUSH
9720: CALL_OW 44
9724: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9725: LD_VAR 0 3
9729: PPUSH
9730: LD_VAR 0 4
9734: PPUSH
9735: LD_INT 0
9737: PPUSH
9738: CALL_OW 49
// end ;
9742: GO 9649
9744: POP
9745: POP
// for i = 1 to 3 do
9746: LD_ADDR_VAR 0 2
9750: PUSH
9751: DOUBLE
9752: LD_INT 1
9754: DEC
9755: ST_TO_ADDR
9756: LD_INT 3
9758: PUSH
9759: FOR_TO
9760: IFFALSE 9807
// begin hc_class = 13 ;
9762: LD_ADDR_OWVAR 28
9766: PUSH
9767: LD_INT 13
9769: ST_TO_ADDR
// hc_gallery =  ;
9770: LD_ADDR_OWVAR 33
9774: PUSH
9775: LD_STRING 
9777: ST_TO_ADDR
// animal := CreateHuman ;
9778: LD_ADDR_VAR 0 3
9782: PUSH
9783: CALL_OW 44
9787: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9788: LD_VAR 0 3
9792: PPUSH
9793: LD_VAR 0 4
9797: PPUSH
9798: LD_INT 0
9800: PPUSH
9801: CALL_OW 49
// end ;
9805: GO 9759
9807: POP
9808: POP
// for i = 1 to 3 do
9809: LD_ADDR_VAR 0 2
9813: PUSH
9814: DOUBLE
9815: LD_INT 1
9817: DEC
9818: ST_TO_ADDR
9819: LD_INT 3
9821: PUSH
9822: FOR_TO
9823: IFFALSE 9868
// begin hc_class = 20 ;
9825: LD_ADDR_OWVAR 28
9829: PUSH
9830: LD_INT 20
9832: ST_TO_ADDR
// hc_gallery =  ;
9833: LD_ADDR_OWVAR 33
9837: PUSH
9838: LD_STRING 
9840: ST_TO_ADDR
// animal := CreateHuman ;
9841: LD_ADDR_VAR 0 3
9845: PUSH
9846: CALL_OW 44
9850: ST_TO_ADDR
// PlaceUnitArea ( animal , lake_area , false ) ;
9851: LD_VAR 0 3
9855: PPUSH
9856: LD_INT 4
9858: PPUSH
9859: LD_INT 0
9861: PPUSH
9862: CALL_OW 49
// end ;
9866: GO 9822
9868: POP
9869: POP
// end ; end_of_file
9870: LD_VAR 0 1
9874: RET
// export function Action ; begin
9875: LD_INT 0
9877: PPUSH
// InGameOn ;
9878: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
9882: LD_EXP 15
9886: PPUSH
9887: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
9891: LD_EXP 15
9895: PPUSH
9896: LD_STRING D1-JMM-1
9898: PPUSH
9899: CALL_OW 88
// Say ( Roth , D1-Roth-1 ) ;
9903: LD_EXP 16
9907: PPUSH
9908: LD_STRING D1-Roth-1
9910: PPUSH
9911: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
9915: LD_EXP 15
9919: PPUSH
9920: LD_STRING D1-JMM-2
9922: PPUSH
9923: CALL_OW 88
// Say ( Roth , D1-Roth-2 ) ;
9927: LD_EXP 16
9931: PPUSH
9932: LD_STRING D1-Roth-2
9934: PPUSH
9935: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9939: LD_EXP 15
9943: PPUSH
9944: LD_STRING D1-JMM-3
9946: PPUSH
9947: CALL_OW 88
// Say ( Roth , D1-Roth-3 ) ;
9951: LD_EXP 16
9955: PPUSH
9956: LD_STRING D1-Roth-3
9958: PPUSH
9959: CALL_OW 88
// ComInvisible ( Roth ) ;
9963: LD_EXP 16
9967: PPUSH
9968: CALL_OW 152
// wait ( 0 0$1.3 ) ;
9972: LD_INT 46
9974: PPUSH
9975: CALL_OW 67
// Say ( JMM , D1-JMM-4 ) ;
9979: LD_EXP 15
9983: PPUSH
9984: LD_STRING D1-JMM-4
9986: PPUSH
9987: CALL_OW 88
// wait ( 0 0$0.3 ) ;
9991: LD_INT 10
9993: PPUSH
9994: CALL_OW 67
// ComTurnUnit ( Roth , JMM ) ;
9998: LD_EXP 16
10002: PPUSH
10003: LD_EXP 15
10007: PPUSH
10008: CALL_OW 119
// Say ( JMM , D1-JMM-4a ) ;
10012: LD_EXP 15
10016: PPUSH
10017: LD_STRING D1-JMM-4a
10019: PPUSH
10020: CALL_OW 88
// Say ( Roth , D1-Roth-4 ) ;
10024: LD_EXP 16
10028: PPUSH
10029: LD_STRING D1-Roth-4
10031: PPUSH
10032: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
10036: LD_EXP 15
10040: PPUSH
10041: LD_STRING D1-JMM-5
10043: PPUSH
10044: CALL_OW 88
// Say ( Roth , D1-Roth-5 ) ;
10048: LD_EXP 16
10052: PPUSH
10053: LD_STRING D1-Roth-5
10055: PPUSH
10056: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
10060: LD_EXP 15
10064: PPUSH
10065: LD_STRING D1-JMM-6
10067: PPUSH
10068: CALL_OW 88
// Say ( Roth , D1-Roth-6 ) ;
10072: LD_EXP 16
10076: PPUSH
10077: LD_STRING D1-Roth-6
10079: PPUSH
10080: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
10084: LD_EXP 15
10088: PPUSH
10089: LD_STRING D1-JMM-7
10091: PPUSH
10092: CALL_OW 88
// ComMoveXY ( Powell , GetX ( JMM ) , GetY ( JMM ) ) ;
10096: LD_EXP 17
10100: PPUSH
10101: LD_EXP 15
10105: PPUSH
10106: CALL_OW 250
10110: PPUSH
10111: LD_EXP 15
10115: PPUSH
10116: CALL_OW 251
10120: PPUSH
10121: CALL_OW 111
// Say ( Roth , D1-Roth-7 ) ;
10125: LD_EXP 16
10129: PPUSH
10130: LD_STRING D1-Roth-7
10132: PPUSH
10133: CALL_OW 88
// repeat wait ( 0 0$0.3 ) ;
10137: LD_INT 10
10139: PPUSH
10140: CALL_OW 67
// until GetDistUnits ( Powell , JMM ) < 6 ;
10144: LD_EXP 17
10148: PPUSH
10149: LD_EXP 15
10153: PPUSH
10154: CALL_OW 296
10158: PUSH
10159: LD_INT 6
10161: LESS
10162: IFFALSE 10137
// ComTurnUnit ( Powell , JMM ) ;
10164: LD_EXP 17
10168: PPUSH
10169: LD_EXP 15
10173: PPUSH
10174: CALL_OW 119
// Say ( Powell , D1-Pow-7 ) ;
10178: LD_EXP 17
10182: PPUSH
10183: LD_STRING D1-Pow-7
10185: PPUSH
10186: CALL_OW 88
// ComTurnUnit ( JMM , Powell ) ;
10190: LD_EXP 15
10194: PPUSH
10195: LD_EXP 17
10199: PPUSH
10200: CALL_OW 119
// ComTurnUnit ( Roth , Powell ) ;
10204: LD_EXP 16
10208: PPUSH
10209: LD_EXP 17
10213: PPUSH
10214: CALL_OW 119
// Say ( JMM , D1-JMM-8 ) ;
10218: LD_EXP 15
10222: PPUSH
10223: LD_STRING D1-JMM-8
10225: PPUSH
10226: CALL_OW 88
// Say ( Powell , D1-Pow-8 ) ;
10230: LD_EXP 17
10234: PPUSH
10235: LD_STRING D1-Pow-8
10237: PPUSH
10238: CALL_OW 88
// Say ( JMM , D1-JMM-9 ) ;
10242: LD_EXP 15
10246: PPUSH
10247: LD_STRING D1-JMM-9
10249: PPUSH
10250: CALL_OW 88
// ComMoveXY ( Powell , 124 , 61 ) ;
10254: LD_EXP 17
10258: PPUSH
10259: LD_INT 124
10261: PPUSH
10262: LD_INT 61
10264: PPUSH
10265: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10269: LD_INT 35
10271: PPUSH
10272: CALL_OW 67
// until GetDistUnits ( JMM , Powell ) > 6 ;
10276: LD_EXP 15
10280: PPUSH
10281: LD_EXP 17
10285: PPUSH
10286: CALL_OW 296
10290: PUSH
10291: LD_INT 6
10293: GREATER
10294: IFFALSE 10269
// SayRadio ( Powell , D1-Pow-9 ) ;
10296: LD_EXP 17
10300: PPUSH
10301: LD_STRING D1-Pow-9
10303: PPUSH
10304: CALL_OW 94
// RemoveUnit ( Powell ) ;
10308: LD_EXP 17
10312: PPUSH
10313: CALL_OW 64
// PlaceHumanInUnit ( Powell , ambar0 ) ;
10317: LD_EXP 17
10321: PPUSH
10322: LD_INT 18
10324: PPUSH
10325: CALL_OW 52
// if Joan and not Joan in selected then
10329: LD_EXP 37
10333: PUSH
10334: LD_EXP 37
10338: PUSH
10339: LD_EXP 3
10343: IN
10344: NOT
10345: AND
10346: IFFALSE 10360
// SayRadio ( Joan , D1-Joan-9 ) ;
10348: LD_EXP 37
10352: PPUSH
10353: LD_STRING D1-Joan-9
10355: PPUSH
10356: CALL_OW 94
// ComTurnUnit ( Roth , JMM ) ;
10360: LD_EXP 16
10364: PPUSH
10365: LD_EXP 15
10369: PPUSH
10370: CALL_OW 119
// ComTurnUnit ( JMM , Roth ) ;
10374: LD_EXP 15
10378: PPUSH
10379: LD_EXP 16
10383: PPUSH
10384: CALL_OW 119
// Say ( Roth , D1-Roth-9 ) ;
10388: LD_EXP 16
10392: PPUSH
10393: LD_STRING D1-Roth-9
10395: PPUSH
10396: CALL_OW 88
// Say ( JMM , D1-JMM-10 ) ;
10400: LD_EXP 15
10404: PPUSH
10405: LD_STRING D1-JMM-10
10407: PPUSH
10408: CALL_OW 88
// InGameOff ;
10412: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
10416: LD_STRING M1
10418: PPUSH
10419: CALL_OW 337
// if Difficulty < 3 then
10423: LD_OWVAR 67
10427: PUSH
10428: LD_INT 3
10430: LESS
10431: IFFALSE 10443
// ChangeSideFog ( 4 , 7 ) ;
10433: LD_INT 4
10435: PPUSH
10436: LD_INT 7
10438: PPUSH
10439: CALL_OW 343
// ToLua ( enableBioCharacter(BIO_ROTH) ) ;
10443: LD_STRING enableBioCharacter(BIO_ROTH)
10445: PPUSH
10446: CALL_OW 559
// SaveForQuickRestart ;
10450: CALL_OW 22
// SetAttitude ( 7 , 1 , att_enemy , true ) ;
10454: LD_INT 7
10456: PPUSH
10457: LD_INT 1
10459: PPUSH
10460: LD_INT 2
10462: PPUSH
10463: LD_INT 1
10465: PPUSH
10466: CALL_OW 80
// wait ( 0 0$3 ) ;
10470: LD_INT 105
10472: PPUSH
10473: CALL_OW 67
// ComMoveXY ( Roth , 124 , 18 ) ;
10477: LD_EXP 16
10481: PPUSH
10482: LD_INT 124
10484: PPUSH
10485: LD_INT 18
10487: PPUSH
10488: CALL_OW 111
// AddComInvisible ( Roth ) ;
10492: LD_EXP 16
10496: PPUSH
10497: CALL_OW 212
// wait ( 0 0$30 ) ;
10501: LD_INT 1050
10503: PPUSH
10504: CALL_OW 67
// AddComWait ( Roth , 1 1$00 ) ;
10508: LD_EXP 16
10512: PPUSH
10513: LD_INT 2100
10515: PPUSH
10516: CALL_OW 202
// AddComMoveXY ( Roth , 156 , 20 ) ;
10520: LD_EXP 16
10524: PPUSH
10525: LD_INT 156
10527: PPUSH
10528: LD_INT 20
10530: PPUSH
10531: CALL_OW 171
// AddComMoveXY ( Roth , 178 , 42 ) ;
10535: LD_EXP 16
10539: PPUSH
10540: LD_INT 178
10542: PPUSH
10543: LD_INT 42
10545: PPUSH
10546: CALL_OW 171
// AddComInvisible ( Roth ) ;
10550: LD_EXP 16
10554: PPUSH
10555: CALL_OW 212
// end ;
10559: LD_VAR 0 1
10563: RET
// every 0 0$1 do var i , tmp ;
10564: GO 10566
10566: DISABLE
10567: LD_INT 0
10569: PPUSH
10570: PPUSH
// begin tmp := selected union friends ;
10571: LD_ADDR_VAR 0 2
10575: PUSH
10576: LD_EXP 3
10580: PUSH
10581: LD_EXP 4
10585: UNION
10586: ST_TO_ADDR
// if gamma_commander = 1 then
10587: LD_EXP 10
10591: PUSH
10592: LD_INT 1
10594: EQUAL
10595: IFFALSE 10613
// tmp := tmp union Donaldson ;
10597: LD_ADDR_VAR 0 2
10601: PUSH
10602: LD_VAR 0 2
10606: PUSH
10607: LD_EXP 25
10611: UNION
10612: ST_TO_ADDR
// if gamma_commander = 2 then
10613: LD_EXP 10
10617: PUSH
10618: LD_INT 2
10620: EQUAL
10621: IFFALSE 10639
// tmp := tmp union Brown ;
10623: LD_ADDR_VAR 0 2
10627: PUSH
10628: LD_VAR 0 2
10632: PUSH
10633: LD_EXP 29
10637: UNION
10638: ST_TO_ADDR
// if not tmp then
10639: LD_VAR 0 2
10643: NOT
10644: IFFALSE 10648
// exit ;
10646: GO 10720
// repeat wait ( 0 0$1 ) ;
10648: LD_INT 35
10650: PPUSH
10651: CALL_OW 67
// for i in tmp do
10655: LD_ADDR_VAR 0 1
10659: PUSH
10660: LD_VAR 0 2
10664: PUSH
10665: FOR_IN
10666: IFFALSE 10711
// if CanSpot ( JMM , i ) then
10668: LD_EXP 15
10672: PPUSH
10673: LD_VAR 0 1
10677: PPUSH
10678: CALL 9320 0 2
10682: IFFALSE 10709
// begin tmp := tmp diff i ;
10684: LD_ADDR_VAR 0 2
10688: PUSH
10689: LD_VAR 0 2
10693: PUSH
10694: LD_VAR 0 1
10698: DIFF
10699: ST_TO_ADDR
// Spot ( i ) ;
10700: LD_VAR 0 1
10704: PPUSH
10705: CALL 10723 0 1
// end ;
10709: GO 10665
10711: POP
10712: POP
// until not tmp ;
10713: LD_VAR 0 2
10717: NOT
10718: IFFALSE 10648
// end ;
10720: PPOPN 2
10722: END
// export function Spot ( unit ) ; var building , side , joined ; begin
10723: LD_INT 0
10725: PPUSH
10726: PPUSH
10727: PPUSH
10728: PPUSH
// if not unit or GetSide ( unit ) <> 4 or IsSleeping ( unit ) or not IsOk ( unit ) then
10729: LD_VAR 0 1
10733: NOT
10734: PUSH
10735: LD_VAR 0 1
10739: PPUSH
10740: CALL_OW 255
10744: PUSH
10745: LD_INT 4
10747: NONEQUAL
10748: OR
10749: PUSH
10750: LD_VAR 0 1
10754: PPUSH
10755: CALL_OW 555
10759: OR
10760: PUSH
10761: LD_VAR 0 1
10765: PPUSH
10766: CALL_OW 302
10770: NOT
10771: OR
10772: IFFALSE 10776
// exit ;
10774: GO 12686
// InGameOn ;
10776: CALL_OW 8
// side := 7 ;
10780: LD_ADDR_VAR 0 4
10784: PUSH
10785: LD_INT 7
10787: ST_TO_ADDR
// joined := false ;
10788: LD_ADDR_VAR 0 5
10792: PUSH
10793: LD_INT 0
10795: ST_TO_ADDR
// building := IsInUnit ( unit ) ;
10796: LD_ADDR_VAR 0 3
10800: PUSH
10801: LD_VAR 0 1
10805: PPUSH
10806: CALL_OW 310
10810: ST_TO_ADDR
// if building then
10811: LD_VAR 0 3
10815: IFFALSE 10874
// begin SetSide ( JMM , GetSide ( unit ) ) ;
10817: LD_EXP 15
10821: PPUSH
10822: LD_VAR 0 1
10826: PPUSH
10827: CALL_OW 255
10831: PPUSH
10832: CALL_OW 235
// ComEnterUnit ( JMM , building ) ;
10836: LD_EXP 15
10840: PPUSH
10841: LD_VAR 0 3
10845: PPUSH
10846: CALL_OW 120
// repeat wait ( 3 ) ;
10850: LD_INT 3
10852: PPUSH
10853: CALL_OW 67
// until IsInUnit ( JMM ) ;
10857: LD_EXP 15
10861: PPUSH
10862: CALL_OW 310
10866: IFFALSE 10850
// DialogueOn ;
10868: CALL_OW 6
// end else
10872: GO 10906
// begin ComTurnUnit ( JMM , unit ) ;
10874: LD_EXP 15
10878: PPUSH
10879: LD_VAR 0 1
10883: PPUSH
10884: CALL_OW 119
// ComTurnUnit ( unit , JMM ) ;
10888: LD_VAR 0 1
10892: PPUSH
10893: LD_EXP 15
10897: PPUSH
10898: CALL_OW 119
// DialogueOn ;
10902: CALL_OW 6
// end ; if unit = Joan then
10906: LD_VAR 0 1
10910: PUSH
10911: LD_EXP 37
10915: EQUAL
10916: IFFALSE 11026
// begin joined := true ;
10918: LD_ADDR_VAR 0 5
10922: PUSH
10923: LD_INT 1
10925: ST_TO_ADDR
// if Joan in selected then
10926: LD_EXP 37
10930: PUSH
10931: LD_EXP 3
10935: IN
10936: IFFALSE 10964
// begin Say ( Joan , D3-Joan-Joan-1 ) ;
10938: LD_EXP 37
10942: PPUSH
10943: LD_STRING D3-Joan-Joan-1
10945: PPUSH
10946: CALL_OW 88
// Say ( JMM , D3-Joan-JMM-1 ) ;
10950: LD_EXP 15
10954: PPUSH
10955: LD_STRING D3-Joan-JMM-1
10957: PPUSH
10958: CALL_OW 88
// end else
10962: GO 11024
// begin Say ( Joan , D4-Joan-Joan-1 ) ;
10964: LD_EXP 37
10968: PPUSH
10969: LD_STRING D4-Joan-Joan-1
10971: PPUSH
10972: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-1 ) ;
10976: LD_EXP 15
10980: PPUSH
10981: LD_STRING D4-Joan-JMM-1
10983: PPUSH
10984: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-2 ) ;
10988: LD_EXP 37
10992: PPUSH
10993: LD_STRING D4-Joan-Joan-2
10995: PPUSH
10996: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-2 ) ;
11000: LD_EXP 15
11004: PPUSH
11005: LD_STRING D4-Joan-JMM-2
11007: PPUSH
11008: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-3 ) ;
11012: LD_EXP 37
11016: PPUSH
11017: LD_STRING D4-Joan-Joan-3
11019: PPUSH
11020: CALL_OW 88
// end ; end else
11024: GO 12494
// if unit = Lisa then
11026: LD_VAR 0 1
11030: PUSH
11031: LD_EXP 24
11035: EQUAL
11036: IFFALSE 11228
// begin if Lisa in selected then
11038: LD_EXP 24
11042: PUSH
11043: LD_EXP 3
11047: IN
11048: IFFALSE 11161
// begin if GetSide ( Joan ) = 7 then
11050: LD_EXP 37
11054: PPUSH
11055: CALL_OW 255
11059: PUSH
11060: LD_INT 7
11062: EQUAL
11063: IFFALSE 11127
// begin Say ( Lisa , D3-LisaJ-Lisa-1 ) ;
11065: LD_EXP 24
11069: PPUSH
11070: LD_STRING D3-LisaJ-Lisa-1
11072: PPUSH
11073: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-1 ) ;
11077: LD_EXP 15
11081: PPUSH
11082: LD_STRING D3-LisaJ-JMM-1
11084: PPUSH
11085: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-2 ) ;
11089: LD_EXP 24
11093: PPUSH
11094: LD_STRING D3-LisaJ-Lisa-2
11096: PPUSH
11097: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-2 ) ;
11101: LD_EXP 15
11105: PPUSH
11106: LD_STRING D3-LisaJ-JMM-2
11108: PPUSH
11109: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-3 ) ;
11113: LD_EXP 24
11117: PPUSH
11118: LD_STRING D3-LisaJ-Lisa-3
11120: PPUSH
11121: CALL_OW 88
// end else
11125: GO 11159
// begin Say ( Lisa , D3-LisaL-Lisa-1 ) ;
11127: LD_EXP 24
11131: PPUSH
11132: LD_STRING D3-LisaL-Lisa-1
11134: PPUSH
11135: CALL_OW 88
// Say ( JMM , D3-LisaL-JMM-1 ) ;
11139: LD_EXP 15
11143: PPUSH
11144: LD_STRING D3-LisaL-JMM-1
11146: PPUSH
11147: CALL_OW 88
// joined := true ;
11151: LD_ADDR_VAR 0 5
11155: PUSH
11156: LD_INT 1
11158: ST_TO_ADDR
// end ; end else
11159: GO 11226
// begin if GetSide ( Joan ) = 7 then
11161: LD_EXP 37
11165: PPUSH
11166: CALL_OW 255
11170: PUSH
11171: LD_INT 7
11173: EQUAL
11174: IFFALSE 11214
// begin Say ( Lisa , D4-LisaJ-Lisa-1 ) ;
11176: LD_EXP 24
11180: PPUSH
11181: LD_STRING D4-LisaJ-Lisa-1
11183: PPUSH
11184: CALL_OW 88
// Say ( JMM , D4-LisaJ-JMM-1 ) ;
11188: LD_EXP 15
11192: PPUSH
11193: LD_STRING D4-LisaJ-JMM-1
11195: PPUSH
11196: CALL_OW 88
// Say ( Lisa , D4-LisaJ-Lisa-2 ) ;
11200: LD_EXP 24
11204: PPUSH
11205: LD_STRING D4-LisaJ-Lisa-2
11207: PPUSH
11208: CALL_OW 88
// end else
11212: GO 11226
// begin Say ( Lisa , D4-LisaL-Lisa-1 ) ;
11214: LD_EXP 24
11218: PPUSH
11219: LD_STRING D4-LisaL-Lisa-1
11221: PPUSH
11222: CALL_OW 88
// end ; end ; end else
11226: GO 12494
// if unit = Frank then
11228: LD_VAR 0 1
11232: PUSH
11233: LD_EXP 34
11237: EQUAL
11238: IFFALSE 11378
// begin joined := true ;
11240: LD_ADDR_VAR 0 5
11244: PUSH
11245: LD_INT 1
11247: ST_TO_ADDR
// if Frank in selected then
11248: LD_EXP 34
11252: PUSH
11253: LD_EXP 3
11257: IN
11258: IFFALSE 11328
// begin Say ( Frank , D3-Frank-Frank-1 ) ;
11260: LD_EXP 34
11264: PPUSH
11265: LD_STRING D3-Frank-Frank-1
11267: PPUSH
11268: CALL_OW 88
// Say ( JMM , D3-Frank-JMM-1 ) ;
11272: LD_EXP 15
11276: PPUSH
11277: LD_STRING D3-Frank-JMM-1
11279: PPUSH
11280: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-2 ) ;
11284: LD_EXP 34
11288: PPUSH
11289: LD_STRING D3-Frank-Frank-2
11291: PPUSH
11292: CALL_OW 88
// if reached_lab then
11296: LD_EXP 5
11300: IFFALSE 11326
// begin Say ( JMM , D3-Frank-JMM-2 ) ;
11302: LD_EXP 15
11306: PPUSH
11307: LD_STRING D3-Frank-JMM-2
11309: PPUSH
11310: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-3 ) ;
11314: LD_EXP 34
11318: PPUSH
11319: LD_STRING D3-Frank-Frank-3
11321: PPUSH
11322: CALL_OW 88
// end ; end else
11326: GO 11376
// begin Say ( Frank , D4-Frank-Frank-1 ) ;
11328: LD_EXP 34
11332: PPUSH
11333: LD_STRING D4-Frank-Frank-1
11335: PPUSH
11336: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-1 ) ;
11340: LD_EXP 15
11344: PPUSH
11345: LD_STRING D4-Frank-JMM-1
11347: PPUSH
11348: CALL_OW 88
// Say ( Frank , D4-Frank-Frank-2 ) ;
11352: LD_EXP 34
11356: PPUSH
11357: LD_STRING D4-Frank-Frank-2
11359: PPUSH
11360: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-2 ) ;
11364: LD_EXP 15
11368: PPUSH
11369: LD_STRING D4-Frank-JMM-2
11371: PPUSH
11372: CALL_OW 88
// end ; end else
11376: GO 12494
// if unit = Brown then
11378: LD_VAR 0 1
11382: PUSH
11383: LD_EXP 29
11387: EQUAL
11388: IFFALSE 11484
// begin if Brown in selected or gamma_commander = 2 then
11390: LD_EXP 29
11394: PUSH
11395: LD_EXP 3
11399: IN
11400: PUSH
11401: LD_EXP 10
11405: PUSH
11406: LD_INT 2
11408: EQUAL
11409: OR
11410: IFFALSE 11446
// begin Say ( Brown , D3-Soldier1-Sol1-1 ) ;
11412: LD_EXP 29
11416: PPUSH
11417: LD_STRING D3-Soldier1-Sol1-1
11419: PPUSH
11420: CALL_OW 88
// Say ( JMM , D6-JMM-Brown-1 ) ;
11424: LD_EXP 15
11428: PPUSH
11429: LD_STRING D6-JMM-Brown-1
11431: PPUSH
11432: CALL_OW 88
// joined := true ;
11436: LD_ADDR_VAR 0 5
11440: PUSH
11441: LD_INT 1
11443: ST_TO_ADDR
// end else
11444: GO 11482
// begin Say ( Brown , D4-Soldier2-Sol1-1 ) ;
11446: LD_EXP 29
11450: PPUSH
11451: LD_STRING D4-Soldier2-Sol1-1
11453: PPUSH
11454: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11458: LD_EXP 15
11462: PPUSH
11463: LD_STRING D4-Soldier1-JMM-1
11465: PPUSH
11466: CALL_OW 88
// Say ( Brown , D4-Soldier2-Sol1-2 ) ;
11470: LD_EXP 29
11474: PPUSH
11475: LD_STRING D4-Soldier2-Sol1-2
11477: PPUSH
11478: CALL_OW 88
// end ; end else
11482: GO 12494
// if unit = Donaldson then
11484: LD_VAR 0 1
11488: PUSH
11489: LD_EXP 25
11493: EQUAL
11494: IFFALSE 11590
// begin if Donaldson in selected or gamma_commander = 1 then
11496: LD_EXP 25
11500: PUSH
11501: LD_EXP 3
11505: IN
11506: PUSH
11507: LD_EXP 10
11511: PUSH
11512: LD_INT 1
11514: EQUAL
11515: OR
11516: IFFALSE 11552
// begin Say ( Donaldson , D3-Soldier2-FSol2-1 ) ;
11518: LD_EXP 25
11522: PPUSH
11523: LD_STRING D3-Soldier2-FSol2-1
11525: PPUSH
11526: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11530: LD_EXP 15
11534: PPUSH
11535: LD_STRING D3-Soldier2-JMM-1
11537: PPUSH
11538: CALL_OW 88
// joined := true ;
11542: LD_ADDR_VAR 0 5
11546: PUSH
11547: LD_INT 1
11549: ST_TO_ADDR
// end else
11550: GO 11588
// begin Say ( Donaldson , D4-Soldier1-FSol1-1 ) ;
11552: LD_EXP 25
11556: PPUSH
11557: LD_STRING D4-Soldier1-FSol1-1
11559: PPUSH
11560: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11564: LD_EXP 15
11568: PPUSH
11569: LD_STRING D4-Soldier1-JMM-1
11571: PPUSH
11572: CALL_OW 88
// Say ( Donaldson , D4-Soldier1-FSol1-2 ) ;
11576: LD_EXP 25
11580: PPUSH
11581: LD_STRING D4-Soldier1-FSol1-2
11583: PPUSH
11584: CALL_OW 88
// end ; end else
11588: GO 12494
// if unit = Cyrus then
11590: LD_VAR 0 1
11594: PUSH
11595: LD_EXP 27
11599: EQUAL
11600: IFFALSE 11674
// begin if Cyrus in selected then
11602: LD_EXP 27
11606: PUSH
11607: LD_EXP 3
11611: IN
11612: IFFALSE 11648
// begin Say ( Cyrus , D3-Cyrus-Cyrus-1 ) ;
11614: LD_EXP 27
11618: PPUSH
11619: LD_STRING D3-Cyrus-Cyrus-1
11621: PPUSH
11622: CALL_OW 88
// Say ( JMM , D3-Cyrus-JMM-1 ) ;
11626: LD_EXP 15
11630: PPUSH
11631: LD_STRING D3-Cyrus-JMM-1
11633: PPUSH
11634: CALL_OW 88
// joined := true ;
11638: LD_ADDR_VAR 0 5
11642: PUSH
11643: LD_INT 1
11645: ST_TO_ADDR
// end else
11646: GO 11672
// begin Say ( Cyrus , D4-Cyrus-Cyrus-1 ) ;
11648: LD_EXP 27
11652: PPUSH
11653: LD_STRING D4-Cyrus-Cyrus-1
11655: PPUSH
11656: CALL_OW 88
// Say ( JMM , D4-Cyrus-JMM-1 ) ;
11660: LD_EXP 15
11664: PPUSH
11665: LD_STRING D4-Cyrus-JMM-1
11667: PPUSH
11668: CALL_OW 88
// end ; end else
11672: GO 12494
// if unit = Bobby then
11674: LD_VAR 0 1
11678: PUSH
11679: LD_EXP 26
11683: EQUAL
11684: IFFALSE 11770
// begin if Bobby in selected then
11686: LD_EXP 26
11690: PUSH
11691: LD_EXP 3
11695: IN
11696: IFFALSE 11732
// begin Say ( Bobby , D3-Bobby-Bobby-1 ) ;
11698: LD_EXP 26
11702: PPUSH
11703: LD_STRING D3-Bobby-Bobby-1
11705: PPUSH
11706: CALL_OW 88
// Say ( JMM , D3-Bobby-JMM-1 ) ;
11710: LD_EXP 15
11714: PPUSH
11715: LD_STRING D3-Bobby-JMM-1
11717: PPUSH
11718: CALL_OW 88
// joined := true ;
11722: LD_ADDR_VAR 0 5
11726: PUSH
11727: LD_INT 1
11729: ST_TO_ADDR
// end else
11730: GO 11768
// begin Say ( Bobby , D4-Bobby-Bobby-1 ) ;
11732: LD_EXP 26
11736: PPUSH
11737: LD_STRING D4-Bobby-Bobby-1
11739: PPUSH
11740: CALL_OW 88
// Say ( JMM , D4-Bobby-JMM-1 ) ;
11744: LD_EXP 15
11748: PPUSH
11749: LD_STRING D4-Bobby-JMM-1
11751: PPUSH
11752: CALL_OW 88
// Say ( Bobby , D4-Bobby-Bobby-2 ) ;
11756: LD_EXP 26
11760: PPUSH
11761: LD_STRING D4-Bobby-Bobby-2
11763: PPUSH
11764: CALL_OW 88
// end ; end else
11768: GO 12494
// if unit = Cornel then
11770: LD_VAR 0 1
11774: PUSH
11775: LD_EXP 32
11779: EQUAL
11780: IFFALSE 11878
// begin if Cornel in selected then
11782: LD_EXP 32
11786: PUSH
11787: LD_EXP 3
11791: IN
11792: IFFALSE 11840
// begin Say ( Cornel , D3-Mark-Corn-1 ) ;
11794: LD_EXP 32
11798: PPUSH
11799: LD_STRING D3-Mark-Corn-1
11801: PPUSH
11802: CALL_OW 88
// Say ( JMM , D3-Mark-JMM-1 ) ;
11806: LD_EXP 15
11810: PPUSH
11811: LD_STRING D3-Mark-JMM-1
11813: PPUSH
11814: CALL_OW 88
// Say ( Cornel , D3-Mark-Corn-2 ) ;
11818: LD_EXP 32
11822: PPUSH
11823: LD_STRING D3-Mark-Corn-2
11825: PPUSH
11826: CALL_OW 88
// joined := true ;
11830: LD_ADDR_VAR 0 5
11834: PUSH
11835: LD_INT 1
11837: ST_TO_ADDR
// end else
11838: GO 11876
// begin Say ( Cornel , D4-Mark-Corn-1 ) ;
11840: LD_EXP 32
11844: PPUSH
11845: LD_STRING D4-Mark-Corn-1
11847: PPUSH
11848: CALL_OW 88
// Say ( JMM , D4-Mark-JMM-1 ) ;
11852: LD_EXP 15
11856: PPUSH
11857: LD_STRING D4-Mark-JMM-1
11859: PPUSH
11860: CALL_OW 88
// Say ( Cornel , D4-Mark-Corn-2 ) ;
11864: LD_EXP 32
11868: PPUSH
11869: LD_STRING D4-Mark-Corn-2
11871: PPUSH
11872: CALL_OW 88
// end ; end else
11876: GO 12494
// if unit = Gary then
11878: LD_VAR 0 1
11882: PUSH
11883: LD_EXP 33
11887: EQUAL
11888: IFFALSE 11986
// begin if Gary in selected then
11890: LD_EXP 33
11894: PUSH
11895: LD_EXP 3
11899: IN
11900: IFFALSE 11936
// begin Say ( Gary , D3-Gary-Gary-1 ) ;
11902: LD_EXP 33
11906: PPUSH
11907: LD_STRING D3-Gary-Gary-1
11909: PPUSH
11910: CALL_OW 88
// Say ( JMM , D3-Gary-JMM-1 ) ;
11914: LD_EXP 15
11918: PPUSH
11919: LD_STRING D3-Gary-JMM-1
11921: PPUSH
11922: CALL_OW 88
// joined := true ;
11926: LD_ADDR_VAR 0 5
11930: PUSH
11931: LD_INT 1
11933: ST_TO_ADDR
// end else
11934: GO 11984
// begin Say ( Gary , D4-Gary-Gary-1 ) ;
11936: LD_EXP 33
11940: PPUSH
11941: LD_STRING D4-Gary-Gary-1
11943: PPUSH
11944: CALL_OW 88
// SetSide ( Gary , 1 ) ;
11948: LD_EXP 33
11952: PPUSH
11953: LD_INT 1
11955: PPUSH
11956: CALL_OW 235
// DialogueOff ;
11960: CALL_OW 7
// InGameOff ;
11964: CALL_OW 9
// SetSide ( JMM , side ) ;
11968: LD_EXP 15
11972: PPUSH
11973: LD_VAR 0 4
11977: PPUSH
11978: CALL_OW 235
// exit ;
11982: GO 12686
// end ; end else
11984: GO 12494
// if unit = Kikuchi then
11986: LD_VAR 0 1
11990: PUSH
11991: LD_EXP 35
11995: EQUAL
11996: IFFALSE 12094
// begin if Kikuchi in selected then
11998: LD_EXP 35
12002: PUSH
12003: LD_EXP 3
12007: IN
12008: IFFALSE 12044
// begin Say ( Kikuchi , D3-Yamako-Yam-1 ) ;
12010: LD_EXP 35
12014: PPUSH
12015: LD_STRING D3-Yamako-Yam-1
12017: PPUSH
12018: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
12022: LD_EXP 15
12026: PPUSH
12027: LD_STRING D3-Soldier2-JMM-1
12029: PPUSH
12030: CALL_OW 88
// joined := true ;
12034: LD_ADDR_VAR 0 5
12038: PUSH
12039: LD_INT 1
12041: ST_TO_ADDR
// end else
12042: GO 12092
// begin Say ( Kikuchi , D4-Yamako-Yam-1 ) ;
12044: LD_EXP 35
12048: PPUSH
12049: LD_STRING D4-Yamako-Yam-1
12051: PPUSH
12052: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
12056: LD_EXP 35
12060: PPUSH
12061: LD_INT 1
12063: PPUSH
12064: CALL_OW 235
// DialogueOff ;
12068: CALL_OW 7
// InGameOff ;
12072: CALL_OW 9
// SetSide ( JMM , side ) ;
12076: LD_EXP 15
12080: PPUSH
12081: LD_VAR 0 4
12085: PPUSH
12086: CALL_OW 235
// exit ;
12090: GO 12686
// end ; end else
12092: GO 12494
// if unit = Gladstone then
12094: LD_VAR 0 1
12098: PUSH
12099: LD_EXP 30
12103: EQUAL
12104: IFFALSE 12178
// begin if Gladstone in selected then
12106: LD_EXP 30
12110: PUSH
12111: LD_EXP 3
12115: IN
12116: IFFALSE 12152
// begin joined := true ;
12118: LD_ADDR_VAR 0 5
12122: PUSH
12123: LD_INT 1
12125: ST_TO_ADDR
// Say ( JMM , D3-Tim-JMM-1 ) ;
12126: LD_EXP 15
12130: PPUSH
12131: LD_STRING D3-Tim-JMM-1
12133: PPUSH
12134: CALL_OW 88
// Say ( Gladstone , D3-Tim-Glad-1 ) ;
12138: LD_EXP 30
12142: PPUSH
12143: LD_STRING D3-Tim-Glad-1
12145: PPUSH
12146: CALL_OW 88
// end else
12150: GO 12176
// begin Say ( JMM , D4-Tim-JMM-1 ) ;
12152: LD_EXP 15
12156: PPUSH
12157: LD_STRING D4-Tim-JMM-1
12159: PPUSH
12160: CALL_OW 88
// Say ( Gladstone , D4-Tim-Glad-1 ) ;
12164: LD_EXP 30
12168: PPUSH
12169: LD_STRING D4-Tim-Glad-1
12171: PPUSH
12172: CALL_OW 88
// end ; end else
12176: GO 12494
// if unit = Denis then
12178: LD_VAR 0 1
12182: PUSH
12183: LD_EXP 28
12187: EQUAL
12188: IFFALSE 12224
// begin joined := true ;
12190: LD_ADDR_VAR 0 5
12194: PUSH
12195: LD_INT 1
12197: ST_TO_ADDR
// Say ( Denis , D3-Denis-Den-1 ) ;
12198: LD_EXP 28
12202: PPUSH
12203: LD_STRING D3-Denis-Den-1
12205: PPUSH
12206: CALL_OW 88
// Say ( JMM , D3-Denis-JMM-1 ) ;
12210: LD_EXP 15
12214: PPUSH
12215: LD_STRING D3-Denis-JMM-1
12217: PPUSH
12218: CALL_OW 88
// end else
12222: GO 12494
// if unit = Simms then
12224: LD_VAR 0 1
12228: PUSH
12229: LD_EXP 36
12233: EQUAL
12234: IFFALSE 12270
// begin joined := true ;
12236: LD_ADDR_VAR 0 5
12240: PUSH
12241: LD_INT 1
12243: ST_TO_ADDR
// Say ( Simms , D3-Simms-Sim-1 ) ;
12244: LD_EXP 36
12248: PPUSH
12249: LD_STRING D3-Simms-Sim-1
12251: PPUSH
12252: CALL_OW 88
// Say ( JMM , D3-Simms-JMM-1 ) ;
12256: LD_EXP 15
12260: PPUSH
12261: LD_STRING D3-Simms-JMM-1
12263: PPUSH
12264: CALL_OW 88
// end else
12268: GO 12494
// if unit = DeltaDoctor then
12270: LD_VAR 0 1
12274: PUSH
12275: LD_EXP 38
12279: EQUAL
12280: IFFALSE 12316
// begin joined := true ;
12282: LD_ADDR_VAR 0 5
12286: PUSH
12287: LD_INT 1
12289: ST_TO_ADDR
// Say ( DeltaDoctor , D3-Soldier1-Sol1-1 ) ;
12290: LD_EXP 38
12294: PPUSH
12295: LD_STRING D3-Soldier1-Sol1-1
12297: PPUSH
12298: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
12302: LD_EXP 15
12306: PPUSH
12307: LD_STRING D3-Soldier1-JMM-1
12309: PPUSH
12310: CALL_OW 88
// end else
12314: GO 12494
// begin joined := unit in selected ;
12316: LD_ADDR_VAR 0 5
12320: PUSH
12321: LD_VAR 0 1
12325: PUSH
12326: LD_EXP 3
12330: IN
12331: ST_TO_ADDR
// if joined then
12332: LD_VAR 0 5
12336: IFFALSE 12405
// begin if GetSex ( unit ) = sex_male then
12338: LD_VAR 0 1
12342: PPUSH
12343: CALL_OW 258
12347: PUSH
12348: LD_INT 1
12350: EQUAL
12351: IFFALSE 12379
// begin Say ( unit , D3-Soldier1-Sol1-1 ) ;
12353: LD_VAR 0 1
12357: PPUSH
12358: LD_STRING D3-Soldier1-Sol1-1
12360: PPUSH
12361: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
12365: LD_EXP 15
12369: PPUSH
12370: LD_STRING D3-Soldier1-JMM-1
12372: PPUSH
12373: CALL_OW 88
// end else
12377: GO 12403
// begin Say ( unit , D3-Soldier2-FSol2-1 ) ;
12379: LD_VAR 0 1
12383: PPUSH
12384: LD_STRING D3-Soldier2-FSol2-1
12386: PPUSH
12387: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
12391: LD_EXP 15
12395: PPUSH
12396: LD_STRING D3-Soldier2-JMM-1
12398: PPUSH
12399: CALL_OW 88
// end ; end else
12403: GO 12494
// begin if GetSex ( unit ) = sex_male then
12405: LD_VAR 0 1
12409: PPUSH
12410: CALL_OW 258
12414: PUSH
12415: LD_INT 1
12417: EQUAL
12418: IFFALSE 12458
// begin Say ( unit , D4-Soldier2-Sol1-1 ) ;
12420: LD_VAR 0 1
12424: PPUSH
12425: LD_STRING D4-Soldier2-Sol1-1
12427: PPUSH
12428: CALL_OW 88
// Say ( JMM , D4-Soldier2-JMM-1 ) ;
12432: LD_EXP 15
12436: PPUSH
12437: LD_STRING D4-Soldier2-JMM-1
12439: PPUSH
12440: CALL_OW 88
// Say ( unit , D4-Soldier2-Sol2-1 ) ;
12444: LD_VAR 0 1
12448: PPUSH
12449: LD_STRING D4-Soldier2-Sol2-1
12451: PPUSH
12452: CALL_OW 88
// end else
12456: GO 12494
// begin Say ( unit , D4-Soldier1-FSol1-1 ) ;
12458: LD_VAR 0 1
12462: PPUSH
12463: LD_STRING D4-Soldier1-FSol1-1
12465: PPUSH
12466: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
12470: LD_EXP 15
12474: PPUSH
12475: LD_STRING D4-Soldier1-JMM-1
12477: PPUSH
12478: CALL_OW 88
// Say ( unit , D4-Soldier1-FSol1-2 ) ;
12482: LD_VAR 0 1
12486: PPUSH
12487: LD_STRING D4-Soldier1-FSol1-2
12489: PPUSH
12490: CALL_OW 88
// end ; end ; end ; DialogueOff ;
12494: CALL_OW 7
// InGameOff ;
12498: CALL_OW 9
// if building then
12502: LD_VAR 0 3
12506: IFFALSE 12607
// begin SetSide ( JMM , side ) ;
12508: LD_EXP 15
12512: PPUSH
12513: LD_VAR 0 4
12517: PPUSH
12518: CALL_OW 235
// ComExitBuilding ( JMM ) ;
12522: LD_EXP 15
12526: PPUSH
12527: CALL_OW 122
// if joined then
12531: LD_VAR 0 5
12535: IFFALSE 12574
// begin SetSide ( unit , side ) ;
12537: LD_VAR 0 1
12541: PPUSH
12542: LD_VAR 0 4
12546: PPUSH
12547: CALL_OW 235
// SetSide ( building , 1 ) ;
12551: LD_VAR 0 3
12555: PPUSH
12556: LD_INT 1
12558: PPUSH
12559: CALL_OW 235
// ComExitBuilding ( unit ) ;
12563: LD_VAR 0 1
12567: PPUSH
12568: CALL_OW 122
// end else
12572: GO 12605
// begin wait ( 0 0$10 ) ;
12574: LD_INT 350
12576: PPUSH
12577: CALL_OW 67
// SetSide ( unit , 1 ) ;
12581: LD_VAR 0 1
12585: PPUSH
12586: LD_INT 1
12588: PPUSH
12589: CALL_OW 235
// SetSide ( building , 1 ) ;
12593: LD_VAR 0 3
12597: PPUSH
12598: LD_INT 1
12600: PPUSH
12601: CALL_OW 235
// end ; end else
12605: GO 12686
// begin ComStop ( [ JMM , unit ] ) ;
12607: LD_EXP 15
12611: PUSH
12612: LD_VAR 0 1
12616: PUSH
12617: EMPTY
12618: LIST
12619: LIST
12620: PPUSH
12621: CALL_OW 141
// if joined then
12625: LD_VAR 0 5
12629: IFFALSE 12647
// SetSide ( unit , side ) else
12631: LD_VAR 0 1
12635: PPUSH
12636: LD_VAR 0 4
12640: PPUSH
12641: CALL_OW 235
12645: GO 12686
// begin repeat wait ( 0 0$1 ) ;
12647: LD_INT 35
12649: PPUSH
12650: CALL_OW 67
// until GetDistUnits ( JMM , unit ) > 11 ;
12654: LD_EXP 15
12658: PPUSH
12659: LD_VAR 0 1
12663: PPUSH
12664: CALL_OW 296
12668: PUSH
12669: LD_INT 11
12671: GREATER
12672: IFFALSE 12647
// SetSide ( unit , 1 ) ;
12674: LD_VAR 0 1
12678: PPUSH
12679: LD_INT 1
12681: PPUSH
12682: CALL_OW 235
// end ; end ; end ;
12686: LD_VAR 0 2
12690: RET
// every 0 0$1 trigger GetDistUnits ( JMM , Mike ) < 6 and See ( 7 , Mike ) do
12691: LD_EXP 15
12695: PPUSH
12696: LD_EXP 39
12700: PPUSH
12701: CALL_OW 296
12705: PUSH
12706: LD_INT 6
12708: LESS
12709: PUSH
12710: LD_INT 7
12712: PPUSH
12713: LD_EXP 39
12717: PPUSH
12718: CALL_OW 292
12722: AND
12723: IFFALSE 12781
12725: GO 12727
12727: DISABLE
// begin DialogueOn ;
12728: CALL_OW 6
// CenterNowOnUnits ( Mike ) ;
12732: LD_EXP 39
12736: PPUSH
12737: CALL_OW 87
// Say ( JMM , D6-JMM-Mike-1 ) ;
12741: LD_EXP 15
12745: PPUSH
12746: LD_STRING D6-JMM-Mike-1
12748: PPUSH
12749: CALL_OW 88
// Say ( Mike , D6-Mike-1 ) ;
12753: LD_EXP 39
12757: PPUSH
12758: LD_STRING D6-Mike-1
12760: PPUSH
12761: CALL_OW 88
// SetSide ( Mike , 7 ) ;
12765: LD_EXP 39
12769: PPUSH
12770: LD_INT 7
12772: PPUSH
12773: CALL_OW 235
// DialogueOff ;
12777: CALL_OW 7
// end ;
12781: END
// every 0 0$01 trigger IsInUnit ( JMM ) = amlab do
12782: LD_EXP 15
12786: PPUSH
12787: CALL_OW 310
12791: PUSH
12792: LD_INT 47
12794: EQUAL
12795: IFFALSE 12863
12797: GO 12799
12799: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
12800: LD_STRING M1a
12802: PPUSH
12803: CALL_OW 337
// SetTech ( tech_Soporific , 7 , state_researched ) ;
12807: LD_INT 13
12809: PPUSH
12810: LD_INT 7
12812: PPUSH
12813: LD_INT 2
12815: PPUSH
12816: CALL_OW 322
// SetTech ( tech_SpacAnom , 7 , state_researched ) ;
12820: LD_INT 29
12822: PPUSH
12823: LD_INT 7
12825: PPUSH
12826: LD_INT 2
12828: PPUSH
12829: CALL_OW 322
// SetClass ( JMM , class_bazooker ) ;
12833: LD_EXP 15
12837: PPUSH
12838: LD_INT 9
12840: PPUSH
12841: CALL_OW 336
// can_escape := true ;
12845: LD_ADDR_EXP 6
12849: PUSH
12850: LD_INT 1
12852: ST_TO_ADDR
// SetAreaMapShow ( escape_area , 1 ) ;
12853: LD_INT 19
12855: PPUSH
12856: LD_INT 1
12858: PPUSH
12859: CALL_OW 424
// end ;
12863: END
// every 0 0$1 trigger GetLives ( Powell ) < 999 do
12864: LD_EXP 17
12868: PPUSH
12869: CALL_OW 256
12873: PUSH
12874: LD_INT 999
12876: LESS
12877: IFFALSE 12928
12879: GO 12881
12881: DISABLE
// begin enable ;
12882: ENABLE
// if HexInfo ( 25 , 48 ) = Powell then
12883: LD_INT 25
12885: PPUSH
12886: LD_INT 48
12888: PPUSH
12889: CALL_OW 428
12893: PUSH
12894: LD_EXP 17
12898: EQUAL
12899: IFFALSE 12913
// begin RemoveUnit ( Powell ) ;
12901: LD_EXP 17
12905: PPUSH
12906: CALL_OW 64
// disable ;
12910: DISABLE
// end else
12911: GO 12928
// ComMoveXY ( Powell , 25 , 48 ) ;
12913: LD_EXP 17
12917: PPUSH
12918: LD_INT 25
12920: PPUSH
12921: LD_INT 48
12923: PPUSH
12924: CALL_OW 111
// end ;
12928: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do var i ;
12929: LD_INT 22
12931: PUSH
12932: LD_INT 4
12934: PUSH
12935: EMPTY
12936: LIST
12937: LIST
12938: PUSH
12939: LD_INT 21
12941: PUSH
12942: LD_INT 1
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: PUSH
12949: LD_INT 3
12951: PUSH
12952: LD_INT 24
12954: PUSH
12955: LD_INT 990
12957: PUSH
12958: EMPTY
12959: LIST
12960: LIST
12961: PUSH
12962: EMPTY
12963: LIST
12964: LIST
12965: PUSH
12966: EMPTY
12967: LIST
12968: LIST
12969: LIST
12970: PPUSH
12971: CALL_OW 69
12975: PUSH
12976: LD_EXP 16
12980: DIFF
12981: IFFALSE 13125
12983: GO 12985
12985: DISABLE
12986: LD_INT 0
12988: PPUSH
// begin enable ;
12989: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do
12990: LD_ADDR_VAR 0 1
12994: PUSH
12995: LD_INT 22
12997: PUSH
12998: LD_INT 4
13000: PUSH
13001: EMPTY
13002: LIST
13003: LIST
13004: PUSH
13005: LD_INT 21
13007: PUSH
13008: LD_INT 1
13010: PUSH
13011: EMPTY
13012: LIST
13013: LIST
13014: PUSH
13015: LD_INT 3
13017: PUSH
13018: LD_INT 24
13020: PUSH
13021: LD_INT 990
13023: PUSH
13024: EMPTY
13025: LIST
13026: LIST
13027: PUSH
13028: EMPTY
13029: LIST
13030: LIST
13031: PUSH
13032: EMPTY
13033: LIST
13034: LIST
13035: LIST
13036: PPUSH
13037: CALL_OW 69
13041: PUSH
13042: LD_EXP 16
13046: DIFF
13047: PUSH
13048: FOR_IN
13049: IFFALSE 13123
// begin ComFree ( i ) ;
13051: LD_VAR 0 1
13055: PPUSH
13056: CALL_OW 139
// SetSide ( i , 1 ) ;
13060: LD_VAR 0 1
13064: PPUSH
13065: LD_INT 1
13067: PPUSH
13068: CALL_OW 235
// if GetDistUnits ( i , JMM ) < 14 then
13072: LD_VAR 0 1
13076: PPUSH
13077: LD_EXP 15
13081: PPUSH
13082: CALL_OW 296
13086: PUSH
13087: LD_INT 14
13089: LESS
13090: IFFALSE 13121
// ComAgressiveMove ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
13092: LD_VAR 0 1
13096: PPUSH
13097: LD_EXP 15
13101: PPUSH
13102: CALL_OW 250
13106: PPUSH
13107: LD_EXP 15
13111: PPUSH
13112: CALL_OW 251
13116: PPUSH
13117: CALL_OW 114
// end ;
13121: GO 13048
13123: POP
13124: POP
// end ;
13125: PPOPN 1
13127: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var i ;
13128: LD_INT 22
13130: PUSH
13131: LD_INT 4
13133: PUSH
13134: EMPTY
13135: LIST
13136: LIST
13137: PUSH
13138: LD_INT 34
13140: PUSH
13141: LD_INT 12
13143: PUSH
13144: EMPTY
13145: LIST
13146: LIST
13147: PUSH
13148: EMPTY
13149: LIST
13150: LIST
13151: PPUSH
13152: CALL_OW 69
13156: IFFALSE 13238
13158: GO 13160
13160: DISABLE
13161: LD_INT 0
13163: PPUSH
// begin enable ;
13164: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do
13165: LD_ADDR_VAR 0 1
13169: PUSH
13170: LD_INT 22
13172: PUSH
13173: LD_INT 4
13175: PUSH
13176: EMPTY
13177: LIST
13178: LIST
13179: PUSH
13180: LD_INT 34
13182: PUSH
13183: LD_INT 12
13185: PUSH
13186: EMPTY
13187: LIST
13188: LIST
13189: PUSH
13190: EMPTY
13191: LIST
13192: LIST
13193: PPUSH
13194: CALL_OW 69
13198: PUSH
13199: FOR_IN
13200: IFFALSE 13236
// if GetDistUnits ( i , JMM ) < 6 then
13202: LD_VAR 0 1
13206: PPUSH
13207: LD_EXP 15
13211: PPUSH
13212: CALL_OW 296
13216: PUSH
13217: LD_INT 6
13219: LESS
13220: IFFALSE 13234
// SetSide ( i , 7 ) ;
13222: LD_VAR 0 1
13226: PPUSH
13227: LD_INT 7
13229: PPUSH
13230: CALL_OW 235
13234: GO 13199
13236: POP
13237: POP
// end ;
13238: PPOPN 1
13240: END
// every 0 0$01 trigger can_escape and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_ok ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) do var all_taken , tmp , m1 , m2 , m3 ;
13241: LD_EXP 6
13245: PUSH
13246: LD_INT 19
13248: PPUSH
13249: LD_INT 22
13251: PUSH
13252: LD_INT 7
13254: PUSH
13255: EMPTY
13256: LIST
13257: LIST
13258: PUSH
13259: LD_INT 50
13261: PUSH
13262: EMPTY
13263: LIST
13264: PUSH
13265: LD_INT 21
13267: PUSH
13268: LD_INT 1
13270: PUSH
13271: EMPTY
13272: LIST
13273: LIST
13274: PUSH
13275: EMPTY
13276: LIST
13277: LIST
13278: LIST
13279: PPUSH
13280: CALL_OW 71
13284: NOT
13285: AND
13286: PUSH
13287: LD_INT 3
13289: PPUSH
13290: CALL_OW 469
13294: NOT
13295: AND
13296: PUSH
13297: LD_INT 5
13299: PPUSH
13300: CALL_OW 469
13304: NOT
13305: AND
13306: IFFALSE 14978
13308: GO 13310
13310: DISABLE
13311: LD_INT 0
13313: PPUSH
13314: PPUSH
13315: PPUSH
13316: PPUSH
13317: PPUSH
// begin m1 := false ;
13318: LD_ADDR_VAR 0 3
13322: PUSH
13323: LD_INT 0
13325: ST_TO_ADDR
// m2 := false ;
13326: LD_ADDR_VAR 0 4
13330: PUSH
13331: LD_INT 0
13333: ST_TO_ADDR
// m3 := false ;
13334: LD_ADDR_VAR 0 5
13338: PUSH
13339: LD_INT 0
13341: ST_TO_ADDR
// all_taken := ( UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 ) ;
13342: LD_ADDR_VAR 0 1
13346: PUSH
13347: LD_EXP 3
13351: PPUSH
13352: LD_INT 22
13354: PUSH
13355: LD_INT 4
13357: PUSH
13358: EMPTY
13359: LIST
13360: LIST
13361: PUSH
13362: LD_INT 21
13364: PUSH
13365: LD_INT 1
13367: PUSH
13368: EMPTY
13369: LIST
13370: LIST
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: PPUSH
13376: CALL_OW 72
13380: PUSH
13381: LD_INT 0
13383: EQUAL
13384: ST_TO_ADDR
// if not all_taken then
13385: LD_VAR 0 1
13389: NOT
13390: IFFALSE 13520
// begin if Query ( Q1 ) = 1 then
13392: LD_STRING Q1
13394: PPUSH
13395: CALL_OW 97
13399: PUSH
13400: LD_INT 1
13402: EQUAL
13403: IFFALSE 13520
// begin repeat wait ( 0 0$1 ) ;
13405: LD_INT 35
13407: PPUSH
13408: CALL_OW 67
// until UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_ok ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) ;
13412: LD_EXP 3
13416: PPUSH
13417: LD_INT 22
13419: PUSH
13420: LD_INT 4
13422: PUSH
13423: EMPTY
13424: LIST
13425: LIST
13426: PUSH
13427: LD_INT 21
13429: PUSH
13430: LD_INT 1
13432: PUSH
13433: EMPTY
13434: LIST
13435: LIST
13436: PUSH
13437: EMPTY
13438: LIST
13439: LIST
13440: PPUSH
13441: CALL_OW 72
13445: PUSH
13446: LD_INT 0
13448: EQUAL
13449: PUSH
13450: LD_INT 19
13452: PPUSH
13453: LD_INT 22
13455: PUSH
13456: LD_INT 7
13458: PUSH
13459: EMPTY
13460: LIST
13461: LIST
13462: PUSH
13463: LD_INT 50
13465: PUSH
13466: EMPTY
13467: LIST
13468: PUSH
13469: LD_INT 21
13471: PUSH
13472: LD_INT 1
13474: PUSH
13475: EMPTY
13476: LIST
13477: LIST
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: LIST
13483: PPUSH
13484: CALL_OW 71
13488: NOT
13489: AND
13490: PUSH
13491: LD_INT 3
13493: PPUSH
13494: CALL_OW 469
13498: NOT
13499: AND
13500: PUSH
13501: LD_INT 5
13503: PPUSH
13504: CALL_OW 469
13508: NOT
13509: AND
13510: IFFALSE 13405
// all_taken := true ;
13512: LD_ADDR_VAR 0 1
13516: PUSH
13517: LD_INT 1
13519: ST_TO_ADDR
// end ; end ; if team_kill_counter < 3 then
13520: LD_EXP 9
13524: PUSH
13525: LD_INT 3
13527: LESS
13528: IFFALSE 13544
// Say ( JMM , D5-JMM-1 ) else
13530: LD_EXP 15
13534: PPUSH
13535: LD_STRING D5-JMM-1
13537: PPUSH
13538: CALL_OW 88
13542: GO 13556
// Say ( JMM , D5-JMM-1a ) ;
13544: LD_EXP 15
13548: PPUSH
13549: LD_STRING D5-JMM-1a
13551: PPUSH
13552: CALL_OW 88
// if ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Roth ] ) >= 10 then
13556: LD_INT 22
13558: PUSH
13559: LD_INT 7
13561: PUSH
13562: EMPTY
13563: LIST
13564: LIST
13565: PUSH
13566: LD_INT 21
13568: PUSH
13569: LD_INT 1
13571: PUSH
13572: EMPTY
13573: LIST
13574: LIST
13575: PUSH
13576: LD_INT 23
13578: PUSH
13579: LD_INT 1
13581: PUSH
13582: EMPTY
13583: LIST
13584: LIST
13585: PUSH
13586: EMPTY
13587: LIST
13588: LIST
13589: LIST
13590: PPUSH
13591: CALL_OW 69
13595: PUSH
13596: LD_EXP 15
13600: PUSH
13601: LD_EXP 16
13605: PUSH
13606: EMPTY
13607: LIST
13608: LIST
13609: DIFF
13610: PUSH
13611: LD_INT 10
13613: GREATEREQUAL
13614: IFFALSE 13623
// SetAchievement ( ACH_TEAM ) ;
13616: LD_STRING ACH_TEAM
13618: PPUSH
13619: CALL_OW 543
// if not invis_used then
13623: LD_EXP 12
13627: NOT
13628: IFFALSE 13644
// begin wait ( 3 ) ;
13630: LD_INT 3
13632: PPUSH
13633: CALL_OW 67
// SetAchievement ( ACH_NOINVIS ) ;
13637: LD_STRING ACH_NOINVIS
13639: PPUSH
13640: CALL_OW 543
// end ; if not alert then
13644: LD_EXP 13
13648: NOT
13649: IFFALSE 13665
// begin wait ( 3 ) ;
13651: LD_INT 3
13653: PPUSH
13654: CALL_OW 67
// SetAchievement ( ACH_ALARM ) ;
13658: LD_STRING ACH_ALARM
13660: PPUSH
13661: CALL_OW 543
// end ; if tick < 15 15$00 then
13665: LD_OWVAR 1
13669: PUSH
13670: LD_INT 31500
13672: LESS
13673: IFFALSE 13689
// begin wait ( 3 ) ;
13675: LD_INT 3
13677: PPUSH
13678: CALL_OW 67
// SetAchievement ( ACH_ASPEED_16 ) ;
13682: LD_STRING ACH_ASPEED_16
13684: PPUSH
13685: CALL_OW 543
// end ; if all_taken then
13689: LD_VAR 0 1
13693: IFFALSE 13715
// begin AddMedal ( All , 1 ) ;
13695: LD_STRING All
13697: PPUSH
13698: LD_INT 1
13700: PPUSH
13701: CALL_OW 101
// m1 := true ;
13705: LD_ADDR_VAR 0 3
13709: PUSH
13710: LD_INT 1
13712: ST_TO_ADDR
// end else
13713: GO 13726
// AddMedal ( All , - 1 ) ;
13715: LD_STRING All
13717: PPUSH
13718: LD_INT 1
13720: NEG
13721: PPUSH
13722: CALL_OW 101
// if team_kill_counter then
13726: LD_EXP 9
13730: IFFALSE 13745
// AddMedal ( Save , - 1 ) else
13732: LD_STRING Save
13734: PPUSH
13735: LD_INT 1
13737: NEG
13738: PPUSH
13739: CALL_OW 101
13743: GO 13763
// begin AddMedal ( Save , 1 ) ;
13745: LD_STRING Save
13747: PPUSH
13748: LD_INT 1
13750: PPUSH
13751: CALL_OW 101
// m2 := true ;
13755: LD_ADDR_VAR 0 4
13759: PUSH
13760: LD_INT 1
13762: ST_TO_ADDR
// end ; if friends_kill_counter >= [ 2 , 2 , 1 , 1 ] [ Difficulty ] then
13763: LD_EXP 8
13767: PUSH
13768: LD_INT 2
13770: PUSH
13771: LD_INT 2
13773: PUSH
13774: LD_INT 1
13776: PUSH
13777: LD_INT 1
13779: PUSH
13780: EMPTY
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: PUSH
13786: LD_OWVAR 67
13790: ARRAY
13791: GREATEREQUAL
13792: IFFALSE 13807
// AddMedal ( Friendship , - 1 ) else
13794: LD_STRING Friendship
13796: PPUSH
13797: LD_INT 1
13799: NEG
13800: PPUSH
13801: CALL_OW 101
13805: GO 13825
// begin AddMedal ( Friendship , 1 ) ;
13807: LD_STRING Friendship
13809: PPUSH
13810: LD_INT 1
13812: PPUSH
13813: CALL_OW 101
// m3 := true ;
13817: LD_ADDR_VAR 0 5
13821: PUSH
13822: LD_INT 1
13824: ST_TO_ADDR
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
13825: LD_VAR 0 3
13829: PUSH
13830: LD_VAR 0 4
13834: AND
13835: PUSH
13836: LD_VAR 0 5
13840: AND
13841: PUSH
13842: LD_OWVAR 67
13846: PUSH
13847: LD_INT 3
13849: GREATEREQUAL
13850: AND
13851: IFFALSE 13863
// SetAchievementEX ( ACH_AMER , 16 ) ;
13853: LD_STRING ACH_AMER
13855: PPUSH
13856: LD_INT 16
13858: PPUSH
13859: CALL_OW 564
// GiveMedals ( MAIN ) ;
13863: LD_STRING MAIN
13865: PPUSH
13866: CALL_OW 102
// tmp := FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] , [ f_class , class_apeman_engineer ] ] ] ] ) ;
13870: LD_ADDR_VAR 0 2
13874: PUSH
13875: LD_INT 22
13877: PUSH
13878: LD_INT 7
13880: PUSH
13881: EMPTY
13882: LIST
13883: LIST
13884: PUSH
13885: LD_INT 2
13887: PUSH
13888: LD_INT 25
13890: PUSH
13891: LD_INT 1
13893: PUSH
13894: EMPTY
13895: LIST
13896: LIST
13897: PUSH
13898: LD_INT 25
13900: PUSH
13901: LD_INT 2
13903: PUSH
13904: EMPTY
13905: LIST
13906: LIST
13907: PUSH
13908: LD_INT 25
13910: PUSH
13911: LD_INT 3
13913: PUSH
13914: EMPTY
13915: LIST
13916: LIST
13917: PUSH
13918: LD_INT 25
13920: PUSH
13921: LD_INT 4
13923: PUSH
13924: EMPTY
13925: LIST
13926: LIST
13927: PUSH
13928: LD_INT 25
13930: PUSH
13931: LD_INT 5
13933: PUSH
13934: EMPTY
13935: LIST
13936: LIST
13937: PUSH
13938: LD_INT 25
13940: PUSH
13941: LD_INT 8
13943: PUSH
13944: EMPTY
13945: LIST
13946: LIST
13947: PUSH
13948: LD_INT 25
13950: PUSH
13951: LD_INT 9
13953: PUSH
13954: EMPTY
13955: LIST
13956: LIST
13957: PUSH
13958: LD_INT 25
13960: PUSH
13961: LD_INT 16
13963: PUSH
13964: EMPTY
13965: LIST
13966: LIST
13967: PUSH
13968: EMPTY
13969: LIST
13970: LIST
13971: LIST
13972: LIST
13973: LIST
13974: LIST
13975: LIST
13976: LIST
13977: LIST
13978: PUSH
13979: EMPTY
13980: LIST
13981: LIST
13982: PUSH
13983: EMPTY
13984: LIST
13985: PPUSH
13986: CALL_OW 69
13990: ST_TO_ADDR
// RewardPeople ( tmp union Roth diff Mike ) ;
13991: LD_VAR 0 2
13995: PUSH
13996: LD_EXP 16
14000: UNION
14001: PUSH
14002: LD_EXP 39
14006: DIFF
14007: PPUSH
14008: CALL_OW 43
// SaveCharacters ( JMM , 12a_JMM ) ;
14012: LD_EXP 15
14016: PPUSH
14017: LD_STRING 12a_JMM
14019: PPUSH
14020: CALL_OW 38
// if IsLive ( Roth ) then
14024: LD_EXP 16
14028: PPUSH
14029: CALL_OW 300
14033: IFFALSE 14047
// SaveCharacters ( Roth , 12a_Roth ) ;
14035: LD_EXP 16
14039: PPUSH
14040: LD_STRING 12a_Roth
14042: PPUSH
14043: CALL_OW 38
// if Lisa in tmp then
14047: LD_EXP 24
14051: PUSH
14052: LD_VAR 0 2
14056: IN
14057: IFFALSE 14073
// SaveCharacters ( Lisa , 12a_Lisa ) else
14059: LD_EXP 24
14063: PPUSH
14064: LD_STRING 12a_Lisa
14066: PPUSH
14067: CALL_OW 38
14071: GO 14091
// if Lisa then
14073: LD_EXP 24
14077: IFFALSE 14091
// SaveCharacters ( Lisa , 12p_Lisa ) ;
14079: LD_EXP 24
14083: PPUSH
14084: LD_STRING 12p_Lisa
14086: PPUSH
14087: CALL_OW 38
// if Mike in tmp then
14091: LD_EXP 39
14095: PUSH
14096: LD_VAR 0 2
14100: IN
14101: IFFALSE 14115
// SaveCharacters ( Mike , 12a_Mike ) ;
14103: LD_EXP 39
14107: PPUSH
14108: LD_STRING 12a_Mike
14110: PPUSH
14111: CALL_OW 38
// if Donaldson in tmp then
14115: LD_EXP 25
14119: PUSH
14120: LD_VAR 0 2
14124: IN
14125: IFFALSE 14141
// SaveCharacters ( Donaldson , 12a_Donaldson ) else
14127: LD_EXP 25
14131: PPUSH
14132: LD_STRING 12a_Donaldson
14134: PPUSH
14135: CALL_OW 38
14139: GO 14159
// if Donaldson then
14141: LD_EXP 25
14145: IFFALSE 14159
// SaveCharacters ( Donaldson , 12p_Donaldson ) ;
14147: LD_EXP 25
14151: PPUSH
14152: LD_STRING 12p_Donaldson
14154: PPUSH
14155: CALL_OW 38
// if Bobby in tmp then
14159: LD_EXP 26
14163: PUSH
14164: LD_VAR 0 2
14168: IN
14169: IFFALSE 14185
// SaveCharacters ( Bobby , 12a_Bobby ) else
14171: LD_EXP 26
14175: PPUSH
14176: LD_STRING 12a_Bobby
14178: PPUSH
14179: CALL_OW 38
14183: GO 14203
// if Bobby then
14185: LD_EXP 26
14189: IFFALSE 14203
// SaveCharacters ( Bobby , 12p_Bobby ) ;
14191: LD_EXP 26
14195: PPUSH
14196: LD_STRING 12p_Bobby
14198: PPUSH
14199: CALL_OW 38
// if Cyrus in tmp then
14203: LD_EXP 27
14207: PUSH
14208: LD_VAR 0 2
14212: IN
14213: IFFALSE 14229
// SaveCharacters ( Cyrus , 12a_Cyrus ) else
14215: LD_EXP 27
14219: PPUSH
14220: LD_STRING 12a_Cyrus
14222: PPUSH
14223: CALL_OW 38
14227: GO 14247
// if Cyrus then
14229: LD_EXP 27
14233: IFFALSE 14247
// SaveCharacters ( Cyrus , 12p_Cyrus ) ;
14235: LD_EXP 27
14239: PPUSH
14240: LD_STRING 12p_Cyrus
14242: PPUSH
14243: CALL_OW 38
// if Denis in tmp then
14247: LD_EXP 28
14251: PUSH
14252: LD_VAR 0 2
14256: IN
14257: IFFALSE 14271
// SaveCharacters ( Denis , 12a_Denis ) ;
14259: LD_EXP 28
14263: PPUSH
14264: LD_STRING 12a_Denis
14266: PPUSH
14267: CALL_OW 38
// if Brown in tmp then
14271: LD_EXP 29
14275: PUSH
14276: LD_VAR 0 2
14280: IN
14281: IFFALSE 14297
// SaveCharacters ( Brown , 12a_Brown ) else
14283: LD_EXP 29
14287: PPUSH
14288: LD_STRING 12a_Brown
14290: PPUSH
14291: CALL_OW 38
14295: GO 14321
// if Brown in tmp then
14297: LD_EXP 29
14301: PUSH
14302: LD_VAR 0 2
14306: IN
14307: IFFALSE 14321
// SaveCharacters ( Brown , 12p_Brown ) ;
14309: LD_EXP 29
14313: PPUSH
14314: LD_STRING 12p_Brown
14316: PPUSH
14317: CALL_OW 38
// if Gladstone in tmp then
14321: LD_EXP 30
14325: PUSH
14326: LD_VAR 0 2
14330: IN
14331: IFFALSE 14347
// SaveCharacters ( Gladstone , 12a_Gladstone ) else
14333: LD_EXP 30
14337: PPUSH
14338: LD_STRING 12a_Gladstone
14340: PPUSH
14341: CALL_OW 38
14345: GO 14365
// if Gladstone then
14347: LD_EXP 30
14351: IFFALSE 14365
// SaveCharacters ( Gladstone , 12p_Gladstone ) ;
14353: LD_EXP 30
14357: PPUSH
14358: LD_STRING 12p_Gladstone
14360: PPUSH
14361: CALL_OW 38
// if Houten in tmp then
14365: LD_EXP 31
14369: PUSH
14370: LD_VAR 0 2
14374: IN
14375: IFFALSE 14391
// SaveCharacters ( Houten , 12a_Houten ) else
14377: LD_EXP 31
14381: PPUSH
14382: LD_STRING 12a_Houten
14384: PPUSH
14385: CALL_OW 38
14389: GO 14409
// if Houten then
14391: LD_EXP 31
14395: IFFALSE 14409
// SaveCharacters ( Houten , 12p_Houten ) ;
14397: LD_EXP 31
14401: PPUSH
14402: LD_STRING 12p_Houten
14404: PPUSH
14405: CALL_OW 38
// if Cornel in tmp then
14409: LD_EXP 32
14413: PUSH
14414: LD_VAR 0 2
14418: IN
14419: IFFALSE 14435
// SaveCharacters ( Cornel , 12a_Cornell ) else
14421: LD_EXP 32
14425: PPUSH
14426: LD_STRING 12a_Cornell
14428: PPUSH
14429: CALL_OW 38
14433: GO 14453
// if Cornel then
14435: LD_EXP 32
14439: IFFALSE 14453
// SaveCharacters ( Cornel , 12p_Cornell ) ;
14441: LD_EXP 32
14445: PPUSH
14446: LD_STRING 12p_Cornell
14448: PPUSH
14449: CALL_OW 38
// if Gary in tmp then
14453: LD_EXP 33
14457: PUSH
14458: LD_VAR 0 2
14462: IN
14463: IFFALSE 14479
// SaveCharacters ( Gary , 12a_Gary ) else
14465: LD_EXP 33
14469: PPUSH
14470: LD_STRING 12a_Gary
14472: PPUSH
14473: CALL_OW 38
14477: GO 14497
// if Gary then
14479: LD_EXP 33
14483: IFFALSE 14497
// SaveCharacters ( Gary , 12p_Gary ) ;
14485: LD_EXP 33
14489: PPUSH
14490: LD_STRING 12p_Gary
14492: PPUSH
14493: CALL_OW 38
// if Frank in tmp then
14497: LD_EXP 34
14501: PUSH
14502: LD_VAR 0 2
14506: IN
14507: IFFALSE 14521
// SaveCharacters ( Frank , 12a_Frank ) ;
14509: LD_EXP 34
14513: PPUSH
14514: LD_STRING 12a_Frank
14516: PPUSH
14517: CALL_OW 38
// if Kikuchi in tmp then
14521: LD_EXP 35
14525: PUSH
14526: LD_VAR 0 2
14530: IN
14531: IFFALSE 14547
// SaveCharacters ( Kikuchi , 12a_Kikuchi ) else
14533: LD_EXP 35
14537: PPUSH
14538: LD_STRING 12a_Kikuchi
14540: PPUSH
14541: CALL_OW 38
14545: GO 14565
// if Kikuchi then
14547: LD_EXP 35
14551: IFFALSE 14565
// SaveCharacters ( Kikuchi , 12p_Kikuchi ) ;
14553: LD_EXP 35
14557: PPUSH
14558: LD_STRING 12p_Kikuchi
14560: PPUSH
14561: CALL_OW 38
// if Simms in tmp then
14565: LD_EXP 36
14569: PUSH
14570: LD_VAR 0 2
14574: IN
14575: IFFALSE 14589
// SaveCharacters ( Simms , 12a_Simms ) ;
14577: LD_EXP 36
14581: PPUSH
14582: LD_STRING 12a_Simms
14584: PPUSH
14585: CALL_OW 38
// if Joan in tmp then
14589: LD_EXP 37
14593: PUSH
14594: LD_VAR 0 2
14598: IN
14599: IFFALSE 14613
// SaveCharacters ( Joan , 12a_Joan ) ;
14601: LD_EXP 37
14605: PPUSH
14606: LD_STRING 12a_Joan
14608: PPUSH
14609: CALL_OW 38
// if DeltaDoctor in tmp then
14613: LD_EXP 38
14617: PUSH
14618: LD_VAR 0 2
14622: IN
14623: IFFALSE 14637
// SaveCharacters ( DeltaDoctor , 12a_DeltaDoctor ) ;
14625: LD_EXP 38
14629: PPUSH
14630: LD_STRING 12a_DeltaDoctor
14632: PPUSH
14633: CALL_OW 38
// tmp := tmp diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Mike ] ;
14637: LD_ADDR_VAR 0 2
14641: PUSH
14642: LD_VAR 0 2
14646: PUSH
14647: LD_EXP 15
14651: PUSH
14652: LD_EXP 16
14656: PUSH
14657: LD_EXP 24
14661: PUSH
14662: LD_EXP 25
14666: PUSH
14667: LD_EXP 26
14671: PUSH
14672: LD_EXP 27
14676: PUSH
14677: LD_EXP 28
14681: PUSH
14682: LD_EXP 29
14686: PUSH
14687: LD_EXP 30
14691: PUSH
14692: LD_EXP 31
14696: PUSH
14697: LD_EXP 32
14701: PUSH
14702: LD_EXP 33
14706: PUSH
14707: LD_EXP 34
14711: PUSH
14712: LD_EXP 35
14716: PUSH
14717: LD_EXP 36
14721: PUSH
14722: LD_EXP 37
14726: PUSH
14727: LD_EXP 38
14731: PUSH
14732: LD_EXP 39
14736: PUSH
14737: EMPTY
14738: LIST
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: DIFF
14757: ST_TO_ADDR
// if tmp then
14758: LD_VAR 0 2
14762: IFFALSE 14776
// SaveCharacters ( tmp , 12a_others ) ;
14764: LD_VAR 0 2
14768: PPUSH
14769: LD_STRING 12a_others
14771: PPUSH
14772: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_side , 1 ] , [ f_side , 4 ] ] ] ) diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Powell , Mike ] ;
14776: LD_ADDR_VAR 0 2
14780: PUSH
14781: LD_INT 21
14783: PUSH
14784: LD_INT 1
14786: PUSH
14787: EMPTY
14788: LIST
14789: LIST
14790: PUSH
14791: LD_INT 23
14793: PUSH
14794: LD_INT 1
14796: PUSH
14797: EMPTY
14798: LIST
14799: LIST
14800: PUSH
14801: LD_INT 2
14803: PUSH
14804: LD_INT 22
14806: PUSH
14807: LD_INT 1
14809: PUSH
14810: EMPTY
14811: LIST
14812: LIST
14813: PUSH
14814: LD_INT 22
14816: PUSH
14817: LD_INT 4
14819: PUSH
14820: EMPTY
14821: LIST
14822: LIST
14823: PUSH
14824: EMPTY
14825: LIST
14826: LIST
14827: LIST
14828: PUSH
14829: EMPTY
14830: LIST
14831: LIST
14832: LIST
14833: PPUSH
14834: CALL_OW 69
14838: PUSH
14839: LD_EXP 15
14843: PUSH
14844: LD_EXP 16
14848: PUSH
14849: LD_EXP 24
14853: PUSH
14854: LD_EXP 25
14858: PUSH
14859: LD_EXP 26
14863: PUSH
14864: LD_EXP 27
14868: PUSH
14869: LD_EXP 28
14873: PUSH
14874: LD_EXP 29
14878: PUSH
14879: LD_EXP 30
14883: PUSH
14884: LD_EXP 31
14888: PUSH
14889: LD_EXP 32
14893: PUSH
14894: LD_EXP 33
14898: PUSH
14899: LD_EXP 34
14903: PUSH
14904: LD_EXP 35
14908: PUSH
14909: LD_EXP 36
14913: PUSH
14914: LD_EXP 37
14918: PUSH
14919: LD_EXP 38
14923: PUSH
14924: LD_EXP 17
14928: PUSH
14929: LD_EXP 39
14933: PUSH
14934: EMPTY
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: LIST
14945: LIST
14946: LIST
14947: LIST
14948: LIST
14949: LIST
14950: LIST
14951: LIST
14952: LIST
14953: LIST
14954: DIFF
14955: ST_TO_ADDR
// if tmp then
14956: LD_VAR 0 2
14960: IFFALSE 14974
// SaveCharacters ( tmp , 12p_others ) ;
14962: LD_VAR 0 2
14966: PPUSH
14967: LD_STRING 12p_others
14969: PPUSH
14970: CALL_OW 38
// YouWin ;
14974: CALL_OW 103
// end ; end_of_file
14978: PPOPN 5
14980: END
// on SailEvent ( event ) do var tmp ;
14981: LD_INT 0
14983: PPUSH
// begin if event = 1 then
14984: LD_VAR 0 1
14988: PUSH
14989: LD_INT 1
14991: EQUAL
14992: IFFALSE 15065
// begin if not mobile_patrol then
14994: LD_EXP 18
14998: NOT
14999: IFFALSE 15003
// exit ;
15001: GO 15065
// tmp := mobile_patrol [ mobile_patrol ] ;
15003: LD_ADDR_VAR 0 2
15007: PUSH
15008: LD_EXP 18
15012: PUSH
15013: LD_EXP 18
15017: ARRAY
15018: ST_TO_ADDR
// mobile_patrol := Delete ( mobile_patrol , mobile_patrol ) ;
15019: LD_ADDR_EXP 18
15023: PUSH
15024: LD_EXP 18
15028: PPUSH
15029: LD_EXP 18
15033: PPUSH
15034: CALL_OW 3
15038: ST_TO_ADDR
// Patrol ( tmp , mobile_points [ mobile_patrol + 1 ] , [ ] ) ;
15039: LD_VAR 0 2
15043: PPUSH
15044: LD_EXP 19
15048: PUSH
15049: LD_EXP 18
15053: PUSH
15054: LD_INT 1
15056: PLUS
15057: ARRAY
15058: PPUSH
15059: EMPTY
15060: PPUSH
15061: CALL 7021 0 3
// end ; end ;
15065: PPOPN 2
15067: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
15068: LD_VAR 0 1
15072: PPUSH
15073: CALL 31437 0 1
// if un = JMM then
15077: LD_VAR 0 1
15081: PUSH
15082: LD_EXP 15
15086: EQUAL
15087: IFFALSE 15096
// YouLost ( JMM ) ;
15089: LD_STRING JMM
15091: PPUSH
15092: CALL_OW 104
// if un = Powell then
15096: LD_VAR 0 1
15100: PUSH
15101: LD_EXP 17
15105: EQUAL
15106: IFFALSE 15118
// SaveVariable ( true , 12a_PowellKilled ) ;
15108: LD_INT 1
15110: PPUSH
15111: LD_STRING 12a_PowellKilled
15113: PPUSH
15114: CALL_OW 39
// if GetSide ( un ) = 7 and GetWeapon ( un ) = us_cargo_bay then
15118: LD_VAR 0 1
15122: PPUSH
15123: CALL_OW 255
15127: PUSH
15128: LD_INT 7
15130: EQUAL
15131: PUSH
15132: LD_VAR 0 1
15136: PPUSH
15137: CALL_OW 264
15141: PUSH
15142: LD_INT 12
15144: EQUAL
15145: AND
15146: IFFALSE 15155
// YouLost ( Artifact ) ;
15148: LD_STRING Artifact
15150: PPUSH
15151: CALL_OW 104
// if ( GetSide ( un ) = 7 and GetType ( un ) = unit_human ) or un = Roth then
15155: LD_VAR 0 1
15159: PPUSH
15160: CALL_OW 255
15164: PUSH
15165: LD_INT 7
15167: EQUAL
15168: PUSH
15169: LD_VAR 0 1
15173: PPUSH
15174: CALL_OW 247
15178: PUSH
15179: LD_INT 1
15181: EQUAL
15182: AND
15183: PUSH
15184: LD_VAR 0 1
15188: PUSH
15189: LD_EXP 16
15193: EQUAL
15194: OR
15195: IFFALSE 15211
// team_kill_counter := team_kill_counter + 1 ;
15197: LD_ADDR_EXP 9
15201: PUSH
15202: LD_EXP 9
15206: PUSH
15207: LD_INT 1
15209: PLUS
15210: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetType ( un ) = unit_human then
15211: LD_VAR 0 1
15215: PPUSH
15216: CALL_OW 255
15220: PUSH
15221: LD_INT 1
15223: EQUAL
15224: PUSH
15225: LD_VAR 0 1
15229: PPUSH
15230: CALL_OW 247
15234: PUSH
15235: LD_INT 1
15237: EQUAL
15238: AND
15239: IFFALSE 15255
// friends_kill_counter := friends_kill_counter + 1 ;
15241: LD_ADDR_EXP 8
15245: PUSH
15246: LD_EXP 8
15250: PUSH
15251: LD_INT 1
15253: PLUS
15254: ST_TO_ADDR
// if GetSide ( un ) <> 1 then
15255: LD_VAR 0 1
15259: PPUSH
15260: CALL_OW 255
15264: PUSH
15265: LD_INT 1
15267: NONEQUAL
15268: IFFALSE 15272
// exit ;
15270: GO 15374
// if GetControl ( un ) = control_remote then
15272: LD_VAR 0 1
15276: PPUSH
15277: CALL_OW 263
15281: PUSH
15282: LD_INT 2
15284: EQUAL
15285: IFFALSE 15303
// defenders := defenders diff un ;
15287: LD_ADDR_EXP 21
15291: PUSH
15292: LD_EXP 21
15296: PUSH
15297: LD_VAR 0 1
15301: DIFF
15302: ST_TO_ADDR
// if not un in defenders then
15303: LD_VAR 0 1
15307: PUSH
15308: LD_EXP 21
15312: IN
15313: NOT
15314: IFFALSE 15374
// begin defcon := [ GetX ( un ) , GetY ( un ) ] ;
15316: LD_ADDR_EXP 22
15320: PUSH
15321: LD_VAR 0 1
15325: PPUSH
15326: CALL_OW 250
15330: PUSH
15331: LD_VAR 0 1
15335: PPUSH
15336: CALL_OW 251
15340: PUSH
15341: EMPTY
15342: LIST
15343: LIST
15344: ST_TO_ADDR
// def_counter := Inc ( def_counter ) ;
15345: LD_ADDR_EXP 14
15349: PUSH
15350: LD_EXP 14
15354: PPUSH
15355: CALL 75394 0 1
15359: ST_TO_ADDR
// if def_counter < 4 then
15360: LD_EXP 14
15364: PUSH
15365: LD_INT 4
15367: LESS
15368: IFFALSE 15374
// Defend ;
15370: CALL 2958 0 0
// end ; end ;
15374: PPOPN 1
15376: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
15377: LD_VAR 0 1
15381: PPUSH
15382: LD_VAR 0 2
15386: PPUSH
15387: CALL 31557 0 2
// if GetSide ( veh ) <> 1 then
15391: LD_VAR 0 1
15395: PPUSH
15396: CALL_OW 255
15400: PUSH
15401: LD_INT 1
15403: NONEQUAL
15404: IFFALSE 15408
// exit ;
15406: GO 15432
// if GetControl ( veh ) = control_remote then
15408: LD_VAR 0 1
15412: PPUSH
15413: CALL_OW 263
15417: PUSH
15418: LD_INT 2
15420: EQUAL
15421: IFFALSE 15432
// Connect ( veh ) ;
15423: LD_VAR 0 1
15427: PPUSH
15428: CALL 44639 0 1
// end ;
15432: PPOPN 2
15434: END
// on UnitGoesToRed ( un ) do var i , veh ;
15435: LD_INT 0
15437: PPUSH
15438: PPUSH
// begin if GetSide ( un ) = 1 and GetControl ( un ) = control_remote then
15439: LD_VAR 0 1
15443: PPUSH
15444: CALL_OW 255
15448: PUSH
15449: LD_INT 1
15451: EQUAL
15452: PUSH
15453: LD_VAR 0 1
15457: PPUSH
15458: CALL_OW 263
15462: PUSH
15463: LD_INT 2
15465: EQUAL
15466: AND
15467: IFFALSE 15478
// ComUnlink ( un ) ;
15469: LD_VAR 0 1
15473: PPUSH
15474: CALL_OW 136
// if un = ambar0 then
15478: LD_VAR 0 1
15482: PUSH
15483: LD_INT 18
15485: EQUAL
15486: IFFALSE 15596
// begin uc_side := 1 ;
15488: LD_ADDR_OWVAR 20
15492: PUSH
15493: LD_INT 1
15495: ST_TO_ADDR
// uc_nation := 1 ;
15496: LD_ADDR_OWVAR 21
15500: PUSH
15501: LD_INT 1
15503: ST_TO_ADDR
// for i = 1 to 6 do
15504: LD_ADDR_VAR 0 2
15508: PUSH
15509: DOUBLE
15510: LD_INT 1
15512: DEC
15513: ST_TO_ADDR
15514: LD_INT 6
15516: PUSH
15517: FOR_TO
15518: IFFALSE 15594
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
15520: LD_INT 3
15522: PPUSH
15523: LD_INT 1
15525: PPUSH
15526: LD_INT 3
15528: PPUSH
15529: LD_INT 4
15531: PPUSH
15532: LD_INT 100
15534: PPUSH
15535: CALL 41171 0 5
// veh := CreateVehicle ;
15539: LD_ADDR_VAR 0 3
15543: PUSH
15544: CALL_OW 45
15548: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
15549: LD_VAR 0 3
15553: PPUSH
15554: LD_INT 1
15556: PPUSH
15557: CALL_OW 233
// PlaceUnitArea ( veh , west_spawn , false ) ;
15561: LD_VAR 0 3
15565: PPUSH
15566: LD_INT 25
15568: PPUSH
15569: LD_INT 0
15571: PPUSH
15572: CALL_OW 49
// defenders := defenders ^ veh ;
15576: LD_ADDR_EXP 21
15580: PUSH
15581: LD_EXP 21
15585: PUSH
15586: LD_VAR 0 3
15590: ADD
15591: ST_TO_ADDR
// end ;
15592: GO 15517
15594: POP
15595: POP
// end ; end ;
15596: PPOPN 3
15598: END
// on EnterBuilding ( building , unit ) do begin if unit = Powell then
15599: LD_VAR 0 2
15603: PUSH
15604: LD_EXP 17
15608: EQUAL
15609: IFFALSE 15620
// RemoveUnit ( Powell ) ;
15611: LD_EXP 17
15615: PPUSH
15616: CALL_OW 64
// end ;
15620: PPOPN 2
15622: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
15623: LD_VAR 0 1
15627: PPUSH
15628: CALL 31541 0 1
// end ; end_of_file end_of_file
15632: PPOPN 1
15634: END
// export globalGameSaveCounter ; every 0 0$1 do
15635: GO 15637
15637: DISABLE
// begin enable ;
15638: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
15639: LD_STRING updateTimer(
15641: PUSH
15642: LD_OWVAR 1
15646: STR
15647: PUSH
15648: LD_STRING );
15650: STR
15651: PPUSH
15652: CALL_OW 559
// end ;
15656: END
// every 0 0$1 do
15657: GO 15659
15659: DISABLE
// begin globalGameSaveCounter := 0 ;
15660: LD_ADDR_EXP 40
15664: PUSH
15665: LD_INT 0
15667: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
15668: LD_STRING setGameSaveCounter(0)
15670: PPUSH
15671: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
15675: LD_STRING initStreamRollete();
15677: PPUSH
15678: CALL_OW 559
// InitStreamMode ;
15682: CALL 17008 0 0
// DefineStreamItems ( false ) ;
15686: LD_INT 0
15688: PPUSH
15689: CALL 17472 0 1
// end ;
15693: END
// export function SOS_MapStart ( ) ; begin
15694: LD_INT 0
15696: PPUSH
// if streamModeActive then
15697: LD_EXP 41
15701: IFFALSE 15710
// DefineStreamItems ( true ) ;
15703: LD_INT 1
15705: PPUSH
15706: CALL 17472 0 1
// UpdateLuaVariables ( ) ;
15710: CALL 15727 0 0
// UpdateFactoryWaypoints ( ) ;
15714: CALL 30341 0 0
// UpdateWarehouseGatheringPoints ( ) ;
15718: CALL 30598 0 0
// end ;
15722: LD_VAR 0 1
15726: RET
// function UpdateLuaVariables ( ) ; begin
15727: LD_INT 0
15729: PPUSH
// if globalGameSaveCounter then
15730: LD_EXP 40
15734: IFFALSE 15768
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
15736: LD_ADDR_EXP 40
15740: PUSH
15741: LD_EXP 40
15745: PPUSH
15746: CALL 75394 0 1
15750: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
15751: LD_STRING setGameSaveCounter(
15753: PUSH
15754: LD_EXP 40
15758: STR
15759: PUSH
15760: LD_STRING )
15762: STR
15763: PPUSH
15764: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
15768: LD_STRING setGameDifficulty(
15770: PUSH
15771: LD_OWVAR 67
15775: STR
15776: PUSH
15777: LD_STRING )
15779: STR
15780: PPUSH
15781: CALL_OW 559
// end ;
15785: LD_VAR 0 1
15789: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15790: LD_INT 0
15792: PPUSH
// if p2 = stream_mode then
15793: LD_VAR 0 2
15797: PUSH
15798: LD_INT 100
15800: EQUAL
15801: IFFALSE 16804
// begin if not StreamModeActive then
15803: LD_EXP 41
15807: NOT
15808: IFFALSE 15818
// StreamModeActive := true ;
15810: LD_ADDR_EXP 41
15814: PUSH
15815: LD_INT 1
15817: ST_TO_ADDR
// if p3 = 0 then
15818: LD_VAR 0 3
15822: PUSH
15823: LD_INT 0
15825: EQUAL
15826: IFFALSE 15832
// InitStreamMode ;
15828: CALL 17008 0 0
// if p3 = 1 then
15832: LD_VAR 0 3
15836: PUSH
15837: LD_INT 1
15839: EQUAL
15840: IFFALSE 15850
// sRocket := true ;
15842: LD_ADDR_EXP 46
15846: PUSH
15847: LD_INT 1
15849: ST_TO_ADDR
// if p3 = 2 then
15850: LD_VAR 0 3
15854: PUSH
15855: LD_INT 2
15857: EQUAL
15858: IFFALSE 15868
// sSpeed := true ;
15860: LD_ADDR_EXP 45
15864: PUSH
15865: LD_INT 1
15867: ST_TO_ADDR
// if p3 = 3 then
15868: LD_VAR 0 3
15872: PUSH
15873: LD_INT 3
15875: EQUAL
15876: IFFALSE 15886
// sEngine := true ;
15878: LD_ADDR_EXP 47
15882: PUSH
15883: LD_INT 1
15885: ST_TO_ADDR
// if p3 = 4 then
15886: LD_VAR 0 3
15890: PUSH
15891: LD_INT 4
15893: EQUAL
15894: IFFALSE 15904
// sSpec := true ;
15896: LD_ADDR_EXP 44
15900: PUSH
15901: LD_INT 1
15903: ST_TO_ADDR
// if p3 = 5 then
15904: LD_VAR 0 3
15908: PUSH
15909: LD_INT 5
15911: EQUAL
15912: IFFALSE 15922
// sLevel := true ;
15914: LD_ADDR_EXP 48
15918: PUSH
15919: LD_INT 1
15921: ST_TO_ADDR
// if p3 = 6 then
15922: LD_VAR 0 3
15926: PUSH
15927: LD_INT 6
15929: EQUAL
15930: IFFALSE 15940
// sArmoury := true ;
15932: LD_ADDR_EXP 49
15936: PUSH
15937: LD_INT 1
15939: ST_TO_ADDR
// if p3 = 7 then
15940: LD_VAR 0 3
15944: PUSH
15945: LD_INT 7
15947: EQUAL
15948: IFFALSE 15958
// sRadar := true ;
15950: LD_ADDR_EXP 50
15954: PUSH
15955: LD_INT 1
15957: ST_TO_ADDR
// if p3 = 8 then
15958: LD_VAR 0 3
15962: PUSH
15963: LD_INT 8
15965: EQUAL
15966: IFFALSE 15976
// sBunker := true ;
15968: LD_ADDR_EXP 51
15972: PUSH
15973: LD_INT 1
15975: ST_TO_ADDR
// if p3 = 9 then
15976: LD_VAR 0 3
15980: PUSH
15981: LD_INT 9
15983: EQUAL
15984: IFFALSE 15994
// sHack := true ;
15986: LD_ADDR_EXP 52
15990: PUSH
15991: LD_INT 1
15993: ST_TO_ADDR
// if p3 = 10 then
15994: LD_VAR 0 3
15998: PUSH
15999: LD_INT 10
16001: EQUAL
16002: IFFALSE 16012
// sFire := true ;
16004: LD_ADDR_EXP 53
16008: PUSH
16009: LD_INT 1
16011: ST_TO_ADDR
// if p3 = 11 then
16012: LD_VAR 0 3
16016: PUSH
16017: LD_INT 11
16019: EQUAL
16020: IFFALSE 16030
// sRefresh := true ;
16022: LD_ADDR_EXP 54
16026: PUSH
16027: LD_INT 1
16029: ST_TO_ADDR
// if p3 = 12 then
16030: LD_VAR 0 3
16034: PUSH
16035: LD_INT 12
16037: EQUAL
16038: IFFALSE 16048
// sExp := true ;
16040: LD_ADDR_EXP 55
16044: PUSH
16045: LD_INT 1
16047: ST_TO_ADDR
// if p3 = 13 then
16048: LD_VAR 0 3
16052: PUSH
16053: LD_INT 13
16055: EQUAL
16056: IFFALSE 16066
// sDepot := true ;
16058: LD_ADDR_EXP 56
16062: PUSH
16063: LD_INT 1
16065: ST_TO_ADDR
// if p3 = 14 then
16066: LD_VAR 0 3
16070: PUSH
16071: LD_INT 14
16073: EQUAL
16074: IFFALSE 16084
// sFlag := true ;
16076: LD_ADDR_EXP 57
16080: PUSH
16081: LD_INT 1
16083: ST_TO_ADDR
// if p3 = 15 then
16084: LD_VAR 0 3
16088: PUSH
16089: LD_INT 15
16091: EQUAL
16092: IFFALSE 16102
// sKamikadze := true ;
16094: LD_ADDR_EXP 65
16098: PUSH
16099: LD_INT 1
16101: ST_TO_ADDR
// if p3 = 16 then
16102: LD_VAR 0 3
16106: PUSH
16107: LD_INT 16
16109: EQUAL
16110: IFFALSE 16120
// sTroll := true ;
16112: LD_ADDR_EXP 66
16116: PUSH
16117: LD_INT 1
16119: ST_TO_ADDR
// if p3 = 17 then
16120: LD_VAR 0 3
16124: PUSH
16125: LD_INT 17
16127: EQUAL
16128: IFFALSE 16138
// sSlow := true ;
16130: LD_ADDR_EXP 67
16134: PUSH
16135: LD_INT 1
16137: ST_TO_ADDR
// if p3 = 18 then
16138: LD_VAR 0 3
16142: PUSH
16143: LD_INT 18
16145: EQUAL
16146: IFFALSE 16156
// sLack := true ;
16148: LD_ADDR_EXP 68
16152: PUSH
16153: LD_INT 1
16155: ST_TO_ADDR
// if p3 = 19 then
16156: LD_VAR 0 3
16160: PUSH
16161: LD_INT 19
16163: EQUAL
16164: IFFALSE 16174
// sTank := true ;
16166: LD_ADDR_EXP 70
16170: PUSH
16171: LD_INT 1
16173: ST_TO_ADDR
// if p3 = 20 then
16174: LD_VAR 0 3
16178: PUSH
16179: LD_INT 20
16181: EQUAL
16182: IFFALSE 16192
// sRemote := true ;
16184: LD_ADDR_EXP 71
16188: PUSH
16189: LD_INT 1
16191: ST_TO_ADDR
// if p3 = 21 then
16192: LD_VAR 0 3
16196: PUSH
16197: LD_INT 21
16199: EQUAL
16200: IFFALSE 16210
// sPowell := true ;
16202: LD_ADDR_EXP 72
16206: PUSH
16207: LD_INT 1
16209: ST_TO_ADDR
// if p3 = 22 then
16210: LD_VAR 0 3
16214: PUSH
16215: LD_INT 22
16217: EQUAL
16218: IFFALSE 16228
// sTeleport := true ;
16220: LD_ADDR_EXP 75
16224: PUSH
16225: LD_INT 1
16227: ST_TO_ADDR
// if p3 = 23 then
16228: LD_VAR 0 3
16232: PUSH
16233: LD_INT 23
16235: EQUAL
16236: IFFALSE 16246
// sOilTower := true ;
16238: LD_ADDR_EXP 77
16242: PUSH
16243: LD_INT 1
16245: ST_TO_ADDR
// if p3 = 24 then
16246: LD_VAR 0 3
16250: PUSH
16251: LD_INT 24
16253: EQUAL
16254: IFFALSE 16264
// sShovel := true ;
16256: LD_ADDR_EXP 78
16260: PUSH
16261: LD_INT 1
16263: ST_TO_ADDR
// if p3 = 25 then
16264: LD_VAR 0 3
16268: PUSH
16269: LD_INT 25
16271: EQUAL
16272: IFFALSE 16282
// sSheik := true ;
16274: LD_ADDR_EXP 79
16278: PUSH
16279: LD_INT 1
16281: ST_TO_ADDR
// if p3 = 26 then
16282: LD_VAR 0 3
16286: PUSH
16287: LD_INT 26
16289: EQUAL
16290: IFFALSE 16300
// sEarthquake := true ;
16292: LD_ADDR_EXP 81
16296: PUSH
16297: LD_INT 1
16299: ST_TO_ADDR
// if p3 = 27 then
16300: LD_VAR 0 3
16304: PUSH
16305: LD_INT 27
16307: EQUAL
16308: IFFALSE 16318
// sAI := true ;
16310: LD_ADDR_EXP 82
16314: PUSH
16315: LD_INT 1
16317: ST_TO_ADDR
// if p3 = 28 then
16318: LD_VAR 0 3
16322: PUSH
16323: LD_INT 28
16325: EQUAL
16326: IFFALSE 16336
// sCargo := true ;
16328: LD_ADDR_EXP 85
16332: PUSH
16333: LD_INT 1
16335: ST_TO_ADDR
// if p3 = 29 then
16336: LD_VAR 0 3
16340: PUSH
16341: LD_INT 29
16343: EQUAL
16344: IFFALSE 16354
// sDLaser := true ;
16346: LD_ADDR_EXP 86
16350: PUSH
16351: LD_INT 1
16353: ST_TO_ADDR
// if p3 = 30 then
16354: LD_VAR 0 3
16358: PUSH
16359: LD_INT 30
16361: EQUAL
16362: IFFALSE 16372
// sExchange := true ;
16364: LD_ADDR_EXP 87
16368: PUSH
16369: LD_INT 1
16371: ST_TO_ADDR
// if p3 = 31 then
16372: LD_VAR 0 3
16376: PUSH
16377: LD_INT 31
16379: EQUAL
16380: IFFALSE 16390
// sFac := true ;
16382: LD_ADDR_EXP 88
16386: PUSH
16387: LD_INT 1
16389: ST_TO_ADDR
// if p3 = 32 then
16390: LD_VAR 0 3
16394: PUSH
16395: LD_INT 32
16397: EQUAL
16398: IFFALSE 16408
// sPower := true ;
16400: LD_ADDR_EXP 89
16404: PUSH
16405: LD_INT 1
16407: ST_TO_ADDR
// if p3 = 33 then
16408: LD_VAR 0 3
16412: PUSH
16413: LD_INT 33
16415: EQUAL
16416: IFFALSE 16426
// sRandom := true ;
16418: LD_ADDR_EXP 90
16422: PUSH
16423: LD_INT 1
16425: ST_TO_ADDR
// if p3 = 34 then
16426: LD_VAR 0 3
16430: PUSH
16431: LD_INT 34
16433: EQUAL
16434: IFFALSE 16444
// sShield := true ;
16436: LD_ADDR_EXP 91
16440: PUSH
16441: LD_INT 1
16443: ST_TO_ADDR
// if p3 = 35 then
16444: LD_VAR 0 3
16448: PUSH
16449: LD_INT 35
16451: EQUAL
16452: IFFALSE 16462
// sTime := true ;
16454: LD_ADDR_EXP 92
16458: PUSH
16459: LD_INT 1
16461: ST_TO_ADDR
// if p3 = 36 then
16462: LD_VAR 0 3
16466: PUSH
16467: LD_INT 36
16469: EQUAL
16470: IFFALSE 16480
// sTools := true ;
16472: LD_ADDR_EXP 93
16476: PUSH
16477: LD_INT 1
16479: ST_TO_ADDR
// if p3 = 101 then
16480: LD_VAR 0 3
16484: PUSH
16485: LD_INT 101
16487: EQUAL
16488: IFFALSE 16498
// sSold := true ;
16490: LD_ADDR_EXP 58
16494: PUSH
16495: LD_INT 1
16497: ST_TO_ADDR
// if p3 = 102 then
16498: LD_VAR 0 3
16502: PUSH
16503: LD_INT 102
16505: EQUAL
16506: IFFALSE 16516
// sDiff := true ;
16508: LD_ADDR_EXP 59
16512: PUSH
16513: LD_INT 1
16515: ST_TO_ADDR
// if p3 = 103 then
16516: LD_VAR 0 3
16520: PUSH
16521: LD_INT 103
16523: EQUAL
16524: IFFALSE 16534
// sFog := true ;
16526: LD_ADDR_EXP 62
16530: PUSH
16531: LD_INT 1
16533: ST_TO_ADDR
// if p3 = 104 then
16534: LD_VAR 0 3
16538: PUSH
16539: LD_INT 104
16541: EQUAL
16542: IFFALSE 16552
// sReset := true ;
16544: LD_ADDR_EXP 63
16548: PUSH
16549: LD_INT 1
16551: ST_TO_ADDR
// if p3 = 105 then
16552: LD_VAR 0 3
16556: PUSH
16557: LD_INT 105
16559: EQUAL
16560: IFFALSE 16570
// sSun := true ;
16562: LD_ADDR_EXP 64
16566: PUSH
16567: LD_INT 1
16569: ST_TO_ADDR
// if p3 = 106 then
16570: LD_VAR 0 3
16574: PUSH
16575: LD_INT 106
16577: EQUAL
16578: IFFALSE 16588
// sTiger := true ;
16580: LD_ADDR_EXP 60
16584: PUSH
16585: LD_INT 1
16587: ST_TO_ADDR
// if p3 = 107 then
16588: LD_VAR 0 3
16592: PUSH
16593: LD_INT 107
16595: EQUAL
16596: IFFALSE 16606
// sBomb := true ;
16598: LD_ADDR_EXP 61
16602: PUSH
16603: LD_INT 1
16605: ST_TO_ADDR
// if p3 = 108 then
16606: LD_VAR 0 3
16610: PUSH
16611: LD_INT 108
16613: EQUAL
16614: IFFALSE 16624
// sWound := true ;
16616: LD_ADDR_EXP 69
16620: PUSH
16621: LD_INT 1
16623: ST_TO_ADDR
// if p3 = 109 then
16624: LD_VAR 0 3
16628: PUSH
16629: LD_INT 109
16631: EQUAL
16632: IFFALSE 16642
// sBetray := true ;
16634: LD_ADDR_EXP 73
16638: PUSH
16639: LD_INT 1
16641: ST_TO_ADDR
// if p3 = 110 then
16642: LD_VAR 0 3
16646: PUSH
16647: LD_INT 110
16649: EQUAL
16650: IFFALSE 16660
// sContamin := true ;
16652: LD_ADDR_EXP 74
16656: PUSH
16657: LD_INT 1
16659: ST_TO_ADDR
// if p3 = 111 then
16660: LD_VAR 0 3
16664: PUSH
16665: LD_INT 111
16667: EQUAL
16668: IFFALSE 16678
// sOil := true ;
16670: LD_ADDR_EXP 76
16674: PUSH
16675: LD_INT 1
16677: ST_TO_ADDR
// if p3 = 112 then
16678: LD_VAR 0 3
16682: PUSH
16683: LD_INT 112
16685: EQUAL
16686: IFFALSE 16696
// sStu := true ;
16688: LD_ADDR_EXP 80
16692: PUSH
16693: LD_INT 1
16695: ST_TO_ADDR
// if p3 = 113 then
16696: LD_VAR 0 3
16700: PUSH
16701: LD_INT 113
16703: EQUAL
16704: IFFALSE 16714
// sBazooka := true ;
16706: LD_ADDR_EXP 83
16710: PUSH
16711: LD_INT 1
16713: ST_TO_ADDR
// if p3 = 114 then
16714: LD_VAR 0 3
16718: PUSH
16719: LD_INT 114
16721: EQUAL
16722: IFFALSE 16732
// sMortar := true ;
16724: LD_ADDR_EXP 84
16728: PUSH
16729: LD_INT 1
16731: ST_TO_ADDR
// if p3 = 115 then
16732: LD_VAR 0 3
16736: PUSH
16737: LD_INT 115
16739: EQUAL
16740: IFFALSE 16750
// sRanger := true ;
16742: LD_ADDR_EXP 94
16746: PUSH
16747: LD_INT 1
16749: ST_TO_ADDR
// if p3 = 116 then
16750: LD_VAR 0 3
16754: PUSH
16755: LD_INT 116
16757: EQUAL
16758: IFFALSE 16768
// sComputer := true ;
16760: LD_ADDR_EXP 95
16764: PUSH
16765: LD_INT 1
16767: ST_TO_ADDR
// if p3 = 117 then
16768: LD_VAR 0 3
16772: PUSH
16773: LD_INT 117
16775: EQUAL
16776: IFFALSE 16786
// s30 := true ;
16778: LD_ADDR_EXP 96
16782: PUSH
16783: LD_INT 1
16785: ST_TO_ADDR
// if p3 = 118 then
16786: LD_VAR 0 3
16790: PUSH
16791: LD_INT 118
16793: EQUAL
16794: IFFALSE 16804
// s60 := true ;
16796: LD_ADDR_EXP 97
16800: PUSH
16801: LD_INT 1
16803: ST_TO_ADDR
// end ; if p2 = hack_mode then
16804: LD_VAR 0 2
16808: PUSH
16809: LD_INT 101
16811: EQUAL
16812: IFFALSE 16940
// begin case p3 of 1 :
16814: LD_VAR 0 3
16818: PUSH
16819: LD_INT 1
16821: DOUBLE
16822: EQUAL
16823: IFTRUE 16827
16825: GO 16834
16827: POP
// hHackUnlimitedResources ; 2 :
16828: CALL 29087 0 0
16832: GO 16940
16834: LD_INT 2
16836: DOUBLE
16837: EQUAL
16838: IFTRUE 16842
16840: GO 16849
16842: POP
// hHackSetLevel10 ; 3 :
16843: CALL 29220 0 0
16847: GO 16940
16849: LD_INT 3
16851: DOUBLE
16852: EQUAL
16853: IFTRUE 16857
16855: GO 16864
16857: POP
// hHackSetLevel10YourUnits ; 4 :
16858: CALL 29305 0 0
16862: GO 16940
16864: LD_INT 4
16866: DOUBLE
16867: EQUAL
16868: IFTRUE 16872
16870: GO 16879
16872: POP
// hHackInvincible ; 5 :
16873: CALL 29753 0 0
16877: GO 16940
16879: LD_INT 5
16881: DOUBLE
16882: EQUAL
16883: IFTRUE 16887
16885: GO 16894
16887: POP
// hHackInvisible ; 6 :
16888: CALL 29864 0 0
16892: GO 16940
16894: LD_INT 6
16896: DOUBLE
16897: EQUAL
16898: IFTRUE 16902
16900: GO 16909
16902: POP
// hHackChangeYourSide ; 7 :
16903: CALL 29921 0 0
16907: GO 16940
16909: LD_INT 7
16911: DOUBLE
16912: EQUAL
16913: IFTRUE 16917
16915: GO 16924
16917: POP
// hHackChangeUnitSide ; 8 :
16918: CALL 29963 0 0
16922: GO 16940
16924: LD_INT 8
16926: DOUBLE
16927: EQUAL
16928: IFTRUE 16932
16930: GO 16939
16932: POP
// hHackFog ; end ;
16933: CALL 30064 0 0
16937: GO 16940
16939: POP
// end ; if p2 = game_save_mode then
16940: LD_VAR 0 2
16944: PUSH
16945: LD_INT 102
16947: EQUAL
16948: IFFALSE 17003
// begin if p3 = 1 then
16950: LD_VAR 0 3
16954: PUSH
16955: LD_INT 1
16957: EQUAL
16958: IFFALSE 16970
// globalGameSaveCounter := p4 ;
16960: LD_ADDR_EXP 40
16964: PUSH
16965: LD_VAR 0 4
16969: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
16970: LD_VAR 0 3
16974: PUSH
16975: LD_INT 2
16977: EQUAL
16978: PUSH
16979: LD_EXP 40
16983: AND
16984: IFFALSE 17003
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
16986: LD_STRING setGameSaveCounter(
16988: PUSH
16989: LD_EXP 40
16993: STR
16994: PUSH
16995: LD_STRING )
16997: STR
16998: PPUSH
16999: CALL_OW 559
// end ; end ;
17003: LD_VAR 0 7
17007: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
17008: LD_INT 0
17010: PPUSH
// streamModeActive := false ;
17011: LD_ADDR_EXP 41
17015: PUSH
17016: LD_INT 0
17018: ST_TO_ADDR
// normalCounter := 36 ;
17019: LD_ADDR_EXP 42
17023: PUSH
17024: LD_INT 36
17026: ST_TO_ADDR
// hardcoreCounter := 18 ;
17027: LD_ADDR_EXP 43
17031: PUSH
17032: LD_INT 18
17034: ST_TO_ADDR
// sRocket := false ;
17035: LD_ADDR_EXP 46
17039: PUSH
17040: LD_INT 0
17042: ST_TO_ADDR
// sSpeed := false ;
17043: LD_ADDR_EXP 45
17047: PUSH
17048: LD_INT 0
17050: ST_TO_ADDR
// sEngine := false ;
17051: LD_ADDR_EXP 47
17055: PUSH
17056: LD_INT 0
17058: ST_TO_ADDR
// sSpec := false ;
17059: LD_ADDR_EXP 44
17063: PUSH
17064: LD_INT 0
17066: ST_TO_ADDR
// sLevel := false ;
17067: LD_ADDR_EXP 48
17071: PUSH
17072: LD_INT 0
17074: ST_TO_ADDR
// sArmoury := false ;
17075: LD_ADDR_EXP 49
17079: PUSH
17080: LD_INT 0
17082: ST_TO_ADDR
// sRadar := false ;
17083: LD_ADDR_EXP 50
17087: PUSH
17088: LD_INT 0
17090: ST_TO_ADDR
// sBunker := false ;
17091: LD_ADDR_EXP 51
17095: PUSH
17096: LD_INT 0
17098: ST_TO_ADDR
// sHack := false ;
17099: LD_ADDR_EXP 52
17103: PUSH
17104: LD_INT 0
17106: ST_TO_ADDR
// sFire := false ;
17107: LD_ADDR_EXP 53
17111: PUSH
17112: LD_INT 0
17114: ST_TO_ADDR
// sRefresh := false ;
17115: LD_ADDR_EXP 54
17119: PUSH
17120: LD_INT 0
17122: ST_TO_ADDR
// sExp := false ;
17123: LD_ADDR_EXP 55
17127: PUSH
17128: LD_INT 0
17130: ST_TO_ADDR
// sDepot := false ;
17131: LD_ADDR_EXP 56
17135: PUSH
17136: LD_INT 0
17138: ST_TO_ADDR
// sFlag := false ;
17139: LD_ADDR_EXP 57
17143: PUSH
17144: LD_INT 0
17146: ST_TO_ADDR
// sKamikadze := false ;
17147: LD_ADDR_EXP 65
17151: PUSH
17152: LD_INT 0
17154: ST_TO_ADDR
// sTroll := false ;
17155: LD_ADDR_EXP 66
17159: PUSH
17160: LD_INT 0
17162: ST_TO_ADDR
// sSlow := false ;
17163: LD_ADDR_EXP 67
17167: PUSH
17168: LD_INT 0
17170: ST_TO_ADDR
// sLack := false ;
17171: LD_ADDR_EXP 68
17175: PUSH
17176: LD_INT 0
17178: ST_TO_ADDR
// sTank := false ;
17179: LD_ADDR_EXP 70
17183: PUSH
17184: LD_INT 0
17186: ST_TO_ADDR
// sRemote := false ;
17187: LD_ADDR_EXP 71
17191: PUSH
17192: LD_INT 0
17194: ST_TO_ADDR
// sPowell := false ;
17195: LD_ADDR_EXP 72
17199: PUSH
17200: LD_INT 0
17202: ST_TO_ADDR
// sTeleport := false ;
17203: LD_ADDR_EXP 75
17207: PUSH
17208: LD_INT 0
17210: ST_TO_ADDR
// sOilTower := false ;
17211: LD_ADDR_EXP 77
17215: PUSH
17216: LD_INT 0
17218: ST_TO_ADDR
// sShovel := false ;
17219: LD_ADDR_EXP 78
17223: PUSH
17224: LD_INT 0
17226: ST_TO_ADDR
// sSheik := false ;
17227: LD_ADDR_EXP 79
17231: PUSH
17232: LD_INT 0
17234: ST_TO_ADDR
// sEarthquake := false ;
17235: LD_ADDR_EXP 81
17239: PUSH
17240: LD_INT 0
17242: ST_TO_ADDR
// sAI := false ;
17243: LD_ADDR_EXP 82
17247: PUSH
17248: LD_INT 0
17250: ST_TO_ADDR
// sCargo := false ;
17251: LD_ADDR_EXP 85
17255: PUSH
17256: LD_INT 0
17258: ST_TO_ADDR
// sDLaser := false ;
17259: LD_ADDR_EXP 86
17263: PUSH
17264: LD_INT 0
17266: ST_TO_ADDR
// sExchange := false ;
17267: LD_ADDR_EXP 87
17271: PUSH
17272: LD_INT 0
17274: ST_TO_ADDR
// sFac := false ;
17275: LD_ADDR_EXP 88
17279: PUSH
17280: LD_INT 0
17282: ST_TO_ADDR
// sPower := false ;
17283: LD_ADDR_EXP 89
17287: PUSH
17288: LD_INT 0
17290: ST_TO_ADDR
// sRandom := false ;
17291: LD_ADDR_EXP 90
17295: PUSH
17296: LD_INT 0
17298: ST_TO_ADDR
// sShield := false ;
17299: LD_ADDR_EXP 91
17303: PUSH
17304: LD_INT 0
17306: ST_TO_ADDR
// sTime := false ;
17307: LD_ADDR_EXP 92
17311: PUSH
17312: LD_INT 0
17314: ST_TO_ADDR
// sTools := false ;
17315: LD_ADDR_EXP 93
17319: PUSH
17320: LD_INT 0
17322: ST_TO_ADDR
// sSold := false ;
17323: LD_ADDR_EXP 58
17327: PUSH
17328: LD_INT 0
17330: ST_TO_ADDR
// sDiff := false ;
17331: LD_ADDR_EXP 59
17335: PUSH
17336: LD_INT 0
17338: ST_TO_ADDR
// sFog := false ;
17339: LD_ADDR_EXP 62
17343: PUSH
17344: LD_INT 0
17346: ST_TO_ADDR
// sReset := false ;
17347: LD_ADDR_EXP 63
17351: PUSH
17352: LD_INT 0
17354: ST_TO_ADDR
// sSun := false ;
17355: LD_ADDR_EXP 64
17359: PUSH
17360: LD_INT 0
17362: ST_TO_ADDR
// sTiger := false ;
17363: LD_ADDR_EXP 60
17367: PUSH
17368: LD_INT 0
17370: ST_TO_ADDR
// sBomb := false ;
17371: LD_ADDR_EXP 61
17375: PUSH
17376: LD_INT 0
17378: ST_TO_ADDR
// sWound := false ;
17379: LD_ADDR_EXP 69
17383: PUSH
17384: LD_INT 0
17386: ST_TO_ADDR
// sBetray := false ;
17387: LD_ADDR_EXP 73
17391: PUSH
17392: LD_INT 0
17394: ST_TO_ADDR
// sContamin := false ;
17395: LD_ADDR_EXP 74
17399: PUSH
17400: LD_INT 0
17402: ST_TO_ADDR
// sOil := false ;
17403: LD_ADDR_EXP 76
17407: PUSH
17408: LD_INT 0
17410: ST_TO_ADDR
// sStu := false ;
17411: LD_ADDR_EXP 80
17415: PUSH
17416: LD_INT 0
17418: ST_TO_ADDR
// sBazooka := false ;
17419: LD_ADDR_EXP 83
17423: PUSH
17424: LD_INT 0
17426: ST_TO_ADDR
// sMortar := false ;
17427: LD_ADDR_EXP 84
17431: PUSH
17432: LD_INT 0
17434: ST_TO_ADDR
// sRanger := false ;
17435: LD_ADDR_EXP 94
17439: PUSH
17440: LD_INT 0
17442: ST_TO_ADDR
// sComputer := false ;
17443: LD_ADDR_EXP 95
17447: PUSH
17448: LD_INT 0
17450: ST_TO_ADDR
// s30 := false ;
17451: LD_ADDR_EXP 96
17455: PUSH
17456: LD_INT 0
17458: ST_TO_ADDR
// s60 := false ;
17459: LD_ADDR_EXP 97
17463: PUSH
17464: LD_INT 0
17466: ST_TO_ADDR
// end ;
17467: LD_VAR 0 1
17471: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
17472: LD_INT 0
17474: PPUSH
17475: PPUSH
17476: PPUSH
17477: PPUSH
17478: PPUSH
17479: PPUSH
17480: PPUSH
// result := [ ] ;
17481: LD_ADDR_VAR 0 2
17485: PUSH
17486: EMPTY
17487: ST_TO_ADDR
// if campaign_id = 1 then
17488: LD_OWVAR 69
17492: PUSH
17493: LD_INT 1
17495: EQUAL
17496: IFFALSE 20662
// begin case mission_number of 1 :
17498: LD_OWVAR 70
17502: PUSH
17503: LD_INT 1
17505: DOUBLE
17506: EQUAL
17507: IFTRUE 17511
17509: GO 17587
17511: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
17512: LD_ADDR_VAR 0 2
17516: PUSH
17517: LD_INT 2
17519: PUSH
17520: LD_INT 4
17522: PUSH
17523: LD_INT 11
17525: PUSH
17526: LD_INT 12
17528: PUSH
17529: LD_INT 15
17531: PUSH
17532: LD_INT 16
17534: PUSH
17535: LD_INT 22
17537: PUSH
17538: LD_INT 23
17540: PUSH
17541: LD_INT 26
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: LIST
17548: LIST
17549: LIST
17550: LIST
17551: LIST
17552: LIST
17553: LIST
17554: PUSH
17555: LD_INT 101
17557: PUSH
17558: LD_INT 102
17560: PUSH
17561: LD_INT 106
17563: PUSH
17564: LD_INT 116
17566: PUSH
17567: LD_INT 117
17569: PUSH
17570: LD_INT 118
17572: PUSH
17573: EMPTY
17574: LIST
17575: LIST
17576: LIST
17577: LIST
17578: LIST
17579: LIST
17580: PUSH
17581: EMPTY
17582: LIST
17583: LIST
17584: ST_TO_ADDR
17585: GO 20660
17587: LD_INT 2
17589: DOUBLE
17590: EQUAL
17591: IFTRUE 17595
17593: GO 17679
17595: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
17596: LD_ADDR_VAR 0 2
17600: PUSH
17601: LD_INT 2
17603: PUSH
17604: LD_INT 4
17606: PUSH
17607: LD_INT 11
17609: PUSH
17610: LD_INT 12
17612: PUSH
17613: LD_INT 15
17615: PUSH
17616: LD_INT 16
17618: PUSH
17619: LD_INT 22
17621: PUSH
17622: LD_INT 23
17624: PUSH
17625: LD_INT 26
17627: PUSH
17628: EMPTY
17629: LIST
17630: LIST
17631: LIST
17632: LIST
17633: LIST
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: PUSH
17639: LD_INT 101
17641: PUSH
17642: LD_INT 102
17644: PUSH
17645: LD_INT 105
17647: PUSH
17648: LD_INT 106
17650: PUSH
17651: LD_INT 108
17653: PUSH
17654: LD_INT 116
17656: PUSH
17657: LD_INT 117
17659: PUSH
17660: LD_INT 118
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: LIST
17667: LIST
17668: LIST
17669: LIST
17670: LIST
17671: LIST
17672: PUSH
17673: EMPTY
17674: LIST
17675: LIST
17676: ST_TO_ADDR
17677: GO 20660
17679: LD_INT 3
17681: DOUBLE
17682: EQUAL
17683: IFTRUE 17687
17685: GO 17775
17687: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
17688: LD_ADDR_VAR 0 2
17692: PUSH
17693: LD_INT 2
17695: PUSH
17696: LD_INT 4
17698: PUSH
17699: LD_INT 5
17701: PUSH
17702: LD_INT 11
17704: PUSH
17705: LD_INT 12
17707: PUSH
17708: LD_INT 15
17710: PUSH
17711: LD_INT 16
17713: PUSH
17714: LD_INT 22
17716: PUSH
17717: LD_INT 26
17719: PUSH
17720: LD_INT 36
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: LIST
17727: LIST
17728: LIST
17729: LIST
17730: LIST
17731: LIST
17732: LIST
17733: LIST
17734: PUSH
17735: LD_INT 101
17737: PUSH
17738: LD_INT 102
17740: PUSH
17741: LD_INT 105
17743: PUSH
17744: LD_INT 106
17746: PUSH
17747: LD_INT 108
17749: PUSH
17750: LD_INT 116
17752: PUSH
17753: LD_INT 117
17755: PUSH
17756: LD_INT 118
17758: PUSH
17759: EMPTY
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: LIST
17765: LIST
17766: LIST
17767: LIST
17768: PUSH
17769: EMPTY
17770: LIST
17771: LIST
17772: ST_TO_ADDR
17773: GO 20660
17775: LD_INT 4
17777: DOUBLE
17778: EQUAL
17779: IFTRUE 17783
17781: GO 17879
17783: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
17784: LD_ADDR_VAR 0 2
17788: PUSH
17789: LD_INT 2
17791: PUSH
17792: LD_INT 4
17794: PUSH
17795: LD_INT 5
17797: PUSH
17798: LD_INT 8
17800: PUSH
17801: LD_INT 11
17803: PUSH
17804: LD_INT 12
17806: PUSH
17807: LD_INT 15
17809: PUSH
17810: LD_INT 16
17812: PUSH
17813: LD_INT 22
17815: PUSH
17816: LD_INT 23
17818: PUSH
17819: LD_INT 26
17821: PUSH
17822: LD_INT 36
17824: PUSH
17825: EMPTY
17826: LIST
17827: LIST
17828: LIST
17829: LIST
17830: LIST
17831: LIST
17832: LIST
17833: LIST
17834: LIST
17835: LIST
17836: LIST
17837: LIST
17838: PUSH
17839: LD_INT 101
17841: PUSH
17842: LD_INT 102
17844: PUSH
17845: LD_INT 105
17847: PUSH
17848: LD_INT 106
17850: PUSH
17851: LD_INT 108
17853: PUSH
17854: LD_INT 116
17856: PUSH
17857: LD_INT 117
17859: PUSH
17860: LD_INT 118
17862: PUSH
17863: EMPTY
17864: LIST
17865: LIST
17866: LIST
17867: LIST
17868: LIST
17869: LIST
17870: LIST
17871: LIST
17872: PUSH
17873: EMPTY
17874: LIST
17875: LIST
17876: ST_TO_ADDR
17877: GO 20660
17879: LD_INT 5
17881: DOUBLE
17882: EQUAL
17883: IFTRUE 17887
17885: GO 17999
17887: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
17888: LD_ADDR_VAR 0 2
17892: PUSH
17893: LD_INT 2
17895: PUSH
17896: LD_INT 4
17898: PUSH
17899: LD_INT 5
17901: PUSH
17902: LD_INT 6
17904: PUSH
17905: LD_INT 8
17907: PUSH
17908: LD_INT 11
17910: PUSH
17911: LD_INT 12
17913: PUSH
17914: LD_INT 15
17916: PUSH
17917: LD_INT 16
17919: PUSH
17920: LD_INT 22
17922: PUSH
17923: LD_INT 23
17925: PUSH
17926: LD_INT 25
17928: PUSH
17929: LD_INT 26
17931: PUSH
17932: LD_INT 36
17934: PUSH
17935: EMPTY
17936: LIST
17937: LIST
17938: LIST
17939: LIST
17940: LIST
17941: LIST
17942: LIST
17943: LIST
17944: LIST
17945: LIST
17946: LIST
17947: LIST
17948: LIST
17949: LIST
17950: PUSH
17951: LD_INT 101
17953: PUSH
17954: LD_INT 102
17956: PUSH
17957: LD_INT 105
17959: PUSH
17960: LD_INT 106
17962: PUSH
17963: LD_INT 108
17965: PUSH
17966: LD_INT 109
17968: PUSH
17969: LD_INT 112
17971: PUSH
17972: LD_INT 116
17974: PUSH
17975: LD_INT 117
17977: PUSH
17978: LD_INT 118
17980: PUSH
17981: EMPTY
17982: LIST
17983: LIST
17984: LIST
17985: LIST
17986: LIST
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: PUSH
17993: EMPTY
17994: LIST
17995: LIST
17996: ST_TO_ADDR
17997: GO 20660
17999: LD_INT 6
18001: DOUBLE
18002: EQUAL
18003: IFTRUE 18007
18005: GO 18139
18007: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
18008: LD_ADDR_VAR 0 2
18012: PUSH
18013: LD_INT 2
18015: PUSH
18016: LD_INT 4
18018: PUSH
18019: LD_INT 5
18021: PUSH
18022: LD_INT 6
18024: PUSH
18025: LD_INT 8
18027: PUSH
18028: LD_INT 11
18030: PUSH
18031: LD_INT 12
18033: PUSH
18034: LD_INT 15
18036: PUSH
18037: LD_INT 16
18039: PUSH
18040: LD_INT 20
18042: PUSH
18043: LD_INT 21
18045: PUSH
18046: LD_INT 22
18048: PUSH
18049: LD_INT 23
18051: PUSH
18052: LD_INT 25
18054: PUSH
18055: LD_INT 26
18057: PUSH
18058: LD_INT 30
18060: PUSH
18061: LD_INT 31
18063: PUSH
18064: LD_INT 32
18066: PUSH
18067: LD_INT 36
18069: PUSH
18070: EMPTY
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: LIST
18078: LIST
18079: LIST
18080: LIST
18081: LIST
18082: LIST
18083: LIST
18084: LIST
18085: LIST
18086: LIST
18087: LIST
18088: LIST
18089: LIST
18090: PUSH
18091: LD_INT 101
18093: PUSH
18094: LD_INT 102
18096: PUSH
18097: LD_INT 105
18099: PUSH
18100: LD_INT 106
18102: PUSH
18103: LD_INT 108
18105: PUSH
18106: LD_INT 109
18108: PUSH
18109: LD_INT 112
18111: PUSH
18112: LD_INT 116
18114: PUSH
18115: LD_INT 117
18117: PUSH
18118: LD_INT 118
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: LIST
18125: LIST
18126: LIST
18127: LIST
18128: LIST
18129: LIST
18130: LIST
18131: LIST
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: ST_TO_ADDR
18137: GO 20660
18139: LD_INT 7
18141: DOUBLE
18142: EQUAL
18143: IFTRUE 18147
18145: GO 18259
18147: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
18148: LD_ADDR_VAR 0 2
18152: PUSH
18153: LD_INT 2
18155: PUSH
18156: LD_INT 4
18158: PUSH
18159: LD_INT 5
18161: PUSH
18162: LD_INT 7
18164: PUSH
18165: LD_INT 11
18167: PUSH
18168: LD_INT 12
18170: PUSH
18171: LD_INT 15
18173: PUSH
18174: LD_INT 16
18176: PUSH
18177: LD_INT 20
18179: PUSH
18180: LD_INT 21
18182: PUSH
18183: LD_INT 22
18185: PUSH
18186: LD_INT 23
18188: PUSH
18189: LD_INT 25
18191: PUSH
18192: LD_INT 26
18194: PUSH
18195: EMPTY
18196: LIST
18197: LIST
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: LIST
18203: LIST
18204: LIST
18205: LIST
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: PUSH
18211: LD_INT 101
18213: PUSH
18214: LD_INT 102
18216: PUSH
18217: LD_INT 103
18219: PUSH
18220: LD_INT 105
18222: PUSH
18223: LD_INT 106
18225: PUSH
18226: LD_INT 108
18228: PUSH
18229: LD_INT 112
18231: PUSH
18232: LD_INT 116
18234: PUSH
18235: LD_INT 117
18237: PUSH
18238: LD_INT 118
18240: PUSH
18241: EMPTY
18242: LIST
18243: LIST
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: LIST
18249: LIST
18250: LIST
18251: LIST
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: ST_TO_ADDR
18257: GO 20660
18259: LD_INT 8
18261: DOUBLE
18262: EQUAL
18263: IFTRUE 18267
18265: GO 18407
18267: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
18268: LD_ADDR_VAR 0 2
18272: PUSH
18273: LD_INT 2
18275: PUSH
18276: LD_INT 4
18278: PUSH
18279: LD_INT 5
18281: PUSH
18282: LD_INT 6
18284: PUSH
18285: LD_INT 7
18287: PUSH
18288: LD_INT 8
18290: PUSH
18291: LD_INT 11
18293: PUSH
18294: LD_INT 12
18296: PUSH
18297: LD_INT 15
18299: PUSH
18300: LD_INT 16
18302: PUSH
18303: LD_INT 20
18305: PUSH
18306: LD_INT 21
18308: PUSH
18309: LD_INT 22
18311: PUSH
18312: LD_INT 23
18314: PUSH
18315: LD_INT 25
18317: PUSH
18318: LD_INT 26
18320: PUSH
18321: LD_INT 30
18323: PUSH
18324: LD_INT 31
18326: PUSH
18327: LD_INT 32
18329: PUSH
18330: LD_INT 36
18332: PUSH
18333: EMPTY
18334: LIST
18335: LIST
18336: LIST
18337: LIST
18338: LIST
18339: LIST
18340: LIST
18341: LIST
18342: LIST
18343: LIST
18344: LIST
18345: LIST
18346: LIST
18347: LIST
18348: LIST
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: LIST
18354: PUSH
18355: LD_INT 101
18357: PUSH
18358: LD_INT 102
18360: PUSH
18361: LD_INT 103
18363: PUSH
18364: LD_INT 105
18366: PUSH
18367: LD_INT 106
18369: PUSH
18370: LD_INT 108
18372: PUSH
18373: LD_INT 109
18375: PUSH
18376: LD_INT 112
18378: PUSH
18379: LD_INT 116
18381: PUSH
18382: LD_INT 117
18384: PUSH
18385: LD_INT 118
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: LIST
18395: LIST
18396: LIST
18397: LIST
18398: LIST
18399: LIST
18400: PUSH
18401: EMPTY
18402: LIST
18403: LIST
18404: ST_TO_ADDR
18405: GO 20660
18407: LD_INT 9
18409: DOUBLE
18410: EQUAL
18411: IFTRUE 18415
18413: GO 18563
18415: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
18416: LD_ADDR_VAR 0 2
18420: PUSH
18421: LD_INT 2
18423: PUSH
18424: LD_INT 4
18426: PUSH
18427: LD_INT 5
18429: PUSH
18430: LD_INT 6
18432: PUSH
18433: LD_INT 7
18435: PUSH
18436: LD_INT 8
18438: PUSH
18439: LD_INT 11
18441: PUSH
18442: LD_INT 12
18444: PUSH
18445: LD_INT 15
18447: PUSH
18448: LD_INT 16
18450: PUSH
18451: LD_INT 20
18453: PUSH
18454: LD_INT 21
18456: PUSH
18457: LD_INT 22
18459: PUSH
18460: LD_INT 23
18462: PUSH
18463: LD_INT 25
18465: PUSH
18466: LD_INT 26
18468: PUSH
18469: LD_INT 28
18471: PUSH
18472: LD_INT 30
18474: PUSH
18475: LD_INT 31
18477: PUSH
18478: LD_INT 32
18480: PUSH
18481: LD_INT 36
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: LIST
18495: LIST
18496: LIST
18497: LIST
18498: LIST
18499: LIST
18500: LIST
18501: LIST
18502: LIST
18503: LIST
18504: LIST
18505: LIST
18506: PUSH
18507: LD_INT 101
18509: PUSH
18510: LD_INT 102
18512: PUSH
18513: LD_INT 103
18515: PUSH
18516: LD_INT 105
18518: PUSH
18519: LD_INT 106
18521: PUSH
18522: LD_INT 108
18524: PUSH
18525: LD_INT 109
18527: PUSH
18528: LD_INT 112
18530: PUSH
18531: LD_INT 114
18533: PUSH
18534: LD_INT 116
18536: PUSH
18537: LD_INT 117
18539: PUSH
18540: LD_INT 118
18542: PUSH
18543: EMPTY
18544: LIST
18545: LIST
18546: LIST
18547: LIST
18548: LIST
18549: LIST
18550: LIST
18551: LIST
18552: LIST
18553: LIST
18554: LIST
18555: LIST
18556: PUSH
18557: EMPTY
18558: LIST
18559: LIST
18560: ST_TO_ADDR
18561: GO 20660
18563: LD_INT 10
18565: DOUBLE
18566: EQUAL
18567: IFTRUE 18571
18569: GO 18767
18571: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
18572: LD_ADDR_VAR 0 2
18576: PUSH
18577: LD_INT 2
18579: PUSH
18580: LD_INT 4
18582: PUSH
18583: LD_INT 5
18585: PUSH
18586: LD_INT 6
18588: PUSH
18589: LD_INT 7
18591: PUSH
18592: LD_INT 8
18594: PUSH
18595: LD_INT 9
18597: PUSH
18598: LD_INT 10
18600: PUSH
18601: LD_INT 11
18603: PUSH
18604: LD_INT 12
18606: PUSH
18607: LD_INT 13
18609: PUSH
18610: LD_INT 14
18612: PUSH
18613: LD_INT 15
18615: PUSH
18616: LD_INT 16
18618: PUSH
18619: LD_INT 17
18621: PUSH
18622: LD_INT 18
18624: PUSH
18625: LD_INT 19
18627: PUSH
18628: LD_INT 20
18630: PUSH
18631: LD_INT 21
18633: PUSH
18634: LD_INT 22
18636: PUSH
18637: LD_INT 23
18639: PUSH
18640: LD_INT 24
18642: PUSH
18643: LD_INT 25
18645: PUSH
18646: LD_INT 26
18648: PUSH
18649: LD_INT 28
18651: PUSH
18652: LD_INT 30
18654: PUSH
18655: LD_INT 31
18657: PUSH
18658: LD_INT 32
18660: PUSH
18661: LD_INT 36
18663: PUSH
18664: EMPTY
18665: LIST
18666: LIST
18667: LIST
18668: LIST
18669: LIST
18670: LIST
18671: LIST
18672: LIST
18673: LIST
18674: LIST
18675: LIST
18676: LIST
18677: LIST
18678: LIST
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: LIST
18694: PUSH
18695: LD_INT 101
18697: PUSH
18698: LD_INT 102
18700: PUSH
18701: LD_INT 103
18703: PUSH
18704: LD_INT 104
18706: PUSH
18707: LD_INT 105
18709: PUSH
18710: LD_INT 106
18712: PUSH
18713: LD_INT 107
18715: PUSH
18716: LD_INT 108
18718: PUSH
18719: LD_INT 109
18721: PUSH
18722: LD_INT 110
18724: PUSH
18725: LD_INT 111
18727: PUSH
18728: LD_INT 112
18730: PUSH
18731: LD_INT 114
18733: PUSH
18734: LD_INT 116
18736: PUSH
18737: LD_INT 117
18739: PUSH
18740: LD_INT 118
18742: PUSH
18743: EMPTY
18744: LIST
18745: LIST
18746: LIST
18747: LIST
18748: LIST
18749: LIST
18750: LIST
18751: LIST
18752: LIST
18753: LIST
18754: LIST
18755: LIST
18756: LIST
18757: LIST
18758: LIST
18759: LIST
18760: PUSH
18761: EMPTY
18762: LIST
18763: LIST
18764: ST_TO_ADDR
18765: GO 20660
18767: LD_INT 11
18769: DOUBLE
18770: EQUAL
18771: IFTRUE 18775
18773: GO 18979
18775: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
18776: LD_ADDR_VAR 0 2
18780: PUSH
18781: LD_INT 2
18783: PUSH
18784: LD_INT 3
18786: PUSH
18787: LD_INT 4
18789: PUSH
18790: LD_INT 5
18792: PUSH
18793: LD_INT 6
18795: PUSH
18796: LD_INT 7
18798: PUSH
18799: LD_INT 8
18801: PUSH
18802: LD_INT 9
18804: PUSH
18805: LD_INT 10
18807: PUSH
18808: LD_INT 11
18810: PUSH
18811: LD_INT 12
18813: PUSH
18814: LD_INT 13
18816: PUSH
18817: LD_INT 14
18819: PUSH
18820: LD_INT 15
18822: PUSH
18823: LD_INT 16
18825: PUSH
18826: LD_INT 17
18828: PUSH
18829: LD_INT 18
18831: PUSH
18832: LD_INT 19
18834: PUSH
18835: LD_INT 20
18837: PUSH
18838: LD_INT 21
18840: PUSH
18841: LD_INT 22
18843: PUSH
18844: LD_INT 23
18846: PUSH
18847: LD_INT 24
18849: PUSH
18850: LD_INT 25
18852: PUSH
18853: LD_INT 26
18855: PUSH
18856: LD_INT 28
18858: PUSH
18859: LD_INT 30
18861: PUSH
18862: LD_INT 31
18864: PUSH
18865: LD_INT 32
18867: PUSH
18868: LD_INT 34
18870: PUSH
18871: LD_INT 36
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: LIST
18891: LIST
18892: LIST
18893: LIST
18894: LIST
18895: LIST
18896: LIST
18897: LIST
18898: LIST
18899: LIST
18900: LIST
18901: LIST
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: PUSH
18907: LD_INT 101
18909: PUSH
18910: LD_INT 102
18912: PUSH
18913: LD_INT 103
18915: PUSH
18916: LD_INT 104
18918: PUSH
18919: LD_INT 105
18921: PUSH
18922: LD_INT 106
18924: PUSH
18925: LD_INT 107
18927: PUSH
18928: LD_INT 108
18930: PUSH
18931: LD_INT 109
18933: PUSH
18934: LD_INT 110
18936: PUSH
18937: LD_INT 111
18939: PUSH
18940: LD_INT 112
18942: PUSH
18943: LD_INT 114
18945: PUSH
18946: LD_INT 116
18948: PUSH
18949: LD_INT 117
18951: PUSH
18952: LD_INT 118
18954: PUSH
18955: EMPTY
18956: LIST
18957: LIST
18958: LIST
18959: LIST
18960: LIST
18961: LIST
18962: LIST
18963: LIST
18964: LIST
18965: LIST
18966: LIST
18967: LIST
18968: LIST
18969: LIST
18970: LIST
18971: LIST
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: ST_TO_ADDR
18977: GO 20660
18979: LD_INT 12
18981: DOUBLE
18982: EQUAL
18983: IFTRUE 18987
18985: GO 19207
18987: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
18988: LD_ADDR_VAR 0 2
18992: PUSH
18993: LD_INT 1
18995: PUSH
18996: LD_INT 2
18998: PUSH
18999: LD_INT 3
19001: PUSH
19002: LD_INT 4
19004: PUSH
19005: LD_INT 5
19007: PUSH
19008: LD_INT 6
19010: PUSH
19011: LD_INT 7
19013: PUSH
19014: LD_INT 8
19016: PUSH
19017: LD_INT 9
19019: PUSH
19020: LD_INT 10
19022: PUSH
19023: LD_INT 11
19025: PUSH
19026: LD_INT 12
19028: PUSH
19029: LD_INT 13
19031: PUSH
19032: LD_INT 14
19034: PUSH
19035: LD_INT 15
19037: PUSH
19038: LD_INT 16
19040: PUSH
19041: LD_INT 17
19043: PUSH
19044: LD_INT 18
19046: PUSH
19047: LD_INT 19
19049: PUSH
19050: LD_INT 20
19052: PUSH
19053: LD_INT 21
19055: PUSH
19056: LD_INT 22
19058: PUSH
19059: LD_INT 23
19061: PUSH
19062: LD_INT 24
19064: PUSH
19065: LD_INT 25
19067: PUSH
19068: LD_INT 26
19070: PUSH
19071: LD_INT 27
19073: PUSH
19074: LD_INT 28
19076: PUSH
19077: LD_INT 30
19079: PUSH
19080: LD_INT 31
19082: PUSH
19083: LD_INT 32
19085: PUSH
19086: LD_INT 33
19088: PUSH
19089: LD_INT 34
19091: PUSH
19092: LD_INT 36
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: LIST
19101: LIST
19102: LIST
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: LIST
19108: LIST
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: LIST
19115: LIST
19116: LIST
19117: LIST
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: PUSH
19131: LD_INT 101
19133: PUSH
19134: LD_INT 102
19136: PUSH
19137: LD_INT 103
19139: PUSH
19140: LD_INT 104
19142: PUSH
19143: LD_INT 105
19145: PUSH
19146: LD_INT 106
19148: PUSH
19149: LD_INT 107
19151: PUSH
19152: LD_INT 108
19154: PUSH
19155: LD_INT 109
19157: PUSH
19158: LD_INT 110
19160: PUSH
19161: LD_INT 111
19163: PUSH
19164: LD_INT 112
19166: PUSH
19167: LD_INT 113
19169: PUSH
19170: LD_INT 114
19172: PUSH
19173: LD_INT 116
19175: PUSH
19176: LD_INT 117
19178: PUSH
19179: LD_INT 118
19181: PUSH
19182: EMPTY
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: LIST
19188: LIST
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: LIST
19194: LIST
19195: LIST
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: PUSH
19201: EMPTY
19202: LIST
19203: LIST
19204: ST_TO_ADDR
19205: GO 20660
19207: LD_INT 13
19209: DOUBLE
19210: EQUAL
19211: IFTRUE 19215
19213: GO 19423
19215: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
19216: LD_ADDR_VAR 0 2
19220: PUSH
19221: LD_INT 1
19223: PUSH
19224: LD_INT 2
19226: PUSH
19227: LD_INT 3
19229: PUSH
19230: LD_INT 4
19232: PUSH
19233: LD_INT 5
19235: PUSH
19236: LD_INT 8
19238: PUSH
19239: LD_INT 9
19241: PUSH
19242: LD_INT 10
19244: PUSH
19245: LD_INT 11
19247: PUSH
19248: LD_INT 12
19250: PUSH
19251: LD_INT 14
19253: PUSH
19254: LD_INT 15
19256: PUSH
19257: LD_INT 16
19259: PUSH
19260: LD_INT 17
19262: PUSH
19263: LD_INT 18
19265: PUSH
19266: LD_INT 19
19268: PUSH
19269: LD_INT 20
19271: PUSH
19272: LD_INT 21
19274: PUSH
19275: LD_INT 22
19277: PUSH
19278: LD_INT 23
19280: PUSH
19281: LD_INT 24
19283: PUSH
19284: LD_INT 25
19286: PUSH
19287: LD_INT 26
19289: PUSH
19290: LD_INT 27
19292: PUSH
19293: LD_INT 28
19295: PUSH
19296: LD_INT 30
19298: PUSH
19299: LD_INT 31
19301: PUSH
19302: LD_INT 32
19304: PUSH
19305: LD_INT 33
19307: PUSH
19308: LD_INT 34
19310: PUSH
19311: LD_INT 36
19313: PUSH
19314: EMPTY
19315: LIST
19316: LIST
19317: LIST
19318: LIST
19319: LIST
19320: LIST
19321: LIST
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: LIST
19328: LIST
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: LIST
19346: PUSH
19347: LD_INT 101
19349: PUSH
19350: LD_INT 102
19352: PUSH
19353: LD_INT 103
19355: PUSH
19356: LD_INT 104
19358: PUSH
19359: LD_INT 105
19361: PUSH
19362: LD_INT 106
19364: PUSH
19365: LD_INT 107
19367: PUSH
19368: LD_INT 108
19370: PUSH
19371: LD_INT 109
19373: PUSH
19374: LD_INT 110
19376: PUSH
19377: LD_INT 111
19379: PUSH
19380: LD_INT 112
19382: PUSH
19383: LD_INT 113
19385: PUSH
19386: LD_INT 114
19388: PUSH
19389: LD_INT 116
19391: PUSH
19392: LD_INT 117
19394: PUSH
19395: LD_INT 118
19397: PUSH
19398: EMPTY
19399: LIST
19400: LIST
19401: LIST
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: LIST
19411: LIST
19412: LIST
19413: LIST
19414: LIST
19415: LIST
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: ST_TO_ADDR
19421: GO 20660
19423: LD_INT 14
19425: DOUBLE
19426: EQUAL
19427: IFTRUE 19431
19429: GO 19655
19431: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
19432: LD_ADDR_VAR 0 2
19436: PUSH
19437: LD_INT 1
19439: PUSH
19440: LD_INT 2
19442: PUSH
19443: LD_INT 3
19445: PUSH
19446: LD_INT 4
19448: PUSH
19449: LD_INT 5
19451: PUSH
19452: LD_INT 6
19454: PUSH
19455: LD_INT 7
19457: PUSH
19458: LD_INT 8
19460: PUSH
19461: LD_INT 9
19463: PUSH
19464: LD_INT 10
19466: PUSH
19467: LD_INT 11
19469: PUSH
19470: LD_INT 12
19472: PUSH
19473: LD_INT 13
19475: PUSH
19476: LD_INT 14
19478: PUSH
19479: LD_INT 15
19481: PUSH
19482: LD_INT 16
19484: PUSH
19485: LD_INT 17
19487: PUSH
19488: LD_INT 18
19490: PUSH
19491: LD_INT 19
19493: PUSH
19494: LD_INT 20
19496: PUSH
19497: LD_INT 21
19499: PUSH
19500: LD_INT 22
19502: PUSH
19503: LD_INT 23
19505: PUSH
19506: LD_INT 24
19508: PUSH
19509: LD_INT 25
19511: PUSH
19512: LD_INT 26
19514: PUSH
19515: LD_INT 27
19517: PUSH
19518: LD_INT 28
19520: PUSH
19521: LD_INT 29
19523: PUSH
19524: LD_INT 30
19526: PUSH
19527: LD_INT 31
19529: PUSH
19530: LD_INT 32
19532: PUSH
19533: LD_INT 33
19535: PUSH
19536: LD_INT 34
19538: PUSH
19539: LD_INT 36
19541: PUSH
19542: EMPTY
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: LIST
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: PUSH
19579: LD_INT 101
19581: PUSH
19582: LD_INT 102
19584: PUSH
19585: LD_INT 103
19587: PUSH
19588: LD_INT 104
19590: PUSH
19591: LD_INT 105
19593: PUSH
19594: LD_INT 106
19596: PUSH
19597: LD_INT 107
19599: PUSH
19600: LD_INT 108
19602: PUSH
19603: LD_INT 109
19605: PUSH
19606: LD_INT 110
19608: PUSH
19609: LD_INT 111
19611: PUSH
19612: LD_INT 112
19614: PUSH
19615: LD_INT 113
19617: PUSH
19618: LD_INT 114
19620: PUSH
19621: LD_INT 116
19623: PUSH
19624: LD_INT 117
19626: PUSH
19627: LD_INT 118
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: ST_TO_ADDR
19653: GO 20660
19655: LD_INT 15
19657: DOUBLE
19658: EQUAL
19659: IFTRUE 19663
19661: GO 19887
19663: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
19664: LD_ADDR_VAR 0 2
19668: PUSH
19669: LD_INT 1
19671: PUSH
19672: LD_INT 2
19674: PUSH
19675: LD_INT 3
19677: PUSH
19678: LD_INT 4
19680: PUSH
19681: LD_INT 5
19683: PUSH
19684: LD_INT 6
19686: PUSH
19687: LD_INT 7
19689: PUSH
19690: LD_INT 8
19692: PUSH
19693: LD_INT 9
19695: PUSH
19696: LD_INT 10
19698: PUSH
19699: LD_INT 11
19701: PUSH
19702: LD_INT 12
19704: PUSH
19705: LD_INT 13
19707: PUSH
19708: LD_INT 14
19710: PUSH
19711: LD_INT 15
19713: PUSH
19714: LD_INT 16
19716: PUSH
19717: LD_INT 17
19719: PUSH
19720: LD_INT 18
19722: PUSH
19723: LD_INT 19
19725: PUSH
19726: LD_INT 20
19728: PUSH
19729: LD_INT 21
19731: PUSH
19732: LD_INT 22
19734: PUSH
19735: LD_INT 23
19737: PUSH
19738: LD_INT 24
19740: PUSH
19741: LD_INT 25
19743: PUSH
19744: LD_INT 26
19746: PUSH
19747: LD_INT 27
19749: PUSH
19750: LD_INT 28
19752: PUSH
19753: LD_INT 29
19755: PUSH
19756: LD_INT 30
19758: PUSH
19759: LD_INT 31
19761: PUSH
19762: LD_INT 32
19764: PUSH
19765: LD_INT 33
19767: PUSH
19768: LD_INT 34
19770: PUSH
19771: LD_INT 36
19773: PUSH
19774: EMPTY
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: LIST
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: LIST
19810: PUSH
19811: LD_INT 101
19813: PUSH
19814: LD_INT 102
19816: PUSH
19817: LD_INT 103
19819: PUSH
19820: LD_INT 104
19822: PUSH
19823: LD_INT 105
19825: PUSH
19826: LD_INT 106
19828: PUSH
19829: LD_INT 107
19831: PUSH
19832: LD_INT 108
19834: PUSH
19835: LD_INT 109
19837: PUSH
19838: LD_INT 110
19840: PUSH
19841: LD_INT 111
19843: PUSH
19844: LD_INT 112
19846: PUSH
19847: LD_INT 113
19849: PUSH
19850: LD_INT 114
19852: PUSH
19853: LD_INT 116
19855: PUSH
19856: LD_INT 117
19858: PUSH
19859: LD_INT 118
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: PUSH
19881: EMPTY
19882: LIST
19883: LIST
19884: ST_TO_ADDR
19885: GO 20660
19887: LD_INT 16
19889: DOUBLE
19890: EQUAL
19891: IFTRUE 19895
19893: GO 20031
19895: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
19896: LD_ADDR_VAR 0 2
19900: PUSH
19901: LD_INT 2
19903: PUSH
19904: LD_INT 4
19906: PUSH
19907: LD_INT 5
19909: PUSH
19910: LD_INT 7
19912: PUSH
19913: LD_INT 11
19915: PUSH
19916: LD_INT 12
19918: PUSH
19919: LD_INT 15
19921: PUSH
19922: LD_INT 16
19924: PUSH
19925: LD_INT 20
19927: PUSH
19928: LD_INT 21
19930: PUSH
19931: LD_INT 22
19933: PUSH
19934: LD_INT 23
19936: PUSH
19937: LD_INT 25
19939: PUSH
19940: LD_INT 26
19942: PUSH
19943: LD_INT 30
19945: PUSH
19946: LD_INT 31
19948: PUSH
19949: LD_INT 32
19951: PUSH
19952: LD_INT 33
19954: PUSH
19955: LD_INT 34
19957: PUSH
19958: EMPTY
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: PUSH
19979: LD_INT 101
19981: PUSH
19982: LD_INT 102
19984: PUSH
19985: LD_INT 103
19987: PUSH
19988: LD_INT 106
19990: PUSH
19991: LD_INT 108
19993: PUSH
19994: LD_INT 112
19996: PUSH
19997: LD_INT 113
19999: PUSH
20000: LD_INT 114
20002: PUSH
20003: LD_INT 116
20005: PUSH
20006: LD_INT 117
20008: PUSH
20009: LD_INT 118
20011: PUSH
20012: EMPTY
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: LIST
20024: PUSH
20025: EMPTY
20026: LIST
20027: LIST
20028: ST_TO_ADDR
20029: GO 20660
20031: LD_INT 17
20033: DOUBLE
20034: EQUAL
20035: IFTRUE 20039
20037: GO 20263
20039: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
20040: LD_ADDR_VAR 0 2
20044: PUSH
20045: LD_INT 1
20047: PUSH
20048: LD_INT 2
20050: PUSH
20051: LD_INT 3
20053: PUSH
20054: LD_INT 4
20056: PUSH
20057: LD_INT 5
20059: PUSH
20060: LD_INT 6
20062: PUSH
20063: LD_INT 7
20065: PUSH
20066: LD_INT 8
20068: PUSH
20069: LD_INT 9
20071: PUSH
20072: LD_INT 10
20074: PUSH
20075: LD_INT 11
20077: PUSH
20078: LD_INT 12
20080: PUSH
20081: LD_INT 13
20083: PUSH
20084: LD_INT 14
20086: PUSH
20087: LD_INT 15
20089: PUSH
20090: LD_INT 16
20092: PUSH
20093: LD_INT 17
20095: PUSH
20096: LD_INT 18
20098: PUSH
20099: LD_INT 19
20101: PUSH
20102: LD_INT 20
20104: PUSH
20105: LD_INT 21
20107: PUSH
20108: LD_INT 22
20110: PUSH
20111: LD_INT 23
20113: PUSH
20114: LD_INT 24
20116: PUSH
20117: LD_INT 25
20119: PUSH
20120: LD_INT 26
20122: PUSH
20123: LD_INT 27
20125: PUSH
20126: LD_INT 28
20128: PUSH
20129: LD_INT 29
20131: PUSH
20132: LD_INT 30
20134: PUSH
20135: LD_INT 31
20137: PUSH
20138: LD_INT 32
20140: PUSH
20141: LD_INT 33
20143: PUSH
20144: LD_INT 34
20146: PUSH
20147: LD_INT 36
20149: PUSH
20150: EMPTY
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: LIST
20164: LIST
20165: LIST
20166: LIST
20167: LIST
20168: LIST
20169: LIST
20170: LIST
20171: LIST
20172: LIST
20173: LIST
20174: LIST
20175: LIST
20176: LIST
20177: LIST
20178: LIST
20179: LIST
20180: LIST
20181: LIST
20182: LIST
20183: LIST
20184: LIST
20185: LIST
20186: PUSH
20187: LD_INT 101
20189: PUSH
20190: LD_INT 102
20192: PUSH
20193: LD_INT 103
20195: PUSH
20196: LD_INT 104
20198: PUSH
20199: LD_INT 105
20201: PUSH
20202: LD_INT 106
20204: PUSH
20205: LD_INT 107
20207: PUSH
20208: LD_INT 108
20210: PUSH
20211: LD_INT 109
20213: PUSH
20214: LD_INT 110
20216: PUSH
20217: LD_INT 111
20219: PUSH
20220: LD_INT 112
20222: PUSH
20223: LD_INT 113
20225: PUSH
20226: LD_INT 114
20228: PUSH
20229: LD_INT 116
20231: PUSH
20232: LD_INT 117
20234: PUSH
20235: LD_INT 118
20237: PUSH
20238: EMPTY
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: PUSH
20257: EMPTY
20258: LIST
20259: LIST
20260: ST_TO_ADDR
20261: GO 20660
20263: LD_INT 18
20265: DOUBLE
20266: EQUAL
20267: IFTRUE 20271
20269: GO 20419
20271: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
20272: LD_ADDR_VAR 0 2
20276: PUSH
20277: LD_INT 2
20279: PUSH
20280: LD_INT 4
20282: PUSH
20283: LD_INT 5
20285: PUSH
20286: LD_INT 7
20288: PUSH
20289: LD_INT 11
20291: PUSH
20292: LD_INT 12
20294: PUSH
20295: LD_INT 15
20297: PUSH
20298: LD_INT 16
20300: PUSH
20301: LD_INT 20
20303: PUSH
20304: LD_INT 21
20306: PUSH
20307: LD_INT 22
20309: PUSH
20310: LD_INT 23
20312: PUSH
20313: LD_INT 25
20315: PUSH
20316: LD_INT 26
20318: PUSH
20319: LD_INT 30
20321: PUSH
20322: LD_INT 31
20324: PUSH
20325: LD_INT 32
20327: PUSH
20328: LD_INT 33
20330: PUSH
20331: LD_INT 34
20333: PUSH
20334: LD_INT 35
20336: PUSH
20337: LD_INT 36
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: LIST
20344: LIST
20345: LIST
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: LIST
20355: LIST
20356: LIST
20357: LIST
20358: LIST
20359: LIST
20360: LIST
20361: LIST
20362: PUSH
20363: LD_INT 101
20365: PUSH
20366: LD_INT 102
20368: PUSH
20369: LD_INT 103
20371: PUSH
20372: LD_INT 106
20374: PUSH
20375: LD_INT 108
20377: PUSH
20378: LD_INT 112
20380: PUSH
20381: LD_INT 113
20383: PUSH
20384: LD_INT 114
20386: PUSH
20387: LD_INT 115
20389: PUSH
20390: LD_INT 116
20392: PUSH
20393: LD_INT 117
20395: PUSH
20396: LD_INT 118
20398: PUSH
20399: EMPTY
20400: LIST
20401: LIST
20402: LIST
20403: LIST
20404: LIST
20405: LIST
20406: LIST
20407: LIST
20408: LIST
20409: LIST
20410: LIST
20411: LIST
20412: PUSH
20413: EMPTY
20414: LIST
20415: LIST
20416: ST_TO_ADDR
20417: GO 20660
20419: LD_INT 19
20421: DOUBLE
20422: EQUAL
20423: IFTRUE 20427
20425: GO 20659
20427: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
20428: LD_ADDR_VAR 0 2
20432: PUSH
20433: LD_INT 1
20435: PUSH
20436: LD_INT 2
20438: PUSH
20439: LD_INT 3
20441: PUSH
20442: LD_INT 4
20444: PUSH
20445: LD_INT 5
20447: PUSH
20448: LD_INT 6
20450: PUSH
20451: LD_INT 7
20453: PUSH
20454: LD_INT 8
20456: PUSH
20457: LD_INT 9
20459: PUSH
20460: LD_INT 10
20462: PUSH
20463: LD_INT 11
20465: PUSH
20466: LD_INT 12
20468: PUSH
20469: LD_INT 13
20471: PUSH
20472: LD_INT 14
20474: PUSH
20475: LD_INT 15
20477: PUSH
20478: LD_INT 16
20480: PUSH
20481: LD_INT 17
20483: PUSH
20484: LD_INT 18
20486: PUSH
20487: LD_INT 19
20489: PUSH
20490: LD_INT 20
20492: PUSH
20493: LD_INT 21
20495: PUSH
20496: LD_INT 22
20498: PUSH
20499: LD_INT 23
20501: PUSH
20502: LD_INT 24
20504: PUSH
20505: LD_INT 25
20507: PUSH
20508: LD_INT 26
20510: PUSH
20511: LD_INT 27
20513: PUSH
20514: LD_INT 28
20516: PUSH
20517: LD_INT 29
20519: PUSH
20520: LD_INT 30
20522: PUSH
20523: LD_INT 31
20525: PUSH
20526: LD_INT 32
20528: PUSH
20529: LD_INT 33
20531: PUSH
20532: LD_INT 34
20534: PUSH
20535: LD_INT 35
20537: PUSH
20538: LD_INT 36
20540: PUSH
20541: EMPTY
20542: LIST
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: LIST
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: LIST
20561: LIST
20562: LIST
20563: LIST
20564: LIST
20565: LIST
20566: LIST
20567: LIST
20568: LIST
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: PUSH
20579: LD_INT 101
20581: PUSH
20582: LD_INT 102
20584: PUSH
20585: LD_INT 103
20587: PUSH
20588: LD_INT 104
20590: PUSH
20591: LD_INT 105
20593: PUSH
20594: LD_INT 106
20596: PUSH
20597: LD_INT 107
20599: PUSH
20600: LD_INT 108
20602: PUSH
20603: LD_INT 109
20605: PUSH
20606: LD_INT 110
20608: PUSH
20609: LD_INT 111
20611: PUSH
20612: LD_INT 112
20614: PUSH
20615: LD_INT 113
20617: PUSH
20618: LD_INT 114
20620: PUSH
20621: LD_INT 115
20623: PUSH
20624: LD_INT 116
20626: PUSH
20627: LD_INT 117
20629: PUSH
20630: LD_INT 118
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: LIST
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: LIST
20646: LIST
20647: LIST
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: PUSH
20653: EMPTY
20654: LIST
20655: LIST
20656: ST_TO_ADDR
20657: GO 20660
20659: POP
// end else
20660: GO 20891
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
20662: LD_ADDR_VAR 0 2
20666: PUSH
20667: LD_INT 1
20669: PUSH
20670: LD_INT 2
20672: PUSH
20673: LD_INT 3
20675: PUSH
20676: LD_INT 4
20678: PUSH
20679: LD_INT 5
20681: PUSH
20682: LD_INT 6
20684: PUSH
20685: LD_INT 7
20687: PUSH
20688: LD_INT 8
20690: PUSH
20691: LD_INT 9
20693: PUSH
20694: LD_INT 10
20696: PUSH
20697: LD_INT 11
20699: PUSH
20700: LD_INT 12
20702: PUSH
20703: LD_INT 13
20705: PUSH
20706: LD_INT 14
20708: PUSH
20709: LD_INT 15
20711: PUSH
20712: LD_INT 16
20714: PUSH
20715: LD_INT 17
20717: PUSH
20718: LD_INT 18
20720: PUSH
20721: LD_INT 19
20723: PUSH
20724: LD_INT 20
20726: PUSH
20727: LD_INT 21
20729: PUSH
20730: LD_INT 22
20732: PUSH
20733: LD_INT 23
20735: PUSH
20736: LD_INT 24
20738: PUSH
20739: LD_INT 25
20741: PUSH
20742: LD_INT 26
20744: PUSH
20745: LD_INT 27
20747: PUSH
20748: LD_INT 28
20750: PUSH
20751: LD_INT 29
20753: PUSH
20754: LD_INT 30
20756: PUSH
20757: LD_INT 31
20759: PUSH
20760: LD_INT 32
20762: PUSH
20763: LD_INT 33
20765: PUSH
20766: LD_INT 34
20768: PUSH
20769: LD_INT 35
20771: PUSH
20772: LD_INT 36
20774: PUSH
20775: EMPTY
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: LIST
20796: LIST
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: PUSH
20813: LD_INT 101
20815: PUSH
20816: LD_INT 102
20818: PUSH
20819: LD_INT 103
20821: PUSH
20822: LD_INT 104
20824: PUSH
20825: LD_INT 105
20827: PUSH
20828: LD_INT 106
20830: PUSH
20831: LD_INT 107
20833: PUSH
20834: LD_INT 108
20836: PUSH
20837: LD_INT 109
20839: PUSH
20840: LD_INT 110
20842: PUSH
20843: LD_INT 111
20845: PUSH
20846: LD_INT 112
20848: PUSH
20849: LD_INT 113
20851: PUSH
20852: LD_INT 114
20854: PUSH
20855: LD_INT 115
20857: PUSH
20858: LD_INT 116
20860: PUSH
20861: LD_INT 117
20863: PUSH
20864: LD_INT 118
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: LIST
20885: LIST
20886: PUSH
20887: EMPTY
20888: LIST
20889: LIST
20890: ST_TO_ADDR
// if result then
20891: LD_VAR 0 2
20895: IFFALSE 21681
// begin normal :=  ;
20897: LD_ADDR_VAR 0 5
20901: PUSH
20902: LD_STRING 
20904: ST_TO_ADDR
// hardcore :=  ;
20905: LD_ADDR_VAR 0 6
20909: PUSH
20910: LD_STRING 
20912: ST_TO_ADDR
// active :=  ;
20913: LD_ADDR_VAR 0 7
20917: PUSH
20918: LD_STRING 
20920: ST_TO_ADDR
// for i = 1 to normalCounter do
20921: LD_ADDR_VAR 0 8
20925: PUSH
20926: DOUBLE
20927: LD_INT 1
20929: DEC
20930: ST_TO_ADDR
20931: LD_EXP 42
20935: PUSH
20936: FOR_TO
20937: IFFALSE 21038
// begin tmp := 0 ;
20939: LD_ADDR_VAR 0 3
20943: PUSH
20944: LD_STRING 0
20946: ST_TO_ADDR
// if result [ 1 ] then
20947: LD_VAR 0 2
20951: PUSH
20952: LD_INT 1
20954: ARRAY
20955: IFFALSE 21020
// if result [ 1 ] [ 1 ] = i then
20957: LD_VAR 0 2
20961: PUSH
20962: LD_INT 1
20964: ARRAY
20965: PUSH
20966: LD_INT 1
20968: ARRAY
20969: PUSH
20970: LD_VAR 0 8
20974: EQUAL
20975: IFFALSE 21020
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
20977: LD_ADDR_VAR 0 2
20981: PUSH
20982: LD_VAR 0 2
20986: PPUSH
20987: LD_INT 1
20989: PPUSH
20990: LD_VAR 0 2
20994: PUSH
20995: LD_INT 1
20997: ARRAY
20998: PPUSH
20999: LD_INT 1
21001: PPUSH
21002: CALL_OW 3
21006: PPUSH
21007: CALL_OW 1
21011: ST_TO_ADDR
// tmp := 1 ;
21012: LD_ADDR_VAR 0 3
21016: PUSH
21017: LD_STRING 1
21019: ST_TO_ADDR
// end ; normal := normal & tmp ;
21020: LD_ADDR_VAR 0 5
21024: PUSH
21025: LD_VAR 0 5
21029: PUSH
21030: LD_VAR 0 3
21034: STR
21035: ST_TO_ADDR
// end ;
21036: GO 20936
21038: POP
21039: POP
// for i = 1 to hardcoreCounter do
21040: LD_ADDR_VAR 0 8
21044: PUSH
21045: DOUBLE
21046: LD_INT 1
21048: DEC
21049: ST_TO_ADDR
21050: LD_EXP 43
21054: PUSH
21055: FOR_TO
21056: IFFALSE 21161
// begin tmp := 0 ;
21058: LD_ADDR_VAR 0 3
21062: PUSH
21063: LD_STRING 0
21065: ST_TO_ADDR
// if result [ 2 ] then
21066: LD_VAR 0 2
21070: PUSH
21071: LD_INT 2
21073: ARRAY
21074: IFFALSE 21143
// if result [ 2 ] [ 1 ] = 100 + i then
21076: LD_VAR 0 2
21080: PUSH
21081: LD_INT 2
21083: ARRAY
21084: PUSH
21085: LD_INT 1
21087: ARRAY
21088: PUSH
21089: LD_INT 100
21091: PUSH
21092: LD_VAR 0 8
21096: PLUS
21097: EQUAL
21098: IFFALSE 21143
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
21100: LD_ADDR_VAR 0 2
21104: PUSH
21105: LD_VAR 0 2
21109: PPUSH
21110: LD_INT 2
21112: PPUSH
21113: LD_VAR 0 2
21117: PUSH
21118: LD_INT 2
21120: ARRAY
21121: PPUSH
21122: LD_INT 1
21124: PPUSH
21125: CALL_OW 3
21129: PPUSH
21130: CALL_OW 1
21134: ST_TO_ADDR
// tmp := 1 ;
21135: LD_ADDR_VAR 0 3
21139: PUSH
21140: LD_STRING 1
21142: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
21143: LD_ADDR_VAR 0 6
21147: PUSH
21148: LD_VAR 0 6
21152: PUSH
21153: LD_VAR 0 3
21157: STR
21158: ST_TO_ADDR
// end ;
21159: GO 21055
21161: POP
21162: POP
// if isGameLoad then
21163: LD_VAR 0 1
21167: IFFALSE 21642
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
21169: LD_ADDR_VAR 0 4
21173: PUSH
21174: LD_EXP 46
21178: PUSH
21179: LD_EXP 45
21183: PUSH
21184: LD_EXP 47
21188: PUSH
21189: LD_EXP 44
21193: PUSH
21194: LD_EXP 48
21198: PUSH
21199: LD_EXP 49
21203: PUSH
21204: LD_EXP 50
21208: PUSH
21209: LD_EXP 51
21213: PUSH
21214: LD_EXP 52
21218: PUSH
21219: LD_EXP 53
21223: PUSH
21224: LD_EXP 54
21228: PUSH
21229: LD_EXP 55
21233: PUSH
21234: LD_EXP 56
21238: PUSH
21239: LD_EXP 57
21243: PUSH
21244: LD_EXP 65
21248: PUSH
21249: LD_EXP 66
21253: PUSH
21254: LD_EXP 67
21258: PUSH
21259: LD_EXP 68
21263: PUSH
21264: LD_EXP 70
21268: PUSH
21269: LD_EXP 71
21273: PUSH
21274: LD_EXP 72
21278: PUSH
21279: LD_EXP 75
21283: PUSH
21284: LD_EXP 77
21288: PUSH
21289: LD_EXP 78
21293: PUSH
21294: LD_EXP 79
21298: PUSH
21299: LD_EXP 81
21303: PUSH
21304: LD_EXP 82
21308: PUSH
21309: LD_EXP 85
21313: PUSH
21314: LD_EXP 86
21318: PUSH
21319: LD_EXP 87
21323: PUSH
21324: LD_EXP 88
21328: PUSH
21329: LD_EXP 89
21333: PUSH
21334: LD_EXP 90
21338: PUSH
21339: LD_EXP 91
21343: PUSH
21344: LD_EXP 92
21348: PUSH
21349: LD_EXP 93
21353: PUSH
21354: LD_EXP 58
21358: PUSH
21359: LD_EXP 59
21363: PUSH
21364: LD_EXP 62
21368: PUSH
21369: LD_EXP 63
21373: PUSH
21374: LD_EXP 64
21378: PUSH
21379: LD_EXP 60
21383: PUSH
21384: LD_EXP 61
21388: PUSH
21389: LD_EXP 69
21393: PUSH
21394: LD_EXP 73
21398: PUSH
21399: LD_EXP 74
21403: PUSH
21404: LD_EXP 76
21408: PUSH
21409: LD_EXP 80
21413: PUSH
21414: LD_EXP 83
21418: PUSH
21419: LD_EXP 84
21423: PUSH
21424: LD_EXP 94
21428: PUSH
21429: LD_EXP 95
21433: PUSH
21434: LD_EXP 96
21438: PUSH
21439: LD_EXP 97
21443: PUSH
21444: EMPTY
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: ST_TO_ADDR
// tmp :=  ;
21500: LD_ADDR_VAR 0 3
21504: PUSH
21505: LD_STRING 
21507: ST_TO_ADDR
// for i = 1 to normalCounter do
21508: LD_ADDR_VAR 0 8
21512: PUSH
21513: DOUBLE
21514: LD_INT 1
21516: DEC
21517: ST_TO_ADDR
21518: LD_EXP 42
21522: PUSH
21523: FOR_TO
21524: IFFALSE 21560
// begin if flags [ i ] then
21526: LD_VAR 0 4
21530: PUSH
21531: LD_VAR 0 8
21535: ARRAY
21536: IFFALSE 21558
// tmp := tmp & i & ; ;
21538: LD_ADDR_VAR 0 3
21542: PUSH
21543: LD_VAR 0 3
21547: PUSH
21548: LD_VAR 0 8
21552: STR
21553: PUSH
21554: LD_STRING ;
21556: STR
21557: ST_TO_ADDR
// end ;
21558: GO 21523
21560: POP
21561: POP
// for i = 1 to hardcoreCounter do
21562: LD_ADDR_VAR 0 8
21566: PUSH
21567: DOUBLE
21568: LD_INT 1
21570: DEC
21571: ST_TO_ADDR
21572: LD_EXP 43
21576: PUSH
21577: FOR_TO
21578: IFFALSE 21624
// begin if flags [ normalCounter + i ] then
21580: LD_VAR 0 4
21584: PUSH
21585: LD_EXP 42
21589: PUSH
21590: LD_VAR 0 8
21594: PLUS
21595: ARRAY
21596: IFFALSE 21622
// tmp := tmp & ( 100 + i ) & ; ;
21598: LD_ADDR_VAR 0 3
21602: PUSH
21603: LD_VAR 0 3
21607: PUSH
21608: LD_INT 100
21610: PUSH
21611: LD_VAR 0 8
21615: PLUS
21616: STR
21617: PUSH
21618: LD_STRING ;
21620: STR
21621: ST_TO_ADDR
// end ;
21622: GO 21577
21624: POP
21625: POP
// if tmp then
21626: LD_VAR 0 3
21630: IFFALSE 21642
// active := tmp ;
21632: LD_ADDR_VAR 0 7
21636: PUSH
21637: LD_VAR 0 3
21641: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
21642: LD_STRING getStreamItemsFromMission("
21644: PUSH
21645: LD_VAR 0 5
21649: STR
21650: PUSH
21651: LD_STRING ","
21653: STR
21654: PUSH
21655: LD_VAR 0 6
21659: STR
21660: PUSH
21661: LD_STRING ","
21663: STR
21664: PUSH
21665: LD_VAR 0 7
21669: STR
21670: PUSH
21671: LD_STRING ")
21673: STR
21674: PPUSH
21675: CALL_OW 559
// end else
21679: GO 21688
// ToLua ( getStreamItemsFromMission("","","") ) ;
21681: LD_STRING getStreamItemsFromMission("","","")
21683: PPUSH
21684: CALL_OW 559
// end ;
21688: LD_VAR 0 2
21692: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
21693: LD_EXP 41
21697: PUSH
21698: LD_EXP 46
21702: AND
21703: IFFALSE 21827
21705: GO 21707
21707: DISABLE
21708: LD_INT 0
21710: PPUSH
21711: PPUSH
// begin enable ;
21712: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
21713: LD_ADDR_VAR 0 2
21717: PUSH
21718: LD_INT 22
21720: PUSH
21721: LD_OWVAR 2
21725: PUSH
21726: EMPTY
21727: LIST
21728: LIST
21729: PUSH
21730: LD_INT 2
21732: PUSH
21733: LD_INT 34
21735: PUSH
21736: LD_INT 7
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: PUSH
21743: LD_INT 34
21745: PUSH
21746: LD_INT 45
21748: PUSH
21749: EMPTY
21750: LIST
21751: LIST
21752: PUSH
21753: LD_INT 34
21755: PUSH
21756: LD_INT 28
21758: PUSH
21759: EMPTY
21760: LIST
21761: LIST
21762: PUSH
21763: LD_INT 34
21765: PUSH
21766: LD_INT 47
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: PUSH
21773: EMPTY
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: PUSH
21780: EMPTY
21781: LIST
21782: LIST
21783: PPUSH
21784: CALL_OW 69
21788: ST_TO_ADDR
// if not tmp then
21789: LD_VAR 0 2
21793: NOT
21794: IFFALSE 21798
// exit ;
21796: GO 21827
// for i in tmp do
21798: LD_ADDR_VAR 0 1
21802: PUSH
21803: LD_VAR 0 2
21807: PUSH
21808: FOR_IN
21809: IFFALSE 21825
// begin SetLives ( i , 0 ) ;
21811: LD_VAR 0 1
21815: PPUSH
21816: LD_INT 0
21818: PPUSH
21819: CALL_OW 234
// end ;
21823: GO 21808
21825: POP
21826: POP
// end ;
21827: PPOPN 2
21829: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
21830: LD_EXP 41
21834: PUSH
21835: LD_EXP 47
21839: AND
21840: IFFALSE 21924
21842: GO 21844
21844: DISABLE
21845: LD_INT 0
21847: PPUSH
21848: PPUSH
// begin enable ;
21849: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
21850: LD_ADDR_VAR 0 2
21854: PUSH
21855: LD_INT 22
21857: PUSH
21858: LD_OWVAR 2
21862: PUSH
21863: EMPTY
21864: LIST
21865: LIST
21866: PUSH
21867: LD_INT 32
21869: PUSH
21870: LD_INT 3
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: PUSH
21877: EMPTY
21878: LIST
21879: LIST
21880: PPUSH
21881: CALL_OW 69
21885: ST_TO_ADDR
// if not tmp then
21886: LD_VAR 0 2
21890: NOT
21891: IFFALSE 21895
// exit ;
21893: GO 21924
// for i in tmp do
21895: LD_ADDR_VAR 0 1
21899: PUSH
21900: LD_VAR 0 2
21904: PUSH
21905: FOR_IN
21906: IFFALSE 21922
// begin SetLives ( i , 0 ) ;
21908: LD_VAR 0 1
21912: PPUSH
21913: LD_INT 0
21915: PPUSH
21916: CALL_OW 234
// end ;
21920: GO 21905
21922: POP
21923: POP
// end ;
21924: PPOPN 2
21926: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
21927: LD_EXP 41
21931: PUSH
21932: LD_EXP 44
21936: AND
21937: IFFALSE 22030
21939: GO 21941
21941: DISABLE
21942: LD_INT 0
21944: PPUSH
// begin enable ;
21945: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
21946: LD_ADDR_VAR 0 1
21950: PUSH
21951: LD_INT 22
21953: PUSH
21954: LD_OWVAR 2
21958: PUSH
21959: EMPTY
21960: LIST
21961: LIST
21962: PUSH
21963: LD_INT 2
21965: PUSH
21966: LD_INT 25
21968: PUSH
21969: LD_INT 5
21971: PUSH
21972: EMPTY
21973: LIST
21974: LIST
21975: PUSH
21976: LD_INT 25
21978: PUSH
21979: LD_INT 9
21981: PUSH
21982: EMPTY
21983: LIST
21984: LIST
21985: PUSH
21986: LD_INT 25
21988: PUSH
21989: LD_INT 8
21991: PUSH
21992: EMPTY
21993: LIST
21994: LIST
21995: PUSH
21996: EMPTY
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: PUSH
22002: EMPTY
22003: LIST
22004: LIST
22005: PPUSH
22006: CALL_OW 69
22010: PUSH
22011: FOR_IN
22012: IFFALSE 22028
// begin SetClass ( i , 1 ) ;
22014: LD_VAR 0 1
22018: PPUSH
22019: LD_INT 1
22021: PPUSH
22022: CALL_OW 336
// end ;
22026: GO 22011
22028: POP
22029: POP
// end ;
22030: PPOPN 1
22032: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
22033: LD_EXP 41
22037: PUSH
22038: LD_EXP 45
22042: AND
22043: PUSH
22044: LD_OWVAR 65
22048: PUSH
22049: LD_INT 7
22051: LESS
22052: AND
22053: IFFALSE 22067
22055: GO 22057
22057: DISABLE
// begin enable ;
22058: ENABLE
// game_speed := 7 ;
22059: LD_ADDR_OWVAR 65
22063: PUSH
22064: LD_INT 7
22066: ST_TO_ADDR
// end ;
22067: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
22068: LD_EXP 41
22072: PUSH
22073: LD_EXP 48
22077: AND
22078: IFFALSE 22280
22080: GO 22082
22082: DISABLE
22083: LD_INT 0
22085: PPUSH
22086: PPUSH
22087: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22088: LD_ADDR_VAR 0 3
22092: PUSH
22093: LD_INT 81
22095: PUSH
22096: LD_OWVAR 2
22100: PUSH
22101: EMPTY
22102: LIST
22103: LIST
22104: PUSH
22105: LD_INT 21
22107: PUSH
22108: LD_INT 1
22110: PUSH
22111: EMPTY
22112: LIST
22113: LIST
22114: PUSH
22115: EMPTY
22116: LIST
22117: LIST
22118: PPUSH
22119: CALL_OW 69
22123: ST_TO_ADDR
// if not tmp then
22124: LD_VAR 0 3
22128: NOT
22129: IFFALSE 22133
// exit ;
22131: GO 22280
// if tmp > 5 then
22133: LD_VAR 0 3
22137: PUSH
22138: LD_INT 5
22140: GREATER
22141: IFFALSE 22153
// k := 5 else
22143: LD_ADDR_VAR 0 2
22147: PUSH
22148: LD_INT 5
22150: ST_TO_ADDR
22151: GO 22163
// k := tmp ;
22153: LD_ADDR_VAR 0 2
22157: PUSH
22158: LD_VAR 0 3
22162: ST_TO_ADDR
// for i := 1 to k do
22163: LD_ADDR_VAR 0 1
22167: PUSH
22168: DOUBLE
22169: LD_INT 1
22171: DEC
22172: ST_TO_ADDR
22173: LD_VAR 0 2
22177: PUSH
22178: FOR_TO
22179: IFFALSE 22278
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
22181: LD_VAR 0 3
22185: PUSH
22186: LD_VAR 0 1
22190: ARRAY
22191: PPUSH
22192: LD_VAR 0 1
22196: PUSH
22197: LD_INT 4
22199: MOD
22200: PUSH
22201: LD_INT 1
22203: PLUS
22204: PPUSH
22205: CALL_OW 259
22209: PUSH
22210: LD_INT 10
22212: LESS
22213: IFFALSE 22276
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
22215: LD_VAR 0 3
22219: PUSH
22220: LD_VAR 0 1
22224: ARRAY
22225: PPUSH
22226: LD_VAR 0 1
22230: PUSH
22231: LD_INT 4
22233: MOD
22234: PUSH
22235: LD_INT 1
22237: PLUS
22238: PPUSH
22239: LD_VAR 0 3
22243: PUSH
22244: LD_VAR 0 1
22248: ARRAY
22249: PPUSH
22250: LD_VAR 0 1
22254: PUSH
22255: LD_INT 4
22257: MOD
22258: PUSH
22259: LD_INT 1
22261: PLUS
22262: PPUSH
22263: CALL_OW 259
22267: PUSH
22268: LD_INT 1
22270: PLUS
22271: PPUSH
22272: CALL_OW 237
22276: GO 22178
22278: POP
22279: POP
// end ;
22280: PPOPN 3
22282: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
22283: LD_EXP 41
22287: PUSH
22288: LD_EXP 49
22292: AND
22293: IFFALSE 22313
22295: GO 22297
22297: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
22298: LD_INT 4
22300: PPUSH
22301: LD_OWVAR 2
22305: PPUSH
22306: LD_INT 0
22308: PPUSH
22309: CALL_OW 324
22313: END
// every 0 0$1 trigger StreamModeActive and sShovel do
22314: LD_EXP 41
22318: PUSH
22319: LD_EXP 78
22323: AND
22324: IFFALSE 22344
22326: GO 22328
22328: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
22329: LD_INT 19
22331: PPUSH
22332: LD_OWVAR 2
22336: PPUSH
22337: LD_INT 0
22339: PPUSH
22340: CALL_OW 324
22344: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
22345: LD_EXP 41
22349: PUSH
22350: LD_EXP 50
22354: AND
22355: IFFALSE 22457
22357: GO 22359
22359: DISABLE
22360: LD_INT 0
22362: PPUSH
22363: PPUSH
// begin enable ;
22364: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
22365: LD_ADDR_VAR 0 2
22369: PUSH
22370: LD_INT 22
22372: PUSH
22373: LD_OWVAR 2
22377: PUSH
22378: EMPTY
22379: LIST
22380: LIST
22381: PUSH
22382: LD_INT 2
22384: PUSH
22385: LD_INT 34
22387: PUSH
22388: LD_INT 11
22390: PUSH
22391: EMPTY
22392: LIST
22393: LIST
22394: PUSH
22395: LD_INT 34
22397: PUSH
22398: LD_INT 30
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: PUSH
22405: EMPTY
22406: LIST
22407: LIST
22408: LIST
22409: PUSH
22410: EMPTY
22411: LIST
22412: LIST
22413: PPUSH
22414: CALL_OW 69
22418: ST_TO_ADDR
// if not tmp then
22419: LD_VAR 0 2
22423: NOT
22424: IFFALSE 22428
// exit ;
22426: GO 22457
// for i in tmp do
22428: LD_ADDR_VAR 0 1
22432: PUSH
22433: LD_VAR 0 2
22437: PUSH
22438: FOR_IN
22439: IFFALSE 22455
// begin SetLives ( i , 0 ) ;
22441: LD_VAR 0 1
22445: PPUSH
22446: LD_INT 0
22448: PPUSH
22449: CALL_OW 234
// end ;
22453: GO 22438
22455: POP
22456: POP
// end ;
22457: PPOPN 2
22459: END
// every 0 0$1 trigger StreamModeActive and sBunker do
22460: LD_EXP 41
22464: PUSH
22465: LD_EXP 51
22469: AND
22470: IFFALSE 22490
22472: GO 22474
22474: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
22475: LD_INT 32
22477: PPUSH
22478: LD_OWVAR 2
22482: PPUSH
22483: LD_INT 0
22485: PPUSH
22486: CALL_OW 324
22490: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
22491: LD_EXP 41
22495: PUSH
22496: LD_EXP 52
22500: AND
22501: IFFALSE 22682
22503: GO 22505
22505: DISABLE
22506: LD_INT 0
22508: PPUSH
22509: PPUSH
22510: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
22511: LD_ADDR_VAR 0 2
22515: PUSH
22516: LD_INT 22
22518: PUSH
22519: LD_OWVAR 2
22523: PUSH
22524: EMPTY
22525: LIST
22526: LIST
22527: PUSH
22528: LD_INT 33
22530: PUSH
22531: LD_INT 3
22533: PUSH
22534: EMPTY
22535: LIST
22536: LIST
22537: PUSH
22538: EMPTY
22539: LIST
22540: LIST
22541: PPUSH
22542: CALL_OW 69
22546: ST_TO_ADDR
// if not tmp then
22547: LD_VAR 0 2
22551: NOT
22552: IFFALSE 22556
// exit ;
22554: GO 22682
// side := 0 ;
22556: LD_ADDR_VAR 0 3
22560: PUSH
22561: LD_INT 0
22563: ST_TO_ADDR
// for i := 1 to 8 do
22564: LD_ADDR_VAR 0 1
22568: PUSH
22569: DOUBLE
22570: LD_INT 1
22572: DEC
22573: ST_TO_ADDR
22574: LD_INT 8
22576: PUSH
22577: FOR_TO
22578: IFFALSE 22626
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
22580: LD_OWVAR 2
22584: PUSH
22585: LD_VAR 0 1
22589: NONEQUAL
22590: PUSH
22591: LD_OWVAR 2
22595: PPUSH
22596: LD_VAR 0 1
22600: PPUSH
22601: CALL_OW 81
22605: PUSH
22606: LD_INT 2
22608: EQUAL
22609: AND
22610: IFFALSE 22624
// begin side := i ;
22612: LD_ADDR_VAR 0 3
22616: PUSH
22617: LD_VAR 0 1
22621: ST_TO_ADDR
// break ;
22622: GO 22626
// end ;
22624: GO 22577
22626: POP
22627: POP
// if not side then
22628: LD_VAR 0 3
22632: NOT
22633: IFFALSE 22637
// exit ;
22635: GO 22682
// for i := 1 to tmp do
22637: LD_ADDR_VAR 0 1
22641: PUSH
22642: DOUBLE
22643: LD_INT 1
22645: DEC
22646: ST_TO_ADDR
22647: LD_VAR 0 2
22651: PUSH
22652: FOR_TO
22653: IFFALSE 22680
// if Prob ( 60 ) then
22655: LD_INT 60
22657: PPUSH
22658: CALL_OW 13
22662: IFFALSE 22678
// SetSide ( i , side ) ;
22664: LD_VAR 0 1
22668: PPUSH
22669: LD_VAR 0 3
22673: PPUSH
22674: CALL_OW 235
22678: GO 22652
22680: POP
22681: POP
// end ;
22682: PPOPN 3
22684: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
22685: LD_EXP 41
22689: PUSH
22690: LD_EXP 54
22694: AND
22695: IFFALSE 22814
22697: GO 22699
22699: DISABLE
22700: LD_INT 0
22702: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
22703: LD_ADDR_VAR 0 1
22707: PUSH
22708: LD_INT 22
22710: PUSH
22711: LD_OWVAR 2
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: PUSH
22720: LD_INT 21
22722: PUSH
22723: LD_INT 1
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: PUSH
22730: LD_INT 3
22732: PUSH
22733: LD_INT 23
22735: PUSH
22736: LD_INT 0
22738: PUSH
22739: EMPTY
22740: LIST
22741: LIST
22742: PUSH
22743: EMPTY
22744: LIST
22745: LIST
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: LIST
22751: PPUSH
22752: CALL_OW 69
22756: PUSH
22757: FOR_IN
22758: IFFALSE 22812
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
22760: LD_VAR 0 1
22764: PPUSH
22765: CALL_OW 257
22769: PUSH
22770: LD_INT 1
22772: PUSH
22773: LD_INT 2
22775: PUSH
22776: LD_INT 3
22778: PUSH
22779: LD_INT 4
22781: PUSH
22782: EMPTY
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: IN
22788: IFFALSE 22810
// SetClass ( un , rand ( 1 , 4 ) ) ;
22790: LD_VAR 0 1
22794: PPUSH
22795: LD_INT 1
22797: PPUSH
22798: LD_INT 4
22800: PPUSH
22801: CALL_OW 12
22805: PPUSH
22806: CALL_OW 336
22810: GO 22757
22812: POP
22813: POP
// end ;
22814: PPOPN 1
22816: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
22817: LD_EXP 41
22821: PUSH
22822: LD_EXP 53
22826: AND
22827: IFFALSE 22906
22829: GO 22831
22831: DISABLE
22832: LD_INT 0
22834: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22835: LD_ADDR_VAR 0 1
22839: PUSH
22840: LD_INT 22
22842: PUSH
22843: LD_OWVAR 2
22847: PUSH
22848: EMPTY
22849: LIST
22850: LIST
22851: PUSH
22852: LD_INT 21
22854: PUSH
22855: LD_INT 3
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: PUSH
22862: EMPTY
22863: LIST
22864: LIST
22865: PPUSH
22866: CALL_OW 69
22870: ST_TO_ADDR
// if not tmp then
22871: LD_VAR 0 1
22875: NOT
22876: IFFALSE 22880
// exit ;
22878: GO 22906
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
22880: LD_VAR 0 1
22884: PUSH
22885: LD_INT 1
22887: PPUSH
22888: LD_VAR 0 1
22892: PPUSH
22893: CALL_OW 12
22897: ARRAY
22898: PPUSH
22899: LD_INT 100
22901: PPUSH
22902: CALL_OW 234
// end ;
22906: PPOPN 1
22908: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
22909: LD_EXP 41
22913: PUSH
22914: LD_EXP 55
22918: AND
22919: IFFALSE 23017
22921: GO 22923
22923: DISABLE
22924: LD_INT 0
22926: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22927: LD_ADDR_VAR 0 1
22931: PUSH
22932: LD_INT 22
22934: PUSH
22935: LD_OWVAR 2
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: PUSH
22944: LD_INT 21
22946: PUSH
22947: LD_INT 1
22949: PUSH
22950: EMPTY
22951: LIST
22952: LIST
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: PPUSH
22958: CALL_OW 69
22962: ST_TO_ADDR
// if not tmp then
22963: LD_VAR 0 1
22967: NOT
22968: IFFALSE 22972
// exit ;
22970: GO 23017
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
22972: LD_VAR 0 1
22976: PUSH
22977: LD_INT 1
22979: PPUSH
22980: LD_VAR 0 1
22984: PPUSH
22985: CALL_OW 12
22989: ARRAY
22990: PPUSH
22991: LD_INT 1
22993: PPUSH
22994: LD_INT 4
22996: PPUSH
22997: CALL_OW 12
23001: PPUSH
23002: LD_INT 3000
23004: PPUSH
23005: LD_INT 9000
23007: PPUSH
23008: CALL_OW 12
23012: PPUSH
23013: CALL_OW 492
// end ;
23017: PPOPN 1
23019: END
// every 0 0$1 trigger StreamModeActive and sDepot do
23020: LD_EXP 41
23024: PUSH
23025: LD_EXP 56
23029: AND
23030: IFFALSE 23050
23032: GO 23034
23034: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
23035: LD_INT 1
23037: PPUSH
23038: LD_OWVAR 2
23042: PPUSH
23043: LD_INT 0
23045: PPUSH
23046: CALL_OW 324
23050: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
23051: LD_EXP 41
23055: PUSH
23056: LD_EXP 57
23060: AND
23061: IFFALSE 23144
23063: GO 23065
23065: DISABLE
23066: LD_INT 0
23068: PPUSH
23069: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23070: LD_ADDR_VAR 0 2
23074: PUSH
23075: LD_INT 22
23077: PUSH
23078: LD_OWVAR 2
23082: PUSH
23083: EMPTY
23084: LIST
23085: LIST
23086: PUSH
23087: LD_INT 21
23089: PUSH
23090: LD_INT 3
23092: PUSH
23093: EMPTY
23094: LIST
23095: LIST
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: PPUSH
23101: CALL_OW 69
23105: ST_TO_ADDR
// if not tmp then
23106: LD_VAR 0 2
23110: NOT
23111: IFFALSE 23115
// exit ;
23113: GO 23144
// for i in tmp do
23115: LD_ADDR_VAR 0 1
23119: PUSH
23120: LD_VAR 0 2
23124: PUSH
23125: FOR_IN
23126: IFFALSE 23142
// SetBLevel ( i , 10 ) ;
23128: LD_VAR 0 1
23132: PPUSH
23133: LD_INT 10
23135: PPUSH
23136: CALL_OW 241
23140: GO 23125
23142: POP
23143: POP
// end ;
23144: PPOPN 2
23146: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
23147: LD_EXP 41
23151: PUSH
23152: LD_EXP 58
23156: AND
23157: IFFALSE 23268
23159: GO 23161
23161: DISABLE
23162: LD_INT 0
23164: PPUSH
23165: PPUSH
23166: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23167: LD_ADDR_VAR 0 3
23171: PUSH
23172: LD_INT 22
23174: PUSH
23175: LD_OWVAR 2
23179: PUSH
23180: EMPTY
23181: LIST
23182: LIST
23183: PUSH
23184: LD_INT 25
23186: PUSH
23187: LD_INT 1
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: PUSH
23194: EMPTY
23195: LIST
23196: LIST
23197: PPUSH
23198: CALL_OW 69
23202: ST_TO_ADDR
// if not tmp then
23203: LD_VAR 0 3
23207: NOT
23208: IFFALSE 23212
// exit ;
23210: GO 23268
// un := tmp [ rand ( 1 , tmp ) ] ;
23212: LD_ADDR_VAR 0 2
23216: PUSH
23217: LD_VAR 0 3
23221: PUSH
23222: LD_INT 1
23224: PPUSH
23225: LD_VAR 0 3
23229: PPUSH
23230: CALL_OW 12
23234: ARRAY
23235: ST_TO_ADDR
// if Crawls ( un ) then
23236: LD_VAR 0 2
23240: PPUSH
23241: CALL_OW 318
23245: IFFALSE 23256
// ComWalk ( un ) ;
23247: LD_VAR 0 2
23251: PPUSH
23252: CALL_OW 138
// SetClass ( un , class_sniper ) ;
23256: LD_VAR 0 2
23260: PPUSH
23261: LD_INT 5
23263: PPUSH
23264: CALL_OW 336
// end ;
23268: PPOPN 3
23270: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
23271: LD_EXP 41
23275: PUSH
23276: LD_EXP 59
23280: AND
23281: PUSH
23282: LD_OWVAR 67
23286: PUSH
23287: LD_INT 4
23289: LESS
23290: AND
23291: IFFALSE 23310
23293: GO 23295
23295: DISABLE
// begin Difficulty := Difficulty + 1 ;
23296: LD_ADDR_OWVAR 67
23300: PUSH
23301: LD_OWVAR 67
23305: PUSH
23306: LD_INT 1
23308: PLUS
23309: ST_TO_ADDR
// end ;
23310: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
23311: LD_EXP 41
23315: PUSH
23316: LD_EXP 60
23320: AND
23321: IFFALSE 23424
23323: GO 23325
23325: DISABLE
23326: LD_INT 0
23328: PPUSH
// begin for i := 1 to 5 do
23329: LD_ADDR_VAR 0 1
23333: PUSH
23334: DOUBLE
23335: LD_INT 1
23337: DEC
23338: ST_TO_ADDR
23339: LD_INT 5
23341: PUSH
23342: FOR_TO
23343: IFFALSE 23422
// begin uc_nation := nation_nature ;
23345: LD_ADDR_OWVAR 21
23349: PUSH
23350: LD_INT 0
23352: ST_TO_ADDR
// uc_side := 0 ;
23353: LD_ADDR_OWVAR 20
23357: PUSH
23358: LD_INT 0
23360: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23361: LD_ADDR_OWVAR 29
23365: PUSH
23366: LD_INT 12
23368: PUSH
23369: LD_INT 12
23371: PUSH
23372: EMPTY
23373: LIST
23374: LIST
23375: ST_TO_ADDR
// hc_agressivity := 20 ;
23376: LD_ADDR_OWVAR 35
23380: PUSH
23381: LD_INT 20
23383: ST_TO_ADDR
// hc_class := class_tiger ;
23384: LD_ADDR_OWVAR 28
23388: PUSH
23389: LD_INT 14
23391: ST_TO_ADDR
// hc_gallery :=  ;
23392: LD_ADDR_OWVAR 33
23396: PUSH
23397: LD_STRING 
23399: ST_TO_ADDR
// hc_name :=  ;
23400: LD_ADDR_OWVAR 26
23404: PUSH
23405: LD_STRING 
23407: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
23408: CALL_OW 44
23412: PPUSH
23413: LD_INT 0
23415: PPUSH
23416: CALL_OW 51
// end ;
23420: GO 23342
23422: POP
23423: POP
// end ;
23424: PPOPN 1
23426: END
// every 0 0$1 trigger StreamModeActive and sBomb do
23427: LD_EXP 41
23431: PUSH
23432: LD_EXP 61
23436: AND
23437: IFFALSE 23446
23439: GO 23441
23441: DISABLE
// StreamSibBomb ;
23442: CALL 23447 0 0
23446: END
// export function StreamSibBomb ; var i , x , y ; begin
23447: LD_INT 0
23449: PPUSH
23450: PPUSH
23451: PPUSH
23452: PPUSH
// result := false ;
23453: LD_ADDR_VAR 0 1
23457: PUSH
23458: LD_INT 0
23460: ST_TO_ADDR
// for i := 1 to 16 do
23461: LD_ADDR_VAR 0 2
23465: PUSH
23466: DOUBLE
23467: LD_INT 1
23469: DEC
23470: ST_TO_ADDR
23471: LD_INT 16
23473: PUSH
23474: FOR_TO
23475: IFFALSE 23674
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23477: LD_ADDR_VAR 0 3
23481: PUSH
23482: LD_INT 10
23484: PUSH
23485: LD_INT 20
23487: PUSH
23488: LD_INT 30
23490: PUSH
23491: LD_INT 40
23493: PUSH
23494: LD_INT 50
23496: PUSH
23497: LD_INT 60
23499: PUSH
23500: LD_INT 70
23502: PUSH
23503: LD_INT 80
23505: PUSH
23506: LD_INT 90
23508: PUSH
23509: LD_INT 100
23511: PUSH
23512: LD_INT 110
23514: PUSH
23515: LD_INT 120
23517: PUSH
23518: LD_INT 130
23520: PUSH
23521: LD_INT 140
23523: PUSH
23524: LD_INT 150
23526: PUSH
23527: EMPTY
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: PUSH
23544: LD_INT 1
23546: PPUSH
23547: LD_INT 15
23549: PPUSH
23550: CALL_OW 12
23554: ARRAY
23555: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23556: LD_ADDR_VAR 0 4
23560: PUSH
23561: LD_INT 10
23563: PUSH
23564: LD_INT 20
23566: PUSH
23567: LD_INT 30
23569: PUSH
23570: LD_INT 40
23572: PUSH
23573: LD_INT 50
23575: PUSH
23576: LD_INT 60
23578: PUSH
23579: LD_INT 70
23581: PUSH
23582: LD_INT 80
23584: PUSH
23585: LD_INT 90
23587: PUSH
23588: LD_INT 100
23590: PUSH
23591: LD_INT 110
23593: PUSH
23594: LD_INT 120
23596: PUSH
23597: LD_INT 130
23599: PUSH
23600: LD_INT 140
23602: PUSH
23603: LD_INT 150
23605: PUSH
23606: EMPTY
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: PUSH
23623: LD_INT 1
23625: PPUSH
23626: LD_INT 15
23628: PPUSH
23629: CALL_OW 12
23633: ARRAY
23634: ST_TO_ADDR
// if ValidHex ( x , y ) then
23635: LD_VAR 0 3
23639: PPUSH
23640: LD_VAR 0 4
23644: PPUSH
23645: CALL_OW 488
23649: IFFALSE 23672
// begin result := [ x , y ] ;
23651: LD_ADDR_VAR 0 1
23655: PUSH
23656: LD_VAR 0 3
23660: PUSH
23661: LD_VAR 0 4
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: ST_TO_ADDR
// break ;
23670: GO 23674
// end ; end ;
23672: GO 23474
23674: POP
23675: POP
// if result then
23676: LD_VAR 0 1
23680: IFFALSE 23740
// begin ToLua ( playSibBomb() ) ;
23682: LD_STRING playSibBomb()
23684: PPUSH
23685: CALL_OW 559
// wait ( 0 0$14 ) ;
23689: LD_INT 490
23691: PPUSH
23692: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
23696: LD_VAR 0 1
23700: PUSH
23701: LD_INT 1
23703: ARRAY
23704: PPUSH
23705: LD_VAR 0 1
23709: PUSH
23710: LD_INT 2
23712: ARRAY
23713: PPUSH
23714: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
23718: LD_VAR 0 1
23722: PUSH
23723: LD_INT 1
23725: ARRAY
23726: PPUSH
23727: LD_VAR 0 1
23731: PUSH
23732: LD_INT 2
23734: ARRAY
23735: PPUSH
23736: CALL_OW 429
// end ; end ;
23740: LD_VAR 0 1
23744: RET
// every 0 0$1 trigger StreamModeActive and sReset do
23745: LD_EXP 41
23749: PUSH
23750: LD_EXP 63
23754: AND
23755: IFFALSE 23767
23757: GO 23759
23759: DISABLE
// YouLost (  ) ;
23760: LD_STRING 
23762: PPUSH
23763: CALL_OW 104
23767: END
// every 0 0$1 trigger StreamModeActive and sFog do
23768: LD_EXP 41
23772: PUSH
23773: LD_EXP 62
23777: AND
23778: IFFALSE 23792
23780: GO 23782
23782: DISABLE
// FogOff ( your_side ) ;
23783: LD_OWVAR 2
23787: PPUSH
23788: CALL_OW 344
23792: END
// every 0 0$1 trigger StreamModeActive and sSun do
23793: LD_EXP 41
23797: PUSH
23798: LD_EXP 64
23802: AND
23803: IFFALSE 23831
23805: GO 23807
23807: DISABLE
// begin solar_recharge_percent := 0 ;
23808: LD_ADDR_OWVAR 79
23812: PUSH
23813: LD_INT 0
23815: ST_TO_ADDR
// wait ( 5 5$00 ) ;
23816: LD_INT 10500
23818: PPUSH
23819: CALL_OW 67
// solar_recharge_percent := 100 ;
23823: LD_ADDR_OWVAR 79
23827: PUSH
23828: LD_INT 100
23830: ST_TO_ADDR
// end ;
23831: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
23832: LD_EXP 41
23836: PUSH
23837: LD_EXP 65
23841: AND
23842: IFFALSE 24081
23844: GO 23846
23846: DISABLE
23847: LD_INT 0
23849: PPUSH
23850: PPUSH
23851: PPUSH
// begin tmp := [ ] ;
23852: LD_ADDR_VAR 0 3
23856: PUSH
23857: EMPTY
23858: ST_TO_ADDR
// for i := 1 to 6 do
23859: LD_ADDR_VAR 0 1
23863: PUSH
23864: DOUBLE
23865: LD_INT 1
23867: DEC
23868: ST_TO_ADDR
23869: LD_INT 6
23871: PUSH
23872: FOR_TO
23873: IFFALSE 23978
// begin uc_nation := nation_nature ;
23875: LD_ADDR_OWVAR 21
23879: PUSH
23880: LD_INT 0
23882: ST_TO_ADDR
// uc_side := 0 ;
23883: LD_ADDR_OWVAR 20
23887: PUSH
23888: LD_INT 0
23890: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23891: LD_ADDR_OWVAR 29
23895: PUSH
23896: LD_INT 12
23898: PUSH
23899: LD_INT 12
23901: PUSH
23902: EMPTY
23903: LIST
23904: LIST
23905: ST_TO_ADDR
// hc_agressivity := 20 ;
23906: LD_ADDR_OWVAR 35
23910: PUSH
23911: LD_INT 20
23913: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
23914: LD_ADDR_OWVAR 28
23918: PUSH
23919: LD_INT 17
23921: ST_TO_ADDR
// hc_gallery :=  ;
23922: LD_ADDR_OWVAR 33
23926: PUSH
23927: LD_STRING 
23929: ST_TO_ADDR
// hc_name :=  ;
23930: LD_ADDR_OWVAR 26
23934: PUSH
23935: LD_STRING 
23937: ST_TO_ADDR
// un := CreateHuman ;
23938: LD_ADDR_VAR 0 2
23942: PUSH
23943: CALL_OW 44
23947: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
23948: LD_VAR 0 2
23952: PPUSH
23953: LD_INT 1
23955: PPUSH
23956: CALL_OW 51
// tmp := tmp ^ un ;
23960: LD_ADDR_VAR 0 3
23964: PUSH
23965: LD_VAR 0 3
23969: PUSH
23970: LD_VAR 0 2
23974: ADD
23975: ST_TO_ADDR
// end ;
23976: GO 23872
23978: POP
23979: POP
// repeat wait ( 0 0$1 ) ;
23980: LD_INT 35
23982: PPUSH
23983: CALL_OW 67
// for un in tmp do
23987: LD_ADDR_VAR 0 2
23991: PUSH
23992: LD_VAR 0 3
23996: PUSH
23997: FOR_IN
23998: IFFALSE 24072
// begin if IsDead ( un ) then
24000: LD_VAR 0 2
24004: PPUSH
24005: CALL_OW 301
24009: IFFALSE 24029
// begin tmp := tmp diff un ;
24011: LD_ADDR_VAR 0 3
24015: PUSH
24016: LD_VAR 0 3
24020: PUSH
24021: LD_VAR 0 2
24025: DIFF
24026: ST_TO_ADDR
// continue ;
24027: GO 23997
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
24029: LD_VAR 0 2
24033: PPUSH
24034: LD_INT 3
24036: PUSH
24037: LD_INT 22
24039: PUSH
24040: LD_INT 0
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: PUSH
24047: EMPTY
24048: LIST
24049: LIST
24050: PPUSH
24051: CALL_OW 69
24055: PPUSH
24056: LD_VAR 0 2
24060: PPUSH
24061: CALL_OW 74
24065: PPUSH
24066: CALL_OW 115
// end ;
24070: GO 23997
24072: POP
24073: POP
// until not tmp ;
24074: LD_VAR 0 3
24078: NOT
24079: IFFALSE 23980
// end ;
24081: PPOPN 3
24083: END
// every 0 0$1 trigger StreamModeActive and sTroll do
24084: LD_EXP 41
24088: PUSH
24089: LD_EXP 66
24093: AND
24094: IFFALSE 24148
24096: GO 24098
24098: DISABLE
// begin ToLua ( displayTroll(); ) ;
24099: LD_STRING displayTroll();
24101: PPUSH
24102: CALL_OW 559
// wait ( 3 3$00 ) ;
24106: LD_INT 6300
24108: PPUSH
24109: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24113: LD_STRING hideTroll();
24115: PPUSH
24116: CALL_OW 559
// wait ( 1 1$00 ) ;
24120: LD_INT 2100
24122: PPUSH
24123: CALL_OW 67
// ToLua ( displayTroll(); ) ;
24127: LD_STRING displayTroll();
24129: PPUSH
24130: CALL_OW 559
// wait ( 1 1$00 ) ;
24134: LD_INT 2100
24136: PPUSH
24137: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24141: LD_STRING hideTroll();
24143: PPUSH
24144: CALL_OW 559
// end ;
24148: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
24149: LD_EXP 41
24153: PUSH
24154: LD_EXP 67
24158: AND
24159: IFFALSE 24222
24161: GO 24163
24163: DISABLE
24164: LD_INT 0
24166: PPUSH
// begin p := 0 ;
24167: LD_ADDR_VAR 0 1
24171: PUSH
24172: LD_INT 0
24174: ST_TO_ADDR
// repeat game_speed := 1 ;
24175: LD_ADDR_OWVAR 65
24179: PUSH
24180: LD_INT 1
24182: ST_TO_ADDR
// wait ( 0 0$1 ) ;
24183: LD_INT 35
24185: PPUSH
24186: CALL_OW 67
// p := p + 1 ;
24190: LD_ADDR_VAR 0 1
24194: PUSH
24195: LD_VAR 0 1
24199: PUSH
24200: LD_INT 1
24202: PLUS
24203: ST_TO_ADDR
// until p >= 60 ;
24204: LD_VAR 0 1
24208: PUSH
24209: LD_INT 60
24211: GREATEREQUAL
24212: IFFALSE 24175
// game_speed := 4 ;
24214: LD_ADDR_OWVAR 65
24218: PUSH
24219: LD_INT 4
24221: ST_TO_ADDR
// end ;
24222: PPOPN 1
24224: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
24225: LD_EXP 41
24229: PUSH
24230: LD_EXP 68
24234: AND
24235: IFFALSE 24381
24237: GO 24239
24239: DISABLE
24240: LD_INT 0
24242: PPUSH
24243: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24244: LD_ADDR_VAR 0 1
24248: PUSH
24249: LD_INT 22
24251: PUSH
24252: LD_OWVAR 2
24256: PUSH
24257: EMPTY
24258: LIST
24259: LIST
24260: PUSH
24261: LD_INT 2
24263: PUSH
24264: LD_INT 30
24266: PUSH
24267: LD_INT 0
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: PUSH
24274: LD_INT 30
24276: PUSH
24277: LD_INT 1
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: LIST
24288: PUSH
24289: EMPTY
24290: LIST
24291: LIST
24292: PPUSH
24293: CALL_OW 69
24297: ST_TO_ADDR
// if not depot then
24298: LD_VAR 0 1
24302: NOT
24303: IFFALSE 24307
// exit ;
24305: GO 24381
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
24307: LD_ADDR_VAR 0 2
24311: PUSH
24312: LD_VAR 0 1
24316: PUSH
24317: LD_INT 1
24319: PPUSH
24320: LD_VAR 0 1
24324: PPUSH
24325: CALL_OW 12
24329: ARRAY
24330: PPUSH
24331: CALL_OW 274
24335: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
24336: LD_VAR 0 2
24340: PPUSH
24341: LD_INT 1
24343: PPUSH
24344: LD_INT 0
24346: PPUSH
24347: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
24351: LD_VAR 0 2
24355: PPUSH
24356: LD_INT 2
24358: PPUSH
24359: LD_INT 0
24361: PPUSH
24362: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
24366: LD_VAR 0 2
24370: PPUSH
24371: LD_INT 3
24373: PPUSH
24374: LD_INT 0
24376: PPUSH
24377: CALL_OW 277
// end ;
24381: PPOPN 2
24383: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
24384: LD_EXP 41
24388: PUSH
24389: LD_EXP 69
24393: AND
24394: IFFALSE 24491
24396: GO 24398
24398: DISABLE
24399: LD_INT 0
24401: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24402: LD_ADDR_VAR 0 1
24406: PUSH
24407: LD_INT 22
24409: PUSH
24410: LD_OWVAR 2
24414: PUSH
24415: EMPTY
24416: LIST
24417: LIST
24418: PUSH
24419: LD_INT 21
24421: PUSH
24422: LD_INT 1
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: PUSH
24429: LD_INT 3
24431: PUSH
24432: LD_INT 23
24434: PUSH
24435: LD_INT 0
24437: PUSH
24438: EMPTY
24439: LIST
24440: LIST
24441: PUSH
24442: EMPTY
24443: LIST
24444: LIST
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: LIST
24450: PPUSH
24451: CALL_OW 69
24455: ST_TO_ADDR
// if not tmp then
24456: LD_VAR 0 1
24460: NOT
24461: IFFALSE 24465
// exit ;
24463: GO 24491
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
24465: LD_VAR 0 1
24469: PUSH
24470: LD_INT 1
24472: PPUSH
24473: LD_VAR 0 1
24477: PPUSH
24478: CALL_OW 12
24482: ARRAY
24483: PPUSH
24484: LD_INT 200
24486: PPUSH
24487: CALL_OW 234
// end ;
24491: PPOPN 1
24493: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
24494: LD_EXP 41
24498: PUSH
24499: LD_EXP 70
24503: AND
24504: IFFALSE 24583
24506: GO 24508
24508: DISABLE
24509: LD_INT 0
24511: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
24512: LD_ADDR_VAR 0 1
24516: PUSH
24517: LD_INT 22
24519: PUSH
24520: LD_OWVAR 2
24524: PUSH
24525: EMPTY
24526: LIST
24527: LIST
24528: PUSH
24529: LD_INT 21
24531: PUSH
24532: LD_INT 2
24534: PUSH
24535: EMPTY
24536: LIST
24537: LIST
24538: PUSH
24539: EMPTY
24540: LIST
24541: LIST
24542: PPUSH
24543: CALL_OW 69
24547: ST_TO_ADDR
// if not tmp then
24548: LD_VAR 0 1
24552: NOT
24553: IFFALSE 24557
// exit ;
24555: GO 24583
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
24557: LD_VAR 0 1
24561: PUSH
24562: LD_INT 1
24564: PPUSH
24565: LD_VAR 0 1
24569: PPUSH
24570: CALL_OW 12
24574: ARRAY
24575: PPUSH
24576: LD_INT 60
24578: PPUSH
24579: CALL_OW 234
// end ;
24583: PPOPN 1
24585: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
24586: LD_EXP 41
24590: PUSH
24591: LD_EXP 71
24595: AND
24596: IFFALSE 24695
24598: GO 24600
24600: DISABLE
24601: LD_INT 0
24603: PPUSH
24604: PPUSH
// begin enable ;
24605: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
24606: LD_ADDR_VAR 0 1
24610: PUSH
24611: LD_INT 22
24613: PUSH
24614: LD_OWVAR 2
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: PUSH
24623: LD_INT 61
24625: PUSH
24626: EMPTY
24627: LIST
24628: PUSH
24629: LD_INT 33
24631: PUSH
24632: LD_INT 2
24634: PUSH
24635: EMPTY
24636: LIST
24637: LIST
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: LIST
24643: PPUSH
24644: CALL_OW 69
24648: ST_TO_ADDR
// if not tmp then
24649: LD_VAR 0 1
24653: NOT
24654: IFFALSE 24658
// exit ;
24656: GO 24695
// for i in tmp do
24658: LD_ADDR_VAR 0 2
24662: PUSH
24663: LD_VAR 0 1
24667: PUSH
24668: FOR_IN
24669: IFFALSE 24693
// if IsControledBy ( i ) then
24671: LD_VAR 0 2
24675: PPUSH
24676: CALL_OW 312
24680: IFFALSE 24691
// ComUnlink ( i ) ;
24682: LD_VAR 0 2
24686: PPUSH
24687: CALL_OW 136
24691: GO 24668
24693: POP
24694: POP
// end ;
24695: PPOPN 2
24697: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
24698: LD_EXP 41
24702: PUSH
24703: LD_EXP 72
24707: AND
24708: IFFALSE 24848
24710: GO 24712
24712: DISABLE
24713: LD_INT 0
24715: PPUSH
24716: PPUSH
// begin ToLua ( displayPowell(); ) ;
24717: LD_STRING displayPowell();
24719: PPUSH
24720: CALL_OW 559
// uc_side := 0 ;
24724: LD_ADDR_OWVAR 20
24728: PUSH
24729: LD_INT 0
24731: ST_TO_ADDR
// uc_nation := 2 ;
24732: LD_ADDR_OWVAR 21
24736: PUSH
24737: LD_INT 2
24739: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
24740: LD_ADDR_OWVAR 37
24744: PUSH
24745: LD_INT 14
24747: ST_TO_ADDR
// vc_engine := engine_siberite ;
24748: LD_ADDR_OWVAR 39
24752: PUSH
24753: LD_INT 3
24755: ST_TO_ADDR
// vc_control := control_apeman ;
24756: LD_ADDR_OWVAR 38
24760: PUSH
24761: LD_INT 5
24763: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
24764: LD_ADDR_OWVAR 40
24768: PUSH
24769: LD_INT 29
24771: ST_TO_ADDR
// un := CreateVehicle ;
24772: LD_ADDR_VAR 0 2
24776: PUSH
24777: CALL_OW 45
24781: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24782: LD_VAR 0 2
24786: PPUSH
24787: LD_INT 1
24789: PPUSH
24790: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24794: LD_INT 35
24796: PPUSH
24797: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24801: LD_VAR 0 2
24805: PPUSH
24806: LD_INT 22
24808: PUSH
24809: LD_OWVAR 2
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: PPUSH
24818: CALL_OW 69
24822: PPUSH
24823: LD_VAR 0 2
24827: PPUSH
24828: CALL_OW 74
24832: PPUSH
24833: CALL_OW 115
// until IsDead ( un ) ;
24837: LD_VAR 0 2
24841: PPUSH
24842: CALL_OW 301
24846: IFFALSE 24794
// end ;
24848: PPOPN 2
24850: END
// every 0 0$1 trigger StreamModeActive and sStu do
24851: LD_EXP 41
24855: PUSH
24856: LD_EXP 80
24860: AND
24861: IFFALSE 24877
24863: GO 24865
24865: DISABLE
// begin ToLua ( displayStucuk(); ) ;
24866: LD_STRING displayStucuk();
24868: PPUSH
24869: CALL_OW 559
// ResetFog ;
24873: CALL_OW 335
// end ;
24877: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
24878: LD_EXP 41
24882: PUSH
24883: LD_EXP 73
24887: AND
24888: IFFALSE 25029
24890: GO 24892
24892: DISABLE
24893: LD_INT 0
24895: PPUSH
24896: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24897: LD_ADDR_VAR 0 2
24901: PUSH
24902: LD_INT 22
24904: PUSH
24905: LD_OWVAR 2
24909: PUSH
24910: EMPTY
24911: LIST
24912: LIST
24913: PUSH
24914: LD_INT 21
24916: PUSH
24917: LD_INT 1
24919: PUSH
24920: EMPTY
24921: LIST
24922: LIST
24923: PUSH
24924: EMPTY
24925: LIST
24926: LIST
24927: PPUSH
24928: CALL_OW 69
24932: ST_TO_ADDR
// if not tmp then
24933: LD_VAR 0 2
24937: NOT
24938: IFFALSE 24942
// exit ;
24940: GO 25029
// un := tmp [ rand ( 1 , tmp ) ] ;
24942: LD_ADDR_VAR 0 1
24946: PUSH
24947: LD_VAR 0 2
24951: PUSH
24952: LD_INT 1
24954: PPUSH
24955: LD_VAR 0 2
24959: PPUSH
24960: CALL_OW 12
24964: ARRAY
24965: ST_TO_ADDR
// SetSide ( un , 0 ) ;
24966: LD_VAR 0 1
24970: PPUSH
24971: LD_INT 0
24973: PPUSH
24974: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
24978: LD_VAR 0 1
24982: PPUSH
24983: LD_OWVAR 3
24987: PUSH
24988: LD_VAR 0 1
24992: DIFF
24993: PPUSH
24994: LD_VAR 0 1
24998: PPUSH
24999: CALL_OW 74
25003: PPUSH
25004: CALL_OW 115
// wait ( 0 0$20 ) ;
25008: LD_INT 700
25010: PPUSH
25011: CALL_OW 67
// SetSide ( un , your_side ) ;
25015: LD_VAR 0 1
25019: PPUSH
25020: LD_OWVAR 2
25024: PPUSH
25025: CALL_OW 235
// end ;
25029: PPOPN 2
25031: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
25032: LD_EXP 41
25036: PUSH
25037: LD_EXP 74
25041: AND
25042: IFFALSE 25148
25044: GO 25046
25046: DISABLE
25047: LD_INT 0
25049: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25050: LD_ADDR_VAR 0 1
25054: PUSH
25055: LD_INT 22
25057: PUSH
25058: LD_OWVAR 2
25062: PUSH
25063: EMPTY
25064: LIST
25065: LIST
25066: PUSH
25067: LD_INT 2
25069: PUSH
25070: LD_INT 30
25072: PUSH
25073: LD_INT 0
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: PUSH
25080: LD_INT 30
25082: PUSH
25083: LD_INT 1
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: PUSH
25090: EMPTY
25091: LIST
25092: LIST
25093: LIST
25094: PUSH
25095: EMPTY
25096: LIST
25097: LIST
25098: PPUSH
25099: CALL_OW 69
25103: ST_TO_ADDR
// if not depot then
25104: LD_VAR 0 1
25108: NOT
25109: IFFALSE 25113
// exit ;
25111: GO 25148
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
25113: LD_VAR 0 1
25117: PUSH
25118: LD_INT 1
25120: ARRAY
25121: PPUSH
25122: CALL_OW 250
25126: PPUSH
25127: LD_VAR 0 1
25131: PUSH
25132: LD_INT 1
25134: ARRAY
25135: PPUSH
25136: CALL_OW 251
25140: PPUSH
25141: LD_INT 70
25143: PPUSH
25144: CALL_OW 495
// end ;
25148: PPOPN 1
25150: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
25151: LD_EXP 41
25155: PUSH
25156: LD_EXP 75
25160: AND
25161: IFFALSE 25372
25163: GO 25165
25165: DISABLE
25166: LD_INT 0
25168: PPUSH
25169: PPUSH
25170: PPUSH
25171: PPUSH
25172: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25173: LD_ADDR_VAR 0 5
25177: PUSH
25178: LD_INT 22
25180: PUSH
25181: LD_OWVAR 2
25185: PUSH
25186: EMPTY
25187: LIST
25188: LIST
25189: PUSH
25190: LD_INT 21
25192: PUSH
25193: LD_INT 1
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: PUSH
25200: EMPTY
25201: LIST
25202: LIST
25203: PPUSH
25204: CALL_OW 69
25208: ST_TO_ADDR
// if not tmp then
25209: LD_VAR 0 5
25213: NOT
25214: IFFALSE 25218
// exit ;
25216: GO 25372
// for i in tmp do
25218: LD_ADDR_VAR 0 1
25222: PUSH
25223: LD_VAR 0 5
25227: PUSH
25228: FOR_IN
25229: IFFALSE 25370
// begin d := rand ( 0 , 5 ) ;
25231: LD_ADDR_VAR 0 4
25235: PUSH
25236: LD_INT 0
25238: PPUSH
25239: LD_INT 5
25241: PPUSH
25242: CALL_OW 12
25246: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
25247: LD_ADDR_VAR 0 2
25251: PUSH
25252: LD_VAR 0 1
25256: PPUSH
25257: CALL_OW 250
25261: PPUSH
25262: LD_VAR 0 4
25266: PPUSH
25267: LD_INT 3
25269: PPUSH
25270: LD_INT 12
25272: PPUSH
25273: CALL_OW 12
25277: PPUSH
25278: CALL_OW 272
25282: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
25283: LD_ADDR_VAR 0 3
25287: PUSH
25288: LD_VAR 0 1
25292: PPUSH
25293: CALL_OW 251
25297: PPUSH
25298: LD_VAR 0 4
25302: PPUSH
25303: LD_INT 3
25305: PPUSH
25306: LD_INT 12
25308: PPUSH
25309: CALL_OW 12
25313: PPUSH
25314: CALL_OW 273
25318: ST_TO_ADDR
// if ValidHex ( x , y ) then
25319: LD_VAR 0 2
25323: PPUSH
25324: LD_VAR 0 3
25328: PPUSH
25329: CALL_OW 488
25333: IFFALSE 25368
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
25335: LD_VAR 0 1
25339: PPUSH
25340: LD_VAR 0 2
25344: PPUSH
25345: LD_VAR 0 3
25349: PPUSH
25350: LD_INT 3
25352: PPUSH
25353: LD_INT 6
25355: PPUSH
25356: CALL_OW 12
25360: PPUSH
25361: LD_INT 1
25363: PPUSH
25364: CALL_OW 483
// end ;
25368: GO 25228
25370: POP
25371: POP
// end ;
25372: PPOPN 5
25374: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
25375: LD_EXP 41
25379: PUSH
25380: LD_EXP 76
25384: AND
25385: IFFALSE 25479
25387: GO 25389
25389: DISABLE
25390: LD_INT 0
25392: PPUSH
25393: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
25394: LD_ADDR_VAR 0 2
25398: PUSH
25399: LD_INT 22
25401: PUSH
25402: LD_OWVAR 2
25406: PUSH
25407: EMPTY
25408: LIST
25409: LIST
25410: PUSH
25411: LD_INT 32
25413: PUSH
25414: LD_INT 1
25416: PUSH
25417: EMPTY
25418: LIST
25419: LIST
25420: PUSH
25421: LD_INT 21
25423: PUSH
25424: LD_INT 2
25426: PUSH
25427: EMPTY
25428: LIST
25429: LIST
25430: PUSH
25431: EMPTY
25432: LIST
25433: LIST
25434: LIST
25435: PPUSH
25436: CALL_OW 69
25440: ST_TO_ADDR
// if not tmp then
25441: LD_VAR 0 2
25445: NOT
25446: IFFALSE 25450
// exit ;
25448: GO 25479
// for i in tmp do
25450: LD_ADDR_VAR 0 1
25454: PUSH
25455: LD_VAR 0 2
25459: PUSH
25460: FOR_IN
25461: IFFALSE 25477
// SetFuel ( i , 0 ) ;
25463: LD_VAR 0 1
25467: PPUSH
25468: LD_INT 0
25470: PPUSH
25471: CALL_OW 240
25475: GO 25460
25477: POP
25478: POP
// end ;
25479: PPOPN 2
25481: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
25482: LD_EXP 41
25486: PUSH
25487: LD_EXP 77
25491: AND
25492: IFFALSE 25558
25494: GO 25496
25496: DISABLE
25497: LD_INT 0
25499: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25500: LD_ADDR_VAR 0 1
25504: PUSH
25505: LD_INT 22
25507: PUSH
25508: LD_OWVAR 2
25512: PUSH
25513: EMPTY
25514: LIST
25515: LIST
25516: PUSH
25517: LD_INT 30
25519: PUSH
25520: LD_INT 29
25522: PUSH
25523: EMPTY
25524: LIST
25525: LIST
25526: PUSH
25527: EMPTY
25528: LIST
25529: LIST
25530: PPUSH
25531: CALL_OW 69
25535: ST_TO_ADDR
// if not tmp then
25536: LD_VAR 0 1
25540: NOT
25541: IFFALSE 25545
// exit ;
25543: GO 25558
// DestroyUnit ( tmp [ 1 ] ) ;
25545: LD_VAR 0 1
25549: PUSH
25550: LD_INT 1
25552: ARRAY
25553: PPUSH
25554: CALL_OW 65
// end ;
25558: PPOPN 1
25560: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
25561: LD_EXP 41
25565: PUSH
25566: LD_EXP 79
25570: AND
25571: IFFALSE 25700
25573: GO 25575
25575: DISABLE
25576: LD_INT 0
25578: PPUSH
// begin uc_side := 0 ;
25579: LD_ADDR_OWVAR 20
25583: PUSH
25584: LD_INT 0
25586: ST_TO_ADDR
// uc_nation := nation_arabian ;
25587: LD_ADDR_OWVAR 21
25591: PUSH
25592: LD_INT 2
25594: ST_TO_ADDR
// hc_gallery :=  ;
25595: LD_ADDR_OWVAR 33
25599: PUSH
25600: LD_STRING 
25602: ST_TO_ADDR
// hc_name :=  ;
25603: LD_ADDR_OWVAR 26
25607: PUSH
25608: LD_STRING 
25610: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
25611: LD_INT 1
25613: PPUSH
25614: LD_INT 11
25616: PPUSH
25617: LD_INT 10
25619: PPUSH
25620: CALL_OW 380
// un := CreateHuman ;
25624: LD_ADDR_VAR 0 1
25628: PUSH
25629: CALL_OW 44
25633: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25634: LD_VAR 0 1
25638: PPUSH
25639: LD_INT 1
25641: PPUSH
25642: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25646: LD_INT 35
25648: PPUSH
25649: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25653: LD_VAR 0 1
25657: PPUSH
25658: LD_INT 22
25660: PUSH
25661: LD_OWVAR 2
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: PPUSH
25670: CALL_OW 69
25674: PPUSH
25675: LD_VAR 0 1
25679: PPUSH
25680: CALL_OW 74
25684: PPUSH
25685: CALL_OW 115
// until IsDead ( un ) ;
25689: LD_VAR 0 1
25693: PPUSH
25694: CALL_OW 301
25698: IFFALSE 25646
// end ;
25700: PPOPN 1
25702: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
25703: LD_EXP 41
25707: PUSH
25708: LD_EXP 81
25712: AND
25713: IFFALSE 25725
25715: GO 25717
25717: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
25718: LD_STRING earthquake(getX(game), 0, 32)
25720: PPUSH
25721: CALL_OW 559
25725: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
25726: LD_EXP 41
25730: PUSH
25731: LD_EXP 82
25735: AND
25736: IFFALSE 25827
25738: GO 25740
25740: DISABLE
25741: LD_INT 0
25743: PPUSH
// begin enable ;
25744: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
25745: LD_ADDR_VAR 0 1
25749: PUSH
25750: LD_INT 22
25752: PUSH
25753: LD_OWVAR 2
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PUSH
25762: LD_INT 21
25764: PUSH
25765: LD_INT 2
25767: PUSH
25768: EMPTY
25769: LIST
25770: LIST
25771: PUSH
25772: LD_INT 33
25774: PUSH
25775: LD_INT 3
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: LIST
25786: PPUSH
25787: CALL_OW 69
25791: ST_TO_ADDR
// if not tmp then
25792: LD_VAR 0 1
25796: NOT
25797: IFFALSE 25801
// exit ;
25799: GO 25827
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25801: LD_VAR 0 1
25805: PUSH
25806: LD_INT 1
25808: PPUSH
25809: LD_VAR 0 1
25813: PPUSH
25814: CALL_OW 12
25818: ARRAY
25819: PPUSH
25820: LD_INT 1
25822: PPUSH
25823: CALL_OW 234
// end ;
25827: PPOPN 1
25829: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
25830: LD_EXP 41
25834: PUSH
25835: LD_EXP 83
25839: AND
25840: IFFALSE 25981
25842: GO 25844
25844: DISABLE
25845: LD_INT 0
25847: PPUSH
25848: PPUSH
25849: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25850: LD_ADDR_VAR 0 3
25854: PUSH
25855: LD_INT 22
25857: PUSH
25858: LD_OWVAR 2
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PUSH
25867: LD_INT 25
25869: PUSH
25870: LD_INT 1
25872: PUSH
25873: EMPTY
25874: LIST
25875: LIST
25876: PUSH
25877: EMPTY
25878: LIST
25879: LIST
25880: PPUSH
25881: CALL_OW 69
25885: ST_TO_ADDR
// if not tmp then
25886: LD_VAR 0 3
25890: NOT
25891: IFFALSE 25895
// exit ;
25893: GO 25981
// un := tmp [ rand ( 1 , tmp ) ] ;
25895: LD_ADDR_VAR 0 2
25899: PUSH
25900: LD_VAR 0 3
25904: PUSH
25905: LD_INT 1
25907: PPUSH
25908: LD_VAR 0 3
25912: PPUSH
25913: CALL_OW 12
25917: ARRAY
25918: ST_TO_ADDR
// if Crawls ( un ) then
25919: LD_VAR 0 2
25923: PPUSH
25924: CALL_OW 318
25928: IFFALSE 25939
// ComWalk ( un ) ;
25930: LD_VAR 0 2
25934: PPUSH
25935: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
25939: LD_VAR 0 2
25943: PPUSH
25944: LD_INT 9
25946: PPUSH
25947: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
25951: LD_INT 28
25953: PPUSH
25954: LD_OWVAR 2
25958: PPUSH
25959: LD_INT 2
25961: PPUSH
25962: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
25966: LD_INT 29
25968: PPUSH
25969: LD_OWVAR 2
25973: PPUSH
25974: LD_INT 2
25976: PPUSH
25977: CALL_OW 322
// end ;
25981: PPOPN 3
25983: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
25984: LD_EXP 41
25988: PUSH
25989: LD_EXP 84
25993: AND
25994: IFFALSE 26105
25996: GO 25998
25998: DISABLE
25999: LD_INT 0
26001: PPUSH
26002: PPUSH
26003: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26004: LD_ADDR_VAR 0 3
26008: PUSH
26009: LD_INT 22
26011: PUSH
26012: LD_OWVAR 2
26016: PUSH
26017: EMPTY
26018: LIST
26019: LIST
26020: PUSH
26021: LD_INT 25
26023: PUSH
26024: LD_INT 1
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: PUSH
26031: EMPTY
26032: LIST
26033: LIST
26034: PPUSH
26035: CALL_OW 69
26039: ST_TO_ADDR
// if not tmp then
26040: LD_VAR 0 3
26044: NOT
26045: IFFALSE 26049
// exit ;
26047: GO 26105
// un := tmp [ rand ( 1 , tmp ) ] ;
26049: LD_ADDR_VAR 0 2
26053: PUSH
26054: LD_VAR 0 3
26058: PUSH
26059: LD_INT 1
26061: PPUSH
26062: LD_VAR 0 3
26066: PPUSH
26067: CALL_OW 12
26071: ARRAY
26072: ST_TO_ADDR
// if Crawls ( un ) then
26073: LD_VAR 0 2
26077: PPUSH
26078: CALL_OW 318
26082: IFFALSE 26093
// ComWalk ( un ) ;
26084: LD_VAR 0 2
26088: PPUSH
26089: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26093: LD_VAR 0 2
26097: PPUSH
26098: LD_INT 8
26100: PPUSH
26101: CALL_OW 336
// end ;
26105: PPOPN 3
26107: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
26108: LD_EXP 41
26112: PUSH
26113: LD_EXP 85
26117: AND
26118: IFFALSE 26262
26120: GO 26122
26122: DISABLE
26123: LD_INT 0
26125: PPUSH
26126: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
26127: LD_ADDR_VAR 0 2
26131: PUSH
26132: LD_INT 22
26134: PUSH
26135: LD_OWVAR 2
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: PUSH
26144: LD_INT 21
26146: PUSH
26147: LD_INT 2
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: PUSH
26154: LD_INT 2
26156: PUSH
26157: LD_INT 34
26159: PUSH
26160: LD_INT 12
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: PUSH
26167: LD_INT 34
26169: PUSH
26170: LD_INT 51
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: PUSH
26177: LD_INT 34
26179: PUSH
26180: LD_INT 32
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: LIST
26191: LIST
26192: PUSH
26193: EMPTY
26194: LIST
26195: LIST
26196: LIST
26197: PPUSH
26198: CALL_OW 69
26202: ST_TO_ADDR
// if not tmp then
26203: LD_VAR 0 2
26207: NOT
26208: IFFALSE 26212
// exit ;
26210: GO 26262
// for i in tmp do
26212: LD_ADDR_VAR 0 1
26216: PUSH
26217: LD_VAR 0 2
26221: PUSH
26222: FOR_IN
26223: IFFALSE 26260
// if GetCargo ( i , mat_artifact ) = 0 then
26225: LD_VAR 0 1
26229: PPUSH
26230: LD_INT 4
26232: PPUSH
26233: CALL_OW 289
26237: PUSH
26238: LD_INT 0
26240: EQUAL
26241: IFFALSE 26258
// SetCargo ( i , mat_siberit , 100 ) ;
26243: LD_VAR 0 1
26247: PPUSH
26248: LD_INT 3
26250: PPUSH
26251: LD_INT 100
26253: PPUSH
26254: CALL_OW 290
26258: GO 26222
26260: POP
26261: POP
// end ;
26262: PPOPN 2
26264: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
26265: LD_EXP 41
26269: PUSH
26270: LD_EXP 86
26274: AND
26275: IFFALSE 26458
26277: GO 26279
26279: DISABLE
26280: LD_INT 0
26282: PPUSH
26283: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26284: LD_ADDR_VAR 0 2
26288: PUSH
26289: LD_INT 22
26291: PUSH
26292: LD_OWVAR 2
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: PPUSH
26301: CALL_OW 69
26305: ST_TO_ADDR
// if not tmp then
26306: LD_VAR 0 2
26310: NOT
26311: IFFALSE 26315
// exit ;
26313: GO 26458
// for i := 1 to 2 do
26315: LD_ADDR_VAR 0 1
26319: PUSH
26320: DOUBLE
26321: LD_INT 1
26323: DEC
26324: ST_TO_ADDR
26325: LD_INT 2
26327: PUSH
26328: FOR_TO
26329: IFFALSE 26456
// begin uc_side := your_side ;
26331: LD_ADDR_OWVAR 20
26335: PUSH
26336: LD_OWVAR 2
26340: ST_TO_ADDR
// uc_nation := nation_american ;
26341: LD_ADDR_OWVAR 21
26345: PUSH
26346: LD_INT 1
26348: ST_TO_ADDR
// vc_chassis := us_morphling ;
26349: LD_ADDR_OWVAR 37
26353: PUSH
26354: LD_INT 5
26356: ST_TO_ADDR
// vc_engine := engine_siberite ;
26357: LD_ADDR_OWVAR 39
26361: PUSH
26362: LD_INT 3
26364: ST_TO_ADDR
// vc_control := control_computer ;
26365: LD_ADDR_OWVAR 38
26369: PUSH
26370: LD_INT 3
26372: ST_TO_ADDR
// vc_weapon := us_double_laser ;
26373: LD_ADDR_OWVAR 40
26377: PUSH
26378: LD_INT 10
26380: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
26381: LD_VAR 0 2
26385: PUSH
26386: LD_INT 1
26388: ARRAY
26389: PPUSH
26390: CALL_OW 310
26394: NOT
26395: IFFALSE 26442
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
26397: CALL_OW 45
26401: PPUSH
26402: LD_VAR 0 2
26406: PUSH
26407: LD_INT 1
26409: ARRAY
26410: PPUSH
26411: CALL_OW 250
26415: PPUSH
26416: LD_VAR 0 2
26420: PUSH
26421: LD_INT 1
26423: ARRAY
26424: PPUSH
26425: CALL_OW 251
26429: PPUSH
26430: LD_INT 12
26432: PPUSH
26433: LD_INT 1
26435: PPUSH
26436: CALL_OW 50
26440: GO 26454
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
26442: CALL_OW 45
26446: PPUSH
26447: LD_INT 1
26449: PPUSH
26450: CALL_OW 51
// end ;
26454: GO 26328
26456: POP
26457: POP
// end ;
26458: PPOPN 2
26460: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
26461: LD_EXP 41
26465: PUSH
26466: LD_EXP 87
26470: AND
26471: IFFALSE 26693
26473: GO 26475
26475: DISABLE
26476: LD_INT 0
26478: PPUSH
26479: PPUSH
26480: PPUSH
26481: PPUSH
26482: PPUSH
26483: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26484: LD_ADDR_VAR 0 6
26488: PUSH
26489: LD_INT 22
26491: PUSH
26492: LD_OWVAR 2
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: PUSH
26501: LD_INT 21
26503: PUSH
26504: LD_INT 1
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: PUSH
26511: LD_INT 3
26513: PUSH
26514: LD_INT 23
26516: PUSH
26517: LD_INT 0
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: PUSH
26524: EMPTY
26525: LIST
26526: LIST
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: LIST
26532: PPUSH
26533: CALL_OW 69
26537: ST_TO_ADDR
// if not tmp then
26538: LD_VAR 0 6
26542: NOT
26543: IFFALSE 26547
// exit ;
26545: GO 26693
// s1 := rand ( 1 , 4 ) ;
26547: LD_ADDR_VAR 0 2
26551: PUSH
26552: LD_INT 1
26554: PPUSH
26555: LD_INT 4
26557: PPUSH
26558: CALL_OW 12
26562: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
26563: LD_ADDR_VAR 0 4
26567: PUSH
26568: LD_VAR 0 6
26572: PUSH
26573: LD_INT 1
26575: ARRAY
26576: PPUSH
26577: LD_VAR 0 2
26581: PPUSH
26582: CALL_OW 259
26586: ST_TO_ADDR
// if s1 = 1 then
26587: LD_VAR 0 2
26591: PUSH
26592: LD_INT 1
26594: EQUAL
26595: IFFALSE 26615
// s2 := rand ( 2 , 4 ) else
26597: LD_ADDR_VAR 0 3
26601: PUSH
26602: LD_INT 2
26604: PPUSH
26605: LD_INT 4
26607: PPUSH
26608: CALL_OW 12
26612: ST_TO_ADDR
26613: GO 26623
// s2 := 1 ;
26615: LD_ADDR_VAR 0 3
26619: PUSH
26620: LD_INT 1
26622: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
26623: LD_ADDR_VAR 0 5
26627: PUSH
26628: LD_VAR 0 6
26632: PUSH
26633: LD_INT 1
26635: ARRAY
26636: PPUSH
26637: LD_VAR 0 3
26641: PPUSH
26642: CALL_OW 259
26646: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
26647: LD_VAR 0 6
26651: PUSH
26652: LD_INT 1
26654: ARRAY
26655: PPUSH
26656: LD_VAR 0 2
26660: PPUSH
26661: LD_VAR 0 5
26665: PPUSH
26666: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
26670: LD_VAR 0 6
26674: PUSH
26675: LD_INT 1
26677: ARRAY
26678: PPUSH
26679: LD_VAR 0 3
26683: PPUSH
26684: LD_VAR 0 4
26688: PPUSH
26689: CALL_OW 237
// end ;
26693: PPOPN 6
26695: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
26696: LD_EXP 41
26700: PUSH
26701: LD_EXP 88
26705: AND
26706: IFFALSE 26785
26708: GO 26710
26710: DISABLE
26711: LD_INT 0
26713: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
26714: LD_ADDR_VAR 0 1
26718: PUSH
26719: LD_INT 22
26721: PUSH
26722: LD_OWVAR 2
26726: PUSH
26727: EMPTY
26728: LIST
26729: LIST
26730: PUSH
26731: LD_INT 30
26733: PUSH
26734: LD_INT 3
26736: PUSH
26737: EMPTY
26738: LIST
26739: LIST
26740: PUSH
26741: EMPTY
26742: LIST
26743: LIST
26744: PPUSH
26745: CALL_OW 69
26749: ST_TO_ADDR
// if not tmp then
26750: LD_VAR 0 1
26754: NOT
26755: IFFALSE 26759
// exit ;
26757: GO 26785
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26759: LD_VAR 0 1
26763: PUSH
26764: LD_INT 1
26766: PPUSH
26767: LD_VAR 0 1
26771: PPUSH
26772: CALL_OW 12
26776: ARRAY
26777: PPUSH
26778: LD_INT 1
26780: PPUSH
26781: CALL_OW 234
// end ;
26785: PPOPN 1
26787: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
26788: LD_EXP 41
26792: PUSH
26793: LD_EXP 89
26797: AND
26798: IFFALSE 26910
26800: GO 26802
26802: DISABLE
26803: LD_INT 0
26805: PPUSH
26806: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
26807: LD_ADDR_VAR 0 2
26811: PUSH
26812: LD_INT 22
26814: PUSH
26815: LD_OWVAR 2
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PUSH
26824: LD_INT 2
26826: PUSH
26827: LD_INT 30
26829: PUSH
26830: LD_INT 27
26832: PUSH
26833: EMPTY
26834: LIST
26835: LIST
26836: PUSH
26837: LD_INT 30
26839: PUSH
26840: LD_INT 26
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: PUSH
26847: LD_INT 30
26849: PUSH
26850: LD_INT 28
26852: PUSH
26853: EMPTY
26854: LIST
26855: LIST
26856: PUSH
26857: EMPTY
26858: LIST
26859: LIST
26860: LIST
26861: LIST
26862: PUSH
26863: EMPTY
26864: LIST
26865: LIST
26866: PPUSH
26867: CALL_OW 69
26871: ST_TO_ADDR
// if not tmp then
26872: LD_VAR 0 2
26876: NOT
26877: IFFALSE 26881
// exit ;
26879: GO 26910
// for i in tmp do
26881: LD_ADDR_VAR 0 1
26885: PUSH
26886: LD_VAR 0 2
26890: PUSH
26891: FOR_IN
26892: IFFALSE 26908
// SetLives ( i , 1 ) ;
26894: LD_VAR 0 1
26898: PPUSH
26899: LD_INT 1
26901: PPUSH
26902: CALL_OW 234
26906: GO 26891
26908: POP
26909: POP
// end ;
26910: PPOPN 2
26912: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
26913: LD_EXP 41
26917: PUSH
26918: LD_EXP 90
26922: AND
26923: IFFALSE 27210
26925: GO 26927
26927: DISABLE
26928: LD_INT 0
26930: PPUSH
26931: PPUSH
26932: PPUSH
// begin i := rand ( 1 , 7 ) ;
26933: LD_ADDR_VAR 0 1
26937: PUSH
26938: LD_INT 1
26940: PPUSH
26941: LD_INT 7
26943: PPUSH
26944: CALL_OW 12
26948: ST_TO_ADDR
// case i of 1 :
26949: LD_VAR 0 1
26953: PUSH
26954: LD_INT 1
26956: DOUBLE
26957: EQUAL
26958: IFTRUE 26962
26960: GO 26972
26962: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
26963: LD_STRING earthquake(getX(game), 0, 32)
26965: PPUSH
26966: CALL_OW 559
26970: GO 27210
26972: LD_INT 2
26974: DOUBLE
26975: EQUAL
26976: IFTRUE 26980
26978: GO 26994
26980: POP
// begin ToLua ( displayStucuk(); ) ;
26981: LD_STRING displayStucuk();
26983: PPUSH
26984: CALL_OW 559
// ResetFog ;
26988: CALL_OW 335
// end ; 3 :
26992: GO 27210
26994: LD_INT 3
26996: DOUBLE
26997: EQUAL
26998: IFTRUE 27002
27000: GO 27106
27002: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27003: LD_ADDR_VAR 0 2
27007: PUSH
27008: LD_INT 22
27010: PUSH
27011: LD_OWVAR 2
27015: PUSH
27016: EMPTY
27017: LIST
27018: LIST
27019: PUSH
27020: LD_INT 25
27022: PUSH
27023: LD_INT 1
27025: PUSH
27026: EMPTY
27027: LIST
27028: LIST
27029: PUSH
27030: EMPTY
27031: LIST
27032: LIST
27033: PPUSH
27034: CALL_OW 69
27038: ST_TO_ADDR
// if not tmp then
27039: LD_VAR 0 2
27043: NOT
27044: IFFALSE 27048
// exit ;
27046: GO 27210
// un := tmp [ rand ( 1 , tmp ) ] ;
27048: LD_ADDR_VAR 0 3
27052: PUSH
27053: LD_VAR 0 2
27057: PUSH
27058: LD_INT 1
27060: PPUSH
27061: LD_VAR 0 2
27065: PPUSH
27066: CALL_OW 12
27070: ARRAY
27071: ST_TO_ADDR
// if Crawls ( un ) then
27072: LD_VAR 0 3
27076: PPUSH
27077: CALL_OW 318
27081: IFFALSE 27092
// ComWalk ( un ) ;
27083: LD_VAR 0 3
27087: PPUSH
27088: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27092: LD_VAR 0 3
27096: PPUSH
27097: LD_INT 8
27099: PPUSH
27100: CALL_OW 336
// end ; 4 :
27104: GO 27210
27106: LD_INT 4
27108: DOUBLE
27109: EQUAL
27110: IFTRUE 27114
27112: GO 27188
27114: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27115: LD_ADDR_VAR 0 2
27119: PUSH
27120: LD_INT 22
27122: PUSH
27123: LD_OWVAR 2
27127: PUSH
27128: EMPTY
27129: LIST
27130: LIST
27131: PUSH
27132: LD_INT 30
27134: PUSH
27135: LD_INT 29
27137: PUSH
27138: EMPTY
27139: LIST
27140: LIST
27141: PUSH
27142: EMPTY
27143: LIST
27144: LIST
27145: PPUSH
27146: CALL_OW 69
27150: ST_TO_ADDR
// if not tmp then
27151: LD_VAR 0 2
27155: NOT
27156: IFFALSE 27160
// exit ;
27158: GO 27210
// CenterNowOnUnits ( tmp [ 1 ] ) ;
27160: LD_VAR 0 2
27164: PUSH
27165: LD_INT 1
27167: ARRAY
27168: PPUSH
27169: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
27173: LD_VAR 0 2
27177: PUSH
27178: LD_INT 1
27180: ARRAY
27181: PPUSH
27182: CALL_OW 65
// end ; 5 .. 7 :
27186: GO 27210
27188: LD_INT 5
27190: DOUBLE
27191: GREATEREQUAL
27192: IFFALSE 27200
27194: LD_INT 7
27196: DOUBLE
27197: LESSEQUAL
27198: IFTRUE 27202
27200: GO 27209
27202: POP
// StreamSibBomb ; end ;
27203: CALL 23447 0 0
27207: GO 27210
27209: POP
// end ;
27210: PPOPN 3
27212: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
27213: LD_EXP 41
27217: PUSH
27218: LD_EXP 91
27222: AND
27223: IFFALSE 27379
27225: GO 27227
27227: DISABLE
27228: LD_INT 0
27230: PPUSH
27231: PPUSH
27232: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
27233: LD_ADDR_VAR 0 2
27237: PUSH
27238: LD_INT 81
27240: PUSH
27241: LD_OWVAR 2
27245: PUSH
27246: EMPTY
27247: LIST
27248: LIST
27249: PUSH
27250: LD_INT 2
27252: PUSH
27253: LD_INT 21
27255: PUSH
27256: LD_INT 1
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: PUSH
27263: LD_INT 21
27265: PUSH
27266: LD_INT 2
27268: PUSH
27269: EMPTY
27270: LIST
27271: LIST
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: LIST
27277: PUSH
27278: EMPTY
27279: LIST
27280: LIST
27281: PPUSH
27282: CALL_OW 69
27286: ST_TO_ADDR
// if not tmp then
27287: LD_VAR 0 2
27291: NOT
27292: IFFALSE 27296
// exit ;
27294: GO 27379
// p := 0 ;
27296: LD_ADDR_VAR 0 3
27300: PUSH
27301: LD_INT 0
27303: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27304: LD_INT 35
27306: PPUSH
27307: CALL_OW 67
// p := p + 1 ;
27311: LD_ADDR_VAR 0 3
27315: PUSH
27316: LD_VAR 0 3
27320: PUSH
27321: LD_INT 1
27323: PLUS
27324: ST_TO_ADDR
// for i in tmp do
27325: LD_ADDR_VAR 0 1
27329: PUSH
27330: LD_VAR 0 2
27334: PUSH
27335: FOR_IN
27336: IFFALSE 27367
// if GetLives ( i ) < 1000 then
27338: LD_VAR 0 1
27342: PPUSH
27343: CALL_OW 256
27347: PUSH
27348: LD_INT 1000
27350: LESS
27351: IFFALSE 27365
// SetLives ( i , 1000 ) ;
27353: LD_VAR 0 1
27357: PPUSH
27358: LD_INT 1000
27360: PPUSH
27361: CALL_OW 234
27365: GO 27335
27367: POP
27368: POP
// until p > 20 ;
27369: LD_VAR 0 3
27373: PUSH
27374: LD_INT 20
27376: GREATER
27377: IFFALSE 27304
// end ;
27379: PPOPN 3
27381: END
// every 0 0$1 trigger StreamModeActive and sTime do
27382: LD_EXP 41
27386: PUSH
27387: LD_EXP 92
27391: AND
27392: IFFALSE 27427
27394: GO 27396
27396: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
27397: LD_INT 28
27399: PPUSH
27400: LD_OWVAR 2
27404: PPUSH
27405: LD_INT 2
27407: PPUSH
27408: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
27412: LD_INT 30
27414: PPUSH
27415: LD_OWVAR 2
27419: PPUSH
27420: LD_INT 2
27422: PPUSH
27423: CALL_OW 322
// end ;
27427: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
27428: LD_EXP 41
27432: PUSH
27433: LD_EXP 93
27437: AND
27438: IFFALSE 27559
27440: GO 27442
27442: DISABLE
27443: LD_INT 0
27445: PPUSH
27446: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27447: LD_ADDR_VAR 0 2
27451: PUSH
27452: LD_INT 22
27454: PUSH
27455: LD_OWVAR 2
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: PUSH
27464: LD_INT 21
27466: PUSH
27467: LD_INT 1
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: PUSH
27474: LD_INT 3
27476: PUSH
27477: LD_INT 23
27479: PUSH
27480: LD_INT 0
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: PUSH
27487: EMPTY
27488: LIST
27489: LIST
27490: PUSH
27491: EMPTY
27492: LIST
27493: LIST
27494: LIST
27495: PPUSH
27496: CALL_OW 69
27500: ST_TO_ADDR
// if not tmp then
27501: LD_VAR 0 2
27505: NOT
27506: IFFALSE 27510
// exit ;
27508: GO 27559
// for i in tmp do
27510: LD_ADDR_VAR 0 1
27514: PUSH
27515: LD_VAR 0 2
27519: PUSH
27520: FOR_IN
27521: IFFALSE 27557
// begin if Crawls ( i ) then
27523: LD_VAR 0 1
27527: PPUSH
27528: CALL_OW 318
27532: IFFALSE 27543
// ComWalk ( i ) ;
27534: LD_VAR 0 1
27538: PPUSH
27539: CALL_OW 138
// SetClass ( i , 2 ) ;
27543: LD_VAR 0 1
27547: PPUSH
27548: LD_INT 2
27550: PPUSH
27551: CALL_OW 336
// end ;
27555: GO 27520
27557: POP
27558: POP
// end ;
27559: PPOPN 2
27561: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
27562: LD_EXP 41
27566: PUSH
27567: LD_EXP 94
27571: AND
27572: IFFALSE 27860
27574: GO 27576
27576: DISABLE
27577: LD_INT 0
27579: PPUSH
27580: PPUSH
27581: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
27582: LD_OWVAR 2
27586: PPUSH
27587: LD_INT 9
27589: PPUSH
27590: LD_INT 1
27592: PPUSH
27593: LD_INT 1
27595: PPUSH
27596: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
27600: LD_INT 9
27602: PPUSH
27603: LD_OWVAR 2
27607: PPUSH
27608: CALL_OW 343
// uc_side := 9 ;
27612: LD_ADDR_OWVAR 20
27616: PUSH
27617: LD_INT 9
27619: ST_TO_ADDR
// uc_nation := 2 ;
27620: LD_ADDR_OWVAR 21
27624: PUSH
27625: LD_INT 2
27627: ST_TO_ADDR
// hc_name := Dark Warrior ;
27628: LD_ADDR_OWVAR 26
27632: PUSH
27633: LD_STRING Dark Warrior
27635: ST_TO_ADDR
// hc_gallery :=  ;
27636: LD_ADDR_OWVAR 33
27640: PUSH
27641: LD_STRING 
27643: ST_TO_ADDR
// hc_noskilllimit := true ;
27644: LD_ADDR_OWVAR 76
27648: PUSH
27649: LD_INT 1
27651: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
27652: LD_ADDR_OWVAR 31
27656: PUSH
27657: LD_INT 30
27659: PUSH
27660: LD_INT 30
27662: PUSH
27663: LD_INT 30
27665: PUSH
27666: LD_INT 30
27668: PUSH
27669: EMPTY
27670: LIST
27671: LIST
27672: LIST
27673: LIST
27674: ST_TO_ADDR
// un := CreateHuman ;
27675: LD_ADDR_VAR 0 3
27679: PUSH
27680: CALL_OW 44
27684: ST_TO_ADDR
// hc_noskilllimit := false ;
27685: LD_ADDR_OWVAR 76
27689: PUSH
27690: LD_INT 0
27692: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27693: LD_VAR 0 3
27697: PPUSH
27698: LD_INT 1
27700: PPUSH
27701: CALL_OW 51
// ToLua ( playRanger() ) ;
27705: LD_STRING playRanger()
27707: PPUSH
27708: CALL_OW 559
// p := 0 ;
27712: LD_ADDR_VAR 0 2
27716: PUSH
27717: LD_INT 0
27719: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27720: LD_INT 35
27722: PPUSH
27723: CALL_OW 67
// p := p + 1 ;
27727: LD_ADDR_VAR 0 2
27731: PUSH
27732: LD_VAR 0 2
27736: PUSH
27737: LD_INT 1
27739: PLUS
27740: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
27741: LD_VAR 0 3
27745: PPUSH
27746: CALL_OW 256
27750: PUSH
27751: LD_INT 1000
27753: LESS
27754: IFFALSE 27768
// SetLives ( un , 1000 ) ;
27756: LD_VAR 0 3
27760: PPUSH
27761: LD_INT 1000
27763: PPUSH
27764: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
27768: LD_VAR 0 3
27772: PPUSH
27773: LD_INT 81
27775: PUSH
27776: LD_OWVAR 2
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: PUSH
27785: LD_INT 91
27787: PUSH
27788: LD_VAR 0 3
27792: PUSH
27793: LD_INT 30
27795: PUSH
27796: EMPTY
27797: LIST
27798: LIST
27799: LIST
27800: PUSH
27801: EMPTY
27802: LIST
27803: LIST
27804: PPUSH
27805: CALL_OW 69
27809: PPUSH
27810: LD_VAR 0 3
27814: PPUSH
27815: CALL_OW 74
27819: PPUSH
27820: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
27824: LD_VAR 0 2
27828: PUSH
27829: LD_INT 80
27831: GREATER
27832: PUSH
27833: LD_VAR 0 3
27837: PPUSH
27838: CALL_OW 301
27842: OR
27843: IFFALSE 27720
// if un then
27845: LD_VAR 0 3
27849: IFFALSE 27860
// RemoveUnit ( un ) ;
27851: LD_VAR 0 3
27855: PPUSH
27856: CALL_OW 64
// end ;
27860: PPOPN 3
27862: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
27863: LD_EXP 95
27867: IFFALSE 27983
27869: GO 27871
27871: DISABLE
27872: LD_INT 0
27874: PPUSH
27875: PPUSH
27876: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27877: LD_ADDR_VAR 0 2
27881: PUSH
27882: LD_INT 81
27884: PUSH
27885: LD_OWVAR 2
27889: PUSH
27890: EMPTY
27891: LIST
27892: LIST
27893: PUSH
27894: LD_INT 21
27896: PUSH
27897: LD_INT 1
27899: PUSH
27900: EMPTY
27901: LIST
27902: LIST
27903: PUSH
27904: EMPTY
27905: LIST
27906: LIST
27907: PPUSH
27908: CALL_OW 69
27912: ST_TO_ADDR
// ToLua ( playComputer() ) ;
27913: LD_STRING playComputer()
27915: PPUSH
27916: CALL_OW 559
// if not tmp then
27920: LD_VAR 0 2
27924: NOT
27925: IFFALSE 27929
// exit ;
27927: GO 27983
// for i in tmp do
27929: LD_ADDR_VAR 0 1
27933: PUSH
27934: LD_VAR 0 2
27938: PUSH
27939: FOR_IN
27940: IFFALSE 27981
// for j := 1 to 4 do
27942: LD_ADDR_VAR 0 3
27946: PUSH
27947: DOUBLE
27948: LD_INT 1
27950: DEC
27951: ST_TO_ADDR
27952: LD_INT 4
27954: PUSH
27955: FOR_TO
27956: IFFALSE 27977
// SetSkill ( i , j , 10 ) ;
27958: LD_VAR 0 1
27962: PPUSH
27963: LD_VAR 0 3
27967: PPUSH
27968: LD_INT 10
27970: PPUSH
27971: CALL_OW 237
27975: GO 27955
27977: POP
27978: POP
27979: GO 27939
27981: POP
27982: POP
// end ;
27983: PPOPN 3
27985: END
// every 0 0$1 trigger s30 do var i , tmp ;
27986: LD_EXP 96
27990: IFFALSE 28059
27992: GO 27994
27994: DISABLE
27995: LD_INT 0
27997: PPUSH
27998: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27999: LD_ADDR_VAR 0 2
28003: PUSH
28004: LD_INT 22
28006: PUSH
28007: LD_OWVAR 2
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: PPUSH
28016: CALL_OW 69
28020: ST_TO_ADDR
// if not tmp then
28021: LD_VAR 0 2
28025: NOT
28026: IFFALSE 28030
// exit ;
28028: GO 28059
// for i in tmp do
28030: LD_ADDR_VAR 0 1
28034: PUSH
28035: LD_VAR 0 2
28039: PUSH
28040: FOR_IN
28041: IFFALSE 28057
// SetLives ( i , 300 ) ;
28043: LD_VAR 0 1
28047: PPUSH
28048: LD_INT 300
28050: PPUSH
28051: CALL_OW 234
28055: GO 28040
28057: POP
28058: POP
// end ;
28059: PPOPN 2
28061: END
// every 0 0$1 trigger s60 do var i , tmp ;
28062: LD_EXP 97
28066: IFFALSE 28135
28068: GO 28070
28070: DISABLE
28071: LD_INT 0
28073: PPUSH
28074: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28075: LD_ADDR_VAR 0 2
28079: PUSH
28080: LD_INT 22
28082: PUSH
28083: LD_OWVAR 2
28087: PUSH
28088: EMPTY
28089: LIST
28090: LIST
28091: PPUSH
28092: CALL_OW 69
28096: ST_TO_ADDR
// if not tmp then
28097: LD_VAR 0 2
28101: NOT
28102: IFFALSE 28106
// exit ;
28104: GO 28135
// for i in tmp do
28106: LD_ADDR_VAR 0 1
28110: PUSH
28111: LD_VAR 0 2
28115: PUSH
28116: FOR_IN
28117: IFFALSE 28133
// SetLives ( i , 600 ) ;
28119: LD_VAR 0 1
28123: PPUSH
28124: LD_INT 600
28126: PPUSH
28127: CALL_OW 234
28131: GO 28116
28133: POP
28134: POP
// end ;
28135: PPOPN 2
28137: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
28138: LD_INT 0
28140: PPUSH
// case cmd of 301 :
28141: LD_VAR 0 1
28145: PUSH
28146: LD_INT 301
28148: DOUBLE
28149: EQUAL
28150: IFTRUE 28154
28152: GO 28186
28154: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
28155: LD_VAR 0 6
28159: PPUSH
28160: LD_VAR 0 7
28164: PPUSH
28165: LD_VAR 0 8
28169: PPUSH
28170: LD_VAR 0 4
28174: PPUSH
28175: LD_VAR 0 5
28179: PPUSH
28180: CALL 29395 0 5
28184: GO 28307
28186: LD_INT 302
28188: DOUBLE
28189: EQUAL
28190: IFTRUE 28194
28192: GO 28231
28194: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
28195: LD_VAR 0 6
28199: PPUSH
28200: LD_VAR 0 7
28204: PPUSH
28205: LD_VAR 0 8
28209: PPUSH
28210: LD_VAR 0 9
28214: PPUSH
28215: LD_VAR 0 4
28219: PPUSH
28220: LD_VAR 0 5
28224: PPUSH
28225: CALL 29486 0 6
28229: GO 28307
28231: LD_INT 303
28233: DOUBLE
28234: EQUAL
28235: IFTRUE 28239
28237: GO 28276
28239: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
28240: LD_VAR 0 6
28244: PPUSH
28245: LD_VAR 0 7
28249: PPUSH
28250: LD_VAR 0 8
28254: PPUSH
28255: LD_VAR 0 9
28259: PPUSH
28260: LD_VAR 0 4
28264: PPUSH
28265: LD_VAR 0 5
28269: PPUSH
28270: CALL 28312 0 6
28274: GO 28307
28276: LD_INT 304
28278: DOUBLE
28279: EQUAL
28280: IFTRUE 28284
28282: GO 28306
28284: POP
// hHackTeleport ( unit , x , y ) ; end ;
28285: LD_VAR 0 2
28289: PPUSH
28290: LD_VAR 0 4
28294: PPUSH
28295: LD_VAR 0 5
28299: PPUSH
28300: CALL 30079 0 3
28304: GO 28307
28306: POP
// end ;
28307: LD_VAR 0 12
28311: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
28312: LD_INT 0
28314: PPUSH
28315: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
28316: LD_VAR 0 1
28320: PUSH
28321: LD_INT 1
28323: LESS
28324: PUSH
28325: LD_VAR 0 1
28329: PUSH
28330: LD_INT 3
28332: GREATER
28333: OR
28334: PUSH
28335: LD_VAR 0 5
28339: PPUSH
28340: LD_VAR 0 6
28344: PPUSH
28345: CALL_OW 428
28349: OR
28350: IFFALSE 28354
// exit ;
28352: GO 29082
// uc_side := your_side ;
28354: LD_ADDR_OWVAR 20
28358: PUSH
28359: LD_OWVAR 2
28363: ST_TO_ADDR
// uc_nation := nation ;
28364: LD_ADDR_OWVAR 21
28368: PUSH
28369: LD_VAR 0 1
28373: ST_TO_ADDR
// bc_level = 1 ;
28374: LD_ADDR_OWVAR 43
28378: PUSH
28379: LD_INT 1
28381: ST_TO_ADDR
// case btype of 1 :
28382: LD_VAR 0 2
28386: PUSH
28387: LD_INT 1
28389: DOUBLE
28390: EQUAL
28391: IFTRUE 28395
28393: GO 28406
28395: POP
// bc_type := b_depot ; 2 :
28396: LD_ADDR_OWVAR 42
28400: PUSH
28401: LD_INT 0
28403: ST_TO_ADDR
28404: GO 29026
28406: LD_INT 2
28408: DOUBLE
28409: EQUAL
28410: IFTRUE 28414
28412: GO 28425
28414: POP
// bc_type := b_warehouse ; 3 :
28415: LD_ADDR_OWVAR 42
28419: PUSH
28420: LD_INT 1
28422: ST_TO_ADDR
28423: GO 29026
28425: LD_INT 3
28427: DOUBLE
28428: EQUAL
28429: IFTRUE 28433
28431: GO 28444
28433: POP
// bc_type := b_lab ; 4 .. 9 :
28434: LD_ADDR_OWVAR 42
28438: PUSH
28439: LD_INT 6
28441: ST_TO_ADDR
28442: GO 29026
28444: LD_INT 4
28446: DOUBLE
28447: GREATEREQUAL
28448: IFFALSE 28456
28450: LD_INT 9
28452: DOUBLE
28453: LESSEQUAL
28454: IFTRUE 28458
28456: GO 28518
28458: POP
// begin bc_type := b_lab_half ;
28459: LD_ADDR_OWVAR 42
28463: PUSH
28464: LD_INT 7
28466: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
28467: LD_ADDR_OWVAR 44
28471: PUSH
28472: LD_INT 10
28474: PUSH
28475: LD_INT 11
28477: PUSH
28478: LD_INT 12
28480: PUSH
28481: LD_INT 15
28483: PUSH
28484: LD_INT 14
28486: PUSH
28487: LD_INT 13
28489: PUSH
28490: EMPTY
28491: LIST
28492: LIST
28493: LIST
28494: LIST
28495: LIST
28496: LIST
28497: PUSH
28498: LD_VAR 0 2
28502: PUSH
28503: LD_INT 3
28505: MINUS
28506: ARRAY
28507: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
28508: LD_ADDR_OWVAR 45
28512: PUSH
28513: LD_INT 9
28515: ST_TO_ADDR
// end ; 10 .. 13 :
28516: GO 29026
28518: LD_INT 10
28520: DOUBLE
28521: GREATEREQUAL
28522: IFFALSE 28530
28524: LD_INT 13
28526: DOUBLE
28527: LESSEQUAL
28528: IFTRUE 28532
28530: GO 28609
28532: POP
// begin bc_type := b_lab_full ;
28533: LD_ADDR_OWVAR 42
28537: PUSH
28538: LD_INT 8
28540: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
28541: LD_ADDR_OWVAR 44
28545: PUSH
28546: LD_INT 10
28548: PUSH
28549: LD_INT 12
28551: PUSH
28552: LD_INT 14
28554: PUSH
28555: LD_INT 13
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: LIST
28562: LIST
28563: PUSH
28564: LD_VAR 0 2
28568: PUSH
28569: LD_INT 9
28571: MINUS
28572: ARRAY
28573: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
28574: LD_ADDR_OWVAR 45
28578: PUSH
28579: LD_INT 11
28581: PUSH
28582: LD_INT 15
28584: PUSH
28585: LD_INT 12
28587: PUSH
28588: LD_INT 15
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: LIST
28595: LIST
28596: PUSH
28597: LD_VAR 0 2
28601: PUSH
28602: LD_INT 9
28604: MINUS
28605: ARRAY
28606: ST_TO_ADDR
// end ; 14 :
28607: GO 29026
28609: LD_INT 14
28611: DOUBLE
28612: EQUAL
28613: IFTRUE 28617
28615: GO 28628
28617: POP
// bc_type := b_workshop ; 15 :
28618: LD_ADDR_OWVAR 42
28622: PUSH
28623: LD_INT 2
28625: ST_TO_ADDR
28626: GO 29026
28628: LD_INT 15
28630: DOUBLE
28631: EQUAL
28632: IFTRUE 28636
28634: GO 28647
28636: POP
// bc_type := b_factory ; 16 :
28637: LD_ADDR_OWVAR 42
28641: PUSH
28642: LD_INT 3
28644: ST_TO_ADDR
28645: GO 29026
28647: LD_INT 16
28649: DOUBLE
28650: EQUAL
28651: IFTRUE 28655
28653: GO 28666
28655: POP
// bc_type := b_ext_gun ; 17 :
28656: LD_ADDR_OWVAR 42
28660: PUSH
28661: LD_INT 17
28663: ST_TO_ADDR
28664: GO 29026
28666: LD_INT 17
28668: DOUBLE
28669: EQUAL
28670: IFTRUE 28674
28672: GO 28702
28674: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
28675: LD_ADDR_OWVAR 42
28679: PUSH
28680: LD_INT 19
28682: PUSH
28683: LD_INT 23
28685: PUSH
28686: LD_INT 19
28688: PUSH
28689: EMPTY
28690: LIST
28691: LIST
28692: LIST
28693: PUSH
28694: LD_VAR 0 1
28698: ARRAY
28699: ST_TO_ADDR
28700: GO 29026
28702: LD_INT 18
28704: DOUBLE
28705: EQUAL
28706: IFTRUE 28710
28708: GO 28721
28710: POP
// bc_type := b_ext_radar ; 19 :
28711: LD_ADDR_OWVAR 42
28715: PUSH
28716: LD_INT 20
28718: ST_TO_ADDR
28719: GO 29026
28721: LD_INT 19
28723: DOUBLE
28724: EQUAL
28725: IFTRUE 28729
28727: GO 28740
28729: POP
// bc_type := b_ext_radio ; 20 :
28730: LD_ADDR_OWVAR 42
28734: PUSH
28735: LD_INT 22
28737: ST_TO_ADDR
28738: GO 29026
28740: LD_INT 20
28742: DOUBLE
28743: EQUAL
28744: IFTRUE 28748
28746: GO 28759
28748: POP
// bc_type := b_ext_siberium ; 21 :
28749: LD_ADDR_OWVAR 42
28753: PUSH
28754: LD_INT 21
28756: ST_TO_ADDR
28757: GO 29026
28759: LD_INT 21
28761: DOUBLE
28762: EQUAL
28763: IFTRUE 28767
28765: GO 28778
28767: POP
// bc_type := b_ext_computer ; 22 :
28768: LD_ADDR_OWVAR 42
28772: PUSH
28773: LD_INT 24
28775: ST_TO_ADDR
28776: GO 29026
28778: LD_INT 22
28780: DOUBLE
28781: EQUAL
28782: IFTRUE 28786
28784: GO 28797
28786: POP
// bc_type := b_ext_track ; 23 :
28787: LD_ADDR_OWVAR 42
28791: PUSH
28792: LD_INT 16
28794: ST_TO_ADDR
28795: GO 29026
28797: LD_INT 23
28799: DOUBLE
28800: EQUAL
28801: IFTRUE 28805
28803: GO 28816
28805: POP
// bc_type := b_ext_laser ; 24 :
28806: LD_ADDR_OWVAR 42
28810: PUSH
28811: LD_INT 25
28813: ST_TO_ADDR
28814: GO 29026
28816: LD_INT 24
28818: DOUBLE
28819: EQUAL
28820: IFTRUE 28824
28822: GO 28835
28824: POP
// bc_type := b_control_tower ; 25 :
28825: LD_ADDR_OWVAR 42
28829: PUSH
28830: LD_INT 36
28832: ST_TO_ADDR
28833: GO 29026
28835: LD_INT 25
28837: DOUBLE
28838: EQUAL
28839: IFTRUE 28843
28841: GO 28854
28843: POP
// bc_type := b_breastwork ; 26 :
28844: LD_ADDR_OWVAR 42
28848: PUSH
28849: LD_INT 31
28851: ST_TO_ADDR
28852: GO 29026
28854: LD_INT 26
28856: DOUBLE
28857: EQUAL
28858: IFTRUE 28862
28860: GO 28873
28862: POP
// bc_type := b_bunker ; 27 :
28863: LD_ADDR_OWVAR 42
28867: PUSH
28868: LD_INT 32
28870: ST_TO_ADDR
28871: GO 29026
28873: LD_INT 27
28875: DOUBLE
28876: EQUAL
28877: IFTRUE 28881
28879: GO 28892
28881: POP
// bc_type := b_turret ; 28 :
28882: LD_ADDR_OWVAR 42
28886: PUSH
28887: LD_INT 33
28889: ST_TO_ADDR
28890: GO 29026
28892: LD_INT 28
28894: DOUBLE
28895: EQUAL
28896: IFTRUE 28900
28898: GO 28911
28900: POP
// bc_type := b_armoury ; 29 :
28901: LD_ADDR_OWVAR 42
28905: PUSH
28906: LD_INT 4
28908: ST_TO_ADDR
28909: GO 29026
28911: LD_INT 29
28913: DOUBLE
28914: EQUAL
28915: IFTRUE 28919
28917: GO 28930
28919: POP
// bc_type := b_barracks ; 30 :
28920: LD_ADDR_OWVAR 42
28924: PUSH
28925: LD_INT 5
28927: ST_TO_ADDR
28928: GO 29026
28930: LD_INT 30
28932: DOUBLE
28933: EQUAL
28934: IFTRUE 28938
28936: GO 28949
28938: POP
// bc_type := b_solar_power ; 31 :
28939: LD_ADDR_OWVAR 42
28943: PUSH
28944: LD_INT 27
28946: ST_TO_ADDR
28947: GO 29026
28949: LD_INT 31
28951: DOUBLE
28952: EQUAL
28953: IFTRUE 28957
28955: GO 28968
28957: POP
// bc_type := b_oil_power ; 32 :
28958: LD_ADDR_OWVAR 42
28962: PUSH
28963: LD_INT 26
28965: ST_TO_ADDR
28966: GO 29026
28968: LD_INT 32
28970: DOUBLE
28971: EQUAL
28972: IFTRUE 28976
28974: GO 28987
28976: POP
// bc_type := b_siberite_power ; 33 :
28977: LD_ADDR_OWVAR 42
28981: PUSH
28982: LD_INT 28
28984: ST_TO_ADDR
28985: GO 29026
28987: LD_INT 33
28989: DOUBLE
28990: EQUAL
28991: IFTRUE 28995
28993: GO 29006
28995: POP
// bc_type := b_oil_mine ; 34 :
28996: LD_ADDR_OWVAR 42
29000: PUSH
29001: LD_INT 29
29003: ST_TO_ADDR
29004: GO 29026
29006: LD_INT 34
29008: DOUBLE
29009: EQUAL
29010: IFTRUE 29014
29012: GO 29025
29014: POP
// bc_type := b_siberite_mine ; end ;
29015: LD_ADDR_OWVAR 42
29019: PUSH
29020: LD_INT 30
29022: ST_TO_ADDR
29023: GO 29026
29025: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
29026: LD_ADDR_VAR 0 8
29030: PUSH
29031: LD_VAR 0 5
29035: PPUSH
29036: LD_VAR 0 6
29040: PPUSH
29041: LD_VAR 0 3
29045: PPUSH
29046: CALL_OW 47
29050: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
29051: LD_OWVAR 42
29055: PUSH
29056: LD_INT 32
29058: PUSH
29059: LD_INT 33
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: IN
29066: IFFALSE 29082
// PlaceWeaponTurret ( b , weapon ) ;
29068: LD_VAR 0 8
29072: PPUSH
29073: LD_VAR 0 4
29077: PPUSH
29078: CALL_OW 431
// end ;
29082: LD_VAR 0 7
29086: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
29087: LD_INT 0
29089: PPUSH
29090: PPUSH
29091: PPUSH
29092: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29093: LD_ADDR_VAR 0 4
29097: PUSH
29098: LD_INT 22
29100: PUSH
29101: LD_OWVAR 2
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: PUSH
29110: LD_INT 2
29112: PUSH
29113: LD_INT 30
29115: PUSH
29116: LD_INT 0
29118: PUSH
29119: EMPTY
29120: LIST
29121: LIST
29122: PUSH
29123: LD_INT 30
29125: PUSH
29126: LD_INT 1
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: PUSH
29133: EMPTY
29134: LIST
29135: LIST
29136: LIST
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: PPUSH
29142: CALL_OW 69
29146: ST_TO_ADDR
// if not tmp then
29147: LD_VAR 0 4
29151: NOT
29152: IFFALSE 29156
// exit ;
29154: GO 29215
// for i in tmp do
29156: LD_ADDR_VAR 0 2
29160: PUSH
29161: LD_VAR 0 4
29165: PUSH
29166: FOR_IN
29167: IFFALSE 29213
// for j = 1 to 3 do
29169: LD_ADDR_VAR 0 3
29173: PUSH
29174: DOUBLE
29175: LD_INT 1
29177: DEC
29178: ST_TO_ADDR
29179: LD_INT 3
29181: PUSH
29182: FOR_TO
29183: IFFALSE 29209
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
29185: LD_VAR 0 2
29189: PPUSH
29190: CALL_OW 274
29194: PPUSH
29195: LD_VAR 0 3
29199: PPUSH
29200: LD_INT 99999
29202: PPUSH
29203: CALL_OW 277
29207: GO 29182
29209: POP
29210: POP
29211: GO 29166
29213: POP
29214: POP
// end ;
29215: LD_VAR 0 1
29219: RET
// export function hHackSetLevel10 ; var i , j ; begin
29220: LD_INT 0
29222: PPUSH
29223: PPUSH
29224: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29225: LD_ADDR_VAR 0 2
29229: PUSH
29230: LD_INT 21
29232: PUSH
29233: LD_INT 1
29235: PUSH
29236: EMPTY
29237: LIST
29238: LIST
29239: PPUSH
29240: CALL_OW 69
29244: PUSH
29245: FOR_IN
29246: IFFALSE 29298
// if IsSelected ( i ) then
29248: LD_VAR 0 2
29252: PPUSH
29253: CALL_OW 306
29257: IFFALSE 29296
// begin for j := 1 to 4 do
29259: LD_ADDR_VAR 0 3
29263: PUSH
29264: DOUBLE
29265: LD_INT 1
29267: DEC
29268: ST_TO_ADDR
29269: LD_INT 4
29271: PUSH
29272: FOR_TO
29273: IFFALSE 29294
// SetSkill ( i , j , 10 ) ;
29275: LD_VAR 0 2
29279: PPUSH
29280: LD_VAR 0 3
29284: PPUSH
29285: LD_INT 10
29287: PPUSH
29288: CALL_OW 237
29292: GO 29272
29294: POP
29295: POP
// end ;
29296: GO 29245
29298: POP
29299: POP
// end ;
29300: LD_VAR 0 1
29304: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
29305: LD_INT 0
29307: PPUSH
29308: PPUSH
29309: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
29310: LD_ADDR_VAR 0 2
29314: PUSH
29315: LD_INT 22
29317: PUSH
29318: LD_OWVAR 2
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: PUSH
29327: LD_INT 21
29329: PUSH
29330: LD_INT 1
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: PPUSH
29341: CALL_OW 69
29345: PUSH
29346: FOR_IN
29347: IFFALSE 29388
// begin for j := 1 to 4 do
29349: LD_ADDR_VAR 0 3
29353: PUSH
29354: DOUBLE
29355: LD_INT 1
29357: DEC
29358: ST_TO_ADDR
29359: LD_INT 4
29361: PUSH
29362: FOR_TO
29363: IFFALSE 29384
// SetSkill ( i , j , 10 ) ;
29365: LD_VAR 0 2
29369: PPUSH
29370: LD_VAR 0 3
29374: PPUSH
29375: LD_INT 10
29377: PPUSH
29378: CALL_OW 237
29382: GO 29362
29384: POP
29385: POP
// end ;
29386: GO 29346
29388: POP
29389: POP
// end ;
29390: LD_VAR 0 1
29394: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
29395: LD_INT 0
29397: PPUSH
// uc_side := your_side ;
29398: LD_ADDR_OWVAR 20
29402: PUSH
29403: LD_OWVAR 2
29407: ST_TO_ADDR
// uc_nation := nation ;
29408: LD_ADDR_OWVAR 21
29412: PUSH
29413: LD_VAR 0 1
29417: ST_TO_ADDR
// InitHc ;
29418: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
29422: LD_INT 0
29424: PPUSH
29425: LD_VAR 0 2
29429: PPUSH
29430: LD_VAR 0 3
29434: PPUSH
29435: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
29439: LD_VAR 0 4
29443: PPUSH
29444: LD_VAR 0 5
29448: PPUSH
29449: CALL_OW 428
29453: PUSH
29454: LD_INT 0
29456: EQUAL
29457: IFFALSE 29481
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
29459: CALL_OW 44
29463: PPUSH
29464: LD_VAR 0 4
29468: PPUSH
29469: LD_VAR 0 5
29473: PPUSH
29474: LD_INT 1
29476: PPUSH
29477: CALL_OW 48
// end ;
29481: LD_VAR 0 6
29485: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
29486: LD_INT 0
29488: PPUSH
29489: PPUSH
// uc_side := your_side ;
29490: LD_ADDR_OWVAR 20
29494: PUSH
29495: LD_OWVAR 2
29499: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
29500: LD_VAR 0 1
29504: PUSH
29505: LD_INT 1
29507: PUSH
29508: LD_INT 2
29510: PUSH
29511: LD_INT 3
29513: PUSH
29514: LD_INT 4
29516: PUSH
29517: LD_INT 5
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: LIST
29524: LIST
29525: LIST
29526: IN
29527: IFFALSE 29539
// uc_nation := nation_american else
29529: LD_ADDR_OWVAR 21
29533: PUSH
29534: LD_INT 1
29536: ST_TO_ADDR
29537: GO 29582
// if chassis in [ 11 , 12 , 13 , 14 ] then
29539: LD_VAR 0 1
29543: PUSH
29544: LD_INT 11
29546: PUSH
29547: LD_INT 12
29549: PUSH
29550: LD_INT 13
29552: PUSH
29553: LD_INT 14
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: LIST
29560: LIST
29561: IN
29562: IFFALSE 29574
// uc_nation := nation_arabian else
29564: LD_ADDR_OWVAR 21
29568: PUSH
29569: LD_INT 2
29571: ST_TO_ADDR
29572: GO 29582
// uc_nation := nation_russian ;
29574: LD_ADDR_OWVAR 21
29578: PUSH
29579: LD_INT 3
29581: ST_TO_ADDR
// vc_chassis := chassis ;
29582: LD_ADDR_OWVAR 37
29586: PUSH
29587: LD_VAR 0 1
29591: ST_TO_ADDR
// vc_engine := engine ;
29592: LD_ADDR_OWVAR 39
29596: PUSH
29597: LD_VAR 0 2
29601: ST_TO_ADDR
// vc_control := control ;
29602: LD_ADDR_OWVAR 38
29606: PUSH
29607: LD_VAR 0 3
29611: ST_TO_ADDR
// vc_weapon := weapon ;
29612: LD_ADDR_OWVAR 40
29616: PUSH
29617: LD_VAR 0 4
29621: ST_TO_ADDR
// un := CreateVehicle ;
29622: LD_ADDR_VAR 0 8
29626: PUSH
29627: CALL_OW 45
29631: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
29632: LD_VAR 0 8
29636: PPUSH
29637: LD_INT 0
29639: PPUSH
29640: LD_INT 5
29642: PPUSH
29643: CALL_OW 12
29647: PPUSH
29648: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
29652: LD_VAR 0 8
29656: PPUSH
29657: LD_VAR 0 5
29661: PPUSH
29662: LD_VAR 0 6
29666: PPUSH
29667: LD_INT 1
29669: PPUSH
29670: CALL_OW 48
// end ;
29674: LD_VAR 0 7
29678: RET
// export hInvincible ; every 1 do
29679: GO 29681
29681: DISABLE
// hInvincible := [ ] ;
29682: LD_ADDR_EXP 98
29686: PUSH
29687: EMPTY
29688: ST_TO_ADDR
29689: END
// every 10 do var i ;
29690: GO 29692
29692: DISABLE
29693: LD_INT 0
29695: PPUSH
// begin enable ;
29696: ENABLE
// if not hInvincible then
29697: LD_EXP 98
29701: NOT
29702: IFFALSE 29706
// exit ;
29704: GO 29750
// for i in hInvincible do
29706: LD_ADDR_VAR 0 1
29710: PUSH
29711: LD_EXP 98
29715: PUSH
29716: FOR_IN
29717: IFFALSE 29748
// if GetLives ( i ) < 1000 then
29719: LD_VAR 0 1
29723: PPUSH
29724: CALL_OW 256
29728: PUSH
29729: LD_INT 1000
29731: LESS
29732: IFFALSE 29746
// SetLives ( i , 1000 ) ;
29734: LD_VAR 0 1
29738: PPUSH
29739: LD_INT 1000
29741: PPUSH
29742: CALL_OW 234
29746: GO 29716
29748: POP
29749: POP
// end ;
29750: PPOPN 1
29752: END
// export function hHackInvincible ; var i ; begin
29753: LD_INT 0
29755: PPUSH
29756: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
29757: LD_ADDR_VAR 0 2
29761: PUSH
29762: LD_INT 2
29764: PUSH
29765: LD_INT 21
29767: PUSH
29768: LD_INT 1
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: PUSH
29775: LD_INT 21
29777: PUSH
29778: LD_INT 2
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: PUSH
29785: EMPTY
29786: LIST
29787: LIST
29788: LIST
29789: PPUSH
29790: CALL_OW 69
29794: PUSH
29795: FOR_IN
29796: IFFALSE 29857
// if IsSelected ( i ) then
29798: LD_VAR 0 2
29802: PPUSH
29803: CALL_OW 306
29807: IFFALSE 29855
// begin if i in hInvincible then
29809: LD_VAR 0 2
29813: PUSH
29814: LD_EXP 98
29818: IN
29819: IFFALSE 29839
// hInvincible := hInvincible diff i else
29821: LD_ADDR_EXP 98
29825: PUSH
29826: LD_EXP 98
29830: PUSH
29831: LD_VAR 0 2
29835: DIFF
29836: ST_TO_ADDR
29837: GO 29855
// hInvincible := hInvincible union i ;
29839: LD_ADDR_EXP 98
29843: PUSH
29844: LD_EXP 98
29848: PUSH
29849: LD_VAR 0 2
29853: UNION
29854: ST_TO_ADDR
// end ;
29855: GO 29795
29857: POP
29858: POP
// end ;
29859: LD_VAR 0 1
29863: RET
// export function hHackInvisible ; var i , j ; begin
29864: LD_INT 0
29866: PPUSH
29867: PPUSH
29868: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29869: LD_ADDR_VAR 0 2
29873: PUSH
29874: LD_INT 21
29876: PUSH
29877: LD_INT 1
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PPUSH
29884: CALL_OW 69
29888: PUSH
29889: FOR_IN
29890: IFFALSE 29914
// if IsSelected ( i ) then
29892: LD_VAR 0 2
29896: PPUSH
29897: CALL_OW 306
29901: IFFALSE 29912
// ComForceInvisible ( i ) ;
29903: LD_VAR 0 2
29907: PPUSH
29908: CALL_OW 496
29912: GO 29889
29914: POP
29915: POP
// end ;
29916: LD_VAR 0 1
29920: RET
// export function hHackChangeYourSide ; begin
29921: LD_INT 0
29923: PPUSH
// if your_side = 8 then
29924: LD_OWVAR 2
29928: PUSH
29929: LD_INT 8
29931: EQUAL
29932: IFFALSE 29944
// your_side := 0 else
29934: LD_ADDR_OWVAR 2
29938: PUSH
29939: LD_INT 0
29941: ST_TO_ADDR
29942: GO 29958
// your_side := your_side + 1 ;
29944: LD_ADDR_OWVAR 2
29948: PUSH
29949: LD_OWVAR 2
29953: PUSH
29954: LD_INT 1
29956: PLUS
29957: ST_TO_ADDR
// end ;
29958: LD_VAR 0 1
29962: RET
// export function hHackChangeUnitSide ; var i , j ; begin
29963: LD_INT 0
29965: PPUSH
29966: PPUSH
29967: PPUSH
// for i in all_units do
29968: LD_ADDR_VAR 0 2
29972: PUSH
29973: LD_OWVAR 3
29977: PUSH
29978: FOR_IN
29979: IFFALSE 30057
// if IsSelected ( i ) then
29981: LD_VAR 0 2
29985: PPUSH
29986: CALL_OW 306
29990: IFFALSE 30055
// begin j := GetSide ( i ) ;
29992: LD_ADDR_VAR 0 3
29996: PUSH
29997: LD_VAR 0 2
30001: PPUSH
30002: CALL_OW 255
30006: ST_TO_ADDR
// if j = 8 then
30007: LD_VAR 0 3
30011: PUSH
30012: LD_INT 8
30014: EQUAL
30015: IFFALSE 30027
// j := 0 else
30017: LD_ADDR_VAR 0 3
30021: PUSH
30022: LD_INT 0
30024: ST_TO_ADDR
30025: GO 30041
// j := j + 1 ;
30027: LD_ADDR_VAR 0 3
30031: PUSH
30032: LD_VAR 0 3
30036: PUSH
30037: LD_INT 1
30039: PLUS
30040: ST_TO_ADDR
// SetSide ( i , j ) ;
30041: LD_VAR 0 2
30045: PPUSH
30046: LD_VAR 0 3
30050: PPUSH
30051: CALL_OW 235
// end ;
30055: GO 29978
30057: POP
30058: POP
// end ;
30059: LD_VAR 0 1
30063: RET
// export function hHackFog ; begin
30064: LD_INT 0
30066: PPUSH
// FogOff ( true ) ;
30067: LD_INT 1
30069: PPUSH
30070: CALL_OW 344
// end ;
30074: LD_VAR 0 1
30078: RET
// export function hHackTeleport ( unit , x , y ) ; begin
30079: LD_INT 0
30081: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
30082: LD_VAR 0 1
30086: PPUSH
30087: LD_VAR 0 2
30091: PPUSH
30092: LD_VAR 0 3
30096: PPUSH
30097: LD_INT 1
30099: PPUSH
30100: LD_INT 1
30102: PPUSH
30103: CALL_OW 483
// CenterOnXY ( x , y ) ;
30107: LD_VAR 0 2
30111: PPUSH
30112: LD_VAR 0 3
30116: PPUSH
30117: CALL_OW 84
// end ;
30121: LD_VAR 0 4
30125: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
30126: LD_INT 0
30128: PPUSH
30129: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
30130: LD_VAR 0 1
30134: NOT
30135: PUSH
30136: LD_VAR 0 2
30140: PPUSH
30141: LD_VAR 0 3
30145: PPUSH
30146: CALL_OW 488
30150: NOT
30151: OR
30152: PUSH
30153: LD_VAR 0 1
30157: PPUSH
30158: CALL_OW 266
30162: PUSH
30163: LD_INT 3
30165: NONEQUAL
30166: PUSH
30167: LD_VAR 0 1
30171: PPUSH
30172: CALL_OW 247
30176: PUSH
30177: LD_INT 1
30179: EQUAL
30180: NOT
30181: AND
30182: OR
30183: IFFALSE 30187
// exit ;
30185: GO 30336
// if GetType ( factory ) = unit_human then
30187: LD_VAR 0 1
30191: PPUSH
30192: CALL_OW 247
30196: PUSH
30197: LD_INT 1
30199: EQUAL
30200: IFFALSE 30217
// factory := IsInUnit ( factory ) ;
30202: LD_ADDR_VAR 0 1
30206: PUSH
30207: LD_VAR 0 1
30211: PPUSH
30212: CALL_OW 310
30216: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
30217: LD_VAR 0 1
30221: PPUSH
30222: CALL_OW 266
30226: PUSH
30227: LD_INT 3
30229: NONEQUAL
30230: IFFALSE 30234
// exit ;
30232: GO 30336
// if HexInfo ( x , y ) = factory then
30234: LD_VAR 0 2
30238: PPUSH
30239: LD_VAR 0 3
30243: PPUSH
30244: CALL_OW 428
30248: PUSH
30249: LD_VAR 0 1
30253: EQUAL
30254: IFFALSE 30281
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
30256: LD_ADDR_EXP 99
30260: PUSH
30261: LD_EXP 99
30265: PPUSH
30266: LD_VAR 0 1
30270: PPUSH
30271: LD_INT 0
30273: PPUSH
30274: CALL_OW 1
30278: ST_TO_ADDR
30279: GO 30332
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
30281: LD_ADDR_EXP 99
30285: PUSH
30286: LD_EXP 99
30290: PPUSH
30291: LD_VAR 0 1
30295: PPUSH
30296: LD_VAR 0 1
30300: PPUSH
30301: CALL_OW 255
30305: PUSH
30306: LD_VAR 0 1
30310: PUSH
30311: LD_VAR 0 2
30315: PUSH
30316: LD_VAR 0 3
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: PPUSH
30327: CALL_OW 1
30331: ST_TO_ADDR
// UpdateFactoryWaypoints ;
30332: CALL 30341 0 0
// end ;
30336: LD_VAR 0 4
30340: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
30341: LD_INT 0
30343: PPUSH
30344: PPUSH
30345: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
30346: LD_STRING resetFactoryWaypoint();
30348: PPUSH
30349: CALL_OW 559
// if factoryWaypoints then
30353: LD_EXP 99
30357: IFFALSE 30483
// begin list := PrepareArray ( factoryWaypoints ) ;
30359: LD_ADDR_VAR 0 3
30363: PUSH
30364: LD_EXP 99
30368: PPUSH
30369: CALL 77791 0 1
30373: ST_TO_ADDR
// for i := 1 to list do
30374: LD_ADDR_VAR 0 2
30378: PUSH
30379: DOUBLE
30380: LD_INT 1
30382: DEC
30383: ST_TO_ADDR
30384: LD_VAR 0 3
30388: PUSH
30389: FOR_TO
30390: IFFALSE 30481
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
30392: LD_STRING setFactoryWaypointXY(
30394: PUSH
30395: LD_VAR 0 3
30399: PUSH
30400: LD_VAR 0 2
30404: ARRAY
30405: PUSH
30406: LD_INT 1
30408: ARRAY
30409: STR
30410: PUSH
30411: LD_STRING ,
30413: STR
30414: PUSH
30415: LD_VAR 0 3
30419: PUSH
30420: LD_VAR 0 2
30424: ARRAY
30425: PUSH
30426: LD_INT 2
30428: ARRAY
30429: STR
30430: PUSH
30431: LD_STRING ,
30433: STR
30434: PUSH
30435: LD_VAR 0 3
30439: PUSH
30440: LD_VAR 0 2
30444: ARRAY
30445: PUSH
30446: LD_INT 3
30448: ARRAY
30449: STR
30450: PUSH
30451: LD_STRING ,
30453: STR
30454: PUSH
30455: LD_VAR 0 3
30459: PUSH
30460: LD_VAR 0 2
30464: ARRAY
30465: PUSH
30466: LD_INT 4
30468: ARRAY
30469: STR
30470: PUSH
30471: LD_STRING )
30473: STR
30474: PPUSH
30475: CALL_OW 559
30479: GO 30389
30481: POP
30482: POP
// end ; end ;
30483: LD_VAR 0 1
30487: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
30488: LD_INT 0
30490: PPUSH
// if HexInfo ( x , y ) = warehouse then
30491: LD_VAR 0 2
30495: PPUSH
30496: LD_VAR 0 3
30500: PPUSH
30501: CALL_OW 428
30505: PUSH
30506: LD_VAR 0 1
30510: EQUAL
30511: IFFALSE 30538
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
30513: LD_ADDR_EXP 100
30517: PUSH
30518: LD_EXP 100
30522: PPUSH
30523: LD_VAR 0 1
30527: PPUSH
30528: LD_INT 0
30530: PPUSH
30531: CALL_OW 1
30535: ST_TO_ADDR
30536: GO 30589
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
30538: LD_ADDR_EXP 100
30542: PUSH
30543: LD_EXP 100
30547: PPUSH
30548: LD_VAR 0 1
30552: PPUSH
30553: LD_VAR 0 1
30557: PPUSH
30558: CALL_OW 255
30562: PUSH
30563: LD_VAR 0 1
30567: PUSH
30568: LD_VAR 0 2
30572: PUSH
30573: LD_VAR 0 3
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: LIST
30582: LIST
30583: PPUSH
30584: CALL_OW 1
30588: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
30589: CALL 30598 0 0
// end ;
30593: LD_VAR 0 4
30597: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
30598: LD_INT 0
30600: PPUSH
30601: PPUSH
30602: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
30603: LD_STRING resetWarehouseGatheringPoints();
30605: PPUSH
30606: CALL_OW 559
// if warehouseGatheringPoints then
30610: LD_EXP 100
30614: IFFALSE 30740
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
30616: LD_ADDR_VAR 0 3
30620: PUSH
30621: LD_EXP 100
30625: PPUSH
30626: CALL 77791 0 1
30630: ST_TO_ADDR
// for i := 1 to list do
30631: LD_ADDR_VAR 0 2
30635: PUSH
30636: DOUBLE
30637: LD_INT 1
30639: DEC
30640: ST_TO_ADDR
30641: LD_VAR 0 3
30645: PUSH
30646: FOR_TO
30647: IFFALSE 30738
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
30649: LD_STRING setWarehouseGatheringPointXY(
30651: PUSH
30652: LD_VAR 0 3
30656: PUSH
30657: LD_VAR 0 2
30661: ARRAY
30662: PUSH
30663: LD_INT 1
30665: ARRAY
30666: STR
30667: PUSH
30668: LD_STRING ,
30670: STR
30671: PUSH
30672: LD_VAR 0 3
30676: PUSH
30677: LD_VAR 0 2
30681: ARRAY
30682: PUSH
30683: LD_INT 2
30685: ARRAY
30686: STR
30687: PUSH
30688: LD_STRING ,
30690: STR
30691: PUSH
30692: LD_VAR 0 3
30696: PUSH
30697: LD_VAR 0 2
30701: ARRAY
30702: PUSH
30703: LD_INT 3
30705: ARRAY
30706: STR
30707: PUSH
30708: LD_STRING ,
30710: STR
30711: PUSH
30712: LD_VAR 0 3
30716: PUSH
30717: LD_VAR 0 2
30721: ARRAY
30722: PUSH
30723: LD_INT 4
30725: ARRAY
30726: STR
30727: PUSH
30728: LD_STRING )
30730: STR
30731: PPUSH
30732: CALL_OW 559
30736: GO 30646
30738: POP
30739: POP
// end ; end ;
30740: LD_VAR 0 1
30744: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
30745: LD_EXP 100
30749: IFFALSE 31434
30751: GO 30753
30753: DISABLE
30754: LD_INT 0
30756: PPUSH
30757: PPUSH
30758: PPUSH
30759: PPUSH
30760: PPUSH
30761: PPUSH
30762: PPUSH
30763: PPUSH
30764: PPUSH
// begin enable ;
30765: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
30766: LD_ADDR_VAR 0 3
30770: PUSH
30771: LD_EXP 100
30775: PPUSH
30776: CALL 77791 0 1
30780: ST_TO_ADDR
// if not list then
30781: LD_VAR 0 3
30785: NOT
30786: IFFALSE 30790
// exit ;
30788: GO 31434
// for i := 1 to list do
30790: LD_ADDR_VAR 0 1
30794: PUSH
30795: DOUBLE
30796: LD_INT 1
30798: DEC
30799: ST_TO_ADDR
30800: LD_VAR 0 3
30804: PUSH
30805: FOR_TO
30806: IFFALSE 31432
// begin depot := list [ i ] [ 2 ] ;
30808: LD_ADDR_VAR 0 8
30812: PUSH
30813: LD_VAR 0 3
30817: PUSH
30818: LD_VAR 0 1
30822: ARRAY
30823: PUSH
30824: LD_INT 2
30826: ARRAY
30827: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
30828: LD_ADDR_VAR 0 5
30832: PUSH
30833: LD_VAR 0 3
30837: PUSH
30838: LD_VAR 0 1
30842: ARRAY
30843: PUSH
30844: LD_INT 1
30846: ARRAY
30847: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
30848: LD_VAR 0 8
30852: PPUSH
30853: CALL_OW 301
30857: PUSH
30858: LD_VAR 0 5
30862: PUSH
30863: LD_VAR 0 8
30867: PPUSH
30868: CALL_OW 255
30872: NONEQUAL
30873: OR
30874: IFFALSE 30903
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
30876: LD_ADDR_EXP 100
30880: PUSH
30881: LD_EXP 100
30885: PPUSH
30886: LD_VAR 0 8
30890: PPUSH
30891: LD_INT 0
30893: PPUSH
30894: CALL_OW 1
30898: ST_TO_ADDR
// exit ;
30899: POP
30900: POP
30901: GO 31434
// end ; x := list [ i ] [ 3 ] ;
30903: LD_ADDR_VAR 0 6
30907: PUSH
30908: LD_VAR 0 3
30912: PUSH
30913: LD_VAR 0 1
30917: ARRAY
30918: PUSH
30919: LD_INT 3
30921: ARRAY
30922: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
30923: LD_ADDR_VAR 0 7
30927: PUSH
30928: LD_VAR 0 3
30932: PUSH
30933: LD_VAR 0 1
30937: ARRAY
30938: PUSH
30939: LD_INT 4
30941: ARRAY
30942: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
30943: LD_ADDR_VAR 0 9
30947: PUSH
30948: LD_VAR 0 6
30952: PPUSH
30953: LD_VAR 0 7
30957: PPUSH
30958: LD_INT 16
30960: PPUSH
30961: CALL 76379 0 3
30965: ST_TO_ADDR
// if not cratesNearbyPoint then
30966: LD_VAR 0 9
30970: NOT
30971: IFFALSE 30977
// exit ;
30973: POP
30974: POP
30975: GO 31434
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
30977: LD_ADDR_VAR 0 4
30981: PUSH
30982: LD_INT 22
30984: PUSH
30985: LD_VAR 0 5
30989: PUSH
30990: EMPTY
30991: LIST
30992: LIST
30993: PUSH
30994: LD_INT 3
30996: PUSH
30997: LD_INT 60
30999: PUSH
31000: EMPTY
31001: LIST
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: LD_INT 91
31009: PUSH
31010: LD_VAR 0 8
31014: PUSH
31015: LD_INT 6
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: LIST
31022: PUSH
31023: LD_INT 2
31025: PUSH
31026: LD_INT 25
31028: PUSH
31029: LD_INT 2
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: PUSH
31036: LD_INT 25
31038: PUSH
31039: LD_INT 16
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: LIST
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: PPUSH
31057: CALL_OW 69
31061: PUSH
31062: LD_VAR 0 8
31066: PPUSH
31067: CALL_OW 313
31071: PPUSH
31072: LD_INT 3
31074: PUSH
31075: LD_INT 60
31077: PUSH
31078: EMPTY
31079: LIST
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: PUSH
31085: LD_INT 2
31087: PUSH
31088: LD_INT 25
31090: PUSH
31091: LD_INT 2
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PUSH
31098: LD_INT 25
31100: PUSH
31101: LD_INT 16
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: LIST
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: PPUSH
31117: CALL_OW 72
31121: UNION
31122: ST_TO_ADDR
// if tmp then
31123: LD_VAR 0 4
31127: IFFALSE 31207
// begin tmp := ShrinkArray ( tmp , 3 ) ;
31129: LD_ADDR_VAR 0 4
31133: PUSH
31134: LD_VAR 0 4
31138: PPUSH
31139: LD_INT 3
31141: PPUSH
31142: CALL 74348 0 2
31146: ST_TO_ADDR
// for j in tmp do
31147: LD_ADDR_VAR 0 2
31151: PUSH
31152: LD_VAR 0 4
31156: PUSH
31157: FOR_IN
31158: IFFALSE 31201
// begin if IsInUnit ( j ) then
31160: LD_VAR 0 2
31164: PPUSH
31165: CALL_OW 310
31169: IFFALSE 31180
// ComExit ( j ) ;
31171: LD_VAR 0 2
31175: PPUSH
31176: CALL 74431 0 1
// AddComCollect ( j , x , y ) ;
31180: LD_VAR 0 2
31184: PPUSH
31185: LD_VAR 0 6
31189: PPUSH
31190: LD_VAR 0 7
31194: PPUSH
31195: CALL_OW 177
// end ;
31199: GO 31157
31201: POP
31202: POP
// exit ;
31203: POP
31204: POP
31205: GO 31434
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
31207: LD_ADDR_VAR 0 4
31211: PUSH
31212: LD_INT 22
31214: PUSH
31215: LD_VAR 0 5
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: PUSH
31224: LD_INT 91
31226: PUSH
31227: LD_VAR 0 8
31231: PUSH
31232: LD_INT 8
31234: PUSH
31235: EMPTY
31236: LIST
31237: LIST
31238: LIST
31239: PUSH
31240: LD_INT 2
31242: PUSH
31243: LD_INT 34
31245: PUSH
31246: LD_INT 12
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: PUSH
31253: LD_INT 34
31255: PUSH
31256: LD_INT 51
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: PUSH
31263: LD_INT 34
31265: PUSH
31266: LD_INT 32
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PUSH
31273: LD_INT 34
31275: PUSH
31276: LD_INT 89
31278: PUSH
31279: EMPTY
31280: LIST
31281: LIST
31282: PUSH
31283: EMPTY
31284: LIST
31285: LIST
31286: LIST
31287: LIST
31288: LIST
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: LIST
31294: PPUSH
31295: CALL_OW 69
31299: ST_TO_ADDR
// if tmp then
31300: LD_VAR 0 4
31304: IFFALSE 31430
// begin for j in tmp do
31306: LD_ADDR_VAR 0 2
31310: PUSH
31311: LD_VAR 0 4
31315: PUSH
31316: FOR_IN
31317: IFFALSE 31428
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
31319: LD_VAR 0 2
31323: PPUSH
31324: CALL_OW 262
31328: PUSH
31329: LD_INT 3
31331: EQUAL
31332: PUSH
31333: LD_VAR 0 2
31337: PPUSH
31338: CALL_OW 261
31342: PUSH
31343: LD_INT 20
31345: GREATER
31346: OR
31347: PUSH
31348: LD_VAR 0 2
31352: PPUSH
31353: CALL_OW 314
31357: NOT
31358: AND
31359: PUSH
31360: LD_VAR 0 2
31364: PPUSH
31365: CALL_OW 263
31369: PUSH
31370: LD_INT 1
31372: NONEQUAL
31373: PUSH
31374: LD_VAR 0 2
31378: PPUSH
31379: CALL_OW 311
31383: OR
31384: AND
31385: IFFALSE 31426
// begin ComCollect ( j , x , y ) ;
31387: LD_VAR 0 2
31391: PPUSH
31392: LD_VAR 0 6
31396: PPUSH
31397: LD_VAR 0 7
31401: PPUSH
31402: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
31406: LD_VAR 0 2
31410: PPUSH
31411: LD_VAR 0 8
31415: PPUSH
31416: CALL_OW 172
// exit ;
31420: POP
31421: POP
31422: POP
31423: POP
31424: GO 31434
// end ;
31426: GO 31316
31428: POP
31429: POP
// end ; end ;
31430: GO 30805
31432: POP
31433: POP
// end ; end_of_file
31434: PPOPN 9
31436: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
31437: LD_INT 0
31439: PPUSH
31440: PPUSH
31441: PPUSH
31442: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
31443: LD_VAR 0 1
31447: PPUSH
31448: CALL_OW 264
31452: PUSH
31453: LD_INT 91
31455: EQUAL
31456: IFFALSE 31528
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
31458: LD_INT 68
31460: PPUSH
31461: LD_VAR 0 1
31465: PPUSH
31466: CALL_OW 255
31470: PPUSH
31471: CALL_OW 321
31475: PUSH
31476: LD_INT 2
31478: EQUAL
31479: IFFALSE 31491
// eff := 70 else
31481: LD_ADDR_VAR 0 4
31485: PUSH
31486: LD_INT 70
31488: ST_TO_ADDR
31489: GO 31499
// eff := 30 ;
31491: LD_ADDR_VAR 0 4
31495: PUSH
31496: LD_INT 30
31498: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
31499: LD_VAR 0 1
31503: PPUSH
31504: CALL_OW 250
31508: PPUSH
31509: LD_VAR 0 1
31513: PPUSH
31514: CALL_OW 251
31518: PPUSH
31519: LD_VAR 0 4
31523: PPUSH
31524: CALL_OW 495
// end ; end ;
31528: LD_VAR 0 2
31532: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
31533: LD_INT 0
31535: PPUSH
// end ;
31536: LD_VAR 0 4
31540: RET
// export function SOS_Command ( cmd ) ; begin
31541: LD_INT 0
31543: PPUSH
// end ;
31544: LD_VAR 0 2
31548: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
31549: LD_INT 0
31551: PPUSH
// end ;
31552: LD_VAR 0 6
31556: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
31557: LD_INT 0
31559: PPUSH
31560: PPUSH
// if not vehicle or not factory then
31561: LD_VAR 0 1
31565: NOT
31566: PUSH
31567: LD_VAR 0 2
31571: NOT
31572: OR
31573: IFFALSE 31577
// exit ;
31575: GO 31808
// if factoryWaypoints >= factory then
31577: LD_EXP 99
31581: PUSH
31582: LD_VAR 0 2
31586: GREATEREQUAL
31587: IFFALSE 31808
// if factoryWaypoints [ factory ] then
31589: LD_EXP 99
31593: PUSH
31594: LD_VAR 0 2
31598: ARRAY
31599: IFFALSE 31808
// begin if GetControl ( vehicle ) = control_manual then
31601: LD_VAR 0 1
31605: PPUSH
31606: CALL_OW 263
31610: PUSH
31611: LD_INT 1
31613: EQUAL
31614: IFFALSE 31695
// begin driver := IsDrivenBy ( vehicle ) ;
31616: LD_ADDR_VAR 0 4
31620: PUSH
31621: LD_VAR 0 1
31625: PPUSH
31626: CALL_OW 311
31630: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
31631: LD_VAR 0 4
31635: PPUSH
31636: LD_EXP 99
31640: PUSH
31641: LD_VAR 0 2
31645: ARRAY
31646: PUSH
31647: LD_INT 3
31649: ARRAY
31650: PPUSH
31651: LD_EXP 99
31655: PUSH
31656: LD_VAR 0 2
31660: ARRAY
31661: PUSH
31662: LD_INT 4
31664: ARRAY
31665: PPUSH
31666: CALL_OW 171
// AddComExitVehicle ( driver ) ;
31670: LD_VAR 0 4
31674: PPUSH
31675: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
31679: LD_VAR 0 4
31683: PPUSH
31684: LD_VAR 0 2
31688: PPUSH
31689: CALL_OW 180
// end else
31693: GO 31808
// if GetControl ( vehicle ) = control_remote then
31695: LD_VAR 0 1
31699: PPUSH
31700: CALL_OW 263
31704: PUSH
31705: LD_INT 2
31707: EQUAL
31708: IFFALSE 31769
// begin wait ( 0 0$2 ) ;
31710: LD_INT 70
31712: PPUSH
31713: CALL_OW 67
// if Connect ( vehicle ) then
31717: LD_VAR 0 1
31721: PPUSH
31722: CALL 44639 0 1
31726: IFFALSE 31767
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
31728: LD_VAR 0 1
31732: PPUSH
31733: LD_EXP 99
31737: PUSH
31738: LD_VAR 0 2
31742: ARRAY
31743: PUSH
31744: LD_INT 3
31746: ARRAY
31747: PPUSH
31748: LD_EXP 99
31752: PUSH
31753: LD_VAR 0 2
31757: ARRAY
31758: PUSH
31759: LD_INT 4
31761: ARRAY
31762: PPUSH
31763: CALL_OW 171
// end else
31767: GO 31808
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
31769: LD_VAR 0 1
31773: PPUSH
31774: LD_EXP 99
31778: PUSH
31779: LD_VAR 0 2
31783: ARRAY
31784: PUSH
31785: LD_INT 3
31787: ARRAY
31788: PPUSH
31789: LD_EXP 99
31793: PUSH
31794: LD_VAR 0 2
31798: ARRAY
31799: PUSH
31800: LD_INT 4
31802: ARRAY
31803: PPUSH
31804: CALL_OW 171
// end ; end ;
31808: LD_VAR 0 3
31812: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
31813: LD_INT 0
31815: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
31816: LD_VAR 0 1
31820: PUSH
31821: LD_INT 250
31823: EQUAL
31824: PUSH
31825: LD_VAR 0 2
31829: PPUSH
31830: CALL_OW 264
31834: PUSH
31835: LD_INT 81
31837: EQUAL
31838: AND
31839: IFFALSE 31860
// MinerPlaceMine ( unit , x , y ) ;
31841: LD_VAR 0 2
31845: PPUSH
31846: LD_VAR 0 4
31850: PPUSH
31851: LD_VAR 0 5
31855: PPUSH
31856: CALL 34850 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
31860: LD_VAR 0 1
31864: PUSH
31865: LD_INT 251
31867: EQUAL
31868: PUSH
31869: LD_VAR 0 2
31873: PPUSH
31874: CALL_OW 264
31878: PUSH
31879: LD_INT 81
31881: EQUAL
31882: AND
31883: IFFALSE 31904
// MinerDetonateMine ( unit , x , y ) ;
31885: LD_VAR 0 2
31889: PPUSH
31890: LD_VAR 0 4
31894: PPUSH
31895: LD_VAR 0 5
31899: PPUSH
31900: CALL 35125 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
31904: LD_VAR 0 1
31908: PUSH
31909: LD_INT 252
31911: EQUAL
31912: PUSH
31913: LD_VAR 0 2
31917: PPUSH
31918: CALL_OW 264
31922: PUSH
31923: LD_INT 81
31925: EQUAL
31926: AND
31927: IFFALSE 31948
// MinerCreateMinefield ( unit , x , y ) ;
31929: LD_VAR 0 2
31933: PPUSH
31934: LD_VAR 0 4
31938: PPUSH
31939: LD_VAR 0 5
31943: PPUSH
31944: CALL 35542 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
31948: LD_VAR 0 1
31952: PUSH
31953: LD_INT 253
31955: EQUAL
31956: PUSH
31957: LD_VAR 0 2
31961: PPUSH
31962: CALL_OW 257
31966: PUSH
31967: LD_INT 5
31969: EQUAL
31970: AND
31971: IFFALSE 31992
// ComBinocular ( unit , x , y ) ;
31973: LD_VAR 0 2
31977: PPUSH
31978: LD_VAR 0 4
31982: PPUSH
31983: LD_VAR 0 5
31987: PPUSH
31988: CALL 35911 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
31992: LD_VAR 0 1
31996: PUSH
31997: LD_INT 254
31999: EQUAL
32000: PUSH
32001: LD_VAR 0 2
32005: PPUSH
32006: CALL_OW 264
32010: PUSH
32011: LD_INT 99
32013: EQUAL
32014: AND
32015: PUSH
32016: LD_VAR 0 3
32020: PPUSH
32021: CALL_OW 263
32025: PUSH
32026: LD_INT 3
32028: EQUAL
32029: AND
32030: IFFALSE 32046
// HackDestroyVehicle ( unit , selectedUnit ) ;
32032: LD_VAR 0 2
32036: PPUSH
32037: LD_VAR 0 3
32041: PPUSH
32042: CALL 34214 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
32046: LD_VAR 0 1
32050: PUSH
32051: LD_INT 255
32053: EQUAL
32054: PUSH
32055: LD_VAR 0 2
32059: PPUSH
32060: CALL_OW 264
32064: PUSH
32065: LD_INT 14
32067: PUSH
32068: LD_INT 53
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: IN
32075: AND
32076: PUSH
32077: LD_VAR 0 4
32081: PPUSH
32082: LD_VAR 0 5
32086: PPUSH
32087: CALL_OW 488
32091: AND
32092: IFFALSE 32116
// CutTreeXYR ( unit , x , y , 12 ) ;
32094: LD_VAR 0 2
32098: PPUSH
32099: LD_VAR 0 4
32103: PPUSH
32104: LD_VAR 0 5
32108: PPUSH
32109: LD_INT 12
32111: PPUSH
32112: CALL 32211 0 4
// if cmd = 256 then
32116: LD_VAR 0 1
32120: PUSH
32121: LD_INT 256
32123: EQUAL
32124: IFFALSE 32145
// SetFactoryWaypoint ( unit , x , y ) ;
32126: LD_VAR 0 2
32130: PPUSH
32131: LD_VAR 0 4
32135: PPUSH
32136: LD_VAR 0 5
32140: PPUSH
32141: CALL 30126 0 3
// if cmd = 257 then
32145: LD_VAR 0 1
32149: PUSH
32150: LD_INT 257
32152: EQUAL
32153: IFFALSE 32174
// SetWarehouseGatheringPoint ( unit , x , y ) ;
32155: LD_VAR 0 2
32159: PPUSH
32160: LD_VAR 0 4
32164: PPUSH
32165: LD_VAR 0 5
32169: PPUSH
32170: CALL 30488 0 3
// if cmd = 258 then
32174: LD_VAR 0 1
32178: PUSH
32179: LD_INT 258
32181: EQUAL
32182: IFFALSE 32206
// BurnTreeXYR ( unit , x , y , 8 ) ;
32184: LD_VAR 0 2
32188: PPUSH
32189: LD_VAR 0 4
32193: PPUSH
32194: LD_VAR 0 5
32198: PPUSH
32199: LD_INT 8
32201: PPUSH
32202: CALL 32605 0 4
// end ;
32206: LD_VAR 0 6
32210: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
32211: LD_INT 0
32213: PPUSH
32214: PPUSH
32215: PPUSH
32216: PPUSH
32217: PPUSH
32218: PPUSH
32219: PPUSH
32220: PPUSH
32221: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
32222: LD_VAR 0 1
32226: PPUSH
32227: CALL_OW 302
32231: NOT
32232: PUSH
32233: LD_VAR 0 2
32237: PPUSH
32238: LD_VAR 0 3
32242: PPUSH
32243: CALL_OW 488
32247: NOT
32248: OR
32249: PUSH
32250: LD_VAR 0 4
32254: NOT
32255: OR
32256: IFFALSE 32260
// exit ;
32258: GO 32600
// list := [ ] ;
32260: LD_ADDR_VAR 0 13
32264: PUSH
32265: EMPTY
32266: ST_TO_ADDR
// if x - r < 0 then
32267: LD_VAR 0 2
32271: PUSH
32272: LD_VAR 0 4
32276: MINUS
32277: PUSH
32278: LD_INT 0
32280: LESS
32281: IFFALSE 32293
// min_x := 0 else
32283: LD_ADDR_VAR 0 7
32287: PUSH
32288: LD_INT 0
32290: ST_TO_ADDR
32291: GO 32309
// min_x := x - r ;
32293: LD_ADDR_VAR 0 7
32297: PUSH
32298: LD_VAR 0 2
32302: PUSH
32303: LD_VAR 0 4
32307: MINUS
32308: ST_TO_ADDR
// if y - r < 0 then
32309: LD_VAR 0 3
32313: PUSH
32314: LD_VAR 0 4
32318: MINUS
32319: PUSH
32320: LD_INT 0
32322: LESS
32323: IFFALSE 32335
// min_y := 0 else
32325: LD_ADDR_VAR 0 8
32329: PUSH
32330: LD_INT 0
32332: ST_TO_ADDR
32333: GO 32351
// min_y := y - r ;
32335: LD_ADDR_VAR 0 8
32339: PUSH
32340: LD_VAR 0 3
32344: PUSH
32345: LD_VAR 0 4
32349: MINUS
32350: ST_TO_ADDR
// max_x := x + r ;
32351: LD_ADDR_VAR 0 9
32355: PUSH
32356: LD_VAR 0 2
32360: PUSH
32361: LD_VAR 0 4
32365: PLUS
32366: ST_TO_ADDR
// max_y := y + r ;
32367: LD_ADDR_VAR 0 10
32371: PUSH
32372: LD_VAR 0 3
32376: PUSH
32377: LD_VAR 0 4
32381: PLUS
32382: ST_TO_ADDR
// for _x = min_x to max_x do
32383: LD_ADDR_VAR 0 11
32387: PUSH
32388: DOUBLE
32389: LD_VAR 0 7
32393: DEC
32394: ST_TO_ADDR
32395: LD_VAR 0 9
32399: PUSH
32400: FOR_TO
32401: IFFALSE 32518
// for _y = min_y to max_y do
32403: LD_ADDR_VAR 0 12
32407: PUSH
32408: DOUBLE
32409: LD_VAR 0 8
32413: DEC
32414: ST_TO_ADDR
32415: LD_VAR 0 10
32419: PUSH
32420: FOR_TO
32421: IFFALSE 32514
// begin if not ValidHex ( _x , _y ) then
32423: LD_VAR 0 11
32427: PPUSH
32428: LD_VAR 0 12
32432: PPUSH
32433: CALL_OW 488
32437: NOT
32438: IFFALSE 32442
// continue ;
32440: GO 32420
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
32442: LD_VAR 0 11
32446: PPUSH
32447: LD_VAR 0 12
32451: PPUSH
32452: CALL_OW 351
32456: PUSH
32457: LD_VAR 0 11
32461: PPUSH
32462: LD_VAR 0 12
32466: PPUSH
32467: CALL_OW 554
32471: AND
32472: IFFALSE 32512
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
32474: LD_ADDR_VAR 0 13
32478: PUSH
32479: LD_VAR 0 13
32483: PPUSH
32484: LD_VAR 0 13
32488: PUSH
32489: LD_INT 1
32491: PLUS
32492: PPUSH
32493: LD_VAR 0 11
32497: PUSH
32498: LD_VAR 0 12
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PPUSH
32507: CALL_OW 2
32511: ST_TO_ADDR
// end ;
32512: GO 32420
32514: POP
32515: POP
32516: GO 32400
32518: POP
32519: POP
// if not list then
32520: LD_VAR 0 13
32524: NOT
32525: IFFALSE 32529
// exit ;
32527: GO 32600
// for i in list do
32529: LD_ADDR_VAR 0 6
32533: PUSH
32534: LD_VAR 0 13
32538: PUSH
32539: FOR_IN
32540: IFFALSE 32598
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
32542: LD_VAR 0 1
32546: PPUSH
32547: LD_STRING M
32549: PUSH
32550: LD_VAR 0 6
32554: PUSH
32555: LD_INT 1
32557: ARRAY
32558: PUSH
32559: LD_VAR 0 6
32563: PUSH
32564: LD_INT 2
32566: ARRAY
32567: PUSH
32568: LD_INT 0
32570: PUSH
32571: LD_INT 0
32573: PUSH
32574: LD_INT 0
32576: PUSH
32577: LD_INT 0
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: PUSH
32589: EMPTY
32590: LIST
32591: PPUSH
32592: CALL_OW 447
32596: GO 32539
32598: POP
32599: POP
// end ;
32600: LD_VAR 0 5
32604: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
32605: LD_INT 0
32607: PPUSH
32608: PPUSH
32609: PPUSH
32610: PPUSH
32611: PPUSH
32612: PPUSH
32613: PPUSH
32614: PPUSH
32615: PPUSH
32616: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
32617: LD_VAR 0 1
32621: PPUSH
32622: CALL_OW 302
32626: NOT
32627: PUSH
32628: LD_VAR 0 2
32632: PPUSH
32633: LD_VAR 0 3
32637: PPUSH
32638: CALL_OW 488
32642: NOT
32643: OR
32644: PUSH
32645: LD_VAR 0 4
32649: NOT
32650: OR
32651: IFFALSE 32655
// exit ;
32653: GO 33168
// list := [ ] ;
32655: LD_ADDR_VAR 0 13
32659: PUSH
32660: EMPTY
32661: ST_TO_ADDR
// if x - r < 0 then
32662: LD_VAR 0 2
32666: PUSH
32667: LD_VAR 0 4
32671: MINUS
32672: PUSH
32673: LD_INT 0
32675: LESS
32676: IFFALSE 32688
// min_x := 0 else
32678: LD_ADDR_VAR 0 7
32682: PUSH
32683: LD_INT 0
32685: ST_TO_ADDR
32686: GO 32704
// min_x := x - r ;
32688: LD_ADDR_VAR 0 7
32692: PUSH
32693: LD_VAR 0 2
32697: PUSH
32698: LD_VAR 0 4
32702: MINUS
32703: ST_TO_ADDR
// if y - r < 0 then
32704: LD_VAR 0 3
32708: PUSH
32709: LD_VAR 0 4
32713: MINUS
32714: PUSH
32715: LD_INT 0
32717: LESS
32718: IFFALSE 32730
// min_y := 0 else
32720: LD_ADDR_VAR 0 8
32724: PUSH
32725: LD_INT 0
32727: ST_TO_ADDR
32728: GO 32746
// min_y := y - r ;
32730: LD_ADDR_VAR 0 8
32734: PUSH
32735: LD_VAR 0 3
32739: PUSH
32740: LD_VAR 0 4
32744: MINUS
32745: ST_TO_ADDR
// max_x := x + r ;
32746: LD_ADDR_VAR 0 9
32750: PUSH
32751: LD_VAR 0 2
32755: PUSH
32756: LD_VAR 0 4
32760: PLUS
32761: ST_TO_ADDR
// max_y := y + r ;
32762: LD_ADDR_VAR 0 10
32766: PUSH
32767: LD_VAR 0 3
32771: PUSH
32772: LD_VAR 0 4
32776: PLUS
32777: ST_TO_ADDR
// for _x = min_x to max_x do
32778: LD_ADDR_VAR 0 11
32782: PUSH
32783: DOUBLE
32784: LD_VAR 0 7
32788: DEC
32789: ST_TO_ADDR
32790: LD_VAR 0 9
32794: PUSH
32795: FOR_TO
32796: IFFALSE 32913
// for _y = min_y to max_y do
32798: LD_ADDR_VAR 0 12
32802: PUSH
32803: DOUBLE
32804: LD_VAR 0 8
32808: DEC
32809: ST_TO_ADDR
32810: LD_VAR 0 10
32814: PUSH
32815: FOR_TO
32816: IFFALSE 32909
// begin if not ValidHex ( _x , _y ) then
32818: LD_VAR 0 11
32822: PPUSH
32823: LD_VAR 0 12
32827: PPUSH
32828: CALL_OW 488
32832: NOT
32833: IFFALSE 32837
// continue ;
32835: GO 32815
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
32837: LD_VAR 0 11
32841: PPUSH
32842: LD_VAR 0 12
32846: PPUSH
32847: CALL_OW 351
32851: PUSH
32852: LD_VAR 0 11
32856: PPUSH
32857: LD_VAR 0 12
32861: PPUSH
32862: CALL_OW 554
32866: AND
32867: IFFALSE 32907
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
32869: LD_ADDR_VAR 0 13
32873: PUSH
32874: LD_VAR 0 13
32878: PPUSH
32879: LD_VAR 0 13
32883: PUSH
32884: LD_INT 1
32886: PLUS
32887: PPUSH
32888: LD_VAR 0 11
32892: PUSH
32893: LD_VAR 0 12
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: PPUSH
32902: CALL_OW 2
32906: ST_TO_ADDR
// end ;
32907: GO 32815
32909: POP
32910: POP
32911: GO 32795
32913: POP
32914: POP
// if not list then
32915: LD_VAR 0 13
32919: NOT
32920: IFFALSE 32924
// exit ;
32922: GO 33168
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
32924: LD_ADDR_VAR 0 13
32928: PUSH
32929: LD_VAR 0 1
32933: PPUSH
32934: LD_VAR 0 13
32938: PPUSH
32939: LD_INT 1
32941: PPUSH
32942: LD_INT 1
32944: PPUSH
32945: CALL 41781 0 4
32949: ST_TO_ADDR
// ComStop ( flame ) ;
32950: LD_VAR 0 1
32954: PPUSH
32955: CALL_OW 141
// for i in list do
32959: LD_ADDR_VAR 0 6
32963: PUSH
32964: LD_VAR 0 13
32968: PUSH
32969: FOR_IN
32970: IFFALSE 33001
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
32972: LD_VAR 0 1
32976: PPUSH
32977: LD_VAR 0 6
32981: PUSH
32982: LD_INT 1
32984: ARRAY
32985: PPUSH
32986: LD_VAR 0 6
32990: PUSH
32991: LD_INT 2
32993: ARRAY
32994: PPUSH
32995: CALL_OW 176
32999: GO 32969
33001: POP
33002: POP
// repeat wait ( 0 0$1 ) ;
33003: LD_INT 35
33005: PPUSH
33006: CALL_OW 67
// task := GetTaskList ( flame ) ;
33010: LD_ADDR_VAR 0 14
33014: PUSH
33015: LD_VAR 0 1
33019: PPUSH
33020: CALL_OW 437
33024: ST_TO_ADDR
// if not task then
33025: LD_VAR 0 14
33029: NOT
33030: IFFALSE 33034
// exit ;
33032: GO 33168
// if task [ 1 ] [ 1 ] <> | then
33034: LD_VAR 0 14
33038: PUSH
33039: LD_INT 1
33041: ARRAY
33042: PUSH
33043: LD_INT 1
33045: ARRAY
33046: PUSH
33047: LD_STRING |
33049: NONEQUAL
33050: IFFALSE 33054
// exit ;
33052: GO 33168
// _x := task [ 1 ] [ 2 ] ;
33054: LD_ADDR_VAR 0 11
33058: PUSH
33059: LD_VAR 0 14
33063: PUSH
33064: LD_INT 1
33066: ARRAY
33067: PUSH
33068: LD_INT 2
33070: ARRAY
33071: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
33072: LD_ADDR_VAR 0 12
33076: PUSH
33077: LD_VAR 0 14
33081: PUSH
33082: LD_INT 1
33084: ARRAY
33085: PUSH
33086: LD_INT 3
33088: ARRAY
33089: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
33090: LD_VAR 0 11
33094: PPUSH
33095: LD_VAR 0 12
33099: PPUSH
33100: CALL_OW 351
33104: NOT
33105: PUSH
33106: LD_VAR 0 11
33110: PPUSH
33111: LD_VAR 0 12
33115: PPUSH
33116: CALL_OW 554
33120: NOT
33121: OR
33122: IFFALSE 33156
// begin task := Delete ( task , 1 ) ;
33124: LD_ADDR_VAR 0 14
33128: PUSH
33129: LD_VAR 0 14
33133: PPUSH
33134: LD_INT 1
33136: PPUSH
33137: CALL_OW 3
33141: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
33142: LD_VAR 0 1
33146: PPUSH
33147: LD_VAR 0 14
33151: PPUSH
33152: CALL_OW 446
// end ; until not HasTask ( flame ) ;
33156: LD_VAR 0 1
33160: PPUSH
33161: CALL_OW 314
33165: NOT
33166: IFFALSE 33003
// end ;
33168: LD_VAR 0 5
33172: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
33173: LD_EXP 102
33177: NOT
33178: IFFALSE 33228
33180: GO 33182
33182: DISABLE
// begin initHack := true ;
33183: LD_ADDR_EXP 102
33187: PUSH
33188: LD_INT 1
33190: ST_TO_ADDR
// hackTanks := [ ] ;
33191: LD_ADDR_EXP 103
33195: PUSH
33196: EMPTY
33197: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
33198: LD_ADDR_EXP 104
33202: PUSH
33203: EMPTY
33204: ST_TO_ADDR
// hackLimit := 3 ;
33205: LD_ADDR_EXP 105
33209: PUSH
33210: LD_INT 3
33212: ST_TO_ADDR
// hackDist := 12 ;
33213: LD_ADDR_EXP 106
33217: PUSH
33218: LD_INT 12
33220: ST_TO_ADDR
// hackCounter := [ ] ;
33221: LD_ADDR_EXP 107
33225: PUSH
33226: EMPTY
33227: ST_TO_ADDR
// end ;
33228: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
33229: LD_EXP 102
33233: PUSH
33234: LD_INT 34
33236: PUSH
33237: LD_INT 99
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: PPUSH
33244: CALL_OW 69
33248: AND
33249: IFFALSE 33502
33251: GO 33253
33253: DISABLE
33254: LD_INT 0
33256: PPUSH
33257: PPUSH
// begin enable ;
33258: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
33259: LD_ADDR_VAR 0 1
33263: PUSH
33264: LD_INT 34
33266: PUSH
33267: LD_INT 99
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PPUSH
33274: CALL_OW 69
33278: PUSH
33279: FOR_IN
33280: IFFALSE 33500
// begin if not i in hackTanks then
33282: LD_VAR 0 1
33286: PUSH
33287: LD_EXP 103
33291: IN
33292: NOT
33293: IFFALSE 33376
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
33295: LD_ADDR_EXP 103
33299: PUSH
33300: LD_EXP 103
33304: PPUSH
33305: LD_EXP 103
33309: PUSH
33310: LD_INT 1
33312: PLUS
33313: PPUSH
33314: LD_VAR 0 1
33318: PPUSH
33319: CALL_OW 1
33323: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
33324: LD_ADDR_EXP 104
33328: PUSH
33329: LD_EXP 104
33333: PPUSH
33334: LD_EXP 104
33338: PUSH
33339: LD_INT 1
33341: PLUS
33342: PPUSH
33343: EMPTY
33344: PPUSH
33345: CALL_OW 1
33349: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
33350: LD_ADDR_EXP 107
33354: PUSH
33355: LD_EXP 107
33359: PPUSH
33360: LD_EXP 107
33364: PUSH
33365: LD_INT 1
33367: PLUS
33368: PPUSH
33369: EMPTY
33370: PPUSH
33371: CALL_OW 1
33375: ST_TO_ADDR
// end ; if not IsOk ( i ) then
33376: LD_VAR 0 1
33380: PPUSH
33381: CALL_OW 302
33385: NOT
33386: IFFALSE 33399
// begin HackUnlinkAll ( i ) ;
33388: LD_VAR 0 1
33392: PPUSH
33393: CALL 33505 0 1
// continue ;
33397: GO 33279
// end ; HackCheckCapturedStatus ( i ) ;
33399: LD_VAR 0 1
33403: PPUSH
33404: CALL 33948 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
33408: LD_ADDR_VAR 0 2
33412: PUSH
33413: LD_INT 81
33415: PUSH
33416: LD_VAR 0 1
33420: PPUSH
33421: CALL_OW 255
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: PUSH
33430: LD_INT 33
33432: PUSH
33433: LD_INT 3
33435: PUSH
33436: EMPTY
33437: LIST
33438: LIST
33439: PUSH
33440: LD_INT 91
33442: PUSH
33443: LD_VAR 0 1
33447: PUSH
33448: LD_EXP 106
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: LIST
33457: PUSH
33458: LD_INT 50
33460: PUSH
33461: EMPTY
33462: LIST
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: PPUSH
33470: CALL_OW 69
33474: ST_TO_ADDR
// if not tmp then
33475: LD_VAR 0 2
33479: NOT
33480: IFFALSE 33484
// continue ;
33482: GO 33279
// HackLink ( i , tmp ) ;
33484: LD_VAR 0 1
33488: PPUSH
33489: LD_VAR 0 2
33493: PPUSH
33494: CALL 33641 0 2
// end ;
33498: GO 33279
33500: POP
33501: POP
// end ;
33502: PPOPN 2
33504: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33505: LD_INT 0
33507: PPUSH
33508: PPUSH
33509: PPUSH
// if not hack in hackTanks then
33510: LD_VAR 0 1
33514: PUSH
33515: LD_EXP 103
33519: IN
33520: NOT
33521: IFFALSE 33525
// exit ;
33523: GO 33636
// index := GetElementIndex ( hackTanks , hack ) ;
33525: LD_ADDR_VAR 0 4
33529: PUSH
33530: LD_EXP 103
33534: PPUSH
33535: LD_VAR 0 1
33539: PPUSH
33540: CALL 41078 0 2
33544: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
33545: LD_EXP 104
33549: PUSH
33550: LD_VAR 0 4
33554: ARRAY
33555: IFFALSE 33636
// begin for i in hackTanksCaptured [ index ] do
33557: LD_ADDR_VAR 0 3
33561: PUSH
33562: LD_EXP 104
33566: PUSH
33567: LD_VAR 0 4
33571: ARRAY
33572: PUSH
33573: FOR_IN
33574: IFFALSE 33600
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
33576: LD_VAR 0 3
33580: PUSH
33581: LD_INT 1
33583: ARRAY
33584: PPUSH
33585: LD_VAR 0 3
33589: PUSH
33590: LD_INT 2
33592: ARRAY
33593: PPUSH
33594: CALL_OW 235
33598: GO 33573
33600: POP
33601: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
33602: LD_ADDR_EXP 104
33606: PUSH
33607: LD_EXP 104
33611: PPUSH
33612: LD_VAR 0 4
33616: PPUSH
33617: EMPTY
33618: PPUSH
33619: CALL_OW 1
33623: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
33624: LD_VAR 0 1
33628: PPUSH
33629: LD_INT 0
33631: PPUSH
33632: CALL_OW 505
// end ; end ;
33636: LD_VAR 0 2
33640: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
33641: LD_INT 0
33643: PPUSH
33644: PPUSH
33645: PPUSH
// if not hack in hackTanks or not vehicles then
33646: LD_VAR 0 1
33650: PUSH
33651: LD_EXP 103
33655: IN
33656: NOT
33657: PUSH
33658: LD_VAR 0 2
33662: NOT
33663: OR
33664: IFFALSE 33668
// exit ;
33666: GO 33943
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
33668: LD_ADDR_VAR 0 2
33672: PUSH
33673: LD_VAR 0 1
33677: PPUSH
33678: LD_VAR 0 2
33682: PPUSH
33683: LD_INT 1
33685: PPUSH
33686: LD_INT 1
33688: PPUSH
33689: CALL 41728 0 4
33693: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
33694: LD_ADDR_VAR 0 5
33698: PUSH
33699: LD_EXP 103
33703: PPUSH
33704: LD_VAR 0 1
33708: PPUSH
33709: CALL 41078 0 2
33713: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
33714: LD_EXP 104
33718: PUSH
33719: LD_VAR 0 5
33723: ARRAY
33724: PUSH
33725: LD_EXP 105
33729: LESS
33730: IFFALSE 33919
// begin for i := 1 to vehicles do
33732: LD_ADDR_VAR 0 4
33736: PUSH
33737: DOUBLE
33738: LD_INT 1
33740: DEC
33741: ST_TO_ADDR
33742: LD_VAR 0 2
33746: PUSH
33747: FOR_TO
33748: IFFALSE 33917
// begin if hackTanksCaptured [ index ] = hackLimit then
33750: LD_EXP 104
33754: PUSH
33755: LD_VAR 0 5
33759: ARRAY
33760: PUSH
33761: LD_EXP 105
33765: EQUAL
33766: IFFALSE 33770
// break ;
33768: GO 33917
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
33770: LD_ADDR_EXP 107
33774: PUSH
33775: LD_EXP 107
33779: PPUSH
33780: LD_VAR 0 5
33784: PPUSH
33785: LD_EXP 107
33789: PUSH
33790: LD_VAR 0 5
33794: ARRAY
33795: PUSH
33796: LD_INT 1
33798: PLUS
33799: PPUSH
33800: CALL_OW 1
33804: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
33805: LD_ADDR_EXP 104
33809: PUSH
33810: LD_EXP 104
33814: PPUSH
33815: LD_VAR 0 5
33819: PUSH
33820: LD_EXP 104
33824: PUSH
33825: LD_VAR 0 5
33829: ARRAY
33830: PUSH
33831: LD_INT 1
33833: PLUS
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: PPUSH
33839: LD_VAR 0 2
33843: PUSH
33844: LD_VAR 0 4
33848: ARRAY
33849: PUSH
33850: LD_VAR 0 2
33854: PUSH
33855: LD_VAR 0 4
33859: ARRAY
33860: PPUSH
33861: CALL_OW 255
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: PPUSH
33870: CALL 41293 0 3
33874: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
33875: LD_VAR 0 2
33879: PUSH
33880: LD_VAR 0 4
33884: ARRAY
33885: PPUSH
33886: LD_VAR 0 1
33890: PPUSH
33891: CALL_OW 255
33895: PPUSH
33896: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
33900: LD_VAR 0 2
33904: PUSH
33905: LD_VAR 0 4
33909: ARRAY
33910: PPUSH
33911: CALL_OW 141
// end ;
33915: GO 33747
33917: POP
33918: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33919: LD_VAR 0 1
33923: PPUSH
33924: LD_EXP 104
33928: PUSH
33929: LD_VAR 0 5
33933: ARRAY
33934: PUSH
33935: LD_INT 0
33937: PLUS
33938: PPUSH
33939: CALL_OW 505
// end ;
33943: LD_VAR 0 3
33947: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
33948: LD_INT 0
33950: PPUSH
33951: PPUSH
33952: PPUSH
33953: PPUSH
// if not hack in hackTanks then
33954: LD_VAR 0 1
33958: PUSH
33959: LD_EXP 103
33963: IN
33964: NOT
33965: IFFALSE 33969
// exit ;
33967: GO 34209
// index := GetElementIndex ( hackTanks , hack ) ;
33969: LD_ADDR_VAR 0 4
33973: PUSH
33974: LD_EXP 103
33978: PPUSH
33979: LD_VAR 0 1
33983: PPUSH
33984: CALL 41078 0 2
33988: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
33989: LD_ADDR_VAR 0 3
33993: PUSH
33994: DOUBLE
33995: LD_EXP 104
33999: PUSH
34000: LD_VAR 0 4
34004: ARRAY
34005: INC
34006: ST_TO_ADDR
34007: LD_INT 1
34009: PUSH
34010: FOR_DOWNTO
34011: IFFALSE 34183
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
34013: LD_ADDR_VAR 0 5
34017: PUSH
34018: LD_EXP 104
34022: PUSH
34023: LD_VAR 0 4
34027: ARRAY
34028: PUSH
34029: LD_VAR 0 3
34033: ARRAY
34034: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
34035: LD_VAR 0 5
34039: PUSH
34040: LD_INT 1
34042: ARRAY
34043: PPUSH
34044: CALL_OW 302
34048: NOT
34049: PUSH
34050: LD_VAR 0 5
34054: PUSH
34055: LD_INT 1
34057: ARRAY
34058: PPUSH
34059: CALL_OW 255
34063: PUSH
34064: LD_VAR 0 1
34068: PPUSH
34069: CALL_OW 255
34073: NONEQUAL
34074: OR
34075: IFFALSE 34181
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
34077: LD_VAR 0 5
34081: PUSH
34082: LD_INT 1
34084: ARRAY
34085: PPUSH
34086: CALL_OW 305
34090: PUSH
34091: LD_VAR 0 5
34095: PUSH
34096: LD_INT 1
34098: ARRAY
34099: PPUSH
34100: CALL_OW 255
34104: PUSH
34105: LD_VAR 0 1
34109: PPUSH
34110: CALL_OW 255
34114: EQUAL
34115: AND
34116: IFFALSE 34140
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
34118: LD_VAR 0 5
34122: PUSH
34123: LD_INT 1
34125: ARRAY
34126: PPUSH
34127: LD_VAR 0 5
34131: PUSH
34132: LD_INT 2
34134: ARRAY
34135: PPUSH
34136: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
34140: LD_ADDR_EXP 104
34144: PUSH
34145: LD_EXP 104
34149: PPUSH
34150: LD_VAR 0 4
34154: PPUSH
34155: LD_EXP 104
34159: PUSH
34160: LD_VAR 0 4
34164: ARRAY
34165: PPUSH
34166: LD_VAR 0 3
34170: PPUSH
34171: CALL_OW 3
34175: PPUSH
34176: CALL_OW 1
34180: ST_TO_ADDR
// end ; end ;
34181: GO 34010
34183: POP
34184: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34185: LD_VAR 0 1
34189: PPUSH
34190: LD_EXP 104
34194: PUSH
34195: LD_VAR 0 4
34199: ARRAY
34200: PUSH
34201: LD_INT 0
34203: PLUS
34204: PPUSH
34205: CALL_OW 505
// end ;
34209: LD_VAR 0 2
34213: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
34214: LD_INT 0
34216: PPUSH
34217: PPUSH
34218: PPUSH
34219: PPUSH
// if not hack in hackTanks then
34220: LD_VAR 0 1
34224: PUSH
34225: LD_EXP 103
34229: IN
34230: NOT
34231: IFFALSE 34235
// exit ;
34233: GO 34320
// index := GetElementIndex ( hackTanks , hack ) ;
34235: LD_ADDR_VAR 0 5
34239: PUSH
34240: LD_EXP 103
34244: PPUSH
34245: LD_VAR 0 1
34249: PPUSH
34250: CALL 41078 0 2
34254: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
34255: LD_ADDR_VAR 0 4
34259: PUSH
34260: DOUBLE
34261: LD_INT 1
34263: DEC
34264: ST_TO_ADDR
34265: LD_EXP 104
34269: PUSH
34270: LD_VAR 0 5
34274: ARRAY
34275: PUSH
34276: FOR_TO
34277: IFFALSE 34318
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
34279: LD_EXP 104
34283: PUSH
34284: LD_VAR 0 5
34288: ARRAY
34289: PUSH
34290: LD_VAR 0 4
34294: ARRAY
34295: PUSH
34296: LD_INT 1
34298: ARRAY
34299: PUSH
34300: LD_VAR 0 2
34304: EQUAL
34305: IFFALSE 34316
// KillUnit ( vehicle ) ;
34307: LD_VAR 0 2
34311: PPUSH
34312: CALL_OW 66
34316: GO 34276
34318: POP
34319: POP
// end ;
34320: LD_VAR 0 3
34324: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
34325: LD_EXP 108
34329: NOT
34330: IFFALSE 34365
34332: GO 34334
34334: DISABLE
// begin initMiner := true ;
34335: LD_ADDR_EXP 108
34339: PUSH
34340: LD_INT 1
34342: ST_TO_ADDR
// minersList := [ ] ;
34343: LD_ADDR_EXP 109
34347: PUSH
34348: EMPTY
34349: ST_TO_ADDR
// minerMinesList := [ ] ;
34350: LD_ADDR_EXP 110
34354: PUSH
34355: EMPTY
34356: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
34357: LD_ADDR_EXP 111
34361: PUSH
34362: LD_INT 5
34364: ST_TO_ADDR
// end ;
34365: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
34366: LD_EXP 108
34370: PUSH
34371: LD_INT 34
34373: PUSH
34374: LD_INT 81
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: PPUSH
34381: CALL_OW 69
34385: AND
34386: IFFALSE 34847
34388: GO 34390
34390: DISABLE
34391: LD_INT 0
34393: PPUSH
34394: PPUSH
34395: PPUSH
34396: PPUSH
// begin enable ;
34397: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
34398: LD_ADDR_VAR 0 1
34402: PUSH
34403: LD_INT 34
34405: PUSH
34406: LD_INT 81
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: PPUSH
34413: CALL_OW 69
34417: PUSH
34418: FOR_IN
34419: IFFALSE 34491
// begin if not i in minersList then
34421: LD_VAR 0 1
34425: PUSH
34426: LD_EXP 109
34430: IN
34431: NOT
34432: IFFALSE 34489
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
34434: LD_ADDR_EXP 109
34438: PUSH
34439: LD_EXP 109
34443: PPUSH
34444: LD_EXP 109
34448: PUSH
34449: LD_INT 1
34451: PLUS
34452: PPUSH
34453: LD_VAR 0 1
34457: PPUSH
34458: CALL_OW 1
34462: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34463: LD_ADDR_EXP 110
34467: PUSH
34468: LD_EXP 110
34472: PPUSH
34473: LD_EXP 110
34477: PUSH
34478: LD_INT 1
34480: PLUS
34481: PPUSH
34482: EMPTY
34483: PPUSH
34484: CALL_OW 1
34488: ST_TO_ADDR
// end end ;
34489: GO 34418
34491: POP
34492: POP
// for i := minerMinesList downto 1 do
34493: LD_ADDR_VAR 0 1
34497: PUSH
34498: DOUBLE
34499: LD_EXP 110
34503: INC
34504: ST_TO_ADDR
34505: LD_INT 1
34507: PUSH
34508: FOR_DOWNTO
34509: IFFALSE 34845
// begin if IsLive ( minersList [ i ] ) then
34511: LD_EXP 109
34515: PUSH
34516: LD_VAR 0 1
34520: ARRAY
34521: PPUSH
34522: CALL_OW 300
34526: IFFALSE 34554
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
34528: LD_EXP 109
34532: PUSH
34533: LD_VAR 0 1
34537: ARRAY
34538: PPUSH
34539: LD_EXP 110
34543: PUSH
34544: LD_VAR 0 1
34548: ARRAY
34549: PPUSH
34550: CALL_OW 505
// if not minerMinesList [ i ] then
34554: LD_EXP 110
34558: PUSH
34559: LD_VAR 0 1
34563: ARRAY
34564: NOT
34565: IFFALSE 34569
// continue ;
34567: GO 34508
// for j := minerMinesList [ i ] downto 1 do
34569: LD_ADDR_VAR 0 2
34573: PUSH
34574: DOUBLE
34575: LD_EXP 110
34579: PUSH
34580: LD_VAR 0 1
34584: ARRAY
34585: INC
34586: ST_TO_ADDR
34587: LD_INT 1
34589: PUSH
34590: FOR_DOWNTO
34591: IFFALSE 34841
// begin side := GetSide ( minersList [ i ] ) ;
34593: LD_ADDR_VAR 0 3
34597: PUSH
34598: LD_EXP 109
34602: PUSH
34603: LD_VAR 0 1
34607: ARRAY
34608: PPUSH
34609: CALL_OW 255
34613: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
34614: LD_ADDR_VAR 0 4
34618: PUSH
34619: LD_EXP 110
34623: PUSH
34624: LD_VAR 0 1
34628: ARRAY
34629: PUSH
34630: LD_VAR 0 2
34634: ARRAY
34635: PUSH
34636: LD_INT 1
34638: ARRAY
34639: PPUSH
34640: LD_EXP 110
34644: PUSH
34645: LD_VAR 0 1
34649: ARRAY
34650: PUSH
34651: LD_VAR 0 2
34655: ARRAY
34656: PUSH
34657: LD_INT 2
34659: ARRAY
34660: PPUSH
34661: CALL_OW 428
34665: ST_TO_ADDR
// if not tmp then
34666: LD_VAR 0 4
34670: NOT
34671: IFFALSE 34675
// continue ;
34673: GO 34590
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
34675: LD_VAR 0 4
34679: PUSH
34680: LD_INT 81
34682: PUSH
34683: LD_VAR 0 3
34687: PUSH
34688: EMPTY
34689: LIST
34690: LIST
34691: PPUSH
34692: CALL_OW 69
34696: IN
34697: PUSH
34698: LD_EXP 110
34702: PUSH
34703: LD_VAR 0 1
34707: ARRAY
34708: PUSH
34709: LD_VAR 0 2
34713: ARRAY
34714: PUSH
34715: LD_INT 1
34717: ARRAY
34718: PPUSH
34719: LD_EXP 110
34723: PUSH
34724: LD_VAR 0 1
34728: ARRAY
34729: PUSH
34730: LD_VAR 0 2
34734: ARRAY
34735: PUSH
34736: LD_INT 2
34738: ARRAY
34739: PPUSH
34740: CALL_OW 458
34744: AND
34745: IFFALSE 34839
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
34747: LD_EXP 110
34751: PUSH
34752: LD_VAR 0 1
34756: ARRAY
34757: PUSH
34758: LD_VAR 0 2
34762: ARRAY
34763: PUSH
34764: LD_INT 1
34766: ARRAY
34767: PPUSH
34768: LD_EXP 110
34772: PUSH
34773: LD_VAR 0 1
34777: ARRAY
34778: PUSH
34779: LD_VAR 0 2
34783: ARRAY
34784: PUSH
34785: LD_INT 2
34787: ARRAY
34788: PPUSH
34789: LD_VAR 0 3
34793: PPUSH
34794: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
34798: LD_ADDR_EXP 110
34802: PUSH
34803: LD_EXP 110
34807: PPUSH
34808: LD_VAR 0 1
34812: PPUSH
34813: LD_EXP 110
34817: PUSH
34818: LD_VAR 0 1
34822: ARRAY
34823: PPUSH
34824: LD_VAR 0 2
34828: PPUSH
34829: CALL_OW 3
34833: PPUSH
34834: CALL_OW 1
34838: ST_TO_ADDR
// end ; end ;
34839: GO 34590
34841: POP
34842: POP
// end ;
34843: GO 34508
34845: POP
34846: POP
// end ;
34847: PPOPN 4
34849: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
34850: LD_INT 0
34852: PPUSH
34853: PPUSH
// result := false ;
34854: LD_ADDR_VAR 0 4
34858: PUSH
34859: LD_INT 0
34861: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
34862: LD_VAR 0 1
34866: PPUSH
34867: CALL_OW 264
34871: PUSH
34872: LD_INT 81
34874: EQUAL
34875: NOT
34876: IFFALSE 34880
// exit ;
34878: GO 35120
// index := GetElementIndex ( minersList , unit ) ;
34880: LD_ADDR_VAR 0 5
34884: PUSH
34885: LD_EXP 109
34889: PPUSH
34890: LD_VAR 0 1
34894: PPUSH
34895: CALL 41078 0 2
34899: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
34900: LD_EXP 110
34904: PUSH
34905: LD_VAR 0 5
34909: ARRAY
34910: PUSH
34911: LD_EXP 111
34915: GREATEREQUAL
34916: IFFALSE 34920
// exit ;
34918: GO 35120
// ComMoveXY ( unit , x , y ) ;
34920: LD_VAR 0 1
34924: PPUSH
34925: LD_VAR 0 2
34929: PPUSH
34930: LD_VAR 0 3
34934: PPUSH
34935: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
34939: LD_INT 35
34941: PPUSH
34942: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
34946: LD_VAR 0 1
34950: PPUSH
34951: LD_VAR 0 2
34955: PPUSH
34956: LD_VAR 0 3
34960: PPUSH
34961: CALL 72830 0 3
34965: NOT
34966: PUSH
34967: LD_VAR 0 1
34971: PPUSH
34972: CALL_OW 314
34976: AND
34977: IFFALSE 34981
// exit ;
34979: GO 35120
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
34981: LD_VAR 0 2
34985: PPUSH
34986: LD_VAR 0 3
34990: PPUSH
34991: CALL_OW 428
34995: PUSH
34996: LD_VAR 0 1
35000: EQUAL
35001: PUSH
35002: LD_VAR 0 1
35006: PPUSH
35007: CALL_OW 314
35011: NOT
35012: AND
35013: IFFALSE 34939
// PlaySoundXY ( x , y , PlantMine ) ;
35015: LD_VAR 0 2
35019: PPUSH
35020: LD_VAR 0 3
35024: PPUSH
35025: LD_STRING PlantMine
35027: PPUSH
35028: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
35032: LD_VAR 0 2
35036: PPUSH
35037: LD_VAR 0 3
35041: PPUSH
35042: LD_VAR 0 1
35046: PPUSH
35047: CALL_OW 255
35051: PPUSH
35052: LD_INT 0
35054: PPUSH
35055: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
35059: LD_ADDR_EXP 110
35063: PUSH
35064: LD_EXP 110
35068: PPUSH
35069: LD_VAR 0 5
35073: PUSH
35074: LD_EXP 110
35078: PUSH
35079: LD_VAR 0 5
35083: ARRAY
35084: PUSH
35085: LD_INT 1
35087: PLUS
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: PPUSH
35093: LD_VAR 0 2
35097: PUSH
35098: LD_VAR 0 3
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: PPUSH
35107: CALL 41293 0 3
35111: ST_TO_ADDR
// result := true ;
35112: LD_ADDR_VAR 0 4
35116: PUSH
35117: LD_INT 1
35119: ST_TO_ADDR
// end ;
35120: LD_VAR 0 4
35124: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
35125: LD_INT 0
35127: PPUSH
35128: PPUSH
35129: PPUSH
// if not unit in minersList then
35130: LD_VAR 0 1
35134: PUSH
35135: LD_EXP 109
35139: IN
35140: NOT
35141: IFFALSE 35145
// exit ;
35143: GO 35537
// index := GetElementIndex ( minersList , unit ) ;
35145: LD_ADDR_VAR 0 6
35149: PUSH
35150: LD_EXP 109
35154: PPUSH
35155: LD_VAR 0 1
35159: PPUSH
35160: CALL 41078 0 2
35164: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
35165: LD_ADDR_VAR 0 5
35169: PUSH
35170: DOUBLE
35171: LD_EXP 110
35175: PUSH
35176: LD_VAR 0 6
35180: ARRAY
35181: INC
35182: ST_TO_ADDR
35183: LD_INT 1
35185: PUSH
35186: FOR_DOWNTO
35187: IFFALSE 35348
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
35189: LD_EXP 110
35193: PUSH
35194: LD_VAR 0 6
35198: ARRAY
35199: PUSH
35200: LD_VAR 0 5
35204: ARRAY
35205: PUSH
35206: LD_INT 1
35208: ARRAY
35209: PUSH
35210: LD_VAR 0 2
35214: EQUAL
35215: PUSH
35216: LD_EXP 110
35220: PUSH
35221: LD_VAR 0 6
35225: ARRAY
35226: PUSH
35227: LD_VAR 0 5
35231: ARRAY
35232: PUSH
35233: LD_INT 2
35235: ARRAY
35236: PUSH
35237: LD_VAR 0 3
35241: EQUAL
35242: AND
35243: IFFALSE 35346
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35245: LD_EXP 110
35249: PUSH
35250: LD_VAR 0 6
35254: ARRAY
35255: PUSH
35256: LD_VAR 0 5
35260: ARRAY
35261: PUSH
35262: LD_INT 1
35264: ARRAY
35265: PPUSH
35266: LD_EXP 110
35270: PUSH
35271: LD_VAR 0 6
35275: ARRAY
35276: PUSH
35277: LD_VAR 0 5
35281: ARRAY
35282: PUSH
35283: LD_INT 2
35285: ARRAY
35286: PPUSH
35287: LD_VAR 0 1
35291: PPUSH
35292: CALL_OW 255
35296: PPUSH
35297: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35301: LD_ADDR_EXP 110
35305: PUSH
35306: LD_EXP 110
35310: PPUSH
35311: LD_VAR 0 6
35315: PPUSH
35316: LD_EXP 110
35320: PUSH
35321: LD_VAR 0 6
35325: ARRAY
35326: PPUSH
35327: LD_VAR 0 5
35331: PPUSH
35332: CALL_OW 3
35336: PPUSH
35337: CALL_OW 1
35341: ST_TO_ADDR
// exit ;
35342: POP
35343: POP
35344: GO 35537
// end ; end ;
35346: GO 35186
35348: POP
35349: POP
// for i := minerMinesList [ index ] downto 1 do
35350: LD_ADDR_VAR 0 5
35354: PUSH
35355: DOUBLE
35356: LD_EXP 110
35360: PUSH
35361: LD_VAR 0 6
35365: ARRAY
35366: INC
35367: ST_TO_ADDR
35368: LD_INT 1
35370: PUSH
35371: FOR_DOWNTO
35372: IFFALSE 35535
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
35374: LD_EXP 110
35378: PUSH
35379: LD_VAR 0 6
35383: ARRAY
35384: PUSH
35385: LD_VAR 0 5
35389: ARRAY
35390: PUSH
35391: LD_INT 1
35393: ARRAY
35394: PPUSH
35395: LD_EXP 110
35399: PUSH
35400: LD_VAR 0 6
35404: ARRAY
35405: PUSH
35406: LD_VAR 0 5
35410: ARRAY
35411: PUSH
35412: LD_INT 2
35414: ARRAY
35415: PPUSH
35416: LD_VAR 0 2
35420: PPUSH
35421: LD_VAR 0 3
35425: PPUSH
35426: CALL_OW 298
35430: PUSH
35431: LD_INT 6
35433: LESS
35434: IFFALSE 35533
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35436: LD_EXP 110
35440: PUSH
35441: LD_VAR 0 6
35445: ARRAY
35446: PUSH
35447: LD_VAR 0 5
35451: ARRAY
35452: PUSH
35453: LD_INT 1
35455: ARRAY
35456: PPUSH
35457: LD_EXP 110
35461: PUSH
35462: LD_VAR 0 6
35466: ARRAY
35467: PUSH
35468: LD_VAR 0 5
35472: ARRAY
35473: PUSH
35474: LD_INT 2
35476: ARRAY
35477: PPUSH
35478: LD_VAR 0 1
35482: PPUSH
35483: CALL_OW 255
35487: PPUSH
35488: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35492: LD_ADDR_EXP 110
35496: PUSH
35497: LD_EXP 110
35501: PPUSH
35502: LD_VAR 0 6
35506: PPUSH
35507: LD_EXP 110
35511: PUSH
35512: LD_VAR 0 6
35516: ARRAY
35517: PPUSH
35518: LD_VAR 0 5
35522: PPUSH
35523: CALL_OW 3
35527: PPUSH
35528: CALL_OW 1
35532: ST_TO_ADDR
// end ; end ;
35533: GO 35371
35535: POP
35536: POP
// end ;
35537: LD_VAR 0 4
35541: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
35542: LD_INT 0
35544: PPUSH
35545: PPUSH
35546: PPUSH
35547: PPUSH
35548: PPUSH
35549: PPUSH
35550: PPUSH
35551: PPUSH
35552: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
35553: LD_VAR 0 1
35557: PPUSH
35558: CALL_OW 264
35562: PUSH
35563: LD_INT 81
35565: EQUAL
35566: NOT
35567: PUSH
35568: LD_VAR 0 1
35572: PUSH
35573: LD_EXP 109
35577: IN
35578: NOT
35579: OR
35580: IFFALSE 35584
// exit ;
35582: GO 35906
// index := GetElementIndex ( minersList , unit ) ;
35584: LD_ADDR_VAR 0 6
35588: PUSH
35589: LD_EXP 109
35593: PPUSH
35594: LD_VAR 0 1
35598: PPUSH
35599: CALL 41078 0 2
35603: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
35604: LD_ADDR_VAR 0 8
35608: PUSH
35609: LD_EXP 111
35613: PUSH
35614: LD_EXP 110
35618: PUSH
35619: LD_VAR 0 6
35623: ARRAY
35624: MINUS
35625: ST_TO_ADDR
// if not minesFreeAmount then
35626: LD_VAR 0 8
35630: NOT
35631: IFFALSE 35635
// exit ;
35633: GO 35906
// tmp := [ ] ;
35635: LD_ADDR_VAR 0 7
35639: PUSH
35640: EMPTY
35641: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
35642: LD_ADDR_VAR 0 5
35646: PUSH
35647: DOUBLE
35648: LD_INT 1
35650: DEC
35651: ST_TO_ADDR
35652: LD_VAR 0 8
35656: PUSH
35657: FOR_TO
35658: IFFALSE 35853
// begin _d := rand ( 0 , 5 ) ;
35660: LD_ADDR_VAR 0 11
35664: PUSH
35665: LD_INT 0
35667: PPUSH
35668: LD_INT 5
35670: PPUSH
35671: CALL_OW 12
35675: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
35676: LD_ADDR_VAR 0 12
35680: PUSH
35681: LD_INT 2
35683: PPUSH
35684: LD_INT 6
35686: PPUSH
35687: CALL_OW 12
35691: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
35692: LD_ADDR_VAR 0 9
35696: PUSH
35697: LD_VAR 0 2
35701: PPUSH
35702: LD_VAR 0 11
35706: PPUSH
35707: LD_VAR 0 12
35711: PPUSH
35712: CALL_OW 272
35716: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
35717: LD_ADDR_VAR 0 10
35721: PUSH
35722: LD_VAR 0 3
35726: PPUSH
35727: LD_VAR 0 11
35731: PPUSH
35732: LD_VAR 0 12
35736: PPUSH
35737: CALL_OW 273
35741: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
35742: LD_VAR 0 9
35746: PPUSH
35747: LD_VAR 0 10
35751: PPUSH
35752: CALL_OW 488
35756: PUSH
35757: LD_VAR 0 9
35761: PUSH
35762: LD_VAR 0 10
35766: PUSH
35767: EMPTY
35768: LIST
35769: LIST
35770: PUSH
35771: LD_VAR 0 7
35775: IN
35776: NOT
35777: AND
35778: PUSH
35779: LD_VAR 0 9
35783: PPUSH
35784: LD_VAR 0 10
35788: PPUSH
35789: CALL_OW 458
35793: NOT
35794: AND
35795: IFFALSE 35837
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
35797: LD_ADDR_VAR 0 7
35801: PUSH
35802: LD_VAR 0 7
35806: PPUSH
35807: LD_VAR 0 7
35811: PUSH
35812: LD_INT 1
35814: PLUS
35815: PPUSH
35816: LD_VAR 0 9
35820: PUSH
35821: LD_VAR 0 10
35825: PUSH
35826: EMPTY
35827: LIST
35828: LIST
35829: PPUSH
35830: CALL_OW 1
35834: ST_TO_ADDR
35835: GO 35851
// i := i - 1 ;
35837: LD_ADDR_VAR 0 5
35841: PUSH
35842: LD_VAR 0 5
35846: PUSH
35847: LD_INT 1
35849: MINUS
35850: ST_TO_ADDR
// end ;
35851: GO 35657
35853: POP
35854: POP
// for i in tmp do
35855: LD_ADDR_VAR 0 5
35859: PUSH
35860: LD_VAR 0 7
35864: PUSH
35865: FOR_IN
35866: IFFALSE 35904
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
35868: LD_VAR 0 1
35872: PPUSH
35873: LD_VAR 0 5
35877: PUSH
35878: LD_INT 1
35880: ARRAY
35881: PPUSH
35882: LD_VAR 0 5
35886: PUSH
35887: LD_INT 2
35889: ARRAY
35890: PPUSH
35891: CALL 34850 0 3
35895: NOT
35896: IFFALSE 35902
// exit ;
35898: POP
35899: POP
35900: GO 35906
35902: GO 35865
35904: POP
35905: POP
// end ;
35906: LD_VAR 0 4
35910: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
35911: LD_INT 0
35913: PPUSH
35914: PPUSH
35915: PPUSH
35916: PPUSH
35917: PPUSH
35918: PPUSH
35919: PPUSH
// if not GetClass ( unit ) = class_sniper then
35920: LD_VAR 0 1
35924: PPUSH
35925: CALL_OW 257
35929: PUSH
35930: LD_INT 5
35932: EQUAL
35933: NOT
35934: IFFALSE 35938
// exit ;
35936: GO 36326
// dist := 8 ;
35938: LD_ADDR_VAR 0 5
35942: PUSH
35943: LD_INT 8
35945: ST_TO_ADDR
// viewRange := 12 ;
35946: LD_ADDR_VAR 0 7
35950: PUSH
35951: LD_INT 12
35953: ST_TO_ADDR
// side := GetSide ( unit ) ;
35954: LD_ADDR_VAR 0 6
35958: PUSH
35959: LD_VAR 0 1
35963: PPUSH
35964: CALL_OW 255
35968: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
35969: LD_INT 61
35971: PPUSH
35972: LD_VAR 0 6
35976: PPUSH
35977: CALL_OW 321
35981: PUSH
35982: LD_INT 2
35984: EQUAL
35985: IFFALSE 35995
// viewRange := 16 ;
35987: LD_ADDR_VAR 0 7
35991: PUSH
35992: LD_INT 16
35994: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
35995: LD_VAR 0 1
35999: PPUSH
36000: LD_VAR 0 2
36004: PPUSH
36005: LD_VAR 0 3
36009: PPUSH
36010: CALL_OW 297
36014: PUSH
36015: LD_VAR 0 5
36019: GREATER
36020: IFFALSE 36099
// begin ComMoveXY ( unit , x , y ) ;
36022: LD_VAR 0 1
36026: PPUSH
36027: LD_VAR 0 2
36031: PPUSH
36032: LD_VAR 0 3
36036: PPUSH
36037: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36041: LD_INT 35
36043: PPUSH
36044: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
36048: LD_VAR 0 1
36052: PPUSH
36053: LD_VAR 0 2
36057: PPUSH
36058: LD_VAR 0 3
36062: PPUSH
36063: CALL 72830 0 3
36067: NOT
36068: IFFALSE 36072
// exit ;
36070: GO 36326
// until GetDistUnitXY ( unit , x , y ) < dist ;
36072: LD_VAR 0 1
36076: PPUSH
36077: LD_VAR 0 2
36081: PPUSH
36082: LD_VAR 0 3
36086: PPUSH
36087: CALL_OW 297
36091: PUSH
36092: LD_VAR 0 5
36096: LESS
36097: IFFALSE 36041
// end ; ComTurnXY ( unit , x , y ) ;
36099: LD_VAR 0 1
36103: PPUSH
36104: LD_VAR 0 2
36108: PPUSH
36109: LD_VAR 0 3
36113: PPUSH
36114: CALL_OW 118
// wait ( 5 ) ;
36118: LD_INT 5
36120: PPUSH
36121: CALL_OW 67
// _d := GetDir ( unit ) ;
36125: LD_ADDR_VAR 0 10
36129: PUSH
36130: LD_VAR 0 1
36134: PPUSH
36135: CALL_OW 254
36139: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
36140: LD_ADDR_VAR 0 8
36144: PUSH
36145: LD_VAR 0 1
36149: PPUSH
36150: CALL_OW 250
36154: PPUSH
36155: LD_VAR 0 10
36159: PPUSH
36160: LD_VAR 0 5
36164: PPUSH
36165: CALL_OW 272
36169: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
36170: LD_ADDR_VAR 0 9
36174: PUSH
36175: LD_VAR 0 1
36179: PPUSH
36180: CALL_OW 251
36184: PPUSH
36185: LD_VAR 0 10
36189: PPUSH
36190: LD_VAR 0 5
36194: PPUSH
36195: CALL_OW 273
36199: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36200: LD_VAR 0 8
36204: PPUSH
36205: LD_VAR 0 9
36209: PPUSH
36210: CALL_OW 488
36214: NOT
36215: IFFALSE 36219
// exit ;
36217: GO 36326
// ComAnimCustom ( unit , 1 ) ;
36219: LD_VAR 0 1
36223: PPUSH
36224: LD_INT 1
36226: PPUSH
36227: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
36231: LD_VAR 0 8
36235: PPUSH
36236: LD_VAR 0 9
36240: PPUSH
36241: LD_VAR 0 6
36245: PPUSH
36246: LD_VAR 0 7
36250: PPUSH
36251: CALL_OW 330
// repeat wait ( 1 ) ;
36255: LD_INT 1
36257: PPUSH
36258: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
36262: LD_VAR 0 1
36266: PPUSH
36267: CALL_OW 316
36271: PUSH
36272: LD_VAR 0 1
36276: PPUSH
36277: CALL_OW 314
36281: OR
36282: PUSH
36283: LD_VAR 0 1
36287: PPUSH
36288: CALL_OW 302
36292: NOT
36293: OR
36294: PUSH
36295: LD_VAR 0 1
36299: PPUSH
36300: CALL_OW 301
36304: OR
36305: IFFALSE 36255
// RemoveSeeing ( _x , _y , side ) ;
36307: LD_VAR 0 8
36311: PPUSH
36312: LD_VAR 0 9
36316: PPUSH
36317: LD_VAR 0 6
36321: PPUSH
36322: CALL_OW 331
// end ; end_of_file
36326: LD_VAR 0 4
36330: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
36331: LD_INT 0
36333: PPUSH
36334: PPUSH
// if exist_mode then
36335: LD_VAR 0 2
36339: IFFALSE 36364
// unit := CreateCharacter ( prefix & ident ) else
36341: LD_ADDR_VAR 0 5
36345: PUSH
36346: LD_VAR 0 3
36350: PUSH
36351: LD_VAR 0 1
36355: STR
36356: PPUSH
36357: CALL_OW 34
36361: ST_TO_ADDR
36362: GO 36379
// unit := NewCharacter ( ident ) ;
36364: LD_ADDR_VAR 0 5
36368: PUSH
36369: LD_VAR 0 1
36373: PPUSH
36374: CALL_OW 25
36378: ST_TO_ADDR
// result := unit ;
36379: LD_ADDR_VAR 0 4
36383: PUSH
36384: LD_VAR 0 5
36388: ST_TO_ADDR
// end ;
36389: LD_VAR 0 4
36393: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36394: LD_INT 0
36396: PPUSH
36397: PPUSH
// if not side or not nation then
36398: LD_VAR 0 1
36402: NOT
36403: PUSH
36404: LD_VAR 0 2
36408: NOT
36409: OR
36410: IFFALSE 36414
// exit ;
36412: GO 37182
// case nation of nation_american :
36414: LD_VAR 0 2
36418: PUSH
36419: LD_INT 1
36421: DOUBLE
36422: EQUAL
36423: IFTRUE 36427
36425: GO 36641
36427: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36428: LD_ADDR_VAR 0 4
36432: PUSH
36433: LD_INT 35
36435: PUSH
36436: LD_INT 45
36438: PUSH
36439: LD_INT 46
36441: PUSH
36442: LD_INT 47
36444: PUSH
36445: LD_INT 82
36447: PUSH
36448: LD_INT 83
36450: PUSH
36451: LD_INT 84
36453: PUSH
36454: LD_INT 85
36456: PUSH
36457: LD_INT 86
36459: PUSH
36460: LD_INT 1
36462: PUSH
36463: LD_INT 2
36465: PUSH
36466: LD_INT 6
36468: PUSH
36469: LD_INT 15
36471: PUSH
36472: LD_INT 16
36474: PUSH
36475: LD_INT 7
36477: PUSH
36478: LD_INT 12
36480: PUSH
36481: LD_INT 13
36483: PUSH
36484: LD_INT 10
36486: PUSH
36487: LD_INT 14
36489: PUSH
36490: LD_INT 20
36492: PUSH
36493: LD_INT 21
36495: PUSH
36496: LD_INT 22
36498: PUSH
36499: LD_INT 25
36501: PUSH
36502: LD_INT 32
36504: PUSH
36505: LD_INT 27
36507: PUSH
36508: LD_INT 36
36510: PUSH
36511: LD_INT 69
36513: PUSH
36514: LD_INT 39
36516: PUSH
36517: LD_INT 34
36519: PUSH
36520: LD_INT 40
36522: PUSH
36523: LD_INT 48
36525: PUSH
36526: LD_INT 49
36528: PUSH
36529: LD_INT 50
36531: PUSH
36532: LD_INT 51
36534: PUSH
36535: LD_INT 52
36537: PUSH
36538: LD_INT 53
36540: PUSH
36541: LD_INT 54
36543: PUSH
36544: LD_INT 55
36546: PUSH
36547: LD_INT 56
36549: PUSH
36550: LD_INT 57
36552: PUSH
36553: LD_INT 58
36555: PUSH
36556: LD_INT 59
36558: PUSH
36559: LD_INT 60
36561: PUSH
36562: LD_INT 61
36564: PUSH
36565: LD_INT 62
36567: PUSH
36568: LD_INT 80
36570: PUSH
36571: LD_INT 82
36573: PUSH
36574: LD_INT 83
36576: PUSH
36577: LD_INT 84
36579: PUSH
36580: LD_INT 85
36582: PUSH
36583: LD_INT 86
36585: PUSH
36586: EMPTY
36587: LIST
36588: LIST
36589: LIST
36590: LIST
36591: LIST
36592: LIST
36593: LIST
36594: LIST
36595: LIST
36596: LIST
36597: LIST
36598: LIST
36599: LIST
36600: LIST
36601: LIST
36602: LIST
36603: LIST
36604: LIST
36605: LIST
36606: LIST
36607: LIST
36608: LIST
36609: LIST
36610: LIST
36611: LIST
36612: LIST
36613: LIST
36614: LIST
36615: LIST
36616: LIST
36617: LIST
36618: LIST
36619: LIST
36620: LIST
36621: LIST
36622: LIST
36623: LIST
36624: LIST
36625: LIST
36626: LIST
36627: LIST
36628: LIST
36629: LIST
36630: LIST
36631: LIST
36632: LIST
36633: LIST
36634: LIST
36635: LIST
36636: LIST
36637: LIST
36638: ST_TO_ADDR
36639: GO 37106
36641: LD_INT 2
36643: DOUBLE
36644: EQUAL
36645: IFTRUE 36649
36647: GO 36875
36649: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
36650: LD_ADDR_VAR 0 4
36654: PUSH
36655: LD_INT 35
36657: PUSH
36658: LD_INT 45
36660: PUSH
36661: LD_INT 46
36663: PUSH
36664: LD_INT 47
36666: PUSH
36667: LD_INT 82
36669: PUSH
36670: LD_INT 83
36672: PUSH
36673: LD_INT 84
36675: PUSH
36676: LD_INT 85
36678: PUSH
36679: LD_INT 87
36681: PUSH
36682: LD_INT 70
36684: PUSH
36685: LD_INT 1
36687: PUSH
36688: LD_INT 11
36690: PUSH
36691: LD_INT 3
36693: PUSH
36694: LD_INT 4
36696: PUSH
36697: LD_INT 5
36699: PUSH
36700: LD_INT 6
36702: PUSH
36703: LD_INT 15
36705: PUSH
36706: LD_INT 18
36708: PUSH
36709: LD_INT 7
36711: PUSH
36712: LD_INT 17
36714: PUSH
36715: LD_INT 8
36717: PUSH
36718: LD_INT 20
36720: PUSH
36721: LD_INT 21
36723: PUSH
36724: LD_INT 22
36726: PUSH
36727: LD_INT 72
36729: PUSH
36730: LD_INT 26
36732: PUSH
36733: LD_INT 69
36735: PUSH
36736: LD_INT 39
36738: PUSH
36739: LD_INT 40
36741: PUSH
36742: LD_INT 41
36744: PUSH
36745: LD_INT 42
36747: PUSH
36748: LD_INT 43
36750: PUSH
36751: LD_INT 48
36753: PUSH
36754: LD_INT 49
36756: PUSH
36757: LD_INT 50
36759: PUSH
36760: LD_INT 51
36762: PUSH
36763: LD_INT 52
36765: PUSH
36766: LD_INT 53
36768: PUSH
36769: LD_INT 54
36771: PUSH
36772: LD_INT 55
36774: PUSH
36775: LD_INT 56
36777: PUSH
36778: LD_INT 60
36780: PUSH
36781: LD_INT 61
36783: PUSH
36784: LD_INT 62
36786: PUSH
36787: LD_INT 66
36789: PUSH
36790: LD_INT 67
36792: PUSH
36793: LD_INT 68
36795: PUSH
36796: LD_INT 81
36798: PUSH
36799: LD_INT 82
36801: PUSH
36802: LD_INT 83
36804: PUSH
36805: LD_INT 84
36807: PUSH
36808: LD_INT 85
36810: PUSH
36811: LD_INT 87
36813: PUSH
36814: LD_INT 88
36816: PUSH
36817: EMPTY
36818: LIST
36819: LIST
36820: LIST
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: LIST
36837: LIST
36838: LIST
36839: LIST
36840: LIST
36841: LIST
36842: LIST
36843: LIST
36844: LIST
36845: LIST
36846: LIST
36847: LIST
36848: LIST
36849: LIST
36850: LIST
36851: LIST
36852: LIST
36853: LIST
36854: LIST
36855: LIST
36856: LIST
36857: LIST
36858: LIST
36859: LIST
36860: LIST
36861: LIST
36862: LIST
36863: LIST
36864: LIST
36865: LIST
36866: LIST
36867: LIST
36868: LIST
36869: LIST
36870: LIST
36871: LIST
36872: ST_TO_ADDR
36873: GO 37106
36875: LD_INT 3
36877: DOUBLE
36878: EQUAL
36879: IFTRUE 36883
36881: GO 37105
36883: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
36884: LD_ADDR_VAR 0 4
36888: PUSH
36889: LD_INT 46
36891: PUSH
36892: LD_INT 47
36894: PUSH
36895: LD_INT 1
36897: PUSH
36898: LD_INT 2
36900: PUSH
36901: LD_INT 82
36903: PUSH
36904: LD_INT 83
36906: PUSH
36907: LD_INT 84
36909: PUSH
36910: LD_INT 85
36912: PUSH
36913: LD_INT 86
36915: PUSH
36916: LD_INT 11
36918: PUSH
36919: LD_INT 9
36921: PUSH
36922: LD_INT 20
36924: PUSH
36925: LD_INT 19
36927: PUSH
36928: LD_INT 21
36930: PUSH
36931: LD_INT 24
36933: PUSH
36934: LD_INT 22
36936: PUSH
36937: LD_INT 25
36939: PUSH
36940: LD_INT 28
36942: PUSH
36943: LD_INT 29
36945: PUSH
36946: LD_INT 30
36948: PUSH
36949: LD_INT 31
36951: PUSH
36952: LD_INT 37
36954: PUSH
36955: LD_INT 38
36957: PUSH
36958: LD_INT 32
36960: PUSH
36961: LD_INT 27
36963: PUSH
36964: LD_INT 33
36966: PUSH
36967: LD_INT 69
36969: PUSH
36970: LD_INT 39
36972: PUSH
36973: LD_INT 34
36975: PUSH
36976: LD_INT 40
36978: PUSH
36979: LD_INT 71
36981: PUSH
36982: LD_INT 23
36984: PUSH
36985: LD_INT 44
36987: PUSH
36988: LD_INT 48
36990: PUSH
36991: LD_INT 49
36993: PUSH
36994: LD_INT 50
36996: PUSH
36997: LD_INT 51
36999: PUSH
37000: LD_INT 52
37002: PUSH
37003: LD_INT 53
37005: PUSH
37006: LD_INT 54
37008: PUSH
37009: LD_INT 55
37011: PUSH
37012: LD_INT 56
37014: PUSH
37015: LD_INT 57
37017: PUSH
37018: LD_INT 58
37020: PUSH
37021: LD_INT 59
37023: PUSH
37024: LD_INT 63
37026: PUSH
37027: LD_INT 64
37029: PUSH
37030: LD_INT 65
37032: PUSH
37033: LD_INT 82
37035: PUSH
37036: LD_INT 83
37038: PUSH
37039: LD_INT 84
37041: PUSH
37042: LD_INT 85
37044: PUSH
37045: LD_INT 86
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: LIST
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: LIST
37078: LIST
37079: LIST
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: LIST
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: LIST
37097: LIST
37098: LIST
37099: LIST
37100: LIST
37101: LIST
37102: ST_TO_ADDR
37103: GO 37106
37105: POP
// if state > - 1 and state < 3 then
37106: LD_VAR 0 3
37110: PUSH
37111: LD_INT 1
37113: NEG
37114: GREATER
37115: PUSH
37116: LD_VAR 0 3
37120: PUSH
37121: LD_INT 3
37123: LESS
37124: AND
37125: IFFALSE 37182
// for i in result do
37127: LD_ADDR_VAR 0 5
37131: PUSH
37132: LD_VAR 0 4
37136: PUSH
37137: FOR_IN
37138: IFFALSE 37180
// if GetTech ( i , side ) <> state then
37140: LD_VAR 0 5
37144: PPUSH
37145: LD_VAR 0 1
37149: PPUSH
37150: CALL_OW 321
37154: PUSH
37155: LD_VAR 0 3
37159: NONEQUAL
37160: IFFALSE 37178
// result := result diff i ;
37162: LD_ADDR_VAR 0 4
37166: PUSH
37167: LD_VAR 0 4
37171: PUSH
37172: LD_VAR 0 5
37176: DIFF
37177: ST_TO_ADDR
37178: GO 37137
37180: POP
37181: POP
// end ;
37182: LD_VAR 0 4
37186: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
37187: LD_INT 0
37189: PPUSH
37190: PPUSH
37191: PPUSH
// result := true ;
37192: LD_ADDR_VAR 0 3
37196: PUSH
37197: LD_INT 1
37199: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
37200: LD_ADDR_VAR 0 5
37204: PUSH
37205: LD_VAR 0 2
37209: PPUSH
37210: CALL_OW 480
37214: ST_TO_ADDR
// if not tmp then
37215: LD_VAR 0 5
37219: NOT
37220: IFFALSE 37224
// exit ;
37222: GO 37273
// for i in tmp do
37224: LD_ADDR_VAR 0 4
37228: PUSH
37229: LD_VAR 0 5
37233: PUSH
37234: FOR_IN
37235: IFFALSE 37271
// if GetTech ( i , side ) <> state_researched then
37237: LD_VAR 0 4
37241: PPUSH
37242: LD_VAR 0 1
37246: PPUSH
37247: CALL_OW 321
37251: PUSH
37252: LD_INT 2
37254: NONEQUAL
37255: IFFALSE 37269
// begin result := false ;
37257: LD_ADDR_VAR 0 3
37261: PUSH
37262: LD_INT 0
37264: ST_TO_ADDR
// exit ;
37265: POP
37266: POP
37267: GO 37273
// end ;
37269: GO 37234
37271: POP
37272: POP
// end ;
37273: LD_VAR 0 3
37277: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
37278: LD_INT 0
37280: PPUSH
37281: PPUSH
37282: PPUSH
37283: PPUSH
37284: PPUSH
37285: PPUSH
37286: PPUSH
37287: PPUSH
37288: PPUSH
37289: PPUSH
37290: PPUSH
37291: PPUSH
37292: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
37293: LD_VAR 0 1
37297: NOT
37298: PUSH
37299: LD_VAR 0 1
37303: PPUSH
37304: CALL_OW 257
37308: PUSH
37309: LD_INT 9
37311: NONEQUAL
37312: OR
37313: IFFALSE 37317
// exit ;
37315: GO 37890
// side := GetSide ( unit ) ;
37317: LD_ADDR_VAR 0 9
37321: PUSH
37322: LD_VAR 0 1
37326: PPUSH
37327: CALL_OW 255
37331: ST_TO_ADDR
// tech_space := tech_spacanom ;
37332: LD_ADDR_VAR 0 12
37336: PUSH
37337: LD_INT 29
37339: ST_TO_ADDR
// tech_time := tech_taurad ;
37340: LD_ADDR_VAR 0 13
37344: PUSH
37345: LD_INT 28
37347: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37348: LD_ADDR_VAR 0 11
37352: PUSH
37353: LD_VAR 0 1
37357: PPUSH
37358: CALL_OW 310
37362: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37363: LD_VAR 0 11
37367: PPUSH
37368: CALL_OW 247
37372: PUSH
37373: LD_INT 2
37375: EQUAL
37376: IFFALSE 37380
// exit ;
37378: GO 37890
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37380: LD_ADDR_VAR 0 8
37384: PUSH
37385: LD_INT 81
37387: PUSH
37388: LD_VAR 0 9
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: PUSH
37397: LD_INT 3
37399: PUSH
37400: LD_INT 21
37402: PUSH
37403: LD_INT 3
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PPUSH
37418: CALL_OW 69
37422: ST_TO_ADDR
// if not tmp then
37423: LD_VAR 0 8
37427: NOT
37428: IFFALSE 37432
// exit ;
37430: GO 37890
// if in_unit then
37432: LD_VAR 0 11
37436: IFFALSE 37460
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37438: LD_ADDR_VAR 0 10
37442: PUSH
37443: LD_VAR 0 8
37447: PPUSH
37448: LD_VAR 0 11
37452: PPUSH
37453: CALL_OW 74
37457: ST_TO_ADDR
37458: GO 37480
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37460: LD_ADDR_VAR 0 10
37464: PUSH
37465: LD_VAR 0 8
37469: PPUSH
37470: LD_VAR 0 1
37474: PPUSH
37475: CALL_OW 74
37479: ST_TO_ADDR
// if not enemy then
37480: LD_VAR 0 10
37484: NOT
37485: IFFALSE 37489
// exit ;
37487: GO 37890
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37489: LD_VAR 0 11
37493: PUSH
37494: LD_VAR 0 11
37498: PPUSH
37499: LD_VAR 0 10
37503: PPUSH
37504: CALL_OW 296
37508: PUSH
37509: LD_INT 13
37511: GREATER
37512: AND
37513: PUSH
37514: LD_VAR 0 1
37518: PPUSH
37519: LD_VAR 0 10
37523: PPUSH
37524: CALL_OW 296
37528: PUSH
37529: LD_INT 12
37531: GREATER
37532: OR
37533: IFFALSE 37537
// exit ;
37535: GO 37890
// missile := [ 1 ] ;
37537: LD_ADDR_VAR 0 14
37541: PUSH
37542: LD_INT 1
37544: PUSH
37545: EMPTY
37546: LIST
37547: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37548: LD_VAR 0 9
37552: PPUSH
37553: LD_VAR 0 12
37557: PPUSH
37558: CALL_OW 325
37562: IFFALSE 37591
// missile := Replace ( missile , missile + 1 , 2 ) ;
37564: LD_ADDR_VAR 0 14
37568: PUSH
37569: LD_VAR 0 14
37573: PPUSH
37574: LD_VAR 0 14
37578: PUSH
37579: LD_INT 1
37581: PLUS
37582: PPUSH
37583: LD_INT 2
37585: PPUSH
37586: CALL_OW 1
37590: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
37591: LD_VAR 0 9
37595: PPUSH
37596: LD_VAR 0 13
37600: PPUSH
37601: CALL_OW 325
37605: PUSH
37606: LD_VAR 0 10
37610: PPUSH
37611: CALL_OW 255
37615: PPUSH
37616: LD_VAR 0 13
37620: PPUSH
37621: CALL_OW 325
37625: NOT
37626: AND
37627: IFFALSE 37656
// missile := Replace ( missile , missile + 1 , 3 ) ;
37629: LD_ADDR_VAR 0 14
37633: PUSH
37634: LD_VAR 0 14
37638: PPUSH
37639: LD_VAR 0 14
37643: PUSH
37644: LD_INT 1
37646: PLUS
37647: PPUSH
37648: LD_INT 3
37650: PPUSH
37651: CALL_OW 1
37655: ST_TO_ADDR
// if missile < 2 then
37656: LD_VAR 0 14
37660: PUSH
37661: LD_INT 2
37663: LESS
37664: IFFALSE 37668
// exit ;
37666: GO 37890
// x := GetX ( enemy ) ;
37668: LD_ADDR_VAR 0 4
37672: PUSH
37673: LD_VAR 0 10
37677: PPUSH
37678: CALL_OW 250
37682: ST_TO_ADDR
// y := GetY ( enemy ) ;
37683: LD_ADDR_VAR 0 5
37687: PUSH
37688: LD_VAR 0 10
37692: PPUSH
37693: CALL_OW 251
37697: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
37698: LD_ADDR_VAR 0 6
37702: PUSH
37703: LD_VAR 0 4
37707: PUSH
37708: LD_INT 1
37710: NEG
37711: PPUSH
37712: LD_INT 1
37714: PPUSH
37715: CALL_OW 12
37719: PLUS
37720: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
37721: LD_ADDR_VAR 0 7
37725: PUSH
37726: LD_VAR 0 5
37730: PUSH
37731: LD_INT 1
37733: NEG
37734: PPUSH
37735: LD_INT 1
37737: PPUSH
37738: CALL_OW 12
37742: PLUS
37743: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37744: LD_VAR 0 6
37748: PPUSH
37749: LD_VAR 0 7
37753: PPUSH
37754: CALL_OW 488
37758: NOT
37759: IFFALSE 37781
// begin _x := x ;
37761: LD_ADDR_VAR 0 6
37765: PUSH
37766: LD_VAR 0 4
37770: ST_TO_ADDR
// _y := y ;
37771: LD_ADDR_VAR 0 7
37775: PUSH
37776: LD_VAR 0 5
37780: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
37781: LD_ADDR_VAR 0 3
37785: PUSH
37786: LD_INT 1
37788: PPUSH
37789: LD_VAR 0 14
37793: PPUSH
37794: CALL_OW 12
37798: ST_TO_ADDR
// case i of 1 :
37799: LD_VAR 0 3
37803: PUSH
37804: LD_INT 1
37806: DOUBLE
37807: EQUAL
37808: IFTRUE 37812
37810: GO 37829
37812: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
37813: LD_VAR 0 1
37817: PPUSH
37818: LD_VAR 0 10
37822: PPUSH
37823: CALL_OW 115
37827: GO 37890
37829: LD_INT 2
37831: DOUBLE
37832: EQUAL
37833: IFTRUE 37837
37835: GO 37859
37837: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
37838: LD_VAR 0 1
37842: PPUSH
37843: LD_VAR 0 6
37847: PPUSH
37848: LD_VAR 0 7
37852: PPUSH
37853: CALL_OW 153
37857: GO 37890
37859: LD_INT 3
37861: DOUBLE
37862: EQUAL
37863: IFTRUE 37867
37865: GO 37889
37867: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
37868: LD_VAR 0 1
37872: PPUSH
37873: LD_VAR 0 6
37877: PPUSH
37878: LD_VAR 0 7
37882: PPUSH
37883: CALL_OW 154
37887: GO 37890
37889: POP
// end ;
37890: LD_VAR 0 2
37894: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
37895: LD_INT 0
37897: PPUSH
37898: PPUSH
37899: PPUSH
37900: PPUSH
37901: PPUSH
37902: PPUSH
// if not unit or not building then
37903: LD_VAR 0 1
37907: NOT
37908: PUSH
37909: LD_VAR 0 2
37913: NOT
37914: OR
37915: IFFALSE 37919
// exit ;
37917: GO 38077
// x := GetX ( building ) ;
37919: LD_ADDR_VAR 0 5
37923: PUSH
37924: LD_VAR 0 2
37928: PPUSH
37929: CALL_OW 250
37933: ST_TO_ADDR
// y := GetY ( building ) ;
37934: LD_ADDR_VAR 0 6
37938: PUSH
37939: LD_VAR 0 2
37943: PPUSH
37944: CALL_OW 251
37948: ST_TO_ADDR
// for i = 0 to 5 do
37949: LD_ADDR_VAR 0 4
37953: PUSH
37954: DOUBLE
37955: LD_INT 0
37957: DEC
37958: ST_TO_ADDR
37959: LD_INT 5
37961: PUSH
37962: FOR_TO
37963: IFFALSE 38075
// begin _x := ShiftX ( x , i , 3 ) ;
37965: LD_ADDR_VAR 0 7
37969: PUSH
37970: LD_VAR 0 5
37974: PPUSH
37975: LD_VAR 0 4
37979: PPUSH
37980: LD_INT 3
37982: PPUSH
37983: CALL_OW 272
37987: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
37988: LD_ADDR_VAR 0 8
37992: PUSH
37993: LD_VAR 0 6
37997: PPUSH
37998: LD_VAR 0 4
38002: PPUSH
38003: LD_INT 3
38005: PPUSH
38006: CALL_OW 273
38010: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38011: LD_VAR 0 7
38015: PPUSH
38016: LD_VAR 0 8
38020: PPUSH
38021: CALL_OW 488
38025: NOT
38026: IFFALSE 38030
// continue ;
38028: GO 37962
// if HexInfo ( _x , _y ) = 0 then
38030: LD_VAR 0 7
38034: PPUSH
38035: LD_VAR 0 8
38039: PPUSH
38040: CALL_OW 428
38044: PUSH
38045: LD_INT 0
38047: EQUAL
38048: IFFALSE 38073
// begin ComMoveXY ( unit , _x , _y ) ;
38050: LD_VAR 0 1
38054: PPUSH
38055: LD_VAR 0 7
38059: PPUSH
38060: LD_VAR 0 8
38064: PPUSH
38065: CALL_OW 111
// exit ;
38069: POP
38070: POP
38071: GO 38077
// end ; end ;
38073: GO 37962
38075: POP
38076: POP
// end ;
38077: LD_VAR 0 3
38081: RET
// export function ScanBase ( side , base_area ) ; begin
38082: LD_INT 0
38084: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
38085: LD_ADDR_VAR 0 3
38089: PUSH
38090: LD_VAR 0 2
38094: PPUSH
38095: LD_INT 81
38097: PUSH
38098: LD_VAR 0 1
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: PPUSH
38107: CALL_OW 70
38111: ST_TO_ADDR
// end ;
38112: LD_VAR 0 3
38116: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
38117: LD_INT 0
38119: PPUSH
38120: PPUSH
38121: PPUSH
38122: PPUSH
// result := false ;
38123: LD_ADDR_VAR 0 2
38127: PUSH
38128: LD_INT 0
38130: ST_TO_ADDR
// side := GetSide ( unit ) ;
38131: LD_ADDR_VAR 0 3
38135: PUSH
38136: LD_VAR 0 1
38140: PPUSH
38141: CALL_OW 255
38145: ST_TO_ADDR
// nat := GetNation ( unit ) ;
38146: LD_ADDR_VAR 0 4
38150: PUSH
38151: LD_VAR 0 1
38155: PPUSH
38156: CALL_OW 248
38160: ST_TO_ADDR
// case nat of 1 :
38161: LD_VAR 0 4
38165: PUSH
38166: LD_INT 1
38168: DOUBLE
38169: EQUAL
38170: IFTRUE 38174
38172: GO 38185
38174: POP
// tech := tech_lassight ; 2 :
38175: LD_ADDR_VAR 0 5
38179: PUSH
38180: LD_INT 12
38182: ST_TO_ADDR
38183: GO 38224
38185: LD_INT 2
38187: DOUBLE
38188: EQUAL
38189: IFTRUE 38193
38191: GO 38204
38193: POP
// tech := tech_mortar ; 3 :
38194: LD_ADDR_VAR 0 5
38198: PUSH
38199: LD_INT 41
38201: ST_TO_ADDR
38202: GO 38224
38204: LD_INT 3
38206: DOUBLE
38207: EQUAL
38208: IFTRUE 38212
38210: GO 38223
38212: POP
// tech := tech_bazooka ; end ;
38213: LD_ADDR_VAR 0 5
38217: PUSH
38218: LD_INT 44
38220: ST_TO_ADDR
38221: GO 38224
38223: POP
// if Researched ( side , tech ) then
38224: LD_VAR 0 3
38228: PPUSH
38229: LD_VAR 0 5
38233: PPUSH
38234: CALL_OW 325
38238: IFFALSE 38265
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
38240: LD_ADDR_VAR 0 2
38244: PUSH
38245: LD_INT 5
38247: PUSH
38248: LD_INT 8
38250: PUSH
38251: LD_INT 9
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: LIST
38258: PUSH
38259: LD_VAR 0 4
38263: ARRAY
38264: ST_TO_ADDR
// end ;
38265: LD_VAR 0 2
38269: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
38270: LD_INT 0
38272: PPUSH
38273: PPUSH
38274: PPUSH
// if not mines then
38275: LD_VAR 0 2
38279: NOT
38280: IFFALSE 38284
// exit ;
38282: GO 38428
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38284: LD_ADDR_VAR 0 5
38288: PUSH
38289: LD_INT 81
38291: PUSH
38292: LD_VAR 0 1
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 3
38303: PUSH
38304: LD_INT 21
38306: PUSH
38307: LD_INT 3
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: PPUSH
38322: CALL_OW 69
38326: ST_TO_ADDR
// for i in mines do
38327: LD_ADDR_VAR 0 4
38331: PUSH
38332: LD_VAR 0 2
38336: PUSH
38337: FOR_IN
38338: IFFALSE 38426
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38340: LD_VAR 0 4
38344: PUSH
38345: LD_INT 1
38347: ARRAY
38348: PPUSH
38349: LD_VAR 0 4
38353: PUSH
38354: LD_INT 2
38356: ARRAY
38357: PPUSH
38358: CALL_OW 458
38362: NOT
38363: IFFALSE 38367
// continue ;
38365: GO 38337
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38367: LD_VAR 0 4
38371: PUSH
38372: LD_INT 1
38374: ARRAY
38375: PPUSH
38376: LD_VAR 0 4
38380: PUSH
38381: LD_INT 2
38383: ARRAY
38384: PPUSH
38385: CALL_OW 428
38389: PUSH
38390: LD_VAR 0 5
38394: IN
38395: IFFALSE 38424
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38397: LD_VAR 0 4
38401: PUSH
38402: LD_INT 1
38404: ARRAY
38405: PPUSH
38406: LD_VAR 0 4
38410: PUSH
38411: LD_INT 2
38413: ARRAY
38414: PPUSH
38415: LD_VAR 0 1
38419: PPUSH
38420: CALL_OW 456
// end ;
38424: GO 38337
38426: POP
38427: POP
// end ;
38428: LD_VAR 0 3
38432: RET
// export function Count ( array ) ; begin
38433: LD_INT 0
38435: PPUSH
// result := array + 0 ;
38436: LD_ADDR_VAR 0 2
38440: PUSH
38441: LD_VAR 0 1
38445: PUSH
38446: LD_INT 0
38448: PLUS
38449: ST_TO_ADDR
// end ;
38450: LD_VAR 0 2
38454: RET
// export function IsEmpty ( building ) ; begin
38455: LD_INT 0
38457: PPUSH
// if not building then
38458: LD_VAR 0 1
38462: NOT
38463: IFFALSE 38467
// exit ;
38465: GO 38510
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38467: LD_ADDR_VAR 0 2
38471: PUSH
38472: LD_VAR 0 1
38476: PUSH
38477: LD_INT 22
38479: PUSH
38480: LD_VAR 0 1
38484: PPUSH
38485: CALL_OW 255
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: PUSH
38494: LD_INT 58
38496: PUSH
38497: EMPTY
38498: LIST
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: PPUSH
38504: CALL_OW 69
38508: IN
38509: ST_TO_ADDR
// end ;
38510: LD_VAR 0 2
38514: RET
// export function IsNotFull ( building ) ; var places ; begin
38515: LD_INT 0
38517: PPUSH
38518: PPUSH
// if not building then
38519: LD_VAR 0 1
38523: NOT
38524: IFFALSE 38528
// exit ;
38526: GO 38556
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
38528: LD_ADDR_VAR 0 2
38532: PUSH
38533: LD_VAR 0 1
38537: PPUSH
38538: LD_INT 3
38540: PUSH
38541: LD_INT 62
38543: PUSH
38544: EMPTY
38545: LIST
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: PPUSH
38551: CALL_OW 72
38555: ST_TO_ADDR
// end ;
38556: LD_VAR 0 2
38560: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
38561: LD_INT 0
38563: PPUSH
38564: PPUSH
38565: PPUSH
38566: PPUSH
// tmp := [ ] ;
38567: LD_ADDR_VAR 0 3
38571: PUSH
38572: EMPTY
38573: ST_TO_ADDR
// list := [ ] ;
38574: LD_ADDR_VAR 0 5
38578: PUSH
38579: EMPTY
38580: ST_TO_ADDR
// for i = 16 to 25 do
38581: LD_ADDR_VAR 0 4
38585: PUSH
38586: DOUBLE
38587: LD_INT 16
38589: DEC
38590: ST_TO_ADDR
38591: LD_INT 25
38593: PUSH
38594: FOR_TO
38595: IFFALSE 38668
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
38597: LD_ADDR_VAR 0 3
38601: PUSH
38602: LD_VAR 0 3
38606: PUSH
38607: LD_INT 22
38609: PUSH
38610: LD_VAR 0 1
38614: PPUSH
38615: CALL_OW 255
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: PUSH
38624: LD_INT 91
38626: PUSH
38627: LD_VAR 0 1
38631: PUSH
38632: LD_INT 6
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: LIST
38639: PUSH
38640: LD_INT 30
38642: PUSH
38643: LD_VAR 0 4
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: LIST
38656: PUSH
38657: EMPTY
38658: LIST
38659: PPUSH
38660: CALL_OW 69
38664: ADD
38665: ST_TO_ADDR
38666: GO 38594
38668: POP
38669: POP
// for i = 1 to tmp do
38670: LD_ADDR_VAR 0 4
38674: PUSH
38675: DOUBLE
38676: LD_INT 1
38678: DEC
38679: ST_TO_ADDR
38680: LD_VAR 0 3
38684: PUSH
38685: FOR_TO
38686: IFFALSE 38774
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
38688: LD_ADDR_VAR 0 5
38692: PUSH
38693: LD_VAR 0 5
38697: PUSH
38698: LD_VAR 0 3
38702: PUSH
38703: LD_VAR 0 4
38707: ARRAY
38708: PPUSH
38709: CALL_OW 266
38713: PUSH
38714: LD_VAR 0 3
38718: PUSH
38719: LD_VAR 0 4
38723: ARRAY
38724: PPUSH
38725: CALL_OW 250
38729: PUSH
38730: LD_VAR 0 3
38734: PUSH
38735: LD_VAR 0 4
38739: ARRAY
38740: PPUSH
38741: CALL_OW 251
38745: PUSH
38746: LD_VAR 0 3
38750: PUSH
38751: LD_VAR 0 4
38755: ARRAY
38756: PPUSH
38757: CALL_OW 254
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: PUSH
38768: EMPTY
38769: LIST
38770: ADD
38771: ST_TO_ADDR
38772: GO 38685
38774: POP
38775: POP
// result := list ;
38776: LD_ADDR_VAR 0 2
38780: PUSH
38781: LD_VAR 0 5
38785: ST_TO_ADDR
// end ;
38786: LD_VAR 0 2
38790: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
38791: LD_INT 0
38793: PPUSH
38794: PPUSH
38795: PPUSH
38796: PPUSH
38797: PPUSH
38798: PPUSH
38799: PPUSH
// if not factory then
38800: LD_VAR 0 1
38804: NOT
38805: IFFALSE 38809
// exit ;
38807: GO 39402
// if control = control_apeman then
38809: LD_VAR 0 4
38813: PUSH
38814: LD_INT 5
38816: EQUAL
38817: IFFALSE 38926
// begin tmp := UnitsInside ( factory ) ;
38819: LD_ADDR_VAR 0 8
38823: PUSH
38824: LD_VAR 0 1
38828: PPUSH
38829: CALL_OW 313
38833: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
38834: LD_VAR 0 8
38838: PPUSH
38839: LD_INT 25
38841: PUSH
38842: LD_INT 12
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PPUSH
38849: CALL_OW 72
38853: NOT
38854: IFFALSE 38864
// control := control_manual ;
38856: LD_ADDR_VAR 0 4
38860: PUSH
38861: LD_INT 1
38863: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
38864: LD_ADDR_VAR 0 8
38868: PUSH
38869: LD_VAR 0 1
38873: PPUSH
38874: CALL 38561 0 1
38878: ST_TO_ADDR
// if tmp then
38879: LD_VAR 0 8
38883: IFFALSE 38926
// begin for i in tmp do
38885: LD_ADDR_VAR 0 7
38889: PUSH
38890: LD_VAR 0 8
38894: PUSH
38895: FOR_IN
38896: IFFALSE 38924
// if i [ 1 ] = b_ext_radio then
38898: LD_VAR 0 7
38902: PUSH
38903: LD_INT 1
38905: ARRAY
38906: PUSH
38907: LD_INT 22
38909: EQUAL
38910: IFFALSE 38922
// begin control := control_remote ;
38912: LD_ADDR_VAR 0 4
38916: PUSH
38917: LD_INT 2
38919: ST_TO_ADDR
// break ;
38920: GO 38924
// end ;
38922: GO 38895
38924: POP
38925: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38926: LD_VAR 0 1
38930: PPUSH
38931: LD_VAR 0 2
38935: PPUSH
38936: LD_VAR 0 3
38940: PPUSH
38941: LD_VAR 0 4
38945: PPUSH
38946: LD_VAR 0 5
38950: PPUSH
38951: CALL_OW 448
38955: IFFALSE 38990
// begin result := [ chassis , engine , control , weapon ] ;
38957: LD_ADDR_VAR 0 6
38961: PUSH
38962: LD_VAR 0 2
38966: PUSH
38967: LD_VAR 0 3
38971: PUSH
38972: LD_VAR 0 4
38976: PUSH
38977: LD_VAR 0 5
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: LIST
38986: LIST
38987: ST_TO_ADDR
// exit ;
38988: GO 39402
// end ; _chassis := AvailableChassisList ( factory ) ;
38990: LD_ADDR_VAR 0 9
38994: PUSH
38995: LD_VAR 0 1
38999: PPUSH
39000: CALL_OW 475
39004: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
39005: LD_ADDR_VAR 0 11
39009: PUSH
39010: LD_VAR 0 1
39014: PPUSH
39015: CALL_OW 476
39019: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
39020: LD_ADDR_VAR 0 12
39024: PUSH
39025: LD_VAR 0 1
39029: PPUSH
39030: CALL_OW 477
39034: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
39035: LD_ADDR_VAR 0 10
39039: PUSH
39040: LD_VAR 0 1
39044: PPUSH
39045: CALL_OW 478
39049: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
39050: LD_VAR 0 9
39054: NOT
39055: PUSH
39056: LD_VAR 0 11
39060: NOT
39061: OR
39062: PUSH
39063: LD_VAR 0 12
39067: NOT
39068: OR
39069: PUSH
39070: LD_VAR 0 10
39074: NOT
39075: OR
39076: IFFALSE 39111
// begin result := [ chassis , engine , control , weapon ] ;
39078: LD_ADDR_VAR 0 6
39082: PUSH
39083: LD_VAR 0 2
39087: PUSH
39088: LD_VAR 0 3
39092: PUSH
39093: LD_VAR 0 4
39097: PUSH
39098: LD_VAR 0 5
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: LIST
39107: LIST
39108: ST_TO_ADDR
// exit ;
39109: GO 39402
// end ; if not chassis in _chassis then
39111: LD_VAR 0 2
39115: PUSH
39116: LD_VAR 0 9
39120: IN
39121: NOT
39122: IFFALSE 39148
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
39124: LD_ADDR_VAR 0 2
39128: PUSH
39129: LD_VAR 0 9
39133: PUSH
39134: LD_INT 1
39136: PPUSH
39137: LD_VAR 0 9
39141: PPUSH
39142: CALL_OW 12
39146: ARRAY
39147: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
39148: LD_VAR 0 2
39152: PPUSH
39153: LD_VAR 0 3
39157: PPUSH
39158: CALL 39407 0 2
39162: NOT
39163: IFFALSE 39222
// repeat engine := _engine [ 1 ] ;
39165: LD_ADDR_VAR 0 3
39169: PUSH
39170: LD_VAR 0 11
39174: PUSH
39175: LD_INT 1
39177: ARRAY
39178: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
39179: LD_ADDR_VAR 0 11
39183: PUSH
39184: LD_VAR 0 11
39188: PPUSH
39189: LD_INT 1
39191: PPUSH
39192: CALL_OW 3
39196: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
39197: LD_VAR 0 2
39201: PPUSH
39202: LD_VAR 0 3
39206: PPUSH
39207: CALL 39407 0 2
39211: PUSH
39212: LD_VAR 0 11
39216: PUSH
39217: EMPTY
39218: EQUAL
39219: OR
39220: IFFALSE 39165
// if not control in _control then
39222: LD_VAR 0 4
39226: PUSH
39227: LD_VAR 0 12
39231: IN
39232: NOT
39233: IFFALSE 39259
// control := _control [ rand ( 1 , _control ) ] ;
39235: LD_ADDR_VAR 0 4
39239: PUSH
39240: LD_VAR 0 12
39244: PUSH
39245: LD_INT 1
39247: PPUSH
39248: LD_VAR 0 12
39252: PPUSH
39253: CALL_OW 12
39257: ARRAY
39258: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
39259: LD_VAR 0 2
39263: PPUSH
39264: LD_VAR 0 5
39268: PPUSH
39269: CALL 39627 0 2
39273: NOT
39274: IFFALSE 39333
// repeat weapon := _weapon [ 1 ] ;
39276: LD_ADDR_VAR 0 5
39280: PUSH
39281: LD_VAR 0 10
39285: PUSH
39286: LD_INT 1
39288: ARRAY
39289: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
39290: LD_ADDR_VAR 0 10
39294: PUSH
39295: LD_VAR 0 10
39299: PPUSH
39300: LD_INT 1
39302: PPUSH
39303: CALL_OW 3
39307: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
39308: LD_VAR 0 2
39312: PPUSH
39313: LD_VAR 0 5
39317: PPUSH
39318: CALL 39627 0 2
39322: PUSH
39323: LD_VAR 0 10
39327: PUSH
39328: EMPTY
39329: EQUAL
39330: OR
39331: IFFALSE 39276
// result := [ ] ;
39333: LD_ADDR_VAR 0 6
39337: PUSH
39338: EMPTY
39339: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39340: LD_VAR 0 1
39344: PPUSH
39345: LD_VAR 0 2
39349: PPUSH
39350: LD_VAR 0 3
39354: PPUSH
39355: LD_VAR 0 4
39359: PPUSH
39360: LD_VAR 0 5
39364: PPUSH
39365: CALL_OW 448
39369: IFFALSE 39402
// result := [ chassis , engine , control , weapon ] ;
39371: LD_ADDR_VAR 0 6
39375: PUSH
39376: LD_VAR 0 2
39380: PUSH
39381: LD_VAR 0 3
39385: PUSH
39386: LD_VAR 0 4
39390: PUSH
39391: LD_VAR 0 5
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: ST_TO_ADDR
// end ;
39402: LD_VAR 0 6
39406: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39407: LD_INT 0
39409: PPUSH
// if not chassis or not engine then
39410: LD_VAR 0 1
39414: NOT
39415: PUSH
39416: LD_VAR 0 2
39420: NOT
39421: OR
39422: IFFALSE 39426
// exit ;
39424: GO 39622
// case engine of engine_solar :
39426: LD_VAR 0 2
39430: PUSH
39431: LD_INT 2
39433: DOUBLE
39434: EQUAL
39435: IFTRUE 39439
39437: GO 39477
39439: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39440: LD_ADDR_VAR 0 3
39444: PUSH
39445: LD_INT 11
39447: PUSH
39448: LD_INT 12
39450: PUSH
39451: LD_INT 13
39453: PUSH
39454: LD_INT 14
39456: PUSH
39457: LD_INT 1
39459: PUSH
39460: LD_INT 2
39462: PUSH
39463: LD_INT 3
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: LIST
39470: LIST
39471: LIST
39472: LIST
39473: LIST
39474: ST_TO_ADDR
39475: GO 39606
39477: LD_INT 1
39479: DOUBLE
39480: EQUAL
39481: IFTRUE 39485
39483: GO 39547
39485: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39486: LD_ADDR_VAR 0 3
39490: PUSH
39491: LD_INT 11
39493: PUSH
39494: LD_INT 12
39496: PUSH
39497: LD_INT 13
39499: PUSH
39500: LD_INT 14
39502: PUSH
39503: LD_INT 1
39505: PUSH
39506: LD_INT 2
39508: PUSH
39509: LD_INT 3
39511: PUSH
39512: LD_INT 4
39514: PUSH
39515: LD_INT 5
39517: PUSH
39518: LD_INT 21
39520: PUSH
39521: LD_INT 23
39523: PUSH
39524: LD_INT 22
39526: PUSH
39527: LD_INT 24
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: ST_TO_ADDR
39545: GO 39606
39547: LD_INT 3
39549: DOUBLE
39550: EQUAL
39551: IFTRUE 39555
39553: GO 39605
39555: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39556: LD_ADDR_VAR 0 3
39560: PUSH
39561: LD_INT 13
39563: PUSH
39564: LD_INT 14
39566: PUSH
39567: LD_INT 2
39569: PUSH
39570: LD_INT 3
39572: PUSH
39573: LD_INT 4
39575: PUSH
39576: LD_INT 5
39578: PUSH
39579: LD_INT 21
39581: PUSH
39582: LD_INT 22
39584: PUSH
39585: LD_INT 23
39587: PUSH
39588: LD_INT 24
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: ST_TO_ADDR
39603: GO 39606
39605: POP
// result := ( chassis in result ) ;
39606: LD_ADDR_VAR 0 3
39610: PUSH
39611: LD_VAR 0 1
39615: PUSH
39616: LD_VAR 0 3
39620: IN
39621: ST_TO_ADDR
// end ;
39622: LD_VAR 0 3
39626: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
39627: LD_INT 0
39629: PPUSH
// if not chassis or not weapon then
39630: LD_VAR 0 1
39634: NOT
39635: PUSH
39636: LD_VAR 0 2
39640: NOT
39641: OR
39642: IFFALSE 39646
// exit ;
39644: GO 40706
// case weapon of us_machine_gun :
39646: LD_VAR 0 2
39650: PUSH
39651: LD_INT 2
39653: DOUBLE
39654: EQUAL
39655: IFTRUE 39659
39657: GO 39689
39659: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
39660: LD_ADDR_VAR 0 3
39664: PUSH
39665: LD_INT 1
39667: PUSH
39668: LD_INT 2
39670: PUSH
39671: LD_INT 3
39673: PUSH
39674: LD_INT 4
39676: PUSH
39677: LD_INT 5
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: LIST
39684: LIST
39685: LIST
39686: ST_TO_ADDR
39687: GO 40690
39689: LD_INT 3
39691: DOUBLE
39692: EQUAL
39693: IFTRUE 39697
39695: GO 39727
39697: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
39698: LD_ADDR_VAR 0 3
39702: PUSH
39703: LD_INT 1
39705: PUSH
39706: LD_INT 2
39708: PUSH
39709: LD_INT 3
39711: PUSH
39712: LD_INT 4
39714: PUSH
39715: LD_INT 5
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: ST_TO_ADDR
39725: GO 40690
39727: LD_INT 11
39729: DOUBLE
39730: EQUAL
39731: IFTRUE 39735
39733: GO 39765
39735: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
39736: LD_ADDR_VAR 0 3
39740: PUSH
39741: LD_INT 1
39743: PUSH
39744: LD_INT 2
39746: PUSH
39747: LD_INT 3
39749: PUSH
39750: LD_INT 4
39752: PUSH
39753: LD_INT 5
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: LIST
39762: ST_TO_ADDR
39763: GO 40690
39765: LD_INT 4
39767: DOUBLE
39768: EQUAL
39769: IFTRUE 39773
39771: GO 39799
39773: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
39774: LD_ADDR_VAR 0 3
39778: PUSH
39779: LD_INT 2
39781: PUSH
39782: LD_INT 3
39784: PUSH
39785: LD_INT 4
39787: PUSH
39788: LD_INT 5
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: ST_TO_ADDR
39797: GO 40690
39799: LD_INT 5
39801: DOUBLE
39802: EQUAL
39803: IFTRUE 39807
39805: GO 39833
39807: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
39808: LD_ADDR_VAR 0 3
39812: PUSH
39813: LD_INT 2
39815: PUSH
39816: LD_INT 3
39818: PUSH
39819: LD_INT 4
39821: PUSH
39822: LD_INT 5
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: LIST
39829: LIST
39830: ST_TO_ADDR
39831: GO 40690
39833: LD_INT 9
39835: DOUBLE
39836: EQUAL
39837: IFTRUE 39841
39839: GO 39867
39841: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
39842: LD_ADDR_VAR 0 3
39846: PUSH
39847: LD_INT 2
39849: PUSH
39850: LD_INT 3
39852: PUSH
39853: LD_INT 4
39855: PUSH
39856: LD_INT 5
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: ST_TO_ADDR
39865: GO 40690
39867: LD_INT 7
39869: DOUBLE
39870: EQUAL
39871: IFTRUE 39875
39873: GO 39901
39875: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
39876: LD_ADDR_VAR 0 3
39880: PUSH
39881: LD_INT 2
39883: PUSH
39884: LD_INT 3
39886: PUSH
39887: LD_INT 4
39889: PUSH
39890: LD_INT 5
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: ST_TO_ADDR
39899: GO 40690
39901: LD_INT 12
39903: DOUBLE
39904: EQUAL
39905: IFTRUE 39909
39907: GO 39935
39909: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
39910: LD_ADDR_VAR 0 3
39914: PUSH
39915: LD_INT 2
39917: PUSH
39918: LD_INT 3
39920: PUSH
39921: LD_INT 4
39923: PUSH
39924: LD_INT 5
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: LIST
39931: LIST
39932: ST_TO_ADDR
39933: GO 40690
39935: LD_INT 13
39937: DOUBLE
39938: EQUAL
39939: IFTRUE 39943
39941: GO 39969
39943: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
39944: LD_ADDR_VAR 0 3
39948: PUSH
39949: LD_INT 2
39951: PUSH
39952: LD_INT 3
39954: PUSH
39955: LD_INT 4
39957: PUSH
39958: LD_INT 5
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: ST_TO_ADDR
39967: GO 40690
39969: LD_INT 14
39971: DOUBLE
39972: EQUAL
39973: IFTRUE 39977
39975: GO 39995
39977: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
39978: LD_ADDR_VAR 0 3
39982: PUSH
39983: LD_INT 4
39985: PUSH
39986: LD_INT 5
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: ST_TO_ADDR
39993: GO 40690
39995: LD_INT 6
39997: DOUBLE
39998: EQUAL
39999: IFTRUE 40003
40001: GO 40021
40003: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
40004: LD_ADDR_VAR 0 3
40008: PUSH
40009: LD_INT 4
40011: PUSH
40012: LD_INT 5
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: ST_TO_ADDR
40019: GO 40690
40021: LD_INT 10
40023: DOUBLE
40024: EQUAL
40025: IFTRUE 40029
40027: GO 40047
40029: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
40030: LD_ADDR_VAR 0 3
40034: PUSH
40035: LD_INT 4
40037: PUSH
40038: LD_INT 5
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: ST_TO_ADDR
40045: GO 40690
40047: LD_INT 22
40049: DOUBLE
40050: EQUAL
40051: IFTRUE 40055
40053: GO 40081
40055: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
40056: LD_ADDR_VAR 0 3
40060: PUSH
40061: LD_INT 11
40063: PUSH
40064: LD_INT 12
40066: PUSH
40067: LD_INT 13
40069: PUSH
40070: LD_INT 14
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: ST_TO_ADDR
40079: GO 40690
40081: LD_INT 23
40083: DOUBLE
40084: EQUAL
40085: IFTRUE 40089
40087: GO 40115
40089: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
40090: LD_ADDR_VAR 0 3
40094: PUSH
40095: LD_INT 11
40097: PUSH
40098: LD_INT 12
40100: PUSH
40101: LD_INT 13
40103: PUSH
40104: LD_INT 14
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: ST_TO_ADDR
40113: GO 40690
40115: LD_INT 24
40117: DOUBLE
40118: EQUAL
40119: IFTRUE 40123
40121: GO 40149
40123: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
40124: LD_ADDR_VAR 0 3
40128: PUSH
40129: LD_INT 11
40131: PUSH
40132: LD_INT 12
40134: PUSH
40135: LD_INT 13
40137: PUSH
40138: LD_INT 14
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: LIST
40145: LIST
40146: ST_TO_ADDR
40147: GO 40690
40149: LD_INT 30
40151: DOUBLE
40152: EQUAL
40153: IFTRUE 40157
40155: GO 40183
40157: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
40158: LD_ADDR_VAR 0 3
40162: PUSH
40163: LD_INT 11
40165: PUSH
40166: LD_INT 12
40168: PUSH
40169: LD_INT 13
40171: PUSH
40172: LD_INT 14
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: LIST
40179: LIST
40180: ST_TO_ADDR
40181: GO 40690
40183: LD_INT 25
40185: DOUBLE
40186: EQUAL
40187: IFTRUE 40191
40189: GO 40209
40191: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
40192: LD_ADDR_VAR 0 3
40196: PUSH
40197: LD_INT 13
40199: PUSH
40200: LD_INT 14
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: ST_TO_ADDR
40207: GO 40690
40209: LD_INT 27
40211: DOUBLE
40212: EQUAL
40213: IFTRUE 40217
40215: GO 40235
40217: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
40218: LD_ADDR_VAR 0 3
40222: PUSH
40223: LD_INT 13
40225: PUSH
40226: LD_INT 14
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: ST_TO_ADDR
40233: GO 40690
40235: LD_INT 92
40237: DOUBLE
40238: EQUAL
40239: IFTRUE 40243
40241: GO 40269
40243: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
40244: LD_ADDR_VAR 0 3
40248: PUSH
40249: LD_INT 11
40251: PUSH
40252: LD_INT 12
40254: PUSH
40255: LD_INT 13
40257: PUSH
40258: LD_INT 14
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: LIST
40265: LIST
40266: ST_TO_ADDR
40267: GO 40690
40269: LD_INT 28
40271: DOUBLE
40272: EQUAL
40273: IFTRUE 40277
40275: GO 40295
40277: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
40278: LD_ADDR_VAR 0 3
40282: PUSH
40283: LD_INT 13
40285: PUSH
40286: LD_INT 14
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: ST_TO_ADDR
40293: GO 40690
40295: LD_INT 29
40297: DOUBLE
40298: EQUAL
40299: IFTRUE 40303
40301: GO 40321
40303: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
40304: LD_ADDR_VAR 0 3
40308: PUSH
40309: LD_INT 13
40311: PUSH
40312: LD_INT 14
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: ST_TO_ADDR
40319: GO 40690
40321: LD_INT 31
40323: DOUBLE
40324: EQUAL
40325: IFTRUE 40329
40327: GO 40347
40329: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
40330: LD_ADDR_VAR 0 3
40334: PUSH
40335: LD_INT 13
40337: PUSH
40338: LD_INT 14
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: ST_TO_ADDR
40345: GO 40690
40347: LD_INT 26
40349: DOUBLE
40350: EQUAL
40351: IFTRUE 40355
40353: GO 40373
40355: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40356: LD_ADDR_VAR 0 3
40360: PUSH
40361: LD_INT 13
40363: PUSH
40364: LD_INT 14
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: ST_TO_ADDR
40371: GO 40690
40373: LD_INT 42
40375: DOUBLE
40376: EQUAL
40377: IFTRUE 40381
40379: GO 40407
40381: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40382: LD_ADDR_VAR 0 3
40386: PUSH
40387: LD_INT 21
40389: PUSH
40390: LD_INT 22
40392: PUSH
40393: LD_INT 23
40395: PUSH
40396: LD_INT 24
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: ST_TO_ADDR
40405: GO 40690
40407: LD_INT 43
40409: DOUBLE
40410: EQUAL
40411: IFTRUE 40415
40413: GO 40441
40415: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40416: LD_ADDR_VAR 0 3
40420: PUSH
40421: LD_INT 21
40423: PUSH
40424: LD_INT 22
40426: PUSH
40427: LD_INT 23
40429: PUSH
40430: LD_INT 24
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: ST_TO_ADDR
40439: GO 40690
40441: LD_INT 44
40443: DOUBLE
40444: EQUAL
40445: IFTRUE 40449
40447: GO 40475
40449: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40450: LD_ADDR_VAR 0 3
40454: PUSH
40455: LD_INT 21
40457: PUSH
40458: LD_INT 22
40460: PUSH
40461: LD_INT 23
40463: PUSH
40464: LD_INT 24
40466: PUSH
40467: EMPTY
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: ST_TO_ADDR
40473: GO 40690
40475: LD_INT 45
40477: DOUBLE
40478: EQUAL
40479: IFTRUE 40483
40481: GO 40509
40483: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40484: LD_ADDR_VAR 0 3
40488: PUSH
40489: LD_INT 21
40491: PUSH
40492: LD_INT 22
40494: PUSH
40495: LD_INT 23
40497: PUSH
40498: LD_INT 24
40500: PUSH
40501: EMPTY
40502: LIST
40503: LIST
40504: LIST
40505: LIST
40506: ST_TO_ADDR
40507: GO 40690
40509: LD_INT 49
40511: DOUBLE
40512: EQUAL
40513: IFTRUE 40517
40515: GO 40543
40517: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
40518: LD_ADDR_VAR 0 3
40522: PUSH
40523: LD_INT 21
40525: PUSH
40526: LD_INT 22
40528: PUSH
40529: LD_INT 23
40531: PUSH
40532: LD_INT 24
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: LIST
40539: LIST
40540: ST_TO_ADDR
40541: GO 40690
40543: LD_INT 51
40545: DOUBLE
40546: EQUAL
40547: IFTRUE 40551
40549: GO 40577
40551: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
40552: LD_ADDR_VAR 0 3
40556: PUSH
40557: LD_INT 21
40559: PUSH
40560: LD_INT 22
40562: PUSH
40563: LD_INT 23
40565: PUSH
40566: LD_INT 24
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: ST_TO_ADDR
40575: GO 40690
40577: LD_INT 52
40579: DOUBLE
40580: EQUAL
40581: IFTRUE 40585
40583: GO 40611
40585: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
40586: LD_ADDR_VAR 0 3
40590: PUSH
40591: LD_INT 21
40593: PUSH
40594: LD_INT 22
40596: PUSH
40597: LD_INT 23
40599: PUSH
40600: LD_INT 24
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: ST_TO_ADDR
40609: GO 40690
40611: LD_INT 53
40613: DOUBLE
40614: EQUAL
40615: IFTRUE 40619
40617: GO 40637
40619: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
40620: LD_ADDR_VAR 0 3
40624: PUSH
40625: LD_INT 23
40627: PUSH
40628: LD_INT 24
40630: PUSH
40631: EMPTY
40632: LIST
40633: LIST
40634: ST_TO_ADDR
40635: GO 40690
40637: LD_INT 46
40639: DOUBLE
40640: EQUAL
40641: IFTRUE 40645
40643: GO 40663
40645: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
40646: LD_ADDR_VAR 0 3
40650: PUSH
40651: LD_INT 23
40653: PUSH
40654: LD_INT 24
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: ST_TO_ADDR
40661: GO 40690
40663: LD_INT 47
40665: DOUBLE
40666: EQUAL
40667: IFTRUE 40671
40669: GO 40689
40671: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40672: LD_ADDR_VAR 0 3
40676: PUSH
40677: LD_INT 23
40679: PUSH
40680: LD_INT 24
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: ST_TO_ADDR
40687: GO 40690
40689: POP
// result := ( chassis in result ) ;
40690: LD_ADDR_VAR 0 3
40694: PUSH
40695: LD_VAR 0 1
40699: PUSH
40700: LD_VAR 0 3
40704: IN
40705: ST_TO_ADDR
// end ;
40706: LD_VAR 0 3
40710: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
40711: LD_INT 0
40713: PPUSH
40714: PPUSH
40715: PPUSH
40716: PPUSH
40717: PPUSH
40718: PPUSH
40719: PPUSH
// result := array ;
40720: LD_ADDR_VAR 0 5
40724: PUSH
40725: LD_VAR 0 1
40729: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
40730: LD_VAR 0 1
40734: NOT
40735: PUSH
40736: LD_VAR 0 2
40740: NOT
40741: OR
40742: PUSH
40743: LD_VAR 0 3
40747: NOT
40748: OR
40749: PUSH
40750: LD_VAR 0 2
40754: PUSH
40755: LD_VAR 0 1
40759: GREATER
40760: OR
40761: PUSH
40762: LD_VAR 0 3
40766: PUSH
40767: LD_VAR 0 1
40771: GREATER
40772: OR
40773: IFFALSE 40777
// exit ;
40775: GO 41073
// if direction then
40777: LD_VAR 0 4
40781: IFFALSE 40845
// begin d := 1 ;
40783: LD_ADDR_VAR 0 9
40787: PUSH
40788: LD_INT 1
40790: ST_TO_ADDR
// if i_from > i_to then
40791: LD_VAR 0 2
40795: PUSH
40796: LD_VAR 0 3
40800: GREATER
40801: IFFALSE 40827
// length := ( array - i_from ) + i_to else
40803: LD_ADDR_VAR 0 11
40807: PUSH
40808: LD_VAR 0 1
40812: PUSH
40813: LD_VAR 0 2
40817: MINUS
40818: PUSH
40819: LD_VAR 0 3
40823: PLUS
40824: ST_TO_ADDR
40825: GO 40843
// length := i_to - i_from ;
40827: LD_ADDR_VAR 0 11
40831: PUSH
40832: LD_VAR 0 3
40836: PUSH
40837: LD_VAR 0 2
40841: MINUS
40842: ST_TO_ADDR
// end else
40843: GO 40906
// begin d := - 1 ;
40845: LD_ADDR_VAR 0 9
40849: PUSH
40850: LD_INT 1
40852: NEG
40853: ST_TO_ADDR
// if i_from > i_to then
40854: LD_VAR 0 2
40858: PUSH
40859: LD_VAR 0 3
40863: GREATER
40864: IFFALSE 40884
// length := i_from - i_to else
40866: LD_ADDR_VAR 0 11
40870: PUSH
40871: LD_VAR 0 2
40875: PUSH
40876: LD_VAR 0 3
40880: MINUS
40881: ST_TO_ADDR
40882: GO 40906
// length := ( array - i_to ) + i_from ;
40884: LD_ADDR_VAR 0 11
40888: PUSH
40889: LD_VAR 0 1
40893: PUSH
40894: LD_VAR 0 3
40898: MINUS
40899: PUSH
40900: LD_VAR 0 2
40904: PLUS
40905: ST_TO_ADDR
// end ; if not length then
40906: LD_VAR 0 11
40910: NOT
40911: IFFALSE 40915
// exit ;
40913: GO 41073
// tmp := array ;
40915: LD_ADDR_VAR 0 10
40919: PUSH
40920: LD_VAR 0 1
40924: ST_TO_ADDR
// for i = 1 to length do
40925: LD_ADDR_VAR 0 6
40929: PUSH
40930: DOUBLE
40931: LD_INT 1
40933: DEC
40934: ST_TO_ADDR
40935: LD_VAR 0 11
40939: PUSH
40940: FOR_TO
40941: IFFALSE 41061
// begin for j = 1 to array do
40943: LD_ADDR_VAR 0 7
40947: PUSH
40948: DOUBLE
40949: LD_INT 1
40951: DEC
40952: ST_TO_ADDR
40953: LD_VAR 0 1
40957: PUSH
40958: FOR_TO
40959: IFFALSE 41047
// begin k := j + d ;
40961: LD_ADDR_VAR 0 8
40965: PUSH
40966: LD_VAR 0 7
40970: PUSH
40971: LD_VAR 0 9
40975: PLUS
40976: ST_TO_ADDR
// if k > array then
40977: LD_VAR 0 8
40981: PUSH
40982: LD_VAR 0 1
40986: GREATER
40987: IFFALSE 40997
// k := 1 ;
40989: LD_ADDR_VAR 0 8
40993: PUSH
40994: LD_INT 1
40996: ST_TO_ADDR
// if not k then
40997: LD_VAR 0 8
41001: NOT
41002: IFFALSE 41014
// k := array ;
41004: LD_ADDR_VAR 0 8
41008: PUSH
41009: LD_VAR 0 1
41013: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
41014: LD_ADDR_VAR 0 10
41018: PUSH
41019: LD_VAR 0 10
41023: PPUSH
41024: LD_VAR 0 8
41028: PPUSH
41029: LD_VAR 0 1
41033: PUSH
41034: LD_VAR 0 7
41038: ARRAY
41039: PPUSH
41040: CALL_OW 1
41044: ST_TO_ADDR
// end ;
41045: GO 40958
41047: POP
41048: POP
// array := tmp ;
41049: LD_ADDR_VAR 0 1
41053: PUSH
41054: LD_VAR 0 10
41058: ST_TO_ADDR
// end ;
41059: GO 40940
41061: POP
41062: POP
// result := array ;
41063: LD_ADDR_VAR 0 5
41067: PUSH
41068: LD_VAR 0 1
41072: ST_TO_ADDR
// end ;
41073: LD_VAR 0 5
41077: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
41078: LD_INT 0
41080: PPUSH
41081: PPUSH
// result := 0 ;
41082: LD_ADDR_VAR 0 3
41086: PUSH
41087: LD_INT 0
41089: ST_TO_ADDR
// if not array or not value in array then
41090: LD_VAR 0 1
41094: NOT
41095: PUSH
41096: LD_VAR 0 2
41100: PUSH
41101: LD_VAR 0 1
41105: IN
41106: NOT
41107: OR
41108: IFFALSE 41112
// exit ;
41110: GO 41166
// for i = 1 to array do
41112: LD_ADDR_VAR 0 4
41116: PUSH
41117: DOUBLE
41118: LD_INT 1
41120: DEC
41121: ST_TO_ADDR
41122: LD_VAR 0 1
41126: PUSH
41127: FOR_TO
41128: IFFALSE 41164
// if value = array [ i ] then
41130: LD_VAR 0 2
41134: PUSH
41135: LD_VAR 0 1
41139: PUSH
41140: LD_VAR 0 4
41144: ARRAY
41145: EQUAL
41146: IFFALSE 41162
// begin result := i ;
41148: LD_ADDR_VAR 0 3
41152: PUSH
41153: LD_VAR 0 4
41157: ST_TO_ADDR
// exit ;
41158: POP
41159: POP
41160: GO 41166
// end ;
41162: GO 41127
41164: POP
41165: POP
// end ;
41166: LD_VAR 0 3
41170: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
41171: LD_INT 0
41173: PPUSH
// vc_chassis := chassis ;
41174: LD_ADDR_OWVAR 37
41178: PUSH
41179: LD_VAR 0 1
41183: ST_TO_ADDR
// vc_engine := engine ;
41184: LD_ADDR_OWVAR 39
41188: PUSH
41189: LD_VAR 0 2
41193: ST_TO_ADDR
// vc_control := control ;
41194: LD_ADDR_OWVAR 38
41198: PUSH
41199: LD_VAR 0 3
41203: ST_TO_ADDR
// vc_weapon := weapon ;
41204: LD_ADDR_OWVAR 40
41208: PUSH
41209: LD_VAR 0 4
41213: ST_TO_ADDR
// vc_fuel_battery := fuel ;
41214: LD_ADDR_OWVAR 41
41218: PUSH
41219: LD_VAR 0 5
41223: ST_TO_ADDR
// end ;
41224: LD_VAR 0 6
41228: RET
// export function WantPlant ( unit ) ; var task ; begin
41229: LD_INT 0
41231: PPUSH
41232: PPUSH
// result := false ;
41233: LD_ADDR_VAR 0 2
41237: PUSH
41238: LD_INT 0
41240: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
41241: LD_ADDR_VAR 0 3
41245: PUSH
41246: LD_VAR 0 1
41250: PPUSH
41251: CALL_OW 437
41255: ST_TO_ADDR
// if task then
41256: LD_VAR 0 3
41260: IFFALSE 41288
// if task [ 1 ] [ 1 ] = p then
41262: LD_VAR 0 3
41266: PUSH
41267: LD_INT 1
41269: ARRAY
41270: PUSH
41271: LD_INT 1
41273: ARRAY
41274: PUSH
41275: LD_STRING p
41277: EQUAL
41278: IFFALSE 41288
// result := true ;
41280: LD_ADDR_VAR 0 2
41284: PUSH
41285: LD_INT 1
41287: ST_TO_ADDR
// end ;
41288: LD_VAR 0 2
41292: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
41293: LD_INT 0
41295: PPUSH
41296: PPUSH
41297: PPUSH
41298: PPUSH
// if pos < 1 then
41299: LD_VAR 0 2
41303: PUSH
41304: LD_INT 1
41306: LESS
41307: IFFALSE 41311
// exit ;
41309: GO 41614
// if pos = 1 then
41311: LD_VAR 0 2
41315: PUSH
41316: LD_INT 1
41318: EQUAL
41319: IFFALSE 41352
// result := Replace ( arr , pos [ 1 ] , value ) else
41321: LD_ADDR_VAR 0 4
41325: PUSH
41326: LD_VAR 0 1
41330: PPUSH
41331: LD_VAR 0 2
41335: PUSH
41336: LD_INT 1
41338: ARRAY
41339: PPUSH
41340: LD_VAR 0 3
41344: PPUSH
41345: CALL_OW 1
41349: ST_TO_ADDR
41350: GO 41614
// begin tmp := arr ;
41352: LD_ADDR_VAR 0 6
41356: PUSH
41357: LD_VAR 0 1
41361: ST_TO_ADDR
// s_arr := [ tmp ] ;
41362: LD_ADDR_VAR 0 7
41366: PUSH
41367: LD_VAR 0 6
41371: PUSH
41372: EMPTY
41373: LIST
41374: ST_TO_ADDR
// for i = 1 to pos - 1 do
41375: LD_ADDR_VAR 0 5
41379: PUSH
41380: DOUBLE
41381: LD_INT 1
41383: DEC
41384: ST_TO_ADDR
41385: LD_VAR 0 2
41389: PUSH
41390: LD_INT 1
41392: MINUS
41393: PUSH
41394: FOR_TO
41395: IFFALSE 41440
// begin tmp := tmp [ pos [ i ] ] ;
41397: LD_ADDR_VAR 0 6
41401: PUSH
41402: LD_VAR 0 6
41406: PUSH
41407: LD_VAR 0 2
41411: PUSH
41412: LD_VAR 0 5
41416: ARRAY
41417: ARRAY
41418: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41419: LD_ADDR_VAR 0 7
41423: PUSH
41424: LD_VAR 0 7
41428: PUSH
41429: LD_VAR 0 6
41433: PUSH
41434: EMPTY
41435: LIST
41436: ADD
41437: ST_TO_ADDR
// end ;
41438: GO 41394
41440: POP
41441: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41442: LD_ADDR_VAR 0 6
41446: PUSH
41447: LD_VAR 0 6
41451: PPUSH
41452: LD_VAR 0 2
41456: PUSH
41457: LD_VAR 0 2
41461: ARRAY
41462: PPUSH
41463: LD_VAR 0 3
41467: PPUSH
41468: CALL_OW 1
41472: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41473: LD_ADDR_VAR 0 7
41477: PUSH
41478: LD_VAR 0 7
41482: PPUSH
41483: LD_VAR 0 7
41487: PPUSH
41488: LD_VAR 0 6
41492: PPUSH
41493: CALL_OW 1
41497: ST_TO_ADDR
// for i = s_arr downto 2 do
41498: LD_ADDR_VAR 0 5
41502: PUSH
41503: DOUBLE
41504: LD_VAR 0 7
41508: INC
41509: ST_TO_ADDR
41510: LD_INT 2
41512: PUSH
41513: FOR_DOWNTO
41514: IFFALSE 41598
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
41516: LD_ADDR_VAR 0 6
41520: PUSH
41521: LD_VAR 0 7
41525: PUSH
41526: LD_VAR 0 5
41530: PUSH
41531: LD_INT 1
41533: MINUS
41534: ARRAY
41535: PPUSH
41536: LD_VAR 0 2
41540: PUSH
41541: LD_VAR 0 5
41545: PUSH
41546: LD_INT 1
41548: MINUS
41549: ARRAY
41550: PPUSH
41551: LD_VAR 0 7
41555: PUSH
41556: LD_VAR 0 5
41560: ARRAY
41561: PPUSH
41562: CALL_OW 1
41566: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
41567: LD_ADDR_VAR 0 7
41571: PUSH
41572: LD_VAR 0 7
41576: PPUSH
41577: LD_VAR 0 5
41581: PUSH
41582: LD_INT 1
41584: MINUS
41585: PPUSH
41586: LD_VAR 0 6
41590: PPUSH
41591: CALL_OW 1
41595: ST_TO_ADDR
// end ;
41596: GO 41513
41598: POP
41599: POP
// result := s_arr [ 1 ] ;
41600: LD_ADDR_VAR 0 4
41604: PUSH
41605: LD_VAR 0 7
41609: PUSH
41610: LD_INT 1
41612: ARRAY
41613: ST_TO_ADDR
// end ; end ;
41614: LD_VAR 0 4
41618: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
41619: LD_INT 0
41621: PPUSH
41622: PPUSH
// if not list then
41623: LD_VAR 0 1
41627: NOT
41628: IFFALSE 41632
// exit ;
41630: GO 41723
// i := list [ pos1 ] ;
41632: LD_ADDR_VAR 0 5
41636: PUSH
41637: LD_VAR 0 1
41641: PUSH
41642: LD_VAR 0 2
41646: ARRAY
41647: ST_TO_ADDR
// if not i then
41648: LD_VAR 0 5
41652: NOT
41653: IFFALSE 41657
// exit ;
41655: GO 41723
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
41657: LD_ADDR_VAR 0 1
41661: PUSH
41662: LD_VAR 0 1
41666: PPUSH
41667: LD_VAR 0 2
41671: PPUSH
41672: LD_VAR 0 1
41676: PUSH
41677: LD_VAR 0 3
41681: ARRAY
41682: PPUSH
41683: CALL_OW 1
41687: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
41688: LD_ADDR_VAR 0 1
41692: PUSH
41693: LD_VAR 0 1
41697: PPUSH
41698: LD_VAR 0 3
41702: PPUSH
41703: LD_VAR 0 5
41707: PPUSH
41708: CALL_OW 1
41712: ST_TO_ADDR
// result := list ;
41713: LD_ADDR_VAR 0 4
41717: PUSH
41718: LD_VAR 0 1
41722: ST_TO_ADDR
// end ;
41723: LD_VAR 0 4
41727: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
41728: LD_INT 0
41730: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
41731: LD_ADDR_VAR 0 5
41735: PUSH
41736: LD_VAR 0 1
41740: PPUSH
41741: CALL_OW 250
41745: PPUSH
41746: LD_VAR 0 1
41750: PPUSH
41751: CALL_OW 251
41755: PPUSH
41756: LD_VAR 0 2
41760: PPUSH
41761: LD_VAR 0 3
41765: PPUSH
41766: LD_VAR 0 4
41770: PPUSH
41771: CALL 42149 0 5
41775: ST_TO_ADDR
// end ;
41776: LD_VAR 0 5
41780: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
41781: LD_INT 0
41783: PPUSH
41784: PPUSH
41785: PPUSH
41786: PPUSH
// if not list or not unit then
41787: LD_VAR 0 2
41791: NOT
41792: PUSH
41793: LD_VAR 0 1
41797: NOT
41798: OR
41799: IFFALSE 41803
// exit ;
41801: GO 42144
// result := [ ] ;
41803: LD_ADDR_VAR 0 5
41807: PUSH
41808: EMPTY
41809: ST_TO_ADDR
// for i in list do
41810: LD_ADDR_VAR 0 6
41814: PUSH
41815: LD_VAR 0 2
41819: PUSH
41820: FOR_IN
41821: IFFALSE 42039
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
41823: LD_ADDR_VAR 0 8
41827: PUSH
41828: LD_VAR 0 1
41832: PPUSH
41833: LD_VAR 0 6
41837: PUSH
41838: LD_INT 1
41840: ARRAY
41841: PPUSH
41842: LD_VAR 0 6
41846: PUSH
41847: LD_INT 2
41849: ARRAY
41850: PPUSH
41851: CALL_OW 297
41855: ST_TO_ADDR
// if not Count ( result ) then
41856: LD_VAR 0 5
41860: PPUSH
41861: CALL 38433 0 1
41865: NOT
41866: IFFALSE 41899
// begin result := Join ( result , [ i , tmp ] ) ;
41868: LD_ADDR_VAR 0 5
41872: PUSH
41873: LD_VAR 0 5
41877: PPUSH
41878: LD_VAR 0 6
41882: PUSH
41883: LD_VAR 0 8
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PPUSH
41892: CALL 74033 0 2
41896: ST_TO_ADDR
// continue ;
41897: GO 41820
// end ; if result [ result ] [ 2 ] <= tmp then
41899: LD_VAR 0 5
41903: PUSH
41904: LD_VAR 0 5
41908: ARRAY
41909: PUSH
41910: LD_INT 2
41912: ARRAY
41913: PUSH
41914: LD_VAR 0 8
41918: LESSEQUAL
41919: IFFALSE 41952
// result := Join ( result , [ i , tmp ] ) else
41921: LD_ADDR_VAR 0 5
41925: PUSH
41926: LD_VAR 0 5
41930: PPUSH
41931: LD_VAR 0 6
41935: PUSH
41936: LD_VAR 0 8
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: PPUSH
41945: CALL 74033 0 2
41949: ST_TO_ADDR
41950: GO 42037
// begin for j := 1 to Count ( result ) do
41952: LD_ADDR_VAR 0 7
41956: PUSH
41957: DOUBLE
41958: LD_INT 1
41960: DEC
41961: ST_TO_ADDR
41962: LD_VAR 0 5
41966: PPUSH
41967: CALL 38433 0 1
41971: PUSH
41972: FOR_TO
41973: IFFALSE 42035
// begin if tmp < result [ j ] [ 2 ] then
41975: LD_VAR 0 8
41979: PUSH
41980: LD_VAR 0 5
41984: PUSH
41985: LD_VAR 0 7
41989: ARRAY
41990: PUSH
41991: LD_INT 2
41993: ARRAY
41994: LESS
41995: IFFALSE 42033
// begin result := Insert ( result , j , [ i , tmp ] ) ;
41997: LD_ADDR_VAR 0 5
42001: PUSH
42002: LD_VAR 0 5
42006: PPUSH
42007: LD_VAR 0 7
42011: PPUSH
42012: LD_VAR 0 6
42016: PUSH
42017: LD_VAR 0 8
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PPUSH
42026: CALL_OW 2
42030: ST_TO_ADDR
// break ;
42031: GO 42035
// end ; end ;
42033: GO 41972
42035: POP
42036: POP
// end ; end ;
42037: GO 41820
42039: POP
42040: POP
// if result and not asc then
42041: LD_VAR 0 5
42045: PUSH
42046: LD_VAR 0 3
42050: NOT
42051: AND
42052: IFFALSE 42069
// result := ReverseArray ( result ) ;
42054: LD_ADDR_VAR 0 5
42058: PUSH
42059: LD_VAR 0 5
42063: PPUSH
42064: CALL 69309 0 1
42068: ST_TO_ADDR
// tmp := [ ] ;
42069: LD_ADDR_VAR 0 8
42073: PUSH
42074: EMPTY
42075: ST_TO_ADDR
// if mode then
42076: LD_VAR 0 4
42080: IFFALSE 42144
// begin for i := 1 to result do
42082: LD_ADDR_VAR 0 6
42086: PUSH
42087: DOUBLE
42088: LD_INT 1
42090: DEC
42091: ST_TO_ADDR
42092: LD_VAR 0 5
42096: PUSH
42097: FOR_TO
42098: IFFALSE 42132
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
42100: LD_ADDR_VAR 0 8
42104: PUSH
42105: LD_VAR 0 8
42109: PPUSH
42110: LD_VAR 0 5
42114: PUSH
42115: LD_VAR 0 6
42119: ARRAY
42120: PUSH
42121: LD_INT 1
42123: ARRAY
42124: PPUSH
42125: CALL 74033 0 2
42129: ST_TO_ADDR
42130: GO 42097
42132: POP
42133: POP
// result := tmp ;
42134: LD_ADDR_VAR 0 5
42138: PUSH
42139: LD_VAR 0 8
42143: ST_TO_ADDR
// end ; end ;
42144: LD_VAR 0 5
42148: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
42149: LD_INT 0
42151: PPUSH
42152: PPUSH
42153: PPUSH
42154: PPUSH
// if not list then
42155: LD_VAR 0 3
42159: NOT
42160: IFFALSE 42164
// exit ;
42162: GO 42552
// result := [ ] ;
42164: LD_ADDR_VAR 0 6
42168: PUSH
42169: EMPTY
42170: ST_TO_ADDR
// for i in list do
42171: LD_ADDR_VAR 0 7
42175: PUSH
42176: LD_VAR 0 3
42180: PUSH
42181: FOR_IN
42182: IFFALSE 42384
// begin tmp := GetDistUnitXY ( i , x , y ) ;
42184: LD_ADDR_VAR 0 9
42188: PUSH
42189: LD_VAR 0 7
42193: PPUSH
42194: LD_VAR 0 1
42198: PPUSH
42199: LD_VAR 0 2
42203: PPUSH
42204: CALL_OW 297
42208: ST_TO_ADDR
// if not result then
42209: LD_VAR 0 6
42213: NOT
42214: IFFALSE 42240
// result := [ [ i , tmp ] ] else
42216: LD_ADDR_VAR 0 6
42220: PUSH
42221: LD_VAR 0 7
42225: PUSH
42226: LD_VAR 0 9
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: EMPTY
42236: LIST
42237: ST_TO_ADDR
42238: GO 42382
// begin if result [ result ] [ 2 ] < tmp then
42240: LD_VAR 0 6
42244: PUSH
42245: LD_VAR 0 6
42249: ARRAY
42250: PUSH
42251: LD_INT 2
42253: ARRAY
42254: PUSH
42255: LD_VAR 0 9
42259: LESS
42260: IFFALSE 42302
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
42262: LD_ADDR_VAR 0 6
42266: PUSH
42267: LD_VAR 0 6
42271: PPUSH
42272: LD_VAR 0 6
42276: PUSH
42277: LD_INT 1
42279: PLUS
42280: PPUSH
42281: LD_VAR 0 7
42285: PUSH
42286: LD_VAR 0 9
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PPUSH
42295: CALL_OW 2
42299: ST_TO_ADDR
42300: GO 42382
// for j = 1 to result do
42302: LD_ADDR_VAR 0 8
42306: PUSH
42307: DOUBLE
42308: LD_INT 1
42310: DEC
42311: ST_TO_ADDR
42312: LD_VAR 0 6
42316: PUSH
42317: FOR_TO
42318: IFFALSE 42380
// begin if tmp < result [ j ] [ 2 ] then
42320: LD_VAR 0 9
42324: PUSH
42325: LD_VAR 0 6
42329: PUSH
42330: LD_VAR 0 8
42334: ARRAY
42335: PUSH
42336: LD_INT 2
42338: ARRAY
42339: LESS
42340: IFFALSE 42378
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42342: LD_ADDR_VAR 0 6
42346: PUSH
42347: LD_VAR 0 6
42351: PPUSH
42352: LD_VAR 0 8
42356: PPUSH
42357: LD_VAR 0 7
42361: PUSH
42362: LD_VAR 0 9
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PPUSH
42371: CALL_OW 2
42375: ST_TO_ADDR
// break ;
42376: GO 42380
// end ; end ;
42378: GO 42317
42380: POP
42381: POP
// end ; end ;
42382: GO 42181
42384: POP
42385: POP
// if result and not asc then
42386: LD_VAR 0 6
42390: PUSH
42391: LD_VAR 0 4
42395: NOT
42396: AND
42397: IFFALSE 42472
// begin tmp := result ;
42399: LD_ADDR_VAR 0 9
42403: PUSH
42404: LD_VAR 0 6
42408: ST_TO_ADDR
// for i = tmp downto 1 do
42409: LD_ADDR_VAR 0 7
42413: PUSH
42414: DOUBLE
42415: LD_VAR 0 9
42419: INC
42420: ST_TO_ADDR
42421: LD_INT 1
42423: PUSH
42424: FOR_DOWNTO
42425: IFFALSE 42470
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
42427: LD_ADDR_VAR 0 6
42431: PUSH
42432: LD_VAR 0 6
42436: PPUSH
42437: LD_VAR 0 9
42441: PUSH
42442: LD_VAR 0 7
42446: MINUS
42447: PUSH
42448: LD_INT 1
42450: PLUS
42451: PPUSH
42452: LD_VAR 0 9
42456: PUSH
42457: LD_VAR 0 7
42461: ARRAY
42462: PPUSH
42463: CALL_OW 1
42467: ST_TO_ADDR
42468: GO 42424
42470: POP
42471: POP
// end ; tmp := [ ] ;
42472: LD_ADDR_VAR 0 9
42476: PUSH
42477: EMPTY
42478: ST_TO_ADDR
// if mode then
42479: LD_VAR 0 5
42483: IFFALSE 42552
// begin for i = 1 to result do
42485: LD_ADDR_VAR 0 7
42489: PUSH
42490: DOUBLE
42491: LD_INT 1
42493: DEC
42494: ST_TO_ADDR
42495: LD_VAR 0 6
42499: PUSH
42500: FOR_TO
42501: IFFALSE 42540
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
42503: LD_ADDR_VAR 0 9
42507: PUSH
42508: LD_VAR 0 9
42512: PPUSH
42513: LD_VAR 0 7
42517: PPUSH
42518: LD_VAR 0 6
42522: PUSH
42523: LD_VAR 0 7
42527: ARRAY
42528: PUSH
42529: LD_INT 1
42531: ARRAY
42532: PPUSH
42533: CALL_OW 1
42537: ST_TO_ADDR
42538: GO 42500
42540: POP
42541: POP
// result := tmp ;
42542: LD_ADDR_VAR 0 6
42546: PUSH
42547: LD_VAR 0 9
42551: ST_TO_ADDR
// end ; end ;
42552: LD_VAR 0 6
42556: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
42557: LD_INT 0
42559: PPUSH
42560: PPUSH
42561: PPUSH
42562: PPUSH
42563: PPUSH
42564: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
42565: LD_ADDR_VAR 0 5
42569: PUSH
42570: LD_INT 0
42572: PUSH
42573: LD_INT 0
42575: PUSH
42576: LD_INT 0
42578: PUSH
42579: EMPTY
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: LIST
42585: LIST
42586: ST_TO_ADDR
// if not x or not y then
42587: LD_VAR 0 2
42591: NOT
42592: PUSH
42593: LD_VAR 0 3
42597: NOT
42598: OR
42599: IFFALSE 42603
// exit ;
42601: GO 44253
// if not range then
42603: LD_VAR 0 4
42607: NOT
42608: IFFALSE 42618
// range := 10 ;
42610: LD_ADDR_VAR 0 4
42614: PUSH
42615: LD_INT 10
42617: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42618: LD_ADDR_VAR 0 8
42622: PUSH
42623: LD_INT 81
42625: PUSH
42626: LD_VAR 0 1
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PUSH
42635: LD_INT 92
42637: PUSH
42638: LD_VAR 0 2
42642: PUSH
42643: LD_VAR 0 3
42647: PUSH
42648: LD_VAR 0 4
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: LIST
42657: LIST
42658: PUSH
42659: LD_INT 3
42661: PUSH
42662: LD_INT 21
42664: PUSH
42665: LD_INT 3
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: LIST
42680: PPUSH
42681: CALL_OW 69
42685: ST_TO_ADDR
// if not tmp then
42686: LD_VAR 0 8
42690: NOT
42691: IFFALSE 42695
// exit ;
42693: GO 44253
// for i in tmp do
42695: LD_ADDR_VAR 0 6
42699: PUSH
42700: LD_VAR 0 8
42704: PUSH
42705: FOR_IN
42706: IFFALSE 44228
// begin points := [ 0 , 0 , 0 ] ;
42708: LD_ADDR_VAR 0 9
42712: PUSH
42713: LD_INT 0
42715: PUSH
42716: LD_INT 0
42718: PUSH
42719: LD_INT 0
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: LIST
42726: ST_TO_ADDR
// bpoints := 1 ;
42727: LD_ADDR_VAR 0 10
42731: PUSH
42732: LD_INT 1
42734: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42735: LD_VAR 0 6
42739: PPUSH
42740: CALL_OW 247
42744: PUSH
42745: LD_INT 1
42747: DOUBLE
42748: EQUAL
42749: IFTRUE 42753
42751: GO 43331
42753: POP
// begin if GetClass ( i ) = 1 then
42754: LD_VAR 0 6
42758: PPUSH
42759: CALL_OW 257
42763: PUSH
42764: LD_INT 1
42766: EQUAL
42767: IFFALSE 42788
// points := [ 10 , 5 , 3 ] ;
42769: LD_ADDR_VAR 0 9
42773: PUSH
42774: LD_INT 10
42776: PUSH
42777: LD_INT 5
42779: PUSH
42780: LD_INT 3
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: LIST
42787: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42788: LD_VAR 0 6
42792: PPUSH
42793: CALL_OW 257
42797: PUSH
42798: LD_INT 2
42800: PUSH
42801: LD_INT 3
42803: PUSH
42804: LD_INT 4
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: LIST
42811: IN
42812: IFFALSE 42833
// points := [ 3 , 2 , 1 ] ;
42814: LD_ADDR_VAR 0 9
42818: PUSH
42819: LD_INT 3
42821: PUSH
42822: LD_INT 2
42824: PUSH
42825: LD_INT 1
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: LIST
42832: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42833: LD_VAR 0 6
42837: PPUSH
42838: CALL_OW 257
42842: PUSH
42843: LD_INT 5
42845: EQUAL
42846: IFFALSE 42867
// points := [ 130 , 5 , 2 ] ;
42848: LD_ADDR_VAR 0 9
42852: PUSH
42853: LD_INT 130
42855: PUSH
42856: LD_INT 5
42858: PUSH
42859: LD_INT 2
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: LIST
42866: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42867: LD_VAR 0 6
42871: PPUSH
42872: CALL_OW 257
42876: PUSH
42877: LD_INT 8
42879: EQUAL
42880: IFFALSE 42901
// points := [ 35 , 35 , 30 ] ;
42882: LD_ADDR_VAR 0 9
42886: PUSH
42887: LD_INT 35
42889: PUSH
42890: LD_INT 35
42892: PUSH
42893: LD_INT 30
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: LIST
42900: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42901: LD_VAR 0 6
42905: PPUSH
42906: CALL_OW 257
42910: PUSH
42911: LD_INT 9
42913: EQUAL
42914: IFFALSE 42935
// points := [ 20 , 55 , 40 ] ;
42916: LD_ADDR_VAR 0 9
42920: PUSH
42921: LD_INT 20
42923: PUSH
42924: LD_INT 55
42926: PUSH
42927: LD_INT 40
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: LIST
42934: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
42935: LD_VAR 0 6
42939: PPUSH
42940: CALL_OW 257
42944: PUSH
42945: LD_INT 12
42947: PUSH
42948: LD_INT 16
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: IN
42955: IFFALSE 42976
// points := [ 5 , 3 , 2 ] ;
42957: LD_ADDR_VAR 0 9
42961: PUSH
42962: LD_INT 5
42964: PUSH
42965: LD_INT 3
42967: PUSH
42968: LD_INT 2
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: LIST
42975: ST_TO_ADDR
// if GetClass ( i ) = 17 then
42976: LD_VAR 0 6
42980: PPUSH
42981: CALL_OW 257
42985: PUSH
42986: LD_INT 17
42988: EQUAL
42989: IFFALSE 43010
// points := [ 100 , 50 , 75 ] ;
42991: LD_ADDR_VAR 0 9
42995: PUSH
42996: LD_INT 100
42998: PUSH
42999: LD_INT 50
43001: PUSH
43002: LD_INT 75
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: LIST
43009: ST_TO_ADDR
// if GetClass ( i ) = 15 then
43010: LD_VAR 0 6
43014: PPUSH
43015: CALL_OW 257
43019: PUSH
43020: LD_INT 15
43022: EQUAL
43023: IFFALSE 43044
// points := [ 10 , 5 , 3 ] ;
43025: LD_ADDR_VAR 0 9
43029: PUSH
43030: LD_INT 10
43032: PUSH
43033: LD_INT 5
43035: PUSH
43036: LD_INT 3
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: LIST
43043: ST_TO_ADDR
// if GetClass ( i ) = 14 then
43044: LD_VAR 0 6
43048: PPUSH
43049: CALL_OW 257
43053: PUSH
43054: LD_INT 14
43056: EQUAL
43057: IFFALSE 43078
// points := [ 10 , 0 , 0 ] ;
43059: LD_ADDR_VAR 0 9
43063: PUSH
43064: LD_INT 10
43066: PUSH
43067: LD_INT 0
43069: PUSH
43070: LD_INT 0
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: LIST
43077: ST_TO_ADDR
// if GetClass ( i ) = 11 then
43078: LD_VAR 0 6
43082: PPUSH
43083: CALL_OW 257
43087: PUSH
43088: LD_INT 11
43090: EQUAL
43091: IFFALSE 43112
// points := [ 30 , 10 , 5 ] ;
43093: LD_ADDR_VAR 0 9
43097: PUSH
43098: LD_INT 30
43100: PUSH
43101: LD_INT 10
43103: PUSH
43104: LD_INT 5
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: LIST
43111: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
43112: LD_VAR 0 1
43116: PPUSH
43117: LD_INT 5
43119: PPUSH
43120: CALL_OW 321
43124: PUSH
43125: LD_INT 2
43127: EQUAL
43128: IFFALSE 43145
// bpoints := bpoints * 1.8 ;
43130: LD_ADDR_VAR 0 10
43134: PUSH
43135: LD_VAR 0 10
43139: PUSH
43140: LD_REAL  1.80000000000000E+0000
43143: MUL
43144: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
43145: LD_VAR 0 6
43149: PPUSH
43150: CALL_OW 257
43154: PUSH
43155: LD_INT 1
43157: PUSH
43158: LD_INT 2
43160: PUSH
43161: LD_INT 3
43163: PUSH
43164: LD_INT 4
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: IN
43173: PUSH
43174: LD_VAR 0 1
43178: PPUSH
43179: LD_INT 51
43181: PPUSH
43182: CALL_OW 321
43186: PUSH
43187: LD_INT 2
43189: EQUAL
43190: AND
43191: IFFALSE 43208
// bpoints := bpoints * 1.2 ;
43193: LD_ADDR_VAR 0 10
43197: PUSH
43198: LD_VAR 0 10
43202: PUSH
43203: LD_REAL  1.20000000000000E+0000
43206: MUL
43207: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
43208: LD_VAR 0 6
43212: PPUSH
43213: CALL_OW 257
43217: PUSH
43218: LD_INT 5
43220: PUSH
43221: LD_INT 7
43223: PUSH
43224: LD_INT 9
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: LIST
43231: IN
43232: PUSH
43233: LD_VAR 0 1
43237: PPUSH
43238: LD_INT 52
43240: PPUSH
43241: CALL_OW 321
43245: PUSH
43246: LD_INT 2
43248: EQUAL
43249: AND
43250: IFFALSE 43267
// bpoints := bpoints * 1.5 ;
43252: LD_ADDR_VAR 0 10
43256: PUSH
43257: LD_VAR 0 10
43261: PUSH
43262: LD_REAL  1.50000000000000E+0000
43265: MUL
43266: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
43267: LD_VAR 0 1
43271: PPUSH
43272: LD_INT 66
43274: PPUSH
43275: CALL_OW 321
43279: PUSH
43280: LD_INT 2
43282: EQUAL
43283: IFFALSE 43300
// bpoints := bpoints * 1.1 ;
43285: LD_ADDR_VAR 0 10
43289: PUSH
43290: LD_VAR 0 10
43294: PUSH
43295: LD_REAL  1.10000000000000E+0000
43298: MUL
43299: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
43300: LD_ADDR_VAR 0 10
43304: PUSH
43305: LD_VAR 0 10
43309: PUSH
43310: LD_VAR 0 6
43314: PPUSH
43315: LD_INT 1
43317: PPUSH
43318: CALL_OW 259
43322: PUSH
43323: LD_REAL  1.15000000000000E+0000
43326: MUL
43327: MUL
43328: ST_TO_ADDR
// end ; unit_vehicle :
43329: GO 44157
43331: LD_INT 2
43333: DOUBLE
43334: EQUAL
43335: IFTRUE 43339
43337: GO 44145
43339: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
43340: LD_VAR 0 6
43344: PPUSH
43345: CALL_OW 264
43349: PUSH
43350: LD_INT 2
43352: PUSH
43353: LD_INT 42
43355: PUSH
43356: LD_INT 24
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: LIST
43363: IN
43364: IFFALSE 43385
// points := [ 25 , 5 , 3 ] ;
43366: LD_ADDR_VAR 0 9
43370: PUSH
43371: LD_INT 25
43373: PUSH
43374: LD_INT 5
43376: PUSH
43377: LD_INT 3
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: LIST
43384: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
43385: LD_VAR 0 6
43389: PPUSH
43390: CALL_OW 264
43394: PUSH
43395: LD_INT 4
43397: PUSH
43398: LD_INT 43
43400: PUSH
43401: LD_INT 25
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: LIST
43408: IN
43409: IFFALSE 43430
// points := [ 40 , 15 , 5 ] ;
43411: LD_ADDR_VAR 0 9
43415: PUSH
43416: LD_INT 40
43418: PUSH
43419: LD_INT 15
43421: PUSH
43422: LD_INT 5
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: LIST
43429: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
43430: LD_VAR 0 6
43434: PPUSH
43435: CALL_OW 264
43439: PUSH
43440: LD_INT 3
43442: PUSH
43443: LD_INT 23
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: IN
43450: IFFALSE 43471
// points := [ 7 , 25 , 8 ] ;
43452: LD_ADDR_VAR 0 9
43456: PUSH
43457: LD_INT 7
43459: PUSH
43460: LD_INT 25
43462: PUSH
43463: LD_INT 8
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: LIST
43470: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
43471: LD_VAR 0 6
43475: PPUSH
43476: CALL_OW 264
43480: PUSH
43481: LD_INT 5
43483: PUSH
43484: LD_INT 27
43486: PUSH
43487: LD_INT 44
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: LIST
43494: IN
43495: IFFALSE 43516
// points := [ 14 , 50 , 16 ] ;
43497: LD_ADDR_VAR 0 9
43501: PUSH
43502: LD_INT 14
43504: PUSH
43505: LD_INT 50
43507: PUSH
43508: LD_INT 16
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: LIST
43515: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
43516: LD_VAR 0 6
43520: PPUSH
43521: CALL_OW 264
43525: PUSH
43526: LD_INT 6
43528: PUSH
43529: LD_INT 46
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: IN
43536: IFFALSE 43557
// points := [ 32 , 120 , 70 ] ;
43538: LD_ADDR_VAR 0 9
43542: PUSH
43543: LD_INT 32
43545: PUSH
43546: LD_INT 120
43548: PUSH
43549: LD_INT 70
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: LIST
43556: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
43557: LD_VAR 0 6
43561: PPUSH
43562: CALL_OW 264
43566: PUSH
43567: LD_INT 7
43569: PUSH
43570: LD_INT 28
43572: PUSH
43573: LD_INT 45
43575: PUSH
43576: LD_INT 92
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: LIST
43583: LIST
43584: IN
43585: IFFALSE 43606
// points := [ 35 , 20 , 45 ] ;
43587: LD_ADDR_VAR 0 9
43591: PUSH
43592: LD_INT 35
43594: PUSH
43595: LD_INT 20
43597: PUSH
43598: LD_INT 45
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: LIST
43605: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
43606: LD_VAR 0 6
43610: PPUSH
43611: CALL_OW 264
43615: PUSH
43616: LD_INT 47
43618: PUSH
43619: EMPTY
43620: LIST
43621: IN
43622: IFFALSE 43643
// points := [ 67 , 45 , 75 ] ;
43624: LD_ADDR_VAR 0 9
43628: PUSH
43629: LD_INT 67
43631: PUSH
43632: LD_INT 45
43634: PUSH
43635: LD_INT 75
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: LIST
43642: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
43643: LD_VAR 0 6
43647: PPUSH
43648: CALL_OW 264
43652: PUSH
43653: LD_INT 26
43655: PUSH
43656: EMPTY
43657: LIST
43658: IN
43659: IFFALSE 43680
// points := [ 120 , 30 , 80 ] ;
43661: LD_ADDR_VAR 0 9
43665: PUSH
43666: LD_INT 120
43668: PUSH
43669: LD_INT 30
43671: PUSH
43672: LD_INT 80
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: LIST
43679: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
43680: LD_VAR 0 6
43684: PPUSH
43685: CALL_OW 264
43689: PUSH
43690: LD_INT 22
43692: PUSH
43693: EMPTY
43694: LIST
43695: IN
43696: IFFALSE 43717
// points := [ 40 , 1 , 1 ] ;
43698: LD_ADDR_VAR 0 9
43702: PUSH
43703: LD_INT 40
43705: PUSH
43706: LD_INT 1
43708: PUSH
43709: LD_INT 1
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: LIST
43716: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
43717: LD_VAR 0 6
43721: PPUSH
43722: CALL_OW 264
43726: PUSH
43727: LD_INT 29
43729: PUSH
43730: EMPTY
43731: LIST
43732: IN
43733: IFFALSE 43754
// points := [ 70 , 200 , 400 ] ;
43735: LD_ADDR_VAR 0 9
43739: PUSH
43740: LD_INT 70
43742: PUSH
43743: LD_INT 200
43745: PUSH
43746: LD_INT 400
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: LIST
43753: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43754: LD_VAR 0 6
43758: PPUSH
43759: CALL_OW 264
43763: PUSH
43764: LD_INT 14
43766: PUSH
43767: LD_INT 53
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: IN
43774: IFFALSE 43795
// points := [ 40 , 10 , 20 ] ;
43776: LD_ADDR_VAR 0 9
43780: PUSH
43781: LD_INT 40
43783: PUSH
43784: LD_INT 10
43786: PUSH
43787: LD_INT 20
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: LIST
43794: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43795: LD_VAR 0 6
43799: PPUSH
43800: CALL_OW 264
43804: PUSH
43805: LD_INT 9
43807: PUSH
43808: EMPTY
43809: LIST
43810: IN
43811: IFFALSE 43832
// points := [ 5 , 70 , 20 ] ;
43813: LD_ADDR_VAR 0 9
43817: PUSH
43818: LD_INT 5
43820: PUSH
43821: LD_INT 70
43823: PUSH
43824: LD_INT 20
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: LIST
43831: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43832: LD_VAR 0 6
43836: PPUSH
43837: CALL_OW 264
43841: PUSH
43842: LD_INT 10
43844: PUSH
43845: EMPTY
43846: LIST
43847: IN
43848: IFFALSE 43869
// points := [ 35 , 110 , 70 ] ;
43850: LD_ADDR_VAR 0 9
43854: PUSH
43855: LD_INT 35
43857: PUSH
43858: LD_INT 110
43860: PUSH
43861: LD_INT 70
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: LIST
43868: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43869: LD_VAR 0 6
43873: PPUSH
43874: CALL_OW 265
43878: PUSH
43879: LD_INT 25
43881: EQUAL
43882: IFFALSE 43903
// points := [ 80 , 65 , 100 ] ;
43884: LD_ADDR_VAR 0 9
43888: PUSH
43889: LD_INT 80
43891: PUSH
43892: LD_INT 65
43894: PUSH
43895: LD_INT 100
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: LIST
43902: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43903: LD_VAR 0 6
43907: PPUSH
43908: CALL_OW 263
43912: PUSH
43913: LD_INT 1
43915: EQUAL
43916: IFFALSE 43951
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43918: LD_ADDR_VAR 0 10
43922: PUSH
43923: LD_VAR 0 10
43927: PUSH
43928: LD_VAR 0 6
43932: PPUSH
43933: CALL_OW 311
43937: PPUSH
43938: LD_INT 3
43940: PPUSH
43941: CALL_OW 259
43945: PUSH
43946: LD_INT 4
43948: MUL
43949: MUL
43950: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
43951: LD_VAR 0 6
43955: PPUSH
43956: CALL_OW 263
43960: PUSH
43961: LD_INT 2
43963: EQUAL
43964: IFFALSE 44015
// begin j := IsControledBy ( i ) ;
43966: LD_ADDR_VAR 0 7
43970: PUSH
43971: LD_VAR 0 6
43975: PPUSH
43976: CALL_OW 312
43980: ST_TO_ADDR
// if j then
43981: LD_VAR 0 7
43985: IFFALSE 44015
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
43987: LD_ADDR_VAR 0 10
43991: PUSH
43992: LD_VAR 0 10
43996: PUSH
43997: LD_VAR 0 7
44001: PPUSH
44002: LD_INT 3
44004: PPUSH
44005: CALL_OW 259
44009: PUSH
44010: LD_INT 3
44012: MUL
44013: MUL
44014: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
44015: LD_VAR 0 6
44019: PPUSH
44020: CALL_OW 264
44024: PUSH
44025: LD_INT 5
44027: PUSH
44028: LD_INT 6
44030: PUSH
44031: LD_INT 46
44033: PUSH
44034: LD_INT 44
44036: PUSH
44037: LD_INT 47
44039: PUSH
44040: LD_INT 45
44042: PUSH
44043: LD_INT 28
44045: PUSH
44046: LD_INT 7
44048: PUSH
44049: LD_INT 27
44051: PUSH
44052: LD_INT 29
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: LIST
44059: LIST
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: LIST
44065: LIST
44066: IN
44067: PUSH
44068: LD_VAR 0 1
44072: PPUSH
44073: LD_INT 52
44075: PPUSH
44076: CALL_OW 321
44080: PUSH
44081: LD_INT 2
44083: EQUAL
44084: AND
44085: IFFALSE 44102
// bpoints := bpoints * 1.2 ;
44087: LD_ADDR_VAR 0 10
44091: PUSH
44092: LD_VAR 0 10
44096: PUSH
44097: LD_REAL  1.20000000000000E+0000
44100: MUL
44101: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
44102: LD_VAR 0 6
44106: PPUSH
44107: CALL_OW 264
44111: PUSH
44112: LD_INT 6
44114: PUSH
44115: LD_INT 46
44117: PUSH
44118: LD_INT 47
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: LIST
44125: IN
44126: IFFALSE 44143
// bpoints := bpoints * 1.2 ;
44128: LD_ADDR_VAR 0 10
44132: PUSH
44133: LD_VAR 0 10
44137: PUSH
44138: LD_REAL  1.20000000000000E+0000
44141: MUL
44142: ST_TO_ADDR
// end ; unit_building :
44143: GO 44157
44145: LD_INT 3
44147: DOUBLE
44148: EQUAL
44149: IFTRUE 44153
44151: GO 44156
44153: POP
// ; end ;
44154: GO 44157
44156: POP
// for j = 1 to 3 do
44157: LD_ADDR_VAR 0 7
44161: PUSH
44162: DOUBLE
44163: LD_INT 1
44165: DEC
44166: ST_TO_ADDR
44167: LD_INT 3
44169: PUSH
44170: FOR_TO
44171: IFFALSE 44224
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
44173: LD_ADDR_VAR 0 5
44177: PUSH
44178: LD_VAR 0 5
44182: PPUSH
44183: LD_VAR 0 7
44187: PPUSH
44188: LD_VAR 0 5
44192: PUSH
44193: LD_VAR 0 7
44197: ARRAY
44198: PUSH
44199: LD_VAR 0 9
44203: PUSH
44204: LD_VAR 0 7
44208: ARRAY
44209: PUSH
44210: LD_VAR 0 10
44214: MUL
44215: PLUS
44216: PPUSH
44217: CALL_OW 1
44221: ST_TO_ADDR
44222: GO 44170
44224: POP
44225: POP
// end ;
44226: GO 42705
44228: POP
44229: POP
// result := Replace ( result , 4 , tmp ) ;
44230: LD_ADDR_VAR 0 5
44234: PUSH
44235: LD_VAR 0 5
44239: PPUSH
44240: LD_INT 4
44242: PPUSH
44243: LD_VAR 0 8
44247: PPUSH
44248: CALL_OW 1
44252: ST_TO_ADDR
// end ;
44253: LD_VAR 0 5
44257: RET
// export function DangerAtRange ( unit , range ) ; begin
44258: LD_INT 0
44260: PPUSH
// if not unit then
44261: LD_VAR 0 1
44265: NOT
44266: IFFALSE 44270
// exit ;
44268: GO 44315
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
44270: LD_ADDR_VAR 0 3
44274: PUSH
44275: LD_VAR 0 1
44279: PPUSH
44280: CALL_OW 255
44284: PPUSH
44285: LD_VAR 0 1
44289: PPUSH
44290: CALL_OW 250
44294: PPUSH
44295: LD_VAR 0 1
44299: PPUSH
44300: CALL_OW 251
44304: PPUSH
44305: LD_VAR 0 2
44309: PPUSH
44310: CALL 42557 0 4
44314: ST_TO_ADDR
// end ;
44315: LD_VAR 0 3
44319: RET
// export function DangerInArea ( side , area ) ; begin
44320: LD_INT 0
44322: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
44323: LD_ADDR_VAR 0 3
44327: PUSH
44328: LD_VAR 0 2
44332: PPUSH
44333: LD_INT 81
44335: PUSH
44336: LD_VAR 0 1
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PPUSH
44345: CALL_OW 70
44349: ST_TO_ADDR
// end ;
44350: LD_VAR 0 3
44354: RET
// export function IsExtension ( b ) ; begin
44355: LD_INT 0
44357: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
44358: LD_ADDR_VAR 0 2
44362: PUSH
44363: LD_VAR 0 1
44367: PUSH
44368: LD_INT 23
44370: PUSH
44371: LD_INT 20
44373: PUSH
44374: LD_INT 22
44376: PUSH
44377: LD_INT 17
44379: PUSH
44380: LD_INT 24
44382: PUSH
44383: LD_INT 21
44385: PUSH
44386: LD_INT 19
44388: PUSH
44389: LD_INT 16
44391: PUSH
44392: LD_INT 25
44394: PUSH
44395: LD_INT 18
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: IN
44410: ST_TO_ADDR
// end ;
44411: LD_VAR 0 2
44415: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
44416: LD_INT 0
44418: PPUSH
44419: PPUSH
44420: PPUSH
// result := [ ] ;
44421: LD_ADDR_VAR 0 4
44425: PUSH
44426: EMPTY
44427: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
44428: LD_ADDR_VAR 0 5
44432: PUSH
44433: LD_VAR 0 2
44437: PPUSH
44438: LD_INT 21
44440: PUSH
44441: LD_INT 3
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PPUSH
44448: CALL_OW 70
44452: ST_TO_ADDR
// if not tmp then
44453: LD_VAR 0 5
44457: NOT
44458: IFFALSE 44462
// exit ;
44460: GO 44526
// if checkLink then
44462: LD_VAR 0 3
44466: IFFALSE 44516
// begin for i in tmp do
44468: LD_ADDR_VAR 0 6
44472: PUSH
44473: LD_VAR 0 5
44477: PUSH
44478: FOR_IN
44479: IFFALSE 44514
// if GetBase ( i ) <> base then
44481: LD_VAR 0 6
44485: PPUSH
44486: CALL_OW 274
44490: PUSH
44491: LD_VAR 0 1
44495: NONEQUAL
44496: IFFALSE 44512
// ComLinkToBase ( base , i ) ;
44498: LD_VAR 0 1
44502: PPUSH
44503: LD_VAR 0 6
44507: PPUSH
44508: CALL_OW 169
44512: GO 44478
44514: POP
44515: POP
// end ; result := tmp ;
44516: LD_ADDR_VAR 0 4
44520: PUSH
44521: LD_VAR 0 5
44525: ST_TO_ADDR
// end ;
44526: LD_VAR 0 4
44530: RET
// export function ComComplete ( units , b ) ; var i ; begin
44531: LD_INT 0
44533: PPUSH
44534: PPUSH
// if not units then
44535: LD_VAR 0 1
44539: NOT
44540: IFFALSE 44544
// exit ;
44542: GO 44634
// for i in units do
44544: LD_ADDR_VAR 0 4
44548: PUSH
44549: LD_VAR 0 1
44553: PUSH
44554: FOR_IN
44555: IFFALSE 44632
// if BuildingStatus ( b ) = bs_build then
44557: LD_VAR 0 2
44561: PPUSH
44562: CALL_OW 461
44566: PUSH
44567: LD_INT 1
44569: EQUAL
44570: IFFALSE 44630
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
44572: LD_VAR 0 4
44576: PPUSH
44577: LD_STRING h
44579: PUSH
44580: LD_VAR 0 2
44584: PPUSH
44585: CALL_OW 250
44589: PUSH
44590: LD_VAR 0 2
44594: PPUSH
44595: CALL_OW 251
44599: PUSH
44600: LD_VAR 0 2
44604: PUSH
44605: LD_INT 0
44607: PUSH
44608: LD_INT 0
44610: PUSH
44611: LD_INT 0
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: PUSH
44623: EMPTY
44624: LIST
44625: PPUSH
44626: CALL_OW 446
44630: GO 44554
44632: POP
44633: POP
// end ;
44634: LD_VAR 0 3
44638: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
44639: LD_INT 0
44641: PPUSH
44642: PPUSH
44643: PPUSH
44644: PPUSH
44645: PPUSH
44646: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
44647: LD_VAR 0 1
44651: NOT
44652: PUSH
44653: LD_VAR 0 1
44657: PPUSH
44658: CALL_OW 263
44662: PUSH
44663: LD_INT 2
44665: NONEQUAL
44666: OR
44667: IFFALSE 44671
// exit ;
44669: GO 44987
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
44671: LD_ADDR_VAR 0 6
44675: PUSH
44676: LD_INT 22
44678: PUSH
44679: LD_VAR 0 1
44683: PPUSH
44684: CALL_OW 255
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 2
44695: PUSH
44696: LD_INT 30
44698: PUSH
44699: LD_INT 36
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: LD_INT 34
44708: PUSH
44709: LD_INT 31
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: LIST
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PPUSH
44725: CALL_OW 69
44729: ST_TO_ADDR
// if not tmp then
44730: LD_VAR 0 6
44734: NOT
44735: IFFALSE 44739
// exit ;
44737: GO 44987
// result := [ ] ;
44739: LD_ADDR_VAR 0 2
44743: PUSH
44744: EMPTY
44745: ST_TO_ADDR
// for i in tmp do
44746: LD_ADDR_VAR 0 3
44750: PUSH
44751: LD_VAR 0 6
44755: PUSH
44756: FOR_IN
44757: IFFALSE 44828
// begin t := UnitsInside ( i ) ;
44759: LD_ADDR_VAR 0 4
44763: PUSH
44764: LD_VAR 0 3
44768: PPUSH
44769: CALL_OW 313
44773: ST_TO_ADDR
// if t then
44774: LD_VAR 0 4
44778: IFFALSE 44826
// for j in t do
44780: LD_ADDR_VAR 0 7
44784: PUSH
44785: LD_VAR 0 4
44789: PUSH
44790: FOR_IN
44791: IFFALSE 44824
// result := Replace ( result , result + 1 , j ) ;
44793: LD_ADDR_VAR 0 2
44797: PUSH
44798: LD_VAR 0 2
44802: PPUSH
44803: LD_VAR 0 2
44807: PUSH
44808: LD_INT 1
44810: PLUS
44811: PPUSH
44812: LD_VAR 0 7
44816: PPUSH
44817: CALL_OW 1
44821: ST_TO_ADDR
44822: GO 44790
44824: POP
44825: POP
// end ;
44826: GO 44756
44828: POP
44829: POP
// if not result then
44830: LD_VAR 0 2
44834: NOT
44835: IFFALSE 44839
// exit ;
44837: GO 44987
// mech := result [ 1 ] ;
44839: LD_ADDR_VAR 0 5
44843: PUSH
44844: LD_VAR 0 2
44848: PUSH
44849: LD_INT 1
44851: ARRAY
44852: ST_TO_ADDR
// if result > 1 then
44853: LD_VAR 0 2
44857: PUSH
44858: LD_INT 1
44860: GREATER
44861: IFFALSE 44973
// begin for i = 2 to result do
44863: LD_ADDR_VAR 0 3
44867: PUSH
44868: DOUBLE
44869: LD_INT 2
44871: DEC
44872: ST_TO_ADDR
44873: LD_VAR 0 2
44877: PUSH
44878: FOR_TO
44879: IFFALSE 44971
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44881: LD_ADDR_VAR 0 4
44885: PUSH
44886: LD_VAR 0 2
44890: PUSH
44891: LD_VAR 0 3
44895: ARRAY
44896: PPUSH
44897: LD_INT 3
44899: PPUSH
44900: CALL_OW 259
44904: PUSH
44905: LD_VAR 0 2
44909: PUSH
44910: LD_VAR 0 3
44914: ARRAY
44915: PPUSH
44916: CALL_OW 432
44920: MINUS
44921: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44922: LD_VAR 0 4
44926: PUSH
44927: LD_VAR 0 5
44931: PPUSH
44932: LD_INT 3
44934: PPUSH
44935: CALL_OW 259
44939: PUSH
44940: LD_VAR 0 5
44944: PPUSH
44945: CALL_OW 432
44949: MINUS
44950: GREATEREQUAL
44951: IFFALSE 44969
// mech := result [ i ] ;
44953: LD_ADDR_VAR 0 5
44957: PUSH
44958: LD_VAR 0 2
44962: PUSH
44963: LD_VAR 0 3
44967: ARRAY
44968: ST_TO_ADDR
// end ;
44969: GO 44878
44971: POP
44972: POP
// end ; ComLinkTo ( vehicle , mech ) ;
44973: LD_VAR 0 1
44977: PPUSH
44978: LD_VAR 0 5
44982: PPUSH
44983: CALL_OW 135
// end ;
44987: LD_VAR 0 2
44991: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
44992: LD_INT 0
44994: PPUSH
44995: PPUSH
44996: PPUSH
44997: PPUSH
44998: PPUSH
44999: PPUSH
45000: PPUSH
45001: PPUSH
45002: PPUSH
45003: PPUSH
45004: PPUSH
45005: PPUSH
45006: PPUSH
// result := [ ] ;
45007: LD_ADDR_VAR 0 7
45011: PUSH
45012: EMPTY
45013: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
45014: LD_VAR 0 1
45018: PPUSH
45019: CALL_OW 266
45023: PUSH
45024: LD_INT 0
45026: PUSH
45027: LD_INT 1
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: IN
45034: NOT
45035: IFFALSE 45039
// exit ;
45037: GO 46673
// if name then
45039: LD_VAR 0 3
45043: IFFALSE 45059
// SetBName ( base_dep , name ) ;
45045: LD_VAR 0 1
45049: PPUSH
45050: LD_VAR 0 3
45054: PPUSH
45055: CALL_OW 500
// base := GetBase ( base_dep ) ;
45059: LD_ADDR_VAR 0 15
45063: PUSH
45064: LD_VAR 0 1
45068: PPUSH
45069: CALL_OW 274
45073: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
45074: LD_ADDR_VAR 0 16
45078: PUSH
45079: LD_VAR 0 1
45083: PPUSH
45084: CALL_OW 255
45088: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
45089: LD_ADDR_VAR 0 17
45093: PUSH
45094: LD_VAR 0 1
45098: PPUSH
45099: CALL_OW 248
45103: ST_TO_ADDR
// if sources then
45104: LD_VAR 0 5
45108: IFFALSE 45155
// for i = 1 to 3 do
45110: LD_ADDR_VAR 0 8
45114: PUSH
45115: DOUBLE
45116: LD_INT 1
45118: DEC
45119: ST_TO_ADDR
45120: LD_INT 3
45122: PUSH
45123: FOR_TO
45124: IFFALSE 45153
// AddResourceType ( base , i , sources [ i ] ) ;
45126: LD_VAR 0 15
45130: PPUSH
45131: LD_VAR 0 8
45135: PPUSH
45136: LD_VAR 0 5
45140: PUSH
45141: LD_VAR 0 8
45145: ARRAY
45146: PPUSH
45147: CALL_OW 276
45151: GO 45123
45153: POP
45154: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
45155: LD_ADDR_VAR 0 18
45159: PUSH
45160: LD_VAR 0 15
45164: PPUSH
45165: LD_VAR 0 2
45169: PPUSH
45170: LD_INT 1
45172: PPUSH
45173: CALL 44416 0 3
45177: ST_TO_ADDR
// InitHc ;
45178: CALL_OW 19
// InitUc ;
45182: CALL_OW 18
// uc_side := side ;
45186: LD_ADDR_OWVAR 20
45190: PUSH
45191: LD_VAR 0 16
45195: ST_TO_ADDR
// uc_nation := nation ;
45196: LD_ADDR_OWVAR 21
45200: PUSH
45201: LD_VAR 0 17
45205: ST_TO_ADDR
// if buildings then
45206: LD_VAR 0 18
45210: IFFALSE 46532
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
45212: LD_ADDR_VAR 0 19
45216: PUSH
45217: LD_VAR 0 18
45221: PPUSH
45222: LD_INT 2
45224: PUSH
45225: LD_INT 30
45227: PUSH
45228: LD_INT 29
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 30
45237: PUSH
45238: LD_INT 30
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: LIST
45249: PPUSH
45250: CALL_OW 72
45254: ST_TO_ADDR
// if tmp then
45255: LD_VAR 0 19
45259: IFFALSE 45307
// for i in tmp do
45261: LD_ADDR_VAR 0 8
45265: PUSH
45266: LD_VAR 0 19
45270: PUSH
45271: FOR_IN
45272: IFFALSE 45305
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
45274: LD_VAR 0 8
45278: PPUSH
45279: CALL_OW 250
45283: PPUSH
45284: LD_VAR 0 8
45288: PPUSH
45289: CALL_OW 251
45293: PPUSH
45294: LD_VAR 0 16
45298: PPUSH
45299: CALL_OW 441
45303: GO 45271
45305: POP
45306: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
45307: LD_VAR 0 18
45311: PPUSH
45312: LD_INT 2
45314: PUSH
45315: LD_INT 30
45317: PUSH
45318: LD_INT 32
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 30
45327: PUSH
45328: LD_INT 33
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: LIST
45339: PPUSH
45340: CALL_OW 72
45344: IFFALSE 45432
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
45346: LD_ADDR_VAR 0 8
45350: PUSH
45351: LD_VAR 0 18
45355: PPUSH
45356: LD_INT 2
45358: PUSH
45359: LD_INT 30
45361: PUSH
45362: LD_INT 32
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: LD_INT 30
45371: PUSH
45372: LD_INT 33
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: LIST
45383: PPUSH
45384: CALL_OW 72
45388: PUSH
45389: FOR_IN
45390: IFFALSE 45430
// begin if not GetBWeapon ( i ) then
45392: LD_VAR 0 8
45396: PPUSH
45397: CALL_OW 269
45401: NOT
45402: IFFALSE 45428
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
45404: LD_VAR 0 8
45408: PPUSH
45409: LD_VAR 0 8
45413: PPUSH
45414: LD_VAR 0 2
45418: PPUSH
45419: CALL 46678 0 2
45423: PPUSH
45424: CALL_OW 431
// end ;
45428: GO 45389
45430: POP
45431: POP
// end ; for i = 1 to personel do
45432: LD_ADDR_VAR 0 8
45436: PUSH
45437: DOUBLE
45438: LD_INT 1
45440: DEC
45441: ST_TO_ADDR
45442: LD_VAR 0 6
45446: PUSH
45447: FOR_TO
45448: IFFALSE 46512
// begin if i > 4 then
45450: LD_VAR 0 8
45454: PUSH
45455: LD_INT 4
45457: GREATER
45458: IFFALSE 45462
// break ;
45460: GO 46512
// case i of 1 :
45462: LD_VAR 0 8
45466: PUSH
45467: LD_INT 1
45469: DOUBLE
45470: EQUAL
45471: IFTRUE 45475
45473: GO 45555
45475: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
45476: LD_ADDR_VAR 0 12
45480: PUSH
45481: LD_VAR 0 18
45485: PPUSH
45486: LD_INT 22
45488: PUSH
45489: LD_VAR 0 16
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 58
45500: PUSH
45501: EMPTY
45502: LIST
45503: PUSH
45504: LD_INT 2
45506: PUSH
45507: LD_INT 30
45509: PUSH
45510: LD_INT 32
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 30
45519: PUSH
45520: LD_INT 4
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 30
45529: PUSH
45530: LD_INT 5
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: LIST
45547: PPUSH
45548: CALL_OW 72
45552: ST_TO_ADDR
45553: GO 45777
45555: LD_INT 2
45557: DOUBLE
45558: EQUAL
45559: IFTRUE 45563
45561: GO 45625
45563: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
45564: LD_ADDR_VAR 0 12
45568: PUSH
45569: LD_VAR 0 18
45573: PPUSH
45574: LD_INT 22
45576: PUSH
45577: LD_VAR 0 16
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 2
45588: PUSH
45589: LD_INT 30
45591: PUSH
45592: LD_INT 0
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 30
45601: PUSH
45602: LD_INT 1
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: LIST
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PPUSH
45618: CALL_OW 72
45622: ST_TO_ADDR
45623: GO 45777
45625: LD_INT 3
45627: DOUBLE
45628: EQUAL
45629: IFTRUE 45633
45631: GO 45695
45633: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
45634: LD_ADDR_VAR 0 12
45638: PUSH
45639: LD_VAR 0 18
45643: PPUSH
45644: LD_INT 22
45646: PUSH
45647: LD_VAR 0 16
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 2
45658: PUSH
45659: LD_INT 30
45661: PUSH
45662: LD_INT 2
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 30
45671: PUSH
45672: LD_INT 3
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: LIST
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PPUSH
45688: CALL_OW 72
45692: ST_TO_ADDR
45693: GO 45777
45695: LD_INT 4
45697: DOUBLE
45698: EQUAL
45699: IFTRUE 45703
45701: GO 45776
45703: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
45704: LD_ADDR_VAR 0 12
45708: PUSH
45709: LD_VAR 0 18
45713: PPUSH
45714: LD_INT 22
45716: PUSH
45717: LD_VAR 0 16
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 2
45728: PUSH
45729: LD_INT 30
45731: PUSH
45732: LD_INT 6
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 30
45741: PUSH
45742: LD_INT 7
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 30
45751: PUSH
45752: LD_INT 8
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PPUSH
45769: CALL_OW 72
45773: ST_TO_ADDR
45774: GO 45777
45776: POP
// if i = 1 then
45777: LD_VAR 0 8
45781: PUSH
45782: LD_INT 1
45784: EQUAL
45785: IFFALSE 45896
// begin tmp := [ ] ;
45787: LD_ADDR_VAR 0 19
45791: PUSH
45792: EMPTY
45793: ST_TO_ADDR
// for j in f do
45794: LD_ADDR_VAR 0 9
45798: PUSH
45799: LD_VAR 0 12
45803: PUSH
45804: FOR_IN
45805: IFFALSE 45878
// if GetBType ( j ) = b_bunker then
45807: LD_VAR 0 9
45811: PPUSH
45812: CALL_OW 266
45816: PUSH
45817: LD_INT 32
45819: EQUAL
45820: IFFALSE 45847
// tmp := Insert ( tmp , 1 , j ) else
45822: LD_ADDR_VAR 0 19
45826: PUSH
45827: LD_VAR 0 19
45831: PPUSH
45832: LD_INT 1
45834: PPUSH
45835: LD_VAR 0 9
45839: PPUSH
45840: CALL_OW 2
45844: ST_TO_ADDR
45845: GO 45876
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45847: LD_ADDR_VAR 0 19
45851: PUSH
45852: LD_VAR 0 19
45856: PPUSH
45857: LD_VAR 0 19
45861: PUSH
45862: LD_INT 1
45864: PLUS
45865: PPUSH
45866: LD_VAR 0 9
45870: PPUSH
45871: CALL_OW 2
45875: ST_TO_ADDR
45876: GO 45804
45878: POP
45879: POP
// if tmp then
45880: LD_VAR 0 19
45884: IFFALSE 45896
// f := tmp ;
45886: LD_ADDR_VAR 0 12
45890: PUSH
45891: LD_VAR 0 19
45895: ST_TO_ADDR
// end ; x := personel [ i ] ;
45896: LD_ADDR_VAR 0 13
45900: PUSH
45901: LD_VAR 0 6
45905: PUSH
45906: LD_VAR 0 8
45910: ARRAY
45911: ST_TO_ADDR
// if x = - 1 then
45912: LD_VAR 0 13
45916: PUSH
45917: LD_INT 1
45919: NEG
45920: EQUAL
45921: IFFALSE 46130
// begin for j in f do
45923: LD_ADDR_VAR 0 9
45927: PUSH
45928: LD_VAR 0 12
45932: PUSH
45933: FOR_IN
45934: IFFALSE 46126
// repeat InitHc ;
45936: CALL_OW 19
// if GetBType ( j ) = b_barracks then
45940: LD_VAR 0 9
45944: PPUSH
45945: CALL_OW 266
45949: PUSH
45950: LD_INT 5
45952: EQUAL
45953: IFFALSE 46023
// begin if UnitsInside ( j ) < 3 then
45955: LD_VAR 0 9
45959: PPUSH
45960: CALL_OW 313
45964: PUSH
45965: LD_INT 3
45967: LESS
45968: IFFALSE 46004
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45970: LD_INT 0
45972: PPUSH
45973: LD_INT 5
45975: PUSH
45976: LD_INT 8
45978: PUSH
45979: LD_INT 9
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: LIST
45986: PUSH
45987: LD_VAR 0 17
45991: ARRAY
45992: PPUSH
45993: LD_VAR 0 4
45997: PPUSH
45998: CALL_OW 380
46002: GO 46021
// PrepareHuman ( false , i , skill ) ;
46004: LD_INT 0
46006: PPUSH
46007: LD_VAR 0 8
46011: PPUSH
46012: LD_VAR 0 4
46016: PPUSH
46017: CALL_OW 380
// end else
46021: GO 46040
// PrepareHuman ( false , i , skill ) ;
46023: LD_INT 0
46025: PPUSH
46026: LD_VAR 0 8
46030: PPUSH
46031: LD_VAR 0 4
46035: PPUSH
46036: CALL_OW 380
// un := CreateHuman ;
46040: LD_ADDR_VAR 0 14
46044: PUSH
46045: CALL_OW 44
46049: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46050: LD_ADDR_VAR 0 7
46054: PUSH
46055: LD_VAR 0 7
46059: PPUSH
46060: LD_INT 1
46062: PPUSH
46063: LD_VAR 0 14
46067: PPUSH
46068: CALL_OW 2
46072: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
46073: LD_VAR 0 14
46077: PPUSH
46078: LD_VAR 0 9
46082: PPUSH
46083: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
46087: LD_VAR 0 9
46091: PPUSH
46092: CALL_OW 313
46096: PUSH
46097: LD_INT 6
46099: EQUAL
46100: PUSH
46101: LD_VAR 0 9
46105: PPUSH
46106: CALL_OW 266
46110: PUSH
46111: LD_INT 32
46113: PUSH
46114: LD_INT 31
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: IN
46121: OR
46122: IFFALSE 45936
46124: GO 45933
46126: POP
46127: POP
// end else
46128: GO 46510
// for j = 1 to x do
46130: LD_ADDR_VAR 0 9
46134: PUSH
46135: DOUBLE
46136: LD_INT 1
46138: DEC
46139: ST_TO_ADDR
46140: LD_VAR 0 13
46144: PUSH
46145: FOR_TO
46146: IFFALSE 46508
// begin InitHc ;
46148: CALL_OW 19
// if not f then
46152: LD_VAR 0 12
46156: NOT
46157: IFFALSE 46246
// begin PrepareHuman ( false , i , skill ) ;
46159: LD_INT 0
46161: PPUSH
46162: LD_VAR 0 8
46166: PPUSH
46167: LD_VAR 0 4
46171: PPUSH
46172: CALL_OW 380
// un := CreateHuman ;
46176: LD_ADDR_VAR 0 14
46180: PUSH
46181: CALL_OW 44
46185: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46186: LD_ADDR_VAR 0 7
46190: PUSH
46191: LD_VAR 0 7
46195: PPUSH
46196: LD_INT 1
46198: PPUSH
46199: LD_VAR 0 14
46203: PPUSH
46204: CALL_OW 2
46208: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46209: LD_VAR 0 14
46213: PPUSH
46214: LD_VAR 0 1
46218: PPUSH
46219: CALL_OW 250
46223: PPUSH
46224: LD_VAR 0 1
46228: PPUSH
46229: CALL_OW 251
46233: PPUSH
46234: LD_INT 10
46236: PPUSH
46237: LD_INT 0
46239: PPUSH
46240: CALL_OW 50
// continue ;
46244: GO 46145
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
46246: LD_VAR 0 12
46250: PUSH
46251: LD_INT 1
46253: ARRAY
46254: PPUSH
46255: CALL_OW 313
46259: PUSH
46260: LD_VAR 0 12
46264: PUSH
46265: LD_INT 1
46267: ARRAY
46268: PPUSH
46269: CALL_OW 266
46273: PUSH
46274: LD_INT 32
46276: PUSH
46277: LD_INT 31
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: IN
46284: AND
46285: PUSH
46286: LD_VAR 0 12
46290: PUSH
46291: LD_INT 1
46293: ARRAY
46294: PPUSH
46295: CALL_OW 313
46299: PUSH
46300: LD_INT 6
46302: EQUAL
46303: OR
46304: IFFALSE 46324
// f := Delete ( f , 1 ) ;
46306: LD_ADDR_VAR 0 12
46310: PUSH
46311: LD_VAR 0 12
46315: PPUSH
46316: LD_INT 1
46318: PPUSH
46319: CALL_OW 3
46323: ST_TO_ADDR
// if not f then
46324: LD_VAR 0 12
46328: NOT
46329: IFFALSE 46347
// begin x := x + 2 ;
46331: LD_ADDR_VAR 0 13
46335: PUSH
46336: LD_VAR 0 13
46340: PUSH
46341: LD_INT 2
46343: PLUS
46344: ST_TO_ADDR
// continue ;
46345: GO 46145
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
46347: LD_VAR 0 12
46351: PUSH
46352: LD_INT 1
46354: ARRAY
46355: PPUSH
46356: CALL_OW 266
46360: PUSH
46361: LD_INT 5
46363: EQUAL
46364: IFFALSE 46438
// begin if UnitsInside ( f [ 1 ] ) < 3 then
46366: LD_VAR 0 12
46370: PUSH
46371: LD_INT 1
46373: ARRAY
46374: PPUSH
46375: CALL_OW 313
46379: PUSH
46380: LD_INT 3
46382: LESS
46383: IFFALSE 46419
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46385: LD_INT 0
46387: PPUSH
46388: LD_INT 5
46390: PUSH
46391: LD_INT 8
46393: PUSH
46394: LD_INT 9
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: LIST
46401: PUSH
46402: LD_VAR 0 17
46406: ARRAY
46407: PPUSH
46408: LD_VAR 0 4
46412: PPUSH
46413: CALL_OW 380
46417: GO 46436
// PrepareHuman ( false , i , skill ) ;
46419: LD_INT 0
46421: PPUSH
46422: LD_VAR 0 8
46426: PPUSH
46427: LD_VAR 0 4
46431: PPUSH
46432: CALL_OW 380
// end else
46436: GO 46455
// PrepareHuman ( false , i , skill ) ;
46438: LD_INT 0
46440: PPUSH
46441: LD_VAR 0 8
46445: PPUSH
46446: LD_VAR 0 4
46450: PPUSH
46451: CALL_OW 380
// un := CreateHuman ;
46455: LD_ADDR_VAR 0 14
46459: PUSH
46460: CALL_OW 44
46464: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46465: LD_ADDR_VAR 0 7
46469: PUSH
46470: LD_VAR 0 7
46474: PPUSH
46475: LD_INT 1
46477: PPUSH
46478: LD_VAR 0 14
46482: PPUSH
46483: CALL_OW 2
46487: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
46488: LD_VAR 0 14
46492: PPUSH
46493: LD_VAR 0 12
46497: PUSH
46498: LD_INT 1
46500: ARRAY
46501: PPUSH
46502: CALL_OW 52
// end ;
46506: GO 46145
46508: POP
46509: POP
// end ;
46510: GO 45447
46512: POP
46513: POP
// result := result ^ buildings ;
46514: LD_ADDR_VAR 0 7
46518: PUSH
46519: LD_VAR 0 7
46523: PUSH
46524: LD_VAR 0 18
46528: ADD
46529: ST_TO_ADDR
// end else
46530: GO 46673
// begin for i = 1 to personel do
46532: LD_ADDR_VAR 0 8
46536: PUSH
46537: DOUBLE
46538: LD_INT 1
46540: DEC
46541: ST_TO_ADDR
46542: LD_VAR 0 6
46546: PUSH
46547: FOR_TO
46548: IFFALSE 46671
// begin if i > 4 then
46550: LD_VAR 0 8
46554: PUSH
46555: LD_INT 4
46557: GREATER
46558: IFFALSE 46562
// break ;
46560: GO 46671
// x := personel [ i ] ;
46562: LD_ADDR_VAR 0 13
46566: PUSH
46567: LD_VAR 0 6
46571: PUSH
46572: LD_VAR 0 8
46576: ARRAY
46577: ST_TO_ADDR
// if x = - 1 then
46578: LD_VAR 0 13
46582: PUSH
46583: LD_INT 1
46585: NEG
46586: EQUAL
46587: IFFALSE 46591
// continue ;
46589: GO 46547
// PrepareHuman ( false , i , skill ) ;
46591: LD_INT 0
46593: PPUSH
46594: LD_VAR 0 8
46598: PPUSH
46599: LD_VAR 0 4
46603: PPUSH
46604: CALL_OW 380
// un := CreateHuman ;
46608: LD_ADDR_VAR 0 14
46612: PUSH
46613: CALL_OW 44
46617: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46618: LD_VAR 0 14
46622: PPUSH
46623: LD_VAR 0 1
46627: PPUSH
46628: CALL_OW 250
46632: PPUSH
46633: LD_VAR 0 1
46637: PPUSH
46638: CALL_OW 251
46642: PPUSH
46643: LD_INT 10
46645: PPUSH
46646: LD_INT 0
46648: PPUSH
46649: CALL_OW 50
// result := result ^ un ;
46653: LD_ADDR_VAR 0 7
46657: PUSH
46658: LD_VAR 0 7
46662: PUSH
46663: LD_VAR 0 14
46667: ADD
46668: ST_TO_ADDR
// end ;
46669: GO 46547
46671: POP
46672: POP
// end ; end ;
46673: LD_VAR 0 7
46677: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
46678: LD_INT 0
46680: PPUSH
46681: PPUSH
46682: PPUSH
46683: PPUSH
46684: PPUSH
46685: PPUSH
46686: PPUSH
46687: PPUSH
46688: PPUSH
46689: PPUSH
46690: PPUSH
46691: PPUSH
46692: PPUSH
46693: PPUSH
46694: PPUSH
46695: PPUSH
// result := false ;
46696: LD_ADDR_VAR 0 3
46700: PUSH
46701: LD_INT 0
46703: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
46704: LD_VAR 0 1
46708: NOT
46709: PUSH
46710: LD_VAR 0 1
46714: PPUSH
46715: CALL_OW 266
46719: PUSH
46720: LD_INT 32
46722: PUSH
46723: LD_INT 33
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: IN
46730: NOT
46731: OR
46732: IFFALSE 46736
// exit ;
46734: GO 47845
// nat := GetNation ( tower ) ;
46736: LD_ADDR_VAR 0 12
46740: PUSH
46741: LD_VAR 0 1
46745: PPUSH
46746: CALL_OW 248
46750: ST_TO_ADDR
// side := GetSide ( tower ) ;
46751: LD_ADDR_VAR 0 16
46755: PUSH
46756: LD_VAR 0 1
46760: PPUSH
46761: CALL_OW 255
46765: ST_TO_ADDR
// x := GetX ( tower ) ;
46766: LD_ADDR_VAR 0 10
46770: PUSH
46771: LD_VAR 0 1
46775: PPUSH
46776: CALL_OW 250
46780: ST_TO_ADDR
// y := GetY ( tower ) ;
46781: LD_ADDR_VAR 0 11
46785: PUSH
46786: LD_VAR 0 1
46790: PPUSH
46791: CALL_OW 251
46795: ST_TO_ADDR
// if not x or not y then
46796: LD_VAR 0 10
46800: NOT
46801: PUSH
46802: LD_VAR 0 11
46806: NOT
46807: OR
46808: IFFALSE 46812
// exit ;
46810: GO 47845
// weapon := 0 ;
46812: LD_ADDR_VAR 0 18
46816: PUSH
46817: LD_INT 0
46819: ST_TO_ADDR
// fac_list := [ ] ;
46820: LD_ADDR_VAR 0 17
46824: PUSH
46825: EMPTY
46826: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
46827: LD_ADDR_VAR 0 6
46831: PUSH
46832: LD_VAR 0 1
46836: PPUSH
46837: CALL_OW 274
46841: PPUSH
46842: LD_VAR 0 2
46846: PPUSH
46847: LD_INT 0
46849: PPUSH
46850: CALL 44416 0 3
46854: PPUSH
46855: LD_INT 30
46857: PUSH
46858: LD_INT 3
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PPUSH
46865: CALL_OW 72
46869: ST_TO_ADDR
// if not factories then
46870: LD_VAR 0 6
46874: NOT
46875: IFFALSE 46879
// exit ;
46877: GO 47845
// for i in factories do
46879: LD_ADDR_VAR 0 8
46883: PUSH
46884: LD_VAR 0 6
46888: PUSH
46889: FOR_IN
46890: IFFALSE 46915
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46892: LD_ADDR_VAR 0 17
46896: PUSH
46897: LD_VAR 0 17
46901: PUSH
46902: LD_VAR 0 8
46906: PPUSH
46907: CALL_OW 478
46911: UNION
46912: ST_TO_ADDR
46913: GO 46889
46915: POP
46916: POP
// if not fac_list then
46917: LD_VAR 0 17
46921: NOT
46922: IFFALSE 46926
// exit ;
46924: GO 47845
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
46926: LD_ADDR_VAR 0 5
46930: PUSH
46931: LD_INT 4
46933: PUSH
46934: LD_INT 5
46936: PUSH
46937: LD_INT 9
46939: PUSH
46940: LD_INT 10
46942: PUSH
46943: LD_INT 6
46945: PUSH
46946: LD_INT 7
46948: PUSH
46949: LD_INT 11
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 27
46963: PUSH
46964: LD_INT 28
46966: PUSH
46967: LD_INT 26
46969: PUSH
46970: LD_INT 30
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 43
46981: PUSH
46982: LD_INT 44
46984: PUSH
46985: LD_INT 46
46987: PUSH
46988: LD_INT 45
46990: PUSH
46991: LD_INT 47
46993: PUSH
46994: LD_INT 49
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: LIST
47009: PUSH
47010: LD_VAR 0 12
47014: ARRAY
47015: ST_TO_ADDR
// list := list isect fac_list ;
47016: LD_ADDR_VAR 0 5
47020: PUSH
47021: LD_VAR 0 5
47025: PUSH
47026: LD_VAR 0 17
47030: ISECT
47031: ST_TO_ADDR
// if not list then
47032: LD_VAR 0 5
47036: NOT
47037: IFFALSE 47041
// exit ;
47039: GO 47845
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
47041: LD_VAR 0 12
47045: PUSH
47046: LD_INT 3
47048: EQUAL
47049: PUSH
47050: LD_INT 49
47052: PUSH
47053: LD_VAR 0 5
47057: IN
47058: AND
47059: PUSH
47060: LD_INT 31
47062: PPUSH
47063: LD_VAR 0 16
47067: PPUSH
47068: CALL_OW 321
47072: PUSH
47073: LD_INT 2
47075: EQUAL
47076: AND
47077: IFFALSE 47137
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
47079: LD_INT 22
47081: PUSH
47082: LD_VAR 0 16
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 35
47093: PUSH
47094: LD_INT 49
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: LD_INT 91
47103: PUSH
47104: LD_VAR 0 1
47108: PUSH
47109: LD_INT 10
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: LIST
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: LIST
47121: PPUSH
47122: CALL_OW 69
47126: NOT
47127: IFFALSE 47137
// weapon := ru_time_lapser ;
47129: LD_ADDR_VAR 0 18
47133: PUSH
47134: LD_INT 49
47136: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
47137: LD_VAR 0 12
47141: PUSH
47142: LD_INT 1
47144: PUSH
47145: LD_INT 2
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: IN
47152: PUSH
47153: LD_INT 11
47155: PUSH
47156: LD_VAR 0 5
47160: IN
47161: PUSH
47162: LD_INT 30
47164: PUSH
47165: LD_VAR 0 5
47169: IN
47170: OR
47171: AND
47172: PUSH
47173: LD_INT 6
47175: PPUSH
47176: LD_VAR 0 16
47180: PPUSH
47181: CALL_OW 321
47185: PUSH
47186: LD_INT 2
47188: EQUAL
47189: AND
47190: IFFALSE 47355
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
47192: LD_INT 22
47194: PUSH
47195: LD_VAR 0 16
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 2
47206: PUSH
47207: LD_INT 35
47209: PUSH
47210: LD_INT 11
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 35
47219: PUSH
47220: LD_INT 30
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 91
47234: PUSH
47235: LD_VAR 0 1
47239: PUSH
47240: LD_INT 18
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: LIST
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: LIST
47252: PPUSH
47253: CALL_OW 69
47257: NOT
47258: PUSH
47259: LD_INT 22
47261: PUSH
47262: LD_VAR 0 16
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 2
47273: PUSH
47274: LD_INT 30
47276: PUSH
47277: LD_INT 32
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 30
47286: PUSH
47287: LD_INT 33
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 91
47301: PUSH
47302: LD_VAR 0 1
47306: PUSH
47307: LD_INT 12
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: LIST
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: LIST
47319: PUSH
47320: EMPTY
47321: LIST
47322: PPUSH
47323: CALL_OW 69
47327: PUSH
47328: LD_INT 2
47330: GREATER
47331: AND
47332: IFFALSE 47355
// weapon := [ us_radar , ar_radar ] [ nat ] ;
47334: LD_ADDR_VAR 0 18
47338: PUSH
47339: LD_INT 11
47341: PUSH
47342: LD_INT 30
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_VAR 0 12
47353: ARRAY
47354: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
47355: LD_VAR 0 18
47359: NOT
47360: PUSH
47361: LD_INT 40
47363: PPUSH
47364: LD_VAR 0 16
47368: PPUSH
47369: CALL_OW 321
47373: PUSH
47374: LD_INT 2
47376: EQUAL
47377: AND
47378: PUSH
47379: LD_INT 7
47381: PUSH
47382: LD_VAR 0 5
47386: IN
47387: PUSH
47388: LD_INT 28
47390: PUSH
47391: LD_VAR 0 5
47395: IN
47396: OR
47397: PUSH
47398: LD_INT 45
47400: PUSH
47401: LD_VAR 0 5
47405: IN
47406: OR
47407: AND
47408: IFFALSE 47662
// begin hex := GetHexInfo ( x , y ) ;
47410: LD_ADDR_VAR 0 4
47414: PUSH
47415: LD_VAR 0 10
47419: PPUSH
47420: LD_VAR 0 11
47424: PPUSH
47425: CALL_OW 546
47429: ST_TO_ADDR
// if hex [ 1 ] then
47430: LD_VAR 0 4
47434: PUSH
47435: LD_INT 1
47437: ARRAY
47438: IFFALSE 47442
// exit ;
47440: GO 47845
// height := hex [ 2 ] ;
47442: LD_ADDR_VAR 0 15
47446: PUSH
47447: LD_VAR 0 4
47451: PUSH
47452: LD_INT 2
47454: ARRAY
47455: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
47456: LD_ADDR_VAR 0 14
47460: PUSH
47461: LD_INT 0
47463: PUSH
47464: LD_INT 2
47466: PUSH
47467: LD_INT 3
47469: PUSH
47470: LD_INT 5
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: ST_TO_ADDR
// for i in tmp do
47479: LD_ADDR_VAR 0 8
47483: PUSH
47484: LD_VAR 0 14
47488: PUSH
47489: FOR_IN
47490: IFFALSE 47660
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
47492: LD_ADDR_VAR 0 9
47496: PUSH
47497: LD_VAR 0 10
47501: PPUSH
47502: LD_VAR 0 8
47506: PPUSH
47507: LD_INT 5
47509: PPUSH
47510: CALL_OW 272
47514: PUSH
47515: LD_VAR 0 11
47519: PPUSH
47520: LD_VAR 0 8
47524: PPUSH
47525: LD_INT 5
47527: PPUSH
47528: CALL_OW 273
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
47537: LD_VAR 0 9
47541: PUSH
47542: LD_INT 1
47544: ARRAY
47545: PPUSH
47546: LD_VAR 0 9
47550: PUSH
47551: LD_INT 2
47553: ARRAY
47554: PPUSH
47555: CALL_OW 488
47559: IFFALSE 47658
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
47561: LD_ADDR_VAR 0 4
47565: PUSH
47566: LD_VAR 0 9
47570: PUSH
47571: LD_INT 1
47573: ARRAY
47574: PPUSH
47575: LD_VAR 0 9
47579: PUSH
47580: LD_INT 2
47582: ARRAY
47583: PPUSH
47584: CALL_OW 546
47588: ST_TO_ADDR
// if hex [ 1 ] then
47589: LD_VAR 0 4
47593: PUSH
47594: LD_INT 1
47596: ARRAY
47597: IFFALSE 47601
// continue ;
47599: GO 47489
// h := hex [ 2 ] ;
47601: LD_ADDR_VAR 0 13
47605: PUSH
47606: LD_VAR 0 4
47610: PUSH
47611: LD_INT 2
47613: ARRAY
47614: ST_TO_ADDR
// if h + 7 < height then
47615: LD_VAR 0 13
47619: PUSH
47620: LD_INT 7
47622: PLUS
47623: PUSH
47624: LD_VAR 0 15
47628: LESS
47629: IFFALSE 47658
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
47631: LD_ADDR_VAR 0 18
47635: PUSH
47636: LD_INT 7
47638: PUSH
47639: LD_INT 28
47641: PUSH
47642: LD_INT 45
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: LIST
47649: PUSH
47650: LD_VAR 0 12
47654: ARRAY
47655: ST_TO_ADDR
// break ;
47656: GO 47660
// end ; end ; end ;
47658: GO 47489
47660: POP
47661: POP
// end ; if not weapon then
47662: LD_VAR 0 18
47666: NOT
47667: IFFALSE 47727
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
47669: LD_ADDR_VAR 0 5
47673: PUSH
47674: LD_VAR 0 5
47678: PUSH
47679: LD_INT 11
47681: PUSH
47682: LD_INT 30
47684: PUSH
47685: LD_INT 49
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: LIST
47692: DIFF
47693: ST_TO_ADDR
// if not list then
47694: LD_VAR 0 5
47698: NOT
47699: IFFALSE 47703
// exit ;
47701: GO 47845
// weapon := list [ rand ( 1 , list ) ] ;
47703: LD_ADDR_VAR 0 18
47707: PUSH
47708: LD_VAR 0 5
47712: PUSH
47713: LD_INT 1
47715: PPUSH
47716: LD_VAR 0 5
47720: PPUSH
47721: CALL_OW 12
47725: ARRAY
47726: ST_TO_ADDR
// end ; if weapon then
47727: LD_VAR 0 18
47731: IFFALSE 47845
// begin tmp := CostOfWeapon ( weapon ) ;
47733: LD_ADDR_VAR 0 14
47737: PUSH
47738: LD_VAR 0 18
47742: PPUSH
47743: CALL_OW 451
47747: ST_TO_ADDR
// j := GetBase ( tower ) ;
47748: LD_ADDR_VAR 0 9
47752: PUSH
47753: LD_VAR 0 1
47757: PPUSH
47758: CALL_OW 274
47762: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47763: LD_VAR 0 9
47767: PPUSH
47768: LD_INT 1
47770: PPUSH
47771: CALL_OW 275
47775: PUSH
47776: LD_VAR 0 14
47780: PUSH
47781: LD_INT 1
47783: ARRAY
47784: GREATEREQUAL
47785: PUSH
47786: LD_VAR 0 9
47790: PPUSH
47791: LD_INT 2
47793: PPUSH
47794: CALL_OW 275
47798: PUSH
47799: LD_VAR 0 14
47803: PUSH
47804: LD_INT 2
47806: ARRAY
47807: GREATEREQUAL
47808: AND
47809: PUSH
47810: LD_VAR 0 9
47814: PPUSH
47815: LD_INT 3
47817: PPUSH
47818: CALL_OW 275
47822: PUSH
47823: LD_VAR 0 14
47827: PUSH
47828: LD_INT 3
47830: ARRAY
47831: GREATEREQUAL
47832: AND
47833: IFFALSE 47845
// result := weapon ;
47835: LD_ADDR_VAR 0 3
47839: PUSH
47840: LD_VAR 0 18
47844: ST_TO_ADDR
// end ; end ;
47845: LD_VAR 0 3
47849: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47850: LD_INT 0
47852: PPUSH
47853: PPUSH
// result := true ;
47854: LD_ADDR_VAR 0 3
47858: PUSH
47859: LD_INT 1
47861: ST_TO_ADDR
// if array1 = array2 then
47862: LD_VAR 0 1
47866: PUSH
47867: LD_VAR 0 2
47871: EQUAL
47872: IFFALSE 47932
// begin for i = 1 to array1 do
47874: LD_ADDR_VAR 0 4
47878: PUSH
47879: DOUBLE
47880: LD_INT 1
47882: DEC
47883: ST_TO_ADDR
47884: LD_VAR 0 1
47888: PUSH
47889: FOR_TO
47890: IFFALSE 47928
// if array1 [ i ] <> array2 [ i ] then
47892: LD_VAR 0 1
47896: PUSH
47897: LD_VAR 0 4
47901: ARRAY
47902: PUSH
47903: LD_VAR 0 2
47907: PUSH
47908: LD_VAR 0 4
47912: ARRAY
47913: NONEQUAL
47914: IFFALSE 47926
// begin result := false ;
47916: LD_ADDR_VAR 0 3
47920: PUSH
47921: LD_INT 0
47923: ST_TO_ADDR
// break ;
47924: GO 47928
// end ;
47926: GO 47889
47928: POP
47929: POP
// end else
47930: GO 47940
// result := false ;
47932: LD_ADDR_VAR 0 3
47936: PUSH
47937: LD_INT 0
47939: ST_TO_ADDR
// end ;
47940: LD_VAR 0 3
47944: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
47945: LD_INT 0
47947: PPUSH
47948: PPUSH
// if not array1 or not array2 then
47949: LD_VAR 0 1
47953: NOT
47954: PUSH
47955: LD_VAR 0 2
47959: NOT
47960: OR
47961: IFFALSE 47965
// exit ;
47963: GO 48029
// result := true ;
47965: LD_ADDR_VAR 0 3
47969: PUSH
47970: LD_INT 1
47972: ST_TO_ADDR
// for i = 1 to array1 do
47973: LD_ADDR_VAR 0 4
47977: PUSH
47978: DOUBLE
47979: LD_INT 1
47981: DEC
47982: ST_TO_ADDR
47983: LD_VAR 0 1
47987: PUSH
47988: FOR_TO
47989: IFFALSE 48027
// if array1 [ i ] <> array2 [ i ] then
47991: LD_VAR 0 1
47995: PUSH
47996: LD_VAR 0 4
48000: ARRAY
48001: PUSH
48002: LD_VAR 0 2
48006: PUSH
48007: LD_VAR 0 4
48011: ARRAY
48012: NONEQUAL
48013: IFFALSE 48025
// begin result := false ;
48015: LD_ADDR_VAR 0 3
48019: PUSH
48020: LD_INT 0
48022: ST_TO_ADDR
// break ;
48023: GO 48027
// end ;
48025: GO 47988
48027: POP
48028: POP
// end ;
48029: LD_VAR 0 3
48033: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
48034: LD_INT 0
48036: PPUSH
48037: PPUSH
48038: PPUSH
// pom := GetBase ( fac ) ;
48039: LD_ADDR_VAR 0 5
48043: PUSH
48044: LD_VAR 0 1
48048: PPUSH
48049: CALL_OW 274
48053: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
48054: LD_ADDR_VAR 0 4
48058: PUSH
48059: LD_VAR 0 2
48063: PUSH
48064: LD_INT 1
48066: ARRAY
48067: PPUSH
48068: LD_VAR 0 2
48072: PUSH
48073: LD_INT 2
48075: ARRAY
48076: PPUSH
48077: LD_VAR 0 2
48081: PUSH
48082: LD_INT 3
48084: ARRAY
48085: PPUSH
48086: LD_VAR 0 2
48090: PUSH
48091: LD_INT 4
48093: ARRAY
48094: PPUSH
48095: CALL_OW 449
48099: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48100: LD_ADDR_VAR 0 3
48104: PUSH
48105: LD_VAR 0 5
48109: PPUSH
48110: LD_INT 1
48112: PPUSH
48113: CALL_OW 275
48117: PUSH
48118: LD_VAR 0 4
48122: PUSH
48123: LD_INT 1
48125: ARRAY
48126: GREATEREQUAL
48127: PUSH
48128: LD_VAR 0 5
48132: PPUSH
48133: LD_INT 2
48135: PPUSH
48136: CALL_OW 275
48140: PUSH
48141: LD_VAR 0 4
48145: PUSH
48146: LD_INT 2
48148: ARRAY
48149: GREATEREQUAL
48150: AND
48151: PUSH
48152: LD_VAR 0 5
48156: PPUSH
48157: LD_INT 3
48159: PPUSH
48160: CALL_OW 275
48164: PUSH
48165: LD_VAR 0 4
48169: PUSH
48170: LD_INT 3
48172: ARRAY
48173: GREATEREQUAL
48174: AND
48175: ST_TO_ADDR
// end ;
48176: LD_VAR 0 3
48180: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
48181: LD_INT 0
48183: PPUSH
48184: PPUSH
48185: PPUSH
48186: PPUSH
// pom := GetBase ( building ) ;
48187: LD_ADDR_VAR 0 3
48191: PUSH
48192: LD_VAR 0 1
48196: PPUSH
48197: CALL_OW 274
48201: ST_TO_ADDR
// if not pom then
48202: LD_VAR 0 3
48206: NOT
48207: IFFALSE 48211
// exit ;
48209: GO 48381
// btype := GetBType ( building ) ;
48211: LD_ADDR_VAR 0 5
48215: PUSH
48216: LD_VAR 0 1
48220: PPUSH
48221: CALL_OW 266
48225: ST_TO_ADDR
// if btype = b_armoury then
48226: LD_VAR 0 5
48230: PUSH
48231: LD_INT 4
48233: EQUAL
48234: IFFALSE 48244
// btype := b_barracks ;
48236: LD_ADDR_VAR 0 5
48240: PUSH
48241: LD_INT 5
48243: ST_TO_ADDR
// if btype = b_depot then
48244: LD_VAR 0 5
48248: PUSH
48249: LD_INT 0
48251: EQUAL
48252: IFFALSE 48262
// btype := b_warehouse ;
48254: LD_ADDR_VAR 0 5
48258: PUSH
48259: LD_INT 1
48261: ST_TO_ADDR
// if btype = b_workshop then
48262: LD_VAR 0 5
48266: PUSH
48267: LD_INT 2
48269: EQUAL
48270: IFFALSE 48280
// btype := b_factory ;
48272: LD_ADDR_VAR 0 5
48276: PUSH
48277: LD_INT 3
48279: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48280: LD_ADDR_VAR 0 4
48284: PUSH
48285: LD_VAR 0 5
48289: PPUSH
48290: LD_VAR 0 1
48294: PPUSH
48295: CALL_OW 248
48299: PPUSH
48300: CALL_OW 450
48304: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48305: LD_ADDR_VAR 0 2
48309: PUSH
48310: LD_VAR 0 3
48314: PPUSH
48315: LD_INT 1
48317: PPUSH
48318: CALL_OW 275
48322: PUSH
48323: LD_VAR 0 4
48327: PUSH
48328: LD_INT 1
48330: ARRAY
48331: GREATEREQUAL
48332: PUSH
48333: LD_VAR 0 3
48337: PPUSH
48338: LD_INT 2
48340: PPUSH
48341: CALL_OW 275
48345: PUSH
48346: LD_VAR 0 4
48350: PUSH
48351: LD_INT 2
48353: ARRAY
48354: GREATEREQUAL
48355: AND
48356: PUSH
48357: LD_VAR 0 3
48361: PPUSH
48362: LD_INT 3
48364: PPUSH
48365: CALL_OW 275
48369: PUSH
48370: LD_VAR 0 4
48374: PUSH
48375: LD_INT 3
48377: ARRAY
48378: GREATEREQUAL
48379: AND
48380: ST_TO_ADDR
// end ;
48381: LD_VAR 0 2
48385: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
48386: LD_INT 0
48388: PPUSH
48389: PPUSH
48390: PPUSH
// pom := GetBase ( building ) ;
48391: LD_ADDR_VAR 0 4
48395: PUSH
48396: LD_VAR 0 1
48400: PPUSH
48401: CALL_OW 274
48405: ST_TO_ADDR
// if not pom then
48406: LD_VAR 0 4
48410: NOT
48411: IFFALSE 48415
// exit ;
48413: GO 48516
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48415: LD_ADDR_VAR 0 5
48419: PUSH
48420: LD_VAR 0 2
48424: PPUSH
48425: LD_VAR 0 1
48429: PPUSH
48430: CALL_OW 248
48434: PPUSH
48435: CALL_OW 450
48439: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48440: LD_ADDR_VAR 0 3
48444: PUSH
48445: LD_VAR 0 4
48449: PPUSH
48450: LD_INT 1
48452: PPUSH
48453: CALL_OW 275
48457: PUSH
48458: LD_VAR 0 5
48462: PUSH
48463: LD_INT 1
48465: ARRAY
48466: GREATEREQUAL
48467: PUSH
48468: LD_VAR 0 4
48472: PPUSH
48473: LD_INT 2
48475: PPUSH
48476: CALL_OW 275
48480: PUSH
48481: LD_VAR 0 5
48485: PUSH
48486: LD_INT 2
48488: ARRAY
48489: GREATEREQUAL
48490: AND
48491: PUSH
48492: LD_VAR 0 4
48496: PPUSH
48497: LD_INT 3
48499: PPUSH
48500: CALL_OW 275
48504: PUSH
48505: LD_VAR 0 5
48509: PUSH
48510: LD_INT 3
48512: ARRAY
48513: GREATEREQUAL
48514: AND
48515: ST_TO_ADDR
// end ;
48516: LD_VAR 0 3
48520: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
48521: LD_INT 0
48523: PPUSH
48524: PPUSH
48525: PPUSH
48526: PPUSH
48527: PPUSH
48528: PPUSH
48529: PPUSH
48530: PPUSH
48531: PPUSH
48532: PPUSH
48533: PPUSH
// result := false ;
48534: LD_ADDR_VAR 0 8
48538: PUSH
48539: LD_INT 0
48541: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
48542: LD_VAR 0 5
48546: NOT
48547: PUSH
48548: LD_VAR 0 1
48552: NOT
48553: OR
48554: PUSH
48555: LD_VAR 0 2
48559: NOT
48560: OR
48561: PUSH
48562: LD_VAR 0 3
48566: NOT
48567: OR
48568: IFFALSE 48572
// exit ;
48570: GO 49386
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
48572: LD_ADDR_VAR 0 14
48576: PUSH
48577: LD_VAR 0 1
48581: PPUSH
48582: LD_VAR 0 2
48586: PPUSH
48587: LD_VAR 0 3
48591: PPUSH
48592: LD_VAR 0 4
48596: PPUSH
48597: LD_VAR 0 5
48601: PUSH
48602: LD_INT 1
48604: ARRAY
48605: PPUSH
48606: CALL_OW 248
48610: PPUSH
48611: LD_INT 0
48613: PPUSH
48614: CALL 50639 0 6
48618: ST_TO_ADDR
// if not hexes then
48619: LD_VAR 0 14
48623: NOT
48624: IFFALSE 48628
// exit ;
48626: GO 49386
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48628: LD_ADDR_VAR 0 17
48632: PUSH
48633: LD_VAR 0 5
48637: PPUSH
48638: LD_INT 22
48640: PUSH
48641: LD_VAR 0 13
48645: PPUSH
48646: CALL_OW 255
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 2
48657: PUSH
48658: LD_INT 30
48660: PUSH
48661: LD_INT 0
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: LD_INT 30
48670: PUSH
48671: LD_INT 1
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: LIST
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PPUSH
48687: CALL_OW 72
48691: ST_TO_ADDR
// for i = 1 to hexes do
48692: LD_ADDR_VAR 0 9
48696: PUSH
48697: DOUBLE
48698: LD_INT 1
48700: DEC
48701: ST_TO_ADDR
48702: LD_VAR 0 14
48706: PUSH
48707: FOR_TO
48708: IFFALSE 49384
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48710: LD_ADDR_VAR 0 13
48714: PUSH
48715: LD_VAR 0 14
48719: PUSH
48720: LD_VAR 0 9
48724: ARRAY
48725: PUSH
48726: LD_INT 1
48728: ARRAY
48729: PPUSH
48730: LD_VAR 0 14
48734: PUSH
48735: LD_VAR 0 9
48739: ARRAY
48740: PUSH
48741: LD_INT 2
48743: ARRAY
48744: PPUSH
48745: CALL_OW 428
48749: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48750: LD_VAR 0 14
48754: PUSH
48755: LD_VAR 0 9
48759: ARRAY
48760: PUSH
48761: LD_INT 1
48763: ARRAY
48764: PPUSH
48765: LD_VAR 0 14
48769: PUSH
48770: LD_VAR 0 9
48774: ARRAY
48775: PUSH
48776: LD_INT 2
48778: ARRAY
48779: PPUSH
48780: CALL_OW 351
48784: PUSH
48785: LD_VAR 0 14
48789: PUSH
48790: LD_VAR 0 9
48794: ARRAY
48795: PUSH
48796: LD_INT 1
48798: ARRAY
48799: PPUSH
48800: LD_VAR 0 14
48804: PUSH
48805: LD_VAR 0 9
48809: ARRAY
48810: PUSH
48811: LD_INT 2
48813: ARRAY
48814: PPUSH
48815: CALL_OW 488
48819: NOT
48820: OR
48821: PUSH
48822: LD_VAR 0 13
48826: PPUSH
48827: CALL_OW 247
48831: PUSH
48832: LD_INT 3
48834: EQUAL
48835: OR
48836: IFFALSE 48842
// exit ;
48838: POP
48839: POP
48840: GO 49386
// if not tmp then
48842: LD_VAR 0 13
48846: NOT
48847: IFFALSE 48851
// continue ;
48849: GO 48707
// result := true ;
48851: LD_ADDR_VAR 0 8
48855: PUSH
48856: LD_INT 1
48858: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
48859: LD_VAR 0 6
48863: PUSH
48864: LD_VAR 0 13
48868: PPUSH
48869: CALL_OW 247
48873: PUSH
48874: LD_INT 2
48876: EQUAL
48877: AND
48878: PUSH
48879: LD_VAR 0 13
48883: PPUSH
48884: CALL_OW 263
48888: PUSH
48889: LD_INT 1
48891: EQUAL
48892: AND
48893: IFFALSE 49057
// begin if IsDrivenBy ( tmp ) then
48895: LD_VAR 0 13
48899: PPUSH
48900: CALL_OW 311
48904: IFFALSE 48908
// continue ;
48906: GO 48707
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
48908: LD_VAR 0 6
48912: PPUSH
48913: LD_INT 3
48915: PUSH
48916: LD_INT 60
48918: PUSH
48919: EMPTY
48920: LIST
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 3
48928: PUSH
48929: LD_INT 55
48931: PUSH
48932: EMPTY
48933: LIST
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PPUSH
48943: CALL_OW 72
48947: IFFALSE 49055
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
48949: LD_ADDR_VAR 0 18
48953: PUSH
48954: LD_VAR 0 6
48958: PPUSH
48959: LD_INT 3
48961: PUSH
48962: LD_INT 60
48964: PUSH
48965: EMPTY
48966: LIST
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 3
48974: PUSH
48975: LD_INT 55
48977: PUSH
48978: EMPTY
48979: LIST
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PPUSH
48989: CALL_OW 72
48993: PUSH
48994: LD_INT 1
48996: ARRAY
48997: ST_TO_ADDR
// if IsInUnit ( driver ) then
48998: LD_VAR 0 18
49002: PPUSH
49003: CALL_OW 310
49007: IFFALSE 49018
// ComExit ( driver ) ;
49009: LD_VAR 0 18
49013: PPUSH
49014: CALL 74431 0 1
// AddComEnterUnit ( driver , tmp ) ;
49018: LD_VAR 0 18
49022: PPUSH
49023: LD_VAR 0 13
49027: PPUSH
49028: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
49032: LD_VAR 0 18
49036: PPUSH
49037: LD_VAR 0 7
49041: PPUSH
49042: CALL_OW 173
// AddComExitVehicle ( driver ) ;
49046: LD_VAR 0 18
49050: PPUSH
49051: CALL_OW 181
// end ; continue ;
49055: GO 48707
// end ; if not cleaners or not tmp in cleaners then
49057: LD_VAR 0 6
49061: NOT
49062: PUSH
49063: LD_VAR 0 13
49067: PUSH
49068: LD_VAR 0 6
49072: IN
49073: NOT
49074: OR
49075: IFFALSE 49382
// begin if dep then
49077: LD_VAR 0 17
49081: IFFALSE 49217
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
49083: LD_ADDR_VAR 0 16
49087: PUSH
49088: LD_VAR 0 17
49092: PUSH
49093: LD_INT 1
49095: ARRAY
49096: PPUSH
49097: CALL_OW 250
49101: PPUSH
49102: LD_VAR 0 17
49106: PUSH
49107: LD_INT 1
49109: ARRAY
49110: PPUSH
49111: CALL_OW 254
49115: PPUSH
49116: LD_INT 5
49118: PPUSH
49119: CALL_OW 272
49123: PUSH
49124: LD_VAR 0 17
49128: PUSH
49129: LD_INT 1
49131: ARRAY
49132: PPUSH
49133: CALL_OW 251
49137: PPUSH
49138: LD_VAR 0 17
49142: PUSH
49143: LD_INT 1
49145: ARRAY
49146: PPUSH
49147: CALL_OW 254
49151: PPUSH
49152: LD_INT 5
49154: PPUSH
49155: CALL_OW 273
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
49164: LD_VAR 0 16
49168: PUSH
49169: LD_INT 1
49171: ARRAY
49172: PPUSH
49173: LD_VAR 0 16
49177: PUSH
49178: LD_INT 2
49180: ARRAY
49181: PPUSH
49182: CALL_OW 488
49186: IFFALSE 49217
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
49188: LD_VAR 0 13
49192: PPUSH
49193: LD_VAR 0 16
49197: PUSH
49198: LD_INT 1
49200: ARRAY
49201: PPUSH
49202: LD_VAR 0 16
49206: PUSH
49207: LD_INT 2
49209: ARRAY
49210: PPUSH
49211: CALL_OW 111
// continue ;
49215: GO 48707
// end ; end ; r := GetDir ( tmp ) ;
49217: LD_ADDR_VAR 0 15
49221: PUSH
49222: LD_VAR 0 13
49226: PPUSH
49227: CALL_OW 254
49231: ST_TO_ADDR
// if r = 5 then
49232: LD_VAR 0 15
49236: PUSH
49237: LD_INT 5
49239: EQUAL
49240: IFFALSE 49250
// r := 0 ;
49242: LD_ADDR_VAR 0 15
49246: PUSH
49247: LD_INT 0
49249: ST_TO_ADDR
// for j = r to 5 do
49250: LD_ADDR_VAR 0 10
49254: PUSH
49255: DOUBLE
49256: LD_VAR 0 15
49260: DEC
49261: ST_TO_ADDR
49262: LD_INT 5
49264: PUSH
49265: FOR_TO
49266: IFFALSE 49380
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
49268: LD_ADDR_VAR 0 11
49272: PUSH
49273: LD_VAR 0 13
49277: PPUSH
49278: CALL_OW 250
49282: PPUSH
49283: LD_VAR 0 10
49287: PPUSH
49288: LD_INT 2
49290: PPUSH
49291: CALL_OW 272
49295: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
49296: LD_ADDR_VAR 0 12
49300: PUSH
49301: LD_VAR 0 13
49305: PPUSH
49306: CALL_OW 251
49310: PPUSH
49311: LD_VAR 0 10
49315: PPUSH
49316: LD_INT 2
49318: PPUSH
49319: CALL_OW 273
49323: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
49324: LD_VAR 0 11
49328: PPUSH
49329: LD_VAR 0 12
49333: PPUSH
49334: CALL_OW 488
49338: PUSH
49339: LD_VAR 0 11
49343: PPUSH
49344: LD_VAR 0 12
49348: PPUSH
49349: CALL_OW 428
49353: NOT
49354: AND
49355: IFFALSE 49378
// begin ComMoveXY ( tmp , _x , _y ) ;
49357: LD_VAR 0 13
49361: PPUSH
49362: LD_VAR 0 11
49366: PPUSH
49367: LD_VAR 0 12
49371: PPUSH
49372: CALL_OW 111
// break ;
49376: GO 49380
// end ; end ;
49378: GO 49265
49380: POP
49381: POP
// end ; end ;
49382: GO 48707
49384: POP
49385: POP
// end ;
49386: LD_VAR 0 8
49390: RET
// export function BuildingTechInvented ( side , btype ) ; begin
49391: LD_INT 0
49393: PPUSH
// result := true ;
49394: LD_ADDR_VAR 0 3
49398: PUSH
49399: LD_INT 1
49401: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
49402: LD_VAR 0 2
49406: PUSH
49407: LD_INT 24
49409: DOUBLE
49410: EQUAL
49411: IFTRUE 49421
49413: LD_INT 33
49415: DOUBLE
49416: EQUAL
49417: IFTRUE 49421
49419: GO 49446
49421: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
49422: LD_ADDR_VAR 0 3
49426: PUSH
49427: LD_INT 32
49429: PPUSH
49430: LD_VAR 0 1
49434: PPUSH
49435: CALL_OW 321
49439: PUSH
49440: LD_INT 2
49442: EQUAL
49443: ST_TO_ADDR
49444: GO 49762
49446: LD_INT 20
49448: DOUBLE
49449: EQUAL
49450: IFTRUE 49454
49452: GO 49479
49454: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
49455: LD_ADDR_VAR 0 3
49459: PUSH
49460: LD_INT 6
49462: PPUSH
49463: LD_VAR 0 1
49467: PPUSH
49468: CALL_OW 321
49472: PUSH
49473: LD_INT 2
49475: EQUAL
49476: ST_TO_ADDR
49477: GO 49762
49479: LD_INT 22
49481: DOUBLE
49482: EQUAL
49483: IFTRUE 49493
49485: LD_INT 36
49487: DOUBLE
49488: EQUAL
49489: IFTRUE 49493
49491: GO 49518
49493: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
49494: LD_ADDR_VAR 0 3
49498: PUSH
49499: LD_INT 15
49501: PPUSH
49502: LD_VAR 0 1
49506: PPUSH
49507: CALL_OW 321
49511: PUSH
49512: LD_INT 2
49514: EQUAL
49515: ST_TO_ADDR
49516: GO 49762
49518: LD_INT 30
49520: DOUBLE
49521: EQUAL
49522: IFTRUE 49526
49524: GO 49551
49526: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
49527: LD_ADDR_VAR 0 3
49531: PUSH
49532: LD_INT 20
49534: PPUSH
49535: LD_VAR 0 1
49539: PPUSH
49540: CALL_OW 321
49544: PUSH
49545: LD_INT 2
49547: EQUAL
49548: ST_TO_ADDR
49549: GO 49762
49551: LD_INT 28
49553: DOUBLE
49554: EQUAL
49555: IFTRUE 49565
49557: LD_INT 21
49559: DOUBLE
49560: EQUAL
49561: IFTRUE 49565
49563: GO 49590
49565: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
49566: LD_ADDR_VAR 0 3
49570: PUSH
49571: LD_INT 21
49573: PPUSH
49574: LD_VAR 0 1
49578: PPUSH
49579: CALL_OW 321
49583: PUSH
49584: LD_INT 2
49586: EQUAL
49587: ST_TO_ADDR
49588: GO 49762
49590: LD_INT 16
49592: DOUBLE
49593: EQUAL
49594: IFTRUE 49598
49596: GO 49623
49598: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
49599: LD_ADDR_VAR 0 3
49603: PUSH
49604: LD_INT 84
49606: PPUSH
49607: LD_VAR 0 1
49611: PPUSH
49612: CALL_OW 321
49616: PUSH
49617: LD_INT 2
49619: EQUAL
49620: ST_TO_ADDR
49621: GO 49762
49623: LD_INT 19
49625: DOUBLE
49626: EQUAL
49627: IFTRUE 49637
49629: LD_INT 23
49631: DOUBLE
49632: EQUAL
49633: IFTRUE 49637
49635: GO 49662
49637: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
49638: LD_ADDR_VAR 0 3
49642: PUSH
49643: LD_INT 83
49645: PPUSH
49646: LD_VAR 0 1
49650: PPUSH
49651: CALL_OW 321
49655: PUSH
49656: LD_INT 2
49658: EQUAL
49659: ST_TO_ADDR
49660: GO 49762
49662: LD_INT 17
49664: DOUBLE
49665: EQUAL
49666: IFTRUE 49670
49668: GO 49695
49670: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
49671: LD_ADDR_VAR 0 3
49675: PUSH
49676: LD_INT 39
49678: PPUSH
49679: LD_VAR 0 1
49683: PPUSH
49684: CALL_OW 321
49688: PUSH
49689: LD_INT 2
49691: EQUAL
49692: ST_TO_ADDR
49693: GO 49762
49695: LD_INT 18
49697: DOUBLE
49698: EQUAL
49699: IFTRUE 49703
49701: GO 49728
49703: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
49704: LD_ADDR_VAR 0 3
49708: PUSH
49709: LD_INT 40
49711: PPUSH
49712: LD_VAR 0 1
49716: PPUSH
49717: CALL_OW 321
49721: PUSH
49722: LD_INT 2
49724: EQUAL
49725: ST_TO_ADDR
49726: GO 49762
49728: LD_INT 27
49730: DOUBLE
49731: EQUAL
49732: IFTRUE 49736
49734: GO 49761
49736: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
49737: LD_ADDR_VAR 0 3
49741: PUSH
49742: LD_INT 35
49744: PPUSH
49745: LD_VAR 0 1
49749: PPUSH
49750: CALL_OW 321
49754: PUSH
49755: LD_INT 2
49757: EQUAL
49758: ST_TO_ADDR
49759: GO 49762
49761: POP
// end ;
49762: LD_VAR 0 3
49766: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
49767: LD_INT 0
49769: PPUSH
49770: PPUSH
49771: PPUSH
49772: PPUSH
49773: PPUSH
49774: PPUSH
49775: PPUSH
49776: PPUSH
49777: PPUSH
49778: PPUSH
49779: PPUSH
// result := false ;
49780: LD_ADDR_VAR 0 6
49784: PUSH
49785: LD_INT 0
49787: ST_TO_ADDR
// if btype = b_depot then
49788: LD_VAR 0 2
49792: PUSH
49793: LD_INT 0
49795: EQUAL
49796: IFFALSE 49808
// begin result := true ;
49798: LD_ADDR_VAR 0 6
49802: PUSH
49803: LD_INT 1
49805: ST_TO_ADDR
// exit ;
49806: GO 50634
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
49808: LD_VAR 0 1
49812: NOT
49813: PUSH
49814: LD_VAR 0 1
49818: PPUSH
49819: CALL_OW 266
49823: PUSH
49824: LD_INT 0
49826: PUSH
49827: LD_INT 1
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: IN
49834: NOT
49835: OR
49836: PUSH
49837: LD_VAR 0 2
49841: NOT
49842: OR
49843: PUSH
49844: LD_VAR 0 5
49848: PUSH
49849: LD_INT 0
49851: PUSH
49852: LD_INT 1
49854: PUSH
49855: LD_INT 2
49857: PUSH
49858: LD_INT 3
49860: PUSH
49861: LD_INT 4
49863: PUSH
49864: LD_INT 5
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: IN
49875: NOT
49876: OR
49877: PUSH
49878: LD_VAR 0 3
49882: PPUSH
49883: LD_VAR 0 4
49887: PPUSH
49888: CALL_OW 488
49892: NOT
49893: OR
49894: IFFALSE 49898
// exit ;
49896: GO 50634
// side := GetSide ( depot ) ;
49898: LD_ADDR_VAR 0 9
49902: PUSH
49903: LD_VAR 0 1
49907: PPUSH
49908: CALL_OW 255
49912: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
49913: LD_VAR 0 9
49917: PPUSH
49918: LD_VAR 0 2
49922: PPUSH
49923: CALL 49391 0 2
49927: NOT
49928: IFFALSE 49932
// exit ;
49930: GO 50634
// pom := GetBase ( depot ) ;
49932: LD_ADDR_VAR 0 10
49936: PUSH
49937: LD_VAR 0 1
49941: PPUSH
49942: CALL_OW 274
49946: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
49947: LD_ADDR_VAR 0 11
49951: PUSH
49952: LD_VAR 0 2
49956: PPUSH
49957: LD_VAR 0 1
49961: PPUSH
49962: CALL_OW 248
49966: PPUSH
49967: CALL_OW 450
49971: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
49972: LD_VAR 0 10
49976: PPUSH
49977: LD_INT 1
49979: PPUSH
49980: CALL_OW 275
49984: PUSH
49985: LD_VAR 0 11
49989: PUSH
49990: LD_INT 1
49992: ARRAY
49993: GREATEREQUAL
49994: PUSH
49995: LD_VAR 0 10
49999: PPUSH
50000: LD_INT 2
50002: PPUSH
50003: CALL_OW 275
50007: PUSH
50008: LD_VAR 0 11
50012: PUSH
50013: LD_INT 2
50015: ARRAY
50016: GREATEREQUAL
50017: AND
50018: PUSH
50019: LD_VAR 0 10
50023: PPUSH
50024: LD_INT 3
50026: PPUSH
50027: CALL_OW 275
50031: PUSH
50032: LD_VAR 0 11
50036: PUSH
50037: LD_INT 3
50039: ARRAY
50040: GREATEREQUAL
50041: AND
50042: NOT
50043: IFFALSE 50047
// exit ;
50045: GO 50634
// if GetBType ( depot ) = b_depot then
50047: LD_VAR 0 1
50051: PPUSH
50052: CALL_OW 266
50056: PUSH
50057: LD_INT 0
50059: EQUAL
50060: IFFALSE 50072
// dist := 28 else
50062: LD_ADDR_VAR 0 14
50066: PUSH
50067: LD_INT 28
50069: ST_TO_ADDR
50070: GO 50080
// dist := 36 ;
50072: LD_ADDR_VAR 0 14
50076: PUSH
50077: LD_INT 36
50079: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
50080: LD_VAR 0 1
50084: PPUSH
50085: LD_VAR 0 3
50089: PPUSH
50090: LD_VAR 0 4
50094: PPUSH
50095: CALL_OW 297
50099: PUSH
50100: LD_VAR 0 14
50104: GREATER
50105: IFFALSE 50109
// exit ;
50107: GO 50634
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
50109: LD_ADDR_VAR 0 12
50113: PUSH
50114: LD_VAR 0 2
50118: PPUSH
50119: LD_VAR 0 3
50123: PPUSH
50124: LD_VAR 0 4
50128: PPUSH
50129: LD_VAR 0 5
50133: PPUSH
50134: LD_VAR 0 1
50138: PPUSH
50139: CALL_OW 248
50143: PPUSH
50144: LD_INT 0
50146: PPUSH
50147: CALL 50639 0 6
50151: ST_TO_ADDR
// if not hexes then
50152: LD_VAR 0 12
50156: NOT
50157: IFFALSE 50161
// exit ;
50159: GO 50634
// hex := GetHexInfo ( x , y ) ;
50161: LD_ADDR_VAR 0 15
50165: PUSH
50166: LD_VAR 0 3
50170: PPUSH
50171: LD_VAR 0 4
50175: PPUSH
50176: CALL_OW 546
50180: ST_TO_ADDR
// if hex [ 1 ] then
50181: LD_VAR 0 15
50185: PUSH
50186: LD_INT 1
50188: ARRAY
50189: IFFALSE 50193
// exit ;
50191: GO 50634
// height := hex [ 2 ] ;
50193: LD_ADDR_VAR 0 13
50197: PUSH
50198: LD_VAR 0 15
50202: PUSH
50203: LD_INT 2
50205: ARRAY
50206: ST_TO_ADDR
// for i = 1 to hexes do
50207: LD_ADDR_VAR 0 7
50211: PUSH
50212: DOUBLE
50213: LD_INT 1
50215: DEC
50216: ST_TO_ADDR
50217: LD_VAR 0 12
50221: PUSH
50222: FOR_TO
50223: IFFALSE 50553
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
50225: LD_VAR 0 12
50229: PUSH
50230: LD_VAR 0 7
50234: ARRAY
50235: PUSH
50236: LD_INT 1
50238: ARRAY
50239: PPUSH
50240: LD_VAR 0 12
50244: PUSH
50245: LD_VAR 0 7
50249: ARRAY
50250: PUSH
50251: LD_INT 2
50253: ARRAY
50254: PPUSH
50255: CALL_OW 488
50259: NOT
50260: PUSH
50261: LD_VAR 0 12
50265: PUSH
50266: LD_VAR 0 7
50270: ARRAY
50271: PUSH
50272: LD_INT 1
50274: ARRAY
50275: PPUSH
50276: LD_VAR 0 12
50280: PUSH
50281: LD_VAR 0 7
50285: ARRAY
50286: PUSH
50287: LD_INT 2
50289: ARRAY
50290: PPUSH
50291: CALL_OW 428
50295: PUSH
50296: LD_INT 0
50298: GREATER
50299: OR
50300: PUSH
50301: LD_VAR 0 12
50305: PUSH
50306: LD_VAR 0 7
50310: ARRAY
50311: PUSH
50312: LD_INT 1
50314: ARRAY
50315: PPUSH
50316: LD_VAR 0 12
50320: PUSH
50321: LD_VAR 0 7
50325: ARRAY
50326: PUSH
50327: LD_INT 2
50329: ARRAY
50330: PPUSH
50331: CALL_OW 351
50335: OR
50336: IFFALSE 50342
// exit ;
50338: POP
50339: POP
50340: GO 50634
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50342: LD_ADDR_VAR 0 8
50346: PUSH
50347: LD_VAR 0 12
50351: PUSH
50352: LD_VAR 0 7
50356: ARRAY
50357: PUSH
50358: LD_INT 1
50360: ARRAY
50361: PPUSH
50362: LD_VAR 0 12
50366: PUSH
50367: LD_VAR 0 7
50371: ARRAY
50372: PUSH
50373: LD_INT 2
50375: ARRAY
50376: PPUSH
50377: CALL_OW 546
50381: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
50382: LD_VAR 0 8
50386: PUSH
50387: LD_INT 1
50389: ARRAY
50390: PUSH
50391: LD_VAR 0 8
50395: PUSH
50396: LD_INT 2
50398: ARRAY
50399: PUSH
50400: LD_VAR 0 13
50404: PUSH
50405: LD_INT 2
50407: PLUS
50408: GREATER
50409: OR
50410: PUSH
50411: LD_VAR 0 8
50415: PUSH
50416: LD_INT 2
50418: ARRAY
50419: PUSH
50420: LD_VAR 0 13
50424: PUSH
50425: LD_INT 2
50427: MINUS
50428: LESS
50429: OR
50430: PUSH
50431: LD_VAR 0 8
50435: PUSH
50436: LD_INT 3
50438: ARRAY
50439: PUSH
50440: LD_INT 0
50442: PUSH
50443: LD_INT 8
50445: PUSH
50446: LD_INT 9
50448: PUSH
50449: LD_INT 10
50451: PUSH
50452: LD_INT 11
50454: PUSH
50455: LD_INT 12
50457: PUSH
50458: LD_INT 13
50460: PUSH
50461: LD_INT 16
50463: PUSH
50464: LD_INT 17
50466: PUSH
50467: LD_INT 18
50469: PUSH
50470: LD_INT 19
50472: PUSH
50473: LD_INT 20
50475: PUSH
50476: LD_INT 21
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: IN
50494: NOT
50495: OR
50496: PUSH
50497: LD_VAR 0 8
50501: PUSH
50502: LD_INT 5
50504: ARRAY
50505: NOT
50506: OR
50507: PUSH
50508: LD_VAR 0 8
50512: PUSH
50513: LD_INT 6
50515: ARRAY
50516: PUSH
50517: LD_INT 1
50519: PUSH
50520: LD_INT 2
50522: PUSH
50523: LD_INT 7
50525: PUSH
50526: LD_INT 9
50528: PUSH
50529: LD_INT 10
50531: PUSH
50532: LD_INT 11
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: IN
50543: NOT
50544: OR
50545: IFFALSE 50551
// exit ;
50547: POP
50548: POP
50549: GO 50634
// end ;
50551: GO 50222
50553: POP
50554: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
50555: LD_VAR 0 9
50559: PPUSH
50560: LD_VAR 0 3
50564: PPUSH
50565: LD_VAR 0 4
50569: PPUSH
50570: LD_INT 20
50572: PPUSH
50573: CALL 42557 0 4
50577: PUSH
50578: LD_INT 4
50580: ARRAY
50581: IFFALSE 50585
// exit ;
50583: GO 50634
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
50585: LD_VAR 0 2
50589: PUSH
50590: LD_INT 29
50592: PUSH
50593: LD_INT 30
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: IN
50600: PUSH
50601: LD_VAR 0 3
50605: PPUSH
50606: LD_VAR 0 4
50610: PPUSH
50611: LD_VAR 0 9
50615: PPUSH
50616: CALL_OW 440
50620: NOT
50621: AND
50622: IFFALSE 50626
// exit ;
50624: GO 50634
// result := true ;
50626: LD_ADDR_VAR 0 6
50630: PUSH
50631: LD_INT 1
50633: ST_TO_ADDR
// end ;
50634: LD_VAR 0 6
50638: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
50639: LD_INT 0
50641: PPUSH
50642: PPUSH
50643: PPUSH
50644: PPUSH
50645: PPUSH
50646: PPUSH
50647: PPUSH
50648: PPUSH
50649: PPUSH
50650: PPUSH
50651: PPUSH
50652: PPUSH
50653: PPUSH
50654: PPUSH
50655: PPUSH
50656: PPUSH
50657: PPUSH
50658: PPUSH
50659: PPUSH
50660: PPUSH
50661: PPUSH
50662: PPUSH
50663: PPUSH
50664: PPUSH
50665: PPUSH
50666: PPUSH
50667: PPUSH
50668: PPUSH
50669: PPUSH
50670: PPUSH
50671: PPUSH
50672: PPUSH
50673: PPUSH
50674: PPUSH
50675: PPUSH
50676: PPUSH
50677: PPUSH
50678: PPUSH
50679: PPUSH
50680: PPUSH
50681: PPUSH
50682: PPUSH
50683: PPUSH
50684: PPUSH
50685: PPUSH
50686: PPUSH
50687: PPUSH
50688: PPUSH
50689: PPUSH
50690: PPUSH
50691: PPUSH
50692: PPUSH
50693: PPUSH
50694: PPUSH
50695: PPUSH
50696: PPUSH
50697: PPUSH
50698: PPUSH
// result = [ ] ;
50699: LD_ADDR_VAR 0 7
50703: PUSH
50704: EMPTY
50705: ST_TO_ADDR
// temp_list = [ ] ;
50706: LD_ADDR_VAR 0 9
50710: PUSH
50711: EMPTY
50712: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
50713: LD_VAR 0 4
50717: PUSH
50718: LD_INT 0
50720: PUSH
50721: LD_INT 1
50723: PUSH
50724: LD_INT 2
50726: PUSH
50727: LD_INT 3
50729: PUSH
50730: LD_INT 4
50732: PUSH
50733: LD_INT 5
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: IN
50744: NOT
50745: PUSH
50746: LD_VAR 0 1
50750: PUSH
50751: LD_INT 0
50753: PUSH
50754: LD_INT 1
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: IN
50761: PUSH
50762: LD_VAR 0 5
50766: PUSH
50767: LD_INT 1
50769: PUSH
50770: LD_INT 2
50772: PUSH
50773: LD_INT 3
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: LIST
50780: IN
50781: NOT
50782: AND
50783: OR
50784: IFFALSE 50788
// exit ;
50786: GO 69179
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
50788: LD_VAR 0 1
50792: PUSH
50793: LD_INT 6
50795: PUSH
50796: LD_INT 7
50798: PUSH
50799: LD_INT 8
50801: PUSH
50802: LD_INT 13
50804: PUSH
50805: LD_INT 12
50807: PUSH
50808: LD_INT 15
50810: PUSH
50811: LD_INT 11
50813: PUSH
50814: LD_INT 14
50816: PUSH
50817: LD_INT 10
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: IN
50831: IFFALSE 50841
// btype = b_lab ;
50833: LD_ADDR_VAR 0 1
50837: PUSH
50838: LD_INT 6
50840: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
50841: LD_VAR 0 6
50845: PUSH
50846: LD_INT 0
50848: PUSH
50849: LD_INT 1
50851: PUSH
50852: LD_INT 2
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: LIST
50859: IN
50860: NOT
50861: PUSH
50862: LD_VAR 0 1
50866: PUSH
50867: LD_INT 0
50869: PUSH
50870: LD_INT 1
50872: PUSH
50873: LD_INT 2
50875: PUSH
50876: LD_INT 3
50878: PUSH
50879: LD_INT 6
50881: PUSH
50882: LD_INT 36
50884: PUSH
50885: LD_INT 4
50887: PUSH
50888: LD_INT 5
50890: PUSH
50891: LD_INT 31
50893: PUSH
50894: LD_INT 32
50896: PUSH
50897: LD_INT 33
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: IN
50913: NOT
50914: PUSH
50915: LD_VAR 0 6
50919: PUSH
50920: LD_INT 1
50922: EQUAL
50923: AND
50924: OR
50925: PUSH
50926: LD_VAR 0 1
50930: PUSH
50931: LD_INT 2
50933: PUSH
50934: LD_INT 3
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: IN
50941: NOT
50942: PUSH
50943: LD_VAR 0 6
50947: PUSH
50948: LD_INT 2
50950: EQUAL
50951: AND
50952: OR
50953: IFFALSE 50963
// mode = 0 ;
50955: LD_ADDR_VAR 0 6
50959: PUSH
50960: LD_INT 0
50962: ST_TO_ADDR
// case mode of 0 :
50963: LD_VAR 0 6
50967: PUSH
50968: LD_INT 0
50970: DOUBLE
50971: EQUAL
50972: IFTRUE 50976
50974: GO 62429
50976: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50977: LD_ADDR_VAR 0 11
50981: PUSH
50982: LD_INT 0
50984: PUSH
50985: LD_INT 0
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 0
50994: PUSH
50995: LD_INT 1
50997: NEG
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 1
51005: PUSH
51006: LD_INT 0
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 1
51015: PUSH
51016: LD_INT 1
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 0
51025: PUSH
51026: LD_INT 1
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 1
51035: NEG
51036: PUSH
51037: LD_INT 0
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: LD_INT 1
51046: NEG
51047: PUSH
51048: LD_INT 1
51050: NEG
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 1
51058: NEG
51059: PUSH
51060: LD_INT 2
51062: NEG
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 0
51070: PUSH
51071: LD_INT 2
51073: NEG
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 1
51081: PUSH
51082: LD_INT 1
51084: NEG
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 1
51092: PUSH
51093: LD_INT 2
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 0
51102: PUSH
51103: LD_INT 2
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 1
51112: NEG
51113: PUSH
51114: LD_INT 1
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 1
51123: PUSH
51124: LD_INT 3
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 0
51133: PUSH
51134: LD_INT 3
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 1
51143: NEG
51144: PUSH
51145: LD_INT 2
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51170: LD_ADDR_VAR 0 12
51174: PUSH
51175: LD_INT 0
51177: PUSH
51178: LD_INT 0
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 0
51187: PUSH
51188: LD_INT 1
51190: NEG
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 1
51198: PUSH
51199: LD_INT 0
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 1
51208: PUSH
51209: LD_INT 1
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 0
51218: PUSH
51219: LD_INT 1
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 1
51228: NEG
51229: PUSH
51230: LD_INT 0
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 1
51239: NEG
51240: PUSH
51241: LD_INT 1
51243: NEG
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 1
51251: PUSH
51252: LD_INT 1
51254: NEG
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 2
51262: PUSH
51263: LD_INT 0
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 2
51272: PUSH
51273: LD_INT 1
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 1
51282: NEG
51283: PUSH
51284: LD_INT 1
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 2
51293: NEG
51294: PUSH
51295: LD_INT 0
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 2
51304: NEG
51305: PUSH
51306: LD_INT 1
51308: NEG
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 2
51316: NEG
51317: PUSH
51318: LD_INT 1
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 3
51327: NEG
51328: PUSH
51329: LD_INT 0
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 3
51338: NEG
51339: PUSH
51340: LD_INT 1
51342: NEG
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51366: LD_ADDR_VAR 0 13
51370: PUSH
51371: LD_INT 0
51373: PUSH
51374: LD_INT 0
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 0
51383: PUSH
51384: LD_INT 1
51386: NEG
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 1
51394: PUSH
51395: LD_INT 0
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 1
51404: PUSH
51405: LD_INT 1
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 0
51414: PUSH
51415: LD_INT 1
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 1
51424: NEG
51425: PUSH
51426: LD_INT 0
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 1
51435: NEG
51436: PUSH
51437: LD_INT 1
51439: NEG
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 1
51447: NEG
51448: PUSH
51449: LD_INT 2
51451: NEG
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 2
51459: PUSH
51460: LD_INT 1
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 2
51469: PUSH
51470: LD_INT 2
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 1
51479: PUSH
51480: LD_INT 2
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 2
51489: NEG
51490: PUSH
51491: LD_INT 1
51493: NEG
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 2
51501: NEG
51502: PUSH
51503: LD_INT 2
51505: NEG
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 2
51513: NEG
51514: PUSH
51515: LD_INT 3
51517: NEG
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 3
51525: NEG
51526: PUSH
51527: LD_INT 2
51529: NEG
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 3
51537: NEG
51538: PUSH
51539: LD_INT 3
51541: NEG
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51565: LD_ADDR_VAR 0 14
51569: PUSH
51570: LD_INT 0
51572: PUSH
51573: LD_INT 0
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 0
51582: PUSH
51583: LD_INT 1
51585: NEG
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 1
51593: PUSH
51594: LD_INT 0
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 1
51603: PUSH
51604: LD_INT 1
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 0
51613: PUSH
51614: LD_INT 1
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 1
51623: NEG
51624: PUSH
51625: LD_INT 0
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 1
51634: NEG
51635: PUSH
51636: LD_INT 1
51638: NEG
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 1
51646: NEG
51647: PUSH
51648: LD_INT 2
51650: NEG
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 0
51658: PUSH
51659: LD_INT 2
51661: NEG
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 1
51669: PUSH
51670: LD_INT 1
51672: NEG
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: LD_INT 1
51680: PUSH
51681: LD_INT 2
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 0
51690: PUSH
51691: LD_INT 2
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 1
51700: NEG
51701: PUSH
51702: LD_INT 1
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 1
51711: NEG
51712: PUSH
51713: LD_INT 3
51715: NEG
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 0
51723: PUSH
51724: LD_INT 3
51726: NEG
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 1
51734: PUSH
51735: LD_INT 2
51737: NEG
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51761: LD_ADDR_VAR 0 15
51765: PUSH
51766: LD_INT 0
51768: PUSH
51769: LD_INT 0
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 0
51778: PUSH
51779: LD_INT 1
51781: NEG
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 1
51789: PUSH
51790: LD_INT 0
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 1
51799: PUSH
51800: LD_INT 1
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 0
51809: PUSH
51810: LD_INT 1
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 1
51819: NEG
51820: PUSH
51821: LD_INT 0
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 1
51830: NEG
51831: PUSH
51832: LD_INT 1
51834: NEG
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 1
51842: PUSH
51843: LD_INT 1
51845: NEG
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 2
51853: PUSH
51854: LD_INT 0
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 2
51863: PUSH
51864: LD_INT 1
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 1
51873: NEG
51874: PUSH
51875: LD_INT 1
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 2
51884: NEG
51885: PUSH
51886: LD_INT 0
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 2
51895: NEG
51896: PUSH
51897: LD_INT 1
51899: NEG
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 2
51907: PUSH
51908: LD_INT 1
51910: NEG
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 3
51918: PUSH
51919: LD_INT 0
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 3
51928: PUSH
51929: LD_INT 1
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51954: LD_ADDR_VAR 0 16
51958: PUSH
51959: LD_INT 0
51961: PUSH
51962: LD_INT 0
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 0
51971: PUSH
51972: LD_INT 1
51974: NEG
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 1
51982: PUSH
51983: LD_INT 0
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 1
51992: PUSH
51993: LD_INT 1
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 0
52002: PUSH
52003: LD_INT 1
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 1
52012: NEG
52013: PUSH
52014: LD_INT 0
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 1
52023: NEG
52024: PUSH
52025: LD_INT 1
52027: NEG
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 1
52035: NEG
52036: PUSH
52037: LD_INT 2
52039: NEG
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 2
52047: PUSH
52048: LD_INT 1
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 2
52057: PUSH
52058: LD_INT 2
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 1
52067: PUSH
52068: LD_INT 2
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 2
52077: NEG
52078: PUSH
52079: LD_INT 1
52081: NEG
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 2
52089: NEG
52090: PUSH
52091: LD_INT 2
52093: NEG
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 3
52101: PUSH
52102: LD_INT 2
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 3
52111: PUSH
52112: LD_INT 3
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 2
52121: PUSH
52122: LD_INT 3
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52147: LD_ADDR_VAR 0 17
52151: PUSH
52152: LD_INT 0
52154: PUSH
52155: LD_INT 0
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 0
52164: PUSH
52165: LD_INT 1
52167: NEG
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 1
52175: PUSH
52176: LD_INT 0
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 1
52185: PUSH
52186: LD_INT 1
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 0
52195: PUSH
52196: LD_INT 1
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 1
52205: NEG
52206: PUSH
52207: LD_INT 0
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 1
52216: NEG
52217: PUSH
52218: LD_INT 1
52220: NEG
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 1
52228: NEG
52229: PUSH
52230: LD_INT 2
52232: NEG
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 0
52240: PUSH
52241: LD_INT 2
52243: NEG
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 1
52251: PUSH
52252: LD_INT 1
52254: NEG
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 2
52262: PUSH
52263: LD_INT 0
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 2
52272: PUSH
52273: LD_INT 1
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 2
52282: PUSH
52283: LD_INT 2
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 1
52292: PUSH
52293: LD_INT 2
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 0
52302: PUSH
52303: LD_INT 2
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 1
52312: NEG
52313: PUSH
52314: LD_INT 1
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 2
52323: NEG
52324: PUSH
52325: LD_INT 0
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 2
52334: NEG
52335: PUSH
52336: LD_INT 1
52338: NEG
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 2
52346: NEG
52347: PUSH
52348: LD_INT 2
52350: NEG
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52377: LD_ADDR_VAR 0 18
52381: PUSH
52382: LD_INT 0
52384: PUSH
52385: LD_INT 0
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 0
52394: PUSH
52395: LD_INT 1
52397: NEG
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 1
52405: PUSH
52406: LD_INT 0
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 1
52415: PUSH
52416: LD_INT 1
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 0
52425: PUSH
52426: LD_INT 1
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 1
52435: NEG
52436: PUSH
52437: LD_INT 0
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 1
52446: NEG
52447: PUSH
52448: LD_INT 1
52450: NEG
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 1
52458: NEG
52459: PUSH
52460: LD_INT 2
52462: NEG
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 0
52470: PUSH
52471: LD_INT 2
52473: NEG
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: LD_INT 1
52481: PUSH
52482: LD_INT 1
52484: NEG
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 2
52492: PUSH
52493: LD_INT 0
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 2
52502: PUSH
52503: LD_INT 1
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 2
52512: PUSH
52513: LD_INT 2
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 1
52522: PUSH
52523: LD_INT 2
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 0
52532: PUSH
52533: LD_INT 2
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 1
52542: NEG
52543: PUSH
52544: LD_INT 1
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 2
52553: NEG
52554: PUSH
52555: LD_INT 0
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 2
52564: NEG
52565: PUSH
52566: LD_INT 1
52568: NEG
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 2
52576: NEG
52577: PUSH
52578: LD_INT 2
52580: NEG
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52607: LD_ADDR_VAR 0 19
52611: PUSH
52612: LD_INT 0
52614: PUSH
52615: LD_INT 0
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 0
52624: PUSH
52625: LD_INT 1
52627: NEG
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 1
52635: PUSH
52636: LD_INT 0
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 1
52645: PUSH
52646: LD_INT 1
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 0
52655: PUSH
52656: LD_INT 1
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 1
52665: NEG
52666: PUSH
52667: LD_INT 0
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 1
52676: NEG
52677: PUSH
52678: LD_INT 1
52680: NEG
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 1
52688: NEG
52689: PUSH
52690: LD_INT 2
52692: NEG
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 0
52700: PUSH
52701: LD_INT 2
52703: NEG
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 1
52711: PUSH
52712: LD_INT 1
52714: NEG
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 2
52722: PUSH
52723: LD_INT 0
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: LD_INT 2
52732: PUSH
52733: LD_INT 1
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 2
52742: PUSH
52743: LD_INT 2
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 1
52752: PUSH
52753: LD_INT 2
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 0
52762: PUSH
52763: LD_INT 2
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 1
52772: NEG
52773: PUSH
52774: LD_INT 1
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 2
52783: NEG
52784: PUSH
52785: LD_INT 0
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 2
52794: NEG
52795: PUSH
52796: LD_INT 1
52798: NEG
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 2
52806: NEG
52807: PUSH
52808: LD_INT 2
52810: NEG
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52837: LD_ADDR_VAR 0 20
52841: PUSH
52842: LD_INT 0
52844: PUSH
52845: LD_INT 0
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 0
52854: PUSH
52855: LD_INT 1
52857: NEG
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 1
52865: PUSH
52866: LD_INT 0
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 1
52875: PUSH
52876: LD_INT 1
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 0
52885: PUSH
52886: LD_INT 1
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 1
52895: NEG
52896: PUSH
52897: LD_INT 0
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 1
52906: NEG
52907: PUSH
52908: LD_INT 1
52910: NEG
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 1
52918: NEG
52919: PUSH
52920: LD_INT 2
52922: NEG
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 0
52930: PUSH
52931: LD_INT 2
52933: NEG
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 1
52941: PUSH
52942: LD_INT 1
52944: NEG
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 2
52952: PUSH
52953: LD_INT 0
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 2
52962: PUSH
52963: LD_INT 1
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 2
52972: PUSH
52973: LD_INT 2
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 1
52982: PUSH
52983: LD_INT 2
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 0
52992: PUSH
52993: LD_INT 2
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 1
53002: NEG
53003: PUSH
53004: LD_INT 1
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 2
53013: NEG
53014: PUSH
53015: LD_INT 0
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 2
53024: NEG
53025: PUSH
53026: LD_INT 1
53028: NEG
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 2
53036: NEG
53037: PUSH
53038: LD_INT 2
53040: NEG
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53067: LD_ADDR_VAR 0 21
53071: PUSH
53072: LD_INT 0
53074: PUSH
53075: LD_INT 0
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 0
53084: PUSH
53085: LD_INT 1
53087: NEG
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 1
53095: PUSH
53096: LD_INT 0
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 1
53105: PUSH
53106: LD_INT 1
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 0
53115: PUSH
53116: LD_INT 1
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 1
53125: NEG
53126: PUSH
53127: LD_INT 0
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 1
53136: NEG
53137: PUSH
53138: LD_INT 1
53140: NEG
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 1
53148: NEG
53149: PUSH
53150: LD_INT 2
53152: NEG
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 0
53160: PUSH
53161: LD_INT 2
53163: NEG
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 1
53171: PUSH
53172: LD_INT 1
53174: NEG
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 2
53182: PUSH
53183: LD_INT 0
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 2
53192: PUSH
53193: LD_INT 1
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 2
53202: PUSH
53203: LD_INT 2
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 1
53212: PUSH
53213: LD_INT 2
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 0
53222: PUSH
53223: LD_INT 2
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 1
53232: NEG
53233: PUSH
53234: LD_INT 1
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 2
53243: NEG
53244: PUSH
53245: LD_INT 0
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 2
53254: NEG
53255: PUSH
53256: LD_INT 1
53258: NEG
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 2
53266: NEG
53267: PUSH
53268: LD_INT 2
53270: NEG
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53297: LD_ADDR_VAR 0 22
53301: PUSH
53302: LD_INT 0
53304: PUSH
53305: LD_INT 0
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 0
53314: PUSH
53315: LD_INT 1
53317: NEG
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 1
53325: PUSH
53326: LD_INT 0
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 1
53335: PUSH
53336: LD_INT 1
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 0
53345: PUSH
53346: LD_INT 1
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 1
53355: NEG
53356: PUSH
53357: LD_INT 0
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 1
53366: NEG
53367: PUSH
53368: LD_INT 1
53370: NEG
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 1
53378: NEG
53379: PUSH
53380: LD_INT 2
53382: NEG
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 0
53390: PUSH
53391: LD_INT 2
53393: NEG
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 1
53401: PUSH
53402: LD_INT 1
53404: NEG
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 2
53412: PUSH
53413: LD_INT 0
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 2
53422: PUSH
53423: LD_INT 1
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 2
53432: PUSH
53433: LD_INT 2
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 1
53442: PUSH
53443: LD_INT 2
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 0
53452: PUSH
53453: LD_INT 2
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 1
53462: NEG
53463: PUSH
53464: LD_INT 1
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 2
53473: NEG
53474: PUSH
53475: LD_INT 0
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 2
53484: NEG
53485: PUSH
53486: LD_INT 1
53488: NEG
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 2
53496: NEG
53497: PUSH
53498: LD_INT 2
53500: NEG
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53527: LD_ADDR_VAR 0 23
53531: PUSH
53532: LD_INT 0
53534: PUSH
53535: LD_INT 0
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 0
53544: PUSH
53545: LD_INT 1
53547: NEG
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 1
53555: PUSH
53556: LD_INT 0
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 1
53565: PUSH
53566: LD_INT 1
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 0
53575: PUSH
53576: LD_INT 1
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 1
53585: NEG
53586: PUSH
53587: LD_INT 0
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 1
53596: NEG
53597: PUSH
53598: LD_INT 1
53600: NEG
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 1
53608: NEG
53609: PUSH
53610: LD_INT 2
53612: NEG
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 0
53620: PUSH
53621: LD_INT 2
53623: NEG
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 1
53631: PUSH
53632: LD_INT 1
53634: NEG
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 2
53642: PUSH
53643: LD_INT 0
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 2
53652: PUSH
53653: LD_INT 1
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 2
53662: PUSH
53663: LD_INT 2
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 1
53672: PUSH
53673: LD_INT 2
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 0
53682: PUSH
53683: LD_INT 2
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 1
53692: NEG
53693: PUSH
53694: LD_INT 1
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 2
53703: NEG
53704: PUSH
53705: LD_INT 0
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 2
53714: NEG
53715: PUSH
53716: LD_INT 1
53718: NEG
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 2
53726: NEG
53727: PUSH
53728: LD_INT 2
53730: NEG
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 2
53738: NEG
53739: PUSH
53740: LD_INT 3
53742: NEG
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 1
53750: NEG
53751: PUSH
53752: LD_INT 3
53754: NEG
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 1
53762: PUSH
53763: LD_INT 2
53765: NEG
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 2
53773: PUSH
53774: LD_INT 1
53776: NEG
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
53807: LD_ADDR_VAR 0 24
53811: PUSH
53812: LD_INT 0
53814: PUSH
53815: LD_INT 0
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 0
53824: PUSH
53825: LD_INT 1
53827: NEG
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 1
53835: PUSH
53836: LD_INT 0
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 1
53845: PUSH
53846: LD_INT 1
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: LD_INT 0
53855: PUSH
53856: LD_INT 1
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 1
53865: NEG
53866: PUSH
53867: LD_INT 0
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 1
53876: NEG
53877: PUSH
53878: LD_INT 1
53880: NEG
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 1
53888: NEG
53889: PUSH
53890: LD_INT 2
53892: NEG
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 0
53900: PUSH
53901: LD_INT 2
53903: NEG
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 1
53911: PUSH
53912: LD_INT 1
53914: NEG
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 2
53922: PUSH
53923: LD_INT 0
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 2
53932: PUSH
53933: LD_INT 1
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 2
53942: PUSH
53943: LD_INT 2
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 1
53952: PUSH
53953: LD_INT 2
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 0
53962: PUSH
53963: LD_INT 2
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 1
53972: NEG
53973: PUSH
53974: LD_INT 1
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 2
53983: NEG
53984: PUSH
53985: LD_INT 0
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 2
53994: NEG
53995: PUSH
53996: LD_INT 1
53998: NEG
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 2
54006: NEG
54007: PUSH
54008: LD_INT 2
54010: NEG
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 1
54018: PUSH
54019: LD_INT 2
54021: NEG
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 2
54029: PUSH
54030: LD_INT 1
54032: NEG
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 3
54040: PUSH
54041: LD_INT 1
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 3
54050: PUSH
54051: LD_INT 2
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
54083: LD_ADDR_VAR 0 25
54087: PUSH
54088: LD_INT 0
54090: PUSH
54091: LD_INT 0
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 0
54100: PUSH
54101: LD_INT 1
54103: NEG
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 1
54111: PUSH
54112: LD_INT 0
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 1
54121: PUSH
54122: LD_INT 1
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 0
54131: PUSH
54132: LD_INT 1
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 1
54141: NEG
54142: PUSH
54143: LD_INT 0
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 1
54152: NEG
54153: PUSH
54154: LD_INT 1
54156: NEG
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 1
54164: NEG
54165: PUSH
54166: LD_INT 2
54168: NEG
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 0
54176: PUSH
54177: LD_INT 2
54179: NEG
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 1
54187: PUSH
54188: LD_INT 1
54190: NEG
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 2
54198: PUSH
54199: LD_INT 0
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 2
54208: PUSH
54209: LD_INT 1
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 2
54218: PUSH
54219: LD_INT 2
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 1
54228: PUSH
54229: LD_INT 2
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 0
54238: PUSH
54239: LD_INT 2
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 1
54248: NEG
54249: PUSH
54250: LD_INT 1
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 2
54259: NEG
54260: PUSH
54261: LD_INT 0
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 2
54270: NEG
54271: PUSH
54272: LD_INT 1
54274: NEG
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 2
54282: NEG
54283: PUSH
54284: LD_INT 2
54286: NEG
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 3
54294: PUSH
54295: LD_INT 1
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 3
54304: PUSH
54305: LD_INT 2
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 2
54314: PUSH
54315: LD_INT 3
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 1
54324: PUSH
54325: LD_INT 3
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54357: LD_ADDR_VAR 0 26
54361: PUSH
54362: LD_INT 0
54364: PUSH
54365: LD_INT 0
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 0
54374: PUSH
54375: LD_INT 1
54377: NEG
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 1
54385: PUSH
54386: LD_INT 0
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 1
54395: PUSH
54396: LD_INT 1
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 0
54405: PUSH
54406: LD_INT 1
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 1
54415: NEG
54416: PUSH
54417: LD_INT 0
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 1
54426: NEG
54427: PUSH
54428: LD_INT 1
54430: NEG
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 1
54438: NEG
54439: PUSH
54440: LD_INT 2
54442: NEG
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 0
54450: PUSH
54451: LD_INT 2
54453: NEG
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 1
54461: PUSH
54462: LD_INT 1
54464: NEG
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 2
54472: PUSH
54473: LD_INT 0
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 2
54482: PUSH
54483: LD_INT 1
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 2
54492: PUSH
54493: LD_INT 2
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 1
54502: PUSH
54503: LD_INT 2
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 0
54512: PUSH
54513: LD_INT 2
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 1
54522: NEG
54523: PUSH
54524: LD_INT 1
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 2
54533: NEG
54534: PUSH
54535: LD_INT 0
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 2
54544: NEG
54545: PUSH
54546: LD_INT 1
54548: NEG
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 2
54556: NEG
54557: PUSH
54558: LD_INT 2
54560: NEG
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 2
54568: PUSH
54569: LD_INT 3
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 1
54578: PUSH
54579: LD_INT 3
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 1
54588: NEG
54589: PUSH
54590: LD_INT 2
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 2
54599: NEG
54600: PUSH
54601: LD_INT 1
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54633: LD_ADDR_VAR 0 27
54637: PUSH
54638: LD_INT 0
54640: PUSH
54641: LD_INT 0
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 0
54650: PUSH
54651: LD_INT 1
54653: NEG
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 1
54661: PUSH
54662: LD_INT 0
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 1
54671: PUSH
54672: LD_INT 1
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 0
54681: PUSH
54682: LD_INT 1
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 1
54691: NEG
54692: PUSH
54693: LD_INT 0
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 1
54702: NEG
54703: PUSH
54704: LD_INT 1
54706: NEG
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 1
54714: NEG
54715: PUSH
54716: LD_INT 2
54718: NEG
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 0
54726: PUSH
54727: LD_INT 2
54729: NEG
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 1
54737: PUSH
54738: LD_INT 1
54740: NEG
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 2
54748: PUSH
54749: LD_INT 0
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 2
54758: PUSH
54759: LD_INT 1
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 2
54768: PUSH
54769: LD_INT 2
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 1
54778: PUSH
54779: LD_INT 2
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 0
54788: PUSH
54789: LD_INT 2
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 1
54798: NEG
54799: PUSH
54800: LD_INT 1
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 2
54809: NEG
54810: PUSH
54811: LD_INT 0
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: LD_INT 2
54820: NEG
54821: PUSH
54822: LD_INT 1
54824: NEG
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 2
54832: NEG
54833: PUSH
54834: LD_INT 2
54836: NEG
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 1
54844: NEG
54845: PUSH
54846: LD_INT 2
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 2
54855: NEG
54856: PUSH
54857: LD_INT 1
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 3
54866: NEG
54867: PUSH
54868: LD_INT 1
54870: NEG
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 3
54878: NEG
54879: PUSH
54880: LD_INT 2
54882: NEG
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54913: LD_ADDR_VAR 0 28
54917: PUSH
54918: LD_INT 0
54920: PUSH
54921: LD_INT 0
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 0
54930: PUSH
54931: LD_INT 1
54933: NEG
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 1
54941: PUSH
54942: LD_INT 0
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 1
54951: PUSH
54952: LD_INT 1
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 0
54961: PUSH
54962: LD_INT 1
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 1
54971: NEG
54972: PUSH
54973: LD_INT 0
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 1
54982: NEG
54983: PUSH
54984: LD_INT 1
54986: NEG
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 1
54994: NEG
54995: PUSH
54996: LD_INT 2
54998: NEG
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 0
55006: PUSH
55007: LD_INT 2
55009: NEG
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 1
55017: PUSH
55018: LD_INT 1
55020: NEG
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 2
55028: PUSH
55029: LD_INT 0
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 2
55038: PUSH
55039: LD_INT 1
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 2
55048: PUSH
55049: LD_INT 2
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 1
55058: PUSH
55059: LD_INT 2
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 0
55068: PUSH
55069: LD_INT 2
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 1
55078: NEG
55079: PUSH
55080: LD_INT 1
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 2
55089: NEG
55090: PUSH
55091: LD_INT 0
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 2
55100: NEG
55101: PUSH
55102: LD_INT 1
55104: NEG
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 2
55112: NEG
55113: PUSH
55114: LD_INT 2
55116: NEG
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 2
55124: NEG
55125: PUSH
55126: LD_INT 3
55128: NEG
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 1
55136: NEG
55137: PUSH
55138: LD_INT 3
55140: NEG
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 3
55148: NEG
55149: PUSH
55150: LD_INT 1
55152: NEG
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 3
55160: NEG
55161: PUSH
55162: LD_INT 2
55164: NEG
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55195: LD_ADDR_VAR 0 29
55199: PUSH
55200: LD_INT 0
55202: PUSH
55203: LD_INT 0
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 0
55212: PUSH
55213: LD_INT 1
55215: NEG
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 1
55223: PUSH
55224: LD_INT 0
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 1
55233: PUSH
55234: LD_INT 1
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 0
55243: PUSH
55244: LD_INT 1
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 1
55253: NEG
55254: PUSH
55255: LD_INT 0
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 1
55264: NEG
55265: PUSH
55266: LD_INT 1
55268: NEG
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 1
55276: NEG
55277: PUSH
55278: LD_INT 2
55280: NEG
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 0
55288: PUSH
55289: LD_INT 2
55291: NEG
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 1
55299: PUSH
55300: LD_INT 1
55302: NEG
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 2
55310: PUSH
55311: LD_INT 0
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 2
55320: PUSH
55321: LD_INT 1
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 1
55330: PUSH
55331: LD_INT 2
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 0
55340: PUSH
55341: LD_INT 2
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 1
55350: NEG
55351: PUSH
55352: LD_INT 1
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 2
55361: NEG
55362: PUSH
55363: LD_INT 1
55365: NEG
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 2
55373: NEG
55374: PUSH
55375: LD_INT 2
55377: NEG
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 2
55385: NEG
55386: PUSH
55387: LD_INT 3
55389: NEG
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 2
55397: PUSH
55398: LD_INT 1
55400: NEG
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 3
55408: PUSH
55409: LD_INT 1
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: LD_INT 1
55418: PUSH
55419: LD_INT 3
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: LD_INT 1
55428: NEG
55429: PUSH
55430: LD_INT 2
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 3
55439: NEG
55440: PUSH
55441: LD_INT 2
55443: NEG
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55474: LD_ADDR_VAR 0 30
55478: PUSH
55479: LD_INT 0
55481: PUSH
55482: LD_INT 0
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 0
55491: PUSH
55492: LD_INT 1
55494: NEG
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 1
55502: PUSH
55503: LD_INT 0
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 1
55512: PUSH
55513: LD_INT 1
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 0
55522: PUSH
55523: LD_INT 1
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 1
55532: NEG
55533: PUSH
55534: LD_INT 0
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 1
55543: NEG
55544: PUSH
55545: LD_INT 1
55547: NEG
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 1
55555: NEG
55556: PUSH
55557: LD_INT 2
55559: NEG
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 0
55567: PUSH
55568: LD_INT 2
55570: NEG
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 1
55578: PUSH
55579: LD_INT 1
55581: NEG
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 2
55589: PUSH
55590: LD_INT 0
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 2
55599: PUSH
55600: LD_INT 1
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 2
55609: PUSH
55610: LD_INT 2
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 1
55619: PUSH
55620: LD_INT 2
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 1
55629: NEG
55630: PUSH
55631: LD_INT 1
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 2
55640: NEG
55641: PUSH
55642: LD_INT 0
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 2
55651: NEG
55652: PUSH
55653: LD_INT 1
55655: NEG
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 1
55663: NEG
55664: PUSH
55665: LD_INT 3
55667: NEG
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 1
55675: PUSH
55676: LD_INT 2
55678: NEG
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 3
55686: PUSH
55687: LD_INT 2
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 2
55696: PUSH
55697: LD_INT 3
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 2
55706: NEG
55707: PUSH
55708: LD_INT 1
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 3
55717: NEG
55718: PUSH
55719: LD_INT 1
55721: NEG
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55752: LD_ADDR_VAR 0 31
55756: PUSH
55757: LD_INT 0
55759: PUSH
55760: LD_INT 0
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 0
55769: PUSH
55770: LD_INT 1
55772: NEG
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 1
55780: PUSH
55781: LD_INT 0
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 1
55790: PUSH
55791: LD_INT 1
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 0
55800: PUSH
55801: LD_INT 1
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 1
55810: NEG
55811: PUSH
55812: LD_INT 0
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 1
55821: NEG
55822: PUSH
55823: LD_INT 1
55825: NEG
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 1
55833: NEG
55834: PUSH
55835: LD_INT 2
55837: NEG
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 1
55845: PUSH
55846: LD_INT 1
55848: NEG
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 2
55856: PUSH
55857: LD_INT 0
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 2
55866: PUSH
55867: LD_INT 1
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 2
55876: PUSH
55877: LD_INT 2
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 1
55886: PUSH
55887: LD_INT 2
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 0
55896: PUSH
55897: LD_INT 2
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 1
55906: NEG
55907: PUSH
55908: LD_INT 1
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 2
55917: NEG
55918: PUSH
55919: LD_INT 1
55921: NEG
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 2
55929: NEG
55930: PUSH
55931: LD_INT 2
55933: NEG
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 2
55941: NEG
55942: PUSH
55943: LD_INT 3
55945: NEG
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 2
55953: PUSH
55954: LD_INT 1
55956: NEG
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 3
55964: PUSH
55965: LD_INT 1
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 1
55974: PUSH
55975: LD_INT 3
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 1
55984: NEG
55985: PUSH
55986: LD_INT 2
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 3
55995: NEG
55996: PUSH
55997: LD_INT 2
55999: NEG
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56030: LD_ADDR_VAR 0 32
56034: PUSH
56035: LD_INT 0
56037: PUSH
56038: LD_INT 0
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 0
56047: PUSH
56048: LD_INT 1
56050: NEG
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 1
56058: PUSH
56059: LD_INT 0
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 1
56068: PUSH
56069: LD_INT 1
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 0
56078: PUSH
56079: LD_INT 1
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 1
56088: NEG
56089: PUSH
56090: LD_INT 0
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 1
56099: NEG
56100: PUSH
56101: LD_INT 1
56103: NEG
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 1
56111: NEG
56112: PUSH
56113: LD_INT 2
56115: NEG
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 0
56123: PUSH
56124: LD_INT 2
56126: NEG
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 1
56134: PUSH
56135: LD_INT 1
56137: NEG
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 2
56145: PUSH
56146: LD_INT 1
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 2
56155: PUSH
56156: LD_INT 2
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 1
56165: PUSH
56166: LD_INT 2
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 0
56175: PUSH
56176: LD_INT 2
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 1
56185: NEG
56186: PUSH
56187: LD_INT 1
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 2
56196: NEG
56197: PUSH
56198: LD_INT 0
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 2
56207: NEG
56208: PUSH
56209: LD_INT 1
56211: NEG
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 1
56219: NEG
56220: PUSH
56221: LD_INT 3
56223: NEG
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 1
56231: PUSH
56232: LD_INT 2
56234: NEG
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: LD_INT 3
56242: PUSH
56243: LD_INT 2
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 2
56252: PUSH
56253: LD_INT 3
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 2
56262: NEG
56263: PUSH
56264: LD_INT 1
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 3
56273: NEG
56274: PUSH
56275: LD_INT 1
56277: NEG
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56308: LD_ADDR_VAR 0 33
56312: PUSH
56313: LD_INT 0
56315: PUSH
56316: LD_INT 0
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 0
56325: PUSH
56326: LD_INT 1
56328: NEG
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 1
56336: PUSH
56337: LD_INT 0
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 1
56346: PUSH
56347: LD_INT 1
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 0
56356: PUSH
56357: LD_INT 1
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 1
56366: NEG
56367: PUSH
56368: LD_INT 0
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 1
56377: NEG
56378: PUSH
56379: LD_INT 1
56381: NEG
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 1
56389: NEG
56390: PUSH
56391: LD_INT 2
56393: NEG
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 1
56401: PUSH
56402: LD_INT 1
56404: NEG
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 2
56412: PUSH
56413: LD_INT 0
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 2
56422: PUSH
56423: LD_INT 1
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 1
56432: PUSH
56433: LD_INT 2
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 0
56442: PUSH
56443: LD_INT 2
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 1
56452: NEG
56453: PUSH
56454: LD_INT 1
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 2
56463: NEG
56464: PUSH
56465: LD_INT 0
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 2
56474: NEG
56475: PUSH
56476: LD_INT 1
56478: NEG
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 2
56486: NEG
56487: PUSH
56488: LD_INT 2
56490: NEG
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 2
56498: NEG
56499: PUSH
56500: LD_INT 3
56502: NEG
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 2
56510: PUSH
56511: LD_INT 1
56513: NEG
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 3
56521: PUSH
56522: LD_INT 1
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 1
56531: PUSH
56532: LD_INT 3
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 1
56541: NEG
56542: PUSH
56543: LD_INT 2
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 3
56552: NEG
56553: PUSH
56554: LD_INT 2
56556: NEG
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56587: LD_ADDR_VAR 0 34
56591: PUSH
56592: LD_INT 0
56594: PUSH
56595: LD_INT 0
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: LD_INT 0
56604: PUSH
56605: LD_INT 1
56607: NEG
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: LD_INT 1
56615: PUSH
56616: LD_INT 0
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: LD_INT 1
56625: PUSH
56626: LD_INT 1
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 0
56635: PUSH
56636: LD_INT 1
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 1
56645: NEG
56646: PUSH
56647: LD_INT 0
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 1
56656: NEG
56657: PUSH
56658: LD_INT 1
56660: NEG
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 1
56668: NEG
56669: PUSH
56670: LD_INT 2
56672: NEG
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 0
56680: PUSH
56681: LD_INT 2
56683: NEG
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 1
56691: PUSH
56692: LD_INT 1
56694: NEG
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 2
56702: PUSH
56703: LD_INT 1
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 2
56712: PUSH
56713: LD_INT 2
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 1
56722: PUSH
56723: LD_INT 2
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 1
56732: NEG
56733: PUSH
56734: LD_INT 1
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 2
56743: NEG
56744: PUSH
56745: LD_INT 0
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 2
56754: NEG
56755: PUSH
56756: LD_INT 1
56758: NEG
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 2
56766: NEG
56767: PUSH
56768: LD_INT 2
56770: NEG
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 1
56778: NEG
56779: PUSH
56780: LD_INT 3
56782: NEG
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 1
56790: PUSH
56791: LD_INT 2
56793: NEG
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 3
56801: PUSH
56802: LD_INT 2
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 2
56811: PUSH
56812: LD_INT 3
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 2
56821: NEG
56822: PUSH
56823: LD_INT 1
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 3
56832: NEG
56833: PUSH
56834: LD_INT 1
56836: NEG
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56867: LD_ADDR_VAR 0 35
56871: PUSH
56872: LD_INT 0
56874: PUSH
56875: LD_INT 0
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 0
56884: PUSH
56885: LD_INT 1
56887: NEG
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 1
56895: PUSH
56896: LD_INT 0
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 1
56905: PUSH
56906: LD_INT 1
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 0
56915: PUSH
56916: LD_INT 1
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 1
56925: NEG
56926: PUSH
56927: LD_INT 0
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 1
56936: NEG
56937: PUSH
56938: LD_INT 1
56940: NEG
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 2
56948: PUSH
56949: LD_INT 1
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 2
56958: NEG
56959: PUSH
56960: LD_INT 1
56962: NEG
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56979: LD_ADDR_VAR 0 36
56983: PUSH
56984: LD_INT 0
56986: PUSH
56987: LD_INT 0
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 0
56996: PUSH
56997: LD_INT 1
56999: NEG
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 1
57007: PUSH
57008: LD_INT 0
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 1
57017: PUSH
57018: LD_INT 1
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 0
57027: PUSH
57028: LD_INT 1
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 1
57037: NEG
57038: PUSH
57039: LD_INT 0
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 1
57048: NEG
57049: PUSH
57050: LD_INT 1
57052: NEG
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 1
57060: NEG
57061: PUSH
57062: LD_INT 2
57064: NEG
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 1
57072: PUSH
57073: LD_INT 2
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57091: LD_ADDR_VAR 0 37
57095: PUSH
57096: LD_INT 0
57098: PUSH
57099: LD_INT 0
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 0
57108: PUSH
57109: LD_INT 1
57111: NEG
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 1
57119: PUSH
57120: LD_INT 0
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 1
57129: PUSH
57130: LD_INT 1
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 0
57139: PUSH
57140: LD_INT 1
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 1
57149: NEG
57150: PUSH
57151: LD_INT 0
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 1
57160: NEG
57161: PUSH
57162: LD_INT 1
57164: NEG
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 1
57172: PUSH
57173: LD_INT 1
57175: NEG
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 1
57183: NEG
57184: PUSH
57185: LD_INT 1
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57203: LD_ADDR_VAR 0 38
57207: PUSH
57208: LD_INT 0
57210: PUSH
57211: LD_INT 0
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 0
57220: PUSH
57221: LD_INT 1
57223: NEG
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 1
57231: PUSH
57232: LD_INT 0
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 1
57241: PUSH
57242: LD_INT 1
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 0
57251: PUSH
57252: LD_INT 1
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 1
57261: NEG
57262: PUSH
57263: LD_INT 0
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 1
57272: NEG
57273: PUSH
57274: LD_INT 1
57276: NEG
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 2
57284: PUSH
57285: LD_INT 1
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 2
57294: NEG
57295: PUSH
57296: LD_INT 1
57298: NEG
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57315: LD_ADDR_VAR 0 39
57319: PUSH
57320: LD_INT 0
57322: PUSH
57323: LD_INT 0
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 0
57332: PUSH
57333: LD_INT 1
57335: NEG
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 1
57343: PUSH
57344: LD_INT 0
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 1
57353: PUSH
57354: LD_INT 1
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 0
57363: PUSH
57364: LD_INT 1
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 1
57373: NEG
57374: PUSH
57375: LD_INT 0
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 1
57384: NEG
57385: PUSH
57386: LD_INT 1
57388: NEG
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 1
57396: NEG
57397: PUSH
57398: LD_INT 2
57400: NEG
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 1
57408: PUSH
57409: LD_INT 2
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57427: LD_ADDR_VAR 0 40
57431: PUSH
57432: LD_INT 0
57434: PUSH
57435: LD_INT 0
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 0
57444: PUSH
57445: LD_INT 1
57447: NEG
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 1
57455: PUSH
57456: LD_INT 0
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 1
57465: PUSH
57466: LD_INT 1
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 0
57475: PUSH
57476: LD_INT 1
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 1
57485: NEG
57486: PUSH
57487: LD_INT 0
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 1
57496: NEG
57497: PUSH
57498: LD_INT 1
57500: NEG
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 1
57508: PUSH
57509: LD_INT 1
57511: NEG
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 1
57519: NEG
57520: PUSH
57521: LD_INT 1
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57539: LD_ADDR_VAR 0 41
57543: PUSH
57544: LD_INT 0
57546: PUSH
57547: LD_INT 0
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 0
57556: PUSH
57557: LD_INT 1
57559: NEG
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 1
57567: PUSH
57568: LD_INT 0
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 1
57577: PUSH
57578: LD_INT 1
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 0
57587: PUSH
57588: LD_INT 1
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 1
57597: NEG
57598: PUSH
57599: LD_INT 0
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 1
57608: NEG
57609: PUSH
57610: LD_INT 1
57612: NEG
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 1
57620: NEG
57621: PUSH
57622: LD_INT 2
57624: NEG
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 1
57632: PUSH
57633: LD_INT 1
57635: NEG
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 2
57643: PUSH
57644: LD_INT 0
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 2
57653: PUSH
57654: LD_INT 1
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 2
57663: PUSH
57664: LD_INT 2
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 1
57673: PUSH
57674: LD_INT 2
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 1
57683: NEG
57684: PUSH
57685: LD_INT 1
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 2
57694: NEG
57695: PUSH
57696: LD_INT 0
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 2
57705: NEG
57706: PUSH
57707: LD_INT 1
57709: NEG
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 2
57717: NEG
57718: PUSH
57719: LD_INT 2
57721: NEG
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 2
57729: NEG
57730: PUSH
57731: LD_INT 3
57733: NEG
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 2
57741: PUSH
57742: LD_INT 1
57744: NEG
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 3
57752: PUSH
57753: LD_INT 0
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 3
57762: PUSH
57763: LD_INT 1
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 3
57772: PUSH
57773: LD_INT 2
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 3
57782: PUSH
57783: LD_INT 3
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 2
57792: PUSH
57793: LD_INT 3
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 2
57802: NEG
57803: PUSH
57804: LD_INT 1
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 3
57813: NEG
57814: PUSH
57815: LD_INT 0
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 3
57824: NEG
57825: PUSH
57826: LD_INT 1
57828: NEG
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 3
57836: NEG
57837: PUSH
57838: LD_INT 2
57840: NEG
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: PUSH
57846: LD_INT 3
57848: NEG
57849: PUSH
57850: LD_INT 3
57852: NEG
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57889: LD_ADDR_VAR 0 42
57893: PUSH
57894: LD_INT 0
57896: PUSH
57897: LD_INT 0
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 0
57906: PUSH
57907: LD_INT 1
57909: NEG
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 1
57917: PUSH
57918: LD_INT 0
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 1
57927: PUSH
57928: LD_INT 1
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 0
57937: PUSH
57938: LD_INT 1
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 1
57947: NEG
57948: PUSH
57949: LD_INT 0
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 1
57958: NEG
57959: PUSH
57960: LD_INT 1
57962: NEG
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 1
57970: NEG
57971: PUSH
57972: LD_INT 2
57974: NEG
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 0
57982: PUSH
57983: LD_INT 2
57985: NEG
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PUSH
57991: LD_INT 1
57993: PUSH
57994: LD_INT 1
57996: NEG
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 2
58004: PUSH
58005: LD_INT 1
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 2
58014: PUSH
58015: LD_INT 2
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 1
58024: PUSH
58025: LD_INT 2
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 0
58034: PUSH
58035: LD_INT 2
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 1
58044: NEG
58045: PUSH
58046: LD_INT 1
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 2
58055: NEG
58056: PUSH
58057: LD_INT 1
58059: NEG
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 2
58067: NEG
58068: PUSH
58069: LD_INT 2
58071: NEG
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 2
58079: NEG
58080: PUSH
58081: LD_INT 3
58083: NEG
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 1
58091: NEG
58092: PUSH
58093: LD_INT 3
58095: NEG
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 0
58103: PUSH
58104: LD_INT 3
58106: NEG
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 1
58114: PUSH
58115: LD_INT 2
58117: NEG
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 3
58125: PUSH
58126: LD_INT 2
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 3
58135: PUSH
58136: LD_INT 3
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 2
58145: PUSH
58146: LD_INT 3
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 1
58155: PUSH
58156: LD_INT 3
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 0
58165: PUSH
58166: LD_INT 3
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 1
58175: NEG
58176: PUSH
58177: LD_INT 2
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 3
58186: NEG
58187: PUSH
58188: LD_INT 2
58190: NEG
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 3
58198: NEG
58199: PUSH
58200: LD_INT 3
58202: NEG
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58239: LD_ADDR_VAR 0 43
58243: PUSH
58244: LD_INT 0
58246: PUSH
58247: LD_INT 0
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 0
58256: PUSH
58257: LD_INT 1
58259: NEG
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 1
58267: PUSH
58268: LD_INT 0
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 1
58277: PUSH
58278: LD_INT 1
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 0
58287: PUSH
58288: LD_INT 1
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 1
58297: NEG
58298: PUSH
58299: LD_INT 0
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 1
58308: NEG
58309: PUSH
58310: LD_INT 1
58312: NEG
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 1
58320: NEG
58321: PUSH
58322: LD_INT 2
58324: NEG
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 0
58332: PUSH
58333: LD_INT 2
58335: NEG
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 1
58343: PUSH
58344: LD_INT 1
58346: NEG
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 2
58354: PUSH
58355: LD_INT 0
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 2
58364: PUSH
58365: LD_INT 1
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 1
58374: PUSH
58375: LD_INT 2
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 0
58384: PUSH
58385: LD_INT 2
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 1
58394: NEG
58395: PUSH
58396: LD_INT 1
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 2
58405: NEG
58406: PUSH
58407: LD_INT 0
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 2
58416: NEG
58417: PUSH
58418: LD_INT 1
58420: NEG
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 1
58428: NEG
58429: PUSH
58430: LD_INT 3
58432: NEG
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 0
58440: PUSH
58441: LD_INT 3
58443: NEG
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 1
58451: PUSH
58452: LD_INT 2
58454: NEG
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: PUSH
58460: LD_INT 2
58462: PUSH
58463: LD_INT 1
58465: NEG
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 3
58473: PUSH
58474: LD_INT 0
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 3
58483: PUSH
58484: LD_INT 1
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 1
58493: PUSH
58494: LD_INT 3
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 0
58503: PUSH
58504: LD_INT 3
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 1
58513: NEG
58514: PUSH
58515: LD_INT 2
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 2
58524: NEG
58525: PUSH
58526: LD_INT 1
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 3
58535: NEG
58536: PUSH
58537: LD_INT 0
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 3
58546: NEG
58547: PUSH
58548: LD_INT 1
58550: NEG
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58587: LD_ADDR_VAR 0 44
58591: PUSH
58592: LD_INT 0
58594: PUSH
58595: LD_INT 0
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 0
58604: PUSH
58605: LD_INT 1
58607: NEG
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 1
58615: PUSH
58616: LD_INT 0
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 1
58625: PUSH
58626: LD_INT 1
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 0
58635: PUSH
58636: LD_INT 1
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 1
58645: NEG
58646: PUSH
58647: LD_INT 0
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 1
58656: NEG
58657: PUSH
58658: LD_INT 1
58660: NEG
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 1
58668: NEG
58669: PUSH
58670: LD_INT 2
58672: NEG
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 1
58680: PUSH
58681: LD_INT 1
58683: NEG
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: LD_INT 2
58691: PUSH
58692: LD_INT 0
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 2
58701: PUSH
58702: LD_INT 1
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: LD_INT 2
58711: PUSH
58712: LD_INT 2
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 1
58721: PUSH
58722: LD_INT 2
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 1
58731: NEG
58732: PUSH
58733: LD_INT 1
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 2
58742: NEG
58743: PUSH
58744: LD_INT 0
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 2
58753: NEG
58754: PUSH
58755: LD_INT 1
58757: NEG
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 2
58765: NEG
58766: PUSH
58767: LD_INT 2
58769: NEG
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PUSH
58775: LD_INT 2
58777: NEG
58778: PUSH
58779: LD_INT 3
58781: NEG
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 2
58789: PUSH
58790: LD_INT 1
58792: NEG
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 3
58800: PUSH
58801: LD_INT 0
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 3
58810: PUSH
58811: LD_INT 1
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 3
58820: PUSH
58821: LD_INT 2
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 3
58830: PUSH
58831: LD_INT 3
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 2
58840: PUSH
58841: LD_INT 3
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 2
58850: NEG
58851: PUSH
58852: LD_INT 1
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 3
58861: NEG
58862: PUSH
58863: LD_INT 0
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: LD_INT 3
58872: NEG
58873: PUSH
58874: LD_INT 1
58876: NEG
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 3
58884: NEG
58885: PUSH
58886: LD_INT 2
58888: NEG
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 3
58896: NEG
58897: PUSH
58898: LD_INT 3
58900: NEG
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: LIST
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: LIST
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: LIST
58920: LIST
58921: LIST
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58937: LD_ADDR_VAR 0 45
58941: PUSH
58942: LD_INT 0
58944: PUSH
58945: LD_INT 0
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 0
58954: PUSH
58955: LD_INT 1
58957: NEG
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 1
58965: PUSH
58966: LD_INT 0
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 1
58975: PUSH
58976: LD_INT 1
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 0
58985: PUSH
58986: LD_INT 1
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 1
58995: NEG
58996: PUSH
58997: LD_INT 0
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 1
59006: NEG
59007: PUSH
59008: LD_INT 1
59010: NEG
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 1
59018: NEG
59019: PUSH
59020: LD_INT 2
59022: NEG
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: LD_INT 0
59030: PUSH
59031: LD_INT 2
59033: NEG
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 1
59041: PUSH
59042: LD_INT 1
59044: NEG
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 2
59052: PUSH
59053: LD_INT 1
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 2
59062: PUSH
59063: LD_INT 2
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 1
59072: PUSH
59073: LD_INT 2
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 0
59082: PUSH
59083: LD_INT 2
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 1
59092: NEG
59093: PUSH
59094: LD_INT 1
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 2
59103: NEG
59104: PUSH
59105: LD_INT 1
59107: NEG
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 2
59115: NEG
59116: PUSH
59117: LD_INT 2
59119: NEG
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 2
59127: NEG
59128: PUSH
59129: LD_INT 3
59131: NEG
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 1
59139: NEG
59140: PUSH
59141: LD_INT 3
59143: NEG
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 0
59151: PUSH
59152: LD_INT 3
59154: NEG
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 1
59162: PUSH
59163: LD_INT 2
59165: NEG
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 3
59173: PUSH
59174: LD_INT 2
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 3
59183: PUSH
59184: LD_INT 3
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 2
59193: PUSH
59194: LD_INT 3
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 1
59203: PUSH
59204: LD_INT 3
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 0
59213: PUSH
59214: LD_INT 3
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 1
59223: NEG
59224: PUSH
59225: LD_INT 2
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 3
59234: NEG
59235: PUSH
59236: LD_INT 2
59238: NEG
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 3
59246: NEG
59247: PUSH
59248: LD_INT 3
59250: NEG
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: LIST
59262: LIST
59263: LIST
59264: LIST
59265: LIST
59266: LIST
59267: LIST
59268: LIST
59269: LIST
59270: LIST
59271: LIST
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59287: LD_ADDR_VAR 0 46
59291: PUSH
59292: LD_INT 0
59294: PUSH
59295: LD_INT 0
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 0
59304: PUSH
59305: LD_INT 1
59307: NEG
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 1
59315: PUSH
59316: LD_INT 0
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 1
59325: PUSH
59326: LD_INT 1
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 0
59335: PUSH
59336: LD_INT 1
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 1
59345: NEG
59346: PUSH
59347: LD_INT 0
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 1
59356: NEG
59357: PUSH
59358: LD_INT 1
59360: NEG
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 1
59368: NEG
59369: PUSH
59370: LD_INT 2
59372: NEG
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 0
59380: PUSH
59381: LD_INT 2
59383: NEG
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 1
59391: PUSH
59392: LD_INT 1
59394: NEG
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 2
59402: PUSH
59403: LD_INT 0
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 2
59412: PUSH
59413: LD_INT 1
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 1
59422: PUSH
59423: LD_INT 2
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 0
59432: PUSH
59433: LD_INT 2
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 1
59442: NEG
59443: PUSH
59444: LD_INT 1
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 2
59453: NEG
59454: PUSH
59455: LD_INT 0
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 2
59464: NEG
59465: PUSH
59466: LD_INT 1
59468: NEG
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 1
59476: NEG
59477: PUSH
59478: LD_INT 3
59480: NEG
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 0
59488: PUSH
59489: LD_INT 3
59491: NEG
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 1
59499: PUSH
59500: LD_INT 2
59502: NEG
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 2
59510: PUSH
59511: LD_INT 1
59513: NEG
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 3
59521: PUSH
59522: LD_INT 0
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 3
59531: PUSH
59532: LD_INT 1
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 1
59541: PUSH
59542: LD_INT 3
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 0
59551: PUSH
59552: LD_INT 3
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 1
59561: NEG
59562: PUSH
59563: LD_INT 2
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: LD_INT 2
59572: NEG
59573: PUSH
59574: LD_INT 1
59576: PUSH
59577: EMPTY
59578: LIST
59579: LIST
59580: PUSH
59581: LD_INT 3
59583: NEG
59584: PUSH
59585: LD_INT 0
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 3
59594: NEG
59595: PUSH
59596: LD_INT 1
59598: NEG
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: LIST
59614: LIST
59615: LIST
59616: LIST
59617: LIST
59618: LIST
59619: LIST
59620: LIST
59621: LIST
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59635: LD_ADDR_VAR 0 47
59639: PUSH
59640: LD_INT 0
59642: PUSH
59643: LD_INT 0
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 0
59652: PUSH
59653: LD_INT 1
59655: NEG
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 1
59663: PUSH
59664: LD_INT 0
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 1
59673: PUSH
59674: LD_INT 1
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: PUSH
59681: LD_INT 0
59683: PUSH
59684: LD_INT 1
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 1
59693: NEG
59694: PUSH
59695: LD_INT 0
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: LD_INT 1
59704: NEG
59705: PUSH
59706: LD_INT 1
59708: NEG
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 1
59716: NEG
59717: PUSH
59718: LD_INT 2
59720: NEG
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 0
59728: PUSH
59729: LD_INT 2
59731: NEG
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 1
59739: PUSH
59740: LD_INT 1
59742: NEG
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 2
59750: NEG
59751: PUSH
59752: LD_INT 1
59754: NEG
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 2
59762: NEG
59763: PUSH
59764: LD_INT 2
59766: NEG
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: LIST
59776: LIST
59777: LIST
59778: LIST
59779: LIST
59780: LIST
59781: LIST
59782: LIST
59783: LIST
59784: LIST
59785: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59786: LD_ADDR_VAR 0 48
59790: PUSH
59791: LD_INT 0
59793: PUSH
59794: LD_INT 0
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 0
59803: PUSH
59804: LD_INT 1
59806: NEG
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 1
59814: PUSH
59815: LD_INT 0
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 1
59824: PUSH
59825: LD_INT 1
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 0
59834: PUSH
59835: LD_INT 1
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_INT 1
59844: NEG
59845: PUSH
59846: LD_INT 0
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 1
59855: NEG
59856: PUSH
59857: LD_INT 1
59859: NEG
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 1
59867: NEG
59868: PUSH
59869: LD_INT 2
59871: NEG
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 0
59879: PUSH
59880: LD_INT 2
59882: NEG
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 1
59890: PUSH
59891: LD_INT 1
59893: NEG
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: LD_INT 2
59901: PUSH
59902: LD_INT 0
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 2
59911: PUSH
59912: LD_INT 1
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59933: LD_ADDR_VAR 0 49
59937: PUSH
59938: LD_INT 0
59940: PUSH
59941: LD_INT 0
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 0
59950: PUSH
59951: LD_INT 1
59953: NEG
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 1
59961: PUSH
59962: LD_INT 0
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 1
59971: PUSH
59972: LD_INT 1
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: LD_INT 0
59981: PUSH
59982: LD_INT 1
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 1
59991: NEG
59992: PUSH
59993: LD_INT 0
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 1
60002: NEG
60003: PUSH
60004: LD_INT 1
60006: NEG
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 1
60014: PUSH
60015: LD_INT 1
60017: NEG
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 2
60025: PUSH
60026: LD_INT 0
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PUSH
60033: LD_INT 2
60035: PUSH
60036: LD_INT 1
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PUSH
60043: LD_INT 2
60045: PUSH
60046: LD_INT 2
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_INT 1
60055: PUSH
60056: LD_INT 2
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60077: LD_ADDR_VAR 0 50
60081: PUSH
60082: LD_INT 0
60084: PUSH
60085: LD_INT 0
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 0
60094: PUSH
60095: LD_INT 1
60097: NEG
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: LD_INT 1
60105: PUSH
60106: LD_INT 0
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: LD_INT 1
60115: PUSH
60116: LD_INT 1
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: LD_INT 0
60125: PUSH
60126: LD_INT 1
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 1
60135: NEG
60136: PUSH
60137: LD_INT 0
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 1
60146: NEG
60147: PUSH
60148: LD_INT 1
60150: NEG
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 2
60158: PUSH
60159: LD_INT 1
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 2
60168: PUSH
60169: LD_INT 2
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 1
60178: PUSH
60179: LD_INT 2
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: LD_INT 0
60188: PUSH
60189: LD_INT 2
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 1
60198: NEG
60199: PUSH
60200: LD_INT 1
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60221: LD_ADDR_VAR 0 51
60225: PUSH
60226: LD_INT 0
60228: PUSH
60229: LD_INT 0
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 0
60238: PUSH
60239: LD_INT 1
60241: NEG
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 1
60249: PUSH
60250: LD_INT 0
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 1
60259: PUSH
60260: LD_INT 1
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 0
60269: PUSH
60270: LD_INT 1
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: LD_INT 1
60279: NEG
60280: PUSH
60281: LD_INT 0
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: LD_INT 1
60290: NEG
60291: PUSH
60292: LD_INT 1
60294: NEG
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: LD_INT 1
60302: PUSH
60303: LD_INT 2
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: LD_INT 0
60312: PUSH
60313: LD_INT 2
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: PUSH
60320: LD_INT 1
60322: NEG
60323: PUSH
60324: LD_INT 1
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: LD_INT 2
60333: NEG
60334: PUSH
60335: LD_INT 0
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: PUSH
60342: LD_INT 2
60344: NEG
60345: PUSH
60346: LD_INT 1
60348: NEG
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60368: LD_ADDR_VAR 0 52
60372: PUSH
60373: LD_INT 0
60375: PUSH
60376: LD_INT 0
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 0
60385: PUSH
60386: LD_INT 1
60388: NEG
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 1
60396: PUSH
60397: LD_INT 0
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 1
60406: PUSH
60407: LD_INT 1
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 0
60416: PUSH
60417: LD_INT 1
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 1
60426: NEG
60427: PUSH
60428: LD_INT 0
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 1
60437: NEG
60438: PUSH
60439: LD_INT 1
60441: NEG
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 1
60449: NEG
60450: PUSH
60451: LD_INT 2
60453: NEG
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 1
60461: NEG
60462: PUSH
60463: LD_INT 1
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 2
60472: NEG
60473: PUSH
60474: LD_INT 0
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 2
60483: NEG
60484: PUSH
60485: LD_INT 1
60487: NEG
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: LD_INT 2
60495: NEG
60496: PUSH
60497: LD_INT 2
60499: NEG
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: LIST
60512: LIST
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60519: LD_ADDR_VAR 0 53
60523: PUSH
60524: LD_INT 0
60526: PUSH
60527: LD_INT 0
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: LD_INT 0
60536: PUSH
60537: LD_INT 1
60539: NEG
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 1
60547: PUSH
60548: LD_INT 0
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 1
60557: PUSH
60558: LD_INT 1
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 0
60567: PUSH
60568: LD_INT 1
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 1
60577: NEG
60578: PUSH
60579: LD_INT 0
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 1
60588: NEG
60589: PUSH
60590: LD_INT 1
60592: NEG
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: LD_INT 1
60600: NEG
60601: PUSH
60602: LD_INT 2
60604: NEG
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PUSH
60610: LD_INT 0
60612: PUSH
60613: LD_INT 2
60615: NEG
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 1
60623: PUSH
60624: LD_INT 1
60626: NEG
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 2
60634: PUSH
60635: LD_INT 0
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 2
60644: PUSH
60645: LD_INT 1
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 2
60654: PUSH
60655: LD_INT 2
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_INT 1
60664: PUSH
60665: LD_INT 2
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 0
60674: PUSH
60675: LD_INT 2
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 1
60684: NEG
60685: PUSH
60686: LD_INT 1
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PUSH
60693: LD_INT 2
60695: NEG
60696: PUSH
60697: LD_INT 0
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: LD_INT 2
60706: NEG
60707: PUSH
60708: LD_INT 1
60710: NEG
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 2
60718: NEG
60719: PUSH
60720: LD_INT 2
60722: NEG
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: LIST
60732: LIST
60733: LIST
60734: LIST
60735: LIST
60736: LIST
60737: LIST
60738: LIST
60739: LIST
60740: LIST
60741: LIST
60742: LIST
60743: LIST
60744: LIST
60745: LIST
60746: LIST
60747: LIST
60748: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60749: LD_ADDR_VAR 0 54
60753: PUSH
60754: LD_INT 0
60756: PUSH
60757: LD_INT 0
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 0
60766: PUSH
60767: LD_INT 1
60769: NEG
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 1
60777: PUSH
60778: LD_INT 0
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 1
60787: PUSH
60788: LD_INT 1
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 0
60797: PUSH
60798: LD_INT 1
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 1
60807: NEG
60808: PUSH
60809: LD_INT 0
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 1
60818: NEG
60819: PUSH
60820: LD_INT 1
60822: NEG
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 1
60830: NEG
60831: PUSH
60832: LD_INT 2
60834: NEG
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: LD_INT 0
60842: PUSH
60843: LD_INT 2
60845: NEG
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: LD_INT 1
60853: PUSH
60854: LD_INT 1
60856: NEG
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: PUSH
60862: LD_INT 2
60864: PUSH
60865: LD_INT 0
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: LD_INT 2
60874: PUSH
60875: LD_INT 1
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: LD_INT 2
60884: PUSH
60885: LD_INT 2
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: PUSH
60892: LD_INT 1
60894: PUSH
60895: LD_INT 2
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: PUSH
60902: LD_INT 0
60904: PUSH
60905: LD_INT 2
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 1
60914: NEG
60915: PUSH
60916: LD_INT 1
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: PUSH
60923: LD_INT 2
60925: NEG
60926: PUSH
60927: LD_INT 0
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: PUSH
60934: LD_INT 2
60936: NEG
60937: PUSH
60938: LD_INT 1
60940: NEG
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: PUSH
60946: LD_INT 2
60948: NEG
60949: PUSH
60950: LD_INT 2
60952: NEG
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: LIST
60962: LIST
60963: LIST
60964: LIST
60965: LIST
60966: LIST
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60979: LD_ADDR_VAR 0 55
60983: PUSH
60984: LD_INT 0
60986: PUSH
60987: LD_INT 0
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 0
60996: PUSH
60997: LD_INT 1
60999: NEG
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 1
61007: PUSH
61008: LD_INT 0
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 1
61017: PUSH
61018: LD_INT 1
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 0
61027: PUSH
61028: LD_INT 1
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 1
61037: NEG
61038: PUSH
61039: LD_INT 0
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: LD_INT 1
61048: NEG
61049: PUSH
61050: LD_INT 1
61052: NEG
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 1
61060: NEG
61061: PUSH
61062: LD_INT 2
61064: NEG
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 0
61072: PUSH
61073: LD_INT 2
61075: NEG
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: PUSH
61081: LD_INT 1
61083: PUSH
61084: LD_INT 1
61086: NEG
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 2
61094: PUSH
61095: LD_INT 0
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: LD_INT 2
61104: PUSH
61105: LD_INT 1
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 2
61114: PUSH
61115: LD_INT 2
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 1
61124: PUSH
61125: LD_INT 2
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PUSH
61132: LD_INT 0
61134: PUSH
61135: LD_INT 2
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: LD_INT 1
61144: NEG
61145: PUSH
61146: LD_INT 1
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: PUSH
61153: LD_INT 2
61155: NEG
61156: PUSH
61157: LD_INT 0
61159: PUSH
61160: EMPTY
61161: LIST
61162: LIST
61163: PUSH
61164: LD_INT 2
61166: NEG
61167: PUSH
61168: LD_INT 1
61170: NEG
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: LD_INT 2
61178: NEG
61179: PUSH
61180: LD_INT 2
61182: NEG
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61209: LD_ADDR_VAR 0 56
61213: PUSH
61214: LD_INT 0
61216: PUSH
61217: LD_INT 0
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PUSH
61224: LD_INT 0
61226: PUSH
61227: LD_INT 1
61229: NEG
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: LD_INT 1
61237: PUSH
61238: LD_INT 0
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: PUSH
61245: LD_INT 1
61247: PUSH
61248: LD_INT 1
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: PUSH
61255: LD_INT 0
61257: PUSH
61258: LD_INT 1
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: PUSH
61265: LD_INT 1
61267: NEG
61268: PUSH
61269: LD_INT 0
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: PUSH
61276: LD_INT 1
61278: NEG
61279: PUSH
61280: LD_INT 1
61282: NEG
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 1
61290: NEG
61291: PUSH
61292: LD_INT 2
61294: NEG
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 0
61302: PUSH
61303: LD_INT 2
61305: NEG
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 1
61313: PUSH
61314: LD_INT 1
61316: NEG
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: LD_INT 2
61324: PUSH
61325: LD_INT 0
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PUSH
61332: LD_INT 2
61334: PUSH
61335: LD_INT 1
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 2
61344: PUSH
61345: LD_INT 2
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: PUSH
61352: LD_INT 1
61354: PUSH
61355: LD_INT 2
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: PUSH
61362: LD_INT 0
61364: PUSH
61365: LD_INT 2
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: LD_INT 1
61374: NEG
61375: PUSH
61376: LD_INT 1
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: LD_INT 2
61385: NEG
61386: PUSH
61387: LD_INT 0
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: PUSH
61394: LD_INT 2
61396: NEG
61397: PUSH
61398: LD_INT 1
61400: NEG
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: PUSH
61406: LD_INT 2
61408: NEG
61409: PUSH
61410: LD_INT 2
61412: NEG
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61439: LD_ADDR_VAR 0 57
61443: PUSH
61444: LD_INT 0
61446: PUSH
61447: LD_INT 0
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: PUSH
61454: LD_INT 0
61456: PUSH
61457: LD_INT 1
61459: NEG
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: LD_INT 1
61467: PUSH
61468: LD_INT 0
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: PUSH
61475: LD_INT 1
61477: PUSH
61478: LD_INT 1
61480: PUSH
61481: EMPTY
61482: LIST
61483: LIST
61484: PUSH
61485: LD_INT 0
61487: PUSH
61488: LD_INT 1
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 1
61497: NEG
61498: PUSH
61499: LD_INT 0
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 1
61508: NEG
61509: PUSH
61510: LD_INT 1
61512: NEG
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 1
61520: NEG
61521: PUSH
61522: LD_INT 2
61524: NEG
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 0
61532: PUSH
61533: LD_INT 2
61535: NEG
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: LD_INT 1
61543: PUSH
61544: LD_INT 1
61546: NEG
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 2
61554: PUSH
61555: LD_INT 0
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 2
61564: PUSH
61565: LD_INT 1
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 2
61574: PUSH
61575: LD_INT 2
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: LD_INT 1
61584: PUSH
61585: LD_INT 2
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 0
61594: PUSH
61595: LD_INT 2
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 1
61604: NEG
61605: PUSH
61606: LD_INT 1
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 2
61615: NEG
61616: PUSH
61617: LD_INT 0
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: LD_INT 2
61626: NEG
61627: PUSH
61628: LD_INT 1
61630: NEG
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 2
61638: NEG
61639: PUSH
61640: LD_INT 2
61642: NEG
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61669: LD_ADDR_VAR 0 58
61673: PUSH
61674: LD_INT 0
61676: PUSH
61677: LD_INT 0
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PUSH
61684: LD_INT 0
61686: PUSH
61687: LD_INT 1
61689: NEG
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: PUSH
61695: LD_INT 1
61697: PUSH
61698: LD_INT 0
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: PUSH
61705: LD_INT 1
61707: PUSH
61708: LD_INT 1
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PUSH
61715: LD_INT 0
61717: PUSH
61718: LD_INT 1
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PUSH
61725: LD_INT 1
61727: NEG
61728: PUSH
61729: LD_INT 0
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: PUSH
61736: LD_INT 1
61738: NEG
61739: PUSH
61740: LD_INT 1
61742: NEG
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 1
61750: NEG
61751: PUSH
61752: LD_INT 2
61754: NEG
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: PUSH
61760: LD_INT 0
61762: PUSH
61763: LD_INT 2
61765: NEG
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: LD_INT 1
61773: PUSH
61774: LD_INT 1
61776: NEG
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 2
61784: PUSH
61785: LD_INT 0
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 2
61794: PUSH
61795: LD_INT 1
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 2
61804: PUSH
61805: LD_INT 2
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 1
61814: PUSH
61815: LD_INT 2
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: LD_INT 0
61824: PUSH
61825: LD_INT 2
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 1
61834: NEG
61835: PUSH
61836: LD_INT 1
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 2
61845: NEG
61846: PUSH
61847: LD_INT 0
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: LD_INT 2
61856: NEG
61857: PUSH
61858: LD_INT 1
61860: NEG
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: PUSH
61866: LD_INT 2
61868: NEG
61869: PUSH
61870: LD_INT 2
61872: NEG
61873: PUSH
61874: EMPTY
61875: LIST
61876: LIST
61877: PUSH
61878: EMPTY
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61899: LD_ADDR_VAR 0 59
61903: PUSH
61904: LD_INT 0
61906: PUSH
61907: LD_INT 0
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: LD_INT 0
61916: PUSH
61917: LD_INT 1
61919: NEG
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 1
61927: PUSH
61928: LD_INT 0
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: LD_INT 1
61937: PUSH
61938: LD_INT 1
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 0
61947: PUSH
61948: LD_INT 1
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: LD_INT 1
61957: NEG
61958: PUSH
61959: LD_INT 0
61961: PUSH
61962: EMPTY
61963: LIST
61964: LIST
61965: PUSH
61966: LD_INT 1
61968: NEG
61969: PUSH
61970: LD_INT 1
61972: NEG
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: LIST
61982: LIST
61983: LIST
61984: LIST
61985: LIST
61986: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61987: LD_ADDR_VAR 0 60
61991: PUSH
61992: LD_INT 0
61994: PUSH
61995: LD_INT 0
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: PUSH
62002: LD_INT 0
62004: PUSH
62005: LD_INT 1
62007: NEG
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: LD_INT 1
62015: PUSH
62016: LD_INT 0
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PUSH
62023: LD_INT 1
62025: PUSH
62026: LD_INT 1
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: PUSH
62033: LD_INT 0
62035: PUSH
62036: LD_INT 1
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: LD_INT 1
62045: NEG
62046: PUSH
62047: LD_INT 0
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: PUSH
62054: LD_INT 1
62056: NEG
62057: PUSH
62058: LD_INT 1
62060: NEG
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: LIST
62070: LIST
62071: LIST
62072: LIST
62073: LIST
62074: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62075: LD_ADDR_VAR 0 61
62079: PUSH
62080: LD_INT 0
62082: PUSH
62083: LD_INT 0
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 0
62092: PUSH
62093: LD_INT 1
62095: NEG
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: LD_INT 1
62103: PUSH
62104: LD_INT 0
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: LD_INT 1
62113: PUSH
62114: LD_INT 1
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: PUSH
62121: LD_INT 0
62123: PUSH
62124: LD_INT 1
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: LD_INT 1
62133: NEG
62134: PUSH
62135: LD_INT 0
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: LD_INT 1
62144: NEG
62145: PUSH
62146: LD_INT 1
62148: NEG
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: LIST
62162: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62163: LD_ADDR_VAR 0 62
62167: PUSH
62168: LD_INT 0
62170: PUSH
62171: LD_INT 0
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: PUSH
62178: LD_INT 0
62180: PUSH
62181: LD_INT 1
62183: NEG
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: LD_INT 1
62191: PUSH
62192: LD_INT 0
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: PUSH
62199: LD_INT 1
62201: PUSH
62202: LD_INT 1
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: PUSH
62209: LD_INT 0
62211: PUSH
62212: LD_INT 1
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: PUSH
62219: LD_INT 1
62221: NEG
62222: PUSH
62223: LD_INT 0
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: PUSH
62230: LD_INT 1
62232: NEG
62233: PUSH
62234: LD_INT 1
62236: NEG
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62251: LD_ADDR_VAR 0 63
62255: PUSH
62256: LD_INT 0
62258: PUSH
62259: LD_INT 0
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: PUSH
62266: LD_INT 0
62268: PUSH
62269: LD_INT 1
62271: NEG
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PUSH
62277: LD_INT 1
62279: PUSH
62280: LD_INT 0
62282: PUSH
62283: EMPTY
62284: LIST
62285: LIST
62286: PUSH
62287: LD_INT 1
62289: PUSH
62290: LD_INT 1
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: PUSH
62297: LD_INT 0
62299: PUSH
62300: LD_INT 1
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: PUSH
62307: LD_INT 1
62309: NEG
62310: PUSH
62311: LD_INT 0
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: PUSH
62318: LD_INT 1
62320: NEG
62321: PUSH
62322: LD_INT 1
62324: NEG
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: LIST
62338: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62339: LD_ADDR_VAR 0 64
62343: PUSH
62344: LD_INT 0
62346: PUSH
62347: LD_INT 0
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: PUSH
62354: LD_INT 0
62356: PUSH
62357: LD_INT 1
62359: NEG
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: LD_INT 1
62367: PUSH
62368: LD_INT 0
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: PUSH
62375: LD_INT 1
62377: PUSH
62378: LD_INT 1
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: PUSH
62385: LD_INT 0
62387: PUSH
62388: LD_INT 1
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: PUSH
62395: LD_INT 1
62397: NEG
62398: PUSH
62399: LD_INT 0
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: PUSH
62406: LD_INT 1
62408: NEG
62409: PUSH
62410: LD_INT 1
62412: NEG
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: LIST
62422: LIST
62423: LIST
62424: LIST
62425: LIST
62426: ST_TO_ADDR
// end ; 1 :
62427: GO 68324
62429: LD_INT 1
62431: DOUBLE
62432: EQUAL
62433: IFTRUE 62437
62435: GO 65060
62437: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62438: LD_ADDR_VAR 0 11
62442: PUSH
62443: LD_INT 1
62445: NEG
62446: PUSH
62447: LD_INT 3
62449: NEG
62450: PUSH
62451: EMPTY
62452: LIST
62453: LIST
62454: PUSH
62455: LD_INT 0
62457: PUSH
62458: LD_INT 3
62460: NEG
62461: PUSH
62462: EMPTY
62463: LIST
62464: LIST
62465: PUSH
62466: LD_INT 1
62468: PUSH
62469: LD_INT 2
62471: NEG
62472: PUSH
62473: EMPTY
62474: LIST
62475: LIST
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: LIST
62481: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62482: LD_ADDR_VAR 0 12
62486: PUSH
62487: LD_INT 2
62489: PUSH
62490: LD_INT 1
62492: NEG
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: PUSH
62498: LD_INT 3
62500: PUSH
62501: LD_INT 0
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: PUSH
62508: LD_INT 3
62510: PUSH
62511: LD_INT 1
62513: PUSH
62514: EMPTY
62515: LIST
62516: LIST
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: LIST
62522: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62523: LD_ADDR_VAR 0 13
62527: PUSH
62528: LD_INT 3
62530: PUSH
62531: LD_INT 2
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: LD_INT 3
62540: PUSH
62541: LD_INT 3
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PUSH
62548: LD_INT 2
62550: PUSH
62551: LD_INT 3
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: LIST
62562: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62563: LD_ADDR_VAR 0 14
62567: PUSH
62568: LD_INT 1
62570: PUSH
62571: LD_INT 3
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: PUSH
62578: LD_INT 0
62580: PUSH
62581: LD_INT 3
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: LD_INT 1
62590: NEG
62591: PUSH
62592: LD_INT 2
62594: PUSH
62595: EMPTY
62596: LIST
62597: LIST
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: LIST
62603: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62604: LD_ADDR_VAR 0 15
62608: PUSH
62609: LD_INT 2
62611: NEG
62612: PUSH
62613: LD_INT 1
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: LD_INT 3
62622: NEG
62623: PUSH
62624: LD_INT 0
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 3
62633: NEG
62634: PUSH
62635: LD_INT 1
62637: NEG
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: LIST
62647: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62648: LD_ADDR_VAR 0 16
62652: PUSH
62653: LD_INT 2
62655: NEG
62656: PUSH
62657: LD_INT 3
62659: NEG
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: PUSH
62665: LD_INT 3
62667: NEG
62668: PUSH
62669: LD_INT 2
62671: NEG
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: PUSH
62677: LD_INT 3
62679: NEG
62680: PUSH
62681: LD_INT 3
62683: NEG
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: LIST
62693: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62694: LD_ADDR_VAR 0 17
62698: PUSH
62699: LD_INT 1
62701: NEG
62702: PUSH
62703: LD_INT 3
62705: NEG
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 0
62713: PUSH
62714: LD_INT 3
62716: NEG
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: PUSH
62722: LD_INT 1
62724: PUSH
62725: LD_INT 2
62727: NEG
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: LIST
62737: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62738: LD_ADDR_VAR 0 18
62742: PUSH
62743: LD_INT 2
62745: PUSH
62746: LD_INT 1
62748: NEG
62749: PUSH
62750: EMPTY
62751: LIST
62752: LIST
62753: PUSH
62754: LD_INT 3
62756: PUSH
62757: LD_INT 0
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: PUSH
62764: LD_INT 3
62766: PUSH
62767: LD_INT 1
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: LIST
62778: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62779: LD_ADDR_VAR 0 19
62783: PUSH
62784: LD_INT 3
62786: PUSH
62787: LD_INT 2
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: PUSH
62794: LD_INT 3
62796: PUSH
62797: LD_INT 3
62799: PUSH
62800: EMPTY
62801: LIST
62802: LIST
62803: PUSH
62804: LD_INT 2
62806: PUSH
62807: LD_INT 3
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: LIST
62818: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62819: LD_ADDR_VAR 0 20
62823: PUSH
62824: LD_INT 1
62826: PUSH
62827: LD_INT 3
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: PUSH
62834: LD_INT 0
62836: PUSH
62837: LD_INT 3
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: LD_INT 1
62846: NEG
62847: PUSH
62848: LD_INT 2
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: LIST
62859: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62860: LD_ADDR_VAR 0 21
62864: PUSH
62865: LD_INT 2
62867: NEG
62868: PUSH
62869: LD_INT 1
62871: PUSH
62872: EMPTY
62873: LIST
62874: LIST
62875: PUSH
62876: LD_INT 3
62878: NEG
62879: PUSH
62880: LD_INT 0
62882: PUSH
62883: EMPTY
62884: LIST
62885: LIST
62886: PUSH
62887: LD_INT 3
62889: NEG
62890: PUSH
62891: LD_INT 1
62893: NEG
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: EMPTY
62900: LIST
62901: LIST
62902: LIST
62903: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62904: LD_ADDR_VAR 0 22
62908: PUSH
62909: LD_INT 2
62911: NEG
62912: PUSH
62913: LD_INT 3
62915: NEG
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: LD_INT 3
62923: NEG
62924: PUSH
62925: LD_INT 2
62927: NEG
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: PUSH
62933: LD_INT 3
62935: NEG
62936: PUSH
62937: LD_INT 3
62939: NEG
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: PUSH
62945: EMPTY
62946: LIST
62947: LIST
62948: LIST
62949: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
62950: LD_ADDR_VAR 0 23
62954: PUSH
62955: LD_INT 0
62957: PUSH
62958: LD_INT 3
62960: NEG
62961: PUSH
62962: EMPTY
62963: LIST
62964: LIST
62965: PUSH
62966: LD_INT 1
62968: NEG
62969: PUSH
62970: LD_INT 4
62972: NEG
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: PUSH
62978: LD_INT 1
62980: PUSH
62981: LD_INT 3
62983: NEG
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: EMPTY
62990: LIST
62991: LIST
62992: LIST
62993: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
62994: LD_ADDR_VAR 0 24
62998: PUSH
62999: LD_INT 3
63001: PUSH
63002: LD_INT 0
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: PUSH
63009: LD_INT 3
63011: PUSH
63012: LD_INT 1
63014: NEG
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: PUSH
63020: LD_INT 4
63022: PUSH
63023: LD_INT 1
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: PUSH
63030: EMPTY
63031: LIST
63032: LIST
63033: LIST
63034: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
63035: LD_ADDR_VAR 0 25
63039: PUSH
63040: LD_INT 3
63042: PUSH
63043: LD_INT 3
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: PUSH
63050: LD_INT 4
63052: PUSH
63053: LD_INT 3
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 3
63062: PUSH
63063: LD_INT 4
63065: PUSH
63066: EMPTY
63067: LIST
63068: LIST
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: LIST
63074: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
63075: LD_ADDR_VAR 0 26
63079: PUSH
63080: LD_INT 0
63082: PUSH
63083: LD_INT 3
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: PUSH
63090: LD_INT 1
63092: PUSH
63093: LD_INT 4
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: PUSH
63100: LD_INT 1
63102: NEG
63103: PUSH
63104: LD_INT 3
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: LIST
63115: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
63116: LD_ADDR_VAR 0 27
63120: PUSH
63121: LD_INT 3
63123: NEG
63124: PUSH
63125: LD_INT 0
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: PUSH
63132: LD_INT 3
63134: NEG
63135: PUSH
63136: LD_INT 1
63138: PUSH
63139: EMPTY
63140: LIST
63141: LIST
63142: PUSH
63143: LD_INT 4
63145: NEG
63146: PUSH
63147: LD_INT 1
63149: NEG
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: LIST
63159: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
63160: LD_ADDR_VAR 0 28
63164: PUSH
63165: LD_INT 3
63167: NEG
63168: PUSH
63169: LD_INT 3
63171: NEG
63172: PUSH
63173: EMPTY
63174: LIST
63175: LIST
63176: PUSH
63177: LD_INT 3
63179: NEG
63180: PUSH
63181: LD_INT 4
63183: NEG
63184: PUSH
63185: EMPTY
63186: LIST
63187: LIST
63188: PUSH
63189: LD_INT 4
63191: NEG
63192: PUSH
63193: LD_INT 3
63195: NEG
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: LIST
63205: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
63206: LD_ADDR_VAR 0 29
63210: PUSH
63211: LD_INT 1
63213: NEG
63214: PUSH
63215: LD_INT 3
63217: NEG
63218: PUSH
63219: EMPTY
63220: LIST
63221: LIST
63222: PUSH
63223: LD_INT 0
63225: PUSH
63226: LD_INT 3
63228: NEG
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: PUSH
63234: LD_INT 1
63236: PUSH
63237: LD_INT 2
63239: NEG
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: PUSH
63245: LD_INT 1
63247: NEG
63248: PUSH
63249: LD_INT 4
63251: NEG
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: PUSH
63257: LD_INT 0
63259: PUSH
63260: LD_INT 4
63262: NEG
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: PUSH
63268: LD_INT 1
63270: PUSH
63271: LD_INT 3
63273: NEG
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: PUSH
63279: LD_INT 1
63281: NEG
63282: PUSH
63283: LD_INT 5
63285: NEG
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: PUSH
63291: LD_INT 0
63293: PUSH
63294: LD_INT 5
63296: NEG
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: PUSH
63302: LD_INT 1
63304: PUSH
63305: LD_INT 4
63307: NEG
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: PUSH
63313: LD_INT 1
63315: NEG
63316: PUSH
63317: LD_INT 6
63319: NEG
63320: PUSH
63321: EMPTY
63322: LIST
63323: LIST
63324: PUSH
63325: LD_INT 0
63327: PUSH
63328: LD_INT 6
63330: NEG
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: LD_INT 1
63338: PUSH
63339: LD_INT 5
63341: NEG
63342: PUSH
63343: EMPTY
63344: LIST
63345: LIST
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: LIST
63351: LIST
63352: LIST
63353: LIST
63354: LIST
63355: LIST
63356: LIST
63357: LIST
63358: LIST
63359: LIST
63360: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
63361: LD_ADDR_VAR 0 30
63365: PUSH
63366: LD_INT 2
63368: PUSH
63369: LD_INT 1
63371: NEG
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: LD_INT 3
63379: PUSH
63380: LD_INT 0
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: PUSH
63387: LD_INT 3
63389: PUSH
63390: LD_INT 1
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 3
63399: PUSH
63400: LD_INT 1
63402: NEG
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: PUSH
63408: LD_INT 4
63410: PUSH
63411: LD_INT 0
63413: PUSH
63414: EMPTY
63415: LIST
63416: LIST
63417: PUSH
63418: LD_INT 4
63420: PUSH
63421: LD_INT 1
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: PUSH
63428: LD_INT 4
63430: PUSH
63431: LD_INT 1
63433: NEG
63434: PUSH
63435: EMPTY
63436: LIST
63437: LIST
63438: PUSH
63439: LD_INT 5
63441: PUSH
63442: LD_INT 0
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PUSH
63449: LD_INT 5
63451: PUSH
63452: LD_INT 1
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: PUSH
63459: LD_INT 5
63461: PUSH
63462: LD_INT 1
63464: NEG
63465: PUSH
63466: EMPTY
63467: LIST
63468: LIST
63469: PUSH
63470: LD_INT 6
63472: PUSH
63473: LD_INT 0
63475: PUSH
63476: EMPTY
63477: LIST
63478: LIST
63479: PUSH
63480: LD_INT 6
63482: PUSH
63483: LD_INT 1
63485: PUSH
63486: EMPTY
63487: LIST
63488: LIST
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: LIST
63494: LIST
63495: LIST
63496: LIST
63497: LIST
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
63504: LD_ADDR_VAR 0 31
63508: PUSH
63509: LD_INT 3
63511: PUSH
63512: LD_INT 2
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: LD_INT 3
63521: PUSH
63522: LD_INT 3
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: PUSH
63529: LD_INT 2
63531: PUSH
63532: LD_INT 3
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: PUSH
63539: LD_INT 4
63541: PUSH
63542: LD_INT 3
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: PUSH
63549: LD_INT 4
63551: PUSH
63552: LD_INT 4
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PUSH
63559: LD_INT 3
63561: PUSH
63562: LD_INT 4
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: PUSH
63569: LD_INT 5
63571: PUSH
63572: LD_INT 4
63574: PUSH
63575: EMPTY
63576: LIST
63577: LIST
63578: PUSH
63579: LD_INT 5
63581: PUSH
63582: LD_INT 5
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: PUSH
63589: LD_INT 4
63591: PUSH
63592: LD_INT 5
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PUSH
63599: LD_INT 6
63601: PUSH
63602: LD_INT 5
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: PUSH
63609: LD_INT 6
63611: PUSH
63612: LD_INT 6
63614: PUSH
63615: EMPTY
63616: LIST
63617: LIST
63618: PUSH
63619: LD_INT 5
63621: PUSH
63622: LD_INT 6
63624: PUSH
63625: EMPTY
63626: LIST
63627: LIST
63628: PUSH
63629: EMPTY
63630: LIST
63631: LIST
63632: LIST
63633: LIST
63634: LIST
63635: LIST
63636: LIST
63637: LIST
63638: LIST
63639: LIST
63640: LIST
63641: LIST
63642: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
63643: LD_ADDR_VAR 0 32
63647: PUSH
63648: LD_INT 1
63650: PUSH
63651: LD_INT 3
63653: PUSH
63654: EMPTY
63655: LIST
63656: LIST
63657: PUSH
63658: LD_INT 0
63660: PUSH
63661: LD_INT 3
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: PUSH
63668: LD_INT 1
63670: NEG
63671: PUSH
63672: LD_INT 2
63674: PUSH
63675: EMPTY
63676: LIST
63677: LIST
63678: PUSH
63679: LD_INT 1
63681: PUSH
63682: LD_INT 4
63684: PUSH
63685: EMPTY
63686: LIST
63687: LIST
63688: PUSH
63689: LD_INT 0
63691: PUSH
63692: LD_INT 4
63694: PUSH
63695: EMPTY
63696: LIST
63697: LIST
63698: PUSH
63699: LD_INT 1
63701: NEG
63702: PUSH
63703: LD_INT 3
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: PUSH
63710: LD_INT 1
63712: PUSH
63713: LD_INT 5
63715: PUSH
63716: EMPTY
63717: LIST
63718: LIST
63719: PUSH
63720: LD_INT 0
63722: PUSH
63723: LD_INT 5
63725: PUSH
63726: EMPTY
63727: LIST
63728: LIST
63729: PUSH
63730: LD_INT 1
63732: NEG
63733: PUSH
63734: LD_INT 4
63736: PUSH
63737: EMPTY
63738: LIST
63739: LIST
63740: PUSH
63741: LD_INT 1
63743: PUSH
63744: LD_INT 6
63746: PUSH
63747: EMPTY
63748: LIST
63749: LIST
63750: PUSH
63751: LD_INT 0
63753: PUSH
63754: LD_INT 6
63756: PUSH
63757: EMPTY
63758: LIST
63759: LIST
63760: PUSH
63761: LD_INT 1
63763: NEG
63764: PUSH
63765: LD_INT 5
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: PUSH
63772: EMPTY
63773: LIST
63774: LIST
63775: LIST
63776: LIST
63777: LIST
63778: LIST
63779: LIST
63780: LIST
63781: LIST
63782: LIST
63783: LIST
63784: LIST
63785: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
63786: LD_ADDR_VAR 0 33
63790: PUSH
63791: LD_INT 2
63793: NEG
63794: PUSH
63795: LD_INT 1
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: PUSH
63802: LD_INT 3
63804: NEG
63805: PUSH
63806: LD_INT 0
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: LD_INT 3
63815: NEG
63816: PUSH
63817: LD_INT 1
63819: NEG
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: PUSH
63825: LD_INT 3
63827: NEG
63828: PUSH
63829: LD_INT 1
63831: PUSH
63832: EMPTY
63833: LIST
63834: LIST
63835: PUSH
63836: LD_INT 4
63838: NEG
63839: PUSH
63840: LD_INT 0
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_INT 4
63849: NEG
63850: PUSH
63851: LD_INT 1
63853: NEG
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: PUSH
63859: LD_INT 4
63861: NEG
63862: PUSH
63863: LD_INT 1
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: PUSH
63870: LD_INT 5
63872: NEG
63873: PUSH
63874: LD_INT 0
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: PUSH
63881: LD_INT 5
63883: NEG
63884: PUSH
63885: LD_INT 1
63887: NEG
63888: PUSH
63889: EMPTY
63890: LIST
63891: LIST
63892: PUSH
63893: LD_INT 5
63895: NEG
63896: PUSH
63897: LD_INT 1
63899: PUSH
63900: EMPTY
63901: LIST
63902: LIST
63903: PUSH
63904: LD_INT 6
63906: NEG
63907: PUSH
63908: LD_INT 0
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: PUSH
63915: LD_INT 6
63917: NEG
63918: PUSH
63919: LD_INT 1
63921: NEG
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: PUSH
63927: EMPTY
63928: LIST
63929: LIST
63930: LIST
63931: LIST
63932: LIST
63933: LIST
63934: LIST
63935: LIST
63936: LIST
63937: LIST
63938: LIST
63939: LIST
63940: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
63941: LD_ADDR_VAR 0 34
63945: PUSH
63946: LD_INT 2
63948: NEG
63949: PUSH
63950: LD_INT 3
63952: NEG
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: PUSH
63958: LD_INT 3
63960: NEG
63961: PUSH
63962: LD_INT 2
63964: NEG
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: PUSH
63970: LD_INT 3
63972: NEG
63973: PUSH
63974: LD_INT 3
63976: NEG
63977: PUSH
63978: EMPTY
63979: LIST
63980: LIST
63981: PUSH
63982: LD_INT 3
63984: NEG
63985: PUSH
63986: LD_INT 4
63988: NEG
63989: PUSH
63990: EMPTY
63991: LIST
63992: LIST
63993: PUSH
63994: LD_INT 4
63996: NEG
63997: PUSH
63998: LD_INT 3
64000: NEG
64001: PUSH
64002: EMPTY
64003: LIST
64004: LIST
64005: PUSH
64006: LD_INT 4
64008: NEG
64009: PUSH
64010: LD_INT 4
64012: NEG
64013: PUSH
64014: EMPTY
64015: LIST
64016: LIST
64017: PUSH
64018: LD_INT 4
64020: NEG
64021: PUSH
64022: LD_INT 5
64024: NEG
64025: PUSH
64026: EMPTY
64027: LIST
64028: LIST
64029: PUSH
64030: LD_INT 5
64032: NEG
64033: PUSH
64034: LD_INT 4
64036: NEG
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: PUSH
64042: LD_INT 5
64044: NEG
64045: PUSH
64046: LD_INT 5
64048: NEG
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: PUSH
64054: LD_INT 5
64056: NEG
64057: PUSH
64058: LD_INT 6
64060: NEG
64061: PUSH
64062: EMPTY
64063: LIST
64064: LIST
64065: PUSH
64066: LD_INT 6
64068: NEG
64069: PUSH
64070: LD_INT 5
64072: NEG
64073: PUSH
64074: EMPTY
64075: LIST
64076: LIST
64077: PUSH
64078: LD_INT 6
64080: NEG
64081: PUSH
64082: LD_INT 6
64084: NEG
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: PUSH
64090: EMPTY
64091: LIST
64092: LIST
64093: LIST
64094: LIST
64095: LIST
64096: LIST
64097: LIST
64098: LIST
64099: LIST
64100: LIST
64101: LIST
64102: LIST
64103: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
64104: LD_ADDR_VAR 0 41
64108: PUSH
64109: LD_INT 0
64111: PUSH
64112: LD_INT 2
64114: NEG
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: PUSH
64120: LD_INT 1
64122: NEG
64123: PUSH
64124: LD_INT 3
64126: NEG
64127: PUSH
64128: EMPTY
64129: LIST
64130: LIST
64131: PUSH
64132: LD_INT 1
64134: PUSH
64135: LD_INT 2
64137: NEG
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: LIST
64147: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
64148: LD_ADDR_VAR 0 42
64152: PUSH
64153: LD_INT 2
64155: PUSH
64156: LD_INT 0
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: PUSH
64163: LD_INT 2
64165: PUSH
64166: LD_INT 1
64168: NEG
64169: PUSH
64170: EMPTY
64171: LIST
64172: LIST
64173: PUSH
64174: LD_INT 3
64176: PUSH
64177: LD_INT 1
64179: PUSH
64180: EMPTY
64181: LIST
64182: LIST
64183: PUSH
64184: EMPTY
64185: LIST
64186: LIST
64187: LIST
64188: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
64189: LD_ADDR_VAR 0 43
64193: PUSH
64194: LD_INT 2
64196: PUSH
64197: LD_INT 2
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: PUSH
64204: LD_INT 3
64206: PUSH
64207: LD_INT 2
64209: PUSH
64210: EMPTY
64211: LIST
64212: LIST
64213: PUSH
64214: LD_INT 2
64216: PUSH
64217: LD_INT 3
64219: PUSH
64220: EMPTY
64221: LIST
64222: LIST
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: LIST
64228: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
64229: LD_ADDR_VAR 0 44
64233: PUSH
64234: LD_INT 0
64236: PUSH
64237: LD_INT 2
64239: PUSH
64240: EMPTY
64241: LIST
64242: LIST
64243: PUSH
64244: LD_INT 1
64246: PUSH
64247: LD_INT 3
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: PUSH
64254: LD_INT 1
64256: NEG
64257: PUSH
64258: LD_INT 2
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: LIST
64269: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64270: LD_ADDR_VAR 0 45
64274: PUSH
64275: LD_INT 2
64277: NEG
64278: PUSH
64279: LD_INT 0
64281: PUSH
64282: EMPTY
64283: LIST
64284: LIST
64285: PUSH
64286: LD_INT 2
64288: NEG
64289: PUSH
64290: LD_INT 1
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PUSH
64297: LD_INT 3
64299: NEG
64300: PUSH
64301: LD_INT 1
64303: NEG
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: LIST
64313: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
64314: LD_ADDR_VAR 0 46
64318: PUSH
64319: LD_INT 2
64321: NEG
64322: PUSH
64323: LD_INT 2
64325: NEG
64326: PUSH
64327: EMPTY
64328: LIST
64329: LIST
64330: PUSH
64331: LD_INT 2
64333: NEG
64334: PUSH
64335: LD_INT 3
64337: NEG
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: PUSH
64343: LD_INT 3
64345: NEG
64346: PUSH
64347: LD_INT 2
64349: NEG
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: PUSH
64355: EMPTY
64356: LIST
64357: LIST
64358: LIST
64359: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
64360: LD_ADDR_VAR 0 47
64364: PUSH
64365: LD_INT 2
64367: NEG
64368: PUSH
64369: LD_INT 3
64371: NEG
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: PUSH
64377: LD_INT 1
64379: NEG
64380: PUSH
64381: LD_INT 3
64383: NEG
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
64393: LD_ADDR_VAR 0 48
64397: PUSH
64398: LD_INT 1
64400: PUSH
64401: LD_INT 2
64403: NEG
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: PUSH
64409: LD_INT 2
64411: PUSH
64412: LD_INT 1
64414: NEG
64415: PUSH
64416: EMPTY
64417: LIST
64418: LIST
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
64424: LD_ADDR_VAR 0 49
64428: PUSH
64429: LD_INT 3
64431: PUSH
64432: LD_INT 1
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: PUSH
64439: LD_INT 3
64441: PUSH
64442: LD_INT 2
64444: PUSH
64445: EMPTY
64446: LIST
64447: LIST
64448: PUSH
64449: EMPTY
64450: LIST
64451: LIST
64452: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
64453: LD_ADDR_VAR 0 50
64457: PUSH
64458: LD_INT 2
64460: PUSH
64461: LD_INT 3
64463: PUSH
64464: EMPTY
64465: LIST
64466: LIST
64467: PUSH
64468: LD_INT 1
64470: PUSH
64471: LD_INT 3
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
64482: LD_ADDR_VAR 0 51
64486: PUSH
64487: LD_INT 1
64489: NEG
64490: PUSH
64491: LD_INT 2
64493: PUSH
64494: EMPTY
64495: LIST
64496: LIST
64497: PUSH
64498: LD_INT 2
64500: NEG
64501: PUSH
64502: LD_INT 1
64504: PUSH
64505: EMPTY
64506: LIST
64507: LIST
64508: PUSH
64509: EMPTY
64510: LIST
64511: LIST
64512: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64513: LD_ADDR_VAR 0 52
64517: PUSH
64518: LD_INT 3
64520: NEG
64521: PUSH
64522: LD_INT 1
64524: NEG
64525: PUSH
64526: EMPTY
64527: LIST
64528: LIST
64529: PUSH
64530: LD_INT 3
64532: NEG
64533: PUSH
64534: LD_INT 2
64536: NEG
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: PUSH
64542: EMPTY
64543: LIST
64544: LIST
64545: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64546: LD_ADDR_VAR 0 53
64550: PUSH
64551: LD_INT 1
64553: NEG
64554: PUSH
64555: LD_INT 3
64557: NEG
64558: PUSH
64559: EMPTY
64560: LIST
64561: LIST
64562: PUSH
64563: LD_INT 0
64565: PUSH
64566: LD_INT 3
64568: NEG
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: PUSH
64574: LD_INT 1
64576: PUSH
64577: LD_INT 2
64579: NEG
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: LIST
64589: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64590: LD_ADDR_VAR 0 54
64594: PUSH
64595: LD_INT 2
64597: PUSH
64598: LD_INT 1
64600: NEG
64601: PUSH
64602: EMPTY
64603: LIST
64604: LIST
64605: PUSH
64606: LD_INT 3
64608: PUSH
64609: LD_INT 0
64611: PUSH
64612: EMPTY
64613: LIST
64614: LIST
64615: PUSH
64616: LD_INT 3
64618: PUSH
64619: LD_INT 1
64621: PUSH
64622: EMPTY
64623: LIST
64624: LIST
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: LIST
64630: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64631: LD_ADDR_VAR 0 55
64635: PUSH
64636: LD_INT 3
64638: PUSH
64639: LD_INT 2
64641: PUSH
64642: EMPTY
64643: LIST
64644: LIST
64645: PUSH
64646: LD_INT 3
64648: PUSH
64649: LD_INT 3
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: PUSH
64656: LD_INT 2
64658: PUSH
64659: LD_INT 3
64661: PUSH
64662: EMPTY
64663: LIST
64664: LIST
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: LIST
64670: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64671: LD_ADDR_VAR 0 56
64675: PUSH
64676: LD_INT 1
64678: PUSH
64679: LD_INT 3
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: PUSH
64686: LD_INT 0
64688: PUSH
64689: LD_INT 3
64691: PUSH
64692: EMPTY
64693: LIST
64694: LIST
64695: PUSH
64696: LD_INT 1
64698: NEG
64699: PUSH
64700: LD_INT 2
64702: PUSH
64703: EMPTY
64704: LIST
64705: LIST
64706: PUSH
64707: EMPTY
64708: LIST
64709: LIST
64710: LIST
64711: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64712: LD_ADDR_VAR 0 57
64716: PUSH
64717: LD_INT 2
64719: NEG
64720: PUSH
64721: LD_INT 1
64723: PUSH
64724: EMPTY
64725: LIST
64726: LIST
64727: PUSH
64728: LD_INT 3
64730: NEG
64731: PUSH
64732: LD_INT 0
64734: PUSH
64735: EMPTY
64736: LIST
64737: LIST
64738: PUSH
64739: LD_INT 3
64741: NEG
64742: PUSH
64743: LD_INT 1
64745: NEG
64746: PUSH
64747: EMPTY
64748: LIST
64749: LIST
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: LIST
64755: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64756: LD_ADDR_VAR 0 58
64760: PUSH
64761: LD_INT 2
64763: NEG
64764: PUSH
64765: LD_INT 3
64767: NEG
64768: PUSH
64769: EMPTY
64770: LIST
64771: LIST
64772: PUSH
64773: LD_INT 3
64775: NEG
64776: PUSH
64777: LD_INT 2
64779: NEG
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: PUSH
64785: LD_INT 3
64787: NEG
64788: PUSH
64789: LD_INT 3
64791: NEG
64792: PUSH
64793: EMPTY
64794: LIST
64795: LIST
64796: PUSH
64797: EMPTY
64798: LIST
64799: LIST
64800: LIST
64801: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
64802: LD_ADDR_VAR 0 59
64806: PUSH
64807: LD_INT 1
64809: NEG
64810: PUSH
64811: LD_INT 2
64813: NEG
64814: PUSH
64815: EMPTY
64816: LIST
64817: LIST
64818: PUSH
64819: LD_INT 0
64821: PUSH
64822: LD_INT 2
64824: NEG
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: PUSH
64830: LD_INT 1
64832: PUSH
64833: LD_INT 1
64835: NEG
64836: PUSH
64837: EMPTY
64838: LIST
64839: LIST
64840: PUSH
64841: EMPTY
64842: LIST
64843: LIST
64844: LIST
64845: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64846: LD_ADDR_VAR 0 60
64850: PUSH
64851: LD_INT 1
64853: PUSH
64854: LD_INT 1
64856: NEG
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: PUSH
64862: LD_INT 2
64864: PUSH
64865: LD_INT 0
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: PUSH
64872: LD_INT 2
64874: PUSH
64875: LD_INT 1
64877: PUSH
64878: EMPTY
64879: LIST
64880: LIST
64881: PUSH
64882: EMPTY
64883: LIST
64884: LIST
64885: LIST
64886: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64887: LD_ADDR_VAR 0 61
64891: PUSH
64892: LD_INT 2
64894: PUSH
64895: LD_INT 1
64897: PUSH
64898: EMPTY
64899: LIST
64900: LIST
64901: PUSH
64902: LD_INT 2
64904: PUSH
64905: LD_INT 2
64907: PUSH
64908: EMPTY
64909: LIST
64910: LIST
64911: PUSH
64912: LD_INT 1
64914: PUSH
64915: LD_INT 2
64917: PUSH
64918: EMPTY
64919: LIST
64920: LIST
64921: PUSH
64922: EMPTY
64923: LIST
64924: LIST
64925: LIST
64926: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64927: LD_ADDR_VAR 0 62
64931: PUSH
64932: LD_INT 1
64934: PUSH
64935: LD_INT 2
64937: PUSH
64938: EMPTY
64939: LIST
64940: LIST
64941: PUSH
64942: LD_INT 0
64944: PUSH
64945: LD_INT 2
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: PUSH
64952: LD_INT 1
64954: NEG
64955: PUSH
64956: LD_INT 1
64958: PUSH
64959: EMPTY
64960: LIST
64961: LIST
64962: PUSH
64963: EMPTY
64964: LIST
64965: LIST
64966: LIST
64967: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64968: LD_ADDR_VAR 0 63
64972: PUSH
64973: LD_INT 1
64975: NEG
64976: PUSH
64977: LD_INT 1
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: PUSH
64984: LD_INT 2
64986: NEG
64987: PUSH
64988: LD_INT 0
64990: PUSH
64991: EMPTY
64992: LIST
64993: LIST
64994: PUSH
64995: LD_INT 2
64997: NEG
64998: PUSH
64999: LD_INT 1
65001: NEG
65002: PUSH
65003: EMPTY
65004: LIST
65005: LIST
65006: PUSH
65007: EMPTY
65008: LIST
65009: LIST
65010: LIST
65011: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65012: LD_ADDR_VAR 0 64
65016: PUSH
65017: LD_INT 1
65019: NEG
65020: PUSH
65021: LD_INT 2
65023: NEG
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: PUSH
65029: LD_INT 2
65031: NEG
65032: PUSH
65033: LD_INT 1
65035: NEG
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: PUSH
65041: LD_INT 2
65043: NEG
65044: PUSH
65045: LD_INT 2
65047: NEG
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: PUSH
65053: EMPTY
65054: LIST
65055: LIST
65056: LIST
65057: ST_TO_ADDR
// end ; 2 :
65058: GO 68324
65060: LD_INT 2
65062: DOUBLE
65063: EQUAL
65064: IFTRUE 65068
65066: GO 68323
65068: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
65069: LD_ADDR_VAR 0 29
65073: PUSH
65074: LD_INT 4
65076: PUSH
65077: LD_INT 0
65079: PUSH
65080: EMPTY
65081: LIST
65082: LIST
65083: PUSH
65084: LD_INT 4
65086: PUSH
65087: LD_INT 1
65089: NEG
65090: PUSH
65091: EMPTY
65092: LIST
65093: LIST
65094: PUSH
65095: LD_INT 5
65097: PUSH
65098: LD_INT 0
65100: PUSH
65101: EMPTY
65102: LIST
65103: LIST
65104: PUSH
65105: LD_INT 5
65107: PUSH
65108: LD_INT 1
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: PUSH
65115: LD_INT 4
65117: PUSH
65118: LD_INT 1
65120: PUSH
65121: EMPTY
65122: LIST
65123: LIST
65124: PUSH
65125: LD_INT 3
65127: PUSH
65128: LD_INT 0
65130: PUSH
65131: EMPTY
65132: LIST
65133: LIST
65134: PUSH
65135: LD_INT 3
65137: PUSH
65138: LD_INT 1
65140: NEG
65141: PUSH
65142: EMPTY
65143: LIST
65144: LIST
65145: PUSH
65146: LD_INT 3
65148: PUSH
65149: LD_INT 2
65151: NEG
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: PUSH
65157: LD_INT 5
65159: PUSH
65160: LD_INT 2
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: PUSH
65167: LD_INT 3
65169: PUSH
65170: LD_INT 3
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: PUSH
65177: LD_INT 3
65179: PUSH
65180: LD_INT 2
65182: PUSH
65183: EMPTY
65184: LIST
65185: LIST
65186: PUSH
65187: LD_INT 4
65189: PUSH
65190: LD_INT 3
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: PUSH
65197: LD_INT 4
65199: PUSH
65200: LD_INT 4
65202: PUSH
65203: EMPTY
65204: LIST
65205: LIST
65206: PUSH
65207: LD_INT 3
65209: PUSH
65210: LD_INT 4
65212: PUSH
65213: EMPTY
65214: LIST
65215: LIST
65216: PUSH
65217: LD_INT 2
65219: PUSH
65220: LD_INT 3
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: PUSH
65227: LD_INT 2
65229: PUSH
65230: LD_INT 2
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: PUSH
65237: LD_INT 4
65239: PUSH
65240: LD_INT 2
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: PUSH
65247: LD_INT 2
65249: PUSH
65250: LD_INT 4
65252: PUSH
65253: EMPTY
65254: LIST
65255: LIST
65256: PUSH
65257: LD_INT 0
65259: PUSH
65260: LD_INT 4
65262: PUSH
65263: EMPTY
65264: LIST
65265: LIST
65266: PUSH
65267: LD_INT 0
65269: PUSH
65270: LD_INT 3
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: PUSH
65277: LD_INT 1
65279: PUSH
65280: LD_INT 4
65282: PUSH
65283: EMPTY
65284: LIST
65285: LIST
65286: PUSH
65287: LD_INT 1
65289: PUSH
65290: LD_INT 5
65292: PUSH
65293: EMPTY
65294: LIST
65295: LIST
65296: PUSH
65297: LD_INT 0
65299: PUSH
65300: LD_INT 5
65302: PUSH
65303: EMPTY
65304: LIST
65305: LIST
65306: PUSH
65307: LD_INT 1
65309: NEG
65310: PUSH
65311: LD_INT 4
65313: PUSH
65314: EMPTY
65315: LIST
65316: LIST
65317: PUSH
65318: LD_INT 1
65320: NEG
65321: PUSH
65322: LD_INT 3
65324: PUSH
65325: EMPTY
65326: LIST
65327: LIST
65328: PUSH
65329: LD_INT 2
65331: PUSH
65332: LD_INT 5
65334: PUSH
65335: EMPTY
65336: LIST
65337: LIST
65338: PUSH
65339: LD_INT 2
65341: NEG
65342: PUSH
65343: LD_INT 3
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: PUSH
65350: LD_INT 3
65352: NEG
65353: PUSH
65354: LD_INT 0
65356: PUSH
65357: EMPTY
65358: LIST
65359: LIST
65360: PUSH
65361: LD_INT 3
65363: NEG
65364: PUSH
65365: LD_INT 1
65367: NEG
65368: PUSH
65369: EMPTY
65370: LIST
65371: LIST
65372: PUSH
65373: LD_INT 2
65375: NEG
65376: PUSH
65377: LD_INT 0
65379: PUSH
65380: EMPTY
65381: LIST
65382: LIST
65383: PUSH
65384: LD_INT 2
65386: NEG
65387: PUSH
65388: LD_INT 1
65390: PUSH
65391: EMPTY
65392: LIST
65393: LIST
65394: PUSH
65395: LD_INT 3
65397: NEG
65398: PUSH
65399: LD_INT 1
65401: PUSH
65402: EMPTY
65403: LIST
65404: LIST
65405: PUSH
65406: LD_INT 4
65408: NEG
65409: PUSH
65410: LD_INT 0
65412: PUSH
65413: EMPTY
65414: LIST
65415: LIST
65416: PUSH
65417: LD_INT 4
65419: NEG
65420: PUSH
65421: LD_INT 1
65423: NEG
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: PUSH
65429: LD_INT 4
65431: NEG
65432: PUSH
65433: LD_INT 2
65435: NEG
65436: PUSH
65437: EMPTY
65438: LIST
65439: LIST
65440: PUSH
65441: LD_INT 2
65443: NEG
65444: PUSH
65445: LD_INT 2
65447: PUSH
65448: EMPTY
65449: LIST
65450: LIST
65451: PUSH
65452: LD_INT 4
65454: NEG
65455: PUSH
65456: LD_INT 4
65458: NEG
65459: PUSH
65460: EMPTY
65461: LIST
65462: LIST
65463: PUSH
65464: LD_INT 4
65466: NEG
65467: PUSH
65468: LD_INT 5
65470: NEG
65471: PUSH
65472: EMPTY
65473: LIST
65474: LIST
65475: PUSH
65476: LD_INT 3
65478: NEG
65479: PUSH
65480: LD_INT 4
65482: NEG
65483: PUSH
65484: EMPTY
65485: LIST
65486: LIST
65487: PUSH
65488: LD_INT 3
65490: NEG
65491: PUSH
65492: LD_INT 3
65494: NEG
65495: PUSH
65496: EMPTY
65497: LIST
65498: LIST
65499: PUSH
65500: LD_INT 4
65502: NEG
65503: PUSH
65504: LD_INT 3
65506: NEG
65507: PUSH
65508: EMPTY
65509: LIST
65510: LIST
65511: PUSH
65512: LD_INT 5
65514: NEG
65515: PUSH
65516: LD_INT 4
65518: NEG
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: PUSH
65524: LD_INT 5
65526: NEG
65527: PUSH
65528: LD_INT 5
65530: NEG
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: PUSH
65536: LD_INT 3
65538: NEG
65539: PUSH
65540: LD_INT 5
65542: NEG
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: PUSH
65548: LD_INT 5
65550: NEG
65551: PUSH
65552: LD_INT 3
65554: NEG
65555: PUSH
65556: EMPTY
65557: LIST
65558: LIST
65559: PUSH
65560: EMPTY
65561: LIST
65562: LIST
65563: LIST
65564: LIST
65565: LIST
65566: LIST
65567: LIST
65568: LIST
65569: LIST
65570: LIST
65571: LIST
65572: LIST
65573: LIST
65574: LIST
65575: LIST
65576: LIST
65577: LIST
65578: LIST
65579: LIST
65580: LIST
65581: LIST
65582: LIST
65583: LIST
65584: LIST
65585: LIST
65586: LIST
65587: LIST
65588: LIST
65589: LIST
65590: LIST
65591: LIST
65592: LIST
65593: LIST
65594: LIST
65595: LIST
65596: LIST
65597: LIST
65598: LIST
65599: LIST
65600: LIST
65601: LIST
65602: LIST
65603: LIST
65604: LIST
65605: LIST
65606: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
65607: LD_ADDR_VAR 0 30
65611: PUSH
65612: LD_INT 4
65614: PUSH
65615: LD_INT 4
65617: PUSH
65618: EMPTY
65619: LIST
65620: LIST
65621: PUSH
65622: LD_INT 4
65624: PUSH
65625: LD_INT 3
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: PUSH
65632: LD_INT 5
65634: PUSH
65635: LD_INT 4
65637: PUSH
65638: EMPTY
65639: LIST
65640: LIST
65641: PUSH
65642: LD_INT 5
65644: PUSH
65645: LD_INT 5
65647: PUSH
65648: EMPTY
65649: LIST
65650: LIST
65651: PUSH
65652: LD_INT 4
65654: PUSH
65655: LD_INT 5
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: PUSH
65662: LD_INT 3
65664: PUSH
65665: LD_INT 4
65667: PUSH
65668: EMPTY
65669: LIST
65670: LIST
65671: PUSH
65672: LD_INT 3
65674: PUSH
65675: LD_INT 3
65677: PUSH
65678: EMPTY
65679: LIST
65680: LIST
65681: PUSH
65682: LD_INT 5
65684: PUSH
65685: LD_INT 3
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: PUSH
65692: LD_INT 3
65694: PUSH
65695: LD_INT 5
65697: PUSH
65698: EMPTY
65699: LIST
65700: LIST
65701: PUSH
65702: LD_INT 0
65704: PUSH
65705: LD_INT 3
65707: PUSH
65708: EMPTY
65709: LIST
65710: LIST
65711: PUSH
65712: LD_INT 0
65714: PUSH
65715: LD_INT 2
65717: PUSH
65718: EMPTY
65719: LIST
65720: LIST
65721: PUSH
65722: LD_INT 1
65724: PUSH
65725: LD_INT 3
65727: PUSH
65728: EMPTY
65729: LIST
65730: LIST
65731: PUSH
65732: LD_INT 1
65734: PUSH
65735: LD_INT 4
65737: PUSH
65738: EMPTY
65739: LIST
65740: LIST
65741: PUSH
65742: LD_INT 0
65744: PUSH
65745: LD_INT 4
65747: PUSH
65748: EMPTY
65749: LIST
65750: LIST
65751: PUSH
65752: LD_INT 1
65754: NEG
65755: PUSH
65756: LD_INT 3
65758: PUSH
65759: EMPTY
65760: LIST
65761: LIST
65762: PUSH
65763: LD_INT 1
65765: NEG
65766: PUSH
65767: LD_INT 2
65769: PUSH
65770: EMPTY
65771: LIST
65772: LIST
65773: PUSH
65774: LD_INT 2
65776: PUSH
65777: LD_INT 4
65779: PUSH
65780: EMPTY
65781: LIST
65782: LIST
65783: PUSH
65784: LD_INT 2
65786: NEG
65787: PUSH
65788: LD_INT 2
65790: PUSH
65791: EMPTY
65792: LIST
65793: LIST
65794: PUSH
65795: LD_INT 4
65797: NEG
65798: PUSH
65799: LD_INT 0
65801: PUSH
65802: EMPTY
65803: LIST
65804: LIST
65805: PUSH
65806: LD_INT 4
65808: NEG
65809: PUSH
65810: LD_INT 1
65812: NEG
65813: PUSH
65814: EMPTY
65815: LIST
65816: LIST
65817: PUSH
65818: LD_INT 3
65820: NEG
65821: PUSH
65822: LD_INT 0
65824: PUSH
65825: EMPTY
65826: LIST
65827: LIST
65828: PUSH
65829: LD_INT 3
65831: NEG
65832: PUSH
65833: LD_INT 1
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: PUSH
65840: LD_INT 4
65842: NEG
65843: PUSH
65844: LD_INT 1
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: PUSH
65851: LD_INT 5
65853: NEG
65854: PUSH
65855: LD_INT 0
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: PUSH
65862: LD_INT 5
65864: NEG
65865: PUSH
65866: LD_INT 1
65868: NEG
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: PUSH
65874: LD_INT 5
65876: NEG
65877: PUSH
65878: LD_INT 2
65880: NEG
65881: PUSH
65882: EMPTY
65883: LIST
65884: LIST
65885: PUSH
65886: LD_INT 3
65888: NEG
65889: PUSH
65890: LD_INT 2
65892: PUSH
65893: EMPTY
65894: LIST
65895: LIST
65896: PUSH
65897: LD_INT 3
65899: NEG
65900: PUSH
65901: LD_INT 3
65903: NEG
65904: PUSH
65905: EMPTY
65906: LIST
65907: LIST
65908: PUSH
65909: LD_INT 3
65911: NEG
65912: PUSH
65913: LD_INT 4
65915: NEG
65916: PUSH
65917: EMPTY
65918: LIST
65919: LIST
65920: PUSH
65921: LD_INT 2
65923: NEG
65924: PUSH
65925: LD_INT 3
65927: NEG
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: PUSH
65933: LD_INT 2
65935: NEG
65936: PUSH
65937: LD_INT 2
65939: NEG
65940: PUSH
65941: EMPTY
65942: LIST
65943: LIST
65944: PUSH
65945: LD_INT 3
65947: NEG
65948: PUSH
65949: LD_INT 2
65951: NEG
65952: PUSH
65953: EMPTY
65954: LIST
65955: LIST
65956: PUSH
65957: LD_INT 4
65959: NEG
65960: PUSH
65961: LD_INT 3
65963: NEG
65964: PUSH
65965: EMPTY
65966: LIST
65967: LIST
65968: PUSH
65969: LD_INT 4
65971: NEG
65972: PUSH
65973: LD_INT 4
65975: NEG
65976: PUSH
65977: EMPTY
65978: LIST
65979: LIST
65980: PUSH
65981: LD_INT 2
65983: NEG
65984: PUSH
65985: LD_INT 4
65987: NEG
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: PUSH
65993: LD_INT 4
65995: NEG
65996: PUSH
65997: LD_INT 2
65999: NEG
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: PUSH
66005: LD_INT 0
66007: PUSH
66008: LD_INT 4
66010: NEG
66011: PUSH
66012: EMPTY
66013: LIST
66014: LIST
66015: PUSH
66016: LD_INT 0
66018: PUSH
66019: LD_INT 5
66021: NEG
66022: PUSH
66023: EMPTY
66024: LIST
66025: LIST
66026: PUSH
66027: LD_INT 1
66029: PUSH
66030: LD_INT 4
66032: NEG
66033: PUSH
66034: EMPTY
66035: LIST
66036: LIST
66037: PUSH
66038: LD_INT 1
66040: PUSH
66041: LD_INT 3
66043: NEG
66044: PUSH
66045: EMPTY
66046: LIST
66047: LIST
66048: PUSH
66049: LD_INT 0
66051: PUSH
66052: LD_INT 3
66054: NEG
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: PUSH
66060: LD_INT 1
66062: NEG
66063: PUSH
66064: LD_INT 4
66066: NEG
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: PUSH
66072: LD_INT 1
66074: NEG
66075: PUSH
66076: LD_INT 5
66078: NEG
66079: PUSH
66080: EMPTY
66081: LIST
66082: LIST
66083: PUSH
66084: LD_INT 2
66086: PUSH
66087: LD_INT 3
66089: NEG
66090: PUSH
66091: EMPTY
66092: LIST
66093: LIST
66094: PUSH
66095: LD_INT 2
66097: NEG
66098: PUSH
66099: LD_INT 5
66101: NEG
66102: PUSH
66103: EMPTY
66104: LIST
66105: LIST
66106: PUSH
66107: EMPTY
66108: LIST
66109: LIST
66110: LIST
66111: LIST
66112: LIST
66113: LIST
66114: LIST
66115: LIST
66116: LIST
66117: LIST
66118: LIST
66119: LIST
66120: LIST
66121: LIST
66122: LIST
66123: LIST
66124: LIST
66125: LIST
66126: LIST
66127: LIST
66128: LIST
66129: LIST
66130: LIST
66131: LIST
66132: LIST
66133: LIST
66134: LIST
66135: LIST
66136: LIST
66137: LIST
66138: LIST
66139: LIST
66140: LIST
66141: LIST
66142: LIST
66143: LIST
66144: LIST
66145: LIST
66146: LIST
66147: LIST
66148: LIST
66149: LIST
66150: LIST
66151: LIST
66152: LIST
66153: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
66154: LD_ADDR_VAR 0 31
66158: PUSH
66159: LD_INT 0
66161: PUSH
66162: LD_INT 4
66164: PUSH
66165: EMPTY
66166: LIST
66167: LIST
66168: PUSH
66169: LD_INT 0
66171: PUSH
66172: LD_INT 3
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: PUSH
66179: LD_INT 1
66181: PUSH
66182: LD_INT 4
66184: PUSH
66185: EMPTY
66186: LIST
66187: LIST
66188: PUSH
66189: LD_INT 1
66191: PUSH
66192: LD_INT 5
66194: PUSH
66195: EMPTY
66196: LIST
66197: LIST
66198: PUSH
66199: LD_INT 0
66201: PUSH
66202: LD_INT 5
66204: PUSH
66205: EMPTY
66206: LIST
66207: LIST
66208: PUSH
66209: LD_INT 1
66211: NEG
66212: PUSH
66213: LD_INT 4
66215: PUSH
66216: EMPTY
66217: LIST
66218: LIST
66219: PUSH
66220: LD_INT 1
66222: NEG
66223: PUSH
66224: LD_INT 3
66226: PUSH
66227: EMPTY
66228: LIST
66229: LIST
66230: PUSH
66231: LD_INT 2
66233: PUSH
66234: LD_INT 5
66236: PUSH
66237: EMPTY
66238: LIST
66239: LIST
66240: PUSH
66241: LD_INT 2
66243: NEG
66244: PUSH
66245: LD_INT 3
66247: PUSH
66248: EMPTY
66249: LIST
66250: LIST
66251: PUSH
66252: LD_INT 3
66254: NEG
66255: PUSH
66256: LD_INT 0
66258: PUSH
66259: EMPTY
66260: LIST
66261: LIST
66262: PUSH
66263: LD_INT 3
66265: NEG
66266: PUSH
66267: LD_INT 1
66269: NEG
66270: PUSH
66271: EMPTY
66272: LIST
66273: LIST
66274: PUSH
66275: LD_INT 2
66277: NEG
66278: PUSH
66279: LD_INT 0
66281: PUSH
66282: EMPTY
66283: LIST
66284: LIST
66285: PUSH
66286: LD_INT 2
66288: NEG
66289: PUSH
66290: LD_INT 1
66292: PUSH
66293: EMPTY
66294: LIST
66295: LIST
66296: PUSH
66297: LD_INT 3
66299: NEG
66300: PUSH
66301: LD_INT 1
66303: PUSH
66304: EMPTY
66305: LIST
66306: LIST
66307: PUSH
66308: LD_INT 4
66310: NEG
66311: PUSH
66312: LD_INT 0
66314: PUSH
66315: EMPTY
66316: LIST
66317: LIST
66318: PUSH
66319: LD_INT 4
66321: NEG
66322: PUSH
66323: LD_INT 1
66325: NEG
66326: PUSH
66327: EMPTY
66328: LIST
66329: LIST
66330: PUSH
66331: LD_INT 4
66333: NEG
66334: PUSH
66335: LD_INT 2
66337: NEG
66338: PUSH
66339: EMPTY
66340: LIST
66341: LIST
66342: PUSH
66343: LD_INT 2
66345: NEG
66346: PUSH
66347: LD_INT 2
66349: PUSH
66350: EMPTY
66351: LIST
66352: LIST
66353: PUSH
66354: LD_INT 4
66356: NEG
66357: PUSH
66358: LD_INT 4
66360: NEG
66361: PUSH
66362: EMPTY
66363: LIST
66364: LIST
66365: PUSH
66366: LD_INT 4
66368: NEG
66369: PUSH
66370: LD_INT 5
66372: NEG
66373: PUSH
66374: EMPTY
66375: LIST
66376: LIST
66377: PUSH
66378: LD_INT 3
66380: NEG
66381: PUSH
66382: LD_INT 4
66384: NEG
66385: PUSH
66386: EMPTY
66387: LIST
66388: LIST
66389: PUSH
66390: LD_INT 3
66392: NEG
66393: PUSH
66394: LD_INT 3
66396: NEG
66397: PUSH
66398: EMPTY
66399: LIST
66400: LIST
66401: PUSH
66402: LD_INT 4
66404: NEG
66405: PUSH
66406: LD_INT 3
66408: NEG
66409: PUSH
66410: EMPTY
66411: LIST
66412: LIST
66413: PUSH
66414: LD_INT 5
66416: NEG
66417: PUSH
66418: LD_INT 4
66420: NEG
66421: PUSH
66422: EMPTY
66423: LIST
66424: LIST
66425: PUSH
66426: LD_INT 5
66428: NEG
66429: PUSH
66430: LD_INT 5
66432: NEG
66433: PUSH
66434: EMPTY
66435: LIST
66436: LIST
66437: PUSH
66438: LD_INT 3
66440: NEG
66441: PUSH
66442: LD_INT 5
66444: NEG
66445: PUSH
66446: EMPTY
66447: LIST
66448: LIST
66449: PUSH
66450: LD_INT 5
66452: NEG
66453: PUSH
66454: LD_INT 3
66456: NEG
66457: PUSH
66458: EMPTY
66459: LIST
66460: LIST
66461: PUSH
66462: LD_INT 0
66464: PUSH
66465: LD_INT 3
66467: NEG
66468: PUSH
66469: EMPTY
66470: LIST
66471: LIST
66472: PUSH
66473: LD_INT 0
66475: PUSH
66476: LD_INT 4
66478: NEG
66479: PUSH
66480: EMPTY
66481: LIST
66482: LIST
66483: PUSH
66484: LD_INT 1
66486: PUSH
66487: LD_INT 3
66489: NEG
66490: PUSH
66491: EMPTY
66492: LIST
66493: LIST
66494: PUSH
66495: LD_INT 1
66497: PUSH
66498: LD_INT 2
66500: NEG
66501: PUSH
66502: EMPTY
66503: LIST
66504: LIST
66505: PUSH
66506: LD_INT 0
66508: PUSH
66509: LD_INT 2
66511: NEG
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: PUSH
66517: LD_INT 1
66519: NEG
66520: PUSH
66521: LD_INT 3
66523: NEG
66524: PUSH
66525: EMPTY
66526: LIST
66527: LIST
66528: PUSH
66529: LD_INT 1
66531: NEG
66532: PUSH
66533: LD_INT 4
66535: NEG
66536: PUSH
66537: EMPTY
66538: LIST
66539: LIST
66540: PUSH
66541: LD_INT 2
66543: PUSH
66544: LD_INT 2
66546: NEG
66547: PUSH
66548: EMPTY
66549: LIST
66550: LIST
66551: PUSH
66552: LD_INT 2
66554: NEG
66555: PUSH
66556: LD_INT 4
66558: NEG
66559: PUSH
66560: EMPTY
66561: LIST
66562: LIST
66563: PUSH
66564: LD_INT 4
66566: PUSH
66567: LD_INT 0
66569: PUSH
66570: EMPTY
66571: LIST
66572: LIST
66573: PUSH
66574: LD_INT 4
66576: PUSH
66577: LD_INT 1
66579: NEG
66580: PUSH
66581: EMPTY
66582: LIST
66583: LIST
66584: PUSH
66585: LD_INT 5
66587: PUSH
66588: LD_INT 0
66590: PUSH
66591: EMPTY
66592: LIST
66593: LIST
66594: PUSH
66595: LD_INT 5
66597: PUSH
66598: LD_INT 1
66600: PUSH
66601: EMPTY
66602: LIST
66603: LIST
66604: PUSH
66605: LD_INT 4
66607: PUSH
66608: LD_INT 1
66610: PUSH
66611: EMPTY
66612: LIST
66613: LIST
66614: PUSH
66615: LD_INT 3
66617: PUSH
66618: LD_INT 0
66620: PUSH
66621: EMPTY
66622: LIST
66623: LIST
66624: PUSH
66625: LD_INT 3
66627: PUSH
66628: LD_INT 1
66630: NEG
66631: PUSH
66632: EMPTY
66633: LIST
66634: LIST
66635: PUSH
66636: LD_INT 3
66638: PUSH
66639: LD_INT 2
66641: NEG
66642: PUSH
66643: EMPTY
66644: LIST
66645: LIST
66646: PUSH
66647: LD_INT 5
66649: PUSH
66650: LD_INT 2
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: PUSH
66657: EMPTY
66658: LIST
66659: LIST
66660: LIST
66661: LIST
66662: LIST
66663: LIST
66664: LIST
66665: LIST
66666: LIST
66667: LIST
66668: LIST
66669: LIST
66670: LIST
66671: LIST
66672: LIST
66673: LIST
66674: LIST
66675: LIST
66676: LIST
66677: LIST
66678: LIST
66679: LIST
66680: LIST
66681: LIST
66682: LIST
66683: LIST
66684: LIST
66685: LIST
66686: LIST
66687: LIST
66688: LIST
66689: LIST
66690: LIST
66691: LIST
66692: LIST
66693: LIST
66694: LIST
66695: LIST
66696: LIST
66697: LIST
66698: LIST
66699: LIST
66700: LIST
66701: LIST
66702: LIST
66703: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
66704: LD_ADDR_VAR 0 32
66708: PUSH
66709: LD_INT 4
66711: NEG
66712: PUSH
66713: LD_INT 0
66715: PUSH
66716: EMPTY
66717: LIST
66718: LIST
66719: PUSH
66720: LD_INT 4
66722: NEG
66723: PUSH
66724: LD_INT 1
66726: NEG
66727: PUSH
66728: EMPTY
66729: LIST
66730: LIST
66731: PUSH
66732: LD_INT 3
66734: NEG
66735: PUSH
66736: LD_INT 0
66738: PUSH
66739: EMPTY
66740: LIST
66741: LIST
66742: PUSH
66743: LD_INT 3
66745: NEG
66746: PUSH
66747: LD_INT 1
66749: PUSH
66750: EMPTY
66751: LIST
66752: LIST
66753: PUSH
66754: LD_INT 4
66756: NEG
66757: PUSH
66758: LD_INT 1
66760: PUSH
66761: EMPTY
66762: LIST
66763: LIST
66764: PUSH
66765: LD_INT 5
66767: NEG
66768: PUSH
66769: LD_INT 0
66771: PUSH
66772: EMPTY
66773: LIST
66774: LIST
66775: PUSH
66776: LD_INT 5
66778: NEG
66779: PUSH
66780: LD_INT 1
66782: NEG
66783: PUSH
66784: EMPTY
66785: LIST
66786: LIST
66787: PUSH
66788: LD_INT 5
66790: NEG
66791: PUSH
66792: LD_INT 2
66794: NEG
66795: PUSH
66796: EMPTY
66797: LIST
66798: LIST
66799: PUSH
66800: LD_INT 3
66802: NEG
66803: PUSH
66804: LD_INT 2
66806: PUSH
66807: EMPTY
66808: LIST
66809: LIST
66810: PUSH
66811: LD_INT 3
66813: NEG
66814: PUSH
66815: LD_INT 3
66817: NEG
66818: PUSH
66819: EMPTY
66820: LIST
66821: LIST
66822: PUSH
66823: LD_INT 3
66825: NEG
66826: PUSH
66827: LD_INT 4
66829: NEG
66830: PUSH
66831: EMPTY
66832: LIST
66833: LIST
66834: PUSH
66835: LD_INT 2
66837: NEG
66838: PUSH
66839: LD_INT 3
66841: NEG
66842: PUSH
66843: EMPTY
66844: LIST
66845: LIST
66846: PUSH
66847: LD_INT 2
66849: NEG
66850: PUSH
66851: LD_INT 2
66853: NEG
66854: PUSH
66855: EMPTY
66856: LIST
66857: LIST
66858: PUSH
66859: LD_INT 3
66861: NEG
66862: PUSH
66863: LD_INT 2
66865: NEG
66866: PUSH
66867: EMPTY
66868: LIST
66869: LIST
66870: PUSH
66871: LD_INT 4
66873: NEG
66874: PUSH
66875: LD_INT 3
66877: NEG
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: PUSH
66883: LD_INT 4
66885: NEG
66886: PUSH
66887: LD_INT 4
66889: NEG
66890: PUSH
66891: EMPTY
66892: LIST
66893: LIST
66894: PUSH
66895: LD_INT 2
66897: NEG
66898: PUSH
66899: LD_INT 4
66901: NEG
66902: PUSH
66903: EMPTY
66904: LIST
66905: LIST
66906: PUSH
66907: LD_INT 4
66909: NEG
66910: PUSH
66911: LD_INT 2
66913: NEG
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: PUSH
66919: LD_INT 0
66921: PUSH
66922: LD_INT 4
66924: NEG
66925: PUSH
66926: EMPTY
66927: LIST
66928: LIST
66929: PUSH
66930: LD_INT 0
66932: PUSH
66933: LD_INT 5
66935: NEG
66936: PUSH
66937: EMPTY
66938: LIST
66939: LIST
66940: PUSH
66941: LD_INT 1
66943: PUSH
66944: LD_INT 4
66946: NEG
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: PUSH
66952: LD_INT 1
66954: PUSH
66955: LD_INT 3
66957: NEG
66958: PUSH
66959: EMPTY
66960: LIST
66961: LIST
66962: PUSH
66963: LD_INT 0
66965: PUSH
66966: LD_INT 3
66968: NEG
66969: PUSH
66970: EMPTY
66971: LIST
66972: LIST
66973: PUSH
66974: LD_INT 1
66976: NEG
66977: PUSH
66978: LD_INT 4
66980: NEG
66981: PUSH
66982: EMPTY
66983: LIST
66984: LIST
66985: PUSH
66986: LD_INT 1
66988: NEG
66989: PUSH
66990: LD_INT 5
66992: NEG
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: PUSH
66998: LD_INT 2
67000: PUSH
67001: LD_INT 3
67003: NEG
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: PUSH
67009: LD_INT 2
67011: NEG
67012: PUSH
67013: LD_INT 5
67015: NEG
67016: PUSH
67017: EMPTY
67018: LIST
67019: LIST
67020: PUSH
67021: LD_INT 3
67023: PUSH
67024: LD_INT 0
67026: PUSH
67027: EMPTY
67028: LIST
67029: LIST
67030: PUSH
67031: LD_INT 3
67033: PUSH
67034: LD_INT 1
67036: NEG
67037: PUSH
67038: EMPTY
67039: LIST
67040: LIST
67041: PUSH
67042: LD_INT 4
67044: PUSH
67045: LD_INT 0
67047: PUSH
67048: EMPTY
67049: LIST
67050: LIST
67051: PUSH
67052: LD_INT 4
67054: PUSH
67055: LD_INT 1
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: PUSH
67062: LD_INT 3
67064: PUSH
67065: LD_INT 1
67067: PUSH
67068: EMPTY
67069: LIST
67070: LIST
67071: PUSH
67072: LD_INT 2
67074: PUSH
67075: LD_INT 0
67077: PUSH
67078: EMPTY
67079: LIST
67080: LIST
67081: PUSH
67082: LD_INT 2
67084: PUSH
67085: LD_INT 1
67087: NEG
67088: PUSH
67089: EMPTY
67090: LIST
67091: LIST
67092: PUSH
67093: LD_INT 2
67095: PUSH
67096: LD_INT 2
67098: NEG
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: PUSH
67104: LD_INT 4
67106: PUSH
67107: LD_INT 2
67109: PUSH
67110: EMPTY
67111: LIST
67112: LIST
67113: PUSH
67114: LD_INT 4
67116: PUSH
67117: LD_INT 4
67119: PUSH
67120: EMPTY
67121: LIST
67122: LIST
67123: PUSH
67124: LD_INT 4
67126: PUSH
67127: LD_INT 3
67129: PUSH
67130: EMPTY
67131: LIST
67132: LIST
67133: PUSH
67134: LD_INT 5
67136: PUSH
67137: LD_INT 4
67139: PUSH
67140: EMPTY
67141: LIST
67142: LIST
67143: PUSH
67144: LD_INT 5
67146: PUSH
67147: LD_INT 5
67149: PUSH
67150: EMPTY
67151: LIST
67152: LIST
67153: PUSH
67154: LD_INT 4
67156: PUSH
67157: LD_INT 5
67159: PUSH
67160: EMPTY
67161: LIST
67162: LIST
67163: PUSH
67164: LD_INT 3
67166: PUSH
67167: LD_INT 4
67169: PUSH
67170: EMPTY
67171: LIST
67172: LIST
67173: PUSH
67174: LD_INT 3
67176: PUSH
67177: LD_INT 3
67179: PUSH
67180: EMPTY
67181: LIST
67182: LIST
67183: PUSH
67184: LD_INT 5
67186: PUSH
67187: LD_INT 3
67189: PUSH
67190: EMPTY
67191: LIST
67192: LIST
67193: PUSH
67194: LD_INT 3
67196: PUSH
67197: LD_INT 5
67199: PUSH
67200: EMPTY
67201: LIST
67202: LIST
67203: PUSH
67204: EMPTY
67205: LIST
67206: LIST
67207: LIST
67208: LIST
67209: LIST
67210: LIST
67211: LIST
67212: LIST
67213: LIST
67214: LIST
67215: LIST
67216: LIST
67217: LIST
67218: LIST
67219: LIST
67220: LIST
67221: LIST
67222: LIST
67223: LIST
67224: LIST
67225: LIST
67226: LIST
67227: LIST
67228: LIST
67229: LIST
67230: LIST
67231: LIST
67232: LIST
67233: LIST
67234: LIST
67235: LIST
67236: LIST
67237: LIST
67238: LIST
67239: LIST
67240: LIST
67241: LIST
67242: LIST
67243: LIST
67244: LIST
67245: LIST
67246: LIST
67247: LIST
67248: LIST
67249: LIST
67250: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
67251: LD_ADDR_VAR 0 33
67255: PUSH
67256: LD_INT 4
67258: NEG
67259: PUSH
67260: LD_INT 4
67262: NEG
67263: PUSH
67264: EMPTY
67265: LIST
67266: LIST
67267: PUSH
67268: LD_INT 4
67270: NEG
67271: PUSH
67272: LD_INT 5
67274: NEG
67275: PUSH
67276: EMPTY
67277: LIST
67278: LIST
67279: PUSH
67280: LD_INT 3
67282: NEG
67283: PUSH
67284: LD_INT 4
67286: NEG
67287: PUSH
67288: EMPTY
67289: LIST
67290: LIST
67291: PUSH
67292: LD_INT 3
67294: NEG
67295: PUSH
67296: LD_INT 3
67298: NEG
67299: PUSH
67300: EMPTY
67301: LIST
67302: LIST
67303: PUSH
67304: LD_INT 4
67306: NEG
67307: PUSH
67308: LD_INT 3
67310: NEG
67311: PUSH
67312: EMPTY
67313: LIST
67314: LIST
67315: PUSH
67316: LD_INT 5
67318: NEG
67319: PUSH
67320: LD_INT 4
67322: NEG
67323: PUSH
67324: EMPTY
67325: LIST
67326: LIST
67327: PUSH
67328: LD_INT 5
67330: NEG
67331: PUSH
67332: LD_INT 5
67334: NEG
67335: PUSH
67336: EMPTY
67337: LIST
67338: LIST
67339: PUSH
67340: LD_INT 3
67342: NEG
67343: PUSH
67344: LD_INT 5
67346: NEG
67347: PUSH
67348: EMPTY
67349: LIST
67350: LIST
67351: PUSH
67352: LD_INT 5
67354: NEG
67355: PUSH
67356: LD_INT 3
67358: NEG
67359: PUSH
67360: EMPTY
67361: LIST
67362: LIST
67363: PUSH
67364: LD_INT 0
67366: PUSH
67367: LD_INT 3
67369: NEG
67370: PUSH
67371: EMPTY
67372: LIST
67373: LIST
67374: PUSH
67375: LD_INT 0
67377: PUSH
67378: LD_INT 4
67380: NEG
67381: PUSH
67382: EMPTY
67383: LIST
67384: LIST
67385: PUSH
67386: LD_INT 1
67388: PUSH
67389: LD_INT 3
67391: NEG
67392: PUSH
67393: EMPTY
67394: LIST
67395: LIST
67396: PUSH
67397: LD_INT 1
67399: PUSH
67400: LD_INT 2
67402: NEG
67403: PUSH
67404: EMPTY
67405: LIST
67406: LIST
67407: PUSH
67408: LD_INT 0
67410: PUSH
67411: LD_INT 2
67413: NEG
67414: PUSH
67415: EMPTY
67416: LIST
67417: LIST
67418: PUSH
67419: LD_INT 1
67421: NEG
67422: PUSH
67423: LD_INT 3
67425: NEG
67426: PUSH
67427: EMPTY
67428: LIST
67429: LIST
67430: PUSH
67431: LD_INT 1
67433: NEG
67434: PUSH
67435: LD_INT 4
67437: NEG
67438: PUSH
67439: EMPTY
67440: LIST
67441: LIST
67442: PUSH
67443: LD_INT 2
67445: PUSH
67446: LD_INT 2
67448: NEG
67449: PUSH
67450: EMPTY
67451: LIST
67452: LIST
67453: PUSH
67454: LD_INT 2
67456: NEG
67457: PUSH
67458: LD_INT 4
67460: NEG
67461: PUSH
67462: EMPTY
67463: LIST
67464: LIST
67465: PUSH
67466: LD_INT 4
67468: PUSH
67469: LD_INT 0
67471: PUSH
67472: EMPTY
67473: LIST
67474: LIST
67475: PUSH
67476: LD_INT 4
67478: PUSH
67479: LD_INT 1
67481: NEG
67482: PUSH
67483: EMPTY
67484: LIST
67485: LIST
67486: PUSH
67487: LD_INT 5
67489: PUSH
67490: LD_INT 0
67492: PUSH
67493: EMPTY
67494: LIST
67495: LIST
67496: PUSH
67497: LD_INT 5
67499: PUSH
67500: LD_INT 1
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: PUSH
67507: LD_INT 4
67509: PUSH
67510: LD_INT 1
67512: PUSH
67513: EMPTY
67514: LIST
67515: LIST
67516: PUSH
67517: LD_INT 3
67519: PUSH
67520: LD_INT 0
67522: PUSH
67523: EMPTY
67524: LIST
67525: LIST
67526: PUSH
67527: LD_INT 3
67529: PUSH
67530: LD_INT 1
67532: NEG
67533: PUSH
67534: EMPTY
67535: LIST
67536: LIST
67537: PUSH
67538: LD_INT 3
67540: PUSH
67541: LD_INT 2
67543: NEG
67544: PUSH
67545: EMPTY
67546: LIST
67547: LIST
67548: PUSH
67549: LD_INT 5
67551: PUSH
67552: LD_INT 2
67554: PUSH
67555: EMPTY
67556: LIST
67557: LIST
67558: PUSH
67559: LD_INT 3
67561: PUSH
67562: LD_INT 3
67564: PUSH
67565: EMPTY
67566: LIST
67567: LIST
67568: PUSH
67569: LD_INT 3
67571: PUSH
67572: LD_INT 2
67574: PUSH
67575: EMPTY
67576: LIST
67577: LIST
67578: PUSH
67579: LD_INT 4
67581: PUSH
67582: LD_INT 3
67584: PUSH
67585: EMPTY
67586: LIST
67587: LIST
67588: PUSH
67589: LD_INT 4
67591: PUSH
67592: LD_INT 4
67594: PUSH
67595: EMPTY
67596: LIST
67597: LIST
67598: PUSH
67599: LD_INT 3
67601: PUSH
67602: LD_INT 4
67604: PUSH
67605: EMPTY
67606: LIST
67607: LIST
67608: PUSH
67609: LD_INT 2
67611: PUSH
67612: LD_INT 3
67614: PUSH
67615: EMPTY
67616: LIST
67617: LIST
67618: PUSH
67619: LD_INT 2
67621: PUSH
67622: LD_INT 2
67624: PUSH
67625: EMPTY
67626: LIST
67627: LIST
67628: PUSH
67629: LD_INT 4
67631: PUSH
67632: LD_INT 2
67634: PUSH
67635: EMPTY
67636: LIST
67637: LIST
67638: PUSH
67639: LD_INT 2
67641: PUSH
67642: LD_INT 4
67644: PUSH
67645: EMPTY
67646: LIST
67647: LIST
67648: PUSH
67649: LD_INT 0
67651: PUSH
67652: LD_INT 4
67654: PUSH
67655: EMPTY
67656: LIST
67657: LIST
67658: PUSH
67659: LD_INT 0
67661: PUSH
67662: LD_INT 3
67664: PUSH
67665: EMPTY
67666: LIST
67667: LIST
67668: PUSH
67669: LD_INT 1
67671: PUSH
67672: LD_INT 4
67674: PUSH
67675: EMPTY
67676: LIST
67677: LIST
67678: PUSH
67679: LD_INT 1
67681: PUSH
67682: LD_INT 5
67684: PUSH
67685: EMPTY
67686: LIST
67687: LIST
67688: PUSH
67689: LD_INT 0
67691: PUSH
67692: LD_INT 5
67694: PUSH
67695: EMPTY
67696: LIST
67697: LIST
67698: PUSH
67699: LD_INT 1
67701: NEG
67702: PUSH
67703: LD_INT 4
67705: PUSH
67706: EMPTY
67707: LIST
67708: LIST
67709: PUSH
67710: LD_INT 1
67712: NEG
67713: PUSH
67714: LD_INT 3
67716: PUSH
67717: EMPTY
67718: LIST
67719: LIST
67720: PUSH
67721: LD_INT 2
67723: PUSH
67724: LD_INT 5
67726: PUSH
67727: EMPTY
67728: LIST
67729: LIST
67730: PUSH
67731: LD_INT 2
67733: NEG
67734: PUSH
67735: LD_INT 3
67737: PUSH
67738: EMPTY
67739: LIST
67740: LIST
67741: PUSH
67742: EMPTY
67743: LIST
67744: LIST
67745: LIST
67746: LIST
67747: LIST
67748: LIST
67749: LIST
67750: LIST
67751: LIST
67752: LIST
67753: LIST
67754: LIST
67755: LIST
67756: LIST
67757: LIST
67758: LIST
67759: LIST
67760: LIST
67761: LIST
67762: LIST
67763: LIST
67764: LIST
67765: LIST
67766: LIST
67767: LIST
67768: LIST
67769: LIST
67770: LIST
67771: LIST
67772: LIST
67773: LIST
67774: LIST
67775: LIST
67776: LIST
67777: LIST
67778: LIST
67779: LIST
67780: LIST
67781: LIST
67782: LIST
67783: LIST
67784: LIST
67785: LIST
67786: LIST
67787: LIST
67788: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
67789: LD_ADDR_VAR 0 34
67793: PUSH
67794: LD_INT 0
67796: PUSH
67797: LD_INT 4
67799: NEG
67800: PUSH
67801: EMPTY
67802: LIST
67803: LIST
67804: PUSH
67805: LD_INT 0
67807: PUSH
67808: LD_INT 5
67810: NEG
67811: PUSH
67812: EMPTY
67813: LIST
67814: LIST
67815: PUSH
67816: LD_INT 1
67818: PUSH
67819: LD_INT 4
67821: NEG
67822: PUSH
67823: EMPTY
67824: LIST
67825: LIST
67826: PUSH
67827: LD_INT 1
67829: PUSH
67830: LD_INT 3
67832: NEG
67833: PUSH
67834: EMPTY
67835: LIST
67836: LIST
67837: PUSH
67838: LD_INT 0
67840: PUSH
67841: LD_INT 3
67843: NEG
67844: PUSH
67845: EMPTY
67846: LIST
67847: LIST
67848: PUSH
67849: LD_INT 1
67851: NEG
67852: PUSH
67853: LD_INT 4
67855: NEG
67856: PUSH
67857: EMPTY
67858: LIST
67859: LIST
67860: PUSH
67861: LD_INT 1
67863: NEG
67864: PUSH
67865: LD_INT 5
67867: NEG
67868: PUSH
67869: EMPTY
67870: LIST
67871: LIST
67872: PUSH
67873: LD_INT 2
67875: PUSH
67876: LD_INT 3
67878: NEG
67879: PUSH
67880: EMPTY
67881: LIST
67882: LIST
67883: PUSH
67884: LD_INT 2
67886: NEG
67887: PUSH
67888: LD_INT 5
67890: NEG
67891: PUSH
67892: EMPTY
67893: LIST
67894: LIST
67895: PUSH
67896: LD_INT 3
67898: PUSH
67899: LD_INT 0
67901: PUSH
67902: EMPTY
67903: LIST
67904: LIST
67905: PUSH
67906: LD_INT 3
67908: PUSH
67909: LD_INT 1
67911: NEG
67912: PUSH
67913: EMPTY
67914: LIST
67915: LIST
67916: PUSH
67917: LD_INT 4
67919: PUSH
67920: LD_INT 0
67922: PUSH
67923: EMPTY
67924: LIST
67925: LIST
67926: PUSH
67927: LD_INT 4
67929: PUSH
67930: LD_INT 1
67932: PUSH
67933: EMPTY
67934: LIST
67935: LIST
67936: PUSH
67937: LD_INT 3
67939: PUSH
67940: LD_INT 1
67942: PUSH
67943: EMPTY
67944: LIST
67945: LIST
67946: PUSH
67947: LD_INT 2
67949: PUSH
67950: LD_INT 0
67952: PUSH
67953: EMPTY
67954: LIST
67955: LIST
67956: PUSH
67957: LD_INT 2
67959: PUSH
67960: LD_INT 1
67962: NEG
67963: PUSH
67964: EMPTY
67965: LIST
67966: LIST
67967: PUSH
67968: LD_INT 2
67970: PUSH
67971: LD_INT 2
67973: NEG
67974: PUSH
67975: EMPTY
67976: LIST
67977: LIST
67978: PUSH
67979: LD_INT 4
67981: PUSH
67982: LD_INT 2
67984: PUSH
67985: EMPTY
67986: LIST
67987: LIST
67988: PUSH
67989: LD_INT 4
67991: PUSH
67992: LD_INT 4
67994: PUSH
67995: EMPTY
67996: LIST
67997: LIST
67998: PUSH
67999: LD_INT 4
68001: PUSH
68002: LD_INT 3
68004: PUSH
68005: EMPTY
68006: LIST
68007: LIST
68008: PUSH
68009: LD_INT 5
68011: PUSH
68012: LD_INT 4
68014: PUSH
68015: EMPTY
68016: LIST
68017: LIST
68018: PUSH
68019: LD_INT 5
68021: PUSH
68022: LD_INT 5
68024: PUSH
68025: EMPTY
68026: LIST
68027: LIST
68028: PUSH
68029: LD_INT 4
68031: PUSH
68032: LD_INT 5
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: PUSH
68039: LD_INT 3
68041: PUSH
68042: LD_INT 4
68044: PUSH
68045: EMPTY
68046: LIST
68047: LIST
68048: PUSH
68049: LD_INT 3
68051: PUSH
68052: LD_INT 3
68054: PUSH
68055: EMPTY
68056: LIST
68057: LIST
68058: PUSH
68059: LD_INT 5
68061: PUSH
68062: LD_INT 3
68064: PUSH
68065: EMPTY
68066: LIST
68067: LIST
68068: PUSH
68069: LD_INT 3
68071: PUSH
68072: LD_INT 5
68074: PUSH
68075: EMPTY
68076: LIST
68077: LIST
68078: PUSH
68079: LD_INT 0
68081: PUSH
68082: LD_INT 3
68084: PUSH
68085: EMPTY
68086: LIST
68087: LIST
68088: PUSH
68089: LD_INT 0
68091: PUSH
68092: LD_INT 2
68094: PUSH
68095: EMPTY
68096: LIST
68097: LIST
68098: PUSH
68099: LD_INT 1
68101: PUSH
68102: LD_INT 3
68104: PUSH
68105: EMPTY
68106: LIST
68107: LIST
68108: PUSH
68109: LD_INT 1
68111: PUSH
68112: LD_INT 4
68114: PUSH
68115: EMPTY
68116: LIST
68117: LIST
68118: PUSH
68119: LD_INT 0
68121: PUSH
68122: LD_INT 4
68124: PUSH
68125: EMPTY
68126: LIST
68127: LIST
68128: PUSH
68129: LD_INT 1
68131: NEG
68132: PUSH
68133: LD_INT 3
68135: PUSH
68136: EMPTY
68137: LIST
68138: LIST
68139: PUSH
68140: LD_INT 1
68142: NEG
68143: PUSH
68144: LD_INT 2
68146: PUSH
68147: EMPTY
68148: LIST
68149: LIST
68150: PUSH
68151: LD_INT 2
68153: PUSH
68154: LD_INT 4
68156: PUSH
68157: EMPTY
68158: LIST
68159: LIST
68160: PUSH
68161: LD_INT 2
68163: NEG
68164: PUSH
68165: LD_INT 2
68167: PUSH
68168: EMPTY
68169: LIST
68170: LIST
68171: PUSH
68172: LD_INT 4
68174: NEG
68175: PUSH
68176: LD_INT 0
68178: PUSH
68179: EMPTY
68180: LIST
68181: LIST
68182: PUSH
68183: LD_INT 4
68185: NEG
68186: PUSH
68187: LD_INT 1
68189: NEG
68190: PUSH
68191: EMPTY
68192: LIST
68193: LIST
68194: PUSH
68195: LD_INT 3
68197: NEG
68198: PUSH
68199: LD_INT 0
68201: PUSH
68202: EMPTY
68203: LIST
68204: LIST
68205: PUSH
68206: LD_INT 3
68208: NEG
68209: PUSH
68210: LD_INT 1
68212: PUSH
68213: EMPTY
68214: LIST
68215: LIST
68216: PUSH
68217: LD_INT 4
68219: NEG
68220: PUSH
68221: LD_INT 1
68223: PUSH
68224: EMPTY
68225: LIST
68226: LIST
68227: PUSH
68228: LD_INT 5
68230: NEG
68231: PUSH
68232: LD_INT 0
68234: PUSH
68235: EMPTY
68236: LIST
68237: LIST
68238: PUSH
68239: LD_INT 5
68241: NEG
68242: PUSH
68243: LD_INT 1
68245: NEG
68246: PUSH
68247: EMPTY
68248: LIST
68249: LIST
68250: PUSH
68251: LD_INT 5
68253: NEG
68254: PUSH
68255: LD_INT 2
68257: NEG
68258: PUSH
68259: EMPTY
68260: LIST
68261: LIST
68262: PUSH
68263: LD_INT 3
68265: NEG
68266: PUSH
68267: LD_INT 2
68269: PUSH
68270: EMPTY
68271: LIST
68272: LIST
68273: PUSH
68274: EMPTY
68275: LIST
68276: LIST
68277: LIST
68278: LIST
68279: LIST
68280: LIST
68281: LIST
68282: LIST
68283: LIST
68284: LIST
68285: LIST
68286: LIST
68287: LIST
68288: LIST
68289: LIST
68290: LIST
68291: LIST
68292: LIST
68293: LIST
68294: LIST
68295: LIST
68296: LIST
68297: LIST
68298: LIST
68299: LIST
68300: LIST
68301: LIST
68302: LIST
68303: LIST
68304: LIST
68305: LIST
68306: LIST
68307: LIST
68308: LIST
68309: LIST
68310: LIST
68311: LIST
68312: LIST
68313: LIST
68314: LIST
68315: LIST
68316: LIST
68317: LIST
68318: LIST
68319: LIST
68320: ST_TO_ADDR
// end ; end ;
68321: GO 68324
68323: POP
// case btype of b_depot , b_warehouse :
68324: LD_VAR 0 1
68328: PUSH
68329: LD_INT 0
68331: DOUBLE
68332: EQUAL
68333: IFTRUE 68343
68335: LD_INT 1
68337: DOUBLE
68338: EQUAL
68339: IFTRUE 68343
68341: GO 68544
68343: POP
// case nation of nation_american :
68344: LD_VAR 0 5
68348: PUSH
68349: LD_INT 1
68351: DOUBLE
68352: EQUAL
68353: IFTRUE 68357
68355: GO 68413
68357: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
68358: LD_ADDR_VAR 0 9
68362: PUSH
68363: LD_VAR 0 11
68367: PUSH
68368: LD_VAR 0 12
68372: PUSH
68373: LD_VAR 0 13
68377: PUSH
68378: LD_VAR 0 14
68382: PUSH
68383: LD_VAR 0 15
68387: PUSH
68388: LD_VAR 0 16
68392: PUSH
68393: EMPTY
68394: LIST
68395: LIST
68396: LIST
68397: LIST
68398: LIST
68399: LIST
68400: PUSH
68401: LD_VAR 0 4
68405: PUSH
68406: LD_INT 1
68408: PLUS
68409: ARRAY
68410: ST_TO_ADDR
68411: GO 68542
68413: LD_INT 2
68415: DOUBLE
68416: EQUAL
68417: IFTRUE 68421
68419: GO 68477
68421: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
68422: LD_ADDR_VAR 0 9
68426: PUSH
68427: LD_VAR 0 17
68431: PUSH
68432: LD_VAR 0 18
68436: PUSH
68437: LD_VAR 0 19
68441: PUSH
68442: LD_VAR 0 20
68446: PUSH
68447: LD_VAR 0 21
68451: PUSH
68452: LD_VAR 0 22
68456: PUSH
68457: EMPTY
68458: LIST
68459: LIST
68460: LIST
68461: LIST
68462: LIST
68463: LIST
68464: PUSH
68465: LD_VAR 0 4
68469: PUSH
68470: LD_INT 1
68472: PLUS
68473: ARRAY
68474: ST_TO_ADDR
68475: GO 68542
68477: LD_INT 3
68479: DOUBLE
68480: EQUAL
68481: IFTRUE 68485
68483: GO 68541
68485: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
68486: LD_ADDR_VAR 0 9
68490: PUSH
68491: LD_VAR 0 23
68495: PUSH
68496: LD_VAR 0 24
68500: PUSH
68501: LD_VAR 0 25
68505: PUSH
68506: LD_VAR 0 26
68510: PUSH
68511: LD_VAR 0 27
68515: PUSH
68516: LD_VAR 0 28
68520: PUSH
68521: EMPTY
68522: LIST
68523: LIST
68524: LIST
68525: LIST
68526: LIST
68527: LIST
68528: PUSH
68529: LD_VAR 0 4
68533: PUSH
68534: LD_INT 1
68536: PLUS
68537: ARRAY
68538: ST_TO_ADDR
68539: GO 68542
68541: POP
68542: GO 69097
68544: LD_INT 2
68546: DOUBLE
68547: EQUAL
68548: IFTRUE 68558
68550: LD_INT 3
68552: DOUBLE
68553: EQUAL
68554: IFTRUE 68558
68556: GO 68614
68558: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
68559: LD_ADDR_VAR 0 9
68563: PUSH
68564: LD_VAR 0 29
68568: PUSH
68569: LD_VAR 0 30
68573: PUSH
68574: LD_VAR 0 31
68578: PUSH
68579: LD_VAR 0 32
68583: PUSH
68584: LD_VAR 0 33
68588: PUSH
68589: LD_VAR 0 34
68593: PUSH
68594: EMPTY
68595: LIST
68596: LIST
68597: LIST
68598: LIST
68599: LIST
68600: LIST
68601: PUSH
68602: LD_VAR 0 4
68606: PUSH
68607: LD_INT 1
68609: PLUS
68610: ARRAY
68611: ST_TO_ADDR
68612: GO 69097
68614: LD_INT 16
68616: DOUBLE
68617: EQUAL
68618: IFTRUE 68676
68620: LD_INT 17
68622: DOUBLE
68623: EQUAL
68624: IFTRUE 68676
68626: LD_INT 18
68628: DOUBLE
68629: EQUAL
68630: IFTRUE 68676
68632: LD_INT 19
68634: DOUBLE
68635: EQUAL
68636: IFTRUE 68676
68638: LD_INT 22
68640: DOUBLE
68641: EQUAL
68642: IFTRUE 68676
68644: LD_INT 20
68646: DOUBLE
68647: EQUAL
68648: IFTRUE 68676
68650: LD_INT 21
68652: DOUBLE
68653: EQUAL
68654: IFTRUE 68676
68656: LD_INT 23
68658: DOUBLE
68659: EQUAL
68660: IFTRUE 68676
68662: LD_INT 24
68664: DOUBLE
68665: EQUAL
68666: IFTRUE 68676
68668: LD_INT 25
68670: DOUBLE
68671: EQUAL
68672: IFTRUE 68676
68674: GO 68732
68676: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
68677: LD_ADDR_VAR 0 9
68681: PUSH
68682: LD_VAR 0 35
68686: PUSH
68687: LD_VAR 0 36
68691: PUSH
68692: LD_VAR 0 37
68696: PUSH
68697: LD_VAR 0 38
68701: PUSH
68702: LD_VAR 0 39
68706: PUSH
68707: LD_VAR 0 40
68711: PUSH
68712: EMPTY
68713: LIST
68714: LIST
68715: LIST
68716: LIST
68717: LIST
68718: LIST
68719: PUSH
68720: LD_VAR 0 4
68724: PUSH
68725: LD_INT 1
68727: PLUS
68728: ARRAY
68729: ST_TO_ADDR
68730: GO 69097
68732: LD_INT 6
68734: DOUBLE
68735: EQUAL
68736: IFTRUE 68788
68738: LD_INT 7
68740: DOUBLE
68741: EQUAL
68742: IFTRUE 68788
68744: LD_INT 8
68746: DOUBLE
68747: EQUAL
68748: IFTRUE 68788
68750: LD_INT 13
68752: DOUBLE
68753: EQUAL
68754: IFTRUE 68788
68756: LD_INT 12
68758: DOUBLE
68759: EQUAL
68760: IFTRUE 68788
68762: LD_INT 15
68764: DOUBLE
68765: EQUAL
68766: IFTRUE 68788
68768: LD_INT 11
68770: DOUBLE
68771: EQUAL
68772: IFTRUE 68788
68774: LD_INT 14
68776: DOUBLE
68777: EQUAL
68778: IFTRUE 68788
68780: LD_INT 10
68782: DOUBLE
68783: EQUAL
68784: IFTRUE 68788
68786: GO 68844
68788: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
68789: LD_ADDR_VAR 0 9
68793: PUSH
68794: LD_VAR 0 41
68798: PUSH
68799: LD_VAR 0 42
68803: PUSH
68804: LD_VAR 0 43
68808: PUSH
68809: LD_VAR 0 44
68813: PUSH
68814: LD_VAR 0 45
68818: PUSH
68819: LD_VAR 0 46
68823: PUSH
68824: EMPTY
68825: LIST
68826: LIST
68827: LIST
68828: LIST
68829: LIST
68830: LIST
68831: PUSH
68832: LD_VAR 0 4
68836: PUSH
68837: LD_INT 1
68839: PLUS
68840: ARRAY
68841: ST_TO_ADDR
68842: GO 69097
68844: LD_INT 36
68846: DOUBLE
68847: EQUAL
68848: IFTRUE 68852
68850: GO 68908
68852: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
68853: LD_ADDR_VAR 0 9
68857: PUSH
68858: LD_VAR 0 47
68862: PUSH
68863: LD_VAR 0 48
68867: PUSH
68868: LD_VAR 0 49
68872: PUSH
68873: LD_VAR 0 50
68877: PUSH
68878: LD_VAR 0 51
68882: PUSH
68883: LD_VAR 0 52
68887: PUSH
68888: EMPTY
68889: LIST
68890: LIST
68891: LIST
68892: LIST
68893: LIST
68894: LIST
68895: PUSH
68896: LD_VAR 0 4
68900: PUSH
68901: LD_INT 1
68903: PLUS
68904: ARRAY
68905: ST_TO_ADDR
68906: GO 69097
68908: LD_INT 4
68910: DOUBLE
68911: EQUAL
68912: IFTRUE 68934
68914: LD_INT 5
68916: DOUBLE
68917: EQUAL
68918: IFTRUE 68934
68920: LD_INT 34
68922: DOUBLE
68923: EQUAL
68924: IFTRUE 68934
68926: LD_INT 37
68928: DOUBLE
68929: EQUAL
68930: IFTRUE 68934
68932: GO 68990
68934: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
68935: LD_ADDR_VAR 0 9
68939: PUSH
68940: LD_VAR 0 53
68944: PUSH
68945: LD_VAR 0 54
68949: PUSH
68950: LD_VAR 0 55
68954: PUSH
68955: LD_VAR 0 56
68959: PUSH
68960: LD_VAR 0 57
68964: PUSH
68965: LD_VAR 0 58
68969: PUSH
68970: EMPTY
68971: LIST
68972: LIST
68973: LIST
68974: LIST
68975: LIST
68976: LIST
68977: PUSH
68978: LD_VAR 0 4
68982: PUSH
68983: LD_INT 1
68985: PLUS
68986: ARRAY
68987: ST_TO_ADDR
68988: GO 69097
68990: LD_INT 31
68992: DOUBLE
68993: EQUAL
68994: IFTRUE 69040
68996: LD_INT 32
68998: DOUBLE
68999: EQUAL
69000: IFTRUE 69040
69002: LD_INT 33
69004: DOUBLE
69005: EQUAL
69006: IFTRUE 69040
69008: LD_INT 27
69010: DOUBLE
69011: EQUAL
69012: IFTRUE 69040
69014: LD_INT 26
69016: DOUBLE
69017: EQUAL
69018: IFTRUE 69040
69020: LD_INT 28
69022: DOUBLE
69023: EQUAL
69024: IFTRUE 69040
69026: LD_INT 29
69028: DOUBLE
69029: EQUAL
69030: IFTRUE 69040
69032: LD_INT 30
69034: DOUBLE
69035: EQUAL
69036: IFTRUE 69040
69038: GO 69096
69040: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
69041: LD_ADDR_VAR 0 9
69045: PUSH
69046: LD_VAR 0 59
69050: PUSH
69051: LD_VAR 0 60
69055: PUSH
69056: LD_VAR 0 61
69060: PUSH
69061: LD_VAR 0 62
69065: PUSH
69066: LD_VAR 0 63
69070: PUSH
69071: LD_VAR 0 64
69075: PUSH
69076: EMPTY
69077: LIST
69078: LIST
69079: LIST
69080: LIST
69081: LIST
69082: LIST
69083: PUSH
69084: LD_VAR 0 4
69088: PUSH
69089: LD_INT 1
69091: PLUS
69092: ARRAY
69093: ST_TO_ADDR
69094: GO 69097
69096: POP
// temp_list2 = [ ] ;
69097: LD_ADDR_VAR 0 10
69101: PUSH
69102: EMPTY
69103: ST_TO_ADDR
// for i in temp_list do
69104: LD_ADDR_VAR 0 8
69108: PUSH
69109: LD_VAR 0 9
69113: PUSH
69114: FOR_IN
69115: IFFALSE 69167
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
69117: LD_ADDR_VAR 0 10
69121: PUSH
69122: LD_VAR 0 10
69126: PUSH
69127: LD_VAR 0 8
69131: PUSH
69132: LD_INT 1
69134: ARRAY
69135: PUSH
69136: LD_VAR 0 2
69140: PLUS
69141: PUSH
69142: LD_VAR 0 8
69146: PUSH
69147: LD_INT 2
69149: ARRAY
69150: PUSH
69151: LD_VAR 0 3
69155: PLUS
69156: PUSH
69157: EMPTY
69158: LIST
69159: LIST
69160: PUSH
69161: EMPTY
69162: LIST
69163: ADD
69164: ST_TO_ADDR
69165: GO 69114
69167: POP
69168: POP
// result = temp_list2 ;
69169: LD_ADDR_VAR 0 7
69173: PUSH
69174: LD_VAR 0 10
69178: ST_TO_ADDR
// end ;
69179: LD_VAR 0 7
69183: RET
// export function EnemyInRange ( unit , dist ) ; begin
69184: LD_INT 0
69186: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
69187: LD_ADDR_VAR 0 3
69191: PUSH
69192: LD_VAR 0 1
69196: PPUSH
69197: CALL_OW 255
69201: PPUSH
69202: LD_VAR 0 1
69206: PPUSH
69207: CALL_OW 250
69211: PPUSH
69212: LD_VAR 0 1
69216: PPUSH
69217: CALL_OW 251
69221: PPUSH
69222: LD_VAR 0 2
69226: PPUSH
69227: CALL 42557 0 4
69231: PUSH
69232: LD_INT 4
69234: ARRAY
69235: ST_TO_ADDR
// end ;
69236: LD_VAR 0 3
69240: RET
// export function PlayerSeeMe ( unit ) ; begin
69241: LD_INT 0
69243: PPUSH
// result := See ( your_side , unit ) ;
69244: LD_ADDR_VAR 0 2
69248: PUSH
69249: LD_OWVAR 2
69253: PPUSH
69254: LD_VAR 0 1
69258: PPUSH
69259: CALL_OW 292
69263: ST_TO_ADDR
// end ;
69264: LD_VAR 0 2
69268: RET
// export function ReverseDir ( unit ) ; begin
69269: LD_INT 0
69271: PPUSH
// if not unit then
69272: LD_VAR 0 1
69276: NOT
69277: IFFALSE 69281
// exit ;
69279: GO 69304
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
69281: LD_ADDR_VAR 0 2
69285: PUSH
69286: LD_VAR 0 1
69290: PPUSH
69291: CALL_OW 254
69295: PUSH
69296: LD_INT 3
69298: PLUS
69299: PUSH
69300: LD_INT 6
69302: MOD
69303: ST_TO_ADDR
// end ;
69304: LD_VAR 0 2
69308: RET
// export function ReverseArray ( array ) ; var i ; begin
69309: LD_INT 0
69311: PPUSH
69312: PPUSH
// if not array then
69313: LD_VAR 0 1
69317: NOT
69318: IFFALSE 69322
// exit ;
69320: GO 69377
// result := [ ] ;
69322: LD_ADDR_VAR 0 2
69326: PUSH
69327: EMPTY
69328: ST_TO_ADDR
// for i := array downto 1 do
69329: LD_ADDR_VAR 0 3
69333: PUSH
69334: DOUBLE
69335: LD_VAR 0 1
69339: INC
69340: ST_TO_ADDR
69341: LD_INT 1
69343: PUSH
69344: FOR_DOWNTO
69345: IFFALSE 69375
// result := Join ( result , array [ i ] ) ;
69347: LD_ADDR_VAR 0 2
69351: PUSH
69352: LD_VAR 0 2
69356: PPUSH
69357: LD_VAR 0 1
69361: PUSH
69362: LD_VAR 0 3
69366: ARRAY
69367: PPUSH
69368: CALL 74033 0 2
69372: ST_TO_ADDR
69373: GO 69344
69375: POP
69376: POP
// end ;
69377: LD_VAR 0 2
69381: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
69382: LD_INT 0
69384: PPUSH
69385: PPUSH
69386: PPUSH
69387: PPUSH
69388: PPUSH
69389: PPUSH
// if not unit or not hexes then
69390: LD_VAR 0 1
69394: NOT
69395: PUSH
69396: LD_VAR 0 2
69400: NOT
69401: OR
69402: IFFALSE 69406
// exit ;
69404: GO 69529
// dist := 9999 ;
69406: LD_ADDR_VAR 0 5
69410: PUSH
69411: LD_INT 9999
69413: ST_TO_ADDR
// for i = 1 to hexes do
69414: LD_ADDR_VAR 0 4
69418: PUSH
69419: DOUBLE
69420: LD_INT 1
69422: DEC
69423: ST_TO_ADDR
69424: LD_VAR 0 2
69428: PUSH
69429: FOR_TO
69430: IFFALSE 69517
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
69432: LD_ADDR_VAR 0 6
69436: PUSH
69437: LD_VAR 0 1
69441: PPUSH
69442: LD_VAR 0 2
69446: PUSH
69447: LD_VAR 0 4
69451: ARRAY
69452: PUSH
69453: LD_INT 1
69455: ARRAY
69456: PPUSH
69457: LD_VAR 0 2
69461: PUSH
69462: LD_VAR 0 4
69466: ARRAY
69467: PUSH
69468: LD_INT 2
69470: ARRAY
69471: PPUSH
69472: CALL_OW 297
69476: ST_TO_ADDR
// if tdist < dist then
69477: LD_VAR 0 6
69481: PUSH
69482: LD_VAR 0 5
69486: LESS
69487: IFFALSE 69515
// begin hex := hexes [ i ] ;
69489: LD_ADDR_VAR 0 8
69493: PUSH
69494: LD_VAR 0 2
69498: PUSH
69499: LD_VAR 0 4
69503: ARRAY
69504: ST_TO_ADDR
// dist := tdist ;
69505: LD_ADDR_VAR 0 5
69509: PUSH
69510: LD_VAR 0 6
69514: ST_TO_ADDR
// end ; end ;
69515: GO 69429
69517: POP
69518: POP
// result := hex ;
69519: LD_ADDR_VAR 0 3
69523: PUSH
69524: LD_VAR 0 8
69528: ST_TO_ADDR
// end ;
69529: LD_VAR 0 3
69533: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
69534: LD_INT 0
69536: PPUSH
69537: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
69538: LD_VAR 0 1
69542: NOT
69543: PUSH
69544: LD_VAR 0 1
69548: PUSH
69549: LD_INT 21
69551: PUSH
69552: LD_INT 2
69554: PUSH
69555: EMPTY
69556: LIST
69557: LIST
69558: PUSH
69559: LD_INT 23
69561: PUSH
69562: LD_INT 2
69564: PUSH
69565: EMPTY
69566: LIST
69567: LIST
69568: PUSH
69569: EMPTY
69570: LIST
69571: LIST
69572: PPUSH
69573: CALL_OW 69
69577: IN
69578: NOT
69579: OR
69580: IFFALSE 69584
// exit ;
69582: GO 69631
// for i = 1 to 3 do
69584: LD_ADDR_VAR 0 3
69588: PUSH
69589: DOUBLE
69590: LD_INT 1
69592: DEC
69593: ST_TO_ADDR
69594: LD_INT 3
69596: PUSH
69597: FOR_TO
69598: IFFALSE 69629
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
69600: LD_VAR 0 1
69604: PPUSH
69605: CALL_OW 250
69609: PPUSH
69610: LD_VAR 0 1
69614: PPUSH
69615: CALL_OW 251
69619: PPUSH
69620: LD_INT 1
69622: PPUSH
69623: CALL_OW 453
69627: GO 69597
69629: POP
69630: POP
// end ;
69631: LD_VAR 0 2
69635: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
69636: LD_INT 0
69638: PPUSH
69639: PPUSH
69640: PPUSH
69641: PPUSH
69642: PPUSH
69643: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
69644: LD_VAR 0 1
69648: NOT
69649: PUSH
69650: LD_VAR 0 2
69654: NOT
69655: OR
69656: PUSH
69657: LD_VAR 0 1
69661: PPUSH
69662: CALL_OW 314
69666: OR
69667: IFFALSE 69671
// exit ;
69669: GO 70138
// if GetLives ( i ) < 250 then
69671: LD_VAR 0 4
69675: PPUSH
69676: CALL_OW 256
69680: PUSH
69681: LD_INT 250
69683: LESS
69684: IFFALSE 69697
// begin ComAutodestruct ( i ) ;
69686: LD_VAR 0 4
69690: PPUSH
69691: CALL 69534 0 1
// exit ;
69695: GO 70138
// end ; x := GetX ( enemy_unit ) ;
69697: LD_ADDR_VAR 0 7
69701: PUSH
69702: LD_VAR 0 2
69706: PPUSH
69707: CALL_OW 250
69711: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
69712: LD_ADDR_VAR 0 8
69716: PUSH
69717: LD_VAR 0 2
69721: PPUSH
69722: CALL_OW 251
69726: ST_TO_ADDR
// if not x or not y then
69727: LD_VAR 0 7
69731: NOT
69732: PUSH
69733: LD_VAR 0 8
69737: NOT
69738: OR
69739: IFFALSE 69743
// exit ;
69741: GO 70138
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
69743: LD_ADDR_VAR 0 6
69747: PUSH
69748: LD_VAR 0 7
69752: PPUSH
69753: LD_INT 0
69755: PPUSH
69756: LD_INT 4
69758: PPUSH
69759: CALL_OW 272
69763: PUSH
69764: LD_VAR 0 8
69768: PPUSH
69769: LD_INT 0
69771: PPUSH
69772: LD_INT 4
69774: PPUSH
69775: CALL_OW 273
69779: PUSH
69780: EMPTY
69781: LIST
69782: LIST
69783: PUSH
69784: LD_VAR 0 7
69788: PPUSH
69789: LD_INT 1
69791: PPUSH
69792: LD_INT 4
69794: PPUSH
69795: CALL_OW 272
69799: PUSH
69800: LD_VAR 0 8
69804: PPUSH
69805: LD_INT 1
69807: PPUSH
69808: LD_INT 4
69810: PPUSH
69811: CALL_OW 273
69815: PUSH
69816: EMPTY
69817: LIST
69818: LIST
69819: PUSH
69820: LD_VAR 0 7
69824: PPUSH
69825: LD_INT 2
69827: PPUSH
69828: LD_INT 4
69830: PPUSH
69831: CALL_OW 272
69835: PUSH
69836: LD_VAR 0 8
69840: PPUSH
69841: LD_INT 2
69843: PPUSH
69844: LD_INT 4
69846: PPUSH
69847: CALL_OW 273
69851: PUSH
69852: EMPTY
69853: LIST
69854: LIST
69855: PUSH
69856: LD_VAR 0 7
69860: PPUSH
69861: LD_INT 3
69863: PPUSH
69864: LD_INT 4
69866: PPUSH
69867: CALL_OW 272
69871: PUSH
69872: LD_VAR 0 8
69876: PPUSH
69877: LD_INT 3
69879: PPUSH
69880: LD_INT 4
69882: PPUSH
69883: CALL_OW 273
69887: PUSH
69888: EMPTY
69889: LIST
69890: LIST
69891: PUSH
69892: LD_VAR 0 7
69896: PPUSH
69897: LD_INT 4
69899: PPUSH
69900: LD_INT 4
69902: PPUSH
69903: CALL_OW 272
69907: PUSH
69908: LD_VAR 0 8
69912: PPUSH
69913: LD_INT 4
69915: PPUSH
69916: LD_INT 4
69918: PPUSH
69919: CALL_OW 273
69923: PUSH
69924: EMPTY
69925: LIST
69926: LIST
69927: PUSH
69928: LD_VAR 0 7
69932: PPUSH
69933: LD_INT 5
69935: PPUSH
69936: LD_INT 4
69938: PPUSH
69939: CALL_OW 272
69943: PUSH
69944: LD_VAR 0 8
69948: PPUSH
69949: LD_INT 5
69951: PPUSH
69952: LD_INT 4
69954: PPUSH
69955: CALL_OW 273
69959: PUSH
69960: EMPTY
69961: LIST
69962: LIST
69963: PUSH
69964: EMPTY
69965: LIST
69966: LIST
69967: LIST
69968: LIST
69969: LIST
69970: LIST
69971: ST_TO_ADDR
// for i = tmp downto 1 do
69972: LD_ADDR_VAR 0 4
69976: PUSH
69977: DOUBLE
69978: LD_VAR 0 6
69982: INC
69983: ST_TO_ADDR
69984: LD_INT 1
69986: PUSH
69987: FOR_DOWNTO
69988: IFFALSE 70089
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
69990: LD_VAR 0 6
69994: PUSH
69995: LD_VAR 0 4
69999: ARRAY
70000: PUSH
70001: LD_INT 1
70003: ARRAY
70004: PPUSH
70005: LD_VAR 0 6
70009: PUSH
70010: LD_VAR 0 4
70014: ARRAY
70015: PUSH
70016: LD_INT 2
70018: ARRAY
70019: PPUSH
70020: CALL_OW 488
70024: NOT
70025: PUSH
70026: LD_VAR 0 6
70030: PUSH
70031: LD_VAR 0 4
70035: ARRAY
70036: PUSH
70037: LD_INT 1
70039: ARRAY
70040: PPUSH
70041: LD_VAR 0 6
70045: PUSH
70046: LD_VAR 0 4
70050: ARRAY
70051: PUSH
70052: LD_INT 2
70054: ARRAY
70055: PPUSH
70056: CALL_OW 428
70060: PUSH
70061: LD_INT 0
70063: NONEQUAL
70064: OR
70065: IFFALSE 70087
// tmp := Delete ( tmp , i ) ;
70067: LD_ADDR_VAR 0 6
70071: PUSH
70072: LD_VAR 0 6
70076: PPUSH
70077: LD_VAR 0 4
70081: PPUSH
70082: CALL_OW 3
70086: ST_TO_ADDR
70087: GO 69987
70089: POP
70090: POP
// j := GetClosestHex ( unit , tmp ) ;
70091: LD_ADDR_VAR 0 5
70095: PUSH
70096: LD_VAR 0 1
70100: PPUSH
70101: LD_VAR 0 6
70105: PPUSH
70106: CALL 69382 0 2
70110: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
70111: LD_VAR 0 1
70115: PPUSH
70116: LD_VAR 0 5
70120: PUSH
70121: LD_INT 1
70123: ARRAY
70124: PPUSH
70125: LD_VAR 0 5
70129: PUSH
70130: LD_INT 2
70132: ARRAY
70133: PPUSH
70134: CALL_OW 111
// end ;
70138: LD_VAR 0 3
70142: RET
// export function PrepareApemanSoldier ( ) ; begin
70143: LD_INT 0
70145: PPUSH
// uc_nation := 0 ;
70146: LD_ADDR_OWVAR 21
70150: PUSH
70151: LD_INT 0
70153: ST_TO_ADDR
// hc_sex := sex_male ;
70154: LD_ADDR_OWVAR 27
70158: PUSH
70159: LD_INT 1
70161: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
70162: LD_ADDR_OWVAR 28
70166: PUSH
70167: LD_INT 15
70169: ST_TO_ADDR
// hc_gallery :=  ;
70170: LD_ADDR_OWVAR 33
70174: PUSH
70175: LD_STRING 
70177: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70178: LD_ADDR_OWVAR 31
70182: PUSH
70183: LD_INT 0
70185: PPUSH
70186: LD_INT 3
70188: PPUSH
70189: CALL_OW 12
70193: PUSH
70194: LD_INT 0
70196: PPUSH
70197: LD_INT 3
70199: PPUSH
70200: CALL_OW 12
70204: PUSH
70205: LD_INT 0
70207: PUSH
70208: LD_INT 0
70210: PUSH
70211: EMPTY
70212: LIST
70213: LIST
70214: LIST
70215: LIST
70216: ST_TO_ADDR
// end ;
70217: LD_VAR 0 1
70221: RET
// export function PrepareApemanEngineer ( ) ; begin
70222: LD_INT 0
70224: PPUSH
// uc_nation := 0 ;
70225: LD_ADDR_OWVAR 21
70229: PUSH
70230: LD_INT 0
70232: ST_TO_ADDR
// hc_sex := sex_male ;
70233: LD_ADDR_OWVAR 27
70237: PUSH
70238: LD_INT 1
70240: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
70241: LD_ADDR_OWVAR 28
70245: PUSH
70246: LD_INT 16
70248: ST_TO_ADDR
// hc_gallery :=  ;
70249: LD_ADDR_OWVAR 33
70253: PUSH
70254: LD_STRING 
70256: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70257: LD_ADDR_OWVAR 31
70261: PUSH
70262: LD_INT 0
70264: PPUSH
70265: LD_INT 3
70267: PPUSH
70268: CALL_OW 12
70272: PUSH
70273: LD_INT 0
70275: PPUSH
70276: LD_INT 3
70278: PPUSH
70279: CALL_OW 12
70283: PUSH
70284: LD_INT 0
70286: PUSH
70287: LD_INT 0
70289: PUSH
70290: EMPTY
70291: LIST
70292: LIST
70293: LIST
70294: LIST
70295: ST_TO_ADDR
// end ;
70296: LD_VAR 0 1
70300: RET
// export function PrepareApeman ( agressivity ) ; begin
70301: LD_INT 0
70303: PPUSH
// uc_side := 0 ;
70304: LD_ADDR_OWVAR 20
70308: PUSH
70309: LD_INT 0
70311: ST_TO_ADDR
// uc_nation := 0 ;
70312: LD_ADDR_OWVAR 21
70316: PUSH
70317: LD_INT 0
70319: ST_TO_ADDR
// hc_sex := sex_male ;
70320: LD_ADDR_OWVAR 27
70324: PUSH
70325: LD_INT 1
70327: ST_TO_ADDR
// hc_class := class_apeman ;
70328: LD_ADDR_OWVAR 28
70332: PUSH
70333: LD_INT 12
70335: ST_TO_ADDR
// hc_gallery :=  ;
70336: LD_ADDR_OWVAR 33
70340: PUSH
70341: LD_STRING 
70343: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
70344: LD_ADDR_OWVAR 35
70348: PUSH
70349: LD_VAR 0 1
70353: NEG
70354: PPUSH
70355: LD_VAR 0 1
70359: PPUSH
70360: CALL_OW 12
70364: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70365: LD_ADDR_OWVAR 31
70369: PUSH
70370: LD_INT 0
70372: PPUSH
70373: LD_INT 3
70375: PPUSH
70376: CALL_OW 12
70380: PUSH
70381: LD_INT 0
70383: PPUSH
70384: LD_INT 3
70386: PPUSH
70387: CALL_OW 12
70391: PUSH
70392: LD_INT 0
70394: PUSH
70395: LD_INT 0
70397: PUSH
70398: EMPTY
70399: LIST
70400: LIST
70401: LIST
70402: LIST
70403: ST_TO_ADDR
// end ;
70404: LD_VAR 0 2
70408: RET
// export function PrepareTiger ( agressivity ) ; begin
70409: LD_INT 0
70411: PPUSH
// uc_side := 0 ;
70412: LD_ADDR_OWVAR 20
70416: PUSH
70417: LD_INT 0
70419: ST_TO_ADDR
// uc_nation := 0 ;
70420: LD_ADDR_OWVAR 21
70424: PUSH
70425: LD_INT 0
70427: ST_TO_ADDR
// hc_class := class_tiger ;
70428: LD_ADDR_OWVAR 28
70432: PUSH
70433: LD_INT 14
70435: ST_TO_ADDR
// hc_gallery :=  ;
70436: LD_ADDR_OWVAR 33
70440: PUSH
70441: LD_STRING 
70443: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
70444: LD_ADDR_OWVAR 35
70448: PUSH
70449: LD_VAR 0 1
70453: NEG
70454: PPUSH
70455: LD_VAR 0 1
70459: PPUSH
70460: CALL_OW 12
70464: ST_TO_ADDR
// end ;
70465: LD_VAR 0 2
70469: RET
// export function PrepareEnchidna ( ) ; begin
70470: LD_INT 0
70472: PPUSH
// uc_side := 0 ;
70473: LD_ADDR_OWVAR 20
70477: PUSH
70478: LD_INT 0
70480: ST_TO_ADDR
// uc_nation := 0 ;
70481: LD_ADDR_OWVAR 21
70485: PUSH
70486: LD_INT 0
70488: ST_TO_ADDR
// hc_class := class_baggie ;
70489: LD_ADDR_OWVAR 28
70493: PUSH
70494: LD_INT 13
70496: ST_TO_ADDR
// hc_gallery :=  ;
70497: LD_ADDR_OWVAR 33
70501: PUSH
70502: LD_STRING 
70504: ST_TO_ADDR
// end ;
70505: LD_VAR 0 1
70509: RET
// export function PrepareFrog ( ) ; begin
70510: LD_INT 0
70512: PPUSH
// uc_side := 0 ;
70513: LD_ADDR_OWVAR 20
70517: PUSH
70518: LD_INT 0
70520: ST_TO_ADDR
// uc_nation := 0 ;
70521: LD_ADDR_OWVAR 21
70525: PUSH
70526: LD_INT 0
70528: ST_TO_ADDR
// hc_class := class_frog ;
70529: LD_ADDR_OWVAR 28
70533: PUSH
70534: LD_INT 19
70536: ST_TO_ADDR
// hc_gallery :=  ;
70537: LD_ADDR_OWVAR 33
70541: PUSH
70542: LD_STRING 
70544: ST_TO_ADDR
// end ;
70545: LD_VAR 0 1
70549: RET
// export function PrepareFish ( ) ; begin
70550: LD_INT 0
70552: PPUSH
// uc_side := 0 ;
70553: LD_ADDR_OWVAR 20
70557: PUSH
70558: LD_INT 0
70560: ST_TO_ADDR
// uc_nation := 0 ;
70561: LD_ADDR_OWVAR 21
70565: PUSH
70566: LD_INT 0
70568: ST_TO_ADDR
// hc_class := class_fish ;
70569: LD_ADDR_OWVAR 28
70573: PUSH
70574: LD_INT 20
70576: ST_TO_ADDR
// hc_gallery :=  ;
70577: LD_ADDR_OWVAR 33
70581: PUSH
70582: LD_STRING 
70584: ST_TO_ADDR
// end ;
70585: LD_VAR 0 1
70589: RET
// export function PrepareBird ( ) ; begin
70590: LD_INT 0
70592: PPUSH
// uc_side := 0 ;
70593: LD_ADDR_OWVAR 20
70597: PUSH
70598: LD_INT 0
70600: ST_TO_ADDR
// uc_nation := 0 ;
70601: LD_ADDR_OWVAR 21
70605: PUSH
70606: LD_INT 0
70608: ST_TO_ADDR
// hc_class := class_phororhacos ;
70609: LD_ADDR_OWVAR 28
70613: PUSH
70614: LD_INT 18
70616: ST_TO_ADDR
// hc_gallery :=  ;
70617: LD_ADDR_OWVAR 33
70621: PUSH
70622: LD_STRING 
70624: ST_TO_ADDR
// end ;
70625: LD_VAR 0 1
70629: RET
// export function PrepareHorse ( ) ; begin
70630: LD_INT 0
70632: PPUSH
// uc_side := 0 ;
70633: LD_ADDR_OWVAR 20
70637: PUSH
70638: LD_INT 0
70640: ST_TO_ADDR
// uc_nation := 0 ;
70641: LD_ADDR_OWVAR 21
70645: PUSH
70646: LD_INT 0
70648: ST_TO_ADDR
// hc_class := class_horse ;
70649: LD_ADDR_OWVAR 28
70653: PUSH
70654: LD_INT 21
70656: ST_TO_ADDR
// hc_gallery :=  ;
70657: LD_ADDR_OWVAR 33
70661: PUSH
70662: LD_STRING 
70664: ST_TO_ADDR
// end ;
70665: LD_VAR 0 1
70669: RET
// export function PrepareMastodont ( ) ; begin
70670: LD_INT 0
70672: PPUSH
// uc_side := 0 ;
70673: LD_ADDR_OWVAR 20
70677: PUSH
70678: LD_INT 0
70680: ST_TO_ADDR
// uc_nation := 0 ;
70681: LD_ADDR_OWVAR 21
70685: PUSH
70686: LD_INT 0
70688: ST_TO_ADDR
// vc_chassis := class_mastodont ;
70689: LD_ADDR_OWVAR 37
70693: PUSH
70694: LD_INT 31
70696: ST_TO_ADDR
// vc_control := control_rider ;
70697: LD_ADDR_OWVAR 38
70701: PUSH
70702: LD_INT 4
70704: ST_TO_ADDR
// end ;
70705: LD_VAR 0 1
70709: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
70710: LD_INT 0
70712: PPUSH
70713: PPUSH
70714: PPUSH
// uc_side = 0 ;
70715: LD_ADDR_OWVAR 20
70719: PUSH
70720: LD_INT 0
70722: ST_TO_ADDR
// uc_nation = 0 ;
70723: LD_ADDR_OWVAR 21
70727: PUSH
70728: LD_INT 0
70730: ST_TO_ADDR
// InitHc_All ( ) ;
70731: CALL_OW 584
// InitVc ;
70735: CALL_OW 20
// if mastodonts then
70739: LD_VAR 0 6
70743: IFFALSE 70810
// for i = 1 to mastodonts do
70745: LD_ADDR_VAR 0 11
70749: PUSH
70750: DOUBLE
70751: LD_INT 1
70753: DEC
70754: ST_TO_ADDR
70755: LD_VAR 0 6
70759: PUSH
70760: FOR_TO
70761: IFFALSE 70808
// begin vc_chassis := 31 ;
70763: LD_ADDR_OWVAR 37
70767: PUSH
70768: LD_INT 31
70770: ST_TO_ADDR
// vc_control := control_rider ;
70771: LD_ADDR_OWVAR 38
70775: PUSH
70776: LD_INT 4
70778: ST_TO_ADDR
// animal := CreateVehicle ;
70779: LD_ADDR_VAR 0 12
70783: PUSH
70784: CALL_OW 45
70788: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70789: LD_VAR 0 12
70793: PPUSH
70794: LD_VAR 0 8
70798: PPUSH
70799: LD_INT 0
70801: PPUSH
70802: CALL 72938 0 3
// end ;
70806: GO 70760
70808: POP
70809: POP
// if horses then
70810: LD_VAR 0 5
70814: IFFALSE 70881
// for i = 1 to horses do
70816: LD_ADDR_VAR 0 11
70820: PUSH
70821: DOUBLE
70822: LD_INT 1
70824: DEC
70825: ST_TO_ADDR
70826: LD_VAR 0 5
70830: PUSH
70831: FOR_TO
70832: IFFALSE 70879
// begin hc_class := 21 ;
70834: LD_ADDR_OWVAR 28
70838: PUSH
70839: LD_INT 21
70841: ST_TO_ADDR
// hc_gallery :=  ;
70842: LD_ADDR_OWVAR 33
70846: PUSH
70847: LD_STRING 
70849: ST_TO_ADDR
// animal := CreateHuman ;
70850: LD_ADDR_VAR 0 12
70854: PUSH
70855: CALL_OW 44
70859: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70860: LD_VAR 0 12
70864: PPUSH
70865: LD_VAR 0 8
70869: PPUSH
70870: LD_INT 0
70872: PPUSH
70873: CALL 72938 0 3
// end ;
70877: GO 70831
70879: POP
70880: POP
// if birds then
70881: LD_VAR 0 1
70885: IFFALSE 70952
// for i = 1 to birds do
70887: LD_ADDR_VAR 0 11
70891: PUSH
70892: DOUBLE
70893: LD_INT 1
70895: DEC
70896: ST_TO_ADDR
70897: LD_VAR 0 1
70901: PUSH
70902: FOR_TO
70903: IFFALSE 70950
// begin hc_class := 18 ;
70905: LD_ADDR_OWVAR 28
70909: PUSH
70910: LD_INT 18
70912: ST_TO_ADDR
// hc_gallery =  ;
70913: LD_ADDR_OWVAR 33
70917: PUSH
70918: LD_STRING 
70920: ST_TO_ADDR
// animal := CreateHuman ;
70921: LD_ADDR_VAR 0 12
70925: PUSH
70926: CALL_OW 44
70930: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70931: LD_VAR 0 12
70935: PPUSH
70936: LD_VAR 0 8
70940: PPUSH
70941: LD_INT 0
70943: PPUSH
70944: CALL 72938 0 3
// end ;
70948: GO 70902
70950: POP
70951: POP
// if tigers then
70952: LD_VAR 0 2
70956: IFFALSE 71040
// for i = 1 to tigers do
70958: LD_ADDR_VAR 0 11
70962: PUSH
70963: DOUBLE
70964: LD_INT 1
70966: DEC
70967: ST_TO_ADDR
70968: LD_VAR 0 2
70972: PUSH
70973: FOR_TO
70974: IFFALSE 71038
// begin hc_class = class_tiger ;
70976: LD_ADDR_OWVAR 28
70980: PUSH
70981: LD_INT 14
70983: ST_TO_ADDR
// hc_gallery =  ;
70984: LD_ADDR_OWVAR 33
70988: PUSH
70989: LD_STRING 
70991: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
70992: LD_ADDR_OWVAR 35
70996: PUSH
70997: LD_INT 7
70999: NEG
71000: PPUSH
71001: LD_INT 7
71003: PPUSH
71004: CALL_OW 12
71008: ST_TO_ADDR
// animal := CreateHuman ;
71009: LD_ADDR_VAR 0 12
71013: PUSH
71014: CALL_OW 44
71018: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71019: LD_VAR 0 12
71023: PPUSH
71024: LD_VAR 0 8
71028: PPUSH
71029: LD_INT 0
71031: PPUSH
71032: CALL 72938 0 3
// end ;
71036: GO 70973
71038: POP
71039: POP
// if apemans then
71040: LD_VAR 0 3
71044: IFFALSE 71167
// for i = 1 to apemans do
71046: LD_ADDR_VAR 0 11
71050: PUSH
71051: DOUBLE
71052: LD_INT 1
71054: DEC
71055: ST_TO_ADDR
71056: LD_VAR 0 3
71060: PUSH
71061: FOR_TO
71062: IFFALSE 71165
// begin hc_class = class_apeman ;
71064: LD_ADDR_OWVAR 28
71068: PUSH
71069: LD_INT 12
71071: ST_TO_ADDR
// hc_gallery =  ;
71072: LD_ADDR_OWVAR 33
71076: PUSH
71077: LD_STRING 
71079: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
71080: LD_ADDR_OWVAR 35
71084: PUSH
71085: LD_INT 2
71087: NEG
71088: PPUSH
71089: LD_INT 2
71091: PPUSH
71092: CALL_OW 12
71096: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
71097: LD_ADDR_OWVAR 31
71101: PUSH
71102: LD_INT 1
71104: PPUSH
71105: LD_INT 3
71107: PPUSH
71108: CALL_OW 12
71112: PUSH
71113: LD_INT 1
71115: PPUSH
71116: LD_INT 3
71118: PPUSH
71119: CALL_OW 12
71123: PUSH
71124: LD_INT 0
71126: PUSH
71127: LD_INT 0
71129: PUSH
71130: EMPTY
71131: LIST
71132: LIST
71133: LIST
71134: LIST
71135: ST_TO_ADDR
// animal := CreateHuman ;
71136: LD_ADDR_VAR 0 12
71140: PUSH
71141: CALL_OW 44
71145: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71146: LD_VAR 0 12
71150: PPUSH
71151: LD_VAR 0 8
71155: PPUSH
71156: LD_INT 0
71158: PPUSH
71159: CALL 72938 0 3
// end ;
71163: GO 71061
71165: POP
71166: POP
// if enchidnas then
71167: LD_VAR 0 4
71171: IFFALSE 71238
// for i = 1 to enchidnas do
71173: LD_ADDR_VAR 0 11
71177: PUSH
71178: DOUBLE
71179: LD_INT 1
71181: DEC
71182: ST_TO_ADDR
71183: LD_VAR 0 4
71187: PUSH
71188: FOR_TO
71189: IFFALSE 71236
// begin hc_class = 13 ;
71191: LD_ADDR_OWVAR 28
71195: PUSH
71196: LD_INT 13
71198: ST_TO_ADDR
// hc_gallery =  ;
71199: LD_ADDR_OWVAR 33
71203: PUSH
71204: LD_STRING 
71206: ST_TO_ADDR
// animal := CreateHuman ;
71207: LD_ADDR_VAR 0 12
71211: PUSH
71212: CALL_OW 44
71216: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71217: LD_VAR 0 12
71221: PPUSH
71222: LD_VAR 0 8
71226: PPUSH
71227: LD_INT 0
71229: PPUSH
71230: CALL 72938 0 3
// end ;
71234: GO 71188
71236: POP
71237: POP
// if fishes then
71238: LD_VAR 0 7
71242: IFFALSE 71309
// for i = 1 to fishes do
71244: LD_ADDR_VAR 0 11
71248: PUSH
71249: DOUBLE
71250: LD_INT 1
71252: DEC
71253: ST_TO_ADDR
71254: LD_VAR 0 7
71258: PUSH
71259: FOR_TO
71260: IFFALSE 71307
// begin hc_class = 20 ;
71262: LD_ADDR_OWVAR 28
71266: PUSH
71267: LD_INT 20
71269: ST_TO_ADDR
// hc_gallery =  ;
71270: LD_ADDR_OWVAR 33
71274: PUSH
71275: LD_STRING 
71277: ST_TO_ADDR
// animal := CreateHuman ;
71278: LD_ADDR_VAR 0 12
71282: PUSH
71283: CALL_OW 44
71287: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
71288: LD_VAR 0 12
71292: PPUSH
71293: LD_VAR 0 9
71297: PPUSH
71298: LD_INT 0
71300: PPUSH
71301: CALL 72938 0 3
// end ;
71305: GO 71259
71307: POP
71308: POP
// end ;
71309: LD_VAR 0 10
71313: RET
// export function WantHeal ( sci , unit ) ; begin
71314: LD_INT 0
71316: PPUSH
// if GetTaskList ( sci ) > 0 then
71317: LD_VAR 0 1
71321: PPUSH
71322: CALL_OW 437
71326: PUSH
71327: LD_INT 0
71329: GREATER
71330: IFFALSE 71400
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
71332: LD_VAR 0 1
71336: PPUSH
71337: CALL_OW 437
71341: PUSH
71342: LD_INT 1
71344: ARRAY
71345: PUSH
71346: LD_INT 1
71348: ARRAY
71349: PUSH
71350: LD_STRING l
71352: EQUAL
71353: PUSH
71354: LD_VAR 0 1
71358: PPUSH
71359: CALL_OW 437
71363: PUSH
71364: LD_INT 1
71366: ARRAY
71367: PUSH
71368: LD_INT 4
71370: ARRAY
71371: PUSH
71372: LD_VAR 0 2
71376: EQUAL
71377: AND
71378: IFFALSE 71390
// result := true else
71380: LD_ADDR_VAR 0 3
71384: PUSH
71385: LD_INT 1
71387: ST_TO_ADDR
71388: GO 71398
// result := false ;
71390: LD_ADDR_VAR 0 3
71394: PUSH
71395: LD_INT 0
71397: ST_TO_ADDR
// end else
71398: GO 71408
// result := false ;
71400: LD_ADDR_VAR 0 3
71404: PUSH
71405: LD_INT 0
71407: ST_TO_ADDR
// end ;
71408: LD_VAR 0 3
71412: RET
// export function HealTarget ( sci ) ; begin
71413: LD_INT 0
71415: PPUSH
// if not sci then
71416: LD_VAR 0 1
71420: NOT
71421: IFFALSE 71425
// exit ;
71423: GO 71490
// result := 0 ;
71425: LD_ADDR_VAR 0 2
71429: PUSH
71430: LD_INT 0
71432: ST_TO_ADDR
// if GetTaskList ( sci ) then
71433: LD_VAR 0 1
71437: PPUSH
71438: CALL_OW 437
71442: IFFALSE 71490
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
71444: LD_VAR 0 1
71448: PPUSH
71449: CALL_OW 437
71453: PUSH
71454: LD_INT 1
71456: ARRAY
71457: PUSH
71458: LD_INT 1
71460: ARRAY
71461: PUSH
71462: LD_STRING l
71464: EQUAL
71465: IFFALSE 71490
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
71467: LD_ADDR_VAR 0 2
71471: PUSH
71472: LD_VAR 0 1
71476: PPUSH
71477: CALL_OW 437
71481: PUSH
71482: LD_INT 1
71484: ARRAY
71485: PUSH
71486: LD_INT 4
71488: ARRAY
71489: ST_TO_ADDR
// end ;
71490: LD_VAR 0 2
71494: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
71495: LD_INT 0
71497: PPUSH
71498: PPUSH
71499: PPUSH
71500: PPUSH
// if not base_units then
71501: LD_VAR 0 1
71505: NOT
71506: IFFALSE 71510
// exit ;
71508: GO 71597
// result := false ;
71510: LD_ADDR_VAR 0 2
71514: PUSH
71515: LD_INT 0
71517: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
71518: LD_ADDR_VAR 0 5
71522: PUSH
71523: LD_VAR 0 1
71527: PPUSH
71528: LD_INT 21
71530: PUSH
71531: LD_INT 3
71533: PUSH
71534: EMPTY
71535: LIST
71536: LIST
71537: PPUSH
71538: CALL_OW 72
71542: ST_TO_ADDR
// if not tmp then
71543: LD_VAR 0 5
71547: NOT
71548: IFFALSE 71552
// exit ;
71550: GO 71597
// for i in tmp do
71552: LD_ADDR_VAR 0 3
71556: PUSH
71557: LD_VAR 0 5
71561: PUSH
71562: FOR_IN
71563: IFFALSE 71595
// begin result := EnemyInRange ( i , 22 ) ;
71565: LD_ADDR_VAR 0 2
71569: PUSH
71570: LD_VAR 0 3
71574: PPUSH
71575: LD_INT 22
71577: PPUSH
71578: CALL 69184 0 2
71582: ST_TO_ADDR
// if result then
71583: LD_VAR 0 2
71587: IFFALSE 71593
// exit ;
71589: POP
71590: POP
71591: GO 71597
// end ;
71593: GO 71562
71595: POP
71596: POP
// end ;
71597: LD_VAR 0 2
71601: RET
// export function FilterByTag ( units , tag ) ; begin
71602: LD_INT 0
71604: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
71605: LD_ADDR_VAR 0 3
71609: PUSH
71610: LD_VAR 0 1
71614: PPUSH
71615: LD_INT 120
71617: PUSH
71618: LD_VAR 0 2
71622: PUSH
71623: EMPTY
71624: LIST
71625: LIST
71626: PPUSH
71627: CALL_OW 72
71631: ST_TO_ADDR
// end ;
71632: LD_VAR 0 3
71636: RET
// export function IsDriver ( un ) ; begin
71637: LD_INT 0
71639: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
71640: LD_ADDR_VAR 0 2
71644: PUSH
71645: LD_VAR 0 1
71649: PUSH
71650: LD_INT 55
71652: PUSH
71653: EMPTY
71654: LIST
71655: PPUSH
71656: CALL_OW 69
71660: IN
71661: ST_TO_ADDR
// end ;
71662: LD_VAR 0 2
71666: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
71667: LD_INT 0
71669: PPUSH
71670: PPUSH
// list := [ ] ;
71671: LD_ADDR_VAR 0 5
71675: PUSH
71676: EMPTY
71677: ST_TO_ADDR
// case d of 0 :
71678: LD_VAR 0 3
71682: PUSH
71683: LD_INT 0
71685: DOUBLE
71686: EQUAL
71687: IFTRUE 71691
71689: GO 71824
71691: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
71692: LD_ADDR_VAR 0 5
71696: PUSH
71697: LD_VAR 0 1
71701: PUSH
71702: LD_INT 4
71704: MINUS
71705: PUSH
71706: LD_VAR 0 2
71710: PUSH
71711: LD_INT 4
71713: MINUS
71714: PUSH
71715: LD_INT 2
71717: PUSH
71718: EMPTY
71719: LIST
71720: LIST
71721: LIST
71722: PUSH
71723: LD_VAR 0 1
71727: PUSH
71728: LD_INT 3
71730: MINUS
71731: PUSH
71732: LD_VAR 0 2
71736: PUSH
71737: LD_INT 1
71739: PUSH
71740: EMPTY
71741: LIST
71742: LIST
71743: LIST
71744: PUSH
71745: LD_VAR 0 1
71749: PUSH
71750: LD_INT 4
71752: PLUS
71753: PUSH
71754: LD_VAR 0 2
71758: PUSH
71759: LD_INT 4
71761: PUSH
71762: EMPTY
71763: LIST
71764: LIST
71765: LIST
71766: PUSH
71767: LD_VAR 0 1
71771: PUSH
71772: LD_INT 3
71774: PLUS
71775: PUSH
71776: LD_VAR 0 2
71780: PUSH
71781: LD_INT 3
71783: PLUS
71784: PUSH
71785: LD_INT 5
71787: PUSH
71788: EMPTY
71789: LIST
71790: LIST
71791: LIST
71792: PUSH
71793: LD_VAR 0 1
71797: PUSH
71798: LD_VAR 0 2
71802: PUSH
71803: LD_INT 4
71805: PLUS
71806: PUSH
71807: LD_INT 0
71809: PUSH
71810: EMPTY
71811: LIST
71812: LIST
71813: LIST
71814: PUSH
71815: EMPTY
71816: LIST
71817: LIST
71818: LIST
71819: LIST
71820: LIST
71821: ST_TO_ADDR
// end ; 1 :
71822: GO 72522
71824: LD_INT 1
71826: DOUBLE
71827: EQUAL
71828: IFTRUE 71832
71830: GO 71965
71832: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
71833: LD_ADDR_VAR 0 5
71837: PUSH
71838: LD_VAR 0 1
71842: PUSH
71843: LD_VAR 0 2
71847: PUSH
71848: LD_INT 4
71850: MINUS
71851: PUSH
71852: LD_INT 3
71854: PUSH
71855: EMPTY
71856: LIST
71857: LIST
71858: LIST
71859: PUSH
71860: LD_VAR 0 1
71864: PUSH
71865: LD_INT 3
71867: MINUS
71868: PUSH
71869: LD_VAR 0 2
71873: PUSH
71874: LD_INT 3
71876: MINUS
71877: PUSH
71878: LD_INT 2
71880: PUSH
71881: EMPTY
71882: LIST
71883: LIST
71884: LIST
71885: PUSH
71886: LD_VAR 0 1
71890: PUSH
71891: LD_INT 4
71893: MINUS
71894: PUSH
71895: LD_VAR 0 2
71899: PUSH
71900: LD_INT 1
71902: PUSH
71903: EMPTY
71904: LIST
71905: LIST
71906: LIST
71907: PUSH
71908: LD_VAR 0 1
71912: PUSH
71913: LD_VAR 0 2
71917: PUSH
71918: LD_INT 3
71920: PLUS
71921: PUSH
71922: LD_INT 0
71924: PUSH
71925: EMPTY
71926: LIST
71927: LIST
71928: LIST
71929: PUSH
71930: LD_VAR 0 1
71934: PUSH
71935: LD_INT 4
71937: PLUS
71938: PUSH
71939: LD_VAR 0 2
71943: PUSH
71944: LD_INT 4
71946: PLUS
71947: PUSH
71948: LD_INT 5
71950: PUSH
71951: EMPTY
71952: LIST
71953: LIST
71954: LIST
71955: PUSH
71956: EMPTY
71957: LIST
71958: LIST
71959: LIST
71960: LIST
71961: LIST
71962: ST_TO_ADDR
// end ; 2 :
71963: GO 72522
71965: LD_INT 2
71967: DOUBLE
71968: EQUAL
71969: IFTRUE 71973
71971: GO 72102
71973: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
71974: LD_ADDR_VAR 0 5
71978: PUSH
71979: LD_VAR 0 1
71983: PUSH
71984: LD_VAR 0 2
71988: PUSH
71989: LD_INT 3
71991: MINUS
71992: PUSH
71993: LD_INT 3
71995: PUSH
71996: EMPTY
71997: LIST
71998: LIST
71999: LIST
72000: PUSH
72001: LD_VAR 0 1
72005: PUSH
72006: LD_INT 4
72008: PLUS
72009: PUSH
72010: LD_VAR 0 2
72014: PUSH
72015: LD_INT 4
72017: PUSH
72018: EMPTY
72019: LIST
72020: LIST
72021: LIST
72022: PUSH
72023: LD_VAR 0 1
72027: PUSH
72028: LD_VAR 0 2
72032: PUSH
72033: LD_INT 4
72035: PLUS
72036: PUSH
72037: LD_INT 0
72039: PUSH
72040: EMPTY
72041: LIST
72042: LIST
72043: LIST
72044: PUSH
72045: LD_VAR 0 1
72049: PUSH
72050: LD_INT 3
72052: MINUS
72053: PUSH
72054: LD_VAR 0 2
72058: PUSH
72059: LD_INT 1
72061: PUSH
72062: EMPTY
72063: LIST
72064: LIST
72065: LIST
72066: PUSH
72067: LD_VAR 0 1
72071: PUSH
72072: LD_INT 4
72074: MINUS
72075: PUSH
72076: LD_VAR 0 2
72080: PUSH
72081: LD_INT 4
72083: MINUS
72084: PUSH
72085: LD_INT 2
72087: PUSH
72088: EMPTY
72089: LIST
72090: LIST
72091: LIST
72092: PUSH
72093: EMPTY
72094: LIST
72095: LIST
72096: LIST
72097: LIST
72098: LIST
72099: ST_TO_ADDR
// end ; 3 :
72100: GO 72522
72102: LD_INT 3
72104: DOUBLE
72105: EQUAL
72106: IFTRUE 72110
72108: GO 72243
72110: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
72111: LD_ADDR_VAR 0 5
72115: PUSH
72116: LD_VAR 0 1
72120: PUSH
72121: LD_INT 3
72123: PLUS
72124: PUSH
72125: LD_VAR 0 2
72129: PUSH
72130: LD_INT 4
72132: PUSH
72133: EMPTY
72134: LIST
72135: LIST
72136: LIST
72137: PUSH
72138: LD_VAR 0 1
72142: PUSH
72143: LD_INT 4
72145: PLUS
72146: PUSH
72147: LD_VAR 0 2
72151: PUSH
72152: LD_INT 4
72154: PLUS
72155: PUSH
72156: LD_INT 5
72158: PUSH
72159: EMPTY
72160: LIST
72161: LIST
72162: LIST
72163: PUSH
72164: LD_VAR 0 1
72168: PUSH
72169: LD_INT 4
72171: MINUS
72172: PUSH
72173: LD_VAR 0 2
72177: PUSH
72178: LD_INT 1
72180: PUSH
72181: EMPTY
72182: LIST
72183: LIST
72184: LIST
72185: PUSH
72186: LD_VAR 0 1
72190: PUSH
72191: LD_VAR 0 2
72195: PUSH
72196: LD_INT 4
72198: MINUS
72199: PUSH
72200: LD_INT 3
72202: PUSH
72203: EMPTY
72204: LIST
72205: LIST
72206: LIST
72207: PUSH
72208: LD_VAR 0 1
72212: PUSH
72213: LD_INT 3
72215: MINUS
72216: PUSH
72217: LD_VAR 0 2
72221: PUSH
72222: LD_INT 3
72224: MINUS
72225: PUSH
72226: LD_INT 2
72228: PUSH
72229: EMPTY
72230: LIST
72231: LIST
72232: LIST
72233: PUSH
72234: EMPTY
72235: LIST
72236: LIST
72237: LIST
72238: LIST
72239: LIST
72240: ST_TO_ADDR
// end ; 4 :
72241: GO 72522
72243: LD_INT 4
72245: DOUBLE
72246: EQUAL
72247: IFTRUE 72251
72249: GO 72384
72251: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
72252: LD_ADDR_VAR 0 5
72256: PUSH
72257: LD_VAR 0 1
72261: PUSH
72262: LD_VAR 0 2
72266: PUSH
72267: LD_INT 4
72269: PLUS
72270: PUSH
72271: LD_INT 0
72273: PUSH
72274: EMPTY
72275: LIST
72276: LIST
72277: LIST
72278: PUSH
72279: LD_VAR 0 1
72283: PUSH
72284: LD_INT 3
72286: PLUS
72287: PUSH
72288: LD_VAR 0 2
72292: PUSH
72293: LD_INT 3
72295: PLUS
72296: PUSH
72297: LD_INT 5
72299: PUSH
72300: EMPTY
72301: LIST
72302: LIST
72303: LIST
72304: PUSH
72305: LD_VAR 0 1
72309: PUSH
72310: LD_INT 4
72312: PLUS
72313: PUSH
72314: LD_VAR 0 2
72318: PUSH
72319: LD_INT 4
72321: PUSH
72322: EMPTY
72323: LIST
72324: LIST
72325: LIST
72326: PUSH
72327: LD_VAR 0 1
72331: PUSH
72332: LD_VAR 0 2
72336: PUSH
72337: LD_INT 3
72339: MINUS
72340: PUSH
72341: LD_INT 3
72343: PUSH
72344: EMPTY
72345: LIST
72346: LIST
72347: LIST
72348: PUSH
72349: LD_VAR 0 1
72353: PUSH
72354: LD_INT 4
72356: MINUS
72357: PUSH
72358: LD_VAR 0 2
72362: PUSH
72363: LD_INT 4
72365: MINUS
72366: PUSH
72367: LD_INT 2
72369: PUSH
72370: EMPTY
72371: LIST
72372: LIST
72373: LIST
72374: PUSH
72375: EMPTY
72376: LIST
72377: LIST
72378: LIST
72379: LIST
72380: LIST
72381: ST_TO_ADDR
// end ; 5 :
72382: GO 72522
72384: LD_INT 5
72386: DOUBLE
72387: EQUAL
72388: IFTRUE 72392
72390: GO 72521
72392: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
72393: LD_ADDR_VAR 0 5
72397: PUSH
72398: LD_VAR 0 1
72402: PUSH
72403: LD_INT 4
72405: MINUS
72406: PUSH
72407: LD_VAR 0 2
72411: PUSH
72412: LD_INT 1
72414: PUSH
72415: EMPTY
72416: LIST
72417: LIST
72418: LIST
72419: PUSH
72420: LD_VAR 0 1
72424: PUSH
72425: LD_VAR 0 2
72429: PUSH
72430: LD_INT 4
72432: MINUS
72433: PUSH
72434: LD_INT 3
72436: PUSH
72437: EMPTY
72438: LIST
72439: LIST
72440: LIST
72441: PUSH
72442: LD_VAR 0 1
72446: PUSH
72447: LD_INT 4
72449: PLUS
72450: PUSH
72451: LD_VAR 0 2
72455: PUSH
72456: LD_INT 4
72458: PLUS
72459: PUSH
72460: LD_INT 5
72462: PUSH
72463: EMPTY
72464: LIST
72465: LIST
72466: LIST
72467: PUSH
72468: LD_VAR 0 1
72472: PUSH
72473: LD_INT 3
72475: PLUS
72476: PUSH
72477: LD_VAR 0 2
72481: PUSH
72482: LD_INT 4
72484: PUSH
72485: EMPTY
72486: LIST
72487: LIST
72488: LIST
72489: PUSH
72490: LD_VAR 0 1
72494: PUSH
72495: LD_VAR 0 2
72499: PUSH
72500: LD_INT 3
72502: PLUS
72503: PUSH
72504: LD_INT 0
72506: PUSH
72507: EMPTY
72508: LIST
72509: LIST
72510: LIST
72511: PUSH
72512: EMPTY
72513: LIST
72514: LIST
72515: LIST
72516: LIST
72517: LIST
72518: ST_TO_ADDR
// end ; end ;
72519: GO 72522
72521: POP
// result := list ;
72522: LD_ADDR_VAR 0 4
72526: PUSH
72527: LD_VAR 0 5
72531: ST_TO_ADDR
// end ;
72532: LD_VAR 0 4
72536: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
72537: LD_INT 0
72539: PPUSH
72540: PPUSH
72541: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
72542: LD_VAR 0 1
72546: NOT
72547: PUSH
72548: LD_VAR 0 2
72552: PUSH
72553: LD_INT 1
72555: PUSH
72556: LD_INT 2
72558: PUSH
72559: LD_INT 3
72561: PUSH
72562: LD_INT 4
72564: PUSH
72565: EMPTY
72566: LIST
72567: LIST
72568: LIST
72569: LIST
72570: IN
72571: NOT
72572: OR
72573: IFFALSE 72577
// exit ;
72575: GO 72660
// tmp := [ ] ;
72577: LD_ADDR_VAR 0 5
72581: PUSH
72582: EMPTY
72583: ST_TO_ADDR
// for i in units do
72584: LD_ADDR_VAR 0 4
72588: PUSH
72589: LD_VAR 0 1
72593: PUSH
72594: FOR_IN
72595: IFFALSE 72629
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
72597: LD_ADDR_VAR 0 5
72601: PUSH
72602: LD_VAR 0 5
72606: PPUSH
72607: LD_VAR 0 4
72611: PPUSH
72612: LD_VAR 0 2
72616: PPUSH
72617: CALL_OW 259
72621: PPUSH
72622: CALL 74033 0 2
72626: ST_TO_ADDR
72627: GO 72594
72629: POP
72630: POP
// if not tmp then
72631: LD_VAR 0 5
72635: NOT
72636: IFFALSE 72640
// exit ;
72638: GO 72660
// result := SortListByListDesc ( units , tmp ) ;
72640: LD_ADDR_VAR 0 3
72644: PUSH
72645: LD_VAR 0 1
72649: PPUSH
72650: LD_VAR 0 5
72654: PPUSH
72655: CALL_OW 77
72659: ST_TO_ADDR
// end ;
72660: LD_VAR 0 3
72664: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
72665: LD_INT 0
72667: PPUSH
72668: PPUSH
72669: PPUSH
// result := false ;
72670: LD_ADDR_VAR 0 3
72674: PUSH
72675: LD_INT 0
72677: ST_TO_ADDR
// if not building then
72678: LD_VAR 0 2
72682: NOT
72683: IFFALSE 72687
// exit ;
72685: GO 72825
// x := GetX ( building ) ;
72687: LD_ADDR_VAR 0 4
72691: PUSH
72692: LD_VAR 0 2
72696: PPUSH
72697: CALL_OW 250
72701: ST_TO_ADDR
// y := GetY ( building ) ;
72702: LD_ADDR_VAR 0 5
72706: PUSH
72707: LD_VAR 0 2
72711: PPUSH
72712: CALL_OW 251
72716: ST_TO_ADDR
// if not x or not y then
72717: LD_VAR 0 4
72721: NOT
72722: PUSH
72723: LD_VAR 0 5
72727: NOT
72728: OR
72729: IFFALSE 72733
// exit ;
72731: GO 72825
// if GetTaskList ( unit ) then
72733: LD_VAR 0 1
72737: PPUSH
72738: CALL_OW 437
72742: IFFALSE 72825
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72744: LD_STRING e
72746: PUSH
72747: LD_VAR 0 1
72751: PPUSH
72752: CALL_OW 437
72756: PUSH
72757: LD_INT 1
72759: ARRAY
72760: PUSH
72761: LD_INT 1
72763: ARRAY
72764: EQUAL
72765: PUSH
72766: LD_VAR 0 4
72770: PUSH
72771: LD_VAR 0 1
72775: PPUSH
72776: CALL_OW 437
72780: PUSH
72781: LD_INT 1
72783: ARRAY
72784: PUSH
72785: LD_INT 2
72787: ARRAY
72788: EQUAL
72789: AND
72790: PUSH
72791: LD_VAR 0 5
72795: PUSH
72796: LD_VAR 0 1
72800: PPUSH
72801: CALL_OW 437
72805: PUSH
72806: LD_INT 1
72808: ARRAY
72809: PUSH
72810: LD_INT 3
72812: ARRAY
72813: EQUAL
72814: AND
72815: IFFALSE 72825
// result := true end ;
72817: LD_ADDR_VAR 0 3
72821: PUSH
72822: LD_INT 1
72824: ST_TO_ADDR
// end ;
72825: LD_VAR 0 3
72829: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
72830: LD_INT 0
72832: PPUSH
// result := false ;
72833: LD_ADDR_VAR 0 4
72837: PUSH
72838: LD_INT 0
72840: ST_TO_ADDR
// if GetTaskList ( unit ) then
72841: LD_VAR 0 1
72845: PPUSH
72846: CALL_OW 437
72850: IFFALSE 72933
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72852: LD_STRING M
72854: PUSH
72855: LD_VAR 0 1
72859: PPUSH
72860: CALL_OW 437
72864: PUSH
72865: LD_INT 1
72867: ARRAY
72868: PUSH
72869: LD_INT 1
72871: ARRAY
72872: EQUAL
72873: PUSH
72874: LD_VAR 0 2
72878: PUSH
72879: LD_VAR 0 1
72883: PPUSH
72884: CALL_OW 437
72888: PUSH
72889: LD_INT 1
72891: ARRAY
72892: PUSH
72893: LD_INT 2
72895: ARRAY
72896: EQUAL
72897: AND
72898: PUSH
72899: LD_VAR 0 3
72903: PUSH
72904: LD_VAR 0 1
72908: PPUSH
72909: CALL_OW 437
72913: PUSH
72914: LD_INT 1
72916: ARRAY
72917: PUSH
72918: LD_INT 3
72920: ARRAY
72921: EQUAL
72922: AND
72923: IFFALSE 72933
// result := true ;
72925: LD_ADDR_VAR 0 4
72929: PUSH
72930: LD_INT 1
72932: ST_TO_ADDR
// end ; end ;
72933: LD_VAR 0 4
72937: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
72938: LD_INT 0
72940: PPUSH
72941: PPUSH
72942: PPUSH
72943: PPUSH
// if not unit or not area then
72944: LD_VAR 0 1
72948: NOT
72949: PUSH
72950: LD_VAR 0 2
72954: NOT
72955: OR
72956: IFFALSE 72960
// exit ;
72958: GO 73136
// tmp := AreaToList ( area , i ) ;
72960: LD_ADDR_VAR 0 6
72964: PUSH
72965: LD_VAR 0 2
72969: PPUSH
72970: LD_VAR 0 5
72974: PPUSH
72975: CALL_OW 517
72979: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
72980: LD_ADDR_VAR 0 5
72984: PUSH
72985: DOUBLE
72986: LD_INT 1
72988: DEC
72989: ST_TO_ADDR
72990: LD_VAR 0 6
72994: PUSH
72995: LD_INT 1
72997: ARRAY
72998: PUSH
72999: FOR_TO
73000: IFFALSE 73134
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
73002: LD_ADDR_VAR 0 7
73006: PUSH
73007: LD_VAR 0 6
73011: PUSH
73012: LD_INT 1
73014: ARRAY
73015: PUSH
73016: LD_VAR 0 5
73020: ARRAY
73021: PUSH
73022: LD_VAR 0 6
73026: PUSH
73027: LD_INT 2
73029: ARRAY
73030: PUSH
73031: LD_VAR 0 5
73035: ARRAY
73036: PUSH
73037: EMPTY
73038: LIST
73039: LIST
73040: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
73041: LD_INT 92
73043: PUSH
73044: LD_VAR 0 7
73048: PUSH
73049: LD_INT 1
73051: ARRAY
73052: PUSH
73053: LD_VAR 0 7
73057: PUSH
73058: LD_INT 2
73060: ARRAY
73061: PUSH
73062: LD_INT 2
73064: PUSH
73065: EMPTY
73066: LIST
73067: LIST
73068: LIST
73069: LIST
73070: PPUSH
73071: CALL_OW 69
73075: PUSH
73076: LD_INT 0
73078: EQUAL
73079: IFFALSE 73132
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
73081: LD_VAR 0 1
73085: PPUSH
73086: LD_VAR 0 7
73090: PUSH
73091: LD_INT 1
73093: ARRAY
73094: PPUSH
73095: LD_VAR 0 7
73099: PUSH
73100: LD_INT 2
73102: ARRAY
73103: PPUSH
73104: LD_VAR 0 3
73108: PPUSH
73109: CALL_OW 48
// result := IsPlaced ( unit ) ;
73113: LD_ADDR_VAR 0 4
73117: PUSH
73118: LD_VAR 0 1
73122: PPUSH
73123: CALL_OW 305
73127: ST_TO_ADDR
// exit ;
73128: POP
73129: POP
73130: GO 73136
// end ; end ;
73132: GO 72999
73134: POP
73135: POP
// end ;
73136: LD_VAR 0 4
73140: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
73141: LD_INT 0
73143: PPUSH
73144: PPUSH
73145: PPUSH
// if not side or side > 8 then
73146: LD_VAR 0 1
73150: NOT
73151: PUSH
73152: LD_VAR 0 1
73156: PUSH
73157: LD_INT 8
73159: GREATER
73160: OR
73161: IFFALSE 73165
// exit ;
73163: GO 73352
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
73165: LD_ADDR_VAR 0 4
73169: PUSH
73170: LD_INT 22
73172: PUSH
73173: LD_VAR 0 1
73177: PUSH
73178: EMPTY
73179: LIST
73180: LIST
73181: PUSH
73182: LD_INT 21
73184: PUSH
73185: LD_INT 3
73187: PUSH
73188: EMPTY
73189: LIST
73190: LIST
73191: PUSH
73192: EMPTY
73193: LIST
73194: LIST
73195: PPUSH
73196: CALL_OW 69
73200: ST_TO_ADDR
// if not tmp then
73201: LD_VAR 0 4
73205: NOT
73206: IFFALSE 73210
// exit ;
73208: GO 73352
// enable_addtolog := true ;
73210: LD_ADDR_OWVAR 81
73214: PUSH
73215: LD_INT 1
73217: ST_TO_ADDR
// AddToLog ( [ ) ;
73218: LD_STRING [
73220: PPUSH
73221: CALL_OW 561
// for i in tmp do
73225: LD_ADDR_VAR 0 3
73229: PUSH
73230: LD_VAR 0 4
73234: PUSH
73235: FOR_IN
73236: IFFALSE 73343
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
73238: LD_STRING [
73240: PUSH
73241: LD_VAR 0 3
73245: PPUSH
73246: CALL_OW 266
73250: STR
73251: PUSH
73252: LD_STRING , 
73254: STR
73255: PUSH
73256: LD_VAR 0 3
73260: PPUSH
73261: CALL_OW 250
73265: STR
73266: PUSH
73267: LD_STRING , 
73269: STR
73270: PUSH
73271: LD_VAR 0 3
73275: PPUSH
73276: CALL_OW 251
73280: STR
73281: PUSH
73282: LD_STRING , 
73284: STR
73285: PUSH
73286: LD_VAR 0 3
73290: PPUSH
73291: CALL_OW 254
73295: STR
73296: PUSH
73297: LD_STRING , 
73299: STR
73300: PUSH
73301: LD_VAR 0 3
73305: PPUSH
73306: LD_INT 1
73308: PPUSH
73309: CALL_OW 268
73313: STR
73314: PUSH
73315: LD_STRING , 
73317: STR
73318: PUSH
73319: LD_VAR 0 3
73323: PPUSH
73324: LD_INT 2
73326: PPUSH
73327: CALL_OW 268
73331: STR
73332: PUSH
73333: LD_STRING ],
73335: STR
73336: PPUSH
73337: CALL_OW 561
// end ;
73341: GO 73235
73343: POP
73344: POP
// AddToLog ( ]; ) ;
73345: LD_STRING ];
73347: PPUSH
73348: CALL_OW 561
// end ;
73352: LD_VAR 0 2
73356: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
73357: LD_INT 0
73359: PPUSH
73360: PPUSH
73361: PPUSH
73362: PPUSH
73363: PPUSH
// if not area or not rate or not max then
73364: LD_VAR 0 1
73368: NOT
73369: PUSH
73370: LD_VAR 0 2
73374: NOT
73375: OR
73376: PUSH
73377: LD_VAR 0 4
73381: NOT
73382: OR
73383: IFFALSE 73387
// exit ;
73385: GO 73576
// while 1 do
73387: LD_INT 1
73389: IFFALSE 73576
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
73391: LD_ADDR_VAR 0 9
73395: PUSH
73396: LD_VAR 0 1
73400: PPUSH
73401: LD_INT 1
73403: PPUSH
73404: CALL_OW 287
73408: PUSH
73409: LD_INT 10
73411: MUL
73412: ST_TO_ADDR
// r := rate / 10 ;
73413: LD_ADDR_VAR 0 7
73417: PUSH
73418: LD_VAR 0 2
73422: PUSH
73423: LD_INT 10
73425: DIVREAL
73426: ST_TO_ADDR
// time := 1 1$00 ;
73427: LD_ADDR_VAR 0 8
73431: PUSH
73432: LD_INT 2100
73434: ST_TO_ADDR
// if amount < min then
73435: LD_VAR 0 9
73439: PUSH
73440: LD_VAR 0 3
73444: LESS
73445: IFFALSE 73463
// r := r * 2 else
73447: LD_ADDR_VAR 0 7
73451: PUSH
73452: LD_VAR 0 7
73456: PUSH
73457: LD_INT 2
73459: MUL
73460: ST_TO_ADDR
73461: GO 73489
// if amount > max then
73463: LD_VAR 0 9
73467: PUSH
73468: LD_VAR 0 4
73472: GREATER
73473: IFFALSE 73489
// r := r / 2 ;
73475: LD_ADDR_VAR 0 7
73479: PUSH
73480: LD_VAR 0 7
73484: PUSH
73485: LD_INT 2
73487: DIVREAL
73488: ST_TO_ADDR
// time := time / r ;
73489: LD_ADDR_VAR 0 8
73493: PUSH
73494: LD_VAR 0 8
73498: PUSH
73499: LD_VAR 0 7
73503: DIVREAL
73504: ST_TO_ADDR
// if time < 0 then
73505: LD_VAR 0 8
73509: PUSH
73510: LD_INT 0
73512: LESS
73513: IFFALSE 73530
// time := time * - 1 ;
73515: LD_ADDR_VAR 0 8
73519: PUSH
73520: LD_VAR 0 8
73524: PUSH
73525: LD_INT 1
73527: NEG
73528: MUL
73529: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
73530: LD_VAR 0 8
73534: PUSH
73535: LD_INT 35
73537: PPUSH
73538: LD_INT 875
73540: PPUSH
73541: CALL_OW 12
73545: PLUS
73546: PPUSH
73547: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
73551: LD_INT 1
73553: PPUSH
73554: LD_INT 5
73556: PPUSH
73557: CALL_OW 12
73561: PPUSH
73562: LD_VAR 0 1
73566: PPUSH
73567: LD_INT 1
73569: PPUSH
73570: CALL_OW 55
// end ;
73574: GO 73387
// end ;
73576: LD_VAR 0 5
73580: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
73581: LD_INT 0
73583: PPUSH
73584: PPUSH
73585: PPUSH
73586: PPUSH
73587: PPUSH
73588: PPUSH
73589: PPUSH
73590: PPUSH
// if not turrets or not factories then
73591: LD_VAR 0 1
73595: NOT
73596: PUSH
73597: LD_VAR 0 2
73601: NOT
73602: OR
73603: IFFALSE 73607
// exit ;
73605: GO 73914
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
73607: LD_ADDR_VAR 0 10
73611: PUSH
73612: LD_INT 5
73614: PUSH
73615: LD_INT 6
73617: PUSH
73618: EMPTY
73619: LIST
73620: LIST
73621: PUSH
73622: LD_INT 2
73624: PUSH
73625: LD_INT 4
73627: PUSH
73628: EMPTY
73629: LIST
73630: LIST
73631: PUSH
73632: LD_INT 3
73634: PUSH
73635: LD_INT 5
73637: PUSH
73638: EMPTY
73639: LIST
73640: LIST
73641: PUSH
73642: EMPTY
73643: LIST
73644: LIST
73645: LIST
73646: PUSH
73647: LD_INT 24
73649: PUSH
73650: LD_INT 25
73652: PUSH
73653: EMPTY
73654: LIST
73655: LIST
73656: PUSH
73657: LD_INT 23
73659: PUSH
73660: LD_INT 27
73662: PUSH
73663: EMPTY
73664: LIST
73665: LIST
73666: PUSH
73667: EMPTY
73668: LIST
73669: LIST
73670: PUSH
73671: LD_INT 42
73673: PUSH
73674: LD_INT 43
73676: PUSH
73677: EMPTY
73678: LIST
73679: LIST
73680: PUSH
73681: LD_INT 44
73683: PUSH
73684: LD_INT 46
73686: PUSH
73687: EMPTY
73688: LIST
73689: LIST
73690: PUSH
73691: LD_INT 45
73693: PUSH
73694: LD_INT 47
73696: PUSH
73697: EMPTY
73698: LIST
73699: LIST
73700: PUSH
73701: EMPTY
73702: LIST
73703: LIST
73704: LIST
73705: PUSH
73706: EMPTY
73707: LIST
73708: LIST
73709: LIST
73710: ST_TO_ADDR
// result := [ ] ;
73711: LD_ADDR_VAR 0 3
73715: PUSH
73716: EMPTY
73717: ST_TO_ADDR
// for i in turrets do
73718: LD_ADDR_VAR 0 4
73722: PUSH
73723: LD_VAR 0 1
73727: PUSH
73728: FOR_IN
73729: IFFALSE 73912
// begin nat := GetNation ( i ) ;
73731: LD_ADDR_VAR 0 7
73735: PUSH
73736: LD_VAR 0 4
73740: PPUSH
73741: CALL_OW 248
73745: ST_TO_ADDR
// weapon := 0 ;
73746: LD_ADDR_VAR 0 8
73750: PUSH
73751: LD_INT 0
73753: ST_TO_ADDR
// if not nat then
73754: LD_VAR 0 7
73758: NOT
73759: IFFALSE 73763
// continue ;
73761: GO 73728
// for j in list [ nat ] do
73763: LD_ADDR_VAR 0 5
73767: PUSH
73768: LD_VAR 0 10
73772: PUSH
73773: LD_VAR 0 7
73777: ARRAY
73778: PUSH
73779: FOR_IN
73780: IFFALSE 73821
// if GetBWeapon ( i ) = j [ 1 ] then
73782: LD_VAR 0 4
73786: PPUSH
73787: CALL_OW 269
73791: PUSH
73792: LD_VAR 0 5
73796: PUSH
73797: LD_INT 1
73799: ARRAY
73800: EQUAL
73801: IFFALSE 73819
// begin weapon := j [ 2 ] ;
73803: LD_ADDR_VAR 0 8
73807: PUSH
73808: LD_VAR 0 5
73812: PUSH
73813: LD_INT 2
73815: ARRAY
73816: ST_TO_ADDR
// break ;
73817: GO 73821
// end ;
73819: GO 73779
73821: POP
73822: POP
// if not weapon then
73823: LD_VAR 0 8
73827: NOT
73828: IFFALSE 73832
// continue ;
73830: GO 73728
// for k in factories do
73832: LD_ADDR_VAR 0 6
73836: PUSH
73837: LD_VAR 0 2
73841: PUSH
73842: FOR_IN
73843: IFFALSE 73908
// begin weapons := AvailableWeaponList ( k ) ;
73845: LD_ADDR_VAR 0 9
73849: PUSH
73850: LD_VAR 0 6
73854: PPUSH
73855: CALL_OW 478
73859: ST_TO_ADDR
// if not weapons then
73860: LD_VAR 0 9
73864: NOT
73865: IFFALSE 73869
// continue ;
73867: GO 73842
// if weapon in weapons then
73869: LD_VAR 0 8
73873: PUSH
73874: LD_VAR 0 9
73878: IN
73879: IFFALSE 73906
// begin result := [ i , weapon ] ;
73881: LD_ADDR_VAR 0 3
73885: PUSH
73886: LD_VAR 0 4
73890: PUSH
73891: LD_VAR 0 8
73895: PUSH
73896: EMPTY
73897: LIST
73898: LIST
73899: ST_TO_ADDR
// exit ;
73900: POP
73901: POP
73902: POP
73903: POP
73904: GO 73914
// end ; end ;
73906: GO 73842
73908: POP
73909: POP
// end ;
73910: GO 73728
73912: POP
73913: POP
// end ;
73914: LD_VAR 0 3
73918: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
73919: LD_INT 0
73921: PPUSH
// if not side or side > 8 then
73922: LD_VAR 0 3
73926: NOT
73927: PUSH
73928: LD_VAR 0 3
73932: PUSH
73933: LD_INT 8
73935: GREATER
73936: OR
73937: IFFALSE 73941
// exit ;
73939: GO 74000
// if not range then
73941: LD_VAR 0 4
73945: NOT
73946: IFFALSE 73957
// range := - 12 ;
73948: LD_ADDR_VAR 0 4
73952: PUSH
73953: LD_INT 12
73955: NEG
73956: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
73957: LD_VAR 0 1
73961: PPUSH
73962: LD_VAR 0 2
73966: PPUSH
73967: LD_VAR 0 3
73971: PPUSH
73972: LD_VAR 0 4
73976: PPUSH
73977: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
73981: LD_VAR 0 1
73985: PPUSH
73986: LD_VAR 0 2
73990: PPUSH
73991: LD_VAR 0 3
73995: PPUSH
73996: CALL_OW 331
// end ;
74000: LD_VAR 0 5
74004: RET
// export function Video ( mode ) ; begin
74005: LD_INT 0
74007: PPUSH
// ingame_video = mode ;
74008: LD_ADDR_OWVAR 52
74012: PUSH
74013: LD_VAR 0 1
74017: ST_TO_ADDR
// interface_hidden = mode ;
74018: LD_ADDR_OWVAR 54
74022: PUSH
74023: LD_VAR 0 1
74027: ST_TO_ADDR
// end ;
74028: LD_VAR 0 2
74032: RET
// export function Join ( array , element ) ; begin
74033: LD_INT 0
74035: PPUSH
// result := Replace ( array , array + 1 , element ) ;
74036: LD_ADDR_VAR 0 3
74040: PUSH
74041: LD_VAR 0 1
74045: PPUSH
74046: LD_VAR 0 1
74050: PUSH
74051: LD_INT 1
74053: PLUS
74054: PPUSH
74055: LD_VAR 0 2
74059: PPUSH
74060: CALL_OW 1
74064: ST_TO_ADDR
// end ;
74065: LD_VAR 0 3
74069: RET
// export function JoinUnion ( array , element ) ; begin
74070: LD_INT 0
74072: PPUSH
// result := array union element ;
74073: LD_ADDR_VAR 0 3
74077: PUSH
74078: LD_VAR 0 1
74082: PUSH
74083: LD_VAR 0 2
74087: UNION
74088: ST_TO_ADDR
// end ;
74089: LD_VAR 0 3
74093: RET
// export function GetBehemoths ( side ) ; begin
74094: LD_INT 0
74096: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
74097: LD_ADDR_VAR 0 2
74101: PUSH
74102: LD_INT 22
74104: PUSH
74105: LD_VAR 0 1
74109: PUSH
74110: EMPTY
74111: LIST
74112: LIST
74113: PUSH
74114: LD_INT 31
74116: PUSH
74117: LD_INT 25
74119: PUSH
74120: EMPTY
74121: LIST
74122: LIST
74123: PUSH
74124: EMPTY
74125: LIST
74126: LIST
74127: PPUSH
74128: CALL_OW 69
74132: ST_TO_ADDR
// end ;
74133: LD_VAR 0 2
74137: RET
// export function Shuffle ( array ) ; var i , index ; begin
74138: LD_INT 0
74140: PPUSH
74141: PPUSH
74142: PPUSH
// result := [ ] ;
74143: LD_ADDR_VAR 0 2
74147: PUSH
74148: EMPTY
74149: ST_TO_ADDR
// if not array then
74150: LD_VAR 0 1
74154: NOT
74155: IFFALSE 74159
// exit ;
74157: GO 74258
// Randomize ;
74159: CALL_OW 10
// for i = array downto 1 do
74163: LD_ADDR_VAR 0 3
74167: PUSH
74168: DOUBLE
74169: LD_VAR 0 1
74173: INC
74174: ST_TO_ADDR
74175: LD_INT 1
74177: PUSH
74178: FOR_DOWNTO
74179: IFFALSE 74256
// begin index := rand ( 1 , array ) ;
74181: LD_ADDR_VAR 0 4
74185: PUSH
74186: LD_INT 1
74188: PPUSH
74189: LD_VAR 0 1
74193: PPUSH
74194: CALL_OW 12
74198: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
74199: LD_ADDR_VAR 0 2
74203: PUSH
74204: LD_VAR 0 2
74208: PPUSH
74209: LD_VAR 0 2
74213: PUSH
74214: LD_INT 1
74216: PLUS
74217: PPUSH
74218: LD_VAR 0 1
74222: PUSH
74223: LD_VAR 0 4
74227: ARRAY
74228: PPUSH
74229: CALL_OW 2
74233: ST_TO_ADDR
// array := Delete ( array , index ) ;
74234: LD_ADDR_VAR 0 1
74238: PUSH
74239: LD_VAR 0 1
74243: PPUSH
74244: LD_VAR 0 4
74248: PPUSH
74249: CALL_OW 3
74253: ST_TO_ADDR
// end ;
74254: GO 74178
74256: POP
74257: POP
// end ;
74258: LD_VAR 0 2
74262: RET
// export function GetBaseMaterials ( base ) ; begin
74263: LD_INT 0
74265: PPUSH
// result := [ 0 , 0 , 0 ] ;
74266: LD_ADDR_VAR 0 2
74270: PUSH
74271: LD_INT 0
74273: PUSH
74274: LD_INT 0
74276: PUSH
74277: LD_INT 0
74279: PUSH
74280: EMPTY
74281: LIST
74282: LIST
74283: LIST
74284: ST_TO_ADDR
// if not base then
74285: LD_VAR 0 1
74289: NOT
74290: IFFALSE 74294
// exit ;
74292: GO 74343
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
74294: LD_ADDR_VAR 0 2
74298: PUSH
74299: LD_VAR 0 1
74303: PPUSH
74304: LD_INT 1
74306: PPUSH
74307: CALL_OW 275
74311: PUSH
74312: LD_VAR 0 1
74316: PPUSH
74317: LD_INT 2
74319: PPUSH
74320: CALL_OW 275
74324: PUSH
74325: LD_VAR 0 1
74329: PPUSH
74330: LD_INT 3
74332: PPUSH
74333: CALL_OW 275
74337: PUSH
74338: EMPTY
74339: LIST
74340: LIST
74341: LIST
74342: ST_TO_ADDR
// end ;
74343: LD_VAR 0 2
74347: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
74348: LD_INT 0
74350: PPUSH
74351: PPUSH
// result := array ;
74352: LD_ADDR_VAR 0 3
74356: PUSH
74357: LD_VAR 0 1
74361: ST_TO_ADDR
// if size >= result then
74362: LD_VAR 0 2
74366: PUSH
74367: LD_VAR 0 3
74371: GREATEREQUAL
74372: IFFALSE 74376
// exit ;
74374: GO 74426
// if size then
74376: LD_VAR 0 2
74380: IFFALSE 74426
// for i := array downto size do
74382: LD_ADDR_VAR 0 4
74386: PUSH
74387: DOUBLE
74388: LD_VAR 0 1
74392: INC
74393: ST_TO_ADDR
74394: LD_VAR 0 2
74398: PUSH
74399: FOR_DOWNTO
74400: IFFALSE 74424
// result := Delete ( result , result ) ;
74402: LD_ADDR_VAR 0 3
74406: PUSH
74407: LD_VAR 0 3
74411: PPUSH
74412: LD_VAR 0 3
74416: PPUSH
74417: CALL_OW 3
74421: ST_TO_ADDR
74422: GO 74399
74424: POP
74425: POP
// end ;
74426: LD_VAR 0 3
74430: RET
// export function ComExit ( unit ) ; var tmp ; begin
74431: LD_INT 0
74433: PPUSH
74434: PPUSH
// if not IsInUnit ( unit ) then
74435: LD_VAR 0 1
74439: PPUSH
74440: CALL_OW 310
74444: NOT
74445: IFFALSE 74449
// exit ;
74447: GO 74509
// tmp := IsInUnit ( unit ) ;
74449: LD_ADDR_VAR 0 3
74453: PUSH
74454: LD_VAR 0 1
74458: PPUSH
74459: CALL_OW 310
74463: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
74464: LD_VAR 0 3
74468: PPUSH
74469: CALL_OW 247
74473: PUSH
74474: LD_INT 2
74476: EQUAL
74477: IFFALSE 74490
// ComExitVehicle ( unit ) else
74479: LD_VAR 0 1
74483: PPUSH
74484: CALL_OW 121
74488: GO 74499
// ComExitBuilding ( unit ) ;
74490: LD_VAR 0 1
74494: PPUSH
74495: CALL_OW 122
// result := tmp ;
74499: LD_ADDR_VAR 0 2
74503: PUSH
74504: LD_VAR 0 3
74508: ST_TO_ADDR
// end ;
74509: LD_VAR 0 2
74513: RET
// export function ComExitAll ( units ) ; var i ; begin
74514: LD_INT 0
74516: PPUSH
74517: PPUSH
// if not units then
74518: LD_VAR 0 1
74522: NOT
74523: IFFALSE 74527
// exit ;
74525: GO 74553
// for i in units do
74527: LD_ADDR_VAR 0 3
74531: PUSH
74532: LD_VAR 0 1
74536: PUSH
74537: FOR_IN
74538: IFFALSE 74551
// ComExit ( i ) ;
74540: LD_VAR 0 3
74544: PPUSH
74545: CALL 74431 0 1
74549: GO 74537
74551: POP
74552: POP
// end ;
74553: LD_VAR 0 2
74557: RET
// export function ResetHc ; begin
74558: LD_INT 0
74560: PPUSH
// InitHc ;
74561: CALL_OW 19
// hc_importance := 0 ;
74565: LD_ADDR_OWVAR 32
74569: PUSH
74570: LD_INT 0
74572: ST_TO_ADDR
// end ;
74573: LD_VAR 0 1
74577: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
74578: LD_INT 0
74580: PPUSH
74581: PPUSH
74582: PPUSH
// _x := ( x1 + x2 ) div 2 ;
74583: LD_ADDR_VAR 0 6
74587: PUSH
74588: LD_VAR 0 1
74592: PUSH
74593: LD_VAR 0 3
74597: PLUS
74598: PUSH
74599: LD_INT 2
74601: DIV
74602: ST_TO_ADDR
// if _x < 0 then
74603: LD_VAR 0 6
74607: PUSH
74608: LD_INT 0
74610: LESS
74611: IFFALSE 74628
// _x := _x * - 1 ;
74613: LD_ADDR_VAR 0 6
74617: PUSH
74618: LD_VAR 0 6
74622: PUSH
74623: LD_INT 1
74625: NEG
74626: MUL
74627: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
74628: LD_ADDR_VAR 0 7
74632: PUSH
74633: LD_VAR 0 2
74637: PUSH
74638: LD_VAR 0 4
74642: PLUS
74643: PUSH
74644: LD_INT 2
74646: DIV
74647: ST_TO_ADDR
// if _y < 0 then
74648: LD_VAR 0 7
74652: PUSH
74653: LD_INT 0
74655: LESS
74656: IFFALSE 74673
// _y := _y * - 1 ;
74658: LD_ADDR_VAR 0 7
74662: PUSH
74663: LD_VAR 0 7
74667: PUSH
74668: LD_INT 1
74670: NEG
74671: MUL
74672: ST_TO_ADDR
// result := [ _x , _y ] ;
74673: LD_ADDR_VAR 0 5
74677: PUSH
74678: LD_VAR 0 6
74682: PUSH
74683: LD_VAR 0 7
74687: PUSH
74688: EMPTY
74689: LIST
74690: LIST
74691: ST_TO_ADDR
// end ;
74692: LD_VAR 0 5
74696: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
74697: LD_INT 0
74699: PPUSH
74700: PPUSH
74701: PPUSH
74702: PPUSH
// task := GetTaskList ( unit ) ;
74703: LD_ADDR_VAR 0 7
74707: PUSH
74708: LD_VAR 0 1
74712: PPUSH
74713: CALL_OW 437
74717: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
74718: LD_VAR 0 7
74722: NOT
74723: PUSH
74724: LD_VAR 0 1
74728: PPUSH
74729: LD_VAR 0 2
74733: PPUSH
74734: CALL_OW 308
74738: NOT
74739: AND
74740: IFFALSE 74744
// exit ;
74742: GO 74862
// if IsInArea ( unit , area ) then
74744: LD_VAR 0 1
74748: PPUSH
74749: LD_VAR 0 2
74753: PPUSH
74754: CALL_OW 308
74758: IFFALSE 74776
// begin ComMoveToArea ( unit , goAway ) ;
74760: LD_VAR 0 1
74764: PPUSH
74765: LD_VAR 0 3
74769: PPUSH
74770: CALL_OW 113
// exit ;
74774: GO 74862
// end ; if task [ 1 ] [ 1 ] <> M then
74776: LD_VAR 0 7
74780: PUSH
74781: LD_INT 1
74783: ARRAY
74784: PUSH
74785: LD_INT 1
74787: ARRAY
74788: PUSH
74789: LD_STRING M
74791: NONEQUAL
74792: IFFALSE 74796
// exit ;
74794: GO 74862
// x := task [ 1 ] [ 2 ] ;
74796: LD_ADDR_VAR 0 5
74800: PUSH
74801: LD_VAR 0 7
74805: PUSH
74806: LD_INT 1
74808: ARRAY
74809: PUSH
74810: LD_INT 2
74812: ARRAY
74813: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
74814: LD_ADDR_VAR 0 6
74818: PUSH
74819: LD_VAR 0 7
74823: PUSH
74824: LD_INT 1
74826: ARRAY
74827: PUSH
74828: LD_INT 3
74830: ARRAY
74831: ST_TO_ADDR
// if InArea ( x , y , area ) then
74832: LD_VAR 0 5
74836: PPUSH
74837: LD_VAR 0 6
74841: PPUSH
74842: LD_VAR 0 2
74846: PPUSH
74847: CALL_OW 309
74851: IFFALSE 74862
// ComStop ( unit ) ;
74853: LD_VAR 0 1
74857: PPUSH
74858: CALL_OW 141
// end ;
74862: LD_VAR 0 4
74866: RET
// export function Abs ( value ) ; begin
74867: LD_INT 0
74869: PPUSH
// result := value ;
74870: LD_ADDR_VAR 0 2
74874: PUSH
74875: LD_VAR 0 1
74879: ST_TO_ADDR
// if value < 0 then
74880: LD_VAR 0 1
74884: PUSH
74885: LD_INT 0
74887: LESS
74888: IFFALSE 74905
// result := value * - 1 ;
74890: LD_ADDR_VAR 0 2
74894: PUSH
74895: LD_VAR 0 1
74899: PUSH
74900: LD_INT 1
74902: NEG
74903: MUL
74904: ST_TO_ADDR
// end ;
74905: LD_VAR 0 2
74909: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
74910: LD_INT 0
74912: PPUSH
74913: PPUSH
74914: PPUSH
74915: PPUSH
74916: PPUSH
74917: PPUSH
74918: PPUSH
74919: PPUSH
// if not unit or not building then
74920: LD_VAR 0 1
74924: NOT
74925: PUSH
74926: LD_VAR 0 2
74930: NOT
74931: OR
74932: IFFALSE 74936
// exit ;
74934: GO 75162
// x := GetX ( building ) ;
74936: LD_ADDR_VAR 0 4
74940: PUSH
74941: LD_VAR 0 2
74945: PPUSH
74946: CALL_OW 250
74950: ST_TO_ADDR
// y := GetY ( building ) ;
74951: LD_ADDR_VAR 0 6
74955: PUSH
74956: LD_VAR 0 2
74960: PPUSH
74961: CALL_OW 251
74965: ST_TO_ADDR
// d := GetDir ( building ) ;
74966: LD_ADDR_VAR 0 8
74970: PUSH
74971: LD_VAR 0 2
74975: PPUSH
74976: CALL_OW 254
74980: ST_TO_ADDR
// r := 4 ;
74981: LD_ADDR_VAR 0 9
74985: PUSH
74986: LD_INT 4
74988: ST_TO_ADDR
// for i := 1 to 5 do
74989: LD_ADDR_VAR 0 10
74993: PUSH
74994: DOUBLE
74995: LD_INT 1
74997: DEC
74998: ST_TO_ADDR
74999: LD_INT 5
75001: PUSH
75002: FOR_TO
75003: IFFALSE 75160
// begin _x := ShiftX ( x , d , r + i ) ;
75005: LD_ADDR_VAR 0 5
75009: PUSH
75010: LD_VAR 0 4
75014: PPUSH
75015: LD_VAR 0 8
75019: PPUSH
75020: LD_VAR 0 9
75024: PUSH
75025: LD_VAR 0 10
75029: PLUS
75030: PPUSH
75031: CALL_OW 272
75035: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
75036: LD_ADDR_VAR 0 7
75040: PUSH
75041: LD_VAR 0 6
75045: PPUSH
75046: LD_VAR 0 8
75050: PPUSH
75051: LD_VAR 0 9
75055: PUSH
75056: LD_VAR 0 10
75060: PLUS
75061: PPUSH
75062: CALL_OW 273
75066: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
75067: LD_VAR 0 5
75071: PPUSH
75072: LD_VAR 0 7
75076: PPUSH
75077: CALL_OW 488
75081: PUSH
75082: LD_VAR 0 5
75086: PPUSH
75087: LD_VAR 0 7
75091: PPUSH
75092: CALL_OW 428
75096: PPUSH
75097: CALL_OW 247
75101: PUSH
75102: LD_INT 3
75104: PUSH
75105: LD_INT 2
75107: PUSH
75108: EMPTY
75109: LIST
75110: LIST
75111: IN
75112: NOT
75113: AND
75114: IFFALSE 75158
// begin ComMoveXY ( unit , _x , _y ) ;
75116: LD_VAR 0 1
75120: PPUSH
75121: LD_VAR 0 5
75125: PPUSH
75126: LD_VAR 0 7
75130: PPUSH
75131: CALL_OW 111
// result := [ _x , _y ] ;
75135: LD_ADDR_VAR 0 3
75139: PUSH
75140: LD_VAR 0 5
75144: PUSH
75145: LD_VAR 0 7
75149: PUSH
75150: EMPTY
75151: LIST
75152: LIST
75153: ST_TO_ADDR
// exit ;
75154: POP
75155: POP
75156: GO 75162
// end ; end ;
75158: GO 75002
75160: POP
75161: POP
// end ;
75162: LD_VAR 0 3
75166: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
75167: LD_INT 0
75169: PPUSH
75170: PPUSH
75171: PPUSH
// result := 0 ;
75172: LD_ADDR_VAR 0 3
75176: PUSH
75177: LD_INT 0
75179: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
75180: LD_VAR 0 1
75184: PUSH
75185: LD_INT 0
75187: LESS
75188: PUSH
75189: LD_VAR 0 1
75193: PUSH
75194: LD_INT 8
75196: GREATER
75197: OR
75198: PUSH
75199: LD_VAR 0 2
75203: PUSH
75204: LD_INT 0
75206: LESS
75207: OR
75208: PUSH
75209: LD_VAR 0 2
75213: PUSH
75214: LD_INT 8
75216: GREATER
75217: OR
75218: IFFALSE 75222
// exit ;
75220: GO 75297
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
75222: LD_ADDR_VAR 0 4
75226: PUSH
75227: LD_INT 22
75229: PUSH
75230: LD_VAR 0 2
75234: PUSH
75235: EMPTY
75236: LIST
75237: LIST
75238: PPUSH
75239: CALL_OW 69
75243: PUSH
75244: FOR_IN
75245: IFFALSE 75295
// begin un := UnitShoot ( i ) ;
75247: LD_ADDR_VAR 0 5
75251: PUSH
75252: LD_VAR 0 4
75256: PPUSH
75257: CALL_OW 504
75261: ST_TO_ADDR
// if GetSide ( un ) = side1 then
75262: LD_VAR 0 5
75266: PPUSH
75267: CALL_OW 255
75271: PUSH
75272: LD_VAR 0 1
75276: EQUAL
75277: IFFALSE 75293
// begin result := un ;
75279: LD_ADDR_VAR 0 3
75283: PUSH
75284: LD_VAR 0 5
75288: ST_TO_ADDR
// exit ;
75289: POP
75290: POP
75291: GO 75297
// end ; end ;
75293: GO 75244
75295: POP
75296: POP
// end ;
75297: LD_VAR 0 3
75301: RET
// export function GetCargoBay ( units ) ; begin
75302: LD_INT 0
75304: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
75305: LD_ADDR_VAR 0 2
75309: PUSH
75310: LD_VAR 0 1
75314: PPUSH
75315: LD_INT 2
75317: PUSH
75318: LD_INT 34
75320: PUSH
75321: LD_INT 12
75323: PUSH
75324: EMPTY
75325: LIST
75326: LIST
75327: PUSH
75328: LD_INT 34
75330: PUSH
75331: LD_INT 51
75333: PUSH
75334: EMPTY
75335: LIST
75336: LIST
75337: PUSH
75338: LD_INT 34
75340: PUSH
75341: LD_INT 32
75343: PUSH
75344: EMPTY
75345: LIST
75346: LIST
75347: PUSH
75348: LD_INT 34
75350: PUSH
75351: LD_INT 89
75353: PUSH
75354: EMPTY
75355: LIST
75356: LIST
75357: PUSH
75358: EMPTY
75359: LIST
75360: LIST
75361: LIST
75362: LIST
75363: LIST
75364: PPUSH
75365: CALL_OW 72
75369: ST_TO_ADDR
// end ;
75370: LD_VAR 0 2
75374: RET
// export function Negate ( value ) ; begin
75375: LD_INT 0
75377: PPUSH
// result := not value ;
75378: LD_ADDR_VAR 0 2
75382: PUSH
75383: LD_VAR 0 1
75387: NOT
75388: ST_TO_ADDR
// end ;
75389: LD_VAR 0 2
75393: RET
// export function Inc ( value ) ; begin
75394: LD_INT 0
75396: PPUSH
// result := value + 1 ;
75397: LD_ADDR_VAR 0 2
75401: PUSH
75402: LD_VAR 0 1
75406: PUSH
75407: LD_INT 1
75409: PLUS
75410: ST_TO_ADDR
// end ;
75411: LD_VAR 0 2
75415: RET
// export function Dec ( value ) ; begin
75416: LD_INT 0
75418: PPUSH
// result := value - 1 ;
75419: LD_ADDR_VAR 0 2
75423: PUSH
75424: LD_VAR 0 1
75428: PUSH
75429: LD_INT 1
75431: MINUS
75432: ST_TO_ADDR
// end ;
75433: LD_VAR 0 2
75437: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
75438: LD_INT 0
75440: PPUSH
75441: PPUSH
75442: PPUSH
75443: PPUSH
75444: PPUSH
75445: PPUSH
75446: PPUSH
75447: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
75448: LD_VAR 0 1
75452: PPUSH
75453: LD_VAR 0 2
75457: PPUSH
75458: CALL_OW 488
75462: NOT
75463: PUSH
75464: LD_VAR 0 3
75468: PPUSH
75469: LD_VAR 0 4
75473: PPUSH
75474: CALL_OW 488
75478: NOT
75479: OR
75480: IFFALSE 75493
// begin result := - 1 ;
75482: LD_ADDR_VAR 0 5
75486: PUSH
75487: LD_INT 1
75489: NEG
75490: ST_TO_ADDR
// exit ;
75491: GO 75728
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
75493: LD_ADDR_VAR 0 12
75497: PUSH
75498: LD_VAR 0 1
75502: PPUSH
75503: LD_VAR 0 2
75507: PPUSH
75508: LD_VAR 0 3
75512: PPUSH
75513: LD_VAR 0 4
75517: PPUSH
75518: CALL 74578 0 4
75522: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
75523: LD_ADDR_VAR 0 11
75527: PUSH
75528: LD_VAR 0 1
75532: PPUSH
75533: LD_VAR 0 2
75537: PPUSH
75538: LD_VAR 0 12
75542: PUSH
75543: LD_INT 1
75545: ARRAY
75546: PPUSH
75547: LD_VAR 0 12
75551: PUSH
75552: LD_INT 2
75554: ARRAY
75555: PPUSH
75556: CALL_OW 298
75560: ST_TO_ADDR
// distance := 9999 ;
75561: LD_ADDR_VAR 0 10
75565: PUSH
75566: LD_INT 9999
75568: ST_TO_ADDR
// for i := 0 to 5 do
75569: LD_ADDR_VAR 0 6
75573: PUSH
75574: DOUBLE
75575: LD_INT 0
75577: DEC
75578: ST_TO_ADDR
75579: LD_INT 5
75581: PUSH
75582: FOR_TO
75583: IFFALSE 75726
// begin _x := ShiftX ( x1 , i , centerDist ) ;
75585: LD_ADDR_VAR 0 7
75589: PUSH
75590: LD_VAR 0 1
75594: PPUSH
75595: LD_VAR 0 6
75599: PPUSH
75600: LD_VAR 0 11
75604: PPUSH
75605: CALL_OW 272
75609: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
75610: LD_ADDR_VAR 0 8
75614: PUSH
75615: LD_VAR 0 2
75619: PPUSH
75620: LD_VAR 0 6
75624: PPUSH
75625: LD_VAR 0 11
75629: PPUSH
75630: CALL_OW 273
75634: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
75635: LD_VAR 0 7
75639: PPUSH
75640: LD_VAR 0 8
75644: PPUSH
75645: CALL_OW 488
75649: NOT
75650: IFFALSE 75654
// continue ;
75652: GO 75582
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
75654: LD_ADDR_VAR 0 9
75658: PUSH
75659: LD_VAR 0 12
75663: PUSH
75664: LD_INT 1
75666: ARRAY
75667: PPUSH
75668: LD_VAR 0 12
75672: PUSH
75673: LD_INT 2
75675: ARRAY
75676: PPUSH
75677: LD_VAR 0 7
75681: PPUSH
75682: LD_VAR 0 8
75686: PPUSH
75687: CALL_OW 298
75691: ST_TO_ADDR
// if tmp < distance then
75692: LD_VAR 0 9
75696: PUSH
75697: LD_VAR 0 10
75701: LESS
75702: IFFALSE 75724
// begin result := i ;
75704: LD_ADDR_VAR 0 5
75708: PUSH
75709: LD_VAR 0 6
75713: ST_TO_ADDR
// distance := tmp ;
75714: LD_ADDR_VAR 0 10
75718: PUSH
75719: LD_VAR 0 9
75723: ST_TO_ADDR
// end ; end ;
75724: GO 75582
75726: POP
75727: POP
// end ;
75728: LD_VAR 0 5
75732: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75733: LD_INT 0
75735: PPUSH
75736: PPUSH
// if not driver or not IsInUnit ( driver ) then
75737: LD_VAR 0 1
75741: NOT
75742: PUSH
75743: LD_VAR 0 1
75747: PPUSH
75748: CALL_OW 310
75752: NOT
75753: OR
75754: IFFALSE 75758
// exit ;
75756: GO 75848
// vehicle := IsInUnit ( driver ) ;
75758: LD_ADDR_VAR 0 3
75762: PUSH
75763: LD_VAR 0 1
75767: PPUSH
75768: CALL_OW 310
75772: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75773: LD_VAR 0 1
75777: PPUSH
75778: LD_STRING \
75780: PUSH
75781: LD_INT 0
75783: PUSH
75784: LD_INT 0
75786: PUSH
75787: LD_INT 0
75789: PUSH
75790: LD_INT 0
75792: PUSH
75793: LD_INT 0
75795: PUSH
75796: LD_INT 0
75798: PUSH
75799: EMPTY
75800: LIST
75801: LIST
75802: LIST
75803: LIST
75804: LIST
75805: LIST
75806: LIST
75807: PUSH
75808: LD_STRING E
75810: PUSH
75811: LD_INT 0
75813: PUSH
75814: LD_INT 0
75816: PUSH
75817: LD_VAR 0 3
75821: PUSH
75822: LD_INT 0
75824: PUSH
75825: LD_INT 0
75827: PUSH
75828: LD_INT 0
75830: PUSH
75831: EMPTY
75832: LIST
75833: LIST
75834: LIST
75835: LIST
75836: LIST
75837: LIST
75838: LIST
75839: PUSH
75840: EMPTY
75841: LIST
75842: LIST
75843: PPUSH
75844: CALL_OW 446
// end ;
75848: LD_VAR 0 2
75852: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75853: LD_INT 0
75855: PPUSH
75856: PPUSH
// if not driver or not IsInUnit ( driver ) then
75857: LD_VAR 0 1
75861: NOT
75862: PUSH
75863: LD_VAR 0 1
75867: PPUSH
75868: CALL_OW 310
75872: NOT
75873: OR
75874: IFFALSE 75878
// exit ;
75876: GO 75968
// vehicle := IsInUnit ( driver ) ;
75878: LD_ADDR_VAR 0 3
75882: PUSH
75883: LD_VAR 0 1
75887: PPUSH
75888: CALL_OW 310
75892: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75893: LD_VAR 0 1
75897: PPUSH
75898: LD_STRING \
75900: PUSH
75901: LD_INT 0
75903: PUSH
75904: LD_INT 0
75906: PUSH
75907: LD_INT 0
75909: PUSH
75910: LD_INT 0
75912: PUSH
75913: LD_INT 0
75915: PUSH
75916: LD_INT 0
75918: PUSH
75919: EMPTY
75920: LIST
75921: LIST
75922: LIST
75923: LIST
75924: LIST
75925: LIST
75926: LIST
75927: PUSH
75928: LD_STRING E
75930: PUSH
75931: LD_INT 0
75933: PUSH
75934: LD_INT 0
75936: PUSH
75937: LD_VAR 0 3
75941: PUSH
75942: LD_INT 0
75944: PUSH
75945: LD_INT 0
75947: PUSH
75948: LD_INT 0
75950: PUSH
75951: EMPTY
75952: LIST
75953: LIST
75954: LIST
75955: LIST
75956: LIST
75957: LIST
75958: LIST
75959: PUSH
75960: EMPTY
75961: LIST
75962: LIST
75963: PPUSH
75964: CALL_OW 447
// end ;
75968: LD_VAR 0 2
75972: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
75973: LD_INT 0
75975: PPUSH
75976: PPUSH
75977: PPUSH
// tmp := [ ] ;
75978: LD_ADDR_VAR 0 5
75982: PUSH
75983: EMPTY
75984: ST_TO_ADDR
// for i in units do
75985: LD_ADDR_VAR 0 4
75989: PUSH
75990: LD_VAR 0 1
75994: PUSH
75995: FOR_IN
75996: IFFALSE 76034
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
75998: LD_ADDR_VAR 0 5
76002: PUSH
76003: LD_VAR 0 5
76007: PPUSH
76008: LD_VAR 0 5
76012: PUSH
76013: LD_INT 1
76015: PLUS
76016: PPUSH
76017: LD_VAR 0 4
76021: PPUSH
76022: CALL_OW 256
76026: PPUSH
76027: CALL_OW 2
76031: ST_TO_ADDR
76032: GO 75995
76034: POP
76035: POP
// if not tmp then
76036: LD_VAR 0 5
76040: NOT
76041: IFFALSE 76045
// exit ;
76043: GO 76093
// if asc then
76045: LD_VAR 0 2
76049: IFFALSE 76073
// result := SortListByListAsc ( units , tmp ) else
76051: LD_ADDR_VAR 0 3
76055: PUSH
76056: LD_VAR 0 1
76060: PPUSH
76061: LD_VAR 0 5
76065: PPUSH
76066: CALL_OW 76
76070: ST_TO_ADDR
76071: GO 76093
// result := SortListByListDesc ( units , tmp ) ;
76073: LD_ADDR_VAR 0 3
76077: PUSH
76078: LD_VAR 0 1
76082: PPUSH
76083: LD_VAR 0 5
76087: PPUSH
76088: CALL_OW 77
76092: ST_TO_ADDR
// end ;
76093: LD_VAR 0 3
76097: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
76098: LD_INT 0
76100: PPUSH
76101: PPUSH
// task := GetTaskList ( mech ) ;
76102: LD_ADDR_VAR 0 4
76106: PUSH
76107: LD_VAR 0 1
76111: PPUSH
76112: CALL_OW 437
76116: ST_TO_ADDR
// if not task then
76117: LD_VAR 0 4
76121: NOT
76122: IFFALSE 76126
// exit ;
76124: GO 76168
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
76126: LD_ADDR_VAR 0 3
76130: PUSH
76131: LD_VAR 0 4
76135: PUSH
76136: LD_INT 1
76138: ARRAY
76139: PUSH
76140: LD_INT 1
76142: ARRAY
76143: PUSH
76144: LD_STRING r
76146: EQUAL
76147: PUSH
76148: LD_VAR 0 4
76152: PUSH
76153: LD_INT 1
76155: ARRAY
76156: PUSH
76157: LD_INT 4
76159: ARRAY
76160: PUSH
76161: LD_VAR 0 2
76165: EQUAL
76166: AND
76167: ST_TO_ADDR
// end ;
76168: LD_VAR 0 3
76172: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
76173: LD_INT 0
76175: PPUSH
// SetDir ( unit , d ) ;
76176: LD_VAR 0 1
76180: PPUSH
76181: LD_VAR 0 4
76185: PPUSH
76186: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
76190: LD_VAR 0 1
76194: PPUSH
76195: LD_VAR 0 2
76199: PPUSH
76200: LD_VAR 0 3
76204: PPUSH
76205: LD_VAR 0 5
76209: PPUSH
76210: CALL_OW 48
// end ;
76214: LD_VAR 0 6
76218: RET
// export function ToNaturalNumber ( number ) ; begin
76219: LD_INT 0
76221: PPUSH
// result := number div 1 ;
76222: LD_ADDR_VAR 0 2
76226: PUSH
76227: LD_VAR 0 1
76231: PUSH
76232: LD_INT 1
76234: DIV
76235: ST_TO_ADDR
// if number < 0 then
76236: LD_VAR 0 1
76240: PUSH
76241: LD_INT 0
76243: LESS
76244: IFFALSE 76254
// result := 0 ;
76246: LD_ADDR_VAR 0 2
76250: PUSH
76251: LD_INT 0
76253: ST_TO_ADDR
// end ;
76254: LD_VAR 0 2
76258: RET
// export function SortByClass ( units , class ) ; var un ; begin
76259: LD_INT 0
76261: PPUSH
76262: PPUSH
// if not units or not class then
76263: LD_VAR 0 1
76267: NOT
76268: PUSH
76269: LD_VAR 0 2
76273: NOT
76274: OR
76275: IFFALSE 76279
// exit ;
76277: GO 76374
// result := [ ] ;
76279: LD_ADDR_VAR 0 3
76283: PUSH
76284: EMPTY
76285: ST_TO_ADDR
// for un in units do
76286: LD_ADDR_VAR 0 4
76290: PUSH
76291: LD_VAR 0 1
76295: PUSH
76296: FOR_IN
76297: IFFALSE 76372
// if GetClass ( un ) = class then
76299: LD_VAR 0 4
76303: PPUSH
76304: CALL_OW 257
76308: PUSH
76309: LD_VAR 0 2
76313: EQUAL
76314: IFFALSE 76341
// result := Insert ( result , 1 , un ) else
76316: LD_ADDR_VAR 0 3
76320: PUSH
76321: LD_VAR 0 3
76325: PPUSH
76326: LD_INT 1
76328: PPUSH
76329: LD_VAR 0 4
76333: PPUSH
76334: CALL_OW 2
76338: ST_TO_ADDR
76339: GO 76370
// result := Replace ( result , result + 1 , un ) ;
76341: LD_ADDR_VAR 0 3
76345: PUSH
76346: LD_VAR 0 3
76350: PPUSH
76351: LD_VAR 0 3
76355: PUSH
76356: LD_INT 1
76358: PLUS
76359: PPUSH
76360: LD_VAR 0 4
76364: PPUSH
76365: CALL_OW 1
76369: ST_TO_ADDR
76370: GO 76296
76372: POP
76373: POP
// end ;
76374: LD_VAR 0 3
76378: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
76379: LD_INT 0
76381: PPUSH
76382: PPUSH
76383: PPUSH
76384: PPUSH
76385: PPUSH
76386: PPUSH
76387: PPUSH
// result := [ ] ;
76388: LD_ADDR_VAR 0 4
76392: PUSH
76393: EMPTY
76394: ST_TO_ADDR
// if x - r < 0 then
76395: LD_VAR 0 1
76399: PUSH
76400: LD_VAR 0 3
76404: MINUS
76405: PUSH
76406: LD_INT 0
76408: LESS
76409: IFFALSE 76421
// min_x := 0 else
76411: LD_ADDR_VAR 0 8
76415: PUSH
76416: LD_INT 0
76418: ST_TO_ADDR
76419: GO 76437
// min_x := x - r ;
76421: LD_ADDR_VAR 0 8
76425: PUSH
76426: LD_VAR 0 1
76430: PUSH
76431: LD_VAR 0 3
76435: MINUS
76436: ST_TO_ADDR
// if y - r < 0 then
76437: LD_VAR 0 2
76441: PUSH
76442: LD_VAR 0 3
76446: MINUS
76447: PUSH
76448: LD_INT 0
76450: LESS
76451: IFFALSE 76463
// min_y := 0 else
76453: LD_ADDR_VAR 0 7
76457: PUSH
76458: LD_INT 0
76460: ST_TO_ADDR
76461: GO 76479
// min_y := y - r ;
76463: LD_ADDR_VAR 0 7
76467: PUSH
76468: LD_VAR 0 2
76472: PUSH
76473: LD_VAR 0 3
76477: MINUS
76478: ST_TO_ADDR
// max_x := x + r ;
76479: LD_ADDR_VAR 0 9
76483: PUSH
76484: LD_VAR 0 1
76488: PUSH
76489: LD_VAR 0 3
76493: PLUS
76494: ST_TO_ADDR
// max_y := y + r ;
76495: LD_ADDR_VAR 0 10
76499: PUSH
76500: LD_VAR 0 2
76504: PUSH
76505: LD_VAR 0 3
76509: PLUS
76510: ST_TO_ADDR
// for _x = min_x to max_x do
76511: LD_ADDR_VAR 0 5
76515: PUSH
76516: DOUBLE
76517: LD_VAR 0 8
76521: DEC
76522: ST_TO_ADDR
76523: LD_VAR 0 9
76527: PUSH
76528: FOR_TO
76529: IFFALSE 76630
// for _y = min_y to max_y do
76531: LD_ADDR_VAR 0 6
76535: PUSH
76536: DOUBLE
76537: LD_VAR 0 7
76541: DEC
76542: ST_TO_ADDR
76543: LD_VAR 0 10
76547: PUSH
76548: FOR_TO
76549: IFFALSE 76626
// begin if not ValidHex ( _x , _y ) then
76551: LD_VAR 0 5
76555: PPUSH
76556: LD_VAR 0 6
76560: PPUSH
76561: CALL_OW 488
76565: NOT
76566: IFFALSE 76570
// continue ;
76568: GO 76548
// if GetResourceTypeXY ( _x , _y ) then
76570: LD_VAR 0 5
76574: PPUSH
76575: LD_VAR 0 6
76579: PPUSH
76580: CALL_OW 283
76584: IFFALSE 76624
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
76586: LD_ADDR_VAR 0 4
76590: PUSH
76591: LD_VAR 0 4
76595: PPUSH
76596: LD_VAR 0 4
76600: PUSH
76601: LD_INT 1
76603: PLUS
76604: PPUSH
76605: LD_VAR 0 5
76609: PUSH
76610: LD_VAR 0 6
76614: PUSH
76615: EMPTY
76616: LIST
76617: LIST
76618: PPUSH
76619: CALL_OW 1
76623: ST_TO_ADDR
// end ;
76624: GO 76548
76626: POP
76627: POP
76628: GO 76528
76630: POP
76631: POP
// end ;
76632: LD_VAR 0 4
76636: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
76637: LD_INT 0
76639: PPUSH
76640: PPUSH
76641: PPUSH
76642: PPUSH
76643: PPUSH
76644: PPUSH
76645: PPUSH
76646: PPUSH
// if not units then
76647: LD_VAR 0 1
76651: NOT
76652: IFFALSE 76656
// exit ;
76654: GO 77180
// result := UnitFilter ( units , [ f_ok ] ) ;
76656: LD_ADDR_VAR 0 3
76660: PUSH
76661: LD_VAR 0 1
76665: PPUSH
76666: LD_INT 50
76668: PUSH
76669: EMPTY
76670: LIST
76671: PPUSH
76672: CALL_OW 72
76676: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
76677: LD_ADDR_VAR 0 8
76681: PUSH
76682: LD_VAR 0 1
76686: PUSH
76687: LD_INT 1
76689: ARRAY
76690: PPUSH
76691: CALL_OW 255
76695: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
76696: LD_ADDR_VAR 0 10
76700: PUSH
76701: LD_INT 29
76703: PUSH
76704: LD_INT 91
76706: PUSH
76707: LD_INT 49
76709: PUSH
76710: EMPTY
76711: LIST
76712: LIST
76713: LIST
76714: ST_TO_ADDR
// if not result then
76715: LD_VAR 0 3
76719: NOT
76720: IFFALSE 76724
// exit ;
76722: GO 77180
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
76724: LD_ADDR_VAR 0 5
76728: PUSH
76729: LD_INT 81
76731: PUSH
76732: LD_VAR 0 8
76736: PUSH
76737: EMPTY
76738: LIST
76739: LIST
76740: PPUSH
76741: CALL_OW 69
76745: ST_TO_ADDR
// for i in result do
76746: LD_ADDR_VAR 0 4
76750: PUSH
76751: LD_VAR 0 3
76755: PUSH
76756: FOR_IN
76757: IFFALSE 77178
// begin tag := GetTag ( i ) + 1 ;
76759: LD_ADDR_VAR 0 9
76763: PUSH
76764: LD_VAR 0 4
76768: PPUSH
76769: CALL_OW 110
76773: PUSH
76774: LD_INT 1
76776: PLUS
76777: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
76778: LD_ADDR_VAR 0 7
76782: PUSH
76783: LD_VAR 0 4
76787: PPUSH
76788: CALL_OW 250
76792: PPUSH
76793: LD_VAR 0 4
76797: PPUSH
76798: CALL_OW 251
76802: PPUSH
76803: LD_INT 6
76805: PPUSH
76806: CALL 76379 0 3
76810: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
76811: LD_VAR 0 4
76815: PPUSH
76816: CALL_OW 247
76820: PUSH
76821: LD_INT 2
76823: EQUAL
76824: PUSH
76825: LD_VAR 0 7
76829: AND
76830: PUSH
76831: LD_VAR 0 4
76835: PPUSH
76836: CALL_OW 264
76840: PUSH
76841: LD_VAR 0 10
76845: IN
76846: NOT
76847: AND
76848: IFFALSE 76887
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
76850: LD_VAR 0 4
76854: PPUSH
76855: LD_VAR 0 7
76859: PUSH
76860: LD_INT 1
76862: ARRAY
76863: PUSH
76864: LD_INT 1
76866: ARRAY
76867: PPUSH
76868: LD_VAR 0 7
76872: PUSH
76873: LD_INT 1
76875: ARRAY
76876: PUSH
76877: LD_INT 2
76879: ARRAY
76880: PPUSH
76881: CALL_OW 116
76885: GO 77176
// if path > tag then
76887: LD_VAR 0 2
76891: PUSH
76892: LD_VAR 0 9
76896: GREATER
76897: IFFALSE 77105
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
76899: LD_ADDR_VAR 0 6
76903: PUSH
76904: LD_VAR 0 5
76908: PPUSH
76909: LD_INT 91
76911: PUSH
76912: LD_VAR 0 4
76916: PUSH
76917: LD_INT 8
76919: PUSH
76920: EMPTY
76921: LIST
76922: LIST
76923: LIST
76924: PPUSH
76925: CALL_OW 72
76929: ST_TO_ADDR
// if nearEnemy then
76930: LD_VAR 0 6
76934: IFFALSE 77003
// begin if GetWeapon ( i ) = ru_time_lapser then
76936: LD_VAR 0 4
76940: PPUSH
76941: CALL_OW 264
76945: PUSH
76946: LD_INT 49
76948: EQUAL
76949: IFFALSE 76977
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
76951: LD_VAR 0 4
76955: PPUSH
76956: LD_VAR 0 6
76960: PPUSH
76961: LD_VAR 0 4
76965: PPUSH
76966: CALL_OW 74
76970: PPUSH
76971: CALL_OW 112
76975: GO 77001
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
76977: LD_VAR 0 4
76981: PPUSH
76982: LD_VAR 0 6
76986: PPUSH
76987: LD_VAR 0 4
76991: PPUSH
76992: CALL_OW 74
76996: PPUSH
76997: CALL 78105 0 2
// end else
77001: GO 77103
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
77003: LD_VAR 0 4
77007: PPUSH
77008: LD_VAR 0 2
77012: PUSH
77013: LD_VAR 0 9
77017: ARRAY
77018: PUSH
77019: LD_INT 1
77021: ARRAY
77022: PPUSH
77023: LD_VAR 0 2
77027: PUSH
77028: LD_VAR 0 9
77032: ARRAY
77033: PUSH
77034: LD_INT 2
77036: ARRAY
77037: PPUSH
77038: CALL_OW 297
77042: PUSH
77043: LD_INT 6
77045: GREATER
77046: IFFALSE 77089
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
77048: LD_VAR 0 4
77052: PPUSH
77053: LD_VAR 0 2
77057: PUSH
77058: LD_VAR 0 9
77062: ARRAY
77063: PUSH
77064: LD_INT 1
77066: ARRAY
77067: PPUSH
77068: LD_VAR 0 2
77072: PUSH
77073: LD_VAR 0 9
77077: ARRAY
77078: PUSH
77079: LD_INT 2
77081: ARRAY
77082: PPUSH
77083: CALL_OW 114
77087: GO 77103
// SetTag ( i , tag ) ;
77089: LD_VAR 0 4
77093: PPUSH
77094: LD_VAR 0 9
77098: PPUSH
77099: CALL_OW 109
// end else
77103: GO 77176
// if enemy then
77105: LD_VAR 0 5
77109: IFFALSE 77176
// begin if GetWeapon ( i ) = ru_time_lapser then
77111: LD_VAR 0 4
77115: PPUSH
77116: CALL_OW 264
77120: PUSH
77121: LD_INT 49
77123: EQUAL
77124: IFFALSE 77152
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
77126: LD_VAR 0 4
77130: PPUSH
77131: LD_VAR 0 5
77135: PPUSH
77136: LD_VAR 0 4
77140: PPUSH
77141: CALL_OW 74
77145: PPUSH
77146: CALL_OW 112
77150: GO 77176
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
77152: LD_VAR 0 4
77156: PPUSH
77157: LD_VAR 0 5
77161: PPUSH
77162: LD_VAR 0 4
77166: PPUSH
77167: CALL_OW 74
77171: PPUSH
77172: CALL 78105 0 2
// end ; end ;
77176: GO 76756
77178: POP
77179: POP
// end ;
77180: LD_VAR 0 3
77184: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
77185: LD_INT 0
77187: PPUSH
77188: PPUSH
77189: PPUSH
// if not unit or IsInUnit ( unit ) then
77190: LD_VAR 0 1
77194: NOT
77195: PUSH
77196: LD_VAR 0 1
77200: PPUSH
77201: CALL_OW 310
77205: OR
77206: IFFALSE 77210
// exit ;
77208: GO 77301
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
77210: LD_ADDR_VAR 0 4
77214: PUSH
77215: LD_VAR 0 1
77219: PPUSH
77220: CALL_OW 250
77224: PPUSH
77225: LD_VAR 0 2
77229: PPUSH
77230: LD_INT 1
77232: PPUSH
77233: CALL_OW 272
77237: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
77238: LD_ADDR_VAR 0 5
77242: PUSH
77243: LD_VAR 0 1
77247: PPUSH
77248: CALL_OW 251
77252: PPUSH
77253: LD_VAR 0 2
77257: PPUSH
77258: LD_INT 1
77260: PPUSH
77261: CALL_OW 273
77265: ST_TO_ADDR
// if ValidHex ( x , y ) then
77266: LD_VAR 0 4
77270: PPUSH
77271: LD_VAR 0 5
77275: PPUSH
77276: CALL_OW 488
77280: IFFALSE 77301
// ComTurnXY ( unit , x , y ) ;
77282: LD_VAR 0 1
77286: PPUSH
77287: LD_VAR 0 4
77291: PPUSH
77292: LD_VAR 0 5
77296: PPUSH
77297: CALL_OW 118
// end ;
77301: LD_VAR 0 3
77305: RET
// export function SeeUnits ( side , units ) ; var i ; begin
77306: LD_INT 0
77308: PPUSH
77309: PPUSH
// result := false ;
77310: LD_ADDR_VAR 0 3
77314: PUSH
77315: LD_INT 0
77317: ST_TO_ADDR
// if not units then
77318: LD_VAR 0 2
77322: NOT
77323: IFFALSE 77327
// exit ;
77325: GO 77372
// for i in units do
77327: LD_ADDR_VAR 0 4
77331: PUSH
77332: LD_VAR 0 2
77336: PUSH
77337: FOR_IN
77338: IFFALSE 77370
// if See ( side , i ) then
77340: LD_VAR 0 1
77344: PPUSH
77345: LD_VAR 0 4
77349: PPUSH
77350: CALL_OW 292
77354: IFFALSE 77368
// begin result := true ;
77356: LD_ADDR_VAR 0 3
77360: PUSH
77361: LD_INT 1
77363: ST_TO_ADDR
// exit ;
77364: POP
77365: POP
77366: GO 77372
// end ;
77368: GO 77337
77370: POP
77371: POP
// end ;
77372: LD_VAR 0 3
77376: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
77377: LD_INT 0
77379: PPUSH
77380: PPUSH
77381: PPUSH
77382: PPUSH
// if not unit or not points then
77383: LD_VAR 0 1
77387: NOT
77388: PUSH
77389: LD_VAR 0 2
77393: NOT
77394: OR
77395: IFFALSE 77399
// exit ;
77397: GO 77489
// dist := 99999 ;
77399: LD_ADDR_VAR 0 5
77403: PUSH
77404: LD_INT 99999
77406: ST_TO_ADDR
// for i in points do
77407: LD_ADDR_VAR 0 4
77411: PUSH
77412: LD_VAR 0 2
77416: PUSH
77417: FOR_IN
77418: IFFALSE 77487
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
77420: LD_ADDR_VAR 0 6
77424: PUSH
77425: LD_VAR 0 1
77429: PPUSH
77430: LD_VAR 0 4
77434: PUSH
77435: LD_INT 1
77437: ARRAY
77438: PPUSH
77439: LD_VAR 0 4
77443: PUSH
77444: LD_INT 2
77446: ARRAY
77447: PPUSH
77448: CALL_OW 297
77452: ST_TO_ADDR
// if tmpDist < dist then
77453: LD_VAR 0 6
77457: PUSH
77458: LD_VAR 0 5
77462: LESS
77463: IFFALSE 77485
// begin result := i ;
77465: LD_ADDR_VAR 0 3
77469: PUSH
77470: LD_VAR 0 4
77474: ST_TO_ADDR
// dist := tmpDist ;
77475: LD_ADDR_VAR 0 5
77479: PUSH
77480: LD_VAR 0 6
77484: ST_TO_ADDR
// end ; end ;
77485: GO 77417
77487: POP
77488: POP
// end ;
77489: LD_VAR 0 3
77493: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
77494: LD_INT 0
77496: PPUSH
// uc_side := side ;
77497: LD_ADDR_OWVAR 20
77501: PUSH
77502: LD_VAR 0 1
77506: ST_TO_ADDR
// uc_nation := 3 ;
77507: LD_ADDR_OWVAR 21
77511: PUSH
77512: LD_INT 3
77514: ST_TO_ADDR
// vc_chassis := 25 ;
77515: LD_ADDR_OWVAR 37
77519: PUSH
77520: LD_INT 25
77522: ST_TO_ADDR
// vc_engine := engine_siberite ;
77523: LD_ADDR_OWVAR 39
77527: PUSH
77528: LD_INT 3
77530: ST_TO_ADDR
// vc_control := control_computer ;
77531: LD_ADDR_OWVAR 38
77535: PUSH
77536: LD_INT 3
77538: ST_TO_ADDR
// vc_weapon := 59 ;
77539: LD_ADDR_OWVAR 40
77543: PUSH
77544: LD_INT 59
77546: ST_TO_ADDR
// result := CreateVehicle ;
77547: LD_ADDR_VAR 0 5
77551: PUSH
77552: CALL_OW 45
77556: ST_TO_ADDR
// SetDir ( result , d ) ;
77557: LD_VAR 0 5
77561: PPUSH
77562: LD_VAR 0 4
77566: PPUSH
77567: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
77571: LD_VAR 0 5
77575: PPUSH
77576: LD_VAR 0 2
77580: PPUSH
77581: LD_VAR 0 3
77585: PPUSH
77586: LD_INT 0
77588: PPUSH
77589: CALL_OW 48
// end ;
77593: LD_VAR 0 5
77597: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
77598: LD_INT 0
77600: PPUSH
77601: PPUSH
77602: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
77603: LD_ADDR_VAR 0 2
77607: PUSH
77608: LD_INT 0
77610: PUSH
77611: LD_INT 0
77613: PUSH
77614: LD_INT 0
77616: PUSH
77617: LD_INT 0
77619: PUSH
77620: EMPTY
77621: LIST
77622: LIST
77623: LIST
77624: LIST
77625: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
77626: LD_VAR 0 1
77630: NOT
77631: PUSH
77632: LD_VAR 0 1
77636: PPUSH
77637: CALL_OW 264
77641: PUSH
77642: LD_INT 12
77644: PUSH
77645: LD_INT 51
77647: PUSH
77648: LD_INT 32
77650: PUSH
77651: LD_INT 89
77653: PUSH
77654: EMPTY
77655: LIST
77656: LIST
77657: LIST
77658: LIST
77659: IN
77660: NOT
77661: OR
77662: IFFALSE 77666
// exit ;
77664: GO 77764
// for i := 1 to 3 do
77666: LD_ADDR_VAR 0 3
77670: PUSH
77671: DOUBLE
77672: LD_INT 1
77674: DEC
77675: ST_TO_ADDR
77676: LD_INT 3
77678: PUSH
77679: FOR_TO
77680: IFFALSE 77762
// begin tmp := GetCargo ( cargo , i ) ;
77682: LD_ADDR_VAR 0 4
77686: PUSH
77687: LD_VAR 0 1
77691: PPUSH
77692: LD_VAR 0 3
77696: PPUSH
77697: CALL_OW 289
77701: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
77702: LD_ADDR_VAR 0 2
77706: PUSH
77707: LD_VAR 0 2
77711: PPUSH
77712: LD_VAR 0 3
77716: PPUSH
77717: LD_VAR 0 4
77721: PPUSH
77722: CALL_OW 1
77726: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
77727: LD_ADDR_VAR 0 2
77731: PUSH
77732: LD_VAR 0 2
77736: PPUSH
77737: LD_INT 4
77739: PPUSH
77740: LD_VAR 0 2
77744: PUSH
77745: LD_INT 4
77747: ARRAY
77748: PUSH
77749: LD_VAR 0 4
77753: PLUS
77754: PPUSH
77755: CALL_OW 1
77759: ST_TO_ADDR
// end ;
77760: GO 77679
77762: POP
77763: POP
// end ;
77764: LD_VAR 0 2
77768: RET
// export function Length ( array ) ; begin
77769: LD_INT 0
77771: PPUSH
// result := array + 0 ;
77772: LD_ADDR_VAR 0 2
77776: PUSH
77777: LD_VAR 0 1
77781: PUSH
77782: LD_INT 0
77784: PLUS
77785: ST_TO_ADDR
// end ;
77786: LD_VAR 0 2
77790: RET
// export function PrepareArray ( array ) ; begin
77791: LD_INT 0
77793: PPUSH
// result := array diff 0 ;
77794: LD_ADDR_VAR 0 2
77798: PUSH
77799: LD_VAR 0 1
77803: PUSH
77804: LD_INT 0
77806: DIFF
77807: ST_TO_ADDR
// if not result [ 1 ] then
77808: LD_VAR 0 2
77812: PUSH
77813: LD_INT 1
77815: ARRAY
77816: NOT
77817: IFFALSE 77837
// result := Delete ( result , 1 ) ;
77819: LD_ADDR_VAR 0 2
77823: PUSH
77824: LD_VAR 0 2
77828: PPUSH
77829: LD_INT 1
77831: PPUSH
77832: CALL_OW 3
77836: ST_TO_ADDR
// end ;
77837: LD_VAR 0 2
77841: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
77842: LD_INT 0
77844: PPUSH
77845: PPUSH
77846: PPUSH
77847: PPUSH
// sibRocketRange := 25 ;
77848: LD_ADDR_VAR 0 6
77852: PUSH
77853: LD_INT 25
77855: ST_TO_ADDR
// result := false ;
77856: LD_ADDR_VAR 0 4
77860: PUSH
77861: LD_INT 0
77863: ST_TO_ADDR
// for i := 0 to 5 do
77864: LD_ADDR_VAR 0 5
77868: PUSH
77869: DOUBLE
77870: LD_INT 0
77872: DEC
77873: ST_TO_ADDR
77874: LD_INT 5
77876: PUSH
77877: FOR_TO
77878: IFFALSE 77945
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
77880: LD_VAR 0 1
77884: PPUSH
77885: LD_VAR 0 5
77889: PPUSH
77890: LD_VAR 0 6
77894: PPUSH
77895: CALL_OW 272
77899: PPUSH
77900: LD_VAR 0 2
77904: PPUSH
77905: LD_VAR 0 5
77909: PPUSH
77910: LD_VAR 0 6
77914: PPUSH
77915: CALL_OW 273
77919: PPUSH
77920: LD_VAR 0 3
77924: PPUSH
77925: CALL_OW 309
77929: IFFALSE 77943
// begin result := true ;
77931: LD_ADDR_VAR 0 4
77935: PUSH
77936: LD_INT 1
77938: ST_TO_ADDR
// exit ;
77939: POP
77940: POP
77941: GO 77947
// end ;
77943: GO 77877
77945: POP
77946: POP
// end ;
77947: LD_VAR 0 4
77951: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
77952: LD_INT 0
77954: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
77955: LD_VAR 0 1
77959: PPUSH
77960: LD_VAR 0 2
77964: PPUSH
77965: LD_INT 0
77967: PPUSH
77968: LD_INT 0
77970: PPUSH
77971: LD_INT 1
77973: PPUSH
77974: LD_INT 0
77976: PPUSH
77977: CALL_OW 587
// end ;
77981: LD_VAR 0 3
77985: RET
// export function CenterOnNow ( unit ) ; begin
77986: LD_INT 0
77988: PPUSH
// result := IsInUnit ( unit ) ;
77989: LD_ADDR_VAR 0 2
77993: PUSH
77994: LD_VAR 0 1
77998: PPUSH
77999: CALL_OW 310
78003: ST_TO_ADDR
// if not result then
78004: LD_VAR 0 2
78008: NOT
78009: IFFALSE 78021
// result := unit ;
78011: LD_ADDR_VAR 0 2
78015: PUSH
78016: LD_VAR 0 1
78020: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
78021: LD_VAR 0 1
78025: PPUSH
78026: CALL_OW 87
// end ;
78030: LD_VAR 0 2
78034: RET
// export function ComMoveHex ( unit , hex ) ; begin
78035: LD_INT 0
78037: PPUSH
// if not hex then
78038: LD_VAR 0 2
78042: NOT
78043: IFFALSE 78047
// exit ;
78045: GO 78100
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
78047: LD_VAR 0 2
78051: PUSH
78052: LD_INT 1
78054: ARRAY
78055: PPUSH
78056: LD_VAR 0 2
78060: PUSH
78061: LD_INT 2
78063: ARRAY
78064: PPUSH
78065: CALL_OW 428
78069: IFFALSE 78073
// exit ;
78071: GO 78100
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
78073: LD_VAR 0 1
78077: PPUSH
78078: LD_VAR 0 2
78082: PUSH
78083: LD_INT 1
78085: ARRAY
78086: PPUSH
78087: LD_VAR 0 2
78091: PUSH
78092: LD_INT 2
78094: ARRAY
78095: PPUSH
78096: CALL_OW 111
// end ;
78100: LD_VAR 0 3
78104: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
78105: LD_INT 0
78107: PPUSH
78108: PPUSH
78109: PPUSH
// if not unit or not enemy then
78110: LD_VAR 0 1
78114: NOT
78115: PUSH
78116: LD_VAR 0 2
78120: NOT
78121: OR
78122: IFFALSE 78126
// exit ;
78124: GO 78250
// x := GetX ( enemy ) ;
78126: LD_ADDR_VAR 0 4
78130: PUSH
78131: LD_VAR 0 2
78135: PPUSH
78136: CALL_OW 250
78140: ST_TO_ADDR
// y := GetY ( enemy ) ;
78141: LD_ADDR_VAR 0 5
78145: PUSH
78146: LD_VAR 0 2
78150: PPUSH
78151: CALL_OW 251
78155: ST_TO_ADDR
// if ValidHex ( x , y ) then
78156: LD_VAR 0 4
78160: PPUSH
78161: LD_VAR 0 5
78165: PPUSH
78166: CALL_OW 488
78170: IFFALSE 78250
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
78172: LD_VAR 0 2
78176: PPUSH
78177: CALL_OW 247
78181: PUSH
78182: LD_INT 3
78184: PUSH
78185: LD_INT 2
78187: PUSH
78188: EMPTY
78189: LIST
78190: LIST
78191: IN
78192: PUSH
78193: LD_VAR 0 1
78197: PPUSH
78198: CALL_OW 255
78202: PPUSH
78203: LD_VAR 0 2
78207: PPUSH
78208: CALL_OW 292
78212: AND
78213: IFFALSE 78231
// ComAttackUnit ( unit , enemy ) else
78215: LD_VAR 0 1
78219: PPUSH
78220: LD_VAR 0 2
78224: PPUSH
78225: CALL_OW 115
78229: GO 78250
// ComAgressiveMove ( unit , x , y ) ;
78231: LD_VAR 0 1
78235: PPUSH
78236: LD_VAR 0 4
78240: PPUSH
78241: LD_VAR 0 5
78245: PPUSH
78246: CALL_OW 114
// end ;
78250: LD_VAR 0 3
78254: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
78255: LD_INT 0
78257: PPUSH
78258: PPUSH
78259: PPUSH
// list := AreaToList ( area , 0 ) ;
78260: LD_ADDR_VAR 0 5
78264: PUSH
78265: LD_VAR 0 1
78269: PPUSH
78270: LD_INT 0
78272: PPUSH
78273: CALL_OW 517
78277: ST_TO_ADDR
// if not list then
78278: LD_VAR 0 5
78282: NOT
78283: IFFALSE 78287
// exit ;
78285: GO 78417
// if all then
78287: LD_VAR 0 2
78291: IFFALSE 78379
// begin for i := 1 to list [ 1 ] do
78293: LD_ADDR_VAR 0 4
78297: PUSH
78298: DOUBLE
78299: LD_INT 1
78301: DEC
78302: ST_TO_ADDR
78303: LD_VAR 0 5
78307: PUSH
78308: LD_INT 1
78310: ARRAY
78311: PUSH
78312: FOR_TO
78313: IFFALSE 78375
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
78315: LD_ADDR_VAR 0 3
78319: PUSH
78320: LD_VAR 0 3
78324: PPUSH
78325: LD_VAR 0 3
78329: PUSH
78330: LD_INT 1
78332: PLUS
78333: PPUSH
78334: LD_VAR 0 5
78338: PUSH
78339: LD_INT 1
78341: ARRAY
78342: PUSH
78343: LD_VAR 0 4
78347: ARRAY
78348: PUSH
78349: LD_VAR 0 5
78353: PUSH
78354: LD_INT 2
78356: ARRAY
78357: PUSH
78358: LD_VAR 0 4
78362: ARRAY
78363: PUSH
78364: EMPTY
78365: LIST
78366: LIST
78367: PPUSH
78368: CALL_OW 1
78372: ST_TO_ADDR
78373: GO 78312
78375: POP
78376: POP
// exit ;
78377: GO 78417
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
78379: LD_ADDR_VAR 0 3
78383: PUSH
78384: LD_VAR 0 5
78388: PUSH
78389: LD_INT 1
78391: ARRAY
78392: PUSH
78393: LD_INT 1
78395: ARRAY
78396: PUSH
78397: LD_VAR 0 5
78401: PUSH
78402: LD_INT 2
78404: ARRAY
78405: PUSH
78406: LD_INT 1
78408: ARRAY
78409: PUSH
78410: EMPTY
78411: LIST
78412: LIST
78413: PUSH
78414: EMPTY
78415: LIST
78416: ST_TO_ADDR
// end ;
78417: LD_VAR 0 3
78421: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
78422: LD_INT 0
78424: PPUSH
78425: PPUSH
// list := AreaToList ( area , 0 ) ;
78426: LD_ADDR_VAR 0 4
78430: PUSH
78431: LD_VAR 0 1
78435: PPUSH
78436: LD_INT 0
78438: PPUSH
78439: CALL_OW 517
78443: ST_TO_ADDR
// if not list then
78444: LD_VAR 0 4
78448: NOT
78449: IFFALSE 78453
// exit ;
78451: GO 78494
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
78453: LD_ADDR_VAR 0 3
78457: PUSH
78458: LD_VAR 0 4
78462: PUSH
78463: LD_INT 1
78465: ARRAY
78466: PUSH
78467: LD_INT 1
78469: ARRAY
78470: PUSH
78471: LD_VAR 0 4
78475: PUSH
78476: LD_INT 2
78478: ARRAY
78479: PUSH
78480: LD_INT 1
78482: ARRAY
78483: PUSH
78484: LD_VAR 0 2
78488: PUSH
78489: EMPTY
78490: LIST
78491: LIST
78492: LIST
78493: ST_TO_ADDR
// end ;
78494: LD_VAR 0 3
78498: RET
// export function First ( array ) ; begin
78499: LD_INT 0
78501: PPUSH
// if not array then
78502: LD_VAR 0 1
78506: NOT
78507: IFFALSE 78511
// exit ;
78509: GO 78525
// result := array [ 1 ] ;
78511: LD_ADDR_VAR 0 2
78515: PUSH
78516: LD_VAR 0 1
78520: PUSH
78521: LD_INT 1
78523: ARRAY
78524: ST_TO_ADDR
// end ;
78525: LD_VAR 0 2
78529: RET
// export function Last ( array ) ; begin
78530: LD_INT 0
78532: PPUSH
// if not array then
78533: LD_VAR 0 1
78537: NOT
78538: IFFALSE 78542
// exit ;
78540: GO 78558
// result := array [ array ] ;
78542: LD_ADDR_VAR 0 2
78546: PUSH
78547: LD_VAR 0 1
78551: PUSH
78552: LD_VAR 0 1
78556: ARRAY
78557: ST_TO_ADDR
// end ; end_of_file
78558: LD_VAR 0 2
78562: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
78563: LD_VAR 0 1
78567: PUSH
78568: LD_INT 200
78570: DOUBLE
78571: GREATEREQUAL
78572: IFFALSE 78580
78574: LD_INT 299
78576: DOUBLE
78577: LESSEQUAL
78578: IFTRUE 78582
78580: GO 78614
78582: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
78583: LD_VAR 0 1
78587: PPUSH
78588: LD_VAR 0 2
78592: PPUSH
78593: LD_VAR 0 3
78597: PPUSH
78598: LD_VAR 0 4
78602: PPUSH
78603: LD_VAR 0 5
78607: PPUSH
78608: CALL 31813 0 5
78612: GO 78691
78614: LD_INT 300
78616: DOUBLE
78617: GREATEREQUAL
78618: IFFALSE 78626
78620: LD_INT 399
78622: DOUBLE
78623: LESSEQUAL
78624: IFTRUE 78628
78626: GO 78690
78628: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
78629: LD_VAR 0 1
78633: PPUSH
78634: LD_VAR 0 2
78638: PPUSH
78639: LD_VAR 0 3
78643: PPUSH
78644: LD_VAR 0 4
78648: PPUSH
78649: LD_VAR 0 5
78653: PPUSH
78654: LD_VAR 0 6
78658: PPUSH
78659: LD_VAR 0 7
78663: PPUSH
78664: LD_VAR 0 8
78668: PPUSH
78669: LD_VAR 0 9
78673: PPUSH
78674: LD_VAR 0 10
78678: PPUSH
78679: LD_VAR 0 11
78683: PPUSH
78684: CALL 28138 0 11
78688: GO 78691
78690: POP
// end ;
78691: PPOPN 11
78693: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
78694: LD_VAR 0 1
78698: PPUSH
78699: LD_VAR 0 2
78703: PPUSH
78704: LD_VAR 0 3
78708: PPUSH
78709: LD_VAR 0 4
78713: PPUSH
78714: LD_VAR 0 5
78718: PPUSH
78719: CALL 31549 0 5
// end ; end_of_file
78723: PPOPN 5
78725: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
78726: LD_VAR 0 1
78730: PPUSH
78731: LD_VAR 0 2
78735: PPUSH
78736: LD_VAR 0 3
78740: PPUSH
78741: LD_VAR 0 4
78745: PPUSH
78746: LD_VAR 0 5
78750: PPUSH
78751: LD_VAR 0 6
78755: PPUSH
78756: CALL 15790 0 6
// end ;
78760: PPOPN 6
78762: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
78763: LD_INT 0
78765: PPUSH
// begin if not units then
78766: LD_VAR 0 1
78770: NOT
78771: IFFALSE 78775
// exit ;
78773: GO 78775
// end ;
78775: PPOPN 7
78777: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
78778: CALL 15694 0 0
// end ;
78782: PPOPN 1
78784: END
