// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitVariables ;
  11: CALL 123 0 0
// CreateNature ;
  15: CALL 9164 0 0
// PrepareAlliance ;
  19: CALL 337 0 0
// PrepareFriends ;
  23: CALL 3635 0 0
// PrepareAmerican ;
  27: CALL 774 0 0
// PlaceSeeing ( 91 , 70 , 7 , - 32178 ) ;
  31: LD_INT 91
  33: PPUSH
  34: LD_INT 70
  36: PPUSH
  37: LD_INT 7
  39: PPUSH
  40: LD_INT 32178
  42: NEG
  43: PPUSH
  44: CALL_OW 330
// RemoveSeeing ( 91 , 70 , 7 ) ;
  48: LD_INT 91
  50: PPUSH
  51: LD_INT 70
  53: PPUSH
  54: LD_INT 7
  56: PPUSH
  57: CALL_OW 331
// if debug then
  61: LD_EXP 1
  65: IFFALSE 106
// begin SetAttitude ( 1 , 7 , att_enemy , true ) ;
  67: LD_INT 1
  69: PPUSH
  70: LD_INT 7
  72: PPUSH
  73: LD_INT 2
  75: PPUSH
  76: LD_INT 1
  78: PPUSH
  79: CALL_OW 80
// RemoveUnit ( Powell ) ;
  83: LD_EXP 16
  87: PPUSH
  88: CALL_OW 64
// DoNotAttack ( 1 , JMM ) ;
  92: LD_INT 1
  94: PPUSH
  95: LD_EXP 14
  99: PPUSH
 100: CALL_OW 471
// end else
 104: GO 110
// Action ;
 106: CALL 9500 0 0
// PreparePatrol ;
 110: CALL 1239 0 0
// game := true ;
 114: LD_ADDR_EXP 2
 118: PUSH
 119: LD_INT 1
 121: ST_TO_ADDR
// end ;
 122: END
// export debug , game , selected , friends , reached_lab , can_escape , on_hill , friends_kill_counter , team_kill_counter , gamma_commander , extra_patrol , invis_used , alert ; export function InitVariables ; begin
 123: LD_INT 0
 125: PPUSH
// debug := false ;
 126: LD_ADDR_EXP 1
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// friends := [ ] ;
 134: LD_ADDR_EXP 4
 138: PUSH
 139: EMPTY
 140: ST_TO_ADDR
// selected := [ ] ;
 141: LD_ADDR_EXP 3
 145: PUSH
 146: EMPTY
 147: ST_TO_ADDR
// reached_lab := false ;
 148: LD_ADDR_EXP 5
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// can_escape := false ;
 156: LD_ADDR_EXP 6
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// game := false ;
 164: LD_ADDR_EXP 2
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// gamma_commander := LoadVariable ( GammaCommander , 2 ) ;
 172: LD_ADDR_EXP 10
 176: PUSH
 177: LD_STRING GammaCommander
 179: PPUSH
 180: LD_INT 2
 182: PPUSH
 183: CALL_OW 30
 187: ST_TO_ADDR
// friends_kill_counter := 0 ;
 188: LD_ADDR_EXP 8
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// team_kill_counter := 0 ;
 196: LD_ADDR_EXP 9
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// extra_patrol := true ;
 204: LD_ADDR_EXP 11
 208: PUSH
 209: LD_INT 1
 211: ST_TO_ADDR
// on_hill := false ;
 212: LD_ADDR_EXP 7
 216: PUSH
 217: LD_INT 0
 219: ST_TO_ADDR
// invis_used := false ;
 220: LD_ADDR_EXP 12
 224: PUSH
 225: LD_INT 0
 227: ST_TO_ADDR
// alert := false ;
 228: LD_ADDR_EXP 13
 232: PUSH
 233: LD_INT 0
 235: ST_TO_ADDR
// end ;
 236: LD_VAR 0 1
 240: RET
// every 0 0$1 trigger on_hill do
 241: LD_EXP 7
 245: IFFALSE 257
 247: GO 249
 249: DISABLE
// SetAchievement ( ACH_EYE ) ;
 250: LD_STRING ACH_EYE
 252: PPUSH
 253: CALL_OW 543
 257: END
// every 0 0$1 trigger not invis_used do var i ;
 258: LD_EXP 12
 262: NOT
 263: IFFALSE 334
 265: GO 267
 267: DISABLE
 268: LD_INT 0
 270: PPUSH
// begin enable ;
 271: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do
 272: LD_ADDR_VAR 0 1
 276: PUSH
 277: LD_INT 22
 279: PUSH
 280: LD_INT 7
 282: PUSH
 283: EMPTY
 284: LIST
 285: LIST
 286: PUSH
 287: LD_INT 21
 289: PUSH
 290: LD_INT 1
 292: PUSH
 293: EMPTY
 294: LIST
 295: LIST
 296: PUSH
 297: EMPTY
 298: LIST
 299: LIST
 300: PPUSH
 301: CALL_OW 69
 305: PUSH
 306: FOR_IN
 307: IFFALSE 332
// if IsInvisible ( i ) then
 309: LD_VAR 0 1
 313: PPUSH
 314: CALL_OW 571
 318: IFFALSE 330
// begin invis_used := true ;
 320: LD_ADDR_EXP 12
 324: PUSH
 325: LD_INT 1
 327: ST_TO_ADDR
// break ;
 328: GO 332
// end ;
 330: GO 306
 332: POP
 333: POP
// end ; end_of_file
 334: PPOPN 1
 336: END
// export JMM , Roth ; export function PrepareAlliance ; var cargo ; begin
 337: LD_INT 0
 339: PPUSH
 340: PPUSH
// uc_side := 7 ;
 341: LD_ADDR_OWVAR 20
 345: PUSH
 346: LD_INT 7
 348: ST_TO_ADDR
// uc_nation := 1 ;
 349: LD_ADDR_OWVAR 21
 353: PUSH
 354: LD_INT 1
 356: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 11_ ) ;
 357: LD_ADDR_EXP 14
 361: PUSH
 362: LD_STRING JMM
 364: PPUSH
 365: LD_EXP 1
 369: NOT
 370: PPUSH
 371: LD_STRING 11_
 373: PPUSH
 374: CALL 32262 0 3
 378: ST_TO_ADDR
// uc_side := 4 ;
 379: LD_ADDR_OWVAR 20
 383: PUSH
 384: LD_INT 4
 386: ST_TO_ADDR
// Roth := NewCharacter ( Roth ) ;
 387: LD_ADDR_EXP 15
 391: PUSH
 392: LD_STRING Roth
 394: PPUSH
 395: CALL_OW 25
 399: ST_TO_ADDR
// SetDir ( JMM , 1 ) ;
 400: LD_EXP 14
 404: PPUSH
 405: LD_INT 1
 407: PPUSH
 408: CALL_OW 233
// SetClass ( JMM , 1 ) ;
 412: LD_EXP 14
 416: PPUSH
 417: LD_INT 1
 419: PPUSH
 420: CALL_OW 336
// PlaceUnitXY ( JMM , 105 , 10 , false ) ;
 424: LD_EXP 14
 428: PPUSH
 429: LD_INT 105
 431: PPUSH
 432: LD_INT 10
 434: PPUSH
 435: LD_INT 0
 437: PPUSH
 438: CALL_OW 48
// SetDir ( Roth , 4 ) ;
 442: LD_EXP 15
 446: PPUSH
 447: LD_INT 4
 449: PPUSH
 450: CALL_OW 233
// PlaceUnitXY ( Roth , 109 , 10 , false ) ;
 454: LD_EXP 15
 458: PPUSH
 459: LD_INT 109
 461: PPUSH
 462: LD_INT 10
 464: PPUSH
 465: LD_INT 0
 467: PPUSH
 468: CALL_OW 48
// ComTurnUnit ( JMM , Roth ) ;
 472: LD_EXP 14
 476: PPUSH
 477: LD_EXP 15
 481: PPUSH
 482: CALL_OW 119
// ComTurnUnit ( Roth , JMM ) ;
 486: LD_EXP 15
 490: PPUSH
 491: LD_EXP 14
 495: PPUSH
 496: CALL_OW 119
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
 500: LD_INT 3
 502: PPUSH
 503: LD_INT 3
 505: PPUSH
 506: LD_INT 3
 508: PPUSH
 509: LD_INT 12
 511: PPUSH
 512: LD_INT 100
 514: PPUSH
 515: CALL 37086 0 5
// cargo := CreateVehicle ;
 519: LD_ADDR_VAR 0 2
 523: PUSH
 524: CALL_OW 45
 528: ST_TO_ADDR
// SetDir ( cargo , 1 ) ;
 529: LD_VAR 0 2
 533: PPUSH
 534: LD_INT 1
 536: PPUSH
 537: CALL_OW 233
// PlaceUnitXY ( cargo , 179 , 45 , false ) ;
 541: LD_VAR 0 2
 545: PPUSH
 546: LD_INT 179
 548: PPUSH
 549: LD_INT 45
 551: PPUSH
 552: LD_INT 0
 554: PPUSH
 555: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 30 ) ;
 559: LD_VAR 0 2
 563: PPUSH
 564: LD_INT 4
 566: PPUSH
 567: LD_INT 30
 569: PPUSH
 570: CALL_OW 290
// if LoadVariable ( 11_artifact_captured , 0 ) then
 574: LD_STRING 11_artifact_captured
 576: PPUSH
 577: LD_INT 0
 579: PPUSH
 580: CALL_OW 30
 584: IFFALSE 641
// begin cargo := CreateVehicle ;
 586: LD_ADDR_VAR 0 2
 590: PUSH
 591: CALL_OW 45
 595: ST_TO_ADDR
// SetDir ( cargo , 0 ) ;
 596: LD_VAR 0 2
 600: PPUSH
 601: LD_INT 0
 603: PPUSH
 604: CALL_OW 233
// PlaceUnitXY ( cargo , 171 , 85 , false ) ;
 608: LD_VAR 0 2
 612: PPUSH
 613: LD_INT 171
 615: PPUSH
 616: LD_INT 85
 618: PPUSH
 619: LD_INT 0
 621: PPUSH
 622: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 50 ) ;
 626: LD_VAR 0 2
 630: PPUSH
 631: LD_INT 4
 633: PPUSH
 634: LD_INT 50
 636: PPUSH
 637: CALL_OW 290
// end ; SetSide ( amlab , 7 ) ;
 641: LD_INT 47
 643: PPUSH
 644: LD_INT 7
 646: PPUSH
 647: CALL_OW 235
// DoNotAttack ( 1 , amlab ) ;
 651: LD_INT 1
 653: PPUSH
 654: LD_INT 47
 656: PPUSH
 657: CALL_OW 471
// end ;
 661: LD_VAR 0 1
 665: RET
// every 0 0$1 trigger FilterUnitsInArea ( hill , [ f_side , 7 ] ) and not on_hill do
 666: LD_INT 38
 668: PPUSH
 669: LD_INT 22
 671: PUSH
 672: LD_INT 7
 674: PUSH
 675: EMPTY
 676: LIST
 677: LIST
 678: PPUSH
 679: CALL_OW 70
 683: PUSH
 684: LD_EXP 7
 688: NOT
 689: AND
 690: IFFALSE 721
 692: GO 694
 694: DISABLE
// begin enable ;
 695: ENABLE
// on_hill := true ;
 696: LD_ADDR_EXP 7
 700: PUSH
 701: LD_INT 1
 703: ST_TO_ADDR
// PlaceSeeing ( 126 , 13 , 7 , - 90 ) ;
 704: LD_INT 126
 706: PPUSH
 707: LD_INT 13
 709: PPUSH
 710: LD_INT 7
 712: PPUSH
 713: LD_INT 90
 715: NEG
 716: PPUSH
 717: CALL_OW 330
// end ;
 721: END
// every 0 0$1 trigger not FilterUnitsInArea ( hill , [ f_side , 7 ] ) and on_hill do
 722: LD_INT 38
 724: PPUSH
 725: LD_INT 22
 727: PUSH
 728: LD_INT 7
 730: PUSH
 731: EMPTY
 732: LIST
 733: LIST
 734: PPUSH
 735: CALL_OW 70
 739: NOT
 740: PUSH
 741: LD_EXP 7
 745: AND
 746: IFFALSE 773
 748: GO 750
 750: DISABLE
// begin enable ;
 751: ENABLE
// on_hill := false ;
 752: LD_ADDR_EXP 7
 756: PUSH
 757: LD_INT 0
 759: ST_TO_ADDR
// RemoveSeeing ( 126 , 13 , 7 ) ;
 760: LD_INT 126
 762: PPUSH
 763: LD_INT 13
 765: PPUSH
 766: LD_INT 7
 768: PPUSH
 769: CALL_OW 331
// end ; end_of_file
 773: END
// export Powell , mobile_patrol , mobile_points , powell_guards , defenders , defcon , defcon_wave ; export function PrepareAmerican ; var i , j , b , un , tmp ; begin
 774: LD_INT 0
 776: PPUSH
 777: PPUSH
 778: PPUSH
 779: PPUSH
 780: PPUSH
 781: PPUSH
// if Difficulty = 1 then
 782: LD_OWVAR 67
 786: PUSH
 787: LD_INT 1
 789: EQUAL
 790: IFFALSE 898
// begin tmp := [ [ 155 , 77 ] , [ 193 , 93 ] , [ 188 , 81 ] , [ 56 , 85 ] , [ 98 , 87 ] ] ;
 792: LD_ADDR_VAR 0 6
 796: PUSH
 797: LD_INT 155
 799: PUSH
 800: LD_INT 77
 802: PUSH
 803: EMPTY
 804: LIST
 805: LIST
 806: PUSH
 807: LD_INT 193
 809: PUSH
 810: LD_INT 93
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: PUSH
 817: LD_INT 188
 819: PUSH
 820: LD_INT 81
 822: PUSH
 823: EMPTY
 824: LIST
 825: LIST
 826: PUSH
 827: LD_INT 56
 829: PUSH
 830: LD_INT 85
 832: PUSH
 833: EMPTY
 834: LIST
 835: LIST
 836: PUSH
 837: LD_INT 98
 839: PUSH
 840: LD_INT 87
 842: PUSH
 843: EMPTY
 844: LIST
 845: LIST
 846: PUSH
 847: EMPTY
 848: LIST
 849: LIST
 850: LIST
 851: LIST
 852: LIST
 853: ST_TO_ADDR
// for i in tmp do
 854: LD_ADDR_VAR 0 2
 858: PUSH
 859: LD_VAR 0 6
 863: PUSH
 864: FOR_IN
 865: IFFALSE 896
// RemoveUnit ( HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
 867: LD_VAR 0 2
 871: PUSH
 872: LD_INT 1
 874: ARRAY
 875: PPUSH
 876: LD_VAR 0 2
 880: PUSH
 881: LD_INT 2
 883: ARRAY
 884: PPUSH
 885: CALL_OW 428
 889: PPUSH
 890: CALL_OW 64
 894: GO 864
 896: POP
 897: POP
// end ; defcon := 0 ;
 898: LD_ADDR_EXP 21
 902: PUSH
 903: LD_INT 0
 905: ST_TO_ADDR
// defcon_wave := 0 ;
 906: LD_ADDR_EXP 22
 910: PUSH
 911: LD_INT 0
 913: ST_TO_ADDR
// defenders := [ ] ;
 914: LD_ADDR_EXP 20
 918: PUSH
 919: EMPTY
 920: ST_TO_ADDR
// SetBName ( alfa , alpha ) ;
 921: LD_INT 5
 923: PPUSH
 924: LD_STRING alpha
 926: PPUSH
 927: CALL_OW 500
// uc_side := 1 ;
 931: LD_ADDR_OWVAR 20
 935: PUSH
 936: LD_INT 1
 938: ST_TO_ADDR
// uc_nation := 1 ;
 939: LD_ADDR_OWVAR 21
 943: PUSH
 944: LD_INT 1
 946: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
 947: LD_ADDR_EXP 16
 951: PUSH
 952: LD_STRING Powell
 954: PPUSH
 955: CALL_OW 25
 959: ST_TO_ADDR
// PlaceUnitXY ( Powell , 110 , 26 , false ) ;
 960: LD_EXP 16
 964: PPUSH
 965: LD_INT 110
 967: PPUSH
 968: LD_INT 26
 970: PPUSH
 971: LD_INT 0
 973: PPUSH
 974: CALL_OW 48
// ComHold ( Powell ) ;
 978: LD_EXP 16
 982: PPUSH
 983: CALL_OW 140
// for i = 1 to 5 do
 987: LD_ADDR_VAR 0 2
 991: PUSH
 992: DOUBLE
 993: LD_INT 1
 995: DEC
 996: ST_TO_ADDR
 997: LD_INT 5
 999: PUSH
1000: FOR_TO
1001: IFFALSE 1057
// begin PrepareHuman ( false , 1 , 10 ) ;
1003: LD_INT 0
1005: PPUSH
1006: LD_INT 1
1008: PPUSH
1009: LD_INT 10
1011: PPUSH
1012: CALL_OW 380
// powell_guards := Insert ( powell_guards , 1 , CreateHuman ) ;
1016: LD_ADDR_EXP 19
1020: PUSH
1021: LD_EXP 19
1025: PPUSH
1026: LD_INT 1
1028: PPUSH
1029: CALL_OW 44
1033: PPUSH
1034: CALL_OW 2
1038: ST_TO_ADDR
// PlaceHumanInUnit ( powell_guards [ 1 ] , ambar0 ) ;
1039: LD_EXP 19
1043: PUSH
1044: LD_INT 1
1046: ARRAY
1047: PPUSH
1048: LD_INT 18
1050: PPUSH
1051: CALL_OW 52
// end ;
1055: GO 1000
1057: POP
1058: POP
// if Difficulty > 2 then
1059: LD_OWVAR 67
1063: PUSH
1064: LD_INT 2
1066: GREATER
1067: IFFALSE 1116
// begin bc_type := b_turret ;
1069: LD_ADDR_OWVAR 42
1073: PUSH
1074: LD_INT 33
1076: ST_TO_ADDR
// bc_level := 7 ;
1077: LD_ADDR_OWVAR 43
1081: PUSH
1082: LD_INT 7
1084: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 107 , 55 , 5 ) ;
1085: LD_ADDR_VAR 0 4
1089: PUSH
1090: LD_INT 107
1092: PPUSH
1093: LD_INT 55
1095: PPUSH
1096: LD_INT 5
1098: PPUSH
1099: CALL_OW 47
1103: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_rocket_launcher ) ;
1104: LD_VAR 0 4
1108: PPUSH
1109: LD_INT 7
1111: PPUSH
1112: CALL_OW 431
// end ; for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ^ FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) do
1116: LD_ADDR_VAR 0 2
1120: PUSH
1121: LD_INT 22
1123: PUSH
1124: LD_INT 1
1126: PUSH
1127: EMPTY
1128: LIST
1129: LIST
1130: PUSH
1131: LD_INT 30
1133: PUSH
1134: LD_INT 3
1136: PUSH
1137: EMPTY
1138: LIST
1139: LIST
1140: PUSH
1141: EMPTY
1142: LIST
1143: LIST
1144: PPUSH
1145: CALL_OW 69
1149: PUSH
1150: LD_INT 22
1152: PUSH
1153: LD_INT 1
1155: PUSH
1156: EMPTY
1157: LIST
1158: LIST
1159: PUSH
1160: LD_INT 30
1162: PUSH
1163: LD_INT 36
1165: PUSH
1166: EMPTY
1167: LIST
1168: LIST
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: PPUSH
1174: CALL_OW 69
1178: ADD
1179: PUSH
1180: FOR_IN
1181: IFFALSE 1232
// for j = 1 to 3 do
1183: LD_ADDR_VAR 0 3
1187: PUSH
1188: DOUBLE
1189: LD_INT 1
1191: DEC
1192: ST_TO_ADDR
1193: LD_INT 3
1195: PUSH
1196: FOR_TO
1197: IFFALSE 1228
// begin PrepareHuman ( false , 3 , 6 ) ;
1199: LD_INT 0
1201: PPUSH
1202: LD_INT 3
1204: PPUSH
1205: LD_INT 6
1207: PPUSH
1208: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
1212: CALL_OW 44
1216: PPUSH
1217: LD_VAR 0 2
1221: PPUSH
1222: CALL_OW 52
// end ;
1226: GO 1196
1228: POP
1229: POP
1230: GO 1180
1232: POP
1233: POP
// end ;
1234: LD_VAR 0 1
1238: RET
// export function PreparePatrol ; var i , un ; begin
1239: LD_INT 0
1241: PPUSH
1242: PPUSH
1243: PPUSH
// uc_side := 1 ;
1244: LD_ADDR_OWVAR 20
1248: PUSH
1249: LD_INT 1
1251: ST_TO_ADDR
// uc_nation := 1 ;
1252: LD_ADDR_OWVAR 21
1256: PUSH
1257: LD_INT 1
1259: ST_TO_ADDR
// mobile_points := [ [ [ 99 , 55 ] , [ 113 , 67 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 103 , 41 ] ] , [ [ 27 , 49 ] , [ 46 , 49 ] , [ 87 , 70 ] , [ 99 , 79 ] , [ 118 , 111 ] , [ 99 , 79 ] , [ 87 , 70 ] , [ 46 , 49 ] ] , [ [ 200 , 88 ] , [ 175 , 80 ] , [ 135 , 62 ] , [ 117 , 53 ] , [ 103 , 41 ] , [ 99 , 24 ] , [ 85 , 3 ] , [ 99 , 24 ] , [ 103 , 41 ] , [ 98 , 47 ] , [ 99 , 56 ] , [ 96 , 66 ] , [ 99 , 56 ] , [ 112 , 66 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 156 , 71 ] , [ 168 , 76 ] , [ 168 , 61 ] , [ 168 , 75 ] , [ 185 , 85 ] ] ] ;
1260: LD_ADDR_EXP 18
1264: PUSH
1265: LD_INT 99
1267: PUSH
1268: LD_INT 55
1270: PUSH
1271: EMPTY
1272: LIST
1273: LIST
1274: PUSH
1275: LD_INT 113
1277: PUSH
1278: LD_INT 67
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: PUSH
1285: LD_INT 129
1287: PUSH
1288: LD_INT 68
1290: PUSH
1291: EMPTY
1292: LIST
1293: LIST
1294: PUSH
1295: LD_INT 135
1297: PUSH
1298: LD_INT 62
1300: PUSH
1301: EMPTY
1302: LIST
1303: LIST
1304: PUSH
1305: LD_INT 103
1307: PUSH
1308: LD_INT 41
1310: PUSH
1311: EMPTY
1312: LIST
1313: LIST
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: PUSH
1322: LD_INT 27
1324: PUSH
1325: LD_INT 49
1327: PUSH
1328: EMPTY
1329: LIST
1330: LIST
1331: PUSH
1332: LD_INT 46
1334: PUSH
1335: LD_INT 49
1337: PUSH
1338: EMPTY
1339: LIST
1340: LIST
1341: PUSH
1342: LD_INT 87
1344: PUSH
1345: LD_INT 70
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: PUSH
1352: LD_INT 99
1354: PUSH
1355: LD_INT 79
1357: PUSH
1358: EMPTY
1359: LIST
1360: LIST
1361: PUSH
1362: LD_INT 118
1364: PUSH
1365: LD_INT 111
1367: PUSH
1368: EMPTY
1369: LIST
1370: LIST
1371: PUSH
1372: LD_INT 99
1374: PUSH
1375: LD_INT 79
1377: PUSH
1378: EMPTY
1379: LIST
1380: LIST
1381: PUSH
1382: LD_INT 87
1384: PUSH
1385: LD_INT 70
1387: PUSH
1388: EMPTY
1389: LIST
1390: LIST
1391: PUSH
1392: LD_INT 46
1394: PUSH
1395: LD_INT 49
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: PUSH
1402: EMPTY
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: PUSH
1412: LD_INT 200
1414: PUSH
1415: LD_INT 88
1417: PUSH
1418: EMPTY
1419: LIST
1420: LIST
1421: PUSH
1422: LD_INT 175
1424: PUSH
1425: LD_INT 80
1427: PUSH
1428: EMPTY
1429: LIST
1430: LIST
1431: PUSH
1432: LD_INT 135
1434: PUSH
1435: LD_INT 62
1437: PUSH
1438: EMPTY
1439: LIST
1440: LIST
1441: PUSH
1442: LD_INT 117
1444: PUSH
1445: LD_INT 53
1447: PUSH
1448: EMPTY
1449: LIST
1450: LIST
1451: PUSH
1452: LD_INT 103
1454: PUSH
1455: LD_INT 41
1457: PUSH
1458: EMPTY
1459: LIST
1460: LIST
1461: PUSH
1462: LD_INT 99
1464: PUSH
1465: LD_INT 24
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: PUSH
1472: LD_INT 85
1474: PUSH
1475: LD_INT 3
1477: PUSH
1478: EMPTY
1479: LIST
1480: LIST
1481: PUSH
1482: LD_INT 99
1484: PUSH
1485: LD_INT 24
1487: PUSH
1488: EMPTY
1489: LIST
1490: LIST
1491: PUSH
1492: LD_INT 103
1494: PUSH
1495: LD_INT 41
1497: PUSH
1498: EMPTY
1499: LIST
1500: LIST
1501: PUSH
1502: LD_INT 98
1504: PUSH
1505: LD_INT 47
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PUSH
1512: LD_INT 99
1514: PUSH
1515: LD_INT 56
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PUSH
1522: LD_INT 96
1524: PUSH
1525: LD_INT 66
1527: PUSH
1528: EMPTY
1529: LIST
1530: LIST
1531: PUSH
1532: LD_INT 99
1534: PUSH
1535: LD_INT 56
1537: PUSH
1538: EMPTY
1539: LIST
1540: LIST
1541: PUSH
1542: LD_INT 112
1544: PUSH
1545: LD_INT 66
1547: PUSH
1548: EMPTY
1549: LIST
1550: LIST
1551: PUSH
1552: LD_INT 129
1554: PUSH
1555: LD_INT 68
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: PUSH
1562: LD_INT 135
1564: PUSH
1565: LD_INT 62
1567: PUSH
1568: EMPTY
1569: LIST
1570: LIST
1571: PUSH
1572: LD_INT 156
1574: PUSH
1575: LD_INT 71
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: PUSH
1582: LD_INT 168
1584: PUSH
1585: LD_INT 76
1587: PUSH
1588: EMPTY
1589: LIST
1590: LIST
1591: PUSH
1592: LD_INT 168
1594: PUSH
1595: LD_INT 61
1597: PUSH
1598: EMPTY
1599: LIST
1600: LIST
1601: PUSH
1602: LD_INT 168
1604: PUSH
1605: LD_INT 75
1607: PUSH
1608: EMPTY
1609: LIST
1610: LIST
1611: PUSH
1612: LD_INT 185
1614: PUSH
1615: LD_INT 85
1617: PUSH
1618: EMPTY
1619: LIST
1620: LIST
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: LIST
1626: LIST
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: PUSH
1645: EMPTY
1646: LIST
1647: LIST
1648: LIST
1649: ST_TO_ADDR
// mobile_patrol := [ ] ;
1650: LD_ADDR_EXP 17
1654: PUSH
1655: EMPTY
1656: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1657: LD_INT 3
1659: PPUSH
1660: LD_INT 1
1662: PPUSH
1663: LD_INT 3
1665: PPUSH
1666: LD_INT 4
1668: PPUSH
1669: LD_INT 100
1671: PPUSH
1672: CALL 37086 0 5
// mobile_patrol := Insert ( mobile_patrol , 1 , CreateVehicle ) ;
1676: LD_ADDR_EXP 17
1680: PUSH
1681: LD_EXP 17
1685: PPUSH
1686: LD_INT 1
1688: PPUSH
1689: CALL_OW 45
1693: PPUSH
1694: CALL_OW 2
1698: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 1 ] , 99 , 55 , false ) ;
1699: LD_EXP 17
1703: PUSH
1704: LD_INT 1
1706: ARRAY
1707: PPUSH
1708: LD_INT 99
1710: PPUSH
1711: LD_INT 55
1713: PPUSH
1714: LD_INT 0
1716: PPUSH
1717: CALL_OW 48
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1721: LD_INT 2
1723: PPUSH
1724: LD_INT 1
1726: PPUSH
1727: LD_INT 3
1729: PPUSH
1730: LD_INT 4
1732: PPUSH
1733: LD_INT 100
1735: PPUSH
1736: CALL 37086 0 5
// mobile_patrol := Insert ( mobile_patrol , 2 , CreateVehicle ) ;
1740: LD_ADDR_EXP 17
1744: PUSH
1745: LD_EXP 17
1749: PPUSH
1750: LD_INT 2
1752: PPUSH
1753: CALL_OW 45
1757: PPUSH
1758: CALL_OW 2
1762: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 2 ] , 27 , 49 , false ) ;
1763: LD_EXP 17
1767: PUSH
1768: LD_INT 2
1770: ARRAY
1771: PPUSH
1772: LD_INT 27
1774: PPUSH
1775: LD_INT 49
1777: PPUSH
1778: LD_INT 0
1780: PPUSH
1781: CALL_OW 48
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , [ us_laser , us_rocket_launcher , us_rocket_launcher ] [ Difficulty ] , 100 ) ;
1785: LD_INT 3
1787: PPUSH
1788: LD_INT 1
1790: PPUSH
1791: LD_INT 3
1793: PPUSH
1794: LD_INT 9
1796: PUSH
1797: LD_INT 7
1799: PUSH
1800: LD_INT 7
1802: PUSH
1803: EMPTY
1804: LIST
1805: LIST
1806: LIST
1807: PUSH
1808: LD_OWVAR 67
1812: ARRAY
1813: PPUSH
1814: LD_INT 100
1816: PPUSH
1817: CALL 37086 0 5
// mobile_patrol := Insert ( mobile_patrol , 3 , CreateVehicle ) ;
1821: LD_ADDR_EXP 17
1825: PUSH
1826: LD_EXP 17
1830: PPUSH
1831: LD_INT 3
1833: PPUSH
1834: CALL_OW 45
1838: PPUSH
1839: CALL_OW 2
1843: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 3 ] , 200 , 88 , false ) ;
1844: LD_EXP 17
1848: PUSH
1849: LD_INT 3
1851: ARRAY
1852: PPUSH
1853: LD_INT 200
1855: PPUSH
1856: LD_INT 88
1858: PPUSH
1859: LD_INT 0
1861: PPUSH
1862: CALL_OW 48
// for i = mobile_patrol downto 1 do
1866: LD_ADDR_VAR 0 2
1870: PUSH
1871: DOUBLE
1872: LD_EXP 17
1876: INC
1877: ST_TO_ADDR
1878: LD_INT 1
1880: PUSH
1881: FOR_DOWNTO
1882: IFFALSE 1893
// RaiseSailEvent ( 1 ) ;
1884: LD_INT 1
1886: PPUSH
1887: CALL_OW 427
1891: GO 1881
1893: POP
1894: POP
// end ;
1895: LD_VAR 0 1
1899: RET
// export function SpawnCargo ( ) ; var i , c , k , areas , road , tmp , veh ; begin
1900: LD_INT 0
1902: PPUSH
1903: PPUSH
1904: PPUSH
1905: PPUSH
1906: PPUSH
1907: PPUSH
1908: PPUSH
1909: PPUSH
// areas := [ [ road_east , 4 ] , [ road_south , 5 ] , [ road_west , 1 ] ] ;
1910: LD_ADDR_VAR 0 5
1914: PUSH
1915: LD_INT 20
1917: PUSH
1918: LD_INT 4
1920: PUSH
1921: EMPTY
1922: LIST
1923: LIST
1924: PUSH
1925: LD_INT 21
1927: PUSH
1928: LD_INT 5
1930: PUSH
1931: EMPTY
1932: LIST
1933: LIST
1934: PUSH
1935: LD_INT 22
1937: PUSH
1938: LD_INT 1
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: PUSH
1945: EMPTY
1946: LIST
1947: LIST
1948: LIST
1949: ST_TO_ADDR
// road := [ [ 176 , 81 , 135 , 62 , 114 , 67 , 93 , 71 , 76 , 67 ] , [ 107 , 92 , 92 , 72 , 77 , 68 ] , [ 45 , 49 , 67 , 59 , 77 , 68 ] ] ;
1950: LD_ADDR_VAR 0 6
1954: PUSH
1955: LD_INT 176
1957: PUSH
1958: LD_INT 81
1960: PUSH
1961: LD_INT 135
1963: PUSH
1964: LD_INT 62
1966: PUSH
1967: LD_INT 114
1969: PUSH
1970: LD_INT 67
1972: PUSH
1973: LD_INT 93
1975: PUSH
1976: LD_INT 71
1978: PUSH
1979: LD_INT 76
1981: PUSH
1982: LD_INT 67
1984: PUSH
1985: EMPTY
1986: LIST
1987: LIST
1988: LIST
1989: LIST
1990: LIST
1991: LIST
1992: LIST
1993: LIST
1994: LIST
1995: LIST
1996: PUSH
1997: LD_INT 107
1999: PUSH
2000: LD_INT 92
2002: PUSH
2003: LD_INT 92
2005: PUSH
2006: LD_INT 72
2008: PUSH
2009: LD_INT 77
2011: PUSH
2012: LD_INT 68
2014: PUSH
2015: EMPTY
2016: LIST
2017: LIST
2018: LIST
2019: LIST
2020: LIST
2021: LIST
2022: PUSH
2023: LD_INT 45
2025: PUSH
2026: LD_INT 49
2028: PUSH
2029: LD_INT 67
2031: PUSH
2032: LD_INT 59
2034: PUSH
2035: LD_INT 77
2037: PUSH
2038: LD_INT 68
2040: PUSH
2041: EMPTY
2042: LIST
2043: LIST
2044: LIST
2045: LIST
2046: LIST
2047: LIST
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: LIST
2053: ST_TO_ADDR
// k := rand ( 1 , areas ) ;
2054: LD_ADDR_VAR 0 4
2058: PUSH
2059: LD_INT 1
2061: PPUSH
2062: LD_VAR 0 5
2066: PPUSH
2067: CALL_OW 12
2071: ST_TO_ADDR
// c := rand ( 1 , 2 ) ;
2072: LD_ADDR_VAR 0 3
2076: PUSH
2077: LD_INT 1
2079: PPUSH
2080: LD_INT 2
2082: PPUSH
2083: CALL_OW 12
2087: ST_TO_ADDR
// uc_side := 1 ;
2088: LD_ADDR_OWVAR 20
2092: PUSH
2093: LD_INT 1
2095: ST_TO_ADDR
// uc_nation := 1 ;
2096: LD_ADDR_OWVAR 21
2100: PUSH
2101: LD_INT 1
2103: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
2104: LD_INT 2
2106: PPUSH
2107: LD_INT 3
2109: PPUSH
2110: LD_INT 3
2112: PPUSH
2113: LD_INT 12
2115: PPUSH
2116: LD_INT 100
2118: PPUSH
2119: CALL 37086 0 5
// veh := CreateVehicle ;
2123: LD_ADDR_VAR 0 8
2127: PUSH
2128: CALL_OW 45
2132: ST_TO_ADDR
// SetDir ( veh , areas [ k ] [ 2 ] ) ;
2133: LD_VAR 0 8
2137: PPUSH
2138: LD_VAR 0 5
2142: PUSH
2143: LD_VAR 0 4
2147: ARRAY
2148: PUSH
2149: LD_INT 2
2151: ARRAY
2152: PPUSH
2153: CALL_OW 233
// PlaceUnitArea ( veh , areas [ k ] [ 1 ] , false ) ;
2157: LD_VAR 0 8
2161: PPUSH
2162: LD_VAR 0 5
2166: PUSH
2167: LD_VAR 0 4
2171: ARRAY
2172: PUSH
2173: LD_INT 1
2175: ARRAY
2176: PPUSH
2177: LD_INT 0
2179: PPUSH
2180: CALL_OW 49
// SetCargo ( veh , [ mat_cans , mat_siberit ] [ c ] , 100 ) ;
2184: LD_VAR 0 8
2188: PPUSH
2189: LD_INT 1
2191: PUSH
2192: LD_INT 3
2194: PUSH
2195: EMPTY
2196: LIST
2197: LIST
2198: PUSH
2199: LD_VAR 0 3
2203: ARRAY
2204: PPUSH
2205: LD_INT 100
2207: PPUSH
2208: CALL_OW 290
// tmp := road [ k ] ;
2212: LD_ADDR_VAR 0 7
2216: PUSH
2217: LD_VAR 0 6
2221: PUSH
2222: LD_VAR 0 4
2226: ARRAY
2227: ST_TO_ADDR
// for i = 1 to tmp div 2 do
2228: LD_ADDR_VAR 0 2
2232: PUSH
2233: DOUBLE
2234: LD_INT 1
2236: DEC
2237: ST_TO_ADDR
2238: LD_VAR 0 7
2242: PUSH
2243: LD_INT 2
2245: DIV
2246: PUSH
2247: FOR_TO
2248: IFFALSE 2295
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2250: LD_VAR 0 8
2254: PPUSH
2255: LD_VAR 0 7
2259: PUSH
2260: LD_VAR 0 2
2264: PUSH
2265: LD_INT 2
2267: MUL
2268: PUSH
2269: LD_INT 1
2271: MINUS
2272: ARRAY
2273: PPUSH
2274: LD_VAR 0 7
2278: PUSH
2279: LD_VAR 0 2
2283: PUSH
2284: LD_INT 2
2286: MUL
2287: ARRAY
2288: PPUSH
2289: CALL_OW 171
2293: GO 2247
2295: POP
2296: POP
// AddComGive ( veh , alfa ) ;
2297: LD_VAR 0 8
2301: PPUSH
2302: LD_INT 5
2304: PPUSH
2305: CALL_OW 221
// AddComWait ( veh , 0 0$2 ) ;
2309: LD_VAR 0 8
2313: PPUSH
2314: LD_INT 70
2316: PPUSH
2317: CALL_OW 202
// for i = tmp div 2 downto 1 do
2321: LD_ADDR_VAR 0 2
2325: PUSH
2326: DOUBLE
2327: LD_VAR 0 7
2331: PUSH
2332: LD_INT 2
2334: DIV
2335: INC
2336: ST_TO_ADDR
2337: LD_INT 1
2339: PUSH
2340: FOR_DOWNTO
2341: IFFALSE 2388
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2343: LD_VAR 0 8
2347: PPUSH
2348: LD_VAR 0 7
2352: PUSH
2353: LD_VAR 0 2
2357: PUSH
2358: LD_INT 2
2360: MUL
2361: PUSH
2362: LD_INT 1
2364: MINUS
2365: ARRAY
2366: PPUSH
2367: LD_VAR 0 7
2371: PUSH
2372: LD_VAR 0 2
2376: PUSH
2377: LD_INT 2
2379: MUL
2380: ARRAY
2381: PPUSH
2382: CALL_OW 171
2386: GO 2340
2388: POP
2389: POP
// AddComMoveToArea ( veh , areas [ k ] [ 1 ] ) ;
2390: LD_VAR 0 8
2394: PPUSH
2395: LD_VAR 0 5
2399: PUSH
2400: LD_VAR 0 4
2404: ARRAY
2405: PUSH
2406: LD_INT 1
2408: ARRAY
2409: PPUSH
2410: CALL_OW 173
// repeat wait ( 0 0$1 ) ;
2414: LD_INT 35
2416: PPUSH
2417: CALL_OW 67
// until IsInArea ( veh , areas [ k ] [ 1 ] ) and GetCargo ( veh , c ) = 0 ;
2421: LD_VAR 0 8
2425: PPUSH
2426: LD_VAR 0 5
2430: PUSH
2431: LD_VAR 0 4
2435: ARRAY
2436: PUSH
2437: LD_INT 1
2439: ARRAY
2440: PPUSH
2441: CALL_OW 308
2445: PUSH
2446: LD_VAR 0 8
2450: PPUSH
2451: LD_VAR 0 3
2455: PPUSH
2456: CALL_OW 289
2460: PUSH
2461: LD_INT 0
2463: EQUAL
2464: AND
2465: IFFALSE 2414
// RemoveUnit ( veh ) ;
2467: LD_VAR 0 8
2471: PPUSH
2472: CALL_OW 64
// end ;
2476: LD_VAR 0 1
2480: RET
// every 3 3$00 do
2481: GO 2483
2483: DISABLE
// begin enable ;
2484: ENABLE
// SpawnCargo ;
2485: CALL 1900 0 0
// end ;
2489: END
// export function PrepareDefenders ; var i , tmp ; begin
2490: LD_INT 0
2492: PPUSH
2493: PPUSH
2494: PPUSH
// if defenders then
2495: LD_EXP 20
2499: IFFALSE 2503
// exit ;
2501: GO 2767
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
2503: LD_ADDR_VAR 0 2
2507: PUSH
2508: DOUBLE
2509: LD_INT 1
2511: DEC
2512: ST_TO_ADDR
2513: LD_INT 4
2515: PUSH
2516: LD_INT 5
2518: PUSH
2519: LD_INT 6
2521: PUSH
2522: EMPTY
2523: LIST
2524: LIST
2525: LIST
2526: PUSH
2527: LD_OWVAR 67
2531: ARRAY
2532: PUSH
2533: FOR_TO
2534: IFFALSE 2673
// begin tmp := Produce ( amfac2 , [ us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_remote , [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ) ;
2536: LD_ADDR_VAR 0 3
2540: PUSH
2541: LD_INT 6
2543: PPUSH
2544: LD_INT 2
2546: PUSH
2547: LD_INT 3
2549: PUSH
2550: EMPTY
2551: LIST
2552: LIST
2553: PUSH
2554: LD_INT 1
2556: PPUSH
2557: LD_INT 2
2559: PPUSH
2560: CALL_OW 12
2564: ARRAY
2565: PPUSH
2566: LD_INT 1
2568: PUSH
2569: LD_INT 3
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: PUSH
2576: LD_INT 1
2578: PPUSH
2579: LD_INT 2
2581: PPUSH
2582: CALL_OW 12
2586: ARRAY
2587: PPUSH
2588: LD_INT 2
2590: PPUSH
2591: LD_INT 4
2593: PUSH
2594: LD_INT 5
2596: PUSH
2597: LD_INT 9
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: LIST
2604: PUSH
2605: LD_INT 1
2607: PPUSH
2608: LD_INT 3
2610: PPUSH
2611: CALL_OW 12
2615: ARRAY
2616: PPUSH
2617: CALL 34740 0 5
2621: ST_TO_ADDR
// if tmp then
2622: LD_VAR 0 3
2626: IFFALSE 2671
// AddComConstruct ( amfac2 , tmp [ 1 ] , tmp [ 2 ] , tmp [ 3 ] , tmp [ 4 ] ) ;
2628: LD_INT 6
2630: PPUSH
2631: LD_VAR 0 3
2635: PUSH
2636: LD_INT 1
2638: ARRAY
2639: PPUSH
2640: LD_VAR 0 3
2644: PUSH
2645: LD_INT 2
2647: ARRAY
2648: PPUSH
2649: LD_VAR 0 3
2653: PUSH
2654: LD_INT 3
2656: ARRAY
2657: PPUSH
2658: LD_VAR 0 3
2662: PUSH
2663: LD_INT 4
2665: ARRAY
2666: PPUSH
2667: CALL_OW 185
// end ;
2671: GO 2533
2673: POP
2674: POP
// repeat wait ( 0 0$1 ) ;
2675: LD_INT 35
2677: PPUSH
2678: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= [ 4 , 5 , 6 ] [ Difficulty ] ;
2682: LD_INT 22
2684: PUSH
2685: LD_INT 1
2687: PUSH
2688: EMPTY
2689: LIST
2690: LIST
2691: PUSH
2692: LD_INT 33
2694: PUSH
2695: LD_INT 2
2697: PUSH
2698: EMPTY
2699: LIST
2700: LIST
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: PPUSH
2706: CALL_OW 69
2710: PUSH
2711: LD_INT 4
2713: PUSH
2714: LD_INT 5
2716: PUSH
2717: LD_INT 6
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: LIST
2724: PUSH
2725: LD_OWVAR 67
2729: ARRAY
2730: GREATEREQUAL
2731: IFFALSE 2675
// defenders := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ;
2733: LD_ADDR_EXP 20
2737: PUSH
2738: LD_INT 22
2740: PUSH
2741: LD_INT 1
2743: PUSH
2744: EMPTY
2745: LIST
2746: LIST
2747: PUSH
2748: LD_INT 33
2750: PUSH
2751: LD_INT 2
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: PUSH
2758: EMPTY
2759: LIST
2760: LIST
2761: PPUSH
2762: CALL_OW 69
2766: ST_TO_ADDR
// end ;
2767: LD_VAR 0 1
2771: RET
// export function Defend ; var i , un , veh , tmp ; begin
2772: LD_INT 0
2774: PPUSH
2775: PPUSH
2776: PPUSH
2777: PPUSH
2778: PPUSH
// defcon_wave := defcon_wave + 1 ;
2779: LD_ADDR_EXP 22
2783: PUSH
2784: LD_EXP 22
2788: PUSH
2789: LD_INT 1
2791: PLUS
2792: ST_TO_ADDR
// if not defenders then
2793: LD_EXP 20
2797: NOT
2798: IFFALSE 2804
// PrepareDefenders ;
2800: CALL 2490 0 0
// if defcon_wave > 1 then
2804: LD_EXP 22
2808: PUSH
2809: LD_INT 1
2811: GREATER
2812: IFFALSE 3070
// begin for i = 1 to defcon_wave + 2 do
2814: LD_ADDR_VAR 0 2
2818: PUSH
2819: DOUBLE
2820: LD_INT 1
2822: DEC
2823: ST_TO_ADDR
2824: LD_EXP 22
2828: PUSH
2829: LD_INT 2
2831: PLUS
2832: PUSH
2833: FOR_TO
2834: IFFALSE 2976
// begin uc_side := 1 ;
2836: LD_ADDR_OWVAR 20
2840: PUSH
2841: LD_INT 1
2843: ST_TO_ADDR
// uc_nation := 1 ;
2844: LD_ADDR_OWVAR 21
2848: PUSH
2849: LD_INT 1
2851: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_siberite , control_manual , [ us_gatling_gun , us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
2852: LD_INT 4
2854: PPUSH
2855: LD_INT 3
2857: PPUSH
2858: LD_INT 1
2860: PPUSH
2861: LD_INT 4
2863: PUSH
2864: LD_INT 6
2866: PUSH
2867: LD_INT 7
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: LIST
2874: PUSH
2875: LD_INT 1
2877: PPUSH
2878: LD_INT 3
2880: PPUSH
2881: CALL_OW 12
2885: ARRAY
2886: PPUSH
2887: LD_INT 100
2889: PPUSH
2890: CALL 37086 0 5
// veh := CreateVehicle ;
2894: LD_ADDR_VAR 0 4
2898: PUSH
2899: CALL_OW 45
2903: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2904: LD_VAR 0 4
2908: PPUSH
2909: LD_INT 1
2911: PPUSH
2912: CALL_OW 233
// defenders := defenders ^ veh ;
2916: LD_ADDR_EXP 20
2920: PUSH
2921: LD_EXP 20
2925: PUSH
2926: LD_VAR 0 4
2930: ADD
2931: ST_TO_ADDR
// PrepareHuman ( false , 3 , 9 ) ;
2932: LD_INT 0
2934: PPUSH
2935: LD_INT 3
2937: PPUSH
2938: LD_INT 9
2940: PPUSH
2941: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2945: CALL_OW 44
2949: PPUSH
2950: LD_VAR 0 4
2954: PPUSH
2955: CALL_OW 52
// PlaceUnitArea ( veh , west_spawn , false ) ;
2959: LD_VAR 0 4
2963: PPUSH
2964: LD_INT 25
2966: PPUSH
2967: LD_INT 0
2969: PPUSH
2970: CALL_OW 49
// end ;
2974: GO 2833
2976: POP
2977: POP
// for i = 1 to defcon_wave do
2978: LD_ADDR_VAR 0 2
2982: PUSH
2983: DOUBLE
2984: LD_INT 1
2986: DEC
2987: ST_TO_ADDR
2988: LD_EXP 22
2992: PUSH
2993: FOR_TO
2994: IFFALSE 3068
// begin uc_side := 1 ;
2996: LD_ADDR_OWVAR 20
3000: PUSH
3001: LD_INT 1
3003: ST_TO_ADDR
// uc_nation := 1 ;
3004: LD_ADDR_OWVAR 21
3008: PUSH
3009: LD_INT 1
3011: ST_TO_ADDR
// PrepareHuman ( false , 5 , 9 ) ;
3012: LD_INT 0
3014: PPUSH
3015: LD_INT 5
3017: PPUSH
3018: LD_INT 9
3020: PPUSH
3021: CALL_OW 380
// un := CreateHuman ;
3025: LD_ADDR_VAR 0 3
3029: PUSH
3030: CALL_OW 44
3034: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
3035: LD_VAR 0 3
3039: PPUSH
3040: LD_INT 25
3042: PPUSH
3043: LD_INT 0
3045: PPUSH
3046: CALL_OW 49
// defenders := defenders ^ un ;
3050: LD_ADDR_EXP 20
3054: PUSH
3055: LD_EXP 20
3059: PUSH
3060: LD_VAR 0 3
3064: ADD
3065: ST_TO_ADDR
// end ;
3066: GO 2993
3068: POP
3069: POP
// end ; repeat wait ( 0 0$1 ) ;
3070: LD_INT 35
3072: PPUSH
3073: CALL_OW 67
// for i in defenders do
3077: LD_ADDR_VAR 0 2
3081: PUSH
3082: LD_EXP 20
3086: PUSH
3087: FOR_IN
3088: IFFALSE 3170
// begin if defcon and GetDistUnitXY ( i , defcon [ 1 ] , defcon [ 2 ] ) > 10 and not HasTask ( i ) then
3090: LD_EXP 21
3094: PUSH
3095: LD_VAR 0 2
3099: PPUSH
3100: LD_EXP 21
3104: PUSH
3105: LD_INT 1
3107: ARRAY
3108: PPUSH
3109: LD_EXP 21
3113: PUSH
3114: LD_INT 2
3116: ARRAY
3117: PPUSH
3118: CALL_OW 297
3122: PUSH
3123: LD_INT 10
3125: GREATER
3126: AND
3127: PUSH
3128: LD_VAR 0 2
3132: PPUSH
3133: CALL_OW 314
3137: NOT
3138: AND
3139: IFFALSE 3168
// ComAgressiveMove ( i , defcon [ 1 ] , defcon [ 2 ] ) ;
3141: LD_VAR 0 2
3145: PPUSH
3146: LD_EXP 21
3150: PUSH
3151: LD_INT 1
3153: ARRAY
3154: PPUSH
3155: LD_EXP 21
3159: PUSH
3160: LD_INT 2
3162: ARRAY
3163: PPUSH
3164: CALL_OW 114
// end ;
3168: GO 3087
3170: POP
3171: POP
// until not defenders ;
3172: LD_EXP 20
3176: NOT
3177: IFFALSE 3070
// end ;
3179: LD_VAR 0 1
3183: RET
// every 0 0$1 do var radar , i ;
3184: GO 3186
3186: DISABLE
3187: LD_INT 0
3189: PPUSH
3190: PPUSH
// begin uc_side := 1 ;
3191: LD_ADDR_OWVAR 20
3195: PUSH
3196: LD_INT 1
3198: ST_TO_ADDR
// uc_nation := 1 ;
3199: LD_ADDR_OWVAR 21
3203: PUSH
3204: LD_INT 1
3206: ST_TO_ADDR
// PrepareVehicle ( us_light_wheeled , engine_solar , control_computer , us_radar , 100 ) ;
3207: LD_INT 1
3209: PPUSH
3210: LD_INT 2
3212: PPUSH
3213: LD_INT 3
3215: PPUSH
3216: LD_INT 11
3218: PPUSH
3219: LD_INT 100
3221: PPUSH
3222: CALL 37086 0 5
// radar := CreateVehicle ;
3226: LD_ADDR_VAR 0 1
3230: PUSH
3231: CALL_OW 45
3235: ST_TO_ADDR
// SetDir ( radar , 4 ) ;
3236: LD_VAR 0 1
3240: PPUSH
3241: LD_INT 4
3243: PPUSH
3244: CALL_OW 233
// PlaceUnitXY ( radar , 51 , 45 , false ) ;
3248: LD_VAR 0 1
3252: PPUSH
3253: LD_INT 51
3255: PPUSH
3256: LD_INT 45
3258: PPUSH
3259: LD_INT 0
3261: PPUSH
3262: CALL_OW 48
// repeat AddComWait ( radar , 0 0$20 ) ;
3266: LD_VAR 0 1
3270: PPUSH
3271: LD_INT 700
3273: PPUSH
3274: CALL_OW 202
// AddComMoveXY ( radar , 65 , 75 ) ;
3278: LD_VAR 0 1
3282: PPUSH
3283: LD_INT 65
3285: PPUSH
3286: LD_INT 75
3288: PPUSH
3289: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3293: LD_VAR 0 1
3297: PPUSH
3298: LD_INT 350
3300: PPUSH
3301: CALL_OW 202
// AddComMoveXY ( radar , 83 , 87 ) ;
3305: LD_VAR 0 1
3309: PPUSH
3310: LD_INT 83
3312: PPUSH
3313: LD_INT 87
3315: PPUSH
3316: CALL_OW 171
// AddComWait ( radar , 0 0$15 ) ;
3320: LD_VAR 0 1
3324: PPUSH
3325: LD_INT 525
3327: PPUSH
3328: CALL_OW 202
// AddComMoveXY ( radar , 94 , 81 ) ;
3332: LD_VAR 0 1
3336: PPUSH
3337: LD_INT 94
3339: PPUSH
3340: LD_INT 81
3342: PPUSH
3343: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3347: LD_VAR 0 1
3351: PPUSH
3352: LD_INT 350
3354: PPUSH
3355: CALL_OW 202
// AddComMoveXY ( radar , 55 , 48 ) ;
3359: LD_VAR 0 1
3363: PPUSH
3364: LD_INT 55
3366: PPUSH
3367: LD_INT 48
3369: PPUSH
3370: CALL_OW 171
// wait ( 1 1$00 ) ;
3374: LD_INT 2100
3376: PPUSH
3377: CALL_OW 67
// until not IsOk ( radar ) ;
3381: LD_VAR 0 1
3385: PPUSH
3386: CALL_OW 302
3390: NOT
3391: IFFALSE 3266
// end ;
3393: PPOPN 2
3395: END
// every 7 7$30 trigger Difficulty > 1 and extra_patrol do var un ;
3396: LD_OWVAR 67
3400: PUSH
3401: LD_INT 1
3403: GREATER
3404: PUSH
3405: LD_EXP 11
3409: AND
3410: IFFALSE 3632
3412: GO 3414
3414: DISABLE
3415: LD_INT 0
3417: PPUSH
// begin enable ;
3418: ENABLE
// uc_side := 1 ;
3419: LD_ADDR_OWVAR 20
3423: PUSH
3424: LD_INT 1
3426: ST_TO_ADDR
// uc_nation := 1 ;
3427: LD_ADDR_OWVAR 21
3431: PUSH
3432: LD_INT 1
3434: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_gatling_gun , 100 ) ;
3435: LD_INT 5
3437: PPUSH
3438: LD_INT 3
3440: PPUSH
3441: LD_INT 3
3443: PPUSH
3444: LD_INT 4
3446: PPUSH
3447: LD_INT 100
3449: PPUSH
3450: CALL 37086 0 5
// un := CreateVehicle ;
3454: LD_ADDR_VAR 0 1
3458: PUSH
3459: CALL_OW 45
3463: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3464: LD_VAR 0 1
3468: PPUSH
3469: LD_INT 3
3471: PPUSH
3472: CALL_OW 233
// PlaceUnitXY ( un , 155 , 2 , false ) ;
3476: LD_VAR 0 1
3480: PPUSH
3481: LD_INT 155
3483: PPUSH
3484: LD_INT 2
3486: PPUSH
3487: LD_INT 0
3489: PPUSH
3490: CALL_OW 48
// ComAgressiveMove ( un , 169 , 77 ) ;
3494: LD_VAR 0 1
3498: PPUSH
3499: LD_INT 169
3501: PPUSH
3502: LD_INT 77
3504: PPUSH
3505: CALL_OW 114
// AddComWait ( un , 0 0$2 ) ;
3509: LD_VAR 0 1
3513: PPUSH
3514: LD_INT 70
3516: PPUSH
3517: CALL_OW 202
// AddComAgressiveMove ( un , 134 , 62 ) ;
3521: LD_VAR 0 1
3525: PPUSH
3526: LD_INT 134
3528: PPUSH
3529: LD_INT 62
3531: PPUSH
3532: CALL_OW 174
// AddComAgressiveMove ( un , 103 , 42 ) ;
3536: LD_VAR 0 1
3540: PPUSH
3541: LD_INT 103
3543: PPUSH
3544: LD_INT 42
3546: PPUSH
3547: CALL_OW 174
// AddComWait ( un , 0 0$2 ) ;
3551: LD_VAR 0 1
3555: PPUSH
3556: LD_INT 70
3558: PPUSH
3559: CALL_OW 202
// AddComAgressiveMove ( un , 84 , 2 ) ;
3563: LD_VAR 0 1
3567: PPUSH
3568: LD_INT 84
3570: PPUSH
3571: LD_INT 2
3573: PPUSH
3574: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
3578: LD_INT 35
3580: PPUSH
3581: CALL_OW 67
// if IsDead ( un ) then
3585: LD_VAR 0 1
3589: PPUSH
3590: CALL_OW 301
3594: IFFALSE 3606
// begin extra_patrol := false ;
3596: LD_ADDR_EXP 11
3600: PUSH
3601: LD_INT 0
3603: ST_TO_ADDR
// exit ;
3604: GO 3632
// end ; until IsAt ( un , 84 , 2 ) ;
3606: LD_VAR 0 1
3610: PPUSH
3611: LD_INT 84
3613: PPUSH
3614: LD_INT 2
3616: PPUSH
3617: CALL_OW 307
3621: IFFALSE 3578
// RemoveUnit ( un ) ;
3623: LD_VAR 0 1
3627: PPUSH
3628: CALL_OW 64
// end ; end_of_file
3632: PPOPN 1
3634: END
// export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor ; export function PrepareFriends ; var i , tmp , buildings , areas , bunkers , cl ; begin
3635: LD_INT 0
3637: PPUSH
3638: PPUSH
3639: PPUSH
3640: PPUSH
3641: PPUSH
3642: PPUSH
3643: PPUSH
// uc_side := 4 ;
3644: LD_ADDR_OWVAR 20
3648: PUSH
3649: LD_INT 4
3651: ST_TO_ADDR
// uc_nation := 1 ;
3652: LD_ADDR_OWVAR 21
3656: PUSH
3657: LD_INT 1
3659: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 10c_ ) ;
3660: LD_ADDR_EXP 37
3664: PUSH
3665: LD_STRING DeltaDoctor
3667: PPUSH
3668: LD_EXP 1
3672: NOT
3673: PPUSH
3674: LD_STRING 10c_
3676: PPUSH
3677: CALL 32262 0 3
3681: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 10c_ ) ;
3682: LD_ADDR_EXP 36
3686: PUSH
3687: LD_STRING Joan
3689: PPUSH
3690: LD_EXP 1
3694: NOT
3695: PPUSH
3696: LD_STRING 10c_
3698: PPUSH
3699: CALL 32262 0 3
3703: ST_TO_ADDR
// if Joan then
3704: LD_EXP 36
3708: IFFALSE 3739
// friends := Insert ( friends , friends + 1 , Joan ) ;
3710: LD_ADDR_EXP 4
3714: PUSH
3715: LD_EXP 4
3719: PPUSH
3720: LD_EXP 4
3724: PUSH
3725: LD_INT 1
3727: PLUS
3728: PPUSH
3729: LD_EXP 36
3733: PPUSH
3734: CALL_OW 2
3738: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 10c_ ) ;
3739: LD_ADDR_EXP 35
3743: PUSH
3744: LD_STRING Simms
3746: PPUSH
3747: LD_EXP 1
3751: NOT
3752: PPUSH
3753: LD_STRING 10c_
3755: PPUSH
3756: CALL 32262 0 3
3760: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 11_ ) ;
3761: LD_ADDR_EXP 34
3765: PUSH
3766: LD_STRING Kikuchi
3768: PPUSH
3769: LD_EXP 1
3773: NOT
3774: PPUSH
3775: LD_STRING 11_
3777: PPUSH
3778: CALL 32262 0 3
3782: ST_TO_ADDR
// if Kikuchi then
3783: LD_EXP 34
3787: IFFALSE 3818
// friends := Insert ( friends , friends + 1 , Kikuchi ) ;
3789: LD_ADDR_EXP 4
3793: PUSH
3794: LD_EXP 4
3798: PPUSH
3799: LD_EXP 4
3803: PUSH
3804: LD_INT 1
3806: PLUS
3807: PPUSH
3808: LD_EXP 34
3812: PPUSH
3813: CALL_OW 2
3817: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 11_ ) ;
3818: LD_ADDR_EXP 33
3822: PUSH
3823: LD_STRING Frank
3825: PPUSH
3826: LD_EXP 1
3830: NOT
3831: PPUSH
3832: LD_STRING 11_
3834: PPUSH
3835: CALL 32262 0 3
3839: ST_TO_ADDR
// if Frank then
3840: LD_EXP 33
3844: IFFALSE 3875
// friends := Insert ( friends , friends + 1 , Frank ) ;
3846: LD_ADDR_EXP 4
3850: PUSH
3851: LD_EXP 4
3855: PPUSH
3856: LD_EXP 4
3860: PUSH
3861: LD_INT 1
3863: PLUS
3864: PPUSH
3865: LD_EXP 33
3869: PPUSH
3870: CALL_OW 2
3874: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , 11_ ) ;
3875: LD_ADDR_EXP 32
3879: PUSH
3880: LD_STRING Gary
3882: PPUSH
3883: LD_EXP 1
3887: NOT
3888: PPUSH
3889: LD_STRING 11_
3891: PPUSH
3892: CALL 32262 0 3
3896: ST_TO_ADDR
// if Gary then
3897: LD_EXP 32
3901: IFFALSE 3932
// friends := Insert ( friends , friends + 1 , Gary ) ;
3903: LD_ADDR_EXP 4
3907: PUSH
3908: LD_EXP 4
3912: PPUSH
3913: LD_EXP 4
3917: PUSH
3918: LD_INT 1
3920: PLUS
3921: PPUSH
3922: LD_EXP 32
3926: PPUSH
3927: CALL_OW 2
3931: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , ( not debug ) , 11_ ) ;
3932: LD_ADDR_EXP 31
3936: PUSH
3937: LD_STRING Cornell
3939: PPUSH
3940: LD_EXP 1
3944: NOT
3945: PPUSH
3946: LD_STRING 11_
3948: PPUSH
3949: CALL 32262 0 3
3953: ST_TO_ADDR
// if Cornel then
3954: LD_EXP 31
3958: IFFALSE 3989
// friends := Insert ( friends , friends + 1 , Cornel ) ;
3960: LD_ADDR_EXP 4
3964: PUSH
3965: LD_EXP 4
3969: PPUSH
3970: LD_EXP 4
3974: PUSH
3975: LD_INT 1
3977: PLUS
3978: PPUSH
3979: LD_EXP 31
3983: PPUSH
3984: CALL_OW 2
3988: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , 11_ ) ;
3989: LD_ADDR_EXP 30
3993: PUSH
3994: LD_STRING Houten
3996: PPUSH
3997: LD_EXP 1
4001: NOT
4002: PPUSH
4003: LD_STRING 11_
4005: PPUSH
4006: CALL 32262 0 3
4010: ST_TO_ADDR
// if Houten then
4011: LD_EXP 30
4015: IFFALSE 4046
// friends := Insert ( friends , friends + 1 , Houten ) ;
4017: LD_ADDR_EXP 4
4021: PUSH
4022: LD_EXP 4
4026: PPUSH
4027: LD_EXP 4
4031: PUSH
4032: LD_INT 1
4034: PLUS
4035: PPUSH
4036: LD_EXP 30
4040: PPUSH
4041: CALL_OW 2
4045: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 11_ ) ;
4046: LD_ADDR_EXP 29
4050: PUSH
4051: LD_STRING Gladstone
4053: PPUSH
4054: LD_EXP 1
4058: NOT
4059: PPUSH
4060: LD_STRING 11_
4062: PPUSH
4063: CALL 32262 0 3
4067: ST_TO_ADDR
// if Gladstone then
4068: LD_EXP 29
4072: IFFALSE 4103
// friends := Insert ( friends , friends + 1 , Gladstone ) ;
4074: LD_ADDR_EXP 4
4078: PUSH
4079: LD_EXP 4
4083: PPUSH
4084: LD_EXP 4
4088: PUSH
4089: LD_INT 1
4091: PLUS
4092: PPUSH
4093: LD_EXP 29
4097: PPUSH
4098: CALL_OW 2
4102: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 11_ ) ;
4103: LD_ADDR_EXP 23
4107: PUSH
4108: LD_STRING Lisa
4110: PPUSH
4111: LD_EXP 1
4115: NOT
4116: PPUSH
4117: LD_STRING 11_
4119: PPUSH
4120: CALL 32262 0 3
4124: ST_TO_ADDR
// if Lisa then
4125: LD_EXP 23
4129: IFFALSE 4154
// friends := Insert ( friends , 1 , Lisa ) ;
4131: LD_ADDR_EXP 4
4135: PUSH
4136: LD_EXP 4
4140: PPUSH
4141: LD_INT 1
4143: PPUSH
4144: LD_EXP 23
4148: PPUSH
4149: CALL_OW 2
4153: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 11_ ) ;
4154: LD_ADDR_EXP 24
4158: PUSH
4159: LD_STRING Donaldson
4161: PPUSH
4162: LD_EXP 1
4166: NOT
4167: PPUSH
4168: LD_STRING 11_
4170: PPUSH
4171: CALL 32262 0 3
4175: ST_TO_ADDR
// if Donaldson then
4176: LD_EXP 24
4180: IFFALSE 4211
// friends := Insert ( friends , friends + 1 , Donaldson ) ;
4182: LD_ADDR_EXP 4
4186: PUSH
4187: LD_EXP 4
4191: PPUSH
4192: LD_EXP 4
4196: PUSH
4197: LD_INT 1
4199: PLUS
4200: PPUSH
4201: LD_EXP 24
4205: PPUSH
4206: CALL_OW 2
4210: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 11_ ) ;
4211: LD_ADDR_EXP 25
4215: PUSH
4216: LD_STRING Bobby
4218: PPUSH
4219: LD_EXP 1
4223: NOT
4224: PPUSH
4225: LD_STRING 11_
4227: PPUSH
4228: CALL 32262 0 3
4232: ST_TO_ADDR
// if Bobby then
4233: LD_EXP 25
4237: IFFALSE 4268
// friends := Insert ( friends , friends + 1 , Bobby ) ;
4239: LD_ADDR_EXP 4
4243: PUSH
4244: LD_EXP 4
4248: PPUSH
4249: LD_EXP 4
4253: PUSH
4254: LD_INT 1
4256: PLUS
4257: PPUSH
4258: LD_EXP 25
4262: PPUSH
4263: CALL_OW 2
4267: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 11_ ) ;
4268: LD_ADDR_EXP 26
4272: PUSH
4273: LD_STRING Cyrus
4275: PPUSH
4276: LD_EXP 1
4280: NOT
4281: PPUSH
4282: LD_STRING 11_
4284: PPUSH
4285: CALL 32262 0 3
4289: ST_TO_ADDR
// if Cyrus then
4290: LD_EXP 26
4294: IFFALSE 4325
// friends := Insert ( friends , friends + 1 , Cyrus ) ;
4296: LD_ADDR_EXP 4
4300: PUSH
4301: LD_EXP 4
4305: PPUSH
4306: LD_EXP 4
4310: PUSH
4311: LD_INT 1
4313: PLUS
4314: PPUSH
4315: LD_EXP 26
4319: PPUSH
4320: CALL_OW 2
4324: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 11_ ) ;
4325: LD_ADDR_EXP 27
4329: PUSH
4330: LD_STRING Denis
4332: PPUSH
4333: LD_EXP 1
4337: NOT
4338: PPUSH
4339: LD_STRING 11_
4341: PPUSH
4342: CALL 32262 0 3
4346: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , 11_ ) ;
4347: LD_ADDR_EXP 28
4351: PUSH
4352: LD_STRING Brown
4354: PPUSH
4355: LD_EXP 1
4359: NOT
4360: PPUSH
4361: LD_STRING 11_
4363: PPUSH
4364: CALL 32262 0 3
4368: ST_TO_ADDR
// if Brown then
4369: LD_EXP 28
4373: IFFALSE 4404
// friends := Insert ( friends , friends + 1 , Brown ) ;
4375: LD_ADDR_EXP 4
4379: PUSH
4380: LD_EXP 4
4384: PPUSH
4385: LD_EXP 4
4389: PUSH
4390: LD_INT 1
4392: PLUS
4393: PPUSH
4394: LD_EXP 28
4398: PPUSH
4399: CALL_OW 2
4403: ST_TO_ADDR
// friends := friends ^ CreateCharacterSet ( 11c_others ) ^ CreateCharacterSet ( 11_others ) ;
4404: LD_ADDR_EXP 4
4408: PUSH
4409: LD_EXP 4
4413: PUSH
4414: LD_STRING 11c_others
4416: PPUSH
4417: CALL_OW 31
4421: ADD
4422: PUSH
4423: LD_STRING 11_others
4425: PPUSH
4426: CALL_OW 31
4430: ADD
4431: ST_TO_ADDR
// if friends < 18 then
4432: LD_EXP 4
4436: PUSH
4437: LD_INT 18
4439: LESS
4440: IFFALSE 4512
// for i = 1 to 18 do
4442: LD_ADDR_VAR 0 2
4446: PUSH
4447: DOUBLE
4448: LD_INT 1
4450: DEC
4451: ST_TO_ADDR
4452: LD_INT 18
4454: PUSH
4455: FOR_TO
4456: IFFALSE 4510
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 7 ) ;
4458: LD_INT 0
4460: PPUSH
4461: LD_INT 1
4463: PPUSH
4464: LD_INT 4
4466: PPUSH
4467: CALL_OW 12
4471: PPUSH
4472: LD_INT 7
4474: PPUSH
4475: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
4479: LD_ADDR_EXP 4
4483: PUSH
4484: LD_EXP 4
4488: PPUSH
4489: LD_EXP 4
4493: PUSH
4494: LD_INT 1
4496: PLUS
4497: PPUSH
4498: CALL_OW 44
4502: PPUSH
4503: CALL_OW 2
4507: ST_TO_ADDR
// end ;
4508: GO 4455
4510: POP
4511: POP
// for i in friends do
4512: LD_ADDR_VAR 0 2
4516: PUSH
4517: LD_EXP 4
4521: PUSH
4522: FOR_IN
4523: IFFALSE 4581
// if GetSkill ( i , 1 ) >= GetSkill ( i , 4 ) then
4525: LD_VAR 0 2
4529: PPUSH
4530: LD_INT 1
4532: PPUSH
4533: CALL_OW 259
4537: PUSH
4538: LD_VAR 0 2
4542: PPUSH
4543: LD_INT 4
4545: PPUSH
4546: CALL_OW 259
4550: GREATEREQUAL
4551: IFFALSE 4567
// SetClass ( i , class_soldier ) else
4553: LD_VAR 0 2
4557: PPUSH
4558: LD_INT 1
4560: PPUSH
4561: CALL_OW 336
4565: GO 4579
// SetClass ( i , class_scientistic ) ;
4567: LD_VAR 0 2
4571: PPUSH
4572: LD_INT 4
4574: PPUSH
4575: CALL_OW 336
4579: GO 4522
4581: POP
4582: POP
// if Frank then
4583: LD_EXP 33
4587: IFFALSE 4601
// SetClass ( Frank , class_sniper ) ;
4589: LD_EXP 33
4593: PPUSH
4594: LD_INT 5
4596: PPUSH
4597: CALL_OW 336
// SetClass ( [ Joan , Denis , DeltaDoctor , Simms ] , class_scientistic ) ;
4601: LD_EXP 36
4605: PUSH
4606: LD_EXP 27
4610: PUSH
4611: LD_EXP 37
4615: PUSH
4616: LD_EXP 35
4620: PUSH
4621: EMPTY
4622: LIST
4623: LIST
4624: LIST
4625: LIST
4626: PPUSH
4627: LD_INT 4
4629: PPUSH
4630: CALL_OW 336
// selected = CharacterSelection (  , 7 , 7 , [ sel_dont_change_class , JMM , Roth , Simms , Denis , DeltaDoctor , sel_not_hired , sel_changeable , sel_change_class ] ^ friends , [ class_soldier , [ class_scientistic , 2 ] , [ class_sniper , 0 , 3 ] ] ) ;
4634: LD_ADDR_EXP 3
4638: PUSH
4639: LD_STRING 
4641: PPUSH
4642: LD_INT 7
4644: PPUSH
4645: LD_INT 7
4647: PPUSH
4648: LD_INT -6
4650: PUSH
4651: LD_EXP 14
4655: PUSH
4656: LD_EXP 15
4660: PUSH
4661: LD_EXP 35
4665: PUSH
4666: LD_EXP 27
4670: PUSH
4671: LD_EXP 37
4675: PUSH
4676: LD_INT -2
4678: PUSH
4679: LD_INT -3
4681: PUSH
4682: LD_INT -5
4684: PUSH
4685: EMPTY
4686: LIST
4687: LIST
4688: LIST
4689: LIST
4690: LIST
4691: LIST
4692: LIST
4693: LIST
4694: LIST
4695: PUSH
4696: LD_EXP 4
4700: ADD
4701: PPUSH
4702: LD_INT 1
4704: PUSH
4705: LD_INT 4
4707: PUSH
4708: LD_INT 2
4710: PUSH
4711: EMPTY
4712: LIST
4713: LIST
4714: PUSH
4715: LD_INT 5
4717: PUSH
4718: LD_INT 0
4720: PUSH
4721: LD_INT 3
4723: PUSH
4724: EMPTY
4725: LIST
4726: LIST
4727: LIST
4728: PUSH
4729: EMPTY
4730: LIST
4731: LIST
4732: LIST
4733: PPUSH
4734: CALL_OW 42
4738: ST_TO_ADDR
// if Simms then
4739: LD_EXP 35
4743: IFFALSE 4761
// selected := selected ^ Simms ;
4745: LD_ADDR_EXP 3
4749: PUSH
4750: LD_EXP 3
4754: PUSH
4755: LD_EXP 35
4759: ADD
4760: ST_TO_ADDR
// if Denis then
4761: LD_EXP 27
4765: IFFALSE 4783
// selected := selected ^ Denis ;
4767: LD_ADDR_EXP 3
4771: PUSH
4772: LD_EXP 3
4776: PUSH
4777: LD_EXP 27
4781: ADD
4782: ST_TO_ADDR
// if DeltaDoctor then
4783: LD_EXP 37
4787: IFFALSE 4805
// selected := selected ^ DeltaDoctor ;
4789: LD_ADDR_EXP 3
4793: PUSH
4794: LD_EXP 3
4798: PUSH
4799: LD_EXP 37
4803: ADD
4804: ST_TO_ADDR
// friends := friends diff selected ;
4805: LD_ADDR_EXP 4
4809: PUSH
4810: LD_EXP 4
4814: PUSH
4815: LD_EXP 3
4819: DIFF
4820: ST_TO_ADDR
// buildings := [ [ ambar1 , ambar2 , ambar3 ] , [ amlab2 , amlab3 , amlab4 ] ] ;
4821: LD_ADDR_VAR 0 4
4825: PUSH
4826: LD_INT 111
4828: PUSH
4829: LD_INT 137
4831: PUSH
4832: LD_INT 51
4834: PUSH
4835: EMPTY
4836: LIST
4837: LIST
4838: LIST
4839: PUSH
4840: LD_INT 147
4842: PUSH
4843: LD_INT 129
4845: PUSH
4846: LD_INT 25
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: LIST
4853: PUSH
4854: EMPTY
4855: LIST
4856: LIST
4857: ST_TO_ADDR
// areas := [ friends_spawn_1 , friends_spawn_2 , friends_spawn_3 , friends_spawn_4 , friends_spawn_5 , friends_spawn_6 ] ;
4858: LD_ADDR_VAR 0 5
4862: PUSH
4863: LD_INT 5
4865: PUSH
4866: LD_INT 6
4868: PUSH
4869: LD_INT 7
4871: PUSH
4872: LD_INT 8
4874: PUSH
4875: LD_INT 17
4877: PUSH
4878: LD_INT 18
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: LIST
4885: LIST
4886: LIST
4887: LIST
4888: ST_TO_ADDR
// for i in buildings do
4889: LD_ADDR_VAR 0 2
4893: PUSH
4894: LD_VAR 0 4
4898: PUSH
4899: FOR_IN
4900: IFFALSE 4916
// SetSide ( i , 4 ) ;
4902: LD_VAR 0 2
4906: PPUSH
4907: LD_INT 4
4909: PPUSH
4910: CALL_OW 235
4914: GO 4899
4916: POP
4917: POP
// for i in selected do
4918: LD_ADDR_VAR 0 2
4922: PUSH
4923: LD_EXP 3
4927: PUSH
4928: FOR_IN
4929: IFFALSE 5269
// begin if GetClass ( i ) in [ 1 , 5 ] then
4931: LD_VAR 0 2
4935: PPUSH
4936: CALL_OW 257
4940: PUSH
4941: LD_INT 1
4943: PUSH
4944: LD_INT 5
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: IN
4951: IFFALSE 5111
// begin if buildings [ 1 ] then
4953: LD_VAR 0 4
4957: PUSH
4958: LD_INT 1
4960: ARRAY
4961: IFFALSE 5022
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
4963: LD_VAR 0 2
4967: PPUSH
4968: LD_VAR 0 4
4972: PUSH
4973: LD_INT 1
4975: ARRAY
4976: PUSH
4977: LD_INT 1
4979: ARRAY
4980: PPUSH
4981: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
4985: LD_ADDR_VAR 0 4
4989: PUSH
4990: LD_VAR 0 4
4994: PPUSH
4995: LD_INT 1
4997: PPUSH
4998: LD_VAR 0 4
5002: PUSH
5003: LD_INT 1
5005: ARRAY
5006: PPUSH
5007: LD_INT 1
5009: PPUSH
5010: CALL_OW 3
5014: PPUSH
5015: CALL_OW 1
5019: ST_TO_ADDR
// end else
5020: GO 5109
// begin if not areas then
5022: LD_VAR 0 5
5026: NOT
5027: IFFALSE 5061
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5029: LD_VAR 0 2
5033: PPUSH
5034: LD_INT 87
5036: PPUSH
5037: LD_INT 68
5039: PPUSH
5040: LD_INT 8
5042: PPUSH
5043: LD_INT 0
5045: PPUSH
5046: CALL_OW 50
// ComHold ( i ) ;
5050: LD_VAR 0 2
5054: PPUSH
5055: CALL_OW 140
// end else
5059: GO 5109
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5061: LD_VAR 0 2
5065: PPUSH
5066: LD_VAR 0 5
5070: PUSH
5071: LD_INT 1
5073: ARRAY
5074: PPUSH
5075: LD_INT 0
5077: PPUSH
5078: CALL_OW 49
// ComHold ( i ) ;
5082: LD_VAR 0 2
5086: PPUSH
5087: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5091: LD_ADDR_VAR 0 5
5095: PUSH
5096: LD_VAR 0 5
5100: PPUSH
5101: LD_INT 1
5103: PPUSH
5104: CALL_OW 3
5108: ST_TO_ADDR
// end ; end ; end else
5109: GO 5267
// begin if buildings [ 2 ] then
5111: LD_VAR 0 4
5115: PUSH
5116: LD_INT 2
5118: ARRAY
5119: IFFALSE 5180
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
5121: LD_VAR 0 2
5125: PPUSH
5126: LD_VAR 0 4
5130: PUSH
5131: LD_INT 2
5133: ARRAY
5134: PUSH
5135: LD_INT 1
5137: ARRAY
5138: PPUSH
5139: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
5143: LD_ADDR_VAR 0 4
5147: PUSH
5148: LD_VAR 0 4
5152: PPUSH
5153: LD_INT 2
5155: PPUSH
5156: LD_VAR 0 4
5160: PUSH
5161: LD_INT 2
5163: ARRAY
5164: PPUSH
5165: LD_INT 1
5167: PPUSH
5168: CALL_OW 3
5172: PPUSH
5173: CALL_OW 1
5177: ST_TO_ADDR
// end else
5178: GO 5267
// begin if not areas then
5180: LD_VAR 0 5
5184: NOT
5185: IFFALSE 5219
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5187: LD_VAR 0 2
5191: PPUSH
5192: LD_INT 87
5194: PPUSH
5195: LD_INT 68
5197: PPUSH
5198: LD_INT 8
5200: PPUSH
5201: LD_INT 0
5203: PPUSH
5204: CALL_OW 50
// ComHold ( i ) ;
5208: LD_VAR 0 2
5212: PPUSH
5213: CALL_OW 140
// end else
5217: GO 5267
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5219: LD_VAR 0 2
5223: PPUSH
5224: LD_VAR 0 5
5228: PUSH
5229: LD_INT 1
5231: ARRAY
5232: PPUSH
5233: LD_INT 0
5235: PPUSH
5236: CALL_OW 49
// ComHold ( i ) ;
5240: LD_VAR 0 2
5244: PPUSH
5245: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5249: LD_ADDR_VAR 0 5
5253: PUSH
5254: LD_VAR 0 5
5258: PPUSH
5259: LD_INT 1
5261: PPUSH
5262: CALL_OW 3
5266: ST_TO_ADDR
// end ; end ; end ; end ;
5267: GO 4928
5269: POP
5270: POP
// bunkers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) ;
5271: LD_ADDR_VAR 0 6
5275: PUSH
5276: LD_INT 22
5278: PUSH
5279: LD_INT 1
5281: PUSH
5282: EMPTY
5283: LIST
5284: LIST
5285: PUSH
5286: LD_INT 30
5288: PUSH
5289: LD_INT 32
5291: PUSH
5292: EMPTY
5293: LIST
5294: LIST
5295: PUSH
5296: EMPTY
5297: LIST
5298: LIST
5299: PPUSH
5300: CALL_OW 69
5304: ST_TO_ADDR
// for i = bunkers - friends downto 1 do
5305: LD_ADDR_VAR 0 2
5309: PUSH
5310: DOUBLE
5311: LD_VAR 0 6
5315: PUSH
5316: LD_EXP 4
5320: MINUS
5321: INC
5322: ST_TO_ADDR
5323: LD_INT 1
5325: PUSH
5326: FOR_DOWNTO
5327: IFFALSE 5390
// begin PrepareHuman ( false , 1 , [ 7 , 8 , 9 ] [ Difficulty ] ) ;
5329: LD_INT 0
5331: PPUSH
5332: LD_INT 1
5334: PPUSH
5335: LD_INT 7
5337: PUSH
5338: LD_INT 8
5340: PUSH
5341: LD_INT 9
5343: PUSH
5344: EMPTY
5345: LIST
5346: LIST
5347: LIST
5348: PUSH
5349: LD_OWVAR 67
5353: ARRAY
5354: PPUSH
5355: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
5359: LD_ADDR_EXP 4
5363: PUSH
5364: LD_EXP 4
5368: PPUSH
5369: LD_EXP 4
5373: PUSH
5374: LD_INT 1
5376: PLUS
5377: PPUSH
5378: CALL_OW 44
5382: PPUSH
5383: CALL_OW 2
5387: ST_TO_ADDR
// end ;
5388: GO 5326
5390: POP
5391: POP
// if friends then
5392: LD_EXP 4
5396: IFFALSE 5512
// begin tmp := friends ;
5398: LD_ADDR_VAR 0 3
5402: PUSH
5403: LD_EXP 4
5407: ST_TO_ADDR
// for i = 1 to bunkers do
5408: LD_ADDR_VAR 0 2
5412: PUSH
5413: DOUBLE
5414: LD_INT 1
5416: DEC
5417: ST_TO_ADDR
5418: LD_VAR 0 6
5422: PUSH
5423: FOR_TO
5424: IFFALSE 5510
// begin SetSide ( tmp [ tmp ] , 1 ) ;
5426: LD_VAR 0 3
5430: PUSH
5431: LD_VAR 0 3
5435: ARRAY
5436: PPUSH
5437: LD_INT 1
5439: PPUSH
5440: CALL_OW 235
// SetClass ( tmp [ tmp ] , 1 ) ;
5444: LD_VAR 0 3
5448: PUSH
5449: LD_VAR 0 3
5453: ARRAY
5454: PPUSH
5455: LD_INT 1
5457: PPUSH
5458: CALL_OW 336
// PlaceHumanInUnit ( tmp [ tmp ] , bunkers [ i ] ) ;
5462: LD_VAR 0 3
5466: PUSH
5467: LD_VAR 0 3
5471: ARRAY
5472: PPUSH
5473: LD_VAR 0 6
5477: PUSH
5478: LD_VAR 0 2
5482: ARRAY
5483: PPUSH
5484: CALL_OW 52
// tmp := Delete ( tmp , tmp ) ;
5488: LD_ADDR_VAR 0 3
5492: PUSH
5493: LD_VAR 0 3
5497: PPUSH
5498: LD_VAR 0 3
5502: PPUSH
5503: CALL_OW 3
5507: ST_TO_ADDR
// end ;
5508: GO 5423
5510: POP
5511: POP
// end ; areas := areas union [ guard_spawn_1 , guard_spawn_2 , guard_spawn_3 , guard_spawn_4 , guard_spawn_5 , guard_spawn_6 , guard_spawn_7 , guard_spawn_8 , guard_spawn_9 , guard_spawn_10 , guard_spawn_11 , guard_spawn_12 , guard_spawn_13 , guard_spawn_14 , guard_spawn_15 , guard_spawn_16 , guard_spawn_17 , guard_spawn_18 , guard_spawn_19 , guard_spawn_20 ] ;
5512: LD_ADDR_VAR 0 5
5516: PUSH
5517: LD_VAR 0 5
5521: PUSH
5522: LD_INT 9
5524: PUSH
5525: LD_INT 10
5527: PUSH
5528: LD_INT 11
5530: PUSH
5531: LD_INT 12
5533: PUSH
5534: LD_INT 13
5536: PUSH
5537: LD_INT 14
5539: PUSH
5540: LD_INT 15
5542: PUSH
5543: LD_INT 16
5545: PUSH
5546: LD_INT 26
5548: PUSH
5549: LD_INT 27
5551: PUSH
5552: LD_INT 28
5554: PUSH
5555: LD_INT 29
5557: PUSH
5558: LD_INT 30
5560: PUSH
5561: LD_INT 31
5563: PUSH
5564: LD_INT 32
5566: PUSH
5567: LD_INT 33
5569: PUSH
5570: LD_INT 34
5572: PUSH
5573: LD_INT 35
5575: PUSH
5576: LD_INT 36
5578: PUSH
5579: LD_INT 37
5581: PUSH
5582: EMPTY
5583: LIST
5584: LIST
5585: LIST
5586: LIST
5587: LIST
5588: LIST
5589: LIST
5590: LIST
5591: LIST
5592: LIST
5593: LIST
5594: LIST
5595: LIST
5596: LIST
5597: LIST
5598: LIST
5599: LIST
5600: LIST
5601: LIST
5602: LIST
5603: UNION
5604: ST_TO_ADDR
// for i in friends do
5605: LD_ADDR_VAR 0 2
5609: PUSH
5610: LD_EXP 4
5614: PUSH
5615: FOR_IN
5616: IFFALSE 5903
// begin SetTag ( i , 2 ) ;
5618: LD_VAR 0 2
5622: PPUSH
5623: LD_INT 2
5625: PPUSH
5626: CALL_OW 109
// if not GetClass ( i ) in [ class_soldier , class_scientistic , class_sniper ] then
5630: LD_VAR 0 2
5634: PPUSH
5635: CALL_OW 257
5639: PUSH
5640: LD_INT 1
5642: PUSH
5643: LD_INT 4
5645: PUSH
5646: LD_INT 5
5648: PUSH
5649: EMPTY
5650: LIST
5651: LIST
5652: LIST
5653: IN
5654: NOT
5655: IFFALSE 5669
// SetClass ( i , 1 ) ;
5657: LD_VAR 0 2
5661: PPUSH
5662: LD_INT 1
5664: PPUSH
5665: CALL_OW 336
// if GetClass ( i ) in [ class_soldier , class_sniper ] and buildings [ 1 ] then
5669: LD_VAR 0 2
5673: PPUSH
5674: CALL_OW 257
5678: PUSH
5679: LD_INT 1
5681: PUSH
5682: LD_INT 5
5684: PUSH
5685: EMPTY
5686: LIST
5687: LIST
5688: IN
5689: PUSH
5690: LD_VAR 0 4
5694: PUSH
5695: LD_INT 1
5697: ARRAY
5698: AND
5699: IFFALSE 5760
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
5701: LD_VAR 0 2
5705: PPUSH
5706: LD_VAR 0 4
5710: PUSH
5711: LD_INT 1
5713: ARRAY
5714: PUSH
5715: LD_INT 1
5717: ARRAY
5718: PPUSH
5719: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
5723: LD_ADDR_VAR 0 4
5727: PUSH
5728: LD_VAR 0 4
5732: PPUSH
5733: LD_INT 1
5735: PPUSH
5736: LD_VAR 0 4
5740: PUSH
5741: LD_INT 1
5743: ARRAY
5744: PPUSH
5745: LD_INT 1
5747: PPUSH
5748: CALL_OW 3
5752: PPUSH
5753: CALL_OW 1
5757: ST_TO_ADDR
// continue ;
5758: GO 5615
// end ; if GetClass ( i ) = class_scientistic and buildings [ 2 ] then
5760: LD_VAR 0 2
5764: PPUSH
5765: CALL_OW 257
5769: PUSH
5770: LD_INT 4
5772: EQUAL
5773: PUSH
5774: LD_VAR 0 4
5778: PUSH
5779: LD_INT 2
5781: ARRAY
5782: AND
5783: IFFALSE 5844
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
5785: LD_VAR 0 2
5789: PPUSH
5790: LD_VAR 0 4
5794: PUSH
5795: LD_INT 2
5797: ARRAY
5798: PUSH
5799: LD_INT 1
5801: ARRAY
5802: PPUSH
5803: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
5807: LD_ADDR_VAR 0 4
5811: PUSH
5812: LD_VAR 0 4
5816: PPUSH
5817: LD_INT 2
5819: PPUSH
5820: LD_VAR 0 4
5824: PUSH
5825: LD_INT 2
5827: ARRAY
5828: PPUSH
5829: LD_INT 1
5831: PPUSH
5832: CALL_OW 3
5836: PPUSH
5837: CALL_OW 1
5841: ST_TO_ADDR
// continue ;
5842: GO 5615
// end ; PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5844: LD_VAR 0 2
5848: PPUSH
5849: LD_VAR 0 5
5853: PUSH
5854: LD_INT 1
5856: ARRAY
5857: PPUSH
5858: LD_INT 0
5860: PPUSH
5861: CALL_OW 49
// areas := Delete ( areas , 1 ) ;
5865: LD_ADDR_VAR 0 5
5869: PUSH
5870: LD_VAR 0 5
5874: PPUSH
5875: LD_INT 1
5877: PPUSH
5878: CALL_OW 3
5882: ST_TO_ADDR
// ComHold ( i ) ;
5883: LD_VAR 0 2
5887: PPUSH
5888: CALL_OW 140
// if not areas then
5892: LD_VAR 0 5
5896: NOT
5897: IFFALSE 5901
// break ;
5899: GO 5903
// end ;
5901: GO 5615
5903: POP
5904: POP
// if UnitFilter ( friends , [ f_not , [ f_placed ] ] ) then
5905: LD_EXP 4
5909: PPUSH
5910: LD_INT 3
5912: PUSH
5913: LD_INT 52
5915: PUSH
5916: EMPTY
5917: LIST
5918: PUSH
5919: EMPTY
5920: LIST
5921: LIST
5922: PPUSH
5923: CALL_OW 72
5927: IFFALSE 5994
// for i in UnitFilter ( friends , [ f_not , [ f_placed ] ] ) do
5929: LD_ADDR_VAR 0 2
5933: PUSH
5934: LD_EXP 4
5938: PPUSH
5939: LD_INT 3
5941: PUSH
5942: LD_INT 52
5944: PUSH
5945: EMPTY
5946: LIST
5947: PUSH
5948: EMPTY
5949: LIST
5950: LIST
5951: PPUSH
5952: CALL_OW 72
5956: PUSH
5957: FOR_IN
5958: IFFALSE 5992
// begin PlaceUnitXYR ( i , 65 , 58 , 7 , false ) ;
5960: LD_VAR 0 2
5964: PPUSH
5965: LD_INT 65
5967: PPUSH
5968: LD_INT 58
5970: PPUSH
5971: LD_INT 7
5973: PPUSH
5974: LD_INT 0
5976: PPUSH
5977: CALL_OW 50
// ComHold ( i ) ;
5981: LD_VAR 0 2
5985: PPUSH
5986: CALL_OW 140
// end ;
5990: GO 5957
5992: POP
5993: POP
// if Frank then
5994: LD_EXP 33
5998: IFFALSE 6012
// SetClass ( Frank , class_sniper ) ;
6000: LD_EXP 33
6004: PPUSH
6005: LD_INT 5
6007: PPUSH
6008: CALL_OW 336
// end ; end_of_file
6012: LD_VAR 0 1
6016: RET
// export function CanSayRand ( side ) ; begin
6017: LD_INT 0
6019: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6020: LD_ADDR_VAR 0 2
6024: PUSH
6025: LD_INT 52
6027: PUSH
6028: EMPTY
6029: LIST
6030: PUSH
6031: LD_INT 22
6033: PUSH
6034: LD_VAR 0 1
6038: PUSH
6039: EMPTY
6040: LIST
6041: LIST
6042: PUSH
6043: LD_INT 2
6045: PUSH
6046: LD_INT 25
6048: PUSH
6049: LD_INT 1
6051: PUSH
6052: EMPTY
6053: LIST
6054: LIST
6055: PUSH
6056: LD_INT 25
6058: PUSH
6059: LD_INT 2
6061: PUSH
6062: EMPTY
6063: LIST
6064: LIST
6065: PUSH
6066: LD_INT 25
6068: PUSH
6069: LD_INT 3
6071: PUSH
6072: EMPTY
6073: LIST
6074: LIST
6075: PUSH
6076: LD_INT 25
6078: PUSH
6079: LD_INT 4
6081: PUSH
6082: EMPTY
6083: LIST
6084: LIST
6085: PUSH
6086: EMPTY
6087: LIST
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: PUSH
6093: EMPTY
6094: LIST
6095: LIST
6096: LIST
6097: PPUSH
6098: CALL_OW 69
6102: PUSH
6103: LD_EXP 14
6107: PUSH
6108: LD_EXP 33
6112: PUSH
6113: LD_EXP 23
6117: PUSH
6118: LD_EXP 24
6122: PUSH
6123: LD_EXP 25
6127: PUSH
6128: LD_EXP 26
6132: PUSH
6133: LD_EXP 27
6137: PUSH
6138: LD_EXP 28
6142: PUSH
6143: LD_EXP 29
6147: PUSH
6148: LD_EXP 30
6152: PUSH
6153: LD_EXP 16
6157: PUSH
6158: LD_EXP 31
6162: PUSH
6163: LD_EXP 32
6167: PUSH
6168: LD_EXP 34
6172: PUSH
6173: EMPTY
6174: LIST
6175: LIST
6176: LIST
6177: LIST
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: LIST
6188: DIFF
6189: ST_TO_ADDR
// end ;
6190: LD_VAR 0 2
6194: RET
// export function SayRand ( sex , dial ) ; begin
6195: LD_INT 0
6197: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6198: LD_ADDR_VAR 0 3
6202: PUSH
6203: LD_INT 52
6205: PUSH
6206: EMPTY
6207: LIST
6208: PUSH
6209: LD_INT 22
6211: PUSH
6212: LD_INT 1
6214: PUSH
6215: EMPTY
6216: LIST
6217: LIST
6218: PUSH
6219: LD_INT 26
6221: PUSH
6222: LD_VAR 0 1
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: PUSH
6231: LD_INT 2
6233: PUSH
6234: LD_INT 25
6236: PUSH
6237: LD_INT 1
6239: PUSH
6240: EMPTY
6241: LIST
6242: LIST
6243: PUSH
6244: LD_INT 25
6246: PUSH
6247: LD_INT 2
6249: PUSH
6250: EMPTY
6251: LIST
6252: LIST
6253: PUSH
6254: LD_INT 25
6256: PUSH
6257: LD_INT 3
6259: PUSH
6260: EMPTY
6261: LIST
6262: LIST
6263: PUSH
6264: LD_INT 25
6266: PUSH
6267: LD_INT 4
6269: PUSH
6270: EMPTY
6271: LIST
6272: LIST
6273: PUSH
6274: EMPTY
6275: LIST
6276: LIST
6277: LIST
6278: LIST
6279: LIST
6280: PUSH
6281: EMPTY
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: PPUSH
6287: CALL_OW 69
6291: PUSH
6292: LD_EXP 14
6296: PUSH
6297: LD_EXP 33
6301: PUSH
6302: LD_EXP 23
6306: PUSH
6307: LD_EXP 24
6311: PUSH
6312: LD_EXP 25
6316: PUSH
6317: LD_EXP 26
6321: PUSH
6322: LD_EXP 27
6326: PUSH
6327: LD_EXP 28
6331: PUSH
6332: LD_EXP 29
6336: PUSH
6337: LD_EXP 30
6341: PUSH
6342: LD_EXP 16
6346: PUSH
6347: LD_EXP 31
6351: PUSH
6352: LD_EXP 32
6356: PUSH
6357: LD_EXP 34
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: LIST
6366: LIST
6367: LIST
6368: LIST
6369: LIST
6370: LIST
6371: LIST
6372: LIST
6373: LIST
6374: LIST
6375: LIST
6376: LIST
6377: DIFF
6378: ST_TO_ADDR
// if not result then
6379: LD_VAR 0 3
6383: NOT
6384: IFFALSE 6388
// exit ;
6386: GO 6416
// result := result [ 1 ] ;
6388: LD_ADDR_VAR 0 3
6392: PUSH
6393: LD_VAR 0 3
6397: PUSH
6398: LD_INT 1
6400: ARRAY
6401: ST_TO_ADDR
// Say ( result , dial ) ;
6402: LD_VAR 0 3
6406: PPUSH
6407: LD_VAR 0 2
6411: PPUSH
6412: CALL_OW 88
// end ;
6416: LD_VAR 0 3
6420: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
6421: LD_INT 0
6423: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
6424: LD_ADDR_VAR 0 4
6428: PUSH
6429: LD_INT 22
6431: PUSH
6432: LD_INT 1
6434: PUSH
6435: EMPTY
6436: LIST
6437: LIST
6438: PUSH
6439: LD_INT 26
6441: PUSH
6442: LD_VAR 0 1
6446: PUSH
6447: EMPTY
6448: LIST
6449: LIST
6450: PUSH
6451: LD_INT 2
6453: PUSH
6454: LD_INT 25
6456: PUSH
6457: LD_INT 1
6459: PUSH
6460: EMPTY
6461: LIST
6462: LIST
6463: PUSH
6464: LD_INT 25
6466: PUSH
6467: LD_INT 2
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: PUSH
6474: LD_INT 25
6476: PUSH
6477: LD_INT 3
6479: PUSH
6480: EMPTY
6481: LIST
6482: LIST
6483: PUSH
6484: LD_INT 25
6486: PUSH
6487: LD_INT 4
6489: PUSH
6490: EMPTY
6491: LIST
6492: LIST
6493: PUSH
6494: EMPTY
6495: LIST
6496: LIST
6497: LIST
6498: LIST
6499: LIST
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: LIST
6505: PPUSH
6506: CALL_OW 69
6510: PUSH
6511: LD_EXP 14
6515: PUSH
6516: LD_EXP 33
6520: PUSH
6521: LD_EXP 23
6525: PUSH
6526: LD_EXP 24
6530: PUSH
6531: LD_EXP 25
6535: PUSH
6536: LD_EXP 26
6540: PUSH
6541: LD_EXP 27
6545: PUSH
6546: LD_EXP 28
6550: PUSH
6551: LD_EXP 29
6555: PUSH
6556: LD_EXP 30
6560: PUSH
6561: LD_EXP 16
6565: PUSH
6566: LD_EXP 31
6570: PUSH
6571: LD_EXP 32
6575: PUSH
6576: LD_EXP 34
6580: PUSH
6581: EMPTY
6582: LIST
6583: LIST
6584: LIST
6585: LIST
6586: LIST
6587: LIST
6588: LIST
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: PUSH
6597: LD_VAR 0 3
6601: ADD
6602: DIFF
6603: ST_TO_ADDR
// if not result then
6604: LD_VAR 0 4
6608: NOT
6609: IFFALSE 6613
// exit ;
6611: GO 6641
// result := result [ 1 ] ;
6613: LD_ADDR_VAR 0 4
6617: PUSH
6618: LD_VAR 0 4
6622: PUSH
6623: LD_INT 1
6625: ARRAY
6626: ST_TO_ADDR
// Say ( result , dial ) ;
6627: LD_VAR 0 4
6631: PPUSH
6632: LD_VAR 0 2
6636: PPUSH
6637: CALL_OW 88
// end ;
6641: LD_VAR 0 4
6645: RET
// export function Patrol ( unit , path , flags ) ; var i , x , y , c , p , station , tmp_path , status , enemy , e , spot_dist , safe_place , chase_range , need_refuel ; begin
6646: LD_INT 0
6648: PPUSH
6649: PPUSH
6650: PPUSH
6651: PPUSH
6652: PPUSH
6653: PPUSH
6654: PPUSH
6655: PPUSH
6656: PPUSH
6657: PPUSH
6658: PPUSH
6659: PPUSH
6660: PPUSH
6661: PPUSH
6662: PPUSH
// if not unit or not path or GetType ( unit ) = unit_building then
6663: LD_VAR 0 1
6667: NOT
6668: PUSH
6669: LD_VAR 0 2
6673: NOT
6674: OR
6675: PUSH
6676: LD_VAR 0 1
6680: PPUSH
6681: CALL_OW 247
6685: PUSH
6686: LD_INT 3
6688: EQUAL
6689: OR
6690: IFFALSE 6694
// exit ;
6692: GO 8233
// for i = path downto 1 do
6694: LD_ADDR_VAR 0 5
6698: PUSH
6699: DOUBLE
6700: LD_VAR 0 2
6704: INC
6705: ST_TO_ADDR
6706: LD_INT 1
6708: PUSH
6709: FOR_DOWNTO
6710: IFFALSE 6771
// begin if not ValidHex ( path [ i ] [ 1 ] , path [ i ] [ 2 ] ) then
6712: LD_VAR 0 2
6716: PUSH
6717: LD_VAR 0 5
6721: ARRAY
6722: PUSH
6723: LD_INT 1
6725: ARRAY
6726: PPUSH
6727: LD_VAR 0 2
6731: PUSH
6732: LD_VAR 0 5
6736: ARRAY
6737: PUSH
6738: LD_INT 2
6740: ARRAY
6741: PPUSH
6742: CALL_OW 488
6746: NOT
6747: IFFALSE 6769
// path = Delete ( path , i ) ;
6749: LD_ADDR_VAR 0 2
6753: PUSH
6754: LD_VAR 0 2
6758: PPUSH
6759: LD_VAR 0 5
6763: PPUSH
6764: CALL_OW 3
6768: ST_TO_ADDR
// end ;
6769: GO 6709
6771: POP
6772: POP
// if not path then
6773: LD_VAR 0 2
6777: NOT
6778: IFFALSE 6782
// exit ;
6780: GO 8233
// tmp_path := [ ] ;
6782: LD_ADDR_VAR 0 11
6786: PUSH
6787: EMPTY
6788: ST_TO_ADDR
// if flags then
6789: LD_VAR 0 3
6793: IFFALSE 6867
// begin if flags [ 1 ] then
6795: LD_VAR 0 3
6799: PUSH
6800: LD_INT 1
6802: ARRAY
6803: IFFALSE 6819
// safe_place = flags [ 1 ] ;
6805: LD_ADDR_VAR 0 16
6809: PUSH
6810: LD_VAR 0 3
6814: PUSH
6815: LD_INT 1
6817: ARRAY
6818: ST_TO_ADDR
// if flags [ 2 ] then
6819: LD_VAR 0 3
6823: PUSH
6824: LD_INT 2
6826: ARRAY
6827: IFFALSE 6843
// spot_dist = flags [ 2 ] ;
6829: LD_ADDR_VAR 0 15
6833: PUSH
6834: LD_VAR 0 3
6838: PUSH
6839: LD_INT 2
6841: ARRAY
6842: ST_TO_ADDR
// if flags [ 3 ] then
6843: LD_VAR 0 3
6847: PUSH
6848: LD_INT 3
6850: ARRAY
6851: IFFALSE 6867
// chase_range = flags [ 3 ] ;
6853: LD_ADDR_VAR 0 17
6857: PUSH
6858: LD_VAR 0 3
6862: PUSH
6863: LD_INT 3
6865: ARRAY
6866: ST_TO_ADDR
// end ; if not chase_range then
6867: LD_VAR 0 17
6871: NOT
6872: IFFALSE 6882
// chase_range = 8 ;
6874: LD_ADDR_VAR 0 17
6878: PUSH
6879: LD_INT 8
6881: ST_TO_ADDR
// if not spot_dist then
6882: LD_VAR 0 15
6886: NOT
6887: IFFALSE 6897
// spot_dist := 8 ;
6889: LD_ADDR_VAR 0 15
6893: PUSH
6894: LD_INT 8
6896: ST_TO_ADDR
// need_refuel = ( GetType ( unit ) = unit_vehicle and GetEngine ( unit ) <> engine_siberite ) ;
6897: LD_ADDR_VAR 0 18
6901: PUSH
6902: LD_VAR 0 1
6906: PPUSH
6907: CALL_OW 247
6911: PUSH
6912: LD_INT 2
6914: EQUAL
6915: PUSH
6916: LD_VAR 0 1
6920: PPUSH
6921: CALL_OW 262
6925: PUSH
6926: LD_INT 3
6928: NONEQUAL
6929: AND
6930: ST_TO_ADDR
// status = 1 ;
6931: LD_ADDR_VAR 0 12
6935: PUSH
6936: LD_INT 1
6938: ST_TO_ADDR
// tmp_path = [ 1 , path [ 1 ] ] ;
6939: LD_ADDR_VAR 0 11
6943: PUSH
6944: LD_INT 1
6946: PUSH
6947: LD_VAR 0 2
6951: PUSH
6952: LD_INT 1
6954: ARRAY
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6960: LD_INT 35
6962: PPUSH
6963: CALL_OW 67
// if need_refuel and GetFuel ( unit ) < 20 then
6967: LD_VAR 0 18
6971: PUSH
6972: LD_VAR 0 1
6976: PPUSH
6977: CALL_OW 261
6981: PUSH
6982: LD_INT 20
6984: LESS
6985: AND
6986: IFFALSE 7179
// begin station := FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_oil_mine ] , [ f_btype , b_factory ] ] ] ) ;
6988: LD_ADDR_VAR 0 10
6992: PUSH
6993: LD_INT 22
6995: PUSH
6996: LD_VAR 0 1
7000: PPUSH
7001: CALL_OW 255
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: PUSH
7010: LD_INT 2
7012: PUSH
7013: LD_INT 30
7015: PUSH
7016: LD_INT 0
7018: PUSH
7019: EMPTY
7020: LIST
7021: LIST
7022: PUSH
7023: LD_INT 30
7025: PUSH
7026: LD_INT 1
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: PUSH
7033: LD_INT 30
7035: PUSH
7036: LD_INT 29
7038: PUSH
7039: EMPTY
7040: LIST
7041: LIST
7042: PUSH
7043: LD_INT 30
7045: PUSH
7046: LD_INT 3
7048: PUSH
7049: EMPTY
7050: LIST
7051: LIST
7052: PUSH
7053: EMPTY
7054: LIST
7055: LIST
7056: LIST
7057: LIST
7058: LIST
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: PPUSH
7064: CALL_OW 69
7068: ST_TO_ADDR
// if not station then
7069: LD_VAR 0 10
7073: NOT
7074: IFFALSE 7090
// begin SetFuel ( unit , 40 ) ;
7076: LD_VAR 0 1
7080: PPUSH
7081: LD_INT 40
7083: PPUSH
7084: CALL_OW 240
// continue ;
7088: GO 6960
// end ; status := 6 ;
7090: LD_ADDR_VAR 0 12
7094: PUSH
7095: LD_INT 6
7097: ST_TO_ADDR
// station := NearestUnitToUnit ( station , unit ) ;
7098: LD_ADDR_VAR 0 10
7102: PUSH
7103: LD_VAR 0 10
7107: PPUSH
7108: LD_VAR 0 1
7112: PPUSH
7113: CALL_OW 74
7117: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7118: LD_INT 35
7120: PPUSH
7121: CALL_OW 67
// ComMoveUnit ( unit , station ) ;
7125: LD_VAR 0 1
7129: PPUSH
7130: LD_VAR 0 10
7134: PPUSH
7135: CALL_OW 112
// until GetDistUnits ( unit , station ) < 6 ;
7139: LD_VAR 0 1
7143: PPUSH
7144: LD_VAR 0 10
7148: PPUSH
7149: CALL_OW 296
7153: PUSH
7154: LD_INT 6
7156: LESS
7157: IFFALSE 7118
// SetFuel ( unit , 100 ) ;
7159: LD_VAR 0 1
7163: PPUSH
7164: LD_INT 100
7166: PPUSH
7167: CALL_OW 240
// status := 5 ;
7171: LD_ADDR_VAR 0 12
7175: PUSH
7176: LD_INT 5
7178: ST_TO_ADDR
// end ; if status = 1 then
7179: LD_VAR 0 12
7183: PUSH
7184: LD_INT 1
7186: EQUAL
7187: IFFALSE 7563
// begin enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] , [ f_dist , unit , spot_dist ] , [ f_see , 1 ] ] ) ;
7189: LD_ADDR_VAR 0 13
7193: PUSH
7194: LD_INT 81
7196: PUSH
7197: LD_VAR 0 1
7201: PPUSH
7202: CALL_OW 255
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: PUSH
7211: LD_INT 3
7213: PUSH
7214: LD_INT 21
7216: PUSH
7217: LD_INT 3
7219: PUSH
7220: EMPTY
7221: LIST
7222: LIST
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: PUSH
7228: LD_INT 91
7230: PUSH
7231: LD_VAR 0 1
7235: PUSH
7236: LD_VAR 0 15
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: LIST
7245: PUSH
7246: LD_INT 101
7248: PUSH
7249: LD_INT 1
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: PUSH
7256: EMPTY
7257: LIST
7258: LIST
7259: LIST
7260: LIST
7261: PPUSH
7262: CALL_OW 69
7266: ST_TO_ADDR
// for i in enemy do
7267: LD_ADDR_VAR 0 5
7271: PUSH
7272: LD_VAR 0 13
7276: PUSH
7277: FOR_IN
7278: IFFALSE 7309
// if IsInvisible ( i ) then
7280: LD_VAR 0 5
7284: PPUSH
7285: CALL_OW 571
7289: IFFALSE 7307
// enemy := enemy diff i ;
7291: LD_ADDR_VAR 0 13
7295: PUSH
7296: LD_VAR 0 13
7300: PUSH
7301: LD_VAR 0 5
7305: DIFF
7306: ST_TO_ADDR
7307: GO 7277
7309: POP
7310: POP
// if enemy then
7311: LD_VAR 0 13
7315: IFFALSE 7365
// begin SetRememberedX ( unit , GetX ( unit ) ) ;
7317: LD_VAR 0 1
7321: PPUSH
7322: LD_VAR 0 1
7326: PPUSH
7327: CALL_OW 250
7331: PPUSH
7332: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
7336: LD_VAR 0 1
7340: PPUSH
7341: LD_VAR 0 1
7345: PPUSH
7346: CALL_OW 251
7350: PPUSH
7351: CALL_OW 232
// status = 2 ;
7355: LD_ADDR_VAR 0 12
7359: PUSH
7360: LD_INT 2
7362: ST_TO_ADDR
// end else
7363: GO 7563
// begin if IsAt ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) or not HasTask ( unit ) then
7365: LD_VAR 0 1
7369: PPUSH
7370: LD_VAR 0 11
7374: PUSH
7375: LD_INT 2
7377: ARRAY
7378: PUSH
7379: LD_INT 1
7381: ARRAY
7382: PPUSH
7383: LD_VAR 0 11
7387: PUSH
7388: LD_INT 2
7390: ARRAY
7391: PUSH
7392: LD_INT 2
7394: ARRAY
7395: PPUSH
7396: CALL_OW 307
7400: PUSH
7401: LD_VAR 0 1
7405: PPUSH
7406: CALL_OW 314
7410: NOT
7411: OR
7412: IFFALSE 7563
// begin wait ( 0 0$2 ) ;
7414: LD_INT 70
7416: PPUSH
7417: CALL_OW 67
// if tmp_path [ 1 ] + 1 > path then
7421: LD_VAR 0 11
7425: PUSH
7426: LD_INT 1
7428: ARRAY
7429: PUSH
7430: LD_INT 1
7432: PLUS
7433: PUSH
7434: LD_VAR 0 2
7438: GREATER
7439: IFFALSE 7464
// tmp_path := Replace ( tmp_path , 1 , 1 ) else
7441: LD_ADDR_VAR 0 11
7445: PUSH
7446: LD_VAR 0 11
7450: PPUSH
7451: LD_INT 1
7453: PPUSH
7454: LD_INT 1
7456: PPUSH
7457: CALL_OW 1
7461: ST_TO_ADDR
7462: GO 7495
// tmp_path := Replace ( tmp_path , 1 , tmp_path [ 1 ] + 1 ) ;
7464: LD_ADDR_VAR 0 11
7468: PUSH
7469: LD_VAR 0 11
7473: PPUSH
7474: LD_INT 1
7476: PPUSH
7477: LD_VAR 0 11
7481: PUSH
7482: LD_INT 1
7484: ARRAY
7485: PUSH
7486: LD_INT 1
7488: PLUS
7489: PPUSH
7490: CALL_OW 1
7494: ST_TO_ADDR
// tmp_path := Replace ( tmp_path , 2 , path [ tmp_path [ 1 ] ] ) ;
7495: LD_ADDR_VAR 0 11
7499: PUSH
7500: LD_VAR 0 11
7504: PPUSH
7505: LD_INT 2
7507: PPUSH
7508: LD_VAR 0 2
7512: PUSH
7513: LD_VAR 0 11
7517: PUSH
7518: LD_INT 1
7520: ARRAY
7521: ARRAY
7522: PPUSH
7523: CALL_OW 1
7527: ST_TO_ADDR
// ComAgressiveMove ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) ;
7528: LD_VAR 0 1
7532: PPUSH
7533: LD_VAR 0 11
7537: PUSH
7538: LD_INT 2
7540: ARRAY
7541: PUSH
7542: LD_INT 1
7544: ARRAY
7545: PPUSH
7546: LD_VAR 0 11
7550: PUSH
7551: LD_INT 2
7553: ARRAY
7554: PUSH
7555: LD_INT 2
7557: ARRAY
7558: PPUSH
7559: CALL_OW 114
// end ; end ; end ; if status = 2 then
7563: LD_VAR 0 12
7567: PUSH
7568: LD_INT 2
7570: EQUAL
7571: IFFALSE 7792
// begin if GetLives ( unit ) < 650 and safe_place then
7573: LD_VAR 0 1
7577: PPUSH
7578: CALL_OW 256
7582: PUSH
7583: LD_INT 650
7585: LESS
7586: PUSH
7587: LD_VAR 0 16
7591: AND
7592: IFFALSE 7604
// begin status = 3 ;
7594: LD_ADDR_VAR 0 12
7598: PUSH
7599: LD_INT 3
7601: ST_TO_ADDR
// continue ;
7602: GO 6960
// end ; x := GetRememberedX ( unit ) ;
7604: LD_ADDR_VAR 0 6
7608: PUSH
7609: LD_VAR 0 1
7613: PPUSH
7614: CALL_OW 252
7618: ST_TO_ADDR
// y := GetRememberedY ( unit ) ;
7619: LD_ADDR_VAR 0 7
7623: PUSH
7624: LD_VAR 0 1
7628: PPUSH
7629: CALL_OW 253
7633: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_distxy , x , y , spot_dist ] , [ f_see , 1 ] ] ) ;
7634: LD_ADDR_VAR 0 13
7638: PUSH
7639: LD_INT 81
7641: PUSH
7642: LD_VAR 0 1
7646: PPUSH
7647: CALL_OW 255
7651: PUSH
7652: EMPTY
7653: LIST
7654: LIST
7655: PUSH
7656: LD_INT 92
7658: PUSH
7659: LD_VAR 0 6
7663: PUSH
7664: LD_VAR 0 7
7668: PUSH
7669: LD_VAR 0 15
7673: PUSH
7674: EMPTY
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: PUSH
7680: LD_INT 101
7682: PUSH
7683: LD_INT 1
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: PUSH
7690: EMPTY
7691: LIST
7692: LIST
7693: LIST
7694: PPUSH
7695: CALL_OW 69
7699: ST_TO_ADDR
// if enemy then
7700: LD_VAR 0 13
7704: IFFALSE 7775
// begin e := NearestUnitToUnit ( enemy , unit ) ;
7706: LD_ADDR_VAR 0 14
7710: PUSH
7711: LD_VAR 0 13
7715: PPUSH
7716: LD_VAR 0 1
7720: PPUSH
7721: CALL_OW 74
7725: ST_TO_ADDR
// if GetDistUnitXY ( e , x , y ) < spot_dist + chase_range then
7726: LD_VAR 0 14
7730: PPUSH
7731: LD_VAR 0 6
7735: PPUSH
7736: LD_VAR 0 7
7740: PPUSH
7741: CALL_OW 297
7745: PUSH
7746: LD_VAR 0 15
7750: PUSH
7751: LD_VAR 0 17
7755: PLUS
7756: LESS
7757: IFFALSE 7773
// ComAttackUnit ( unit , e ) ;
7759: LD_VAR 0 1
7763: PPUSH
7764: LD_VAR 0 14
7768: PPUSH
7769: CALL_OW 115
// end else
7773: GO 7792
// begin ComStop ( unit ) ;
7775: LD_VAR 0 1
7779: PPUSH
7780: CALL_OW 141
// status = 5 ;
7784: LD_ADDR_VAR 0 12
7788: PUSH
7789: LD_INT 5
7791: ST_TO_ADDR
// end ; end ; if status = 3 and safe_place then
7792: LD_VAR 0 12
7796: PUSH
7797: LD_INT 3
7799: EQUAL
7800: PUSH
7801: LD_VAR 0 16
7805: AND
7806: IFFALSE 7892
// begin repeat ComMoveXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) ;
7808: LD_VAR 0 1
7812: PPUSH
7813: LD_VAR 0 16
7817: PUSH
7818: LD_INT 1
7820: ARRAY
7821: PPUSH
7822: LD_VAR 0 16
7826: PUSH
7827: LD_INT 2
7829: ARRAY
7830: PPUSH
7831: CALL_OW 111
// wait ( 0 0$1 ) ;
7835: LD_INT 35
7837: PPUSH
7838: CALL_OW 67
// until GetDistUnitXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) < 4 ;
7842: LD_VAR 0 1
7846: PPUSH
7847: LD_VAR 0 16
7851: PUSH
7852: LD_INT 1
7854: ARRAY
7855: PPUSH
7856: LD_VAR 0 16
7860: PUSH
7861: LD_INT 2
7863: ARRAY
7864: PPUSH
7865: CALL_OW 297
7869: PUSH
7870: LD_INT 4
7872: LESS
7873: IFFALSE 7808
// ComStop ( unit ) ;
7875: LD_VAR 0 1
7879: PPUSH
7880: CALL_OW 141
// status = 4 ;
7884: LD_ADDR_VAR 0 12
7888: PUSH
7889: LD_INT 4
7891: ST_TO_ADDR
// end ; if status = 4 then
7892: LD_VAR 0 12
7896: PUSH
7897: LD_INT 4
7899: EQUAL
7900: IFFALSE 7932
// begin repeat wait ( 0 0$1 ) ;
7902: LD_INT 35
7904: PPUSH
7905: CALL_OW 67
// until GetLives ( unit ) = 1000 ;
7909: LD_VAR 0 1
7913: PPUSH
7914: CALL_OW 256
7918: PUSH
7919: LD_INT 1000
7921: EQUAL
7922: IFFALSE 7902
// status = 5 ;
7924: LD_ADDR_VAR 0 12
7928: PUSH
7929: LD_INT 5
7931: ST_TO_ADDR
// end ; if status = 5 then
7932: LD_VAR 0 12
7936: PUSH
7937: LD_INT 5
7939: EQUAL
7940: IFFALSE 8222
// begin p := 999 ;
7942: LD_ADDR_VAR 0 9
7946: PUSH
7947: LD_INT 999
7949: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ] ;
7950: LD_ADDR_VAR 0 14
7954: PUSH
7955: LD_VAR 0 11
7959: PUSH
7960: LD_INT 2
7962: ARRAY
7963: PUSH
7964: LD_INT 1
7966: ARRAY
7967: PUSH
7968: LD_VAR 0 11
7972: PUSH
7973: LD_INT 2
7975: ARRAY
7976: PUSH
7977: LD_INT 2
7979: ARRAY
7980: PUSH
7981: EMPTY
7982: LIST
7983: LIST
7984: ST_TO_ADDR
// c := 1 ;
7985: LD_ADDR_VAR 0 8
7989: PUSH
7990: LD_INT 1
7992: ST_TO_ADDR
// for i = 1 to tmp_path [ 2 ] div 2 do
7993: LD_ADDR_VAR 0 5
7997: PUSH
7998: DOUBLE
7999: LD_INT 1
8001: DEC
8002: ST_TO_ADDR
8003: LD_VAR 0 11
8007: PUSH
8008: LD_INT 2
8010: ARRAY
8011: PUSH
8012: LD_INT 2
8014: DIV
8015: PUSH
8016: FOR_TO
8017: IFFALSE 8149
// begin x := GetDistUnitXY ( unit , tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ) ;
8019: LD_ADDR_VAR 0 6
8023: PUSH
8024: LD_VAR 0 1
8028: PPUSH
8029: LD_VAR 0 11
8033: PUSH
8034: LD_INT 2
8036: ARRAY
8037: PUSH
8038: LD_VAR 0 8
8042: ARRAY
8043: PPUSH
8044: LD_VAR 0 11
8048: PUSH
8049: LD_INT 2
8051: ARRAY
8052: PUSH
8053: LD_VAR 0 8
8057: PUSH
8058: LD_INT 1
8060: PLUS
8061: ARRAY
8062: PPUSH
8063: CALL_OW 297
8067: ST_TO_ADDR
// if x < p then
8068: LD_VAR 0 6
8072: PUSH
8073: LD_VAR 0 9
8077: LESS
8078: IFFALSE 8133
// begin p := x ;
8080: LD_ADDR_VAR 0 9
8084: PUSH
8085: LD_VAR 0 6
8089: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ] ;
8090: LD_ADDR_VAR 0 14
8094: PUSH
8095: LD_VAR 0 11
8099: PUSH
8100: LD_INT 2
8102: ARRAY
8103: PUSH
8104: LD_VAR 0 8
8108: ARRAY
8109: PUSH
8110: LD_VAR 0 11
8114: PUSH
8115: LD_INT 2
8117: ARRAY
8118: PUSH
8119: LD_VAR 0 8
8123: PUSH
8124: LD_INT 1
8126: PLUS
8127: ARRAY
8128: PUSH
8129: EMPTY
8130: LIST
8131: LIST
8132: ST_TO_ADDR
// end ; c = c + 2 ;
8133: LD_ADDR_VAR 0 8
8137: PUSH
8138: LD_VAR 0 8
8142: PUSH
8143: LD_INT 2
8145: PLUS
8146: ST_TO_ADDR
// end ;
8147: GO 8016
8149: POP
8150: POP
// repeat ComMoveXY ( unit , e [ 1 ] , e [ 2 ] ) ;
8151: LD_VAR 0 1
8155: PPUSH
8156: LD_VAR 0 14
8160: PUSH
8161: LD_INT 1
8163: ARRAY
8164: PPUSH
8165: LD_VAR 0 14
8169: PUSH
8170: LD_INT 2
8172: ARRAY
8173: PPUSH
8174: CALL_OW 111
// wait ( 0 0$1 ) ;
8178: LD_INT 35
8180: PPUSH
8181: CALL_OW 67
// until IsAt ( unit , e [ 1 ] , e [ 2 ] ) ;
8185: LD_VAR 0 1
8189: PPUSH
8190: LD_VAR 0 14
8194: PUSH
8195: LD_INT 1
8197: ARRAY
8198: PPUSH
8199: LD_VAR 0 14
8203: PUSH
8204: LD_INT 2
8206: ARRAY
8207: PPUSH
8208: CALL_OW 307
8212: IFFALSE 8151
// status = 1 ;
8214: LD_ADDR_VAR 0 12
8218: PUSH
8219: LD_INT 1
8221: ST_TO_ADDR
// end ; until IsDead ( unit ) ;
8222: LD_VAR 0 1
8226: PPUSH
8227: CALL_OW 301
8231: IFFALSE 6960
// end ;
8233: LD_VAR 0 4
8237: RET
// export function Talk ( units , type , sequence , sex , class , id , order_id ) ; var i , unit , tmp , unit_id , dialog_id , sex_id , class_id ; begin
8238: LD_INT 0
8240: PPUSH
8241: PPUSH
8242: PPUSH
8243: PPUSH
8244: PPUSH
8245: PPUSH
8246: PPUSH
8247: PPUSH
// if not units or not sequence or not sex in [ sex_male , sex_female , 0 ] or not id or not order_id then
8248: LD_VAR 0 1
8252: NOT
8253: PUSH
8254: LD_VAR 0 3
8258: NOT
8259: OR
8260: PUSH
8261: LD_VAR 0 4
8265: PUSH
8266: LD_INT 1
8268: PUSH
8269: LD_INT 2
8271: PUSH
8272: LD_INT 0
8274: PUSH
8275: EMPTY
8276: LIST
8277: LIST
8278: LIST
8279: IN
8280: NOT
8281: OR
8282: PUSH
8283: LD_VAR 0 6
8287: NOT
8288: OR
8289: PUSH
8290: LD_VAR 0 7
8294: NOT
8295: OR
8296: IFFALSE 8300
// exit ;
8298: GO 8691
// sex_id :=  ;
8300: LD_ADDR_VAR 0 14
8304: PUSH
8305: LD_STRING 
8307: ST_TO_ADDR
// case class of 1 :
8308: LD_VAR 0 5
8312: PUSH
8313: LD_INT 1
8315: DOUBLE
8316: EQUAL
8317: IFTRUE 8321
8319: GO 8332
8321: POP
// class_id := Sol ; 2 :
8322: LD_ADDR_VAR 0 15
8326: PUSH
8327: LD_STRING Sol
8329: ST_TO_ADDR
8330: GO 8390
8332: LD_INT 2
8334: DOUBLE
8335: EQUAL
8336: IFTRUE 8340
8338: GO 8351
8340: POP
// class_id := Eng ; 3 :
8341: LD_ADDR_VAR 0 15
8345: PUSH
8346: LD_STRING Eng
8348: ST_TO_ADDR
8349: GO 8390
8351: LD_INT 3
8353: DOUBLE
8354: EQUAL
8355: IFTRUE 8359
8357: GO 8370
8359: POP
// class_id := Mech ; 4 :
8360: LD_ADDR_VAR 0 15
8364: PUSH
8365: LD_STRING Mech
8367: ST_TO_ADDR
8368: GO 8390
8370: LD_INT 4
8372: DOUBLE
8373: EQUAL
8374: IFTRUE 8378
8376: GO 8389
8378: POP
// class_id := Sci ; end ;
8379: LD_ADDR_VAR 0 15
8383: PUSH
8384: LD_STRING Sci
8386: ST_TO_ADDR
8387: GO 8390
8389: POP
// tmp := UnitFilter ( units , [ f_class , class ] ) ;
8390: LD_ADDR_VAR 0 11
8394: PUSH
8395: LD_VAR 0 1
8399: PPUSH
8400: LD_INT 25
8402: PUSH
8403: LD_VAR 0 5
8407: PUSH
8408: EMPTY
8409: LIST
8410: LIST
8411: PPUSH
8412: CALL_OW 72
8416: ST_TO_ADDR
// if tmp then
8417: LD_VAR 0 11
8421: IFFALSE 8433
// units := tmp ;
8423: LD_ADDR_VAR 0 1
8427: PUSH
8428: LD_VAR 0 11
8432: ST_TO_ADDR
// if sex then
8433: LD_VAR 0 4
8437: IFFALSE 8493
// begin if sex = sex_female then
8439: LD_VAR 0 4
8443: PUSH
8444: LD_INT 2
8446: EQUAL
8447: IFFALSE 8457
// sex_id := F ;
8449: LD_ADDR_VAR 0 14
8453: PUSH
8454: LD_STRING F
8456: ST_TO_ADDR
// units := UnitFilter ( units , [ f_sex , sex ] ) ;
8457: LD_ADDR_VAR 0 1
8461: PUSH
8462: LD_VAR 0 1
8466: PPUSH
8467: LD_INT 26
8469: PUSH
8470: LD_VAR 0 4
8474: PUSH
8475: EMPTY
8476: LIST
8477: LIST
8478: PPUSH
8479: CALL_OW 72
8483: ST_TO_ADDR
// if not units then
8484: LD_VAR 0 1
8488: NOT
8489: IFFALSE 8493
// exit ;
8491: GO 8691
// end ; unit_id := id ;
8493: LD_ADDR_VAR 0 12
8497: PUSH
8498: LD_VAR 0 6
8502: ST_TO_ADDR
// if unit_id > units then
8503: LD_VAR 0 12
8507: PUSH
8508: LD_VAR 0 1
8512: GREATER
8513: IFFALSE 8523
// unit_id := 1 ;
8515: LD_ADDR_VAR 0 12
8519: PUSH
8520: LD_INT 1
8522: ST_TO_ADDR
// if not units [ unit_id ] then
8523: LD_VAR 0 1
8527: PUSH
8528: LD_VAR 0 12
8532: ARRAY
8533: NOT
8534: IFFALSE 8538
// exit ;
8536: GO 8691
// unit := units [ unit_id ] ;
8538: LD_ADDR_VAR 0 10
8542: PUSH
8543: LD_VAR 0 1
8547: PUSH
8548: LD_VAR 0 12
8552: ARRAY
8553: ST_TO_ADDR
// dialog_id := D & sequence & - & sex_id & class_id & id & - & order_id ;
8554: LD_ADDR_VAR 0 13
8558: PUSH
8559: LD_STRING D
8561: PUSH
8562: LD_VAR 0 3
8566: STR
8567: PUSH
8568: LD_STRING -
8570: STR
8571: PUSH
8572: LD_VAR 0 14
8576: STR
8577: PUSH
8578: LD_VAR 0 15
8582: STR
8583: PUSH
8584: LD_VAR 0 6
8588: STR
8589: PUSH
8590: LD_STRING -
8592: STR
8593: PUSH
8594: LD_VAR 0 7
8598: STR
8599: ST_TO_ADDR
// case type of 0 :
8600: LD_VAR 0 2
8604: PUSH
8605: LD_INT 0
8607: DOUBLE
8608: EQUAL
8609: IFTRUE 8613
8611: GO 8630
8613: POP
// Say ( unit , dialog_id ) ; 1 :
8614: LD_VAR 0 10
8618: PPUSH
8619: LD_VAR 0 13
8623: PPUSH
8624: CALL_OW 88
8628: GO 8681
8630: LD_INT 1
8632: DOUBLE
8633: EQUAL
8634: IFTRUE 8638
8636: GO 8655
8638: POP
// SayRadio ( unit , dialog_id ) ; 2 :
8639: LD_VAR 0 10
8643: PPUSH
8644: LD_VAR 0 13
8648: PPUSH
8649: CALL_OW 94
8653: GO 8681
8655: LD_INT 2
8657: DOUBLE
8658: EQUAL
8659: IFTRUE 8663
8661: GO 8680
8663: POP
// ForceSay ( unit , dialog_id ) ; end ;
8664: LD_VAR 0 10
8668: PPUSH
8669: LD_VAR 0 13
8673: PPUSH
8674: CALL_OW 91
8678: GO 8681
8680: POP
// result := unit ;
8681: LD_ADDR_VAR 0 8
8685: PUSH
8686: LD_VAR 0 10
8690: ST_TO_ADDR
// end ;
8691: LD_VAR 0 8
8695: RET
// export function IsNearbyEntrance ( unit , building , distance ) ; var i , entrance ; begin
8696: LD_INT 0
8698: PPUSH
8699: PPUSH
8700: PPUSH
// result := false ;
8701: LD_ADDR_VAR 0 4
8705: PUSH
8706: LD_INT 0
8708: ST_TO_ADDR
// if not unit or not building or IsInUnit ( unit ) then
8709: LD_VAR 0 1
8713: NOT
8714: PUSH
8715: LD_VAR 0 2
8719: NOT
8720: OR
8721: PUSH
8722: LD_VAR 0 1
8726: PPUSH
8727: CALL_OW 310
8731: OR
8732: IFFALSE 8736
// exit ;
8734: GO 8940
// if distance < 0 then
8736: LD_VAR 0 3
8740: PUSH
8741: LD_INT 0
8743: LESS
8744: IFFALSE 8754
// distance := 0 ;
8746: LD_ADDR_VAR 0 3
8750: PUSH
8751: LD_INT 0
8753: ST_TO_ADDR
// entrance := GetBuildingHexes ( GetBType ( building ) , GetX ( building ) , GetY ( building ) , GetDir ( building ) , GetNation ( building ) , 1 ) ;
8754: LD_ADDR_VAR 0 6
8758: PUSH
8759: LD_VAR 0 2
8763: PPUSH
8764: CALL_OW 266
8768: PPUSH
8769: LD_VAR 0 2
8773: PPUSH
8774: CALL_OW 250
8778: PPUSH
8779: LD_VAR 0 2
8783: PPUSH
8784: CALL_OW 251
8788: PPUSH
8789: LD_VAR 0 2
8793: PPUSH
8794: CALL_OW 254
8798: PPUSH
8799: LD_VAR 0 2
8803: PPUSH
8804: CALL_OW 248
8808: PPUSH
8809: LD_INT 1
8811: PPUSH
8812: CALL 45455 0 6
8816: ST_TO_ADDR
// if not entrance then
8817: LD_VAR 0 6
8821: NOT
8822: IFFALSE 8826
// exit ;
8824: GO 8940
// for i in entrance do
8826: LD_ADDR_VAR 0 5
8830: PUSH
8831: LD_VAR 0 6
8835: PUSH
8836: FOR_IN
8837: IFFALSE 8938
// begin if not distance then
8839: LD_VAR 0 3
8843: NOT
8844: IFFALSE 8889
// begin if IsAt ( unit , i [ 1 ] , i [ 2 ] ) then
8846: LD_VAR 0 1
8850: PPUSH
8851: LD_VAR 0 5
8855: PUSH
8856: LD_INT 1
8858: ARRAY
8859: PPUSH
8860: LD_VAR 0 5
8864: PUSH
8865: LD_INT 2
8867: ARRAY
8868: PPUSH
8869: CALL_OW 307
8873: IFFALSE 8887
// begin result := true ;
8875: LD_ADDR_VAR 0 4
8879: PUSH
8880: LD_INT 1
8882: ST_TO_ADDR
// exit ;
8883: POP
8884: POP
8885: GO 8940
// end ; end else
8887: GO 8936
// begin if GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) <= distance then
8889: LD_VAR 0 1
8893: PPUSH
8894: LD_VAR 0 5
8898: PUSH
8899: LD_INT 1
8901: ARRAY
8902: PPUSH
8903: LD_VAR 0 5
8907: PUSH
8908: LD_INT 2
8910: ARRAY
8911: PPUSH
8912: CALL_OW 297
8916: PUSH
8917: LD_VAR 0 3
8921: LESSEQUAL
8922: IFFALSE 8936
// begin result := true ;
8924: LD_ADDR_VAR 0 4
8928: PUSH
8929: LD_INT 1
8931: ST_TO_ADDR
// exit ;
8932: POP
8933: POP
8934: GO 8940
// end ; end ; end ;
8936: GO 8836
8938: POP
8939: POP
// end ;
8940: LD_VAR 0 4
8944: RET
// export function CanSpot ( unit , unit2 ) ; var i , building ; begin
8945: LD_INT 0
8947: PPUSH
8948: PPUSH
8949: PPUSH
// result := false ;
8950: LD_ADDR_VAR 0 3
8954: PUSH
8955: LD_INT 0
8957: ST_TO_ADDR
// if not unit or not unit2 or not IsOk ( unit ) or not IsOk ( unit2 ) then
8958: LD_VAR 0 1
8962: NOT
8963: PUSH
8964: LD_VAR 0 2
8968: NOT
8969: OR
8970: PUSH
8971: LD_VAR 0 1
8975: PPUSH
8976: CALL_OW 302
8980: NOT
8981: OR
8982: PUSH
8983: LD_VAR 0 2
8987: PPUSH
8988: CALL_OW 302
8992: NOT
8993: OR
8994: IFFALSE 8998
// exit ;
8996: GO 9159
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] ] ) , unit ) ) < 8 then
8998: LD_VAR 0 1
9002: PPUSH
9003: LD_INT 81
9005: PUSH
9006: LD_VAR 0 1
9010: PPUSH
9011: CALL_OW 255
9015: PUSH
9016: EMPTY
9017: LIST
9018: LIST
9019: PUSH
9020: LD_INT 3
9022: PUSH
9023: LD_INT 21
9025: PUSH
9026: LD_INT 3
9028: PUSH
9029: EMPTY
9030: LIST
9031: LIST
9032: PUSH
9033: EMPTY
9034: LIST
9035: LIST
9036: PUSH
9037: EMPTY
9038: LIST
9039: LIST
9040: PPUSH
9041: CALL_OW 69
9045: PPUSH
9046: LD_VAR 0 1
9050: PPUSH
9051: CALL_OW 74
9055: PPUSH
9056: CALL_OW 296
9060: PUSH
9061: LD_INT 8
9063: LESS
9064: IFFALSE 9068
// exit ;
9066: GO 9159
// building := IsInUnit ( unit2 ) ;
9068: LD_ADDR_VAR 0 5
9072: PUSH
9073: LD_VAR 0 2
9077: PPUSH
9078: CALL_OW 310
9082: ST_TO_ADDR
// if building then
9083: LD_VAR 0 5
9087: IFFALSE 9114
// result := IsNearbyEntrance ( unit , building , 2 ) else
9089: LD_ADDR_VAR 0 3
9093: PUSH
9094: LD_VAR 0 1
9098: PPUSH
9099: LD_VAR 0 5
9103: PPUSH
9104: LD_INT 2
9106: PPUSH
9107: CALL 8696 0 3
9111: ST_TO_ADDR
9112: GO 9159
// result := ( GetDistUnits ( unit , unit2 ) < 6 and See ( GetSide ( unit2 ) , unit ) ) ;
9114: LD_ADDR_VAR 0 3
9118: PUSH
9119: LD_VAR 0 1
9123: PPUSH
9124: LD_VAR 0 2
9128: PPUSH
9129: CALL_OW 296
9133: PUSH
9134: LD_INT 6
9136: LESS
9137: PUSH
9138: LD_VAR 0 2
9142: PPUSH
9143: CALL_OW 255
9147: PPUSH
9148: LD_VAR 0 1
9152: PPUSH
9153: CALL_OW 292
9157: AND
9158: ST_TO_ADDR
// end ;
9159: LD_VAR 0 3
9163: RET
// export function CreateNature ; var i , animal , nat_area ; begin
9164: LD_INT 0
9166: PPUSH
9167: PPUSH
9168: PPUSH
9169: PPUSH
// uc_side = 0 ;
9170: LD_ADDR_OWVAR 20
9174: PUSH
9175: LD_INT 0
9177: ST_TO_ADDR
// uc_nation = 0 ;
9178: LD_ADDR_OWVAR 21
9182: PUSH
9183: LD_INT 0
9185: ST_TO_ADDR
// nat_area := nature_area ;
9186: LD_ADDR_VAR 0 4
9190: PUSH
9191: LD_INT 24
9193: ST_TO_ADDR
// InitHc ;
9194: CALL_OW 19
// for i = 1 to 4 do
9198: LD_ADDR_VAR 0 2
9202: PUSH
9203: DOUBLE
9204: LD_INT 1
9206: DEC
9207: ST_TO_ADDR
9208: LD_INT 4
9210: PUSH
9211: FOR_TO
9212: IFFALSE 9259
// begin hc_class = 18 ;
9214: LD_ADDR_OWVAR 28
9218: PUSH
9219: LD_INT 18
9221: ST_TO_ADDR
// hc_gallery =  ;
9222: LD_ADDR_OWVAR 33
9226: PUSH
9227: LD_STRING 
9229: ST_TO_ADDR
// animal := CreateHuman ;
9230: LD_ADDR_VAR 0 3
9234: PUSH
9235: CALL_OW 44
9239: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9240: LD_VAR 0 3
9244: PPUSH
9245: LD_VAR 0 4
9249: PPUSH
9250: LD_INT 0
9252: PPUSH
9253: CALL_OW 49
// end ;
9257: GO 9211
9259: POP
9260: POP
// for i = 1 to 3 do
9261: LD_ADDR_VAR 0 2
9265: PUSH
9266: DOUBLE
9267: LD_INT 1
9269: DEC
9270: ST_TO_ADDR
9271: LD_INT 3
9273: PUSH
9274: FOR_TO
9275: IFFALSE 9369
// begin hc_class = class_apeman ;
9277: LD_ADDR_OWVAR 28
9281: PUSH
9282: LD_INT 12
9284: ST_TO_ADDR
// hc_gallery =  ;
9285: LD_ADDR_OWVAR 33
9289: PUSH
9290: LD_STRING 
9292: ST_TO_ADDR
// hc_agressivity = 0 ;
9293: LD_ADDR_OWVAR 35
9297: PUSH
9298: LD_INT 0
9300: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
9301: LD_ADDR_OWVAR 31
9305: PUSH
9306: LD_INT 1
9308: PPUSH
9309: LD_INT 3
9311: PPUSH
9312: CALL_OW 12
9316: PUSH
9317: LD_INT 1
9319: PPUSH
9320: LD_INT 3
9322: PPUSH
9323: CALL_OW 12
9327: PUSH
9328: LD_INT 0
9330: PUSH
9331: LD_INT 0
9333: PUSH
9334: EMPTY
9335: LIST
9336: LIST
9337: LIST
9338: LIST
9339: ST_TO_ADDR
// animal := CreateHuman ;
9340: LD_ADDR_VAR 0 3
9344: PUSH
9345: CALL_OW 44
9349: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9350: LD_VAR 0 3
9354: PPUSH
9355: LD_VAR 0 4
9359: PPUSH
9360: LD_INT 0
9362: PPUSH
9363: CALL_OW 49
// end ;
9367: GO 9274
9369: POP
9370: POP
// for i = 1 to 3 do
9371: LD_ADDR_VAR 0 2
9375: PUSH
9376: DOUBLE
9377: LD_INT 1
9379: DEC
9380: ST_TO_ADDR
9381: LD_INT 3
9383: PUSH
9384: FOR_TO
9385: IFFALSE 9432
// begin hc_class = 13 ;
9387: LD_ADDR_OWVAR 28
9391: PUSH
9392: LD_INT 13
9394: ST_TO_ADDR
// hc_gallery =  ;
9395: LD_ADDR_OWVAR 33
9399: PUSH
9400: LD_STRING 
9402: ST_TO_ADDR
// animal := CreateHuman ;
9403: LD_ADDR_VAR 0 3
9407: PUSH
9408: CALL_OW 44
9412: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9413: LD_VAR 0 3
9417: PPUSH
9418: LD_VAR 0 4
9422: PPUSH
9423: LD_INT 0
9425: PPUSH
9426: CALL_OW 49
// end ;
9430: GO 9384
9432: POP
9433: POP
// for i = 1 to 3 do
9434: LD_ADDR_VAR 0 2
9438: PUSH
9439: DOUBLE
9440: LD_INT 1
9442: DEC
9443: ST_TO_ADDR
9444: LD_INT 3
9446: PUSH
9447: FOR_TO
9448: IFFALSE 9493
// begin hc_class = 20 ;
9450: LD_ADDR_OWVAR 28
9454: PUSH
9455: LD_INT 20
9457: ST_TO_ADDR
// hc_gallery =  ;
9458: LD_ADDR_OWVAR 33
9462: PUSH
9463: LD_STRING 
9465: ST_TO_ADDR
// animal := CreateHuman ;
9466: LD_ADDR_VAR 0 3
9470: PUSH
9471: CALL_OW 44
9475: ST_TO_ADDR
// PlaceUnitArea ( animal , lake_area , false ) ;
9476: LD_VAR 0 3
9480: PPUSH
9481: LD_INT 4
9483: PPUSH
9484: LD_INT 0
9486: PPUSH
9487: CALL_OW 49
// end ;
9491: GO 9447
9493: POP
9494: POP
// end ; end_of_file
9495: LD_VAR 0 1
9499: RET
// export function Action ; begin
9500: LD_INT 0
9502: PPUSH
// InGameOn ;
9503: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
9507: LD_EXP 14
9511: PPUSH
9512: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
9516: LD_EXP 14
9520: PPUSH
9521: LD_STRING D1-JMM-1
9523: PPUSH
9524: CALL_OW 88
// Say ( Roth , D1-Roth-1 ) ;
9528: LD_EXP 15
9532: PPUSH
9533: LD_STRING D1-Roth-1
9535: PPUSH
9536: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
9540: LD_EXP 14
9544: PPUSH
9545: LD_STRING D1-JMM-2
9547: PPUSH
9548: CALL_OW 88
// Say ( Roth , D1-Roth-2 ) ;
9552: LD_EXP 15
9556: PPUSH
9557: LD_STRING D1-Roth-2
9559: PPUSH
9560: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9564: LD_EXP 14
9568: PPUSH
9569: LD_STRING D1-JMM-3
9571: PPUSH
9572: CALL_OW 88
// Say ( Roth , D1-Roth-3 ) ;
9576: LD_EXP 15
9580: PPUSH
9581: LD_STRING D1-Roth-3
9583: PPUSH
9584: CALL_OW 88
// ComInvisible ( Roth ) ;
9588: LD_EXP 15
9592: PPUSH
9593: CALL_OW 152
// wait ( 0 0$1.3 ) ;
9597: LD_INT 46
9599: PPUSH
9600: CALL_OW 67
// Say ( JMM , D1-JMM-4 ) ;
9604: LD_EXP 14
9608: PPUSH
9609: LD_STRING D1-JMM-4
9611: PPUSH
9612: CALL_OW 88
// wait ( 0 0$0.3 ) ;
9616: LD_INT 10
9618: PPUSH
9619: CALL_OW 67
// ComTurnUnit ( Roth , JMM ) ;
9623: LD_EXP 15
9627: PPUSH
9628: LD_EXP 14
9632: PPUSH
9633: CALL_OW 119
// Say ( JMM , D1-JMM-4a ) ;
9637: LD_EXP 14
9641: PPUSH
9642: LD_STRING D1-JMM-4a
9644: PPUSH
9645: CALL_OW 88
// Say ( Roth , D1-Roth-4 ) ;
9649: LD_EXP 15
9653: PPUSH
9654: LD_STRING D1-Roth-4
9656: PPUSH
9657: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
9661: LD_EXP 14
9665: PPUSH
9666: LD_STRING D1-JMM-5
9668: PPUSH
9669: CALL_OW 88
// Say ( Roth , D1-Roth-5 ) ;
9673: LD_EXP 15
9677: PPUSH
9678: LD_STRING D1-Roth-5
9680: PPUSH
9681: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
9685: LD_EXP 14
9689: PPUSH
9690: LD_STRING D1-JMM-6
9692: PPUSH
9693: CALL_OW 88
// Say ( Roth , D1-Roth-6 ) ;
9697: LD_EXP 15
9701: PPUSH
9702: LD_STRING D1-Roth-6
9704: PPUSH
9705: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
9709: LD_EXP 14
9713: PPUSH
9714: LD_STRING D1-JMM-7
9716: PPUSH
9717: CALL_OW 88
// ComMoveXY ( Powell , GetX ( JMM ) , GetY ( JMM ) ) ;
9721: LD_EXP 16
9725: PPUSH
9726: LD_EXP 14
9730: PPUSH
9731: CALL_OW 250
9735: PPUSH
9736: LD_EXP 14
9740: PPUSH
9741: CALL_OW 251
9745: PPUSH
9746: CALL_OW 111
// Say ( Roth , D1-Roth-7 ) ;
9750: LD_EXP 15
9754: PPUSH
9755: LD_STRING D1-Roth-7
9757: PPUSH
9758: CALL_OW 88
// repeat wait ( 0 0$0.3 ) ;
9762: LD_INT 10
9764: PPUSH
9765: CALL_OW 67
// until GetDistUnits ( Powell , JMM ) < 6 ;
9769: LD_EXP 16
9773: PPUSH
9774: LD_EXP 14
9778: PPUSH
9779: CALL_OW 296
9783: PUSH
9784: LD_INT 6
9786: LESS
9787: IFFALSE 9762
// ComTurnUnit ( Powell , JMM ) ;
9789: LD_EXP 16
9793: PPUSH
9794: LD_EXP 14
9798: PPUSH
9799: CALL_OW 119
// Say ( Powell , D1-Pow-7 ) ;
9803: LD_EXP 16
9807: PPUSH
9808: LD_STRING D1-Pow-7
9810: PPUSH
9811: CALL_OW 88
// ComTurnUnit ( JMM , Powell ) ;
9815: LD_EXP 14
9819: PPUSH
9820: LD_EXP 16
9824: PPUSH
9825: CALL_OW 119
// ComTurnUnit ( Roth , Powell ) ;
9829: LD_EXP 15
9833: PPUSH
9834: LD_EXP 16
9838: PPUSH
9839: CALL_OW 119
// Say ( JMM , D1-JMM-8 ) ;
9843: LD_EXP 14
9847: PPUSH
9848: LD_STRING D1-JMM-8
9850: PPUSH
9851: CALL_OW 88
// Say ( Powell , D1-Pow-8 ) ;
9855: LD_EXP 16
9859: PPUSH
9860: LD_STRING D1-Pow-8
9862: PPUSH
9863: CALL_OW 88
// Say ( JMM , D1-JMM-9 ) ;
9867: LD_EXP 14
9871: PPUSH
9872: LD_STRING D1-JMM-9
9874: PPUSH
9875: CALL_OW 88
// ComMoveXY ( Powell , 124 , 61 ) ;
9879: LD_EXP 16
9883: PPUSH
9884: LD_INT 124
9886: PPUSH
9887: LD_INT 61
9889: PPUSH
9890: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9894: LD_INT 35
9896: PPUSH
9897: CALL_OW 67
// until GetDistUnits ( JMM , Powell ) > 6 ;
9901: LD_EXP 14
9905: PPUSH
9906: LD_EXP 16
9910: PPUSH
9911: CALL_OW 296
9915: PUSH
9916: LD_INT 6
9918: GREATER
9919: IFFALSE 9894
// SayRadio ( Powell , D1-Pow-9 ) ;
9921: LD_EXP 16
9925: PPUSH
9926: LD_STRING D1-Pow-9
9928: PPUSH
9929: CALL_OW 94
// RemoveUnit ( Powell ) ;
9933: LD_EXP 16
9937: PPUSH
9938: CALL_OW 64
// PlaceHumanInUnit ( Powell , ambar0 ) ;
9942: LD_EXP 16
9946: PPUSH
9947: LD_INT 18
9949: PPUSH
9950: CALL_OW 52
// if Joan and not Joan in selected then
9954: LD_EXP 36
9958: PUSH
9959: LD_EXP 36
9963: PUSH
9964: LD_EXP 3
9968: IN
9969: NOT
9970: AND
9971: IFFALSE 9985
// SayRadio ( Joan , D1-Joan-9 ) ;
9973: LD_EXP 36
9977: PPUSH
9978: LD_STRING D1-Joan-9
9980: PPUSH
9981: CALL_OW 94
// ComTurnUnit ( Roth , JMM ) ;
9985: LD_EXP 15
9989: PPUSH
9990: LD_EXP 14
9994: PPUSH
9995: CALL_OW 119
// ComTurnUnit ( JMM , Roth ) ;
9999: LD_EXP 14
10003: PPUSH
10004: LD_EXP 15
10008: PPUSH
10009: CALL_OW 119
// Say ( Roth , D1-Roth-9 ) ;
10013: LD_EXP 15
10017: PPUSH
10018: LD_STRING D1-Roth-9
10020: PPUSH
10021: CALL_OW 88
// Say ( JMM , D1-JMM-10 ) ;
10025: LD_EXP 14
10029: PPUSH
10030: LD_STRING D1-JMM-10
10032: PPUSH
10033: CALL_OW 88
// InGameOff ;
10037: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
10041: LD_STRING M1
10043: PPUSH
10044: CALL_OW 337
// if Difficulty < 3 then
10048: LD_OWVAR 67
10052: PUSH
10053: LD_INT 3
10055: LESS
10056: IFFALSE 10068
// ChangeSideFog ( 4 , 7 ) ;
10058: LD_INT 4
10060: PPUSH
10061: LD_INT 7
10063: PPUSH
10064: CALL_OW 343
// SaveForQuickRestart ;
10068: CALL_OW 22
// SetAttitude ( 7 , 1 , att_enemy , true ) ;
10072: LD_INT 7
10074: PPUSH
10075: LD_INT 1
10077: PPUSH
10078: LD_INT 2
10080: PPUSH
10081: LD_INT 1
10083: PPUSH
10084: CALL_OW 80
// wait ( 0 0$3 ) ;
10088: LD_INT 105
10090: PPUSH
10091: CALL_OW 67
// ComMoveXY ( Roth , 124 , 18 ) ;
10095: LD_EXP 15
10099: PPUSH
10100: LD_INT 124
10102: PPUSH
10103: LD_INT 18
10105: PPUSH
10106: CALL_OW 111
// AddComInvisible ( Roth ) ;
10110: LD_EXP 15
10114: PPUSH
10115: CALL_OW 212
// wait ( 0 0$30 ) ;
10119: LD_INT 1050
10121: PPUSH
10122: CALL_OW 67
// AddComWait ( Roth , 1 1$00 ) ;
10126: LD_EXP 15
10130: PPUSH
10131: LD_INT 2100
10133: PPUSH
10134: CALL_OW 202
// AddComMoveXY ( Roth , 156 , 20 ) ;
10138: LD_EXP 15
10142: PPUSH
10143: LD_INT 156
10145: PPUSH
10146: LD_INT 20
10148: PPUSH
10149: CALL_OW 171
// AddComMoveXY ( Roth , 178 , 42 ) ;
10153: LD_EXP 15
10157: PPUSH
10158: LD_INT 178
10160: PPUSH
10161: LD_INT 42
10163: PPUSH
10164: CALL_OW 171
// AddComInvisible ( Roth ) ;
10168: LD_EXP 15
10172: PPUSH
10173: CALL_OW 212
// end ;
10177: LD_VAR 0 1
10181: RET
// every 0 0$1 do var i , tmp ;
10182: GO 10184
10184: DISABLE
10185: LD_INT 0
10187: PPUSH
10188: PPUSH
// begin tmp := selected union friends ;
10189: LD_ADDR_VAR 0 2
10193: PUSH
10194: LD_EXP 3
10198: PUSH
10199: LD_EXP 4
10203: UNION
10204: ST_TO_ADDR
// if not tmp then
10205: LD_VAR 0 2
10209: NOT
10210: IFFALSE 10214
// exit ;
10212: GO 10286
// repeat wait ( 0 0$1 ) ;
10214: LD_INT 35
10216: PPUSH
10217: CALL_OW 67
// for i in tmp do
10221: LD_ADDR_VAR 0 1
10225: PUSH
10226: LD_VAR 0 2
10230: PUSH
10231: FOR_IN
10232: IFFALSE 10277
// if CanSpot ( JMM , i ) then
10234: LD_EXP 14
10238: PPUSH
10239: LD_VAR 0 1
10243: PPUSH
10244: CALL 8945 0 2
10248: IFFALSE 10275
// begin tmp := tmp diff i ;
10250: LD_ADDR_VAR 0 2
10254: PUSH
10255: LD_VAR 0 2
10259: PUSH
10260: LD_VAR 0 1
10264: DIFF
10265: ST_TO_ADDR
// Spot ( i ) ;
10266: LD_VAR 0 1
10270: PPUSH
10271: CALL 10289 0 1
// end ;
10275: GO 10231
10277: POP
10278: POP
// until not tmp ;
10279: LD_VAR 0 2
10283: NOT
10284: IFFALSE 10214
// end ;
10286: PPOPN 2
10288: END
// export function Spot ( unit ) ; var building , side , joined ; begin
10289: LD_INT 0
10291: PPUSH
10292: PPUSH
10293: PPUSH
10294: PPUSH
// if not unit or GetSide ( unit ) <> 4 or IsSleeping ( unit ) or not IsOk ( unit ) then
10295: LD_VAR 0 1
10299: NOT
10300: PUSH
10301: LD_VAR 0 1
10305: PPUSH
10306: CALL_OW 255
10310: PUSH
10311: LD_INT 4
10313: NONEQUAL
10314: OR
10315: PUSH
10316: LD_VAR 0 1
10320: PPUSH
10321: CALL_OW 555
10325: OR
10326: PUSH
10327: LD_VAR 0 1
10331: PPUSH
10332: CALL_OW 302
10336: NOT
10337: OR
10338: IFFALSE 10342
// exit ;
10340: GO 12231
// InGameOn ;
10342: CALL_OW 8
// side := GetSide ( JMM ) ;
10346: LD_ADDR_VAR 0 4
10350: PUSH
10351: LD_EXP 14
10355: PPUSH
10356: CALL_OW 255
10360: ST_TO_ADDR
// joined := false ;
10361: LD_ADDR_VAR 0 5
10365: PUSH
10366: LD_INT 0
10368: ST_TO_ADDR
// building := IsInUnit ( unit ) ;
10369: LD_ADDR_VAR 0 3
10373: PUSH
10374: LD_VAR 0 1
10378: PPUSH
10379: CALL_OW 310
10383: ST_TO_ADDR
// if building then
10384: LD_VAR 0 3
10388: IFFALSE 10447
// begin SetSide ( JMM , GetSide ( unit ) ) ;
10390: LD_EXP 14
10394: PPUSH
10395: LD_VAR 0 1
10399: PPUSH
10400: CALL_OW 255
10404: PPUSH
10405: CALL_OW 235
// ComEnterUnit ( JMM , building ) ;
10409: LD_EXP 14
10413: PPUSH
10414: LD_VAR 0 3
10418: PPUSH
10419: CALL_OW 120
// repeat wait ( 3 ) ;
10423: LD_INT 3
10425: PPUSH
10426: CALL_OW 67
// until IsInUnit ( JMM ) ;
10430: LD_EXP 14
10434: PPUSH
10435: CALL_OW 310
10439: IFFALSE 10423
// DialogueOn ;
10441: CALL_OW 6
// end else
10445: GO 10479
// begin ComTurnUnit ( JMM , unit ) ;
10447: LD_EXP 14
10451: PPUSH
10452: LD_VAR 0 1
10456: PPUSH
10457: CALL_OW 119
// ComTurnUnit ( unit , JMM ) ;
10461: LD_VAR 0 1
10465: PPUSH
10466: LD_EXP 14
10470: PPUSH
10471: CALL_OW 119
// DialogueOn ;
10475: CALL_OW 6
// end ; if unit = Joan then
10479: LD_VAR 0 1
10483: PUSH
10484: LD_EXP 36
10488: EQUAL
10489: IFFALSE 10599
// begin joined := true ;
10491: LD_ADDR_VAR 0 5
10495: PUSH
10496: LD_INT 1
10498: ST_TO_ADDR
// if Joan in selected then
10499: LD_EXP 36
10503: PUSH
10504: LD_EXP 3
10508: IN
10509: IFFALSE 10537
// begin Say ( Joan , D3-Joan-Joan-1 ) ;
10511: LD_EXP 36
10515: PPUSH
10516: LD_STRING D3-Joan-Joan-1
10518: PPUSH
10519: CALL_OW 88
// Say ( JMM , D3-Joan-JMM-1 ) ;
10523: LD_EXP 14
10527: PPUSH
10528: LD_STRING D3-Joan-JMM-1
10530: PPUSH
10531: CALL_OW 88
// end else
10535: GO 10597
// begin Say ( Joan , D4-Joan-Joan-1 ) ;
10537: LD_EXP 36
10541: PPUSH
10542: LD_STRING D4-Joan-Joan-1
10544: PPUSH
10545: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-1 ) ;
10549: LD_EXP 14
10553: PPUSH
10554: LD_STRING D4-Joan-JMM-1
10556: PPUSH
10557: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-2 ) ;
10561: LD_EXP 36
10565: PPUSH
10566: LD_STRING D4-Joan-Joan-2
10568: PPUSH
10569: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-2 ) ;
10573: LD_EXP 14
10577: PPUSH
10578: LD_STRING D4-Joan-JMM-2
10580: PPUSH
10581: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-3 ) ;
10585: LD_EXP 36
10589: PPUSH
10590: LD_STRING D4-Joan-Joan-3
10592: PPUSH
10593: CALL_OW 88
// end ; end else
10597: GO 12039
// if unit = Lisa then
10599: LD_VAR 0 1
10603: PUSH
10604: LD_EXP 23
10608: EQUAL
10609: IFFALSE 10801
// begin if Lisa in selected then
10611: LD_EXP 23
10615: PUSH
10616: LD_EXP 3
10620: IN
10621: IFFALSE 10734
// begin if GetSide ( Joan ) = 7 then
10623: LD_EXP 36
10627: PPUSH
10628: CALL_OW 255
10632: PUSH
10633: LD_INT 7
10635: EQUAL
10636: IFFALSE 10700
// begin Say ( Lisa , D3-LisaJ-Lisa-1 ) ;
10638: LD_EXP 23
10642: PPUSH
10643: LD_STRING D3-LisaJ-Lisa-1
10645: PPUSH
10646: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-1 ) ;
10650: LD_EXP 14
10654: PPUSH
10655: LD_STRING D3-LisaJ-JMM-1
10657: PPUSH
10658: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-2 ) ;
10662: LD_EXP 23
10666: PPUSH
10667: LD_STRING D3-LisaJ-Lisa-2
10669: PPUSH
10670: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-2 ) ;
10674: LD_EXP 14
10678: PPUSH
10679: LD_STRING D3-LisaJ-JMM-2
10681: PPUSH
10682: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-3 ) ;
10686: LD_EXP 23
10690: PPUSH
10691: LD_STRING D3-LisaJ-Lisa-3
10693: PPUSH
10694: CALL_OW 88
// end else
10698: GO 10732
// begin Say ( Lisa , D3-LisaL-Lisa-1 ) ;
10700: LD_EXP 23
10704: PPUSH
10705: LD_STRING D3-LisaL-Lisa-1
10707: PPUSH
10708: CALL_OW 88
// Say ( JMM , D3-LisaL-JMM-1 ) ;
10712: LD_EXP 14
10716: PPUSH
10717: LD_STRING D3-LisaL-JMM-1
10719: PPUSH
10720: CALL_OW 88
// joined := true ;
10724: LD_ADDR_VAR 0 5
10728: PUSH
10729: LD_INT 1
10731: ST_TO_ADDR
// end ; end else
10732: GO 10799
// begin if GetSide ( Joan ) = 7 then
10734: LD_EXP 36
10738: PPUSH
10739: CALL_OW 255
10743: PUSH
10744: LD_INT 7
10746: EQUAL
10747: IFFALSE 10787
// begin Say ( Lisa , D4-LisaJ-Lisa-1 ) ;
10749: LD_EXP 23
10753: PPUSH
10754: LD_STRING D4-LisaJ-Lisa-1
10756: PPUSH
10757: CALL_OW 88
// Say ( JMM , D4-LisaJ-JMM-1 ) ;
10761: LD_EXP 14
10765: PPUSH
10766: LD_STRING D4-LisaJ-JMM-1
10768: PPUSH
10769: CALL_OW 88
// Say ( Lisa , D4-LisaJ-Lisa-2 ) ;
10773: LD_EXP 23
10777: PPUSH
10778: LD_STRING D4-LisaJ-Lisa-2
10780: PPUSH
10781: CALL_OW 88
// end else
10785: GO 10799
// begin Say ( Lisa , D4-LisaL-Lisa-1 ) ;
10787: LD_EXP 23
10791: PPUSH
10792: LD_STRING D4-LisaL-Lisa-1
10794: PPUSH
10795: CALL_OW 88
// end ; end ; end else
10799: GO 12039
// if unit = Frank then
10801: LD_VAR 0 1
10805: PUSH
10806: LD_EXP 33
10810: EQUAL
10811: IFFALSE 10951
// begin joined := true ;
10813: LD_ADDR_VAR 0 5
10817: PUSH
10818: LD_INT 1
10820: ST_TO_ADDR
// if Frank in selected then
10821: LD_EXP 33
10825: PUSH
10826: LD_EXP 3
10830: IN
10831: IFFALSE 10901
// begin Say ( Frank , D3-Frank-Frank-1 ) ;
10833: LD_EXP 33
10837: PPUSH
10838: LD_STRING D3-Frank-Frank-1
10840: PPUSH
10841: CALL_OW 88
// Say ( JMM , D3-Frank-JMM-1 ) ;
10845: LD_EXP 14
10849: PPUSH
10850: LD_STRING D3-Frank-JMM-1
10852: PPUSH
10853: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-2 ) ;
10857: LD_EXP 33
10861: PPUSH
10862: LD_STRING D3-Frank-Frank-2
10864: PPUSH
10865: CALL_OW 88
// if reached_lab then
10869: LD_EXP 5
10873: IFFALSE 10899
// begin Say ( JMM , D3-Frank-JMM-2 ) ;
10875: LD_EXP 14
10879: PPUSH
10880: LD_STRING D3-Frank-JMM-2
10882: PPUSH
10883: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-3 ) ;
10887: LD_EXP 33
10891: PPUSH
10892: LD_STRING D3-Frank-Frank-3
10894: PPUSH
10895: CALL_OW 88
// end ; end else
10899: GO 10949
// begin Say ( Frank , D4-Frank-Frank-1 ) ;
10901: LD_EXP 33
10905: PPUSH
10906: LD_STRING D4-Frank-Frank-1
10908: PPUSH
10909: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-1 ) ;
10913: LD_EXP 14
10917: PPUSH
10918: LD_STRING D4-Frank-JMM-1
10920: PPUSH
10921: CALL_OW 88
// Say ( Frank , D4-Frank-Frank-2 ) ;
10925: LD_EXP 33
10929: PPUSH
10930: LD_STRING D4-Frank-Frank-2
10932: PPUSH
10933: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-2 ) ;
10937: LD_EXP 14
10941: PPUSH
10942: LD_STRING D4-Frank-JMM-2
10944: PPUSH
10945: CALL_OW 88
// end ; end else
10949: GO 12039
// if unit = Brown then
10951: LD_VAR 0 1
10955: PUSH
10956: LD_EXP 28
10960: EQUAL
10961: IFFALSE 11057
// begin if Brown in selected or gamma_commander = 2 then
10963: LD_EXP 28
10967: PUSH
10968: LD_EXP 3
10972: IN
10973: PUSH
10974: LD_EXP 10
10978: PUSH
10979: LD_INT 2
10981: EQUAL
10982: OR
10983: IFFALSE 11019
// begin Say ( Brown , D3-Soldier1-Sol1-1 ) ;
10985: LD_EXP 28
10989: PPUSH
10990: LD_STRING D3-Soldier1-Sol1-1
10992: PPUSH
10993: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
10997: LD_EXP 14
11001: PPUSH
11002: LD_STRING D3-Soldier1-JMM-1
11004: PPUSH
11005: CALL_OW 88
// joined := true ;
11009: LD_ADDR_VAR 0 5
11013: PUSH
11014: LD_INT 1
11016: ST_TO_ADDR
// end else
11017: GO 11055
// begin Say ( Brown , D4-Soldier2-Sol1-1 ) ;
11019: LD_EXP 28
11023: PPUSH
11024: LD_STRING D4-Soldier2-Sol1-1
11026: PPUSH
11027: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11031: LD_EXP 14
11035: PPUSH
11036: LD_STRING D4-Soldier1-JMM-1
11038: PPUSH
11039: CALL_OW 88
// Say ( Brown , D4-Soldier2-Sol1-2 ) ;
11043: LD_EXP 28
11047: PPUSH
11048: LD_STRING D4-Soldier2-Sol1-2
11050: PPUSH
11051: CALL_OW 88
// end ; end else
11055: GO 12039
// if unit = Donaldson then
11057: LD_VAR 0 1
11061: PUSH
11062: LD_EXP 24
11066: EQUAL
11067: IFFALSE 11163
// begin if Donaldson in selected or gamma_commander = 1 then
11069: LD_EXP 24
11073: PUSH
11074: LD_EXP 3
11078: IN
11079: PUSH
11080: LD_EXP 10
11084: PUSH
11085: LD_INT 1
11087: EQUAL
11088: OR
11089: IFFALSE 11125
// begin Say ( Donaldson , D3-Soldier2-FSol2-1 ) ;
11091: LD_EXP 24
11095: PPUSH
11096: LD_STRING D3-Soldier2-FSol2-1
11098: PPUSH
11099: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11103: LD_EXP 14
11107: PPUSH
11108: LD_STRING D3-Soldier2-JMM-1
11110: PPUSH
11111: CALL_OW 88
// joined := true ;
11115: LD_ADDR_VAR 0 5
11119: PUSH
11120: LD_INT 1
11122: ST_TO_ADDR
// end else
11123: GO 11161
// begin Say ( unit , D4-Soldier1-FSol1-1 ) ;
11125: LD_VAR 0 1
11129: PPUSH
11130: LD_STRING D4-Soldier1-FSol1-1
11132: PPUSH
11133: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11137: LD_EXP 14
11141: PPUSH
11142: LD_STRING D4-Soldier1-JMM-1
11144: PPUSH
11145: CALL_OW 88
// Say ( unit , D4-Soldier1-FSol1-2 ) ;
11149: LD_VAR 0 1
11153: PPUSH
11154: LD_STRING D4-Soldier1-FSol1-2
11156: PPUSH
11157: CALL_OW 88
// end ; end else
11161: GO 12039
// if unit = Cyrus then
11163: LD_VAR 0 1
11167: PUSH
11168: LD_EXP 26
11172: EQUAL
11173: IFFALSE 11247
// begin if Cyrus in selected then
11175: LD_EXP 26
11179: PUSH
11180: LD_EXP 3
11184: IN
11185: IFFALSE 11221
// begin Say ( Cyrus , D3-Cyrus-Cyrus-1 ) ;
11187: LD_EXP 26
11191: PPUSH
11192: LD_STRING D3-Cyrus-Cyrus-1
11194: PPUSH
11195: CALL_OW 88
// Say ( JMM , D3-Cyrus-JMM-1 ) ;
11199: LD_EXP 14
11203: PPUSH
11204: LD_STRING D3-Cyrus-JMM-1
11206: PPUSH
11207: CALL_OW 88
// joined := true ;
11211: LD_ADDR_VAR 0 5
11215: PUSH
11216: LD_INT 1
11218: ST_TO_ADDR
// end else
11219: GO 11245
// begin Say ( Cyrus , D4-Cyrus-Cyrus-1 ) ;
11221: LD_EXP 26
11225: PPUSH
11226: LD_STRING D4-Cyrus-Cyrus-1
11228: PPUSH
11229: CALL_OW 88
// Say ( JMM , D4-Cyrus-JMM-1 ) ;
11233: LD_EXP 14
11237: PPUSH
11238: LD_STRING D4-Cyrus-JMM-1
11240: PPUSH
11241: CALL_OW 88
// end ; end else
11245: GO 12039
// if unit = Bobby then
11247: LD_VAR 0 1
11251: PUSH
11252: LD_EXP 25
11256: EQUAL
11257: IFFALSE 11343
// begin if Bobby in selected then
11259: LD_EXP 25
11263: PUSH
11264: LD_EXP 3
11268: IN
11269: IFFALSE 11305
// begin Say ( Bobby , D3-Bobby-Bobby-1 ) ;
11271: LD_EXP 25
11275: PPUSH
11276: LD_STRING D3-Bobby-Bobby-1
11278: PPUSH
11279: CALL_OW 88
// Say ( JMM , D3-Bobby-JMM-1 ) ;
11283: LD_EXP 14
11287: PPUSH
11288: LD_STRING D3-Bobby-JMM-1
11290: PPUSH
11291: CALL_OW 88
// joined := true ;
11295: LD_ADDR_VAR 0 5
11299: PUSH
11300: LD_INT 1
11302: ST_TO_ADDR
// end else
11303: GO 11341
// begin Say ( Bobby , D4-Bobby-Bobby-1 ) ;
11305: LD_EXP 25
11309: PPUSH
11310: LD_STRING D4-Bobby-Bobby-1
11312: PPUSH
11313: CALL_OW 88
// Say ( JMM , D4-Bobby-JMM-1 ) ;
11317: LD_EXP 14
11321: PPUSH
11322: LD_STRING D4-Bobby-JMM-1
11324: PPUSH
11325: CALL_OW 88
// Say ( Bobby , D4-Bobby-Bobby-2 ) ;
11329: LD_EXP 25
11333: PPUSH
11334: LD_STRING D4-Bobby-Bobby-2
11336: PPUSH
11337: CALL_OW 88
// end ; end else
11341: GO 12039
// if unit = Cornel then
11343: LD_VAR 0 1
11347: PUSH
11348: LD_EXP 31
11352: EQUAL
11353: IFFALSE 11451
// begin if Cornel in selected then
11355: LD_EXP 31
11359: PUSH
11360: LD_EXP 3
11364: IN
11365: IFFALSE 11413
// begin Say ( Cornel , D3-Mark-Corn-1 ) ;
11367: LD_EXP 31
11371: PPUSH
11372: LD_STRING D3-Mark-Corn-1
11374: PPUSH
11375: CALL_OW 88
// Say ( JMM , D3-Mark-JMM-1 ) ;
11379: LD_EXP 14
11383: PPUSH
11384: LD_STRING D3-Mark-JMM-1
11386: PPUSH
11387: CALL_OW 88
// Say ( Cornel , D3-Mark-Corn-2 ) ;
11391: LD_EXP 31
11395: PPUSH
11396: LD_STRING D3-Mark-Corn-2
11398: PPUSH
11399: CALL_OW 88
// joined := true ;
11403: LD_ADDR_VAR 0 5
11407: PUSH
11408: LD_INT 1
11410: ST_TO_ADDR
// end else
11411: GO 11449
// begin Say ( Cornel , D4-Mark-Corn-1 ) ;
11413: LD_EXP 31
11417: PPUSH
11418: LD_STRING D4-Mark-Corn-1
11420: PPUSH
11421: CALL_OW 88
// Say ( JMM , D3-Joan-JMM-1 ) ;
11425: LD_EXP 14
11429: PPUSH
11430: LD_STRING D3-Joan-JMM-1
11432: PPUSH
11433: CALL_OW 88
// Say ( Cornel , D4-Mark-Corn-2 ) ;
11437: LD_EXP 31
11441: PPUSH
11442: LD_STRING D4-Mark-Corn-2
11444: PPUSH
11445: CALL_OW 88
// end ; end else
11449: GO 12039
// if unit = Gary then
11451: LD_VAR 0 1
11455: PUSH
11456: LD_EXP 32
11460: EQUAL
11461: IFFALSE 11545
// begin if Gary in selected then
11463: LD_EXP 32
11467: PUSH
11468: LD_EXP 3
11472: IN
11473: IFFALSE 11509
// begin Say ( Gary , D3-Gary-Gary-1 ) ;
11475: LD_EXP 32
11479: PPUSH
11480: LD_STRING D3-Gary-Gary-1
11482: PPUSH
11483: CALL_OW 88
// Say ( JMM , D3-Gary-JMM-1 ) ;
11487: LD_EXP 14
11491: PPUSH
11492: LD_STRING D3-Gary-JMM-1
11494: PPUSH
11495: CALL_OW 88
// joined := true ;
11499: LD_ADDR_VAR 0 5
11503: PUSH
11504: LD_INT 1
11506: ST_TO_ADDR
// end else
11507: GO 11543
// begin Say ( Gary , D4-Gary-Gary-1 ) ;
11509: LD_EXP 32
11513: PPUSH
11514: LD_STRING D4-Gary-Gary-1
11516: PPUSH
11517: CALL_OW 88
// SetSide ( Gary , 1 ) ;
11521: LD_EXP 32
11525: PPUSH
11526: LD_INT 1
11528: PPUSH
11529: CALL_OW 235
// DialogueOff ;
11533: CALL_OW 7
// InGameOff ;
11537: CALL_OW 9
// exit ;
11541: GO 12231
// end ; end else
11543: GO 12039
// if unit = Kikuchi then
11545: LD_VAR 0 1
11549: PUSH
11550: LD_EXP 34
11554: EQUAL
11555: IFFALSE 11639
// begin if Kikuchi in selected then
11557: LD_EXP 34
11561: PUSH
11562: LD_EXP 3
11566: IN
11567: IFFALSE 11603
// begin Say ( Kikuchi , D3-Yamako-Yam-1 ) ;
11569: LD_EXP 34
11573: PPUSH
11574: LD_STRING D3-Yamako-Yam-1
11576: PPUSH
11577: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11581: LD_EXP 14
11585: PPUSH
11586: LD_STRING D3-Soldier2-JMM-1
11588: PPUSH
11589: CALL_OW 88
// joined := true ;
11593: LD_ADDR_VAR 0 5
11597: PUSH
11598: LD_INT 1
11600: ST_TO_ADDR
// end else
11601: GO 11637
// begin Say ( Kikuchi , D4-Yamako-Yam-1 ) ;
11603: LD_EXP 34
11607: PPUSH
11608: LD_STRING D4-Yamako-Yam-1
11610: PPUSH
11611: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
11615: LD_EXP 34
11619: PPUSH
11620: LD_INT 1
11622: PPUSH
11623: CALL_OW 235
// DialogueOff ;
11627: CALL_OW 7
// InGameOff ;
11631: CALL_OW 9
// exit ;
11635: GO 12231
// end ; end else
11637: GO 12039
// if unit = Gladstone then
11639: LD_VAR 0 1
11643: PUSH
11644: LD_EXP 29
11648: EQUAL
11649: IFFALSE 11723
// begin if Gladstone in selected then
11651: LD_EXP 29
11655: PUSH
11656: LD_EXP 3
11660: IN
11661: IFFALSE 11697
// begin joined := true ;
11663: LD_ADDR_VAR 0 5
11667: PUSH
11668: LD_INT 1
11670: ST_TO_ADDR
// Say ( JMM , D3-Tim-JMM-1 ) ;
11671: LD_EXP 14
11675: PPUSH
11676: LD_STRING D3-Tim-JMM-1
11678: PPUSH
11679: CALL_OW 88
// Say ( Gladstone , D3-Tim-Glad-1 ) ;
11683: LD_EXP 29
11687: PPUSH
11688: LD_STRING D3-Tim-Glad-1
11690: PPUSH
11691: CALL_OW 88
// end else
11695: GO 11721
// begin Say ( JMM , D4-Tim-JMM-1 ) ;
11697: LD_EXP 14
11701: PPUSH
11702: LD_STRING D4-Tim-JMM-1
11704: PPUSH
11705: CALL_OW 88
// Say ( Gladstone , D4-Tim-Glad-1 ) ;
11709: LD_EXP 29
11713: PPUSH
11714: LD_STRING D4-Tim-Glad-1
11716: PPUSH
11717: CALL_OW 88
// end ; end else
11721: GO 12039
// if unit = Denis then
11723: LD_VAR 0 1
11727: PUSH
11728: LD_EXP 27
11732: EQUAL
11733: IFFALSE 11769
// begin joined := true ;
11735: LD_ADDR_VAR 0 5
11739: PUSH
11740: LD_INT 1
11742: ST_TO_ADDR
// Say ( Denis , D3-Denis-Den-1 ) ;
11743: LD_EXP 27
11747: PPUSH
11748: LD_STRING D3-Denis-Den-1
11750: PPUSH
11751: CALL_OW 88
// Say ( JMM , D3-Denis-JMM-1 ) ;
11755: LD_EXP 14
11759: PPUSH
11760: LD_STRING D3-Denis-JMM-1
11762: PPUSH
11763: CALL_OW 88
// end else
11767: GO 12039
// if unit = Simms then
11769: LD_VAR 0 1
11773: PUSH
11774: LD_EXP 35
11778: EQUAL
11779: IFFALSE 11815
// begin joined := true ;
11781: LD_ADDR_VAR 0 5
11785: PUSH
11786: LD_INT 1
11788: ST_TO_ADDR
// Say ( Simms , D3-Simms-Sim-1 ) ;
11789: LD_EXP 35
11793: PPUSH
11794: LD_STRING D3-Simms-Sim-1
11796: PPUSH
11797: CALL_OW 88
// Say ( JMM , D3-Simms-JMM-1 ) ;
11801: LD_EXP 14
11805: PPUSH
11806: LD_STRING D3-Simms-JMM-1
11808: PPUSH
11809: CALL_OW 88
// end else
11813: GO 12039
// if unit = DeltaDoctor then
11815: LD_VAR 0 1
11819: PUSH
11820: LD_EXP 37
11824: EQUAL
11825: IFFALSE 11861
// begin joined := true ;
11827: LD_ADDR_VAR 0 5
11831: PUSH
11832: LD_INT 1
11834: ST_TO_ADDR
// Say ( DeltaDoctor , D3-Soldier1-Sol1-1 ) ;
11835: LD_EXP 37
11839: PPUSH
11840: LD_STRING D3-Soldier1-Sol1-1
11842: PPUSH
11843: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
11847: LD_EXP 14
11851: PPUSH
11852: LD_STRING D3-Soldier1-JMM-1
11854: PPUSH
11855: CALL_OW 88
// end else
11859: GO 12039
// begin joined := unit in selected ;
11861: LD_ADDR_VAR 0 5
11865: PUSH
11866: LD_VAR 0 1
11870: PUSH
11871: LD_EXP 3
11875: IN
11876: ST_TO_ADDR
// if joined then
11877: LD_VAR 0 5
11881: IFFALSE 11950
// begin if GetSex ( unit ) = sex_male then
11883: LD_VAR 0 1
11887: PPUSH
11888: CALL_OW 258
11892: PUSH
11893: LD_INT 1
11895: EQUAL
11896: IFFALSE 11924
// begin Say ( unit , D3-Soldier1-Sol1-1 ) ;
11898: LD_VAR 0 1
11902: PPUSH
11903: LD_STRING D3-Soldier1-Sol1-1
11905: PPUSH
11906: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
11910: LD_EXP 14
11914: PPUSH
11915: LD_STRING D3-Soldier1-JMM-1
11917: PPUSH
11918: CALL_OW 88
// end else
11922: GO 11948
// begin Say ( unit , D3-Soldier2-FSol2-1 ) ;
11924: LD_VAR 0 1
11928: PPUSH
11929: LD_STRING D3-Soldier2-FSol2-1
11931: PPUSH
11932: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11936: LD_EXP 14
11940: PPUSH
11941: LD_STRING D3-Soldier2-JMM-1
11943: PPUSH
11944: CALL_OW 88
// end ; end else
11948: GO 12039
// begin if GetSex ( unit ) = sex_male then
11950: LD_VAR 0 1
11954: PPUSH
11955: CALL_OW 258
11959: PUSH
11960: LD_INT 1
11962: EQUAL
11963: IFFALSE 12003
// begin Say ( unit , D4-Soldier2-Sol1-1 ) ;
11965: LD_VAR 0 1
11969: PPUSH
11970: LD_STRING D4-Soldier2-Sol1-1
11972: PPUSH
11973: CALL_OW 88
// Say ( JMM , D4-Soldier2-JMM-1 ) ;
11977: LD_EXP 14
11981: PPUSH
11982: LD_STRING D4-Soldier2-JMM-1
11984: PPUSH
11985: CALL_OW 88
// Say ( unit , D4-Soldier2-Sol2-1 ) ;
11989: LD_VAR 0 1
11993: PPUSH
11994: LD_STRING D4-Soldier2-Sol2-1
11996: PPUSH
11997: CALL_OW 88
// end else
12001: GO 12039
// begin Say ( unit , D4-Soldier1-FSol1-1 ) ;
12003: LD_VAR 0 1
12007: PPUSH
12008: LD_STRING D4-Soldier1-FSol1-1
12010: PPUSH
12011: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
12015: LD_EXP 14
12019: PPUSH
12020: LD_STRING D4-Soldier1-JMM-1
12022: PPUSH
12023: CALL_OW 88
// Say ( unit , D4-Soldier1-FSol1-2 ) ;
12027: LD_VAR 0 1
12031: PPUSH
12032: LD_STRING D4-Soldier1-FSol1-2
12034: PPUSH
12035: CALL_OW 88
// end ; end ; end ; DialogueOff ;
12039: CALL_OW 7
// InGameOff ;
12043: CALL_OW 9
// if building then
12047: LD_VAR 0 3
12051: IFFALSE 12152
// begin SetSide ( JMM , side ) ;
12053: LD_EXP 14
12057: PPUSH
12058: LD_VAR 0 4
12062: PPUSH
12063: CALL_OW 235
// ComExitBuilding ( JMM ) ;
12067: LD_EXP 14
12071: PPUSH
12072: CALL_OW 122
// if joined then
12076: LD_VAR 0 5
12080: IFFALSE 12119
// begin SetSide ( unit , side ) ;
12082: LD_VAR 0 1
12086: PPUSH
12087: LD_VAR 0 4
12091: PPUSH
12092: CALL_OW 235
// SetSide ( building , 1 ) ;
12096: LD_VAR 0 3
12100: PPUSH
12101: LD_INT 1
12103: PPUSH
12104: CALL_OW 235
// ComExitBuilding ( unit ) ;
12108: LD_VAR 0 1
12112: PPUSH
12113: CALL_OW 122
// end else
12117: GO 12150
// begin wait ( 0 0$10 ) ;
12119: LD_INT 350
12121: PPUSH
12122: CALL_OW 67
// SetSide ( unit , 1 ) ;
12126: LD_VAR 0 1
12130: PPUSH
12131: LD_INT 1
12133: PPUSH
12134: CALL_OW 235
// SetSide ( building , 1 ) ;
12138: LD_VAR 0 3
12142: PPUSH
12143: LD_INT 1
12145: PPUSH
12146: CALL_OW 235
// end ; end else
12150: GO 12231
// begin ComStop ( [ JMM , unit ] ) ;
12152: LD_EXP 14
12156: PUSH
12157: LD_VAR 0 1
12161: PUSH
12162: EMPTY
12163: LIST
12164: LIST
12165: PPUSH
12166: CALL_OW 141
// if joined then
12170: LD_VAR 0 5
12174: IFFALSE 12192
// SetSide ( unit , side ) else
12176: LD_VAR 0 1
12180: PPUSH
12181: LD_VAR 0 4
12185: PPUSH
12186: CALL_OW 235
12190: GO 12231
// begin repeat wait ( 0 0$1 ) ;
12192: LD_INT 35
12194: PPUSH
12195: CALL_OW 67
// until GetDistUnits ( JMM , unit ) > 11 ;
12199: LD_EXP 14
12203: PPUSH
12204: LD_VAR 0 1
12208: PPUSH
12209: CALL_OW 296
12213: PUSH
12214: LD_INT 11
12216: GREATER
12217: IFFALSE 12192
// SetSide ( unit , 1 ) ;
12219: LD_VAR 0 1
12223: PPUSH
12224: LD_INT 1
12226: PPUSH
12227: CALL_OW 235
// end ; end ; end ;
12231: LD_VAR 0 2
12235: RET
// every 0 0$01 trigger IsInUnit ( JMM ) = amlab do
12236: LD_EXP 14
12240: PPUSH
12241: CALL_OW 310
12245: PUSH
12246: LD_INT 47
12248: EQUAL
12249: IFFALSE 12317
12251: GO 12253
12253: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
12254: LD_STRING M1a
12256: PPUSH
12257: CALL_OW 337
// SetTech ( tech_Soporific , 7 , state_researched ) ;
12261: LD_INT 13
12263: PPUSH
12264: LD_INT 7
12266: PPUSH
12267: LD_INT 2
12269: PPUSH
12270: CALL_OW 322
// SetTech ( tech_SpacAnom , 7 , state_researched ) ;
12274: LD_INT 29
12276: PPUSH
12277: LD_INT 7
12279: PPUSH
12280: LD_INT 2
12282: PPUSH
12283: CALL_OW 322
// SetClass ( JMM , class_bazooker ) ;
12287: LD_EXP 14
12291: PPUSH
12292: LD_INT 9
12294: PPUSH
12295: CALL_OW 336
// can_escape := true ;
12299: LD_ADDR_EXP 6
12303: PUSH
12304: LD_INT 1
12306: ST_TO_ADDR
// SetAreaMapShow ( escape_area , 1 ) ;
12307: LD_INT 19
12309: PPUSH
12310: LD_INT 1
12312: PPUSH
12313: CALL_OW 424
// end ;
12317: END
// every 0 0$1 trigger GetLives ( Powell ) < 999 do
12318: LD_EXP 16
12322: PPUSH
12323: CALL_OW 256
12327: PUSH
12328: LD_INT 999
12330: LESS
12331: IFFALSE 12382
12333: GO 12335
12335: DISABLE
// begin enable ;
12336: ENABLE
// if HexInfo ( 25 , 48 ) = Powell then
12337: LD_INT 25
12339: PPUSH
12340: LD_INT 48
12342: PPUSH
12343: CALL_OW 428
12347: PUSH
12348: LD_EXP 16
12352: EQUAL
12353: IFFALSE 12367
// begin RemoveUnit ( Powell ) ;
12355: LD_EXP 16
12359: PPUSH
12360: CALL_OW 64
// disable ;
12364: DISABLE
// end else
12365: GO 12382
// ComMoveXY ( Powell , 25 , 48 ) ;
12367: LD_EXP 16
12371: PPUSH
12372: LD_INT 25
12374: PPUSH
12375: LD_INT 48
12377: PPUSH
12378: CALL_OW 111
// end ;
12382: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do var i ;
12383: LD_INT 22
12385: PUSH
12386: LD_INT 4
12388: PUSH
12389: EMPTY
12390: LIST
12391: LIST
12392: PUSH
12393: LD_INT 21
12395: PUSH
12396: LD_INT 1
12398: PUSH
12399: EMPTY
12400: LIST
12401: LIST
12402: PUSH
12403: LD_INT 3
12405: PUSH
12406: LD_INT 24
12408: PUSH
12409: LD_INT 990
12411: PUSH
12412: EMPTY
12413: LIST
12414: LIST
12415: PUSH
12416: EMPTY
12417: LIST
12418: LIST
12419: PUSH
12420: EMPTY
12421: LIST
12422: LIST
12423: LIST
12424: PPUSH
12425: CALL_OW 69
12429: PUSH
12430: LD_EXP 15
12434: DIFF
12435: IFFALSE 12579
12437: GO 12439
12439: DISABLE
12440: LD_INT 0
12442: PPUSH
// begin enable ;
12443: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do
12444: LD_ADDR_VAR 0 1
12448: PUSH
12449: LD_INT 22
12451: PUSH
12452: LD_INT 4
12454: PUSH
12455: EMPTY
12456: LIST
12457: LIST
12458: PUSH
12459: LD_INT 21
12461: PUSH
12462: LD_INT 1
12464: PUSH
12465: EMPTY
12466: LIST
12467: LIST
12468: PUSH
12469: LD_INT 3
12471: PUSH
12472: LD_INT 24
12474: PUSH
12475: LD_INT 990
12477: PUSH
12478: EMPTY
12479: LIST
12480: LIST
12481: PUSH
12482: EMPTY
12483: LIST
12484: LIST
12485: PUSH
12486: EMPTY
12487: LIST
12488: LIST
12489: LIST
12490: PPUSH
12491: CALL_OW 69
12495: PUSH
12496: LD_EXP 15
12500: DIFF
12501: PUSH
12502: FOR_IN
12503: IFFALSE 12577
// begin ComFree ( i ) ;
12505: LD_VAR 0 1
12509: PPUSH
12510: CALL_OW 139
// SetSide ( i , 1 ) ;
12514: LD_VAR 0 1
12518: PPUSH
12519: LD_INT 1
12521: PPUSH
12522: CALL_OW 235
// if GetDistUnits ( i , JMM ) < 14 then
12526: LD_VAR 0 1
12530: PPUSH
12531: LD_EXP 14
12535: PPUSH
12536: CALL_OW 296
12540: PUSH
12541: LD_INT 14
12543: LESS
12544: IFFALSE 12575
// ComAgressiveMove ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
12546: LD_VAR 0 1
12550: PPUSH
12551: LD_EXP 14
12555: PPUSH
12556: CALL_OW 250
12560: PPUSH
12561: LD_EXP 14
12565: PPUSH
12566: CALL_OW 251
12570: PPUSH
12571: CALL_OW 114
// end ;
12575: GO 12502
12577: POP
12578: POP
// end ;
12579: PPOPN 1
12581: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var i ;
12582: LD_INT 22
12584: PUSH
12585: LD_INT 4
12587: PUSH
12588: EMPTY
12589: LIST
12590: LIST
12591: PUSH
12592: LD_INT 34
12594: PUSH
12595: LD_INT 12
12597: PUSH
12598: EMPTY
12599: LIST
12600: LIST
12601: PUSH
12602: EMPTY
12603: LIST
12604: LIST
12605: PPUSH
12606: CALL_OW 69
12610: IFFALSE 12692
12612: GO 12614
12614: DISABLE
12615: LD_INT 0
12617: PPUSH
// begin enable ;
12618: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do
12619: LD_ADDR_VAR 0 1
12623: PUSH
12624: LD_INT 22
12626: PUSH
12627: LD_INT 4
12629: PUSH
12630: EMPTY
12631: LIST
12632: LIST
12633: PUSH
12634: LD_INT 34
12636: PUSH
12637: LD_INT 12
12639: PUSH
12640: EMPTY
12641: LIST
12642: LIST
12643: PUSH
12644: EMPTY
12645: LIST
12646: LIST
12647: PPUSH
12648: CALL_OW 69
12652: PUSH
12653: FOR_IN
12654: IFFALSE 12690
// if GetDistUnits ( i , JMM ) < 6 then
12656: LD_VAR 0 1
12660: PPUSH
12661: LD_EXP 14
12665: PPUSH
12666: CALL_OW 296
12670: PUSH
12671: LD_INT 6
12673: LESS
12674: IFFALSE 12688
// SetSide ( i , 7 ) ;
12676: LD_VAR 0 1
12680: PPUSH
12681: LD_INT 7
12683: PPUSH
12684: CALL_OW 235
12688: GO 12653
12690: POP
12691: POP
// end ;
12692: PPOPN 1
12694: END
// every 0 0$01 trigger can_escape and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) do var all_taken , tmp , m1 , m2 , m3 ;
12695: LD_EXP 6
12699: PUSH
12700: LD_INT 19
12702: PPUSH
12703: LD_INT 22
12705: PUSH
12706: LD_INT 7
12708: PUSH
12709: EMPTY
12710: LIST
12711: LIST
12712: PUSH
12713: LD_INT 21
12715: PUSH
12716: LD_INT 1
12718: PUSH
12719: EMPTY
12720: LIST
12721: LIST
12722: PUSH
12723: EMPTY
12724: LIST
12725: LIST
12726: PPUSH
12727: CALL_OW 71
12731: NOT
12732: AND
12733: PUSH
12734: LD_INT 3
12736: PPUSH
12737: CALL_OW 469
12741: NOT
12742: AND
12743: PUSH
12744: LD_INT 5
12746: PPUSH
12747: CALL_OW 469
12751: NOT
12752: AND
12753: IFFALSE 14375
12755: GO 12757
12757: DISABLE
12758: LD_INT 0
12760: PPUSH
12761: PPUSH
12762: PPUSH
12763: PPUSH
12764: PPUSH
// begin m1 := false ;
12765: LD_ADDR_VAR 0 3
12769: PUSH
12770: LD_INT 0
12772: ST_TO_ADDR
// m2 := false ;
12773: LD_ADDR_VAR 0 4
12777: PUSH
12778: LD_INT 0
12780: ST_TO_ADDR
// m3 := false ;
12781: LD_ADDR_VAR 0 5
12785: PUSH
12786: LD_INT 0
12788: ST_TO_ADDR
// all_taken := ( UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 ) ;
12789: LD_ADDR_VAR 0 1
12793: PUSH
12794: LD_EXP 3
12798: PPUSH
12799: LD_INT 22
12801: PUSH
12802: LD_INT 4
12804: PUSH
12805: EMPTY
12806: LIST
12807: LIST
12808: PUSH
12809: LD_INT 21
12811: PUSH
12812: LD_INT 1
12814: PUSH
12815: EMPTY
12816: LIST
12817: LIST
12818: PUSH
12819: EMPTY
12820: LIST
12821: LIST
12822: PPUSH
12823: CALL_OW 72
12827: PUSH
12828: LD_INT 0
12830: EQUAL
12831: ST_TO_ADDR
// if not all_taken then
12832: LD_VAR 0 1
12836: NOT
12837: IFFALSE 12978
// case query ( Q1 ) of 1 :
12839: LD_STRING Q1
12841: PPUSH
12842: CALL_OW 97
12846: PUSH
12847: LD_INT 1
12849: DOUBLE
12850: EQUAL
12851: IFTRUE 12855
12853: GO 12966
12855: POP
// begin repeat wait ( 0 0$1 ) ;
12856: LD_INT 35
12858: PPUSH
12859: CALL_OW 67
// until UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) ;
12863: LD_EXP 3
12867: PPUSH
12868: LD_INT 22
12870: PUSH
12871: LD_INT 4
12873: PUSH
12874: EMPTY
12875: LIST
12876: LIST
12877: PUSH
12878: LD_INT 21
12880: PUSH
12881: LD_INT 1
12883: PUSH
12884: EMPTY
12885: LIST
12886: LIST
12887: PUSH
12888: EMPTY
12889: LIST
12890: LIST
12891: PPUSH
12892: CALL_OW 72
12896: PUSH
12897: LD_INT 0
12899: EQUAL
12900: PUSH
12901: LD_INT 19
12903: PPUSH
12904: LD_INT 22
12906: PUSH
12907: LD_INT 7
12909: PUSH
12910: EMPTY
12911: LIST
12912: LIST
12913: PUSH
12914: LD_INT 21
12916: PUSH
12917: LD_INT 1
12919: PUSH
12920: EMPTY
12921: LIST
12922: LIST
12923: PUSH
12924: EMPTY
12925: LIST
12926: LIST
12927: PPUSH
12928: CALL_OW 71
12932: NOT
12933: AND
12934: PUSH
12935: LD_INT 3
12937: PPUSH
12938: CALL_OW 469
12942: NOT
12943: AND
12944: PUSH
12945: LD_INT 5
12947: PPUSH
12948: CALL_OW 469
12952: NOT
12953: AND
12954: IFFALSE 12856
// all_taken := true ;
12956: LD_ADDR_VAR 0 1
12960: PUSH
12961: LD_INT 1
12963: ST_TO_ADDR
// end ; 2 :
12964: GO 12978
12966: LD_INT 2
12968: DOUBLE
12969: EQUAL
12970: IFTRUE 12974
12972: GO 12977
12974: POP
// ; end ;
12975: GO 12978
12977: POP
// if team_kill_counter then
12978: LD_EXP 9
12982: IFFALSE 12998
// Say ( JMM , D5-JMM-1 ) else
12984: LD_EXP 14
12988: PPUSH
12989: LD_STRING D5-JMM-1
12991: PPUSH
12992: CALL_OW 88
12996: GO 13010
// Say ( JMM , D5-JMM-1a ) ;
12998: LD_EXP 14
13002: PPUSH
13003: LD_STRING D5-JMM-1a
13005: PPUSH
13006: CALL_OW 88
// if ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Roth ] ) >= 10 then
13010: LD_INT 22
13012: PUSH
13013: LD_INT 7
13015: PUSH
13016: EMPTY
13017: LIST
13018: LIST
13019: PUSH
13020: LD_INT 21
13022: PUSH
13023: LD_INT 1
13025: PUSH
13026: EMPTY
13027: LIST
13028: LIST
13029: PUSH
13030: LD_INT 23
13032: PUSH
13033: LD_INT 1
13035: PUSH
13036: EMPTY
13037: LIST
13038: LIST
13039: PUSH
13040: EMPTY
13041: LIST
13042: LIST
13043: LIST
13044: PPUSH
13045: CALL_OW 69
13049: PUSH
13050: LD_EXP 14
13054: PUSH
13055: LD_EXP 15
13059: PUSH
13060: EMPTY
13061: LIST
13062: LIST
13063: DIFF
13064: PUSH
13065: LD_INT 10
13067: GREATEREQUAL
13068: IFFALSE 13077
// SetAchievement ( ACH_TEAM ) ;
13070: LD_STRING ACH_TEAM
13072: PPUSH
13073: CALL_OW 543
// if not invis_used then
13077: LD_EXP 12
13081: NOT
13082: IFFALSE 13098
// begin wait ( 3 ) ;
13084: LD_INT 3
13086: PPUSH
13087: CALL_OW 67
// SetAchievement ( ACH_NOINVIS ) ;
13091: LD_STRING ACH_NOINVIS
13093: PPUSH
13094: CALL_OW 543
// end ; if not alert then
13098: LD_EXP 13
13102: NOT
13103: IFFALSE 13119
// begin wait ( 3 ) ;
13105: LD_INT 3
13107: PPUSH
13108: CALL_OW 67
// SetAchievement ( ACH_ALARM ) ;
13112: LD_STRING ACH_ALARM
13114: PPUSH
13115: CALL_OW 543
// end ; if tick < 15 15$00 then
13119: LD_OWVAR 1
13123: PUSH
13124: LD_INT 31500
13126: LESS
13127: IFFALSE 13143
// begin wait ( 3 ) ;
13129: LD_INT 3
13131: PPUSH
13132: CALL_OW 67
// SetAchievement ( ACH_ASPEED_16 ) ;
13136: LD_STRING ACH_ASPEED_16
13138: PPUSH
13139: CALL_OW 543
// end ; if all_taken then
13143: LD_VAR 0 1
13147: IFFALSE 13169
// begin AddMedal ( All , 1 ) ;
13149: LD_STRING All
13151: PPUSH
13152: LD_INT 1
13154: PPUSH
13155: CALL_OW 101
// m1 := true ;
13159: LD_ADDR_VAR 0 3
13163: PUSH
13164: LD_INT 1
13166: ST_TO_ADDR
// end else
13167: GO 13180
// AddMedal ( All , - 1 ) ;
13169: LD_STRING All
13171: PPUSH
13172: LD_INT 1
13174: NEG
13175: PPUSH
13176: CALL_OW 101
// if team_kill_counter then
13180: LD_EXP 9
13184: IFFALSE 13199
// AddMedal ( Save , - 1 ) else
13186: LD_STRING Save
13188: PPUSH
13189: LD_INT 1
13191: NEG
13192: PPUSH
13193: CALL_OW 101
13197: GO 13217
// begin AddMedal ( Save , 1 ) ;
13199: LD_STRING Save
13201: PPUSH
13202: LD_INT 1
13204: PPUSH
13205: CALL_OW 101
// m2 := true ;
13209: LD_ADDR_VAR 0 4
13213: PUSH
13214: LD_INT 1
13216: ST_TO_ADDR
// end ; if friends_kill_counter >= [ 2 , 1 , 1 ] [ Difficulty ] then
13217: LD_EXP 8
13221: PUSH
13222: LD_INT 2
13224: PUSH
13225: LD_INT 1
13227: PUSH
13228: LD_INT 1
13230: PUSH
13231: EMPTY
13232: LIST
13233: LIST
13234: LIST
13235: PUSH
13236: LD_OWVAR 67
13240: ARRAY
13241: GREATEREQUAL
13242: IFFALSE 13257
// AddMedal ( Friendship , - 1 ) else
13244: LD_STRING Friendship
13246: PPUSH
13247: LD_INT 1
13249: NEG
13250: PPUSH
13251: CALL_OW 101
13255: GO 13275
// begin AddMedal ( Friendship , 1 ) ;
13257: LD_STRING Friendship
13259: PPUSH
13260: LD_INT 1
13262: PPUSH
13263: CALL_OW 101
// m3 := true ;
13267: LD_ADDR_VAR 0 5
13271: PUSH
13272: LD_INT 1
13274: ST_TO_ADDR
// end ; if m1 and m2 and m3 and Difficulty = 3 then
13275: LD_VAR 0 3
13279: PUSH
13280: LD_VAR 0 4
13284: AND
13285: PUSH
13286: LD_VAR 0 5
13290: AND
13291: PUSH
13292: LD_OWVAR 67
13296: PUSH
13297: LD_INT 3
13299: EQUAL
13300: AND
13301: IFFALSE 13313
// SetAchievementEX ( ACH_AMER , 16 ) ;
13303: LD_STRING ACH_AMER
13305: PPUSH
13306: LD_INT 16
13308: PPUSH
13309: CALL_OW 564
// GiveMedals ( MAIN ) ;
13313: LD_STRING MAIN
13315: PPUSH
13316: CALL_OW 102
// tmp := FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ] ) ;
13320: LD_ADDR_VAR 0 2
13324: PUSH
13325: LD_INT 22
13327: PUSH
13328: LD_INT 7
13330: PUSH
13331: EMPTY
13332: LIST
13333: LIST
13334: PUSH
13335: LD_INT 2
13337: PUSH
13338: LD_INT 25
13340: PUSH
13341: LD_INT 1
13343: PUSH
13344: EMPTY
13345: LIST
13346: LIST
13347: PUSH
13348: LD_INT 25
13350: PUSH
13351: LD_INT 2
13353: PUSH
13354: EMPTY
13355: LIST
13356: LIST
13357: PUSH
13358: LD_INT 25
13360: PUSH
13361: LD_INT 3
13363: PUSH
13364: EMPTY
13365: LIST
13366: LIST
13367: PUSH
13368: LD_INT 25
13370: PUSH
13371: LD_INT 4
13373: PUSH
13374: EMPTY
13375: LIST
13376: LIST
13377: PUSH
13378: LD_INT 25
13380: PUSH
13381: LD_INT 5
13383: PUSH
13384: EMPTY
13385: LIST
13386: LIST
13387: PUSH
13388: LD_INT 25
13390: PUSH
13391: LD_INT 8
13393: PUSH
13394: EMPTY
13395: LIST
13396: LIST
13397: PUSH
13398: LD_INT 25
13400: PUSH
13401: LD_INT 9
13403: PUSH
13404: EMPTY
13405: LIST
13406: LIST
13407: PUSH
13408: EMPTY
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: PUSH
13418: EMPTY
13419: LIST
13420: LIST
13421: PUSH
13422: EMPTY
13423: LIST
13424: PPUSH
13425: CALL_OW 69
13429: ST_TO_ADDR
// RewardPeople ( tmp ^ Roth ) ;
13430: LD_VAR 0 2
13434: PUSH
13435: LD_EXP 15
13439: ADD
13440: PPUSH
13441: CALL_OW 43
// SaveCharacters ( JMM , 12a_JMM ) ;
13445: LD_EXP 14
13449: PPUSH
13450: LD_STRING 12a_JMM
13452: PPUSH
13453: CALL_OW 38
// if IsLive ( Roth ) then
13457: LD_EXP 15
13461: PPUSH
13462: CALL_OW 300
13466: IFFALSE 13480
// SaveCharacters ( Roth , 12a_Roth ) ;
13468: LD_EXP 15
13472: PPUSH
13473: LD_STRING 12a_Roth
13475: PPUSH
13476: CALL_OW 38
// if Lisa in tmp then
13480: LD_EXP 23
13484: PUSH
13485: LD_VAR 0 2
13489: IN
13490: IFFALSE 13506
// SaveCharacters ( Lisa , 12a_Lisa ) else
13492: LD_EXP 23
13496: PPUSH
13497: LD_STRING 12a_Lisa
13499: PPUSH
13500: CALL_OW 38
13504: GO 13524
// if Lisa then
13506: LD_EXP 23
13510: IFFALSE 13524
// SaveCharacters ( Lisa , 12p_Lisa ) ;
13512: LD_EXP 23
13516: PPUSH
13517: LD_STRING 12p_Lisa
13519: PPUSH
13520: CALL_OW 38
// if Donaldson in tmp then
13524: LD_EXP 24
13528: PUSH
13529: LD_VAR 0 2
13533: IN
13534: IFFALSE 13550
// SaveCharacters ( Donaldson , 12a_Donaldson ) else
13536: LD_EXP 24
13540: PPUSH
13541: LD_STRING 12a_Donaldson
13543: PPUSH
13544: CALL_OW 38
13548: GO 13568
// if Donaldson then
13550: LD_EXP 24
13554: IFFALSE 13568
// SaveCharacters ( Donaldson , 12p_Donaldson ) ;
13556: LD_EXP 24
13560: PPUSH
13561: LD_STRING 12p_Donaldson
13563: PPUSH
13564: CALL_OW 38
// if Bobby in tmp then
13568: LD_EXP 25
13572: PUSH
13573: LD_VAR 0 2
13577: IN
13578: IFFALSE 13594
// SaveCharacters ( Bobby , 12a_Bobby ) else
13580: LD_EXP 25
13584: PPUSH
13585: LD_STRING 12a_Bobby
13587: PPUSH
13588: CALL_OW 38
13592: GO 13612
// if Bobby then
13594: LD_EXP 25
13598: IFFALSE 13612
// SaveCharacters ( Bobby , 12p_Bobby ) ;
13600: LD_EXP 25
13604: PPUSH
13605: LD_STRING 12p_Bobby
13607: PPUSH
13608: CALL_OW 38
// if Cyrus in tmp then
13612: LD_EXP 26
13616: PUSH
13617: LD_VAR 0 2
13621: IN
13622: IFFALSE 13638
// SaveCharacters ( Cyrus , 12a_Cyrus ) else
13624: LD_EXP 26
13628: PPUSH
13629: LD_STRING 12a_Cyrus
13631: PPUSH
13632: CALL_OW 38
13636: GO 13656
// if Cyrus then
13638: LD_EXP 26
13642: IFFALSE 13656
// SaveCharacters ( Cyrus , 12p_Cyrus ) ;
13644: LD_EXP 26
13648: PPUSH
13649: LD_STRING 12p_Cyrus
13651: PPUSH
13652: CALL_OW 38
// if Denis in tmp then
13656: LD_EXP 27
13660: PUSH
13661: LD_VAR 0 2
13665: IN
13666: IFFALSE 13680
// SaveCharacters ( Denis , 12a_Denis ) ;
13668: LD_EXP 27
13672: PPUSH
13673: LD_STRING 12a_Denis
13675: PPUSH
13676: CALL_OW 38
// if Brown in tmp then
13680: LD_EXP 28
13684: PUSH
13685: LD_VAR 0 2
13689: IN
13690: IFFALSE 13706
// SaveCharacters ( Brown , 12a_Brown ) else
13692: LD_EXP 28
13696: PPUSH
13697: LD_STRING 12a_Brown
13699: PPUSH
13700: CALL_OW 38
13704: GO 13730
// if Brown in tmp then
13706: LD_EXP 28
13710: PUSH
13711: LD_VAR 0 2
13715: IN
13716: IFFALSE 13730
// SaveCharacters ( Brown , 12p_Brown ) ;
13718: LD_EXP 28
13722: PPUSH
13723: LD_STRING 12p_Brown
13725: PPUSH
13726: CALL_OW 38
// if Gladstone in tmp then
13730: LD_EXP 29
13734: PUSH
13735: LD_VAR 0 2
13739: IN
13740: IFFALSE 13756
// SaveCharacters ( Gladstone , 12a_Gladstone ) else
13742: LD_EXP 29
13746: PPUSH
13747: LD_STRING 12a_Gladstone
13749: PPUSH
13750: CALL_OW 38
13754: GO 13774
// if Gladstone then
13756: LD_EXP 29
13760: IFFALSE 13774
// SaveCharacters ( Gladstone , 12p_Gladstone ) ;
13762: LD_EXP 29
13766: PPUSH
13767: LD_STRING 12p_Gladstone
13769: PPUSH
13770: CALL_OW 38
// if Houten in tmp then
13774: LD_EXP 30
13778: PUSH
13779: LD_VAR 0 2
13783: IN
13784: IFFALSE 13800
// SaveCharacters ( Houten , 12a_Houten ) else
13786: LD_EXP 30
13790: PPUSH
13791: LD_STRING 12a_Houten
13793: PPUSH
13794: CALL_OW 38
13798: GO 13818
// if Houten then
13800: LD_EXP 30
13804: IFFALSE 13818
// SaveCharacters ( Houten , 12p_Houten ) ;
13806: LD_EXP 30
13810: PPUSH
13811: LD_STRING 12p_Houten
13813: PPUSH
13814: CALL_OW 38
// if Cornel in tmp then
13818: LD_EXP 31
13822: PUSH
13823: LD_VAR 0 2
13827: IN
13828: IFFALSE 13844
// SaveCharacters ( Cornel , 12a_Cornell ) else
13830: LD_EXP 31
13834: PPUSH
13835: LD_STRING 12a_Cornell
13837: PPUSH
13838: CALL_OW 38
13842: GO 13862
// if Cornel then
13844: LD_EXP 31
13848: IFFALSE 13862
// SaveCharacters ( Cornel , 12p_Cornell ) ;
13850: LD_EXP 31
13854: PPUSH
13855: LD_STRING 12p_Cornell
13857: PPUSH
13858: CALL_OW 38
// if Gary in tmp then
13862: LD_EXP 32
13866: PUSH
13867: LD_VAR 0 2
13871: IN
13872: IFFALSE 13888
// SaveCharacters ( Gary , 12a_Gary ) else
13874: LD_EXP 32
13878: PPUSH
13879: LD_STRING 12a_Gary
13881: PPUSH
13882: CALL_OW 38
13886: GO 13906
// if Gary then
13888: LD_EXP 32
13892: IFFALSE 13906
// SaveCharacters ( Gary , 12p_Gary ) ;
13894: LD_EXP 32
13898: PPUSH
13899: LD_STRING 12p_Gary
13901: PPUSH
13902: CALL_OW 38
// if Frank in tmp then
13906: LD_EXP 33
13910: PUSH
13911: LD_VAR 0 2
13915: IN
13916: IFFALSE 13930
// SaveCharacters ( Frank , 12a_Frank ) ;
13918: LD_EXP 33
13922: PPUSH
13923: LD_STRING 12a_Frank
13925: PPUSH
13926: CALL_OW 38
// if Kikuchi in tmp then
13930: LD_EXP 34
13934: PUSH
13935: LD_VAR 0 2
13939: IN
13940: IFFALSE 13956
// SaveCharacters ( Kikuchi , 12a_Kikuchi ) else
13942: LD_EXP 34
13946: PPUSH
13947: LD_STRING 12a_Kikuchi
13949: PPUSH
13950: CALL_OW 38
13954: GO 13974
// if Kikuchi then
13956: LD_EXP 34
13960: IFFALSE 13974
// SaveCharacters ( Kikuchi , 12p_Kikuchi ) ;
13962: LD_EXP 34
13966: PPUSH
13967: LD_STRING 12p_Kikuchi
13969: PPUSH
13970: CALL_OW 38
// if Simms in tmp then
13974: LD_EXP 35
13978: PUSH
13979: LD_VAR 0 2
13983: IN
13984: IFFALSE 13998
// SaveCharacters ( Simms , 12a_Simms ) ;
13986: LD_EXP 35
13990: PPUSH
13991: LD_STRING 12a_Simms
13993: PPUSH
13994: CALL_OW 38
// if Joan in tmp then
13998: LD_EXP 36
14002: PUSH
14003: LD_VAR 0 2
14007: IN
14008: IFFALSE 14022
// SaveCharacters ( Joan , 12a_Joan ) ;
14010: LD_EXP 36
14014: PPUSH
14015: LD_STRING 12a_Joan
14017: PPUSH
14018: CALL_OW 38
// if DeltaDoctor in tmp then
14022: LD_EXP 37
14026: PUSH
14027: LD_VAR 0 2
14031: IN
14032: IFFALSE 14046
// SaveCharacters ( DeltaDoctor , 12a_DeltaDoctor ) ;
14034: LD_EXP 37
14038: PPUSH
14039: LD_STRING 12a_DeltaDoctor
14041: PPUSH
14042: CALL_OW 38
// tmp := tmp diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor ] ;
14046: LD_ADDR_VAR 0 2
14050: PUSH
14051: LD_VAR 0 2
14055: PUSH
14056: LD_EXP 14
14060: PUSH
14061: LD_EXP 15
14065: PUSH
14066: LD_EXP 23
14070: PUSH
14071: LD_EXP 24
14075: PUSH
14076: LD_EXP 25
14080: PUSH
14081: LD_EXP 26
14085: PUSH
14086: LD_EXP 27
14090: PUSH
14091: LD_EXP 28
14095: PUSH
14096: LD_EXP 29
14100: PUSH
14101: LD_EXP 30
14105: PUSH
14106: LD_EXP 31
14110: PUSH
14111: LD_EXP 32
14115: PUSH
14116: LD_EXP 33
14120: PUSH
14121: LD_EXP 34
14125: PUSH
14126: LD_EXP 35
14130: PUSH
14131: LD_EXP 36
14135: PUSH
14136: LD_EXP 37
14140: PUSH
14141: EMPTY
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: LIST
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: DIFF
14160: ST_TO_ADDR
// if tmp then
14161: LD_VAR 0 2
14165: IFFALSE 14179
// SaveCharacters ( tmp , 12a_others ) ;
14167: LD_VAR 0 2
14171: PPUSH
14172: LD_STRING 12a_others
14174: PPUSH
14175: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_side , 1 ] , [ f_side , 4 ] ] ] ) diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Powell ] ;
14179: LD_ADDR_VAR 0 2
14183: PUSH
14184: LD_INT 21
14186: PUSH
14187: LD_INT 1
14189: PUSH
14190: EMPTY
14191: LIST
14192: LIST
14193: PUSH
14194: LD_INT 23
14196: PUSH
14197: LD_INT 1
14199: PUSH
14200: EMPTY
14201: LIST
14202: LIST
14203: PUSH
14204: LD_INT 2
14206: PUSH
14207: LD_INT 22
14209: PUSH
14210: LD_INT 1
14212: PUSH
14213: EMPTY
14214: LIST
14215: LIST
14216: PUSH
14217: LD_INT 22
14219: PUSH
14220: LD_INT 4
14222: PUSH
14223: EMPTY
14224: LIST
14225: LIST
14226: PUSH
14227: EMPTY
14228: LIST
14229: LIST
14230: LIST
14231: PUSH
14232: EMPTY
14233: LIST
14234: LIST
14235: LIST
14236: PPUSH
14237: CALL_OW 69
14241: PUSH
14242: LD_EXP 14
14246: PUSH
14247: LD_EXP 15
14251: PUSH
14252: LD_EXP 23
14256: PUSH
14257: LD_EXP 24
14261: PUSH
14262: LD_EXP 25
14266: PUSH
14267: LD_EXP 26
14271: PUSH
14272: LD_EXP 27
14276: PUSH
14277: LD_EXP 28
14281: PUSH
14282: LD_EXP 29
14286: PUSH
14287: LD_EXP 30
14291: PUSH
14292: LD_EXP 31
14296: PUSH
14297: LD_EXP 32
14301: PUSH
14302: LD_EXP 33
14306: PUSH
14307: LD_EXP 34
14311: PUSH
14312: LD_EXP 35
14316: PUSH
14317: LD_EXP 36
14321: PUSH
14322: LD_EXP 37
14326: PUSH
14327: LD_EXP 16
14331: PUSH
14332: EMPTY
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: DIFF
14352: ST_TO_ADDR
// if tmp then
14353: LD_VAR 0 2
14357: IFFALSE 14371
// SaveCharacters ( tmp , 12p_others ) ;
14359: LD_VAR 0 2
14363: PPUSH
14364: LD_STRING 12p_others
14366: PPUSH
14367: CALL_OW 38
// YouWin ;
14371: CALL_OW 103
// end ; end_of_file
14375: PPOPN 5
14377: END
// on SailEvent ( event ) do var tmp ;
14378: LD_INT 0
14380: PPUSH
// begin if event = 1 then
14381: LD_VAR 0 1
14385: PUSH
14386: LD_INT 1
14388: EQUAL
14389: IFFALSE 14462
// begin if not mobile_patrol then
14391: LD_EXP 17
14395: NOT
14396: IFFALSE 14400
// exit ;
14398: GO 14462
// tmp := mobile_patrol [ mobile_patrol ] ;
14400: LD_ADDR_VAR 0 2
14404: PUSH
14405: LD_EXP 17
14409: PUSH
14410: LD_EXP 17
14414: ARRAY
14415: ST_TO_ADDR
// mobile_patrol := Delete ( mobile_patrol , mobile_patrol ) ;
14416: LD_ADDR_EXP 17
14420: PUSH
14421: LD_EXP 17
14425: PPUSH
14426: LD_EXP 17
14430: PPUSH
14431: CALL_OW 3
14435: ST_TO_ADDR
// Patrol ( tmp , mobile_points [ mobile_patrol + 1 ] , [ ] ) ;
14436: LD_VAR 0 2
14440: PPUSH
14441: LD_EXP 18
14445: PUSH
14446: LD_EXP 17
14450: PUSH
14451: LD_INT 1
14453: PLUS
14454: ARRAY
14455: PPUSH
14456: EMPTY
14457: PPUSH
14458: CALL 6646 0 3
// end ; end ;
14462: PPOPN 2
14464: END
// on UnitDestroyed ( un ) do begin if un = JMM then
14465: LD_VAR 0 1
14469: PUSH
14470: LD_EXP 14
14474: EQUAL
14475: IFFALSE 14484
// YouLost ( JMM ) ;
14477: LD_STRING JMM
14479: PPUSH
14480: CALL_OW 104
// if GetSide ( un ) = 7 and GetWeapon ( un ) = us_cargo_bay then
14484: LD_VAR 0 1
14488: PPUSH
14489: CALL_OW 255
14493: PUSH
14494: LD_INT 7
14496: EQUAL
14497: PUSH
14498: LD_VAR 0 1
14502: PPUSH
14503: CALL_OW 264
14507: PUSH
14508: LD_INT 12
14510: EQUAL
14511: AND
14512: IFFALSE 14521
// YouLost ( Artifact ) ;
14514: LD_STRING Artifact
14516: PPUSH
14517: CALL_OW 104
// if ( GetSide ( un ) = 7 and GetType ( un ) = unit_human ) or un = Roth then
14521: LD_VAR 0 1
14525: PPUSH
14526: CALL_OW 255
14530: PUSH
14531: LD_INT 7
14533: EQUAL
14534: PUSH
14535: LD_VAR 0 1
14539: PPUSH
14540: CALL_OW 247
14544: PUSH
14545: LD_INT 1
14547: EQUAL
14548: AND
14549: PUSH
14550: LD_VAR 0 1
14554: PUSH
14555: LD_EXP 15
14559: EQUAL
14560: OR
14561: IFFALSE 14577
// team_kill_counter := team_kill_counter + 1 ;
14563: LD_ADDR_EXP 9
14567: PUSH
14568: LD_EXP 9
14572: PUSH
14573: LD_INT 1
14575: PLUS
14576: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetType ( un ) = unit_human then
14577: LD_VAR 0 1
14581: PPUSH
14582: CALL_OW 255
14586: PUSH
14587: LD_INT 1
14589: EQUAL
14590: PUSH
14591: LD_VAR 0 1
14595: PPUSH
14596: CALL_OW 247
14600: PUSH
14601: LD_INT 1
14603: EQUAL
14604: AND
14605: IFFALSE 14621
// friends_kill_counter := friends_kill_counter + 1 ;
14607: LD_ADDR_EXP 8
14611: PUSH
14612: LD_EXP 8
14616: PUSH
14617: LD_INT 1
14619: PLUS
14620: ST_TO_ADDR
// if GetSide ( un ) <> 1 then
14621: LD_VAR 0 1
14625: PPUSH
14626: CALL_OW 255
14630: PUSH
14631: LD_INT 1
14633: NONEQUAL
14634: IFFALSE 14638
// exit ;
14636: GO 14715
// if GetControl ( un ) = control_remote then
14638: LD_VAR 0 1
14642: PPUSH
14643: CALL_OW 263
14647: PUSH
14648: LD_INT 2
14650: EQUAL
14651: IFFALSE 14669
// defenders := defenders diff un ;
14653: LD_ADDR_EXP 20
14657: PUSH
14658: LD_EXP 20
14662: PUSH
14663: LD_VAR 0 1
14667: DIFF
14668: ST_TO_ADDR
// if not un in defenders then
14669: LD_VAR 0 1
14673: PUSH
14674: LD_EXP 20
14678: IN
14679: NOT
14680: IFFALSE 14715
// begin defcon := [ GetX ( un ) , GetY ( un ) ] ;
14682: LD_ADDR_EXP 21
14686: PUSH
14687: LD_VAR 0 1
14691: PPUSH
14692: CALL_OW 250
14696: PUSH
14697: LD_VAR 0 1
14701: PPUSH
14702: CALL_OW 251
14706: PUSH
14707: EMPTY
14708: LIST
14709: LIST
14710: ST_TO_ADDR
// Defend ;
14711: CALL 2772 0 0
// end ; end ;
14715: PPOPN 1
14717: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) <> 1 then
14718: LD_VAR 0 1
14722: PPUSH
14723: CALL_OW 255
14727: PUSH
14728: LD_INT 1
14730: NONEQUAL
14731: IFFALSE 14735
// exit ;
14733: GO 14759
// if GetControl ( veh ) = control_remote then
14735: LD_VAR 0 1
14739: PPUSH
14740: CALL_OW 263
14744: PUSH
14745: LD_INT 2
14747: EQUAL
14748: IFFALSE 14759
// Connect ( veh ) ;
14750: LD_VAR 0 1
14754: PPUSH
14755: CALL 40141 0 1
// end ;
14759: PPOPN 2
14761: END
// on UnitGoesToRed ( un ) do var i , veh ;
14762: LD_INT 0
14764: PPUSH
14765: PPUSH
// begin if GetSide ( un ) = 1 and GetControl ( un ) = control_remote then
14766: LD_VAR 0 1
14770: PPUSH
14771: CALL_OW 255
14775: PUSH
14776: LD_INT 1
14778: EQUAL
14779: PUSH
14780: LD_VAR 0 1
14784: PPUSH
14785: CALL_OW 263
14789: PUSH
14790: LD_INT 2
14792: EQUAL
14793: AND
14794: IFFALSE 14805
// ComUnlink ( un ) ;
14796: LD_VAR 0 1
14800: PPUSH
14801: CALL_OW 136
// if un = ambar0 then
14805: LD_VAR 0 1
14809: PUSH
14810: LD_INT 18
14812: EQUAL
14813: IFFALSE 14923
// begin uc_side := 1 ;
14815: LD_ADDR_OWVAR 20
14819: PUSH
14820: LD_INT 1
14822: ST_TO_ADDR
// uc_nation := 1 ;
14823: LD_ADDR_OWVAR 21
14827: PUSH
14828: LD_INT 1
14830: ST_TO_ADDR
// for i = 1 to 6 do
14831: LD_ADDR_VAR 0 2
14835: PUSH
14836: DOUBLE
14837: LD_INT 1
14839: DEC
14840: ST_TO_ADDR
14841: LD_INT 6
14843: PUSH
14844: FOR_TO
14845: IFFALSE 14921
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
14847: LD_INT 3
14849: PPUSH
14850: LD_INT 1
14852: PPUSH
14853: LD_INT 3
14855: PPUSH
14856: LD_INT 4
14858: PPUSH
14859: LD_INT 100
14861: PPUSH
14862: CALL 37086 0 5
// veh := CreateVehicle ;
14866: LD_ADDR_VAR 0 3
14870: PUSH
14871: CALL_OW 45
14875: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
14876: LD_VAR 0 3
14880: PPUSH
14881: LD_INT 1
14883: PPUSH
14884: CALL_OW 233
// PlaceUnitArea ( veh , west_spawn , false ) ;
14888: LD_VAR 0 3
14892: PPUSH
14893: LD_INT 25
14895: PPUSH
14896: LD_INT 0
14898: PPUSH
14899: CALL_OW 49
// defenders := defenders ^ veh ;
14903: LD_ADDR_EXP 20
14907: PUSH
14908: LD_EXP 20
14912: PUSH
14913: LD_VAR 0 3
14917: ADD
14918: ST_TO_ADDR
// end ;
14919: GO 14844
14921: POP
14922: POP
// end ; end ;
14923: PPOPN 3
14925: END
// on EnterBuilding ( building , unit ) do begin if unit = Powell then
14926: LD_VAR 0 2
14930: PUSH
14931: LD_EXP 16
14935: EQUAL
14936: IFFALSE 14947
// RemoveUnit ( Powell ) ;
14938: LD_EXP 16
14942: PPUSH
14943: CALL_OW 64
// end ;
14947: PPOPN 2
14949: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
14950: LD_VAR 0 1
14954: PPUSH
14955: CALL 28379 0 1
// end ; end_of_file
14959: PPOPN 1
14961: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
14962: LD_INT 0
14964: PPUSH
// ar_miner := 81 ;
14965: LD_ADDR_EXP 45
14969: PUSH
14970: LD_INT 81
14972: ST_TO_ADDR
// ar_crane := 88 ;
14973: LD_ADDR_EXP 44
14977: PUSH
14978: LD_INT 88
14980: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
14981: LD_ADDR_EXP 39
14985: PUSH
14986: LD_INT 89
14988: ST_TO_ADDR
// us_hack := 99 ;
14989: LD_ADDR_EXP 40
14993: PUSH
14994: LD_INT 99
14996: ST_TO_ADDR
// us_artillery := 97 ;
14997: LD_ADDR_EXP 41
15001: PUSH
15002: LD_INT 97
15004: ST_TO_ADDR
// ar_bio_bomb := 91 ;
15005: LD_ADDR_EXP 42
15009: PUSH
15010: LD_INT 91
15012: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
15013: LD_ADDR_EXP 43
15017: PUSH
15018: LD_INT 92
15020: ST_TO_ADDR
// ru_radar := 98 ;
15021: LD_ADDR_EXP 38
15025: PUSH
15026: LD_INT 98
15028: ST_TO_ADDR
// tech_Artillery := 80 ;
15029: LD_ADDR_EXP 46
15033: PUSH
15034: LD_INT 80
15036: ST_TO_ADDR
// tech_RadMat := 81 ;
15037: LD_ADDR_EXP 47
15041: PUSH
15042: LD_INT 81
15044: ST_TO_ADDR
// tech_BasicTools := 82 ;
15045: LD_ADDR_EXP 48
15049: PUSH
15050: LD_INT 82
15052: ST_TO_ADDR
// tech_Cargo := 83 ;
15053: LD_ADDR_EXP 49
15057: PUSH
15058: LD_INT 83
15060: ST_TO_ADDR
// tech_Track := 84 ;
15061: LD_ADDR_EXP 50
15065: PUSH
15066: LD_INT 84
15068: ST_TO_ADDR
// tech_Crane := 85 ;
15069: LD_ADDR_EXP 51
15073: PUSH
15074: LD_INT 85
15076: ST_TO_ADDR
// tech_Bulldozer := 86 ;
15077: LD_ADDR_EXP 52
15081: PUSH
15082: LD_INT 86
15084: ST_TO_ADDR
// tech_Hovercraft := 87 ;
15085: LD_ADDR_EXP 53
15089: PUSH
15090: LD_INT 87
15092: ST_TO_ADDR
// end ;
15093: LD_VAR 0 1
15097: RET
// every 1 do
15098: GO 15100
15100: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
15101: CALL 14962 0 0
15105: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
15106: LD_VAR 0 2
15110: PUSH
15111: LD_INT 100
15113: EQUAL
15114: IFFALSE 16063
// begin if not StreamModeActive then
15116: LD_EXP 54
15120: NOT
15121: IFFALSE 15131
// StreamModeActive := true ;
15123: LD_ADDR_EXP 54
15127: PUSH
15128: LD_INT 1
15130: ST_TO_ADDR
// if p3 = 0 then
15131: LD_VAR 0 3
15135: PUSH
15136: LD_INT 0
15138: EQUAL
15139: IFFALSE 15145
// InitStreamMode ;
15141: CALL 16221 0 0
// if p3 = 1 then
15145: LD_VAR 0 3
15149: PUSH
15150: LD_INT 1
15152: EQUAL
15153: IFFALSE 15163
// sRocket := true ;
15155: LD_ADDR_EXP 59
15159: PUSH
15160: LD_INT 1
15162: ST_TO_ADDR
// if p3 = 2 then
15163: LD_VAR 0 3
15167: PUSH
15168: LD_INT 2
15170: EQUAL
15171: IFFALSE 15181
// sSpeed := true ;
15173: LD_ADDR_EXP 58
15177: PUSH
15178: LD_INT 1
15180: ST_TO_ADDR
// if p3 = 3 then
15181: LD_VAR 0 3
15185: PUSH
15186: LD_INT 3
15188: EQUAL
15189: IFFALSE 15199
// sEngine := true ;
15191: LD_ADDR_EXP 60
15195: PUSH
15196: LD_INT 1
15198: ST_TO_ADDR
// if p3 = 4 then
15199: LD_VAR 0 3
15203: PUSH
15204: LD_INT 4
15206: EQUAL
15207: IFFALSE 15217
// sSpec := true ;
15209: LD_ADDR_EXP 57
15213: PUSH
15214: LD_INT 1
15216: ST_TO_ADDR
// if p3 = 5 then
15217: LD_VAR 0 3
15221: PUSH
15222: LD_INT 5
15224: EQUAL
15225: IFFALSE 15235
// sLevel := true ;
15227: LD_ADDR_EXP 61
15231: PUSH
15232: LD_INT 1
15234: ST_TO_ADDR
// if p3 = 6 then
15235: LD_VAR 0 3
15239: PUSH
15240: LD_INT 6
15242: EQUAL
15243: IFFALSE 15253
// sArmoury := true ;
15245: LD_ADDR_EXP 62
15249: PUSH
15250: LD_INT 1
15252: ST_TO_ADDR
// if p3 = 7 then
15253: LD_VAR 0 3
15257: PUSH
15258: LD_INT 7
15260: EQUAL
15261: IFFALSE 15271
// sRadar := true ;
15263: LD_ADDR_EXP 63
15267: PUSH
15268: LD_INT 1
15270: ST_TO_ADDR
// if p3 = 8 then
15271: LD_VAR 0 3
15275: PUSH
15276: LD_INT 8
15278: EQUAL
15279: IFFALSE 15289
// sBunker := true ;
15281: LD_ADDR_EXP 64
15285: PUSH
15286: LD_INT 1
15288: ST_TO_ADDR
// if p3 = 9 then
15289: LD_VAR 0 3
15293: PUSH
15294: LD_INT 9
15296: EQUAL
15297: IFFALSE 15307
// sHack := true ;
15299: LD_ADDR_EXP 65
15303: PUSH
15304: LD_INT 1
15306: ST_TO_ADDR
// if p3 = 10 then
15307: LD_VAR 0 3
15311: PUSH
15312: LD_INT 10
15314: EQUAL
15315: IFFALSE 15325
// sFire := true ;
15317: LD_ADDR_EXP 66
15321: PUSH
15322: LD_INT 1
15324: ST_TO_ADDR
// if p3 = 11 then
15325: LD_VAR 0 3
15329: PUSH
15330: LD_INT 11
15332: EQUAL
15333: IFFALSE 15343
// sRefresh := true ;
15335: LD_ADDR_EXP 67
15339: PUSH
15340: LD_INT 1
15342: ST_TO_ADDR
// if p3 = 12 then
15343: LD_VAR 0 3
15347: PUSH
15348: LD_INT 12
15350: EQUAL
15351: IFFALSE 15361
// sExp := true ;
15353: LD_ADDR_EXP 68
15357: PUSH
15358: LD_INT 1
15360: ST_TO_ADDR
// if p3 = 13 then
15361: LD_VAR 0 3
15365: PUSH
15366: LD_INT 13
15368: EQUAL
15369: IFFALSE 15379
// sDepot := true ;
15371: LD_ADDR_EXP 69
15375: PUSH
15376: LD_INT 1
15378: ST_TO_ADDR
// if p3 = 14 then
15379: LD_VAR 0 3
15383: PUSH
15384: LD_INT 14
15386: EQUAL
15387: IFFALSE 15397
// sFlag := true ;
15389: LD_ADDR_EXP 70
15393: PUSH
15394: LD_INT 1
15396: ST_TO_ADDR
// if p3 = 15 then
15397: LD_VAR 0 3
15401: PUSH
15402: LD_INT 15
15404: EQUAL
15405: IFFALSE 15415
// sKamikadze := true ;
15407: LD_ADDR_EXP 78
15411: PUSH
15412: LD_INT 1
15414: ST_TO_ADDR
// if p3 = 16 then
15415: LD_VAR 0 3
15419: PUSH
15420: LD_INT 16
15422: EQUAL
15423: IFFALSE 15433
// sTroll := true ;
15425: LD_ADDR_EXP 79
15429: PUSH
15430: LD_INT 1
15432: ST_TO_ADDR
// if p3 = 17 then
15433: LD_VAR 0 3
15437: PUSH
15438: LD_INT 17
15440: EQUAL
15441: IFFALSE 15451
// sSlow := true ;
15443: LD_ADDR_EXP 80
15447: PUSH
15448: LD_INT 1
15450: ST_TO_ADDR
// if p3 = 18 then
15451: LD_VAR 0 3
15455: PUSH
15456: LD_INT 18
15458: EQUAL
15459: IFFALSE 15469
// sLack := true ;
15461: LD_ADDR_EXP 81
15465: PUSH
15466: LD_INT 1
15468: ST_TO_ADDR
// if p3 = 19 then
15469: LD_VAR 0 3
15473: PUSH
15474: LD_INT 19
15476: EQUAL
15477: IFFALSE 15487
// sTank := true ;
15479: LD_ADDR_EXP 83
15483: PUSH
15484: LD_INT 1
15486: ST_TO_ADDR
// if p3 = 20 then
15487: LD_VAR 0 3
15491: PUSH
15492: LD_INT 20
15494: EQUAL
15495: IFFALSE 15505
// sRemote := true ;
15497: LD_ADDR_EXP 84
15501: PUSH
15502: LD_INT 1
15504: ST_TO_ADDR
// if p3 = 21 then
15505: LD_VAR 0 3
15509: PUSH
15510: LD_INT 21
15512: EQUAL
15513: IFFALSE 15523
// sPowell := true ;
15515: LD_ADDR_EXP 85
15519: PUSH
15520: LD_INT 1
15522: ST_TO_ADDR
// if p3 = 22 then
15523: LD_VAR 0 3
15527: PUSH
15528: LD_INT 22
15530: EQUAL
15531: IFFALSE 15541
// sTeleport := true ;
15533: LD_ADDR_EXP 88
15537: PUSH
15538: LD_INT 1
15540: ST_TO_ADDR
// if p3 = 23 then
15541: LD_VAR 0 3
15545: PUSH
15546: LD_INT 23
15548: EQUAL
15549: IFFALSE 15559
// sOilTower := true ;
15551: LD_ADDR_EXP 90
15555: PUSH
15556: LD_INT 1
15558: ST_TO_ADDR
// if p3 = 24 then
15559: LD_VAR 0 3
15563: PUSH
15564: LD_INT 24
15566: EQUAL
15567: IFFALSE 15577
// sShovel := true ;
15569: LD_ADDR_EXP 91
15573: PUSH
15574: LD_INT 1
15576: ST_TO_ADDR
// if p3 = 25 then
15577: LD_VAR 0 3
15581: PUSH
15582: LD_INT 25
15584: EQUAL
15585: IFFALSE 15595
// sSheik := true ;
15587: LD_ADDR_EXP 92
15591: PUSH
15592: LD_INT 1
15594: ST_TO_ADDR
// if p3 = 26 then
15595: LD_VAR 0 3
15599: PUSH
15600: LD_INT 26
15602: EQUAL
15603: IFFALSE 15613
// sEarthquake := true ;
15605: LD_ADDR_EXP 94
15609: PUSH
15610: LD_INT 1
15612: ST_TO_ADDR
// if p3 = 27 then
15613: LD_VAR 0 3
15617: PUSH
15618: LD_INT 27
15620: EQUAL
15621: IFFALSE 15631
// sAI := true ;
15623: LD_ADDR_EXP 95
15627: PUSH
15628: LD_INT 1
15630: ST_TO_ADDR
// if p3 = 28 then
15631: LD_VAR 0 3
15635: PUSH
15636: LD_INT 28
15638: EQUAL
15639: IFFALSE 15649
// sCargo := true ;
15641: LD_ADDR_EXP 98
15645: PUSH
15646: LD_INT 1
15648: ST_TO_ADDR
// if p3 = 29 then
15649: LD_VAR 0 3
15653: PUSH
15654: LD_INT 29
15656: EQUAL
15657: IFFALSE 15667
// sDLaser := true ;
15659: LD_ADDR_EXP 99
15663: PUSH
15664: LD_INT 1
15666: ST_TO_ADDR
// if p3 = 30 then
15667: LD_VAR 0 3
15671: PUSH
15672: LD_INT 30
15674: EQUAL
15675: IFFALSE 15685
// sExchange := true ;
15677: LD_ADDR_EXP 100
15681: PUSH
15682: LD_INT 1
15684: ST_TO_ADDR
// if p3 = 31 then
15685: LD_VAR 0 3
15689: PUSH
15690: LD_INT 31
15692: EQUAL
15693: IFFALSE 15703
// sFac := true ;
15695: LD_ADDR_EXP 101
15699: PUSH
15700: LD_INT 1
15702: ST_TO_ADDR
// if p3 = 32 then
15703: LD_VAR 0 3
15707: PUSH
15708: LD_INT 32
15710: EQUAL
15711: IFFALSE 15721
// sPower := true ;
15713: LD_ADDR_EXP 102
15717: PUSH
15718: LD_INT 1
15720: ST_TO_ADDR
// if p3 = 33 then
15721: LD_VAR 0 3
15725: PUSH
15726: LD_INT 33
15728: EQUAL
15729: IFFALSE 15739
// sRandom := true ;
15731: LD_ADDR_EXP 103
15735: PUSH
15736: LD_INT 1
15738: ST_TO_ADDR
// if p3 = 34 then
15739: LD_VAR 0 3
15743: PUSH
15744: LD_INT 34
15746: EQUAL
15747: IFFALSE 15757
// sShield := true ;
15749: LD_ADDR_EXP 104
15753: PUSH
15754: LD_INT 1
15756: ST_TO_ADDR
// if p3 = 35 then
15757: LD_VAR 0 3
15761: PUSH
15762: LD_INT 35
15764: EQUAL
15765: IFFALSE 15775
// sTime := true ;
15767: LD_ADDR_EXP 105
15771: PUSH
15772: LD_INT 1
15774: ST_TO_ADDR
// if p3 = 36 then
15775: LD_VAR 0 3
15779: PUSH
15780: LD_INT 36
15782: EQUAL
15783: IFFALSE 15793
// sTools := true ;
15785: LD_ADDR_EXP 106
15789: PUSH
15790: LD_INT 1
15792: ST_TO_ADDR
// if p3 = 101 then
15793: LD_VAR 0 3
15797: PUSH
15798: LD_INT 101
15800: EQUAL
15801: IFFALSE 15811
// sSold := true ;
15803: LD_ADDR_EXP 71
15807: PUSH
15808: LD_INT 1
15810: ST_TO_ADDR
// if p3 = 102 then
15811: LD_VAR 0 3
15815: PUSH
15816: LD_INT 102
15818: EQUAL
15819: IFFALSE 15829
// sDiff := true ;
15821: LD_ADDR_EXP 72
15825: PUSH
15826: LD_INT 1
15828: ST_TO_ADDR
// if p3 = 103 then
15829: LD_VAR 0 3
15833: PUSH
15834: LD_INT 103
15836: EQUAL
15837: IFFALSE 15847
// sFog := true ;
15839: LD_ADDR_EXP 75
15843: PUSH
15844: LD_INT 1
15846: ST_TO_ADDR
// if p3 = 104 then
15847: LD_VAR 0 3
15851: PUSH
15852: LD_INT 104
15854: EQUAL
15855: IFFALSE 15865
// sReset := true ;
15857: LD_ADDR_EXP 76
15861: PUSH
15862: LD_INT 1
15864: ST_TO_ADDR
// if p3 = 105 then
15865: LD_VAR 0 3
15869: PUSH
15870: LD_INT 105
15872: EQUAL
15873: IFFALSE 15883
// sSun := true ;
15875: LD_ADDR_EXP 77
15879: PUSH
15880: LD_INT 1
15882: ST_TO_ADDR
// if p3 = 106 then
15883: LD_VAR 0 3
15887: PUSH
15888: LD_INT 106
15890: EQUAL
15891: IFFALSE 15901
// sTiger := true ;
15893: LD_ADDR_EXP 73
15897: PUSH
15898: LD_INT 1
15900: ST_TO_ADDR
// if p3 = 107 then
15901: LD_VAR 0 3
15905: PUSH
15906: LD_INT 107
15908: EQUAL
15909: IFFALSE 15919
// sBomb := true ;
15911: LD_ADDR_EXP 74
15915: PUSH
15916: LD_INT 1
15918: ST_TO_ADDR
// if p3 = 108 then
15919: LD_VAR 0 3
15923: PUSH
15924: LD_INT 108
15926: EQUAL
15927: IFFALSE 15937
// sWound := true ;
15929: LD_ADDR_EXP 82
15933: PUSH
15934: LD_INT 1
15936: ST_TO_ADDR
// if p3 = 109 then
15937: LD_VAR 0 3
15941: PUSH
15942: LD_INT 109
15944: EQUAL
15945: IFFALSE 15955
// sBetray := true ;
15947: LD_ADDR_EXP 86
15951: PUSH
15952: LD_INT 1
15954: ST_TO_ADDR
// if p3 = 110 then
15955: LD_VAR 0 3
15959: PUSH
15960: LD_INT 110
15962: EQUAL
15963: IFFALSE 15973
// sContamin := true ;
15965: LD_ADDR_EXP 87
15969: PUSH
15970: LD_INT 1
15972: ST_TO_ADDR
// if p3 = 111 then
15973: LD_VAR 0 3
15977: PUSH
15978: LD_INT 111
15980: EQUAL
15981: IFFALSE 15991
// sOil := true ;
15983: LD_ADDR_EXP 89
15987: PUSH
15988: LD_INT 1
15990: ST_TO_ADDR
// if p3 = 112 then
15991: LD_VAR 0 3
15995: PUSH
15996: LD_INT 112
15998: EQUAL
15999: IFFALSE 16009
// sStu := true ;
16001: LD_ADDR_EXP 93
16005: PUSH
16006: LD_INT 1
16008: ST_TO_ADDR
// if p3 = 113 then
16009: LD_VAR 0 3
16013: PUSH
16014: LD_INT 113
16016: EQUAL
16017: IFFALSE 16027
// sBazooka := true ;
16019: LD_ADDR_EXP 96
16023: PUSH
16024: LD_INT 1
16026: ST_TO_ADDR
// if p3 = 114 then
16027: LD_VAR 0 3
16031: PUSH
16032: LD_INT 114
16034: EQUAL
16035: IFFALSE 16045
// sMortar := true ;
16037: LD_ADDR_EXP 97
16041: PUSH
16042: LD_INT 1
16044: ST_TO_ADDR
// if p3 = 115 then
16045: LD_VAR 0 3
16049: PUSH
16050: LD_INT 115
16052: EQUAL
16053: IFFALSE 16063
// sRanger := true ;
16055: LD_ADDR_EXP 107
16059: PUSH
16060: LD_INT 1
16062: ST_TO_ADDR
// end ; if p2 = 101 then
16063: LD_VAR 0 2
16067: PUSH
16068: LD_INT 101
16070: EQUAL
16071: IFFALSE 16199
// begin case p3 of 1 :
16073: LD_VAR 0 3
16077: PUSH
16078: LD_INT 1
16080: DOUBLE
16081: EQUAL
16082: IFTRUE 16086
16084: GO 16093
16086: POP
// hHackUnlimitedResources ; 2 :
16087: CALL 27234 0 0
16091: GO 16199
16093: LD_INT 2
16095: DOUBLE
16096: EQUAL
16097: IFTRUE 16101
16099: GO 16108
16101: POP
// hHackSetLevel10 ; 3 :
16102: CALL 27367 0 0
16106: GO 16199
16108: LD_INT 3
16110: DOUBLE
16111: EQUAL
16112: IFTRUE 16116
16114: GO 16123
16116: POP
// hHackSetLevel10YourUnits ; 4 :
16117: CALL 27452 0 0
16121: GO 16199
16123: LD_INT 4
16125: DOUBLE
16126: EQUAL
16127: IFTRUE 16131
16129: GO 16138
16131: POP
// hHackInvincible ; 5 :
16132: CALL 27900 0 0
16136: GO 16199
16138: LD_INT 5
16140: DOUBLE
16141: EQUAL
16142: IFTRUE 16146
16144: GO 16153
16146: POP
// hHackInvisible ; 6 :
16147: CALL 28011 0 0
16151: GO 16199
16153: LD_INT 6
16155: DOUBLE
16156: EQUAL
16157: IFTRUE 16161
16159: GO 16168
16161: POP
// hHackChangeYourSide ; 7 :
16162: CALL 28068 0 0
16166: GO 16199
16168: LD_INT 7
16170: DOUBLE
16171: EQUAL
16172: IFTRUE 16176
16174: GO 16183
16176: POP
// hHackChangeUnitSide ; 8 :
16177: CALL 28110 0 0
16181: GO 16199
16183: LD_INT 8
16185: DOUBLE
16186: EQUAL
16187: IFTRUE 16191
16189: GO 16198
16191: POP
// hHackFog ; end ;
16192: CALL 28211 0 0
16196: GO 16199
16198: POP
// end ; end ;
16199: PPOPN 6
16201: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
16202: GO 16204
16204: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
16205: LD_STRING initStreamRollete();
16207: PPUSH
16208: CALL_OW 559
// InitStreamMode ;
16212: CALL 16221 0 0
// DefineStreamItems ( ) ;
16216: CALL 16661 0 0
// end ;
16220: END
// function InitStreamMode ; begin
16221: LD_INT 0
16223: PPUSH
// streamModeActive := false ;
16224: LD_ADDR_EXP 54
16228: PUSH
16229: LD_INT 0
16231: ST_TO_ADDR
// normalCounter := 36 ;
16232: LD_ADDR_EXP 55
16236: PUSH
16237: LD_INT 36
16239: ST_TO_ADDR
// hardcoreCounter := 16 ;
16240: LD_ADDR_EXP 56
16244: PUSH
16245: LD_INT 16
16247: ST_TO_ADDR
// sRocket := false ;
16248: LD_ADDR_EXP 59
16252: PUSH
16253: LD_INT 0
16255: ST_TO_ADDR
// sSpeed := false ;
16256: LD_ADDR_EXP 58
16260: PUSH
16261: LD_INT 0
16263: ST_TO_ADDR
// sEngine := false ;
16264: LD_ADDR_EXP 60
16268: PUSH
16269: LD_INT 0
16271: ST_TO_ADDR
// sSpec := false ;
16272: LD_ADDR_EXP 57
16276: PUSH
16277: LD_INT 0
16279: ST_TO_ADDR
// sLevel := false ;
16280: LD_ADDR_EXP 61
16284: PUSH
16285: LD_INT 0
16287: ST_TO_ADDR
// sArmoury := false ;
16288: LD_ADDR_EXP 62
16292: PUSH
16293: LD_INT 0
16295: ST_TO_ADDR
// sRadar := false ;
16296: LD_ADDR_EXP 63
16300: PUSH
16301: LD_INT 0
16303: ST_TO_ADDR
// sBunker := false ;
16304: LD_ADDR_EXP 64
16308: PUSH
16309: LD_INT 0
16311: ST_TO_ADDR
// sHack := false ;
16312: LD_ADDR_EXP 65
16316: PUSH
16317: LD_INT 0
16319: ST_TO_ADDR
// sFire := false ;
16320: LD_ADDR_EXP 66
16324: PUSH
16325: LD_INT 0
16327: ST_TO_ADDR
// sRefresh := false ;
16328: LD_ADDR_EXP 67
16332: PUSH
16333: LD_INT 0
16335: ST_TO_ADDR
// sExp := false ;
16336: LD_ADDR_EXP 68
16340: PUSH
16341: LD_INT 0
16343: ST_TO_ADDR
// sDepot := false ;
16344: LD_ADDR_EXP 69
16348: PUSH
16349: LD_INT 0
16351: ST_TO_ADDR
// sFlag := false ;
16352: LD_ADDR_EXP 70
16356: PUSH
16357: LD_INT 0
16359: ST_TO_ADDR
// sKamikadze := false ;
16360: LD_ADDR_EXP 78
16364: PUSH
16365: LD_INT 0
16367: ST_TO_ADDR
// sTroll := false ;
16368: LD_ADDR_EXP 79
16372: PUSH
16373: LD_INT 0
16375: ST_TO_ADDR
// sSlow := false ;
16376: LD_ADDR_EXP 80
16380: PUSH
16381: LD_INT 0
16383: ST_TO_ADDR
// sLack := false ;
16384: LD_ADDR_EXP 81
16388: PUSH
16389: LD_INT 0
16391: ST_TO_ADDR
// sTank := false ;
16392: LD_ADDR_EXP 83
16396: PUSH
16397: LD_INT 0
16399: ST_TO_ADDR
// sRemote := false ;
16400: LD_ADDR_EXP 84
16404: PUSH
16405: LD_INT 0
16407: ST_TO_ADDR
// sPowell := false ;
16408: LD_ADDR_EXP 85
16412: PUSH
16413: LD_INT 0
16415: ST_TO_ADDR
// sTeleport := false ;
16416: LD_ADDR_EXP 88
16420: PUSH
16421: LD_INT 0
16423: ST_TO_ADDR
// sOilTower := false ;
16424: LD_ADDR_EXP 90
16428: PUSH
16429: LD_INT 0
16431: ST_TO_ADDR
// sShovel := false ;
16432: LD_ADDR_EXP 91
16436: PUSH
16437: LD_INT 0
16439: ST_TO_ADDR
// sSheik := false ;
16440: LD_ADDR_EXP 92
16444: PUSH
16445: LD_INT 0
16447: ST_TO_ADDR
// sEarthquake := false ;
16448: LD_ADDR_EXP 94
16452: PUSH
16453: LD_INT 0
16455: ST_TO_ADDR
// sAI := false ;
16456: LD_ADDR_EXP 95
16460: PUSH
16461: LD_INT 0
16463: ST_TO_ADDR
// sCargo := false ;
16464: LD_ADDR_EXP 98
16468: PUSH
16469: LD_INT 0
16471: ST_TO_ADDR
// sDLaser := false ;
16472: LD_ADDR_EXP 99
16476: PUSH
16477: LD_INT 0
16479: ST_TO_ADDR
// sExchange := false ;
16480: LD_ADDR_EXP 100
16484: PUSH
16485: LD_INT 0
16487: ST_TO_ADDR
// sFac := false ;
16488: LD_ADDR_EXP 101
16492: PUSH
16493: LD_INT 0
16495: ST_TO_ADDR
// sPower := false ;
16496: LD_ADDR_EXP 102
16500: PUSH
16501: LD_INT 0
16503: ST_TO_ADDR
// sRandom := false ;
16504: LD_ADDR_EXP 103
16508: PUSH
16509: LD_INT 0
16511: ST_TO_ADDR
// sShield := false ;
16512: LD_ADDR_EXP 104
16516: PUSH
16517: LD_INT 0
16519: ST_TO_ADDR
// sTime := false ;
16520: LD_ADDR_EXP 105
16524: PUSH
16525: LD_INT 0
16527: ST_TO_ADDR
// sTools := false ;
16528: LD_ADDR_EXP 106
16532: PUSH
16533: LD_INT 0
16535: ST_TO_ADDR
// sSold := false ;
16536: LD_ADDR_EXP 71
16540: PUSH
16541: LD_INT 0
16543: ST_TO_ADDR
// sDiff := false ;
16544: LD_ADDR_EXP 72
16548: PUSH
16549: LD_INT 0
16551: ST_TO_ADDR
// sFog := false ;
16552: LD_ADDR_EXP 75
16556: PUSH
16557: LD_INT 0
16559: ST_TO_ADDR
// sReset := false ;
16560: LD_ADDR_EXP 76
16564: PUSH
16565: LD_INT 0
16567: ST_TO_ADDR
// sSun := false ;
16568: LD_ADDR_EXP 77
16572: PUSH
16573: LD_INT 0
16575: ST_TO_ADDR
// sTiger := false ;
16576: LD_ADDR_EXP 73
16580: PUSH
16581: LD_INT 0
16583: ST_TO_ADDR
// sBomb := false ;
16584: LD_ADDR_EXP 74
16588: PUSH
16589: LD_INT 0
16591: ST_TO_ADDR
// sWound := false ;
16592: LD_ADDR_EXP 82
16596: PUSH
16597: LD_INT 0
16599: ST_TO_ADDR
// sBetray := false ;
16600: LD_ADDR_EXP 86
16604: PUSH
16605: LD_INT 0
16607: ST_TO_ADDR
// sContamin := false ;
16608: LD_ADDR_EXP 87
16612: PUSH
16613: LD_INT 0
16615: ST_TO_ADDR
// sOil := false ;
16616: LD_ADDR_EXP 89
16620: PUSH
16621: LD_INT 0
16623: ST_TO_ADDR
// sStu := false ;
16624: LD_ADDR_EXP 93
16628: PUSH
16629: LD_INT 0
16631: ST_TO_ADDR
// sBazooka := false ;
16632: LD_ADDR_EXP 96
16636: PUSH
16637: LD_INT 0
16639: ST_TO_ADDR
// sMortar := false ;
16640: LD_ADDR_EXP 97
16644: PUSH
16645: LD_INT 0
16647: ST_TO_ADDR
// sRanger := false ;
16648: LD_ADDR_EXP 107
16652: PUSH
16653: LD_INT 0
16655: ST_TO_ADDR
// end ;
16656: LD_VAR 0 1
16660: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
16661: LD_INT 0
16663: PPUSH
16664: PPUSH
16665: PPUSH
16666: PPUSH
16667: PPUSH
// result := [ ] ;
16668: LD_ADDR_VAR 0 1
16672: PUSH
16673: EMPTY
16674: ST_TO_ADDR
// if campaign_id = 1 then
16675: LD_OWVAR 69
16679: PUSH
16680: LD_INT 1
16682: EQUAL
16683: IFFALSE 19621
// begin case mission_number of 1 :
16685: LD_OWVAR 70
16689: PUSH
16690: LD_INT 1
16692: DOUBLE
16693: EQUAL
16694: IFTRUE 16698
16696: GO 16762
16698: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
16699: LD_ADDR_VAR 0 1
16703: PUSH
16704: LD_INT 2
16706: PUSH
16707: LD_INT 4
16709: PUSH
16710: LD_INT 11
16712: PUSH
16713: LD_INT 12
16715: PUSH
16716: LD_INT 15
16718: PUSH
16719: LD_INT 16
16721: PUSH
16722: LD_INT 22
16724: PUSH
16725: LD_INT 23
16727: PUSH
16728: LD_INT 26
16730: PUSH
16731: EMPTY
16732: LIST
16733: LIST
16734: LIST
16735: LIST
16736: LIST
16737: LIST
16738: LIST
16739: LIST
16740: LIST
16741: PUSH
16742: LD_INT 101
16744: PUSH
16745: LD_INT 102
16747: PUSH
16748: LD_INT 106
16750: PUSH
16751: EMPTY
16752: LIST
16753: LIST
16754: LIST
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: ST_TO_ADDR
16760: GO 19619
16762: LD_INT 2
16764: DOUBLE
16765: EQUAL
16766: IFTRUE 16770
16768: GO 16842
16770: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
16771: LD_ADDR_VAR 0 1
16775: PUSH
16776: LD_INT 2
16778: PUSH
16779: LD_INT 4
16781: PUSH
16782: LD_INT 11
16784: PUSH
16785: LD_INT 12
16787: PUSH
16788: LD_INT 15
16790: PUSH
16791: LD_INT 16
16793: PUSH
16794: LD_INT 22
16796: PUSH
16797: LD_INT 23
16799: PUSH
16800: LD_INT 26
16802: PUSH
16803: EMPTY
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: LIST
16812: LIST
16813: PUSH
16814: LD_INT 101
16816: PUSH
16817: LD_INT 102
16819: PUSH
16820: LD_INT 105
16822: PUSH
16823: LD_INT 106
16825: PUSH
16826: LD_INT 108
16828: PUSH
16829: EMPTY
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: LIST
16835: PUSH
16836: EMPTY
16837: LIST
16838: LIST
16839: ST_TO_ADDR
16840: GO 19619
16842: LD_INT 3
16844: DOUBLE
16845: EQUAL
16846: IFTRUE 16850
16848: GO 16926
16850: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
16851: LD_ADDR_VAR 0 1
16855: PUSH
16856: LD_INT 2
16858: PUSH
16859: LD_INT 4
16861: PUSH
16862: LD_INT 5
16864: PUSH
16865: LD_INT 11
16867: PUSH
16868: LD_INT 12
16870: PUSH
16871: LD_INT 15
16873: PUSH
16874: LD_INT 16
16876: PUSH
16877: LD_INT 22
16879: PUSH
16880: LD_INT 26
16882: PUSH
16883: LD_INT 36
16885: PUSH
16886: EMPTY
16887: LIST
16888: LIST
16889: LIST
16890: LIST
16891: LIST
16892: LIST
16893: LIST
16894: LIST
16895: LIST
16896: LIST
16897: PUSH
16898: LD_INT 101
16900: PUSH
16901: LD_INT 102
16903: PUSH
16904: LD_INT 105
16906: PUSH
16907: LD_INT 106
16909: PUSH
16910: LD_INT 108
16912: PUSH
16913: EMPTY
16914: LIST
16915: LIST
16916: LIST
16917: LIST
16918: LIST
16919: PUSH
16920: EMPTY
16921: LIST
16922: LIST
16923: ST_TO_ADDR
16924: GO 19619
16926: LD_INT 4
16928: DOUBLE
16929: EQUAL
16930: IFTRUE 16934
16932: GO 17018
16934: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
16935: LD_ADDR_VAR 0 1
16939: PUSH
16940: LD_INT 2
16942: PUSH
16943: LD_INT 4
16945: PUSH
16946: LD_INT 5
16948: PUSH
16949: LD_INT 8
16951: PUSH
16952: LD_INT 11
16954: PUSH
16955: LD_INT 12
16957: PUSH
16958: LD_INT 15
16960: PUSH
16961: LD_INT 16
16963: PUSH
16964: LD_INT 22
16966: PUSH
16967: LD_INT 23
16969: PUSH
16970: LD_INT 26
16972: PUSH
16973: LD_INT 36
16975: PUSH
16976: EMPTY
16977: LIST
16978: LIST
16979: LIST
16980: LIST
16981: LIST
16982: LIST
16983: LIST
16984: LIST
16985: LIST
16986: LIST
16987: LIST
16988: LIST
16989: PUSH
16990: LD_INT 101
16992: PUSH
16993: LD_INT 102
16995: PUSH
16996: LD_INT 105
16998: PUSH
16999: LD_INT 106
17001: PUSH
17002: LD_INT 108
17004: PUSH
17005: EMPTY
17006: LIST
17007: LIST
17008: LIST
17009: LIST
17010: LIST
17011: PUSH
17012: EMPTY
17013: LIST
17014: LIST
17015: ST_TO_ADDR
17016: GO 19619
17018: LD_INT 5
17020: DOUBLE
17021: EQUAL
17022: IFTRUE 17026
17024: GO 17126
17026: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
17027: LD_ADDR_VAR 0 1
17031: PUSH
17032: LD_INT 2
17034: PUSH
17035: LD_INT 4
17037: PUSH
17038: LD_INT 5
17040: PUSH
17041: LD_INT 6
17043: PUSH
17044: LD_INT 8
17046: PUSH
17047: LD_INT 11
17049: PUSH
17050: LD_INT 12
17052: PUSH
17053: LD_INT 15
17055: PUSH
17056: LD_INT 16
17058: PUSH
17059: LD_INT 22
17061: PUSH
17062: LD_INT 23
17064: PUSH
17065: LD_INT 25
17067: PUSH
17068: LD_INT 26
17070: PUSH
17071: LD_INT 36
17073: PUSH
17074: EMPTY
17075: LIST
17076: LIST
17077: LIST
17078: LIST
17079: LIST
17080: LIST
17081: LIST
17082: LIST
17083: LIST
17084: LIST
17085: LIST
17086: LIST
17087: LIST
17088: LIST
17089: PUSH
17090: LD_INT 101
17092: PUSH
17093: LD_INT 102
17095: PUSH
17096: LD_INT 105
17098: PUSH
17099: LD_INT 106
17101: PUSH
17102: LD_INT 108
17104: PUSH
17105: LD_INT 109
17107: PUSH
17108: LD_INT 112
17110: PUSH
17111: EMPTY
17112: LIST
17113: LIST
17114: LIST
17115: LIST
17116: LIST
17117: LIST
17118: LIST
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: ST_TO_ADDR
17124: GO 19619
17126: LD_INT 6
17128: DOUBLE
17129: EQUAL
17130: IFTRUE 17134
17132: GO 17254
17134: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
17135: LD_ADDR_VAR 0 1
17139: PUSH
17140: LD_INT 2
17142: PUSH
17143: LD_INT 4
17145: PUSH
17146: LD_INT 5
17148: PUSH
17149: LD_INT 6
17151: PUSH
17152: LD_INT 8
17154: PUSH
17155: LD_INT 11
17157: PUSH
17158: LD_INT 12
17160: PUSH
17161: LD_INT 15
17163: PUSH
17164: LD_INT 16
17166: PUSH
17167: LD_INT 20
17169: PUSH
17170: LD_INT 21
17172: PUSH
17173: LD_INT 22
17175: PUSH
17176: LD_INT 23
17178: PUSH
17179: LD_INT 25
17181: PUSH
17182: LD_INT 26
17184: PUSH
17185: LD_INT 30
17187: PUSH
17188: LD_INT 31
17190: PUSH
17191: LD_INT 32
17193: PUSH
17194: LD_INT 36
17196: PUSH
17197: EMPTY
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: PUSH
17218: LD_INT 101
17220: PUSH
17221: LD_INT 102
17223: PUSH
17224: LD_INT 105
17226: PUSH
17227: LD_INT 106
17229: PUSH
17230: LD_INT 108
17232: PUSH
17233: LD_INT 109
17235: PUSH
17236: LD_INT 112
17238: PUSH
17239: EMPTY
17240: LIST
17241: LIST
17242: LIST
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: PUSH
17248: EMPTY
17249: LIST
17250: LIST
17251: ST_TO_ADDR
17252: GO 19619
17254: LD_INT 7
17256: DOUBLE
17257: EQUAL
17258: IFTRUE 17262
17260: GO 17362
17262: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
17263: LD_ADDR_VAR 0 1
17267: PUSH
17268: LD_INT 2
17270: PUSH
17271: LD_INT 4
17273: PUSH
17274: LD_INT 5
17276: PUSH
17277: LD_INT 7
17279: PUSH
17280: LD_INT 11
17282: PUSH
17283: LD_INT 12
17285: PUSH
17286: LD_INT 15
17288: PUSH
17289: LD_INT 16
17291: PUSH
17292: LD_INT 20
17294: PUSH
17295: LD_INT 21
17297: PUSH
17298: LD_INT 22
17300: PUSH
17301: LD_INT 23
17303: PUSH
17304: LD_INT 25
17306: PUSH
17307: LD_INT 26
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: LIST
17314: LIST
17315: LIST
17316: LIST
17317: LIST
17318: LIST
17319: LIST
17320: LIST
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: PUSH
17326: LD_INT 101
17328: PUSH
17329: LD_INT 102
17331: PUSH
17332: LD_INT 103
17334: PUSH
17335: LD_INT 105
17337: PUSH
17338: LD_INT 106
17340: PUSH
17341: LD_INT 108
17343: PUSH
17344: LD_INT 112
17346: PUSH
17347: EMPTY
17348: LIST
17349: LIST
17350: LIST
17351: LIST
17352: LIST
17353: LIST
17354: LIST
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: ST_TO_ADDR
17360: GO 19619
17362: LD_INT 8
17364: DOUBLE
17365: EQUAL
17366: IFTRUE 17370
17368: GO 17498
17370: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
17371: LD_ADDR_VAR 0 1
17375: PUSH
17376: LD_INT 2
17378: PUSH
17379: LD_INT 4
17381: PUSH
17382: LD_INT 5
17384: PUSH
17385: LD_INT 6
17387: PUSH
17388: LD_INT 7
17390: PUSH
17391: LD_INT 8
17393: PUSH
17394: LD_INT 11
17396: PUSH
17397: LD_INT 12
17399: PUSH
17400: LD_INT 15
17402: PUSH
17403: LD_INT 16
17405: PUSH
17406: LD_INT 20
17408: PUSH
17409: LD_INT 21
17411: PUSH
17412: LD_INT 22
17414: PUSH
17415: LD_INT 23
17417: PUSH
17418: LD_INT 25
17420: PUSH
17421: LD_INT 26
17423: PUSH
17424: LD_INT 30
17426: PUSH
17427: LD_INT 31
17429: PUSH
17430: LD_INT 32
17432: PUSH
17433: LD_INT 36
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: LIST
17457: PUSH
17458: LD_INT 101
17460: PUSH
17461: LD_INT 102
17463: PUSH
17464: LD_INT 103
17466: PUSH
17467: LD_INT 105
17469: PUSH
17470: LD_INT 106
17472: PUSH
17473: LD_INT 108
17475: PUSH
17476: LD_INT 109
17478: PUSH
17479: LD_INT 112
17481: PUSH
17482: EMPTY
17483: LIST
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: LIST
17491: PUSH
17492: EMPTY
17493: LIST
17494: LIST
17495: ST_TO_ADDR
17496: GO 19619
17498: LD_INT 9
17500: DOUBLE
17501: EQUAL
17502: IFTRUE 17506
17504: GO 17642
17506: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
17507: LD_ADDR_VAR 0 1
17511: PUSH
17512: LD_INT 2
17514: PUSH
17515: LD_INT 4
17517: PUSH
17518: LD_INT 5
17520: PUSH
17521: LD_INT 6
17523: PUSH
17524: LD_INT 7
17526: PUSH
17527: LD_INT 8
17529: PUSH
17530: LD_INT 11
17532: PUSH
17533: LD_INT 12
17535: PUSH
17536: LD_INT 15
17538: PUSH
17539: LD_INT 16
17541: PUSH
17542: LD_INT 20
17544: PUSH
17545: LD_INT 21
17547: PUSH
17548: LD_INT 22
17550: PUSH
17551: LD_INT 23
17553: PUSH
17554: LD_INT 25
17556: PUSH
17557: LD_INT 26
17559: PUSH
17560: LD_INT 28
17562: PUSH
17563: LD_INT 30
17565: PUSH
17566: LD_INT 31
17568: PUSH
17569: LD_INT 32
17571: PUSH
17572: LD_INT 36
17574: PUSH
17575: EMPTY
17576: LIST
17577: LIST
17578: LIST
17579: LIST
17580: LIST
17581: LIST
17582: LIST
17583: LIST
17584: LIST
17585: LIST
17586: LIST
17587: LIST
17588: LIST
17589: LIST
17590: LIST
17591: LIST
17592: LIST
17593: LIST
17594: LIST
17595: LIST
17596: LIST
17597: PUSH
17598: LD_INT 101
17600: PUSH
17601: LD_INT 102
17603: PUSH
17604: LD_INT 103
17606: PUSH
17607: LD_INT 105
17609: PUSH
17610: LD_INT 106
17612: PUSH
17613: LD_INT 108
17615: PUSH
17616: LD_INT 109
17618: PUSH
17619: LD_INT 112
17621: PUSH
17622: LD_INT 114
17624: PUSH
17625: EMPTY
17626: LIST
17627: LIST
17628: LIST
17629: LIST
17630: LIST
17631: LIST
17632: LIST
17633: LIST
17634: LIST
17635: PUSH
17636: EMPTY
17637: LIST
17638: LIST
17639: ST_TO_ADDR
17640: GO 19619
17642: LD_INT 10
17644: DOUBLE
17645: EQUAL
17646: IFTRUE 17650
17648: GO 17834
17650: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
17651: LD_ADDR_VAR 0 1
17655: PUSH
17656: LD_INT 2
17658: PUSH
17659: LD_INT 4
17661: PUSH
17662: LD_INT 5
17664: PUSH
17665: LD_INT 6
17667: PUSH
17668: LD_INT 7
17670: PUSH
17671: LD_INT 8
17673: PUSH
17674: LD_INT 9
17676: PUSH
17677: LD_INT 10
17679: PUSH
17680: LD_INT 11
17682: PUSH
17683: LD_INT 12
17685: PUSH
17686: LD_INT 13
17688: PUSH
17689: LD_INT 14
17691: PUSH
17692: LD_INT 15
17694: PUSH
17695: LD_INT 16
17697: PUSH
17698: LD_INT 17
17700: PUSH
17701: LD_INT 18
17703: PUSH
17704: LD_INT 19
17706: PUSH
17707: LD_INT 20
17709: PUSH
17710: LD_INT 21
17712: PUSH
17713: LD_INT 22
17715: PUSH
17716: LD_INT 23
17718: PUSH
17719: LD_INT 24
17721: PUSH
17722: LD_INT 25
17724: PUSH
17725: LD_INT 26
17727: PUSH
17728: LD_INT 28
17730: PUSH
17731: LD_INT 30
17733: PUSH
17734: LD_INT 31
17736: PUSH
17737: LD_INT 32
17739: PUSH
17740: LD_INT 36
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: LIST
17765: LIST
17766: LIST
17767: LIST
17768: LIST
17769: LIST
17770: LIST
17771: LIST
17772: LIST
17773: PUSH
17774: LD_INT 101
17776: PUSH
17777: LD_INT 102
17779: PUSH
17780: LD_INT 103
17782: PUSH
17783: LD_INT 104
17785: PUSH
17786: LD_INT 105
17788: PUSH
17789: LD_INT 106
17791: PUSH
17792: LD_INT 107
17794: PUSH
17795: LD_INT 108
17797: PUSH
17798: LD_INT 109
17800: PUSH
17801: LD_INT 110
17803: PUSH
17804: LD_INT 111
17806: PUSH
17807: LD_INT 112
17809: PUSH
17810: LD_INT 114
17812: PUSH
17813: EMPTY
17814: LIST
17815: LIST
17816: LIST
17817: LIST
17818: LIST
17819: LIST
17820: LIST
17821: LIST
17822: LIST
17823: LIST
17824: LIST
17825: LIST
17826: LIST
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: ST_TO_ADDR
17832: GO 19619
17834: LD_INT 11
17836: DOUBLE
17837: EQUAL
17838: IFTRUE 17842
17840: GO 18034
17842: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
17843: LD_ADDR_VAR 0 1
17847: PUSH
17848: LD_INT 2
17850: PUSH
17851: LD_INT 3
17853: PUSH
17854: LD_INT 4
17856: PUSH
17857: LD_INT 5
17859: PUSH
17860: LD_INT 6
17862: PUSH
17863: LD_INT 7
17865: PUSH
17866: LD_INT 8
17868: PUSH
17869: LD_INT 9
17871: PUSH
17872: LD_INT 10
17874: PUSH
17875: LD_INT 11
17877: PUSH
17878: LD_INT 12
17880: PUSH
17881: LD_INT 13
17883: PUSH
17884: LD_INT 14
17886: PUSH
17887: LD_INT 15
17889: PUSH
17890: LD_INT 16
17892: PUSH
17893: LD_INT 17
17895: PUSH
17896: LD_INT 18
17898: PUSH
17899: LD_INT 19
17901: PUSH
17902: LD_INT 20
17904: PUSH
17905: LD_INT 21
17907: PUSH
17908: LD_INT 22
17910: PUSH
17911: LD_INT 23
17913: PUSH
17914: LD_INT 24
17916: PUSH
17917: LD_INT 25
17919: PUSH
17920: LD_INT 26
17922: PUSH
17923: LD_INT 28
17925: PUSH
17926: LD_INT 30
17928: PUSH
17929: LD_INT 31
17931: PUSH
17932: LD_INT 32
17934: PUSH
17935: LD_INT 34
17937: PUSH
17938: LD_INT 36
17940: PUSH
17941: EMPTY
17942: LIST
17943: LIST
17944: LIST
17945: LIST
17946: LIST
17947: LIST
17948: LIST
17949: LIST
17950: LIST
17951: LIST
17952: LIST
17953: LIST
17954: LIST
17955: LIST
17956: LIST
17957: LIST
17958: LIST
17959: LIST
17960: LIST
17961: LIST
17962: LIST
17963: LIST
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: PUSH
17974: LD_INT 101
17976: PUSH
17977: LD_INT 102
17979: PUSH
17980: LD_INT 103
17982: PUSH
17983: LD_INT 104
17985: PUSH
17986: LD_INT 105
17988: PUSH
17989: LD_INT 106
17991: PUSH
17992: LD_INT 107
17994: PUSH
17995: LD_INT 108
17997: PUSH
17998: LD_INT 109
18000: PUSH
18001: LD_INT 110
18003: PUSH
18004: LD_INT 111
18006: PUSH
18007: LD_INT 112
18009: PUSH
18010: LD_INT 114
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: PUSH
18028: EMPTY
18029: LIST
18030: LIST
18031: ST_TO_ADDR
18032: GO 19619
18034: LD_INT 12
18036: DOUBLE
18037: EQUAL
18038: IFTRUE 18042
18040: GO 18250
18042: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
18043: LD_ADDR_VAR 0 1
18047: PUSH
18048: LD_INT 1
18050: PUSH
18051: LD_INT 2
18053: PUSH
18054: LD_INT 3
18056: PUSH
18057: LD_INT 4
18059: PUSH
18060: LD_INT 5
18062: PUSH
18063: LD_INT 6
18065: PUSH
18066: LD_INT 7
18068: PUSH
18069: LD_INT 8
18071: PUSH
18072: LD_INT 9
18074: PUSH
18075: LD_INT 10
18077: PUSH
18078: LD_INT 11
18080: PUSH
18081: LD_INT 12
18083: PUSH
18084: LD_INT 13
18086: PUSH
18087: LD_INT 14
18089: PUSH
18090: LD_INT 15
18092: PUSH
18093: LD_INT 16
18095: PUSH
18096: LD_INT 17
18098: PUSH
18099: LD_INT 18
18101: PUSH
18102: LD_INT 19
18104: PUSH
18105: LD_INT 20
18107: PUSH
18108: LD_INT 21
18110: PUSH
18111: LD_INT 22
18113: PUSH
18114: LD_INT 23
18116: PUSH
18117: LD_INT 24
18119: PUSH
18120: LD_INT 25
18122: PUSH
18123: LD_INT 26
18125: PUSH
18126: LD_INT 27
18128: PUSH
18129: LD_INT 28
18131: PUSH
18132: LD_INT 30
18134: PUSH
18135: LD_INT 31
18137: PUSH
18138: LD_INT 32
18140: PUSH
18141: LD_INT 33
18143: PUSH
18144: LD_INT 34
18146: PUSH
18147: LD_INT 36
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: LIST
18154: LIST
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: LIST
18173: LIST
18174: LIST
18175: LIST
18176: LIST
18177: LIST
18178: LIST
18179: LIST
18180: LIST
18181: LIST
18182: LIST
18183: LIST
18184: LIST
18185: PUSH
18186: LD_INT 101
18188: PUSH
18189: LD_INT 102
18191: PUSH
18192: LD_INT 103
18194: PUSH
18195: LD_INT 104
18197: PUSH
18198: LD_INT 105
18200: PUSH
18201: LD_INT 106
18203: PUSH
18204: LD_INT 107
18206: PUSH
18207: LD_INT 108
18209: PUSH
18210: LD_INT 109
18212: PUSH
18213: LD_INT 110
18215: PUSH
18216: LD_INT 111
18218: PUSH
18219: LD_INT 112
18221: PUSH
18222: LD_INT 113
18224: PUSH
18225: LD_INT 114
18227: PUSH
18228: EMPTY
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: LIST
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: LIST
18240: LIST
18241: LIST
18242: LIST
18243: PUSH
18244: EMPTY
18245: LIST
18246: LIST
18247: ST_TO_ADDR
18248: GO 19619
18250: LD_INT 13
18252: DOUBLE
18253: EQUAL
18254: IFTRUE 18258
18256: GO 18454
18258: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
18259: LD_ADDR_VAR 0 1
18263: PUSH
18264: LD_INT 1
18266: PUSH
18267: LD_INT 2
18269: PUSH
18270: LD_INT 3
18272: PUSH
18273: LD_INT 4
18275: PUSH
18276: LD_INT 5
18278: PUSH
18279: LD_INT 8
18281: PUSH
18282: LD_INT 9
18284: PUSH
18285: LD_INT 10
18287: PUSH
18288: LD_INT 11
18290: PUSH
18291: LD_INT 12
18293: PUSH
18294: LD_INT 14
18296: PUSH
18297: LD_INT 15
18299: PUSH
18300: LD_INT 16
18302: PUSH
18303: LD_INT 17
18305: PUSH
18306: LD_INT 18
18308: PUSH
18309: LD_INT 19
18311: PUSH
18312: LD_INT 20
18314: PUSH
18315: LD_INT 21
18317: PUSH
18318: LD_INT 22
18320: PUSH
18321: LD_INT 23
18323: PUSH
18324: LD_INT 24
18326: PUSH
18327: LD_INT 25
18329: PUSH
18330: LD_INT 26
18332: PUSH
18333: LD_INT 27
18335: PUSH
18336: LD_INT 28
18338: PUSH
18339: LD_INT 30
18341: PUSH
18342: LD_INT 31
18344: PUSH
18345: LD_INT 32
18347: PUSH
18348: LD_INT 33
18350: PUSH
18351: LD_INT 34
18353: PUSH
18354: LD_INT 36
18356: PUSH
18357: EMPTY
18358: LIST
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: LIST
18364: LIST
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: LIST
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: LIST
18378: LIST
18379: LIST
18380: LIST
18381: LIST
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: LIST
18389: PUSH
18390: LD_INT 101
18392: PUSH
18393: LD_INT 102
18395: PUSH
18396: LD_INT 103
18398: PUSH
18399: LD_INT 104
18401: PUSH
18402: LD_INT 105
18404: PUSH
18405: LD_INT 106
18407: PUSH
18408: LD_INT 107
18410: PUSH
18411: LD_INT 108
18413: PUSH
18414: LD_INT 109
18416: PUSH
18417: LD_INT 110
18419: PUSH
18420: LD_INT 111
18422: PUSH
18423: LD_INT 112
18425: PUSH
18426: LD_INT 113
18428: PUSH
18429: LD_INT 114
18431: PUSH
18432: EMPTY
18433: LIST
18434: LIST
18435: LIST
18436: LIST
18437: LIST
18438: LIST
18439: LIST
18440: LIST
18441: LIST
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: PUSH
18448: EMPTY
18449: LIST
18450: LIST
18451: ST_TO_ADDR
18452: GO 19619
18454: LD_INT 14
18456: DOUBLE
18457: EQUAL
18458: IFTRUE 18462
18460: GO 18674
18462: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
18463: LD_ADDR_VAR 0 1
18467: PUSH
18468: LD_INT 1
18470: PUSH
18471: LD_INT 2
18473: PUSH
18474: LD_INT 3
18476: PUSH
18477: LD_INT 4
18479: PUSH
18480: LD_INT 5
18482: PUSH
18483: LD_INT 6
18485: PUSH
18486: LD_INT 7
18488: PUSH
18489: LD_INT 8
18491: PUSH
18492: LD_INT 9
18494: PUSH
18495: LD_INT 10
18497: PUSH
18498: LD_INT 11
18500: PUSH
18501: LD_INT 12
18503: PUSH
18504: LD_INT 13
18506: PUSH
18507: LD_INT 14
18509: PUSH
18510: LD_INT 15
18512: PUSH
18513: LD_INT 16
18515: PUSH
18516: LD_INT 17
18518: PUSH
18519: LD_INT 18
18521: PUSH
18522: LD_INT 19
18524: PUSH
18525: LD_INT 20
18527: PUSH
18528: LD_INT 21
18530: PUSH
18531: LD_INT 22
18533: PUSH
18534: LD_INT 23
18536: PUSH
18537: LD_INT 24
18539: PUSH
18540: LD_INT 25
18542: PUSH
18543: LD_INT 26
18545: PUSH
18546: LD_INT 27
18548: PUSH
18549: LD_INT 28
18551: PUSH
18552: LD_INT 29
18554: PUSH
18555: LD_INT 30
18557: PUSH
18558: LD_INT 31
18560: PUSH
18561: LD_INT 32
18563: PUSH
18564: LD_INT 33
18566: PUSH
18567: LD_INT 34
18569: PUSH
18570: LD_INT 36
18572: PUSH
18573: EMPTY
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: LIST
18593: LIST
18594: LIST
18595: LIST
18596: LIST
18597: LIST
18598: LIST
18599: LIST
18600: LIST
18601: LIST
18602: LIST
18603: LIST
18604: LIST
18605: LIST
18606: LIST
18607: LIST
18608: LIST
18609: PUSH
18610: LD_INT 101
18612: PUSH
18613: LD_INT 102
18615: PUSH
18616: LD_INT 103
18618: PUSH
18619: LD_INT 104
18621: PUSH
18622: LD_INT 105
18624: PUSH
18625: LD_INT 106
18627: PUSH
18628: LD_INT 107
18630: PUSH
18631: LD_INT 108
18633: PUSH
18634: LD_INT 109
18636: PUSH
18637: LD_INT 110
18639: PUSH
18640: LD_INT 111
18642: PUSH
18643: LD_INT 112
18645: PUSH
18646: LD_INT 113
18648: PUSH
18649: LD_INT 114
18651: PUSH
18652: EMPTY
18653: LIST
18654: LIST
18655: LIST
18656: LIST
18657: LIST
18658: LIST
18659: LIST
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: PUSH
18668: EMPTY
18669: LIST
18670: LIST
18671: ST_TO_ADDR
18672: GO 19619
18674: LD_INT 15
18676: DOUBLE
18677: EQUAL
18678: IFTRUE 18682
18680: GO 18894
18682: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
18683: LD_ADDR_VAR 0 1
18687: PUSH
18688: LD_INT 1
18690: PUSH
18691: LD_INT 2
18693: PUSH
18694: LD_INT 3
18696: PUSH
18697: LD_INT 4
18699: PUSH
18700: LD_INT 5
18702: PUSH
18703: LD_INT 6
18705: PUSH
18706: LD_INT 7
18708: PUSH
18709: LD_INT 8
18711: PUSH
18712: LD_INT 9
18714: PUSH
18715: LD_INT 10
18717: PUSH
18718: LD_INT 11
18720: PUSH
18721: LD_INT 12
18723: PUSH
18724: LD_INT 13
18726: PUSH
18727: LD_INT 14
18729: PUSH
18730: LD_INT 15
18732: PUSH
18733: LD_INT 16
18735: PUSH
18736: LD_INT 17
18738: PUSH
18739: LD_INT 18
18741: PUSH
18742: LD_INT 19
18744: PUSH
18745: LD_INT 20
18747: PUSH
18748: LD_INT 21
18750: PUSH
18751: LD_INT 22
18753: PUSH
18754: LD_INT 23
18756: PUSH
18757: LD_INT 24
18759: PUSH
18760: LD_INT 25
18762: PUSH
18763: LD_INT 26
18765: PUSH
18766: LD_INT 27
18768: PUSH
18769: LD_INT 28
18771: PUSH
18772: LD_INT 29
18774: PUSH
18775: LD_INT 30
18777: PUSH
18778: LD_INT 31
18780: PUSH
18781: LD_INT 32
18783: PUSH
18784: LD_INT 33
18786: PUSH
18787: LD_INT 34
18789: PUSH
18790: LD_INT 36
18792: PUSH
18793: EMPTY
18794: LIST
18795: LIST
18796: LIST
18797: LIST
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: LIST
18806: LIST
18807: LIST
18808: LIST
18809: LIST
18810: LIST
18811: LIST
18812: LIST
18813: LIST
18814: LIST
18815: LIST
18816: LIST
18817: LIST
18818: LIST
18819: LIST
18820: LIST
18821: LIST
18822: LIST
18823: LIST
18824: LIST
18825: LIST
18826: LIST
18827: LIST
18828: LIST
18829: PUSH
18830: LD_INT 101
18832: PUSH
18833: LD_INT 102
18835: PUSH
18836: LD_INT 103
18838: PUSH
18839: LD_INT 104
18841: PUSH
18842: LD_INT 105
18844: PUSH
18845: LD_INT 106
18847: PUSH
18848: LD_INT 107
18850: PUSH
18851: LD_INT 108
18853: PUSH
18854: LD_INT 109
18856: PUSH
18857: LD_INT 110
18859: PUSH
18860: LD_INT 111
18862: PUSH
18863: LD_INT 112
18865: PUSH
18866: LD_INT 113
18868: PUSH
18869: LD_INT 114
18871: PUSH
18872: EMPTY
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: PUSH
18888: EMPTY
18889: LIST
18890: LIST
18891: ST_TO_ADDR
18892: GO 19619
18894: LD_INT 16
18896: DOUBLE
18897: EQUAL
18898: IFTRUE 18902
18900: GO 19026
18902: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
18903: LD_ADDR_VAR 0 1
18907: PUSH
18908: LD_INT 2
18910: PUSH
18911: LD_INT 4
18913: PUSH
18914: LD_INT 5
18916: PUSH
18917: LD_INT 7
18919: PUSH
18920: LD_INT 11
18922: PUSH
18923: LD_INT 12
18925: PUSH
18926: LD_INT 15
18928: PUSH
18929: LD_INT 16
18931: PUSH
18932: LD_INT 20
18934: PUSH
18935: LD_INT 21
18937: PUSH
18938: LD_INT 22
18940: PUSH
18941: LD_INT 23
18943: PUSH
18944: LD_INT 25
18946: PUSH
18947: LD_INT 26
18949: PUSH
18950: LD_INT 30
18952: PUSH
18953: LD_INT 31
18955: PUSH
18956: LD_INT 32
18958: PUSH
18959: LD_INT 33
18961: PUSH
18962: LD_INT 34
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: LIST
18969: LIST
18970: LIST
18971: LIST
18972: LIST
18973: LIST
18974: LIST
18975: LIST
18976: LIST
18977: LIST
18978: LIST
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: PUSH
18986: LD_INT 101
18988: PUSH
18989: LD_INT 102
18991: PUSH
18992: LD_INT 103
18994: PUSH
18995: LD_INT 106
18997: PUSH
18998: LD_INT 108
19000: PUSH
19001: LD_INT 112
19003: PUSH
19004: LD_INT 113
19006: PUSH
19007: LD_INT 114
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: LIST
19014: LIST
19015: LIST
19016: LIST
19017: LIST
19018: LIST
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: ST_TO_ADDR
19024: GO 19619
19026: LD_INT 17
19028: DOUBLE
19029: EQUAL
19030: IFTRUE 19034
19032: GO 19246
19034: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
19035: LD_ADDR_VAR 0 1
19039: PUSH
19040: LD_INT 1
19042: PUSH
19043: LD_INT 2
19045: PUSH
19046: LD_INT 3
19048: PUSH
19049: LD_INT 4
19051: PUSH
19052: LD_INT 5
19054: PUSH
19055: LD_INT 6
19057: PUSH
19058: LD_INT 7
19060: PUSH
19061: LD_INT 8
19063: PUSH
19064: LD_INT 9
19066: PUSH
19067: LD_INT 10
19069: PUSH
19070: LD_INT 11
19072: PUSH
19073: LD_INT 12
19075: PUSH
19076: LD_INT 13
19078: PUSH
19079: LD_INT 14
19081: PUSH
19082: LD_INT 15
19084: PUSH
19085: LD_INT 16
19087: PUSH
19088: LD_INT 17
19090: PUSH
19091: LD_INT 18
19093: PUSH
19094: LD_INT 19
19096: PUSH
19097: LD_INT 20
19099: PUSH
19100: LD_INT 21
19102: PUSH
19103: LD_INT 22
19105: PUSH
19106: LD_INT 23
19108: PUSH
19109: LD_INT 24
19111: PUSH
19112: LD_INT 25
19114: PUSH
19115: LD_INT 26
19117: PUSH
19118: LD_INT 27
19120: PUSH
19121: LD_INT 28
19123: PUSH
19124: LD_INT 29
19126: PUSH
19127: LD_INT 30
19129: PUSH
19130: LD_INT 31
19132: PUSH
19133: LD_INT 32
19135: PUSH
19136: LD_INT 33
19138: PUSH
19139: LD_INT 34
19141: PUSH
19142: LD_INT 36
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: LIST
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: LIST
19157: LIST
19158: LIST
19159: LIST
19160: LIST
19161: LIST
19162: LIST
19163: LIST
19164: LIST
19165: LIST
19166: LIST
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: PUSH
19182: LD_INT 101
19184: PUSH
19185: LD_INT 102
19187: PUSH
19188: LD_INT 103
19190: PUSH
19191: LD_INT 104
19193: PUSH
19194: LD_INT 105
19196: PUSH
19197: LD_INT 106
19199: PUSH
19200: LD_INT 107
19202: PUSH
19203: LD_INT 108
19205: PUSH
19206: LD_INT 109
19208: PUSH
19209: LD_INT 110
19211: PUSH
19212: LD_INT 111
19214: PUSH
19215: LD_INT 112
19217: PUSH
19218: LD_INT 113
19220: PUSH
19221: LD_INT 114
19223: PUSH
19224: EMPTY
19225: LIST
19226: LIST
19227: LIST
19228: LIST
19229: LIST
19230: LIST
19231: LIST
19232: LIST
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: PUSH
19240: EMPTY
19241: LIST
19242: LIST
19243: ST_TO_ADDR
19244: GO 19619
19246: LD_INT 18
19248: DOUBLE
19249: EQUAL
19250: IFTRUE 19254
19252: GO 19390
19254: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
19255: LD_ADDR_VAR 0 1
19259: PUSH
19260: LD_INT 2
19262: PUSH
19263: LD_INT 4
19265: PUSH
19266: LD_INT 5
19268: PUSH
19269: LD_INT 7
19271: PUSH
19272: LD_INT 11
19274: PUSH
19275: LD_INT 12
19277: PUSH
19278: LD_INT 15
19280: PUSH
19281: LD_INT 16
19283: PUSH
19284: LD_INT 20
19286: PUSH
19287: LD_INT 21
19289: PUSH
19290: LD_INT 22
19292: PUSH
19293: LD_INT 23
19295: PUSH
19296: LD_INT 25
19298: PUSH
19299: LD_INT 26
19301: PUSH
19302: LD_INT 30
19304: PUSH
19305: LD_INT 31
19307: PUSH
19308: LD_INT 32
19310: PUSH
19311: LD_INT 33
19313: PUSH
19314: LD_INT 34
19316: PUSH
19317: LD_INT 35
19319: PUSH
19320: LD_INT 36
19322: PUSH
19323: EMPTY
19324: LIST
19325: LIST
19326: LIST
19327: LIST
19328: LIST
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: PUSH
19346: LD_INT 101
19348: PUSH
19349: LD_INT 102
19351: PUSH
19352: LD_INT 103
19354: PUSH
19355: LD_INT 106
19357: PUSH
19358: LD_INT 108
19360: PUSH
19361: LD_INT 112
19363: PUSH
19364: LD_INT 113
19366: PUSH
19367: LD_INT 114
19369: PUSH
19370: LD_INT 115
19372: PUSH
19373: EMPTY
19374: LIST
19375: LIST
19376: LIST
19377: LIST
19378: LIST
19379: LIST
19380: LIST
19381: LIST
19382: LIST
19383: PUSH
19384: EMPTY
19385: LIST
19386: LIST
19387: ST_TO_ADDR
19388: GO 19619
19390: LD_INT 19
19392: DOUBLE
19393: EQUAL
19394: IFTRUE 19398
19396: GO 19618
19398: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
19399: LD_ADDR_VAR 0 1
19403: PUSH
19404: LD_INT 1
19406: PUSH
19407: LD_INT 2
19409: PUSH
19410: LD_INT 3
19412: PUSH
19413: LD_INT 4
19415: PUSH
19416: LD_INT 5
19418: PUSH
19419: LD_INT 6
19421: PUSH
19422: LD_INT 7
19424: PUSH
19425: LD_INT 8
19427: PUSH
19428: LD_INT 9
19430: PUSH
19431: LD_INT 10
19433: PUSH
19434: LD_INT 11
19436: PUSH
19437: LD_INT 12
19439: PUSH
19440: LD_INT 13
19442: PUSH
19443: LD_INT 14
19445: PUSH
19446: LD_INT 15
19448: PUSH
19449: LD_INT 16
19451: PUSH
19452: LD_INT 17
19454: PUSH
19455: LD_INT 18
19457: PUSH
19458: LD_INT 19
19460: PUSH
19461: LD_INT 20
19463: PUSH
19464: LD_INT 21
19466: PUSH
19467: LD_INT 22
19469: PUSH
19470: LD_INT 23
19472: PUSH
19473: LD_INT 24
19475: PUSH
19476: LD_INT 25
19478: PUSH
19479: LD_INT 26
19481: PUSH
19482: LD_INT 27
19484: PUSH
19485: LD_INT 28
19487: PUSH
19488: LD_INT 29
19490: PUSH
19491: LD_INT 30
19493: PUSH
19494: LD_INT 31
19496: PUSH
19497: LD_INT 32
19499: PUSH
19500: LD_INT 33
19502: PUSH
19503: LD_INT 34
19505: PUSH
19506: LD_INT 35
19508: PUSH
19509: LD_INT 36
19511: PUSH
19512: EMPTY
19513: LIST
19514: LIST
19515: LIST
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: PUSH
19550: LD_INT 101
19552: PUSH
19553: LD_INT 102
19555: PUSH
19556: LD_INT 103
19558: PUSH
19559: LD_INT 104
19561: PUSH
19562: LD_INT 105
19564: PUSH
19565: LD_INT 106
19567: PUSH
19568: LD_INT 107
19570: PUSH
19571: LD_INT 108
19573: PUSH
19574: LD_INT 109
19576: PUSH
19577: LD_INT 110
19579: PUSH
19580: LD_INT 111
19582: PUSH
19583: LD_INT 112
19585: PUSH
19586: LD_INT 113
19588: PUSH
19589: LD_INT 114
19591: PUSH
19592: LD_INT 115
19594: PUSH
19595: EMPTY
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: ST_TO_ADDR
19616: GO 19619
19618: POP
// end else
19619: GO 19838
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
19621: LD_ADDR_VAR 0 1
19625: PUSH
19626: LD_INT 1
19628: PUSH
19629: LD_INT 2
19631: PUSH
19632: LD_INT 3
19634: PUSH
19635: LD_INT 4
19637: PUSH
19638: LD_INT 5
19640: PUSH
19641: LD_INT 6
19643: PUSH
19644: LD_INT 7
19646: PUSH
19647: LD_INT 8
19649: PUSH
19650: LD_INT 9
19652: PUSH
19653: LD_INT 10
19655: PUSH
19656: LD_INT 11
19658: PUSH
19659: LD_INT 12
19661: PUSH
19662: LD_INT 13
19664: PUSH
19665: LD_INT 14
19667: PUSH
19668: LD_INT 15
19670: PUSH
19671: LD_INT 16
19673: PUSH
19674: LD_INT 17
19676: PUSH
19677: LD_INT 18
19679: PUSH
19680: LD_INT 19
19682: PUSH
19683: LD_INT 20
19685: PUSH
19686: LD_INT 21
19688: PUSH
19689: LD_INT 22
19691: PUSH
19692: LD_INT 23
19694: PUSH
19695: LD_INT 24
19697: PUSH
19698: LD_INT 25
19700: PUSH
19701: LD_INT 26
19703: PUSH
19704: LD_INT 27
19706: PUSH
19707: LD_INT 28
19709: PUSH
19710: LD_INT 29
19712: PUSH
19713: LD_INT 30
19715: PUSH
19716: LD_INT 31
19718: PUSH
19719: LD_INT 32
19721: PUSH
19722: LD_INT 33
19724: PUSH
19725: LD_INT 34
19727: PUSH
19728: LD_INT 35
19730: PUSH
19731: LD_INT 36
19733: PUSH
19734: EMPTY
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: PUSH
19772: LD_INT 101
19774: PUSH
19775: LD_INT 102
19777: PUSH
19778: LD_INT 103
19780: PUSH
19781: LD_INT 104
19783: PUSH
19784: LD_INT 105
19786: PUSH
19787: LD_INT 106
19789: PUSH
19790: LD_INT 107
19792: PUSH
19793: LD_INT 108
19795: PUSH
19796: LD_INT 109
19798: PUSH
19799: LD_INT 110
19801: PUSH
19802: LD_INT 111
19804: PUSH
19805: LD_INT 112
19807: PUSH
19808: LD_INT 113
19810: PUSH
19811: LD_INT 114
19813: PUSH
19814: LD_INT 115
19816: PUSH
19817: EMPTY
19818: LIST
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: LIST
19824: LIST
19825: LIST
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: ST_TO_ADDR
// if result then
19838: LD_VAR 0 1
19842: IFFALSE 20131
// begin normal :=  ;
19844: LD_ADDR_VAR 0 3
19848: PUSH
19849: LD_STRING 
19851: ST_TO_ADDR
// hardcore :=  ;
19852: LD_ADDR_VAR 0 4
19856: PUSH
19857: LD_STRING 
19859: ST_TO_ADDR
// for i = 1 to normalCounter do
19860: LD_ADDR_VAR 0 5
19864: PUSH
19865: DOUBLE
19866: LD_INT 1
19868: DEC
19869: ST_TO_ADDR
19870: LD_EXP 55
19874: PUSH
19875: FOR_TO
19876: IFFALSE 19977
// begin tmp := 0 ;
19878: LD_ADDR_VAR 0 2
19882: PUSH
19883: LD_STRING 0
19885: ST_TO_ADDR
// if result [ 1 ] then
19886: LD_VAR 0 1
19890: PUSH
19891: LD_INT 1
19893: ARRAY
19894: IFFALSE 19959
// if result [ 1 ] [ 1 ] = i then
19896: LD_VAR 0 1
19900: PUSH
19901: LD_INT 1
19903: ARRAY
19904: PUSH
19905: LD_INT 1
19907: ARRAY
19908: PUSH
19909: LD_VAR 0 5
19913: EQUAL
19914: IFFALSE 19959
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
19916: LD_ADDR_VAR 0 1
19920: PUSH
19921: LD_VAR 0 1
19925: PPUSH
19926: LD_INT 1
19928: PPUSH
19929: LD_VAR 0 1
19933: PUSH
19934: LD_INT 1
19936: ARRAY
19937: PPUSH
19938: LD_INT 1
19940: PPUSH
19941: CALL_OW 3
19945: PPUSH
19946: CALL_OW 1
19950: ST_TO_ADDR
// tmp := 1 ;
19951: LD_ADDR_VAR 0 2
19955: PUSH
19956: LD_STRING 1
19958: ST_TO_ADDR
// end ; normal := normal & tmp ;
19959: LD_ADDR_VAR 0 3
19963: PUSH
19964: LD_VAR 0 3
19968: PUSH
19969: LD_VAR 0 2
19973: STR
19974: ST_TO_ADDR
// end ;
19975: GO 19875
19977: POP
19978: POP
// for i = 1 to hardcoreCounter do
19979: LD_ADDR_VAR 0 5
19983: PUSH
19984: DOUBLE
19985: LD_INT 1
19987: DEC
19988: ST_TO_ADDR
19989: LD_EXP 56
19993: PUSH
19994: FOR_TO
19995: IFFALSE 20100
// begin tmp := 0 ;
19997: LD_ADDR_VAR 0 2
20001: PUSH
20002: LD_STRING 0
20004: ST_TO_ADDR
// if result [ 2 ] then
20005: LD_VAR 0 1
20009: PUSH
20010: LD_INT 2
20012: ARRAY
20013: IFFALSE 20082
// if result [ 2 ] [ 1 ] = 100 + i then
20015: LD_VAR 0 1
20019: PUSH
20020: LD_INT 2
20022: ARRAY
20023: PUSH
20024: LD_INT 1
20026: ARRAY
20027: PUSH
20028: LD_INT 100
20030: PUSH
20031: LD_VAR 0 5
20035: PLUS
20036: EQUAL
20037: IFFALSE 20082
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
20039: LD_ADDR_VAR 0 1
20043: PUSH
20044: LD_VAR 0 1
20048: PPUSH
20049: LD_INT 2
20051: PPUSH
20052: LD_VAR 0 1
20056: PUSH
20057: LD_INT 2
20059: ARRAY
20060: PPUSH
20061: LD_INT 1
20063: PPUSH
20064: CALL_OW 3
20068: PPUSH
20069: CALL_OW 1
20073: ST_TO_ADDR
// tmp := 1 ;
20074: LD_ADDR_VAR 0 2
20078: PUSH
20079: LD_STRING 1
20081: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
20082: LD_ADDR_VAR 0 4
20086: PUSH
20087: LD_VAR 0 4
20091: PUSH
20092: LD_VAR 0 2
20096: STR
20097: ST_TO_ADDR
// end ;
20098: GO 19994
20100: POP
20101: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
20102: LD_STRING getStreamItemsFromMission("
20104: PUSH
20105: LD_VAR 0 3
20109: STR
20110: PUSH
20111: LD_STRING ","
20113: STR
20114: PUSH
20115: LD_VAR 0 4
20119: STR
20120: PUSH
20121: LD_STRING ")
20123: STR
20124: PPUSH
20125: CALL_OW 559
// end else
20129: GO 20138
// ToLua ( getStreamItemsFromMission("","") ) ;
20131: LD_STRING getStreamItemsFromMission("","")
20133: PPUSH
20134: CALL_OW 559
// end ;
20138: LD_VAR 0 1
20142: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
20143: LD_EXP 54
20147: PUSH
20148: LD_EXP 59
20152: AND
20153: IFFALSE 20277
20155: GO 20157
20157: DISABLE
20158: LD_INT 0
20160: PPUSH
20161: PPUSH
// begin enable ;
20162: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
20163: LD_ADDR_VAR 0 2
20167: PUSH
20168: LD_INT 22
20170: PUSH
20171: LD_OWVAR 2
20175: PUSH
20176: EMPTY
20177: LIST
20178: LIST
20179: PUSH
20180: LD_INT 2
20182: PUSH
20183: LD_INT 34
20185: PUSH
20186: LD_INT 7
20188: PUSH
20189: EMPTY
20190: LIST
20191: LIST
20192: PUSH
20193: LD_INT 34
20195: PUSH
20196: LD_INT 45
20198: PUSH
20199: EMPTY
20200: LIST
20201: LIST
20202: PUSH
20203: LD_INT 34
20205: PUSH
20206: LD_INT 28
20208: PUSH
20209: EMPTY
20210: LIST
20211: LIST
20212: PUSH
20213: LD_INT 34
20215: PUSH
20216: LD_INT 47
20218: PUSH
20219: EMPTY
20220: LIST
20221: LIST
20222: PUSH
20223: EMPTY
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: LIST
20229: PUSH
20230: EMPTY
20231: LIST
20232: LIST
20233: PPUSH
20234: CALL_OW 69
20238: ST_TO_ADDR
// if not tmp then
20239: LD_VAR 0 2
20243: NOT
20244: IFFALSE 20248
// exit ;
20246: GO 20277
// for i in tmp do
20248: LD_ADDR_VAR 0 1
20252: PUSH
20253: LD_VAR 0 2
20257: PUSH
20258: FOR_IN
20259: IFFALSE 20275
// begin SetLives ( i , 0 ) ;
20261: LD_VAR 0 1
20265: PPUSH
20266: LD_INT 0
20268: PPUSH
20269: CALL_OW 234
// end ;
20273: GO 20258
20275: POP
20276: POP
// end ;
20277: PPOPN 2
20279: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
20280: LD_EXP 54
20284: PUSH
20285: LD_EXP 60
20289: AND
20290: IFFALSE 20374
20292: GO 20294
20294: DISABLE
20295: LD_INT 0
20297: PPUSH
20298: PPUSH
// begin enable ;
20299: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
20300: LD_ADDR_VAR 0 2
20304: PUSH
20305: LD_INT 22
20307: PUSH
20308: LD_OWVAR 2
20312: PUSH
20313: EMPTY
20314: LIST
20315: LIST
20316: PUSH
20317: LD_INT 32
20319: PUSH
20320: LD_INT 3
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: PUSH
20327: EMPTY
20328: LIST
20329: LIST
20330: PPUSH
20331: CALL_OW 69
20335: ST_TO_ADDR
// if not tmp then
20336: LD_VAR 0 2
20340: NOT
20341: IFFALSE 20345
// exit ;
20343: GO 20374
// for i in tmp do
20345: LD_ADDR_VAR 0 1
20349: PUSH
20350: LD_VAR 0 2
20354: PUSH
20355: FOR_IN
20356: IFFALSE 20372
// begin SetLives ( i , 0 ) ;
20358: LD_VAR 0 1
20362: PPUSH
20363: LD_INT 0
20365: PPUSH
20366: CALL_OW 234
// end ;
20370: GO 20355
20372: POP
20373: POP
// end ;
20374: PPOPN 2
20376: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
20377: LD_EXP 54
20381: PUSH
20382: LD_EXP 57
20386: AND
20387: IFFALSE 20480
20389: GO 20391
20391: DISABLE
20392: LD_INT 0
20394: PPUSH
// begin enable ;
20395: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
20396: LD_ADDR_VAR 0 1
20400: PUSH
20401: LD_INT 22
20403: PUSH
20404: LD_OWVAR 2
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: PUSH
20413: LD_INT 2
20415: PUSH
20416: LD_INT 25
20418: PUSH
20419: LD_INT 5
20421: PUSH
20422: EMPTY
20423: LIST
20424: LIST
20425: PUSH
20426: LD_INT 25
20428: PUSH
20429: LD_INT 9
20431: PUSH
20432: EMPTY
20433: LIST
20434: LIST
20435: PUSH
20436: LD_INT 25
20438: PUSH
20439: LD_INT 8
20441: PUSH
20442: EMPTY
20443: LIST
20444: LIST
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: LIST
20450: LIST
20451: PUSH
20452: EMPTY
20453: LIST
20454: LIST
20455: PPUSH
20456: CALL_OW 69
20460: PUSH
20461: FOR_IN
20462: IFFALSE 20478
// begin SetClass ( i , 1 ) ;
20464: LD_VAR 0 1
20468: PPUSH
20469: LD_INT 1
20471: PPUSH
20472: CALL_OW 336
// end ;
20476: GO 20461
20478: POP
20479: POP
// end ;
20480: PPOPN 1
20482: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
20483: LD_EXP 54
20487: PUSH
20488: LD_EXP 58
20492: AND
20493: PUSH
20494: LD_OWVAR 65
20498: PUSH
20499: LD_INT 7
20501: LESS
20502: AND
20503: IFFALSE 20517
20505: GO 20507
20507: DISABLE
// begin enable ;
20508: ENABLE
// game_speed := 7 ;
20509: LD_ADDR_OWVAR 65
20513: PUSH
20514: LD_INT 7
20516: ST_TO_ADDR
// end ;
20517: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
20518: LD_EXP 54
20522: PUSH
20523: LD_EXP 61
20527: AND
20528: IFFALSE 20730
20530: GO 20532
20532: DISABLE
20533: LD_INT 0
20535: PPUSH
20536: PPUSH
20537: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20538: LD_ADDR_VAR 0 3
20542: PUSH
20543: LD_INT 81
20545: PUSH
20546: LD_OWVAR 2
20550: PUSH
20551: EMPTY
20552: LIST
20553: LIST
20554: PUSH
20555: LD_INT 21
20557: PUSH
20558: LD_INT 1
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: PUSH
20565: EMPTY
20566: LIST
20567: LIST
20568: PPUSH
20569: CALL_OW 69
20573: ST_TO_ADDR
// if not tmp then
20574: LD_VAR 0 3
20578: NOT
20579: IFFALSE 20583
// exit ;
20581: GO 20730
// if tmp > 5 then
20583: LD_VAR 0 3
20587: PUSH
20588: LD_INT 5
20590: GREATER
20591: IFFALSE 20603
// k := 5 else
20593: LD_ADDR_VAR 0 2
20597: PUSH
20598: LD_INT 5
20600: ST_TO_ADDR
20601: GO 20613
// k := tmp ;
20603: LD_ADDR_VAR 0 2
20607: PUSH
20608: LD_VAR 0 3
20612: ST_TO_ADDR
// for i := 1 to k do
20613: LD_ADDR_VAR 0 1
20617: PUSH
20618: DOUBLE
20619: LD_INT 1
20621: DEC
20622: ST_TO_ADDR
20623: LD_VAR 0 2
20627: PUSH
20628: FOR_TO
20629: IFFALSE 20728
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
20631: LD_VAR 0 3
20635: PUSH
20636: LD_VAR 0 1
20640: ARRAY
20641: PPUSH
20642: LD_VAR 0 1
20646: PUSH
20647: LD_INT 4
20649: MOD
20650: PUSH
20651: LD_INT 1
20653: PLUS
20654: PPUSH
20655: CALL_OW 259
20659: PUSH
20660: LD_INT 10
20662: LESS
20663: IFFALSE 20726
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
20665: LD_VAR 0 3
20669: PUSH
20670: LD_VAR 0 1
20674: ARRAY
20675: PPUSH
20676: LD_VAR 0 1
20680: PUSH
20681: LD_INT 4
20683: MOD
20684: PUSH
20685: LD_INT 1
20687: PLUS
20688: PPUSH
20689: LD_VAR 0 3
20693: PUSH
20694: LD_VAR 0 1
20698: ARRAY
20699: PPUSH
20700: LD_VAR 0 1
20704: PUSH
20705: LD_INT 4
20707: MOD
20708: PUSH
20709: LD_INT 1
20711: PLUS
20712: PPUSH
20713: CALL_OW 259
20717: PUSH
20718: LD_INT 1
20720: PLUS
20721: PPUSH
20722: CALL_OW 237
20726: GO 20628
20728: POP
20729: POP
// end ;
20730: PPOPN 3
20732: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
20733: LD_EXP 54
20737: PUSH
20738: LD_EXP 62
20742: AND
20743: IFFALSE 20763
20745: GO 20747
20747: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
20748: LD_INT 4
20750: PPUSH
20751: LD_OWVAR 2
20755: PPUSH
20756: LD_INT 0
20758: PPUSH
20759: CALL_OW 324
20763: END
// every 0 0$1 trigger StreamModeActive and sShovel do
20764: LD_EXP 54
20768: PUSH
20769: LD_EXP 91
20773: AND
20774: IFFALSE 20794
20776: GO 20778
20778: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
20779: LD_INT 19
20781: PPUSH
20782: LD_OWVAR 2
20786: PPUSH
20787: LD_INT 0
20789: PPUSH
20790: CALL_OW 324
20794: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
20795: LD_EXP 54
20799: PUSH
20800: LD_EXP 63
20804: AND
20805: IFFALSE 20907
20807: GO 20809
20809: DISABLE
20810: LD_INT 0
20812: PPUSH
20813: PPUSH
// begin enable ;
20814: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
20815: LD_ADDR_VAR 0 2
20819: PUSH
20820: LD_INT 22
20822: PUSH
20823: LD_OWVAR 2
20827: PUSH
20828: EMPTY
20829: LIST
20830: LIST
20831: PUSH
20832: LD_INT 2
20834: PUSH
20835: LD_INT 34
20837: PUSH
20838: LD_INT 11
20840: PUSH
20841: EMPTY
20842: LIST
20843: LIST
20844: PUSH
20845: LD_INT 34
20847: PUSH
20848: LD_INT 30
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: PUSH
20855: EMPTY
20856: LIST
20857: LIST
20858: LIST
20859: PUSH
20860: EMPTY
20861: LIST
20862: LIST
20863: PPUSH
20864: CALL_OW 69
20868: ST_TO_ADDR
// if not tmp then
20869: LD_VAR 0 2
20873: NOT
20874: IFFALSE 20878
// exit ;
20876: GO 20907
// for i in tmp do
20878: LD_ADDR_VAR 0 1
20882: PUSH
20883: LD_VAR 0 2
20887: PUSH
20888: FOR_IN
20889: IFFALSE 20905
// begin SetLives ( i , 0 ) ;
20891: LD_VAR 0 1
20895: PPUSH
20896: LD_INT 0
20898: PPUSH
20899: CALL_OW 234
// end ;
20903: GO 20888
20905: POP
20906: POP
// end ;
20907: PPOPN 2
20909: END
// every 0 0$1 trigger StreamModeActive and sBunker do
20910: LD_EXP 54
20914: PUSH
20915: LD_EXP 64
20919: AND
20920: IFFALSE 20940
20922: GO 20924
20924: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
20925: LD_INT 32
20927: PPUSH
20928: LD_OWVAR 2
20932: PPUSH
20933: LD_INT 0
20935: PPUSH
20936: CALL_OW 324
20940: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
20941: LD_EXP 54
20945: PUSH
20946: LD_EXP 65
20950: AND
20951: IFFALSE 21132
20953: GO 20955
20955: DISABLE
20956: LD_INT 0
20958: PPUSH
20959: PPUSH
20960: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
20961: LD_ADDR_VAR 0 2
20965: PUSH
20966: LD_INT 22
20968: PUSH
20969: LD_OWVAR 2
20973: PUSH
20974: EMPTY
20975: LIST
20976: LIST
20977: PUSH
20978: LD_INT 33
20980: PUSH
20981: LD_INT 3
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: PPUSH
20992: CALL_OW 69
20996: ST_TO_ADDR
// if not tmp then
20997: LD_VAR 0 2
21001: NOT
21002: IFFALSE 21006
// exit ;
21004: GO 21132
// side := 0 ;
21006: LD_ADDR_VAR 0 3
21010: PUSH
21011: LD_INT 0
21013: ST_TO_ADDR
// for i := 1 to 8 do
21014: LD_ADDR_VAR 0 1
21018: PUSH
21019: DOUBLE
21020: LD_INT 1
21022: DEC
21023: ST_TO_ADDR
21024: LD_INT 8
21026: PUSH
21027: FOR_TO
21028: IFFALSE 21076
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
21030: LD_OWVAR 2
21034: PUSH
21035: LD_VAR 0 1
21039: NONEQUAL
21040: PUSH
21041: LD_OWVAR 2
21045: PPUSH
21046: LD_VAR 0 1
21050: PPUSH
21051: CALL_OW 81
21055: PUSH
21056: LD_INT 2
21058: EQUAL
21059: AND
21060: IFFALSE 21074
// begin side := i ;
21062: LD_ADDR_VAR 0 3
21066: PUSH
21067: LD_VAR 0 1
21071: ST_TO_ADDR
// break ;
21072: GO 21076
// end ;
21074: GO 21027
21076: POP
21077: POP
// if not side then
21078: LD_VAR 0 3
21082: NOT
21083: IFFALSE 21087
// exit ;
21085: GO 21132
// for i := 1 to tmp do
21087: LD_ADDR_VAR 0 1
21091: PUSH
21092: DOUBLE
21093: LD_INT 1
21095: DEC
21096: ST_TO_ADDR
21097: LD_VAR 0 2
21101: PUSH
21102: FOR_TO
21103: IFFALSE 21130
// if Prob ( 60 ) then
21105: LD_INT 60
21107: PPUSH
21108: CALL_OW 13
21112: IFFALSE 21128
// SetSide ( i , side ) ;
21114: LD_VAR 0 1
21118: PPUSH
21119: LD_VAR 0 3
21123: PPUSH
21124: CALL_OW 235
21128: GO 21102
21130: POP
21131: POP
// end ;
21132: PPOPN 3
21134: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
21135: LD_EXP 54
21139: PUSH
21140: LD_EXP 67
21144: AND
21145: IFFALSE 21264
21147: GO 21149
21149: DISABLE
21150: LD_INT 0
21152: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
21153: LD_ADDR_VAR 0 1
21157: PUSH
21158: LD_INT 22
21160: PUSH
21161: LD_OWVAR 2
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: PUSH
21170: LD_INT 21
21172: PUSH
21173: LD_INT 1
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: PUSH
21180: LD_INT 3
21182: PUSH
21183: LD_INT 23
21185: PUSH
21186: LD_INT 0
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: PUSH
21197: EMPTY
21198: LIST
21199: LIST
21200: LIST
21201: PPUSH
21202: CALL_OW 69
21206: PUSH
21207: FOR_IN
21208: IFFALSE 21262
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
21210: LD_VAR 0 1
21214: PPUSH
21215: CALL_OW 257
21219: PUSH
21220: LD_INT 1
21222: PUSH
21223: LD_INT 2
21225: PUSH
21226: LD_INT 3
21228: PUSH
21229: LD_INT 4
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: IN
21238: IFFALSE 21260
// SetClass ( un , rand ( 1 , 4 ) ) ;
21240: LD_VAR 0 1
21244: PPUSH
21245: LD_INT 1
21247: PPUSH
21248: LD_INT 4
21250: PPUSH
21251: CALL_OW 12
21255: PPUSH
21256: CALL_OW 336
21260: GO 21207
21262: POP
21263: POP
// end ;
21264: PPOPN 1
21266: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
21267: LD_EXP 54
21271: PUSH
21272: LD_EXP 66
21276: AND
21277: IFFALSE 21356
21279: GO 21281
21281: DISABLE
21282: LD_INT 0
21284: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21285: LD_ADDR_VAR 0 1
21289: PUSH
21290: LD_INT 22
21292: PUSH
21293: LD_OWVAR 2
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: PUSH
21302: LD_INT 21
21304: PUSH
21305: LD_INT 3
21307: PUSH
21308: EMPTY
21309: LIST
21310: LIST
21311: PUSH
21312: EMPTY
21313: LIST
21314: LIST
21315: PPUSH
21316: CALL_OW 69
21320: ST_TO_ADDR
// if not tmp then
21321: LD_VAR 0 1
21325: NOT
21326: IFFALSE 21330
// exit ;
21328: GO 21356
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
21330: LD_VAR 0 1
21334: PUSH
21335: LD_INT 1
21337: PPUSH
21338: LD_VAR 0 1
21342: PPUSH
21343: CALL_OW 12
21347: ARRAY
21348: PPUSH
21349: LD_INT 100
21351: PPUSH
21352: CALL_OW 234
// end ;
21356: PPOPN 1
21358: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
21359: LD_EXP 54
21363: PUSH
21364: LD_EXP 68
21368: AND
21369: IFFALSE 21467
21371: GO 21373
21373: DISABLE
21374: LD_INT 0
21376: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21377: LD_ADDR_VAR 0 1
21381: PUSH
21382: LD_INT 22
21384: PUSH
21385: LD_OWVAR 2
21389: PUSH
21390: EMPTY
21391: LIST
21392: LIST
21393: PUSH
21394: LD_INT 21
21396: PUSH
21397: LD_INT 1
21399: PUSH
21400: EMPTY
21401: LIST
21402: LIST
21403: PUSH
21404: EMPTY
21405: LIST
21406: LIST
21407: PPUSH
21408: CALL_OW 69
21412: ST_TO_ADDR
// if not tmp then
21413: LD_VAR 0 1
21417: NOT
21418: IFFALSE 21422
// exit ;
21420: GO 21467
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
21422: LD_VAR 0 1
21426: PUSH
21427: LD_INT 1
21429: PPUSH
21430: LD_VAR 0 1
21434: PPUSH
21435: CALL_OW 12
21439: ARRAY
21440: PPUSH
21441: LD_INT 1
21443: PPUSH
21444: LD_INT 4
21446: PPUSH
21447: CALL_OW 12
21451: PPUSH
21452: LD_INT 3000
21454: PPUSH
21455: LD_INT 9000
21457: PPUSH
21458: CALL_OW 12
21462: PPUSH
21463: CALL_OW 492
// end ;
21467: PPOPN 1
21469: END
// every 0 0$1 trigger StreamModeActive and sDepot do
21470: LD_EXP 54
21474: PUSH
21475: LD_EXP 69
21479: AND
21480: IFFALSE 21500
21482: GO 21484
21484: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
21485: LD_INT 1
21487: PPUSH
21488: LD_OWVAR 2
21492: PPUSH
21493: LD_INT 0
21495: PPUSH
21496: CALL_OW 324
21500: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
21501: LD_EXP 54
21505: PUSH
21506: LD_EXP 70
21510: AND
21511: IFFALSE 21594
21513: GO 21515
21515: DISABLE
21516: LD_INT 0
21518: PPUSH
21519: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21520: LD_ADDR_VAR 0 2
21524: PUSH
21525: LD_INT 22
21527: PUSH
21528: LD_OWVAR 2
21532: PUSH
21533: EMPTY
21534: LIST
21535: LIST
21536: PUSH
21537: LD_INT 21
21539: PUSH
21540: LD_INT 3
21542: PUSH
21543: EMPTY
21544: LIST
21545: LIST
21546: PUSH
21547: EMPTY
21548: LIST
21549: LIST
21550: PPUSH
21551: CALL_OW 69
21555: ST_TO_ADDR
// if not tmp then
21556: LD_VAR 0 2
21560: NOT
21561: IFFALSE 21565
// exit ;
21563: GO 21594
// for i in tmp do
21565: LD_ADDR_VAR 0 1
21569: PUSH
21570: LD_VAR 0 2
21574: PUSH
21575: FOR_IN
21576: IFFALSE 21592
// SetBLevel ( i , 10 ) ;
21578: LD_VAR 0 1
21582: PPUSH
21583: LD_INT 10
21585: PPUSH
21586: CALL_OW 241
21590: GO 21575
21592: POP
21593: POP
// end ;
21594: PPOPN 2
21596: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
21597: LD_EXP 54
21601: PUSH
21602: LD_EXP 71
21606: AND
21607: IFFALSE 21718
21609: GO 21611
21611: DISABLE
21612: LD_INT 0
21614: PPUSH
21615: PPUSH
21616: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21617: LD_ADDR_VAR 0 3
21621: PUSH
21622: LD_INT 22
21624: PUSH
21625: LD_OWVAR 2
21629: PUSH
21630: EMPTY
21631: LIST
21632: LIST
21633: PUSH
21634: LD_INT 25
21636: PUSH
21637: LD_INT 1
21639: PUSH
21640: EMPTY
21641: LIST
21642: LIST
21643: PUSH
21644: EMPTY
21645: LIST
21646: LIST
21647: PPUSH
21648: CALL_OW 69
21652: ST_TO_ADDR
// if not tmp then
21653: LD_VAR 0 3
21657: NOT
21658: IFFALSE 21662
// exit ;
21660: GO 21718
// un := tmp [ rand ( 1 , tmp ) ] ;
21662: LD_ADDR_VAR 0 2
21666: PUSH
21667: LD_VAR 0 3
21671: PUSH
21672: LD_INT 1
21674: PPUSH
21675: LD_VAR 0 3
21679: PPUSH
21680: CALL_OW 12
21684: ARRAY
21685: ST_TO_ADDR
// if Crawls ( un ) then
21686: LD_VAR 0 2
21690: PPUSH
21691: CALL_OW 318
21695: IFFALSE 21706
// ComWalk ( un ) ;
21697: LD_VAR 0 2
21701: PPUSH
21702: CALL_OW 138
// SetClass ( un , class_sniper ) ;
21706: LD_VAR 0 2
21710: PPUSH
21711: LD_INT 5
21713: PPUSH
21714: CALL_OW 336
// end ;
21718: PPOPN 3
21720: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
21721: LD_EXP 54
21725: PUSH
21726: LD_EXP 72
21730: AND
21731: PUSH
21732: LD_OWVAR 67
21736: PUSH
21737: LD_INT 3
21739: LESS
21740: AND
21741: IFFALSE 21760
21743: GO 21745
21745: DISABLE
// Difficulty := Difficulty + 1 ;
21746: LD_ADDR_OWVAR 67
21750: PUSH
21751: LD_OWVAR 67
21755: PUSH
21756: LD_INT 1
21758: PLUS
21759: ST_TO_ADDR
21760: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
21761: LD_EXP 54
21765: PUSH
21766: LD_EXP 73
21770: AND
21771: IFFALSE 21874
21773: GO 21775
21775: DISABLE
21776: LD_INT 0
21778: PPUSH
// begin for i := 1 to 5 do
21779: LD_ADDR_VAR 0 1
21783: PUSH
21784: DOUBLE
21785: LD_INT 1
21787: DEC
21788: ST_TO_ADDR
21789: LD_INT 5
21791: PUSH
21792: FOR_TO
21793: IFFALSE 21872
// begin uc_nation := nation_nature ;
21795: LD_ADDR_OWVAR 21
21799: PUSH
21800: LD_INT 0
21802: ST_TO_ADDR
// uc_side := 0 ;
21803: LD_ADDR_OWVAR 20
21807: PUSH
21808: LD_INT 0
21810: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21811: LD_ADDR_OWVAR 29
21815: PUSH
21816: LD_INT 12
21818: PUSH
21819: LD_INT 12
21821: PUSH
21822: EMPTY
21823: LIST
21824: LIST
21825: ST_TO_ADDR
// hc_agressivity := 20 ;
21826: LD_ADDR_OWVAR 35
21830: PUSH
21831: LD_INT 20
21833: ST_TO_ADDR
// hc_class := class_tiger ;
21834: LD_ADDR_OWVAR 28
21838: PUSH
21839: LD_INT 14
21841: ST_TO_ADDR
// hc_gallery :=  ;
21842: LD_ADDR_OWVAR 33
21846: PUSH
21847: LD_STRING 
21849: ST_TO_ADDR
// hc_name :=  ;
21850: LD_ADDR_OWVAR 26
21854: PUSH
21855: LD_STRING 
21857: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
21858: CALL_OW 44
21862: PPUSH
21863: LD_INT 0
21865: PPUSH
21866: CALL_OW 51
// end ;
21870: GO 21792
21872: POP
21873: POP
// end ;
21874: PPOPN 1
21876: END
// every 0 0$1 trigger StreamModeActive and sBomb do
21877: LD_EXP 54
21881: PUSH
21882: LD_EXP 74
21886: AND
21887: IFFALSE 21896
21889: GO 21891
21891: DISABLE
// StreamSibBomb ;
21892: CALL 21897 0 0
21896: END
// export function StreamSibBomb ; var i , x , y ; begin
21897: LD_INT 0
21899: PPUSH
21900: PPUSH
21901: PPUSH
21902: PPUSH
// result := false ;
21903: LD_ADDR_VAR 0 1
21907: PUSH
21908: LD_INT 0
21910: ST_TO_ADDR
// for i := 1 to 16 do
21911: LD_ADDR_VAR 0 2
21915: PUSH
21916: DOUBLE
21917: LD_INT 1
21919: DEC
21920: ST_TO_ADDR
21921: LD_INT 16
21923: PUSH
21924: FOR_TO
21925: IFFALSE 22124
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
21927: LD_ADDR_VAR 0 3
21931: PUSH
21932: LD_INT 10
21934: PUSH
21935: LD_INT 20
21937: PUSH
21938: LD_INT 30
21940: PUSH
21941: LD_INT 40
21943: PUSH
21944: LD_INT 50
21946: PUSH
21947: LD_INT 60
21949: PUSH
21950: LD_INT 70
21952: PUSH
21953: LD_INT 80
21955: PUSH
21956: LD_INT 90
21958: PUSH
21959: LD_INT 100
21961: PUSH
21962: LD_INT 110
21964: PUSH
21965: LD_INT 120
21967: PUSH
21968: LD_INT 130
21970: PUSH
21971: LD_INT 140
21973: PUSH
21974: LD_INT 150
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: PUSH
21994: LD_INT 1
21996: PPUSH
21997: LD_INT 15
21999: PPUSH
22000: CALL_OW 12
22004: ARRAY
22005: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22006: LD_ADDR_VAR 0 4
22010: PUSH
22011: LD_INT 10
22013: PUSH
22014: LD_INT 20
22016: PUSH
22017: LD_INT 30
22019: PUSH
22020: LD_INT 40
22022: PUSH
22023: LD_INT 50
22025: PUSH
22026: LD_INT 60
22028: PUSH
22029: LD_INT 70
22031: PUSH
22032: LD_INT 80
22034: PUSH
22035: LD_INT 90
22037: PUSH
22038: LD_INT 100
22040: PUSH
22041: LD_INT 110
22043: PUSH
22044: LD_INT 120
22046: PUSH
22047: LD_INT 130
22049: PUSH
22050: LD_INT 140
22052: PUSH
22053: LD_INT 150
22055: PUSH
22056: EMPTY
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: PUSH
22073: LD_INT 1
22075: PPUSH
22076: LD_INT 15
22078: PPUSH
22079: CALL_OW 12
22083: ARRAY
22084: ST_TO_ADDR
// if ValidHex ( x , y ) then
22085: LD_VAR 0 3
22089: PPUSH
22090: LD_VAR 0 4
22094: PPUSH
22095: CALL_OW 488
22099: IFFALSE 22122
// begin result := [ x , y ] ;
22101: LD_ADDR_VAR 0 1
22105: PUSH
22106: LD_VAR 0 3
22110: PUSH
22111: LD_VAR 0 4
22115: PUSH
22116: EMPTY
22117: LIST
22118: LIST
22119: ST_TO_ADDR
// break ;
22120: GO 22124
// end ; end ;
22122: GO 21924
22124: POP
22125: POP
// if result then
22126: LD_VAR 0 1
22130: IFFALSE 22190
// begin ToLua ( playSibBomb() ) ;
22132: LD_STRING playSibBomb()
22134: PPUSH
22135: CALL_OW 559
// wait ( 0 0$14 ) ;
22139: LD_INT 490
22141: PPUSH
22142: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
22146: LD_VAR 0 1
22150: PUSH
22151: LD_INT 1
22153: ARRAY
22154: PPUSH
22155: LD_VAR 0 1
22159: PUSH
22160: LD_INT 2
22162: ARRAY
22163: PPUSH
22164: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
22168: LD_VAR 0 1
22172: PUSH
22173: LD_INT 1
22175: ARRAY
22176: PPUSH
22177: LD_VAR 0 1
22181: PUSH
22182: LD_INT 2
22184: ARRAY
22185: PPUSH
22186: CALL_OW 429
// end ; end ;
22190: LD_VAR 0 1
22194: RET
// every 0 0$1 trigger StreamModeActive and sReset do
22195: LD_EXP 54
22199: PUSH
22200: LD_EXP 76
22204: AND
22205: IFFALSE 22217
22207: GO 22209
22209: DISABLE
// YouLost (  ) ;
22210: LD_STRING 
22212: PPUSH
22213: CALL_OW 104
22217: END
// every 0 0$1 trigger StreamModeActive and sFog do
22218: LD_EXP 54
22222: PUSH
22223: LD_EXP 75
22227: AND
22228: IFFALSE 22242
22230: GO 22232
22232: DISABLE
// FogOff ( your_side ) ;
22233: LD_OWVAR 2
22237: PPUSH
22238: CALL_OW 344
22242: END
// every 0 0$1 trigger StreamModeActive and sSun do
22243: LD_EXP 54
22247: PUSH
22248: LD_EXP 77
22252: AND
22253: IFFALSE 22281
22255: GO 22257
22257: DISABLE
// begin solar_recharge_percent := 0 ;
22258: LD_ADDR_OWVAR 79
22262: PUSH
22263: LD_INT 0
22265: ST_TO_ADDR
// wait ( 5 5$00 ) ;
22266: LD_INT 10500
22268: PPUSH
22269: CALL_OW 67
// solar_recharge_percent := 100 ;
22273: LD_ADDR_OWVAR 79
22277: PUSH
22278: LD_INT 100
22280: ST_TO_ADDR
// end ;
22281: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
22282: LD_EXP 54
22286: PUSH
22287: LD_EXP 78
22291: AND
22292: IFFALSE 22531
22294: GO 22296
22296: DISABLE
22297: LD_INT 0
22299: PPUSH
22300: PPUSH
22301: PPUSH
// begin tmp := [ ] ;
22302: LD_ADDR_VAR 0 3
22306: PUSH
22307: EMPTY
22308: ST_TO_ADDR
// for i := 1 to 6 do
22309: LD_ADDR_VAR 0 1
22313: PUSH
22314: DOUBLE
22315: LD_INT 1
22317: DEC
22318: ST_TO_ADDR
22319: LD_INT 6
22321: PUSH
22322: FOR_TO
22323: IFFALSE 22428
// begin uc_nation := nation_nature ;
22325: LD_ADDR_OWVAR 21
22329: PUSH
22330: LD_INT 0
22332: ST_TO_ADDR
// uc_side := 0 ;
22333: LD_ADDR_OWVAR 20
22337: PUSH
22338: LD_INT 0
22340: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22341: LD_ADDR_OWVAR 29
22345: PUSH
22346: LD_INT 12
22348: PUSH
22349: LD_INT 12
22351: PUSH
22352: EMPTY
22353: LIST
22354: LIST
22355: ST_TO_ADDR
// hc_agressivity := 20 ;
22356: LD_ADDR_OWVAR 35
22360: PUSH
22361: LD_INT 20
22363: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
22364: LD_ADDR_OWVAR 28
22368: PUSH
22369: LD_INT 17
22371: ST_TO_ADDR
// hc_gallery :=  ;
22372: LD_ADDR_OWVAR 33
22376: PUSH
22377: LD_STRING 
22379: ST_TO_ADDR
// hc_name :=  ;
22380: LD_ADDR_OWVAR 26
22384: PUSH
22385: LD_STRING 
22387: ST_TO_ADDR
// un := CreateHuman ;
22388: LD_ADDR_VAR 0 2
22392: PUSH
22393: CALL_OW 44
22397: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
22398: LD_VAR 0 2
22402: PPUSH
22403: LD_INT 1
22405: PPUSH
22406: CALL_OW 51
// tmp := tmp ^ un ;
22410: LD_ADDR_VAR 0 3
22414: PUSH
22415: LD_VAR 0 3
22419: PUSH
22420: LD_VAR 0 2
22424: ADD
22425: ST_TO_ADDR
// end ;
22426: GO 22322
22428: POP
22429: POP
// repeat wait ( 0 0$1 ) ;
22430: LD_INT 35
22432: PPUSH
22433: CALL_OW 67
// for un in tmp do
22437: LD_ADDR_VAR 0 2
22441: PUSH
22442: LD_VAR 0 3
22446: PUSH
22447: FOR_IN
22448: IFFALSE 22522
// begin if IsDead ( un ) then
22450: LD_VAR 0 2
22454: PPUSH
22455: CALL_OW 301
22459: IFFALSE 22479
// begin tmp := tmp diff un ;
22461: LD_ADDR_VAR 0 3
22465: PUSH
22466: LD_VAR 0 3
22470: PUSH
22471: LD_VAR 0 2
22475: DIFF
22476: ST_TO_ADDR
// continue ;
22477: GO 22447
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
22479: LD_VAR 0 2
22483: PPUSH
22484: LD_INT 3
22486: PUSH
22487: LD_INT 22
22489: PUSH
22490: LD_INT 0
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: PUSH
22497: EMPTY
22498: LIST
22499: LIST
22500: PPUSH
22501: CALL_OW 69
22505: PPUSH
22506: LD_VAR 0 2
22510: PPUSH
22511: CALL_OW 74
22515: PPUSH
22516: CALL_OW 115
// end ;
22520: GO 22447
22522: POP
22523: POP
// until not tmp ;
22524: LD_VAR 0 3
22528: NOT
22529: IFFALSE 22430
// end ;
22531: PPOPN 3
22533: END
// every 0 0$1 trigger StreamModeActive and sTroll do
22534: LD_EXP 54
22538: PUSH
22539: LD_EXP 79
22543: AND
22544: IFFALSE 22598
22546: GO 22548
22548: DISABLE
// begin ToLua ( displayTroll(); ) ;
22549: LD_STRING displayTroll();
22551: PPUSH
22552: CALL_OW 559
// wait ( 3 3$00 ) ;
22556: LD_INT 6300
22558: PPUSH
22559: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22563: LD_STRING hideTroll();
22565: PPUSH
22566: CALL_OW 559
// wait ( 1 1$00 ) ;
22570: LD_INT 2100
22572: PPUSH
22573: CALL_OW 67
// ToLua ( displayTroll(); ) ;
22577: LD_STRING displayTroll();
22579: PPUSH
22580: CALL_OW 559
// wait ( 1 1$00 ) ;
22584: LD_INT 2100
22586: PPUSH
22587: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22591: LD_STRING hideTroll();
22593: PPUSH
22594: CALL_OW 559
// end ;
22598: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
22599: LD_EXP 54
22603: PUSH
22604: LD_EXP 80
22608: AND
22609: IFFALSE 22672
22611: GO 22613
22613: DISABLE
22614: LD_INT 0
22616: PPUSH
// begin p := 0 ;
22617: LD_ADDR_VAR 0 1
22621: PUSH
22622: LD_INT 0
22624: ST_TO_ADDR
// repeat game_speed := 1 ;
22625: LD_ADDR_OWVAR 65
22629: PUSH
22630: LD_INT 1
22632: ST_TO_ADDR
// wait ( 0 0$1 ) ;
22633: LD_INT 35
22635: PPUSH
22636: CALL_OW 67
// p := p + 1 ;
22640: LD_ADDR_VAR 0 1
22644: PUSH
22645: LD_VAR 0 1
22649: PUSH
22650: LD_INT 1
22652: PLUS
22653: ST_TO_ADDR
// until p >= 60 ;
22654: LD_VAR 0 1
22658: PUSH
22659: LD_INT 60
22661: GREATEREQUAL
22662: IFFALSE 22625
// game_speed := 4 ;
22664: LD_ADDR_OWVAR 65
22668: PUSH
22669: LD_INT 4
22671: ST_TO_ADDR
// end ;
22672: PPOPN 1
22674: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
22675: LD_EXP 54
22679: PUSH
22680: LD_EXP 81
22684: AND
22685: IFFALSE 22831
22687: GO 22689
22689: DISABLE
22690: LD_INT 0
22692: PPUSH
22693: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22694: LD_ADDR_VAR 0 1
22698: PUSH
22699: LD_INT 22
22701: PUSH
22702: LD_OWVAR 2
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: PUSH
22711: LD_INT 2
22713: PUSH
22714: LD_INT 30
22716: PUSH
22717: LD_INT 0
22719: PUSH
22720: EMPTY
22721: LIST
22722: LIST
22723: PUSH
22724: LD_INT 30
22726: PUSH
22727: LD_INT 1
22729: PUSH
22730: EMPTY
22731: LIST
22732: LIST
22733: PUSH
22734: EMPTY
22735: LIST
22736: LIST
22737: LIST
22738: PUSH
22739: EMPTY
22740: LIST
22741: LIST
22742: PPUSH
22743: CALL_OW 69
22747: ST_TO_ADDR
// if not depot then
22748: LD_VAR 0 1
22752: NOT
22753: IFFALSE 22757
// exit ;
22755: GO 22831
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
22757: LD_ADDR_VAR 0 2
22761: PUSH
22762: LD_VAR 0 1
22766: PUSH
22767: LD_INT 1
22769: PPUSH
22770: LD_VAR 0 1
22774: PPUSH
22775: CALL_OW 12
22779: ARRAY
22780: PPUSH
22781: CALL_OW 274
22785: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
22786: LD_VAR 0 2
22790: PPUSH
22791: LD_INT 1
22793: PPUSH
22794: LD_INT 0
22796: PPUSH
22797: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
22801: LD_VAR 0 2
22805: PPUSH
22806: LD_INT 2
22808: PPUSH
22809: LD_INT 0
22811: PPUSH
22812: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
22816: LD_VAR 0 2
22820: PPUSH
22821: LD_INT 3
22823: PPUSH
22824: LD_INT 0
22826: PPUSH
22827: CALL_OW 277
// end ;
22831: PPOPN 2
22833: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
22834: LD_EXP 54
22838: PUSH
22839: LD_EXP 82
22843: AND
22844: IFFALSE 22941
22846: GO 22848
22848: DISABLE
22849: LD_INT 0
22851: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22852: LD_ADDR_VAR 0 1
22856: PUSH
22857: LD_INT 22
22859: PUSH
22860: LD_OWVAR 2
22864: PUSH
22865: EMPTY
22866: LIST
22867: LIST
22868: PUSH
22869: LD_INT 21
22871: PUSH
22872: LD_INT 1
22874: PUSH
22875: EMPTY
22876: LIST
22877: LIST
22878: PUSH
22879: LD_INT 3
22881: PUSH
22882: LD_INT 23
22884: PUSH
22885: LD_INT 0
22887: PUSH
22888: EMPTY
22889: LIST
22890: LIST
22891: PUSH
22892: EMPTY
22893: LIST
22894: LIST
22895: PUSH
22896: EMPTY
22897: LIST
22898: LIST
22899: LIST
22900: PPUSH
22901: CALL_OW 69
22905: ST_TO_ADDR
// if not tmp then
22906: LD_VAR 0 1
22910: NOT
22911: IFFALSE 22915
// exit ;
22913: GO 22941
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
22915: LD_VAR 0 1
22919: PUSH
22920: LD_INT 1
22922: PPUSH
22923: LD_VAR 0 1
22927: PPUSH
22928: CALL_OW 12
22932: ARRAY
22933: PPUSH
22934: LD_INT 200
22936: PPUSH
22937: CALL_OW 234
// end ;
22941: PPOPN 1
22943: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
22944: LD_EXP 54
22948: PUSH
22949: LD_EXP 83
22953: AND
22954: IFFALSE 23033
22956: GO 22958
22958: DISABLE
22959: LD_INT 0
22961: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
22962: LD_ADDR_VAR 0 1
22966: PUSH
22967: LD_INT 22
22969: PUSH
22970: LD_OWVAR 2
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: PUSH
22979: LD_INT 21
22981: PUSH
22982: LD_INT 2
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: PUSH
22989: EMPTY
22990: LIST
22991: LIST
22992: PPUSH
22993: CALL_OW 69
22997: ST_TO_ADDR
// if not tmp then
22998: LD_VAR 0 1
23002: NOT
23003: IFFALSE 23007
// exit ;
23005: GO 23033
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
23007: LD_VAR 0 1
23011: PUSH
23012: LD_INT 1
23014: PPUSH
23015: LD_VAR 0 1
23019: PPUSH
23020: CALL_OW 12
23024: ARRAY
23025: PPUSH
23026: LD_INT 60
23028: PPUSH
23029: CALL_OW 234
// end ;
23033: PPOPN 1
23035: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
23036: LD_EXP 54
23040: PUSH
23041: LD_EXP 84
23045: AND
23046: IFFALSE 23145
23048: GO 23050
23050: DISABLE
23051: LD_INT 0
23053: PPUSH
23054: PPUSH
// begin enable ;
23055: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
23056: LD_ADDR_VAR 0 1
23060: PUSH
23061: LD_INT 22
23063: PUSH
23064: LD_OWVAR 2
23068: PUSH
23069: EMPTY
23070: LIST
23071: LIST
23072: PUSH
23073: LD_INT 61
23075: PUSH
23076: EMPTY
23077: LIST
23078: PUSH
23079: LD_INT 33
23081: PUSH
23082: LD_INT 2
23084: PUSH
23085: EMPTY
23086: LIST
23087: LIST
23088: PUSH
23089: EMPTY
23090: LIST
23091: LIST
23092: LIST
23093: PPUSH
23094: CALL_OW 69
23098: ST_TO_ADDR
// if not tmp then
23099: LD_VAR 0 1
23103: NOT
23104: IFFALSE 23108
// exit ;
23106: GO 23145
// for i in tmp do
23108: LD_ADDR_VAR 0 2
23112: PUSH
23113: LD_VAR 0 1
23117: PUSH
23118: FOR_IN
23119: IFFALSE 23143
// if IsControledBy ( i ) then
23121: LD_VAR 0 2
23125: PPUSH
23126: CALL_OW 312
23130: IFFALSE 23141
// ComUnlink ( i ) ;
23132: LD_VAR 0 2
23136: PPUSH
23137: CALL_OW 136
23141: GO 23118
23143: POP
23144: POP
// end ;
23145: PPOPN 2
23147: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
23148: LD_EXP 54
23152: PUSH
23153: LD_EXP 85
23157: AND
23158: IFFALSE 23298
23160: GO 23162
23162: DISABLE
23163: LD_INT 0
23165: PPUSH
23166: PPUSH
// begin ToLua ( displayPowell(); ) ;
23167: LD_STRING displayPowell();
23169: PPUSH
23170: CALL_OW 559
// uc_side := 0 ;
23174: LD_ADDR_OWVAR 20
23178: PUSH
23179: LD_INT 0
23181: ST_TO_ADDR
// uc_nation := 2 ;
23182: LD_ADDR_OWVAR 21
23186: PUSH
23187: LD_INT 2
23189: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
23190: LD_ADDR_OWVAR 37
23194: PUSH
23195: LD_INT 14
23197: ST_TO_ADDR
// vc_engine := engine_siberite ;
23198: LD_ADDR_OWVAR 39
23202: PUSH
23203: LD_INT 3
23205: ST_TO_ADDR
// vc_control := control_apeman ;
23206: LD_ADDR_OWVAR 38
23210: PUSH
23211: LD_INT 5
23213: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
23214: LD_ADDR_OWVAR 40
23218: PUSH
23219: LD_INT 29
23221: ST_TO_ADDR
// un := CreateVehicle ;
23222: LD_ADDR_VAR 0 2
23226: PUSH
23227: CALL_OW 45
23231: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23232: LD_VAR 0 2
23236: PPUSH
23237: LD_INT 1
23239: PPUSH
23240: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23244: LD_INT 35
23246: PPUSH
23247: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23251: LD_VAR 0 2
23255: PPUSH
23256: LD_INT 22
23258: PUSH
23259: LD_OWVAR 2
23263: PUSH
23264: EMPTY
23265: LIST
23266: LIST
23267: PPUSH
23268: CALL_OW 69
23272: PPUSH
23273: LD_VAR 0 2
23277: PPUSH
23278: CALL_OW 74
23282: PPUSH
23283: CALL_OW 115
// until IsDead ( un ) ;
23287: LD_VAR 0 2
23291: PPUSH
23292: CALL_OW 301
23296: IFFALSE 23244
// end ;
23298: PPOPN 2
23300: END
// every 0 0$1 trigger StreamModeActive and sStu do
23301: LD_EXP 54
23305: PUSH
23306: LD_EXP 93
23310: AND
23311: IFFALSE 23327
23313: GO 23315
23315: DISABLE
// begin ToLua ( displayStucuk(); ) ;
23316: LD_STRING displayStucuk();
23318: PPUSH
23319: CALL_OW 559
// ResetFog ;
23323: CALL_OW 335
// end ;
23327: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
23328: LD_EXP 54
23332: PUSH
23333: LD_EXP 86
23337: AND
23338: IFFALSE 23479
23340: GO 23342
23342: DISABLE
23343: LD_INT 0
23345: PPUSH
23346: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23347: LD_ADDR_VAR 0 2
23351: PUSH
23352: LD_INT 22
23354: PUSH
23355: LD_OWVAR 2
23359: PUSH
23360: EMPTY
23361: LIST
23362: LIST
23363: PUSH
23364: LD_INT 21
23366: PUSH
23367: LD_INT 1
23369: PUSH
23370: EMPTY
23371: LIST
23372: LIST
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: PPUSH
23378: CALL_OW 69
23382: ST_TO_ADDR
// if not tmp then
23383: LD_VAR 0 2
23387: NOT
23388: IFFALSE 23392
// exit ;
23390: GO 23479
// un := tmp [ rand ( 1 , tmp ) ] ;
23392: LD_ADDR_VAR 0 1
23396: PUSH
23397: LD_VAR 0 2
23401: PUSH
23402: LD_INT 1
23404: PPUSH
23405: LD_VAR 0 2
23409: PPUSH
23410: CALL_OW 12
23414: ARRAY
23415: ST_TO_ADDR
// SetSide ( un , 0 ) ;
23416: LD_VAR 0 1
23420: PPUSH
23421: LD_INT 0
23423: PPUSH
23424: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
23428: LD_VAR 0 1
23432: PPUSH
23433: LD_OWVAR 3
23437: PUSH
23438: LD_VAR 0 1
23442: DIFF
23443: PPUSH
23444: LD_VAR 0 1
23448: PPUSH
23449: CALL_OW 74
23453: PPUSH
23454: CALL_OW 115
// wait ( 0 0$20 ) ;
23458: LD_INT 700
23460: PPUSH
23461: CALL_OW 67
// SetSide ( un , your_side ) ;
23465: LD_VAR 0 1
23469: PPUSH
23470: LD_OWVAR 2
23474: PPUSH
23475: CALL_OW 235
// end ;
23479: PPOPN 2
23481: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
23482: LD_EXP 54
23486: PUSH
23487: LD_EXP 87
23491: AND
23492: IFFALSE 23598
23494: GO 23496
23496: DISABLE
23497: LD_INT 0
23499: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23500: LD_ADDR_VAR 0 1
23504: PUSH
23505: LD_INT 22
23507: PUSH
23508: LD_OWVAR 2
23512: PUSH
23513: EMPTY
23514: LIST
23515: LIST
23516: PUSH
23517: LD_INT 2
23519: PUSH
23520: LD_INT 30
23522: PUSH
23523: LD_INT 0
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: PUSH
23530: LD_INT 30
23532: PUSH
23533: LD_INT 1
23535: PUSH
23536: EMPTY
23537: LIST
23538: LIST
23539: PUSH
23540: EMPTY
23541: LIST
23542: LIST
23543: LIST
23544: PUSH
23545: EMPTY
23546: LIST
23547: LIST
23548: PPUSH
23549: CALL_OW 69
23553: ST_TO_ADDR
// if not depot then
23554: LD_VAR 0 1
23558: NOT
23559: IFFALSE 23563
// exit ;
23561: GO 23598
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
23563: LD_VAR 0 1
23567: PUSH
23568: LD_INT 1
23570: ARRAY
23571: PPUSH
23572: CALL_OW 250
23576: PPUSH
23577: LD_VAR 0 1
23581: PUSH
23582: LD_INT 1
23584: ARRAY
23585: PPUSH
23586: CALL_OW 251
23590: PPUSH
23591: LD_INT 70
23593: PPUSH
23594: CALL_OW 495
// end ;
23598: PPOPN 1
23600: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
23601: LD_EXP 54
23605: PUSH
23606: LD_EXP 88
23610: AND
23611: IFFALSE 23822
23613: GO 23615
23615: DISABLE
23616: LD_INT 0
23618: PPUSH
23619: PPUSH
23620: PPUSH
23621: PPUSH
23622: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23623: LD_ADDR_VAR 0 5
23627: PUSH
23628: LD_INT 22
23630: PUSH
23631: LD_OWVAR 2
23635: PUSH
23636: EMPTY
23637: LIST
23638: LIST
23639: PUSH
23640: LD_INT 21
23642: PUSH
23643: LD_INT 1
23645: PUSH
23646: EMPTY
23647: LIST
23648: LIST
23649: PUSH
23650: EMPTY
23651: LIST
23652: LIST
23653: PPUSH
23654: CALL_OW 69
23658: ST_TO_ADDR
// if not tmp then
23659: LD_VAR 0 5
23663: NOT
23664: IFFALSE 23668
// exit ;
23666: GO 23822
// for i in tmp do
23668: LD_ADDR_VAR 0 1
23672: PUSH
23673: LD_VAR 0 5
23677: PUSH
23678: FOR_IN
23679: IFFALSE 23820
// begin d := rand ( 0 , 5 ) ;
23681: LD_ADDR_VAR 0 4
23685: PUSH
23686: LD_INT 0
23688: PPUSH
23689: LD_INT 5
23691: PPUSH
23692: CALL_OW 12
23696: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
23697: LD_ADDR_VAR 0 2
23701: PUSH
23702: LD_VAR 0 1
23706: PPUSH
23707: CALL_OW 250
23711: PPUSH
23712: LD_VAR 0 4
23716: PPUSH
23717: LD_INT 3
23719: PPUSH
23720: LD_INT 12
23722: PPUSH
23723: CALL_OW 12
23727: PPUSH
23728: CALL_OW 272
23732: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
23733: LD_ADDR_VAR 0 3
23737: PUSH
23738: LD_VAR 0 1
23742: PPUSH
23743: CALL_OW 251
23747: PPUSH
23748: LD_VAR 0 4
23752: PPUSH
23753: LD_INT 3
23755: PPUSH
23756: LD_INT 12
23758: PPUSH
23759: CALL_OW 12
23763: PPUSH
23764: CALL_OW 273
23768: ST_TO_ADDR
// if ValidHex ( x , y ) then
23769: LD_VAR 0 2
23773: PPUSH
23774: LD_VAR 0 3
23778: PPUSH
23779: CALL_OW 488
23783: IFFALSE 23818
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
23785: LD_VAR 0 1
23789: PPUSH
23790: LD_VAR 0 2
23794: PPUSH
23795: LD_VAR 0 3
23799: PPUSH
23800: LD_INT 3
23802: PPUSH
23803: LD_INT 6
23805: PPUSH
23806: CALL_OW 12
23810: PPUSH
23811: LD_INT 1
23813: PPUSH
23814: CALL_OW 483
// end ;
23818: GO 23678
23820: POP
23821: POP
// end ;
23822: PPOPN 5
23824: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
23825: LD_EXP 54
23829: PUSH
23830: LD_EXP 89
23834: AND
23835: IFFALSE 23929
23837: GO 23839
23839: DISABLE
23840: LD_INT 0
23842: PPUSH
23843: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
23844: LD_ADDR_VAR 0 2
23848: PUSH
23849: LD_INT 22
23851: PUSH
23852: LD_OWVAR 2
23856: PUSH
23857: EMPTY
23858: LIST
23859: LIST
23860: PUSH
23861: LD_INT 32
23863: PUSH
23864: LD_INT 1
23866: PUSH
23867: EMPTY
23868: LIST
23869: LIST
23870: PUSH
23871: LD_INT 21
23873: PUSH
23874: LD_INT 2
23876: PUSH
23877: EMPTY
23878: LIST
23879: LIST
23880: PUSH
23881: EMPTY
23882: LIST
23883: LIST
23884: LIST
23885: PPUSH
23886: CALL_OW 69
23890: ST_TO_ADDR
// if not tmp then
23891: LD_VAR 0 2
23895: NOT
23896: IFFALSE 23900
// exit ;
23898: GO 23929
// for i in tmp do
23900: LD_ADDR_VAR 0 1
23904: PUSH
23905: LD_VAR 0 2
23909: PUSH
23910: FOR_IN
23911: IFFALSE 23927
// SetFuel ( i , 0 ) ;
23913: LD_VAR 0 1
23917: PPUSH
23918: LD_INT 0
23920: PPUSH
23921: CALL_OW 240
23925: GO 23910
23927: POP
23928: POP
// end ;
23929: PPOPN 2
23931: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
23932: LD_EXP 54
23936: PUSH
23937: LD_EXP 90
23941: AND
23942: IFFALSE 24008
23944: GO 23946
23946: DISABLE
23947: LD_INT 0
23949: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23950: LD_ADDR_VAR 0 1
23954: PUSH
23955: LD_INT 22
23957: PUSH
23958: LD_OWVAR 2
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: PUSH
23967: LD_INT 30
23969: PUSH
23970: LD_INT 29
23972: PUSH
23973: EMPTY
23974: LIST
23975: LIST
23976: PUSH
23977: EMPTY
23978: LIST
23979: LIST
23980: PPUSH
23981: CALL_OW 69
23985: ST_TO_ADDR
// if not tmp then
23986: LD_VAR 0 1
23990: NOT
23991: IFFALSE 23995
// exit ;
23993: GO 24008
// DestroyUnit ( tmp [ 1 ] ) ;
23995: LD_VAR 0 1
23999: PUSH
24000: LD_INT 1
24002: ARRAY
24003: PPUSH
24004: CALL_OW 65
// end ;
24008: PPOPN 1
24010: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
24011: LD_EXP 54
24015: PUSH
24016: LD_EXP 92
24020: AND
24021: IFFALSE 24150
24023: GO 24025
24025: DISABLE
24026: LD_INT 0
24028: PPUSH
// begin uc_side := 0 ;
24029: LD_ADDR_OWVAR 20
24033: PUSH
24034: LD_INT 0
24036: ST_TO_ADDR
// uc_nation := nation_arabian ;
24037: LD_ADDR_OWVAR 21
24041: PUSH
24042: LD_INT 2
24044: ST_TO_ADDR
// hc_gallery :=  ;
24045: LD_ADDR_OWVAR 33
24049: PUSH
24050: LD_STRING 
24052: ST_TO_ADDR
// hc_name :=  ;
24053: LD_ADDR_OWVAR 26
24057: PUSH
24058: LD_STRING 
24060: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
24061: LD_INT 1
24063: PPUSH
24064: LD_INT 11
24066: PPUSH
24067: LD_INT 10
24069: PPUSH
24070: CALL_OW 380
// un := CreateHuman ;
24074: LD_ADDR_VAR 0 1
24078: PUSH
24079: CALL_OW 44
24083: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24084: LD_VAR 0 1
24088: PPUSH
24089: LD_INT 1
24091: PPUSH
24092: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24096: LD_INT 35
24098: PPUSH
24099: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24103: LD_VAR 0 1
24107: PPUSH
24108: LD_INT 22
24110: PUSH
24111: LD_OWVAR 2
24115: PUSH
24116: EMPTY
24117: LIST
24118: LIST
24119: PPUSH
24120: CALL_OW 69
24124: PPUSH
24125: LD_VAR 0 1
24129: PPUSH
24130: CALL_OW 74
24134: PPUSH
24135: CALL_OW 115
// until IsDead ( un ) ;
24139: LD_VAR 0 1
24143: PPUSH
24144: CALL_OW 301
24148: IFFALSE 24096
// end ;
24150: PPOPN 1
24152: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
24153: LD_EXP 54
24157: PUSH
24158: LD_EXP 94
24162: AND
24163: IFFALSE 24175
24165: GO 24167
24167: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
24168: LD_STRING earthquake(getX(game), 0, 32)
24170: PPUSH
24171: CALL_OW 559
24175: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
24176: LD_EXP 54
24180: PUSH
24181: LD_EXP 95
24185: AND
24186: IFFALSE 24277
24188: GO 24190
24190: DISABLE
24191: LD_INT 0
24193: PPUSH
// begin enable ;
24194: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
24195: LD_ADDR_VAR 0 1
24199: PUSH
24200: LD_INT 22
24202: PUSH
24203: LD_OWVAR 2
24207: PUSH
24208: EMPTY
24209: LIST
24210: LIST
24211: PUSH
24212: LD_INT 21
24214: PUSH
24215: LD_INT 2
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: PUSH
24222: LD_INT 33
24224: PUSH
24225: LD_INT 3
24227: PUSH
24228: EMPTY
24229: LIST
24230: LIST
24231: PUSH
24232: EMPTY
24233: LIST
24234: LIST
24235: LIST
24236: PPUSH
24237: CALL_OW 69
24241: ST_TO_ADDR
// if not tmp then
24242: LD_VAR 0 1
24246: NOT
24247: IFFALSE 24251
// exit ;
24249: GO 24277
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24251: LD_VAR 0 1
24255: PUSH
24256: LD_INT 1
24258: PPUSH
24259: LD_VAR 0 1
24263: PPUSH
24264: CALL_OW 12
24268: ARRAY
24269: PPUSH
24270: LD_INT 1
24272: PPUSH
24273: CALL_OW 234
// end ;
24277: PPOPN 1
24279: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
24280: LD_EXP 54
24284: PUSH
24285: LD_EXP 96
24289: AND
24290: IFFALSE 24431
24292: GO 24294
24294: DISABLE
24295: LD_INT 0
24297: PPUSH
24298: PPUSH
24299: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24300: LD_ADDR_VAR 0 3
24304: PUSH
24305: LD_INT 22
24307: PUSH
24308: LD_OWVAR 2
24312: PUSH
24313: EMPTY
24314: LIST
24315: LIST
24316: PUSH
24317: LD_INT 25
24319: PUSH
24320: LD_INT 1
24322: PUSH
24323: EMPTY
24324: LIST
24325: LIST
24326: PUSH
24327: EMPTY
24328: LIST
24329: LIST
24330: PPUSH
24331: CALL_OW 69
24335: ST_TO_ADDR
// if not tmp then
24336: LD_VAR 0 3
24340: NOT
24341: IFFALSE 24345
// exit ;
24343: GO 24431
// un := tmp [ rand ( 1 , tmp ) ] ;
24345: LD_ADDR_VAR 0 2
24349: PUSH
24350: LD_VAR 0 3
24354: PUSH
24355: LD_INT 1
24357: PPUSH
24358: LD_VAR 0 3
24362: PPUSH
24363: CALL_OW 12
24367: ARRAY
24368: ST_TO_ADDR
// if Crawls ( un ) then
24369: LD_VAR 0 2
24373: PPUSH
24374: CALL_OW 318
24378: IFFALSE 24389
// ComWalk ( un ) ;
24380: LD_VAR 0 2
24384: PPUSH
24385: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
24389: LD_VAR 0 2
24393: PPUSH
24394: LD_INT 9
24396: PPUSH
24397: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
24401: LD_INT 28
24403: PPUSH
24404: LD_OWVAR 2
24408: PPUSH
24409: LD_INT 2
24411: PPUSH
24412: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
24416: LD_INT 29
24418: PPUSH
24419: LD_OWVAR 2
24423: PPUSH
24424: LD_INT 2
24426: PPUSH
24427: CALL_OW 322
// end ;
24431: PPOPN 3
24433: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
24434: LD_EXP 54
24438: PUSH
24439: LD_EXP 97
24443: AND
24444: IFFALSE 24555
24446: GO 24448
24448: DISABLE
24449: LD_INT 0
24451: PPUSH
24452: PPUSH
24453: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24454: LD_ADDR_VAR 0 3
24458: PUSH
24459: LD_INT 22
24461: PUSH
24462: LD_OWVAR 2
24466: PUSH
24467: EMPTY
24468: LIST
24469: LIST
24470: PUSH
24471: LD_INT 25
24473: PUSH
24474: LD_INT 1
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: PUSH
24481: EMPTY
24482: LIST
24483: LIST
24484: PPUSH
24485: CALL_OW 69
24489: ST_TO_ADDR
// if not tmp then
24490: LD_VAR 0 3
24494: NOT
24495: IFFALSE 24499
// exit ;
24497: GO 24555
// un := tmp [ rand ( 1 , tmp ) ] ;
24499: LD_ADDR_VAR 0 2
24503: PUSH
24504: LD_VAR 0 3
24508: PUSH
24509: LD_INT 1
24511: PPUSH
24512: LD_VAR 0 3
24516: PPUSH
24517: CALL_OW 12
24521: ARRAY
24522: ST_TO_ADDR
// if Crawls ( un ) then
24523: LD_VAR 0 2
24527: PPUSH
24528: CALL_OW 318
24532: IFFALSE 24543
// ComWalk ( un ) ;
24534: LD_VAR 0 2
24538: PPUSH
24539: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24543: LD_VAR 0 2
24547: PPUSH
24548: LD_INT 8
24550: PPUSH
24551: CALL_OW 336
// end ;
24555: PPOPN 3
24557: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
24558: LD_EXP 54
24562: PUSH
24563: LD_EXP 98
24567: AND
24568: IFFALSE 24712
24570: GO 24572
24572: DISABLE
24573: LD_INT 0
24575: PPUSH
24576: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
24577: LD_ADDR_VAR 0 2
24581: PUSH
24582: LD_INT 22
24584: PUSH
24585: LD_OWVAR 2
24589: PUSH
24590: EMPTY
24591: LIST
24592: LIST
24593: PUSH
24594: LD_INT 21
24596: PUSH
24597: LD_INT 2
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: PUSH
24604: LD_INT 2
24606: PUSH
24607: LD_INT 34
24609: PUSH
24610: LD_INT 12
24612: PUSH
24613: EMPTY
24614: LIST
24615: LIST
24616: PUSH
24617: LD_INT 34
24619: PUSH
24620: LD_INT 51
24622: PUSH
24623: EMPTY
24624: LIST
24625: LIST
24626: PUSH
24627: LD_INT 34
24629: PUSH
24630: LD_INT 32
24632: PUSH
24633: EMPTY
24634: LIST
24635: LIST
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: PUSH
24643: EMPTY
24644: LIST
24645: LIST
24646: LIST
24647: PPUSH
24648: CALL_OW 69
24652: ST_TO_ADDR
// if not tmp then
24653: LD_VAR 0 2
24657: NOT
24658: IFFALSE 24662
// exit ;
24660: GO 24712
// for i in tmp do
24662: LD_ADDR_VAR 0 1
24666: PUSH
24667: LD_VAR 0 2
24671: PUSH
24672: FOR_IN
24673: IFFALSE 24710
// if GetCargo ( i , mat_artifact ) = 0 then
24675: LD_VAR 0 1
24679: PPUSH
24680: LD_INT 4
24682: PPUSH
24683: CALL_OW 289
24687: PUSH
24688: LD_INT 0
24690: EQUAL
24691: IFFALSE 24708
// SetCargo ( i , mat_siberit , 100 ) ;
24693: LD_VAR 0 1
24697: PPUSH
24698: LD_INT 3
24700: PPUSH
24701: LD_INT 100
24703: PPUSH
24704: CALL_OW 290
24708: GO 24672
24710: POP
24711: POP
// end ;
24712: PPOPN 2
24714: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
24715: LD_EXP 54
24719: PUSH
24720: LD_EXP 99
24724: AND
24725: IFFALSE 24908
24727: GO 24729
24729: DISABLE
24730: LD_INT 0
24732: PPUSH
24733: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24734: LD_ADDR_VAR 0 2
24738: PUSH
24739: LD_INT 22
24741: PUSH
24742: LD_OWVAR 2
24746: PUSH
24747: EMPTY
24748: LIST
24749: LIST
24750: PPUSH
24751: CALL_OW 69
24755: ST_TO_ADDR
// if not tmp then
24756: LD_VAR 0 2
24760: NOT
24761: IFFALSE 24765
// exit ;
24763: GO 24908
// for i := 1 to 2 do
24765: LD_ADDR_VAR 0 1
24769: PUSH
24770: DOUBLE
24771: LD_INT 1
24773: DEC
24774: ST_TO_ADDR
24775: LD_INT 2
24777: PUSH
24778: FOR_TO
24779: IFFALSE 24906
// begin uc_side := your_side ;
24781: LD_ADDR_OWVAR 20
24785: PUSH
24786: LD_OWVAR 2
24790: ST_TO_ADDR
// uc_nation := nation_american ;
24791: LD_ADDR_OWVAR 21
24795: PUSH
24796: LD_INT 1
24798: ST_TO_ADDR
// vc_chassis := us_morphling ;
24799: LD_ADDR_OWVAR 37
24803: PUSH
24804: LD_INT 5
24806: ST_TO_ADDR
// vc_engine := engine_siberite ;
24807: LD_ADDR_OWVAR 39
24811: PUSH
24812: LD_INT 3
24814: ST_TO_ADDR
// vc_control := control_computer ;
24815: LD_ADDR_OWVAR 38
24819: PUSH
24820: LD_INT 3
24822: ST_TO_ADDR
// vc_weapon := us_double_laser ;
24823: LD_ADDR_OWVAR 40
24827: PUSH
24828: LD_INT 10
24830: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
24831: LD_VAR 0 2
24835: PUSH
24836: LD_INT 1
24838: ARRAY
24839: PPUSH
24840: CALL_OW 310
24844: NOT
24845: IFFALSE 24892
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
24847: CALL_OW 45
24851: PPUSH
24852: LD_VAR 0 2
24856: PUSH
24857: LD_INT 1
24859: ARRAY
24860: PPUSH
24861: CALL_OW 250
24865: PPUSH
24866: LD_VAR 0 2
24870: PUSH
24871: LD_INT 1
24873: ARRAY
24874: PPUSH
24875: CALL_OW 251
24879: PPUSH
24880: LD_INT 12
24882: PPUSH
24883: LD_INT 1
24885: PPUSH
24886: CALL_OW 50
24890: GO 24904
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
24892: CALL_OW 45
24896: PPUSH
24897: LD_INT 1
24899: PPUSH
24900: CALL_OW 51
// end ;
24904: GO 24778
24906: POP
24907: POP
// end ;
24908: PPOPN 2
24910: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
24911: LD_EXP 54
24915: PUSH
24916: LD_EXP 100
24920: AND
24921: IFFALSE 25143
24923: GO 24925
24925: DISABLE
24926: LD_INT 0
24928: PPUSH
24929: PPUSH
24930: PPUSH
24931: PPUSH
24932: PPUSH
24933: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24934: LD_ADDR_VAR 0 6
24938: PUSH
24939: LD_INT 22
24941: PUSH
24942: LD_OWVAR 2
24946: PUSH
24947: EMPTY
24948: LIST
24949: LIST
24950: PUSH
24951: LD_INT 21
24953: PUSH
24954: LD_INT 1
24956: PUSH
24957: EMPTY
24958: LIST
24959: LIST
24960: PUSH
24961: LD_INT 3
24963: PUSH
24964: LD_INT 23
24966: PUSH
24967: LD_INT 0
24969: PUSH
24970: EMPTY
24971: LIST
24972: LIST
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: LIST
24982: PPUSH
24983: CALL_OW 69
24987: ST_TO_ADDR
// if not tmp then
24988: LD_VAR 0 6
24992: NOT
24993: IFFALSE 24997
// exit ;
24995: GO 25143
// s1 := rand ( 1 , 4 ) ;
24997: LD_ADDR_VAR 0 2
25001: PUSH
25002: LD_INT 1
25004: PPUSH
25005: LD_INT 4
25007: PPUSH
25008: CALL_OW 12
25012: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
25013: LD_ADDR_VAR 0 4
25017: PUSH
25018: LD_VAR 0 6
25022: PUSH
25023: LD_INT 1
25025: ARRAY
25026: PPUSH
25027: LD_VAR 0 2
25031: PPUSH
25032: CALL_OW 259
25036: ST_TO_ADDR
// if s1 = 1 then
25037: LD_VAR 0 2
25041: PUSH
25042: LD_INT 1
25044: EQUAL
25045: IFFALSE 25065
// s2 := rand ( 2 , 4 ) else
25047: LD_ADDR_VAR 0 3
25051: PUSH
25052: LD_INT 2
25054: PPUSH
25055: LD_INT 4
25057: PPUSH
25058: CALL_OW 12
25062: ST_TO_ADDR
25063: GO 25073
// s2 := 1 ;
25065: LD_ADDR_VAR 0 3
25069: PUSH
25070: LD_INT 1
25072: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
25073: LD_ADDR_VAR 0 5
25077: PUSH
25078: LD_VAR 0 6
25082: PUSH
25083: LD_INT 1
25085: ARRAY
25086: PPUSH
25087: LD_VAR 0 3
25091: PPUSH
25092: CALL_OW 259
25096: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
25097: LD_VAR 0 6
25101: PUSH
25102: LD_INT 1
25104: ARRAY
25105: PPUSH
25106: LD_VAR 0 2
25110: PPUSH
25111: LD_VAR 0 5
25115: PPUSH
25116: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
25120: LD_VAR 0 6
25124: PUSH
25125: LD_INT 1
25127: ARRAY
25128: PPUSH
25129: LD_VAR 0 3
25133: PPUSH
25134: LD_VAR 0 4
25138: PPUSH
25139: CALL_OW 237
// end ;
25143: PPOPN 6
25145: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
25146: LD_EXP 54
25150: PUSH
25151: LD_EXP 101
25155: AND
25156: IFFALSE 25235
25158: GO 25160
25160: DISABLE
25161: LD_INT 0
25163: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
25164: LD_ADDR_VAR 0 1
25168: PUSH
25169: LD_INT 22
25171: PUSH
25172: LD_OWVAR 2
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PUSH
25181: LD_INT 30
25183: PUSH
25184: LD_INT 3
25186: PUSH
25187: EMPTY
25188: LIST
25189: LIST
25190: PUSH
25191: EMPTY
25192: LIST
25193: LIST
25194: PPUSH
25195: CALL_OW 69
25199: ST_TO_ADDR
// if not tmp then
25200: LD_VAR 0 1
25204: NOT
25205: IFFALSE 25209
// exit ;
25207: GO 25235
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25209: LD_VAR 0 1
25213: PUSH
25214: LD_INT 1
25216: PPUSH
25217: LD_VAR 0 1
25221: PPUSH
25222: CALL_OW 12
25226: ARRAY
25227: PPUSH
25228: LD_INT 1
25230: PPUSH
25231: CALL_OW 234
// end ;
25235: PPOPN 1
25237: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
25238: LD_EXP 54
25242: PUSH
25243: LD_EXP 102
25247: AND
25248: IFFALSE 25360
25250: GO 25252
25252: DISABLE
25253: LD_INT 0
25255: PPUSH
25256: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
25257: LD_ADDR_VAR 0 2
25261: PUSH
25262: LD_INT 22
25264: PUSH
25265: LD_OWVAR 2
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: PUSH
25274: LD_INT 2
25276: PUSH
25277: LD_INT 30
25279: PUSH
25280: LD_INT 27
25282: PUSH
25283: EMPTY
25284: LIST
25285: LIST
25286: PUSH
25287: LD_INT 30
25289: PUSH
25290: LD_INT 26
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: PUSH
25297: LD_INT 30
25299: PUSH
25300: LD_INT 28
25302: PUSH
25303: EMPTY
25304: LIST
25305: LIST
25306: PUSH
25307: EMPTY
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: PPUSH
25317: CALL_OW 69
25321: ST_TO_ADDR
// if not tmp then
25322: LD_VAR 0 2
25326: NOT
25327: IFFALSE 25331
// exit ;
25329: GO 25360
// for i in tmp do
25331: LD_ADDR_VAR 0 1
25335: PUSH
25336: LD_VAR 0 2
25340: PUSH
25341: FOR_IN
25342: IFFALSE 25358
// SetLives ( i , 1 ) ;
25344: LD_VAR 0 1
25348: PPUSH
25349: LD_INT 1
25351: PPUSH
25352: CALL_OW 234
25356: GO 25341
25358: POP
25359: POP
// end ;
25360: PPOPN 2
25362: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
25363: LD_EXP 54
25367: PUSH
25368: LD_EXP 103
25372: AND
25373: IFFALSE 25647
25375: GO 25377
25377: DISABLE
25378: LD_INT 0
25380: PPUSH
25381: PPUSH
25382: PPUSH
// begin i := rand ( 1 , 7 ) ;
25383: LD_ADDR_VAR 0 1
25387: PUSH
25388: LD_INT 1
25390: PPUSH
25391: LD_INT 7
25393: PPUSH
25394: CALL_OW 12
25398: ST_TO_ADDR
// case i of 1 :
25399: LD_VAR 0 1
25403: PUSH
25404: LD_INT 1
25406: DOUBLE
25407: EQUAL
25408: IFTRUE 25412
25410: GO 25422
25412: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
25413: LD_STRING earthquake(getX(game), 0, 32)
25415: PPUSH
25416: CALL_OW 559
25420: GO 25647
25422: LD_INT 2
25424: DOUBLE
25425: EQUAL
25426: IFTRUE 25430
25428: GO 25444
25430: POP
// begin ToLua ( displayStucuk(); ) ;
25431: LD_STRING displayStucuk();
25433: PPUSH
25434: CALL_OW 559
// ResetFog ;
25438: CALL_OW 335
// end ; 3 :
25442: GO 25647
25444: LD_INT 3
25446: DOUBLE
25447: EQUAL
25448: IFTRUE 25452
25450: GO 25556
25452: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25453: LD_ADDR_VAR 0 2
25457: PUSH
25458: LD_INT 22
25460: PUSH
25461: LD_OWVAR 2
25465: PUSH
25466: EMPTY
25467: LIST
25468: LIST
25469: PUSH
25470: LD_INT 25
25472: PUSH
25473: LD_INT 1
25475: PUSH
25476: EMPTY
25477: LIST
25478: LIST
25479: PUSH
25480: EMPTY
25481: LIST
25482: LIST
25483: PPUSH
25484: CALL_OW 69
25488: ST_TO_ADDR
// if not tmp then
25489: LD_VAR 0 2
25493: NOT
25494: IFFALSE 25498
// exit ;
25496: GO 25647
// un := tmp [ rand ( 1 , tmp ) ] ;
25498: LD_ADDR_VAR 0 3
25502: PUSH
25503: LD_VAR 0 2
25507: PUSH
25508: LD_INT 1
25510: PPUSH
25511: LD_VAR 0 2
25515: PPUSH
25516: CALL_OW 12
25520: ARRAY
25521: ST_TO_ADDR
// if Crawls ( un ) then
25522: LD_VAR 0 3
25526: PPUSH
25527: CALL_OW 318
25531: IFFALSE 25542
// ComWalk ( un ) ;
25533: LD_VAR 0 3
25537: PPUSH
25538: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25542: LD_VAR 0 3
25546: PPUSH
25547: LD_INT 8
25549: PPUSH
25550: CALL_OW 336
// end ; 4 :
25554: GO 25647
25556: LD_INT 4
25558: DOUBLE
25559: EQUAL
25560: IFTRUE 25564
25562: GO 25625
25564: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25565: LD_ADDR_VAR 0 2
25569: PUSH
25570: LD_INT 22
25572: PUSH
25573: LD_OWVAR 2
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: PUSH
25582: LD_INT 30
25584: PUSH
25585: LD_INT 29
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: PUSH
25592: EMPTY
25593: LIST
25594: LIST
25595: PPUSH
25596: CALL_OW 69
25600: ST_TO_ADDR
// if not tmp then
25601: LD_VAR 0 2
25605: NOT
25606: IFFALSE 25610
// exit ;
25608: GO 25647
// DestroyUnit ( tmp [ 1 ] ) ;
25610: LD_VAR 0 2
25614: PUSH
25615: LD_INT 1
25617: ARRAY
25618: PPUSH
25619: CALL_OW 65
// end ; 5 .. 7 :
25623: GO 25647
25625: LD_INT 5
25627: DOUBLE
25628: GREATEREQUAL
25629: IFFALSE 25637
25631: LD_INT 7
25633: DOUBLE
25634: LESSEQUAL
25635: IFTRUE 25639
25637: GO 25646
25639: POP
// StreamSibBomb ; end ;
25640: CALL 21897 0 0
25644: GO 25647
25646: POP
// end ;
25647: PPOPN 3
25649: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
25650: LD_EXP 54
25654: PUSH
25655: LD_EXP 104
25659: AND
25660: IFFALSE 25816
25662: GO 25664
25664: DISABLE
25665: LD_INT 0
25667: PPUSH
25668: PPUSH
25669: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
25670: LD_ADDR_VAR 0 2
25674: PUSH
25675: LD_INT 81
25677: PUSH
25678: LD_OWVAR 2
25682: PUSH
25683: EMPTY
25684: LIST
25685: LIST
25686: PUSH
25687: LD_INT 2
25689: PUSH
25690: LD_INT 21
25692: PUSH
25693: LD_INT 1
25695: PUSH
25696: EMPTY
25697: LIST
25698: LIST
25699: PUSH
25700: LD_INT 21
25702: PUSH
25703: LD_INT 2
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: LIST
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: PPUSH
25719: CALL_OW 69
25723: ST_TO_ADDR
// if not tmp then
25724: LD_VAR 0 2
25728: NOT
25729: IFFALSE 25733
// exit ;
25731: GO 25816
// p := 0 ;
25733: LD_ADDR_VAR 0 3
25737: PUSH
25738: LD_INT 0
25740: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25741: LD_INT 35
25743: PPUSH
25744: CALL_OW 67
// p := p + 1 ;
25748: LD_ADDR_VAR 0 3
25752: PUSH
25753: LD_VAR 0 3
25757: PUSH
25758: LD_INT 1
25760: PLUS
25761: ST_TO_ADDR
// for i in tmp do
25762: LD_ADDR_VAR 0 1
25766: PUSH
25767: LD_VAR 0 2
25771: PUSH
25772: FOR_IN
25773: IFFALSE 25804
// if GetLives ( i ) < 1000 then
25775: LD_VAR 0 1
25779: PPUSH
25780: CALL_OW 256
25784: PUSH
25785: LD_INT 1000
25787: LESS
25788: IFFALSE 25802
// SetLives ( i , 1000 ) ;
25790: LD_VAR 0 1
25794: PPUSH
25795: LD_INT 1000
25797: PPUSH
25798: CALL_OW 234
25802: GO 25772
25804: POP
25805: POP
// until p > 20 ;
25806: LD_VAR 0 3
25810: PUSH
25811: LD_INT 20
25813: GREATER
25814: IFFALSE 25741
// end ;
25816: PPOPN 3
25818: END
// every 0 0$1 trigger StreamModeActive and sTime do
25819: LD_EXP 54
25823: PUSH
25824: LD_EXP 105
25828: AND
25829: IFFALSE 25864
25831: GO 25833
25833: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
25834: LD_INT 28
25836: PPUSH
25837: LD_OWVAR 2
25841: PPUSH
25842: LD_INT 2
25844: PPUSH
25845: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
25849: LD_INT 30
25851: PPUSH
25852: LD_OWVAR 2
25856: PPUSH
25857: LD_INT 2
25859: PPUSH
25860: CALL_OW 322
// end ;
25864: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
25865: LD_EXP 54
25869: PUSH
25870: LD_EXP 106
25874: AND
25875: IFFALSE 25996
25877: GO 25879
25879: DISABLE
25880: LD_INT 0
25882: PPUSH
25883: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25884: LD_ADDR_VAR 0 2
25888: PUSH
25889: LD_INT 22
25891: PUSH
25892: LD_OWVAR 2
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: PUSH
25901: LD_INT 21
25903: PUSH
25904: LD_INT 1
25906: PUSH
25907: EMPTY
25908: LIST
25909: LIST
25910: PUSH
25911: LD_INT 3
25913: PUSH
25914: LD_INT 23
25916: PUSH
25917: LD_INT 0
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: LIST
25932: PPUSH
25933: CALL_OW 69
25937: ST_TO_ADDR
// if not tmp then
25938: LD_VAR 0 2
25942: NOT
25943: IFFALSE 25947
// exit ;
25945: GO 25996
// for i in tmp do
25947: LD_ADDR_VAR 0 1
25951: PUSH
25952: LD_VAR 0 2
25956: PUSH
25957: FOR_IN
25958: IFFALSE 25994
// begin if Crawls ( i ) then
25960: LD_VAR 0 1
25964: PPUSH
25965: CALL_OW 318
25969: IFFALSE 25980
// ComWalk ( i ) ;
25971: LD_VAR 0 1
25975: PPUSH
25976: CALL_OW 138
// SetClass ( i , 2 ) ;
25980: LD_VAR 0 1
25984: PPUSH
25985: LD_INT 2
25987: PPUSH
25988: CALL_OW 336
// end ;
25992: GO 25957
25994: POP
25995: POP
// end ;
25996: PPOPN 2
25998: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
25999: LD_EXP 54
26003: PUSH
26004: LD_EXP 107
26008: AND
26009: IFFALSE 26290
26011: GO 26013
26013: DISABLE
26014: LD_INT 0
26016: PPUSH
26017: PPUSH
26018: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
26019: LD_OWVAR 2
26023: PPUSH
26024: LD_INT 9
26026: PPUSH
26027: LD_INT 1
26029: PPUSH
26030: LD_INT 1
26032: PPUSH
26033: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
26037: LD_INT 9
26039: PPUSH
26040: LD_OWVAR 2
26044: PPUSH
26045: CALL_OW 343
// uc_side := 9 ;
26049: LD_ADDR_OWVAR 20
26053: PUSH
26054: LD_INT 9
26056: ST_TO_ADDR
// uc_nation := 2 ;
26057: LD_ADDR_OWVAR 21
26061: PUSH
26062: LD_INT 2
26064: ST_TO_ADDR
// hc_name := Dark Warrior ;
26065: LD_ADDR_OWVAR 26
26069: PUSH
26070: LD_STRING Dark Warrior
26072: ST_TO_ADDR
// hc_gallery :=  ;
26073: LD_ADDR_OWVAR 33
26077: PUSH
26078: LD_STRING 
26080: ST_TO_ADDR
// hc_noskilllimit := true ;
26081: LD_ADDR_OWVAR 76
26085: PUSH
26086: LD_INT 1
26088: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
26089: LD_ADDR_OWVAR 31
26093: PUSH
26094: LD_INT 30
26096: PUSH
26097: LD_INT 30
26099: PUSH
26100: LD_INT 30
26102: PUSH
26103: LD_INT 30
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: ST_TO_ADDR
// un := CreateHuman ;
26112: LD_ADDR_VAR 0 3
26116: PUSH
26117: CALL_OW 44
26121: ST_TO_ADDR
// hc_noskilllimit := false ;
26122: LD_ADDR_OWVAR 76
26126: PUSH
26127: LD_INT 0
26129: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26130: LD_VAR 0 3
26134: PPUSH
26135: LD_INT 1
26137: PPUSH
26138: CALL_OW 51
// p := 0 ;
26142: LD_ADDR_VAR 0 2
26146: PUSH
26147: LD_INT 0
26149: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26150: LD_INT 35
26152: PPUSH
26153: CALL_OW 67
// p := p + 1 ;
26157: LD_ADDR_VAR 0 2
26161: PUSH
26162: LD_VAR 0 2
26166: PUSH
26167: LD_INT 1
26169: PLUS
26170: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
26171: LD_VAR 0 3
26175: PPUSH
26176: CALL_OW 256
26180: PUSH
26181: LD_INT 1000
26183: LESS
26184: IFFALSE 26198
// SetLives ( un , 1000 ) ;
26186: LD_VAR 0 3
26190: PPUSH
26191: LD_INT 1000
26193: PPUSH
26194: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
26198: LD_VAR 0 3
26202: PPUSH
26203: LD_INT 81
26205: PUSH
26206: LD_OWVAR 2
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PUSH
26215: LD_INT 91
26217: PUSH
26218: LD_VAR 0 3
26222: PUSH
26223: LD_INT 30
26225: PUSH
26226: EMPTY
26227: LIST
26228: LIST
26229: LIST
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PPUSH
26235: CALL_OW 69
26239: PPUSH
26240: LD_VAR 0 3
26244: PPUSH
26245: CALL_OW 74
26249: PPUSH
26250: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
26254: LD_VAR 0 2
26258: PUSH
26259: LD_INT 60
26261: GREATER
26262: PUSH
26263: LD_VAR 0 3
26267: PPUSH
26268: CALL_OW 301
26272: OR
26273: IFFALSE 26150
// if un then
26275: LD_VAR 0 3
26279: IFFALSE 26290
// RemoveUnit ( un ) ;
26281: LD_VAR 0 3
26285: PPUSH
26286: CALL_OW 64
// end ;
26290: PPOPN 3
26292: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
26293: LD_INT 0
26295: PPUSH
// case cmd of 301 :
26296: LD_VAR 0 1
26300: PUSH
26301: LD_INT 301
26303: DOUBLE
26304: EQUAL
26305: IFTRUE 26309
26307: GO 26341
26309: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
26310: LD_VAR 0 6
26314: PPUSH
26315: LD_VAR 0 7
26319: PPUSH
26320: LD_VAR 0 8
26324: PPUSH
26325: LD_VAR 0 4
26329: PPUSH
26330: LD_VAR 0 5
26334: PPUSH
26335: CALL 27542 0 5
26339: GO 26462
26341: LD_INT 302
26343: DOUBLE
26344: EQUAL
26345: IFTRUE 26349
26347: GO 26386
26349: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
26350: LD_VAR 0 6
26354: PPUSH
26355: LD_VAR 0 7
26359: PPUSH
26360: LD_VAR 0 8
26364: PPUSH
26365: LD_VAR 0 9
26369: PPUSH
26370: LD_VAR 0 4
26374: PPUSH
26375: LD_VAR 0 5
26379: PPUSH
26380: CALL 27633 0 6
26384: GO 26462
26386: LD_INT 303
26388: DOUBLE
26389: EQUAL
26390: IFTRUE 26394
26392: GO 26431
26394: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
26395: LD_VAR 0 6
26399: PPUSH
26400: LD_VAR 0 7
26404: PPUSH
26405: LD_VAR 0 8
26409: PPUSH
26410: LD_VAR 0 9
26414: PPUSH
26415: LD_VAR 0 4
26419: PPUSH
26420: LD_VAR 0 5
26424: PPUSH
26425: CALL 26467 0 6
26429: GO 26462
26431: LD_INT 304
26433: DOUBLE
26434: EQUAL
26435: IFTRUE 26439
26437: GO 26461
26439: POP
// hHackTeleport ( unit , x , y ) ; end ;
26440: LD_VAR 0 2
26444: PPUSH
26445: LD_VAR 0 4
26449: PPUSH
26450: LD_VAR 0 5
26454: PPUSH
26455: CALL 28226 0 3
26459: GO 26462
26461: POP
// end ;
26462: LD_VAR 0 12
26466: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
26467: LD_INT 0
26469: PPUSH
26470: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
26471: LD_VAR 0 1
26475: PUSH
26476: LD_INT 1
26478: LESS
26479: PUSH
26480: LD_VAR 0 1
26484: PUSH
26485: LD_INT 3
26487: GREATER
26488: OR
26489: PUSH
26490: LD_VAR 0 5
26494: PPUSH
26495: LD_VAR 0 6
26499: PPUSH
26500: CALL_OW 428
26504: OR
26505: IFFALSE 26509
// exit ;
26507: GO 27229
// uc_side := your_side ;
26509: LD_ADDR_OWVAR 20
26513: PUSH
26514: LD_OWVAR 2
26518: ST_TO_ADDR
// uc_nation := nation ;
26519: LD_ADDR_OWVAR 21
26523: PUSH
26524: LD_VAR 0 1
26528: ST_TO_ADDR
// bc_level = 1 ;
26529: LD_ADDR_OWVAR 43
26533: PUSH
26534: LD_INT 1
26536: ST_TO_ADDR
// case btype of 1 :
26537: LD_VAR 0 2
26541: PUSH
26542: LD_INT 1
26544: DOUBLE
26545: EQUAL
26546: IFTRUE 26550
26548: GO 26561
26550: POP
// bc_type := b_depot ; 2 :
26551: LD_ADDR_OWVAR 42
26555: PUSH
26556: LD_INT 0
26558: ST_TO_ADDR
26559: GO 27173
26561: LD_INT 2
26563: DOUBLE
26564: EQUAL
26565: IFTRUE 26569
26567: GO 26580
26569: POP
// bc_type := b_warehouse ; 3 :
26570: LD_ADDR_OWVAR 42
26574: PUSH
26575: LD_INT 1
26577: ST_TO_ADDR
26578: GO 27173
26580: LD_INT 3
26582: DOUBLE
26583: EQUAL
26584: IFTRUE 26588
26586: GO 26599
26588: POP
// bc_type := b_lab ; 4 .. 9 :
26589: LD_ADDR_OWVAR 42
26593: PUSH
26594: LD_INT 6
26596: ST_TO_ADDR
26597: GO 27173
26599: LD_INT 4
26601: DOUBLE
26602: GREATEREQUAL
26603: IFFALSE 26611
26605: LD_INT 9
26607: DOUBLE
26608: LESSEQUAL
26609: IFTRUE 26613
26611: GO 26665
26613: POP
// begin bc_type := b_lab_half ;
26614: LD_ADDR_OWVAR 42
26618: PUSH
26619: LD_INT 7
26621: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
26622: LD_ADDR_OWVAR 44
26626: PUSH
26627: LD_INT 10
26629: PUSH
26630: LD_INT 11
26632: PUSH
26633: LD_INT 12
26635: PUSH
26636: LD_INT 15
26638: PUSH
26639: LD_INT 14
26641: PUSH
26642: LD_INT 13
26644: PUSH
26645: EMPTY
26646: LIST
26647: LIST
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: PUSH
26653: LD_VAR 0 2
26657: PUSH
26658: LD_INT 3
26660: MINUS
26661: ARRAY
26662: ST_TO_ADDR
// end ; 10 .. 13 :
26663: GO 27173
26665: LD_INT 10
26667: DOUBLE
26668: GREATEREQUAL
26669: IFFALSE 26677
26671: LD_INT 13
26673: DOUBLE
26674: LESSEQUAL
26675: IFTRUE 26679
26677: GO 26756
26679: POP
// begin bc_type := b_lab_full ;
26680: LD_ADDR_OWVAR 42
26684: PUSH
26685: LD_INT 8
26687: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
26688: LD_ADDR_OWVAR 44
26692: PUSH
26693: LD_INT 10
26695: PUSH
26696: LD_INT 12
26698: PUSH
26699: LD_INT 14
26701: PUSH
26702: LD_INT 13
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: PUSH
26711: LD_VAR 0 2
26715: PUSH
26716: LD_INT 9
26718: MINUS
26719: ARRAY
26720: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
26721: LD_ADDR_OWVAR 45
26725: PUSH
26726: LD_INT 11
26728: PUSH
26729: LD_INT 15
26731: PUSH
26732: LD_INT 12
26734: PUSH
26735: LD_INT 15
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: LIST
26742: LIST
26743: PUSH
26744: LD_VAR 0 2
26748: PUSH
26749: LD_INT 9
26751: MINUS
26752: ARRAY
26753: ST_TO_ADDR
// end ; 14 :
26754: GO 27173
26756: LD_INT 14
26758: DOUBLE
26759: EQUAL
26760: IFTRUE 26764
26762: GO 26775
26764: POP
// bc_type := b_workshop ; 15 :
26765: LD_ADDR_OWVAR 42
26769: PUSH
26770: LD_INT 2
26772: ST_TO_ADDR
26773: GO 27173
26775: LD_INT 15
26777: DOUBLE
26778: EQUAL
26779: IFTRUE 26783
26781: GO 26794
26783: POP
// bc_type := b_factory ; 16 :
26784: LD_ADDR_OWVAR 42
26788: PUSH
26789: LD_INT 3
26791: ST_TO_ADDR
26792: GO 27173
26794: LD_INT 16
26796: DOUBLE
26797: EQUAL
26798: IFTRUE 26802
26800: GO 26813
26802: POP
// bc_type := b_ext_gun ; 17 :
26803: LD_ADDR_OWVAR 42
26807: PUSH
26808: LD_INT 17
26810: ST_TO_ADDR
26811: GO 27173
26813: LD_INT 17
26815: DOUBLE
26816: EQUAL
26817: IFTRUE 26821
26819: GO 26849
26821: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
26822: LD_ADDR_OWVAR 42
26826: PUSH
26827: LD_INT 19
26829: PUSH
26830: LD_INT 23
26832: PUSH
26833: LD_INT 19
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: LIST
26840: PUSH
26841: LD_VAR 0 1
26845: ARRAY
26846: ST_TO_ADDR
26847: GO 27173
26849: LD_INT 18
26851: DOUBLE
26852: EQUAL
26853: IFTRUE 26857
26855: GO 26868
26857: POP
// bc_type := b_ext_radar ; 19 :
26858: LD_ADDR_OWVAR 42
26862: PUSH
26863: LD_INT 20
26865: ST_TO_ADDR
26866: GO 27173
26868: LD_INT 19
26870: DOUBLE
26871: EQUAL
26872: IFTRUE 26876
26874: GO 26887
26876: POP
// bc_type := b_ext_radio ; 20 :
26877: LD_ADDR_OWVAR 42
26881: PUSH
26882: LD_INT 22
26884: ST_TO_ADDR
26885: GO 27173
26887: LD_INT 20
26889: DOUBLE
26890: EQUAL
26891: IFTRUE 26895
26893: GO 26906
26895: POP
// bc_type := b_ext_siberium ; 21 :
26896: LD_ADDR_OWVAR 42
26900: PUSH
26901: LD_INT 21
26903: ST_TO_ADDR
26904: GO 27173
26906: LD_INT 21
26908: DOUBLE
26909: EQUAL
26910: IFTRUE 26914
26912: GO 26925
26914: POP
// bc_type := b_ext_computer ; 22 :
26915: LD_ADDR_OWVAR 42
26919: PUSH
26920: LD_INT 24
26922: ST_TO_ADDR
26923: GO 27173
26925: LD_INT 22
26927: DOUBLE
26928: EQUAL
26929: IFTRUE 26933
26931: GO 26944
26933: POP
// bc_type := b_ext_track ; 23 :
26934: LD_ADDR_OWVAR 42
26938: PUSH
26939: LD_INT 16
26941: ST_TO_ADDR
26942: GO 27173
26944: LD_INT 23
26946: DOUBLE
26947: EQUAL
26948: IFTRUE 26952
26950: GO 26963
26952: POP
// bc_type := b_ext_laser ; 24 :
26953: LD_ADDR_OWVAR 42
26957: PUSH
26958: LD_INT 25
26960: ST_TO_ADDR
26961: GO 27173
26963: LD_INT 24
26965: DOUBLE
26966: EQUAL
26967: IFTRUE 26971
26969: GO 26982
26971: POP
// bc_type := b_control_tower ; 25 :
26972: LD_ADDR_OWVAR 42
26976: PUSH
26977: LD_INT 36
26979: ST_TO_ADDR
26980: GO 27173
26982: LD_INT 25
26984: DOUBLE
26985: EQUAL
26986: IFTRUE 26990
26988: GO 27001
26990: POP
// bc_type := b_breastwork ; 26 :
26991: LD_ADDR_OWVAR 42
26995: PUSH
26996: LD_INT 31
26998: ST_TO_ADDR
26999: GO 27173
27001: LD_INT 26
27003: DOUBLE
27004: EQUAL
27005: IFTRUE 27009
27007: GO 27020
27009: POP
// bc_type := b_bunker ; 27 :
27010: LD_ADDR_OWVAR 42
27014: PUSH
27015: LD_INT 32
27017: ST_TO_ADDR
27018: GO 27173
27020: LD_INT 27
27022: DOUBLE
27023: EQUAL
27024: IFTRUE 27028
27026: GO 27039
27028: POP
// bc_type := b_turret ; 28 :
27029: LD_ADDR_OWVAR 42
27033: PUSH
27034: LD_INT 33
27036: ST_TO_ADDR
27037: GO 27173
27039: LD_INT 28
27041: DOUBLE
27042: EQUAL
27043: IFTRUE 27047
27045: GO 27058
27047: POP
// bc_type := b_armoury ; 29 :
27048: LD_ADDR_OWVAR 42
27052: PUSH
27053: LD_INT 4
27055: ST_TO_ADDR
27056: GO 27173
27058: LD_INT 29
27060: DOUBLE
27061: EQUAL
27062: IFTRUE 27066
27064: GO 27077
27066: POP
// bc_type := b_barracks ; 30 :
27067: LD_ADDR_OWVAR 42
27071: PUSH
27072: LD_INT 5
27074: ST_TO_ADDR
27075: GO 27173
27077: LD_INT 30
27079: DOUBLE
27080: EQUAL
27081: IFTRUE 27085
27083: GO 27096
27085: POP
// bc_type := b_solar_power ; 31 :
27086: LD_ADDR_OWVAR 42
27090: PUSH
27091: LD_INT 27
27093: ST_TO_ADDR
27094: GO 27173
27096: LD_INT 31
27098: DOUBLE
27099: EQUAL
27100: IFTRUE 27104
27102: GO 27115
27104: POP
// bc_type := b_oil_power ; 32 :
27105: LD_ADDR_OWVAR 42
27109: PUSH
27110: LD_INT 26
27112: ST_TO_ADDR
27113: GO 27173
27115: LD_INT 32
27117: DOUBLE
27118: EQUAL
27119: IFTRUE 27123
27121: GO 27134
27123: POP
// bc_type := b_siberite_power ; 33 :
27124: LD_ADDR_OWVAR 42
27128: PUSH
27129: LD_INT 28
27131: ST_TO_ADDR
27132: GO 27173
27134: LD_INT 33
27136: DOUBLE
27137: EQUAL
27138: IFTRUE 27142
27140: GO 27153
27142: POP
// bc_type := b_oil_mine ; 34 :
27143: LD_ADDR_OWVAR 42
27147: PUSH
27148: LD_INT 29
27150: ST_TO_ADDR
27151: GO 27173
27153: LD_INT 34
27155: DOUBLE
27156: EQUAL
27157: IFTRUE 27161
27159: GO 27172
27161: POP
// bc_type := b_siberite_mine ; end ;
27162: LD_ADDR_OWVAR 42
27166: PUSH
27167: LD_INT 30
27169: ST_TO_ADDR
27170: GO 27173
27172: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
27173: LD_ADDR_VAR 0 8
27177: PUSH
27178: LD_VAR 0 5
27182: PPUSH
27183: LD_VAR 0 6
27187: PPUSH
27188: LD_VAR 0 3
27192: PPUSH
27193: CALL_OW 47
27197: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
27198: LD_OWVAR 42
27202: PUSH
27203: LD_INT 32
27205: PUSH
27206: LD_INT 33
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: IN
27213: IFFALSE 27229
// PlaceWeaponTurret ( b , weapon ) ;
27215: LD_VAR 0 8
27219: PPUSH
27220: LD_VAR 0 4
27224: PPUSH
27225: CALL_OW 431
// end ;
27229: LD_VAR 0 7
27233: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
27234: LD_INT 0
27236: PPUSH
27237: PPUSH
27238: PPUSH
27239: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27240: LD_ADDR_VAR 0 4
27244: PUSH
27245: LD_INT 22
27247: PUSH
27248: LD_OWVAR 2
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: PUSH
27257: LD_INT 2
27259: PUSH
27260: LD_INT 30
27262: PUSH
27263: LD_INT 0
27265: PUSH
27266: EMPTY
27267: LIST
27268: LIST
27269: PUSH
27270: LD_INT 30
27272: PUSH
27273: LD_INT 1
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: PUSH
27280: EMPTY
27281: LIST
27282: LIST
27283: LIST
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: PPUSH
27289: CALL_OW 69
27293: ST_TO_ADDR
// if not tmp then
27294: LD_VAR 0 4
27298: NOT
27299: IFFALSE 27303
// exit ;
27301: GO 27362
// for i in tmp do
27303: LD_ADDR_VAR 0 2
27307: PUSH
27308: LD_VAR 0 4
27312: PUSH
27313: FOR_IN
27314: IFFALSE 27360
// for j = 1 to 3 do
27316: LD_ADDR_VAR 0 3
27320: PUSH
27321: DOUBLE
27322: LD_INT 1
27324: DEC
27325: ST_TO_ADDR
27326: LD_INT 3
27328: PUSH
27329: FOR_TO
27330: IFFALSE 27356
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
27332: LD_VAR 0 2
27336: PPUSH
27337: CALL_OW 274
27341: PPUSH
27342: LD_VAR 0 3
27346: PPUSH
27347: LD_INT 99999
27349: PPUSH
27350: CALL_OW 277
27354: GO 27329
27356: POP
27357: POP
27358: GO 27313
27360: POP
27361: POP
// end ;
27362: LD_VAR 0 1
27366: RET
// export function hHackSetLevel10 ; var i , j ; begin
27367: LD_INT 0
27369: PPUSH
27370: PPUSH
27371: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27372: LD_ADDR_VAR 0 2
27376: PUSH
27377: LD_INT 21
27379: PUSH
27380: LD_INT 1
27382: PUSH
27383: EMPTY
27384: LIST
27385: LIST
27386: PPUSH
27387: CALL_OW 69
27391: PUSH
27392: FOR_IN
27393: IFFALSE 27445
// if IsSelected ( i ) then
27395: LD_VAR 0 2
27399: PPUSH
27400: CALL_OW 306
27404: IFFALSE 27443
// begin for j := 1 to 4 do
27406: LD_ADDR_VAR 0 3
27410: PUSH
27411: DOUBLE
27412: LD_INT 1
27414: DEC
27415: ST_TO_ADDR
27416: LD_INT 4
27418: PUSH
27419: FOR_TO
27420: IFFALSE 27441
// SetSkill ( i , j , 10 ) ;
27422: LD_VAR 0 2
27426: PPUSH
27427: LD_VAR 0 3
27431: PPUSH
27432: LD_INT 10
27434: PPUSH
27435: CALL_OW 237
27439: GO 27419
27441: POP
27442: POP
// end ;
27443: GO 27392
27445: POP
27446: POP
// end ;
27447: LD_VAR 0 1
27451: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
27452: LD_INT 0
27454: PPUSH
27455: PPUSH
27456: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
27457: LD_ADDR_VAR 0 2
27461: PUSH
27462: LD_INT 22
27464: PUSH
27465: LD_OWVAR 2
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: PUSH
27474: LD_INT 21
27476: PUSH
27477: LD_INT 1
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PPUSH
27488: CALL_OW 69
27492: PUSH
27493: FOR_IN
27494: IFFALSE 27535
// begin for j := 1 to 4 do
27496: LD_ADDR_VAR 0 3
27500: PUSH
27501: DOUBLE
27502: LD_INT 1
27504: DEC
27505: ST_TO_ADDR
27506: LD_INT 4
27508: PUSH
27509: FOR_TO
27510: IFFALSE 27531
// SetSkill ( i , j , 10 ) ;
27512: LD_VAR 0 2
27516: PPUSH
27517: LD_VAR 0 3
27521: PPUSH
27522: LD_INT 10
27524: PPUSH
27525: CALL_OW 237
27529: GO 27509
27531: POP
27532: POP
// end ;
27533: GO 27493
27535: POP
27536: POP
// end ;
27537: LD_VAR 0 1
27541: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
27542: LD_INT 0
27544: PPUSH
// uc_side := your_side ;
27545: LD_ADDR_OWVAR 20
27549: PUSH
27550: LD_OWVAR 2
27554: ST_TO_ADDR
// uc_nation := nation ;
27555: LD_ADDR_OWVAR 21
27559: PUSH
27560: LD_VAR 0 1
27564: ST_TO_ADDR
// InitHc ;
27565: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
27569: LD_INT 0
27571: PPUSH
27572: LD_VAR 0 2
27576: PPUSH
27577: LD_VAR 0 3
27581: PPUSH
27582: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
27586: LD_VAR 0 4
27590: PPUSH
27591: LD_VAR 0 5
27595: PPUSH
27596: CALL_OW 428
27600: PUSH
27601: LD_INT 0
27603: EQUAL
27604: IFFALSE 27628
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
27606: CALL_OW 44
27610: PPUSH
27611: LD_VAR 0 4
27615: PPUSH
27616: LD_VAR 0 5
27620: PPUSH
27621: LD_INT 1
27623: PPUSH
27624: CALL_OW 48
// end ;
27628: LD_VAR 0 6
27632: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
27633: LD_INT 0
27635: PPUSH
27636: PPUSH
// uc_side := your_side ;
27637: LD_ADDR_OWVAR 20
27641: PUSH
27642: LD_OWVAR 2
27646: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
27647: LD_VAR 0 1
27651: PUSH
27652: LD_INT 1
27654: PUSH
27655: LD_INT 2
27657: PUSH
27658: LD_INT 3
27660: PUSH
27661: LD_INT 4
27663: PUSH
27664: LD_INT 5
27666: PUSH
27667: EMPTY
27668: LIST
27669: LIST
27670: LIST
27671: LIST
27672: LIST
27673: IN
27674: IFFALSE 27686
// uc_nation := nation_american else
27676: LD_ADDR_OWVAR 21
27680: PUSH
27681: LD_INT 1
27683: ST_TO_ADDR
27684: GO 27729
// if chassis in [ 11 , 12 , 13 , 14 ] then
27686: LD_VAR 0 1
27690: PUSH
27691: LD_INT 11
27693: PUSH
27694: LD_INT 12
27696: PUSH
27697: LD_INT 13
27699: PUSH
27700: LD_INT 14
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: IN
27709: IFFALSE 27721
// uc_nation := nation_arabian else
27711: LD_ADDR_OWVAR 21
27715: PUSH
27716: LD_INT 2
27718: ST_TO_ADDR
27719: GO 27729
// uc_nation := nation_russian ;
27721: LD_ADDR_OWVAR 21
27725: PUSH
27726: LD_INT 3
27728: ST_TO_ADDR
// vc_chassis := chassis ;
27729: LD_ADDR_OWVAR 37
27733: PUSH
27734: LD_VAR 0 1
27738: ST_TO_ADDR
// vc_engine := engine ;
27739: LD_ADDR_OWVAR 39
27743: PUSH
27744: LD_VAR 0 2
27748: ST_TO_ADDR
// vc_control := control ;
27749: LD_ADDR_OWVAR 38
27753: PUSH
27754: LD_VAR 0 3
27758: ST_TO_ADDR
// vc_weapon := weapon ;
27759: LD_ADDR_OWVAR 40
27763: PUSH
27764: LD_VAR 0 4
27768: ST_TO_ADDR
// un := CreateVehicle ;
27769: LD_ADDR_VAR 0 8
27773: PUSH
27774: CALL_OW 45
27778: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
27779: LD_VAR 0 8
27783: PPUSH
27784: LD_INT 0
27786: PPUSH
27787: LD_INT 5
27789: PPUSH
27790: CALL_OW 12
27794: PPUSH
27795: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
27799: LD_VAR 0 8
27803: PPUSH
27804: LD_VAR 0 5
27808: PPUSH
27809: LD_VAR 0 6
27813: PPUSH
27814: LD_INT 1
27816: PPUSH
27817: CALL_OW 48
// end ;
27821: LD_VAR 0 7
27825: RET
// export hInvincible ; every 1 do
27826: GO 27828
27828: DISABLE
// hInvincible := [ ] ;
27829: LD_ADDR_EXP 108
27833: PUSH
27834: EMPTY
27835: ST_TO_ADDR
27836: END
// every 10 do var i ;
27837: GO 27839
27839: DISABLE
27840: LD_INT 0
27842: PPUSH
// begin enable ;
27843: ENABLE
// if not hInvincible then
27844: LD_EXP 108
27848: NOT
27849: IFFALSE 27853
// exit ;
27851: GO 27897
// for i in hInvincible do
27853: LD_ADDR_VAR 0 1
27857: PUSH
27858: LD_EXP 108
27862: PUSH
27863: FOR_IN
27864: IFFALSE 27895
// if GetLives ( i ) < 1000 then
27866: LD_VAR 0 1
27870: PPUSH
27871: CALL_OW 256
27875: PUSH
27876: LD_INT 1000
27878: LESS
27879: IFFALSE 27893
// SetLives ( i , 1000 ) ;
27881: LD_VAR 0 1
27885: PPUSH
27886: LD_INT 1000
27888: PPUSH
27889: CALL_OW 234
27893: GO 27863
27895: POP
27896: POP
// end ;
27897: PPOPN 1
27899: END
// export function hHackInvincible ; var i ; begin
27900: LD_INT 0
27902: PPUSH
27903: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
27904: LD_ADDR_VAR 0 2
27908: PUSH
27909: LD_INT 2
27911: PUSH
27912: LD_INT 21
27914: PUSH
27915: LD_INT 1
27917: PUSH
27918: EMPTY
27919: LIST
27920: LIST
27921: PUSH
27922: LD_INT 21
27924: PUSH
27925: LD_INT 2
27927: PUSH
27928: EMPTY
27929: LIST
27930: LIST
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: LIST
27936: PPUSH
27937: CALL_OW 69
27941: PUSH
27942: FOR_IN
27943: IFFALSE 28004
// if IsSelected ( i ) then
27945: LD_VAR 0 2
27949: PPUSH
27950: CALL_OW 306
27954: IFFALSE 28002
// begin if i in hInvincible then
27956: LD_VAR 0 2
27960: PUSH
27961: LD_EXP 108
27965: IN
27966: IFFALSE 27986
// hInvincible := hInvincible diff i else
27968: LD_ADDR_EXP 108
27972: PUSH
27973: LD_EXP 108
27977: PUSH
27978: LD_VAR 0 2
27982: DIFF
27983: ST_TO_ADDR
27984: GO 28002
// hInvincible := hInvincible union i ;
27986: LD_ADDR_EXP 108
27990: PUSH
27991: LD_EXP 108
27995: PUSH
27996: LD_VAR 0 2
28000: UNION
28001: ST_TO_ADDR
// end ;
28002: GO 27942
28004: POP
28005: POP
// end ;
28006: LD_VAR 0 1
28010: RET
// export function hHackInvisible ; var i , j ; begin
28011: LD_INT 0
28013: PPUSH
28014: PPUSH
28015: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28016: LD_ADDR_VAR 0 2
28020: PUSH
28021: LD_INT 21
28023: PUSH
28024: LD_INT 1
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: PPUSH
28031: CALL_OW 69
28035: PUSH
28036: FOR_IN
28037: IFFALSE 28061
// if IsSelected ( i ) then
28039: LD_VAR 0 2
28043: PPUSH
28044: CALL_OW 306
28048: IFFALSE 28059
// ComForceInvisible ( i ) ;
28050: LD_VAR 0 2
28054: PPUSH
28055: CALL_OW 496
28059: GO 28036
28061: POP
28062: POP
// end ;
28063: LD_VAR 0 1
28067: RET
// export function hHackChangeYourSide ; begin
28068: LD_INT 0
28070: PPUSH
// if your_side = 8 then
28071: LD_OWVAR 2
28075: PUSH
28076: LD_INT 8
28078: EQUAL
28079: IFFALSE 28091
// your_side := 0 else
28081: LD_ADDR_OWVAR 2
28085: PUSH
28086: LD_INT 0
28088: ST_TO_ADDR
28089: GO 28105
// your_side := your_side + 1 ;
28091: LD_ADDR_OWVAR 2
28095: PUSH
28096: LD_OWVAR 2
28100: PUSH
28101: LD_INT 1
28103: PLUS
28104: ST_TO_ADDR
// end ;
28105: LD_VAR 0 1
28109: RET
// export function hHackChangeUnitSide ; var i , j ; begin
28110: LD_INT 0
28112: PPUSH
28113: PPUSH
28114: PPUSH
// for i in all_units do
28115: LD_ADDR_VAR 0 2
28119: PUSH
28120: LD_OWVAR 3
28124: PUSH
28125: FOR_IN
28126: IFFALSE 28204
// if IsSelected ( i ) then
28128: LD_VAR 0 2
28132: PPUSH
28133: CALL_OW 306
28137: IFFALSE 28202
// begin j := GetSide ( i ) ;
28139: LD_ADDR_VAR 0 3
28143: PUSH
28144: LD_VAR 0 2
28148: PPUSH
28149: CALL_OW 255
28153: ST_TO_ADDR
// if j = 8 then
28154: LD_VAR 0 3
28158: PUSH
28159: LD_INT 8
28161: EQUAL
28162: IFFALSE 28174
// j := 0 else
28164: LD_ADDR_VAR 0 3
28168: PUSH
28169: LD_INT 0
28171: ST_TO_ADDR
28172: GO 28188
// j := j + 1 ;
28174: LD_ADDR_VAR 0 3
28178: PUSH
28179: LD_VAR 0 3
28183: PUSH
28184: LD_INT 1
28186: PLUS
28187: ST_TO_ADDR
// SetSide ( i , j ) ;
28188: LD_VAR 0 2
28192: PPUSH
28193: LD_VAR 0 3
28197: PPUSH
28198: CALL_OW 235
// end ;
28202: GO 28125
28204: POP
28205: POP
// end ;
28206: LD_VAR 0 1
28210: RET
// export function hHackFog ; begin
28211: LD_INT 0
28213: PPUSH
// FogOff ( true ) ;
28214: LD_INT 1
28216: PPUSH
28217: CALL_OW 344
// end ;
28221: LD_VAR 0 1
28225: RET
// export function hHackTeleport ( unit , x , y ) ; begin
28226: LD_INT 0
28228: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
28229: LD_VAR 0 1
28233: PPUSH
28234: LD_VAR 0 2
28238: PPUSH
28239: LD_VAR 0 3
28243: PPUSH
28244: LD_INT 1
28246: PPUSH
28247: LD_INT 1
28249: PPUSH
28250: CALL_OW 483
// CenterOnXY ( x , y ) ;
28254: LD_VAR 0 2
28258: PPUSH
28259: LD_VAR 0 3
28263: PPUSH
28264: CALL_OW 84
// end ; end_of_file
28268: LD_VAR 0 4
28272: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
28273: LD_INT 0
28275: PPUSH
28276: PPUSH
28277: PPUSH
28278: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
28279: LD_VAR 0 1
28283: PPUSH
28284: CALL_OW 264
28288: PUSH
28289: LD_EXP 42
28293: EQUAL
28294: IFFALSE 28366
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
28296: LD_INT 68
28298: PPUSH
28299: LD_VAR 0 1
28303: PPUSH
28304: CALL_OW 255
28308: PPUSH
28309: CALL_OW 321
28313: PUSH
28314: LD_INT 2
28316: EQUAL
28317: IFFALSE 28329
// eff := 70 else
28319: LD_ADDR_VAR 0 4
28323: PUSH
28324: LD_INT 70
28326: ST_TO_ADDR
28327: GO 28337
// eff := 30 ;
28329: LD_ADDR_VAR 0 4
28333: PUSH
28334: LD_INT 30
28336: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
28337: LD_VAR 0 1
28341: PPUSH
28342: CALL_OW 250
28346: PPUSH
28347: LD_VAR 0 1
28351: PPUSH
28352: CALL_OW 251
28356: PPUSH
28357: LD_VAR 0 4
28361: PPUSH
28362: CALL_OW 495
// end ; end ;
28366: LD_VAR 0 2
28370: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
28371: LD_INT 0
28373: PPUSH
// end ;
28374: LD_VAR 0 4
28378: RET
// export function SOS_Command ( cmd ) ; begin
28379: LD_INT 0
28381: PPUSH
// end ;
28382: LD_VAR 0 2
28386: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
28387: LD_INT 0
28389: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
28390: LD_VAR 0 1
28394: PUSH
28395: LD_INT 250
28397: EQUAL
28398: PUSH
28399: LD_VAR 0 2
28403: PPUSH
28404: CALL_OW 264
28408: PUSH
28409: LD_EXP 45
28413: EQUAL
28414: AND
28415: IFFALSE 28436
// MinerPlaceMine ( unit , x , y ) ;
28417: LD_VAR 0 2
28421: PPUSH
28422: LD_VAR 0 4
28426: PPUSH
28427: LD_VAR 0 5
28431: PPUSH
28432: CALL 30777 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
28436: LD_VAR 0 1
28440: PUSH
28441: LD_INT 251
28443: EQUAL
28444: PUSH
28445: LD_VAR 0 2
28449: PPUSH
28450: CALL_OW 264
28454: PUSH
28455: LD_EXP 45
28459: EQUAL
28460: AND
28461: IFFALSE 28482
// MinerDetonateMine ( unit , x , y ) ;
28463: LD_VAR 0 2
28467: PPUSH
28468: LD_VAR 0 4
28472: PPUSH
28473: LD_VAR 0 5
28477: PPUSH
28478: CALL 31054 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
28482: LD_VAR 0 1
28486: PUSH
28487: LD_INT 252
28489: EQUAL
28490: PUSH
28491: LD_VAR 0 2
28495: PPUSH
28496: CALL_OW 264
28500: PUSH
28501: LD_EXP 45
28505: EQUAL
28506: AND
28507: IFFALSE 28528
// MinerCreateMinefield ( unit , x , y ) ;
28509: LD_VAR 0 2
28513: PPUSH
28514: LD_VAR 0 4
28518: PPUSH
28519: LD_VAR 0 5
28523: PPUSH
28524: CALL 31471 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
28528: LD_VAR 0 1
28532: PUSH
28533: LD_INT 253
28535: EQUAL
28536: PUSH
28537: LD_VAR 0 2
28541: PPUSH
28542: CALL_OW 257
28546: PUSH
28547: LD_INT 5
28549: EQUAL
28550: AND
28551: IFFALSE 28572
// ComBinocular ( unit , x , y ) ;
28553: LD_VAR 0 2
28557: PPUSH
28558: LD_VAR 0 4
28562: PPUSH
28563: LD_VAR 0 5
28567: PPUSH
28568: CALL 31842 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
28572: LD_VAR 0 1
28576: PUSH
28577: LD_INT 254
28579: EQUAL
28580: PUSH
28581: LD_VAR 0 2
28585: PPUSH
28586: CALL_OW 264
28590: PUSH
28591: LD_EXP 40
28595: EQUAL
28596: AND
28597: PUSH
28598: LD_VAR 0 3
28602: PPUSH
28603: CALL_OW 263
28607: PUSH
28608: LD_INT 3
28610: EQUAL
28611: AND
28612: IFFALSE 28628
// HackDestroyVehicle ( unit , selectedUnit ) ;
28614: LD_VAR 0 2
28618: PPUSH
28619: LD_VAR 0 3
28623: PPUSH
28624: CALL 30137 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
28628: LD_VAR 0 1
28632: PUSH
28633: LD_INT 255
28635: EQUAL
28636: PUSH
28637: LD_VAR 0 2
28641: PPUSH
28642: CALL_OW 264
28646: PUSH
28647: LD_INT 14
28649: PUSH
28650: LD_INT 53
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: IN
28657: AND
28658: PUSH
28659: LD_VAR 0 4
28663: PPUSH
28664: LD_VAR 0 5
28668: PPUSH
28669: CALL_OW 488
28673: AND
28674: IFFALSE 28698
// CutTreeXYR ( unit , x , y , 12 ) ;
28676: LD_VAR 0 2
28680: PPUSH
28681: LD_VAR 0 4
28685: PPUSH
28686: LD_VAR 0 5
28690: PPUSH
28691: LD_INT 12
28693: PPUSH
28694: CALL 28703 0 4
// end ;
28698: LD_VAR 0 6
28702: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
28703: LD_INT 0
28705: PPUSH
28706: PPUSH
28707: PPUSH
28708: PPUSH
28709: PPUSH
28710: PPUSH
28711: PPUSH
28712: PPUSH
28713: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
28714: LD_VAR 0 1
28718: NOT
28719: PUSH
28720: LD_VAR 0 2
28724: PPUSH
28725: LD_VAR 0 3
28729: PPUSH
28730: CALL_OW 488
28734: NOT
28735: OR
28736: PUSH
28737: LD_VAR 0 4
28741: NOT
28742: OR
28743: IFFALSE 28747
// exit ;
28745: GO 29087
// list := [ ] ;
28747: LD_ADDR_VAR 0 13
28751: PUSH
28752: EMPTY
28753: ST_TO_ADDR
// if x - r < 0 then
28754: LD_VAR 0 2
28758: PUSH
28759: LD_VAR 0 4
28763: MINUS
28764: PUSH
28765: LD_INT 0
28767: LESS
28768: IFFALSE 28780
// min_x := 0 else
28770: LD_ADDR_VAR 0 7
28774: PUSH
28775: LD_INT 0
28777: ST_TO_ADDR
28778: GO 28796
// min_x := x - r ;
28780: LD_ADDR_VAR 0 7
28784: PUSH
28785: LD_VAR 0 2
28789: PUSH
28790: LD_VAR 0 4
28794: MINUS
28795: ST_TO_ADDR
// if y - r < 0 then
28796: LD_VAR 0 3
28800: PUSH
28801: LD_VAR 0 4
28805: MINUS
28806: PUSH
28807: LD_INT 0
28809: LESS
28810: IFFALSE 28822
// min_y := 0 else
28812: LD_ADDR_VAR 0 8
28816: PUSH
28817: LD_INT 0
28819: ST_TO_ADDR
28820: GO 28838
// min_y := y - r ;
28822: LD_ADDR_VAR 0 8
28826: PUSH
28827: LD_VAR 0 3
28831: PUSH
28832: LD_VAR 0 4
28836: MINUS
28837: ST_TO_ADDR
// max_x := x + r ;
28838: LD_ADDR_VAR 0 9
28842: PUSH
28843: LD_VAR 0 2
28847: PUSH
28848: LD_VAR 0 4
28852: PLUS
28853: ST_TO_ADDR
// max_y := y + r ;
28854: LD_ADDR_VAR 0 10
28858: PUSH
28859: LD_VAR 0 3
28863: PUSH
28864: LD_VAR 0 4
28868: PLUS
28869: ST_TO_ADDR
// for _x = min_x to max_x do
28870: LD_ADDR_VAR 0 11
28874: PUSH
28875: DOUBLE
28876: LD_VAR 0 7
28880: DEC
28881: ST_TO_ADDR
28882: LD_VAR 0 9
28886: PUSH
28887: FOR_TO
28888: IFFALSE 29005
// for _y = min_y to max_y do
28890: LD_ADDR_VAR 0 12
28894: PUSH
28895: DOUBLE
28896: LD_VAR 0 8
28900: DEC
28901: ST_TO_ADDR
28902: LD_VAR 0 10
28906: PUSH
28907: FOR_TO
28908: IFFALSE 29001
// begin if not ValidHex ( _x , _y ) then
28910: LD_VAR 0 11
28914: PPUSH
28915: LD_VAR 0 12
28919: PPUSH
28920: CALL_OW 488
28924: NOT
28925: IFFALSE 28929
// continue ;
28927: GO 28907
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28929: LD_VAR 0 11
28933: PPUSH
28934: LD_VAR 0 12
28938: PPUSH
28939: CALL_OW 351
28943: PUSH
28944: LD_VAR 0 11
28948: PPUSH
28949: LD_VAR 0 12
28953: PPUSH
28954: CALL_OW 554
28958: AND
28959: IFFALSE 28999
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28961: LD_ADDR_VAR 0 13
28965: PUSH
28966: LD_VAR 0 13
28970: PPUSH
28971: LD_VAR 0 13
28975: PUSH
28976: LD_INT 1
28978: PLUS
28979: PPUSH
28980: LD_VAR 0 11
28984: PUSH
28985: LD_VAR 0 12
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: PPUSH
28994: CALL_OW 2
28998: ST_TO_ADDR
// end ;
28999: GO 28907
29001: POP
29002: POP
29003: GO 28887
29005: POP
29006: POP
// if not list then
29007: LD_VAR 0 13
29011: NOT
29012: IFFALSE 29016
// exit ;
29014: GO 29087
// for i in list do
29016: LD_ADDR_VAR 0 6
29020: PUSH
29021: LD_VAR 0 13
29025: PUSH
29026: FOR_IN
29027: IFFALSE 29085
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
29029: LD_VAR 0 1
29033: PPUSH
29034: LD_STRING M
29036: PUSH
29037: LD_VAR 0 6
29041: PUSH
29042: LD_INT 1
29044: ARRAY
29045: PUSH
29046: LD_VAR 0 6
29050: PUSH
29051: LD_INT 2
29053: ARRAY
29054: PUSH
29055: LD_INT 0
29057: PUSH
29058: LD_INT 0
29060: PUSH
29061: LD_INT 0
29063: PUSH
29064: LD_INT 0
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: LIST
29071: LIST
29072: LIST
29073: LIST
29074: LIST
29075: PUSH
29076: EMPTY
29077: LIST
29078: PPUSH
29079: CALL_OW 447
29083: GO 29026
29085: POP
29086: POP
// end ;
29087: LD_VAR 0 5
29091: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
29092: LD_EXP 109
29096: NOT
29097: IFFALSE 29147
29099: GO 29101
29101: DISABLE
// begin initHack := true ;
29102: LD_ADDR_EXP 109
29106: PUSH
29107: LD_INT 1
29109: ST_TO_ADDR
// hackTanks := [ ] ;
29110: LD_ADDR_EXP 110
29114: PUSH
29115: EMPTY
29116: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
29117: LD_ADDR_EXP 111
29121: PUSH
29122: EMPTY
29123: ST_TO_ADDR
// hackLimit := 3 ;
29124: LD_ADDR_EXP 112
29128: PUSH
29129: LD_INT 3
29131: ST_TO_ADDR
// hackDist := 12 ;
29132: LD_ADDR_EXP 113
29136: PUSH
29137: LD_INT 12
29139: ST_TO_ADDR
// hackCounter := [ ] ;
29140: LD_ADDR_EXP 114
29144: PUSH
29145: EMPTY
29146: ST_TO_ADDR
// end ;
29147: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29148: LD_EXP 109
29152: PUSH
29153: LD_INT 34
29155: PUSH
29156: LD_EXP 40
29160: PUSH
29161: EMPTY
29162: LIST
29163: LIST
29164: PPUSH
29165: CALL_OW 69
29169: AND
29170: IFFALSE 29425
29172: GO 29174
29174: DISABLE
29175: LD_INT 0
29177: PPUSH
29178: PPUSH
// begin enable ;
29179: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29180: LD_ADDR_VAR 0 1
29184: PUSH
29185: LD_INT 34
29187: PUSH
29188: LD_EXP 40
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PPUSH
29197: CALL_OW 69
29201: PUSH
29202: FOR_IN
29203: IFFALSE 29423
// begin if not i in hackTanks then
29205: LD_VAR 0 1
29209: PUSH
29210: LD_EXP 110
29214: IN
29215: NOT
29216: IFFALSE 29299
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29218: LD_ADDR_EXP 110
29222: PUSH
29223: LD_EXP 110
29227: PPUSH
29228: LD_EXP 110
29232: PUSH
29233: LD_INT 1
29235: PLUS
29236: PPUSH
29237: LD_VAR 0 1
29241: PPUSH
29242: CALL_OW 1
29246: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
29247: LD_ADDR_EXP 111
29251: PUSH
29252: LD_EXP 111
29256: PPUSH
29257: LD_EXP 111
29261: PUSH
29262: LD_INT 1
29264: PLUS
29265: PPUSH
29266: EMPTY
29267: PPUSH
29268: CALL_OW 1
29272: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
29273: LD_ADDR_EXP 114
29277: PUSH
29278: LD_EXP 114
29282: PPUSH
29283: LD_EXP 114
29287: PUSH
29288: LD_INT 1
29290: PLUS
29291: PPUSH
29292: EMPTY
29293: PPUSH
29294: CALL_OW 1
29298: ST_TO_ADDR
// end ; if not IsOk ( i ) then
29299: LD_VAR 0 1
29303: PPUSH
29304: CALL_OW 302
29308: NOT
29309: IFFALSE 29322
// begin HackUnlinkAll ( i ) ;
29311: LD_VAR 0 1
29315: PPUSH
29316: CALL 29428 0 1
// continue ;
29320: GO 29202
// end ; HackCheckCapturedStatus ( i ) ;
29322: LD_VAR 0 1
29326: PPUSH
29327: CALL 29871 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
29331: LD_ADDR_VAR 0 2
29335: PUSH
29336: LD_INT 81
29338: PUSH
29339: LD_VAR 0 1
29343: PPUSH
29344: CALL_OW 255
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PUSH
29353: LD_INT 33
29355: PUSH
29356: LD_INT 3
29358: PUSH
29359: EMPTY
29360: LIST
29361: LIST
29362: PUSH
29363: LD_INT 91
29365: PUSH
29366: LD_VAR 0 1
29370: PUSH
29371: LD_EXP 113
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: LIST
29380: PUSH
29381: LD_INT 50
29383: PUSH
29384: EMPTY
29385: LIST
29386: PUSH
29387: EMPTY
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: PPUSH
29393: CALL_OW 69
29397: ST_TO_ADDR
// if not tmp then
29398: LD_VAR 0 2
29402: NOT
29403: IFFALSE 29407
// continue ;
29405: GO 29202
// HackLink ( i , tmp ) ;
29407: LD_VAR 0 1
29411: PPUSH
29412: LD_VAR 0 2
29416: PPUSH
29417: CALL 29564 0 2
// end ;
29421: GO 29202
29423: POP
29424: POP
// end ;
29425: PPOPN 2
29427: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
29428: LD_INT 0
29430: PPUSH
29431: PPUSH
29432: PPUSH
// if not hack in hackTanks then
29433: LD_VAR 0 1
29437: PUSH
29438: LD_EXP 110
29442: IN
29443: NOT
29444: IFFALSE 29448
// exit ;
29446: GO 29559
// index := GetElementIndex ( hackTanks , hack ) ;
29448: LD_ADDR_VAR 0 4
29452: PUSH
29453: LD_EXP 110
29457: PPUSH
29458: LD_VAR 0 1
29462: PPUSH
29463: CALL 36993 0 2
29467: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
29468: LD_EXP 111
29472: PUSH
29473: LD_VAR 0 4
29477: ARRAY
29478: IFFALSE 29559
// begin for i in hackTanksCaptured [ index ] do
29480: LD_ADDR_VAR 0 3
29484: PUSH
29485: LD_EXP 111
29489: PUSH
29490: LD_VAR 0 4
29494: ARRAY
29495: PUSH
29496: FOR_IN
29497: IFFALSE 29523
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
29499: LD_VAR 0 3
29503: PUSH
29504: LD_INT 1
29506: ARRAY
29507: PPUSH
29508: LD_VAR 0 3
29512: PUSH
29513: LD_INT 2
29515: ARRAY
29516: PPUSH
29517: CALL_OW 235
29521: GO 29496
29523: POP
29524: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
29525: LD_ADDR_EXP 111
29529: PUSH
29530: LD_EXP 111
29534: PPUSH
29535: LD_VAR 0 4
29539: PPUSH
29540: EMPTY
29541: PPUSH
29542: CALL_OW 1
29546: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
29547: LD_VAR 0 1
29551: PPUSH
29552: LD_INT 0
29554: PPUSH
29555: CALL_OW 505
// end ; end ;
29559: LD_VAR 0 2
29563: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
29564: LD_INT 0
29566: PPUSH
29567: PPUSH
29568: PPUSH
// if not hack in hackTanks or not vehicles then
29569: LD_VAR 0 1
29573: PUSH
29574: LD_EXP 110
29578: IN
29579: NOT
29580: PUSH
29581: LD_VAR 0 2
29585: NOT
29586: OR
29587: IFFALSE 29591
// exit ;
29589: GO 29866
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
29591: LD_ADDR_VAR 0 2
29595: PUSH
29596: LD_VAR 0 1
29600: PPUSH
29601: LD_VAR 0 2
29605: PPUSH
29606: LD_INT 1
29608: PPUSH
29609: LD_INT 1
29611: PPUSH
29612: CALL 37643 0 4
29616: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
29617: LD_ADDR_VAR 0 5
29621: PUSH
29622: LD_EXP 110
29626: PPUSH
29627: LD_VAR 0 1
29631: PPUSH
29632: CALL 36993 0 2
29636: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
29637: LD_EXP 111
29641: PUSH
29642: LD_VAR 0 5
29646: ARRAY
29647: PUSH
29648: LD_EXP 112
29652: LESS
29653: IFFALSE 29842
// begin for i := 1 to vehicles do
29655: LD_ADDR_VAR 0 4
29659: PUSH
29660: DOUBLE
29661: LD_INT 1
29663: DEC
29664: ST_TO_ADDR
29665: LD_VAR 0 2
29669: PUSH
29670: FOR_TO
29671: IFFALSE 29840
// begin if hackTanksCaptured [ index ] = hackLimit then
29673: LD_EXP 111
29677: PUSH
29678: LD_VAR 0 5
29682: ARRAY
29683: PUSH
29684: LD_EXP 112
29688: EQUAL
29689: IFFALSE 29693
// break ;
29691: GO 29840
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
29693: LD_ADDR_EXP 114
29697: PUSH
29698: LD_EXP 114
29702: PPUSH
29703: LD_VAR 0 5
29707: PPUSH
29708: LD_EXP 114
29712: PUSH
29713: LD_VAR 0 5
29717: ARRAY
29718: PUSH
29719: LD_INT 1
29721: PLUS
29722: PPUSH
29723: CALL_OW 1
29727: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
29728: LD_ADDR_EXP 111
29732: PUSH
29733: LD_EXP 111
29737: PPUSH
29738: LD_VAR 0 5
29742: PUSH
29743: LD_EXP 111
29747: PUSH
29748: LD_VAR 0 5
29752: ARRAY
29753: PUSH
29754: LD_INT 1
29756: PLUS
29757: PUSH
29758: EMPTY
29759: LIST
29760: LIST
29761: PPUSH
29762: LD_VAR 0 2
29766: PUSH
29767: LD_VAR 0 4
29771: ARRAY
29772: PUSH
29773: LD_VAR 0 2
29777: PUSH
29778: LD_VAR 0 4
29782: ARRAY
29783: PPUSH
29784: CALL_OW 255
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: PPUSH
29793: CALL 37208 0 3
29797: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
29798: LD_VAR 0 2
29802: PUSH
29803: LD_VAR 0 4
29807: ARRAY
29808: PPUSH
29809: LD_VAR 0 1
29813: PPUSH
29814: CALL_OW 255
29818: PPUSH
29819: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
29823: LD_VAR 0 2
29827: PUSH
29828: LD_VAR 0 4
29832: ARRAY
29833: PPUSH
29834: CALL_OW 141
// end ;
29838: GO 29670
29840: POP
29841: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29842: LD_VAR 0 1
29846: PPUSH
29847: LD_EXP 111
29851: PUSH
29852: LD_VAR 0 5
29856: ARRAY
29857: PUSH
29858: LD_INT 0
29860: PLUS
29861: PPUSH
29862: CALL_OW 505
// end ;
29866: LD_VAR 0 3
29870: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
29871: LD_INT 0
29873: PPUSH
29874: PPUSH
29875: PPUSH
29876: PPUSH
// if not hack in hackTanks then
29877: LD_VAR 0 1
29881: PUSH
29882: LD_EXP 110
29886: IN
29887: NOT
29888: IFFALSE 29892
// exit ;
29890: GO 30132
// index := GetElementIndex ( hackTanks , hack ) ;
29892: LD_ADDR_VAR 0 4
29896: PUSH
29897: LD_EXP 110
29901: PPUSH
29902: LD_VAR 0 1
29906: PPUSH
29907: CALL 36993 0 2
29911: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
29912: LD_ADDR_VAR 0 3
29916: PUSH
29917: DOUBLE
29918: LD_EXP 111
29922: PUSH
29923: LD_VAR 0 4
29927: ARRAY
29928: INC
29929: ST_TO_ADDR
29930: LD_INT 1
29932: PUSH
29933: FOR_DOWNTO
29934: IFFALSE 30106
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
29936: LD_ADDR_VAR 0 5
29940: PUSH
29941: LD_EXP 111
29945: PUSH
29946: LD_VAR 0 4
29950: ARRAY
29951: PUSH
29952: LD_VAR 0 3
29956: ARRAY
29957: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
29958: LD_VAR 0 5
29962: PUSH
29963: LD_INT 1
29965: ARRAY
29966: PPUSH
29967: CALL_OW 302
29971: NOT
29972: PUSH
29973: LD_VAR 0 5
29977: PUSH
29978: LD_INT 1
29980: ARRAY
29981: PPUSH
29982: CALL_OW 255
29986: PUSH
29987: LD_VAR 0 1
29991: PPUSH
29992: CALL_OW 255
29996: NONEQUAL
29997: OR
29998: IFFALSE 30104
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
30000: LD_VAR 0 5
30004: PUSH
30005: LD_INT 1
30007: ARRAY
30008: PPUSH
30009: CALL_OW 305
30013: PUSH
30014: LD_VAR 0 5
30018: PUSH
30019: LD_INT 1
30021: ARRAY
30022: PPUSH
30023: CALL_OW 255
30027: PUSH
30028: LD_VAR 0 1
30032: PPUSH
30033: CALL_OW 255
30037: EQUAL
30038: AND
30039: IFFALSE 30063
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
30041: LD_VAR 0 5
30045: PUSH
30046: LD_INT 1
30048: ARRAY
30049: PPUSH
30050: LD_VAR 0 5
30054: PUSH
30055: LD_INT 2
30057: ARRAY
30058: PPUSH
30059: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
30063: LD_ADDR_EXP 111
30067: PUSH
30068: LD_EXP 111
30072: PPUSH
30073: LD_VAR 0 4
30077: PPUSH
30078: LD_EXP 111
30082: PUSH
30083: LD_VAR 0 4
30087: ARRAY
30088: PPUSH
30089: LD_VAR 0 3
30093: PPUSH
30094: CALL_OW 3
30098: PPUSH
30099: CALL_OW 1
30103: ST_TO_ADDR
// end ; end ;
30104: GO 29933
30106: POP
30107: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30108: LD_VAR 0 1
30112: PPUSH
30113: LD_EXP 111
30117: PUSH
30118: LD_VAR 0 4
30122: ARRAY
30123: PUSH
30124: LD_INT 0
30126: PLUS
30127: PPUSH
30128: CALL_OW 505
// end ;
30132: LD_VAR 0 2
30136: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
30137: LD_INT 0
30139: PPUSH
30140: PPUSH
30141: PPUSH
30142: PPUSH
// if not hack in hackTanks then
30143: LD_VAR 0 1
30147: PUSH
30148: LD_EXP 110
30152: IN
30153: NOT
30154: IFFALSE 30158
// exit ;
30156: GO 30243
// index := GetElementIndex ( hackTanks , hack ) ;
30158: LD_ADDR_VAR 0 5
30162: PUSH
30163: LD_EXP 110
30167: PPUSH
30168: LD_VAR 0 1
30172: PPUSH
30173: CALL 36993 0 2
30177: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30178: LD_ADDR_VAR 0 4
30182: PUSH
30183: DOUBLE
30184: LD_INT 1
30186: DEC
30187: ST_TO_ADDR
30188: LD_EXP 111
30192: PUSH
30193: LD_VAR 0 5
30197: ARRAY
30198: PUSH
30199: FOR_TO
30200: IFFALSE 30241
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30202: LD_EXP 111
30206: PUSH
30207: LD_VAR 0 5
30211: ARRAY
30212: PUSH
30213: LD_VAR 0 4
30217: ARRAY
30218: PUSH
30219: LD_INT 1
30221: ARRAY
30222: PUSH
30223: LD_VAR 0 2
30227: EQUAL
30228: IFFALSE 30239
// KillUnit ( vehicle ) ;
30230: LD_VAR 0 2
30234: PPUSH
30235: CALL_OW 66
30239: GO 30199
30241: POP
30242: POP
// end ;
30243: LD_VAR 0 3
30247: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
30248: LD_EXP 115
30252: NOT
30253: IFFALSE 30288
30255: GO 30257
30257: DISABLE
// begin initMiner := true ;
30258: LD_ADDR_EXP 115
30262: PUSH
30263: LD_INT 1
30265: ST_TO_ADDR
// minersList := [ ] ;
30266: LD_ADDR_EXP 116
30270: PUSH
30271: EMPTY
30272: ST_TO_ADDR
// minerMinesList := [ ] ;
30273: LD_ADDR_EXP 117
30277: PUSH
30278: EMPTY
30279: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
30280: LD_ADDR_EXP 118
30284: PUSH
30285: LD_INT 5
30287: ST_TO_ADDR
// end ;
30288: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
30289: LD_EXP 115
30293: PUSH
30294: LD_INT 34
30296: PUSH
30297: LD_EXP 45
30301: PUSH
30302: EMPTY
30303: LIST
30304: LIST
30305: PPUSH
30306: CALL_OW 69
30310: AND
30311: IFFALSE 30774
30313: GO 30315
30315: DISABLE
30316: LD_INT 0
30318: PPUSH
30319: PPUSH
30320: PPUSH
30321: PPUSH
// begin enable ;
30322: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
30323: LD_ADDR_VAR 0 1
30327: PUSH
30328: LD_INT 34
30330: PUSH
30331: LD_EXP 45
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PPUSH
30340: CALL_OW 69
30344: PUSH
30345: FOR_IN
30346: IFFALSE 30418
// begin if not i in minersList then
30348: LD_VAR 0 1
30352: PUSH
30353: LD_EXP 116
30357: IN
30358: NOT
30359: IFFALSE 30416
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
30361: LD_ADDR_EXP 116
30365: PUSH
30366: LD_EXP 116
30370: PPUSH
30371: LD_EXP 116
30375: PUSH
30376: LD_INT 1
30378: PLUS
30379: PPUSH
30380: LD_VAR 0 1
30384: PPUSH
30385: CALL_OW 1
30389: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
30390: LD_ADDR_EXP 117
30394: PUSH
30395: LD_EXP 117
30399: PPUSH
30400: LD_EXP 117
30404: PUSH
30405: LD_INT 1
30407: PLUS
30408: PPUSH
30409: EMPTY
30410: PPUSH
30411: CALL_OW 1
30415: ST_TO_ADDR
// end end ;
30416: GO 30345
30418: POP
30419: POP
// for i := minerMinesList downto 1 do
30420: LD_ADDR_VAR 0 1
30424: PUSH
30425: DOUBLE
30426: LD_EXP 117
30430: INC
30431: ST_TO_ADDR
30432: LD_INT 1
30434: PUSH
30435: FOR_DOWNTO
30436: IFFALSE 30772
// begin if IsLive ( minersList [ i ] ) then
30438: LD_EXP 116
30442: PUSH
30443: LD_VAR 0 1
30447: ARRAY
30448: PPUSH
30449: CALL_OW 300
30453: IFFALSE 30481
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
30455: LD_EXP 116
30459: PUSH
30460: LD_VAR 0 1
30464: ARRAY
30465: PPUSH
30466: LD_EXP 117
30470: PUSH
30471: LD_VAR 0 1
30475: ARRAY
30476: PPUSH
30477: CALL_OW 505
// if not minerMinesList [ i ] then
30481: LD_EXP 117
30485: PUSH
30486: LD_VAR 0 1
30490: ARRAY
30491: NOT
30492: IFFALSE 30496
// continue ;
30494: GO 30435
// for j := minerMinesList [ i ] downto 1 do
30496: LD_ADDR_VAR 0 2
30500: PUSH
30501: DOUBLE
30502: LD_EXP 117
30506: PUSH
30507: LD_VAR 0 1
30511: ARRAY
30512: INC
30513: ST_TO_ADDR
30514: LD_INT 1
30516: PUSH
30517: FOR_DOWNTO
30518: IFFALSE 30768
// begin side := GetSide ( minersList [ i ] ) ;
30520: LD_ADDR_VAR 0 3
30524: PUSH
30525: LD_EXP 116
30529: PUSH
30530: LD_VAR 0 1
30534: ARRAY
30535: PPUSH
30536: CALL_OW 255
30540: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
30541: LD_ADDR_VAR 0 4
30545: PUSH
30546: LD_EXP 117
30550: PUSH
30551: LD_VAR 0 1
30555: ARRAY
30556: PUSH
30557: LD_VAR 0 2
30561: ARRAY
30562: PUSH
30563: LD_INT 1
30565: ARRAY
30566: PPUSH
30567: LD_EXP 117
30571: PUSH
30572: LD_VAR 0 1
30576: ARRAY
30577: PUSH
30578: LD_VAR 0 2
30582: ARRAY
30583: PUSH
30584: LD_INT 2
30586: ARRAY
30587: PPUSH
30588: CALL_OW 428
30592: ST_TO_ADDR
// if not tmp then
30593: LD_VAR 0 4
30597: NOT
30598: IFFALSE 30602
// continue ;
30600: GO 30517
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
30602: LD_VAR 0 4
30606: PUSH
30607: LD_INT 81
30609: PUSH
30610: LD_VAR 0 3
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: PPUSH
30619: CALL_OW 69
30623: IN
30624: PUSH
30625: LD_EXP 117
30629: PUSH
30630: LD_VAR 0 1
30634: ARRAY
30635: PUSH
30636: LD_VAR 0 2
30640: ARRAY
30641: PUSH
30642: LD_INT 1
30644: ARRAY
30645: PPUSH
30646: LD_EXP 117
30650: PUSH
30651: LD_VAR 0 1
30655: ARRAY
30656: PUSH
30657: LD_VAR 0 2
30661: ARRAY
30662: PUSH
30663: LD_INT 2
30665: ARRAY
30666: PPUSH
30667: CALL_OW 458
30671: AND
30672: IFFALSE 30766
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
30674: LD_EXP 117
30678: PUSH
30679: LD_VAR 0 1
30683: ARRAY
30684: PUSH
30685: LD_VAR 0 2
30689: ARRAY
30690: PUSH
30691: LD_INT 1
30693: ARRAY
30694: PPUSH
30695: LD_EXP 117
30699: PUSH
30700: LD_VAR 0 1
30704: ARRAY
30705: PUSH
30706: LD_VAR 0 2
30710: ARRAY
30711: PUSH
30712: LD_INT 2
30714: ARRAY
30715: PPUSH
30716: LD_VAR 0 3
30720: PPUSH
30721: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
30725: LD_ADDR_EXP 117
30729: PUSH
30730: LD_EXP 117
30734: PPUSH
30735: LD_VAR 0 1
30739: PPUSH
30740: LD_EXP 117
30744: PUSH
30745: LD_VAR 0 1
30749: ARRAY
30750: PPUSH
30751: LD_VAR 0 2
30755: PPUSH
30756: CALL_OW 3
30760: PPUSH
30761: CALL_OW 1
30765: ST_TO_ADDR
// end ; end ;
30766: GO 30517
30768: POP
30769: POP
// end ;
30770: GO 30435
30772: POP
30773: POP
// end ;
30774: PPOPN 4
30776: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
30777: LD_INT 0
30779: PPUSH
30780: PPUSH
// result := false ;
30781: LD_ADDR_VAR 0 4
30785: PUSH
30786: LD_INT 0
30788: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
30789: LD_VAR 0 1
30793: PPUSH
30794: CALL_OW 264
30798: PUSH
30799: LD_EXP 45
30803: EQUAL
30804: NOT
30805: IFFALSE 30809
// exit ;
30807: GO 31049
// index := GetElementIndex ( minersList , unit ) ;
30809: LD_ADDR_VAR 0 5
30813: PUSH
30814: LD_EXP 116
30818: PPUSH
30819: LD_VAR 0 1
30823: PPUSH
30824: CALL 36993 0 2
30828: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
30829: LD_EXP 117
30833: PUSH
30834: LD_VAR 0 5
30838: ARRAY
30839: PUSH
30840: LD_EXP 118
30844: GREATEREQUAL
30845: IFFALSE 30849
// exit ;
30847: GO 31049
// ComMoveXY ( unit , x , y ) ;
30849: LD_VAR 0 1
30853: PPUSH
30854: LD_VAR 0 2
30858: PPUSH
30859: LD_VAR 0 3
30863: PPUSH
30864: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30868: LD_INT 35
30870: PPUSH
30871: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
30875: LD_VAR 0 1
30879: PPUSH
30880: LD_VAR 0 2
30884: PPUSH
30885: LD_VAR 0 3
30889: PPUSH
30890: CALL 67057 0 3
30894: NOT
30895: PUSH
30896: LD_VAR 0 1
30900: PPUSH
30901: CALL_OW 314
30905: AND
30906: IFFALSE 30910
// exit ;
30908: GO 31049
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
30910: LD_VAR 0 2
30914: PPUSH
30915: LD_VAR 0 3
30919: PPUSH
30920: CALL_OW 428
30924: PUSH
30925: LD_VAR 0 1
30929: EQUAL
30930: PUSH
30931: LD_VAR 0 1
30935: PPUSH
30936: CALL_OW 314
30940: NOT
30941: AND
30942: IFFALSE 30868
// PlaySoundXY ( x , y , PlantMine ) ;
30944: LD_VAR 0 2
30948: PPUSH
30949: LD_VAR 0 3
30953: PPUSH
30954: LD_STRING PlantMine
30956: PPUSH
30957: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
30961: LD_VAR 0 2
30965: PPUSH
30966: LD_VAR 0 3
30970: PPUSH
30971: LD_VAR 0 1
30975: PPUSH
30976: CALL_OW 255
30980: PPUSH
30981: LD_INT 0
30983: PPUSH
30984: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
30988: LD_ADDR_EXP 117
30992: PUSH
30993: LD_EXP 117
30997: PPUSH
30998: LD_VAR 0 5
31002: PUSH
31003: LD_EXP 117
31007: PUSH
31008: LD_VAR 0 5
31012: ARRAY
31013: PUSH
31014: LD_INT 1
31016: PLUS
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PPUSH
31022: LD_VAR 0 2
31026: PUSH
31027: LD_VAR 0 3
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: PPUSH
31036: CALL 37208 0 3
31040: ST_TO_ADDR
// result := true ;
31041: LD_ADDR_VAR 0 4
31045: PUSH
31046: LD_INT 1
31048: ST_TO_ADDR
// end ;
31049: LD_VAR 0 4
31053: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
31054: LD_INT 0
31056: PPUSH
31057: PPUSH
31058: PPUSH
// if not unit in minersList then
31059: LD_VAR 0 1
31063: PUSH
31064: LD_EXP 116
31068: IN
31069: NOT
31070: IFFALSE 31074
// exit ;
31072: GO 31466
// index := GetElementIndex ( minersList , unit ) ;
31074: LD_ADDR_VAR 0 6
31078: PUSH
31079: LD_EXP 116
31083: PPUSH
31084: LD_VAR 0 1
31088: PPUSH
31089: CALL 36993 0 2
31093: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
31094: LD_ADDR_VAR 0 5
31098: PUSH
31099: DOUBLE
31100: LD_EXP 117
31104: PUSH
31105: LD_VAR 0 6
31109: ARRAY
31110: INC
31111: ST_TO_ADDR
31112: LD_INT 1
31114: PUSH
31115: FOR_DOWNTO
31116: IFFALSE 31277
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
31118: LD_EXP 117
31122: PUSH
31123: LD_VAR 0 6
31127: ARRAY
31128: PUSH
31129: LD_VAR 0 5
31133: ARRAY
31134: PUSH
31135: LD_INT 1
31137: ARRAY
31138: PUSH
31139: LD_VAR 0 2
31143: EQUAL
31144: PUSH
31145: LD_EXP 117
31149: PUSH
31150: LD_VAR 0 6
31154: ARRAY
31155: PUSH
31156: LD_VAR 0 5
31160: ARRAY
31161: PUSH
31162: LD_INT 2
31164: ARRAY
31165: PUSH
31166: LD_VAR 0 3
31170: EQUAL
31171: AND
31172: IFFALSE 31275
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31174: LD_EXP 117
31178: PUSH
31179: LD_VAR 0 6
31183: ARRAY
31184: PUSH
31185: LD_VAR 0 5
31189: ARRAY
31190: PUSH
31191: LD_INT 1
31193: ARRAY
31194: PPUSH
31195: LD_EXP 117
31199: PUSH
31200: LD_VAR 0 6
31204: ARRAY
31205: PUSH
31206: LD_VAR 0 5
31210: ARRAY
31211: PUSH
31212: LD_INT 2
31214: ARRAY
31215: PPUSH
31216: LD_VAR 0 1
31220: PPUSH
31221: CALL_OW 255
31225: PPUSH
31226: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31230: LD_ADDR_EXP 117
31234: PUSH
31235: LD_EXP 117
31239: PPUSH
31240: LD_VAR 0 6
31244: PPUSH
31245: LD_EXP 117
31249: PUSH
31250: LD_VAR 0 6
31254: ARRAY
31255: PPUSH
31256: LD_VAR 0 5
31260: PPUSH
31261: CALL_OW 3
31265: PPUSH
31266: CALL_OW 1
31270: ST_TO_ADDR
// exit ;
31271: POP
31272: POP
31273: GO 31466
// end ; end ;
31275: GO 31115
31277: POP
31278: POP
// for i := minerMinesList [ index ] downto 1 do
31279: LD_ADDR_VAR 0 5
31283: PUSH
31284: DOUBLE
31285: LD_EXP 117
31289: PUSH
31290: LD_VAR 0 6
31294: ARRAY
31295: INC
31296: ST_TO_ADDR
31297: LD_INT 1
31299: PUSH
31300: FOR_DOWNTO
31301: IFFALSE 31464
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
31303: LD_EXP 117
31307: PUSH
31308: LD_VAR 0 6
31312: ARRAY
31313: PUSH
31314: LD_VAR 0 5
31318: ARRAY
31319: PUSH
31320: LD_INT 1
31322: ARRAY
31323: PPUSH
31324: LD_EXP 117
31328: PUSH
31329: LD_VAR 0 6
31333: ARRAY
31334: PUSH
31335: LD_VAR 0 5
31339: ARRAY
31340: PUSH
31341: LD_INT 2
31343: ARRAY
31344: PPUSH
31345: LD_VAR 0 2
31349: PPUSH
31350: LD_VAR 0 3
31354: PPUSH
31355: CALL_OW 298
31359: PUSH
31360: LD_INT 6
31362: LESS
31363: IFFALSE 31462
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31365: LD_EXP 117
31369: PUSH
31370: LD_VAR 0 6
31374: ARRAY
31375: PUSH
31376: LD_VAR 0 5
31380: ARRAY
31381: PUSH
31382: LD_INT 1
31384: ARRAY
31385: PPUSH
31386: LD_EXP 117
31390: PUSH
31391: LD_VAR 0 6
31395: ARRAY
31396: PUSH
31397: LD_VAR 0 5
31401: ARRAY
31402: PUSH
31403: LD_INT 2
31405: ARRAY
31406: PPUSH
31407: LD_VAR 0 1
31411: PPUSH
31412: CALL_OW 255
31416: PPUSH
31417: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31421: LD_ADDR_EXP 117
31425: PUSH
31426: LD_EXP 117
31430: PPUSH
31431: LD_VAR 0 6
31435: PPUSH
31436: LD_EXP 117
31440: PUSH
31441: LD_VAR 0 6
31445: ARRAY
31446: PPUSH
31447: LD_VAR 0 5
31451: PPUSH
31452: CALL_OW 3
31456: PPUSH
31457: CALL_OW 1
31461: ST_TO_ADDR
// end ; end ;
31462: GO 31300
31464: POP
31465: POP
// end ;
31466: LD_VAR 0 4
31470: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
31471: LD_INT 0
31473: PPUSH
31474: PPUSH
31475: PPUSH
31476: PPUSH
31477: PPUSH
31478: PPUSH
31479: PPUSH
31480: PPUSH
31481: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
31482: LD_VAR 0 1
31486: PPUSH
31487: CALL_OW 264
31491: PUSH
31492: LD_EXP 45
31496: EQUAL
31497: NOT
31498: PUSH
31499: LD_VAR 0 1
31503: PUSH
31504: LD_EXP 116
31508: IN
31509: NOT
31510: OR
31511: IFFALSE 31515
// exit ;
31513: GO 31837
// index := GetElementIndex ( minersList , unit ) ;
31515: LD_ADDR_VAR 0 6
31519: PUSH
31520: LD_EXP 116
31524: PPUSH
31525: LD_VAR 0 1
31529: PPUSH
31530: CALL 36993 0 2
31534: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
31535: LD_ADDR_VAR 0 8
31539: PUSH
31540: LD_EXP 118
31544: PUSH
31545: LD_EXP 117
31549: PUSH
31550: LD_VAR 0 6
31554: ARRAY
31555: MINUS
31556: ST_TO_ADDR
// if not minesFreeAmount then
31557: LD_VAR 0 8
31561: NOT
31562: IFFALSE 31566
// exit ;
31564: GO 31837
// tmp := [ ] ;
31566: LD_ADDR_VAR 0 7
31570: PUSH
31571: EMPTY
31572: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
31573: LD_ADDR_VAR 0 5
31577: PUSH
31578: DOUBLE
31579: LD_INT 1
31581: DEC
31582: ST_TO_ADDR
31583: LD_VAR 0 8
31587: PUSH
31588: FOR_TO
31589: IFFALSE 31784
// begin _d := rand ( 0 , 5 ) ;
31591: LD_ADDR_VAR 0 11
31595: PUSH
31596: LD_INT 0
31598: PPUSH
31599: LD_INT 5
31601: PPUSH
31602: CALL_OW 12
31606: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
31607: LD_ADDR_VAR 0 12
31611: PUSH
31612: LD_INT 2
31614: PPUSH
31615: LD_INT 6
31617: PPUSH
31618: CALL_OW 12
31622: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
31623: LD_ADDR_VAR 0 9
31627: PUSH
31628: LD_VAR 0 2
31632: PPUSH
31633: LD_VAR 0 11
31637: PPUSH
31638: LD_VAR 0 12
31642: PPUSH
31643: CALL_OW 272
31647: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
31648: LD_ADDR_VAR 0 10
31652: PUSH
31653: LD_VAR 0 3
31657: PPUSH
31658: LD_VAR 0 11
31662: PPUSH
31663: LD_VAR 0 12
31667: PPUSH
31668: CALL_OW 273
31672: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
31673: LD_VAR 0 9
31677: PPUSH
31678: LD_VAR 0 10
31682: PPUSH
31683: CALL_OW 488
31687: PUSH
31688: LD_VAR 0 9
31692: PUSH
31693: LD_VAR 0 10
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: PUSH
31702: LD_VAR 0 7
31706: IN
31707: NOT
31708: AND
31709: PUSH
31710: LD_VAR 0 9
31714: PPUSH
31715: LD_VAR 0 10
31719: PPUSH
31720: CALL_OW 458
31724: NOT
31725: AND
31726: IFFALSE 31768
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
31728: LD_ADDR_VAR 0 7
31732: PUSH
31733: LD_VAR 0 7
31737: PPUSH
31738: LD_VAR 0 7
31742: PUSH
31743: LD_INT 1
31745: PLUS
31746: PPUSH
31747: LD_VAR 0 9
31751: PUSH
31752: LD_VAR 0 10
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: PPUSH
31761: CALL_OW 1
31765: ST_TO_ADDR
31766: GO 31782
// i := i - 1 ;
31768: LD_ADDR_VAR 0 5
31772: PUSH
31773: LD_VAR 0 5
31777: PUSH
31778: LD_INT 1
31780: MINUS
31781: ST_TO_ADDR
// end ;
31782: GO 31588
31784: POP
31785: POP
// for i in tmp do
31786: LD_ADDR_VAR 0 5
31790: PUSH
31791: LD_VAR 0 7
31795: PUSH
31796: FOR_IN
31797: IFFALSE 31835
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
31799: LD_VAR 0 1
31803: PPUSH
31804: LD_VAR 0 5
31808: PUSH
31809: LD_INT 1
31811: ARRAY
31812: PPUSH
31813: LD_VAR 0 5
31817: PUSH
31818: LD_INT 2
31820: ARRAY
31821: PPUSH
31822: CALL 30777 0 3
31826: NOT
31827: IFFALSE 31833
// exit ;
31829: POP
31830: POP
31831: GO 31837
31833: GO 31796
31835: POP
31836: POP
// end ;
31837: LD_VAR 0 4
31841: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
31842: LD_INT 0
31844: PPUSH
31845: PPUSH
31846: PPUSH
31847: PPUSH
31848: PPUSH
31849: PPUSH
31850: PPUSH
// if not GetClass ( unit ) = class_sniper then
31851: LD_VAR 0 1
31855: PPUSH
31856: CALL_OW 257
31860: PUSH
31861: LD_INT 5
31863: EQUAL
31864: NOT
31865: IFFALSE 31869
// exit ;
31867: GO 32257
// dist := 8 ;
31869: LD_ADDR_VAR 0 5
31873: PUSH
31874: LD_INT 8
31876: ST_TO_ADDR
// viewRange := 12 ;
31877: LD_ADDR_VAR 0 7
31881: PUSH
31882: LD_INT 12
31884: ST_TO_ADDR
// side := GetSide ( unit ) ;
31885: LD_ADDR_VAR 0 6
31889: PUSH
31890: LD_VAR 0 1
31894: PPUSH
31895: CALL_OW 255
31899: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
31900: LD_INT 61
31902: PPUSH
31903: LD_VAR 0 6
31907: PPUSH
31908: CALL_OW 321
31912: PUSH
31913: LD_INT 2
31915: EQUAL
31916: IFFALSE 31926
// viewRange := 16 ;
31918: LD_ADDR_VAR 0 7
31922: PUSH
31923: LD_INT 16
31925: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
31926: LD_VAR 0 1
31930: PPUSH
31931: LD_VAR 0 2
31935: PPUSH
31936: LD_VAR 0 3
31940: PPUSH
31941: CALL_OW 297
31945: PUSH
31946: LD_VAR 0 5
31950: GREATER
31951: IFFALSE 32030
// begin ComMoveXY ( unit , x , y ) ;
31953: LD_VAR 0 1
31957: PPUSH
31958: LD_VAR 0 2
31962: PPUSH
31963: LD_VAR 0 3
31967: PPUSH
31968: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31972: LD_INT 35
31974: PPUSH
31975: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
31979: LD_VAR 0 1
31983: PPUSH
31984: LD_VAR 0 2
31988: PPUSH
31989: LD_VAR 0 3
31993: PPUSH
31994: CALL 67057 0 3
31998: NOT
31999: IFFALSE 32003
// exit ;
32001: GO 32257
// until GetDistUnitXY ( unit , x , y ) < dist ;
32003: LD_VAR 0 1
32007: PPUSH
32008: LD_VAR 0 2
32012: PPUSH
32013: LD_VAR 0 3
32017: PPUSH
32018: CALL_OW 297
32022: PUSH
32023: LD_VAR 0 5
32027: LESS
32028: IFFALSE 31972
// end ; ComTurnXY ( unit , x , y ) ;
32030: LD_VAR 0 1
32034: PPUSH
32035: LD_VAR 0 2
32039: PPUSH
32040: LD_VAR 0 3
32044: PPUSH
32045: CALL_OW 118
// wait ( 5 ) ;
32049: LD_INT 5
32051: PPUSH
32052: CALL_OW 67
// _d := GetDir ( unit ) ;
32056: LD_ADDR_VAR 0 10
32060: PUSH
32061: LD_VAR 0 1
32065: PPUSH
32066: CALL_OW 254
32070: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
32071: LD_ADDR_VAR 0 8
32075: PUSH
32076: LD_VAR 0 1
32080: PPUSH
32081: CALL_OW 250
32085: PPUSH
32086: LD_VAR 0 10
32090: PPUSH
32091: LD_VAR 0 5
32095: PPUSH
32096: CALL_OW 272
32100: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
32101: LD_ADDR_VAR 0 9
32105: PUSH
32106: LD_VAR 0 1
32110: PPUSH
32111: CALL_OW 251
32115: PPUSH
32116: LD_VAR 0 10
32120: PPUSH
32121: LD_VAR 0 5
32125: PPUSH
32126: CALL_OW 273
32130: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32131: LD_VAR 0 8
32135: PPUSH
32136: LD_VAR 0 9
32140: PPUSH
32141: CALL_OW 488
32145: NOT
32146: IFFALSE 32150
// exit ;
32148: GO 32257
// ComAnimCustom ( unit , 1 ) ;
32150: LD_VAR 0 1
32154: PPUSH
32155: LD_INT 1
32157: PPUSH
32158: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
32162: LD_VAR 0 8
32166: PPUSH
32167: LD_VAR 0 9
32171: PPUSH
32172: LD_VAR 0 6
32176: PPUSH
32177: LD_VAR 0 7
32181: PPUSH
32182: CALL_OW 330
// repeat wait ( 1 ) ;
32186: LD_INT 1
32188: PPUSH
32189: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
32193: LD_VAR 0 1
32197: PPUSH
32198: CALL_OW 316
32202: PUSH
32203: LD_VAR 0 1
32207: PPUSH
32208: CALL_OW 314
32212: OR
32213: PUSH
32214: LD_VAR 0 1
32218: PPUSH
32219: CALL_OW 302
32223: NOT
32224: OR
32225: PUSH
32226: LD_VAR 0 1
32230: PPUSH
32231: CALL_OW 301
32235: OR
32236: IFFALSE 32186
// RemoveSeeing ( _x , _y , side ) ;
32238: LD_VAR 0 8
32242: PPUSH
32243: LD_VAR 0 9
32247: PPUSH
32248: LD_VAR 0 6
32252: PPUSH
32253: CALL_OW 331
// end ; end_of_file
32257: LD_VAR 0 4
32261: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
32262: LD_INT 0
32264: PPUSH
32265: PPUSH
// if exist_mode then
32266: LD_VAR 0 2
32270: IFFALSE 32295
// unit := CreateCharacter ( prefix & ident ) else
32272: LD_ADDR_VAR 0 5
32276: PUSH
32277: LD_VAR 0 3
32281: PUSH
32282: LD_VAR 0 1
32286: STR
32287: PPUSH
32288: CALL_OW 34
32292: ST_TO_ADDR
32293: GO 32310
// unit := NewCharacter ( ident ) ;
32295: LD_ADDR_VAR 0 5
32299: PUSH
32300: LD_VAR 0 1
32304: PPUSH
32305: CALL_OW 25
32309: ST_TO_ADDR
// result := unit ;
32310: LD_ADDR_VAR 0 4
32314: PUSH
32315: LD_VAR 0 5
32319: ST_TO_ADDR
// end ;
32320: LD_VAR 0 4
32324: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
32325: LD_INT 0
32327: PPUSH
32328: PPUSH
// if not side or not nation then
32329: LD_VAR 0 1
32333: NOT
32334: PUSH
32335: LD_VAR 0 2
32339: NOT
32340: OR
32341: IFFALSE 32345
// exit ;
32343: GO 33109
// case nation of nation_american :
32345: LD_VAR 0 2
32349: PUSH
32350: LD_INT 1
32352: DOUBLE
32353: EQUAL
32354: IFTRUE 32358
32356: GO 32572
32358: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
32359: LD_ADDR_VAR 0 4
32363: PUSH
32364: LD_INT 35
32366: PUSH
32367: LD_INT 45
32369: PUSH
32370: LD_INT 46
32372: PUSH
32373: LD_INT 47
32375: PUSH
32376: LD_INT 82
32378: PUSH
32379: LD_INT 83
32381: PUSH
32382: LD_INT 84
32384: PUSH
32385: LD_INT 85
32387: PUSH
32388: LD_INT 86
32390: PUSH
32391: LD_INT 1
32393: PUSH
32394: LD_INT 2
32396: PUSH
32397: LD_INT 6
32399: PUSH
32400: LD_INT 15
32402: PUSH
32403: LD_INT 16
32405: PUSH
32406: LD_INT 7
32408: PUSH
32409: LD_INT 12
32411: PUSH
32412: LD_INT 13
32414: PUSH
32415: LD_INT 10
32417: PUSH
32418: LD_INT 14
32420: PUSH
32421: LD_INT 20
32423: PUSH
32424: LD_INT 21
32426: PUSH
32427: LD_INT 22
32429: PUSH
32430: LD_INT 25
32432: PUSH
32433: LD_INT 32
32435: PUSH
32436: LD_INT 27
32438: PUSH
32439: LD_INT 36
32441: PUSH
32442: LD_INT 69
32444: PUSH
32445: LD_INT 39
32447: PUSH
32448: LD_INT 34
32450: PUSH
32451: LD_INT 40
32453: PUSH
32454: LD_INT 48
32456: PUSH
32457: LD_INT 49
32459: PUSH
32460: LD_INT 50
32462: PUSH
32463: LD_INT 51
32465: PUSH
32466: LD_INT 52
32468: PUSH
32469: LD_INT 53
32471: PUSH
32472: LD_INT 54
32474: PUSH
32475: LD_INT 55
32477: PUSH
32478: LD_INT 56
32480: PUSH
32481: LD_INT 57
32483: PUSH
32484: LD_INT 58
32486: PUSH
32487: LD_INT 59
32489: PUSH
32490: LD_INT 60
32492: PUSH
32493: LD_INT 61
32495: PUSH
32496: LD_INT 62
32498: PUSH
32499: LD_INT 80
32501: PUSH
32502: LD_INT 82
32504: PUSH
32505: LD_INT 83
32507: PUSH
32508: LD_INT 84
32510: PUSH
32511: LD_INT 85
32513: PUSH
32514: LD_INT 86
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: ST_TO_ADDR
32570: GO 33033
32572: LD_INT 2
32574: DOUBLE
32575: EQUAL
32576: IFTRUE 32580
32578: GO 32802
32580: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
32581: LD_ADDR_VAR 0 4
32585: PUSH
32586: LD_INT 35
32588: PUSH
32589: LD_INT 45
32591: PUSH
32592: LD_INT 46
32594: PUSH
32595: LD_INT 47
32597: PUSH
32598: LD_INT 82
32600: PUSH
32601: LD_INT 83
32603: PUSH
32604: LD_INT 84
32606: PUSH
32607: LD_INT 85
32609: PUSH
32610: LD_INT 87
32612: PUSH
32613: LD_INT 70
32615: PUSH
32616: LD_INT 1
32618: PUSH
32619: LD_INT 11
32621: PUSH
32622: LD_INT 3
32624: PUSH
32625: LD_INT 4
32627: PUSH
32628: LD_INT 5
32630: PUSH
32631: LD_INT 6
32633: PUSH
32634: LD_INT 15
32636: PUSH
32637: LD_INT 18
32639: PUSH
32640: LD_INT 7
32642: PUSH
32643: LD_INT 17
32645: PUSH
32646: LD_INT 8
32648: PUSH
32649: LD_INT 20
32651: PUSH
32652: LD_INT 21
32654: PUSH
32655: LD_INT 22
32657: PUSH
32658: LD_INT 72
32660: PUSH
32661: LD_INT 26
32663: PUSH
32664: LD_INT 69
32666: PUSH
32667: LD_INT 39
32669: PUSH
32670: LD_INT 40
32672: PUSH
32673: LD_INT 41
32675: PUSH
32676: LD_INT 42
32678: PUSH
32679: LD_INT 43
32681: PUSH
32682: LD_INT 48
32684: PUSH
32685: LD_INT 49
32687: PUSH
32688: LD_INT 50
32690: PUSH
32691: LD_INT 51
32693: PUSH
32694: LD_INT 52
32696: PUSH
32697: LD_INT 53
32699: PUSH
32700: LD_INT 54
32702: PUSH
32703: LD_INT 55
32705: PUSH
32706: LD_INT 56
32708: PUSH
32709: LD_INT 60
32711: PUSH
32712: LD_INT 61
32714: PUSH
32715: LD_INT 62
32717: PUSH
32718: LD_INT 66
32720: PUSH
32721: LD_INT 67
32723: PUSH
32724: LD_INT 68
32726: PUSH
32727: LD_INT 81
32729: PUSH
32730: LD_INT 82
32732: PUSH
32733: LD_INT 83
32735: PUSH
32736: LD_INT 84
32738: PUSH
32739: LD_INT 85
32741: PUSH
32742: LD_INT 87
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: LIST
32749: LIST
32750: LIST
32751: LIST
32752: LIST
32753: LIST
32754: LIST
32755: LIST
32756: LIST
32757: LIST
32758: LIST
32759: LIST
32760: LIST
32761: LIST
32762: LIST
32763: LIST
32764: LIST
32765: LIST
32766: LIST
32767: LIST
32768: LIST
32769: LIST
32770: LIST
32771: LIST
32772: LIST
32773: LIST
32774: LIST
32775: LIST
32776: LIST
32777: LIST
32778: LIST
32779: LIST
32780: LIST
32781: LIST
32782: LIST
32783: LIST
32784: LIST
32785: LIST
32786: LIST
32787: LIST
32788: LIST
32789: LIST
32790: LIST
32791: LIST
32792: LIST
32793: LIST
32794: LIST
32795: LIST
32796: LIST
32797: LIST
32798: LIST
32799: ST_TO_ADDR
32800: GO 33033
32802: LD_INT 3
32804: DOUBLE
32805: EQUAL
32806: IFTRUE 32810
32808: GO 33032
32810: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
32811: LD_ADDR_VAR 0 4
32815: PUSH
32816: LD_INT 46
32818: PUSH
32819: LD_INT 47
32821: PUSH
32822: LD_INT 1
32824: PUSH
32825: LD_INT 2
32827: PUSH
32828: LD_INT 82
32830: PUSH
32831: LD_INT 83
32833: PUSH
32834: LD_INT 84
32836: PUSH
32837: LD_INT 85
32839: PUSH
32840: LD_INT 86
32842: PUSH
32843: LD_INT 11
32845: PUSH
32846: LD_INT 9
32848: PUSH
32849: LD_INT 20
32851: PUSH
32852: LD_INT 19
32854: PUSH
32855: LD_INT 21
32857: PUSH
32858: LD_INT 24
32860: PUSH
32861: LD_INT 22
32863: PUSH
32864: LD_INT 25
32866: PUSH
32867: LD_INT 28
32869: PUSH
32870: LD_INT 29
32872: PUSH
32873: LD_INT 30
32875: PUSH
32876: LD_INT 31
32878: PUSH
32879: LD_INT 37
32881: PUSH
32882: LD_INT 38
32884: PUSH
32885: LD_INT 32
32887: PUSH
32888: LD_INT 27
32890: PUSH
32891: LD_INT 33
32893: PUSH
32894: LD_INT 69
32896: PUSH
32897: LD_INT 39
32899: PUSH
32900: LD_INT 34
32902: PUSH
32903: LD_INT 40
32905: PUSH
32906: LD_INT 71
32908: PUSH
32909: LD_INT 23
32911: PUSH
32912: LD_INT 44
32914: PUSH
32915: LD_INT 48
32917: PUSH
32918: LD_INT 49
32920: PUSH
32921: LD_INT 50
32923: PUSH
32924: LD_INT 51
32926: PUSH
32927: LD_INT 52
32929: PUSH
32930: LD_INT 53
32932: PUSH
32933: LD_INT 54
32935: PUSH
32936: LD_INT 55
32938: PUSH
32939: LD_INT 56
32941: PUSH
32942: LD_INT 57
32944: PUSH
32945: LD_INT 58
32947: PUSH
32948: LD_INT 59
32950: PUSH
32951: LD_INT 63
32953: PUSH
32954: LD_INT 64
32956: PUSH
32957: LD_INT 65
32959: PUSH
32960: LD_INT 82
32962: PUSH
32963: LD_INT 83
32965: PUSH
32966: LD_INT 84
32968: PUSH
32969: LD_INT 85
32971: PUSH
32972: LD_INT 86
32974: PUSH
32975: EMPTY
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: LIST
32986: LIST
32987: LIST
32988: LIST
32989: LIST
32990: LIST
32991: LIST
32992: LIST
32993: LIST
32994: LIST
32995: LIST
32996: LIST
32997: LIST
32998: LIST
32999: LIST
33000: LIST
33001: LIST
33002: LIST
33003: LIST
33004: LIST
33005: LIST
33006: LIST
33007: LIST
33008: LIST
33009: LIST
33010: LIST
33011: LIST
33012: LIST
33013: LIST
33014: LIST
33015: LIST
33016: LIST
33017: LIST
33018: LIST
33019: LIST
33020: LIST
33021: LIST
33022: LIST
33023: LIST
33024: LIST
33025: LIST
33026: LIST
33027: LIST
33028: LIST
33029: ST_TO_ADDR
33030: GO 33033
33032: POP
// if state > - 1 and state < 3 then
33033: LD_VAR 0 3
33037: PUSH
33038: LD_INT 1
33040: NEG
33041: GREATER
33042: PUSH
33043: LD_VAR 0 3
33047: PUSH
33048: LD_INT 3
33050: LESS
33051: AND
33052: IFFALSE 33109
// for i in result do
33054: LD_ADDR_VAR 0 5
33058: PUSH
33059: LD_VAR 0 4
33063: PUSH
33064: FOR_IN
33065: IFFALSE 33107
// if GetTech ( i , side ) <> state then
33067: LD_VAR 0 5
33071: PPUSH
33072: LD_VAR 0 1
33076: PPUSH
33077: CALL_OW 321
33081: PUSH
33082: LD_VAR 0 3
33086: NONEQUAL
33087: IFFALSE 33105
// result := result diff i ;
33089: LD_ADDR_VAR 0 4
33093: PUSH
33094: LD_VAR 0 4
33098: PUSH
33099: LD_VAR 0 5
33103: DIFF
33104: ST_TO_ADDR
33105: GO 33064
33107: POP
33108: POP
// end ;
33109: LD_VAR 0 4
33113: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
33114: LD_INT 0
33116: PPUSH
33117: PPUSH
33118: PPUSH
// result := true ;
33119: LD_ADDR_VAR 0 3
33123: PUSH
33124: LD_INT 1
33126: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
33127: LD_ADDR_VAR 0 5
33131: PUSH
33132: LD_VAR 0 2
33136: PPUSH
33137: CALL_OW 480
33141: ST_TO_ADDR
// if not tmp then
33142: LD_VAR 0 5
33146: NOT
33147: IFFALSE 33151
// exit ;
33149: GO 33200
// for i in tmp do
33151: LD_ADDR_VAR 0 4
33155: PUSH
33156: LD_VAR 0 5
33160: PUSH
33161: FOR_IN
33162: IFFALSE 33198
// if GetTech ( i , side ) <> state_researched then
33164: LD_VAR 0 4
33168: PPUSH
33169: LD_VAR 0 1
33173: PPUSH
33174: CALL_OW 321
33178: PUSH
33179: LD_INT 2
33181: NONEQUAL
33182: IFFALSE 33196
// begin result := false ;
33184: LD_ADDR_VAR 0 3
33188: PUSH
33189: LD_INT 0
33191: ST_TO_ADDR
// exit ;
33192: POP
33193: POP
33194: GO 33200
// end ;
33196: GO 33161
33198: POP
33199: POP
// end ;
33200: LD_VAR 0 3
33204: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
33205: LD_INT 0
33207: PPUSH
33208: PPUSH
33209: PPUSH
33210: PPUSH
33211: PPUSH
33212: PPUSH
33213: PPUSH
33214: PPUSH
33215: PPUSH
33216: PPUSH
33217: PPUSH
33218: PPUSH
33219: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
33220: LD_VAR 0 1
33224: NOT
33225: PUSH
33226: LD_VAR 0 1
33230: PPUSH
33231: CALL_OW 257
33235: PUSH
33236: LD_INT 9
33238: NONEQUAL
33239: OR
33240: IFFALSE 33244
// exit ;
33242: GO 33817
// side := GetSide ( unit ) ;
33244: LD_ADDR_VAR 0 9
33248: PUSH
33249: LD_VAR 0 1
33253: PPUSH
33254: CALL_OW 255
33258: ST_TO_ADDR
// tech_space := tech_spacanom ;
33259: LD_ADDR_VAR 0 12
33263: PUSH
33264: LD_INT 29
33266: ST_TO_ADDR
// tech_time := tech_taurad ;
33267: LD_ADDR_VAR 0 13
33271: PUSH
33272: LD_INT 28
33274: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
33275: LD_ADDR_VAR 0 11
33279: PUSH
33280: LD_VAR 0 1
33284: PPUSH
33285: CALL_OW 310
33289: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
33290: LD_VAR 0 11
33294: PPUSH
33295: CALL_OW 247
33299: PUSH
33300: LD_INT 2
33302: EQUAL
33303: IFFALSE 33307
// exit ;
33305: GO 33817
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33307: LD_ADDR_VAR 0 8
33311: PUSH
33312: LD_INT 81
33314: PUSH
33315: LD_VAR 0 9
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: PUSH
33324: LD_INT 3
33326: PUSH
33327: LD_INT 21
33329: PUSH
33330: LD_INT 3
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: PUSH
33337: EMPTY
33338: LIST
33339: LIST
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: PPUSH
33345: CALL_OW 69
33349: ST_TO_ADDR
// if not tmp then
33350: LD_VAR 0 8
33354: NOT
33355: IFFALSE 33359
// exit ;
33357: GO 33817
// if in_unit then
33359: LD_VAR 0 11
33363: IFFALSE 33387
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
33365: LD_ADDR_VAR 0 10
33369: PUSH
33370: LD_VAR 0 8
33374: PPUSH
33375: LD_VAR 0 11
33379: PPUSH
33380: CALL_OW 74
33384: ST_TO_ADDR
33385: GO 33407
// enemy := NearestUnitToUnit ( tmp , unit ) ;
33387: LD_ADDR_VAR 0 10
33391: PUSH
33392: LD_VAR 0 8
33396: PPUSH
33397: LD_VAR 0 1
33401: PPUSH
33402: CALL_OW 74
33406: ST_TO_ADDR
// if not enemy then
33407: LD_VAR 0 10
33411: NOT
33412: IFFALSE 33416
// exit ;
33414: GO 33817
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
33416: LD_VAR 0 11
33420: PUSH
33421: LD_VAR 0 11
33425: PPUSH
33426: LD_VAR 0 10
33430: PPUSH
33431: CALL_OW 296
33435: PUSH
33436: LD_INT 13
33438: GREATER
33439: AND
33440: PUSH
33441: LD_VAR 0 1
33445: PPUSH
33446: LD_VAR 0 10
33450: PPUSH
33451: CALL_OW 296
33455: PUSH
33456: LD_INT 12
33458: GREATER
33459: OR
33460: IFFALSE 33464
// exit ;
33462: GO 33817
// missile := [ 1 ] ;
33464: LD_ADDR_VAR 0 14
33468: PUSH
33469: LD_INT 1
33471: PUSH
33472: EMPTY
33473: LIST
33474: ST_TO_ADDR
// if Researched ( side , tech_space ) then
33475: LD_VAR 0 9
33479: PPUSH
33480: LD_VAR 0 12
33484: PPUSH
33485: CALL_OW 325
33489: IFFALSE 33518
// missile := Insert ( missile , missile + 1 , 2 ) ;
33491: LD_ADDR_VAR 0 14
33495: PUSH
33496: LD_VAR 0 14
33500: PPUSH
33501: LD_VAR 0 14
33505: PUSH
33506: LD_INT 1
33508: PLUS
33509: PPUSH
33510: LD_INT 2
33512: PPUSH
33513: CALL_OW 2
33517: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
33518: LD_VAR 0 9
33522: PPUSH
33523: LD_VAR 0 13
33527: PPUSH
33528: CALL_OW 325
33532: PUSH
33533: LD_VAR 0 10
33537: PPUSH
33538: CALL_OW 255
33542: PPUSH
33543: LD_VAR 0 13
33547: PPUSH
33548: CALL_OW 325
33552: NOT
33553: AND
33554: IFFALSE 33583
// missile := Insert ( missile , missile + 1 , 3 ) ;
33556: LD_ADDR_VAR 0 14
33560: PUSH
33561: LD_VAR 0 14
33565: PPUSH
33566: LD_VAR 0 14
33570: PUSH
33571: LD_INT 1
33573: PLUS
33574: PPUSH
33575: LD_INT 3
33577: PPUSH
33578: CALL_OW 2
33582: ST_TO_ADDR
// if missile < 2 then
33583: LD_VAR 0 14
33587: PUSH
33588: LD_INT 2
33590: LESS
33591: IFFALSE 33595
// exit ;
33593: GO 33817
// x := GetX ( enemy ) ;
33595: LD_ADDR_VAR 0 4
33599: PUSH
33600: LD_VAR 0 10
33604: PPUSH
33605: CALL_OW 250
33609: ST_TO_ADDR
// y := GetY ( enemy ) ;
33610: LD_ADDR_VAR 0 5
33614: PUSH
33615: LD_VAR 0 10
33619: PPUSH
33620: CALL_OW 251
33624: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
33625: LD_ADDR_VAR 0 6
33629: PUSH
33630: LD_VAR 0 4
33634: PUSH
33635: LD_INT 1
33637: NEG
33638: PPUSH
33639: LD_INT 1
33641: PPUSH
33642: CALL_OW 12
33646: PLUS
33647: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
33648: LD_ADDR_VAR 0 7
33652: PUSH
33653: LD_VAR 0 5
33657: PUSH
33658: LD_INT 1
33660: NEG
33661: PPUSH
33662: LD_INT 1
33664: PPUSH
33665: CALL_OW 12
33669: PLUS
33670: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33671: LD_VAR 0 6
33675: PPUSH
33676: LD_VAR 0 7
33680: PPUSH
33681: CALL_OW 488
33685: NOT
33686: IFFALSE 33708
// begin _x := x ;
33688: LD_ADDR_VAR 0 6
33692: PUSH
33693: LD_VAR 0 4
33697: ST_TO_ADDR
// _y := y ;
33698: LD_ADDR_VAR 0 7
33702: PUSH
33703: LD_VAR 0 5
33707: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
33708: LD_ADDR_VAR 0 3
33712: PUSH
33713: LD_INT 1
33715: PPUSH
33716: LD_VAR 0 14
33720: PPUSH
33721: CALL_OW 12
33725: ST_TO_ADDR
// case i of 1 :
33726: LD_VAR 0 3
33730: PUSH
33731: LD_INT 1
33733: DOUBLE
33734: EQUAL
33735: IFTRUE 33739
33737: GO 33756
33739: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
33740: LD_VAR 0 1
33744: PPUSH
33745: LD_VAR 0 10
33749: PPUSH
33750: CALL_OW 115
33754: GO 33817
33756: LD_INT 2
33758: DOUBLE
33759: EQUAL
33760: IFTRUE 33764
33762: GO 33786
33764: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33765: LD_VAR 0 1
33769: PPUSH
33770: LD_VAR 0 6
33774: PPUSH
33775: LD_VAR 0 7
33779: PPUSH
33780: CALL_OW 153
33784: GO 33817
33786: LD_INT 3
33788: DOUBLE
33789: EQUAL
33790: IFTRUE 33794
33792: GO 33816
33794: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33795: LD_VAR 0 1
33799: PPUSH
33800: LD_VAR 0 6
33804: PPUSH
33805: LD_VAR 0 7
33809: PPUSH
33810: CALL_OW 154
33814: GO 33817
33816: POP
// end ;
33817: LD_VAR 0 2
33821: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33822: LD_INT 0
33824: PPUSH
33825: PPUSH
33826: PPUSH
33827: PPUSH
33828: PPUSH
33829: PPUSH
// if not unit or not building then
33830: LD_VAR 0 1
33834: NOT
33835: PUSH
33836: LD_VAR 0 2
33840: NOT
33841: OR
33842: IFFALSE 33846
// exit ;
33844: GO 34004
// x := GetX ( building ) ;
33846: LD_ADDR_VAR 0 5
33850: PUSH
33851: LD_VAR 0 2
33855: PPUSH
33856: CALL_OW 250
33860: ST_TO_ADDR
// y := GetY ( building ) ;
33861: LD_ADDR_VAR 0 6
33865: PUSH
33866: LD_VAR 0 2
33870: PPUSH
33871: CALL_OW 251
33875: ST_TO_ADDR
// for i = 0 to 5 do
33876: LD_ADDR_VAR 0 4
33880: PUSH
33881: DOUBLE
33882: LD_INT 0
33884: DEC
33885: ST_TO_ADDR
33886: LD_INT 5
33888: PUSH
33889: FOR_TO
33890: IFFALSE 34002
// begin _x := ShiftX ( x , i , 3 ) ;
33892: LD_ADDR_VAR 0 7
33896: PUSH
33897: LD_VAR 0 5
33901: PPUSH
33902: LD_VAR 0 4
33906: PPUSH
33907: LD_INT 3
33909: PPUSH
33910: CALL_OW 272
33914: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33915: LD_ADDR_VAR 0 8
33919: PUSH
33920: LD_VAR 0 6
33924: PPUSH
33925: LD_VAR 0 4
33929: PPUSH
33930: LD_INT 3
33932: PPUSH
33933: CALL_OW 273
33937: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33938: LD_VAR 0 7
33942: PPUSH
33943: LD_VAR 0 8
33947: PPUSH
33948: CALL_OW 488
33952: NOT
33953: IFFALSE 33957
// continue ;
33955: GO 33889
// if HexInfo ( _x , _y ) = 0 then
33957: LD_VAR 0 7
33961: PPUSH
33962: LD_VAR 0 8
33966: PPUSH
33967: CALL_OW 428
33971: PUSH
33972: LD_INT 0
33974: EQUAL
33975: IFFALSE 34000
// begin ComMoveXY ( unit , _x , _y ) ;
33977: LD_VAR 0 1
33981: PPUSH
33982: LD_VAR 0 7
33986: PPUSH
33987: LD_VAR 0 8
33991: PPUSH
33992: CALL_OW 111
// exit ;
33996: POP
33997: POP
33998: GO 34004
// end ; end ;
34000: GO 33889
34002: POP
34003: POP
// end ;
34004: LD_VAR 0 3
34008: RET
// export function ScanBase ( side , base_area ) ; begin
34009: LD_INT 0
34011: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
34012: LD_ADDR_VAR 0 3
34016: PUSH
34017: LD_VAR 0 2
34021: PPUSH
34022: LD_INT 81
34024: PUSH
34025: LD_VAR 0 1
34029: PUSH
34030: EMPTY
34031: LIST
34032: LIST
34033: PPUSH
34034: CALL_OW 70
34038: ST_TO_ADDR
// end ;
34039: LD_VAR 0 3
34043: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
34044: LD_INT 0
34046: PPUSH
34047: PPUSH
34048: PPUSH
34049: PPUSH
// result := false ;
34050: LD_ADDR_VAR 0 2
34054: PUSH
34055: LD_INT 0
34057: ST_TO_ADDR
// side := GetSide ( unit ) ;
34058: LD_ADDR_VAR 0 3
34062: PUSH
34063: LD_VAR 0 1
34067: PPUSH
34068: CALL_OW 255
34072: ST_TO_ADDR
// nat := GetNation ( unit ) ;
34073: LD_ADDR_VAR 0 4
34077: PUSH
34078: LD_VAR 0 1
34082: PPUSH
34083: CALL_OW 248
34087: ST_TO_ADDR
// case nat of 1 :
34088: LD_VAR 0 4
34092: PUSH
34093: LD_INT 1
34095: DOUBLE
34096: EQUAL
34097: IFTRUE 34101
34099: GO 34112
34101: POP
// tech := tech_lassight ; 2 :
34102: LD_ADDR_VAR 0 5
34106: PUSH
34107: LD_INT 12
34109: ST_TO_ADDR
34110: GO 34151
34112: LD_INT 2
34114: DOUBLE
34115: EQUAL
34116: IFTRUE 34120
34118: GO 34131
34120: POP
// tech := tech_mortar ; 3 :
34121: LD_ADDR_VAR 0 5
34125: PUSH
34126: LD_INT 41
34128: ST_TO_ADDR
34129: GO 34151
34131: LD_INT 3
34133: DOUBLE
34134: EQUAL
34135: IFTRUE 34139
34137: GO 34150
34139: POP
// tech := tech_bazooka ; end ;
34140: LD_ADDR_VAR 0 5
34144: PUSH
34145: LD_INT 44
34147: ST_TO_ADDR
34148: GO 34151
34150: POP
// if Researched ( side , tech ) then
34151: LD_VAR 0 3
34155: PPUSH
34156: LD_VAR 0 5
34160: PPUSH
34161: CALL_OW 325
34165: IFFALSE 34192
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
34167: LD_ADDR_VAR 0 2
34171: PUSH
34172: LD_INT 5
34174: PUSH
34175: LD_INT 8
34177: PUSH
34178: LD_INT 9
34180: PUSH
34181: EMPTY
34182: LIST
34183: LIST
34184: LIST
34185: PUSH
34186: LD_VAR 0 4
34190: ARRAY
34191: ST_TO_ADDR
// end ;
34192: LD_VAR 0 2
34196: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
34197: LD_INT 0
34199: PPUSH
34200: PPUSH
34201: PPUSH
// if not mines then
34202: LD_VAR 0 2
34206: NOT
34207: IFFALSE 34211
// exit ;
34209: GO 34355
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34211: LD_ADDR_VAR 0 5
34215: PUSH
34216: LD_INT 81
34218: PUSH
34219: LD_VAR 0 1
34223: PUSH
34224: EMPTY
34225: LIST
34226: LIST
34227: PUSH
34228: LD_INT 3
34230: PUSH
34231: LD_INT 21
34233: PUSH
34234: LD_INT 3
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: PUSH
34245: EMPTY
34246: LIST
34247: LIST
34248: PPUSH
34249: CALL_OW 69
34253: ST_TO_ADDR
// for i in mines do
34254: LD_ADDR_VAR 0 4
34258: PUSH
34259: LD_VAR 0 2
34263: PUSH
34264: FOR_IN
34265: IFFALSE 34353
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
34267: LD_VAR 0 4
34271: PUSH
34272: LD_INT 1
34274: ARRAY
34275: PPUSH
34276: LD_VAR 0 4
34280: PUSH
34281: LD_INT 2
34283: ARRAY
34284: PPUSH
34285: CALL_OW 458
34289: NOT
34290: IFFALSE 34294
// continue ;
34292: GO 34264
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
34294: LD_VAR 0 4
34298: PUSH
34299: LD_INT 1
34301: ARRAY
34302: PPUSH
34303: LD_VAR 0 4
34307: PUSH
34308: LD_INT 2
34310: ARRAY
34311: PPUSH
34312: CALL_OW 428
34316: PUSH
34317: LD_VAR 0 5
34321: IN
34322: IFFALSE 34351
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
34324: LD_VAR 0 4
34328: PUSH
34329: LD_INT 1
34331: ARRAY
34332: PPUSH
34333: LD_VAR 0 4
34337: PUSH
34338: LD_INT 2
34340: ARRAY
34341: PPUSH
34342: LD_VAR 0 1
34346: PPUSH
34347: CALL_OW 456
// end ;
34351: GO 34264
34353: POP
34354: POP
// end ;
34355: LD_VAR 0 3
34359: RET
// export function Count ( array ) ; var i ; begin
34360: LD_INT 0
34362: PPUSH
34363: PPUSH
// result := 0 ;
34364: LD_ADDR_VAR 0 2
34368: PUSH
34369: LD_INT 0
34371: ST_TO_ADDR
// for i in array do
34372: LD_ADDR_VAR 0 3
34376: PUSH
34377: LD_VAR 0 1
34381: PUSH
34382: FOR_IN
34383: IFFALSE 34407
// if i then
34385: LD_VAR 0 3
34389: IFFALSE 34405
// result := result + 1 ;
34391: LD_ADDR_VAR 0 2
34395: PUSH
34396: LD_VAR 0 2
34400: PUSH
34401: LD_INT 1
34403: PLUS
34404: ST_TO_ADDR
34405: GO 34382
34407: POP
34408: POP
// end ;
34409: LD_VAR 0 2
34413: RET
// export function IsEmpty ( building ) ; begin
34414: LD_INT 0
34416: PPUSH
// if not building then
34417: LD_VAR 0 1
34421: NOT
34422: IFFALSE 34426
// exit ;
34424: GO 34469
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
34426: LD_ADDR_VAR 0 2
34430: PUSH
34431: LD_VAR 0 1
34435: PUSH
34436: LD_INT 22
34438: PUSH
34439: LD_VAR 0 1
34443: PPUSH
34444: CALL_OW 255
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: PUSH
34453: LD_INT 58
34455: PUSH
34456: EMPTY
34457: LIST
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: PPUSH
34463: CALL_OW 69
34467: IN
34468: ST_TO_ADDR
// end ;
34469: LD_VAR 0 2
34473: RET
// export function IsNotFull ( building ) ; begin
34474: LD_INT 0
34476: PPUSH
// if not building then
34477: LD_VAR 0 1
34481: NOT
34482: IFFALSE 34486
// exit ;
34484: GO 34505
// result := UnitsInside ( building ) < 6 ;
34486: LD_ADDR_VAR 0 2
34490: PUSH
34491: LD_VAR 0 1
34495: PPUSH
34496: CALL_OW 313
34500: PUSH
34501: LD_INT 6
34503: LESS
34504: ST_TO_ADDR
// end ;
34505: LD_VAR 0 2
34509: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
34510: LD_INT 0
34512: PPUSH
34513: PPUSH
34514: PPUSH
34515: PPUSH
// tmp := [ ] ;
34516: LD_ADDR_VAR 0 3
34520: PUSH
34521: EMPTY
34522: ST_TO_ADDR
// list := [ ] ;
34523: LD_ADDR_VAR 0 5
34527: PUSH
34528: EMPTY
34529: ST_TO_ADDR
// for i = 16 to 25 do
34530: LD_ADDR_VAR 0 4
34534: PUSH
34535: DOUBLE
34536: LD_INT 16
34538: DEC
34539: ST_TO_ADDR
34540: LD_INT 25
34542: PUSH
34543: FOR_TO
34544: IFFALSE 34617
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
34546: LD_ADDR_VAR 0 3
34550: PUSH
34551: LD_VAR 0 3
34555: PUSH
34556: LD_INT 22
34558: PUSH
34559: LD_VAR 0 1
34563: PPUSH
34564: CALL_OW 255
34568: PUSH
34569: EMPTY
34570: LIST
34571: LIST
34572: PUSH
34573: LD_INT 91
34575: PUSH
34576: LD_VAR 0 1
34580: PUSH
34581: LD_INT 6
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: LIST
34588: PUSH
34589: LD_INT 30
34591: PUSH
34592: LD_VAR 0 4
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: PUSH
34601: EMPTY
34602: LIST
34603: LIST
34604: LIST
34605: PUSH
34606: EMPTY
34607: LIST
34608: PPUSH
34609: CALL_OW 69
34613: ADD
34614: ST_TO_ADDR
34615: GO 34543
34617: POP
34618: POP
// for i = 1 to tmp do
34619: LD_ADDR_VAR 0 4
34623: PUSH
34624: DOUBLE
34625: LD_INT 1
34627: DEC
34628: ST_TO_ADDR
34629: LD_VAR 0 3
34633: PUSH
34634: FOR_TO
34635: IFFALSE 34723
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
34637: LD_ADDR_VAR 0 5
34641: PUSH
34642: LD_VAR 0 5
34646: PUSH
34647: LD_VAR 0 3
34651: PUSH
34652: LD_VAR 0 4
34656: ARRAY
34657: PPUSH
34658: CALL_OW 266
34662: PUSH
34663: LD_VAR 0 3
34667: PUSH
34668: LD_VAR 0 4
34672: ARRAY
34673: PPUSH
34674: CALL_OW 250
34678: PUSH
34679: LD_VAR 0 3
34683: PUSH
34684: LD_VAR 0 4
34688: ARRAY
34689: PPUSH
34690: CALL_OW 251
34694: PUSH
34695: LD_VAR 0 3
34699: PUSH
34700: LD_VAR 0 4
34704: ARRAY
34705: PPUSH
34706: CALL_OW 254
34710: PUSH
34711: EMPTY
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: PUSH
34717: EMPTY
34718: LIST
34719: ADD
34720: ST_TO_ADDR
34721: GO 34634
34723: POP
34724: POP
// result := list ;
34725: LD_ADDR_VAR 0 2
34729: PUSH
34730: LD_VAR 0 5
34734: ST_TO_ADDR
// end ;
34735: LD_VAR 0 2
34739: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
34740: LD_INT 0
34742: PPUSH
34743: PPUSH
34744: PPUSH
34745: PPUSH
34746: PPUSH
34747: PPUSH
34748: PPUSH
// if not factory then
34749: LD_VAR 0 1
34753: NOT
34754: IFFALSE 34758
// exit ;
34756: GO 35351
// if control = control_apeman then
34758: LD_VAR 0 4
34762: PUSH
34763: LD_INT 5
34765: EQUAL
34766: IFFALSE 34875
// begin tmp := UnitsInside ( factory ) ;
34768: LD_ADDR_VAR 0 8
34772: PUSH
34773: LD_VAR 0 1
34777: PPUSH
34778: CALL_OW 313
34782: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34783: LD_VAR 0 8
34787: PPUSH
34788: LD_INT 25
34790: PUSH
34791: LD_INT 12
34793: PUSH
34794: EMPTY
34795: LIST
34796: LIST
34797: PPUSH
34798: CALL_OW 72
34802: NOT
34803: IFFALSE 34813
// control := control_manual ;
34805: LD_ADDR_VAR 0 4
34809: PUSH
34810: LD_INT 1
34812: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34813: LD_ADDR_VAR 0 8
34817: PUSH
34818: LD_VAR 0 1
34822: PPUSH
34823: CALL 34510 0 1
34827: ST_TO_ADDR
// if tmp then
34828: LD_VAR 0 8
34832: IFFALSE 34875
// begin for i in tmp do
34834: LD_ADDR_VAR 0 7
34838: PUSH
34839: LD_VAR 0 8
34843: PUSH
34844: FOR_IN
34845: IFFALSE 34873
// if i [ 1 ] = b_ext_radio then
34847: LD_VAR 0 7
34851: PUSH
34852: LD_INT 1
34854: ARRAY
34855: PUSH
34856: LD_INT 22
34858: EQUAL
34859: IFFALSE 34871
// begin control := control_remote ;
34861: LD_ADDR_VAR 0 4
34865: PUSH
34866: LD_INT 2
34868: ST_TO_ADDR
// break ;
34869: GO 34873
// end ;
34871: GO 34844
34873: POP
34874: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34875: LD_VAR 0 1
34879: PPUSH
34880: LD_VAR 0 2
34884: PPUSH
34885: LD_VAR 0 3
34889: PPUSH
34890: LD_VAR 0 4
34894: PPUSH
34895: LD_VAR 0 5
34899: PPUSH
34900: CALL_OW 448
34904: IFFALSE 34939
// begin result := [ chassis , engine , control , weapon ] ;
34906: LD_ADDR_VAR 0 6
34910: PUSH
34911: LD_VAR 0 2
34915: PUSH
34916: LD_VAR 0 3
34920: PUSH
34921: LD_VAR 0 4
34925: PUSH
34926: LD_VAR 0 5
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: ST_TO_ADDR
// exit ;
34937: GO 35351
// end ; _chassis := AvailableChassisList ( factory ) ;
34939: LD_ADDR_VAR 0 9
34943: PUSH
34944: LD_VAR 0 1
34948: PPUSH
34949: CALL_OW 475
34953: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34954: LD_ADDR_VAR 0 11
34958: PUSH
34959: LD_VAR 0 1
34963: PPUSH
34964: CALL_OW 476
34968: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34969: LD_ADDR_VAR 0 12
34973: PUSH
34974: LD_VAR 0 1
34978: PPUSH
34979: CALL_OW 477
34983: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34984: LD_ADDR_VAR 0 10
34988: PUSH
34989: LD_VAR 0 1
34993: PPUSH
34994: CALL_OW 478
34998: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34999: LD_VAR 0 9
35003: NOT
35004: PUSH
35005: LD_VAR 0 11
35009: NOT
35010: OR
35011: PUSH
35012: LD_VAR 0 12
35016: NOT
35017: OR
35018: PUSH
35019: LD_VAR 0 10
35023: NOT
35024: OR
35025: IFFALSE 35060
// begin result := [ chassis , engine , control , weapon ] ;
35027: LD_ADDR_VAR 0 6
35031: PUSH
35032: LD_VAR 0 2
35036: PUSH
35037: LD_VAR 0 3
35041: PUSH
35042: LD_VAR 0 4
35046: PUSH
35047: LD_VAR 0 5
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: LIST
35056: LIST
35057: ST_TO_ADDR
// exit ;
35058: GO 35351
// end ; if not chassis in _chassis then
35060: LD_VAR 0 2
35064: PUSH
35065: LD_VAR 0 9
35069: IN
35070: NOT
35071: IFFALSE 35097
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
35073: LD_ADDR_VAR 0 2
35077: PUSH
35078: LD_VAR 0 9
35082: PUSH
35083: LD_INT 1
35085: PPUSH
35086: LD_VAR 0 9
35090: PPUSH
35091: CALL_OW 12
35095: ARRAY
35096: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
35097: LD_VAR 0 2
35101: PPUSH
35102: LD_VAR 0 3
35106: PPUSH
35107: CALL 35356 0 2
35111: NOT
35112: IFFALSE 35171
// repeat engine := _engine [ 1 ] ;
35114: LD_ADDR_VAR 0 3
35118: PUSH
35119: LD_VAR 0 11
35123: PUSH
35124: LD_INT 1
35126: ARRAY
35127: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
35128: LD_ADDR_VAR 0 11
35132: PUSH
35133: LD_VAR 0 11
35137: PPUSH
35138: LD_INT 1
35140: PPUSH
35141: CALL_OW 3
35145: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
35146: LD_VAR 0 2
35150: PPUSH
35151: LD_VAR 0 3
35155: PPUSH
35156: CALL 35356 0 2
35160: PUSH
35161: LD_VAR 0 11
35165: PUSH
35166: EMPTY
35167: EQUAL
35168: OR
35169: IFFALSE 35114
// if not control in _control then
35171: LD_VAR 0 4
35175: PUSH
35176: LD_VAR 0 12
35180: IN
35181: NOT
35182: IFFALSE 35208
// control := _control [ rand ( 1 , _control ) ] ;
35184: LD_ADDR_VAR 0 4
35188: PUSH
35189: LD_VAR 0 12
35193: PUSH
35194: LD_INT 1
35196: PPUSH
35197: LD_VAR 0 12
35201: PPUSH
35202: CALL_OW 12
35206: ARRAY
35207: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
35208: LD_VAR 0 2
35212: PPUSH
35213: LD_VAR 0 5
35217: PPUSH
35218: CALL 35576 0 2
35222: NOT
35223: IFFALSE 35282
// repeat weapon := _weapon [ 1 ] ;
35225: LD_ADDR_VAR 0 5
35229: PUSH
35230: LD_VAR 0 10
35234: PUSH
35235: LD_INT 1
35237: ARRAY
35238: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
35239: LD_ADDR_VAR 0 10
35243: PUSH
35244: LD_VAR 0 10
35248: PPUSH
35249: LD_INT 1
35251: PPUSH
35252: CALL_OW 3
35256: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
35257: LD_VAR 0 2
35261: PPUSH
35262: LD_VAR 0 5
35266: PPUSH
35267: CALL 35576 0 2
35271: PUSH
35272: LD_VAR 0 10
35276: PUSH
35277: EMPTY
35278: EQUAL
35279: OR
35280: IFFALSE 35225
// result := [ ] ;
35282: LD_ADDR_VAR 0 6
35286: PUSH
35287: EMPTY
35288: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35289: LD_VAR 0 1
35293: PPUSH
35294: LD_VAR 0 2
35298: PPUSH
35299: LD_VAR 0 3
35303: PPUSH
35304: LD_VAR 0 4
35308: PPUSH
35309: LD_VAR 0 5
35313: PPUSH
35314: CALL_OW 448
35318: IFFALSE 35351
// result := [ chassis , engine , control , weapon ] ;
35320: LD_ADDR_VAR 0 6
35324: PUSH
35325: LD_VAR 0 2
35329: PUSH
35330: LD_VAR 0 3
35334: PUSH
35335: LD_VAR 0 4
35339: PUSH
35340: LD_VAR 0 5
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: ST_TO_ADDR
// end ;
35351: LD_VAR 0 6
35355: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
35356: LD_INT 0
35358: PPUSH
// if not chassis or not engine then
35359: LD_VAR 0 1
35363: NOT
35364: PUSH
35365: LD_VAR 0 2
35369: NOT
35370: OR
35371: IFFALSE 35375
// exit ;
35373: GO 35571
// case engine of engine_solar :
35375: LD_VAR 0 2
35379: PUSH
35380: LD_INT 2
35382: DOUBLE
35383: EQUAL
35384: IFTRUE 35388
35386: GO 35426
35388: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
35389: LD_ADDR_VAR 0 3
35393: PUSH
35394: LD_INT 11
35396: PUSH
35397: LD_INT 12
35399: PUSH
35400: LD_INT 13
35402: PUSH
35403: LD_INT 14
35405: PUSH
35406: LD_INT 1
35408: PUSH
35409: LD_INT 2
35411: PUSH
35412: LD_INT 3
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: LIST
35419: LIST
35420: LIST
35421: LIST
35422: LIST
35423: ST_TO_ADDR
35424: GO 35555
35426: LD_INT 1
35428: DOUBLE
35429: EQUAL
35430: IFTRUE 35434
35432: GO 35496
35434: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
35435: LD_ADDR_VAR 0 3
35439: PUSH
35440: LD_INT 11
35442: PUSH
35443: LD_INT 12
35445: PUSH
35446: LD_INT 13
35448: PUSH
35449: LD_INT 14
35451: PUSH
35452: LD_INT 1
35454: PUSH
35455: LD_INT 2
35457: PUSH
35458: LD_INT 3
35460: PUSH
35461: LD_INT 4
35463: PUSH
35464: LD_INT 5
35466: PUSH
35467: LD_INT 21
35469: PUSH
35470: LD_INT 23
35472: PUSH
35473: LD_INT 22
35475: PUSH
35476: LD_INT 24
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: LIST
35483: LIST
35484: LIST
35485: LIST
35486: LIST
35487: LIST
35488: LIST
35489: LIST
35490: LIST
35491: LIST
35492: LIST
35493: ST_TO_ADDR
35494: GO 35555
35496: LD_INT 3
35498: DOUBLE
35499: EQUAL
35500: IFTRUE 35504
35502: GO 35554
35504: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35505: LD_ADDR_VAR 0 3
35509: PUSH
35510: LD_INT 13
35512: PUSH
35513: LD_INT 14
35515: PUSH
35516: LD_INT 2
35518: PUSH
35519: LD_INT 3
35521: PUSH
35522: LD_INT 4
35524: PUSH
35525: LD_INT 5
35527: PUSH
35528: LD_INT 21
35530: PUSH
35531: LD_INT 22
35533: PUSH
35534: LD_INT 23
35536: PUSH
35537: LD_INT 24
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: LIST
35544: LIST
35545: LIST
35546: LIST
35547: LIST
35548: LIST
35549: LIST
35550: LIST
35551: ST_TO_ADDR
35552: GO 35555
35554: POP
// result := ( chassis in result ) ;
35555: LD_ADDR_VAR 0 3
35559: PUSH
35560: LD_VAR 0 1
35564: PUSH
35565: LD_VAR 0 3
35569: IN
35570: ST_TO_ADDR
// end ;
35571: LD_VAR 0 3
35575: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
35576: LD_INT 0
35578: PPUSH
// if not chassis or not weapon then
35579: LD_VAR 0 1
35583: NOT
35584: PUSH
35585: LD_VAR 0 2
35589: NOT
35590: OR
35591: IFFALSE 35595
// exit ;
35593: GO 36621
// case weapon of us_machine_gun :
35595: LD_VAR 0 2
35599: PUSH
35600: LD_INT 2
35602: DOUBLE
35603: EQUAL
35604: IFTRUE 35608
35606: GO 35638
35608: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
35609: LD_ADDR_VAR 0 3
35613: PUSH
35614: LD_INT 1
35616: PUSH
35617: LD_INT 2
35619: PUSH
35620: LD_INT 3
35622: PUSH
35623: LD_INT 4
35625: PUSH
35626: LD_INT 5
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: LIST
35635: ST_TO_ADDR
35636: GO 36605
35638: LD_INT 3
35640: DOUBLE
35641: EQUAL
35642: IFTRUE 35646
35644: GO 35676
35646: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
35647: LD_ADDR_VAR 0 3
35651: PUSH
35652: LD_INT 1
35654: PUSH
35655: LD_INT 2
35657: PUSH
35658: LD_INT 3
35660: PUSH
35661: LD_INT 4
35663: PUSH
35664: LD_INT 5
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: LIST
35671: LIST
35672: LIST
35673: ST_TO_ADDR
35674: GO 36605
35676: LD_INT 11
35678: DOUBLE
35679: EQUAL
35680: IFTRUE 35684
35682: GO 35714
35684: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
35685: LD_ADDR_VAR 0 3
35689: PUSH
35690: LD_INT 1
35692: PUSH
35693: LD_INT 2
35695: PUSH
35696: LD_INT 3
35698: PUSH
35699: LD_INT 4
35701: PUSH
35702: LD_INT 5
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: ST_TO_ADDR
35712: GO 36605
35714: LD_INT 4
35716: DOUBLE
35717: EQUAL
35718: IFTRUE 35722
35720: GO 35748
35722: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
35723: LD_ADDR_VAR 0 3
35727: PUSH
35728: LD_INT 2
35730: PUSH
35731: LD_INT 3
35733: PUSH
35734: LD_INT 4
35736: PUSH
35737: LD_INT 5
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: LIST
35744: LIST
35745: ST_TO_ADDR
35746: GO 36605
35748: LD_INT 5
35750: DOUBLE
35751: EQUAL
35752: IFTRUE 35756
35754: GO 35782
35756: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35757: LD_ADDR_VAR 0 3
35761: PUSH
35762: LD_INT 2
35764: PUSH
35765: LD_INT 3
35767: PUSH
35768: LD_INT 4
35770: PUSH
35771: LD_INT 5
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: LIST
35778: LIST
35779: ST_TO_ADDR
35780: GO 36605
35782: LD_INT 9
35784: DOUBLE
35785: EQUAL
35786: IFTRUE 35790
35788: GO 35816
35790: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35791: LD_ADDR_VAR 0 3
35795: PUSH
35796: LD_INT 2
35798: PUSH
35799: LD_INT 3
35801: PUSH
35802: LD_INT 4
35804: PUSH
35805: LD_INT 5
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: LIST
35812: LIST
35813: ST_TO_ADDR
35814: GO 36605
35816: LD_INT 7
35818: DOUBLE
35819: EQUAL
35820: IFTRUE 35824
35822: GO 35850
35824: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35825: LD_ADDR_VAR 0 3
35829: PUSH
35830: LD_INT 2
35832: PUSH
35833: LD_INT 3
35835: PUSH
35836: LD_INT 4
35838: PUSH
35839: LD_INT 5
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: ST_TO_ADDR
35848: GO 36605
35850: LD_INT 12
35852: DOUBLE
35853: EQUAL
35854: IFTRUE 35858
35856: GO 35884
35858: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35859: LD_ADDR_VAR 0 3
35863: PUSH
35864: LD_INT 2
35866: PUSH
35867: LD_INT 3
35869: PUSH
35870: LD_INT 4
35872: PUSH
35873: LD_INT 5
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: LIST
35880: LIST
35881: ST_TO_ADDR
35882: GO 36605
35884: LD_INT 13
35886: DOUBLE
35887: EQUAL
35888: IFTRUE 35892
35890: GO 35918
35892: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35893: LD_ADDR_VAR 0 3
35897: PUSH
35898: LD_INT 2
35900: PUSH
35901: LD_INT 3
35903: PUSH
35904: LD_INT 4
35906: PUSH
35907: LD_INT 5
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: LIST
35914: LIST
35915: ST_TO_ADDR
35916: GO 36605
35918: LD_INT 14
35920: DOUBLE
35921: EQUAL
35922: IFTRUE 35926
35924: GO 35944
35926: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35927: LD_ADDR_VAR 0 3
35931: PUSH
35932: LD_INT 4
35934: PUSH
35935: LD_INT 5
35937: PUSH
35938: EMPTY
35939: LIST
35940: LIST
35941: ST_TO_ADDR
35942: GO 36605
35944: LD_INT 6
35946: DOUBLE
35947: EQUAL
35948: IFTRUE 35952
35950: GO 35970
35952: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35953: LD_ADDR_VAR 0 3
35957: PUSH
35958: LD_INT 4
35960: PUSH
35961: LD_INT 5
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: ST_TO_ADDR
35968: GO 36605
35970: LD_INT 10
35972: DOUBLE
35973: EQUAL
35974: IFTRUE 35978
35976: GO 35996
35978: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35979: LD_ADDR_VAR 0 3
35983: PUSH
35984: LD_INT 4
35986: PUSH
35987: LD_INT 5
35989: PUSH
35990: EMPTY
35991: LIST
35992: LIST
35993: ST_TO_ADDR
35994: GO 36605
35996: LD_INT 22
35998: DOUBLE
35999: EQUAL
36000: IFTRUE 36004
36002: GO 36030
36004: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
36005: LD_ADDR_VAR 0 3
36009: PUSH
36010: LD_INT 11
36012: PUSH
36013: LD_INT 12
36015: PUSH
36016: LD_INT 13
36018: PUSH
36019: LD_INT 14
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: LIST
36026: LIST
36027: ST_TO_ADDR
36028: GO 36605
36030: LD_INT 23
36032: DOUBLE
36033: EQUAL
36034: IFTRUE 36038
36036: GO 36064
36038: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
36039: LD_ADDR_VAR 0 3
36043: PUSH
36044: LD_INT 11
36046: PUSH
36047: LD_INT 12
36049: PUSH
36050: LD_INT 13
36052: PUSH
36053: LD_INT 14
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: LIST
36060: LIST
36061: ST_TO_ADDR
36062: GO 36605
36064: LD_INT 24
36066: DOUBLE
36067: EQUAL
36068: IFTRUE 36072
36070: GO 36098
36072: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
36073: LD_ADDR_VAR 0 3
36077: PUSH
36078: LD_INT 11
36080: PUSH
36081: LD_INT 12
36083: PUSH
36084: LD_INT 13
36086: PUSH
36087: LD_INT 14
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: LIST
36094: LIST
36095: ST_TO_ADDR
36096: GO 36605
36098: LD_INT 30
36100: DOUBLE
36101: EQUAL
36102: IFTRUE 36106
36104: GO 36132
36106: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
36107: LD_ADDR_VAR 0 3
36111: PUSH
36112: LD_INT 11
36114: PUSH
36115: LD_INT 12
36117: PUSH
36118: LD_INT 13
36120: PUSH
36121: LD_INT 14
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: LIST
36128: LIST
36129: ST_TO_ADDR
36130: GO 36605
36132: LD_INT 25
36134: DOUBLE
36135: EQUAL
36136: IFTRUE 36140
36138: GO 36158
36140: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
36141: LD_ADDR_VAR 0 3
36145: PUSH
36146: LD_INT 13
36148: PUSH
36149: LD_INT 14
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: ST_TO_ADDR
36156: GO 36605
36158: LD_INT 27
36160: DOUBLE
36161: EQUAL
36162: IFTRUE 36166
36164: GO 36184
36166: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
36167: LD_ADDR_VAR 0 3
36171: PUSH
36172: LD_INT 13
36174: PUSH
36175: LD_INT 14
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: ST_TO_ADDR
36182: GO 36605
36184: LD_INT 28
36186: DOUBLE
36187: EQUAL
36188: IFTRUE 36192
36190: GO 36210
36192: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
36193: LD_ADDR_VAR 0 3
36197: PUSH
36198: LD_INT 13
36200: PUSH
36201: LD_INT 14
36203: PUSH
36204: EMPTY
36205: LIST
36206: LIST
36207: ST_TO_ADDR
36208: GO 36605
36210: LD_INT 29
36212: DOUBLE
36213: EQUAL
36214: IFTRUE 36218
36216: GO 36236
36218: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
36219: LD_ADDR_VAR 0 3
36223: PUSH
36224: LD_INT 13
36226: PUSH
36227: LD_INT 14
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: ST_TO_ADDR
36234: GO 36605
36236: LD_INT 31
36238: DOUBLE
36239: EQUAL
36240: IFTRUE 36244
36242: GO 36262
36244: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
36245: LD_ADDR_VAR 0 3
36249: PUSH
36250: LD_INT 13
36252: PUSH
36253: LD_INT 14
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: ST_TO_ADDR
36260: GO 36605
36262: LD_INT 26
36264: DOUBLE
36265: EQUAL
36266: IFTRUE 36270
36268: GO 36288
36270: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
36271: LD_ADDR_VAR 0 3
36275: PUSH
36276: LD_INT 13
36278: PUSH
36279: LD_INT 14
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: ST_TO_ADDR
36286: GO 36605
36288: LD_INT 42
36290: DOUBLE
36291: EQUAL
36292: IFTRUE 36296
36294: GO 36322
36296: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
36297: LD_ADDR_VAR 0 3
36301: PUSH
36302: LD_INT 21
36304: PUSH
36305: LD_INT 22
36307: PUSH
36308: LD_INT 23
36310: PUSH
36311: LD_INT 24
36313: PUSH
36314: EMPTY
36315: LIST
36316: LIST
36317: LIST
36318: LIST
36319: ST_TO_ADDR
36320: GO 36605
36322: LD_INT 43
36324: DOUBLE
36325: EQUAL
36326: IFTRUE 36330
36328: GO 36356
36330: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
36331: LD_ADDR_VAR 0 3
36335: PUSH
36336: LD_INT 21
36338: PUSH
36339: LD_INT 22
36341: PUSH
36342: LD_INT 23
36344: PUSH
36345: LD_INT 24
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: LIST
36352: LIST
36353: ST_TO_ADDR
36354: GO 36605
36356: LD_INT 44
36358: DOUBLE
36359: EQUAL
36360: IFTRUE 36364
36362: GO 36390
36364: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
36365: LD_ADDR_VAR 0 3
36369: PUSH
36370: LD_INT 21
36372: PUSH
36373: LD_INT 22
36375: PUSH
36376: LD_INT 23
36378: PUSH
36379: LD_INT 24
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: LIST
36386: LIST
36387: ST_TO_ADDR
36388: GO 36605
36390: LD_INT 45
36392: DOUBLE
36393: EQUAL
36394: IFTRUE 36398
36396: GO 36424
36398: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
36399: LD_ADDR_VAR 0 3
36403: PUSH
36404: LD_INT 21
36406: PUSH
36407: LD_INT 22
36409: PUSH
36410: LD_INT 23
36412: PUSH
36413: LD_INT 24
36415: PUSH
36416: EMPTY
36417: LIST
36418: LIST
36419: LIST
36420: LIST
36421: ST_TO_ADDR
36422: GO 36605
36424: LD_INT 49
36426: DOUBLE
36427: EQUAL
36428: IFTRUE 36432
36430: GO 36458
36432: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
36433: LD_ADDR_VAR 0 3
36437: PUSH
36438: LD_INT 21
36440: PUSH
36441: LD_INT 22
36443: PUSH
36444: LD_INT 23
36446: PUSH
36447: LD_INT 24
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: LIST
36454: LIST
36455: ST_TO_ADDR
36456: GO 36605
36458: LD_INT 51
36460: DOUBLE
36461: EQUAL
36462: IFTRUE 36466
36464: GO 36492
36466: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
36467: LD_ADDR_VAR 0 3
36471: PUSH
36472: LD_INT 21
36474: PUSH
36475: LD_INT 22
36477: PUSH
36478: LD_INT 23
36480: PUSH
36481: LD_INT 24
36483: PUSH
36484: EMPTY
36485: LIST
36486: LIST
36487: LIST
36488: LIST
36489: ST_TO_ADDR
36490: GO 36605
36492: LD_INT 52
36494: DOUBLE
36495: EQUAL
36496: IFTRUE 36500
36498: GO 36526
36500: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
36501: LD_ADDR_VAR 0 3
36505: PUSH
36506: LD_INT 21
36508: PUSH
36509: LD_INT 22
36511: PUSH
36512: LD_INT 23
36514: PUSH
36515: LD_INT 24
36517: PUSH
36518: EMPTY
36519: LIST
36520: LIST
36521: LIST
36522: LIST
36523: ST_TO_ADDR
36524: GO 36605
36526: LD_INT 53
36528: DOUBLE
36529: EQUAL
36530: IFTRUE 36534
36532: GO 36552
36534: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
36535: LD_ADDR_VAR 0 3
36539: PUSH
36540: LD_INT 23
36542: PUSH
36543: LD_INT 24
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: ST_TO_ADDR
36550: GO 36605
36552: LD_INT 46
36554: DOUBLE
36555: EQUAL
36556: IFTRUE 36560
36558: GO 36578
36560: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
36561: LD_ADDR_VAR 0 3
36565: PUSH
36566: LD_INT 23
36568: PUSH
36569: LD_INT 24
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: ST_TO_ADDR
36576: GO 36605
36578: LD_INT 47
36580: DOUBLE
36581: EQUAL
36582: IFTRUE 36586
36584: GO 36604
36586: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36587: LD_ADDR_VAR 0 3
36591: PUSH
36592: LD_INT 23
36594: PUSH
36595: LD_INT 24
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: ST_TO_ADDR
36602: GO 36605
36604: POP
// result := ( chassis in result ) ;
36605: LD_ADDR_VAR 0 3
36609: PUSH
36610: LD_VAR 0 1
36614: PUSH
36615: LD_VAR 0 3
36619: IN
36620: ST_TO_ADDR
// end ;
36621: LD_VAR 0 3
36625: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
36626: LD_INT 0
36628: PPUSH
36629: PPUSH
36630: PPUSH
36631: PPUSH
36632: PPUSH
36633: PPUSH
36634: PPUSH
// result := array ;
36635: LD_ADDR_VAR 0 5
36639: PUSH
36640: LD_VAR 0 1
36644: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
36645: LD_VAR 0 1
36649: NOT
36650: PUSH
36651: LD_VAR 0 2
36655: NOT
36656: OR
36657: PUSH
36658: LD_VAR 0 3
36662: NOT
36663: OR
36664: PUSH
36665: LD_VAR 0 2
36669: PUSH
36670: LD_VAR 0 1
36674: GREATER
36675: OR
36676: PUSH
36677: LD_VAR 0 3
36681: PUSH
36682: LD_VAR 0 1
36686: GREATER
36687: OR
36688: IFFALSE 36692
// exit ;
36690: GO 36988
// if direction then
36692: LD_VAR 0 4
36696: IFFALSE 36760
// begin d := 1 ;
36698: LD_ADDR_VAR 0 9
36702: PUSH
36703: LD_INT 1
36705: ST_TO_ADDR
// if i_from > i_to then
36706: LD_VAR 0 2
36710: PUSH
36711: LD_VAR 0 3
36715: GREATER
36716: IFFALSE 36742
// length := ( array - i_from ) + i_to else
36718: LD_ADDR_VAR 0 11
36722: PUSH
36723: LD_VAR 0 1
36727: PUSH
36728: LD_VAR 0 2
36732: MINUS
36733: PUSH
36734: LD_VAR 0 3
36738: PLUS
36739: ST_TO_ADDR
36740: GO 36758
// length := i_to - i_from ;
36742: LD_ADDR_VAR 0 11
36746: PUSH
36747: LD_VAR 0 3
36751: PUSH
36752: LD_VAR 0 2
36756: MINUS
36757: ST_TO_ADDR
// end else
36758: GO 36821
// begin d := - 1 ;
36760: LD_ADDR_VAR 0 9
36764: PUSH
36765: LD_INT 1
36767: NEG
36768: ST_TO_ADDR
// if i_from > i_to then
36769: LD_VAR 0 2
36773: PUSH
36774: LD_VAR 0 3
36778: GREATER
36779: IFFALSE 36799
// length := i_from - i_to else
36781: LD_ADDR_VAR 0 11
36785: PUSH
36786: LD_VAR 0 2
36790: PUSH
36791: LD_VAR 0 3
36795: MINUS
36796: ST_TO_ADDR
36797: GO 36821
// length := ( array - i_to ) + i_from ;
36799: LD_ADDR_VAR 0 11
36803: PUSH
36804: LD_VAR 0 1
36808: PUSH
36809: LD_VAR 0 3
36813: MINUS
36814: PUSH
36815: LD_VAR 0 2
36819: PLUS
36820: ST_TO_ADDR
// end ; if not length then
36821: LD_VAR 0 11
36825: NOT
36826: IFFALSE 36830
// exit ;
36828: GO 36988
// tmp := array ;
36830: LD_ADDR_VAR 0 10
36834: PUSH
36835: LD_VAR 0 1
36839: ST_TO_ADDR
// for i = 1 to length do
36840: LD_ADDR_VAR 0 6
36844: PUSH
36845: DOUBLE
36846: LD_INT 1
36848: DEC
36849: ST_TO_ADDR
36850: LD_VAR 0 11
36854: PUSH
36855: FOR_TO
36856: IFFALSE 36976
// begin for j = 1 to array do
36858: LD_ADDR_VAR 0 7
36862: PUSH
36863: DOUBLE
36864: LD_INT 1
36866: DEC
36867: ST_TO_ADDR
36868: LD_VAR 0 1
36872: PUSH
36873: FOR_TO
36874: IFFALSE 36962
// begin k := j + d ;
36876: LD_ADDR_VAR 0 8
36880: PUSH
36881: LD_VAR 0 7
36885: PUSH
36886: LD_VAR 0 9
36890: PLUS
36891: ST_TO_ADDR
// if k > array then
36892: LD_VAR 0 8
36896: PUSH
36897: LD_VAR 0 1
36901: GREATER
36902: IFFALSE 36912
// k := 1 ;
36904: LD_ADDR_VAR 0 8
36908: PUSH
36909: LD_INT 1
36911: ST_TO_ADDR
// if not k then
36912: LD_VAR 0 8
36916: NOT
36917: IFFALSE 36929
// k := array ;
36919: LD_ADDR_VAR 0 8
36923: PUSH
36924: LD_VAR 0 1
36928: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36929: LD_ADDR_VAR 0 10
36933: PUSH
36934: LD_VAR 0 10
36938: PPUSH
36939: LD_VAR 0 8
36943: PPUSH
36944: LD_VAR 0 1
36948: PUSH
36949: LD_VAR 0 7
36953: ARRAY
36954: PPUSH
36955: CALL_OW 1
36959: ST_TO_ADDR
// end ;
36960: GO 36873
36962: POP
36963: POP
// array := tmp ;
36964: LD_ADDR_VAR 0 1
36968: PUSH
36969: LD_VAR 0 10
36973: ST_TO_ADDR
// end ;
36974: GO 36855
36976: POP
36977: POP
// result := array ;
36978: LD_ADDR_VAR 0 5
36982: PUSH
36983: LD_VAR 0 1
36987: ST_TO_ADDR
// end ;
36988: LD_VAR 0 5
36992: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36993: LD_INT 0
36995: PPUSH
36996: PPUSH
// result := 0 ;
36997: LD_ADDR_VAR 0 3
37001: PUSH
37002: LD_INT 0
37004: ST_TO_ADDR
// if not array or not value in array then
37005: LD_VAR 0 1
37009: NOT
37010: PUSH
37011: LD_VAR 0 2
37015: PUSH
37016: LD_VAR 0 1
37020: IN
37021: NOT
37022: OR
37023: IFFALSE 37027
// exit ;
37025: GO 37081
// for i = 1 to array do
37027: LD_ADDR_VAR 0 4
37031: PUSH
37032: DOUBLE
37033: LD_INT 1
37035: DEC
37036: ST_TO_ADDR
37037: LD_VAR 0 1
37041: PUSH
37042: FOR_TO
37043: IFFALSE 37079
// if value = array [ i ] then
37045: LD_VAR 0 2
37049: PUSH
37050: LD_VAR 0 1
37054: PUSH
37055: LD_VAR 0 4
37059: ARRAY
37060: EQUAL
37061: IFFALSE 37077
// begin result := i ;
37063: LD_ADDR_VAR 0 3
37067: PUSH
37068: LD_VAR 0 4
37072: ST_TO_ADDR
// exit ;
37073: POP
37074: POP
37075: GO 37081
// end ;
37077: GO 37042
37079: POP
37080: POP
// end ;
37081: LD_VAR 0 3
37085: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
37086: LD_INT 0
37088: PPUSH
// vc_chassis := chassis ;
37089: LD_ADDR_OWVAR 37
37093: PUSH
37094: LD_VAR 0 1
37098: ST_TO_ADDR
// vc_engine := engine ;
37099: LD_ADDR_OWVAR 39
37103: PUSH
37104: LD_VAR 0 2
37108: ST_TO_ADDR
// vc_control := control ;
37109: LD_ADDR_OWVAR 38
37113: PUSH
37114: LD_VAR 0 3
37118: ST_TO_ADDR
// vc_weapon := weapon ;
37119: LD_ADDR_OWVAR 40
37123: PUSH
37124: LD_VAR 0 4
37128: ST_TO_ADDR
// vc_fuel_battery := fuel ;
37129: LD_ADDR_OWVAR 41
37133: PUSH
37134: LD_VAR 0 5
37138: ST_TO_ADDR
// end ;
37139: LD_VAR 0 6
37143: RET
// export function WantPlant ( unit ) ; var task ; begin
37144: LD_INT 0
37146: PPUSH
37147: PPUSH
// result := false ;
37148: LD_ADDR_VAR 0 2
37152: PUSH
37153: LD_INT 0
37155: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
37156: LD_ADDR_VAR 0 3
37160: PUSH
37161: LD_VAR 0 1
37165: PPUSH
37166: CALL_OW 437
37170: ST_TO_ADDR
// if task then
37171: LD_VAR 0 3
37175: IFFALSE 37203
// if task [ 1 ] [ 1 ] = p then
37177: LD_VAR 0 3
37181: PUSH
37182: LD_INT 1
37184: ARRAY
37185: PUSH
37186: LD_INT 1
37188: ARRAY
37189: PUSH
37190: LD_STRING p
37192: EQUAL
37193: IFFALSE 37203
// result := true ;
37195: LD_ADDR_VAR 0 2
37199: PUSH
37200: LD_INT 1
37202: ST_TO_ADDR
// end ;
37203: LD_VAR 0 2
37207: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
37208: LD_INT 0
37210: PPUSH
37211: PPUSH
37212: PPUSH
37213: PPUSH
// if pos < 1 then
37214: LD_VAR 0 2
37218: PUSH
37219: LD_INT 1
37221: LESS
37222: IFFALSE 37226
// exit ;
37224: GO 37529
// if pos = 1 then
37226: LD_VAR 0 2
37230: PUSH
37231: LD_INT 1
37233: EQUAL
37234: IFFALSE 37267
// result := Replace ( arr , pos [ 1 ] , value ) else
37236: LD_ADDR_VAR 0 4
37240: PUSH
37241: LD_VAR 0 1
37245: PPUSH
37246: LD_VAR 0 2
37250: PUSH
37251: LD_INT 1
37253: ARRAY
37254: PPUSH
37255: LD_VAR 0 3
37259: PPUSH
37260: CALL_OW 1
37264: ST_TO_ADDR
37265: GO 37529
// begin tmp := arr ;
37267: LD_ADDR_VAR 0 6
37271: PUSH
37272: LD_VAR 0 1
37276: ST_TO_ADDR
// s_arr := [ tmp ] ;
37277: LD_ADDR_VAR 0 7
37281: PUSH
37282: LD_VAR 0 6
37286: PUSH
37287: EMPTY
37288: LIST
37289: ST_TO_ADDR
// for i = 1 to pos - 1 do
37290: LD_ADDR_VAR 0 5
37294: PUSH
37295: DOUBLE
37296: LD_INT 1
37298: DEC
37299: ST_TO_ADDR
37300: LD_VAR 0 2
37304: PUSH
37305: LD_INT 1
37307: MINUS
37308: PUSH
37309: FOR_TO
37310: IFFALSE 37355
// begin tmp := tmp [ pos [ i ] ] ;
37312: LD_ADDR_VAR 0 6
37316: PUSH
37317: LD_VAR 0 6
37321: PUSH
37322: LD_VAR 0 2
37326: PUSH
37327: LD_VAR 0 5
37331: ARRAY
37332: ARRAY
37333: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
37334: LD_ADDR_VAR 0 7
37338: PUSH
37339: LD_VAR 0 7
37343: PUSH
37344: LD_VAR 0 6
37348: PUSH
37349: EMPTY
37350: LIST
37351: ADD
37352: ST_TO_ADDR
// end ;
37353: GO 37309
37355: POP
37356: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
37357: LD_ADDR_VAR 0 6
37361: PUSH
37362: LD_VAR 0 6
37366: PPUSH
37367: LD_VAR 0 2
37371: PUSH
37372: LD_VAR 0 2
37376: ARRAY
37377: PPUSH
37378: LD_VAR 0 3
37382: PPUSH
37383: CALL_OW 1
37387: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
37388: LD_ADDR_VAR 0 7
37392: PUSH
37393: LD_VAR 0 7
37397: PPUSH
37398: LD_VAR 0 7
37402: PPUSH
37403: LD_VAR 0 6
37407: PPUSH
37408: CALL_OW 1
37412: ST_TO_ADDR
// for i = s_arr downto 2 do
37413: LD_ADDR_VAR 0 5
37417: PUSH
37418: DOUBLE
37419: LD_VAR 0 7
37423: INC
37424: ST_TO_ADDR
37425: LD_INT 2
37427: PUSH
37428: FOR_DOWNTO
37429: IFFALSE 37513
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
37431: LD_ADDR_VAR 0 6
37435: PUSH
37436: LD_VAR 0 7
37440: PUSH
37441: LD_VAR 0 5
37445: PUSH
37446: LD_INT 1
37448: MINUS
37449: ARRAY
37450: PPUSH
37451: LD_VAR 0 2
37455: PUSH
37456: LD_VAR 0 5
37460: PUSH
37461: LD_INT 1
37463: MINUS
37464: ARRAY
37465: PPUSH
37466: LD_VAR 0 7
37470: PUSH
37471: LD_VAR 0 5
37475: ARRAY
37476: PPUSH
37477: CALL_OW 1
37481: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
37482: LD_ADDR_VAR 0 7
37486: PUSH
37487: LD_VAR 0 7
37491: PPUSH
37492: LD_VAR 0 5
37496: PUSH
37497: LD_INT 1
37499: MINUS
37500: PPUSH
37501: LD_VAR 0 6
37505: PPUSH
37506: CALL_OW 1
37510: ST_TO_ADDR
// end ;
37511: GO 37428
37513: POP
37514: POP
// result := s_arr [ 1 ] ;
37515: LD_ADDR_VAR 0 4
37519: PUSH
37520: LD_VAR 0 7
37524: PUSH
37525: LD_INT 1
37527: ARRAY
37528: ST_TO_ADDR
// end ; end ;
37529: LD_VAR 0 4
37533: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
37534: LD_INT 0
37536: PPUSH
37537: PPUSH
// if not list then
37538: LD_VAR 0 1
37542: NOT
37543: IFFALSE 37547
// exit ;
37545: GO 37638
// i := list [ pos1 ] ;
37547: LD_ADDR_VAR 0 5
37551: PUSH
37552: LD_VAR 0 1
37556: PUSH
37557: LD_VAR 0 2
37561: ARRAY
37562: ST_TO_ADDR
// if not i then
37563: LD_VAR 0 5
37567: NOT
37568: IFFALSE 37572
// exit ;
37570: GO 37638
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
37572: LD_ADDR_VAR 0 1
37576: PUSH
37577: LD_VAR 0 1
37581: PPUSH
37582: LD_VAR 0 2
37586: PPUSH
37587: LD_VAR 0 1
37591: PUSH
37592: LD_VAR 0 3
37596: ARRAY
37597: PPUSH
37598: CALL_OW 1
37602: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
37603: LD_ADDR_VAR 0 1
37607: PUSH
37608: LD_VAR 0 1
37612: PPUSH
37613: LD_VAR 0 3
37617: PPUSH
37618: LD_VAR 0 5
37622: PPUSH
37623: CALL_OW 1
37627: ST_TO_ADDR
// result := list ;
37628: LD_ADDR_VAR 0 4
37632: PUSH
37633: LD_VAR 0 1
37637: ST_TO_ADDR
// end ;
37638: LD_VAR 0 4
37642: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
37643: LD_INT 0
37645: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
37646: LD_ADDR_VAR 0 5
37650: PUSH
37651: LD_VAR 0 1
37655: PPUSH
37656: CALL_OW 250
37660: PPUSH
37661: LD_VAR 0 1
37665: PPUSH
37666: CALL_OW 251
37670: PPUSH
37671: LD_VAR 0 2
37675: PPUSH
37676: LD_VAR 0 3
37680: PPUSH
37681: LD_VAR 0 4
37685: PPUSH
37686: CALL 37696 0 5
37690: ST_TO_ADDR
// end ;
37691: LD_VAR 0 5
37695: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37696: LD_INT 0
37698: PPUSH
37699: PPUSH
37700: PPUSH
37701: PPUSH
// if not list then
37702: LD_VAR 0 3
37706: NOT
37707: IFFALSE 37711
// exit ;
37709: GO 38099
// result := [ ] ;
37711: LD_ADDR_VAR 0 6
37715: PUSH
37716: EMPTY
37717: ST_TO_ADDR
// for i in list do
37718: LD_ADDR_VAR 0 7
37722: PUSH
37723: LD_VAR 0 3
37727: PUSH
37728: FOR_IN
37729: IFFALSE 37931
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37731: LD_ADDR_VAR 0 9
37735: PUSH
37736: LD_VAR 0 7
37740: PPUSH
37741: LD_VAR 0 1
37745: PPUSH
37746: LD_VAR 0 2
37750: PPUSH
37751: CALL_OW 297
37755: ST_TO_ADDR
// if not result then
37756: LD_VAR 0 6
37760: NOT
37761: IFFALSE 37787
// result := [ [ i , tmp ] ] else
37763: LD_ADDR_VAR 0 6
37767: PUSH
37768: LD_VAR 0 7
37772: PUSH
37773: LD_VAR 0 9
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: PUSH
37782: EMPTY
37783: LIST
37784: ST_TO_ADDR
37785: GO 37929
// begin if result [ result ] [ 2 ] < tmp then
37787: LD_VAR 0 6
37791: PUSH
37792: LD_VAR 0 6
37796: ARRAY
37797: PUSH
37798: LD_INT 2
37800: ARRAY
37801: PUSH
37802: LD_VAR 0 9
37806: LESS
37807: IFFALSE 37849
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37809: LD_ADDR_VAR 0 6
37813: PUSH
37814: LD_VAR 0 6
37818: PPUSH
37819: LD_VAR 0 6
37823: PUSH
37824: LD_INT 1
37826: PLUS
37827: PPUSH
37828: LD_VAR 0 7
37832: PUSH
37833: LD_VAR 0 9
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: PPUSH
37842: CALL_OW 2
37846: ST_TO_ADDR
37847: GO 37929
// for j = 1 to result do
37849: LD_ADDR_VAR 0 8
37853: PUSH
37854: DOUBLE
37855: LD_INT 1
37857: DEC
37858: ST_TO_ADDR
37859: LD_VAR 0 6
37863: PUSH
37864: FOR_TO
37865: IFFALSE 37927
// begin if tmp < result [ j ] [ 2 ] then
37867: LD_VAR 0 9
37871: PUSH
37872: LD_VAR 0 6
37876: PUSH
37877: LD_VAR 0 8
37881: ARRAY
37882: PUSH
37883: LD_INT 2
37885: ARRAY
37886: LESS
37887: IFFALSE 37925
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37889: LD_ADDR_VAR 0 6
37893: PUSH
37894: LD_VAR 0 6
37898: PPUSH
37899: LD_VAR 0 8
37903: PPUSH
37904: LD_VAR 0 7
37908: PUSH
37909: LD_VAR 0 9
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: PPUSH
37918: CALL_OW 2
37922: ST_TO_ADDR
// break ;
37923: GO 37927
// end ; end ;
37925: GO 37864
37927: POP
37928: POP
// end ; end ;
37929: GO 37728
37931: POP
37932: POP
// if result and not asc then
37933: LD_VAR 0 6
37937: PUSH
37938: LD_VAR 0 4
37942: NOT
37943: AND
37944: IFFALSE 38019
// begin tmp := result ;
37946: LD_ADDR_VAR 0 9
37950: PUSH
37951: LD_VAR 0 6
37955: ST_TO_ADDR
// for i = tmp downto 1 do
37956: LD_ADDR_VAR 0 7
37960: PUSH
37961: DOUBLE
37962: LD_VAR 0 9
37966: INC
37967: ST_TO_ADDR
37968: LD_INT 1
37970: PUSH
37971: FOR_DOWNTO
37972: IFFALSE 38017
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37974: LD_ADDR_VAR 0 6
37978: PUSH
37979: LD_VAR 0 6
37983: PPUSH
37984: LD_VAR 0 9
37988: PUSH
37989: LD_VAR 0 7
37993: MINUS
37994: PUSH
37995: LD_INT 1
37997: PLUS
37998: PPUSH
37999: LD_VAR 0 9
38003: PUSH
38004: LD_VAR 0 7
38008: ARRAY
38009: PPUSH
38010: CALL_OW 1
38014: ST_TO_ADDR
38015: GO 37971
38017: POP
38018: POP
// end ; tmp := [ ] ;
38019: LD_ADDR_VAR 0 9
38023: PUSH
38024: EMPTY
38025: ST_TO_ADDR
// if mode then
38026: LD_VAR 0 5
38030: IFFALSE 38099
// begin for i = 1 to result do
38032: LD_ADDR_VAR 0 7
38036: PUSH
38037: DOUBLE
38038: LD_INT 1
38040: DEC
38041: ST_TO_ADDR
38042: LD_VAR 0 6
38046: PUSH
38047: FOR_TO
38048: IFFALSE 38087
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
38050: LD_ADDR_VAR 0 9
38054: PUSH
38055: LD_VAR 0 9
38059: PPUSH
38060: LD_VAR 0 7
38064: PPUSH
38065: LD_VAR 0 6
38069: PUSH
38070: LD_VAR 0 7
38074: ARRAY
38075: PUSH
38076: LD_INT 1
38078: ARRAY
38079: PPUSH
38080: CALL_OW 1
38084: ST_TO_ADDR
38085: GO 38047
38087: POP
38088: POP
// result := tmp ;
38089: LD_ADDR_VAR 0 6
38093: PUSH
38094: LD_VAR 0 9
38098: ST_TO_ADDR
// end ; end ;
38099: LD_VAR 0 6
38103: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
38104: LD_INT 0
38106: PPUSH
38107: PPUSH
38108: PPUSH
38109: PPUSH
38110: PPUSH
38111: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
38112: LD_ADDR_VAR 0 5
38116: PUSH
38117: LD_INT 0
38119: PUSH
38120: LD_INT 0
38122: PUSH
38123: LD_INT 0
38125: PUSH
38126: EMPTY
38127: PUSH
38128: EMPTY
38129: LIST
38130: LIST
38131: LIST
38132: LIST
38133: ST_TO_ADDR
// if not x or not y then
38134: LD_VAR 0 2
38138: NOT
38139: PUSH
38140: LD_VAR 0 3
38144: NOT
38145: OR
38146: IFFALSE 38150
// exit ;
38148: GO 39796
// if not range then
38150: LD_VAR 0 4
38154: NOT
38155: IFFALSE 38165
// range := 10 ;
38157: LD_ADDR_VAR 0 4
38161: PUSH
38162: LD_INT 10
38164: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38165: LD_ADDR_VAR 0 8
38169: PUSH
38170: LD_INT 81
38172: PUSH
38173: LD_VAR 0 1
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: PUSH
38182: LD_INT 92
38184: PUSH
38185: LD_VAR 0 2
38189: PUSH
38190: LD_VAR 0 3
38194: PUSH
38195: LD_VAR 0 4
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: LIST
38204: LIST
38205: PUSH
38206: LD_INT 3
38208: PUSH
38209: LD_INT 21
38211: PUSH
38212: LD_INT 3
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: LIST
38227: PPUSH
38228: CALL_OW 69
38232: ST_TO_ADDR
// if not tmp then
38233: LD_VAR 0 8
38237: NOT
38238: IFFALSE 38242
// exit ;
38240: GO 39796
// for i in tmp do
38242: LD_ADDR_VAR 0 6
38246: PUSH
38247: LD_VAR 0 8
38251: PUSH
38252: FOR_IN
38253: IFFALSE 39771
// begin points := [ 0 , 0 , 0 ] ;
38255: LD_ADDR_VAR 0 9
38259: PUSH
38260: LD_INT 0
38262: PUSH
38263: LD_INT 0
38265: PUSH
38266: LD_INT 0
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: LIST
38273: ST_TO_ADDR
// bpoints := 1 ;
38274: LD_ADDR_VAR 0 10
38278: PUSH
38279: LD_INT 1
38281: ST_TO_ADDR
// case GetType ( i ) of unit_human :
38282: LD_VAR 0 6
38286: PPUSH
38287: CALL_OW 247
38291: PUSH
38292: LD_INT 1
38294: DOUBLE
38295: EQUAL
38296: IFTRUE 38300
38298: GO 38878
38300: POP
// begin if GetClass ( i ) = 1 then
38301: LD_VAR 0 6
38305: PPUSH
38306: CALL_OW 257
38310: PUSH
38311: LD_INT 1
38313: EQUAL
38314: IFFALSE 38335
// points := [ 10 , 5 , 3 ] ;
38316: LD_ADDR_VAR 0 9
38320: PUSH
38321: LD_INT 10
38323: PUSH
38324: LD_INT 5
38326: PUSH
38327: LD_INT 3
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: LIST
38334: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
38335: LD_VAR 0 6
38339: PPUSH
38340: CALL_OW 257
38344: PUSH
38345: LD_INT 2
38347: PUSH
38348: LD_INT 3
38350: PUSH
38351: LD_INT 4
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: LIST
38358: IN
38359: IFFALSE 38380
// points := [ 3 , 2 , 1 ] ;
38361: LD_ADDR_VAR 0 9
38365: PUSH
38366: LD_INT 3
38368: PUSH
38369: LD_INT 2
38371: PUSH
38372: LD_INT 1
38374: PUSH
38375: EMPTY
38376: LIST
38377: LIST
38378: LIST
38379: ST_TO_ADDR
// if GetClass ( i ) = 5 then
38380: LD_VAR 0 6
38384: PPUSH
38385: CALL_OW 257
38389: PUSH
38390: LD_INT 5
38392: EQUAL
38393: IFFALSE 38414
// points := [ 130 , 5 , 2 ] ;
38395: LD_ADDR_VAR 0 9
38399: PUSH
38400: LD_INT 130
38402: PUSH
38403: LD_INT 5
38405: PUSH
38406: LD_INT 2
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: LIST
38413: ST_TO_ADDR
// if GetClass ( i ) = 8 then
38414: LD_VAR 0 6
38418: PPUSH
38419: CALL_OW 257
38423: PUSH
38424: LD_INT 8
38426: EQUAL
38427: IFFALSE 38448
// points := [ 35 , 35 , 30 ] ;
38429: LD_ADDR_VAR 0 9
38433: PUSH
38434: LD_INT 35
38436: PUSH
38437: LD_INT 35
38439: PUSH
38440: LD_INT 30
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: LIST
38447: ST_TO_ADDR
// if GetClass ( i ) = 9 then
38448: LD_VAR 0 6
38452: PPUSH
38453: CALL_OW 257
38457: PUSH
38458: LD_INT 9
38460: EQUAL
38461: IFFALSE 38482
// points := [ 20 , 55 , 40 ] ;
38463: LD_ADDR_VAR 0 9
38467: PUSH
38468: LD_INT 20
38470: PUSH
38471: LD_INT 55
38473: PUSH
38474: LD_INT 40
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: LIST
38481: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
38482: LD_VAR 0 6
38486: PPUSH
38487: CALL_OW 257
38491: PUSH
38492: LD_INT 12
38494: PUSH
38495: LD_INT 16
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: IN
38502: IFFALSE 38523
// points := [ 5 , 3 , 2 ] ;
38504: LD_ADDR_VAR 0 9
38508: PUSH
38509: LD_INT 5
38511: PUSH
38512: LD_INT 3
38514: PUSH
38515: LD_INT 2
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: LIST
38522: ST_TO_ADDR
// if GetClass ( i ) = 17 then
38523: LD_VAR 0 6
38527: PPUSH
38528: CALL_OW 257
38532: PUSH
38533: LD_INT 17
38535: EQUAL
38536: IFFALSE 38557
// points := [ 100 , 50 , 75 ] ;
38538: LD_ADDR_VAR 0 9
38542: PUSH
38543: LD_INT 100
38545: PUSH
38546: LD_INT 50
38548: PUSH
38549: LD_INT 75
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: LIST
38556: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38557: LD_VAR 0 6
38561: PPUSH
38562: CALL_OW 257
38566: PUSH
38567: LD_INT 15
38569: EQUAL
38570: IFFALSE 38591
// points := [ 10 , 5 , 3 ] ;
38572: LD_ADDR_VAR 0 9
38576: PUSH
38577: LD_INT 10
38579: PUSH
38580: LD_INT 5
38582: PUSH
38583: LD_INT 3
38585: PUSH
38586: EMPTY
38587: LIST
38588: LIST
38589: LIST
38590: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38591: LD_VAR 0 6
38595: PPUSH
38596: CALL_OW 257
38600: PUSH
38601: LD_INT 14
38603: EQUAL
38604: IFFALSE 38625
// points := [ 10 , 0 , 0 ] ;
38606: LD_ADDR_VAR 0 9
38610: PUSH
38611: LD_INT 10
38613: PUSH
38614: LD_INT 0
38616: PUSH
38617: LD_INT 0
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: LIST
38624: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38625: LD_VAR 0 6
38629: PPUSH
38630: CALL_OW 257
38634: PUSH
38635: LD_INT 11
38637: EQUAL
38638: IFFALSE 38659
// points := [ 30 , 10 , 5 ] ;
38640: LD_ADDR_VAR 0 9
38644: PUSH
38645: LD_INT 30
38647: PUSH
38648: LD_INT 10
38650: PUSH
38651: LD_INT 5
38653: PUSH
38654: EMPTY
38655: LIST
38656: LIST
38657: LIST
38658: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38659: LD_VAR 0 1
38663: PPUSH
38664: LD_INT 5
38666: PPUSH
38667: CALL_OW 321
38671: PUSH
38672: LD_INT 2
38674: EQUAL
38675: IFFALSE 38692
// bpoints := bpoints * 1.8 ;
38677: LD_ADDR_VAR 0 10
38681: PUSH
38682: LD_VAR 0 10
38686: PUSH
38687: LD_REAL  1.80000000000000E+0000
38690: MUL
38691: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38692: LD_VAR 0 6
38696: PPUSH
38697: CALL_OW 257
38701: PUSH
38702: LD_INT 1
38704: PUSH
38705: LD_INT 2
38707: PUSH
38708: LD_INT 3
38710: PUSH
38711: LD_INT 4
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: LIST
38718: LIST
38719: IN
38720: PUSH
38721: LD_VAR 0 1
38725: PPUSH
38726: LD_INT 51
38728: PPUSH
38729: CALL_OW 321
38733: PUSH
38734: LD_INT 2
38736: EQUAL
38737: AND
38738: IFFALSE 38755
// bpoints := bpoints * 1.2 ;
38740: LD_ADDR_VAR 0 10
38744: PUSH
38745: LD_VAR 0 10
38749: PUSH
38750: LD_REAL  1.20000000000000E+0000
38753: MUL
38754: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38755: LD_VAR 0 6
38759: PPUSH
38760: CALL_OW 257
38764: PUSH
38765: LD_INT 5
38767: PUSH
38768: LD_INT 7
38770: PUSH
38771: LD_INT 9
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: LIST
38778: IN
38779: PUSH
38780: LD_VAR 0 1
38784: PPUSH
38785: LD_INT 52
38787: PPUSH
38788: CALL_OW 321
38792: PUSH
38793: LD_INT 2
38795: EQUAL
38796: AND
38797: IFFALSE 38814
// bpoints := bpoints * 1.5 ;
38799: LD_ADDR_VAR 0 10
38803: PUSH
38804: LD_VAR 0 10
38808: PUSH
38809: LD_REAL  1.50000000000000E+0000
38812: MUL
38813: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38814: LD_VAR 0 1
38818: PPUSH
38819: LD_INT 66
38821: PPUSH
38822: CALL_OW 321
38826: PUSH
38827: LD_INT 2
38829: EQUAL
38830: IFFALSE 38847
// bpoints := bpoints * 1.1 ;
38832: LD_ADDR_VAR 0 10
38836: PUSH
38837: LD_VAR 0 10
38841: PUSH
38842: LD_REAL  1.10000000000000E+0000
38845: MUL
38846: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38847: LD_ADDR_VAR 0 10
38851: PUSH
38852: LD_VAR 0 10
38856: PUSH
38857: LD_VAR 0 6
38861: PPUSH
38862: LD_INT 1
38864: PPUSH
38865: CALL_OW 259
38869: PUSH
38870: LD_REAL  1.15000000000000E+0000
38873: MUL
38874: MUL
38875: ST_TO_ADDR
// end ; unit_vehicle :
38876: GO 39700
38878: LD_INT 2
38880: DOUBLE
38881: EQUAL
38882: IFTRUE 38886
38884: GO 39688
38886: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38887: LD_VAR 0 6
38891: PPUSH
38892: CALL_OW 264
38896: PUSH
38897: LD_INT 2
38899: PUSH
38900: LD_INT 42
38902: PUSH
38903: LD_INT 24
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: LIST
38910: IN
38911: IFFALSE 38932
// points := [ 25 , 5 , 3 ] ;
38913: LD_ADDR_VAR 0 9
38917: PUSH
38918: LD_INT 25
38920: PUSH
38921: LD_INT 5
38923: PUSH
38924: LD_INT 3
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: LIST
38931: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38932: LD_VAR 0 6
38936: PPUSH
38937: CALL_OW 264
38941: PUSH
38942: LD_INT 4
38944: PUSH
38945: LD_INT 43
38947: PUSH
38948: LD_INT 25
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: LIST
38955: IN
38956: IFFALSE 38977
// points := [ 40 , 15 , 5 ] ;
38958: LD_ADDR_VAR 0 9
38962: PUSH
38963: LD_INT 40
38965: PUSH
38966: LD_INT 15
38968: PUSH
38969: LD_INT 5
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: LIST
38976: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38977: LD_VAR 0 6
38981: PPUSH
38982: CALL_OW 264
38986: PUSH
38987: LD_INT 3
38989: PUSH
38990: LD_INT 23
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: IN
38997: IFFALSE 39018
// points := [ 7 , 25 , 8 ] ;
38999: LD_ADDR_VAR 0 9
39003: PUSH
39004: LD_INT 7
39006: PUSH
39007: LD_INT 25
39009: PUSH
39010: LD_INT 8
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: LIST
39017: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39018: LD_VAR 0 6
39022: PPUSH
39023: CALL_OW 264
39027: PUSH
39028: LD_INT 5
39030: PUSH
39031: LD_INT 27
39033: PUSH
39034: LD_INT 44
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: LIST
39041: IN
39042: IFFALSE 39063
// points := [ 14 , 50 , 16 ] ;
39044: LD_ADDR_VAR 0 9
39048: PUSH
39049: LD_INT 14
39051: PUSH
39052: LD_INT 50
39054: PUSH
39055: LD_INT 16
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: LIST
39062: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
39063: LD_VAR 0 6
39067: PPUSH
39068: CALL_OW 264
39072: PUSH
39073: LD_INT 6
39075: PUSH
39076: LD_INT 46
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: IN
39083: IFFALSE 39104
// points := [ 32 , 120 , 70 ] ;
39085: LD_ADDR_VAR 0 9
39089: PUSH
39090: LD_INT 32
39092: PUSH
39093: LD_INT 120
39095: PUSH
39096: LD_INT 70
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: LIST
39103: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
39104: LD_VAR 0 6
39108: PPUSH
39109: CALL_OW 264
39113: PUSH
39114: LD_INT 7
39116: PUSH
39117: LD_INT 28
39119: PUSH
39120: LD_INT 45
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: LIST
39127: IN
39128: IFFALSE 39149
// points := [ 35 , 20 , 45 ] ;
39130: LD_ADDR_VAR 0 9
39134: PUSH
39135: LD_INT 35
39137: PUSH
39138: LD_INT 20
39140: PUSH
39141: LD_INT 45
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: LIST
39148: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39149: LD_VAR 0 6
39153: PPUSH
39154: CALL_OW 264
39158: PUSH
39159: LD_INT 47
39161: PUSH
39162: EMPTY
39163: LIST
39164: IN
39165: IFFALSE 39186
// points := [ 67 , 45 , 75 ] ;
39167: LD_ADDR_VAR 0 9
39171: PUSH
39172: LD_INT 67
39174: PUSH
39175: LD_INT 45
39177: PUSH
39178: LD_INT 75
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: LIST
39185: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
39186: LD_VAR 0 6
39190: PPUSH
39191: CALL_OW 264
39195: PUSH
39196: LD_INT 26
39198: PUSH
39199: EMPTY
39200: LIST
39201: IN
39202: IFFALSE 39223
// points := [ 120 , 30 , 80 ] ;
39204: LD_ADDR_VAR 0 9
39208: PUSH
39209: LD_INT 120
39211: PUSH
39212: LD_INT 30
39214: PUSH
39215: LD_INT 80
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: LIST
39222: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
39223: LD_VAR 0 6
39227: PPUSH
39228: CALL_OW 264
39232: PUSH
39233: LD_INT 22
39235: PUSH
39236: EMPTY
39237: LIST
39238: IN
39239: IFFALSE 39260
// points := [ 40 , 1 , 1 ] ;
39241: LD_ADDR_VAR 0 9
39245: PUSH
39246: LD_INT 40
39248: PUSH
39249: LD_INT 1
39251: PUSH
39252: LD_INT 1
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: LIST
39259: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
39260: LD_VAR 0 6
39264: PPUSH
39265: CALL_OW 264
39269: PUSH
39270: LD_INT 29
39272: PUSH
39273: EMPTY
39274: LIST
39275: IN
39276: IFFALSE 39297
// points := [ 70 , 200 , 400 ] ;
39278: LD_ADDR_VAR 0 9
39282: PUSH
39283: LD_INT 70
39285: PUSH
39286: LD_INT 200
39288: PUSH
39289: LD_INT 400
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: LIST
39296: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
39297: LD_VAR 0 6
39301: PPUSH
39302: CALL_OW 264
39306: PUSH
39307: LD_INT 14
39309: PUSH
39310: LD_INT 53
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: IN
39317: IFFALSE 39338
// points := [ 40 , 10 , 20 ] ;
39319: LD_ADDR_VAR 0 9
39323: PUSH
39324: LD_INT 40
39326: PUSH
39327: LD_INT 10
39329: PUSH
39330: LD_INT 20
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: LIST
39337: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
39338: LD_VAR 0 6
39342: PPUSH
39343: CALL_OW 264
39347: PUSH
39348: LD_INT 9
39350: PUSH
39351: EMPTY
39352: LIST
39353: IN
39354: IFFALSE 39375
// points := [ 5 , 70 , 20 ] ;
39356: LD_ADDR_VAR 0 9
39360: PUSH
39361: LD_INT 5
39363: PUSH
39364: LD_INT 70
39366: PUSH
39367: LD_INT 20
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: LIST
39374: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
39375: LD_VAR 0 6
39379: PPUSH
39380: CALL_OW 264
39384: PUSH
39385: LD_INT 10
39387: PUSH
39388: EMPTY
39389: LIST
39390: IN
39391: IFFALSE 39412
// points := [ 35 , 110 , 70 ] ;
39393: LD_ADDR_VAR 0 9
39397: PUSH
39398: LD_INT 35
39400: PUSH
39401: LD_INT 110
39403: PUSH
39404: LD_INT 70
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: LIST
39411: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
39412: LD_VAR 0 6
39416: PPUSH
39417: CALL_OW 265
39421: PUSH
39422: LD_INT 25
39424: EQUAL
39425: IFFALSE 39446
// points := [ 80 , 65 , 100 ] ;
39427: LD_ADDR_VAR 0 9
39431: PUSH
39432: LD_INT 80
39434: PUSH
39435: LD_INT 65
39437: PUSH
39438: LD_INT 100
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: LIST
39445: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
39446: LD_VAR 0 6
39450: PPUSH
39451: CALL_OW 263
39455: PUSH
39456: LD_INT 1
39458: EQUAL
39459: IFFALSE 39494
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
39461: LD_ADDR_VAR 0 10
39465: PUSH
39466: LD_VAR 0 10
39470: PUSH
39471: LD_VAR 0 6
39475: PPUSH
39476: CALL_OW 311
39480: PPUSH
39481: LD_INT 3
39483: PPUSH
39484: CALL_OW 259
39488: PUSH
39489: LD_INT 4
39491: MUL
39492: MUL
39493: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
39494: LD_VAR 0 6
39498: PPUSH
39499: CALL_OW 263
39503: PUSH
39504: LD_INT 2
39506: EQUAL
39507: IFFALSE 39558
// begin j := IsControledBy ( i ) ;
39509: LD_ADDR_VAR 0 7
39513: PUSH
39514: LD_VAR 0 6
39518: PPUSH
39519: CALL_OW 312
39523: ST_TO_ADDR
// if j then
39524: LD_VAR 0 7
39528: IFFALSE 39558
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39530: LD_ADDR_VAR 0 10
39534: PUSH
39535: LD_VAR 0 10
39539: PUSH
39540: LD_VAR 0 7
39544: PPUSH
39545: LD_INT 3
39547: PPUSH
39548: CALL_OW 259
39552: PUSH
39553: LD_INT 3
39555: MUL
39556: MUL
39557: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39558: LD_VAR 0 6
39562: PPUSH
39563: CALL_OW 264
39567: PUSH
39568: LD_INT 5
39570: PUSH
39571: LD_INT 6
39573: PUSH
39574: LD_INT 46
39576: PUSH
39577: LD_INT 44
39579: PUSH
39580: LD_INT 47
39582: PUSH
39583: LD_INT 45
39585: PUSH
39586: LD_INT 28
39588: PUSH
39589: LD_INT 7
39591: PUSH
39592: LD_INT 27
39594: PUSH
39595: LD_INT 29
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: IN
39610: PUSH
39611: LD_VAR 0 1
39615: PPUSH
39616: LD_INT 52
39618: PPUSH
39619: CALL_OW 321
39623: PUSH
39624: LD_INT 2
39626: EQUAL
39627: AND
39628: IFFALSE 39645
// bpoints := bpoints * 1.2 ;
39630: LD_ADDR_VAR 0 10
39634: PUSH
39635: LD_VAR 0 10
39639: PUSH
39640: LD_REAL  1.20000000000000E+0000
39643: MUL
39644: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39645: LD_VAR 0 6
39649: PPUSH
39650: CALL_OW 264
39654: PUSH
39655: LD_INT 6
39657: PUSH
39658: LD_INT 46
39660: PUSH
39661: LD_INT 47
39663: PUSH
39664: EMPTY
39665: LIST
39666: LIST
39667: LIST
39668: IN
39669: IFFALSE 39686
// bpoints := bpoints * 1.2 ;
39671: LD_ADDR_VAR 0 10
39675: PUSH
39676: LD_VAR 0 10
39680: PUSH
39681: LD_REAL  1.20000000000000E+0000
39684: MUL
39685: ST_TO_ADDR
// end ; unit_building :
39686: GO 39700
39688: LD_INT 3
39690: DOUBLE
39691: EQUAL
39692: IFTRUE 39696
39694: GO 39699
39696: POP
// ; end ;
39697: GO 39700
39699: POP
// for j = 1 to 3 do
39700: LD_ADDR_VAR 0 7
39704: PUSH
39705: DOUBLE
39706: LD_INT 1
39708: DEC
39709: ST_TO_ADDR
39710: LD_INT 3
39712: PUSH
39713: FOR_TO
39714: IFFALSE 39767
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39716: LD_ADDR_VAR 0 5
39720: PUSH
39721: LD_VAR 0 5
39725: PPUSH
39726: LD_VAR 0 7
39730: PPUSH
39731: LD_VAR 0 5
39735: PUSH
39736: LD_VAR 0 7
39740: ARRAY
39741: PUSH
39742: LD_VAR 0 9
39746: PUSH
39747: LD_VAR 0 7
39751: ARRAY
39752: PUSH
39753: LD_VAR 0 10
39757: MUL
39758: PLUS
39759: PPUSH
39760: CALL_OW 1
39764: ST_TO_ADDR
39765: GO 39713
39767: POP
39768: POP
// end ;
39769: GO 38252
39771: POP
39772: POP
// result := Replace ( result , 4 , tmp ) ;
39773: LD_ADDR_VAR 0 5
39777: PUSH
39778: LD_VAR 0 5
39782: PPUSH
39783: LD_INT 4
39785: PPUSH
39786: LD_VAR 0 8
39790: PPUSH
39791: CALL_OW 1
39795: ST_TO_ADDR
// end ;
39796: LD_VAR 0 5
39800: RET
// export function DangerAtRange ( unit , range ) ; begin
39801: LD_INT 0
39803: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39804: LD_ADDR_VAR 0 3
39808: PUSH
39809: LD_VAR 0 1
39813: PPUSH
39814: CALL_OW 255
39818: PPUSH
39819: LD_VAR 0 1
39823: PPUSH
39824: CALL_OW 250
39828: PPUSH
39829: LD_VAR 0 1
39833: PPUSH
39834: CALL_OW 251
39838: PPUSH
39839: LD_VAR 0 2
39843: PPUSH
39844: CALL 38104 0 4
39848: ST_TO_ADDR
// end ;
39849: LD_VAR 0 3
39853: RET
// export function DangerInArea ( side , area ) ; begin
39854: LD_INT 0
39856: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39857: LD_ADDR_VAR 0 3
39861: PUSH
39862: LD_VAR 0 2
39866: PPUSH
39867: LD_INT 81
39869: PUSH
39870: LD_VAR 0 1
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PPUSH
39879: CALL_OW 70
39883: ST_TO_ADDR
// end ;
39884: LD_VAR 0 3
39888: RET
// export function IsExtension ( b ) ; begin
39889: LD_INT 0
39891: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39892: LD_ADDR_VAR 0 2
39896: PUSH
39897: LD_VAR 0 1
39901: PUSH
39902: LD_INT 23
39904: PUSH
39905: LD_INT 20
39907: PUSH
39908: LD_INT 22
39910: PUSH
39911: LD_INT 17
39913: PUSH
39914: LD_INT 24
39916: PUSH
39917: LD_INT 21
39919: PUSH
39920: LD_INT 19
39922: PUSH
39923: LD_INT 16
39925: PUSH
39926: LD_INT 25
39928: PUSH
39929: LD_INT 18
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: LIST
39936: LIST
39937: LIST
39938: LIST
39939: LIST
39940: LIST
39941: LIST
39942: LIST
39943: IN
39944: ST_TO_ADDR
// end ;
39945: LD_VAR 0 2
39949: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
39950: LD_INT 0
39952: PPUSH
39953: PPUSH
39954: PPUSH
// result := [ ] ;
39955: LD_ADDR_VAR 0 3
39959: PUSH
39960: EMPTY
39961: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39962: LD_ADDR_VAR 0 4
39966: PUSH
39967: LD_VAR 0 2
39971: PPUSH
39972: LD_INT 21
39974: PUSH
39975: LD_INT 3
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: PPUSH
39982: CALL_OW 70
39986: ST_TO_ADDR
// if not tmp then
39987: LD_VAR 0 4
39991: NOT
39992: IFFALSE 39996
// exit ;
39994: GO 40054
// for i in tmp do
39996: LD_ADDR_VAR 0 5
40000: PUSH
40001: LD_VAR 0 4
40005: PUSH
40006: FOR_IN
40007: IFFALSE 40042
// if GetBase ( i ) <> base then
40009: LD_VAR 0 5
40013: PPUSH
40014: CALL_OW 274
40018: PUSH
40019: LD_VAR 0 1
40023: NONEQUAL
40024: IFFALSE 40040
// ComLinkToBase ( base , i ) ;
40026: LD_VAR 0 1
40030: PPUSH
40031: LD_VAR 0 5
40035: PPUSH
40036: CALL_OW 169
40040: GO 40006
40042: POP
40043: POP
// result := tmp ;
40044: LD_ADDR_VAR 0 3
40048: PUSH
40049: LD_VAR 0 4
40053: ST_TO_ADDR
// end ;
40054: LD_VAR 0 3
40058: RET
// export function ComComplete ( unit , b ) ; var i ; begin
40059: LD_INT 0
40061: PPUSH
40062: PPUSH
// if BuildingStatus ( b ) = bs_build then
40063: LD_VAR 0 2
40067: PPUSH
40068: CALL_OW 461
40072: PUSH
40073: LD_INT 1
40075: EQUAL
40076: IFFALSE 40136
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40078: LD_VAR 0 1
40082: PPUSH
40083: LD_STRING h
40085: PUSH
40086: LD_VAR 0 2
40090: PPUSH
40091: CALL_OW 250
40095: PUSH
40096: LD_VAR 0 2
40100: PPUSH
40101: CALL_OW 251
40105: PUSH
40106: LD_VAR 0 2
40110: PUSH
40111: LD_INT 0
40113: PUSH
40114: LD_INT 0
40116: PUSH
40117: LD_INT 0
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: PUSH
40129: EMPTY
40130: LIST
40131: PPUSH
40132: CALL_OW 446
// end ;
40136: LD_VAR 0 3
40140: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40141: LD_INT 0
40143: PPUSH
40144: PPUSH
40145: PPUSH
40146: PPUSH
40147: PPUSH
40148: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
40149: LD_VAR 0 1
40153: NOT
40154: PUSH
40155: LD_VAR 0 1
40159: PPUSH
40160: CALL_OW 263
40164: PUSH
40165: LD_INT 2
40167: EQUAL
40168: NOT
40169: OR
40170: IFFALSE 40174
// exit ;
40172: GO 40490
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
40174: LD_ADDR_VAR 0 6
40178: PUSH
40179: LD_INT 22
40181: PUSH
40182: LD_VAR 0 1
40186: PPUSH
40187: CALL_OW 255
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: LD_INT 2
40198: PUSH
40199: LD_INT 30
40201: PUSH
40202: LD_INT 36
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 34
40211: PUSH
40212: LD_INT 31
40214: PUSH
40215: EMPTY
40216: LIST
40217: LIST
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: LIST
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PPUSH
40228: CALL_OW 69
40232: ST_TO_ADDR
// if not tmp then
40233: LD_VAR 0 6
40237: NOT
40238: IFFALSE 40242
// exit ;
40240: GO 40490
// result := [ ] ;
40242: LD_ADDR_VAR 0 2
40246: PUSH
40247: EMPTY
40248: ST_TO_ADDR
// for i in tmp do
40249: LD_ADDR_VAR 0 3
40253: PUSH
40254: LD_VAR 0 6
40258: PUSH
40259: FOR_IN
40260: IFFALSE 40331
// begin t := UnitsInside ( i ) ;
40262: LD_ADDR_VAR 0 4
40266: PUSH
40267: LD_VAR 0 3
40271: PPUSH
40272: CALL_OW 313
40276: ST_TO_ADDR
// if t then
40277: LD_VAR 0 4
40281: IFFALSE 40329
// for j in t do
40283: LD_ADDR_VAR 0 7
40287: PUSH
40288: LD_VAR 0 4
40292: PUSH
40293: FOR_IN
40294: IFFALSE 40327
// result := Insert ( result , result + 1 , j ) ;
40296: LD_ADDR_VAR 0 2
40300: PUSH
40301: LD_VAR 0 2
40305: PPUSH
40306: LD_VAR 0 2
40310: PUSH
40311: LD_INT 1
40313: PLUS
40314: PPUSH
40315: LD_VAR 0 7
40319: PPUSH
40320: CALL_OW 2
40324: ST_TO_ADDR
40325: GO 40293
40327: POP
40328: POP
// end ;
40329: GO 40259
40331: POP
40332: POP
// if not result then
40333: LD_VAR 0 2
40337: NOT
40338: IFFALSE 40342
// exit ;
40340: GO 40490
// mech := result [ 1 ] ;
40342: LD_ADDR_VAR 0 5
40346: PUSH
40347: LD_VAR 0 2
40351: PUSH
40352: LD_INT 1
40354: ARRAY
40355: ST_TO_ADDR
// if result > 1 then
40356: LD_VAR 0 2
40360: PUSH
40361: LD_INT 1
40363: GREATER
40364: IFFALSE 40476
// for i = 2 to result do
40366: LD_ADDR_VAR 0 3
40370: PUSH
40371: DOUBLE
40372: LD_INT 2
40374: DEC
40375: ST_TO_ADDR
40376: LD_VAR 0 2
40380: PUSH
40381: FOR_TO
40382: IFFALSE 40474
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
40384: LD_ADDR_VAR 0 4
40388: PUSH
40389: LD_VAR 0 2
40393: PUSH
40394: LD_VAR 0 3
40398: ARRAY
40399: PPUSH
40400: LD_INT 3
40402: PPUSH
40403: CALL_OW 259
40407: PUSH
40408: LD_VAR 0 2
40412: PUSH
40413: LD_VAR 0 3
40417: ARRAY
40418: PPUSH
40419: CALL_OW 432
40423: MINUS
40424: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
40425: LD_VAR 0 4
40429: PUSH
40430: LD_VAR 0 5
40434: PPUSH
40435: LD_INT 3
40437: PPUSH
40438: CALL_OW 259
40442: PUSH
40443: LD_VAR 0 5
40447: PPUSH
40448: CALL_OW 432
40452: MINUS
40453: GREATEREQUAL
40454: IFFALSE 40472
// mech := result [ i ] ;
40456: LD_ADDR_VAR 0 5
40460: PUSH
40461: LD_VAR 0 2
40465: PUSH
40466: LD_VAR 0 3
40470: ARRAY
40471: ST_TO_ADDR
// end ;
40472: GO 40381
40474: POP
40475: POP
// ComLinkTo ( vehicle , mech ) ;
40476: LD_VAR 0 1
40480: PPUSH
40481: LD_VAR 0 5
40485: PPUSH
40486: CALL_OW 135
// end ;
40490: LD_VAR 0 2
40494: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40495: LD_INT 0
40497: PPUSH
40498: PPUSH
40499: PPUSH
40500: PPUSH
40501: PPUSH
40502: PPUSH
40503: PPUSH
40504: PPUSH
40505: PPUSH
40506: PPUSH
40507: PPUSH
40508: PPUSH
40509: PPUSH
// result := [ ] ;
40510: LD_ADDR_VAR 0 7
40514: PUSH
40515: EMPTY
40516: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40517: LD_VAR 0 1
40521: PPUSH
40522: CALL_OW 266
40526: PUSH
40527: LD_INT 0
40529: PUSH
40530: LD_INT 1
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: IN
40537: NOT
40538: IFFALSE 40542
// exit ;
40540: GO 42173
// if name then
40542: LD_VAR 0 3
40546: IFFALSE 40562
// SetBName ( base_dep , name ) ;
40548: LD_VAR 0 1
40552: PPUSH
40553: LD_VAR 0 3
40557: PPUSH
40558: CALL_OW 500
// base := GetBase ( base_dep ) ;
40562: LD_ADDR_VAR 0 15
40566: PUSH
40567: LD_VAR 0 1
40571: PPUSH
40572: CALL_OW 274
40576: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40577: LD_ADDR_VAR 0 16
40581: PUSH
40582: LD_VAR 0 1
40586: PPUSH
40587: CALL_OW 255
40591: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40592: LD_ADDR_VAR 0 17
40596: PUSH
40597: LD_VAR 0 1
40601: PPUSH
40602: CALL_OW 248
40606: ST_TO_ADDR
// if sources then
40607: LD_VAR 0 5
40611: IFFALSE 40658
// for i = 1 to 3 do
40613: LD_ADDR_VAR 0 8
40617: PUSH
40618: DOUBLE
40619: LD_INT 1
40621: DEC
40622: ST_TO_ADDR
40623: LD_INT 3
40625: PUSH
40626: FOR_TO
40627: IFFALSE 40656
// AddResourceType ( base , i , sources [ i ] ) ;
40629: LD_VAR 0 15
40633: PPUSH
40634: LD_VAR 0 8
40638: PPUSH
40639: LD_VAR 0 5
40643: PUSH
40644: LD_VAR 0 8
40648: ARRAY
40649: PPUSH
40650: CALL_OW 276
40654: GO 40626
40656: POP
40657: POP
// buildings := GetBaseBuildings ( base , area ) ;
40658: LD_ADDR_VAR 0 18
40662: PUSH
40663: LD_VAR 0 15
40667: PPUSH
40668: LD_VAR 0 2
40672: PPUSH
40673: CALL 39950 0 2
40677: ST_TO_ADDR
// InitHc ;
40678: CALL_OW 19
// InitUc ;
40682: CALL_OW 18
// uc_side := side ;
40686: LD_ADDR_OWVAR 20
40690: PUSH
40691: LD_VAR 0 16
40695: ST_TO_ADDR
// uc_nation := nation ;
40696: LD_ADDR_OWVAR 21
40700: PUSH
40701: LD_VAR 0 17
40705: ST_TO_ADDR
// if buildings then
40706: LD_VAR 0 18
40710: IFFALSE 42032
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40712: LD_ADDR_VAR 0 19
40716: PUSH
40717: LD_VAR 0 18
40721: PPUSH
40722: LD_INT 2
40724: PUSH
40725: LD_INT 30
40727: PUSH
40728: LD_INT 29
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PUSH
40735: LD_INT 30
40737: PUSH
40738: LD_INT 30
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: LIST
40749: PPUSH
40750: CALL_OW 72
40754: ST_TO_ADDR
// if tmp then
40755: LD_VAR 0 19
40759: IFFALSE 40807
// for i in tmp do
40761: LD_ADDR_VAR 0 8
40765: PUSH
40766: LD_VAR 0 19
40770: PUSH
40771: FOR_IN
40772: IFFALSE 40805
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40774: LD_VAR 0 8
40778: PPUSH
40779: CALL_OW 250
40783: PPUSH
40784: LD_VAR 0 8
40788: PPUSH
40789: CALL_OW 251
40793: PPUSH
40794: LD_VAR 0 16
40798: PPUSH
40799: CALL_OW 441
40803: GO 40771
40805: POP
40806: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40807: LD_VAR 0 18
40811: PPUSH
40812: LD_INT 2
40814: PUSH
40815: LD_INT 30
40817: PUSH
40818: LD_INT 32
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 30
40827: PUSH
40828: LD_INT 33
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: LIST
40839: PPUSH
40840: CALL_OW 72
40844: IFFALSE 40932
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40846: LD_ADDR_VAR 0 8
40850: PUSH
40851: LD_VAR 0 18
40855: PPUSH
40856: LD_INT 2
40858: PUSH
40859: LD_INT 30
40861: PUSH
40862: LD_INT 32
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: PUSH
40869: LD_INT 30
40871: PUSH
40872: LD_INT 33
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: LIST
40883: PPUSH
40884: CALL_OW 72
40888: PUSH
40889: FOR_IN
40890: IFFALSE 40930
// begin if not GetBWeapon ( i ) then
40892: LD_VAR 0 8
40896: PPUSH
40897: CALL_OW 269
40901: NOT
40902: IFFALSE 40928
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40904: LD_VAR 0 8
40908: PPUSH
40909: LD_VAR 0 8
40913: PPUSH
40914: LD_VAR 0 2
40918: PPUSH
40919: CALL 42178 0 2
40923: PPUSH
40924: CALL_OW 431
// end ;
40928: GO 40889
40930: POP
40931: POP
// end ; for i = 1 to personel do
40932: LD_ADDR_VAR 0 8
40936: PUSH
40937: DOUBLE
40938: LD_INT 1
40940: DEC
40941: ST_TO_ADDR
40942: LD_VAR 0 6
40946: PUSH
40947: FOR_TO
40948: IFFALSE 42012
// begin if i > 4 then
40950: LD_VAR 0 8
40954: PUSH
40955: LD_INT 4
40957: GREATER
40958: IFFALSE 40962
// break ;
40960: GO 42012
// case i of 1 :
40962: LD_VAR 0 8
40966: PUSH
40967: LD_INT 1
40969: DOUBLE
40970: EQUAL
40971: IFTRUE 40975
40973: GO 41055
40975: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40976: LD_ADDR_VAR 0 12
40980: PUSH
40981: LD_VAR 0 18
40985: PPUSH
40986: LD_INT 22
40988: PUSH
40989: LD_VAR 0 16
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 58
41000: PUSH
41001: EMPTY
41002: LIST
41003: PUSH
41004: LD_INT 2
41006: PUSH
41007: LD_INT 30
41009: PUSH
41010: LD_INT 32
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: PUSH
41017: LD_INT 30
41019: PUSH
41020: LD_INT 4
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: LD_INT 30
41029: PUSH
41030: LD_INT 5
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: LIST
41041: LIST
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: LIST
41047: PPUSH
41048: CALL_OW 72
41052: ST_TO_ADDR
41053: GO 41277
41055: LD_INT 2
41057: DOUBLE
41058: EQUAL
41059: IFTRUE 41063
41061: GO 41125
41063: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
41064: LD_ADDR_VAR 0 12
41068: PUSH
41069: LD_VAR 0 18
41073: PPUSH
41074: LD_INT 22
41076: PUSH
41077: LD_VAR 0 16
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 2
41088: PUSH
41089: LD_INT 30
41091: PUSH
41092: LD_INT 0
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 30
41101: PUSH
41102: LD_INT 1
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: LIST
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: PPUSH
41118: CALL_OW 72
41122: ST_TO_ADDR
41123: GO 41277
41125: LD_INT 3
41127: DOUBLE
41128: EQUAL
41129: IFTRUE 41133
41131: GO 41195
41133: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41134: LD_ADDR_VAR 0 12
41138: PUSH
41139: LD_VAR 0 18
41143: PPUSH
41144: LD_INT 22
41146: PUSH
41147: LD_VAR 0 16
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: LD_INT 2
41158: PUSH
41159: LD_INT 30
41161: PUSH
41162: LD_INT 2
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 30
41171: PUSH
41172: LD_INT 3
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: LIST
41183: PUSH
41184: EMPTY
41185: LIST
41186: LIST
41187: PPUSH
41188: CALL_OW 72
41192: ST_TO_ADDR
41193: GO 41277
41195: LD_INT 4
41197: DOUBLE
41198: EQUAL
41199: IFTRUE 41203
41201: GO 41276
41203: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
41204: LD_ADDR_VAR 0 12
41208: PUSH
41209: LD_VAR 0 18
41213: PPUSH
41214: LD_INT 22
41216: PUSH
41217: LD_VAR 0 16
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: LD_INT 2
41228: PUSH
41229: LD_INT 30
41231: PUSH
41232: LD_INT 6
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: LD_INT 30
41241: PUSH
41242: LD_INT 7
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 30
41251: PUSH
41252: LD_INT 8
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: EMPTY
41260: LIST
41261: LIST
41262: LIST
41263: LIST
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PPUSH
41269: CALL_OW 72
41273: ST_TO_ADDR
41274: GO 41277
41276: POP
// if i = 1 then
41277: LD_VAR 0 8
41281: PUSH
41282: LD_INT 1
41284: EQUAL
41285: IFFALSE 41396
// begin tmp := [ ] ;
41287: LD_ADDR_VAR 0 19
41291: PUSH
41292: EMPTY
41293: ST_TO_ADDR
// for j in f do
41294: LD_ADDR_VAR 0 9
41298: PUSH
41299: LD_VAR 0 12
41303: PUSH
41304: FOR_IN
41305: IFFALSE 41378
// if GetBType ( j ) = b_bunker then
41307: LD_VAR 0 9
41311: PPUSH
41312: CALL_OW 266
41316: PUSH
41317: LD_INT 32
41319: EQUAL
41320: IFFALSE 41347
// tmp := Insert ( tmp , 1 , j ) else
41322: LD_ADDR_VAR 0 19
41326: PUSH
41327: LD_VAR 0 19
41331: PPUSH
41332: LD_INT 1
41334: PPUSH
41335: LD_VAR 0 9
41339: PPUSH
41340: CALL_OW 2
41344: ST_TO_ADDR
41345: GO 41376
// tmp := Insert ( tmp , tmp + 1 , j ) ;
41347: LD_ADDR_VAR 0 19
41351: PUSH
41352: LD_VAR 0 19
41356: PPUSH
41357: LD_VAR 0 19
41361: PUSH
41362: LD_INT 1
41364: PLUS
41365: PPUSH
41366: LD_VAR 0 9
41370: PPUSH
41371: CALL_OW 2
41375: ST_TO_ADDR
41376: GO 41304
41378: POP
41379: POP
// if tmp then
41380: LD_VAR 0 19
41384: IFFALSE 41396
// f := tmp ;
41386: LD_ADDR_VAR 0 12
41390: PUSH
41391: LD_VAR 0 19
41395: ST_TO_ADDR
// end ; x := personel [ i ] ;
41396: LD_ADDR_VAR 0 13
41400: PUSH
41401: LD_VAR 0 6
41405: PUSH
41406: LD_VAR 0 8
41410: ARRAY
41411: ST_TO_ADDR
// if x = - 1 then
41412: LD_VAR 0 13
41416: PUSH
41417: LD_INT 1
41419: NEG
41420: EQUAL
41421: IFFALSE 41630
// begin for j in f do
41423: LD_ADDR_VAR 0 9
41427: PUSH
41428: LD_VAR 0 12
41432: PUSH
41433: FOR_IN
41434: IFFALSE 41626
// repeat InitHc ;
41436: CALL_OW 19
// if GetBType ( j ) = b_barracks then
41440: LD_VAR 0 9
41444: PPUSH
41445: CALL_OW 266
41449: PUSH
41450: LD_INT 5
41452: EQUAL
41453: IFFALSE 41523
// begin if UnitsInside ( j ) < 3 then
41455: LD_VAR 0 9
41459: PPUSH
41460: CALL_OW 313
41464: PUSH
41465: LD_INT 3
41467: LESS
41468: IFFALSE 41504
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41470: LD_INT 0
41472: PPUSH
41473: LD_INT 5
41475: PUSH
41476: LD_INT 8
41478: PUSH
41479: LD_INT 9
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: LIST
41486: PUSH
41487: LD_VAR 0 17
41491: ARRAY
41492: PPUSH
41493: LD_VAR 0 4
41497: PPUSH
41498: CALL_OW 380
41502: GO 41521
// PrepareHuman ( false , i , skill ) ;
41504: LD_INT 0
41506: PPUSH
41507: LD_VAR 0 8
41511: PPUSH
41512: LD_VAR 0 4
41516: PPUSH
41517: CALL_OW 380
// end else
41521: GO 41540
// PrepareHuman ( false , i , skill ) ;
41523: LD_INT 0
41525: PPUSH
41526: LD_VAR 0 8
41530: PPUSH
41531: LD_VAR 0 4
41535: PPUSH
41536: CALL_OW 380
// un := CreateHuman ;
41540: LD_ADDR_VAR 0 14
41544: PUSH
41545: CALL_OW 44
41549: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41550: LD_ADDR_VAR 0 7
41554: PUSH
41555: LD_VAR 0 7
41559: PPUSH
41560: LD_INT 1
41562: PPUSH
41563: LD_VAR 0 14
41567: PPUSH
41568: CALL_OW 2
41572: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41573: LD_VAR 0 14
41577: PPUSH
41578: LD_VAR 0 9
41582: PPUSH
41583: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41587: LD_VAR 0 9
41591: PPUSH
41592: CALL_OW 313
41596: PUSH
41597: LD_INT 6
41599: EQUAL
41600: PUSH
41601: LD_VAR 0 9
41605: PPUSH
41606: CALL_OW 266
41610: PUSH
41611: LD_INT 32
41613: PUSH
41614: LD_INT 31
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: IN
41621: OR
41622: IFFALSE 41436
41624: GO 41433
41626: POP
41627: POP
// end else
41628: GO 42010
// for j = 1 to x do
41630: LD_ADDR_VAR 0 9
41634: PUSH
41635: DOUBLE
41636: LD_INT 1
41638: DEC
41639: ST_TO_ADDR
41640: LD_VAR 0 13
41644: PUSH
41645: FOR_TO
41646: IFFALSE 42008
// begin InitHc ;
41648: CALL_OW 19
// if not f then
41652: LD_VAR 0 12
41656: NOT
41657: IFFALSE 41746
// begin PrepareHuman ( false , i , skill ) ;
41659: LD_INT 0
41661: PPUSH
41662: LD_VAR 0 8
41666: PPUSH
41667: LD_VAR 0 4
41671: PPUSH
41672: CALL_OW 380
// un := CreateHuman ;
41676: LD_ADDR_VAR 0 14
41680: PUSH
41681: CALL_OW 44
41685: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41686: LD_ADDR_VAR 0 7
41690: PUSH
41691: LD_VAR 0 7
41695: PPUSH
41696: LD_INT 1
41698: PPUSH
41699: LD_VAR 0 14
41703: PPUSH
41704: CALL_OW 2
41708: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41709: LD_VAR 0 14
41713: PPUSH
41714: LD_VAR 0 1
41718: PPUSH
41719: CALL_OW 250
41723: PPUSH
41724: LD_VAR 0 1
41728: PPUSH
41729: CALL_OW 251
41733: PPUSH
41734: LD_INT 10
41736: PPUSH
41737: LD_INT 0
41739: PPUSH
41740: CALL_OW 50
// continue ;
41744: GO 41645
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41746: LD_VAR 0 12
41750: PUSH
41751: LD_INT 1
41753: ARRAY
41754: PPUSH
41755: CALL_OW 313
41759: PUSH
41760: LD_VAR 0 12
41764: PUSH
41765: LD_INT 1
41767: ARRAY
41768: PPUSH
41769: CALL_OW 266
41773: PUSH
41774: LD_INT 32
41776: PUSH
41777: LD_INT 31
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: IN
41784: AND
41785: PUSH
41786: LD_VAR 0 12
41790: PUSH
41791: LD_INT 1
41793: ARRAY
41794: PPUSH
41795: CALL_OW 313
41799: PUSH
41800: LD_INT 6
41802: EQUAL
41803: OR
41804: IFFALSE 41824
// f := Delete ( f , 1 ) ;
41806: LD_ADDR_VAR 0 12
41810: PUSH
41811: LD_VAR 0 12
41815: PPUSH
41816: LD_INT 1
41818: PPUSH
41819: CALL_OW 3
41823: ST_TO_ADDR
// if not f then
41824: LD_VAR 0 12
41828: NOT
41829: IFFALSE 41847
// begin x := x + 2 ;
41831: LD_ADDR_VAR 0 13
41835: PUSH
41836: LD_VAR 0 13
41840: PUSH
41841: LD_INT 2
41843: PLUS
41844: ST_TO_ADDR
// continue ;
41845: GO 41645
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41847: LD_VAR 0 12
41851: PUSH
41852: LD_INT 1
41854: ARRAY
41855: PPUSH
41856: CALL_OW 266
41860: PUSH
41861: LD_INT 5
41863: EQUAL
41864: IFFALSE 41938
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41866: LD_VAR 0 12
41870: PUSH
41871: LD_INT 1
41873: ARRAY
41874: PPUSH
41875: CALL_OW 313
41879: PUSH
41880: LD_INT 3
41882: LESS
41883: IFFALSE 41919
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41885: LD_INT 0
41887: PPUSH
41888: LD_INT 5
41890: PUSH
41891: LD_INT 8
41893: PUSH
41894: LD_INT 9
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: LIST
41901: PUSH
41902: LD_VAR 0 17
41906: ARRAY
41907: PPUSH
41908: LD_VAR 0 4
41912: PPUSH
41913: CALL_OW 380
41917: GO 41936
// PrepareHuman ( false , i , skill ) ;
41919: LD_INT 0
41921: PPUSH
41922: LD_VAR 0 8
41926: PPUSH
41927: LD_VAR 0 4
41931: PPUSH
41932: CALL_OW 380
// end else
41936: GO 41955
// PrepareHuman ( false , i , skill ) ;
41938: LD_INT 0
41940: PPUSH
41941: LD_VAR 0 8
41945: PPUSH
41946: LD_VAR 0 4
41950: PPUSH
41951: CALL_OW 380
// un := CreateHuman ;
41955: LD_ADDR_VAR 0 14
41959: PUSH
41960: CALL_OW 44
41964: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41965: LD_ADDR_VAR 0 7
41969: PUSH
41970: LD_VAR 0 7
41974: PPUSH
41975: LD_INT 1
41977: PPUSH
41978: LD_VAR 0 14
41982: PPUSH
41983: CALL_OW 2
41987: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41988: LD_VAR 0 14
41992: PPUSH
41993: LD_VAR 0 12
41997: PUSH
41998: LD_INT 1
42000: ARRAY
42001: PPUSH
42002: CALL_OW 52
// end ;
42006: GO 41645
42008: POP
42009: POP
// end ;
42010: GO 40947
42012: POP
42013: POP
// result := result ^ buildings ;
42014: LD_ADDR_VAR 0 7
42018: PUSH
42019: LD_VAR 0 7
42023: PUSH
42024: LD_VAR 0 18
42028: ADD
42029: ST_TO_ADDR
// end else
42030: GO 42173
// begin for i = 1 to personel do
42032: LD_ADDR_VAR 0 8
42036: PUSH
42037: DOUBLE
42038: LD_INT 1
42040: DEC
42041: ST_TO_ADDR
42042: LD_VAR 0 6
42046: PUSH
42047: FOR_TO
42048: IFFALSE 42171
// begin if i > 4 then
42050: LD_VAR 0 8
42054: PUSH
42055: LD_INT 4
42057: GREATER
42058: IFFALSE 42062
// break ;
42060: GO 42171
// x := personel [ i ] ;
42062: LD_ADDR_VAR 0 13
42066: PUSH
42067: LD_VAR 0 6
42071: PUSH
42072: LD_VAR 0 8
42076: ARRAY
42077: ST_TO_ADDR
// if x = - 1 then
42078: LD_VAR 0 13
42082: PUSH
42083: LD_INT 1
42085: NEG
42086: EQUAL
42087: IFFALSE 42091
// continue ;
42089: GO 42047
// PrepareHuman ( false , i , skill ) ;
42091: LD_INT 0
42093: PPUSH
42094: LD_VAR 0 8
42098: PPUSH
42099: LD_VAR 0 4
42103: PPUSH
42104: CALL_OW 380
// un := CreateHuman ;
42108: LD_ADDR_VAR 0 14
42112: PUSH
42113: CALL_OW 44
42117: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42118: LD_VAR 0 14
42122: PPUSH
42123: LD_VAR 0 1
42127: PPUSH
42128: CALL_OW 250
42132: PPUSH
42133: LD_VAR 0 1
42137: PPUSH
42138: CALL_OW 251
42142: PPUSH
42143: LD_INT 10
42145: PPUSH
42146: LD_INT 0
42148: PPUSH
42149: CALL_OW 50
// result := result ^ un ;
42153: LD_ADDR_VAR 0 7
42157: PUSH
42158: LD_VAR 0 7
42162: PUSH
42163: LD_VAR 0 14
42167: ADD
42168: ST_TO_ADDR
// end ;
42169: GO 42047
42171: POP
42172: POP
// end ; end ;
42173: LD_VAR 0 7
42177: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
42178: LD_INT 0
42180: PPUSH
42181: PPUSH
42182: PPUSH
42183: PPUSH
42184: PPUSH
42185: PPUSH
42186: PPUSH
42187: PPUSH
42188: PPUSH
42189: PPUSH
42190: PPUSH
42191: PPUSH
42192: PPUSH
42193: PPUSH
42194: PPUSH
42195: PPUSH
// result := false ;
42196: LD_ADDR_VAR 0 3
42200: PUSH
42201: LD_INT 0
42203: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
42204: LD_VAR 0 1
42208: NOT
42209: PUSH
42210: LD_VAR 0 1
42214: PPUSH
42215: CALL_OW 266
42219: PUSH
42220: LD_INT 32
42222: PUSH
42223: LD_INT 33
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: IN
42230: NOT
42231: OR
42232: IFFALSE 42236
// exit ;
42234: GO 43372
// nat := GetNation ( tower ) ;
42236: LD_ADDR_VAR 0 12
42240: PUSH
42241: LD_VAR 0 1
42245: PPUSH
42246: CALL_OW 248
42250: ST_TO_ADDR
// side := GetSide ( tower ) ;
42251: LD_ADDR_VAR 0 16
42255: PUSH
42256: LD_VAR 0 1
42260: PPUSH
42261: CALL_OW 255
42265: ST_TO_ADDR
// x := GetX ( tower ) ;
42266: LD_ADDR_VAR 0 10
42270: PUSH
42271: LD_VAR 0 1
42275: PPUSH
42276: CALL_OW 250
42280: ST_TO_ADDR
// y := GetY ( tower ) ;
42281: LD_ADDR_VAR 0 11
42285: PUSH
42286: LD_VAR 0 1
42290: PPUSH
42291: CALL_OW 251
42295: ST_TO_ADDR
// if not x or not y then
42296: LD_VAR 0 10
42300: NOT
42301: PUSH
42302: LD_VAR 0 11
42306: NOT
42307: OR
42308: IFFALSE 42312
// exit ;
42310: GO 43372
// weapon := 0 ;
42312: LD_ADDR_VAR 0 18
42316: PUSH
42317: LD_INT 0
42319: ST_TO_ADDR
// fac_list := [ ] ;
42320: LD_ADDR_VAR 0 17
42324: PUSH
42325: EMPTY
42326: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
42327: LD_ADDR_VAR 0 6
42331: PUSH
42332: LD_VAR 0 1
42336: PPUSH
42337: CALL_OW 274
42341: PPUSH
42342: LD_VAR 0 2
42346: PPUSH
42347: CALL 39950 0 2
42351: PPUSH
42352: LD_INT 30
42354: PUSH
42355: LD_INT 3
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PPUSH
42362: CALL_OW 72
42366: ST_TO_ADDR
// if not factories then
42367: LD_VAR 0 6
42371: NOT
42372: IFFALSE 42376
// exit ;
42374: GO 43372
// for i in factories do
42376: LD_ADDR_VAR 0 8
42380: PUSH
42381: LD_VAR 0 6
42385: PUSH
42386: FOR_IN
42387: IFFALSE 42412
// fac_list := fac_list union AvailableWeaponList ( i ) ;
42389: LD_ADDR_VAR 0 17
42393: PUSH
42394: LD_VAR 0 17
42398: PUSH
42399: LD_VAR 0 8
42403: PPUSH
42404: CALL_OW 478
42408: UNION
42409: ST_TO_ADDR
42410: GO 42386
42412: POP
42413: POP
// if not fac_list then
42414: LD_VAR 0 17
42418: NOT
42419: IFFALSE 42423
// exit ;
42421: GO 43372
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
42423: LD_ADDR_VAR 0 5
42427: PUSH
42428: LD_INT 4
42430: PUSH
42431: LD_INT 5
42433: PUSH
42434: LD_INT 9
42436: PUSH
42437: LD_INT 10
42439: PUSH
42440: LD_INT 6
42442: PUSH
42443: LD_INT 7
42445: PUSH
42446: LD_INT 11
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 27
42460: PUSH
42461: LD_INT 28
42463: PUSH
42464: LD_INT 26
42466: PUSH
42467: LD_INT 30
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: PUSH
42476: LD_INT 43
42478: PUSH
42479: LD_INT 44
42481: PUSH
42482: LD_INT 46
42484: PUSH
42485: LD_INT 45
42487: PUSH
42488: LD_INT 47
42490: PUSH
42491: LD_INT 49
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: LIST
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: LIST
42506: PUSH
42507: LD_VAR 0 12
42511: ARRAY
42512: ST_TO_ADDR
// for i in list do
42513: LD_ADDR_VAR 0 8
42517: PUSH
42518: LD_VAR 0 5
42522: PUSH
42523: FOR_IN
42524: IFFALSE 42557
// if not i in fac_list then
42526: LD_VAR 0 8
42530: PUSH
42531: LD_VAR 0 17
42535: IN
42536: NOT
42537: IFFALSE 42555
// list := list diff i ;
42539: LD_ADDR_VAR 0 5
42543: PUSH
42544: LD_VAR 0 5
42548: PUSH
42549: LD_VAR 0 8
42553: DIFF
42554: ST_TO_ADDR
42555: GO 42523
42557: POP
42558: POP
// if not list then
42559: LD_VAR 0 5
42563: NOT
42564: IFFALSE 42568
// exit ;
42566: GO 43372
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42568: LD_VAR 0 12
42572: PUSH
42573: LD_INT 3
42575: EQUAL
42576: PUSH
42577: LD_INT 49
42579: PUSH
42580: LD_VAR 0 5
42584: IN
42585: AND
42586: PUSH
42587: LD_INT 31
42589: PPUSH
42590: LD_VAR 0 16
42594: PPUSH
42595: CALL_OW 321
42599: PUSH
42600: LD_INT 2
42602: EQUAL
42603: AND
42604: IFFALSE 42664
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42606: LD_INT 22
42608: PUSH
42609: LD_VAR 0 16
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 35
42620: PUSH
42621: LD_INT 49
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: LD_INT 91
42630: PUSH
42631: LD_VAR 0 1
42635: PUSH
42636: LD_INT 10
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: LIST
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: LIST
42648: PPUSH
42649: CALL_OW 69
42653: NOT
42654: IFFALSE 42664
// weapon := ru_time_lapser ;
42656: LD_ADDR_VAR 0 18
42660: PUSH
42661: LD_INT 49
42663: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42664: LD_VAR 0 12
42668: PUSH
42669: LD_INT 1
42671: PUSH
42672: LD_INT 2
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: IN
42679: PUSH
42680: LD_INT 11
42682: PUSH
42683: LD_VAR 0 5
42687: IN
42688: PUSH
42689: LD_INT 30
42691: PUSH
42692: LD_VAR 0 5
42696: IN
42697: OR
42698: AND
42699: PUSH
42700: LD_INT 6
42702: PPUSH
42703: LD_VAR 0 16
42707: PPUSH
42708: CALL_OW 321
42712: PUSH
42713: LD_INT 2
42715: EQUAL
42716: AND
42717: IFFALSE 42882
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42719: LD_INT 22
42721: PUSH
42722: LD_VAR 0 16
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 2
42733: PUSH
42734: LD_INT 35
42736: PUSH
42737: LD_INT 11
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: PUSH
42744: LD_INT 35
42746: PUSH
42747: LD_INT 30
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 91
42761: PUSH
42762: LD_VAR 0 1
42766: PUSH
42767: LD_INT 18
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: LIST
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: LIST
42779: PPUSH
42780: CALL_OW 69
42784: NOT
42785: PUSH
42786: LD_INT 22
42788: PUSH
42789: LD_VAR 0 16
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: PUSH
42798: LD_INT 2
42800: PUSH
42801: LD_INT 30
42803: PUSH
42804: LD_INT 32
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 30
42813: PUSH
42814: LD_INT 33
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: LIST
42825: PUSH
42826: LD_INT 91
42828: PUSH
42829: LD_VAR 0 1
42833: PUSH
42834: LD_INT 12
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: LIST
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: LIST
42846: PUSH
42847: EMPTY
42848: LIST
42849: PPUSH
42850: CALL_OW 69
42854: PUSH
42855: LD_INT 2
42857: GREATER
42858: AND
42859: IFFALSE 42882
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42861: LD_ADDR_VAR 0 18
42865: PUSH
42866: LD_INT 11
42868: PUSH
42869: LD_INT 30
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_VAR 0 12
42880: ARRAY
42881: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42882: LD_VAR 0 18
42886: NOT
42887: PUSH
42888: LD_INT 40
42890: PPUSH
42891: LD_VAR 0 16
42895: PPUSH
42896: CALL_OW 321
42900: PUSH
42901: LD_INT 2
42903: EQUAL
42904: AND
42905: PUSH
42906: LD_INT 7
42908: PUSH
42909: LD_VAR 0 5
42913: IN
42914: PUSH
42915: LD_INT 28
42917: PUSH
42918: LD_VAR 0 5
42922: IN
42923: OR
42924: PUSH
42925: LD_INT 45
42927: PUSH
42928: LD_VAR 0 5
42932: IN
42933: OR
42934: AND
42935: IFFALSE 43189
// begin hex := GetHexInfo ( x , y ) ;
42937: LD_ADDR_VAR 0 4
42941: PUSH
42942: LD_VAR 0 10
42946: PPUSH
42947: LD_VAR 0 11
42951: PPUSH
42952: CALL_OW 546
42956: ST_TO_ADDR
// if hex [ 1 ] then
42957: LD_VAR 0 4
42961: PUSH
42962: LD_INT 1
42964: ARRAY
42965: IFFALSE 42969
// exit ;
42967: GO 43372
// height := hex [ 2 ] ;
42969: LD_ADDR_VAR 0 15
42973: PUSH
42974: LD_VAR 0 4
42978: PUSH
42979: LD_INT 2
42981: ARRAY
42982: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
42983: LD_ADDR_VAR 0 14
42987: PUSH
42988: LD_INT 0
42990: PUSH
42991: LD_INT 2
42993: PUSH
42994: LD_INT 3
42996: PUSH
42997: LD_INT 5
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: ST_TO_ADDR
// for i in tmp do
43006: LD_ADDR_VAR 0 8
43010: PUSH
43011: LD_VAR 0 14
43015: PUSH
43016: FOR_IN
43017: IFFALSE 43187
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43019: LD_ADDR_VAR 0 9
43023: PUSH
43024: LD_VAR 0 10
43028: PPUSH
43029: LD_VAR 0 8
43033: PPUSH
43034: LD_INT 5
43036: PPUSH
43037: CALL_OW 272
43041: PUSH
43042: LD_VAR 0 11
43046: PPUSH
43047: LD_VAR 0 8
43051: PPUSH
43052: LD_INT 5
43054: PPUSH
43055: CALL_OW 273
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
43064: LD_VAR 0 9
43068: PUSH
43069: LD_INT 1
43071: ARRAY
43072: PPUSH
43073: LD_VAR 0 9
43077: PUSH
43078: LD_INT 2
43080: ARRAY
43081: PPUSH
43082: CALL_OW 488
43086: IFFALSE 43185
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
43088: LD_ADDR_VAR 0 4
43092: PUSH
43093: LD_VAR 0 9
43097: PUSH
43098: LD_INT 1
43100: ARRAY
43101: PPUSH
43102: LD_VAR 0 9
43106: PUSH
43107: LD_INT 2
43109: ARRAY
43110: PPUSH
43111: CALL_OW 546
43115: ST_TO_ADDR
// if hex [ 1 ] then
43116: LD_VAR 0 4
43120: PUSH
43121: LD_INT 1
43123: ARRAY
43124: IFFALSE 43128
// continue ;
43126: GO 43016
// h := hex [ 2 ] ;
43128: LD_ADDR_VAR 0 13
43132: PUSH
43133: LD_VAR 0 4
43137: PUSH
43138: LD_INT 2
43140: ARRAY
43141: ST_TO_ADDR
// if h + 7 < height then
43142: LD_VAR 0 13
43146: PUSH
43147: LD_INT 7
43149: PLUS
43150: PUSH
43151: LD_VAR 0 15
43155: LESS
43156: IFFALSE 43185
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43158: LD_ADDR_VAR 0 18
43162: PUSH
43163: LD_INT 7
43165: PUSH
43166: LD_INT 28
43168: PUSH
43169: LD_INT 45
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: LIST
43176: PUSH
43177: LD_VAR 0 12
43181: ARRAY
43182: ST_TO_ADDR
// break ;
43183: GO 43187
// end ; end ; end ;
43185: GO 43016
43187: POP
43188: POP
// end ; if not weapon then
43189: LD_VAR 0 18
43193: NOT
43194: IFFALSE 43254
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
43196: LD_ADDR_VAR 0 5
43200: PUSH
43201: LD_VAR 0 5
43205: PUSH
43206: LD_INT 11
43208: PUSH
43209: LD_INT 30
43211: PUSH
43212: LD_INT 49
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: LIST
43219: DIFF
43220: ST_TO_ADDR
// if not list then
43221: LD_VAR 0 5
43225: NOT
43226: IFFALSE 43230
// exit ;
43228: GO 43372
// weapon := list [ rand ( 1 , list ) ] ;
43230: LD_ADDR_VAR 0 18
43234: PUSH
43235: LD_VAR 0 5
43239: PUSH
43240: LD_INT 1
43242: PPUSH
43243: LD_VAR 0 5
43247: PPUSH
43248: CALL_OW 12
43252: ARRAY
43253: ST_TO_ADDR
// end ; if weapon then
43254: LD_VAR 0 18
43258: IFFALSE 43372
// begin tmp := CostOfWeapon ( weapon ) ;
43260: LD_ADDR_VAR 0 14
43264: PUSH
43265: LD_VAR 0 18
43269: PPUSH
43270: CALL_OW 451
43274: ST_TO_ADDR
// j := GetBase ( tower ) ;
43275: LD_ADDR_VAR 0 9
43279: PUSH
43280: LD_VAR 0 1
43284: PPUSH
43285: CALL_OW 274
43289: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
43290: LD_VAR 0 9
43294: PPUSH
43295: LD_INT 1
43297: PPUSH
43298: CALL_OW 275
43302: PUSH
43303: LD_VAR 0 14
43307: PUSH
43308: LD_INT 1
43310: ARRAY
43311: GREATEREQUAL
43312: PUSH
43313: LD_VAR 0 9
43317: PPUSH
43318: LD_INT 2
43320: PPUSH
43321: CALL_OW 275
43325: PUSH
43326: LD_VAR 0 14
43330: PUSH
43331: LD_INT 2
43333: ARRAY
43334: GREATEREQUAL
43335: AND
43336: PUSH
43337: LD_VAR 0 9
43341: PPUSH
43342: LD_INT 3
43344: PPUSH
43345: CALL_OW 275
43349: PUSH
43350: LD_VAR 0 14
43354: PUSH
43355: LD_INT 3
43357: ARRAY
43358: GREATEREQUAL
43359: AND
43360: IFFALSE 43372
// result := weapon ;
43362: LD_ADDR_VAR 0 3
43366: PUSH
43367: LD_VAR 0 18
43371: ST_TO_ADDR
// end ; end ;
43372: LD_VAR 0 3
43376: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
43377: LD_INT 0
43379: PPUSH
43380: PPUSH
// result := true ;
43381: LD_ADDR_VAR 0 3
43385: PUSH
43386: LD_INT 1
43388: ST_TO_ADDR
// if array1 = array2 then
43389: LD_VAR 0 1
43393: PUSH
43394: LD_VAR 0 2
43398: EQUAL
43399: IFFALSE 43459
// begin for i = 1 to array1 do
43401: LD_ADDR_VAR 0 4
43405: PUSH
43406: DOUBLE
43407: LD_INT 1
43409: DEC
43410: ST_TO_ADDR
43411: LD_VAR 0 1
43415: PUSH
43416: FOR_TO
43417: IFFALSE 43455
// if array1 [ i ] <> array2 [ i ] then
43419: LD_VAR 0 1
43423: PUSH
43424: LD_VAR 0 4
43428: ARRAY
43429: PUSH
43430: LD_VAR 0 2
43434: PUSH
43435: LD_VAR 0 4
43439: ARRAY
43440: NONEQUAL
43441: IFFALSE 43453
// begin result := false ;
43443: LD_ADDR_VAR 0 3
43447: PUSH
43448: LD_INT 0
43450: ST_TO_ADDR
// break ;
43451: GO 43455
// end ;
43453: GO 43416
43455: POP
43456: POP
// end else
43457: GO 43467
// result := false ;
43459: LD_ADDR_VAR 0 3
43463: PUSH
43464: LD_INT 0
43466: ST_TO_ADDR
// end ;
43467: LD_VAR 0 3
43471: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43472: LD_INT 0
43474: PPUSH
43475: PPUSH
43476: PPUSH
// pom := GetBase ( fac ) ;
43477: LD_ADDR_VAR 0 5
43481: PUSH
43482: LD_VAR 0 1
43486: PPUSH
43487: CALL_OW 274
43491: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43492: LD_ADDR_VAR 0 4
43496: PUSH
43497: LD_VAR 0 2
43501: PUSH
43502: LD_INT 1
43504: ARRAY
43505: PPUSH
43506: LD_VAR 0 2
43510: PUSH
43511: LD_INT 2
43513: ARRAY
43514: PPUSH
43515: LD_VAR 0 2
43519: PUSH
43520: LD_INT 3
43522: ARRAY
43523: PPUSH
43524: LD_VAR 0 2
43528: PUSH
43529: LD_INT 4
43531: ARRAY
43532: PPUSH
43533: CALL_OW 449
43537: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43538: LD_ADDR_VAR 0 3
43542: PUSH
43543: LD_VAR 0 5
43547: PPUSH
43548: LD_INT 1
43550: PPUSH
43551: CALL_OW 275
43555: PUSH
43556: LD_VAR 0 4
43560: PUSH
43561: LD_INT 1
43563: ARRAY
43564: GREATEREQUAL
43565: PUSH
43566: LD_VAR 0 5
43570: PPUSH
43571: LD_INT 2
43573: PPUSH
43574: CALL_OW 275
43578: PUSH
43579: LD_VAR 0 4
43583: PUSH
43584: LD_INT 2
43586: ARRAY
43587: GREATEREQUAL
43588: AND
43589: PUSH
43590: LD_VAR 0 5
43594: PPUSH
43595: LD_INT 3
43597: PPUSH
43598: CALL_OW 275
43602: PUSH
43603: LD_VAR 0 4
43607: PUSH
43608: LD_INT 3
43610: ARRAY
43611: GREATEREQUAL
43612: AND
43613: ST_TO_ADDR
// end ;
43614: LD_VAR 0 3
43618: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43619: LD_INT 0
43621: PPUSH
43622: PPUSH
43623: PPUSH
43624: PPUSH
// pom := GetBase ( building ) ;
43625: LD_ADDR_VAR 0 3
43629: PUSH
43630: LD_VAR 0 1
43634: PPUSH
43635: CALL_OW 274
43639: ST_TO_ADDR
// if not pom then
43640: LD_VAR 0 3
43644: NOT
43645: IFFALSE 43649
// exit ;
43647: GO 43819
// btype := GetBType ( building ) ;
43649: LD_ADDR_VAR 0 5
43653: PUSH
43654: LD_VAR 0 1
43658: PPUSH
43659: CALL_OW 266
43663: ST_TO_ADDR
// if btype = b_armoury then
43664: LD_VAR 0 5
43668: PUSH
43669: LD_INT 4
43671: EQUAL
43672: IFFALSE 43682
// btype := b_barracks ;
43674: LD_ADDR_VAR 0 5
43678: PUSH
43679: LD_INT 5
43681: ST_TO_ADDR
// if btype = b_depot then
43682: LD_VAR 0 5
43686: PUSH
43687: LD_INT 0
43689: EQUAL
43690: IFFALSE 43700
// btype := b_warehouse ;
43692: LD_ADDR_VAR 0 5
43696: PUSH
43697: LD_INT 1
43699: ST_TO_ADDR
// if btype = b_workshop then
43700: LD_VAR 0 5
43704: PUSH
43705: LD_INT 2
43707: EQUAL
43708: IFFALSE 43718
// btype := b_factory ;
43710: LD_ADDR_VAR 0 5
43714: PUSH
43715: LD_INT 3
43717: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43718: LD_ADDR_VAR 0 4
43722: PUSH
43723: LD_VAR 0 5
43727: PPUSH
43728: LD_VAR 0 1
43732: PPUSH
43733: CALL_OW 248
43737: PPUSH
43738: CALL_OW 450
43742: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43743: LD_ADDR_VAR 0 2
43747: PUSH
43748: LD_VAR 0 3
43752: PPUSH
43753: LD_INT 1
43755: PPUSH
43756: CALL_OW 275
43760: PUSH
43761: LD_VAR 0 4
43765: PUSH
43766: LD_INT 1
43768: ARRAY
43769: GREATEREQUAL
43770: PUSH
43771: LD_VAR 0 3
43775: PPUSH
43776: LD_INT 2
43778: PPUSH
43779: CALL_OW 275
43783: PUSH
43784: LD_VAR 0 4
43788: PUSH
43789: LD_INT 2
43791: ARRAY
43792: GREATEREQUAL
43793: AND
43794: PUSH
43795: LD_VAR 0 3
43799: PPUSH
43800: LD_INT 3
43802: PPUSH
43803: CALL_OW 275
43807: PUSH
43808: LD_VAR 0 4
43812: PUSH
43813: LD_INT 3
43815: ARRAY
43816: GREATEREQUAL
43817: AND
43818: ST_TO_ADDR
// end ;
43819: LD_VAR 0 2
43823: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43824: LD_INT 0
43826: PPUSH
43827: PPUSH
43828: PPUSH
// pom := GetBase ( building ) ;
43829: LD_ADDR_VAR 0 4
43833: PUSH
43834: LD_VAR 0 1
43838: PPUSH
43839: CALL_OW 274
43843: ST_TO_ADDR
// if not pom then
43844: LD_VAR 0 4
43848: NOT
43849: IFFALSE 43853
// exit ;
43851: GO 43954
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43853: LD_ADDR_VAR 0 5
43857: PUSH
43858: LD_VAR 0 2
43862: PPUSH
43863: LD_VAR 0 1
43867: PPUSH
43868: CALL_OW 248
43872: PPUSH
43873: CALL_OW 450
43877: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43878: LD_ADDR_VAR 0 3
43882: PUSH
43883: LD_VAR 0 4
43887: PPUSH
43888: LD_INT 1
43890: PPUSH
43891: CALL_OW 275
43895: PUSH
43896: LD_VAR 0 5
43900: PUSH
43901: LD_INT 1
43903: ARRAY
43904: GREATEREQUAL
43905: PUSH
43906: LD_VAR 0 4
43910: PPUSH
43911: LD_INT 2
43913: PPUSH
43914: CALL_OW 275
43918: PUSH
43919: LD_VAR 0 5
43923: PUSH
43924: LD_INT 2
43926: ARRAY
43927: GREATEREQUAL
43928: AND
43929: PUSH
43930: LD_VAR 0 4
43934: PPUSH
43935: LD_INT 3
43937: PPUSH
43938: CALL_OW 275
43942: PUSH
43943: LD_VAR 0 5
43947: PUSH
43948: LD_INT 3
43950: ARRAY
43951: GREATEREQUAL
43952: AND
43953: ST_TO_ADDR
// end ;
43954: LD_VAR 0 3
43958: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
43959: LD_INT 0
43961: PPUSH
43962: PPUSH
43963: PPUSH
43964: PPUSH
43965: PPUSH
43966: PPUSH
43967: PPUSH
43968: PPUSH
43969: PPUSH
43970: PPUSH
// result := false ;
43971: LD_ADDR_VAR 0 6
43975: PUSH
43976: LD_INT 0
43978: ST_TO_ADDR
// if not base or not btype or not x or not y then
43979: LD_VAR 0 1
43983: NOT
43984: PUSH
43985: LD_VAR 0 2
43989: NOT
43990: OR
43991: PUSH
43992: LD_VAR 0 3
43996: NOT
43997: OR
43998: PUSH
43999: LD_VAR 0 4
44003: NOT
44004: OR
44005: IFFALSE 44009
// exit ;
44007: GO 44618
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
44009: LD_ADDR_VAR 0 12
44013: PUSH
44014: LD_VAR 0 2
44018: PPUSH
44019: LD_VAR 0 3
44023: PPUSH
44024: LD_VAR 0 4
44028: PPUSH
44029: LD_VAR 0 5
44033: PPUSH
44034: LD_VAR 0 1
44038: PUSH
44039: LD_INT 1
44041: ARRAY
44042: PPUSH
44043: CALL_OW 248
44047: PPUSH
44048: LD_INT 0
44050: PPUSH
44051: CALL 45455 0 6
44055: ST_TO_ADDR
// if not hexes then
44056: LD_VAR 0 12
44060: NOT
44061: IFFALSE 44065
// exit ;
44063: GO 44618
// for i = 1 to hexes do
44065: LD_ADDR_VAR 0 7
44069: PUSH
44070: DOUBLE
44071: LD_INT 1
44073: DEC
44074: ST_TO_ADDR
44075: LD_VAR 0 12
44079: PUSH
44080: FOR_TO
44081: IFFALSE 44616
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44083: LD_ADDR_VAR 0 11
44087: PUSH
44088: LD_VAR 0 12
44092: PUSH
44093: LD_VAR 0 7
44097: ARRAY
44098: PUSH
44099: LD_INT 1
44101: ARRAY
44102: PPUSH
44103: LD_VAR 0 12
44107: PUSH
44108: LD_VAR 0 7
44112: ARRAY
44113: PUSH
44114: LD_INT 2
44116: ARRAY
44117: PPUSH
44118: CALL_OW 428
44122: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
44123: LD_VAR 0 12
44127: PUSH
44128: LD_VAR 0 7
44132: ARRAY
44133: PUSH
44134: LD_INT 1
44136: ARRAY
44137: PPUSH
44138: LD_VAR 0 12
44142: PUSH
44143: LD_VAR 0 7
44147: ARRAY
44148: PUSH
44149: LD_INT 2
44151: ARRAY
44152: PPUSH
44153: CALL_OW 351
44157: PUSH
44158: LD_VAR 0 12
44162: PUSH
44163: LD_VAR 0 7
44167: ARRAY
44168: PUSH
44169: LD_INT 1
44171: ARRAY
44172: PPUSH
44173: LD_VAR 0 12
44177: PUSH
44178: LD_VAR 0 7
44182: ARRAY
44183: PUSH
44184: LD_INT 2
44186: ARRAY
44187: PPUSH
44188: CALL_OW 488
44192: NOT
44193: OR
44194: PUSH
44195: LD_VAR 0 11
44199: PPUSH
44200: CALL_OW 247
44204: PUSH
44205: LD_INT 3
44207: EQUAL
44208: OR
44209: IFFALSE 44215
// exit ;
44211: POP
44212: POP
44213: GO 44618
// if not tmp or not tmp in base then
44215: LD_VAR 0 11
44219: NOT
44220: PUSH
44221: LD_VAR 0 11
44225: PUSH
44226: LD_VAR 0 1
44230: IN
44231: NOT
44232: OR
44233: IFFALSE 44237
// continue ;
44235: GO 44080
// result := true ;
44237: LD_ADDR_VAR 0 6
44241: PUSH
44242: LD_INT 1
44244: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44245: LD_ADDR_VAR 0 15
44249: PUSH
44250: LD_VAR 0 1
44254: PPUSH
44255: LD_INT 22
44257: PUSH
44258: LD_VAR 0 11
44262: PPUSH
44263: CALL_OW 255
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: LD_INT 2
44274: PUSH
44275: LD_INT 30
44277: PUSH
44278: LD_INT 0
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 30
44287: PUSH
44288: LD_INT 1
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: LIST
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PPUSH
44304: CALL_OW 72
44308: ST_TO_ADDR
// if dep then
44309: LD_VAR 0 15
44313: IFFALSE 44449
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
44315: LD_ADDR_VAR 0 14
44319: PUSH
44320: LD_VAR 0 15
44324: PUSH
44325: LD_INT 1
44327: ARRAY
44328: PPUSH
44329: CALL_OW 250
44333: PPUSH
44334: LD_VAR 0 15
44338: PUSH
44339: LD_INT 1
44341: ARRAY
44342: PPUSH
44343: CALL_OW 254
44347: PPUSH
44348: LD_INT 5
44350: PPUSH
44351: CALL_OW 272
44355: PUSH
44356: LD_VAR 0 15
44360: PUSH
44361: LD_INT 1
44363: ARRAY
44364: PPUSH
44365: CALL_OW 251
44369: PPUSH
44370: LD_VAR 0 15
44374: PUSH
44375: LD_INT 1
44377: ARRAY
44378: PPUSH
44379: CALL_OW 254
44383: PPUSH
44384: LD_INT 5
44386: PPUSH
44387: CALL_OW 273
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44396: LD_VAR 0 14
44400: PUSH
44401: LD_INT 1
44403: ARRAY
44404: PPUSH
44405: LD_VAR 0 14
44409: PUSH
44410: LD_INT 2
44412: ARRAY
44413: PPUSH
44414: CALL_OW 488
44418: IFFALSE 44449
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44420: LD_VAR 0 11
44424: PPUSH
44425: LD_VAR 0 14
44429: PUSH
44430: LD_INT 1
44432: ARRAY
44433: PPUSH
44434: LD_VAR 0 14
44438: PUSH
44439: LD_INT 2
44441: ARRAY
44442: PPUSH
44443: CALL_OW 111
// continue ;
44447: GO 44080
// end ; end ; r := GetDir ( tmp ) ;
44449: LD_ADDR_VAR 0 13
44453: PUSH
44454: LD_VAR 0 11
44458: PPUSH
44459: CALL_OW 254
44463: ST_TO_ADDR
// if r = 5 then
44464: LD_VAR 0 13
44468: PUSH
44469: LD_INT 5
44471: EQUAL
44472: IFFALSE 44482
// r := 0 ;
44474: LD_ADDR_VAR 0 13
44478: PUSH
44479: LD_INT 0
44481: ST_TO_ADDR
// for j = r to 5 do
44482: LD_ADDR_VAR 0 8
44486: PUSH
44487: DOUBLE
44488: LD_VAR 0 13
44492: DEC
44493: ST_TO_ADDR
44494: LD_INT 5
44496: PUSH
44497: FOR_TO
44498: IFFALSE 44612
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44500: LD_ADDR_VAR 0 9
44504: PUSH
44505: LD_VAR 0 11
44509: PPUSH
44510: CALL_OW 250
44514: PPUSH
44515: LD_VAR 0 8
44519: PPUSH
44520: LD_INT 2
44522: PPUSH
44523: CALL_OW 272
44527: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44528: LD_ADDR_VAR 0 10
44532: PUSH
44533: LD_VAR 0 11
44537: PPUSH
44538: CALL_OW 251
44542: PPUSH
44543: LD_VAR 0 8
44547: PPUSH
44548: LD_INT 2
44550: PPUSH
44551: CALL_OW 273
44555: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44556: LD_VAR 0 9
44560: PPUSH
44561: LD_VAR 0 10
44565: PPUSH
44566: CALL_OW 488
44570: PUSH
44571: LD_VAR 0 9
44575: PPUSH
44576: LD_VAR 0 10
44580: PPUSH
44581: CALL_OW 428
44585: NOT
44586: AND
44587: IFFALSE 44610
// begin ComMoveXY ( tmp , _x , _y ) ;
44589: LD_VAR 0 11
44593: PPUSH
44594: LD_VAR 0 9
44598: PPUSH
44599: LD_VAR 0 10
44603: PPUSH
44604: CALL_OW 111
// break ;
44608: GO 44612
// end ; end ;
44610: GO 44497
44612: POP
44613: POP
// end ;
44614: GO 44080
44616: POP
44617: POP
// end ;
44618: LD_VAR 0 6
44622: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
44623: LD_INT 0
44625: PPUSH
44626: PPUSH
44627: PPUSH
44628: PPUSH
44629: PPUSH
44630: PPUSH
44631: PPUSH
44632: PPUSH
44633: PPUSH
44634: PPUSH
// result := false ;
44635: LD_ADDR_VAR 0 6
44639: PUSH
44640: LD_INT 0
44642: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44643: LD_VAR 0 1
44647: NOT
44648: PUSH
44649: LD_VAR 0 1
44653: PPUSH
44654: CALL_OW 266
44658: PUSH
44659: LD_INT 0
44661: PUSH
44662: LD_INT 1
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: IN
44669: NOT
44670: OR
44671: PUSH
44672: LD_VAR 0 2
44676: NOT
44677: OR
44678: PUSH
44679: LD_VAR 0 5
44683: PUSH
44684: LD_INT 0
44686: PUSH
44687: LD_INT 1
44689: PUSH
44690: LD_INT 2
44692: PUSH
44693: LD_INT 3
44695: PUSH
44696: LD_INT 4
44698: PUSH
44699: LD_INT 5
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: IN
44710: NOT
44711: OR
44712: PUSH
44713: LD_VAR 0 3
44717: PPUSH
44718: LD_VAR 0 4
44722: PPUSH
44723: CALL_OW 488
44727: NOT
44728: OR
44729: IFFALSE 44733
// exit ;
44731: GO 45450
// pom := GetBase ( depot ) ;
44733: LD_ADDR_VAR 0 10
44737: PUSH
44738: LD_VAR 0 1
44742: PPUSH
44743: CALL_OW 274
44747: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44748: LD_ADDR_VAR 0 11
44752: PUSH
44753: LD_VAR 0 2
44757: PPUSH
44758: LD_VAR 0 1
44762: PPUSH
44763: CALL_OW 248
44767: PPUSH
44768: CALL_OW 450
44772: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44773: LD_VAR 0 10
44777: PPUSH
44778: LD_INT 1
44780: PPUSH
44781: CALL_OW 275
44785: PUSH
44786: LD_VAR 0 11
44790: PUSH
44791: LD_INT 1
44793: ARRAY
44794: GREATEREQUAL
44795: PUSH
44796: LD_VAR 0 10
44800: PPUSH
44801: LD_INT 2
44803: PPUSH
44804: CALL_OW 275
44808: PUSH
44809: LD_VAR 0 11
44813: PUSH
44814: LD_INT 2
44816: ARRAY
44817: GREATEREQUAL
44818: AND
44819: PUSH
44820: LD_VAR 0 10
44824: PPUSH
44825: LD_INT 3
44827: PPUSH
44828: CALL_OW 275
44832: PUSH
44833: LD_VAR 0 11
44837: PUSH
44838: LD_INT 3
44840: ARRAY
44841: GREATEREQUAL
44842: AND
44843: NOT
44844: IFFALSE 44848
// exit ;
44846: GO 45450
// if GetBType ( depot ) = b_depot then
44848: LD_VAR 0 1
44852: PPUSH
44853: CALL_OW 266
44857: PUSH
44858: LD_INT 0
44860: EQUAL
44861: IFFALSE 44873
// dist := 28 else
44863: LD_ADDR_VAR 0 14
44867: PUSH
44868: LD_INT 28
44870: ST_TO_ADDR
44871: GO 44881
// dist := 36 ;
44873: LD_ADDR_VAR 0 14
44877: PUSH
44878: LD_INT 36
44880: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44881: LD_VAR 0 1
44885: PPUSH
44886: LD_VAR 0 3
44890: PPUSH
44891: LD_VAR 0 4
44895: PPUSH
44896: CALL_OW 297
44900: PUSH
44901: LD_VAR 0 14
44905: GREATER
44906: IFFALSE 44910
// exit ;
44908: GO 45450
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44910: LD_ADDR_VAR 0 12
44914: PUSH
44915: LD_VAR 0 2
44919: PPUSH
44920: LD_VAR 0 3
44924: PPUSH
44925: LD_VAR 0 4
44929: PPUSH
44930: LD_VAR 0 5
44934: PPUSH
44935: LD_VAR 0 1
44939: PPUSH
44940: CALL_OW 248
44944: PPUSH
44945: LD_INT 0
44947: PPUSH
44948: CALL 45455 0 6
44952: ST_TO_ADDR
// if not hexes then
44953: LD_VAR 0 12
44957: NOT
44958: IFFALSE 44962
// exit ;
44960: GO 45450
// hex := GetHexInfo ( x , y ) ;
44962: LD_ADDR_VAR 0 15
44966: PUSH
44967: LD_VAR 0 3
44971: PPUSH
44972: LD_VAR 0 4
44976: PPUSH
44977: CALL_OW 546
44981: ST_TO_ADDR
// if hex [ 1 ] then
44982: LD_VAR 0 15
44986: PUSH
44987: LD_INT 1
44989: ARRAY
44990: IFFALSE 44994
// exit ;
44992: GO 45450
// height := hex [ 2 ] ;
44994: LD_ADDR_VAR 0 13
44998: PUSH
44999: LD_VAR 0 15
45003: PUSH
45004: LD_INT 2
45006: ARRAY
45007: ST_TO_ADDR
// for i = 1 to hexes do
45008: LD_ADDR_VAR 0 7
45012: PUSH
45013: DOUBLE
45014: LD_INT 1
45016: DEC
45017: ST_TO_ADDR
45018: LD_VAR 0 12
45022: PUSH
45023: FOR_TO
45024: IFFALSE 45354
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45026: LD_VAR 0 12
45030: PUSH
45031: LD_VAR 0 7
45035: ARRAY
45036: PUSH
45037: LD_INT 1
45039: ARRAY
45040: PPUSH
45041: LD_VAR 0 12
45045: PUSH
45046: LD_VAR 0 7
45050: ARRAY
45051: PUSH
45052: LD_INT 2
45054: ARRAY
45055: PPUSH
45056: CALL_OW 488
45060: NOT
45061: PUSH
45062: LD_VAR 0 12
45066: PUSH
45067: LD_VAR 0 7
45071: ARRAY
45072: PUSH
45073: LD_INT 1
45075: ARRAY
45076: PPUSH
45077: LD_VAR 0 12
45081: PUSH
45082: LD_VAR 0 7
45086: ARRAY
45087: PUSH
45088: LD_INT 2
45090: ARRAY
45091: PPUSH
45092: CALL_OW 428
45096: PUSH
45097: LD_INT 0
45099: GREATER
45100: OR
45101: PUSH
45102: LD_VAR 0 12
45106: PUSH
45107: LD_VAR 0 7
45111: ARRAY
45112: PUSH
45113: LD_INT 1
45115: ARRAY
45116: PPUSH
45117: LD_VAR 0 12
45121: PUSH
45122: LD_VAR 0 7
45126: ARRAY
45127: PUSH
45128: LD_INT 2
45130: ARRAY
45131: PPUSH
45132: CALL_OW 351
45136: OR
45137: IFFALSE 45143
// exit ;
45139: POP
45140: POP
45141: GO 45450
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45143: LD_ADDR_VAR 0 8
45147: PUSH
45148: LD_VAR 0 12
45152: PUSH
45153: LD_VAR 0 7
45157: ARRAY
45158: PUSH
45159: LD_INT 1
45161: ARRAY
45162: PPUSH
45163: LD_VAR 0 12
45167: PUSH
45168: LD_VAR 0 7
45172: ARRAY
45173: PUSH
45174: LD_INT 2
45176: ARRAY
45177: PPUSH
45178: CALL_OW 546
45182: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
45183: LD_VAR 0 8
45187: PUSH
45188: LD_INT 1
45190: ARRAY
45191: PUSH
45192: LD_VAR 0 8
45196: PUSH
45197: LD_INT 2
45199: ARRAY
45200: PUSH
45201: LD_VAR 0 13
45205: PUSH
45206: LD_INT 2
45208: PLUS
45209: GREATER
45210: OR
45211: PUSH
45212: LD_VAR 0 8
45216: PUSH
45217: LD_INT 2
45219: ARRAY
45220: PUSH
45221: LD_VAR 0 13
45225: PUSH
45226: LD_INT 2
45228: MINUS
45229: LESS
45230: OR
45231: PUSH
45232: LD_VAR 0 8
45236: PUSH
45237: LD_INT 3
45239: ARRAY
45240: PUSH
45241: LD_INT 0
45243: PUSH
45244: LD_INT 8
45246: PUSH
45247: LD_INT 9
45249: PUSH
45250: LD_INT 10
45252: PUSH
45253: LD_INT 11
45255: PUSH
45256: LD_INT 12
45258: PUSH
45259: LD_INT 13
45261: PUSH
45262: LD_INT 16
45264: PUSH
45265: LD_INT 17
45267: PUSH
45268: LD_INT 18
45270: PUSH
45271: LD_INT 19
45273: PUSH
45274: LD_INT 20
45276: PUSH
45277: LD_INT 21
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: IN
45295: NOT
45296: OR
45297: PUSH
45298: LD_VAR 0 8
45302: PUSH
45303: LD_INT 5
45305: ARRAY
45306: NOT
45307: OR
45308: PUSH
45309: LD_VAR 0 8
45313: PUSH
45314: LD_INT 6
45316: ARRAY
45317: PUSH
45318: LD_INT 1
45320: PUSH
45321: LD_INT 2
45323: PUSH
45324: LD_INT 7
45326: PUSH
45327: LD_INT 9
45329: PUSH
45330: LD_INT 10
45332: PUSH
45333: LD_INT 11
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: IN
45344: NOT
45345: OR
45346: IFFALSE 45352
// exit ;
45348: POP
45349: POP
45350: GO 45450
// end ;
45352: GO 45023
45354: POP
45355: POP
// side := GetSide ( depot ) ;
45356: LD_ADDR_VAR 0 9
45360: PUSH
45361: LD_VAR 0 1
45365: PPUSH
45366: CALL_OW 255
45370: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45371: LD_VAR 0 9
45375: PPUSH
45376: LD_VAR 0 3
45380: PPUSH
45381: LD_VAR 0 4
45385: PPUSH
45386: LD_INT 20
45388: PPUSH
45389: CALL 38104 0 4
45393: PUSH
45394: LD_INT 4
45396: ARRAY
45397: IFFALSE 45401
// exit ;
45399: GO 45450
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45401: LD_VAR 0 2
45405: PUSH
45406: LD_INT 29
45408: PUSH
45409: LD_INT 30
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: IN
45416: PUSH
45417: LD_VAR 0 3
45421: PPUSH
45422: LD_VAR 0 4
45426: PPUSH
45427: LD_VAR 0 9
45431: PPUSH
45432: CALL_OW 440
45436: NOT
45437: AND
45438: IFFALSE 45442
// exit ;
45440: GO 45450
// result := true ;
45442: LD_ADDR_VAR 0 6
45446: PUSH
45447: LD_INT 1
45449: ST_TO_ADDR
// end ;
45450: LD_VAR 0 6
45454: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45455: LD_INT 0
45457: PPUSH
45458: PPUSH
45459: PPUSH
45460: PPUSH
45461: PPUSH
45462: PPUSH
45463: PPUSH
45464: PPUSH
45465: PPUSH
45466: PPUSH
45467: PPUSH
45468: PPUSH
45469: PPUSH
45470: PPUSH
45471: PPUSH
45472: PPUSH
45473: PPUSH
45474: PPUSH
45475: PPUSH
45476: PPUSH
45477: PPUSH
45478: PPUSH
45479: PPUSH
45480: PPUSH
45481: PPUSH
45482: PPUSH
45483: PPUSH
45484: PPUSH
45485: PPUSH
45486: PPUSH
45487: PPUSH
45488: PPUSH
45489: PPUSH
45490: PPUSH
45491: PPUSH
45492: PPUSH
45493: PPUSH
45494: PPUSH
45495: PPUSH
45496: PPUSH
45497: PPUSH
45498: PPUSH
45499: PPUSH
45500: PPUSH
45501: PPUSH
45502: PPUSH
45503: PPUSH
45504: PPUSH
45505: PPUSH
45506: PPUSH
45507: PPUSH
45508: PPUSH
45509: PPUSH
45510: PPUSH
45511: PPUSH
45512: PPUSH
45513: PPUSH
45514: PPUSH
// result = [ ] ;
45515: LD_ADDR_VAR 0 7
45519: PUSH
45520: EMPTY
45521: ST_TO_ADDR
// temp_list = [ ] ;
45522: LD_ADDR_VAR 0 9
45526: PUSH
45527: EMPTY
45528: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45529: LD_VAR 0 4
45533: PUSH
45534: LD_INT 0
45536: PUSH
45537: LD_INT 1
45539: PUSH
45540: LD_INT 2
45542: PUSH
45543: LD_INT 3
45545: PUSH
45546: LD_INT 4
45548: PUSH
45549: LD_INT 5
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: IN
45560: NOT
45561: PUSH
45562: LD_VAR 0 1
45566: PUSH
45567: LD_INT 0
45569: PUSH
45570: LD_INT 1
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: IN
45577: PUSH
45578: LD_VAR 0 5
45582: PUSH
45583: LD_INT 1
45585: PUSH
45586: LD_INT 2
45588: PUSH
45589: LD_INT 3
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: LIST
45596: IN
45597: NOT
45598: AND
45599: OR
45600: IFFALSE 45604
// exit ;
45602: GO 63995
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45604: LD_VAR 0 1
45608: PUSH
45609: LD_INT 6
45611: PUSH
45612: LD_INT 7
45614: PUSH
45615: LD_INT 8
45617: PUSH
45618: LD_INT 13
45620: PUSH
45621: LD_INT 12
45623: PUSH
45624: LD_INT 15
45626: PUSH
45627: LD_INT 11
45629: PUSH
45630: LD_INT 14
45632: PUSH
45633: LD_INT 10
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: LIST
45645: LIST
45646: IN
45647: IFFALSE 45657
// btype = b_lab ;
45649: LD_ADDR_VAR 0 1
45653: PUSH
45654: LD_INT 6
45656: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45657: LD_VAR 0 6
45661: PUSH
45662: LD_INT 0
45664: PUSH
45665: LD_INT 1
45667: PUSH
45668: LD_INT 2
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: LIST
45675: IN
45676: NOT
45677: PUSH
45678: LD_VAR 0 1
45682: PUSH
45683: LD_INT 0
45685: PUSH
45686: LD_INT 1
45688: PUSH
45689: LD_INT 2
45691: PUSH
45692: LD_INT 3
45694: PUSH
45695: LD_INT 6
45697: PUSH
45698: LD_INT 36
45700: PUSH
45701: LD_INT 4
45703: PUSH
45704: LD_INT 5
45706: PUSH
45707: LD_INT 31
45709: PUSH
45710: LD_INT 32
45712: PUSH
45713: LD_INT 33
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: IN
45729: NOT
45730: PUSH
45731: LD_VAR 0 6
45735: PUSH
45736: LD_INT 1
45738: EQUAL
45739: AND
45740: OR
45741: PUSH
45742: LD_VAR 0 1
45746: PUSH
45747: LD_INT 2
45749: PUSH
45750: LD_INT 3
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: IN
45757: NOT
45758: PUSH
45759: LD_VAR 0 6
45763: PUSH
45764: LD_INT 2
45766: EQUAL
45767: AND
45768: OR
45769: IFFALSE 45779
// mode = 0 ;
45771: LD_ADDR_VAR 0 6
45775: PUSH
45776: LD_INT 0
45778: ST_TO_ADDR
// case mode of 0 :
45779: LD_VAR 0 6
45783: PUSH
45784: LD_INT 0
45786: DOUBLE
45787: EQUAL
45788: IFTRUE 45792
45790: GO 57245
45792: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45793: LD_ADDR_VAR 0 11
45797: PUSH
45798: LD_INT 0
45800: PUSH
45801: LD_INT 0
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 0
45810: PUSH
45811: LD_INT 1
45813: NEG
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 1
45821: PUSH
45822: LD_INT 0
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: LD_INT 1
45831: PUSH
45832: LD_INT 1
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 0
45841: PUSH
45842: LD_INT 1
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 1
45851: NEG
45852: PUSH
45853: LD_INT 0
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 1
45862: NEG
45863: PUSH
45864: LD_INT 1
45866: NEG
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 1
45874: NEG
45875: PUSH
45876: LD_INT 2
45878: NEG
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 0
45886: PUSH
45887: LD_INT 2
45889: NEG
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 1
45897: PUSH
45898: LD_INT 1
45900: NEG
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 1
45908: PUSH
45909: LD_INT 2
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 0
45918: PUSH
45919: LD_INT 2
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 1
45928: NEG
45929: PUSH
45930: LD_INT 1
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 1
45939: PUSH
45940: LD_INT 3
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 0
45949: PUSH
45950: LD_INT 3
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 1
45959: NEG
45960: PUSH
45961: LD_INT 2
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45986: LD_ADDR_VAR 0 12
45990: PUSH
45991: LD_INT 0
45993: PUSH
45994: LD_INT 0
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 0
46003: PUSH
46004: LD_INT 1
46006: NEG
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 1
46014: PUSH
46015: LD_INT 0
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 1
46024: PUSH
46025: LD_INT 1
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 0
46034: PUSH
46035: LD_INT 1
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 1
46044: NEG
46045: PUSH
46046: LD_INT 0
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 1
46055: NEG
46056: PUSH
46057: LD_INT 1
46059: NEG
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 1
46067: PUSH
46068: LD_INT 1
46070: NEG
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 2
46078: PUSH
46079: LD_INT 0
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 2
46088: PUSH
46089: LD_INT 1
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 1
46098: NEG
46099: PUSH
46100: LD_INT 1
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 2
46109: NEG
46110: PUSH
46111: LD_INT 0
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 2
46120: NEG
46121: PUSH
46122: LD_INT 1
46124: NEG
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 2
46132: NEG
46133: PUSH
46134: LD_INT 1
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 3
46143: NEG
46144: PUSH
46145: LD_INT 0
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 3
46154: NEG
46155: PUSH
46156: LD_INT 1
46158: NEG
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46182: LD_ADDR_VAR 0 13
46186: PUSH
46187: LD_INT 0
46189: PUSH
46190: LD_INT 0
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 0
46199: PUSH
46200: LD_INT 1
46202: NEG
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 1
46210: PUSH
46211: LD_INT 0
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 1
46220: PUSH
46221: LD_INT 1
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 0
46230: PUSH
46231: LD_INT 1
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 1
46240: NEG
46241: PUSH
46242: LD_INT 0
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 1
46251: NEG
46252: PUSH
46253: LD_INT 1
46255: NEG
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 1
46263: NEG
46264: PUSH
46265: LD_INT 2
46267: NEG
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 2
46275: PUSH
46276: LD_INT 1
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 2
46285: PUSH
46286: LD_INT 2
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: LD_INT 1
46295: PUSH
46296: LD_INT 2
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 2
46305: NEG
46306: PUSH
46307: LD_INT 1
46309: NEG
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 2
46317: NEG
46318: PUSH
46319: LD_INT 2
46321: NEG
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: LD_INT 2
46329: NEG
46330: PUSH
46331: LD_INT 3
46333: NEG
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 3
46341: NEG
46342: PUSH
46343: LD_INT 2
46345: NEG
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 3
46353: NEG
46354: PUSH
46355: LD_INT 3
46357: NEG
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46381: LD_ADDR_VAR 0 14
46385: PUSH
46386: LD_INT 0
46388: PUSH
46389: LD_INT 0
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 0
46398: PUSH
46399: LD_INT 1
46401: NEG
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 1
46409: PUSH
46410: LD_INT 0
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 1
46419: PUSH
46420: LD_INT 1
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 0
46429: PUSH
46430: LD_INT 1
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 1
46439: NEG
46440: PUSH
46441: LD_INT 0
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 1
46450: NEG
46451: PUSH
46452: LD_INT 1
46454: NEG
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 1
46462: NEG
46463: PUSH
46464: LD_INT 2
46466: NEG
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 0
46474: PUSH
46475: LD_INT 2
46477: NEG
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 1
46485: PUSH
46486: LD_INT 1
46488: NEG
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 1
46496: PUSH
46497: LD_INT 2
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 0
46506: PUSH
46507: LD_INT 2
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 1
46516: NEG
46517: PUSH
46518: LD_INT 1
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 1
46527: NEG
46528: PUSH
46529: LD_INT 3
46531: NEG
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 0
46539: PUSH
46540: LD_INT 3
46542: NEG
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 1
46550: PUSH
46551: LD_INT 2
46553: NEG
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46577: LD_ADDR_VAR 0 15
46581: PUSH
46582: LD_INT 0
46584: PUSH
46585: LD_INT 0
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 0
46594: PUSH
46595: LD_INT 1
46597: NEG
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 1
46605: PUSH
46606: LD_INT 0
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 1
46615: PUSH
46616: LD_INT 1
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 0
46625: PUSH
46626: LD_INT 1
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 1
46635: NEG
46636: PUSH
46637: LD_INT 0
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 1
46646: NEG
46647: PUSH
46648: LD_INT 1
46650: NEG
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 1
46658: PUSH
46659: LD_INT 1
46661: NEG
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 2
46669: PUSH
46670: LD_INT 0
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 2
46679: PUSH
46680: LD_INT 1
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 1
46689: NEG
46690: PUSH
46691: LD_INT 1
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 2
46700: NEG
46701: PUSH
46702: LD_INT 0
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 2
46711: NEG
46712: PUSH
46713: LD_INT 1
46715: NEG
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 2
46723: PUSH
46724: LD_INT 1
46726: NEG
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 3
46734: PUSH
46735: LD_INT 0
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 3
46744: PUSH
46745: LD_INT 1
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46770: LD_ADDR_VAR 0 16
46774: PUSH
46775: LD_INT 0
46777: PUSH
46778: LD_INT 0
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 0
46787: PUSH
46788: LD_INT 1
46790: NEG
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 1
46798: PUSH
46799: LD_INT 0
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 1
46808: PUSH
46809: LD_INT 1
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 0
46818: PUSH
46819: LD_INT 1
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 1
46828: NEG
46829: PUSH
46830: LD_INT 0
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 1
46839: NEG
46840: PUSH
46841: LD_INT 1
46843: NEG
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 1
46851: NEG
46852: PUSH
46853: LD_INT 2
46855: NEG
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 2
46863: PUSH
46864: LD_INT 1
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 2
46873: PUSH
46874: LD_INT 2
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 1
46883: PUSH
46884: LD_INT 2
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 2
46893: NEG
46894: PUSH
46895: LD_INT 1
46897: NEG
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 2
46905: NEG
46906: PUSH
46907: LD_INT 2
46909: NEG
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 3
46917: PUSH
46918: LD_INT 2
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 3
46927: PUSH
46928: LD_INT 3
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 2
46937: PUSH
46938: LD_INT 3
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46963: LD_ADDR_VAR 0 17
46967: PUSH
46968: LD_INT 0
46970: PUSH
46971: LD_INT 0
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 0
46980: PUSH
46981: LD_INT 1
46983: NEG
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 1
46991: PUSH
46992: LD_INT 0
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 1
47001: PUSH
47002: LD_INT 1
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 0
47011: PUSH
47012: LD_INT 1
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 1
47021: NEG
47022: PUSH
47023: LD_INT 0
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 1
47032: NEG
47033: PUSH
47034: LD_INT 1
47036: NEG
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 1
47044: NEG
47045: PUSH
47046: LD_INT 2
47048: NEG
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 0
47056: PUSH
47057: LD_INT 2
47059: NEG
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 1
47067: PUSH
47068: LD_INT 1
47070: NEG
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 2
47078: PUSH
47079: LD_INT 0
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 2
47088: PUSH
47089: LD_INT 1
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 2
47098: PUSH
47099: LD_INT 2
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 1
47108: PUSH
47109: LD_INT 2
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 0
47118: PUSH
47119: LD_INT 2
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 1
47128: NEG
47129: PUSH
47130: LD_INT 1
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 2
47139: NEG
47140: PUSH
47141: LD_INT 0
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 2
47150: NEG
47151: PUSH
47152: LD_INT 1
47154: NEG
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 2
47162: NEG
47163: PUSH
47164: LD_INT 2
47166: NEG
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47193: LD_ADDR_VAR 0 18
47197: PUSH
47198: LD_INT 0
47200: PUSH
47201: LD_INT 0
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 0
47210: PUSH
47211: LD_INT 1
47213: NEG
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 1
47221: PUSH
47222: LD_INT 0
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 1
47231: PUSH
47232: LD_INT 1
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 0
47241: PUSH
47242: LD_INT 1
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 1
47251: NEG
47252: PUSH
47253: LD_INT 0
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: LD_INT 1
47262: NEG
47263: PUSH
47264: LD_INT 1
47266: NEG
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 1
47274: NEG
47275: PUSH
47276: LD_INT 2
47278: NEG
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 0
47286: PUSH
47287: LD_INT 2
47289: NEG
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 1
47297: PUSH
47298: LD_INT 1
47300: NEG
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 2
47308: PUSH
47309: LD_INT 0
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 2
47318: PUSH
47319: LD_INT 1
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 2
47328: PUSH
47329: LD_INT 2
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 1
47338: PUSH
47339: LD_INT 2
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 0
47348: PUSH
47349: LD_INT 2
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 1
47358: NEG
47359: PUSH
47360: LD_INT 1
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 2
47369: NEG
47370: PUSH
47371: LD_INT 0
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 2
47380: NEG
47381: PUSH
47382: LD_INT 1
47384: NEG
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 2
47392: NEG
47393: PUSH
47394: LD_INT 2
47396: NEG
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47423: LD_ADDR_VAR 0 19
47427: PUSH
47428: LD_INT 0
47430: PUSH
47431: LD_INT 0
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 0
47440: PUSH
47441: LD_INT 1
47443: NEG
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 1
47451: PUSH
47452: LD_INT 0
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 1
47461: PUSH
47462: LD_INT 1
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 0
47471: PUSH
47472: LD_INT 1
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 1
47481: NEG
47482: PUSH
47483: LD_INT 0
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 1
47492: NEG
47493: PUSH
47494: LD_INT 1
47496: NEG
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 1
47504: NEG
47505: PUSH
47506: LD_INT 2
47508: NEG
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 0
47516: PUSH
47517: LD_INT 2
47519: NEG
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 1
47527: PUSH
47528: LD_INT 1
47530: NEG
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 2
47538: PUSH
47539: LD_INT 0
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 2
47548: PUSH
47549: LD_INT 1
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: LD_INT 2
47558: PUSH
47559: LD_INT 2
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 1
47568: PUSH
47569: LD_INT 2
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 0
47578: PUSH
47579: LD_INT 2
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 1
47588: NEG
47589: PUSH
47590: LD_INT 1
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 2
47599: NEG
47600: PUSH
47601: LD_INT 0
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 2
47610: NEG
47611: PUSH
47612: LD_INT 1
47614: NEG
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 2
47622: NEG
47623: PUSH
47624: LD_INT 2
47626: NEG
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47653: LD_ADDR_VAR 0 20
47657: PUSH
47658: LD_INT 0
47660: PUSH
47661: LD_INT 0
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 0
47670: PUSH
47671: LD_INT 1
47673: NEG
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 1
47681: PUSH
47682: LD_INT 0
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 1
47691: PUSH
47692: LD_INT 1
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 0
47701: PUSH
47702: LD_INT 1
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 1
47711: NEG
47712: PUSH
47713: LD_INT 0
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 1
47722: NEG
47723: PUSH
47724: LD_INT 1
47726: NEG
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 1
47734: NEG
47735: PUSH
47736: LD_INT 2
47738: NEG
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 0
47746: PUSH
47747: LD_INT 2
47749: NEG
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 1
47757: PUSH
47758: LD_INT 1
47760: NEG
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 2
47768: PUSH
47769: LD_INT 0
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 2
47778: PUSH
47779: LD_INT 1
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 2
47788: PUSH
47789: LD_INT 2
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 1
47798: PUSH
47799: LD_INT 2
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 0
47808: PUSH
47809: LD_INT 2
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 1
47818: NEG
47819: PUSH
47820: LD_INT 1
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 2
47829: NEG
47830: PUSH
47831: LD_INT 0
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 2
47840: NEG
47841: PUSH
47842: LD_INT 1
47844: NEG
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 2
47852: NEG
47853: PUSH
47854: LD_INT 2
47856: NEG
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47883: LD_ADDR_VAR 0 21
47887: PUSH
47888: LD_INT 0
47890: PUSH
47891: LD_INT 0
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 0
47900: PUSH
47901: LD_INT 1
47903: NEG
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 1
47911: PUSH
47912: LD_INT 0
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 1
47921: PUSH
47922: LD_INT 1
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 0
47931: PUSH
47932: LD_INT 1
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 1
47941: NEG
47942: PUSH
47943: LD_INT 0
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 1
47952: NEG
47953: PUSH
47954: LD_INT 1
47956: NEG
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 1
47964: NEG
47965: PUSH
47966: LD_INT 2
47968: NEG
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 0
47976: PUSH
47977: LD_INT 2
47979: NEG
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 1
47987: PUSH
47988: LD_INT 1
47990: NEG
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 2
47998: PUSH
47999: LD_INT 0
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 2
48008: PUSH
48009: LD_INT 1
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 2
48018: PUSH
48019: LD_INT 2
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 1
48028: PUSH
48029: LD_INT 2
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 0
48038: PUSH
48039: LD_INT 2
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 1
48048: NEG
48049: PUSH
48050: LD_INT 1
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 2
48059: NEG
48060: PUSH
48061: LD_INT 0
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 2
48070: NEG
48071: PUSH
48072: LD_INT 1
48074: NEG
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 2
48082: NEG
48083: PUSH
48084: LD_INT 2
48086: NEG
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48113: LD_ADDR_VAR 0 22
48117: PUSH
48118: LD_INT 0
48120: PUSH
48121: LD_INT 0
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 0
48130: PUSH
48131: LD_INT 1
48133: NEG
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 1
48141: PUSH
48142: LD_INT 0
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 1
48151: PUSH
48152: LD_INT 1
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 0
48161: PUSH
48162: LD_INT 1
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 1
48171: NEG
48172: PUSH
48173: LD_INT 0
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 1
48182: NEG
48183: PUSH
48184: LD_INT 1
48186: NEG
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 1
48194: NEG
48195: PUSH
48196: LD_INT 2
48198: NEG
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 0
48206: PUSH
48207: LD_INT 2
48209: NEG
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 1
48217: PUSH
48218: LD_INT 1
48220: NEG
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 2
48228: PUSH
48229: LD_INT 0
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 2
48238: PUSH
48239: LD_INT 1
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 2
48248: PUSH
48249: LD_INT 2
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 1
48258: PUSH
48259: LD_INT 2
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 0
48268: PUSH
48269: LD_INT 2
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 1
48278: NEG
48279: PUSH
48280: LD_INT 1
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 2
48289: NEG
48290: PUSH
48291: LD_INT 0
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 2
48300: NEG
48301: PUSH
48302: LD_INT 1
48304: NEG
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 2
48312: NEG
48313: PUSH
48314: LD_INT 2
48316: NEG
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48343: LD_ADDR_VAR 0 23
48347: PUSH
48348: LD_INT 0
48350: PUSH
48351: LD_INT 0
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 0
48360: PUSH
48361: LD_INT 1
48363: NEG
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 1
48371: PUSH
48372: LD_INT 0
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 1
48381: PUSH
48382: LD_INT 1
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 0
48391: PUSH
48392: LD_INT 1
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 1
48401: NEG
48402: PUSH
48403: LD_INT 0
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 1
48412: NEG
48413: PUSH
48414: LD_INT 1
48416: NEG
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 1
48424: NEG
48425: PUSH
48426: LD_INT 2
48428: NEG
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 0
48436: PUSH
48437: LD_INT 2
48439: NEG
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 1
48447: PUSH
48448: LD_INT 1
48450: NEG
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: LD_INT 2
48458: PUSH
48459: LD_INT 0
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 2
48468: PUSH
48469: LD_INT 1
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 2
48478: PUSH
48479: LD_INT 2
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 1
48488: PUSH
48489: LD_INT 2
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 0
48498: PUSH
48499: LD_INT 2
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 1
48508: NEG
48509: PUSH
48510: LD_INT 1
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 2
48519: NEG
48520: PUSH
48521: LD_INT 0
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 2
48530: NEG
48531: PUSH
48532: LD_INT 1
48534: NEG
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 2
48542: NEG
48543: PUSH
48544: LD_INT 2
48546: NEG
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 2
48554: NEG
48555: PUSH
48556: LD_INT 3
48558: NEG
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 1
48566: NEG
48567: PUSH
48568: LD_INT 3
48570: NEG
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 1
48578: PUSH
48579: LD_INT 2
48581: NEG
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 2
48589: PUSH
48590: LD_INT 1
48592: NEG
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48623: LD_ADDR_VAR 0 24
48627: PUSH
48628: LD_INT 0
48630: PUSH
48631: LD_INT 0
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 0
48640: PUSH
48641: LD_INT 1
48643: NEG
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 1
48651: PUSH
48652: LD_INT 0
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 1
48661: PUSH
48662: LD_INT 1
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 0
48671: PUSH
48672: LD_INT 1
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 1
48681: NEG
48682: PUSH
48683: LD_INT 0
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 1
48692: NEG
48693: PUSH
48694: LD_INT 1
48696: NEG
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 1
48704: NEG
48705: PUSH
48706: LD_INT 2
48708: NEG
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 0
48716: PUSH
48717: LD_INT 2
48719: NEG
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 1
48727: PUSH
48728: LD_INT 1
48730: NEG
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 2
48738: PUSH
48739: LD_INT 0
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: LD_INT 2
48748: PUSH
48749: LD_INT 1
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: LD_INT 2
48758: PUSH
48759: LD_INT 2
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 1
48768: PUSH
48769: LD_INT 2
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 0
48778: PUSH
48779: LD_INT 2
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: LD_INT 1
48788: NEG
48789: PUSH
48790: LD_INT 1
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 2
48799: NEG
48800: PUSH
48801: LD_INT 0
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 2
48810: NEG
48811: PUSH
48812: LD_INT 1
48814: NEG
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 2
48822: NEG
48823: PUSH
48824: LD_INT 2
48826: NEG
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 1
48834: PUSH
48835: LD_INT 2
48837: NEG
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 2
48845: PUSH
48846: LD_INT 1
48848: NEG
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 3
48856: PUSH
48857: LD_INT 1
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 3
48866: PUSH
48867: LD_INT 2
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48899: LD_ADDR_VAR 0 25
48903: PUSH
48904: LD_INT 0
48906: PUSH
48907: LD_INT 0
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 0
48916: PUSH
48917: LD_INT 1
48919: NEG
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 1
48927: PUSH
48928: LD_INT 0
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 1
48937: PUSH
48938: LD_INT 1
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 0
48947: PUSH
48948: LD_INT 1
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 1
48957: NEG
48958: PUSH
48959: LD_INT 0
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 1
48968: NEG
48969: PUSH
48970: LD_INT 1
48972: NEG
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 1
48980: NEG
48981: PUSH
48982: LD_INT 2
48984: NEG
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 0
48992: PUSH
48993: LD_INT 2
48995: NEG
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 1
49003: PUSH
49004: LD_INT 1
49006: NEG
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 2
49014: PUSH
49015: LD_INT 0
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 2
49024: PUSH
49025: LD_INT 1
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 2
49034: PUSH
49035: LD_INT 2
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 1
49044: PUSH
49045: LD_INT 2
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 0
49054: PUSH
49055: LD_INT 2
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: LD_INT 1
49064: NEG
49065: PUSH
49066: LD_INT 1
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 2
49075: NEG
49076: PUSH
49077: LD_INT 0
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 2
49086: NEG
49087: PUSH
49088: LD_INT 1
49090: NEG
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 2
49098: NEG
49099: PUSH
49100: LD_INT 2
49102: NEG
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 3
49110: PUSH
49111: LD_INT 1
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 3
49120: PUSH
49121: LD_INT 2
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 2
49130: PUSH
49131: LD_INT 3
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 1
49140: PUSH
49141: LD_INT 3
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49173: LD_ADDR_VAR 0 26
49177: PUSH
49178: LD_INT 0
49180: PUSH
49181: LD_INT 0
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 0
49190: PUSH
49191: LD_INT 1
49193: NEG
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 1
49201: PUSH
49202: LD_INT 0
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 1
49211: PUSH
49212: LD_INT 1
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 0
49221: PUSH
49222: LD_INT 1
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 1
49231: NEG
49232: PUSH
49233: LD_INT 0
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 1
49242: NEG
49243: PUSH
49244: LD_INT 1
49246: NEG
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 1
49254: NEG
49255: PUSH
49256: LD_INT 2
49258: NEG
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 0
49266: PUSH
49267: LD_INT 2
49269: NEG
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 1
49277: PUSH
49278: LD_INT 1
49280: NEG
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 2
49288: PUSH
49289: LD_INT 0
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 2
49298: PUSH
49299: LD_INT 1
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 2
49308: PUSH
49309: LD_INT 2
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 1
49318: PUSH
49319: LD_INT 2
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 0
49328: PUSH
49329: LD_INT 2
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 1
49338: NEG
49339: PUSH
49340: LD_INT 1
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 2
49349: NEG
49350: PUSH
49351: LD_INT 0
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 2
49360: NEG
49361: PUSH
49362: LD_INT 1
49364: NEG
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 2
49372: NEG
49373: PUSH
49374: LD_INT 2
49376: NEG
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 2
49384: PUSH
49385: LD_INT 3
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: LD_INT 1
49394: PUSH
49395: LD_INT 3
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 1
49404: NEG
49405: PUSH
49406: LD_INT 2
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 2
49415: NEG
49416: PUSH
49417: LD_INT 1
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49449: LD_ADDR_VAR 0 27
49453: PUSH
49454: LD_INT 0
49456: PUSH
49457: LD_INT 0
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 0
49466: PUSH
49467: LD_INT 1
49469: NEG
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 1
49477: PUSH
49478: LD_INT 0
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 1
49487: PUSH
49488: LD_INT 1
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 0
49497: PUSH
49498: LD_INT 1
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 1
49507: NEG
49508: PUSH
49509: LD_INT 0
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 1
49518: NEG
49519: PUSH
49520: LD_INT 1
49522: NEG
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 1
49530: NEG
49531: PUSH
49532: LD_INT 2
49534: NEG
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 0
49542: PUSH
49543: LD_INT 2
49545: NEG
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 1
49553: PUSH
49554: LD_INT 1
49556: NEG
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 2
49564: PUSH
49565: LD_INT 0
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 2
49574: PUSH
49575: LD_INT 1
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 2
49584: PUSH
49585: LD_INT 2
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 1
49594: PUSH
49595: LD_INT 2
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 0
49604: PUSH
49605: LD_INT 2
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 1
49614: NEG
49615: PUSH
49616: LD_INT 1
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 2
49625: NEG
49626: PUSH
49627: LD_INT 0
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 2
49636: NEG
49637: PUSH
49638: LD_INT 1
49640: NEG
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 2
49648: NEG
49649: PUSH
49650: LD_INT 2
49652: NEG
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 1
49660: NEG
49661: PUSH
49662: LD_INT 2
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 2
49671: NEG
49672: PUSH
49673: LD_INT 1
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 3
49682: NEG
49683: PUSH
49684: LD_INT 1
49686: NEG
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_INT 3
49694: NEG
49695: PUSH
49696: LD_INT 2
49698: NEG
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49729: LD_ADDR_VAR 0 28
49733: PUSH
49734: LD_INT 0
49736: PUSH
49737: LD_INT 0
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 0
49746: PUSH
49747: LD_INT 1
49749: NEG
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 1
49757: PUSH
49758: LD_INT 0
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 1
49767: PUSH
49768: LD_INT 1
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 0
49777: PUSH
49778: LD_INT 1
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 1
49787: NEG
49788: PUSH
49789: LD_INT 0
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 1
49798: NEG
49799: PUSH
49800: LD_INT 1
49802: NEG
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 1
49810: NEG
49811: PUSH
49812: LD_INT 2
49814: NEG
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 0
49822: PUSH
49823: LD_INT 2
49825: NEG
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 1
49833: PUSH
49834: LD_INT 1
49836: NEG
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 2
49844: PUSH
49845: LD_INT 0
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 2
49854: PUSH
49855: LD_INT 1
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 2
49864: PUSH
49865: LD_INT 2
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 1
49874: PUSH
49875: LD_INT 2
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 0
49884: PUSH
49885: LD_INT 2
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 1
49894: NEG
49895: PUSH
49896: LD_INT 1
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 2
49905: NEG
49906: PUSH
49907: LD_INT 0
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 2
49916: NEG
49917: PUSH
49918: LD_INT 1
49920: NEG
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 2
49928: NEG
49929: PUSH
49930: LD_INT 2
49932: NEG
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 2
49940: NEG
49941: PUSH
49942: LD_INT 3
49944: NEG
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 1
49952: NEG
49953: PUSH
49954: LD_INT 3
49956: NEG
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 3
49964: NEG
49965: PUSH
49966: LD_INT 1
49968: NEG
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 3
49976: NEG
49977: PUSH
49978: LD_INT 2
49980: NEG
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50011: LD_ADDR_VAR 0 29
50015: PUSH
50016: LD_INT 0
50018: PUSH
50019: LD_INT 0
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 0
50028: PUSH
50029: LD_INT 1
50031: NEG
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 1
50039: PUSH
50040: LD_INT 0
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 1
50049: PUSH
50050: LD_INT 1
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 0
50059: PUSH
50060: LD_INT 1
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 1
50069: NEG
50070: PUSH
50071: LD_INT 0
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 1
50080: NEG
50081: PUSH
50082: LD_INT 1
50084: NEG
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 1
50092: NEG
50093: PUSH
50094: LD_INT 2
50096: NEG
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 0
50104: PUSH
50105: LD_INT 2
50107: NEG
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 1
50115: PUSH
50116: LD_INT 1
50118: NEG
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 2
50126: PUSH
50127: LD_INT 0
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 2
50136: PUSH
50137: LD_INT 1
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 1
50146: PUSH
50147: LD_INT 2
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 0
50156: PUSH
50157: LD_INT 2
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 1
50166: NEG
50167: PUSH
50168: LD_INT 1
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 2
50177: NEG
50178: PUSH
50179: LD_INT 1
50181: NEG
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 2
50189: NEG
50190: PUSH
50191: LD_INT 2
50193: NEG
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 2
50201: NEG
50202: PUSH
50203: LD_INT 3
50205: NEG
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 2
50213: PUSH
50214: LD_INT 1
50216: NEG
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 3
50224: PUSH
50225: LD_INT 1
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 1
50234: PUSH
50235: LD_INT 3
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 1
50244: NEG
50245: PUSH
50246: LD_INT 2
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 3
50255: NEG
50256: PUSH
50257: LD_INT 2
50259: NEG
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50290: LD_ADDR_VAR 0 30
50294: PUSH
50295: LD_INT 0
50297: PUSH
50298: LD_INT 0
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 0
50307: PUSH
50308: LD_INT 1
50310: NEG
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: PUSH
50316: LD_INT 1
50318: PUSH
50319: LD_INT 0
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 1
50328: PUSH
50329: LD_INT 1
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 0
50338: PUSH
50339: LD_INT 1
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 1
50348: NEG
50349: PUSH
50350: LD_INT 0
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 1
50359: NEG
50360: PUSH
50361: LD_INT 1
50363: NEG
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 1
50371: NEG
50372: PUSH
50373: LD_INT 2
50375: NEG
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 0
50383: PUSH
50384: LD_INT 2
50386: NEG
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 1
50394: PUSH
50395: LD_INT 1
50397: NEG
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 2
50405: PUSH
50406: LD_INT 0
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 2
50415: PUSH
50416: LD_INT 1
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 2
50425: PUSH
50426: LD_INT 2
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 1
50435: PUSH
50436: LD_INT 2
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 1
50445: NEG
50446: PUSH
50447: LD_INT 1
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 2
50456: NEG
50457: PUSH
50458: LD_INT 0
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 2
50467: NEG
50468: PUSH
50469: LD_INT 1
50471: NEG
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 1
50479: NEG
50480: PUSH
50481: LD_INT 3
50483: NEG
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 1
50491: PUSH
50492: LD_INT 2
50494: NEG
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 3
50502: PUSH
50503: LD_INT 2
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 2
50512: PUSH
50513: LD_INT 3
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 2
50522: NEG
50523: PUSH
50524: LD_INT 1
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 3
50533: NEG
50534: PUSH
50535: LD_INT 1
50537: NEG
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50568: LD_ADDR_VAR 0 31
50572: PUSH
50573: LD_INT 0
50575: PUSH
50576: LD_INT 0
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 0
50585: PUSH
50586: LD_INT 1
50588: NEG
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 1
50596: PUSH
50597: LD_INT 0
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 1
50606: PUSH
50607: LD_INT 1
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 0
50616: PUSH
50617: LD_INT 1
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 1
50626: NEG
50627: PUSH
50628: LD_INT 0
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 1
50637: NEG
50638: PUSH
50639: LD_INT 1
50641: NEG
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 1
50649: NEG
50650: PUSH
50651: LD_INT 2
50653: NEG
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 1
50661: PUSH
50662: LD_INT 1
50664: NEG
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 2
50672: PUSH
50673: LD_INT 0
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 2
50682: PUSH
50683: LD_INT 1
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 2
50692: PUSH
50693: LD_INT 2
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 1
50702: PUSH
50703: LD_INT 2
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 0
50712: PUSH
50713: LD_INT 2
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 1
50722: NEG
50723: PUSH
50724: LD_INT 1
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 2
50733: NEG
50734: PUSH
50735: LD_INT 1
50737: NEG
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 2
50745: NEG
50746: PUSH
50747: LD_INT 2
50749: NEG
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 2
50757: NEG
50758: PUSH
50759: LD_INT 3
50761: NEG
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 2
50769: PUSH
50770: LD_INT 1
50772: NEG
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 3
50780: PUSH
50781: LD_INT 1
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 1
50790: PUSH
50791: LD_INT 3
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: LD_INT 1
50800: NEG
50801: PUSH
50802: LD_INT 2
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 3
50811: NEG
50812: PUSH
50813: LD_INT 2
50815: NEG
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50846: LD_ADDR_VAR 0 32
50850: PUSH
50851: LD_INT 0
50853: PUSH
50854: LD_INT 0
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 0
50863: PUSH
50864: LD_INT 1
50866: NEG
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 1
50874: PUSH
50875: LD_INT 0
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 1
50884: PUSH
50885: LD_INT 1
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 0
50894: PUSH
50895: LD_INT 1
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 1
50904: NEG
50905: PUSH
50906: LD_INT 0
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 1
50915: NEG
50916: PUSH
50917: LD_INT 1
50919: NEG
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 1
50927: NEG
50928: PUSH
50929: LD_INT 2
50931: NEG
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 0
50939: PUSH
50940: LD_INT 2
50942: NEG
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 1
50950: PUSH
50951: LD_INT 1
50953: NEG
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 2
50961: PUSH
50962: LD_INT 1
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 2
50971: PUSH
50972: LD_INT 2
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 1
50981: PUSH
50982: LD_INT 2
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 0
50991: PUSH
50992: LD_INT 2
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 1
51001: NEG
51002: PUSH
51003: LD_INT 1
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 2
51012: NEG
51013: PUSH
51014: LD_INT 0
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 2
51023: NEG
51024: PUSH
51025: LD_INT 1
51027: NEG
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 1
51035: NEG
51036: PUSH
51037: LD_INT 3
51039: NEG
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 1
51047: PUSH
51048: LD_INT 2
51050: NEG
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 3
51058: PUSH
51059: LD_INT 2
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 2
51068: PUSH
51069: LD_INT 3
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 2
51078: NEG
51079: PUSH
51080: LD_INT 1
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 3
51089: NEG
51090: PUSH
51091: LD_INT 1
51093: NEG
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51124: LD_ADDR_VAR 0 33
51128: PUSH
51129: LD_INT 0
51131: PUSH
51132: LD_INT 0
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 0
51141: PUSH
51142: LD_INT 1
51144: NEG
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 1
51152: PUSH
51153: LD_INT 0
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 1
51162: PUSH
51163: LD_INT 1
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 0
51172: PUSH
51173: LD_INT 1
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 1
51182: NEG
51183: PUSH
51184: LD_INT 0
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 1
51193: NEG
51194: PUSH
51195: LD_INT 1
51197: NEG
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 1
51205: NEG
51206: PUSH
51207: LD_INT 2
51209: NEG
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 1
51217: PUSH
51218: LD_INT 1
51220: NEG
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 2
51228: PUSH
51229: LD_INT 0
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 2
51238: PUSH
51239: LD_INT 1
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 1
51248: PUSH
51249: LD_INT 2
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 0
51258: PUSH
51259: LD_INT 2
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 1
51268: NEG
51269: PUSH
51270: LD_INT 1
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 2
51279: NEG
51280: PUSH
51281: LD_INT 0
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 2
51290: NEG
51291: PUSH
51292: LD_INT 1
51294: NEG
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 2
51302: NEG
51303: PUSH
51304: LD_INT 2
51306: NEG
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 2
51314: NEG
51315: PUSH
51316: LD_INT 3
51318: NEG
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 2
51326: PUSH
51327: LD_INT 1
51329: NEG
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 3
51337: PUSH
51338: LD_INT 1
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 1
51347: PUSH
51348: LD_INT 3
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 1
51357: NEG
51358: PUSH
51359: LD_INT 2
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 3
51368: NEG
51369: PUSH
51370: LD_INT 2
51372: NEG
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51403: LD_ADDR_VAR 0 34
51407: PUSH
51408: LD_INT 0
51410: PUSH
51411: LD_INT 0
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 0
51420: PUSH
51421: LD_INT 1
51423: NEG
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 1
51431: PUSH
51432: LD_INT 0
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 1
51441: PUSH
51442: LD_INT 1
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 0
51451: PUSH
51452: LD_INT 1
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 1
51461: NEG
51462: PUSH
51463: LD_INT 0
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 1
51472: NEG
51473: PUSH
51474: LD_INT 1
51476: NEG
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 1
51484: NEG
51485: PUSH
51486: LD_INT 2
51488: NEG
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 0
51496: PUSH
51497: LD_INT 2
51499: NEG
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 1
51507: PUSH
51508: LD_INT 1
51510: NEG
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 2
51518: PUSH
51519: LD_INT 1
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 2
51528: PUSH
51529: LD_INT 2
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 1
51538: PUSH
51539: LD_INT 2
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 1
51548: NEG
51549: PUSH
51550: LD_INT 1
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 2
51559: NEG
51560: PUSH
51561: LD_INT 0
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: LD_INT 2
51570: NEG
51571: PUSH
51572: LD_INT 1
51574: NEG
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 2
51582: NEG
51583: PUSH
51584: LD_INT 2
51586: NEG
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 1
51594: NEG
51595: PUSH
51596: LD_INT 3
51598: NEG
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 1
51606: PUSH
51607: LD_INT 2
51609: NEG
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 3
51617: PUSH
51618: LD_INT 2
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 2
51627: PUSH
51628: LD_INT 3
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 2
51637: NEG
51638: PUSH
51639: LD_INT 1
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 3
51648: NEG
51649: PUSH
51650: LD_INT 1
51652: NEG
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51683: LD_ADDR_VAR 0 35
51687: PUSH
51688: LD_INT 0
51690: PUSH
51691: LD_INT 0
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 0
51700: PUSH
51701: LD_INT 1
51703: NEG
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 1
51711: PUSH
51712: LD_INT 0
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 1
51721: PUSH
51722: LD_INT 1
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 0
51731: PUSH
51732: LD_INT 1
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 1
51741: NEG
51742: PUSH
51743: LD_INT 0
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 1
51752: NEG
51753: PUSH
51754: LD_INT 1
51756: NEG
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 2
51764: PUSH
51765: LD_INT 1
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 2
51774: NEG
51775: PUSH
51776: LD_INT 1
51778: NEG
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51795: LD_ADDR_VAR 0 36
51799: PUSH
51800: LD_INT 0
51802: PUSH
51803: LD_INT 0
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 0
51812: PUSH
51813: LD_INT 1
51815: NEG
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 1
51823: PUSH
51824: LD_INT 0
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 1
51833: PUSH
51834: LD_INT 1
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 0
51843: PUSH
51844: LD_INT 1
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 1
51853: NEG
51854: PUSH
51855: LD_INT 0
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 1
51864: NEG
51865: PUSH
51866: LD_INT 1
51868: NEG
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 1
51876: NEG
51877: PUSH
51878: LD_INT 2
51880: NEG
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 1
51888: PUSH
51889: LD_INT 2
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51907: LD_ADDR_VAR 0 37
51911: PUSH
51912: LD_INT 0
51914: PUSH
51915: LD_INT 0
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 0
51924: PUSH
51925: LD_INT 1
51927: NEG
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 1
51935: PUSH
51936: LD_INT 0
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 1
51945: PUSH
51946: LD_INT 1
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 0
51955: PUSH
51956: LD_INT 1
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 1
51965: NEG
51966: PUSH
51967: LD_INT 0
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 1
51976: NEG
51977: PUSH
51978: LD_INT 1
51980: NEG
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 1
51988: PUSH
51989: LD_INT 1
51991: NEG
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 1
51999: NEG
52000: PUSH
52001: LD_INT 1
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52019: LD_ADDR_VAR 0 38
52023: PUSH
52024: LD_INT 0
52026: PUSH
52027: LD_INT 0
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 0
52036: PUSH
52037: LD_INT 1
52039: NEG
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 1
52047: PUSH
52048: LD_INT 0
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 1
52057: PUSH
52058: LD_INT 1
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 0
52067: PUSH
52068: LD_INT 1
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 1
52077: NEG
52078: PUSH
52079: LD_INT 0
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 1
52088: NEG
52089: PUSH
52090: LD_INT 1
52092: NEG
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 2
52100: PUSH
52101: LD_INT 1
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 2
52110: NEG
52111: PUSH
52112: LD_INT 1
52114: NEG
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52131: LD_ADDR_VAR 0 39
52135: PUSH
52136: LD_INT 0
52138: PUSH
52139: LD_INT 0
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 0
52148: PUSH
52149: LD_INT 1
52151: NEG
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 1
52159: PUSH
52160: LD_INT 0
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: LD_INT 1
52169: PUSH
52170: LD_INT 1
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 0
52179: PUSH
52180: LD_INT 1
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 1
52189: NEG
52190: PUSH
52191: LD_INT 0
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 1
52200: NEG
52201: PUSH
52202: LD_INT 1
52204: NEG
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 1
52212: NEG
52213: PUSH
52214: LD_INT 2
52216: NEG
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 1
52224: PUSH
52225: LD_INT 2
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52243: LD_ADDR_VAR 0 40
52247: PUSH
52248: LD_INT 0
52250: PUSH
52251: LD_INT 0
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 0
52260: PUSH
52261: LD_INT 1
52263: NEG
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 1
52271: PUSH
52272: LD_INT 0
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 1
52281: PUSH
52282: LD_INT 1
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 0
52291: PUSH
52292: LD_INT 1
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 1
52301: NEG
52302: PUSH
52303: LD_INT 0
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 1
52312: NEG
52313: PUSH
52314: LD_INT 1
52316: NEG
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 1
52324: PUSH
52325: LD_INT 1
52327: NEG
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 1
52335: NEG
52336: PUSH
52337: LD_INT 1
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52355: LD_ADDR_VAR 0 41
52359: PUSH
52360: LD_INT 0
52362: PUSH
52363: LD_INT 0
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 0
52372: PUSH
52373: LD_INT 1
52375: NEG
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 1
52383: PUSH
52384: LD_INT 0
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 1
52393: PUSH
52394: LD_INT 1
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 0
52403: PUSH
52404: LD_INT 1
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 1
52413: NEG
52414: PUSH
52415: LD_INT 0
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 1
52424: NEG
52425: PUSH
52426: LD_INT 1
52428: NEG
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 1
52436: NEG
52437: PUSH
52438: LD_INT 2
52440: NEG
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 1
52448: PUSH
52449: LD_INT 1
52451: NEG
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 2
52459: PUSH
52460: LD_INT 0
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 2
52469: PUSH
52470: LD_INT 1
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 2
52479: PUSH
52480: LD_INT 2
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 1
52489: PUSH
52490: LD_INT 2
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 1
52499: NEG
52500: PUSH
52501: LD_INT 1
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 2
52510: NEG
52511: PUSH
52512: LD_INT 0
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 2
52521: NEG
52522: PUSH
52523: LD_INT 1
52525: NEG
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 2
52533: NEG
52534: PUSH
52535: LD_INT 2
52537: NEG
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 2
52545: NEG
52546: PUSH
52547: LD_INT 3
52549: NEG
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 2
52557: PUSH
52558: LD_INT 1
52560: NEG
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 3
52568: PUSH
52569: LD_INT 0
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 3
52578: PUSH
52579: LD_INT 1
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 3
52588: PUSH
52589: LD_INT 2
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 3
52598: PUSH
52599: LD_INT 3
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 2
52608: PUSH
52609: LD_INT 3
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 2
52618: NEG
52619: PUSH
52620: LD_INT 1
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 3
52629: NEG
52630: PUSH
52631: LD_INT 0
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 3
52640: NEG
52641: PUSH
52642: LD_INT 1
52644: NEG
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 3
52652: NEG
52653: PUSH
52654: LD_INT 2
52656: NEG
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 3
52664: NEG
52665: PUSH
52666: LD_INT 3
52668: NEG
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52705: LD_ADDR_VAR 0 42
52709: PUSH
52710: LD_INT 0
52712: PUSH
52713: LD_INT 0
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 0
52722: PUSH
52723: LD_INT 1
52725: NEG
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 1
52733: PUSH
52734: LD_INT 0
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 1
52743: PUSH
52744: LD_INT 1
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 0
52753: PUSH
52754: LD_INT 1
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 1
52763: NEG
52764: PUSH
52765: LD_INT 0
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 1
52774: NEG
52775: PUSH
52776: LD_INT 1
52778: NEG
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 1
52786: NEG
52787: PUSH
52788: LD_INT 2
52790: NEG
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 0
52798: PUSH
52799: LD_INT 2
52801: NEG
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 1
52809: PUSH
52810: LD_INT 1
52812: NEG
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 2
52820: PUSH
52821: LD_INT 1
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 2
52830: PUSH
52831: LD_INT 2
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 1
52840: PUSH
52841: LD_INT 2
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 0
52850: PUSH
52851: LD_INT 2
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 1
52860: NEG
52861: PUSH
52862: LD_INT 1
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 2
52871: NEG
52872: PUSH
52873: LD_INT 1
52875: NEG
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 2
52883: NEG
52884: PUSH
52885: LD_INT 2
52887: NEG
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 2
52895: NEG
52896: PUSH
52897: LD_INT 3
52899: NEG
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 1
52907: NEG
52908: PUSH
52909: LD_INT 3
52911: NEG
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 0
52919: PUSH
52920: LD_INT 3
52922: NEG
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 1
52930: PUSH
52931: LD_INT 2
52933: NEG
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 3
52941: PUSH
52942: LD_INT 2
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 3
52951: PUSH
52952: LD_INT 3
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 2
52961: PUSH
52962: LD_INT 3
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 1
52971: PUSH
52972: LD_INT 3
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 0
52981: PUSH
52982: LD_INT 3
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 1
52991: NEG
52992: PUSH
52993: LD_INT 2
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 3
53002: NEG
53003: PUSH
53004: LD_INT 2
53006: NEG
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 3
53014: NEG
53015: PUSH
53016: LD_INT 3
53018: NEG
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53055: LD_ADDR_VAR 0 43
53059: PUSH
53060: LD_INT 0
53062: PUSH
53063: LD_INT 0
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 0
53072: PUSH
53073: LD_INT 1
53075: NEG
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 1
53083: PUSH
53084: LD_INT 0
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 1
53093: PUSH
53094: LD_INT 1
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 0
53103: PUSH
53104: LD_INT 1
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 1
53113: NEG
53114: PUSH
53115: LD_INT 0
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 1
53124: NEG
53125: PUSH
53126: LD_INT 1
53128: NEG
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 1
53136: NEG
53137: PUSH
53138: LD_INT 2
53140: NEG
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 0
53148: PUSH
53149: LD_INT 2
53151: NEG
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 1
53159: PUSH
53160: LD_INT 1
53162: NEG
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 2
53170: PUSH
53171: LD_INT 0
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 2
53180: PUSH
53181: LD_INT 1
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 1
53190: PUSH
53191: LD_INT 2
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 0
53200: PUSH
53201: LD_INT 2
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 1
53210: NEG
53211: PUSH
53212: LD_INT 1
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: LD_INT 2
53221: NEG
53222: PUSH
53223: LD_INT 0
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 2
53232: NEG
53233: PUSH
53234: LD_INT 1
53236: NEG
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 1
53244: NEG
53245: PUSH
53246: LD_INT 3
53248: NEG
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: LD_INT 0
53256: PUSH
53257: LD_INT 3
53259: NEG
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 1
53267: PUSH
53268: LD_INT 2
53270: NEG
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 2
53278: PUSH
53279: LD_INT 1
53281: NEG
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 3
53289: PUSH
53290: LD_INT 0
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 3
53299: PUSH
53300: LD_INT 1
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 1
53309: PUSH
53310: LD_INT 3
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 0
53319: PUSH
53320: LD_INT 3
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 1
53329: NEG
53330: PUSH
53331: LD_INT 2
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 2
53340: NEG
53341: PUSH
53342: LD_INT 1
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 3
53351: NEG
53352: PUSH
53353: LD_INT 0
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 3
53362: NEG
53363: PUSH
53364: LD_INT 1
53366: NEG
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53403: LD_ADDR_VAR 0 44
53407: PUSH
53408: LD_INT 0
53410: PUSH
53411: LD_INT 0
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 0
53420: PUSH
53421: LD_INT 1
53423: NEG
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 1
53431: PUSH
53432: LD_INT 0
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 1
53441: PUSH
53442: LD_INT 1
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 0
53451: PUSH
53452: LD_INT 1
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 1
53461: NEG
53462: PUSH
53463: LD_INT 0
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 1
53472: NEG
53473: PUSH
53474: LD_INT 1
53476: NEG
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 1
53484: NEG
53485: PUSH
53486: LD_INT 2
53488: NEG
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 1
53496: PUSH
53497: LD_INT 1
53499: NEG
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 2
53507: PUSH
53508: LD_INT 0
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 2
53517: PUSH
53518: LD_INT 1
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 2
53527: PUSH
53528: LD_INT 2
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 1
53537: PUSH
53538: LD_INT 2
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 1
53547: NEG
53548: PUSH
53549: LD_INT 1
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 2
53558: NEG
53559: PUSH
53560: LD_INT 0
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 2
53569: NEG
53570: PUSH
53571: LD_INT 1
53573: NEG
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 2
53581: NEG
53582: PUSH
53583: LD_INT 2
53585: NEG
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 2
53593: NEG
53594: PUSH
53595: LD_INT 3
53597: NEG
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 2
53605: PUSH
53606: LD_INT 1
53608: NEG
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 3
53616: PUSH
53617: LD_INT 0
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 3
53626: PUSH
53627: LD_INT 1
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 3
53636: PUSH
53637: LD_INT 2
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 3
53646: PUSH
53647: LD_INT 3
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 2
53656: PUSH
53657: LD_INT 3
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 2
53666: NEG
53667: PUSH
53668: LD_INT 1
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 3
53677: NEG
53678: PUSH
53679: LD_INT 0
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 3
53688: NEG
53689: PUSH
53690: LD_INT 1
53692: NEG
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 3
53700: NEG
53701: PUSH
53702: LD_INT 2
53704: NEG
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 3
53712: NEG
53713: PUSH
53714: LD_INT 3
53716: NEG
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53753: LD_ADDR_VAR 0 45
53757: PUSH
53758: LD_INT 0
53760: PUSH
53761: LD_INT 0
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 0
53770: PUSH
53771: LD_INT 1
53773: NEG
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 1
53781: PUSH
53782: LD_INT 0
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 1
53791: PUSH
53792: LD_INT 1
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 0
53801: PUSH
53802: LD_INT 1
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 1
53811: NEG
53812: PUSH
53813: LD_INT 0
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 1
53822: NEG
53823: PUSH
53824: LD_INT 1
53826: NEG
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 1
53834: NEG
53835: PUSH
53836: LD_INT 2
53838: NEG
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 0
53846: PUSH
53847: LD_INT 2
53849: NEG
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 1
53857: PUSH
53858: LD_INT 1
53860: NEG
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 2
53868: PUSH
53869: LD_INT 1
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 2
53878: PUSH
53879: LD_INT 2
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 1
53888: PUSH
53889: LD_INT 2
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 0
53898: PUSH
53899: LD_INT 2
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 1
53908: NEG
53909: PUSH
53910: LD_INT 1
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 2
53919: NEG
53920: PUSH
53921: LD_INT 1
53923: NEG
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 2
53931: NEG
53932: PUSH
53933: LD_INT 2
53935: NEG
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 2
53943: NEG
53944: PUSH
53945: LD_INT 3
53947: NEG
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 1
53955: NEG
53956: PUSH
53957: LD_INT 3
53959: NEG
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 0
53967: PUSH
53968: LD_INT 3
53970: NEG
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 1
53978: PUSH
53979: LD_INT 2
53981: NEG
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 3
53989: PUSH
53990: LD_INT 2
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 3
53999: PUSH
54000: LD_INT 3
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 2
54009: PUSH
54010: LD_INT 3
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 1
54019: PUSH
54020: LD_INT 3
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 0
54029: PUSH
54030: LD_INT 3
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 1
54039: NEG
54040: PUSH
54041: LD_INT 2
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 3
54050: NEG
54051: PUSH
54052: LD_INT 2
54054: NEG
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 3
54062: NEG
54063: PUSH
54064: LD_INT 3
54066: NEG
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54103: LD_ADDR_VAR 0 46
54107: PUSH
54108: LD_INT 0
54110: PUSH
54111: LD_INT 0
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 0
54120: PUSH
54121: LD_INT 1
54123: NEG
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 1
54131: PUSH
54132: LD_INT 0
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 1
54141: PUSH
54142: LD_INT 1
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 0
54151: PUSH
54152: LD_INT 1
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 1
54161: NEG
54162: PUSH
54163: LD_INT 0
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 1
54172: NEG
54173: PUSH
54174: LD_INT 1
54176: NEG
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 1
54184: NEG
54185: PUSH
54186: LD_INT 2
54188: NEG
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 0
54196: PUSH
54197: LD_INT 2
54199: NEG
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 1
54207: PUSH
54208: LD_INT 1
54210: NEG
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 2
54218: PUSH
54219: LD_INT 0
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 2
54228: PUSH
54229: LD_INT 1
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 1
54238: PUSH
54239: LD_INT 2
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 0
54248: PUSH
54249: LD_INT 2
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 1
54258: NEG
54259: PUSH
54260: LD_INT 1
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 2
54269: NEG
54270: PUSH
54271: LD_INT 0
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 2
54280: NEG
54281: PUSH
54282: LD_INT 1
54284: NEG
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 1
54292: NEG
54293: PUSH
54294: LD_INT 3
54296: NEG
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 0
54304: PUSH
54305: LD_INT 3
54307: NEG
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 1
54315: PUSH
54316: LD_INT 2
54318: NEG
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 2
54326: PUSH
54327: LD_INT 1
54329: NEG
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 3
54337: PUSH
54338: LD_INT 0
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 3
54347: PUSH
54348: LD_INT 1
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 1
54357: PUSH
54358: LD_INT 3
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 0
54367: PUSH
54368: LD_INT 3
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 1
54377: NEG
54378: PUSH
54379: LD_INT 2
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 2
54388: NEG
54389: PUSH
54390: LD_INT 1
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 3
54399: NEG
54400: PUSH
54401: LD_INT 0
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 3
54410: NEG
54411: PUSH
54412: LD_INT 1
54414: NEG
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54451: LD_ADDR_VAR 0 47
54455: PUSH
54456: LD_INT 0
54458: PUSH
54459: LD_INT 0
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 0
54468: PUSH
54469: LD_INT 1
54471: NEG
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 1
54479: PUSH
54480: LD_INT 0
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 1
54489: PUSH
54490: LD_INT 1
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 0
54499: PUSH
54500: LD_INT 1
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 1
54509: NEG
54510: PUSH
54511: LD_INT 0
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 1
54520: NEG
54521: PUSH
54522: LD_INT 1
54524: NEG
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 1
54532: NEG
54533: PUSH
54534: LD_INT 2
54536: NEG
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 0
54544: PUSH
54545: LD_INT 2
54547: NEG
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 1
54555: PUSH
54556: LD_INT 1
54558: NEG
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 2
54566: NEG
54567: PUSH
54568: LD_INT 1
54570: NEG
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 2
54578: NEG
54579: PUSH
54580: LD_INT 2
54582: NEG
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54602: LD_ADDR_VAR 0 48
54606: PUSH
54607: LD_INT 0
54609: PUSH
54610: LD_INT 0
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 0
54619: PUSH
54620: LD_INT 1
54622: NEG
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 1
54630: PUSH
54631: LD_INT 0
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 1
54640: PUSH
54641: LD_INT 1
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 0
54650: PUSH
54651: LD_INT 1
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 1
54660: NEG
54661: PUSH
54662: LD_INT 0
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 1
54671: NEG
54672: PUSH
54673: LD_INT 1
54675: NEG
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 1
54683: NEG
54684: PUSH
54685: LD_INT 2
54687: NEG
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 0
54695: PUSH
54696: LD_INT 2
54698: NEG
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 1
54706: PUSH
54707: LD_INT 1
54709: NEG
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 2
54717: PUSH
54718: LD_INT 0
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 2
54727: PUSH
54728: LD_INT 1
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54749: LD_ADDR_VAR 0 49
54753: PUSH
54754: LD_INT 0
54756: PUSH
54757: LD_INT 0
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 0
54766: PUSH
54767: LD_INT 1
54769: NEG
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 1
54777: PUSH
54778: LD_INT 0
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 1
54787: PUSH
54788: LD_INT 1
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 0
54797: PUSH
54798: LD_INT 1
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 1
54807: NEG
54808: PUSH
54809: LD_INT 0
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 1
54818: NEG
54819: PUSH
54820: LD_INT 1
54822: NEG
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 1
54830: PUSH
54831: LD_INT 1
54833: NEG
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 2
54841: PUSH
54842: LD_INT 0
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 2
54851: PUSH
54852: LD_INT 1
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 2
54861: PUSH
54862: LD_INT 2
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 1
54871: PUSH
54872: LD_INT 2
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54893: LD_ADDR_VAR 0 50
54897: PUSH
54898: LD_INT 0
54900: PUSH
54901: LD_INT 0
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 0
54910: PUSH
54911: LD_INT 1
54913: NEG
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 1
54921: PUSH
54922: LD_INT 0
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 1
54931: PUSH
54932: LD_INT 1
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 0
54941: PUSH
54942: LD_INT 1
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 1
54951: NEG
54952: PUSH
54953: LD_INT 0
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 1
54962: NEG
54963: PUSH
54964: LD_INT 1
54966: NEG
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 2
54974: PUSH
54975: LD_INT 1
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 2
54984: PUSH
54985: LD_INT 2
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 1
54994: PUSH
54995: LD_INT 2
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 0
55004: PUSH
55005: LD_INT 2
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 1
55014: NEG
55015: PUSH
55016: LD_INT 1
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55037: LD_ADDR_VAR 0 51
55041: PUSH
55042: LD_INT 0
55044: PUSH
55045: LD_INT 0
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 0
55054: PUSH
55055: LD_INT 1
55057: NEG
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 1
55065: PUSH
55066: LD_INT 0
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 1
55075: PUSH
55076: LD_INT 1
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 0
55085: PUSH
55086: LD_INT 1
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 1
55095: NEG
55096: PUSH
55097: LD_INT 0
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 1
55106: NEG
55107: PUSH
55108: LD_INT 1
55110: NEG
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 1
55118: PUSH
55119: LD_INT 2
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 0
55128: PUSH
55129: LD_INT 2
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 1
55138: NEG
55139: PUSH
55140: LD_INT 1
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 2
55149: NEG
55150: PUSH
55151: LD_INT 0
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 2
55160: NEG
55161: PUSH
55162: LD_INT 1
55164: NEG
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55184: LD_ADDR_VAR 0 52
55188: PUSH
55189: LD_INT 0
55191: PUSH
55192: LD_INT 0
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 0
55201: PUSH
55202: LD_INT 1
55204: NEG
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 1
55212: PUSH
55213: LD_INT 0
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 1
55222: PUSH
55223: LD_INT 1
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 0
55232: PUSH
55233: LD_INT 1
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 1
55242: NEG
55243: PUSH
55244: LD_INT 0
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 1
55253: NEG
55254: PUSH
55255: LD_INT 1
55257: NEG
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 1
55265: NEG
55266: PUSH
55267: LD_INT 2
55269: NEG
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 1
55277: NEG
55278: PUSH
55279: LD_INT 1
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 2
55288: NEG
55289: PUSH
55290: LD_INT 0
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 2
55299: NEG
55300: PUSH
55301: LD_INT 1
55303: NEG
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 2
55311: NEG
55312: PUSH
55313: LD_INT 2
55315: NEG
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55335: LD_ADDR_VAR 0 53
55339: PUSH
55340: LD_INT 0
55342: PUSH
55343: LD_INT 0
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 0
55352: PUSH
55353: LD_INT 1
55355: NEG
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 1
55363: PUSH
55364: LD_INT 0
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 1
55373: PUSH
55374: LD_INT 1
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 0
55383: PUSH
55384: LD_INT 1
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 1
55393: NEG
55394: PUSH
55395: LD_INT 0
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 1
55404: NEG
55405: PUSH
55406: LD_INT 1
55408: NEG
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 1
55416: NEG
55417: PUSH
55418: LD_INT 2
55420: NEG
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: LD_INT 0
55428: PUSH
55429: LD_INT 2
55431: NEG
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 1
55439: PUSH
55440: LD_INT 1
55442: NEG
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 2
55450: PUSH
55451: LD_INT 0
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 2
55460: PUSH
55461: LD_INT 1
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 2
55470: PUSH
55471: LD_INT 2
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 1
55480: PUSH
55481: LD_INT 2
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 0
55490: PUSH
55491: LD_INT 2
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 1
55500: NEG
55501: PUSH
55502: LD_INT 1
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 2
55511: NEG
55512: PUSH
55513: LD_INT 0
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 2
55522: NEG
55523: PUSH
55524: LD_INT 1
55526: NEG
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 2
55534: NEG
55535: PUSH
55536: LD_INT 2
55538: NEG
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55565: LD_ADDR_VAR 0 54
55569: PUSH
55570: LD_INT 0
55572: PUSH
55573: LD_INT 0
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 0
55582: PUSH
55583: LD_INT 1
55585: NEG
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 1
55593: PUSH
55594: LD_INT 0
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 1
55603: PUSH
55604: LD_INT 1
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: LD_INT 0
55613: PUSH
55614: LD_INT 1
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 1
55623: NEG
55624: PUSH
55625: LD_INT 0
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 1
55634: NEG
55635: PUSH
55636: LD_INT 1
55638: NEG
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 1
55646: NEG
55647: PUSH
55648: LD_INT 2
55650: NEG
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 0
55658: PUSH
55659: LD_INT 2
55661: NEG
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 1
55669: PUSH
55670: LD_INT 1
55672: NEG
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 2
55680: PUSH
55681: LD_INT 0
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 2
55690: PUSH
55691: LD_INT 1
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 2
55700: PUSH
55701: LD_INT 2
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 1
55710: PUSH
55711: LD_INT 2
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 0
55720: PUSH
55721: LD_INT 2
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 1
55730: NEG
55731: PUSH
55732: LD_INT 1
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 2
55741: NEG
55742: PUSH
55743: LD_INT 0
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 2
55752: NEG
55753: PUSH
55754: LD_INT 1
55756: NEG
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 2
55764: NEG
55765: PUSH
55766: LD_INT 2
55768: NEG
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55795: LD_ADDR_VAR 0 55
55799: PUSH
55800: LD_INT 0
55802: PUSH
55803: LD_INT 0
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 0
55812: PUSH
55813: LD_INT 1
55815: NEG
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 1
55823: PUSH
55824: LD_INT 0
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 1
55833: PUSH
55834: LD_INT 1
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 0
55843: PUSH
55844: LD_INT 1
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 1
55853: NEG
55854: PUSH
55855: LD_INT 0
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 1
55864: NEG
55865: PUSH
55866: LD_INT 1
55868: NEG
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 1
55876: NEG
55877: PUSH
55878: LD_INT 2
55880: NEG
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 0
55888: PUSH
55889: LD_INT 2
55891: NEG
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 1
55899: PUSH
55900: LD_INT 1
55902: NEG
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 2
55910: PUSH
55911: LD_INT 0
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 2
55920: PUSH
55921: LD_INT 1
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 2
55930: PUSH
55931: LD_INT 2
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 1
55940: PUSH
55941: LD_INT 2
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 0
55950: PUSH
55951: LD_INT 2
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 1
55960: NEG
55961: PUSH
55962: LD_INT 1
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 2
55971: NEG
55972: PUSH
55973: LD_INT 0
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 2
55982: NEG
55983: PUSH
55984: LD_INT 1
55986: NEG
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 2
55994: NEG
55995: PUSH
55996: LD_INT 2
55998: NEG
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56025: LD_ADDR_VAR 0 56
56029: PUSH
56030: LD_INT 0
56032: PUSH
56033: LD_INT 0
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 0
56042: PUSH
56043: LD_INT 1
56045: NEG
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 1
56053: PUSH
56054: LD_INT 0
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 1
56063: PUSH
56064: LD_INT 1
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 0
56073: PUSH
56074: LD_INT 1
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 1
56083: NEG
56084: PUSH
56085: LD_INT 0
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 1
56094: NEG
56095: PUSH
56096: LD_INT 1
56098: NEG
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 1
56106: NEG
56107: PUSH
56108: LD_INT 2
56110: NEG
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 0
56118: PUSH
56119: LD_INT 2
56121: NEG
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 1
56129: PUSH
56130: LD_INT 1
56132: NEG
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 2
56140: PUSH
56141: LD_INT 0
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 2
56150: PUSH
56151: LD_INT 1
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 2
56160: PUSH
56161: LD_INT 2
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 1
56170: PUSH
56171: LD_INT 2
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 0
56180: PUSH
56181: LD_INT 2
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 1
56190: NEG
56191: PUSH
56192: LD_INT 1
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 2
56201: NEG
56202: PUSH
56203: LD_INT 0
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 2
56212: NEG
56213: PUSH
56214: LD_INT 1
56216: NEG
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 2
56224: NEG
56225: PUSH
56226: LD_INT 2
56228: NEG
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56255: LD_ADDR_VAR 0 57
56259: PUSH
56260: LD_INT 0
56262: PUSH
56263: LD_INT 0
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 0
56272: PUSH
56273: LD_INT 1
56275: NEG
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: PUSH
56281: LD_INT 1
56283: PUSH
56284: LD_INT 0
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 1
56293: PUSH
56294: LD_INT 1
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 0
56303: PUSH
56304: LD_INT 1
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 1
56313: NEG
56314: PUSH
56315: LD_INT 0
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 1
56324: NEG
56325: PUSH
56326: LD_INT 1
56328: NEG
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 1
56336: NEG
56337: PUSH
56338: LD_INT 2
56340: NEG
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 0
56348: PUSH
56349: LD_INT 2
56351: NEG
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 1
56359: PUSH
56360: LD_INT 1
56362: NEG
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: LD_INT 2
56370: PUSH
56371: LD_INT 0
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 2
56380: PUSH
56381: LD_INT 1
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 2
56390: PUSH
56391: LD_INT 2
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 1
56400: PUSH
56401: LD_INT 2
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 0
56410: PUSH
56411: LD_INT 2
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 1
56420: NEG
56421: PUSH
56422: LD_INT 1
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 2
56431: NEG
56432: PUSH
56433: LD_INT 0
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 2
56442: NEG
56443: PUSH
56444: LD_INT 1
56446: NEG
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 2
56454: NEG
56455: PUSH
56456: LD_INT 2
56458: NEG
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56485: LD_ADDR_VAR 0 58
56489: PUSH
56490: LD_INT 0
56492: PUSH
56493: LD_INT 0
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 0
56502: PUSH
56503: LD_INT 1
56505: NEG
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 1
56513: PUSH
56514: LD_INT 0
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 1
56523: PUSH
56524: LD_INT 1
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 0
56533: PUSH
56534: LD_INT 1
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 1
56543: NEG
56544: PUSH
56545: LD_INT 0
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 1
56554: NEG
56555: PUSH
56556: LD_INT 1
56558: NEG
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 1
56566: NEG
56567: PUSH
56568: LD_INT 2
56570: NEG
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 0
56578: PUSH
56579: LD_INT 2
56581: NEG
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 1
56589: PUSH
56590: LD_INT 1
56592: NEG
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 2
56600: PUSH
56601: LD_INT 0
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 2
56610: PUSH
56611: LD_INT 1
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 2
56620: PUSH
56621: LD_INT 2
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 1
56630: PUSH
56631: LD_INT 2
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 0
56640: PUSH
56641: LD_INT 2
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 1
56650: NEG
56651: PUSH
56652: LD_INT 1
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 2
56661: NEG
56662: PUSH
56663: LD_INT 0
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 2
56672: NEG
56673: PUSH
56674: LD_INT 1
56676: NEG
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 2
56684: NEG
56685: PUSH
56686: LD_INT 2
56688: NEG
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: LIST
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56715: LD_ADDR_VAR 0 59
56719: PUSH
56720: LD_INT 0
56722: PUSH
56723: LD_INT 0
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 0
56732: PUSH
56733: LD_INT 1
56735: NEG
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 1
56743: PUSH
56744: LD_INT 0
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 1
56753: PUSH
56754: LD_INT 1
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 0
56763: PUSH
56764: LD_INT 1
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 1
56773: NEG
56774: PUSH
56775: LD_INT 0
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 1
56784: NEG
56785: PUSH
56786: LD_INT 1
56788: NEG
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56803: LD_ADDR_VAR 0 60
56807: PUSH
56808: LD_INT 0
56810: PUSH
56811: LD_INT 0
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 0
56820: PUSH
56821: LD_INT 1
56823: NEG
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 1
56831: PUSH
56832: LD_INT 0
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 1
56841: PUSH
56842: LD_INT 1
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 0
56851: PUSH
56852: LD_INT 1
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 1
56861: NEG
56862: PUSH
56863: LD_INT 0
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 1
56872: NEG
56873: PUSH
56874: LD_INT 1
56876: NEG
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: LIST
56890: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56891: LD_ADDR_VAR 0 61
56895: PUSH
56896: LD_INT 0
56898: PUSH
56899: LD_INT 0
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 0
56908: PUSH
56909: LD_INT 1
56911: NEG
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 1
56919: PUSH
56920: LD_INT 0
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 1
56929: PUSH
56930: LD_INT 1
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 0
56939: PUSH
56940: LD_INT 1
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 1
56949: NEG
56950: PUSH
56951: LD_INT 0
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 1
56960: NEG
56961: PUSH
56962: LD_INT 1
56964: NEG
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56979: LD_ADDR_VAR 0 62
56983: PUSH
56984: LD_INT 0
56986: PUSH
56987: LD_INT 0
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 0
56996: PUSH
56997: LD_INT 1
56999: NEG
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 1
57007: PUSH
57008: LD_INT 0
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 1
57017: PUSH
57018: LD_INT 1
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 0
57027: PUSH
57028: LD_INT 1
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 1
57037: NEG
57038: PUSH
57039: LD_INT 0
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 1
57048: NEG
57049: PUSH
57050: LD_INT 1
57052: NEG
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57067: LD_ADDR_VAR 0 63
57071: PUSH
57072: LD_INT 0
57074: PUSH
57075: LD_INT 0
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 0
57084: PUSH
57085: LD_INT 1
57087: NEG
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 1
57095: PUSH
57096: LD_INT 0
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 1
57105: PUSH
57106: LD_INT 1
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: LD_INT 0
57115: PUSH
57116: LD_INT 1
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 1
57125: NEG
57126: PUSH
57127: LD_INT 0
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 1
57136: NEG
57137: PUSH
57138: LD_INT 1
57140: NEG
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57155: LD_ADDR_VAR 0 64
57159: PUSH
57160: LD_INT 0
57162: PUSH
57163: LD_INT 0
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 0
57172: PUSH
57173: LD_INT 1
57175: NEG
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 1
57183: PUSH
57184: LD_INT 0
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 1
57193: PUSH
57194: LD_INT 1
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 0
57203: PUSH
57204: LD_INT 1
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 1
57213: NEG
57214: PUSH
57215: LD_INT 0
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 1
57224: NEG
57225: PUSH
57226: LD_INT 1
57228: NEG
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: ST_TO_ADDR
// end ; 1 :
57243: GO 63140
57245: LD_INT 1
57247: DOUBLE
57248: EQUAL
57249: IFTRUE 57253
57251: GO 59876
57253: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57254: LD_ADDR_VAR 0 11
57258: PUSH
57259: LD_INT 1
57261: NEG
57262: PUSH
57263: LD_INT 3
57265: NEG
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 0
57273: PUSH
57274: LD_INT 3
57276: NEG
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 1
57284: PUSH
57285: LD_INT 2
57287: NEG
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: LIST
57297: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57298: LD_ADDR_VAR 0 12
57302: PUSH
57303: LD_INT 2
57305: PUSH
57306: LD_INT 1
57308: NEG
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 3
57316: PUSH
57317: LD_INT 0
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 3
57326: PUSH
57327: LD_INT 1
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: LIST
57338: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57339: LD_ADDR_VAR 0 13
57343: PUSH
57344: LD_INT 3
57346: PUSH
57347: LD_INT 2
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 3
57356: PUSH
57357: LD_INT 3
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 2
57366: PUSH
57367: LD_INT 3
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: LIST
57378: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57379: LD_ADDR_VAR 0 14
57383: PUSH
57384: LD_INT 1
57386: PUSH
57387: LD_INT 3
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 0
57396: PUSH
57397: LD_INT 3
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 1
57406: NEG
57407: PUSH
57408: LD_INT 2
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: LIST
57419: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57420: LD_ADDR_VAR 0 15
57424: PUSH
57425: LD_INT 2
57427: NEG
57428: PUSH
57429: LD_INT 1
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 3
57438: NEG
57439: PUSH
57440: LD_INT 0
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 3
57449: NEG
57450: PUSH
57451: LD_INT 1
57453: NEG
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: LIST
57463: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57464: LD_ADDR_VAR 0 16
57468: PUSH
57469: LD_INT 2
57471: NEG
57472: PUSH
57473: LD_INT 3
57475: NEG
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 3
57483: NEG
57484: PUSH
57485: LD_INT 2
57487: NEG
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 3
57495: NEG
57496: PUSH
57497: LD_INT 3
57499: NEG
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: LIST
57509: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57510: LD_ADDR_VAR 0 17
57514: PUSH
57515: LD_INT 1
57517: NEG
57518: PUSH
57519: LD_INT 3
57521: NEG
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 0
57529: PUSH
57530: LD_INT 3
57532: NEG
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 1
57540: PUSH
57541: LD_INT 2
57543: NEG
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: LIST
57553: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57554: LD_ADDR_VAR 0 18
57558: PUSH
57559: LD_INT 2
57561: PUSH
57562: LD_INT 1
57564: NEG
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: LD_INT 3
57572: PUSH
57573: LD_INT 0
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 3
57582: PUSH
57583: LD_INT 1
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: LIST
57594: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57595: LD_ADDR_VAR 0 19
57599: PUSH
57600: LD_INT 3
57602: PUSH
57603: LD_INT 2
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 3
57612: PUSH
57613: LD_INT 3
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 2
57622: PUSH
57623: LD_INT 3
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: LIST
57634: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57635: LD_ADDR_VAR 0 20
57639: PUSH
57640: LD_INT 1
57642: PUSH
57643: LD_INT 3
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 0
57652: PUSH
57653: LD_INT 3
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 1
57662: NEG
57663: PUSH
57664: LD_INT 2
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: LIST
57675: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57676: LD_ADDR_VAR 0 21
57680: PUSH
57681: LD_INT 2
57683: NEG
57684: PUSH
57685: LD_INT 1
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 3
57694: NEG
57695: PUSH
57696: LD_INT 0
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 3
57705: NEG
57706: PUSH
57707: LD_INT 1
57709: NEG
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: LIST
57719: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57720: LD_ADDR_VAR 0 22
57724: PUSH
57725: LD_INT 2
57727: NEG
57728: PUSH
57729: LD_INT 3
57731: NEG
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 3
57739: NEG
57740: PUSH
57741: LD_INT 2
57743: NEG
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 3
57751: NEG
57752: PUSH
57753: LD_INT 3
57755: NEG
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: LIST
57765: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57766: LD_ADDR_VAR 0 23
57770: PUSH
57771: LD_INT 0
57773: PUSH
57774: LD_INT 3
57776: NEG
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 1
57784: NEG
57785: PUSH
57786: LD_INT 4
57788: NEG
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 1
57796: PUSH
57797: LD_INT 3
57799: NEG
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: LIST
57809: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57810: LD_ADDR_VAR 0 24
57814: PUSH
57815: LD_INT 3
57817: PUSH
57818: LD_INT 0
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 3
57827: PUSH
57828: LD_INT 1
57830: NEG
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 4
57838: PUSH
57839: LD_INT 1
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: LIST
57850: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57851: LD_ADDR_VAR 0 25
57855: PUSH
57856: LD_INT 3
57858: PUSH
57859: LD_INT 3
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: LD_INT 4
57868: PUSH
57869: LD_INT 3
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: LD_INT 3
57878: PUSH
57879: LD_INT 4
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: LIST
57890: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57891: LD_ADDR_VAR 0 26
57895: PUSH
57896: LD_INT 0
57898: PUSH
57899: LD_INT 3
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 1
57908: PUSH
57909: LD_INT 4
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 1
57918: NEG
57919: PUSH
57920: LD_INT 3
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: LIST
57931: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57932: LD_ADDR_VAR 0 27
57936: PUSH
57937: LD_INT 3
57939: NEG
57940: PUSH
57941: LD_INT 0
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 3
57950: NEG
57951: PUSH
57952: LD_INT 1
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 4
57961: NEG
57962: PUSH
57963: LD_INT 1
57965: NEG
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: LIST
57975: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57976: LD_ADDR_VAR 0 28
57980: PUSH
57981: LD_INT 3
57983: NEG
57984: PUSH
57985: LD_INT 3
57987: NEG
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 3
57995: NEG
57996: PUSH
57997: LD_INT 4
57999: NEG
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 4
58007: NEG
58008: PUSH
58009: LD_INT 3
58011: NEG
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: LIST
58021: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58022: LD_ADDR_VAR 0 29
58026: PUSH
58027: LD_INT 1
58029: NEG
58030: PUSH
58031: LD_INT 3
58033: NEG
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 0
58041: PUSH
58042: LD_INT 3
58044: NEG
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 1
58052: PUSH
58053: LD_INT 2
58055: NEG
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 1
58063: NEG
58064: PUSH
58065: LD_INT 4
58067: NEG
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 0
58075: PUSH
58076: LD_INT 4
58078: NEG
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 1
58086: PUSH
58087: LD_INT 3
58089: NEG
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: LD_INT 1
58097: NEG
58098: PUSH
58099: LD_INT 5
58101: NEG
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 0
58109: PUSH
58110: LD_INT 5
58112: NEG
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 1
58120: PUSH
58121: LD_INT 4
58123: NEG
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 1
58131: NEG
58132: PUSH
58133: LD_INT 6
58135: NEG
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 0
58143: PUSH
58144: LD_INT 6
58146: NEG
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 1
58154: PUSH
58155: LD_INT 5
58157: NEG
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58177: LD_ADDR_VAR 0 30
58181: PUSH
58182: LD_INT 2
58184: PUSH
58185: LD_INT 1
58187: NEG
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 3
58195: PUSH
58196: LD_INT 0
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 3
58205: PUSH
58206: LD_INT 1
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 3
58215: PUSH
58216: LD_INT 1
58218: NEG
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 4
58226: PUSH
58227: LD_INT 0
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 4
58236: PUSH
58237: LD_INT 1
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 4
58246: PUSH
58247: LD_INT 1
58249: NEG
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 5
58257: PUSH
58258: LD_INT 0
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 5
58267: PUSH
58268: LD_INT 1
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 5
58277: PUSH
58278: LD_INT 1
58280: NEG
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 6
58288: PUSH
58289: LD_INT 0
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 6
58298: PUSH
58299: LD_INT 1
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58320: LD_ADDR_VAR 0 31
58324: PUSH
58325: LD_INT 3
58327: PUSH
58328: LD_INT 2
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 3
58337: PUSH
58338: LD_INT 3
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PUSH
58345: LD_INT 2
58347: PUSH
58348: LD_INT 3
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 4
58357: PUSH
58358: LD_INT 3
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 4
58367: PUSH
58368: LD_INT 4
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 3
58377: PUSH
58378: LD_INT 4
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 5
58387: PUSH
58388: LD_INT 4
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 5
58397: PUSH
58398: LD_INT 5
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 4
58407: PUSH
58408: LD_INT 5
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 6
58417: PUSH
58418: LD_INT 5
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 6
58427: PUSH
58428: LD_INT 6
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 5
58437: PUSH
58438: LD_INT 6
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58459: LD_ADDR_VAR 0 32
58463: PUSH
58464: LD_INT 1
58466: PUSH
58467: LD_INT 3
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 0
58476: PUSH
58477: LD_INT 3
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 1
58486: NEG
58487: PUSH
58488: LD_INT 2
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: LD_INT 1
58497: PUSH
58498: LD_INT 4
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 0
58507: PUSH
58508: LD_INT 4
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: LD_INT 1
58517: NEG
58518: PUSH
58519: LD_INT 3
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 1
58528: PUSH
58529: LD_INT 5
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 0
58538: PUSH
58539: LD_INT 5
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 1
58548: NEG
58549: PUSH
58550: LD_INT 4
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 1
58559: PUSH
58560: LD_INT 6
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 0
58569: PUSH
58570: LD_INT 6
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 1
58579: NEG
58580: PUSH
58581: LD_INT 5
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58602: LD_ADDR_VAR 0 33
58606: PUSH
58607: LD_INT 2
58609: NEG
58610: PUSH
58611: LD_INT 1
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 3
58620: NEG
58621: PUSH
58622: LD_INT 0
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 3
58631: NEG
58632: PUSH
58633: LD_INT 1
58635: NEG
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 3
58643: NEG
58644: PUSH
58645: LD_INT 1
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 4
58654: NEG
58655: PUSH
58656: LD_INT 0
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 4
58665: NEG
58666: PUSH
58667: LD_INT 1
58669: NEG
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 4
58677: NEG
58678: PUSH
58679: LD_INT 1
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: LD_INT 5
58688: NEG
58689: PUSH
58690: LD_INT 0
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 5
58699: NEG
58700: PUSH
58701: LD_INT 1
58703: NEG
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: LD_INT 5
58711: NEG
58712: PUSH
58713: LD_INT 1
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: LD_INT 6
58722: NEG
58723: PUSH
58724: LD_INT 0
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 6
58733: NEG
58734: PUSH
58735: LD_INT 1
58737: NEG
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: LIST
58752: LIST
58753: LIST
58754: LIST
58755: LIST
58756: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58757: LD_ADDR_VAR 0 34
58761: PUSH
58762: LD_INT 2
58764: NEG
58765: PUSH
58766: LD_INT 3
58768: NEG
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 3
58776: NEG
58777: PUSH
58778: LD_INT 2
58780: NEG
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 3
58788: NEG
58789: PUSH
58790: LD_INT 3
58792: NEG
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 3
58800: NEG
58801: PUSH
58802: LD_INT 4
58804: NEG
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 4
58812: NEG
58813: PUSH
58814: LD_INT 3
58816: NEG
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 4
58824: NEG
58825: PUSH
58826: LD_INT 4
58828: NEG
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: PUSH
58834: LD_INT 4
58836: NEG
58837: PUSH
58838: LD_INT 5
58840: NEG
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 5
58848: NEG
58849: PUSH
58850: LD_INT 4
58852: NEG
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: PUSH
58858: LD_INT 5
58860: NEG
58861: PUSH
58862: LD_INT 5
58864: NEG
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: LD_INT 5
58872: NEG
58873: PUSH
58874: LD_INT 6
58876: NEG
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 6
58884: NEG
58885: PUSH
58886: LD_INT 5
58888: NEG
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 6
58896: NEG
58897: PUSH
58898: LD_INT 6
58900: NEG
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: LIST
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: LIST
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58920: LD_ADDR_VAR 0 41
58924: PUSH
58925: LD_INT 0
58927: PUSH
58928: LD_INT 2
58930: NEG
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 1
58938: NEG
58939: PUSH
58940: LD_INT 3
58942: NEG
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 1
58950: PUSH
58951: LD_INT 2
58953: NEG
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: LIST
58963: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58964: LD_ADDR_VAR 0 42
58968: PUSH
58969: LD_INT 2
58971: PUSH
58972: LD_INT 0
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 2
58981: PUSH
58982: LD_INT 1
58984: NEG
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 3
58992: PUSH
58993: LD_INT 1
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: LIST
59004: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59005: LD_ADDR_VAR 0 43
59009: PUSH
59010: LD_INT 2
59012: PUSH
59013: LD_INT 2
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 3
59022: PUSH
59023: LD_INT 2
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 2
59032: PUSH
59033: LD_INT 3
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: LIST
59044: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59045: LD_ADDR_VAR 0 44
59049: PUSH
59050: LD_INT 0
59052: PUSH
59053: LD_INT 2
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 1
59062: PUSH
59063: LD_INT 3
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 1
59072: NEG
59073: PUSH
59074: LD_INT 2
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: LIST
59085: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59086: LD_ADDR_VAR 0 45
59090: PUSH
59091: LD_INT 2
59093: NEG
59094: PUSH
59095: LD_INT 0
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 2
59104: NEG
59105: PUSH
59106: LD_INT 1
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 3
59115: NEG
59116: PUSH
59117: LD_INT 1
59119: NEG
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: LIST
59129: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59130: LD_ADDR_VAR 0 46
59134: PUSH
59135: LD_INT 2
59137: NEG
59138: PUSH
59139: LD_INT 2
59141: NEG
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 2
59149: NEG
59150: PUSH
59151: LD_INT 3
59153: NEG
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: LD_INT 3
59161: NEG
59162: PUSH
59163: LD_INT 2
59165: NEG
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: LIST
59175: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59176: LD_ADDR_VAR 0 47
59180: PUSH
59181: LD_INT 2
59183: NEG
59184: PUSH
59185: LD_INT 3
59187: NEG
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: PUSH
59193: LD_INT 1
59195: NEG
59196: PUSH
59197: LD_INT 3
59199: NEG
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59209: LD_ADDR_VAR 0 48
59213: PUSH
59214: LD_INT 1
59216: PUSH
59217: LD_INT 2
59219: NEG
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 2
59227: PUSH
59228: LD_INT 1
59230: NEG
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
59240: LD_ADDR_VAR 0 49
59244: PUSH
59245: LD_INT 3
59247: PUSH
59248: LD_INT 1
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 3
59257: PUSH
59258: LD_INT 2
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
59269: LD_ADDR_VAR 0 50
59273: PUSH
59274: LD_INT 2
59276: PUSH
59277: LD_INT 3
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 1
59286: PUSH
59287: LD_INT 3
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59298: LD_ADDR_VAR 0 51
59302: PUSH
59303: LD_INT 1
59305: NEG
59306: PUSH
59307: LD_INT 2
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 2
59316: NEG
59317: PUSH
59318: LD_INT 1
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59329: LD_ADDR_VAR 0 52
59333: PUSH
59334: LD_INT 3
59336: NEG
59337: PUSH
59338: LD_INT 1
59340: NEG
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 3
59348: NEG
59349: PUSH
59350: LD_INT 2
59352: NEG
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59362: LD_ADDR_VAR 0 53
59366: PUSH
59367: LD_INT 1
59369: NEG
59370: PUSH
59371: LD_INT 3
59373: NEG
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 0
59381: PUSH
59382: LD_INT 3
59384: NEG
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 1
59392: PUSH
59393: LD_INT 2
59395: NEG
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: LIST
59405: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59406: LD_ADDR_VAR 0 54
59410: PUSH
59411: LD_INT 2
59413: PUSH
59414: LD_INT 1
59416: NEG
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 3
59424: PUSH
59425: LD_INT 0
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 3
59434: PUSH
59435: LD_INT 1
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: LIST
59446: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59447: LD_ADDR_VAR 0 55
59451: PUSH
59452: LD_INT 3
59454: PUSH
59455: LD_INT 2
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 3
59464: PUSH
59465: LD_INT 3
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 2
59474: PUSH
59475: LD_INT 3
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: LIST
59486: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59487: LD_ADDR_VAR 0 56
59491: PUSH
59492: LD_INT 1
59494: PUSH
59495: LD_INT 3
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 0
59504: PUSH
59505: LD_INT 3
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 1
59514: NEG
59515: PUSH
59516: LD_INT 2
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: LIST
59527: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59528: LD_ADDR_VAR 0 57
59532: PUSH
59533: LD_INT 2
59535: NEG
59536: PUSH
59537: LD_INT 1
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: LD_INT 3
59546: NEG
59547: PUSH
59548: LD_INT 0
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 3
59557: NEG
59558: PUSH
59559: LD_INT 1
59561: NEG
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: LIST
59571: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59572: LD_ADDR_VAR 0 58
59576: PUSH
59577: LD_INT 2
59579: NEG
59580: PUSH
59581: LD_INT 3
59583: NEG
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: LD_INT 3
59591: NEG
59592: PUSH
59593: LD_INT 2
59595: NEG
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: LD_INT 3
59603: NEG
59604: PUSH
59605: LD_INT 3
59607: NEG
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: LIST
59617: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59618: LD_ADDR_VAR 0 59
59622: PUSH
59623: LD_INT 1
59625: NEG
59626: PUSH
59627: LD_INT 2
59629: NEG
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: LD_INT 0
59637: PUSH
59638: LD_INT 2
59640: NEG
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 1
59648: PUSH
59649: LD_INT 1
59651: NEG
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: LIST
59661: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59662: LD_ADDR_VAR 0 60
59666: PUSH
59667: LD_INT 1
59669: PUSH
59670: LD_INT 1
59672: NEG
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 2
59680: PUSH
59681: LD_INT 0
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 2
59690: PUSH
59691: LD_INT 1
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: LIST
59702: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59703: LD_ADDR_VAR 0 61
59707: PUSH
59708: LD_INT 2
59710: PUSH
59711: LD_INT 1
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 2
59720: PUSH
59721: LD_INT 2
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 1
59730: PUSH
59731: LD_INT 2
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: LIST
59742: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59743: LD_ADDR_VAR 0 62
59747: PUSH
59748: LD_INT 1
59750: PUSH
59751: LD_INT 2
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 0
59760: PUSH
59761: LD_INT 2
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 1
59770: NEG
59771: PUSH
59772: LD_INT 1
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: LIST
59783: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59784: LD_ADDR_VAR 0 63
59788: PUSH
59789: LD_INT 1
59791: NEG
59792: PUSH
59793: LD_INT 1
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 2
59802: NEG
59803: PUSH
59804: LD_INT 0
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 2
59813: NEG
59814: PUSH
59815: LD_INT 1
59817: NEG
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: LIST
59827: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59828: LD_ADDR_VAR 0 64
59832: PUSH
59833: LD_INT 1
59835: NEG
59836: PUSH
59837: LD_INT 2
59839: NEG
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 2
59847: NEG
59848: PUSH
59849: LD_INT 1
59851: NEG
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 2
59859: NEG
59860: PUSH
59861: LD_INT 2
59863: NEG
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: LIST
59873: ST_TO_ADDR
// end ; 2 :
59874: GO 63140
59876: LD_INT 2
59878: DOUBLE
59879: EQUAL
59880: IFTRUE 59884
59882: GO 63139
59884: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59885: LD_ADDR_VAR 0 29
59889: PUSH
59890: LD_INT 4
59892: PUSH
59893: LD_INT 0
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 4
59902: PUSH
59903: LD_INT 1
59905: NEG
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 5
59913: PUSH
59914: LD_INT 0
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 5
59923: PUSH
59924: LD_INT 1
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 4
59933: PUSH
59934: LD_INT 1
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 3
59943: PUSH
59944: LD_INT 0
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 3
59953: PUSH
59954: LD_INT 1
59956: NEG
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 3
59964: PUSH
59965: LD_INT 2
59967: NEG
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 5
59975: PUSH
59976: LD_INT 2
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 3
59985: PUSH
59986: LD_INT 3
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 3
59995: PUSH
59996: LD_INT 2
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 4
60005: PUSH
60006: LD_INT 3
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 4
60015: PUSH
60016: LD_INT 4
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 3
60025: PUSH
60026: LD_INT 4
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PUSH
60033: LD_INT 2
60035: PUSH
60036: LD_INT 3
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PUSH
60043: LD_INT 2
60045: PUSH
60046: LD_INT 2
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_INT 4
60055: PUSH
60056: LD_INT 2
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: PUSH
60063: LD_INT 2
60065: PUSH
60066: LD_INT 4
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 0
60075: PUSH
60076: LD_INT 4
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: LD_INT 0
60085: PUSH
60086: LD_INT 3
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: PUSH
60093: LD_INT 1
60095: PUSH
60096: LD_INT 4
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: LD_INT 1
60105: PUSH
60106: LD_INT 5
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: LD_INT 0
60115: PUSH
60116: LD_INT 5
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: LD_INT 1
60125: NEG
60126: PUSH
60127: LD_INT 4
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: LD_INT 1
60136: NEG
60137: PUSH
60138: LD_INT 3
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 2
60147: PUSH
60148: LD_INT 5
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 2
60157: NEG
60158: PUSH
60159: LD_INT 3
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 3
60168: NEG
60169: PUSH
60170: LD_INT 0
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 3
60179: NEG
60180: PUSH
60181: LD_INT 1
60183: NEG
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 2
60191: NEG
60192: PUSH
60193: LD_INT 0
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 2
60202: NEG
60203: PUSH
60204: LD_INT 1
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 3
60213: NEG
60214: PUSH
60215: LD_INT 1
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 4
60224: NEG
60225: PUSH
60226: LD_INT 0
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 4
60235: NEG
60236: PUSH
60237: LD_INT 1
60239: NEG
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: LD_INT 4
60247: NEG
60248: PUSH
60249: LD_INT 2
60251: NEG
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 2
60259: NEG
60260: PUSH
60261: LD_INT 2
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: LD_INT 4
60270: NEG
60271: PUSH
60272: LD_INT 4
60274: NEG
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 4
60282: NEG
60283: PUSH
60284: LD_INT 5
60286: NEG
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 3
60294: NEG
60295: PUSH
60296: LD_INT 4
60298: NEG
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 3
60306: NEG
60307: PUSH
60308: LD_INT 3
60310: NEG
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 4
60318: NEG
60319: PUSH
60320: LD_INT 3
60322: NEG
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: LD_INT 5
60330: NEG
60331: PUSH
60332: LD_INT 4
60334: NEG
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: LD_INT 5
60342: NEG
60343: PUSH
60344: LD_INT 5
60346: NEG
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: LD_INT 3
60354: NEG
60355: PUSH
60356: LD_INT 5
60358: NEG
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: LD_INT 5
60366: NEG
60367: PUSH
60368: LD_INT 3
60370: NEG
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: LIST
60409: LIST
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60423: LD_ADDR_VAR 0 30
60427: PUSH
60428: LD_INT 4
60430: PUSH
60431: LD_INT 4
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PUSH
60438: LD_INT 4
60440: PUSH
60441: LD_INT 3
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 5
60450: PUSH
60451: LD_INT 4
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 5
60460: PUSH
60461: LD_INT 5
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: PUSH
60468: LD_INT 4
60470: PUSH
60471: LD_INT 5
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: LD_INT 3
60480: PUSH
60481: LD_INT 4
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 3
60490: PUSH
60491: LD_INT 3
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 5
60500: PUSH
60501: LD_INT 3
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: LD_INT 3
60510: PUSH
60511: LD_INT 5
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 0
60520: PUSH
60521: LD_INT 3
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: PUSH
60528: LD_INT 0
60530: PUSH
60531: LD_INT 2
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PUSH
60538: LD_INT 1
60540: PUSH
60541: LD_INT 3
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: LD_INT 1
60550: PUSH
60551: LD_INT 4
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 0
60560: PUSH
60561: LD_INT 4
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 1
60570: NEG
60571: PUSH
60572: LD_INT 3
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 1
60581: NEG
60582: PUSH
60583: LD_INT 2
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 2
60592: PUSH
60593: LD_INT 4
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PUSH
60600: LD_INT 2
60602: NEG
60603: PUSH
60604: LD_INT 2
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 4
60613: NEG
60614: PUSH
60615: LD_INT 0
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 4
60624: NEG
60625: PUSH
60626: LD_INT 1
60628: NEG
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 3
60636: NEG
60637: PUSH
60638: LD_INT 0
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 3
60647: NEG
60648: PUSH
60649: LD_INT 1
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: LD_INT 4
60658: NEG
60659: PUSH
60660: LD_INT 1
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 5
60669: NEG
60670: PUSH
60671: LD_INT 0
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 5
60680: NEG
60681: PUSH
60682: LD_INT 1
60684: NEG
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 5
60692: NEG
60693: PUSH
60694: LD_INT 2
60696: NEG
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 3
60704: NEG
60705: PUSH
60706: LD_INT 2
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 3
60715: NEG
60716: PUSH
60717: LD_INT 3
60719: NEG
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 3
60727: NEG
60728: PUSH
60729: LD_INT 4
60731: NEG
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: LD_INT 2
60739: NEG
60740: PUSH
60741: LD_INT 3
60743: NEG
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 2
60751: NEG
60752: PUSH
60753: LD_INT 2
60755: NEG
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 3
60763: NEG
60764: PUSH
60765: LD_INT 2
60767: NEG
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 4
60775: NEG
60776: PUSH
60777: LD_INT 3
60779: NEG
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 4
60787: NEG
60788: PUSH
60789: LD_INT 4
60791: NEG
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 2
60799: NEG
60800: PUSH
60801: LD_INT 4
60803: NEG
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: LD_INT 4
60811: NEG
60812: PUSH
60813: LD_INT 2
60815: NEG
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: PUSH
60821: LD_INT 0
60823: PUSH
60824: LD_INT 4
60826: NEG
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 0
60834: PUSH
60835: LD_INT 5
60837: NEG
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 1
60845: PUSH
60846: LD_INT 4
60848: NEG
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 1
60856: PUSH
60857: LD_INT 3
60859: NEG
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 0
60867: PUSH
60868: LD_INT 3
60870: NEG
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PUSH
60876: LD_INT 1
60878: NEG
60879: PUSH
60880: LD_INT 4
60882: NEG
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: LD_INT 1
60890: NEG
60891: PUSH
60892: LD_INT 5
60894: NEG
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 2
60902: PUSH
60903: LD_INT 3
60905: NEG
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 2
60913: NEG
60914: PUSH
60915: LD_INT 5
60917: NEG
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: LIST
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: LIST
60956: LIST
60957: LIST
60958: LIST
60959: LIST
60960: LIST
60961: LIST
60962: LIST
60963: LIST
60964: LIST
60965: LIST
60966: LIST
60967: LIST
60968: LIST
60969: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60970: LD_ADDR_VAR 0 31
60974: PUSH
60975: LD_INT 0
60977: PUSH
60978: LD_INT 4
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 0
60987: PUSH
60988: LD_INT 3
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 1
60997: PUSH
60998: LD_INT 4
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 1
61007: PUSH
61008: LD_INT 5
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 0
61017: PUSH
61018: LD_INT 5
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 1
61027: NEG
61028: PUSH
61029: LD_INT 4
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 1
61038: NEG
61039: PUSH
61040: LD_INT 3
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 2
61049: PUSH
61050: LD_INT 5
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 2
61059: NEG
61060: PUSH
61061: LD_INT 3
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: LD_INT 3
61070: NEG
61071: PUSH
61072: LD_INT 0
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: LD_INT 3
61081: NEG
61082: PUSH
61083: LD_INT 1
61085: NEG
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 2
61093: NEG
61094: PUSH
61095: LD_INT 0
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: LD_INT 2
61104: NEG
61105: PUSH
61106: LD_INT 1
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PUSH
61113: LD_INT 3
61115: NEG
61116: PUSH
61117: LD_INT 1
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 4
61126: NEG
61127: PUSH
61128: LD_INT 0
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 4
61137: NEG
61138: PUSH
61139: LD_INT 1
61141: NEG
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 4
61149: NEG
61150: PUSH
61151: LD_INT 2
61153: NEG
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 2
61161: NEG
61162: PUSH
61163: LD_INT 2
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 4
61172: NEG
61173: PUSH
61174: LD_INT 4
61176: NEG
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 4
61184: NEG
61185: PUSH
61186: LD_INT 5
61188: NEG
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: LD_INT 3
61196: NEG
61197: PUSH
61198: LD_INT 4
61200: NEG
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: LD_INT 3
61208: NEG
61209: PUSH
61210: LD_INT 3
61212: NEG
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: PUSH
61218: LD_INT 4
61220: NEG
61221: PUSH
61222: LD_INT 3
61224: NEG
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 5
61232: NEG
61233: PUSH
61234: LD_INT 4
61236: NEG
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 5
61244: NEG
61245: PUSH
61246: LD_INT 5
61248: NEG
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 3
61256: NEG
61257: PUSH
61258: LD_INT 5
61260: NEG
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: LD_INT 5
61268: NEG
61269: PUSH
61270: LD_INT 3
61272: NEG
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 0
61280: PUSH
61281: LD_INT 3
61283: NEG
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 0
61291: PUSH
61292: LD_INT 4
61294: NEG
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 1
61302: PUSH
61303: LD_INT 3
61305: NEG
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 1
61313: PUSH
61314: LD_INT 2
61316: NEG
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: LD_INT 0
61324: PUSH
61325: LD_INT 2
61327: NEG
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 1
61335: NEG
61336: PUSH
61337: LD_INT 3
61339: NEG
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 1
61347: NEG
61348: PUSH
61349: LD_INT 4
61351: NEG
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: LD_INT 2
61359: PUSH
61360: LD_INT 2
61362: NEG
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 2
61370: NEG
61371: PUSH
61372: LD_INT 4
61374: NEG
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: LD_INT 4
61382: PUSH
61383: LD_INT 0
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 4
61392: PUSH
61393: LD_INT 1
61395: NEG
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: PUSH
61401: LD_INT 5
61403: PUSH
61404: LD_INT 0
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: LD_INT 5
61413: PUSH
61414: LD_INT 1
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 4
61423: PUSH
61424: LD_INT 1
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 3
61433: PUSH
61434: LD_INT 0
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: LD_INT 3
61443: PUSH
61444: LD_INT 1
61446: NEG
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 3
61454: PUSH
61455: LD_INT 2
61457: NEG
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: LD_INT 5
61465: PUSH
61466: LD_INT 2
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: LIST
61491: LIST
61492: LIST
61493: LIST
61494: LIST
61495: LIST
61496: LIST
61497: LIST
61498: LIST
61499: LIST
61500: LIST
61501: LIST
61502: LIST
61503: LIST
61504: LIST
61505: LIST
61506: LIST
61507: LIST
61508: LIST
61509: LIST
61510: LIST
61511: LIST
61512: LIST
61513: LIST
61514: LIST
61515: LIST
61516: LIST
61517: LIST
61518: LIST
61519: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61520: LD_ADDR_VAR 0 32
61524: PUSH
61525: LD_INT 4
61527: NEG
61528: PUSH
61529: LD_INT 0
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 4
61538: NEG
61539: PUSH
61540: LD_INT 1
61542: NEG
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 3
61550: NEG
61551: PUSH
61552: LD_INT 0
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: LD_INT 3
61561: NEG
61562: PUSH
61563: LD_INT 1
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 4
61572: NEG
61573: PUSH
61574: LD_INT 1
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: PUSH
61581: LD_INT 5
61583: NEG
61584: PUSH
61585: LD_INT 0
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 5
61594: NEG
61595: PUSH
61596: LD_INT 1
61598: NEG
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 5
61606: NEG
61607: PUSH
61608: LD_INT 2
61610: NEG
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 3
61618: NEG
61619: PUSH
61620: LD_INT 2
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: LD_INT 3
61629: NEG
61630: PUSH
61631: LD_INT 3
61633: NEG
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 3
61641: NEG
61642: PUSH
61643: LD_INT 4
61645: NEG
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_INT 2
61653: NEG
61654: PUSH
61655: LD_INT 3
61657: NEG
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: PUSH
61663: LD_INT 2
61665: NEG
61666: PUSH
61667: LD_INT 2
61669: NEG
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: LD_INT 3
61677: NEG
61678: PUSH
61679: LD_INT 2
61681: NEG
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 4
61689: NEG
61690: PUSH
61691: LD_INT 3
61693: NEG
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: LD_INT 4
61701: NEG
61702: PUSH
61703: LD_INT 4
61705: NEG
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: LD_INT 2
61713: NEG
61714: PUSH
61715: LD_INT 4
61717: NEG
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 4
61725: NEG
61726: PUSH
61727: LD_INT 2
61729: NEG
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: PUSH
61735: LD_INT 0
61737: PUSH
61738: LD_INT 4
61740: NEG
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: PUSH
61746: LD_INT 0
61748: PUSH
61749: LD_INT 5
61751: NEG
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: PUSH
61757: LD_INT 1
61759: PUSH
61760: LD_INT 4
61762: NEG
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: LD_INT 1
61770: PUSH
61771: LD_INT 3
61773: NEG
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: PUSH
61779: LD_INT 0
61781: PUSH
61782: LD_INT 3
61784: NEG
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: LD_INT 1
61792: NEG
61793: PUSH
61794: LD_INT 4
61796: NEG
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 1
61804: NEG
61805: PUSH
61806: LD_INT 5
61808: NEG
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: PUSH
61814: LD_INT 2
61816: PUSH
61817: LD_INT 3
61819: NEG
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 2
61827: NEG
61828: PUSH
61829: LD_INT 5
61831: NEG
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: LD_INT 3
61839: PUSH
61840: LD_INT 0
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: PUSH
61847: LD_INT 3
61849: PUSH
61850: LD_INT 1
61852: NEG
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: LD_INT 4
61860: PUSH
61861: LD_INT 0
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 4
61870: PUSH
61871: LD_INT 1
61873: PUSH
61874: EMPTY
61875: LIST
61876: LIST
61877: PUSH
61878: LD_INT 3
61880: PUSH
61881: LD_INT 1
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: PUSH
61888: LD_INT 2
61890: PUSH
61891: LD_INT 0
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: LD_INT 2
61900: PUSH
61901: LD_INT 1
61903: NEG
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: LD_INT 2
61911: PUSH
61912: LD_INT 2
61914: NEG
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: PUSH
61920: LD_INT 4
61922: PUSH
61923: LD_INT 2
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: PUSH
61930: LD_INT 4
61932: PUSH
61933: LD_INT 4
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: LD_INT 4
61942: PUSH
61943: LD_INT 3
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: LD_INT 5
61952: PUSH
61953: LD_INT 4
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PUSH
61960: LD_INT 5
61962: PUSH
61963: LD_INT 5
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: LD_INT 4
61972: PUSH
61973: LD_INT 5
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PUSH
61980: LD_INT 3
61982: PUSH
61983: LD_INT 4
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 3
61992: PUSH
61993: LD_INT 3
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: PUSH
62000: LD_INT 5
62002: PUSH
62003: LD_INT 3
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: PUSH
62010: LD_INT 3
62012: PUSH
62013: LD_INT 5
62015: PUSH
62016: EMPTY
62017: LIST
62018: LIST
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: LIST
62024: LIST
62025: LIST
62026: LIST
62027: LIST
62028: LIST
62029: LIST
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: LIST
62035: LIST
62036: LIST
62037: LIST
62038: LIST
62039: LIST
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: LIST
62045: LIST
62046: LIST
62047: LIST
62048: LIST
62049: LIST
62050: LIST
62051: LIST
62052: LIST
62053: LIST
62054: LIST
62055: LIST
62056: LIST
62057: LIST
62058: LIST
62059: LIST
62060: LIST
62061: LIST
62062: LIST
62063: LIST
62064: LIST
62065: LIST
62066: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62067: LD_ADDR_VAR 0 33
62071: PUSH
62072: LD_INT 4
62074: NEG
62075: PUSH
62076: LD_INT 4
62078: NEG
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: LD_INT 4
62086: NEG
62087: PUSH
62088: LD_INT 5
62090: NEG
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 3
62098: NEG
62099: PUSH
62100: LD_INT 4
62102: NEG
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 3
62110: NEG
62111: PUSH
62112: LD_INT 3
62114: NEG
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: PUSH
62120: LD_INT 4
62122: NEG
62123: PUSH
62124: LD_INT 3
62126: NEG
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 5
62134: NEG
62135: PUSH
62136: LD_INT 4
62138: NEG
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: LD_INT 5
62146: NEG
62147: PUSH
62148: LD_INT 5
62150: NEG
62151: PUSH
62152: EMPTY
62153: LIST
62154: LIST
62155: PUSH
62156: LD_INT 3
62158: NEG
62159: PUSH
62160: LD_INT 5
62162: NEG
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: LD_INT 5
62170: NEG
62171: PUSH
62172: LD_INT 3
62174: NEG
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: PUSH
62180: LD_INT 0
62182: PUSH
62183: LD_INT 3
62185: NEG
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: LD_INT 0
62193: PUSH
62194: LD_INT 4
62196: NEG
62197: PUSH
62198: EMPTY
62199: LIST
62200: LIST
62201: PUSH
62202: LD_INT 1
62204: PUSH
62205: LD_INT 3
62207: NEG
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PUSH
62213: LD_INT 1
62215: PUSH
62216: LD_INT 2
62218: NEG
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: LD_INT 0
62226: PUSH
62227: LD_INT 2
62229: NEG
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 1
62237: NEG
62238: PUSH
62239: LD_INT 3
62241: NEG
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 1
62249: NEG
62250: PUSH
62251: LD_INT 4
62253: NEG
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: LD_INT 2
62261: PUSH
62262: LD_INT 2
62264: NEG
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 2
62272: NEG
62273: PUSH
62274: LD_INT 4
62276: NEG
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 4
62284: PUSH
62285: LD_INT 0
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: PUSH
62292: LD_INT 4
62294: PUSH
62295: LD_INT 1
62297: NEG
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: LD_INT 5
62305: PUSH
62306: LD_INT 0
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: LD_INT 5
62315: PUSH
62316: LD_INT 1
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: LD_INT 4
62325: PUSH
62326: LD_INT 1
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: LD_INT 3
62335: PUSH
62336: LD_INT 0
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: PUSH
62343: LD_INT 3
62345: PUSH
62346: LD_INT 1
62348: NEG
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: PUSH
62354: LD_INT 3
62356: PUSH
62357: LD_INT 2
62359: NEG
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: LD_INT 5
62367: PUSH
62368: LD_INT 2
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: PUSH
62375: LD_INT 3
62377: PUSH
62378: LD_INT 3
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: PUSH
62385: LD_INT 3
62387: PUSH
62388: LD_INT 2
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: PUSH
62395: LD_INT 4
62397: PUSH
62398: LD_INT 3
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: PUSH
62405: LD_INT 4
62407: PUSH
62408: LD_INT 4
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: PUSH
62415: LD_INT 3
62417: PUSH
62418: LD_INT 4
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PUSH
62425: LD_INT 2
62427: PUSH
62428: LD_INT 3
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: PUSH
62435: LD_INT 2
62437: PUSH
62438: LD_INT 2
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PUSH
62445: LD_INT 4
62447: PUSH
62448: LD_INT 2
62450: PUSH
62451: EMPTY
62452: LIST
62453: LIST
62454: PUSH
62455: LD_INT 2
62457: PUSH
62458: LD_INT 4
62460: PUSH
62461: EMPTY
62462: LIST
62463: LIST
62464: PUSH
62465: LD_INT 0
62467: PUSH
62468: LD_INT 4
62470: PUSH
62471: EMPTY
62472: LIST
62473: LIST
62474: PUSH
62475: LD_INT 0
62477: PUSH
62478: LD_INT 3
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: PUSH
62485: LD_INT 1
62487: PUSH
62488: LD_INT 4
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: PUSH
62495: LD_INT 1
62497: PUSH
62498: LD_INT 5
62500: PUSH
62501: EMPTY
62502: LIST
62503: LIST
62504: PUSH
62505: LD_INT 0
62507: PUSH
62508: LD_INT 5
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: LD_INT 1
62517: NEG
62518: PUSH
62519: LD_INT 4
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: PUSH
62526: LD_INT 1
62528: NEG
62529: PUSH
62530: LD_INT 3
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: PUSH
62537: LD_INT 2
62539: PUSH
62540: LD_INT 5
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: PUSH
62547: LD_INT 2
62549: NEG
62550: PUSH
62551: LD_INT 3
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: LIST
62562: LIST
62563: LIST
62564: LIST
62565: LIST
62566: LIST
62567: LIST
62568: LIST
62569: LIST
62570: LIST
62571: LIST
62572: LIST
62573: LIST
62574: LIST
62575: LIST
62576: LIST
62577: LIST
62578: LIST
62579: LIST
62580: LIST
62581: LIST
62582: LIST
62583: LIST
62584: LIST
62585: LIST
62586: LIST
62587: LIST
62588: LIST
62589: LIST
62590: LIST
62591: LIST
62592: LIST
62593: LIST
62594: LIST
62595: LIST
62596: LIST
62597: LIST
62598: LIST
62599: LIST
62600: LIST
62601: LIST
62602: LIST
62603: LIST
62604: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62605: LD_ADDR_VAR 0 34
62609: PUSH
62610: LD_INT 0
62612: PUSH
62613: LD_INT 4
62615: NEG
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: PUSH
62621: LD_INT 0
62623: PUSH
62624: LD_INT 5
62626: NEG
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PUSH
62632: LD_INT 1
62634: PUSH
62635: LD_INT 4
62637: NEG
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: LD_INT 1
62645: PUSH
62646: LD_INT 3
62648: NEG
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PUSH
62654: LD_INT 0
62656: PUSH
62657: LD_INT 3
62659: NEG
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: PUSH
62665: LD_INT 1
62667: NEG
62668: PUSH
62669: LD_INT 4
62671: NEG
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: PUSH
62677: LD_INT 1
62679: NEG
62680: PUSH
62681: LD_INT 5
62683: NEG
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: PUSH
62689: LD_INT 2
62691: PUSH
62692: LD_INT 3
62694: NEG
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: LD_INT 2
62702: NEG
62703: PUSH
62704: LD_INT 5
62706: NEG
62707: PUSH
62708: EMPTY
62709: LIST
62710: LIST
62711: PUSH
62712: LD_INT 3
62714: PUSH
62715: LD_INT 0
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: PUSH
62722: LD_INT 3
62724: PUSH
62725: LD_INT 1
62727: NEG
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 4
62735: PUSH
62736: LD_INT 0
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: PUSH
62743: LD_INT 4
62745: PUSH
62746: LD_INT 1
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: LD_INT 3
62755: PUSH
62756: LD_INT 1
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 2
62765: PUSH
62766: LD_INT 0
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: LD_INT 2
62775: PUSH
62776: LD_INT 1
62778: NEG
62779: PUSH
62780: EMPTY
62781: LIST
62782: LIST
62783: PUSH
62784: LD_INT 2
62786: PUSH
62787: LD_INT 2
62789: NEG
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: PUSH
62795: LD_INT 4
62797: PUSH
62798: LD_INT 2
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: PUSH
62805: LD_INT 4
62807: PUSH
62808: LD_INT 4
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: PUSH
62815: LD_INT 4
62817: PUSH
62818: LD_INT 3
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: PUSH
62825: LD_INT 5
62827: PUSH
62828: LD_INT 4
62830: PUSH
62831: EMPTY
62832: LIST
62833: LIST
62834: PUSH
62835: LD_INT 5
62837: PUSH
62838: LD_INT 5
62840: PUSH
62841: EMPTY
62842: LIST
62843: LIST
62844: PUSH
62845: LD_INT 4
62847: PUSH
62848: LD_INT 5
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: PUSH
62855: LD_INT 3
62857: PUSH
62858: LD_INT 4
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: PUSH
62865: LD_INT 3
62867: PUSH
62868: LD_INT 3
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: PUSH
62875: LD_INT 5
62877: PUSH
62878: LD_INT 3
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: PUSH
62885: LD_INT 3
62887: PUSH
62888: LD_INT 5
62890: PUSH
62891: EMPTY
62892: LIST
62893: LIST
62894: PUSH
62895: LD_INT 0
62897: PUSH
62898: LD_INT 3
62900: PUSH
62901: EMPTY
62902: LIST
62903: LIST
62904: PUSH
62905: LD_INT 0
62907: PUSH
62908: LD_INT 2
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: PUSH
62915: LD_INT 1
62917: PUSH
62918: LD_INT 3
62920: PUSH
62921: EMPTY
62922: LIST
62923: LIST
62924: PUSH
62925: LD_INT 1
62927: PUSH
62928: LD_INT 4
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: PUSH
62935: LD_INT 0
62937: PUSH
62938: LD_INT 4
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: PUSH
62945: LD_INT 1
62947: NEG
62948: PUSH
62949: LD_INT 3
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: PUSH
62956: LD_INT 1
62958: NEG
62959: PUSH
62960: LD_INT 2
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: PUSH
62967: LD_INT 2
62969: PUSH
62970: LD_INT 4
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PUSH
62977: LD_INT 2
62979: NEG
62980: PUSH
62981: LD_INT 2
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: PUSH
62988: LD_INT 4
62990: NEG
62991: PUSH
62992: LD_INT 0
62994: PUSH
62995: EMPTY
62996: LIST
62997: LIST
62998: PUSH
62999: LD_INT 4
63001: NEG
63002: PUSH
63003: LD_INT 1
63005: NEG
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: PUSH
63011: LD_INT 3
63013: NEG
63014: PUSH
63015: LD_INT 0
63017: PUSH
63018: EMPTY
63019: LIST
63020: LIST
63021: PUSH
63022: LD_INT 3
63024: NEG
63025: PUSH
63026: LD_INT 1
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: PUSH
63033: LD_INT 4
63035: NEG
63036: PUSH
63037: LD_INT 1
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: LD_INT 5
63046: NEG
63047: PUSH
63048: LD_INT 0
63050: PUSH
63051: EMPTY
63052: LIST
63053: LIST
63054: PUSH
63055: LD_INT 5
63057: NEG
63058: PUSH
63059: LD_INT 1
63061: NEG
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: PUSH
63067: LD_INT 5
63069: NEG
63070: PUSH
63071: LD_INT 2
63073: NEG
63074: PUSH
63075: EMPTY
63076: LIST
63077: LIST
63078: PUSH
63079: LD_INT 3
63081: NEG
63082: PUSH
63083: LD_INT 2
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: LIST
63094: LIST
63095: LIST
63096: LIST
63097: LIST
63098: LIST
63099: LIST
63100: LIST
63101: LIST
63102: LIST
63103: LIST
63104: LIST
63105: LIST
63106: LIST
63107: LIST
63108: LIST
63109: LIST
63110: LIST
63111: LIST
63112: LIST
63113: LIST
63114: LIST
63115: LIST
63116: LIST
63117: LIST
63118: LIST
63119: LIST
63120: LIST
63121: LIST
63122: LIST
63123: LIST
63124: LIST
63125: LIST
63126: LIST
63127: LIST
63128: LIST
63129: LIST
63130: LIST
63131: LIST
63132: LIST
63133: LIST
63134: LIST
63135: LIST
63136: ST_TO_ADDR
// end ; end ;
63137: GO 63140
63139: POP
// case btype of b_depot , b_warehouse :
63140: LD_VAR 0 1
63144: PUSH
63145: LD_INT 0
63147: DOUBLE
63148: EQUAL
63149: IFTRUE 63159
63151: LD_INT 1
63153: DOUBLE
63154: EQUAL
63155: IFTRUE 63159
63157: GO 63360
63159: POP
// case nation of nation_american :
63160: LD_VAR 0 5
63164: PUSH
63165: LD_INT 1
63167: DOUBLE
63168: EQUAL
63169: IFTRUE 63173
63171: GO 63229
63173: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
63174: LD_ADDR_VAR 0 9
63178: PUSH
63179: LD_VAR 0 11
63183: PUSH
63184: LD_VAR 0 12
63188: PUSH
63189: LD_VAR 0 13
63193: PUSH
63194: LD_VAR 0 14
63198: PUSH
63199: LD_VAR 0 15
63203: PUSH
63204: LD_VAR 0 16
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: LIST
63213: LIST
63214: LIST
63215: LIST
63216: PUSH
63217: LD_VAR 0 4
63221: PUSH
63222: LD_INT 1
63224: PLUS
63225: ARRAY
63226: ST_TO_ADDR
63227: GO 63358
63229: LD_INT 2
63231: DOUBLE
63232: EQUAL
63233: IFTRUE 63237
63235: GO 63293
63237: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
63238: LD_ADDR_VAR 0 9
63242: PUSH
63243: LD_VAR 0 17
63247: PUSH
63248: LD_VAR 0 18
63252: PUSH
63253: LD_VAR 0 19
63257: PUSH
63258: LD_VAR 0 20
63262: PUSH
63263: LD_VAR 0 21
63267: PUSH
63268: LD_VAR 0 22
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: LIST
63277: LIST
63278: LIST
63279: LIST
63280: PUSH
63281: LD_VAR 0 4
63285: PUSH
63286: LD_INT 1
63288: PLUS
63289: ARRAY
63290: ST_TO_ADDR
63291: GO 63358
63293: LD_INT 3
63295: DOUBLE
63296: EQUAL
63297: IFTRUE 63301
63299: GO 63357
63301: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63302: LD_ADDR_VAR 0 9
63306: PUSH
63307: LD_VAR 0 23
63311: PUSH
63312: LD_VAR 0 24
63316: PUSH
63317: LD_VAR 0 25
63321: PUSH
63322: LD_VAR 0 26
63326: PUSH
63327: LD_VAR 0 27
63331: PUSH
63332: LD_VAR 0 28
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: LIST
63341: LIST
63342: LIST
63343: LIST
63344: PUSH
63345: LD_VAR 0 4
63349: PUSH
63350: LD_INT 1
63352: PLUS
63353: ARRAY
63354: ST_TO_ADDR
63355: GO 63358
63357: POP
63358: GO 63913
63360: LD_INT 2
63362: DOUBLE
63363: EQUAL
63364: IFTRUE 63374
63366: LD_INT 3
63368: DOUBLE
63369: EQUAL
63370: IFTRUE 63374
63372: GO 63430
63374: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63375: LD_ADDR_VAR 0 9
63379: PUSH
63380: LD_VAR 0 29
63384: PUSH
63385: LD_VAR 0 30
63389: PUSH
63390: LD_VAR 0 31
63394: PUSH
63395: LD_VAR 0 32
63399: PUSH
63400: LD_VAR 0 33
63404: PUSH
63405: LD_VAR 0 34
63409: PUSH
63410: EMPTY
63411: LIST
63412: LIST
63413: LIST
63414: LIST
63415: LIST
63416: LIST
63417: PUSH
63418: LD_VAR 0 4
63422: PUSH
63423: LD_INT 1
63425: PLUS
63426: ARRAY
63427: ST_TO_ADDR
63428: GO 63913
63430: LD_INT 16
63432: DOUBLE
63433: EQUAL
63434: IFTRUE 63492
63436: LD_INT 17
63438: DOUBLE
63439: EQUAL
63440: IFTRUE 63492
63442: LD_INT 18
63444: DOUBLE
63445: EQUAL
63446: IFTRUE 63492
63448: LD_INT 19
63450: DOUBLE
63451: EQUAL
63452: IFTRUE 63492
63454: LD_INT 22
63456: DOUBLE
63457: EQUAL
63458: IFTRUE 63492
63460: LD_INT 20
63462: DOUBLE
63463: EQUAL
63464: IFTRUE 63492
63466: LD_INT 21
63468: DOUBLE
63469: EQUAL
63470: IFTRUE 63492
63472: LD_INT 23
63474: DOUBLE
63475: EQUAL
63476: IFTRUE 63492
63478: LD_INT 24
63480: DOUBLE
63481: EQUAL
63482: IFTRUE 63492
63484: LD_INT 25
63486: DOUBLE
63487: EQUAL
63488: IFTRUE 63492
63490: GO 63548
63492: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63493: LD_ADDR_VAR 0 9
63497: PUSH
63498: LD_VAR 0 35
63502: PUSH
63503: LD_VAR 0 36
63507: PUSH
63508: LD_VAR 0 37
63512: PUSH
63513: LD_VAR 0 38
63517: PUSH
63518: LD_VAR 0 39
63522: PUSH
63523: LD_VAR 0 40
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: LIST
63535: PUSH
63536: LD_VAR 0 4
63540: PUSH
63541: LD_INT 1
63543: PLUS
63544: ARRAY
63545: ST_TO_ADDR
63546: GO 63913
63548: LD_INT 6
63550: DOUBLE
63551: EQUAL
63552: IFTRUE 63604
63554: LD_INT 7
63556: DOUBLE
63557: EQUAL
63558: IFTRUE 63604
63560: LD_INT 8
63562: DOUBLE
63563: EQUAL
63564: IFTRUE 63604
63566: LD_INT 13
63568: DOUBLE
63569: EQUAL
63570: IFTRUE 63604
63572: LD_INT 12
63574: DOUBLE
63575: EQUAL
63576: IFTRUE 63604
63578: LD_INT 15
63580: DOUBLE
63581: EQUAL
63582: IFTRUE 63604
63584: LD_INT 11
63586: DOUBLE
63587: EQUAL
63588: IFTRUE 63604
63590: LD_INT 14
63592: DOUBLE
63593: EQUAL
63594: IFTRUE 63604
63596: LD_INT 10
63598: DOUBLE
63599: EQUAL
63600: IFTRUE 63604
63602: GO 63660
63604: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63605: LD_ADDR_VAR 0 9
63609: PUSH
63610: LD_VAR 0 41
63614: PUSH
63615: LD_VAR 0 42
63619: PUSH
63620: LD_VAR 0 43
63624: PUSH
63625: LD_VAR 0 44
63629: PUSH
63630: LD_VAR 0 45
63634: PUSH
63635: LD_VAR 0 46
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: LIST
63644: LIST
63645: LIST
63646: LIST
63647: PUSH
63648: LD_VAR 0 4
63652: PUSH
63653: LD_INT 1
63655: PLUS
63656: ARRAY
63657: ST_TO_ADDR
63658: GO 63913
63660: LD_INT 36
63662: DOUBLE
63663: EQUAL
63664: IFTRUE 63668
63666: GO 63724
63668: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63669: LD_ADDR_VAR 0 9
63673: PUSH
63674: LD_VAR 0 47
63678: PUSH
63679: LD_VAR 0 48
63683: PUSH
63684: LD_VAR 0 49
63688: PUSH
63689: LD_VAR 0 50
63693: PUSH
63694: LD_VAR 0 51
63698: PUSH
63699: LD_VAR 0 52
63703: PUSH
63704: EMPTY
63705: LIST
63706: LIST
63707: LIST
63708: LIST
63709: LIST
63710: LIST
63711: PUSH
63712: LD_VAR 0 4
63716: PUSH
63717: LD_INT 1
63719: PLUS
63720: ARRAY
63721: ST_TO_ADDR
63722: GO 63913
63724: LD_INT 4
63726: DOUBLE
63727: EQUAL
63728: IFTRUE 63750
63730: LD_INT 5
63732: DOUBLE
63733: EQUAL
63734: IFTRUE 63750
63736: LD_INT 34
63738: DOUBLE
63739: EQUAL
63740: IFTRUE 63750
63742: LD_INT 37
63744: DOUBLE
63745: EQUAL
63746: IFTRUE 63750
63748: GO 63806
63750: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63751: LD_ADDR_VAR 0 9
63755: PUSH
63756: LD_VAR 0 53
63760: PUSH
63761: LD_VAR 0 54
63765: PUSH
63766: LD_VAR 0 55
63770: PUSH
63771: LD_VAR 0 56
63775: PUSH
63776: LD_VAR 0 57
63780: PUSH
63781: LD_VAR 0 58
63785: PUSH
63786: EMPTY
63787: LIST
63788: LIST
63789: LIST
63790: LIST
63791: LIST
63792: LIST
63793: PUSH
63794: LD_VAR 0 4
63798: PUSH
63799: LD_INT 1
63801: PLUS
63802: ARRAY
63803: ST_TO_ADDR
63804: GO 63913
63806: LD_INT 31
63808: DOUBLE
63809: EQUAL
63810: IFTRUE 63856
63812: LD_INT 32
63814: DOUBLE
63815: EQUAL
63816: IFTRUE 63856
63818: LD_INT 33
63820: DOUBLE
63821: EQUAL
63822: IFTRUE 63856
63824: LD_INT 27
63826: DOUBLE
63827: EQUAL
63828: IFTRUE 63856
63830: LD_INT 26
63832: DOUBLE
63833: EQUAL
63834: IFTRUE 63856
63836: LD_INT 28
63838: DOUBLE
63839: EQUAL
63840: IFTRUE 63856
63842: LD_INT 29
63844: DOUBLE
63845: EQUAL
63846: IFTRUE 63856
63848: LD_INT 30
63850: DOUBLE
63851: EQUAL
63852: IFTRUE 63856
63854: GO 63912
63856: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63857: LD_ADDR_VAR 0 9
63861: PUSH
63862: LD_VAR 0 59
63866: PUSH
63867: LD_VAR 0 60
63871: PUSH
63872: LD_VAR 0 61
63876: PUSH
63877: LD_VAR 0 62
63881: PUSH
63882: LD_VAR 0 63
63886: PUSH
63887: LD_VAR 0 64
63891: PUSH
63892: EMPTY
63893: LIST
63894: LIST
63895: LIST
63896: LIST
63897: LIST
63898: LIST
63899: PUSH
63900: LD_VAR 0 4
63904: PUSH
63905: LD_INT 1
63907: PLUS
63908: ARRAY
63909: ST_TO_ADDR
63910: GO 63913
63912: POP
// temp_list2 = [ ] ;
63913: LD_ADDR_VAR 0 10
63917: PUSH
63918: EMPTY
63919: ST_TO_ADDR
// for i in temp_list do
63920: LD_ADDR_VAR 0 8
63924: PUSH
63925: LD_VAR 0 9
63929: PUSH
63930: FOR_IN
63931: IFFALSE 63983
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63933: LD_ADDR_VAR 0 10
63937: PUSH
63938: LD_VAR 0 10
63942: PUSH
63943: LD_VAR 0 8
63947: PUSH
63948: LD_INT 1
63950: ARRAY
63951: PUSH
63952: LD_VAR 0 2
63956: PLUS
63957: PUSH
63958: LD_VAR 0 8
63962: PUSH
63963: LD_INT 2
63965: ARRAY
63966: PUSH
63967: LD_VAR 0 3
63971: PLUS
63972: PUSH
63973: EMPTY
63974: LIST
63975: LIST
63976: PUSH
63977: EMPTY
63978: LIST
63979: ADD
63980: ST_TO_ADDR
63981: GO 63930
63983: POP
63984: POP
// result = temp_list2 ;
63985: LD_ADDR_VAR 0 7
63989: PUSH
63990: LD_VAR 0 10
63994: ST_TO_ADDR
// end ;
63995: LD_VAR 0 7
63999: RET
// export function EnemyInRange ( unit , dist ) ; begin
64000: LD_INT 0
64002: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64003: LD_ADDR_VAR 0 3
64007: PUSH
64008: LD_VAR 0 1
64012: PPUSH
64013: CALL_OW 255
64017: PPUSH
64018: LD_VAR 0 1
64022: PPUSH
64023: CALL_OW 250
64027: PPUSH
64028: LD_VAR 0 1
64032: PPUSH
64033: CALL_OW 251
64037: PPUSH
64038: LD_VAR 0 2
64042: PPUSH
64043: CALL 38104 0 4
64047: PUSH
64048: LD_INT 4
64050: ARRAY
64051: ST_TO_ADDR
// end ;
64052: LD_VAR 0 3
64056: RET
// export function PlayerSeeMe ( unit ) ; begin
64057: LD_INT 0
64059: PPUSH
// result := See ( your_side , unit ) ;
64060: LD_ADDR_VAR 0 2
64064: PUSH
64065: LD_OWVAR 2
64069: PPUSH
64070: LD_VAR 0 1
64074: PPUSH
64075: CALL_OW 292
64079: ST_TO_ADDR
// end ;
64080: LD_VAR 0 2
64084: RET
// export function ReverseDir ( unit ) ; begin
64085: LD_INT 0
64087: PPUSH
// if not unit then
64088: LD_VAR 0 1
64092: NOT
64093: IFFALSE 64097
// exit ;
64095: GO 64120
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64097: LD_ADDR_VAR 0 2
64101: PUSH
64102: LD_VAR 0 1
64106: PPUSH
64107: CALL_OW 254
64111: PUSH
64112: LD_INT 3
64114: PLUS
64115: PUSH
64116: LD_INT 6
64118: MOD
64119: ST_TO_ADDR
// end ;
64120: LD_VAR 0 2
64124: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
64125: LD_INT 0
64127: PPUSH
64128: PPUSH
64129: PPUSH
64130: PPUSH
64131: PPUSH
// if not hexes then
64132: LD_VAR 0 2
64136: NOT
64137: IFFALSE 64141
// exit ;
64139: GO 64289
// dist := 9999 ;
64141: LD_ADDR_VAR 0 5
64145: PUSH
64146: LD_INT 9999
64148: ST_TO_ADDR
// for i = 1 to hexes do
64149: LD_ADDR_VAR 0 4
64153: PUSH
64154: DOUBLE
64155: LD_INT 1
64157: DEC
64158: ST_TO_ADDR
64159: LD_VAR 0 2
64163: PUSH
64164: FOR_TO
64165: IFFALSE 64277
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
64167: LD_VAR 0 1
64171: PPUSH
64172: LD_VAR 0 2
64176: PUSH
64177: LD_VAR 0 4
64181: ARRAY
64182: PUSH
64183: LD_INT 1
64185: ARRAY
64186: PPUSH
64187: LD_VAR 0 2
64191: PUSH
64192: LD_VAR 0 4
64196: ARRAY
64197: PUSH
64198: LD_INT 2
64200: ARRAY
64201: PPUSH
64202: CALL_OW 297
64206: PUSH
64207: LD_VAR 0 5
64211: LESS
64212: IFFALSE 64275
// begin hex := hexes [ i ] ;
64214: LD_ADDR_VAR 0 7
64218: PUSH
64219: LD_VAR 0 2
64223: PUSH
64224: LD_VAR 0 4
64228: ARRAY
64229: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64230: LD_ADDR_VAR 0 5
64234: PUSH
64235: LD_VAR 0 1
64239: PPUSH
64240: LD_VAR 0 2
64244: PUSH
64245: LD_VAR 0 4
64249: ARRAY
64250: PUSH
64251: LD_INT 1
64253: ARRAY
64254: PPUSH
64255: LD_VAR 0 2
64259: PUSH
64260: LD_VAR 0 4
64264: ARRAY
64265: PUSH
64266: LD_INT 2
64268: ARRAY
64269: PPUSH
64270: CALL_OW 297
64274: ST_TO_ADDR
// end ; end ;
64275: GO 64164
64277: POP
64278: POP
// result := hex ;
64279: LD_ADDR_VAR 0 3
64283: PUSH
64284: LD_VAR 0 7
64288: ST_TO_ADDR
// end ;
64289: LD_VAR 0 3
64293: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64294: LD_INT 0
64296: PPUSH
64297: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64298: LD_VAR 0 1
64302: NOT
64303: PUSH
64304: LD_VAR 0 1
64308: PUSH
64309: LD_INT 21
64311: PUSH
64312: LD_INT 2
64314: PUSH
64315: EMPTY
64316: LIST
64317: LIST
64318: PUSH
64319: LD_INT 23
64321: PUSH
64322: LD_INT 2
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: PUSH
64329: EMPTY
64330: LIST
64331: LIST
64332: PPUSH
64333: CALL_OW 69
64337: IN
64338: NOT
64339: OR
64340: IFFALSE 64344
// exit ;
64342: GO 64391
// for i = 1 to 3 do
64344: LD_ADDR_VAR 0 3
64348: PUSH
64349: DOUBLE
64350: LD_INT 1
64352: DEC
64353: ST_TO_ADDR
64354: LD_INT 3
64356: PUSH
64357: FOR_TO
64358: IFFALSE 64389
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64360: LD_VAR 0 1
64364: PPUSH
64365: CALL_OW 250
64369: PPUSH
64370: LD_VAR 0 1
64374: PPUSH
64375: CALL_OW 251
64379: PPUSH
64380: LD_INT 1
64382: PPUSH
64383: CALL_OW 453
64387: GO 64357
64389: POP
64390: POP
// end ;
64391: LD_VAR 0 2
64395: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64396: LD_INT 0
64398: PPUSH
64399: PPUSH
64400: PPUSH
64401: PPUSH
64402: PPUSH
64403: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
64404: LD_VAR 0 1
64408: NOT
64409: PUSH
64410: LD_VAR 0 2
64414: NOT
64415: OR
64416: PUSH
64417: LD_VAR 0 1
64421: PPUSH
64422: CALL_OW 314
64426: OR
64427: IFFALSE 64431
// exit ;
64429: GO 64872
// x := GetX ( enemy_unit ) ;
64431: LD_ADDR_VAR 0 7
64435: PUSH
64436: LD_VAR 0 2
64440: PPUSH
64441: CALL_OW 250
64445: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64446: LD_ADDR_VAR 0 8
64450: PUSH
64451: LD_VAR 0 2
64455: PPUSH
64456: CALL_OW 251
64460: ST_TO_ADDR
// if not x or not y then
64461: LD_VAR 0 7
64465: NOT
64466: PUSH
64467: LD_VAR 0 8
64471: NOT
64472: OR
64473: IFFALSE 64477
// exit ;
64475: GO 64872
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64477: LD_ADDR_VAR 0 6
64481: PUSH
64482: LD_VAR 0 7
64486: PPUSH
64487: LD_INT 0
64489: PPUSH
64490: LD_INT 4
64492: PPUSH
64493: CALL_OW 272
64497: PUSH
64498: LD_VAR 0 8
64502: PPUSH
64503: LD_INT 0
64505: PPUSH
64506: LD_INT 4
64508: PPUSH
64509: CALL_OW 273
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: PUSH
64518: LD_VAR 0 7
64522: PPUSH
64523: LD_INT 1
64525: PPUSH
64526: LD_INT 4
64528: PPUSH
64529: CALL_OW 272
64533: PUSH
64534: LD_VAR 0 8
64538: PPUSH
64539: LD_INT 1
64541: PPUSH
64542: LD_INT 4
64544: PPUSH
64545: CALL_OW 273
64549: PUSH
64550: EMPTY
64551: LIST
64552: LIST
64553: PUSH
64554: LD_VAR 0 7
64558: PPUSH
64559: LD_INT 2
64561: PPUSH
64562: LD_INT 4
64564: PPUSH
64565: CALL_OW 272
64569: PUSH
64570: LD_VAR 0 8
64574: PPUSH
64575: LD_INT 2
64577: PPUSH
64578: LD_INT 4
64580: PPUSH
64581: CALL_OW 273
64585: PUSH
64586: EMPTY
64587: LIST
64588: LIST
64589: PUSH
64590: LD_VAR 0 7
64594: PPUSH
64595: LD_INT 3
64597: PPUSH
64598: LD_INT 4
64600: PPUSH
64601: CALL_OW 272
64605: PUSH
64606: LD_VAR 0 8
64610: PPUSH
64611: LD_INT 3
64613: PPUSH
64614: LD_INT 4
64616: PPUSH
64617: CALL_OW 273
64621: PUSH
64622: EMPTY
64623: LIST
64624: LIST
64625: PUSH
64626: LD_VAR 0 7
64630: PPUSH
64631: LD_INT 4
64633: PPUSH
64634: LD_INT 4
64636: PPUSH
64637: CALL_OW 272
64641: PUSH
64642: LD_VAR 0 8
64646: PPUSH
64647: LD_INT 4
64649: PPUSH
64650: LD_INT 4
64652: PPUSH
64653: CALL_OW 273
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: PUSH
64662: LD_VAR 0 7
64666: PPUSH
64667: LD_INT 5
64669: PPUSH
64670: LD_INT 4
64672: PPUSH
64673: CALL_OW 272
64677: PUSH
64678: LD_VAR 0 8
64682: PPUSH
64683: LD_INT 5
64685: PPUSH
64686: LD_INT 4
64688: PPUSH
64689: CALL_OW 273
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: PUSH
64698: EMPTY
64699: LIST
64700: LIST
64701: LIST
64702: LIST
64703: LIST
64704: LIST
64705: ST_TO_ADDR
// for i = tmp downto 1 do
64706: LD_ADDR_VAR 0 4
64710: PUSH
64711: DOUBLE
64712: LD_VAR 0 6
64716: INC
64717: ST_TO_ADDR
64718: LD_INT 1
64720: PUSH
64721: FOR_DOWNTO
64722: IFFALSE 64823
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64724: LD_VAR 0 6
64728: PUSH
64729: LD_VAR 0 4
64733: ARRAY
64734: PUSH
64735: LD_INT 1
64737: ARRAY
64738: PPUSH
64739: LD_VAR 0 6
64743: PUSH
64744: LD_VAR 0 4
64748: ARRAY
64749: PUSH
64750: LD_INT 2
64752: ARRAY
64753: PPUSH
64754: CALL_OW 488
64758: NOT
64759: PUSH
64760: LD_VAR 0 6
64764: PUSH
64765: LD_VAR 0 4
64769: ARRAY
64770: PUSH
64771: LD_INT 1
64773: ARRAY
64774: PPUSH
64775: LD_VAR 0 6
64779: PUSH
64780: LD_VAR 0 4
64784: ARRAY
64785: PUSH
64786: LD_INT 2
64788: ARRAY
64789: PPUSH
64790: CALL_OW 428
64794: PUSH
64795: LD_INT 0
64797: NONEQUAL
64798: OR
64799: IFFALSE 64821
// tmp := Delete ( tmp , i ) ;
64801: LD_ADDR_VAR 0 6
64805: PUSH
64806: LD_VAR 0 6
64810: PPUSH
64811: LD_VAR 0 4
64815: PPUSH
64816: CALL_OW 3
64820: ST_TO_ADDR
64821: GO 64721
64823: POP
64824: POP
// j := GetClosestHex ( unit , tmp ) ;
64825: LD_ADDR_VAR 0 5
64829: PUSH
64830: LD_VAR 0 1
64834: PPUSH
64835: LD_VAR 0 6
64839: PPUSH
64840: CALL 64125 0 2
64844: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64845: LD_VAR 0 1
64849: PPUSH
64850: LD_VAR 0 5
64854: PUSH
64855: LD_INT 1
64857: ARRAY
64858: PPUSH
64859: LD_VAR 0 5
64863: PUSH
64864: LD_INT 2
64866: ARRAY
64867: PPUSH
64868: CALL_OW 111
// end ;
64872: LD_VAR 0 3
64876: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64877: LD_INT 0
64879: PPUSH
64880: PPUSH
64881: PPUSH
// uc_side = 0 ;
64882: LD_ADDR_OWVAR 20
64886: PUSH
64887: LD_INT 0
64889: ST_TO_ADDR
// uc_nation = 0 ;
64890: LD_ADDR_OWVAR 21
64894: PUSH
64895: LD_INT 0
64897: ST_TO_ADDR
// InitHc_All ( ) ;
64898: CALL_OW 584
// InitVc ;
64902: CALL_OW 20
// if mastodonts then
64906: LD_VAR 0 6
64910: IFFALSE 64977
// for i = 1 to mastodonts do
64912: LD_ADDR_VAR 0 11
64916: PUSH
64917: DOUBLE
64918: LD_INT 1
64920: DEC
64921: ST_TO_ADDR
64922: LD_VAR 0 6
64926: PUSH
64927: FOR_TO
64928: IFFALSE 64975
// begin vc_chassis := 31 ;
64930: LD_ADDR_OWVAR 37
64934: PUSH
64935: LD_INT 31
64937: ST_TO_ADDR
// vc_control := control_rider ;
64938: LD_ADDR_OWVAR 38
64942: PUSH
64943: LD_INT 4
64945: ST_TO_ADDR
// animal := CreateVehicle ;
64946: LD_ADDR_VAR 0 12
64950: PUSH
64951: CALL_OW 45
64955: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64956: LD_VAR 0 12
64960: PPUSH
64961: LD_VAR 0 8
64965: PPUSH
64966: LD_INT 0
64968: PPUSH
64969: CALL 67165 0 3
// end ;
64973: GO 64927
64975: POP
64976: POP
// if horses then
64977: LD_VAR 0 5
64981: IFFALSE 65048
// for i = 1 to horses do
64983: LD_ADDR_VAR 0 11
64987: PUSH
64988: DOUBLE
64989: LD_INT 1
64991: DEC
64992: ST_TO_ADDR
64993: LD_VAR 0 5
64997: PUSH
64998: FOR_TO
64999: IFFALSE 65046
// begin hc_class := 21 ;
65001: LD_ADDR_OWVAR 28
65005: PUSH
65006: LD_INT 21
65008: ST_TO_ADDR
// hc_gallery :=  ;
65009: LD_ADDR_OWVAR 33
65013: PUSH
65014: LD_STRING 
65016: ST_TO_ADDR
// animal := CreateHuman ;
65017: LD_ADDR_VAR 0 12
65021: PUSH
65022: CALL_OW 44
65026: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65027: LD_VAR 0 12
65031: PPUSH
65032: LD_VAR 0 8
65036: PPUSH
65037: LD_INT 0
65039: PPUSH
65040: CALL 67165 0 3
// end ;
65044: GO 64998
65046: POP
65047: POP
// if birds then
65048: LD_VAR 0 1
65052: IFFALSE 65119
// for i = 1 to birds do
65054: LD_ADDR_VAR 0 11
65058: PUSH
65059: DOUBLE
65060: LD_INT 1
65062: DEC
65063: ST_TO_ADDR
65064: LD_VAR 0 1
65068: PUSH
65069: FOR_TO
65070: IFFALSE 65117
// begin hc_class = 18 ;
65072: LD_ADDR_OWVAR 28
65076: PUSH
65077: LD_INT 18
65079: ST_TO_ADDR
// hc_gallery =  ;
65080: LD_ADDR_OWVAR 33
65084: PUSH
65085: LD_STRING 
65087: ST_TO_ADDR
// animal := CreateHuman ;
65088: LD_ADDR_VAR 0 12
65092: PUSH
65093: CALL_OW 44
65097: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65098: LD_VAR 0 12
65102: PPUSH
65103: LD_VAR 0 8
65107: PPUSH
65108: LD_INT 0
65110: PPUSH
65111: CALL 67165 0 3
// end ;
65115: GO 65069
65117: POP
65118: POP
// if tigers then
65119: LD_VAR 0 2
65123: IFFALSE 65207
// for i = 1 to tigers do
65125: LD_ADDR_VAR 0 11
65129: PUSH
65130: DOUBLE
65131: LD_INT 1
65133: DEC
65134: ST_TO_ADDR
65135: LD_VAR 0 2
65139: PUSH
65140: FOR_TO
65141: IFFALSE 65205
// begin hc_class = class_tiger ;
65143: LD_ADDR_OWVAR 28
65147: PUSH
65148: LD_INT 14
65150: ST_TO_ADDR
// hc_gallery =  ;
65151: LD_ADDR_OWVAR 33
65155: PUSH
65156: LD_STRING 
65158: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65159: LD_ADDR_OWVAR 35
65163: PUSH
65164: LD_INT 7
65166: NEG
65167: PPUSH
65168: LD_INT 7
65170: PPUSH
65171: CALL_OW 12
65175: ST_TO_ADDR
// animal := CreateHuman ;
65176: LD_ADDR_VAR 0 12
65180: PUSH
65181: CALL_OW 44
65185: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65186: LD_VAR 0 12
65190: PPUSH
65191: LD_VAR 0 8
65195: PPUSH
65196: LD_INT 0
65198: PPUSH
65199: CALL 67165 0 3
// end ;
65203: GO 65140
65205: POP
65206: POP
// if apemans then
65207: LD_VAR 0 3
65211: IFFALSE 65334
// for i = 1 to apemans do
65213: LD_ADDR_VAR 0 11
65217: PUSH
65218: DOUBLE
65219: LD_INT 1
65221: DEC
65222: ST_TO_ADDR
65223: LD_VAR 0 3
65227: PUSH
65228: FOR_TO
65229: IFFALSE 65332
// begin hc_class = class_apeman ;
65231: LD_ADDR_OWVAR 28
65235: PUSH
65236: LD_INT 12
65238: ST_TO_ADDR
// hc_gallery =  ;
65239: LD_ADDR_OWVAR 33
65243: PUSH
65244: LD_STRING 
65246: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
65247: LD_ADDR_OWVAR 35
65251: PUSH
65252: LD_INT 5
65254: NEG
65255: PPUSH
65256: LD_INT 5
65258: PPUSH
65259: CALL_OW 12
65263: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65264: LD_ADDR_OWVAR 31
65268: PUSH
65269: LD_INT 1
65271: PPUSH
65272: LD_INT 3
65274: PPUSH
65275: CALL_OW 12
65279: PUSH
65280: LD_INT 1
65282: PPUSH
65283: LD_INT 3
65285: PPUSH
65286: CALL_OW 12
65290: PUSH
65291: LD_INT 0
65293: PUSH
65294: LD_INT 0
65296: PUSH
65297: EMPTY
65298: LIST
65299: LIST
65300: LIST
65301: LIST
65302: ST_TO_ADDR
// animal := CreateHuman ;
65303: LD_ADDR_VAR 0 12
65307: PUSH
65308: CALL_OW 44
65312: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65313: LD_VAR 0 12
65317: PPUSH
65318: LD_VAR 0 8
65322: PPUSH
65323: LD_INT 0
65325: PPUSH
65326: CALL 67165 0 3
// end ;
65330: GO 65228
65332: POP
65333: POP
// if enchidnas then
65334: LD_VAR 0 4
65338: IFFALSE 65405
// for i = 1 to enchidnas do
65340: LD_ADDR_VAR 0 11
65344: PUSH
65345: DOUBLE
65346: LD_INT 1
65348: DEC
65349: ST_TO_ADDR
65350: LD_VAR 0 4
65354: PUSH
65355: FOR_TO
65356: IFFALSE 65403
// begin hc_class = 13 ;
65358: LD_ADDR_OWVAR 28
65362: PUSH
65363: LD_INT 13
65365: ST_TO_ADDR
// hc_gallery =  ;
65366: LD_ADDR_OWVAR 33
65370: PUSH
65371: LD_STRING 
65373: ST_TO_ADDR
// animal := CreateHuman ;
65374: LD_ADDR_VAR 0 12
65378: PUSH
65379: CALL_OW 44
65383: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65384: LD_VAR 0 12
65388: PPUSH
65389: LD_VAR 0 8
65393: PPUSH
65394: LD_INT 0
65396: PPUSH
65397: CALL 67165 0 3
// end ;
65401: GO 65355
65403: POP
65404: POP
// if fishes then
65405: LD_VAR 0 7
65409: IFFALSE 65476
// for i = 1 to fishes do
65411: LD_ADDR_VAR 0 11
65415: PUSH
65416: DOUBLE
65417: LD_INT 1
65419: DEC
65420: ST_TO_ADDR
65421: LD_VAR 0 7
65425: PUSH
65426: FOR_TO
65427: IFFALSE 65474
// begin hc_class = 20 ;
65429: LD_ADDR_OWVAR 28
65433: PUSH
65434: LD_INT 20
65436: ST_TO_ADDR
// hc_gallery =  ;
65437: LD_ADDR_OWVAR 33
65441: PUSH
65442: LD_STRING 
65444: ST_TO_ADDR
// animal := CreateHuman ;
65445: LD_ADDR_VAR 0 12
65449: PUSH
65450: CALL_OW 44
65454: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65455: LD_VAR 0 12
65459: PPUSH
65460: LD_VAR 0 9
65464: PPUSH
65465: LD_INT 0
65467: PPUSH
65468: CALL 67165 0 3
// end ;
65472: GO 65426
65474: POP
65475: POP
// end ;
65476: LD_VAR 0 10
65480: RET
// export function WantHeal ( sci , unit ) ; begin
65481: LD_INT 0
65483: PPUSH
// if GetTaskList ( sci ) > 0 then
65484: LD_VAR 0 1
65488: PPUSH
65489: CALL_OW 437
65493: PUSH
65494: LD_INT 0
65496: GREATER
65497: IFFALSE 65567
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65499: LD_VAR 0 1
65503: PPUSH
65504: CALL_OW 437
65508: PUSH
65509: LD_INT 1
65511: ARRAY
65512: PUSH
65513: LD_INT 1
65515: ARRAY
65516: PUSH
65517: LD_STRING l
65519: EQUAL
65520: PUSH
65521: LD_VAR 0 1
65525: PPUSH
65526: CALL_OW 437
65530: PUSH
65531: LD_INT 1
65533: ARRAY
65534: PUSH
65535: LD_INT 4
65537: ARRAY
65538: PUSH
65539: LD_VAR 0 2
65543: EQUAL
65544: AND
65545: IFFALSE 65557
// result := true else
65547: LD_ADDR_VAR 0 3
65551: PUSH
65552: LD_INT 1
65554: ST_TO_ADDR
65555: GO 65565
// result := false ;
65557: LD_ADDR_VAR 0 3
65561: PUSH
65562: LD_INT 0
65564: ST_TO_ADDR
// end else
65565: GO 65575
// result := false ;
65567: LD_ADDR_VAR 0 3
65571: PUSH
65572: LD_INT 0
65574: ST_TO_ADDR
// end ;
65575: LD_VAR 0 3
65579: RET
// export function HealTarget ( sci ) ; begin
65580: LD_INT 0
65582: PPUSH
// if not sci then
65583: LD_VAR 0 1
65587: NOT
65588: IFFALSE 65592
// exit ;
65590: GO 65657
// result := 0 ;
65592: LD_ADDR_VAR 0 2
65596: PUSH
65597: LD_INT 0
65599: ST_TO_ADDR
// if GetTaskList ( sci ) then
65600: LD_VAR 0 1
65604: PPUSH
65605: CALL_OW 437
65609: IFFALSE 65657
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65611: LD_VAR 0 1
65615: PPUSH
65616: CALL_OW 437
65620: PUSH
65621: LD_INT 1
65623: ARRAY
65624: PUSH
65625: LD_INT 1
65627: ARRAY
65628: PUSH
65629: LD_STRING l
65631: EQUAL
65632: IFFALSE 65657
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65634: LD_ADDR_VAR 0 2
65638: PUSH
65639: LD_VAR 0 1
65643: PPUSH
65644: CALL_OW 437
65648: PUSH
65649: LD_INT 1
65651: ARRAY
65652: PUSH
65653: LD_INT 4
65655: ARRAY
65656: ST_TO_ADDR
// end ;
65657: LD_VAR 0 2
65661: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65662: LD_INT 0
65664: PPUSH
65665: PPUSH
65666: PPUSH
65667: PPUSH
// if not base_units then
65668: LD_VAR 0 1
65672: NOT
65673: IFFALSE 65677
// exit ;
65675: GO 65764
// result := false ;
65677: LD_ADDR_VAR 0 2
65681: PUSH
65682: LD_INT 0
65684: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65685: LD_ADDR_VAR 0 5
65689: PUSH
65690: LD_VAR 0 1
65694: PPUSH
65695: LD_INT 21
65697: PUSH
65698: LD_INT 3
65700: PUSH
65701: EMPTY
65702: LIST
65703: LIST
65704: PPUSH
65705: CALL_OW 72
65709: ST_TO_ADDR
// if not tmp then
65710: LD_VAR 0 5
65714: NOT
65715: IFFALSE 65719
// exit ;
65717: GO 65764
// for i in tmp do
65719: LD_ADDR_VAR 0 3
65723: PUSH
65724: LD_VAR 0 5
65728: PUSH
65729: FOR_IN
65730: IFFALSE 65762
// begin result := EnemyInRange ( i , 22 ) ;
65732: LD_ADDR_VAR 0 2
65736: PUSH
65737: LD_VAR 0 3
65741: PPUSH
65742: LD_INT 22
65744: PPUSH
65745: CALL 64000 0 2
65749: ST_TO_ADDR
// if result then
65750: LD_VAR 0 2
65754: IFFALSE 65760
// exit ;
65756: POP
65757: POP
65758: GO 65764
// end ;
65760: GO 65729
65762: POP
65763: POP
// end ;
65764: LD_VAR 0 2
65768: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
65769: LD_INT 0
65771: PPUSH
65772: PPUSH
// if not units then
65773: LD_VAR 0 1
65777: NOT
65778: IFFALSE 65782
// exit ;
65780: GO 65852
// result := [ ] ;
65782: LD_ADDR_VAR 0 3
65786: PUSH
65787: EMPTY
65788: ST_TO_ADDR
// for i in units do
65789: LD_ADDR_VAR 0 4
65793: PUSH
65794: LD_VAR 0 1
65798: PUSH
65799: FOR_IN
65800: IFFALSE 65850
// if GetTag ( i ) = tag then
65802: LD_VAR 0 4
65806: PPUSH
65807: CALL_OW 110
65811: PUSH
65812: LD_VAR 0 2
65816: EQUAL
65817: IFFALSE 65848
// result := Insert ( result , result + 1 , i ) ;
65819: LD_ADDR_VAR 0 3
65823: PUSH
65824: LD_VAR 0 3
65828: PPUSH
65829: LD_VAR 0 3
65833: PUSH
65834: LD_INT 1
65836: PLUS
65837: PPUSH
65838: LD_VAR 0 4
65842: PPUSH
65843: CALL_OW 2
65847: ST_TO_ADDR
65848: GO 65799
65850: POP
65851: POP
// end ;
65852: LD_VAR 0 3
65856: RET
// export function IsDriver ( un ) ; begin
65857: LD_INT 0
65859: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65860: LD_ADDR_VAR 0 2
65864: PUSH
65865: LD_VAR 0 1
65869: PUSH
65870: LD_INT 55
65872: PUSH
65873: EMPTY
65874: LIST
65875: PPUSH
65876: CALL_OW 69
65880: IN
65881: ST_TO_ADDR
// end ;
65882: LD_VAR 0 2
65886: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65887: LD_INT 0
65889: PPUSH
65890: PPUSH
// list := [ ] ;
65891: LD_ADDR_VAR 0 5
65895: PUSH
65896: EMPTY
65897: ST_TO_ADDR
// case d of 0 :
65898: LD_VAR 0 3
65902: PUSH
65903: LD_INT 0
65905: DOUBLE
65906: EQUAL
65907: IFTRUE 65911
65909: GO 66044
65911: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65912: LD_ADDR_VAR 0 5
65916: PUSH
65917: LD_VAR 0 1
65921: PUSH
65922: LD_INT 4
65924: MINUS
65925: PUSH
65926: LD_VAR 0 2
65930: PUSH
65931: LD_INT 4
65933: MINUS
65934: PUSH
65935: LD_INT 2
65937: PUSH
65938: EMPTY
65939: LIST
65940: LIST
65941: LIST
65942: PUSH
65943: LD_VAR 0 1
65947: PUSH
65948: LD_INT 3
65950: MINUS
65951: PUSH
65952: LD_VAR 0 2
65956: PUSH
65957: LD_INT 1
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: LIST
65964: PUSH
65965: LD_VAR 0 1
65969: PUSH
65970: LD_INT 4
65972: PLUS
65973: PUSH
65974: LD_VAR 0 2
65978: PUSH
65979: LD_INT 4
65981: PUSH
65982: EMPTY
65983: LIST
65984: LIST
65985: LIST
65986: PUSH
65987: LD_VAR 0 1
65991: PUSH
65992: LD_INT 3
65994: PLUS
65995: PUSH
65996: LD_VAR 0 2
66000: PUSH
66001: LD_INT 3
66003: PLUS
66004: PUSH
66005: LD_INT 5
66007: PUSH
66008: EMPTY
66009: LIST
66010: LIST
66011: LIST
66012: PUSH
66013: LD_VAR 0 1
66017: PUSH
66018: LD_VAR 0 2
66022: PUSH
66023: LD_INT 4
66025: PLUS
66026: PUSH
66027: LD_INT 0
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: LIST
66034: PUSH
66035: EMPTY
66036: LIST
66037: LIST
66038: LIST
66039: LIST
66040: LIST
66041: ST_TO_ADDR
// end ; 1 :
66042: GO 66742
66044: LD_INT 1
66046: DOUBLE
66047: EQUAL
66048: IFTRUE 66052
66050: GO 66185
66052: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66053: LD_ADDR_VAR 0 5
66057: PUSH
66058: LD_VAR 0 1
66062: PUSH
66063: LD_VAR 0 2
66067: PUSH
66068: LD_INT 4
66070: MINUS
66071: PUSH
66072: LD_INT 3
66074: PUSH
66075: EMPTY
66076: LIST
66077: LIST
66078: LIST
66079: PUSH
66080: LD_VAR 0 1
66084: PUSH
66085: LD_INT 3
66087: MINUS
66088: PUSH
66089: LD_VAR 0 2
66093: PUSH
66094: LD_INT 3
66096: MINUS
66097: PUSH
66098: LD_INT 2
66100: PUSH
66101: EMPTY
66102: LIST
66103: LIST
66104: LIST
66105: PUSH
66106: LD_VAR 0 1
66110: PUSH
66111: LD_INT 4
66113: MINUS
66114: PUSH
66115: LD_VAR 0 2
66119: PUSH
66120: LD_INT 1
66122: PUSH
66123: EMPTY
66124: LIST
66125: LIST
66126: LIST
66127: PUSH
66128: LD_VAR 0 1
66132: PUSH
66133: LD_VAR 0 2
66137: PUSH
66138: LD_INT 3
66140: PLUS
66141: PUSH
66142: LD_INT 0
66144: PUSH
66145: EMPTY
66146: LIST
66147: LIST
66148: LIST
66149: PUSH
66150: LD_VAR 0 1
66154: PUSH
66155: LD_INT 4
66157: PLUS
66158: PUSH
66159: LD_VAR 0 2
66163: PUSH
66164: LD_INT 4
66166: PLUS
66167: PUSH
66168: LD_INT 5
66170: PUSH
66171: EMPTY
66172: LIST
66173: LIST
66174: LIST
66175: PUSH
66176: EMPTY
66177: LIST
66178: LIST
66179: LIST
66180: LIST
66181: LIST
66182: ST_TO_ADDR
// end ; 2 :
66183: GO 66742
66185: LD_INT 2
66187: DOUBLE
66188: EQUAL
66189: IFTRUE 66193
66191: GO 66322
66193: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66194: LD_ADDR_VAR 0 5
66198: PUSH
66199: LD_VAR 0 1
66203: PUSH
66204: LD_VAR 0 2
66208: PUSH
66209: LD_INT 3
66211: MINUS
66212: PUSH
66213: LD_INT 3
66215: PUSH
66216: EMPTY
66217: LIST
66218: LIST
66219: LIST
66220: PUSH
66221: LD_VAR 0 1
66225: PUSH
66226: LD_INT 4
66228: PLUS
66229: PUSH
66230: LD_VAR 0 2
66234: PUSH
66235: LD_INT 4
66237: PUSH
66238: EMPTY
66239: LIST
66240: LIST
66241: LIST
66242: PUSH
66243: LD_VAR 0 1
66247: PUSH
66248: LD_VAR 0 2
66252: PUSH
66253: LD_INT 4
66255: PLUS
66256: PUSH
66257: LD_INT 0
66259: PUSH
66260: EMPTY
66261: LIST
66262: LIST
66263: LIST
66264: PUSH
66265: LD_VAR 0 1
66269: PUSH
66270: LD_INT 3
66272: MINUS
66273: PUSH
66274: LD_VAR 0 2
66278: PUSH
66279: LD_INT 1
66281: PUSH
66282: EMPTY
66283: LIST
66284: LIST
66285: LIST
66286: PUSH
66287: LD_VAR 0 1
66291: PUSH
66292: LD_INT 4
66294: MINUS
66295: PUSH
66296: LD_VAR 0 2
66300: PUSH
66301: LD_INT 4
66303: MINUS
66304: PUSH
66305: LD_INT 2
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: LIST
66312: PUSH
66313: EMPTY
66314: LIST
66315: LIST
66316: LIST
66317: LIST
66318: LIST
66319: ST_TO_ADDR
// end ; 3 :
66320: GO 66742
66322: LD_INT 3
66324: DOUBLE
66325: EQUAL
66326: IFTRUE 66330
66328: GO 66463
66330: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66331: LD_ADDR_VAR 0 5
66335: PUSH
66336: LD_VAR 0 1
66340: PUSH
66341: LD_INT 3
66343: PLUS
66344: PUSH
66345: LD_VAR 0 2
66349: PUSH
66350: LD_INT 4
66352: PUSH
66353: EMPTY
66354: LIST
66355: LIST
66356: LIST
66357: PUSH
66358: LD_VAR 0 1
66362: PUSH
66363: LD_INT 4
66365: PLUS
66366: PUSH
66367: LD_VAR 0 2
66371: PUSH
66372: LD_INT 4
66374: PLUS
66375: PUSH
66376: LD_INT 5
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: LIST
66383: PUSH
66384: LD_VAR 0 1
66388: PUSH
66389: LD_INT 4
66391: MINUS
66392: PUSH
66393: LD_VAR 0 2
66397: PUSH
66398: LD_INT 1
66400: PUSH
66401: EMPTY
66402: LIST
66403: LIST
66404: LIST
66405: PUSH
66406: LD_VAR 0 1
66410: PUSH
66411: LD_VAR 0 2
66415: PUSH
66416: LD_INT 4
66418: MINUS
66419: PUSH
66420: LD_INT 3
66422: PUSH
66423: EMPTY
66424: LIST
66425: LIST
66426: LIST
66427: PUSH
66428: LD_VAR 0 1
66432: PUSH
66433: LD_INT 3
66435: MINUS
66436: PUSH
66437: LD_VAR 0 2
66441: PUSH
66442: LD_INT 3
66444: MINUS
66445: PUSH
66446: LD_INT 2
66448: PUSH
66449: EMPTY
66450: LIST
66451: LIST
66452: LIST
66453: PUSH
66454: EMPTY
66455: LIST
66456: LIST
66457: LIST
66458: LIST
66459: LIST
66460: ST_TO_ADDR
// end ; 4 :
66461: GO 66742
66463: LD_INT 4
66465: DOUBLE
66466: EQUAL
66467: IFTRUE 66471
66469: GO 66604
66471: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66472: LD_ADDR_VAR 0 5
66476: PUSH
66477: LD_VAR 0 1
66481: PUSH
66482: LD_VAR 0 2
66486: PUSH
66487: LD_INT 4
66489: PLUS
66490: PUSH
66491: LD_INT 0
66493: PUSH
66494: EMPTY
66495: LIST
66496: LIST
66497: LIST
66498: PUSH
66499: LD_VAR 0 1
66503: PUSH
66504: LD_INT 3
66506: PLUS
66507: PUSH
66508: LD_VAR 0 2
66512: PUSH
66513: LD_INT 3
66515: PLUS
66516: PUSH
66517: LD_INT 5
66519: PUSH
66520: EMPTY
66521: LIST
66522: LIST
66523: LIST
66524: PUSH
66525: LD_VAR 0 1
66529: PUSH
66530: LD_INT 4
66532: PLUS
66533: PUSH
66534: LD_VAR 0 2
66538: PUSH
66539: LD_INT 4
66541: PUSH
66542: EMPTY
66543: LIST
66544: LIST
66545: LIST
66546: PUSH
66547: LD_VAR 0 1
66551: PUSH
66552: LD_VAR 0 2
66556: PUSH
66557: LD_INT 3
66559: MINUS
66560: PUSH
66561: LD_INT 3
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: LIST
66568: PUSH
66569: LD_VAR 0 1
66573: PUSH
66574: LD_INT 4
66576: MINUS
66577: PUSH
66578: LD_VAR 0 2
66582: PUSH
66583: LD_INT 4
66585: MINUS
66586: PUSH
66587: LD_INT 2
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: LIST
66594: PUSH
66595: EMPTY
66596: LIST
66597: LIST
66598: LIST
66599: LIST
66600: LIST
66601: ST_TO_ADDR
// end ; 5 :
66602: GO 66742
66604: LD_INT 5
66606: DOUBLE
66607: EQUAL
66608: IFTRUE 66612
66610: GO 66741
66612: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66613: LD_ADDR_VAR 0 5
66617: PUSH
66618: LD_VAR 0 1
66622: PUSH
66623: LD_INT 4
66625: MINUS
66626: PUSH
66627: LD_VAR 0 2
66631: PUSH
66632: LD_INT 1
66634: PUSH
66635: EMPTY
66636: LIST
66637: LIST
66638: LIST
66639: PUSH
66640: LD_VAR 0 1
66644: PUSH
66645: LD_VAR 0 2
66649: PUSH
66650: LD_INT 4
66652: MINUS
66653: PUSH
66654: LD_INT 3
66656: PUSH
66657: EMPTY
66658: LIST
66659: LIST
66660: LIST
66661: PUSH
66662: LD_VAR 0 1
66666: PUSH
66667: LD_INT 4
66669: PLUS
66670: PUSH
66671: LD_VAR 0 2
66675: PUSH
66676: LD_INT 4
66678: PLUS
66679: PUSH
66680: LD_INT 5
66682: PUSH
66683: EMPTY
66684: LIST
66685: LIST
66686: LIST
66687: PUSH
66688: LD_VAR 0 1
66692: PUSH
66693: LD_INT 3
66695: PLUS
66696: PUSH
66697: LD_VAR 0 2
66701: PUSH
66702: LD_INT 4
66704: PUSH
66705: EMPTY
66706: LIST
66707: LIST
66708: LIST
66709: PUSH
66710: LD_VAR 0 1
66714: PUSH
66715: LD_VAR 0 2
66719: PUSH
66720: LD_INT 3
66722: PLUS
66723: PUSH
66724: LD_INT 0
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: LIST
66731: PUSH
66732: EMPTY
66733: LIST
66734: LIST
66735: LIST
66736: LIST
66737: LIST
66738: ST_TO_ADDR
// end ; end ;
66739: GO 66742
66741: POP
// result := list ;
66742: LD_ADDR_VAR 0 4
66746: PUSH
66747: LD_VAR 0 5
66751: ST_TO_ADDR
// end ;
66752: LD_VAR 0 4
66756: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66757: LD_INT 0
66759: PPUSH
66760: PPUSH
66761: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66762: LD_VAR 0 1
66766: NOT
66767: PUSH
66768: LD_VAR 0 2
66772: PUSH
66773: LD_INT 1
66775: PUSH
66776: LD_INT 2
66778: PUSH
66779: LD_INT 3
66781: PUSH
66782: LD_INT 4
66784: PUSH
66785: EMPTY
66786: LIST
66787: LIST
66788: LIST
66789: LIST
66790: IN
66791: NOT
66792: OR
66793: IFFALSE 66797
// exit ;
66795: GO 66889
// tmp := [ ] ;
66797: LD_ADDR_VAR 0 5
66801: PUSH
66802: EMPTY
66803: ST_TO_ADDR
// for i in units do
66804: LD_ADDR_VAR 0 4
66808: PUSH
66809: LD_VAR 0 1
66813: PUSH
66814: FOR_IN
66815: IFFALSE 66858
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
66817: LD_ADDR_VAR 0 5
66821: PUSH
66822: LD_VAR 0 5
66826: PPUSH
66827: LD_VAR 0 5
66831: PUSH
66832: LD_INT 1
66834: PLUS
66835: PPUSH
66836: LD_VAR 0 4
66840: PPUSH
66841: LD_VAR 0 2
66845: PPUSH
66846: CALL_OW 259
66850: PPUSH
66851: CALL_OW 2
66855: ST_TO_ADDR
66856: GO 66814
66858: POP
66859: POP
// if not tmp then
66860: LD_VAR 0 5
66864: NOT
66865: IFFALSE 66869
// exit ;
66867: GO 66889
// result := SortListByListDesc ( units , tmp ) ;
66869: LD_ADDR_VAR 0 3
66873: PUSH
66874: LD_VAR 0 1
66878: PPUSH
66879: LD_VAR 0 5
66883: PPUSH
66884: CALL_OW 77
66888: ST_TO_ADDR
// end ;
66889: LD_VAR 0 3
66893: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66894: LD_INT 0
66896: PPUSH
66897: PPUSH
66898: PPUSH
// result := false ;
66899: LD_ADDR_VAR 0 3
66903: PUSH
66904: LD_INT 0
66906: ST_TO_ADDR
// x := GetX ( building ) ;
66907: LD_ADDR_VAR 0 4
66911: PUSH
66912: LD_VAR 0 2
66916: PPUSH
66917: CALL_OW 250
66921: ST_TO_ADDR
// y := GetY ( building ) ;
66922: LD_ADDR_VAR 0 5
66926: PUSH
66927: LD_VAR 0 2
66931: PPUSH
66932: CALL_OW 251
66936: ST_TO_ADDR
// if not building or not x or not y then
66937: LD_VAR 0 2
66941: NOT
66942: PUSH
66943: LD_VAR 0 4
66947: NOT
66948: OR
66949: PUSH
66950: LD_VAR 0 5
66954: NOT
66955: OR
66956: IFFALSE 66960
// exit ;
66958: GO 67052
// if GetTaskList ( unit ) then
66960: LD_VAR 0 1
66964: PPUSH
66965: CALL_OW 437
66969: IFFALSE 67052
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66971: LD_STRING e
66973: PUSH
66974: LD_VAR 0 1
66978: PPUSH
66979: CALL_OW 437
66983: PUSH
66984: LD_INT 1
66986: ARRAY
66987: PUSH
66988: LD_INT 1
66990: ARRAY
66991: EQUAL
66992: PUSH
66993: LD_VAR 0 4
66997: PUSH
66998: LD_VAR 0 1
67002: PPUSH
67003: CALL_OW 437
67007: PUSH
67008: LD_INT 1
67010: ARRAY
67011: PUSH
67012: LD_INT 2
67014: ARRAY
67015: EQUAL
67016: AND
67017: PUSH
67018: LD_VAR 0 5
67022: PUSH
67023: LD_VAR 0 1
67027: PPUSH
67028: CALL_OW 437
67032: PUSH
67033: LD_INT 1
67035: ARRAY
67036: PUSH
67037: LD_INT 3
67039: ARRAY
67040: EQUAL
67041: AND
67042: IFFALSE 67052
// result := true end ;
67044: LD_ADDR_VAR 0 3
67048: PUSH
67049: LD_INT 1
67051: ST_TO_ADDR
// end ;
67052: LD_VAR 0 3
67056: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67057: LD_INT 0
67059: PPUSH
// result := false ;
67060: LD_ADDR_VAR 0 4
67064: PUSH
67065: LD_INT 0
67067: ST_TO_ADDR
// if GetTaskList ( unit ) then
67068: LD_VAR 0 1
67072: PPUSH
67073: CALL_OW 437
67077: IFFALSE 67160
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67079: LD_STRING M
67081: PUSH
67082: LD_VAR 0 1
67086: PPUSH
67087: CALL_OW 437
67091: PUSH
67092: LD_INT 1
67094: ARRAY
67095: PUSH
67096: LD_INT 1
67098: ARRAY
67099: EQUAL
67100: PUSH
67101: LD_VAR 0 2
67105: PUSH
67106: LD_VAR 0 1
67110: PPUSH
67111: CALL_OW 437
67115: PUSH
67116: LD_INT 1
67118: ARRAY
67119: PUSH
67120: LD_INT 2
67122: ARRAY
67123: EQUAL
67124: AND
67125: PUSH
67126: LD_VAR 0 3
67130: PUSH
67131: LD_VAR 0 1
67135: PPUSH
67136: CALL_OW 437
67140: PUSH
67141: LD_INT 1
67143: ARRAY
67144: PUSH
67145: LD_INT 3
67147: ARRAY
67148: EQUAL
67149: AND
67150: IFFALSE 67160
// result := true ;
67152: LD_ADDR_VAR 0 4
67156: PUSH
67157: LD_INT 1
67159: ST_TO_ADDR
// end ; end ;
67160: LD_VAR 0 4
67164: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67165: LD_INT 0
67167: PPUSH
67168: PPUSH
67169: PPUSH
67170: PPUSH
// if not unit or not area then
67171: LD_VAR 0 1
67175: NOT
67176: PUSH
67177: LD_VAR 0 2
67181: NOT
67182: OR
67183: IFFALSE 67187
// exit ;
67185: GO 67351
// tmp := AreaToList ( area , i ) ;
67187: LD_ADDR_VAR 0 6
67191: PUSH
67192: LD_VAR 0 2
67196: PPUSH
67197: LD_VAR 0 5
67201: PPUSH
67202: CALL_OW 517
67206: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67207: LD_ADDR_VAR 0 5
67211: PUSH
67212: DOUBLE
67213: LD_INT 1
67215: DEC
67216: ST_TO_ADDR
67217: LD_VAR 0 6
67221: PUSH
67222: LD_INT 1
67224: ARRAY
67225: PUSH
67226: FOR_TO
67227: IFFALSE 67349
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67229: LD_ADDR_VAR 0 7
67233: PUSH
67234: LD_VAR 0 6
67238: PUSH
67239: LD_INT 1
67241: ARRAY
67242: PUSH
67243: LD_VAR 0 5
67247: ARRAY
67248: PUSH
67249: LD_VAR 0 6
67253: PUSH
67254: LD_INT 2
67256: ARRAY
67257: PUSH
67258: LD_VAR 0 5
67262: ARRAY
67263: PUSH
67264: EMPTY
67265: LIST
67266: LIST
67267: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
67268: LD_VAR 0 7
67272: PUSH
67273: LD_INT 1
67275: ARRAY
67276: PPUSH
67277: LD_VAR 0 7
67281: PUSH
67282: LD_INT 2
67284: ARRAY
67285: PPUSH
67286: CALL_OW 428
67290: PUSH
67291: LD_INT 0
67293: EQUAL
67294: IFFALSE 67347
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67296: LD_VAR 0 1
67300: PPUSH
67301: LD_VAR 0 7
67305: PUSH
67306: LD_INT 1
67308: ARRAY
67309: PPUSH
67310: LD_VAR 0 7
67314: PUSH
67315: LD_INT 2
67317: ARRAY
67318: PPUSH
67319: LD_VAR 0 3
67323: PPUSH
67324: CALL_OW 48
// result := IsPlaced ( unit ) ;
67328: LD_ADDR_VAR 0 4
67332: PUSH
67333: LD_VAR 0 1
67337: PPUSH
67338: CALL_OW 305
67342: ST_TO_ADDR
// exit ;
67343: POP
67344: POP
67345: GO 67351
// end ; end ;
67347: GO 67226
67349: POP
67350: POP
// end ;
67351: LD_VAR 0 4
67355: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67356: LD_INT 0
67358: PPUSH
67359: PPUSH
67360: PPUSH
// if not side or side > 8 then
67361: LD_VAR 0 1
67365: NOT
67366: PUSH
67367: LD_VAR 0 1
67371: PUSH
67372: LD_INT 8
67374: GREATER
67375: OR
67376: IFFALSE 67380
// exit ;
67378: GO 67567
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67380: LD_ADDR_VAR 0 4
67384: PUSH
67385: LD_INT 22
67387: PUSH
67388: LD_VAR 0 1
67392: PUSH
67393: EMPTY
67394: LIST
67395: LIST
67396: PUSH
67397: LD_INT 21
67399: PUSH
67400: LD_INT 3
67402: PUSH
67403: EMPTY
67404: LIST
67405: LIST
67406: PUSH
67407: EMPTY
67408: LIST
67409: LIST
67410: PPUSH
67411: CALL_OW 69
67415: ST_TO_ADDR
// if not tmp then
67416: LD_VAR 0 4
67420: NOT
67421: IFFALSE 67425
// exit ;
67423: GO 67567
// enable_addtolog := true ;
67425: LD_ADDR_OWVAR 81
67429: PUSH
67430: LD_INT 1
67432: ST_TO_ADDR
// AddToLog ( [ ) ;
67433: LD_STRING [
67435: PPUSH
67436: CALL_OW 561
// for i in tmp do
67440: LD_ADDR_VAR 0 3
67444: PUSH
67445: LD_VAR 0 4
67449: PUSH
67450: FOR_IN
67451: IFFALSE 67558
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67453: LD_STRING [
67455: PUSH
67456: LD_VAR 0 3
67460: PPUSH
67461: CALL_OW 266
67465: STR
67466: PUSH
67467: LD_STRING , 
67469: STR
67470: PUSH
67471: LD_VAR 0 3
67475: PPUSH
67476: CALL_OW 250
67480: STR
67481: PUSH
67482: LD_STRING , 
67484: STR
67485: PUSH
67486: LD_VAR 0 3
67490: PPUSH
67491: CALL_OW 251
67495: STR
67496: PUSH
67497: LD_STRING , 
67499: STR
67500: PUSH
67501: LD_VAR 0 3
67505: PPUSH
67506: CALL_OW 254
67510: STR
67511: PUSH
67512: LD_STRING , 
67514: STR
67515: PUSH
67516: LD_VAR 0 3
67520: PPUSH
67521: LD_INT 1
67523: PPUSH
67524: CALL_OW 268
67528: STR
67529: PUSH
67530: LD_STRING , 
67532: STR
67533: PUSH
67534: LD_VAR 0 3
67538: PPUSH
67539: LD_INT 2
67541: PPUSH
67542: CALL_OW 268
67546: STR
67547: PUSH
67548: LD_STRING ],
67550: STR
67551: PPUSH
67552: CALL_OW 561
// end ;
67556: GO 67450
67558: POP
67559: POP
// AddToLog ( ]; ) ;
67560: LD_STRING ];
67562: PPUSH
67563: CALL_OW 561
// end ;
67567: LD_VAR 0 2
67571: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67572: LD_INT 0
67574: PPUSH
67575: PPUSH
67576: PPUSH
67577: PPUSH
67578: PPUSH
// if not area or not rate or not max then
67579: LD_VAR 0 1
67583: NOT
67584: PUSH
67585: LD_VAR 0 2
67589: NOT
67590: OR
67591: PUSH
67592: LD_VAR 0 4
67596: NOT
67597: OR
67598: IFFALSE 67602
// exit ;
67600: GO 67794
// while 1 do
67602: LD_INT 1
67604: IFFALSE 67794
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67606: LD_ADDR_VAR 0 9
67610: PUSH
67611: LD_VAR 0 1
67615: PPUSH
67616: LD_INT 1
67618: PPUSH
67619: CALL_OW 287
67623: PUSH
67624: LD_INT 10
67626: MUL
67627: ST_TO_ADDR
// r := rate / 10 ;
67628: LD_ADDR_VAR 0 7
67632: PUSH
67633: LD_VAR 0 2
67637: PUSH
67638: LD_INT 10
67640: DIVREAL
67641: ST_TO_ADDR
// time := 1 1$00 ;
67642: LD_ADDR_VAR 0 8
67646: PUSH
67647: LD_INT 2100
67649: ST_TO_ADDR
// if amount < min then
67650: LD_VAR 0 9
67654: PUSH
67655: LD_VAR 0 3
67659: LESS
67660: IFFALSE 67678
// r := r * 2 else
67662: LD_ADDR_VAR 0 7
67666: PUSH
67667: LD_VAR 0 7
67671: PUSH
67672: LD_INT 2
67674: MUL
67675: ST_TO_ADDR
67676: GO 67704
// if amount > max then
67678: LD_VAR 0 9
67682: PUSH
67683: LD_VAR 0 4
67687: GREATER
67688: IFFALSE 67704
// r := r / 2 ;
67690: LD_ADDR_VAR 0 7
67694: PUSH
67695: LD_VAR 0 7
67699: PUSH
67700: LD_INT 2
67702: DIVREAL
67703: ST_TO_ADDR
// time := time / r ;
67704: LD_ADDR_VAR 0 8
67708: PUSH
67709: LD_VAR 0 8
67713: PUSH
67714: LD_VAR 0 7
67718: DIVREAL
67719: ST_TO_ADDR
// if time < 0 then
67720: LD_VAR 0 8
67724: PUSH
67725: LD_INT 0
67727: LESS
67728: IFFALSE 67745
// time := time * - 1 ;
67730: LD_ADDR_VAR 0 8
67734: PUSH
67735: LD_VAR 0 8
67739: PUSH
67740: LD_INT 1
67742: NEG
67743: MUL
67744: ST_TO_ADDR
// wait ( time ) ;
67745: LD_VAR 0 8
67749: PPUSH
67750: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
67754: LD_INT 35
67756: PPUSH
67757: LD_INT 875
67759: PPUSH
67760: CALL_OW 12
67764: PPUSH
67765: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67769: LD_INT 1
67771: PPUSH
67772: LD_INT 5
67774: PPUSH
67775: CALL_OW 12
67779: PPUSH
67780: LD_VAR 0 1
67784: PPUSH
67785: LD_INT 1
67787: PPUSH
67788: CALL_OW 55
// end ;
67792: GO 67602
// end ;
67794: LD_VAR 0 5
67798: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67799: LD_INT 0
67801: PPUSH
67802: PPUSH
67803: PPUSH
67804: PPUSH
67805: PPUSH
67806: PPUSH
67807: PPUSH
67808: PPUSH
// if not turrets or not factories then
67809: LD_VAR 0 1
67813: NOT
67814: PUSH
67815: LD_VAR 0 2
67819: NOT
67820: OR
67821: IFFALSE 67825
// exit ;
67823: GO 68132
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67825: LD_ADDR_VAR 0 10
67829: PUSH
67830: LD_INT 5
67832: PUSH
67833: LD_INT 6
67835: PUSH
67836: EMPTY
67837: LIST
67838: LIST
67839: PUSH
67840: LD_INT 2
67842: PUSH
67843: LD_INT 4
67845: PUSH
67846: EMPTY
67847: LIST
67848: LIST
67849: PUSH
67850: LD_INT 3
67852: PUSH
67853: LD_INT 5
67855: PUSH
67856: EMPTY
67857: LIST
67858: LIST
67859: PUSH
67860: EMPTY
67861: LIST
67862: LIST
67863: LIST
67864: PUSH
67865: LD_INT 24
67867: PUSH
67868: LD_INT 25
67870: PUSH
67871: EMPTY
67872: LIST
67873: LIST
67874: PUSH
67875: LD_INT 23
67877: PUSH
67878: LD_INT 27
67880: PUSH
67881: EMPTY
67882: LIST
67883: LIST
67884: PUSH
67885: EMPTY
67886: LIST
67887: LIST
67888: PUSH
67889: LD_INT 42
67891: PUSH
67892: LD_INT 43
67894: PUSH
67895: EMPTY
67896: LIST
67897: LIST
67898: PUSH
67899: LD_INT 44
67901: PUSH
67902: LD_INT 46
67904: PUSH
67905: EMPTY
67906: LIST
67907: LIST
67908: PUSH
67909: LD_INT 45
67911: PUSH
67912: LD_INT 47
67914: PUSH
67915: EMPTY
67916: LIST
67917: LIST
67918: PUSH
67919: EMPTY
67920: LIST
67921: LIST
67922: LIST
67923: PUSH
67924: EMPTY
67925: LIST
67926: LIST
67927: LIST
67928: ST_TO_ADDR
// result := [ ] ;
67929: LD_ADDR_VAR 0 3
67933: PUSH
67934: EMPTY
67935: ST_TO_ADDR
// for i in turrets do
67936: LD_ADDR_VAR 0 4
67940: PUSH
67941: LD_VAR 0 1
67945: PUSH
67946: FOR_IN
67947: IFFALSE 68130
// begin nat := GetNation ( i ) ;
67949: LD_ADDR_VAR 0 7
67953: PUSH
67954: LD_VAR 0 4
67958: PPUSH
67959: CALL_OW 248
67963: ST_TO_ADDR
// weapon := 0 ;
67964: LD_ADDR_VAR 0 8
67968: PUSH
67969: LD_INT 0
67971: ST_TO_ADDR
// if not nat then
67972: LD_VAR 0 7
67976: NOT
67977: IFFALSE 67981
// continue ;
67979: GO 67946
// for j in list [ nat ] do
67981: LD_ADDR_VAR 0 5
67985: PUSH
67986: LD_VAR 0 10
67990: PUSH
67991: LD_VAR 0 7
67995: ARRAY
67996: PUSH
67997: FOR_IN
67998: IFFALSE 68039
// if GetBWeapon ( i ) = j [ 1 ] then
68000: LD_VAR 0 4
68004: PPUSH
68005: CALL_OW 269
68009: PUSH
68010: LD_VAR 0 5
68014: PUSH
68015: LD_INT 1
68017: ARRAY
68018: EQUAL
68019: IFFALSE 68037
// begin weapon := j [ 2 ] ;
68021: LD_ADDR_VAR 0 8
68025: PUSH
68026: LD_VAR 0 5
68030: PUSH
68031: LD_INT 2
68033: ARRAY
68034: ST_TO_ADDR
// break ;
68035: GO 68039
// end ;
68037: GO 67997
68039: POP
68040: POP
// if not weapon then
68041: LD_VAR 0 8
68045: NOT
68046: IFFALSE 68050
// continue ;
68048: GO 67946
// for k in factories do
68050: LD_ADDR_VAR 0 6
68054: PUSH
68055: LD_VAR 0 2
68059: PUSH
68060: FOR_IN
68061: IFFALSE 68126
// begin weapons := AvailableWeaponList ( k ) ;
68063: LD_ADDR_VAR 0 9
68067: PUSH
68068: LD_VAR 0 6
68072: PPUSH
68073: CALL_OW 478
68077: ST_TO_ADDR
// if not weapons then
68078: LD_VAR 0 9
68082: NOT
68083: IFFALSE 68087
// continue ;
68085: GO 68060
// if weapon in weapons then
68087: LD_VAR 0 8
68091: PUSH
68092: LD_VAR 0 9
68096: IN
68097: IFFALSE 68124
// begin result := [ i , weapon ] ;
68099: LD_ADDR_VAR 0 3
68103: PUSH
68104: LD_VAR 0 4
68108: PUSH
68109: LD_VAR 0 8
68113: PUSH
68114: EMPTY
68115: LIST
68116: LIST
68117: ST_TO_ADDR
// exit ;
68118: POP
68119: POP
68120: POP
68121: POP
68122: GO 68132
// end ; end ;
68124: GO 68060
68126: POP
68127: POP
// end ;
68128: GO 67946
68130: POP
68131: POP
// end ;
68132: LD_VAR 0 3
68136: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68137: LD_INT 0
68139: PPUSH
// if not side or side > 8 then
68140: LD_VAR 0 3
68144: NOT
68145: PUSH
68146: LD_VAR 0 3
68150: PUSH
68151: LD_INT 8
68153: GREATER
68154: OR
68155: IFFALSE 68159
// exit ;
68157: GO 68218
// if not range then
68159: LD_VAR 0 4
68163: NOT
68164: IFFALSE 68175
// range := - 12 ;
68166: LD_ADDR_VAR 0 4
68170: PUSH
68171: LD_INT 12
68173: NEG
68174: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68175: LD_VAR 0 1
68179: PPUSH
68180: LD_VAR 0 2
68184: PPUSH
68185: LD_VAR 0 3
68189: PPUSH
68190: LD_VAR 0 4
68194: PPUSH
68195: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68199: LD_VAR 0 1
68203: PPUSH
68204: LD_VAR 0 2
68208: PPUSH
68209: LD_VAR 0 3
68213: PPUSH
68214: CALL_OW 331
// end ;
68218: LD_VAR 0 5
68222: RET
// export function Video ( mode ) ; begin
68223: LD_INT 0
68225: PPUSH
// ingame_video = mode ;
68226: LD_ADDR_OWVAR 52
68230: PUSH
68231: LD_VAR 0 1
68235: ST_TO_ADDR
// interface_hidden = mode ;
68236: LD_ADDR_OWVAR 54
68240: PUSH
68241: LD_VAR 0 1
68245: ST_TO_ADDR
// end ;
68246: LD_VAR 0 2
68250: RET
// export function Join ( array , element ) ; begin
68251: LD_INT 0
68253: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68254: LD_ADDR_VAR 0 3
68258: PUSH
68259: LD_VAR 0 1
68263: PPUSH
68264: LD_VAR 0 1
68268: PUSH
68269: LD_INT 1
68271: PLUS
68272: PPUSH
68273: LD_VAR 0 2
68277: PPUSH
68278: CALL_OW 1
68282: ST_TO_ADDR
// end ;
68283: LD_VAR 0 3
68287: RET
// export function JoinUnion ( array , element ) ; begin
68288: LD_INT 0
68290: PPUSH
// result := array union element ;
68291: LD_ADDR_VAR 0 3
68295: PUSH
68296: LD_VAR 0 1
68300: PUSH
68301: LD_VAR 0 2
68305: UNION
68306: ST_TO_ADDR
// end ;
68307: LD_VAR 0 3
68311: RET
// export function GetBehemoths ( side ) ; begin
68312: LD_INT 0
68314: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
68315: LD_ADDR_VAR 0 2
68319: PUSH
68320: LD_INT 22
68322: PUSH
68323: LD_VAR 0 1
68327: PUSH
68328: EMPTY
68329: LIST
68330: LIST
68331: PUSH
68332: LD_INT 31
68334: PUSH
68335: LD_INT 25
68337: PUSH
68338: EMPTY
68339: LIST
68340: LIST
68341: PUSH
68342: EMPTY
68343: LIST
68344: LIST
68345: PPUSH
68346: CALL_OW 69
68350: ST_TO_ADDR
// end ;
68351: LD_VAR 0 2
68355: RET
// export function Shuffle ( array ) ; var i , index ; begin
68356: LD_INT 0
68358: PPUSH
68359: PPUSH
68360: PPUSH
// result := [ ] ;
68361: LD_ADDR_VAR 0 2
68365: PUSH
68366: EMPTY
68367: ST_TO_ADDR
// if not array then
68368: LD_VAR 0 1
68372: NOT
68373: IFFALSE 68377
// exit ;
68375: GO 68476
// Randomize ;
68377: CALL_OW 10
// for i = array downto 1 do
68381: LD_ADDR_VAR 0 3
68385: PUSH
68386: DOUBLE
68387: LD_VAR 0 1
68391: INC
68392: ST_TO_ADDR
68393: LD_INT 1
68395: PUSH
68396: FOR_DOWNTO
68397: IFFALSE 68474
// begin index := rand ( 1 , array ) ;
68399: LD_ADDR_VAR 0 4
68403: PUSH
68404: LD_INT 1
68406: PPUSH
68407: LD_VAR 0 1
68411: PPUSH
68412: CALL_OW 12
68416: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68417: LD_ADDR_VAR 0 2
68421: PUSH
68422: LD_VAR 0 2
68426: PPUSH
68427: LD_VAR 0 2
68431: PUSH
68432: LD_INT 1
68434: PLUS
68435: PPUSH
68436: LD_VAR 0 1
68440: PUSH
68441: LD_VAR 0 4
68445: ARRAY
68446: PPUSH
68447: CALL_OW 2
68451: ST_TO_ADDR
// array := Delete ( array , index ) ;
68452: LD_ADDR_VAR 0 1
68456: PUSH
68457: LD_VAR 0 1
68461: PPUSH
68462: LD_VAR 0 4
68466: PPUSH
68467: CALL_OW 3
68471: ST_TO_ADDR
// end ;
68472: GO 68396
68474: POP
68475: POP
// end ;
68476: LD_VAR 0 2
68480: RET
// export function GetBaseMaterials ( base ) ; begin
68481: LD_INT 0
68483: PPUSH
// result := [ 0 , 0 , 0 ] ;
68484: LD_ADDR_VAR 0 2
68488: PUSH
68489: LD_INT 0
68491: PUSH
68492: LD_INT 0
68494: PUSH
68495: LD_INT 0
68497: PUSH
68498: EMPTY
68499: LIST
68500: LIST
68501: LIST
68502: ST_TO_ADDR
// if not base then
68503: LD_VAR 0 1
68507: NOT
68508: IFFALSE 68512
// exit ;
68510: GO 68561
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68512: LD_ADDR_VAR 0 2
68516: PUSH
68517: LD_VAR 0 1
68521: PPUSH
68522: LD_INT 1
68524: PPUSH
68525: CALL_OW 275
68529: PUSH
68530: LD_VAR 0 1
68534: PPUSH
68535: LD_INT 2
68537: PPUSH
68538: CALL_OW 275
68542: PUSH
68543: LD_VAR 0 1
68547: PPUSH
68548: LD_INT 3
68550: PPUSH
68551: CALL_OW 275
68555: PUSH
68556: EMPTY
68557: LIST
68558: LIST
68559: LIST
68560: ST_TO_ADDR
// end ;
68561: LD_VAR 0 2
68565: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68566: LD_INT 0
68568: PPUSH
68569: PPUSH
// result := array ;
68570: LD_ADDR_VAR 0 3
68574: PUSH
68575: LD_VAR 0 1
68579: ST_TO_ADDR
// if size > 0 then
68580: LD_VAR 0 2
68584: PUSH
68585: LD_INT 0
68587: GREATER
68588: IFFALSE 68634
// for i := array downto size do
68590: LD_ADDR_VAR 0 4
68594: PUSH
68595: DOUBLE
68596: LD_VAR 0 1
68600: INC
68601: ST_TO_ADDR
68602: LD_VAR 0 2
68606: PUSH
68607: FOR_DOWNTO
68608: IFFALSE 68632
// result := Delete ( result , result ) ;
68610: LD_ADDR_VAR 0 3
68614: PUSH
68615: LD_VAR 0 3
68619: PPUSH
68620: LD_VAR 0 3
68624: PPUSH
68625: CALL_OW 3
68629: ST_TO_ADDR
68630: GO 68607
68632: POP
68633: POP
// end ;
68634: LD_VAR 0 3
68638: RET
// export function ComExit ( unit ) ; var tmp ; begin
68639: LD_INT 0
68641: PPUSH
68642: PPUSH
// if not IsInUnit ( unit ) then
68643: LD_VAR 0 1
68647: PPUSH
68648: CALL_OW 310
68652: NOT
68653: IFFALSE 68657
// exit ;
68655: GO 68717
// tmp := IsInUnit ( unit ) ;
68657: LD_ADDR_VAR 0 3
68661: PUSH
68662: LD_VAR 0 1
68666: PPUSH
68667: CALL_OW 310
68671: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68672: LD_VAR 0 3
68676: PPUSH
68677: CALL_OW 247
68681: PUSH
68682: LD_INT 2
68684: EQUAL
68685: IFFALSE 68698
// ComExitVehicle ( unit ) else
68687: LD_VAR 0 1
68691: PPUSH
68692: CALL_OW 121
68696: GO 68707
// ComExitBuilding ( unit ) ;
68698: LD_VAR 0 1
68702: PPUSH
68703: CALL_OW 122
// result := tmp ;
68707: LD_ADDR_VAR 0 2
68711: PUSH
68712: LD_VAR 0 3
68716: ST_TO_ADDR
// end ;
68717: LD_VAR 0 2
68721: RET
// export function ResetHc ; begin
68722: LD_INT 0
68724: PPUSH
// InitHc ;
68725: CALL_OW 19
// hc_importance := 0 ;
68729: LD_ADDR_OWVAR 32
68733: PUSH
68734: LD_INT 0
68736: ST_TO_ADDR
// end ;
68737: LD_VAR 0 1
68741: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68742: LD_INT 0
68744: PPUSH
68745: PPUSH
68746: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68747: LD_ADDR_VAR 0 6
68751: PUSH
68752: LD_VAR 0 1
68756: PUSH
68757: LD_VAR 0 3
68761: PLUS
68762: PUSH
68763: LD_INT 2
68765: DIV
68766: ST_TO_ADDR
// if _x < 0 then
68767: LD_VAR 0 6
68771: PUSH
68772: LD_INT 0
68774: LESS
68775: IFFALSE 68792
// _x := _x * - 1 ;
68777: LD_ADDR_VAR 0 6
68781: PUSH
68782: LD_VAR 0 6
68786: PUSH
68787: LD_INT 1
68789: NEG
68790: MUL
68791: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68792: LD_ADDR_VAR 0 7
68796: PUSH
68797: LD_VAR 0 2
68801: PUSH
68802: LD_VAR 0 4
68806: PLUS
68807: PUSH
68808: LD_INT 2
68810: DIV
68811: ST_TO_ADDR
// if _y < 0 then
68812: LD_VAR 0 7
68816: PUSH
68817: LD_INT 0
68819: LESS
68820: IFFALSE 68837
// _y := _y * - 1 ;
68822: LD_ADDR_VAR 0 7
68826: PUSH
68827: LD_VAR 0 7
68831: PUSH
68832: LD_INT 1
68834: NEG
68835: MUL
68836: ST_TO_ADDR
// result := [ _x , _y ] ;
68837: LD_ADDR_VAR 0 5
68841: PUSH
68842: LD_VAR 0 6
68846: PUSH
68847: LD_VAR 0 7
68851: PUSH
68852: EMPTY
68853: LIST
68854: LIST
68855: ST_TO_ADDR
// end ;
68856: LD_VAR 0 5
68860: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68861: LD_INT 0
68863: PPUSH
68864: PPUSH
68865: PPUSH
68866: PPUSH
// task := GetTaskList ( unit ) ;
68867: LD_ADDR_VAR 0 7
68871: PUSH
68872: LD_VAR 0 1
68876: PPUSH
68877: CALL_OW 437
68881: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68882: LD_VAR 0 7
68886: NOT
68887: PUSH
68888: LD_VAR 0 1
68892: PPUSH
68893: LD_VAR 0 2
68897: PPUSH
68898: CALL_OW 308
68902: NOT
68903: AND
68904: IFFALSE 68908
// exit ;
68906: GO 69026
// if IsInArea ( unit , area ) then
68908: LD_VAR 0 1
68912: PPUSH
68913: LD_VAR 0 2
68917: PPUSH
68918: CALL_OW 308
68922: IFFALSE 68940
// begin ComMoveToArea ( unit , goAway ) ;
68924: LD_VAR 0 1
68928: PPUSH
68929: LD_VAR 0 3
68933: PPUSH
68934: CALL_OW 113
// exit ;
68938: GO 69026
// end ; if task [ 1 ] [ 1 ] <> M then
68940: LD_VAR 0 7
68944: PUSH
68945: LD_INT 1
68947: ARRAY
68948: PUSH
68949: LD_INT 1
68951: ARRAY
68952: PUSH
68953: LD_STRING M
68955: NONEQUAL
68956: IFFALSE 68960
// exit ;
68958: GO 69026
// x := task [ 1 ] [ 2 ] ;
68960: LD_ADDR_VAR 0 5
68964: PUSH
68965: LD_VAR 0 7
68969: PUSH
68970: LD_INT 1
68972: ARRAY
68973: PUSH
68974: LD_INT 2
68976: ARRAY
68977: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68978: LD_ADDR_VAR 0 6
68982: PUSH
68983: LD_VAR 0 7
68987: PUSH
68988: LD_INT 1
68990: ARRAY
68991: PUSH
68992: LD_INT 3
68994: ARRAY
68995: ST_TO_ADDR
// if InArea ( x , y , area ) then
68996: LD_VAR 0 5
69000: PPUSH
69001: LD_VAR 0 6
69005: PPUSH
69006: LD_VAR 0 2
69010: PPUSH
69011: CALL_OW 309
69015: IFFALSE 69026
// ComStop ( unit ) ;
69017: LD_VAR 0 1
69021: PPUSH
69022: CALL_OW 141
// end ;
69026: LD_VAR 0 4
69030: RET
// export function Abs ( value ) ; begin
69031: LD_INT 0
69033: PPUSH
// result := value ;
69034: LD_ADDR_VAR 0 2
69038: PUSH
69039: LD_VAR 0 1
69043: ST_TO_ADDR
// if value < 0 then
69044: LD_VAR 0 1
69048: PUSH
69049: LD_INT 0
69051: LESS
69052: IFFALSE 69069
// result := value * - 1 ;
69054: LD_ADDR_VAR 0 2
69058: PUSH
69059: LD_VAR 0 1
69063: PUSH
69064: LD_INT 1
69066: NEG
69067: MUL
69068: ST_TO_ADDR
// end ;
69069: LD_VAR 0 2
69073: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69074: LD_INT 0
69076: PPUSH
69077: PPUSH
69078: PPUSH
69079: PPUSH
69080: PPUSH
69081: PPUSH
69082: PPUSH
69083: PPUSH
// if not unit or not building then
69084: LD_VAR 0 1
69088: NOT
69089: PUSH
69090: LD_VAR 0 2
69094: NOT
69095: OR
69096: IFFALSE 69100
// exit ;
69098: GO 69326
// x := GetX ( building ) ;
69100: LD_ADDR_VAR 0 4
69104: PUSH
69105: LD_VAR 0 2
69109: PPUSH
69110: CALL_OW 250
69114: ST_TO_ADDR
// y := GetY ( building ) ;
69115: LD_ADDR_VAR 0 6
69119: PUSH
69120: LD_VAR 0 2
69124: PPUSH
69125: CALL_OW 251
69129: ST_TO_ADDR
// d := GetDir ( building ) ;
69130: LD_ADDR_VAR 0 8
69134: PUSH
69135: LD_VAR 0 2
69139: PPUSH
69140: CALL_OW 254
69144: ST_TO_ADDR
// r := 4 ;
69145: LD_ADDR_VAR 0 9
69149: PUSH
69150: LD_INT 4
69152: ST_TO_ADDR
// for i := 1 to 5 do
69153: LD_ADDR_VAR 0 10
69157: PUSH
69158: DOUBLE
69159: LD_INT 1
69161: DEC
69162: ST_TO_ADDR
69163: LD_INT 5
69165: PUSH
69166: FOR_TO
69167: IFFALSE 69324
// begin _x := ShiftX ( x , d , r + i ) ;
69169: LD_ADDR_VAR 0 5
69173: PUSH
69174: LD_VAR 0 4
69178: PPUSH
69179: LD_VAR 0 8
69183: PPUSH
69184: LD_VAR 0 9
69188: PUSH
69189: LD_VAR 0 10
69193: PLUS
69194: PPUSH
69195: CALL_OW 272
69199: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69200: LD_ADDR_VAR 0 7
69204: PUSH
69205: LD_VAR 0 6
69209: PPUSH
69210: LD_VAR 0 8
69214: PPUSH
69215: LD_VAR 0 9
69219: PUSH
69220: LD_VAR 0 10
69224: PLUS
69225: PPUSH
69226: CALL_OW 273
69230: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69231: LD_VAR 0 5
69235: PPUSH
69236: LD_VAR 0 7
69240: PPUSH
69241: CALL_OW 488
69245: PUSH
69246: LD_VAR 0 5
69250: PPUSH
69251: LD_VAR 0 7
69255: PPUSH
69256: CALL_OW 428
69260: PPUSH
69261: CALL_OW 247
69265: PUSH
69266: LD_INT 3
69268: PUSH
69269: LD_INT 2
69271: PUSH
69272: EMPTY
69273: LIST
69274: LIST
69275: IN
69276: NOT
69277: AND
69278: IFFALSE 69322
// begin ComMoveXY ( unit , _x , _y ) ;
69280: LD_VAR 0 1
69284: PPUSH
69285: LD_VAR 0 5
69289: PPUSH
69290: LD_VAR 0 7
69294: PPUSH
69295: CALL_OW 111
// result := [ _x , _y ] ;
69299: LD_ADDR_VAR 0 3
69303: PUSH
69304: LD_VAR 0 5
69308: PUSH
69309: LD_VAR 0 7
69313: PUSH
69314: EMPTY
69315: LIST
69316: LIST
69317: ST_TO_ADDR
// exit ;
69318: POP
69319: POP
69320: GO 69326
// end ; end ;
69322: GO 69166
69324: POP
69325: POP
// end ; end_of_file
69326: LD_VAR 0 3
69330: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
69331: LD_VAR 0 1
69335: PUSH
69336: LD_INT 200
69338: DOUBLE
69339: GREATEREQUAL
69340: IFFALSE 69348
69342: LD_INT 299
69344: DOUBLE
69345: LESSEQUAL
69346: IFTRUE 69350
69348: GO 69382
69350: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
69351: LD_VAR 0 1
69355: PPUSH
69356: LD_VAR 0 2
69360: PPUSH
69361: LD_VAR 0 3
69365: PPUSH
69366: LD_VAR 0 4
69370: PPUSH
69371: LD_VAR 0 5
69375: PPUSH
69376: CALL 28387 0 5
69380: GO 69459
69382: LD_INT 300
69384: DOUBLE
69385: GREATEREQUAL
69386: IFFALSE 69394
69388: LD_INT 399
69390: DOUBLE
69391: LESSEQUAL
69392: IFTRUE 69396
69394: GO 69458
69396: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
69397: LD_VAR 0 1
69401: PPUSH
69402: LD_VAR 0 2
69406: PPUSH
69407: LD_VAR 0 3
69411: PPUSH
69412: LD_VAR 0 4
69416: PPUSH
69417: LD_VAR 0 5
69421: PPUSH
69422: LD_VAR 0 6
69426: PPUSH
69427: LD_VAR 0 7
69431: PPUSH
69432: LD_VAR 0 8
69436: PPUSH
69437: LD_VAR 0 9
69441: PPUSH
69442: LD_VAR 0 10
69446: PPUSH
69447: LD_VAR 0 11
69451: PPUSH
69452: CALL 26293 0 11
69456: GO 69459
69458: POP
// end ;
69459: PPOPN 11
69461: END
