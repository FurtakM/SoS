// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitVariables ;
  11: CALL 130 0 0
// CreateNature ;
  15: CALL 9187 0 0
// PrepareAlliance ;
  19: CALL 344 0 0
// PrepareFriends ;
  23: CALL 3654 0 0
// PrepareAmerican ;
  27: CALL 781 0 0
// PlaceSeeing ( 91 , 70 , 7 , - 32178 ) ;
  31: LD_INT 91
  33: PPUSH
  34: LD_INT 70
  36: PPUSH
  37: LD_INT 7
  39: PPUSH
  40: LD_INT 32178
  42: NEG
  43: PPUSH
  44: CALL_OW 330
// RemoveSeeing ( 91 , 70 , 7 ) ;
  48: LD_INT 91
  50: PPUSH
  51: LD_INT 70
  53: PPUSH
  54: LD_INT 7
  56: PPUSH
  57: CALL_OW 331
// if debug then
  61: LD_EXP 1
  65: IFFALSE 113
// begin SetAttitude ( 1 , 7 , att_enemy , true ) ;
  67: LD_INT 1
  69: PPUSH
  70: LD_INT 7
  72: PPUSH
  73: LD_INT 2
  75: PPUSH
  76: LD_INT 1
  78: PPUSH
  79: CALL_OW 80
// RemoveUnit ( Powell ) ;
  83: LD_EXP 16
  87: PPUSH
  88: CALL_OW 64
// DoNotAttack ( 1 , JMM ) ;
  92: LD_INT 1
  94: PPUSH
  95: LD_EXP 14
  99: PPUSH
 100: CALL_OW 471
// FogOff ( 1 ) ;
 104: LD_INT 1
 106: PPUSH
 107: CALL_OW 344
// end else
 111: GO 117
// Action ;
 113: CALL 9523 0 0
// PreparePatrol ;
 117: CALL 1246 0 0
// game := true ;
 121: LD_ADDR_EXP 2
 125: PUSH
 126: LD_INT 1
 128: ST_TO_ADDR
// end ;
 129: END
// export debug , game , selected , friends , reached_lab , can_escape , on_hill , friends_kill_counter , team_kill_counter , gamma_commander , extra_patrol , invis_used , alert ; export function InitVariables ; begin
 130: LD_INT 0
 132: PPUSH
// debug := false ;
 133: LD_ADDR_EXP 1
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// friends := [ ] ;
 141: LD_ADDR_EXP 4
 145: PUSH
 146: EMPTY
 147: ST_TO_ADDR
// selected := [ ] ;
 148: LD_ADDR_EXP 3
 152: PUSH
 153: EMPTY
 154: ST_TO_ADDR
// reached_lab := false ;
 155: LD_ADDR_EXP 5
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// can_escape := false ;
 163: LD_ADDR_EXP 6
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// game := false ;
 171: LD_ADDR_EXP 2
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// gamma_commander := LoadVariable ( GammaCommander , 2 ) ;
 179: LD_ADDR_EXP 10
 183: PUSH
 184: LD_STRING GammaCommander
 186: PPUSH
 187: LD_INT 2
 189: PPUSH
 190: CALL_OW 30
 194: ST_TO_ADDR
// friends_kill_counter := 0 ;
 195: LD_ADDR_EXP 8
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// team_kill_counter := 0 ;
 203: LD_ADDR_EXP 9
 207: PUSH
 208: LD_INT 0
 210: ST_TO_ADDR
// extra_patrol := true ;
 211: LD_ADDR_EXP 11
 215: PUSH
 216: LD_INT 1
 218: ST_TO_ADDR
// on_hill := false ;
 219: LD_ADDR_EXP 7
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// invis_used := false ;
 227: LD_ADDR_EXP 12
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// alert := false ;
 235: LD_ADDR_EXP 13
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// end ;
 243: LD_VAR 0 1
 247: RET
// every 0 0$1 trigger on_hill do
 248: LD_EXP 7
 252: IFFALSE 264
 254: GO 256
 256: DISABLE
// SetAchievement ( ACH_EYE ) ;
 257: LD_STRING ACH_EYE
 259: PPUSH
 260: CALL_OW 543
 264: END
// every 0 0$1 trigger not invis_used do var i ;
 265: LD_EXP 12
 269: NOT
 270: IFFALSE 341
 272: GO 274
 274: DISABLE
 275: LD_INT 0
 277: PPUSH
// begin enable ;
 278: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do
 279: LD_ADDR_VAR 0 1
 283: PUSH
 284: LD_INT 22
 286: PUSH
 287: LD_INT 7
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PUSH
 294: LD_INT 21
 296: PUSH
 297: LD_INT 1
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: PUSH
 304: EMPTY
 305: LIST
 306: LIST
 307: PPUSH
 308: CALL_OW 69
 312: PUSH
 313: FOR_IN
 314: IFFALSE 339
// if IsInvisible ( i ) then
 316: LD_VAR 0 1
 320: PPUSH
 321: CALL_OW 571
 325: IFFALSE 337
// begin invis_used := true ;
 327: LD_ADDR_EXP 12
 331: PUSH
 332: LD_INT 1
 334: ST_TO_ADDR
// break ;
 335: GO 339
// end ;
 337: GO 313
 339: POP
 340: POP
// end ; end_of_file
 341: PPOPN 1
 343: END
// export JMM , Roth ; export function PrepareAlliance ; var cargo ; begin
 344: LD_INT 0
 346: PPUSH
 347: PPUSH
// uc_side := 7 ;
 348: LD_ADDR_OWVAR 20
 352: PUSH
 353: LD_INT 7
 355: ST_TO_ADDR
// uc_nation := 1 ;
 356: LD_ADDR_OWVAR 21
 360: PUSH
 361: LD_INT 1
 363: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 11_ ) ;
 364: LD_ADDR_EXP 14
 368: PUSH
 369: LD_STRING JMM
 371: PPUSH
 372: LD_EXP 1
 376: NOT
 377: PPUSH
 378: LD_STRING 11_
 380: PPUSH
 381: CALL 32344 0 3
 385: ST_TO_ADDR
// uc_side := 4 ;
 386: LD_ADDR_OWVAR 20
 390: PUSH
 391: LD_INT 4
 393: ST_TO_ADDR
// Roth := NewCharacter ( Roth ) ;
 394: LD_ADDR_EXP 15
 398: PUSH
 399: LD_STRING Roth
 401: PPUSH
 402: CALL_OW 25
 406: ST_TO_ADDR
// SetDir ( JMM , 1 ) ;
 407: LD_EXP 14
 411: PPUSH
 412: LD_INT 1
 414: PPUSH
 415: CALL_OW 233
// SetClass ( JMM , 1 ) ;
 419: LD_EXP 14
 423: PPUSH
 424: LD_INT 1
 426: PPUSH
 427: CALL_OW 336
// PlaceUnitXY ( JMM , 105 , 10 , false ) ;
 431: LD_EXP 14
 435: PPUSH
 436: LD_INT 105
 438: PPUSH
 439: LD_INT 10
 441: PPUSH
 442: LD_INT 0
 444: PPUSH
 445: CALL_OW 48
// SetDir ( Roth , 4 ) ;
 449: LD_EXP 15
 453: PPUSH
 454: LD_INT 4
 456: PPUSH
 457: CALL_OW 233
// PlaceUnitXY ( Roth , 109 , 10 , false ) ;
 461: LD_EXP 15
 465: PPUSH
 466: LD_INT 109
 468: PPUSH
 469: LD_INT 10
 471: PPUSH
 472: LD_INT 0
 474: PPUSH
 475: CALL_OW 48
// ComTurnUnit ( JMM , Roth ) ;
 479: LD_EXP 14
 483: PPUSH
 484: LD_EXP 15
 488: PPUSH
 489: CALL_OW 119
// ComTurnUnit ( Roth , JMM ) ;
 493: LD_EXP 15
 497: PPUSH
 498: LD_EXP 14
 502: PPUSH
 503: CALL_OW 119
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
 507: LD_INT 3
 509: PPUSH
 510: LD_INT 3
 512: PPUSH
 513: LD_INT 3
 515: PPUSH
 516: LD_INT 12
 518: PPUSH
 519: LD_INT 100
 521: PPUSH
 522: CALL 37208 0 5
// cargo := CreateVehicle ;
 526: LD_ADDR_VAR 0 2
 530: PUSH
 531: CALL_OW 45
 535: ST_TO_ADDR
// SetDir ( cargo , 1 ) ;
 536: LD_VAR 0 2
 540: PPUSH
 541: LD_INT 1
 543: PPUSH
 544: CALL_OW 233
// PlaceUnitXY ( cargo , 179 , 45 , false ) ;
 548: LD_VAR 0 2
 552: PPUSH
 553: LD_INT 179
 555: PPUSH
 556: LD_INT 45
 558: PPUSH
 559: LD_INT 0
 561: PPUSH
 562: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 30 ) ;
 566: LD_VAR 0 2
 570: PPUSH
 571: LD_INT 4
 573: PPUSH
 574: LD_INT 30
 576: PPUSH
 577: CALL_OW 290
// if LoadVariable ( 11_artifact_captured , 0 ) then
 581: LD_STRING 11_artifact_captured
 583: PPUSH
 584: LD_INT 0
 586: PPUSH
 587: CALL_OW 30
 591: IFFALSE 648
// begin cargo := CreateVehicle ;
 593: LD_ADDR_VAR 0 2
 597: PUSH
 598: CALL_OW 45
 602: ST_TO_ADDR
// SetDir ( cargo , 0 ) ;
 603: LD_VAR 0 2
 607: PPUSH
 608: LD_INT 0
 610: PPUSH
 611: CALL_OW 233
// PlaceUnitXY ( cargo , 171 , 85 , false ) ;
 615: LD_VAR 0 2
 619: PPUSH
 620: LD_INT 171
 622: PPUSH
 623: LD_INT 85
 625: PPUSH
 626: LD_INT 0
 628: PPUSH
 629: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 50 ) ;
 633: LD_VAR 0 2
 637: PPUSH
 638: LD_INT 4
 640: PPUSH
 641: LD_INT 50
 643: PPUSH
 644: CALL_OW 290
// end ; SetSide ( amlab , 7 ) ;
 648: LD_INT 47
 650: PPUSH
 651: LD_INT 7
 653: PPUSH
 654: CALL_OW 235
// DoNotAttack ( 1 , amlab ) ;
 658: LD_INT 1
 660: PPUSH
 661: LD_INT 47
 663: PPUSH
 664: CALL_OW 471
// end ;
 668: LD_VAR 0 1
 672: RET
// every 0 0$1 trigger FilterUnitsInArea ( hill , [ f_side , 7 ] ) and not on_hill do
 673: LD_INT 38
 675: PPUSH
 676: LD_INT 22
 678: PUSH
 679: LD_INT 7
 681: PUSH
 682: EMPTY
 683: LIST
 684: LIST
 685: PPUSH
 686: CALL_OW 70
 690: PUSH
 691: LD_EXP 7
 695: NOT
 696: AND
 697: IFFALSE 728
 699: GO 701
 701: DISABLE
// begin enable ;
 702: ENABLE
// on_hill := true ;
 703: LD_ADDR_EXP 7
 707: PUSH
 708: LD_INT 1
 710: ST_TO_ADDR
// PlaceSeeing ( 126 , 13 , 7 , - 90 ) ;
 711: LD_INT 126
 713: PPUSH
 714: LD_INT 13
 716: PPUSH
 717: LD_INT 7
 719: PPUSH
 720: LD_INT 90
 722: NEG
 723: PPUSH
 724: CALL_OW 330
// end ;
 728: END
// every 0 0$1 trigger not FilterUnitsInArea ( hill , [ f_side , 7 ] ) and on_hill do
 729: LD_INT 38
 731: PPUSH
 732: LD_INT 22
 734: PUSH
 735: LD_INT 7
 737: PUSH
 738: EMPTY
 739: LIST
 740: LIST
 741: PPUSH
 742: CALL_OW 70
 746: NOT
 747: PUSH
 748: LD_EXP 7
 752: AND
 753: IFFALSE 780
 755: GO 757
 757: DISABLE
// begin enable ;
 758: ENABLE
// on_hill := false ;
 759: LD_ADDR_EXP 7
 763: PUSH
 764: LD_INT 0
 766: ST_TO_ADDR
// RemoveSeeing ( 126 , 13 , 7 ) ;
 767: LD_INT 126
 769: PPUSH
 770: LD_INT 13
 772: PPUSH
 773: LD_INT 7
 775: PPUSH
 776: CALL_OW 331
// end ; end_of_file
 780: END
// export Powell , mobile_patrol , mobile_points , powell_guards , defenders , defcon , defcon_wave ; export function PrepareAmerican ; var i , j , b , un , tmp ; begin
 781: LD_INT 0
 783: PPUSH
 784: PPUSH
 785: PPUSH
 786: PPUSH
 787: PPUSH
 788: PPUSH
// if Difficulty = 1 then
 789: LD_OWVAR 67
 793: PUSH
 794: LD_INT 1
 796: EQUAL
 797: IFFALSE 905
// begin tmp := [ [ 155 , 77 ] , [ 193 , 93 ] , [ 188 , 81 ] , [ 56 , 85 ] , [ 98 , 87 ] ] ;
 799: LD_ADDR_VAR 0 6
 803: PUSH
 804: LD_INT 155
 806: PUSH
 807: LD_INT 77
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: PUSH
 814: LD_INT 193
 816: PUSH
 817: LD_INT 93
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PUSH
 824: LD_INT 188
 826: PUSH
 827: LD_INT 81
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: PUSH
 834: LD_INT 56
 836: PUSH
 837: LD_INT 85
 839: PUSH
 840: EMPTY
 841: LIST
 842: LIST
 843: PUSH
 844: LD_INT 98
 846: PUSH
 847: LD_INT 87
 849: PUSH
 850: EMPTY
 851: LIST
 852: LIST
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: ST_TO_ADDR
// for i in tmp do
 861: LD_ADDR_VAR 0 2
 865: PUSH
 866: LD_VAR 0 6
 870: PUSH
 871: FOR_IN
 872: IFFALSE 903
// RemoveUnit ( HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
 874: LD_VAR 0 2
 878: PUSH
 879: LD_INT 1
 881: ARRAY
 882: PPUSH
 883: LD_VAR 0 2
 887: PUSH
 888: LD_INT 2
 890: ARRAY
 891: PPUSH
 892: CALL_OW 428
 896: PPUSH
 897: CALL_OW 64
 901: GO 871
 903: POP
 904: POP
// end ; defcon := 0 ;
 905: LD_ADDR_EXP 21
 909: PUSH
 910: LD_INT 0
 912: ST_TO_ADDR
// defcon_wave := 0 ;
 913: LD_ADDR_EXP 22
 917: PUSH
 918: LD_INT 0
 920: ST_TO_ADDR
// defenders := [ ] ;
 921: LD_ADDR_EXP 20
 925: PUSH
 926: EMPTY
 927: ST_TO_ADDR
// SetBName ( alfa , alpha ) ;
 928: LD_INT 5
 930: PPUSH
 931: LD_STRING alpha
 933: PPUSH
 934: CALL_OW 500
// uc_side := 1 ;
 938: LD_ADDR_OWVAR 20
 942: PUSH
 943: LD_INT 1
 945: ST_TO_ADDR
// uc_nation := 1 ;
 946: LD_ADDR_OWVAR 21
 950: PUSH
 951: LD_INT 1
 953: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
 954: LD_ADDR_EXP 16
 958: PUSH
 959: LD_STRING Powell
 961: PPUSH
 962: CALL_OW 25
 966: ST_TO_ADDR
// PlaceUnitXY ( Powell , 110 , 26 , false ) ;
 967: LD_EXP 16
 971: PPUSH
 972: LD_INT 110
 974: PPUSH
 975: LD_INT 26
 977: PPUSH
 978: LD_INT 0
 980: PPUSH
 981: CALL_OW 48
// ComHold ( Powell ) ;
 985: LD_EXP 16
 989: PPUSH
 990: CALL_OW 140
// for i = 1 to 5 do
 994: LD_ADDR_VAR 0 2
 998: PUSH
 999: DOUBLE
1000: LD_INT 1
1002: DEC
1003: ST_TO_ADDR
1004: LD_INT 5
1006: PUSH
1007: FOR_TO
1008: IFFALSE 1064
// begin PrepareHuman ( false , 1 , 10 ) ;
1010: LD_INT 0
1012: PPUSH
1013: LD_INT 1
1015: PPUSH
1016: LD_INT 10
1018: PPUSH
1019: CALL_OW 380
// powell_guards := Insert ( powell_guards , 1 , CreateHuman ) ;
1023: LD_ADDR_EXP 19
1027: PUSH
1028: LD_EXP 19
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: CALL_OW 44
1040: PPUSH
1041: CALL_OW 2
1045: ST_TO_ADDR
// PlaceHumanInUnit ( powell_guards [ 1 ] , ambar0 ) ;
1046: LD_EXP 19
1050: PUSH
1051: LD_INT 1
1053: ARRAY
1054: PPUSH
1055: LD_INT 18
1057: PPUSH
1058: CALL_OW 52
// end ;
1062: GO 1007
1064: POP
1065: POP
// if Difficulty > 2 then
1066: LD_OWVAR 67
1070: PUSH
1071: LD_INT 2
1073: GREATER
1074: IFFALSE 1123
// begin bc_type := b_turret ;
1076: LD_ADDR_OWVAR 42
1080: PUSH
1081: LD_INT 33
1083: ST_TO_ADDR
// bc_level := 7 ;
1084: LD_ADDR_OWVAR 43
1088: PUSH
1089: LD_INT 7
1091: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 107 , 55 , 5 ) ;
1092: LD_ADDR_VAR 0 4
1096: PUSH
1097: LD_INT 107
1099: PPUSH
1100: LD_INT 55
1102: PPUSH
1103: LD_INT 5
1105: PPUSH
1106: CALL_OW 47
1110: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_rocket_launcher ) ;
1111: LD_VAR 0 4
1115: PPUSH
1116: LD_INT 7
1118: PPUSH
1119: CALL_OW 431
// end ; for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ^ FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) do
1123: LD_ADDR_VAR 0 2
1127: PUSH
1128: LD_INT 22
1130: PUSH
1131: LD_INT 1
1133: PUSH
1134: EMPTY
1135: LIST
1136: LIST
1137: PUSH
1138: LD_INT 30
1140: PUSH
1141: LD_INT 3
1143: PUSH
1144: EMPTY
1145: LIST
1146: LIST
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: PPUSH
1152: CALL_OW 69
1156: PUSH
1157: LD_INT 22
1159: PUSH
1160: LD_INT 1
1162: PUSH
1163: EMPTY
1164: LIST
1165: LIST
1166: PUSH
1167: LD_INT 30
1169: PUSH
1170: LD_INT 36
1172: PUSH
1173: EMPTY
1174: LIST
1175: LIST
1176: PUSH
1177: EMPTY
1178: LIST
1179: LIST
1180: PPUSH
1181: CALL_OW 69
1185: ADD
1186: PUSH
1187: FOR_IN
1188: IFFALSE 1239
// for j = 1 to 3 do
1190: LD_ADDR_VAR 0 3
1194: PUSH
1195: DOUBLE
1196: LD_INT 1
1198: DEC
1199: ST_TO_ADDR
1200: LD_INT 3
1202: PUSH
1203: FOR_TO
1204: IFFALSE 1235
// begin PrepareHuman ( false , 3 , 6 ) ;
1206: LD_INT 0
1208: PPUSH
1209: LD_INT 3
1211: PPUSH
1212: LD_INT 6
1214: PPUSH
1215: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
1219: CALL_OW 44
1223: PPUSH
1224: LD_VAR 0 2
1228: PPUSH
1229: CALL_OW 52
// end ;
1233: GO 1203
1235: POP
1236: POP
1237: GO 1187
1239: POP
1240: POP
// end ;
1241: LD_VAR 0 1
1245: RET
// export function PreparePatrol ; var i , un ; begin
1246: LD_INT 0
1248: PPUSH
1249: PPUSH
1250: PPUSH
// uc_side := 1 ;
1251: LD_ADDR_OWVAR 20
1255: PUSH
1256: LD_INT 1
1258: ST_TO_ADDR
// uc_nation := 1 ;
1259: LD_ADDR_OWVAR 21
1263: PUSH
1264: LD_INT 1
1266: ST_TO_ADDR
// mobile_points := [ [ [ 99 , 55 ] , [ 113 , 67 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 103 , 41 ] ] , [ [ 27 , 49 ] , [ 46 , 49 ] , [ 87 , 70 ] , [ 99 , 79 ] , [ 118 , 111 ] , [ 99 , 79 ] , [ 87 , 70 ] , [ 46 , 49 ] ] , [ [ 200 , 88 ] , [ 175 , 80 ] , [ 135 , 62 ] , [ 117 , 53 ] , [ 103 , 41 ] , [ 99 , 24 ] , [ 85 , 3 ] , [ 99 , 24 ] , [ 103 , 41 ] , [ 98 , 47 ] , [ 99 , 56 ] , [ 96 , 66 ] , [ 99 , 56 ] , [ 112 , 66 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 156 , 71 ] , [ 168 , 76 ] , [ 168 , 61 ] , [ 168 , 75 ] , [ 185 , 85 ] ] ] ;
1267: LD_ADDR_EXP 18
1271: PUSH
1272: LD_INT 99
1274: PUSH
1275: LD_INT 55
1277: PUSH
1278: EMPTY
1279: LIST
1280: LIST
1281: PUSH
1282: LD_INT 113
1284: PUSH
1285: LD_INT 67
1287: PUSH
1288: EMPTY
1289: LIST
1290: LIST
1291: PUSH
1292: LD_INT 129
1294: PUSH
1295: LD_INT 68
1297: PUSH
1298: EMPTY
1299: LIST
1300: LIST
1301: PUSH
1302: LD_INT 135
1304: PUSH
1305: LD_INT 62
1307: PUSH
1308: EMPTY
1309: LIST
1310: LIST
1311: PUSH
1312: LD_INT 103
1314: PUSH
1315: LD_INT 41
1317: PUSH
1318: EMPTY
1319: LIST
1320: LIST
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: PUSH
1329: LD_INT 27
1331: PUSH
1332: LD_INT 49
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: PUSH
1339: LD_INT 46
1341: PUSH
1342: LD_INT 49
1344: PUSH
1345: EMPTY
1346: LIST
1347: LIST
1348: PUSH
1349: LD_INT 87
1351: PUSH
1352: LD_INT 70
1354: PUSH
1355: EMPTY
1356: LIST
1357: LIST
1358: PUSH
1359: LD_INT 99
1361: PUSH
1362: LD_INT 79
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: PUSH
1369: LD_INT 118
1371: PUSH
1372: LD_INT 111
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: LD_INT 99
1381: PUSH
1382: LD_INT 79
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: PUSH
1389: LD_INT 87
1391: PUSH
1392: LD_INT 70
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: PUSH
1399: LD_INT 46
1401: PUSH
1402: LD_INT 49
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: PUSH
1419: LD_INT 200
1421: PUSH
1422: LD_INT 88
1424: PUSH
1425: EMPTY
1426: LIST
1427: LIST
1428: PUSH
1429: LD_INT 175
1431: PUSH
1432: LD_INT 80
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: PUSH
1439: LD_INT 135
1441: PUSH
1442: LD_INT 62
1444: PUSH
1445: EMPTY
1446: LIST
1447: LIST
1448: PUSH
1449: LD_INT 117
1451: PUSH
1452: LD_INT 53
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: PUSH
1459: LD_INT 103
1461: PUSH
1462: LD_INT 41
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: PUSH
1469: LD_INT 99
1471: PUSH
1472: LD_INT 24
1474: PUSH
1475: EMPTY
1476: LIST
1477: LIST
1478: PUSH
1479: LD_INT 85
1481: PUSH
1482: LD_INT 3
1484: PUSH
1485: EMPTY
1486: LIST
1487: LIST
1488: PUSH
1489: LD_INT 99
1491: PUSH
1492: LD_INT 24
1494: PUSH
1495: EMPTY
1496: LIST
1497: LIST
1498: PUSH
1499: LD_INT 103
1501: PUSH
1502: LD_INT 41
1504: PUSH
1505: EMPTY
1506: LIST
1507: LIST
1508: PUSH
1509: LD_INT 98
1511: PUSH
1512: LD_INT 47
1514: PUSH
1515: EMPTY
1516: LIST
1517: LIST
1518: PUSH
1519: LD_INT 99
1521: PUSH
1522: LD_INT 56
1524: PUSH
1525: EMPTY
1526: LIST
1527: LIST
1528: PUSH
1529: LD_INT 96
1531: PUSH
1532: LD_INT 66
1534: PUSH
1535: EMPTY
1536: LIST
1537: LIST
1538: PUSH
1539: LD_INT 99
1541: PUSH
1542: LD_INT 56
1544: PUSH
1545: EMPTY
1546: LIST
1547: LIST
1548: PUSH
1549: LD_INT 112
1551: PUSH
1552: LD_INT 66
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: PUSH
1559: LD_INT 129
1561: PUSH
1562: LD_INT 68
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: PUSH
1569: LD_INT 135
1571: PUSH
1572: LD_INT 62
1574: PUSH
1575: EMPTY
1576: LIST
1577: LIST
1578: PUSH
1579: LD_INT 156
1581: PUSH
1582: LD_INT 71
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PUSH
1589: LD_INT 168
1591: PUSH
1592: LD_INT 76
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: PUSH
1599: LD_INT 168
1601: PUSH
1602: LD_INT 61
1604: PUSH
1605: EMPTY
1606: LIST
1607: LIST
1608: PUSH
1609: LD_INT 168
1611: PUSH
1612: LD_INT 75
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: PUSH
1619: LD_INT 185
1621: PUSH
1622: LD_INT 85
1624: PUSH
1625: EMPTY
1626: LIST
1627: LIST
1628: PUSH
1629: EMPTY
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: LIST
1645: LIST
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: LIST
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: LIST
1656: ST_TO_ADDR
// mobile_patrol := [ ] ;
1657: LD_ADDR_EXP 17
1661: PUSH
1662: EMPTY
1663: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1664: LD_INT 3
1666: PPUSH
1667: LD_INT 1
1669: PPUSH
1670: LD_INT 3
1672: PPUSH
1673: LD_INT 4
1675: PPUSH
1676: LD_INT 100
1678: PPUSH
1679: CALL 37208 0 5
// mobile_patrol := Insert ( mobile_patrol , 1 , CreateVehicle ) ;
1683: LD_ADDR_EXP 17
1687: PUSH
1688: LD_EXP 17
1692: PPUSH
1693: LD_INT 1
1695: PPUSH
1696: CALL_OW 45
1700: PPUSH
1701: CALL_OW 2
1705: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 1 ] , 99 , 55 , false ) ;
1706: LD_EXP 17
1710: PUSH
1711: LD_INT 1
1713: ARRAY
1714: PPUSH
1715: LD_INT 99
1717: PPUSH
1718: LD_INT 55
1720: PPUSH
1721: LD_INT 0
1723: PPUSH
1724: CALL_OW 48
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1728: LD_INT 2
1730: PPUSH
1731: LD_INT 1
1733: PPUSH
1734: LD_INT 3
1736: PPUSH
1737: LD_INT 4
1739: PPUSH
1740: LD_INT 100
1742: PPUSH
1743: CALL 37208 0 5
// mobile_patrol := Insert ( mobile_patrol , 2 , CreateVehicle ) ;
1747: LD_ADDR_EXP 17
1751: PUSH
1752: LD_EXP 17
1756: PPUSH
1757: LD_INT 2
1759: PPUSH
1760: CALL_OW 45
1764: PPUSH
1765: CALL_OW 2
1769: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 2 ] , 27 , 49 , false ) ;
1770: LD_EXP 17
1774: PUSH
1775: LD_INT 2
1777: ARRAY
1778: PPUSH
1779: LD_INT 27
1781: PPUSH
1782: LD_INT 49
1784: PPUSH
1785: LD_INT 0
1787: PPUSH
1788: CALL_OW 48
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , [ us_laser , us_rocket_launcher , us_rocket_launcher , us_rocket_launcher ] [ Difficulty ] , 100 ) ;
1792: LD_INT 3
1794: PPUSH
1795: LD_INT 1
1797: PPUSH
1798: LD_INT 3
1800: PPUSH
1801: LD_INT 9
1803: PUSH
1804: LD_INT 7
1806: PUSH
1807: LD_INT 7
1809: PUSH
1810: LD_INT 7
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: PUSH
1819: LD_OWVAR 67
1823: ARRAY
1824: PPUSH
1825: LD_INT 100
1827: PPUSH
1828: CALL 37208 0 5
// mobile_patrol := Insert ( mobile_patrol , 3 , CreateVehicle ) ;
1832: LD_ADDR_EXP 17
1836: PUSH
1837: LD_EXP 17
1841: PPUSH
1842: LD_INT 3
1844: PPUSH
1845: CALL_OW 45
1849: PPUSH
1850: CALL_OW 2
1854: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 3 ] , 200 , 88 , false ) ;
1855: LD_EXP 17
1859: PUSH
1860: LD_INT 3
1862: ARRAY
1863: PPUSH
1864: LD_INT 200
1866: PPUSH
1867: LD_INT 88
1869: PPUSH
1870: LD_INT 0
1872: PPUSH
1873: CALL_OW 48
// for i = mobile_patrol downto 1 do
1877: LD_ADDR_VAR 0 2
1881: PUSH
1882: DOUBLE
1883: LD_EXP 17
1887: INC
1888: ST_TO_ADDR
1889: LD_INT 1
1891: PUSH
1892: FOR_DOWNTO
1893: IFFALSE 1904
// RaiseSailEvent ( 1 ) ;
1895: LD_INT 1
1897: PPUSH
1898: CALL_OW 427
1902: GO 1892
1904: POP
1905: POP
// end ;
1906: LD_VAR 0 1
1910: RET
// export function SpawnCargo ( ) ; var i , c , k , areas , road , tmp , veh ; begin
1911: LD_INT 0
1913: PPUSH
1914: PPUSH
1915: PPUSH
1916: PPUSH
1917: PPUSH
1918: PPUSH
1919: PPUSH
1920: PPUSH
// areas := [ [ road_east , 4 ] , [ road_south , 5 ] , [ road_west , 1 ] ] ;
1921: LD_ADDR_VAR 0 5
1925: PUSH
1926: LD_INT 20
1928: PUSH
1929: LD_INT 4
1931: PUSH
1932: EMPTY
1933: LIST
1934: LIST
1935: PUSH
1936: LD_INT 21
1938: PUSH
1939: LD_INT 5
1941: PUSH
1942: EMPTY
1943: LIST
1944: LIST
1945: PUSH
1946: LD_INT 22
1948: PUSH
1949: LD_INT 1
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: PUSH
1956: EMPTY
1957: LIST
1958: LIST
1959: LIST
1960: ST_TO_ADDR
// road := [ [ 176 , 81 , 135 , 62 , 114 , 67 , 93 , 71 , 76 , 67 ] , [ 107 , 92 , 92 , 72 , 77 , 68 ] , [ 45 , 49 , 67 , 59 , 77 , 68 ] ] ;
1961: LD_ADDR_VAR 0 6
1965: PUSH
1966: LD_INT 176
1968: PUSH
1969: LD_INT 81
1971: PUSH
1972: LD_INT 135
1974: PUSH
1975: LD_INT 62
1977: PUSH
1978: LD_INT 114
1980: PUSH
1981: LD_INT 67
1983: PUSH
1984: LD_INT 93
1986: PUSH
1987: LD_INT 71
1989: PUSH
1990: LD_INT 76
1992: PUSH
1993: LD_INT 67
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: LIST
2000: LIST
2001: LIST
2002: LIST
2003: LIST
2004: LIST
2005: LIST
2006: LIST
2007: PUSH
2008: LD_INT 107
2010: PUSH
2011: LD_INT 92
2013: PUSH
2014: LD_INT 92
2016: PUSH
2017: LD_INT 72
2019: PUSH
2020: LD_INT 77
2022: PUSH
2023: LD_INT 68
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: LIST
2030: LIST
2031: LIST
2032: LIST
2033: PUSH
2034: LD_INT 45
2036: PUSH
2037: LD_INT 49
2039: PUSH
2040: LD_INT 67
2042: PUSH
2043: LD_INT 59
2045: PUSH
2046: LD_INT 77
2048: PUSH
2049: LD_INT 68
2051: PUSH
2052: EMPTY
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: LIST
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: LIST
2064: ST_TO_ADDR
// k := rand ( 1 , areas ) ;
2065: LD_ADDR_VAR 0 4
2069: PUSH
2070: LD_INT 1
2072: PPUSH
2073: LD_VAR 0 5
2077: PPUSH
2078: CALL_OW 12
2082: ST_TO_ADDR
// c := rand ( 1 , 2 ) ;
2083: LD_ADDR_VAR 0 3
2087: PUSH
2088: LD_INT 1
2090: PPUSH
2091: LD_INT 2
2093: PPUSH
2094: CALL_OW 12
2098: ST_TO_ADDR
// uc_side := 1 ;
2099: LD_ADDR_OWVAR 20
2103: PUSH
2104: LD_INT 1
2106: ST_TO_ADDR
// uc_nation := 1 ;
2107: LD_ADDR_OWVAR 21
2111: PUSH
2112: LD_INT 1
2114: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
2115: LD_INT 2
2117: PPUSH
2118: LD_INT 3
2120: PPUSH
2121: LD_INT 3
2123: PPUSH
2124: LD_INT 12
2126: PPUSH
2127: LD_INT 100
2129: PPUSH
2130: CALL 37208 0 5
// veh := CreateVehicle ;
2134: LD_ADDR_VAR 0 8
2138: PUSH
2139: CALL_OW 45
2143: ST_TO_ADDR
// SetDir ( veh , areas [ k ] [ 2 ] ) ;
2144: LD_VAR 0 8
2148: PPUSH
2149: LD_VAR 0 5
2153: PUSH
2154: LD_VAR 0 4
2158: ARRAY
2159: PUSH
2160: LD_INT 2
2162: ARRAY
2163: PPUSH
2164: CALL_OW 233
// PlaceUnitArea ( veh , areas [ k ] [ 1 ] , false ) ;
2168: LD_VAR 0 8
2172: PPUSH
2173: LD_VAR 0 5
2177: PUSH
2178: LD_VAR 0 4
2182: ARRAY
2183: PUSH
2184: LD_INT 1
2186: ARRAY
2187: PPUSH
2188: LD_INT 0
2190: PPUSH
2191: CALL_OW 49
// SetCargo ( veh , [ mat_cans , mat_siberit ] [ c ] , 100 ) ;
2195: LD_VAR 0 8
2199: PPUSH
2200: LD_INT 1
2202: PUSH
2203: LD_INT 3
2205: PUSH
2206: EMPTY
2207: LIST
2208: LIST
2209: PUSH
2210: LD_VAR 0 3
2214: ARRAY
2215: PPUSH
2216: LD_INT 100
2218: PPUSH
2219: CALL_OW 290
// tmp := road [ k ] ;
2223: LD_ADDR_VAR 0 7
2227: PUSH
2228: LD_VAR 0 6
2232: PUSH
2233: LD_VAR 0 4
2237: ARRAY
2238: ST_TO_ADDR
// for i = 1 to tmp div 2 do
2239: LD_ADDR_VAR 0 2
2243: PUSH
2244: DOUBLE
2245: LD_INT 1
2247: DEC
2248: ST_TO_ADDR
2249: LD_VAR 0 7
2253: PUSH
2254: LD_INT 2
2256: DIV
2257: PUSH
2258: FOR_TO
2259: IFFALSE 2306
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2261: LD_VAR 0 8
2265: PPUSH
2266: LD_VAR 0 7
2270: PUSH
2271: LD_VAR 0 2
2275: PUSH
2276: LD_INT 2
2278: MUL
2279: PUSH
2280: LD_INT 1
2282: MINUS
2283: ARRAY
2284: PPUSH
2285: LD_VAR 0 7
2289: PUSH
2290: LD_VAR 0 2
2294: PUSH
2295: LD_INT 2
2297: MUL
2298: ARRAY
2299: PPUSH
2300: CALL_OW 171
2304: GO 2258
2306: POP
2307: POP
// AddComGive ( veh , alfa ) ;
2308: LD_VAR 0 8
2312: PPUSH
2313: LD_INT 5
2315: PPUSH
2316: CALL_OW 221
// AddComWait ( veh , 0 0$2 ) ;
2320: LD_VAR 0 8
2324: PPUSH
2325: LD_INT 70
2327: PPUSH
2328: CALL_OW 202
// for i = tmp div 2 downto 1 do
2332: LD_ADDR_VAR 0 2
2336: PUSH
2337: DOUBLE
2338: LD_VAR 0 7
2342: PUSH
2343: LD_INT 2
2345: DIV
2346: INC
2347: ST_TO_ADDR
2348: LD_INT 1
2350: PUSH
2351: FOR_DOWNTO
2352: IFFALSE 2399
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2354: LD_VAR 0 8
2358: PPUSH
2359: LD_VAR 0 7
2363: PUSH
2364: LD_VAR 0 2
2368: PUSH
2369: LD_INT 2
2371: MUL
2372: PUSH
2373: LD_INT 1
2375: MINUS
2376: ARRAY
2377: PPUSH
2378: LD_VAR 0 7
2382: PUSH
2383: LD_VAR 0 2
2387: PUSH
2388: LD_INT 2
2390: MUL
2391: ARRAY
2392: PPUSH
2393: CALL_OW 171
2397: GO 2351
2399: POP
2400: POP
// AddComMoveToArea ( veh , areas [ k ] [ 1 ] ) ;
2401: LD_VAR 0 8
2405: PPUSH
2406: LD_VAR 0 5
2410: PUSH
2411: LD_VAR 0 4
2415: ARRAY
2416: PUSH
2417: LD_INT 1
2419: ARRAY
2420: PPUSH
2421: CALL_OW 173
// repeat wait ( 0 0$1 ) ;
2425: LD_INT 35
2427: PPUSH
2428: CALL_OW 67
// until IsInArea ( veh , areas [ k ] [ 1 ] ) and GetCargo ( veh , c ) = 0 ;
2432: LD_VAR 0 8
2436: PPUSH
2437: LD_VAR 0 5
2441: PUSH
2442: LD_VAR 0 4
2446: ARRAY
2447: PUSH
2448: LD_INT 1
2450: ARRAY
2451: PPUSH
2452: CALL_OW 308
2456: PUSH
2457: LD_VAR 0 8
2461: PPUSH
2462: LD_VAR 0 3
2466: PPUSH
2467: CALL_OW 289
2471: PUSH
2472: LD_INT 0
2474: EQUAL
2475: AND
2476: IFFALSE 2425
// RemoveUnit ( veh ) ;
2478: LD_VAR 0 8
2482: PPUSH
2483: CALL_OW 64
// end ;
2487: LD_VAR 0 1
2491: RET
// every 3 3$00 do
2492: GO 2494
2494: DISABLE
// begin enable ;
2495: ENABLE
// SpawnCargo ;
2496: CALL 1911 0 0
// end ;
2500: END
// export function PrepareDefenders ; var i , tmp ; begin
2501: LD_INT 0
2503: PPUSH
2504: PPUSH
2505: PPUSH
// if defenders then
2506: LD_EXP 20
2510: IFFALSE 2514
// exit ;
2512: GO 2786
// for i = 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
2514: LD_ADDR_VAR 0 2
2518: PUSH
2519: DOUBLE
2520: LD_INT 1
2522: DEC
2523: ST_TO_ADDR
2524: LD_INT 4
2526: PUSH
2527: LD_INT 5
2529: PUSH
2530: LD_INT 6
2532: PUSH
2533: LD_INT 7
2535: PUSH
2536: EMPTY
2537: LIST
2538: LIST
2539: LIST
2540: LIST
2541: PUSH
2542: LD_OWVAR 67
2546: ARRAY
2547: PUSH
2548: FOR_TO
2549: IFFALSE 2688
// begin tmp := Produce ( amfac2 , [ us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_remote , [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ) ;
2551: LD_ADDR_VAR 0 3
2555: PUSH
2556: LD_INT 6
2558: PPUSH
2559: LD_INT 2
2561: PUSH
2562: LD_INT 3
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: PUSH
2569: LD_INT 1
2571: PPUSH
2572: LD_INT 2
2574: PPUSH
2575: CALL_OW 12
2579: ARRAY
2580: PPUSH
2581: LD_INT 1
2583: PUSH
2584: LD_INT 3
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: PUSH
2591: LD_INT 1
2593: PPUSH
2594: LD_INT 2
2596: PPUSH
2597: CALL_OW 12
2601: ARRAY
2602: PPUSH
2603: LD_INT 2
2605: PPUSH
2606: LD_INT 4
2608: PUSH
2609: LD_INT 5
2611: PUSH
2612: LD_INT 9
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: LIST
2619: PUSH
2620: LD_INT 1
2622: PPUSH
2623: LD_INT 3
2625: PPUSH
2626: CALL_OW 12
2630: ARRAY
2631: PPUSH
2632: CALL 34826 0 5
2636: ST_TO_ADDR
// if tmp then
2637: LD_VAR 0 3
2641: IFFALSE 2686
// AddComConstruct ( amfac2 , tmp [ 1 ] , tmp [ 2 ] , tmp [ 3 ] , tmp [ 4 ] ) ;
2643: LD_INT 6
2645: PPUSH
2646: LD_VAR 0 3
2650: PUSH
2651: LD_INT 1
2653: ARRAY
2654: PPUSH
2655: LD_VAR 0 3
2659: PUSH
2660: LD_INT 2
2662: ARRAY
2663: PPUSH
2664: LD_VAR 0 3
2668: PUSH
2669: LD_INT 3
2671: ARRAY
2672: PPUSH
2673: LD_VAR 0 3
2677: PUSH
2678: LD_INT 4
2680: ARRAY
2681: PPUSH
2682: CALL_OW 185
// end ;
2686: GO 2548
2688: POP
2689: POP
// repeat wait ( 0 0$1 ) ;
2690: LD_INT 35
2692: PPUSH
2693: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
2697: LD_INT 22
2699: PUSH
2700: LD_INT 1
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: PUSH
2707: LD_INT 33
2709: PUSH
2710: LD_INT 2
2712: PUSH
2713: EMPTY
2714: LIST
2715: LIST
2716: PUSH
2717: EMPTY
2718: LIST
2719: LIST
2720: PPUSH
2721: CALL_OW 69
2725: PUSH
2726: LD_INT 4
2728: PUSH
2729: LD_INT 5
2731: PUSH
2732: LD_INT 6
2734: PUSH
2735: LD_INT 7
2737: PUSH
2738: EMPTY
2739: LIST
2740: LIST
2741: LIST
2742: LIST
2743: PUSH
2744: LD_OWVAR 67
2748: ARRAY
2749: GREATEREQUAL
2750: IFFALSE 2690
// defenders := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ;
2752: LD_ADDR_EXP 20
2756: PUSH
2757: LD_INT 22
2759: PUSH
2760: LD_INT 1
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: PUSH
2767: LD_INT 33
2769: PUSH
2770: LD_INT 2
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: PUSH
2777: EMPTY
2778: LIST
2779: LIST
2780: PPUSH
2781: CALL_OW 69
2785: ST_TO_ADDR
// end ;
2786: LD_VAR 0 1
2790: RET
// export function Defend ; var i , un , veh , tmp ; begin
2791: LD_INT 0
2793: PPUSH
2794: PPUSH
2795: PPUSH
2796: PPUSH
2797: PPUSH
// defcon_wave := defcon_wave + 1 ;
2798: LD_ADDR_EXP 22
2802: PUSH
2803: LD_EXP 22
2807: PUSH
2808: LD_INT 1
2810: PLUS
2811: ST_TO_ADDR
// if not defenders then
2812: LD_EXP 20
2816: NOT
2817: IFFALSE 2823
// PrepareDefenders ;
2819: CALL 2501 0 0
// if defcon_wave > 1 then
2823: LD_EXP 22
2827: PUSH
2828: LD_INT 1
2830: GREATER
2831: IFFALSE 3089
// begin for i = 1 to defcon_wave + 2 do
2833: LD_ADDR_VAR 0 2
2837: PUSH
2838: DOUBLE
2839: LD_INT 1
2841: DEC
2842: ST_TO_ADDR
2843: LD_EXP 22
2847: PUSH
2848: LD_INT 2
2850: PLUS
2851: PUSH
2852: FOR_TO
2853: IFFALSE 2995
// begin uc_side := 1 ;
2855: LD_ADDR_OWVAR 20
2859: PUSH
2860: LD_INT 1
2862: ST_TO_ADDR
// uc_nation := 1 ;
2863: LD_ADDR_OWVAR 21
2867: PUSH
2868: LD_INT 1
2870: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_siberite , control_manual , [ us_gatling_gun , us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
2871: LD_INT 4
2873: PPUSH
2874: LD_INT 3
2876: PPUSH
2877: LD_INT 1
2879: PPUSH
2880: LD_INT 4
2882: PUSH
2883: LD_INT 6
2885: PUSH
2886: LD_INT 7
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: LIST
2893: PUSH
2894: LD_INT 1
2896: PPUSH
2897: LD_INT 3
2899: PPUSH
2900: CALL_OW 12
2904: ARRAY
2905: PPUSH
2906: LD_INT 100
2908: PPUSH
2909: CALL 37208 0 5
// veh := CreateVehicle ;
2913: LD_ADDR_VAR 0 4
2917: PUSH
2918: CALL_OW 45
2922: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2923: LD_VAR 0 4
2927: PPUSH
2928: LD_INT 1
2930: PPUSH
2931: CALL_OW 233
// defenders := defenders ^ veh ;
2935: LD_ADDR_EXP 20
2939: PUSH
2940: LD_EXP 20
2944: PUSH
2945: LD_VAR 0 4
2949: ADD
2950: ST_TO_ADDR
// PrepareHuman ( false , 3 , 9 ) ;
2951: LD_INT 0
2953: PPUSH
2954: LD_INT 3
2956: PPUSH
2957: LD_INT 9
2959: PPUSH
2960: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2964: CALL_OW 44
2968: PPUSH
2969: LD_VAR 0 4
2973: PPUSH
2974: CALL_OW 52
// PlaceUnitArea ( veh , west_spawn , false ) ;
2978: LD_VAR 0 4
2982: PPUSH
2983: LD_INT 25
2985: PPUSH
2986: LD_INT 0
2988: PPUSH
2989: CALL_OW 49
// end ;
2993: GO 2852
2995: POP
2996: POP
// for i = 1 to defcon_wave do
2997: LD_ADDR_VAR 0 2
3001: PUSH
3002: DOUBLE
3003: LD_INT 1
3005: DEC
3006: ST_TO_ADDR
3007: LD_EXP 22
3011: PUSH
3012: FOR_TO
3013: IFFALSE 3087
// begin uc_side := 1 ;
3015: LD_ADDR_OWVAR 20
3019: PUSH
3020: LD_INT 1
3022: ST_TO_ADDR
// uc_nation := 1 ;
3023: LD_ADDR_OWVAR 21
3027: PUSH
3028: LD_INT 1
3030: ST_TO_ADDR
// PrepareHuman ( false , 5 , 9 ) ;
3031: LD_INT 0
3033: PPUSH
3034: LD_INT 5
3036: PPUSH
3037: LD_INT 9
3039: PPUSH
3040: CALL_OW 380
// un := CreateHuman ;
3044: LD_ADDR_VAR 0 3
3048: PUSH
3049: CALL_OW 44
3053: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
3054: LD_VAR 0 3
3058: PPUSH
3059: LD_INT 25
3061: PPUSH
3062: LD_INT 0
3064: PPUSH
3065: CALL_OW 49
// defenders := defenders ^ un ;
3069: LD_ADDR_EXP 20
3073: PUSH
3074: LD_EXP 20
3078: PUSH
3079: LD_VAR 0 3
3083: ADD
3084: ST_TO_ADDR
// end ;
3085: GO 3012
3087: POP
3088: POP
// end ; repeat wait ( 0 0$1 ) ;
3089: LD_INT 35
3091: PPUSH
3092: CALL_OW 67
// for i in defenders do
3096: LD_ADDR_VAR 0 2
3100: PUSH
3101: LD_EXP 20
3105: PUSH
3106: FOR_IN
3107: IFFALSE 3189
// begin if defcon and GetDistUnitXY ( i , defcon [ 1 ] , defcon [ 2 ] ) > 10 and not HasTask ( i ) then
3109: LD_EXP 21
3113: PUSH
3114: LD_VAR 0 2
3118: PPUSH
3119: LD_EXP 21
3123: PUSH
3124: LD_INT 1
3126: ARRAY
3127: PPUSH
3128: LD_EXP 21
3132: PUSH
3133: LD_INT 2
3135: ARRAY
3136: PPUSH
3137: CALL_OW 297
3141: PUSH
3142: LD_INT 10
3144: GREATER
3145: AND
3146: PUSH
3147: LD_VAR 0 2
3151: PPUSH
3152: CALL_OW 314
3156: NOT
3157: AND
3158: IFFALSE 3187
// ComAgressiveMove ( i , defcon [ 1 ] , defcon [ 2 ] ) ;
3160: LD_VAR 0 2
3164: PPUSH
3165: LD_EXP 21
3169: PUSH
3170: LD_INT 1
3172: ARRAY
3173: PPUSH
3174: LD_EXP 21
3178: PUSH
3179: LD_INT 2
3181: ARRAY
3182: PPUSH
3183: CALL_OW 114
// end ;
3187: GO 3106
3189: POP
3190: POP
// until not defenders ;
3191: LD_EXP 20
3195: NOT
3196: IFFALSE 3089
// end ;
3198: LD_VAR 0 1
3202: RET
// every 0 0$1 do var radar , i ;
3203: GO 3205
3205: DISABLE
3206: LD_INT 0
3208: PPUSH
3209: PPUSH
// begin uc_side := 1 ;
3210: LD_ADDR_OWVAR 20
3214: PUSH
3215: LD_INT 1
3217: ST_TO_ADDR
// uc_nation := 1 ;
3218: LD_ADDR_OWVAR 21
3222: PUSH
3223: LD_INT 1
3225: ST_TO_ADDR
// PrepareVehicle ( us_light_wheeled , engine_solar , control_computer , us_radar , 100 ) ;
3226: LD_INT 1
3228: PPUSH
3229: LD_INT 2
3231: PPUSH
3232: LD_INT 3
3234: PPUSH
3235: LD_INT 11
3237: PPUSH
3238: LD_INT 100
3240: PPUSH
3241: CALL 37208 0 5
// radar := CreateVehicle ;
3245: LD_ADDR_VAR 0 1
3249: PUSH
3250: CALL_OW 45
3254: ST_TO_ADDR
// SetDir ( radar , 4 ) ;
3255: LD_VAR 0 1
3259: PPUSH
3260: LD_INT 4
3262: PPUSH
3263: CALL_OW 233
// PlaceUnitXY ( radar , 51 , 45 , false ) ;
3267: LD_VAR 0 1
3271: PPUSH
3272: LD_INT 51
3274: PPUSH
3275: LD_INT 45
3277: PPUSH
3278: LD_INT 0
3280: PPUSH
3281: CALL_OW 48
// repeat AddComWait ( radar , 0 0$20 ) ;
3285: LD_VAR 0 1
3289: PPUSH
3290: LD_INT 700
3292: PPUSH
3293: CALL_OW 202
// AddComMoveXY ( radar , 65 , 75 ) ;
3297: LD_VAR 0 1
3301: PPUSH
3302: LD_INT 65
3304: PPUSH
3305: LD_INT 75
3307: PPUSH
3308: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3312: LD_VAR 0 1
3316: PPUSH
3317: LD_INT 350
3319: PPUSH
3320: CALL_OW 202
// AddComMoveXY ( radar , 83 , 87 ) ;
3324: LD_VAR 0 1
3328: PPUSH
3329: LD_INT 83
3331: PPUSH
3332: LD_INT 87
3334: PPUSH
3335: CALL_OW 171
// AddComWait ( radar , 0 0$15 ) ;
3339: LD_VAR 0 1
3343: PPUSH
3344: LD_INT 525
3346: PPUSH
3347: CALL_OW 202
// AddComMoveXY ( radar , 94 , 81 ) ;
3351: LD_VAR 0 1
3355: PPUSH
3356: LD_INT 94
3358: PPUSH
3359: LD_INT 81
3361: PPUSH
3362: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3366: LD_VAR 0 1
3370: PPUSH
3371: LD_INT 350
3373: PPUSH
3374: CALL_OW 202
// AddComMoveXY ( radar , 55 , 48 ) ;
3378: LD_VAR 0 1
3382: PPUSH
3383: LD_INT 55
3385: PPUSH
3386: LD_INT 48
3388: PPUSH
3389: CALL_OW 171
// wait ( 1 1$00 ) ;
3393: LD_INT 2100
3395: PPUSH
3396: CALL_OW 67
// until not IsOk ( radar ) ;
3400: LD_VAR 0 1
3404: PPUSH
3405: CALL_OW 302
3409: NOT
3410: IFFALSE 3285
// end ;
3412: PPOPN 2
3414: END
// every 7 7$30 trigger Difficulty > 1 and extra_patrol do var un ;
3415: LD_OWVAR 67
3419: PUSH
3420: LD_INT 1
3422: GREATER
3423: PUSH
3424: LD_EXP 11
3428: AND
3429: IFFALSE 3651
3431: GO 3433
3433: DISABLE
3434: LD_INT 0
3436: PPUSH
// begin enable ;
3437: ENABLE
// uc_side := 1 ;
3438: LD_ADDR_OWVAR 20
3442: PUSH
3443: LD_INT 1
3445: ST_TO_ADDR
// uc_nation := 1 ;
3446: LD_ADDR_OWVAR 21
3450: PUSH
3451: LD_INT 1
3453: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_gatling_gun , 100 ) ;
3454: LD_INT 5
3456: PPUSH
3457: LD_INT 3
3459: PPUSH
3460: LD_INT 3
3462: PPUSH
3463: LD_INT 4
3465: PPUSH
3466: LD_INT 100
3468: PPUSH
3469: CALL 37208 0 5
// un := CreateVehicle ;
3473: LD_ADDR_VAR 0 1
3477: PUSH
3478: CALL_OW 45
3482: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3483: LD_VAR 0 1
3487: PPUSH
3488: LD_INT 3
3490: PPUSH
3491: CALL_OW 233
// PlaceUnitXY ( un , 155 , 2 , false ) ;
3495: LD_VAR 0 1
3499: PPUSH
3500: LD_INT 155
3502: PPUSH
3503: LD_INT 2
3505: PPUSH
3506: LD_INT 0
3508: PPUSH
3509: CALL_OW 48
// ComAgressiveMove ( un , 169 , 77 ) ;
3513: LD_VAR 0 1
3517: PPUSH
3518: LD_INT 169
3520: PPUSH
3521: LD_INT 77
3523: PPUSH
3524: CALL_OW 114
// AddComWait ( un , 0 0$2 ) ;
3528: LD_VAR 0 1
3532: PPUSH
3533: LD_INT 70
3535: PPUSH
3536: CALL_OW 202
// AddComAgressiveMove ( un , 134 , 62 ) ;
3540: LD_VAR 0 1
3544: PPUSH
3545: LD_INT 134
3547: PPUSH
3548: LD_INT 62
3550: PPUSH
3551: CALL_OW 174
// AddComAgressiveMove ( un , 103 , 42 ) ;
3555: LD_VAR 0 1
3559: PPUSH
3560: LD_INT 103
3562: PPUSH
3563: LD_INT 42
3565: PPUSH
3566: CALL_OW 174
// AddComWait ( un , 0 0$2 ) ;
3570: LD_VAR 0 1
3574: PPUSH
3575: LD_INT 70
3577: PPUSH
3578: CALL_OW 202
// AddComAgressiveMove ( un , 84 , 2 ) ;
3582: LD_VAR 0 1
3586: PPUSH
3587: LD_INT 84
3589: PPUSH
3590: LD_INT 2
3592: PPUSH
3593: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
3597: LD_INT 35
3599: PPUSH
3600: CALL_OW 67
// if IsDead ( un ) then
3604: LD_VAR 0 1
3608: PPUSH
3609: CALL_OW 301
3613: IFFALSE 3625
// begin extra_patrol := false ;
3615: LD_ADDR_EXP 11
3619: PUSH
3620: LD_INT 0
3622: ST_TO_ADDR
// exit ;
3623: GO 3651
// end ; until IsAt ( un , 84 , 2 ) ;
3625: LD_VAR 0 1
3629: PPUSH
3630: LD_INT 84
3632: PPUSH
3633: LD_INT 2
3635: PPUSH
3636: CALL_OW 307
3640: IFFALSE 3597
// RemoveUnit ( un ) ;
3642: LD_VAR 0 1
3646: PPUSH
3647: CALL_OW 64
// end ; end_of_file
3651: PPOPN 1
3653: END
// export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor ; export function PrepareFriends ; var i , tmp , buildings , areas , bunkers , cl ; begin
3654: LD_INT 0
3656: PPUSH
3657: PPUSH
3658: PPUSH
3659: PPUSH
3660: PPUSH
3661: PPUSH
3662: PPUSH
// uc_side := 4 ;
3663: LD_ADDR_OWVAR 20
3667: PUSH
3668: LD_INT 4
3670: ST_TO_ADDR
// uc_nation := 1 ;
3671: LD_ADDR_OWVAR 21
3675: PUSH
3676: LD_INT 1
3678: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 10c_ ) ;
3679: LD_ADDR_EXP 37
3683: PUSH
3684: LD_STRING DeltaDoctor
3686: PPUSH
3687: LD_EXP 1
3691: NOT
3692: PPUSH
3693: LD_STRING 10c_
3695: PPUSH
3696: CALL 32344 0 3
3700: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 10c_ ) ;
3701: LD_ADDR_EXP 36
3705: PUSH
3706: LD_STRING Joan
3708: PPUSH
3709: LD_EXP 1
3713: NOT
3714: PPUSH
3715: LD_STRING 10c_
3717: PPUSH
3718: CALL 32344 0 3
3722: ST_TO_ADDR
// if Joan then
3723: LD_EXP 36
3727: IFFALSE 3758
// friends := Insert ( friends , friends + 1 , Joan ) ;
3729: LD_ADDR_EXP 4
3733: PUSH
3734: LD_EXP 4
3738: PPUSH
3739: LD_EXP 4
3743: PUSH
3744: LD_INT 1
3746: PLUS
3747: PPUSH
3748: LD_EXP 36
3752: PPUSH
3753: CALL_OW 2
3757: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 10c_ ) ;
3758: LD_ADDR_EXP 35
3762: PUSH
3763: LD_STRING Simms
3765: PPUSH
3766: LD_EXP 1
3770: NOT
3771: PPUSH
3772: LD_STRING 10c_
3774: PPUSH
3775: CALL 32344 0 3
3779: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 11_ ) ;
3780: LD_ADDR_EXP 34
3784: PUSH
3785: LD_STRING Kikuchi
3787: PPUSH
3788: LD_EXP 1
3792: NOT
3793: PPUSH
3794: LD_STRING 11_
3796: PPUSH
3797: CALL 32344 0 3
3801: ST_TO_ADDR
// if Kikuchi then
3802: LD_EXP 34
3806: IFFALSE 3837
// friends := Insert ( friends , friends + 1 , Kikuchi ) ;
3808: LD_ADDR_EXP 4
3812: PUSH
3813: LD_EXP 4
3817: PPUSH
3818: LD_EXP 4
3822: PUSH
3823: LD_INT 1
3825: PLUS
3826: PPUSH
3827: LD_EXP 34
3831: PPUSH
3832: CALL_OW 2
3836: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 11_ ) ;
3837: LD_ADDR_EXP 33
3841: PUSH
3842: LD_STRING Frank
3844: PPUSH
3845: LD_EXP 1
3849: NOT
3850: PPUSH
3851: LD_STRING 11_
3853: PPUSH
3854: CALL 32344 0 3
3858: ST_TO_ADDR
// if Frank then
3859: LD_EXP 33
3863: IFFALSE 3894
// friends := Insert ( friends , friends + 1 , Frank ) ;
3865: LD_ADDR_EXP 4
3869: PUSH
3870: LD_EXP 4
3874: PPUSH
3875: LD_EXP 4
3879: PUSH
3880: LD_INT 1
3882: PLUS
3883: PPUSH
3884: LD_EXP 33
3888: PPUSH
3889: CALL_OW 2
3893: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , 11_ ) ;
3894: LD_ADDR_EXP 32
3898: PUSH
3899: LD_STRING Gary
3901: PPUSH
3902: LD_EXP 1
3906: NOT
3907: PPUSH
3908: LD_STRING 11_
3910: PPUSH
3911: CALL 32344 0 3
3915: ST_TO_ADDR
// if Gary then
3916: LD_EXP 32
3920: IFFALSE 3951
// friends := Insert ( friends , friends + 1 , Gary ) ;
3922: LD_ADDR_EXP 4
3926: PUSH
3927: LD_EXP 4
3931: PPUSH
3932: LD_EXP 4
3936: PUSH
3937: LD_INT 1
3939: PLUS
3940: PPUSH
3941: LD_EXP 32
3945: PPUSH
3946: CALL_OW 2
3950: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , ( not debug ) , 11_ ) ;
3951: LD_ADDR_EXP 31
3955: PUSH
3956: LD_STRING Cornell
3958: PPUSH
3959: LD_EXP 1
3963: NOT
3964: PPUSH
3965: LD_STRING 11_
3967: PPUSH
3968: CALL 32344 0 3
3972: ST_TO_ADDR
// if Cornel then
3973: LD_EXP 31
3977: IFFALSE 4008
// friends := Insert ( friends , friends + 1 , Cornel ) ;
3979: LD_ADDR_EXP 4
3983: PUSH
3984: LD_EXP 4
3988: PPUSH
3989: LD_EXP 4
3993: PUSH
3994: LD_INT 1
3996: PLUS
3997: PPUSH
3998: LD_EXP 31
4002: PPUSH
4003: CALL_OW 2
4007: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , 11_ ) ;
4008: LD_ADDR_EXP 30
4012: PUSH
4013: LD_STRING Houten
4015: PPUSH
4016: LD_EXP 1
4020: NOT
4021: PPUSH
4022: LD_STRING 11_
4024: PPUSH
4025: CALL 32344 0 3
4029: ST_TO_ADDR
// if Houten then
4030: LD_EXP 30
4034: IFFALSE 4065
// friends := Insert ( friends , friends + 1 , Houten ) ;
4036: LD_ADDR_EXP 4
4040: PUSH
4041: LD_EXP 4
4045: PPUSH
4046: LD_EXP 4
4050: PUSH
4051: LD_INT 1
4053: PLUS
4054: PPUSH
4055: LD_EXP 30
4059: PPUSH
4060: CALL_OW 2
4064: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 11_ ) ;
4065: LD_ADDR_EXP 29
4069: PUSH
4070: LD_STRING Gladstone
4072: PPUSH
4073: LD_EXP 1
4077: NOT
4078: PPUSH
4079: LD_STRING 11_
4081: PPUSH
4082: CALL 32344 0 3
4086: ST_TO_ADDR
// if Gladstone then
4087: LD_EXP 29
4091: IFFALSE 4122
// friends := Insert ( friends , friends + 1 , Gladstone ) ;
4093: LD_ADDR_EXP 4
4097: PUSH
4098: LD_EXP 4
4102: PPUSH
4103: LD_EXP 4
4107: PUSH
4108: LD_INT 1
4110: PLUS
4111: PPUSH
4112: LD_EXP 29
4116: PPUSH
4117: CALL_OW 2
4121: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 11_ ) ;
4122: LD_ADDR_EXP 23
4126: PUSH
4127: LD_STRING Lisa
4129: PPUSH
4130: LD_EXP 1
4134: NOT
4135: PPUSH
4136: LD_STRING 11_
4138: PPUSH
4139: CALL 32344 0 3
4143: ST_TO_ADDR
// if Lisa then
4144: LD_EXP 23
4148: IFFALSE 4173
// friends := Insert ( friends , 1 , Lisa ) ;
4150: LD_ADDR_EXP 4
4154: PUSH
4155: LD_EXP 4
4159: PPUSH
4160: LD_INT 1
4162: PPUSH
4163: LD_EXP 23
4167: PPUSH
4168: CALL_OW 2
4172: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 11_ ) ;
4173: LD_ADDR_EXP 24
4177: PUSH
4178: LD_STRING Donaldson
4180: PPUSH
4181: LD_EXP 1
4185: NOT
4186: PPUSH
4187: LD_STRING 11_
4189: PPUSH
4190: CALL 32344 0 3
4194: ST_TO_ADDR
// if Donaldson then
4195: LD_EXP 24
4199: IFFALSE 4230
// friends := Insert ( friends , friends + 1 , Donaldson ) ;
4201: LD_ADDR_EXP 4
4205: PUSH
4206: LD_EXP 4
4210: PPUSH
4211: LD_EXP 4
4215: PUSH
4216: LD_INT 1
4218: PLUS
4219: PPUSH
4220: LD_EXP 24
4224: PPUSH
4225: CALL_OW 2
4229: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 11_ ) ;
4230: LD_ADDR_EXP 25
4234: PUSH
4235: LD_STRING Bobby
4237: PPUSH
4238: LD_EXP 1
4242: NOT
4243: PPUSH
4244: LD_STRING 11_
4246: PPUSH
4247: CALL 32344 0 3
4251: ST_TO_ADDR
// if Bobby then
4252: LD_EXP 25
4256: IFFALSE 4287
// friends := Insert ( friends , friends + 1 , Bobby ) ;
4258: LD_ADDR_EXP 4
4262: PUSH
4263: LD_EXP 4
4267: PPUSH
4268: LD_EXP 4
4272: PUSH
4273: LD_INT 1
4275: PLUS
4276: PPUSH
4277: LD_EXP 25
4281: PPUSH
4282: CALL_OW 2
4286: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 11_ ) ;
4287: LD_ADDR_EXP 26
4291: PUSH
4292: LD_STRING Cyrus
4294: PPUSH
4295: LD_EXP 1
4299: NOT
4300: PPUSH
4301: LD_STRING 11_
4303: PPUSH
4304: CALL 32344 0 3
4308: ST_TO_ADDR
// if Cyrus then
4309: LD_EXP 26
4313: IFFALSE 4344
// friends := Insert ( friends , friends + 1 , Cyrus ) ;
4315: LD_ADDR_EXP 4
4319: PUSH
4320: LD_EXP 4
4324: PPUSH
4325: LD_EXP 4
4329: PUSH
4330: LD_INT 1
4332: PLUS
4333: PPUSH
4334: LD_EXP 26
4338: PPUSH
4339: CALL_OW 2
4343: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 11_ ) ;
4344: LD_ADDR_EXP 27
4348: PUSH
4349: LD_STRING Denis
4351: PPUSH
4352: LD_EXP 1
4356: NOT
4357: PPUSH
4358: LD_STRING 11_
4360: PPUSH
4361: CALL 32344 0 3
4365: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , 11_ ) ;
4366: LD_ADDR_EXP 28
4370: PUSH
4371: LD_STRING Brown
4373: PPUSH
4374: LD_EXP 1
4378: NOT
4379: PPUSH
4380: LD_STRING 11_
4382: PPUSH
4383: CALL 32344 0 3
4387: ST_TO_ADDR
// if Brown then
4388: LD_EXP 28
4392: IFFALSE 4423
// friends := Insert ( friends , friends + 1 , Brown ) ;
4394: LD_ADDR_EXP 4
4398: PUSH
4399: LD_EXP 4
4403: PPUSH
4404: LD_EXP 4
4408: PUSH
4409: LD_INT 1
4411: PLUS
4412: PPUSH
4413: LD_EXP 28
4417: PPUSH
4418: CALL_OW 2
4422: ST_TO_ADDR
// friends := friends ^ CreateCharacterSet ( 11c_others ) ^ CreateCharacterSet ( 11_others ) ;
4423: LD_ADDR_EXP 4
4427: PUSH
4428: LD_EXP 4
4432: PUSH
4433: LD_STRING 11c_others
4435: PPUSH
4436: CALL_OW 31
4440: ADD
4441: PUSH
4442: LD_STRING 11_others
4444: PPUSH
4445: CALL_OW 31
4449: ADD
4450: ST_TO_ADDR
// if friends < 18 then
4451: LD_EXP 4
4455: PUSH
4456: LD_INT 18
4458: LESS
4459: IFFALSE 4531
// for i = 1 to 18 do
4461: LD_ADDR_VAR 0 2
4465: PUSH
4466: DOUBLE
4467: LD_INT 1
4469: DEC
4470: ST_TO_ADDR
4471: LD_INT 18
4473: PUSH
4474: FOR_TO
4475: IFFALSE 4529
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 7 ) ;
4477: LD_INT 0
4479: PPUSH
4480: LD_INT 1
4482: PPUSH
4483: LD_INT 4
4485: PPUSH
4486: CALL_OW 12
4490: PPUSH
4491: LD_INT 7
4493: PPUSH
4494: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
4498: LD_ADDR_EXP 4
4502: PUSH
4503: LD_EXP 4
4507: PPUSH
4508: LD_EXP 4
4512: PUSH
4513: LD_INT 1
4515: PLUS
4516: PPUSH
4517: CALL_OW 44
4521: PPUSH
4522: CALL_OW 2
4526: ST_TO_ADDR
// end ;
4527: GO 4474
4529: POP
4530: POP
// for i in friends do
4531: LD_ADDR_VAR 0 2
4535: PUSH
4536: LD_EXP 4
4540: PUSH
4541: FOR_IN
4542: IFFALSE 4600
// if GetSkill ( i , 1 ) >= GetSkill ( i , 4 ) then
4544: LD_VAR 0 2
4548: PPUSH
4549: LD_INT 1
4551: PPUSH
4552: CALL_OW 259
4556: PUSH
4557: LD_VAR 0 2
4561: PPUSH
4562: LD_INT 4
4564: PPUSH
4565: CALL_OW 259
4569: GREATEREQUAL
4570: IFFALSE 4586
// SetClass ( i , class_soldier ) else
4572: LD_VAR 0 2
4576: PPUSH
4577: LD_INT 1
4579: PPUSH
4580: CALL_OW 336
4584: GO 4598
// SetClass ( i , class_scientistic ) ;
4586: LD_VAR 0 2
4590: PPUSH
4591: LD_INT 4
4593: PPUSH
4594: CALL_OW 336
4598: GO 4541
4600: POP
4601: POP
// if Frank then
4602: LD_EXP 33
4606: IFFALSE 4620
// SetClass ( Frank , class_sniper ) ;
4608: LD_EXP 33
4612: PPUSH
4613: LD_INT 5
4615: PPUSH
4616: CALL_OW 336
// SetClass ( [ Joan , Denis , DeltaDoctor , Simms ] , class_scientistic ) ;
4620: LD_EXP 36
4624: PUSH
4625: LD_EXP 27
4629: PUSH
4630: LD_EXP 37
4634: PUSH
4635: LD_EXP 35
4639: PUSH
4640: EMPTY
4641: LIST
4642: LIST
4643: LIST
4644: LIST
4645: PPUSH
4646: LD_INT 4
4648: PPUSH
4649: CALL_OW 336
// selected = CharacterSelection (  , 7 , 7 , [ sel_dont_change_class , JMM , Roth , Simms , Denis , DeltaDoctor , sel_not_hired , sel_changeable , sel_change_class ] ^ friends , [ class_soldier , [ class_scientistic , 2 ] , [ class_sniper , 0 , 3 ] ] ) ;
4653: LD_ADDR_EXP 3
4657: PUSH
4658: LD_STRING 
4660: PPUSH
4661: LD_INT 7
4663: PPUSH
4664: LD_INT 7
4666: PPUSH
4667: LD_INT -6
4669: PUSH
4670: LD_EXP 14
4674: PUSH
4675: LD_EXP 15
4679: PUSH
4680: LD_EXP 35
4684: PUSH
4685: LD_EXP 27
4689: PUSH
4690: LD_EXP 37
4694: PUSH
4695: LD_INT -2
4697: PUSH
4698: LD_INT -3
4700: PUSH
4701: LD_INT -5
4703: PUSH
4704: EMPTY
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: LIST
4714: PUSH
4715: LD_EXP 4
4719: ADD
4720: PPUSH
4721: LD_INT 1
4723: PUSH
4724: LD_INT 4
4726: PUSH
4727: LD_INT 2
4729: PUSH
4730: EMPTY
4731: LIST
4732: LIST
4733: PUSH
4734: LD_INT 5
4736: PUSH
4737: LD_INT 0
4739: PUSH
4740: LD_INT 3
4742: PUSH
4743: EMPTY
4744: LIST
4745: LIST
4746: LIST
4747: PUSH
4748: EMPTY
4749: LIST
4750: LIST
4751: LIST
4752: PPUSH
4753: CALL_OW 42
4757: ST_TO_ADDR
// if Simms then
4758: LD_EXP 35
4762: IFFALSE 4780
// selected := selected ^ Simms ;
4764: LD_ADDR_EXP 3
4768: PUSH
4769: LD_EXP 3
4773: PUSH
4774: LD_EXP 35
4778: ADD
4779: ST_TO_ADDR
// if Denis then
4780: LD_EXP 27
4784: IFFALSE 4802
// selected := selected ^ Denis ;
4786: LD_ADDR_EXP 3
4790: PUSH
4791: LD_EXP 3
4795: PUSH
4796: LD_EXP 27
4800: ADD
4801: ST_TO_ADDR
// if DeltaDoctor then
4802: LD_EXP 37
4806: IFFALSE 4824
// selected := selected ^ DeltaDoctor ;
4808: LD_ADDR_EXP 3
4812: PUSH
4813: LD_EXP 3
4817: PUSH
4818: LD_EXP 37
4822: ADD
4823: ST_TO_ADDR
// friends := friends diff selected ;
4824: LD_ADDR_EXP 4
4828: PUSH
4829: LD_EXP 4
4833: PUSH
4834: LD_EXP 3
4838: DIFF
4839: ST_TO_ADDR
// buildings := [ [ ambar1 , ambar2 , ambar3 ] , [ amlab2 , amlab3 , amlab4 ] ] ;
4840: LD_ADDR_VAR 0 4
4844: PUSH
4845: LD_INT 111
4847: PUSH
4848: LD_INT 137
4850: PUSH
4851: LD_INT 51
4853: PUSH
4854: EMPTY
4855: LIST
4856: LIST
4857: LIST
4858: PUSH
4859: LD_INT 147
4861: PUSH
4862: LD_INT 129
4864: PUSH
4865: LD_INT 25
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: LIST
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: ST_TO_ADDR
// areas := [ friends_spawn_1 , friends_spawn_2 , friends_spawn_3 , friends_spawn_4 , friends_spawn_5 , friends_spawn_6 ] ;
4877: LD_ADDR_VAR 0 5
4881: PUSH
4882: LD_INT 5
4884: PUSH
4885: LD_INT 6
4887: PUSH
4888: LD_INT 7
4890: PUSH
4891: LD_INT 8
4893: PUSH
4894: LD_INT 17
4896: PUSH
4897: LD_INT 18
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: LIST
4904: LIST
4905: LIST
4906: LIST
4907: ST_TO_ADDR
// for i in buildings do
4908: LD_ADDR_VAR 0 2
4912: PUSH
4913: LD_VAR 0 4
4917: PUSH
4918: FOR_IN
4919: IFFALSE 4935
// SetSide ( i , 4 ) ;
4921: LD_VAR 0 2
4925: PPUSH
4926: LD_INT 4
4928: PPUSH
4929: CALL_OW 235
4933: GO 4918
4935: POP
4936: POP
// for i in selected do
4937: LD_ADDR_VAR 0 2
4941: PUSH
4942: LD_EXP 3
4946: PUSH
4947: FOR_IN
4948: IFFALSE 5288
// begin if GetClass ( i ) in [ 1 , 5 ] then
4950: LD_VAR 0 2
4954: PPUSH
4955: CALL_OW 257
4959: PUSH
4960: LD_INT 1
4962: PUSH
4963: LD_INT 5
4965: PUSH
4966: EMPTY
4967: LIST
4968: LIST
4969: IN
4970: IFFALSE 5130
// begin if buildings [ 1 ] then
4972: LD_VAR 0 4
4976: PUSH
4977: LD_INT 1
4979: ARRAY
4980: IFFALSE 5041
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
4982: LD_VAR 0 2
4986: PPUSH
4987: LD_VAR 0 4
4991: PUSH
4992: LD_INT 1
4994: ARRAY
4995: PUSH
4996: LD_INT 1
4998: ARRAY
4999: PPUSH
5000: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
5004: LD_ADDR_VAR 0 4
5008: PUSH
5009: LD_VAR 0 4
5013: PPUSH
5014: LD_INT 1
5016: PPUSH
5017: LD_VAR 0 4
5021: PUSH
5022: LD_INT 1
5024: ARRAY
5025: PPUSH
5026: LD_INT 1
5028: PPUSH
5029: CALL_OW 3
5033: PPUSH
5034: CALL_OW 1
5038: ST_TO_ADDR
// end else
5039: GO 5128
// begin if not areas then
5041: LD_VAR 0 5
5045: NOT
5046: IFFALSE 5080
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5048: LD_VAR 0 2
5052: PPUSH
5053: LD_INT 87
5055: PPUSH
5056: LD_INT 68
5058: PPUSH
5059: LD_INT 8
5061: PPUSH
5062: LD_INT 0
5064: PPUSH
5065: CALL_OW 50
// ComHold ( i ) ;
5069: LD_VAR 0 2
5073: PPUSH
5074: CALL_OW 140
// end else
5078: GO 5128
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5080: LD_VAR 0 2
5084: PPUSH
5085: LD_VAR 0 5
5089: PUSH
5090: LD_INT 1
5092: ARRAY
5093: PPUSH
5094: LD_INT 0
5096: PPUSH
5097: CALL_OW 49
// ComHold ( i ) ;
5101: LD_VAR 0 2
5105: PPUSH
5106: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5110: LD_ADDR_VAR 0 5
5114: PUSH
5115: LD_VAR 0 5
5119: PPUSH
5120: LD_INT 1
5122: PPUSH
5123: CALL_OW 3
5127: ST_TO_ADDR
// end ; end ; end else
5128: GO 5286
// begin if buildings [ 2 ] then
5130: LD_VAR 0 4
5134: PUSH
5135: LD_INT 2
5137: ARRAY
5138: IFFALSE 5199
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
5140: LD_VAR 0 2
5144: PPUSH
5145: LD_VAR 0 4
5149: PUSH
5150: LD_INT 2
5152: ARRAY
5153: PUSH
5154: LD_INT 1
5156: ARRAY
5157: PPUSH
5158: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
5162: LD_ADDR_VAR 0 4
5166: PUSH
5167: LD_VAR 0 4
5171: PPUSH
5172: LD_INT 2
5174: PPUSH
5175: LD_VAR 0 4
5179: PUSH
5180: LD_INT 2
5182: ARRAY
5183: PPUSH
5184: LD_INT 1
5186: PPUSH
5187: CALL_OW 3
5191: PPUSH
5192: CALL_OW 1
5196: ST_TO_ADDR
// end else
5197: GO 5286
// begin if not areas then
5199: LD_VAR 0 5
5203: NOT
5204: IFFALSE 5238
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5206: LD_VAR 0 2
5210: PPUSH
5211: LD_INT 87
5213: PPUSH
5214: LD_INT 68
5216: PPUSH
5217: LD_INT 8
5219: PPUSH
5220: LD_INT 0
5222: PPUSH
5223: CALL_OW 50
// ComHold ( i ) ;
5227: LD_VAR 0 2
5231: PPUSH
5232: CALL_OW 140
// end else
5236: GO 5286
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5238: LD_VAR 0 2
5242: PPUSH
5243: LD_VAR 0 5
5247: PUSH
5248: LD_INT 1
5250: ARRAY
5251: PPUSH
5252: LD_INT 0
5254: PPUSH
5255: CALL_OW 49
// ComHold ( i ) ;
5259: LD_VAR 0 2
5263: PPUSH
5264: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5268: LD_ADDR_VAR 0 5
5272: PUSH
5273: LD_VAR 0 5
5277: PPUSH
5278: LD_INT 1
5280: PPUSH
5281: CALL_OW 3
5285: ST_TO_ADDR
// end ; end ; end ; end ;
5286: GO 4947
5288: POP
5289: POP
// bunkers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) ;
5290: LD_ADDR_VAR 0 6
5294: PUSH
5295: LD_INT 22
5297: PUSH
5298: LD_INT 1
5300: PUSH
5301: EMPTY
5302: LIST
5303: LIST
5304: PUSH
5305: LD_INT 30
5307: PUSH
5308: LD_INT 32
5310: PUSH
5311: EMPTY
5312: LIST
5313: LIST
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: PPUSH
5319: CALL_OW 69
5323: ST_TO_ADDR
// for i = bunkers - friends downto 1 do
5324: LD_ADDR_VAR 0 2
5328: PUSH
5329: DOUBLE
5330: LD_VAR 0 6
5334: PUSH
5335: LD_EXP 4
5339: MINUS
5340: INC
5341: ST_TO_ADDR
5342: LD_INT 1
5344: PUSH
5345: FOR_DOWNTO
5346: IFFALSE 5413
// begin PrepareHuman ( false , 1 , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
5348: LD_INT 0
5350: PPUSH
5351: LD_INT 1
5353: PPUSH
5354: LD_INT 7
5356: PUSH
5357: LD_INT 8
5359: PUSH
5360: LD_INT 9
5362: PUSH
5363: LD_INT 10
5365: PUSH
5366: EMPTY
5367: LIST
5368: LIST
5369: LIST
5370: LIST
5371: PUSH
5372: LD_OWVAR 67
5376: ARRAY
5377: PPUSH
5378: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
5382: LD_ADDR_EXP 4
5386: PUSH
5387: LD_EXP 4
5391: PPUSH
5392: LD_EXP 4
5396: PUSH
5397: LD_INT 1
5399: PLUS
5400: PPUSH
5401: CALL_OW 44
5405: PPUSH
5406: CALL_OW 2
5410: ST_TO_ADDR
// end ;
5411: GO 5345
5413: POP
5414: POP
// if friends then
5415: LD_EXP 4
5419: IFFALSE 5535
// begin tmp := friends ;
5421: LD_ADDR_VAR 0 3
5425: PUSH
5426: LD_EXP 4
5430: ST_TO_ADDR
// for i = 1 to bunkers do
5431: LD_ADDR_VAR 0 2
5435: PUSH
5436: DOUBLE
5437: LD_INT 1
5439: DEC
5440: ST_TO_ADDR
5441: LD_VAR 0 6
5445: PUSH
5446: FOR_TO
5447: IFFALSE 5533
// begin SetSide ( tmp [ tmp ] , 1 ) ;
5449: LD_VAR 0 3
5453: PUSH
5454: LD_VAR 0 3
5458: ARRAY
5459: PPUSH
5460: LD_INT 1
5462: PPUSH
5463: CALL_OW 235
// SetClass ( tmp [ tmp ] , 1 ) ;
5467: LD_VAR 0 3
5471: PUSH
5472: LD_VAR 0 3
5476: ARRAY
5477: PPUSH
5478: LD_INT 1
5480: PPUSH
5481: CALL_OW 336
// PlaceHumanInUnit ( tmp [ tmp ] , bunkers [ i ] ) ;
5485: LD_VAR 0 3
5489: PUSH
5490: LD_VAR 0 3
5494: ARRAY
5495: PPUSH
5496: LD_VAR 0 6
5500: PUSH
5501: LD_VAR 0 2
5505: ARRAY
5506: PPUSH
5507: CALL_OW 52
// tmp := Delete ( tmp , tmp ) ;
5511: LD_ADDR_VAR 0 3
5515: PUSH
5516: LD_VAR 0 3
5520: PPUSH
5521: LD_VAR 0 3
5525: PPUSH
5526: CALL_OW 3
5530: ST_TO_ADDR
// end ;
5531: GO 5446
5533: POP
5534: POP
// end ; areas := areas union [ guard_spawn_1 , guard_spawn_2 , guard_spawn_3 , guard_spawn_4 , guard_spawn_5 , guard_spawn_6 , guard_spawn_7 , guard_spawn_8 , guard_spawn_9 , guard_spawn_10 , guard_spawn_11 , guard_spawn_12 , guard_spawn_13 , guard_spawn_14 , guard_spawn_15 , guard_spawn_16 , guard_spawn_17 , guard_spawn_18 , guard_spawn_19 , guard_spawn_20 ] ;
5535: LD_ADDR_VAR 0 5
5539: PUSH
5540: LD_VAR 0 5
5544: PUSH
5545: LD_INT 9
5547: PUSH
5548: LD_INT 10
5550: PUSH
5551: LD_INT 11
5553: PUSH
5554: LD_INT 12
5556: PUSH
5557: LD_INT 13
5559: PUSH
5560: LD_INT 14
5562: PUSH
5563: LD_INT 15
5565: PUSH
5566: LD_INT 16
5568: PUSH
5569: LD_INT 26
5571: PUSH
5572: LD_INT 27
5574: PUSH
5575: LD_INT 28
5577: PUSH
5578: LD_INT 29
5580: PUSH
5581: LD_INT 30
5583: PUSH
5584: LD_INT 31
5586: PUSH
5587: LD_INT 32
5589: PUSH
5590: LD_INT 33
5592: PUSH
5593: LD_INT 34
5595: PUSH
5596: LD_INT 35
5598: PUSH
5599: LD_INT 36
5601: PUSH
5602: LD_INT 37
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: LIST
5609: LIST
5610: LIST
5611: LIST
5612: LIST
5613: LIST
5614: LIST
5615: LIST
5616: LIST
5617: LIST
5618: LIST
5619: LIST
5620: LIST
5621: LIST
5622: LIST
5623: LIST
5624: LIST
5625: LIST
5626: UNION
5627: ST_TO_ADDR
// for i in friends do
5628: LD_ADDR_VAR 0 2
5632: PUSH
5633: LD_EXP 4
5637: PUSH
5638: FOR_IN
5639: IFFALSE 5926
// begin SetTag ( i , 2 ) ;
5641: LD_VAR 0 2
5645: PPUSH
5646: LD_INT 2
5648: PPUSH
5649: CALL_OW 109
// if not GetClass ( i ) in [ class_soldier , class_scientistic , class_sniper ] then
5653: LD_VAR 0 2
5657: PPUSH
5658: CALL_OW 257
5662: PUSH
5663: LD_INT 1
5665: PUSH
5666: LD_INT 4
5668: PUSH
5669: LD_INT 5
5671: PUSH
5672: EMPTY
5673: LIST
5674: LIST
5675: LIST
5676: IN
5677: NOT
5678: IFFALSE 5692
// SetClass ( i , 1 ) ;
5680: LD_VAR 0 2
5684: PPUSH
5685: LD_INT 1
5687: PPUSH
5688: CALL_OW 336
// if GetClass ( i ) in [ class_soldier , class_sniper ] and buildings [ 1 ] then
5692: LD_VAR 0 2
5696: PPUSH
5697: CALL_OW 257
5701: PUSH
5702: LD_INT 1
5704: PUSH
5705: LD_INT 5
5707: PUSH
5708: EMPTY
5709: LIST
5710: LIST
5711: IN
5712: PUSH
5713: LD_VAR 0 4
5717: PUSH
5718: LD_INT 1
5720: ARRAY
5721: AND
5722: IFFALSE 5783
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
5724: LD_VAR 0 2
5728: PPUSH
5729: LD_VAR 0 4
5733: PUSH
5734: LD_INT 1
5736: ARRAY
5737: PUSH
5738: LD_INT 1
5740: ARRAY
5741: PPUSH
5742: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
5746: LD_ADDR_VAR 0 4
5750: PUSH
5751: LD_VAR 0 4
5755: PPUSH
5756: LD_INT 1
5758: PPUSH
5759: LD_VAR 0 4
5763: PUSH
5764: LD_INT 1
5766: ARRAY
5767: PPUSH
5768: LD_INT 1
5770: PPUSH
5771: CALL_OW 3
5775: PPUSH
5776: CALL_OW 1
5780: ST_TO_ADDR
// continue ;
5781: GO 5638
// end ; if GetClass ( i ) = class_scientistic and buildings [ 2 ] then
5783: LD_VAR 0 2
5787: PPUSH
5788: CALL_OW 257
5792: PUSH
5793: LD_INT 4
5795: EQUAL
5796: PUSH
5797: LD_VAR 0 4
5801: PUSH
5802: LD_INT 2
5804: ARRAY
5805: AND
5806: IFFALSE 5867
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
5808: LD_VAR 0 2
5812: PPUSH
5813: LD_VAR 0 4
5817: PUSH
5818: LD_INT 2
5820: ARRAY
5821: PUSH
5822: LD_INT 1
5824: ARRAY
5825: PPUSH
5826: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
5830: LD_ADDR_VAR 0 4
5834: PUSH
5835: LD_VAR 0 4
5839: PPUSH
5840: LD_INT 2
5842: PPUSH
5843: LD_VAR 0 4
5847: PUSH
5848: LD_INT 2
5850: ARRAY
5851: PPUSH
5852: LD_INT 1
5854: PPUSH
5855: CALL_OW 3
5859: PPUSH
5860: CALL_OW 1
5864: ST_TO_ADDR
// continue ;
5865: GO 5638
// end ; PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5867: LD_VAR 0 2
5871: PPUSH
5872: LD_VAR 0 5
5876: PUSH
5877: LD_INT 1
5879: ARRAY
5880: PPUSH
5881: LD_INT 0
5883: PPUSH
5884: CALL_OW 49
// areas := Delete ( areas , 1 ) ;
5888: LD_ADDR_VAR 0 5
5892: PUSH
5893: LD_VAR 0 5
5897: PPUSH
5898: LD_INT 1
5900: PPUSH
5901: CALL_OW 3
5905: ST_TO_ADDR
// ComHold ( i ) ;
5906: LD_VAR 0 2
5910: PPUSH
5911: CALL_OW 140
// if not areas then
5915: LD_VAR 0 5
5919: NOT
5920: IFFALSE 5924
// break ;
5922: GO 5926
// end ;
5924: GO 5638
5926: POP
5927: POP
// if UnitFilter ( friends , [ f_not , [ f_placed ] ] ) then
5928: LD_EXP 4
5932: PPUSH
5933: LD_INT 3
5935: PUSH
5936: LD_INT 52
5938: PUSH
5939: EMPTY
5940: LIST
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: PPUSH
5946: CALL_OW 72
5950: IFFALSE 6017
// for i in UnitFilter ( friends , [ f_not , [ f_placed ] ] ) do
5952: LD_ADDR_VAR 0 2
5956: PUSH
5957: LD_EXP 4
5961: PPUSH
5962: LD_INT 3
5964: PUSH
5965: LD_INT 52
5967: PUSH
5968: EMPTY
5969: LIST
5970: PUSH
5971: EMPTY
5972: LIST
5973: LIST
5974: PPUSH
5975: CALL_OW 72
5979: PUSH
5980: FOR_IN
5981: IFFALSE 6015
// begin PlaceUnitXYR ( i , 65 , 58 , 7 , false ) ;
5983: LD_VAR 0 2
5987: PPUSH
5988: LD_INT 65
5990: PPUSH
5991: LD_INT 58
5993: PPUSH
5994: LD_INT 7
5996: PPUSH
5997: LD_INT 0
5999: PPUSH
6000: CALL_OW 50
// ComHold ( i ) ;
6004: LD_VAR 0 2
6008: PPUSH
6009: CALL_OW 140
// end ;
6013: GO 5980
6015: POP
6016: POP
// if Frank then
6017: LD_EXP 33
6021: IFFALSE 6035
// SetClass ( Frank , class_sniper ) ;
6023: LD_EXP 33
6027: PPUSH
6028: LD_INT 5
6030: PPUSH
6031: CALL_OW 336
// end ; end_of_file
6035: LD_VAR 0 1
6039: RET
// export function CanSayRand ( side ) ; begin
6040: LD_INT 0
6042: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6043: LD_ADDR_VAR 0 2
6047: PUSH
6048: LD_INT 52
6050: PUSH
6051: EMPTY
6052: LIST
6053: PUSH
6054: LD_INT 22
6056: PUSH
6057: LD_VAR 0 1
6061: PUSH
6062: EMPTY
6063: LIST
6064: LIST
6065: PUSH
6066: LD_INT 2
6068: PUSH
6069: LD_INT 25
6071: PUSH
6072: LD_INT 1
6074: PUSH
6075: EMPTY
6076: LIST
6077: LIST
6078: PUSH
6079: LD_INT 25
6081: PUSH
6082: LD_INT 2
6084: PUSH
6085: EMPTY
6086: LIST
6087: LIST
6088: PUSH
6089: LD_INT 25
6091: PUSH
6092: LD_INT 3
6094: PUSH
6095: EMPTY
6096: LIST
6097: LIST
6098: PUSH
6099: LD_INT 25
6101: PUSH
6102: LD_INT 4
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: PUSH
6109: EMPTY
6110: LIST
6111: LIST
6112: LIST
6113: LIST
6114: LIST
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: LIST
6120: PPUSH
6121: CALL_OW 69
6125: PUSH
6126: LD_EXP 14
6130: PUSH
6131: LD_EXP 33
6135: PUSH
6136: LD_EXP 23
6140: PUSH
6141: LD_EXP 24
6145: PUSH
6146: LD_EXP 25
6150: PUSH
6151: LD_EXP 26
6155: PUSH
6156: LD_EXP 27
6160: PUSH
6161: LD_EXP 28
6165: PUSH
6166: LD_EXP 29
6170: PUSH
6171: LD_EXP 30
6175: PUSH
6176: LD_EXP 16
6180: PUSH
6181: LD_EXP 31
6185: PUSH
6186: LD_EXP 32
6190: PUSH
6191: LD_EXP 34
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: LIST
6202: LIST
6203: LIST
6204: LIST
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: LIST
6211: DIFF
6212: ST_TO_ADDR
// end ;
6213: LD_VAR 0 2
6217: RET
// export function SayRand ( sex , dial ) ; begin
6218: LD_INT 0
6220: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6221: LD_ADDR_VAR 0 3
6225: PUSH
6226: LD_INT 52
6228: PUSH
6229: EMPTY
6230: LIST
6231: PUSH
6232: LD_INT 22
6234: PUSH
6235: LD_INT 1
6237: PUSH
6238: EMPTY
6239: LIST
6240: LIST
6241: PUSH
6242: LD_INT 26
6244: PUSH
6245: LD_VAR 0 1
6249: PUSH
6250: EMPTY
6251: LIST
6252: LIST
6253: PUSH
6254: LD_INT 2
6256: PUSH
6257: LD_INT 25
6259: PUSH
6260: LD_INT 1
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: PUSH
6267: LD_INT 25
6269: PUSH
6270: LD_INT 2
6272: PUSH
6273: EMPTY
6274: LIST
6275: LIST
6276: PUSH
6277: LD_INT 25
6279: PUSH
6280: LD_INT 3
6282: PUSH
6283: EMPTY
6284: LIST
6285: LIST
6286: PUSH
6287: LD_INT 25
6289: PUSH
6290: LD_INT 4
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: LIST
6308: LIST
6309: PPUSH
6310: CALL_OW 69
6314: PUSH
6315: LD_EXP 14
6319: PUSH
6320: LD_EXP 33
6324: PUSH
6325: LD_EXP 23
6329: PUSH
6330: LD_EXP 24
6334: PUSH
6335: LD_EXP 25
6339: PUSH
6340: LD_EXP 26
6344: PUSH
6345: LD_EXP 27
6349: PUSH
6350: LD_EXP 28
6354: PUSH
6355: LD_EXP 29
6359: PUSH
6360: LD_EXP 30
6364: PUSH
6365: LD_EXP 16
6369: PUSH
6370: LD_EXP 31
6374: PUSH
6375: LD_EXP 32
6379: PUSH
6380: LD_EXP 34
6384: PUSH
6385: EMPTY
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: LIST
6396: LIST
6397: LIST
6398: LIST
6399: LIST
6400: DIFF
6401: ST_TO_ADDR
// if not result then
6402: LD_VAR 0 3
6406: NOT
6407: IFFALSE 6411
// exit ;
6409: GO 6439
// result := result [ 1 ] ;
6411: LD_ADDR_VAR 0 3
6415: PUSH
6416: LD_VAR 0 3
6420: PUSH
6421: LD_INT 1
6423: ARRAY
6424: ST_TO_ADDR
// Say ( result , dial ) ;
6425: LD_VAR 0 3
6429: PPUSH
6430: LD_VAR 0 2
6434: PPUSH
6435: CALL_OW 88
// end ;
6439: LD_VAR 0 3
6443: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
6444: LD_INT 0
6446: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
6447: LD_ADDR_VAR 0 4
6451: PUSH
6452: LD_INT 22
6454: PUSH
6455: LD_INT 1
6457: PUSH
6458: EMPTY
6459: LIST
6460: LIST
6461: PUSH
6462: LD_INT 26
6464: PUSH
6465: LD_VAR 0 1
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: PUSH
6474: LD_INT 2
6476: PUSH
6477: LD_INT 25
6479: PUSH
6480: LD_INT 1
6482: PUSH
6483: EMPTY
6484: LIST
6485: LIST
6486: PUSH
6487: LD_INT 25
6489: PUSH
6490: LD_INT 2
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: PUSH
6497: LD_INT 25
6499: PUSH
6500: LD_INT 3
6502: PUSH
6503: EMPTY
6504: LIST
6505: LIST
6506: PUSH
6507: LD_INT 25
6509: PUSH
6510: LD_INT 4
6512: PUSH
6513: EMPTY
6514: LIST
6515: LIST
6516: PUSH
6517: EMPTY
6518: LIST
6519: LIST
6520: LIST
6521: LIST
6522: LIST
6523: PUSH
6524: EMPTY
6525: LIST
6526: LIST
6527: LIST
6528: PPUSH
6529: CALL_OW 69
6533: PUSH
6534: LD_EXP 14
6538: PUSH
6539: LD_EXP 33
6543: PUSH
6544: LD_EXP 23
6548: PUSH
6549: LD_EXP 24
6553: PUSH
6554: LD_EXP 25
6558: PUSH
6559: LD_EXP 26
6563: PUSH
6564: LD_EXP 27
6568: PUSH
6569: LD_EXP 28
6573: PUSH
6574: LD_EXP 29
6578: PUSH
6579: LD_EXP 30
6583: PUSH
6584: LD_EXP 16
6588: PUSH
6589: LD_EXP 31
6593: PUSH
6594: LD_EXP 32
6598: PUSH
6599: LD_EXP 34
6603: PUSH
6604: EMPTY
6605: LIST
6606: LIST
6607: LIST
6608: LIST
6609: LIST
6610: LIST
6611: LIST
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: PUSH
6620: LD_VAR 0 3
6624: ADD
6625: DIFF
6626: ST_TO_ADDR
// if not result then
6627: LD_VAR 0 4
6631: NOT
6632: IFFALSE 6636
// exit ;
6634: GO 6664
// result := result [ 1 ] ;
6636: LD_ADDR_VAR 0 4
6640: PUSH
6641: LD_VAR 0 4
6645: PUSH
6646: LD_INT 1
6648: ARRAY
6649: ST_TO_ADDR
// Say ( result , dial ) ;
6650: LD_VAR 0 4
6654: PPUSH
6655: LD_VAR 0 2
6659: PPUSH
6660: CALL_OW 88
// end ;
6664: LD_VAR 0 4
6668: RET
// export function Patrol ( unit , path , flags ) ; var i , x , y , c , p , station , tmp_path , status , enemy , e , spot_dist , safe_place , chase_range , need_refuel ; begin
6669: LD_INT 0
6671: PPUSH
6672: PPUSH
6673: PPUSH
6674: PPUSH
6675: PPUSH
6676: PPUSH
6677: PPUSH
6678: PPUSH
6679: PPUSH
6680: PPUSH
6681: PPUSH
6682: PPUSH
6683: PPUSH
6684: PPUSH
6685: PPUSH
// if not unit or not path or GetType ( unit ) = unit_building then
6686: LD_VAR 0 1
6690: NOT
6691: PUSH
6692: LD_VAR 0 2
6696: NOT
6697: OR
6698: PUSH
6699: LD_VAR 0 1
6703: PPUSH
6704: CALL_OW 247
6708: PUSH
6709: LD_INT 3
6711: EQUAL
6712: OR
6713: IFFALSE 6717
// exit ;
6715: GO 8256
// for i = path downto 1 do
6717: LD_ADDR_VAR 0 5
6721: PUSH
6722: DOUBLE
6723: LD_VAR 0 2
6727: INC
6728: ST_TO_ADDR
6729: LD_INT 1
6731: PUSH
6732: FOR_DOWNTO
6733: IFFALSE 6794
// begin if not ValidHex ( path [ i ] [ 1 ] , path [ i ] [ 2 ] ) then
6735: LD_VAR 0 2
6739: PUSH
6740: LD_VAR 0 5
6744: ARRAY
6745: PUSH
6746: LD_INT 1
6748: ARRAY
6749: PPUSH
6750: LD_VAR 0 2
6754: PUSH
6755: LD_VAR 0 5
6759: ARRAY
6760: PUSH
6761: LD_INT 2
6763: ARRAY
6764: PPUSH
6765: CALL_OW 488
6769: NOT
6770: IFFALSE 6792
// path = Delete ( path , i ) ;
6772: LD_ADDR_VAR 0 2
6776: PUSH
6777: LD_VAR 0 2
6781: PPUSH
6782: LD_VAR 0 5
6786: PPUSH
6787: CALL_OW 3
6791: ST_TO_ADDR
// end ;
6792: GO 6732
6794: POP
6795: POP
// if not path then
6796: LD_VAR 0 2
6800: NOT
6801: IFFALSE 6805
// exit ;
6803: GO 8256
// tmp_path := [ ] ;
6805: LD_ADDR_VAR 0 11
6809: PUSH
6810: EMPTY
6811: ST_TO_ADDR
// if flags then
6812: LD_VAR 0 3
6816: IFFALSE 6890
// begin if flags [ 1 ] then
6818: LD_VAR 0 3
6822: PUSH
6823: LD_INT 1
6825: ARRAY
6826: IFFALSE 6842
// safe_place = flags [ 1 ] ;
6828: LD_ADDR_VAR 0 16
6832: PUSH
6833: LD_VAR 0 3
6837: PUSH
6838: LD_INT 1
6840: ARRAY
6841: ST_TO_ADDR
// if flags [ 2 ] then
6842: LD_VAR 0 3
6846: PUSH
6847: LD_INT 2
6849: ARRAY
6850: IFFALSE 6866
// spot_dist = flags [ 2 ] ;
6852: LD_ADDR_VAR 0 15
6856: PUSH
6857: LD_VAR 0 3
6861: PUSH
6862: LD_INT 2
6864: ARRAY
6865: ST_TO_ADDR
// if flags [ 3 ] then
6866: LD_VAR 0 3
6870: PUSH
6871: LD_INT 3
6873: ARRAY
6874: IFFALSE 6890
// chase_range = flags [ 3 ] ;
6876: LD_ADDR_VAR 0 17
6880: PUSH
6881: LD_VAR 0 3
6885: PUSH
6886: LD_INT 3
6888: ARRAY
6889: ST_TO_ADDR
// end ; if not chase_range then
6890: LD_VAR 0 17
6894: NOT
6895: IFFALSE 6905
// chase_range = 8 ;
6897: LD_ADDR_VAR 0 17
6901: PUSH
6902: LD_INT 8
6904: ST_TO_ADDR
// if not spot_dist then
6905: LD_VAR 0 15
6909: NOT
6910: IFFALSE 6920
// spot_dist := 8 ;
6912: LD_ADDR_VAR 0 15
6916: PUSH
6917: LD_INT 8
6919: ST_TO_ADDR
// need_refuel = ( GetType ( unit ) = unit_vehicle and GetEngine ( unit ) <> engine_siberite ) ;
6920: LD_ADDR_VAR 0 18
6924: PUSH
6925: LD_VAR 0 1
6929: PPUSH
6930: CALL_OW 247
6934: PUSH
6935: LD_INT 2
6937: EQUAL
6938: PUSH
6939: LD_VAR 0 1
6943: PPUSH
6944: CALL_OW 262
6948: PUSH
6949: LD_INT 3
6951: NONEQUAL
6952: AND
6953: ST_TO_ADDR
// status = 1 ;
6954: LD_ADDR_VAR 0 12
6958: PUSH
6959: LD_INT 1
6961: ST_TO_ADDR
// tmp_path = [ 1 , path [ 1 ] ] ;
6962: LD_ADDR_VAR 0 11
6966: PUSH
6967: LD_INT 1
6969: PUSH
6970: LD_VAR 0 2
6974: PUSH
6975: LD_INT 1
6977: ARRAY
6978: PUSH
6979: EMPTY
6980: LIST
6981: LIST
6982: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6983: LD_INT 35
6985: PPUSH
6986: CALL_OW 67
// if need_refuel and GetFuel ( unit ) < 20 then
6990: LD_VAR 0 18
6994: PUSH
6995: LD_VAR 0 1
6999: PPUSH
7000: CALL_OW 261
7004: PUSH
7005: LD_INT 20
7007: LESS
7008: AND
7009: IFFALSE 7202
// begin station := FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_oil_mine ] , [ f_btype , b_factory ] ] ] ) ;
7011: LD_ADDR_VAR 0 10
7015: PUSH
7016: LD_INT 22
7018: PUSH
7019: LD_VAR 0 1
7023: PPUSH
7024: CALL_OW 255
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: PUSH
7033: LD_INT 2
7035: PUSH
7036: LD_INT 30
7038: PUSH
7039: LD_INT 0
7041: PUSH
7042: EMPTY
7043: LIST
7044: LIST
7045: PUSH
7046: LD_INT 30
7048: PUSH
7049: LD_INT 1
7051: PUSH
7052: EMPTY
7053: LIST
7054: LIST
7055: PUSH
7056: LD_INT 30
7058: PUSH
7059: LD_INT 29
7061: PUSH
7062: EMPTY
7063: LIST
7064: LIST
7065: PUSH
7066: LD_INT 30
7068: PUSH
7069: LD_INT 3
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: LIST
7080: LIST
7081: LIST
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: PPUSH
7087: CALL_OW 69
7091: ST_TO_ADDR
// if not station then
7092: LD_VAR 0 10
7096: NOT
7097: IFFALSE 7113
// begin SetFuel ( unit , 40 ) ;
7099: LD_VAR 0 1
7103: PPUSH
7104: LD_INT 40
7106: PPUSH
7107: CALL_OW 240
// continue ;
7111: GO 6983
// end ; status := 6 ;
7113: LD_ADDR_VAR 0 12
7117: PUSH
7118: LD_INT 6
7120: ST_TO_ADDR
// station := NearestUnitToUnit ( station , unit ) ;
7121: LD_ADDR_VAR 0 10
7125: PUSH
7126: LD_VAR 0 10
7130: PPUSH
7131: LD_VAR 0 1
7135: PPUSH
7136: CALL_OW 74
7140: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7141: LD_INT 35
7143: PPUSH
7144: CALL_OW 67
// ComMoveUnit ( unit , station ) ;
7148: LD_VAR 0 1
7152: PPUSH
7153: LD_VAR 0 10
7157: PPUSH
7158: CALL_OW 112
// until GetDistUnits ( unit , station ) < 6 ;
7162: LD_VAR 0 1
7166: PPUSH
7167: LD_VAR 0 10
7171: PPUSH
7172: CALL_OW 296
7176: PUSH
7177: LD_INT 6
7179: LESS
7180: IFFALSE 7141
// SetFuel ( unit , 100 ) ;
7182: LD_VAR 0 1
7186: PPUSH
7187: LD_INT 100
7189: PPUSH
7190: CALL_OW 240
// status := 5 ;
7194: LD_ADDR_VAR 0 12
7198: PUSH
7199: LD_INT 5
7201: ST_TO_ADDR
// end ; if status = 1 then
7202: LD_VAR 0 12
7206: PUSH
7207: LD_INT 1
7209: EQUAL
7210: IFFALSE 7586
// begin enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] , [ f_dist , unit , spot_dist ] , [ f_see , 1 ] ] ) ;
7212: LD_ADDR_VAR 0 13
7216: PUSH
7217: LD_INT 81
7219: PUSH
7220: LD_VAR 0 1
7224: PPUSH
7225: CALL_OW 255
7229: PUSH
7230: EMPTY
7231: LIST
7232: LIST
7233: PUSH
7234: LD_INT 3
7236: PUSH
7237: LD_INT 21
7239: PUSH
7240: LD_INT 3
7242: PUSH
7243: EMPTY
7244: LIST
7245: LIST
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: PUSH
7251: LD_INT 91
7253: PUSH
7254: LD_VAR 0 1
7258: PUSH
7259: LD_VAR 0 15
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: LIST
7268: PUSH
7269: LD_INT 101
7271: PUSH
7272: LD_INT 1
7274: PUSH
7275: EMPTY
7276: LIST
7277: LIST
7278: PUSH
7279: EMPTY
7280: LIST
7281: LIST
7282: LIST
7283: LIST
7284: PPUSH
7285: CALL_OW 69
7289: ST_TO_ADDR
// for i in enemy do
7290: LD_ADDR_VAR 0 5
7294: PUSH
7295: LD_VAR 0 13
7299: PUSH
7300: FOR_IN
7301: IFFALSE 7332
// if IsInvisible ( i ) then
7303: LD_VAR 0 5
7307: PPUSH
7308: CALL_OW 571
7312: IFFALSE 7330
// enemy := enemy diff i ;
7314: LD_ADDR_VAR 0 13
7318: PUSH
7319: LD_VAR 0 13
7323: PUSH
7324: LD_VAR 0 5
7328: DIFF
7329: ST_TO_ADDR
7330: GO 7300
7332: POP
7333: POP
// if enemy then
7334: LD_VAR 0 13
7338: IFFALSE 7388
// begin SetRememberedX ( unit , GetX ( unit ) ) ;
7340: LD_VAR 0 1
7344: PPUSH
7345: LD_VAR 0 1
7349: PPUSH
7350: CALL_OW 250
7354: PPUSH
7355: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
7359: LD_VAR 0 1
7363: PPUSH
7364: LD_VAR 0 1
7368: PPUSH
7369: CALL_OW 251
7373: PPUSH
7374: CALL_OW 232
// status = 2 ;
7378: LD_ADDR_VAR 0 12
7382: PUSH
7383: LD_INT 2
7385: ST_TO_ADDR
// end else
7386: GO 7586
// begin if IsAt ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) or not HasTask ( unit ) then
7388: LD_VAR 0 1
7392: PPUSH
7393: LD_VAR 0 11
7397: PUSH
7398: LD_INT 2
7400: ARRAY
7401: PUSH
7402: LD_INT 1
7404: ARRAY
7405: PPUSH
7406: LD_VAR 0 11
7410: PUSH
7411: LD_INT 2
7413: ARRAY
7414: PUSH
7415: LD_INT 2
7417: ARRAY
7418: PPUSH
7419: CALL_OW 307
7423: PUSH
7424: LD_VAR 0 1
7428: PPUSH
7429: CALL_OW 314
7433: NOT
7434: OR
7435: IFFALSE 7586
// begin wait ( 0 0$2 ) ;
7437: LD_INT 70
7439: PPUSH
7440: CALL_OW 67
// if tmp_path [ 1 ] + 1 > path then
7444: LD_VAR 0 11
7448: PUSH
7449: LD_INT 1
7451: ARRAY
7452: PUSH
7453: LD_INT 1
7455: PLUS
7456: PUSH
7457: LD_VAR 0 2
7461: GREATER
7462: IFFALSE 7487
// tmp_path := Replace ( tmp_path , 1 , 1 ) else
7464: LD_ADDR_VAR 0 11
7468: PUSH
7469: LD_VAR 0 11
7473: PPUSH
7474: LD_INT 1
7476: PPUSH
7477: LD_INT 1
7479: PPUSH
7480: CALL_OW 1
7484: ST_TO_ADDR
7485: GO 7518
// tmp_path := Replace ( tmp_path , 1 , tmp_path [ 1 ] + 1 ) ;
7487: LD_ADDR_VAR 0 11
7491: PUSH
7492: LD_VAR 0 11
7496: PPUSH
7497: LD_INT 1
7499: PPUSH
7500: LD_VAR 0 11
7504: PUSH
7505: LD_INT 1
7507: ARRAY
7508: PUSH
7509: LD_INT 1
7511: PLUS
7512: PPUSH
7513: CALL_OW 1
7517: ST_TO_ADDR
// tmp_path := Replace ( tmp_path , 2 , path [ tmp_path [ 1 ] ] ) ;
7518: LD_ADDR_VAR 0 11
7522: PUSH
7523: LD_VAR 0 11
7527: PPUSH
7528: LD_INT 2
7530: PPUSH
7531: LD_VAR 0 2
7535: PUSH
7536: LD_VAR 0 11
7540: PUSH
7541: LD_INT 1
7543: ARRAY
7544: ARRAY
7545: PPUSH
7546: CALL_OW 1
7550: ST_TO_ADDR
// ComAgressiveMove ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) ;
7551: LD_VAR 0 1
7555: PPUSH
7556: LD_VAR 0 11
7560: PUSH
7561: LD_INT 2
7563: ARRAY
7564: PUSH
7565: LD_INT 1
7567: ARRAY
7568: PPUSH
7569: LD_VAR 0 11
7573: PUSH
7574: LD_INT 2
7576: ARRAY
7577: PUSH
7578: LD_INT 2
7580: ARRAY
7581: PPUSH
7582: CALL_OW 114
// end ; end ; end ; if status = 2 then
7586: LD_VAR 0 12
7590: PUSH
7591: LD_INT 2
7593: EQUAL
7594: IFFALSE 7815
// begin if GetLives ( unit ) < 650 and safe_place then
7596: LD_VAR 0 1
7600: PPUSH
7601: CALL_OW 256
7605: PUSH
7606: LD_INT 650
7608: LESS
7609: PUSH
7610: LD_VAR 0 16
7614: AND
7615: IFFALSE 7627
// begin status = 3 ;
7617: LD_ADDR_VAR 0 12
7621: PUSH
7622: LD_INT 3
7624: ST_TO_ADDR
// continue ;
7625: GO 6983
// end ; x := GetRememberedX ( unit ) ;
7627: LD_ADDR_VAR 0 6
7631: PUSH
7632: LD_VAR 0 1
7636: PPUSH
7637: CALL_OW 252
7641: ST_TO_ADDR
// y := GetRememberedY ( unit ) ;
7642: LD_ADDR_VAR 0 7
7646: PUSH
7647: LD_VAR 0 1
7651: PPUSH
7652: CALL_OW 253
7656: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_distxy , x , y , spot_dist ] , [ f_see , 1 ] ] ) ;
7657: LD_ADDR_VAR 0 13
7661: PUSH
7662: LD_INT 81
7664: PUSH
7665: LD_VAR 0 1
7669: PPUSH
7670: CALL_OW 255
7674: PUSH
7675: EMPTY
7676: LIST
7677: LIST
7678: PUSH
7679: LD_INT 92
7681: PUSH
7682: LD_VAR 0 6
7686: PUSH
7687: LD_VAR 0 7
7691: PUSH
7692: LD_VAR 0 15
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: LIST
7701: LIST
7702: PUSH
7703: LD_INT 101
7705: PUSH
7706: LD_INT 1
7708: PUSH
7709: EMPTY
7710: LIST
7711: LIST
7712: PUSH
7713: EMPTY
7714: LIST
7715: LIST
7716: LIST
7717: PPUSH
7718: CALL_OW 69
7722: ST_TO_ADDR
// if enemy then
7723: LD_VAR 0 13
7727: IFFALSE 7798
// begin e := NearestUnitToUnit ( enemy , unit ) ;
7729: LD_ADDR_VAR 0 14
7733: PUSH
7734: LD_VAR 0 13
7738: PPUSH
7739: LD_VAR 0 1
7743: PPUSH
7744: CALL_OW 74
7748: ST_TO_ADDR
// if GetDistUnitXY ( e , x , y ) < spot_dist + chase_range then
7749: LD_VAR 0 14
7753: PPUSH
7754: LD_VAR 0 6
7758: PPUSH
7759: LD_VAR 0 7
7763: PPUSH
7764: CALL_OW 297
7768: PUSH
7769: LD_VAR 0 15
7773: PUSH
7774: LD_VAR 0 17
7778: PLUS
7779: LESS
7780: IFFALSE 7796
// ComAttackUnit ( unit , e ) ;
7782: LD_VAR 0 1
7786: PPUSH
7787: LD_VAR 0 14
7791: PPUSH
7792: CALL_OW 115
// end else
7796: GO 7815
// begin ComStop ( unit ) ;
7798: LD_VAR 0 1
7802: PPUSH
7803: CALL_OW 141
// status = 5 ;
7807: LD_ADDR_VAR 0 12
7811: PUSH
7812: LD_INT 5
7814: ST_TO_ADDR
// end ; end ; if status = 3 and safe_place then
7815: LD_VAR 0 12
7819: PUSH
7820: LD_INT 3
7822: EQUAL
7823: PUSH
7824: LD_VAR 0 16
7828: AND
7829: IFFALSE 7915
// begin repeat ComMoveXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) ;
7831: LD_VAR 0 1
7835: PPUSH
7836: LD_VAR 0 16
7840: PUSH
7841: LD_INT 1
7843: ARRAY
7844: PPUSH
7845: LD_VAR 0 16
7849: PUSH
7850: LD_INT 2
7852: ARRAY
7853: PPUSH
7854: CALL_OW 111
// wait ( 0 0$1 ) ;
7858: LD_INT 35
7860: PPUSH
7861: CALL_OW 67
// until GetDistUnitXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) < 4 ;
7865: LD_VAR 0 1
7869: PPUSH
7870: LD_VAR 0 16
7874: PUSH
7875: LD_INT 1
7877: ARRAY
7878: PPUSH
7879: LD_VAR 0 16
7883: PUSH
7884: LD_INT 2
7886: ARRAY
7887: PPUSH
7888: CALL_OW 297
7892: PUSH
7893: LD_INT 4
7895: LESS
7896: IFFALSE 7831
// ComStop ( unit ) ;
7898: LD_VAR 0 1
7902: PPUSH
7903: CALL_OW 141
// status = 4 ;
7907: LD_ADDR_VAR 0 12
7911: PUSH
7912: LD_INT 4
7914: ST_TO_ADDR
// end ; if status = 4 then
7915: LD_VAR 0 12
7919: PUSH
7920: LD_INT 4
7922: EQUAL
7923: IFFALSE 7955
// begin repeat wait ( 0 0$1 ) ;
7925: LD_INT 35
7927: PPUSH
7928: CALL_OW 67
// until GetLives ( unit ) = 1000 ;
7932: LD_VAR 0 1
7936: PPUSH
7937: CALL_OW 256
7941: PUSH
7942: LD_INT 1000
7944: EQUAL
7945: IFFALSE 7925
// status = 5 ;
7947: LD_ADDR_VAR 0 12
7951: PUSH
7952: LD_INT 5
7954: ST_TO_ADDR
// end ; if status = 5 then
7955: LD_VAR 0 12
7959: PUSH
7960: LD_INT 5
7962: EQUAL
7963: IFFALSE 8245
// begin p := 999 ;
7965: LD_ADDR_VAR 0 9
7969: PUSH
7970: LD_INT 999
7972: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ] ;
7973: LD_ADDR_VAR 0 14
7977: PUSH
7978: LD_VAR 0 11
7982: PUSH
7983: LD_INT 2
7985: ARRAY
7986: PUSH
7987: LD_INT 1
7989: ARRAY
7990: PUSH
7991: LD_VAR 0 11
7995: PUSH
7996: LD_INT 2
7998: ARRAY
7999: PUSH
8000: LD_INT 2
8002: ARRAY
8003: PUSH
8004: EMPTY
8005: LIST
8006: LIST
8007: ST_TO_ADDR
// c := 1 ;
8008: LD_ADDR_VAR 0 8
8012: PUSH
8013: LD_INT 1
8015: ST_TO_ADDR
// for i = 1 to tmp_path [ 2 ] div 2 do
8016: LD_ADDR_VAR 0 5
8020: PUSH
8021: DOUBLE
8022: LD_INT 1
8024: DEC
8025: ST_TO_ADDR
8026: LD_VAR 0 11
8030: PUSH
8031: LD_INT 2
8033: ARRAY
8034: PUSH
8035: LD_INT 2
8037: DIV
8038: PUSH
8039: FOR_TO
8040: IFFALSE 8172
// begin x := GetDistUnitXY ( unit , tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ) ;
8042: LD_ADDR_VAR 0 6
8046: PUSH
8047: LD_VAR 0 1
8051: PPUSH
8052: LD_VAR 0 11
8056: PUSH
8057: LD_INT 2
8059: ARRAY
8060: PUSH
8061: LD_VAR 0 8
8065: ARRAY
8066: PPUSH
8067: LD_VAR 0 11
8071: PUSH
8072: LD_INT 2
8074: ARRAY
8075: PUSH
8076: LD_VAR 0 8
8080: PUSH
8081: LD_INT 1
8083: PLUS
8084: ARRAY
8085: PPUSH
8086: CALL_OW 297
8090: ST_TO_ADDR
// if x < p then
8091: LD_VAR 0 6
8095: PUSH
8096: LD_VAR 0 9
8100: LESS
8101: IFFALSE 8156
// begin p := x ;
8103: LD_ADDR_VAR 0 9
8107: PUSH
8108: LD_VAR 0 6
8112: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ] ;
8113: LD_ADDR_VAR 0 14
8117: PUSH
8118: LD_VAR 0 11
8122: PUSH
8123: LD_INT 2
8125: ARRAY
8126: PUSH
8127: LD_VAR 0 8
8131: ARRAY
8132: PUSH
8133: LD_VAR 0 11
8137: PUSH
8138: LD_INT 2
8140: ARRAY
8141: PUSH
8142: LD_VAR 0 8
8146: PUSH
8147: LD_INT 1
8149: PLUS
8150: ARRAY
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: ST_TO_ADDR
// end ; c = c + 2 ;
8156: LD_ADDR_VAR 0 8
8160: PUSH
8161: LD_VAR 0 8
8165: PUSH
8166: LD_INT 2
8168: PLUS
8169: ST_TO_ADDR
// end ;
8170: GO 8039
8172: POP
8173: POP
// repeat ComMoveXY ( unit , e [ 1 ] , e [ 2 ] ) ;
8174: LD_VAR 0 1
8178: PPUSH
8179: LD_VAR 0 14
8183: PUSH
8184: LD_INT 1
8186: ARRAY
8187: PPUSH
8188: LD_VAR 0 14
8192: PUSH
8193: LD_INT 2
8195: ARRAY
8196: PPUSH
8197: CALL_OW 111
// wait ( 0 0$1 ) ;
8201: LD_INT 35
8203: PPUSH
8204: CALL_OW 67
// until IsAt ( unit , e [ 1 ] , e [ 2 ] ) ;
8208: LD_VAR 0 1
8212: PPUSH
8213: LD_VAR 0 14
8217: PUSH
8218: LD_INT 1
8220: ARRAY
8221: PPUSH
8222: LD_VAR 0 14
8226: PUSH
8227: LD_INT 2
8229: ARRAY
8230: PPUSH
8231: CALL_OW 307
8235: IFFALSE 8174
// status = 1 ;
8237: LD_ADDR_VAR 0 12
8241: PUSH
8242: LD_INT 1
8244: ST_TO_ADDR
// end ; until IsDead ( unit ) ;
8245: LD_VAR 0 1
8249: PPUSH
8250: CALL_OW 301
8254: IFFALSE 6983
// end ;
8256: LD_VAR 0 4
8260: RET
// export function Talk ( units , type , sequence , sex , class , id , order_id ) ; var i , unit , tmp , unit_id , dialog_id , sex_id , class_id ; begin
8261: LD_INT 0
8263: PPUSH
8264: PPUSH
8265: PPUSH
8266: PPUSH
8267: PPUSH
8268: PPUSH
8269: PPUSH
8270: PPUSH
// if not units or not sequence or not sex in [ sex_male , sex_female , 0 ] or not id or not order_id then
8271: LD_VAR 0 1
8275: NOT
8276: PUSH
8277: LD_VAR 0 3
8281: NOT
8282: OR
8283: PUSH
8284: LD_VAR 0 4
8288: PUSH
8289: LD_INT 1
8291: PUSH
8292: LD_INT 2
8294: PUSH
8295: LD_INT 0
8297: PUSH
8298: EMPTY
8299: LIST
8300: LIST
8301: LIST
8302: IN
8303: NOT
8304: OR
8305: PUSH
8306: LD_VAR 0 6
8310: NOT
8311: OR
8312: PUSH
8313: LD_VAR 0 7
8317: NOT
8318: OR
8319: IFFALSE 8323
// exit ;
8321: GO 8714
// sex_id :=  ;
8323: LD_ADDR_VAR 0 14
8327: PUSH
8328: LD_STRING 
8330: ST_TO_ADDR
// case class of 1 :
8331: LD_VAR 0 5
8335: PUSH
8336: LD_INT 1
8338: DOUBLE
8339: EQUAL
8340: IFTRUE 8344
8342: GO 8355
8344: POP
// class_id := Sol ; 2 :
8345: LD_ADDR_VAR 0 15
8349: PUSH
8350: LD_STRING Sol
8352: ST_TO_ADDR
8353: GO 8413
8355: LD_INT 2
8357: DOUBLE
8358: EQUAL
8359: IFTRUE 8363
8361: GO 8374
8363: POP
// class_id := Eng ; 3 :
8364: LD_ADDR_VAR 0 15
8368: PUSH
8369: LD_STRING Eng
8371: ST_TO_ADDR
8372: GO 8413
8374: LD_INT 3
8376: DOUBLE
8377: EQUAL
8378: IFTRUE 8382
8380: GO 8393
8382: POP
// class_id := Mech ; 4 :
8383: LD_ADDR_VAR 0 15
8387: PUSH
8388: LD_STRING Mech
8390: ST_TO_ADDR
8391: GO 8413
8393: LD_INT 4
8395: DOUBLE
8396: EQUAL
8397: IFTRUE 8401
8399: GO 8412
8401: POP
// class_id := Sci ; end ;
8402: LD_ADDR_VAR 0 15
8406: PUSH
8407: LD_STRING Sci
8409: ST_TO_ADDR
8410: GO 8413
8412: POP
// tmp := UnitFilter ( units , [ f_class , class ] ) ;
8413: LD_ADDR_VAR 0 11
8417: PUSH
8418: LD_VAR 0 1
8422: PPUSH
8423: LD_INT 25
8425: PUSH
8426: LD_VAR 0 5
8430: PUSH
8431: EMPTY
8432: LIST
8433: LIST
8434: PPUSH
8435: CALL_OW 72
8439: ST_TO_ADDR
// if tmp then
8440: LD_VAR 0 11
8444: IFFALSE 8456
// units := tmp ;
8446: LD_ADDR_VAR 0 1
8450: PUSH
8451: LD_VAR 0 11
8455: ST_TO_ADDR
// if sex then
8456: LD_VAR 0 4
8460: IFFALSE 8516
// begin if sex = sex_female then
8462: LD_VAR 0 4
8466: PUSH
8467: LD_INT 2
8469: EQUAL
8470: IFFALSE 8480
// sex_id := F ;
8472: LD_ADDR_VAR 0 14
8476: PUSH
8477: LD_STRING F
8479: ST_TO_ADDR
// units := UnitFilter ( units , [ f_sex , sex ] ) ;
8480: LD_ADDR_VAR 0 1
8484: PUSH
8485: LD_VAR 0 1
8489: PPUSH
8490: LD_INT 26
8492: PUSH
8493: LD_VAR 0 4
8497: PUSH
8498: EMPTY
8499: LIST
8500: LIST
8501: PPUSH
8502: CALL_OW 72
8506: ST_TO_ADDR
// if not units then
8507: LD_VAR 0 1
8511: NOT
8512: IFFALSE 8516
// exit ;
8514: GO 8714
// end ; unit_id := id ;
8516: LD_ADDR_VAR 0 12
8520: PUSH
8521: LD_VAR 0 6
8525: ST_TO_ADDR
// if unit_id > units then
8526: LD_VAR 0 12
8530: PUSH
8531: LD_VAR 0 1
8535: GREATER
8536: IFFALSE 8546
// unit_id := 1 ;
8538: LD_ADDR_VAR 0 12
8542: PUSH
8543: LD_INT 1
8545: ST_TO_ADDR
// if not units [ unit_id ] then
8546: LD_VAR 0 1
8550: PUSH
8551: LD_VAR 0 12
8555: ARRAY
8556: NOT
8557: IFFALSE 8561
// exit ;
8559: GO 8714
// unit := units [ unit_id ] ;
8561: LD_ADDR_VAR 0 10
8565: PUSH
8566: LD_VAR 0 1
8570: PUSH
8571: LD_VAR 0 12
8575: ARRAY
8576: ST_TO_ADDR
// dialog_id := D & sequence & - & sex_id & class_id & id & - & order_id ;
8577: LD_ADDR_VAR 0 13
8581: PUSH
8582: LD_STRING D
8584: PUSH
8585: LD_VAR 0 3
8589: STR
8590: PUSH
8591: LD_STRING -
8593: STR
8594: PUSH
8595: LD_VAR 0 14
8599: STR
8600: PUSH
8601: LD_VAR 0 15
8605: STR
8606: PUSH
8607: LD_VAR 0 6
8611: STR
8612: PUSH
8613: LD_STRING -
8615: STR
8616: PUSH
8617: LD_VAR 0 7
8621: STR
8622: ST_TO_ADDR
// case type of 0 :
8623: LD_VAR 0 2
8627: PUSH
8628: LD_INT 0
8630: DOUBLE
8631: EQUAL
8632: IFTRUE 8636
8634: GO 8653
8636: POP
// Say ( unit , dialog_id ) ; 1 :
8637: LD_VAR 0 10
8641: PPUSH
8642: LD_VAR 0 13
8646: PPUSH
8647: CALL_OW 88
8651: GO 8704
8653: LD_INT 1
8655: DOUBLE
8656: EQUAL
8657: IFTRUE 8661
8659: GO 8678
8661: POP
// SayRadio ( unit , dialog_id ) ; 2 :
8662: LD_VAR 0 10
8666: PPUSH
8667: LD_VAR 0 13
8671: PPUSH
8672: CALL_OW 94
8676: GO 8704
8678: LD_INT 2
8680: DOUBLE
8681: EQUAL
8682: IFTRUE 8686
8684: GO 8703
8686: POP
// ForceSay ( unit , dialog_id ) ; end ;
8687: LD_VAR 0 10
8691: PPUSH
8692: LD_VAR 0 13
8696: PPUSH
8697: CALL_OW 91
8701: GO 8704
8703: POP
// result := unit ;
8704: LD_ADDR_VAR 0 8
8708: PUSH
8709: LD_VAR 0 10
8713: ST_TO_ADDR
// end ;
8714: LD_VAR 0 8
8718: RET
// export function IsNearbyEntrance ( unit , building , distance ) ; var i , entrance ; begin
8719: LD_INT 0
8721: PPUSH
8722: PPUSH
8723: PPUSH
// result := false ;
8724: LD_ADDR_VAR 0 4
8728: PUSH
8729: LD_INT 0
8731: ST_TO_ADDR
// if not unit or not building or IsInUnit ( unit ) then
8732: LD_VAR 0 1
8736: NOT
8737: PUSH
8738: LD_VAR 0 2
8742: NOT
8743: OR
8744: PUSH
8745: LD_VAR 0 1
8749: PPUSH
8750: CALL_OW 310
8754: OR
8755: IFFALSE 8759
// exit ;
8757: GO 8963
// if distance < 0 then
8759: LD_VAR 0 3
8763: PUSH
8764: LD_INT 0
8766: LESS
8767: IFFALSE 8777
// distance := 0 ;
8769: LD_ADDR_VAR 0 3
8773: PUSH
8774: LD_INT 0
8776: ST_TO_ADDR
// entrance := GetBuildingHexes ( GetBType ( building ) , GetX ( building ) , GetY ( building ) , GetDir ( building ) , GetNation ( building ) , 1 ) ;
8777: LD_ADDR_VAR 0 6
8781: PUSH
8782: LD_VAR 0 2
8786: PPUSH
8787: CALL_OW 266
8791: PPUSH
8792: LD_VAR 0 2
8796: PPUSH
8797: CALL_OW 250
8801: PPUSH
8802: LD_VAR 0 2
8806: PPUSH
8807: CALL_OW 251
8811: PPUSH
8812: LD_VAR 0 2
8816: PPUSH
8817: CALL_OW 254
8821: PPUSH
8822: LD_VAR 0 2
8826: PPUSH
8827: CALL_OW 248
8831: PPUSH
8832: LD_INT 1
8834: PPUSH
8835: CALL 46285 0 6
8839: ST_TO_ADDR
// if not entrance then
8840: LD_VAR 0 6
8844: NOT
8845: IFFALSE 8849
// exit ;
8847: GO 8963
// for i in entrance do
8849: LD_ADDR_VAR 0 5
8853: PUSH
8854: LD_VAR 0 6
8858: PUSH
8859: FOR_IN
8860: IFFALSE 8961
// begin if not distance then
8862: LD_VAR 0 3
8866: NOT
8867: IFFALSE 8912
// begin if IsAt ( unit , i [ 1 ] , i [ 2 ] ) then
8869: LD_VAR 0 1
8873: PPUSH
8874: LD_VAR 0 5
8878: PUSH
8879: LD_INT 1
8881: ARRAY
8882: PPUSH
8883: LD_VAR 0 5
8887: PUSH
8888: LD_INT 2
8890: ARRAY
8891: PPUSH
8892: CALL_OW 307
8896: IFFALSE 8910
// begin result := true ;
8898: LD_ADDR_VAR 0 4
8902: PUSH
8903: LD_INT 1
8905: ST_TO_ADDR
// exit ;
8906: POP
8907: POP
8908: GO 8963
// end ; end else
8910: GO 8959
// begin if GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) <= distance then
8912: LD_VAR 0 1
8916: PPUSH
8917: LD_VAR 0 5
8921: PUSH
8922: LD_INT 1
8924: ARRAY
8925: PPUSH
8926: LD_VAR 0 5
8930: PUSH
8931: LD_INT 2
8933: ARRAY
8934: PPUSH
8935: CALL_OW 297
8939: PUSH
8940: LD_VAR 0 3
8944: LESSEQUAL
8945: IFFALSE 8959
// begin result := true ;
8947: LD_ADDR_VAR 0 4
8951: PUSH
8952: LD_INT 1
8954: ST_TO_ADDR
// exit ;
8955: POP
8956: POP
8957: GO 8963
// end ; end ; end ;
8959: GO 8859
8961: POP
8962: POP
// end ;
8963: LD_VAR 0 4
8967: RET
// export function CanSpot ( unit , unit2 ) ; var i , building ; begin
8968: LD_INT 0
8970: PPUSH
8971: PPUSH
8972: PPUSH
// result := false ;
8973: LD_ADDR_VAR 0 3
8977: PUSH
8978: LD_INT 0
8980: ST_TO_ADDR
// if not unit or not unit2 or not IsOk ( unit ) or not IsOk ( unit2 ) then
8981: LD_VAR 0 1
8985: NOT
8986: PUSH
8987: LD_VAR 0 2
8991: NOT
8992: OR
8993: PUSH
8994: LD_VAR 0 1
8998: PPUSH
8999: CALL_OW 302
9003: NOT
9004: OR
9005: PUSH
9006: LD_VAR 0 2
9010: PPUSH
9011: CALL_OW 302
9015: NOT
9016: OR
9017: IFFALSE 9021
// exit ;
9019: GO 9182
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] ] ) , unit ) ) < 8 then
9021: LD_VAR 0 1
9025: PPUSH
9026: LD_INT 81
9028: PUSH
9029: LD_VAR 0 1
9033: PPUSH
9034: CALL_OW 255
9038: PUSH
9039: EMPTY
9040: LIST
9041: LIST
9042: PUSH
9043: LD_INT 3
9045: PUSH
9046: LD_INT 21
9048: PUSH
9049: LD_INT 3
9051: PUSH
9052: EMPTY
9053: LIST
9054: LIST
9055: PUSH
9056: EMPTY
9057: LIST
9058: LIST
9059: PUSH
9060: EMPTY
9061: LIST
9062: LIST
9063: PPUSH
9064: CALL_OW 69
9068: PPUSH
9069: LD_VAR 0 1
9073: PPUSH
9074: CALL_OW 74
9078: PPUSH
9079: CALL_OW 296
9083: PUSH
9084: LD_INT 8
9086: LESS
9087: IFFALSE 9091
// exit ;
9089: GO 9182
// building := IsInUnit ( unit2 ) ;
9091: LD_ADDR_VAR 0 5
9095: PUSH
9096: LD_VAR 0 2
9100: PPUSH
9101: CALL_OW 310
9105: ST_TO_ADDR
// if building then
9106: LD_VAR 0 5
9110: IFFALSE 9137
// result := IsNearbyEntrance ( unit , building , 2 ) else
9112: LD_ADDR_VAR 0 3
9116: PUSH
9117: LD_VAR 0 1
9121: PPUSH
9122: LD_VAR 0 5
9126: PPUSH
9127: LD_INT 2
9129: PPUSH
9130: CALL 8719 0 3
9134: ST_TO_ADDR
9135: GO 9182
// result := ( GetDistUnits ( unit , unit2 ) < 6 and See ( GetSide ( unit2 ) , unit ) ) ;
9137: LD_ADDR_VAR 0 3
9141: PUSH
9142: LD_VAR 0 1
9146: PPUSH
9147: LD_VAR 0 2
9151: PPUSH
9152: CALL_OW 296
9156: PUSH
9157: LD_INT 6
9159: LESS
9160: PUSH
9161: LD_VAR 0 2
9165: PPUSH
9166: CALL_OW 255
9170: PPUSH
9171: LD_VAR 0 1
9175: PPUSH
9176: CALL_OW 292
9180: AND
9181: ST_TO_ADDR
// end ;
9182: LD_VAR 0 3
9186: RET
// export function CreateNature ; var i , animal , nat_area ; begin
9187: LD_INT 0
9189: PPUSH
9190: PPUSH
9191: PPUSH
9192: PPUSH
// uc_side = 0 ;
9193: LD_ADDR_OWVAR 20
9197: PUSH
9198: LD_INT 0
9200: ST_TO_ADDR
// uc_nation = 0 ;
9201: LD_ADDR_OWVAR 21
9205: PUSH
9206: LD_INT 0
9208: ST_TO_ADDR
// nat_area := nature_area ;
9209: LD_ADDR_VAR 0 4
9213: PUSH
9214: LD_INT 24
9216: ST_TO_ADDR
// InitHc ;
9217: CALL_OW 19
// for i = 1 to 4 do
9221: LD_ADDR_VAR 0 2
9225: PUSH
9226: DOUBLE
9227: LD_INT 1
9229: DEC
9230: ST_TO_ADDR
9231: LD_INT 4
9233: PUSH
9234: FOR_TO
9235: IFFALSE 9282
// begin hc_class = 18 ;
9237: LD_ADDR_OWVAR 28
9241: PUSH
9242: LD_INT 18
9244: ST_TO_ADDR
// hc_gallery =  ;
9245: LD_ADDR_OWVAR 33
9249: PUSH
9250: LD_STRING 
9252: ST_TO_ADDR
// animal := CreateHuman ;
9253: LD_ADDR_VAR 0 3
9257: PUSH
9258: CALL_OW 44
9262: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9263: LD_VAR 0 3
9267: PPUSH
9268: LD_VAR 0 4
9272: PPUSH
9273: LD_INT 0
9275: PPUSH
9276: CALL_OW 49
// end ;
9280: GO 9234
9282: POP
9283: POP
// for i = 1 to 3 do
9284: LD_ADDR_VAR 0 2
9288: PUSH
9289: DOUBLE
9290: LD_INT 1
9292: DEC
9293: ST_TO_ADDR
9294: LD_INT 3
9296: PUSH
9297: FOR_TO
9298: IFFALSE 9392
// begin hc_class = class_apeman ;
9300: LD_ADDR_OWVAR 28
9304: PUSH
9305: LD_INT 12
9307: ST_TO_ADDR
// hc_gallery =  ;
9308: LD_ADDR_OWVAR 33
9312: PUSH
9313: LD_STRING 
9315: ST_TO_ADDR
// hc_agressivity = 0 ;
9316: LD_ADDR_OWVAR 35
9320: PUSH
9321: LD_INT 0
9323: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
9324: LD_ADDR_OWVAR 31
9328: PUSH
9329: LD_INT 1
9331: PPUSH
9332: LD_INT 3
9334: PPUSH
9335: CALL_OW 12
9339: PUSH
9340: LD_INT 1
9342: PPUSH
9343: LD_INT 3
9345: PPUSH
9346: CALL_OW 12
9350: PUSH
9351: LD_INT 0
9353: PUSH
9354: LD_INT 0
9356: PUSH
9357: EMPTY
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: ST_TO_ADDR
// animal := CreateHuman ;
9363: LD_ADDR_VAR 0 3
9367: PUSH
9368: CALL_OW 44
9372: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9373: LD_VAR 0 3
9377: PPUSH
9378: LD_VAR 0 4
9382: PPUSH
9383: LD_INT 0
9385: PPUSH
9386: CALL_OW 49
// end ;
9390: GO 9297
9392: POP
9393: POP
// for i = 1 to 3 do
9394: LD_ADDR_VAR 0 2
9398: PUSH
9399: DOUBLE
9400: LD_INT 1
9402: DEC
9403: ST_TO_ADDR
9404: LD_INT 3
9406: PUSH
9407: FOR_TO
9408: IFFALSE 9455
// begin hc_class = 13 ;
9410: LD_ADDR_OWVAR 28
9414: PUSH
9415: LD_INT 13
9417: ST_TO_ADDR
// hc_gallery =  ;
9418: LD_ADDR_OWVAR 33
9422: PUSH
9423: LD_STRING 
9425: ST_TO_ADDR
// animal := CreateHuman ;
9426: LD_ADDR_VAR 0 3
9430: PUSH
9431: CALL_OW 44
9435: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9436: LD_VAR 0 3
9440: PPUSH
9441: LD_VAR 0 4
9445: PPUSH
9446: LD_INT 0
9448: PPUSH
9449: CALL_OW 49
// end ;
9453: GO 9407
9455: POP
9456: POP
// for i = 1 to 3 do
9457: LD_ADDR_VAR 0 2
9461: PUSH
9462: DOUBLE
9463: LD_INT 1
9465: DEC
9466: ST_TO_ADDR
9467: LD_INT 3
9469: PUSH
9470: FOR_TO
9471: IFFALSE 9516
// begin hc_class = 20 ;
9473: LD_ADDR_OWVAR 28
9477: PUSH
9478: LD_INT 20
9480: ST_TO_ADDR
// hc_gallery =  ;
9481: LD_ADDR_OWVAR 33
9485: PUSH
9486: LD_STRING 
9488: ST_TO_ADDR
// animal := CreateHuman ;
9489: LD_ADDR_VAR 0 3
9493: PUSH
9494: CALL_OW 44
9498: ST_TO_ADDR
// PlaceUnitArea ( animal , lake_area , false ) ;
9499: LD_VAR 0 3
9503: PPUSH
9504: LD_INT 4
9506: PPUSH
9507: LD_INT 0
9509: PPUSH
9510: CALL_OW 49
// end ;
9514: GO 9470
9516: POP
9517: POP
// end ; end_of_file
9518: LD_VAR 0 1
9522: RET
// export function Action ; begin
9523: LD_INT 0
9525: PPUSH
// InGameOn ;
9526: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
9530: LD_EXP 14
9534: PPUSH
9535: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
9539: LD_EXP 14
9543: PPUSH
9544: LD_STRING D1-JMM-1
9546: PPUSH
9547: CALL_OW 88
// Say ( Roth , D1-Roth-1 ) ;
9551: LD_EXP 15
9555: PPUSH
9556: LD_STRING D1-Roth-1
9558: PPUSH
9559: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
9563: LD_EXP 14
9567: PPUSH
9568: LD_STRING D1-JMM-2
9570: PPUSH
9571: CALL_OW 88
// Say ( Roth , D1-Roth-2 ) ;
9575: LD_EXP 15
9579: PPUSH
9580: LD_STRING D1-Roth-2
9582: PPUSH
9583: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9587: LD_EXP 14
9591: PPUSH
9592: LD_STRING D1-JMM-3
9594: PPUSH
9595: CALL_OW 88
// Say ( Roth , D1-Roth-3 ) ;
9599: LD_EXP 15
9603: PPUSH
9604: LD_STRING D1-Roth-3
9606: PPUSH
9607: CALL_OW 88
// ComInvisible ( Roth ) ;
9611: LD_EXP 15
9615: PPUSH
9616: CALL_OW 152
// wait ( 0 0$1.3 ) ;
9620: LD_INT 46
9622: PPUSH
9623: CALL_OW 67
// Say ( JMM , D1-JMM-4 ) ;
9627: LD_EXP 14
9631: PPUSH
9632: LD_STRING D1-JMM-4
9634: PPUSH
9635: CALL_OW 88
// wait ( 0 0$0.3 ) ;
9639: LD_INT 10
9641: PPUSH
9642: CALL_OW 67
// ComTurnUnit ( Roth , JMM ) ;
9646: LD_EXP 15
9650: PPUSH
9651: LD_EXP 14
9655: PPUSH
9656: CALL_OW 119
// Say ( JMM , D1-JMM-4a ) ;
9660: LD_EXP 14
9664: PPUSH
9665: LD_STRING D1-JMM-4a
9667: PPUSH
9668: CALL_OW 88
// Say ( Roth , D1-Roth-4 ) ;
9672: LD_EXP 15
9676: PPUSH
9677: LD_STRING D1-Roth-4
9679: PPUSH
9680: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
9684: LD_EXP 14
9688: PPUSH
9689: LD_STRING D1-JMM-5
9691: PPUSH
9692: CALL_OW 88
// Say ( Roth , D1-Roth-5 ) ;
9696: LD_EXP 15
9700: PPUSH
9701: LD_STRING D1-Roth-5
9703: PPUSH
9704: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
9708: LD_EXP 14
9712: PPUSH
9713: LD_STRING D1-JMM-6
9715: PPUSH
9716: CALL_OW 88
// Say ( Roth , D1-Roth-6 ) ;
9720: LD_EXP 15
9724: PPUSH
9725: LD_STRING D1-Roth-6
9727: PPUSH
9728: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
9732: LD_EXP 14
9736: PPUSH
9737: LD_STRING D1-JMM-7
9739: PPUSH
9740: CALL_OW 88
// ComMoveXY ( Powell , GetX ( JMM ) , GetY ( JMM ) ) ;
9744: LD_EXP 16
9748: PPUSH
9749: LD_EXP 14
9753: PPUSH
9754: CALL_OW 250
9758: PPUSH
9759: LD_EXP 14
9763: PPUSH
9764: CALL_OW 251
9768: PPUSH
9769: CALL_OW 111
// Say ( Roth , D1-Roth-7 ) ;
9773: LD_EXP 15
9777: PPUSH
9778: LD_STRING D1-Roth-7
9780: PPUSH
9781: CALL_OW 88
// repeat wait ( 0 0$0.3 ) ;
9785: LD_INT 10
9787: PPUSH
9788: CALL_OW 67
// until GetDistUnits ( Powell , JMM ) < 6 ;
9792: LD_EXP 16
9796: PPUSH
9797: LD_EXP 14
9801: PPUSH
9802: CALL_OW 296
9806: PUSH
9807: LD_INT 6
9809: LESS
9810: IFFALSE 9785
// ComTurnUnit ( Powell , JMM ) ;
9812: LD_EXP 16
9816: PPUSH
9817: LD_EXP 14
9821: PPUSH
9822: CALL_OW 119
// Say ( Powell , D1-Pow-7 ) ;
9826: LD_EXP 16
9830: PPUSH
9831: LD_STRING D1-Pow-7
9833: PPUSH
9834: CALL_OW 88
// ComTurnUnit ( JMM , Powell ) ;
9838: LD_EXP 14
9842: PPUSH
9843: LD_EXP 16
9847: PPUSH
9848: CALL_OW 119
// ComTurnUnit ( Roth , Powell ) ;
9852: LD_EXP 15
9856: PPUSH
9857: LD_EXP 16
9861: PPUSH
9862: CALL_OW 119
// Say ( JMM , D1-JMM-8 ) ;
9866: LD_EXP 14
9870: PPUSH
9871: LD_STRING D1-JMM-8
9873: PPUSH
9874: CALL_OW 88
// Say ( Powell , D1-Pow-8 ) ;
9878: LD_EXP 16
9882: PPUSH
9883: LD_STRING D1-Pow-8
9885: PPUSH
9886: CALL_OW 88
// Say ( JMM , D1-JMM-9 ) ;
9890: LD_EXP 14
9894: PPUSH
9895: LD_STRING D1-JMM-9
9897: PPUSH
9898: CALL_OW 88
// ComMoveXY ( Powell , 124 , 61 ) ;
9902: LD_EXP 16
9906: PPUSH
9907: LD_INT 124
9909: PPUSH
9910: LD_INT 61
9912: PPUSH
9913: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9917: LD_INT 35
9919: PPUSH
9920: CALL_OW 67
// until GetDistUnits ( JMM , Powell ) > 6 ;
9924: LD_EXP 14
9928: PPUSH
9929: LD_EXP 16
9933: PPUSH
9934: CALL_OW 296
9938: PUSH
9939: LD_INT 6
9941: GREATER
9942: IFFALSE 9917
// SayRadio ( Powell , D1-Pow-9 ) ;
9944: LD_EXP 16
9948: PPUSH
9949: LD_STRING D1-Pow-9
9951: PPUSH
9952: CALL_OW 94
// RemoveUnit ( Powell ) ;
9956: LD_EXP 16
9960: PPUSH
9961: CALL_OW 64
// PlaceHumanInUnit ( Powell , ambar0 ) ;
9965: LD_EXP 16
9969: PPUSH
9970: LD_INT 18
9972: PPUSH
9973: CALL_OW 52
// if Joan and not Joan in selected then
9977: LD_EXP 36
9981: PUSH
9982: LD_EXP 36
9986: PUSH
9987: LD_EXP 3
9991: IN
9992: NOT
9993: AND
9994: IFFALSE 10008
// SayRadio ( Joan , D1-Joan-9 ) ;
9996: LD_EXP 36
10000: PPUSH
10001: LD_STRING D1-Joan-9
10003: PPUSH
10004: CALL_OW 94
// ComTurnUnit ( Roth , JMM ) ;
10008: LD_EXP 15
10012: PPUSH
10013: LD_EXP 14
10017: PPUSH
10018: CALL_OW 119
// ComTurnUnit ( JMM , Roth ) ;
10022: LD_EXP 14
10026: PPUSH
10027: LD_EXP 15
10031: PPUSH
10032: CALL_OW 119
// Say ( Roth , D1-Roth-9 ) ;
10036: LD_EXP 15
10040: PPUSH
10041: LD_STRING D1-Roth-9
10043: PPUSH
10044: CALL_OW 88
// Say ( JMM , D1-JMM-10 ) ;
10048: LD_EXP 14
10052: PPUSH
10053: LD_STRING D1-JMM-10
10055: PPUSH
10056: CALL_OW 88
// InGameOff ;
10060: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
10064: LD_STRING M1
10066: PPUSH
10067: CALL_OW 337
// if Difficulty < 3 then
10071: LD_OWVAR 67
10075: PUSH
10076: LD_INT 3
10078: LESS
10079: IFFALSE 10091
// ChangeSideFog ( 4 , 7 ) ;
10081: LD_INT 4
10083: PPUSH
10084: LD_INT 7
10086: PPUSH
10087: CALL_OW 343
// SaveForQuickRestart ;
10091: CALL_OW 22
// SetAttitude ( 7 , 1 , att_enemy , true ) ;
10095: LD_INT 7
10097: PPUSH
10098: LD_INT 1
10100: PPUSH
10101: LD_INT 2
10103: PPUSH
10104: LD_INT 1
10106: PPUSH
10107: CALL_OW 80
// wait ( 0 0$3 ) ;
10111: LD_INT 105
10113: PPUSH
10114: CALL_OW 67
// ComMoveXY ( Roth , 124 , 18 ) ;
10118: LD_EXP 15
10122: PPUSH
10123: LD_INT 124
10125: PPUSH
10126: LD_INT 18
10128: PPUSH
10129: CALL_OW 111
// AddComInvisible ( Roth ) ;
10133: LD_EXP 15
10137: PPUSH
10138: CALL_OW 212
// wait ( 0 0$30 ) ;
10142: LD_INT 1050
10144: PPUSH
10145: CALL_OW 67
// AddComWait ( Roth , 1 1$00 ) ;
10149: LD_EXP 15
10153: PPUSH
10154: LD_INT 2100
10156: PPUSH
10157: CALL_OW 202
// AddComMoveXY ( Roth , 156 , 20 ) ;
10161: LD_EXP 15
10165: PPUSH
10166: LD_INT 156
10168: PPUSH
10169: LD_INT 20
10171: PPUSH
10172: CALL_OW 171
// AddComMoveXY ( Roth , 178 , 42 ) ;
10176: LD_EXP 15
10180: PPUSH
10181: LD_INT 178
10183: PPUSH
10184: LD_INT 42
10186: PPUSH
10187: CALL_OW 171
// AddComInvisible ( Roth ) ;
10191: LD_EXP 15
10195: PPUSH
10196: CALL_OW 212
// end ;
10200: LD_VAR 0 1
10204: RET
// every 0 0$1 do var i , tmp ;
10205: GO 10207
10207: DISABLE
10208: LD_INT 0
10210: PPUSH
10211: PPUSH
// begin tmp := selected union friends ;
10212: LD_ADDR_VAR 0 2
10216: PUSH
10217: LD_EXP 3
10221: PUSH
10222: LD_EXP 4
10226: UNION
10227: ST_TO_ADDR
// if not tmp then
10228: LD_VAR 0 2
10232: NOT
10233: IFFALSE 10237
// exit ;
10235: GO 10309
// repeat wait ( 0 0$1 ) ;
10237: LD_INT 35
10239: PPUSH
10240: CALL_OW 67
// for i in tmp do
10244: LD_ADDR_VAR 0 1
10248: PUSH
10249: LD_VAR 0 2
10253: PUSH
10254: FOR_IN
10255: IFFALSE 10300
// if CanSpot ( JMM , i ) then
10257: LD_EXP 14
10261: PPUSH
10262: LD_VAR 0 1
10266: PPUSH
10267: CALL 8968 0 2
10271: IFFALSE 10298
// begin tmp := tmp diff i ;
10273: LD_ADDR_VAR 0 2
10277: PUSH
10278: LD_VAR 0 2
10282: PUSH
10283: LD_VAR 0 1
10287: DIFF
10288: ST_TO_ADDR
// Spot ( i ) ;
10289: LD_VAR 0 1
10293: PPUSH
10294: CALL 10312 0 1
// end ;
10298: GO 10254
10300: POP
10301: POP
// until not tmp ;
10302: LD_VAR 0 2
10306: NOT
10307: IFFALSE 10237
// end ;
10309: PPOPN 2
10311: END
// export function Spot ( unit ) ; var building , side , joined ; begin
10312: LD_INT 0
10314: PPUSH
10315: PPUSH
10316: PPUSH
10317: PPUSH
// if not unit or GetSide ( unit ) <> 4 or IsSleeping ( unit ) or not IsOk ( unit ) then
10318: LD_VAR 0 1
10322: NOT
10323: PUSH
10324: LD_VAR 0 1
10328: PPUSH
10329: CALL_OW 255
10333: PUSH
10334: LD_INT 4
10336: NONEQUAL
10337: OR
10338: PUSH
10339: LD_VAR 0 1
10343: PPUSH
10344: CALL_OW 555
10348: OR
10349: PUSH
10350: LD_VAR 0 1
10354: PPUSH
10355: CALL_OW 302
10359: NOT
10360: OR
10361: IFFALSE 10365
// exit ;
10363: GO 12254
// InGameOn ;
10365: CALL_OW 8
// side := GetSide ( JMM ) ;
10369: LD_ADDR_VAR 0 4
10373: PUSH
10374: LD_EXP 14
10378: PPUSH
10379: CALL_OW 255
10383: ST_TO_ADDR
// joined := false ;
10384: LD_ADDR_VAR 0 5
10388: PUSH
10389: LD_INT 0
10391: ST_TO_ADDR
// building := IsInUnit ( unit ) ;
10392: LD_ADDR_VAR 0 3
10396: PUSH
10397: LD_VAR 0 1
10401: PPUSH
10402: CALL_OW 310
10406: ST_TO_ADDR
// if building then
10407: LD_VAR 0 3
10411: IFFALSE 10470
// begin SetSide ( JMM , GetSide ( unit ) ) ;
10413: LD_EXP 14
10417: PPUSH
10418: LD_VAR 0 1
10422: PPUSH
10423: CALL_OW 255
10427: PPUSH
10428: CALL_OW 235
// ComEnterUnit ( JMM , building ) ;
10432: LD_EXP 14
10436: PPUSH
10437: LD_VAR 0 3
10441: PPUSH
10442: CALL_OW 120
// repeat wait ( 3 ) ;
10446: LD_INT 3
10448: PPUSH
10449: CALL_OW 67
// until IsInUnit ( JMM ) ;
10453: LD_EXP 14
10457: PPUSH
10458: CALL_OW 310
10462: IFFALSE 10446
// DialogueOn ;
10464: CALL_OW 6
// end else
10468: GO 10502
// begin ComTurnUnit ( JMM , unit ) ;
10470: LD_EXP 14
10474: PPUSH
10475: LD_VAR 0 1
10479: PPUSH
10480: CALL_OW 119
// ComTurnUnit ( unit , JMM ) ;
10484: LD_VAR 0 1
10488: PPUSH
10489: LD_EXP 14
10493: PPUSH
10494: CALL_OW 119
// DialogueOn ;
10498: CALL_OW 6
// end ; if unit = Joan then
10502: LD_VAR 0 1
10506: PUSH
10507: LD_EXP 36
10511: EQUAL
10512: IFFALSE 10622
// begin joined := true ;
10514: LD_ADDR_VAR 0 5
10518: PUSH
10519: LD_INT 1
10521: ST_TO_ADDR
// if Joan in selected then
10522: LD_EXP 36
10526: PUSH
10527: LD_EXP 3
10531: IN
10532: IFFALSE 10560
// begin Say ( Joan , D3-Joan-Joan-1 ) ;
10534: LD_EXP 36
10538: PPUSH
10539: LD_STRING D3-Joan-Joan-1
10541: PPUSH
10542: CALL_OW 88
// Say ( JMM , D3-Joan-JMM-1 ) ;
10546: LD_EXP 14
10550: PPUSH
10551: LD_STRING D3-Joan-JMM-1
10553: PPUSH
10554: CALL_OW 88
// end else
10558: GO 10620
// begin Say ( Joan , D4-Joan-Joan-1 ) ;
10560: LD_EXP 36
10564: PPUSH
10565: LD_STRING D4-Joan-Joan-1
10567: PPUSH
10568: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-1 ) ;
10572: LD_EXP 14
10576: PPUSH
10577: LD_STRING D4-Joan-JMM-1
10579: PPUSH
10580: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-2 ) ;
10584: LD_EXP 36
10588: PPUSH
10589: LD_STRING D4-Joan-Joan-2
10591: PPUSH
10592: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-2 ) ;
10596: LD_EXP 14
10600: PPUSH
10601: LD_STRING D4-Joan-JMM-2
10603: PPUSH
10604: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-3 ) ;
10608: LD_EXP 36
10612: PPUSH
10613: LD_STRING D4-Joan-Joan-3
10615: PPUSH
10616: CALL_OW 88
// end ; end else
10620: GO 12062
// if unit = Lisa then
10622: LD_VAR 0 1
10626: PUSH
10627: LD_EXP 23
10631: EQUAL
10632: IFFALSE 10824
// begin if Lisa in selected then
10634: LD_EXP 23
10638: PUSH
10639: LD_EXP 3
10643: IN
10644: IFFALSE 10757
// begin if GetSide ( Joan ) = 7 then
10646: LD_EXP 36
10650: PPUSH
10651: CALL_OW 255
10655: PUSH
10656: LD_INT 7
10658: EQUAL
10659: IFFALSE 10723
// begin Say ( Lisa , D3-LisaJ-Lisa-1 ) ;
10661: LD_EXP 23
10665: PPUSH
10666: LD_STRING D3-LisaJ-Lisa-1
10668: PPUSH
10669: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-1 ) ;
10673: LD_EXP 14
10677: PPUSH
10678: LD_STRING D3-LisaJ-JMM-1
10680: PPUSH
10681: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-2 ) ;
10685: LD_EXP 23
10689: PPUSH
10690: LD_STRING D3-LisaJ-Lisa-2
10692: PPUSH
10693: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-2 ) ;
10697: LD_EXP 14
10701: PPUSH
10702: LD_STRING D3-LisaJ-JMM-2
10704: PPUSH
10705: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-3 ) ;
10709: LD_EXP 23
10713: PPUSH
10714: LD_STRING D3-LisaJ-Lisa-3
10716: PPUSH
10717: CALL_OW 88
// end else
10721: GO 10755
// begin Say ( Lisa , D3-LisaL-Lisa-1 ) ;
10723: LD_EXP 23
10727: PPUSH
10728: LD_STRING D3-LisaL-Lisa-1
10730: PPUSH
10731: CALL_OW 88
// Say ( JMM , D3-LisaL-JMM-1 ) ;
10735: LD_EXP 14
10739: PPUSH
10740: LD_STRING D3-LisaL-JMM-1
10742: PPUSH
10743: CALL_OW 88
// joined := true ;
10747: LD_ADDR_VAR 0 5
10751: PUSH
10752: LD_INT 1
10754: ST_TO_ADDR
// end ; end else
10755: GO 10822
// begin if GetSide ( Joan ) = 7 then
10757: LD_EXP 36
10761: PPUSH
10762: CALL_OW 255
10766: PUSH
10767: LD_INT 7
10769: EQUAL
10770: IFFALSE 10810
// begin Say ( Lisa , D4-LisaJ-Lisa-1 ) ;
10772: LD_EXP 23
10776: PPUSH
10777: LD_STRING D4-LisaJ-Lisa-1
10779: PPUSH
10780: CALL_OW 88
// Say ( JMM , D4-LisaJ-JMM-1 ) ;
10784: LD_EXP 14
10788: PPUSH
10789: LD_STRING D4-LisaJ-JMM-1
10791: PPUSH
10792: CALL_OW 88
// Say ( Lisa , D4-LisaJ-Lisa-2 ) ;
10796: LD_EXP 23
10800: PPUSH
10801: LD_STRING D4-LisaJ-Lisa-2
10803: PPUSH
10804: CALL_OW 88
// end else
10808: GO 10822
// begin Say ( Lisa , D4-LisaL-Lisa-1 ) ;
10810: LD_EXP 23
10814: PPUSH
10815: LD_STRING D4-LisaL-Lisa-1
10817: PPUSH
10818: CALL_OW 88
// end ; end ; end else
10822: GO 12062
// if unit = Frank then
10824: LD_VAR 0 1
10828: PUSH
10829: LD_EXP 33
10833: EQUAL
10834: IFFALSE 10974
// begin joined := true ;
10836: LD_ADDR_VAR 0 5
10840: PUSH
10841: LD_INT 1
10843: ST_TO_ADDR
// if Frank in selected then
10844: LD_EXP 33
10848: PUSH
10849: LD_EXP 3
10853: IN
10854: IFFALSE 10924
// begin Say ( Frank , D3-Frank-Frank-1 ) ;
10856: LD_EXP 33
10860: PPUSH
10861: LD_STRING D3-Frank-Frank-1
10863: PPUSH
10864: CALL_OW 88
// Say ( JMM , D3-Frank-JMM-1 ) ;
10868: LD_EXP 14
10872: PPUSH
10873: LD_STRING D3-Frank-JMM-1
10875: PPUSH
10876: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-2 ) ;
10880: LD_EXP 33
10884: PPUSH
10885: LD_STRING D3-Frank-Frank-2
10887: PPUSH
10888: CALL_OW 88
// if reached_lab then
10892: LD_EXP 5
10896: IFFALSE 10922
// begin Say ( JMM , D3-Frank-JMM-2 ) ;
10898: LD_EXP 14
10902: PPUSH
10903: LD_STRING D3-Frank-JMM-2
10905: PPUSH
10906: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-3 ) ;
10910: LD_EXP 33
10914: PPUSH
10915: LD_STRING D3-Frank-Frank-3
10917: PPUSH
10918: CALL_OW 88
// end ; end else
10922: GO 10972
// begin Say ( Frank , D4-Frank-Frank-1 ) ;
10924: LD_EXP 33
10928: PPUSH
10929: LD_STRING D4-Frank-Frank-1
10931: PPUSH
10932: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-1 ) ;
10936: LD_EXP 14
10940: PPUSH
10941: LD_STRING D4-Frank-JMM-1
10943: PPUSH
10944: CALL_OW 88
// Say ( Frank , D4-Frank-Frank-2 ) ;
10948: LD_EXP 33
10952: PPUSH
10953: LD_STRING D4-Frank-Frank-2
10955: PPUSH
10956: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-2 ) ;
10960: LD_EXP 14
10964: PPUSH
10965: LD_STRING D4-Frank-JMM-2
10967: PPUSH
10968: CALL_OW 88
// end ; end else
10972: GO 12062
// if unit = Brown then
10974: LD_VAR 0 1
10978: PUSH
10979: LD_EXP 28
10983: EQUAL
10984: IFFALSE 11080
// begin if Brown in selected or gamma_commander = 2 then
10986: LD_EXP 28
10990: PUSH
10991: LD_EXP 3
10995: IN
10996: PUSH
10997: LD_EXP 10
11001: PUSH
11002: LD_INT 2
11004: EQUAL
11005: OR
11006: IFFALSE 11042
// begin Say ( Brown , D3-Soldier1-Sol1-1 ) ;
11008: LD_EXP 28
11012: PPUSH
11013: LD_STRING D3-Soldier1-Sol1-1
11015: PPUSH
11016: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
11020: LD_EXP 14
11024: PPUSH
11025: LD_STRING D3-Soldier1-JMM-1
11027: PPUSH
11028: CALL_OW 88
// joined := true ;
11032: LD_ADDR_VAR 0 5
11036: PUSH
11037: LD_INT 1
11039: ST_TO_ADDR
// end else
11040: GO 11078
// begin Say ( Brown , D4-Soldier2-Sol1-1 ) ;
11042: LD_EXP 28
11046: PPUSH
11047: LD_STRING D4-Soldier2-Sol1-1
11049: PPUSH
11050: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11054: LD_EXP 14
11058: PPUSH
11059: LD_STRING D4-Soldier1-JMM-1
11061: PPUSH
11062: CALL_OW 88
// Say ( Brown , D4-Soldier2-Sol1-2 ) ;
11066: LD_EXP 28
11070: PPUSH
11071: LD_STRING D4-Soldier2-Sol1-2
11073: PPUSH
11074: CALL_OW 88
// end ; end else
11078: GO 12062
// if unit = Donaldson then
11080: LD_VAR 0 1
11084: PUSH
11085: LD_EXP 24
11089: EQUAL
11090: IFFALSE 11186
// begin if Donaldson in selected or gamma_commander = 1 then
11092: LD_EXP 24
11096: PUSH
11097: LD_EXP 3
11101: IN
11102: PUSH
11103: LD_EXP 10
11107: PUSH
11108: LD_INT 1
11110: EQUAL
11111: OR
11112: IFFALSE 11148
// begin Say ( Donaldson , D3-Soldier2-FSol2-1 ) ;
11114: LD_EXP 24
11118: PPUSH
11119: LD_STRING D3-Soldier2-FSol2-1
11121: PPUSH
11122: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11126: LD_EXP 14
11130: PPUSH
11131: LD_STRING D3-Soldier2-JMM-1
11133: PPUSH
11134: CALL_OW 88
// joined := true ;
11138: LD_ADDR_VAR 0 5
11142: PUSH
11143: LD_INT 1
11145: ST_TO_ADDR
// end else
11146: GO 11184
// begin Say ( unit , D4-Soldier1-FSol1-1 ) ;
11148: LD_VAR 0 1
11152: PPUSH
11153: LD_STRING D4-Soldier1-FSol1-1
11155: PPUSH
11156: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11160: LD_EXP 14
11164: PPUSH
11165: LD_STRING D4-Soldier1-JMM-1
11167: PPUSH
11168: CALL_OW 88
// Say ( unit , D4-Soldier1-FSol1-2 ) ;
11172: LD_VAR 0 1
11176: PPUSH
11177: LD_STRING D4-Soldier1-FSol1-2
11179: PPUSH
11180: CALL_OW 88
// end ; end else
11184: GO 12062
// if unit = Cyrus then
11186: LD_VAR 0 1
11190: PUSH
11191: LD_EXP 26
11195: EQUAL
11196: IFFALSE 11270
// begin if Cyrus in selected then
11198: LD_EXP 26
11202: PUSH
11203: LD_EXP 3
11207: IN
11208: IFFALSE 11244
// begin Say ( Cyrus , D3-Cyrus-Cyrus-1 ) ;
11210: LD_EXP 26
11214: PPUSH
11215: LD_STRING D3-Cyrus-Cyrus-1
11217: PPUSH
11218: CALL_OW 88
// Say ( JMM , D3-Cyrus-JMM-1 ) ;
11222: LD_EXP 14
11226: PPUSH
11227: LD_STRING D3-Cyrus-JMM-1
11229: PPUSH
11230: CALL_OW 88
// joined := true ;
11234: LD_ADDR_VAR 0 5
11238: PUSH
11239: LD_INT 1
11241: ST_TO_ADDR
// end else
11242: GO 11268
// begin Say ( Cyrus , D4-Cyrus-Cyrus-1 ) ;
11244: LD_EXP 26
11248: PPUSH
11249: LD_STRING D4-Cyrus-Cyrus-1
11251: PPUSH
11252: CALL_OW 88
// Say ( JMM , D4-Cyrus-JMM-1 ) ;
11256: LD_EXP 14
11260: PPUSH
11261: LD_STRING D4-Cyrus-JMM-1
11263: PPUSH
11264: CALL_OW 88
// end ; end else
11268: GO 12062
// if unit = Bobby then
11270: LD_VAR 0 1
11274: PUSH
11275: LD_EXP 25
11279: EQUAL
11280: IFFALSE 11366
// begin if Bobby in selected then
11282: LD_EXP 25
11286: PUSH
11287: LD_EXP 3
11291: IN
11292: IFFALSE 11328
// begin Say ( Bobby , D3-Bobby-Bobby-1 ) ;
11294: LD_EXP 25
11298: PPUSH
11299: LD_STRING D3-Bobby-Bobby-1
11301: PPUSH
11302: CALL_OW 88
// Say ( JMM , D3-Bobby-JMM-1 ) ;
11306: LD_EXP 14
11310: PPUSH
11311: LD_STRING D3-Bobby-JMM-1
11313: PPUSH
11314: CALL_OW 88
// joined := true ;
11318: LD_ADDR_VAR 0 5
11322: PUSH
11323: LD_INT 1
11325: ST_TO_ADDR
// end else
11326: GO 11364
// begin Say ( Bobby , D4-Bobby-Bobby-1 ) ;
11328: LD_EXP 25
11332: PPUSH
11333: LD_STRING D4-Bobby-Bobby-1
11335: PPUSH
11336: CALL_OW 88
// Say ( JMM , D4-Bobby-JMM-1 ) ;
11340: LD_EXP 14
11344: PPUSH
11345: LD_STRING D4-Bobby-JMM-1
11347: PPUSH
11348: CALL_OW 88
// Say ( Bobby , D4-Bobby-Bobby-2 ) ;
11352: LD_EXP 25
11356: PPUSH
11357: LD_STRING D4-Bobby-Bobby-2
11359: PPUSH
11360: CALL_OW 88
// end ; end else
11364: GO 12062
// if unit = Cornel then
11366: LD_VAR 0 1
11370: PUSH
11371: LD_EXP 31
11375: EQUAL
11376: IFFALSE 11474
// begin if Cornel in selected then
11378: LD_EXP 31
11382: PUSH
11383: LD_EXP 3
11387: IN
11388: IFFALSE 11436
// begin Say ( Cornel , D3-Mark-Corn-1 ) ;
11390: LD_EXP 31
11394: PPUSH
11395: LD_STRING D3-Mark-Corn-1
11397: PPUSH
11398: CALL_OW 88
// Say ( JMM , D3-Mark-JMM-1 ) ;
11402: LD_EXP 14
11406: PPUSH
11407: LD_STRING D3-Mark-JMM-1
11409: PPUSH
11410: CALL_OW 88
// Say ( Cornel , D3-Mark-Corn-2 ) ;
11414: LD_EXP 31
11418: PPUSH
11419: LD_STRING D3-Mark-Corn-2
11421: PPUSH
11422: CALL_OW 88
// joined := true ;
11426: LD_ADDR_VAR 0 5
11430: PUSH
11431: LD_INT 1
11433: ST_TO_ADDR
// end else
11434: GO 11472
// begin Say ( Cornel , D4-Mark-Corn-1 ) ;
11436: LD_EXP 31
11440: PPUSH
11441: LD_STRING D4-Mark-Corn-1
11443: PPUSH
11444: CALL_OW 88
// Say ( JMM , D3-Joan-JMM-1 ) ;
11448: LD_EXP 14
11452: PPUSH
11453: LD_STRING D3-Joan-JMM-1
11455: PPUSH
11456: CALL_OW 88
// Say ( Cornel , D4-Mark-Corn-2 ) ;
11460: LD_EXP 31
11464: PPUSH
11465: LD_STRING D4-Mark-Corn-2
11467: PPUSH
11468: CALL_OW 88
// end ; end else
11472: GO 12062
// if unit = Gary then
11474: LD_VAR 0 1
11478: PUSH
11479: LD_EXP 32
11483: EQUAL
11484: IFFALSE 11568
// begin if Gary in selected then
11486: LD_EXP 32
11490: PUSH
11491: LD_EXP 3
11495: IN
11496: IFFALSE 11532
// begin Say ( Gary , D3-Gary-Gary-1 ) ;
11498: LD_EXP 32
11502: PPUSH
11503: LD_STRING D3-Gary-Gary-1
11505: PPUSH
11506: CALL_OW 88
// Say ( JMM , D3-Gary-JMM-1 ) ;
11510: LD_EXP 14
11514: PPUSH
11515: LD_STRING D3-Gary-JMM-1
11517: PPUSH
11518: CALL_OW 88
// joined := true ;
11522: LD_ADDR_VAR 0 5
11526: PUSH
11527: LD_INT 1
11529: ST_TO_ADDR
// end else
11530: GO 11566
// begin Say ( Gary , D4-Gary-Gary-1 ) ;
11532: LD_EXP 32
11536: PPUSH
11537: LD_STRING D4-Gary-Gary-1
11539: PPUSH
11540: CALL_OW 88
// SetSide ( Gary , 1 ) ;
11544: LD_EXP 32
11548: PPUSH
11549: LD_INT 1
11551: PPUSH
11552: CALL_OW 235
// DialogueOff ;
11556: CALL_OW 7
// InGameOff ;
11560: CALL_OW 9
// exit ;
11564: GO 12254
// end ; end else
11566: GO 12062
// if unit = Kikuchi then
11568: LD_VAR 0 1
11572: PUSH
11573: LD_EXP 34
11577: EQUAL
11578: IFFALSE 11662
// begin if Kikuchi in selected then
11580: LD_EXP 34
11584: PUSH
11585: LD_EXP 3
11589: IN
11590: IFFALSE 11626
// begin Say ( Kikuchi , D3-Yamako-Yam-1 ) ;
11592: LD_EXP 34
11596: PPUSH
11597: LD_STRING D3-Yamako-Yam-1
11599: PPUSH
11600: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11604: LD_EXP 14
11608: PPUSH
11609: LD_STRING D3-Soldier2-JMM-1
11611: PPUSH
11612: CALL_OW 88
// joined := true ;
11616: LD_ADDR_VAR 0 5
11620: PUSH
11621: LD_INT 1
11623: ST_TO_ADDR
// end else
11624: GO 11660
// begin Say ( Kikuchi , D4-Yamako-Yam-1 ) ;
11626: LD_EXP 34
11630: PPUSH
11631: LD_STRING D4-Yamako-Yam-1
11633: PPUSH
11634: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
11638: LD_EXP 34
11642: PPUSH
11643: LD_INT 1
11645: PPUSH
11646: CALL_OW 235
// DialogueOff ;
11650: CALL_OW 7
// InGameOff ;
11654: CALL_OW 9
// exit ;
11658: GO 12254
// end ; end else
11660: GO 12062
// if unit = Gladstone then
11662: LD_VAR 0 1
11666: PUSH
11667: LD_EXP 29
11671: EQUAL
11672: IFFALSE 11746
// begin if Gladstone in selected then
11674: LD_EXP 29
11678: PUSH
11679: LD_EXP 3
11683: IN
11684: IFFALSE 11720
// begin joined := true ;
11686: LD_ADDR_VAR 0 5
11690: PUSH
11691: LD_INT 1
11693: ST_TO_ADDR
// Say ( JMM , D3-Tim-JMM-1 ) ;
11694: LD_EXP 14
11698: PPUSH
11699: LD_STRING D3-Tim-JMM-1
11701: PPUSH
11702: CALL_OW 88
// Say ( Gladstone , D3-Tim-Glad-1 ) ;
11706: LD_EXP 29
11710: PPUSH
11711: LD_STRING D3-Tim-Glad-1
11713: PPUSH
11714: CALL_OW 88
// end else
11718: GO 11744
// begin Say ( JMM , D4-Tim-JMM-1 ) ;
11720: LD_EXP 14
11724: PPUSH
11725: LD_STRING D4-Tim-JMM-1
11727: PPUSH
11728: CALL_OW 88
// Say ( Gladstone , D4-Tim-Glad-1 ) ;
11732: LD_EXP 29
11736: PPUSH
11737: LD_STRING D4-Tim-Glad-1
11739: PPUSH
11740: CALL_OW 88
// end ; end else
11744: GO 12062
// if unit = Denis then
11746: LD_VAR 0 1
11750: PUSH
11751: LD_EXP 27
11755: EQUAL
11756: IFFALSE 11792
// begin joined := true ;
11758: LD_ADDR_VAR 0 5
11762: PUSH
11763: LD_INT 1
11765: ST_TO_ADDR
// Say ( Denis , D3-Denis-Den-1 ) ;
11766: LD_EXP 27
11770: PPUSH
11771: LD_STRING D3-Denis-Den-1
11773: PPUSH
11774: CALL_OW 88
// Say ( JMM , D3-Denis-JMM-1 ) ;
11778: LD_EXP 14
11782: PPUSH
11783: LD_STRING D3-Denis-JMM-1
11785: PPUSH
11786: CALL_OW 88
// end else
11790: GO 12062
// if unit = Simms then
11792: LD_VAR 0 1
11796: PUSH
11797: LD_EXP 35
11801: EQUAL
11802: IFFALSE 11838
// begin joined := true ;
11804: LD_ADDR_VAR 0 5
11808: PUSH
11809: LD_INT 1
11811: ST_TO_ADDR
// Say ( Simms , D3-Simms-Sim-1 ) ;
11812: LD_EXP 35
11816: PPUSH
11817: LD_STRING D3-Simms-Sim-1
11819: PPUSH
11820: CALL_OW 88
// Say ( JMM , D3-Simms-JMM-1 ) ;
11824: LD_EXP 14
11828: PPUSH
11829: LD_STRING D3-Simms-JMM-1
11831: PPUSH
11832: CALL_OW 88
// end else
11836: GO 12062
// if unit = DeltaDoctor then
11838: LD_VAR 0 1
11842: PUSH
11843: LD_EXP 37
11847: EQUAL
11848: IFFALSE 11884
// begin joined := true ;
11850: LD_ADDR_VAR 0 5
11854: PUSH
11855: LD_INT 1
11857: ST_TO_ADDR
// Say ( DeltaDoctor , D3-Soldier1-Sol1-1 ) ;
11858: LD_EXP 37
11862: PPUSH
11863: LD_STRING D3-Soldier1-Sol1-1
11865: PPUSH
11866: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
11870: LD_EXP 14
11874: PPUSH
11875: LD_STRING D3-Soldier1-JMM-1
11877: PPUSH
11878: CALL_OW 88
// end else
11882: GO 12062
// begin joined := unit in selected ;
11884: LD_ADDR_VAR 0 5
11888: PUSH
11889: LD_VAR 0 1
11893: PUSH
11894: LD_EXP 3
11898: IN
11899: ST_TO_ADDR
// if joined then
11900: LD_VAR 0 5
11904: IFFALSE 11973
// begin if GetSex ( unit ) = sex_male then
11906: LD_VAR 0 1
11910: PPUSH
11911: CALL_OW 258
11915: PUSH
11916: LD_INT 1
11918: EQUAL
11919: IFFALSE 11947
// begin Say ( unit , D3-Soldier1-Sol1-1 ) ;
11921: LD_VAR 0 1
11925: PPUSH
11926: LD_STRING D3-Soldier1-Sol1-1
11928: PPUSH
11929: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
11933: LD_EXP 14
11937: PPUSH
11938: LD_STRING D3-Soldier1-JMM-1
11940: PPUSH
11941: CALL_OW 88
// end else
11945: GO 11971
// begin Say ( unit , D3-Soldier2-FSol2-1 ) ;
11947: LD_VAR 0 1
11951: PPUSH
11952: LD_STRING D3-Soldier2-FSol2-1
11954: PPUSH
11955: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11959: LD_EXP 14
11963: PPUSH
11964: LD_STRING D3-Soldier2-JMM-1
11966: PPUSH
11967: CALL_OW 88
// end ; end else
11971: GO 12062
// begin if GetSex ( unit ) = sex_male then
11973: LD_VAR 0 1
11977: PPUSH
11978: CALL_OW 258
11982: PUSH
11983: LD_INT 1
11985: EQUAL
11986: IFFALSE 12026
// begin Say ( unit , D4-Soldier2-Sol1-1 ) ;
11988: LD_VAR 0 1
11992: PPUSH
11993: LD_STRING D4-Soldier2-Sol1-1
11995: PPUSH
11996: CALL_OW 88
// Say ( JMM , D4-Soldier2-JMM-1 ) ;
12000: LD_EXP 14
12004: PPUSH
12005: LD_STRING D4-Soldier2-JMM-1
12007: PPUSH
12008: CALL_OW 88
// Say ( unit , D4-Soldier2-Sol2-1 ) ;
12012: LD_VAR 0 1
12016: PPUSH
12017: LD_STRING D4-Soldier2-Sol2-1
12019: PPUSH
12020: CALL_OW 88
// end else
12024: GO 12062
// begin Say ( unit , D4-Soldier1-FSol1-1 ) ;
12026: LD_VAR 0 1
12030: PPUSH
12031: LD_STRING D4-Soldier1-FSol1-1
12033: PPUSH
12034: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
12038: LD_EXP 14
12042: PPUSH
12043: LD_STRING D4-Soldier1-JMM-1
12045: PPUSH
12046: CALL_OW 88
// Say ( unit , D4-Soldier1-FSol1-2 ) ;
12050: LD_VAR 0 1
12054: PPUSH
12055: LD_STRING D4-Soldier1-FSol1-2
12057: PPUSH
12058: CALL_OW 88
// end ; end ; end ; DialogueOff ;
12062: CALL_OW 7
// InGameOff ;
12066: CALL_OW 9
// if building then
12070: LD_VAR 0 3
12074: IFFALSE 12175
// begin SetSide ( JMM , side ) ;
12076: LD_EXP 14
12080: PPUSH
12081: LD_VAR 0 4
12085: PPUSH
12086: CALL_OW 235
// ComExitBuilding ( JMM ) ;
12090: LD_EXP 14
12094: PPUSH
12095: CALL_OW 122
// if joined then
12099: LD_VAR 0 5
12103: IFFALSE 12142
// begin SetSide ( unit , side ) ;
12105: LD_VAR 0 1
12109: PPUSH
12110: LD_VAR 0 4
12114: PPUSH
12115: CALL_OW 235
// SetSide ( building , 1 ) ;
12119: LD_VAR 0 3
12123: PPUSH
12124: LD_INT 1
12126: PPUSH
12127: CALL_OW 235
// ComExitBuilding ( unit ) ;
12131: LD_VAR 0 1
12135: PPUSH
12136: CALL_OW 122
// end else
12140: GO 12173
// begin wait ( 0 0$10 ) ;
12142: LD_INT 350
12144: PPUSH
12145: CALL_OW 67
// SetSide ( unit , 1 ) ;
12149: LD_VAR 0 1
12153: PPUSH
12154: LD_INT 1
12156: PPUSH
12157: CALL_OW 235
// SetSide ( building , 1 ) ;
12161: LD_VAR 0 3
12165: PPUSH
12166: LD_INT 1
12168: PPUSH
12169: CALL_OW 235
// end ; end else
12173: GO 12254
// begin ComStop ( [ JMM , unit ] ) ;
12175: LD_EXP 14
12179: PUSH
12180: LD_VAR 0 1
12184: PUSH
12185: EMPTY
12186: LIST
12187: LIST
12188: PPUSH
12189: CALL_OW 141
// if joined then
12193: LD_VAR 0 5
12197: IFFALSE 12215
// SetSide ( unit , side ) else
12199: LD_VAR 0 1
12203: PPUSH
12204: LD_VAR 0 4
12208: PPUSH
12209: CALL_OW 235
12213: GO 12254
// begin repeat wait ( 0 0$1 ) ;
12215: LD_INT 35
12217: PPUSH
12218: CALL_OW 67
// until GetDistUnits ( JMM , unit ) > 11 ;
12222: LD_EXP 14
12226: PPUSH
12227: LD_VAR 0 1
12231: PPUSH
12232: CALL_OW 296
12236: PUSH
12237: LD_INT 11
12239: GREATER
12240: IFFALSE 12215
// SetSide ( unit , 1 ) ;
12242: LD_VAR 0 1
12246: PPUSH
12247: LD_INT 1
12249: PPUSH
12250: CALL_OW 235
// end ; end ; end ;
12254: LD_VAR 0 2
12258: RET
// every 0 0$01 trigger IsInUnit ( JMM ) = amlab do
12259: LD_EXP 14
12263: PPUSH
12264: CALL_OW 310
12268: PUSH
12269: LD_INT 47
12271: EQUAL
12272: IFFALSE 12340
12274: GO 12276
12276: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
12277: LD_STRING M1a
12279: PPUSH
12280: CALL_OW 337
// SetTech ( tech_Soporific , 7 , state_researched ) ;
12284: LD_INT 13
12286: PPUSH
12287: LD_INT 7
12289: PPUSH
12290: LD_INT 2
12292: PPUSH
12293: CALL_OW 322
// SetTech ( tech_SpacAnom , 7 , state_researched ) ;
12297: LD_INT 29
12299: PPUSH
12300: LD_INT 7
12302: PPUSH
12303: LD_INT 2
12305: PPUSH
12306: CALL_OW 322
// SetClass ( JMM , class_bazooker ) ;
12310: LD_EXP 14
12314: PPUSH
12315: LD_INT 9
12317: PPUSH
12318: CALL_OW 336
// can_escape := true ;
12322: LD_ADDR_EXP 6
12326: PUSH
12327: LD_INT 1
12329: ST_TO_ADDR
// SetAreaMapShow ( escape_area , 1 ) ;
12330: LD_INT 19
12332: PPUSH
12333: LD_INT 1
12335: PPUSH
12336: CALL_OW 424
// end ;
12340: END
// every 0 0$1 trigger GetLives ( Powell ) < 999 do
12341: LD_EXP 16
12345: PPUSH
12346: CALL_OW 256
12350: PUSH
12351: LD_INT 999
12353: LESS
12354: IFFALSE 12405
12356: GO 12358
12358: DISABLE
// begin enable ;
12359: ENABLE
// if HexInfo ( 25 , 48 ) = Powell then
12360: LD_INT 25
12362: PPUSH
12363: LD_INT 48
12365: PPUSH
12366: CALL_OW 428
12370: PUSH
12371: LD_EXP 16
12375: EQUAL
12376: IFFALSE 12390
// begin RemoveUnit ( Powell ) ;
12378: LD_EXP 16
12382: PPUSH
12383: CALL_OW 64
// disable ;
12387: DISABLE
// end else
12388: GO 12405
// ComMoveXY ( Powell , 25 , 48 ) ;
12390: LD_EXP 16
12394: PPUSH
12395: LD_INT 25
12397: PPUSH
12398: LD_INT 48
12400: PPUSH
12401: CALL_OW 111
// end ;
12405: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do var i ;
12406: LD_INT 22
12408: PUSH
12409: LD_INT 4
12411: PUSH
12412: EMPTY
12413: LIST
12414: LIST
12415: PUSH
12416: LD_INT 21
12418: PUSH
12419: LD_INT 1
12421: PUSH
12422: EMPTY
12423: LIST
12424: LIST
12425: PUSH
12426: LD_INT 3
12428: PUSH
12429: LD_INT 24
12431: PUSH
12432: LD_INT 990
12434: PUSH
12435: EMPTY
12436: LIST
12437: LIST
12438: PUSH
12439: EMPTY
12440: LIST
12441: LIST
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: LIST
12447: PPUSH
12448: CALL_OW 69
12452: PUSH
12453: LD_EXP 15
12457: DIFF
12458: IFFALSE 12602
12460: GO 12462
12462: DISABLE
12463: LD_INT 0
12465: PPUSH
// begin enable ;
12466: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do
12467: LD_ADDR_VAR 0 1
12471: PUSH
12472: LD_INT 22
12474: PUSH
12475: LD_INT 4
12477: PUSH
12478: EMPTY
12479: LIST
12480: LIST
12481: PUSH
12482: LD_INT 21
12484: PUSH
12485: LD_INT 1
12487: PUSH
12488: EMPTY
12489: LIST
12490: LIST
12491: PUSH
12492: LD_INT 3
12494: PUSH
12495: LD_INT 24
12497: PUSH
12498: LD_INT 990
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: PUSH
12505: EMPTY
12506: LIST
12507: LIST
12508: PUSH
12509: EMPTY
12510: LIST
12511: LIST
12512: LIST
12513: PPUSH
12514: CALL_OW 69
12518: PUSH
12519: LD_EXP 15
12523: DIFF
12524: PUSH
12525: FOR_IN
12526: IFFALSE 12600
// begin ComFree ( i ) ;
12528: LD_VAR 0 1
12532: PPUSH
12533: CALL_OW 139
// SetSide ( i , 1 ) ;
12537: LD_VAR 0 1
12541: PPUSH
12542: LD_INT 1
12544: PPUSH
12545: CALL_OW 235
// if GetDistUnits ( i , JMM ) < 14 then
12549: LD_VAR 0 1
12553: PPUSH
12554: LD_EXP 14
12558: PPUSH
12559: CALL_OW 296
12563: PUSH
12564: LD_INT 14
12566: LESS
12567: IFFALSE 12598
// ComAgressiveMove ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
12569: LD_VAR 0 1
12573: PPUSH
12574: LD_EXP 14
12578: PPUSH
12579: CALL_OW 250
12583: PPUSH
12584: LD_EXP 14
12588: PPUSH
12589: CALL_OW 251
12593: PPUSH
12594: CALL_OW 114
// end ;
12598: GO 12525
12600: POP
12601: POP
// end ;
12602: PPOPN 1
12604: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var i ;
12605: LD_INT 22
12607: PUSH
12608: LD_INT 4
12610: PUSH
12611: EMPTY
12612: LIST
12613: LIST
12614: PUSH
12615: LD_INT 34
12617: PUSH
12618: LD_INT 12
12620: PUSH
12621: EMPTY
12622: LIST
12623: LIST
12624: PUSH
12625: EMPTY
12626: LIST
12627: LIST
12628: PPUSH
12629: CALL_OW 69
12633: IFFALSE 12715
12635: GO 12637
12637: DISABLE
12638: LD_INT 0
12640: PPUSH
// begin enable ;
12641: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do
12642: LD_ADDR_VAR 0 1
12646: PUSH
12647: LD_INT 22
12649: PUSH
12650: LD_INT 4
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: PUSH
12657: LD_INT 34
12659: PUSH
12660: LD_INT 12
12662: PUSH
12663: EMPTY
12664: LIST
12665: LIST
12666: PUSH
12667: EMPTY
12668: LIST
12669: LIST
12670: PPUSH
12671: CALL_OW 69
12675: PUSH
12676: FOR_IN
12677: IFFALSE 12713
// if GetDistUnits ( i , JMM ) < 6 then
12679: LD_VAR 0 1
12683: PPUSH
12684: LD_EXP 14
12688: PPUSH
12689: CALL_OW 296
12693: PUSH
12694: LD_INT 6
12696: LESS
12697: IFFALSE 12711
// SetSide ( i , 7 ) ;
12699: LD_VAR 0 1
12703: PPUSH
12704: LD_INT 7
12706: PPUSH
12707: CALL_OW 235
12711: GO 12676
12713: POP
12714: POP
// end ;
12715: PPOPN 1
12717: END
// every 0 0$01 trigger can_escape and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) do var all_taken , tmp , m1 , m2 , m3 ;
12718: LD_EXP 6
12722: PUSH
12723: LD_INT 19
12725: PPUSH
12726: LD_INT 22
12728: PUSH
12729: LD_INT 7
12731: PUSH
12732: EMPTY
12733: LIST
12734: LIST
12735: PUSH
12736: LD_INT 21
12738: PUSH
12739: LD_INT 1
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: PUSH
12746: EMPTY
12747: LIST
12748: LIST
12749: PPUSH
12750: CALL_OW 71
12754: NOT
12755: AND
12756: PUSH
12757: LD_INT 3
12759: PPUSH
12760: CALL_OW 469
12764: NOT
12765: AND
12766: PUSH
12767: LD_INT 5
12769: PPUSH
12770: CALL_OW 469
12774: NOT
12775: AND
12776: IFFALSE 14402
12778: GO 12780
12780: DISABLE
12781: LD_INT 0
12783: PPUSH
12784: PPUSH
12785: PPUSH
12786: PPUSH
12787: PPUSH
// begin m1 := false ;
12788: LD_ADDR_VAR 0 3
12792: PUSH
12793: LD_INT 0
12795: ST_TO_ADDR
// m2 := false ;
12796: LD_ADDR_VAR 0 4
12800: PUSH
12801: LD_INT 0
12803: ST_TO_ADDR
// m3 := false ;
12804: LD_ADDR_VAR 0 5
12808: PUSH
12809: LD_INT 0
12811: ST_TO_ADDR
// all_taken := ( UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 ) ;
12812: LD_ADDR_VAR 0 1
12816: PUSH
12817: LD_EXP 3
12821: PPUSH
12822: LD_INT 22
12824: PUSH
12825: LD_INT 4
12827: PUSH
12828: EMPTY
12829: LIST
12830: LIST
12831: PUSH
12832: LD_INT 21
12834: PUSH
12835: LD_INT 1
12837: PUSH
12838: EMPTY
12839: LIST
12840: LIST
12841: PUSH
12842: EMPTY
12843: LIST
12844: LIST
12845: PPUSH
12846: CALL_OW 72
12850: PUSH
12851: LD_INT 0
12853: EQUAL
12854: ST_TO_ADDR
// if not all_taken then
12855: LD_VAR 0 1
12859: NOT
12860: IFFALSE 13001
// case query ( Q1 ) of 1 :
12862: LD_STRING Q1
12864: PPUSH
12865: CALL_OW 97
12869: PUSH
12870: LD_INT 1
12872: DOUBLE
12873: EQUAL
12874: IFTRUE 12878
12876: GO 12989
12878: POP
// begin repeat wait ( 0 0$1 ) ;
12879: LD_INT 35
12881: PPUSH
12882: CALL_OW 67
// until UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) ;
12886: LD_EXP 3
12890: PPUSH
12891: LD_INT 22
12893: PUSH
12894: LD_INT 4
12896: PUSH
12897: EMPTY
12898: LIST
12899: LIST
12900: PUSH
12901: LD_INT 21
12903: PUSH
12904: LD_INT 1
12906: PUSH
12907: EMPTY
12908: LIST
12909: LIST
12910: PUSH
12911: EMPTY
12912: LIST
12913: LIST
12914: PPUSH
12915: CALL_OW 72
12919: PUSH
12920: LD_INT 0
12922: EQUAL
12923: PUSH
12924: LD_INT 19
12926: PPUSH
12927: LD_INT 22
12929: PUSH
12930: LD_INT 7
12932: PUSH
12933: EMPTY
12934: LIST
12935: LIST
12936: PUSH
12937: LD_INT 21
12939: PUSH
12940: LD_INT 1
12942: PUSH
12943: EMPTY
12944: LIST
12945: LIST
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: PPUSH
12951: CALL_OW 71
12955: NOT
12956: AND
12957: PUSH
12958: LD_INT 3
12960: PPUSH
12961: CALL_OW 469
12965: NOT
12966: AND
12967: PUSH
12968: LD_INT 5
12970: PPUSH
12971: CALL_OW 469
12975: NOT
12976: AND
12977: IFFALSE 12879
// all_taken := true ;
12979: LD_ADDR_VAR 0 1
12983: PUSH
12984: LD_INT 1
12986: ST_TO_ADDR
// end ; 2 :
12987: GO 13001
12989: LD_INT 2
12991: DOUBLE
12992: EQUAL
12993: IFTRUE 12997
12995: GO 13000
12997: POP
// ; end ;
12998: GO 13001
13000: POP
// if team_kill_counter then
13001: LD_EXP 9
13005: IFFALSE 13021
// Say ( JMM , D5-JMM-1 ) else
13007: LD_EXP 14
13011: PPUSH
13012: LD_STRING D5-JMM-1
13014: PPUSH
13015: CALL_OW 88
13019: GO 13033
// Say ( JMM , D5-JMM-1a ) ;
13021: LD_EXP 14
13025: PPUSH
13026: LD_STRING D5-JMM-1a
13028: PPUSH
13029: CALL_OW 88
// if ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Roth ] ) >= 10 then
13033: LD_INT 22
13035: PUSH
13036: LD_INT 7
13038: PUSH
13039: EMPTY
13040: LIST
13041: LIST
13042: PUSH
13043: LD_INT 21
13045: PUSH
13046: LD_INT 1
13048: PUSH
13049: EMPTY
13050: LIST
13051: LIST
13052: PUSH
13053: LD_INT 23
13055: PUSH
13056: LD_INT 1
13058: PUSH
13059: EMPTY
13060: LIST
13061: LIST
13062: PUSH
13063: EMPTY
13064: LIST
13065: LIST
13066: LIST
13067: PPUSH
13068: CALL_OW 69
13072: PUSH
13073: LD_EXP 14
13077: PUSH
13078: LD_EXP 15
13082: PUSH
13083: EMPTY
13084: LIST
13085: LIST
13086: DIFF
13087: PUSH
13088: LD_INT 10
13090: GREATEREQUAL
13091: IFFALSE 13100
// SetAchievement ( ACH_TEAM ) ;
13093: LD_STRING ACH_TEAM
13095: PPUSH
13096: CALL_OW 543
// if not invis_used then
13100: LD_EXP 12
13104: NOT
13105: IFFALSE 13121
// begin wait ( 3 ) ;
13107: LD_INT 3
13109: PPUSH
13110: CALL_OW 67
// SetAchievement ( ACH_NOINVIS ) ;
13114: LD_STRING ACH_NOINVIS
13116: PPUSH
13117: CALL_OW 543
// end ; if not alert then
13121: LD_EXP 13
13125: NOT
13126: IFFALSE 13142
// begin wait ( 3 ) ;
13128: LD_INT 3
13130: PPUSH
13131: CALL_OW 67
// SetAchievement ( ACH_ALARM ) ;
13135: LD_STRING ACH_ALARM
13137: PPUSH
13138: CALL_OW 543
// end ; if tick < 15 15$00 then
13142: LD_OWVAR 1
13146: PUSH
13147: LD_INT 31500
13149: LESS
13150: IFFALSE 13166
// begin wait ( 3 ) ;
13152: LD_INT 3
13154: PPUSH
13155: CALL_OW 67
// SetAchievement ( ACH_ASPEED_16 ) ;
13159: LD_STRING ACH_ASPEED_16
13161: PPUSH
13162: CALL_OW 543
// end ; if all_taken then
13166: LD_VAR 0 1
13170: IFFALSE 13192
// begin AddMedal ( All , 1 ) ;
13172: LD_STRING All
13174: PPUSH
13175: LD_INT 1
13177: PPUSH
13178: CALL_OW 101
// m1 := true ;
13182: LD_ADDR_VAR 0 3
13186: PUSH
13187: LD_INT 1
13189: ST_TO_ADDR
// end else
13190: GO 13203
// AddMedal ( All , - 1 ) ;
13192: LD_STRING All
13194: PPUSH
13195: LD_INT 1
13197: NEG
13198: PPUSH
13199: CALL_OW 101
// if team_kill_counter then
13203: LD_EXP 9
13207: IFFALSE 13222
// AddMedal ( Save , - 1 ) else
13209: LD_STRING Save
13211: PPUSH
13212: LD_INT 1
13214: NEG
13215: PPUSH
13216: CALL_OW 101
13220: GO 13240
// begin AddMedal ( Save , 1 ) ;
13222: LD_STRING Save
13224: PPUSH
13225: LD_INT 1
13227: PPUSH
13228: CALL_OW 101
// m2 := true ;
13232: LD_ADDR_VAR 0 4
13236: PUSH
13237: LD_INT 1
13239: ST_TO_ADDR
// end ; if friends_kill_counter >= [ 2 , 2 , 1 , 1 ] [ Difficulty ] then
13240: LD_EXP 8
13244: PUSH
13245: LD_INT 2
13247: PUSH
13248: LD_INT 2
13250: PUSH
13251: LD_INT 1
13253: PUSH
13254: LD_INT 1
13256: PUSH
13257: EMPTY
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: PUSH
13263: LD_OWVAR 67
13267: ARRAY
13268: GREATEREQUAL
13269: IFFALSE 13284
// AddMedal ( Friendship , - 1 ) else
13271: LD_STRING Friendship
13273: PPUSH
13274: LD_INT 1
13276: NEG
13277: PPUSH
13278: CALL_OW 101
13282: GO 13302
// begin AddMedal ( Friendship , 1 ) ;
13284: LD_STRING Friendship
13286: PPUSH
13287: LD_INT 1
13289: PPUSH
13290: CALL_OW 101
// m3 := true ;
13294: LD_ADDR_VAR 0 5
13298: PUSH
13299: LD_INT 1
13301: ST_TO_ADDR
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
13302: LD_VAR 0 3
13306: PUSH
13307: LD_VAR 0 4
13311: AND
13312: PUSH
13313: LD_VAR 0 5
13317: AND
13318: PUSH
13319: LD_OWVAR 67
13323: PUSH
13324: LD_INT 3
13326: GREATEREQUAL
13327: AND
13328: IFFALSE 13340
// SetAchievementEX ( ACH_AMER , 16 ) ;
13330: LD_STRING ACH_AMER
13332: PPUSH
13333: LD_INT 16
13335: PPUSH
13336: CALL_OW 564
// GiveMedals ( MAIN ) ;
13340: LD_STRING MAIN
13342: PPUSH
13343: CALL_OW 102
// tmp := FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ] ) ;
13347: LD_ADDR_VAR 0 2
13351: PUSH
13352: LD_INT 22
13354: PUSH
13355: LD_INT 7
13357: PUSH
13358: EMPTY
13359: LIST
13360: LIST
13361: PUSH
13362: LD_INT 2
13364: PUSH
13365: LD_INT 25
13367: PUSH
13368: LD_INT 1
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: PUSH
13375: LD_INT 25
13377: PUSH
13378: LD_INT 2
13380: PUSH
13381: EMPTY
13382: LIST
13383: LIST
13384: PUSH
13385: LD_INT 25
13387: PUSH
13388: LD_INT 3
13390: PUSH
13391: EMPTY
13392: LIST
13393: LIST
13394: PUSH
13395: LD_INT 25
13397: PUSH
13398: LD_INT 4
13400: PUSH
13401: EMPTY
13402: LIST
13403: LIST
13404: PUSH
13405: LD_INT 25
13407: PUSH
13408: LD_INT 5
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PUSH
13415: LD_INT 25
13417: PUSH
13418: LD_INT 8
13420: PUSH
13421: EMPTY
13422: LIST
13423: LIST
13424: PUSH
13425: LD_INT 25
13427: PUSH
13428: LD_INT 9
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: PUSH
13445: EMPTY
13446: LIST
13447: LIST
13448: PUSH
13449: EMPTY
13450: LIST
13451: PPUSH
13452: CALL_OW 69
13456: ST_TO_ADDR
// RewardPeople ( tmp ^ Roth ) ;
13457: LD_VAR 0 2
13461: PUSH
13462: LD_EXP 15
13466: ADD
13467: PPUSH
13468: CALL_OW 43
// SaveCharacters ( JMM , 12a_JMM ) ;
13472: LD_EXP 14
13476: PPUSH
13477: LD_STRING 12a_JMM
13479: PPUSH
13480: CALL_OW 38
// if IsLive ( Roth ) then
13484: LD_EXP 15
13488: PPUSH
13489: CALL_OW 300
13493: IFFALSE 13507
// SaveCharacters ( Roth , 12a_Roth ) ;
13495: LD_EXP 15
13499: PPUSH
13500: LD_STRING 12a_Roth
13502: PPUSH
13503: CALL_OW 38
// if Lisa in tmp then
13507: LD_EXP 23
13511: PUSH
13512: LD_VAR 0 2
13516: IN
13517: IFFALSE 13533
// SaveCharacters ( Lisa , 12a_Lisa ) else
13519: LD_EXP 23
13523: PPUSH
13524: LD_STRING 12a_Lisa
13526: PPUSH
13527: CALL_OW 38
13531: GO 13551
// if Lisa then
13533: LD_EXP 23
13537: IFFALSE 13551
// SaveCharacters ( Lisa , 12p_Lisa ) ;
13539: LD_EXP 23
13543: PPUSH
13544: LD_STRING 12p_Lisa
13546: PPUSH
13547: CALL_OW 38
// if Donaldson in tmp then
13551: LD_EXP 24
13555: PUSH
13556: LD_VAR 0 2
13560: IN
13561: IFFALSE 13577
// SaveCharacters ( Donaldson , 12a_Donaldson ) else
13563: LD_EXP 24
13567: PPUSH
13568: LD_STRING 12a_Donaldson
13570: PPUSH
13571: CALL_OW 38
13575: GO 13595
// if Donaldson then
13577: LD_EXP 24
13581: IFFALSE 13595
// SaveCharacters ( Donaldson , 12p_Donaldson ) ;
13583: LD_EXP 24
13587: PPUSH
13588: LD_STRING 12p_Donaldson
13590: PPUSH
13591: CALL_OW 38
// if Bobby in tmp then
13595: LD_EXP 25
13599: PUSH
13600: LD_VAR 0 2
13604: IN
13605: IFFALSE 13621
// SaveCharacters ( Bobby , 12a_Bobby ) else
13607: LD_EXP 25
13611: PPUSH
13612: LD_STRING 12a_Bobby
13614: PPUSH
13615: CALL_OW 38
13619: GO 13639
// if Bobby then
13621: LD_EXP 25
13625: IFFALSE 13639
// SaveCharacters ( Bobby , 12p_Bobby ) ;
13627: LD_EXP 25
13631: PPUSH
13632: LD_STRING 12p_Bobby
13634: PPUSH
13635: CALL_OW 38
// if Cyrus in tmp then
13639: LD_EXP 26
13643: PUSH
13644: LD_VAR 0 2
13648: IN
13649: IFFALSE 13665
// SaveCharacters ( Cyrus , 12a_Cyrus ) else
13651: LD_EXP 26
13655: PPUSH
13656: LD_STRING 12a_Cyrus
13658: PPUSH
13659: CALL_OW 38
13663: GO 13683
// if Cyrus then
13665: LD_EXP 26
13669: IFFALSE 13683
// SaveCharacters ( Cyrus , 12p_Cyrus ) ;
13671: LD_EXP 26
13675: PPUSH
13676: LD_STRING 12p_Cyrus
13678: PPUSH
13679: CALL_OW 38
// if Denis in tmp then
13683: LD_EXP 27
13687: PUSH
13688: LD_VAR 0 2
13692: IN
13693: IFFALSE 13707
// SaveCharacters ( Denis , 12a_Denis ) ;
13695: LD_EXP 27
13699: PPUSH
13700: LD_STRING 12a_Denis
13702: PPUSH
13703: CALL_OW 38
// if Brown in tmp then
13707: LD_EXP 28
13711: PUSH
13712: LD_VAR 0 2
13716: IN
13717: IFFALSE 13733
// SaveCharacters ( Brown , 12a_Brown ) else
13719: LD_EXP 28
13723: PPUSH
13724: LD_STRING 12a_Brown
13726: PPUSH
13727: CALL_OW 38
13731: GO 13757
// if Brown in tmp then
13733: LD_EXP 28
13737: PUSH
13738: LD_VAR 0 2
13742: IN
13743: IFFALSE 13757
// SaveCharacters ( Brown , 12p_Brown ) ;
13745: LD_EXP 28
13749: PPUSH
13750: LD_STRING 12p_Brown
13752: PPUSH
13753: CALL_OW 38
// if Gladstone in tmp then
13757: LD_EXP 29
13761: PUSH
13762: LD_VAR 0 2
13766: IN
13767: IFFALSE 13783
// SaveCharacters ( Gladstone , 12a_Gladstone ) else
13769: LD_EXP 29
13773: PPUSH
13774: LD_STRING 12a_Gladstone
13776: PPUSH
13777: CALL_OW 38
13781: GO 13801
// if Gladstone then
13783: LD_EXP 29
13787: IFFALSE 13801
// SaveCharacters ( Gladstone , 12p_Gladstone ) ;
13789: LD_EXP 29
13793: PPUSH
13794: LD_STRING 12p_Gladstone
13796: PPUSH
13797: CALL_OW 38
// if Houten in tmp then
13801: LD_EXP 30
13805: PUSH
13806: LD_VAR 0 2
13810: IN
13811: IFFALSE 13827
// SaveCharacters ( Houten , 12a_Houten ) else
13813: LD_EXP 30
13817: PPUSH
13818: LD_STRING 12a_Houten
13820: PPUSH
13821: CALL_OW 38
13825: GO 13845
// if Houten then
13827: LD_EXP 30
13831: IFFALSE 13845
// SaveCharacters ( Houten , 12p_Houten ) ;
13833: LD_EXP 30
13837: PPUSH
13838: LD_STRING 12p_Houten
13840: PPUSH
13841: CALL_OW 38
// if Cornel in tmp then
13845: LD_EXP 31
13849: PUSH
13850: LD_VAR 0 2
13854: IN
13855: IFFALSE 13871
// SaveCharacters ( Cornel , 12a_Cornell ) else
13857: LD_EXP 31
13861: PPUSH
13862: LD_STRING 12a_Cornell
13864: PPUSH
13865: CALL_OW 38
13869: GO 13889
// if Cornel then
13871: LD_EXP 31
13875: IFFALSE 13889
// SaveCharacters ( Cornel , 12p_Cornell ) ;
13877: LD_EXP 31
13881: PPUSH
13882: LD_STRING 12p_Cornell
13884: PPUSH
13885: CALL_OW 38
// if Gary in tmp then
13889: LD_EXP 32
13893: PUSH
13894: LD_VAR 0 2
13898: IN
13899: IFFALSE 13915
// SaveCharacters ( Gary , 12a_Gary ) else
13901: LD_EXP 32
13905: PPUSH
13906: LD_STRING 12a_Gary
13908: PPUSH
13909: CALL_OW 38
13913: GO 13933
// if Gary then
13915: LD_EXP 32
13919: IFFALSE 13933
// SaveCharacters ( Gary , 12p_Gary ) ;
13921: LD_EXP 32
13925: PPUSH
13926: LD_STRING 12p_Gary
13928: PPUSH
13929: CALL_OW 38
// if Frank in tmp then
13933: LD_EXP 33
13937: PUSH
13938: LD_VAR 0 2
13942: IN
13943: IFFALSE 13957
// SaveCharacters ( Frank , 12a_Frank ) ;
13945: LD_EXP 33
13949: PPUSH
13950: LD_STRING 12a_Frank
13952: PPUSH
13953: CALL_OW 38
// if Kikuchi in tmp then
13957: LD_EXP 34
13961: PUSH
13962: LD_VAR 0 2
13966: IN
13967: IFFALSE 13983
// SaveCharacters ( Kikuchi , 12a_Kikuchi ) else
13969: LD_EXP 34
13973: PPUSH
13974: LD_STRING 12a_Kikuchi
13976: PPUSH
13977: CALL_OW 38
13981: GO 14001
// if Kikuchi then
13983: LD_EXP 34
13987: IFFALSE 14001
// SaveCharacters ( Kikuchi , 12p_Kikuchi ) ;
13989: LD_EXP 34
13993: PPUSH
13994: LD_STRING 12p_Kikuchi
13996: PPUSH
13997: CALL_OW 38
// if Simms in tmp then
14001: LD_EXP 35
14005: PUSH
14006: LD_VAR 0 2
14010: IN
14011: IFFALSE 14025
// SaveCharacters ( Simms , 12a_Simms ) ;
14013: LD_EXP 35
14017: PPUSH
14018: LD_STRING 12a_Simms
14020: PPUSH
14021: CALL_OW 38
// if Joan in tmp then
14025: LD_EXP 36
14029: PUSH
14030: LD_VAR 0 2
14034: IN
14035: IFFALSE 14049
// SaveCharacters ( Joan , 12a_Joan ) ;
14037: LD_EXP 36
14041: PPUSH
14042: LD_STRING 12a_Joan
14044: PPUSH
14045: CALL_OW 38
// if DeltaDoctor in tmp then
14049: LD_EXP 37
14053: PUSH
14054: LD_VAR 0 2
14058: IN
14059: IFFALSE 14073
// SaveCharacters ( DeltaDoctor , 12a_DeltaDoctor ) ;
14061: LD_EXP 37
14065: PPUSH
14066: LD_STRING 12a_DeltaDoctor
14068: PPUSH
14069: CALL_OW 38
// tmp := tmp diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor ] ;
14073: LD_ADDR_VAR 0 2
14077: PUSH
14078: LD_VAR 0 2
14082: PUSH
14083: LD_EXP 14
14087: PUSH
14088: LD_EXP 15
14092: PUSH
14093: LD_EXP 23
14097: PUSH
14098: LD_EXP 24
14102: PUSH
14103: LD_EXP 25
14107: PUSH
14108: LD_EXP 26
14112: PUSH
14113: LD_EXP 27
14117: PUSH
14118: LD_EXP 28
14122: PUSH
14123: LD_EXP 29
14127: PUSH
14128: LD_EXP 30
14132: PUSH
14133: LD_EXP 31
14137: PUSH
14138: LD_EXP 32
14142: PUSH
14143: LD_EXP 33
14147: PUSH
14148: LD_EXP 34
14152: PUSH
14153: LD_EXP 35
14157: PUSH
14158: LD_EXP 36
14162: PUSH
14163: LD_EXP 37
14167: PUSH
14168: EMPTY
14169: LIST
14170: LIST
14171: LIST
14172: LIST
14173: LIST
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: DIFF
14187: ST_TO_ADDR
// if tmp then
14188: LD_VAR 0 2
14192: IFFALSE 14206
// SaveCharacters ( tmp , 12a_others ) ;
14194: LD_VAR 0 2
14198: PPUSH
14199: LD_STRING 12a_others
14201: PPUSH
14202: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_side , 1 ] , [ f_side , 4 ] ] ] ) diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Powell ] ;
14206: LD_ADDR_VAR 0 2
14210: PUSH
14211: LD_INT 21
14213: PUSH
14214: LD_INT 1
14216: PUSH
14217: EMPTY
14218: LIST
14219: LIST
14220: PUSH
14221: LD_INT 23
14223: PUSH
14224: LD_INT 1
14226: PUSH
14227: EMPTY
14228: LIST
14229: LIST
14230: PUSH
14231: LD_INT 2
14233: PUSH
14234: LD_INT 22
14236: PUSH
14237: LD_INT 1
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: PUSH
14244: LD_INT 22
14246: PUSH
14247: LD_INT 4
14249: PUSH
14250: EMPTY
14251: LIST
14252: LIST
14253: PUSH
14254: EMPTY
14255: LIST
14256: LIST
14257: LIST
14258: PUSH
14259: EMPTY
14260: LIST
14261: LIST
14262: LIST
14263: PPUSH
14264: CALL_OW 69
14268: PUSH
14269: LD_EXP 14
14273: PUSH
14274: LD_EXP 15
14278: PUSH
14279: LD_EXP 23
14283: PUSH
14284: LD_EXP 24
14288: PUSH
14289: LD_EXP 25
14293: PUSH
14294: LD_EXP 26
14298: PUSH
14299: LD_EXP 27
14303: PUSH
14304: LD_EXP 28
14308: PUSH
14309: LD_EXP 29
14313: PUSH
14314: LD_EXP 30
14318: PUSH
14319: LD_EXP 31
14323: PUSH
14324: LD_EXP 32
14328: PUSH
14329: LD_EXP 33
14333: PUSH
14334: LD_EXP 34
14338: PUSH
14339: LD_EXP 35
14343: PUSH
14344: LD_EXP 36
14348: PUSH
14349: LD_EXP 37
14353: PUSH
14354: LD_EXP 16
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: DIFF
14379: ST_TO_ADDR
// if tmp then
14380: LD_VAR 0 2
14384: IFFALSE 14398
// SaveCharacters ( tmp , 12p_others ) ;
14386: LD_VAR 0 2
14390: PPUSH
14391: LD_STRING 12p_others
14393: PPUSH
14394: CALL_OW 38
// YouWin ;
14398: CALL_OW 103
// end ; end_of_file
14402: PPOPN 5
14404: END
// on SailEvent ( event ) do var tmp ;
14405: LD_INT 0
14407: PPUSH
// begin if event = 1 then
14408: LD_VAR 0 1
14412: PUSH
14413: LD_INT 1
14415: EQUAL
14416: IFFALSE 14489
// begin if not mobile_patrol then
14418: LD_EXP 17
14422: NOT
14423: IFFALSE 14427
// exit ;
14425: GO 14489
// tmp := mobile_patrol [ mobile_patrol ] ;
14427: LD_ADDR_VAR 0 2
14431: PUSH
14432: LD_EXP 17
14436: PUSH
14437: LD_EXP 17
14441: ARRAY
14442: ST_TO_ADDR
// mobile_patrol := Delete ( mobile_patrol , mobile_patrol ) ;
14443: LD_ADDR_EXP 17
14447: PUSH
14448: LD_EXP 17
14452: PPUSH
14453: LD_EXP 17
14457: PPUSH
14458: CALL_OW 3
14462: ST_TO_ADDR
// Patrol ( tmp , mobile_points [ mobile_patrol + 1 ] , [ ] ) ;
14463: LD_VAR 0 2
14467: PPUSH
14468: LD_EXP 18
14472: PUSH
14473: LD_EXP 17
14477: PUSH
14478: LD_INT 1
14480: PLUS
14481: ARRAY
14482: PPUSH
14483: EMPTY
14484: PPUSH
14485: CALL 6669 0 3
// end ; end ;
14489: PPOPN 2
14491: END
// on UnitDestroyed ( un ) do begin if un = JMM then
14492: LD_VAR 0 1
14496: PUSH
14497: LD_EXP 14
14501: EQUAL
14502: IFFALSE 14511
// YouLost ( JMM ) ;
14504: LD_STRING JMM
14506: PPUSH
14507: CALL_OW 104
// if GetSide ( un ) = 7 and GetWeapon ( un ) = us_cargo_bay then
14511: LD_VAR 0 1
14515: PPUSH
14516: CALL_OW 255
14520: PUSH
14521: LD_INT 7
14523: EQUAL
14524: PUSH
14525: LD_VAR 0 1
14529: PPUSH
14530: CALL_OW 264
14534: PUSH
14535: LD_INT 12
14537: EQUAL
14538: AND
14539: IFFALSE 14548
// YouLost ( Artifact ) ;
14541: LD_STRING Artifact
14543: PPUSH
14544: CALL_OW 104
// if ( GetSide ( un ) = 7 and GetType ( un ) = unit_human ) or un = Roth then
14548: LD_VAR 0 1
14552: PPUSH
14553: CALL_OW 255
14557: PUSH
14558: LD_INT 7
14560: EQUAL
14561: PUSH
14562: LD_VAR 0 1
14566: PPUSH
14567: CALL_OW 247
14571: PUSH
14572: LD_INT 1
14574: EQUAL
14575: AND
14576: PUSH
14577: LD_VAR 0 1
14581: PUSH
14582: LD_EXP 15
14586: EQUAL
14587: OR
14588: IFFALSE 14604
// team_kill_counter := team_kill_counter + 1 ;
14590: LD_ADDR_EXP 9
14594: PUSH
14595: LD_EXP 9
14599: PUSH
14600: LD_INT 1
14602: PLUS
14603: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetType ( un ) = unit_human then
14604: LD_VAR 0 1
14608: PPUSH
14609: CALL_OW 255
14613: PUSH
14614: LD_INT 1
14616: EQUAL
14617: PUSH
14618: LD_VAR 0 1
14622: PPUSH
14623: CALL_OW 247
14627: PUSH
14628: LD_INT 1
14630: EQUAL
14631: AND
14632: IFFALSE 14648
// friends_kill_counter := friends_kill_counter + 1 ;
14634: LD_ADDR_EXP 8
14638: PUSH
14639: LD_EXP 8
14643: PUSH
14644: LD_INT 1
14646: PLUS
14647: ST_TO_ADDR
// if GetSide ( un ) <> 1 then
14648: LD_VAR 0 1
14652: PPUSH
14653: CALL_OW 255
14657: PUSH
14658: LD_INT 1
14660: NONEQUAL
14661: IFFALSE 14665
// exit ;
14663: GO 14742
// if GetControl ( un ) = control_remote then
14665: LD_VAR 0 1
14669: PPUSH
14670: CALL_OW 263
14674: PUSH
14675: LD_INT 2
14677: EQUAL
14678: IFFALSE 14696
// defenders := defenders diff un ;
14680: LD_ADDR_EXP 20
14684: PUSH
14685: LD_EXP 20
14689: PUSH
14690: LD_VAR 0 1
14694: DIFF
14695: ST_TO_ADDR
// if not un in defenders then
14696: LD_VAR 0 1
14700: PUSH
14701: LD_EXP 20
14705: IN
14706: NOT
14707: IFFALSE 14742
// begin defcon := [ GetX ( un ) , GetY ( un ) ] ;
14709: LD_ADDR_EXP 21
14713: PUSH
14714: LD_VAR 0 1
14718: PPUSH
14719: CALL_OW 250
14723: PUSH
14724: LD_VAR 0 1
14728: PPUSH
14729: CALL_OW 251
14733: PUSH
14734: EMPTY
14735: LIST
14736: LIST
14737: ST_TO_ADDR
// Defend ;
14738: CALL 2791 0 0
// end ; end ;
14742: PPOPN 1
14744: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) <> 1 then
14745: LD_VAR 0 1
14749: PPUSH
14750: CALL_OW 255
14754: PUSH
14755: LD_INT 1
14757: NONEQUAL
14758: IFFALSE 14762
// exit ;
14760: GO 14786
// if GetControl ( veh ) = control_remote then
14762: LD_VAR 0 1
14766: PPUSH
14767: CALL_OW 263
14771: PUSH
14772: LD_INT 2
14774: EQUAL
14775: IFFALSE 14786
// Connect ( veh ) ;
14777: LD_VAR 0 1
14781: PPUSH
14782: CALL 40301 0 1
// end ;
14786: PPOPN 2
14788: END
// on UnitGoesToRed ( un ) do var i , veh ;
14789: LD_INT 0
14791: PPUSH
14792: PPUSH
// begin if GetSide ( un ) = 1 and GetControl ( un ) = control_remote then
14793: LD_VAR 0 1
14797: PPUSH
14798: CALL_OW 255
14802: PUSH
14803: LD_INT 1
14805: EQUAL
14806: PUSH
14807: LD_VAR 0 1
14811: PPUSH
14812: CALL_OW 263
14816: PUSH
14817: LD_INT 2
14819: EQUAL
14820: AND
14821: IFFALSE 14832
// ComUnlink ( un ) ;
14823: LD_VAR 0 1
14827: PPUSH
14828: CALL_OW 136
// if un = ambar0 then
14832: LD_VAR 0 1
14836: PUSH
14837: LD_INT 18
14839: EQUAL
14840: IFFALSE 14950
// begin uc_side := 1 ;
14842: LD_ADDR_OWVAR 20
14846: PUSH
14847: LD_INT 1
14849: ST_TO_ADDR
// uc_nation := 1 ;
14850: LD_ADDR_OWVAR 21
14854: PUSH
14855: LD_INT 1
14857: ST_TO_ADDR
// for i = 1 to 6 do
14858: LD_ADDR_VAR 0 2
14862: PUSH
14863: DOUBLE
14864: LD_INT 1
14866: DEC
14867: ST_TO_ADDR
14868: LD_INT 6
14870: PUSH
14871: FOR_TO
14872: IFFALSE 14948
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
14874: LD_INT 3
14876: PPUSH
14877: LD_INT 1
14879: PPUSH
14880: LD_INT 3
14882: PPUSH
14883: LD_INT 4
14885: PPUSH
14886: LD_INT 100
14888: PPUSH
14889: CALL 37208 0 5
// veh := CreateVehicle ;
14893: LD_ADDR_VAR 0 3
14897: PUSH
14898: CALL_OW 45
14902: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
14903: LD_VAR 0 3
14907: PPUSH
14908: LD_INT 1
14910: PPUSH
14911: CALL_OW 233
// PlaceUnitArea ( veh , west_spawn , false ) ;
14915: LD_VAR 0 3
14919: PPUSH
14920: LD_INT 25
14922: PPUSH
14923: LD_INT 0
14925: PPUSH
14926: CALL_OW 49
// defenders := defenders ^ veh ;
14930: LD_ADDR_EXP 20
14934: PUSH
14935: LD_EXP 20
14939: PUSH
14940: LD_VAR 0 3
14944: ADD
14945: ST_TO_ADDR
// end ;
14946: GO 14871
14948: POP
14949: POP
// end ; end ;
14950: PPOPN 3
14952: END
// on EnterBuilding ( building , unit ) do begin if unit = Powell then
14953: LD_VAR 0 2
14957: PUSH
14958: LD_EXP 16
14962: EQUAL
14963: IFFALSE 14974
// RemoveUnit ( Powell ) ;
14965: LD_EXP 16
14969: PPUSH
14970: CALL_OW 64
// end ;
14974: PPOPN 2
14976: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
14977: LD_VAR 0 1
14981: PPUSH
14982: CALL 28435 0 1
// end ; end_of_file
14986: PPOPN 1
14988: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
14989: LD_INT 0
14991: PPUSH
// ar_miner := 81 ;
14992: LD_ADDR_EXP 45
14996: PUSH
14997: LD_INT 81
14999: ST_TO_ADDR
// ar_crane := 88 ;
15000: LD_ADDR_EXP 44
15004: PUSH
15005: LD_INT 88
15007: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
15008: LD_ADDR_EXP 39
15012: PUSH
15013: LD_INT 89
15015: ST_TO_ADDR
// us_hack := 99 ;
15016: LD_ADDR_EXP 40
15020: PUSH
15021: LD_INT 99
15023: ST_TO_ADDR
// us_artillery := 97 ;
15024: LD_ADDR_EXP 41
15028: PUSH
15029: LD_INT 97
15031: ST_TO_ADDR
// ar_bio_bomb := 91 ;
15032: LD_ADDR_EXP 42
15036: PUSH
15037: LD_INT 91
15039: ST_TO_ADDR
// ar_mortar := 92 ;
15040: LD_ADDR_EXP 43
15044: PUSH
15045: LD_INT 92
15047: ST_TO_ADDR
// ru_radar := 98 ;
15048: LD_ADDR_EXP 38
15052: PUSH
15053: LD_INT 98
15055: ST_TO_ADDR
// tech_Artillery := 80 ;
15056: LD_ADDR_EXP 46
15060: PUSH
15061: LD_INT 80
15063: ST_TO_ADDR
// tech_RadMat := 81 ;
15064: LD_ADDR_EXP 47
15068: PUSH
15069: LD_INT 81
15071: ST_TO_ADDR
// tech_BasicTools := 82 ;
15072: LD_ADDR_EXP 48
15076: PUSH
15077: LD_INT 82
15079: ST_TO_ADDR
// tech_Cargo := 83 ;
15080: LD_ADDR_EXP 49
15084: PUSH
15085: LD_INT 83
15087: ST_TO_ADDR
// tech_Track := 84 ;
15088: LD_ADDR_EXP 50
15092: PUSH
15093: LD_INT 84
15095: ST_TO_ADDR
// tech_Crane := 85 ;
15096: LD_ADDR_EXP 51
15100: PUSH
15101: LD_INT 85
15103: ST_TO_ADDR
// tech_Bulldozer := 86 ;
15104: LD_ADDR_EXP 52
15108: PUSH
15109: LD_INT 86
15111: ST_TO_ADDR
// tech_Hovercraft := 87 ;
15112: LD_ADDR_EXP 53
15116: PUSH
15117: LD_INT 87
15119: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
15120: LD_ADDR_EXP 54
15124: PUSH
15125: LD_INT 88
15127: ST_TO_ADDR
// class_mastodont := 31 ;
15128: LD_ADDR_EXP 55
15132: PUSH
15133: LD_INT 31
15135: ST_TO_ADDR
// class_horse := 21 ;
15136: LD_ADDR_EXP 56
15140: PUSH
15141: LD_INT 21
15143: ST_TO_ADDR
// end ;
15144: LD_VAR 0 1
15148: RET
// every 1 do
15149: GO 15151
15151: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
15152: CALL 14989 0 0
15156: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15157: LD_INT 0
15159: PPUSH
// if p2 = 100 then
15160: LD_VAR 0 2
15164: PUSH
15165: LD_INT 100
15167: EQUAL
15168: IFFALSE 16117
// begin if not StreamModeActive then
15170: LD_EXP 57
15174: NOT
15175: IFFALSE 15185
// StreamModeActive := true ;
15177: LD_ADDR_EXP 57
15181: PUSH
15182: LD_INT 1
15184: ST_TO_ADDR
// if p3 = 0 then
15185: LD_VAR 0 3
15189: PUSH
15190: LD_INT 0
15192: EQUAL
15193: IFFALSE 15199
// InitStreamMode ;
15195: CALL 16277 0 0
// if p3 = 1 then
15199: LD_VAR 0 3
15203: PUSH
15204: LD_INT 1
15206: EQUAL
15207: IFFALSE 15217
// sRocket := true ;
15209: LD_ADDR_EXP 62
15213: PUSH
15214: LD_INT 1
15216: ST_TO_ADDR
// if p3 = 2 then
15217: LD_VAR 0 3
15221: PUSH
15222: LD_INT 2
15224: EQUAL
15225: IFFALSE 15235
// sSpeed := true ;
15227: LD_ADDR_EXP 61
15231: PUSH
15232: LD_INT 1
15234: ST_TO_ADDR
// if p3 = 3 then
15235: LD_VAR 0 3
15239: PUSH
15240: LD_INT 3
15242: EQUAL
15243: IFFALSE 15253
// sEngine := true ;
15245: LD_ADDR_EXP 63
15249: PUSH
15250: LD_INT 1
15252: ST_TO_ADDR
// if p3 = 4 then
15253: LD_VAR 0 3
15257: PUSH
15258: LD_INT 4
15260: EQUAL
15261: IFFALSE 15271
// sSpec := true ;
15263: LD_ADDR_EXP 60
15267: PUSH
15268: LD_INT 1
15270: ST_TO_ADDR
// if p3 = 5 then
15271: LD_VAR 0 3
15275: PUSH
15276: LD_INT 5
15278: EQUAL
15279: IFFALSE 15289
// sLevel := true ;
15281: LD_ADDR_EXP 64
15285: PUSH
15286: LD_INT 1
15288: ST_TO_ADDR
// if p3 = 6 then
15289: LD_VAR 0 3
15293: PUSH
15294: LD_INT 6
15296: EQUAL
15297: IFFALSE 15307
// sArmoury := true ;
15299: LD_ADDR_EXP 65
15303: PUSH
15304: LD_INT 1
15306: ST_TO_ADDR
// if p3 = 7 then
15307: LD_VAR 0 3
15311: PUSH
15312: LD_INT 7
15314: EQUAL
15315: IFFALSE 15325
// sRadar := true ;
15317: LD_ADDR_EXP 66
15321: PUSH
15322: LD_INT 1
15324: ST_TO_ADDR
// if p3 = 8 then
15325: LD_VAR 0 3
15329: PUSH
15330: LD_INT 8
15332: EQUAL
15333: IFFALSE 15343
// sBunker := true ;
15335: LD_ADDR_EXP 67
15339: PUSH
15340: LD_INT 1
15342: ST_TO_ADDR
// if p3 = 9 then
15343: LD_VAR 0 3
15347: PUSH
15348: LD_INT 9
15350: EQUAL
15351: IFFALSE 15361
// sHack := true ;
15353: LD_ADDR_EXP 68
15357: PUSH
15358: LD_INT 1
15360: ST_TO_ADDR
// if p3 = 10 then
15361: LD_VAR 0 3
15365: PUSH
15366: LD_INT 10
15368: EQUAL
15369: IFFALSE 15379
// sFire := true ;
15371: LD_ADDR_EXP 69
15375: PUSH
15376: LD_INT 1
15378: ST_TO_ADDR
// if p3 = 11 then
15379: LD_VAR 0 3
15383: PUSH
15384: LD_INT 11
15386: EQUAL
15387: IFFALSE 15397
// sRefresh := true ;
15389: LD_ADDR_EXP 70
15393: PUSH
15394: LD_INT 1
15396: ST_TO_ADDR
// if p3 = 12 then
15397: LD_VAR 0 3
15401: PUSH
15402: LD_INT 12
15404: EQUAL
15405: IFFALSE 15415
// sExp := true ;
15407: LD_ADDR_EXP 71
15411: PUSH
15412: LD_INT 1
15414: ST_TO_ADDR
// if p3 = 13 then
15415: LD_VAR 0 3
15419: PUSH
15420: LD_INT 13
15422: EQUAL
15423: IFFALSE 15433
// sDepot := true ;
15425: LD_ADDR_EXP 72
15429: PUSH
15430: LD_INT 1
15432: ST_TO_ADDR
// if p3 = 14 then
15433: LD_VAR 0 3
15437: PUSH
15438: LD_INT 14
15440: EQUAL
15441: IFFALSE 15451
// sFlag := true ;
15443: LD_ADDR_EXP 73
15447: PUSH
15448: LD_INT 1
15450: ST_TO_ADDR
// if p3 = 15 then
15451: LD_VAR 0 3
15455: PUSH
15456: LD_INT 15
15458: EQUAL
15459: IFFALSE 15469
// sKamikadze := true ;
15461: LD_ADDR_EXP 81
15465: PUSH
15466: LD_INT 1
15468: ST_TO_ADDR
// if p3 = 16 then
15469: LD_VAR 0 3
15473: PUSH
15474: LD_INT 16
15476: EQUAL
15477: IFFALSE 15487
// sTroll := true ;
15479: LD_ADDR_EXP 82
15483: PUSH
15484: LD_INT 1
15486: ST_TO_ADDR
// if p3 = 17 then
15487: LD_VAR 0 3
15491: PUSH
15492: LD_INT 17
15494: EQUAL
15495: IFFALSE 15505
// sSlow := true ;
15497: LD_ADDR_EXP 83
15501: PUSH
15502: LD_INT 1
15504: ST_TO_ADDR
// if p3 = 18 then
15505: LD_VAR 0 3
15509: PUSH
15510: LD_INT 18
15512: EQUAL
15513: IFFALSE 15523
// sLack := true ;
15515: LD_ADDR_EXP 84
15519: PUSH
15520: LD_INT 1
15522: ST_TO_ADDR
// if p3 = 19 then
15523: LD_VAR 0 3
15527: PUSH
15528: LD_INT 19
15530: EQUAL
15531: IFFALSE 15541
// sTank := true ;
15533: LD_ADDR_EXP 86
15537: PUSH
15538: LD_INT 1
15540: ST_TO_ADDR
// if p3 = 20 then
15541: LD_VAR 0 3
15545: PUSH
15546: LD_INT 20
15548: EQUAL
15549: IFFALSE 15559
// sRemote := true ;
15551: LD_ADDR_EXP 87
15555: PUSH
15556: LD_INT 1
15558: ST_TO_ADDR
// if p3 = 21 then
15559: LD_VAR 0 3
15563: PUSH
15564: LD_INT 21
15566: EQUAL
15567: IFFALSE 15577
// sPowell := true ;
15569: LD_ADDR_EXP 88
15573: PUSH
15574: LD_INT 1
15576: ST_TO_ADDR
// if p3 = 22 then
15577: LD_VAR 0 3
15581: PUSH
15582: LD_INT 22
15584: EQUAL
15585: IFFALSE 15595
// sTeleport := true ;
15587: LD_ADDR_EXP 91
15591: PUSH
15592: LD_INT 1
15594: ST_TO_ADDR
// if p3 = 23 then
15595: LD_VAR 0 3
15599: PUSH
15600: LD_INT 23
15602: EQUAL
15603: IFFALSE 15613
// sOilTower := true ;
15605: LD_ADDR_EXP 93
15609: PUSH
15610: LD_INT 1
15612: ST_TO_ADDR
// if p3 = 24 then
15613: LD_VAR 0 3
15617: PUSH
15618: LD_INT 24
15620: EQUAL
15621: IFFALSE 15631
// sShovel := true ;
15623: LD_ADDR_EXP 94
15627: PUSH
15628: LD_INT 1
15630: ST_TO_ADDR
// if p3 = 25 then
15631: LD_VAR 0 3
15635: PUSH
15636: LD_INT 25
15638: EQUAL
15639: IFFALSE 15649
// sSheik := true ;
15641: LD_ADDR_EXP 95
15645: PUSH
15646: LD_INT 1
15648: ST_TO_ADDR
// if p3 = 26 then
15649: LD_VAR 0 3
15653: PUSH
15654: LD_INT 26
15656: EQUAL
15657: IFFALSE 15667
// sEarthquake := true ;
15659: LD_ADDR_EXP 97
15663: PUSH
15664: LD_INT 1
15666: ST_TO_ADDR
// if p3 = 27 then
15667: LD_VAR 0 3
15671: PUSH
15672: LD_INT 27
15674: EQUAL
15675: IFFALSE 15685
// sAI := true ;
15677: LD_ADDR_EXP 98
15681: PUSH
15682: LD_INT 1
15684: ST_TO_ADDR
// if p3 = 28 then
15685: LD_VAR 0 3
15689: PUSH
15690: LD_INT 28
15692: EQUAL
15693: IFFALSE 15703
// sCargo := true ;
15695: LD_ADDR_EXP 101
15699: PUSH
15700: LD_INT 1
15702: ST_TO_ADDR
// if p3 = 29 then
15703: LD_VAR 0 3
15707: PUSH
15708: LD_INT 29
15710: EQUAL
15711: IFFALSE 15721
// sDLaser := true ;
15713: LD_ADDR_EXP 102
15717: PUSH
15718: LD_INT 1
15720: ST_TO_ADDR
// if p3 = 30 then
15721: LD_VAR 0 3
15725: PUSH
15726: LD_INT 30
15728: EQUAL
15729: IFFALSE 15739
// sExchange := true ;
15731: LD_ADDR_EXP 103
15735: PUSH
15736: LD_INT 1
15738: ST_TO_ADDR
// if p3 = 31 then
15739: LD_VAR 0 3
15743: PUSH
15744: LD_INT 31
15746: EQUAL
15747: IFFALSE 15757
// sFac := true ;
15749: LD_ADDR_EXP 104
15753: PUSH
15754: LD_INT 1
15756: ST_TO_ADDR
// if p3 = 32 then
15757: LD_VAR 0 3
15761: PUSH
15762: LD_INT 32
15764: EQUAL
15765: IFFALSE 15775
// sPower := true ;
15767: LD_ADDR_EXP 105
15771: PUSH
15772: LD_INT 1
15774: ST_TO_ADDR
// if p3 = 33 then
15775: LD_VAR 0 3
15779: PUSH
15780: LD_INT 33
15782: EQUAL
15783: IFFALSE 15793
// sRandom := true ;
15785: LD_ADDR_EXP 106
15789: PUSH
15790: LD_INT 1
15792: ST_TO_ADDR
// if p3 = 34 then
15793: LD_VAR 0 3
15797: PUSH
15798: LD_INT 34
15800: EQUAL
15801: IFFALSE 15811
// sShield := true ;
15803: LD_ADDR_EXP 107
15807: PUSH
15808: LD_INT 1
15810: ST_TO_ADDR
// if p3 = 35 then
15811: LD_VAR 0 3
15815: PUSH
15816: LD_INT 35
15818: EQUAL
15819: IFFALSE 15829
// sTime := true ;
15821: LD_ADDR_EXP 108
15825: PUSH
15826: LD_INT 1
15828: ST_TO_ADDR
// if p3 = 36 then
15829: LD_VAR 0 3
15833: PUSH
15834: LD_INT 36
15836: EQUAL
15837: IFFALSE 15847
// sTools := true ;
15839: LD_ADDR_EXP 109
15843: PUSH
15844: LD_INT 1
15846: ST_TO_ADDR
// if p3 = 101 then
15847: LD_VAR 0 3
15851: PUSH
15852: LD_INT 101
15854: EQUAL
15855: IFFALSE 15865
// sSold := true ;
15857: LD_ADDR_EXP 74
15861: PUSH
15862: LD_INT 1
15864: ST_TO_ADDR
// if p3 = 102 then
15865: LD_VAR 0 3
15869: PUSH
15870: LD_INT 102
15872: EQUAL
15873: IFFALSE 15883
// sDiff := true ;
15875: LD_ADDR_EXP 75
15879: PUSH
15880: LD_INT 1
15882: ST_TO_ADDR
// if p3 = 103 then
15883: LD_VAR 0 3
15887: PUSH
15888: LD_INT 103
15890: EQUAL
15891: IFFALSE 15901
// sFog := true ;
15893: LD_ADDR_EXP 78
15897: PUSH
15898: LD_INT 1
15900: ST_TO_ADDR
// if p3 = 104 then
15901: LD_VAR 0 3
15905: PUSH
15906: LD_INT 104
15908: EQUAL
15909: IFFALSE 15919
// sReset := true ;
15911: LD_ADDR_EXP 79
15915: PUSH
15916: LD_INT 1
15918: ST_TO_ADDR
// if p3 = 105 then
15919: LD_VAR 0 3
15923: PUSH
15924: LD_INT 105
15926: EQUAL
15927: IFFALSE 15937
// sSun := true ;
15929: LD_ADDR_EXP 80
15933: PUSH
15934: LD_INT 1
15936: ST_TO_ADDR
// if p3 = 106 then
15937: LD_VAR 0 3
15941: PUSH
15942: LD_INT 106
15944: EQUAL
15945: IFFALSE 15955
// sTiger := true ;
15947: LD_ADDR_EXP 76
15951: PUSH
15952: LD_INT 1
15954: ST_TO_ADDR
// if p3 = 107 then
15955: LD_VAR 0 3
15959: PUSH
15960: LD_INT 107
15962: EQUAL
15963: IFFALSE 15973
// sBomb := true ;
15965: LD_ADDR_EXP 77
15969: PUSH
15970: LD_INT 1
15972: ST_TO_ADDR
// if p3 = 108 then
15973: LD_VAR 0 3
15977: PUSH
15978: LD_INT 108
15980: EQUAL
15981: IFFALSE 15991
// sWound := true ;
15983: LD_ADDR_EXP 85
15987: PUSH
15988: LD_INT 1
15990: ST_TO_ADDR
// if p3 = 109 then
15991: LD_VAR 0 3
15995: PUSH
15996: LD_INT 109
15998: EQUAL
15999: IFFALSE 16009
// sBetray := true ;
16001: LD_ADDR_EXP 89
16005: PUSH
16006: LD_INT 1
16008: ST_TO_ADDR
// if p3 = 110 then
16009: LD_VAR 0 3
16013: PUSH
16014: LD_INT 110
16016: EQUAL
16017: IFFALSE 16027
// sContamin := true ;
16019: LD_ADDR_EXP 90
16023: PUSH
16024: LD_INT 1
16026: ST_TO_ADDR
// if p3 = 111 then
16027: LD_VAR 0 3
16031: PUSH
16032: LD_INT 111
16034: EQUAL
16035: IFFALSE 16045
// sOil := true ;
16037: LD_ADDR_EXP 92
16041: PUSH
16042: LD_INT 1
16044: ST_TO_ADDR
// if p3 = 112 then
16045: LD_VAR 0 3
16049: PUSH
16050: LD_INT 112
16052: EQUAL
16053: IFFALSE 16063
// sStu := true ;
16055: LD_ADDR_EXP 96
16059: PUSH
16060: LD_INT 1
16062: ST_TO_ADDR
// if p3 = 113 then
16063: LD_VAR 0 3
16067: PUSH
16068: LD_INT 113
16070: EQUAL
16071: IFFALSE 16081
// sBazooka := true ;
16073: LD_ADDR_EXP 99
16077: PUSH
16078: LD_INT 1
16080: ST_TO_ADDR
// if p3 = 114 then
16081: LD_VAR 0 3
16085: PUSH
16086: LD_INT 114
16088: EQUAL
16089: IFFALSE 16099
// sMortar := true ;
16091: LD_ADDR_EXP 100
16095: PUSH
16096: LD_INT 1
16098: ST_TO_ADDR
// if p3 = 115 then
16099: LD_VAR 0 3
16103: PUSH
16104: LD_INT 115
16106: EQUAL
16107: IFFALSE 16117
// sRanger := true ;
16109: LD_ADDR_EXP 110
16113: PUSH
16114: LD_INT 1
16116: ST_TO_ADDR
// end ; if p2 = 101 then
16117: LD_VAR 0 2
16121: PUSH
16122: LD_INT 101
16124: EQUAL
16125: IFFALSE 16253
// begin case p3 of 1 :
16127: LD_VAR 0 3
16131: PUSH
16132: LD_INT 1
16134: DOUBLE
16135: EQUAL
16136: IFTRUE 16140
16138: GO 16147
16140: POP
// hHackUnlimitedResources ; 2 :
16141: CALL 27290 0 0
16145: GO 16253
16147: LD_INT 2
16149: DOUBLE
16150: EQUAL
16151: IFTRUE 16155
16153: GO 16162
16155: POP
// hHackSetLevel10 ; 3 :
16156: CALL 27423 0 0
16160: GO 16253
16162: LD_INT 3
16164: DOUBLE
16165: EQUAL
16166: IFTRUE 16170
16168: GO 16177
16170: POP
// hHackSetLevel10YourUnits ; 4 :
16171: CALL 27508 0 0
16175: GO 16253
16177: LD_INT 4
16179: DOUBLE
16180: EQUAL
16181: IFTRUE 16185
16183: GO 16192
16185: POP
// hHackInvincible ; 5 :
16186: CALL 27956 0 0
16190: GO 16253
16192: LD_INT 5
16194: DOUBLE
16195: EQUAL
16196: IFTRUE 16200
16198: GO 16207
16200: POP
// hHackInvisible ; 6 :
16201: CALL 28067 0 0
16205: GO 16253
16207: LD_INT 6
16209: DOUBLE
16210: EQUAL
16211: IFTRUE 16215
16213: GO 16222
16215: POP
// hHackChangeYourSide ; 7 :
16216: CALL 28124 0 0
16220: GO 16253
16222: LD_INT 7
16224: DOUBLE
16225: EQUAL
16226: IFTRUE 16230
16228: GO 16237
16230: POP
// hHackChangeUnitSide ; 8 :
16231: CALL 28166 0 0
16235: GO 16253
16237: LD_INT 8
16239: DOUBLE
16240: EQUAL
16241: IFTRUE 16245
16243: GO 16252
16245: POP
// hHackFog ; end ;
16246: CALL 28267 0 0
16250: GO 16253
16252: POP
// end ; end ;
16253: LD_VAR 0 7
16257: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
16258: GO 16260
16260: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
16261: LD_STRING initStreamRollete();
16263: PPUSH
16264: CALL_OW 559
// InitStreamMode ;
16268: CALL 16277 0 0
// DefineStreamItems ( ) ;
16272: CALL 16717 0 0
// end ;
16276: END
// function InitStreamMode ; begin
16277: LD_INT 0
16279: PPUSH
// streamModeActive := false ;
16280: LD_ADDR_EXP 57
16284: PUSH
16285: LD_INT 0
16287: ST_TO_ADDR
// normalCounter := 36 ;
16288: LD_ADDR_EXP 58
16292: PUSH
16293: LD_INT 36
16295: ST_TO_ADDR
// hardcoreCounter := 16 ;
16296: LD_ADDR_EXP 59
16300: PUSH
16301: LD_INT 16
16303: ST_TO_ADDR
// sRocket := false ;
16304: LD_ADDR_EXP 62
16308: PUSH
16309: LD_INT 0
16311: ST_TO_ADDR
// sSpeed := false ;
16312: LD_ADDR_EXP 61
16316: PUSH
16317: LD_INT 0
16319: ST_TO_ADDR
// sEngine := false ;
16320: LD_ADDR_EXP 63
16324: PUSH
16325: LD_INT 0
16327: ST_TO_ADDR
// sSpec := false ;
16328: LD_ADDR_EXP 60
16332: PUSH
16333: LD_INT 0
16335: ST_TO_ADDR
// sLevel := false ;
16336: LD_ADDR_EXP 64
16340: PUSH
16341: LD_INT 0
16343: ST_TO_ADDR
// sArmoury := false ;
16344: LD_ADDR_EXP 65
16348: PUSH
16349: LD_INT 0
16351: ST_TO_ADDR
// sRadar := false ;
16352: LD_ADDR_EXP 66
16356: PUSH
16357: LD_INT 0
16359: ST_TO_ADDR
// sBunker := false ;
16360: LD_ADDR_EXP 67
16364: PUSH
16365: LD_INT 0
16367: ST_TO_ADDR
// sHack := false ;
16368: LD_ADDR_EXP 68
16372: PUSH
16373: LD_INT 0
16375: ST_TO_ADDR
// sFire := false ;
16376: LD_ADDR_EXP 69
16380: PUSH
16381: LD_INT 0
16383: ST_TO_ADDR
// sRefresh := false ;
16384: LD_ADDR_EXP 70
16388: PUSH
16389: LD_INT 0
16391: ST_TO_ADDR
// sExp := false ;
16392: LD_ADDR_EXP 71
16396: PUSH
16397: LD_INT 0
16399: ST_TO_ADDR
// sDepot := false ;
16400: LD_ADDR_EXP 72
16404: PUSH
16405: LD_INT 0
16407: ST_TO_ADDR
// sFlag := false ;
16408: LD_ADDR_EXP 73
16412: PUSH
16413: LD_INT 0
16415: ST_TO_ADDR
// sKamikadze := false ;
16416: LD_ADDR_EXP 81
16420: PUSH
16421: LD_INT 0
16423: ST_TO_ADDR
// sTroll := false ;
16424: LD_ADDR_EXP 82
16428: PUSH
16429: LD_INT 0
16431: ST_TO_ADDR
// sSlow := false ;
16432: LD_ADDR_EXP 83
16436: PUSH
16437: LD_INT 0
16439: ST_TO_ADDR
// sLack := false ;
16440: LD_ADDR_EXP 84
16444: PUSH
16445: LD_INT 0
16447: ST_TO_ADDR
// sTank := false ;
16448: LD_ADDR_EXP 86
16452: PUSH
16453: LD_INT 0
16455: ST_TO_ADDR
// sRemote := false ;
16456: LD_ADDR_EXP 87
16460: PUSH
16461: LD_INT 0
16463: ST_TO_ADDR
// sPowell := false ;
16464: LD_ADDR_EXP 88
16468: PUSH
16469: LD_INT 0
16471: ST_TO_ADDR
// sTeleport := false ;
16472: LD_ADDR_EXP 91
16476: PUSH
16477: LD_INT 0
16479: ST_TO_ADDR
// sOilTower := false ;
16480: LD_ADDR_EXP 93
16484: PUSH
16485: LD_INT 0
16487: ST_TO_ADDR
// sShovel := false ;
16488: LD_ADDR_EXP 94
16492: PUSH
16493: LD_INT 0
16495: ST_TO_ADDR
// sSheik := false ;
16496: LD_ADDR_EXP 95
16500: PUSH
16501: LD_INT 0
16503: ST_TO_ADDR
// sEarthquake := false ;
16504: LD_ADDR_EXP 97
16508: PUSH
16509: LD_INT 0
16511: ST_TO_ADDR
// sAI := false ;
16512: LD_ADDR_EXP 98
16516: PUSH
16517: LD_INT 0
16519: ST_TO_ADDR
// sCargo := false ;
16520: LD_ADDR_EXP 101
16524: PUSH
16525: LD_INT 0
16527: ST_TO_ADDR
// sDLaser := false ;
16528: LD_ADDR_EXP 102
16532: PUSH
16533: LD_INT 0
16535: ST_TO_ADDR
// sExchange := false ;
16536: LD_ADDR_EXP 103
16540: PUSH
16541: LD_INT 0
16543: ST_TO_ADDR
// sFac := false ;
16544: LD_ADDR_EXP 104
16548: PUSH
16549: LD_INT 0
16551: ST_TO_ADDR
// sPower := false ;
16552: LD_ADDR_EXP 105
16556: PUSH
16557: LD_INT 0
16559: ST_TO_ADDR
// sRandom := false ;
16560: LD_ADDR_EXP 106
16564: PUSH
16565: LD_INT 0
16567: ST_TO_ADDR
// sShield := false ;
16568: LD_ADDR_EXP 107
16572: PUSH
16573: LD_INT 0
16575: ST_TO_ADDR
// sTime := false ;
16576: LD_ADDR_EXP 108
16580: PUSH
16581: LD_INT 0
16583: ST_TO_ADDR
// sTools := false ;
16584: LD_ADDR_EXP 109
16588: PUSH
16589: LD_INT 0
16591: ST_TO_ADDR
// sSold := false ;
16592: LD_ADDR_EXP 74
16596: PUSH
16597: LD_INT 0
16599: ST_TO_ADDR
// sDiff := false ;
16600: LD_ADDR_EXP 75
16604: PUSH
16605: LD_INT 0
16607: ST_TO_ADDR
// sFog := false ;
16608: LD_ADDR_EXP 78
16612: PUSH
16613: LD_INT 0
16615: ST_TO_ADDR
// sReset := false ;
16616: LD_ADDR_EXP 79
16620: PUSH
16621: LD_INT 0
16623: ST_TO_ADDR
// sSun := false ;
16624: LD_ADDR_EXP 80
16628: PUSH
16629: LD_INT 0
16631: ST_TO_ADDR
// sTiger := false ;
16632: LD_ADDR_EXP 76
16636: PUSH
16637: LD_INT 0
16639: ST_TO_ADDR
// sBomb := false ;
16640: LD_ADDR_EXP 77
16644: PUSH
16645: LD_INT 0
16647: ST_TO_ADDR
// sWound := false ;
16648: LD_ADDR_EXP 85
16652: PUSH
16653: LD_INT 0
16655: ST_TO_ADDR
// sBetray := false ;
16656: LD_ADDR_EXP 89
16660: PUSH
16661: LD_INT 0
16663: ST_TO_ADDR
// sContamin := false ;
16664: LD_ADDR_EXP 90
16668: PUSH
16669: LD_INT 0
16671: ST_TO_ADDR
// sOil := false ;
16672: LD_ADDR_EXP 92
16676: PUSH
16677: LD_INT 0
16679: ST_TO_ADDR
// sStu := false ;
16680: LD_ADDR_EXP 96
16684: PUSH
16685: LD_INT 0
16687: ST_TO_ADDR
// sBazooka := false ;
16688: LD_ADDR_EXP 99
16692: PUSH
16693: LD_INT 0
16695: ST_TO_ADDR
// sMortar := false ;
16696: LD_ADDR_EXP 100
16700: PUSH
16701: LD_INT 0
16703: ST_TO_ADDR
// sRanger := false ;
16704: LD_ADDR_EXP 110
16708: PUSH
16709: LD_INT 0
16711: ST_TO_ADDR
// end ;
16712: LD_VAR 0 1
16716: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
16717: LD_INT 0
16719: PPUSH
16720: PPUSH
16721: PPUSH
16722: PPUSH
16723: PPUSH
// result := [ ] ;
16724: LD_ADDR_VAR 0 1
16728: PUSH
16729: EMPTY
16730: ST_TO_ADDR
// if campaign_id = 1 then
16731: LD_OWVAR 69
16735: PUSH
16736: LD_INT 1
16738: EQUAL
16739: IFFALSE 19677
// begin case mission_number of 1 :
16741: LD_OWVAR 70
16745: PUSH
16746: LD_INT 1
16748: DOUBLE
16749: EQUAL
16750: IFTRUE 16754
16752: GO 16818
16754: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
16755: LD_ADDR_VAR 0 1
16759: PUSH
16760: LD_INT 2
16762: PUSH
16763: LD_INT 4
16765: PUSH
16766: LD_INT 11
16768: PUSH
16769: LD_INT 12
16771: PUSH
16772: LD_INT 15
16774: PUSH
16775: LD_INT 16
16777: PUSH
16778: LD_INT 22
16780: PUSH
16781: LD_INT 23
16783: PUSH
16784: LD_INT 26
16786: PUSH
16787: EMPTY
16788: LIST
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: LIST
16795: LIST
16796: LIST
16797: PUSH
16798: LD_INT 101
16800: PUSH
16801: LD_INT 102
16803: PUSH
16804: LD_INT 106
16806: PUSH
16807: EMPTY
16808: LIST
16809: LIST
16810: LIST
16811: PUSH
16812: EMPTY
16813: LIST
16814: LIST
16815: ST_TO_ADDR
16816: GO 19675
16818: LD_INT 2
16820: DOUBLE
16821: EQUAL
16822: IFTRUE 16826
16824: GO 16898
16826: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
16827: LD_ADDR_VAR 0 1
16831: PUSH
16832: LD_INT 2
16834: PUSH
16835: LD_INT 4
16837: PUSH
16838: LD_INT 11
16840: PUSH
16841: LD_INT 12
16843: PUSH
16844: LD_INT 15
16846: PUSH
16847: LD_INT 16
16849: PUSH
16850: LD_INT 22
16852: PUSH
16853: LD_INT 23
16855: PUSH
16856: LD_INT 26
16858: PUSH
16859: EMPTY
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: PUSH
16870: LD_INT 101
16872: PUSH
16873: LD_INT 102
16875: PUSH
16876: LD_INT 105
16878: PUSH
16879: LD_INT 106
16881: PUSH
16882: LD_INT 108
16884: PUSH
16885: EMPTY
16886: LIST
16887: LIST
16888: LIST
16889: LIST
16890: LIST
16891: PUSH
16892: EMPTY
16893: LIST
16894: LIST
16895: ST_TO_ADDR
16896: GO 19675
16898: LD_INT 3
16900: DOUBLE
16901: EQUAL
16902: IFTRUE 16906
16904: GO 16982
16906: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
16907: LD_ADDR_VAR 0 1
16911: PUSH
16912: LD_INT 2
16914: PUSH
16915: LD_INT 4
16917: PUSH
16918: LD_INT 5
16920: PUSH
16921: LD_INT 11
16923: PUSH
16924: LD_INT 12
16926: PUSH
16927: LD_INT 15
16929: PUSH
16930: LD_INT 16
16932: PUSH
16933: LD_INT 22
16935: PUSH
16936: LD_INT 26
16938: PUSH
16939: LD_INT 36
16941: PUSH
16942: EMPTY
16943: LIST
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: LIST
16951: LIST
16952: LIST
16953: PUSH
16954: LD_INT 101
16956: PUSH
16957: LD_INT 102
16959: PUSH
16960: LD_INT 105
16962: PUSH
16963: LD_INT 106
16965: PUSH
16966: LD_INT 108
16968: PUSH
16969: EMPTY
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: PUSH
16976: EMPTY
16977: LIST
16978: LIST
16979: ST_TO_ADDR
16980: GO 19675
16982: LD_INT 4
16984: DOUBLE
16985: EQUAL
16986: IFTRUE 16990
16988: GO 17074
16990: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
16991: LD_ADDR_VAR 0 1
16995: PUSH
16996: LD_INT 2
16998: PUSH
16999: LD_INT 4
17001: PUSH
17002: LD_INT 5
17004: PUSH
17005: LD_INT 8
17007: PUSH
17008: LD_INT 11
17010: PUSH
17011: LD_INT 12
17013: PUSH
17014: LD_INT 15
17016: PUSH
17017: LD_INT 16
17019: PUSH
17020: LD_INT 22
17022: PUSH
17023: LD_INT 23
17025: PUSH
17026: LD_INT 26
17028: PUSH
17029: LD_INT 36
17031: PUSH
17032: EMPTY
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: PUSH
17046: LD_INT 101
17048: PUSH
17049: LD_INT 102
17051: PUSH
17052: LD_INT 105
17054: PUSH
17055: LD_INT 106
17057: PUSH
17058: LD_INT 108
17060: PUSH
17061: EMPTY
17062: LIST
17063: LIST
17064: LIST
17065: LIST
17066: LIST
17067: PUSH
17068: EMPTY
17069: LIST
17070: LIST
17071: ST_TO_ADDR
17072: GO 19675
17074: LD_INT 5
17076: DOUBLE
17077: EQUAL
17078: IFTRUE 17082
17080: GO 17182
17082: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
17083: LD_ADDR_VAR 0 1
17087: PUSH
17088: LD_INT 2
17090: PUSH
17091: LD_INT 4
17093: PUSH
17094: LD_INT 5
17096: PUSH
17097: LD_INT 6
17099: PUSH
17100: LD_INT 8
17102: PUSH
17103: LD_INT 11
17105: PUSH
17106: LD_INT 12
17108: PUSH
17109: LD_INT 15
17111: PUSH
17112: LD_INT 16
17114: PUSH
17115: LD_INT 22
17117: PUSH
17118: LD_INT 23
17120: PUSH
17121: LD_INT 25
17123: PUSH
17124: LD_INT 26
17126: PUSH
17127: LD_INT 36
17129: PUSH
17130: EMPTY
17131: LIST
17132: LIST
17133: LIST
17134: LIST
17135: LIST
17136: LIST
17137: LIST
17138: LIST
17139: LIST
17140: LIST
17141: LIST
17142: LIST
17143: LIST
17144: LIST
17145: PUSH
17146: LD_INT 101
17148: PUSH
17149: LD_INT 102
17151: PUSH
17152: LD_INT 105
17154: PUSH
17155: LD_INT 106
17157: PUSH
17158: LD_INT 108
17160: PUSH
17161: LD_INT 109
17163: PUSH
17164: LD_INT 112
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: LIST
17171: LIST
17172: LIST
17173: LIST
17174: LIST
17175: PUSH
17176: EMPTY
17177: LIST
17178: LIST
17179: ST_TO_ADDR
17180: GO 19675
17182: LD_INT 6
17184: DOUBLE
17185: EQUAL
17186: IFTRUE 17190
17188: GO 17310
17190: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
17191: LD_ADDR_VAR 0 1
17195: PUSH
17196: LD_INT 2
17198: PUSH
17199: LD_INT 4
17201: PUSH
17202: LD_INT 5
17204: PUSH
17205: LD_INT 6
17207: PUSH
17208: LD_INT 8
17210: PUSH
17211: LD_INT 11
17213: PUSH
17214: LD_INT 12
17216: PUSH
17217: LD_INT 15
17219: PUSH
17220: LD_INT 16
17222: PUSH
17223: LD_INT 20
17225: PUSH
17226: LD_INT 21
17228: PUSH
17229: LD_INT 22
17231: PUSH
17232: LD_INT 23
17234: PUSH
17235: LD_INT 25
17237: PUSH
17238: LD_INT 26
17240: PUSH
17241: LD_INT 30
17243: PUSH
17244: LD_INT 31
17246: PUSH
17247: LD_INT 32
17249: PUSH
17250: LD_INT 36
17252: PUSH
17253: EMPTY
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: PUSH
17274: LD_INT 101
17276: PUSH
17277: LD_INT 102
17279: PUSH
17280: LD_INT 105
17282: PUSH
17283: LD_INT 106
17285: PUSH
17286: LD_INT 108
17288: PUSH
17289: LD_INT 109
17291: PUSH
17292: LD_INT 112
17294: PUSH
17295: EMPTY
17296: LIST
17297: LIST
17298: LIST
17299: LIST
17300: LIST
17301: LIST
17302: LIST
17303: PUSH
17304: EMPTY
17305: LIST
17306: LIST
17307: ST_TO_ADDR
17308: GO 19675
17310: LD_INT 7
17312: DOUBLE
17313: EQUAL
17314: IFTRUE 17318
17316: GO 17418
17318: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
17319: LD_ADDR_VAR 0 1
17323: PUSH
17324: LD_INT 2
17326: PUSH
17327: LD_INT 4
17329: PUSH
17330: LD_INT 5
17332: PUSH
17333: LD_INT 7
17335: PUSH
17336: LD_INT 11
17338: PUSH
17339: LD_INT 12
17341: PUSH
17342: LD_INT 15
17344: PUSH
17345: LD_INT 16
17347: PUSH
17348: LD_INT 20
17350: PUSH
17351: LD_INT 21
17353: PUSH
17354: LD_INT 22
17356: PUSH
17357: LD_INT 23
17359: PUSH
17360: LD_INT 25
17362: PUSH
17363: LD_INT 26
17365: PUSH
17366: EMPTY
17367: LIST
17368: LIST
17369: LIST
17370: LIST
17371: LIST
17372: LIST
17373: LIST
17374: LIST
17375: LIST
17376: LIST
17377: LIST
17378: LIST
17379: LIST
17380: LIST
17381: PUSH
17382: LD_INT 101
17384: PUSH
17385: LD_INT 102
17387: PUSH
17388: LD_INT 103
17390: PUSH
17391: LD_INT 105
17393: PUSH
17394: LD_INT 106
17396: PUSH
17397: LD_INT 108
17399: PUSH
17400: LD_INT 112
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: LIST
17410: LIST
17411: PUSH
17412: EMPTY
17413: LIST
17414: LIST
17415: ST_TO_ADDR
17416: GO 19675
17418: LD_INT 8
17420: DOUBLE
17421: EQUAL
17422: IFTRUE 17426
17424: GO 17554
17426: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
17427: LD_ADDR_VAR 0 1
17431: PUSH
17432: LD_INT 2
17434: PUSH
17435: LD_INT 4
17437: PUSH
17438: LD_INT 5
17440: PUSH
17441: LD_INT 6
17443: PUSH
17444: LD_INT 7
17446: PUSH
17447: LD_INT 8
17449: PUSH
17450: LD_INT 11
17452: PUSH
17453: LD_INT 12
17455: PUSH
17456: LD_INT 15
17458: PUSH
17459: LD_INT 16
17461: PUSH
17462: LD_INT 20
17464: PUSH
17465: LD_INT 21
17467: PUSH
17468: LD_INT 22
17470: PUSH
17471: LD_INT 23
17473: PUSH
17474: LD_INT 25
17476: PUSH
17477: LD_INT 26
17479: PUSH
17480: LD_INT 30
17482: PUSH
17483: LD_INT 31
17485: PUSH
17486: LD_INT 32
17488: PUSH
17489: LD_INT 36
17491: PUSH
17492: EMPTY
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: LIST
17498: LIST
17499: LIST
17500: LIST
17501: LIST
17502: LIST
17503: LIST
17504: LIST
17505: LIST
17506: LIST
17507: LIST
17508: LIST
17509: LIST
17510: LIST
17511: LIST
17512: LIST
17513: PUSH
17514: LD_INT 101
17516: PUSH
17517: LD_INT 102
17519: PUSH
17520: LD_INT 103
17522: PUSH
17523: LD_INT 105
17525: PUSH
17526: LD_INT 106
17528: PUSH
17529: LD_INT 108
17531: PUSH
17532: LD_INT 109
17534: PUSH
17535: LD_INT 112
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: LIST
17542: LIST
17543: LIST
17544: LIST
17545: LIST
17546: LIST
17547: PUSH
17548: EMPTY
17549: LIST
17550: LIST
17551: ST_TO_ADDR
17552: GO 19675
17554: LD_INT 9
17556: DOUBLE
17557: EQUAL
17558: IFTRUE 17562
17560: GO 17698
17562: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
17563: LD_ADDR_VAR 0 1
17567: PUSH
17568: LD_INT 2
17570: PUSH
17571: LD_INT 4
17573: PUSH
17574: LD_INT 5
17576: PUSH
17577: LD_INT 6
17579: PUSH
17580: LD_INT 7
17582: PUSH
17583: LD_INT 8
17585: PUSH
17586: LD_INT 11
17588: PUSH
17589: LD_INT 12
17591: PUSH
17592: LD_INT 15
17594: PUSH
17595: LD_INT 16
17597: PUSH
17598: LD_INT 20
17600: PUSH
17601: LD_INT 21
17603: PUSH
17604: LD_INT 22
17606: PUSH
17607: LD_INT 23
17609: PUSH
17610: LD_INT 25
17612: PUSH
17613: LD_INT 26
17615: PUSH
17616: LD_INT 28
17618: PUSH
17619: LD_INT 30
17621: PUSH
17622: LD_INT 31
17624: PUSH
17625: LD_INT 32
17627: PUSH
17628: LD_INT 36
17630: PUSH
17631: EMPTY
17632: LIST
17633: LIST
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: LIST
17639: LIST
17640: LIST
17641: LIST
17642: LIST
17643: LIST
17644: LIST
17645: LIST
17646: LIST
17647: LIST
17648: LIST
17649: LIST
17650: LIST
17651: LIST
17652: LIST
17653: PUSH
17654: LD_INT 101
17656: PUSH
17657: LD_INT 102
17659: PUSH
17660: LD_INT 103
17662: PUSH
17663: LD_INT 105
17665: PUSH
17666: LD_INT 106
17668: PUSH
17669: LD_INT 108
17671: PUSH
17672: LD_INT 109
17674: PUSH
17675: LD_INT 112
17677: PUSH
17678: LD_INT 114
17680: PUSH
17681: EMPTY
17682: LIST
17683: LIST
17684: LIST
17685: LIST
17686: LIST
17687: LIST
17688: LIST
17689: LIST
17690: LIST
17691: PUSH
17692: EMPTY
17693: LIST
17694: LIST
17695: ST_TO_ADDR
17696: GO 19675
17698: LD_INT 10
17700: DOUBLE
17701: EQUAL
17702: IFTRUE 17706
17704: GO 17890
17706: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
17707: LD_ADDR_VAR 0 1
17711: PUSH
17712: LD_INT 2
17714: PUSH
17715: LD_INT 4
17717: PUSH
17718: LD_INT 5
17720: PUSH
17721: LD_INT 6
17723: PUSH
17724: LD_INT 7
17726: PUSH
17727: LD_INT 8
17729: PUSH
17730: LD_INT 9
17732: PUSH
17733: LD_INT 10
17735: PUSH
17736: LD_INT 11
17738: PUSH
17739: LD_INT 12
17741: PUSH
17742: LD_INT 13
17744: PUSH
17745: LD_INT 14
17747: PUSH
17748: LD_INT 15
17750: PUSH
17751: LD_INT 16
17753: PUSH
17754: LD_INT 17
17756: PUSH
17757: LD_INT 18
17759: PUSH
17760: LD_INT 19
17762: PUSH
17763: LD_INT 20
17765: PUSH
17766: LD_INT 21
17768: PUSH
17769: LD_INT 22
17771: PUSH
17772: LD_INT 23
17774: PUSH
17775: LD_INT 24
17777: PUSH
17778: LD_INT 25
17780: PUSH
17781: LD_INT 26
17783: PUSH
17784: LD_INT 28
17786: PUSH
17787: LD_INT 30
17789: PUSH
17790: LD_INT 31
17792: PUSH
17793: LD_INT 32
17795: PUSH
17796: LD_INT 36
17798: PUSH
17799: EMPTY
17800: LIST
17801: LIST
17802: LIST
17803: LIST
17804: LIST
17805: LIST
17806: LIST
17807: LIST
17808: LIST
17809: LIST
17810: LIST
17811: LIST
17812: LIST
17813: LIST
17814: LIST
17815: LIST
17816: LIST
17817: LIST
17818: LIST
17819: LIST
17820: LIST
17821: LIST
17822: LIST
17823: LIST
17824: LIST
17825: LIST
17826: LIST
17827: LIST
17828: LIST
17829: PUSH
17830: LD_INT 101
17832: PUSH
17833: LD_INT 102
17835: PUSH
17836: LD_INT 103
17838: PUSH
17839: LD_INT 104
17841: PUSH
17842: LD_INT 105
17844: PUSH
17845: LD_INT 106
17847: PUSH
17848: LD_INT 107
17850: PUSH
17851: LD_INT 108
17853: PUSH
17854: LD_INT 109
17856: PUSH
17857: LD_INT 110
17859: PUSH
17860: LD_INT 111
17862: PUSH
17863: LD_INT 112
17865: PUSH
17866: LD_INT 114
17868: PUSH
17869: EMPTY
17870: LIST
17871: LIST
17872: LIST
17873: LIST
17874: LIST
17875: LIST
17876: LIST
17877: LIST
17878: LIST
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: ST_TO_ADDR
17888: GO 19675
17890: LD_INT 11
17892: DOUBLE
17893: EQUAL
17894: IFTRUE 17898
17896: GO 18090
17898: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
17899: LD_ADDR_VAR 0 1
17903: PUSH
17904: LD_INT 2
17906: PUSH
17907: LD_INT 3
17909: PUSH
17910: LD_INT 4
17912: PUSH
17913: LD_INT 5
17915: PUSH
17916: LD_INT 6
17918: PUSH
17919: LD_INT 7
17921: PUSH
17922: LD_INT 8
17924: PUSH
17925: LD_INT 9
17927: PUSH
17928: LD_INT 10
17930: PUSH
17931: LD_INT 11
17933: PUSH
17934: LD_INT 12
17936: PUSH
17937: LD_INT 13
17939: PUSH
17940: LD_INT 14
17942: PUSH
17943: LD_INT 15
17945: PUSH
17946: LD_INT 16
17948: PUSH
17949: LD_INT 17
17951: PUSH
17952: LD_INT 18
17954: PUSH
17955: LD_INT 19
17957: PUSH
17958: LD_INT 20
17960: PUSH
17961: LD_INT 21
17963: PUSH
17964: LD_INT 22
17966: PUSH
17967: LD_INT 23
17969: PUSH
17970: LD_INT 24
17972: PUSH
17973: LD_INT 25
17975: PUSH
17976: LD_INT 26
17978: PUSH
17979: LD_INT 28
17981: PUSH
17982: LD_INT 30
17984: PUSH
17985: LD_INT 31
17987: PUSH
17988: LD_INT 32
17990: PUSH
17991: LD_INT 34
17993: PUSH
17994: LD_INT 36
17996: PUSH
17997: EMPTY
17998: LIST
17999: LIST
18000: LIST
18001: LIST
18002: LIST
18003: LIST
18004: LIST
18005: LIST
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: LIST
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: PUSH
18030: LD_INT 101
18032: PUSH
18033: LD_INT 102
18035: PUSH
18036: LD_INT 103
18038: PUSH
18039: LD_INT 104
18041: PUSH
18042: LD_INT 105
18044: PUSH
18045: LD_INT 106
18047: PUSH
18048: LD_INT 107
18050: PUSH
18051: LD_INT 108
18053: PUSH
18054: LD_INT 109
18056: PUSH
18057: LD_INT 110
18059: PUSH
18060: LD_INT 111
18062: PUSH
18063: LD_INT 112
18065: PUSH
18066: LD_INT 114
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: LIST
18078: LIST
18079: LIST
18080: LIST
18081: LIST
18082: LIST
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: ST_TO_ADDR
18088: GO 19675
18090: LD_INT 12
18092: DOUBLE
18093: EQUAL
18094: IFTRUE 18098
18096: GO 18306
18098: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
18099: LD_ADDR_VAR 0 1
18103: PUSH
18104: LD_INT 1
18106: PUSH
18107: LD_INT 2
18109: PUSH
18110: LD_INT 3
18112: PUSH
18113: LD_INT 4
18115: PUSH
18116: LD_INT 5
18118: PUSH
18119: LD_INT 6
18121: PUSH
18122: LD_INT 7
18124: PUSH
18125: LD_INT 8
18127: PUSH
18128: LD_INT 9
18130: PUSH
18131: LD_INT 10
18133: PUSH
18134: LD_INT 11
18136: PUSH
18137: LD_INT 12
18139: PUSH
18140: LD_INT 13
18142: PUSH
18143: LD_INT 14
18145: PUSH
18146: LD_INT 15
18148: PUSH
18149: LD_INT 16
18151: PUSH
18152: LD_INT 17
18154: PUSH
18155: LD_INT 18
18157: PUSH
18158: LD_INT 19
18160: PUSH
18161: LD_INT 20
18163: PUSH
18164: LD_INT 21
18166: PUSH
18167: LD_INT 22
18169: PUSH
18170: LD_INT 23
18172: PUSH
18173: LD_INT 24
18175: PUSH
18176: LD_INT 25
18178: PUSH
18179: LD_INT 26
18181: PUSH
18182: LD_INT 27
18184: PUSH
18185: LD_INT 28
18187: PUSH
18188: LD_INT 30
18190: PUSH
18191: LD_INT 31
18193: PUSH
18194: LD_INT 32
18196: PUSH
18197: LD_INT 33
18199: PUSH
18200: LD_INT 34
18202: PUSH
18203: LD_INT 36
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: LIST
18214: LIST
18215: LIST
18216: LIST
18217: LIST
18218: LIST
18219: LIST
18220: LIST
18221: LIST
18222: LIST
18223: LIST
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: LIST
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: LIST
18240: LIST
18241: PUSH
18242: LD_INT 101
18244: PUSH
18245: LD_INT 102
18247: PUSH
18248: LD_INT 103
18250: PUSH
18251: LD_INT 104
18253: PUSH
18254: LD_INT 105
18256: PUSH
18257: LD_INT 106
18259: PUSH
18260: LD_INT 107
18262: PUSH
18263: LD_INT 108
18265: PUSH
18266: LD_INT 109
18268: PUSH
18269: LD_INT 110
18271: PUSH
18272: LD_INT 111
18274: PUSH
18275: LD_INT 112
18277: PUSH
18278: LD_INT 113
18280: PUSH
18281: LD_INT 114
18283: PUSH
18284: EMPTY
18285: LIST
18286: LIST
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: LIST
18294: LIST
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: PUSH
18300: EMPTY
18301: LIST
18302: LIST
18303: ST_TO_ADDR
18304: GO 19675
18306: LD_INT 13
18308: DOUBLE
18309: EQUAL
18310: IFTRUE 18314
18312: GO 18510
18314: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
18315: LD_ADDR_VAR 0 1
18319: PUSH
18320: LD_INT 1
18322: PUSH
18323: LD_INT 2
18325: PUSH
18326: LD_INT 3
18328: PUSH
18329: LD_INT 4
18331: PUSH
18332: LD_INT 5
18334: PUSH
18335: LD_INT 8
18337: PUSH
18338: LD_INT 9
18340: PUSH
18341: LD_INT 10
18343: PUSH
18344: LD_INT 11
18346: PUSH
18347: LD_INT 12
18349: PUSH
18350: LD_INT 14
18352: PUSH
18353: LD_INT 15
18355: PUSH
18356: LD_INT 16
18358: PUSH
18359: LD_INT 17
18361: PUSH
18362: LD_INT 18
18364: PUSH
18365: LD_INT 19
18367: PUSH
18368: LD_INT 20
18370: PUSH
18371: LD_INT 21
18373: PUSH
18374: LD_INT 22
18376: PUSH
18377: LD_INT 23
18379: PUSH
18380: LD_INT 24
18382: PUSH
18383: LD_INT 25
18385: PUSH
18386: LD_INT 26
18388: PUSH
18389: LD_INT 27
18391: PUSH
18392: LD_INT 28
18394: PUSH
18395: LD_INT 30
18397: PUSH
18398: LD_INT 31
18400: PUSH
18401: LD_INT 32
18403: PUSH
18404: LD_INT 33
18406: PUSH
18407: LD_INT 34
18409: PUSH
18410: LD_INT 36
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: LIST
18417: LIST
18418: LIST
18419: LIST
18420: LIST
18421: LIST
18422: LIST
18423: LIST
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: LIST
18433: LIST
18434: LIST
18435: LIST
18436: LIST
18437: LIST
18438: LIST
18439: LIST
18440: LIST
18441: LIST
18442: LIST
18443: LIST
18444: LIST
18445: PUSH
18446: LD_INT 101
18448: PUSH
18449: LD_INT 102
18451: PUSH
18452: LD_INT 103
18454: PUSH
18455: LD_INT 104
18457: PUSH
18458: LD_INT 105
18460: PUSH
18461: LD_INT 106
18463: PUSH
18464: LD_INT 107
18466: PUSH
18467: LD_INT 108
18469: PUSH
18470: LD_INT 109
18472: PUSH
18473: LD_INT 110
18475: PUSH
18476: LD_INT 111
18478: PUSH
18479: LD_INT 112
18481: PUSH
18482: LD_INT 113
18484: PUSH
18485: LD_INT 114
18487: PUSH
18488: EMPTY
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: LIST
18495: LIST
18496: LIST
18497: LIST
18498: LIST
18499: LIST
18500: LIST
18501: LIST
18502: LIST
18503: PUSH
18504: EMPTY
18505: LIST
18506: LIST
18507: ST_TO_ADDR
18508: GO 19675
18510: LD_INT 14
18512: DOUBLE
18513: EQUAL
18514: IFTRUE 18518
18516: GO 18730
18518: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
18519: LD_ADDR_VAR 0 1
18523: PUSH
18524: LD_INT 1
18526: PUSH
18527: LD_INT 2
18529: PUSH
18530: LD_INT 3
18532: PUSH
18533: LD_INT 4
18535: PUSH
18536: LD_INT 5
18538: PUSH
18539: LD_INT 6
18541: PUSH
18542: LD_INT 7
18544: PUSH
18545: LD_INT 8
18547: PUSH
18548: LD_INT 9
18550: PUSH
18551: LD_INT 10
18553: PUSH
18554: LD_INT 11
18556: PUSH
18557: LD_INT 12
18559: PUSH
18560: LD_INT 13
18562: PUSH
18563: LD_INT 14
18565: PUSH
18566: LD_INT 15
18568: PUSH
18569: LD_INT 16
18571: PUSH
18572: LD_INT 17
18574: PUSH
18575: LD_INT 18
18577: PUSH
18578: LD_INT 19
18580: PUSH
18581: LD_INT 20
18583: PUSH
18584: LD_INT 21
18586: PUSH
18587: LD_INT 22
18589: PUSH
18590: LD_INT 23
18592: PUSH
18593: LD_INT 24
18595: PUSH
18596: LD_INT 25
18598: PUSH
18599: LD_INT 26
18601: PUSH
18602: LD_INT 27
18604: PUSH
18605: LD_INT 28
18607: PUSH
18608: LD_INT 29
18610: PUSH
18611: LD_INT 30
18613: PUSH
18614: LD_INT 31
18616: PUSH
18617: LD_INT 32
18619: PUSH
18620: LD_INT 33
18622: PUSH
18623: LD_INT 34
18625: PUSH
18626: LD_INT 36
18628: PUSH
18629: EMPTY
18630: LIST
18631: LIST
18632: LIST
18633: LIST
18634: LIST
18635: LIST
18636: LIST
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: LIST
18648: LIST
18649: LIST
18650: LIST
18651: LIST
18652: LIST
18653: LIST
18654: LIST
18655: LIST
18656: LIST
18657: LIST
18658: LIST
18659: LIST
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: PUSH
18666: LD_INT 101
18668: PUSH
18669: LD_INT 102
18671: PUSH
18672: LD_INT 103
18674: PUSH
18675: LD_INT 104
18677: PUSH
18678: LD_INT 105
18680: PUSH
18681: LD_INT 106
18683: PUSH
18684: LD_INT 107
18686: PUSH
18687: LD_INT 108
18689: PUSH
18690: LD_INT 109
18692: PUSH
18693: LD_INT 110
18695: PUSH
18696: LD_INT 111
18698: PUSH
18699: LD_INT 112
18701: PUSH
18702: LD_INT 113
18704: PUSH
18705: LD_INT 114
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: LIST
18717: LIST
18718: LIST
18719: LIST
18720: LIST
18721: LIST
18722: LIST
18723: PUSH
18724: EMPTY
18725: LIST
18726: LIST
18727: ST_TO_ADDR
18728: GO 19675
18730: LD_INT 15
18732: DOUBLE
18733: EQUAL
18734: IFTRUE 18738
18736: GO 18950
18738: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
18739: LD_ADDR_VAR 0 1
18743: PUSH
18744: LD_INT 1
18746: PUSH
18747: LD_INT 2
18749: PUSH
18750: LD_INT 3
18752: PUSH
18753: LD_INT 4
18755: PUSH
18756: LD_INT 5
18758: PUSH
18759: LD_INT 6
18761: PUSH
18762: LD_INT 7
18764: PUSH
18765: LD_INT 8
18767: PUSH
18768: LD_INT 9
18770: PUSH
18771: LD_INT 10
18773: PUSH
18774: LD_INT 11
18776: PUSH
18777: LD_INT 12
18779: PUSH
18780: LD_INT 13
18782: PUSH
18783: LD_INT 14
18785: PUSH
18786: LD_INT 15
18788: PUSH
18789: LD_INT 16
18791: PUSH
18792: LD_INT 17
18794: PUSH
18795: LD_INT 18
18797: PUSH
18798: LD_INT 19
18800: PUSH
18801: LD_INT 20
18803: PUSH
18804: LD_INT 21
18806: PUSH
18807: LD_INT 22
18809: PUSH
18810: LD_INT 23
18812: PUSH
18813: LD_INT 24
18815: PUSH
18816: LD_INT 25
18818: PUSH
18819: LD_INT 26
18821: PUSH
18822: LD_INT 27
18824: PUSH
18825: LD_INT 28
18827: PUSH
18828: LD_INT 29
18830: PUSH
18831: LD_INT 30
18833: PUSH
18834: LD_INT 31
18836: PUSH
18837: LD_INT 32
18839: PUSH
18840: LD_INT 33
18842: PUSH
18843: LD_INT 34
18845: PUSH
18846: LD_INT 36
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: PUSH
18886: LD_INT 101
18888: PUSH
18889: LD_INT 102
18891: PUSH
18892: LD_INT 103
18894: PUSH
18895: LD_INT 104
18897: PUSH
18898: LD_INT 105
18900: PUSH
18901: LD_INT 106
18903: PUSH
18904: LD_INT 107
18906: PUSH
18907: LD_INT 108
18909: PUSH
18910: LD_INT 109
18912: PUSH
18913: LD_INT 110
18915: PUSH
18916: LD_INT 111
18918: PUSH
18919: LD_INT 112
18921: PUSH
18922: LD_INT 113
18924: PUSH
18925: LD_INT 114
18927: PUSH
18928: EMPTY
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: LIST
18941: LIST
18942: LIST
18943: PUSH
18944: EMPTY
18945: LIST
18946: LIST
18947: ST_TO_ADDR
18948: GO 19675
18950: LD_INT 16
18952: DOUBLE
18953: EQUAL
18954: IFTRUE 18958
18956: GO 19082
18958: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
18959: LD_ADDR_VAR 0 1
18963: PUSH
18964: LD_INT 2
18966: PUSH
18967: LD_INT 4
18969: PUSH
18970: LD_INT 5
18972: PUSH
18973: LD_INT 7
18975: PUSH
18976: LD_INT 11
18978: PUSH
18979: LD_INT 12
18981: PUSH
18982: LD_INT 15
18984: PUSH
18985: LD_INT 16
18987: PUSH
18988: LD_INT 20
18990: PUSH
18991: LD_INT 21
18993: PUSH
18994: LD_INT 22
18996: PUSH
18997: LD_INT 23
18999: PUSH
19000: LD_INT 25
19002: PUSH
19003: LD_INT 26
19005: PUSH
19006: LD_INT 30
19008: PUSH
19009: LD_INT 31
19011: PUSH
19012: LD_INT 32
19014: PUSH
19015: LD_INT 33
19017: PUSH
19018: LD_INT 34
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: LIST
19025: LIST
19026: LIST
19027: LIST
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: LIST
19040: LIST
19041: PUSH
19042: LD_INT 101
19044: PUSH
19045: LD_INT 102
19047: PUSH
19048: LD_INT 103
19050: PUSH
19051: LD_INT 106
19053: PUSH
19054: LD_INT 108
19056: PUSH
19057: LD_INT 112
19059: PUSH
19060: LD_INT 113
19062: PUSH
19063: LD_INT 114
19065: PUSH
19066: EMPTY
19067: LIST
19068: LIST
19069: LIST
19070: LIST
19071: LIST
19072: LIST
19073: LIST
19074: LIST
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: ST_TO_ADDR
19080: GO 19675
19082: LD_INT 17
19084: DOUBLE
19085: EQUAL
19086: IFTRUE 19090
19088: GO 19302
19090: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
19091: LD_ADDR_VAR 0 1
19095: PUSH
19096: LD_INT 1
19098: PUSH
19099: LD_INT 2
19101: PUSH
19102: LD_INT 3
19104: PUSH
19105: LD_INT 4
19107: PUSH
19108: LD_INT 5
19110: PUSH
19111: LD_INT 6
19113: PUSH
19114: LD_INT 7
19116: PUSH
19117: LD_INT 8
19119: PUSH
19120: LD_INT 9
19122: PUSH
19123: LD_INT 10
19125: PUSH
19126: LD_INT 11
19128: PUSH
19129: LD_INT 12
19131: PUSH
19132: LD_INT 13
19134: PUSH
19135: LD_INT 14
19137: PUSH
19138: LD_INT 15
19140: PUSH
19141: LD_INT 16
19143: PUSH
19144: LD_INT 17
19146: PUSH
19147: LD_INT 18
19149: PUSH
19150: LD_INT 19
19152: PUSH
19153: LD_INT 20
19155: PUSH
19156: LD_INT 21
19158: PUSH
19159: LD_INT 22
19161: PUSH
19162: LD_INT 23
19164: PUSH
19165: LD_INT 24
19167: PUSH
19168: LD_INT 25
19170: PUSH
19171: LD_INT 26
19173: PUSH
19174: LD_INT 27
19176: PUSH
19177: LD_INT 28
19179: PUSH
19180: LD_INT 29
19182: PUSH
19183: LD_INT 30
19185: PUSH
19186: LD_INT 31
19188: PUSH
19189: LD_INT 32
19191: PUSH
19192: LD_INT 33
19194: PUSH
19195: LD_INT 34
19197: PUSH
19198: LD_INT 36
19200: PUSH
19201: EMPTY
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: LIST
19208: LIST
19209: LIST
19210: LIST
19211: LIST
19212: LIST
19213: LIST
19214: LIST
19215: LIST
19216: LIST
19217: LIST
19218: LIST
19219: LIST
19220: LIST
19221: LIST
19222: LIST
19223: LIST
19224: LIST
19225: LIST
19226: LIST
19227: LIST
19228: LIST
19229: LIST
19230: LIST
19231: LIST
19232: LIST
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: PUSH
19238: LD_INT 101
19240: PUSH
19241: LD_INT 102
19243: PUSH
19244: LD_INT 103
19246: PUSH
19247: LD_INT 104
19249: PUSH
19250: LD_INT 105
19252: PUSH
19253: LD_INT 106
19255: PUSH
19256: LD_INT 107
19258: PUSH
19259: LD_INT 108
19261: PUSH
19262: LD_INT 109
19264: PUSH
19265: LD_INT 110
19267: PUSH
19268: LD_INT 111
19270: PUSH
19271: LD_INT 112
19273: PUSH
19274: LD_INT 113
19276: PUSH
19277: LD_INT 114
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: LIST
19284: LIST
19285: LIST
19286: LIST
19287: LIST
19288: LIST
19289: LIST
19290: LIST
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: PUSH
19296: EMPTY
19297: LIST
19298: LIST
19299: ST_TO_ADDR
19300: GO 19675
19302: LD_INT 18
19304: DOUBLE
19305: EQUAL
19306: IFTRUE 19310
19308: GO 19446
19310: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
19311: LD_ADDR_VAR 0 1
19315: PUSH
19316: LD_INT 2
19318: PUSH
19319: LD_INT 4
19321: PUSH
19322: LD_INT 5
19324: PUSH
19325: LD_INT 7
19327: PUSH
19328: LD_INT 11
19330: PUSH
19331: LD_INT 12
19333: PUSH
19334: LD_INT 15
19336: PUSH
19337: LD_INT 16
19339: PUSH
19340: LD_INT 20
19342: PUSH
19343: LD_INT 21
19345: PUSH
19346: LD_INT 22
19348: PUSH
19349: LD_INT 23
19351: PUSH
19352: LD_INT 25
19354: PUSH
19355: LD_INT 26
19357: PUSH
19358: LD_INT 30
19360: PUSH
19361: LD_INT 31
19363: PUSH
19364: LD_INT 32
19366: PUSH
19367: LD_INT 33
19369: PUSH
19370: LD_INT 34
19372: PUSH
19373: LD_INT 35
19375: PUSH
19376: LD_INT 36
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: LIST
19398: LIST
19399: LIST
19400: LIST
19401: PUSH
19402: LD_INT 101
19404: PUSH
19405: LD_INT 102
19407: PUSH
19408: LD_INT 103
19410: PUSH
19411: LD_INT 106
19413: PUSH
19414: LD_INT 108
19416: PUSH
19417: LD_INT 112
19419: PUSH
19420: LD_INT 113
19422: PUSH
19423: LD_INT 114
19425: PUSH
19426: LD_INT 115
19428: PUSH
19429: EMPTY
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: LIST
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: ST_TO_ADDR
19444: GO 19675
19446: LD_INT 19
19448: DOUBLE
19449: EQUAL
19450: IFTRUE 19454
19452: GO 19674
19454: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
19455: LD_ADDR_VAR 0 1
19459: PUSH
19460: LD_INT 1
19462: PUSH
19463: LD_INT 2
19465: PUSH
19466: LD_INT 3
19468: PUSH
19469: LD_INT 4
19471: PUSH
19472: LD_INT 5
19474: PUSH
19475: LD_INT 6
19477: PUSH
19478: LD_INT 7
19480: PUSH
19481: LD_INT 8
19483: PUSH
19484: LD_INT 9
19486: PUSH
19487: LD_INT 10
19489: PUSH
19490: LD_INT 11
19492: PUSH
19493: LD_INT 12
19495: PUSH
19496: LD_INT 13
19498: PUSH
19499: LD_INT 14
19501: PUSH
19502: LD_INT 15
19504: PUSH
19505: LD_INT 16
19507: PUSH
19508: LD_INT 17
19510: PUSH
19511: LD_INT 18
19513: PUSH
19514: LD_INT 19
19516: PUSH
19517: LD_INT 20
19519: PUSH
19520: LD_INT 21
19522: PUSH
19523: LD_INT 22
19525: PUSH
19526: LD_INT 23
19528: PUSH
19529: LD_INT 24
19531: PUSH
19532: LD_INT 25
19534: PUSH
19535: LD_INT 26
19537: PUSH
19538: LD_INT 27
19540: PUSH
19541: LD_INT 28
19543: PUSH
19544: LD_INT 29
19546: PUSH
19547: LD_INT 30
19549: PUSH
19550: LD_INT 31
19552: PUSH
19553: LD_INT 32
19555: PUSH
19556: LD_INT 33
19558: PUSH
19559: LD_INT 34
19561: PUSH
19562: LD_INT 35
19564: PUSH
19565: LD_INT 36
19567: PUSH
19568: EMPTY
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: LIST
19590: LIST
19591: LIST
19592: LIST
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: PUSH
19606: LD_INT 101
19608: PUSH
19609: LD_INT 102
19611: PUSH
19612: LD_INT 103
19614: PUSH
19615: LD_INT 104
19617: PUSH
19618: LD_INT 105
19620: PUSH
19621: LD_INT 106
19623: PUSH
19624: LD_INT 107
19626: PUSH
19627: LD_INT 108
19629: PUSH
19630: LD_INT 109
19632: PUSH
19633: LD_INT 110
19635: PUSH
19636: LD_INT 111
19638: PUSH
19639: LD_INT 112
19641: PUSH
19642: LD_INT 113
19644: PUSH
19645: LD_INT 114
19647: PUSH
19648: LD_INT 115
19650: PUSH
19651: EMPTY
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: PUSH
19668: EMPTY
19669: LIST
19670: LIST
19671: ST_TO_ADDR
19672: GO 19675
19674: POP
// end else
19675: GO 19894
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
19677: LD_ADDR_VAR 0 1
19681: PUSH
19682: LD_INT 1
19684: PUSH
19685: LD_INT 2
19687: PUSH
19688: LD_INT 3
19690: PUSH
19691: LD_INT 4
19693: PUSH
19694: LD_INT 5
19696: PUSH
19697: LD_INT 6
19699: PUSH
19700: LD_INT 7
19702: PUSH
19703: LD_INT 8
19705: PUSH
19706: LD_INT 9
19708: PUSH
19709: LD_INT 10
19711: PUSH
19712: LD_INT 11
19714: PUSH
19715: LD_INT 12
19717: PUSH
19718: LD_INT 13
19720: PUSH
19721: LD_INT 14
19723: PUSH
19724: LD_INT 15
19726: PUSH
19727: LD_INT 16
19729: PUSH
19730: LD_INT 17
19732: PUSH
19733: LD_INT 18
19735: PUSH
19736: LD_INT 19
19738: PUSH
19739: LD_INT 20
19741: PUSH
19742: LD_INT 21
19744: PUSH
19745: LD_INT 22
19747: PUSH
19748: LD_INT 23
19750: PUSH
19751: LD_INT 24
19753: PUSH
19754: LD_INT 25
19756: PUSH
19757: LD_INT 26
19759: PUSH
19760: LD_INT 27
19762: PUSH
19763: LD_INT 28
19765: PUSH
19766: LD_INT 29
19768: PUSH
19769: LD_INT 30
19771: PUSH
19772: LD_INT 31
19774: PUSH
19775: LD_INT 32
19777: PUSH
19778: LD_INT 33
19780: PUSH
19781: LD_INT 34
19783: PUSH
19784: LD_INT 35
19786: PUSH
19787: LD_INT 36
19789: PUSH
19790: EMPTY
19791: LIST
19792: LIST
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: LIST
19810: LIST
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: LIST
19817: LIST
19818: LIST
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: LIST
19824: LIST
19825: LIST
19826: LIST
19827: PUSH
19828: LD_INT 101
19830: PUSH
19831: LD_INT 102
19833: PUSH
19834: LD_INT 103
19836: PUSH
19837: LD_INT 104
19839: PUSH
19840: LD_INT 105
19842: PUSH
19843: LD_INT 106
19845: PUSH
19846: LD_INT 107
19848: PUSH
19849: LD_INT 108
19851: PUSH
19852: LD_INT 109
19854: PUSH
19855: LD_INT 110
19857: PUSH
19858: LD_INT 111
19860: PUSH
19861: LD_INT 112
19863: PUSH
19864: LD_INT 113
19866: PUSH
19867: LD_INT 114
19869: PUSH
19870: LD_INT 115
19872: PUSH
19873: EMPTY
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: LIST
19882: LIST
19883: LIST
19884: LIST
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: ST_TO_ADDR
// if result then
19894: LD_VAR 0 1
19898: IFFALSE 20187
// begin normal :=  ;
19900: LD_ADDR_VAR 0 3
19904: PUSH
19905: LD_STRING 
19907: ST_TO_ADDR
// hardcore :=  ;
19908: LD_ADDR_VAR 0 4
19912: PUSH
19913: LD_STRING 
19915: ST_TO_ADDR
// for i = 1 to normalCounter do
19916: LD_ADDR_VAR 0 5
19920: PUSH
19921: DOUBLE
19922: LD_INT 1
19924: DEC
19925: ST_TO_ADDR
19926: LD_EXP 58
19930: PUSH
19931: FOR_TO
19932: IFFALSE 20033
// begin tmp := 0 ;
19934: LD_ADDR_VAR 0 2
19938: PUSH
19939: LD_STRING 0
19941: ST_TO_ADDR
// if result [ 1 ] then
19942: LD_VAR 0 1
19946: PUSH
19947: LD_INT 1
19949: ARRAY
19950: IFFALSE 20015
// if result [ 1 ] [ 1 ] = i then
19952: LD_VAR 0 1
19956: PUSH
19957: LD_INT 1
19959: ARRAY
19960: PUSH
19961: LD_INT 1
19963: ARRAY
19964: PUSH
19965: LD_VAR 0 5
19969: EQUAL
19970: IFFALSE 20015
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
19972: LD_ADDR_VAR 0 1
19976: PUSH
19977: LD_VAR 0 1
19981: PPUSH
19982: LD_INT 1
19984: PPUSH
19985: LD_VAR 0 1
19989: PUSH
19990: LD_INT 1
19992: ARRAY
19993: PPUSH
19994: LD_INT 1
19996: PPUSH
19997: CALL_OW 3
20001: PPUSH
20002: CALL_OW 1
20006: ST_TO_ADDR
// tmp := 1 ;
20007: LD_ADDR_VAR 0 2
20011: PUSH
20012: LD_STRING 1
20014: ST_TO_ADDR
// end ; normal := normal & tmp ;
20015: LD_ADDR_VAR 0 3
20019: PUSH
20020: LD_VAR 0 3
20024: PUSH
20025: LD_VAR 0 2
20029: STR
20030: ST_TO_ADDR
// end ;
20031: GO 19931
20033: POP
20034: POP
// for i = 1 to hardcoreCounter do
20035: LD_ADDR_VAR 0 5
20039: PUSH
20040: DOUBLE
20041: LD_INT 1
20043: DEC
20044: ST_TO_ADDR
20045: LD_EXP 59
20049: PUSH
20050: FOR_TO
20051: IFFALSE 20156
// begin tmp := 0 ;
20053: LD_ADDR_VAR 0 2
20057: PUSH
20058: LD_STRING 0
20060: ST_TO_ADDR
// if result [ 2 ] then
20061: LD_VAR 0 1
20065: PUSH
20066: LD_INT 2
20068: ARRAY
20069: IFFALSE 20138
// if result [ 2 ] [ 1 ] = 100 + i then
20071: LD_VAR 0 1
20075: PUSH
20076: LD_INT 2
20078: ARRAY
20079: PUSH
20080: LD_INT 1
20082: ARRAY
20083: PUSH
20084: LD_INT 100
20086: PUSH
20087: LD_VAR 0 5
20091: PLUS
20092: EQUAL
20093: IFFALSE 20138
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
20095: LD_ADDR_VAR 0 1
20099: PUSH
20100: LD_VAR 0 1
20104: PPUSH
20105: LD_INT 2
20107: PPUSH
20108: LD_VAR 0 1
20112: PUSH
20113: LD_INT 2
20115: ARRAY
20116: PPUSH
20117: LD_INT 1
20119: PPUSH
20120: CALL_OW 3
20124: PPUSH
20125: CALL_OW 1
20129: ST_TO_ADDR
// tmp := 1 ;
20130: LD_ADDR_VAR 0 2
20134: PUSH
20135: LD_STRING 1
20137: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
20138: LD_ADDR_VAR 0 4
20142: PUSH
20143: LD_VAR 0 4
20147: PUSH
20148: LD_VAR 0 2
20152: STR
20153: ST_TO_ADDR
// end ;
20154: GO 20050
20156: POP
20157: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
20158: LD_STRING getStreamItemsFromMission("
20160: PUSH
20161: LD_VAR 0 3
20165: STR
20166: PUSH
20167: LD_STRING ","
20169: STR
20170: PUSH
20171: LD_VAR 0 4
20175: STR
20176: PUSH
20177: LD_STRING ")
20179: STR
20180: PPUSH
20181: CALL_OW 559
// end else
20185: GO 20194
// ToLua ( getStreamItemsFromMission("","") ) ;
20187: LD_STRING getStreamItemsFromMission("","")
20189: PPUSH
20190: CALL_OW 559
// end ;
20194: LD_VAR 0 1
20198: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
20199: LD_EXP 57
20203: PUSH
20204: LD_EXP 62
20208: AND
20209: IFFALSE 20333
20211: GO 20213
20213: DISABLE
20214: LD_INT 0
20216: PPUSH
20217: PPUSH
// begin enable ;
20218: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
20219: LD_ADDR_VAR 0 2
20223: PUSH
20224: LD_INT 22
20226: PUSH
20227: LD_OWVAR 2
20231: PUSH
20232: EMPTY
20233: LIST
20234: LIST
20235: PUSH
20236: LD_INT 2
20238: PUSH
20239: LD_INT 34
20241: PUSH
20242: LD_INT 7
20244: PUSH
20245: EMPTY
20246: LIST
20247: LIST
20248: PUSH
20249: LD_INT 34
20251: PUSH
20252: LD_INT 45
20254: PUSH
20255: EMPTY
20256: LIST
20257: LIST
20258: PUSH
20259: LD_INT 34
20261: PUSH
20262: LD_INT 28
20264: PUSH
20265: EMPTY
20266: LIST
20267: LIST
20268: PUSH
20269: LD_INT 34
20271: PUSH
20272: LD_INT 47
20274: PUSH
20275: EMPTY
20276: LIST
20277: LIST
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: PUSH
20286: EMPTY
20287: LIST
20288: LIST
20289: PPUSH
20290: CALL_OW 69
20294: ST_TO_ADDR
// if not tmp then
20295: LD_VAR 0 2
20299: NOT
20300: IFFALSE 20304
// exit ;
20302: GO 20333
// for i in tmp do
20304: LD_ADDR_VAR 0 1
20308: PUSH
20309: LD_VAR 0 2
20313: PUSH
20314: FOR_IN
20315: IFFALSE 20331
// begin SetLives ( i , 0 ) ;
20317: LD_VAR 0 1
20321: PPUSH
20322: LD_INT 0
20324: PPUSH
20325: CALL_OW 234
// end ;
20329: GO 20314
20331: POP
20332: POP
// end ;
20333: PPOPN 2
20335: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
20336: LD_EXP 57
20340: PUSH
20341: LD_EXP 63
20345: AND
20346: IFFALSE 20430
20348: GO 20350
20350: DISABLE
20351: LD_INT 0
20353: PPUSH
20354: PPUSH
// begin enable ;
20355: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
20356: LD_ADDR_VAR 0 2
20360: PUSH
20361: LD_INT 22
20363: PUSH
20364: LD_OWVAR 2
20368: PUSH
20369: EMPTY
20370: LIST
20371: LIST
20372: PUSH
20373: LD_INT 32
20375: PUSH
20376: LD_INT 3
20378: PUSH
20379: EMPTY
20380: LIST
20381: LIST
20382: PUSH
20383: EMPTY
20384: LIST
20385: LIST
20386: PPUSH
20387: CALL_OW 69
20391: ST_TO_ADDR
// if not tmp then
20392: LD_VAR 0 2
20396: NOT
20397: IFFALSE 20401
// exit ;
20399: GO 20430
// for i in tmp do
20401: LD_ADDR_VAR 0 1
20405: PUSH
20406: LD_VAR 0 2
20410: PUSH
20411: FOR_IN
20412: IFFALSE 20428
// begin SetLives ( i , 0 ) ;
20414: LD_VAR 0 1
20418: PPUSH
20419: LD_INT 0
20421: PPUSH
20422: CALL_OW 234
// end ;
20426: GO 20411
20428: POP
20429: POP
// end ;
20430: PPOPN 2
20432: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
20433: LD_EXP 57
20437: PUSH
20438: LD_EXP 60
20442: AND
20443: IFFALSE 20536
20445: GO 20447
20447: DISABLE
20448: LD_INT 0
20450: PPUSH
// begin enable ;
20451: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
20452: LD_ADDR_VAR 0 1
20456: PUSH
20457: LD_INT 22
20459: PUSH
20460: LD_OWVAR 2
20464: PUSH
20465: EMPTY
20466: LIST
20467: LIST
20468: PUSH
20469: LD_INT 2
20471: PUSH
20472: LD_INT 25
20474: PUSH
20475: LD_INT 5
20477: PUSH
20478: EMPTY
20479: LIST
20480: LIST
20481: PUSH
20482: LD_INT 25
20484: PUSH
20485: LD_INT 9
20487: PUSH
20488: EMPTY
20489: LIST
20490: LIST
20491: PUSH
20492: LD_INT 25
20494: PUSH
20495: LD_INT 8
20497: PUSH
20498: EMPTY
20499: LIST
20500: LIST
20501: PUSH
20502: EMPTY
20503: LIST
20504: LIST
20505: LIST
20506: LIST
20507: PUSH
20508: EMPTY
20509: LIST
20510: LIST
20511: PPUSH
20512: CALL_OW 69
20516: PUSH
20517: FOR_IN
20518: IFFALSE 20534
// begin SetClass ( i , 1 ) ;
20520: LD_VAR 0 1
20524: PPUSH
20525: LD_INT 1
20527: PPUSH
20528: CALL_OW 336
// end ;
20532: GO 20517
20534: POP
20535: POP
// end ;
20536: PPOPN 1
20538: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
20539: LD_EXP 57
20543: PUSH
20544: LD_EXP 61
20548: AND
20549: PUSH
20550: LD_OWVAR 65
20554: PUSH
20555: LD_INT 7
20557: LESS
20558: AND
20559: IFFALSE 20573
20561: GO 20563
20563: DISABLE
// begin enable ;
20564: ENABLE
// game_speed := 7 ;
20565: LD_ADDR_OWVAR 65
20569: PUSH
20570: LD_INT 7
20572: ST_TO_ADDR
// end ;
20573: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
20574: LD_EXP 57
20578: PUSH
20579: LD_EXP 64
20583: AND
20584: IFFALSE 20786
20586: GO 20588
20588: DISABLE
20589: LD_INT 0
20591: PPUSH
20592: PPUSH
20593: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20594: LD_ADDR_VAR 0 3
20598: PUSH
20599: LD_INT 81
20601: PUSH
20602: LD_OWVAR 2
20606: PUSH
20607: EMPTY
20608: LIST
20609: LIST
20610: PUSH
20611: LD_INT 21
20613: PUSH
20614: LD_INT 1
20616: PUSH
20617: EMPTY
20618: LIST
20619: LIST
20620: PUSH
20621: EMPTY
20622: LIST
20623: LIST
20624: PPUSH
20625: CALL_OW 69
20629: ST_TO_ADDR
// if not tmp then
20630: LD_VAR 0 3
20634: NOT
20635: IFFALSE 20639
// exit ;
20637: GO 20786
// if tmp > 5 then
20639: LD_VAR 0 3
20643: PUSH
20644: LD_INT 5
20646: GREATER
20647: IFFALSE 20659
// k := 5 else
20649: LD_ADDR_VAR 0 2
20653: PUSH
20654: LD_INT 5
20656: ST_TO_ADDR
20657: GO 20669
// k := tmp ;
20659: LD_ADDR_VAR 0 2
20663: PUSH
20664: LD_VAR 0 3
20668: ST_TO_ADDR
// for i := 1 to k do
20669: LD_ADDR_VAR 0 1
20673: PUSH
20674: DOUBLE
20675: LD_INT 1
20677: DEC
20678: ST_TO_ADDR
20679: LD_VAR 0 2
20683: PUSH
20684: FOR_TO
20685: IFFALSE 20784
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
20687: LD_VAR 0 3
20691: PUSH
20692: LD_VAR 0 1
20696: ARRAY
20697: PPUSH
20698: LD_VAR 0 1
20702: PUSH
20703: LD_INT 4
20705: MOD
20706: PUSH
20707: LD_INT 1
20709: PLUS
20710: PPUSH
20711: CALL_OW 259
20715: PUSH
20716: LD_INT 10
20718: LESS
20719: IFFALSE 20782
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
20721: LD_VAR 0 3
20725: PUSH
20726: LD_VAR 0 1
20730: ARRAY
20731: PPUSH
20732: LD_VAR 0 1
20736: PUSH
20737: LD_INT 4
20739: MOD
20740: PUSH
20741: LD_INT 1
20743: PLUS
20744: PPUSH
20745: LD_VAR 0 3
20749: PUSH
20750: LD_VAR 0 1
20754: ARRAY
20755: PPUSH
20756: LD_VAR 0 1
20760: PUSH
20761: LD_INT 4
20763: MOD
20764: PUSH
20765: LD_INT 1
20767: PLUS
20768: PPUSH
20769: CALL_OW 259
20773: PUSH
20774: LD_INT 1
20776: PLUS
20777: PPUSH
20778: CALL_OW 237
20782: GO 20684
20784: POP
20785: POP
// end ;
20786: PPOPN 3
20788: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
20789: LD_EXP 57
20793: PUSH
20794: LD_EXP 65
20798: AND
20799: IFFALSE 20819
20801: GO 20803
20803: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
20804: LD_INT 4
20806: PPUSH
20807: LD_OWVAR 2
20811: PPUSH
20812: LD_INT 0
20814: PPUSH
20815: CALL_OW 324
20819: END
// every 0 0$1 trigger StreamModeActive and sShovel do
20820: LD_EXP 57
20824: PUSH
20825: LD_EXP 94
20829: AND
20830: IFFALSE 20850
20832: GO 20834
20834: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
20835: LD_INT 19
20837: PPUSH
20838: LD_OWVAR 2
20842: PPUSH
20843: LD_INT 0
20845: PPUSH
20846: CALL_OW 324
20850: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
20851: LD_EXP 57
20855: PUSH
20856: LD_EXP 66
20860: AND
20861: IFFALSE 20963
20863: GO 20865
20865: DISABLE
20866: LD_INT 0
20868: PPUSH
20869: PPUSH
// begin enable ;
20870: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
20871: LD_ADDR_VAR 0 2
20875: PUSH
20876: LD_INT 22
20878: PUSH
20879: LD_OWVAR 2
20883: PUSH
20884: EMPTY
20885: LIST
20886: LIST
20887: PUSH
20888: LD_INT 2
20890: PUSH
20891: LD_INT 34
20893: PUSH
20894: LD_INT 11
20896: PUSH
20897: EMPTY
20898: LIST
20899: LIST
20900: PUSH
20901: LD_INT 34
20903: PUSH
20904: LD_INT 30
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: LIST
20915: PUSH
20916: EMPTY
20917: LIST
20918: LIST
20919: PPUSH
20920: CALL_OW 69
20924: ST_TO_ADDR
// if not tmp then
20925: LD_VAR 0 2
20929: NOT
20930: IFFALSE 20934
// exit ;
20932: GO 20963
// for i in tmp do
20934: LD_ADDR_VAR 0 1
20938: PUSH
20939: LD_VAR 0 2
20943: PUSH
20944: FOR_IN
20945: IFFALSE 20961
// begin SetLives ( i , 0 ) ;
20947: LD_VAR 0 1
20951: PPUSH
20952: LD_INT 0
20954: PPUSH
20955: CALL_OW 234
// end ;
20959: GO 20944
20961: POP
20962: POP
// end ;
20963: PPOPN 2
20965: END
// every 0 0$1 trigger StreamModeActive and sBunker do
20966: LD_EXP 57
20970: PUSH
20971: LD_EXP 67
20975: AND
20976: IFFALSE 20996
20978: GO 20980
20980: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
20981: LD_INT 32
20983: PPUSH
20984: LD_OWVAR 2
20988: PPUSH
20989: LD_INT 0
20991: PPUSH
20992: CALL_OW 324
20996: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
20997: LD_EXP 57
21001: PUSH
21002: LD_EXP 68
21006: AND
21007: IFFALSE 21188
21009: GO 21011
21011: DISABLE
21012: LD_INT 0
21014: PPUSH
21015: PPUSH
21016: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
21017: LD_ADDR_VAR 0 2
21021: PUSH
21022: LD_INT 22
21024: PUSH
21025: LD_OWVAR 2
21029: PUSH
21030: EMPTY
21031: LIST
21032: LIST
21033: PUSH
21034: LD_INT 33
21036: PUSH
21037: LD_INT 3
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: PPUSH
21048: CALL_OW 69
21052: ST_TO_ADDR
// if not tmp then
21053: LD_VAR 0 2
21057: NOT
21058: IFFALSE 21062
// exit ;
21060: GO 21188
// side := 0 ;
21062: LD_ADDR_VAR 0 3
21066: PUSH
21067: LD_INT 0
21069: ST_TO_ADDR
// for i := 1 to 8 do
21070: LD_ADDR_VAR 0 1
21074: PUSH
21075: DOUBLE
21076: LD_INT 1
21078: DEC
21079: ST_TO_ADDR
21080: LD_INT 8
21082: PUSH
21083: FOR_TO
21084: IFFALSE 21132
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
21086: LD_OWVAR 2
21090: PUSH
21091: LD_VAR 0 1
21095: NONEQUAL
21096: PUSH
21097: LD_OWVAR 2
21101: PPUSH
21102: LD_VAR 0 1
21106: PPUSH
21107: CALL_OW 81
21111: PUSH
21112: LD_INT 2
21114: EQUAL
21115: AND
21116: IFFALSE 21130
// begin side := i ;
21118: LD_ADDR_VAR 0 3
21122: PUSH
21123: LD_VAR 0 1
21127: ST_TO_ADDR
// break ;
21128: GO 21132
// end ;
21130: GO 21083
21132: POP
21133: POP
// if not side then
21134: LD_VAR 0 3
21138: NOT
21139: IFFALSE 21143
// exit ;
21141: GO 21188
// for i := 1 to tmp do
21143: LD_ADDR_VAR 0 1
21147: PUSH
21148: DOUBLE
21149: LD_INT 1
21151: DEC
21152: ST_TO_ADDR
21153: LD_VAR 0 2
21157: PUSH
21158: FOR_TO
21159: IFFALSE 21186
// if Prob ( 60 ) then
21161: LD_INT 60
21163: PPUSH
21164: CALL_OW 13
21168: IFFALSE 21184
// SetSide ( i , side ) ;
21170: LD_VAR 0 1
21174: PPUSH
21175: LD_VAR 0 3
21179: PPUSH
21180: CALL_OW 235
21184: GO 21158
21186: POP
21187: POP
// end ;
21188: PPOPN 3
21190: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
21191: LD_EXP 57
21195: PUSH
21196: LD_EXP 70
21200: AND
21201: IFFALSE 21320
21203: GO 21205
21205: DISABLE
21206: LD_INT 0
21208: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
21209: LD_ADDR_VAR 0 1
21213: PUSH
21214: LD_INT 22
21216: PUSH
21217: LD_OWVAR 2
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: PUSH
21226: LD_INT 21
21228: PUSH
21229: LD_INT 1
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: PUSH
21236: LD_INT 3
21238: PUSH
21239: LD_INT 23
21241: PUSH
21242: LD_INT 0
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: PUSH
21249: EMPTY
21250: LIST
21251: LIST
21252: PUSH
21253: EMPTY
21254: LIST
21255: LIST
21256: LIST
21257: PPUSH
21258: CALL_OW 69
21262: PUSH
21263: FOR_IN
21264: IFFALSE 21318
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
21266: LD_VAR 0 1
21270: PPUSH
21271: CALL_OW 257
21275: PUSH
21276: LD_INT 1
21278: PUSH
21279: LD_INT 2
21281: PUSH
21282: LD_INT 3
21284: PUSH
21285: LD_INT 4
21287: PUSH
21288: EMPTY
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: IN
21294: IFFALSE 21316
// SetClass ( un , rand ( 1 , 4 ) ) ;
21296: LD_VAR 0 1
21300: PPUSH
21301: LD_INT 1
21303: PPUSH
21304: LD_INT 4
21306: PPUSH
21307: CALL_OW 12
21311: PPUSH
21312: CALL_OW 336
21316: GO 21263
21318: POP
21319: POP
// end ;
21320: PPOPN 1
21322: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
21323: LD_EXP 57
21327: PUSH
21328: LD_EXP 69
21332: AND
21333: IFFALSE 21412
21335: GO 21337
21337: DISABLE
21338: LD_INT 0
21340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21341: LD_ADDR_VAR 0 1
21345: PUSH
21346: LD_INT 22
21348: PUSH
21349: LD_OWVAR 2
21353: PUSH
21354: EMPTY
21355: LIST
21356: LIST
21357: PUSH
21358: LD_INT 21
21360: PUSH
21361: LD_INT 3
21363: PUSH
21364: EMPTY
21365: LIST
21366: LIST
21367: PUSH
21368: EMPTY
21369: LIST
21370: LIST
21371: PPUSH
21372: CALL_OW 69
21376: ST_TO_ADDR
// if not tmp then
21377: LD_VAR 0 1
21381: NOT
21382: IFFALSE 21386
// exit ;
21384: GO 21412
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
21386: LD_VAR 0 1
21390: PUSH
21391: LD_INT 1
21393: PPUSH
21394: LD_VAR 0 1
21398: PPUSH
21399: CALL_OW 12
21403: ARRAY
21404: PPUSH
21405: LD_INT 100
21407: PPUSH
21408: CALL_OW 234
// end ;
21412: PPOPN 1
21414: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
21415: LD_EXP 57
21419: PUSH
21420: LD_EXP 71
21424: AND
21425: IFFALSE 21523
21427: GO 21429
21429: DISABLE
21430: LD_INT 0
21432: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21433: LD_ADDR_VAR 0 1
21437: PUSH
21438: LD_INT 22
21440: PUSH
21441: LD_OWVAR 2
21445: PUSH
21446: EMPTY
21447: LIST
21448: LIST
21449: PUSH
21450: LD_INT 21
21452: PUSH
21453: LD_INT 1
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: PPUSH
21464: CALL_OW 69
21468: ST_TO_ADDR
// if not tmp then
21469: LD_VAR 0 1
21473: NOT
21474: IFFALSE 21478
// exit ;
21476: GO 21523
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
21478: LD_VAR 0 1
21482: PUSH
21483: LD_INT 1
21485: PPUSH
21486: LD_VAR 0 1
21490: PPUSH
21491: CALL_OW 12
21495: ARRAY
21496: PPUSH
21497: LD_INT 1
21499: PPUSH
21500: LD_INT 4
21502: PPUSH
21503: CALL_OW 12
21507: PPUSH
21508: LD_INT 3000
21510: PPUSH
21511: LD_INT 9000
21513: PPUSH
21514: CALL_OW 12
21518: PPUSH
21519: CALL_OW 492
// end ;
21523: PPOPN 1
21525: END
// every 0 0$1 trigger StreamModeActive and sDepot do
21526: LD_EXP 57
21530: PUSH
21531: LD_EXP 72
21535: AND
21536: IFFALSE 21556
21538: GO 21540
21540: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
21541: LD_INT 1
21543: PPUSH
21544: LD_OWVAR 2
21548: PPUSH
21549: LD_INT 0
21551: PPUSH
21552: CALL_OW 324
21556: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
21557: LD_EXP 57
21561: PUSH
21562: LD_EXP 73
21566: AND
21567: IFFALSE 21650
21569: GO 21571
21571: DISABLE
21572: LD_INT 0
21574: PPUSH
21575: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21576: LD_ADDR_VAR 0 2
21580: PUSH
21581: LD_INT 22
21583: PUSH
21584: LD_OWVAR 2
21588: PUSH
21589: EMPTY
21590: LIST
21591: LIST
21592: PUSH
21593: LD_INT 21
21595: PUSH
21596: LD_INT 3
21598: PUSH
21599: EMPTY
21600: LIST
21601: LIST
21602: PUSH
21603: EMPTY
21604: LIST
21605: LIST
21606: PPUSH
21607: CALL_OW 69
21611: ST_TO_ADDR
// if not tmp then
21612: LD_VAR 0 2
21616: NOT
21617: IFFALSE 21621
// exit ;
21619: GO 21650
// for i in tmp do
21621: LD_ADDR_VAR 0 1
21625: PUSH
21626: LD_VAR 0 2
21630: PUSH
21631: FOR_IN
21632: IFFALSE 21648
// SetBLevel ( i , 10 ) ;
21634: LD_VAR 0 1
21638: PPUSH
21639: LD_INT 10
21641: PPUSH
21642: CALL_OW 241
21646: GO 21631
21648: POP
21649: POP
// end ;
21650: PPOPN 2
21652: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
21653: LD_EXP 57
21657: PUSH
21658: LD_EXP 74
21662: AND
21663: IFFALSE 21774
21665: GO 21667
21667: DISABLE
21668: LD_INT 0
21670: PPUSH
21671: PPUSH
21672: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21673: LD_ADDR_VAR 0 3
21677: PUSH
21678: LD_INT 22
21680: PUSH
21681: LD_OWVAR 2
21685: PUSH
21686: EMPTY
21687: LIST
21688: LIST
21689: PUSH
21690: LD_INT 25
21692: PUSH
21693: LD_INT 1
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: PUSH
21700: EMPTY
21701: LIST
21702: LIST
21703: PPUSH
21704: CALL_OW 69
21708: ST_TO_ADDR
// if not tmp then
21709: LD_VAR 0 3
21713: NOT
21714: IFFALSE 21718
// exit ;
21716: GO 21774
// un := tmp [ rand ( 1 , tmp ) ] ;
21718: LD_ADDR_VAR 0 2
21722: PUSH
21723: LD_VAR 0 3
21727: PUSH
21728: LD_INT 1
21730: PPUSH
21731: LD_VAR 0 3
21735: PPUSH
21736: CALL_OW 12
21740: ARRAY
21741: ST_TO_ADDR
// if Crawls ( un ) then
21742: LD_VAR 0 2
21746: PPUSH
21747: CALL_OW 318
21751: IFFALSE 21762
// ComWalk ( un ) ;
21753: LD_VAR 0 2
21757: PPUSH
21758: CALL_OW 138
// SetClass ( un , class_sniper ) ;
21762: LD_VAR 0 2
21766: PPUSH
21767: LD_INT 5
21769: PPUSH
21770: CALL_OW 336
// end ;
21774: PPOPN 3
21776: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
21777: LD_EXP 57
21781: PUSH
21782: LD_EXP 75
21786: AND
21787: PUSH
21788: LD_OWVAR 67
21792: PUSH
21793: LD_INT 3
21795: LESS
21796: AND
21797: IFFALSE 21816
21799: GO 21801
21801: DISABLE
// Difficulty := Difficulty + 1 ;
21802: LD_ADDR_OWVAR 67
21806: PUSH
21807: LD_OWVAR 67
21811: PUSH
21812: LD_INT 1
21814: PLUS
21815: ST_TO_ADDR
21816: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
21817: LD_EXP 57
21821: PUSH
21822: LD_EXP 76
21826: AND
21827: IFFALSE 21930
21829: GO 21831
21831: DISABLE
21832: LD_INT 0
21834: PPUSH
// begin for i := 1 to 5 do
21835: LD_ADDR_VAR 0 1
21839: PUSH
21840: DOUBLE
21841: LD_INT 1
21843: DEC
21844: ST_TO_ADDR
21845: LD_INT 5
21847: PUSH
21848: FOR_TO
21849: IFFALSE 21928
// begin uc_nation := nation_nature ;
21851: LD_ADDR_OWVAR 21
21855: PUSH
21856: LD_INT 0
21858: ST_TO_ADDR
// uc_side := 0 ;
21859: LD_ADDR_OWVAR 20
21863: PUSH
21864: LD_INT 0
21866: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21867: LD_ADDR_OWVAR 29
21871: PUSH
21872: LD_INT 12
21874: PUSH
21875: LD_INT 12
21877: PUSH
21878: EMPTY
21879: LIST
21880: LIST
21881: ST_TO_ADDR
// hc_agressivity := 20 ;
21882: LD_ADDR_OWVAR 35
21886: PUSH
21887: LD_INT 20
21889: ST_TO_ADDR
// hc_class := class_tiger ;
21890: LD_ADDR_OWVAR 28
21894: PUSH
21895: LD_INT 14
21897: ST_TO_ADDR
// hc_gallery :=  ;
21898: LD_ADDR_OWVAR 33
21902: PUSH
21903: LD_STRING 
21905: ST_TO_ADDR
// hc_name :=  ;
21906: LD_ADDR_OWVAR 26
21910: PUSH
21911: LD_STRING 
21913: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
21914: CALL_OW 44
21918: PPUSH
21919: LD_INT 0
21921: PPUSH
21922: CALL_OW 51
// end ;
21926: GO 21848
21928: POP
21929: POP
// end ;
21930: PPOPN 1
21932: END
// every 0 0$1 trigger StreamModeActive and sBomb do
21933: LD_EXP 57
21937: PUSH
21938: LD_EXP 77
21942: AND
21943: IFFALSE 21952
21945: GO 21947
21947: DISABLE
// StreamSibBomb ;
21948: CALL 21953 0 0
21952: END
// export function StreamSibBomb ; var i , x , y ; begin
21953: LD_INT 0
21955: PPUSH
21956: PPUSH
21957: PPUSH
21958: PPUSH
// result := false ;
21959: LD_ADDR_VAR 0 1
21963: PUSH
21964: LD_INT 0
21966: ST_TO_ADDR
// for i := 1 to 16 do
21967: LD_ADDR_VAR 0 2
21971: PUSH
21972: DOUBLE
21973: LD_INT 1
21975: DEC
21976: ST_TO_ADDR
21977: LD_INT 16
21979: PUSH
21980: FOR_TO
21981: IFFALSE 22180
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
21983: LD_ADDR_VAR 0 3
21987: PUSH
21988: LD_INT 10
21990: PUSH
21991: LD_INT 20
21993: PUSH
21994: LD_INT 30
21996: PUSH
21997: LD_INT 40
21999: PUSH
22000: LD_INT 50
22002: PUSH
22003: LD_INT 60
22005: PUSH
22006: LD_INT 70
22008: PUSH
22009: LD_INT 80
22011: PUSH
22012: LD_INT 90
22014: PUSH
22015: LD_INT 100
22017: PUSH
22018: LD_INT 110
22020: PUSH
22021: LD_INT 120
22023: PUSH
22024: LD_INT 130
22026: PUSH
22027: LD_INT 140
22029: PUSH
22030: LD_INT 150
22032: PUSH
22033: EMPTY
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: PUSH
22050: LD_INT 1
22052: PPUSH
22053: LD_INT 15
22055: PPUSH
22056: CALL_OW 12
22060: ARRAY
22061: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22062: LD_ADDR_VAR 0 4
22066: PUSH
22067: LD_INT 10
22069: PUSH
22070: LD_INT 20
22072: PUSH
22073: LD_INT 30
22075: PUSH
22076: LD_INT 40
22078: PUSH
22079: LD_INT 50
22081: PUSH
22082: LD_INT 60
22084: PUSH
22085: LD_INT 70
22087: PUSH
22088: LD_INT 80
22090: PUSH
22091: LD_INT 90
22093: PUSH
22094: LD_INT 100
22096: PUSH
22097: LD_INT 110
22099: PUSH
22100: LD_INT 120
22102: PUSH
22103: LD_INT 130
22105: PUSH
22106: LD_INT 140
22108: PUSH
22109: LD_INT 150
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: PUSH
22129: LD_INT 1
22131: PPUSH
22132: LD_INT 15
22134: PPUSH
22135: CALL_OW 12
22139: ARRAY
22140: ST_TO_ADDR
// if ValidHex ( x , y ) then
22141: LD_VAR 0 3
22145: PPUSH
22146: LD_VAR 0 4
22150: PPUSH
22151: CALL_OW 488
22155: IFFALSE 22178
// begin result := [ x , y ] ;
22157: LD_ADDR_VAR 0 1
22161: PUSH
22162: LD_VAR 0 3
22166: PUSH
22167: LD_VAR 0 4
22171: PUSH
22172: EMPTY
22173: LIST
22174: LIST
22175: ST_TO_ADDR
// break ;
22176: GO 22180
// end ; end ;
22178: GO 21980
22180: POP
22181: POP
// if result then
22182: LD_VAR 0 1
22186: IFFALSE 22246
// begin ToLua ( playSibBomb() ) ;
22188: LD_STRING playSibBomb()
22190: PPUSH
22191: CALL_OW 559
// wait ( 0 0$14 ) ;
22195: LD_INT 490
22197: PPUSH
22198: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
22202: LD_VAR 0 1
22206: PUSH
22207: LD_INT 1
22209: ARRAY
22210: PPUSH
22211: LD_VAR 0 1
22215: PUSH
22216: LD_INT 2
22218: ARRAY
22219: PPUSH
22220: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
22224: LD_VAR 0 1
22228: PUSH
22229: LD_INT 1
22231: ARRAY
22232: PPUSH
22233: LD_VAR 0 1
22237: PUSH
22238: LD_INT 2
22240: ARRAY
22241: PPUSH
22242: CALL_OW 429
// end ; end ;
22246: LD_VAR 0 1
22250: RET
// every 0 0$1 trigger StreamModeActive and sReset do
22251: LD_EXP 57
22255: PUSH
22256: LD_EXP 79
22260: AND
22261: IFFALSE 22273
22263: GO 22265
22265: DISABLE
// YouLost (  ) ;
22266: LD_STRING 
22268: PPUSH
22269: CALL_OW 104
22273: END
// every 0 0$1 trigger StreamModeActive and sFog do
22274: LD_EXP 57
22278: PUSH
22279: LD_EXP 78
22283: AND
22284: IFFALSE 22298
22286: GO 22288
22288: DISABLE
// FogOff ( your_side ) ;
22289: LD_OWVAR 2
22293: PPUSH
22294: CALL_OW 344
22298: END
// every 0 0$1 trigger StreamModeActive and sSun do
22299: LD_EXP 57
22303: PUSH
22304: LD_EXP 80
22308: AND
22309: IFFALSE 22337
22311: GO 22313
22313: DISABLE
// begin solar_recharge_percent := 0 ;
22314: LD_ADDR_OWVAR 79
22318: PUSH
22319: LD_INT 0
22321: ST_TO_ADDR
// wait ( 5 5$00 ) ;
22322: LD_INT 10500
22324: PPUSH
22325: CALL_OW 67
// solar_recharge_percent := 100 ;
22329: LD_ADDR_OWVAR 79
22333: PUSH
22334: LD_INT 100
22336: ST_TO_ADDR
// end ;
22337: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
22338: LD_EXP 57
22342: PUSH
22343: LD_EXP 81
22347: AND
22348: IFFALSE 22587
22350: GO 22352
22352: DISABLE
22353: LD_INT 0
22355: PPUSH
22356: PPUSH
22357: PPUSH
// begin tmp := [ ] ;
22358: LD_ADDR_VAR 0 3
22362: PUSH
22363: EMPTY
22364: ST_TO_ADDR
// for i := 1 to 6 do
22365: LD_ADDR_VAR 0 1
22369: PUSH
22370: DOUBLE
22371: LD_INT 1
22373: DEC
22374: ST_TO_ADDR
22375: LD_INT 6
22377: PUSH
22378: FOR_TO
22379: IFFALSE 22484
// begin uc_nation := nation_nature ;
22381: LD_ADDR_OWVAR 21
22385: PUSH
22386: LD_INT 0
22388: ST_TO_ADDR
// uc_side := 0 ;
22389: LD_ADDR_OWVAR 20
22393: PUSH
22394: LD_INT 0
22396: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22397: LD_ADDR_OWVAR 29
22401: PUSH
22402: LD_INT 12
22404: PUSH
22405: LD_INT 12
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: ST_TO_ADDR
// hc_agressivity := 20 ;
22412: LD_ADDR_OWVAR 35
22416: PUSH
22417: LD_INT 20
22419: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
22420: LD_ADDR_OWVAR 28
22424: PUSH
22425: LD_INT 17
22427: ST_TO_ADDR
// hc_gallery :=  ;
22428: LD_ADDR_OWVAR 33
22432: PUSH
22433: LD_STRING 
22435: ST_TO_ADDR
// hc_name :=  ;
22436: LD_ADDR_OWVAR 26
22440: PUSH
22441: LD_STRING 
22443: ST_TO_ADDR
// un := CreateHuman ;
22444: LD_ADDR_VAR 0 2
22448: PUSH
22449: CALL_OW 44
22453: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
22454: LD_VAR 0 2
22458: PPUSH
22459: LD_INT 1
22461: PPUSH
22462: CALL_OW 51
// tmp := tmp ^ un ;
22466: LD_ADDR_VAR 0 3
22470: PUSH
22471: LD_VAR 0 3
22475: PUSH
22476: LD_VAR 0 2
22480: ADD
22481: ST_TO_ADDR
// end ;
22482: GO 22378
22484: POP
22485: POP
// repeat wait ( 0 0$1 ) ;
22486: LD_INT 35
22488: PPUSH
22489: CALL_OW 67
// for un in tmp do
22493: LD_ADDR_VAR 0 2
22497: PUSH
22498: LD_VAR 0 3
22502: PUSH
22503: FOR_IN
22504: IFFALSE 22578
// begin if IsDead ( un ) then
22506: LD_VAR 0 2
22510: PPUSH
22511: CALL_OW 301
22515: IFFALSE 22535
// begin tmp := tmp diff un ;
22517: LD_ADDR_VAR 0 3
22521: PUSH
22522: LD_VAR 0 3
22526: PUSH
22527: LD_VAR 0 2
22531: DIFF
22532: ST_TO_ADDR
// continue ;
22533: GO 22503
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
22535: LD_VAR 0 2
22539: PPUSH
22540: LD_INT 3
22542: PUSH
22543: LD_INT 22
22545: PUSH
22546: LD_INT 0
22548: PUSH
22549: EMPTY
22550: LIST
22551: LIST
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: PPUSH
22557: CALL_OW 69
22561: PPUSH
22562: LD_VAR 0 2
22566: PPUSH
22567: CALL_OW 74
22571: PPUSH
22572: CALL_OW 115
// end ;
22576: GO 22503
22578: POP
22579: POP
// until not tmp ;
22580: LD_VAR 0 3
22584: NOT
22585: IFFALSE 22486
// end ;
22587: PPOPN 3
22589: END
// every 0 0$1 trigger StreamModeActive and sTroll do
22590: LD_EXP 57
22594: PUSH
22595: LD_EXP 82
22599: AND
22600: IFFALSE 22654
22602: GO 22604
22604: DISABLE
// begin ToLua ( displayTroll(); ) ;
22605: LD_STRING displayTroll();
22607: PPUSH
22608: CALL_OW 559
// wait ( 3 3$00 ) ;
22612: LD_INT 6300
22614: PPUSH
22615: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22619: LD_STRING hideTroll();
22621: PPUSH
22622: CALL_OW 559
// wait ( 1 1$00 ) ;
22626: LD_INT 2100
22628: PPUSH
22629: CALL_OW 67
// ToLua ( displayTroll(); ) ;
22633: LD_STRING displayTroll();
22635: PPUSH
22636: CALL_OW 559
// wait ( 1 1$00 ) ;
22640: LD_INT 2100
22642: PPUSH
22643: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22647: LD_STRING hideTroll();
22649: PPUSH
22650: CALL_OW 559
// end ;
22654: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
22655: LD_EXP 57
22659: PUSH
22660: LD_EXP 83
22664: AND
22665: IFFALSE 22728
22667: GO 22669
22669: DISABLE
22670: LD_INT 0
22672: PPUSH
// begin p := 0 ;
22673: LD_ADDR_VAR 0 1
22677: PUSH
22678: LD_INT 0
22680: ST_TO_ADDR
// repeat game_speed := 1 ;
22681: LD_ADDR_OWVAR 65
22685: PUSH
22686: LD_INT 1
22688: ST_TO_ADDR
// wait ( 0 0$1 ) ;
22689: LD_INT 35
22691: PPUSH
22692: CALL_OW 67
// p := p + 1 ;
22696: LD_ADDR_VAR 0 1
22700: PUSH
22701: LD_VAR 0 1
22705: PUSH
22706: LD_INT 1
22708: PLUS
22709: ST_TO_ADDR
// until p >= 60 ;
22710: LD_VAR 0 1
22714: PUSH
22715: LD_INT 60
22717: GREATEREQUAL
22718: IFFALSE 22681
// game_speed := 4 ;
22720: LD_ADDR_OWVAR 65
22724: PUSH
22725: LD_INT 4
22727: ST_TO_ADDR
// end ;
22728: PPOPN 1
22730: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
22731: LD_EXP 57
22735: PUSH
22736: LD_EXP 84
22740: AND
22741: IFFALSE 22887
22743: GO 22745
22745: DISABLE
22746: LD_INT 0
22748: PPUSH
22749: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22750: LD_ADDR_VAR 0 1
22754: PUSH
22755: LD_INT 22
22757: PUSH
22758: LD_OWVAR 2
22762: PUSH
22763: EMPTY
22764: LIST
22765: LIST
22766: PUSH
22767: LD_INT 2
22769: PUSH
22770: LD_INT 30
22772: PUSH
22773: LD_INT 0
22775: PUSH
22776: EMPTY
22777: LIST
22778: LIST
22779: PUSH
22780: LD_INT 30
22782: PUSH
22783: LD_INT 1
22785: PUSH
22786: EMPTY
22787: LIST
22788: LIST
22789: PUSH
22790: EMPTY
22791: LIST
22792: LIST
22793: LIST
22794: PUSH
22795: EMPTY
22796: LIST
22797: LIST
22798: PPUSH
22799: CALL_OW 69
22803: ST_TO_ADDR
// if not depot then
22804: LD_VAR 0 1
22808: NOT
22809: IFFALSE 22813
// exit ;
22811: GO 22887
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
22813: LD_ADDR_VAR 0 2
22817: PUSH
22818: LD_VAR 0 1
22822: PUSH
22823: LD_INT 1
22825: PPUSH
22826: LD_VAR 0 1
22830: PPUSH
22831: CALL_OW 12
22835: ARRAY
22836: PPUSH
22837: CALL_OW 274
22841: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
22842: LD_VAR 0 2
22846: PPUSH
22847: LD_INT 1
22849: PPUSH
22850: LD_INT 0
22852: PPUSH
22853: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
22857: LD_VAR 0 2
22861: PPUSH
22862: LD_INT 2
22864: PPUSH
22865: LD_INT 0
22867: PPUSH
22868: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
22872: LD_VAR 0 2
22876: PPUSH
22877: LD_INT 3
22879: PPUSH
22880: LD_INT 0
22882: PPUSH
22883: CALL_OW 277
// end ;
22887: PPOPN 2
22889: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
22890: LD_EXP 57
22894: PUSH
22895: LD_EXP 85
22899: AND
22900: IFFALSE 22997
22902: GO 22904
22904: DISABLE
22905: LD_INT 0
22907: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22908: LD_ADDR_VAR 0 1
22912: PUSH
22913: LD_INT 22
22915: PUSH
22916: LD_OWVAR 2
22920: PUSH
22921: EMPTY
22922: LIST
22923: LIST
22924: PUSH
22925: LD_INT 21
22927: PUSH
22928: LD_INT 1
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: PUSH
22935: LD_INT 3
22937: PUSH
22938: LD_INT 23
22940: PUSH
22941: LD_INT 0
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: PUSH
22948: EMPTY
22949: LIST
22950: LIST
22951: PUSH
22952: EMPTY
22953: LIST
22954: LIST
22955: LIST
22956: PPUSH
22957: CALL_OW 69
22961: ST_TO_ADDR
// if not tmp then
22962: LD_VAR 0 1
22966: NOT
22967: IFFALSE 22971
// exit ;
22969: GO 22997
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
22971: LD_VAR 0 1
22975: PUSH
22976: LD_INT 1
22978: PPUSH
22979: LD_VAR 0 1
22983: PPUSH
22984: CALL_OW 12
22988: ARRAY
22989: PPUSH
22990: LD_INT 200
22992: PPUSH
22993: CALL_OW 234
// end ;
22997: PPOPN 1
22999: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
23000: LD_EXP 57
23004: PUSH
23005: LD_EXP 86
23009: AND
23010: IFFALSE 23089
23012: GO 23014
23014: DISABLE
23015: LD_INT 0
23017: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
23018: LD_ADDR_VAR 0 1
23022: PUSH
23023: LD_INT 22
23025: PUSH
23026: LD_OWVAR 2
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: PUSH
23035: LD_INT 21
23037: PUSH
23038: LD_INT 2
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: PPUSH
23049: CALL_OW 69
23053: ST_TO_ADDR
// if not tmp then
23054: LD_VAR 0 1
23058: NOT
23059: IFFALSE 23063
// exit ;
23061: GO 23089
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
23063: LD_VAR 0 1
23067: PUSH
23068: LD_INT 1
23070: PPUSH
23071: LD_VAR 0 1
23075: PPUSH
23076: CALL_OW 12
23080: ARRAY
23081: PPUSH
23082: LD_INT 60
23084: PPUSH
23085: CALL_OW 234
// end ;
23089: PPOPN 1
23091: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
23092: LD_EXP 57
23096: PUSH
23097: LD_EXP 87
23101: AND
23102: IFFALSE 23201
23104: GO 23106
23106: DISABLE
23107: LD_INT 0
23109: PPUSH
23110: PPUSH
// begin enable ;
23111: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
23112: LD_ADDR_VAR 0 1
23116: PUSH
23117: LD_INT 22
23119: PUSH
23120: LD_OWVAR 2
23124: PUSH
23125: EMPTY
23126: LIST
23127: LIST
23128: PUSH
23129: LD_INT 61
23131: PUSH
23132: EMPTY
23133: LIST
23134: PUSH
23135: LD_INT 33
23137: PUSH
23138: LD_INT 2
23140: PUSH
23141: EMPTY
23142: LIST
23143: LIST
23144: PUSH
23145: EMPTY
23146: LIST
23147: LIST
23148: LIST
23149: PPUSH
23150: CALL_OW 69
23154: ST_TO_ADDR
// if not tmp then
23155: LD_VAR 0 1
23159: NOT
23160: IFFALSE 23164
// exit ;
23162: GO 23201
// for i in tmp do
23164: LD_ADDR_VAR 0 2
23168: PUSH
23169: LD_VAR 0 1
23173: PUSH
23174: FOR_IN
23175: IFFALSE 23199
// if IsControledBy ( i ) then
23177: LD_VAR 0 2
23181: PPUSH
23182: CALL_OW 312
23186: IFFALSE 23197
// ComUnlink ( i ) ;
23188: LD_VAR 0 2
23192: PPUSH
23193: CALL_OW 136
23197: GO 23174
23199: POP
23200: POP
// end ;
23201: PPOPN 2
23203: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
23204: LD_EXP 57
23208: PUSH
23209: LD_EXP 88
23213: AND
23214: IFFALSE 23354
23216: GO 23218
23218: DISABLE
23219: LD_INT 0
23221: PPUSH
23222: PPUSH
// begin ToLua ( displayPowell(); ) ;
23223: LD_STRING displayPowell();
23225: PPUSH
23226: CALL_OW 559
// uc_side := 0 ;
23230: LD_ADDR_OWVAR 20
23234: PUSH
23235: LD_INT 0
23237: ST_TO_ADDR
// uc_nation := 2 ;
23238: LD_ADDR_OWVAR 21
23242: PUSH
23243: LD_INT 2
23245: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
23246: LD_ADDR_OWVAR 37
23250: PUSH
23251: LD_INT 14
23253: ST_TO_ADDR
// vc_engine := engine_siberite ;
23254: LD_ADDR_OWVAR 39
23258: PUSH
23259: LD_INT 3
23261: ST_TO_ADDR
// vc_control := control_apeman ;
23262: LD_ADDR_OWVAR 38
23266: PUSH
23267: LD_INT 5
23269: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
23270: LD_ADDR_OWVAR 40
23274: PUSH
23275: LD_INT 29
23277: ST_TO_ADDR
// un := CreateVehicle ;
23278: LD_ADDR_VAR 0 2
23282: PUSH
23283: CALL_OW 45
23287: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23288: LD_VAR 0 2
23292: PPUSH
23293: LD_INT 1
23295: PPUSH
23296: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23300: LD_INT 35
23302: PPUSH
23303: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23307: LD_VAR 0 2
23311: PPUSH
23312: LD_INT 22
23314: PUSH
23315: LD_OWVAR 2
23319: PUSH
23320: EMPTY
23321: LIST
23322: LIST
23323: PPUSH
23324: CALL_OW 69
23328: PPUSH
23329: LD_VAR 0 2
23333: PPUSH
23334: CALL_OW 74
23338: PPUSH
23339: CALL_OW 115
// until IsDead ( un ) ;
23343: LD_VAR 0 2
23347: PPUSH
23348: CALL_OW 301
23352: IFFALSE 23300
// end ;
23354: PPOPN 2
23356: END
// every 0 0$1 trigger StreamModeActive and sStu do
23357: LD_EXP 57
23361: PUSH
23362: LD_EXP 96
23366: AND
23367: IFFALSE 23383
23369: GO 23371
23371: DISABLE
// begin ToLua ( displayStucuk(); ) ;
23372: LD_STRING displayStucuk();
23374: PPUSH
23375: CALL_OW 559
// ResetFog ;
23379: CALL_OW 335
// end ;
23383: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
23384: LD_EXP 57
23388: PUSH
23389: LD_EXP 89
23393: AND
23394: IFFALSE 23535
23396: GO 23398
23398: DISABLE
23399: LD_INT 0
23401: PPUSH
23402: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23403: LD_ADDR_VAR 0 2
23407: PUSH
23408: LD_INT 22
23410: PUSH
23411: LD_OWVAR 2
23415: PUSH
23416: EMPTY
23417: LIST
23418: LIST
23419: PUSH
23420: LD_INT 21
23422: PUSH
23423: LD_INT 1
23425: PUSH
23426: EMPTY
23427: LIST
23428: LIST
23429: PUSH
23430: EMPTY
23431: LIST
23432: LIST
23433: PPUSH
23434: CALL_OW 69
23438: ST_TO_ADDR
// if not tmp then
23439: LD_VAR 0 2
23443: NOT
23444: IFFALSE 23448
// exit ;
23446: GO 23535
// un := tmp [ rand ( 1 , tmp ) ] ;
23448: LD_ADDR_VAR 0 1
23452: PUSH
23453: LD_VAR 0 2
23457: PUSH
23458: LD_INT 1
23460: PPUSH
23461: LD_VAR 0 2
23465: PPUSH
23466: CALL_OW 12
23470: ARRAY
23471: ST_TO_ADDR
// SetSide ( un , 0 ) ;
23472: LD_VAR 0 1
23476: PPUSH
23477: LD_INT 0
23479: PPUSH
23480: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
23484: LD_VAR 0 1
23488: PPUSH
23489: LD_OWVAR 3
23493: PUSH
23494: LD_VAR 0 1
23498: DIFF
23499: PPUSH
23500: LD_VAR 0 1
23504: PPUSH
23505: CALL_OW 74
23509: PPUSH
23510: CALL_OW 115
// wait ( 0 0$20 ) ;
23514: LD_INT 700
23516: PPUSH
23517: CALL_OW 67
// SetSide ( un , your_side ) ;
23521: LD_VAR 0 1
23525: PPUSH
23526: LD_OWVAR 2
23530: PPUSH
23531: CALL_OW 235
// end ;
23535: PPOPN 2
23537: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
23538: LD_EXP 57
23542: PUSH
23543: LD_EXP 90
23547: AND
23548: IFFALSE 23654
23550: GO 23552
23552: DISABLE
23553: LD_INT 0
23555: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23556: LD_ADDR_VAR 0 1
23560: PUSH
23561: LD_INT 22
23563: PUSH
23564: LD_OWVAR 2
23568: PUSH
23569: EMPTY
23570: LIST
23571: LIST
23572: PUSH
23573: LD_INT 2
23575: PUSH
23576: LD_INT 30
23578: PUSH
23579: LD_INT 0
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: PUSH
23586: LD_INT 30
23588: PUSH
23589: LD_INT 1
23591: PUSH
23592: EMPTY
23593: LIST
23594: LIST
23595: PUSH
23596: EMPTY
23597: LIST
23598: LIST
23599: LIST
23600: PUSH
23601: EMPTY
23602: LIST
23603: LIST
23604: PPUSH
23605: CALL_OW 69
23609: ST_TO_ADDR
// if not depot then
23610: LD_VAR 0 1
23614: NOT
23615: IFFALSE 23619
// exit ;
23617: GO 23654
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
23619: LD_VAR 0 1
23623: PUSH
23624: LD_INT 1
23626: ARRAY
23627: PPUSH
23628: CALL_OW 250
23632: PPUSH
23633: LD_VAR 0 1
23637: PUSH
23638: LD_INT 1
23640: ARRAY
23641: PPUSH
23642: CALL_OW 251
23646: PPUSH
23647: LD_INT 70
23649: PPUSH
23650: CALL_OW 495
// end ;
23654: PPOPN 1
23656: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
23657: LD_EXP 57
23661: PUSH
23662: LD_EXP 91
23666: AND
23667: IFFALSE 23878
23669: GO 23671
23671: DISABLE
23672: LD_INT 0
23674: PPUSH
23675: PPUSH
23676: PPUSH
23677: PPUSH
23678: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23679: LD_ADDR_VAR 0 5
23683: PUSH
23684: LD_INT 22
23686: PUSH
23687: LD_OWVAR 2
23691: PUSH
23692: EMPTY
23693: LIST
23694: LIST
23695: PUSH
23696: LD_INT 21
23698: PUSH
23699: LD_INT 1
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: PPUSH
23710: CALL_OW 69
23714: ST_TO_ADDR
// if not tmp then
23715: LD_VAR 0 5
23719: NOT
23720: IFFALSE 23724
// exit ;
23722: GO 23878
// for i in tmp do
23724: LD_ADDR_VAR 0 1
23728: PUSH
23729: LD_VAR 0 5
23733: PUSH
23734: FOR_IN
23735: IFFALSE 23876
// begin d := rand ( 0 , 5 ) ;
23737: LD_ADDR_VAR 0 4
23741: PUSH
23742: LD_INT 0
23744: PPUSH
23745: LD_INT 5
23747: PPUSH
23748: CALL_OW 12
23752: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
23753: LD_ADDR_VAR 0 2
23757: PUSH
23758: LD_VAR 0 1
23762: PPUSH
23763: CALL_OW 250
23767: PPUSH
23768: LD_VAR 0 4
23772: PPUSH
23773: LD_INT 3
23775: PPUSH
23776: LD_INT 12
23778: PPUSH
23779: CALL_OW 12
23783: PPUSH
23784: CALL_OW 272
23788: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
23789: LD_ADDR_VAR 0 3
23793: PUSH
23794: LD_VAR 0 1
23798: PPUSH
23799: CALL_OW 251
23803: PPUSH
23804: LD_VAR 0 4
23808: PPUSH
23809: LD_INT 3
23811: PPUSH
23812: LD_INT 12
23814: PPUSH
23815: CALL_OW 12
23819: PPUSH
23820: CALL_OW 273
23824: ST_TO_ADDR
// if ValidHex ( x , y ) then
23825: LD_VAR 0 2
23829: PPUSH
23830: LD_VAR 0 3
23834: PPUSH
23835: CALL_OW 488
23839: IFFALSE 23874
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
23841: LD_VAR 0 1
23845: PPUSH
23846: LD_VAR 0 2
23850: PPUSH
23851: LD_VAR 0 3
23855: PPUSH
23856: LD_INT 3
23858: PPUSH
23859: LD_INT 6
23861: PPUSH
23862: CALL_OW 12
23866: PPUSH
23867: LD_INT 1
23869: PPUSH
23870: CALL_OW 483
// end ;
23874: GO 23734
23876: POP
23877: POP
// end ;
23878: PPOPN 5
23880: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
23881: LD_EXP 57
23885: PUSH
23886: LD_EXP 92
23890: AND
23891: IFFALSE 23985
23893: GO 23895
23895: DISABLE
23896: LD_INT 0
23898: PPUSH
23899: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
23900: LD_ADDR_VAR 0 2
23904: PUSH
23905: LD_INT 22
23907: PUSH
23908: LD_OWVAR 2
23912: PUSH
23913: EMPTY
23914: LIST
23915: LIST
23916: PUSH
23917: LD_INT 32
23919: PUSH
23920: LD_INT 1
23922: PUSH
23923: EMPTY
23924: LIST
23925: LIST
23926: PUSH
23927: LD_INT 21
23929: PUSH
23930: LD_INT 2
23932: PUSH
23933: EMPTY
23934: LIST
23935: LIST
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: LIST
23941: PPUSH
23942: CALL_OW 69
23946: ST_TO_ADDR
// if not tmp then
23947: LD_VAR 0 2
23951: NOT
23952: IFFALSE 23956
// exit ;
23954: GO 23985
// for i in tmp do
23956: LD_ADDR_VAR 0 1
23960: PUSH
23961: LD_VAR 0 2
23965: PUSH
23966: FOR_IN
23967: IFFALSE 23983
// SetFuel ( i , 0 ) ;
23969: LD_VAR 0 1
23973: PPUSH
23974: LD_INT 0
23976: PPUSH
23977: CALL_OW 240
23981: GO 23966
23983: POP
23984: POP
// end ;
23985: PPOPN 2
23987: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
23988: LD_EXP 57
23992: PUSH
23993: LD_EXP 93
23997: AND
23998: IFFALSE 24064
24000: GO 24002
24002: DISABLE
24003: LD_INT 0
24005: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24006: LD_ADDR_VAR 0 1
24010: PUSH
24011: LD_INT 22
24013: PUSH
24014: LD_OWVAR 2
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: PUSH
24023: LD_INT 30
24025: PUSH
24026: LD_INT 29
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: PPUSH
24037: CALL_OW 69
24041: ST_TO_ADDR
// if not tmp then
24042: LD_VAR 0 1
24046: NOT
24047: IFFALSE 24051
// exit ;
24049: GO 24064
// DestroyUnit ( tmp [ 1 ] ) ;
24051: LD_VAR 0 1
24055: PUSH
24056: LD_INT 1
24058: ARRAY
24059: PPUSH
24060: CALL_OW 65
// end ;
24064: PPOPN 1
24066: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
24067: LD_EXP 57
24071: PUSH
24072: LD_EXP 95
24076: AND
24077: IFFALSE 24206
24079: GO 24081
24081: DISABLE
24082: LD_INT 0
24084: PPUSH
// begin uc_side := 0 ;
24085: LD_ADDR_OWVAR 20
24089: PUSH
24090: LD_INT 0
24092: ST_TO_ADDR
// uc_nation := nation_arabian ;
24093: LD_ADDR_OWVAR 21
24097: PUSH
24098: LD_INT 2
24100: ST_TO_ADDR
// hc_gallery :=  ;
24101: LD_ADDR_OWVAR 33
24105: PUSH
24106: LD_STRING 
24108: ST_TO_ADDR
// hc_name :=  ;
24109: LD_ADDR_OWVAR 26
24113: PUSH
24114: LD_STRING 
24116: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
24117: LD_INT 1
24119: PPUSH
24120: LD_INT 11
24122: PPUSH
24123: LD_INT 10
24125: PPUSH
24126: CALL_OW 380
// un := CreateHuman ;
24130: LD_ADDR_VAR 0 1
24134: PUSH
24135: CALL_OW 44
24139: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24140: LD_VAR 0 1
24144: PPUSH
24145: LD_INT 1
24147: PPUSH
24148: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24152: LD_INT 35
24154: PPUSH
24155: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24159: LD_VAR 0 1
24163: PPUSH
24164: LD_INT 22
24166: PUSH
24167: LD_OWVAR 2
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: PPUSH
24176: CALL_OW 69
24180: PPUSH
24181: LD_VAR 0 1
24185: PPUSH
24186: CALL_OW 74
24190: PPUSH
24191: CALL_OW 115
// until IsDead ( un ) ;
24195: LD_VAR 0 1
24199: PPUSH
24200: CALL_OW 301
24204: IFFALSE 24152
// end ;
24206: PPOPN 1
24208: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
24209: LD_EXP 57
24213: PUSH
24214: LD_EXP 97
24218: AND
24219: IFFALSE 24231
24221: GO 24223
24223: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
24224: LD_STRING earthquake(getX(game), 0, 32)
24226: PPUSH
24227: CALL_OW 559
24231: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
24232: LD_EXP 57
24236: PUSH
24237: LD_EXP 98
24241: AND
24242: IFFALSE 24333
24244: GO 24246
24246: DISABLE
24247: LD_INT 0
24249: PPUSH
// begin enable ;
24250: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
24251: LD_ADDR_VAR 0 1
24255: PUSH
24256: LD_INT 22
24258: PUSH
24259: LD_OWVAR 2
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: PUSH
24268: LD_INT 21
24270: PUSH
24271: LD_INT 2
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: PUSH
24278: LD_INT 33
24280: PUSH
24281: LD_INT 3
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: LIST
24292: PPUSH
24293: CALL_OW 69
24297: ST_TO_ADDR
// if not tmp then
24298: LD_VAR 0 1
24302: NOT
24303: IFFALSE 24307
// exit ;
24305: GO 24333
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24307: LD_VAR 0 1
24311: PUSH
24312: LD_INT 1
24314: PPUSH
24315: LD_VAR 0 1
24319: PPUSH
24320: CALL_OW 12
24324: ARRAY
24325: PPUSH
24326: LD_INT 1
24328: PPUSH
24329: CALL_OW 234
// end ;
24333: PPOPN 1
24335: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
24336: LD_EXP 57
24340: PUSH
24341: LD_EXP 99
24345: AND
24346: IFFALSE 24487
24348: GO 24350
24350: DISABLE
24351: LD_INT 0
24353: PPUSH
24354: PPUSH
24355: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24356: LD_ADDR_VAR 0 3
24360: PUSH
24361: LD_INT 22
24363: PUSH
24364: LD_OWVAR 2
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: PUSH
24373: LD_INT 25
24375: PUSH
24376: LD_INT 1
24378: PUSH
24379: EMPTY
24380: LIST
24381: LIST
24382: PUSH
24383: EMPTY
24384: LIST
24385: LIST
24386: PPUSH
24387: CALL_OW 69
24391: ST_TO_ADDR
// if not tmp then
24392: LD_VAR 0 3
24396: NOT
24397: IFFALSE 24401
// exit ;
24399: GO 24487
// un := tmp [ rand ( 1 , tmp ) ] ;
24401: LD_ADDR_VAR 0 2
24405: PUSH
24406: LD_VAR 0 3
24410: PUSH
24411: LD_INT 1
24413: PPUSH
24414: LD_VAR 0 3
24418: PPUSH
24419: CALL_OW 12
24423: ARRAY
24424: ST_TO_ADDR
// if Crawls ( un ) then
24425: LD_VAR 0 2
24429: PPUSH
24430: CALL_OW 318
24434: IFFALSE 24445
// ComWalk ( un ) ;
24436: LD_VAR 0 2
24440: PPUSH
24441: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
24445: LD_VAR 0 2
24449: PPUSH
24450: LD_INT 9
24452: PPUSH
24453: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
24457: LD_INT 28
24459: PPUSH
24460: LD_OWVAR 2
24464: PPUSH
24465: LD_INT 2
24467: PPUSH
24468: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
24472: LD_INT 29
24474: PPUSH
24475: LD_OWVAR 2
24479: PPUSH
24480: LD_INT 2
24482: PPUSH
24483: CALL_OW 322
// end ;
24487: PPOPN 3
24489: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
24490: LD_EXP 57
24494: PUSH
24495: LD_EXP 100
24499: AND
24500: IFFALSE 24611
24502: GO 24504
24504: DISABLE
24505: LD_INT 0
24507: PPUSH
24508: PPUSH
24509: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24510: LD_ADDR_VAR 0 3
24514: PUSH
24515: LD_INT 22
24517: PUSH
24518: LD_OWVAR 2
24522: PUSH
24523: EMPTY
24524: LIST
24525: LIST
24526: PUSH
24527: LD_INT 25
24529: PUSH
24530: LD_INT 1
24532: PUSH
24533: EMPTY
24534: LIST
24535: LIST
24536: PUSH
24537: EMPTY
24538: LIST
24539: LIST
24540: PPUSH
24541: CALL_OW 69
24545: ST_TO_ADDR
// if not tmp then
24546: LD_VAR 0 3
24550: NOT
24551: IFFALSE 24555
// exit ;
24553: GO 24611
// un := tmp [ rand ( 1 , tmp ) ] ;
24555: LD_ADDR_VAR 0 2
24559: PUSH
24560: LD_VAR 0 3
24564: PUSH
24565: LD_INT 1
24567: PPUSH
24568: LD_VAR 0 3
24572: PPUSH
24573: CALL_OW 12
24577: ARRAY
24578: ST_TO_ADDR
// if Crawls ( un ) then
24579: LD_VAR 0 2
24583: PPUSH
24584: CALL_OW 318
24588: IFFALSE 24599
// ComWalk ( un ) ;
24590: LD_VAR 0 2
24594: PPUSH
24595: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24599: LD_VAR 0 2
24603: PPUSH
24604: LD_INT 8
24606: PPUSH
24607: CALL_OW 336
// end ;
24611: PPOPN 3
24613: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
24614: LD_EXP 57
24618: PUSH
24619: LD_EXP 101
24623: AND
24624: IFFALSE 24768
24626: GO 24628
24628: DISABLE
24629: LD_INT 0
24631: PPUSH
24632: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
24633: LD_ADDR_VAR 0 2
24637: PUSH
24638: LD_INT 22
24640: PUSH
24641: LD_OWVAR 2
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: PUSH
24650: LD_INT 21
24652: PUSH
24653: LD_INT 2
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: PUSH
24660: LD_INT 2
24662: PUSH
24663: LD_INT 34
24665: PUSH
24666: LD_INT 12
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: PUSH
24673: LD_INT 34
24675: PUSH
24676: LD_INT 51
24678: PUSH
24679: EMPTY
24680: LIST
24681: LIST
24682: PUSH
24683: LD_INT 34
24685: PUSH
24686: LD_INT 32
24688: PUSH
24689: EMPTY
24690: LIST
24691: LIST
24692: PUSH
24693: EMPTY
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: PUSH
24699: EMPTY
24700: LIST
24701: LIST
24702: LIST
24703: PPUSH
24704: CALL_OW 69
24708: ST_TO_ADDR
// if not tmp then
24709: LD_VAR 0 2
24713: NOT
24714: IFFALSE 24718
// exit ;
24716: GO 24768
// for i in tmp do
24718: LD_ADDR_VAR 0 1
24722: PUSH
24723: LD_VAR 0 2
24727: PUSH
24728: FOR_IN
24729: IFFALSE 24766
// if GetCargo ( i , mat_artifact ) = 0 then
24731: LD_VAR 0 1
24735: PPUSH
24736: LD_INT 4
24738: PPUSH
24739: CALL_OW 289
24743: PUSH
24744: LD_INT 0
24746: EQUAL
24747: IFFALSE 24764
// SetCargo ( i , mat_siberit , 100 ) ;
24749: LD_VAR 0 1
24753: PPUSH
24754: LD_INT 3
24756: PPUSH
24757: LD_INT 100
24759: PPUSH
24760: CALL_OW 290
24764: GO 24728
24766: POP
24767: POP
// end ;
24768: PPOPN 2
24770: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
24771: LD_EXP 57
24775: PUSH
24776: LD_EXP 102
24780: AND
24781: IFFALSE 24964
24783: GO 24785
24785: DISABLE
24786: LD_INT 0
24788: PPUSH
24789: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24790: LD_ADDR_VAR 0 2
24794: PUSH
24795: LD_INT 22
24797: PUSH
24798: LD_OWVAR 2
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: PPUSH
24807: CALL_OW 69
24811: ST_TO_ADDR
// if not tmp then
24812: LD_VAR 0 2
24816: NOT
24817: IFFALSE 24821
// exit ;
24819: GO 24964
// for i := 1 to 2 do
24821: LD_ADDR_VAR 0 1
24825: PUSH
24826: DOUBLE
24827: LD_INT 1
24829: DEC
24830: ST_TO_ADDR
24831: LD_INT 2
24833: PUSH
24834: FOR_TO
24835: IFFALSE 24962
// begin uc_side := your_side ;
24837: LD_ADDR_OWVAR 20
24841: PUSH
24842: LD_OWVAR 2
24846: ST_TO_ADDR
// uc_nation := nation_american ;
24847: LD_ADDR_OWVAR 21
24851: PUSH
24852: LD_INT 1
24854: ST_TO_ADDR
// vc_chassis := us_morphling ;
24855: LD_ADDR_OWVAR 37
24859: PUSH
24860: LD_INT 5
24862: ST_TO_ADDR
// vc_engine := engine_siberite ;
24863: LD_ADDR_OWVAR 39
24867: PUSH
24868: LD_INT 3
24870: ST_TO_ADDR
// vc_control := control_computer ;
24871: LD_ADDR_OWVAR 38
24875: PUSH
24876: LD_INT 3
24878: ST_TO_ADDR
// vc_weapon := us_double_laser ;
24879: LD_ADDR_OWVAR 40
24883: PUSH
24884: LD_INT 10
24886: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
24887: LD_VAR 0 2
24891: PUSH
24892: LD_INT 1
24894: ARRAY
24895: PPUSH
24896: CALL_OW 310
24900: NOT
24901: IFFALSE 24948
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
24903: CALL_OW 45
24907: PPUSH
24908: LD_VAR 0 2
24912: PUSH
24913: LD_INT 1
24915: ARRAY
24916: PPUSH
24917: CALL_OW 250
24921: PPUSH
24922: LD_VAR 0 2
24926: PUSH
24927: LD_INT 1
24929: ARRAY
24930: PPUSH
24931: CALL_OW 251
24935: PPUSH
24936: LD_INT 12
24938: PPUSH
24939: LD_INT 1
24941: PPUSH
24942: CALL_OW 50
24946: GO 24960
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
24948: CALL_OW 45
24952: PPUSH
24953: LD_INT 1
24955: PPUSH
24956: CALL_OW 51
// end ;
24960: GO 24834
24962: POP
24963: POP
// end ;
24964: PPOPN 2
24966: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
24967: LD_EXP 57
24971: PUSH
24972: LD_EXP 103
24976: AND
24977: IFFALSE 25199
24979: GO 24981
24981: DISABLE
24982: LD_INT 0
24984: PPUSH
24985: PPUSH
24986: PPUSH
24987: PPUSH
24988: PPUSH
24989: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24990: LD_ADDR_VAR 0 6
24994: PUSH
24995: LD_INT 22
24997: PUSH
24998: LD_OWVAR 2
25002: PUSH
25003: EMPTY
25004: LIST
25005: LIST
25006: PUSH
25007: LD_INT 21
25009: PUSH
25010: LD_INT 1
25012: PUSH
25013: EMPTY
25014: LIST
25015: LIST
25016: PUSH
25017: LD_INT 3
25019: PUSH
25020: LD_INT 23
25022: PUSH
25023: LD_INT 0
25025: PUSH
25026: EMPTY
25027: LIST
25028: LIST
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: PUSH
25034: EMPTY
25035: LIST
25036: LIST
25037: LIST
25038: PPUSH
25039: CALL_OW 69
25043: ST_TO_ADDR
// if not tmp then
25044: LD_VAR 0 6
25048: NOT
25049: IFFALSE 25053
// exit ;
25051: GO 25199
// s1 := rand ( 1 , 4 ) ;
25053: LD_ADDR_VAR 0 2
25057: PUSH
25058: LD_INT 1
25060: PPUSH
25061: LD_INT 4
25063: PPUSH
25064: CALL_OW 12
25068: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
25069: LD_ADDR_VAR 0 4
25073: PUSH
25074: LD_VAR 0 6
25078: PUSH
25079: LD_INT 1
25081: ARRAY
25082: PPUSH
25083: LD_VAR 0 2
25087: PPUSH
25088: CALL_OW 259
25092: ST_TO_ADDR
// if s1 = 1 then
25093: LD_VAR 0 2
25097: PUSH
25098: LD_INT 1
25100: EQUAL
25101: IFFALSE 25121
// s2 := rand ( 2 , 4 ) else
25103: LD_ADDR_VAR 0 3
25107: PUSH
25108: LD_INT 2
25110: PPUSH
25111: LD_INT 4
25113: PPUSH
25114: CALL_OW 12
25118: ST_TO_ADDR
25119: GO 25129
// s2 := 1 ;
25121: LD_ADDR_VAR 0 3
25125: PUSH
25126: LD_INT 1
25128: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
25129: LD_ADDR_VAR 0 5
25133: PUSH
25134: LD_VAR 0 6
25138: PUSH
25139: LD_INT 1
25141: ARRAY
25142: PPUSH
25143: LD_VAR 0 3
25147: PPUSH
25148: CALL_OW 259
25152: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
25153: LD_VAR 0 6
25157: PUSH
25158: LD_INT 1
25160: ARRAY
25161: PPUSH
25162: LD_VAR 0 2
25166: PPUSH
25167: LD_VAR 0 5
25171: PPUSH
25172: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
25176: LD_VAR 0 6
25180: PUSH
25181: LD_INT 1
25183: ARRAY
25184: PPUSH
25185: LD_VAR 0 3
25189: PPUSH
25190: LD_VAR 0 4
25194: PPUSH
25195: CALL_OW 237
// end ;
25199: PPOPN 6
25201: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
25202: LD_EXP 57
25206: PUSH
25207: LD_EXP 104
25211: AND
25212: IFFALSE 25291
25214: GO 25216
25216: DISABLE
25217: LD_INT 0
25219: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
25220: LD_ADDR_VAR 0 1
25224: PUSH
25225: LD_INT 22
25227: PUSH
25228: LD_OWVAR 2
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: PUSH
25237: LD_INT 30
25239: PUSH
25240: LD_INT 3
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: PUSH
25247: EMPTY
25248: LIST
25249: LIST
25250: PPUSH
25251: CALL_OW 69
25255: ST_TO_ADDR
// if not tmp then
25256: LD_VAR 0 1
25260: NOT
25261: IFFALSE 25265
// exit ;
25263: GO 25291
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25265: LD_VAR 0 1
25269: PUSH
25270: LD_INT 1
25272: PPUSH
25273: LD_VAR 0 1
25277: PPUSH
25278: CALL_OW 12
25282: ARRAY
25283: PPUSH
25284: LD_INT 1
25286: PPUSH
25287: CALL_OW 234
// end ;
25291: PPOPN 1
25293: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
25294: LD_EXP 57
25298: PUSH
25299: LD_EXP 105
25303: AND
25304: IFFALSE 25416
25306: GO 25308
25308: DISABLE
25309: LD_INT 0
25311: PPUSH
25312: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
25313: LD_ADDR_VAR 0 2
25317: PUSH
25318: LD_INT 22
25320: PUSH
25321: LD_OWVAR 2
25325: PUSH
25326: EMPTY
25327: LIST
25328: LIST
25329: PUSH
25330: LD_INT 2
25332: PUSH
25333: LD_INT 30
25335: PUSH
25336: LD_INT 27
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: PUSH
25343: LD_INT 30
25345: PUSH
25346: LD_INT 26
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: PUSH
25353: LD_INT 30
25355: PUSH
25356: LD_INT 28
25358: PUSH
25359: EMPTY
25360: LIST
25361: LIST
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: LIST
25367: LIST
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: PPUSH
25373: CALL_OW 69
25377: ST_TO_ADDR
// if not tmp then
25378: LD_VAR 0 2
25382: NOT
25383: IFFALSE 25387
// exit ;
25385: GO 25416
// for i in tmp do
25387: LD_ADDR_VAR 0 1
25391: PUSH
25392: LD_VAR 0 2
25396: PUSH
25397: FOR_IN
25398: IFFALSE 25414
// SetLives ( i , 1 ) ;
25400: LD_VAR 0 1
25404: PPUSH
25405: LD_INT 1
25407: PPUSH
25408: CALL_OW 234
25412: GO 25397
25414: POP
25415: POP
// end ;
25416: PPOPN 2
25418: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
25419: LD_EXP 57
25423: PUSH
25424: LD_EXP 106
25428: AND
25429: IFFALSE 25703
25431: GO 25433
25433: DISABLE
25434: LD_INT 0
25436: PPUSH
25437: PPUSH
25438: PPUSH
// begin i := rand ( 1 , 7 ) ;
25439: LD_ADDR_VAR 0 1
25443: PUSH
25444: LD_INT 1
25446: PPUSH
25447: LD_INT 7
25449: PPUSH
25450: CALL_OW 12
25454: ST_TO_ADDR
// case i of 1 :
25455: LD_VAR 0 1
25459: PUSH
25460: LD_INT 1
25462: DOUBLE
25463: EQUAL
25464: IFTRUE 25468
25466: GO 25478
25468: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
25469: LD_STRING earthquake(getX(game), 0, 32)
25471: PPUSH
25472: CALL_OW 559
25476: GO 25703
25478: LD_INT 2
25480: DOUBLE
25481: EQUAL
25482: IFTRUE 25486
25484: GO 25500
25486: POP
// begin ToLua ( displayStucuk(); ) ;
25487: LD_STRING displayStucuk();
25489: PPUSH
25490: CALL_OW 559
// ResetFog ;
25494: CALL_OW 335
// end ; 3 :
25498: GO 25703
25500: LD_INT 3
25502: DOUBLE
25503: EQUAL
25504: IFTRUE 25508
25506: GO 25612
25508: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25509: LD_ADDR_VAR 0 2
25513: PUSH
25514: LD_INT 22
25516: PUSH
25517: LD_OWVAR 2
25521: PUSH
25522: EMPTY
25523: LIST
25524: LIST
25525: PUSH
25526: LD_INT 25
25528: PUSH
25529: LD_INT 1
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: PPUSH
25540: CALL_OW 69
25544: ST_TO_ADDR
// if not tmp then
25545: LD_VAR 0 2
25549: NOT
25550: IFFALSE 25554
// exit ;
25552: GO 25703
// un := tmp [ rand ( 1 , tmp ) ] ;
25554: LD_ADDR_VAR 0 3
25558: PUSH
25559: LD_VAR 0 2
25563: PUSH
25564: LD_INT 1
25566: PPUSH
25567: LD_VAR 0 2
25571: PPUSH
25572: CALL_OW 12
25576: ARRAY
25577: ST_TO_ADDR
// if Crawls ( un ) then
25578: LD_VAR 0 3
25582: PPUSH
25583: CALL_OW 318
25587: IFFALSE 25598
// ComWalk ( un ) ;
25589: LD_VAR 0 3
25593: PPUSH
25594: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25598: LD_VAR 0 3
25602: PPUSH
25603: LD_INT 8
25605: PPUSH
25606: CALL_OW 336
// end ; 4 :
25610: GO 25703
25612: LD_INT 4
25614: DOUBLE
25615: EQUAL
25616: IFTRUE 25620
25618: GO 25681
25620: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25621: LD_ADDR_VAR 0 2
25625: PUSH
25626: LD_INT 22
25628: PUSH
25629: LD_OWVAR 2
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: PUSH
25638: LD_INT 30
25640: PUSH
25641: LD_INT 29
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: PPUSH
25652: CALL_OW 69
25656: ST_TO_ADDR
// if not tmp then
25657: LD_VAR 0 2
25661: NOT
25662: IFFALSE 25666
// exit ;
25664: GO 25703
// DestroyUnit ( tmp [ 1 ] ) ;
25666: LD_VAR 0 2
25670: PUSH
25671: LD_INT 1
25673: ARRAY
25674: PPUSH
25675: CALL_OW 65
// end ; 5 .. 7 :
25679: GO 25703
25681: LD_INT 5
25683: DOUBLE
25684: GREATEREQUAL
25685: IFFALSE 25693
25687: LD_INT 7
25689: DOUBLE
25690: LESSEQUAL
25691: IFTRUE 25695
25693: GO 25702
25695: POP
// StreamSibBomb ; end ;
25696: CALL 21953 0 0
25700: GO 25703
25702: POP
// end ;
25703: PPOPN 3
25705: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
25706: LD_EXP 57
25710: PUSH
25711: LD_EXP 107
25715: AND
25716: IFFALSE 25872
25718: GO 25720
25720: DISABLE
25721: LD_INT 0
25723: PPUSH
25724: PPUSH
25725: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
25726: LD_ADDR_VAR 0 2
25730: PUSH
25731: LD_INT 81
25733: PUSH
25734: LD_OWVAR 2
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: PUSH
25743: LD_INT 2
25745: PUSH
25746: LD_INT 21
25748: PUSH
25749: LD_INT 1
25751: PUSH
25752: EMPTY
25753: LIST
25754: LIST
25755: PUSH
25756: LD_INT 21
25758: PUSH
25759: LD_INT 2
25761: PUSH
25762: EMPTY
25763: LIST
25764: LIST
25765: PUSH
25766: EMPTY
25767: LIST
25768: LIST
25769: LIST
25770: PUSH
25771: EMPTY
25772: LIST
25773: LIST
25774: PPUSH
25775: CALL_OW 69
25779: ST_TO_ADDR
// if not tmp then
25780: LD_VAR 0 2
25784: NOT
25785: IFFALSE 25789
// exit ;
25787: GO 25872
// p := 0 ;
25789: LD_ADDR_VAR 0 3
25793: PUSH
25794: LD_INT 0
25796: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25797: LD_INT 35
25799: PPUSH
25800: CALL_OW 67
// p := p + 1 ;
25804: LD_ADDR_VAR 0 3
25808: PUSH
25809: LD_VAR 0 3
25813: PUSH
25814: LD_INT 1
25816: PLUS
25817: ST_TO_ADDR
// for i in tmp do
25818: LD_ADDR_VAR 0 1
25822: PUSH
25823: LD_VAR 0 2
25827: PUSH
25828: FOR_IN
25829: IFFALSE 25860
// if GetLives ( i ) < 1000 then
25831: LD_VAR 0 1
25835: PPUSH
25836: CALL_OW 256
25840: PUSH
25841: LD_INT 1000
25843: LESS
25844: IFFALSE 25858
// SetLives ( i , 1000 ) ;
25846: LD_VAR 0 1
25850: PPUSH
25851: LD_INT 1000
25853: PPUSH
25854: CALL_OW 234
25858: GO 25828
25860: POP
25861: POP
// until p > 20 ;
25862: LD_VAR 0 3
25866: PUSH
25867: LD_INT 20
25869: GREATER
25870: IFFALSE 25797
// end ;
25872: PPOPN 3
25874: END
// every 0 0$1 trigger StreamModeActive and sTime do
25875: LD_EXP 57
25879: PUSH
25880: LD_EXP 108
25884: AND
25885: IFFALSE 25920
25887: GO 25889
25889: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
25890: LD_INT 28
25892: PPUSH
25893: LD_OWVAR 2
25897: PPUSH
25898: LD_INT 2
25900: PPUSH
25901: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
25905: LD_INT 30
25907: PPUSH
25908: LD_OWVAR 2
25912: PPUSH
25913: LD_INT 2
25915: PPUSH
25916: CALL_OW 322
// end ;
25920: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
25921: LD_EXP 57
25925: PUSH
25926: LD_EXP 109
25930: AND
25931: IFFALSE 26052
25933: GO 25935
25935: DISABLE
25936: LD_INT 0
25938: PPUSH
25939: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25940: LD_ADDR_VAR 0 2
25944: PUSH
25945: LD_INT 22
25947: PUSH
25948: LD_OWVAR 2
25952: PUSH
25953: EMPTY
25954: LIST
25955: LIST
25956: PUSH
25957: LD_INT 21
25959: PUSH
25960: LD_INT 1
25962: PUSH
25963: EMPTY
25964: LIST
25965: LIST
25966: PUSH
25967: LD_INT 3
25969: PUSH
25970: LD_INT 23
25972: PUSH
25973: LD_INT 0
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: LIST
25988: PPUSH
25989: CALL_OW 69
25993: ST_TO_ADDR
// if not tmp then
25994: LD_VAR 0 2
25998: NOT
25999: IFFALSE 26003
// exit ;
26001: GO 26052
// for i in tmp do
26003: LD_ADDR_VAR 0 1
26007: PUSH
26008: LD_VAR 0 2
26012: PUSH
26013: FOR_IN
26014: IFFALSE 26050
// begin if Crawls ( i ) then
26016: LD_VAR 0 1
26020: PPUSH
26021: CALL_OW 318
26025: IFFALSE 26036
// ComWalk ( i ) ;
26027: LD_VAR 0 1
26031: PPUSH
26032: CALL_OW 138
// SetClass ( i , 2 ) ;
26036: LD_VAR 0 1
26040: PPUSH
26041: LD_INT 2
26043: PPUSH
26044: CALL_OW 336
// end ;
26048: GO 26013
26050: POP
26051: POP
// end ;
26052: PPOPN 2
26054: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
26055: LD_EXP 57
26059: PUSH
26060: LD_EXP 110
26064: AND
26065: IFFALSE 26346
26067: GO 26069
26069: DISABLE
26070: LD_INT 0
26072: PPUSH
26073: PPUSH
26074: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
26075: LD_OWVAR 2
26079: PPUSH
26080: LD_INT 9
26082: PPUSH
26083: LD_INT 1
26085: PPUSH
26086: LD_INT 1
26088: PPUSH
26089: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
26093: LD_INT 9
26095: PPUSH
26096: LD_OWVAR 2
26100: PPUSH
26101: CALL_OW 343
// uc_side := 9 ;
26105: LD_ADDR_OWVAR 20
26109: PUSH
26110: LD_INT 9
26112: ST_TO_ADDR
// uc_nation := 2 ;
26113: LD_ADDR_OWVAR 21
26117: PUSH
26118: LD_INT 2
26120: ST_TO_ADDR
// hc_name := Dark Warrior ;
26121: LD_ADDR_OWVAR 26
26125: PUSH
26126: LD_STRING Dark Warrior
26128: ST_TO_ADDR
// hc_gallery :=  ;
26129: LD_ADDR_OWVAR 33
26133: PUSH
26134: LD_STRING 
26136: ST_TO_ADDR
// hc_noskilllimit := true ;
26137: LD_ADDR_OWVAR 76
26141: PUSH
26142: LD_INT 1
26144: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
26145: LD_ADDR_OWVAR 31
26149: PUSH
26150: LD_INT 30
26152: PUSH
26153: LD_INT 30
26155: PUSH
26156: LD_INT 30
26158: PUSH
26159: LD_INT 30
26161: PUSH
26162: EMPTY
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: ST_TO_ADDR
// un := CreateHuman ;
26168: LD_ADDR_VAR 0 3
26172: PUSH
26173: CALL_OW 44
26177: ST_TO_ADDR
// hc_noskilllimit := false ;
26178: LD_ADDR_OWVAR 76
26182: PUSH
26183: LD_INT 0
26185: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26186: LD_VAR 0 3
26190: PPUSH
26191: LD_INT 1
26193: PPUSH
26194: CALL_OW 51
// p := 0 ;
26198: LD_ADDR_VAR 0 2
26202: PUSH
26203: LD_INT 0
26205: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26206: LD_INT 35
26208: PPUSH
26209: CALL_OW 67
// p := p + 1 ;
26213: LD_ADDR_VAR 0 2
26217: PUSH
26218: LD_VAR 0 2
26222: PUSH
26223: LD_INT 1
26225: PLUS
26226: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
26227: LD_VAR 0 3
26231: PPUSH
26232: CALL_OW 256
26236: PUSH
26237: LD_INT 1000
26239: LESS
26240: IFFALSE 26254
// SetLives ( un , 1000 ) ;
26242: LD_VAR 0 3
26246: PPUSH
26247: LD_INT 1000
26249: PPUSH
26250: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
26254: LD_VAR 0 3
26258: PPUSH
26259: LD_INT 81
26261: PUSH
26262: LD_OWVAR 2
26266: PUSH
26267: EMPTY
26268: LIST
26269: LIST
26270: PUSH
26271: LD_INT 91
26273: PUSH
26274: LD_VAR 0 3
26278: PUSH
26279: LD_INT 30
26281: PUSH
26282: EMPTY
26283: LIST
26284: LIST
26285: LIST
26286: PUSH
26287: EMPTY
26288: LIST
26289: LIST
26290: PPUSH
26291: CALL_OW 69
26295: PPUSH
26296: LD_VAR 0 3
26300: PPUSH
26301: CALL_OW 74
26305: PPUSH
26306: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
26310: LD_VAR 0 2
26314: PUSH
26315: LD_INT 60
26317: GREATER
26318: PUSH
26319: LD_VAR 0 3
26323: PPUSH
26324: CALL_OW 301
26328: OR
26329: IFFALSE 26206
// if un then
26331: LD_VAR 0 3
26335: IFFALSE 26346
// RemoveUnit ( un ) ;
26337: LD_VAR 0 3
26341: PPUSH
26342: CALL_OW 64
// end ;
26346: PPOPN 3
26348: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
26349: LD_INT 0
26351: PPUSH
// case cmd of 301 :
26352: LD_VAR 0 1
26356: PUSH
26357: LD_INT 301
26359: DOUBLE
26360: EQUAL
26361: IFTRUE 26365
26363: GO 26397
26365: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
26366: LD_VAR 0 6
26370: PPUSH
26371: LD_VAR 0 7
26375: PPUSH
26376: LD_VAR 0 8
26380: PPUSH
26381: LD_VAR 0 4
26385: PPUSH
26386: LD_VAR 0 5
26390: PPUSH
26391: CALL 27598 0 5
26395: GO 26518
26397: LD_INT 302
26399: DOUBLE
26400: EQUAL
26401: IFTRUE 26405
26403: GO 26442
26405: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
26406: LD_VAR 0 6
26410: PPUSH
26411: LD_VAR 0 7
26415: PPUSH
26416: LD_VAR 0 8
26420: PPUSH
26421: LD_VAR 0 9
26425: PPUSH
26426: LD_VAR 0 4
26430: PPUSH
26431: LD_VAR 0 5
26435: PPUSH
26436: CALL 27689 0 6
26440: GO 26518
26442: LD_INT 303
26444: DOUBLE
26445: EQUAL
26446: IFTRUE 26450
26448: GO 26487
26450: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
26451: LD_VAR 0 6
26455: PPUSH
26456: LD_VAR 0 7
26460: PPUSH
26461: LD_VAR 0 8
26465: PPUSH
26466: LD_VAR 0 9
26470: PPUSH
26471: LD_VAR 0 4
26475: PPUSH
26476: LD_VAR 0 5
26480: PPUSH
26481: CALL 26523 0 6
26485: GO 26518
26487: LD_INT 304
26489: DOUBLE
26490: EQUAL
26491: IFTRUE 26495
26493: GO 26517
26495: POP
// hHackTeleport ( unit , x , y ) ; end ;
26496: LD_VAR 0 2
26500: PPUSH
26501: LD_VAR 0 4
26505: PPUSH
26506: LD_VAR 0 5
26510: PPUSH
26511: CALL 28282 0 3
26515: GO 26518
26517: POP
// end ;
26518: LD_VAR 0 12
26522: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
26523: LD_INT 0
26525: PPUSH
26526: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
26527: LD_VAR 0 1
26531: PUSH
26532: LD_INT 1
26534: LESS
26535: PUSH
26536: LD_VAR 0 1
26540: PUSH
26541: LD_INT 3
26543: GREATER
26544: OR
26545: PUSH
26546: LD_VAR 0 5
26550: PPUSH
26551: LD_VAR 0 6
26555: PPUSH
26556: CALL_OW 428
26560: OR
26561: IFFALSE 26565
// exit ;
26563: GO 27285
// uc_side := your_side ;
26565: LD_ADDR_OWVAR 20
26569: PUSH
26570: LD_OWVAR 2
26574: ST_TO_ADDR
// uc_nation := nation ;
26575: LD_ADDR_OWVAR 21
26579: PUSH
26580: LD_VAR 0 1
26584: ST_TO_ADDR
// bc_level = 1 ;
26585: LD_ADDR_OWVAR 43
26589: PUSH
26590: LD_INT 1
26592: ST_TO_ADDR
// case btype of 1 :
26593: LD_VAR 0 2
26597: PUSH
26598: LD_INT 1
26600: DOUBLE
26601: EQUAL
26602: IFTRUE 26606
26604: GO 26617
26606: POP
// bc_type := b_depot ; 2 :
26607: LD_ADDR_OWVAR 42
26611: PUSH
26612: LD_INT 0
26614: ST_TO_ADDR
26615: GO 27229
26617: LD_INT 2
26619: DOUBLE
26620: EQUAL
26621: IFTRUE 26625
26623: GO 26636
26625: POP
// bc_type := b_warehouse ; 3 :
26626: LD_ADDR_OWVAR 42
26630: PUSH
26631: LD_INT 1
26633: ST_TO_ADDR
26634: GO 27229
26636: LD_INT 3
26638: DOUBLE
26639: EQUAL
26640: IFTRUE 26644
26642: GO 26655
26644: POP
// bc_type := b_lab ; 4 .. 9 :
26645: LD_ADDR_OWVAR 42
26649: PUSH
26650: LD_INT 6
26652: ST_TO_ADDR
26653: GO 27229
26655: LD_INT 4
26657: DOUBLE
26658: GREATEREQUAL
26659: IFFALSE 26667
26661: LD_INT 9
26663: DOUBLE
26664: LESSEQUAL
26665: IFTRUE 26669
26667: GO 26721
26669: POP
// begin bc_type := b_lab_half ;
26670: LD_ADDR_OWVAR 42
26674: PUSH
26675: LD_INT 7
26677: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
26678: LD_ADDR_OWVAR 44
26682: PUSH
26683: LD_INT 10
26685: PUSH
26686: LD_INT 11
26688: PUSH
26689: LD_INT 12
26691: PUSH
26692: LD_INT 15
26694: PUSH
26695: LD_INT 14
26697: PUSH
26698: LD_INT 13
26700: PUSH
26701: EMPTY
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: LIST
26708: PUSH
26709: LD_VAR 0 2
26713: PUSH
26714: LD_INT 3
26716: MINUS
26717: ARRAY
26718: ST_TO_ADDR
// end ; 10 .. 13 :
26719: GO 27229
26721: LD_INT 10
26723: DOUBLE
26724: GREATEREQUAL
26725: IFFALSE 26733
26727: LD_INT 13
26729: DOUBLE
26730: LESSEQUAL
26731: IFTRUE 26735
26733: GO 26812
26735: POP
// begin bc_type := b_lab_full ;
26736: LD_ADDR_OWVAR 42
26740: PUSH
26741: LD_INT 8
26743: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
26744: LD_ADDR_OWVAR 44
26748: PUSH
26749: LD_INT 10
26751: PUSH
26752: LD_INT 12
26754: PUSH
26755: LD_INT 14
26757: PUSH
26758: LD_INT 13
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: LIST
26765: LIST
26766: PUSH
26767: LD_VAR 0 2
26771: PUSH
26772: LD_INT 9
26774: MINUS
26775: ARRAY
26776: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
26777: LD_ADDR_OWVAR 45
26781: PUSH
26782: LD_INT 11
26784: PUSH
26785: LD_INT 15
26787: PUSH
26788: LD_INT 12
26790: PUSH
26791: LD_INT 15
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: LIST
26798: LIST
26799: PUSH
26800: LD_VAR 0 2
26804: PUSH
26805: LD_INT 9
26807: MINUS
26808: ARRAY
26809: ST_TO_ADDR
// end ; 14 :
26810: GO 27229
26812: LD_INT 14
26814: DOUBLE
26815: EQUAL
26816: IFTRUE 26820
26818: GO 26831
26820: POP
// bc_type := b_workshop ; 15 :
26821: LD_ADDR_OWVAR 42
26825: PUSH
26826: LD_INT 2
26828: ST_TO_ADDR
26829: GO 27229
26831: LD_INT 15
26833: DOUBLE
26834: EQUAL
26835: IFTRUE 26839
26837: GO 26850
26839: POP
// bc_type := b_factory ; 16 :
26840: LD_ADDR_OWVAR 42
26844: PUSH
26845: LD_INT 3
26847: ST_TO_ADDR
26848: GO 27229
26850: LD_INT 16
26852: DOUBLE
26853: EQUAL
26854: IFTRUE 26858
26856: GO 26869
26858: POP
// bc_type := b_ext_gun ; 17 :
26859: LD_ADDR_OWVAR 42
26863: PUSH
26864: LD_INT 17
26866: ST_TO_ADDR
26867: GO 27229
26869: LD_INT 17
26871: DOUBLE
26872: EQUAL
26873: IFTRUE 26877
26875: GO 26905
26877: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
26878: LD_ADDR_OWVAR 42
26882: PUSH
26883: LD_INT 19
26885: PUSH
26886: LD_INT 23
26888: PUSH
26889: LD_INT 19
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: LIST
26896: PUSH
26897: LD_VAR 0 1
26901: ARRAY
26902: ST_TO_ADDR
26903: GO 27229
26905: LD_INT 18
26907: DOUBLE
26908: EQUAL
26909: IFTRUE 26913
26911: GO 26924
26913: POP
// bc_type := b_ext_radar ; 19 :
26914: LD_ADDR_OWVAR 42
26918: PUSH
26919: LD_INT 20
26921: ST_TO_ADDR
26922: GO 27229
26924: LD_INT 19
26926: DOUBLE
26927: EQUAL
26928: IFTRUE 26932
26930: GO 26943
26932: POP
// bc_type := b_ext_radio ; 20 :
26933: LD_ADDR_OWVAR 42
26937: PUSH
26938: LD_INT 22
26940: ST_TO_ADDR
26941: GO 27229
26943: LD_INT 20
26945: DOUBLE
26946: EQUAL
26947: IFTRUE 26951
26949: GO 26962
26951: POP
// bc_type := b_ext_siberium ; 21 :
26952: LD_ADDR_OWVAR 42
26956: PUSH
26957: LD_INT 21
26959: ST_TO_ADDR
26960: GO 27229
26962: LD_INT 21
26964: DOUBLE
26965: EQUAL
26966: IFTRUE 26970
26968: GO 26981
26970: POP
// bc_type := b_ext_computer ; 22 :
26971: LD_ADDR_OWVAR 42
26975: PUSH
26976: LD_INT 24
26978: ST_TO_ADDR
26979: GO 27229
26981: LD_INT 22
26983: DOUBLE
26984: EQUAL
26985: IFTRUE 26989
26987: GO 27000
26989: POP
// bc_type := b_ext_track ; 23 :
26990: LD_ADDR_OWVAR 42
26994: PUSH
26995: LD_INT 16
26997: ST_TO_ADDR
26998: GO 27229
27000: LD_INT 23
27002: DOUBLE
27003: EQUAL
27004: IFTRUE 27008
27006: GO 27019
27008: POP
// bc_type := b_ext_laser ; 24 :
27009: LD_ADDR_OWVAR 42
27013: PUSH
27014: LD_INT 25
27016: ST_TO_ADDR
27017: GO 27229
27019: LD_INT 24
27021: DOUBLE
27022: EQUAL
27023: IFTRUE 27027
27025: GO 27038
27027: POP
// bc_type := b_control_tower ; 25 :
27028: LD_ADDR_OWVAR 42
27032: PUSH
27033: LD_INT 36
27035: ST_TO_ADDR
27036: GO 27229
27038: LD_INT 25
27040: DOUBLE
27041: EQUAL
27042: IFTRUE 27046
27044: GO 27057
27046: POP
// bc_type := b_breastwork ; 26 :
27047: LD_ADDR_OWVAR 42
27051: PUSH
27052: LD_INT 31
27054: ST_TO_ADDR
27055: GO 27229
27057: LD_INT 26
27059: DOUBLE
27060: EQUAL
27061: IFTRUE 27065
27063: GO 27076
27065: POP
// bc_type := b_bunker ; 27 :
27066: LD_ADDR_OWVAR 42
27070: PUSH
27071: LD_INT 32
27073: ST_TO_ADDR
27074: GO 27229
27076: LD_INT 27
27078: DOUBLE
27079: EQUAL
27080: IFTRUE 27084
27082: GO 27095
27084: POP
// bc_type := b_turret ; 28 :
27085: LD_ADDR_OWVAR 42
27089: PUSH
27090: LD_INT 33
27092: ST_TO_ADDR
27093: GO 27229
27095: LD_INT 28
27097: DOUBLE
27098: EQUAL
27099: IFTRUE 27103
27101: GO 27114
27103: POP
// bc_type := b_armoury ; 29 :
27104: LD_ADDR_OWVAR 42
27108: PUSH
27109: LD_INT 4
27111: ST_TO_ADDR
27112: GO 27229
27114: LD_INT 29
27116: DOUBLE
27117: EQUAL
27118: IFTRUE 27122
27120: GO 27133
27122: POP
// bc_type := b_barracks ; 30 :
27123: LD_ADDR_OWVAR 42
27127: PUSH
27128: LD_INT 5
27130: ST_TO_ADDR
27131: GO 27229
27133: LD_INT 30
27135: DOUBLE
27136: EQUAL
27137: IFTRUE 27141
27139: GO 27152
27141: POP
// bc_type := b_solar_power ; 31 :
27142: LD_ADDR_OWVAR 42
27146: PUSH
27147: LD_INT 27
27149: ST_TO_ADDR
27150: GO 27229
27152: LD_INT 31
27154: DOUBLE
27155: EQUAL
27156: IFTRUE 27160
27158: GO 27171
27160: POP
// bc_type := b_oil_power ; 32 :
27161: LD_ADDR_OWVAR 42
27165: PUSH
27166: LD_INT 26
27168: ST_TO_ADDR
27169: GO 27229
27171: LD_INT 32
27173: DOUBLE
27174: EQUAL
27175: IFTRUE 27179
27177: GO 27190
27179: POP
// bc_type := b_siberite_power ; 33 :
27180: LD_ADDR_OWVAR 42
27184: PUSH
27185: LD_INT 28
27187: ST_TO_ADDR
27188: GO 27229
27190: LD_INT 33
27192: DOUBLE
27193: EQUAL
27194: IFTRUE 27198
27196: GO 27209
27198: POP
// bc_type := b_oil_mine ; 34 :
27199: LD_ADDR_OWVAR 42
27203: PUSH
27204: LD_INT 29
27206: ST_TO_ADDR
27207: GO 27229
27209: LD_INT 34
27211: DOUBLE
27212: EQUAL
27213: IFTRUE 27217
27215: GO 27228
27217: POP
// bc_type := b_siberite_mine ; end ;
27218: LD_ADDR_OWVAR 42
27222: PUSH
27223: LD_INT 30
27225: ST_TO_ADDR
27226: GO 27229
27228: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
27229: LD_ADDR_VAR 0 8
27233: PUSH
27234: LD_VAR 0 5
27238: PPUSH
27239: LD_VAR 0 6
27243: PPUSH
27244: LD_VAR 0 3
27248: PPUSH
27249: CALL_OW 47
27253: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
27254: LD_OWVAR 42
27258: PUSH
27259: LD_INT 32
27261: PUSH
27262: LD_INT 33
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: IN
27269: IFFALSE 27285
// PlaceWeaponTurret ( b , weapon ) ;
27271: LD_VAR 0 8
27275: PPUSH
27276: LD_VAR 0 4
27280: PPUSH
27281: CALL_OW 431
// end ;
27285: LD_VAR 0 7
27289: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
27290: LD_INT 0
27292: PPUSH
27293: PPUSH
27294: PPUSH
27295: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27296: LD_ADDR_VAR 0 4
27300: PUSH
27301: LD_INT 22
27303: PUSH
27304: LD_OWVAR 2
27308: PUSH
27309: EMPTY
27310: LIST
27311: LIST
27312: PUSH
27313: LD_INT 2
27315: PUSH
27316: LD_INT 30
27318: PUSH
27319: LD_INT 0
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: PUSH
27326: LD_INT 30
27328: PUSH
27329: LD_INT 1
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: PUSH
27336: EMPTY
27337: LIST
27338: LIST
27339: LIST
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PPUSH
27345: CALL_OW 69
27349: ST_TO_ADDR
// if not tmp then
27350: LD_VAR 0 4
27354: NOT
27355: IFFALSE 27359
// exit ;
27357: GO 27418
// for i in tmp do
27359: LD_ADDR_VAR 0 2
27363: PUSH
27364: LD_VAR 0 4
27368: PUSH
27369: FOR_IN
27370: IFFALSE 27416
// for j = 1 to 3 do
27372: LD_ADDR_VAR 0 3
27376: PUSH
27377: DOUBLE
27378: LD_INT 1
27380: DEC
27381: ST_TO_ADDR
27382: LD_INT 3
27384: PUSH
27385: FOR_TO
27386: IFFALSE 27412
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
27388: LD_VAR 0 2
27392: PPUSH
27393: CALL_OW 274
27397: PPUSH
27398: LD_VAR 0 3
27402: PPUSH
27403: LD_INT 99999
27405: PPUSH
27406: CALL_OW 277
27410: GO 27385
27412: POP
27413: POP
27414: GO 27369
27416: POP
27417: POP
// end ;
27418: LD_VAR 0 1
27422: RET
// export function hHackSetLevel10 ; var i , j ; begin
27423: LD_INT 0
27425: PPUSH
27426: PPUSH
27427: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27428: LD_ADDR_VAR 0 2
27432: PUSH
27433: LD_INT 21
27435: PUSH
27436: LD_INT 1
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: PPUSH
27443: CALL_OW 69
27447: PUSH
27448: FOR_IN
27449: IFFALSE 27501
// if IsSelected ( i ) then
27451: LD_VAR 0 2
27455: PPUSH
27456: CALL_OW 306
27460: IFFALSE 27499
// begin for j := 1 to 4 do
27462: LD_ADDR_VAR 0 3
27466: PUSH
27467: DOUBLE
27468: LD_INT 1
27470: DEC
27471: ST_TO_ADDR
27472: LD_INT 4
27474: PUSH
27475: FOR_TO
27476: IFFALSE 27497
// SetSkill ( i , j , 10 ) ;
27478: LD_VAR 0 2
27482: PPUSH
27483: LD_VAR 0 3
27487: PPUSH
27488: LD_INT 10
27490: PPUSH
27491: CALL_OW 237
27495: GO 27475
27497: POP
27498: POP
// end ;
27499: GO 27448
27501: POP
27502: POP
// end ;
27503: LD_VAR 0 1
27507: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
27508: LD_INT 0
27510: PPUSH
27511: PPUSH
27512: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
27513: LD_ADDR_VAR 0 2
27517: PUSH
27518: LD_INT 22
27520: PUSH
27521: LD_OWVAR 2
27525: PUSH
27526: EMPTY
27527: LIST
27528: LIST
27529: PUSH
27530: LD_INT 21
27532: PUSH
27533: LD_INT 1
27535: PUSH
27536: EMPTY
27537: LIST
27538: LIST
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: PPUSH
27544: CALL_OW 69
27548: PUSH
27549: FOR_IN
27550: IFFALSE 27591
// begin for j := 1 to 4 do
27552: LD_ADDR_VAR 0 3
27556: PUSH
27557: DOUBLE
27558: LD_INT 1
27560: DEC
27561: ST_TO_ADDR
27562: LD_INT 4
27564: PUSH
27565: FOR_TO
27566: IFFALSE 27587
// SetSkill ( i , j , 10 ) ;
27568: LD_VAR 0 2
27572: PPUSH
27573: LD_VAR 0 3
27577: PPUSH
27578: LD_INT 10
27580: PPUSH
27581: CALL_OW 237
27585: GO 27565
27587: POP
27588: POP
// end ;
27589: GO 27549
27591: POP
27592: POP
// end ;
27593: LD_VAR 0 1
27597: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
27598: LD_INT 0
27600: PPUSH
// uc_side := your_side ;
27601: LD_ADDR_OWVAR 20
27605: PUSH
27606: LD_OWVAR 2
27610: ST_TO_ADDR
// uc_nation := nation ;
27611: LD_ADDR_OWVAR 21
27615: PUSH
27616: LD_VAR 0 1
27620: ST_TO_ADDR
// InitHc ;
27621: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
27625: LD_INT 0
27627: PPUSH
27628: LD_VAR 0 2
27632: PPUSH
27633: LD_VAR 0 3
27637: PPUSH
27638: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
27642: LD_VAR 0 4
27646: PPUSH
27647: LD_VAR 0 5
27651: PPUSH
27652: CALL_OW 428
27656: PUSH
27657: LD_INT 0
27659: EQUAL
27660: IFFALSE 27684
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
27662: CALL_OW 44
27666: PPUSH
27667: LD_VAR 0 4
27671: PPUSH
27672: LD_VAR 0 5
27676: PPUSH
27677: LD_INT 1
27679: PPUSH
27680: CALL_OW 48
// end ;
27684: LD_VAR 0 6
27688: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
27689: LD_INT 0
27691: PPUSH
27692: PPUSH
// uc_side := your_side ;
27693: LD_ADDR_OWVAR 20
27697: PUSH
27698: LD_OWVAR 2
27702: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
27703: LD_VAR 0 1
27707: PUSH
27708: LD_INT 1
27710: PUSH
27711: LD_INT 2
27713: PUSH
27714: LD_INT 3
27716: PUSH
27717: LD_INT 4
27719: PUSH
27720: LD_INT 5
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: LIST
27729: IN
27730: IFFALSE 27742
// uc_nation := nation_american else
27732: LD_ADDR_OWVAR 21
27736: PUSH
27737: LD_INT 1
27739: ST_TO_ADDR
27740: GO 27785
// if chassis in [ 11 , 12 , 13 , 14 ] then
27742: LD_VAR 0 1
27746: PUSH
27747: LD_INT 11
27749: PUSH
27750: LD_INT 12
27752: PUSH
27753: LD_INT 13
27755: PUSH
27756: LD_INT 14
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: IN
27765: IFFALSE 27777
// uc_nation := nation_arabian else
27767: LD_ADDR_OWVAR 21
27771: PUSH
27772: LD_INT 2
27774: ST_TO_ADDR
27775: GO 27785
// uc_nation := nation_russian ;
27777: LD_ADDR_OWVAR 21
27781: PUSH
27782: LD_INT 3
27784: ST_TO_ADDR
// vc_chassis := chassis ;
27785: LD_ADDR_OWVAR 37
27789: PUSH
27790: LD_VAR 0 1
27794: ST_TO_ADDR
// vc_engine := engine ;
27795: LD_ADDR_OWVAR 39
27799: PUSH
27800: LD_VAR 0 2
27804: ST_TO_ADDR
// vc_control := control ;
27805: LD_ADDR_OWVAR 38
27809: PUSH
27810: LD_VAR 0 3
27814: ST_TO_ADDR
// vc_weapon := weapon ;
27815: LD_ADDR_OWVAR 40
27819: PUSH
27820: LD_VAR 0 4
27824: ST_TO_ADDR
// un := CreateVehicle ;
27825: LD_ADDR_VAR 0 8
27829: PUSH
27830: CALL_OW 45
27834: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
27835: LD_VAR 0 8
27839: PPUSH
27840: LD_INT 0
27842: PPUSH
27843: LD_INT 5
27845: PPUSH
27846: CALL_OW 12
27850: PPUSH
27851: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
27855: LD_VAR 0 8
27859: PPUSH
27860: LD_VAR 0 5
27864: PPUSH
27865: LD_VAR 0 6
27869: PPUSH
27870: LD_INT 1
27872: PPUSH
27873: CALL_OW 48
// end ;
27877: LD_VAR 0 7
27881: RET
// export hInvincible ; every 1 do
27882: GO 27884
27884: DISABLE
// hInvincible := [ ] ;
27885: LD_ADDR_EXP 111
27889: PUSH
27890: EMPTY
27891: ST_TO_ADDR
27892: END
// every 10 do var i ;
27893: GO 27895
27895: DISABLE
27896: LD_INT 0
27898: PPUSH
// begin enable ;
27899: ENABLE
// if not hInvincible then
27900: LD_EXP 111
27904: NOT
27905: IFFALSE 27909
// exit ;
27907: GO 27953
// for i in hInvincible do
27909: LD_ADDR_VAR 0 1
27913: PUSH
27914: LD_EXP 111
27918: PUSH
27919: FOR_IN
27920: IFFALSE 27951
// if GetLives ( i ) < 1000 then
27922: LD_VAR 0 1
27926: PPUSH
27927: CALL_OW 256
27931: PUSH
27932: LD_INT 1000
27934: LESS
27935: IFFALSE 27949
// SetLives ( i , 1000 ) ;
27937: LD_VAR 0 1
27941: PPUSH
27942: LD_INT 1000
27944: PPUSH
27945: CALL_OW 234
27949: GO 27919
27951: POP
27952: POP
// end ;
27953: PPOPN 1
27955: END
// export function hHackInvincible ; var i ; begin
27956: LD_INT 0
27958: PPUSH
27959: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
27960: LD_ADDR_VAR 0 2
27964: PUSH
27965: LD_INT 2
27967: PUSH
27968: LD_INT 21
27970: PUSH
27971: LD_INT 1
27973: PUSH
27974: EMPTY
27975: LIST
27976: LIST
27977: PUSH
27978: LD_INT 21
27980: PUSH
27981: LD_INT 2
27983: PUSH
27984: EMPTY
27985: LIST
27986: LIST
27987: PUSH
27988: EMPTY
27989: LIST
27990: LIST
27991: LIST
27992: PPUSH
27993: CALL_OW 69
27997: PUSH
27998: FOR_IN
27999: IFFALSE 28060
// if IsSelected ( i ) then
28001: LD_VAR 0 2
28005: PPUSH
28006: CALL_OW 306
28010: IFFALSE 28058
// begin if i in hInvincible then
28012: LD_VAR 0 2
28016: PUSH
28017: LD_EXP 111
28021: IN
28022: IFFALSE 28042
// hInvincible := hInvincible diff i else
28024: LD_ADDR_EXP 111
28028: PUSH
28029: LD_EXP 111
28033: PUSH
28034: LD_VAR 0 2
28038: DIFF
28039: ST_TO_ADDR
28040: GO 28058
// hInvincible := hInvincible union i ;
28042: LD_ADDR_EXP 111
28046: PUSH
28047: LD_EXP 111
28051: PUSH
28052: LD_VAR 0 2
28056: UNION
28057: ST_TO_ADDR
// end ;
28058: GO 27998
28060: POP
28061: POP
// end ;
28062: LD_VAR 0 1
28066: RET
// export function hHackInvisible ; var i , j ; begin
28067: LD_INT 0
28069: PPUSH
28070: PPUSH
28071: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28072: LD_ADDR_VAR 0 2
28076: PUSH
28077: LD_INT 21
28079: PUSH
28080: LD_INT 1
28082: PUSH
28083: EMPTY
28084: LIST
28085: LIST
28086: PPUSH
28087: CALL_OW 69
28091: PUSH
28092: FOR_IN
28093: IFFALSE 28117
// if IsSelected ( i ) then
28095: LD_VAR 0 2
28099: PPUSH
28100: CALL_OW 306
28104: IFFALSE 28115
// ComForceInvisible ( i ) ;
28106: LD_VAR 0 2
28110: PPUSH
28111: CALL_OW 496
28115: GO 28092
28117: POP
28118: POP
// end ;
28119: LD_VAR 0 1
28123: RET
// export function hHackChangeYourSide ; begin
28124: LD_INT 0
28126: PPUSH
// if your_side = 8 then
28127: LD_OWVAR 2
28131: PUSH
28132: LD_INT 8
28134: EQUAL
28135: IFFALSE 28147
// your_side := 0 else
28137: LD_ADDR_OWVAR 2
28141: PUSH
28142: LD_INT 0
28144: ST_TO_ADDR
28145: GO 28161
// your_side := your_side + 1 ;
28147: LD_ADDR_OWVAR 2
28151: PUSH
28152: LD_OWVAR 2
28156: PUSH
28157: LD_INT 1
28159: PLUS
28160: ST_TO_ADDR
// end ;
28161: LD_VAR 0 1
28165: RET
// export function hHackChangeUnitSide ; var i , j ; begin
28166: LD_INT 0
28168: PPUSH
28169: PPUSH
28170: PPUSH
// for i in all_units do
28171: LD_ADDR_VAR 0 2
28175: PUSH
28176: LD_OWVAR 3
28180: PUSH
28181: FOR_IN
28182: IFFALSE 28260
// if IsSelected ( i ) then
28184: LD_VAR 0 2
28188: PPUSH
28189: CALL_OW 306
28193: IFFALSE 28258
// begin j := GetSide ( i ) ;
28195: LD_ADDR_VAR 0 3
28199: PUSH
28200: LD_VAR 0 2
28204: PPUSH
28205: CALL_OW 255
28209: ST_TO_ADDR
// if j = 8 then
28210: LD_VAR 0 3
28214: PUSH
28215: LD_INT 8
28217: EQUAL
28218: IFFALSE 28230
// j := 0 else
28220: LD_ADDR_VAR 0 3
28224: PUSH
28225: LD_INT 0
28227: ST_TO_ADDR
28228: GO 28244
// j := j + 1 ;
28230: LD_ADDR_VAR 0 3
28234: PUSH
28235: LD_VAR 0 3
28239: PUSH
28240: LD_INT 1
28242: PLUS
28243: ST_TO_ADDR
// SetSide ( i , j ) ;
28244: LD_VAR 0 2
28248: PPUSH
28249: LD_VAR 0 3
28253: PPUSH
28254: CALL_OW 235
// end ;
28258: GO 28181
28260: POP
28261: POP
// end ;
28262: LD_VAR 0 1
28266: RET
// export function hHackFog ; begin
28267: LD_INT 0
28269: PPUSH
// FogOff ( true ) ;
28270: LD_INT 1
28272: PPUSH
28273: CALL_OW 344
// end ;
28277: LD_VAR 0 1
28281: RET
// export function hHackTeleport ( unit , x , y ) ; begin
28282: LD_INT 0
28284: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
28285: LD_VAR 0 1
28289: PPUSH
28290: LD_VAR 0 2
28294: PPUSH
28295: LD_VAR 0 3
28299: PPUSH
28300: LD_INT 1
28302: PPUSH
28303: LD_INT 1
28305: PPUSH
28306: CALL_OW 483
// CenterOnXY ( x , y ) ;
28310: LD_VAR 0 2
28314: PPUSH
28315: LD_VAR 0 3
28319: PPUSH
28320: CALL_OW 84
// end ; end_of_file
28324: LD_VAR 0 4
28328: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
28329: LD_INT 0
28331: PPUSH
28332: PPUSH
28333: PPUSH
28334: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
28335: LD_VAR 0 1
28339: PPUSH
28340: CALL_OW 264
28344: PUSH
28345: LD_EXP 42
28349: EQUAL
28350: IFFALSE 28422
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
28352: LD_INT 68
28354: PPUSH
28355: LD_VAR 0 1
28359: PPUSH
28360: CALL_OW 255
28364: PPUSH
28365: CALL_OW 321
28369: PUSH
28370: LD_INT 2
28372: EQUAL
28373: IFFALSE 28385
// eff := 70 else
28375: LD_ADDR_VAR 0 4
28379: PUSH
28380: LD_INT 70
28382: ST_TO_ADDR
28383: GO 28393
// eff := 30 ;
28385: LD_ADDR_VAR 0 4
28389: PUSH
28390: LD_INT 30
28392: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
28393: LD_VAR 0 1
28397: PPUSH
28398: CALL_OW 250
28402: PPUSH
28403: LD_VAR 0 1
28407: PPUSH
28408: CALL_OW 251
28412: PPUSH
28413: LD_VAR 0 4
28417: PPUSH
28418: CALL_OW 495
// end ; end ;
28422: LD_VAR 0 2
28426: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
28427: LD_INT 0
28429: PPUSH
// end ;
28430: LD_VAR 0 4
28434: RET
// export function SOS_Command ( cmd ) ; begin
28435: LD_INT 0
28437: PPUSH
// end ;
28438: LD_VAR 0 2
28442: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
28443: LD_INT 0
28445: PPUSH
// if cmd = 121 then
28446: LD_VAR 0 1
28450: PUSH
28451: LD_INT 121
28453: EQUAL
28454: IFFALSE 28456
// end ;
28456: LD_VAR 0 6
28460: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
28461: LD_INT 0
28463: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
28464: LD_VAR 0 1
28468: PUSH
28469: LD_INT 250
28471: EQUAL
28472: PUSH
28473: LD_VAR 0 2
28477: PPUSH
28478: CALL_OW 264
28482: PUSH
28483: LD_EXP 45
28487: EQUAL
28488: AND
28489: IFFALSE 28510
// MinerPlaceMine ( unit , x , y ) ;
28491: LD_VAR 0 2
28495: PPUSH
28496: LD_VAR 0 4
28500: PPUSH
28501: LD_VAR 0 5
28505: PPUSH
28506: CALL 30859 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
28510: LD_VAR 0 1
28514: PUSH
28515: LD_INT 251
28517: EQUAL
28518: PUSH
28519: LD_VAR 0 2
28523: PPUSH
28524: CALL_OW 264
28528: PUSH
28529: LD_EXP 45
28533: EQUAL
28534: AND
28535: IFFALSE 28556
// MinerDetonateMine ( unit , x , y ) ;
28537: LD_VAR 0 2
28541: PPUSH
28542: LD_VAR 0 4
28546: PPUSH
28547: LD_VAR 0 5
28551: PPUSH
28552: CALL 31136 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
28556: LD_VAR 0 1
28560: PUSH
28561: LD_INT 252
28563: EQUAL
28564: PUSH
28565: LD_VAR 0 2
28569: PPUSH
28570: CALL_OW 264
28574: PUSH
28575: LD_EXP 45
28579: EQUAL
28580: AND
28581: IFFALSE 28602
// MinerCreateMinefield ( unit , x , y ) ;
28583: LD_VAR 0 2
28587: PPUSH
28588: LD_VAR 0 4
28592: PPUSH
28593: LD_VAR 0 5
28597: PPUSH
28598: CALL 31553 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
28602: LD_VAR 0 1
28606: PUSH
28607: LD_INT 253
28609: EQUAL
28610: PUSH
28611: LD_VAR 0 2
28615: PPUSH
28616: CALL_OW 257
28620: PUSH
28621: LD_INT 5
28623: EQUAL
28624: AND
28625: IFFALSE 28646
// ComBinocular ( unit , x , y ) ;
28627: LD_VAR 0 2
28631: PPUSH
28632: LD_VAR 0 4
28636: PPUSH
28637: LD_VAR 0 5
28641: PPUSH
28642: CALL 31924 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
28646: LD_VAR 0 1
28650: PUSH
28651: LD_INT 254
28653: EQUAL
28654: PUSH
28655: LD_VAR 0 2
28659: PPUSH
28660: CALL_OW 264
28664: PUSH
28665: LD_EXP 40
28669: EQUAL
28670: AND
28671: PUSH
28672: LD_VAR 0 3
28676: PPUSH
28677: CALL_OW 263
28681: PUSH
28682: LD_INT 3
28684: EQUAL
28685: AND
28686: IFFALSE 28702
// HackDestroyVehicle ( unit , selectedUnit ) ;
28688: LD_VAR 0 2
28692: PPUSH
28693: LD_VAR 0 3
28697: PPUSH
28698: CALL 30219 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
28702: LD_VAR 0 1
28706: PUSH
28707: LD_INT 255
28709: EQUAL
28710: PUSH
28711: LD_VAR 0 2
28715: PPUSH
28716: CALL_OW 264
28720: PUSH
28721: LD_INT 14
28723: PUSH
28724: LD_INT 53
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: IN
28731: AND
28732: PUSH
28733: LD_VAR 0 4
28737: PPUSH
28738: LD_VAR 0 5
28742: PPUSH
28743: CALL_OW 488
28747: AND
28748: IFFALSE 28772
// CutTreeXYR ( unit , x , y , 12 ) ;
28750: LD_VAR 0 2
28754: PPUSH
28755: LD_VAR 0 4
28759: PPUSH
28760: LD_VAR 0 5
28764: PPUSH
28765: LD_INT 12
28767: PPUSH
28768: CALL 28785 0 4
// end ;
28772: LD_VAR 0 6
28776: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
28777: LD_INT 0
28779: PPUSH
// end ;
28780: LD_VAR 0 4
28784: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
28785: LD_INT 0
28787: PPUSH
28788: PPUSH
28789: PPUSH
28790: PPUSH
28791: PPUSH
28792: PPUSH
28793: PPUSH
28794: PPUSH
28795: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
28796: LD_VAR 0 1
28800: NOT
28801: PUSH
28802: LD_VAR 0 2
28806: PPUSH
28807: LD_VAR 0 3
28811: PPUSH
28812: CALL_OW 488
28816: NOT
28817: OR
28818: PUSH
28819: LD_VAR 0 4
28823: NOT
28824: OR
28825: IFFALSE 28829
// exit ;
28827: GO 29169
// list := [ ] ;
28829: LD_ADDR_VAR 0 13
28833: PUSH
28834: EMPTY
28835: ST_TO_ADDR
// if x - r < 0 then
28836: LD_VAR 0 2
28840: PUSH
28841: LD_VAR 0 4
28845: MINUS
28846: PUSH
28847: LD_INT 0
28849: LESS
28850: IFFALSE 28862
// min_x := 0 else
28852: LD_ADDR_VAR 0 7
28856: PUSH
28857: LD_INT 0
28859: ST_TO_ADDR
28860: GO 28878
// min_x := x - r ;
28862: LD_ADDR_VAR 0 7
28866: PUSH
28867: LD_VAR 0 2
28871: PUSH
28872: LD_VAR 0 4
28876: MINUS
28877: ST_TO_ADDR
// if y - r < 0 then
28878: LD_VAR 0 3
28882: PUSH
28883: LD_VAR 0 4
28887: MINUS
28888: PUSH
28889: LD_INT 0
28891: LESS
28892: IFFALSE 28904
// min_y := 0 else
28894: LD_ADDR_VAR 0 8
28898: PUSH
28899: LD_INT 0
28901: ST_TO_ADDR
28902: GO 28920
// min_y := y - r ;
28904: LD_ADDR_VAR 0 8
28908: PUSH
28909: LD_VAR 0 3
28913: PUSH
28914: LD_VAR 0 4
28918: MINUS
28919: ST_TO_ADDR
// max_x := x + r ;
28920: LD_ADDR_VAR 0 9
28924: PUSH
28925: LD_VAR 0 2
28929: PUSH
28930: LD_VAR 0 4
28934: PLUS
28935: ST_TO_ADDR
// max_y := y + r ;
28936: LD_ADDR_VAR 0 10
28940: PUSH
28941: LD_VAR 0 3
28945: PUSH
28946: LD_VAR 0 4
28950: PLUS
28951: ST_TO_ADDR
// for _x = min_x to max_x do
28952: LD_ADDR_VAR 0 11
28956: PUSH
28957: DOUBLE
28958: LD_VAR 0 7
28962: DEC
28963: ST_TO_ADDR
28964: LD_VAR 0 9
28968: PUSH
28969: FOR_TO
28970: IFFALSE 29087
// for _y = min_y to max_y do
28972: LD_ADDR_VAR 0 12
28976: PUSH
28977: DOUBLE
28978: LD_VAR 0 8
28982: DEC
28983: ST_TO_ADDR
28984: LD_VAR 0 10
28988: PUSH
28989: FOR_TO
28990: IFFALSE 29083
// begin if not ValidHex ( _x , _y ) then
28992: LD_VAR 0 11
28996: PPUSH
28997: LD_VAR 0 12
29001: PPUSH
29002: CALL_OW 488
29006: NOT
29007: IFFALSE 29011
// continue ;
29009: GO 28989
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29011: LD_VAR 0 11
29015: PPUSH
29016: LD_VAR 0 12
29020: PPUSH
29021: CALL_OW 351
29025: PUSH
29026: LD_VAR 0 11
29030: PPUSH
29031: LD_VAR 0 12
29035: PPUSH
29036: CALL_OW 554
29040: AND
29041: IFFALSE 29081
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29043: LD_ADDR_VAR 0 13
29047: PUSH
29048: LD_VAR 0 13
29052: PPUSH
29053: LD_VAR 0 13
29057: PUSH
29058: LD_INT 1
29060: PLUS
29061: PPUSH
29062: LD_VAR 0 11
29066: PUSH
29067: LD_VAR 0 12
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: PPUSH
29076: CALL_OW 2
29080: ST_TO_ADDR
// end ;
29081: GO 28989
29083: POP
29084: POP
29085: GO 28969
29087: POP
29088: POP
// if not list then
29089: LD_VAR 0 13
29093: NOT
29094: IFFALSE 29098
// exit ;
29096: GO 29169
// for i in list do
29098: LD_ADDR_VAR 0 6
29102: PUSH
29103: LD_VAR 0 13
29107: PUSH
29108: FOR_IN
29109: IFFALSE 29167
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
29111: LD_VAR 0 1
29115: PPUSH
29116: LD_STRING M
29118: PUSH
29119: LD_VAR 0 6
29123: PUSH
29124: LD_INT 1
29126: ARRAY
29127: PUSH
29128: LD_VAR 0 6
29132: PUSH
29133: LD_INT 2
29135: ARRAY
29136: PUSH
29137: LD_INT 0
29139: PUSH
29140: LD_INT 0
29142: PUSH
29143: LD_INT 0
29145: PUSH
29146: LD_INT 0
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: LIST
29153: LIST
29154: LIST
29155: LIST
29156: LIST
29157: PUSH
29158: EMPTY
29159: LIST
29160: PPUSH
29161: CALL_OW 447
29165: GO 29108
29167: POP
29168: POP
// end ;
29169: LD_VAR 0 5
29173: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
29174: LD_EXP 114
29178: NOT
29179: IFFALSE 29229
29181: GO 29183
29183: DISABLE
// begin initHack := true ;
29184: LD_ADDR_EXP 114
29188: PUSH
29189: LD_INT 1
29191: ST_TO_ADDR
// hackTanks := [ ] ;
29192: LD_ADDR_EXP 115
29196: PUSH
29197: EMPTY
29198: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
29199: LD_ADDR_EXP 116
29203: PUSH
29204: EMPTY
29205: ST_TO_ADDR
// hackLimit := 3 ;
29206: LD_ADDR_EXP 117
29210: PUSH
29211: LD_INT 3
29213: ST_TO_ADDR
// hackDist := 12 ;
29214: LD_ADDR_EXP 118
29218: PUSH
29219: LD_INT 12
29221: ST_TO_ADDR
// hackCounter := [ ] ;
29222: LD_ADDR_EXP 119
29226: PUSH
29227: EMPTY
29228: ST_TO_ADDR
// end ;
29229: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29230: LD_EXP 114
29234: PUSH
29235: LD_INT 34
29237: PUSH
29238: LD_EXP 40
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: PPUSH
29247: CALL_OW 69
29251: AND
29252: IFFALSE 29507
29254: GO 29256
29256: DISABLE
29257: LD_INT 0
29259: PPUSH
29260: PPUSH
// begin enable ;
29261: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29262: LD_ADDR_VAR 0 1
29266: PUSH
29267: LD_INT 34
29269: PUSH
29270: LD_EXP 40
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: PPUSH
29279: CALL_OW 69
29283: PUSH
29284: FOR_IN
29285: IFFALSE 29505
// begin if not i in hackTanks then
29287: LD_VAR 0 1
29291: PUSH
29292: LD_EXP 115
29296: IN
29297: NOT
29298: IFFALSE 29381
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29300: LD_ADDR_EXP 115
29304: PUSH
29305: LD_EXP 115
29309: PPUSH
29310: LD_EXP 115
29314: PUSH
29315: LD_INT 1
29317: PLUS
29318: PPUSH
29319: LD_VAR 0 1
29323: PPUSH
29324: CALL_OW 1
29328: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
29329: LD_ADDR_EXP 116
29333: PUSH
29334: LD_EXP 116
29338: PPUSH
29339: LD_EXP 116
29343: PUSH
29344: LD_INT 1
29346: PLUS
29347: PPUSH
29348: EMPTY
29349: PPUSH
29350: CALL_OW 1
29354: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
29355: LD_ADDR_EXP 119
29359: PUSH
29360: LD_EXP 119
29364: PPUSH
29365: LD_EXP 119
29369: PUSH
29370: LD_INT 1
29372: PLUS
29373: PPUSH
29374: EMPTY
29375: PPUSH
29376: CALL_OW 1
29380: ST_TO_ADDR
// end ; if not IsOk ( i ) then
29381: LD_VAR 0 1
29385: PPUSH
29386: CALL_OW 302
29390: NOT
29391: IFFALSE 29404
// begin HackUnlinkAll ( i ) ;
29393: LD_VAR 0 1
29397: PPUSH
29398: CALL 29510 0 1
// continue ;
29402: GO 29284
// end ; HackCheckCapturedStatus ( i ) ;
29404: LD_VAR 0 1
29408: PPUSH
29409: CALL 29953 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
29413: LD_ADDR_VAR 0 2
29417: PUSH
29418: LD_INT 81
29420: PUSH
29421: LD_VAR 0 1
29425: PPUSH
29426: CALL_OW 255
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: PUSH
29435: LD_INT 33
29437: PUSH
29438: LD_INT 3
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: PUSH
29445: LD_INT 91
29447: PUSH
29448: LD_VAR 0 1
29452: PUSH
29453: LD_EXP 118
29457: PUSH
29458: EMPTY
29459: LIST
29460: LIST
29461: LIST
29462: PUSH
29463: LD_INT 50
29465: PUSH
29466: EMPTY
29467: LIST
29468: PUSH
29469: EMPTY
29470: LIST
29471: LIST
29472: LIST
29473: LIST
29474: PPUSH
29475: CALL_OW 69
29479: ST_TO_ADDR
// if not tmp then
29480: LD_VAR 0 2
29484: NOT
29485: IFFALSE 29489
// continue ;
29487: GO 29284
// HackLink ( i , tmp ) ;
29489: LD_VAR 0 1
29493: PPUSH
29494: LD_VAR 0 2
29498: PPUSH
29499: CALL 29646 0 2
// end ;
29503: GO 29284
29505: POP
29506: POP
// end ;
29507: PPOPN 2
29509: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
29510: LD_INT 0
29512: PPUSH
29513: PPUSH
29514: PPUSH
// if not hack in hackTanks then
29515: LD_VAR 0 1
29519: PUSH
29520: LD_EXP 115
29524: IN
29525: NOT
29526: IFFALSE 29530
// exit ;
29528: GO 29641
// index := GetElementIndex ( hackTanks , hack ) ;
29530: LD_ADDR_VAR 0 4
29534: PUSH
29535: LD_EXP 115
29539: PPUSH
29540: LD_VAR 0 1
29544: PPUSH
29545: CALL 37115 0 2
29549: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
29550: LD_EXP 116
29554: PUSH
29555: LD_VAR 0 4
29559: ARRAY
29560: IFFALSE 29641
// begin for i in hackTanksCaptured [ index ] do
29562: LD_ADDR_VAR 0 3
29566: PUSH
29567: LD_EXP 116
29571: PUSH
29572: LD_VAR 0 4
29576: ARRAY
29577: PUSH
29578: FOR_IN
29579: IFFALSE 29605
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
29581: LD_VAR 0 3
29585: PUSH
29586: LD_INT 1
29588: ARRAY
29589: PPUSH
29590: LD_VAR 0 3
29594: PUSH
29595: LD_INT 2
29597: ARRAY
29598: PPUSH
29599: CALL_OW 235
29603: GO 29578
29605: POP
29606: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
29607: LD_ADDR_EXP 116
29611: PUSH
29612: LD_EXP 116
29616: PPUSH
29617: LD_VAR 0 4
29621: PPUSH
29622: EMPTY
29623: PPUSH
29624: CALL_OW 1
29628: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
29629: LD_VAR 0 1
29633: PPUSH
29634: LD_INT 0
29636: PPUSH
29637: CALL_OW 505
// end ; end ;
29641: LD_VAR 0 2
29645: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
29646: LD_INT 0
29648: PPUSH
29649: PPUSH
29650: PPUSH
// if not hack in hackTanks or not vehicles then
29651: LD_VAR 0 1
29655: PUSH
29656: LD_EXP 115
29660: IN
29661: NOT
29662: PUSH
29663: LD_VAR 0 2
29667: NOT
29668: OR
29669: IFFALSE 29673
// exit ;
29671: GO 29948
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
29673: LD_ADDR_VAR 0 2
29677: PUSH
29678: LD_VAR 0 1
29682: PPUSH
29683: LD_VAR 0 2
29687: PPUSH
29688: LD_INT 1
29690: PPUSH
29691: LD_INT 1
29693: PPUSH
29694: CALL 37765 0 4
29698: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
29699: LD_ADDR_VAR 0 5
29703: PUSH
29704: LD_EXP 115
29708: PPUSH
29709: LD_VAR 0 1
29713: PPUSH
29714: CALL 37115 0 2
29718: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
29719: LD_EXP 116
29723: PUSH
29724: LD_VAR 0 5
29728: ARRAY
29729: PUSH
29730: LD_EXP 117
29734: LESS
29735: IFFALSE 29924
// begin for i := 1 to vehicles do
29737: LD_ADDR_VAR 0 4
29741: PUSH
29742: DOUBLE
29743: LD_INT 1
29745: DEC
29746: ST_TO_ADDR
29747: LD_VAR 0 2
29751: PUSH
29752: FOR_TO
29753: IFFALSE 29922
// begin if hackTanksCaptured [ index ] = hackLimit then
29755: LD_EXP 116
29759: PUSH
29760: LD_VAR 0 5
29764: ARRAY
29765: PUSH
29766: LD_EXP 117
29770: EQUAL
29771: IFFALSE 29775
// break ;
29773: GO 29922
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
29775: LD_ADDR_EXP 119
29779: PUSH
29780: LD_EXP 119
29784: PPUSH
29785: LD_VAR 0 5
29789: PPUSH
29790: LD_EXP 119
29794: PUSH
29795: LD_VAR 0 5
29799: ARRAY
29800: PUSH
29801: LD_INT 1
29803: PLUS
29804: PPUSH
29805: CALL_OW 1
29809: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
29810: LD_ADDR_EXP 116
29814: PUSH
29815: LD_EXP 116
29819: PPUSH
29820: LD_VAR 0 5
29824: PUSH
29825: LD_EXP 116
29829: PUSH
29830: LD_VAR 0 5
29834: ARRAY
29835: PUSH
29836: LD_INT 1
29838: PLUS
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: PPUSH
29844: LD_VAR 0 2
29848: PUSH
29849: LD_VAR 0 4
29853: ARRAY
29854: PUSH
29855: LD_VAR 0 2
29859: PUSH
29860: LD_VAR 0 4
29864: ARRAY
29865: PPUSH
29866: CALL_OW 255
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: PPUSH
29875: CALL 37330 0 3
29879: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
29880: LD_VAR 0 2
29884: PUSH
29885: LD_VAR 0 4
29889: ARRAY
29890: PPUSH
29891: LD_VAR 0 1
29895: PPUSH
29896: CALL_OW 255
29900: PPUSH
29901: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
29905: LD_VAR 0 2
29909: PUSH
29910: LD_VAR 0 4
29914: ARRAY
29915: PPUSH
29916: CALL_OW 141
// end ;
29920: GO 29752
29922: POP
29923: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29924: LD_VAR 0 1
29928: PPUSH
29929: LD_EXP 116
29933: PUSH
29934: LD_VAR 0 5
29938: ARRAY
29939: PUSH
29940: LD_INT 0
29942: PLUS
29943: PPUSH
29944: CALL_OW 505
// end ;
29948: LD_VAR 0 3
29952: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
29953: LD_INT 0
29955: PPUSH
29956: PPUSH
29957: PPUSH
29958: PPUSH
// if not hack in hackTanks then
29959: LD_VAR 0 1
29963: PUSH
29964: LD_EXP 115
29968: IN
29969: NOT
29970: IFFALSE 29974
// exit ;
29972: GO 30214
// index := GetElementIndex ( hackTanks , hack ) ;
29974: LD_ADDR_VAR 0 4
29978: PUSH
29979: LD_EXP 115
29983: PPUSH
29984: LD_VAR 0 1
29988: PPUSH
29989: CALL 37115 0 2
29993: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
29994: LD_ADDR_VAR 0 3
29998: PUSH
29999: DOUBLE
30000: LD_EXP 116
30004: PUSH
30005: LD_VAR 0 4
30009: ARRAY
30010: INC
30011: ST_TO_ADDR
30012: LD_INT 1
30014: PUSH
30015: FOR_DOWNTO
30016: IFFALSE 30188
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
30018: LD_ADDR_VAR 0 5
30022: PUSH
30023: LD_EXP 116
30027: PUSH
30028: LD_VAR 0 4
30032: ARRAY
30033: PUSH
30034: LD_VAR 0 3
30038: ARRAY
30039: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
30040: LD_VAR 0 5
30044: PUSH
30045: LD_INT 1
30047: ARRAY
30048: PPUSH
30049: CALL_OW 302
30053: NOT
30054: PUSH
30055: LD_VAR 0 5
30059: PUSH
30060: LD_INT 1
30062: ARRAY
30063: PPUSH
30064: CALL_OW 255
30068: PUSH
30069: LD_VAR 0 1
30073: PPUSH
30074: CALL_OW 255
30078: NONEQUAL
30079: OR
30080: IFFALSE 30186
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
30082: LD_VAR 0 5
30086: PUSH
30087: LD_INT 1
30089: ARRAY
30090: PPUSH
30091: CALL_OW 305
30095: PUSH
30096: LD_VAR 0 5
30100: PUSH
30101: LD_INT 1
30103: ARRAY
30104: PPUSH
30105: CALL_OW 255
30109: PUSH
30110: LD_VAR 0 1
30114: PPUSH
30115: CALL_OW 255
30119: EQUAL
30120: AND
30121: IFFALSE 30145
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
30123: LD_VAR 0 5
30127: PUSH
30128: LD_INT 1
30130: ARRAY
30131: PPUSH
30132: LD_VAR 0 5
30136: PUSH
30137: LD_INT 2
30139: ARRAY
30140: PPUSH
30141: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
30145: LD_ADDR_EXP 116
30149: PUSH
30150: LD_EXP 116
30154: PPUSH
30155: LD_VAR 0 4
30159: PPUSH
30160: LD_EXP 116
30164: PUSH
30165: LD_VAR 0 4
30169: ARRAY
30170: PPUSH
30171: LD_VAR 0 3
30175: PPUSH
30176: CALL_OW 3
30180: PPUSH
30181: CALL_OW 1
30185: ST_TO_ADDR
// end ; end ;
30186: GO 30015
30188: POP
30189: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30190: LD_VAR 0 1
30194: PPUSH
30195: LD_EXP 116
30199: PUSH
30200: LD_VAR 0 4
30204: ARRAY
30205: PUSH
30206: LD_INT 0
30208: PLUS
30209: PPUSH
30210: CALL_OW 505
// end ;
30214: LD_VAR 0 2
30218: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
30219: LD_INT 0
30221: PPUSH
30222: PPUSH
30223: PPUSH
30224: PPUSH
// if not hack in hackTanks then
30225: LD_VAR 0 1
30229: PUSH
30230: LD_EXP 115
30234: IN
30235: NOT
30236: IFFALSE 30240
// exit ;
30238: GO 30325
// index := GetElementIndex ( hackTanks , hack ) ;
30240: LD_ADDR_VAR 0 5
30244: PUSH
30245: LD_EXP 115
30249: PPUSH
30250: LD_VAR 0 1
30254: PPUSH
30255: CALL 37115 0 2
30259: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30260: LD_ADDR_VAR 0 4
30264: PUSH
30265: DOUBLE
30266: LD_INT 1
30268: DEC
30269: ST_TO_ADDR
30270: LD_EXP 116
30274: PUSH
30275: LD_VAR 0 5
30279: ARRAY
30280: PUSH
30281: FOR_TO
30282: IFFALSE 30323
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30284: LD_EXP 116
30288: PUSH
30289: LD_VAR 0 5
30293: ARRAY
30294: PUSH
30295: LD_VAR 0 4
30299: ARRAY
30300: PUSH
30301: LD_INT 1
30303: ARRAY
30304: PUSH
30305: LD_VAR 0 2
30309: EQUAL
30310: IFFALSE 30321
// KillUnit ( vehicle ) ;
30312: LD_VAR 0 2
30316: PPUSH
30317: CALL_OW 66
30321: GO 30281
30323: POP
30324: POP
// end ;
30325: LD_VAR 0 3
30329: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
30330: LD_EXP 120
30334: NOT
30335: IFFALSE 30370
30337: GO 30339
30339: DISABLE
// begin initMiner := true ;
30340: LD_ADDR_EXP 120
30344: PUSH
30345: LD_INT 1
30347: ST_TO_ADDR
// minersList := [ ] ;
30348: LD_ADDR_EXP 121
30352: PUSH
30353: EMPTY
30354: ST_TO_ADDR
// minerMinesList := [ ] ;
30355: LD_ADDR_EXP 122
30359: PUSH
30360: EMPTY
30361: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
30362: LD_ADDR_EXP 123
30366: PUSH
30367: LD_INT 5
30369: ST_TO_ADDR
// end ;
30370: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
30371: LD_EXP 120
30375: PUSH
30376: LD_INT 34
30378: PUSH
30379: LD_EXP 45
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: PPUSH
30388: CALL_OW 69
30392: AND
30393: IFFALSE 30856
30395: GO 30397
30397: DISABLE
30398: LD_INT 0
30400: PPUSH
30401: PPUSH
30402: PPUSH
30403: PPUSH
// begin enable ;
30404: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
30405: LD_ADDR_VAR 0 1
30409: PUSH
30410: LD_INT 34
30412: PUSH
30413: LD_EXP 45
30417: PUSH
30418: EMPTY
30419: LIST
30420: LIST
30421: PPUSH
30422: CALL_OW 69
30426: PUSH
30427: FOR_IN
30428: IFFALSE 30500
// begin if not i in minersList then
30430: LD_VAR 0 1
30434: PUSH
30435: LD_EXP 121
30439: IN
30440: NOT
30441: IFFALSE 30498
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
30443: LD_ADDR_EXP 121
30447: PUSH
30448: LD_EXP 121
30452: PPUSH
30453: LD_EXP 121
30457: PUSH
30458: LD_INT 1
30460: PLUS
30461: PPUSH
30462: LD_VAR 0 1
30466: PPUSH
30467: CALL_OW 1
30471: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
30472: LD_ADDR_EXP 122
30476: PUSH
30477: LD_EXP 122
30481: PPUSH
30482: LD_EXP 122
30486: PUSH
30487: LD_INT 1
30489: PLUS
30490: PPUSH
30491: EMPTY
30492: PPUSH
30493: CALL_OW 1
30497: ST_TO_ADDR
// end end ;
30498: GO 30427
30500: POP
30501: POP
// for i := minerMinesList downto 1 do
30502: LD_ADDR_VAR 0 1
30506: PUSH
30507: DOUBLE
30508: LD_EXP 122
30512: INC
30513: ST_TO_ADDR
30514: LD_INT 1
30516: PUSH
30517: FOR_DOWNTO
30518: IFFALSE 30854
// begin if IsLive ( minersList [ i ] ) then
30520: LD_EXP 121
30524: PUSH
30525: LD_VAR 0 1
30529: ARRAY
30530: PPUSH
30531: CALL_OW 300
30535: IFFALSE 30563
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
30537: LD_EXP 121
30541: PUSH
30542: LD_VAR 0 1
30546: ARRAY
30547: PPUSH
30548: LD_EXP 122
30552: PUSH
30553: LD_VAR 0 1
30557: ARRAY
30558: PPUSH
30559: CALL_OW 505
// if not minerMinesList [ i ] then
30563: LD_EXP 122
30567: PUSH
30568: LD_VAR 0 1
30572: ARRAY
30573: NOT
30574: IFFALSE 30578
// continue ;
30576: GO 30517
// for j := minerMinesList [ i ] downto 1 do
30578: LD_ADDR_VAR 0 2
30582: PUSH
30583: DOUBLE
30584: LD_EXP 122
30588: PUSH
30589: LD_VAR 0 1
30593: ARRAY
30594: INC
30595: ST_TO_ADDR
30596: LD_INT 1
30598: PUSH
30599: FOR_DOWNTO
30600: IFFALSE 30850
// begin side := GetSide ( minersList [ i ] ) ;
30602: LD_ADDR_VAR 0 3
30606: PUSH
30607: LD_EXP 121
30611: PUSH
30612: LD_VAR 0 1
30616: ARRAY
30617: PPUSH
30618: CALL_OW 255
30622: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
30623: LD_ADDR_VAR 0 4
30627: PUSH
30628: LD_EXP 122
30632: PUSH
30633: LD_VAR 0 1
30637: ARRAY
30638: PUSH
30639: LD_VAR 0 2
30643: ARRAY
30644: PUSH
30645: LD_INT 1
30647: ARRAY
30648: PPUSH
30649: LD_EXP 122
30653: PUSH
30654: LD_VAR 0 1
30658: ARRAY
30659: PUSH
30660: LD_VAR 0 2
30664: ARRAY
30665: PUSH
30666: LD_INT 2
30668: ARRAY
30669: PPUSH
30670: CALL_OW 428
30674: ST_TO_ADDR
// if not tmp then
30675: LD_VAR 0 4
30679: NOT
30680: IFFALSE 30684
// continue ;
30682: GO 30599
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
30684: LD_VAR 0 4
30688: PUSH
30689: LD_INT 81
30691: PUSH
30692: LD_VAR 0 3
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: PPUSH
30701: CALL_OW 69
30705: IN
30706: PUSH
30707: LD_EXP 122
30711: PUSH
30712: LD_VAR 0 1
30716: ARRAY
30717: PUSH
30718: LD_VAR 0 2
30722: ARRAY
30723: PUSH
30724: LD_INT 1
30726: ARRAY
30727: PPUSH
30728: LD_EXP 122
30732: PUSH
30733: LD_VAR 0 1
30737: ARRAY
30738: PUSH
30739: LD_VAR 0 2
30743: ARRAY
30744: PUSH
30745: LD_INT 2
30747: ARRAY
30748: PPUSH
30749: CALL_OW 458
30753: AND
30754: IFFALSE 30848
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
30756: LD_EXP 122
30760: PUSH
30761: LD_VAR 0 1
30765: ARRAY
30766: PUSH
30767: LD_VAR 0 2
30771: ARRAY
30772: PUSH
30773: LD_INT 1
30775: ARRAY
30776: PPUSH
30777: LD_EXP 122
30781: PUSH
30782: LD_VAR 0 1
30786: ARRAY
30787: PUSH
30788: LD_VAR 0 2
30792: ARRAY
30793: PUSH
30794: LD_INT 2
30796: ARRAY
30797: PPUSH
30798: LD_VAR 0 3
30802: PPUSH
30803: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
30807: LD_ADDR_EXP 122
30811: PUSH
30812: LD_EXP 122
30816: PPUSH
30817: LD_VAR 0 1
30821: PPUSH
30822: LD_EXP 122
30826: PUSH
30827: LD_VAR 0 1
30831: ARRAY
30832: PPUSH
30833: LD_VAR 0 2
30837: PPUSH
30838: CALL_OW 3
30842: PPUSH
30843: CALL_OW 1
30847: ST_TO_ADDR
// end ; end ;
30848: GO 30599
30850: POP
30851: POP
// end ;
30852: GO 30517
30854: POP
30855: POP
// end ;
30856: PPOPN 4
30858: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
30859: LD_INT 0
30861: PPUSH
30862: PPUSH
// result := false ;
30863: LD_ADDR_VAR 0 4
30867: PUSH
30868: LD_INT 0
30870: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
30871: LD_VAR 0 1
30875: PPUSH
30876: CALL_OW 264
30880: PUSH
30881: LD_EXP 45
30885: EQUAL
30886: NOT
30887: IFFALSE 30891
// exit ;
30889: GO 31131
// index := GetElementIndex ( minersList , unit ) ;
30891: LD_ADDR_VAR 0 5
30895: PUSH
30896: LD_EXP 121
30900: PPUSH
30901: LD_VAR 0 1
30905: PPUSH
30906: CALL 37115 0 2
30910: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
30911: LD_EXP 122
30915: PUSH
30916: LD_VAR 0 5
30920: ARRAY
30921: PUSH
30922: LD_EXP 123
30926: GREATEREQUAL
30927: IFFALSE 30931
// exit ;
30929: GO 31131
// ComMoveXY ( unit , x , y ) ;
30931: LD_VAR 0 1
30935: PPUSH
30936: LD_VAR 0 2
30940: PPUSH
30941: LD_VAR 0 3
30945: PPUSH
30946: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30950: LD_INT 35
30952: PPUSH
30953: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
30957: LD_VAR 0 1
30961: PPUSH
30962: LD_VAR 0 2
30966: PPUSH
30967: LD_VAR 0 3
30971: PPUSH
30972: CALL 67887 0 3
30976: NOT
30977: PUSH
30978: LD_VAR 0 1
30982: PPUSH
30983: CALL_OW 314
30987: AND
30988: IFFALSE 30992
// exit ;
30990: GO 31131
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
30992: LD_VAR 0 2
30996: PPUSH
30997: LD_VAR 0 3
31001: PPUSH
31002: CALL_OW 428
31006: PUSH
31007: LD_VAR 0 1
31011: EQUAL
31012: PUSH
31013: LD_VAR 0 1
31017: PPUSH
31018: CALL_OW 314
31022: NOT
31023: AND
31024: IFFALSE 30950
// PlaySoundXY ( x , y , PlantMine ) ;
31026: LD_VAR 0 2
31030: PPUSH
31031: LD_VAR 0 3
31035: PPUSH
31036: LD_STRING PlantMine
31038: PPUSH
31039: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
31043: LD_VAR 0 2
31047: PPUSH
31048: LD_VAR 0 3
31052: PPUSH
31053: LD_VAR 0 1
31057: PPUSH
31058: CALL_OW 255
31062: PPUSH
31063: LD_INT 0
31065: PPUSH
31066: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
31070: LD_ADDR_EXP 122
31074: PUSH
31075: LD_EXP 122
31079: PPUSH
31080: LD_VAR 0 5
31084: PUSH
31085: LD_EXP 122
31089: PUSH
31090: LD_VAR 0 5
31094: ARRAY
31095: PUSH
31096: LD_INT 1
31098: PLUS
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: PPUSH
31104: LD_VAR 0 2
31108: PUSH
31109: LD_VAR 0 3
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PPUSH
31118: CALL 37330 0 3
31122: ST_TO_ADDR
// result := true ;
31123: LD_ADDR_VAR 0 4
31127: PUSH
31128: LD_INT 1
31130: ST_TO_ADDR
// end ;
31131: LD_VAR 0 4
31135: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
31136: LD_INT 0
31138: PPUSH
31139: PPUSH
31140: PPUSH
// if not unit in minersList then
31141: LD_VAR 0 1
31145: PUSH
31146: LD_EXP 121
31150: IN
31151: NOT
31152: IFFALSE 31156
// exit ;
31154: GO 31548
// index := GetElementIndex ( minersList , unit ) ;
31156: LD_ADDR_VAR 0 6
31160: PUSH
31161: LD_EXP 121
31165: PPUSH
31166: LD_VAR 0 1
31170: PPUSH
31171: CALL 37115 0 2
31175: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
31176: LD_ADDR_VAR 0 5
31180: PUSH
31181: DOUBLE
31182: LD_EXP 122
31186: PUSH
31187: LD_VAR 0 6
31191: ARRAY
31192: INC
31193: ST_TO_ADDR
31194: LD_INT 1
31196: PUSH
31197: FOR_DOWNTO
31198: IFFALSE 31359
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
31200: LD_EXP 122
31204: PUSH
31205: LD_VAR 0 6
31209: ARRAY
31210: PUSH
31211: LD_VAR 0 5
31215: ARRAY
31216: PUSH
31217: LD_INT 1
31219: ARRAY
31220: PUSH
31221: LD_VAR 0 2
31225: EQUAL
31226: PUSH
31227: LD_EXP 122
31231: PUSH
31232: LD_VAR 0 6
31236: ARRAY
31237: PUSH
31238: LD_VAR 0 5
31242: ARRAY
31243: PUSH
31244: LD_INT 2
31246: ARRAY
31247: PUSH
31248: LD_VAR 0 3
31252: EQUAL
31253: AND
31254: IFFALSE 31357
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31256: LD_EXP 122
31260: PUSH
31261: LD_VAR 0 6
31265: ARRAY
31266: PUSH
31267: LD_VAR 0 5
31271: ARRAY
31272: PUSH
31273: LD_INT 1
31275: ARRAY
31276: PPUSH
31277: LD_EXP 122
31281: PUSH
31282: LD_VAR 0 6
31286: ARRAY
31287: PUSH
31288: LD_VAR 0 5
31292: ARRAY
31293: PUSH
31294: LD_INT 2
31296: ARRAY
31297: PPUSH
31298: LD_VAR 0 1
31302: PPUSH
31303: CALL_OW 255
31307: PPUSH
31308: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31312: LD_ADDR_EXP 122
31316: PUSH
31317: LD_EXP 122
31321: PPUSH
31322: LD_VAR 0 6
31326: PPUSH
31327: LD_EXP 122
31331: PUSH
31332: LD_VAR 0 6
31336: ARRAY
31337: PPUSH
31338: LD_VAR 0 5
31342: PPUSH
31343: CALL_OW 3
31347: PPUSH
31348: CALL_OW 1
31352: ST_TO_ADDR
// exit ;
31353: POP
31354: POP
31355: GO 31548
// end ; end ;
31357: GO 31197
31359: POP
31360: POP
// for i := minerMinesList [ index ] downto 1 do
31361: LD_ADDR_VAR 0 5
31365: PUSH
31366: DOUBLE
31367: LD_EXP 122
31371: PUSH
31372: LD_VAR 0 6
31376: ARRAY
31377: INC
31378: ST_TO_ADDR
31379: LD_INT 1
31381: PUSH
31382: FOR_DOWNTO
31383: IFFALSE 31546
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
31385: LD_EXP 122
31389: PUSH
31390: LD_VAR 0 6
31394: ARRAY
31395: PUSH
31396: LD_VAR 0 5
31400: ARRAY
31401: PUSH
31402: LD_INT 1
31404: ARRAY
31405: PPUSH
31406: LD_EXP 122
31410: PUSH
31411: LD_VAR 0 6
31415: ARRAY
31416: PUSH
31417: LD_VAR 0 5
31421: ARRAY
31422: PUSH
31423: LD_INT 2
31425: ARRAY
31426: PPUSH
31427: LD_VAR 0 2
31431: PPUSH
31432: LD_VAR 0 3
31436: PPUSH
31437: CALL_OW 298
31441: PUSH
31442: LD_INT 6
31444: LESS
31445: IFFALSE 31544
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31447: LD_EXP 122
31451: PUSH
31452: LD_VAR 0 6
31456: ARRAY
31457: PUSH
31458: LD_VAR 0 5
31462: ARRAY
31463: PUSH
31464: LD_INT 1
31466: ARRAY
31467: PPUSH
31468: LD_EXP 122
31472: PUSH
31473: LD_VAR 0 6
31477: ARRAY
31478: PUSH
31479: LD_VAR 0 5
31483: ARRAY
31484: PUSH
31485: LD_INT 2
31487: ARRAY
31488: PPUSH
31489: LD_VAR 0 1
31493: PPUSH
31494: CALL_OW 255
31498: PPUSH
31499: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31503: LD_ADDR_EXP 122
31507: PUSH
31508: LD_EXP 122
31512: PPUSH
31513: LD_VAR 0 6
31517: PPUSH
31518: LD_EXP 122
31522: PUSH
31523: LD_VAR 0 6
31527: ARRAY
31528: PPUSH
31529: LD_VAR 0 5
31533: PPUSH
31534: CALL_OW 3
31538: PPUSH
31539: CALL_OW 1
31543: ST_TO_ADDR
// end ; end ;
31544: GO 31382
31546: POP
31547: POP
// end ;
31548: LD_VAR 0 4
31552: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
31553: LD_INT 0
31555: PPUSH
31556: PPUSH
31557: PPUSH
31558: PPUSH
31559: PPUSH
31560: PPUSH
31561: PPUSH
31562: PPUSH
31563: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
31564: LD_VAR 0 1
31568: PPUSH
31569: CALL_OW 264
31573: PUSH
31574: LD_EXP 45
31578: EQUAL
31579: NOT
31580: PUSH
31581: LD_VAR 0 1
31585: PUSH
31586: LD_EXP 121
31590: IN
31591: NOT
31592: OR
31593: IFFALSE 31597
// exit ;
31595: GO 31919
// index := GetElementIndex ( minersList , unit ) ;
31597: LD_ADDR_VAR 0 6
31601: PUSH
31602: LD_EXP 121
31606: PPUSH
31607: LD_VAR 0 1
31611: PPUSH
31612: CALL 37115 0 2
31616: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
31617: LD_ADDR_VAR 0 8
31621: PUSH
31622: LD_EXP 123
31626: PUSH
31627: LD_EXP 122
31631: PUSH
31632: LD_VAR 0 6
31636: ARRAY
31637: MINUS
31638: ST_TO_ADDR
// if not minesFreeAmount then
31639: LD_VAR 0 8
31643: NOT
31644: IFFALSE 31648
// exit ;
31646: GO 31919
// tmp := [ ] ;
31648: LD_ADDR_VAR 0 7
31652: PUSH
31653: EMPTY
31654: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
31655: LD_ADDR_VAR 0 5
31659: PUSH
31660: DOUBLE
31661: LD_INT 1
31663: DEC
31664: ST_TO_ADDR
31665: LD_VAR 0 8
31669: PUSH
31670: FOR_TO
31671: IFFALSE 31866
// begin _d := rand ( 0 , 5 ) ;
31673: LD_ADDR_VAR 0 11
31677: PUSH
31678: LD_INT 0
31680: PPUSH
31681: LD_INT 5
31683: PPUSH
31684: CALL_OW 12
31688: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
31689: LD_ADDR_VAR 0 12
31693: PUSH
31694: LD_INT 2
31696: PPUSH
31697: LD_INT 6
31699: PPUSH
31700: CALL_OW 12
31704: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
31705: LD_ADDR_VAR 0 9
31709: PUSH
31710: LD_VAR 0 2
31714: PPUSH
31715: LD_VAR 0 11
31719: PPUSH
31720: LD_VAR 0 12
31724: PPUSH
31725: CALL_OW 272
31729: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
31730: LD_ADDR_VAR 0 10
31734: PUSH
31735: LD_VAR 0 3
31739: PPUSH
31740: LD_VAR 0 11
31744: PPUSH
31745: LD_VAR 0 12
31749: PPUSH
31750: CALL_OW 273
31754: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
31755: LD_VAR 0 9
31759: PPUSH
31760: LD_VAR 0 10
31764: PPUSH
31765: CALL_OW 488
31769: PUSH
31770: LD_VAR 0 9
31774: PUSH
31775: LD_VAR 0 10
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: PUSH
31784: LD_VAR 0 7
31788: IN
31789: NOT
31790: AND
31791: PUSH
31792: LD_VAR 0 9
31796: PPUSH
31797: LD_VAR 0 10
31801: PPUSH
31802: CALL_OW 458
31806: NOT
31807: AND
31808: IFFALSE 31850
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
31810: LD_ADDR_VAR 0 7
31814: PUSH
31815: LD_VAR 0 7
31819: PPUSH
31820: LD_VAR 0 7
31824: PUSH
31825: LD_INT 1
31827: PLUS
31828: PPUSH
31829: LD_VAR 0 9
31833: PUSH
31834: LD_VAR 0 10
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: PPUSH
31843: CALL_OW 1
31847: ST_TO_ADDR
31848: GO 31864
// i := i - 1 ;
31850: LD_ADDR_VAR 0 5
31854: PUSH
31855: LD_VAR 0 5
31859: PUSH
31860: LD_INT 1
31862: MINUS
31863: ST_TO_ADDR
// end ;
31864: GO 31670
31866: POP
31867: POP
// for i in tmp do
31868: LD_ADDR_VAR 0 5
31872: PUSH
31873: LD_VAR 0 7
31877: PUSH
31878: FOR_IN
31879: IFFALSE 31917
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
31881: LD_VAR 0 1
31885: PPUSH
31886: LD_VAR 0 5
31890: PUSH
31891: LD_INT 1
31893: ARRAY
31894: PPUSH
31895: LD_VAR 0 5
31899: PUSH
31900: LD_INT 2
31902: ARRAY
31903: PPUSH
31904: CALL 30859 0 3
31908: NOT
31909: IFFALSE 31915
// exit ;
31911: POP
31912: POP
31913: GO 31919
31915: GO 31878
31917: POP
31918: POP
// end ;
31919: LD_VAR 0 4
31923: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
31924: LD_INT 0
31926: PPUSH
31927: PPUSH
31928: PPUSH
31929: PPUSH
31930: PPUSH
31931: PPUSH
31932: PPUSH
// if not GetClass ( unit ) = class_sniper then
31933: LD_VAR 0 1
31937: PPUSH
31938: CALL_OW 257
31942: PUSH
31943: LD_INT 5
31945: EQUAL
31946: NOT
31947: IFFALSE 31951
// exit ;
31949: GO 32339
// dist := 8 ;
31951: LD_ADDR_VAR 0 5
31955: PUSH
31956: LD_INT 8
31958: ST_TO_ADDR
// viewRange := 12 ;
31959: LD_ADDR_VAR 0 7
31963: PUSH
31964: LD_INT 12
31966: ST_TO_ADDR
// side := GetSide ( unit ) ;
31967: LD_ADDR_VAR 0 6
31971: PUSH
31972: LD_VAR 0 1
31976: PPUSH
31977: CALL_OW 255
31981: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
31982: LD_INT 61
31984: PPUSH
31985: LD_VAR 0 6
31989: PPUSH
31990: CALL_OW 321
31994: PUSH
31995: LD_INT 2
31997: EQUAL
31998: IFFALSE 32008
// viewRange := 16 ;
32000: LD_ADDR_VAR 0 7
32004: PUSH
32005: LD_INT 16
32007: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
32008: LD_VAR 0 1
32012: PPUSH
32013: LD_VAR 0 2
32017: PPUSH
32018: LD_VAR 0 3
32022: PPUSH
32023: CALL_OW 297
32027: PUSH
32028: LD_VAR 0 5
32032: GREATER
32033: IFFALSE 32112
// begin ComMoveXY ( unit , x , y ) ;
32035: LD_VAR 0 1
32039: PPUSH
32040: LD_VAR 0 2
32044: PPUSH
32045: LD_VAR 0 3
32049: PPUSH
32050: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32054: LD_INT 35
32056: PPUSH
32057: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
32061: LD_VAR 0 1
32065: PPUSH
32066: LD_VAR 0 2
32070: PPUSH
32071: LD_VAR 0 3
32075: PPUSH
32076: CALL 67887 0 3
32080: NOT
32081: IFFALSE 32085
// exit ;
32083: GO 32339
// until GetDistUnitXY ( unit , x , y ) < dist ;
32085: LD_VAR 0 1
32089: PPUSH
32090: LD_VAR 0 2
32094: PPUSH
32095: LD_VAR 0 3
32099: PPUSH
32100: CALL_OW 297
32104: PUSH
32105: LD_VAR 0 5
32109: LESS
32110: IFFALSE 32054
// end ; ComTurnXY ( unit , x , y ) ;
32112: LD_VAR 0 1
32116: PPUSH
32117: LD_VAR 0 2
32121: PPUSH
32122: LD_VAR 0 3
32126: PPUSH
32127: CALL_OW 118
// wait ( 5 ) ;
32131: LD_INT 5
32133: PPUSH
32134: CALL_OW 67
// _d := GetDir ( unit ) ;
32138: LD_ADDR_VAR 0 10
32142: PUSH
32143: LD_VAR 0 1
32147: PPUSH
32148: CALL_OW 254
32152: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
32153: LD_ADDR_VAR 0 8
32157: PUSH
32158: LD_VAR 0 1
32162: PPUSH
32163: CALL_OW 250
32167: PPUSH
32168: LD_VAR 0 10
32172: PPUSH
32173: LD_VAR 0 5
32177: PPUSH
32178: CALL_OW 272
32182: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
32183: LD_ADDR_VAR 0 9
32187: PUSH
32188: LD_VAR 0 1
32192: PPUSH
32193: CALL_OW 251
32197: PPUSH
32198: LD_VAR 0 10
32202: PPUSH
32203: LD_VAR 0 5
32207: PPUSH
32208: CALL_OW 273
32212: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32213: LD_VAR 0 8
32217: PPUSH
32218: LD_VAR 0 9
32222: PPUSH
32223: CALL_OW 488
32227: NOT
32228: IFFALSE 32232
// exit ;
32230: GO 32339
// ComAnimCustom ( unit , 1 ) ;
32232: LD_VAR 0 1
32236: PPUSH
32237: LD_INT 1
32239: PPUSH
32240: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
32244: LD_VAR 0 8
32248: PPUSH
32249: LD_VAR 0 9
32253: PPUSH
32254: LD_VAR 0 6
32258: PPUSH
32259: LD_VAR 0 7
32263: PPUSH
32264: CALL_OW 330
// repeat wait ( 1 ) ;
32268: LD_INT 1
32270: PPUSH
32271: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
32275: LD_VAR 0 1
32279: PPUSH
32280: CALL_OW 316
32284: PUSH
32285: LD_VAR 0 1
32289: PPUSH
32290: CALL_OW 314
32294: OR
32295: PUSH
32296: LD_VAR 0 1
32300: PPUSH
32301: CALL_OW 302
32305: NOT
32306: OR
32307: PUSH
32308: LD_VAR 0 1
32312: PPUSH
32313: CALL_OW 301
32317: OR
32318: IFFALSE 32268
// RemoveSeeing ( _x , _y , side ) ;
32320: LD_VAR 0 8
32324: PPUSH
32325: LD_VAR 0 9
32329: PPUSH
32330: LD_VAR 0 6
32334: PPUSH
32335: CALL_OW 331
// end ; end_of_file
32339: LD_VAR 0 4
32343: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
32344: LD_INT 0
32346: PPUSH
32347: PPUSH
// if exist_mode then
32348: LD_VAR 0 2
32352: IFFALSE 32377
// unit := CreateCharacter ( prefix & ident ) else
32354: LD_ADDR_VAR 0 5
32358: PUSH
32359: LD_VAR 0 3
32363: PUSH
32364: LD_VAR 0 1
32368: STR
32369: PPUSH
32370: CALL_OW 34
32374: ST_TO_ADDR
32375: GO 32392
// unit := NewCharacter ( ident ) ;
32377: LD_ADDR_VAR 0 5
32381: PUSH
32382: LD_VAR 0 1
32386: PPUSH
32387: CALL_OW 25
32391: ST_TO_ADDR
// result := unit ;
32392: LD_ADDR_VAR 0 4
32396: PUSH
32397: LD_VAR 0 5
32401: ST_TO_ADDR
// end ;
32402: LD_VAR 0 4
32406: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
32407: LD_INT 0
32409: PPUSH
32410: PPUSH
// if not side or not nation then
32411: LD_VAR 0 1
32415: NOT
32416: PUSH
32417: LD_VAR 0 2
32421: NOT
32422: OR
32423: IFFALSE 32427
// exit ;
32425: GO 33195
// case nation of nation_american :
32427: LD_VAR 0 2
32431: PUSH
32432: LD_INT 1
32434: DOUBLE
32435: EQUAL
32436: IFTRUE 32440
32438: GO 32654
32440: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
32441: LD_ADDR_VAR 0 4
32445: PUSH
32446: LD_INT 35
32448: PUSH
32449: LD_INT 45
32451: PUSH
32452: LD_INT 46
32454: PUSH
32455: LD_INT 47
32457: PUSH
32458: LD_INT 82
32460: PUSH
32461: LD_INT 83
32463: PUSH
32464: LD_INT 84
32466: PUSH
32467: LD_INT 85
32469: PUSH
32470: LD_INT 86
32472: PUSH
32473: LD_INT 1
32475: PUSH
32476: LD_INT 2
32478: PUSH
32479: LD_INT 6
32481: PUSH
32482: LD_INT 15
32484: PUSH
32485: LD_INT 16
32487: PUSH
32488: LD_INT 7
32490: PUSH
32491: LD_INT 12
32493: PUSH
32494: LD_INT 13
32496: PUSH
32497: LD_INT 10
32499: PUSH
32500: LD_INT 14
32502: PUSH
32503: LD_INT 20
32505: PUSH
32506: LD_INT 21
32508: PUSH
32509: LD_INT 22
32511: PUSH
32512: LD_INT 25
32514: PUSH
32515: LD_INT 32
32517: PUSH
32518: LD_INT 27
32520: PUSH
32521: LD_INT 36
32523: PUSH
32524: LD_INT 69
32526: PUSH
32527: LD_INT 39
32529: PUSH
32530: LD_INT 34
32532: PUSH
32533: LD_INT 40
32535: PUSH
32536: LD_INT 48
32538: PUSH
32539: LD_INT 49
32541: PUSH
32542: LD_INT 50
32544: PUSH
32545: LD_INT 51
32547: PUSH
32548: LD_INT 52
32550: PUSH
32551: LD_INT 53
32553: PUSH
32554: LD_INT 54
32556: PUSH
32557: LD_INT 55
32559: PUSH
32560: LD_INT 56
32562: PUSH
32563: LD_INT 57
32565: PUSH
32566: LD_INT 58
32568: PUSH
32569: LD_INT 59
32571: PUSH
32572: LD_INT 60
32574: PUSH
32575: LD_INT 61
32577: PUSH
32578: LD_INT 62
32580: PUSH
32581: LD_INT 80
32583: PUSH
32584: LD_INT 82
32586: PUSH
32587: LD_INT 83
32589: PUSH
32590: LD_INT 84
32592: PUSH
32593: LD_INT 85
32595: PUSH
32596: LD_INT 86
32598: PUSH
32599: EMPTY
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: ST_TO_ADDR
32652: GO 33119
32654: LD_INT 2
32656: DOUBLE
32657: EQUAL
32658: IFTRUE 32662
32660: GO 32888
32662: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
32663: LD_ADDR_VAR 0 4
32667: PUSH
32668: LD_INT 35
32670: PUSH
32671: LD_INT 45
32673: PUSH
32674: LD_INT 46
32676: PUSH
32677: LD_INT 47
32679: PUSH
32680: LD_INT 82
32682: PUSH
32683: LD_INT 83
32685: PUSH
32686: LD_INT 84
32688: PUSH
32689: LD_INT 85
32691: PUSH
32692: LD_INT 87
32694: PUSH
32695: LD_INT 70
32697: PUSH
32698: LD_INT 1
32700: PUSH
32701: LD_INT 11
32703: PUSH
32704: LD_INT 3
32706: PUSH
32707: LD_INT 4
32709: PUSH
32710: LD_INT 5
32712: PUSH
32713: LD_INT 6
32715: PUSH
32716: LD_INT 15
32718: PUSH
32719: LD_INT 18
32721: PUSH
32722: LD_INT 7
32724: PUSH
32725: LD_INT 17
32727: PUSH
32728: LD_INT 8
32730: PUSH
32731: LD_INT 20
32733: PUSH
32734: LD_INT 21
32736: PUSH
32737: LD_INT 22
32739: PUSH
32740: LD_INT 72
32742: PUSH
32743: LD_INT 26
32745: PUSH
32746: LD_INT 69
32748: PUSH
32749: LD_INT 39
32751: PUSH
32752: LD_INT 40
32754: PUSH
32755: LD_INT 41
32757: PUSH
32758: LD_INT 42
32760: PUSH
32761: LD_INT 43
32763: PUSH
32764: LD_INT 48
32766: PUSH
32767: LD_INT 49
32769: PUSH
32770: LD_INT 50
32772: PUSH
32773: LD_INT 51
32775: PUSH
32776: LD_INT 52
32778: PUSH
32779: LD_INT 53
32781: PUSH
32782: LD_INT 54
32784: PUSH
32785: LD_INT 55
32787: PUSH
32788: LD_INT 56
32790: PUSH
32791: LD_INT 60
32793: PUSH
32794: LD_INT 61
32796: PUSH
32797: LD_INT 62
32799: PUSH
32800: LD_INT 66
32802: PUSH
32803: LD_INT 67
32805: PUSH
32806: LD_INT 68
32808: PUSH
32809: LD_INT 81
32811: PUSH
32812: LD_INT 82
32814: PUSH
32815: LD_INT 83
32817: PUSH
32818: LD_INT 84
32820: PUSH
32821: LD_INT 85
32823: PUSH
32824: LD_INT 87
32826: PUSH
32827: LD_INT 88
32829: PUSH
32830: EMPTY
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: ST_TO_ADDR
32886: GO 33119
32888: LD_INT 3
32890: DOUBLE
32891: EQUAL
32892: IFTRUE 32896
32894: GO 33118
32896: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
32897: LD_ADDR_VAR 0 4
32901: PUSH
32902: LD_INT 46
32904: PUSH
32905: LD_INT 47
32907: PUSH
32908: LD_INT 1
32910: PUSH
32911: LD_INT 2
32913: PUSH
32914: LD_INT 82
32916: PUSH
32917: LD_INT 83
32919: PUSH
32920: LD_INT 84
32922: PUSH
32923: LD_INT 85
32925: PUSH
32926: LD_INT 86
32928: PUSH
32929: LD_INT 11
32931: PUSH
32932: LD_INT 9
32934: PUSH
32935: LD_INT 20
32937: PUSH
32938: LD_INT 19
32940: PUSH
32941: LD_INT 21
32943: PUSH
32944: LD_INT 24
32946: PUSH
32947: LD_INT 22
32949: PUSH
32950: LD_INT 25
32952: PUSH
32953: LD_INT 28
32955: PUSH
32956: LD_INT 29
32958: PUSH
32959: LD_INT 30
32961: PUSH
32962: LD_INT 31
32964: PUSH
32965: LD_INT 37
32967: PUSH
32968: LD_INT 38
32970: PUSH
32971: LD_INT 32
32973: PUSH
32974: LD_INT 27
32976: PUSH
32977: LD_INT 33
32979: PUSH
32980: LD_INT 69
32982: PUSH
32983: LD_INT 39
32985: PUSH
32986: LD_INT 34
32988: PUSH
32989: LD_INT 40
32991: PUSH
32992: LD_INT 71
32994: PUSH
32995: LD_INT 23
32997: PUSH
32998: LD_INT 44
33000: PUSH
33001: LD_INT 48
33003: PUSH
33004: LD_INT 49
33006: PUSH
33007: LD_INT 50
33009: PUSH
33010: LD_INT 51
33012: PUSH
33013: LD_INT 52
33015: PUSH
33016: LD_INT 53
33018: PUSH
33019: LD_INT 54
33021: PUSH
33022: LD_INT 55
33024: PUSH
33025: LD_INT 56
33027: PUSH
33028: LD_INT 57
33030: PUSH
33031: LD_INT 58
33033: PUSH
33034: LD_INT 59
33036: PUSH
33037: LD_INT 63
33039: PUSH
33040: LD_INT 64
33042: PUSH
33043: LD_INT 65
33045: PUSH
33046: LD_INT 82
33048: PUSH
33049: LD_INT 83
33051: PUSH
33052: LD_INT 84
33054: PUSH
33055: LD_INT 85
33057: PUSH
33058: LD_INT 86
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: LIST
33073: LIST
33074: LIST
33075: LIST
33076: LIST
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: LIST
33082: LIST
33083: LIST
33084: LIST
33085: LIST
33086: LIST
33087: LIST
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: ST_TO_ADDR
33116: GO 33119
33118: POP
// if state > - 1 and state < 3 then
33119: LD_VAR 0 3
33123: PUSH
33124: LD_INT 1
33126: NEG
33127: GREATER
33128: PUSH
33129: LD_VAR 0 3
33133: PUSH
33134: LD_INT 3
33136: LESS
33137: AND
33138: IFFALSE 33195
// for i in result do
33140: LD_ADDR_VAR 0 5
33144: PUSH
33145: LD_VAR 0 4
33149: PUSH
33150: FOR_IN
33151: IFFALSE 33193
// if GetTech ( i , side ) <> state then
33153: LD_VAR 0 5
33157: PPUSH
33158: LD_VAR 0 1
33162: PPUSH
33163: CALL_OW 321
33167: PUSH
33168: LD_VAR 0 3
33172: NONEQUAL
33173: IFFALSE 33191
// result := result diff i ;
33175: LD_ADDR_VAR 0 4
33179: PUSH
33180: LD_VAR 0 4
33184: PUSH
33185: LD_VAR 0 5
33189: DIFF
33190: ST_TO_ADDR
33191: GO 33150
33193: POP
33194: POP
// end ;
33195: LD_VAR 0 4
33199: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
33200: LD_INT 0
33202: PPUSH
33203: PPUSH
33204: PPUSH
// result := true ;
33205: LD_ADDR_VAR 0 3
33209: PUSH
33210: LD_INT 1
33212: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
33213: LD_ADDR_VAR 0 5
33217: PUSH
33218: LD_VAR 0 2
33222: PPUSH
33223: CALL_OW 480
33227: ST_TO_ADDR
// if not tmp then
33228: LD_VAR 0 5
33232: NOT
33233: IFFALSE 33237
// exit ;
33235: GO 33286
// for i in tmp do
33237: LD_ADDR_VAR 0 4
33241: PUSH
33242: LD_VAR 0 5
33246: PUSH
33247: FOR_IN
33248: IFFALSE 33284
// if GetTech ( i , side ) <> state_researched then
33250: LD_VAR 0 4
33254: PPUSH
33255: LD_VAR 0 1
33259: PPUSH
33260: CALL_OW 321
33264: PUSH
33265: LD_INT 2
33267: NONEQUAL
33268: IFFALSE 33282
// begin result := false ;
33270: LD_ADDR_VAR 0 3
33274: PUSH
33275: LD_INT 0
33277: ST_TO_ADDR
// exit ;
33278: POP
33279: POP
33280: GO 33286
// end ;
33282: GO 33247
33284: POP
33285: POP
// end ;
33286: LD_VAR 0 3
33290: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
33291: LD_INT 0
33293: PPUSH
33294: PPUSH
33295: PPUSH
33296: PPUSH
33297: PPUSH
33298: PPUSH
33299: PPUSH
33300: PPUSH
33301: PPUSH
33302: PPUSH
33303: PPUSH
33304: PPUSH
33305: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
33306: LD_VAR 0 1
33310: NOT
33311: PUSH
33312: LD_VAR 0 1
33316: PPUSH
33317: CALL_OW 257
33321: PUSH
33322: LD_INT 9
33324: NONEQUAL
33325: OR
33326: IFFALSE 33330
// exit ;
33328: GO 33903
// side := GetSide ( unit ) ;
33330: LD_ADDR_VAR 0 9
33334: PUSH
33335: LD_VAR 0 1
33339: PPUSH
33340: CALL_OW 255
33344: ST_TO_ADDR
// tech_space := tech_spacanom ;
33345: LD_ADDR_VAR 0 12
33349: PUSH
33350: LD_INT 29
33352: ST_TO_ADDR
// tech_time := tech_taurad ;
33353: LD_ADDR_VAR 0 13
33357: PUSH
33358: LD_INT 28
33360: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
33361: LD_ADDR_VAR 0 11
33365: PUSH
33366: LD_VAR 0 1
33370: PPUSH
33371: CALL_OW 310
33375: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
33376: LD_VAR 0 11
33380: PPUSH
33381: CALL_OW 247
33385: PUSH
33386: LD_INT 2
33388: EQUAL
33389: IFFALSE 33393
// exit ;
33391: GO 33903
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33393: LD_ADDR_VAR 0 8
33397: PUSH
33398: LD_INT 81
33400: PUSH
33401: LD_VAR 0 9
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: PUSH
33410: LD_INT 3
33412: PUSH
33413: LD_INT 21
33415: PUSH
33416: LD_INT 3
33418: PUSH
33419: EMPTY
33420: LIST
33421: LIST
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: PUSH
33427: EMPTY
33428: LIST
33429: LIST
33430: PPUSH
33431: CALL_OW 69
33435: ST_TO_ADDR
// if not tmp then
33436: LD_VAR 0 8
33440: NOT
33441: IFFALSE 33445
// exit ;
33443: GO 33903
// if in_unit then
33445: LD_VAR 0 11
33449: IFFALSE 33473
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
33451: LD_ADDR_VAR 0 10
33455: PUSH
33456: LD_VAR 0 8
33460: PPUSH
33461: LD_VAR 0 11
33465: PPUSH
33466: CALL_OW 74
33470: ST_TO_ADDR
33471: GO 33493
// enemy := NearestUnitToUnit ( tmp , unit ) ;
33473: LD_ADDR_VAR 0 10
33477: PUSH
33478: LD_VAR 0 8
33482: PPUSH
33483: LD_VAR 0 1
33487: PPUSH
33488: CALL_OW 74
33492: ST_TO_ADDR
// if not enemy then
33493: LD_VAR 0 10
33497: NOT
33498: IFFALSE 33502
// exit ;
33500: GO 33903
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
33502: LD_VAR 0 11
33506: PUSH
33507: LD_VAR 0 11
33511: PPUSH
33512: LD_VAR 0 10
33516: PPUSH
33517: CALL_OW 296
33521: PUSH
33522: LD_INT 13
33524: GREATER
33525: AND
33526: PUSH
33527: LD_VAR 0 1
33531: PPUSH
33532: LD_VAR 0 10
33536: PPUSH
33537: CALL_OW 296
33541: PUSH
33542: LD_INT 12
33544: GREATER
33545: OR
33546: IFFALSE 33550
// exit ;
33548: GO 33903
// missile := [ 1 ] ;
33550: LD_ADDR_VAR 0 14
33554: PUSH
33555: LD_INT 1
33557: PUSH
33558: EMPTY
33559: LIST
33560: ST_TO_ADDR
// if Researched ( side , tech_space ) then
33561: LD_VAR 0 9
33565: PPUSH
33566: LD_VAR 0 12
33570: PPUSH
33571: CALL_OW 325
33575: IFFALSE 33604
// missile := Insert ( missile , missile + 1 , 2 ) ;
33577: LD_ADDR_VAR 0 14
33581: PUSH
33582: LD_VAR 0 14
33586: PPUSH
33587: LD_VAR 0 14
33591: PUSH
33592: LD_INT 1
33594: PLUS
33595: PPUSH
33596: LD_INT 2
33598: PPUSH
33599: CALL_OW 2
33603: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
33604: LD_VAR 0 9
33608: PPUSH
33609: LD_VAR 0 13
33613: PPUSH
33614: CALL_OW 325
33618: PUSH
33619: LD_VAR 0 10
33623: PPUSH
33624: CALL_OW 255
33628: PPUSH
33629: LD_VAR 0 13
33633: PPUSH
33634: CALL_OW 325
33638: NOT
33639: AND
33640: IFFALSE 33669
// missile := Insert ( missile , missile + 1 , 3 ) ;
33642: LD_ADDR_VAR 0 14
33646: PUSH
33647: LD_VAR 0 14
33651: PPUSH
33652: LD_VAR 0 14
33656: PUSH
33657: LD_INT 1
33659: PLUS
33660: PPUSH
33661: LD_INT 3
33663: PPUSH
33664: CALL_OW 2
33668: ST_TO_ADDR
// if missile < 2 then
33669: LD_VAR 0 14
33673: PUSH
33674: LD_INT 2
33676: LESS
33677: IFFALSE 33681
// exit ;
33679: GO 33903
// x := GetX ( enemy ) ;
33681: LD_ADDR_VAR 0 4
33685: PUSH
33686: LD_VAR 0 10
33690: PPUSH
33691: CALL_OW 250
33695: ST_TO_ADDR
// y := GetY ( enemy ) ;
33696: LD_ADDR_VAR 0 5
33700: PUSH
33701: LD_VAR 0 10
33705: PPUSH
33706: CALL_OW 251
33710: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
33711: LD_ADDR_VAR 0 6
33715: PUSH
33716: LD_VAR 0 4
33720: PUSH
33721: LD_INT 1
33723: NEG
33724: PPUSH
33725: LD_INT 1
33727: PPUSH
33728: CALL_OW 12
33732: PLUS
33733: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
33734: LD_ADDR_VAR 0 7
33738: PUSH
33739: LD_VAR 0 5
33743: PUSH
33744: LD_INT 1
33746: NEG
33747: PPUSH
33748: LD_INT 1
33750: PPUSH
33751: CALL_OW 12
33755: PLUS
33756: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33757: LD_VAR 0 6
33761: PPUSH
33762: LD_VAR 0 7
33766: PPUSH
33767: CALL_OW 488
33771: NOT
33772: IFFALSE 33794
// begin _x := x ;
33774: LD_ADDR_VAR 0 6
33778: PUSH
33779: LD_VAR 0 4
33783: ST_TO_ADDR
// _y := y ;
33784: LD_ADDR_VAR 0 7
33788: PUSH
33789: LD_VAR 0 5
33793: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
33794: LD_ADDR_VAR 0 3
33798: PUSH
33799: LD_INT 1
33801: PPUSH
33802: LD_VAR 0 14
33806: PPUSH
33807: CALL_OW 12
33811: ST_TO_ADDR
// case i of 1 :
33812: LD_VAR 0 3
33816: PUSH
33817: LD_INT 1
33819: DOUBLE
33820: EQUAL
33821: IFTRUE 33825
33823: GO 33842
33825: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
33826: LD_VAR 0 1
33830: PPUSH
33831: LD_VAR 0 10
33835: PPUSH
33836: CALL_OW 115
33840: GO 33903
33842: LD_INT 2
33844: DOUBLE
33845: EQUAL
33846: IFTRUE 33850
33848: GO 33872
33850: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33851: LD_VAR 0 1
33855: PPUSH
33856: LD_VAR 0 6
33860: PPUSH
33861: LD_VAR 0 7
33865: PPUSH
33866: CALL_OW 153
33870: GO 33903
33872: LD_INT 3
33874: DOUBLE
33875: EQUAL
33876: IFTRUE 33880
33878: GO 33902
33880: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33881: LD_VAR 0 1
33885: PPUSH
33886: LD_VAR 0 6
33890: PPUSH
33891: LD_VAR 0 7
33895: PPUSH
33896: CALL_OW 154
33900: GO 33903
33902: POP
// end ;
33903: LD_VAR 0 2
33907: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33908: LD_INT 0
33910: PPUSH
33911: PPUSH
33912: PPUSH
33913: PPUSH
33914: PPUSH
33915: PPUSH
// if not unit or not building then
33916: LD_VAR 0 1
33920: NOT
33921: PUSH
33922: LD_VAR 0 2
33926: NOT
33927: OR
33928: IFFALSE 33932
// exit ;
33930: GO 34090
// x := GetX ( building ) ;
33932: LD_ADDR_VAR 0 5
33936: PUSH
33937: LD_VAR 0 2
33941: PPUSH
33942: CALL_OW 250
33946: ST_TO_ADDR
// y := GetY ( building ) ;
33947: LD_ADDR_VAR 0 6
33951: PUSH
33952: LD_VAR 0 2
33956: PPUSH
33957: CALL_OW 251
33961: ST_TO_ADDR
// for i = 0 to 5 do
33962: LD_ADDR_VAR 0 4
33966: PUSH
33967: DOUBLE
33968: LD_INT 0
33970: DEC
33971: ST_TO_ADDR
33972: LD_INT 5
33974: PUSH
33975: FOR_TO
33976: IFFALSE 34088
// begin _x := ShiftX ( x , i , 3 ) ;
33978: LD_ADDR_VAR 0 7
33982: PUSH
33983: LD_VAR 0 5
33987: PPUSH
33988: LD_VAR 0 4
33992: PPUSH
33993: LD_INT 3
33995: PPUSH
33996: CALL_OW 272
34000: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
34001: LD_ADDR_VAR 0 8
34005: PUSH
34006: LD_VAR 0 6
34010: PPUSH
34011: LD_VAR 0 4
34015: PPUSH
34016: LD_INT 3
34018: PPUSH
34019: CALL_OW 273
34023: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34024: LD_VAR 0 7
34028: PPUSH
34029: LD_VAR 0 8
34033: PPUSH
34034: CALL_OW 488
34038: NOT
34039: IFFALSE 34043
// continue ;
34041: GO 33975
// if HexInfo ( _x , _y ) = 0 then
34043: LD_VAR 0 7
34047: PPUSH
34048: LD_VAR 0 8
34052: PPUSH
34053: CALL_OW 428
34057: PUSH
34058: LD_INT 0
34060: EQUAL
34061: IFFALSE 34086
// begin ComMoveXY ( unit , _x , _y ) ;
34063: LD_VAR 0 1
34067: PPUSH
34068: LD_VAR 0 7
34072: PPUSH
34073: LD_VAR 0 8
34077: PPUSH
34078: CALL_OW 111
// exit ;
34082: POP
34083: POP
34084: GO 34090
// end ; end ;
34086: GO 33975
34088: POP
34089: POP
// end ;
34090: LD_VAR 0 3
34094: RET
// export function ScanBase ( side , base_area ) ; begin
34095: LD_INT 0
34097: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
34098: LD_ADDR_VAR 0 3
34102: PUSH
34103: LD_VAR 0 2
34107: PPUSH
34108: LD_INT 81
34110: PUSH
34111: LD_VAR 0 1
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PPUSH
34120: CALL_OW 70
34124: ST_TO_ADDR
// end ;
34125: LD_VAR 0 3
34129: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
34130: LD_INT 0
34132: PPUSH
34133: PPUSH
34134: PPUSH
34135: PPUSH
// result := false ;
34136: LD_ADDR_VAR 0 2
34140: PUSH
34141: LD_INT 0
34143: ST_TO_ADDR
// side := GetSide ( unit ) ;
34144: LD_ADDR_VAR 0 3
34148: PUSH
34149: LD_VAR 0 1
34153: PPUSH
34154: CALL_OW 255
34158: ST_TO_ADDR
// nat := GetNation ( unit ) ;
34159: LD_ADDR_VAR 0 4
34163: PUSH
34164: LD_VAR 0 1
34168: PPUSH
34169: CALL_OW 248
34173: ST_TO_ADDR
// case nat of 1 :
34174: LD_VAR 0 4
34178: PUSH
34179: LD_INT 1
34181: DOUBLE
34182: EQUAL
34183: IFTRUE 34187
34185: GO 34198
34187: POP
// tech := tech_lassight ; 2 :
34188: LD_ADDR_VAR 0 5
34192: PUSH
34193: LD_INT 12
34195: ST_TO_ADDR
34196: GO 34237
34198: LD_INT 2
34200: DOUBLE
34201: EQUAL
34202: IFTRUE 34206
34204: GO 34217
34206: POP
// tech := tech_mortar ; 3 :
34207: LD_ADDR_VAR 0 5
34211: PUSH
34212: LD_INT 41
34214: ST_TO_ADDR
34215: GO 34237
34217: LD_INT 3
34219: DOUBLE
34220: EQUAL
34221: IFTRUE 34225
34223: GO 34236
34225: POP
// tech := tech_bazooka ; end ;
34226: LD_ADDR_VAR 0 5
34230: PUSH
34231: LD_INT 44
34233: ST_TO_ADDR
34234: GO 34237
34236: POP
// if Researched ( side , tech ) then
34237: LD_VAR 0 3
34241: PPUSH
34242: LD_VAR 0 5
34246: PPUSH
34247: CALL_OW 325
34251: IFFALSE 34278
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
34253: LD_ADDR_VAR 0 2
34257: PUSH
34258: LD_INT 5
34260: PUSH
34261: LD_INT 8
34263: PUSH
34264: LD_INT 9
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: LIST
34271: PUSH
34272: LD_VAR 0 4
34276: ARRAY
34277: ST_TO_ADDR
// end ;
34278: LD_VAR 0 2
34282: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
34283: LD_INT 0
34285: PPUSH
34286: PPUSH
34287: PPUSH
// if not mines then
34288: LD_VAR 0 2
34292: NOT
34293: IFFALSE 34297
// exit ;
34295: GO 34441
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34297: LD_ADDR_VAR 0 5
34301: PUSH
34302: LD_INT 81
34304: PUSH
34305: LD_VAR 0 1
34309: PUSH
34310: EMPTY
34311: LIST
34312: LIST
34313: PUSH
34314: LD_INT 3
34316: PUSH
34317: LD_INT 21
34319: PUSH
34320: LD_INT 3
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: PUSH
34331: EMPTY
34332: LIST
34333: LIST
34334: PPUSH
34335: CALL_OW 69
34339: ST_TO_ADDR
// for i in mines do
34340: LD_ADDR_VAR 0 4
34344: PUSH
34345: LD_VAR 0 2
34349: PUSH
34350: FOR_IN
34351: IFFALSE 34439
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
34353: LD_VAR 0 4
34357: PUSH
34358: LD_INT 1
34360: ARRAY
34361: PPUSH
34362: LD_VAR 0 4
34366: PUSH
34367: LD_INT 2
34369: ARRAY
34370: PPUSH
34371: CALL_OW 458
34375: NOT
34376: IFFALSE 34380
// continue ;
34378: GO 34350
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
34380: LD_VAR 0 4
34384: PUSH
34385: LD_INT 1
34387: ARRAY
34388: PPUSH
34389: LD_VAR 0 4
34393: PUSH
34394: LD_INT 2
34396: ARRAY
34397: PPUSH
34398: CALL_OW 428
34402: PUSH
34403: LD_VAR 0 5
34407: IN
34408: IFFALSE 34437
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
34410: LD_VAR 0 4
34414: PUSH
34415: LD_INT 1
34417: ARRAY
34418: PPUSH
34419: LD_VAR 0 4
34423: PUSH
34424: LD_INT 2
34426: ARRAY
34427: PPUSH
34428: LD_VAR 0 1
34432: PPUSH
34433: CALL_OW 456
// end ;
34437: GO 34350
34439: POP
34440: POP
// end ;
34441: LD_VAR 0 3
34445: RET
// export function Count ( array ) ; var i ; begin
34446: LD_INT 0
34448: PPUSH
34449: PPUSH
// result := 0 ;
34450: LD_ADDR_VAR 0 2
34454: PUSH
34455: LD_INT 0
34457: ST_TO_ADDR
// for i in array do
34458: LD_ADDR_VAR 0 3
34462: PUSH
34463: LD_VAR 0 1
34467: PUSH
34468: FOR_IN
34469: IFFALSE 34493
// if i then
34471: LD_VAR 0 3
34475: IFFALSE 34491
// result := result + 1 ;
34477: LD_ADDR_VAR 0 2
34481: PUSH
34482: LD_VAR 0 2
34486: PUSH
34487: LD_INT 1
34489: PLUS
34490: ST_TO_ADDR
34491: GO 34468
34493: POP
34494: POP
// end ;
34495: LD_VAR 0 2
34499: RET
// export function IsEmpty ( building ) ; begin
34500: LD_INT 0
34502: PPUSH
// if not building then
34503: LD_VAR 0 1
34507: NOT
34508: IFFALSE 34512
// exit ;
34510: GO 34555
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
34512: LD_ADDR_VAR 0 2
34516: PUSH
34517: LD_VAR 0 1
34521: PUSH
34522: LD_INT 22
34524: PUSH
34525: LD_VAR 0 1
34529: PPUSH
34530: CALL_OW 255
34534: PUSH
34535: EMPTY
34536: LIST
34537: LIST
34538: PUSH
34539: LD_INT 58
34541: PUSH
34542: EMPTY
34543: LIST
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: PPUSH
34549: CALL_OW 69
34553: IN
34554: ST_TO_ADDR
// end ;
34555: LD_VAR 0 2
34559: RET
// export function IsNotFull ( building ) ; begin
34560: LD_INT 0
34562: PPUSH
// if not building then
34563: LD_VAR 0 1
34567: NOT
34568: IFFALSE 34572
// exit ;
34570: GO 34591
// result := UnitsInside ( building ) < 6 ;
34572: LD_ADDR_VAR 0 2
34576: PUSH
34577: LD_VAR 0 1
34581: PPUSH
34582: CALL_OW 313
34586: PUSH
34587: LD_INT 6
34589: LESS
34590: ST_TO_ADDR
// end ;
34591: LD_VAR 0 2
34595: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
34596: LD_INT 0
34598: PPUSH
34599: PPUSH
34600: PPUSH
34601: PPUSH
// tmp := [ ] ;
34602: LD_ADDR_VAR 0 3
34606: PUSH
34607: EMPTY
34608: ST_TO_ADDR
// list := [ ] ;
34609: LD_ADDR_VAR 0 5
34613: PUSH
34614: EMPTY
34615: ST_TO_ADDR
// for i = 16 to 25 do
34616: LD_ADDR_VAR 0 4
34620: PUSH
34621: DOUBLE
34622: LD_INT 16
34624: DEC
34625: ST_TO_ADDR
34626: LD_INT 25
34628: PUSH
34629: FOR_TO
34630: IFFALSE 34703
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
34632: LD_ADDR_VAR 0 3
34636: PUSH
34637: LD_VAR 0 3
34641: PUSH
34642: LD_INT 22
34644: PUSH
34645: LD_VAR 0 1
34649: PPUSH
34650: CALL_OW 255
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: PUSH
34659: LD_INT 91
34661: PUSH
34662: LD_VAR 0 1
34666: PUSH
34667: LD_INT 6
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: LIST
34674: PUSH
34675: LD_INT 30
34677: PUSH
34678: LD_VAR 0 4
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: PUSH
34687: EMPTY
34688: LIST
34689: LIST
34690: LIST
34691: PUSH
34692: EMPTY
34693: LIST
34694: PPUSH
34695: CALL_OW 69
34699: ADD
34700: ST_TO_ADDR
34701: GO 34629
34703: POP
34704: POP
// for i = 1 to tmp do
34705: LD_ADDR_VAR 0 4
34709: PUSH
34710: DOUBLE
34711: LD_INT 1
34713: DEC
34714: ST_TO_ADDR
34715: LD_VAR 0 3
34719: PUSH
34720: FOR_TO
34721: IFFALSE 34809
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
34723: LD_ADDR_VAR 0 5
34727: PUSH
34728: LD_VAR 0 5
34732: PUSH
34733: LD_VAR 0 3
34737: PUSH
34738: LD_VAR 0 4
34742: ARRAY
34743: PPUSH
34744: CALL_OW 266
34748: PUSH
34749: LD_VAR 0 3
34753: PUSH
34754: LD_VAR 0 4
34758: ARRAY
34759: PPUSH
34760: CALL_OW 250
34764: PUSH
34765: LD_VAR 0 3
34769: PUSH
34770: LD_VAR 0 4
34774: ARRAY
34775: PPUSH
34776: CALL_OW 251
34780: PUSH
34781: LD_VAR 0 3
34785: PUSH
34786: LD_VAR 0 4
34790: ARRAY
34791: PPUSH
34792: CALL_OW 254
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: PUSH
34803: EMPTY
34804: LIST
34805: ADD
34806: ST_TO_ADDR
34807: GO 34720
34809: POP
34810: POP
// result := list ;
34811: LD_ADDR_VAR 0 2
34815: PUSH
34816: LD_VAR 0 5
34820: ST_TO_ADDR
// end ;
34821: LD_VAR 0 2
34825: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
34826: LD_INT 0
34828: PPUSH
34829: PPUSH
34830: PPUSH
34831: PPUSH
34832: PPUSH
34833: PPUSH
34834: PPUSH
// if not factory then
34835: LD_VAR 0 1
34839: NOT
34840: IFFALSE 34844
// exit ;
34842: GO 35437
// if control = control_apeman then
34844: LD_VAR 0 4
34848: PUSH
34849: LD_INT 5
34851: EQUAL
34852: IFFALSE 34961
// begin tmp := UnitsInside ( factory ) ;
34854: LD_ADDR_VAR 0 8
34858: PUSH
34859: LD_VAR 0 1
34863: PPUSH
34864: CALL_OW 313
34868: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34869: LD_VAR 0 8
34873: PPUSH
34874: LD_INT 25
34876: PUSH
34877: LD_INT 12
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: PPUSH
34884: CALL_OW 72
34888: NOT
34889: IFFALSE 34899
// control := control_manual ;
34891: LD_ADDR_VAR 0 4
34895: PUSH
34896: LD_INT 1
34898: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34899: LD_ADDR_VAR 0 8
34903: PUSH
34904: LD_VAR 0 1
34908: PPUSH
34909: CALL 34596 0 1
34913: ST_TO_ADDR
// if tmp then
34914: LD_VAR 0 8
34918: IFFALSE 34961
// begin for i in tmp do
34920: LD_ADDR_VAR 0 7
34924: PUSH
34925: LD_VAR 0 8
34929: PUSH
34930: FOR_IN
34931: IFFALSE 34959
// if i [ 1 ] = b_ext_radio then
34933: LD_VAR 0 7
34937: PUSH
34938: LD_INT 1
34940: ARRAY
34941: PUSH
34942: LD_INT 22
34944: EQUAL
34945: IFFALSE 34957
// begin control := control_remote ;
34947: LD_ADDR_VAR 0 4
34951: PUSH
34952: LD_INT 2
34954: ST_TO_ADDR
// break ;
34955: GO 34959
// end ;
34957: GO 34930
34959: POP
34960: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34961: LD_VAR 0 1
34965: PPUSH
34966: LD_VAR 0 2
34970: PPUSH
34971: LD_VAR 0 3
34975: PPUSH
34976: LD_VAR 0 4
34980: PPUSH
34981: LD_VAR 0 5
34985: PPUSH
34986: CALL_OW 448
34990: IFFALSE 35025
// begin result := [ chassis , engine , control , weapon ] ;
34992: LD_ADDR_VAR 0 6
34996: PUSH
34997: LD_VAR 0 2
35001: PUSH
35002: LD_VAR 0 3
35006: PUSH
35007: LD_VAR 0 4
35011: PUSH
35012: LD_VAR 0 5
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: ST_TO_ADDR
// exit ;
35023: GO 35437
// end ; _chassis := AvailableChassisList ( factory ) ;
35025: LD_ADDR_VAR 0 9
35029: PUSH
35030: LD_VAR 0 1
35034: PPUSH
35035: CALL_OW 475
35039: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
35040: LD_ADDR_VAR 0 11
35044: PUSH
35045: LD_VAR 0 1
35049: PPUSH
35050: CALL_OW 476
35054: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
35055: LD_ADDR_VAR 0 12
35059: PUSH
35060: LD_VAR 0 1
35064: PPUSH
35065: CALL_OW 477
35069: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
35070: LD_ADDR_VAR 0 10
35074: PUSH
35075: LD_VAR 0 1
35079: PPUSH
35080: CALL_OW 478
35084: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
35085: LD_VAR 0 9
35089: NOT
35090: PUSH
35091: LD_VAR 0 11
35095: NOT
35096: OR
35097: PUSH
35098: LD_VAR 0 12
35102: NOT
35103: OR
35104: PUSH
35105: LD_VAR 0 10
35109: NOT
35110: OR
35111: IFFALSE 35146
// begin result := [ chassis , engine , control , weapon ] ;
35113: LD_ADDR_VAR 0 6
35117: PUSH
35118: LD_VAR 0 2
35122: PUSH
35123: LD_VAR 0 3
35127: PUSH
35128: LD_VAR 0 4
35132: PUSH
35133: LD_VAR 0 5
35137: PUSH
35138: EMPTY
35139: LIST
35140: LIST
35141: LIST
35142: LIST
35143: ST_TO_ADDR
// exit ;
35144: GO 35437
// end ; if not chassis in _chassis then
35146: LD_VAR 0 2
35150: PUSH
35151: LD_VAR 0 9
35155: IN
35156: NOT
35157: IFFALSE 35183
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
35159: LD_ADDR_VAR 0 2
35163: PUSH
35164: LD_VAR 0 9
35168: PUSH
35169: LD_INT 1
35171: PPUSH
35172: LD_VAR 0 9
35176: PPUSH
35177: CALL_OW 12
35181: ARRAY
35182: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
35183: LD_VAR 0 2
35187: PPUSH
35188: LD_VAR 0 3
35192: PPUSH
35193: CALL 35442 0 2
35197: NOT
35198: IFFALSE 35257
// repeat engine := _engine [ 1 ] ;
35200: LD_ADDR_VAR 0 3
35204: PUSH
35205: LD_VAR 0 11
35209: PUSH
35210: LD_INT 1
35212: ARRAY
35213: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
35214: LD_ADDR_VAR 0 11
35218: PUSH
35219: LD_VAR 0 11
35223: PPUSH
35224: LD_INT 1
35226: PPUSH
35227: CALL_OW 3
35231: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
35232: LD_VAR 0 2
35236: PPUSH
35237: LD_VAR 0 3
35241: PPUSH
35242: CALL 35442 0 2
35246: PUSH
35247: LD_VAR 0 11
35251: PUSH
35252: EMPTY
35253: EQUAL
35254: OR
35255: IFFALSE 35200
// if not control in _control then
35257: LD_VAR 0 4
35261: PUSH
35262: LD_VAR 0 12
35266: IN
35267: NOT
35268: IFFALSE 35294
// control := _control [ rand ( 1 , _control ) ] ;
35270: LD_ADDR_VAR 0 4
35274: PUSH
35275: LD_VAR 0 12
35279: PUSH
35280: LD_INT 1
35282: PPUSH
35283: LD_VAR 0 12
35287: PPUSH
35288: CALL_OW 12
35292: ARRAY
35293: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
35294: LD_VAR 0 2
35298: PPUSH
35299: LD_VAR 0 5
35303: PPUSH
35304: CALL 35662 0 2
35308: NOT
35309: IFFALSE 35368
// repeat weapon := _weapon [ 1 ] ;
35311: LD_ADDR_VAR 0 5
35315: PUSH
35316: LD_VAR 0 10
35320: PUSH
35321: LD_INT 1
35323: ARRAY
35324: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
35325: LD_ADDR_VAR 0 10
35329: PUSH
35330: LD_VAR 0 10
35334: PPUSH
35335: LD_INT 1
35337: PPUSH
35338: CALL_OW 3
35342: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
35343: LD_VAR 0 2
35347: PPUSH
35348: LD_VAR 0 5
35352: PPUSH
35353: CALL 35662 0 2
35357: PUSH
35358: LD_VAR 0 10
35362: PUSH
35363: EMPTY
35364: EQUAL
35365: OR
35366: IFFALSE 35311
// result := [ ] ;
35368: LD_ADDR_VAR 0 6
35372: PUSH
35373: EMPTY
35374: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35375: LD_VAR 0 1
35379: PPUSH
35380: LD_VAR 0 2
35384: PPUSH
35385: LD_VAR 0 3
35389: PPUSH
35390: LD_VAR 0 4
35394: PPUSH
35395: LD_VAR 0 5
35399: PPUSH
35400: CALL_OW 448
35404: IFFALSE 35437
// result := [ chassis , engine , control , weapon ] ;
35406: LD_ADDR_VAR 0 6
35410: PUSH
35411: LD_VAR 0 2
35415: PUSH
35416: LD_VAR 0 3
35420: PUSH
35421: LD_VAR 0 4
35425: PUSH
35426: LD_VAR 0 5
35430: PUSH
35431: EMPTY
35432: LIST
35433: LIST
35434: LIST
35435: LIST
35436: ST_TO_ADDR
// end ;
35437: LD_VAR 0 6
35441: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
35442: LD_INT 0
35444: PPUSH
// if not chassis or not engine then
35445: LD_VAR 0 1
35449: NOT
35450: PUSH
35451: LD_VAR 0 2
35455: NOT
35456: OR
35457: IFFALSE 35461
// exit ;
35459: GO 35657
// case engine of engine_solar :
35461: LD_VAR 0 2
35465: PUSH
35466: LD_INT 2
35468: DOUBLE
35469: EQUAL
35470: IFTRUE 35474
35472: GO 35512
35474: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
35475: LD_ADDR_VAR 0 3
35479: PUSH
35480: LD_INT 11
35482: PUSH
35483: LD_INT 12
35485: PUSH
35486: LD_INT 13
35488: PUSH
35489: LD_INT 14
35491: PUSH
35492: LD_INT 1
35494: PUSH
35495: LD_INT 2
35497: PUSH
35498: LD_INT 3
35500: PUSH
35501: EMPTY
35502: LIST
35503: LIST
35504: LIST
35505: LIST
35506: LIST
35507: LIST
35508: LIST
35509: ST_TO_ADDR
35510: GO 35641
35512: LD_INT 1
35514: DOUBLE
35515: EQUAL
35516: IFTRUE 35520
35518: GO 35582
35520: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
35521: LD_ADDR_VAR 0 3
35525: PUSH
35526: LD_INT 11
35528: PUSH
35529: LD_INT 12
35531: PUSH
35532: LD_INT 13
35534: PUSH
35535: LD_INT 14
35537: PUSH
35538: LD_INT 1
35540: PUSH
35541: LD_INT 2
35543: PUSH
35544: LD_INT 3
35546: PUSH
35547: LD_INT 4
35549: PUSH
35550: LD_INT 5
35552: PUSH
35553: LD_INT 21
35555: PUSH
35556: LD_INT 23
35558: PUSH
35559: LD_INT 22
35561: PUSH
35562: LD_INT 24
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: LIST
35569: LIST
35570: LIST
35571: LIST
35572: LIST
35573: LIST
35574: LIST
35575: LIST
35576: LIST
35577: LIST
35578: LIST
35579: ST_TO_ADDR
35580: GO 35641
35582: LD_INT 3
35584: DOUBLE
35585: EQUAL
35586: IFTRUE 35590
35588: GO 35640
35590: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35591: LD_ADDR_VAR 0 3
35595: PUSH
35596: LD_INT 13
35598: PUSH
35599: LD_INT 14
35601: PUSH
35602: LD_INT 2
35604: PUSH
35605: LD_INT 3
35607: PUSH
35608: LD_INT 4
35610: PUSH
35611: LD_INT 5
35613: PUSH
35614: LD_INT 21
35616: PUSH
35617: LD_INT 22
35619: PUSH
35620: LD_INT 23
35622: PUSH
35623: LD_INT 24
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: ST_TO_ADDR
35638: GO 35641
35640: POP
// result := ( chassis in result ) ;
35641: LD_ADDR_VAR 0 3
35645: PUSH
35646: LD_VAR 0 1
35650: PUSH
35651: LD_VAR 0 3
35655: IN
35656: ST_TO_ADDR
// end ;
35657: LD_VAR 0 3
35661: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
35662: LD_INT 0
35664: PPUSH
// if not chassis or not weapon then
35665: LD_VAR 0 1
35669: NOT
35670: PUSH
35671: LD_VAR 0 2
35675: NOT
35676: OR
35677: IFFALSE 35681
// exit ;
35679: GO 36743
// case weapon of us_machine_gun :
35681: LD_VAR 0 2
35685: PUSH
35686: LD_INT 2
35688: DOUBLE
35689: EQUAL
35690: IFTRUE 35694
35692: GO 35724
35694: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
35695: LD_ADDR_VAR 0 3
35699: PUSH
35700: LD_INT 1
35702: PUSH
35703: LD_INT 2
35705: PUSH
35706: LD_INT 3
35708: PUSH
35709: LD_INT 4
35711: PUSH
35712: LD_INT 5
35714: PUSH
35715: EMPTY
35716: LIST
35717: LIST
35718: LIST
35719: LIST
35720: LIST
35721: ST_TO_ADDR
35722: GO 36727
35724: LD_INT 3
35726: DOUBLE
35727: EQUAL
35728: IFTRUE 35732
35730: GO 35762
35732: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
35733: LD_ADDR_VAR 0 3
35737: PUSH
35738: LD_INT 1
35740: PUSH
35741: LD_INT 2
35743: PUSH
35744: LD_INT 3
35746: PUSH
35747: LD_INT 4
35749: PUSH
35750: LD_INT 5
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: LIST
35757: LIST
35758: LIST
35759: ST_TO_ADDR
35760: GO 36727
35762: LD_INT 11
35764: DOUBLE
35765: EQUAL
35766: IFTRUE 35770
35768: GO 35800
35770: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
35771: LD_ADDR_VAR 0 3
35775: PUSH
35776: LD_INT 1
35778: PUSH
35779: LD_INT 2
35781: PUSH
35782: LD_INT 3
35784: PUSH
35785: LD_INT 4
35787: PUSH
35788: LD_INT 5
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: LIST
35795: LIST
35796: LIST
35797: ST_TO_ADDR
35798: GO 36727
35800: LD_INT 4
35802: DOUBLE
35803: EQUAL
35804: IFTRUE 35808
35806: GO 35834
35808: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
35809: LD_ADDR_VAR 0 3
35813: PUSH
35814: LD_INT 2
35816: PUSH
35817: LD_INT 3
35819: PUSH
35820: LD_INT 4
35822: PUSH
35823: LD_INT 5
35825: PUSH
35826: EMPTY
35827: LIST
35828: LIST
35829: LIST
35830: LIST
35831: ST_TO_ADDR
35832: GO 36727
35834: LD_INT 5
35836: DOUBLE
35837: EQUAL
35838: IFTRUE 35842
35840: GO 35868
35842: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35843: LD_ADDR_VAR 0 3
35847: PUSH
35848: LD_INT 2
35850: PUSH
35851: LD_INT 3
35853: PUSH
35854: LD_INT 4
35856: PUSH
35857: LD_INT 5
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: ST_TO_ADDR
35866: GO 36727
35868: LD_INT 9
35870: DOUBLE
35871: EQUAL
35872: IFTRUE 35876
35874: GO 35902
35876: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35877: LD_ADDR_VAR 0 3
35881: PUSH
35882: LD_INT 2
35884: PUSH
35885: LD_INT 3
35887: PUSH
35888: LD_INT 4
35890: PUSH
35891: LD_INT 5
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: LIST
35898: LIST
35899: ST_TO_ADDR
35900: GO 36727
35902: LD_INT 7
35904: DOUBLE
35905: EQUAL
35906: IFTRUE 35910
35908: GO 35936
35910: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35911: LD_ADDR_VAR 0 3
35915: PUSH
35916: LD_INT 2
35918: PUSH
35919: LD_INT 3
35921: PUSH
35922: LD_INT 4
35924: PUSH
35925: LD_INT 5
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: LIST
35932: LIST
35933: ST_TO_ADDR
35934: GO 36727
35936: LD_INT 12
35938: DOUBLE
35939: EQUAL
35940: IFTRUE 35944
35942: GO 35970
35944: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35945: LD_ADDR_VAR 0 3
35949: PUSH
35950: LD_INT 2
35952: PUSH
35953: LD_INT 3
35955: PUSH
35956: LD_INT 4
35958: PUSH
35959: LD_INT 5
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: LIST
35966: LIST
35967: ST_TO_ADDR
35968: GO 36727
35970: LD_INT 13
35972: DOUBLE
35973: EQUAL
35974: IFTRUE 35978
35976: GO 36004
35978: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35979: LD_ADDR_VAR 0 3
35983: PUSH
35984: LD_INT 2
35986: PUSH
35987: LD_INT 3
35989: PUSH
35990: LD_INT 4
35992: PUSH
35993: LD_INT 5
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: LIST
36000: LIST
36001: ST_TO_ADDR
36002: GO 36727
36004: LD_INT 14
36006: DOUBLE
36007: EQUAL
36008: IFTRUE 36012
36010: GO 36030
36012: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
36013: LD_ADDR_VAR 0 3
36017: PUSH
36018: LD_INT 4
36020: PUSH
36021: LD_INT 5
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: ST_TO_ADDR
36028: GO 36727
36030: LD_INT 6
36032: DOUBLE
36033: EQUAL
36034: IFTRUE 36038
36036: GO 36056
36038: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
36039: LD_ADDR_VAR 0 3
36043: PUSH
36044: LD_INT 4
36046: PUSH
36047: LD_INT 5
36049: PUSH
36050: EMPTY
36051: LIST
36052: LIST
36053: ST_TO_ADDR
36054: GO 36727
36056: LD_INT 10
36058: DOUBLE
36059: EQUAL
36060: IFTRUE 36064
36062: GO 36082
36064: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
36065: LD_ADDR_VAR 0 3
36069: PUSH
36070: LD_INT 4
36072: PUSH
36073: LD_INT 5
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: ST_TO_ADDR
36080: GO 36727
36082: LD_INT 22
36084: DOUBLE
36085: EQUAL
36086: IFTRUE 36090
36088: GO 36116
36090: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
36091: LD_ADDR_VAR 0 3
36095: PUSH
36096: LD_INT 11
36098: PUSH
36099: LD_INT 12
36101: PUSH
36102: LD_INT 13
36104: PUSH
36105: LD_INT 14
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: LIST
36112: LIST
36113: ST_TO_ADDR
36114: GO 36727
36116: LD_INT 23
36118: DOUBLE
36119: EQUAL
36120: IFTRUE 36124
36122: GO 36150
36124: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
36125: LD_ADDR_VAR 0 3
36129: PUSH
36130: LD_INT 11
36132: PUSH
36133: LD_INT 12
36135: PUSH
36136: LD_INT 13
36138: PUSH
36139: LD_INT 14
36141: PUSH
36142: EMPTY
36143: LIST
36144: LIST
36145: LIST
36146: LIST
36147: ST_TO_ADDR
36148: GO 36727
36150: LD_INT 24
36152: DOUBLE
36153: EQUAL
36154: IFTRUE 36158
36156: GO 36184
36158: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
36159: LD_ADDR_VAR 0 3
36163: PUSH
36164: LD_INT 11
36166: PUSH
36167: LD_INT 12
36169: PUSH
36170: LD_INT 13
36172: PUSH
36173: LD_INT 14
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: LIST
36180: LIST
36181: ST_TO_ADDR
36182: GO 36727
36184: LD_INT 30
36186: DOUBLE
36187: EQUAL
36188: IFTRUE 36192
36190: GO 36218
36192: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
36193: LD_ADDR_VAR 0 3
36197: PUSH
36198: LD_INT 11
36200: PUSH
36201: LD_INT 12
36203: PUSH
36204: LD_INT 13
36206: PUSH
36207: LD_INT 14
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: LIST
36214: LIST
36215: ST_TO_ADDR
36216: GO 36727
36218: LD_INT 25
36220: DOUBLE
36221: EQUAL
36222: IFTRUE 36226
36224: GO 36244
36226: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
36227: LD_ADDR_VAR 0 3
36231: PUSH
36232: LD_INT 13
36234: PUSH
36235: LD_INT 14
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: ST_TO_ADDR
36242: GO 36727
36244: LD_INT 27
36246: DOUBLE
36247: EQUAL
36248: IFTRUE 36252
36250: GO 36270
36252: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
36253: LD_ADDR_VAR 0 3
36257: PUSH
36258: LD_INT 13
36260: PUSH
36261: LD_INT 14
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: ST_TO_ADDR
36268: GO 36727
36270: LD_EXP 43
36274: DOUBLE
36275: EQUAL
36276: IFTRUE 36280
36278: GO 36306
36280: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
36281: LD_ADDR_VAR 0 3
36285: PUSH
36286: LD_INT 11
36288: PUSH
36289: LD_INT 12
36291: PUSH
36292: LD_INT 13
36294: PUSH
36295: LD_INT 14
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: LIST
36302: LIST
36303: ST_TO_ADDR
36304: GO 36727
36306: LD_INT 28
36308: DOUBLE
36309: EQUAL
36310: IFTRUE 36314
36312: GO 36332
36314: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
36315: LD_ADDR_VAR 0 3
36319: PUSH
36320: LD_INT 13
36322: PUSH
36323: LD_INT 14
36325: PUSH
36326: EMPTY
36327: LIST
36328: LIST
36329: ST_TO_ADDR
36330: GO 36727
36332: LD_INT 29
36334: DOUBLE
36335: EQUAL
36336: IFTRUE 36340
36338: GO 36358
36340: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
36341: LD_ADDR_VAR 0 3
36345: PUSH
36346: LD_INT 13
36348: PUSH
36349: LD_INT 14
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: ST_TO_ADDR
36356: GO 36727
36358: LD_INT 31
36360: DOUBLE
36361: EQUAL
36362: IFTRUE 36366
36364: GO 36384
36366: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
36367: LD_ADDR_VAR 0 3
36371: PUSH
36372: LD_INT 13
36374: PUSH
36375: LD_INT 14
36377: PUSH
36378: EMPTY
36379: LIST
36380: LIST
36381: ST_TO_ADDR
36382: GO 36727
36384: LD_INT 26
36386: DOUBLE
36387: EQUAL
36388: IFTRUE 36392
36390: GO 36410
36392: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
36393: LD_ADDR_VAR 0 3
36397: PUSH
36398: LD_INT 13
36400: PUSH
36401: LD_INT 14
36403: PUSH
36404: EMPTY
36405: LIST
36406: LIST
36407: ST_TO_ADDR
36408: GO 36727
36410: LD_INT 42
36412: DOUBLE
36413: EQUAL
36414: IFTRUE 36418
36416: GO 36444
36418: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
36419: LD_ADDR_VAR 0 3
36423: PUSH
36424: LD_INT 21
36426: PUSH
36427: LD_INT 22
36429: PUSH
36430: LD_INT 23
36432: PUSH
36433: LD_INT 24
36435: PUSH
36436: EMPTY
36437: LIST
36438: LIST
36439: LIST
36440: LIST
36441: ST_TO_ADDR
36442: GO 36727
36444: LD_INT 43
36446: DOUBLE
36447: EQUAL
36448: IFTRUE 36452
36450: GO 36478
36452: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
36453: LD_ADDR_VAR 0 3
36457: PUSH
36458: LD_INT 21
36460: PUSH
36461: LD_INT 22
36463: PUSH
36464: LD_INT 23
36466: PUSH
36467: LD_INT 24
36469: PUSH
36470: EMPTY
36471: LIST
36472: LIST
36473: LIST
36474: LIST
36475: ST_TO_ADDR
36476: GO 36727
36478: LD_INT 44
36480: DOUBLE
36481: EQUAL
36482: IFTRUE 36486
36484: GO 36512
36486: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
36487: LD_ADDR_VAR 0 3
36491: PUSH
36492: LD_INT 21
36494: PUSH
36495: LD_INT 22
36497: PUSH
36498: LD_INT 23
36500: PUSH
36501: LD_INT 24
36503: PUSH
36504: EMPTY
36505: LIST
36506: LIST
36507: LIST
36508: LIST
36509: ST_TO_ADDR
36510: GO 36727
36512: LD_INT 45
36514: DOUBLE
36515: EQUAL
36516: IFTRUE 36520
36518: GO 36546
36520: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
36521: LD_ADDR_VAR 0 3
36525: PUSH
36526: LD_INT 21
36528: PUSH
36529: LD_INT 22
36531: PUSH
36532: LD_INT 23
36534: PUSH
36535: LD_INT 24
36537: PUSH
36538: EMPTY
36539: LIST
36540: LIST
36541: LIST
36542: LIST
36543: ST_TO_ADDR
36544: GO 36727
36546: LD_INT 49
36548: DOUBLE
36549: EQUAL
36550: IFTRUE 36554
36552: GO 36580
36554: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
36555: LD_ADDR_VAR 0 3
36559: PUSH
36560: LD_INT 21
36562: PUSH
36563: LD_INT 22
36565: PUSH
36566: LD_INT 23
36568: PUSH
36569: LD_INT 24
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: LIST
36576: LIST
36577: ST_TO_ADDR
36578: GO 36727
36580: LD_INT 51
36582: DOUBLE
36583: EQUAL
36584: IFTRUE 36588
36586: GO 36614
36588: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
36589: LD_ADDR_VAR 0 3
36593: PUSH
36594: LD_INT 21
36596: PUSH
36597: LD_INT 22
36599: PUSH
36600: LD_INT 23
36602: PUSH
36603: LD_INT 24
36605: PUSH
36606: EMPTY
36607: LIST
36608: LIST
36609: LIST
36610: LIST
36611: ST_TO_ADDR
36612: GO 36727
36614: LD_INT 52
36616: DOUBLE
36617: EQUAL
36618: IFTRUE 36622
36620: GO 36648
36622: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
36623: LD_ADDR_VAR 0 3
36627: PUSH
36628: LD_INT 21
36630: PUSH
36631: LD_INT 22
36633: PUSH
36634: LD_INT 23
36636: PUSH
36637: LD_INT 24
36639: PUSH
36640: EMPTY
36641: LIST
36642: LIST
36643: LIST
36644: LIST
36645: ST_TO_ADDR
36646: GO 36727
36648: LD_INT 53
36650: DOUBLE
36651: EQUAL
36652: IFTRUE 36656
36654: GO 36674
36656: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
36657: LD_ADDR_VAR 0 3
36661: PUSH
36662: LD_INT 23
36664: PUSH
36665: LD_INT 24
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: ST_TO_ADDR
36672: GO 36727
36674: LD_INT 46
36676: DOUBLE
36677: EQUAL
36678: IFTRUE 36682
36680: GO 36700
36682: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
36683: LD_ADDR_VAR 0 3
36687: PUSH
36688: LD_INT 23
36690: PUSH
36691: LD_INT 24
36693: PUSH
36694: EMPTY
36695: LIST
36696: LIST
36697: ST_TO_ADDR
36698: GO 36727
36700: LD_INT 47
36702: DOUBLE
36703: EQUAL
36704: IFTRUE 36708
36706: GO 36726
36708: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36709: LD_ADDR_VAR 0 3
36713: PUSH
36714: LD_INT 23
36716: PUSH
36717: LD_INT 24
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: ST_TO_ADDR
36724: GO 36727
36726: POP
// result := ( chassis in result ) ;
36727: LD_ADDR_VAR 0 3
36731: PUSH
36732: LD_VAR 0 1
36736: PUSH
36737: LD_VAR 0 3
36741: IN
36742: ST_TO_ADDR
// end ;
36743: LD_VAR 0 3
36747: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
36748: LD_INT 0
36750: PPUSH
36751: PPUSH
36752: PPUSH
36753: PPUSH
36754: PPUSH
36755: PPUSH
36756: PPUSH
// result := array ;
36757: LD_ADDR_VAR 0 5
36761: PUSH
36762: LD_VAR 0 1
36766: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
36767: LD_VAR 0 1
36771: NOT
36772: PUSH
36773: LD_VAR 0 2
36777: NOT
36778: OR
36779: PUSH
36780: LD_VAR 0 3
36784: NOT
36785: OR
36786: PUSH
36787: LD_VAR 0 2
36791: PUSH
36792: LD_VAR 0 1
36796: GREATER
36797: OR
36798: PUSH
36799: LD_VAR 0 3
36803: PUSH
36804: LD_VAR 0 1
36808: GREATER
36809: OR
36810: IFFALSE 36814
// exit ;
36812: GO 37110
// if direction then
36814: LD_VAR 0 4
36818: IFFALSE 36882
// begin d := 1 ;
36820: LD_ADDR_VAR 0 9
36824: PUSH
36825: LD_INT 1
36827: ST_TO_ADDR
// if i_from > i_to then
36828: LD_VAR 0 2
36832: PUSH
36833: LD_VAR 0 3
36837: GREATER
36838: IFFALSE 36864
// length := ( array - i_from ) + i_to else
36840: LD_ADDR_VAR 0 11
36844: PUSH
36845: LD_VAR 0 1
36849: PUSH
36850: LD_VAR 0 2
36854: MINUS
36855: PUSH
36856: LD_VAR 0 3
36860: PLUS
36861: ST_TO_ADDR
36862: GO 36880
// length := i_to - i_from ;
36864: LD_ADDR_VAR 0 11
36868: PUSH
36869: LD_VAR 0 3
36873: PUSH
36874: LD_VAR 0 2
36878: MINUS
36879: ST_TO_ADDR
// end else
36880: GO 36943
// begin d := - 1 ;
36882: LD_ADDR_VAR 0 9
36886: PUSH
36887: LD_INT 1
36889: NEG
36890: ST_TO_ADDR
// if i_from > i_to then
36891: LD_VAR 0 2
36895: PUSH
36896: LD_VAR 0 3
36900: GREATER
36901: IFFALSE 36921
// length := i_from - i_to else
36903: LD_ADDR_VAR 0 11
36907: PUSH
36908: LD_VAR 0 2
36912: PUSH
36913: LD_VAR 0 3
36917: MINUS
36918: ST_TO_ADDR
36919: GO 36943
// length := ( array - i_to ) + i_from ;
36921: LD_ADDR_VAR 0 11
36925: PUSH
36926: LD_VAR 0 1
36930: PUSH
36931: LD_VAR 0 3
36935: MINUS
36936: PUSH
36937: LD_VAR 0 2
36941: PLUS
36942: ST_TO_ADDR
// end ; if not length then
36943: LD_VAR 0 11
36947: NOT
36948: IFFALSE 36952
// exit ;
36950: GO 37110
// tmp := array ;
36952: LD_ADDR_VAR 0 10
36956: PUSH
36957: LD_VAR 0 1
36961: ST_TO_ADDR
// for i = 1 to length do
36962: LD_ADDR_VAR 0 6
36966: PUSH
36967: DOUBLE
36968: LD_INT 1
36970: DEC
36971: ST_TO_ADDR
36972: LD_VAR 0 11
36976: PUSH
36977: FOR_TO
36978: IFFALSE 37098
// begin for j = 1 to array do
36980: LD_ADDR_VAR 0 7
36984: PUSH
36985: DOUBLE
36986: LD_INT 1
36988: DEC
36989: ST_TO_ADDR
36990: LD_VAR 0 1
36994: PUSH
36995: FOR_TO
36996: IFFALSE 37084
// begin k := j + d ;
36998: LD_ADDR_VAR 0 8
37002: PUSH
37003: LD_VAR 0 7
37007: PUSH
37008: LD_VAR 0 9
37012: PLUS
37013: ST_TO_ADDR
// if k > array then
37014: LD_VAR 0 8
37018: PUSH
37019: LD_VAR 0 1
37023: GREATER
37024: IFFALSE 37034
// k := 1 ;
37026: LD_ADDR_VAR 0 8
37030: PUSH
37031: LD_INT 1
37033: ST_TO_ADDR
// if not k then
37034: LD_VAR 0 8
37038: NOT
37039: IFFALSE 37051
// k := array ;
37041: LD_ADDR_VAR 0 8
37045: PUSH
37046: LD_VAR 0 1
37050: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
37051: LD_ADDR_VAR 0 10
37055: PUSH
37056: LD_VAR 0 10
37060: PPUSH
37061: LD_VAR 0 8
37065: PPUSH
37066: LD_VAR 0 1
37070: PUSH
37071: LD_VAR 0 7
37075: ARRAY
37076: PPUSH
37077: CALL_OW 1
37081: ST_TO_ADDR
// end ;
37082: GO 36995
37084: POP
37085: POP
// array := tmp ;
37086: LD_ADDR_VAR 0 1
37090: PUSH
37091: LD_VAR 0 10
37095: ST_TO_ADDR
// end ;
37096: GO 36977
37098: POP
37099: POP
// result := array ;
37100: LD_ADDR_VAR 0 5
37104: PUSH
37105: LD_VAR 0 1
37109: ST_TO_ADDR
// end ;
37110: LD_VAR 0 5
37114: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
37115: LD_INT 0
37117: PPUSH
37118: PPUSH
// result := 0 ;
37119: LD_ADDR_VAR 0 3
37123: PUSH
37124: LD_INT 0
37126: ST_TO_ADDR
// if not array or not value in array then
37127: LD_VAR 0 1
37131: NOT
37132: PUSH
37133: LD_VAR 0 2
37137: PUSH
37138: LD_VAR 0 1
37142: IN
37143: NOT
37144: OR
37145: IFFALSE 37149
// exit ;
37147: GO 37203
// for i = 1 to array do
37149: LD_ADDR_VAR 0 4
37153: PUSH
37154: DOUBLE
37155: LD_INT 1
37157: DEC
37158: ST_TO_ADDR
37159: LD_VAR 0 1
37163: PUSH
37164: FOR_TO
37165: IFFALSE 37201
// if value = array [ i ] then
37167: LD_VAR 0 2
37171: PUSH
37172: LD_VAR 0 1
37176: PUSH
37177: LD_VAR 0 4
37181: ARRAY
37182: EQUAL
37183: IFFALSE 37199
// begin result := i ;
37185: LD_ADDR_VAR 0 3
37189: PUSH
37190: LD_VAR 0 4
37194: ST_TO_ADDR
// exit ;
37195: POP
37196: POP
37197: GO 37203
// end ;
37199: GO 37164
37201: POP
37202: POP
// end ;
37203: LD_VAR 0 3
37207: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
37208: LD_INT 0
37210: PPUSH
// vc_chassis := chassis ;
37211: LD_ADDR_OWVAR 37
37215: PUSH
37216: LD_VAR 0 1
37220: ST_TO_ADDR
// vc_engine := engine ;
37221: LD_ADDR_OWVAR 39
37225: PUSH
37226: LD_VAR 0 2
37230: ST_TO_ADDR
// vc_control := control ;
37231: LD_ADDR_OWVAR 38
37235: PUSH
37236: LD_VAR 0 3
37240: ST_TO_ADDR
// vc_weapon := weapon ;
37241: LD_ADDR_OWVAR 40
37245: PUSH
37246: LD_VAR 0 4
37250: ST_TO_ADDR
// vc_fuel_battery := fuel ;
37251: LD_ADDR_OWVAR 41
37255: PUSH
37256: LD_VAR 0 5
37260: ST_TO_ADDR
// end ;
37261: LD_VAR 0 6
37265: RET
// export function WantPlant ( unit ) ; var task ; begin
37266: LD_INT 0
37268: PPUSH
37269: PPUSH
// result := false ;
37270: LD_ADDR_VAR 0 2
37274: PUSH
37275: LD_INT 0
37277: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
37278: LD_ADDR_VAR 0 3
37282: PUSH
37283: LD_VAR 0 1
37287: PPUSH
37288: CALL_OW 437
37292: ST_TO_ADDR
// if task then
37293: LD_VAR 0 3
37297: IFFALSE 37325
// if task [ 1 ] [ 1 ] = p then
37299: LD_VAR 0 3
37303: PUSH
37304: LD_INT 1
37306: ARRAY
37307: PUSH
37308: LD_INT 1
37310: ARRAY
37311: PUSH
37312: LD_STRING p
37314: EQUAL
37315: IFFALSE 37325
// result := true ;
37317: LD_ADDR_VAR 0 2
37321: PUSH
37322: LD_INT 1
37324: ST_TO_ADDR
// end ;
37325: LD_VAR 0 2
37329: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
37330: LD_INT 0
37332: PPUSH
37333: PPUSH
37334: PPUSH
37335: PPUSH
// if pos < 1 then
37336: LD_VAR 0 2
37340: PUSH
37341: LD_INT 1
37343: LESS
37344: IFFALSE 37348
// exit ;
37346: GO 37651
// if pos = 1 then
37348: LD_VAR 0 2
37352: PUSH
37353: LD_INT 1
37355: EQUAL
37356: IFFALSE 37389
// result := Replace ( arr , pos [ 1 ] , value ) else
37358: LD_ADDR_VAR 0 4
37362: PUSH
37363: LD_VAR 0 1
37367: PPUSH
37368: LD_VAR 0 2
37372: PUSH
37373: LD_INT 1
37375: ARRAY
37376: PPUSH
37377: LD_VAR 0 3
37381: PPUSH
37382: CALL_OW 1
37386: ST_TO_ADDR
37387: GO 37651
// begin tmp := arr ;
37389: LD_ADDR_VAR 0 6
37393: PUSH
37394: LD_VAR 0 1
37398: ST_TO_ADDR
// s_arr := [ tmp ] ;
37399: LD_ADDR_VAR 0 7
37403: PUSH
37404: LD_VAR 0 6
37408: PUSH
37409: EMPTY
37410: LIST
37411: ST_TO_ADDR
// for i = 1 to pos - 1 do
37412: LD_ADDR_VAR 0 5
37416: PUSH
37417: DOUBLE
37418: LD_INT 1
37420: DEC
37421: ST_TO_ADDR
37422: LD_VAR 0 2
37426: PUSH
37427: LD_INT 1
37429: MINUS
37430: PUSH
37431: FOR_TO
37432: IFFALSE 37477
// begin tmp := tmp [ pos [ i ] ] ;
37434: LD_ADDR_VAR 0 6
37438: PUSH
37439: LD_VAR 0 6
37443: PUSH
37444: LD_VAR 0 2
37448: PUSH
37449: LD_VAR 0 5
37453: ARRAY
37454: ARRAY
37455: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
37456: LD_ADDR_VAR 0 7
37460: PUSH
37461: LD_VAR 0 7
37465: PUSH
37466: LD_VAR 0 6
37470: PUSH
37471: EMPTY
37472: LIST
37473: ADD
37474: ST_TO_ADDR
// end ;
37475: GO 37431
37477: POP
37478: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
37479: LD_ADDR_VAR 0 6
37483: PUSH
37484: LD_VAR 0 6
37488: PPUSH
37489: LD_VAR 0 2
37493: PUSH
37494: LD_VAR 0 2
37498: ARRAY
37499: PPUSH
37500: LD_VAR 0 3
37504: PPUSH
37505: CALL_OW 1
37509: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
37510: LD_ADDR_VAR 0 7
37514: PUSH
37515: LD_VAR 0 7
37519: PPUSH
37520: LD_VAR 0 7
37524: PPUSH
37525: LD_VAR 0 6
37529: PPUSH
37530: CALL_OW 1
37534: ST_TO_ADDR
// for i = s_arr downto 2 do
37535: LD_ADDR_VAR 0 5
37539: PUSH
37540: DOUBLE
37541: LD_VAR 0 7
37545: INC
37546: ST_TO_ADDR
37547: LD_INT 2
37549: PUSH
37550: FOR_DOWNTO
37551: IFFALSE 37635
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
37553: LD_ADDR_VAR 0 6
37557: PUSH
37558: LD_VAR 0 7
37562: PUSH
37563: LD_VAR 0 5
37567: PUSH
37568: LD_INT 1
37570: MINUS
37571: ARRAY
37572: PPUSH
37573: LD_VAR 0 2
37577: PUSH
37578: LD_VAR 0 5
37582: PUSH
37583: LD_INT 1
37585: MINUS
37586: ARRAY
37587: PPUSH
37588: LD_VAR 0 7
37592: PUSH
37593: LD_VAR 0 5
37597: ARRAY
37598: PPUSH
37599: CALL_OW 1
37603: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
37604: LD_ADDR_VAR 0 7
37608: PUSH
37609: LD_VAR 0 7
37613: PPUSH
37614: LD_VAR 0 5
37618: PUSH
37619: LD_INT 1
37621: MINUS
37622: PPUSH
37623: LD_VAR 0 6
37627: PPUSH
37628: CALL_OW 1
37632: ST_TO_ADDR
// end ;
37633: GO 37550
37635: POP
37636: POP
// result := s_arr [ 1 ] ;
37637: LD_ADDR_VAR 0 4
37641: PUSH
37642: LD_VAR 0 7
37646: PUSH
37647: LD_INT 1
37649: ARRAY
37650: ST_TO_ADDR
// end ; end ;
37651: LD_VAR 0 4
37655: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
37656: LD_INT 0
37658: PPUSH
37659: PPUSH
// if not list then
37660: LD_VAR 0 1
37664: NOT
37665: IFFALSE 37669
// exit ;
37667: GO 37760
// i := list [ pos1 ] ;
37669: LD_ADDR_VAR 0 5
37673: PUSH
37674: LD_VAR 0 1
37678: PUSH
37679: LD_VAR 0 2
37683: ARRAY
37684: ST_TO_ADDR
// if not i then
37685: LD_VAR 0 5
37689: NOT
37690: IFFALSE 37694
// exit ;
37692: GO 37760
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
37694: LD_ADDR_VAR 0 1
37698: PUSH
37699: LD_VAR 0 1
37703: PPUSH
37704: LD_VAR 0 2
37708: PPUSH
37709: LD_VAR 0 1
37713: PUSH
37714: LD_VAR 0 3
37718: ARRAY
37719: PPUSH
37720: CALL_OW 1
37724: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
37725: LD_ADDR_VAR 0 1
37729: PUSH
37730: LD_VAR 0 1
37734: PPUSH
37735: LD_VAR 0 3
37739: PPUSH
37740: LD_VAR 0 5
37744: PPUSH
37745: CALL_OW 1
37749: ST_TO_ADDR
// result := list ;
37750: LD_ADDR_VAR 0 4
37754: PUSH
37755: LD_VAR 0 1
37759: ST_TO_ADDR
// end ;
37760: LD_VAR 0 4
37764: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
37765: LD_INT 0
37767: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
37768: LD_ADDR_VAR 0 5
37772: PUSH
37773: LD_VAR 0 1
37777: PPUSH
37778: CALL_OW 250
37782: PPUSH
37783: LD_VAR 0 1
37787: PPUSH
37788: CALL_OW 251
37792: PPUSH
37793: LD_VAR 0 2
37797: PPUSH
37798: LD_VAR 0 3
37802: PPUSH
37803: LD_VAR 0 4
37807: PPUSH
37808: CALL 37818 0 5
37812: ST_TO_ADDR
// end ;
37813: LD_VAR 0 5
37817: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37818: LD_INT 0
37820: PPUSH
37821: PPUSH
37822: PPUSH
37823: PPUSH
// if not list then
37824: LD_VAR 0 3
37828: NOT
37829: IFFALSE 37833
// exit ;
37831: GO 38221
// result := [ ] ;
37833: LD_ADDR_VAR 0 6
37837: PUSH
37838: EMPTY
37839: ST_TO_ADDR
// for i in list do
37840: LD_ADDR_VAR 0 7
37844: PUSH
37845: LD_VAR 0 3
37849: PUSH
37850: FOR_IN
37851: IFFALSE 38053
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37853: LD_ADDR_VAR 0 9
37857: PUSH
37858: LD_VAR 0 7
37862: PPUSH
37863: LD_VAR 0 1
37867: PPUSH
37868: LD_VAR 0 2
37872: PPUSH
37873: CALL_OW 297
37877: ST_TO_ADDR
// if not result then
37878: LD_VAR 0 6
37882: NOT
37883: IFFALSE 37909
// result := [ [ i , tmp ] ] else
37885: LD_ADDR_VAR 0 6
37889: PUSH
37890: LD_VAR 0 7
37894: PUSH
37895: LD_VAR 0 9
37899: PUSH
37900: EMPTY
37901: LIST
37902: LIST
37903: PUSH
37904: EMPTY
37905: LIST
37906: ST_TO_ADDR
37907: GO 38051
// begin if result [ result ] [ 2 ] < tmp then
37909: LD_VAR 0 6
37913: PUSH
37914: LD_VAR 0 6
37918: ARRAY
37919: PUSH
37920: LD_INT 2
37922: ARRAY
37923: PUSH
37924: LD_VAR 0 9
37928: LESS
37929: IFFALSE 37971
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37931: LD_ADDR_VAR 0 6
37935: PUSH
37936: LD_VAR 0 6
37940: PPUSH
37941: LD_VAR 0 6
37945: PUSH
37946: LD_INT 1
37948: PLUS
37949: PPUSH
37950: LD_VAR 0 7
37954: PUSH
37955: LD_VAR 0 9
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: PPUSH
37964: CALL_OW 2
37968: ST_TO_ADDR
37969: GO 38051
// for j = 1 to result do
37971: LD_ADDR_VAR 0 8
37975: PUSH
37976: DOUBLE
37977: LD_INT 1
37979: DEC
37980: ST_TO_ADDR
37981: LD_VAR 0 6
37985: PUSH
37986: FOR_TO
37987: IFFALSE 38049
// begin if tmp < result [ j ] [ 2 ] then
37989: LD_VAR 0 9
37993: PUSH
37994: LD_VAR 0 6
37998: PUSH
37999: LD_VAR 0 8
38003: ARRAY
38004: PUSH
38005: LD_INT 2
38007: ARRAY
38008: LESS
38009: IFFALSE 38047
// begin result := Insert ( result , j , [ i , tmp ] ) ;
38011: LD_ADDR_VAR 0 6
38015: PUSH
38016: LD_VAR 0 6
38020: PPUSH
38021: LD_VAR 0 8
38025: PPUSH
38026: LD_VAR 0 7
38030: PUSH
38031: LD_VAR 0 9
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: PPUSH
38040: CALL_OW 2
38044: ST_TO_ADDR
// break ;
38045: GO 38049
// end ; end ;
38047: GO 37986
38049: POP
38050: POP
// end ; end ;
38051: GO 37850
38053: POP
38054: POP
// if result and not asc then
38055: LD_VAR 0 6
38059: PUSH
38060: LD_VAR 0 4
38064: NOT
38065: AND
38066: IFFALSE 38141
// begin tmp := result ;
38068: LD_ADDR_VAR 0 9
38072: PUSH
38073: LD_VAR 0 6
38077: ST_TO_ADDR
// for i = tmp downto 1 do
38078: LD_ADDR_VAR 0 7
38082: PUSH
38083: DOUBLE
38084: LD_VAR 0 9
38088: INC
38089: ST_TO_ADDR
38090: LD_INT 1
38092: PUSH
38093: FOR_DOWNTO
38094: IFFALSE 38139
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
38096: LD_ADDR_VAR 0 6
38100: PUSH
38101: LD_VAR 0 6
38105: PPUSH
38106: LD_VAR 0 9
38110: PUSH
38111: LD_VAR 0 7
38115: MINUS
38116: PUSH
38117: LD_INT 1
38119: PLUS
38120: PPUSH
38121: LD_VAR 0 9
38125: PUSH
38126: LD_VAR 0 7
38130: ARRAY
38131: PPUSH
38132: CALL_OW 1
38136: ST_TO_ADDR
38137: GO 38093
38139: POP
38140: POP
// end ; tmp := [ ] ;
38141: LD_ADDR_VAR 0 9
38145: PUSH
38146: EMPTY
38147: ST_TO_ADDR
// if mode then
38148: LD_VAR 0 5
38152: IFFALSE 38221
// begin for i = 1 to result do
38154: LD_ADDR_VAR 0 7
38158: PUSH
38159: DOUBLE
38160: LD_INT 1
38162: DEC
38163: ST_TO_ADDR
38164: LD_VAR 0 6
38168: PUSH
38169: FOR_TO
38170: IFFALSE 38209
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
38172: LD_ADDR_VAR 0 9
38176: PUSH
38177: LD_VAR 0 9
38181: PPUSH
38182: LD_VAR 0 7
38186: PPUSH
38187: LD_VAR 0 6
38191: PUSH
38192: LD_VAR 0 7
38196: ARRAY
38197: PUSH
38198: LD_INT 1
38200: ARRAY
38201: PPUSH
38202: CALL_OW 1
38206: ST_TO_ADDR
38207: GO 38169
38209: POP
38210: POP
// result := tmp ;
38211: LD_ADDR_VAR 0 6
38215: PUSH
38216: LD_VAR 0 9
38220: ST_TO_ADDR
// end ; end ;
38221: LD_VAR 0 6
38225: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
38226: LD_INT 0
38228: PPUSH
38229: PPUSH
38230: PPUSH
38231: PPUSH
38232: PPUSH
38233: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
38234: LD_ADDR_VAR 0 5
38238: PUSH
38239: LD_INT 0
38241: PUSH
38242: LD_INT 0
38244: PUSH
38245: LD_INT 0
38247: PUSH
38248: EMPTY
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: ST_TO_ADDR
// if not x or not y then
38256: LD_VAR 0 2
38260: NOT
38261: PUSH
38262: LD_VAR 0 3
38266: NOT
38267: OR
38268: IFFALSE 38272
// exit ;
38270: GO 39924
// if not range then
38272: LD_VAR 0 4
38276: NOT
38277: IFFALSE 38287
// range := 10 ;
38279: LD_ADDR_VAR 0 4
38283: PUSH
38284: LD_INT 10
38286: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38287: LD_ADDR_VAR 0 8
38291: PUSH
38292: LD_INT 81
38294: PUSH
38295: LD_VAR 0 1
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: PUSH
38304: LD_INT 92
38306: PUSH
38307: LD_VAR 0 2
38311: PUSH
38312: LD_VAR 0 3
38316: PUSH
38317: LD_VAR 0 4
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: LIST
38326: LIST
38327: PUSH
38328: LD_INT 3
38330: PUSH
38331: LD_INT 21
38333: PUSH
38334: LD_INT 3
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: LIST
38349: PPUSH
38350: CALL_OW 69
38354: ST_TO_ADDR
// if not tmp then
38355: LD_VAR 0 8
38359: NOT
38360: IFFALSE 38364
// exit ;
38362: GO 39924
// for i in tmp do
38364: LD_ADDR_VAR 0 6
38368: PUSH
38369: LD_VAR 0 8
38373: PUSH
38374: FOR_IN
38375: IFFALSE 39899
// begin points := [ 0 , 0 , 0 ] ;
38377: LD_ADDR_VAR 0 9
38381: PUSH
38382: LD_INT 0
38384: PUSH
38385: LD_INT 0
38387: PUSH
38388: LD_INT 0
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: LIST
38395: ST_TO_ADDR
// bpoints := 1 ;
38396: LD_ADDR_VAR 0 10
38400: PUSH
38401: LD_INT 1
38403: ST_TO_ADDR
// case GetType ( i ) of unit_human :
38404: LD_VAR 0 6
38408: PPUSH
38409: CALL_OW 247
38413: PUSH
38414: LD_INT 1
38416: DOUBLE
38417: EQUAL
38418: IFTRUE 38422
38420: GO 39000
38422: POP
// begin if GetClass ( i ) = 1 then
38423: LD_VAR 0 6
38427: PPUSH
38428: CALL_OW 257
38432: PUSH
38433: LD_INT 1
38435: EQUAL
38436: IFFALSE 38457
// points := [ 10 , 5 , 3 ] ;
38438: LD_ADDR_VAR 0 9
38442: PUSH
38443: LD_INT 10
38445: PUSH
38446: LD_INT 5
38448: PUSH
38449: LD_INT 3
38451: PUSH
38452: EMPTY
38453: LIST
38454: LIST
38455: LIST
38456: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
38457: LD_VAR 0 6
38461: PPUSH
38462: CALL_OW 257
38466: PUSH
38467: LD_INT 2
38469: PUSH
38470: LD_INT 3
38472: PUSH
38473: LD_INT 4
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: LIST
38480: IN
38481: IFFALSE 38502
// points := [ 3 , 2 , 1 ] ;
38483: LD_ADDR_VAR 0 9
38487: PUSH
38488: LD_INT 3
38490: PUSH
38491: LD_INT 2
38493: PUSH
38494: LD_INT 1
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: LIST
38501: ST_TO_ADDR
// if GetClass ( i ) = 5 then
38502: LD_VAR 0 6
38506: PPUSH
38507: CALL_OW 257
38511: PUSH
38512: LD_INT 5
38514: EQUAL
38515: IFFALSE 38536
// points := [ 130 , 5 , 2 ] ;
38517: LD_ADDR_VAR 0 9
38521: PUSH
38522: LD_INT 130
38524: PUSH
38525: LD_INT 5
38527: PUSH
38528: LD_INT 2
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: LIST
38535: ST_TO_ADDR
// if GetClass ( i ) = 8 then
38536: LD_VAR 0 6
38540: PPUSH
38541: CALL_OW 257
38545: PUSH
38546: LD_INT 8
38548: EQUAL
38549: IFFALSE 38570
// points := [ 35 , 35 , 30 ] ;
38551: LD_ADDR_VAR 0 9
38555: PUSH
38556: LD_INT 35
38558: PUSH
38559: LD_INT 35
38561: PUSH
38562: LD_INT 30
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: LIST
38569: ST_TO_ADDR
// if GetClass ( i ) = 9 then
38570: LD_VAR 0 6
38574: PPUSH
38575: CALL_OW 257
38579: PUSH
38580: LD_INT 9
38582: EQUAL
38583: IFFALSE 38604
// points := [ 20 , 55 , 40 ] ;
38585: LD_ADDR_VAR 0 9
38589: PUSH
38590: LD_INT 20
38592: PUSH
38593: LD_INT 55
38595: PUSH
38596: LD_INT 40
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: LIST
38603: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
38604: LD_VAR 0 6
38608: PPUSH
38609: CALL_OW 257
38613: PUSH
38614: LD_INT 12
38616: PUSH
38617: LD_INT 16
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: IN
38624: IFFALSE 38645
// points := [ 5 , 3 , 2 ] ;
38626: LD_ADDR_VAR 0 9
38630: PUSH
38631: LD_INT 5
38633: PUSH
38634: LD_INT 3
38636: PUSH
38637: LD_INT 2
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: LIST
38644: ST_TO_ADDR
// if GetClass ( i ) = 17 then
38645: LD_VAR 0 6
38649: PPUSH
38650: CALL_OW 257
38654: PUSH
38655: LD_INT 17
38657: EQUAL
38658: IFFALSE 38679
// points := [ 100 , 50 , 75 ] ;
38660: LD_ADDR_VAR 0 9
38664: PUSH
38665: LD_INT 100
38667: PUSH
38668: LD_INT 50
38670: PUSH
38671: LD_INT 75
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: LIST
38678: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38679: LD_VAR 0 6
38683: PPUSH
38684: CALL_OW 257
38688: PUSH
38689: LD_INT 15
38691: EQUAL
38692: IFFALSE 38713
// points := [ 10 , 5 , 3 ] ;
38694: LD_ADDR_VAR 0 9
38698: PUSH
38699: LD_INT 10
38701: PUSH
38702: LD_INT 5
38704: PUSH
38705: LD_INT 3
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: LIST
38712: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38713: LD_VAR 0 6
38717: PPUSH
38718: CALL_OW 257
38722: PUSH
38723: LD_INT 14
38725: EQUAL
38726: IFFALSE 38747
// points := [ 10 , 0 , 0 ] ;
38728: LD_ADDR_VAR 0 9
38732: PUSH
38733: LD_INT 10
38735: PUSH
38736: LD_INT 0
38738: PUSH
38739: LD_INT 0
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: LIST
38746: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38747: LD_VAR 0 6
38751: PPUSH
38752: CALL_OW 257
38756: PUSH
38757: LD_INT 11
38759: EQUAL
38760: IFFALSE 38781
// points := [ 30 , 10 , 5 ] ;
38762: LD_ADDR_VAR 0 9
38766: PUSH
38767: LD_INT 30
38769: PUSH
38770: LD_INT 10
38772: PUSH
38773: LD_INT 5
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: LIST
38780: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38781: LD_VAR 0 1
38785: PPUSH
38786: LD_INT 5
38788: PPUSH
38789: CALL_OW 321
38793: PUSH
38794: LD_INT 2
38796: EQUAL
38797: IFFALSE 38814
// bpoints := bpoints * 1.8 ;
38799: LD_ADDR_VAR 0 10
38803: PUSH
38804: LD_VAR 0 10
38808: PUSH
38809: LD_REAL  1.80000000000000E+0000
38812: MUL
38813: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38814: LD_VAR 0 6
38818: PPUSH
38819: CALL_OW 257
38823: PUSH
38824: LD_INT 1
38826: PUSH
38827: LD_INT 2
38829: PUSH
38830: LD_INT 3
38832: PUSH
38833: LD_INT 4
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: IN
38842: PUSH
38843: LD_VAR 0 1
38847: PPUSH
38848: LD_INT 51
38850: PPUSH
38851: CALL_OW 321
38855: PUSH
38856: LD_INT 2
38858: EQUAL
38859: AND
38860: IFFALSE 38877
// bpoints := bpoints * 1.2 ;
38862: LD_ADDR_VAR 0 10
38866: PUSH
38867: LD_VAR 0 10
38871: PUSH
38872: LD_REAL  1.20000000000000E+0000
38875: MUL
38876: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38877: LD_VAR 0 6
38881: PPUSH
38882: CALL_OW 257
38886: PUSH
38887: LD_INT 5
38889: PUSH
38890: LD_INT 7
38892: PUSH
38893: LD_INT 9
38895: PUSH
38896: EMPTY
38897: LIST
38898: LIST
38899: LIST
38900: IN
38901: PUSH
38902: LD_VAR 0 1
38906: PPUSH
38907: LD_INT 52
38909: PPUSH
38910: CALL_OW 321
38914: PUSH
38915: LD_INT 2
38917: EQUAL
38918: AND
38919: IFFALSE 38936
// bpoints := bpoints * 1.5 ;
38921: LD_ADDR_VAR 0 10
38925: PUSH
38926: LD_VAR 0 10
38930: PUSH
38931: LD_REAL  1.50000000000000E+0000
38934: MUL
38935: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38936: LD_VAR 0 1
38940: PPUSH
38941: LD_INT 66
38943: PPUSH
38944: CALL_OW 321
38948: PUSH
38949: LD_INT 2
38951: EQUAL
38952: IFFALSE 38969
// bpoints := bpoints * 1.1 ;
38954: LD_ADDR_VAR 0 10
38958: PUSH
38959: LD_VAR 0 10
38963: PUSH
38964: LD_REAL  1.10000000000000E+0000
38967: MUL
38968: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38969: LD_ADDR_VAR 0 10
38973: PUSH
38974: LD_VAR 0 10
38978: PUSH
38979: LD_VAR 0 6
38983: PPUSH
38984: LD_INT 1
38986: PPUSH
38987: CALL_OW 259
38991: PUSH
38992: LD_REAL  1.15000000000000E+0000
38995: MUL
38996: MUL
38997: ST_TO_ADDR
// end ; unit_vehicle :
38998: GO 39828
39000: LD_INT 2
39002: DOUBLE
39003: EQUAL
39004: IFTRUE 39008
39006: GO 39816
39008: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
39009: LD_VAR 0 6
39013: PPUSH
39014: CALL_OW 264
39018: PUSH
39019: LD_INT 2
39021: PUSH
39022: LD_INT 42
39024: PUSH
39025: LD_INT 24
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: LIST
39032: IN
39033: IFFALSE 39054
// points := [ 25 , 5 , 3 ] ;
39035: LD_ADDR_VAR 0 9
39039: PUSH
39040: LD_INT 25
39042: PUSH
39043: LD_INT 5
39045: PUSH
39046: LD_INT 3
39048: PUSH
39049: EMPTY
39050: LIST
39051: LIST
39052: LIST
39053: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
39054: LD_VAR 0 6
39058: PPUSH
39059: CALL_OW 264
39063: PUSH
39064: LD_INT 4
39066: PUSH
39067: LD_INT 43
39069: PUSH
39070: LD_INT 25
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: LIST
39077: IN
39078: IFFALSE 39099
// points := [ 40 , 15 , 5 ] ;
39080: LD_ADDR_VAR 0 9
39084: PUSH
39085: LD_INT 40
39087: PUSH
39088: LD_INT 15
39090: PUSH
39091: LD_INT 5
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: LIST
39098: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
39099: LD_VAR 0 6
39103: PPUSH
39104: CALL_OW 264
39108: PUSH
39109: LD_INT 3
39111: PUSH
39112: LD_INT 23
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: IN
39119: IFFALSE 39140
// points := [ 7 , 25 , 8 ] ;
39121: LD_ADDR_VAR 0 9
39125: PUSH
39126: LD_INT 7
39128: PUSH
39129: LD_INT 25
39131: PUSH
39132: LD_INT 8
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: LIST
39139: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39140: LD_VAR 0 6
39144: PPUSH
39145: CALL_OW 264
39149: PUSH
39150: LD_INT 5
39152: PUSH
39153: LD_INT 27
39155: PUSH
39156: LD_INT 44
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: LIST
39163: IN
39164: IFFALSE 39185
// points := [ 14 , 50 , 16 ] ;
39166: LD_ADDR_VAR 0 9
39170: PUSH
39171: LD_INT 14
39173: PUSH
39174: LD_INT 50
39176: PUSH
39177: LD_INT 16
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: LIST
39184: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
39185: LD_VAR 0 6
39189: PPUSH
39190: CALL_OW 264
39194: PUSH
39195: LD_INT 6
39197: PUSH
39198: LD_INT 46
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: IN
39205: IFFALSE 39226
// points := [ 32 , 120 , 70 ] ;
39207: LD_ADDR_VAR 0 9
39211: PUSH
39212: LD_INT 32
39214: PUSH
39215: LD_INT 120
39217: PUSH
39218: LD_INT 70
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: LIST
39225: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
39226: LD_VAR 0 6
39230: PPUSH
39231: CALL_OW 264
39235: PUSH
39236: LD_INT 7
39238: PUSH
39239: LD_INT 28
39241: PUSH
39242: LD_INT 45
39244: PUSH
39245: LD_EXP 43
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: LIST
39254: LIST
39255: IN
39256: IFFALSE 39277
// points := [ 35 , 20 , 45 ] ;
39258: LD_ADDR_VAR 0 9
39262: PUSH
39263: LD_INT 35
39265: PUSH
39266: LD_INT 20
39268: PUSH
39269: LD_INT 45
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: LIST
39276: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39277: LD_VAR 0 6
39281: PPUSH
39282: CALL_OW 264
39286: PUSH
39287: LD_INT 47
39289: PUSH
39290: EMPTY
39291: LIST
39292: IN
39293: IFFALSE 39314
// points := [ 67 , 45 , 75 ] ;
39295: LD_ADDR_VAR 0 9
39299: PUSH
39300: LD_INT 67
39302: PUSH
39303: LD_INT 45
39305: PUSH
39306: LD_INT 75
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: LIST
39313: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
39314: LD_VAR 0 6
39318: PPUSH
39319: CALL_OW 264
39323: PUSH
39324: LD_INT 26
39326: PUSH
39327: EMPTY
39328: LIST
39329: IN
39330: IFFALSE 39351
// points := [ 120 , 30 , 80 ] ;
39332: LD_ADDR_VAR 0 9
39336: PUSH
39337: LD_INT 120
39339: PUSH
39340: LD_INT 30
39342: PUSH
39343: LD_INT 80
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: LIST
39350: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
39351: LD_VAR 0 6
39355: PPUSH
39356: CALL_OW 264
39360: PUSH
39361: LD_INT 22
39363: PUSH
39364: EMPTY
39365: LIST
39366: IN
39367: IFFALSE 39388
// points := [ 40 , 1 , 1 ] ;
39369: LD_ADDR_VAR 0 9
39373: PUSH
39374: LD_INT 40
39376: PUSH
39377: LD_INT 1
39379: PUSH
39380: LD_INT 1
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: LIST
39387: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
39388: LD_VAR 0 6
39392: PPUSH
39393: CALL_OW 264
39397: PUSH
39398: LD_INT 29
39400: PUSH
39401: EMPTY
39402: LIST
39403: IN
39404: IFFALSE 39425
// points := [ 70 , 200 , 400 ] ;
39406: LD_ADDR_VAR 0 9
39410: PUSH
39411: LD_INT 70
39413: PUSH
39414: LD_INT 200
39416: PUSH
39417: LD_INT 400
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: LIST
39424: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
39425: LD_VAR 0 6
39429: PPUSH
39430: CALL_OW 264
39434: PUSH
39435: LD_INT 14
39437: PUSH
39438: LD_INT 53
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: IN
39445: IFFALSE 39466
// points := [ 40 , 10 , 20 ] ;
39447: LD_ADDR_VAR 0 9
39451: PUSH
39452: LD_INT 40
39454: PUSH
39455: LD_INT 10
39457: PUSH
39458: LD_INT 20
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: LIST
39465: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
39466: LD_VAR 0 6
39470: PPUSH
39471: CALL_OW 264
39475: PUSH
39476: LD_INT 9
39478: PUSH
39479: EMPTY
39480: LIST
39481: IN
39482: IFFALSE 39503
// points := [ 5 , 70 , 20 ] ;
39484: LD_ADDR_VAR 0 9
39488: PUSH
39489: LD_INT 5
39491: PUSH
39492: LD_INT 70
39494: PUSH
39495: LD_INT 20
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: LIST
39502: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
39503: LD_VAR 0 6
39507: PPUSH
39508: CALL_OW 264
39512: PUSH
39513: LD_INT 10
39515: PUSH
39516: EMPTY
39517: LIST
39518: IN
39519: IFFALSE 39540
// points := [ 35 , 110 , 70 ] ;
39521: LD_ADDR_VAR 0 9
39525: PUSH
39526: LD_INT 35
39528: PUSH
39529: LD_INT 110
39531: PUSH
39532: LD_INT 70
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: LIST
39539: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
39540: LD_VAR 0 6
39544: PPUSH
39545: CALL_OW 265
39549: PUSH
39550: LD_INT 25
39552: EQUAL
39553: IFFALSE 39574
// points := [ 80 , 65 , 100 ] ;
39555: LD_ADDR_VAR 0 9
39559: PUSH
39560: LD_INT 80
39562: PUSH
39563: LD_INT 65
39565: PUSH
39566: LD_INT 100
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: LIST
39573: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
39574: LD_VAR 0 6
39578: PPUSH
39579: CALL_OW 263
39583: PUSH
39584: LD_INT 1
39586: EQUAL
39587: IFFALSE 39622
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
39589: LD_ADDR_VAR 0 10
39593: PUSH
39594: LD_VAR 0 10
39598: PUSH
39599: LD_VAR 0 6
39603: PPUSH
39604: CALL_OW 311
39608: PPUSH
39609: LD_INT 3
39611: PPUSH
39612: CALL_OW 259
39616: PUSH
39617: LD_INT 4
39619: MUL
39620: MUL
39621: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
39622: LD_VAR 0 6
39626: PPUSH
39627: CALL_OW 263
39631: PUSH
39632: LD_INT 2
39634: EQUAL
39635: IFFALSE 39686
// begin j := IsControledBy ( i ) ;
39637: LD_ADDR_VAR 0 7
39641: PUSH
39642: LD_VAR 0 6
39646: PPUSH
39647: CALL_OW 312
39651: ST_TO_ADDR
// if j then
39652: LD_VAR 0 7
39656: IFFALSE 39686
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39658: LD_ADDR_VAR 0 10
39662: PUSH
39663: LD_VAR 0 10
39667: PUSH
39668: LD_VAR 0 7
39672: PPUSH
39673: LD_INT 3
39675: PPUSH
39676: CALL_OW 259
39680: PUSH
39681: LD_INT 3
39683: MUL
39684: MUL
39685: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39686: LD_VAR 0 6
39690: PPUSH
39691: CALL_OW 264
39695: PUSH
39696: LD_INT 5
39698: PUSH
39699: LD_INT 6
39701: PUSH
39702: LD_INT 46
39704: PUSH
39705: LD_INT 44
39707: PUSH
39708: LD_INT 47
39710: PUSH
39711: LD_INT 45
39713: PUSH
39714: LD_INT 28
39716: PUSH
39717: LD_INT 7
39719: PUSH
39720: LD_INT 27
39722: PUSH
39723: LD_INT 29
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: LIST
39730: LIST
39731: LIST
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: IN
39738: PUSH
39739: LD_VAR 0 1
39743: PPUSH
39744: LD_INT 52
39746: PPUSH
39747: CALL_OW 321
39751: PUSH
39752: LD_INT 2
39754: EQUAL
39755: AND
39756: IFFALSE 39773
// bpoints := bpoints * 1.2 ;
39758: LD_ADDR_VAR 0 10
39762: PUSH
39763: LD_VAR 0 10
39767: PUSH
39768: LD_REAL  1.20000000000000E+0000
39771: MUL
39772: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39773: LD_VAR 0 6
39777: PPUSH
39778: CALL_OW 264
39782: PUSH
39783: LD_INT 6
39785: PUSH
39786: LD_INT 46
39788: PUSH
39789: LD_INT 47
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: LIST
39796: IN
39797: IFFALSE 39814
// bpoints := bpoints * 1.2 ;
39799: LD_ADDR_VAR 0 10
39803: PUSH
39804: LD_VAR 0 10
39808: PUSH
39809: LD_REAL  1.20000000000000E+0000
39812: MUL
39813: ST_TO_ADDR
// end ; unit_building :
39814: GO 39828
39816: LD_INT 3
39818: DOUBLE
39819: EQUAL
39820: IFTRUE 39824
39822: GO 39827
39824: POP
// ; end ;
39825: GO 39828
39827: POP
// for j = 1 to 3 do
39828: LD_ADDR_VAR 0 7
39832: PUSH
39833: DOUBLE
39834: LD_INT 1
39836: DEC
39837: ST_TO_ADDR
39838: LD_INT 3
39840: PUSH
39841: FOR_TO
39842: IFFALSE 39895
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39844: LD_ADDR_VAR 0 5
39848: PUSH
39849: LD_VAR 0 5
39853: PPUSH
39854: LD_VAR 0 7
39858: PPUSH
39859: LD_VAR 0 5
39863: PUSH
39864: LD_VAR 0 7
39868: ARRAY
39869: PUSH
39870: LD_VAR 0 9
39874: PUSH
39875: LD_VAR 0 7
39879: ARRAY
39880: PUSH
39881: LD_VAR 0 10
39885: MUL
39886: PLUS
39887: PPUSH
39888: CALL_OW 1
39892: ST_TO_ADDR
39893: GO 39841
39895: POP
39896: POP
// end ;
39897: GO 38374
39899: POP
39900: POP
// result := Replace ( result , 4 , tmp ) ;
39901: LD_ADDR_VAR 0 5
39905: PUSH
39906: LD_VAR 0 5
39910: PPUSH
39911: LD_INT 4
39913: PPUSH
39914: LD_VAR 0 8
39918: PPUSH
39919: CALL_OW 1
39923: ST_TO_ADDR
// end ;
39924: LD_VAR 0 5
39928: RET
// export function DangerAtRange ( unit , range ) ; begin
39929: LD_INT 0
39931: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39932: LD_ADDR_VAR 0 3
39936: PUSH
39937: LD_VAR 0 1
39941: PPUSH
39942: CALL_OW 255
39946: PPUSH
39947: LD_VAR 0 1
39951: PPUSH
39952: CALL_OW 250
39956: PPUSH
39957: LD_VAR 0 1
39961: PPUSH
39962: CALL_OW 251
39966: PPUSH
39967: LD_VAR 0 2
39971: PPUSH
39972: CALL 38226 0 4
39976: ST_TO_ADDR
// end ;
39977: LD_VAR 0 3
39981: RET
// export function DangerInArea ( side , area ) ; begin
39982: LD_INT 0
39984: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39985: LD_ADDR_VAR 0 3
39989: PUSH
39990: LD_VAR 0 2
39994: PPUSH
39995: LD_INT 81
39997: PUSH
39998: LD_VAR 0 1
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PPUSH
40007: CALL_OW 70
40011: ST_TO_ADDR
// end ;
40012: LD_VAR 0 3
40016: RET
// export function IsExtension ( b ) ; begin
40017: LD_INT 0
40019: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
40020: LD_ADDR_VAR 0 2
40024: PUSH
40025: LD_VAR 0 1
40029: PUSH
40030: LD_INT 23
40032: PUSH
40033: LD_INT 20
40035: PUSH
40036: LD_INT 22
40038: PUSH
40039: LD_INT 17
40041: PUSH
40042: LD_INT 24
40044: PUSH
40045: LD_INT 21
40047: PUSH
40048: LD_INT 19
40050: PUSH
40051: LD_INT 16
40053: PUSH
40054: LD_INT 25
40056: PUSH
40057: LD_INT 18
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: IN
40072: ST_TO_ADDR
// end ;
40073: LD_VAR 0 2
40077: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
40078: LD_INT 0
40080: PPUSH
40081: PPUSH
40082: PPUSH
// result := [ ] ;
40083: LD_ADDR_VAR 0 4
40087: PUSH
40088: EMPTY
40089: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
40090: LD_ADDR_VAR 0 5
40094: PUSH
40095: LD_VAR 0 2
40099: PPUSH
40100: LD_INT 21
40102: PUSH
40103: LD_INT 3
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PPUSH
40110: CALL_OW 70
40114: ST_TO_ADDR
// if not tmp then
40115: LD_VAR 0 5
40119: NOT
40120: IFFALSE 40124
// exit ;
40122: GO 40188
// if checkLink then
40124: LD_VAR 0 3
40128: IFFALSE 40178
// begin for i in tmp do
40130: LD_ADDR_VAR 0 6
40134: PUSH
40135: LD_VAR 0 5
40139: PUSH
40140: FOR_IN
40141: IFFALSE 40176
// if GetBase ( i ) <> base then
40143: LD_VAR 0 6
40147: PPUSH
40148: CALL_OW 274
40152: PUSH
40153: LD_VAR 0 1
40157: NONEQUAL
40158: IFFALSE 40174
// ComLinkToBase ( base , i ) ;
40160: LD_VAR 0 1
40164: PPUSH
40165: LD_VAR 0 6
40169: PPUSH
40170: CALL_OW 169
40174: GO 40140
40176: POP
40177: POP
// end ; result := tmp ;
40178: LD_ADDR_VAR 0 4
40182: PUSH
40183: LD_VAR 0 5
40187: ST_TO_ADDR
// end ;
40188: LD_VAR 0 4
40192: RET
// export function ComComplete ( units , b ) ; var i ; begin
40193: LD_INT 0
40195: PPUSH
40196: PPUSH
// if not units then
40197: LD_VAR 0 1
40201: NOT
40202: IFFALSE 40206
// exit ;
40204: GO 40296
// for i in units do
40206: LD_ADDR_VAR 0 4
40210: PUSH
40211: LD_VAR 0 1
40215: PUSH
40216: FOR_IN
40217: IFFALSE 40294
// if BuildingStatus ( b ) = bs_build then
40219: LD_VAR 0 2
40223: PPUSH
40224: CALL_OW 461
40228: PUSH
40229: LD_INT 1
40231: EQUAL
40232: IFFALSE 40292
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40234: LD_VAR 0 4
40238: PPUSH
40239: LD_STRING h
40241: PUSH
40242: LD_VAR 0 2
40246: PPUSH
40247: CALL_OW 250
40251: PUSH
40252: LD_VAR 0 2
40256: PPUSH
40257: CALL_OW 251
40261: PUSH
40262: LD_VAR 0 2
40266: PUSH
40267: LD_INT 0
40269: PUSH
40270: LD_INT 0
40272: PUSH
40273: LD_INT 0
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: PUSH
40285: EMPTY
40286: LIST
40287: PPUSH
40288: CALL_OW 446
40292: GO 40216
40294: POP
40295: POP
// end ;
40296: LD_VAR 0 3
40300: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40301: LD_INT 0
40303: PPUSH
40304: PPUSH
40305: PPUSH
40306: PPUSH
40307: PPUSH
40308: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
40309: LD_VAR 0 1
40313: NOT
40314: PUSH
40315: LD_VAR 0 1
40319: PPUSH
40320: CALL_OW 263
40324: PUSH
40325: LD_INT 2
40327: NONEQUAL
40328: OR
40329: IFFALSE 40333
// exit ;
40331: GO 40649
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
40333: LD_ADDR_VAR 0 6
40337: PUSH
40338: LD_INT 22
40340: PUSH
40341: LD_VAR 0 1
40345: PPUSH
40346: CALL_OW 255
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 2
40357: PUSH
40358: LD_INT 30
40360: PUSH
40361: LD_INT 36
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: LD_INT 34
40370: PUSH
40371: LD_INT 31
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: LIST
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: PPUSH
40387: CALL_OW 69
40391: ST_TO_ADDR
// if not tmp then
40392: LD_VAR 0 6
40396: NOT
40397: IFFALSE 40401
// exit ;
40399: GO 40649
// result := [ ] ;
40401: LD_ADDR_VAR 0 2
40405: PUSH
40406: EMPTY
40407: ST_TO_ADDR
// for i in tmp do
40408: LD_ADDR_VAR 0 3
40412: PUSH
40413: LD_VAR 0 6
40417: PUSH
40418: FOR_IN
40419: IFFALSE 40490
// begin t := UnitsInside ( i ) ;
40421: LD_ADDR_VAR 0 4
40425: PUSH
40426: LD_VAR 0 3
40430: PPUSH
40431: CALL_OW 313
40435: ST_TO_ADDR
// if t then
40436: LD_VAR 0 4
40440: IFFALSE 40488
// for j in t do
40442: LD_ADDR_VAR 0 7
40446: PUSH
40447: LD_VAR 0 4
40451: PUSH
40452: FOR_IN
40453: IFFALSE 40486
// result := Replace ( result , result + 1 , j ) ;
40455: LD_ADDR_VAR 0 2
40459: PUSH
40460: LD_VAR 0 2
40464: PPUSH
40465: LD_VAR 0 2
40469: PUSH
40470: LD_INT 1
40472: PLUS
40473: PPUSH
40474: LD_VAR 0 7
40478: PPUSH
40479: CALL_OW 1
40483: ST_TO_ADDR
40484: GO 40452
40486: POP
40487: POP
// end ;
40488: GO 40418
40490: POP
40491: POP
// if not result then
40492: LD_VAR 0 2
40496: NOT
40497: IFFALSE 40501
// exit ;
40499: GO 40649
// mech := result [ 1 ] ;
40501: LD_ADDR_VAR 0 5
40505: PUSH
40506: LD_VAR 0 2
40510: PUSH
40511: LD_INT 1
40513: ARRAY
40514: ST_TO_ADDR
// if result > 1 then
40515: LD_VAR 0 2
40519: PUSH
40520: LD_INT 1
40522: GREATER
40523: IFFALSE 40635
// begin for i = 2 to result do
40525: LD_ADDR_VAR 0 3
40529: PUSH
40530: DOUBLE
40531: LD_INT 2
40533: DEC
40534: ST_TO_ADDR
40535: LD_VAR 0 2
40539: PUSH
40540: FOR_TO
40541: IFFALSE 40633
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
40543: LD_ADDR_VAR 0 4
40547: PUSH
40548: LD_VAR 0 2
40552: PUSH
40553: LD_VAR 0 3
40557: ARRAY
40558: PPUSH
40559: LD_INT 3
40561: PPUSH
40562: CALL_OW 259
40566: PUSH
40567: LD_VAR 0 2
40571: PUSH
40572: LD_VAR 0 3
40576: ARRAY
40577: PPUSH
40578: CALL_OW 432
40582: MINUS
40583: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
40584: LD_VAR 0 4
40588: PUSH
40589: LD_VAR 0 5
40593: PPUSH
40594: LD_INT 3
40596: PPUSH
40597: CALL_OW 259
40601: PUSH
40602: LD_VAR 0 5
40606: PPUSH
40607: CALL_OW 432
40611: MINUS
40612: GREATEREQUAL
40613: IFFALSE 40631
// mech := result [ i ] ;
40615: LD_ADDR_VAR 0 5
40619: PUSH
40620: LD_VAR 0 2
40624: PUSH
40625: LD_VAR 0 3
40629: ARRAY
40630: ST_TO_ADDR
// end ;
40631: GO 40540
40633: POP
40634: POP
// end ; ComLinkTo ( vehicle , mech ) ;
40635: LD_VAR 0 1
40639: PPUSH
40640: LD_VAR 0 5
40644: PPUSH
40645: CALL_OW 135
// end ;
40649: LD_VAR 0 2
40653: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40654: LD_INT 0
40656: PPUSH
40657: PPUSH
40658: PPUSH
40659: PPUSH
40660: PPUSH
40661: PPUSH
40662: PPUSH
40663: PPUSH
40664: PPUSH
40665: PPUSH
40666: PPUSH
40667: PPUSH
40668: PPUSH
// result := [ ] ;
40669: LD_ADDR_VAR 0 7
40673: PUSH
40674: EMPTY
40675: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40676: LD_VAR 0 1
40680: PPUSH
40681: CALL_OW 266
40685: PUSH
40686: LD_INT 0
40688: PUSH
40689: LD_INT 1
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: IN
40696: NOT
40697: IFFALSE 40701
// exit ;
40699: GO 42335
// if name then
40701: LD_VAR 0 3
40705: IFFALSE 40721
// SetBName ( base_dep , name ) ;
40707: LD_VAR 0 1
40711: PPUSH
40712: LD_VAR 0 3
40716: PPUSH
40717: CALL_OW 500
// base := GetBase ( base_dep ) ;
40721: LD_ADDR_VAR 0 15
40725: PUSH
40726: LD_VAR 0 1
40730: PPUSH
40731: CALL_OW 274
40735: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40736: LD_ADDR_VAR 0 16
40740: PUSH
40741: LD_VAR 0 1
40745: PPUSH
40746: CALL_OW 255
40750: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40751: LD_ADDR_VAR 0 17
40755: PUSH
40756: LD_VAR 0 1
40760: PPUSH
40761: CALL_OW 248
40765: ST_TO_ADDR
// if sources then
40766: LD_VAR 0 5
40770: IFFALSE 40817
// for i = 1 to 3 do
40772: LD_ADDR_VAR 0 8
40776: PUSH
40777: DOUBLE
40778: LD_INT 1
40780: DEC
40781: ST_TO_ADDR
40782: LD_INT 3
40784: PUSH
40785: FOR_TO
40786: IFFALSE 40815
// AddResourceType ( base , i , sources [ i ] ) ;
40788: LD_VAR 0 15
40792: PPUSH
40793: LD_VAR 0 8
40797: PPUSH
40798: LD_VAR 0 5
40802: PUSH
40803: LD_VAR 0 8
40807: ARRAY
40808: PPUSH
40809: CALL_OW 276
40813: GO 40785
40815: POP
40816: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
40817: LD_ADDR_VAR 0 18
40821: PUSH
40822: LD_VAR 0 15
40826: PPUSH
40827: LD_VAR 0 2
40831: PPUSH
40832: LD_INT 1
40834: PPUSH
40835: CALL 40078 0 3
40839: ST_TO_ADDR
// InitHc ;
40840: CALL_OW 19
// InitUc ;
40844: CALL_OW 18
// uc_side := side ;
40848: LD_ADDR_OWVAR 20
40852: PUSH
40853: LD_VAR 0 16
40857: ST_TO_ADDR
// uc_nation := nation ;
40858: LD_ADDR_OWVAR 21
40862: PUSH
40863: LD_VAR 0 17
40867: ST_TO_ADDR
// if buildings then
40868: LD_VAR 0 18
40872: IFFALSE 42194
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40874: LD_ADDR_VAR 0 19
40878: PUSH
40879: LD_VAR 0 18
40883: PPUSH
40884: LD_INT 2
40886: PUSH
40887: LD_INT 30
40889: PUSH
40890: LD_INT 29
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: PUSH
40897: LD_INT 30
40899: PUSH
40900: LD_INT 30
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: LIST
40911: PPUSH
40912: CALL_OW 72
40916: ST_TO_ADDR
// if tmp then
40917: LD_VAR 0 19
40921: IFFALSE 40969
// for i in tmp do
40923: LD_ADDR_VAR 0 8
40927: PUSH
40928: LD_VAR 0 19
40932: PUSH
40933: FOR_IN
40934: IFFALSE 40967
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40936: LD_VAR 0 8
40940: PPUSH
40941: CALL_OW 250
40945: PPUSH
40946: LD_VAR 0 8
40950: PPUSH
40951: CALL_OW 251
40955: PPUSH
40956: LD_VAR 0 16
40960: PPUSH
40961: CALL_OW 441
40965: GO 40933
40967: POP
40968: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40969: LD_VAR 0 18
40973: PPUSH
40974: LD_INT 2
40976: PUSH
40977: LD_INT 30
40979: PUSH
40980: LD_INT 32
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: PUSH
40987: LD_INT 30
40989: PUSH
40990: LD_INT 33
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: LIST
41001: PPUSH
41002: CALL_OW 72
41006: IFFALSE 41094
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
41008: LD_ADDR_VAR 0 8
41012: PUSH
41013: LD_VAR 0 18
41017: PPUSH
41018: LD_INT 2
41020: PUSH
41021: LD_INT 30
41023: PUSH
41024: LD_INT 32
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: LD_INT 30
41033: PUSH
41034: LD_INT 33
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: LIST
41045: PPUSH
41046: CALL_OW 72
41050: PUSH
41051: FOR_IN
41052: IFFALSE 41092
// begin if not GetBWeapon ( i ) then
41054: LD_VAR 0 8
41058: PPUSH
41059: CALL_OW 269
41063: NOT
41064: IFFALSE 41090
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
41066: LD_VAR 0 8
41070: PPUSH
41071: LD_VAR 0 8
41075: PPUSH
41076: LD_VAR 0 2
41080: PPUSH
41081: CALL 42340 0 2
41085: PPUSH
41086: CALL_OW 431
// end ;
41090: GO 41051
41092: POP
41093: POP
// end ; for i = 1 to personel do
41094: LD_ADDR_VAR 0 8
41098: PUSH
41099: DOUBLE
41100: LD_INT 1
41102: DEC
41103: ST_TO_ADDR
41104: LD_VAR 0 6
41108: PUSH
41109: FOR_TO
41110: IFFALSE 42174
// begin if i > 4 then
41112: LD_VAR 0 8
41116: PUSH
41117: LD_INT 4
41119: GREATER
41120: IFFALSE 41124
// break ;
41122: GO 42174
// case i of 1 :
41124: LD_VAR 0 8
41128: PUSH
41129: LD_INT 1
41131: DOUBLE
41132: EQUAL
41133: IFTRUE 41137
41135: GO 41217
41137: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
41138: LD_ADDR_VAR 0 12
41142: PUSH
41143: LD_VAR 0 18
41147: PPUSH
41148: LD_INT 22
41150: PUSH
41151: LD_VAR 0 16
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: PUSH
41160: LD_INT 58
41162: PUSH
41163: EMPTY
41164: LIST
41165: PUSH
41166: LD_INT 2
41168: PUSH
41169: LD_INT 30
41171: PUSH
41172: LD_INT 32
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 30
41181: PUSH
41182: LD_INT 4
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: LD_INT 30
41191: PUSH
41192: LD_INT 5
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: LIST
41209: PPUSH
41210: CALL_OW 72
41214: ST_TO_ADDR
41215: GO 41439
41217: LD_INT 2
41219: DOUBLE
41220: EQUAL
41221: IFTRUE 41225
41223: GO 41287
41225: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
41226: LD_ADDR_VAR 0 12
41230: PUSH
41231: LD_VAR 0 18
41235: PPUSH
41236: LD_INT 22
41238: PUSH
41239: LD_VAR 0 16
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 2
41250: PUSH
41251: LD_INT 30
41253: PUSH
41254: LD_INT 0
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: PUSH
41261: LD_INT 30
41263: PUSH
41264: LD_INT 1
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: LIST
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PPUSH
41280: CALL_OW 72
41284: ST_TO_ADDR
41285: GO 41439
41287: LD_INT 3
41289: DOUBLE
41290: EQUAL
41291: IFTRUE 41295
41293: GO 41357
41295: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41296: LD_ADDR_VAR 0 12
41300: PUSH
41301: LD_VAR 0 18
41305: PPUSH
41306: LD_INT 22
41308: PUSH
41309: LD_VAR 0 16
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 2
41320: PUSH
41321: LD_INT 30
41323: PUSH
41324: LD_INT 2
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 30
41333: PUSH
41334: LD_INT 3
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: LIST
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PPUSH
41350: CALL_OW 72
41354: ST_TO_ADDR
41355: GO 41439
41357: LD_INT 4
41359: DOUBLE
41360: EQUAL
41361: IFTRUE 41365
41363: GO 41438
41365: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
41366: LD_ADDR_VAR 0 12
41370: PUSH
41371: LD_VAR 0 18
41375: PPUSH
41376: LD_INT 22
41378: PUSH
41379: LD_VAR 0 16
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: LD_INT 2
41390: PUSH
41391: LD_INT 30
41393: PUSH
41394: LD_INT 6
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: PUSH
41401: LD_INT 30
41403: PUSH
41404: LD_INT 7
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: PUSH
41411: LD_INT 30
41413: PUSH
41414: LD_INT 8
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: PPUSH
41431: CALL_OW 72
41435: ST_TO_ADDR
41436: GO 41439
41438: POP
// if i = 1 then
41439: LD_VAR 0 8
41443: PUSH
41444: LD_INT 1
41446: EQUAL
41447: IFFALSE 41558
// begin tmp := [ ] ;
41449: LD_ADDR_VAR 0 19
41453: PUSH
41454: EMPTY
41455: ST_TO_ADDR
// for j in f do
41456: LD_ADDR_VAR 0 9
41460: PUSH
41461: LD_VAR 0 12
41465: PUSH
41466: FOR_IN
41467: IFFALSE 41540
// if GetBType ( j ) = b_bunker then
41469: LD_VAR 0 9
41473: PPUSH
41474: CALL_OW 266
41478: PUSH
41479: LD_INT 32
41481: EQUAL
41482: IFFALSE 41509
// tmp := Insert ( tmp , 1 , j ) else
41484: LD_ADDR_VAR 0 19
41488: PUSH
41489: LD_VAR 0 19
41493: PPUSH
41494: LD_INT 1
41496: PPUSH
41497: LD_VAR 0 9
41501: PPUSH
41502: CALL_OW 2
41506: ST_TO_ADDR
41507: GO 41538
// tmp := Insert ( tmp , tmp + 1 , j ) ;
41509: LD_ADDR_VAR 0 19
41513: PUSH
41514: LD_VAR 0 19
41518: PPUSH
41519: LD_VAR 0 19
41523: PUSH
41524: LD_INT 1
41526: PLUS
41527: PPUSH
41528: LD_VAR 0 9
41532: PPUSH
41533: CALL_OW 2
41537: ST_TO_ADDR
41538: GO 41466
41540: POP
41541: POP
// if tmp then
41542: LD_VAR 0 19
41546: IFFALSE 41558
// f := tmp ;
41548: LD_ADDR_VAR 0 12
41552: PUSH
41553: LD_VAR 0 19
41557: ST_TO_ADDR
// end ; x := personel [ i ] ;
41558: LD_ADDR_VAR 0 13
41562: PUSH
41563: LD_VAR 0 6
41567: PUSH
41568: LD_VAR 0 8
41572: ARRAY
41573: ST_TO_ADDR
// if x = - 1 then
41574: LD_VAR 0 13
41578: PUSH
41579: LD_INT 1
41581: NEG
41582: EQUAL
41583: IFFALSE 41792
// begin for j in f do
41585: LD_ADDR_VAR 0 9
41589: PUSH
41590: LD_VAR 0 12
41594: PUSH
41595: FOR_IN
41596: IFFALSE 41788
// repeat InitHc ;
41598: CALL_OW 19
// if GetBType ( j ) = b_barracks then
41602: LD_VAR 0 9
41606: PPUSH
41607: CALL_OW 266
41611: PUSH
41612: LD_INT 5
41614: EQUAL
41615: IFFALSE 41685
// begin if UnitsInside ( j ) < 3 then
41617: LD_VAR 0 9
41621: PPUSH
41622: CALL_OW 313
41626: PUSH
41627: LD_INT 3
41629: LESS
41630: IFFALSE 41666
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41632: LD_INT 0
41634: PPUSH
41635: LD_INT 5
41637: PUSH
41638: LD_INT 8
41640: PUSH
41641: LD_INT 9
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: LIST
41648: PUSH
41649: LD_VAR 0 17
41653: ARRAY
41654: PPUSH
41655: LD_VAR 0 4
41659: PPUSH
41660: CALL_OW 380
41664: GO 41683
// PrepareHuman ( false , i , skill ) ;
41666: LD_INT 0
41668: PPUSH
41669: LD_VAR 0 8
41673: PPUSH
41674: LD_VAR 0 4
41678: PPUSH
41679: CALL_OW 380
// end else
41683: GO 41702
// PrepareHuman ( false , i , skill ) ;
41685: LD_INT 0
41687: PPUSH
41688: LD_VAR 0 8
41692: PPUSH
41693: LD_VAR 0 4
41697: PPUSH
41698: CALL_OW 380
// un := CreateHuman ;
41702: LD_ADDR_VAR 0 14
41706: PUSH
41707: CALL_OW 44
41711: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41712: LD_ADDR_VAR 0 7
41716: PUSH
41717: LD_VAR 0 7
41721: PPUSH
41722: LD_INT 1
41724: PPUSH
41725: LD_VAR 0 14
41729: PPUSH
41730: CALL_OW 2
41734: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41735: LD_VAR 0 14
41739: PPUSH
41740: LD_VAR 0 9
41744: PPUSH
41745: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41749: LD_VAR 0 9
41753: PPUSH
41754: CALL_OW 313
41758: PUSH
41759: LD_INT 6
41761: EQUAL
41762: PUSH
41763: LD_VAR 0 9
41767: PPUSH
41768: CALL_OW 266
41772: PUSH
41773: LD_INT 32
41775: PUSH
41776: LD_INT 31
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: IN
41783: OR
41784: IFFALSE 41598
41786: GO 41595
41788: POP
41789: POP
// end else
41790: GO 42172
// for j = 1 to x do
41792: LD_ADDR_VAR 0 9
41796: PUSH
41797: DOUBLE
41798: LD_INT 1
41800: DEC
41801: ST_TO_ADDR
41802: LD_VAR 0 13
41806: PUSH
41807: FOR_TO
41808: IFFALSE 42170
// begin InitHc ;
41810: CALL_OW 19
// if not f then
41814: LD_VAR 0 12
41818: NOT
41819: IFFALSE 41908
// begin PrepareHuman ( false , i , skill ) ;
41821: LD_INT 0
41823: PPUSH
41824: LD_VAR 0 8
41828: PPUSH
41829: LD_VAR 0 4
41833: PPUSH
41834: CALL_OW 380
// un := CreateHuman ;
41838: LD_ADDR_VAR 0 14
41842: PUSH
41843: CALL_OW 44
41847: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41848: LD_ADDR_VAR 0 7
41852: PUSH
41853: LD_VAR 0 7
41857: PPUSH
41858: LD_INT 1
41860: PPUSH
41861: LD_VAR 0 14
41865: PPUSH
41866: CALL_OW 2
41870: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41871: LD_VAR 0 14
41875: PPUSH
41876: LD_VAR 0 1
41880: PPUSH
41881: CALL_OW 250
41885: PPUSH
41886: LD_VAR 0 1
41890: PPUSH
41891: CALL_OW 251
41895: PPUSH
41896: LD_INT 10
41898: PPUSH
41899: LD_INT 0
41901: PPUSH
41902: CALL_OW 50
// continue ;
41906: GO 41807
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41908: LD_VAR 0 12
41912: PUSH
41913: LD_INT 1
41915: ARRAY
41916: PPUSH
41917: CALL_OW 313
41921: PUSH
41922: LD_VAR 0 12
41926: PUSH
41927: LD_INT 1
41929: ARRAY
41930: PPUSH
41931: CALL_OW 266
41935: PUSH
41936: LD_INT 32
41938: PUSH
41939: LD_INT 31
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: IN
41946: AND
41947: PUSH
41948: LD_VAR 0 12
41952: PUSH
41953: LD_INT 1
41955: ARRAY
41956: PPUSH
41957: CALL_OW 313
41961: PUSH
41962: LD_INT 6
41964: EQUAL
41965: OR
41966: IFFALSE 41986
// f := Delete ( f , 1 ) ;
41968: LD_ADDR_VAR 0 12
41972: PUSH
41973: LD_VAR 0 12
41977: PPUSH
41978: LD_INT 1
41980: PPUSH
41981: CALL_OW 3
41985: ST_TO_ADDR
// if not f then
41986: LD_VAR 0 12
41990: NOT
41991: IFFALSE 42009
// begin x := x + 2 ;
41993: LD_ADDR_VAR 0 13
41997: PUSH
41998: LD_VAR 0 13
42002: PUSH
42003: LD_INT 2
42005: PLUS
42006: ST_TO_ADDR
// continue ;
42007: GO 41807
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
42009: LD_VAR 0 12
42013: PUSH
42014: LD_INT 1
42016: ARRAY
42017: PPUSH
42018: CALL_OW 266
42022: PUSH
42023: LD_INT 5
42025: EQUAL
42026: IFFALSE 42100
// begin if UnitsInside ( f [ 1 ] ) < 3 then
42028: LD_VAR 0 12
42032: PUSH
42033: LD_INT 1
42035: ARRAY
42036: PPUSH
42037: CALL_OW 313
42041: PUSH
42042: LD_INT 3
42044: LESS
42045: IFFALSE 42081
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42047: LD_INT 0
42049: PPUSH
42050: LD_INT 5
42052: PUSH
42053: LD_INT 8
42055: PUSH
42056: LD_INT 9
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: LIST
42063: PUSH
42064: LD_VAR 0 17
42068: ARRAY
42069: PPUSH
42070: LD_VAR 0 4
42074: PPUSH
42075: CALL_OW 380
42079: GO 42098
// PrepareHuman ( false , i , skill ) ;
42081: LD_INT 0
42083: PPUSH
42084: LD_VAR 0 8
42088: PPUSH
42089: LD_VAR 0 4
42093: PPUSH
42094: CALL_OW 380
// end else
42098: GO 42117
// PrepareHuman ( false , i , skill ) ;
42100: LD_INT 0
42102: PPUSH
42103: LD_VAR 0 8
42107: PPUSH
42108: LD_VAR 0 4
42112: PPUSH
42113: CALL_OW 380
// un := CreateHuman ;
42117: LD_ADDR_VAR 0 14
42121: PUSH
42122: CALL_OW 44
42126: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42127: LD_ADDR_VAR 0 7
42131: PUSH
42132: LD_VAR 0 7
42136: PPUSH
42137: LD_INT 1
42139: PPUSH
42140: LD_VAR 0 14
42144: PPUSH
42145: CALL_OW 2
42149: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
42150: LD_VAR 0 14
42154: PPUSH
42155: LD_VAR 0 12
42159: PUSH
42160: LD_INT 1
42162: ARRAY
42163: PPUSH
42164: CALL_OW 52
// end ;
42168: GO 41807
42170: POP
42171: POP
// end ;
42172: GO 41109
42174: POP
42175: POP
// result := result ^ buildings ;
42176: LD_ADDR_VAR 0 7
42180: PUSH
42181: LD_VAR 0 7
42185: PUSH
42186: LD_VAR 0 18
42190: ADD
42191: ST_TO_ADDR
// end else
42192: GO 42335
// begin for i = 1 to personel do
42194: LD_ADDR_VAR 0 8
42198: PUSH
42199: DOUBLE
42200: LD_INT 1
42202: DEC
42203: ST_TO_ADDR
42204: LD_VAR 0 6
42208: PUSH
42209: FOR_TO
42210: IFFALSE 42333
// begin if i > 4 then
42212: LD_VAR 0 8
42216: PUSH
42217: LD_INT 4
42219: GREATER
42220: IFFALSE 42224
// break ;
42222: GO 42333
// x := personel [ i ] ;
42224: LD_ADDR_VAR 0 13
42228: PUSH
42229: LD_VAR 0 6
42233: PUSH
42234: LD_VAR 0 8
42238: ARRAY
42239: ST_TO_ADDR
// if x = - 1 then
42240: LD_VAR 0 13
42244: PUSH
42245: LD_INT 1
42247: NEG
42248: EQUAL
42249: IFFALSE 42253
// continue ;
42251: GO 42209
// PrepareHuman ( false , i , skill ) ;
42253: LD_INT 0
42255: PPUSH
42256: LD_VAR 0 8
42260: PPUSH
42261: LD_VAR 0 4
42265: PPUSH
42266: CALL_OW 380
// un := CreateHuman ;
42270: LD_ADDR_VAR 0 14
42274: PUSH
42275: CALL_OW 44
42279: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42280: LD_VAR 0 14
42284: PPUSH
42285: LD_VAR 0 1
42289: PPUSH
42290: CALL_OW 250
42294: PPUSH
42295: LD_VAR 0 1
42299: PPUSH
42300: CALL_OW 251
42304: PPUSH
42305: LD_INT 10
42307: PPUSH
42308: LD_INT 0
42310: PPUSH
42311: CALL_OW 50
// result := result ^ un ;
42315: LD_ADDR_VAR 0 7
42319: PUSH
42320: LD_VAR 0 7
42324: PUSH
42325: LD_VAR 0 14
42329: ADD
42330: ST_TO_ADDR
// end ;
42331: GO 42209
42333: POP
42334: POP
// end ; end ;
42335: LD_VAR 0 7
42339: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
42340: LD_INT 0
42342: PPUSH
42343: PPUSH
42344: PPUSH
42345: PPUSH
42346: PPUSH
42347: PPUSH
42348: PPUSH
42349: PPUSH
42350: PPUSH
42351: PPUSH
42352: PPUSH
42353: PPUSH
42354: PPUSH
42355: PPUSH
42356: PPUSH
42357: PPUSH
// result := false ;
42358: LD_ADDR_VAR 0 3
42362: PUSH
42363: LD_INT 0
42365: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
42366: LD_VAR 0 1
42370: NOT
42371: PUSH
42372: LD_VAR 0 1
42376: PPUSH
42377: CALL_OW 266
42381: PUSH
42382: LD_INT 32
42384: PUSH
42385: LD_INT 33
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: IN
42392: NOT
42393: OR
42394: IFFALSE 42398
// exit ;
42396: GO 43507
// nat := GetNation ( tower ) ;
42398: LD_ADDR_VAR 0 12
42402: PUSH
42403: LD_VAR 0 1
42407: PPUSH
42408: CALL_OW 248
42412: ST_TO_ADDR
// side := GetSide ( tower ) ;
42413: LD_ADDR_VAR 0 16
42417: PUSH
42418: LD_VAR 0 1
42422: PPUSH
42423: CALL_OW 255
42427: ST_TO_ADDR
// x := GetX ( tower ) ;
42428: LD_ADDR_VAR 0 10
42432: PUSH
42433: LD_VAR 0 1
42437: PPUSH
42438: CALL_OW 250
42442: ST_TO_ADDR
// y := GetY ( tower ) ;
42443: LD_ADDR_VAR 0 11
42447: PUSH
42448: LD_VAR 0 1
42452: PPUSH
42453: CALL_OW 251
42457: ST_TO_ADDR
// if not x or not y then
42458: LD_VAR 0 10
42462: NOT
42463: PUSH
42464: LD_VAR 0 11
42468: NOT
42469: OR
42470: IFFALSE 42474
// exit ;
42472: GO 43507
// weapon := 0 ;
42474: LD_ADDR_VAR 0 18
42478: PUSH
42479: LD_INT 0
42481: ST_TO_ADDR
// fac_list := [ ] ;
42482: LD_ADDR_VAR 0 17
42486: PUSH
42487: EMPTY
42488: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
42489: LD_ADDR_VAR 0 6
42493: PUSH
42494: LD_VAR 0 1
42498: PPUSH
42499: CALL_OW 274
42503: PPUSH
42504: LD_VAR 0 2
42508: PPUSH
42509: LD_INT 0
42511: PPUSH
42512: CALL 40078 0 3
42516: PPUSH
42517: LD_INT 30
42519: PUSH
42520: LD_INT 3
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PPUSH
42527: CALL_OW 72
42531: ST_TO_ADDR
// if not factories then
42532: LD_VAR 0 6
42536: NOT
42537: IFFALSE 42541
// exit ;
42539: GO 43507
// for i in factories do
42541: LD_ADDR_VAR 0 8
42545: PUSH
42546: LD_VAR 0 6
42550: PUSH
42551: FOR_IN
42552: IFFALSE 42577
// fac_list := fac_list union AvailableWeaponList ( i ) ;
42554: LD_ADDR_VAR 0 17
42558: PUSH
42559: LD_VAR 0 17
42563: PUSH
42564: LD_VAR 0 8
42568: PPUSH
42569: CALL_OW 478
42573: UNION
42574: ST_TO_ADDR
42575: GO 42551
42577: POP
42578: POP
// if not fac_list then
42579: LD_VAR 0 17
42583: NOT
42584: IFFALSE 42588
// exit ;
42586: GO 43507
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
42588: LD_ADDR_VAR 0 5
42592: PUSH
42593: LD_INT 4
42595: PUSH
42596: LD_INT 5
42598: PUSH
42599: LD_INT 9
42601: PUSH
42602: LD_INT 10
42604: PUSH
42605: LD_INT 6
42607: PUSH
42608: LD_INT 7
42610: PUSH
42611: LD_INT 11
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 27
42625: PUSH
42626: LD_INT 28
42628: PUSH
42629: LD_INT 26
42631: PUSH
42632: LD_INT 30
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 43
42643: PUSH
42644: LD_INT 44
42646: PUSH
42647: LD_INT 46
42649: PUSH
42650: LD_INT 45
42652: PUSH
42653: LD_INT 47
42655: PUSH
42656: LD_INT 49
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: LIST
42663: LIST
42664: LIST
42665: LIST
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: LIST
42671: PUSH
42672: LD_VAR 0 12
42676: ARRAY
42677: ST_TO_ADDR
// list := list isect fac_list ;
42678: LD_ADDR_VAR 0 5
42682: PUSH
42683: LD_VAR 0 5
42687: PUSH
42688: LD_VAR 0 17
42692: ISECT
42693: ST_TO_ADDR
// if not list then
42694: LD_VAR 0 5
42698: NOT
42699: IFFALSE 42703
// exit ;
42701: GO 43507
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42703: LD_VAR 0 12
42707: PUSH
42708: LD_INT 3
42710: EQUAL
42711: PUSH
42712: LD_INT 49
42714: PUSH
42715: LD_VAR 0 5
42719: IN
42720: AND
42721: PUSH
42722: LD_INT 31
42724: PPUSH
42725: LD_VAR 0 16
42729: PPUSH
42730: CALL_OW 321
42734: PUSH
42735: LD_INT 2
42737: EQUAL
42738: AND
42739: IFFALSE 42799
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42741: LD_INT 22
42743: PUSH
42744: LD_VAR 0 16
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PUSH
42753: LD_INT 35
42755: PUSH
42756: LD_INT 49
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 91
42765: PUSH
42766: LD_VAR 0 1
42770: PUSH
42771: LD_INT 10
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: LIST
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: LIST
42783: PPUSH
42784: CALL_OW 69
42788: NOT
42789: IFFALSE 42799
// weapon := ru_time_lapser ;
42791: LD_ADDR_VAR 0 18
42795: PUSH
42796: LD_INT 49
42798: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42799: LD_VAR 0 12
42803: PUSH
42804: LD_INT 1
42806: PUSH
42807: LD_INT 2
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: IN
42814: PUSH
42815: LD_INT 11
42817: PUSH
42818: LD_VAR 0 5
42822: IN
42823: PUSH
42824: LD_INT 30
42826: PUSH
42827: LD_VAR 0 5
42831: IN
42832: OR
42833: AND
42834: PUSH
42835: LD_INT 6
42837: PPUSH
42838: LD_VAR 0 16
42842: PPUSH
42843: CALL_OW 321
42847: PUSH
42848: LD_INT 2
42850: EQUAL
42851: AND
42852: IFFALSE 43017
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42854: LD_INT 22
42856: PUSH
42857: LD_VAR 0 16
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: LD_INT 2
42868: PUSH
42869: LD_INT 35
42871: PUSH
42872: LD_INT 11
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 35
42881: PUSH
42882: LD_INT 30
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 91
42896: PUSH
42897: LD_VAR 0 1
42901: PUSH
42902: LD_INT 18
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: LIST
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: LIST
42914: PPUSH
42915: CALL_OW 69
42919: NOT
42920: PUSH
42921: LD_INT 22
42923: PUSH
42924: LD_VAR 0 16
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: PUSH
42933: LD_INT 2
42935: PUSH
42936: LD_INT 30
42938: PUSH
42939: LD_INT 32
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 30
42948: PUSH
42949: LD_INT 33
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: LIST
42960: PUSH
42961: LD_INT 91
42963: PUSH
42964: LD_VAR 0 1
42968: PUSH
42969: LD_INT 12
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: LIST
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: LIST
42981: PUSH
42982: EMPTY
42983: LIST
42984: PPUSH
42985: CALL_OW 69
42989: PUSH
42990: LD_INT 2
42992: GREATER
42993: AND
42994: IFFALSE 43017
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42996: LD_ADDR_VAR 0 18
43000: PUSH
43001: LD_INT 11
43003: PUSH
43004: LD_INT 30
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: PUSH
43011: LD_VAR 0 12
43015: ARRAY
43016: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
43017: LD_VAR 0 18
43021: NOT
43022: PUSH
43023: LD_INT 40
43025: PPUSH
43026: LD_VAR 0 16
43030: PPUSH
43031: CALL_OW 321
43035: PUSH
43036: LD_INT 2
43038: EQUAL
43039: AND
43040: PUSH
43041: LD_INT 7
43043: PUSH
43044: LD_VAR 0 5
43048: IN
43049: PUSH
43050: LD_INT 28
43052: PUSH
43053: LD_VAR 0 5
43057: IN
43058: OR
43059: PUSH
43060: LD_INT 45
43062: PUSH
43063: LD_VAR 0 5
43067: IN
43068: OR
43069: AND
43070: IFFALSE 43324
// begin hex := GetHexInfo ( x , y ) ;
43072: LD_ADDR_VAR 0 4
43076: PUSH
43077: LD_VAR 0 10
43081: PPUSH
43082: LD_VAR 0 11
43086: PPUSH
43087: CALL_OW 546
43091: ST_TO_ADDR
// if hex [ 1 ] then
43092: LD_VAR 0 4
43096: PUSH
43097: LD_INT 1
43099: ARRAY
43100: IFFALSE 43104
// exit ;
43102: GO 43507
// height := hex [ 2 ] ;
43104: LD_ADDR_VAR 0 15
43108: PUSH
43109: LD_VAR 0 4
43113: PUSH
43114: LD_INT 2
43116: ARRAY
43117: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43118: LD_ADDR_VAR 0 14
43122: PUSH
43123: LD_INT 0
43125: PUSH
43126: LD_INT 2
43128: PUSH
43129: LD_INT 3
43131: PUSH
43132: LD_INT 5
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: LIST
43139: LIST
43140: ST_TO_ADDR
// for i in tmp do
43141: LD_ADDR_VAR 0 8
43145: PUSH
43146: LD_VAR 0 14
43150: PUSH
43151: FOR_IN
43152: IFFALSE 43322
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43154: LD_ADDR_VAR 0 9
43158: PUSH
43159: LD_VAR 0 10
43163: PPUSH
43164: LD_VAR 0 8
43168: PPUSH
43169: LD_INT 5
43171: PPUSH
43172: CALL_OW 272
43176: PUSH
43177: LD_VAR 0 11
43181: PPUSH
43182: LD_VAR 0 8
43186: PPUSH
43187: LD_INT 5
43189: PPUSH
43190: CALL_OW 273
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
43199: LD_VAR 0 9
43203: PUSH
43204: LD_INT 1
43206: ARRAY
43207: PPUSH
43208: LD_VAR 0 9
43212: PUSH
43213: LD_INT 2
43215: ARRAY
43216: PPUSH
43217: CALL_OW 488
43221: IFFALSE 43320
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
43223: LD_ADDR_VAR 0 4
43227: PUSH
43228: LD_VAR 0 9
43232: PUSH
43233: LD_INT 1
43235: ARRAY
43236: PPUSH
43237: LD_VAR 0 9
43241: PUSH
43242: LD_INT 2
43244: ARRAY
43245: PPUSH
43246: CALL_OW 546
43250: ST_TO_ADDR
// if hex [ 1 ] then
43251: LD_VAR 0 4
43255: PUSH
43256: LD_INT 1
43258: ARRAY
43259: IFFALSE 43263
// continue ;
43261: GO 43151
// h := hex [ 2 ] ;
43263: LD_ADDR_VAR 0 13
43267: PUSH
43268: LD_VAR 0 4
43272: PUSH
43273: LD_INT 2
43275: ARRAY
43276: ST_TO_ADDR
// if h + 7 < height then
43277: LD_VAR 0 13
43281: PUSH
43282: LD_INT 7
43284: PLUS
43285: PUSH
43286: LD_VAR 0 15
43290: LESS
43291: IFFALSE 43320
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43293: LD_ADDR_VAR 0 18
43297: PUSH
43298: LD_INT 7
43300: PUSH
43301: LD_INT 28
43303: PUSH
43304: LD_INT 45
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: LIST
43311: PUSH
43312: LD_VAR 0 12
43316: ARRAY
43317: ST_TO_ADDR
// break ;
43318: GO 43322
// end ; end ; end ;
43320: GO 43151
43322: POP
43323: POP
// end ; if not weapon then
43324: LD_VAR 0 18
43328: NOT
43329: IFFALSE 43389
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
43331: LD_ADDR_VAR 0 5
43335: PUSH
43336: LD_VAR 0 5
43340: PUSH
43341: LD_INT 11
43343: PUSH
43344: LD_INT 30
43346: PUSH
43347: LD_INT 49
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: LIST
43354: DIFF
43355: ST_TO_ADDR
// if not list then
43356: LD_VAR 0 5
43360: NOT
43361: IFFALSE 43365
// exit ;
43363: GO 43507
// weapon := list [ rand ( 1 , list ) ] ;
43365: LD_ADDR_VAR 0 18
43369: PUSH
43370: LD_VAR 0 5
43374: PUSH
43375: LD_INT 1
43377: PPUSH
43378: LD_VAR 0 5
43382: PPUSH
43383: CALL_OW 12
43387: ARRAY
43388: ST_TO_ADDR
// end ; if weapon then
43389: LD_VAR 0 18
43393: IFFALSE 43507
// begin tmp := CostOfWeapon ( weapon ) ;
43395: LD_ADDR_VAR 0 14
43399: PUSH
43400: LD_VAR 0 18
43404: PPUSH
43405: CALL_OW 451
43409: ST_TO_ADDR
// j := GetBase ( tower ) ;
43410: LD_ADDR_VAR 0 9
43414: PUSH
43415: LD_VAR 0 1
43419: PPUSH
43420: CALL_OW 274
43424: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
43425: LD_VAR 0 9
43429: PPUSH
43430: LD_INT 1
43432: PPUSH
43433: CALL_OW 275
43437: PUSH
43438: LD_VAR 0 14
43442: PUSH
43443: LD_INT 1
43445: ARRAY
43446: GREATEREQUAL
43447: PUSH
43448: LD_VAR 0 9
43452: PPUSH
43453: LD_INT 2
43455: PPUSH
43456: CALL_OW 275
43460: PUSH
43461: LD_VAR 0 14
43465: PUSH
43466: LD_INT 2
43468: ARRAY
43469: GREATEREQUAL
43470: AND
43471: PUSH
43472: LD_VAR 0 9
43476: PPUSH
43477: LD_INT 3
43479: PPUSH
43480: CALL_OW 275
43484: PUSH
43485: LD_VAR 0 14
43489: PUSH
43490: LD_INT 3
43492: ARRAY
43493: GREATEREQUAL
43494: AND
43495: IFFALSE 43507
// result := weapon ;
43497: LD_ADDR_VAR 0 3
43501: PUSH
43502: LD_VAR 0 18
43506: ST_TO_ADDR
// end ; end ;
43507: LD_VAR 0 3
43511: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
43512: LD_INT 0
43514: PPUSH
43515: PPUSH
// result := true ;
43516: LD_ADDR_VAR 0 3
43520: PUSH
43521: LD_INT 1
43523: ST_TO_ADDR
// if array1 = array2 then
43524: LD_VAR 0 1
43528: PUSH
43529: LD_VAR 0 2
43533: EQUAL
43534: IFFALSE 43594
// begin for i = 1 to array1 do
43536: LD_ADDR_VAR 0 4
43540: PUSH
43541: DOUBLE
43542: LD_INT 1
43544: DEC
43545: ST_TO_ADDR
43546: LD_VAR 0 1
43550: PUSH
43551: FOR_TO
43552: IFFALSE 43590
// if array1 [ i ] <> array2 [ i ] then
43554: LD_VAR 0 1
43558: PUSH
43559: LD_VAR 0 4
43563: ARRAY
43564: PUSH
43565: LD_VAR 0 2
43569: PUSH
43570: LD_VAR 0 4
43574: ARRAY
43575: NONEQUAL
43576: IFFALSE 43588
// begin result := false ;
43578: LD_ADDR_VAR 0 3
43582: PUSH
43583: LD_INT 0
43585: ST_TO_ADDR
// break ;
43586: GO 43590
// end ;
43588: GO 43551
43590: POP
43591: POP
// end else
43592: GO 43602
// result := false ;
43594: LD_ADDR_VAR 0 3
43598: PUSH
43599: LD_INT 0
43601: ST_TO_ADDR
// end ;
43602: LD_VAR 0 3
43606: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
43607: LD_INT 0
43609: PPUSH
43610: PPUSH
// if not array1 or not array2 then
43611: LD_VAR 0 1
43615: NOT
43616: PUSH
43617: LD_VAR 0 2
43621: NOT
43622: OR
43623: IFFALSE 43627
// exit ;
43625: GO 43691
// result := true ;
43627: LD_ADDR_VAR 0 3
43631: PUSH
43632: LD_INT 1
43634: ST_TO_ADDR
// for i = 1 to array1 do
43635: LD_ADDR_VAR 0 4
43639: PUSH
43640: DOUBLE
43641: LD_INT 1
43643: DEC
43644: ST_TO_ADDR
43645: LD_VAR 0 1
43649: PUSH
43650: FOR_TO
43651: IFFALSE 43689
// if array1 [ i ] <> array2 [ i ] then
43653: LD_VAR 0 1
43657: PUSH
43658: LD_VAR 0 4
43662: ARRAY
43663: PUSH
43664: LD_VAR 0 2
43668: PUSH
43669: LD_VAR 0 4
43673: ARRAY
43674: NONEQUAL
43675: IFFALSE 43687
// begin result := false ;
43677: LD_ADDR_VAR 0 3
43681: PUSH
43682: LD_INT 0
43684: ST_TO_ADDR
// break ;
43685: GO 43689
// end ;
43687: GO 43650
43689: POP
43690: POP
// end ;
43691: LD_VAR 0 3
43695: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43696: LD_INT 0
43698: PPUSH
43699: PPUSH
43700: PPUSH
// pom := GetBase ( fac ) ;
43701: LD_ADDR_VAR 0 5
43705: PUSH
43706: LD_VAR 0 1
43710: PPUSH
43711: CALL_OW 274
43715: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43716: LD_ADDR_VAR 0 4
43720: PUSH
43721: LD_VAR 0 2
43725: PUSH
43726: LD_INT 1
43728: ARRAY
43729: PPUSH
43730: LD_VAR 0 2
43734: PUSH
43735: LD_INT 2
43737: ARRAY
43738: PPUSH
43739: LD_VAR 0 2
43743: PUSH
43744: LD_INT 3
43746: ARRAY
43747: PPUSH
43748: LD_VAR 0 2
43752: PUSH
43753: LD_INT 4
43755: ARRAY
43756: PPUSH
43757: CALL_OW 449
43761: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43762: LD_ADDR_VAR 0 3
43766: PUSH
43767: LD_VAR 0 5
43771: PPUSH
43772: LD_INT 1
43774: PPUSH
43775: CALL_OW 275
43779: PUSH
43780: LD_VAR 0 4
43784: PUSH
43785: LD_INT 1
43787: ARRAY
43788: GREATEREQUAL
43789: PUSH
43790: LD_VAR 0 5
43794: PPUSH
43795: LD_INT 2
43797: PPUSH
43798: CALL_OW 275
43802: PUSH
43803: LD_VAR 0 4
43807: PUSH
43808: LD_INT 2
43810: ARRAY
43811: GREATEREQUAL
43812: AND
43813: PUSH
43814: LD_VAR 0 5
43818: PPUSH
43819: LD_INT 3
43821: PPUSH
43822: CALL_OW 275
43826: PUSH
43827: LD_VAR 0 4
43831: PUSH
43832: LD_INT 3
43834: ARRAY
43835: GREATEREQUAL
43836: AND
43837: ST_TO_ADDR
// end ;
43838: LD_VAR 0 3
43842: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43843: LD_INT 0
43845: PPUSH
43846: PPUSH
43847: PPUSH
43848: PPUSH
// pom := GetBase ( building ) ;
43849: LD_ADDR_VAR 0 3
43853: PUSH
43854: LD_VAR 0 1
43858: PPUSH
43859: CALL_OW 274
43863: ST_TO_ADDR
// if not pom then
43864: LD_VAR 0 3
43868: NOT
43869: IFFALSE 43873
// exit ;
43871: GO 44043
// btype := GetBType ( building ) ;
43873: LD_ADDR_VAR 0 5
43877: PUSH
43878: LD_VAR 0 1
43882: PPUSH
43883: CALL_OW 266
43887: ST_TO_ADDR
// if btype = b_armoury then
43888: LD_VAR 0 5
43892: PUSH
43893: LD_INT 4
43895: EQUAL
43896: IFFALSE 43906
// btype := b_barracks ;
43898: LD_ADDR_VAR 0 5
43902: PUSH
43903: LD_INT 5
43905: ST_TO_ADDR
// if btype = b_depot then
43906: LD_VAR 0 5
43910: PUSH
43911: LD_INT 0
43913: EQUAL
43914: IFFALSE 43924
// btype := b_warehouse ;
43916: LD_ADDR_VAR 0 5
43920: PUSH
43921: LD_INT 1
43923: ST_TO_ADDR
// if btype = b_workshop then
43924: LD_VAR 0 5
43928: PUSH
43929: LD_INT 2
43931: EQUAL
43932: IFFALSE 43942
// btype := b_factory ;
43934: LD_ADDR_VAR 0 5
43938: PUSH
43939: LD_INT 3
43941: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43942: LD_ADDR_VAR 0 4
43946: PUSH
43947: LD_VAR 0 5
43951: PPUSH
43952: LD_VAR 0 1
43956: PPUSH
43957: CALL_OW 248
43961: PPUSH
43962: CALL_OW 450
43966: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43967: LD_ADDR_VAR 0 2
43971: PUSH
43972: LD_VAR 0 3
43976: PPUSH
43977: LD_INT 1
43979: PPUSH
43980: CALL_OW 275
43984: PUSH
43985: LD_VAR 0 4
43989: PUSH
43990: LD_INT 1
43992: ARRAY
43993: GREATEREQUAL
43994: PUSH
43995: LD_VAR 0 3
43999: PPUSH
44000: LD_INT 2
44002: PPUSH
44003: CALL_OW 275
44007: PUSH
44008: LD_VAR 0 4
44012: PUSH
44013: LD_INT 2
44015: ARRAY
44016: GREATEREQUAL
44017: AND
44018: PUSH
44019: LD_VAR 0 3
44023: PPUSH
44024: LD_INT 3
44026: PPUSH
44027: CALL_OW 275
44031: PUSH
44032: LD_VAR 0 4
44036: PUSH
44037: LD_INT 3
44039: ARRAY
44040: GREATEREQUAL
44041: AND
44042: ST_TO_ADDR
// end ;
44043: LD_VAR 0 2
44047: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
44048: LD_INT 0
44050: PPUSH
44051: PPUSH
44052: PPUSH
// pom := GetBase ( building ) ;
44053: LD_ADDR_VAR 0 4
44057: PUSH
44058: LD_VAR 0 1
44062: PPUSH
44063: CALL_OW 274
44067: ST_TO_ADDR
// if not pom then
44068: LD_VAR 0 4
44072: NOT
44073: IFFALSE 44077
// exit ;
44075: GO 44178
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44077: LD_ADDR_VAR 0 5
44081: PUSH
44082: LD_VAR 0 2
44086: PPUSH
44087: LD_VAR 0 1
44091: PPUSH
44092: CALL_OW 248
44096: PPUSH
44097: CALL_OW 450
44101: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44102: LD_ADDR_VAR 0 3
44106: PUSH
44107: LD_VAR 0 4
44111: PPUSH
44112: LD_INT 1
44114: PPUSH
44115: CALL_OW 275
44119: PUSH
44120: LD_VAR 0 5
44124: PUSH
44125: LD_INT 1
44127: ARRAY
44128: GREATEREQUAL
44129: PUSH
44130: LD_VAR 0 4
44134: PPUSH
44135: LD_INT 2
44137: PPUSH
44138: CALL_OW 275
44142: PUSH
44143: LD_VAR 0 5
44147: PUSH
44148: LD_INT 2
44150: ARRAY
44151: GREATEREQUAL
44152: AND
44153: PUSH
44154: LD_VAR 0 4
44158: PPUSH
44159: LD_INT 3
44161: PPUSH
44162: CALL_OW 275
44166: PUSH
44167: LD_VAR 0 5
44171: PUSH
44172: LD_INT 3
44174: ARRAY
44175: GREATEREQUAL
44176: AND
44177: ST_TO_ADDR
// end ;
44178: LD_VAR 0 3
44182: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
44183: LD_INT 0
44185: PPUSH
44186: PPUSH
44187: PPUSH
44188: PPUSH
44189: PPUSH
44190: PPUSH
44191: PPUSH
44192: PPUSH
44193: PPUSH
44194: PPUSH
44195: PPUSH
// result := false ;
44196: LD_ADDR_VAR 0 8
44200: PUSH
44201: LD_INT 0
44203: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
44204: LD_VAR 0 5
44208: NOT
44209: PUSH
44210: LD_VAR 0 1
44214: NOT
44215: OR
44216: PUSH
44217: LD_VAR 0 2
44221: NOT
44222: OR
44223: PUSH
44224: LD_VAR 0 3
44228: NOT
44229: OR
44230: IFFALSE 44234
// exit ;
44232: GO 45048
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
44234: LD_ADDR_VAR 0 14
44238: PUSH
44239: LD_VAR 0 1
44243: PPUSH
44244: LD_VAR 0 2
44248: PPUSH
44249: LD_VAR 0 3
44253: PPUSH
44254: LD_VAR 0 4
44258: PPUSH
44259: LD_VAR 0 5
44263: PUSH
44264: LD_INT 1
44266: ARRAY
44267: PPUSH
44268: CALL_OW 248
44272: PPUSH
44273: LD_INT 0
44275: PPUSH
44276: CALL 46285 0 6
44280: ST_TO_ADDR
// if not hexes then
44281: LD_VAR 0 14
44285: NOT
44286: IFFALSE 44290
// exit ;
44288: GO 45048
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44290: LD_ADDR_VAR 0 17
44294: PUSH
44295: LD_VAR 0 5
44299: PPUSH
44300: LD_INT 22
44302: PUSH
44303: LD_VAR 0 13
44307: PPUSH
44308: CALL_OW 255
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 2
44319: PUSH
44320: LD_INT 30
44322: PUSH
44323: LD_INT 0
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 30
44332: PUSH
44333: LD_INT 1
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: LIST
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PPUSH
44349: CALL_OW 72
44353: ST_TO_ADDR
// for i = 1 to hexes do
44354: LD_ADDR_VAR 0 9
44358: PUSH
44359: DOUBLE
44360: LD_INT 1
44362: DEC
44363: ST_TO_ADDR
44364: LD_VAR 0 14
44368: PUSH
44369: FOR_TO
44370: IFFALSE 45046
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44372: LD_ADDR_VAR 0 13
44376: PUSH
44377: LD_VAR 0 14
44381: PUSH
44382: LD_VAR 0 9
44386: ARRAY
44387: PUSH
44388: LD_INT 1
44390: ARRAY
44391: PPUSH
44392: LD_VAR 0 14
44396: PUSH
44397: LD_VAR 0 9
44401: ARRAY
44402: PUSH
44403: LD_INT 2
44405: ARRAY
44406: PPUSH
44407: CALL_OW 428
44411: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
44412: LD_VAR 0 14
44416: PUSH
44417: LD_VAR 0 9
44421: ARRAY
44422: PUSH
44423: LD_INT 1
44425: ARRAY
44426: PPUSH
44427: LD_VAR 0 14
44431: PUSH
44432: LD_VAR 0 9
44436: ARRAY
44437: PUSH
44438: LD_INT 2
44440: ARRAY
44441: PPUSH
44442: CALL_OW 351
44446: PUSH
44447: LD_VAR 0 14
44451: PUSH
44452: LD_VAR 0 9
44456: ARRAY
44457: PUSH
44458: LD_INT 1
44460: ARRAY
44461: PPUSH
44462: LD_VAR 0 14
44466: PUSH
44467: LD_VAR 0 9
44471: ARRAY
44472: PUSH
44473: LD_INT 2
44475: ARRAY
44476: PPUSH
44477: CALL_OW 488
44481: NOT
44482: OR
44483: PUSH
44484: LD_VAR 0 13
44488: PPUSH
44489: CALL_OW 247
44493: PUSH
44494: LD_INT 3
44496: EQUAL
44497: OR
44498: IFFALSE 44504
// exit ;
44500: POP
44501: POP
44502: GO 45048
// if not tmp then
44504: LD_VAR 0 13
44508: NOT
44509: IFFALSE 44513
// continue ;
44511: GO 44369
// result := true ;
44513: LD_ADDR_VAR 0 8
44517: PUSH
44518: LD_INT 1
44520: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
44521: LD_VAR 0 6
44525: PUSH
44526: LD_VAR 0 13
44530: PPUSH
44531: CALL_OW 247
44535: PUSH
44536: LD_INT 2
44538: EQUAL
44539: AND
44540: PUSH
44541: LD_VAR 0 13
44545: PPUSH
44546: CALL_OW 263
44550: PUSH
44551: LD_INT 1
44553: EQUAL
44554: AND
44555: IFFALSE 44719
// begin if IsDrivenBy ( tmp ) then
44557: LD_VAR 0 13
44561: PPUSH
44562: CALL_OW 311
44566: IFFALSE 44570
// continue ;
44568: GO 44369
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
44570: LD_VAR 0 6
44574: PPUSH
44575: LD_INT 3
44577: PUSH
44578: LD_INT 60
44580: PUSH
44581: EMPTY
44582: LIST
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 3
44590: PUSH
44591: LD_INT 55
44593: PUSH
44594: EMPTY
44595: LIST
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PPUSH
44605: CALL_OW 72
44609: IFFALSE 44717
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
44611: LD_ADDR_VAR 0 18
44615: PUSH
44616: LD_VAR 0 6
44620: PPUSH
44621: LD_INT 3
44623: PUSH
44624: LD_INT 60
44626: PUSH
44627: EMPTY
44628: LIST
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 3
44636: PUSH
44637: LD_INT 55
44639: PUSH
44640: EMPTY
44641: LIST
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PPUSH
44651: CALL_OW 72
44655: PUSH
44656: LD_INT 1
44658: ARRAY
44659: ST_TO_ADDR
// if IsInUnit ( driver ) then
44660: LD_VAR 0 18
44664: PPUSH
44665: CALL_OW 310
44669: IFFALSE 44680
// ComExit ( driver ) ;
44671: LD_VAR 0 18
44675: PPUSH
44676: CALL 69469 0 1
// AddComEnterUnit ( driver , tmp ) ;
44680: LD_VAR 0 18
44684: PPUSH
44685: LD_VAR 0 13
44689: PPUSH
44690: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
44694: LD_VAR 0 18
44698: PPUSH
44699: LD_VAR 0 7
44703: PPUSH
44704: CALL_OW 173
// AddComExitVehicle ( driver ) ;
44708: LD_VAR 0 18
44712: PPUSH
44713: CALL_OW 181
// end ; continue ;
44717: GO 44369
// end ; if not cleaners or not tmp in cleaners then
44719: LD_VAR 0 6
44723: NOT
44724: PUSH
44725: LD_VAR 0 13
44729: PUSH
44730: LD_VAR 0 6
44734: IN
44735: NOT
44736: OR
44737: IFFALSE 45044
// begin if dep then
44739: LD_VAR 0 17
44743: IFFALSE 44879
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
44745: LD_ADDR_VAR 0 16
44749: PUSH
44750: LD_VAR 0 17
44754: PUSH
44755: LD_INT 1
44757: ARRAY
44758: PPUSH
44759: CALL_OW 250
44763: PPUSH
44764: LD_VAR 0 17
44768: PUSH
44769: LD_INT 1
44771: ARRAY
44772: PPUSH
44773: CALL_OW 254
44777: PPUSH
44778: LD_INT 5
44780: PPUSH
44781: CALL_OW 272
44785: PUSH
44786: LD_VAR 0 17
44790: PUSH
44791: LD_INT 1
44793: ARRAY
44794: PPUSH
44795: CALL_OW 251
44799: PPUSH
44800: LD_VAR 0 17
44804: PUSH
44805: LD_INT 1
44807: ARRAY
44808: PPUSH
44809: CALL_OW 254
44813: PPUSH
44814: LD_INT 5
44816: PPUSH
44817: CALL_OW 273
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44826: LD_VAR 0 16
44830: PUSH
44831: LD_INT 1
44833: ARRAY
44834: PPUSH
44835: LD_VAR 0 16
44839: PUSH
44840: LD_INT 2
44842: ARRAY
44843: PPUSH
44844: CALL_OW 488
44848: IFFALSE 44879
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44850: LD_VAR 0 13
44854: PPUSH
44855: LD_VAR 0 16
44859: PUSH
44860: LD_INT 1
44862: ARRAY
44863: PPUSH
44864: LD_VAR 0 16
44868: PUSH
44869: LD_INT 2
44871: ARRAY
44872: PPUSH
44873: CALL_OW 111
// continue ;
44877: GO 44369
// end ; end ; r := GetDir ( tmp ) ;
44879: LD_ADDR_VAR 0 15
44883: PUSH
44884: LD_VAR 0 13
44888: PPUSH
44889: CALL_OW 254
44893: ST_TO_ADDR
// if r = 5 then
44894: LD_VAR 0 15
44898: PUSH
44899: LD_INT 5
44901: EQUAL
44902: IFFALSE 44912
// r := 0 ;
44904: LD_ADDR_VAR 0 15
44908: PUSH
44909: LD_INT 0
44911: ST_TO_ADDR
// for j = r to 5 do
44912: LD_ADDR_VAR 0 10
44916: PUSH
44917: DOUBLE
44918: LD_VAR 0 15
44922: DEC
44923: ST_TO_ADDR
44924: LD_INT 5
44926: PUSH
44927: FOR_TO
44928: IFFALSE 45042
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44930: LD_ADDR_VAR 0 11
44934: PUSH
44935: LD_VAR 0 13
44939: PPUSH
44940: CALL_OW 250
44944: PPUSH
44945: LD_VAR 0 10
44949: PPUSH
44950: LD_INT 2
44952: PPUSH
44953: CALL_OW 272
44957: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44958: LD_ADDR_VAR 0 12
44962: PUSH
44963: LD_VAR 0 13
44967: PPUSH
44968: CALL_OW 251
44972: PPUSH
44973: LD_VAR 0 10
44977: PPUSH
44978: LD_INT 2
44980: PPUSH
44981: CALL_OW 273
44985: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44986: LD_VAR 0 11
44990: PPUSH
44991: LD_VAR 0 12
44995: PPUSH
44996: CALL_OW 488
45000: PUSH
45001: LD_VAR 0 11
45005: PPUSH
45006: LD_VAR 0 12
45010: PPUSH
45011: CALL_OW 428
45015: NOT
45016: AND
45017: IFFALSE 45040
// begin ComMoveXY ( tmp , _x , _y ) ;
45019: LD_VAR 0 13
45023: PPUSH
45024: LD_VAR 0 11
45028: PPUSH
45029: LD_VAR 0 12
45033: PPUSH
45034: CALL_OW 111
// break ;
45038: GO 45042
// end ; end ;
45040: GO 44927
45042: POP
45043: POP
// end ; end ;
45044: GO 44369
45046: POP
45047: POP
// end ;
45048: LD_VAR 0 8
45052: RET
// export function BuildingTechInvented ( side , btype ) ; begin
45053: LD_INT 0
45055: PPUSH
// result := true ;
45056: LD_ADDR_VAR 0 3
45060: PUSH
45061: LD_INT 1
45063: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
45064: LD_VAR 0 2
45068: PUSH
45069: LD_INT 24
45071: DOUBLE
45072: EQUAL
45073: IFTRUE 45083
45075: LD_INT 33
45077: DOUBLE
45078: EQUAL
45079: IFTRUE 45083
45081: GO 45108
45083: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
45084: LD_ADDR_VAR 0 3
45088: PUSH
45089: LD_INT 32
45091: PPUSH
45092: LD_VAR 0 1
45096: PPUSH
45097: CALL_OW 321
45101: PUSH
45102: LD_INT 2
45104: EQUAL
45105: ST_TO_ADDR
45106: GO 45428
45108: LD_INT 20
45110: DOUBLE
45111: EQUAL
45112: IFTRUE 45116
45114: GO 45141
45116: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
45117: LD_ADDR_VAR 0 3
45121: PUSH
45122: LD_INT 6
45124: PPUSH
45125: LD_VAR 0 1
45129: PPUSH
45130: CALL_OW 321
45134: PUSH
45135: LD_INT 2
45137: EQUAL
45138: ST_TO_ADDR
45139: GO 45428
45141: LD_INT 22
45143: DOUBLE
45144: EQUAL
45145: IFTRUE 45155
45147: LD_INT 36
45149: DOUBLE
45150: EQUAL
45151: IFTRUE 45155
45153: GO 45180
45155: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
45156: LD_ADDR_VAR 0 3
45160: PUSH
45161: LD_INT 15
45163: PPUSH
45164: LD_VAR 0 1
45168: PPUSH
45169: CALL_OW 321
45173: PUSH
45174: LD_INT 2
45176: EQUAL
45177: ST_TO_ADDR
45178: GO 45428
45180: LD_INT 30
45182: DOUBLE
45183: EQUAL
45184: IFTRUE 45188
45186: GO 45213
45188: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
45189: LD_ADDR_VAR 0 3
45193: PUSH
45194: LD_INT 20
45196: PPUSH
45197: LD_VAR 0 1
45201: PPUSH
45202: CALL_OW 321
45206: PUSH
45207: LD_INT 2
45209: EQUAL
45210: ST_TO_ADDR
45211: GO 45428
45213: LD_INT 28
45215: DOUBLE
45216: EQUAL
45217: IFTRUE 45227
45219: LD_INT 21
45221: DOUBLE
45222: EQUAL
45223: IFTRUE 45227
45225: GO 45252
45227: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
45228: LD_ADDR_VAR 0 3
45232: PUSH
45233: LD_INT 21
45235: PPUSH
45236: LD_VAR 0 1
45240: PPUSH
45241: CALL_OW 321
45245: PUSH
45246: LD_INT 2
45248: EQUAL
45249: ST_TO_ADDR
45250: GO 45428
45252: LD_INT 16
45254: DOUBLE
45255: EQUAL
45256: IFTRUE 45260
45258: GO 45287
45260: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
45261: LD_ADDR_VAR 0 3
45265: PUSH
45266: LD_EXP 50
45270: PPUSH
45271: LD_VAR 0 1
45275: PPUSH
45276: CALL_OW 321
45280: PUSH
45281: LD_INT 2
45283: EQUAL
45284: ST_TO_ADDR
45285: GO 45428
45287: LD_INT 19
45289: DOUBLE
45290: EQUAL
45291: IFTRUE 45301
45293: LD_INT 23
45295: DOUBLE
45296: EQUAL
45297: IFTRUE 45301
45299: GO 45328
45301: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
45302: LD_ADDR_VAR 0 3
45306: PUSH
45307: LD_EXP 49
45311: PPUSH
45312: LD_VAR 0 1
45316: PPUSH
45317: CALL_OW 321
45321: PUSH
45322: LD_INT 2
45324: EQUAL
45325: ST_TO_ADDR
45326: GO 45428
45328: LD_INT 17
45330: DOUBLE
45331: EQUAL
45332: IFTRUE 45336
45334: GO 45361
45336: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
45337: LD_ADDR_VAR 0 3
45341: PUSH
45342: LD_INT 39
45344: PPUSH
45345: LD_VAR 0 1
45349: PPUSH
45350: CALL_OW 321
45354: PUSH
45355: LD_INT 2
45357: EQUAL
45358: ST_TO_ADDR
45359: GO 45428
45361: LD_INT 18
45363: DOUBLE
45364: EQUAL
45365: IFTRUE 45369
45367: GO 45394
45369: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
45370: LD_ADDR_VAR 0 3
45374: PUSH
45375: LD_INT 40
45377: PPUSH
45378: LD_VAR 0 1
45382: PPUSH
45383: CALL_OW 321
45387: PUSH
45388: LD_INT 2
45390: EQUAL
45391: ST_TO_ADDR
45392: GO 45428
45394: LD_INT 27
45396: DOUBLE
45397: EQUAL
45398: IFTRUE 45402
45400: GO 45427
45402: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
45403: LD_ADDR_VAR 0 3
45407: PUSH
45408: LD_INT 35
45410: PPUSH
45411: LD_VAR 0 1
45415: PPUSH
45416: CALL_OW 321
45420: PUSH
45421: LD_INT 2
45423: EQUAL
45424: ST_TO_ADDR
45425: GO 45428
45427: POP
// end ;
45428: LD_VAR 0 3
45432: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
45433: LD_INT 0
45435: PPUSH
45436: PPUSH
45437: PPUSH
45438: PPUSH
45439: PPUSH
45440: PPUSH
45441: PPUSH
45442: PPUSH
45443: PPUSH
45444: PPUSH
45445: PPUSH
// result := false ;
45446: LD_ADDR_VAR 0 6
45450: PUSH
45451: LD_INT 0
45453: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
45454: LD_VAR 0 1
45458: NOT
45459: PUSH
45460: LD_VAR 0 1
45464: PPUSH
45465: CALL_OW 266
45469: PUSH
45470: LD_INT 0
45472: PUSH
45473: LD_INT 1
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: IN
45480: NOT
45481: OR
45482: PUSH
45483: LD_VAR 0 2
45487: NOT
45488: OR
45489: PUSH
45490: LD_VAR 0 5
45494: PUSH
45495: LD_INT 0
45497: PUSH
45498: LD_INT 1
45500: PUSH
45501: LD_INT 2
45503: PUSH
45504: LD_INT 3
45506: PUSH
45507: LD_INT 4
45509: PUSH
45510: LD_INT 5
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: IN
45521: NOT
45522: OR
45523: PUSH
45524: LD_VAR 0 3
45528: PPUSH
45529: LD_VAR 0 4
45533: PPUSH
45534: CALL_OW 488
45538: NOT
45539: OR
45540: IFFALSE 45544
// exit ;
45542: GO 46280
// side := GetSide ( depot ) ;
45544: LD_ADDR_VAR 0 9
45548: PUSH
45549: LD_VAR 0 1
45553: PPUSH
45554: CALL_OW 255
45558: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
45559: LD_VAR 0 9
45563: PPUSH
45564: LD_VAR 0 2
45568: PPUSH
45569: CALL 45053 0 2
45573: NOT
45574: IFFALSE 45578
// exit ;
45576: GO 46280
// pom := GetBase ( depot ) ;
45578: LD_ADDR_VAR 0 10
45582: PUSH
45583: LD_VAR 0 1
45587: PPUSH
45588: CALL_OW 274
45592: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45593: LD_ADDR_VAR 0 11
45597: PUSH
45598: LD_VAR 0 2
45602: PPUSH
45603: LD_VAR 0 1
45607: PPUSH
45608: CALL_OW 248
45612: PPUSH
45613: CALL_OW 450
45617: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
45618: LD_VAR 0 10
45622: PPUSH
45623: LD_INT 1
45625: PPUSH
45626: CALL_OW 275
45630: PUSH
45631: LD_VAR 0 11
45635: PUSH
45636: LD_INT 1
45638: ARRAY
45639: GREATEREQUAL
45640: PUSH
45641: LD_VAR 0 10
45645: PPUSH
45646: LD_INT 2
45648: PPUSH
45649: CALL_OW 275
45653: PUSH
45654: LD_VAR 0 11
45658: PUSH
45659: LD_INT 2
45661: ARRAY
45662: GREATEREQUAL
45663: AND
45664: PUSH
45665: LD_VAR 0 10
45669: PPUSH
45670: LD_INT 3
45672: PPUSH
45673: CALL_OW 275
45677: PUSH
45678: LD_VAR 0 11
45682: PUSH
45683: LD_INT 3
45685: ARRAY
45686: GREATEREQUAL
45687: AND
45688: NOT
45689: IFFALSE 45693
// exit ;
45691: GO 46280
// if GetBType ( depot ) = b_depot then
45693: LD_VAR 0 1
45697: PPUSH
45698: CALL_OW 266
45702: PUSH
45703: LD_INT 0
45705: EQUAL
45706: IFFALSE 45718
// dist := 28 else
45708: LD_ADDR_VAR 0 14
45712: PUSH
45713: LD_INT 28
45715: ST_TO_ADDR
45716: GO 45726
// dist := 36 ;
45718: LD_ADDR_VAR 0 14
45722: PUSH
45723: LD_INT 36
45725: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
45726: LD_VAR 0 1
45730: PPUSH
45731: LD_VAR 0 3
45735: PPUSH
45736: LD_VAR 0 4
45740: PPUSH
45741: CALL_OW 297
45745: PUSH
45746: LD_VAR 0 14
45750: GREATER
45751: IFFALSE 45755
// exit ;
45753: GO 46280
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45755: LD_ADDR_VAR 0 12
45759: PUSH
45760: LD_VAR 0 2
45764: PPUSH
45765: LD_VAR 0 3
45769: PPUSH
45770: LD_VAR 0 4
45774: PPUSH
45775: LD_VAR 0 5
45779: PPUSH
45780: LD_VAR 0 1
45784: PPUSH
45785: CALL_OW 248
45789: PPUSH
45790: LD_INT 0
45792: PPUSH
45793: CALL 46285 0 6
45797: ST_TO_ADDR
// if not hexes then
45798: LD_VAR 0 12
45802: NOT
45803: IFFALSE 45807
// exit ;
45805: GO 46280
// hex := GetHexInfo ( x , y ) ;
45807: LD_ADDR_VAR 0 15
45811: PUSH
45812: LD_VAR 0 3
45816: PPUSH
45817: LD_VAR 0 4
45821: PPUSH
45822: CALL_OW 546
45826: ST_TO_ADDR
// if hex [ 1 ] then
45827: LD_VAR 0 15
45831: PUSH
45832: LD_INT 1
45834: ARRAY
45835: IFFALSE 45839
// exit ;
45837: GO 46280
// height := hex [ 2 ] ;
45839: LD_ADDR_VAR 0 13
45843: PUSH
45844: LD_VAR 0 15
45848: PUSH
45849: LD_INT 2
45851: ARRAY
45852: ST_TO_ADDR
// for i = 1 to hexes do
45853: LD_ADDR_VAR 0 7
45857: PUSH
45858: DOUBLE
45859: LD_INT 1
45861: DEC
45862: ST_TO_ADDR
45863: LD_VAR 0 12
45867: PUSH
45868: FOR_TO
45869: IFFALSE 46199
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45871: LD_VAR 0 12
45875: PUSH
45876: LD_VAR 0 7
45880: ARRAY
45881: PUSH
45882: LD_INT 1
45884: ARRAY
45885: PPUSH
45886: LD_VAR 0 12
45890: PUSH
45891: LD_VAR 0 7
45895: ARRAY
45896: PUSH
45897: LD_INT 2
45899: ARRAY
45900: PPUSH
45901: CALL_OW 488
45905: NOT
45906: PUSH
45907: LD_VAR 0 12
45911: PUSH
45912: LD_VAR 0 7
45916: ARRAY
45917: PUSH
45918: LD_INT 1
45920: ARRAY
45921: PPUSH
45922: LD_VAR 0 12
45926: PUSH
45927: LD_VAR 0 7
45931: ARRAY
45932: PUSH
45933: LD_INT 2
45935: ARRAY
45936: PPUSH
45937: CALL_OW 428
45941: PUSH
45942: LD_INT 0
45944: GREATER
45945: OR
45946: PUSH
45947: LD_VAR 0 12
45951: PUSH
45952: LD_VAR 0 7
45956: ARRAY
45957: PUSH
45958: LD_INT 1
45960: ARRAY
45961: PPUSH
45962: LD_VAR 0 12
45966: PUSH
45967: LD_VAR 0 7
45971: ARRAY
45972: PUSH
45973: LD_INT 2
45975: ARRAY
45976: PPUSH
45977: CALL_OW 351
45981: OR
45982: IFFALSE 45988
// exit ;
45984: POP
45985: POP
45986: GO 46280
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45988: LD_ADDR_VAR 0 8
45992: PUSH
45993: LD_VAR 0 12
45997: PUSH
45998: LD_VAR 0 7
46002: ARRAY
46003: PUSH
46004: LD_INT 1
46006: ARRAY
46007: PPUSH
46008: LD_VAR 0 12
46012: PUSH
46013: LD_VAR 0 7
46017: ARRAY
46018: PUSH
46019: LD_INT 2
46021: ARRAY
46022: PPUSH
46023: CALL_OW 546
46027: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
46028: LD_VAR 0 8
46032: PUSH
46033: LD_INT 1
46035: ARRAY
46036: PUSH
46037: LD_VAR 0 8
46041: PUSH
46042: LD_INT 2
46044: ARRAY
46045: PUSH
46046: LD_VAR 0 13
46050: PUSH
46051: LD_INT 2
46053: PLUS
46054: GREATER
46055: OR
46056: PUSH
46057: LD_VAR 0 8
46061: PUSH
46062: LD_INT 2
46064: ARRAY
46065: PUSH
46066: LD_VAR 0 13
46070: PUSH
46071: LD_INT 2
46073: MINUS
46074: LESS
46075: OR
46076: PUSH
46077: LD_VAR 0 8
46081: PUSH
46082: LD_INT 3
46084: ARRAY
46085: PUSH
46086: LD_INT 0
46088: PUSH
46089: LD_INT 8
46091: PUSH
46092: LD_INT 9
46094: PUSH
46095: LD_INT 10
46097: PUSH
46098: LD_INT 11
46100: PUSH
46101: LD_INT 12
46103: PUSH
46104: LD_INT 13
46106: PUSH
46107: LD_INT 16
46109: PUSH
46110: LD_INT 17
46112: PUSH
46113: LD_INT 18
46115: PUSH
46116: LD_INT 19
46118: PUSH
46119: LD_INT 20
46121: PUSH
46122: LD_INT 21
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: IN
46140: NOT
46141: OR
46142: PUSH
46143: LD_VAR 0 8
46147: PUSH
46148: LD_INT 5
46150: ARRAY
46151: NOT
46152: OR
46153: PUSH
46154: LD_VAR 0 8
46158: PUSH
46159: LD_INT 6
46161: ARRAY
46162: PUSH
46163: LD_INT 1
46165: PUSH
46166: LD_INT 2
46168: PUSH
46169: LD_INT 7
46171: PUSH
46172: LD_INT 9
46174: PUSH
46175: LD_INT 10
46177: PUSH
46178: LD_INT 11
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: IN
46189: NOT
46190: OR
46191: IFFALSE 46197
// exit ;
46193: POP
46194: POP
46195: GO 46280
// end ;
46197: GO 45868
46199: POP
46200: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
46201: LD_VAR 0 9
46205: PPUSH
46206: LD_VAR 0 3
46210: PPUSH
46211: LD_VAR 0 4
46215: PPUSH
46216: LD_INT 20
46218: PPUSH
46219: CALL 38226 0 4
46223: PUSH
46224: LD_INT 4
46226: ARRAY
46227: IFFALSE 46231
// exit ;
46229: GO 46280
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
46231: LD_VAR 0 2
46235: PUSH
46236: LD_INT 29
46238: PUSH
46239: LD_INT 30
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: IN
46246: PUSH
46247: LD_VAR 0 3
46251: PPUSH
46252: LD_VAR 0 4
46256: PPUSH
46257: LD_VAR 0 9
46261: PPUSH
46262: CALL_OW 440
46266: NOT
46267: AND
46268: IFFALSE 46272
// exit ;
46270: GO 46280
// result := true ;
46272: LD_ADDR_VAR 0 6
46276: PUSH
46277: LD_INT 1
46279: ST_TO_ADDR
// end ;
46280: LD_VAR 0 6
46284: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
46285: LD_INT 0
46287: PPUSH
46288: PPUSH
46289: PPUSH
46290: PPUSH
46291: PPUSH
46292: PPUSH
46293: PPUSH
46294: PPUSH
46295: PPUSH
46296: PPUSH
46297: PPUSH
46298: PPUSH
46299: PPUSH
46300: PPUSH
46301: PPUSH
46302: PPUSH
46303: PPUSH
46304: PPUSH
46305: PPUSH
46306: PPUSH
46307: PPUSH
46308: PPUSH
46309: PPUSH
46310: PPUSH
46311: PPUSH
46312: PPUSH
46313: PPUSH
46314: PPUSH
46315: PPUSH
46316: PPUSH
46317: PPUSH
46318: PPUSH
46319: PPUSH
46320: PPUSH
46321: PPUSH
46322: PPUSH
46323: PPUSH
46324: PPUSH
46325: PPUSH
46326: PPUSH
46327: PPUSH
46328: PPUSH
46329: PPUSH
46330: PPUSH
46331: PPUSH
46332: PPUSH
46333: PPUSH
46334: PPUSH
46335: PPUSH
46336: PPUSH
46337: PPUSH
46338: PPUSH
46339: PPUSH
46340: PPUSH
46341: PPUSH
46342: PPUSH
46343: PPUSH
46344: PPUSH
// result = [ ] ;
46345: LD_ADDR_VAR 0 7
46349: PUSH
46350: EMPTY
46351: ST_TO_ADDR
// temp_list = [ ] ;
46352: LD_ADDR_VAR 0 9
46356: PUSH
46357: EMPTY
46358: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
46359: LD_VAR 0 4
46363: PUSH
46364: LD_INT 0
46366: PUSH
46367: LD_INT 1
46369: PUSH
46370: LD_INT 2
46372: PUSH
46373: LD_INT 3
46375: PUSH
46376: LD_INT 4
46378: PUSH
46379: LD_INT 5
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: IN
46390: NOT
46391: PUSH
46392: LD_VAR 0 1
46396: PUSH
46397: LD_INT 0
46399: PUSH
46400: LD_INT 1
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: IN
46407: PUSH
46408: LD_VAR 0 5
46412: PUSH
46413: LD_INT 1
46415: PUSH
46416: LD_INT 2
46418: PUSH
46419: LD_INT 3
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: LIST
46426: IN
46427: NOT
46428: AND
46429: OR
46430: IFFALSE 46434
// exit ;
46432: GO 64825
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
46434: LD_VAR 0 1
46438: PUSH
46439: LD_INT 6
46441: PUSH
46442: LD_INT 7
46444: PUSH
46445: LD_INT 8
46447: PUSH
46448: LD_INT 13
46450: PUSH
46451: LD_INT 12
46453: PUSH
46454: LD_INT 15
46456: PUSH
46457: LD_INT 11
46459: PUSH
46460: LD_INT 14
46462: PUSH
46463: LD_INT 10
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: IN
46477: IFFALSE 46487
// btype = b_lab ;
46479: LD_ADDR_VAR 0 1
46483: PUSH
46484: LD_INT 6
46486: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
46487: LD_VAR 0 6
46491: PUSH
46492: LD_INT 0
46494: PUSH
46495: LD_INT 1
46497: PUSH
46498: LD_INT 2
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: LIST
46505: IN
46506: NOT
46507: PUSH
46508: LD_VAR 0 1
46512: PUSH
46513: LD_INT 0
46515: PUSH
46516: LD_INT 1
46518: PUSH
46519: LD_INT 2
46521: PUSH
46522: LD_INT 3
46524: PUSH
46525: LD_INT 6
46527: PUSH
46528: LD_INT 36
46530: PUSH
46531: LD_INT 4
46533: PUSH
46534: LD_INT 5
46536: PUSH
46537: LD_INT 31
46539: PUSH
46540: LD_INT 32
46542: PUSH
46543: LD_INT 33
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: IN
46559: NOT
46560: PUSH
46561: LD_VAR 0 6
46565: PUSH
46566: LD_INT 1
46568: EQUAL
46569: AND
46570: OR
46571: PUSH
46572: LD_VAR 0 1
46576: PUSH
46577: LD_INT 2
46579: PUSH
46580: LD_INT 3
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: IN
46587: NOT
46588: PUSH
46589: LD_VAR 0 6
46593: PUSH
46594: LD_INT 2
46596: EQUAL
46597: AND
46598: OR
46599: IFFALSE 46609
// mode = 0 ;
46601: LD_ADDR_VAR 0 6
46605: PUSH
46606: LD_INT 0
46608: ST_TO_ADDR
// case mode of 0 :
46609: LD_VAR 0 6
46613: PUSH
46614: LD_INT 0
46616: DOUBLE
46617: EQUAL
46618: IFTRUE 46622
46620: GO 58075
46622: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46623: LD_ADDR_VAR 0 11
46627: PUSH
46628: LD_INT 0
46630: PUSH
46631: LD_INT 0
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 0
46640: PUSH
46641: LD_INT 1
46643: NEG
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 1
46651: PUSH
46652: LD_INT 0
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 1
46661: PUSH
46662: LD_INT 1
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 0
46671: PUSH
46672: LD_INT 1
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 1
46681: NEG
46682: PUSH
46683: LD_INT 0
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 1
46692: NEG
46693: PUSH
46694: LD_INT 1
46696: NEG
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 1
46704: NEG
46705: PUSH
46706: LD_INT 2
46708: NEG
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 0
46716: PUSH
46717: LD_INT 2
46719: NEG
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 1
46727: PUSH
46728: LD_INT 1
46730: NEG
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 1
46738: PUSH
46739: LD_INT 2
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 0
46748: PUSH
46749: LD_INT 2
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 1
46758: NEG
46759: PUSH
46760: LD_INT 1
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 1
46769: PUSH
46770: LD_INT 3
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 0
46779: PUSH
46780: LD_INT 3
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 1
46789: NEG
46790: PUSH
46791: LD_INT 2
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46816: LD_ADDR_VAR 0 12
46820: PUSH
46821: LD_INT 0
46823: PUSH
46824: LD_INT 0
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 0
46833: PUSH
46834: LD_INT 1
46836: NEG
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 1
46844: PUSH
46845: LD_INT 0
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 1
46854: PUSH
46855: LD_INT 1
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 0
46864: PUSH
46865: LD_INT 1
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 1
46874: NEG
46875: PUSH
46876: LD_INT 0
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 1
46885: NEG
46886: PUSH
46887: LD_INT 1
46889: NEG
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 1
46897: PUSH
46898: LD_INT 1
46900: NEG
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 2
46908: PUSH
46909: LD_INT 0
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 2
46918: PUSH
46919: LD_INT 1
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 1
46928: NEG
46929: PUSH
46930: LD_INT 1
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 2
46939: NEG
46940: PUSH
46941: LD_INT 0
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 2
46950: NEG
46951: PUSH
46952: LD_INT 1
46954: NEG
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: LD_INT 2
46962: NEG
46963: PUSH
46964: LD_INT 1
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 3
46973: NEG
46974: PUSH
46975: LD_INT 0
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 3
46984: NEG
46985: PUSH
46986: LD_INT 1
46988: NEG
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47012: LD_ADDR_VAR 0 13
47016: PUSH
47017: LD_INT 0
47019: PUSH
47020: LD_INT 0
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 0
47029: PUSH
47030: LD_INT 1
47032: NEG
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 1
47040: PUSH
47041: LD_INT 0
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 1
47050: PUSH
47051: LD_INT 1
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 0
47060: PUSH
47061: LD_INT 1
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 1
47070: NEG
47071: PUSH
47072: LD_INT 0
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 1
47081: NEG
47082: PUSH
47083: LD_INT 1
47085: NEG
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 1
47093: NEG
47094: PUSH
47095: LD_INT 2
47097: NEG
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 2
47105: PUSH
47106: LD_INT 1
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 2
47115: PUSH
47116: LD_INT 2
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 1
47125: PUSH
47126: LD_INT 2
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 2
47135: NEG
47136: PUSH
47137: LD_INT 1
47139: NEG
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 2
47147: NEG
47148: PUSH
47149: LD_INT 2
47151: NEG
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 2
47159: NEG
47160: PUSH
47161: LD_INT 3
47163: NEG
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 3
47171: NEG
47172: PUSH
47173: LD_INT 2
47175: NEG
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 3
47183: NEG
47184: PUSH
47185: LD_INT 3
47187: NEG
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: LIST
47210: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47211: LD_ADDR_VAR 0 14
47215: PUSH
47216: LD_INT 0
47218: PUSH
47219: LD_INT 0
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 0
47228: PUSH
47229: LD_INT 1
47231: NEG
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 1
47239: PUSH
47240: LD_INT 0
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 1
47249: PUSH
47250: LD_INT 1
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 0
47259: PUSH
47260: LD_INT 1
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 1
47269: NEG
47270: PUSH
47271: LD_INT 0
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 1
47280: NEG
47281: PUSH
47282: LD_INT 1
47284: NEG
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 1
47292: NEG
47293: PUSH
47294: LD_INT 2
47296: NEG
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 0
47304: PUSH
47305: LD_INT 2
47307: NEG
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 1
47315: PUSH
47316: LD_INT 1
47318: NEG
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 1
47326: PUSH
47327: LD_INT 2
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 0
47336: PUSH
47337: LD_INT 2
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 1
47346: NEG
47347: PUSH
47348: LD_INT 1
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 1
47357: NEG
47358: PUSH
47359: LD_INT 3
47361: NEG
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 0
47369: PUSH
47370: LD_INT 3
47372: NEG
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 1
47380: PUSH
47381: LD_INT 2
47383: NEG
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47407: LD_ADDR_VAR 0 15
47411: PUSH
47412: LD_INT 0
47414: PUSH
47415: LD_INT 0
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 0
47424: PUSH
47425: LD_INT 1
47427: NEG
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 1
47435: PUSH
47436: LD_INT 0
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 1
47445: PUSH
47446: LD_INT 1
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 0
47455: PUSH
47456: LD_INT 1
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 1
47465: NEG
47466: PUSH
47467: LD_INT 0
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 1
47476: NEG
47477: PUSH
47478: LD_INT 1
47480: NEG
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 1
47488: PUSH
47489: LD_INT 1
47491: NEG
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 2
47499: PUSH
47500: LD_INT 0
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 2
47509: PUSH
47510: LD_INT 1
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 1
47519: NEG
47520: PUSH
47521: LD_INT 1
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 2
47530: NEG
47531: PUSH
47532: LD_INT 0
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 2
47541: NEG
47542: PUSH
47543: LD_INT 1
47545: NEG
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 2
47553: PUSH
47554: LD_INT 1
47556: NEG
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 3
47564: PUSH
47565: LD_INT 0
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 3
47574: PUSH
47575: LD_INT 1
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47600: LD_ADDR_VAR 0 16
47604: PUSH
47605: LD_INT 0
47607: PUSH
47608: LD_INT 0
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 0
47617: PUSH
47618: LD_INT 1
47620: NEG
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 1
47628: PUSH
47629: LD_INT 0
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 1
47638: PUSH
47639: LD_INT 1
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 0
47648: PUSH
47649: LD_INT 1
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 1
47658: NEG
47659: PUSH
47660: LD_INT 0
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 1
47669: NEG
47670: PUSH
47671: LD_INT 1
47673: NEG
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 1
47681: NEG
47682: PUSH
47683: LD_INT 2
47685: NEG
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 2
47693: PUSH
47694: LD_INT 1
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 2
47703: PUSH
47704: LD_INT 2
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 1
47713: PUSH
47714: LD_INT 2
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 2
47723: NEG
47724: PUSH
47725: LD_INT 1
47727: NEG
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 2
47735: NEG
47736: PUSH
47737: LD_INT 2
47739: NEG
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 3
47747: PUSH
47748: LD_INT 2
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 3
47757: PUSH
47758: LD_INT 3
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 2
47767: PUSH
47768: LD_INT 3
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47793: LD_ADDR_VAR 0 17
47797: PUSH
47798: LD_INT 0
47800: PUSH
47801: LD_INT 0
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 0
47810: PUSH
47811: LD_INT 1
47813: NEG
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 1
47821: PUSH
47822: LD_INT 0
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 1
47831: PUSH
47832: LD_INT 1
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 0
47841: PUSH
47842: LD_INT 1
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 1
47851: NEG
47852: PUSH
47853: LD_INT 0
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 1
47862: NEG
47863: PUSH
47864: LD_INT 1
47866: NEG
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 1
47874: NEG
47875: PUSH
47876: LD_INT 2
47878: NEG
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 0
47886: PUSH
47887: LD_INT 2
47889: NEG
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 1
47897: PUSH
47898: LD_INT 1
47900: NEG
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 2
47908: PUSH
47909: LD_INT 0
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 2
47918: PUSH
47919: LD_INT 1
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 2
47928: PUSH
47929: LD_INT 2
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 1
47938: PUSH
47939: LD_INT 2
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 0
47948: PUSH
47949: LD_INT 2
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 1
47958: NEG
47959: PUSH
47960: LD_INT 1
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 2
47969: NEG
47970: PUSH
47971: LD_INT 0
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 2
47980: NEG
47981: PUSH
47982: LD_INT 1
47984: NEG
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 2
47992: NEG
47993: PUSH
47994: LD_INT 2
47996: NEG
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48023: LD_ADDR_VAR 0 18
48027: PUSH
48028: LD_INT 0
48030: PUSH
48031: LD_INT 0
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 0
48040: PUSH
48041: LD_INT 1
48043: NEG
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 1
48051: PUSH
48052: LD_INT 0
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 1
48061: PUSH
48062: LD_INT 1
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 0
48071: PUSH
48072: LD_INT 1
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 1
48081: NEG
48082: PUSH
48083: LD_INT 0
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 1
48092: NEG
48093: PUSH
48094: LD_INT 1
48096: NEG
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 1
48104: NEG
48105: PUSH
48106: LD_INT 2
48108: NEG
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 0
48116: PUSH
48117: LD_INT 2
48119: NEG
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 1
48127: PUSH
48128: LD_INT 1
48130: NEG
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 2
48138: PUSH
48139: LD_INT 0
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 2
48148: PUSH
48149: LD_INT 1
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 2
48158: PUSH
48159: LD_INT 2
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 1
48168: PUSH
48169: LD_INT 2
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: LD_INT 0
48178: PUSH
48179: LD_INT 2
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 1
48188: NEG
48189: PUSH
48190: LD_INT 1
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 2
48199: NEG
48200: PUSH
48201: LD_INT 0
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 2
48210: NEG
48211: PUSH
48212: LD_INT 1
48214: NEG
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 2
48222: NEG
48223: PUSH
48224: LD_INT 2
48226: NEG
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48253: LD_ADDR_VAR 0 19
48257: PUSH
48258: LD_INT 0
48260: PUSH
48261: LD_INT 0
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 0
48270: PUSH
48271: LD_INT 1
48273: NEG
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 1
48281: PUSH
48282: LD_INT 0
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 1
48291: PUSH
48292: LD_INT 1
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 0
48301: PUSH
48302: LD_INT 1
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 1
48311: NEG
48312: PUSH
48313: LD_INT 0
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 1
48322: NEG
48323: PUSH
48324: LD_INT 1
48326: NEG
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 1
48334: NEG
48335: PUSH
48336: LD_INT 2
48338: NEG
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 0
48346: PUSH
48347: LD_INT 2
48349: NEG
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 1
48357: PUSH
48358: LD_INT 1
48360: NEG
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 2
48368: PUSH
48369: LD_INT 0
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 2
48378: PUSH
48379: LD_INT 1
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 2
48388: PUSH
48389: LD_INT 2
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 1
48398: PUSH
48399: LD_INT 2
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 0
48408: PUSH
48409: LD_INT 2
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 1
48418: NEG
48419: PUSH
48420: LD_INT 1
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 2
48429: NEG
48430: PUSH
48431: LD_INT 0
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 2
48440: NEG
48441: PUSH
48442: LD_INT 1
48444: NEG
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 2
48452: NEG
48453: PUSH
48454: LD_INT 2
48456: NEG
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48483: LD_ADDR_VAR 0 20
48487: PUSH
48488: LD_INT 0
48490: PUSH
48491: LD_INT 0
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 0
48500: PUSH
48501: LD_INT 1
48503: NEG
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 1
48511: PUSH
48512: LD_INT 0
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 1
48521: PUSH
48522: LD_INT 1
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 0
48531: PUSH
48532: LD_INT 1
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 1
48541: NEG
48542: PUSH
48543: LD_INT 0
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: LD_INT 1
48552: NEG
48553: PUSH
48554: LD_INT 1
48556: NEG
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 1
48564: NEG
48565: PUSH
48566: LD_INT 2
48568: NEG
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 0
48576: PUSH
48577: LD_INT 2
48579: NEG
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 1
48587: PUSH
48588: LD_INT 1
48590: NEG
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 2
48598: PUSH
48599: LD_INT 0
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 2
48608: PUSH
48609: LD_INT 1
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 2
48618: PUSH
48619: LD_INT 2
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 1
48628: PUSH
48629: LD_INT 2
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 0
48638: PUSH
48639: LD_INT 2
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 1
48648: NEG
48649: PUSH
48650: LD_INT 1
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 2
48659: NEG
48660: PUSH
48661: LD_INT 0
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: LD_INT 2
48670: NEG
48671: PUSH
48672: LD_INT 1
48674: NEG
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 2
48682: NEG
48683: PUSH
48684: LD_INT 2
48686: NEG
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48713: LD_ADDR_VAR 0 21
48717: PUSH
48718: LD_INT 0
48720: PUSH
48721: LD_INT 0
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 0
48730: PUSH
48731: LD_INT 1
48733: NEG
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 1
48741: PUSH
48742: LD_INT 0
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 1
48751: PUSH
48752: LD_INT 1
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 0
48761: PUSH
48762: LD_INT 1
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 1
48771: NEG
48772: PUSH
48773: LD_INT 0
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 1
48782: NEG
48783: PUSH
48784: LD_INT 1
48786: NEG
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 1
48794: NEG
48795: PUSH
48796: LD_INT 2
48798: NEG
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 0
48806: PUSH
48807: LD_INT 2
48809: NEG
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 1
48817: PUSH
48818: LD_INT 1
48820: NEG
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 2
48828: PUSH
48829: LD_INT 0
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 2
48838: PUSH
48839: LD_INT 1
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 2
48848: PUSH
48849: LD_INT 2
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 1
48858: PUSH
48859: LD_INT 2
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 0
48868: PUSH
48869: LD_INT 2
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 1
48878: NEG
48879: PUSH
48880: LD_INT 1
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 2
48889: NEG
48890: PUSH
48891: LD_INT 0
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 2
48900: NEG
48901: PUSH
48902: LD_INT 1
48904: NEG
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 2
48912: NEG
48913: PUSH
48914: LD_INT 2
48916: NEG
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48943: LD_ADDR_VAR 0 22
48947: PUSH
48948: LD_INT 0
48950: PUSH
48951: LD_INT 0
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 0
48960: PUSH
48961: LD_INT 1
48963: NEG
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 1
48971: PUSH
48972: LD_INT 0
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 1
48981: PUSH
48982: LD_INT 1
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 0
48991: PUSH
48992: LD_INT 1
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 1
49001: NEG
49002: PUSH
49003: LD_INT 0
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 1
49012: NEG
49013: PUSH
49014: LD_INT 1
49016: NEG
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 1
49024: NEG
49025: PUSH
49026: LD_INT 2
49028: NEG
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 0
49036: PUSH
49037: LD_INT 2
49039: NEG
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 1
49047: PUSH
49048: LD_INT 1
49050: NEG
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 2
49058: PUSH
49059: LD_INT 0
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 2
49068: PUSH
49069: LD_INT 1
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 2
49078: PUSH
49079: LD_INT 2
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 1
49088: PUSH
49089: LD_INT 2
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 0
49098: PUSH
49099: LD_INT 2
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 1
49108: NEG
49109: PUSH
49110: LD_INT 1
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 2
49119: NEG
49120: PUSH
49121: LD_INT 0
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 2
49130: NEG
49131: PUSH
49132: LD_INT 1
49134: NEG
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 2
49142: NEG
49143: PUSH
49144: LD_INT 2
49146: NEG
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49173: LD_ADDR_VAR 0 23
49177: PUSH
49178: LD_INT 0
49180: PUSH
49181: LD_INT 0
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 0
49190: PUSH
49191: LD_INT 1
49193: NEG
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 1
49201: PUSH
49202: LD_INT 0
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 1
49211: PUSH
49212: LD_INT 1
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 0
49221: PUSH
49222: LD_INT 1
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 1
49231: NEG
49232: PUSH
49233: LD_INT 0
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 1
49242: NEG
49243: PUSH
49244: LD_INT 1
49246: NEG
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 1
49254: NEG
49255: PUSH
49256: LD_INT 2
49258: NEG
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 0
49266: PUSH
49267: LD_INT 2
49269: NEG
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 1
49277: PUSH
49278: LD_INT 1
49280: NEG
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 2
49288: PUSH
49289: LD_INT 0
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 2
49298: PUSH
49299: LD_INT 1
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 2
49308: PUSH
49309: LD_INT 2
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 1
49318: PUSH
49319: LD_INT 2
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 0
49328: PUSH
49329: LD_INT 2
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 1
49338: NEG
49339: PUSH
49340: LD_INT 1
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 2
49349: NEG
49350: PUSH
49351: LD_INT 0
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 2
49360: NEG
49361: PUSH
49362: LD_INT 1
49364: NEG
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 2
49372: NEG
49373: PUSH
49374: LD_INT 2
49376: NEG
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 2
49384: NEG
49385: PUSH
49386: LD_INT 3
49388: NEG
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 1
49396: NEG
49397: PUSH
49398: LD_INT 3
49400: NEG
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 1
49408: PUSH
49409: LD_INT 2
49411: NEG
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 2
49419: PUSH
49420: LD_INT 1
49422: NEG
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
49453: LD_ADDR_VAR 0 24
49457: PUSH
49458: LD_INT 0
49460: PUSH
49461: LD_INT 0
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 0
49470: PUSH
49471: LD_INT 1
49473: NEG
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 1
49481: PUSH
49482: LD_INT 0
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: LD_INT 1
49491: PUSH
49492: LD_INT 1
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 0
49501: PUSH
49502: LD_INT 1
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 1
49511: NEG
49512: PUSH
49513: LD_INT 0
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 1
49522: NEG
49523: PUSH
49524: LD_INT 1
49526: NEG
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 1
49534: NEG
49535: PUSH
49536: LD_INT 2
49538: NEG
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 0
49546: PUSH
49547: LD_INT 2
49549: NEG
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 1
49557: PUSH
49558: LD_INT 1
49560: NEG
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 2
49568: PUSH
49569: LD_INT 0
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 2
49578: PUSH
49579: LD_INT 1
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 2
49588: PUSH
49589: LD_INT 2
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 1
49598: PUSH
49599: LD_INT 2
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 0
49608: PUSH
49609: LD_INT 2
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 1
49618: NEG
49619: PUSH
49620: LD_INT 1
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 2
49629: NEG
49630: PUSH
49631: LD_INT 0
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 2
49640: NEG
49641: PUSH
49642: LD_INT 1
49644: NEG
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 2
49652: NEG
49653: PUSH
49654: LD_INT 2
49656: NEG
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 1
49664: PUSH
49665: LD_INT 2
49667: NEG
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 2
49675: PUSH
49676: LD_INT 1
49678: NEG
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 3
49686: PUSH
49687: LD_INT 1
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 3
49696: PUSH
49697: LD_INT 2
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
49729: LD_ADDR_VAR 0 25
49733: PUSH
49734: LD_INT 0
49736: PUSH
49737: LD_INT 0
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 0
49746: PUSH
49747: LD_INT 1
49749: NEG
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 1
49757: PUSH
49758: LD_INT 0
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 1
49767: PUSH
49768: LD_INT 1
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 0
49777: PUSH
49778: LD_INT 1
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 1
49787: NEG
49788: PUSH
49789: LD_INT 0
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 1
49798: NEG
49799: PUSH
49800: LD_INT 1
49802: NEG
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 1
49810: NEG
49811: PUSH
49812: LD_INT 2
49814: NEG
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 0
49822: PUSH
49823: LD_INT 2
49825: NEG
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 1
49833: PUSH
49834: LD_INT 1
49836: NEG
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 2
49844: PUSH
49845: LD_INT 0
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 2
49854: PUSH
49855: LD_INT 1
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 2
49864: PUSH
49865: LD_INT 2
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 1
49874: PUSH
49875: LD_INT 2
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 0
49884: PUSH
49885: LD_INT 2
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 1
49894: NEG
49895: PUSH
49896: LD_INT 1
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 2
49905: NEG
49906: PUSH
49907: LD_INT 0
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 2
49916: NEG
49917: PUSH
49918: LD_INT 1
49920: NEG
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 2
49928: NEG
49929: PUSH
49930: LD_INT 2
49932: NEG
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 3
49940: PUSH
49941: LD_INT 1
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 3
49950: PUSH
49951: LD_INT 2
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 2
49960: PUSH
49961: LD_INT 3
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 1
49970: PUSH
49971: LD_INT 3
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50003: LD_ADDR_VAR 0 26
50007: PUSH
50008: LD_INT 0
50010: PUSH
50011: LD_INT 0
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 0
50020: PUSH
50021: LD_INT 1
50023: NEG
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 1
50031: PUSH
50032: LD_INT 0
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 1
50041: PUSH
50042: LD_INT 1
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 0
50051: PUSH
50052: LD_INT 1
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 1
50061: NEG
50062: PUSH
50063: LD_INT 0
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 1
50072: NEG
50073: PUSH
50074: LD_INT 1
50076: NEG
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 1
50084: NEG
50085: PUSH
50086: LD_INT 2
50088: NEG
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 0
50096: PUSH
50097: LD_INT 2
50099: NEG
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 1
50107: PUSH
50108: LD_INT 1
50110: NEG
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 2
50118: PUSH
50119: LD_INT 0
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 2
50128: PUSH
50129: LD_INT 1
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 2
50138: PUSH
50139: LD_INT 2
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 1
50148: PUSH
50149: LD_INT 2
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 0
50158: PUSH
50159: LD_INT 2
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 1
50168: NEG
50169: PUSH
50170: LD_INT 1
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 2
50179: NEG
50180: PUSH
50181: LD_INT 0
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 2
50190: NEG
50191: PUSH
50192: LD_INT 1
50194: NEG
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 2
50202: NEG
50203: PUSH
50204: LD_INT 2
50206: NEG
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 2
50214: PUSH
50215: LD_INT 3
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 1
50224: PUSH
50225: LD_INT 3
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 1
50234: NEG
50235: PUSH
50236: LD_INT 2
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 2
50245: NEG
50246: PUSH
50247: LD_INT 1
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50279: LD_ADDR_VAR 0 27
50283: PUSH
50284: LD_INT 0
50286: PUSH
50287: LD_INT 0
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 0
50296: PUSH
50297: LD_INT 1
50299: NEG
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 1
50307: PUSH
50308: LD_INT 0
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 1
50317: PUSH
50318: LD_INT 1
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 0
50327: PUSH
50328: LD_INT 1
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 1
50337: NEG
50338: PUSH
50339: LD_INT 0
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 1
50348: NEG
50349: PUSH
50350: LD_INT 1
50352: NEG
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 1
50360: NEG
50361: PUSH
50362: LD_INT 2
50364: NEG
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 0
50372: PUSH
50373: LD_INT 2
50375: NEG
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 1
50383: PUSH
50384: LD_INT 1
50386: NEG
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 2
50394: PUSH
50395: LD_INT 0
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 2
50404: PUSH
50405: LD_INT 1
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 2
50414: PUSH
50415: LD_INT 2
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 1
50424: PUSH
50425: LD_INT 2
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 0
50434: PUSH
50435: LD_INT 2
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 1
50444: NEG
50445: PUSH
50446: LD_INT 1
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 2
50455: NEG
50456: PUSH
50457: LD_INT 0
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 2
50466: NEG
50467: PUSH
50468: LD_INT 1
50470: NEG
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 2
50478: NEG
50479: PUSH
50480: LD_INT 2
50482: NEG
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 1
50490: NEG
50491: PUSH
50492: LD_INT 2
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 2
50501: NEG
50502: PUSH
50503: LD_INT 1
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 3
50512: NEG
50513: PUSH
50514: LD_INT 1
50516: NEG
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 3
50524: NEG
50525: PUSH
50526: LD_INT 2
50528: NEG
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50559: LD_ADDR_VAR 0 28
50563: PUSH
50564: LD_INT 0
50566: PUSH
50567: LD_INT 0
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 0
50576: PUSH
50577: LD_INT 1
50579: NEG
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 1
50587: PUSH
50588: LD_INT 0
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 1
50597: PUSH
50598: LD_INT 1
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 0
50607: PUSH
50608: LD_INT 1
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 1
50617: NEG
50618: PUSH
50619: LD_INT 0
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 1
50628: NEG
50629: PUSH
50630: LD_INT 1
50632: NEG
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 1
50640: NEG
50641: PUSH
50642: LD_INT 2
50644: NEG
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 0
50652: PUSH
50653: LD_INT 2
50655: NEG
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 1
50663: PUSH
50664: LD_INT 1
50666: NEG
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 2
50674: PUSH
50675: LD_INT 0
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 2
50684: PUSH
50685: LD_INT 1
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 2
50694: PUSH
50695: LD_INT 2
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 1
50704: PUSH
50705: LD_INT 2
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 0
50714: PUSH
50715: LD_INT 2
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 1
50724: NEG
50725: PUSH
50726: LD_INT 1
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 2
50735: NEG
50736: PUSH
50737: LD_INT 0
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 2
50746: NEG
50747: PUSH
50748: LD_INT 1
50750: NEG
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 2
50758: NEG
50759: PUSH
50760: LD_INT 2
50762: NEG
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 2
50770: NEG
50771: PUSH
50772: LD_INT 3
50774: NEG
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 1
50782: NEG
50783: PUSH
50784: LD_INT 3
50786: NEG
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 3
50794: NEG
50795: PUSH
50796: LD_INT 1
50798: NEG
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 3
50806: NEG
50807: PUSH
50808: LD_INT 2
50810: NEG
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50841: LD_ADDR_VAR 0 29
50845: PUSH
50846: LD_INT 0
50848: PUSH
50849: LD_INT 0
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 0
50858: PUSH
50859: LD_INT 1
50861: NEG
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 1
50869: PUSH
50870: LD_INT 0
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 1
50879: PUSH
50880: LD_INT 1
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 0
50889: PUSH
50890: LD_INT 1
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 1
50899: NEG
50900: PUSH
50901: LD_INT 0
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 1
50910: NEG
50911: PUSH
50912: LD_INT 1
50914: NEG
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 1
50922: NEG
50923: PUSH
50924: LD_INT 2
50926: NEG
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 0
50934: PUSH
50935: LD_INT 2
50937: NEG
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 1
50945: PUSH
50946: LD_INT 1
50948: NEG
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 2
50956: PUSH
50957: LD_INT 0
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 2
50966: PUSH
50967: LD_INT 1
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 1
50976: PUSH
50977: LD_INT 2
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 0
50986: PUSH
50987: LD_INT 2
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 1
50996: NEG
50997: PUSH
50998: LD_INT 1
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 2
51007: NEG
51008: PUSH
51009: LD_INT 1
51011: NEG
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 2
51019: NEG
51020: PUSH
51021: LD_INT 2
51023: NEG
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 2
51031: NEG
51032: PUSH
51033: LD_INT 3
51035: NEG
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 2
51043: PUSH
51044: LD_INT 1
51046: NEG
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 3
51054: PUSH
51055: LD_INT 1
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 1
51064: PUSH
51065: LD_INT 3
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 1
51074: NEG
51075: PUSH
51076: LD_INT 2
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 3
51085: NEG
51086: PUSH
51087: LD_INT 2
51089: NEG
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51120: LD_ADDR_VAR 0 30
51124: PUSH
51125: LD_INT 0
51127: PUSH
51128: LD_INT 0
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 0
51137: PUSH
51138: LD_INT 1
51140: NEG
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 1
51148: PUSH
51149: LD_INT 0
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 1
51158: PUSH
51159: LD_INT 1
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 0
51168: PUSH
51169: LD_INT 1
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 1
51178: NEG
51179: PUSH
51180: LD_INT 0
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 1
51189: NEG
51190: PUSH
51191: LD_INT 1
51193: NEG
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: LD_INT 1
51201: NEG
51202: PUSH
51203: LD_INT 2
51205: NEG
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 0
51213: PUSH
51214: LD_INT 2
51216: NEG
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 1
51224: PUSH
51225: LD_INT 1
51227: NEG
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 2
51235: PUSH
51236: LD_INT 0
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 2
51245: PUSH
51246: LD_INT 1
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 2
51255: PUSH
51256: LD_INT 2
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 1
51265: PUSH
51266: LD_INT 2
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 1
51275: NEG
51276: PUSH
51277: LD_INT 1
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 2
51286: NEG
51287: PUSH
51288: LD_INT 0
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 2
51297: NEG
51298: PUSH
51299: LD_INT 1
51301: NEG
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 1
51309: NEG
51310: PUSH
51311: LD_INT 3
51313: NEG
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 1
51321: PUSH
51322: LD_INT 2
51324: NEG
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 3
51332: PUSH
51333: LD_INT 2
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 2
51342: PUSH
51343: LD_INT 3
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 2
51352: NEG
51353: PUSH
51354: LD_INT 1
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 3
51363: NEG
51364: PUSH
51365: LD_INT 1
51367: NEG
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51398: LD_ADDR_VAR 0 31
51402: PUSH
51403: LD_INT 0
51405: PUSH
51406: LD_INT 0
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 0
51415: PUSH
51416: LD_INT 1
51418: NEG
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 1
51426: PUSH
51427: LD_INT 0
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 1
51436: PUSH
51437: LD_INT 1
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 0
51446: PUSH
51447: LD_INT 1
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 1
51456: NEG
51457: PUSH
51458: LD_INT 0
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 1
51467: NEG
51468: PUSH
51469: LD_INT 1
51471: NEG
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 1
51479: NEG
51480: PUSH
51481: LD_INT 2
51483: NEG
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 1
51491: PUSH
51492: LD_INT 1
51494: NEG
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 2
51502: PUSH
51503: LD_INT 0
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 2
51512: PUSH
51513: LD_INT 1
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 2
51522: PUSH
51523: LD_INT 2
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 1
51532: PUSH
51533: LD_INT 2
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 0
51542: PUSH
51543: LD_INT 2
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 1
51552: NEG
51553: PUSH
51554: LD_INT 1
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 2
51563: NEG
51564: PUSH
51565: LD_INT 1
51567: NEG
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 2
51575: NEG
51576: PUSH
51577: LD_INT 2
51579: NEG
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 2
51587: NEG
51588: PUSH
51589: LD_INT 3
51591: NEG
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 2
51599: PUSH
51600: LD_INT 1
51602: NEG
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 3
51610: PUSH
51611: LD_INT 1
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 1
51620: PUSH
51621: LD_INT 3
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 1
51630: NEG
51631: PUSH
51632: LD_INT 2
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 3
51641: NEG
51642: PUSH
51643: LD_INT 2
51645: NEG
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51676: LD_ADDR_VAR 0 32
51680: PUSH
51681: LD_INT 0
51683: PUSH
51684: LD_INT 0
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 0
51693: PUSH
51694: LD_INT 1
51696: NEG
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 1
51704: PUSH
51705: LD_INT 0
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 1
51714: PUSH
51715: LD_INT 1
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 0
51724: PUSH
51725: LD_INT 1
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 1
51734: NEG
51735: PUSH
51736: LD_INT 0
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 1
51745: NEG
51746: PUSH
51747: LD_INT 1
51749: NEG
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 1
51757: NEG
51758: PUSH
51759: LD_INT 2
51761: NEG
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 0
51769: PUSH
51770: LD_INT 2
51772: NEG
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 1
51780: PUSH
51781: LD_INT 1
51783: NEG
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 2
51791: PUSH
51792: LD_INT 1
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 2
51801: PUSH
51802: LD_INT 2
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 1
51811: PUSH
51812: LD_INT 2
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 0
51821: PUSH
51822: LD_INT 2
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 1
51831: NEG
51832: PUSH
51833: LD_INT 1
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 2
51842: NEG
51843: PUSH
51844: LD_INT 0
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 2
51853: NEG
51854: PUSH
51855: LD_INT 1
51857: NEG
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 1
51865: NEG
51866: PUSH
51867: LD_INT 3
51869: NEG
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 1
51877: PUSH
51878: LD_INT 2
51880: NEG
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 3
51888: PUSH
51889: LD_INT 2
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 2
51898: PUSH
51899: LD_INT 3
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 2
51908: NEG
51909: PUSH
51910: LD_INT 1
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 3
51919: NEG
51920: PUSH
51921: LD_INT 1
51923: NEG
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51954: LD_ADDR_VAR 0 33
51958: PUSH
51959: LD_INT 0
51961: PUSH
51962: LD_INT 0
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 0
51971: PUSH
51972: LD_INT 1
51974: NEG
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 1
51982: PUSH
51983: LD_INT 0
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 1
51992: PUSH
51993: LD_INT 1
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 0
52002: PUSH
52003: LD_INT 1
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 1
52012: NEG
52013: PUSH
52014: LD_INT 0
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 1
52023: NEG
52024: PUSH
52025: LD_INT 1
52027: NEG
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 1
52035: NEG
52036: PUSH
52037: LD_INT 2
52039: NEG
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 1
52047: PUSH
52048: LD_INT 1
52050: NEG
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 2
52058: PUSH
52059: LD_INT 0
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 2
52068: PUSH
52069: LD_INT 1
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 1
52078: PUSH
52079: LD_INT 2
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 0
52088: PUSH
52089: LD_INT 2
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 1
52098: NEG
52099: PUSH
52100: LD_INT 1
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 2
52109: NEG
52110: PUSH
52111: LD_INT 0
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 2
52120: NEG
52121: PUSH
52122: LD_INT 1
52124: NEG
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 2
52132: NEG
52133: PUSH
52134: LD_INT 2
52136: NEG
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 2
52144: NEG
52145: PUSH
52146: LD_INT 3
52148: NEG
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 2
52156: PUSH
52157: LD_INT 1
52159: NEG
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 3
52167: PUSH
52168: LD_INT 1
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 1
52177: PUSH
52178: LD_INT 3
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 1
52187: NEG
52188: PUSH
52189: LD_INT 2
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 3
52198: NEG
52199: PUSH
52200: LD_INT 2
52202: NEG
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52233: LD_ADDR_VAR 0 34
52237: PUSH
52238: LD_INT 0
52240: PUSH
52241: LD_INT 0
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 0
52250: PUSH
52251: LD_INT 1
52253: NEG
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 1
52261: PUSH
52262: LD_INT 0
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 1
52271: PUSH
52272: LD_INT 1
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 0
52281: PUSH
52282: LD_INT 1
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 1
52291: NEG
52292: PUSH
52293: LD_INT 0
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 1
52302: NEG
52303: PUSH
52304: LD_INT 1
52306: NEG
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 1
52314: NEG
52315: PUSH
52316: LD_INT 2
52318: NEG
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 0
52326: PUSH
52327: LD_INT 2
52329: NEG
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 1
52337: PUSH
52338: LD_INT 1
52340: NEG
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 2
52348: PUSH
52349: LD_INT 1
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 2
52358: PUSH
52359: LD_INT 2
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 1
52368: PUSH
52369: LD_INT 2
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 1
52378: NEG
52379: PUSH
52380: LD_INT 1
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 2
52389: NEG
52390: PUSH
52391: LD_INT 0
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 2
52400: NEG
52401: PUSH
52402: LD_INT 1
52404: NEG
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 2
52412: NEG
52413: PUSH
52414: LD_INT 2
52416: NEG
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 1
52424: NEG
52425: PUSH
52426: LD_INT 3
52428: NEG
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 1
52436: PUSH
52437: LD_INT 2
52439: NEG
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 3
52447: PUSH
52448: LD_INT 2
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 2
52457: PUSH
52458: LD_INT 3
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 2
52467: NEG
52468: PUSH
52469: LD_INT 1
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 3
52478: NEG
52479: PUSH
52480: LD_INT 1
52482: NEG
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52513: LD_ADDR_VAR 0 35
52517: PUSH
52518: LD_INT 0
52520: PUSH
52521: LD_INT 0
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: LD_INT 0
52530: PUSH
52531: LD_INT 1
52533: NEG
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 1
52541: PUSH
52542: LD_INT 0
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 1
52551: PUSH
52552: LD_INT 1
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 0
52561: PUSH
52562: LD_INT 1
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 1
52571: NEG
52572: PUSH
52573: LD_INT 0
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 1
52582: NEG
52583: PUSH
52584: LD_INT 1
52586: NEG
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 2
52594: PUSH
52595: LD_INT 1
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 2
52604: NEG
52605: PUSH
52606: LD_INT 1
52608: NEG
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52625: LD_ADDR_VAR 0 36
52629: PUSH
52630: LD_INT 0
52632: PUSH
52633: LD_INT 0
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 0
52642: PUSH
52643: LD_INT 1
52645: NEG
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 1
52653: PUSH
52654: LD_INT 0
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 1
52663: PUSH
52664: LD_INT 1
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 0
52673: PUSH
52674: LD_INT 1
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 1
52683: NEG
52684: PUSH
52685: LD_INT 0
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 1
52694: NEG
52695: PUSH
52696: LD_INT 1
52698: NEG
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 1
52706: NEG
52707: PUSH
52708: LD_INT 2
52710: NEG
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 1
52718: PUSH
52719: LD_INT 2
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52737: LD_ADDR_VAR 0 37
52741: PUSH
52742: LD_INT 0
52744: PUSH
52745: LD_INT 0
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 0
52754: PUSH
52755: LD_INT 1
52757: NEG
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 1
52765: PUSH
52766: LD_INT 0
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 1
52775: PUSH
52776: LD_INT 1
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 0
52785: PUSH
52786: LD_INT 1
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 1
52795: NEG
52796: PUSH
52797: LD_INT 0
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 1
52806: NEG
52807: PUSH
52808: LD_INT 1
52810: NEG
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 1
52818: PUSH
52819: LD_INT 1
52821: NEG
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 1
52829: NEG
52830: PUSH
52831: LD_INT 1
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52849: LD_ADDR_VAR 0 38
52853: PUSH
52854: LD_INT 0
52856: PUSH
52857: LD_INT 0
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 0
52866: PUSH
52867: LD_INT 1
52869: NEG
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 1
52877: PUSH
52878: LD_INT 0
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 1
52887: PUSH
52888: LD_INT 1
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 0
52897: PUSH
52898: LD_INT 1
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 1
52907: NEG
52908: PUSH
52909: LD_INT 0
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 1
52918: NEG
52919: PUSH
52920: LD_INT 1
52922: NEG
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 2
52930: PUSH
52931: LD_INT 1
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 2
52940: NEG
52941: PUSH
52942: LD_INT 1
52944: NEG
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52961: LD_ADDR_VAR 0 39
52965: PUSH
52966: LD_INT 0
52968: PUSH
52969: LD_INT 0
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 0
52978: PUSH
52979: LD_INT 1
52981: NEG
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: LD_INT 1
52989: PUSH
52990: LD_INT 0
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 1
52999: PUSH
53000: LD_INT 1
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 0
53009: PUSH
53010: LD_INT 1
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 1
53019: NEG
53020: PUSH
53021: LD_INT 0
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 1
53030: NEG
53031: PUSH
53032: LD_INT 1
53034: NEG
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 1
53042: NEG
53043: PUSH
53044: LD_INT 2
53046: NEG
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 1
53054: PUSH
53055: LD_INT 2
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53073: LD_ADDR_VAR 0 40
53077: PUSH
53078: LD_INT 0
53080: PUSH
53081: LD_INT 0
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 0
53090: PUSH
53091: LD_INT 1
53093: NEG
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 1
53101: PUSH
53102: LD_INT 0
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 1
53111: PUSH
53112: LD_INT 1
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: LD_INT 0
53121: PUSH
53122: LD_INT 1
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 1
53131: NEG
53132: PUSH
53133: LD_INT 0
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 1
53142: NEG
53143: PUSH
53144: LD_INT 1
53146: NEG
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 1
53154: PUSH
53155: LD_INT 1
53157: NEG
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 1
53165: NEG
53166: PUSH
53167: LD_INT 1
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53185: LD_ADDR_VAR 0 41
53189: PUSH
53190: LD_INT 0
53192: PUSH
53193: LD_INT 0
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 0
53202: PUSH
53203: LD_INT 1
53205: NEG
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 1
53213: PUSH
53214: LD_INT 0
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 1
53223: PUSH
53224: LD_INT 1
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 0
53233: PUSH
53234: LD_INT 1
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 1
53243: NEG
53244: PUSH
53245: LD_INT 0
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 1
53254: NEG
53255: PUSH
53256: LD_INT 1
53258: NEG
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 1
53266: NEG
53267: PUSH
53268: LD_INT 2
53270: NEG
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 1
53278: PUSH
53279: LD_INT 1
53281: NEG
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 2
53289: PUSH
53290: LD_INT 0
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 2
53299: PUSH
53300: LD_INT 1
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 2
53309: PUSH
53310: LD_INT 2
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 1
53319: PUSH
53320: LD_INT 2
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 1
53329: NEG
53330: PUSH
53331: LD_INT 1
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 2
53340: NEG
53341: PUSH
53342: LD_INT 0
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 2
53351: NEG
53352: PUSH
53353: LD_INT 1
53355: NEG
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 2
53363: NEG
53364: PUSH
53365: LD_INT 2
53367: NEG
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 2
53375: NEG
53376: PUSH
53377: LD_INT 3
53379: NEG
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 2
53387: PUSH
53388: LD_INT 1
53390: NEG
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 3
53398: PUSH
53399: LD_INT 0
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 3
53408: PUSH
53409: LD_INT 1
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 3
53418: PUSH
53419: LD_INT 2
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 3
53428: PUSH
53429: LD_INT 3
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 2
53438: PUSH
53439: LD_INT 3
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 2
53448: NEG
53449: PUSH
53450: LD_INT 1
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 3
53459: NEG
53460: PUSH
53461: LD_INT 0
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 3
53470: NEG
53471: PUSH
53472: LD_INT 1
53474: NEG
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 3
53482: NEG
53483: PUSH
53484: LD_INT 2
53486: NEG
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 3
53494: NEG
53495: PUSH
53496: LD_INT 3
53498: NEG
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53535: LD_ADDR_VAR 0 42
53539: PUSH
53540: LD_INT 0
53542: PUSH
53543: LD_INT 0
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 0
53552: PUSH
53553: LD_INT 1
53555: NEG
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 1
53563: PUSH
53564: LD_INT 0
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 1
53573: PUSH
53574: LD_INT 1
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 0
53583: PUSH
53584: LD_INT 1
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 1
53593: NEG
53594: PUSH
53595: LD_INT 0
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 1
53604: NEG
53605: PUSH
53606: LD_INT 1
53608: NEG
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 1
53616: NEG
53617: PUSH
53618: LD_INT 2
53620: NEG
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 0
53628: PUSH
53629: LD_INT 2
53631: NEG
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 1
53639: PUSH
53640: LD_INT 1
53642: NEG
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 2
53650: PUSH
53651: LD_INT 1
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 2
53660: PUSH
53661: LD_INT 2
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 1
53670: PUSH
53671: LD_INT 2
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 0
53680: PUSH
53681: LD_INT 2
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 1
53690: NEG
53691: PUSH
53692: LD_INT 1
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 2
53701: NEG
53702: PUSH
53703: LD_INT 1
53705: NEG
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 2
53713: NEG
53714: PUSH
53715: LD_INT 2
53717: NEG
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 2
53725: NEG
53726: PUSH
53727: LD_INT 3
53729: NEG
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 1
53737: NEG
53738: PUSH
53739: LD_INT 3
53741: NEG
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 0
53749: PUSH
53750: LD_INT 3
53752: NEG
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 1
53760: PUSH
53761: LD_INT 2
53763: NEG
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 3
53771: PUSH
53772: LD_INT 2
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 3
53781: PUSH
53782: LD_INT 3
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 2
53791: PUSH
53792: LD_INT 3
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 1
53801: PUSH
53802: LD_INT 3
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 0
53811: PUSH
53812: LD_INT 3
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 1
53821: NEG
53822: PUSH
53823: LD_INT 2
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 3
53832: NEG
53833: PUSH
53834: LD_INT 2
53836: NEG
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 3
53844: NEG
53845: PUSH
53846: LD_INT 3
53848: NEG
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53885: LD_ADDR_VAR 0 43
53889: PUSH
53890: LD_INT 0
53892: PUSH
53893: LD_INT 0
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 0
53902: PUSH
53903: LD_INT 1
53905: NEG
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 1
53913: PUSH
53914: LD_INT 0
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 1
53923: PUSH
53924: LD_INT 1
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 0
53933: PUSH
53934: LD_INT 1
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 1
53943: NEG
53944: PUSH
53945: LD_INT 0
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 1
53954: NEG
53955: PUSH
53956: LD_INT 1
53958: NEG
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 1
53966: NEG
53967: PUSH
53968: LD_INT 2
53970: NEG
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 0
53978: PUSH
53979: LD_INT 2
53981: NEG
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 1
53989: PUSH
53990: LD_INT 1
53992: NEG
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 2
54000: PUSH
54001: LD_INT 0
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 2
54010: PUSH
54011: LD_INT 1
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 1
54020: PUSH
54021: LD_INT 2
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 0
54030: PUSH
54031: LD_INT 2
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 1
54040: NEG
54041: PUSH
54042: LD_INT 1
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 2
54051: NEG
54052: PUSH
54053: LD_INT 0
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 2
54062: NEG
54063: PUSH
54064: LD_INT 1
54066: NEG
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 1
54074: NEG
54075: PUSH
54076: LD_INT 3
54078: NEG
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 0
54086: PUSH
54087: LD_INT 3
54089: NEG
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 1
54097: PUSH
54098: LD_INT 2
54100: NEG
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 2
54108: PUSH
54109: LD_INT 1
54111: NEG
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 3
54119: PUSH
54120: LD_INT 0
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 3
54129: PUSH
54130: LD_INT 1
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 1
54139: PUSH
54140: LD_INT 3
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 0
54149: PUSH
54150: LD_INT 3
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 1
54159: NEG
54160: PUSH
54161: LD_INT 2
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 2
54170: NEG
54171: PUSH
54172: LD_INT 1
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 3
54181: NEG
54182: PUSH
54183: LD_INT 0
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 3
54192: NEG
54193: PUSH
54194: LD_INT 1
54196: NEG
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54233: LD_ADDR_VAR 0 44
54237: PUSH
54238: LD_INT 0
54240: PUSH
54241: LD_INT 0
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 0
54250: PUSH
54251: LD_INT 1
54253: NEG
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 1
54261: PUSH
54262: LD_INT 0
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 1
54271: PUSH
54272: LD_INT 1
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 0
54281: PUSH
54282: LD_INT 1
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 1
54291: NEG
54292: PUSH
54293: LD_INT 0
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 1
54302: NEG
54303: PUSH
54304: LD_INT 1
54306: NEG
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 1
54314: NEG
54315: PUSH
54316: LD_INT 2
54318: NEG
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 1
54326: PUSH
54327: LD_INT 1
54329: NEG
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 2
54337: PUSH
54338: LD_INT 0
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 2
54347: PUSH
54348: LD_INT 1
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 2
54357: PUSH
54358: LD_INT 2
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 1
54367: PUSH
54368: LD_INT 2
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 1
54377: NEG
54378: PUSH
54379: LD_INT 1
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 2
54388: NEG
54389: PUSH
54390: LD_INT 0
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 2
54399: NEG
54400: PUSH
54401: LD_INT 1
54403: NEG
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 2
54411: NEG
54412: PUSH
54413: LD_INT 2
54415: NEG
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 2
54423: NEG
54424: PUSH
54425: LD_INT 3
54427: NEG
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 2
54435: PUSH
54436: LD_INT 1
54438: NEG
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 3
54446: PUSH
54447: LD_INT 0
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 3
54456: PUSH
54457: LD_INT 1
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 3
54466: PUSH
54467: LD_INT 2
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 3
54476: PUSH
54477: LD_INT 3
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 2
54486: PUSH
54487: LD_INT 3
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 2
54496: NEG
54497: PUSH
54498: LD_INT 1
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 3
54507: NEG
54508: PUSH
54509: LD_INT 0
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 3
54518: NEG
54519: PUSH
54520: LD_INT 1
54522: NEG
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 3
54530: NEG
54531: PUSH
54532: LD_INT 2
54534: NEG
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 3
54542: NEG
54543: PUSH
54544: LD_INT 3
54546: NEG
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54583: LD_ADDR_VAR 0 45
54587: PUSH
54588: LD_INT 0
54590: PUSH
54591: LD_INT 0
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 0
54600: PUSH
54601: LD_INT 1
54603: NEG
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 1
54611: PUSH
54612: LD_INT 0
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 1
54621: PUSH
54622: LD_INT 1
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 0
54631: PUSH
54632: LD_INT 1
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 1
54641: NEG
54642: PUSH
54643: LD_INT 0
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 1
54652: NEG
54653: PUSH
54654: LD_INT 1
54656: NEG
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 1
54664: NEG
54665: PUSH
54666: LD_INT 2
54668: NEG
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 0
54676: PUSH
54677: LD_INT 2
54679: NEG
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 1
54687: PUSH
54688: LD_INT 1
54690: NEG
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 2
54698: PUSH
54699: LD_INT 1
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 2
54708: PUSH
54709: LD_INT 2
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 1
54718: PUSH
54719: LD_INT 2
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 0
54728: PUSH
54729: LD_INT 2
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 1
54738: NEG
54739: PUSH
54740: LD_INT 1
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 2
54749: NEG
54750: PUSH
54751: LD_INT 1
54753: NEG
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 2
54761: NEG
54762: PUSH
54763: LD_INT 2
54765: NEG
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 2
54773: NEG
54774: PUSH
54775: LD_INT 3
54777: NEG
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 1
54785: NEG
54786: PUSH
54787: LD_INT 3
54789: NEG
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 0
54797: PUSH
54798: LD_INT 3
54800: NEG
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 1
54808: PUSH
54809: LD_INT 2
54811: NEG
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 3
54819: PUSH
54820: LD_INT 2
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 3
54829: PUSH
54830: LD_INT 3
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 2
54839: PUSH
54840: LD_INT 3
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 1
54849: PUSH
54850: LD_INT 3
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 0
54859: PUSH
54860: LD_INT 3
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 1
54869: NEG
54870: PUSH
54871: LD_INT 2
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 3
54880: NEG
54881: PUSH
54882: LD_INT 2
54884: NEG
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 3
54892: NEG
54893: PUSH
54894: LD_INT 3
54896: NEG
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54933: LD_ADDR_VAR 0 46
54937: PUSH
54938: LD_INT 0
54940: PUSH
54941: LD_INT 0
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 0
54950: PUSH
54951: LD_INT 1
54953: NEG
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 1
54961: PUSH
54962: LD_INT 0
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 1
54971: PUSH
54972: LD_INT 1
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 0
54981: PUSH
54982: LD_INT 1
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 1
54991: NEG
54992: PUSH
54993: LD_INT 0
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 1
55002: NEG
55003: PUSH
55004: LD_INT 1
55006: NEG
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 1
55014: NEG
55015: PUSH
55016: LD_INT 2
55018: NEG
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 0
55026: PUSH
55027: LD_INT 2
55029: NEG
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 1
55037: PUSH
55038: LD_INT 1
55040: NEG
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 2
55048: PUSH
55049: LD_INT 0
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 2
55058: PUSH
55059: LD_INT 1
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 1
55068: PUSH
55069: LD_INT 2
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 0
55078: PUSH
55079: LD_INT 2
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 1
55088: NEG
55089: PUSH
55090: LD_INT 1
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 2
55099: NEG
55100: PUSH
55101: LD_INT 0
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 2
55110: NEG
55111: PUSH
55112: LD_INT 1
55114: NEG
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 1
55122: NEG
55123: PUSH
55124: LD_INT 3
55126: NEG
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 0
55134: PUSH
55135: LD_INT 3
55137: NEG
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 1
55145: PUSH
55146: LD_INT 2
55148: NEG
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 2
55156: PUSH
55157: LD_INT 1
55159: NEG
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 3
55167: PUSH
55168: LD_INT 0
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 3
55177: PUSH
55178: LD_INT 1
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 1
55187: PUSH
55188: LD_INT 3
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 0
55197: PUSH
55198: LD_INT 3
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 1
55207: NEG
55208: PUSH
55209: LD_INT 2
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 2
55218: NEG
55219: PUSH
55220: LD_INT 1
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 3
55229: NEG
55230: PUSH
55231: LD_INT 0
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 3
55240: NEG
55241: PUSH
55242: LD_INT 1
55244: NEG
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55281: LD_ADDR_VAR 0 47
55285: PUSH
55286: LD_INT 0
55288: PUSH
55289: LD_INT 0
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 0
55298: PUSH
55299: LD_INT 1
55301: NEG
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 1
55309: PUSH
55310: LD_INT 0
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 1
55319: PUSH
55320: LD_INT 1
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 0
55329: PUSH
55330: LD_INT 1
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 1
55339: NEG
55340: PUSH
55341: LD_INT 0
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 1
55350: NEG
55351: PUSH
55352: LD_INT 1
55354: NEG
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 1
55362: NEG
55363: PUSH
55364: LD_INT 2
55366: NEG
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 0
55374: PUSH
55375: LD_INT 2
55377: NEG
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 1
55385: PUSH
55386: LD_INT 1
55388: NEG
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 2
55396: NEG
55397: PUSH
55398: LD_INT 1
55400: NEG
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 2
55408: NEG
55409: PUSH
55410: LD_INT 2
55412: NEG
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55432: LD_ADDR_VAR 0 48
55436: PUSH
55437: LD_INT 0
55439: PUSH
55440: LD_INT 0
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 0
55449: PUSH
55450: LD_INT 1
55452: NEG
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 1
55460: PUSH
55461: LD_INT 0
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 1
55470: PUSH
55471: LD_INT 1
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 0
55480: PUSH
55481: LD_INT 1
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 1
55490: NEG
55491: PUSH
55492: LD_INT 0
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 1
55501: NEG
55502: PUSH
55503: LD_INT 1
55505: NEG
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 1
55513: NEG
55514: PUSH
55515: LD_INT 2
55517: NEG
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 0
55525: PUSH
55526: LD_INT 2
55528: NEG
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 1
55536: PUSH
55537: LD_INT 1
55539: NEG
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 2
55547: PUSH
55548: LD_INT 0
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 2
55557: PUSH
55558: LD_INT 1
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: LIST
55578: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55579: LD_ADDR_VAR 0 49
55583: PUSH
55584: LD_INT 0
55586: PUSH
55587: LD_INT 0
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 0
55596: PUSH
55597: LD_INT 1
55599: NEG
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 1
55607: PUSH
55608: LD_INT 0
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 1
55617: PUSH
55618: LD_INT 1
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 0
55627: PUSH
55628: LD_INT 1
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 1
55637: NEG
55638: PUSH
55639: LD_INT 0
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 1
55648: NEG
55649: PUSH
55650: LD_INT 1
55652: NEG
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 1
55660: PUSH
55661: LD_INT 1
55663: NEG
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 2
55671: PUSH
55672: LD_INT 0
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 2
55681: PUSH
55682: LD_INT 1
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 2
55691: PUSH
55692: LD_INT 2
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 1
55701: PUSH
55702: LD_INT 2
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55723: LD_ADDR_VAR 0 50
55727: PUSH
55728: LD_INT 0
55730: PUSH
55731: LD_INT 0
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 0
55740: PUSH
55741: LD_INT 1
55743: NEG
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 1
55751: PUSH
55752: LD_INT 0
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 1
55761: PUSH
55762: LD_INT 1
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 0
55771: PUSH
55772: LD_INT 1
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 1
55781: NEG
55782: PUSH
55783: LD_INT 0
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 1
55792: NEG
55793: PUSH
55794: LD_INT 1
55796: NEG
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 2
55804: PUSH
55805: LD_INT 1
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 2
55814: PUSH
55815: LD_INT 2
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 1
55824: PUSH
55825: LD_INT 2
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 0
55834: PUSH
55835: LD_INT 2
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 1
55844: NEG
55845: PUSH
55846: LD_INT 1
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55867: LD_ADDR_VAR 0 51
55871: PUSH
55872: LD_INT 0
55874: PUSH
55875: LD_INT 0
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 0
55884: PUSH
55885: LD_INT 1
55887: NEG
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 1
55895: PUSH
55896: LD_INT 0
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 1
55905: PUSH
55906: LD_INT 1
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 0
55915: PUSH
55916: LD_INT 1
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 1
55925: NEG
55926: PUSH
55927: LD_INT 0
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 1
55936: NEG
55937: PUSH
55938: LD_INT 1
55940: NEG
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 1
55948: PUSH
55949: LD_INT 2
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 0
55958: PUSH
55959: LD_INT 2
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 1
55968: NEG
55969: PUSH
55970: LD_INT 1
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 2
55979: NEG
55980: PUSH
55981: LD_INT 0
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 2
55990: NEG
55991: PUSH
55992: LD_INT 1
55994: NEG
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56014: LD_ADDR_VAR 0 52
56018: PUSH
56019: LD_INT 0
56021: PUSH
56022: LD_INT 0
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 0
56031: PUSH
56032: LD_INT 1
56034: NEG
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 1
56042: PUSH
56043: LD_INT 0
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 1
56052: PUSH
56053: LD_INT 1
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 0
56062: PUSH
56063: LD_INT 1
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 1
56072: NEG
56073: PUSH
56074: LD_INT 0
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 1
56083: NEG
56084: PUSH
56085: LD_INT 1
56087: NEG
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 1
56095: NEG
56096: PUSH
56097: LD_INT 2
56099: NEG
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 1
56107: NEG
56108: PUSH
56109: LD_INT 1
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 2
56118: NEG
56119: PUSH
56120: LD_INT 0
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 2
56129: NEG
56130: PUSH
56131: LD_INT 1
56133: NEG
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 2
56141: NEG
56142: PUSH
56143: LD_INT 2
56145: NEG
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56165: LD_ADDR_VAR 0 53
56169: PUSH
56170: LD_INT 0
56172: PUSH
56173: LD_INT 0
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 0
56182: PUSH
56183: LD_INT 1
56185: NEG
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 1
56193: PUSH
56194: LD_INT 0
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 1
56203: PUSH
56204: LD_INT 1
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 0
56213: PUSH
56214: LD_INT 1
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 1
56223: NEG
56224: PUSH
56225: LD_INT 0
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 1
56234: NEG
56235: PUSH
56236: LD_INT 1
56238: NEG
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 1
56246: NEG
56247: PUSH
56248: LD_INT 2
56250: NEG
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 0
56258: PUSH
56259: LD_INT 2
56261: NEG
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 1
56269: PUSH
56270: LD_INT 1
56272: NEG
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 2
56280: PUSH
56281: LD_INT 0
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 2
56290: PUSH
56291: LD_INT 1
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: LD_INT 2
56300: PUSH
56301: LD_INT 2
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 1
56310: PUSH
56311: LD_INT 2
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 0
56320: PUSH
56321: LD_INT 2
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 1
56330: NEG
56331: PUSH
56332: LD_INT 1
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 2
56341: NEG
56342: PUSH
56343: LD_INT 0
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 2
56352: NEG
56353: PUSH
56354: LD_INT 1
56356: NEG
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 2
56364: NEG
56365: PUSH
56366: LD_INT 2
56368: NEG
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56395: LD_ADDR_VAR 0 54
56399: PUSH
56400: LD_INT 0
56402: PUSH
56403: LD_INT 0
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 0
56412: PUSH
56413: LD_INT 1
56415: NEG
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 1
56423: PUSH
56424: LD_INT 0
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 1
56433: PUSH
56434: LD_INT 1
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 0
56443: PUSH
56444: LD_INT 1
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 1
56453: NEG
56454: PUSH
56455: LD_INT 0
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 1
56464: NEG
56465: PUSH
56466: LD_INT 1
56468: NEG
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 1
56476: NEG
56477: PUSH
56478: LD_INT 2
56480: NEG
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 0
56488: PUSH
56489: LD_INT 2
56491: NEG
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 1
56499: PUSH
56500: LD_INT 1
56502: NEG
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 2
56510: PUSH
56511: LD_INT 0
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 2
56520: PUSH
56521: LD_INT 1
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 2
56530: PUSH
56531: LD_INT 2
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 1
56540: PUSH
56541: LD_INT 2
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 0
56550: PUSH
56551: LD_INT 2
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 1
56560: NEG
56561: PUSH
56562: LD_INT 1
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 2
56571: NEG
56572: PUSH
56573: LD_INT 0
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 2
56582: NEG
56583: PUSH
56584: LD_INT 1
56586: NEG
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: LD_INT 2
56594: NEG
56595: PUSH
56596: LD_INT 2
56598: NEG
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56625: LD_ADDR_VAR 0 55
56629: PUSH
56630: LD_INT 0
56632: PUSH
56633: LD_INT 0
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 0
56642: PUSH
56643: LD_INT 1
56645: NEG
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 1
56653: PUSH
56654: LD_INT 0
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 1
56663: PUSH
56664: LD_INT 1
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 0
56673: PUSH
56674: LD_INT 1
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 1
56683: NEG
56684: PUSH
56685: LD_INT 0
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 1
56694: NEG
56695: PUSH
56696: LD_INT 1
56698: NEG
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 1
56706: NEG
56707: PUSH
56708: LD_INT 2
56710: NEG
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 0
56718: PUSH
56719: LD_INT 2
56721: NEG
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: LD_INT 1
56729: PUSH
56730: LD_INT 1
56732: NEG
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 2
56740: PUSH
56741: LD_INT 0
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 2
56750: PUSH
56751: LD_INT 1
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 2
56760: PUSH
56761: LD_INT 2
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 1
56770: PUSH
56771: LD_INT 2
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 0
56780: PUSH
56781: LD_INT 2
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 1
56790: NEG
56791: PUSH
56792: LD_INT 1
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 2
56801: NEG
56802: PUSH
56803: LD_INT 0
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 2
56812: NEG
56813: PUSH
56814: LD_INT 1
56816: NEG
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 2
56824: NEG
56825: PUSH
56826: LD_INT 2
56828: NEG
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56855: LD_ADDR_VAR 0 56
56859: PUSH
56860: LD_INT 0
56862: PUSH
56863: LD_INT 0
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 0
56872: PUSH
56873: LD_INT 1
56875: NEG
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 1
56883: PUSH
56884: LD_INT 0
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 1
56893: PUSH
56894: LD_INT 1
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 0
56903: PUSH
56904: LD_INT 1
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 1
56913: NEG
56914: PUSH
56915: LD_INT 0
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 1
56924: NEG
56925: PUSH
56926: LD_INT 1
56928: NEG
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 1
56936: NEG
56937: PUSH
56938: LD_INT 2
56940: NEG
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 0
56948: PUSH
56949: LD_INT 2
56951: NEG
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 1
56959: PUSH
56960: LD_INT 1
56962: NEG
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 2
56970: PUSH
56971: LD_INT 0
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 2
56980: PUSH
56981: LD_INT 1
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 2
56990: PUSH
56991: LD_INT 2
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 1
57000: PUSH
57001: LD_INT 2
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 0
57010: PUSH
57011: LD_INT 2
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 1
57020: NEG
57021: PUSH
57022: LD_INT 1
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 2
57031: NEG
57032: PUSH
57033: LD_INT 0
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 2
57042: NEG
57043: PUSH
57044: LD_INT 1
57046: NEG
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 2
57054: NEG
57055: PUSH
57056: LD_INT 2
57058: NEG
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57085: LD_ADDR_VAR 0 57
57089: PUSH
57090: LD_INT 0
57092: PUSH
57093: LD_INT 0
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 0
57102: PUSH
57103: LD_INT 1
57105: NEG
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 1
57113: PUSH
57114: LD_INT 0
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 1
57123: PUSH
57124: LD_INT 1
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 0
57133: PUSH
57134: LD_INT 1
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 1
57143: NEG
57144: PUSH
57145: LD_INT 0
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 1
57154: NEG
57155: PUSH
57156: LD_INT 1
57158: NEG
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 1
57166: NEG
57167: PUSH
57168: LD_INT 2
57170: NEG
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 0
57178: PUSH
57179: LD_INT 2
57181: NEG
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 1
57189: PUSH
57190: LD_INT 1
57192: NEG
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 2
57200: PUSH
57201: LD_INT 0
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 2
57210: PUSH
57211: LD_INT 1
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 2
57220: PUSH
57221: LD_INT 2
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 1
57230: PUSH
57231: LD_INT 2
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 0
57240: PUSH
57241: LD_INT 2
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 1
57250: NEG
57251: PUSH
57252: LD_INT 1
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 2
57261: NEG
57262: PUSH
57263: LD_INT 0
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 2
57272: NEG
57273: PUSH
57274: LD_INT 1
57276: NEG
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 2
57284: NEG
57285: PUSH
57286: LD_INT 2
57288: NEG
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57315: LD_ADDR_VAR 0 58
57319: PUSH
57320: LD_INT 0
57322: PUSH
57323: LD_INT 0
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 0
57332: PUSH
57333: LD_INT 1
57335: NEG
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 1
57343: PUSH
57344: LD_INT 0
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 1
57353: PUSH
57354: LD_INT 1
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 0
57363: PUSH
57364: LD_INT 1
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 1
57373: NEG
57374: PUSH
57375: LD_INT 0
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 1
57384: NEG
57385: PUSH
57386: LD_INT 1
57388: NEG
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 1
57396: NEG
57397: PUSH
57398: LD_INT 2
57400: NEG
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 0
57408: PUSH
57409: LD_INT 2
57411: NEG
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 1
57419: PUSH
57420: LD_INT 1
57422: NEG
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 2
57430: PUSH
57431: LD_INT 0
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 2
57440: PUSH
57441: LD_INT 1
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 2
57450: PUSH
57451: LD_INT 2
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 1
57460: PUSH
57461: LD_INT 2
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 0
57470: PUSH
57471: LD_INT 2
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 1
57480: NEG
57481: PUSH
57482: LD_INT 1
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 2
57491: NEG
57492: PUSH
57493: LD_INT 0
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 2
57502: NEG
57503: PUSH
57504: LD_INT 1
57506: NEG
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: LD_INT 2
57514: NEG
57515: PUSH
57516: LD_INT 2
57518: NEG
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57545: LD_ADDR_VAR 0 59
57549: PUSH
57550: LD_INT 0
57552: PUSH
57553: LD_INT 0
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 0
57562: PUSH
57563: LD_INT 1
57565: NEG
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 1
57573: PUSH
57574: LD_INT 0
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: LD_INT 1
57583: PUSH
57584: LD_INT 1
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 0
57593: PUSH
57594: LD_INT 1
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 1
57603: NEG
57604: PUSH
57605: LD_INT 0
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 1
57614: NEG
57615: PUSH
57616: LD_INT 1
57618: NEG
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57633: LD_ADDR_VAR 0 60
57637: PUSH
57638: LD_INT 0
57640: PUSH
57641: LD_INT 0
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 0
57650: PUSH
57651: LD_INT 1
57653: NEG
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 1
57661: PUSH
57662: LD_INT 0
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 1
57671: PUSH
57672: LD_INT 1
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 0
57681: PUSH
57682: LD_INT 1
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 1
57691: NEG
57692: PUSH
57693: LD_INT 0
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 1
57702: NEG
57703: PUSH
57704: LD_INT 1
57706: NEG
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57721: LD_ADDR_VAR 0 61
57725: PUSH
57726: LD_INT 0
57728: PUSH
57729: LD_INT 0
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 0
57738: PUSH
57739: LD_INT 1
57741: NEG
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 1
57749: PUSH
57750: LD_INT 0
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 1
57759: PUSH
57760: LD_INT 1
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 0
57769: PUSH
57770: LD_INT 1
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 1
57779: NEG
57780: PUSH
57781: LD_INT 0
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 1
57790: NEG
57791: PUSH
57792: LD_INT 1
57794: NEG
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57809: LD_ADDR_VAR 0 62
57813: PUSH
57814: LD_INT 0
57816: PUSH
57817: LD_INT 0
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 0
57826: PUSH
57827: LD_INT 1
57829: NEG
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: PUSH
57835: LD_INT 1
57837: PUSH
57838: LD_INT 0
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 1
57847: PUSH
57848: LD_INT 1
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 0
57857: PUSH
57858: LD_INT 1
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 1
57867: NEG
57868: PUSH
57869: LD_INT 0
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: LD_INT 1
57878: NEG
57879: PUSH
57880: LD_INT 1
57882: NEG
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57897: LD_ADDR_VAR 0 63
57901: PUSH
57902: LD_INT 0
57904: PUSH
57905: LD_INT 0
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 0
57914: PUSH
57915: LD_INT 1
57917: NEG
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 1
57925: PUSH
57926: LD_INT 0
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 1
57935: PUSH
57936: LD_INT 1
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 0
57945: PUSH
57946: LD_INT 1
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 1
57955: NEG
57956: PUSH
57957: LD_INT 0
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 1
57966: NEG
57967: PUSH
57968: LD_INT 1
57970: NEG
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57985: LD_ADDR_VAR 0 64
57989: PUSH
57990: LD_INT 0
57992: PUSH
57993: LD_INT 0
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 0
58002: PUSH
58003: LD_INT 1
58005: NEG
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 1
58013: PUSH
58014: LD_INT 0
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 1
58023: PUSH
58024: LD_INT 1
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 0
58033: PUSH
58034: LD_INT 1
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 1
58043: NEG
58044: PUSH
58045: LD_INT 0
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 1
58054: NEG
58055: PUSH
58056: LD_INT 1
58058: NEG
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: LIST
58072: ST_TO_ADDR
// end ; 1 :
58073: GO 63970
58075: LD_INT 1
58077: DOUBLE
58078: EQUAL
58079: IFTRUE 58083
58081: GO 60706
58083: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58084: LD_ADDR_VAR 0 11
58088: PUSH
58089: LD_INT 1
58091: NEG
58092: PUSH
58093: LD_INT 3
58095: NEG
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 0
58103: PUSH
58104: LD_INT 3
58106: NEG
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 1
58114: PUSH
58115: LD_INT 2
58117: NEG
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: LIST
58127: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58128: LD_ADDR_VAR 0 12
58132: PUSH
58133: LD_INT 2
58135: PUSH
58136: LD_INT 1
58138: NEG
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 3
58146: PUSH
58147: LD_INT 0
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 3
58156: PUSH
58157: LD_INT 1
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: LIST
58168: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58169: LD_ADDR_VAR 0 13
58173: PUSH
58174: LD_INT 3
58176: PUSH
58177: LD_INT 2
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 3
58186: PUSH
58187: LD_INT 3
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 2
58196: PUSH
58197: LD_INT 3
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: LIST
58208: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58209: LD_ADDR_VAR 0 14
58213: PUSH
58214: LD_INT 1
58216: PUSH
58217: LD_INT 3
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 0
58226: PUSH
58227: LD_INT 3
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 1
58236: NEG
58237: PUSH
58238: LD_INT 2
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: LIST
58249: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58250: LD_ADDR_VAR 0 15
58254: PUSH
58255: LD_INT 2
58257: NEG
58258: PUSH
58259: LD_INT 1
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 3
58268: NEG
58269: PUSH
58270: LD_INT 0
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 3
58279: NEG
58280: PUSH
58281: LD_INT 1
58283: NEG
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: LIST
58293: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58294: LD_ADDR_VAR 0 16
58298: PUSH
58299: LD_INT 2
58301: NEG
58302: PUSH
58303: LD_INT 3
58305: NEG
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 3
58313: NEG
58314: PUSH
58315: LD_INT 2
58317: NEG
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 3
58325: NEG
58326: PUSH
58327: LD_INT 3
58329: NEG
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: LIST
58339: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58340: LD_ADDR_VAR 0 17
58344: PUSH
58345: LD_INT 1
58347: NEG
58348: PUSH
58349: LD_INT 3
58351: NEG
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 0
58359: PUSH
58360: LD_INT 3
58362: NEG
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 1
58370: PUSH
58371: LD_INT 2
58373: NEG
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: LIST
58383: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58384: LD_ADDR_VAR 0 18
58388: PUSH
58389: LD_INT 2
58391: PUSH
58392: LD_INT 1
58394: NEG
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: LD_INT 3
58402: PUSH
58403: LD_INT 0
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 3
58412: PUSH
58413: LD_INT 1
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: LIST
58424: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58425: LD_ADDR_VAR 0 19
58429: PUSH
58430: LD_INT 3
58432: PUSH
58433: LD_INT 2
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 3
58442: PUSH
58443: LD_INT 3
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 2
58452: PUSH
58453: LD_INT 3
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: LIST
58464: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58465: LD_ADDR_VAR 0 20
58469: PUSH
58470: LD_INT 1
58472: PUSH
58473: LD_INT 3
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 0
58482: PUSH
58483: LD_INT 3
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 1
58492: NEG
58493: PUSH
58494: LD_INT 2
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: LIST
58505: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58506: LD_ADDR_VAR 0 21
58510: PUSH
58511: LD_INT 2
58513: NEG
58514: PUSH
58515: LD_INT 1
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 3
58524: NEG
58525: PUSH
58526: LD_INT 0
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 3
58535: NEG
58536: PUSH
58537: LD_INT 1
58539: NEG
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: LIST
58549: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58550: LD_ADDR_VAR 0 22
58554: PUSH
58555: LD_INT 2
58557: NEG
58558: PUSH
58559: LD_INT 3
58561: NEG
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 3
58569: NEG
58570: PUSH
58571: LD_INT 2
58573: NEG
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 3
58581: NEG
58582: PUSH
58583: LD_INT 3
58585: NEG
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: LIST
58595: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
58596: LD_ADDR_VAR 0 23
58600: PUSH
58601: LD_INT 0
58603: PUSH
58604: LD_INT 3
58606: NEG
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 1
58614: NEG
58615: PUSH
58616: LD_INT 4
58618: NEG
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 1
58626: PUSH
58627: LD_INT 3
58629: NEG
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: LIST
58639: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
58640: LD_ADDR_VAR 0 24
58644: PUSH
58645: LD_INT 3
58647: PUSH
58648: LD_INT 0
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 3
58657: PUSH
58658: LD_INT 1
58660: NEG
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 4
58668: PUSH
58669: LD_INT 1
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: LIST
58680: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
58681: LD_ADDR_VAR 0 25
58685: PUSH
58686: LD_INT 3
58688: PUSH
58689: LD_INT 3
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 4
58698: PUSH
58699: LD_INT 3
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 3
58708: PUSH
58709: LD_INT 4
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: LIST
58720: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
58721: LD_ADDR_VAR 0 26
58725: PUSH
58726: LD_INT 0
58728: PUSH
58729: LD_INT 3
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 1
58738: PUSH
58739: LD_INT 4
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 1
58748: NEG
58749: PUSH
58750: LD_INT 3
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: LIST
58761: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58762: LD_ADDR_VAR 0 27
58766: PUSH
58767: LD_INT 3
58769: NEG
58770: PUSH
58771: LD_INT 0
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 3
58780: NEG
58781: PUSH
58782: LD_INT 1
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 4
58791: NEG
58792: PUSH
58793: LD_INT 1
58795: NEG
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: LIST
58805: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58806: LD_ADDR_VAR 0 28
58810: PUSH
58811: LD_INT 3
58813: NEG
58814: PUSH
58815: LD_INT 3
58817: NEG
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 3
58825: NEG
58826: PUSH
58827: LD_INT 4
58829: NEG
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 4
58837: NEG
58838: PUSH
58839: LD_INT 3
58841: NEG
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: LIST
58851: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58852: LD_ADDR_VAR 0 29
58856: PUSH
58857: LD_INT 1
58859: NEG
58860: PUSH
58861: LD_INT 3
58863: NEG
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 0
58871: PUSH
58872: LD_INT 3
58874: NEG
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 1
58882: PUSH
58883: LD_INT 2
58885: NEG
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 1
58893: NEG
58894: PUSH
58895: LD_INT 4
58897: NEG
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 0
58905: PUSH
58906: LD_INT 4
58908: NEG
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 1
58916: PUSH
58917: LD_INT 3
58919: NEG
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 1
58927: NEG
58928: PUSH
58929: LD_INT 5
58931: NEG
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 0
58939: PUSH
58940: LD_INT 5
58942: NEG
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 1
58950: PUSH
58951: LD_INT 4
58953: NEG
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 1
58961: NEG
58962: PUSH
58963: LD_INT 6
58965: NEG
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: LD_INT 0
58973: PUSH
58974: LD_INT 6
58976: NEG
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: LD_INT 1
58984: PUSH
58985: LD_INT 5
58987: NEG
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
59007: LD_ADDR_VAR 0 30
59011: PUSH
59012: LD_INT 2
59014: PUSH
59015: LD_INT 1
59017: NEG
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: PUSH
59023: LD_INT 3
59025: PUSH
59026: LD_INT 0
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 3
59035: PUSH
59036: LD_INT 1
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 3
59045: PUSH
59046: LD_INT 1
59048: NEG
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 4
59056: PUSH
59057: LD_INT 0
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: PUSH
59064: LD_INT 4
59066: PUSH
59067: LD_INT 1
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: LD_INT 4
59076: PUSH
59077: LD_INT 1
59079: NEG
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 5
59087: PUSH
59088: LD_INT 0
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 5
59097: PUSH
59098: LD_INT 1
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 5
59107: PUSH
59108: LD_INT 1
59110: NEG
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 6
59118: PUSH
59119: LD_INT 0
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 6
59128: PUSH
59129: LD_INT 1
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
59150: LD_ADDR_VAR 0 31
59154: PUSH
59155: LD_INT 3
59157: PUSH
59158: LD_INT 2
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 3
59167: PUSH
59168: LD_INT 3
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 2
59177: PUSH
59178: LD_INT 3
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 4
59187: PUSH
59188: LD_INT 3
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 4
59197: PUSH
59198: LD_INT 4
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 3
59207: PUSH
59208: LD_INT 4
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 5
59217: PUSH
59218: LD_INT 4
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 5
59227: PUSH
59228: LD_INT 5
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 4
59237: PUSH
59238: LD_INT 5
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 6
59247: PUSH
59248: LD_INT 5
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 6
59257: PUSH
59258: LD_INT 6
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: PUSH
59265: LD_INT 5
59267: PUSH
59268: LD_INT 6
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59289: LD_ADDR_VAR 0 32
59293: PUSH
59294: LD_INT 1
59296: PUSH
59297: LD_INT 3
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 0
59306: PUSH
59307: LD_INT 3
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 1
59316: NEG
59317: PUSH
59318: LD_INT 2
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 1
59327: PUSH
59328: LD_INT 4
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 0
59337: PUSH
59338: LD_INT 4
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: LD_INT 1
59347: NEG
59348: PUSH
59349: LD_INT 3
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 1
59358: PUSH
59359: LD_INT 5
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 0
59368: PUSH
59369: LD_INT 5
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 1
59378: NEG
59379: PUSH
59380: LD_INT 4
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 1
59389: PUSH
59390: LD_INT 6
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 0
59399: PUSH
59400: LD_INT 6
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: LD_INT 1
59409: NEG
59410: PUSH
59411: LD_INT 5
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: LIST
59427: LIST
59428: LIST
59429: LIST
59430: LIST
59431: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
59432: LD_ADDR_VAR 0 33
59436: PUSH
59437: LD_INT 2
59439: NEG
59440: PUSH
59441: LD_INT 1
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 3
59450: NEG
59451: PUSH
59452: LD_INT 0
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 3
59461: NEG
59462: PUSH
59463: LD_INT 1
59465: NEG
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 3
59473: NEG
59474: PUSH
59475: LD_INT 1
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 4
59484: NEG
59485: PUSH
59486: LD_INT 0
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 4
59495: NEG
59496: PUSH
59497: LD_INT 1
59499: NEG
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 4
59507: NEG
59508: PUSH
59509: LD_INT 1
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 5
59518: NEG
59519: PUSH
59520: LD_INT 0
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 5
59529: NEG
59530: PUSH
59531: LD_INT 1
59533: NEG
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 5
59541: NEG
59542: PUSH
59543: LD_INT 1
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 6
59552: NEG
59553: PUSH
59554: LD_INT 0
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 6
59563: NEG
59564: PUSH
59565: LD_INT 1
59567: NEG
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
59587: LD_ADDR_VAR 0 34
59591: PUSH
59592: LD_INT 2
59594: NEG
59595: PUSH
59596: LD_INT 3
59598: NEG
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 3
59606: NEG
59607: PUSH
59608: LD_INT 2
59610: NEG
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 3
59618: NEG
59619: PUSH
59620: LD_INT 3
59622: NEG
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 3
59630: NEG
59631: PUSH
59632: LD_INT 4
59634: NEG
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 4
59642: NEG
59643: PUSH
59644: LD_INT 3
59646: NEG
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 4
59654: NEG
59655: PUSH
59656: LD_INT 4
59658: NEG
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 4
59666: NEG
59667: PUSH
59668: LD_INT 5
59670: NEG
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 5
59678: NEG
59679: PUSH
59680: LD_INT 4
59682: NEG
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 5
59690: NEG
59691: PUSH
59692: LD_INT 5
59694: NEG
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 5
59702: NEG
59703: PUSH
59704: LD_INT 6
59706: NEG
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PUSH
59712: LD_INT 6
59714: NEG
59715: PUSH
59716: LD_INT 5
59718: NEG
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: LD_INT 6
59726: NEG
59727: PUSH
59728: LD_INT 6
59730: NEG
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59750: LD_ADDR_VAR 0 41
59754: PUSH
59755: LD_INT 0
59757: PUSH
59758: LD_INT 2
59760: NEG
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 1
59768: NEG
59769: PUSH
59770: LD_INT 3
59772: NEG
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 1
59780: PUSH
59781: LD_INT 2
59783: NEG
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: LIST
59793: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59794: LD_ADDR_VAR 0 42
59798: PUSH
59799: LD_INT 2
59801: PUSH
59802: LD_INT 0
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 2
59811: PUSH
59812: LD_INT 1
59814: NEG
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 3
59822: PUSH
59823: LD_INT 1
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: LIST
59834: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59835: LD_ADDR_VAR 0 43
59839: PUSH
59840: LD_INT 2
59842: PUSH
59843: LD_INT 2
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 3
59852: PUSH
59853: LD_INT 2
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 2
59862: PUSH
59863: LD_INT 3
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: LIST
59874: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59875: LD_ADDR_VAR 0 44
59879: PUSH
59880: LD_INT 0
59882: PUSH
59883: LD_INT 2
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_INT 1
59892: PUSH
59893: LD_INT 3
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 1
59902: NEG
59903: PUSH
59904: LD_INT 2
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: LIST
59915: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59916: LD_ADDR_VAR 0 45
59920: PUSH
59921: LD_INT 2
59923: NEG
59924: PUSH
59925: LD_INT 0
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: LD_INT 2
59934: NEG
59935: PUSH
59936: LD_INT 1
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 3
59945: NEG
59946: PUSH
59947: LD_INT 1
59949: NEG
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: LIST
59959: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59960: LD_ADDR_VAR 0 46
59964: PUSH
59965: LD_INT 2
59967: NEG
59968: PUSH
59969: LD_INT 2
59971: NEG
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: LD_INT 2
59979: NEG
59980: PUSH
59981: LD_INT 3
59983: NEG
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 3
59991: NEG
59992: PUSH
59993: LD_INT 2
59995: NEG
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: LIST
60005: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
60006: LD_ADDR_VAR 0 47
60010: PUSH
60011: LD_INT 2
60013: NEG
60014: PUSH
60015: LD_INT 3
60017: NEG
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 1
60025: NEG
60026: PUSH
60027: LD_INT 3
60029: NEG
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60039: LD_ADDR_VAR 0 48
60043: PUSH
60044: LD_INT 1
60046: PUSH
60047: LD_INT 2
60049: NEG
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 2
60057: PUSH
60058: LD_INT 1
60060: NEG
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
60070: LD_ADDR_VAR 0 49
60074: PUSH
60075: LD_INT 3
60077: PUSH
60078: LD_INT 1
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 3
60087: PUSH
60088: LD_INT 2
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
60099: LD_ADDR_VAR 0 50
60103: PUSH
60104: LD_INT 2
60106: PUSH
60107: LD_INT 3
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 1
60116: PUSH
60117: LD_INT 3
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60128: LD_ADDR_VAR 0 51
60132: PUSH
60133: LD_INT 1
60135: NEG
60136: PUSH
60137: LD_INT 2
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 2
60146: NEG
60147: PUSH
60148: LD_INT 1
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60159: LD_ADDR_VAR 0 52
60163: PUSH
60164: LD_INT 3
60166: NEG
60167: PUSH
60168: LD_INT 1
60170: NEG
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 3
60178: NEG
60179: PUSH
60180: LD_INT 2
60182: NEG
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60192: LD_ADDR_VAR 0 53
60196: PUSH
60197: LD_INT 1
60199: NEG
60200: PUSH
60201: LD_INT 3
60203: NEG
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: LD_INT 0
60211: PUSH
60212: LD_INT 3
60214: NEG
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 1
60222: PUSH
60223: LD_INT 2
60225: NEG
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: LIST
60235: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60236: LD_ADDR_VAR 0 54
60240: PUSH
60241: LD_INT 2
60243: PUSH
60244: LD_INT 1
60246: NEG
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 3
60254: PUSH
60255: LD_INT 0
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 3
60264: PUSH
60265: LD_INT 1
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: LIST
60276: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60277: LD_ADDR_VAR 0 55
60281: PUSH
60282: LD_INT 3
60284: PUSH
60285: LD_INT 2
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 3
60294: PUSH
60295: LD_INT 3
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 2
60304: PUSH
60305: LD_INT 3
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: LIST
60316: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60317: LD_ADDR_VAR 0 56
60321: PUSH
60322: LD_INT 1
60324: PUSH
60325: LD_INT 3
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: PUSH
60332: LD_INT 0
60334: PUSH
60335: LD_INT 3
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: PUSH
60342: LD_INT 1
60344: NEG
60345: PUSH
60346: LD_INT 2
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: LIST
60357: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60358: LD_ADDR_VAR 0 57
60362: PUSH
60363: LD_INT 2
60365: NEG
60366: PUSH
60367: LD_INT 1
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 3
60376: NEG
60377: PUSH
60378: LD_INT 0
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 3
60387: NEG
60388: PUSH
60389: LD_INT 1
60391: NEG
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: LIST
60401: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60402: LD_ADDR_VAR 0 58
60406: PUSH
60407: LD_INT 2
60409: NEG
60410: PUSH
60411: LD_INT 3
60413: NEG
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 3
60421: NEG
60422: PUSH
60423: LD_INT 2
60425: NEG
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 3
60433: NEG
60434: PUSH
60435: LD_INT 3
60437: NEG
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: LIST
60447: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
60448: LD_ADDR_VAR 0 59
60452: PUSH
60453: LD_INT 1
60455: NEG
60456: PUSH
60457: LD_INT 2
60459: NEG
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 0
60467: PUSH
60468: LD_INT 2
60470: NEG
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 1
60478: PUSH
60479: LD_INT 1
60481: NEG
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: LIST
60491: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60492: LD_ADDR_VAR 0 60
60496: PUSH
60497: LD_INT 1
60499: PUSH
60500: LD_INT 1
60502: NEG
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: LD_INT 2
60510: PUSH
60511: LD_INT 0
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 2
60520: PUSH
60521: LD_INT 1
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: LIST
60532: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60533: LD_ADDR_VAR 0 61
60537: PUSH
60538: LD_INT 2
60540: PUSH
60541: LD_INT 1
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: LD_INT 2
60550: PUSH
60551: LD_INT 2
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 1
60560: PUSH
60561: LD_INT 2
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: LIST
60572: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60573: LD_ADDR_VAR 0 62
60577: PUSH
60578: LD_INT 1
60580: PUSH
60581: LD_INT 2
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: PUSH
60588: LD_INT 0
60590: PUSH
60591: LD_INT 2
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: LD_INT 1
60600: NEG
60601: PUSH
60602: LD_INT 1
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: LIST
60613: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60614: LD_ADDR_VAR 0 63
60618: PUSH
60619: LD_INT 1
60621: NEG
60622: PUSH
60623: LD_INT 1
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PUSH
60630: LD_INT 2
60632: NEG
60633: PUSH
60634: LD_INT 0
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 2
60643: NEG
60644: PUSH
60645: LD_INT 1
60647: NEG
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: LIST
60657: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60658: LD_ADDR_VAR 0 64
60662: PUSH
60663: LD_INT 1
60665: NEG
60666: PUSH
60667: LD_INT 2
60669: NEG
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: LD_INT 2
60677: NEG
60678: PUSH
60679: LD_INT 1
60681: NEG
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: LD_INT 2
60689: NEG
60690: PUSH
60691: LD_INT 2
60693: NEG
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: LIST
60703: ST_TO_ADDR
// end ; 2 :
60704: GO 63970
60706: LD_INT 2
60708: DOUBLE
60709: EQUAL
60710: IFTRUE 60714
60712: GO 63969
60714: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
60715: LD_ADDR_VAR 0 29
60719: PUSH
60720: LD_INT 4
60722: PUSH
60723: LD_INT 0
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 4
60732: PUSH
60733: LD_INT 1
60735: NEG
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 5
60743: PUSH
60744: LD_INT 0
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 5
60753: PUSH
60754: LD_INT 1
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 4
60763: PUSH
60764: LD_INT 1
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 3
60773: PUSH
60774: LD_INT 0
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 3
60783: PUSH
60784: LD_INT 1
60786: NEG
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: LD_INT 3
60794: PUSH
60795: LD_INT 2
60797: NEG
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 5
60805: PUSH
60806: LD_INT 2
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 3
60815: PUSH
60816: LD_INT 3
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 3
60825: PUSH
60826: LD_INT 2
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 4
60835: PUSH
60836: LD_INT 3
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 4
60845: PUSH
60846: LD_INT 4
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 3
60855: PUSH
60856: LD_INT 4
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 2
60865: PUSH
60866: LD_INT 3
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 2
60875: PUSH
60876: LD_INT 2
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 4
60885: PUSH
60886: LD_INT 2
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 2
60895: PUSH
60896: LD_INT 4
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: LD_INT 0
60905: PUSH
60906: LD_INT 4
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: LD_INT 0
60915: PUSH
60916: LD_INT 3
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: PUSH
60923: LD_INT 1
60925: PUSH
60926: LD_INT 4
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 1
60935: PUSH
60936: LD_INT 5
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: PUSH
60943: LD_INT 0
60945: PUSH
60946: LD_INT 5
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PUSH
60953: LD_INT 1
60955: NEG
60956: PUSH
60957: LD_INT 4
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: LD_INT 1
60966: NEG
60967: PUSH
60968: LD_INT 3
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 2
60977: PUSH
60978: LD_INT 5
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 2
60987: NEG
60988: PUSH
60989: LD_INT 3
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 3
60998: NEG
60999: PUSH
61000: LD_INT 0
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: LD_INT 3
61009: NEG
61010: PUSH
61011: LD_INT 1
61013: NEG
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: PUSH
61019: LD_INT 2
61021: NEG
61022: PUSH
61023: LD_INT 0
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: LD_INT 2
61032: NEG
61033: PUSH
61034: LD_INT 1
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 3
61043: NEG
61044: PUSH
61045: LD_INT 1
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 4
61054: NEG
61055: PUSH
61056: LD_INT 0
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: LD_INT 4
61065: NEG
61066: PUSH
61067: LD_INT 1
61069: NEG
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 4
61077: NEG
61078: PUSH
61079: LD_INT 2
61081: NEG
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: LD_INT 2
61089: NEG
61090: PUSH
61091: LD_INT 2
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 4
61100: NEG
61101: PUSH
61102: LD_INT 4
61104: NEG
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_INT 4
61112: NEG
61113: PUSH
61114: LD_INT 5
61116: NEG
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 3
61124: NEG
61125: PUSH
61126: LD_INT 4
61128: NEG
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 3
61136: NEG
61137: PUSH
61138: LD_INT 3
61140: NEG
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 4
61148: NEG
61149: PUSH
61150: LD_INT 3
61152: NEG
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 5
61160: NEG
61161: PUSH
61162: LD_INT 4
61164: NEG
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 5
61172: NEG
61173: PUSH
61174: LD_INT 5
61176: NEG
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 3
61184: NEG
61185: PUSH
61186: LD_INT 5
61188: NEG
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: LD_INT 5
61196: NEG
61197: PUSH
61198: LD_INT 3
61200: NEG
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: LIST
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
61253: LD_ADDR_VAR 0 30
61257: PUSH
61258: LD_INT 4
61260: PUSH
61261: LD_INT 4
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 4
61270: PUSH
61271: LD_INT 3
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 5
61280: PUSH
61281: LD_INT 4
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 5
61290: PUSH
61291: LD_INT 5
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 4
61300: PUSH
61301: LD_INT 5
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 3
61310: PUSH
61311: LD_INT 4
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 3
61320: PUSH
61321: LD_INT 3
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: LD_INT 5
61330: PUSH
61331: LD_INT 3
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 3
61340: PUSH
61341: LD_INT 5
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: PUSH
61348: LD_INT 0
61350: PUSH
61351: LD_INT 3
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PUSH
61358: LD_INT 0
61360: PUSH
61361: LD_INT 2
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 1
61370: PUSH
61371: LD_INT 3
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 1
61380: PUSH
61381: LD_INT 4
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: LD_INT 0
61390: PUSH
61391: LD_INT 4
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 1
61400: NEG
61401: PUSH
61402: LD_INT 3
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: LD_INT 1
61411: NEG
61412: PUSH
61413: LD_INT 2
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 2
61422: PUSH
61423: LD_INT 4
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: LD_INT 2
61432: NEG
61433: PUSH
61434: LD_INT 2
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: LD_INT 4
61443: NEG
61444: PUSH
61445: LD_INT 0
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 4
61454: NEG
61455: PUSH
61456: LD_INT 1
61458: NEG
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PUSH
61464: LD_INT 3
61466: NEG
61467: PUSH
61468: LD_INT 0
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: PUSH
61475: LD_INT 3
61477: NEG
61478: PUSH
61479: LD_INT 1
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 4
61488: NEG
61489: PUSH
61490: LD_INT 1
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 5
61499: NEG
61500: PUSH
61501: LD_INT 0
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: PUSH
61508: LD_INT 5
61510: NEG
61511: PUSH
61512: LD_INT 1
61514: NEG
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 5
61522: NEG
61523: PUSH
61524: LD_INT 2
61526: NEG
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: PUSH
61532: LD_INT 3
61534: NEG
61535: PUSH
61536: LD_INT 2
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 3
61545: NEG
61546: PUSH
61547: LD_INT 3
61549: NEG
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: PUSH
61555: LD_INT 3
61557: NEG
61558: PUSH
61559: LD_INT 4
61561: NEG
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 2
61569: NEG
61570: PUSH
61571: LD_INT 3
61573: NEG
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: PUSH
61579: LD_INT 2
61581: NEG
61582: PUSH
61583: LD_INT 2
61585: NEG
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 3
61593: NEG
61594: PUSH
61595: LD_INT 2
61597: NEG
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 4
61605: NEG
61606: PUSH
61607: LD_INT 3
61609: NEG
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: PUSH
61615: LD_INT 4
61617: NEG
61618: PUSH
61619: LD_INT 4
61621: NEG
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: LD_INT 2
61629: NEG
61630: PUSH
61631: LD_INT 4
61633: NEG
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 4
61641: NEG
61642: PUSH
61643: LD_INT 2
61645: NEG
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_INT 0
61653: PUSH
61654: LD_INT 4
61656: NEG
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PUSH
61662: LD_INT 0
61664: PUSH
61665: LD_INT 5
61667: NEG
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: PUSH
61673: LD_INT 1
61675: PUSH
61676: LD_INT 4
61678: NEG
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PUSH
61684: LD_INT 1
61686: PUSH
61687: LD_INT 3
61689: NEG
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: PUSH
61695: LD_INT 0
61697: PUSH
61698: LD_INT 3
61700: NEG
61701: PUSH
61702: EMPTY
61703: LIST
61704: LIST
61705: PUSH
61706: LD_INT 1
61708: NEG
61709: PUSH
61710: LD_INT 4
61712: NEG
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 1
61720: NEG
61721: PUSH
61722: LD_INT 5
61724: NEG
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: PUSH
61730: LD_INT 2
61732: PUSH
61733: LD_INT 3
61735: NEG
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: PUSH
61741: LD_INT 2
61743: NEG
61744: PUSH
61745: LD_INT 5
61747: NEG
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: LIST
61765: LIST
61766: LIST
61767: LIST
61768: LIST
61769: LIST
61770: LIST
61771: LIST
61772: LIST
61773: LIST
61774: LIST
61775: LIST
61776: LIST
61777: LIST
61778: LIST
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61800: LD_ADDR_VAR 0 31
61804: PUSH
61805: LD_INT 0
61807: PUSH
61808: LD_INT 4
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: LD_INT 0
61817: PUSH
61818: LD_INT 3
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 1
61827: PUSH
61828: LD_INT 4
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PUSH
61835: LD_INT 1
61837: PUSH
61838: LD_INT 5
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 0
61847: PUSH
61848: LD_INT 5
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: LD_INT 1
61857: NEG
61858: PUSH
61859: LD_INT 4
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: PUSH
61866: LD_INT 1
61868: NEG
61869: PUSH
61870: LD_INT 3
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: PUSH
61877: LD_INT 2
61879: PUSH
61880: LD_INT 5
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: PUSH
61887: LD_INT 2
61889: NEG
61890: PUSH
61891: LD_INT 3
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: LD_INT 3
61900: NEG
61901: PUSH
61902: LD_INT 0
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: LD_INT 3
61911: NEG
61912: PUSH
61913: LD_INT 1
61915: NEG
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: LD_INT 2
61923: NEG
61924: PUSH
61925: LD_INT 0
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: LD_INT 2
61934: NEG
61935: PUSH
61936: LD_INT 1
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: PUSH
61943: LD_INT 3
61945: NEG
61946: PUSH
61947: LD_INT 1
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: PUSH
61954: LD_INT 4
61956: NEG
61957: PUSH
61958: LD_INT 0
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 4
61967: NEG
61968: PUSH
61969: LD_INT 1
61971: NEG
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: LD_INT 4
61979: NEG
61980: PUSH
61981: LD_INT 2
61983: NEG
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 2
61991: NEG
61992: PUSH
61993: LD_INT 2
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: PUSH
62000: LD_INT 4
62002: NEG
62003: PUSH
62004: LD_INT 4
62006: NEG
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: LD_INT 4
62014: NEG
62015: PUSH
62016: LD_INT 5
62018: NEG
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 3
62026: NEG
62027: PUSH
62028: LD_INT 4
62030: NEG
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: PUSH
62036: LD_INT 3
62038: NEG
62039: PUSH
62040: LD_INT 3
62042: NEG
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: PUSH
62048: LD_INT 4
62050: NEG
62051: PUSH
62052: LD_INT 3
62054: NEG
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: PUSH
62060: LD_INT 5
62062: NEG
62063: PUSH
62064: LD_INT 4
62066: NEG
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: LD_INT 5
62074: NEG
62075: PUSH
62076: LD_INT 5
62078: NEG
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: LD_INT 3
62086: NEG
62087: PUSH
62088: LD_INT 5
62090: NEG
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 5
62098: NEG
62099: PUSH
62100: LD_INT 3
62102: NEG
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 0
62110: PUSH
62111: LD_INT 3
62113: NEG
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 0
62121: PUSH
62122: LD_INT 4
62124: NEG
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: PUSH
62130: LD_INT 1
62132: PUSH
62133: LD_INT 3
62135: NEG
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: PUSH
62141: LD_INT 1
62143: PUSH
62144: LD_INT 2
62146: NEG
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: LD_INT 0
62154: PUSH
62155: LD_INT 2
62157: NEG
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: LD_INT 1
62165: NEG
62166: PUSH
62167: LD_INT 3
62169: NEG
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 1
62177: NEG
62178: PUSH
62179: LD_INT 4
62181: NEG
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: LD_INT 2
62189: PUSH
62190: LD_INT 2
62192: NEG
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: PUSH
62198: LD_INT 2
62200: NEG
62201: PUSH
62202: LD_INT 4
62204: NEG
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: PUSH
62210: LD_INT 4
62212: PUSH
62213: LD_INT 0
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: PUSH
62220: LD_INT 4
62222: PUSH
62223: LD_INT 1
62225: NEG
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: LD_INT 5
62233: PUSH
62234: LD_INT 0
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: LD_INT 5
62243: PUSH
62244: LD_INT 1
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: PUSH
62251: LD_INT 4
62253: PUSH
62254: LD_INT 1
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: PUSH
62261: LD_INT 3
62263: PUSH
62264: LD_INT 0
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 3
62273: PUSH
62274: LD_INT 1
62276: NEG
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 3
62284: PUSH
62285: LD_INT 2
62287: NEG
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 5
62295: PUSH
62296: LD_INT 2
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: LIST
62310: LIST
62311: LIST
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: LIST
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: LIST
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
62350: LD_ADDR_VAR 0 32
62354: PUSH
62355: LD_INT 4
62357: NEG
62358: PUSH
62359: LD_INT 0
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: LD_INT 4
62368: NEG
62369: PUSH
62370: LD_INT 1
62372: NEG
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: LD_INT 3
62380: NEG
62381: PUSH
62382: LD_INT 0
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: LD_INT 3
62391: NEG
62392: PUSH
62393: LD_INT 1
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: PUSH
62400: LD_INT 4
62402: NEG
62403: PUSH
62404: LD_INT 1
62406: PUSH
62407: EMPTY
62408: LIST
62409: LIST
62410: PUSH
62411: LD_INT 5
62413: NEG
62414: PUSH
62415: LD_INT 0
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: LD_INT 5
62424: NEG
62425: PUSH
62426: LD_INT 1
62428: NEG
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: LD_INT 5
62436: NEG
62437: PUSH
62438: LD_INT 2
62440: NEG
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 3
62448: NEG
62449: PUSH
62450: LD_INT 2
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: LD_INT 3
62459: NEG
62460: PUSH
62461: LD_INT 3
62463: NEG
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 3
62471: NEG
62472: PUSH
62473: LD_INT 4
62475: NEG
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 2
62483: NEG
62484: PUSH
62485: LD_INT 3
62487: NEG
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: PUSH
62493: LD_INT 2
62495: NEG
62496: PUSH
62497: LD_INT 2
62499: NEG
62500: PUSH
62501: EMPTY
62502: LIST
62503: LIST
62504: PUSH
62505: LD_INT 3
62507: NEG
62508: PUSH
62509: LD_INT 2
62511: NEG
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: PUSH
62517: LD_INT 4
62519: NEG
62520: PUSH
62521: LD_INT 3
62523: NEG
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: PUSH
62529: LD_INT 4
62531: NEG
62532: PUSH
62533: LD_INT 4
62535: NEG
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: PUSH
62541: LD_INT 2
62543: NEG
62544: PUSH
62545: LD_INT 4
62547: NEG
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: PUSH
62553: LD_INT 4
62555: NEG
62556: PUSH
62557: LD_INT 2
62559: NEG
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: LD_INT 0
62567: PUSH
62568: LD_INT 4
62570: NEG
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: PUSH
62576: LD_INT 0
62578: PUSH
62579: LD_INT 5
62581: NEG
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: PUSH
62587: LD_INT 1
62589: PUSH
62590: LD_INT 4
62592: NEG
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: PUSH
62598: LD_INT 1
62600: PUSH
62601: LD_INT 3
62603: NEG
62604: PUSH
62605: EMPTY
62606: LIST
62607: LIST
62608: PUSH
62609: LD_INT 0
62611: PUSH
62612: LD_INT 3
62614: NEG
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: LD_INT 1
62622: NEG
62623: PUSH
62624: LD_INT 4
62626: NEG
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PUSH
62632: LD_INT 1
62634: NEG
62635: PUSH
62636: LD_INT 5
62638: NEG
62639: PUSH
62640: EMPTY
62641: LIST
62642: LIST
62643: PUSH
62644: LD_INT 2
62646: PUSH
62647: LD_INT 3
62649: NEG
62650: PUSH
62651: EMPTY
62652: LIST
62653: LIST
62654: PUSH
62655: LD_INT 2
62657: NEG
62658: PUSH
62659: LD_INT 5
62661: NEG
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: PUSH
62667: LD_INT 3
62669: PUSH
62670: LD_INT 0
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: PUSH
62677: LD_INT 3
62679: PUSH
62680: LD_INT 1
62682: NEG
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 4
62690: PUSH
62691: LD_INT 0
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 4
62700: PUSH
62701: LD_INT 1
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: PUSH
62708: LD_INT 3
62710: PUSH
62711: LD_INT 1
62713: PUSH
62714: EMPTY
62715: LIST
62716: LIST
62717: PUSH
62718: LD_INT 2
62720: PUSH
62721: LD_INT 0
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: PUSH
62728: LD_INT 2
62730: PUSH
62731: LD_INT 1
62733: NEG
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: LD_INT 2
62741: PUSH
62742: LD_INT 2
62744: NEG
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 4
62752: PUSH
62753: LD_INT 2
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_INT 4
62762: PUSH
62763: LD_INT 4
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: LD_INT 4
62772: PUSH
62773: LD_INT 3
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: PUSH
62780: LD_INT 5
62782: PUSH
62783: LD_INT 4
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: PUSH
62790: LD_INT 5
62792: PUSH
62793: LD_INT 5
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 4
62802: PUSH
62803: LD_INT 5
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: PUSH
62810: LD_INT 3
62812: PUSH
62813: LD_INT 4
62815: PUSH
62816: EMPTY
62817: LIST
62818: LIST
62819: PUSH
62820: LD_INT 3
62822: PUSH
62823: LD_INT 3
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 5
62832: PUSH
62833: LD_INT 3
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: PUSH
62840: LD_INT 3
62842: PUSH
62843: LD_INT 5
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: LIST
62854: LIST
62855: LIST
62856: LIST
62857: LIST
62858: LIST
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: LIST
62865: LIST
62866: LIST
62867: LIST
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: LIST
62884: LIST
62885: LIST
62886: LIST
62887: LIST
62888: LIST
62889: LIST
62890: LIST
62891: LIST
62892: LIST
62893: LIST
62894: LIST
62895: LIST
62896: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62897: LD_ADDR_VAR 0 33
62901: PUSH
62902: LD_INT 4
62904: NEG
62905: PUSH
62906: LD_INT 4
62908: NEG
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PUSH
62914: LD_INT 4
62916: NEG
62917: PUSH
62918: LD_INT 5
62920: NEG
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: PUSH
62926: LD_INT 3
62928: NEG
62929: PUSH
62930: LD_INT 4
62932: NEG
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: LD_INT 3
62940: NEG
62941: PUSH
62942: LD_INT 3
62944: NEG
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: PUSH
62950: LD_INT 4
62952: NEG
62953: PUSH
62954: LD_INT 3
62956: NEG
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: PUSH
62962: LD_INT 5
62964: NEG
62965: PUSH
62966: LD_INT 4
62968: NEG
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: PUSH
62974: LD_INT 5
62976: NEG
62977: PUSH
62978: LD_INT 5
62980: NEG
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 3
62988: NEG
62989: PUSH
62990: LD_INT 5
62992: NEG
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: LD_INT 5
63000: NEG
63001: PUSH
63002: LD_INT 3
63004: NEG
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: PUSH
63010: LD_INT 0
63012: PUSH
63013: LD_INT 3
63015: NEG
63016: PUSH
63017: EMPTY
63018: LIST
63019: LIST
63020: PUSH
63021: LD_INT 0
63023: PUSH
63024: LD_INT 4
63026: NEG
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: PUSH
63032: LD_INT 1
63034: PUSH
63035: LD_INT 3
63037: NEG
63038: PUSH
63039: EMPTY
63040: LIST
63041: LIST
63042: PUSH
63043: LD_INT 1
63045: PUSH
63046: LD_INT 2
63048: NEG
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: PUSH
63054: LD_INT 0
63056: PUSH
63057: LD_INT 2
63059: NEG
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: LD_INT 1
63067: NEG
63068: PUSH
63069: LD_INT 3
63071: NEG
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: PUSH
63077: LD_INT 1
63079: NEG
63080: PUSH
63081: LD_INT 4
63083: NEG
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: LD_INT 2
63091: PUSH
63092: LD_INT 2
63094: NEG
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: PUSH
63100: LD_INT 2
63102: NEG
63103: PUSH
63104: LD_INT 4
63106: NEG
63107: PUSH
63108: EMPTY
63109: LIST
63110: LIST
63111: PUSH
63112: LD_INT 4
63114: PUSH
63115: LD_INT 0
63117: PUSH
63118: EMPTY
63119: LIST
63120: LIST
63121: PUSH
63122: LD_INT 4
63124: PUSH
63125: LD_INT 1
63127: NEG
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: PUSH
63133: LD_INT 5
63135: PUSH
63136: LD_INT 0
63138: PUSH
63139: EMPTY
63140: LIST
63141: LIST
63142: PUSH
63143: LD_INT 5
63145: PUSH
63146: LD_INT 1
63148: PUSH
63149: EMPTY
63150: LIST
63151: LIST
63152: PUSH
63153: LD_INT 4
63155: PUSH
63156: LD_INT 1
63158: PUSH
63159: EMPTY
63160: LIST
63161: LIST
63162: PUSH
63163: LD_INT 3
63165: PUSH
63166: LD_INT 0
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: PUSH
63173: LD_INT 3
63175: PUSH
63176: LD_INT 1
63178: NEG
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: PUSH
63184: LD_INT 3
63186: PUSH
63187: LD_INT 2
63189: NEG
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: PUSH
63195: LD_INT 5
63197: PUSH
63198: LD_INT 2
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: PUSH
63205: LD_INT 3
63207: PUSH
63208: LD_INT 3
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: PUSH
63215: LD_INT 3
63217: PUSH
63218: LD_INT 2
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: PUSH
63225: LD_INT 4
63227: PUSH
63228: LD_INT 3
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: PUSH
63235: LD_INT 4
63237: PUSH
63238: LD_INT 4
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: PUSH
63245: LD_INT 3
63247: PUSH
63248: LD_INT 4
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: LD_INT 2
63257: PUSH
63258: LD_INT 3
63260: PUSH
63261: EMPTY
63262: LIST
63263: LIST
63264: PUSH
63265: LD_INT 2
63267: PUSH
63268: LD_INT 2
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: LD_INT 4
63277: PUSH
63278: LD_INT 2
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: PUSH
63285: LD_INT 2
63287: PUSH
63288: LD_INT 4
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 0
63297: PUSH
63298: LD_INT 4
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: LD_INT 0
63307: PUSH
63308: LD_INT 3
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: PUSH
63315: LD_INT 1
63317: PUSH
63318: LD_INT 4
63320: PUSH
63321: EMPTY
63322: LIST
63323: LIST
63324: PUSH
63325: LD_INT 1
63327: PUSH
63328: LD_INT 5
63330: PUSH
63331: EMPTY
63332: LIST
63333: LIST
63334: PUSH
63335: LD_INT 0
63337: PUSH
63338: LD_INT 5
63340: PUSH
63341: EMPTY
63342: LIST
63343: LIST
63344: PUSH
63345: LD_INT 1
63347: NEG
63348: PUSH
63349: LD_INT 4
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: PUSH
63356: LD_INT 1
63358: NEG
63359: PUSH
63360: LD_INT 3
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PUSH
63367: LD_INT 2
63369: PUSH
63370: LD_INT 5
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: LD_INT 2
63379: NEG
63380: PUSH
63381: LD_INT 3
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: PUSH
63388: EMPTY
63389: LIST
63390: LIST
63391: LIST
63392: LIST
63393: LIST
63394: LIST
63395: LIST
63396: LIST
63397: LIST
63398: LIST
63399: LIST
63400: LIST
63401: LIST
63402: LIST
63403: LIST
63404: LIST
63405: LIST
63406: LIST
63407: LIST
63408: LIST
63409: LIST
63410: LIST
63411: LIST
63412: LIST
63413: LIST
63414: LIST
63415: LIST
63416: LIST
63417: LIST
63418: LIST
63419: LIST
63420: LIST
63421: LIST
63422: LIST
63423: LIST
63424: LIST
63425: LIST
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: LIST
63431: LIST
63432: LIST
63433: LIST
63434: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
63435: LD_ADDR_VAR 0 34
63439: PUSH
63440: LD_INT 0
63442: PUSH
63443: LD_INT 4
63445: NEG
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: PUSH
63451: LD_INT 0
63453: PUSH
63454: LD_INT 5
63456: NEG
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: PUSH
63462: LD_INT 1
63464: PUSH
63465: LD_INT 4
63467: NEG
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: PUSH
63473: LD_INT 1
63475: PUSH
63476: LD_INT 3
63478: NEG
63479: PUSH
63480: EMPTY
63481: LIST
63482: LIST
63483: PUSH
63484: LD_INT 0
63486: PUSH
63487: LD_INT 3
63489: NEG
63490: PUSH
63491: EMPTY
63492: LIST
63493: LIST
63494: PUSH
63495: LD_INT 1
63497: NEG
63498: PUSH
63499: LD_INT 4
63501: NEG
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PUSH
63507: LD_INT 1
63509: NEG
63510: PUSH
63511: LD_INT 5
63513: NEG
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: LD_INT 2
63521: PUSH
63522: LD_INT 3
63524: NEG
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: PUSH
63530: LD_INT 2
63532: NEG
63533: PUSH
63534: LD_INT 5
63536: NEG
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: PUSH
63542: LD_INT 3
63544: PUSH
63545: LD_INT 0
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: PUSH
63552: LD_INT 3
63554: PUSH
63555: LD_INT 1
63557: NEG
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: PUSH
63563: LD_INT 4
63565: PUSH
63566: LD_INT 0
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: PUSH
63573: LD_INT 4
63575: PUSH
63576: LD_INT 1
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: PUSH
63583: LD_INT 3
63585: PUSH
63586: LD_INT 1
63588: PUSH
63589: EMPTY
63590: LIST
63591: LIST
63592: PUSH
63593: LD_INT 2
63595: PUSH
63596: LD_INT 0
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: PUSH
63603: LD_INT 2
63605: PUSH
63606: LD_INT 1
63608: NEG
63609: PUSH
63610: EMPTY
63611: LIST
63612: LIST
63613: PUSH
63614: LD_INT 2
63616: PUSH
63617: LD_INT 2
63619: NEG
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: PUSH
63625: LD_INT 4
63627: PUSH
63628: LD_INT 2
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: PUSH
63635: LD_INT 4
63637: PUSH
63638: LD_INT 4
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: PUSH
63645: LD_INT 4
63647: PUSH
63648: LD_INT 3
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 5
63657: PUSH
63658: LD_INT 4
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 5
63667: PUSH
63668: LD_INT 5
63670: PUSH
63671: EMPTY
63672: LIST
63673: LIST
63674: PUSH
63675: LD_INT 4
63677: PUSH
63678: LD_INT 5
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: PUSH
63685: LD_INT 3
63687: PUSH
63688: LD_INT 4
63690: PUSH
63691: EMPTY
63692: LIST
63693: LIST
63694: PUSH
63695: LD_INT 3
63697: PUSH
63698: LD_INT 3
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: PUSH
63705: LD_INT 5
63707: PUSH
63708: LD_INT 3
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: PUSH
63715: LD_INT 3
63717: PUSH
63718: LD_INT 5
63720: PUSH
63721: EMPTY
63722: LIST
63723: LIST
63724: PUSH
63725: LD_INT 0
63727: PUSH
63728: LD_INT 3
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: PUSH
63735: LD_INT 0
63737: PUSH
63738: LD_INT 2
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: PUSH
63745: LD_INT 1
63747: PUSH
63748: LD_INT 3
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: PUSH
63755: LD_INT 1
63757: PUSH
63758: LD_INT 4
63760: PUSH
63761: EMPTY
63762: LIST
63763: LIST
63764: PUSH
63765: LD_INT 0
63767: PUSH
63768: LD_INT 4
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: PUSH
63775: LD_INT 1
63777: NEG
63778: PUSH
63779: LD_INT 3
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: PUSH
63786: LD_INT 1
63788: NEG
63789: PUSH
63790: LD_INT 2
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PUSH
63797: LD_INT 2
63799: PUSH
63800: LD_INT 4
63802: PUSH
63803: EMPTY
63804: LIST
63805: LIST
63806: PUSH
63807: LD_INT 2
63809: NEG
63810: PUSH
63811: LD_INT 2
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: PUSH
63818: LD_INT 4
63820: NEG
63821: PUSH
63822: LD_INT 0
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: PUSH
63829: LD_INT 4
63831: NEG
63832: PUSH
63833: LD_INT 1
63835: NEG
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: PUSH
63841: LD_INT 3
63843: NEG
63844: PUSH
63845: LD_INT 0
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: LD_INT 3
63854: NEG
63855: PUSH
63856: LD_INT 1
63858: PUSH
63859: EMPTY
63860: LIST
63861: LIST
63862: PUSH
63863: LD_INT 4
63865: NEG
63866: PUSH
63867: LD_INT 1
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: PUSH
63874: LD_INT 5
63876: NEG
63877: PUSH
63878: LD_INT 0
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: PUSH
63885: LD_INT 5
63887: NEG
63888: PUSH
63889: LD_INT 1
63891: NEG
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: PUSH
63897: LD_INT 5
63899: NEG
63900: PUSH
63901: LD_INT 2
63903: NEG
63904: PUSH
63905: EMPTY
63906: LIST
63907: LIST
63908: PUSH
63909: LD_INT 3
63911: NEG
63912: PUSH
63913: LD_INT 2
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: LIST
63928: LIST
63929: LIST
63930: LIST
63931: LIST
63932: LIST
63933: LIST
63934: LIST
63935: LIST
63936: LIST
63937: LIST
63938: LIST
63939: LIST
63940: LIST
63941: LIST
63942: LIST
63943: LIST
63944: LIST
63945: LIST
63946: LIST
63947: LIST
63948: LIST
63949: LIST
63950: LIST
63951: LIST
63952: LIST
63953: LIST
63954: LIST
63955: LIST
63956: LIST
63957: LIST
63958: LIST
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: ST_TO_ADDR
// end ; end ;
63967: GO 63970
63969: POP
// case btype of b_depot , b_warehouse :
63970: LD_VAR 0 1
63974: PUSH
63975: LD_INT 0
63977: DOUBLE
63978: EQUAL
63979: IFTRUE 63989
63981: LD_INT 1
63983: DOUBLE
63984: EQUAL
63985: IFTRUE 63989
63987: GO 64190
63989: POP
// case nation of nation_american :
63990: LD_VAR 0 5
63994: PUSH
63995: LD_INT 1
63997: DOUBLE
63998: EQUAL
63999: IFTRUE 64003
64001: GO 64059
64003: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
64004: LD_ADDR_VAR 0 9
64008: PUSH
64009: LD_VAR 0 11
64013: PUSH
64014: LD_VAR 0 12
64018: PUSH
64019: LD_VAR 0 13
64023: PUSH
64024: LD_VAR 0 14
64028: PUSH
64029: LD_VAR 0 15
64033: PUSH
64034: LD_VAR 0 16
64038: PUSH
64039: EMPTY
64040: LIST
64041: LIST
64042: LIST
64043: LIST
64044: LIST
64045: LIST
64046: PUSH
64047: LD_VAR 0 4
64051: PUSH
64052: LD_INT 1
64054: PLUS
64055: ARRAY
64056: ST_TO_ADDR
64057: GO 64188
64059: LD_INT 2
64061: DOUBLE
64062: EQUAL
64063: IFTRUE 64067
64065: GO 64123
64067: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
64068: LD_ADDR_VAR 0 9
64072: PUSH
64073: LD_VAR 0 17
64077: PUSH
64078: LD_VAR 0 18
64082: PUSH
64083: LD_VAR 0 19
64087: PUSH
64088: LD_VAR 0 20
64092: PUSH
64093: LD_VAR 0 21
64097: PUSH
64098: LD_VAR 0 22
64102: PUSH
64103: EMPTY
64104: LIST
64105: LIST
64106: LIST
64107: LIST
64108: LIST
64109: LIST
64110: PUSH
64111: LD_VAR 0 4
64115: PUSH
64116: LD_INT 1
64118: PLUS
64119: ARRAY
64120: ST_TO_ADDR
64121: GO 64188
64123: LD_INT 3
64125: DOUBLE
64126: EQUAL
64127: IFTRUE 64131
64129: GO 64187
64131: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
64132: LD_ADDR_VAR 0 9
64136: PUSH
64137: LD_VAR 0 23
64141: PUSH
64142: LD_VAR 0 24
64146: PUSH
64147: LD_VAR 0 25
64151: PUSH
64152: LD_VAR 0 26
64156: PUSH
64157: LD_VAR 0 27
64161: PUSH
64162: LD_VAR 0 28
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: LIST
64171: LIST
64172: LIST
64173: LIST
64174: PUSH
64175: LD_VAR 0 4
64179: PUSH
64180: LD_INT 1
64182: PLUS
64183: ARRAY
64184: ST_TO_ADDR
64185: GO 64188
64187: POP
64188: GO 64743
64190: LD_INT 2
64192: DOUBLE
64193: EQUAL
64194: IFTRUE 64204
64196: LD_INT 3
64198: DOUBLE
64199: EQUAL
64200: IFTRUE 64204
64202: GO 64260
64204: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
64205: LD_ADDR_VAR 0 9
64209: PUSH
64210: LD_VAR 0 29
64214: PUSH
64215: LD_VAR 0 30
64219: PUSH
64220: LD_VAR 0 31
64224: PUSH
64225: LD_VAR 0 32
64229: PUSH
64230: LD_VAR 0 33
64234: PUSH
64235: LD_VAR 0 34
64239: PUSH
64240: EMPTY
64241: LIST
64242: LIST
64243: LIST
64244: LIST
64245: LIST
64246: LIST
64247: PUSH
64248: LD_VAR 0 4
64252: PUSH
64253: LD_INT 1
64255: PLUS
64256: ARRAY
64257: ST_TO_ADDR
64258: GO 64743
64260: LD_INT 16
64262: DOUBLE
64263: EQUAL
64264: IFTRUE 64322
64266: LD_INT 17
64268: DOUBLE
64269: EQUAL
64270: IFTRUE 64322
64272: LD_INT 18
64274: DOUBLE
64275: EQUAL
64276: IFTRUE 64322
64278: LD_INT 19
64280: DOUBLE
64281: EQUAL
64282: IFTRUE 64322
64284: LD_INT 22
64286: DOUBLE
64287: EQUAL
64288: IFTRUE 64322
64290: LD_INT 20
64292: DOUBLE
64293: EQUAL
64294: IFTRUE 64322
64296: LD_INT 21
64298: DOUBLE
64299: EQUAL
64300: IFTRUE 64322
64302: LD_INT 23
64304: DOUBLE
64305: EQUAL
64306: IFTRUE 64322
64308: LD_INT 24
64310: DOUBLE
64311: EQUAL
64312: IFTRUE 64322
64314: LD_INT 25
64316: DOUBLE
64317: EQUAL
64318: IFTRUE 64322
64320: GO 64378
64322: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64323: LD_ADDR_VAR 0 9
64327: PUSH
64328: LD_VAR 0 35
64332: PUSH
64333: LD_VAR 0 36
64337: PUSH
64338: LD_VAR 0 37
64342: PUSH
64343: LD_VAR 0 38
64347: PUSH
64348: LD_VAR 0 39
64352: PUSH
64353: LD_VAR 0 40
64357: PUSH
64358: EMPTY
64359: LIST
64360: LIST
64361: LIST
64362: LIST
64363: LIST
64364: LIST
64365: PUSH
64366: LD_VAR 0 4
64370: PUSH
64371: LD_INT 1
64373: PLUS
64374: ARRAY
64375: ST_TO_ADDR
64376: GO 64743
64378: LD_INT 6
64380: DOUBLE
64381: EQUAL
64382: IFTRUE 64434
64384: LD_INT 7
64386: DOUBLE
64387: EQUAL
64388: IFTRUE 64434
64390: LD_INT 8
64392: DOUBLE
64393: EQUAL
64394: IFTRUE 64434
64396: LD_INT 13
64398: DOUBLE
64399: EQUAL
64400: IFTRUE 64434
64402: LD_INT 12
64404: DOUBLE
64405: EQUAL
64406: IFTRUE 64434
64408: LD_INT 15
64410: DOUBLE
64411: EQUAL
64412: IFTRUE 64434
64414: LD_INT 11
64416: DOUBLE
64417: EQUAL
64418: IFTRUE 64434
64420: LD_INT 14
64422: DOUBLE
64423: EQUAL
64424: IFTRUE 64434
64426: LD_INT 10
64428: DOUBLE
64429: EQUAL
64430: IFTRUE 64434
64432: GO 64490
64434: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
64435: LD_ADDR_VAR 0 9
64439: PUSH
64440: LD_VAR 0 41
64444: PUSH
64445: LD_VAR 0 42
64449: PUSH
64450: LD_VAR 0 43
64454: PUSH
64455: LD_VAR 0 44
64459: PUSH
64460: LD_VAR 0 45
64464: PUSH
64465: LD_VAR 0 46
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: LIST
64474: LIST
64475: LIST
64476: LIST
64477: PUSH
64478: LD_VAR 0 4
64482: PUSH
64483: LD_INT 1
64485: PLUS
64486: ARRAY
64487: ST_TO_ADDR
64488: GO 64743
64490: LD_INT 36
64492: DOUBLE
64493: EQUAL
64494: IFTRUE 64498
64496: GO 64554
64498: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
64499: LD_ADDR_VAR 0 9
64503: PUSH
64504: LD_VAR 0 47
64508: PUSH
64509: LD_VAR 0 48
64513: PUSH
64514: LD_VAR 0 49
64518: PUSH
64519: LD_VAR 0 50
64523: PUSH
64524: LD_VAR 0 51
64528: PUSH
64529: LD_VAR 0 52
64533: PUSH
64534: EMPTY
64535: LIST
64536: LIST
64537: LIST
64538: LIST
64539: LIST
64540: LIST
64541: PUSH
64542: LD_VAR 0 4
64546: PUSH
64547: LD_INT 1
64549: PLUS
64550: ARRAY
64551: ST_TO_ADDR
64552: GO 64743
64554: LD_INT 4
64556: DOUBLE
64557: EQUAL
64558: IFTRUE 64580
64560: LD_INT 5
64562: DOUBLE
64563: EQUAL
64564: IFTRUE 64580
64566: LD_INT 34
64568: DOUBLE
64569: EQUAL
64570: IFTRUE 64580
64572: LD_INT 37
64574: DOUBLE
64575: EQUAL
64576: IFTRUE 64580
64578: GO 64636
64580: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
64581: LD_ADDR_VAR 0 9
64585: PUSH
64586: LD_VAR 0 53
64590: PUSH
64591: LD_VAR 0 54
64595: PUSH
64596: LD_VAR 0 55
64600: PUSH
64601: LD_VAR 0 56
64605: PUSH
64606: LD_VAR 0 57
64610: PUSH
64611: LD_VAR 0 58
64615: PUSH
64616: EMPTY
64617: LIST
64618: LIST
64619: LIST
64620: LIST
64621: LIST
64622: LIST
64623: PUSH
64624: LD_VAR 0 4
64628: PUSH
64629: LD_INT 1
64631: PLUS
64632: ARRAY
64633: ST_TO_ADDR
64634: GO 64743
64636: LD_INT 31
64638: DOUBLE
64639: EQUAL
64640: IFTRUE 64686
64642: LD_INT 32
64644: DOUBLE
64645: EQUAL
64646: IFTRUE 64686
64648: LD_INT 33
64650: DOUBLE
64651: EQUAL
64652: IFTRUE 64686
64654: LD_INT 27
64656: DOUBLE
64657: EQUAL
64658: IFTRUE 64686
64660: LD_INT 26
64662: DOUBLE
64663: EQUAL
64664: IFTRUE 64686
64666: LD_INT 28
64668: DOUBLE
64669: EQUAL
64670: IFTRUE 64686
64672: LD_INT 29
64674: DOUBLE
64675: EQUAL
64676: IFTRUE 64686
64678: LD_INT 30
64680: DOUBLE
64681: EQUAL
64682: IFTRUE 64686
64684: GO 64742
64686: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
64687: LD_ADDR_VAR 0 9
64691: PUSH
64692: LD_VAR 0 59
64696: PUSH
64697: LD_VAR 0 60
64701: PUSH
64702: LD_VAR 0 61
64706: PUSH
64707: LD_VAR 0 62
64711: PUSH
64712: LD_VAR 0 63
64716: PUSH
64717: LD_VAR 0 64
64721: PUSH
64722: EMPTY
64723: LIST
64724: LIST
64725: LIST
64726: LIST
64727: LIST
64728: LIST
64729: PUSH
64730: LD_VAR 0 4
64734: PUSH
64735: LD_INT 1
64737: PLUS
64738: ARRAY
64739: ST_TO_ADDR
64740: GO 64743
64742: POP
// temp_list2 = [ ] ;
64743: LD_ADDR_VAR 0 10
64747: PUSH
64748: EMPTY
64749: ST_TO_ADDR
// for i in temp_list do
64750: LD_ADDR_VAR 0 8
64754: PUSH
64755: LD_VAR 0 9
64759: PUSH
64760: FOR_IN
64761: IFFALSE 64813
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64763: LD_ADDR_VAR 0 10
64767: PUSH
64768: LD_VAR 0 10
64772: PUSH
64773: LD_VAR 0 8
64777: PUSH
64778: LD_INT 1
64780: ARRAY
64781: PUSH
64782: LD_VAR 0 2
64786: PLUS
64787: PUSH
64788: LD_VAR 0 8
64792: PUSH
64793: LD_INT 2
64795: ARRAY
64796: PUSH
64797: LD_VAR 0 3
64801: PLUS
64802: PUSH
64803: EMPTY
64804: LIST
64805: LIST
64806: PUSH
64807: EMPTY
64808: LIST
64809: ADD
64810: ST_TO_ADDR
64811: GO 64760
64813: POP
64814: POP
// result = temp_list2 ;
64815: LD_ADDR_VAR 0 7
64819: PUSH
64820: LD_VAR 0 10
64824: ST_TO_ADDR
// end ;
64825: LD_VAR 0 7
64829: RET
// export function EnemyInRange ( unit , dist ) ; begin
64830: LD_INT 0
64832: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64833: LD_ADDR_VAR 0 3
64837: PUSH
64838: LD_VAR 0 1
64842: PPUSH
64843: CALL_OW 255
64847: PPUSH
64848: LD_VAR 0 1
64852: PPUSH
64853: CALL_OW 250
64857: PPUSH
64858: LD_VAR 0 1
64862: PPUSH
64863: CALL_OW 251
64867: PPUSH
64868: LD_VAR 0 2
64872: PPUSH
64873: CALL 38226 0 4
64877: PUSH
64878: LD_INT 4
64880: ARRAY
64881: ST_TO_ADDR
// end ;
64882: LD_VAR 0 3
64886: RET
// export function PlayerSeeMe ( unit ) ; begin
64887: LD_INT 0
64889: PPUSH
// result := See ( your_side , unit ) ;
64890: LD_ADDR_VAR 0 2
64894: PUSH
64895: LD_OWVAR 2
64899: PPUSH
64900: LD_VAR 0 1
64904: PPUSH
64905: CALL_OW 292
64909: ST_TO_ADDR
// end ;
64910: LD_VAR 0 2
64914: RET
// export function ReverseDir ( unit ) ; begin
64915: LD_INT 0
64917: PPUSH
// if not unit then
64918: LD_VAR 0 1
64922: NOT
64923: IFFALSE 64927
// exit ;
64925: GO 64950
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64927: LD_ADDR_VAR 0 2
64931: PUSH
64932: LD_VAR 0 1
64936: PPUSH
64937: CALL_OW 254
64941: PUSH
64942: LD_INT 3
64944: PLUS
64945: PUSH
64946: LD_INT 6
64948: MOD
64949: ST_TO_ADDR
// end ;
64950: LD_VAR 0 2
64954: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
64955: LD_INT 0
64957: PPUSH
64958: PPUSH
64959: PPUSH
64960: PPUSH
64961: PPUSH
// if not hexes then
64962: LD_VAR 0 2
64966: NOT
64967: IFFALSE 64971
// exit ;
64969: GO 65119
// dist := 9999 ;
64971: LD_ADDR_VAR 0 5
64975: PUSH
64976: LD_INT 9999
64978: ST_TO_ADDR
// for i = 1 to hexes do
64979: LD_ADDR_VAR 0 4
64983: PUSH
64984: DOUBLE
64985: LD_INT 1
64987: DEC
64988: ST_TO_ADDR
64989: LD_VAR 0 2
64993: PUSH
64994: FOR_TO
64995: IFFALSE 65107
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
64997: LD_VAR 0 1
65001: PPUSH
65002: LD_VAR 0 2
65006: PUSH
65007: LD_VAR 0 4
65011: ARRAY
65012: PUSH
65013: LD_INT 1
65015: ARRAY
65016: PPUSH
65017: LD_VAR 0 2
65021: PUSH
65022: LD_VAR 0 4
65026: ARRAY
65027: PUSH
65028: LD_INT 2
65030: ARRAY
65031: PPUSH
65032: CALL_OW 297
65036: PUSH
65037: LD_VAR 0 5
65041: LESS
65042: IFFALSE 65105
// begin hex := hexes [ i ] ;
65044: LD_ADDR_VAR 0 7
65048: PUSH
65049: LD_VAR 0 2
65053: PUSH
65054: LD_VAR 0 4
65058: ARRAY
65059: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
65060: LD_ADDR_VAR 0 5
65064: PUSH
65065: LD_VAR 0 1
65069: PPUSH
65070: LD_VAR 0 2
65074: PUSH
65075: LD_VAR 0 4
65079: ARRAY
65080: PUSH
65081: LD_INT 1
65083: ARRAY
65084: PPUSH
65085: LD_VAR 0 2
65089: PUSH
65090: LD_VAR 0 4
65094: ARRAY
65095: PUSH
65096: LD_INT 2
65098: ARRAY
65099: PPUSH
65100: CALL_OW 297
65104: ST_TO_ADDR
// end ; end ;
65105: GO 64994
65107: POP
65108: POP
// result := hex ;
65109: LD_ADDR_VAR 0 3
65113: PUSH
65114: LD_VAR 0 7
65118: ST_TO_ADDR
// end ;
65119: LD_VAR 0 3
65123: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
65124: LD_INT 0
65126: PPUSH
65127: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
65128: LD_VAR 0 1
65132: NOT
65133: PUSH
65134: LD_VAR 0 1
65138: PUSH
65139: LD_INT 21
65141: PUSH
65142: LD_INT 2
65144: PUSH
65145: EMPTY
65146: LIST
65147: LIST
65148: PUSH
65149: LD_INT 23
65151: PUSH
65152: LD_INT 2
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: PPUSH
65163: CALL_OW 69
65167: IN
65168: NOT
65169: OR
65170: IFFALSE 65174
// exit ;
65172: GO 65221
// for i = 1 to 3 do
65174: LD_ADDR_VAR 0 3
65178: PUSH
65179: DOUBLE
65180: LD_INT 1
65182: DEC
65183: ST_TO_ADDR
65184: LD_INT 3
65186: PUSH
65187: FOR_TO
65188: IFFALSE 65219
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
65190: LD_VAR 0 1
65194: PPUSH
65195: CALL_OW 250
65199: PPUSH
65200: LD_VAR 0 1
65204: PPUSH
65205: CALL_OW 251
65209: PPUSH
65210: LD_INT 1
65212: PPUSH
65213: CALL_OW 453
65217: GO 65187
65219: POP
65220: POP
// end ;
65221: LD_VAR 0 2
65225: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
65226: LD_INT 0
65228: PPUSH
65229: PPUSH
65230: PPUSH
65231: PPUSH
65232: PPUSH
65233: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
65234: LD_VAR 0 1
65238: NOT
65239: PUSH
65240: LD_VAR 0 2
65244: NOT
65245: OR
65246: PUSH
65247: LD_VAR 0 1
65251: PPUSH
65252: CALL_OW 314
65256: OR
65257: IFFALSE 65261
// exit ;
65259: GO 65702
// x := GetX ( enemy_unit ) ;
65261: LD_ADDR_VAR 0 7
65265: PUSH
65266: LD_VAR 0 2
65270: PPUSH
65271: CALL_OW 250
65275: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
65276: LD_ADDR_VAR 0 8
65280: PUSH
65281: LD_VAR 0 2
65285: PPUSH
65286: CALL_OW 251
65290: ST_TO_ADDR
// if not x or not y then
65291: LD_VAR 0 7
65295: NOT
65296: PUSH
65297: LD_VAR 0 8
65301: NOT
65302: OR
65303: IFFALSE 65307
// exit ;
65305: GO 65702
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
65307: LD_ADDR_VAR 0 6
65311: PUSH
65312: LD_VAR 0 7
65316: PPUSH
65317: LD_INT 0
65319: PPUSH
65320: LD_INT 4
65322: PPUSH
65323: CALL_OW 272
65327: PUSH
65328: LD_VAR 0 8
65332: PPUSH
65333: LD_INT 0
65335: PPUSH
65336: LD_INT 4
65338: PPUSH
65339: CALL_OW 273
65343: PUSH
65344: EMPTY
65345: LIST
65346: LIST
65347: PUSH
65348: LD_VAR 0 7
65352: PPUSH
65353: LD_INT 1
65355: PPUSH
65356: LD_INT 4
65358: PPUSH
65359: CALL_OW 272
65363: PUSH
65364: LD_VAR 0 8
65368: PPUSH
65369: LD_INT 1
65371: PPUSH
65372: LD_INT 4
65374: PPUSH
65375: CALL_OW 273
65379: PUSH
65380: EMPTY
65381: LIST
65382: LIST
65383: PUSH
65384: LD_VAR 0 7
65388: PPUSH
65389: LD_INT 2
65391: PPUSH
65392: LD_INT 4
65394: PPUSH
65395: CALL_OW 272
65399: PUSH
65400: LD_VAR 0 8
65404: PPUSH
65405: LD_INT 2
65407: PPUSH
65408: LD_INT 4
65410: PPUSH
65411: CALL_OW 273
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: PUSH
65420: LD_VAR 0 7
65424: PPUSH
65425: LD_INT 3
65427: PPUSH
65428: LD_INT 4
65430: PPUSH
65431: CALL_OW 272
65435: PUSH
65436: LD_VAR 0 8
65440: PPUSH
65441: LD_INT 3
65443: PPUSH
65444: LD_INT 4
65446: PPUSH
65447: CALL_OW 273
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: PUSH
65456: LD_VAR 0 7
65460: PPUSH
65461: LD_INT 4
65463: PPUSH
65464: LD_INT 4
65466: PPUSH
65467: CALL_OW 272
65471: PUSH
65472: LD_VAR 0 8
65476: PPUSH
65477: LD_INT 4
65479: PPUSH
65480: LD_INT 4
65482: PPUSH
65483: CALL_OW 273
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: PUSH
65492: LD_VAR 0 7
65496: PPUSH
65497: LD_INT 5
65499: PPUSH
65500: LD_INT 4
65502: PPUSH
65503: CALL_OW 272
65507: PUSH
65508: LD_VAR 0 8
65512: PPUSH
65513: LD_INT 5
65515: PPUSH
65516: LD_INT 4
65518: PPUSH
65519: CALL_OW 273
65523: PUSH
65524: EMPTY
65525: LIST
65526: LIST
65527: PUSH
65528: EMPTY
65529: LIST
65530: LIST
65531: LIST
65532: LIST
65533: LIST
65534: LIST
65535: ST_TO_ADDR
// for i = tmp downto 1 do
65536: LD_ADDR_VAR 0 4
65540: PUSH
65541: DOUBLE
65542: LD_VAR 0 6
65546: INC
65547: ST_TO_ADDR
65548: LD_INT 1
65550: PUSH
65551: FOR_DOWNTO
65552: IFFALSE 65653
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
65554: LD_VAR 0 6
65558: PUSH
65559: LD_VAR 0 4
65563: ARRAY
65564: PUSH
65565: LD_INT 1
65567: ARRAY
65568: PPUSH
65569: LD_VAR 0 6
65573: PUSH
65574: LD_VAR 0 4
65578: ARRAY
65579: PUSH
65580: LD_INT 2
65582: ARRAY
65583: PPUSH
65584: CALL_OW 488
65588: NOT
65589: PUSH
65590: LD_VAR 0 6
65594: PUSH
65595: LD_VAR 0 4
65599: ARRAY
65600: PUSH
65601: LD_INT 1
65603: ARRAY
65604: PPUSH
65605: LD_VAR 0 6
65609: PUSH
65610: LD_VAR 0 4
65614: ARRAY
65615: PUSH
65616: LD_INT 2
65618: ARRAY
65619: PPUSH
65620: CALL_OW 428
65624: PUSH
65625: LD_INT 0
65627: NONEQUAL
65628: OR
65629: IFFALSE 65651
// tmp := Delete ( tmp , i ) ;
65631: LD_ADDR_VAR 0 6
65635: PUSH
65636: LD_VAR 0 6
65640: PPUSH
65641: LD_VAR 0 4
65645: PPUSH
65646: CALL_OW 3
65650: ST_TO_ADDR
65651: GO 65551
65653: POP
65654: POP
// j := GetClosestHex ( unit , tmp ) ;
65655: LD_ADDR_VAR 0 5
65659: PUSH
65660: LD_VAR 0 1
65664: PPUSH
65665: LD_VAR 0 6
65669: PPUSH
65670: CALL 64955 0 2
65674: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65675: LD_VAR 0 1
65679: PPUSH
65680: LD_VAR 0 5
65684: PUSH
65685: LD_INT 1
65687: ARRAY
65688: PPUSH
65689: LD_VAR 0 5
65693: PUSH
65694: LD_INT 2
65696: ARRAY
65697: PPUSH
65698: CALL_OW 111
// end ;
65702: LD_VAR 0 3
65706: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65707: LD_INT 0
65709: PPUSH
65710: PPUSH
65711: PPUSH
// uc_side = 0 ;
65712: LD_ADDR_OWVAR 20
65716: PUSH
65717: LD_INT 0
65719: ST_TO_ADDR
// uc_nation = 0 ;
65720: LD_ADDR_OWVAR 21
65724: PUSH
65725: LD_INT 0
65727: ST_TO_ADDR
// InitHc_All ( ) ;
65728: CALL_OW 584
// InitVc ;
65732: CALL_OW 20
// if mastodonts then
65736: LD_VAR 0 6
65740: IFFALSE 65807
// for i = 1 to mastodonts do
65742: LD_ADDR_VAR 0 11
65746: PUSH
65747: DOUBLE
65748: LD_INT 1
65750: DEC
65751: ST_TO_ADDR
65752: LD_VAR 0 6
65756: PUSH
65757: FOR_TO
65758: IFFALSE 65805
// begin vc_chassis := 31 ;
65760: LD_ADDR_OWVAR 37
65764: PUSH
65765: LD_INT 31
65767: ST_TO_ADDR
// vc_control := control_rider ;
65768: LD_ADDR_OWVAR 38
65772: PUSH
65773: LD_INT 4
65775: ST_TO_ADDR
// animal := CreateVehicle ;
65776: LD_ADDR_VAR 0 12
65780: PUSH
65781: CALL_OW 45
65785: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65786: LD_VAR 0 12
65790: PPUSH
65791: LD_VAR 0 8
65795: PPUSH
65796: LD_INT 0
65798: PPUSH
65799: CALL 67995 0 3
// end ;
65803: GO 65757
65805: POP
65806: POP
// if horses then
65807: LD_VAR 0 5
65811: IFFALSE 65878
// for i = 1 to horses do
65813: LD_ADDR_VAR 0 11
65817: PUSH
65818: DOUBLE
65819: LD_INT 1
65821: DEC
65822: ST_TO_ADDR
65823: LD_VAR 0 5
65827: PUSH
65828: FOR_TO
65829: IFFALSE 65876
// begin hc_class := 21 ;
65831: LD_ADDR_OWVAR 28
65835: PUSH
65836: LD_INT 21
65838: ST_TO_ADDR
// hc_gallery :=  ;
65839: LD_ADDR_OWVAR 33
65843: PUSH
65844: LD_STRING 
65846: ST_TO_ADDR
// animal := CreateHuman ;
65847: LD_ADDR_VAR 0 12
65851: PUSH
65852: CALL_OW 44
65856: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65857: LD_VAR 0 12
65861: PPUSH
65862: LD_VAR 0 8
65866: PPUSH
65867: LD_INT 0
65869: PPUSH
65870: CALL 67995 0 3
// end ;
65874: GO 65828
65876: POP
65877: POP
// if birds then
65878: LD_VAR 0 1
65882: IFFALSE 65949
// for i = 1 to birds do
65884: LD_ADDR_VAR 0 11
65888: PUSH
65889: DOUBLE
65890: LD_INT 1
65892: DEC
65893: ST_TO_ADDR
65894: LD_VAR 0 1
65898: PUSH
65899: FOR_TO
65900: IFFALSE 65947
// begin hc_class = 18 ;
65902: LD_ADDR_OWVAR 28
65906: PUSH
65907: LD_INT 18
65909: ST_TO_ADDR
// hc_gallery =  ;
65910: LD_ADDR_OWVAR 33
65914: PUSH
65915: LD_STRING 
65917: ST_TO_ADDR
// animal := CreateHuman ;
65918: LD_ADDR_VAR 0 12
65922: PUSH
65923: CALL_OW 44
65927: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65928: LD_VAR 0 12
65932: PPUSH
65933: LD_VAR 0 8
65937: PPUSH
65938: LD_INT 0
65940: PPUSH
65941: CALL 67995 0 3
// end ;
65945: GO 65899
65947: POP
65948: POP
// if tigers then
65949: LD_VAR 0 2
65953: IFFALSE 66037
// for i = 1 to tigers do
65955: LD_ADDR_VAR 0 11
65959: PUSH
65960: DOUBLE
65961: LD_INT 1
65963: DEC
65964: ST_TO_ADDR
65965: LD_VAR 0 2
65969: PUSH
65970: FOR_TO
65971: IFFALSE 66035
// begin hc_class = class_tiger ;
65973: LD_ADDR_OWVAR 28
65977: PUSH
65978: LD_INT 14
65980: ST_TO_ADDR
// hc_gallery =  ;
65981: LD_ADDR_OWVAR 33
65985: PUSH
65986: LD_STRING 
65988: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65989: LD_ADDR_OWVAR 35
65993: PUSH
65994: LD_INT 7
65996: NEG
65997: PPUSH
65998: LD_INT 7
66000: PPUSH
66001: CALL_OW 12
66005: ST_TO_ADDR
// animal := CreateHuman ;
66006: LD_ADDR_VAR 0 12
66010: PUSH
66011: CALL_OW 44
66015: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66016: LD_VAR 0 12
66020: PPUSH
66021: LD_VAR 0 8
66025: PPUSH
66026: LD_INT 0
66028: PPUSH
66029: CALL 67995 0 3
// end ;
66033: GO 65970
66035: POP
66036: POP
// if apemans then
66037: LD_VAR 0 3
66041: IFFALSE 66164
// for i = 1 to apemans do
66043: LD_ADDR_VAR 0 11
66047: PUSH
66048: DOUBLE
66049: LD_INT 1
66051: DEC
66052: ST_TO_ADDR
66053: LD_VAR 0 3
66057: PUSH
66058: FOR_TO
66059: IFFALSE 66162
// begin hc_class = class_apeman ;
66061: LD_ADDR_OWVAR 28
66065: PUSH
66066: LD_INT 12
66068: ST_TO_ADDR
// hc_gallery =  ;
66069: LD_ADDR_OWVAR 33
66073: PUSH
66074: LD_STRING 
66076: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
66077: LD_ADDR_OWVAR 35
66081: PUSH
66082: LD_INT 2
66084: NEG
66085: PPUSH
66086: LD_INT 2
66088: PPUSH
66089: CALL_OW 12
66093: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66094: LD_ADDR_OWVAR 31
66098: PUSH
66099: LD_INT 1
66101: PPUSH
66102: LD_INT 3
66104: PPUSH
66105: CALL_OW 12
66109: PUSH
66110: LD_INT 1
66112: PPUSH
66113: LD_INT 3
66115: PPUSH
66116: CALL_OW 12
66120: PUSH
66121: LD_INT 0
66123: PUSH
66124: LD_INT 0
66126: PUSH
66127: EMPTY
66128: LIST
66129: LIST
66130: LIST
66131: LIST
66132: ST_TO_ADDR
// animal := CreateHuman ;
66133: LD_ADDR_VAR 0 12
66137: PUSH
66138: CALL_OW 44
66142: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66143: LD_VAR 0 12
66147: PPUSH
66148: LD_VAR 0 8
66152: PPUSH
66153: LD_INT 0
66155: PPUSH
66156: CALL 67995 0 3
// end ;
66160: GO 66058
66162: POP
66163: POP
// if enchidnas then
66164: LD_VAR 0 4
66168: IFFALSE 66235
// for i = 1 to enchidnas do
66170: LD_ADDR_VAR 0 11
66174: PUSH
66175: DOUBLE
66176: LD_INT 1
66178: DEC
66179: ST_TO_ADDR
66180: LD_VAR 0 4
66184: PUSH
66185: FOR_TO
66186: IFFALSE 66233
// begin hc_class = 13 ;
66188: LD_ADDR_OWVAR 28
66192: PUSH
66193: LD_INT 13
66195: ST_TO_ADDR
// hc_gallery =  ;
66196: LD_ADDR_OWVAR 33
66200: PUSH
66201: LD_STRING 
66203: ST_TO_ADDR
// animal := CreateHuman ;
66204: LD_ADDR_VAR 0 12
66208: PUSH
66209: CALL_OW 44
66213: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66214: LD_VAR 0 12
66218: PPUSH
66219: LD_VAR 0 8
66223: PPUSH
66224: LD_INT 0
66226: PPUSH
66227: CALL 67995 0 3
// end ;
66231: GO 66185
66233: POP
66234: POP
// if fishes then
66235: LD_VAR 0 7
66239: IFFALSE 66306
// for i = 1 to fishes do
66241: LD_ADDR_VAR 0 11
66245: PUSH
66246: DOUBLE
66247: LD_INT 1
66249: DEC
66250: ST_TO_ADDR
66251: LD_VAR 0 7
66255: PUSH
66256: FOR_TO
66257: IFFALSE 66304
// begin hc_class = 20 ;
66259: LD_ADDR_OWVAR 28
66263: PUSH
66264: LD_INT 20
66266: ST_TO_ADDR
// hc_gallery =  ;
66267: LD_ADDR_OWVAR 33
66271: PUSH
66272: LD_STRING 
66274: ST_TO_ADDR
// animal := CreateHuman ;
66275: LD_ADDR_VAR 0 12
66279: PUSH
66280: CALL_OW 44
66284: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66285: LD_VAR 0 12
66289: PPUSH
66290: LD_VAR 0 9
66294: PPUSH
66295: LD_INT 0
66297: PPUSH
66298: CALL 67995 0 3
// end ;
66302: GO 66256
66304: POP
66305: POP
// end ;
66306: LD_VAR 0 10
66310: RET
// export function WantHeal ( sci , unit ) ; begin
66311: LD_INT 0
66313: PPUSH
// if GetTaskList ( sci ) > 0 then
66314: LD_VAR 0 1
66318: PPUSH
66319: CALL_OW 437
66323: PUSH
66324: LD_INT 0
66326: GREATER
66327: IFFALSE 66397
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66329: LD_VAR 0 1
66333: PPUSH
66334: CALL_OW 437
66338: PUSH
66339: LD_INT 1
66341: ARRAY
66342: PUSH
66343: LD_INT 1
66345: ARRAY
66346: PUSH
66347: LD_STRING l
66349: EQUAL
66350: PUSH
66351: LD_VAR 0 1
66355: PPUSH
66356: CALL_OW 437
66360: PUSH
66361: LD_INT 1
66363: ARRAY
66364: PUSH
66365: LD_INT 4
66367: ARRAY
66368: PUSH
66369: LD_VAR 0 2
66373: EQUAL
66374: AND
66375: IFFALSE 66387
// result := true else
66377: LD_ADDR_VAR 0 3
66381: PUSH
66382: LD_INT 1
66384: ST_TO_ADDR
66385: GO 66395
// result := false ;
66387: LD_ADDR_VAR 0 3
66391: PUSH
66392: LD_INT 0
66394: ST_TO_ADDR
// end else
66395: GO 66405
// result := false ;
66397: LD_ADDR_VAR 0 3
66401: PUSH
66402: LD_INT 0
66404: ST_TO_ADDR
// end ;
66405: LD_VAR 0 3
66409: RET
// export function HealTarget ( sci ) ; begin
66410: LD_INT 0
66412: PPUSH
// if not sci then
66413: LD_VAR 0 1
66417: NOT
66418: IFFALSE 66422
// exit ;
66420: GO 66487
// result := 0 ;
66422: LD_ADDR_VAR 0 2
66426: PUSH
66427: LD_INT 0
66429: ST_TO_ADDR
// if GetTaskList ( sci ) then
66430: LD_VAR 0 1
66434: PPUSH
66435: CALL_OW 437
66439: IFFALSE 66487
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
66441: LD_VAR 0 1
66445: PPUSH
66446: CALL_OW 437
66450: PUSH
66451: LD_INT 1
66453: ARRAY
66454: PUSH
66455: LD_INT 1
66457: ARRAY
66458: PUSH
66459: LD_STRING l
66461: EQUAL
66462: IFFALSE 66487
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
66464: LD_ADDR_VAR 0 2
66468: PUSH
66469: LD_VAR 0 1
66473: PPUSH
66474: CALL_OW 437
66478: PUSH
66479: LD_INT 1
66481: ARRAY
66482: PUSH
66483: LD_INT 4
66485: ARRAY
66486: ST_TO_ADDR
// end ;
66487: LD_VAR 0 2
66491: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
66492: LD_INT 0
66494: PPUSH
66495: PPUSH
66496: PPUSH
66497: PPUSH
// if not base_units then
66498: LD_VAR 0 1
66502: NOT
66503: IFFALSE 66507
// exit ;
66505: GO 66594
// result := false ;
66507: LD_ADDR_VAR 0 2
66511: PUSH
66512: LD_INT 0
66514: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66515: LD_ADDR_VAR 0 5
66519: PUSH
66520: LD_VAR 0 1
66524: PPUSH
66525: LD_INT 21
66527: PUSH
66528: LD_INT 3
66530: PUSH
66531: EMPTY
66532: LIST
66533: LIST
66534: PPUSH
66535: CALL_OW 72
66539: ST_TO_ADDR
// if not tmp then
66540: LD_VAR 0 5
66544: NOT
66545: IFFALSE 66549
// exit ;
66547: GO 66594
// for i in tmp do
66549: LD_ADDR_VAR 0 3
66553: PUSH
66554: LD_VAR 0 5
66558: PUSH
66559: FOR_IN
66560: IFFALSE 66592
// begin result := EnemyInRange ( i , 22 ) ;
66562: LD_ADDR_VAR 0 2
66566: PUSH
66567: LD_VAR 0 3
66571: PPUSH
66572: LD_INT 22
66574: PPUSH
66575: CALL 64830 0 2
66579: ST_TO_ADDR
// if result then
66580: LD_VAR 0 2
66584: IFFALSE 66590
// exit ;
66586: POP
66587: POP
66588: GO 66594
// end ;
66590: GO 66559
66592: POP
66593: POP
// end ;
66594: LD_VAR 0 2
66598: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
66599: LD_INT 0
66601: PPUSH
66602: PPUSH
// if not units then
66603: LD_VAR 0 1
66607: NOT
66608: IFFALSE 66612
// exit ;
66610: GO 66682
// result := [ ] ;
66612: LD_ADDR_VAR 0 3
66616: PUSH
66617: EMPTY
66618: ST_TO_ADDR
// for i in units do
66619: LD_ADDR_VAR 0 4
66623: PUSH
66624: LD_VAR 0 1
66628: PUSH
66629: FOR_IN
66630: IFFALSE 66680
// if GetTag ( i ) = tag then
66632: LD_VAR 0 4
66636: PPUSH
66637: CALL_OW 110
66641: PUSH
66642: LD_VAR 0 2
66646: EQUAL
66647: IFFALSE 66678
// result := Replace ( result , result + 1 , i ) ;
66649: LD_ADDR_VAR 0 3
66653: PUSH
66654: LD_VAR 0 3
66658: PPUSH
66659: LD_VAR 0 3
66663: PUSH
66664: LD_INT 1
66666: PLUS
66667: PPUSH
66668: LD_VAR 0 4
66672: PPUSH
66673: CALL_OW 1
66677: ST_TO_ADDR
66678: GO 66629
66680: POP
66681: POP
// end ;
66682: LD_VAR 0 3
66686: RET
// export function IsDriver ( un ) ; begin
66687: LD_INT 0
66689: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66690: LD_ADDR_VAR 0 2
66694: PUSH
66695: LD_VAR 0 1
66699: PUSH
66700: LD_INT 55
66702: PUSH
66703: EMPTY
66704: LIST
66705: PPUSH
66706: CALL_OW 69
66710: IN
66711: ST_TO_ADDR
// end ;
66712: LD_VAR 0 2
66716: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66717: LD_INT 0
66719: PPUSH
66720: PPUSH
// list := [ ] ;
66721: LD_ADDR_VAR 0 5
66725: PUSH
66726: EMPTY
66727: ST_TO_ADDR
// case d of 0 :
66728: LD_VAR 0 3
66732: PUSH
66733: LD_INT 0
66735: DOUBLE
66736: EQUAL
66737: IFTRUE 66741
66739: GO 66874
66741: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66742: LD_ADDR_VAR 0 5
66746: PUSH
66747: LD_VAR 0 1
66751: PUSH
66752: LD_INT 4
66754: MINUS
66755: PUSH
66756: LD_VAR 0 2
66760: PUSH
66761: LD_INT 4
66763: MINUS
66764: PUSH
66765: LD_INT 2
66767: PUSH
66768: EMPTY
66769: LIST
66770: LIST
66771: LIST
66772: PUSH
66773: LD_VAR 0 1
66777: PUSH
66778: LD_INT 3
66780: MINUS
66781: PUSH
66782: LD_VAR 0 2
66786: PUSH
66787: LD_INT 1
66789: PUSH
66790: EMPTY
66791: LIST
66792: LIST
66793: LIST
66794: PUSH
66795: LD_VAR 0 1
66799: PUSH
66800: LD_INT 4
66802: PLUS
66803: PUSH
66804: LD_VAR 0 2
66808: PUSH
66809: LD_INT 4
66811: PUSH
66812: EMPTY
66813: LIST
66814: LIST
66815: LIST
66816: PUSH
66817: LD_VAR 0 1
66821: PUSH
66822: LD_INT 3
66824: PLUS
66825: PUSH
66826: LD_VAR 0 2
66830: PUSH
66831: LD_INT 3
66833: PLUS
66834: PUSH
66835: LD_INT 5
66837: PUSH
66838: EMPTY
66839: LIST
66840: LIST
66841: LIST
66842: PUSH
66843: LD_VAR 0 1
66847: PUSH
66848: LD_VAR 0 2
66852: PUSH
66853: LD_INT 4
66855: PLUS
66856: PUSH
66857: LD_INT 0
66859: PUSH
66860: EMPTY
66861: LIST
66862: LIST
66863: LIST
66864: PUSH
66865: EMPTY
66866: LIST
66867: LIST
66868: LIST
66869: LIST
66870: LIST
66871: ST_TO_ADDR
// end ; 1 :
66872: GO 67572
66874: LD_INT 1
66876: DOUBLE
66877: EQUAL
66878: IFTRUE 66882
66880: GO 67015
66882: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66883: LD_ADDR_VAR 0 5
66887: PUSH
66888: LD_VAR 0 1
66892: PUSH
66893: LD_VAR 0 2
66897: PUSH
66898: LD_INT 4
66900: MINUS
66901: PUSH
66902: LD_INT 3
66904: PUSH
66905: EMPTY
66906: LIST
66907: LIST
66908: LIST
66909: PUSH
66910: LD_VAR 0 1
66914: PUSH
66915: LD_INT 3
66917: MINUS
66918: PUSH
66919: LD_VAR 0 2
66923: PUSH
66924: LD_INT 3
66926: MINUS
66927: PUSH
66928: LD_INT 2
66930: PUSH
66931: EMPTY
66932: LIST
66933: LIST
66934: LIST
66935: PUSH
66936: LD_VAR 0 1
66940: PUSH
66941: LD_INT 4
66943: MINUS
66944: PUSH
66945: LD_VAR 0 2
66949: PUSH
66950: LD_INT 1
66952: PUSH
66953: EMPTY
66954: LIST
66955: LIST
66956: LIST
66957: PUSH
66958: LD_VAR 0 1
66962: PUSH
66963: LD_VAR 0 2
66967: PUSH
66968: LD_INT 3
66970: PLUS
66971: PUSH
66972: LD_INT 0
66974: PUSH
66975: EMPTY
66976: LIST
66977: LIST
66978: LIST
66979: PUSH
66980: LD_VAR 0 1
66984: PUSH
66985: LD_INT 4
66987: PLUS
66988: PUSH
66989: LD_VAR 0 2
66993: PUSH
66994: LD_INT 4
66996: PLUS
66997: PUSH
66998: LD_INT 5
67000: PUSH
67001: EMPTY
67002: LIST
67003: LIST
67004: LIST
67005: PUSH
67006: EMPTY
67007: LIST
67008: LIST
67009: LIST
67010: LIST
67011: LIST
67012: ST_TO_ADDR
// end ; 2 :
67013: GO 67572
67015: LD_INT 2
67017: DOUBLE
67018: EQUAL
67019: IFTRUE 67023
67021: GO 67152
67023: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
67024: LD_ADDR_VAR 0 5
67028: PUSH
67029: LD_VAR 0 1
67033: PUSH
67034: LD_VAR 0 2
67038: PUSH
67039: LD_INT 3
67041: MINUS
67042: PUSH
67043: LD_INT 3
67045: PUSH
67046: EMPTY
67047: LIST
67048: LIST
67049: LIST
67050: PUSH
67051: LD_VAR 0 1
67055: PUSH
67056: LD_INT 4
67058: PLUS
67059: PUSH
67060: LD_VAR 0 2
67064: PUSH
67065: LD_INT 4
67067: PUSH
67068: EMPTY
67069: LIST
67070: LIST
67071: LIST
67072: PUSH
67073: LD_VAR 0 1
67077: PUSH
67078: LD_VAR 0 2
67082: PUSH
67083: LD_INT 4
67085: PLUS
67086: PUSH
67087: LD_INT 0
67089: PUSH
67090: EMPTY
67091: LIST
67092: LIST
67093: LIST
67094: PUSH
67095: LD_VAR 0 1
67099: PUSH
67100: LD_INT 3
67102: MINUS
67103: PUSH
67104: LD_VAR 0 2
67108: PUSH
67109: LD_INT 1
67111: PUSH
67112: EMPTY
67113: LIST
67114: LIST
67115: LIST
67116: PUSH
67117: LD_VAR 0 1
67121: PUSH
67122: LD_INT 4
67124: MINUS
67125: PUSH
67126: LD_VAR 0 2
67130: PUSH
67131: LD_INT 4
67133: MINUS
67134: PUSH
67135: LD_INT 2
67137: PUSH
67138: EMPTY
67139: LIST
67140: LIST
67141: LIST
67142: PUSH
67143: EMPTY
67144: LIST
67145: LIST
67146: LIST
67147: LIST
67148: LIST
67149: ST_TO_ADDR
// end ; 3 :
67150: GO 67572
67152: LD_INT 3
67154: DOUBLE
67155: EQUAL
67156: IFTRUE 67160
67158: GO 67293
67160: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
67161: LD_ADDR_VAR 0 5
67165: PUSH
67166: LD_VAR 0 1
67170: PUSH
67171: LD_INT 3
67173: PLUS
67174: PUSH
67175: LD_VAR 0 2
67179: PUSH
67180: LD_INT 4
67182: PUSH
67183: EMPTY
67184: LIST
67185: LIST
67186: LIST
67187: PUSH
67188: LD_VAR 0 1
67192: PUSH
67193: LD_INT 4
67195: PLUS
67196: PUSH
67197: LD_VAR 0 2
67201: PUSH
67202: LD_INT 4
67204: PLUS
67205: PUSH
67206: LD_INT 5
67208: PUSH
67209: EMPTY
67210: LIST
67211: LIST
67212: LIST
67213: PUSH
67214: LD_VAR 0 1
67218: PUSH
67219: LD_INT 4
67221: MINUS
67222: PUSH
67223: LD_VAR 0 2
67227: PUSH
67228: LD_INT 1
67230: PUSH
67231: EMPTY
67232: LIST
67233: LIST
67234: LIST
67235: PUSH
67236: LD_VAR 0 1
67240: PUSH
67241: LD_VAR 0 2
67245: PUSH
67246: LD_INT 4
67248: MINUS
67249: PUSH
67250: LD_INT 3
67252: PUSH
67253: EMPTY
67254: LIST
67255: LIST
67256: LIST
67257: PUSH
67258: LD_VAR 0 1
67262: PUSH
67263: LD_INT 3
67265: MINUS
67266: PUSH
67267: LD_VAR 0 2
67271: PUSH
67272: LD_INT 3
67274: MINUS
67275: PUSH
67276: LD_INT 2
67278: PUSH
67279: EMPTY
67280: LIST
67281: LIST
67282: LIST
67283: PUSH
67284: EMPTY
67285: LIST
67286: LIST
67287: LIST
67288: LIST
67289: LIST
67290: ST_TO_ADDR
// end ; 4 :
67291: GO 67572
67293: LD_INT 4
67295: DOUBLE
67296: EQUAL
67297: IFTRUE 67301
67299: GO 67434
67301: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
67302: LD_ADDR_VAR 0 5
67306: PUSH
67307: LD_VAR 0 1
67311: PUSH
67312: LD_VAR 0 2
67316: PUSH
67317: LD_INT 4
67319: PLUS
67320: PUSH
67321: LD_INT 0
67323: PUSH
67324: EMPTY
67325: LIST
67326: LIST
67327: LIST
67328: PUSH
67329: LD_VAR 0 1
67333: PUSH
67334: LD_INT 3
67336: PLUS
67337: PUSH
67338: LD_VAR 0 2
67342: PUSH
67343: LD_INT 3
67345: PLUS
67346: PUSH
67347: LD_INT 5
67349: PUSH
67350: EMPTY
67351: LIST
67352: LIST
67353: LIST
67354: PUSH
67355: LD_VAR 0 1
67359: PUSH
67360: LD_INT 4
67362: PLUS
67363: PUSH
67364: LD_VAR 0 2
67368: PUSH
67369: LD_INT 4
67371: PUSH
67372: EMPTY
67373: LIST
67374: LIST
67375: LIST
67376: PUSH
67377: LD_VAR 0 1
67381: PUSH
67382: LD_VAR 0 2
67386: PUSH
67387: LD_INT 3
67389: MINUS
67390: PUSH
67391: LD_INT 3
67393: PUSH
67394: EMPTY
67395: LIST
67396: LIST
67397: LIST
67398: PUSH
67399: LD_VAR 0 1
67403: PUSH
67404: LD_INT 4
67406: MINUS
67407: PUSH
67408: LD_VAR 0 2
67412: PUSH
67413: LD_INT 4
67415: MINUS
67416: PUSH
67417: LD_INT 2
67419: PUSH
67420: EMPTY
67421: LIST
67422: LIST
67423: LIST
67424: PUSH
67425: EMPTY
67426: LIST
67427: LIST
67428: LIST
67429: LIST
67430: LIST
67431: ST_TO_ADDR
// end ; 5 :
67432: GO 67572
67434: LD_INT 5
67436: DOUBLE
67437: EQUAL
67438: IFTRUE 67442
67440: GO 67571
67442: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67443: LD_ADDR_VAR 0 5
67447: PUSH
67448: LD_VAR 0 1
67452: PUSH
67453: LD_INT 4
67455: MINUS
67456: PUSH
67457: LD_VAR 0 2
67461: PUSH
67462: LD_INT 1
67464: PUSH
67465: EMPTY
67466: LIST
67467: LIST
67468: LIST
67469: PUSH
67470: LD_VAR 0 1
67474: PUSH
67475: LD_VAR 0 2
67479: PUSH
67480: LD_INT 4
67482: MINUS
67483: PUSH
67484: LD_INT 3
67486: PUSH
67487: EMPTY
67488: LIST
67489: LIST
67490: LIST
67491: PUSH
67492: LD_VAR 0 1
67496: PUSH
67497: LD_INT 4
67499: PLUS
67500: PUSH
67501: LD_VAR 0 2
67505: PUSH
67506: LD_INT 4
67508: PLUS
67509: PUSH
67510: LD_INT 5
67512: PUSH
67513: EMPTY
67514: LIST
67515: LIST
67516: LIST
67517: PUSH
67518: LD_VAR 0 1
67522: PUSH
67523: LD_INT 3
67525: PLUS
67526: PUSH
67527: LD_VAR 0 2
67531: PUSH
67532: LD_INT 4
67534: PUSH
67535: EMPTY
67536: LIST
67537: LIST
67538: LIST
67539: PUSH
67540: LD_VAR 0 1
67544: PUSH
67545: LD_VAR 0 2
67549: PUSH
67550: LD_INT 3
67552: PLUS
67553: PUSH
67554: LD_INT 0
67556: PUSH
67557: EMPTY
67558: LIST
67559: LIST
67560: LIST
67561: PUSH
67562: EMPTY
67563: LIST
67564: LIST
67565: LIST
67566: LIST
67567: LIST
67568: ST_TO_ADDR
// end ; end ;
67569: GO 67572
67571: POP
// result := list ;
67572: LD_ADDR_VAR 0 4
67576: PUSH
67577: LD_VAR 0 5
67581: ST_TO_ADDR
// end ;
67582: LD_VAR 0 4
67586: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67587: LD_INT 0
67589: PPUSH
67590: PPUSH
67591: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67592: LD_VAR 0 1
67596: NOT
67597: PUSH
67598: LD_VAR 0 2
67602: PUSH
67603: LD_INT 1
67605: PUSH
67606: LD_INT 2
67608: PUSH
67609: LD_INT 3
67611: PUSH
67612: LD_INT 4
67614: PUSH
67615: EMPTY
67616: LIST
67617: LIST
67618: LIST
67619: LIST
67620: IN
67621: NOT
67622: OR
67623: IFFALSE 67627
// exit ;
67625: GO 67719
// tmp := [ ] ;
67627: LD_ADDR_VAR 0 5
67631: PUSH
67632: EMPTY
67633: ST_TO_ADDR
// for i in units do
67634: LD_ADDR_VAR 0 4
67638: PUSH
67639: LD_VAR 0 1
67643: PUSH
67644: FOR_IN
67645: IFFALSE 67688
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
67647: LD_ADDR_VAR 0 5
67651: PUSH
67652: LD_VAR 0 5
67656: PPUSH
67657: LD_VAR 0 5
67661: PUSH
67662: LD_INT 1
67664: PLUS
67665: PPUSH
67666: LD_VAR 0 4
67670: PPUSH
67671: LD_VAR 0 2
67675: PPUSH
67676: CALL_OW 259
67680: PPUSH
67681: CALL_OW 2
67685: ST_TO_ADDR
67686: GO 67644
67688: POP
67689: POP
// if not tmp then
67690: LD_VAR 0 5
67694: NOT
67695: IFFALSE 67699
// exit ;
67697: GO 67719
// result := SortListByListDesc ( units , tmp ) ;
67699: LD_ADDR_VAR 0 3
67703: PUSH
67704: LD_VAR 0 1
67708: PPUSH
67709: LD_VAR 0 5
67713: PPUSH
67714: CALL_OW 77
67718: ST_TO_ADDR
// end ;
67719: LD_VAR 0 3
67723: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67724: LD_INT 0
67726: PPUSH
67727: PPUSH
67728: PPUSH
// result := false ;
67729: LD_ADDR_VAR 0 3
67733: PUSH
67734: LD_INT 0
67736: ST_TO_ADDR
// x := GetX ( building ) ;
67737: LD_ADDR_VAR 0 4
67741: PUSH
67742: LD_VAR 0 2
67746: PPUSH
67747: CALL_OW 250
67751: ST_TO_ADDR
// y := GetY ( building ) ;
67752: LD_ADDR_VAR 0 5
67756: PUSH
67757: LD_VAR 0 2
67761: PPUSH
67762: CALL_OW 251
67766: ST_TO_ADDR
// if not building or not x or not y then
67767: LD_VAR 0 2
67771: NOT
67772: PUSH
67773: LD_VAR 0 4
67777: NOT
67778: OR
67779: PUSH
67780: LD_VAR 0 5
67784: NOT
67785: OR
67786: IFFALSE 67790
// exit ;
67788: GO 67882
// if GetTaskList ( unit ) then
67790: LD_VAR 0 1
67794: PPUSH
67795: CALL_OW 437
67799: IFFALSE 67882
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67801: LD_STRING e
67803: PUSH
67804: LD_VAR 0 1
67808: PPUSH
67809: CALL_OW 437
67813: PUSH
67814: LD_INT 1
67816: ARRAY
67817: PUSH
67818: LD_INT 1
67820: ARRAY
67821: EQUAL
67822: PUSH
67823: LD_VAR 0 4
67827: PUSH
67828: LD_VAR 0 1
67832: PPUSH
67833: CALL_OW 437
67837: PUSH
67838: LD_INT 1
67840: ARRAY
67841: PUSH
67842: LD_INT 2
67844: ARRAY
67845: EQUAL
67846: AND
67847: PUSH
67848: LD_VAR 0 5
67852: PUSH
67853: LD_VAR 0 1
67857: PPUSH
67858: CALL_OW 437
67862: PUSH
67863: LD_INT 1
67865: ARRAY
67866: PUSH
67867: LD_INT 3
67869: ARRAY
67870: EQUAL
67871: AND
67872: IFFALSE 67882
// result := true end ;
67874: LD_ADDR_VAR 0 3
67878: PUSH
67879: LD_INT 1
67881: ST_TO_ADDR
// end ;
67882: LD_VAR 0 3
67886: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67887: LD_INT 0
67889: PPUSH
// result := false ;
67890: LD_ADDR_VAR 0 4
67894: PUSH
67895: LD_INT 0
67897: ST_TO_ADDR
// if GetTaskList ( unit ) then
67898: LD_VAR 0 1
67902: PPUSH
67903: CALL_OW 437
67907: IFFALSE 67990
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67909: LD_STRING M
67911: PUSH
67912: LD_VAR 0 1
67916: PPUSH
67917: CALL_OW 437
67921: PUSH
67922: LD_INT 1
67924: ARRAY
67925: PUSH
67926: LD_INT 1
67928: ARRAY
67929: EQUAL
67930: PUSH
67931: LD_VAR 0 2
67935: PUSH
67936: LD_VAR 0 1
67940: PPUSH
67941: CALL_OW 437
67945: PUSH
67946: LD_INT 1
67948: ARRAY
67949: PUSH
67950: LD_INT 2
67952: ARRAY
67953: EQUAL
67954: AND
67955: PUSH
67956: LD_VAR 0 3
67960: PUSH
67961: LD_VAR 0 1
67965: PPUSH
67966: CALL_OW 437
67970: PUSH
67971: LD_INT 1
67973: ARRAY
67974: PUSH
67975: LD_INT 3
67977: ARRAY
67978: EQUAL
67979: AND
67980: IFFALSE 67990
// result := true ;
67982: LD_ADDR_VAR 0 4
67986: PUSH
67987: LD_INT 1
67989: ST_TO_ADDR
// end ; end ;
67990: LD_VAR 0 4
67994: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67995: LD_INT 0
67997: PPUSH
67998: PPUSH
67999: PPUSH
68000: PPUSH
// if not unit or not area then
68001: LD_VAR 0 1
68005: NOT
68006: PUSH
68007: LD_VAR 0 2
68011: NOT
68012: OR
68013: IFFALSE 68017
// exit ;
68015: GO 68181
// tmp := AreaToList ( area , i ) ;
68017: LD_ADDR_VAR 0 6
68021: PUSH
68022: LD_VAR 0 2
68026: PPUSH
68027: LD_VAR 0 5
68031: PPUSH
68032: CALL_OW 517
68036: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
68037: LD_ADDR_VAR 0 5
68041: PUSH
68042: DOUBLE
68043: LD_INT 1
68045: DEC
68046: ST_TO_ADDR
68047: LD_VAR 0 6
68051: PUSH
68052: LD_INT 1
68054: ARRAY
68055: PUSH
68056: FOR_TO
68057: IFFALSE 68179
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
68059: LD_ADDR_VAR 0 7
68063: PUSH
68064: LD_VAR 0 6
68068: PUSH
68069: LD_INT 1
68071: ARRAY
68072: PUSH
68073: LD_VAR 0 5
68077: ARRAY
68078: PUSH
68079: LD_VAR 0 6
68083: PUSH
68084: LD_INT 2
68086: ARRAY
68087: PUSH
68088: LD_VAR 0 5
68092: ARRAY
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
68098: LD_VAR 0 7
68102: PUSH
68103: LD_INT 1
68105: ARRAY
68106: PPUSH
68107: LD_VAR 0 7
68111: PUSH
68112: LD_INT 2
68114: ARRAY
68115: PPUSH
68116: CALL_OW 428
68120: PUSH
68121: LD_INT 0
68123: EQUAL
68124: IFFALSE 68177
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
68126: LD_VAR 0 1
68130: PPUSH
68131: LD_VAR 0 7
68135: PUSH
68136: LD_INT 1
68138: ARRAY
68139: PPUSH
68140: LD_VAR 0 7
68144: PUSH
68145: LD_INT 2
68147: ARRAY
68148: PPUSH
68149: LD_VAR 0 3
68153: PPUSH
68154: CALL_OW 48
// result := IsPlaced ( unit ) ;
68158: LD_ADDR_VAR 0 4
68162: PUSH
68163: LD_VAR 0 1
68167: PPUSH
68168: CALL_OW 305
68172: ST_TO_ADDR
// exit ;
68173: POP
68174: POP
68175: GO 68181
// end ; end ;
68177: GO 68056
68179: POP
68180: POP
// end ;
68181: LD_VAR 0 4
68185: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
68186: LD_INT 0
68188: PPUSH
68189: PPUSH
68190: PPUSH
// if not side or side > 8 then
68191: LD_VAR 0 1
68195: NOT
68196: PUSH
68197: LD_VAR 0 1
68201: PUSH
68202: LD_INT 8
68204: GREATER
68205: OR
68206: IFFALSE 68210
// exit ;
68208: GO 68397
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
68210: LD_ADDR_VAR 0 4
68214: PUSH
68215: LD_INT 22
68217: PUSH
68218: LD_VAR 0 1
68222: PUSH
68223: EMPTY
68224: LIST
68225: LIST
68226: PUSH
68227: LD_INT 21
68229: PUSH
68230: LD_INT 3
68232: PUSH
68233: EMPTY
68234: LIST
68235: LIST
68236: PUSH
68237: EMPTY
68238: LIST
68239: LIST
68240: PPUSH
68241: CALL_OW 69
68245: ST_TO_ADDR
// if not tmp then
68246: LD_VAR 0 4
68250: NOT
68251: IFFALSE 68255
// exit ;
68253: GO 68397
// enable_addtolog := true ;
68255: LD_ADDR_OWVAR 81
68259: PUSH
68260: LD_INT 1
68262: ST_TO_ADDR
// AddToLog ( [ ) ;
68263: LD_STRING [
68265: PPUSH
68266: CALL_OW 561
// for i in tmp do
68270: LD_ADDR_VAR 0 3
68274: PUSH
68275: LD_VAR 0 4
68279: PUSH
68280: FOR_IN
68281: IFFALSE 68388
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
68283: LD_STRING [
68285: PUSH
68286: LD_VAR 0 3
68290: PPUSH
68291: CALL_OW 266
68295: STR
68296: PUSH
68297: LD_STRING , 
68299: STR
68300: PUSH
68301: LD_VAR 0 3
68305: PPUSH
68306: CALL_OW 250
68310: STR
68311: PUSH
68312: LD_STRING , 
68314: STR
68315: PUSH
68316: LD_VAR 0 3
68320: PPUSH
68321: CALL_OW 251
68325: STR
68326: PUSH
68327: LD_STRING , 
68329: STR
68330: PUSH
68331: LD_VAR 0 3
68335: PPUSH
68336: CALL_OW 254
68340: STR
68341: PUSH
68342: LD_STRING , 
68344: STR
68345: PUSH
68346: LD_VAR 0 3
68350: PPUSH
68351: LD_INT 1
68353: PPUSH
68354: CALL_OW 268
68358: STR
68359: PUSH
68360: LD_STRING , 
68362: STR
68363: PUSH
68364: LD_VAR 0 3
68368: PPUSH
68369: LD_INT 2
68371: PPUSH
68372: CALL_OW 268
68376: STR
68377: PUSH
68378: LD_STRING ],
68380: STR
68381: PPUSH
68382: CALL_OW 561
// end ;
68386: GO 68280
68388: POP
68389: POP
// AddToLog ( ]; ) ;
68390: LD_STRING ];
68392: PPUSH
68393: CALL_OW 561
// end ;
68397: LD_VAR 0 2
68401: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68402: LD_INT 0
68404: PPUSH
68405: PPUSH
68406: PPUSH
68407: PPUSH
68408: PPUSH
// if not area or not rate or not max then
68409: LD_VAR 0 1
68413: NOT
68414: PUSH
68415: LD_VAR 0 2
68419: NOT
68420: OR
68421: PUSH
68422: LD_VAR 0 4
68426: NOT
68427: OR
68428: IFFALSE 68432
// exit ;
68430: GO 68624
// while 1 do
68432: LD_INT 1
68434: IFFALSE 68624
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68436: LD_ADDR_VAR 0 9
68440: PUSH
68441: LD_VAR 0 1
68445: PPUSH
68446: LD_INT 1
68448: PPUSH
68449: CALL_OW 287
68453: PUSH
68454: LD_INT 10
68456: MUL
68457: ST_TO_ADDR
// r := rate / 10 ;
68458: LD_ADDR_VAR 0 7
68462: PUSH
68463: LD_VAR 0 2
68467: PUSH
68468: LD_INT 10
68470: DIVREAL
68471: ST_TO_ADDR
// time := 1 1$00 ;
68472: LD_ADDR_VAR 0 8
68476: PUSH
68477: LD_INT 2100
68479: ST_TO_ADDR
// if amount < min then
68480: LD_VAR 0 9
68484: PUSH
68485: LD_VAR 0 3
68489: LESS
68490: IFFALSE 68508
// r := r * 2 else
68492: LD_ADDR_VAR 0 7
68496: PUSH
68497: LD_VAR 0 7
68501: PUSH
68502: LD_INT 2
68504: MUL
68505: ST_TO_ADDR
68506: GO 68534
// if amount > max then
68508: LD_VAR 0 9
68512: PUSH
68513: LD_VAR 0 4
68517: GREATER
68518: IFFALSE 68534
// r := r / 2 ;
68520: LD_ADDR_VAR 0 7
68524: PUSH
68525: LD_VAR 0 7
68529: PUSH
68530: LD_INT 2
68532: DIVREAL
68533: ST_TO_ADDR
// time := time / r ;
68534: LD_ADDR_VAR 0 8
68538: PUSH
68539: LD_VAR 0 8
68543: PUSH
68544: LD_VAR 0 7
68548: DIVREAL
68549: ST_TO_ADDR
// if time < 0 then
68550: LD_VAR 0 8
68554: PUSH
68555: LD_INT 0
68557: LESS
68558: IFFALSE 68575
// time := time * - 1 ;
68560: LD_ADDR_VAR 0 8
68564: PUSH
68565: LD_VAR 0 8
68569: PUSH
68570: LD_INT 1
68572: NEG
68573: MUL
68574: ST_TO_ADDR
// wait ( time ) ;
68575: LD_VAR 0 8
68579: PPUSH
68580: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
68584: LD_INT 35
68586: PPUSH
68587: LD_INT 875
68589: PPUSH
68590: CALL_OW 12
68594: PPUSH
68595: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68599: LD_INT 1
68601: PPUSH
68602: LD_INT 5
68604: PPUSH
68605: CALL_OW 12
68609: PPUSH
68610: LD_VAR 0 1
68614: PPUSH
68615: LD_INT 1
68617: PPUSH
68618: CALL_OW 55
// end ;
68622: GO 68432
// end ;
68624: LD_VAR 0 5
68628: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68629: LD_INT 0
68631: PPUSH
68632: PPUSH
68633: PPUSH
68634: PPUSH
68635: PPUSH
68636: PPUSH
68637: PPUSH
68638: PPUSH
// if not turrets or not factories then
68639: LD_VAR 0 1
68643: NOT
68644: PUSH
68645: LD_VAR 0 2
68649: NOT
68650: OR
68651: IFFALSE 68655
// exit ;
68653: GO 68962
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68655: LD_ADDR_VAR 0 10
68659: PUSH
68660: LD_INT 5
68662: PUSH
68663: LD_INT 6
68665: PUSH
68666: EMPTY
68667: LIST
68668: LIST
68669: PUSH
68670: LD_INT 2
68672: PUSH
68673: LD_INT 4
68675: PUSH
68676: EMPTY
68677: LIST
68678: LIST
68679: PUSH
68680: LD_INT 3
68682: PUSH
68683: LD_INT 5
68685: PUSH
68686: EMPTY
68687: LIST
68688: LIST
68689: PUSH
68690: EMPTY
68691: LIST
68692: LIST
68693: LIST
68694: PUSH
68695: LD_INT 24
68697: PUSH
68698: LD_INT 25
68700: PUSH
68701: EMPTY
68702: LIST
68703: LIST
68704: PUSH
68705: LD_INT 23
68707: PUSH
68708: LD_INT 27
68710: PUSH
68711: EMPTY
68712: LIST
68713: LIST
68714: PUSH
68715: EMPTY
68716: LIST
68717: LIST
68718: PUSH
68719: LD_INT 42
68721: PUSH
68722: LD_INT 43
68724: PUSH
68725: EMPTY
68726: LIST
68727: LIST
68728: PUSH
68729: LD_INT 44
68731: PUSH
68732: LD_INT 46
68734: PUSH
68735: EMPTY
68736: LIST
68737: LIST
68738: PUSH
68739: LD_INT 45
68741: PUSH
68742: LD_INT 47
68744: PUSH
68745: EMPTY
68746: LIST
68747: LIST
68748: PUSH
68749: EMPTY
68750: LIST
68751: LIST
68752: LIST
68753: PUSH
68754: EMPTY
68755: LIST
68756: LIST
68757: LIST
68758: ST_TO_ADDR
// result := [ ] ;
68759: LD_ADDR_VAR 0 3
68763: PUSH
68764: EMPTY
68765: ST_TO_ADDR
// for i in turrets do
68766: LD_ADDR_VAR 0 4
68770: PUSH
68771: LD_VAR 0 1
68775: PUSH
68776: FOR_IN
68777: IFFALSE 68960
// begin nat := GetNation ( i ) ;
68779: LD_ADDR_VAR 0 7
68783: PUSH
68784: LD_VAR 0 4
68788: PPUSH
68789: CALL_OW 248
68793: ST_TO_ADDR
// weapon := 0 ;
68794: LD_ADDR_VAR 0 8
68798: PUSH
68799: LD_INT 0
68801: ST_TO_ADDR
// if not nat then
68802: LD_VAR 0 7
68806: NOT
68807: IFFALSE 68811
// continue ;
68809: GO 68776
// for j in list [ nat ] do
68811: LD_ADDR_VAR 0 5
68815: PUSH
68816: LD_VAR 0 10
68820: PUSH
68821: LD_VAR 0 7
68825: ARRAY
68826: PUSH
68827: FOR_IN
68828: IFFALSE 68869
// if GetBWeapon ( i ) = j [ 1 ] then
68830: LD_VAR 0 4
68834: PPUSH
68835: CALL_OW 269
68839: PUSH
68840: LD_VAR 0 5
68844: PUSH
68845: LD_INT 1
68847: ARRAY
68848: EQUAL
68849: IFFALSE 68867
// begin weapon := j [ 2 ] ;
68851: LD_ADDR_VAR 0 8
68855: PUSH
68856: LD_VAR 0 5
68860: PUSH
68861: LD_INT 2
68863: ARRAY
68864: ST_TO_ADDR
// break ;
68865: GO 68869
// end ;
68867: GO 68827
68869: POP
68870: POP
// if not weapon then
68871: LD_VAR 0 8
68875: NOT
68876: IFFALSE 68880
// continue ;
68878: GO 68776
// for k in factories do
68880: LD_ADDR_VAR 0 6
68884: PUSH
68885: LD_VAR 0 2
68889: PUSH
68890: FOR_IN
68891: IFFALSE 68956
// begin weapons := AvailableWeaponList ( k ) ;
68893: LD_ADDR_VAR 0 9
68897: PUSH
68898: LD_VAR 0 6
68902: PPUSH
68903: CALL_OW 478
68907: ST_TO_ADDR
// if not weapons then
68908: LD_VAR 0 9
68912: NOT
68913: IFFALSE 68917
// continue ;
68915: GO 68890
// if weapon in weapons then
68917: LD_VAR 0 8
68921: PUSH
68922: LD_VAR 0 9
68926: IN
68927: IFFALSE 68954
// begin result := [ i , weapon ] ;
68929: LD_ADDR_VAR 0 3
68933: PUSH
68934: LD_VAR 0 4
68938: PUSH
68939: LD_VAR 0 8
68943: PUSH
68944: EMPTY
68945: LIST
68946: LIST
68947: ST_TO_ADDR
// exit ;
68948: POP
68949: POP
68950: POP
68951: POP
68952: GO 68962
// end ; end ;
68954: GO 68890
68956: POP
68957: POP
// end ;
68958: GO 68776
68960: POP
68961: POP
// end ;
68962: LD_VAR 0 3
68966: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68967: LD_INT 0
68969: PPUSH
// if not side or side > 8 then
68970: LD_VAR 0 3
68974: NOT
68975: PUSH
68976: LD_VAR 0 3
68980: PUSH
68981: LD_INT 8
68983: GREATER
68984: OR
68985: IFFALSE 68989
// exit ;
68987: GO 69048
// if not range then
68989: LD_VAR 0 4
68993: NOT
68994: IFFALSE 69005
// range := - 12 ;
68996: LD_ADDR_VAR 0 4
69000: PUSH
69001: LD_INT 12
69003: NEG
69004: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
69005: LD_VAR 0 1
69009: PPUSH
69010: LD_VAR 0 2
69014: PPUSH
69015: LD_VAR 0 3
69019: PPUSH
69020: LD_VAR 0 4
69024: PPUSH
69025: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
69029: LD_VAR 0 1
69033: PPUSH
69034: LD_VAR 0 2
69038: PPUSH
69039: LD_VAR 0 3
69043: PPUSH
69044: CALL_OW 331
// end ;
69048: LD_VAR 0 5
69052: RET
// export function Video ( mode ) ; begin
69053: LD_INT 0
69055: PPUSH
// ingame_video = mode ;
69056: LD_ADDR_OWVAR 52
69060: PUSH
69061: LD_VAR 0 1
69065: ST_TO_ADDR
// interface_hidden = mode ;
69066: LD_ADDR_OWVAR 54
69070: PUSH
69071: LD_VAR 0 1
69075: ST_TO_ADDR
// end ;
69076: LD_VAR 0 2
69080: RET
// export function Join ( array , element ) ; begin
69081: LD_INT 0
69083: PPUSH
// result := Replace ( array , array + 1 , element ) ;
69084: LD_ADDR_VAR 0 3
69088: PUSH
69089: LD_VAR 0 1
69093: PPUSH
69094: LD_VAR 0 1
69098: PUSH
69099: LD_INT 1
69101: PLUS
69102: PPUSH
69103: LD_VAR 0 2
69107: PPUSH
69108: CALL_OW 1
69112: ST_TO_ADDR
// end ;
69113: LD_VAR 0 3
69117: RET
// export function JoinUnion ( array , element ) ; begin
69118: LD_INT 0
69120: PPUSH
// result := array union element ;
69121: LD_ADDR_VAR 0 3
69125: PUSH
69126: LD_VAR 0 1
69130: PUSH
69131: LD_VAR 0 2
69135: UNION
69136: ST_TO_ADDR
// end ;
69137: LD_VAR 0 3
69141: RET
// export function GetBehemoths ( side ) ; begin
69142: LD_INT 0
69144: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
69145: LD_ADDR_VAR 0 2
69149: PUSH
69150: LD_INT 22
69152: PUSH
69153: LD_VAR 0 1
69157: PUSH
69158: EMPTY
69159: LIST
69160: LIST
69161: PUSH
69162: LD_INT 31
69164: PUSH
69165: LD_INT 25
69167: PUSH
69168: EMPTY
69169: LIST
69170: LIST
69171: PUSH
69172: EMPTY
69173: LIST
69174: LIST
69175: PPUSH
69176: CALL_OW 69
69180: ST_TO_ADDR
// end ;
69181: LD_VAR 0 2
69185: RET
// export function Shuffle ( array ) ; var i , index ; begin
69186: LD_INT 0
69188: PPUSH
69189: PPUSH
69190: PPUSH
// result := [ ] ;
69191: LD_ADDR_VAR 0 2
69195: PUSH
69196: EMPTY
69197: ST_TO_ADDR
// if not array then
69198: LD_VAR 0 1
69202: NOT
69203: IFFALSE 69207
// exit ;
69205: GO 69306
// Randomize ;
69207: CALL_OW 10
// for i = array downto 1 do
69211: LD_ADDR_VAR 0 3
69215: PUSH
69216: DOUBLE
69217: LD_VAR 0 1
69221: INC
69222: ST_TO_ADDR
69223: LD_INT 1
69225: PUSH
69226: FOR_DOWNTO
69227: IFFALSE 69304
// begin index := rand ( 1 , array ) ;
69229: LD_ADDR_VAR 0 4
69233: PUSH
69234: LD_INT 1
69236: PPUSH
69237: LD_VAR 0 1
69241: PPUSH
69242: CALL_OW 12
69246: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
69247: LD_ADDR_VAR 0 2
69251: PUSH
69252: LD_VAR 0 2
69256: PPUSH
69257: LD_VAR 0 2
69261: PUSH
69262: LD_INT 1
69264: PLUS
69265: PPUSH
69266: LD_VAR 0 1
69270: PUSH
69271: LD_VAR 0 4
69275: ARRAY
69276: PPUSH
69277: CALL_OW 2
69281: ST_TO_ADDR
// array := Delete ( array , index ) ;
69282: LD_ADDR_VAR 0 1
69286: PUSH
69287: LD_VAR 0 1
69291: PPUSH
69292: LD_VAR 0 4
69296: PPUSH
69297: CALL_OW 3
69301: ST_TO_ADDR
// end ;
69302: GO 69226
69304: POP
69305: POP
// end ;
69306: LD_VAR 0 2
69310: RET
// export function GetBaseMaterials ( base ) ; begin
69311: LD_INT 0
69313: PPUSH
// result := [ 0 , 0 , 0 ] ;
69314: LD_ADDR_VAR 0 2
69318: PUSH
69319: LD_INT 0
69321: PUSH
69322: LD_INT 0
69324: PUSH
69325: LD_INT 0
69327: PUSH
69328: EMPTY
69329: LIST
69330: LIST
69331: LIST
69332: ST_TO_ADDR
// if not base then
69333: LD_VAR 0 1
69337: NOT
69338: IFFALSE 69342
// exit ;
69340: GO 69391
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69342: LD_ADDR_VAR 0 2
69346: PUSH
69347: LD_VAR 0 1
69351: PPUSH
69352: LD_INT 1
69354: PPUSH
69355: CALL_OW 275
69359: PUSH
69360: LD_VAR 0 1
69364: PPUSH
69365: LD_INT 2
69367: PPUSH
69368: CALL_OW 275
69372: PUSH
69373: LD_VAR 0 1
69377: PPUSH
69378: LD_INT 3
69380: PPUSH
69381: CALL_OW 275
69385: PUSH
69386: EMPTY
69387: LIST
69388: LIST
69389: LIST
69390: ST_TO_ADDR
// end ;
69391: LD_VAR 0 2
69395: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69396: LD_INT 0
69398: PPUSH
69399: PPUSH
// result := array ;
69400: LD_ADDR_VAR 0 3
69404: PUSH
69405: LD_VAR 0 1
69409: ST_TO_ADDR
// if size > 0 then
69410: LD_VAR 0 2
69414: PUSH
69415: LD_INT 0
69417: GREATER
69418: IFFALSE 69464
// for i := array downto size do
69420: LD_ADDR_VAR 0 4
69424: PUSH
69425: DOUBLE
69426: LD_VAR 0 1
69430: INC
69431: ST_TO_ADDR
69432: LD_VAR 0 2
69436: PUSH
69437: FOR_DOWNTO
69438: IFFALSE 69462
// result := Delete ( result , result ) ;
69440: LD_ADDR_VAR 0 3
69444: PUSH
69445: LD_VAR 0 3
69449: PPUSH
69450: LD_VAR 0 3
69454: PPUSH
69455: CALL_OW 3
69459: ST_TO_ADDR
69460: GO 69437
69462: POP
69463: POP
// end ;
69464: LD_VAR 0 3
69468: RET
// export function ComExit ( unit ) ; var tmp ; begin
69469: LD_INT 0
69471: PPUSH
69472: PPUSH
// if not IsInUnit ( unit ) then
69473: LD_VAR 0 1
69477: PPUSH
69478: CALL_OW 310
69482: NOT
69483: IFFALSE 69487
// exit ;
69485: GO 69547
// tmp := IsInUnit ( unit ) ;
69487: LD_ADDR_VAR 0 3
69491: PUSH
69492: LD_VAR 0 1
69496: PPUSH
69497: CALL_OW 310
69501: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
69502: LD_VAR 0 3
69506: PPUSH
69507: CALL_OW 247
69511: PUSH
69512: LD_INT 2
69514: EQUAL
69515: IFFALSE 69528
// ComExitVehicle ( unit ) else
69517: LD_VAR 0 1
69521: PPUSH
69522: CALL_OW 121
69526: GO 69537
// ComExitBuilding ( unit ) ;
69528: LD_VAR 0 1
69532: PPUSH
69533: CALL_OW 122
// result := tmp ;
69537: LD_ADDR_VAR 0 2
69541: PUSH
69542: LD_VAR 0 3
69546: ST_TO_ADDR
// end ;
69547: LD_VAR 0 2
69551: RET
// export function ComExitAll ( units ) ; var i ; begin
69552: LD_INT 0
69554: PPUSH
69555: PPUSH
// if not units then
69556: LD_VAR 0 1
69560: NOT
69561: IFFALSE 69565
// exit ;
69563: GO 69591
// for i in units do
69565: LD_ADDR_VAR 0 3
69569: PUSH
69570: LD_VAR 0 1
69574: PUSH
69575: FOR_IN
69576: IFFALSE 69589
// ComExit ( i ) ;
69578: LD_VAR 0 3
69582: PPUSH
69583: CALL 69469 0 1
69587: GO 69575
69589: POP
69590: POP
// end ;
69591: LD_VAR 0 2
69595: RET
// export function ResetHc ; begin
69596: LD_INT 0
69598: PPUSH
// InitHc ;
69599: CALL_OW 19
// hc_importance := 0 ;
69603: LD_ADDR_OWVAR 32
69607: PUSH
69608: LD_INT 0
69610: ST_TO_ADDR
// end ;
69611: LD_VAR 0 1
69615: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
69616: LD_INT 0
69618: PPUSH
69619: PPUSH
69620: PPUSH
// _x := ( x1 + x2 ) div 2 ;
69621: LD_ADDR_VAR 0 6
69625: PUSH
69626: LD_VAR 0 1
69630: PUSH
69631: LD_VAR 0 3
69635: PLUS
69636: PUSH
69637: LD_INT 2
69639: DIV
69640: ST_TO_ADDR
// if _x < 0 then
69641: LD_VAR 0 6
69645: PUSH
69646: LD_INT 0
69648: LESS
69649: IFFALSE 69666
// _x := _x * - 1 ;
69651: LD_ADDR_VAR 0 6
69655: PUSH
69656: LD_VAR 0 6
69660: PUSH
69661: LD_INT 1
69663: NEG
69664: MUL
69665: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69666: LD_ADDR_VAR 0 7
69670: PUSH
69671: LD_VAR 0 2
69675: PUSH
69676: LD_VAR 0 4
69680: PLUS
69681: PUSH
69682: LD_INT 2
69684: DIV
69685: ST_TO_ADDR
// if _y < 0 then
69686: LD_VAR 0 7
69690: PUSH
69691: LD_INT 0
69693: LESS
69694: IFFALSE 69711
// _y := _y * - 1 ;
69696: LD_ADDR_VAR 0 7
69700: PUSH
69701: LD_VAR 0 7
69705: PUSH
69706: LD_INT 1
69708: NEG
69709: MUL
69710: ST_TO_ADDR
// result := [ _x , _y ] ;
69711: LD_ADDR_VAR 0 5
69715: PUSH
69716: LD_VAR 0 6
69720: PUSH
69721: LD_VAR 0 7
69725: PUSH
69726: EMPTY
69727: LIST
69728: LIST
69729: ST_TO_ADDR
// end ;
69730: LD_VAR 0 5
69734: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69735: LD_INT 0
69737: PPUSH
69738: PPUSH
69739: PPUSH
69740: PPUSH
// task := GetTaskList ( unit ) ;
69741: LD_ADDR_VAR 0 7
69745: PUSH
69746: LD_VAR 0 1
69750: PPUSH
69751: CALL_OW 437
69755: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69756: LD_VAR 0 7
69760: NOT
69761: PUSH
69762: LD_VAR 0 1
69766: PPUSH
69767: LD_VAR 0 2
69771: PPUSH
69772: CALL_OW 308
69776: NOT
69777: AND
69778: IFFALSE 69782
// exit ;
69780: GO 69900
// if IsInArea ( unit , area ) then
69782: LD_VAR 0 1
69786: PPUSH
69787: LD_VAR 0 2
69791: PPUSH
69792: CALL_OW 308
69796: IFFALSE 69814
// begin ComMoveToArea ( unit , goAway ) ;
69798: LD_VAR 0 1
69802: PPUSH
69803: LD_VAR 0 3
69807: PPUSH
69808: CALL_OW 113
// exit ;
69812: GO 69900
// end ; if task [ 1 ] [ 1 ] <> M then
69814: LD_VAR 0 7
69818: PUSH
69819: LD_INT 1
69821: ARRAY
69822: PUSH
69823: LD_INT 1
69825: ARRAY
69826: PUSH
69827: LD_STRING M
69829: NONEQUAL
69830: IFFALSE 69834
// exit ;
69832: GO 69900
// x := task [ 1 ] [ 2 ] ;
69834: LD_ADDR_VAR 0 5
69838: PUSH
69839: LD_VAR 0 7
69843: PUSH
69844: LD_INT 1
69846: ARRAY
69847: PUSH
69848: LD_INT 2
69850: ARRAY
69851: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69852: LD_ADDR_VAR 0 6
69856: PUSH
69857: LD_VAR 0 7
69861: PUSH
69862: LD_INT 1
69864: ARRAY
69865: PUSH
69866: LD_INT 3
69868: ARRAY
69869: ST_TO_ADDR
// if InArea ( x , y , area ) then
69870: LD_VAR 0 5
69874: PPUSH
69875: LD_VAR 0 6
69879: PPUSH
69880: LD_VAR 0 2
69884: PPUSH
69885: CALL_OW 309
69889: IFFALSE 69900
// ComStop ( unit ) ;
69891: LD_VAR 0 1
69895: PPUSH
69896: CALL_OW 141
// end ;
69900: LD_VAR 0 4
69904: RET
// export function Abs ( value ) ; begin
69905: LD_INT 0
69907: PPUSH
// result := value ;
69908: LD_ADDR_VAR 0 2
69912: PUSH
69913: LD_VAR 0 1
69917: ST_TO_ADDR
// if value < 0 then
69918: LD_VAR 0 1
69922: PUSH
69923: LD_INT 0
69925: LESS
69926: IFFALSE 69943
// result := value * - 1 ;
69928: LD_ADDR_VAR 0 2
69932: PUSH
69933: LD_VAR 0 1
69937: PUSH
69938: LD_INT 1
69940: NEG
69941: MUL
69942: ST_TO_ADDR
// end ;
69943: LD_VAR 0 2
69947: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69948: LD_INT 0
69950: PPUSH
69951: PPUSH
69952: PPUSH
69953: PPUSH
69954: PPUSH
69955: PPUSH
69956: PPUSH
69957: PPUSH
// if not unit or not building then
69958: LD_VAR 0 1
69962: NOT
69963: PUSH
69964: LD_VAR 0 2
69968: NOT
69969: OR
69970: IFFALSE 69974
// exit ;
69972: GO 70200
// x := GetX ( building ) ;
69974: LD_ADDR_VAR 0 4
69978: PUSH
69979: LD_VAR 0 2
69983: PPUSH
69984: CALL_OW 250
69988: ST_TO_ADDR
// y := GetY ( building ) ;
69989: LD_ADDR_VAR 0 6
69993: PUSH
69994: LD_VAR 0 2
69998: PPUSH
69999: CALL_OW 251
70003: ST_TO_ADDR
// d := GetDir ( building ) ;
70004: LD_ADDR_VAR 0 8
70008: PUSH
70009: LD_VAR 0 2
70013: PPUSH
70014: CALL_OW 254
70018: ST_TO_ADDR
// r := 4 ;
70019: LD_ADDR_VAR 0 9
70023: PUSH
70024: LD_INT 4
70026: ST_TO_ADDR
// for i := 1 to 5 do
70027: LD_ADDR_VAR 0 10
70031: PUSH
70032: DOUBLE
70033: LD_INT 1
70035: DEC
70036: ST_TO_ADDR
70037: LD_INT 5
70039: PUSH
70040: FOR_TO
70041: IFFALSE 70198
// begin _x := ShiftX ( x , d , r + i ) ;
70043: LD_ADDR_VAR 0 5
70047: PUSH
70048: LD_VAR 0 4
70052: PPUSH
70053: LD_VAR 0 8
70057: PPUSH
70058: LD_VAR 0 9
70062: PUSH
70063: LD_VAR 0 10
70067: PLUS
70068: PPUSH
70069: CALL_OW 272
70073: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
70074: LD_ADDR_VAR 0 7
70078: PUSH
70079: LD_VAR 0 6
70083: PPUSH
70084: LD_VAR 0 8
70088: PPUSH
70089: LD_VAR 0 9
70093: PUSH
70094: LD_VAR 0 10
70098: PLUS
70099: PPUSH
70100: CALL_OW 273
70104: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
70105: LD_VAR 0 5
70109: PPUSH
70110: LD_VAR 0 7
70114: PPUSH
70115: CALL_OW 488
70119: PUSH
70120: LD_VAR 0 5
70124: PPUSH
70125: LD_VAR 0 7
70129: PPUSH
70130: CALL_OW 428
70134: PPUSH
70135: CALL_OW 247
70139: PUSH
70140: LD_INT 3
70142: PUSH
70143: LD_INT 2
70145: PUSH
70146: EMPTY
70147: LIST
70148: LIST
70149: IN
70150: NOT
70151: AND
70152: IFFALSE 70196
// begin ComMoveXY ( unit , _x , _y ) ;
70154: LD_VAR 0 1
70158: PPUSH
70159: LD_VAR 0 5
70163: PPUSH
70164: LD_VAR 0 7
70168: PPUSH
70169: CALL_OW 111
// result := [ _x , _y ] ;
70173: LD_ADDR_VAR 0 3
70177: PUSH
70178: LD_VAR 0 5
70182: PUSH
70183: LD_VAR 0 7
70187: PUSH
70188: EMPTY
70189: LIST
70190: LIST
70191: ST_TO_ADDR
// exit ;
70192: POP
70193: POP
70194: GO 70200
// end ; end ;
70196: GO 70040
70198: POP
70199: POP
// end ;
70200: LD_VAR 0 3
70204: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
70205: LD_INT 0
70207: PPUSH
70208: PPUSH
70209: PPUSH
// result := 0 ;
70210: LD_ADDR_VAR 0 3
70214: PUSH
70215: LD_INT 0
70217: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
70218: LD_VAR 0 1
70222: PUSH
70223: LD_INT 0
70225: LESS
70226: PUSH
70227: LD_VAR 0 1
70231: PUSH
70232: LD_INT 8
70234: GREATER
70235: OR
70236: PUSH
70237: LD_VAR 0 2
70241: PUSH
70242: LD_INT 0
70244: LESS
70245: OR
70246: PUSH
70247: LD_VAR 0 2
70251: PUSH
70252: LD_INT 8
70254: GREATER
70255: OR
70256: IFFALSE 70260
// exit ;
70258: GO 70335
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
70260: LD_ADDR_VAR 0 4
70264: PUSH
70265: LD_INT 22
70267: PUSH
70268: LD_VAR 0 2
70272: PUSH
70273: EMPTY
70274: LIST
70275: LIST
70276: PPUSH
70277: CALL_OW 69
70281: PUSH
70282: FOR_IN
70283: IFFALSE 70333
// begin un := UnitShoot ( i ) ;
70285: LD_ADDR_VAR 0 5
70289: PUSH
70290: LD_VAR 0 4
70294: PPUSH
70295: CALL_OW 504
70299: ST_TO_ADDR
// if GetSide ( un ) = side1 then
70300: LD_VAR 0 5
70304: PPUSH
70305: CALL_OW 255
70309: PUSH
70310: LD_VAR 0 1
70314: EQUAL
70315: IFFALSE 70331
// begin result := un ;
70317: LD_ADDR_VAR 0 3
70321: PUSH
70322: LD_VAR 0 5
70326: ST_TO_ADDR
// exit ;
70327: POP
70328: POP
70329: GO 70335
// end ; end ;
70331: GO 70282
70333: POP
70334: POP
// end ;
70335: LD_VAR 0 3
70339: RET
// export function GetCargoBay ( units ) ; begin
70340: LD_INT 0
70342: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
70343: LD_ADDR_VAR 0 2
70347: PUSH
70348: LD_VAR 0 1
70352: PPUSH
70353: LD_INT 2
70355: PUSH
70356: LD_INT 34
70358: PUSH
70359: LD_INT 12
70361: PUSH
70362: EMPTY
70363: LIST
70364: LIST
70365: PUSH
70366: LD_INT 34
70368: PUSH
70369: LD_INT 51
70371: PUSH
70372: EMPTY
70373: LIST
70374: LIST
70375: PUSH
70376: LD_INT 34
70378: PUSH
70379: LD_INT 32
70381: PUSH
70382: EMPTY
70383: LIST
70384: LIST
70385: PUSH
70386: LD_INT 34
70388: PUSH
70389: LD_EXP 39
70393: PUSH
70394: EMPTY
70395: LIST
70396: LIST
70397: PUSH
70398: EMPTY
70399: LIST
70400: LIST
70401: LIST
70402: LIST
70403: LIST
70404: PPUSH
70405: CALL_OW 72
70409: ST_TO_ADDR
// end ;
70410: LD_VAR 0 2
70414: RET
// export function Negate ( value ) ; begin
70415: LD_INT 0
70417: PPUSH
// result := not value ;
70418: LD_ADDR_VAR 0 2
70422: PUSH
70423: LD_VAR 0 1
70427: NOT
70428: ST_TO_ADDR
// end ;
70429: LD_VAR 0 2
70433: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
70434: LD_INT 0
70436: PPUSH
// if x1 = x2 then
70437: LD_VAR 0 1
70441: PUSH
70442: LD_VAR 0 3
70446: EQUAL
70447: IFFALSE 70481
// begin if y1 > y2 then
70449: LD_VAR 0 2
70453: PUSH
70454: LD_VAR 0 4
70458: GREATER
70459: IFFALSE 70471
// result := 0 else
70461: LD_ADDR_VAR 0 5
70465: PUSH
70466: LD_INT 0
70468: ST_TO_ADDR
70469: GO 70479
// result := 3 ;
70471: LD_ADDR_VAR 0 5
70475: PUSH
70476: LD_INT 3
70478: ST_TO_ADDR
// exit ;
70479: GO 70567
// end ; if y1 = y2 then
70481: LD_VAR 0 2
70485: PUSH
70486: LD_VAR 0 4
70490: EQUAL
70491: IFFALSE 70525
// begin if x1 > x2 then
70493: LD_VAR 0 1
70497: PUSH
70498: LD_VAR 0 3
70502: GREATER
70503: IFFALSE 70515
// result := 1 else
70505: LD_ADDR_VAR 0 5
70509: PUSH
70510: LD_INT 1
70512: ST_TO_ADDR
70513: GO 70523
// result := 4 ;
70515: LD_ADDR_VAR 0 5
70519: PUSH
70520: LD_INT 4
70522: ST_TO_ADDR
// exit ;
70523: GO 70567
// end ; if x1 > x2 and y1 > y2 then
70525: LD_VAR 0 1
70529: PUSH
70530: LD_VAR 0 3
70534: GREATER
70535: PUSH
70536: LD_VAR 0 2
70540: PUSH
70541: LD_VAR 0 4
70545: GREATER
70546: AND
70547: IFFALSE 70559
// result := 2 else
70549: LD_ADDR_VAR 0 5
70553: PUSH
70554: LD_INT 2
70556: ST_TO_ADDR
70557: GO 70567
// result := 5 ;
70559: LD_ADDR_VAR 0 5
70563: PUSH
70564: LD_INT 5
70566: ST_TO_ADDR
// end ;
70567: LD_VAR 0 5
70571: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70572: LD_INT 0
70574: PPUSH
70575: PPUSH
// if not driver or not IsInUnit ( driver ) then
70576: LD_VAR 0 1
70580: NOT
70581: PUSH
70582: LD_VAR 0 1
70586: PPUSH
70587: CALL_OW 310
70591: NOT
70592: OR
70593: IFFALSE 70597
// exit ;
70595: GO 70687
// vehicle := IsInUnit ( driver ) ;
70597: LD_ADDR_VAR 0 3
70601: PUSH
70602: LD_VAR 0 1
70606: PPUSH
70607: CALL_OW 310
70611: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70612: LD_VAR 0 1
70616: PPUSH
70617: LD_STRING \
70619: PUSH
70620: LD_INT 0
70622: PUSH
70623: LD_INT 0
70625: PUSH
70626: LD_INT 0
70628: PUSH
70629: LD_INT 0
70631: PUSH
70632: LD_INT 0
70634: PUSH
70635: LD_INT 0
70637: PUSH
70638: EMPTY
70639: LIST
70640: LIST
70641: LIST
70642: LIST
70643: LIST
70644: LIST
70645: LIST
70646: PUSH
70647: LD_STRING E
70649: PUSH
70650: LD_INT 0
70652: PUSH
70653: LD_INT 0
70655: PUSH
70656: LD_VAR 0 3
70660: PUSH
70661: LD_INT 0
70663: PUSH
70664: LD_INT 0
70666: PUSH
70667: LD_INT 0
70669: PUSH
70670: EMPTY
70671: LIST
70672: LIST
70673: LIST
70674: LIST
70675: LIST
70676: LIST
70677: LIST
70678: PUSH
70679: EMPTY
70680: LIST
70681: LIST
70682: PPUSH
70683: CALL_OW 446
// end ;
70687: LD_VAR 0 2
70691: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70692: LD_INT 0
70694: PPUSH
70695: PPUSH
// if not driver or not IsInUnit ( driver ) then
70696: LD_VAR 0 1
70700: NOT
70701: PUSH
70702: LD_VAR 0 1
70706: PPUSH
70707: CALL_OW 310
70711: NOT
70712: OR
70713: IFFALSE 70717
// exit ;
70715: GO 70807
// vehicle := IsInUnit ( driver ) ;
70717: LD_ADDR_VAR 0 3
70721: PUSH
70722: LD_VAR 0 1
70726: PPUSH
70727: CALL_OW 310
70731: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70732: LD_VAR 0 1
70736: PPUSH
70737: LD_STRING \
70739: PUSH
70740: LD_INT 0
70742: PUSH
70743: LD_INT 0
70745: PUSH
70746: LD_INT 0
70748: PUSH
70749: LD_INT 0
70751: PUSH
70752: LD_INT 0
70754: PUSH
70755: LD_INT 0
70757: PUSH
70758: EMPTY
70759: LIST
70760: LIST
70761: LIST
70762: LIST
70763: LIST
70764: LIST
70765: LIST
70766: PUSH
70767: LD_STRING E
70769: PUSH
70770: LD_INT 0
70772: PUSH
70773: LD_INT 0
70775: PUSH
70776: LD_VAR 0 3
70780: PUSH
70781: LD_INT 0
70783: PUSH
70784: LD_INT 0
70786: PUSH
70787: LD_INT 0
70789: PUSH
70790: EMPTY
70791: LIST
70792: LIST
70793: LIST
70794: LIST
70795: LIST
70796: LIST
70797: LIST
70798: PUSH
70799: EMPTY
70800: LIST
70801: LIST
70802: PPUSH
70803: CALL_OW 447
// end ;
70807: LD_VAR 0 2
70811: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70812: LD_INT 0
70814: PPUSH
70815: PPUSH
70816: PPUSH
// tmp := [ ] ;
70817: LD_ADDR_VAR 0 5
70821: PUSH
70822: EMPTY
70823: ST_TO_ADDR
// for i in units do
70824: LD_ADDR_VAR 0 4
70828: PUSH
70829: LD_VAR 0 1
70833: PUSH
70834: FOR_IN
70835: IFFALSE 70873
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70837: LD_ADDR_VAR 0 5
70841: PUSH
70842: LD_VAR 0 5
70846: PPUSH
70847: LD_VAR 0 5
70851: PUSH
70852: LD_INT 1
70854: PLUS
70855: PPUSH
70856: LD_VAR 0 4
70860: PPUSH
70861: CALL_OW 256
70865: PPUSH
70866: CALL_OW 2
70870: ST_TO_ADDR
70871: GO 70834
70873: POP
70874: POP
// if not tmp then
70875: LD_VAR 0 5
70879: NOT
70880: IFFALSE 70884
// exit ;
70882: GO 70932
// if asc then
70884: LD_VAR 0 2
70888: IFFALSE 70912
// result := SortListByListAsc ( units , tmp ) else
70890: LD_ADDR_VAR 0 3
70894: PUSH
70895: LD_VAR 0 1
70899: PPUSH
70900: LD_VAR 0 5
70904: PPUSH
70905: CALL_OW 76
70909: ST_TO_ADDR
70910: GO 70932
// result := SortListByListDesc ( units , tmp ) ;
70912: LD_ADDR_VAR 0 3
70916: PUSH
70917: LD_VAR 0 1
70921: PPUSH
70922: LD_VAR 0 5
70926: PPUSH
70927: CALL_OW 77
70931: ST_TO_ADDR
// end ;
70932: LD_VAR 0 3
70936: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70937: LD_INT 0
70939: PPUSH
70940: PPUSH
// task := GetTaskList ( mech ) ;
70941: LD_ADDR_VAR 0 4
70945: PUSH
70946: LD_VAR 0 1
70950: PPUSH
70951: CALL_OW 437
70955: ST_TO_ADDR
// if not task then
70956: LD_VAR 0 4
70960: NOT
70961: IFFALSE 70965
// exit ;
70963: GO 71007
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70965: LD_ADDR_VAR 0 3
70969: PUSH
70970: LD_VAR 0 4
70974: PUSH
70975: LD_INT 1
70977: ARRAY
70978: PUSH
70979: LD_INT 1
70981: ARRAY
70982: PUSH
70983: LD_STRING r
70985: EQUAL
70986: PUSH
70987: LD_VAR 0 4
70991: PUSH
70992: LD_INT 1
70994: ARRAY
70995: PUSH
70996: LD_INT 4
70998: ARRAY
70999: PUSH
71000: LD_VAR 0 2
71004: EQUAL
71005: AND
71006: ST_TO_ADDR
// end ;
71007: LD_VAR 0 3
71011: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
71012: LD_INT 0
71014: PPUSH
// SetDir ( unit , d ) ;
71015: LD_VAR 0 1
71019: PPUSH
71020: LD_VAR 0 4
71024: PPUSH
71025: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
71029: LD_VAR 0 1
71033: PPUSH
71034: LD_VAR 0 2
71038: PPUSH
71039: LD_VAR 0 3
71043: PPUSH
71044: LD_VAR 0 5
71048: PPUSH
71049: CALL_OW 48
// end ;
71053: LD_VAR 0 6
71057: RET
// export function ToNaturalNumber ( number ) ; begin
71058: LD_INT 0
71060: PPUSH
// result := number div 1 ;
71061: LD_ADDR_VAR 0 2
71065: PUSH
71066: LD_VAR 0 1
71070: PUSH
71071: LD_INT 1
71073: DIV
71074: ST_TO_ADDR
// if number < 0 then
71075: LD_VAR 0 1
71079: PUSH
71080: LD_INT 0
71082: LESS
71083: IFFALSE 71093
// result := 0 ;
71085: LD_ADDR_VAR 0 2
71089: PUSH
71090: LD_INT 0
71092: ST_TO_ADDR
// end ;
71093: LD_VAR 0 2
71097: RET
// export function SortByClass ( units , class ) ; var un ; begin
71098: LD_INT 0
71100: PPUSH
71101: PPUSH
// if not units or not class then
71102: LD_VAR 0 1
71106: NOT
71107: PUSH
71108: LD_VAR 0 2
71112: NOT
71113: OR
71114: IFFALSE 71118
// exit ;
71116: GO 71213
// result := [ ] ;
71118: LD_ADDR_VAR 0 3
71122: PUSH
71123: EMPTY
71124: ST_TO_ADDR
// for un in units do
71125: LD_ADDR_VAR 0 4
71129: PUSH
71130: LD_VAR 0 1
71134: PUSH
71135: FOR_IN
71136: IFFALSE 71211
// if GetClass ( un ) = class then
71138: LD_VAR 0 4
71142: PPUSH
71143: CALL_OW 257
71147: PUSH
71148: LD_VAR 0 2
71152: EQUAL
71153: IFFALSE 71180
// result := Insert ( result , 1 , un ) else
71155: LD_ADDR_VAR 0 3
71159: PUSH
71160: LD_VAR 0 3
71164: PPUSH
71165: LD_INT 1
71167: PPUSH
71168: LD_VAR 0 4
71172: PPUSH
71173: CALL_OW 2
71177: ST_TO_ADDR
71178: GO 71209
// result := Replace ( result , result + 1 , un ) ;
71180: LD_ADDR_VAR 0 3
71184: PUSH
71185: LD_VAR 0 3
71189: PPUSH
71190: LD_VAR 0 3
71194: PUSH
71195: LD_INT 1
71197: PLUS
71198: PPUSH
71199: LD_VAR 0 4
71203: PPUSH
71204: CALL_OW 1
71208: ST_TO_ADDR
71209: GO 71135
71211: POP
71212: POP
// end ;
71213: LD_VAR 0 3
71217: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
71218: LD_INT 0
71220: PPUSH
71221: PPUSH
71222: PPUSH
71223: PPUSH
71224: PPUSH
71225: PPUSH
71226: PPUSH
// result := [ ] ;
71227: LD_ADDR_VAR 0 4
71231: PUSH
71232: EMPTY
71233: ST_TO_ADDR
// if x - r < 0 then
71234: LD_VAR 0 1
71238: PUSH
71239: LD_VAR 0 3
71243: MINUS
71244: PUSH
71245: LD_INT 0
71247: LESS
71248: IFFALSE 71260
// min_x := 0 else
71250: LD_ADDR_VAR 0 8
71254: PUSH
71255: LD_INT 0
71257: ST_TO_ADDR
71258: GO 71276
// min_x := x - r ;
71260: LD_ADDR_VAR 0 8
71264: PUSH
71265: LD_VAR 0 1
71269: PUSH
71270: LD_VAR 0 3
71274: MINUS
71275: ST_TO_ADDR
// if y - r < 0 then
71276: LD_VAR 0 2
71280: PUSH
71281: LD_VAR 0 3
71285: MINUS
71286: PUSH
71287: LD_INT 0
71289: LESS
71290: IFFALSE 71302
// min_y := 0 else
71292: LD_ADDR_VAR 0 7
71296: PUSH
71297: LD_INT 0
71299: ST_TO_ADDR
71300: GO 71318
// min_y := y - r ;
71302: LD_ADDR_VAR 0 7
71306: PUSH
71307: LD_VAR 0 2
71311: PUSH
71312: LD_VAR 0 3
71316: MINUS
71317: ST_TO_ADDR
// max_x := x + r ;
71318: LD_ADDR_VAR 0 9
71322: PUSH
71323: LD_VAR 0 1
71327: PUSH
71328: LD_VAR 0 3
71332: PLUS
71333: ST_TO_ADDR
// max_y := y + r ;
71334: LD_ADDR_VAR 0 10
71338: PUSH
71339: LD_VAR 0 2
71343: PUSH
71344: LD_VAR 0 3
71348: PLUS
71349: ST_TO_ADDR
// for _x = min_x to max_x do
71350: LD_ADDR_VAR 0 5
71354: PUSH
71355: DOUBLE
71356: LD_VAR 0 8
71360: DEC
71361: ST_TO_ADDR
71362: LD_VAR 0 9
71366: PUSH
71367: FOR_TO
71368: IFFALSE 71469
// for _y = min_y to max_y do
71370: LD_ADDR_VAR 0 6
71374: PUSH
71375: DOUBLE
71376: LD_VAR 0 7
71380: DEC
71381: ST_TO_ADDR
71382: LD_VAR 0 10
71386: PUSH
71387: FOR_TO
71388: IFFALSE 71465
// begin if not ValidHex ( _x , _y ) then
71390: LD_VAR 0 5
71394: PPUSH
71395: LD_VAR 0 6
71399: PPUSH
71400: CALL_OW 488
71404: NOT
71405: IFFALSE 71409
// continue ;
71407: GO 71387
// if GetResourceTypeXY ( _x , _y ) then
71409: LD_VAR 0 5
71413: PPUSH
71414: LD_VAR 0 6
71418: PPUSH
71419: CALL_OW 283
71423: IFFALSE 71463
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
71425: LD_ADDR_VAR 0 4
71429: PUSH
71430: LD_VAR 0 4
71434: PPUSH
71435: LD_VAR 0 4
71439: PUSH
71440: LD_INT 1
71442: PLUS
71443: PPUSH
71444: LD_VAR 0 5
71448: PUSH
71449: LD_VAR 0 6
71453: PUSH
71454: EMPTY
71455: LIST
71456: LIST
71457: PPUSH
71458: CALL_OW 1
71462: ST_TO_ADDR
// end ;
71463: GO 71387
71465: POP
71466: POP
71467: GO 71367
71469: POP
71470: POP
// end ;
71471: LD_VAR 0 4
71475: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
71476: LD_INT 0
71478: PPUSH
71479: PPUSH
71480: PPUSH
71481: PPUSH
71482: PPUSH
71483: PPUSH
// if not units then
71484: LD_VAR 0 1
71488: NOT
71489: IFFALSE 71493
// exit ;
71491: GO 71894
// result := UnitFilter ( units , [ f_ok ] ) ;
71493: LD_ADDR_VAR 0 3
71497: PUSH
71498: LD_VAR 0 1
71502: PPUSH
71503: LD_INT 50
71505: PUSH
71506: EMPTY
71507: LIST
71508: PPUSH
71509: CALL_OW 72
71513: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71514: LD_ADDR_VAR 0 7
71518: PUSH
71519: LD_VAR 0 1
71523: PUSH
71524: LD_INT 1
71526: ARRAY
71527: PPUSH
71528: CALL_OW 255
71532: ST_TO_ADDR
// if not result then
71533: LD_VAR 0 3
71537: NOT
71538: IFFALSE 71542
// exit ;
71540: GO 71894
// for i in result do
71542: LD_ADDR_VAR 0 4
71546: PUSH
71547: LD_VAR 0 3
71551: PUSH
71552: FOR_IN
71553: IFFALSE 71892
// begin tag := GetTag ( i ) + 1 ;
71555: LD_ADDR_VAR 0 8
71559: PUSH
71560: LD_VAR 0 4
71564: PPUSH
71565: CALL_OW 110
71569: PUSH
71570: LD_INT 1
71572: PLUS
71573: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
71574: LD_ADDR_VAR 0 6
71578: PUSH
71579: LD_VAR 0 4
71583: PPUSH
71584: CALL_OW 250
71588: PPUSH
71589: LD_VAR 0 4
71593: PPUSH
71594: CALL_OW 251
71598: PPUSH
71599: LD_INT 6
71601: PPUSH
71602: CALL 71218 0 3
71606: ST_TO_ADDR
// if cr then
71607: LD_VAR 0 6
71611: IFFALSE 71650
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71613: LD_VAR 0 4
71617: PPUSH
71618: LD_VAR 0 6
71622: PUSH
71623: LD_INT 1
71625: ARRAY
71626: PUSH
71627: LD_INT 1
71629: ARRAY
71630: PPUSH
71631: LD_VAR 0 6
71635: PUSH
71636: LD_INT 1
71638: ARRAY
71639: PUSH
71640: LD_INT 2
71642: ARRAY
71643: PPUSH
71644: CALL_OW 116
71648: GO 71890
// if path > tag then
71650: LD_VAR 0 2
71654: PUSH
71655: LD_VAR 0 8
71659: GREATER
71660: IFFALSE 71838
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
71662: LD_ADDR_VAR 0 5
71666: PUSH
71667: LD_INT 81
71669: PUSH
71670: LD_VAR 0 7
71674: PUSH
71675: EMPTY
71676: LIST
71677: LIST
71678: PUSH
71679: LD_INT 91
71681: PUSH
71682: LD_VAR 0 4
71686: PUSH
71687: LD_INT 12
71689: PUSH
71690: EMPTY
71691: LIST
71692: LIST
71693: LIST
71694: PUSH
71695: EMPTY
71696: LIST
71697: LIST
71698: PPUSH
71699: CALL_OW 69
71703: ST_TO_ADDR
// if enemy then
71704: LD_VAR 0 5
71708: IFFALSE 71736
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71710: LD_VAR 0 4
71714: PPUSH
71715: LD_VAR 0 5
71719: PPUSH
71720: LD_VAR 0 4
71724: PPUSH
71725: CALL_OW 74
71729: PPUSH
71730: CALL_OW 115
71734: GO 71836
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71736: LD_VAR 0 4
71740: PPUSH
71741: LD_VAR 0 2
71745: PUSH
71746: LD_VAR 0 8
71750: ARRAY
71751: PUSH
71752: LD_INT 1
71754: ARRAY
71755: PPUSH
71756: LD_VAR 0 2
71760: PUSH
71761: LD_VAR 0 8
71765: ARRAY
71766: PUSH
71767: LD_INT 2
71769: ARRAY
71770: PPUSH
71771: CALL_OW 297
71775: PUSH
71776: LD_INT 6
71778: GREATER
71779: IFFALSE 71822
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71781: LD_VAR 0 4
71785: PPUSH
71786: LD_VAR 0 2
71790: PUSH
71791: LD_VAR 0 8
71795: ARRAY
71796: PUSH
71797: LD_INT 1
71799: ARRAY
71800: PPUSH
71801: LD_VAR 0 2
71805: PUSH
71806: LD_VAR 0 8
71810: ARRAY
71811: PUSH
71812: LD_INT 2
71814: ARRAY
71815: PPUSH
71816: CALL_OW 114
71820: GO 71836
// SetTag ( i , tag ) ;
71822: LD_VAR 0 4
71826: PPUSH
71827: LD_VAR 0 8
71831: PPUSH
71832: CALL_OW 109
// end else
71836: GO 71890
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71838: LD_ADDR_VAR 0 5
71842: PUSH
71843: LD_INT 81
71845: PUSH
71846: LD_VAR 0 7
71850: PUSH
71851: EMPTY
71852: LIST
71853: LIST
71854: PPUSH
71855: CALL_OW 69
71859: ST_TO_ADDR
// if enemy then
71860: LD_VAR 0 5
71864: IFFALSE 71890
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71866: LD_VAR 0 4
71870: PPUSH
71871: LD_VAR 0 5
71875: PPUSH
71876: LD_VAR 0 4
71880: PPUSH
71881: CALL_OW 74
71885: PPUSH
71886: CALL_OW 115
// end ; end ;
71890: GO 71552
71892: POP
71893: POP
// end ; end_of_file
71894: LD_VAR 0 3
71898: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
71899: LD_VAR 0 1
71903: PUSH
71904: LD_INT 200
71906: DOUBLE
71907: GREATEREQUAL
71908: IFFALSE 71916
71910: LD_INT 299
71912: DOUBLE
71913: LESSEQUAL
71914: IFTRUE 71918
71916: GO 71950
71918: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
71919: LD_VAR 0 1
71923: PPUSH
71924: LD_VAR 0 2
71928: PPUSH
71929: LD_VAR 0 3
71933: PPUSH
71934: LD_VAR 0 4
71938: PPUSH
71939: LD_VAR 0 5
71943: PPUSH
71944: CALL 28461 0 5
71948: GO 72027
71950: LD_INT 300
71952: DOUBLE
71953: GREATEREQUAL
71954: IFFALSE 71962
71956: LD_INT 399
71958: DOUBLE
71959: LESSEQUAL
71960: IFTRUE 71964
71962: GO 72026
71964: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
71965: LD_VAR 0 1
71969: PPUSH
71970: LD_VAR 0 2
71974: PPUSH
71975: LD_VAR 0 3
71979: PPUSH
71980: LD_VAR 0 4
71984: PPUSH
71985: LD_VAR 0 5
71989: PPUSH
71990: LD_VAR 0 6
71994: PPUSH
71995: LD_VAR 0 7
71999: PPUSH
72000: LD_VAR 0 8
72004: PPUSH
72005: LD_VAR 0 9
72009: PPUSH
72010: LD_VAR 0 10
72014: PPUSH
72015: LD_VAR 0 11
72019: PPUSH
72020: CALL 26349 0 11
72024: GO 72027
72026: POP
// end ;
72027: PPOPN 11
72029: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72030: LD_VAR 0 1
72034: PPUSH
72035: LD_VAR 0 2
72039: PPUSH
72040: LD_VAR 0 3
72044: PPUSH
72045: LD_VAR 0 4
72049: PPUSH
72050: LD_VAR 0 5
72054: PPUSH
72055: CALL 28443 0 5
// end ; end_of_file
72059: PPOPN 5
72061: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
72062: LD_VAR 0 1
72066: PPUSH
72067: LD_VAR 0 2
72071: PPUSH
72072: LD_VAR 0 3
72076: PPUSH
72077: LD_VAR 0 4
72081: PPUSH
72082: LD_VAR 0 5
72086: PPUSH
72087: LD_VAR 0 6
72091: PPUSH
72092: CALL 15157 0 6
// end ;
72096: PPOPN 6
72098: END
