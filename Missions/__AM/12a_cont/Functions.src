Export Function CanSayRand(side);
begin
result := FilterAllUnits([[f_placed], [f_side, side], [f_or, [f_class, 1], [f_class, 2], [f_class, 3], [f_class, 4]]]) diff [JMM, Frank, Lisa, Donaldson, Bobby, Cyrus, Denis, Brown, Gladstone, Houten, Powell, Cornel, Gary, Kikuchi];
End;


Export Function SayRand(sex, dial);
begin
result := FilterAllUnits([[f_placed], [f_side, 1], [f_sex, sex], [f_or, [f_class, 1], [f_class, 2], [f_class, 3], [f_class, 4]]]) diff [JMM, Frank, Lisa, Donaldson, Bobby, Cyrus, Denis, Brown, Gladstone, Houten, Powell, Cornel, Gary, Kikuchi];

if not result then
   exit;

result := result[1];
Say(result, dial);
End;

Export Function SayRand2(sex, dial, filter);
begin
result := FilterAllUnits([[f_side, 1], [f_sex, sex], [f_or, [f_class, 1], [f_class, 2], [f_class, 3], [f_class, 4]]]) diff [JMM, Frank, Lisa, Donaldson, Bobby, Cyrus, Denis, Brown, Gladstone, Houten, Powell, Cornel, Gary, Kikuchi]^filter;

if not result then
   exit;

result := result[1];
Say(result, dial);
End;

{
    flags:
    'safe_place' => [x, y, r] (default: null)
    'spot_dist' => r (default: 8)
    'chase_range' => r (default: 8)
}
Export Function Patrol(unit, path, flags);
var i, x, y, c, p, station, tmp_path, status, enemy, e, spot_dist, safe_place, chase_range, need_refuel;
begin
if not unit or not path or GetType(unit) = unit_building then
    exit;

for i = path downto 1 do
    begin
    if not ValidHex(path[i][1], path[i][2]) then
        path = Delete(path, i);
    end;

if not path then
    exit;

tmp_path := [];

if flags then
   begin

   if flags[1] then
      safe_place = flags[1];

   if flags[2] then
      spot_dist = flags[2];

   if flags[3] then
      chase_range = flags[3];

   end;

if not chase_range then
   chase_range = 8;

if not spot_dist then
   spot_dist := 8;

need_refuel = (GetType(unit) = unit_vehicle and GetEngine(unit) <> engine_siberite);

// unit status
{
    1 - patrol
    2 - chase
    3 - retreat
    4 - wait for heal/repair
    5 - return to patrol
    6 - refuel
}

status = 1; // as default
tmp_path = [1, path[1]]; // as default

repeat
 wait(0$1); // update time

 // refuel
 if need_refuel and GetFuel(unit) < 20 then
    begin
    station := FilterAllUnits([[f_side, GetSide(unit)], [f_or, [f_btype, b_depot], [f_btype, b_warehouse], [f_btype, b_oil_mine], [f_btype, b_factory]]]);

    if not station then
       begin
       SetFuel(unit, 40);
       continue;
       end;

    status := 6;
    station := NearestUnitToUnit(station, unit);

    repeat
     wait(0$1);
     ComMoveUnit(unit, station);
    until GetDistUnits(unit, station) < 6;

    SetFuel(unit, 100);
    status := 5;
    end;

 // check status
 // patrol
 if status = 1 then
    begin
    // scan area
    enemy := FilterAllUnits([[f_enemy, GetSide(unit)], [f_not, [f_type, unit_building]], [f_dist, unit, spot_dist], [f_see, 1]]);

    for i in enemy do
        if IsInvisible(i) then
           enemy := enemy diff i;

     // enemy spotted!
    if enemy then
       begin
       SetRememberedX(unit, GetX(unit));
       SetRememberedY(unit, GetY(unit));

       status = 2;
       end
    else // continue patrol
        begin
        // go to next point
        if IsAt(unit, tmp_path[2][1], tmp_path[2][2]) or not HasTask(unit) then
            begin
            wait(0$2);

            if tmp_path[1]+1 > path then
                tmp_path := Replace(tmp_path, 1, 1)
            else
                tmp_path := Replace(tmp_path, 1, tmp_path[1]+1);

            tmp_path := Replace(tmp_path, 2, path[tmp_path[1]]);

            ComAgressiveMove(unit, tmp_path[2][1], tmp_path[2][2]);
            end;
        end;
    end;

 // chase
 if status = 2 then
    begin
    // check health
    if GetLives(unit) < 650 and safe_place then
       begin
       status = 3;

       continue;
       end;

    x := GetRememberedX(unit);
    y := GetRememberedY(unit);

    enemy := FilterAllUnits([[f_enemy, GetSide(unit)], [f_distxy,  x, y, spot_dist], [f_see, 1]]);

    // nearest unit
    if enemy then
       begin
       e := NearestUnitToUnit(enemy, unit);

       if GetDistUnitXY(e, x, y) < spot_dist + chase_range then
          ComAttackUnit(unit, e);
       end
    else
       begin
       ComStop(unit);

       status = 5;
       end;
    end;

 // retreat
 if status = 3 and safe_place then
    begin

    repeat
     ComMoveXY(unit, safe_place[1], safe_place[2]);
     wait(0$1);
    until GetDistUnitXY(unit, safe_place[1], safe_place[2]) < 4;

    ComStop(unit);

    status = 4;
    end;

 // healing
 if status = 4 then
    begin
    // <--- add to heal/repair array here

    repeat
     wait(0$1);
    until GetLives(unit) = 1000;

    status = 5;
    end;

 // return
 if status = 5 then
    begin
    p := 999;
    e := [tmp_path[2][1], tmp_path[2][2]];
    c := 1;

    for i = 1 to tmp_path[2] div 2 do
        begin
        x := GetDistUnitXY(unit, tmp_path[2][c], tmp_path[2][c+1]);

        if x < p then
           begin
           p := x;
           e := [tmp_path[2][c], tmp_path[2][c+1]];
           end;

        c = c + 2;
        end;

    repeat
     ComMoveXY(unit, e[1], e[2]);
     wait(0$1);
    until IsAt(unit, e[1], e[2]);

    status = 1;
    end;

until IsDead(unit);

End;

{
    DialogStandard 1.0
    D{Sequence}-{Sex}{Class}{Number}-{Number}
    D5a-FSol2-1
}
Export Function Talk(units, type, sequence, sex, class, id, order_id);
var i, unit, tmp, unit_id, dialog_id, sex_id, class_id;
begin
if not units or not sequence or not sex in [sex_male, sex_female, 0] or not id or not order_id then
   exit;

sex_id := '';

case class of
  1: class_id := 'Sol';
  2: class_id := 'Eng';
  3: class_id := 'Mech';
  4: class_id := 'Sci';
end;

tmp := UnitFilter(units, [f_class, class]);

if tmp then
   units := tmp;

if sex then
   begin
   if sex = sex_female then
      sex_id := 'F';

   units := UnitFilter(units, [f_sex, sex]);

   if not units then
      exit;
   end;

unit_id := id;

if unit_id > units then
   unit_id := 1;

if not units[unit_id] then
   exit;

unit := units[unit_id];

dialog_id := 'D' & sequence & '-' & sex_id & class_id & id & '-' & order_id;

case type of
0: Say(unit, dialog_id);
1: SayRadio(unit, dialog_id);
2: ForceSay(unit, dialog_id);
end;

result := unit;
End;

Export Function IsNearbyEntrance(unit, building, distance);
var i, entrance;
begin
result := false;

if not unit or not building or IsInUnit(unit) then
   exit;

if distance < 0 then
   distance := 0;

entrance := GetBuildingHexes(GetBType(building), GetX(building), GetY(building), GetDir(building), GetNation(building), 1); // [ [x1, y1], [x2, y2], [...]]

if not entrance then
   exit;

for i in entrance do
    begin
    if not distance then
       begin
       if IsAt(unit, i[1], i[2]) then
          begin
          result := true;
          exit;
          end;
       end
    else
       begin
       if GetDistUnitXY(unit, i[1], i[2]) <= distance then
          begin
          result := true;
          exit;
          end;
       end;
    end;
End;

Export Function CanSpot(unit, unit2);
var i, building;
begin
result := false;

if not unit or not unit2 or not IsOk(unit) or not IsOk(unit2) then
   exit;

if GetDistUnits(unit, NearestUnitToUnit(FilterAllUnits([[f_enemy, GetSide(unit)], [f_not, [f_type, unit_building]]]), unit)) < 8 then
   exit;

building := IsInUnit(unit2);

if building then
   result := IsNearbyEntrance(unit, building, 2)
else
   result := (GetDistUnits(unit, unit2) < 6 and See(GetSide(unit2), unit));
End;

Export Function CreateNature;
var i, animal, nat_area;
begin

     uc_side = 0;
     uc_nation = 0;

     nat_area := nature_area;

     InitHc;

     // birds
     for i = 1 to 4 do
     begin
     hc_class = 18;
     hc_gallery = '';

     animal := CreateHuman;
     PlaceUnitArea(animal, nat_area, false);
     end;

     // tigers
     {for i = 1 to 3 do
     begin
     hc_class = class_tiger;
     hc_gallery = '';
     hc_agressivity = Rand(-5, 5);

     animal := CreateHuman;
     PlaceUnitArea(animal, nat_area, false);
     end; }

     // apeman
     for i = 1 to 3 do
     begin
     hc_class = class_apeman;
     hc_gallery = '';
     hc_agressivity = 0;
     hc_skills := [rand(1, 3), rand(1, 3), 0, 0];

     animal := CreateHuman;
     PlaceUnitArea(animal, nat_area, false);
     end; 


     // enhidna
     for i = 1 to 3 do
     begin
     hc_class = 13;
     hc_gallery = '';

     animal := CreateHuman;
     PlaceUnitArea(animal, nat_area, false);
     end;

     // fish
     for i = 1 to 3 do
     begin
     hc_class = 20;
     hc_gallery = '';

     animal := CreateHuman;
     PlaceUnitArea(animal, lake_area, false);
     end;
End;