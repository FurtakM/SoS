// export JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Powell ; export others13 ; export Burlak , Masha ; export Gnyevko , Titov , Xavier , Belkov , Lipshchin ; export resources , vehicles ; export AmSciSib ; export spawnBurlak , burlakStatus ; export radationResearched ; export radarOnSpot ; export sibDeposits ; export sibDestroyedCounter ; export arabianAttacksCounter ; export mission_prefix ; export eventVar1 , eventVar2 , eventVar3 , eventVar4 , eventVar5 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// spawnBurlak = 0 ;
  15: LD_ADDR_EXP 27
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// burlakStatus = 0 ;
  23: LD_ADDR_EXP 28
  27: PUSH
  28: LD_INT 0
  30: ST_TO_ADDR
// radarOnSpot = 0 ;
  31: LD_ADDR_EXP 30
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// radationResearched = 0 ;
  39: LD_ADDR_EXP 29
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// sibDestroyedCounter = 0 ;
  47: LD_ADDR_EXP 32
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// sibDeposits = [ [ 91 , 111 ] , [ 23 , 37 ] ] ;
  55: LD_ADDR_EXP 31
  59: PUSH
  60: LD_INT 91
  62: PUSH
  63: LD_INT 111
  65: PUSH
  66: EMPTY
  67: LIST
  68: LIST
  69: PUSH
  70: LD_INT 23
  72: PUSH
  73: LD_INT 37
  75: PUSH
  76: EMPTY
  77: LIST
  78: LIST
  79: PUSH
  80: EMPTY
  81: LIST
  82: LIST
  83: ST_TO_ADDR
// arabianAttacksCounter = 0 ;
  84: LD_ADDR_EXP 33
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// resources = [ ] ;
  92: LD_ADDR_EXP 24
  96: PUSH
  97: EMPTY
  98: ST_TO_ADDR
// vehicles = [ ] ;
  99: LD_ADDR_EXP 25
 103: PUSH
 104: EMPTY
 105: ST_TO_ADDR
// eventVar1 = 0 ;
 106: LD_ADDR_EXP 35
 110: PUSH
 111: LD_INT 0
 113: ST_TO_ADDR
// eventVar2 = 0 ;
 114: LD_ADDR_EXP 36
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// eventVar3 = 0 ;
 122: LD_ADDR_EXP 37
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// eventVar4 = 0 ;
 130: LD_ADDR_EXP 38
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// eventVar5 = 0 ;
 138: LD_ADDR_EXP 39
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// mission_prefix = 13f_ ;
 146: LD_ADDR_EXP 34
 150: PUSH
 151: LD_STRING 13f_
 153: ST_TO_ADDR
// debugMode = 0 ;
 154: LD_ADDR_EXP 40
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// PrepareVehicles ;
 162: CALL 1170 0 0
// PrepareHeroes ;
 166: CALL 496 0 0
// PrepareAmericansRandom ;
 170: CALL 1074 0 0
// PrepareDifficulty ;
 174: CALL 6222 0 0
// end ;
 178: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 179: LD_EXP 40
 183: PUSH
 184: LD_INT 1
 186: EQUAL
 187: IFFALSE 493
 189: GO 191
 191: DISABLE
 192: LD_INT 0
 194: PPUSH
// begin enable ;
 195: ENABLE
// fogoff ( true ) ;
 196: LD_INT 1
 198: PPUSH
 199: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 203: LD_ADDR_VAR 0 1
 207: PUSH
 208: LD_INT 22
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: EMPTY
 215: LIST
 216: LIST
 217: PUSH
 218: LD_INT 21
 220: PUSH
 221: LD_INT 1
 223: PUSH
 224: EMPTY
 225: LIST
 226: LIST
 227: PUSH
 228: EMPTY
 229: LIST
 230: LIST
 231: PPUSH
 232: CALL_OW 69
 236: PUSH
 237: FOR_IN
 238: IFFALSE 254
// SetLives ( i , 1000 ) ;
 240: LD_VAR 0 1
 244: PPUSH
 245: LD_INT 1000
 247: PPUSH
 248: CALL_OW 234
 252: GO 237
 254: POP
 255: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 256: LD_ADDR_VAR 0 1
 260: PUSH
 261: LD_INT 22
 263: PUSH
 264: LD_INT 1
 266: PUSH
 267: EMPTY
 268: LIST
 269: LIST
 270: PUSH
 271: LD_INT 2
 273: PUSH
 274: LD_INT 30
 276: PUSH
 277: LD_INT 0
 279: PUSH
 280: EMPTY
 281: LIST
 282: LIST
 283: PUSH
 284: LD_INT 30
 286: PUSH
 287: LD_INT 1
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PUSH
 294: EMPTY
 295: LIST
 296: LIST
 297: LIST
 298: PUSH
 299: EMPTY
 300: LIST
 301: LIST
 302: PPUSH
 303: CALL_OW 69
 307: PUSH
 308: FOR_IN
 309: IFFALSE 333
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 311: LD_VAR 0 1
 315: PPUSH
 316: CALL_OW 274
 320: PPUSH
 321: LD_INT 1
 323: PPUSH
 324: LD_INT 9999
 326: PPUSH
 327: CALL_OW 277
 331: GO 308
 333: POP
 334: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 335: LD_ADDR_VAR 0 1
 339: PUSH
 340: LD_INT 22
 342: PUSH
 343: LD_INT 1
 345: PUSH
 346: EMPTY
 347: LIST
 348: LIST
 349: PUSH
 350: LD_INT 2
 352: PUSH
 353: LD_INT 30
 355: PUSH
 356: LD_INT 0
 358: PUSH
 359: EMPTY
 360: LIST
 361: LIST
 362: PUSH
 363: LD_INT 30
 365: PUSH
 366: LD_INT 1
 368: PUSH
 369: EMPTY
 370: LIST
 371: LIST
 372: PUSH
 373: EMPTY
 374: LIST
 375: LIST
 376: LIST
 377: PUSH
 378: EMPTY
 379: LIST
 380: LIST
 381: PPUSH
 382: CALL_OW 69
 386: PUSH
 387: FOR_IN
 388: IFFALSE 412
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 390: LD_VAR 0 1
 394: PPUSH
 395: CALL_OW 274
 399: PPUSH
 400: LD_INT 2
 402: PPUSH
 403: LD_INT 9999
 405: PPUSH
 406: CALL_OW 277
 410: GO 387
 412: POP
 413: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 414: LD_ADDR_VAR 0 1
 418: PUSH
 419: LD_INT 22
 421: PUSH
 422: LD_INT 1
 424: PUSH
 425: EMPTY
 426: LIST
 427: LIST
 428: PUSH
 429: LD_INT 2
 431: PUSH
 432: LD_INT 30
 434: PUSH
 435: LD_INT 0
 437: PUSH
 438: EMPTY
 439: LIST
 440: LIST
 441: PUSH
 442: LD_INT 30
 444: PUSH
 445: LD_INT 1
 447: PUSH
 448: EMPTY
 449: LIST
 450: LIST
 451: PUSH
 452: EMPTY
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: LIST
 459: LIST
 460: PPUSH
 461: CALL_OW 69
 465: PUSH
 466: FOR_IN
 467: IFFALSE 491
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 469: LD_VAR 0 1
 473: PPUSH
 474: CALL_OW 274
 478: PPUSH
 479: LD_INT 3
 481: PPUSH
 482: LD_INT 9999
 484: PPUSH
 485: CALL_OW 277
 489: GO 466
 491: POP
 492: POP
// end ; end_of_file
 493: PPOPN 1
 495: END
// export function PrepareHeroes ; var tmp , tmp2 , i ; begin
 496: LD_INT 0
 498: PPUSH
 499: PPUSH
 500: PPUSH
 501: PPUSH
// uc_side = 1 ;
 502: LD_ADDR_OWVAR 20
 506: PUSH
 507: LD_INT 1
 509: ST_TO_ADDR
// JMM = PrepareUnit ( 13c_JMM , true ) ;
 510: LD_ADDR_EXP 1
 514: PUSH
 515: LD_STRING 13c_JMM
 517: PPUSH
 518: LD_INT 1
 520: PPUSH
 521: CALL 5552 0 2
 525: ST_TO_ADDR
// Stevens = PrepareUnit ( 13c_Stevens , true ) ;
 526: LD_ADDR_EXP 2
 530: PUSH
 531: LD_STRING 13c_Stevens
 533: PPUSH
 534: LD_INT 1
 536: PPUSH
 537: CALL 5552 0 2
 541: ST_TO_ADDR
// Lisa = PrepareUnit ( 13c_Lisa , true ) ;
 542: LD_ADDR_EXP 3
 546: PUSH
 547: LD_STRING 13c_Lisa
 549: PPUSH
 550: LD_INT 1
 552: PPUSH
 553: CALL 5552 0 2
 557: ST_TO_ADDR
// Donaldson = PrepareUnit ( 13c_Donaldson , true ) ;
 558: LD_ADDR_EXP 4
 562: PUSH
 563: LD_STRING 13c_Donaldson
 565: PPUSH
 566: LD_INT 1
 568: PPUSH
 569: CALL 5552 0 2
 573: ST_TO_ADDR
// Bobby = PrepareUnit ( 13c_Bobby , true ) ;
 574: LD_ADDR_EXP 5
 578: PUSH
 579: LD_STRING 13c_Bobby
 581: PPUSH
 582: LD_INT 1
 584: PPUSH
 585: CALL 5552 0 2
 589: ST_TO_ADDR
// Cyrus = PrepareUnit ( 13c_Cyrus , true ) ;
 590: LD_ADDR_EXP 6
 594: PUSH
 595: LD_STRING 13c_Cyrus
 597: PPUSH
 598: LD_INT 1
 600: PPUSH
 601: CALL 5552 0 2
 605: ST_TO_ADDR
// Denis = PrepareUnit ( 13c_Denis , true ) ;
 606: LD_ADDR_EXP 7
 610: PUSH
 611: LD_STRING 13c_Denis
 613: PPUSH
 614: LD_INT 1
 616: PPUSH
 617: CALL 5552 0 2
 621: ST_TO_ADDR
// Brown = PrepareUnit ( 13c_Brown , true ) ;
 622: LD_ADDR_EXP 8
 626: PUSH
 627: LD_STRING 13c_Brown
 629: PPUSH
 630: LD_INT 1
 632: PPUSH
 633: CALL 5552 0 2
 637: ST_TO_ADDR
// Gladstone = PrepareUnit ( 13c_Gladstone , true ) ;
 638: LD_ADDR_EXP 9
 642: PUSH
 643: LD_STRING 13c_Gladstone
 645: PPUSH
 646: LD_INT 1
 648: PPUSH
 649: CALL 5552 0 2
 653: ST_TO_ADDR
// Houten = PrepareUnit ( 13c_Houten , true ) ;
 654: LD_ADDR_EXP 10
 658: PUSH
 659: LD_STRING 13c_Houten
 661: PPUSH
 662: LD_INT 1
 664: PPUSH
 665: CALL 5552 0 2
 669: ST_TO_ADDR
// Cornel = PrepareUnit ( 13c_Cornel , true ) ;
 670: LD_ADDR_EXP 11
 674: PUSH
 675: LD_STRING 13c_Cornel
 677: PPUSH
 678: LD_INT 1
 680: PPUSH
 681: CALL 5552 0 2
 685: ST_TO_ADDR
// Gary = PrepareUnit ( 13c_Gary , true ) ;
 686: LD_ADDR_EXP 12
 690: PUSH
 691: LD_STRING 13c_Gary
 693: PPUSH
 694: LD_INT 1
 696: PPUSH
 697: CALL 5552 0 2
 701: ST_TO_ADDR
// Frank = PrepareUnit ( 13c_Frank , true ) ;
 702: LD_ADDR_EXP 13
 706: PUSH
 707: LD_STRING 13c_Frank
 709: PPUSH
 710: LD_INT 1
 712: PPUSH
 713: CALL 5552 0 2
 717: ST_TO_ADDR
// Kikuchi = PrepareUnit ( 13c_Kikuchi , true ) ;
 718: LD_ADDR_EXP 14
 722: PUSH
 723: LD_STRING 13c_Kikuchi
 725: PPUSH
 726: LD_INT 1
 728: PPUSH
 729: CALL 5552 0 2
 733: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 734: LD_ADDR_EXP 15
 738: PUSH
 739: LD_STRING Powell
 741: PPUSH
 742: LD_INT 0
 744: PPUSH
 745: CALL 5552 0 2
 749: ST_TO_ADDR
// tmp := [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
 750: LD_ADDR_VAR 0 2
 754: PUSH
 755: LD_EXP 1
 759: PUSH
 760: LD_EXP 2
 764: PUSH
 765: LD_EXP 3
 769: PUSH
 770: LD_EXP 4
 774: PUSH
 775: LD_EXP 5
 779: PUSH
 780: LD_EXP 6
 784: PUSH
 785: LD_EXP 7
 789: PUSH
 790: LD_EXP 8
 794: PUSH
 795: LD_EXP 9
 799: PUSH
 800: LD_EXP 10
 804: PUSH
 805: LD_EXP 11
 809: PUSH
 810: LD_EXP 12
 814: PUSH
 815: LD_EXP 13
 819: PUSH
 820: LD_EXP 14
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: LIST
 829: LIST
 830: LIST
 831: LIST
 832: LIST
 833: LIST
 834: LIST
 835: LIST
 836: LIST
 837: LIST
 838: LIST
 839: LIST
 840: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_manual ] , [ f_type , unit_vehicle ] ] ) ;
 841: LD_ADDR_VAR 0 3
 845: PUSH
 846: LD_INT 22
 848: PUSH
 849: LD_INT 1
 851: PUSH
 852: EMPTY
 853: LIST
 854: LIST
 855: PUSH
 856: LD_INT 33
 858: PUSH
 859: LD_INT 1
 861: PUSH
 862: EMPTY
 863: LIST
 864: LIST
 865: PUSH
 866: LD_INT 21
 868: PUSH
 869: LD_INT 2
 871: PUSH
 872: EMPTY
 873: LIST
 874: LIST
 875: PUSH
 876: EMPTY
 877: LIST
 878: LIST
 879: LIST
 880: PPUSH
 881: CALL_OW 69
 885: ST_TO_ADDR
// for i = tmp downto 1 do
 886: LD_ADDR_VAR 0 4
 890: PUSH
 891: DOUBLE
 892: LD_VAR 0 2
 896: INC
 897: ST_TO_ADDR
 898: LD_INT 1
 900: PUSH
 901: FOR_DOWNTO
 902: IFFALSE 939
// if not tmp [ i ] then
 904: LD_VAR 0 2
 908: PUSH
 909: LD_VAR 0 4
 913: ARRAY
 914: NOT
 915: IFFALSE 937
// tmp := Delete ( tmp , i ) ;
 917: LD_ADDR_VAR 0 2
 921: PUSH
 922: LD_VAR 0 2
 926: PPUSH
 927: LD_VAR 0 4
 931: PPUSH
 932: CALL_OW 3
 936: ST_TO_ADDR
 937: GO 901
 939: POP
 940: POP
// for i = 1 to tmp do
 941: LD_ADDR_VAR 0 4
 945: PUSH
 946: DOUBLE
 947: LD_INT 1
 949: DEC
 950: ST_TO_ADDR
 951: LD_VAR 0 2
 955: PUSH
 956: FOR_TO
 957: IFFALSE 987
// PlaceHumanInUnit ( tmp [ i ] , tmp2 [ i ] ) ;
 959: LD_VAR 0 2
 963: PUSH
 964: LD_VAR 0 4
 968: ARRAY
 969: PPUSH
 970: LD_VAR 0 3
 974: PUSH
 975: LD_VAR 0 4
 979: ARRAY
 980: PPUSH
 981: CALL_OW 52
 985: GO 956
 987: POP
 988: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) = 0 then
 989: LD_INT 22
 991: PUSH
 992: LD_INT 1
 994: PUSH
 995: EMPTY
 996: LIST
 997: LIST
 998: PUSH
 999: LD_INT 25
1001: PUSH
1002: LD_INT 2
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: PUSH
1009: EMPTY
1010: LIST
1011: LIST
1012: PPUSH
1013: CALL_OW 69
1017: PUSH
1018: LD_INT 0
1020: EQUAL
1021: PUSH
1022: LD_INT 22
1024: PUSH
1025: LD_INT 1
1027: PUSH
1028: EMPTY
1029: LIST
1030: LIST
1031: PUSH
1032: LD_INT 34
1034: PUSH
1035: LD_INT 13
1037: PUSH
1038: EMPTY
1039: LIST
1040: LIST
1041: PUSH
1042: EMPTY
1043: LIST
1044: LIST
1045: PPUSH
1046: CALL_OW 69
1050: PUSH
1051: LD_INT 0
1053: EQUAL
1054: AND
1055: IFFALSE 1069
// SetClass ( JMM , 2 ) ;
1057: LD_EXP 1
1061: PPUSH
1062: LD_INT 2
1064: PPUSH
1065: CALL_OW 336
// end ;
1069: LD_VAR 0 1
1073: RET
// export function PrepareAmericansRandom ; var i ; begin
1074: LD_INT 0
1076: PPUSH
1077: PPUSH
// uc_side = 1 ;
1078: LD_ADDR_OWVAR 20
1082: PUSH
1083: LD_INT 1
1085: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13c_others ) ;
1086: LD_ADDR_EXP 16
1090: PUSH
1091: LD_STRING 13c_others
1093: PPUSH
1094: CALL_OW 31
1098: ST_TO_ADDR
// for i in others13 do
1099: LD_ADDR_VAR 0 2
1103: PUSH
1104: LD_EXP 16
1108: PUSH
1109: FOR_IN
1110: IFFALSE 1163
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1112: LD_VAR 0 2
1116: PPUSH
1117: LD_INT 22
1119: PUSH
1120: LD_INT 1
1122: PUSH
1123: EMPTY
1124: LIST
1125: LIST
1126: PUSH
1127: LD_INT 21
1129: PUSH
1130: LD_INT 2
1132: PUSH
1133: EMPTY
1134: LIST
1135: LIST
1136: PUSH
1137: LD_INT 58
1139: PUSH
1140: EMPTY
1141: LIST
1142: PUSH
1143: EMPTY
1144: LIST
1145: LIST
1146: LIST
1147: PPUSH
1148: CALL_OW 69
1152: PUSH
1153: LD_INT 1
1155: ARRAY
1156: PPUSH
1157: CALL_OW 52
1161: GO 1109
1163: POP
1164: POP
// end ;
1165: LD_VAR 0 1
1169: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1170: LD_INT 0
1172: PPUSH
1173: PPUSH
1174: PPUSH
1175: PPUSH
1176: PPUSH
1177: PPUSH
// vehicles = LoadVariable ( 13_VehiclesIn13_1 , [ ] ) ;
1178: LD_ADDR_VAR 0 5
1182: PUSH
1183: LD_STRING 13_VehiclesIn13_1
1185: PPUSH
1186: EMPTY
1187: PPUSH
1188: CALL_OW 30
1192: ST_TO_ADDR
// resources = LoadVariable ( 13_ResourcesInCargo13_1 , [ ] ) ;
1193: LD_ADDR_EXP 24
1197: PUSH
1198: LD_STRING 13_ResourcesInCargo13_1
1200: PPUSH
1201: EMPTY
1202: PPUSH
1203: CALL_OW 30
1207: ST_TO_ADDR
// cargoList = [ ] ;
1208: LD_ADDR_VAR 0 6
1212: PUSH
1213: EMPTY
1214: ST_TO_ADDR
// uc_side = 1 ;
1215: LD_ADDR_OWVAR 20
1219: PUSH
1220: LD_INT 1
1222: ST_TO_ADDR
// if vehicles > 0 then
1223: LD_VAR 0 5
1227: PUSH
1228: LD_INT 0
1230: GREATER
1231: IFFALSE 1586
// begin for i := 1 to vehicles do
1233: LD_ADDR_VAR 0 2
1237: PUSH
1238: DOUBLE
1239: LD_INT 1
1241: DEC
1242: ST_TO_ADDR
1243: LD_VAR 0 5
1247: PUSH
1248: FOR_TO
1249: IFFALSE 1398
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1251: LD_ADDR_OWVAR 21
1255: PUSH
1256: LD_VAR 0 5
1260: PUSH
1261: LD_VAR 0 2
1265: ARRAY
1266: PUSH
1267: LD_INT 1
1269: ARRAY
1270: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1271: LD_ADDR_OWVAR 37
1275: PUSH
1276: LD_VAR 0 5
1280: PUSH
1281: LD_VAR 0 2
1285: ARRAY
1286: PUSH
1287: LD_INT 2
1289: ARRAY
1290: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1291: LD_ADDR_OWVAR 39
1295: PUSH
1296: LD_VAR 0 5
1300: PUSH
1301: LD_VAR 0 2
1305: ARRAY
1306: PUSH
1307: LD_INT 3
1309: ARRAY
1310: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1311: LD_ADDR_OWVAR 38
1315: PUSH
1316: LD_VAR 0 5
1320: PUSH
1321: LD_VAR 0 2
1325: ARRAY
1326: PUSH
1327: LD_INT 4
1329: ARRAY
1330: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1331: LD_ADDR_OWVAR 40
1335: PUSH
1336: LD_VAR 0 5
1340: PUSH
1341: LD_VAR 0 2
1345: ARRAY
1346: PUSH
1347: LD_INT 5
1349: ARRAY
1350: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1351: LD_ADDR_OWVAR 41
1355: PUSH
1356: LD_INT 40
1358: ST_TO_ADDR
// veh = CreateVehicle ;
1359: LD_ADDR_VAR 0 4
1363: PUSH
1364: CALL_OW 45
1368: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1369: LD_VAR 0 4
1373: PPUSH
1374: LD_INT 3
1376: PPUSH
1377: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1381: LD_VAR 0 4
1385: PPUSH
1386: LD_INT 2
1388: PPUSH
1389: LD_INT 0
1391: PPUSH
1392: CALL_OW 49
// end ;
1396: GO 1248
1398: POP
1399: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1400: LD_ADDR_VAR 0 6
1404: PUSH
1405: LD_INT 22
1407: PUSH
1408: LD_INT 1
1410: PUSH
1411: EMPTY
1412: LIST
1413: LIST
1414: PUSH
1415: LD_INT 21
1417: PUSH
1418: LD_INT 2
1420: PUSH
1421: EMPTY
1422: LIST
1423: LIST
1424: PUSH
1425: LD_INT 34
1427: PUSH
1428: LD_INT 12
1430: PUSH
1431: EMPTY
1432: LIST
1433: LIST
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: LIST
1439: PPUSH
1440: CALL_OW 69
1444: ST_TO_ADDR
// if cargoList > 0 then
1445: LD_VAR 0 6
1449: PUSH
1450: LD_INT 0
1452: GREATER
1453: IFFALSE 1586
// for i = 1 to cargoList do
1455: LD_ADDR_VAR 0 2
1459: PUSH
1460: DOUBLE
1461: LD_INT 1
1463: DEC
1464: ST_TO_ADDR
1465: LD_VAR 0 6
1469: PUSH
1470: FOR_TO
1471: IFFALSE 1584
// begin if resources > 0 then
1473: LD_EXP 24
1477: PUSH
1478: LD_INT 0
1480: GREATER
1481: IFFALSE 1582
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1483: LD_VAR 0 6
1487: PUSH
1488: LD_VAR 0 2
1492: ARRAY
1493: PPUSH
1494: LD_INT 1
1496: PPUSH
1497: LD_EXP 24
1501: PUSH
1502: LD_VAR 0 2
1506: ARRAY
1507: PUSH
1508: LD_INT 1
1510: ARRAY
1511: PPUSH
1512: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1516: LD_VAR 0 6
1520: PUSH
1521: LD_VAR 0 2
1525: ARRAY
1526: PPUSH
1527: LD_INT 2
1529: PPUSH
1530: LD_EXP 24
1534: PUSH
1535: LD_VAR 0 2
1539: ARRAY
1540: PUSH
1541: LD_INT 2
1543: ARRAY
1544: PPUSH
1545: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1549: LD_VAR 0 6
1553: PUSH
1554: LD_VAR 0 2
1558: ARRAY
1559: PPUSH
1560: LD_INT 3
1562: PPUSH
1563: LD_EXP 24
1567: PUSH
1568: LD_VAR 0 2
1572: ARRAY
1573: PUSH
1574: LD_INT 3
1576: ARRAY
1577: PPUSH
1578: CALL_OW 291
// end ; end ;
1582: GO 1470
1584: POP
1585: POP
// end ; end ;
1586: LD_VAR 0 1
1590: RET
// export function PowellSupport ; var i , veh , un ; begin
1591: LD_INT 0
1593: PPUSH
1594: PPUSH
1595: PPUSH
1596: PPUSH
// for i = 1 to 3 do
1597: LD_ADDR_VAR 0 2
1601: PUSH
1602: DOUBLE
1603: LD_INT 1
1605: DEC
1606: ST_TO_ADDR
1607: LD_INT 3
1609: PUSH
1610: FOR_TO
1611: IFFALSE 1812
// begin uc_nation = 1 ;
1613: LD_ADDR_OWVAR 21
1617: PUSH
1618: LD_INT 1
1620: ST_TO_ADDR
// uc_side = 1 ;
1621: LD_ADDR_OWVAR 20
1625: PUSH
1626: LD_INT 1
1628: ST_TO_ADDR
// vc_engine = 3 ;
1629: LD_ADDR_OWVAR 39
1633: PUSH
1634: LD_INT 3
1636: ST_TO_ADDR
// vc_control = 1 ;
1637: LD_ADDR_OWVAR 38
1641: PUSH
1642: LD_INT 1
1644: ST_TO_ADDR
// vc_weapon = [ 9 , 5 , 4 , 7 , 6 ] [ Rand ( 1 , 5 ) ] ;
1645: LD_ADDR_OWVAR 40
1649: PUSH
1650: LD_INT 9
1652: PUSH
1653: LD_INT 5
1655: PUSH
1656: LD_INT 4
1658: PUSH
1659: LD_INT 7
1661: PUSH
1662: LD_INT 6
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: PUSH
1672: LD_INT 1
1674: PPUSH
1675: LD_INT 5
1677: PPUSH
1678: CALL_OW 12
1682: ARRAY
1683: ST_TO_ADDR
// if vc_weapon = 6 then
1684: LD_OWVAR 40
1688: PUSH
1689: LD_INT 6
1691: EQUAL
1692: IFFALSE 1704
// vc_chassis = 4 else
1694: LD_ADDR_OWVAR 37
1698: PUSH
1699: LD_INT 4
1701: ST_TO_ADDR
1702: GO 1712
// vc_chassis = 3 ;
1704: LD_ADDR_OWVAR 37
1708: PUSH
1709: LD_INT 3
1711: ST_TO_ADDR
// veh = CreateVehicle ;
1712: LD_ADDR_VAR 0 3
1716: PUSH
1717: CALL_OW 45
1721: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1722: LD_VAR 0 3
1726: PPUSH
1727: LD_INT 2
1729: PPUSH
1730: LD_INT 0
1732: PPUSH
1733: CALL_OW 49
// SetDir ( veh , 1 ) ;
1737: LD_VAR 0 3
1741: PPUSH
1742: LD_INT 1
1744: PPUSH
1745: CALL_OW 233
// hc_gallery =  ;
1749: LD_ADDR_OWVAR 33
1753: PUSH
1754: LD_STRING 
1756: ST_TO_ADDR
// hc_name =  ;
1757: LD_ADDR_OWVAR 26
1761: PUSH
1762: LD_STRING 
1764: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( 7 , 10 ) ) ;
1765: LD_INT 0
1767: PPUSH
1768: LD_INT 3
1770: PPUSH
1771: LD_INT 7
1773: PPUSH
1774: LD_INT 10
1776: PPUSH
1777: CALL_OW 12
1781: PPUSH
1782: CALL_OW 380
// un = CreateHuman ;
1786: LD_ADDR_VAR 0 4
1790: PUSH
1791: CALL_OW 44
1795: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1796: LD_VAR 0 4
1800: PPUSH
1801: LD_VAR 0 3
1805: PPUSH
1806: CALL_OW 52
// end ;
1810: GO 1610
1812: POP
1813: POP
// end ; end_of_file
1814: LD_VAR 0 1
1818: RET
// export function PrepareBurlak ; begin
1819: LD_INT 0
1821: PPUSH
// uc_side = 7 ;
1822: LD_ADDR_OWVAR 20
1826: PUSH
1827: LD_INT 7
1829: ST_TO_ADDR
// uc_nation = 3 ;
1830: LD_ADDR_OWVAR 21
1834: PUSH
1835: LD_INT 3
1837: ST_TO_ADDR
// vc_engine = 3 ;
1838: LD_ADDR_OWVAR 39
1842: PUSH
1843: LD_INT 3
1845: ST_TO_ADDR
// vc_control = 1 ;
1846: LD_ADDR_OWVAR 38
1850: PUSH
1851: LD_INT 1
1853: ST_TO_ADDR
// vc_weapon = 46 ;
1854: LD_ADDR_OWVAR 40
1858: PUSH
1859: LD_INT 46
1861: ST_TO_ADDR
// vc_chassis = 24 ;
1862: LD_ADDR_OWVAR 37
1866: PUSH
1867: LD_INT 24
1869: ST_TO_ADDR
// Masha = CreateVehicle ;
1870: LD_ADDR_EXP 18
1874: PUSH
1875: CALL_OW 45
1879: ST_TO_ADDR
// PlaceUnitArea ( Masha , GorkySpawn , false ) ;
1880: LD_EXP 18
1884: PPUSH
1885: LD_INT 3
1887: PPUSH
1888: LD_INT 0
1890: PPUSH
1891: CALL_OW 49
// SetMark ( Masha , 1 ) ;
1895: LD_EXP 18
1899: PPUSH
1900: LD_INT 1
1902: PPUSH
1903: CALL_OW 242
// Burlak = PrepareUnit ( Burlak , false ) ;
1907: LD_ADDR_EXP 17
1911: PUSH
1912: LD_STRING Burlak
1914: PPUSH
1915: LD_INT 0
1917: PPUSH
1918: CALL 5552 0 2
1922: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , Masha ) ;
1923: LD_EXP 17
1927: PPUSH
1928: LD_EXP 18
1932: PPUSH
1933: CALL_OW 52
// ComAgressiveMove ( Masha , 107 , 118 ) ;
1937: LD_EXP 18
1941: PPUSH
1942: LD_INT 107
1944: PPUSH
1945: LD_INT 118
1947: PPUSH
1948: CALL_OW 114
// spawnBurlak = 1 ;
1952: LD_ADDR_EXP 27
1956: PUSH
1957: LD_INT 1
1959: ST_TO_ADDR
// end ;
1960: LD_VAR 0 1
1964: RET
// export function BurlakArmy ; var i , veh , tmp ; begin
1965: LD_INT 0
1967: PPUSH
1968: PPUSH
1969: PPUSH
1970: PPUSH
// uc_side = 7 ;
1971: LD_ADDR_OWVAR 20
1975: PUSH
1976: LD_INT 7
1978: ST_TO_ADDR
// uc_nation = 3 ;
1979: LD_ADDR_OWVAR 21
1983: PUSH
1984: LD_INT 3
1986: ST_TO_ADDR
// Gnyevko = PrepareUnit ( Gnyevko , false ) ;
1987: LD_ADDR_EXP 19
1991: PUSH
1992: LD_STRING Gnyevko
1994: PPUSH
1995: LD_INT 0
1997: PPUSH
1998: CALL 5552 0 2
2002: ST_TO_ADDR
// Titov = PrepareUnit ( Titov , false ) ;
2003: LD_ADDR_EXP 20
2007: PUSH
2008: LD_STRING Titov
2010: PPUSH
2011: LD_INT 0
2013: PPUSH
2014: CALL 5552 0 2
2018: ST_TO_ADDR
// Xavier = PrepareUnit ( Xavier2 , false ) ;
2019: LD_ADDR_EXP 21
2023: PUSH
2024: LD_STRING Xavier2
2026: PPUSH
2027: LD_INT 0
2029: PPUSH
2030: CALL 5552 0 2
2034: ST_TO_ADDR
// Belkov = PrepareUnit ( Belkov , false ) ;
2035: LD_ADDR_EXP 22
2039: PUSH
2040: LD_STRING Belkov
2042: PPUSH
2043: LD_INT 0
2045: PPUSH
2046: CALL 5552 0 2
2050: ST_TO_ADDR
// Lipshchin = PrepareUnit ( Lipshchin , false ) ;
2051: LD_ADDR_EXP 23
2055: PUSH
2056: LD_STRING Lipshchin
2058: PPUSH
2059: LD_INT 0
2061: PPUSH
2062: CALL 5552 0 2
2066: ST_TO_ADDR
// for i = 1 to 5 do
2067: LD_ADDR_VAR 0 2
2071: PUSH
2072: DOUBLE
2073: LD_INT 1
2075: DEC
2076: ST_TO_ADDR
2077: LD_INT 5
2079: PUSH
2080: FOR_TO
2081: IFFALSE 2169
// begin vc_engine = 3 ;
2083: LD_ADDR_OWVAR 39
2087: PUSH
2088: LD_INT 3
2090: ST_TO_ADDR
// vc_control = 1 ;
2091: LD_ADDR_OWVAR 38
2095: PUSH
2096: LD_INT 1
2098: ST_TO_ADDR
// vc_weapon = [ 43 , 44 , 45 , 49 ] [ Rand ( 1 , 4 ) ] ;
2099: LD_ADDR_OWVAR 40
2103: PUSH
2104: LD_INT 43
2106: PUSH
2107: LD_INT 44
2109: PUSH
2110: LD_INT 45
2112: PUSH
2113: LD_INT 49
2115: PUSH
2116: EMPTY
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: PUSH
2122: LD_INT 1
2124: PPUSH
2125: LD_INT 4
2127: PPUSH
2128: CALL_OW 12
2132: ARRAY
2133: ST_TO_ADDR
// vc_chassis = 22 ;
2134: LD_ADDR_OWVAR 37
2138: PUSH
2139: LD_INT 22
2141: ST_TO_ADDR
// veh = CreateVehicle ;
2142: LD_ADDR_VAR 0 3
2146: PUSH
2147: CALL_OW 45
2151: ST_TO_ADDR
// PlaceUnitArea ( veh , GorkySpawn , false ) ;
2152: LD_VAR 0 3
2156: PPUSH
2157: LD_INT 3
2159: PPUSH
2160: LD_INT 0
2162: PPUSH
2163: CALL_OW 49
// end ;
2167: GO 2080
2169: POP
2170: POP
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2171: LD_ADDR_VAR 0 4
2175: PUSH
2176: LD_INT 22
2178: PUSH
2179: LD_INT 7
2181: PUSH
2182: EMPTY
2183: LIST
2184: LIST
2185: PUSH
2186: LD_INT 21
2188: PUSH
2189: LD_INT 2
2191: PUSH
2192: EMPTY
2193: LIST
2194: LIST
2195: PUSH
2196: LD_INT 58
2198: PUSH
2199: EMPTY
2200: LIST
2201: PUSH
2202: EMPTY
2203: LIST
2204: LIST
2205: LIST
2206: PPUSH
2207: CALL_OW 69
2211: ST_TO_ADDR
// PlaceHumanInUnit ( Gnyevko , tmp [ 1 ] ) ;
2212: LD_EXP 19
2216: PPUSH
2217: LD_VAR 0 4
2221: PUSH
2222: LD_INT 1
2224: ARRAY
2225: PPUSH
2226: CALL_OW 52
// PlaceHumanInUnit ( Titov , tmp [ 2 ] ) ;
2230: LD_EXP 20
2234: PPUSH
2235: LD_VAR 0 4
2239: PUSH
2240: LD_INT 2
2242: ARRAY
2243: PPUSH
2244: CALL_OW 52
// PlaceHumanInUnit ( Xavier , tmp [ 3 ] ) ;
2248: LD_EXP 21
2252: PPUSH
2253: LD_VAR 0 4
2257: PUSH
2258: LD_INT 3
2260: ARRAY
2261: PPUSH
2262: CALL_OW 52
// PlaceHumanInUnit ( Belkov , tmp [ 4 ] ) ;
2266: LD_EXP 22
2270: PPUSH
2271: LD_VAR 0 4
2275: PUSH
2276: LD_INT 4
2278: ARRAY
2279: PPUSH
2280: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , tmp [ 5 ] ) ;
2284: LD_EXP 23
2288: PPUSH
2289: LD_VAR 0 4
2293: PUSH
2294: LD_INT 5
2296: ARRAY
2297: PPUSH
2298: CALL_OW 52
// SetClass ( Gnyevko , 3 ) ;
2302: LD_EXP 19
2306: PPUSH
2307: LD_INT 3
2309: PPUSH
2310: CALL_OW 336
// SetClass ( [ Titov , Lipshchin ] , 9 ) ;
2314: LD_EXP 20
2318: PUSH
2319: LD_EXP 23
2323: PUSH
2324: EMPTY
2325: LIST
2326: LIST
2327: PPUSH
2328: LD_INT 9
2330: PPUSH
2331: CALL_OW 336
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
2335: LD_ADDR_VAR 0 4
2339: PUSH
2340: LD_INT 22
2342: PUSH
2343: LD_INT 7
2345: PUSH
2346: EMPTY
2347: LIST
2348: LIST
2349: PPUSH
2350: CALL_OW 69
2354: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2355: LD_VAR 0 4
2359: PPUSH
2360: LD_INT 107
2362: PPUSH
2363: LD_INT 118
2365: PPUSH
2366: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
2370: LD_INT 35
2372: PPUSH
2373: CALL_OW 67
// ComMoveUnit ( UnitFilter ( tmp , [ f_weapon , 49 ] ) , Masha ) ;
2377: LD_VAR 0 4
2381: PPUSH
2382: LD_INT 34
2384: PUSH
2385: LD_INT 49
2387: PUSH
2388: EMPTY
2389: LIST
2390: LIST
2391: PPUSH
2392: CALL_OW 72
2396: PPUSH
2397: LD_EXP 18
2401: PPUSH
2402: CALL_OW 112
// ComAgressiveMove ( UnitFilter ( tmp , [ f_not , [ f_weapon , 49 ] ] ) , 107 , 118 ) ;
2406: LD_VAR 0 4
2410: PPUSH
2411: LD_INT 3
2413: PUSH
2414: LD_INT 34
2416: PUSH
2417: LD_INT 49
2419: PUSH
2420: EMPTY
2421: LIST
2422: LIST
2423: PUSH
2424: EMPTY
2425: LIST
2426: LIST
2427: PPUSH
2428: CALL_OW 72
2432: PPUSH
2433: LD_INT 107
2435: PPUSH
2436: LD_INT 118
2438: PPUSH
2439: CALL_OW 114
// until UnitFilter ( tmp , [ f_weapon , 49 ] ) = 0 or IsDying ( Masha ) ;
2443: LD_VAR 0 4
2447: PPUSH
2448: LD_INT 34
2450: PUSH
2451: LD_INT 49
2453: PUSH
2454: EMPTY
2455: LIST
2456: LIST
2457: PPUSH
2458: CALL_OW 72
2462: PUSH
2463: LD_INT 0
2465: EQUAL
2466: PUSH
2467: LD_EXP 18
2471: PPUSH
2472: CALL_OW 303
2476: OR
2477: IFFALSE 2370
// repeat wait ( 0 0$1 ) ;
2479: LD_INT 35
2481: PPUSH
2482: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 7 ] ) diff Burlak ;
2486: LD_ADDR_VAR 0 4
2490: PUSH
2491: LD_INT 22
2493: PUSH
2494: LD_INT 7
2496: PUSH
2497: EMPTY
2498: LIST
2499: LIST
2500: PPUSH
2501: CALL_OW 69
2505: PUSH
2506: LD_EXP 17
2510: DIFF
2511: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2512: LD_VAR 0 4
2516: PPUSH
2517: LD_INT 107
2519: PPUSH
2520: LD_INT 118
2522: PPUSH
2523: CALL_OW 114
// if IsOk ( Burlak ) and not IsInUnit ( Burlak ) then
2527: LD_EXP 17
2531: PPUSH
2532: CALL_OW 302
2536: PUSH
2537: LD_EXP 17
2541: PPUSH
2542: CALL_OW 310
2546: NOT
2547: AND
2548: IFFALSE 2565
// ComMoveXY ( Burlak , 107 , 118 ) ;
2550: LD_EXP 17
2554: PPUSH
2555: LD_INT 107
2557: PPUSH
2558: LD_INT 118
2560: PPUSH
2561: CALL_OW 111
// until not tmp ;
2565: LD_VAR 0 4
2569: NOT
2570: IFFALSE 2479
// end ; end_of_file
2572: LD_VAR 0 1
2576: RET
// every 15 15$0 trigger sibDeposits do var un , rnd ;
2577: LD_EXP 31
2581: IFFALSE 2757
2583: GO 2585
2585: DISABLE
2586: LD_INT 0
2588: PPUSH
2589: PPUSH
// begin enable ;
2590: ENABLE
// rnd = 0 ;
2591: LD_ADDR_VAR 0 2
2595: PUSH
2596: LD_INT 0
2598: ST_TO_ADDR
// uc_side = 8 ;
2599: LD_ADDR_OWVAR 20
2603: PUSH
2604: LD_INT 8
2606: ST_TO_ADDR
// uc_nation = 2 ;
2607: LD_ADDR_OWVAR 21
2611: PUSH
2612: LD_INT 2
2614: ST_TO_ADDR
// hc_name =  ;
2615: LD_ADDR_OWVAR 26
2619: PUSH
2620: LD_STRING 
2622: ST_TO_ADDR
// hc_gallery =  ;
2623: LD_ADDR_OWVAR 33
2627: PUSH
2628: LD_STRING 
2630: ST_TO_ADDR
// PrepareHuman ( false , 4 , 10 ) ;
2631: LD_INT 0
2633: PPUSH
2634: LD_INT 4
2636: PPUSH
2637: LD_INT 10
2639: PPUSH
2640: CALL_OW 380
// un = CreateHuman ;
2644: LD_ADDR_VAR 0 1
2648: PUSH
2649: CALL_OW 44
2653: ST_TO_ADDR
// PlaceUnitArea ( un , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
2654: LD_VAR 0 1
2658: PPUSH
2659: LD_INT 8
2661: PUSH
2662: LD_INT 9
2664: PUSH
2665: EMPTY
2666: LIST
2667: LIST
2668: PUSH
2669: LD_INT 1
2671: PPUSH
2672: LD_INT 2
2674: PPUSH
2675: CALL_OW 12
2679: ARRAY
2680: PPUSH
2681: LD_INT 0
2683: PPUSH
2684: CALL_OW 49
// SetTag ( un , 1 ) ;
2688: LD_VAR 0 1
2692: PPUSH
2693: LD_INT 1
2695: PPUSH
2696: CALL_OW 109
// rnd = Rand ( 1 , sibDeposits ) ;
2700: LD_ADDR_VAR 0 2
2704: PUSH
2705: LD_INT 1
2707: PPUSH
2708: LD_EXP 31
2712: PPUSH
2713: CALL_OW 12
2717: ST_TO_ADDR
// ComContaminate ( un , sibDeposits [ rnd ] [ 1 ] , sibDeposits [ rnd ] [ 2 ] ) ;
2718: LD_VAR 0 1
2722: PPUSH
2723: LD_EXP 31
2727: PUSH
2728: LD_VAR 0 2
2732: ARRAY
2733: PUSH
2734: LD_INT 1
2736: ARRAY
2737: PPUSH
2738: LD_EXP 31
2742: PUSH
2743: LD_VAR 0 2
2747: ARRAY
2748: PUSH
2749: LD_INT 2
2751: ARRAY
2752: PPUSH
2753: CALL_OW 158
// end ;
2757: PPOPN 2
2759: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_control , control_remote ] ] ) do var i ;
2760: LD_INT 22
2762: PUSH
2763: LD_INT 8
2765: PUSH
2766: EMPTY
2767: LIST
2768: LIST
2769: PUSH
2770: LD_INT 3
2772: PUSH
2773: LD_INT 61
2775: PUSH
2776: EMPTY
2777: LIST
2778: PUSH
2779: EMPTY
2780: LIST
2781: LIST
2782: PUSH
2783: LD_INT 33
2785: PUSH
2786: LD_INT 2
2788: PUSH
2789: EMPTY
2790: LIST
2791: LIST
2792: PUSH
2793: EMPTY
2794: LIST
2795: LIST
2796: LIST
2797: PPUSH
2798: CALL_OW 69
2802: IFFALSE 2875
2804: GO 2806
2806: DISABLE
2807: LD_INT 0
2809: PPUSH
// begin enable ;
2810: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_control , control_remote ] ] ) do
2811: LD_ADDR_VAR 0 1
2815: PUSH
2816: LD_INT 22
2818: PUSH
2819: LD_INT 8
2821: PUSH
2822: EMPTY
2823: LIST
2824: LIST
2825: PUSH
2826: LD_INT 3
2828: PUSH
2829: LD_INT 61
2831: PUSH
2832: EMPTY
2833: LIST
2834: PUSH
2835: EMPTY
2836: LIST
2837: LIST
2838: PUSH
2839: LD_INT 33
2841: PUSH
2842: LD_INT 2
2844: PUSH
2845: EMPTY
2846: LIST
2847: LIST
2848: PUSH
2849: EMPTY
2850: LIST
2851: LIST
2852: LIST
2853: PPUSH
2854: CALL_OW 69
2858: PUSH
2859: FOR_IN
2860: IFFALSE 2873
// Connect ( i ) ;
2862: LD_VAR 0 1
2866: PPUSH
2867: CALL 5667 0 1
2871: GO 2859
2873: POP
2874: POP
// end ; end_of_file
2875: PPOPN 1
2877: END
// every 1 do
2878: GO 2880
2880: DISABLE
// begin InGameOn ;
2881: CALL_OW 8
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
2885: LD_INT 22
2887: PUSH
2888: LD_INT 1
2890: PUSH
2891: EMPTY
2892: LIST
2893: LIST
2894: PUSH
2895: LD_INT 21
2897: PUSH
2898: LD_INT 2
2900: PUSH
2901: EMPTY
2902: LIST
2903: LIST
2904: PUSH
2905: EMPTY
2906: LIST
2907: LIST
2908: PPUSH
2909: CALL_OW 69
2913: PUSH
2914: LD_INT 1
2916: ARRAY
2917: PPUSH
2918: CALL_OW 87
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 69 , 94 ) ;
2922: LD_INT 22
2924: PUSH
2925: LD_INT 1
2927: PUSH
2928: EMPTY
2929: LIST
2930: LIST
2931: PUSH
2932: LD_INT 21
2934: PUSH
2935: LD_INT 2
2937: PUSH
2938: EMPTY
2939: LIST
2940: LIST
2941: PUSH
2942: EMPTY
2943: LIST
2944: LIST
2945: PPUSH
2946: CALL_OW 69
2950: PPUSH
2951: LD_INT 69
2953: PPUSH
2954: LD_INT 94
2956: PPUSH
2957: CALL_OW 111
// Say ( JMM , D2-JMM-1 ) ;
2961: LD_EXP 1
2965: PPUSH
2966: LD_STRING D2-JMM-1
2968: PPUSH
2969: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
2973: LD_INT 22
2975: PUSH
2976: LD_INT 1
2978: PUSH
2979: EMPTY
2980: LIST
2981: LIST
2982: PUSH
2983: LD_INT 21
2985: PUSH
2986: LD_INT 2
2988: PUSH
2989: EMPTY
2990: LIST
2991: LIST
2992: PUSH
2993: EMPTY
2994: LIST
2995: LIST
2996: PPUSH
2997: CALL_OW 69
3001: PUSH
3002: LD_INT 1
3004: ARRAY
3005: PPUSH
3006: CALL_OW 87
// Say ( Stevens , D2-Huck-1 ) ;
3010: LD_EXP 2
3014: PPUSH
3015: LD_STRING D2-Huck-1
3017: PPUSH
3018: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3022: LD_INT 22
3024: PUSH
3025: LD_INT 1
3027: PUSH
3028: EMPTY
3029: LIST
3030: LIST
3031: PUSH
3032: LD_INT 21
3034: PUSH
3035: LD_INT 2
3037: PUSH
3038: EMPTY
3039: LIST
3040: LIST
3041: PUSH
3042: EMPTY
3043: LIST
3044: LIST
3045: PPUSH
3046: CALL_OW 69
3050: PUSH
3051: LD_INT 1
3053: ARRAY
3054: PPUSH
3055: CALL_OW 87
// Say ( JMM , D2-JMM-2 ) ;
3059: LD_EXP 1
3063: PPUSH
3064: LD_STRING D2-JMM-2
3066: PPUSH
3067: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3071: LD_INT 22
3073: PUSH
3074: LD_INT 1
3076: PUSH
3077: EMPTY
3078: LIST
3079: LIST
3080: PUSH
3081: LD_INT 21
3083: PUSH
3084: LD_INT 2
3086: PUSH
3087: EMPTY
3088: LIST
3089: LIST
3090: PUSH
3091: EMPTY
3092: LIST
3093: LIST
3094: PPUSH
3095: CALL_OW 69
3099: PUSH
3100: LD_INT 1
3102: ARRAY
3103: PPUSH
3104: CALL_OW 87
// InGameOff ;
3108: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3112: LD_STRING M1
3114: PPUSH
3115: CALL_OW 337
// SaveForQuickRestart ;
3119: CALL_OW 22
// end ;
3123: END
// every 10 10$0 do
3124: GO 3126
3126: DISABLE
// begin DialogueOn ;
3127: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
3131: LD_EXP 15
3135: PPUSH
3136: LD_STRING D3-Pow-1
3138: PPUSH
3139: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
3143: LD_EXP 1
3147: PPUSH
3148: LD_STRING D3-JMM-1
3150: PPUSH
3151: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
3155: LD_EXP 15
3159: PPUSH
3160: LD_STRING D3-Pow-2
3162: PPUSH
3163: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
3167: LD_EXP 1
3171: PPUSH
3172: LD_STRING D3-JMM-2
3174: PPUSH
3175: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
3179: LD_EXP 15
3183: PPUSH
3184: LD_STRING D3-Pow-3
3186: PPUSH
3187: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
3191: LD_EXP 1
3195: PPUSH
3196: LD_STRING D3-JMM-3
3198: PPUSH
3199: CALL_OW 88
// SayRadio ( Powell , D3-Pow-4 ) ;
3203: LD_EXP 15
3207: PPUSH
3208: LD_STRING D3-Pow-4
3210: PPUSH
3211: CALL_OW 94
// Say ( JMM , D3-JMM-4 ) ;
3215: LD_EXP 1
3219: PPUSH
3220: LD_STRING D3-JMM-4
3222: PPUSH
3223: CALL_OW 88
// DialogueOff ;
3227: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
3231: LD_STRING M2
3233: PPUSH
3234: CALL_OW 337
// wait ( 2 2$30 ) ;
3238: LD_INT 5250
3240: PPUSH
3241: CALL_OW 67
// PrepareBurlak ;
3245: CALL 1819 0 0
// BurlakArmy ;
3249: CALL 1965 0 0
// end ;
3253: END
// every 0 0$1 trigger See ( 1 , Masha ) do
3254: LD_INT 1
3256: PPUSH
3257: LD_EXP 18
3261: PPUSH
3262: CALL_OW 292
3266: IFFALSE 3425
3268: GO 3270
3270: DISABLE
// begin DialogueOn ;
3271: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
3275: LD_EXP 18
3279: PPUSH
3280: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5-Sol1-1 , D5-FSol1-1 ) ;
3284: LD_INT 22
3286: PUSH
3287: LD_INT 1
3289: PUSH
3290: EMPTY
3291: LIST
3292: LIST
3293: PUSH
3294: LD_INT 26
3296: PUSH
3297: LD_INT 1
3299: PUSH
3300: EMPTY
3301: LIST
3302: LIST
3303: PUSH
3304: LD_INT 2
3306: PUSH
3307: LD_INT 25
3309: PUSH
3310: LD_INT 1
3312: PUSH
3313: EMPTY
3314: LIST
3315: LIST
3316: PUSH
3317: LD_INT 25
3319: PUSH
3320: LD_INT 2
3322: PUSH
3323: EMPTY
3324: LIST
3325: LIST
3326: PUSH
3327: LD_INT 25
3329: PUSH
3330: LD_INT 3
3332: PUSH
3333: EMPTY
3334: LIST
3335: LIST
3336: PUSH
3337: LD_INT 25
3339: PUSH
3340: LD_INT 4
3342: PUSH
3343: EMPTY
3344: LIST
3345: LIST
3346: PUSH
3347: LD_INT 25
3349: PUSH
3350: LD_INT 5
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: PUSH
3357: EMPTY
3358: LIST
3359: LIST
3360: LIST
3361: LIST
3362: LIST
3363: LIST
3364: PUSH
3365: EMPTY
3366: LIST
3367: LIST
3368: LIST
3369: PPUSH
3370: CALL_OW 69
3374: PPUSH
3375: LD_STRING D5-Sol1-1
3377: PPUSH
3378: LD_STRING D5-FSol1-1
3380: PPUSH
3381: CALL 6021 0 3
// Say ( JMM , D5-JMM-1 ) ;
3385: LD_EXP 1
3389: PPUSH
3390: LD_STRING D5-JMM-1
3392: PPUSH
3393: CALL_OW 88
// Say ( Burlak , DAmer-Bur-1 ) ;
3397: LD_EXP 17
3401: PPUSH
3402: LD_STRING DAmer-Bur-1
3404: PPUSH
3405: CALL_OW 88
// Say ( JMM , DAmer-JMM-1 ) ;
3409: LD_EXP 1
3413: PPUSH
3414: LD_STRING DAmer-JMM-1
3416: PPUSH
3417: CALL_OW 88
// DialogueOff ;
3421: CALL_OW 7
// end ;
3425: END
// every 0 0$1 trigger FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do var i ;
3426: LD_INT 4
3428: PPUSH
3429: LD_INT 22
3431: PUSH
3432: LD_INT 7
3434: PUSH
3435: EMPTY
3436: LIST
3437: LIST
3438: PPUSH
3439: CALL_OW 70
3443: IFFALSE 3842
3445: GO 3447
3447: DISABLE
3448: LD_INT 0
3450: PPUSH
// begin enable ;
3451: ENABLE
// for i in FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do
3452: LD_ADDR_VAR 0 1
3456: PUSH
3457: LD_INT 4
3459: PPUSH
3460: LD_INT 22
3462: PUSH
3463: LD_INT 7
3465: PUSH
3466: EMPTY
3467: LIST
3468: LIST
3469: PPUSH
3470: CALL_OW 70
3474: PUSH
3475: FOR_IN
3476: IFFALSE 3840
// begin if i = Burlak or i = Masha then
3478: LD_VAR 0 1
3482: PUSH
3483: LD_EXP 17
3487: EQUAL
3488: PUSH
3489: LD_VAR 0 1
3493: PUSH
3494: LD_EXP 18
3498: EQUAL
3499: OR
3500: IFFALSE 3647
// begin RemoveUnit ( i ) ;
3502: LD_VAR 0 1
3506: PPUSH
3507: CALL_OW 64
// DialogueOn ;
3511: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
3515: LD_EXP 1
3519: PPUSH
3520: LD_STRING D5a-JMM-1
3522: PPUSH
3523: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5a-Sol1-1 , D5-FSol1-1 ) ;
3527: LD_INT 22
3529: PUSH
3530: LD_INT 1
3532: PUSH
3533: EMPTY
3534: LIST
3535: LIST
3536: PUSH
3537: LD_INT 26
3539: PUSH
3540: LD_INT 1
3542: PUSH
3543: EMPTY
3544: LIST
3545: LIST
3546: PUSH
3547: LD_INT 2
3549: PUSH
3550: LD_INT 25
3552: PUSH
3553: LD_INT 1
3555: PUSH
3556: EMPTY
3557: LIST
3558: LIST
3559: PUSH
3560: LD_INT 25
3562: PUSH
3563: LD_INT 2
3565: PUSH
3566: EMPTY
3567: LIST
3568: LIST
3569: PUSH
3570: LD_INT 25
3572: PUSH
3573: LD_INT 3
3575: PUSH
3576: EMPTY
3577: LIST
3578: LIST
3579: PUSH
3580: LD_INT 25
3582: PUSH
3583: LD_INT 4
3585: PUSH
3586: EMPTY
3587: LIST
3588: LIST
3589: PUSH
3590: LD_INT 25
3592: PUSH
3593: LD_INT 5
3595: PUSH
3596: EMPTY
3597: LIST
3598: LIST
3599: PUSH
3600: EMPTY
3601: LIST
3602: LIST
3603: LIST
3604: LIST
3605: LIST
3606: LIST
3607: PUSH
3608: EMPTY
3609: LIST
3610: LIST
3611: LIST
3612: PPUSH
3613: CALL_OW 69
3617: PPUSH
3618: LD_STRING D5a-Sol1-1
3620: PPUSH
3621: LD_STRING D5-FSol1-1
3623: PPUSH
3624: CALL 6021 0 3
// DialogueOff ;
3628: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
3632: LD_STRING M2b
3634: PPUSH
3635: CALL_OW 337
// spawnBurlak = 0 ;
3639: LD_ADDR_EXP 27
3643: PUSH
3644: LD_INT 0
3646: ST_TO_ADDR
// end ; if GetType ( i ) = unit_vehicle and GetControl ( i ) = control_manual then
3647: LD_VAR 0 1
3651: PPUSH
3652: CALL_OW 247
3656: PUSH
3657: LD_INT 2
3659: EQUAL
3660: PUSH
3661: LD_VAR 0 1
3665: PPUSH
3666: CALL_OW 263
3670: PUSH
3671: LD_INT 1
3673: EQUAL
3674: AND
3675: IFFALSE 3803
// begin case IsDrivenBy ( i ) of Gnyevko :
3677: LD_VAR 0 1
3681: PPUSH
3682: CALL_OW 311
3686: PUSH
3687: LD_EXP 19
3691: DOUBLE
3692: EQUAL
3693: IFTRUE 3697
3695: GO 3710
3697: POP
// SaveVariable ( 1 , 13_Gnyevko_1 ) ; Titov :
3698: LD_INT 1
3700: PPUSH
3701: LD_STRING 13_Gnyevko_1
3703: PPUSH
3704: CALL_OW 39
3708: GO 3803
3710: LD_EXP 20
3714: DOUBLE
3715: EQUAL
3716: IFTRUE 3720
3718: GO 3733
3720: POP
// SaveVariable ( 1 , 13_Titov_1 ) ; Xavier :
3721: LD_INT 1
3723: PPUSH
3724: LD_STRING 13_Titov_1
3726: PPUSH
3727: CALL_OW 39
3731: GO 3803
3733: LD_EXP 21
3737: DOUBLE
3738: EQUAL
3739: IFTRUE 3743
3741: GO 3756
3743: POP
// SaveVariable ( 1 , 13_Xavier_1 ) ; Belkov :
3744: LD_INT 1
3746: PPUSH
3747: LD_STRING 13_Xavier_1
3749: PPUSH
3750: CALL_OW 39
3754: GO 3803
3756: LD_EXP 22
3760: DOUBLE
3761: EQUAL
3762: IFTRUE 3766
3764: GO 3779
3766: POP
// SaveVariable ( 1 , 13_Belkov_1 ) ; Lipshchin :
3767: LD_INT 1
3769: PPUSH
3770: LD_STRING 13_Belkov_1
3772: PPUSH
3773: CALL_OW 39
3777: GO 3803
3779: LD_EXP 23
3783: DOUBLE
3784: EQUAL
3785: IFTRUE 3789
3787: GO 3802
3789: POP
// SaveVariable ( 1 , 13_Lipshchin_1 ) ; end ;
3790: LD_INT 1
3792: PPUSH
3793: LD_STRING 13_Lipshchin_1
3795: PPUSH
3796: CALL_OW 39
3800: GO 3803
3802: POP
// end ; if GetWeapon ( i ) = 49 then
3803: LD_VAR 0 1
3807: PPUSH
3808: CALL_OW 264
3812: PUSH
3813: LD_INT 49
3815: EQUAL
3816: IFFALSE 3829
// DestroyUnit ( i ) else
3818: LD_VAR 0 1
3822: PPUSH
3823: CALL_OW 65
3827: GO 3838
// RemoveUnit ( i ) ;
3829: LD_VAR 0 1
3833: PPUSH
3834: CALL_OW 64
// end ;
3838: GO 3475
3840: POP
3841: POP
// end ;
3842: PPOPN 1
3844: END
// every 0 0$1 trigger IsOk ( Burlak ) and GetLives ( Masha ) < 500 and GetSide ( Masha ) = 7 do
3845: LD_EXP 17
3849: PPUSH
3850: CALL_OW 302
3854: PUSH
3855: LD_EXP 18
3859: PPUSH
3860: CALL_OW 256
3864: PUSH
3865: LD_INT 500
3867: LESS
3868: AND
3869: PUSH
3870: LD_EXP 18
3874: PPUSH
3875: CALL_OW 255
3879: PUSH
3880: LD_INT 7
3882: EQUAL
3883: AND
3884: IFFALSE 3904
3886: GO 3888
3888: DISABLE
// ComMoveXY ( Burlak , 107 , 118 ) ;
3889: LD_EXP 17
3893: PPUSH
3894: LD_INT 107
3896: PPUSH
3897: LD_INT 118
3899: PPUSH
3900: CALL_OW 111
3904: END
// every 0 0$10 trigger IsDead ( Burlak ) and spawnBurlak = 1 do
3905: LD_EXP 17
3909: PPUSH
3910: CALL_OW 301
3914: PUSH
3915: LD_EXP 27
3919: PUSH
3920: LD_INT 1
3922: EQUAL
3923: AND
3924: IFFALSE 4057
3926: GO 3928
3928: DISABLE
// begin Say ( JMM , D5b-JMM-1 ) ;
3929: LD_EXP 1
3933: PPUSH
3934: LD_STRING D5b-JMM-1
3936: PPUSH
3937: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5b-Sol1-1 ,  ) ;
3941: LD_INT 22
3943: PUSH
3944: LD_INT 1
3946: PUSH
3947: EMPTY
3948: LIST
3949: LIST
3950: PUSH
3951: LD_INT 26
3953: PUSH
3954: LD_INT 1
3956: PUSH
3957: EMPTY
3958: LIST
3959: LIST
3960: PUSH
3961: LD_INT 2
3963: PUSH
3964: LD_INT 25
3966: PUSH
3967: LD_INT 1
3969: PUSH
3970: EMPTY
3971: LIST
3972: LIST
3973: PUSH
3974: LD_INT 25
3976: PUSH
3977: LD_INT 2
3979: PUSH
3980: EMPTY
3981: LIST
3982: LIST
3983: PUSH
3984: LD_INT 25
3986: PUSH
3987: LD_INT 3
3989: PUSH
3990: EMPTY
3991: LIST
3992: LIST
3993: PUSH
3994: LD_INT 25
3996: PUSH
3997: LD_INT 4
3999: PUSH
4000: EMPTY
4001: LIST
4002: LIST
4003: PUSH
4004: LD_INT 25
4006: PUSH
4007: LD_INT 5
4009: PUSH
4010: EMPTY
4011: LIST
4012: LIST
4013: PUSH
4014: EMPTY
4015: LIST
4016: LIST
4017: LIST
4018: LIST
4019: LIST
4020: LIST
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: LIST
4026: PPUSH
4027: CALL_OW 69
4031: PPUSH
4032: LD_STRING D5b-Sol1-1
4034: PPUSH
4035: LD_STRING 
4037: PPUSH
4038: CALL 6021 0 3
// ChangeMissionObjectives ( M2a ) ;
4042: LD_STRING M2a
4044: PPUSH
4045: CALL_OW 337
// burlakStatus = 1 ;
4049: LD_ADDR_EXP 28
4053: PUSH
4054: LD_INT 1
4056: ST_TO_ADDR
// end ;
4057: END
// every 0 0$1 trigger IsDead ( Stevens ) do
4058: LD_EXP 2
4062: PPUSH
4063: CALL_OW 301
4067: IFFALSE 4204
4069: GO 4071
4071: DISABLE
// begin Say ( JMM , D6-JMM-1 ) ;
4072: LD_EXP 1
4076: PPUSH
4077: LD_STRING D6-JMM-1
4079: PPUSH
4080: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D6-Sol1-1 ,  ) ;
4084: LD_INT 22
4086: PUSH
4087: LD_INT 1
4089: PUSH
4090: EMPTY
4091: LIST
4092: LIST
4093: PUSH
4094: LD_INT 26
4096: PUSH
4097: LD_INT 1
4099: PUSH
4100: EMPTY
4101: LIST
4102: LIST
4103: PUSH
4104: LD_INT 2
4106: PUSH
4107: LD_INT 25
4109: PUSH
4110: LD_INT 1
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: PUSH
4117: LD_INT 25
4119: PUSH
4120: LD_INT 2
4122: PUSH
4123: EMPTY
4124: LIST
4125: LIST
4126: PUSH
4127: LD_INT 25
4129: PUSH
4130: LD_INT 3
4132: PUSH
4133: EMPTY
4134: LIST
4135: LIST
4136: PUSH
4137: LD_INT 25
4139: PUSH
4140: LD_INT 4
4142: PUSH
4143: EMPTY
4144: LIST
4145: LIST
4146: PUSH
4147: LD_INT 25
4149: PUSH
4150: LD_INT 5
4152: PUSH
4153: EMPTY
4154: LIST
4155: LIST
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: LIST
4163: LIST
4164: PUSH
4165: EMPTY
4166: LIST
4167: LIST
4168: LIST
4169: PPUSH
4170: CALL_OW 69
4174: PPUSH
4175: LD_STRING D6-Sol1-1
4177: PPUSH
4178: LD_STRING 
4180: PPUSH
4181: CALL 6021 0 3
// Say ( JMM , D6-JMM-2 ) ;
4185: LD_EXP 1
4189: PPUSH
4190: LD_STRING D6-JMM-2
4192: PPUSH
4193: CALL_OW 88
// ChangeMissionObjectives ( M1a ) ;
4197: LD_STRING M1a
4199: PPUSH
4200: CALL_OW 337
// end ;
4204: END
// every 0 0$1 trigger GetTech ( 25 , 1 ) = state_researched do
4205: LD_INT 25
4207: PPUSH
4208: LD_INT 1
4210: PPUSH
4211: CALL_OW 321
4215: PUSH
4216: LD_INT 2
4218: EQUAL
4219: IFFALSE 4236
4221: GO 4223
4223: DISABLE
// begin Say ( Stevens , D6-Huck-2 ) ;
4224: LD_EXP 2
4228: PPUSH
4229: LD_STRING D6-Huck-2
4231: PPUSH
4232: CALL_OW 88
// end ;
4236: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , 8 ] , [ f_bweapon , 8 ] ] ] ) > 0 do var depot , barrack ;
4237: LD_INT 22
4239: PUSH
4240: LD_INT 1
4242: PUSH
4243: EMPTY
4244: LIST
4245: LIST
4246: PUSH
4247: LD_INT 2
4249: PUSH
4250: LD_INT 34
4252: PUSH
4253: LD_INT 8
4255: PUSH
4256: EMPTY
4257: LIST
4258: LIST
4259: PUSH
4260: LD_INT 35
4262: PUSH
4263: LD_INT 8
4265: PUSH
4266: EMPTY
4267: LIST
4268: LIST
4269: PUSH
4270: EMPTY
4271: LIST
4272: LIST
4273: LIST
4274: PUSH
4275: EMPTY
4276: LIST
4277: LIST
4278: PPUSH
4279: CALL_OW 69
4283: PUSH
4284: LD_INT 0
4286: GREATER
4287: IFFALSE 4479
4289: GO 4291
4291: DISABLE
4292: LD_INT 0
4294: PPUSH
4295: PPUSH
// begin enable ;
4296: ENABLE
// depot = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 1 ] , [ f_not , [ f_constructed ] ] ] ) ;
4297: LD_ADDR_VAR 0 1
4301: PUSH
4302: LD_INT 5
4304: PPUSH
4305: LD_INT 22
4307: PUSH
4308: LD_INT 1
4310: PUSH
4311: EMPTY
4312: LIST
4313: LIST
4314: PUSH
4315: LD_INT 21
4317: PUSH
4318: LD_INT 3
4320: PUSH
4321: EMPTY
4322: LIST
4323: LIST
4324: PUSH
4325: LD_INT 30
4327: PUSH
4328: LD_INT 1
4330: PUSH
4331: EMPTY
4332: LIST
4333: LIST
4334: PUSH
4335: LD_INT 3
4337: PUSH
4338: LD_INT 57
4340: PUSH
4341: EMPTY
4342: LIST
4343: PUSH
4344: EMPTY
4345: LIST
4346: LIST
4347: PUSH
4348: EMPTY
4349: LIST
4350: LIST
4351: LIST
4352: LIST
4353: PPUSH
4354: CALL_OW 70
4358: ST_TO_ADDR
// barrack = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 5 ] , [ f_not , [ f_constructed ] ] ] ) ;
4359: LD_ADDR_VAR 0 2
4363: PUSH
4364: LD_INT 5
4366: PPUSH
4367: LD_INT 22
4369: PUSH
4370: LD_INT 1
4372: PUSH
4373: EMPTY
4374: LIST
4375: LIST
4376: PUSH
4377: LD_INT 21
4379: PUSH
4380: LD_INT 3
4382: PUSH
4383: EMPTY
4384: LIST
4385: LIST
4386: PUSH
4387: LD_INT 30
4389: PUSH
4390: LD_INT 5
4392: PUSH
4393: EMPTY
4394: LIST
4395: LIST
4396: PUSH
4397: LD_INT 3
4399: PUSH
4400: LD_INT 57
4402: PUSH
4403: EMPTY
4404: LIST
4405: PUSH
4406: EMPTY
4407: LIST
4408: LIST
4409: PUSH
4410: EMPTY
4411: LIST
4412: LIST
4413: LIST
4414: LIST
4415: PPUSH
4416: CALL_OW 70
4420: ST_TO_ADDR
// if depot > 0 and barrack > 0 then
4421: LD_VAR 0 1
4425: PUSH
4426: LD_INT 0
4428: GREATER
4429: PUSH
4430: LD_VAR 0 2
4434: PUSH
4435: LD_INT 0
4437: GREATER
4438: AND
4439: IFFALSE 4479
// begin disable ;
4441: DISABLE
// DialogueOn ;
4442: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
4446: LD_EXP 1
4450: PPUSH
4451: LD_STRING D7-JMM-1
4453: PPUSH
4454: CALL_OW 88
// DialogueOff ;
4458: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
4462: LD_STRING M4
4464: PPUSH
4465: CALL_OW 337
// SetAreaMapShow ( TestArea , 0 ) ;
4469: LD_INT 5
4471: PPUSH
4472: LD_INT 0
4474: PPUSH
4475: CALL_OW 424
// end ; end ;
4479: PPOPN 2
4481: END
// every 0 0$1 trigger FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 and eventVar3 = 1 and radationResearched = 0 do
4482: LD_INT 6
4484: PPUSH
4485: LD_INT 22
4487: PUSH
4488: LD_INT 1
4490: PUSH
4491: EMPTY
4492: LIST
4493: LIST
4494: PUSH
4495: LD_INT 25
4497: PUSH
4498: LD_INT 4
4500: PUSH
4501: EMPTY
4502: LIST
4503: LIST
4504: PUSH
4505: EMPTY
4506: LIST
4507: LIST
4508: PPUSH
4509: CALL_OW 70
4513: PUSH
4514: LD_INT 0
4516: GREATER
4517: PUSH
4518: LD_EXP 37
4522: PUSH
4523: LD_INT 1
4525: EQUAL
4526: AND
4527: PUSH
4528: LD_EXP 29
4532: PUSH
4533: LD_INT 0
4535: EQUAL
4536: AND
4537: IFFALSE 4602
4539: GO 4541
4541: DISABLE
// begin enable ;
4542: ENABLE
// AmSciSib = FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ;
4543: LD_ADDR_EXP 26
4547: PUSH
4548: LD_INT 6
4550: PPUSH
4551: LD_INT 22
4553: PUSH
4554: LD_INT 1
4556: PUSH
4557: EMPTY
4558: LIST
4559: LIST
4560: PUSH
4561: LD_INT 25
4563: PUSH
4564: LD_INT 4
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: PUSH
4571: EMPTY
4572: LIST
4573: LIST
4574: PPUSH
4575: CALL_OW 70
4579: PUSH
4580: LD_INT 1
4582: ARRAY
4583: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 0 ) ;
4584: LD_INT 6
4586: PPUSH
4587: LD_INT 0
4589: PPUSH
4590: CALL_OW 424
// radationResearched = 1 ;
4594: LD_ADDR_EXP 29
4598: PUSH
4599: LD_INT 1
4601: ST_TO_ADDR
// end ;
4602: END
// every 0 0$1 trigger IsDead ( AmSciSib ) and radationResearched = 1 do
4603: LD_EXP 26
4607: PPUSH
4608: CALL_OW 301
4612: PUSH
4613: LD_EXP 29
4617: PUSH
4618: LD_INT 1
4620: EQUAL
4621: AND
4622: IFFALSE 4658
4624: GO 4626
4626: DISABLE
// begin enable ;
4627: ENABLE
// radationResearched = 0 ;
4628: LD_ADDR_EXP 29
4632: PUSH
4633: LD_INT 0
4635: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
4636: LD_INT 6
4638: PPUSH
4639: LD_INT 1
4641: PPUSH
4642: CALL_OW 424
// Say ( JMM , D9a-JMM-1 ) ;
4646: LD_EXP 1
4650: PPUSH
4651: LD_STRING D9a-JMM-1
4653: PPUSH
4654: CALL_OW 88
// end ; end_of_file
4658: END
// on VehicleConstructionStarted ( building , chasis , engine , control , weapon ) do begin if weapon = 8 and eventVar1 = 0 then
4659: LD_VAR 0 5
4663: PUSH
4664: LD_INT 8
4666: EQUAL
4667: PUSH
4668: LD_EXP 35
4672: PUSH
4673: LD_INT 0
4675: EQUAL
4676: AND
4677: IFFALSE 4730
// begin eventVar1 = 1 ;
4679: LD_ADDR_EXP 35
4683: PUSH
4684: LD_INT 1
4686: ST_TO_ADDR
// DialogueOn ;
4687: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
4691: LD_EXP 1
4695: PPUSH
4696: LD_STRING D6a-JMM-1
4698: PPUSH
4699: CALL_OW 88
// SayRadio ( Powell , D6a-Pow-1 ) ;
4703: LD_EXP 15
4707: PPUSH
4708: LD_STRING D6a-Pow-1
4710: PPUSH
4711: CALL_OW 94
// DialogueOff ;
4715: CALL_OW 7
// wait ( 3 3$0 ) ;
4719: LD_INT 6300
4721: PPUSH
4722: CALL_OW 67
// PowellSupport ;
4726: CALL 1591 0 0
// end ; end ;
4730: PPOPN 5
4732: END
// on VehicleConstructed ( vehicle , building ) do begin if GetWeapon ( vehicle ) = 8 and eventVar2 = 0 then
4733: LD_VAR 0 1
4737: PPUSH
4738: CALL_OW 264
4742: PUSH
4743: LD_INT 8
4745: EQUAL
4746: PUSH
4747: LD_EXP 36
4751: PUSH
4752: LD_INT 0
4754: EQUAL
4755: AND
4756: IFFALSE 4825
// begin eventVar2 = 1 ;
4758: LD_ADDR_EXP 36
4762: PUSH
4763: LD_INT 1
4765: ST_TO_ADDR
// DialogueOn ;
4766: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
4770: LD_EXP 1
4774: PPUSH
4775: LD_STRING D6b-JMM-1
4777: PPUSH
4778: CALL_OW 88
// SayRadio ( Powell , D6b-Pow-1 ) ;
4782: LD_EXP 15
4786: PPUSH
4787: LD_STRING D6b-Pow-1
4789: PPUSH
4790: CALL_OW 94
// DialogueOff ;
4794: CALL_OW 7
// SetAreaMapShow ( TestArea , 1 ) ;
4798: LD_INT 5
4800: PPUSH
4801: LD_INT 1
4803: PPUSH
4804: CALL_OW 424
// SetAreaMapShow ( RadarArea , 1 ) ;
4808: LD_INT 7
4810: PPUSH
4811: LD_INT 1
4813: PPUSH
4814: CALL_OW 424
// ChangeMissionObjectives ( M3 ) ;
4818: LD_STRING M3
4820: PPUSH
4821: CALL_OW 337
// end ; end ;
4825: PPOPN 2
4827: END
// on SiberiteRocketExploded ( nn , x , y ) do begin if InArea ( x , y , TestArea ) and eventVar3 = 0 then
4828: LD_VAR 0 2
4832: PPUSH
4833: LD_VAR 0 3
4837: PPUSH
4838: LD_INT 5
4840: PPUSH
4841: CALL_OW 309
4845: PUSH
4846: LD_EXP 37
4850: PUSH
4851: LD_INT 0
4853: EQUAL
4854: AND
4855: IFFALSE 5073
// begin eventVar3 = 1 ;
4857: LD_ADDR_EXP 37
4861: PUSH
4862: LD_INT 1
4864: ST_TO_ADDR
// wait ( 0 0$5 ) ;
4865: LD_INT 175
4867: PPUSH
4868: CALL_OW 67
// if FilterUnitsInArea ( RadarArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , 11 ] ] ) > 0 then
4872: LD_INT 7
4874: PPUSH
4875: LD_INT 22
4877: PUSH
4878: LD_INT 1
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: PUSH
4885: LD_INT 21
4887: PUSH
4888: LD_INT 2
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: PUSH
4895: LD_INT 34
4897: PUSH
4898: LD_INT 11
4900: PUSH
4901: EMPTY
4902: LIST
4903: LIST
4904: PUSH
4905: EMPTY
4906: LIST
4907: LIST
4908: LIST
4909: PPUSH
4910: CALL_OW 70
4914: PUSH
4915: LD_INT 0
4917: GREATER
4918: IFFALSE 4937
// begin radarOnSpot = 1 ;
4920: LD_ADDR_EXP 30
4924: PUSH
4925: LD_INT 1
4927: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
4928: LD_STRING M3a
4930: PPUSH
4931: CALL_OW 337
// end else
4935: GO 4944
// begin ChangeMissionObjectives ( M3b ) ;
4937: LD_STRING M3b
4939: PPUSH
4940: CALL_OW 337
// end ; DialogueOn ;
4944: CALL_OW 6
// Say ( Stevens , D8-Huck-1 ) ;
4948: LD_EXP 2
4952: PPUSH
4953: LD_STRING D8-Huck-1
4955: PPUSH
4956: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
4960: LD_EXP 1
4964: PPUSH
4965: LD_STRING D8-JMM-1
4967: PPUSH
4968: CALL_OW 88
// Say ( Stevens , D8-Huck-2 ) ;
4972: LD_EXP 2
4976: PPUSH
4977: LD_STRING D8-Huck-2
4979: PPUSH
4980: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
4984: LD_EXP 1
4988: PPUSH
4989: LD_STRING D8-JMM-2
4991: PPUSH
4992: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
4996: LD_EXP 2
5000: PPUSH
5001: LD_STRING D8-Huck-3
5003: PPUSH
5004: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
5008: LD_EXP 1
5012: PPUSH
5013: LD_STRING D8-JMM-3
5015: PPUSH
5016: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
5020: LD_EXP 2
5024: PPUSH
5025: LD_STRING D8-Huck-4
5027: PPUSH
5028: CALL_OW 88
// DialogueOff ;
5032: CALL_OW 7
// SetAreaMapShow ( TestArea , 0 ) ;
5036: LD_INT 5
5038: PPUSH
5039: LD_INT 0
5041: PPUSH
5042: CALL_OW 424
// SetAreaMapShow ( RadarArea , 0 ) ;
5046: LD_INT 7
5048: PPUSH
5049: LD_INT 0
5051: PPUSH
5052: CALL_OW 424
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
5056: LD_INT 6
5058: PPUSH
5059: LD_INT 1
5061: PPUSH
5062: CALL_OW 424
// ChangeMissionObjectives ( M5 ) ;
5066: LD_STRING M5
5068: PPUSH
5069: CALL_OW 337
// end ; end ;
5073: PPOPN 3
5075: END
// on EnterBuilding ( building , human ) do begin if IsOk ( AmSciSib ) and human = AmSciSib and eventVar4 = 0 and eventVar3 = 1 then
5076: LD_EXP 26
5080: PPUSH
5081: CALL_OW 302
5085: PUSH
5086: LD_VAR 0 2
5090: PUSH
5091: LD_EXP 26
5095: EQUAL
5096: AND
5097: PUSH
5098: LD_EXP 38
5102: PUSH
5103: LD_INT 0
5105: EQUAL
5106: AND
5107: PUSH
5108: LD_EXP 37
5112: PUSH
5113: LD_INT 1
5115: EQUAL
5116: AND
5117: IFFALSE 5163
// if GetLabKind ( building , 1 ) = b_lab_siberium or GetLabKind ( building , 2 ) = b_lab_siberium then
5119: LD_VAR 0 1
5123: PPUSH
5124: LD_INT 1
5126: PPUSH
5127: CALL_OW 268
5131: PUSH
5132: LD_INT 11
5134: EQUAL
5135: PUSH
5136: LD_VAR 0 1
5140: PPUSH
5141: LD_INT 2
5143: PPUSH
5144: CALL_OW 268
5148: PUSH
5149: LD_INT 11
5151: EQUAL
5152: OR
5153: IFFALSE 5163
// eventVar4 = 1 ;
5155: LD_ADDR_EXP 38
5159: PUSH
5160: LD_INT 1
5162: ST_TO_ADDR
// end ;
5163: PPOPN 2
5165: END
// on SibDepositContaminated ( unit , x , y ) do var i , tmp ;
5166: LD_INT 0
5168: PPUSH
5169: PPUSH
// begin if GetNation ( unit ) = 2 then
5170: LD_VAR 0 1
5174: PPUSH
5175: CALL_OW 248
5179: PUSH
5180: LD_INT 2
5182: EQUAL
5183: IFFALSE 5429
// begin sibDestroyedCounter = sibDestroyedCounter + 1 ;
5185: LD_ADDR_EXP 32
5189: PUSH
5190: LD_EXP 32
5194: PUSH
5195: LD_INT 1
5197: PLUS
5198: ST_TO_ADDR
// for i := 1 to sibDeposits do
5199: LD_ADDR_VAR 0 4
5203: PUSH
5204: DOUBLE
5205: LD_INT 1
5207: DEC
5208: ST_TO_ADDR
5209: LD_EXP 31
5213: PUSH
5214: FOR_TO
5215: IFFALSE 5317
// if sibDeposits [ i ] [ 1 ] = x and sibDeposits [ i ] [ 2 ] = y then
5217: LD_EXP 31
5221: PUSH
5222: LD_VAR 0 4
5226: ARRAY
5227: PUSH
5228: LD_INT 1
5230: ARRAY
5231: PUSH
5232: LD_VAR 0 2
5236: EQUAL
5237: PUSH
5238: LD_EXP 31
5242: PUSH
5243: LD_VAR 0 4
5247: ARRAY
5248: PUSH
5249: LD_INT 2
5251: ARRAY
5252: PUSH
5253: LD_VAR 0 3
5257: EQUAL
5258: AND
5259: IFFALSE 5315
// begin sibDeposits = Delete ( sibDeposits , [ i ] [ 1 ] ) ;
5261: LD_ADDR_EXP 31
5265: PUSH
5266: LD_EXP 31
5270: PPUSH
5271: LD_VAR 0 4
5275: PUSH
5276: EMPTY
5277: LIST
5278: PUSH
5279: LD_INT 1
5281: ARRAY
5282: PPUSH
5283: CALL_OW 3
5287: ST_TO_ADDR
// sibDeposits = Delete ( sibDeposits , [ i ] [ 2 ] ) ;
5288: LD_ADDR_EXP 31
5292: PUSH
5293: LD_EXP 31
5297: PPUSH
5298: LD_VAR 0 4
5302: PUSH
5303: EMPTY
5304: LIST
5305: PUSH
5306: LD_INT 2
5308: ARRAY
5309: PPUSH
5310: CALL_OW 3
5314: ST_TO_ADDR
// end ;
5315: GO 5214
5317: POP
5318: POP
// if eventVar5 = 0 then
5319: LD_EXP 39
5323: PUSH
5324: LD_INT 0
5326: EQUAL
5327: IFFALSE 5429
// begin eventVar5 = 1 ;
5329: LD_ADDR_EXP 39
5333: PUSH
5334: LD_INT 1
5336: ST_TO_ADDR
// DialogueOn ;
5337: CALL_OW 6
// Say ( Stevens , D4-Sci1-1 ) ;
5341: LD_EXP 2
5345: PPUSH
5346: LD_STRING D4-Sci1-1
5348: PPUSH
5349: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
5353: LD_EXP 1
5357: PPUSH
5358: LD_STRING D4-JMM-1
5360: PPUSH
5361: CALL_OW 88
// Say ( Stevens , D4-Sci1-2 ) ;
5365: LD_EXP 2
5369: PPUSH
5370: LD_STRING D4-Sci1-2
5372: PPUSH
5373: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
5377: LD_EXP 1
5381: PPUSH
5382: LD_STRING D4-JMM-2
5384: PPUSH
5385: CALL_OW 88
// Say ( Stevens , D4-Sci1-3 ) ;
5389: LD_EXP 2
5393: PPUSH
5394: LD_STRING D4-Sci1-3
5396: PPUSH
5397: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
5401: LD_EXP 1
5405: PPUSH
5406: LD_STRING D4-JMM-3
5408: PPUSH
5409: CALL_OW 88
// Say ( JMM , D4-JMM-3a ) ;
5413: LD_EXP 1
5417: PPUSH
5418: LD_STRING D4-JMM-3a
5420: PPUSH
5421: CALL_OW 88
// DialogueOff ;
5425: CALL_OW 7
// end ; end ; end ;
5429: PPOPN 5
5431: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 1 and GetBType ( building ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) = 1 then
5432: LD_VAR 0 1
5436: PPUSH
5437: CALL_OW 255
5441: PUSH
5442: LD_INT 1
5444: EQUAL
5445: PUSH
5446: LD_VAR 0 1
5450: PPUSH
5451: CALL_OW 266
5455: PUSH
5456: LD_INT 0
5458: EQUAL
5459: AND
5460: PUSH
5461: LD_INT 22
5463: PUSH
5464: LD_INT 1
5466: PUSH
5467: EMPTY
5468: LIST
5469: LIST
5470: PUSH
5471: LD_INT 21
5473: PUSH
5474: LD_INT 3
5476: PUSH
5477: EMPTY
5478: LIST
5479: LIST
5480: PUSH
5481: LD_INT 2
5483: PUSH
5484: LD_INT 30
5486: PUSH
5487: LD_INT 0
5489: PUSH
5490: EMPTY
5491: LIST
5492: LIST
5493: PUSH
5494: LD_INT 30
5496: PUSH
5497: LD_INT 1
5499: PUSH
5500: EMPTY
5501: LIST
5502: LIST
5503: PUSH
5504: EMPTY
5505: LIST
5506: LIST
5507: LIST
5508: PUSH
5509: EMPTY
5510: LIST
5511: LIST
5512: LIST
5513: PPUSH
5514: CALL_OW 69
5518: PUSH
5519: LD_INT 1
5521: EQUAL
5522: AND
5523: IFFALSE 5537
// SetBName ( building , omega ) ;
5525: LD_VAR 0 1
5529: PPUSH
5530: LD_STRING omega
5532: PPUSH
5533: CALL_OW 500
// end ;
5537: PPOPN 2
5539: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
5540: LD_VAR 0 1
5544: PPUSH
5545: CALL 12568 0 1
// end ; end_of_file
5549: PPOPN 1
5551: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
5552: LD_INT 0
5554: PPUSH
5555: PPUSH
// if exist_mode then
5556: LD_VAR 0 2
5560: IFFALSE 5579
// unit := CreateCharacter ( ident ) else
5562: LD_ADDR_VAR 0 4
5566: PUSH
5567: LD_VAR 0 1
5571: PPUSH
5572: CALL_OW 34
5576: ST_TO_ADDR
5577: GO 5594
// unit := NewCharacter ( ident ) ;
5579: LD_ADDR_VAR 0 4
5583: PUSH
5584: LD_VAR 0 1
5588: PPUSH
5589: CALL_OW 25
5593: ST_TO_ADDR
// result := unit ;
5594: LD_ADDR_VAR 0 3
5598: PUSH
5599: LD_VAR 0 4
5603: ST_TO_ADDR
// end ;
5604: LD_VAR 0 3
5608: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
5609: LD_INT 0
5611: PPUSH
// vc_chassis := chassis ;
5612: LD_ADDR_OWVAR 37
5616: PUSH
5617: LD_VAR 0 1
5621: ST_TO_ADDR
// vc_engine := engine ;
5622: LD_ADDR_OWVAR 39
5626: PUSH
5627: LD_VAR 0 2
5631: ST_TO_ADDR
// vc_control := control ;
5632: LD_ADDR_OWVAR 38
5636: PUSH
5637: LD_VAR 0 3
5641: ST_TO_ADDR
// vc_weapon := weapon ;
5642: LD_ADDR_OWVAR 40
5646: PUSH
5647: LD_VAR 0 4
5651: ST_TO_ADDR
// vc_fuel_battery := fuel ;
5652: LD_ADDR_OWVAR 41
5656: PUSH
5657: LD_VAR 0 5
5661: ST_TO_ADDR
// end ;
5662: LD_VAR 0 6
5666: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
5667: LD_INT 0
5669: PPUSH
5670: PPUSH
5671: PPUSH
5672: PPUSH
5673: PPUSH
5674: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
5675: LD_VAR 0 1
5679: NOT
5680: PUSH
5681: LD_VAR 0 1
5685: PPUSH
5686: CALL_OW 263
5690: PUSH
5691: LD_INT 2
5693: EQUAL
5694: NOT
5695: OR
5696: IFFALSE 5700
// exit ;
5698: GO 6016
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
5700: LD_ADDR_VAR 0 6
5704: PUSH
5705: LD_INT 22
5707: PUSH
5708: LD_VAR 0 1
5712: PPUSH
5713: CALL_OW 255
5717: PUSH
5718: EMPTY
5719: LIST
5720: LIST
5721: PUSH
5722: LD_INT 2
5724: PUSH
5725: LD_INT 30
5727: PUSH
5728: LD_INT 36
5730: PUSH
5731: EMPTY
5732: LIST
5733: LIST
5734: PUSH
5735: LD_INT 34
5737: PUSH
5738: LD_INT 31
5740: PUSH
5741: EMPTY
5742: LIST
5743: LIST
5744: PUSH
5745: EMPTY
5746: LIST
5747: LIST
5748: LIST
5749: PUSH
5750: EMPTY
5751: LIST
5752: LIST
5753: PPUSH
5754: CALL_OW 69
5758: ST_TO_ADDR
// if not tmp then
5759: LD_VAR 0 6
5763: NOT
5764: IFFALSE 5768
// exit ;
5766: GO 6016
// result := [ ] ;
5768: LD_ADDR_VAR 0 2
5772: PUSH
5773: EMPTY
5774: ST_TO_ADDR
// for i in tmp do
5775: LD_ADDR_VAR 0 3
5779: PUSH
5780: LD_VAR 0 6
5784: PUSH
5785: FOR_IN
5786: IFFALSE 5857
// begin t := UnitsInside ( i ) ;
5788: LD_ADDR_VAR 0 4
5792: PUSH
5793: LD_VAR 0 3
5797: PPUSH
5798: CALL_OW 313
5802: ST_TO_ADDR
// if t then
5803: LD_VAR 0 4
5807: IFFALSE 5855
// for j in t do
5809: LD_ADDR_VAR 0 7
5813: PUSH
5814: LD_VAR 0 4
5818: PUSH
5819: FOR_IN
5820: IFFALSE 5853
// result := Insert ( result , result + 1 , j ) ;
5822: LD_ADDR_VAR 0 2
5826: PUSH
5827: LD_VAR 0 2
5831: PPUSH
5832: LD_VAR 0 2
5836: PUSH
5837: LD_INT 1
5839: PLUS
5840: PPUSH
5841: LD_VAR 0 7
5845: PPUSH
5846: CALL_OW 2
5850: ST_TO_ADDR
5851: GO 5819
5853: POP
5854: POP
// end ;
5855: GO 5785
5857: POP
5858: POP
// if not result then
5859: LD_VAR 0 2
5863: NOT
5864: IFFALSE 5868
// exit ;
5866: GO 6016
// mech := result [ 1 ] ;
5868: LD_ADDR_VAR 0 5
5872: PUSH
5873: LD_VAR 0 2
5877: PUSH
5878: LD_INT 1
5880: ARRAY
5881: ST_TO_ADDR
// if result > 1 then
5882: LD_VAR 0 2
5886: PUSH
5887: LD_INT 1
5889: GREATER
5890: IFFALSE 6002
// for i = 2 to result do
5892: LD_ADDR_VAR 0 3
5896: PUSH
5897: DOUBLE
5898: LD_INT 2
5900: DEC
5901: ST_TO_ADDR
5902: LD_VAR 0 2
5906: PUSH
5907: FOR_TO
5908: IFFALSE 6000
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
5910: LD_ADDR_VAR 0 4
5914: PUSH
5915: LD_VAR 0 2
5919: PUSH
5920: LD_VAR 0 3
5924: ARRAY
5925: PPUSH
5926: LD_INT 3
5928: PPUSH
5929: CALL_OW 259
5933: PUSH
5934: LD_VAR 0 2
5938: PUSH
5939: LD_VAR 0 3
5943: ARRAY
5944: PPUSH
5945: CALL_OW 432
5949: MINUS
5950: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
5951: LD_VAR 0 4
5955: PUSH
5956: LD_VAR 0 5
5960: PPUSH
5961: LD_INT 3
5963: PPUSH
5964: CALL_OW 259
5968: PUSH
5969: LD_VAR 0 5
5973: PPUSH
5974: CALL_OW 432
5978: MINUS
5979: GREATEREQUAL
5980: IFFALSE 5998
// mech := result [ i ] ;
5982: LD_ADDR_VAR 0 5
5986: PUSH
5987: LD_VAR 0 2
5991: PUSH
5992: LD_VAR 0 3
5996: ARRAY
5997: ST_TO_ADDR
// end ;
5998: GO 5907
6000: POP
6001: POP
// ComLinkTo ( vehicle , mech ) ;
6002: LD_VAR 0 1
6006: PPUSH
6007: LD_VAR 0 5
6011: PPUSH
6012: CALL_OW 135
// end ;
6016: LD_VAR 0 2
6020: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
6021: LD_INT 0
6023: PPUSH
6024: PPUSH
6025: PPUSH
// characters := characters diff [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
6026: LD_ADDR_VAR 0 1
6030: PUSH
6031: LD_VAR 0 1
6035: PUSH
6036: LD_EXP 1
6040: PUSH
6041: LD_EXP 2
6045: PUSH
6046: LD_EXP 3
6050: PUSH
6051: LD_EXP 4
6055: PUSH
6056: LD_EXP 5
6060: PUSH
6061: LD_EXP 6
6065: PUSH
6066: LD_EXP 7
6070: PUSH
6071: LD_EXP 8
6075: PUSH
6076: LD_EXP 9
6080: PUSH
6081: LD_EXP 10
6085: PUSH
6086: LD_EXP 11
6090: PUSH
6091: LD_EXP 12
6095: PUSH
6096: LD_EXP 13
6100: PUSH
6101: LD_EXP 14
6105: PUSH
6106: LD_EXP 15
6110: PUSH
6111: EMPTY
6112: LIST
6113: LIST
6114: LIST
6115: LIST
6116: LIST
6117: LIST
6118: LIST
6119: LIST
6120: LIST
6121: LIST
6122: LIST
6123: LIST
6124: LIST
6125: LIST
6126: LIST
6127: DIFF
6128: ST_TO_ADDR
// if not characters then
6129: LD_VAR 0 1
6133: NOT
6134: IFFALSE 6138
// exit ;
6136: GO 6217
// speaker := characters [ rand ( 1 , characters ) ] ;
6138: LD_ADDR_VAR 0 6
6142: PUSH
6143: LD_VAR 0 1
6147: PUSH
6148: LD_INT 1
6150: PPUSH
6151: LD_VAR 0 1
6155: PPUSH
6156: CALL_OW 12
6160: ARRAY
6161: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
6162: LD_VAR 0 6
6166: PPUSH
6167: CALL_OW 258
6171: PUSH
6172: LD_INT 1
6174: EQUAL
6175: IFFALSE 6193
// Say ( speaker , dialogMID ) else
6177: LD_VAR 0 6
6181: PPUSH
6182: LD_VAR 0 2
6186: PPUSH
6187: CALL_OW 88
6191: GO 6207
// Say ( speaker , dialogFID ) ;
6193: LD_VAR 0 6
6197: PPUSH
6198: LD_VAR 0 3
6202: PPUSH
6203: CALL_OW 88
// result := speaker ;
6207: LD_ADDR_VAR 0 4
6211: PUSH
6212: LD_VAR 0 6
6216: ST_TO_ADDR
// end ;
6217: LD_VAR 0 4
6221: RET
// export function PrepareDifficulty ; begin
6222: LD_INT 0
6224: PPUSH
// SetTech ( 5 , 8 , state_researched ) ;
6225: LD_INT 5
6227: PPUSH
6228: LD_INT 8
6230: PPUSH
6231: LD_INT 2
6233: PPUSH
6234: CALL_OW 322
// if difficulty = 1 then
6238: LD_OWVAR 67
6242: PUSH
6243: LD_INT 1
6245: EQUAL
6246: IFFALSE 6365
// begin SetTech ( 66 , 8 , state_researched ) ;
6248: LD_INT 66
6250: PPUSH
6251: LD_INT 8
6253: PPUSH
6254: LD_INT 2
6256: PPUSH
6257: CALL_OW 322
// SetTech ( 67 , 8 , state_disabled ) ;
6261: LD_INT 67
6263: PPUSH
6264: LD_INT 8
6266: PPUSH
6267: LD_INT 0
6269: PPUSH
6270: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6274: LD_INT 68
6276: PPUSH
6277: LD_INT 8
6279: PPUSH
6280: LD_INT 0
6282: PPUSH
6283: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6287: LD_INT 51
6289: PPUSH
6290: LD_INT 8
6292: PPUSH
6293: LD_INT 2
6295: PPUSH
6296: CALL_OW 322
// SetTech ( 52 , 8 , state_disabled ) ;
6300: LD_INT 52
6302: PPUSH
6303: LD_INT 8
6305: PPUSH
6306: LD_INT 0
6308: PPUSH
6309: CALL_OW 322
// SetTech ( 53 , 8 , state_disabled ) ;
6313: LD_INT 53
6315: PPUSH
6316: LD_INT 8
6318: PPUSH
6319: LD_INT 0
6321: PPUSH
6322: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6326: LD_INT 60
6328: PPUSH
6329: LD_INT 8
6331: PPUSH
6332: LD_INT 2
6334: PPUSH
6335: CALL_OW 322
// SetTech ( 61 , 8 , state_disabled ) ;
6339: LD_INT 61
6341: PPUSH
6342: LD_INT 8
6344: PPUSH
6345: LD_INT 0
6347: PPUSH
6348: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6352: LD_INT 62
6354: PPUSH
6355: LD_INT 8
6357: PPUSH
6358: LD_INT 0
6360: PPUSH
6361: CALL_OW 322
// end ; if difficulty = 2 then
6365: LD_OWVAR 67
6369: PUSH
6370: LD_INT 2
6372: EQUAL
6373: IFFALSE 6492
// begin SetTech ( 66 , 8 , state_researched ) ;
6375: LD_INT 66
6377: PPUSH
6378: LD_INT 8
6380: PPUSH
6381: LD_INT 2
6383: PPUSH
6384: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
6388: LD_INT 67
6390: PPUSH
6391: LD_INT 8
6393: PPUSH
6394: LD_INT 2
6396: PPUSH
6397: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6401: LD_INT 68
6403: PPUSH
6404: LD_INT 8
6406: PPUSH
6407: LD_INT 0
6409: PPUSH
6410: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6414: LD_INT 51
6416: PPUSH
6417: LD_INT 8
6419: PPUSH
6420: LD_INT 2
6422: PPUSH
6423: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
6427: LD_INT 52
6429: PPUSH
6430: LD_INT 8
6432: PPUSH
6433: LD_INT 2
6435: PPUSH
6436: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
6440: LD_INT 53
6442: PPUSH
6443: LD_INT 8
6445: PPUSH
6446: LD_INT 2
6448: PPUSH
6449: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6453: LD_INT 60
6455: PPUSH
6456: LD_INT 8
6458: PPUSH
6459: LD_INT 2
6461: PPUSH
6462: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
6466: LD_INT 61
6468: PPUSH
6469: LD_INT 8
6471: PPUSH
6472: LD_INT 2
6474: PPUSH
6475: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6479: LD_INT 62
6481: PPUSH
6482: LD_INT 8
6484: PPUSH
6485: LD_INT 0
6487: PPUSH
6488: CALL_OW 322
// end ; if difficulty = 3 then
6492: LD_OWVAR 67
6496: PUSH
6497: LD_INT 3
6499: EQUAL
6500: IFFALSE 6619
// begin SetTech ( 66 , 8 , state_researched ) ;
6502: LD_INT 66
6504: PPUSH
6505: LD_INT 8
6507: PPUSH
6508: LD_INT 2
6510: PPUSH
6511: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
6515: LD_INT 67
6517: PPUSH
6518: LD_INT 8
6520: PPUSH
6521: LD_INT 2
6523: PPUSH
6524: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6528: LD_INT 68
6530: PPUSH
6531: LD_INT 8
6533: PPUSH
6534: LD_INT 0
6536: PPUSH
6537: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6541: LD_INT 51
6543: PPUSH
6544: LD_INT 8
6546: PPUSH
6547: LD_INT 2
6549: PPUSH
6550: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
6554: LD_INT 52
6556: PPUSH
6557: LD_INT 8
6559: PPUSH
6560: LD_INT 2
6562: PPUSH
6563: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
6567: LD_INT 53
6569: PPUSH
6570: LD_INT 8
6572: PPUSH
6573: LD_INT 2
6575: PPUSH
6576: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6580: LD_INT 60
6582: PPUSH
6583: LD_INT 8
6585: PPUSH
6586: LD_INT 2
6588: PPUSH
6589: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
6593: LD_INT 61
6595: PPUSH
6596: LD_INT 8
6598: PPUSH
6599: LD_INT 2
6601: PPUSH
6602: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6606: LD_INT 62
6608: PPUSH
6609: LD_INT 8
6611: PPUSH
6612: LD_INT 0
6614: PPUSH
6615: CALL_OW 322
// end ; end ;
6619: LD_VAR 0 1
6623: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
6624: LD_INT 0
6626: PPUSH
6627: PPUSH
6628: PPUSH
6629: PPUSH
6630: PPUSH
6631: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
6632: LD_ADDR_VAR 0 7
6636: PUSH
6637: LD_INT 22
6639: PUSH
6640: LD_VAR 0 1
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: PUSH
6649: LD_INT 25
6651: PUSH
6652: LD_INT 9
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: PUSH
6659: EMPTY
6660: LIST
6661: LIST
6662: PPUSH
6663: CALL_OW 69
6667: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6668: LD_ADDR_VAR 0 8
6672: PUSH
6673: LD_INT 22
6675: PUSH
6676: LD_VAR 0 2
6680: PUSH
6681: EMPTY
6682: LIST
6683: LIST
6684: PUSH
6685: LD_INT 3
6687: PUSH
6688: LD_INT 21
6690: PUSH
6691: LD_INT 3
6693: PUSH
6694: EMPTY
6695: LIST
6696: LIST
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: PUSH
6702: EMPTY
6703: LIST
6704: LIST
6705: PPUSH
6706: CALL_OW 69
6710: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
6711: LD_ADDR_VAR 0 5
6715: PUSH
6716: LD_INT 1
6718: PPUSH
6719: LD_INT 3
6721: PPUSH
6722: CALL_OW 12
6726: ST_TO_ADDR
// for i = 1 to list do
6727: LD_ADDR_VAR 0 6
6731: PUSH
6732: DOUBLE
6733: LD_INT 1
6735: DEC
6736: ST_TO_ADDR
6737: LD_VAR 0 7
6741: PUSH
6742: FOR_TO
6743: IFFALSE 6925
// for ta in filter do
6745: LD_ADDR_VAR 0 4
6749: PUSH
6750: LD_VAR 0 8
6754: PUSH
6755: FOR_IN
6756: IFFALSE 6921
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
6758: LD_VAR 0 7
6762: PUSH
6763: LD_VAR 0 6
6767: ARRAY
6768: PPUSH
6769: LD_VAR 0 4
6773: PPUSH
6774: CALL_OW 296
6778: PUSH
6779: LD_INT 13
6781: LESSEQUAL
6782: IFFALSE 6919
// begin case c of 1 :
6784: LD_VAR 0 5
6788: PUSH
6789: LD_INT 1
6791: DOUBLE
6792: EQUAL
6793: IFTRUE 6797
6795: GO 6835
6797: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
6798: LD_VAR 0 7
6802: PUSH
6803: LD_VAR 0 6
6807: ARRAY
6808: PPUSH
6809: LD_VAR 0 4
6813: PPUSH
6814: CALL_OW 250
6818: PPUSH
6819: LD_VAR 0 4
6823: PPUSH
6824: CALL_OW 251
6828: PPUSH
6829: CALL_OW 154
6833: GO 6919
6835: LD_INT 2
6837: DOUBLE
6838: EQUAL
6839: IFTRUE 6843
6841: GO 6907
6843: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
6844: LD_VAR 0 7
6848: PUSH
6849: LD_VAR 0 6
6853: ARRAY
6854: PPUSH
6855: LD_VAR 0 4
6859: PPUSH
6860: CALL_OW 250
6864: PUSH
6865: LD_INT 1
6867: NEG
6868: PPUSH
6869: LD_INT 1
6871: PPUSH
6872: CALL_OW 12
6876: PLUS
6877: PPUSH
6878: LD_VAR 0 4
6882: PPUSH
6883: CALL_OW 251
6887: PUSH
6888: LD_INT 1
6890: NEG
6891: PPUSH
6892: LD_INT 1
6894: PPUSH
6895: CALL_OW 12
6899: PLUS
6900: PPUSH
6901: CALL_OW 153
6905: GO 6919
6907: LD_INT 3
6909: DOUBLE
6910: EQUAL
6911: IFTRUE 6915
6913: GO 6918
6915: POP
// ; end ;
6916: GO 6919
6918: POP
// end ; end ;
6919: GO 6755
6921: POP
6922: POP
6923: GO 6742
6925: POP
6926: POP
// end ;
6927: LD_VAR 0 3
6931: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6932: LD_INT 0
6934: PPUSH
6935: PPUSH
// for i in charactersList do
6936: LD_ADDR_VAR 0 4
6940: PUSH
6941: LD_VAR 0 1
6945: PUSH
6946: FOR_IN
6947: IFFALSE 6965
// SaveCharacters ( i , ident ) ;
6949: LD_VAR 0 4
6953: PPUSH
6954: LD_VAR 0 2
6958: PPUSH
6959: CALL_OW 38
6963: GO 6946
6965: POP
6966: POP
// end ;
6967: LD_VAR 0 3
6971: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
6972: LD_INT 0
6974: PPUSH
6975: PPUSH
6976: PPUSH
6977: PPUSH
6978: PPUSH
6979: PPUSH
6980: PPUSH
6981: PPUSH
6982: PPUSH
6983: PPUSH
6984: PPUSH
// for i = 1 to medicCount do
6985: LD_ADDR_VAR 0 13
6989: PUSH
6990: DOUBLE
6991: LD_INT 1
6993: DEC
6994: ST_TO_ADDR
6995: LD_VAR 0 7
6999: PUSH
7000: FOR_TO
7001: IFFALSE 7083
// begin uc_side = side ;
7003: LD_ADDR_OWVAR 20
7007: PUSH
7008: LD_VAR 0 1
7012: ST_TO_ADDR
// uc_nation = nation ;
7013: LD_ADDR_OWVAR 21
7017: PUSH
7018: LD_VAR 0 2
7022: ST_TO_ADDR
// hc_name =  ;
7023: LD_ADDR_OWVAR 26
7027: PUSH
7028: LD_STRING 
7030: ST_TO_ADDR
// hc_gallery =  ;
7031: LD_ADDR_OWVAR 33
7035: PUSH
7036: LD_STRING 
7038: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
7039: LD_INT 0
7041: PPUSH
7042: LD_INT 4
7044: PPUSH
7045: LD_VAR 0 8
7049: PPUSH
7050: CALL_OW 380
// un = CreateHuman ;
7054: LD_ADDR_VAR 0 15
7058: PUSH
7059: CALL_OW 44
7063: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7064: LD_VAR 0 15
7068: PPUSH
7069: LD_VAR 0 9
7073: PPUSH
7074: LD_INT 0
7076: PPUSH
7077: CALL_OW 49
// end ;
7081: GO 7000
7083: POP
7084: POP
// for i = 1 to soldierCount do
7085: LD_ADDR_VAR 0 13
7089: PUSH
7090: DOUBLE
7091: LD_INT 1
7093: DEC
7094: ST_TO_ADDR
7095: LD_VAR 0 3
7099: PUSH
7100: FOR_TO
7101: IFFALSE 7183
// begin uc_side = side ;
7103: LD_ADDR_OWVAR 20
7107: PUSH
7108: LD_VAR 0 1
7112: ST_TO_ADDR
// uc_nation = nation ;
7113: LD_ADDR_OWVAR 21
7117: PUSH
7118: LD_VAR 0 2
7122: ST_TO_ADDR
// hc_name =  ;
7123: LD_ADDR_OWVAR 26
7127: PUSH
7128: LD_STRING 
7130: ST_TO_ADDR
// hc_gallery =  ;
7131: LD_ADDR_OWVAR 33
7135: PUSH
7136: LD_STRING 
7138: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
7139: LD_INT 0
7141: PPUSH
7142: LD_INT 1
7144: PPUSH
7145: LD_VAR 0 8
7149: PPUSH
7150: CALL_OW 380
// un = CreateHuman ;
7154: LD_ADDR_VAR 0 15
7158: PUSH
7159: CALL_OW 44
7163: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7164: LD_VAR 0 15
7168: PPUSH
7169: LD_VAR 0 9
7173: PPUSH
7174: LD_INT 0
7176: PPUSH
7177: CALL_OW 49
// end ;
7181: GO 7100
7183: POP
7184: POP
// for i = 1 to sniperCount do
7185: LD_ADDR_VAR 0 13
7189: PUSH
7190: DOUBLE
7191: LD_INT 1
7193: DEC
7194: ST_TO_ADDR
7195: LD_VAR 0 4
7199: PUSH
7200: FOR_TO
7201: IFFALSE 7283
// begin uc_side = side ;
7203: LD_ADDR_OWVAR 20
7207: PUSH
7208: LD_VAR 0 1
7212: ST_TO_ADDR
// uc_nation = nation ;
7213: LD_ADDR_OWVAR 21
7217: PUSH
7218: LD_VAR 0 2
7222: ST_TO_ADDR
// hc_name =  ;
7223: LD_ADDR_OWVAR 26
7227: PUSH
7228: LD_STRING 
7230: ST_TO_ADDR
// hc_gallery =  ;
7231: LD_ADDR_OWVAR 33
7235: PUSH
7236: LD_STRING 
7238: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
7239: LD_INT 0
7241: PPUSH
7242: LD_INT 5
7244: PPUSH
7245: LD_VAR 0 8
7249: PPUSH
7250: CALL_OW 380
// un = CreateHuman ;
7254: LD_ADDR_VAR 0 15
7258: PUSH
7259: CALL_OW 44
7263: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7264: LD_VAR 0 15
7268: PPUSH
7269: LD_VAR 0 9
7273: PPUSH
7274: LD_INT 0
7276: PPUSH
7277: CALL_OW 49
// end ;
7281: GO 7200
7283: POP
7284: POP
// for i = 1 to bazookCount do
7285: LD_ADDR_VAR 0 13
7289: PUSH
7290: DOUBLE
7291: LD_INT 1
7293: DEC
7294: ST_TO_ADDR
7295: LD_VAR 0 5
7299: PUSH
7300: FOR_TO
7301: IFFALSE 7383
// begin uc_side = side ;
7303: LD_ADDR_OWVAR 20
7307: PUSH
7308: LD_VAR 0 1
7312: ST_TO_ADDR
// uc_nation = nation ;
7313: LD_ADDR_OWVAR 21
7317: PUSH
7318: LD_VAR 0 2
7322: ST_TO_ADDR
// hc_name =  ;
7323: LD_ADDR_OWVAR 26
7327: PUSH
7328: LD_STRING 
7330: ST_TO_ADDR
// hc_gallery =  ;
7331: LD_ADDR_OWVAR 33
7335: PUSH
7336: LD_STRING 
7338: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
7339: LD_INT 0
7341: PPUSH
7342: LD_INT 9
7344: PPUSH
7345: LD_VAR 0 8
7349: PPUSH
7350: CALL_OW 380
// un = CreateHuman ;
7354: LD_ADDR_VAR 0 15
7358: PUSH
7359: CALL_OW 44
7363: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7364: LD_VAR 0 15
7368: PPUSH
7369: LD_VAR 0 9
7373: PPUSH
7374: LD_INT 0
7376: PPUSH
7377: CALL_OW 49
// end ;
7381: GO 7300
7383: POP
7384: POP
// for i = 1 to mortalCount do
7385: LD_ADDR_VAR 0 13
7389: PUSH
7390: DOUBLE
7391: LD_INT 1
7393: DEC
7394: ST_TO_ADDR
7395: LD_VAR 0 6
7399: PUSH
7400: FOR_TO
7401: IFFALSE 7483
// begin uc_side = side ;
7403: LD_ADDR_OWVAR 20
7407: PUSH
7408: LD_VAR 0 1
7412: ST_TO_ADDR
// uc_nation = nation ;
7413: LD_ADDR_OWVAR 21
7417: PUSH
7418: LD_VAR 0 2
7422: ST_TO_ADDR
// hc_name =  ;
7423: LD_ADDR_OWVAR 26
7427: PUSH
7428: LD_STRING 
7430: ST_TO_ADDR
// hc_gallery =  ;
7431: LD_ADDR_OWVAR 33
7435: PUSH
7436: LD_STRING 
7438: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
7439: LD_INT 0
7441: PPUSH
7442: LD_INT 8
7444: PPUSH
7445: LD_VAR 0 8
7449: PPUSH
7450: CALL_OW 380
// un = CreateHuman ;
7454: LD_ADDR_VAR 0 15
7458: PUSH
7459: CALL_OW 44
7463: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7464: LD_VAR 0 15
7468: PPUSH
7469: LD_VAR 0 9
7473: PPUSH
7474: LD_INT 0
7476: PPUSH
7477: CALL_OW 49
// end ;
7481: GO 7400
7483: POP
7484: POP
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7485: LD_ADDR_VAR 0 17
7489: PUSH
7490: LD_INT 22
7492: PUSH
7493: LD_VAR 0 1
7497: PUSH
7498: EMPTY
7499: LIST
7500: LIST
7501: PUSH
7502: LD_INT 25
7504: PUSH
7505: LD_INT 4
7507: PUSH
7508: EMPTY
7509: LIST
7510: LIST
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: PPUSH
7516: CALL_OW 69
7520: ST_TO_ADDR
// for i in medic_list do
7521: LD_ADDR_VAR 0 13
7525: PUSH
7526: LD_VAR 0 17
7530: PUSH
7531: FOR_IN
7532: IFFALSE 7567
// if GetTag ( i ) = 1 then
7534: LD_VAR 0 13
7538: PPUSH
7539: CALL_OW 110
7543: PUSH
7544: LD_INT 1
7546: EQUAL
7547: IFFALSE 7565
// medic_list := medic_list diff i ;
7549: LD_ADDR_VAR 0 17
7553: PUSH
7554: LD_VAR 0 17
7558: PUSH
7559: LD_VAR 0 13
7563: DIFF
7564: ST_TO_ADDR
7565: GO 7531
7567: POP
7568: POP
// for i in medic_list do
7569: LD_ADDR_VAR 0 13
7573: PUSH
7574: LD_VAR 0 17
7578: PUSH
7579: FOR_IN
7580: IFFALSE 7598
// ComMoveToArea ( i , healArea ) ;
7582: LD_VAR 0 13
7586: PPUSH
7587: LD_VAR 0 10
7591: PPUSH
7592: CALL_OW 113
7596: GO 7579
7598: POP
7599: POP
// repeat wait ( 0 0$1 ) ;
7600: LD_INT 35
7602: PPUSH
7603: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7607: LD_ADDR_VAR 0 16
7611: PUSH
7612: LD_INT 22
7614: PUSH
7615: LD_VAR 0 1
7619: PUSH
7620: EMPTY
7621: LIST
7622: LIST
7623: PUSH
7624: LD_INT 1
7626: PUSH
7627: LD_INT 3
7629: PUSH
7630: LD_INT 24
7632: PUSH
7633: LD_INT 550
7635: PUSH
7636: EMPTY
7637: LIST
7638: LIST
7639: PUSH
7640: EMPTY
7641: LIST
7642: LIST
7643: PUSH
7644: LD_INT 24
7646: PUSH
7647: LD_INT 250
7649: PUSH
7650: EMPTY
7651: LIST
7652: LIST
7653: PUSH
7654: EMPTY
7655: LIST
7656: LIST
7657: LIST
7658: PUSH
7659: EMPTY
7660: LIST
7661: LIST
7662: PPUSH
7663: CALL_OW 69
7667: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
7668: LD_ADDR_VAR 0 18
7672: PUSH
7673: LD_INT 22
7675: PUSH
7676: LD_VAR 0 1
7680: PUSH
7681: EMPTY
7682: LIST
7683: LIST
7684: PUSH
7685: LD_INT 2
7687: PUSH
7688: LD_INT 25
7690: PUSH
7691: LD_INT 1
7693: PUSH
7694: EMPTY
7695: LIST
7696: LIST
7697: PUSH
7698: LD_INT 25
7700: PUSH
7701: LD_INT 5
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: PUSH
7708: LD_INT 25
7710: PUSH
7711: LD_INT 8
7713: PUSH
7714: EMPTY
7715: LIST
7716: LIST
7717: PUSH
7718: LD_INT 25
7720: PUSH
7721: LD_INT 9
7723: PUSH
7724: EMPTY
7725: LIST
7726: LIST
7727: PUSH
7728: EMPTY
7729: LIST
7730: LIST
7731: LIST
7732: LIST
7733: LIST
7734: PUSH
7735: LD_INT 24
7737: PUSH
7738: LD_INT 1000
7740: PUSH
7741: EMPTY
7742: LIST
7743: LIST
7744: PUSH
7745: EMPTY
7746: LIST
7747: LIST
7748: LIST
7749: PPUSH
7750: CALL_OW 69
7754: ST_TO_ADDR
// if medicCount > 0 then
7755: LD_VAR 0 7
7759: PUSH
7760: LD_INT 0
7762: GREATER
7763: IFFALSE 7837
// begin if damageUnit_list > 0 then
7765: LD_VAR 0 16
7769: PUSH
7770: LD_INT 0
7772: GREATER
7773: IFFALSE 7837
// begin for i in damageUnit_list do
7775: LD_ADDR_VAR 0 13
7779: PUSH
7780: LD_VAR 0 16
7784: PUSH
7785: FOR_IN
7786: IFFALSE 7835
// begin ComMoveToArea ( i , healArea ) ;
7788: LD_VAR 0 13
7792: PPUSH
7793: LD_VAR 0 10
7797: PPUSH
7798: CALL_OW 113
// for j in medic_list do
7802: LD_ADDR_VAR 0 14
7806: PUSH
7807: LD_VAR 0 17
7811: PUSH
7812: FOR_IN
7813: IFFALSE 7831
// AddComHeal ( j , i ) ;
7815: LD_VAR 0 14
7819: PPUSH
7820: LD_VAR 0 13
7824: PPUSH
7825: CALL_OW 188
7829: GO 7812
7831: POP
7832: POP
// end ;
7833: GO 7785
7835: POP
7836: POP
// end ; end ; for i in soldiersOK_list do
7837: LD_ADDR_VAR 0 13
7841: PUSH
7842: LD_VAR 0 18
7846: PUSH
7847: FOR_IN
7848: IFFALSE 8024
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7850: LD_ADDR_VAR 0 21
7854: PUSH
7855: LD_INT 22
7857: PUSH
7858: LD_VAR 0 11
7862: PUSH
7863: EMPTY
7864: LIST
7865: LIST
7866: PPUSH
7867: CALL_OW 69
7871: PPUSH
7872: LD_VAR 0 13
7876: PPUSH
7877: CALL_OW 74
7881: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7882: LD_ADDR_VAR 0 22
7886: PUSH
7887: LD_INT 22
7889: PUSH
7890: LD_VAR 0 11
7894: PUSH
7895: EMPTY
7896: LIST
7897: LIST
7898: PUSH
7899: LD_INT 2
7901: PUSH
7902: LD_INT 59
7904: PUSH
7905: EMPTY
7906: LIST
7907: PUSH
7908: LD_INT 21
7910: PUSH
7911: LD_INT 1
7913: PUSH
7914: EMPTY
7915: LIST
7916: LIST
7917: PUSH
7918: LD_INT 21
7920: PUSH
7921: LD_INT 2
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: PUSH
7928: EMPTY
7929: LIST
7930: LIST
7931: LIST
7932: LIST
7933: PUSH
7934: EMPTY
7935: LIST
7936: LIST
7937: PUSH
7938: EMPTY
7939: LIST
7940: PPUSH
7941: CALL_OW 69
7945: PPUSH
7946: LD_VAR 0 13
7950: PPUSH
7951: CALL_OW 74
7955: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7956: LD_VAR 0 13
7960: PPUSH
7961: LD_VAR 0 21
7965: PPUSH
7966: CALL_OW 296
7970: PUSH
7971: LD_INT 8
7973: PLUS
7974: PUSH
7975: LD_VAR 0 13
7979: PPUSH
7980: LD_VAR 0 22
7984: PPUSH
7985: CALL_OW 296
7989: LESS
7990: IFFALSE 8008
// begin ComAttackUnit ( i , target1 ) ;
7992: LD_VAR 0 13
7996: PPUSH
7997: LD_VAR 0 21
8001: PPUSH
8002: CALL_OW 115
// end else
8006: GO 8022
// begin ComAttackUnit ( i , target2 ) ;
8008: LD_VAR 0 13
8012: PPUSH
8013: LD_VAR 0 22
8017: PPUSH
8018: CALL_OW 115
// end ; end ;
8022: GO 7847
8024: POP
8025: POP
// until soldiersOK_list = [ ] ;
8026: LD_VAR 0 18
8030: PUSH
8031: EMPTY
8032: EQUAL
8033: IFFALSE 7600
// end ;
8035: LD_VAR 0 12
8039: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
8040: LD_INT 0
8042: PPUSH
8043: PPUSH
8044: PPUSH
8045: PPUSH
8046: PPUSH
8047: PPUSH
8048: PPUSH
8049: PPUSH
8050: PPUSH
8051: PPUSH
8052: PPUSH
// amChassisTab = [ ] ;
8053: LD_ADDR_VAR 0 19
8057: PUSH
8058: EMPTY
8059: ST_TO_ADDR
// arChassisTab = [ ] ;
8060: LD_ADDR_VAR 0 18
8064: PUSH
8065: EMPTY
8066: ST_TO_ADDR
// ruChassisTab = [ ] ;
8067: LD_ADDR_VAR 0 17
8071: PUSH
8072: EMPTY
8073: ST_TO_ADDR
// for i = 1 to vehCount do
8074: LD_ADDR_VAR 0 13
8078: PUSH
8079: DOUBLE
8080: LD_INT 1
8082: DEC
8083: ST_TO_ADDR
8084: LD_VAR 0 3
8088: PUSH
8089: FOR_TO
8090: IFFALSE 9514
// begin wait ( 0 0$01 ) ;
8092: LD_INT 35
8094: PPUSH
8095: CALL_OW 67
// if nation = 1 then
8099: LD_VAR 0 5
8103: PUSH
8104: LD_INT 1
8106: EQUAL
8107: IFFALSE 8588
// begin uc_side = side ;
8109: LD_ADDR_OWVAR 20
8113: PUSH
8114: LD_VAR 0 2
8118: ST_TO_ADDR
// uc_nation = nation ;
8119: LD_ADDR_OWVAR 21
8123: PUSH
8124: LD_VAR 0 5
8128: ST_TO_ADDR
// vc_engine = vehengine ;
8129: LD_ADDR_OWVAR 39
8133: PUSH
8134: LD_VAR 0 6
8138: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
8139: LD_ADDR_OWVAR 40
8143: PUSH
8144: LD_VAR 0 10
8148: PUSH
8149: LD_INT 1
8151: PPUSH
8152: LD_VAR 0 10
8156: PPUSH
8157: CALL_OW 12
8161: ARRAY
8162: ST_TO_ADDR
// for j = 1 to AMWeapon do
8163: LD_ADDR_VAR 0 14
8167: PUSH
8168: DOUBLE
8169: LD_INT 1
8171: DEC
8172: ST_TO_ADDR
8173: LD_VAR 0 10
8177: PUSH
8178: FOR_TO
8179: IFFALSE 8480
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
8181: LD_VAR 0 10
8185: PUSH
8186: LD_VAR 0 14
8190: ARRAY
8191: PUSH
8192: LD_INT 2
8194: EQUAL
8195: PUSH
8196: LD_VAR 0 10
8200: PUSH
8201: LD_VAR 0 14
8205: ARRAY
8206: PUSH
8207: LD_INT 3
8209: EQUAL
8210: OR
8211: IFFALSE 8264
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
8213: LD_ADDR_VAR 0 19
8217: PUSH
8218: LD_INT 1
8220: PUSH
8221: LD_INT 2
8223: PUSH
8224: LD_INT 3
8226: PUSH
8227: LD_INT 4
8229: PUSH
8230: LD_INT 5
8232: PUSH
8233: EMPTY
8234: LIST
8235: LIST
8236: LIST
8237: LIST
8238: LIST
8239: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8240: LD_ADDR_OWVAR 37
8244: PUSH
8245: LD_VAR 0 19
8249: PUSH
8250: LD_INT 1
8252: PPUSH
8253: LD_VAR 0 19
8257: PPUSH
8258: CALL_OW 12
8262: ARRAY
8263: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
8264: LD_VAR 0 10
8268: PUSH
8269: LD_VAR 0 14
8273: ARRAY
8274: PUSH
8275: LD_INT 4
8277: EQUAL
8278: PUSH
8279: LD_VAR 0 10
8283: PUSH
8284: LD_VAR 0 14
8288: ARRAY
8289: PUSH
8290: LD_INT 5
8292: EQUAL
8293: OR
8294: PUSH
8295: LD_VAR 0 10
8299: PUSH
8300: LD_VAR 0 14
8304: ARRAY
8305: PUSH
8306: LD_INT 9
8308: EQUAL
8309: OR
8310: PUSH
8311: LD_VAR 0 10
8315: PUSH
8316: LD_VAR 0 14
8320: ARRAY
8321: PUSH
8322: LD_INT 11
8324: EQUAL
8325: OR
8326: PUSH
8327: LD_VAR 0 10
8331: PUSH
8332: LD_VAR 0 14
8336: ARRAY
8337: PUSH
8338: LD_INT 7
8340: EQUAL
8341: OR
8342: IFFALSE 8391
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
8344: LD_ADDR_VAR 0 19
8348: PUSH
8349: LD_INT 2
8351: PUSH
8352: LD_INT 3
8354: PUSH
8355: LD_INT 4
8357: PUSH
8358: LD_INT 5
8360: PUSH
8361: EMPTY
8362: LIST
8363: LIST
8364: LIST
8365: LIST
8366: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8367: LD_ADDR_OWVAR 37
8371: PUSH
8372: LD_VAR 0 19
8376: PUSH
8377: LD_INT 1
8379: PPUSH
8380: LD_VAR 0 19
8384: PPUSH
8385: CALL_OW 12
8389: ARRAY
8390: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
8391: LD_VAR 0 10
8395: PUSH
8396: LD_VAR 0 14
8400: ARRAY
8401: PUSH
8402: LD_INT 8
8404: EQUAL
8405: PUSH
8406: LD_VAR 0 10
8410: PUSH
8411: LD_VAR 0 14
8415: ARRAY
8416: PUSH
8417: LD_INT 6
8419: EQUAL
8420: OR
8421: PUSH
8422: LD_VAR 0 10
8426: PUSH
8427: LD_VAR 0 14
8431: ARRAY
8432: PUSH
8433: LD_INT 10
8435: EQUAL
8436: OR
8437: IFFALSE 8478
// begin amChassisTab = [ 4 , 5 ] ;
8439: LD_ADDR_VAR 0 19
8443: PUSH
8444: LD_INT 4
8446: PUSH
8447: LD_INT 5
8449: PUSH
8450: EMPTY
8451: LIST
8452: LIST
8453: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8454: LD_ADDR_OWVAR 37
8458: PUSH
8459: LD_VAR 0 19
8463: PUSH
8464: LD_INT 1
8466: PPUSH
8467: LD_VAR 0 19
8471: PPUSH
8472: CALL_OW 12
8476: ARRAY
8477: ST_TO_ADDR
// end ; end ;
8478: GO 8178
8480: POP
8481: POP
// veh = CreateVehicle ;
8482: LD_ADDR_VAR 0 16
8486: PUSH
8487: CALL_OW 45
8491: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8492: LD_VAR 0 16
8496: PPUSH
8497: LD_VAR 0 1
8501: PPUSH
8502: LD_INT 0
8504: PPUSH
8505: CALL_OW 49
// if vc_control = 1 then
8509: LD_OWVAR 38
8513: PUSH
8514: LD_INT 1
8516: EQUAL
8517: IFFALSE 8574
// begin hc_gallery =  ;
8519: LD_ADDR_OWVAR 33
8523: PUSH
8524: LD_STRING 
8526: ST_TO_ADDR
// hc_name =  ;
8527: LD_ADDR_OWVAR 26
8531: PUSH
8532: LD_STRING 
8534: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8535: LD_INT 0
8537: PPUSH
8538: LD_INT 3
8540: PPUSH
8541: LD_VAR 0 4
8545: PPUSH
8546: CALL_OW 380
// un = CreateHuman ;
8550: LD_ADDR_VAR 0 15
8554: PUSH
8555: CALL_OW 44
8559: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8560: LD_VAR 0 15
8564: PPUSH
8565: LD_VAR 0 16
8569: PPUSH
8570: CALL_OW 52
// end ; i = i + 1 ;
8574: LD_ADDR_VAR 0 13
8578: PUSH
8579: LD_VAR 0 13
8583: PUSH
8584: LD_INT 1
8586: PLUS
8587: ST_TO_ADDR
// end ; if nation = 2 then
8588: LD_VAR 0 5
8592: PUSH
8593: LD_INT 2
8595: EQUAL
8596: IFFALSE 9098
// begin uc_side = side ;
8598: LD_ADDR_OWVAR 20
8602: PUSH
8603: LD_VAR 0 2
8607: ST_TO_ADDR
// uc_nation = nation ;
8608: LD_ADDR_OWVAR 21
8612: PUSH
8613: LD_VAR 0 5
8617: ST_TO_ADDR
// vc_engine = vehengine ;
8618: LD_ADDR_OWVAR 39
8622: PUSH
8623: LD_VAR 0 6
8627: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] , [ f_ok ] ] ) <= 8 then
8628: LD_INT 22
8630: PUSH
8631: LD_VAR 0 2
8635: PUSH
8636: EMPTY
8637: LIST
8638: LIST
8639: PUSH
8640: LD_INT 21
8642: PUSH
8643: LD_INT 2
8645: PUSH
8646: EMPTY
8647: LIST
8648: LIST
8649: PUSH
8650: LD_INT 33
8652: PUSH
8653: LD_INT 2
8655: PUSH
8656: EMPTY
8657: LIST
8658: LIST
8659: PUSH
8660: LD_INT 50
8662: PUSH
8663: EMPTY
8664: LIST
8665: PUSH
8666: EMPTY
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: PPUSH
8672: CALL_OW 69
8676: PUSH
8677: LD_INT 8
8679: LESSEQUAL
8680: IFFALSE 8708
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] else
8682: LD_ADDR_OWVAR 38
8686: PUSH
8687: LD_VAR 0 7
8691: PUSH
8692: LD_INT 1
8694: PPUSH
8695: LD_VAR 0 7
8699: PPUSH
8700: CALL_OW 12
8704: ARRAY
8705: ST_TO_ADDR
8706: GO 8716
// vc_control = control_apeman ;
8708: LD_ADDR_OWVAR 38
8712: PUSH
8713: LD_INT 5
8715: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
8716: LD_ADDR_OWVAR 40
8720: PUSH
8721: LD_VAR 0 9
8725: PUSH
8726: LD_INT 1
8728: PPUSH
8729: LD_VAR 0 9
8733: PPUSH
8734: CALL_OW 12
8738: ARRAY
8739: ST_TO_ADDR
// for j = 1 to ARWeapons do
8740: LD_ADDR_VAR 0 14
8744: PUSH
8745: DOUBLE
8746: LD_INT 1
8748: DEC
8749: ST_TO_ADDR
8750: LD_VAR 0 9
8754: PUSH
8755: FOR_TO
8756: IFFALSE 8990
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
8758: LD_VAR 0 9
8762: PUSH
8763: LD_VAR 0 14
8767: ARRAY
8768: PUSH
8769: LD_INT 24
8771: EQUAL
8772: PUSH
8773: LD_VAR 0 9
8777: PUSH
8778: LD_VAR 0 14
8782: ARRAY
8783: PUSH
8784: LD_INT 22
8786: EQUAL
8787: OR
8788: PUSH
8789: LD_VAR 0 9
8793: PUSH
8794: LD_VAR 0 14
8798: ARRAY
8799: PUSH
8800: LD_INT 23
8802: EQUAL
8803: OR
8804: PUSH
8805: LD_VAR 0 9
8809: PUSH
8810: LD_VAR 0 14
8814: ARRAY
8815: PUSH
8816: LD_INT 30
8818: EQUAL
8819: OR
8820: IFFALSE 8869
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
8822: LD_ADDR_VAR 0 18
8826: PUSH
8827: LD_INT 11
8829: PUSH
8830: LD_INT 12
8832: PUSH
8833: LD_INT 13
8835: PUSH
8836: LD_INT 14
8838: PUSH
8839: EMPTY
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8845: LD_ADDR_OWVAR 37
8849: PUSH
8850: LD_VAR 0 18
8854: PUSH
8855: LD_INT 1
8857: PPUSH
8858: LD_VAR 0 18
8862: PPUSH
8863: CALL_OW 12
8867: ARRAY
8868: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
8869: LD_VAR 0 9
8873: PUSH
8874: LD_VAR 0 14
8878: ARRAY
8879: PUSH
8880: LD_INT 29
8882: EQUAL
8883: PUSH
8884: LD_VAR 0 9
8888: PUSH
8889: LD_VAR 0 14
8893: ARRAY
8894: PUSH
8895: LD_INT 28
8897: EQUAL
8898: OR
8899: PUSH
8900: LD_VAR 0 9
8904: PUSH
8905: LD_VAR 0 14
8909: ARRAY
8910: PUSH
8911: LD_INT 27
8913: EQUAL
8914: OR
8915: PUSH
8916: LD_VAR 0 9
8920: PUSH
8921: LD_VAR 0 14
8925: ARRAY
8926: PUSH
8927: LD_INT 26
8929: EQUAL
8930: OR
8931: PUSH
8932: LD_VAR 0 9
8936: PUSH
8937: LD_VAR 0 14
8941: ARRAY
8942: PUSH
8943: LD_INT 25
8945: EQUAL
8946: OR
8947: IFFALSE 8988
// begin arChassisTab = [ 13 , 14 ] ;
8949: LD_ADDR_VAR 0 18
8953: PUSH
8954: LD_INT 13
8956: PUSH
8957: LD_INT 14
8959: PUSH
8960: EMPTY
8961: LIST
8962: LIST
8963: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8964: LD_ADDR_OWVAR 37
8968: PUSH
8969: LD_VAR 0 18
8973: PUSH
8974: LD_INT 1
8976: PPUSH
8977: LD_VAR 0 18
8981: PPUSH
8982: CALL_OW 12
8986: ARRAY
8987: ST_TO_ADDR
// end ; end ;
8988: GO 8755
8990: POP
8991: POP
// veh = CreateVehicle ;
8992: LD_ADDR_VAR 0 16
8996: PUSH
8997: CALL_OW 45
9001: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9002: LD_VAR 0 16
9006: PPUSH
9007: LD_VAR 0 1
9011: PPUSH
9012: LD_INT 0
9014: PPUSH
9015: CALL_OW 49
// if vc_control = 1 then
9019: LD_OWVAR 38
9023: PUSH
9024: LD_INT 1
9026: EQUAL
9027: IFFALSE 9084
// begin hc_gallery =  ;
9029: LD_ADDR_OWVAR 33
9033: PUSH
9034: LD_STRING 
9036: ST_TO_ADDR
// hc_name =  ;
9037: LD_ADDR_OWVAR 26
9041: PUSH
9042: LD_STRING 
9044: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9045: LD_INT 0
9047: PPUSH
9048: LD_INT 3
9050: PPUSH
9051: LD_VAR 0 4
9055: PPUSH
9056: CALL_OW 380
// un = CreateHuman ;
9060: LD_ADDR_VAR 0 15
9064: PUSH
9065: CALL_OW 44
9069: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9070: LD_VAR 0 15
9074: PPUSH
9075: LD_VAR 0 16
9079: PPUSH
9080: CALL_OW 52
// end ; i = i + 1 ;
9084: LD_ADDR_VAR 0 13
9088: PUSH
9089: LD_VAR 0 13
9093: PUSH
9094: LD_INT 1
9096: PLUS
9097: ST_TO_ADDR
// end ; if nation = 3 then
9098: LD_VAR 0 5
9102: PUSH
9103: LD_INT 3
9105: EQUAL
9106: IFFALSE 9512
// begin uc_side = side ;
9108: LD_ADDR_OWVAR 20
9112: PUSH
9113: LD_VAR 0 2
9117: ST_TO_ADDR
// uc_nation = nation ;
9118: LD_ADDR_OWVAR 21
9122: PUSH
9123: LD_VAR 0 5
9127: ST_TO_ADDR
// vc_engine = vehengine ;
9128: LD_ADDR_OWVAR 39
9132: PUSH
9133: LD_VAR 0 6
9137: ST_TO_ADDR
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] ;
9138: LD_ADDR_OWVAR 38
9142: PUSH
9143: LD_VAR 0 7
9147: PUSH
9148: LD_INT 1
9150: PPUSH
9151: LD_VAR 0 7
9155: PPUSH
9156: CALL_OW 12
9160: ARRAY
9161: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
9162: LD_ADDR_OWVAR 40
9166: PUSH
9167: LD_VAR 0 8
9171: PUSH
9172: LD_INT 1
9174: PPUSH
9175: LD_VAR 0 8
9179: PPUSH
9180: CALL_OW 12
9184: ARRAY
9185: ST_TO_ADDR
// for j = 1 to RuWeapons do
9186: LD_ADDR_VAR 0 14
9190: PUSH
9191: DOUBLE
9192: LD_INT 1
9194: DEC
9195: ST_TO_ADDR
9196: LD_VAR 0 8
9200: PUSH
9201: FOR_TO
9202: IFFALSE 9388
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
9204: LD_VAR 0 8
9208: PUSH
9209: LD_VAR 0 14
9213: ARRAY
9214: PUSH
9215: LD_INT 42
9217: EQUAL
9218: PUSH
9219: LD_VAR 0 8
9223: PUSH
9224: LD_VAR 0 14
9228: ARRAY
9229: PUSH
9230: LD_INT 43
9232: EQUAL
9233: OR
9234: PUSH
9235: LD_VAR 0 8
9239: PUSH
9240: LD_VAR 0 14
9244: ARRAY
9245: PUSH
9246: LD_INT 44
9248: EQUAL
9249: OR
9250: PUSH
9251: LD_VAR 0 8
9255: PUSH
9256: LD_VAR 0 14
9260: ARRAY
9261: PUSH
9262: LD_INT 45
9264: EQUAL
9265: OR
9266: PUSH
9267: LD_VAR 0 8
9271: PUSH
9272: LD_VAR 0 14
9276: ARRAY
9277: PUSH
9278: LD_INT 49
9280: EQUAL
9281: OR
9282: IFFALSE 9319
// begin ruChassisTab = [ 24 ] ;
9284: LD_ADDR_VAR 0 17
9288: PUSH
9289: LD_INT 24
9291: PUSH
9292: EMPTY
9293: LIST
9294: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9295: LD_ADDR_OWVAR 37
9299: PUSH
9300: LD_VAR 0 17
9304: PUSH
9305: LD_INT 1
9307: PPUSH
9308: LD_VAR 0 17
9312: PPUSH
9313: CALL_OW 12
9317: ARRAY
9318: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
9319: LD_VAR 0 8
9323: PUSH
9324: LD_VAR 0 14
9328: ARRAY
9329: PUSH
9330: LD_INT 46
9332: EQUAL
9333: PUSH
9334: LD_VAR 0 8
9338: PUSH
9339: LD_VAR 0 14
9343: ARRAY
9344: PUSH
9345: LD_INT 47
9347: EQUAL
9348: OR
9349: IFFALSE 9386
// begin ruChassisTab = [ 24 ] ;
9351: LD_ADDR_VAR 0 17
9355: PUSH
9356: LD_INT 24
9358: PUSH
9359: EMPTY
9360: LIST
9361: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9362: LD_ADDR_OWVAR 37
9366: PUSH
9367: LD_VAR 0 17
9371: PUSH
9372: LD_INT 1
9374: PPUSH
9375: LD_VAR 0 17
9379: PPUSH
9380: CALL_OW 12
9384: ARRAY
9385: ST_TO_ADDR
// end ; end ;
9386: GO 9201
9388: POP
9389: POP
// veh = CreateVehicle ;
9390: LD_ADDR_VAR 0 16
9394: PUSH
9395: CALL_OW 45
9399: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9400: LD_VAR 0 16
9404: PPUSH
9405: LD_VAR 0 1
9409: PPUSH
9410: LD_INT 0
9412: PPUSH
9413: CALL_OW 49
// if vc_control = 1 then
9417: LD_OWVAR 38
9421: PUSH
9422: LD_INT 1
9424: EQUAL
9425: IFFALSE 9512
// begin if uc_side = 8 then
9427: LD_OWVAR 20
9431: PUSH
9432: LD_INT 8
9434: EQUAL
9435: IFFALSE 9447
// uc_nation = 2 else
9437: LD_ADDR_OWVAR 21
9441: PUSH
9442: LD_INT 2
9444: ST_TO_ADDR
9445: GO 9457
// uc_nation = nation ;
9447: LD_ADDR_OWVAR 21
9451: PUSH
9452: LD_VAR 0 5
9456: ST_TO_ADDR
// hc_gallery =  ;
9457: LD_ADDR_OWVAR 33
9461: PUSH
9462: LD_STRING 
9464: ST_TO_ADDR
// hc_name =  ;
9465: LD_ADDR_OWVAR 26
9469: PUSH
9470: LD_STRING 
9472: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9473: LD_INT 0
9475: PPUSH
9476: LD_INT 3
9478: PPUSH
9479: LD_VAR 0 4
9483: PPUSH
9484: CALL_OW 380
// un = CreateHuman ;
9488: LD_ADDR_VAR 0 15
9492: PUSH
9493: CALL_OW 44
9497: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9498: LD_VAR 0 15
9502: PPUSH
9503: LD_VAR 0 16
9507: PPUSH
9508: CALL_OW 52
// end ; end ; end ;
9512: GO 8089
9514: POP
9515: POP
// repeat wait ( 0 0$1 ) ;
9516: LD_INT 35
9518: PPUSH
9519: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 25 ] , [ f_weapon , 26 ] , [ f_weapon , 27 ] , [ f_weapon , 28 ] , [ f_weapon , 29 ] , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) ;
9523: LD_ADDR_VAR 0 20
9527: PUSH
9528: LD_INT 22
9530: PUSH
9531: LD_VAR 0 2
9535: PUSH
9536: EMPTY
9537: LIST
9538: LIST
9539: PUSH
9540: LD_INT 21
9542: PUSH
9543: LD_INT 2
9545: PUSH
9546: EMPTY
9547: LIST
9548: LIST
9549: PUSH
9550: LD_INT 24
9552: PUSH
9553: LD_INT 250
9555: PUSH
9556: EMPTY
9557: LIST
9558: LIST
9559: PUSH
9560: LD_INT 2
9562: PUSH
9563: LD_INT 34
9565: PUSH
9566: LD_INT 25
9568: PUSH
9569: EMPTY
9570: LIST
9571: LIST
9572: PUSH
9573: LD_INT 34
9575: PUSH
9576: LD_INT 26
9578: PUSH
9579: EMPTY
9580: LIST
9581: LIST
9582: PUSH
9583: LD_INT 34
9585: PUSH
9586: LD_INT 27
9588: PUSH
9589: EMPTY
9590: LIST
9591: LIST
9592: PUSH
9593: LD_INT 34
9595: PUSH
9596: LD_INT 28
9598: PUSH
9599: EMPTY
9600: LIST
9601: LIST
9602: PUSH
9603: LD_INT 34
9605: PUSH
9606: LD_INT 29
9608: PUSH
9609: EMPTY
9610: LIST
9611: LIST
9612: PUSH
9613: LD_INT 34
9615: PUSH
9616: LD_INT 46
9618: PUSH
9619: EMPTY
9620: LIST
9621: LIST
9622: PUSH
9623: LD_INT 34
9625: PUSH
9626: LD_INT 44
9628: PUSH
9629: EMPTY
9630: LIST
9631: LIST
9632: PUSH
9633: LD_INT 34
9635: PUSH
9636: LD_INT 45
9638: PUSH
9639: EMPTY
9640: LIST
9641: LIST
9642: PUSH
9643: LD_INT 34
9645: PUSH
9646: LD_INT 47
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: PUSH
9653: EMPTY
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: PUSH
9665: EMPTY
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: PPUSH
9671: CALL_OW 69
9675: ST_TO_ADDR
// if vehicleOK_list > 0 then
9676: LD_VAR 0 20
9680: PUSH
9681: LD_INT 0
9683: GREATER
9684: IFFALSE 9903
// begin for i in vehicleOK_list do
9686: LD_ADDR_VAR 0 13
9690: PUSH
9691: LD_VAR 0 20
9695: PUSH
9696: FOR_IN
9697: IFFALSE 9901
// begin if GetSide ( i ) <> side then
9699: LD_VAR 0 13
9703: PPUSH
9704: CALL_OW 255
9708: PUSH
9709: LD_VAR 0 2
9713: NONEQUAL
9714: IFFALSE 9727
// begin ComStop ( i ) ;
9716: LD_VAR 0 13
9720: PPUSH
9721: CALL_OW 141
// continue ;
9725: GO 9696
// end ; target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9727: LD_ADDR_VAR 0 21
9731: PUSH
9732: LD_INT 22
9734: PUSH
9735: LD_VAR 0 11
9739: PUSH
9740: EMPTY
9741: LIST
9742: LIST
9743: PPUSH
9744: CALL_OW 69
9748: PPUSH
9749: LD_VAR 0 13
9753: PPUSH
9754: CALL_OW 74
9758: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9759: LD_ADDR_VAR 0 22
9763: PUSH
9764: LD_INT 22
9766: PUSH
9767: LD_VAR 0 11
9771: PUSH
9772: EMPTY
9773: LIST
9774: LIST
9775: PUSH
9776: LD_INT 2
9778: PUSH
9779: LD_INT 59
9781: PUSH
9782: EMPTY
9783: LIST
9784: PUSH
9785: LD_INT 21
9787: PUSH
9788: LD_INT 1
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: PUSH
9795: LD_INT 21
9797: PUSH
9798: LD_INT 2
9800: PUSH
9801: EMPTY
9802: LIST
9803: LIST
9804: PUSH
9805: EMPTY
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: PUSH
9811: EMPTY
9812: LIST
9813: LIST
9814: PUSH
9815: EMPTY
9816: LIST
9817: PPUSH
9818: CALL_OW 69
9822: PPUSH
9823: LD_VAR 0 13
9827: PPUSH
9828: CALL_OW 74
9832: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9833: LD_VAR 0 13
9837: PPUSH
9838: LD_VAR 0 21
9842: PPUSH
9843: CALL_OW 296
9847: PUSH
9848: LD_INT 8
9850: PLUS
9851: PUSH
9852: LD_VAR 0 13
9856: PPUSH
9857: LD_VAR 0 22
9861: PPUSH
9862: CALL_OW 296
9866: LESS
9867: IFFALSE 9885
// begin ComAttackUnit ( i , target1 ) ;
9869: LD_VAR 0 13
9873: PPUSH
9874: LD_VAR 0 21
9878: PPUSH
9879: CALL_OW 115
// end else
9883: GO 9899
// begin ComAttackUnit ( i , target2 ) ;
9885: LD_VAR 0 13
9889: PPUSH
9890: LD_VAR 0 22
9894: PPUSH
9895: CALL_OW 115
// end ; end ;
9899: GO 9696
9901: POP
9902: POP
// end ; until vehicleOK_list = 0 ;
9903: LD_VAR 0 20
9907: PUSH
9908: LD_INT 0
9910: EQUAL
9911: IFFALSE 9516
// end ;
9913: LD_VAR 0 12
9917: RET
// export function AttackSelfBomb ( side , targetSide ) ; var i , veh , veh_List , target1 , target2 ; begin
9918: LD_INT 0
9920: PPUSH
9921: PPUSH
9922: PPUSH
9923: PPUSH
9924: PPUSH
9925: PPUSH
// veh_List = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , 29 ] ] ) ;
9926: LD_ADDR_VAR 0 6
9930: PUSH
9931: LD_INT 22
9933: PUSH
9934: LD_VAR 0 1
9938: PUSH
9939: EMPTY
9940: LIST
9941: LIST
9942: PUSH
9943: LD_INT 34
9945: PUSH
9946: LD_INT 29
9948: PUSH
9949: EMPTY
9950: LIST
9951: LIST
9952: PUSH
9953: EMPTY
9954: LIST
9955: LIST
9956: PPUSH
9957: CALL_OW 69
9961: ST_TO_ADDR
// if veh_list = 0 then
9962: LD_VAR 0 6
9966: PUSH
9967: LD_INT 0
9969: EQUAL
9970: IFFALSE 9974
// exit ;
9972: GO 10179
// if veh_list > 0 then
9974: LD_VAR 0 6
9978: PUSH
9979: LD_INT 0
9981: GREATER
9982: IFFALSE 10179
// begin for i in veh_List do
9984: LD_ADDR_VAR 0 4
9988: PUSH
9989: LD_VAR 0 6
9993: PUSH
9994: FOR_IN
9995: IFFALSE 10177
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_lives , 250 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9997: LD_ADDR_VAR 0 7
10001: PUSH
10002: LD_INT 22
10004: PUSH
10005: LD_VAR 0 2
10009: PUSH
10010: EMPTY
10011: LIST
10012: LIST
10013: PUSH
10014: LD_INT 24
10016: PUSH
10017: LD_INT 250
10019: PUSH
10020: EMPTY
10021: LIST
10022: LIST
10023: PUSH
10024: LD_INT 2
10026: PUSH
10027: LD_INT 59
10029: PUSH
10030: EMPTY
10031: LIST
10032: PUSH
10033: LD_INT 21
10035: PUSH
10036: LD_INT 1
10038: PUSH
10039: EMPTY
10040: LIST
10041: LIST
10042: PUSH
10043: LD_INT 21
10045: PUSH
10046: LD_INT 2
10048: PUSH
10049: EMPTY
10050: LIST
10051: LIST
10052: PUSH
10053: EMPTY
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: PUSH
10059: EMPTY
10060: LIST
10061: LIST
10062: LIST
10063: PUSH
10064: EMPTY
10065: LIST
10066: PPUSH
10067: CALL_OW 69
10071: PPUSH
10072: LD_VAR 0 4
10076: PPUSH
10077: CALL_OW 74
10081: ST_TO_ADDR
// ComAttackUnit ( i , target1 ) ;
10082: LD_VAR 0 4
10086: PPUSH
10087: LD_VAR 0 7
10091: PPUSH
10092: CALL_OW 115
// if not HasTask ( i ) then
10096: LD_VAR 0 4
10100: PPUSH
10101: CALL_OW 314
10105: NOT
10106: IFFALSE 10175
// begin wait ( 0 0$0.1 ) ;
10108: LD_INT 4
10110: PPUSH
10111: CALL_OW 67
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , targetSide ] , [ f_lives , 250 ] ] ) , i ) ;
10115: LD_ADDR_VAR 0 8
10119: PUSH
10120: LD_INT 22
10122: PUSH
10123: LD_VAR 0 2
10127: PUSH
10128: EMPTY
10129: LIST
10130: LIST
10131: PUSH
10132: LD_INT 24
10134: PUSH
10135: LD_INT 250
10137: PUSH
10138: EMPTY
10139: LIST
10140: LIST
10141: PUSH
10142: EMPTY
10143: LIST
10144: LIST
10145: PPUSH
10146: CALL_OW 69
10150: PPUSH
10151: LD_VAR 0 4
10155: PPUSH
10156: CALL_OW 74
10160: ST_TO_ADDR
// ComAttackUnit ( i , target2 ) ;
10161: LD_VAR 0 4
10165: PPUSH
10166: LD_VAR 0 8
10170: PPUSH
10171: CALL_OW 115
// end ; end ;
10175: GO 9994
10177: POP
10178: POP
// end ; end ; end_of_file
10179: LD_VAR 0 3
10183: RET
// every 0 0$1 do
10184: GO 10186
10186: DISABLE
// begin enable ;
10187: ENABLE
// IntBazooka ( 7 , 1 ) ;
10188: LD_INT 7
10190: PPUSH
10191: LD_INT 1
10193: PPUSH
10194: CALL 6624 0 2
// AttackSelfBomb ( 8 , 1 ) ;
10198: LD_INT 8
10200: PPUSH
10201: LD_INT 1
10203: PPUSH
10204: CALL 9918 0 2
// end ;
10208: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , 49 ] ] ) > 0 do var veh , spow ;
10209: LD_INT 22
10211: PUSH
10212: LD_INT 3
10214: PUSH
10215: EMPTY
10216: LIST
10217: LIST
10218: PUSH
10219: LD_INT 21
10221: PUSH
10222: LD_INT 2
10224: PUSH
10225: EMPTY
10226: LIST
10227: LIST
10228: PUSH
10229: LD_INT 50
10231: PUSH
10232: EMPTY
10233: LIST
10234: PUSH
10235: LD_INT 2
10237: PUSH
10238: LD_INT 34
10240: PUSH
10241: LD_INT 46
10243: PUSH
10244: EMPTY
10245: LIST
10246: LIST
10247: PUSH
10248: LD_INT 34
10250: PUSH
10251: LD_INT 44
10253: PUSH
10254: EMPTY
10255: LIST
10256: LIST
10257: PUSH
10258: LD_INT 34
10260: PUSH
10261: LD_INT 45
10263: PUSH
10264: EMPTY
10265: LIST
10266: LIST
10267: PUSH
10268: LD_INT 34
10270: PUSH
10271: LD_INT 47
10273: PUSH
10274: EMPTY
10275: LIST
10276: LIST
10277: PUSH
10278: EMPTY
10279: LIST
10280: LIST
10281: LIST
10282: LIST
10283: LIST
10284: PUSH
10285: EMPTY
10286: LIST
10287: LIST
10288: LIST
10289: LIST
10290: PPUSH
10291: CALL_OW 69
10295: PUSH
10296: LD_INT 0
10298: GREATER
10299: PUSH
10300: LD_INT 22
10302: PUSH
10303: LD_INT 3
10305: PUSH
10306: EMPTY
10307: LIST
10308: LIST
10309: PUSH
10310: LD_INT 21
10312: PUSH
10313: LD_INT 2
10315: PUSH
10316: EMPTY
10317: LIST
10318: LIST
10319: PUSH
10320: LD_INT 50
10322: PUSH
10323: EMPTY
10324: LIST
10325: PUSH
10326: LD_INT 34
10328: PUSH
10329: LD_INT 49
10331: PUSH
10332: EMPTY
10333: LIST
10334: LIST
10335: PUSH
10336: EMPTY
10337: LIST
10338: LIST
10339: LIST
10340: LIST
10341: PPUSH
10342: CALL_OW 69
10346: PUSH
10347: LD_INT 0
10349: GREATER
10350: AND
10351: IFFALSE 10523
10353: GO 10355
10355: DISABLE
10356: LD_INT 0
10358: PPUSH
10359: PPUSH
// begin enable ;
10360: ENABLE
// veh = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) ;
10361: LD_ADDR_VAR 0 1
10365: PUSH
10366: LD_INT 22
10368: PUSH
10369: LD_INT 3
10371: PUSH
10372: EMPTY
10373: LIST
10374: LIST
10375: PUSH
10376: LD_INT 21
10378: PUSH
10379: LD_INT 2
10381: PUSH
10382: EMPTY
10383: LIST
10384: LIST
10385: PUSH
10386: LD_INT 50
10388: PUSH
10389: EMPTY
10390: LIST
10391: PUSH
10392: LD_INT 2
10394: PUSH
10395: LD_INT 34
10397: PUSH
10398: LD_INT 46
10400: PUSH
10401: EMPTY
10402: LIST
10403: LIST
10404: PUSH
10405: LD_INT 34
10407: PUSH
10408: LD_INT 44
10410: PUSH
10411: EMPTY
10412: LIST
10413: LIST
10414: PUSH
10415: LD_INT 34
10417: PUSH
10418: LD_INT 45
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: PUSH
10425: LD_INT 34
10427: PUSH
10428: LD_INT 47
10430: PUSH
10431: EMPTY
10432: LIST
10433: LIST
10434: PUSH
10435: EMPTY
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: PUSH
10442: EMPTY
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: PPUSH
10448: CALL_OW 69
10452: ST_TO_ADDR
// spow = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , 49 ] ] ) ;
10453: LD_ADDR_VAR 0 2
10457: PUSH
10458: LD_INT 22
10460: PUSH
10461: LD_INT 3
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: PUSH
10468: LD_INT 21
10470: PUSH
10471: LD_INT 2
10473: PUSH
10474: EMPTY
10475: LIST
10476: LIST
10477: PUSH
10478: LD_INT 50
10480: PUSH
10481: EMPTY
10482: LIST
10483: PUSH
10484: LD_INT 34
10486: PUSH
10487: LD_INT 49
10489: PUSH
10490: EMPTY
10491: LIST
10492: LIST
10493: PUSH
10494: EMPTY
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: PPUSH
10500: CALL_OW 69
10504: ST_TO_ADDR
// ComMoveUnit ( spow , veh [ 1 ] ) ;
10505: LD_VAR 0 2
10509: PPUSH
10510: LD_VAR 0 1
10514: PUSH
10515: LD_INT 1
10517: ARRAY
10518: PPUSH
10519: CALL_OW 112
// end ; end_of_file
10523: PPOPN 2
10525: END
// every 0 0$1 trigger eventVar4 = 1 do var m1 , m2 , m3 ;
10526: LD_EXP 38
10530: PUSH
10531: LD_INT 1
10533: EQUAL
10534: IFFALSE 11419
10536: GO 10538
10538: DISABLE
10539: LD_INT 0
10541: PPUSH
10542: PPUSH
10543: PPUSH
// begin m1 := false ;
10544: LD_ADDR_VAR 0 1
10548: PUSH
10549: LD_INT 0
10551: ST_TO_ADDR
// m2 := false ;
10552: LD_ADDR_VAR 0 2
10556: PUSH
10557: LD_INT 0
10559: ST_TO_ADDR
// m3 := false ;
10560: LD_ADDR_VAR 0 3
10564: PUSH
10565: LD_INT 0
10567: ST_TO_ADDR
// Say ( JMM , D9b-JMM-1 ) ;
10568: LD_EXP 1
10572: PPUSH
10573: LD_STRING D9b-JMM-1
10575: PPUSH
10576: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-1 ) ;
10580: LD_EXP 15
10584: PPUSH
10585: LD_STRING D9b-Pow-1
10587: PPUSH
10588: CALL_OW 94
// Say ( JMM , D9b-JMM-2 ) ;
10592: LD_EXP 1
10596: PPUSH
10597: LD_STRING D9b-JMM-2
10599: PPUSH
10600: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-2 ) ;
10604: LD_EXP 15
10608: PPUSH
10609: LD_STRING D9b-Pow-2
10611: PPUSH
10612: CALL_OW 94
// Say ( JMM , D9b-JMM-3 ) ;
10616: LD_EXP 1
10620: PPUSH
10621: LD_STRING D9b-JMM-3
10623: PPUSH
10624: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-3 ) ;
10628: LD_EXP 15
10632: PPUSH
10633: LD_STRING D9b-Pow-3
10635: PPUSH
10636: CALL_OW 94
// if burlakStatus = 1 then
10640: LD_EXP 28
10644: PUSH
10645: LD_INT 1
10647: EQUAL
10648: IFFALSE 10670
// begin m1 := true ;
10650: LD_ADDR_VAR 0 1
10654: PUSH
10655: LD_INT 1
10657: ST_TO_ADDR
// AddMedal ( Burlak , 1 ) ;
10658: LD_STRING Burlak
10660: PPUSH
10661: LD_INT 1
10663: PPUSH
10664: CALL_OW 101
// end else
10668: GO 10681
// begin AddMedal ( Burlak , - 1 ) ;
10670: LD_STRING Burlak
10672: PPUSH
10673: LD_INT 1
10675: NEG
10676: PPUSH
10677: CALL_OW 101
// end ; if IsOk ( Stevens ) then
10681: LD_EXP 2
10685: PPUSH
10686: CALL_OW 302
10690: IFFALSE 10712
// begin m2 := true ;
10692: LD_ADDR_VAR 0 2
10696: PUSH
10697: LD_INT 1
10699: ST_TO_ADDR
// AddMedal ( Stevens , 1 ) ;
10700: LD_STRING Stevens
10702: PPUSH
10703: LD_INT 1
10705: PPUSH
10706: CALL_OW 101
// end else
10710: GO 10723
// begin AddMedal ( Stevens , - 1 ) ;
10712: LD_STRING Stevens
10714: PPUSH
10715: LD_INT 1
10717: NEG
10718: PPUSH
10719: CALL_OW 101
// end ; if radarOnSpot = 1 then
10723: LD_EXP 30
10727: PUSH
10728: LD_INT 1
10730: EQUAL
10731: IFFALSE 10753
// begin m3 := true ;
10733: LD_ADDR_VAR 0 3
10737: PUSH
10738: LD_INT 1
10740: ST_TO_ADDR
// AddMedal ( Observation , 1 ) ;
10741: LD_STRING Observation
10743: PPUSH
10744: LD_INT 1
10746: PPUSH
10747: CALL_OW 101
// end else
10751: GO 10764
// begin AddMedal ( Observation , - 1 ) ;
10753: LD_STRING Observation
10755: PPUSH
10756: LD_INT 1
10758: NEG
10759: PPUSH
10760: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty = 3 then
10764: LD_VAR 0 1
10768: PUSH
10769: LD_VAR 0 2
10773: AND
10774: PUSH
10775: LD_VAR 0 3
10779: AND
10780: PUSH
10781: LD_OWVAR 67
10785: PUSH
10786: LD_INT 3
10788: EQUAL
10789: AND
10790: IFFALSE 10802
// SetAchievementEX ( ACH_AMER , 13 ) ;
10792: LD_STRING ACH_AMER
10794: PPUSH
10795: LD_INT 13
10797: PPUSH
10798: CALL_OW 564
// GiveMedals ( MAIN ) ;
10802: LD_STRING MAIN
10804: PPUSH
10805: CALL_OW 102
// SaveVariable ( burlakStatus , 13_BurlakStatus_1 ) ;
10809: LD_EXP 28
10813: PPUSH
10814: LD_STRING 13_BurlakStatus_1
10816: PPUSH
10817: CALL_OW 39
// if IsLive ( Stevens ) then
10821: LD_EXP 2
10825: PPUSH
10826: CALL_OW 300
10830: IFFALSE 10844
// SaveVariable ( 1 , 13_StevensStatus_1 ) else
10832: LD_INT 1
10834: PPUSH
10835: LD_STRING 13_StevensStatus_1
10837: PPUSH
10838: CALL_OW 39
10842: GO 10854
// SaveVariable ( 0 , 13_StevensStatus_1 ) ;
10844: LD_INT 0
10846: PPUSH
10847: LD_STRING 13_StevensStatus_1
10849: PPUSH
10850: CALL_OW 39
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
10854: LD_INT 22
10856: PUSH
10857: LD_INT 1
10859: PUSH
10860: EMPTY
10861: LIST
10862: LIST
10863: PUSH
10864: LD_INT 21
10866: PUSH
10867: LD_INT 1
10869: PUSH
10870: EMPTY
10871: LIST
10872: LIST
10873: PUSH
10874: LD_INT 2
10876: PUSH
10877: LD_INT 25
10879: PUSH
10880: LD_INT 1
10882: PUSH
10883: EMPTY
10884: LIST
10885: LIST
10886: PUSH
10887: LD_INT 25
10889: PUSH
10890: LD_INT 2
10892: PUSH
10893: EMPTY
10894: LIST
10895: LIST
10896: PUSH
10897: LD_INT 25
10899: PUSH
10900: LD_INT 3
10902: PUSH
10903: EMPTY
10904: LIST
10905: LIST
10906: PUSH
10907: LD_INT 25
10909: PUSH
10910: LD_INT 4
10912: PUSH
10913: EMPTY
10914: LIST
10915: LIST
10916: PUSH
10917: LD_INT 25
10919: PUSH
10920: LD_INT 5
10922: PUSH
10923: EMPTY
10924: LIST
10925: LIST
10926: PUSH
10927: LD_INT 25
10929: PUSH
10930: LD_INT 8
10932: PUSH
10933: EMPTY
10934: LIST
10935: LIST
10936: PUSH
10937: EMPTY
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: PUSH
10946: EMPTY
10947: LIST
10948: LIST
10949: LIST
10950: PPUSH
10951: CALL_OW 69
10955: PPUSH
10956: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
10960: LD_EXP 1
10964: PPUSH
10965: LD_EXP 34
10969: PUSH
10970: LD_STRING JMM
10972: STR
10973: PPUSH
10974: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
10978: LD_EXP 8
10982: PPUSH
10983: LD_EXP 34
10987: PUSH
10988: LD_STRING Brown
10990: STR
10991: PPUSH
10992: CALL 6932 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
10996: LD_EXP 4
11000: PPUSH
11001: LD_EXP 34
11005: PUSH
11006: LD_STRING Donaldson
11008: STR
11009: PPUSH
11010: CALL 6932 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
11014: LD_EXP 5
11018: PPUSH
11019: LD_EXP 34
11023: PUSH
11024: LD_STRING Bobby
11026: STR
11027: PPUSH
11028: CALL 6932 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
11032: LD_EXP 6
11036: PPUSH
11037: LD_EXP 34
11041: PUSH
11042: LD_STRING Cyrus
11044: STR
11045: PPUSH
11046: CALL 6932 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
11050: LD_EXP 3
11054: PPUSH
11055: LD_EXP 34
11059: PUSH
11060: LD_STRING Lisa
11062: STR
11063: PPUSH
11064: CALL 6932 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
11068: LD_EXP 13
11072: PPUSH
11073: LD_EXP 34
11077: PUSH
11078: LD_STRING Frank
11080: STR
11081: PPUSH
11082: CALL 6932 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
11086: LD_EXP 14
11090: PPUSH
11091: LD_EXP 34
11095: PUSH
11096: LD_STRING Kikuchi
11098: STR
11099: PPUSH
11100: CALL 6932 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
11104: LD_EXP 10
11108: PPUSH
11109: LD_EXP 34
11113: PUSH
11114: LD_STRING Houten
11116: STR
11117: PPUSH
11118: CALL 6932 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
11122: LD_EXP 12
11126: PPUSH
11127: LD_EXP 34
11131: PUSH
11132: LD_STRING Gary
11134: STR
11135: PPUSH
11136: CALL 6932 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
11140: LD_EXP 11
11144: PPUSH
11145: LD_EXP 34
11149: PUSH
11150: LD_STRING Cornell
11152: STR
11153: PPUSH
11154: CALL 6932 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
11158: LD_EXP 7
11162: PPUSH
11163: LD_EXP 34
11167: PUSH
11168: LD_STRING Denis
11170: STR
11171: PPUSH
11172: CALL 6932 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
11176: LD_EXP 9
11180: PPUSH
11181: LD_EXP 34
11185: PUSH
11186: LD_STRING Gladstone
11188: STR
11189: PPUSH
11190: CALL 6932 0 2
// EnchancedSaveCharacters ( Stevens , mission_prefix & Stevens ) ;
11194: LD_EXP 2
11198: PPUSH
11199: LD_EXP 34
11203: PUSH
11204: LD_STRING Stevens
11206: STR
11207: PPUSH
11208: CALL 6932 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel , Stevens ] , 13_other_survivors ) ;
11212: LD_INT 50
11214: PUSH
11215: EMPTY
11216: LIST
11217: PUSH
11218: LD_INT 22
11220: PUSH
11221: LD_INT 1
11223: PUSH
11224: EMPTY
11225: LIST
11226: LIST
11227: PUSH
11228: LD_INT 21
11230: PUSH
11231: LD_INT 1
11233: PUSH
11234: EMPTY
11235: LIST
11236: LIST
11237: PUSH
11238: LD_INT 2
11240: PUSH
11241: LD_INT 25
11243: PUSH
11244: LD_INT 1
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: PUSH
11251: LD_INT 25
11253: PUSH
11254: LD_INT 2
11256: PUSH
11257: EMPTY
11258: LIST
11259: LIST
11260: PUSH
11261: LD_INT 25
11263: PUSH
11264: LD_INT 3
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: PUSH
11271: LD_INT 25
11273: PUSH
11274: LD_INT 4
11276: PUSH
11277: EMPTY
11278: LIST
11279: LIST
11280: PUSH
11281: LD_INT 25
11283: PUSH
11284: LD_INT 5
11286: PUSH
11287: EMPTY
11288: LIST
11289: LIST
11290: PUSH
11291: LD_INT 25
11293: PUSH
11294: LD_INT 8
11296: PUSH
11297: EMPTY
11298: LIST
11299: LIST
11300: PUSH
11301: EMPTY
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: LIST
11307: LIST
11308: LIST
11309: PUSH
11310: EMPTY
11311: LIST
11312: LIST
11313: LIST
11314: LIST
11315: PPUSH
11316: CALL_OW 69
11320: PUSH
11321: LD_EXP 1
11325: PUSH
11326: LD_EXP 8
11330: PUSH
11331: LD_EXP 4
11335: PUSH
11336: LD_EXP 5
11340: PUSH
11341: LD_EXP 6
11345: PUSH
11346: LD_EXP 3
11350: PUSH
11351: LD_EXP 13
11355: PUSH
11356: LD_EXP 9
11360: PUSH
11361: LD_EXP 14
11365: PUSH
11366: LD_EXP 7
11370: PUSH
11371: LD_EXP 10
11375: PUSH
11376: LD_EXP 12
11380: PUSH
11381: LD_EXP 11
11385: PUSH
11386: LD_EXP 2
11390: PUSH
11391: EMPTY
11392: LIST
11393: LIST
11394: LIST
11395: LIST
11396: LIST
11397: LIST
11398: LIST
11399: LIST
11400: LIST
11401: LIST
11402: LIST
11403: LIST
11404: LIST
11405: LIST
11406: DIFF
11407: PPUSH
11408: LD_STRING 13_other_survivors
11410: PPUSH
11411: CALL_OW 38
// YouWin ;
11415: CALL_OW 103
// end ; end_of_file
11419: PPOPN 3
11421: END
// every 0 0$1 trigger sibDestroyedCounter = 2 do var i , tmp , yourSiberite ;
11422: LD_EXP 32
11426: PUSH
11427: LD_INT 2
11429: EQUAL
11430: IFFALSE 11566
11432: GO 11434
11434: DISABLE
11435: LD_INT 0
11437: PPUSH
11438: PPUSH
11439: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11440: LD_ADDR_VAR 0 2
11444: PUSH
11445: LD_INT 22
11447: PUSH
11448: LD_INT 1
11450: PUSH
11451: EMPTY
11452: LIST
11453: LIST
11454: PUSH
11455: LD_INT 21
11457: PUSH
11458: LD_INT 3
11460: PUSH
11461: EMPTY
11462: LIST
11463: LIST
11464: PUSH
11465: LD_INT 2
11467: PUSH
11468: LD_INT 30
11470: PUSH
11471: LD_INT 0
11473: PUSH
11474: EMPTY
11475: LIST
11476: LIST
11477: PUSH
11478: LD_INT 30
11480: PUSH
11481: LD_INT 1
11483: PUSH
11484: EMPTY
11485: LIST
11486: LIST
11487: PUSH
11488: EMPTY
11489: LIST
11490: LIST
11491: LIST
11492: PUSH
11493: EMPTY
11494: LIST
11495: LIST
11496: LIST
11497: PPUSH
11498: CALL_OW 69
11502: ST_TO_ADDR
// for i in tmp do
11503: LD_ADDR_VAR 0 1
11507: PUSH
11508: LD_VAR 0 2
11512: PUSH
11513: FOR_IN
11514: IFFALSE 11547
// yourSiberite = yourSiberite + GetResourceType ( GetBase ( i ) , 3 ) ;
11516: LD_ADDR_VAR 0 3
11520: PUSH
11521: LD_VAR 0 3
11525: PUSH
11526: LD_VAR 0 1
11530: PPUSH
11531: CALL_OW 274
11535: PPUSH
11536: LD_INT 3
11538: PPUSH
11539: CALL_OW 275
11543: PLUS
11544: ST_TO_ADDR
11545: GO 11513
11547: POP
11548: POP
// if yourSiberite < 79 then
11549: LD_VAR 0 3
11553: PUSH
11554: LD_INT 79
11556: LESS
11557: IFFALSE 11566
// YouLost ( siberite ) ;
11559: LD_STRING siberite
11561: PPUSH
11562: CALL_OW 104
// end ;
11566: PPOPN 3
11568: END
// every 0 0$1 trigger IsDead ( JMM ) do
11569: LD_EXP 1
11573: PPUSH
11574: CALL_OW 301
11578: IFFALSE 11590
11580: GO 11582
11582: DISABLE
// YouLost ( JMM ) ; end_of_file
11583: LD_STRING JMM
11585: PPUSH
11586: CALL_OW 104
11590: END
// every 8 8$0 + 7 7$0 do
11591: GO 11593
11593: DISABLE
// begin enable ;
11594: ENABLE
// RespawnAttackInfantry ( 8 , 2 , rand ( 1 , 3 ) , 0 , 0 , [ 2 , 3 , 4 ] [ Difficulty ] , 0 , 10 , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , ArabianHealArea , 1 ) ;
11595: LD_INT 8
11597: PPUSH
11598: LD_INT 2
11600: PPUSH
11601: LD_INT 1
11603: PPUSH
11604: LD_INT 3
11606: PPUSH
11607: CALL_OW 12
11611: PPUSH
11612: LD_INT 0
11614: PPUSH
11615: LD_INT 0
11617: PPUSH
11618: LD_INT 2
11620: PUSH
11621: LD_INT 3
11623: PUSH
11624: LD_INT 4
11626: PUSH
11627: EMPTY
11628: LIST
11629: LIST
11630: LIST
11631: PUSH
11632: LD_OWVAR 67
11636: ARRAY
11637: PPUSH
11638: LD_INT 0
11640: PPUSH
11641: LD_INT 10
11643: PPUSH
11644: LD_INT 8
11646: PUSH
11647: LD_INT 9
11649: PUSH
11650: EMPTY
11651: LIST
11652: LIST
11653: PUSH
11654: LD_INT 1
11656: PPUSH
11657: LD_INT 2
11659: PPUSH
11660: CALL_OW 12
11664: ARRAY
11665: PPUSH
11666: LD_INT 12
11668: PPUSH
11669: LD_INT 1
11671: PPUSH
11672: CALL 6972 0 11
// end ;
11676: END
// every 8 8$0 + 7 7$0 do var i , veh ;
11677: GO 11679
11679: DISABLE
11680: LD_INT 0
11682: PPUSH
11683: PPUSH
// begin enable ;
11684: ENABLE
// arabianAttacksCounter = arabianAttacksCounter + 1 ;
11685: LD_ADDR_EXP 33
11689: PUSH
11690: LD_EXP 33
11694: PUSH
11695: LD_INT 1
11697: PLUS
11698: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) = 0 then
11699: LD_INT 22
11701: PUSH
11702: LD_INT 8
11704: PUSH
11705: EMPTY
11706: LIST
11707: LIST
11708: PUSH
11709: LD_INT 34
11711: PUSH
11712: LD_INT 31
11714: PUSH
11715: EMPTY
11716: LIST
11717: LIST
11718: PUSH
11719: EMPTY
11720: LIST
11721: LIST
11722: PPUSH
11723: CALL_OW 69
11727: PUSH
11728: LD_INT 0
11730: EQUAL
11731: IFFALSE 11872
// begin uc_side := 8 ;
11733: LD_ADDR_OWVAR 20
11737: PUSH
11738: LD_INT 8
11740: ST_TO_ADDR
// uc_nation := 2 ;
11741: LD_ADDR_OWVAR 21
11745: PUSH
11746: LD_INT 2
11748: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
11749: LD_INT 14
11751: PPUSH
11752: LD_INT 3
11754: PPUSH
11755: LD_INT 1
11757: PPUSH
11758: LD_INT 31
11760: PPUSH
11761: LD_INT 100
11763: PPUSH
11764: CALL 5609 0 5
// for i = 1 to 2 do
11768: LD_ADDR_VAR 0 1
11772: PUSH
11773: DOUBLE
11774: LD_INT 1
11776: DEC
11777: ST_TO_ADDR
11778: LD_INT 2
11780: PUSH
11781: FOR_TO
11782: IFFALSE 11870
// begin veh := CreateVehicle ;
11784: LD_ADDR_VAR 0 2
11788: PUSH
11789: CALL_OW 45
11793: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
11794: LD_VAR 0 2
11798: PPUSH
11799: LD_INT 5
11801: PPUSH
11802: CALL_OW 233
// PlaceUnitXYR ( veh , 181 , 105 , 12 , false ) ;
11806: LD_VAR 0 2
11810: PPUSH
11811: LD_INT 181
11813: PPUSH
11814: LD_INT 105
11816: PPUSH
11817: LD_INT 12
11819: PPUSH
11820: LD_INT 0
11822: PPUSH
11823: CALL_OW 50
// PrepareMechanic ( false , [ 7 , 9 , 10 ] [ Difficulty ] ) ;
11827: LD_INT 0
11829: PPUSH
11830: LD_INT 7
11832: PUSH
11833: LD_INT 9
11835: PUSH
11836: LD_INT 10
11838: PUSH
11839: EMPTY
11840: LIST
11841: LIST
11842: LIST
11843: PUSH
11844: LD_OWVAR 67
11848: ARRAY
11849: PPUSH
11850: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
11854: CALL_OW 44
11858: PPUSH
11859: LD_VAR 0 2
11863: PPUSH
11864: CALL_OW 52
// end ;
11868: GO 11781
11870: POP
11871: POP
// end ; RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 8 , [ rand ( 4 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 10 ) ] [ Difficulty ] , 10 , 2 , 3 , [ 5 , 2 ] , [ ] , [ 25 , 26 , 27 , 28 , 29 ] , [ ] , 1 ) ;
11872: LD_INT 8
11874: PUSH
11875: LD_INT 9
11877: PUSH
11878: EMPTY
11879: LIST
11880: LIST
11881: PUSH
11882: LD_INT 1
11884: PPUSH
11885: LD_INT 2
11887: PPUSH
11888: CALL_OW 12
11892: ARRAY
11893: PPUSH
11894: LD_INT 8
11896: PPUSH
11897: LD_INT 4
11899: PPUSH
11900: LD_INT 6
11902: PPUSH
11903: CALL_OW 12
11907: PUSH
11908: LD_INT 6
11910: PPUSH
11911: LD_INT 9
11913: PPUSH
11914: CALL_OW 12
11918: PUSH
11919: LD_INT 7
11921: PPUSH
11922: LD_INT 10
11924: PPUSH
11925: CALL_OW 12
11929: PUSH
11930: EMPTY
11931: LIST
11932: LIST
11933: LIST
11934: PUSH
11935: LD_OWVAR 67
11939: ARRAY
11940: PPUSH
11941: LD_INT 10
11943: PPUSH
11944: LD_INT 2
11946: PPUSH
11947: LD_INT 3
11949: PPUSH
11950: LD_INT 5
11952: PUSH
11953: LD_INT 2
11955: PUSH
11956: EMPTY
11957: LIST
11958: LIST
11959: PPUSH
11960: EMPTY
11961: PPUSH
11962: LD_INT 25
11964: PUSH
11965: LD_INT 26
11967: PUSH
11968: LD_INT 27
11970: PUSH
11971: LD_INT 28
11973: PUSH
11974: LD_INT 29
11976: PUSH
11977: EMPTY
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: PPUSH
11984: EMPTY
11985: PPUSH
11986: LD_INT 1
11988: PPUSH
11989: CALL 8040 0 11
// end ;
11993: PPOPN 2
11995: END
// every 8 8$0 + 7 7$0 trigger arabianAttacksCounter >= 4 do var i , veh ;
11996: LD_EXP 33
12000: PUSH
12001: LD_INT 4
12003: GREATEREQUAL
12004: IFFALSE 12286
12006: GO 12008
12008: DISABLE
12009: LD_INT 0
12011: PPUSH
12012: PPUSH
// begin enable ;
12013: ENABLE
// arabianAttacksCounter = arabianAttacksCounter + 1 ;
12014: LD_ADDR_EXP 33
12018: PUSH
12019: LD_EXP 33
12023: PUSH
12024: LD_INT 1
12026: PLUS
12027: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) = 0 then
12028: LD_INT 22
12030: PUSH
12031: LD_INT 8
12033: PUSH
12034: EMPTY
12035: LIST
12036: LIST
12037: PUSH
12038: LD_INT 34
12040: PUSH
12041: LD_INT 31
12043: PUSH
12044: EMPTY
12045: LIST
12046: LIST
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: PPUSH
12052: CALL_OW 69
12056: PUSH
12057: LD_INT 0
12059: EQUAL
12060: IFFALSE 12201
// begin uc_side := 8 ;
12062: LD_ADDR_OWVAR 20
12066: PUSH
12067: LD_INT 8
12069: ST_TO_ADDR
// uc_nation := 2 ;
12070: LD_ADDR_OWVAR 21
12074: PUSH
12075: LD_INT 2
12077: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
12078: LD_INT 14
12080: PPUSH
12081: LD_INT 3
12083: PPUSH
12084: LD_INT 1
12086: PPUSH
12087: LD_INT 31
12089: PPUSH
12090: LD_INT 100
12092: PPUSH
12093: CALL 5609 0 5
// for i = 1 to 2 do
12097: LD_ADDR_VAR 0 1
12101: PUSH
12102: DOUBLE
12103: LD_INT 1
12105: DEC
12106: ST_TO_ADDR
12107: LD_INT 2
12109: PUSH
12110: FOR_TO
12111: IFFALSE 12199
// begin veh := CreateVehicle ;
12113: LD_ADDR_VAR 0 2
12117: PUSH
12118: CALL_OW 45
12122: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
12123: LD_VAR 0 2
12127: PPUSH
12128: LD_INT 5
12130: PPUSH
12131: CALL_OW 233
// PlaceUnitXYR ( veh , 181 , 105 , 12 , false ) ;
12135: LD_VAR 0 2
12139: PPUSH
12140: LD_INT 181
12142: PPUSH
12143: LD_INT 105
12145: PPUSH
12146: LD_INT 12
12148: PPUSH
12149: LD_INT 0
12151: PPUSH
12152: CALL_OW 50
// PrepareMechanic ( false , [ 8 , 9 , 10 ] [ Difficulty ] ) ;
12156: LD_INT 0
12158: PPUSH
12159: LD_INT 8
12161: PUSH
12162: LD_INT 9
12164: PUSH
12165: LD_INT 10
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: LIST
12172: PUSH
12173: LD_OWVAR 67
12177: ARRAY
12178: PPUSH
12179: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12183: CALL_OW 44
12187: PPUSH
12188: LD_VAR 0 2
12192: PPUSH
12193: CALL_OW 52
// end ;
12197: GO 12110
12199: POP
12200: POP
// end ; RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 8 , [ 1 , 2 , 3 ] [ Difficulty ] , 10 , 3 , 3 , [ 1 , 1 ] , [ 47 , 47 ] , [ ] , [ ] , 1 ) ;
12201: LD_INT 8
12203: PUSH
12204: LD_INT 9
12206: PUSH
12207: EMPTY
12208: LIST
12209: LIST
12210: PUSH
12211: LD_INT 1
12213: PPUSH
12214: LD_INT 2
12216: PPUSH
12217: CALL_OW 12
12221: ARRAY
12222: PPUSH
12223: LD_INT 8
12225: PPUSH
12226: LD_INT 1
12228: PUSH
12229: LD_INT 2
12231: PUSH
12232: LD_INT 3
12234: PUSH
12235: EMPTY
12236: LIST
12237: LIST
12238: LIST
12239: PUSH
12240: LD_OWVAR 67
12244: ARRAY
12245: PPUSH
12246: LD_INT 10
12248: PPUSH
12249: LD_INT 3
12251: PPUSH
12252: LD_INT 3
12254: PPUSH
12255: LD_INT 1
12257: PUSH
12258: LD_INT 1
12260: PUSH
12261: EMPTY
12262: LIST
12263: LIST
12264: PPUSH
12265: LD_INT 47
12267: PUSH
12268: LD_INT 47
12270: PUSH
12271: EMPTY
12272: LIST
12273: LIST
12274: PPUSH
12275: EMPTY
12276: PPUSH
12277: EMPTY
12278: PPUSH
12279: LD_INT 1
12281: PPUSH
12282: CALL 8040 0 11
// end ;
12286: PPOPN 2
12288: END
// every 1 1$0 trigger eventVar2 = 1 do
12289: LD_EXP 36
12293: PUSH
12294: LD_INT 1
12296: EQUAL
12297: IFFALSE 12399
12299: GO 12301
12301: DISABLE
// begin RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 3 , [ 5 , 7 , 8 ] [ Difficulty ] , 10 , 3 , 3 , [ 3 , 3 ] , [ 46 , 44 , 45 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
12302: LD_INT 8
12304: PUSH
12305: LD_INT 9
12307: PUSH
12308: EMPTY
12309: LIST
12310: LIST
12311: PUSH
12312: LD_INT 1
12314: PPUSH
12315: LD_INT 2
12317: PPUSH
12318: CALL_OW 12
12322: ARRAY
12323: PPUSH
12324: LD_INT 3
12326: PPUSH
12327: LD_INT 5
12329: PUSH
12330: LD_INT 7
12332: PUSH
12333: LD_INT 8
12335: PUSH
12336: EMPTY
12337: LIST
12338: LIST
12339: LIST
12340: PUSH
12341: LD_OWVAR 67
12345: ARRAY
12346: PPUSH
12347: LD_INT 10
12349: PPUSH
12350: LD_INT 3
12352: PPUSH
12353: LD_INT 3
12355: PPUSH
12356: LD_INT 3
12358: PUSH
12359: LD_INT 3
12361: PUSH
12362: EMPTY
12363: LIST
12364: LIST
12365: PPUSH
12366: LD_INT 46
12368: PUSH
12369: LD_INT 44
12371: PUSH
12372: LD_INT 45
12374: PUSH
12375: LD_INT 47
12377: PUSH
12378: LD_INT 49
12380: PUSH
12381: EMPTY
12382: LIST
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: PPUSH
12388: EMPTY
12389: PPUSH
12390: EMPTY
12391: PPUSH
12392: LD_INT 1
12394: PPUSH
12395: CALL 8040 0 11
// end ; end_of_file
12399: END
// every 1 1$0 do
12400: GO 12402
12402: DISABLE
// begin enable ;
12403: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
12404: LD_INT 3
12406: PPUSH
12407: LD_INT 5
12409: PPUSH
12410: CALL_OW 12
12414: PPUSH
12415: LD_INT 13
12417: PPUSH
12418: LD_INT 1
12420: PPUSH
12421: CALL_OW 55
// end ; end_of_file
12425: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
12426: GO 12428
12428: DISABLE
// begin ru_radar := 98 ;
12429: LD_ADDR_EXP 41
12433: PUSH
12434: LD_INT 98
12436: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
12437: LD_ADDR_EXP 42
12441: PUSH
12442: LD_INT 89
12444: ST_TO_ADDR
// us_hack := 99 ;
12445: LD_ADDR_EXP 43
12449: PUSH
12450: LD_INT 99
12452: ST_TO_ADDR
// us_artillery := 97 ;
12453: LD_ADDR_EXP 44
12457: PUSH
12458: LD_INT 97
12460: ST_TO_ADDR
// ar_bio_bomb := 91 ;
12461: LD_ADDR_EXP 45
12465: PUSH
12466: LD_INT 91
12468: ST_TO_ADDR
// end ; end_of_file end_of_file end_of_file
12469: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
12470: LD_INT 0
12472: PPUSH
12473: PPUSH
12474: PPUSH
12475: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
12476: LD_VAR 0 1
12480: PPUSH
12481: CALL_OW 264
12485: PUSH
12486: LD_EXP 45
12490: EQUAL
12491: IFFALSE 12563
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
12493: LD_INT 68
12495: PPUSH
12496: LD_VAR 0 1
12500: PPUSH
12501: CALL_OW 255
12505: PPUSH
12506: CALL_OW 321
12510: PUSH
12511: LD_INT 2
12513: EQUAL
12514: IFFALSE 12526
// eff := 70 else
12516: LD_ADDR_VAR 0 6
12520: PUSH
12521: LD_INT 70
12523: ST_TO_ADDR
12524: GO 12534
// eff := 30 ;
12526: LD_ADDR_VAR 0 6
12530: PUSH
12531: LD_INT 30
12533: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
12534: LD_VAR 0 1
12538: PPUSH
12539: CALL_OW 250
12543: PPUSH
12544: LD_VAR 0 1
12548: PPUSH
12549: CALL_OW 251
12553: PPUSH
12554: LD_VAR 0 6
12558: PPUSH
12559: CALL_OW 495
// end ; end ;
12563: LD_VAR 0 4
12567: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
12568: LD_INT 0
12570: PPUSH
12571: PPUSH
12572: PPUSH
12573: PPUSH
12574: PPUSH
12575: PPUSH
// if cmd = 124 then
12576: LD_VAR 0 1
12580: PUSH
12581: LD_INT 124
12583: EQUAL
12584: IFFALSE 12790
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
12586: LD_ADDR_VAR 0 5
12590: PUSH
12591: LD_INT 2
12593: PUSH
12594: LD_INT 34
12596: PUSH
12597: LD_INT 53
12599: PUSH
12600: EMPTY
12601: LIST
12602: LIST
12603: PUSH
12604: LD_INT 34
12606: PUSH
12607: LD_INT 14
12609: PUSH
12610: EMPTY
12611: LIST
12612: LIST
12613: PUSH
12614: EMPTY
12615: LIST
12616: LIST
12617: LIST
12618: PPUSH
12619: CALL_OW 69
12623: ST_TO_ADDR
// if not tmp then
12624: LD_VAR 0 5
12628: NOT
12629: IFFALSE 12633
// exit ;
12631: GO 12790
// for i in tmp do
12633: LD_ADDR_VAR 0 3
12637: PUSH
12638: LD_VAR 0 5
12642: PUSH
12643: FOR_IN
12644: IFFALSE 12788
// begin taskList := GetTaskList ( i ) ;
12646: LD_ADDR_VAR 0 6
12650: PUSH
12651: LD_VAR 0 3
12655: PPUSH
12656: CALL_OW 437
12660: ST_TO_ADDR
// if not taskList then
12661: LD_VAR 0 6
12665: NOT
12666: IFFALSE 12670
// continue ;
12668: GO 12643
// for j = 1 to taskList do
12670: LD_ADDR_VAR 0 4
12674: PUSH
12675: DOUBLE
12676: LD_INT 1
12678: DEC
12679: ST_TO_ADDR
12680: LD_VAR 0 6
12684: PUSH
12685: FOR_TO
12686: IFFALSE 12784
// if taskList [ j ] [ 1 ] = | then
12688: LD_VAR 0 6
12692: PUSH
12693: LD_VAR 0 4
12697: ARRAY
12698: PUSH
12699: LD_INT 1
12701: ARRAY
12702: PUSH
12703: LD_STRING |
12705: EQUAL
12706: IFFALSE 12782
// begin _taskList := Delete ( taskList , 1 ) ;
12708: LD_ADDR_VAR 0 7
12712: PUSH
12713: LD_VAR 0 6
12717: PPUSH
12718: LD_INT 1
12720: PPUSH
12721: CALL_OW 3
12725: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
12726: LD_VAR 0 3
12730: PPUSH
12731: LD_VAR 0 7
12735: PPUSH
12736: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
12740: LD_VAR 0 3
12744: PPUSH
12745: LD_VAR 0 6
12749: PUSH
12750: LD_VAR 0 4
12754: ARRAY
12755: PUSH
12756: LD_INT 2
12758: ARRAY
12759: PPUSH
12760: LD_VAR 0 6
12764: PUSH
12765: LD_VAR 0 4
12769: ARRAY
12770: PUSH
12771: LD_INT 3
12773: ARRAY
12774: PPUSH
12775: LD_INT 8
12777: PPUSH
12778: CALL 12795 0 4
// end ;
12782: GO 12685
12784: POP
12785: POP
// end ;
12786: GO 12643
12788: POP
12789: POP
// end ; end ;
12790: LD_VAR 0 2
12794: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
12795: LD_INT 0
12797: PPUSH
12798: PPUSH
12799: PPUSH
12800: PPUSH
12801: PPUSH
12802: PPUSH
12803: PPUSH
12804: PPUSH
12805: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
12806: LD_VAR 0 1
12810: NOT
12811: PUSH
12812: LD_VAR 0 2
12816: PPUSH
12817: LD_VAR 0 3
12821: PPUSH
12822: CALL_OW 488
12826: NOT
12827: OR
12828: PUSH
12829: LD_VAR 0 4
12833: NOT
12834: OR
12835: IFFALSE 12839
// exit ;
12837: GO 13179
// list := [ ] ;
12839: LD_ADDR_VAR 0 13
12843: PUSH
12844: EMPTY
12845: ST_TO_ADDR
// if x - r < 0 then
12846: LD_VAR 0 2
12850: PUSH
12851: LD_VAR 0 4
12855: MINUS
12856: PUSH
12857: LD_INT 0
12859: LESS
12860: IFFALSE 12872
// min_x := 0 else
12862: LD_ADDR_VAR 0 7
12866: PUSH
12867: LD_INT 0
12869: ST_TO_ADDR
12870: GO 12888
// min_x := x - r ;
12872: LD_ADDR_VAR 0 7
12876: PUSH
12877: LD_VAR 0 2
12881: PUSH
12882: LD_VAR 0 4
12886: MINUS
12887: ST_TO_ADDR
// if y - r < 0 then
12888: LD_VAR 0 3
12892: PUSH
12893: LD_VAR 0 4
12897: MINUS
12898: PUSH
12899: LD_INT 0
12901: LESS
12902: IFFALSE 12914
// min_y := 0 else
12904: LD_ADDR_VAR 0 8
12908: PUSH
12909: LD_INT 0
12911: ST_TO_ADDR
12912: GO 12930
// min_y := y - r ;
12914: LD_ADDR_VAR 0 8
12918: PUSH
12919: LD_VAR 0 3
12923: PUSH
12924: LD_VAR 0 4
12928: MINUS
12929: ST_TO_ADDR
// max_x := x + r ;
12930: LD_ADDR_VAR 0 9
12934: PUSH
12935: LD_VAR 0 2
12939: PUSH
12940: LD_VAR 0 4
12944: PLUS
12945: ST_TO_ADDR
// max_y := y + r ;
12946: LD_ADDR_VAR 0 10
12950: PUSH
12951: LD_VAR 0 3
12955: PUSH
12956: LD_VAR 0 4
12960: PLUS
12961: ST_TO_ADDR
// for _x = min_x to max_x do
12962: LD_ADDR_VAR 0 11
12966: PUSH
12967: DOUBLE
12968: LD_VAR 0 7
12972: DEC
12973: ST_TO_ADDR
12974: LD_VAR 0 9
12978: PUSH
12979: FOR_TO
12980: IFFALSE 13097
// for _y = min_y to max_y do
12982: LD_ADDR_VAR 0 12
12986: PUSH
12987: DOUBLE
12988: LD_VAR 0 8
12992: DEC
12993: ST_TO_ADDR
12994: LD_VAR 0 10
12998: PUSH
12999: FOR_TO
13000: IFFALSE 13093
// begin if not ValidHex ( _x , _y ) then
13002: LD_VAR 0 11
13006: PPUSH
13007: LD_VAR 0 12
13011: PPUSH
13012: CALL_OW 488
13016: NOT
13017: IFFALSE 13021
// continue ;
13019: GO 12999
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
13021: LD_VAR 0 11
13025: PPUSH
13026: LD_VAR 0 12
13030: PPUSH
13031: CALL_OW 351
13035: PUSH
13036: LD_VAR 0 11
13040: PPUSH
13041: LD_VAR 0 12
13045: PPUSH
13046: CALL_OW 554
13050: AND
13051: IFFALSE 13091
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
13053: LD_ADDR_VAR 0 13
13057: PUSH
13058: LD_VAR 0 13
13062: PPUSH
13063: LD_VAR 0 13
13067: PUSH
13068: LD_INT 1
13070: PLUS
13071: PPUSH
13072: LD_VAR 0 11
13076: PUSH
13077: LD_VAR 0 12
13081: PUSH
13082: EMPTY
13083: LIST
13084: LIST
13085: PPUSH
13086: CALL_OW 2
13090: ST_TO_ADDR
// end ;
13091: GO 12999
13093: POP
13094: POP
13095: GO 12979
13097: POP
13098: POP
// if not list then
13099: LD_VAR 0 13
13103: NOT
13104: IFFALSE 13108
// exit ;
13106: GO 13179
// for i in list do
13108: LD_ADDR_VAR 0 6
13112: PUSH
13113: LD_VAR 0 13
13117: PUSH
13118: FOR_IN
13119: IFFALSE 13177
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
13121: LD_VAR 0 1
13125: PPUSH
13126: LD_STRING M
13128: PUSH
13129: LD_VAR 0 6
13133: PUSH
13134: LD_INT 1
13136: ARRAY
13137: PUSH
13138: LD_VAR 0 6
13142: PUSH
13143: LD_INT 2
13145: ARRAY
13146: PUSH
13147: LD_INT 0
13149: PUSH
13150: LD_INT 0
13152: PUSH
13153: LD_INT 0
13155: PUSH
13156: LD_INT 0
13158: PUSH
13159: EMPTY
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: PUSH
13168: EMPTY
13169: LIST
13170: PPUSH
13171: CALL_OW 447
13175: GO 13118
13177: POP
13178: POP
// end ;
13179: LD_VAR 0 5
13183: RET
