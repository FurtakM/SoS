// export JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Powell ; export others13 ; export Burlak , Masha ; export Gnyevko , Titov , Xavier , Belkov , Lipshchin ; export resources , vehicles ; export AmSciSib ; export spawnBurlak , burlakStatus ; export radationResearched ; export radarOnSpot ; export sibDeposits ; export sibDestroyedCounter ; export arabianAttacksCounter ; export mission_prefix ; export eventVar1 , eventVar2 , eventVar3 , eventVar4 , eventVar5 ; export debugMode , achivCounter , destroyCounter ; export eventArabianAttack , eventRussianAttack , eventContaminate ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// spawnBurlak := 0 ;
  15: LD_ADDR_EXP 27
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// burlakStatus := 0 ;
  23: LD_ADDR_EXP 28
  27: PUSH
  28: LD_INT 0
  30: ST_TO_ADDR
// radarOnSpot := 0 ;
  31: LD_ADDR_EXP 30
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// radationResearched := 0 ;
  39: LD_ADDR_EXP 29
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// sibDestroyedCounter := 0 ;
  47: LD_ADDR_EXP 32
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// sibDeposits := [ [ 91 , 111 ] , [ 23 , 37 ] ] ;
  55: LD_ADDR_EXP 31
  59: PUSH
  60: LD_INT 91
  62: PUSH
  63: LD_INT 111
  65: PUSH
  66: EMPTY
  67: LIST
  68: LIST
  69: PUSH
  70: LD_INT 23
  72: PUSH
  73: LD_INT 37
  75: PUSH
  76: EMPTY
  77: LIST
  78: LIST
  79: PUSH
  80: EMPTY
  81: LIST
  82: LIST
  83: ST_TO_ADDR
// arabianAttacksCounter := 0 ;
  84: LD_ADDR_EXP 33
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// destroyCounter := 0 ;
  92: LD_ADDR_EXP 42
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// resources := [ ] ;
 100: LD_ADDR_EXP 24
 104: PUSH
 105: EMPTY
 106: ST_TO_ADDR
// vehicles := [ ] ;
 107: LD_ADDR_EXP 25
 111: PUSH
 112: EMPTY
 113: ST_TO_ADDR
// eventVar1 := 0 ;
 114: LD_ADDR_EXP 35
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// eventVar2 := 0 ;
 122: LD_ADDR_EXP 36
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// eventVar3 := 0 ;
 130: LD_ADDR_EXP 37
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// eventVar4 := 0 ;
 138: LD_ADDR_EXP 38
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// eventVar5 := 0 ;
 146: LD_ADDR_EXP 39
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// eventArabianAttack := 1 ;
 154: LD_ADDR_EXP 43
 158: PUSH
 159: LD_INT 1
 161: ST_TO_ADDR
// eventRussianAttack := 2 ;
 162: LD_ADDR_EXP 44
 166: PUSH
 167: LD_INT 2
 169: ST_TO_ADDR
// eventContaminate := 3 ;
 170: LD_ADDR_EXP 45
 174: PUSH
 175: LD_INT 3
 177: ST_TO_ADDR
// mission_prefix := 13f_ ;
 178: LD_ADDR_EXP 34
 182: PUSH
 183: LD_STRING 13f_
 185: ST_TO_ADDR
// debugMode := 0 ;
 186: LD_ADDR_EXP 40
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// achivCounter := 0 ;
 194: LD_ADDR_EXP 41
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// if Difficulty = 1 then
 202: LD_OWVAR 67
 206: PUSH
 207: LD_INT 1
 209: EQUAL
 210: IFFALSE 219
// RemoveEnvironmentArea ( oilBlockArea ) ;
 212: LD_INT 15
 214: PPUSH
 215: CALL_OW 355
// if Difficulty < 4 then
 219: LD_OWVAR 67
 223: PUSH
 224: LD_INT 4
 226: LESS
 227: IFFALSE 236
// RemoveEnvironmentArea ( sibBlockArea ) ;
 229: LD_INT 18
 231: PPUSH
 232: CALL_OW 355
// PrepareVehicles ;
 236: CALL 1220 0 0
// PrepareHeroes ;
 240: CALL 477 0 0
// PrepareAmericansRandom ;
 244: CALL 1124 0 0
// PrepareDifficulty ;
 248: CALL 8426 0 0
// Action ;
 252: CALL 5290 0 0
// end ;
 256: END
// every 0 0$1 trigger debugMode do var i , j ;
 257: LD_EXP 40
 261: IFFALSE 432
 263: GO 265
 265: DISABLE
 266: LD_INT 0
 268: PPUSH
 269: PPUSH
// begin enable ;
 270: ENABLE
// FogOff ( true ) ;
 271: LD_INT 1
 273: PPUSH
 274: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 278: LD_ADDR_VAR 0 1
 282: PUSH
 283: LD_INT 22
 285: PUSH
 286: LD_INT 1
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: PUSH
 293: LD_INT 21
 295: PUSH
 296: LD_INT 1
 298: PUSH
 299: EMPTY
 300: LIST
 301: LIST
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: PPUSH
 307: CALL_OW 69
 311: PUSH
 312: FOR_IN
 313: IFFALSE 329
// SetLives ( i , 1000 ) ;
 315: LD_VAR 0 1
 319: PPUSH
 320: LD_INT 1000
 322: PPUSH
 323: CALL_OW 234
 327: GO 312
 329: POP
 330: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 331: LD_ADDR_VAR 0 1
 335: PUSH
 336: LD_INT 22
 338: PUSH
 339: LD_INT 1
 341: PUSH
 342: EMPTY
 343: LIST
 344: LIST
 345: PUSH
 346: LD_INT 2
 348: PUSH
 349: LD_INT 30
 351: PUSH
 352: LD_INT 0
 354: PUSH
 355: EMPTY
 356: LIST
 357: LIST
 358: PUSH
 359: LD_INT 30
 361: PUSH
 362: LD_INT 1
 364: PUSH
 365: EMPTY
 366: LIST
 367: LIST
 368: PUSH
 369: EMPTY
 370: LIST
 371: LIST
 372: LIST
 373: PUSH
 374: EMPTY
 375: LIST
 376: LIST
 377: PPUSH
 378: CALL_OW 69
 382: PUSH
 383: FOR_IN
 384: IFFALSE 430
// for j := 1 to 3 do
 386: LD_ADDR_VAR 0 2
 390: PUSH
 391: DOUBLE
 392: LD_INT 1
 394: DEC
 395: ST_TO_ADDR
 396: LD_INT 3
 398: PUSH
 399: FOR_TO
 400: IFFALSE 426
// SetResourceType ( GetBase ( i ) , j , 9999 ) ;
 402: LD_VAR 0 1
 406: PPUSH
 407: CALL_OW 274
 411: PPUSH
 412: LD_VAR 0 2
 416: PPUSH
 417: LD_INT 9999
 419: PPUSH
 420: CALL_OW 277
 424: GO 399
 426: POP
 427: POP
 428: GO 383
 430: POP
 431: POP
// end ;
 432: PPOPN 2
 434: END
// every 0 0$1 trigger achivCounter >= 2 do
 435: LD_EXP 41
 439: PUSH
 440: LD_INT 2
 442: GREATEREQUAL
 443: IFFALSE 455
 445: GO 447
 447: DISABLE
// SetAchievement ( ACH_REMOTE ) ;
 448: LD_STRING ACH_REMOTE
 450: PPUSH
 451: CALL_OW 543
 455: END
// every 0 0$1 trigger destroyCounter >= 30 do
 456: LD_EXP 42
 460: PUSH
 461: LD_INT 30
 463: GREATEREQUAL
 464: IFFALSE 476
 466: GO 468
 468: DISABLE
// SetAchievement ( ACH_DEFMASTER ) ; end_of_file
 469: LD_STRING ACH_DEFMASTER
 471: PPUSH
 472: CALL_OW 543
 476: END
// export function PrepareHeroes ; var tmp , tmp2 , i ; begin
 477: LD_INT 0
 479: PPUSH
 480: PPUSH
 481: PPUSH
 482: PPUSH
// uc_side = 1 ;
 483: LD_ADDR_OWVAR 20
 487: PUSH
 488: LD_INT 1
 490: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , 13c_ ) ;
 491: LD_ADDR_EXP 1
 495: PUSH
 496: LD_STRING JMM
 498: PPUSH
 499: LD_EXP 40
 503: NOT
 504: PPUSH
 505: LD_STRING 13c_
 507: PPUSH
 508: CALL 31084 0 3
 512: ST_TO_ADDR
// Stevens := PrepareUnit ( Stevens , ( not debugMode ) , 13c_ ) ;
 513: LD_ADDR_EXP 2
 517: PUSH
 518: LD_STRING Stevens
 520: PPUSH
 521: LD_EXP 40
 525: NOT
 526: PPUSH
 527: LD_STRING 13c_
 529: PPUSH
 530: CALL 31084 0 3
 534: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , 13c_ ) ;
 535: LD_ADDR_EXP 3
 539: PUSH
 540: LD_STRING Lisa
 542: PPUSH
 543: LD_EXP 40
 547: NOT
 548: PPUSH
 549: LD_STRING 13c_
 551: PPUSH
 552: CALL 31084 0 3
 556: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , 13c_ ) ;
 557: LD_ADDR_EXP 4
 561: PUSH
 562: LD_STRING Donaldson
 564: PPUSH
 565: LD_EXP 40
 569: NOT
 570: PPUSH
 571: LD_STRING 13c_
 573: PPUSH
 574: CALL 31084 0 3
 578: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debugMode ) , 13c_ ) ;
 579: LD_ADDR_EXP 5
 583: PUSH
 584: LD_STRING Bobby
 586: PPUSH
 587: LD_EXP 40
 591: NOT
 592: PPUSH
 593: LD_STRING 13c_
 595: PPUSH
 596: CALL 31084 0 3
 600: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debugMode ) , 13c_ ) ;
 601: LD_ADDR_EXP 6
 605: PUSH
 606: LD_STRING Cyrus
 608: PPUSH
 609: LD_EXP 40
 613: NOT
 614: PPUSH
 615: LD_STRING 13c_
 617: PPUSH
 618: CALL 31084 0 3
 622: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debugMode ) , 13c_ ) ;
 623: LD_ADDR_EXP 7
 627: PUSH
 628: LD_STRING Denis
 630: PPUSH
 631: LD_EXP 40
 635: NOT
 636: PPUSH
 637: LD_STRING 13c_
 639: PPUSH
 640: CALL 31084 0 3
 644: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , 13c_ ) ;
 645: LD_ADDR_EXP 8
 649: PUSH
 650: LD_STRING Brown
 652: PPUSH
 653: LD_EXP 40
 657: NOT
 658: PPUSH
 659: LD_STRING 13c_
 661: PPUSH
 662: CALL 31084 0 3
 666: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , true , 13c_ ) ;
 667: LD_ADDR_EXP 9
 671: PUSH
 672: LD_STRING Gladstone
 674: PPUSH
 675: LD_INT 1
 677: PPUSH
 678: LD_STRING 13c_
 680: PPUSH
 681: CALL 31084 0 3
 685: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , true , 13c_ ) ;
 686: LD_ADDR_EXP 10
 690: PUSH
 691: LD_STRING Houten
 693: PPUSH
 694: LD_INT 1
 696: PPUSH
 697: LD_STRING 13c_
 699: PPUSH
 700: CALL 31084 0 3
 704: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , true , 13c_ ) ;
 705: LD_ADDR_EXP 11
 709: PUSH
 710: LD_STRING Cornel
 712: PPUSH
 713: LD_INT 1
 715: PPUSH
 716: LD_STRING 13c_
 718: PPUSH
 719: CALL 31084 0 3
 723: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , true , 13c_ ) ;
 724: LD_ADDR_EXP 12
 728: PUSH
 729: LD_STRING Gary
 731: PPUSH
 732: LD_INT 1
 734: PPUSH
 735: LD_STRING 13c_
 737: PPUSH
 738: CALL 31084 0 3
 742: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , true , 13c_ ) ;
 743: LD_ADDR_EXP 13
 747: PUSH
 748: LD_STRING Frank
 750: PPUSH
 751: LD_INT 1
 753: PPUSH
 754: LD_STRING 13c_
 756: PPUSH
 757: CALL 31084 0 3
 761: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , true , 13c_ ) ;
 762: LD_ADDR_EXP 14
 766: PUSH
 767: LD_STRING Kikuchi
 769: PPUSH
 770: LD_INT 1
 772: PPUSH
 773: LD_STRING 13c_
 775: PPUSH
 776: CALL 31084 0 3
 780: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 781: LD_ADDR_EXP 15
 785: PUSH
 786: LD_STRING Powell
 788: PPUSH
 789: LD_INT 0
 791: PPUSH
 792: LD_STRING 
 794: PPUSH
 795: CALL 31084 0 3
 799: ST_TO_ADDR
// tmp := [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
 800: LD_ADDR_VAR 0 2
 804: PUSH
 805: LD_EXP 1
 809: PUSH
 810: LD_EXP 2
 814: PUSH
 815: LD_EXP 3
 819: PUSH
 820: LD_EXP 4
 824: PUSH
 825: LD_EXP 5
 829: PUSH
 830: LD_EXP 6
 834: PUSH
 835: LD_EXP 7
 839: PUSH
 840: LD_EXP 8
 844: PUSH
 845: LD_EXP 9
 849: PUSH
 850: LD_EXP 10
 854: PUSH
 855: LD_EXP 11
 859: PUSH
 860: LD_EXP 12
 864: PUSH
 865: LD_EXP 13
 869: PUSH
 870: LD_EXP 14
 874: PUSH
 875: EMPTY
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: LIST
 884: LIST
 885: LIST
 886: LIST
 887: LIST
 888: LIST
 889: LIST
 890: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_manual ] , [ f_type , unit_vehicle ] ] ) ;
 891: LD_ADDR_VAR 0 3
 895: PUSH
 896: LD_INT 22
 898: PUSH
 899: LD_INT 1
 901: PUSH
 902: EMPTY
 903: LIST
 904: LIST
 905: PUSH
 906: LD_INT 33
 908: PUSH
 909: LD_INT 1
 911: PUSH
 912: EMPTY
 913: LIST
 914: LIST
 915: PUSH
 916: LD_INT 21
 918: PUSH
 919: LD_INT 2
 921: PUSH
 922: EMPTY
 923: LIST
 924: LIST
 925: PUSH
 926: EMPTY
 927: LIST
 928: LIST
 929: LIST
 930: PPUSH
 931: CALL_OW 69
 935: ST_TO_ADDR
// for i = tmp downto 1 do
 936: LD_ADDR_VAR 0 4
 940: PUSH
 941: DOUBLE
 942: LD_VAR 0 2
 946: INC
 947: ST_TO_ADDR
 948: LD_INT 1
 950: PUSH
 951: FOR_DOWNTO
 952: IFFALSE 989
// if not tmp [ i ] then
 954: LD_VAR 0 2
 958: PUSH
 959: LD_VAR 0 4
 963: ARRAY
 964: NOT
 965: IFFALSE 987
// tmp := Delete ( tmp , i ) ;
 967: LD_ADDR_VAR 0 2
 971: PUSH
 972: LD_VAR 0 2
 976: PPUSH
 977: LD_VAR 0 4
 981: PPUSH
 982: CALL_OW 3
 986: ST_TO_ADDR
 987: GO 951
 989: POP
 990: POP
// for i = 1 to tmp do
 991: LD_ADDR_VAR 0 4
 995: PUSH
 996: DOUBLE
 997: LD_INT 1
 999: DEC
1000: ST_TO_ADDR
1001: LD_VAR 0 2
1005: PUSH
1006: FOR_TO
1007: IFFALSE 1037
// PlaceHumanInUnit ( tmp [ i ] , tmp2 [ i ] ) ;
1009: LD_VAR 0 2
1013: PUSH
1014: LD_VAR 0 4
1018: ARRAY
1019: PPUSH
1020: LD_VAR 0 3
1024: PUSH
1025: LD_VAR 0 4
1029: ARRAY
1030: PPUSH
1031: CALL_OW 52
1035: GO 1006
1037: POP
1038: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) = 0 then
1039: LD_INT 22
1041: PUSH
1042: LD_INT 1
1044: PUSH
1045: EMPTY
1046: LIST
1047: LIST
1048: PUSH
1049: LD_INT 25
1051: PUSH
1052: LD_INT 2
1054: PUSH
1055: EMPTY
1056: LIST
1057: LIST
1058: PUSH
1059: EMPTY
1060: LIST
1061: LIST
1062: PPUSH
1063: CALL_OW 69
1067: PUSH
1068: LD_INT 0
1070: EQUAL
1071: PUSH
1072: LD_INT 22
1074: PUSH
1075: LD_INT 1
1077: PUSH
1078: EMPTY
1079: LIST
1080: LIST
1081: PUSH
1082: LD_INT 34
1084: PUSH
1085: LD_INT 13
1087: PUSH
1088: EMPTY
1089: LIST
1090: LIST
1091: PUSH
1092: EMPTY
1093: LIST
1094: LIST
1095: PPUSH
1096: CALL_OW 69
1100: PUSH
1101: LD_INT 0
1103: EQUAL
1104: AND
1105: IFFALSE 1119
// SetClass ( JMM , 2 ) ;
1107: LD_EXP 1
1111: PPUSH
1112: LD_INT 2
1114: PPUSH
1115: CALL_OW 336
// end ;
1119: LD_VAR 0 1
1123: RET
// export function PrepareAmericansRandom ; var i ; begin
1124: LD_INT 0
1126: PPUSH
1127: PPUSH
// uc_side = 1 ;
1128: LD_ADDR_OWVAR 20
1132: PUSH
1133: LD_INT 1
1135: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13c_others ) ;
1136: LD_ADDR_EXP 16
1140: PUSH
1141: LD_STRING 13c_others
1143: PPUSH
1144: CALL_OW 31
1148: ST_TO_ADDR
// for i in others13 do
1149: LD_ADDR_VAR 0 2
1153: PUSH
1154: LD_EXP 16
1158: PUSH
1159: FOR_IN
1160: IFFALSE 1213
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1162: LD_VAR 0 2
1166: PPUSH
1167: LD_INT 22
1169: PUSH
1170: LD_INT 1
1172: PUSH
1173: EMPTY
1174: LIST
1175: LIST
1176: PUSH
1177: LD_INT 21
1179: PUSH
1180: LD_INT 2
1182: PUSH
1183: EMPTY
1184: LIST
1185: LIST
1186: PUSH
1187: LD_INT 58
1189: PUSH
1190: EMPTY
1191: LIST
1192: PUSH
1193: EMPTY
1194: LIST
1195: LIST
1196: LIST
1197: PPUSH
1198: CALL_OW 69
1202: PUSH
1203: LD_INT 1
1205: ARRAY
1206: PPUSH
1207: CALL_OW 52
1211: GO 1159
1213: POP
1214: POP
// end ;
1215: LD_VAR 0 1
1219: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1220: LD_INT 0
1222: PPUSH
1223: PPUSH
1224: PPUSH
1225: PPUSH
1226: PPUSH
1227: PPUSH
// vehicles = LoadVariable ( 13_VehiclesIn13_1 , [ [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] ] ) ;
1228: LD_ADDR_VAR 0 5
1232: PUSH
1233: LD_STRING 13_VehiclesIn13_1
1235: PPUSH
1236: LD_INT 1
1238: PUSH
1239: LD_INT 5
1241: PUSH
1242: LD_INT 3
1244: PUSH
1245: LD_INT 1
1247: PUSH
1248: LD_INT 6
1250: PUSH
1251: LD_INT 100
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: LIST
1258: LIST
1259: LIST
1260: LIST
1261: PUSH
1262: LD_INT 1
1264: PUSH
1265: LD_INT 5
1267: PUSH
1268: LD_INT 3
1270: PUSH
1271: LD_INT 1
1273: PUSH
1274: LD_INT 6
1276: PUSH
1277: LD_INT 100
1279: PUSH
1280: EMPTY
1281: LIST
1282: LIST
1283: LIST
1284: LIST
1285: LIST
1286: LIST
1287: PUSH
1288: LD_INT 1
1290: PUSH
1291: LD_INT 5
1293: PUSH
1294: LD_INT 3
1296: PUSH
1297: LD_INT 1
1299: PUSH
1300: LD_INT 6
1302: PUSH
1303: LD_INT 100
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: LIST
1310: LIST
1311: LIST
1312: LIST
1313: PUSH
1314: LD_INT 1
1316: PUSH
1317: LD_INT 5
1319: PUSH
1320: LD_INT 3
1322: PUSH
1323: LD_INT 1
1325: PUSH
1326: LD_INT 6
1328: PUSH
1329: LD_INT 100
1331: PUSH
1332: EMPTY
1333: LIST
1334: LIST
1335: LIST
1336: LIST
1337: LIST
1338: LIST
1339: PUSH
1340: LD_INT 1
1342: PUSH
1343: LD_INT 5
1345: PUSH
1346: LD_INT 3
1348: PUSH
1349: LD_INT 1
1351: PUSH
1352: LD_INT 6
1354: PUSH
1355: LD_INT 100
1357: PUSH
1358: EMPTY
1359: LIST
1360: LIST
1361: LIST
1362: LIST
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 1
1368: PUSH
1369: LD_INT 5
1371: PUSH
1372: LD_INT 3
1374: PUSH
1375: LD_INT 1
1377: PUSH
1378: LD_INT 6
1380: PUSH
1381: LD_INT 100
1383: PUSH
1384: EMPTY
1385: LIST
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: PUSH
1392: LD_INT 1
1394: PUSH
1395: LD_INT 5
1397: PUSH
1398: LD_INT 3
1400: PUSH
1401: LD_INT 1
1403: PUSH
1404: LD_INT 6
1406: PUSH
1407: LD_INT 100
1409: PUSH
1410: EMPTY
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: PUSH
1418: LD_INT 1
1420: PUSH
1421: LD_INT 5
1423: PUSH
1424: LD_INT 3
1426: PUSH
1427: LD_INT 1
1429: PUSH
1430: LD_INT 6
1432: PUSH
1433: LD_INT 100
1435: PUSH
1436: EMPTY
1437: LIST
1438: LIST
1439: LIST
1440: LIST
1441: LIST
1442: LIST
1443: PUSH
1444: EMPTY
1445: LIST
1446: LIST
1447: LIST
1448: LIST
1449: LIST
1450: LIST
1451: LIST
1452: LIST
1453: PPUSH
1454: CALL_OW 30
1458: ST_TO_ADDR
// resources = LoadVariable ( 13_ResourcesInCargo13_1 , [ ] ) ;
1459: LD_ADDR_EXP 24
1463: PUSH
1464: LD_STRING 13_ResourcesInCargo13_1
1466: PPUSH
1467: EMPTY
1468: PPUSH
1469: CALL_OW 30
1473: ST_TO_ADDR
// cargoList = [ ] ;
1474: LD_ADDR_VAR 0 6
1478: PUSH
1479: EMPTY
1480: ST_TO_ADDR
// uc_side = 1 ;
1481: LD_ADDR_OWVAR 20
1485: PUSH
1486: LD_INT 1
1488: ST_TO_ADDR
// if vehicles then
1489: LD_VAR 0 5
1493: IFFALSE 1840
// begin for i := 1 to vehicles do
1495: LD_ADDR_VAR 0 2
1499: PUSH
1500: DOUBLE
1501: LD_INT 1
1503: DEC
1504: ST_TO_ADDR
1505: LD_VAR 0 5
1509: PUSH
1510: FOR_TO
1511: IFFALSE 1660
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1513: LD_ADDR_OWVAR 21
1517: PUSH
1518: LD_VAR 0 5
1522: PUSH
1523: LD_VAR 0 2
1527: ARRAY
1528: PUSH
1529: LD_INT 1
1531: ARRAY
1532: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1533: LD_ADDR_OWVAR 37
1537: PUSH
1538: LD_VAR 0 5
1542: PUSH
1543: LD_VAR 0 2
1547: ARRAY
1548: PUSH
1549: LD_INT 2
1551: ARRAY
1552: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1553: LD_ADDR_OWVAR 39
1557: PUSH
1558: LD_VAR 0 5
1562: PUSH
1563: LD_VAR 0 2
1567: ARRAY
1568: PUSH
1569: LD_INT 3
1571: ARRAY
1572: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1573: LD_ADDR_OWVAR 38
1577: PUSH
1578: LD_VAR 0 5
1582: PUSH
1583: LD_VAR 0 2
1587: ARRAY
1588: PUSH
1589: LD_INT 4
1591: ARRAY
1592: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1593: LD_ADDR_OWVAR 40
1597: PUSH
1598: LD_VAR 0 5
1602: PUSH
1603: LD_VAR 0 2
1607: ARRAY
1608: PUSH
1609: LD_INT 5
1611: ARRAY
1612: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1613: LD_ADDR_OWVAR 41
1617: PUSH
1618: LD_INT 40
1620: ST_TO_ADDR
// veh = CreateVehicle ;
1621: LD_ADDR_VAR 0 4
1625: PUSH
1626: CALL_OW 45
1630: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1631: LD_VAR 0 4
1635: PPUSH
1636: LD_INT 1
1638: PPUSH
1639: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1643: LD_VAR 0 4
1647: PPUSH
1648: LD_INT 2
1650: PPUSH
1651: LD_INT 0
1653: PPUSH
1654: CALL_OW 49
// end ;
1658: GO 1510
1660: POP
1661: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1662: LD_ADDR_VAR 0 6
1666: PUSH
1667: LD_INT 22
1669: PUSH
1670: LD_INT 1
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: PUSH
1677: LD_INT 21
1679: PUSH
1680: LD_INT 2
1682: PUSH
1683: EMPTY
1684: LIST
1685: LIST
1686: PUSH
1687: LD_INT 34
1689: PUSH
1690: LD_INT 12
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: LIST
1701: PPUSH
1702: CALL_OW 69
1706: ST_TO_ADDR
// if cargoList then
1707: LD_VAR 0 6
1711: IFFALSE 1840
// for i = 1 to cargoList do
1713: LD_ADDR_VAR 0 2
1717: PUSH
1718: DOUBLE
1719: LD_INT 1
1721: DEC
1722: ST_TO_ADDR
1723: LD_VAR 0 6
1727: PUSH
1728: FOR_TO
1729: IFFALSE 1838
// begin if resources then
1731: LD_EXP 24
1735: IFFALSE 1836
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1737: LD_VAR 0 6
1741: PUSH
1742: LD_VAR 0 2
1746: ARRAY
1747: PPUSH
1748: LD_INT 1
1750: PPUSH
1751: LD_EXP 24
1755: PUSH
1756: LD_VAR 0 2
1760: ARRAY
1761: PUSH
1762: LD_INT 1
1764: ARRAY
1765: PPUSH
1766: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1770: LD_VAR 0 6
1774: PUSH
1775: LD_VAR 0 2
1779: ARRAY
1780: PPUSH
1781: LD_INT 2
1783: PPUSH
1784: LD_EXP 24
1788: PUSH
1789: LD_VAR 0 2
1793: ARRAY
1794: PUSH
1795: LD_INT 2
1797: ARRAY
1798: PPUSH
1799: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1803: LD_VAR 0 6
1807: PUSH
1808: LD_VAR 0 2
1812: ARRAY
1813: PPUSH
1814: LD_INT 3
1816: PPUSH
1817: LD_EXP 24
1821: PUSH
1822: LD_VAR 0 2
1826: ARRAY
1827: PUSH
1828: LD_INT 3
1830: ARRAY
1831: PPUSH
1832: CALL_OW 291
// end ; end ;
1836: GO 1728
1838: POP
1839: POP
// end ; end ;
1840: LD_VAR 0 1
1844: RET
// export function PowellSupport ; var i , veh , un ; begin
1845: LD_INT 0
1847: PPUSH
1848: PPUSH
1849: PPUSH
1850: PPUSH
// for i := 1 to [ 4 , 3 , 2 , 2 ] [ Difficulty ] do
1851: LD_ADDR_VAR 0 2
1855: PUSH
1856: DOUBLE
1857: LD_INT 1
1859: DEC
1860: ST_TO_ADDR
1861: LD_INT 4
1863: PUSH
1864: LD_INT 3
1866: PUSH
1867: LD_INT 2
1869: PUSH
1870: LD_INT 2
1872: PUSH
1873: EMPTY
1874: LIST
1875: LIST
1876: LIST
1877: LIST
1878: PUSH
1879: LD_OWVAR 67
1883: ARRAY
1884: PUSH
1885: FOR_TO
1886: IFFALSE 2150
// begin uc_nation := 1 ;
1888: LD_ADDR_OWVAR 21
1892: PUSH
1893: LD_INT 1
1895: ST_TO_ADDR
// uc_side := 1 ;
1896: LD_ADDR_OWVAR 20
1900: PUSH
1901: LD_INT 1
1903: ST_TO_ADDR
// vc_engine := engine_siberite ;
1904: LD_ADDR_OWVAR 39
1908: PUSH
1909: LD_INT 3
1911: ST_TO_ADDR
// vc_control := control_manual ;
1912: LD_ADDR_OWVAR 38
1916: PUSH
1917: LD_INT 1
1919: ST_TO_ADDR
// vc_weapon := [ us_laser , us_heavy_gun , us_laser , us_double_gun , us_double_gun ] [ Difficulty + rand ( 0 , 1 ) ] ;
1920: LD_ADDR_OWVAR 40
1924: PUSH
1925: LD_INT 9
1927: PUSH
1928: LD_INT 6
1930: PUSH
1931: LD_INT 9
1933: PUSH
1934: LD_INT 5
1936: PUSH
1937: LD_INT 5
1939: PUSH
1940: EMPTY
1941: LIST
1942: LIST
1943: LIST
1944: LIST
1945: LIST
1946: PUSH
1947: LD_OWVAR 67
1951: PUSH
1952: LD_INT 0
1954: PPUSH
1955: LD_INT 1
1957: PPUSH
1958: CALL_OW 12
1962: PLUS
1963: ARRAY
1964: ST_TO_ADDR
// if vc_weapon = us_heavy_gun then
1965: LD_OWVAR 40
1969: PUSH
1970: LD_INT 6
1972: EQUAL
1973: IFFALSE 2002
// vc_chassis := [ us_morphling , us_heavy_tracked , us_heavy_tracked ] [ Difficulty ] else
1975: LD_ADDR_OWVAR 37
1979: PUSH
1980: LD_INT 5
1982: PUSH
1983: LD_INT 4
1985: PUSH
1986: LD_INT 4
1988: PUSH
1989: EMPTY
1990: LIST
1991: LIST
1992: LIST
1993: PUSH
1994: LD_OWVAR 67
1998: ARRAY
1999: ST_TO_ADDR
2000: GO 2037
// vc_chassis := [ us_morphling , us_heavy_tracked , us_medium_tracked , us_medium_tracked ] [ rand ( 1 , 4 ) ] ;
2002: LD_ADDR_OWVAR 37
2006: PUSH
2007: LD_INT 5
2009: PUSH
2010: LD_INT 4
2012: PUSH
2013: LD_INT 3
2015: PUSH
2016: LD_INT 3
2018: PUSH
2019: EMPTY
2020: LIST
2021: LIST
2022: LIST
2023: LIST
2024: PUSH
2025: LD_INT 1
2027: PPUSH
2028: LD_INT 4
2030: PPUSH
2031: CALL_OW 12
2035: ARRAY
2036: ST_TO_ADDR
// veh = CreateVehicle ;
2037: LD_ADDR_VAR 0 3
2041: PUSH
2042: CALL_OW 45
2046: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2047: LD_VAR 0 3
2051: PPUSH
2052: LD_INT 2
2054: PPUSH
2055: LD_INT 0
2057: PPUSH
2058: CALL_OW 49
// SetDir ( veh , 1 ) ;
2062: LD_VAR 0 3
2066: PPUSH
2067: LD_INT 1
2069: PPUSH
2070: CALL_OW 233
// hc_gallery :=  ;
2074: LD_ADDR_OWVAR 33
2078: PUSH
2079: LD_STRING 
2081: ST_TO_ADDR
// hc_name :=  ;
2082: LD_ADDR_OWVAR 26
2086: PUSH
2087: LD_STRING 
2089: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , [ 9 , 8 , 8 , 7 ] [ Difficulty ] ) ;
2090: LD_INT 0
2092: PPUSH
2093: LD_INT 3
2095: PPUSH
2096: LD_INT 9
2098: PUSH
2099: LD_INT 8
2101: PUSH
2102: LD_INT 8
2104: PUSH
2105: LD_INT 7
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: PUSH
2114: LD_OWVAR 67
2118: ARRAY
2119: PPUSH
2120: CALL_OW 380
// un := CreateHuman ;
2124: LD_ADDR_VAR 0 4
2128: PUSH
2129: CALL_OW 44
2133: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2134: LD_VAR 0 4
2138: PPUSH
2139: LD_VAR 0 3
2143: PPUSH
2144: CALL_OW 52
// end ;
2148: GO 1885
2150: POP
2151: POP
// for i := 1 to [ 2 , 2 , 2 , 1 ] [ Difficulty ] do
2152: LD_ADDR_VAR 0 2
2156: PUSH
2157: DOUBLE
2158: LD_INT 1
2160: DEC
2161: ST_TO_ADDR
2162: LD_INT 2
2164: PUSH
2165: LD_INT 2
2167: PUSH
2168: LD_INT 2
2170: PUSH
2171: LD_INT 1
2173: PUSH
2174: EMPTY
2175: LIST
2176: LIST
2177: LIST
2178: LIST
2179: PUSH
2180: LD_OWVAR 67
2184: ARRAY
2185: PUSH
2186: FOR_TO
2187: IFFALSE 2262
// begin PrepareHuman ( false , class_soldier , [ 9 , 8 , 8 , 7 ] [ Difficulty ] ) ;
2189: LD_INT 0
2191: PPUSH
2192: LD_INT 1
2194: PPUSH
2195: LD_INT 9
2197: PUSH
2198: LD_INT 8
2200: PUSH
2201: LD_INT 8
2203: PUSH
2204: LD_INT 7
2206: PUSH
2207: EMPTY
2208: LIST
2209: LIST
2210: LIST
2211: LIST
2212: PUSH
2213: LD_OWVAR 67
2217: ARRAY
2218: PPUSH
2219: CALL_OW 380
// un := CreateHuman ;
2223: LD_ADDR_VAR 0 4
2227: PUSH
2228: CALL_OW 44
2232: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2233: LD_VAR 0 4
2237: PPUSH
2238: LD_INT 1
2240: PPUSH
2241: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
2245: LD_VAR 0 4
2249: PPUSH
2250: LD_INT 2
2252: PPUSH
2253: LD_INT 0
2255: PPUSH
2256: CALL_OW 49
// end ;
2260: GO 2186
2262: POP
2263: POP
// end ; end_of_file
2264: LD_VAR 0 1
2268: RET
// export function PrepareBurlak ; begin
2269: LD_INT 0
2271: PPUSH
// uc_side := 7 ;
2272: LD_ADDR_OWVAR 20
2276: PUSH
2277: LD_INT 7
2279: ST_TO_ADDR
// uc_nation := 3 ;
2280: LD_ADDR_OWVAR 21
2284: PUSH
2285: LD_INT 3
2287: ST_TO_ADDR
// vc_engine := engine_siberite ;
2288: LD_ADDR_OWVAR 39
2292: PUSH
2293: LD_INT 3
2295: ST_TO_ADDR
// vc_control := control_manual ;
2296: LD_ADDR_OWVAR 38
2300: PUSH
2301: LD_INT 1
2303: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_heavy_gun , ru_heavy_gun ] [ Difficulty ] ;
2304: LD_ADDR_OWVAR 40
2308: PUSH
2309: LD_INT 44
2311: PUSH
2312: LD_INT 45
2314: PUSH
2315: LD_INT 46
2317: PUSH
2318: LD_INT 46
2320: PUSH
2321: EMPTY
2322: LIST
2323: LIST
2324: LIST
2325: LIST
2326: PUSH
2327: LD_OWVAR 67
2331: ARRAY
2332: ST_TO_ADDR
// vc_chassis := ru_heavy_tracked ;
2333: LD_ADDR_OWVAR 37
2337: PUSH
2338: LD_INT 24
2340: ST_TO_ADDR
// Masha := CreateVehicle ;
2341: LD_ADDR_EXP 18
2345: PUSH
2346: CALL_OW 45
2350: ST_TO_ADDR
// SetDir ( Masha , 2 ) ;
2351: LD_EXP 18
2355: PPUSH
2356: LD_INT 2
2358: PPUSH
2359: CALL_OW 233
// PlaceUnitArea ( Masha , GorkySpawn , false ) ;
2363: LD_EXP 18
2367: PPUSH
2368: LD_INT 3
2370: PPUSH
2371: LD_INT 0
2373: PPUSH
2374: CALL_OW 49
// SetMark ( Masha , 1 ) ;
2378: LD_EXP 18
2382: PPUSH
2383: LD_INT 1
2385: PPUSH
2386: CALL_OW 242
// Burlak = PrepareUnit ( Burlak , false ,  ) ;
2390: LD_ADDR_EXP 17
2394: PUSH
2395: LD_STRING Burlak
2397: PPUSH
2398: LD_INT 0
2400: PPUSH
2401: LD_STRING 
2403: PPUSH
2404: CALL 31084 0 3
2408: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , Masha ) ;
2409: LD_EXP 17
2413: PPUSH
2414: LD_EXP 18
2418: PPUSH
2419: CALL_OW 52
// ComAgressiveMove ( Masha , 107 , 118 ) ;
2423: LD_EXP 18
2427: PPUSH
2428: LD_INT 107
2430: PPUSH
2431: LD_INT 118
2433: PPUSH
2434: CALL_OW 114
// spawnBurlak := 1 ;
2438: LD_ADDR_EXP 27
2442: PUSH
2443: LD_INT 1
2445: ST_TO_ADDR
// end ;
2446: LD_VAR 0 1
2450: RET
// export function BurlakArmy ; var i , veh , tmp , bazooka ; begin
2451: LD_INT 0
2453: PPUSH
2454: PPUSH
2455: PPUSH
2456: PPUSH
2457: PPUSH
// uc_side := 7 ;
2458: LD_ADDR_OWVAR 20
2462: PUSH
2463: LD_INT 7
2465: ST_TO_ADDR
// uc_nation := 3 ;
2466: LD_ADDR_OWVAR 21
2470: PUSH
2471: LD_INT 3
2473: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , false ,  ) ;
2474: LD_ADDR_EXP 19
2478: PUSH
2479: LD_STRING Gnyevko
2481: PPUSH
2482: LD_INT 0
2484: PPUSH
2485: LD_STRING 
2487: PPUSH
2488: CALL 31084 0 3
2492: ST_TO_ADDR
// Titov := PrepareUnit ( Titov , false ,  ) ;
2493: LD_ADDR_EXP 20
2497: PUSH
2498: LD_STRING Titov
2500: PPUSH
2501: LD_INT 0
2503: PPUSH
2504: LD_STRING 
2506: PPUSH
2507: CALL 31084 0 3
2511: ST_TO_ADDR
// Xavier := PrepareUnit ( Xavier2 , false ,  ) ;
2512: LD_ADDR_EXP 21
2516: PUSH
2517: LD_STRING Xavier2
2519: PPUSH
2520: LD_INT 0
2522: PPUSH
2523: LD_STRING 
2525: PPUSH
2526: CALL 31084 0 3
2530: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , false ,  ) ;
2531: LD_ADDR_EXP 22
2535: PUSH
2536: LD_STRING Belkov
2538: PPUSH
2539: LD_INT 0
2541: PPUSH
2542: LD_STRING 
2544: PPUSH
2545: CALL 31084 0 3
2549: ST_TO_ADDR
// Lipshchin := PrepareUnit ( Lipshchin , false ,  ) ;
2550: LD_ADDR_EXP 23
2554: PUSH
2555: LD_STRING Lipshchin
2557: PPUSH
2558: LD_INT 0
2560: PPUSH
2561: LD_STRING 
2563: PPUSH
2564: CALL 31084 0 3
2568: ST_TO_ADDR
// for i = 1 to 5 do
2569: LD_ADDR_VAR 0 2
2573: PUSH
2574: DOUBLE
2575: LD_INT 1
2577: DEC
2578: ST_TO_ADDR
2579: LD_INT 5
2581: PUSH
2582: FOR_TO
2583: IFFALSE 2708
// begin vc_engine := engine_siberite ;
2585: LD_ADDR_OWVAR 39
2589: PUSH
2590: LD_INT 3
2592: ST_TO_ADDR
// vc_control := control_manual ;
2593: LD_ADDR_OWVAR 38
2597: PUSH
2598: LD_INT 1
2600: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_rocket_launcher , ru_rocket_launcher , ru_gun , ru_time_lapser ] [ rand ( 1 , 5 ) ] ;
2601: LD_ADDR_OWVAR 40
2605: PUSH
2606: LD_INT 43
2608: PUSH
2609: LD_INT 45
2611: PUSH
2612: LD_INT 45
2614: PUSH
2615: LD_INT 44
2617: PUSH
2618: LD_INT 49
2620: PUSH
2621: EMPTY
2622: LIST
2623: LIST
2624: LIST
2625: LIST
2626: LIST
2627: PUSH
2628: LD_INT 1
2630: PPUSH
2631: LD_INT 5
2633: PPUSH
2634: CALL_OW 12
2638: ARRAY
2639: ST_TO_ADDR
// vc_chassis := [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] ;
2640: LD_ADDR_OWVAR 37
2644: PUSH
2645: LD_INT 22
2647: PUSH
2648: LD_INT 22
2650: PUSH
2651: LD_INT 24
2653: PUSH
2654: LD_INT 24
2656: PUSH
2657: EMPTY
2658: LIST
2659: LIST
2660: LIST
2661: LIST
2662: PUSH
2663: LD_OWVAR 67
2667: ARRAY
2668: ST_TO_ADDR
// veh = CreateVehicle ;
2669: LD_ADDR_VAR 0 3
2673: PUSH
2674: CALL_OW 45
2678: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2679: LD_VAR 0 3
2683: PPUSH
2684: LD_INT 2
2686: PPUSH
2687: CALL_OW 233
// PlaceUnitArea ( veh , GorkySpawn , false ) ;
2691: LD_VAR 0 3
2695: PPUSH
2696: LD_INT 3
2698: PPUSH
2699: LD_INT 0
2701: PPUSH
2702: CALL_OW 49
// end ;
2706: GO 2582
2708: POP
2709: POP
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2710: LD_ADDR_VAR 0 4
2714: PUSH
2715: LD_INT 22
2717: PUSH
2718: LD_INT 7
2720: PUSH
2721: EMPTY
2722: LIST
2723: LIST
2724: PUSH
2725: LD_INT 21
2727: PUSH
2728: LD_INT 2
2730: PUSH
2731: EMPTY
2732: LIST
2733: LIST
2734: PUSH
2735: LD_INT 58
2737: PUSH
2738: EMPTY
2739: LIST
2740: PUSH
2741: EMPTY
2742: LIST
2743: LIST
2744: LIST
2745: PPUSH
2746: CALL_OW 69
2750: ST_TO_ADDR
// PlaceHumanInUnit ( Gnyevko , tmp [ 1 ] ) ;
2751: LD_EXP 19
2755: PPUSH
2756: LD_VAR 0 4
2760: PUSH
2761: LD_INT 1
2763: ARRAY
2764: PPUSH
2765: CALL_OW 52
// PlaceHumanInUnit ( Titov , tmp [ 2 ] ) ;
2769: LD_EXP 20
2773: PPUSH
2774: LD_VAR 0 4
2778: PUSH
2779: LD_INT 2
2781: ARRAY
2782: PPUSH
2783: CALL_OW 52
// PlaceHumanInUnit ( Xavier , tmp [ 3 ] ) ;
2787: LD_EXP 21
2791: PPUSH
2792: LD_VAR 0 4
2796: PUSH
2797: LD_INT 3
2799: ARRAY
2800: PPUSH
2801: CALL_OW 52
// PlaceHumanInUnit ( Belkov , tmp [ 4 ] ) ;
2805: LD_EXP 22
2809: PPUSH
2810: LD_VAR 0 4
2814: PUSH
2815: LD_INT 4
2817: ARRAY
2818: PPUSH
2819: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , tmp [ 5 ] ) ;
2823: LD_EXP 23
2827: PPUSH
2828: LD_VAR 0 4
2832: PUSH
2833: LD_INT 5
2835: ARRAY
2836: PPUSH
2837: CALL_OW 52
// SetClass ( Gnyevko , class_mechanic ) ;
2841: LD_EXP 19
2845: PPUSH
2846: LD_INT 3
2848: PPUSH
2849: CALL_OW 336
// SetClass ( [ Titov , Lipshchin ] , class_bazooker ) ;
2853: LD_EXP 20
2857: PUSH
2858: LD_EXP 23
2862: PUSH
2863: EMPTY
2864: LIST
2865: LIST
2866: PPUSH
2867: LD_INT 9
2869: PPUSH
2870: CALL_OW 336
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
2874: LD_ADDR_VAR 0 4
2878: PUSH
2879: LD_INT 22
2881: PUSH
2882: LD_INT 7
2884: PUSH
2885: EMPTY
2886: LIST
2887: LIST
2888: PPUSH
2889: CALL_OW 69
2893: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2894: LD_VAR 0 4
2898: PPUSH
2899: LD_INT 107
2901: PPUSH
2902: LD_INT 118
2904: PPUSH
2905: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
2909: LD_INT 35
2911: PPUSH
2912: CALL_OW 67
// ComMoveUnit ( UnitFilter ( tmp , [ f_weapon , ru_time_lapser ] ) , Masha ) ;
2916: LD_VAR 0 4
2920: PPUSH
2921: LD_INT 34
2923: PUSH
2924: LD_INT 49
2926: PUSH
2927: EMPTY
2928: LIST
2929: LIST
2930: PPUSH
2931: CALL_OW 72
2935: PPUSH
2936: LD_EXP 18
2940: PPUSH
2941: CALL_OW 112
// ComAgressiveMove ( UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) , 107 , 118 ) ;
2945: LD_VAR 0 4
2949: PPUSH
2950: LD_INT 3
2952: PUSH
2953: LD_INT 34
2955: PUSH
2956: LD_INT 49
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: PUSH
2963: EMPTY
2964: LIST
2965: LIST
2966: PPUSH
2967: CALL_OW 72
2971: PPUSH
2972: LD_INT 107
2974: PPUSH
2975: LD_INT 118
2977: PPUSH
2978: CALL_OW 114
// bazooka := UnitFilter ( [ Titov , Lipshchin ] , [ [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
2982: LD_ADDR_VAR 0 5
2986: PUSH
2987: LD_EXP 20
2991: PUSH
2992: LD_EXP 23
2996: PUSH
2997: EMPTY
2998: LIST
2999: LIST
3000: PPUSH
3001: LD_INT 50
3003: PUSH
3004: EMPTY
3005: LIST
3006: PUSH
3007: LD_INT 3
3009: PUSH
3010: LD_INT 54
3012: PUSH
3013: EMPTY
3014: LIST
3015: PUSH
3016: EMPTY
3017: LIST
3018: LIST
3019: PUSH
3020: EMPTY
3021: LIST
3022: LIST
3023: PPUSH
3024: CALL_OW 72
3028: ST_TO_ADDR
// if bazooka then
3029: LD_VAR 0 5
3033: IFFALSE 3075
// begin for i in bazooka do
3035: LD_ADDR_VAR 0 2
3039: PUSH
3040: LD_VAR 0 5
3044: PUSH
3045: FOR_IN
3046: IFFALSE 3073
// if See ( 1 , i ) then
3048: LD_INT 1
3050: PPUSH
3051: LD_VAR 0 2
3055: PPUSH
3056: CALL_OW 292
3060: IFFALSE 3071
// ComSpaceTimeShoot ( i ) ;
3062: LD_VAR 0 2
3066: PPUSH
3067: CALL 32031 0 1
3071: GO 3045
3073: POP
3074: POP
// end ; until UnitFilter ( tmp , [ f_weapon , ru_time_lapser ] ) = 0 or IsDying ( Masha ) ;
3075: LD_VAR 0 4
3079: PPUSH
3080: LD_INT 34
3082: PUSH
3083: LD_INT 49
3085: PUSH
3086: EMPTY
3087: LIST
3088: LIST
3089: PPUSH
3090: CALL_OW 72
3094: PUSH
3095: LD_INT 0
3097: EQUAL
3098: PUSH
3099: LD_EXP 18
3103: PPUSH
3104: CALL_OW 303
3108: OR
3109: IFFALSE 2909
// repeat wait ( 0 0$1 ) ;
3111: LD_INT 35
3113: PPUSH
3114: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 7 ] ) diff Burlak ;
3118: LD_ADDR_VAR 0 4
3122: PUSH
3123: LD_INT 22
3125: PUSH
3126: LD_INT 7
3128: PUSH
3129: EMPTY
3130: LIST
3131: LIST
3132: PPUSH
3133: CALL_OW 69
3137: PUSH
3138: LD_EXP 17
3142: DIFF
3143: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
3144: LD_VAR 0 4
3148: PPUSH
3149: LD_INT 107
3151: PPUSH
3152: LD_INT 118
3154: PPUSH
3155: CALL_OW 114
// bazooka := UnitFilter ( [ Titov , Lipshchin ] , [ [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
3159: LD_ADDR_VAR 0 5
3163: PUSH
3164: LD_EXP 20
3168: PUSH
3169: LD_EXP 23
3173: PUSH
3174: EMPTY
3175: LIST
3176: LIST
3177: PPUSH
3178: LD_INT 50
3180: PUSH
3181: EMPTY
3182: LIST
3183: PUSH
3184: LD_INT 3
3186: PUSH
3187: LD_INT 54
3189: PUSH
3190: EMPTY
3191: LIST
3192: PUSH
3193: EMPTY
3194: LIST
3195: LIST
3196: PUSH
3197: EMPTY
3198: LIST
3199: LIST
3200: PPUSH
3201: CALL_OW 72
3205: ST_TO_ADDR
// if bazooka then
3206: LD_VAR 0 5
3210: IFFALSE 3252
// begin for i in bazooka do
3212: LD_ADDR_VAR 0 2
3216: PUSH
3217: LD_VAR 0 5
3221: PUSH
3222: FOR_IN
3223: IFFALSE 3250
// if See ( 1 , i ) then
3225: LD_INT 1
3227: PPUSH
3228: LD_VAR 0 2
3232: PPUSH
3233: CALL_OW 292
3237: IFFALSE 3248
// ComSpaceTimeShoot ( i ) ;
3239: LD_VAR 0 2
3243: PPUSH
3244: CALL 32031 0 1
3248: GO 3222
3250: POP
3251: POP
// end ; if IsOk ( Burlak ) and not IsInUnit ( Burlak ) then
3252: LD_EXP 17
3256: PPUSH
3257: CALL_OW 302
3261: PUSH
3262: LD_EXP 17
3266: PPUSH
3267: CALL_OW 310
3271: NOT
3272: AND
3273: IFFALSE 3290
// ComMoveXY ( Burlak , 107 , 118 ) ;
3275: LD_EXP 17
3279: PPUSH
3280: LD_INT 107
3282: PPUSH
3283: LD_INT 118
3285: PPUSH
3286: CALL_OW 111
// until not tmp ;
3290: LD_VAR 0 4
3294: NOT
3295: IFFALSE 3111
// end ;
3297: LD_VAR 0 1
3301: RET
// export function PrepareRussianAttack ; var i , un , veh , area , dir ; begin
3302: LD_INT 0
3304: PPUSH
3305: PPUSH
3306: PPUSH
3307: PPUSH
3308: PPUSH
3309: PPUSH
// result := [ ] ;
3310: LD_ADDR_VAR 0 1
3314: PUSH
3315: EMPTY
3316: ST_TO_ADDR
// dir := rand ( 1 , 2 ) ;
3317: LD_ADDR_VAR 0 6
3321: PUSH
3322: LD_INT 1
3324: PPUSH
3325: LD_INT 2
3327: PPUSH
3328: CALL_OW 12
3332: ST_TO_ADDR
// area := [ ArabianSpawn1 , ArabianSpawn2 ] [ dir ] ;
3333: LD_ADDR_VAR 0 5
3337: PUSH
3338: LD_INT 8
3340: PUSH
3341: LD_INT 9
3343: PUSH
3344: EMPTY
3345: LIST
3346: LIST
3347: PUSH
3348: LD_VAR 0 6
3352: ARRAY
3353: ST_TO_ADDR
// for i := 1 to [ 6 , 8 , 10 , 11 ] [ Difficulty ] do
3354: LD_ADDR_VAR 0 2
3358: PUSH
3359: DOUBLE
3360: LD_INT 1
3362: DEC
3363: ST_TO_ADDR
3364: LD_INT 6
3366: PUSH
3367: LD_INT 8
3369: PUSH
3370: LD_INT 10
3372: PUSH
3373: LD_INT 11
3375: PUSH
3376: EMPTY
3377: LIST
3378: LIST
3379: LIST
3380: LIST
3381: PUSH
3382: LD_OWVAR 67
3386: ARRAY
3387: PUSH
3388: FOR_TO
3389: IFFALSE 3627
// begin uc_side := 3 ;
3391: LD_ADDR_OWVAR 20
3395: PUSH
3396: LD_INT 3
3398: ST_TO_ADDR
// uc_nation := 3 ;
3399: LD_ADDR_OWVAR 21
3403: PUSH
3404: LD_INT 3
3406: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] , [ ru_heavy_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] [ rand ( 1 , 5 ) ] , 100 ) ;
3407: LD_INT 24
3409: PPUSH
3410: LD_INT 3
3412: PPUSH
3413: LD_INT 1
3415: PUSH
3416: LD_INT 3
3418: PUSH
3419: EMPTY
3420: LIST
3421: LIST
3422: PUSH
3423: LD_INT 1
3425: PPUSH
3426: LD_INT 2
3428: PPUSH
3429: CALL_OW 12
3433: ARRAY
3434: PPUSH
3435: LD_INT 46
3437: PUSH
3438: LD_INT 46
3440: PUSH
3441: LD_INT 45
3443: PUSH
3444: LD_INT 47
3446: PUSH
3447: LD_INT 49
3449: PUSH
3450: EMPTY
3451: LIST
3452: LIST
3453: LIST
3454: LIST
3455: LIST
3456: PUSH
3457: LD_INT 1
3459: PPUSH
3460: LD_INT 5
3462: PPUSH
3463: CALL_OW 12
3467: ARRAY
3468: PPUSH
3469: LD_INT 100
3471: PPUSH
3472: CALL 36099 0 5
// veh := CreateVehicle ;
3476: LD_ADDR_VAR 0 4
3480: PUSH
3481: CALL_OW 45
3485: ST_TO_ADDR
// result := Join ( result , veh ) ;
3486: LD_ADDR_VAR 0 1
3490: PUSH
3491: LD_VAR 0 1
3495: PPUSH
3496: LD_VAR 0 4
3500: PPUSH
3501: CALL 68552 0 2
3505: ST_TO_ADDR
// SetDir ( veh , [ 3 , 5 ] [ dir ] ) ;
3506: LD_VAR 0 4
3510: PPUSH
3511: LD_INT 3
3513: PUSH
3514: LD_INT 5
3516: PUSH
3517: EMPTY
3518: LIST
3519: LIST
3520: PUSH
3521: LD_VAR 0 6
3525: ARRAY
3526: PPUSH
3527: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
3531: LD_VAR 0 4
3535: PPUSH
3536: LD_VAR 0 5
3540: PPUSH
3541: LD_INT 0
3543: PPUSH
3544: CALL_OW 49
// if vc_control = control_manual then
3548: LD_OWVAR 38
3552: PUSH
3553: LD_INT 1
3555: EQUAL
3556: IFFALSE 3603
// begin PrepareMechanic ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
3558: LD_INT 0
3560: PPUSH
3561: LD_INT 7
3563: PUSH
3564: LD_INT 8
3566: PUSH
3567: LD_INT 9
3569: PUSH
3570: LD_INT 10
3572: PUSH
3573: EMPTY
3574: LIST
3575: LIST
3576: LIST
3577: LIST
3578: PUSH
3579: LD_OWVAR 67
3583: ARRAY
3584: PPUSH
3585: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3589: CALL_OW 44
3593: PPUSH
3594: LD_VAR 0 4
3598: PPUSH
3599: CALL_OW 52
// end ; wait ( 0 0$0.5 ) ;
3603: LD_INT 18
3605: PPUSH
3606: CALL_OW 67
// ComAgressiveMove ( veh , 100 , 55 ) ;
3610: LD_VAR 0 4
3614: PPUSH
3615: LD_INT 100
3617: PPUSH
3618: LD_INT 55
3620: PPUSH
3621: CALL_OW 114
// end ;
3625: GO 3388
3627: POP
3628: POP
// for i in result do
3629: LD_ADDR_VAR 0 2
3633: PUSH
3634: LD_VAR 0 1
3638: PUSH
3639: FOR_IN
3640: IFFALSE 3656
// SetTag ( i , 10 ) ;
3642: LD_VAR 0 2
3646: PPUSH
3647: LD_INT 10
3649: PPUSH
3650: CALL_OW 109
3654: GO 3639
3656: POP
3657: POP
// RaiseSailEvent ( eventRussianAttack ) ;
3658: LD_EXP 44
3662: PPUSH
3663: CALL_OW 427
// end ; end_of_file
3667: LD_VAR 0 1
3671: RET
// export function DestroySibDeposit ; var un , rnd ; begin
3672: LD_INT 0
3674: PPUSH
3675: PPUSH
3676: PPUSH
// rnd := 0 ;
3677: LD_ADDR_VAR 0 3
3681: PUSH
3682: LD_INT 0
3684: ST_TO_ADDR
// uc_side := 8 ;
3685: LD_ADDR_OWVAR 20
3689: PUSH
3690: LD_INT 8
3692: ST_TO_ADDR
// uc_nation := 2 ;
3693: LD_ADDR_OWVAR 21
3697: PUSH
3698: LD_INT 2
3700: ST_TO_ADDR
// hc_name :=  ;
3701: LD_ADDR_OWVAR 26
3705: PUSH
3706: LD_STRING 
3708: ST_TO_ADDR
// hc_gallery :=  ;
3709: LD_ADDR_OWVAR 33
3713: PUSH
3714: LD_STRING 
3716: ST_TO_ADDR
// hc_attr := [ [ 10 , 11 , 12 , 12 ] [ Difficulty ] , [ 10 , 11 , 12 , 12 ] [ Difficulty ] ] ;
3717: LD_ADDR_OWVAR 29
3721: PUSH
3722: LD_INT 10
3724: PUSH
3725: LD_INT 11
3727: PUSH
3728: LD_INT 12
3730: PUSH
3731: LD_INT 12
3733: PUSH
3734: EMPTY
3735: LIST
3736: LIST
3737: LIST
3738: LIST
3739: PUSH
3740: LD_OWVAR 67
3744: ARRAY
3745: PUSH
3746: LD_INT 10
3748: PUSH
3749: LD_INT 11
3751: PUSH
3752: LD_INT 12
3754: PUSH
3755: LD_INT 12
3757: PUSH
3758: EMPTY
3759: LIST
3760: LIST
3761: LIST
3762: LIST
3763: PUSH
3764: LD_OWVAR 67
3768: ARRAY
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: ST_TO_ADDR
// PrepareHuman ( false , 4 , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
3774: LD_INT 0
3776: PPUSH
3777: LD_INT 4
3779: PPUSH
3780: LD_INT 7
3782: PUSH
3783: LD_INT 8
3785: PUSH
3786: LD_INT 9
3788: PUSH
3789: LD_INT 10
3791: PUSH
3792: EMPTY
3793: LIST
3794: LIST
3795: LIST
3796: LIST
3797: PUSH
3798: LD_OWVAR 67
3802: ARRAY
3803: PPUSH
3804: CALL_OW 380
// un := CreateHuman ;
3808: LD_ADDR_VAR 0 2
3812: PUSH
3813: CALL_OW 44
3817: ST_TO_ADDR
// PlaceUnitArea ( un , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
3818: LD_VAR 0 2
3822: PPUSH
3823: LD_INT 8
3825: PUSH
3826: LD_INT 9
3828: PUSH
3829: EMPTY
3830: LIST
3831: LIST
3832: PUSH
3833: LD_INT 1
3835: PPUSH
3836: LD_INT 2
3838: PPUSH
3839: CALL_OW 12
3843: ARRAY
3844: PPUSH
3845: LD_INT 0
3847: PPUSH
3848: CALL_OW 49
// SetTag ( un , 1 ) ;
3852: LD_VAR 0 2
3856: PPUSH
3857: LD_INT 1
3859: PPUSH
3860: CALL_OW 109
// rnd := rand ( 1 , sibDeposits ) ;
3864: LD_ADDR_VAR 0 3
3868: PUSH
3869: LD_INT 1
3871: PPUSH
3872: LD_EXP 31
3876: PPUSH
3877: CALL_OW 12
3881: ST_TO_ADDR
// RaiseSailEventCustom ( eventContaminate , un , sibDeposits [ rnd ] [ 1 ] , sibDeposits [ rnd ] [ 2 ] , 0 , 0 , 0 ) ;
3882: LD_EXP 45
3886: PPUSH
3887: LD_VAR 0 2
3891: PPUSH
3892: LD_EXP 31
3896: PUSH
3897: LD_VAR 0 3
3901: ARRAY
3902: PUSH
3903: LD_INT 1
3905: ARRAY
3906: PPUSH
3907: LD_EXP 31
3911: PUSH
3912: LD_VAR 0 3
3916: ARRAY
3917: PUSH
3918: LD_INT 2
3920: ARRAY
3921: PPUSH
3922: LD_INT 0
3924: PPUSH
3925: LD_INT 0
3927: PPUSH
3928: LD_INT 0
3930: PPUSH
3931: CALL_OW 595
// end ;
3935: LD_VAR 0 1
3939: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_ok ] , [ f_control , control_remote ] ] ) do var i ;
3940: LD_INT 22
3942: PUSH
3943: LD_INT 8
3945: PUSH
3946: EMPTY
3947: LIST
3948: LIST
3949: PUSH
3950: LD_INT 3
3952: PUSH
3953: LD_INT 61
3955: PUSH
3956: EMPTY
3957: LIST
3958: PUSH
3959: EMPTY
3960: LIST
3961: LIST
3962: PUSH
3963: LD_INT 50
3965: PUSH
3966: EMPTY
3967: LIST
3968: PUSH
3969: LD_INT 33
3971: PUSH
3972: LD_INT 2
3974: PUSH
3975: EMPTY
3976: LIST
3977: LIST
3978: PUSH
3979: EMPTY
3980: LIST
3981: LIST
3982: LIST
3983: LIST
3984: PPUSH
3985: CALL_OW 69
3989: IFFALSE 4076
3991: GO 3993
3993: DISABLE
3994: LD_INT 0
3996: PPUSH
// begin enable ;
3997: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_ok ] , [ f_control , control_remote ] ] ) do
3998: LD_ADDR_VAR 0 1
4002: PUSH
4003: LD_INT 22
4005: PUSH
4006: LD_INT 8
4008: PUSH
4009: EMPTY
4010: LIST
4011: LIST
4012: PUSH
4013: LD_INT 3
4015: PUSH
4016: LD_INT 61
4018: PUSH
4019: EMPTY
4020: LIST
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: PUSH
4026: LD_INT 50
4028: PUSH
4029: EMPTY
4030: LIST
4031: PUSH
4032: LD_INT 33
4034: PUSH
4035: LD_INT 2
4037: PUSH
4038: EMPTY
4039: LIST
4040: LIST
4041: PUSH
4042: EMPTY
4043: LIST
4044: LIST
4045: LIST
4046: LIST
4047: PPUSH
4048: CALL_OW 69
4052: PUSH
4053: FOR_IN
4054: IFFALSE 4074
// begin wait ( 0 0$0.3 ) ;
4056: LD_INT 10
4058: PPUSH
4059: CALL_OW 67
// Connect ( i ) ;
4063: LD_VAR 0 1
4067: PPUSH
4068: CALL 39190 0 1
// end ;
4072: GO 4053
4074: POP
4075: POP
// end ;
4076: PPOPN 1
4078: END
// export function PrepareArabianAttack ; var i , veh , xy , un , area , counter , tmp , dir ; begin
4079: LD_INT 0
4081: PPUSH
4082: PPUSH
4083: PPUSH
4084: PPUSH
4085: PPUSH
4086: PPUSH
4087: PPUSH
4088: PPUSH
4089: PPUSH
// result := [ ] ;
4090: LD_ADDR_VAR 0 1
4094: PUSH
4095: EMPTY
4096: ST_TO_ADDR
// arabianAttacksCounter := arabianAttacksCounter + 1 ;
4097: LD_ADDR_EXP 33
4101: PUSH
4102: LD_EXP 33
4106: PUSH
4107: LD_INT 1
4109: PLUS
4110: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
4111: LD_INT 22
4113: PUSH
4114: LD_INT 8
4116: PUSH
4117: EMPTY
4118: LIST
4119: LIST
4120: PUSH
4121: LD_INT 3
4123: PUSH
4124: LD_INT 58
4126: PUSH
4127: EMPTY
4128: LIST
4129: PUSH
4130: EMPTY
4131: LIST
4132: LIST
4133: PUSH
4134: LD_INT 34
4136: PUSH
4137: LD_INT 31
4139: PUSH
4140: EMPTY
4141: LIST
4142: LIST
4143: PUSH
4144: EMPTY
4145: LIST
4146: LIST
4147: LIST
4148: PPUSH
4149: CALL_OW 69
4153: PUSH
4154: LD_INT 2
4156: LESS
4157: IFFALSE 4401
// begin uc_side := 8 ;
4159: LD_ADDR_OWVAR 20
4163: PUSH
4164: LD_INT 8
4166: ST_TO_ADDR
// uc_nation := 2 ;
4167: LD_ADDR_OWVAR 21
4171: PUSH
4172: LD_INT 2
4174: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
4175: LD_INT 14
4177: PPUSH
4178: LD_INT 3
4180: PPUSH
4181: LD_INT 1
4183: PPUSH
4184: LD_INT 31
4186: PPUSH
4187: LD_INT 100
4189: PPUSH
4190: CALL 36099 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
4194: LD_ADDR_VAR 0 2
4198: PUSH
4199: DOUBLE
4200: LD_INT 22
4202: PUSH
4203: LD_INT 8
4205: PUSH
4206: EMPTY
4207: LIST
4208: LIST
4209: PUSH
4210: LD_INT 3
4212: PUSH
4213: LD_INT 58
4215: PUSH
4216: EMPTY
4217: LIST
4218: PUSH
4219: EMPTY
4220: LIST
4221: LIST
4222: PUSH
4223: LD_INT 34
4225: PUSH
4226: LD_INT 31
4228: PUSH
4229: EMPTY
4230: LIST
4231: LIST
4232: PUSH
4233: EMPTY
4234: LIST
4235: LIST
4236: LIST
4237: PPUSH
4238: CALL_OW 69
4242: PUSH
4243: LD_INT 1
4245: PLUS
4246: DEC
4247: ST_TO_ADDR
4248: LD_INT 2
4250: PUSH
4251: FOR_TO
4252: IFFALSE 4399
// begin veh := CreateVehicle ;
4254: LD_ADDR_VAR 0 3
4258: PUSH
4259: CALL_OW 45
4263: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
4264: LD_VAR 0 3
4268: PPUSH
4269: LD_INT 5
4271: PPUSH
4272: CALL_OW 233
// xy := [ [ 181 , 105 ] , [ 137 , 6 ] ] [ i mod 2 + 1 ] ;
4276: LD_ADDR_VAR 0 4
4280: PUSH
4281: LD_INT 181
4283: PUSH
4284: LD_INT 105
4286: PUSH
4287: EMPTY
4288: LIST
4289: LIST
4290: PUSH
4291: LD_INT 137
4293: PUSH
4294: LD_INT 6
4296: PUSH
4297: EMPTY
4298: LIST
4299: LIST
4300: PUSH
4301: EMPTY
4302: LIST
4303: LIST
4304: PUSH
4305: LD_VAR 0 2
4309: PUSH
4310: LD_INT 2
4312: MOD
4313: PUSH
4314: LD_INT 1
4316: PLUS
4317: ARRAY
4318: ST_TO_ADDR
// PlaceUnitXYR ( veh , xy [ 1 ] , xy [ 2 ] , 12 , false ) ;
4319: LD_VAR 0 3
4323: PPUSH
4324: LD_VAR 0 4
4328: PUSH
4329: LD_INT 1
4331: ARRAY
4332: PPUSH
4333: LD_VAR 0 4
4337: PUSH
4338: LD_INT 2
4340: ARRAY
4341: PPUSH
4342: LD_INT 12
4344: PPUSH
4345: LD_INT 0
4347: PPUSH
4348: CALL_OW 50
// PrepareMechanic ( false , [ 7 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4352: LD_INT 0
4354: PPUSH
4355: LD_INT 7
4357: PUSH
4358: LD_INT 9
4360: PUSH
4361: LD_INT 10
4363: PUSH
4364: LD_INT 10
4366: PUSH
4367: EMPTY
4368: LIST
4369: LIST
4370: LIST
4371: LIST
4372: PUSH
4373: LD_OWVAR 67
4377: ARRAY
4378: PPUSH
4379: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4383: CALL_OW 44
4387: PPUSH
4388: LD_VAR 0 3
4392: PPUSH
4393: CALL_OW 52
// end ;
4397: GO 4251
4399: POP
4400: POP
// end ; dir := rand ( 1 , 2 ) ;
4401: LD_ADDR_VAR 0 9
4405: PUSH
4406: LD_INT 1
4408: PPUSH
4409: LD_INT 2
4411: PPUSH
4412: CALL_OW 12
4416: ST_TO_ADDR
// area := [ ArabianSpawn1 , ArabianSpawn2 ] [ dir ] ;
4417: LD_ADDR_VAR 0 6
4421: PUSH
4422: LD_INT 8
4424: PUSH
4425: LD_INT 9
4427: PUSH
4428: EMPTY
4429: LIST
4430: LIST
4431: PUSH
4432: LD_VAR 0 9
4436: ARRAY
4437: ST_TO_ADDR
// counter := [ 6 , 8 , 10 , 11 ] [ Difficulty ] + arabianAttacksCounter ;
4438: LD_ADDR_VAR 0 7
4442: PUSH
4443: LD_INT 6
4445: PUSH
4446: LD_INT 8
4448: PUSH
4449: LD_INT 10
4451: PUSH
4452: LD_INT 11
4454: PUSH
4455: EMPTY
4456: LIST
4457: LIST
4458: LIST
4459: LIST
4460: PUSH
4461: LD_OWVAR 67
4465: ARRAY
4466: PUSH
4467: LD_EXP 33
4471: PLUS
4472: ST_TO_ADDR
// if counter > 20 then
4473: LD_VAR 0 7
4477: PUSH
4478: LD_INT 20
4480: GREATER
4481: IFFALSE 4491
// counter := 20 ;
4483: LD_ADDR_VAR 0 7
4487: PUSH
4488: LD_INT 20
4490: ST_TO_ADDR
// for i := 1 to counter do
4491: LD_ADDR_VAR 0 2
4495: PUSH
4496: DOUBLE
4497: LD_INT 1
4499: DEC
4500: ST_TO_ADDR
4501: LD_VAR 0 7
4505: PUSH
4506: FOR_TO
4507: IFFALSE 4840
// begin uc_side := 8 ;
4509: LD_ADDR_OWVAR 20
4513: PUSH
4514: LD_INT 8
4516: ST_TO_ADDR
// uc_nation := 2 ;
4517: LD_ADDR_OWVAR 21
4521: PUSH
4522: LD_INT 2
4524: ST_TO_ADDR
// PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_siberite , [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] , [ ar_gun , ar_rocket_launcher , ar_gun , ar_mortar , ar_selfpropelled_bomb , ar_gatling_gun ] [ rand ( 1 , 6 ) ] , 100 ) ;
4525: LD_INT 13
4527: PUSH
4528: LD_INT 14
4530: PUSH
4531: EMPTY
4532: LIST
4533: LIST
4534: PUSH
4535: LD_INT 1
4537: PPUSH
4538: LD_INT 2
4540: PPUSH
4541: CALL_OW 12
4545: ARRAY
4546: PPUSH
4547: LD_INT 3
4549: PPUSH
4550: LD_INT 1
4552: PUSH
4553: LD_INT 2
4555: PUSH
4556: LD_INT 5
4558: PUSH
4559: EMPTY
4560: LIST
4561: LIST
4562: LIST
4563: PUSH
4564: LD_INT 1
4566: PPUSH
4567: LD_INT 3
4569: PPUSH
4570: CALL_OW 12
4574: ARRAY
4575: PPUSH
4576: LD_INT 27
4578: PUSH
4579: LD_INT 28
4581: PUSH
4582: LD_INT 27
4584: PUSH
4585: LD_INT 92
4587: PUSH
4588: LD_INT 29
4590: PUSH
4591: LD_INT 25
4593: PUSH
4594: EMPTY
4595: LIST
4596: LIST
4597: LIST
4598: LIST
4599: LIST
4600: LIST
4601: PUSH
4602: LD_INT 1
4604: PPUSH
4605: LD_INT 6
4607: PPUSH
4608: CALL_OW 12
4612: ARRAY
4613: PPUSH
4614: LD_INT 100
4616: PPUSH
4617: CALL 36099 0 5
// if vc_weapon = ar_selfpropelled_bomb then
4621: LD_OWVAR 40
4625: PUSH
4626: LD_INT 29
4628: EQUAL
4629: IFFALSE 4639
// vc_control := control_remote ;
4631: LD_ADDR_OWVAR 38
4635: PUSH
4636: LD_INT 2
4638: ST_TO_ADDR
// veh := CreateVehicle ;
4639: LD_ADDR_VAR 0 3
4643: PUSH
4644: CALL_OW 45
4648: ST_TO_ADDR
// result := Join ( result , veh ) ;
4649: LD_ADDR_VAR 0 1
4653: PUSH
4654: LD_VAR 0 1
4658: PPUSH
4659: LD_VAR 0 3
4663: PPUSH
4664: CALL 68552 0 2
4668: ST_TO_ADDR
// SetDir ( veh , [ 3 , 5 ] [ dir ] ) ;
4669: LD_VAR 0 3
4673: PPUSH
4674: LD_INT 3
4676: PUSH
4677: LD_INT 5
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: PUSH
4684: LD_VAR 0 9
4688: ARRAY
4689: PPUSH
4690: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
4694: LD_VAR 0 3
4698: PPUSH
4699: LD_VAR 0 6
4703: PPUSH
4704: LD_INT 0
4706: PPUSH
4707: CALL_OW 49
// if vc_control = control_manual then
4711: LD_OWVAR 38
4715: PUSH
4716: LD_INT 1
4718: EQUAL
4719: IFFALSE 4766
// begin PrepareMechanic ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
4721: LD_INT 0
4723: PPUSH
4724: LD_INT 7
4726: PUSH
4727: LD_INT 8
4729: PUSH
4730: LD_INT 9
4732: PUSH
4733: LD_INT 10
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: LIST
4740: LIST
4741: PUSH
4742: LD_OWVAR 67
4746: ARRAY
4747: PPUSH
4748: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4752: CALL_OW 44
4756: PPUSH
4757: LD_VAR 0 3
4761: PPUSH
4762: CALL_OW 52
// end ; wait ( 0 0$0.3 ) ;
4766: LD_INT 10
4768: PPUSH
4769: CALL_OW 67
// if GetControl ( veh ) = control_remote and not IsControledBy ( veh ) then
4773: LD_VAR 0 3
4777: PPUSH
4778: CALL_OW 263
4782: PUSH
4783: LD_INT 2
4785: EQUAL
4786: PUSH
4787: LD_VAR 0 3
4791: PPUSH
4792: CALL_OW 312
4796: NOT
4797: AND
4798: IFFALSE 4816
// begin Connect ( veh ) ;
4800: LD_VAR 0 3
4804: PPUSH
4805: CALL 39190 0 1
// wait ( 0 0$0.3 ) ;
4809: LD_INT 10
4811: PPUSH
4812: CALL_OW 67
// end ; ComAgressiveMove ( veh , 100 , 55 ) ;
4816: LD_VAR 0 3
4820: PPUSH
4821: LD_INT 100
4823: PPUSH
4824: LD_INT 55
4826: PPUSH
4827: CALL_OW 114
// wait ( 0 0$0.5 ) ;
4831: LD_INT 18
4833: PPUSH
4834: CALL_OW 67
// end ;
4838: GO 4506
4840: POP
4841: POP
// if arabianAttacksCounter = 1 then
4842: LD_EXP 33
4846: PUSH
4847: LD_INT 1
4849: EQUAL
4850: IFFALSE 4856
// DestroySibDeposit ;
4852: CALL 3672 0 0
// if arabianAttacksCounter mod [ 4 , 3 , 3 , 2 ] [ Difficulty ] = 0 then
4856: LD_EXP 33
4860: PUSH
4861: LD_INT 4
4863: PUSH
4864: LD_INT 3
4866: PUSH
4867: LD_INT 3
4869: PUSH
4870: LD_INT 2
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: PUSH
4879: LD_OWVAR 67
4883: ARRAY
4884: MOD
4885: PUSH
4886: LD_INT 0
4888: EQUAL
4889: IFFALSE 5247
// begin tmp := rand ( 0 , 2 ) ;
4891: LD_ADDR_VAR 0 8
4895: PUSH
4896: LD_INT 0
4898: PPUSH
4899: LD_INT 2
4901: PPUSH
4902: CALL_OW 12
4906: ST_TO_ADDR
// if not tmp then
4907: LD_VAR 0 8
4911: NOT
4912: IFFALSE 5073
// begin for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] do
4914: LD_ADDR_VAR 0 2
4918: PUSH
4919: DOUBLE
4920: LD_INT 1
4922: DEC
4923: ST_TO_ADDR
4924: LD_INT 3
4926: PUSH
4927: LD_INT 4
4929: PUSH
4930: LD_INT 4
4932: PUSH
4933: LD_INT 5
4935: PUSH
4936: EMPTY
4937: LIST
4938: LIST
4939: LIST
4940: LIST
4941: PUSH
4942: LD_OWVAR 67
4946: ARRAY
4947: PUSH
4948: FOR_TO
4949: IFFALSE 5069
// begin uc_side := 8 ;
4951: LD_ADDR_OWVAR 20
4955: PUSH
4956: LD_INT 8
4958: ST_TO_ADDR
// uc_nation := 2 ;
4959: LD_ADDR_OWVAR 21
4963: PUSH
4964: LD_INT 2
4966: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
4967: LD_INT 0
4969: PPUSH
4970: LD_INT 1
4972: PPUSH
4973: LD_INT 7
4975: PUSH
4976: LD_INT 8
4978: PUSH
4979: LD_INT 9
4981: PUSH
4982: LD_INT 10
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: LIST
4989: LIST
4990: PUSH
4991: LD_OWVAR 67
4995: ARRAY
4996: PPUSH
4997: CALL_OW 380
// un := CreateHuman ;
5001: LD_ADDR_VAR 0 5
5005: PUSH
5006: CALL_OW 44
5010: ST_TO_ADDR
// result := Join ( result , un ) ;
5011: LD_ADDR_VAR 0 1
5015: PUSH
5016: LD_VAR 0 1
5020: PPUSH
5021: LD_VAR 0 5
5025: PPUSH
5026: CALL 68552 0 2
5030: ST_TO_ADDR
// if Prob ( 60 ) then
5031: LD_INT 60
5033: PPUSH
5034: CALL_OW 13
5038: IFFALSE 5052
// SetClass ( un , class_mortar ) ;
5040: LD_VAR 0 5
5044: PPUSH
5045: LD_INT 8
5047: PPUSH
5048: CALL_OW 336
// PlaceUnitArea ( un , ArabianInfSpawn , false ) ;
5052: LD_VAR 0 5
5056: PPUSH
5057: LD_INT 16
5059: PPUSH
5060: LD_INT 0
5062: PPUSH
5063: CALL_OW 49
// end ;
5067: GO 4948
5069: POP
5070: POP
// end else
5071: GO 5237
// begin for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
5073: LD_ADDR_VAR 0 2
5077: PUSH
5078: DOUBLE
5079: LD_INT 1
5081: DEC
5082: ST_TO_ADDR
5083: LD_INT 2
5085: PUSH
5086: LD_INT 3
5088: PUSH
5089: LD_INT 3
5091: PUSH
5092: LD_INT 4
5094: PUSH
5095: EMPTY
5096: LIST
5097: LIST
5098: LIST
5099: LIST
5100: PUSH
5101: LD_OWVAR 67
5105: ARRAY
5106: PUSH
5107: FOR_TO
5108: IFFALSE 5235
// begin uc_side := 8 ;
5110: LD_ADDR_OWVAR 20
5114: PUSH
5115: LD_INT 8
5117: ST_TO_ADDR
// uc_nation := 0 ;
5118: LD_ADDR_OWVAR 21
5122: PUSH
5123: LD_INT 0
5125: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
5126: LD_ADDR_OWVAR 28
5130: PUSH
5131: LD_INT 17
5133: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 0 , 0 ] ;
5134: LD_ADDR_OWVAR 31
5138: PUSH
5139: LD_INT 3
5141: PUSH
5142: LD_INT 0
5144: PUSH
5145: LD_INT 0
5147: PUSH
5148: LD_INT 0
5150: PUSH
5151: EMPTY
5152: LIST
5153: LIST
5154: LIST
5155: LIST
5156: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5157: LD_ADDR_OWVAR 29
5161: PUSH
5162: LD_INT 10
5164: PUSH
5165: LD_INT 10
5167: PUSH
5168: EMPTY
5169: LIST
5170: LIST
5171: ST_TO_ADDR
// hc_gallery :=  ;
5172: LD_ADDR_OWVAR 33
5176: PUSH
5177: LD_STRING 
5179: ST_TO_ADDR
// hc_name :=  ;
5180: LD_ADDR_OWVAR 26
5184: PUSH
5185: LD_STRING 
5187: ST_TO_ADDR
// un := CreateHuman ;
5188: LD_ADDR_VAR 0 5
5192: PUSH
5193: CALL_OW 44
5197: ST_TO_ADDR
// result := Join ( result , un ) ;
5198: LD_ADDR_VAR 0 1
5202: PUSH
5203: LD_VAR 0 1
5207: PPUSH
5208: LD_VAR 0 5
5212: PPUSH
5213: CALL 68552 0 2
5217: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianInfSpawn , false ) ;
5218: LD_VAR 0 5
5222: PPUSH
5223: LD_INT 16
5225: PPUSH
5226: LD_INT 0
5228: PPUSH
5229: CALL_OW 49
// end ;
5233: GO 5107
5235: POP
5236: POP
// end ; if sibDeposits then
5237: LD_EXP 31
5241: IFFALSE 5247
// DestroySibDeposit ;
5243: CALL 3672 0 0
// end ; for i in result do
5247: LD_ADDR_VAR 0 2
5251: PUSH
5252: LD_VAR 0 1
5256: PUSH
5257: FOR_IN
5258: IFFALSE 5274
// SetTag ( i , 10 ) ;
5260: LD_VAR 0 2
5264: PPUSH
5265: LD_INT 10
5267: PPUSH
5268: CALL_OW 109
5272: GO 5257
5274: POP
5275: POP
// RaiseSailEvent ( eventArabianAttack ) ;
5276: LD_EXP 43
5280: PPUSH
5281: CALL_OW 427
// end ; end_of_file
5285: LD_VAR 0 1
5289: RET
// export function Action ; var tmp ; begin
5290: LD_INT 0
5292: PPUSH
5293: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
5294: LD_ADDR_VAR 0 2
5298: PUSH
5299: LD_INT 22
5301: PUSH
5302: LD_INT 1
5304: PUSH
5305: EMPTY
5306: LIST
5307: LIST
5308: PUSH
5309: LD_INT 21
5311: PUSH
5312: LD_INT 2
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: PUSH
5319: EMPTY
5320: LIST
5321: LIST
5322: PPUSH
5323: CALL_OW 69
5327: ST_TO_ADDR
// InGameOn ;
5328: CALL_OW 8
// CenterNowOnUnits ( tmp ) ;
5332: LD_VAR 0 2
5336: PPUSH
5337: CALL_OW 87
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 69 , 94 ) ;
5341: LD_INT 22
5343: PUSH
5344: LD_INT 1
5346: PUSH
5347: EMPTY
5348: LIST
5349: LIST
5350: PUSH
5351: LD_INT 21
5353: PUSH
5354: LD_INT 2
5356: PUSH
5357: EMPTY
5358: LIST
5359: LIST
5360: PUSH
5361: EMPTY
5362: LIST
5363: LIST
5364: PPUSH
5365: CALL_OW 69
5369: PPUSH
5370: LD_INT 69
5372: PPUSH
5373: LD_INT 94
5375: PPUSH
5376: CALL_OW 111
// Say ( JMM , D2-JMM-1 ) ;
5380: LD_EXP 1
5384: PPUSH
5385: LD_STRING D2-JMM-1
5387: PPUSH
5388: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5392: LD_VAR 0 2
5396: PPUSH
5397: CALL_OW 87
// Say ( Stevens , D2-Huck-1 ) ;
5401: LD_EXP 2
5405: PPUSH
5406: LD_STRING D2-Huck-1
5408: PPUSH
5409: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5413: LD_VAR 0 2
5417: PPUSH
5418: CALL_OW 87
// Say ( JMM , D2-JMM-2 ) ;
5422: LD_EXP 1
5426: PPUSH
5427: LD_STRING D2-JMM-2
5429: PPUSH
5430: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5434: LD_VAR 0 2
5438: PPUSH
5439: CALL_OW 87
// InGameOff ;
5443: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
5447: LD_STRING M1
5449: PPUSH
5450: CALL_OW 337
// SaveForQuickRestart ;
5454: CALL_OW 22
// wait ( 10 10$00 ) ;
5458: LD_INT 21000
5460: PPUSH
5461: CALL_OW 67
// DialogueOn ;
5465: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
5469: LD_EXP 15
5473: PPUSH
5474: LD_STRING D3-Pow-1
5476: PPUSH
5477: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
5481: LD_EXP 1
5485: PPUSH
5486: LD_STRING D3-JMM-1
5488: PPUSH
5489: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
5493: LD_EXP 15
5497: PPUSH
5498: LD_STRING D3-Pow-2
5500: PPUSH
5501: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
5505: LD_EXP 1
5509: PPUSH
5510: LD_STRING D3-JMM-2
5512: PPUSH
5513: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
5517: LD_EXP 15
5521: PPUSH
5522: LD_STRING D3-Pow-3
5524: PPUSH
5525: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
5529: LD_EXP 1
5533: PPUSH
5534: LD_STRING D3-JMM-3
5536: PPUSH
5537: CALL_OW 88
// SayRadio ( Powell , D3-Pow-4 ) ;
5541: LD_EXP 15
5545: PPUSH
5546: LD_STRING D3-Pow-4
5548: PPUSH
5549: CALL_OW 94
// Say ( JMM , D3-JMM-4 ) ;
5553: LD_EXP 1
5557: PPUSH
5558: LD_STRING D3-JMM-4
5560: PPUSH
5561: CALL_OW 88
// DialogueOff ;
5565: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5569: LD_STRING M2
5571: PPUSH
5572: CALL_OW 337
// wait ( 2 2$30 ) ;
5576: LD_INT 5250
5578: PPUSH
5579: CALL_OW 67
// PrepareBurlak ;
5583: CALL 2269 0 0
// BurlakArmy ;
5587: CALL 2451 0 0
// end ;
5591: LD_VAR 0 1
5595: RET
// every 0 0$1 trigger See ( 1 , Masha ) do
5596: LD_INT 1
5598: PPUSH
5599: LD_EXP 18
5603: PPUSH
5604: CALL_OW 292
5608: IFFALSE 5767
5610: GO 5612
5612: DISABLE
// begin DialogueOn ;
5613: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
5617: LD_EXP 18
5621: PPUSH
5622: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5-Sol1-1 , D5-FSol1-1 ) ;
5626: LD_INT 22
5628: PUSH
5629: LD_INT 1
5631: PUSH
5632: EMPTY
5633: LIST
5634: LIST
5635: PUSH
5636: LD_INT 26
5638: PUSH
5639: LD_INT 1
5641: PUSH
5642: EMPTY
5643: LIST
5644: LIST
5645: PUSH
5646: LD_INT 2
5648: PUSH
5649: LD_INT 25
5651: PUSH
5652: LD_INT 1
5654: PUSH
5655: EMPTY
5656: LIST
5657: LIST
5658: PUSH
5659: LD_INT 25
5661: PUSH
5662: LD_INT 2
5664: PUSH
5665: EMPTY
5666: LIST
5667: LIST
5668: PUSH
5669: LD_INT 25
5671: PUSH
5672: LD_INT 3
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: PUSH
5679: LD_INT 25
5681: PUSH
5682: LD_INT 4
5684: PUSH
5685: EMPTY
5686: LIST
5687: LIST
5688: PUSH
5689: LD_INT 25
5691: PUSH
5692: LD_INT 5
5694: PUSH
5695: EMPTY
5696: LIST
5697: LIST
5698: PUSH
5699: EMPTY
5700: LIST
5701: LIST
5702: LIST
5703: LIST
5704: LIST
5705: LIST
5706: PUSH
5707: EMPTY
5708: LIST
5709: LIST
5710: LIST
5711: PPUSH
5712: CALL_OW 69
5716: PPUSH
5717: LD_STRING D5-Sol1-1
5719: PPUSH
5720: LD_STRING D5-FSol1-1
5722: PPUSH
5723: CALL 8225 0 3
// Say ( JMM , D5-JMM-1 ) ;
5727: LD_EXP 1
5731: PPUSH
5732: LD_STRING D5-JMM-1
5734: PPUSH
5735: CALL_OW 88
// Say ( Burlak , DAmer-Bur-1 ) ;
5739: LD_EXP 17
5743: PPUSH
5744: LD_STRING DAmer-Bur-1
5746: PPUSH
5747: CALL_OW 88
// Say ( JMM , DAmer-JMM-1 ) ;
5751: LD_EXP 1
5755: PPUSH
5756: LD_STRING DAmer-JMM-1
5758: PPUSH
5759: CALL_OW 88
// DialogueOff ;
5763: CALL_OW 7
// end ;
5767: END
// every 0 0$1 trigger FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do var i ;
5768: LD_INT 4
5770: PPUSH
5771: LD_INT 22
5773: PUSH
5774: LD_INT 7
5776: PUSH
5777: EMPTY
5778: LIST
5779: LIST
5780: PPUSH
5781: CALL_OW 70
5785: IFFALSE 6184
5787: GO 5789
5789: DISABLE
5790: LD_INT 0
5792: PPUSH
// begin enable ;
5793: ENABLE
// for i in FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do
5794: LD_ADDR_VAR 0 1
5798: PUSH
5799: LD_INT 4
5801: PPUSH
5802: LD_INT 22
5804: PUSH
5805: LD_INT 7
5807: PUSH
5808: EMPTY
5809: LIST
5810: LIST
5811: PPUSH
5812: CALL_OW 70
5816: PUSH
5817: FOR_IN
5818: IFFALSE 6182
// begin if i = Burlak or i = Masha then
5820: LD_VAR 0 1
5824: PUSH
5825: LD_EXP 17
5829: EQUAL
5830: PUSH
5831: LD_VAR 0 1
5835: PUSH
5836: LD_EXP 18
5840: EQUAL
5841: OR
5842: IFFALSE 5989
// begin RemoveUnit ( i ) ;
5844: LD_VAR 0 1
5848: PPUSH
5849: CALL_OW 64
// DialogueOn ;
5853: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
5857: LD_EXP 1
5861: PPUSH
5862: LD_STRING D5a-JMM-1
5864: PPUSH
5865: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5a-Sol1-1 , D5-FSol1-1 ) ;
5869: LD_INT 22
5871: PUSH
5872: LD_INT 1
5874: PUSH
5875: EMPTY
5876: LIST
5877: LIST
5878: PUSH
5879: LD_INT 26
5881: PUSH
5882: LD_INT 1
5884: PUSH
5885: EMPTY
5886: LIST
5887: LIST
5888: PUSH
5889: LD_INT 2
5891: PUSH
5892: LD_INT 25
5894: PUSH
5895: LD_INT 1
5897: PUSH
5898: EMPTY
5899: LIST
5900: LIST
5901: PUSH
5902: LD_INT 25
5904: PUSH
5905: LD_INT 2
5907: PUSH
5908: EMPTY
5909: LIST
5910: LIST
5911: PUSH
5912: LD_INT 25
5914: PUSH
5915: LD_INT 3
5917: PUSH
5918: EMPTY
5919: LIST
5920: LIST
5921: PUSH
5922: LD_INT 25
5924: PUSH
5925: LD_INT 4
5927: PUSH
5928: EMPTY
5929: LIST
5930: LIST
5931: PUSH
5932: LD_INT 25
5934: PUSH
5935: LD_INT 5
5937: PUSH
5938: EMPTY
5939: LIST
5940: LIST
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: LIST
5948: LIST
5949: PUSH
5950: EMPTY
5951: LIST
5952: LIST
5953: LIST
5954: PPUSH
5955: CALL_OW 69
5959: PPUSH
5960: LD_STRING D5a-Sol1-1
5962: PPUSH
5963: LD_STRING D5-FSol1-1
5965: PPUSH
5966: CALL 8225 0 3
// DialogueOff ;
5970: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
5974: LD_STRING M2b
5976: PPUSH
5977: CALL_OW 337
// spawnBurlak = 0 ;
5981: LD_ADDR_EXP 27
5985: PUSH
5986: LD_INT 0
5988: ST_TO_ADDR
// end ; if GetType ( i ) = unit_vehicle and GetControl ( i ) = control_manual then
5989: LD_VAR 0 1
5993: PPUSH
5994: CALL_OW 247
5998: PUSH
5999: LD_INT 2
6001: EQUAL
6002: PUSH
6003: LD_VAR 0 1
6007: PPUSH
6008: CALL_OW 263
6012: PUSH
6013: LD_INT 1
6015: EQUAL
6016: AND
6017: IFFALSE 6145
// begin case IsDrivenBy ( i ) of Gnyevko :
6019: LD_VAR 0 1
6023: PPUSH
6024: CALL_OW 311
6028: PUSH
6029: LD_EXP 19
6033: DOUBLE
6034: EQUAL
6035: IFTRUE 6039
6037: GO 6052
6039: POP
// SaveVariable ( 1 , 13_Gnyevko_1 ) ; Titov :
6040: LD_INT 1
6042: PPUSH
6043: LD_STRING 13_Gnyevko_1
6045: PPUSH
6046: CALL_OW 39
6050: GO 6145
6052: LD_EXP 20
6056: DOUBLE
6057: EQUAL
6058: IFTRUE 6062
6060: GO 6075
6062: POP
// SaveVariable ( 1 , 13_Titov_1 ) ; Xavier :
6063: LD_INT 1
6065: PPUSH
6066: LD_STRING 13_Titov_1
6068: PPUSH
6069: CALL_OW 39
6073: GO 6145
6075: LD_EXP 21
6079: DOUBLE
6080: EQUAL
6081: IFTRUE 6085
6083: GO 6098
6085: POP
// SaveVariable ( 1 , 13_Xavier_1 ) ; Belkov :
6086: LD_INT 1
6088: PPUSH
6089: LD_STRING 13_Xavier_1
6091: PPUSH
6092: CALL_OW 39
6096: GO 6145
6098: LD_EXP 22
6102: DOUBLE
6103: EQUAL
6104: IFTRUE 6108
6106: GO 6121
6108: POP
// SaveVariable ( 1 , 13_Belkov_1 ) ; Lipshchin :
6109: LD_INT 1
6111: PPUSH
6112: LD_STRING 13_Belkov_1
6114: PPUSH
6115: CALL_OW 39
6119: GO 6145
6121: LD_EXP 23
6125: DOUBLE
6126: EQUAL
6127: IFTRUE 6131
6129: GO 6144
6131: POP
// SaveVariable ( 1 , 13_Lipshchin_1 ) ; end ;
6132: LD_INT 1
6134: PPUSH
6135: LD_STRING 13_Lipshchin_1
6137: PPUSH
6138: CALL_OW 39
6142: GO 6145
6144: POP
// end ; if GetWeapon ( i ) = ru_time_lapser then
6145: LD_VAR 0 1
6149: PPUSH
6150: CALL_OW 264
6154: PUSH
6155: LD_INT 49
6157: EQUAL
6158: IFFALSE 6171
// DestroyUnit ( i ) else
6160: LD_VAR 0 1
6164: PPUSH
6165: CALL_OW 65
6169: GO 6180
// RemoveUnit ( i ) ;
6171: LD_VAR 0 1
6175: PPUSH
6176: CALL_OW 64
// end ;
6180: GO 5817
6182: POP
6183: POP
// end ;
6184: PPOPN 1
6186: END
// every 0 0$1 trigger IsOk ( Burlak ) and GetLives ( Masha ) < 500 and GetSide ( Masha ) = 7 do
6187: LD_EXP 17
6191: PPUSH
6192: CALL_OW 302
6196: PUSH
6197: LD_EXP 18
6201: PPUSH
6202: CALL_OW 256
6206: PUSH
6207: LD_INT 500
6209: LESS
6210: AND
6211: PUSH
6212: LD_EXP 18
6216: PPUSH
6217: CALL_OW 255
6221: PUSH
6222: LD_INT 7
6224: EQUAL
6225: AND
6226: IFFALSE 6246
6228: GO 6230
6230: DISABLE
// ComMoveXY ( Burlak , 107 , 118 ) ;
6231: LD_EXP 17
6235: PPUSH
6236: LD_INT 107
6238: PPUSH
6239: LD_INT 118
6241: PPUSH
6242: CALL_OW 111
6246: END
// every 0 0$10 trigger IsDead ( Burlak ) and spawnBurlak = 1 do
6247: LD_EXP 17
6251: PPUSH
6252: CALL_OW 301
6256: PUSH
6257: LD_EXP 27
6261: PUSH
6262: LD_INT 1
6264: EQUAL
6265: AND
6266: IFFALSE 6399
6268: GO 6270
6270: DISABLE
// begin Say ( JMM , D5b-JMM-1 ) ;
6271: LD_EXP 1
6275: PPUSH
6276: LD_STRING D5b-JMM-1
6278: PPUSH
6279: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5b-Sol1-1 ,  ) ;
6283: LD_INT 22
6285: PUSH
6286: LD_INT 1
6288: PUSH
6289: EMPTY
6290: LIST
6291: LIST
6292: PUSH
6293: LD_INT 26
6295: PUSH
6296: LD_INT 1
6298: PUSH
6299: EMPTY
6300: LIST
6301: LIST
6302: PUSH
6303: LD_INT 2
6305: PUSH
6306: LD_INT 25
6308: PUSH
6309: LD_INT 1
6311: PUSH
6312: EMPTY
6313: LIST
6314: LIST
6315: PUSH
6316: LD_INT 25
6318: PUSH
6319: LD_INT 2
6321: PUSH
6322: EMPTY
6323: LIST
6324: LIST
6325: PUSH
6326: LD_INT 25
6328: PUSH
6329: LD_INT 3
6331: PUSH
6332: EMPTY
6333: LIST
6334: LIST
6335: PUSH
6336: LD_INT 25
6338: PUSH
6339: LD_INT 4
6341: PUSH
6342: EMPTY
6343: LIST
6344: LIST
6345: PUSH
6346: LD_INT 25
6348: PUSH
6349: LD_INT 5
6351: PUSH
6352: EMPTY
6353: LIST
6354: LIST
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: LIST
6360: LIST
6361: LIST
6362: LIST
6363: PUSH
6364: EMPTY
6365: LIST
6366: LIST
6367: LIST
6368: PPUSH
6369: CALL_OW 69
6373: PPUSH
6374: LD_STRING D5b-Sol1-1
6376: PPUSH
6377: LD_STRING 
6379: PPUSH
6380: CALL 8225 0 3
// ChangeMissionObjectives ( M2a ) ;
6384: LD_STRING M2a
6386: PPUSH
6387: CALL_OW 337
// burlakStatus := 1 ;
6391: LD_ADDR_EXP 28
6395: PUSH
6396: LD_INT 1
6398: ST_TO_ADDR
// end ;
6399: END
// every 0 0$1 trigger IsDead ( Stevens ) do
6400: LD_EXP 2
6404: PPUSH
6405: CALL_OW 301
6409: IFFALSE 6546
6411: GO 6413
6413: DISABLE
// begin Say ( JMM , D6-JMM-1 ) ;
6414: LD_EXP 1
6418: PPUSH
6419: LD_STRING D6-JMM-1
6421: PPUSH
6422: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D6-Sol1-1 ,  ) ;
6426: LD_INT 22
6428: PUSH
6429: LD_INT 1
6431: PUSH
6432: EMPTY
6433: LIST
6434: LIST
6435: PUSH
6436: LD_INT 26
6438: PUSH
6439: LD_INT 1
6441: PUSH
6442: EMPTY
6443: LIST
6444: LIST
6445: PUSH
6446: LD_INT 2
6448: PUSH
6449: LD_INT 25
6451: PUSH
6452: LD_INT 1
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: PUSH
6459: LD_INT 25
6461: PUSH
6462: LD_INT 2
6464: PUSH
6465: EMPTY
6466: LIST
6467: LIST
6468: PUSH
6469: LD_INT 25
6471: PUSH
6472: LD_INT 3
6474: PUSH
6475: EMPTY
6476: LIST
6477: LIST
6478: PUSH
6479: LD_INT 25
6481: PUSH
6482: LD_INT 4
6484: PUSH
6485: EMPTY
6486: LIST
6487: LIST
6488: PUSH
6489: LD_INT 25
6491: PUSH
6492: LD_INT 5
6494: PUSH
6495: EMPTY
6496: LIST
6497: LIST
6498: PUSH
6499: EMPTY
6500: LIST
6501: LIST
6502: LIST
6503: LIST
6504: LIST
6505: LIST
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: LIST
6511: PPUSH
6512: CALL_OW 69
6516: PPUSH
6517: LD_STRING D6-Sol1-1
6519: PPUSH
6520: LD_STRING 
6522: PPUSH
6523: CALL 8225 0 3
// Say ( JMM , D6-JMM-2 ) ;
6527: LD_EXP 1
6531: PPUSH
6532: LD_STRING D6-JMM-2
6534: PPUSH
6535: CALL_OW 88
// ChangeMissionObjectives ( M1a ) ;
6539: LD_STRING M1a
6541: PPUSH
6542: CALL_OW 337
// end ;
6546: END
// every 0 0$1 trigger GetTech ( 25 , 1 ) = state_researched do
6547: LD_INT 25
6549: PPUSH
6550: LD_INT 1
6552: PPUSH
6553: CALL_OW 321
6557: PUSH
6558: LD_INT 2
6560: EQUAL
6561: IFFALSE 6578
6563: GO 6565
6565: DISABLE
// Say ( Stevens , D6-Huck-2 ) ;
6566: LD_EXP 2
6570: PPUSH
6571: LD_STRING D6-Huck-2
6573: PPUSH
6574: CALL_OW 88
6578: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_siberium_rocket ] , [ f_bweapon , us_siberium_rocket ] ] ] ) and FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_warehouse ] , [ f_not , [ f_constructed ] ] ] ) and FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] , [ f_not , [ f_constructed ] ] ] ) do
6579: LD_INT 22
6581: PUSH
6582: LD_INT 1
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: PUSH
6589: LD_INT 2
6591: PUSH
6592: LD_INT 34
6594: PUSH
6595: LD_INT 8
6597: PUSH
6598: EMPTY
6599: LIST
6600: LIST
6601: PUSH
6602: LD_INT 35
6604: PUSH
6605: LD_INT 8
6607: PUSH
6608: EMPTY
6609: LIST
6610: LIST
6611: PUSH
6612: EMPTY
6613: LIST
6614: LIST
6615: LIST
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: PPUSH
6621: CALL_OW 69
6625: PUSH
6626: LD_INT 5
6628: PPUSH
6629: LD_INT 22
6631: PUSH
6632: LD_INT 1
6634: PUSH
6635: EMPTY
6636: LIST
6637: LIST
6638: PUSH
6639: LD_INT 21
6641: PUSH
6642: LD_INT 3
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: PUSH
6649: LD_INT 30
6651: PUSH
6652: LD_INT 1
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: PUSH
6659: LD_INT 3
6661: PUSH
6662: LD_INT 57
6664: PUSH
6665: EMPTY
6666: LIST
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: PUSH
6672: EMPTY
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: PPUSH
6678: CALL_OW 70
6682: AND
6683: PUSH
6684: LD_INT 5
6686: PPUSH
6687: LD_INT 22
6689: PUSH
6690: LD_INT 1
6692: PUSH
6693: EMPTY
6694: LIST
6695: LIST
6696: PUSH
6697: LD_INT 21
6699: PUSH
6700: LD_INT 3
6702: PUSH
6703: EMPTY
6704: LIST
6705: LIST
6706: PUSH
6707: LD_INT 30
6709: PUSH
6710: LD_INT 5
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: PUSH
6717: LD_INT 3
6719: PUSH
6720: LD_INT 57
6722: PUSH
6723: EMPTY
6724: LIST
6725: PUSH
6726: EMPTY
6727: LIST
6728: LIST
6729: PUSH
6730: EMPTY
6731: LIST
6732: LIST
6733: LIST
6734: LIST
6735: PPUSH
6736: CALL_OW 70
6740: AND
6741: IFFALSE 6783
6743: GO 6745
6745: DISABLE
// begin DialogueOn ;
6746: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
6750: LD_EXP 1
6754: PPUSH
6755: LD_STRING D7-JMM-1
6757: PPUSH
6758: CALL_OW 88
// DialogueOff ;
6762: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
6766: LD_STRING M4
6768: PPUSH
6769: CALL_OW 337
// SetAreaMapShow ( TestArea , 0 ) ;
6773: LD_INT 5
6775: PPUSH
6776: LD_INT 0
6778: PPUSH
6779: CALL_OW 424
// end ;
6783: END
// every 0 0$1 trigger FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) and eventVar3 = 1 and radationResearched = 0 do
6784: LD_INT 6
6786: PPUSH
6787: LD_INT 22
6789: PUSH
6790: LD_INT 1
6792: PUSH
6793: EMPTY
6794: LIST
6795: LIST
6796: PUSH
6797: LD_INT 25
6799: PUSH
6800: LD_INT 4
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: PUSH
6807: EMPTY
6808: LIST
6809: LIST
6810: PPUSH
6811: CALL_OW 70
6815: PUSH
6816: LD_EXP 37
6820: PUSH
6821: LD_INT 1
6823: EQUAL
6824: AND
6825: PUSH
6826: LD_EXP 29
6830: PUSH
6831: LD_INT 0
6833: EQUAL
6834: AND
6835: IFFALSE 6900
6837: GO 6839
6839: DISABLE
// begin enable ;
6840: ENABLE
// AmSciSib := FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ;
6841: LD_ADDR_EXP 26
6845: PUSH
6846: LD_INT 6
6848: PPUSH
6849: LD_INT 22
6851: PUSH
6852: LD_INT 1
6854: PUSH
6855: EMPTY
6856: LIST
6857: LIST
6858: PUSH
6859: LD_INT 25
6861: PUSH
6862: LD_INT 4
6864: PUSH
6865: EMPTY
6866: LIST
6867: LIST
6868: PUSH
6869: EMPTY
6870: LIST
6871: LIST
6872: PPUSH
6873: CALL_OW 70
6877: PUSH
6878: LD_INT 1
6880: ARRAY
6881: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 0 ) ;
6882: LD_INT 6
6884: PPUSH
6885: LD_INT 0
6887: PPUSH
6888: CALL_OW 424
// radationResearched := 1 ;
6892: LD_ADDR_EXP 29
6896: PUSH
6897: LD_INT 1
6899: ST_TO_ADDR
// end ;
6900: END
// every 0 0$1 trigger IsDead ( AmSciSib ) and radationResearched = 1 do
6901: LD_EXP 26
6905: PPUSH
6906: CALL_OW 301
6910: PUSH
6911: LD_EXP 29
6915: PUSH
6916: LD_INT 1
6918: EQUAL
6919: AND
6920: IFFALSE 6956
6922: GO 6924
6924: DISABLE
// begin enable ;
6925: ENABLE
// radationResearched = 0 ;
6926: LD_ADDR_EXP 29
6930: PUSH
6931: LD_INT 0
6933: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
6934: LD_INT 6
6936: PPUSH
6937: LD_INT 1
6939: PPUSH
6940: CALL_OW 424
// Say ( JMM , D9a-JMM-1 ) ;
6944: LD_EXP 1
6948: PPUSH
6949: LD_STRING D9a-JMM-1
6951: PPUSH
6952: CALL_OW 88
// end ; end_of_file
6956: END
// on VehicleConstructionStarted ( building , chasis , engine , control , weapon ) do begin if weapon = us_siberium_rocket and eventVar1 = 0 then
6957: LD_VAR 0 5
6961: PUSH
6962: LD_INT 8
6964: EQUAL
6965: PUSH
6966: LD_EXP 35
6970: PUSH
6971: LD_INT 0
6973: EQUAL
6974: AND
6975: IFFALSE 7028
// begin eventVar1 := 1 ;
6977: LD_ADDR_EXP 35
6981: PUSH
6982: LD_INT 1
6984: ST_TO_ADDR
// DialogueOn ;
6985: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
6989: LD_EXP 1
6993: PPUSH
6994: LD_STRING D6a-JMM-1
6996: PPUSH
6997: CALL_OW 88
// SayRadio ( Powell , D6a-Pow-1 ) ;
7001: LD_EXP 15
7005: PPUSH
7006: LD_STRING D6a-Pow-1
7008: PPUSH
7009: CALL_OW 94
// DialogueOff ;
7013: CALL_OW 7
// wait ( 3 3$0 ) ;
7017: LD_INT 6300
7019: PPUSH
7020: CALL_OW 67
// PowellSupport ;
7024: CALL 1845 0 0
// end ; end ;
7028: PPOPN 5
7030: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7031: LD_VAR 0 1
7035: PPUSH
7036: CALL 26795 0 1
// if un = JMM then
7040: LD_VAR 0 1
7044: PUSH
7045: LD_EXP 1
7049: EQUAL
7050: IFFALSE 7059
// YouLost ( JMM ) ;
7052: LD_STRING JMM
7054: PPUSH
7055: CALL_OW 104
// if GetWeapon ( un ) = ar_control_tower then
7059: LD_VAR 0 1
7063: PPUSH
7064: CALL_OW 264
7068: PUSH
7069: LD_INT 31
7071: EQUAL
7072: IFFALSE 7088
// achivCounter := achivCounter + 1 ;
7074: LD_ADDR_EXP 41
7078: PUSH
7079: LD_EXP 41
7083: PUSH
7084: LD_INT 1
7086: PLUS
7087: ST_TO_ADDR
// if GetSide ( un ) <> 1 and GetType ( un ) = unit_vehicle then
7088: LD_VAR 0 1
7092: PPUSH
7093: CALL_OW 255
7097: PUSH
7098: LD_INT 1
7100: NONEQUAL
7101: PUSH
7102: LD_VAR 0 1
7106: PPUSH
7107: CALL_OW 247
7111: PUSH
7112: LD_INT 2
7114: EQUAL
7115: AND
7116: IFFALSE 7132
// destroyCounter := destroyCounter + 1 ;
7118: LD_ADDR_EXP 42
7122: PUSH
7123: LD_EXP 42
7127: PUSH
7128: LD_INT 1
7130: PLUS
7131: ST_TO_ADDR
// end ;
7132: PPOPN 1
7134: END
// on VehicleCaptured ( newId , oldId , oldSide , capturingUnit ) do begin if oldId = Masha then
7135: LD_VAR 0 2
7139: PUSH
7140: LD_EXP 18
7144: EQUAL
7145: IFFALSE 7154
// SetAchievement ( ACH_MASHA ) ;
7147: LD_STRING ACH_MASHA
7149: PPUSH
7150: CALL_OW 543
// end ;
7154: PPOPN 4
7156: END
// on VehicleConstructed ( vehicle , building ) do begin SOS_VehicleConstructed ( vehicle , building ) ;
7157: LD_VAR 0 1
7161: PPUSH
7162: LD_VAR 0 2
7166: PPUSH
7167: CALL 26915 0 2
// if GetWeapon ( vehicle ) = us_siberium_rocket and eventVar2 = 0 then
7171: LD_VAR 0 1
7175: PPUSH
7176: CALL_OW 264
7180: PUSH
7181: LD_INT 8
7183: EQUAL
7184: PUSH
7185: LD_EXP 36
7189: PUSH
7190: LD_INT 0
7192: EQUAL
7193: AND
7194: IFFALSE 7263
// begin eventVar2 := 1 ;
7196: LD_ADDR_EXP 36
7200: PUSH
7201: LD_INT 1
7203: ST_TO_ADDR
// DialogueOn ;
7204: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
7208: LD_EXP 1
7212: PPUSH
7213: LD_STRING D6b-JMM-1
7215: PPUSH
7216: CALL_OW 88
// SayRadio ( Powell , D6b-Pow-1 ) ;
7220: LD_EXP 15
7224: PPUSH
7225: LD_STRING D6b-Pow-1
7227: PPUSH
7228: CALL_OW 94
// DialogueOff ;
7232: CALL_OW 7
// SetAreaMapShow ( TestArea , 1 ) ;
7236: LD_INT 5
7238: PPUSH
7239: LD_INT 1
7241: PPUSH
7242: CALL_OW 424
// SetAreaMapShow ( RadarArea , 1 ) ;
7246: LD_INT 7
7248: PPUSH
7249: LD_INT 1
7251: PPUSH
7252: CALL_OW 424
// ChangeMissionObjectives ( M3 ) ;
7256: LD_STRING M3
7258: PPUSH
7259: CALL_OW 337
// end ; end ;
7263: PPOPN 2
7265: END
// on SiberiteRocketExploded ( nn , x , y ) do begin if InArea ( x , y , TestArea ) and eventVar3 = 0 then
7266: LD_VAR 0 2
7270: PPUSH
7271: LD_VAR 0 3
7275: PPUSH
7276: LD_INT 5
7278: PPUSH
7279: CALL_OW 309
7283: PUSH
7284: LD_EXP 37
7288: PUSH
7289: LD_INT 0
7291: EQUAL
7292: AND
7293: IFFALSE 7518
// begin eventVar3 := 1 ;
7295: LD_ADDR_EXP 37
7299: PUSH
7300: LD_INT 1
7302: ST_TO_ADDR
// wait ( 0 0$5 ) ;
7303: LD_INT 175
7305: PPUSH
7306: CALL_OW 67
// if FilterUnitsInArea ( RadarArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_radar ] ] ) then
7310: LD_INT 7
7312: PPUSH
7313: LD_INT 22
7315: PUSH
7316: LD_INT 1
7318: PUSH
7319: EMPTY
7320: LIST
7321: LIST
7322: PUSH
7323: LD_INT 21
7325: PUSH
7326: LD_INT 2
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: PUSH
7333: LD_INT 34
7335: PUSH
7336: LD_INT 11
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: PUSH
7343: EMPTY
7344: LIST
7345: LIST
7346: LIST
7347: PPUSH
7348: CALL_OW 70
7352: IFFALSE 7371
// begin radarOnSpot := 1 ;
7354: LD_ADDR_EXP 30
7358: PUSH
7359: LD_INT 1
7361: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
7362: LD_STRING M3a
7364: PPUSH
7365: CALL_OW 337
// end else
7369: GO 7378
// ChangeMissionObjectives ( M3b ) ;
7371: LD_STRING M3b
7373: PPUSH
7374: CALL_OW 337
// DialogueOn ;
7378: CALL_OW 6
// Say ( Stevens , D8-Huck-1 ) ;
7382: LD_EXP 2
7386: PPUSH
7387: LD_STRING D8-Huck-1
7389: PPUSH
7390: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
7394: LD_EXP 1
7398: PPUSH
7399: LD_STRING D8-JMM-1
7401: PPUSH
7402: CALL_OW 88
// if IsOk ( Stevens ) then
7406: LD_EXP 2
7410: PPUSH
7411: CALL_OW 302
7415: IFFALSE 7477
// begin Say ( Stevens , D8-Huck-2 ) ;
7417: LD_EXP 2
7421: PPUSH
7422: LD_STRING D8-Huck-2
7424: PPUSH
7425: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
7429: LD_EXP 1
7433: PPUSH
7434: LD_STRING D8-JMM-2
7436: PPUSH
7437: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
7441: LD_EXP 2
7445: PPUSH
7446: LD_STRING D8-Huck-3
7448: PPUSH
7449: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
7453: LD_EXP 1
7457: PPUSH
7458: LD_STRING D8-JMM-3
7460: PPUSH
7461: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
7465: LD_EXP 2
7469: PPUSH
7470: LD_STRING D8-Huck-4
7472: PPUSH
7473: CALL_OW 88
// end ; DialogueOff ;
7477: CALL_OW 7
// SetAreaMapShow ( TestArea , 0 ) ;
7481: LD_INT 5
7483: PPUSH
7484: LD_INT 0
7486: PPUSH
7487: CALL_OW 424
// SetAreaMapShow ( RadarArea , 0 ) ;
7491: LD_INT 7
7493: PPUSH
7494: LD_INT 0
7496: PPUSH
7497: CALL_OW 424
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
7501: LD_INT 6
7503: PPUSH
7504: LD_INT 1
7506: PPUSH
7507: CALL_OW 424
// ChangeMissionObjectives ( M5 ) ;
7511: LD_STRING M5
7513: PPUSH
7514: CALL_OW 337
// end ; end ;
7518: PPOPN 3
7520: END
// on EnterBuilding ( building , human ) do begin if IsOk ( AmSciSib ) and human = AmSciSib and eventVar4 = 0 and eventVar3 = 1 and ( GetLabKind ( building , 1 ) = b_lab_siberium or GetLabKind ( building , 2 ) = b_lab_siberium ) then
7521: LD_EXP 26
7525: PPUSH
7526: CALL_OW 302
7530: PUSH
7531: LD_VAR 0 2
7535: PUSH
7536: LD_EXP 26
7540: EQUAL
7541: AND
7542: PUSH
7543: LD_EXP 38
7547: PUSH
7548: LD_INT 0
7550: EQUAL
7551: AND
7552: PUSH
7553: LD_EXP 37
7557: PUSH
7558: LD_INT 1
7560: EQUAL
7561: AND
7562: PUSH
7563: LD_VAR 0 1
7567: PPUSH
7568: LD_INT 1
7570: PPUSH
7571: CALL_OW 268
7575: PUSH
7576: LD_INT 11
7578: EQUAL
7579: PUSH
7580: LD_VAR 0 1
7584: PPUSH
7585: LD_INT 2
7587: PPUSH
7588: CALL_OW 268
7592: PUSH
7593: LD_INT 11
7595: EQUAL
7596: OR
7597: AND
7598: IFFALSE 7608
// eventVar4 := 1 ;
7600: LD_ADDR_EXP 38
7604: PUSH
7605: LD_INT 1
7607: ST_TO_ADDR
// end ;
7608: PPOPN 2
7610: END
// on SibDepositContaminated ( unit , x , y ) do var i , tmp ;
7611: LD_INT 0
7613: PPUSH
7614: PPUSH
// begin if GetNation ( unit ) = nation_arabian then
7615: LD_VAR 0 1
7619: PPUSH
7620: CALL_OW 248
7624: PUSH
7625: LD_INT 2
7627: EQUAL
7628: IFFALSE 7874
// begin sibDestroyedCounter := sibDestroyedCounter + 1 ;
7630: LD_ADDR_EXP 32
7634: PUSH
7635: LD_EXP 32
7639: PUSH
7640: LD_INT 1
7642: PLUS
7643: ST_TO_ADDR
// for i := sibDeposits downto 1 do
7644: LD_ADDR_VAR 0 4
7648: PUSH
7649: DOUBLE
7650: LD_EXP 31
7654: INC
7655: ST_TO_ADDR
7656: LD_INT 1
7658: PUSH
7659: FOR_DOWNTO
7660: IFFALSE 7730
// if sibDeposits [ i ] [ 1 ] = x and sibDeposits [ i ] [ 2 ] = y then
7662: LD_EXP 31
7666: PUSH
7667: LD_VAR 0 4
7671: ARRAY
7672: PUSH
7673: LD_INT 1
7675: ARRAY
7676: PUSH
7677: LD_VAR 0 2
7681: EQUAL
7682: PUSH
7683: LD_EXP 31
7687: PUSH
7688: LD_VAR 0 4
7692: ARRAY
7693: PUSH
7694: LD_INT 2
7696: ARRAY
7697: PUSH
7698: LD_VAR 0 3
7702: EQUAL
7703: AND
7704: IFFALSE 7728
// begin sibDeposits := Delete ( sibDeposits , i ) ;
7706: LD_ADDR_EXP 31
7710: PUSH
7711: LD_EXP 31
7715: PPUSH
7716: LD_VAR 0 4
7720: PPUSH
7721: CALL_OW 3
7725: ST_TO_ADDR
// break ;
7726: GO 7730
// end ;
7728: GO 7659
7730: POP
7731: POP
// if eventVar5 = 0 and HexInfo ( x , y ) in FilterAllUnits ( [ f_side , 1 ] ) then
7732: LD_EXP 39
7736: PUSH
7737: LD_INT 0
7739: EQUAL
7740: PUSH
7741: LD_VAR 0 2
7745: PPUSH
7746: LD_VAR 0 3
7750: PPUSH
7751: CALL_OW 428
7755: PUSH
7756: LD_INT 22
7758: PUSH
7759: LD_INT 1
7761: PUSH
7762: EMPTY
7763: LIST
7764: LIST
7765: PPUSH
7766: CALL_OW 69
7770: IN
7771: AND
7772: IFFALSE 7874
// begin eventVar5 := 1 ;
7774: LD_ADDR_EXP 39
7778: PUSH
7779: LD_INT 1
7781: ST_TO_ADDR
// DialogueOn ;
7782: CALL_OW 6
// Say ( Stevens , D4-Sci1-1 ) ;
7786: LD_EXP 2
7790: PPUSH
7791: LD_STRING D4-Sci1-1
7793: PPUSH
7794: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
7798: LD_EXP 1
7802: PPUSH
7803: LD_STRING D4-JMM-1
7805: PPUSH
7806: CALL_OW 88
// Say ( Stevens , D4-Sci1-2 ) ;
7810: LD_EXP 2
7814: PPUSH
7815: LD_STRING D4-Sci1-2
7817: PPUSH
7818: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
7822: LD_EXP 1
7826: PPUSH
7827: LD_STRING D4-JMM-2
7829: PPUSH
7830: CALL_OW 88
// Say ( Stevens , D4-Sci1-3 ) ;
7834: LD_EXP 2
7838: PPUSH
7839: LD_STRING D4-Sci1-3
7841: PPUSH
7842: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
7846: LD_EXP 1
7850: PPUSH
7851: LD_STRING D4-JMM-3
7853: PPUSH
7854: CALL_OW 88
// Say ( JMM , D4-JMM-3a ) ;
7858: LD_EXP 1
7862: PPUSH
7863: LD_STRING D4-JMM-3a
7865: PPUSH
7866: CALL_OW 88
// DialogueOff ;
7870: CALL_OW 7
// end ; end ; end ;
7874: PPOPN 5
7876: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 1 and GetBType ( building ) = b_depot and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 1 then
7877: LD_VAR 0 1
7881: PPUSH
7882: CALL_OW 255
7886: PUSH
7887: LD_INT 1
7889: EQUAL
7890: PUSH
7891: LD_VAR 0 1
7895: PPUSH
7896: CALL_OW 266
7900: PUSH
7901: LD_INT 0
7903: EQUAL
7904: AND
7905: PUSH
7906: LD_INT 22
7908: PUSH
7909: LD_INT 1
7911: PUSH
7912: EMPTY
7913: LIST
7914: LIST
7915: PUSH
7916: LD_INT 21
7918: PUSH
7919: LD_INT 3
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: PUSH
7926: LD_INT 2
7928: PUSH
7929: LD_INT 30
7931: PUSH
7932: LD_INT 0
7934: PUSH
7935: EMPTY
7936: LIST
7937: LIST
7938: PUSH
7939: LD_INT 30
7941: PUSH
7942: LD_INT 1
7944: PUSH
7945: EMPTY
7946: LIST
7947: LIST
7948: PUSH
7949: EMPTY
7950: LIST
7951: LIST
7952: LIST
7953: PUSH
7954: EMPTY
7955: LIST
7956: LIST
7957: LIST
7958: PPUSH
7959: CALL_OW 69
7963: PUSH
7964: LD_INT 1
7966: EQUAL
7967: AND
7968: IFFALSE 7982
// SetBName ( building , omega ) ;
7970: LD_VAR 0 1
7974: PPUSH
7975: LD_STRING omega
7977: PPUSH
7978: CALL_OW 500
// end ;
7982: PPOPN 2
7984: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
7985: LD_VAR 0 1
7989: PPUSH
7990: CALL 26899 0 1
// end ;
7994: PPOPN 1
7996: END
// on SailEvent ( event ) do begin if event = eventArabianAttack then
7997: LD_VAR 0 1
8001: PUSH
8002: LD_EXP 43
8006: EQUAL
8007: IFFALSE 8013
// ArabianAttack ;
8009: CALL 10078 0 0
// if event = eventRussianAttack then
8013: LD_VAR 0 1
8017: PUSH
8018: LD_EXP 44
8022: EQUAL
8023: IFFALSE 8029
// RussianAttack ;
8025: CALL 10443 0 0
// end ;
8029: PPOPN 1
8031: END
// on SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) do begin if event = eventContaminate then
8032: LD_VAR 0 1
8036: PUSH
8037: LD_EXP 45
8041: EQUAL
8042: IFFALSE 8136
// begin if IsOk ( p1 ) and ValidHex ( p2 , p3 ) then
8044: LD_VAR 0 2
8048: PPUSH
8049: CALL_OW 302
8053: PUSH
8054: LD_VAR 0 3
8058: PPUSH
8059: LD_VAR 0 4
8063: PPUSH
8064: CALL_OW 488
8068: AND
8069: IFFALSE 8136
// begin repeat wait ( 0 0$1 ) ;
8071: LD_INT 35
8073: PPUSH
8074: CALL_OW 67
// if not HasTask ( p1 ) then
8078: LD_VAR 0 2
8082: PPUSH
8083: CALL_OW 314
8087: NOT
8088: IFFALSE 8124
// begin ComContaminate ( p1 , p2 , p3 ) ;
8090: LD_VAR 0 2
8094: PPUSH
8095: LD_VAR 0 3
8099: PPUSH
8100: LD_VAR 0 4
8104: PPUSH
8105: CALL_OW 158
// AddComMoveXY ( p1 , 42 , 3 ) ;
8109: LD_VAR 0 2
8113: PPUSH
8114: LD_INT 42
8116: PPUSH
8117: LD_INT 3
8119: PPUSH
8120: CALL_OW 171
// end ; until not IsOk ( p1 ) ;
8124: LD_VAR 0 2
8128: PPUSH
8129: CALL_OW 302
8133: NOT
8134: IFFALSE 8071
// end ; end ; end ;
8136: PPOPN 7
8138: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) in [ 3 , 8 ] then
8139: LD_VAR 0 1
8143: PPUSH
8144: CALL_OW 255
8148: PUSH
8149: LD_INT 3
8151: PUSH
8152: LD_INT 8
8154: PUSH
8155: EMPTY
8156: LIST
8157: LIST
8158: IN
8159: IFFALSE 8222
// begin ComMoveXY ( driver , 41 , 2 ) ;
8161: LD_VAR 0 1
8165: PPUSH
8166: LD_INT 41
8168: PPUSH
8169: LD_INT 2
8171: PPUSH
8172: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8176: LD_INT 35
8178: PPUSH
8179: CALL_OW 67
// if IsDead ( driver ) then
8183: LD_VAR 0 1
8187: PPUSH
8188: CALL_OW 301
8192: IFFALSE 8196
// exit ;
8194: GO 8222
// until IsAt ( driver , 41 , 2 ) ;
8196: LD_VAR 0 1
8200: PPUSH
8201: LD_INT 41
8203: PPUSH
8204: LD_INT 2
8206: PPUSH
8207: CALL_OW 307
8211: IFFALSE 8176
// RemoveUnit ( driver ) ;
8213: LD_VAR 0 1
8217: PPUSH
8218: CALL_OW 64
// end ; end ; end_of_file
8222: PPOPN 4
8224: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
8225: LD_INT 0
8227: PPUSH
8228: PPUSH
8229: PPUSH
// characters := characters diff [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
8230: LD_ADDR_VAR 0 1
8234: PUSH
8235: LD_VAR 0 1
8239: PUSH
8240: LD_EXP 1
8244: PUSH
8245: LD_EXP 2
8249: PUSH
8250: LD_EXP 3
8254: PUSH
8255: LD_EXP 4
8259: PUSH
8260: LD_EXP 5
8264: PUSH
8265: LD_EXP 6
8269: PUSH
8270: LD_EXP 7
8274: PUSH
8275: LD_EXP 8
8279: PUSH
8280: LD_EXP 9
8284: PUSH
8285: LD_EXP 10
8289: PUSH
8290: LD_EXP 11
8294: PUSH
8295: LD_EXP 12
8299: PUSH
8300: LD_EXP 13
8304: PUSH
8305: LD_EXP 14
8309: PUSH
8310: LD_EXP 15
8314: PUSH
8315: EMPTY
8316: LIST
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: DIFF
8332: ST_TO_ADDR
// if not characters then
8333: LD_VAR 0 1
8337: NOT
8338: IFFALSE 8342
// exit ;
8340: GO 8421
// speaker := characters [ rand ( 1 , characters ) ] ;
8342: LD_ADDR_VAR 0 6
8346: PUSH
8347: LD_VAR 0 1
8351: PUSH
8352: LD_INT 1
8354: PPUSH
8355: LD_VAR 0 1
8359: PPUSH
8360: CALL_OW 12
8364: ARRAY
8365: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
8366: LD_VAR 0 6
8370: PPUSH
8371: CALL_OW 258
8375: PUSH
8376: LD_INT 1
8378: EQUAL
8379: IFFALSE 8397
// Say ( speaker , dialogMID ) else
8381: LD_VAR 0 6
8385: PPUSH
8386: LD_VAR 0 2
8390: PPUSH
8391: CALL_OW 88
8395: GO 8411
// Say ( speaker , dialogFID ) ;
8397: LD_VAR 0 6
8401: PPUSH
8402: LD_VAR 0 3
8406: PPUSH
8407: CALL_OW 88
// result := speaker ;
8411: LD_ADDR_VAR 0 4
8415: PUSH
8416: LD_VAR 0 6
8420: ST_TO_ADDR
// end ;
8421: LD_VAR 0 4
8425: RET
// export function PrepareDifficulty ; begin
8426: LD_INT 0
8428: PPUSH
// SetTech ( 5 , 8 , state_researched ) ;
8429: LD_INT 5
8431: PPUSH
8432: LD_INT 8
8434: PPUSH
8435: LD_INT 2
8437: PPUSH
8438: CALL_OW 322
// if Difficulty = 1 then
8442: LD_OWVAR 67
8446: PUSH
8447: LD_INT 1
8449: EQUAL
8450: IFFALSE 8569
// begin SetTech ( 66 , 8 , state_researched ) ;
8452: LD_INT 66
8454: PPUSH
8455: LD_INT 8
8457: PPUSH
8458: LD_INT 2
8460: PPUSH
8461: CALL_OW 322
// SetTech ( 67 , 8 , state_disabled ) ;
8465: LD_INT 67
8467: PPUSH
8468: LD_INT 8
8470: PPUSH
8471: LD_INT 0
8473: PPUSH
8474: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8478: LD_INT 68
8480: PPUSH
8481: LD_INT 8
8483: PPUSH
8484: LD_INT 0
8486: PPUSH
8487: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8491: LD_INT 51
8493: PPUSH
8494: LD_INT 8
8496: PPUSH
8497: LD_INT 2
8499: PPUSH
8500: CALL_OW 322
// SetTech ( 52 , 8 , state_disabled ) ;
8504: LD_INT 52
8506: PPUSH
8507: LD_INT 8
8509: PPUSH
8510: LD_INT 0
8512: PPUSH
8513: CALL_OW 322
// SetTech ( 53 , 8 , state_disabled ) ;
8517: LD_INT 53
8519: PPUSH
8520: LD_INT 8
8522: PPUSH
8523: LD_INT 0
8525: PPUSH
8526: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8530: LD_INT 60
8532: PPUSH
8533: LD_INT 8
8535: PPUSH
8536: LD_INT 2
8538: PPUSH
8539: CALL_OW 322
// SetTech ( 61 , 8 , state_disabled ) ;
8543: LD_INT 61
8545: PPUSH
8546: LD_INT 8
8548: PPUSH
8549: LD_INT 0
8551: PPUSH
8552: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8556: LD_INT 62
8558: PPUSH
8559: LD_INT 8
8561: PPUSH
8562: LD_INT 0
8564: PPUSH
8565: CALL_OW 322
// end ; if Difficulty = 2 then
8569: LD_OWVAR 67
8573: PUSH
8574: LD_INT 2
8576: EQUAL
8577: IFFALSE 8696
// begin SetTech ( 66 , 8 , state_researched ) ;
8579: LD_INT 66
8581: PPUSH
8582: LD_INT 8
8584: PPUSH
8585: LD_INT 2
8587: PPUSH
8588: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
8592: LD_INT 67
8594: PPUSH
8595: LD_INT 8
8597: PPUSH
8598: LD_INT 2
8600: PPUSH
8601: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8605: LD_INT 68
8607: PPUSH
8608: LD_INT 8
8610: PPUSH
8611: LD_INT 0
8613: PPUSH
8614: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8618: LD_INT 51
8620: PPUSH
8621: LD_INT 8
8623: PPUSH
8624: LD_INT 2
8626: PPUSH
8627: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
8631: LD_INT 52
8633: PPUSH
8634: LD_INT 8
8636: PPUSH
8637: LD_INT 2
8639: PPUSH
8640: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
8644: LD_INT 53
8646: PPUSH
8647: LD_INT 8
8649: PPUSH
8650: LD_INT 2
8652: PPUSH
8653: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8657: LD_INT 60
8659: PPUSH
8660: LD_INT 8
8662: PPUSH
8663: LD_INT 2
8665: PPUSH
8666: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
8670: LD_INT 61
8672: PPUSH
8673: LD_INT 8
8675: PPUSH
8676: LD_INT 2
8678: PPUSH
8679: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8683: LD_INT 62
8685: PPUSH
8686: LD_INT 8
8688: PPUSH
8689: LD_INT 0
8691: PPUSH
8692: CALL_OW 322
// end ; if Difficulty >= 3 then
8696: LD_OWVAR 67
8700: PUSH
8701: LD_INT 3
8703: GREATEREQUAL
8704: IFFALSE 8823
// begin SetTech ( 66 , 8 , state_researched ) ;
8706: LD_INT 66
8708: PPUSH
8709: LD_INT 8
8711: PPUSH
8712: LD_INT 2
8714: PPUSH
8715: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
8719: LD_INT 67
8721: PPUSH
8722: LD_INT 8
8724: PPUSH
8725: LD_INT 2
8727: PPUSH
8728: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8732: LD_INT 68
8734: PPUSH
8735: LD_INT 8
8737: PPUSH
8738: LD_INT 0
8740: PPUSH
8741: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8745: LD_INT 51
8747: PPUSH
8748: LD_INT 8
8750: PPUSH
8751: LD_INT 2
8753: PPUSH
8754: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
8758: LD_INT 52
8760: PPUSH
8761: LD_INT 8
8763: PPUSH
8764: LD_INT 2
8766: PPUSH
8767: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
8771: LD_INT 53
8773: PPUSH
8774: LD_INT 8
8776: PPUSH
8777: LD_INT 2
8779: PPUSH
8780: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8784: LD_INT 60
8786: PPUSH
8787: LD_INT 8
8789: PPUSH
8790: LD_INT 2
8792: PPUSH
8793: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
8797: LD_INT 61
8799: PPUSH
8800: LD_INT 8
8802: PPUSH
8803: LD_INT 2
8805: PPUSH
8806: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8810: LD_INT 62
8812: PPUSH
8813: LD_INT 8
8815: PPUSH
8816: LD_INT 0
8818: PPUSH
8819: CALL_OW 322
// end ; end ;
8823: LD_VAR 0 1
8827: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
8828: LD_INT 0
8830: PPUSH
8831: PPUSH
// for i in charactersList do
8832: LD_ADDR_VAR 0 4
8836: PUSH
8837: LD_VAR 0 1
8841: PUSH
8842: FOR_IN
8843: IFFALSE 8861
// SaveCharacters ( i , ident ) ;
8845: LD_VAR 0 4
8849: PPUSH
8850: LD_VAR 0 2
8854: PPUSH
8855: CALL_OW 38
8859: GO 8842
8861: POP
8862: POP
// end ; end_of_file
8863: LD_VAR 0 3
8867: RET
// every 0 0$1 trigger eventVar4 = 1 do var m1 , m2 , m3 ;
8868: LD_EXP 38
8872: PUSH
8873: LD_INT 1
8875: EQUAL
8876: IFFALSE 9782
8878: GO 8880
8880: DISABLE
8881: LD_INT 0
8883: PPUSH
8884: PPUSH
8885: PPUSH
// begin m1 := false ;
8886: LD_ADDR_VAR 0 1
8890: PUSH
8891: LD_INT 0
8893: ST_TO_ADDR
// m2 := false ;
8894: LD_ADDR_VAR 0 2
8898: PUSH
8899: LD_INT 0
8901: ST_TO_ADDR
// m3 := false ;
8902: LD_ADDR_VAR 0 3
8906: PUSH
8907: LD_INT 0
8909: ST_TO_ADDR
// DialogueOn ;
8910: CALL_OW 6
// Say ( JMM , D9b-JMM-1 ) ;
8914: LD_EXP 1
8918: PPUSH
8919: LD_STRING D9b-JMM-1
8921: PPUSH
8922: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-1 ) ;
8926: LD_EXP 15
8930: PPUSH
8931: LD_STRING D9b-Pow-1
8933: PPUSH
8934: CALL_OW 94
// Say ( JMM , D9b-JMM-2 ) ;
8938: LD_EXP 1
8942: PPUSH
8943: LD_STRING D9b-JMM-2
8945: PPUSH
8946: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-2 ) ;
8950: LD_EXP 15
8954: PPUSH
8955: LD_STRING D9b-Pow-2
8957: PPUSH
8958: CALL_OW 94
// Say ( JMM , D9b-JMM-3 ) ;
8962: LD_EXP 1
8966: PPUSH
8967: LD_STRING D9b-JMM-3
8969: PPUSH
8970: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-3 ) ;
8974: LD_EXP 15
8978: PPUSH
8979: LD_STRING D9b-Pow-3
8981: PPUSH
8982: CALL_OW 94
// if tick <= 60 60$00 then
8986: LD_OWVAR 1
8990: PUSH
8991: LD_INT 126000
8993: LESSEQUAL
8994: IFFALSE 9003
// SetAchievement ( ACH_ASPEED_13 ) ;
8996: LD_STRING ACH_ASPEED_13
8998: PPUSH
8999: CALL_OW 543
// if burlakStatus = 1 then
9003: LD_EXP 28
9007: PUSH
9008: LD_INT 1
9010: EQUAL
9011: IFFALSE 9033
// begin m1 := true ;
9013: LD_ADDR_VAR 0 1
9017: PUSH
9018: LD_INT 1
9020: ST_TO_ADDR
// AddMedal ( Burlak , 1 ) ;
9021: LD_STRING Burlak
9023: PPUSH
9024: LD_INT 1
9026: PPUSH
9027: CALL_OW 101
// end else
9031: GO 9044
// begin AddMedal ( Burlak , - 1 ) ;
9033: LD_STRING Burlak
9035: PPUSH
9036: LD_INT 1
9038: NEG
9039: PPUSH
9040: CALL_OW 101
// end ; if IsOk ( Stevens ) then
9044: LD_EXP 2
9048: PPUSH
9049: CALL_OW 302
9053: IFFALSE 9075
// begin m2 := true ;
9055: LD_ADDR_VAR 0 2
9059: PUSH
9060: LD_INT 1
9062: ST_TO_ADDR
// AddMedal ( Stevens , 1 ) ;
9063: LD_STRING Stevens
9065: PPUSH
9066: LD_INT 1
9068: PPUSH
9069: CALL_OW 101
// end else
9073: GO 9086
// begin AddMedal ( Stevens , - 1 ) ;
9075: LD_STRING Stevens
9077: PPUSH
9078: LD_INT 1
9080: NEG
9081: PPUSH
9082: CALL_OW 101
// end ; if radarOnSpot = 1 then
9086: LD_EXP 30
9090: PUSH
9091: LD_INT 1
9093: EQUAL
9094: IFFALSE 9116
// begin m3 := true ;
9096: LD_ADDR_VAR 0 3
9100: PUSH
9101: LD_INT 1
9103: ST_TO_ADDR
// AddMedal ( Observation , 1 ) ;
9104: LD_STRING Observation
9106: PPUSH
9107: LD_INT 1
9109: PPUSH
9110: CALL_OW 101
// end else
9114: GO 9127
// begin AddMedal ( Observation , - 1 ) ;
9116: LD_STRING Observation
9118: PPUSH
9119: LD_INT 1
9121: NEG
9122: PPUSH
9123: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
9127: LD_VAR 0 1
9131: PUSH
9132: LD_VAR 0 2
9136: AND
9137: PUSH
9138: LD_VAR 0 3
9142: AND
9143: PUSH
9144: LD_OWVAR 67
9148: PUSH
9149: LD_INT 3
9151: GREATEREQUAL
9152: AND
9153: IFFALSE 9165
// SetAchievementEX ( ACH_AMER , 13 ) ;
9155: LD_STRING ACH_AMER
9157: PPUSH
9158: LD_INT 13
9160: PPUSH
9161: CALL_OW 564
// GiveMedals ( MAIN ) ;
9165: LD_STRING MAIN
9167: PPUSH
9168: CALL_OW 102
// SaveVariable ( burlakStatus , 13_BurlakStatus_1 ) ;
9172: LD_EXP 28
9176: PPUSH
9177: LD_STRING 13_BurlakStatus_1
9179: PPUSH
9180: CALL_OW 39
// if IsLive ( Stevens ) then
9184: LD_EXP 2
9188: PPUSH
9189: CALL_OW 300
9193: IFFALSE 9207
// SaveVariable ( 1 , 13_StevensStatus_1 ) else
9195: LD_INT 1
9197: PPUSH
9198: LD_STRING 13_StevensStatus_1
9200: PPUSH
9201: CALL_OW 39
9205: GO 9217
// SaveVariable ( 0 , 13_StevensStatus_1 ) ;
9207: LD_INT 0
9209: PPUSH
9210: LD_STRING 13_StevensStatus_1
9212: PPUSH
9213: CALL_OW 39
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
9217: LD_INT 22
9219: PUSH
9220: LD_INT 1
9222: PUSH
9223: EMPTY
9224: LIST
9225: LIST
9226: PUSH
9227: LD_INT 21
9229: PUSH
9230: LD_INT 1
9232: PUSH
9233: EMPTY
9234: LIST
9235: LIST
9236: PUSH
9237: LD_INT 2
9239: PUSH
9240: LD_INT 25
9242: PUSH
9243: LD_INT 1
9245: PUSH
9246: EMPTY
9247: LIST
9248: LIST
9249: PUSH
9250: LD_INT 25
9252: PUSH
9253: LD_INT 2
9255: PUSH
9256: EMPTY
9257: LIST
9258: LIST
9259: PUSH
9260: LD_INT 25
9262: PUSH
9263: LD_INT 3
9265: PUSH
9266: EMPTY
9267: LIST
9268: LIST
9269: PUSH
9270: LD_INT 25
9272: PUSH
9273: LD_INT 4
9275: PUSH
9276: EMPTY
9277: LIST
9278: LIST
9279: PUSH
9280: LD_INT 25
9282: PUSH
9283: LD_INT 5
9285: PUSH
9286: EMPTY
9287: LIST
9288: LIST
9289: PUSH
9290: LD_INT 25
9292: PUSH
9293: LD_INT 8
9295: PUSH
9296: EMPTY
9297: LIST
9298: LIST
9299: PUSH
9300: EMPTY
9301: LIST
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: PUSH
9309: EMPTY
9310: LIST
9311: LIST
9312: LIST
9313: PPUSH
9314: CALL_OW 69
9318: PPUSH
9319: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
9323: LD_EXP 1
9327: PPUSH
9328: LD_EXP 34
9332: PUSH
9333: LD_STRING JMM
9335: STR
9336: PPUSH
9337: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
9341: LD_EXP 8
9345: PPUSH
9346: LD_EXP 34
9350: PUSH
9351: LD_STRING Brown
9353: STR
9354: PPUSH
9355: CALL 8828 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
9359: LD_EXP 4
9363: PPUSH
9364: LD_EXP 34
9368: PUSH
9369: LD_STRING Donaldson
9371: STR
9372: PPUSH
9373: CALL 8828 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
9377: LD_EXP 5
9381: PPUSH
9382: LD_EXP 34
9386: PUSH
9387: LD_STRING Bobby
9389: STR
9390: PPUSH
9391: CALL 8828 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
9395: LD_EXP 6
9399: PPUSH
9400: LD_EXP 34
9404: PUSH
9405: LD_STRING Cyrus
9407: STR
9408: PPUSH
9409: CALL 8828 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
9413: LD_EXP 3
9417: PPUSH
9418: LD_EXP 34
9422: PUSH
9423: LD_STRING Lisa
9425: STR
9426: PPUSH
9427: CALL 8828 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
9431: LD_EXP 13
9435: PPUSH
9436: LD_EXP 34
9440: PUSH
9441: LD_STRING Frank
9443: STR
9444: PPUSH
9445: CALL 8828 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
9449: LD_EXP 14
9453: PPUSH
9454: LD_EXP 34
9458: PUSH
9459: LD_STRING Kikuchi
9461: STR
9462: PPUSH
9463: CALL 8828 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
9467: LD_EXP 10
9471: PPUSH
9472: LD_EXP 34
9476: PUSH
9477: LD_STRING Houten
9479: STR
9480: PPUSH
9481: CALL 8828 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
9485: LD_EXP 12
9489: PPUSH
9490: LD_EXP 34
9494: PUSH
9495: LD_STRING Gary
9497: STR
9498: PPUSH
9499: CALL 8828 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
9503: LD_EXP 11
9507: PPUSH
9508: LD_EXP 34
9512: PUSH
9513: LD_STRING Cornell
9515: STR
9516: PPUSH
9517: CALL 8828 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
9521: LD_EXP 7
9525: PPUSH
9526: LD_EXP 34
9530: PUSH
9531: LD_STRING Denis
9533: STR
9534: PPUSH
9535: CALL 8828 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
9539: LD_EXP 9
9543: PPUSH
9544: LD_EXP 34
9548: PUSH
9549: LD_STRING Gladstone
9551: STR
9552: PPUSH
9553: CALL 8828 0 2
// EnchancedSaveCharacters ( Stevens , mission_prefix & Stevens ) ;
9557: LD_EXP 2
9561: PPUSH
9562: LD_EXP 34
9566: PUSH
9567: LD_STRING Stevens
9569: STR
9570: PPUSH
9571: CALL 8828 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel , Stevens ] , 13_other_survivors ) ;
9575: LD_INT 50
9577: PUSH
9578: EMPTY
9579: LIST
9580: PUSH
9581: LD_INT 22
9583: PUSH
9584: LD_INT 1
9586: PUSH
9587: EMPTY
9588: LIST
9589: LIST
9590: PUSH
9591: LD_INT 21
9593: PUSH
9594: LD_INT 1
9596: PUSH
9597: EMPTY
9598: LIST
9599: LIST
9600: PUSH
9601: LD_INT 2
9603: PUSH
9604: LD_INT 25
9606: PUSH
9607: LD_INT 1
9609: PUSH
9610: EMPTY
9611: LIST
9612: LIST
9613: PUSH
9614: LD_INT 25
9616: PUSH
9617: LD_INT 2
9619: PUSH
9620: EMPTY
9621: LIST
9622: LIST
9623: PUSH
9624: LD_INT 25
9626: PUSH
9627: LD_INT 3
9629: PUSH
9630: EMPTY
9631: LIST
9632: LIST
9633: PUSH
9634: LD_INT 25
9636: PUSH
9637: LD_INT 4
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: PUSH
9644: LD_INT 25
9646: PUSH
9647: LD_INT 5
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: PUSH
9654: LD_INT 25
9656: PUSH
9657: LD_INT 8
9659: PUSH
9660: EMPTY
9661: LIST
9662: LIST
9663: PUSH
9664: EMPTY
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: PUSH
9673: EMPTY
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: PPUSH
9679: CALL_OW 69
9683: PUSH
9684: LD_EXP 1
9688: PUSH
9689: LD_EXP 8
9693: PUSH
9694: LD_EXP 4
9698: PUSH
9699: LD_EXP 5
9703: PUSH
9704: LD_EXP 6
9708: PUSH
9709: LD_EXP 3
9713: PUSH
9714: LD_EXP 13
9718: PUSH
9719: LD_EXP 9
9723: PUSH
9724: LD_EXP 14
9728: PUSH
9729: LD_EXP 7
9733: PUSH
9734: LD_EXP 10
9738: PUSH
9739: LD_EXP 12
9743: PUSH
9744: LD_EXP 11
9748: PUSH
9749: LD_EXP 2
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: DIFF
9770: PPUSH
9771: LD_STRING 13_other_survivors
9773: PPUSH
9774: CALL_OW 38
// YouWin ;
9778: CALL_OW 103
// end ; end_of_file
9782: PPOPN 3
9784: END
// every 0 0$1 trigger sibDestroyedCounter = 2 and not FilterAllUnits ( [ f_weapon , us_siberium_rocket ] ) and GetTech ( tech_SibFiss , 1 ) = state_enabled do var i , tmp , yourSiberite ;
9785: LD_EXP 32
9789: PUSH
9790: LD_INT 2
9792: EQUAL
9793: PUSH
9794: LD_INT 34
9796: PUSH
9797: LD_INT 8
9799: PUSH
9800: EMPTY
9801: LIST
9802: LIST
9803: PPUSH
9804: CALL_OW 69
9808: NOT
9809: AND
9810: PUSH
9811: LD_INT 25
9813: PPUSH
9814: LD_INT 1
9816: PPUSH
9817: CALL_OW 321
9821: PUSH
9822: LD_INT 1
9824: EQUAL
9825: AND
9826: IFFALSE 9962
9828: GO 9830
9830: DISABLE
9831: LD_INT 0
9833: PPUSH
9834: PPUSH
9835: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9836: LD_ADDR_VAR 0 2
9840: PUSH
9841: LD_INT 22
9843: PUSH
9844: LD_INT 1
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: PUSH
9851: LD_INT 21
9853: PUSH
9854: LD_INT 3
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: PUSH
9861: LD_INT 2
9863: PUSH
9864: LD_INT 30
9866: PUSH
9867: LD_INT 0
9869: PUSH
9870: EMPTY
9871: LIST
9872: LIST
9873: PUSH
9874: LD_INT 30
9876: PUSH
9877: LD_INT 1
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: PUSH
9884: EMPTY
9885: LIST
9886: LIST
9887: LIST
9888: PUSH
9889: EMPTY
9890: LIST
9891: LIST
9892: LIST
9893: PPUSH
9894: CALL_OW 69
9898: ST_TO_ADDR
// for i in tmp do
9899: LD_ADDR_VAR 0 1
9903: PUSH
9904: LD_VAR 0 2
9908: PUSH
9909: FOR_IN
9910: IFFALSE 9943
// yourSiberite := yourSiberite + GetResourceType ( GetBase ( i ) , 3 ) ;
9912: LD_ADDR_VAR 0 3
9916: PUSH
9917: LD_VAR 0 3
9921: PUSH
9922: LD_VAR 0 1
9926: PPUSH
9927: CALL_OW 274
9931: PPUSH
9932: LD_INT 3
9934: PPUSH
9935: CALL_OW 275
9939: PLUS
9940: ST_TO_ADDR
9941: GO 9909
9943: POP
9944: POP
// if yourSiberite < 60 then
9945: LD_VAR 0 3
9949: PUSH
9950: LD_INT 60
9952: LESS
9953: IFFALSE 9962
// YouLost ( siberite ) ;
9955: LD_STRING siberite
9957: PPUSH
9958: CALL_OW 104
// end ; end_of_file
9962: PPOPN 3
9964: END
// every 8 8$00 + 8 8$00 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) < 6 do
9965: LD_INT 22
9967: PUSH
9968: LD_INT 8
9970: PUSH
9971: EMPTY
9972: LIST
9973: LIST
9974: PUSH
9975: LD_INT 21
9977: PUSH
9978: LD_INT 1
9980: PUSH
9981: EMPTY
9982: LIST
9983: LIST
9984: PUSH
9985: EMPTY
9986: LIST
9987: LIST
9988: PPUSH
9989: CALL_OW 69
9993: PUSH
9994: LD_INT 6
9996: LESS
9997: IFFALSE 10007
9999: GO 10001
10001: DISABLE
// begin enable ;
10002: ENABLE
// PrepareArabianAttack ;
10003: CALL 4079 0 0
// end ;
10007: END
// every 0 0$30 trigger eventVar1 = 1 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) < 6 do
10008: LD_EXP 35
10012: PUSH
10013: LD_INT 1
10015: EQUAL
10016: PUSH
10017: LD_INT 22
10019: PUSH
10020: LD_INT 8
10022: PUSH
10023: EMPTY
10024: LIST
10025: LIST
10026: PUSH
10027: LD_INT 21
10029: PUSH
10030: LD_INT 1
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: PUSH
10037: EMPTY
10038: LIST
10039: LIST
10040: PPUSH
10041: CALL_OW 69
10045: PUSH
10046: LD_INT 6
10048: LESS
10049: AND
10050: IFFALSE 10077
10052: GO 10054
10054: DISABLE
// begin wait ( 4 4$00 ) ;
10055: LD_INT 8400
10057: PPUSH
10058: CALL_OW 67
// PrepareRussianAttack ;
10062: CALL 3302 0 0
// wait ( 12 12$00 ) ;
10066: LD_INT 25200
10068: PPUSH
10069: CALL_OW 67
// PrepareRussianAttack ;
10073: CALL 3302 0 0
// end ;
10077: END
// export function ArabianAttack ; var i , tmp , path , path2 , vehicles , infantry , units , apes ; begin
10078: LD_INT 0
10080: PPUSH
10081: PPUSH
10082: PPUSH
10083: PPUSH
10084: PPUSH
10085: PPUSH
10086: PPUSH
10087: PPUSH
10088: PPUSH
// units := FilterAllUnits ( [ [ f_side , 8 ] , [ f_tag , 10 ] ] ) ;
10089: LD_ADDR_VAR 0 8
10093: PUSH
10094: LD_INT 22
10096: PUSH
10097: LD_INT 8
10099: PUSH
10100: EMPTY
10101: LIST
10102: LIST
10103: PUSH
10104: LD_INT 120
10106: PUSH
10107: LD_INT 10
10109: PUSH
10110: EMPTY
10111: LIST
10112: LIST
10113: PUSH
10114: EMPTY
10115: LIST
10116: LIST
10117: PPUSH
10118: CALL_OW 69
10122: ST_TO_ADDR
// if not units then
10123: LD_VAR 0 8
10127: NOT
10128: IFFALSE 10132
// exit ;
10130: GO 10438
// path := [ [ 80 , 60 ] , [ 54 , 57 ] , [ 55 , 74 ] , [ 61 , 85 ] ] ;
10132: LD_ADDR_VAR 0 4
10136: PUSH
10137: LD_INT 80
10139: PUSH
10140: LD_INT 60
10142: PUSH
10143: EMPTY
10144: LIST
10145: LIST
10146: PUSH
10147: LD_INT 54
10149: PUSH
10150: LD_INT 57
10152: PUSH
10153: EMPTY
10154: LIST
10155: LIST
10156: PUSH
10157: LD_INT 55
10159: PUSH
10160: LD_INT 74
10162: PUSH
10163: EMPTY
10164: LIST
10165: LIST
10166: PUSH
10167: LD_INT 61
10169: PUSH
10170: LD_INT 85
10172: PUSH
10173: EMPTY
10174: LIST
10175: LIST
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: LIST
10181: LIST
10182: ST_TO_ADDR
// path2 := [ [ 93 , 99 ] , [ 85 , 99 ] ] ;
10183: LD_ADDR_VAR 0 5
10187: PUSH
10188: LD_INT 93
10190: PUSH
10191: LD_INT 99
10193: PUSH
10194: EMPTY
10195: LIST
10196: LIST
10197: PUSH
10198: LD_INT 85
10200: PUSH
10201: LD_INT 99
10203: PUSH
10204: EMPTY
10205: LIST
10206: LIST
10207: PUSH
10208: EMPTY
10209: LIST
10210: LIST
10211: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10212: LD_INT 35
10214: PPUSH
10215: CALL_OW 67
// vehicles := UnitFilter ( units , [ f_type , unit_vehicle ] ) ;
10219: LD_ADDR_VAR 0 6
10223: PUSH
10224: LD_VAR 0 8
10228: PPUSH
10229: LD_INT 21
10231: PUSH
10232: LD_INT 2
10234: PUSH
10235: EMPTY
10236: LIST
10237: LIST
10238: PPUSH
10239: CALL_OW 72
10243: ST_TO_ADDR
// if vehicles then
10244: LD_VAR 0 6
10248: IFFALSE 10264
// AgressiveMove ( vehicles , path ) ;
10250: LD_VAR 0 6
10254: PPUSH
10255: LD_VAR 0 4
10259: PPUSH
10260: CALL 71156 0 2
// infantry := UnitFilter ( units , [ [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ;
10264: LD_ADDR_VAR 0 7
10268: PUSH
10269: LD_VAR 0 8
10273: PPUSH
10274: LD_INT 23
10276: PUSH
10277: LD_INT 2
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: PUSH
10284: LD_INT 21
10286: PUSH
10287: LD_INT 1
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: PPUSH
10298: CALL_OW 72
10302: ST_TO_ADDR
// if infantry then
10303: LD_VAR 0 7
10307: IFFALSE 10323
// AgressiveMove ( infantry , path2 ) ;
10309: LD_VAR 0 7
10313: PPUSH
10314: LD_VAR 0 5
10318: PPUSH
10319: CALL 71156 0 2
// apes := UnitFilter ( units , [ [ f_nation , 0 ] , [ f_type , unit_human ] ] ) ;
10323: LD_ADDR_VAR 0 9
10327: PUSH
10328: LD_VAR 0 8
10332: PPUSH
10333: LD_INT 23
10335: PUSH
10336: LD_INT 0
10338: PUSH
10339: EMPTY
10340: LIST
10341: LIST
10342: PUSH
10343: LD_INT 21
10345: PUSH
10346: LD_INT 1
10348: PUSH
10349: EMPTY
10350: LIST
10351: LIST
10352: PUSH
10353: EMPTY
10354: LIST
10355: LIST
10356: PPUSH
10357: CALL_OW 72
10361: ST_TO_ADDR
// if apes then
10362: LD_VAR 0 9
10366: IFFALSE 10410
// ComAttackUnit ( apes [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , apes [ 1 ] ) ) ;
10368: LD_VAR 0 9
10372: PUSH
10373: LD_INT 1
10375: ARRAY
10376: PPUSH
10377: LD_INT 22
10379: PUSH
10380: LD_INT 1
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: PPUSH
10387: CALL_OW 69
10391: PPUSH
10392: LD_VAR 0 9
10396: PUSH
10397: LD_INT 1
10399: ARRAY
10400: PPUSH
10401: CALL_OW 74
10405: PPUSH
10406: CALL_OW 115
// units := UnitFilter ( units , [ f_ok ] ) ;
10410: LD_ADDR_VAR 0 8
10414: PUSH
10415: LD_VAR 0 8
10419: PPUSH
10420: LD_INT 50
10422: PUSH
10423: EMPTY
10424: LIST
10425: PPUSH
10426: CALL_OW 72
10430: ST_TO_ADDR
// until not units ;
10431: LD_VAR 0 8
10435: NOT
10436: IFFALSE 10212
// end ;
10438: LD_VAR 0 1
10442: RET
// export function RussianAttack ; var i , tmp , path , vehicles , units ; begin
10443: LD_INT 0
10445: PPUSH
10446: PPUSH
10447: PPUSH
10448: PPUSH
10449: PPUSH
10450: PPUSH
// units := FilterAllUnits ( [ [ f_side , 3 ] , [ f_tag , 10 ] ] ) ;
10451: LD_ADDR_VAR 0 6
10455: PUSH
10456: LD_INT 22
10458: PUSH
10459: LD_INT 3
10461: PUSH
10462: EMPTY
10463: LIST
10464: LIST
10465: PUSH
10466: LD_INT 120
10468: PUSH
10469: LD_INT 10
10471: PUSH
10472: EMPTY
10473: LIST
10474: LIST
10475: PUSH
10476: EMPTY
10477: LIST
10478: LIST
10479: PPUSH
10480: CALL_OW 69
10484: ST_TO_ADDR
// if not units then
10485: LD_VAR 0 6
10489: NOT
10490: IFFALSE 10494
// exit ;
10492: GO 10625
// path := [ [ 80 , 60 ] , [ 54 , 57 ] , [ 55 , 74 ] , [ 61 , 85 ] ] ;
10494: LD_ADDR_VAR 0 4
10498: PUSH
10499: LD_INT 80
10501: PUSH
10502: LD_INT 60
10504: PUSH
10505: EMPTY
10506: LIST
10507: LIST
10508: PUSH
10509: LD_INT 54
10511: PUSH
10512: LD_INT 57
10514: PUSH
10515: EMPTY
10516: LIST
10517: LIST
10518: PUSH
10519: LD_INT 55
10521: PUSH
10522: LD_INT 74
10524: PUSH
10525: EMPTY
10526: LIST
10527: LIST
10528: PUSH
10529: LD_INT 61
10531: PUSH
10532: LD_INT 85
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: PUSH
10539: EMPTY
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10545: LD_INT 35
10547: PPUSH
10548: CALL_OW 67
// vehicles := UnitFilter ( units , [ f_type , unit_vehicle ] ) ;
10552: LD_ADDR_VAR 0 5
10556: PUSH
10557: LD_VAR 0 6
10561: PPUSH
10562: LD_INT 21
10564: PUSH
10565: LD_INT 2
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: PPUSH
10572: CALL_OW 72
10576: ST_TO_ADDR
// if vehicles then
10577: LD_VAR 0 5
10581: IFFALSE 10597
// AgressiveMove ( vehicles , path ) ;
10583: LD_VAR 0 5
10587: PPUSH
10588: LD_VAR 0 4
10592: PPUSH
10593: CALL 71156 0 2
// units := UnitFilter ( units , [ f_ok ] ) ;
10597: LD_ADDR_VAR 0 6
10601: PUSH
10602: LD_VAR 0 6
10606: PPUSH
10607: LD_INT 50
10609: PUSH
10610: EMPTY
10611: LIST
10612: PPUSH
10613: CALL_OW 72
10617: ST_TO_ADDR
// until not units ;
10618: LD_VAR 0 6
10622: NOT
10623: IFFALSE 10545
// end ; end_of_file
10625: LD_VAR 0 1
10629: RET
// every 0 0$01 do var i , cratesSpawned ;
10630: GO 10632
10632: DISABLE
10633: LD_INT 0
10635: PPUSH
10636: PPUSH
// begin cratesSpawned := 0 ;
10637: LD_ADDR_VAR 0 2
10641: PUSH
10642: LD_INT 0
10644: ST_TO_ADDR
// for i := 1 to 6 do
10645: LD_ADDR_VAR 0 1
10649: PUSH
10650: DOUBLE
10651: LD_INT 1
10653: DEC
10654: ST_TO_ADDR
10655: LD_INT 6
10657: PUSH
10658: FOR_TO
10659: IFFALSE 10684
// CreateCratesArea ( rand ( 2 , 5 ) , StartCratesArea , false ) ;
10661: LD_INT 2
10663: PPUSH
10664: LD_INT 5
10666: PPUSH
10667: CALL_OW 12
10671: PPUSH
10672: LD_INT 17
10674: PPUSH
10675: LD_INT 0
10677: PPUSH
10678: CALL_OW 55
10682: GO 10658
10684: POP
10685: POP
// wait ( 0 0$20 ) ;
10686: LD_INT 700
10688: PPUSH
10689: CALL_OW 67
// repeat wait ( 0 0$08 ) ;
10693: LD_INT 280
10695: PPUSH
10696: CALL_OW 67
// if cratesSpawned < 12 then
10700: LD_VAR 0 2
10704: PUSH
10705: LD_INT 12
10707: LESS
10708: IFFALSE 10760
// begin wait ( rand ( 0 0$3 , 0 0$10 ) ) ;
10710: LD_INT 105
10712: PPUSH
10713: LD_INT 350
10715: PPUSH
10716: CALL_OW 12
10720: PPUSH
10721: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10725: LD_INT 3
10727: PPUSH
10728: LD_INT 5
10730: PPUSH
10731: CALL_OW 12
10735: PPUSH
10736: LD_INT 13
10738: PPUSH
10739: LD_INT 1
10741: PPUSH
10742: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
10746: LD_ADDR_VAR 0 2
10750: PUSH
10751: LD_VAR 0 2
10755: PUSH
10756: LD_INT 1
10758: PLUS
10759: ST_TO_ADDR
// end ; if cratesSpawned >= 12 and cratesSpawned < 32 then
10760: LD_VAR 0 2
10764: PUSH
10765: LD_INT 12
10767: GREATEREQUAL
10768: PUSH
10769: LD_VAR 0 2
10773: PUSH
10774: LD_INT 32
10776: LESS
10777: AND
10778: IFFALSE 10830
// begin wait ( rand ( 0 0$12 , 0 0$20 ) ) ;
10780: LD_INT 420
10782: PPUSH
10783: LD_INT 700
10785: PPUSH
10786: CALL_OW 12
10790: PPUSH
10791: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10795: LD_INT 3
10797: PPUSH
10798: LD_INT 5
10800: PPUSH
10801: CALL_OW 12
10805: PPUSH
10806: LD_INT 13
10808: PPUSH
10809: LD_INT 1
10811: PPUSH
10812: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
10816: LD_ADDR_VAR 0 2
10820: PUSH
10821: LD_VAR 0 2
10825: PUSH
10826: LD_INT 1
10828: PLUS
10829: ST_TO_ADDR
// end ; if cratesSpawned >= 32 then
10830: LD_VAR 0 2
10834: PUSH
10835: LD_INT 32
10837: GREATEREQUAL
10838: IFFALSE 10912
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
10840: LD_INT 13
10842: PPUSH
10843: CALL_OW 435
10847: PUSH
10848: LD_INT 14
10850: LESS
10851: IFFALSE 10862
// wait ( 0 0$20 ) else
10853: LD_INT 700
10855: PPUSH
10856: CALL_OW 67
10860: GO 10877
// wait ( rand ( 0 0$50 , 1 1$30 ) ) ;
10862: LD_INT 1750
10864: PPUSH
10865: LD_INT 3150
10867: PPUSH
10868: CALL_OW 12
10872: PPUSH
10873: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , CratesArea , true ) ;
10877: LD_INT 2
10879: PPUSH
10880: LD_INT 5
10882: PPUSH
10883: CALL_OW 12
10887: PPUSH
10888: LD_INT 13
10890: PPUSH
10891: LD_INT 1
10893: PPUSH
10894: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
10898: LD_ADDR_VAR 0 2
10902: PUSH
10903: LD_VAR 0 2
10907: PUSH
10908: LD_INT 1
10910: PLUS
10911: ST_TO_ADDR
// end ; if cratesSpawned >= 120 then
10912: LD_VAR 0 2
10916: PUSH
10917: LD_INT 120
10919: GREATEREQUAL
10920: IFFALSE 10994
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
10922: LD_INT 13
10924: PPUSH
10925: CALL_OW 435
10929: PUSH
10930: LD_INT 14
10932: LESS
10933: IFFALSE 10944
// wait ( 0 0$40 ) else
10935: LD_INT 1400
10937: PPUSH
10938: CALL_OW 67
10942: GO 10959
// wait ( rand ( 1 1$10 , 1 1$50 ) ) ;
10944: LD_INT 2450
10946: PPUSH
10947: LD_INT 3850
10949: PPUSH
10950: CALL_OW 12
10954: PPUSH
10955: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
10959: LD_INT 1
10961: PPUSH
10962: LD_INT 5
10964: PPUSH
10965: CALL_OW 12
10969: PPUSH
10970: LD_INT 13
10972: PPUSH
10973: LD_INT 1
10975: PPUSH
10976: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
10980: LD_ADDR_VAR 0 2
10984: PUSH
10985: LD_VAR 0 2
10989: PUSH
10990: LD_INT 1
10992: PLUS
10993: ST_TO_ADDR
// end ; until false ;
10994: LD_INT 0
10996: IFFALSE 10693
// end ; end_of_file end_of_file
10998: PPOPN 2
11000: END
// export globalGameSaveCounter ; every 0 0$1 do
11001: GO 11003
11003: DISABLE
// begin enable ;
11004: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
11005: LD_STRING updateTimer(
11007: PUSH
11008: LD_OWVAR 1
11012: STR
11013: PUSH
11014: LD_STRING );
11016: STR
11017: PPUSH
11018: CALL_OW 559
// end ;
11022: END
// every 0 0$1 do
11023: GO 11025
11025: DISABLE
// begin globalGameSaveCounter := 0 ;
11026: LD_ADDR_EXP 46
11030: PUSH
11031: LD_INT 0
11033: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
11034: LD_STRING setGameSaveCounter(0)
11036: PPUSH
11037: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
11041: LD_STRING initStreamRollete();
11043: PPUSH
11044: CALL_OW 559
// InitStreamMode ;
11048: CALL 12374 0 0
// DefineStreamItems ( false ) ;
11052: LD_INT 0
11054: PPUSH
11055: CALL 12838 0 1
// end ;
11059: END
// export function SOS_MapStart ( ) ; begin
11060: LD_INT 0
11062: PPUSH
// if streamModeActive then
11063: LD_EXP 47
11067: IFFALSE 11076
// DefineStreamItems ( true ) ;
11069: LD_INT 1
11071: PPUSH
11072: CALL 12838 0 1
// UpdateLuaVariables ( ) ;
11076: CALL 11093 0 0
// UpdateFactoryWaypoints ( ) ;
11080: CALL 25699 0 0
// UpdateWarehouseGatheringPoints ( ) ;
11084: CALL 25956 0 0
// end ;
11088: LD_VAR 0 1
11092: RET
// function UpdateLuaVariables ( ) ; begin
11093: LD_INT 0
11095: PPUSH
// if globalGameSaveCounter then
11096: LD_EXP 46
11100: IFFALSE 11134
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
11102: LD_ADDR_EXP 46
11106: PUSH
11107: LD_EXP 46
11111: PPUSH
11112: CALL 69913 0 1
11116: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11117: LD_STRING setGameSaveCounter(
11119: PUSH
11120: LD_EXP 46
11124: STR
11125: PUSH
11126: LD_STRING )
11128: STR
11129: PPUSH
11130: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
11134: LD_STRING setGameDifficulty(
11136: PUSH
11137: LD_OWVAR 67
11141: STR
11142: PUSH
11143: LD_STRING )
11145: STR
11146: PPUSH
11147: CALL_OW 559
// end ;
11151: LD_VAR 0 1
11155: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11156: LD_INT 0
11158: PPUSH
// if p2 = stream_mode then
11159: LD_VAR 0 2
11163: PUSH
11164: LD_INT 100
11166: EQUAL
11167: IFFALSE 12170
// begin if not StreamModeActive then
11169: LD_EXP 47
11173: NOT
11174: IFFALSE 11184
// StreamModeActive := true ;
11176: LD_ADDR_EXP 47
11180: PUSH
11181: LD_INT 1
11183: ST_TO_ADDR
// if p3 = 0 then
11184: LD_VAR 0 3
11188: PUSH
11189: LD_INT 0
11191: EQUAL
11192: IFFALSE 11198
// InitStreamMode ;
11194: CALL 12374 0 0
// if p3 = 1 then
11198: LD_VAR 0 3
11202: PUSH
11203: LD_INT 1
11205: EQUAL
11206: IFFALSE 11216
// sRocket := true ;
11208: LD_ADDR_EXP 52
11212: PUSH
11213: LD_INT 1
11215: ST_TO_ADDR
// if p3 = 2 then
11216: LD_VAR 0 3
11220: PUSH
11221: LD_INT 2
11223: EQUAL
11224: IFFALSE 11234
// sSpeed := true ;
11226: LD_ADDR_EXP 51
11230: PUSH
11231: LD_INT 1
11233: ST_TO_ADDR
// if p3 = 3 then
11234: LD_VAR 0 3
11238: PUSH
11239: LD_INT 3
11241: EQUAL
11242: IFFALSE 11252
// sEngine := true ;
11244: LD_ADDR_EXP 53
11248: PUSH
11249: LD_INT 1
11251: ST_TO_ADDR
// if p3 = 4 then
11252: LD_VAR 0 3
11256: PUSH
11257: LD_INT 4
11259: EQUAL
11260: IFFALSE 11270
// sSpec := true ;
11262: LD_ADDR_EXP 50
11266: PUSH
11267: LD_INT 1
11269: ST_TO_ADDR
// if p3 = 5 then
11270: LD_VAR 0 3
11274: PUSH
11275: LD_INT 5
11277: EQUAL
11278: IFFALSE 11288
// sLevel := true ;
11280: LD_ADDR_EXP 54
11284: PUSH
11285: LD_INT 1
11287: ST_TO_ADDR
// if p3 = 6 then
11288: LD_VAR 0 3
11292: PUSH
11293: LD_INT 6
11295: EQUAL
11296: IFFALSE 11306
// sArmoury := true ;
11298: LD_ADDR_EXP 55
11302: PUSH
11303: LD_INT 1
11305: ST_TO_ADDR
// if p3 = 7 then
11306: LD_VAR 0 3
11310: PUSH
11311: LD_INT 7
11313: EQUAL
11314: IFFALSE 11324
// sRadar := true ;
11316: LD_ADDR_EXP 56
11320: PUSH
11321: LD_INT 1
11323: ST_TO_ADDR
// if p3 = 8 then
11324: LD_VAR 0 3
11328: PUSH
11329: LD_INT 8
11331: EQUAL
11332: IFFALSE 11342
// sBunker := true ;
11334: LD_ADDR_EXP 57
11338: PUSH
11339: LD_INT 1
11341: ST_TO_ADDR
// if p3 = 9 then
11342: LD_VAR 0 3
11346: PUSH
11347: LD_INT 9
11349: EQUAL
11350: IFFALSE 11360
// sHack := true ;
11352: LD_ADDR_EXP 58
11356: PUSH
11357: LD_INT 1
11359: ST_TO_ADDR
// if p3 = 10 then
11360: LD_VAR 0 3
11364: PUSH
11365: LD_INT 10
11367: EQUAL
11368: IFFALSE 11378
// sFire := true ;
11370: LD_ADDR_EXP 59
11374: PUSH
11375: LD_INT 1
11377: ST_TO_ADDR
// if p3 = 11 then
11378: LD_VAR 0 3
11382: PUSH
11383: LD_INT 11
11385: EQUAL
11386: IFFALSE 11396
// sRefresh := true ;
11388: LD_ADDR_EXP 60
11392: PUSH
11393: LD_INT 1
11395: ST_TO_ADDR
// if p3 = 12 then
11396: LD_VAR 0 3
11400: PUSH
11401: LD_INT 12
11403: EQUAL
11404: IFFALSE 11414
// sExp := true ;
11406: LD_ADDR_EXP 61
11410: PUSH
11411: LD_INT 1
11413: ST_TO_ADDR
// if p3 = 13 then
11414: LD_VAR 0 3
11418: PUSH
11419: LD_INT 13
11421: EQUAL
11422: IFFALSE 11432
// sDepot := true ;
11424: LD_ADDR_EXP 62
11428: PUSH
11429: LD_INT 1
11431: ST_TO_ADDR
// if p3 = 14 then
11432: LD_VAR 0 3
11436: PUSH
11437: LD_INT 14
11439: EQUAL
11440: IFFALSE 11450
// sFlag := true ;
11442: LD_ADDR_EXP 63
11446: PUSH
11447: LD_INT 1
11449: ST_TO_ADDR
// if p3 = 15 then
11450: LD_VAR 0 3
11454: PUSH
11455: LD_INT 15
11457: EQUAL
11458: IFFALSE 11468
// sKamikadze := true ;
11460: LD_ADDR_EXP 71
11464: PUSH
11465: LD_INT 1
11467: ST_TO_ADDR
// if p3 = 16 then
11468: LD_VAR 0 3
11472: PUSH
11473: LD_INT 16
11475: EQUAL
11476: IFFALSE 11486
// sTroll := true ;
11478: LD_ADDR_EXP 72
11482: PUSH
11483: LD_INT 1
11485: ST_TO_ADDR
// if p3 = 17 then
11486: LD_VAR 0 3
11490: PUSH
11491: LD_INT 17
11493: EQUAL
11494: IFFALSE 11504
// sSlow := true ;
11496: LD_ADDR_EXP 73
11500: PUSH
11501: LD_INT 1
11503: ST_TO_ADDR
// if p3 = 18 then
11504: LD_VAR 0 3
11508: PUSH
11509: LD_INT 18
11511: EQUAL
11512: IFFALSE 11522
// sLack := true ;
11514: LD_ADDR_EXP 74
11518: PUSH
11519: LD_INT 1
11521: ST_TO_ADDR
// if p3 = 19 then
11522: LD_VAR 0 3
11526: PUSH
11527: LD_INT 19
11529: EQUAL
11530: IFFALSE 11540
// sTank := true ;
11532: LD_ADDR_EXP 76
11536: PUSH
11537: LD_INT 1
11539: ST_TO_ADDR
// if p3 = 20 then
11540: LD_VAR 0 3
11544: PUSH
11545: LD_INT 20
11547: EQUAL
11548: IFFALSE 11558
// sRemote := true ;
11550: LD_ADDR_EXP 77
11554: PUSH
11555: LD_INT 1
11557: ST_TO_ADDR
// if p3 = 21 then
11558: LD_VAR 0 3
11562: PUSH
11563: LD_INT 21
11565: EQUAL
11566: IFFALSE 11576
// sPowell := true ;
11568: LD_ADDR_EXP 78
11572: PUSH
11573: LD_INT 1
11575: ST_TO_ADDR
// if p3 = 22 then
11576: LD_VAR 0 3
11580: PUSH
11581: LD_INT 22
11583: EQUAL
11584: IFFALSE 11594
// sTeleport := true ;
11586: LD_ADDR_EXP 81
11590: PUSH
11591: LD_INT 1
11593: ST_TO_ADDR
// if p3 = 23 then
11594: LD_VAR 0 3
11598: PUSH
11599: LD_INT 23
11601: EQUAL
11602: IFFALSE 11612
// sOilTower := true ;
11604: LD_ADDR_EXP 83
11608: PUSH
11609: LD_INT 1
11611: ST_TO_ADDR
// if p3 = 24 then
11612: LD_VAR 0 3
11616: PUSH
11617: LD_INT 24
11619: EQUAL
11620: IFFALSE 11630
// sShovel := true ;
11622: LD_ADDR_EXP 84
11626: PUSH
11627: LD_INT 1
11629: ST_TO_ADDR
// if p3 = 25 then
11630: LD_VAR 0 3
11634: PUSH
11635: LD_INT 25
11637: EQUAL
11638: IFFALSE 11648
// sSheik := true ;
11640: LD_ADDR_EXP 85
11644: PUSH
11645: LD_INT 1
11647: ST_TO_ADDR
// if p3 = 26 then
11648: LD_VAR 0 3
11652: PUSH
11653: LD_INT 26
11655: EQUAL
11656: IFFALSE 11666
// sEarthquake := true ;
11658: LD_ADDR_EXP 87
11662: PUSH
11663: LD_INT 1
11665: ST_TO_ADDR
// if p3 = 27 then
11666: LD_VAR 0 3
11670: PUSH
11671: LD_INT 27
11673: EQUAL
11674: IFFALSE 11684
// sAI := true ;
11676: LD_ADDR_EXP 88
11680: PUSH
11681: LD_INT 1
11683: ST_TO_ADDR
// if p3 = 28 then
11684: LD_VAR 0 3
11688: PUSH
11689: LD_INT 28
11691: EQUAL
11692: IFFALSE 11702
// sCargo := true ;
11694: LD_ADDR_EXP 91
11698: PUSH
11699: LD_INT 1
11701: ST_TO_ADDR
// if p3 = 29 then
11702: LD_VAR 0 3
11706: PUSH
11707: LD_INT 29
11709: EQUAL
11710: IFFALSE 11720
// sDLaser := true ;
11712: LD_ADDR_EXP 92
11716: PUSH
11717: LD_INT 1
11719: ST_TO_ADDR
// if p3 = 30 then
11720: LD_VAR 0 3
11724: PUSH
11725: LD_INT 30
11727: EQUAL
11728: IFFALSE 11738
// sExchange := true ;
11730: LD_ADDR_EXP 93
11734: PUSH
11735: LD_INT 1
11737: ST_TO_ADDR
// if p3 = 31 then
11738: LD_VAR 0 3
11742: PUSH
11743: LD_INT 31
11745: EQUAL
11746: IFFALSE 11756
// sFac := true ;
11748: LD_ADDR_EXP 94
11752: PUSH
11753: LD_INT 1
11755: ST_TO_ADDR
// if p3 = 32 then
11756: LD_VAR 0 3
11760: PUSH
11761: LD_INT 32
11763: EQUAL
11764: IFFALSE 11774
// sPower := true ;
11766: LD_ADDR_EXP 95
11770: PUSH
11771: LD_INT 1
11773: ST_TO_ADDR
// if p3 = 33 then
11774: LD_VAR 0 3
11778: PUSH
11779: LD_INT 33
11781: EQUAL
11782: IFFALSE 11792
// sRandom := true ;
11784: LD_ADDR_EXP 96
11788: PUSH
11789: LD_INT 1
11791: ST_TO_ADDR
// if p3 = 34 then
11792: LD_VAR 0 3
11796: PUSH
11797: LD_INT 34
11799: EQUAL
11800: IFFALSE 11810
// sShield := true ;
11802: LD_ADDR_EXP 97
11806: PUSH
11807: LD_INT 1
11809: ST_TO_ADDR
// if p3 = 35 then
11810: LD_VAR 0 3
11814: PUSH
11815: LD_INT 35
11817: EQUAL
11818: IFFALSE 11828
// sTime := true ;
11820: LD_ADDR_EXP 98
11824: PUSH
11825: LD_INT 1
11827: ST_TO_ADDR
// if p3 = 36 then
11828: LD_VAR 0 3
11832: PUSH
11833: LD_INT 36
11835: EQUAL
11836: IFFALSE 11846
// sTools := true ;
11838: LD_ADDR_EXP 99
11842: PUSH
11843: LD_INT 1
11845: ST_TO_ADDR
// if p3 = 101 then
11846: LD_VAR 0 3
11850: PUSH
11851: LD_INT 101
11853: EQUAL
11854: IFFALSE 11864
// sSold := true ;
11856: LD_ADDR_EXP 64
11860: PUSH
11861: LD_INT 1
11863: ST_TO_ADDR
// if p3 = 102 then
11864: LD_VAR 0 3
11868: PUSH
11869: LD_INT 102
11871: EQUAL
11872: IFFALSE 11882
// sDiff := true ;
11874: LD_ADDR_EXP 65
11878: PUSH
11879: LD_INT 1
11881: ST_TO_ADDR
// if p3 = 103 then
11882: LD_VAR 0 3
11886: PUSH
11887: LD_INT 103
11889: EQUAL
11890: IFFALSE 11900
// sFog := true ;
11892: LD_ADDR_EXP 68
11896: PUSH
11897: LD_INT 1
11899: ST_TO_ADDR
// if p3 = 104 then
11900: LD_VAR 0 3
11904: PUSH
11905: LD_INT 104
11907: EQUAL
11908: IFFALSE 11918
// sReset := true ;
11910: LD_ADDR_EXP 69
11914: PUSH
11915: LD_INT 1
11917: ST_TO_ADDR
// if p3 = 105 then
11918: LD_VAR 0 3
11922: PUSH
11923: LD_INT 105
11925: EQUAL
11926: IFFALSE 11936
// sSun := true ;
11928: LD_ADDR_EXP 70
11932: PUSH
11933: LD_INT 1
11935: ST_TO_ADDR
// if p3 = 106 then
11936: LD_VAR 0 3
11940: PUSH
11941: LD_INT 106
11943: EQUAL
11944: IFFALSE 11954
// sTiger := true ;
11946: LD_ADDR_EXP 66
11950: PUSH
11951: LD_INT 1
11953: ST_TO_ADDR
// if p3 = 107 then
11954: LD_VAR 0 3
11958: PUSH
11959: LD_INT 107
11961: EQUAL
11962: IFFALSE 11972
// sBomb := true ;
11964: LD_ADDR_EXP 67
11968: PUSH
11969: LD_INT 1
11971: ST_TO_ADDR
// if p3 = 108 then
11972: LD_VAR 0 3
11976: PUSH
11977: LD_INT 108
11979: EQUAL
11980: IFFALSE 11990
// sWound := true ;
11982: LD_ADDR_EXP 75
11986: PUSH
11987: LD_INT 1
11989: ST_TO_ADDR
// if p3 = 109 then
11990: LD_VAR 0 3
11994: PUSH
11995: LD_INT 109
11997: EQUAL
11998: IFFALSE 12008
// sBetray := true ;
12000: LD_ADDR_EXP 79
12004: PUSH
12005: LD_INT 1
12007: ST_TO_ADDR
// if p3 = 110 then
12008: LD_VAR 0 3
12012: PUSH
12013: LD_INT 110
12015: EQUAL
12016: IFFALSE 12026
// sContamin := true ;
12018: LD_ADDR_EXP 80
12022: PUSH
12023: LD_INT 1
12025: ST_TO_ADDR
// if p3 = 111 then
12026: LD_VAR 0 3
12030: PUSH
12031: LD_INT 111
12033: EQUAL
12034: IFFALSE 12044
// sOil := true ;
12036: LD_ADDR_EXP 82
12040: PUSH
12041: LD_INT 1
12043: ST_TO_ADDR
// if p3 = 112 then
12044: LD_VAR 0 3
12048: PUSH
12049: LD_INT 112
12051: EQUAL
12052: IFFALSE 12062
// sStu := true ;
12054: LD_ADDR_EXP 86
12058: PUSH
12059: LD_INT 1
12061: ST_TO_ADDR
// if p3 = 113 then
12062: LD_VAR 0 3
12066: PUSH
12067: LD_INT 113
12069: EQUAL
12070: IFFALSE 12080
// sBazooka := true ;
12072: LD_ADDR_EXP 89
12076: PUSH
12077: LD_INT 1
12079: ST_TO_ADDR
// if p3 = 114 then
12080: LD_VAR 0 3
12084: PUSH
12085: LD_INT 114
12087: EQUAL
12088: IFFALSE 12098
// sMortar := true ;
12090: LD_ADDR_EXP 90
12094: PUSH
12095: LD_INT 1
12097: ST_TO_ADDR
// if p3 = 115 then
12098: LD_VAR 0 3
12102: PUSH
12103: LD_INT 115
12105: EQUAL
12106: IFFALSE 12116
// sRanger := true ;
12108: LD_ADDR_EXP 100
12112: PUSH
12113: LD_INT 1
12115: ST_TO_ADDR
// if p3 = 116 then
12116: LD_VAR 0 3
12120: PUSH
12121: LD_INT 116
12123: EQUAL
12124: IFFALSE 12134
// sComputer := true ;
12126: LD_ADDR_EXP 101
12130: PUSH
12131: LD_INT 1
12133: ST_TO_ADDR
// if p3 = 117 then
12134: LD_VAR 0 3
12138: PUSH
12139: LD_INT 117
12141: EQUAL
12142: IFFALSE 12152
// s30 := true ;
12144: LD_ADDR_EXP 102
12148: PUSH
12149: LD_INT 1
12151: ST_TO_ADDR
// if p3 = 118 then
12152: LD_VAR 0 3
12156: PUSH
12157: LD_INT 118
12159: EQUAL
12160: IFFALSE 12170
// s60 := true ;
12162: LD_ADDR_EXP 103
12166: PUSH
12167: LD_INT 1
12169: ST_TO_ADDR
// end ; if p2 = hack_mode then
12170: LD_VAR 0 2
12174: PUSH
12175: LD_INT 101
12177: EQUAL
12178: IFFALSE 12306
// begin case p3 of 1 :
12180: LD_VAR 0 3
12184: PUSH
12185: LD_INT 1
12187: DOUBLE
12188: EQUAL
12189: IFTRUE 12193
12191: GO 12200
12193: POP
// hHackUnlimitedResources ; 2 :
12194: CALL 24445 0 0
12198: GO 12306
12200: LD_INT 2
12202: DOUBLE
12203: EQUAL
12204: IFTRUE 12208
12206: GO 12215
12208: POP
// hHackSetLevel10 ; 3 :
12209: CALL 24578 0 0
12213: GO 12306
12215: LD_INT 3
12217: DOUBLE
12218: EQUAL
12219: IFTRUE 12223
12221: GO 12230
12223: POP
// hHackSetLevel10YourUnits ; 4 :
12224: CALL 24663 0 0
12228: GO 12306
12230: LD_INT 4
12232: DOUBLE
12233: EQUAL
12234: IFTRUE 12238
12236: GO 12245
12238: POP
// hHackInvincible ; 5 :
12239: CALL 25111 0 0
12243: GO 12306
12245: LD_INT 5
12247: DOUBLE
12248: EQUAL
12249: IFTRUE 12253
12251: GO 12260
12253: POP
// hHackInvisible ; 6 :
12254: CALL 25222 0 0
12258: GO 12306
12260: LD_INT 6
12262: DOUBLE
12263: EQUAL
12264: IFTRUE 12268
12266: GO 12275
12268: POP
// hHackChangeYourSide ; 7 :
12269: CALL 25279 0 0
12273: GO 12306
12275: LD_INT 7
12277: DOUBLE
12278: EQUAL
12279: IFTRUE 12283
12281: GO 12290
12283: POP
// hHackChangeUnitSide ; 8 :
12284: CALL 25321 0 0
12288: GO 12306
12290: LD_INT 8
12292: DOUBLE
12293: EQUAL
12294: IFTRUE 12298
12296: GO 12305
12298: POP
// hHackFog ; end ;
12299: CALL 25422 0 0
12303: GO 12306
12305: POP
// end ; if p2 = game_save_mode then
12306: LD_VAR 0 2
12310: PUSH
12311: LD_INT 102
12313: EQUAL
12314: IFFALSE 12369
// begin if p3 = 1 then
12316: LD_VAR 0 3
12320: PUSH
12321: LD_INT 1
12323: EQUAL
12324: IFFALSE 12336
// globalGameSaveCounter := p4 ;
12326: LD_ADDR_EXP 46
12330: PUSH
12331: LD_VAR 0 4
12335: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
12336: LD_VAR 0 3
12340: PUSH
12341: LD_INT 2
12343: EQUAL
12344: PUSH
12345: LD_EXP 46
12349: AND
12350: IFFALSE 12369
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12352: LD_STRING setGameSaveCounter(
12354: PUSH
12355: LD_EXP 46
12359: STR
12360: PUSH
12361: LD_STRING )
12363: STR
12364: PPUSH
12365: CALL_OW 559
// end ; end ;
12369: LD_VAR 0 7
12373: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
12374: LD_INT 0
12376: PPUSH
// streamModeActive := false ;
12377: LD_ADDR_EXP 47
12381: PUSH
12382: LD_INT 0
12384: ST_TO_ADDR
// normalCounter := 36 ;
12385: LD_ADDR_EXP 48
12389: PUSH
12390: LD_INT 36
12392: ST_TO_ADDR
// hardcoreCounter := 18 ;
12393: LD_ADDR_EXP 49
12397: PUSH
12398: LD_INT 18
12400: ST_TO_ADDR
// sRocket := false ;
12401: LD_ADDR_EXP 52
12405: PUSH
12406: LD_INT 0
12408: ST_TO_ADDR
// sSpeed := false ;
12409: LD_ADDR_EXP 51
12413: PUSH
12414: LD_INT 0
12416: ST_TO_ADDR
// sEngine := false ;
12417: LD_ADDR_EXP 53
12421: PUSH
12422: LD_INT 0
12424: ST_TO_ADDR
// sSpec := false ;
12425: LD_ADDR_EXP 50
12429: PUSH
12430: LD_INT 0
12432: ST_TO_ADDR
// sLevel := false ;
12433: LD_ADDR_EXP 54
12437: PUSH
12438: LD_INT 0
12440: ST_TO_ADDR
// sArmoury := false ;
12441: LD_ADDR_EXP 55
12445: PUSH
12446: LD_INT 0
12448: ST_TO_ADDR
// sRadar := false ;
12449: LD_ADDR_EXP 56
12453: PUSH
12454: LD_INT 0
12456: ST_TO_ADDR
// sBunker := false ;
12457: LD_ADDR_EXP 57
12461: PUSH
12462: LD_INT 0
12464: ST_TO_ADDR
// sHack := false ;
12465: LD_ADDR_EXP 58
12469: PUSH
12470: LD_INT 0
12472: ST_TO_ADDR
// sFire := false ;
12473: LD_ADDR_EXP 59
12477: PUSH
12478: LD_INT 0
12480: ST_TO_ADDR
// sRefresh := false ;
12481: LD_ADDR_EXP 60
12485: PUSH
12486: LD_INT 0
12488: ST_TO_ADDR
// sExp := false ;
12489: LD_ADDR_EXP 61
12493: PUSH
12494: LD_INT 0
12496: ST_TO_ADDR
// sDepot := false ;
12497: LD_ADDR_EXP 62
12501: PUSH
12502: LD_INT 0
12504: ST_TO_ADDR
// sFlag := false ;
12505: LD_ADDR_EXP 63
12509: PUSH
12510: LD_INT 0
12512: ST_TO_ADDR
// sKamikadze := false ;
12513: LD_ADDR_EXP 71
12517: PUSH
12518: LD_INT 0
12520: ST_TO_ADDR
// sTroll := false ;
12521: LD_ADDR_EXP 72
12525: PUSH
12526: LD_INT 0
12528: ST_TO_ADDR
// sSlow := false ;
12529: LD_ADDR_EXP 73
12533: PUSH
12534: LD_INT 0
12536: ST_TO_ADDR
// sLack := false ;
12537: LD_ADDR_EXP 74
12541: PUSH
12542: LD_INT 0
12544: ST_TO_ADDR
// sTank := false ;
12545: LD_ADDR_EXP 76
12549: PUSH
12550: LD_INT 0
12552: ST_TO_ADDR
// sRemote := false ;
12553: LD_ADDR_EXP 77
12557: PUSH
12558: LD_INT 0
12560: ST_TO_ADDR
// sPowell := false ;
12561: LD_ADDR_EXP 78
12565: PUSH
12566: LD_INT 0
12568: ST_TO_ADDR
// sTeleport := false ;
12569: LD_ADDR_EXP 81
12573: PUSH
12574: LD_INT 0
12576: ST_TO_ADDR
// sOilTower := false ;
12577: LD_ADDR_EXP 83
12581: PUSH
12582: LD_INT 0
12584: ST_TO_ADDR
// sShovel := false ;
12585: LD_ADDR_EXP 84
12589: PUSH
12590: LD_INT 0
12592: ST_TO_ADDR
// sSheik := false ;
12593: LD_ADDR_EXP 85
12597: PUSH
12598: LD_INT 0
12600: ST_TO_ADDR
// sEarthquake := false ;
12601: LD_ADDR_EXP 87
12605: PUSH
12606: LD_INT 0
12608: ST_TO_ADDR
// sAI := false ;
12609: LD_ADDR_EXP 88
12613: PUSH
12614: LD_INT 0
12616: ST_TO_ADDR
// sCargo := false ;
12617: LD_ADDR_EXP 91
12621: PUSH
12622: LD_INT 0
12624: ST_TO_ADDR
// sDLaser := false ;
12625: LD_ADDR_EXP 92
12629: PUSH
12630: LD_INT 0
12632: ST_TO_ADDR
// sExchange := false ;
12633: LD_ADDR_EXP 93
12637: PUSH
12638: LD_INT 0
12640: ST_TO_ADDR
// sFac := false ;
12641: LD_ADDR_EXP 94
12645: PUSH
12646: LD_INT 0
12648: ST_TO_ADDR
// sPower := false ;
12649: LD_ADDR_EXP 95
12653: PUSH
12654: LD_INT 0
12656: ST_TO_ADDR
// sRandom := false ;
12657: LD_ADDR_EXP 96
12661: PUSH
12662: LD_INT 0
12664: ST_TO_ADDR
// sShield := false ;
12665: LD_ADDR_EXP 97
12669: PUSH
12670: LD_INT 0
12672: ST_TO_ADDR
// sTime := false ;
12673: LD_ADDR_EXP 98
12677: PUSH
12678: LD_INT 0
12680: ST_TO_ADDR
// sTools := false ;
12681: LD_ADDR_EXP 99
12685: PUSH
12686: LD_INT 0
12688: ST_TO_ADDR
// sSold := false ;
12689: LD_ADDR_EXP 64
12693: PUSH
12694: LD_INT 0
12696: ST_TO_ADDR
// sDiff := false ;
12697: LD_ADDR_EXP 65
12701: PUSH
12702: LD_INT 0
12704: ST_TO_ADDR
// sFog := false ;
12705: LD_ADDR_EXP 68
12709: PUSH
12710: LD_INT 0
12712: ST_TO_ADDR
// sReset := false ;
12713: LD_ADDR_EXP 69
12717: PUSH
12718: LD_INT 0
12720: ST_TO_ADDR
// sSun := false ;
12721: LD_ADDR_EXP 70
12725: PUSH
12726: LD_INT 0
12728: ST_TO_ADDR
// sTiger := false ;
12729: LD_ADDR_EXP 66
12733: PUSH
12734: LD_INT 0
12736: ST_TO_ADDR
// sBomb := false ;
12737: LD_ADDR_EXP 67
12741: PUSH
12742: LD_INT 0
12744: ST_TO_ADDR
// sWound := false ;
12745: LD_ADDR_EXP 75
12749: PUSH
12750: LD_INT 0
12752: ST_TO_ADDR
// sBetray := false ;
12753: LD_ADDR_EXP 79
12757: PUSH
12758: LD_INT 0
12760: ST_TO_ADDR
// sContamin := false ;
12761: LD_ADDR_EXP 80
12765: PUSH
12766: LD_INT 0
12768: ST_TO_ADDR
// sOil := false ;
12769: LD_ADDR_EXP 82
12773: PUSH
12774: LD_INT 0
12776: ST_TO_ADDR
// sStu := false ;
12777: LD_ADDR_EXP 86
12781: PUSH
12782: LD_INT 0
12784: ST_TO_ADDR
// sBazooka := false ;
12785: LD_ADDR_EXP 89
12789: PUSH
12790: LD_INT 0
12792: ST_TO_ADDR
// sMortar := false ;
12793: LD_ADDR_EXP 90
12797: PUSH
12798: LD_INT 0
12800: ST_TO_ADDR
// sRanger := false ;
12801: LD_ADDR_EXP 100
12805: PUSH
12806: LD_INT 0
12808: ST_TO_ADDR
// sComputer := false ;
12809: LD_ADDR_EXP 101
12813: PUSH
12814: LD_INT 0
12816: ST_TO_ADDR
// s30 := false ;
12817: LD_ADDR_EXP 102
12821: PUSH
12822: LD_INT 0
12824: ST_TO_ADDR
// s60 := false ;
12825: LD_ADDR_EXP 103
12829: PUSH
12830: LD_INT 0
12832: ST_TO_ADDR
// end ;
12833: LD_VAR 0 1
12837: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
12838: LD_INT 0
12840: PPUSH
12841: PPUSH
12842: PPUSH
12843: PPUSH
12844: PPUSH
12845: PPUSH
12846: PPUSH
// result := [ ] ;
12847: LD_ADDR_VAR 0 2
12851: PUSH
12852: EMPTY
12853: ST_TO_ADDR
// if campaign_id = 1 then
12854: LD_OWVAR 69
12858: PUSH
12859: LD_INT 1
12861: EQUAL
12862: IFFALSE 16028
// begin case mission_number of 1 :
12864: LD_OWVAR 70
12868: PUSH
12869: LD_INT 1
12871: DOUBLE
12872: EQUAL
12873: IFTRUE 12877
12875: GO 12953
12877: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12878: LD_ADDR_VAR 0 2
12882: PUSH
12883: LD_INT 2
12885: PUSH
12886: LD_INT 4
12888: PUSH
12889: LD_INT 11
12891: PUSH
12892: LD_INT 12
12894: PUSH
12895: LD_INT 15
12897: PUSH
12898: LD_INT 16
12900: PUSH
12901: LD_INT 22
12903: PUSH
12904: LD_INT 23
12906: PUSH
12907: LD_INT 26
12909: PUSH
12910: EMPTY
12911: LIST
12912: LIST
12913: LIST
12914: LIST
12915: LIST
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: PUSH
12921: LD_INT 101
12923: PUSH
12924: LD_INT 102
12926: PUSH
12927: LD_INT 106
12929: PUSH
12930: LD_INT 116
12932: PUSH
12933: LD_INT 117
12935: PUSH
12936: LD_INT 118
12938: PUSH
12939: EMPTY
12940: LIST
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: ST_TO_ADDR
12951: GO 16026
12953: LD_INT 2
12955: DOUBLE
12956: EQUAL
12957: IFTRUE 12961
12959: GO 13045
12961: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
12962: LD_ADDR_VAR 0 2
12966: PUSH
12967: LD_INT 2
12969: PUSH
12970: LD_INT 4
12972: PUSH
12973: LD_INT 11
12975: PUSH
12976: LD_INT 12
12978: PUSH
12979: LD_INT 15
12981: PUSH
12982: LD_INT 16
12984: PUSH
12985: LD_INT 22
12987: PUSH
12988: LD_INT 23
12990: PUSH
12991: LD_INT 26
12993: PUSH
12994: EMPTY
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: PUSH
13005: LD_INT 101
13007: PUSH
13008: LD_INT 102
13010: PUSH
13011: LD_INT 105
13013: PUSH
13014: LD_INT 106
13016: PUSH
13017: LD_INT 108
13019: PUSH
13020: LD_INT 116
13022: PUSH
13023: LD_INT 117
13025: PUSH
13026: LD_INT 118
13028: PUSH
13029: EMPTY
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: PUSH
13039: EMPTY
13040: LIST
13041: LIST
13042: ST_TO_ADDR
13043: GO 16026
13045: LD_INT 3
13047: DOUBLE
13048: EQUAL
13049: IFTRUE 13053
13051: GO 13141
13053: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13054: LD_ADDR_VAR 0 2
13058: PUSH
13059: LD_INT 2
13061: PUSH
13062: LD_INT 4
13064: PUSH
13065: LD_INT 5
13067: PUSH
13068: LD_INT 11
13070: PUSH
13071: LD_INT 12
13073: PUSH
13074: LD_INT 15
13076: PUSH
13077: LD_INT 16
13079: PUSH
13080: LD_INT 22
13082: PUSH
13083: LD_INT 26
13085: PUSH
13086: LD_INT 36
13088: PUSH
13089: EMPTY
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: PUSH
13101: LD_INT 101
13103: PUSH
13104: LD_INT 102
13106: PUSH
13107: LD_INT 105
13109: PUSH
13110: LD_INT 106
13112: PUSH
13113: LD_INT 108
13115: PUSH
13116: LD_INT 116
13118: PUSH
13119: LD_INT 117
13121: PUSH
13122: LD_INT 118
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: LIST
13134: PUSH
13135: EMPTY
13136: LIST
13137: LIST
13138: ST_TO_ADDR
13139: GO 16026
13141: LD_INT 4
13143: DOUBLE
13144: EQUAL
13145: IFTRUE 13149
13147: GO 13245
13149: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13150: LD_ADDR_VAR 0 2
13154: PUSH
13155: LD_INT 2
13157: PUSH
13158: LD_INT 4
13160: PUSH
13161: LD_INT 5
13163: PUSH
13164: LD_INT 8
13166: PUSH
13167: LD_INT 11
13169: PUSH
13170: LD_INT 12
13172: PUSH
13173: LD_INT 15
13175: PUSH
13176: LD_INT 16
13178: PUSH
13179: LD_INT 22
13181: PUSH
13182: LD_INT 23
13184: PUSH
13185: LD_INT 26
13187: PUSH
13188: LD_INT 36
13190: PUSH
13191: EMPTY
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: PUSH
13205: LD_INT 101
13207: PUSH
13208: LD_INT 102
13210: PUSH
13211: LD_INT 105
13213: PUSH
13214: LD_INT 106
13216: PUSH
13217: LD_INT 108
13219: PUSH
13220: LD_INT 116
13222: PUSH
13223: LD_INT 117
13225: PUSH
13226: LD_INT 118
13228: PUSH
13229: EMPTY
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: PUSH
13239: EMPTY
13240: LIST
13241: LIST
13242: ST_TO_ADDR
13243: GO 16026
13245: LD_INT 5
13247: DOUBLE
13248: EQUAL
13249: IFTRUE 13253
13251: GO 13365
13253: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13254: LD_ADDR_VAR 0 2
13258: PUSH
13259: LD_INT 2
13261: PUSH
13262: LD_INT 4
13264: PUSH
13265: LD_INT 5
13267: PUSH
13268: LD_INT 6
13270: PUSH
13271: LD_INT 8
13273: PUSH
13274: LD_INT 11
13276: PUSH
13277: LD_INT 12
13279: PUSH
13280: LD_INT 15
13282: PUSH
13283: LD_INT 16
13285: PUSH
13286: LD_INT 22
13288: PUSH
13289: LD_INT 23
13291: PUSH
13292: LD_INT 25
13294: PUSH
13295: LD_INT 26
13297: PUSH
13298: LD_INT 36
13300: PUSH
13301: EMPTY
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: LIST
13316: PUSH
13317: LD_INT 101
13319: PUSH
13320: LD_INT 102
13322: PUSH
13323: LD_INT 105
13325: PUSH
13326: LD_INT 106
13328: PUSH
13329: LD_INT 108
13331: PUSH
13332: LD_INT 109
13334: PUSH
13335: LD_INT 112
13337: PUSH
13338: LD_INT 116
13340: PUSH
13341: LD_INT 117
13343: PUSH
13344: LD_INT 118
13346: PUSH
13347: EMPTY
13348: LIST
13349: LIST
13350: LIST
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: PUSH
13359: EMPTY
13360: LIST
13361: LIST
13362: ST_TO_ADDR
13363: GO 16026
13365: LD_INT 6
13367: DOUBLE
13368: EQUAL
13369: IFTRUE 13373
13371: GO 13505
13373: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13374: LD_ADDR_VAR 0 2
13378: PUSH
13379: LD_INT 2
13381: PUSH
13382: LD_INT 4
13384: PUSH
13385: LD_INT 5
13387: PUSH
13388: LD_INT 6
13390: PUSH
13391: LD_INT 8
13393: PUSH
13394: LD_INT 11
13396: PUSH
13397: LD_INT 12
13399: PUSH
13400: LD_INT 15
13402: PUSH
13403: LD_INT 16
13405: PUSH
13406: LD_INT 20
13408: PUSH
13409: LD_INT 21
13411: PUSH
13412: LD_INT 22
13414: PUSH
13415: LD_INT 23
13417: PUSH
13418: LD_INT 25
13420: PUSH
13421: LD_INT 26
13423: PUSH
13424: LD_INT 30
13426: PUSH
13427: LD_INT 31
13429: PUSH
13430: LD_INT 32
13432: PUSH
13433: LD_INT 36
13435: PUSH
13436: EMPTY
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: PUSH
13457: LD_INT 101
13459: PUSH
13460: LD_INT 102
13462: PUSH
13463: LD_INT 105
13465: PUSH
13466: LD_INT 106
13468: PUSH
13469: LD_INT 108
13471: PUSH
13472: LD_INT 109
13474: PUSH
13475: LD_INT 112
13477: PUSH
13478: LD_INT 116
13480: PUSH
13481: LD_INT 117
13483: PUSH
13484: LD_INT 118
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: LIST
13491: LIST
13492: LIST
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: PUSH
13499: EMPTY
13500: LIST
13501: LIST
13502: ST_TO_ADDR
13503: GO 16026
13505: LD_INT 7
13507: DOUBLE
13508: EQUAL
13509: IFTRUE 13513
13511: GO 13625
13513: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13514: LD_ADDR_VAR 0 2
13518: PUSH
13519: LD_INT 2
13521: PUSH
13522: LD_INT 4
13524: PUSH
13525: LD_INT 5
13527: PUSH
13528: LD_INT 7
13530: PUSH
13531: LD_INT 11
13533: PUSH
13534: LD_INT 12
13536: PUSH
13537: LD_INT 15
13539: PUSH
13540: LD_INT 16
13542: PUSH
13543: LD_INT 20
13545: PUSH
13546: LD_INT 21
13548: PUSH
13549: LD_INT 22
13551: PUSH
13552: LD_INT 23
13554: PUSH
13555: LD_INT 25
13557: PUSH
13558: LD_INT 26
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: LIST
13565: LIST
13566: LIST
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: PUSH
13577: LD_INT 101
13579: PUSH
13580: LD_INT 102
13582: PUSH
13583: LD_INT 103
13585: PUSH
13586: LD_INT 105
13588: PUSH
13589: LD_INT 106
13591: PUSH
13592: LD_INT 108
13594: PUSH
13595: LD_INT 112
13597: PUSH
13598: LD_INT 116
13600: PUSH
13601: LD_INT 117
13603: PUSH
13604: LD_INT 118
13606: PUSH
13607: EMPTY
13608: LIST
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: LIST
13616: LIST
13617: LIST
13618: PUSH
13619: EMPTY
13620: LIST
13621: LIST
13622: ST_TO_ADDR
13623: GO 16026
13625: LD_INT 8
13627: DOUBLE
13628: EQUAL
13629: IFTRUE 13633
13631: GO 13773
13633: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13634: LD_ADDR_VAR 0 2
13638: PUSH
13639: LD_INT 2
13641: PUSH
13642: LD_INT 4
13644: PUSH
13645: LD_INT 5
13647: PUSH
13648: LD_INT 6
13650: PUSH
13651: LD_INT 7
13653: PUSH
13654: LD_INT 8
13656: PUSH
13657: LD_INT 11
13659: PUSH
13660: LD_INT 12
13662: PUSH
13663: LD_INT 15
13665: PUSH
13666: LD_INT 16
13668: PUSH
13669: LD_INT 20
13671: PUSH
13672: LD_INT 21
13674: PUSH
13675: LD_INT 22
13677: PUSH
13678: LD_INT 23
13680: PUSH
13681: LD_INT 25
13683: PUSH
13684: LD_INT 26
13686: PUSH
13687: LD_INT 30
13689: PUSH
13690: LD_INT 31
13692: PUSH
13693: LD_INT 32
13695: PUSH
13696: LD_INT 36
13698: PUSH
13699: EMPTY
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: PUSH
13721: LD_INT 101
13723: PUSH
13724: LD_INT 102
13726: PUSH
13727: LD_INT 103
13729: PUSH
13730: LD_INT 105
13732: PUSH
13733: LD_INT 106
13735: PUSH
13736: LD_INT 108
13738: PUSH
13739: LD_INT 109
13741: PUSH
13742: LD_INT 112
13744: PUSH
13745: LD_INT 116
13747: PUSH
13748: LD_INT 117
13750: PUSH
13751: LD_INT 118
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: PUSH
13767: EMPTY
13768: LIST
13769: LIST
13770: ST_TO_ADDR
13771: GO 16026
13773: LD_INT 9
13775: DOUBLE
13776: EQUAL
13777: IFTRUE 13781
13779: GO 13929
13781: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13782: LD_ADDR_VAR 0 2
13786: PUSH
13787: LD_INT 2
13789: PUSH
13790: LD_INT 4
13792: PUSH
13793: LD_INT 5
13795: PUSH
13796: LD_INT 6
13798: PUSH
13799: LD_INT 7
13801: PUSH
13802: LD_INT 8
13804: PUSH
13805: LD_INT 11
13807: PUSH
13808: LD_INT 12
13810: PUSH
13811: LD_INT 15
13813: PUSH
13814: LD_INT 16
13816: PUSH
13817: LD_INT 20
13819: PUSH
13820: LD_INT 21
13822: PUSH
13823: LD_INT 22
13825: PUSH
13826: LD_INT 23
13828: PUSH
13829: LD_INT 25
13831: PUSH
13832: LD_INT 26
13834: PUSH
13835: LD_INT 28
13837: PUSH
13838: LD_INT 30
13840: PUSH
13841: LD_INT 31
13843: PUSH
13844: LD_INT 32
13846: PUSH
13847: LD_INT 36
13849: PUSH
13850: EMPTY
13851: LIST
13852: LIST
13853: LIST
13854: LIST
13855: LIST
13856: LIST
13857: LIST
13858: LIST
13859: LIST
13860: LIST
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: PUSH
13873: LD_INT 101
13875: PUSH
13876: LD_INT 102
13878: PUSH
13879: LD_INT 103
13881: PUSH
13882: LD_INT 105
13884: PUSH
13885: LD_INT 106
13887: PUSH
13888: LD_INT 108
13890: PUSH
13891: LD_INT 109
13893: PUSH
13894: LD_INT 112
13896: PUSH
13897: LD_INT 114
13899: PUSH
13900: LD_INT 116
13902: PUSH
13903: LD_INT 117
13905: PUSH
13906: LD_INT 118
13908: PUSH
13909: EMPTY
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: PUSH
13923: EMPTY
13924: LIST
13925: LIST
13926: ST_TO_ADDR
13927: GO 16026
13929: LD_INT 10
13931: DOUBLE
13932: EQUAL
13933: IFTRUE 13937
13935: GO 14133
13937: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13938: LD_ADDR_VAR 0 2
13942: PUSH
13943: LD_INT 2
13945: PUSH
13946: LD_INT 4
13948: PUSH
13949: LD_INT 5
13951: PUSH
13952: LD_INT 6
13954: PUSH
13955: LD_INT 7
13957: PUSH
13958: LD_INT 8
13960: PUSH
13961: LD_INT 9
13963: PUSH
13964: LD_INT 10
13966: PUSH
13967: LD_INT 11
13969: PUSH
13970: LD_INT 12
13972: PUSH
13973: LD_INT 13
13975: PUSH
13976: LD_INT 14
13978: PUSH
13979: LD_INT 15
13981: PUSH
13982: LD_INT 16
13984: PUSH
13985: LD_INT 17
13987: PUSH
13988: LD_INT 18
13990: PUSH
13991: LD_INT 19
13993: PUSH
13994: LD_INT 20
13996: PUSH
13997: LD_INT 21
13999: PUSH
14000: LD_INT 22
14002: PUSH
14003: LD_INT 23
14005: PUSH
14006: LD_INT 24
14008: PUSH
14009: LD_INT 25
14011: PUSH
14012: LD_INT 26
14014: PUSH
14015: LD_INT 28
14017: PUSH
14018: LD_INT 30
14020: PUSH
14021: LD_INT 31
14023: PUSH
14024: LD_INT 32
14026: PUSH
14027: LD_INT 36
14029: PUSH
14030: EMPTY
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: PUSH
14061: LD_INT 101
14063: PUSH
14064: LD_INT 102
14066: PUSH
14067: LD_INT 103
14069: PUSH
14070: LD_INT 104
14072: PUSH
14073: LD_INT 105
14075: PUSH
14076: LD_INT 106
14078: PUSH
14079: LD_INT 107
14081: PUSH
14082: LD_INT 108
14084: PUSH
14085: LD_INT 109
14087: PUSH
14088: LD_INT 110
14090: PUSH
14091: LD_INT 111
14093: PUSH
14094: LD_INT 112
14096: PUSH
14097: LD_INT 114
14099: PUSH
14100: LD_INT 116
14102: PUSH
14103: LD_INT 117
14105: PUSH
14106: LD_INT 118
14108: PUSH
14109: EMPTY
14110: LIST
14111: LIST
14112: LIST
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: PUSH
14127: EMPTY
14128: LIST
14129: LIST
14130: ST_TO_ADDR
14131: GO 16026
14133: LD_INT 11
14135: DOUBLE
14136: EQUAL
14137: IFTRUE 14141
14139: GO 14345
14141: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14142: LD_ADDR_VAR 0 2
14146: PUSH
14147: LD_INT 2
14149: PUSH
14150: LD_INT 3
14152: PUSH
14153: LD_INT 4
14155: PUSH
14156: LD_INT 5
14158: PUSH
14159: LD_INT 6
14161: PUSH
14162: LD_INT 7
14164: PUSH
14165: LD_INT 8
14167: PUSH
14168: LD_INT 9
14170: PUSH
14171: LD_INT 10
14173: PUSH
14174: LD_INT 11
14176: PUSH
14177: LD_INT 12
14179: PUSH
14180: LD_INT 13
14182: PUSH
14183: LD_INT 14
14185: PUSH
14186: LD_INT 15
14188: PUSH
14189: LD_INT 16
14191: PUSH
14192: LD_INT 17
14194: PUSH
14195: LD_INT 18
14197: PUSH
14198: LD_INT 19
14200: PUSH
14201: LD_INT 20
14203: PUSH
14204: LD_INT 21
14206: PUSH
14207: LD_INT 22
14209: PUSH
14210: LD_INT 23
14212: PUSH
14213: LD_INT 24
14215: PUSH
14216: LD_INT 25
14218: PUSH
14219: LD_INT 26
14221: PUSH
14222: LD_INT 28
14224: PUSH
14225: LD_INT 30
14227: PUSH
14228: LD_INT 31
14230: PUSH
14231: LD_INT 32
14233: PUSH
14234: LD_INT 34
14236: PUSH
14237: LD_INT 36
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: PUSH
14273: LD_INT 101
14275: PUSH
14276: LD_INT 102
14278: PUSH
14279: LD_INT 103
14281: PUSH
14282: LD_INT 104
14284: PUSH
14285: LD_INT 105
14287: PUSH
14288: LD_INT 106
14290: PUSH
14291: LD_INT 107
14293: PUSH
14294: LD_INT 108
14296: PUSH
14297: LD_INT 109
14299: PUSH
14300: LD_INT 110
14302: PUSH
14303: LD_INT 111
14305: PUSH
14306: LD_INT 112
14308: PUSH
14309: LD_INT 114
14311: PUSH
14312: LD_INT 116
14314: PUSH
14315: LD_INT 117
14317: PUSH
14318: LD_INT 118
14320: PUSH
14321: EMPTY
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: ST_TO_ADDR
14343: GO 16026
14345: LD_INT 12
14347: DOUBLE
14348: EQUAL
14349: IFTRUE 14353
14351: GO 14573
14353: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14354: LD_ADDR_VAR 0 2
14358: PUSH
14359: LD_INT 1
14361: PUSH
14362: LD_INT 2
14364: PUSH
14365: LD_INT 3
14367: PUSH
14368: LD_INT 4
14370: PUSH
14371: LD_INT 5
14373: PUSH
14374: LD_INT 6
14376: PUSH
14377: LD_INT 7
14379: PUSH
14380: LD_INT 8
14382: PUSH
14383: LD_INT 9
14385: PUSH
14386: LD_INT 10
14388: PUSH
14389: LD_INT 11
14391: PUSH
14392: LD_INT 12
14394: PUSH
14395: LD_INT 13
14397: PUSH
14398: LD_INT 14
14400: PUSH
14401: LD_INT 15
14403: PUSH
14404: LD_INT 16
14406: PUSH
14407: LD_INT 17
14409: PUSH
14410: LD_INT 18
14412: PUSH
14413: LD_INT 19
14415: PUSH
14416: LD_INT 20
14418: PUSH
14419: LD_INT 21
14421: PUSH
14422: LD_INT 22
14424: PUSH
14425: LD_INT 23
14427: PUSH
14428: LD_INT 24
14430: PUSH
14431: LD_INT 25
14433: PUSH
14434: LD_INT 26
14436: PUSH
14437: LD_INT 27
14439: PUSH
14440: LD_INT 28
14442: PUSH
14443: LD_INT 30
14445: PUSH
14446: LD_INT 31
14448: PUSH
14449: LD_INT 32
14451: PUSH
14452: LD_INT 33
14454: PUSH
14455: LD_INT 34
14457: PUSH
14458: LD_INT 36
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: PUSH
14497: LD_INT 101
14499: PUSH
14500: LD_INT 102
14502: PUSH
14503: LD_INT 103
14505: PUSH
14506: LD_INT 104
14508: PUSH
14509: LD_INT 105
14511: PUSH
14512: LD_INT 106
14514: PUSH
14515: LD_INT 107
14517: PUSH
14518: LD_INT 108
14520: PUSH
14521: LD_INT 109
14523: PUSH
14524: LD_INT 110
14526: PUSH
14527: LD_INT 111
14529: PUSH
14530: LD_INT 112
14532: PUSH
14533: LD_INT 113
14535: PUSH
14536: LD_INT 114
14538: PUSH
14539: LD_INT 116
14541: PUSH
14542: LD_INT 117
14544: PUSH
14545: LD_INT 118
14547: PUSH
14548: EMPTY
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: PUSH
14567: EMPTY
14568: LIST
14569: LIST
14570: ST_TO_ADDR
14571: GO 16026
14573: LD_INT 13
14575: DOUBLE
14576: EQUAL
14577: IFTRUE 14581
14579: GO 14789
14581: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14582: LD_ADDR_VAR 0 2
14586: PUSH
14587: LD_INT 1
14589: PUSH
14590: LD_INT 2
14592: PUSH
14593: LD_INT 3
14595: PUSH
14596: LD_INT 4
14598: PUSH
14599: LD_INT 5
14601: PUSH
14602: LD_INT 8
14604: PUSH
14605: LD_INT 9
14607: PUSH
14608: LD_INT 10
14610: PUSH
14611: LD_INT 11
14613: PUSH
14614: LD_INT 12
14616: PUSH
14617: LD_INT 14
14619: PUSH
14620: LD_INT 15
14622: PUSH
14623: LD_INT 16
14625: PUSH
14626: LD_INT 17
14628: PUSH
14629: LD_INT 18
14631: PUSH
14632: LD_INT 19
14634: PUSH
14635: LD_INT 20
14637: PUSH
14638: LD_INT 21
14640: PUSH
14641: LD_INT 22
14643: PUSH
14644: LD_INT 23
14646: PUSH
14647: LD_INT 24
14649: PUSH
14650: LD_INT 25
14652: PUSH
14653: LD_INT 26
14655: PUSH
14656: LD_INT 27
14658: PUSH
14659: LD_INT 28
14661: PUSH
14662: LD_INT 30
14664: PUSH
14665: LD_INT 31
14667: PUSH
14668: LD_INT 32
14670: PUSH
14671: LD_INT 33
14673: PUSH
14674: LD_INT 34
14676: PUSH
14677: LD_INT 36
14679: PUSH
14680: EMPTY
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: PUSH
14713: LD_INT 101
14715: PUSH
14716: LD_INT 102
14718: PUSH
14719: LD_INT 103
14721: PUSH
14722: LD_INT 104
14724: PUSH
14725: LD_INT 105
14727: PUSH
14728: LD_INT 106
14730: PUSH
14731: LD_INT 107
14733: PUSH
14734: LD_INT 108
14736: PUSH
14737: LD_INT 109
14739: PUSH
14740: LD_INT 110
14742: PUSH
14743: LD_INT 111
14745: PUSH
14746: LD_INT 112
14748: PUSH
14749: LD_INT 113
14751: PUSH
14752: LD_INT 114
14754: PUSH
14755: LD_INT 116
14757: PUSH
14758: LD_INT 117
14760: PUSH
14761: LD_INT 118
14763: PUSH
14764: EMPTY
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: PUSH
14783: EMPTY
14784: LIST
14785: LIST
14786: ST_TO_ADDR
14787: GO 16026
14789: LD_INT 14
14791: DOUBLE
14792: EQUAL
14793: IFTRUE 14797
14795: GO 15021
14797: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14798: LD_ADDR_VAR 0 2
14802: PUSH
14803: LD_INT 1
14805: PUSH
14806: LD_INT 2
14808: PUSH
14809: LD_INT 3
14811: PUSH
14812: LD_INT 4
14814: PUSH
14815: LD_INT 5
14817: PUSH
14818: LD_INT 6
14820: PUSH
14821: LD_INT 7
14823: PUSH
14824: LD_INT 8
14826: PUSH
14827: LD_INT 9
14829: PUSH
14830: LD_INT 10
14832: PUSH
14833: LD_INT 11
14835: PUSH
14836: LD_INT 12
14838: PUSH
14839: LD_INT 13
14841: PUSH
14842: LD_INT 14
14844: PUSH
14845: LD_INT 15
14847: PUSH
14848: LD_INT 16
14850: PUSH
14851: LD_INT 17
14853: PUSH
14854: LD_INT 18
14856: PUSH
14857: LD_INT 19
14859: PUSH
14860: LD_INT 20
14862: PUSH
14863: LD_INT 21
14865: PUSH
14866: LD_INT 22
14868: PUSH
14869: LD_INT 23
14871: PUSH
14872: LD_INT 24
14874: PUSH
14875: LD_INT 25
14877: PUSH
14878: LD_INT 26
14880: PUSH
14881: LD_INT 27
14883: PUSH
14884: LD_INT 28
14886: PUSH
14887: LD_INT 29
14889: PUSH
14890: LD_INT 30
14892: PUSH
14893: LD_INT 31
14895: PUSH
14896: LD_INT 32
14898: PUSH
14899: LD_INT 33
14901: PUSH
14902: LD_INT 34
14904: PUSH
14905: LD_INT 36
14907: PUSH
14908: EMPTY
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: PUSH
14945: LD_INT 101
14947: PUSH
14948: LD_INT 102
14950: PUSH
14951: LD_INT 103
14953: PUSH
14954: LD_INT 104
14956: PUSH
14957: LD_INT 105
14959: PUSH
14960: LD_INT 106
14962: PUSH
14963: LD_INT 107
14965: PUSH
14966: LD_INT 108
14968: PUSH
14969: LD_INT 109
14971: PUSH
14972: LD_INT 110
14974: PUSH
14975: LD_INT 111
14977: PUSH
14978: LD_INT 112
14980: PUSH
14981: LD_INT 113
14983: PUSH
14984: LD_INT 114
14986: PUSH
14987: LD_INT 116
14989: PUSH
14990: LD_INT 117
14992: PUSH
14993: LD_INT 118
14995: PUSH
14996: EMPTY
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: PUSH
15015: EMPTY
15016: LIST
15017: LIST
15018: ST_TO_ADDR
15019: GO 16026
15021: LD_INT 15
15023: DOUBLE
15024: EQUAL
15025: IFTRUE 15029
15027: GO 15253
15029: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15030: LD_ADDR_VAR 0 2
15034: PUSH
15035: LD_INT 1
15037: PUSH
15038: LD_INT 2
15040: PUSH
15041: LD_INT 3
15043: PUSH
15044: LD_INT 4
15046: PUSH
15047: LD_INT 5
15049: PUSH
15050: LD_INT 6
15052: PUSH
15053: LD_INT 7
15055: PUSH
15056: LD_INT 8
15058: PUSH
15059: LD_INT 9
15061: PUSH
15062: LD_INT 10
15064: PUSH
15065: LD_INT 11
15067: PUSH
15068: LD_INT 12
15070: PUSH
15071: LD_INT 13
15073: PUSH
15074: LD_INT 14
15076: PUSH
15077: LD_INT 15
15079: PUSH
15080: LD_INT 16
15082: PUSH
15083: LD_INT 17
15085: PUSH
15086: LD_INT 18
15088: PUSH
15089: LD_INT 19
15091: PUSH
15092: LD_INT 20
15094: PUSH
15095: LD_INT 21
15097: PUSH
15098: LD_INT 22
15100: PUSH
15101: LD_INT 23
15103: PUSH
15104: LD_INT 24
15106: PUSH
15107: LD_INT 25
15109: PUSH
15110: LD_INT 26
15112: PUSH
15113: LD_INT 27
15115: PUSH
15116: LD_INT 28
15118: PUSH
15119: LD_INT 29
15121: PUSH
15122: LD_INT 30
15124: PUSH
15125: LD_INT 31
15127: PUSH
15128: LD_INT 32
15130: PUSH
15131: LD_INT 33
15133: PUSH
15134: LD_INT 34
15136: PUSH
15137: LD_INT 36
15139: PUSH
15140: EMPTY
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: LIST
15176: PUSH
15177: LD_INT 101
15179: PUSH
15180: LD_INT 102
15182: PUSH
15183: LD_INT 103
15185: PUSH
15186: LD_INT 104
15188: PUSH
15189: LD_INT 105
15191: PUSH
15192: LD_INT 106
15194: PUSH
15195: LD_INT 107
15197: PUSH
15198: LD_INT 108
15200: PUSH
15201: LD_INT 109
15203: PUSH
15204: LD_INT 110
15206: PUSH
15207: LD_INT 111
15209: PUSH
15210: LD_INT 112
15212: PUSH
15213: LD_INT 113
15215: PUSH
15216: LD_INT 114
15218: PUSH
15219: LD_INT 116
15221: PUSH
15222: LD_INT 117
15224: PUSH
15225: LD_INT 118
15227: PUSH
15228: EMPTY
15229: LIST
15230: LIST
15231: LIST
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: PUSH
15247: EMPTY
15248: LIST
15249: LIST
15250: ST_TO_ADDR
15251: GO 16026
15253: LD_INT 16
15255: DOUBLE
15256: EQUAL
15257: IFTRUE 15261
15259: GO 15397
15261: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15262: LD_ADDR_VAR 0 2
15266: PUSH
15267: LD_INT 2
15269: PUSH
15270: LD_INT 4
15272: PUSH
15273: LD_INT 5
15275: PUSH
15276: LD_INT 7
15278: PUSH
15279: LD_INT 11
15281: PUSH
15282: LD_INT 12
15284: PUSH
15285: LD_INT 15
15287: PUSH
15288: LD_INT 16
15290: PUSH
15291: LD_INT 20
15293: PUSH
15294: LD_INT 21
15296: PUSH
15297: LD_INT 22
15299: PUSH
15300: LD_INT 23
15302: PUSH
15303: LD_INT 25
15305: PUSH
15306: LD_INT 26
15308: PUSH
15309: LD_INT 30
15311: PUSH
15312: LD_INT 31
15314: PUSH
15315: LD_INT 32
15317: PUSH
15318: LD_INT 33
15320: PUSH
15321: LD_INT 34
15323: PUSH
15324: EMPTY
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: PUSH
15345: LD_INT 101
15347: PUSH
15348: LD_INT 102
15350: PUSH
15351: LD_INT 103
15353: PUSH
15354: LD_INT 106
15356: PUSH
15357: LD_INT 108
15359: PUSH
15360: LD_INT 112
15362: PUSH
15363: LD_INT 113
15365: PUSH
15366: LD_INT 114
15368: PUSH
15369: LD_INT 116
15371: PUSH
15372: LD_INT 117
15374: PUSH
15375: LD_INT 118
15377: PUSH
15378: EMPTY
15379: LIST
15380: LIST
15381: LIST
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: PUSH
15391: EMPTY
15392: LIST
15393: LIST
15394: ST_TO_ADDR
15395: GO 16026
15397: LD_INT 17
15399: DOUBLE
15400: EQUAL
15401: IFTRUE 15405
15403: GO 15629
15405: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15406: LD_ADDR_VAR 0 2
15410: PUSH
15411: LD_INT 1
15413: PUSH
15414: LD_INT 2
15416: PUSH
15417: LD_INT 3
15419: PUSH
15420: LD_INT 4
15422: PUSH
15423: LD_INT 5
15425: PUSH
15426: LD_INT 6
15428: PUSH
15429: LD_INT 7
15431: PUSH
15432: LD_INT 8
15434: PUSH
15435: LD_INT 9
15437: PUSH
15438: LD_INT 10
15440: PUSH
15441: LD_INT 11
15443: PUSH
15444: LD_INT 12
15446: PUSH
15447: LD_INT 13
15449: PUSH
15450: LD_INT 14
15452: PUSH
15453: LD_INT 15
15455: PUSH
15456: LD_INT 16
15458: PUSH
15459: LD_INT 17
15461: PUSH
15462: LD_INT 18
15464: PUSH
15465: LD_INT 19
15467: PUSH
15468: LD_INT 20
15470: PUSH
15471: LD_INT 21
15473: PUSH
15474: LD_INT 22
15476: PUSH
15477: LD_INT 23
15479: PUSH
15480: LD_INT 24
15482: PUSH
15483: LD_INT 25
15485: PUSH
15486: LD_INT 26
15488: PUSH
15489: LD_INT 27
15491: PUSH
15492: LD_INT 28
15494: PUSH
15495: LD_INT 29
15497: PUSH
15498: LD_INT 30
15500: PUSH
15501: LD_INT 31
15503: PUSH
15504: LD_INT 32
15506: PUSH
15507: LD_INT 33
15509: PUSH
15510: LD_INT 34
15512: PUSH
15513: LD_INT 36
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: LIST
15540: LIST
15541: LIST
15542: LIST
15543: LIST
15544: LIST
15545: LIST
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: PUSH
15553: LD_INT 101
15555: PUSH
15556: LD_INT 102
15558: PUSH
15559: LD_INT 103
15561: PUSH
15562: LD_INT 104
15564: PUSH
15565: LD_INT 105
15567: PUSH
15568: LD_INT 106
15570: PUSH
15571: LD_INT 107
15573: PUSH
15574: LD_INT 108
15576: PUSH
15577: LD_INT 109
15579: PUSH
15580: LD_INT 110
15582: PUSH
15583: LD_INT 111
15585: PUSH
15586: LD_INT 112
15588: PUSH
15589: LD_INT 113
15591: PUSH
15592: LD_INT 114
15594: PUSH
15595: LD_INT 116
15597: PUSH
15598: LD_INT 117
15600: PUSH
15601: LD_INT 118
15603: PUSH
15604: EMPTY
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: PUSH
15623: EMPTY
15624: LIST
15625: LIST
15626: ST_TO_ADDR
15627: GO 16026
15629: LD_INT 18
15631: DOUBLE
15632: EQUAL
15633: IFTRUE 15637
15635: GO 15785
15637: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15638: LD_ADDR_VAR 0 2
15642: PUSH
15643: LD_INT 2
15645: PUSH
15646: LD_INT 4
15648: PUSH
15649: LD_INT 5
15651: PUSH
15652: LD_INT 7
15654: PUSH
15655: LD_INT 11
15657: PUSH
15658: LD_INT 12
15660: PUSH
15661: LD_INT 15
15663: PUSH
15664: LD_INT 16
15666: PUSH
15667: LD_INT 20
15669: PUSH
15670: LD_INT 21
15672: PUSH
15673: LD_INT 22
15675: PUSH
15676: LD_INT 23
15678: PUSH
15679: LD_INT 25
15681: PUSH
15682: LD_INT 26
15684: PUSH
15685: LD_INT 30
15687: PUSH
15688: LD_INT 31
15690: PUSH
15691: LD_INT 32
15693: PUSH
15694: LD_INT 33
15696: PUSH
15697: LD_INT 34
15699: PUSH
15700: LD_INT 35
15702: PUSH
15703: LD_INT 36
15705: PUSH
15706: EMPTY
15707: LIST
15708: LIST
15709: LIST
15710: LIST
15711: LIST
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: PUSH
15729: LD_INT 101
15731: PUSH
15732: LD_INT 102
15734: PUSH
15735: LD_INT 103
15737: PUSH
15738: LD_INT 106
15740: PUSH
15741: LD_INT 108
15743: PUSH
15744: LD_INT 112
15746: PUSH
15747: LD_INT 113
15749: PUSH
15750: LD_INT 114
15752: PUSH
15753: LD_INT 115
15755: PUSH
15756: LD_INT 116
15758: PUSH
15759: LD_INT 117
15761: PUSH
15762: LD_INT 118
15764: PUSH
15765: EMPTY
15766: LIST
15767: LIST
15768: LIST
15769: LIST
15770: LIST
15771: LIST
15772: LIST
15773: LIST
15774: LIST
15775: LIST
15776: LIST
15777: LIST
15778: PUSH
15779: EMPTY
15780: LIST
15781: LIST
15782: ST_TO_ADDR
15783: GO 16026
15785: LD_INT 19
15787: DOUBLE
15788: EQUAL
15789: IFTRUE 15793
15791: GO 16025
15793: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15794: LD_ADDR_VAR 0 2
15798: PUSH
15799: LD_INT 1
15801: PUSH
15802: LD_INT 2
15804: PUSH
15805: LD_INT 3
15807: PUSH
15808: LD_INT 4
15810: PUSH
15811: LD_INT 5
15813: PUSH
15814: LD_INT 6
15816: PUSH
15817: LD_INT 7
15819: PUSH
15820: LD_INT 8
15822: PUSH
15823: LD_INT 9
15825: PUSH
15826: LD_INT 10
15828: PUSH
15829: LD_INT 11
15831: PUSH
15832: LD_INT 12
15834: PUSH
15835: LD_INT 13
15837: PUSH
15838: LD_INT 14
15840: PUSH
15841: LD_INT 15
15843: PUSH
15844: LD_INT 16
15846: PUSH
15847: LD_INT 17
15849: PUSH
15850: LD_INT 18
15852: PUSH
15853: LD_INT 19
15855: PUSH
15856: LD_INT 20
15858: PUSH
15859: LD_INT 21
15861: PUSH
15862: LD_INT 22
15864: PUSH
15865: LD_INT 23
15867: PUSH
15868: LD_INT 24
15870: PUSH
15871: LD_INT 25
15873: PUSH
15874: LD_INT 26
15876: PUSH
15877: LD_INT 27
15879: PUSH
15880: LD_INT 28
15882: PUSH
15883: LD_INT 29
15885: PUSH
15886: LD_INT 30
15888: PUSH
15889: LD_INT 31
15891: PUSH
15892: LD_INT 32
15894: PUSH
15895: LD_INT 33
15897: PUSH
15898: LD_INT 34
15900: PUSH
15901: LD_INT 35
15903: PUSH
15904: LD_INT 36
15906: PUSH
15907: EMPTY
15908: LIST
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: PUSH
15945: LD_INT 101
15947: PUSH
15948: LD_INT 102
15950: PUSH
15951: LD_INT 103
15953: PUSH
15954: LD_INT 104
15956: PUSH
15957: LD_INT 105
15959: PUSH
15960: LD_INT 106
15962: PUSH
15963: LD_INT 107
15965: PUSH
15966: LD_INT 108
15968: PUSH
15969: LD_INT 109
15971: PUSH
15972: LD_INT 110
15974: PUSH
15975: LD_INT 111
15977: PUSH
15978: LD_INT 112
15980: PUSH
15981: LD_INT 113
15983: PUSH
15984: LD_INT 114
15986: PUSH
15987: LD_INT 115
15989: PUSH
15990: LD_INT 116
15992: PUSH
15993: LD_INT 117
15995: PUSH
15996: LD_INT 118
15998: PUSH
15999: EMPTY
16000: LIST
16001: LIST
16002: LIST
16003: LIST
16004: LIST
16005: LIST
16006: LIST
16007: LIST
16008: LIST
16009: LIST
16010: LIST
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: PUSH
16019: EMPTY
16020: LIST
16021: LIST
16022: ST_TO_ADDR
16023: GO 16026
16025: POP
// end else
16026: GO 16257
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16028: LD_ADDR_VAR 0 2
16032: PUSH
16033: LD_INT 1
16035: PUSH
16036: LD_INT 2
16038: PUSH
16039: LD_INT 3
16041: PUSH
16042: LD_INT 4
16044: PUSH
16045: LD_INT 5
16047: PUSH
16048: LD_INT 6
16050: PUSH
16051: LD_INT 7
16053: PUSH
16054: LD_INT 8
16056: PUSH
16057: LD_INT 9
16059: PUSH
16060: LD_INT 10
16062: PUSH
16063: LD_INT 11
16065: PUSH
16066: LD_INT 12
16068: PUSH
16069: LD_INT 13
16071: PUSH
16072: LD_INT 14
16074: PUSH
16075: LD_INT 15
16077: PUSH
16078: LD_INT 16
16080: PUSH
16081: LD_INT 17
16083: PUSH
16084: LD_INT 18
16086: PUSH
16087: LD_INT 19
16089: PUSH
16090: LD_INT 20
16092: PUSH
16093: LD_INT 21
16095: PUSH
16096: LD_INT 22
16098: PUSH
16099: LD_INT 23
16101: PUSH
16102: LD_INT 24
16104: PUSH
16105: LD_INT 25
16107: PUSH
16108: LD_INT 26
16110: PUSH
16111: LD_INT 27
16113: PUSH
16114: LD_INT 28
16116: PUSH
16117: LD_INT 29
16119: PUSH
16120: LD_INT 30
16122: PUSH
16123: LD_INT 31
16125: PUSH
16126: LD_INT 32
16128: PUSH
16129: LD_INT 33
16131: PUSH
16132: LD_INT 34
16134: PUSH
16135: LD_INT 35
16137: PUSH
16138: LD_INT 36
16140: PUSH
16141: EMPTY
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: LIST
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: LIST
16156: LIST
16157: LIST
16158: LIST
16159: LIST
16160: LIST
16161: LIST
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: PUSH
16179: LD_INT 101
16181: PUSH
16182: LD_INT 102
16184: PUSH
16185: LD_INT 103
16187: PUSH
16188: LD_INT 104
16190: PUSH
16191: LD_INT 105
16193: PUSH
16194: LD_INT 106
16196: PUSH
16197: LD_INT 107
16199: PUSH
16200: LD_INT 108
16202: PUSH
16203: LD_INT 109
16205: PUSH
16206: LD_INT 110
16208: PUSH
16209: LD_INT 111
16211: PUSH
16212: LD_INT 112
16214: PUSH
16215: LD_INT 113
16217: PUSH
16218: LD_INT 114
16220: PUSH
16221: LD_INT 115
16223: PUSH
16224: LD_INT 116
16226: PUSH
16227: LD_INT 117
16229: PUSH
16230: LD_INT 118
16232: PUSH
16233: EMPTY
16234: LIST
16235: LIST
16236: LIST
16237: LIST
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: LIST
16243: LIST
16244: LIST
16245: LIST
16246: LIST
16247: LIST
16248: LIST
16249: LIST
16250: LIST
16251: LIST
16252: PUSH
16253: EMPTY
16254: LIST
16255: LIST
16256: ST_TO_ADDR
// if result then
16257: LD_VAR 0 2
16261: IFFALSE 17047
// begin normal :=  ;
16263: LD_ADDR_VAR 0 5
16267: PUSH
16268: LD_STRING 
16270: ST_TO_ADDR
// hardcore :=  ;
16271: LD_ADDR_VAR 0 6
16275: PUSH
16276: LD_STRING 
16278: ST_TO_ADDR
// active :=  ;
16279: LD_ADDR_VAR 0 7
16283: PUSH
16284: LD_STRING 
16286: ST_TO_ADDR
// for i = 1 to normalCounter do
16287: LD_ADDR_VAR 0 8
16291: PUSH
16292: DOUBLE
16293: LD_INT 1
16295: DEC
16296: ST_TO_ADDR
16297: LD_EXP 48
16301: PUSH
16302: FOR_TO
16303: IFFALSE 16404
// begin tmp := 0 ;
16305: LD_ADDR_VAR 0 3
16309: PUSH
16310: LD_STRING 0
16312: ST_TO_ADDR
// if result [ 1 ] then
16313: LD_VAR 0 2
16317: PUSH
16318: LD_INT 1
16320: ARRAY
16321: IFFALSE 16386
// if result [ 1 ] [ 1 ] = i then
16323: LD_VAR 0 2
16327: PUSH
16328: LD_INT 1
16330: ARRAY
16331: PUSH
16332: LD_INT 1
16334: ARRAY
16335: PUSH
16336: LD_VAR 0 8
16340: EQUAL
16341: IFFALSE 16386
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16343: LD_ADDR_VAR 0 2
16347: PUSH
16348: LD_VAR 0 2
16352: PPUSH
16353: LD_INT 1
16355: PPUSH
16356: LD_VAR 0 2
16360: PUSH
16361: LD_INT 1
16363: ARRAY
16364: PPUSH
16365: LD_INT 1
16367: PPUSH
16368: CALL_OW 3
16372: PPUSH
16373: CALL_OW 1
16377: ST_TO_ADDR
// tmp := 1 ;
16378: LD_ADDR_VAR 0 3
16382: PUSH
16383: LD_STRING 1
16385: ST_TO_ADDR
// end ; normal := normal & tmp ;
16386: LD_ADDR_VAR 0 5
16390: PUSH
16391: LD_VAR 0 5
16395: PUSH
16396: LD_VAR 0 3
16400: STR
16401: ST_TO_ADDR
// end ;
16402: GO 16302
16404: POP
16405: POP
// for i = 1 to hardcoreCounter do
16406: LD_ADDR_VAR 0 8
16410: PUSH
16411: DOUBLE
16412: LD_INT 1
16414: DEC
16415: ST_TO_ADDR
16416: LD_EXP 49
16420: PUSH
16421: FOR_TO
16422: IFFALSE 16527
// begin tmp := 0 ;
16424: LD_ADDR_VAR 0 3
16428: PUSH
16429: LD_STRING 0
16431: ST_TO_ADDR
// if result [ 2 ] then
16432: LD_VAR 0 2
16436: PUSH
16437: LD_INT 2
16439: ARRAY
16440: IFFALSE 16509
// if result [ 2 ] [ 1 ] = 100 + i then
16442: LD_VAR 0 2
16446: PUSH
16447: LD_INT 2
16449: ARRAY
16450: PUSH
16451: LD_INT 1
16453: ARRAY
16454: PUSH
16455: LD_INT 100
16457: PUSH
16458: LD_VAR 0 8
16462: PLUS
16463: EQUAL
16464: IFFALSE 16509
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16466: LD_ADDR_VAR 0 2
16470: PUSH
16471: LD_VAR 0 2
16475: PPUSH
16476: LD_INT 2
16478: PPUSH
16479: LD_VAR 0 2
16483: PUSH
16484: LD_INT 2
16486: ARRAY
16487: PPUSH
16488: LD_INT 1
16490: PPUSH
16491: CALL_OW 3
16495: PPUSH
16496: CALL_OW 1
16500: ST_TO_ADDR
// tmp := 1 ;
16501: LD_ADDR_VAR 0 3
16505: PUSH
16506: LD_STRING 1
16508: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16509: LD_ADDR_VAR 0 6
16513: PUSH
16514: LD_VAR 0 6
16518: PUSH
16519: LD_VAR 0 3
16523: STR
16524: ST_TO_ADDR
// end ;
16525: GO 16421
16527: POP
16528: POP
// if isGameLoad then
16529: LD_VAR 0 1
16533: IFFALSE 17008
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16535: LD_ADDR_VAR 0 4
16539: PUSH
16540: LD_EXP 52
16544: PUSH
16545: LD_EXP 51
16549: PUSH
16550: LD_EXP 53
16554: PUSH
16555: LD_EXP 50
16559: PUSH
16560: LD_EXP 54
16564: PUSH
16565: LD_EXP 55
16569: PUSH
16570: LD_EXP 56
16574: PUSH
16575: LD_EXP 57
16579: PUSH
16580: LD_EXP 58
16584: PUSH
16585: LD_EXP 59
16589: PUSH
16590: LD_EXP 60
16594: PUSH
16595: LD_EXP 61
16599: PUSH
16600: LD_EXP 62
16604: PUSH
16605: LD_EXP 63
16609: PUSH
16610: LD_EXP 71
16614: PUSH
16615: LD_EXP 72
16619: PUSH
16620: LD_EXP 73
16624: PUSH
16625: LD_EXP 74
16629: PUSH
16630: LD_EXP 76
16634: PUSH
16635: LD_EXP 77
16639: PUSH
16640: LD_EXP 78
16644: PUSH
16645: LD_EXP 81
16649: PUSH
16650: LD_EXP 83
16654: PUSH
16655: LD_EXP 84
16659: PUSH
16660: LD_EXP 85
16664: PUSH
16665: LD_EXP 87
16669: PUSH
16670: LD_EXP 88
16674: PUSH
16675: LD_EXP 91
16679: PUSH
16680: LD_EXP 92
16684: PUSH
16685: LD_EXP 93
16689: PUSH
16690: LD_EXP 94
16694: PUSH
16695: LD_EXP 95
16699: PUSH
16700: LD_EXP 96
16704: PUSH
16705: LD_EXP 97
16709: PUSH
16710: LD_EXP 98
16714: PUSH
16715: LD_EXP 99
16719: PUSH
16720: LD_EXP 64
16724: PUSH
16725: LD_EXP 65
16729: PUSH
16730: LD_EXP 68
16734: PUSH
16735: LD_EXP 69
16739: PUSH
16740: LD_EXP 70
16744: PUSH
16745: LD_EXP 66
16749: PUSH
16750: LD_EXP 67
16754: PUSH
16755: LD_EXP 75
16759: PUSH
16760: LD_EXP 79
16764: PUSH
16765: LD_EXP 80
16769: PUSH
16770: LD_EXP 82
16774: PUSH
16775: LD_EXP 86
16779: PUSH
16780: LD_EXP 89
16784: PUSH
16785: LD_EXP 90
16789: PUSH
16790: LD_EXP 100
16794: PUSH
16795: LD_EXP 101
16799: PUSH
16800: LD_EXP 102
16804: PUSH
16805: LD_EXP 103
16809: PUSH
16810: EMPTY
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: LIST
16835: LIST
16836: LIST
16837: LIST
16838: LIST
16839: LIST
16840: LIST
16841: LIST
16842: LIST
16843: LIST
16844: LIST
16845: LIST
16846: LIST
16847: LIST
16848: LIST
16849: LIST
16850: LIST
16851: LIST
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: ST_TO_ADDR
// tmp :=  ;
16866: LD_ADDR_VAR 0 3
16870: PUSH
16871: LD_STRING 
16873: ST_TO_ADDR
// for i = 1 to normalCounter do
16874: LD_ADDR_VAR 0 8
16878: PUSH
16879: DOUBLE
16880: LD_INT 1
16882: DEC
16883: ST_TO_ADDR
16884: LD_EXP 48
16888: PUSH
16889: FOR_TO
16890: IFFALSE 16926
// begin if flags [ i ] then
16892: LD_VAR 0 4
16896: PUSH
16897: LD_VAR 0 8
16901: ARRAY
16902: IFFALSE 16924
// tmp := tmp & i & ; ;
16904: LD_ADDR_VAR 0 3
16908: PUSH
16909: LD_VAR 0 3
16913: PUSH
16914: LD_VAR 0 8
16918: STR
16919: PUSH
16920: LD_STRING ;
16922: STR
16923: ST_TO_ADDR
// end ;
16924: GO 16889
16926: POP
16927: POP
// for i = 1 to hardcoreCounter do
16928: LD_ADDR_VAR 0 8
16932: PUSH
16933: DOUBLE
16934: LD_INT 1
16936: DEC
16937: ST_TO_ADDR
16938: LD_EXP 49
16942: PUSH
16943: FOR_TO
16944: IFFALSE 16990
// begin if flags [ normalCounter + i ] then
16946: LD_VAR 0 4
16950: PUSH
16951: LD_EXP 48
16955: PUSH
16956: LD_VAR 0 8
16960: PLUS
16961: ARRAY
16962: IFFALSE 16988
// tmp := tmp & ( 100 + i ) & ; ;
16964: LD_ADDR_VAR 0 3
16968: PUSH
16969: LD_VAR 0 3
16973: PUSH
16974: LD_INT 100
16976: PUSH
16977: LD_VAR 0 8
16981: PLUS
16982: STR
16983: PUSH
16984: LD_STRING ;
16986: STR
16987: ST_TO_ADDR
// end ;
16988: GO 16943
16990: POP
16991: POP
// if tmp then
16992: LD_VAR 0 3
16996: IFFALSE 17008
// active := tmp ;
16998: LD_ADDR_VAR 0 7
17002: PUSH
17003: LD_VAR 0 3
17007: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
17008: LD_STRING getStreamItemsFromMission("
17010: PUSH
17011: LD_VAR 0 5
17015: STR
17016: PUSH
17017: LD_STRING ","
17019: STR
17020: PUSH
17021: LD_VAR 0 6
17025: STR
17026: PUSH
17027: LD_STRING ","
17029: STR
17030: PUSH
17031: LD_VAR 0 7
17035: STR
17036: PUSH
17037: LD_STRING ")
17039: STR
17040: PPUSH
17041: CALL_OW 559
// end else
17045: GO 17054
// ToLua ( getStreamItemsFromMission("","","") ) ;
17047: LD_STRING getStreamItemsFromMission("","","")
17049: PPUSH
17050: CALL_OW 559
// end ;
17054: LD_VAR 0 2
17058: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17059: LD_EXP 47
17063: PUSH
17064: LD_EXP 52
17068: AND
17069: IFFALSE 17193
17071: GO 17073
17073: DISABLE
17074: LD_INT 0
17076: PPUSH
17077: PPUSH
// begin enable ;
17078: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17079: LD_ADDR_VAR 0 2
17083: PUSH
17084: LD_INT 22
17086: PUSH
17087: LD_OWVAR 2
17091: PUSH
17092: EMPTY
17093: LIST
17094: LIST
17095: PUSH
17096: LD_INT 2
17098: PUSH
17099: LD_INT 34
17101: PUSH
17102: LD_INT 7
17104: PUSH
17105: EMPTY
17106: LIST
17107: LIST
17108: PUSH
17109: LD_INT 34
17111: PUSH
17112: LD_INT 45
17114: PUSH
17115: EMPTY
17116: LIST
17117: LIST
17118: PUSH
17119: LD_INT 34
17121: PUSH
17122: LD_INT 28
17124: PUSH
17125: EMPTY
17126: LIST
17127: LIST
17128: PUSH
17129: LD_INT 34
17131: PUSH
17132: LD_INT 47
17134: PUSH
17135: EMPTY
17136: LIST
17137: LIST
17138: PUSH
17139: EMPTY
17140: LIST
17141: LIST
17142: LIST
17143: LIST
17144: LIST
17145: PUSH
17146: EMPTY
17147: LIST
17148: LIST
17149: PPUSH
17150: CALL_OW 69
17154: ST_TO_ADDR
// if not tmp then
17155: LD_VAR 0 2
17159: NOT
17160: IFFALSE 17164
// exit ;
17162: GO 17193
// for i in tmp do
17164: LD_ADDR_VAR 0 1
17168: PUSH
17169: LD_VAR 0 2
17173: PUSH
17174: FOR_IN
17175: IFFALSE 17191
// begin SetLives ( i , 0 ) ;
17177: LD_VAR 0 1
17181: PPUSH
17182: LD_INT 0
17184: PPUSH
17185: CALL_OW 234
// end ;
17189: GO 17174
17191: POP
17192: POP
// end ;
17193: PPOPN 2
17195: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17196: LD_EXP 47
17200: PUSH
17201: LD_EXP 53
17205: AND
17206: IFFALSE 17290
17208: GO 17210
17210: DISABLE
17211: LD_INT 0
17213: PPUSH
17214: PPUSH
// begin enable ;
17215: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17216: LD_ADDR_VAR 0 2
17220: PUSH
17221: LD_INT 22
17223: PUSH
17224: LD_OWVAR 2
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: PUSH
17233: LD_INT 32
17235: PUSH
17236: LD_INT 3
17238: PUSH
17239: EMPTY
17240: LIST
17241: LIST
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: PPUSH
17247: CALL_OW 69
17251: ST_TO_ADDR
// if not tmp then
17252: LD_VAR 0 2
17256: NOT
17257: IFFALSE 17261
// exit ;
17259: GO 17290
// for i in tmp do
17261: LD_ADDR_VAR 0 1
17265: PUSH
17266: LD_VAR 0 2
17270: PUSH
17271: FOR_IN
17272: IFFALSE 17288
// begin SetLives ( i , 0 ) ;
17274: LD_VAR 0 1
17278: PPUSH
17279: LD_INT 0
17281: PPUSH
17282: CALL_OW 234
// end ;
17286: GO 17271
17288: POP
17289: POP
// end ;
17290: PPOPN 2
17292: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17293: LD_EXP 47
17297: PUSH
17298: LD_EXP 50
17302: AND
17303: IFFALSE 17396
17305: GO 17307
17307: DISABLE
17308: LD_INT 0
17310: PPUSH
// begin enable ;
17311: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17312: LD_ADDR_VAR 0 1
17316: PUSH
17317: LD_INT 22
17319: PUSH
17320: LD_OWVAR 2
17324: PUSH
17325: EMPTY
17326: LIST
17327: LIST
17328: PUSH
17329: LD_INT 2
17331: PUSH
17332: LD_INT 25
17334: PUSH
17335: LD_INT 5
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: PUSH
17342: LD_INT 25
17344: PUSH
17345: LD_INT 9
17347: PUSH
17348: EMPTY
17349: LIST
17350: LIST
17351: PUSH
17352: LD_INT 25
17354: PUSH
17355: LD_INT 8
17357: PUSH
17358: EMPTY
17359: LIST
17360: LIST
17361: PUSH
17362: EMPTY
17363: LIST
17364: LIST
17365: LIST
17366: LIST
17367: PUSH
17368: EMPTY
17369: LIST
17370: LIST
17371: PPUSH
17372: CALL_OW 69
17376: PUSH
17377: FOR_IN
17378: IFFALSE 17394
// begin SetClass ( i , 1 ) ;
17380: LD_VAR 0 1
17384: PPUSH
17385: LD_INT 1
17387: PPUSH
17388: CALL_OW 336
// end ;
17392: GO 17377
17394: POP
17395: POP
// end ;
17396: PPOPN 1
17398: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17399: LD_EXP 47
17403: PUSH
17404: LD_EXP 51
17408: AND
17409: PUSH
17410: LD_OWVAR 65
17414: PUSH
17415: LD_INT 7
17417: LESS
17418: AND
17419: IFFALSE 17433
17421: GO 17423
17423: DISABLE
// begin enable ;
17424: ENABLE
// game_speed := 7 ;
17425: LD_ADDR_OWVAR 65
17429: PUSH
17430: LD_INT 7
17432: ST_TO_ADDR
// end ;
17433: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17434: LD_EXP 47
17438: PUSH
17439: LD_EXP 54
17443: AND
17444: IFFALSE 17646
17446: GO 17448
17448: DISABLE
17449: LD_INT 0
17451: PPUSH
17452: PPUSH
17453: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17454: LD_ADDR_VAR 0 3
17458: PUSH
17459: LD_INT 81
17461: PUSH
17462: LD_OWVAR 2
17466: PUSH
17467: EMPTY
17468: LIST
17469: LIST
17470: PUSH
17471: LD_INT 21
17473: PUSH
17474: LD_INT 1
17476: PUSH
17477: EMPTY
17478: LIST
17479: LIST
17480: PUSH
17481: EMPTY
17482: LIST
17483: LIST
17484: PPUSH
17485: CALL_OW 69
17489: ST_TO_ADDR
// if not tmp then
17490: LD_VAR 0 3
17494: NOT
17495: IFFALSE 17499
// exit ;
17497: GO 17646
// if tmp > 5 then
17499: LD_VAR 0 3
17503: PUSH
17504: LD_INT 5
17506: GREATER
17507: IFFALSE 17519
// k := 5 else
17509: LD_ADDR_VAR 0 2
17513: PUSH
17514: LD_INT 5
17516: ST_TO_ADDR
17517: GO 17529
// k := tmp ;
17519: LD_ADDR_VAR 0 2
17523: PUSH
17524: LD_VAR 0 3
17528: ST_TO_ADDR
// for i := 1 to k do
17529: LD_ADDR_VAR 0 1
17533: PUSH
17534: DOUBLE
17535: LD_INT 1
17537: DEC
17538: ST_TO_ADDR
17539: LD_VAR 0 2
17543: PUSH
17544: FOR_TO
17545: IFFALSE 17644
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17547: LD_VAR 0 3
17551: PUSH
17552: LD_VAR 0 1
17556: ARRAY
17557: PPUSH
17558: LD_VAR 0 1
17562: PUSH
17563: LD_INT 4
17565: MOD
17566: PUSH
17567: LD_INT 1
17569: PLUS
17570: PPUSH
17571: CALL_OW 259
17575: PUSH
17576: LD_INT 10
17578: LESS
17579: IFFALSE 17642
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17581: LD_VAR 0 3
17585: PUSH
17586: LD_VAR 0 1
17590: ARRAY
17591: PPUSH
17592: LD_VAR 0 1
17596: PUSH
17597: LD_INT 4
17599: MOD
17600: PUSH
17601: LD_INT 1
17603: PLUS
17604: PPUSH
17605: LD_VAR 0 3
17609: PUSH
17610: LD_VAR 0 1
17614: ARRAY
17615: PPUSH
17616: LD_VAR 0 1
17620: PUSH
17621: LD_INT 4
17623: MOD
17624: PUSH
17625: LD_INT 1
17627: PLUS
17628: PPUSH
17629: CALL_OW 259
17633: PUSH
17634: LD_INT 1
17636: PLUS
17637: PPUSH
17638: CALL_OW 237
17642: GO 17544
17644: POP
17645: POP
// end ;
17646: PPOPN 3
17648: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17649: LD_EXP 47
17653: PUSH
17654: LD_EXP 55
17658: AND
17659: IFFALSE 17679
17661: GO 17663
17663: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17664: LD_INT 4
17666: PPUSH
17667: LD_OWVAR 2
17671: PPUSH
17672: LD_INT 0
17674: PPUSH
17675: CALL_OW 324
17679: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17680: LD_EXP 47
17684: PUSH
17685: LD_EXP 84
17689: AND
17690: IFFALSE 17710
17692: GO 17694
17694: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17695: LD_INT 19
17697: PPUSH
17698: LD_OWVAR 2
17702: PPUSH
17703: LD_INT 0
17705: PPUSH
17706: CALL_OW 324
17710: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17711: LD_EXP 47
17715: PUSH
17716: LD_EXP 56
17720: AND
17721: IFFALSE 17823
17723: GO 17725
17725: DISABLE
17726: LD_INT 0
17728: PPUSH
17729: PPUSH
// begin enable ;
17730: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17731: LD_ADDR_VAR 0 2
17735: PUSH
17736: LD_INT 22
17738: PUSH
17739: LD_OWVAR 2
17743: PUSH
17744: EMPTY
17745: LIST
17746: LIST
17747: PUSH
17748: LD_INT 2
17750: PUSH
17751: LD_INT 34
17753: PUSH
17754: LD_INT 11
17756: PUSH
17757: EMPTY
17758: LIST
17759: LIST
17760: PUSH
17761: LD_INT 34
17763: PUSH
17764: LD_INT 30
17766: PUSH
17767: EMPTY
17768: LIST
17769: LIST
17770: PUSH
17771: EMPTY
17772: LIST
17773: LIST
17774: LIST
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: PPUSH
17780: CALL_OW 69
17784: ST_TO_ADDR
// if not tmp then
17785: LD_VAR 0 2
17789: NOT
17790: IFFALSE 17794
// exit ;
17792: GO 17823
// for i in tmp do
17794: LD_ADDR_VAR 0 1
17798: PUSH
17799: LD_VAR 0 2
17803: PUSH
17804: FOR_IN
17805: IFFALSE 17821
// begin SetLives ( i , 0 ) ;
17807: LD_VAR 0 1
17811: PPUSH
17812: LD_INT 0
17814: PPUSH
17815: CALL_OW 234
// end ;
17819: GO 17804
17821: POP
17822: POP
// end ;
17823: PPOPN 2
17825: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17826: LD_EXP 47
17830: PUSH
17831: LD_EXP 57
17835: AND
17836: IFFALSE 17856
17838: GO 17840
17840: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17841: LD_INT 32
17843: PPUSH
17844: LD_OWVAR 2
17848: PPUSH
17849: LD_INT 0
17851: PPUSH
17852: CALL_OW 324
17856: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17857: LD_EXP 47
17861: PUSH
17862: LD_EXP 58
17866: AND
17867: IFFALSE 18048
17869: GO 17871
17871: DISABLE
17872: LD_INT 0
17874: PPUSH
17875: PPUSH
17876: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17877: LD_ADDR_VAR 0 2
17881: PUSH
17882: LD_INT 22
17884: PUSH
17885: LD_OWVAR 2
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PUSH
17894: LD_INT 33
17896: PUSH
17897: LD_INT 3
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: PPUSH
17908: CALL_OW 69
17912: ST_TO_ADDR
// if not tmp then
17913: LD_VAR 0 2
17917: NOT
17918: IFFALSE 17922
// exit ;
17920: GO 18048
// side := 0 ;
17922: LD_ADDR_VAR 0 3
17926: PUSH
17927: LD_INT 0
17929: ST_TO_ADDR
// for i := 1 to 8 do
17930: LD_ADDR_VAR 0 1
17934: PUSH
17935: DOUBLE
17936: LD_INT 1
17938: DEC
17939: ST_TO_ADDR
17940: LD_INT 8
17942: PUSH
17943: FOR_TO
17944: IFFALSE 17992
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17946: LD_OWVAR 2
17950: PUSH
17951: LD_VAR 0 1
17955: NONEQUAL
17956: PUSH
17957: LD_OWVAR 2
17961: PPUSH
17962: LD_VAR 0 1
17966: PPUSH
17967: CALL_OW 81
17971: PUSH
17972: LD_INT 2
17974: EQUAL
17975: AND
17976: IFFALSE 17990
// begin side := i ;
17978: LD_ADDR_VAR 0 3
17982: PUSH
17983: LD_VAR 0 1
17987: ST_TO_ADDR
// break ;
17988: GO 17992
// end ;
17990: GO 17943
17992: POP
17993: POP
// if not side then
17994: LD_VAR 0 3
17998: NOT
17999: IFFALSE 18003
// exit ;
18001: GO 18048
// for i := 1 to tmp do
18003: LD_ADDR_VAR 0 1
18007: PUSH
18008: DOUBLE
18009: LD_INT 1
18011: DEC
18012: ST_TO_ADDR
18013: LD_VAR 0 2
18017: PUSH
18018: FOR_TO
18019: IFFALSE 18046
// if Prob ( 60 ) then
18021: LD_INT 60
18023: PPUSH
18024: CALL_OW 13
18028: IFFALSE 18044
// SetSide ( i , side ) ;
18030: LD_VAR 0 1
18034: PPUSH
18035: LD_VAR 0 3
18039: PPUSH
18040: CALL_OW 235
18044: GO 18018
18046: POP
18047: POP
// end ;
18048: PPOPN 3
18050: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18051: LD_EXP 47
18055: PUSH
18056: LD_EXP 60
18060: AND
18061: IFFALSE 18180
18063: GO 18065
18065: DISABLE
18066: LD_INT 0
18068: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18069: LD_ADDR_VAR 0 1
18073: PUSH
18074: LD_INT 22
18076: PUSH
18077: LD_OWVAR 2
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: PUSH
18086: LD_INT 21
18088: PUSH
18089: LD_INT 1
18091: PUSH
18092: EMPTY
18093: LIST
18094: LIST
18095: PUSH
18096: LD_INT 3
18098: PUSH
18099: LD_INT 23
18101: PUSH
18102: LD_INT 0
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PUSH
18109: EMPTY
18110: LIST
18111: LIST
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: LIST
18117: PPUSH
18118: CALL_OW 69
18122: PUSH
18123: FOR_IN
18124: IFFALSE 18178
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18126: LD_VAR 0 1
18130: PPUSH
18131: CALL_OW 257
18135: PUSH
18136: LD_INT 1
18138: PUSH
18139: LD_INT 2
18141: PUSH
18142: LD_INT 3
18144: PUSH
18145: LD_INT 4
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: IN
18154: IFFALSE 18176
// SetClass ( un , rand ( 1 , 4 ) ) ;
18156: LD_VAR 0 1
18160: PPUSH
18161: LD_INT 1
18163: PPUSH
18164: LD_INT 4
18166: PPUSH
18167: CALL_OW 12
18171: PPUSH
18172: CALL_OW 336
18176: GO 18123
18178: POP
18179: POP
// end ;
18180: PPOPN 1
18182: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18183: LD_EXP 47
18187: PUSH
18188: LD_EXP 59
18192: AND
18193: IFFALSE 18272
18195: GO 18197
18197: DISABLE
18198: LD_INT 0
18200: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18201: LD_ADDR_VAR 0 1
18205: PUSH
18206: LD_INT 22
18208: PUSH
18209: LD_OWVAR 2
18213: PUSH
18214: EMPTY
18215: LIST
18216: LIST
18217: PUSH
18218: LD_INT 21
18220: PUSH
18221: LD_INT 3
18223: PUSH
18224: EMPTY
18225: LIST
18226: LIST
18227: PUSH
18228: EMPTY
18229: LIST
18230: LIST
18231: PPUSH
18232: CALL_OW 69
18236: ST_TO_ADDR
// if not tmp then
18237: LD_VAR 0 1
18241: NOT
18242: IFFALSE 18246
// exit ;
18244: GO 18272
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18246: LD_VAR 0 1
18250: PUSH
18251: LD_INT 1
18253: PPUSH
18254: LD_VAR 0 1
18258: PPUSH
18259: CALL_OW 12
18263: ARRAY
18264: PPUSH
18265: LD_INT 100
18267: PPUSH
18268: CALL_OW 234
// end ;
18272: PPOPN 1
18274: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18275: LD_EXP 47
18279: PUSH
18280: LD_EXP 61
18284: AND
18285: IFFALSE 18383
18287: GO 18289
18289: DISABLE
18290: LD_INT 0
18292: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18293: LD_ADDR_VAR 0 1
18297: PUSH
18298: LD_INT 22
18300: PUSH
18301: LD_OWVAR 2
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: PUSH
18310: LD_INT 21
18312: PUSH
18313: LD_INT 1
18315: PUSH
18316: EMPTY
18317: LIST
18318: LIST
18319: PUSH
18320: EMPTY
18321: LIST
18322: LIST
18323: PPUSH
18324: CALL_OW 69
18328: ST_TO_ADDR
// if not tmp then
18329: LD_VAR 0 1
18333: NOT
18334: IFFALSE 18338
// exit ;
18336: GO 18383
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18338: LD_VAR 0 1
18342: PUSH
18343: LD_INT 1
18345: PPUSH
18346: LD_VAR 0 1
18350: PPUSH
18351: CALL_OW 12
18355: ARRAY
18356: PPUSH
18357: LD_INT 1
18359: PPUSH
18360: LD_INT 4
18362: PPUSH
18363: CALL_OW 12
18367: PPUSH
18368: LD_INT 3000
18370: PPUSH
18371: LD_INT 9000
18373: PPUSH
18374: CALL_OW 12
18378: PPUSH
18379: CALL_OW 492
// end ;
18383: PPOPN 1
18385: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18386: LD_EXP 47
18390: PUSH
18391: LD_EXP 62
18395: AND
18396: IFFALSE 18416
18398: GO 18400
18400: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18401: LD_INT 1
18403: PPUSH
18404: LD_OWVAR 2
18408: PPUSH
18409: LD_INT 0
18411: PPUSH
18412: CALL_OW 324
18416: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18417: LD_EXP 47
18421: PUSH
18422: LD_EXP 63
18426: AND
18427: IFFALSE 18510
18429: GO 18431
18431: DISABLE
18432: LD_INT 0
18434: PPUSH
18435: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18436: LD_ADDR_VAR 0 2
18440: PUSH
18441: LD_INT 22
18443: PUSH
18444: LD_OWVAR 2
18448: PUSH
18449: EMPTY
18450: LIST
18451: LIST
18452: PUSH
18453: LD_INT 21
18455: PUSH
18456: LD_INT 3
18458: PUSH
18459: EMPTY
18460: LIST
18461: LIST
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: PPUSH
18467: CALL_OW 69
18471: ST_TO_ADDR
// if not tmp then
18472: LD_VAR 0 2
18476: NOT
18477: IFFALSE 18481
// exit ;
18479: GO 18510
// for i in tmp do
18481: LD_ADDR_VAR 0 1
18485: PUSH
18486: LD_VAR 0 2
18490: PUSH
18491: FOR_IN
18492: IFFALSE 18508
// SetBLevel ( i , 10 ) ;
18494: LD_VAR 0 1
18498: PPUSH
18499: LD_INT 10
18501: PPUSH
18502: CALL_OW 241
18506: GO 18491
18508: POP
18509: POP
// end ;
18510: PPOPN 2
18512: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18513: LD_EXP 47
18517: PUSH
18518: LD_EXP 64
18522: AND
18523: IFFALSE 18634
18525: GO 18527
18527: DISABLE
18528: LD_INT 0
18530: PPUSH
18531: PPUSH
18532: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18533: LD_ADDR_VAR 0 3
18537: PUSH
18538: LD_INT 22
18540: PUSH
18541: LD_OWVAR 2
18545: PUSH
18546: EMPTY
18547: LIST
18548: LIST
18549: PUSH
18550: LD_INT 25
18552: PUSH
18553: LD_INT 1
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: PPUSH
18564: CALL_OW 69
18568: ST_TO_ADDR
// if not tmp then
18569: LD_VAR 0 3
18573: NOT
18574: IFFALSE 18578
// exit ;
18576: GO 18634
// un := tmp [ rand ( 1 , tmp ) ] ;
18578: LD_ADDR_VAR 0 2
18582: PUSH
18583: LD_VAR 0 3
18587: PUSH
18588: LD_INT 1
18590: PPUSH
18591: LD_VAR 0 3
18595: PPUSH
18596: CALL_OW 12
18600: ARRAY
18601: ST_TO_ADDR
// if Crawls ( un ) then
18602: LD_VAR 0 2
18606: PPUSH
18607: CALL_OW 318
18611: IFFALSE 18622
// ComWalk ( un ) ;
18613: LD_VAR 0 2
18617: PPUSH
18618: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18622: LD_VAR 0 2
18626: PPUSH
18627: LD_INT 5
18629: PPUSH
18630: CALL_OW 336
// end ;
18634: PPOPN 3
18636: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18637: LD_EXP 47
18641: PUSH
18642: LD_EXP 65
18646: AND
18647: PUSH
18648: LD_OWVAR 67
18652: PUSH
18653: LD_INT 4
18655: LESS
18656: AND
18657: IFFALSE 18676
18659: GO 18661
18661: DISABLE
// begin Difficulty := Difficulty + 1 ;
18662: LD_ADDR_OWVAR 67
18666: PUSH
18667: LD_OWVAR 67
18671: PUSH
18672: LD_INT 1
18674: PLUS
18675: ST_TO_ADDR
// end ;
18676: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18677: LD_EXP 47
18681: PUSH
18682: LD_EXP 66
18686: AND
18687: IFFALSE 18790
18689: GO 18691
18691: DISABLE
18692: LD_INT 0
18694: PPUSH
// begin for i := 1 to 5 do
18695: LD_ADDR_VAR 0 1
18699: PUSH
18700: DOUBLE
18701: LD_INT 1
18703: DEC
18704: ST_TO_ADDR
18705: LD_INT 5
18707: PUSH
18708: FOR_TO
18709: IFFALSE 18788
// begin uc_nation := nation_nature ;
18711: LD_ADDR_OWVAR 21
18715: PUSH
18716: LD_INT 0
18718: ST_TO_ADDR
// uc_side := 0 ;
18719: LD_ADDR_OWVAR 20
18723: PUSH
18724: LD_INT 0
18726: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18727: LD_ADDR_OWVAR 29
18731: PUSH
18732: LD_INT 12
18734: PUSH
18735: LD_INT 12
18737: PUSH
18738: EMPTY
18739: LIST
18740: LIST
18741: ST_TO_ADDR
// hc_agressivity := 20 ;
18742: LD_ADDR_OWVAR 35
18746: PUSH
18747: LD_INT 20
18749: ST_TO_ADDR
// hc_class := class_tiger ;
18750: LD_ADDR_OWVAR 28
18754: PUSH
18755: LD_INT 14
18757: ST_TO_ADDR
// hc_gallery :=  ;
18758: LD_ADDR_OWVAR 33
18762: PUSH
18763: LD_STRING 
18765: ST_TO_ADDR
// hc_name :=  ;
18766: LD_ADDR_OWVAR 26
18770: PUSH
18771: LD_STRING 
18773: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18774: CALL_OW 44
18778: PPUSH
18779: LD_INT 0
18781: PPUSH
18782: CALL_OW 51
// end ;
18786: GO 18708
18788: POP
18789: POP
// end ;
18790: PPOPN 1
18792: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18793: LD_EXP 47
18797: PUSH
18798: LD_EXP 67
18802: AND
18803: IFFALSE 18812
18805: GO 18807
18807: DISABLE
// StreamSibBomb ;
18808: CALL 18813 0 0
18812: END
// export function StreamSibBomb ; var i , x , y ; begin
18813: LD_INT 0
18815: PPUSH
18816: PPUSH
18817: PPUSH
18818: PPUSH
// result := false ;
18819: LD_ADDR_VAR 0 1
18823: PUSH
18824: LD_INT 0
18826: ST_TO_ADDR
// for i := 1 to 16 do
18827: LD_ADDR_VAR 0 2
18831: PUSH
18832: DOUBLE
18833: LD_INT 1
18835: DEC
18836: ST_TO_ADDR
18837: LD_INT 16
18839: PUSH
18840: FOR_TO
18841: IFFALSE 19040
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18843: LD_ADDR_VAR 0 3
18847: PUSH
18848: LD_INT 10
18850: PUSH
18851: LD_INT 20
18853: PUSH
18854: LD_INT 30
18856: PUSH
18857: LD_INT 40
18859: PUSH
18860: LD_INT 50
18862: PUSH
18863: LD_INT 60
18865: PUSH
18866: LD_INT 70
18868: PUSH
18869: LD_INT 80
18871: PUSH
18872: LD_INT 90
18874: PUSH
18875: LD_INT 100
18877: PUSH
18878: LD_INT 110
18880: PUSH
18881: LD_INT 120
18883: PUSH
18884: LD_INT 130
18886: PUSH
18887: LD_INT 140
18889: PUSH
18890: LD_INT 150
18892: PUSH
18893: EMPTY
18894: LIST
18895: LIST
18896: LIST
18897: LIST
18898: LIST
18899: LIST
18900: LIST
18901: LIST
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: PUSH
18910: LD_INT 1
18912: PPUSH
18913: LD_INT 15
18915: PPUSH
18916: CALL_OW 12
18920: ARRAY
18921: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18922: LD_ADDR_VAR 0 4
18926: PUSH
18927: LD_INT 10
18929: PUSH
18930: LD_INT 20
18932: PUSH
18933: LD_INT 30
18935: PUSH
18936: LD_INT 40
18938: PUSH
18939: LD_INT 50
18941: PUSH
18942: LD_INT 60
18944: PUSH
18945: LD_INT 70
18947: PUSH
18948: LD_INT 80
18950: PUSH
18951: LD_INT 90
18953: PUSH
18954: LD_INT 100
18956: PUSH
18957: LD_INT 110
18959: PUSH
18960: LD_INT 120
18962: PUSH
18963: LD_INT 130
18965: PUSH
18966: LD_INT 140
18968: PUSH
18969: LD_INT 150
18971: PUSH
18972: EMPTY
18973: LIST
18974: LIST
18975: LIST
18976: LIST
18977: LIST
18978: LIST
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: PUSH
18989: LD_INT 1
18991: PPUSH
18992: LD_INT 15
18994: PPUSH
18995: CALL_OW 12
18999: ARRAY
19000: ST_TO_ADDR
// if ValidHex ( x , y ) then
19001: LD_VAR 0 3
19005: PPUSH
19006: LD_VAR 0 4
19010: PPUSH
19011: CALL_OW 488
19015: IFFALSE 19038
// begin result := [ x , y ] ;
19017: LD_ADDR_VAR 0 1
19021: PUSH
19022: LD_VAR 0 3
19026: PUSH
19027: LD_VAR 0 4
19031: PUSH
19032: EMPTY
19033: LIST
19034: LIST
19035: ST_TO_ADDR
// break ;
19036: GO 19040
// end ; end ;
19038: GO 18840
19040: POP
19041: POP
// if result then
19042: LD_VAR 0 1
19046: IFFALSE 19106
// begin ToLua ( playSibBomb() ) ;
19048: LD_STRING playSibBomb()
19050: PPUSH
19051: CALL_OW 559
// wait ( 0 0$14 ) ;
19055: LD_INT 490
19057: PPUSH
19058: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19062: LD_VAR 0 1
19066: PUSH
19067: LD_INT 1
19069: ARRAY
19070: PPUSH
19071: LD_VAR 0 1
19075: PUSH
19076: LD_INT 2
19078: ARRAY
19079: PPUSH
19080: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19084: LD_VAR 0 1
19088: PUSH
19089: LD_INT 1
19091: ARRAY
19092: PPUSH
19093: LD_VAR 0 1
19097: PUSH
19098: LD_INT 2
19100: ARRAY
19101: PPUSH
19102: CALL_OW 429
// end ; end ;
19106: LD_VAR 0 1
19110: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19111: LD_EXP 47
19115: PUSH
19116: LD_EXP 69
19120: AND
19121: IFFALSE 19133
19123: GO 19125
19125: DISABLE
// YouLost (  ) ;
19126: LD_STRING 
19128: PPUSH
19129: CALL_OW 104
19133: END
// every 0 0$1 trigger StreamModeActive and sFog do
19134: LD_EXP 47
19138: PUSH
19139: LD_EXP 68
19143: AND
19144: IFFALSE 19158
19146: GO 19148
19148: DISABLE
// FogOff ( your_side ) ;
19149: LD_OWVAR 2
19153: PPUSH
19154: CALL_OW 344
19158: END
// every 0 0$1 trigger StreamModeActive and sSun do
19159: LD_EXP 47
19163: PUSH
19164: LD_EXP 70
19168: AND
19169: IFFALSE 19197
19171: GO 19173
19173: DISABLE
// begin solar_recharge_percent := 0 ;
19174: LD_ADDR_OWVAR 79
19178: PUSH
19179: LD_INT 0
19181: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19182: LD_INT 10500
19184: PPUSH
19185: CALL_OW 67
// solar_recharge_percent := 100 ;
19189: LD_ADDR_OWVAR 79
19193: PUSH
19194: LD_INT 100
19196: ST_TO_ADDR
// end ;
19197: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19198: LD_EXP 47
19202: PUSH
19203: LD_EXP 71
19207: AND
19208: IFFALSE 19447
19210: GO 19212
19212: DISABLE
19213: LD_INT 0
19215: PPUSH
19216: PPUSH
19217: PPUSH
// begin tmp := [ ] ;
19218: LD_ADDR_VAR 0 3
19222: PUSH
19223: EMPTY
19224: ST_TO_ADDR
// for i := 1 to 6 do
19225: LD_ADDR_VAR 0 1
19229: PUSH
19230: DOUBLE
19231: LD_INT 1
19233: DEC
19234: ST_TO_ADDR
19235: LD_INT 6
19237: PUSH
19238: FOR_TO
19239: IFFALSE 19344
// begin uc_nation := nation_nature ;
19241: LD_ADDR_OWVAR 21
19245: PUSH
19246: LD_INT 0
19248: ST_TO_ADDR
// uc_side := 0 ;
19249: LD_ADDR_OWVAR 20
19253: PUSH
19254: LD_INT 0
19256: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19257: LD_ADDR_OWVAR 29
19261: PUSH
19262: LD_INT 12
19264: PUSH
19265: LD_INT 12
19267: PUSH
19268: EMPTY
19269: LIST
19270: LIST
19271: ST_TO_ADDR
// hc_agressivity := 20 ;
19272: LD_ADDR_OWVAR 35
19276: PUSH
19277: LD_INT 20
19279: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19280: LD_ADDR_OWVAR 28
19284: PUSH
19285: LD_INT 17
19287: ST_TO_ADDR
// hc_gallery :=  ;
19288: LD_ADDR_OWVAR 33
19292: PUSH
19293: LD_STRING 
19295: ST_TO_ADDR
// hc_name :=  ;
19296: LD_ADDR_OWVAR 26
19300: PUSH
19301: LD_STRING 
19303: ST_TO_ADDR
// un := CreateHuman ;
19304: LD_ADDR_VAR 0 2
19308: PUSH
19309: CALL_OW 44
19313: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19314: LD_VAR 0 2
19318: PPUSH
19319: LD_INT 1
19321: PPUSH
19322: CALL_OW 51
// tmp := tmp ^ un ;
19326: LD_ADDR_VAR 0 3
19330: PUSH
19331: LD_VAR 0 3
19335: PUSH
19336: LD_VAR 0 2
19340: ADD
19341: ST_TO_ADDR
// end ;
19342: GO 19238
19344: POP
19345: POP
// repeat wait ( 0 0$1 ) ;
19346: LD_INT 35
19348: PPUSH
19349: CALL_OW 67
// for un in tmp do
19353: LD_ADDR_VAR 0 2
19357: PUSH
19358: LD_VAR 0 3
19362: PUSH
19363: FOR_IN
19364: IFFALSE 19438
// begin if IsDead ( un ) then
19366: LD_VAR 0 2
19370: PPUSH
19371: CALL_OW 301
19375: IFFALSE 19395
// begin tmp := tmp diff un ;
19377: LD_ADDR_VAR 0 3
19381: PUSH
19382: LD_VAR 0 3
19386: PUSH
19387: LD_VAR 0 2
19391: DIFF
19392: ST_TO_ADDR
// continue ;
19393: GO 19363
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19395: LD_VAR 0 2
19399: PPUSH
19400: LD_INT 3
19402: PUSH
19403: LD_INT 22
19405: PUSH
19406: LD_INT 0
19408: PUSH
19409: EMPTY
19410: LIST
19411: LIST
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: PPUSH
19417: CALL_OW 69
19421: PPUSH
19422: LD_VAR 0 2
19426: PPUSH
19427: CALL_OW 74
19431: PPUSH
19432: CALL_OW 115
// end ;
19436: GO 19363
19438: POP
19439: POP
// until not tmp ;
19440: LD_VAR 0 3
19444: NOT
19445: IFFALSE 19346
// end ;
19447: PPOPN 3
19449: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19450: LD_EXP 47
19454: PUSH
19455: LD_EXP 72
19459: AND
19460: IFFALSE 19514
19462: GO 19464
19464: DISABLE
// begin ToLua ( displayTroll(); ) ;
19465: LD_STRING displayTroll();
19467: PPUSH
19468: CALL_OW 559
// wait ( 3 3$00 ) ;
19472: LD_INT 6300
19474: PPUSH
19475: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19479: LD_STRING hideTroll();
19481: PPUSH
19482: CALL_OW 559
// wait ( 1 1$00 ) ;
19486: LD_INT 2100
19488: PPUSH
19489: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19493: LD_STRING displayTroll();
19495: PPUSH
19496: CALL_OW 559
// wait ( 1 1$00 ) ;
19500: LD_INT 2100
19502: PPUSH
19503: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19507: LD_STRING hideTroll();
19509: PPUSH
19510: CALL_OW 559
// end ;
19514: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19515: LD_EXP 47
19519: PUSH
19520: LD_EXP 73
19524: AND
19525: IFFALSE 19588
19527: GO 19529
19529: DISABLE
19530: LD_INT 0
19532: PPUSH
// begin p := 0 ;
19533: LD_ADDR_VAR 0 1
19537: PUSH
19538: LD_INT 0
19540: ST_TO_ADDR
// repeat game_speed := 1 ;
19541: LD_ADDR_OWVAR 65
19545: PUSH
19546: LD_INT 1
19548: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19549: LD_INT 35
19551: PPUSH
19552: CALL_OW 67
// p := p + 1 ;
19556: LD_ADDR_VAR 0 1
19560: PUSH
19561: LD_VAR 0 1
19565: PUSH
19566: LD_INT 1
19568: PLUS
19569: ST_TO_ADDR
// until p >= 60 ;
19570: LD_VAR 0 1
19574: PUSH
19575: LD_INT 60
19577: GREATEREQUAL
19578: IFFALSE 19541
// game_speed := 4 ;
19580: LD_ADDR_OWVAR 65
19584: PUSH
19585: LD_INT 4
19587: ST_TO_ADDR
// end ;
19588: PPOPN 1
19590: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19591: LD_EXP 47
19595: PUSH
19596: LD_EXP 74
19600: AND
19601: IFFALSE 19747
19603: GO 19605
19605: DISABLE
19606: LD_INT 0
19608: PPUSH
19609: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19610: LD_ADDR_VAR 0 1
19614: PUSH
19615: LD_INT 22
19617: PUSH
19618: LD_OWVAR 2
19622: PUSH
19623: EMPTY
19624: LIST
19625: LIST
19626: PUSH
19627: LD_INT 2
19629: PUSH
19630: LD_INT 30
19632: PUSH
19633: LD_INT 0
19635: PUSH
19636: EMPTY
19637: LIST
19638: LIST
19639: PUSH
19640: LD_INT 30
19642: PUSH
19643: LD_INT 1
19645: PUSH
19646: EMPTY
19647: LIST
19648: LIST
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: LIST
19654: PUSH
19655: EMPTY
19656: LIST
19657: LIST
19658: PPUSH
19659: CALL_OW 69
19663: ST_TO_ADDR
// if not depot then
19664: LD_VAR 0 1
19668: NOT
19669: IFFALSE 19673
// exit ;
19671: GO 19747
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19673: LD_ADDR_VAR 0 2
19677: PUSH
19678: LD_VAR 0 1
19682: PUSH
19683: LD_INT 1
19685: PPUSH
19686: LD_VAR 0 1
19690: PPUSH
19691: CALL_OW 12
19695: ARRAY
19696: PPUSH
19697: CALL_OW 274
19701: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19702: LD_VAR 0 2
19706: PPUSH
19707: LD_INT 1
19709: PPUSH
19710: LD_INT 0
19712: PPUSH
19713: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19717: LD_VAR 0 2
19721: PPUSH
19722: LD_INT 2
19724: PPUSH
19725: LD_INT 0
19727: PPUSH
19728: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19732: LD_VAR 0 2
19736: PPUSH
19737: LD_INT 3
19739: PPUSH
19740: LD_INT 0
19742: PPUSH
19743: CALL_OW 277
// end ;
19747: PPOPN 2
19749: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19750: LD_EXP 47
19754: PUSH
19755: LD_EXP 75
19759: AND
19760: IFFALSE 19857
19762: GO 19764
19764: DISABLE
19765: LD_INT 0
19767: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19768: LD_ADDR_VAR 0 1
19772: PUSH
19773: LD_INT 22
19775: PUSH
19776: LD_OWVAR 2
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: PUSH
19785: LD_INT 21
19787: PUSH
19788: LD_INT 1
19790: PUSH
19791: EMPTY
19792: LIST
19793: LIST
19794: PUSH
19795: LD_INT 3
19797: PUSH
19798: LD_INT 23
19800: PUSH
19801: LD_INT 0
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PUSH
19808: EMPTY
19809: LIST
19810: LIST
19811: PUSH
19812: EMPTY
19813: LIST
19814: LIST
19815: LIST
19816: PPUSH
19817: CALL_OW 69
19821: ST_TO_ADDR
// if not tmp then
19822: LD_VAR 0 1
19826: NOT
19827: IFFALSE 19831
// exit ;
19829: GO 19857
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19831: LD_VAR 0 1
19835: PUSH
19836: LD_INT 1
19838: PPUSH
19839: LD_VAR 0 1
19843: PPUSH
19844: CALL_OW 12
19848: ARRAY
19849: PPUSH
19850: LD_INT 200
19852: PPUSH
19853: CALL_OW 234
// end ;
19857: PPOPN 1
19859: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19860: LD_EXP 47
19864: PUSH
19865: LD_EXP 76
19869: AND
19870: IFFALSE 19949
19872: GO 19874
19874: DISABLE
19875: LD_INT 0
19877: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19878: LD_ADDR_VAR 0 1
19882: PUSH
19883: LD_INT 22
19885: PUSH
19886: LD_OWVAR 2
19890: PUSH
19891: EMPTY
19892: LIST
19893: LIST
19894: PUSH
19895: LD_INT 21
19897: PUSH
19898: LD_INT 2
19900: PUSH
19901: EMPTY
19902: LIST
19903: LIST
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: PPUSH
19909: CALL_OW 69
19913: ST_TO_ADDR
// if not tmp then
19914: LD_VAR 0 1
19918: NOT
19919: IFFALSE 19923
// exit ;
19921: GO 19949
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19923: LD_VAR 0 1
19927: PUSH
19928: LD_INT 1
19930: PPUSH
19931: LD_VAR 0 1
19935: PPUSH
19936: CALL_OW 12
19940: ARRAY
19941: PPUSH
19942: LD_INT 60
19944: PPUSH
19945: CALL_OW 234
// end ;
19949: PPOPN 1
19951: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19952: LD_EXP 47
19956: PUSH
19957: LD_EXP 77
19961: AND
19962: IFFALSE 20061
19964: GO 19966
19966: DISABLE
19967: LD_INT 0
19969: PPUSH
19970: PPUSH
// begin enable ;
19971: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19972: LD_ADDR_VAR 0 1
19976: PUSH
19977: LD_INT 22
19979: PUSH
19980: LD_OWVAR 2
19984: PUSH
19985: EMPTY
19986: LIST
19987: LIST
19988: PUSH
19989: LD_INT 61
19991: PUSH
19992: EMPTY
19993: LIST
19994: PUSH
19995: LD_INT 33
19997: PUSH
19998: LD_INT 2
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: PUSH
20005: EMPTY
20006: LIST
20007: LIST
20008: LIST
20009: PPUSH
20010: CALL_OW 69
20014: ST_TO_ADDR
// if not tmp then
20015: LD_VAR 0 1
20019: NOT
20020: IFFALSE 20024
// exit ;
20022: GO 20061
// for i in tmp do
20024: LD_ADDR_VAR 0 2
20028: PUSH
20029: LD_VAR 0 1
20033: PUSH
20034: FOR_IN
20035: IFFALSE 20059
// if IsControledBy ( i ) then
20037: LD_VAR 0 2
20041: PPUSH
20042: CALL_OW 312
20046: IFFALSE 20057
// ComUnlink ( i ) ;
20048: LD_VAR 0 2
20052: PPUSH
20053: CALL_OW 136
20057: GO 20034
20059: POP
20060: POP
// end ;
20061: PPOPN 2
20063: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20064: LD_EXP 47
20068: PUSH
20069: LD_EXP 78
20073: AND
20074: IFFALSE 20214
20076: GO 20078
20078: DISABLE
20079: LD_INT 0
20081: PPUSH
20082: PPUSH
// begin ToLua ( displayPowell(); ) ;
20083: LD_STRING displayPowell();
20085: PPUSH
20086: CALL_OW 559
// uc_side := 0 ;
20090: LD_ADDR_OWVAR 20
20094: PUSH
20095: LD_INT 0
20097: ST_TO_ADDR
// uc_nation := 2 ;
20098: LD_ADDR_OWVAR 21
20102: PUSH
20103: LD_INT 2
20105: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20106: LD_ADDR_OWVAR 37
20110: PUSH
20111: LD_INT 14
20113: ST_TO_ADDR
// vc_engine := engine_siberite ;
20114: LD_ADDR_OWVAR 39
20118: PUSH
20119: LD_INT 3
20121: ST_TO_ADDR
// vc_control := control_apeman ;
20122: LD_ADDR_OWVAR 38
20126: PUSH
20127: LD_INT 5
20129: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20130: LD_ADDR_OWVAR 40
20134: PUSH
20135: LD_INT 29
20137: ST_TO_ADDR
// un := CreateVehicle ;
20138: LD_ADDR_VAR 0 2
20142: PUSH
20143: CALL_OW 45
20147: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20148: LD_VAR 0 2
20152: PPUSH
20153: LD_INT 1
20155: PPUSH
20156: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20160: LD_INT 35
20162: PPUSH
20163: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20167: LD_VAR 0 2
20171: PPUSH
20172: LD_INT 22
20174: PUSH
20175: LD_OWVAR 2
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: PPUSH
20184: CALL_OW 69
20188: PPUSH
20189: LD_VAR 0 2
20193: PPUSH
20194: CALL_OW 74
20198: PPUSH
20199: CALL_OW 115
// until IsDead ( un ) ;
20203: LD_VAR 0 2
20207: PPUSH
20208: CALL_OW 301
20212: IFFALSE 20160
// end ;
20214: PPOPN 2
20216: END
// every 0 0$1 trigger StreamModeActive and sStu do
20217: LD_EXP 47
20221: PUSH
20222: LD_EXP 86
20226: AND
20227: IFFALSE 20243
20229: GO 20231
20231: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20232: LD_STRING displayStucuk();
20234: PPUSH
20235: CALL_OW 559
// ResetFog ;
20239: CALL_OW 335
// end ;
20243: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20244: LD_EXP 47
20248: PUSH
20249: LD_EXP 79
20253: AND
20254: IFFALSE 20395
20256: GO 20258
20258: DISABLE
20259: LD_INT 0
20261: PPUSH
20262: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20263: LD_ADDR_VAR 0 2
20267: PUSH
20268: LD_INT 22
20270: PUSH
20271: LD_OWVAR 2
20275: PUSH
20276: EMPTY
20277: LIST
20278: LIST
20279: PUSH
20280: LD_INT 21
20282: PUSH
20283: LD_INT 1
20285: PUSH
20286: EMPTY
20287: LIST
20288: LIST
20289: PUSH
20290: EMPTY
20291: LIST
20292: LIST
20293: PPUSH
20294: CALL_OW 69
20298: ST_TO_ADDR
// if not tmp then
20299: LD_VAR 0 2
20303: NOT
20304: IFFALSE 20308
// exit ;
20306: GO 20395
// un := tmp [ rand ( 1 , tmp ) ] ;
20308: LD_ADDR_VAR 0 1
20312: PUSH
20313: LD_VAR 0 2
20317: PUSH
20318: LD_INT 1
20320: PPUSH
20321: LD_VAR 0 2
20325: PPUSH
20326: CALL_OW 12
20330: ARRAY
20331: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20332: LD_VAR 0 1
20336: PPUSH
20337: LD_INT 0
20339: PPUSH
20340: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20344: LD_VAR 0 1
20348: PPUSH
20349: LD_OWVAR 3
20353: PUSH
20354: LD_VAR 0 1
20358: DIFF
20359: PPUSH
20360: LD_VAR 0 1
20364: PPUSH
20365: CALL_OW 74
20369: PPUSH
20370: CALL_OW 115
// wait ( 0 0$20 ) ;
20374: LD_INT 700
20376: PPUSH
20377: CALL_OW 67
// SetSide ( un , your_side ) ;
20381: LD_VAR 0 1
20385: PPUSH
20386: LD_OWVAR 2
20390: PPUSH
20391: CALL_OW 235
// end ;
20395: PPOPN 2
20397: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20398: LD_EXP 47
20402: PUSH
20403: LD_EXP 80
20407: AND
20408: IFFALSE 20514
20410: GO 20412
20412: DISABLE
20413: LD_INT 0
20415: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20416: LD_ADDR_VAR 0 1
20420: PUSH
20421: LD_INT 22
20423: PUSH
20424: LD_OWVAR 2
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: PUSH
20433: LD_INT 2
20435: PUSH
20436: LD_INT 30
20438: PUSH
20439: LD_INT 0
20441: PUSH
20442: EMPTY
20443: LIST
20444: LIST
20445: PUSH
20446: LD_INT 30
20448: PUSH
20449: LD_INT 1
20451: PUSH
20452: EMPTY
20453: LIST
20454: LIST
20455: PUSH
20456: EMPTY
20457: LIST
20458: LIST
20459: LIST
20460: PUSH
20461: EMPTY
20462: LIST
20463: LIST
20464: PPUSH
20465: CALL_OW 69
20469: ST_TO_ADDR
// if not depot then
20470: LD_VAR 0 1
20474: NOT
20475: IFFALSE 20479
// exit ;
20477: GO 20514
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20479: LD_VAR 0 1
20483: PUSH
20484: LD_INT 1
20486: ARRAY
20487: PPUSH
20488: CALL_OW 250
20492: PPUSH
20493: LD_VAR 0 1
20497: PUSH
20498: LD_INT 1
20500: ARRAY
20501: PPUSH
20502: CALL_OW 251
20506: PPUSH
20507: LD_INT 70
20509: PPUSH
20510: CALL_OW 495
// end ;
20514: PPOPN 1
20516: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20517: LD_EXP 47
20521: PUSH
20522: LD_EXP 81
20526: AND
20527: IFFALSE 20738
20529: GO 20531
20531: DISABLE
20532: LD_INT 0
20534: PPUSH
20535: PPUSH
20536: PPUSH
20537: PPUSH
20538: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20539: LD_ADDR_VAR 0 5
20543: PUSH
20544: LD_INT 22
20546: PUSH
20547: LD_OWVAR 2
20551: PUSH
20552: EMPTY
20553: LIST
20554: LIST
20555: PUSH
20556: LD_INT 21
20558: PUSH
20559: LD_INT 1
20561: PUSH
20562: EMPTY
20563: LIST
20564: LIST
20565: PUSH
20566: EMPTY
20567: LIST
20568: LIST
20569: PPUSH
20570: CALL_OW 69
20574: ST_TO_ADDR
// if not tmp then
20575: LD_VAR 0 5
20579: NOT
20580: IFFALSE 20584
// exit ;
20582: GO 20738
// for i in tmp do
20584: LD_ADDR_VAR 0 1
20588: PUSH
20589: LD_VAR 0 5
20593: PUSH
20594: FOR_IN
20595: IFFALSE 20736
// begin d := rand ( 0 , 5 ) ;
20597: LD_ADDR_VAR 0 4
20601: PUSH
20602: LD_INT 0
20604: PPUSH
20605: LD_INT 5
20607: PPUSH
20608: CALL_OW 12
20612: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20613: LD_ADDR_VAR 0 2
20617: PUSH
20618: LD_VAR 0 1
20622: PPUSH
20623: CALL_OW 250
20627: PPUSH
20628: LD_VAR 0 4
20632: PPUSH
20633: LD_INT 3
20635: PPUSH
20636: LD_INT 12
20638: PPUSH
20639: CALL_OW 12
20643: PPUSH
20644: CALL_OW 272
20648: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20649: LD_ADDR_VAR 0 3
20653: PUSH
20654: LD_VAR 0 1
20658: PPUSH
20659: CALL_OW 251
20663: PPUSH
20664: LD_VAR 0 4
20668: PPUSH
20669: LD_INT 3
20671: PPUSH
20672: LD_INT 12
20674: PPUSH
20675: CALL_OW 12
20679: PPUSH
20680: CALL_OW 273
20684: ST_TO_ADDR
// if ValidHex ( x , y ) then
20685: LD_VAR 0 2
20689: PPUSH
20690: LD_VAR 0 3
20694: PPUSH
20695: CALL_OW 488
20699: IFFALSE 20734
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20701: LD_VAR 0 1
20705: PPUSH
20706: LD_VAR 0 2
20710: PPUSH
20711: LD_VAR 0 3
20715: PPUSH
20716: LD_INT 3
20718: PPUSH
20719: LD_INT 6
20721: PPUSH
20722: CALL_OW 12
20726: PPUSH
20727: LD_INT 1
20729: PPUSH
20730: CALL_OW 483
// end ;
20734: GO 20594
20736: POP
20737: POP
// end ;
20738: PPOPN 5
20740: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20741: LD_EXP 47
20745: PUSH
20746: LD_EXP 82
20750: AND
20751: IFFALSE 20845
20753: GO 20755
20755: DISABLE
20756: LD_INT 0
20758: PPUSH
20759: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20760: LD_ADDR_VAR 0 2
20764: PUSH
20765: LD_INT 22
20767: PUSH
20768: LD_OWVAR 2
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: PUSH
20777: LD_INT 32
20779: PUSH
20780: LD_INT 1
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: PUSH
20787: LD_INT 21
20789: PUSH
20790: LD_INT 2
20792: PUSH
20793: EMPTY
20794: LIST
20795: LIST
20796: PUSH
20797: EMPTY
20798: LIST
20799: LIST
20800: LIST
20801: PPUSH
20802: CALL_OW 69
20806: ST_TO_ADDR
// if not tmp then
20807: LD_VAR 0 2
20811: NOT
20812: IFFALSE 20816
// exit ;
20814: GO 20845
// for i in tmp do
20816: LD_ADDR_VAR 0 1
20820: PUSH
20821: LD_VAR 0 2
20825: PUSH
20826: FOR_IN
20827: IFFALSE 20843
// SetFuel ( i , 0 ) ;
20829: LD_VAR 0 1
20833: PPUSH
20834: LD_INT 0
20836: PPUSH
20837: CALL_OW 240
20841: GO 20826
20843: POP
20844: POP
// end ;
20845: PPOPN 2
20847: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20848: LD_EXP 47
20852: PUSH
20853: LD_EXP 83
20857: AND
20858: IFFALSE 20924
20860: GO 20862
20862: DISABLE
20863: LD_INT 0
20865: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20866: LD_ADDR_VAR 0 1
20870: PUSH
20871: LD_INT 22
20873: PUSH
20874: LD_OWVAR 2
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: PUSH
20883: LD_INT 30
20885: PUSH
20886: LD_INT 29
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: PUSH
20893: EMPTY
20894: LIST
20895: LIST
20896: PPUSH
20897: CALL_OW 69
20901: ST_TO_ADDR
// if not tmp then
20902: LD_VAR 0 1
20906: NOT
20907: IFFALSE 20911
// exit ;
20909: GO 20924
// DestroyUnit ( tmp [ 1 ] ) ;
20911: LD_VAR 0 1
20915: PUSH
20916: LD_INT 1
20918: ARRAY
20919: PPUSH
20920: CALL_OW 65
// end ;
20924: PPOPN 1
20926: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20927: LD_EXP 47
20931: PUSH
20932: LD_EXP 85
20936: AND
20937: IFFALSE 21066
20939: GO 20941
20941: DISABLE
20942: LD_INT 0
20944: PPUSH
// begin uc_side := 0 ;
20945: LD_ADDR_OWVAR 20
20949: PUSH
20950: LD_INT 0
20952: ST_TO_ADDR
// uc_nation := nation_arabian ;
20953: LD_ADDR_OWVAR 21
20957: PUSH
20958: LD_INT 2
20960: ST_TO_ADDR
// hc_gallery :=  ;
20961: LD_ADDR_OWVAR 33
20965: PUSH
20966: LD_STRING 
20968: ST_TO_ADDR
// hc_name :=  ;
20969: LD_ADDR_OWVAR 26
20973: PUSH
20974: LD_STRING 
20976: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20977: LD_INT 1
20979: PPUSH
20980: LD_INT 11
20982: PPUSH
20983: LD_INT 10
20985: PPUSH
20986: CALL_OW 380
// un := CreateHuman ;
20990: LD_ADDR_VAR 0 1
20994: PUSH
20995: CALL_OW 44
20999: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21000: LD_VAR 0 1
21004: PPUSH
21005: LD_INT 1
21007: PPUSH
21008: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21012: LD_INT 35
21014: PPUSH
21015: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21019: LD_VAR 0 1
21023: PPUSH
21024: LD_INT 22
21026: PUSH
21027: LD_OWVAR 2
21031: PUSH
21032: EMPTY
21033: LIST
21034: LIST
21035: PPUSH
21036: CALL_OW 69
21040: PPUSH
21041: LD_VAR 0 1
21045: PPUSH
21046: CALL_OW 74
21050: PPUSH
21051: CALL_OW 115
// until IsDead ( un ) ;
21055: LD_VAR 0 1
21059: PPUSH
21060: CALL_OW 301
21064: IFFALSE 21012
// end ;
21066: PPOPN 1
21068: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21069: LD_EXP 47
21073: PUSH
21074: LD_EXP 87
21078: AND
21079: IFFALSE 21091
21081: GO 21083
21083: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21084: LD_STRING earthquake(getX(game), 0, 32)
21086: PPUSH
21087: CALL_OW 559
21091: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21092: LD_EXP 47
21096: PUSH
21097: LD_EXP 88
21101: AND
21102: IFFALSE 21193
21104: GO 21106
21106: DISABLE
21107: LD_INT 0
21109: PPUSH
// begin enable ;
21110: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21111: LD_ADDR_VAR 0 1
21115: PUSH
21116: LD_INT 22
21118: PUSH
21119: LD_OWVAR 2
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: PUSH
21128: LD_INT 21
21130: PUSH
21131: LD_INT 2
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: PUSH
21138: LD_INT 33
21140: PUSH
21141: LD_INT 3
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: LIST
21152: PPUSH
21153: CALL_OW 69
21157: ST_TO_ADDR
// if not tmp then
21158: LD_VAR 0 1
21162: NOT
21163: IFFALSE 21167
// exit ;
21165: GO 21193
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21167: LD_VAR 0 1
21171: PUSH
21172: LD_INT 1
21174: PPUSH
21175: LD_VAR 0 1
21179: PPUSH
21180: CALL_OW 12
21184: ARRAY
21185: PPUSH
21186: LD_INT 1
21188: PPUSH
21189: CALL_OW 234
// end ;
21193: PPOPN 1
21195: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21196: LD_EXP 47
21200: PUSH
21201: LD_EXP 89
21205: AND
21206: IFFALSE 21347
21208: GO 21210
21210: DISABLE
21211: LD_INT 0
21213: PPUSH
21214: PPUSH
21215: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21216: LD_ADDR_VAR 0 3
21220: PUSH
21221: LD_INT 22
21223: PUSH
21224: LD_OWVAR 2
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PUSH
21233: LD_INT 25
21235: PUSH
21236: LD_INT 1
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: PUSH
21243: EMPTY
21244: LIST
21245: LIST
21246: PPUSH
21247: CALL_OW 69
21251: ST_TO_ADDR
// if not tmp then
21252: LD_VAR 0 3
21256: NOT
21257: IFFALSE 21261
// exit ;
21259: GO 21347
// un := tmp [ rand ( 1 , tmp ) ] ;
21261: LD_ADDR_VAR 0 2
21265: PUSH
21266: LD_VAR 0 3
21270: PUSH
21271: LD_INT 1
21273: PPUSH
21274: LD_VAR 0 3
21278: PPUSH
21279: CALL_OW 12
21283: ARRAY
21284: ST_TO_ADDR
// if Crawls ( un ) then
21285: LD_VAR 0 2
21289: PPUSH
21290: CALL_OW 318
21294: IFFALSE 21305
// ComWalk ( un ) ;
21296: LD_VAR 0 2
21300: PPUSH
21301: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21305: LD_VAR 0 2
21309: PPUSH
21310: LD_INT 9
21312: PPUSH
21313: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21317: LD_INT 28
21319: PPUSH
21320: LD_OWVAR 2
21324: PPUSH
21325: LD_INT 2
21327: PPUSH
21328: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21332: LD_INT 29
21334: PPUSH
21335: LD_OWVAR 2
21339: PPUSH
21340: LD_INT 2
21342: PPUSH
21343: CALL_OW 322
// end ;
21347: PPOPN 3
21349: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21350: LD_EXP 47
21354: PUSH
21355: LD_EXP 90
21359: AND
21360: IFFALSE 21471
21362: GO 21364
21364: DISABLE
21365: LD_INT 0
21367: PPUSH
21368: PPUSH
21369: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21370: LD_ADDR_VAR 0 3
21374: PUSH
21375: LD_INT 22
21377: PUSH
21378: LD_OWVAR 2
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: PUSH
21387: LD_INT 25
21389: PUSH
21390: LD_INT 1
21392: PUSH
21393: EMPTY
21394: LIST
21395: LIST
21396: PUSH
21397: EMPTY
21398: LIST
21399: LIST
21400: PPUSH
21401: CALL_OW 69
21405: ST_TO_ADDR
// if not tmp then
21406: LD_VAR 0 3
21410: NOT
21411: IFFALSE 21415
// exit ;
21413: GO 21471
// un := tmp [ rand ( 1 , tmp ) ] ;
21415: LD_ADDR_VAR 0 2
21419: PUSH
21420: LD_VAR 0 3
21424: PUSH
21425: LD_INT 1
21427: PPUSH
21428: LD_VAR 0 3
21432: PPUSH
21433: CALL_OW 12
21437: ARRAY
21438: ST_TO_ADDR
// if Crawls ( un ) then
21439: LD_VAR 0 2
21443: PPUSH
21444: CALL_OW 318
21448: IFFALSE 21459
// ComWalk ( un ) ;
21450: LD_VAR 0 2
21454: PPUSH
21455: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21459: LD_VAR 0 2
21463: PPUSH
21464: LD_INT 8
21466: PPUSH
21467: CALL_OW 336
// end ;
21471: PPOPN 3
21473: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21474: LD_EXP 47
21478: PUSH
21479: LD_EXP 91
21483: AND
21484: IFFALSE 21628
21486: GO 21488
21488: DISABLE
21489: LD_INT 0
21491: PPUSH
21492: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21493: LD_ADDR_VAR 0 2
21497: PUSH
21498: LD_INT 22
21500: PUSH
21501: LD_OWVAR 2
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: PUSH
21510: LD_INT 21
21512: PUSH
21513: LD_INT 2
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: PUSH
21520: LD_INT 2
21522: PUSH
21523: LD_INT 34
21525: PUSH
21526: LD_INT 12
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: PUSH
21533: LD_INT 34
21535: PUSH
21536: LD_INT 51
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: PUSH
21543: LD_INT 34
21545: PUSH
21546: LD_INT 32
21548: PUSH
21549: EMPTY
21550: LIST
21551: LIST
21552: PUSH
21553: EMPTY
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: LIST
21563: PPUSH
21564: CALL_OW 69
21568: ST_TO_ADDR
// if not tmp then
21569: LD_VAR 0 2
21573: NOT
21574: IFFALSE 21578
// exit ;
21576: GO 21628
// for i in tmp do
21578: LD_ADDR_VAR 0 1
21582: PUSH
21583: LD_VAR 0 2
21587: PUSH
21588: FOR_IN
21589: IFFALSE 21626
// if GetCargo ( i , mat_artifact ) = 0 then
21591: LD_VAR 0 1
21595: PPUSH
21596: LD_INT 4
21598: PPUSH
21599: CALL_OW 289
21603: PUSH
21604: LD_INT 0
21606: EQUAL
21607: IFFALSE 21624
// SetCargo ( i , mat_siberit , 100 ) ;
21609: LD_VAR 0 1
21613: PPUSH
21614: LD_INT 3
21616: PPUSH
21617: LD_INT 100
21619: PPUSH
21620: CALL_OW 290
21624: GO 21588
21626: POP
21627: POP
// end ;
21628: PPOPN 2
21630: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21631: LD_EXP 47
21635: PUSH
21636: LD_EXP 92
21640: AND
21641: IFFALSE 21824
21643: GO 21645
21645: DISABLE
21646: LD_INT 0
21648: PPUSH
21649: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21650: LD_ADDR_VAR 0 2
21654: PUSH
21655: LD_INT 22
21657: PUSH
21658: LD_OWVAR 2
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: PPUSH
21667: CALL_OW 69
21671: ST_TO_ADDR
// if not tmp then
21672: LD_VAR 0 2
21676: NOT
21677: IFFALSE 21681
// exit ;
21679: GO 21824
// for i := 1 to 2 do
21681: LD_ADDR_VAR 0 1
21685: PUSH
21686: DOUBLE
21687: LD_INT 1
21689: DEC
21690: ST_TO_ADDR
21691: LD_INT 2
21693: PUSH
21694: FOR_TO
21695: IFFALSE 21822
// begin uc_side := your_side ;
21697: LD_ADDR_OWVAR 20
21701: PUSH
21702: LD_OWVAR 2
21706: ST_TO_ADDR
// uc_nation := nation_american ;
21707: LD_ADDR_OWVAR 21
21711: PUSH
21712: LD_INT 1
21714: ST_TO_ADDR
// vc_chassis := us_morphling ;
21715: LD_ADDR_OWVAR 37
21719: PUSH
21720: LD_INT 5
21722: ST_TO_ADDR
// vc_engine := engine_siberite ;
21723: LD_ADDR_OWVAR 39
21727: PUSH
21728: LD_INT 3
21730: ST_TO_ADDR
// vc_control := control_computer ;
21731: LD_ADDR_OWVAR 38
21735: PUSH
21736: LD_INT 3
21738: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21739: LD_ADDR_OWVAR 40
21743: PUSH
21744: LD_INT 10
21746: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21747: LD_VAR 0 2
21751: PUSH
21752: LD_INT 1
21754: ARRAY
21755: PPUSH
21756: CALL_OW 310
21760: NOT
21761: IFFALSE 21808
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21763: CALL_OW 45
21767: PPUSH
21768: LD_VAR 0 2
21772: PUSH
21773: LD_INT 1
21775: ARRAY
21776: PPUSH
21777: CALL_OW 250
21781: PPUSH
21782: LD_VAR 0 2
21786: PUSH
21787: LD_INT 1
21789: ARRAY
21790: PPUSH
21791: CALL_OW 251
21795: PPUSH
21796: LD_INT 12
21798: PPUSH
21799: LD_INT 1
21801: PPUSH
21802: CALL_OW 50
21806: GO 21820
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21808: CALL_OW 45
21812: PPUSH
21813: LD_INT 1
21815: PPUSH
21816: CALL_OW 51
// end ;
21820: GO 21694
21822: POP
21823: POP
// end ;
21824: PPOPN 2
21826: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21827: LD_EXP 47
21831: PUSH
21832: LD_EXP 93
21836: AND
21837: IFFALSE 22059
21839: GO 21841
21841: DISABLE
21842: LD_INT 0
21844: PPUSH
21845: PPUSH
21846: PPUSH
21847: PPUSH
21848: PPUSH
21849: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21850: LD_ADDR_VAR 0 6
21854: PUSH
21855: LD_INT 22
21857: PUSH
21858: LD_OWVAR 2
21862: PUSH
21863: EMPTY
21864: LIST
21865: LIST
21866: PUSH
21867: LD_INT 21
21869: PUSH
21870: LD_INT 1
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: PUSH
21877: LD_INT 3
21879: PUSH
21880: LD_INT 23
21882: PUSH
21883: LD_INT 0
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: PUSH
21890: EMPTY
21891: LIST
21892: LIST
21893: PUSH
21894: EMPTY
21895: LIST
21896: LIST
21897: LIST
21898: PPUSH
21899: CALL_OW 69
21903: ST_TO_ADDR
// if not tmp then
21904: LD_VAR 0 6
21908: NOT
21909: IFFALSE 21913
// exit ;
21911: GO 22059
// s1 := rand ( 1 , 4 ) ;
21913: LD_ADDR_VAR 0 2
21917: PUSH
21918: LD_INT 1
21920: PPUSH
21921: LD_INT 4
21923: PPUSH
21924: CALL_OW 12
21928: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21929: LD_ADDR_VAR 0 4
21933: PUSH
21934: LD_VAR 0 6
21938: PUSH
21939: LD_INT 1
21941: ARRAY
21942: PPUSH
21943: LD_VAR 0 2
21947: PPUSH
21948: CALL_OW 259
21952: ST_TO_ADDR
// if s1 = 1 then
21953: LD_VAR 0 2
21957: PUSH
21958: LD_INT 1
21960: EQUAL
21961: IFFALSE 21981
// s2 := rand ( 2 , 4 ) else
21963: LD_ADDR_VAR 0 3
21967: PUSH
21968: LD_INT 2
21970: PPUSH
21971: LD_INT 4
21973: PPUSH
21974: CALL_OW 12
21978: ST_TO_ADDR
21979: GO 21989
// s2 := 1 ;
21981: LD_ADDR_VAR 0 3
21985: PUSH
21986: LD_INT 1
21988: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21989: LD_ADDR_VAR 0 5
21993: PUSH
21994: LD_VAR 0 6
21998: PUSH
21999: LD_INT 1
22001: ARRAY
22002: PPUSH
22003: LD_VAR 0 3
22007: PPUSH
22008: CALL_OW 259
22012: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22013: LD_VAR 0 6
22017: PUSH
22018: LD_INT 1
22020: ARRAY
22021: PPUSH
22022: LD_VAR 0 2
22026: PPUSH
22027: LD_VAR 0 5
22031: PPUSH
22032: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22036: LD_VAR 0 6
22040: PUSH
22041: LD_INT 1
22043: ARRAY
22044: PPUSH
22045: LD_VAR 0 3
22049: PPUSH
22050: LD_VAR 0 4
22054: PPUSH
22055: CALL_OW 237
// end ;
22059: PPOPN 6
22061: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22062: LD_EXP 47
22066: PUSH
22067: LD_EXP 94
22071: AND
22072: IFFALSE 22151
22074: GO 22076
22076: DISABLE
22077: LD_INT 0
22079: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22080: LD_ADDR_VAR 0 1
22084: PUSH
22085: LD_INT 22
22087: PUSH
22088: LD_OWVAR 2
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: PUSH
22097: LD_INT 30
22099: PUSH
22100: LD_INT 3
22102: PUSH
22103: EMPTY
22104: LIST
22105: LIST
22106: PUSH
22107: EMPTY
22108: LIST
22109: LIST
22110: PPUSH
22111: CALL_OW 69
22115: ST_TO_ADDR
// if not tmp then
22116: LD_VAR 0 1
22120: NOT
22121: IFFALSE 22125
// exit ;
22123: GO 22151
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22125: LD_VAR 0 1
22129: PUSH
22130: LD_INT 1
22132: PPUSH
22133: LD_VAR 0 1
22137: PPUSH
22138: CALL_OW 12
22142: ARRAY
22143: PPUSH
22144: LD_INT 1
22146: PPUSH
22147: CALL_OW 234
// end ;
22151: PPOPN 1
22153: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22154: LD_EXP 47
22158: PUSH
22159: LD_EXP 95
22163: AND
22164: IFFALSE 22276
22166: GO 22168
22168: DISABLE
22169: LD_INT 0
22171: PPUSH
22172: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22173: LD_ADDR_VAR 0 2
22177: PUSH
22178: LD_INT 22
22180: PUSH
22181: LD_OWVAR 2
22185: PUSH
22186: EMPTY
22187: LIST
22188: LIST
22189: PUSH
22190: LD_INT 2
22192: PUSH
22193: LD_INT 30
22195: PUSH
22196: LD_INT 27
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: PUSH
22203: LD_INT 30
22205: PUSH
22206: LD_INT 26
22208: PUSH
22209: EMPTY
22210: LIST
22211: LIST
22212: PUSH
22213: LD_INT 30
22215: PUSH
22216: LD_INT 28
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: PUSH
22223: EMPTY
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: PPUSH
22233: CALL_OW 69
22237: ST_TO_ADDR
// if not tmp then
22238: LD_VAR 0 2
22242: NOT
22243: IFFALSE 22247
// exit ;
22245: GO 22276
// for i in tmp do
22247: LD_ADDR_VAR 0 1
22251: PUSH
22252: LD_VAR 0 2
22256: PUSH
22257: FOR_IN
22258: IFFALSE 22274
// SetLives ( i , 1 ) ;
22260: LD_VAR 0 1
22264: PPUSH
22265: LD_INT 1
22267: PPUSH
22268: CALL_OW 234
22272: GO 22257
22274: POP
22275: POP
// end ;
22276: PPOPN 2
22278: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22279: LD_EXP 47
22283: PUSH
22284: LD_EXP 96
22288: AND
22289: IFFALSE 22576
22291: GO 22293
22293: DISABLE
22294: LD_INT 0
22296: PPUSH
22297: PPUSH
22298: PPUSH
// begin i := rand ( 1 , 7 ) ;
22299: LD_ADDR_VAR 0 1
22303: PUSH
22304: LD_INT 1
22306: PPUSH
22307: LD_INT 7
22309: PPUSH
22310: CALL_OW 12
22314: ST_TO_ADDR
// case i of 1 :
22315: LD_VAR 0 1
22319: PUSH
22320: LD_INT 1
22322: DOUBLE
22323: EQUAL
22324: IFTRUE 22328
22326: GO 22338
22328: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22329: LD_STRING earthquake(getX(game), 0, 32)
22331: PPUSH
22332: CALL_OW 559
22336: GO 22576
22338: LD_INT 2
22340: DOUBLE
22341: EQUAL
22342: IFTRUE 22346
22344: GO 22360
22346: POP
// begin ToLua ( displayStucuk(); ) ;
22347: LD_STRING displayStucuk();
22349: PPUSH
22350: CALL_OW 559
// ResetFog ;
22354: CALL_OW 335
// end ; 3 :
22358: GO 22576
22360: LD_INT 3
22362: DOUBLE
22363: EQUAL
22364: IFTRUE 22368
22366: GO 22472
22368: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22369: LD_ADDR_VAR 0 2
22373: PUSH
22374: LD_INT 22
22376: PUSH
22377: LD_OWVAR 2
22381: PUSH
22382: EMPTY
22383: LIST
22384: LIST
22385: PUSH
22386: LD_INT 25
22388: PUSH
22389: LD_INT 1
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: PPUSH
22400: CALL_OW 69
22404: ST_TO_ADDR
// if not tmp then
22405: LD_VAR 0 2
22409: NOT
22410: IFFALSE 22414
// exit ;
22412: GO 22576
// un := tmp [ rand ( 1 , tmp ) ] ;
22414: LD_ADDR_VAR 0 3
22418: PUSH
22419: LD_VAR 0 2
22423: PUSH
22424: LD_INT 1
22426: PPUSH
22427: LD_VAR 0 2
22431: PPUSH
22432: CALL_OW 12
22436: ARRAY
22437: ST_TO_ADDR
// if Crawls ( un ) then
22438: LD_VAR 0 3
22442: PPUSH
22443: CALL_OW 318
22447: IFFALSE 22458
// ComWalk ( un ) ;
22449: LD_VAR 0 3
22453: PPUSH
22454: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22458: LD_VAR 0 3
22462: PPUSH
22463: LD_INT 8
22465: PPUSH
22466: CALL_OW 336
// end ; 4 :
22470: GO 22576
22472: LD_INT 4
22474: DOUBLE
22475: EQUAL
22476: IFTRUE 22480
22478: GO 22554
22480: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22481: LD_ADDR_VAR 0 2
22485: PUSH
22486: LD_INT 22
22488: PUSH
22489: LD_OWVAR 2
22493: PUSH
22494: EMPTY
22495: LIST
22496: LIST
22497: PUSH
22498: LD_INT 30
22500: PUSH
22501: LD_INT 29
22503: PUSH
22504: EMPTY
22505: LIST
22506: LIST
22507: PUSH
22508: EMPTY
22509: LIST
22510: LIST
22511: PPUSH
22512: CALL_OW 69
22516: ST_TO_ADDR
// if not tmp then
22517: LD_VAR 0 2
22521: NOT
22522: IFFALSE 22526
// exit ;
22524: GO 22576
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22526: LD_VAR 0 2
22530: PUSH
22531: LD_INT 1
22533: ARRAY
22534: PPUSH
22535: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22539: LD_VAR 0 2
22543: PUSH
22544: LD_INT 1
22546: ARRAY
22547: PPUSH
22548: CALL_OW 65
// end ; 5 .. 7 :
22552: GO 22576
22554: LD_INT 5
22556: DOUBLE
22557: GREATEREQUAL
22558: IFFALSE 22566
22560: LD_INT 7
22562: DOUBLE
22563: LESSEQUAL
22564: IFTRUE 22568
22566: GO 22575
22568: POP
// StreamSibBomb ; end ;
22569: CALL 18813 0 0
22573: GO 22576
22575: POP
// end ;
22576: PPOPN 3
22578: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22579: LD_EXP 47
22583: PUSH
22584: LD_EXP 97
22588: AND
22589: IFFALSE 22745
22591: GO 22593
22593: DISABLE
22594: LD_INT 0
22596: PPUSH
22597: PPUSH
22598: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22599: LD_ADDR_VAR 0 2
22603: PUSH
22604: LD_INT 81
22606: PUSH
22607: LD_OWVAR 2
22611: PUSH
22612: EMPTY
22613: LIST
22614: LIST
22615: PUSH
22616: LD_INT 2
22618: PUSH
22619: LD_INT 21
22621: PUSH
22622: LD_INT 1
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: PUSH
22629: LD_INT 21
22631: PUSH
22632: LD_INT 2
22634: PUSH
22635: EMPTY
22636: LIST
22637: LIST
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: LIST
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: PPUSH
22648: CALL_OW 69
22652: ST_TO_ADDR
// if not tmp then
22653: LD_VAR 0 2
22657: NOT
22658: IFFALSE 22662
// exit ;
22660: GO 22745
// p := 0 ;
22662: LD_ADDR_VAR 0 3
22666: PUSH
22667: LD_INT 0
22669: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22670: LD_INT 35
22672: PPUSH
22673: CALL_OW 67
// p := p + 1 ;
22677: LD_ADDR_VAR 0 3
22681: PUSH
22682: LD_VAR 0 3
22686: PUSH
22687: LD_INT 1
22689: PLUS
22690: ST_TO_ADDR
// for i in tmp do
22691: LD_ADDR_VAR 0 1
22695: PUSH
22696: LD_VAR 0 2
22700: PUSH
22701: FOR_IN
22702: IFFALSE 22733
// if GetLives ( i ) < 1000 then
22704: LD_VAR 0 1
22708: PPUSH
22709: CALL_OW 256
22713: PUSH
22714: LD_INT 1000
22716: LESS
22717: IFFALSE 22731
// SetLives ( i , 1000 ) ;
22719: LD_VAR 0 1
22723: PPUSH
22724: LD_INT 1000
22726: PPUSH
22727: CALL_OW 234
22731: GO 22701
22733: POP
22734: POP
// until p > 20 ;
22735: LD_VAR 0 3
22739: PUSH
22740: LD_INT 20
22742: GREATER
22743: IFFALSE 22670
// end ;
22745: PPOPN 3
22747: END
// every 0 0$1 trigger StreamModeActive and sTime do
22748: LD_EXP 47
22752: PUSH
22753: LD_EXP 98
22757: AND
22758: IFFALSE 22793
22760: GO 22762
22762: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22763: LD_INT 28
22765: PPUSH
22766: LD_OWVAR 2
22770: PPUSH
22771: LD_INT 2
22773: PPUSH
22774: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22778: LD_INT 30
22780: PPUSH
22781: LD_OWVAR 2
22785: PPUSH
22786: LD_INT 2
22788: PPUSH
22789: CALL_OW 322
// end ;
22793: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22794: LD_EXP 47
22798: PUSH
22799: LD_EXP 99
22803: AND
22804: IFFALSE 22925
22806: GO 22808
22808: DISABLE
22809: LD_INT 0
22811: PPUSH
22812: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22813: LD_ADDR_VAR 0 2
22817: PUSH
22818: LD_INT 22
22820: PUSH
22821: LD_OWVAR 2
22825: PUSH
22826: EMPTY
22827: LIST
22828: LIST
22829: PUSH
22830: LD_INT 21
22832: PUSH
22833: LD_INT 1
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: LD_INT 3
22842: PUSH
22843: LD_INT 23
22845: PUSH
22846: LD_INT 0
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: PUSH
22857: EMPTY
22858: LIST
22859: LIST
22860: LIST
22861: PPUSH
22862: CALL_OW 69
22866: ST_TO_ADDR
// if not tmp then
22867: LD_VAR 0 2
22871: NOT
22872: IFFALSE 22876
// exit ;
22874: GO 22925
// for i in tmp do
22876: LD_ADDR_VAR 0 1
22880: PUSH
22881: LD_VAR 0 2
22885: PUSH
22886: FOR_IN
22887: IFFALSE 22923
// begin if Crawls ( i ) then
22889: LD_VAR 0 1
22893: PPUSH
22894: CALL_OW 318
22898: IFFALSE 22909
// ComWalk ( i ) ;
22900: LD_VAR 0 1
22904: PPUSH
22905: CALL_OW 138
// SetClass ( i , 2 ) ;
22909: LD_VAR 0 1
22913: PPUSH
22914: LD_INT 2
22916: PPUSH
22917: CALL_OW 336
// end ;
22921: GO 22886
22923: POP
22924: POP
// end ;
22925: PPOPN 2
22927: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22928: LD_EXP 47
22932: PUSH
22933: LD_EXP 100
22937: AND
22938: IFFALSE 23226
22940: GO 22942
22942: DISABLE
22943: LD_INT 0
22945: PPUSH
22946: PPUSH
22947: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22948: LD_OWVAR 2
22952: PPUSH
22953: LD_INT 9
22955: PPUSH
22956: LD_INT 1
22958: PPUSH
22959: LD_INT 1
22961: PPUSH
22962: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22966: LD_INT 9
22968: PPUSH
22969: LD_OWVAR 2
22973: PPUSH
22974: CALL_OW 343
// uc_side := 9 ;
22978: LD_ADDR_OWVAR 20
22982: PUSH
22983: LD_INT 9
22985: ST_TO_ADDR
// uc_nation := 2 ;
22986: LD_ADDR_OWVAR 21
22990: PUSH
22991: LD_INT 2
22993: ST_TO_ADDR
// hc_name := Dark Warrior ;
22994: LD_ADDR_OWVAR 26
22998: PUSH
22999: LD_STRING Dark Warrior
23001: ST_TO_ADDR
// hc_gallery :=  ;
23002: LD_ADDR_OWVAR 33
23006: PUSH
23007: LD_STRING 
23009: ST_TO_ADDR
// hc_noskilllimit := true ;
23010: LD_ADDR_OWVAR 76
23014: PUSH
23015: LD_INT 1
23017: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23018: LD_ADDR_OWVAR 31
23022: PUSH
23023: LD_INT 30
23025: PUSH
23026: LD_INT 30
23028: PUSH
23029: LD_INT 30
23031: PUSH
23032: LD_INT 30
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: ST_TO_ADDR
// un := CreateHuman ;
23041: LD_ADDR_VAR 0 3
23045: PUSH
23046: CALL_OW 44
23050: ST_TO_ADDR
// hc_noskilllimit := false ;
23051: LD_ADDR_OWVAR 76
23055: PUSH
23056: LD_INT 0
23058: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23059: LD_VAR 0 3
23063: PPUSH
23064: LD_INT 1
23066: PPUSH
23067: CALL_OW 51
// ToLua ( playRanger() ) ;
23071: LD_STRING playRanger()
23073: PPUSH
23074: CALL_OW 559
// p := 0 ;
23078: LD_ADDR_VAR 0 2
23082: PUSH
23083: LD_INT 0
23085: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23086: LD_INT 35
23088: PPUSH
23089: CALL_OW 67
// p := p + 1 ;
23093: LD_ADDR_VAR 0 2
23097: PUSH
23098: LD_VAR 0 2
23102: PUSH
23103: LD_INT 1
23105: PLUS
23106: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23107: LD_VAR 0 3
23111: PPUSH
23112: CALL_OW 256
23116: PUSH
23117: LD_INT 1000
23119: LESS
23120: IFFALSE 23134
// SetLives ( un , 1000 ) ;
23122: LD_VAR 0 3
23126: PPUSH
23127: LD_INT 1000
23129: PPUSH
23130: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23134: LD_VAR 0 3
23138: PPUSH
23139: LD_INT 81
23141: PUSH
23142: LD_OWVAR 2
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: PUSH
23151: LD_INT 91
23153: PUSH
23154: LD_VAR 0 3
23158: PUSH
23159: LD_INT 30
23161: PUSH
23162: EMPTY
23163: LIST
23164: LIST
23165: LIST
23166: PUSH
23167: EMPTY
23168: LIST
23169: LIST
23170: PPUSH
23171: CALL_OW 69
23175: PPUSH
23176: LD_VAR 0 3
23180: PPUSH
23181: CALL_OW 74
23185: PPUSH
23186: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23190: LD_VAR 0 2
23194: PUSH
23195: LD_INT 80
23197: GREATER
23198: PUSH
23199: LD_VAR 0 3
23203: PPUSH
23204: CALL_OW 301
23208: OR
23209: IFFALSE 23086
// if un then
23211: LD_VAR 0 3
23215: IFFALSE 23226
// RemoveUnit ( un ) ;
23217: LD_VAR 0 3
23221: PPUSH
23222: CALL_OW 64
// end ;
23226: PPOPN 3
23228: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23229: LD_EXP 101
23233: IFFALSE 23349
23235: GO 23237
23237: DISABLE
23238: LD_INT 0
23240: PPUSH
23241: PPUSH
23242: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23243: LD_ADDR_VAR 0 2
23247: PUSH
23248: LD_INT 81
23250: PUSH
23251: LD_OWVAR 2
23255: PUSH
23256: EMPTY
23257: LIST
23258: LIST
23259: PUSH
23260: LD_INT 21
23262: PUSH
23263: LD_INT 1
23265: PUSH
23266: EMPTY
23267: LIST
23268: LIST
23269: PUSH
23270: EMPTY
23271: LIST
23272: LIST
23273: PPUSH
23274: CALL_OW 69
23278: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23279: LD_STRING playComputer()
23281: PPUSH
23282: CALL_OW 559
// if not tmp then
23286: LD_VAR 0 2
23290: NOT
23291: IFFALSE 23295
// exit ;
23293: GO 23349
// for i in tmp do
23295: LD_ADDR_VAR 0 1
23299: PUSH
23300: LD_VAR 0 2
23304: PUSH
23305: FOR_IN
23306: IFFALSE 23347
// for j := 1 to 4 do
23308: LD_ADDR_VAR 0 3
23312: PUSH
23313: DOUBLE
23314: LD_INT 1
23316: DEC
23317: ST_TO_ADDR
23318: LD_INT 4
23320: PUSH
23321: FOR_TO
23322: IFFALSE 23343
// SetSkill ( i , j , 10 ) ;
23324: LD_VAR 0 1
23328: PPUSH
23329: LD_VAR 0 3
23333: PPUSH
23334: LD_INT 10
23336: PPUSH
23337: CALL_OW 237
23341: GO 23321
23343: POP
23344: POP
23345: GO 23305
23347: POP
23348: POP
// end ;
23349: PPOPN 3
23351: END
// every 0 0$1 trigger s30 do var i , tmp ;
23352: LD_EXP 102
23356: IFFALSE 23425
23358: GO 23360
23360: DISABLE
23361: LD_INT 0
23363: PPUSH
23364: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23365: LD_ADDR_VAR 0 2
23369: PUSH
23370: LD_INT 22
23372: PUSH
23373: LD_OWVAR 2
23377: PUSH
23378: EMPTY
23379: LIST
23380: LIST
23381: PPUSH
23382: CALL_OW 69
23386: ST_TO_ADDR
// if not tmp then
23387: LD_VAR 0 2
23391: NOT
23392: IFFALSE 23396
// exit ;
23394: GO 23425
// for i in tmp do
23396: LD_ADDR_VAR 0 1
23400: PUSH
23401: LD_VAR 0 2
23405: PUSH
23406: FOR_IN
23407: IFFALSE 23423
// SetLives ( i , 300 ) ;
23409: LD_VAR 0 1
23413: PPUSH
23414: LD_INT 300
23416: PPUSH
23417: CALL_OW 234
23421: GO 23406
23423: POP
23424: POP
// end ;
23425: PPOPN 2
23427: END
// every 0 0$1 trigger s60 do var i , tmp ;
23428: LD_EXP 103
23432: IFFALSE 23501
23434: GO 23436
23436: DISABLE
23437: LD_INT 0
23439: PPUSH
23440: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23441: LD_ADDR_VAR 0 2
23445: PUSH
23446: LD_INT 22
23448: PUSH
23449: LD_OWVAR 2
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: PPUSH
23458: CALL_OW 69
23462: ST_TO_ADDR
// if not tmp then
23463: LD_VAR 0 2
23467: NOT
23468: IFFALSE 23472
// exit ;
23470: GO 23501
// for i in tmp do
23472: LD_ADDR_VAR 0 1
23476: PUSH
23477: LD_VAR 0 2
23481: PUSH
23482: FOR_IN
23483: IFFALSE 23499
// SetLives ( i , 600 ) ;
23485: LD_VAR 0 1
23489: PPUSH
23490: LD_INT 600
23492: PPUSH
23493: CALL_OW 234
23497: GO 23482
23499: POP
23500: POP
// end ;
23501: PPOPN 2
23503: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23504: LD_INT 0
23506: PPUSH
// case cmd of 301 :
23507: LD_VAR 0 1
23511: PUSH
23512: LD_INT 301
23514: DOUBLE
23515: EQUAL
23516: IFTRUE 23520
23518: GO 23552
23520: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23521: LD_VAR 0 6
23525: PPUSH
23526: LD_VAR 0 7
23530: PPUSH
23531: LD_VAR 0 8
23535: PPUSH
23536: LD_VAR 0 4
23540: PPUSH
23541: LD_VAR 0 5
23545: PPUSH
23546: CALL 24753 0 5
23550: GO 23673
23552: LD_INT 302
23554: DOUBLE
23555: EQUAL
23556: IFTRUE 23560
23558: GO 23597
23560: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23561: LD_VAR 0 6
23565: PPUSH
23566: LD_VAR 0 7
23570: PPUSH
23571: LD_VAR 0 8
23575: PPUSH
23576: LD_VAR 0 9
23580: PPUSH
23581: LD_VAR 0 4
23585: PPUSH
23586: LD_VAR 0 5
23590: PPUSH
23591: CALL 24844 0 6
23595: GO 23673
23597: LD_INT 303
23599: DOUBLE
23600: EQUAL
23601: IFTRUE 23605
23603: GO 23642
23605: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23606: LD_VAR 0 6
23610: PPUSH
23611: LD_VAR 0 7
23615: PPUSH
23616: LD_VAR 0 8
23620: PPUSH
23621: LD_VAR 0 9
23625: PPUSH
23626: LD_VAR 0 4
23630: PPUSH
23631: LD_VAR 0 5
23635: PPUSH
23636: CALL 23678 0 6
23640: GO 23673
23642: LD_INT 304
23644: DOUBLE
23645: EQUAL
23646: IFTRUE 23650
23648: GO 23672
23650: POP
// hHackTeleport ( unit , x , y ) ; end ;
23651: LD_VAR 0 2
23655: PPUSH
23656: LD_VAR 0 4
23660: PPUSH
23661: LD_VAR 0 5
23665: PPUSH
23666: CALL 25437 0 3
23670: GO 23673
23672: POP
// end ;
23673: LD_VAR 0 12
23677: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23678: LD_INT 0
23680: PPUSH
23681: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23682: LD_VAR 0 1
23686: PUSH
23687: LD_INT 1
23689: LESS
23690: PUSH
23691: LD_VAR 0 1
23695: PUSH
23696: LD_INT 3
23698: GREATER
23699: OR
23700: PUSH
23701: LD_VAR 0 5
23705: PPUSH
23706: LD_VAR 0 6
23710: PPUSH
23711: CALL_OW 428
23715: OR
23716: IFFALSE 23720
// exit ;
23718: GO 24440
// uc_side := your_side ;
23720: LD_ADDR_OWVAR 20
23724: PUSH
23725: LD_OWVAR 2
23729: ST_TO_ADDR
// uc_nation := nation ;
23730: LD_ADDR_OWVAR 21
23734: PUSH
23735: LD_VAR 0 1
23739: ST_TO_ADDR
// bc_level = 1 ;
23740: LD_ADDR_OWVAR 43
23744: PUSH
23745: LD_INT 1
23747: ST_TO_ADDR
// case btype of 1 :
23748: LD_VAR 0 2
23752: PUSH
23753: LD_INT 1
23755: DOUBLE
23756: EQUAL
23757: IFTRUE 23761
23759: GO 23772
23761: POP
// bc_type := b_depot ; 2 :
23762: LD_ADDR_OWVAR 42
23766: PUSH
23767: LD_INT 0
23769: ST_TO_ADDR
23770: GO 24384
23772: LD_INT 2
23774: DOUBLE
23775: EQUAL
23776: IFTRUE 23780
23778: GO 23791
23780: POP
// bc_type := b_warehouse ; 3 :
23781: LD_ADDR_OWVAR 42
23785: PUSH
23786: LD_INT 1
23788: ST_TO_ADDR
23789: GO 24384
23791: LD_INT 3
23793: DOUBLE
23794: EQUAL
23795: IFTRUE 23799
23797: GO 23810
23799: POP
// bc_type := b_lab ; 4 .. 9 :
23800: LD_ADDR_OWVAR 42
23804: PUSH
23805: LD_INT 6
23807: ST_TO_ADDR
23808: GO 24384
23810: LD_INT 4
23812: DOUBLE
23813: GREATEREQUAL
23814: IFFALSE 23822
23816: LD_INT 9
23818: DOUBLE
23819: LESSEQUAL
23820: IFTRUE 23824
23822: GO 23876
23824: POP
// begin bc_type := b_lab_half ;
23825: LD_ADDR_OWVAR 42
23829: PUSH
23830: LD_INT 7
23832: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23833: LD_ADDR_OWVAR 44
23837: PUSH
23838: LD_INT 10
23840: PUSH
23841: LD_INT 11
23843: PUSH
23844: LD_INT 12
23846: PUSH
23847: LD_INT 15
23849: PUSH
23850: LD_INT 14
23852: PUSH
23853: LD_INT 13
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: PUSH
23864: LD_VAR 0 2
23868: PUSH
23869: LD_INT 3
23871: MINUS
23872: ARRAY
23873: ST_TO_ADDR
// end ; 10 .. 13 :
23874: GO 24384
23876: LD_INT 10
23878: DOUBLE
23879: GREATEREQUAL
23880: IFFALSE 23888
23882: LD_INT 13
23884: DOUBLE
23885: LESSEQUAL
23886: IFTRUE 23890
23888: GO 23967
23890: POP
// begin bc_type := b_lab_full ;
23891: LD_ADDR_OWVAR 42
23895: PUSH
23896: LD_INT 8
23898: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23899: LD_ADDR_OWVAR 44
23903: PUSH
23904: LD_INT 10
23906: PUSH
23907: LD_INT 12
23909: PUSH
23910: LD_INT 14
23912: PUSH
23913: LD_INT 13
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: PUSH
23922: LD_VAR 0 2
23926: PUSH
23927: LD_INT 9
23929: MINUS
23930: ARRAY
23931: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23932: LD_ADDR_OWVAR 45
23936: PUSH
23937: LD_INT 11
23939: PUSH
23940: LD_INT 15
23942: PUSH
23943: LD_INT 12
23945: PUSH
23946: LD_INT 15
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: PUSH
23955: LD_VAR 0 2
23959: PUSH
23960: LD_INT 9
23962: MINUS
23963: ARRAY
23964: ST_TO_ADDR
// end ; 14 :
23965: GO 24384
23967: LD_INT 14
23969: DOUBLE
23970: EQUAL
23971: IFTRUE 23975
23973: GO 23986
23975: POP
// bc_type := b_workshop ; 15 :
23976: LD_ADDR_OWVAR 42
23980: PUSH
23981: LD_INT 2
23983: ST_TO_ADDR
23984: GO 24384
23986: LD_INT 15
23988: DOUBLE
23989: EQUAL
23990: IFTRUE 23994
23992: GO 24005
23994: POP
// bc_type := b_factory ; 16 :
23995: LD_ADDR_OWVAR 42
23999: PUSH
24000: LD_INT 3
24002: ST_TO_ADDR
24003: GO 24384
24005: LD_INT 16
24007: DOUBLE
24008: EQUAL
24009: IFTRUE 24013
24011: GO 24024
24013: POP
// bc_type := b_ext_gun ; 17 :
24014: LD_ADDR_OWVAR 42
24018: PUSH
24019: LD_INT 17
24021: ST_TO_ADDR
24022: GO 24384
24024: LD_INT 17
24026: DOUBLE
24027: EQUAL
24028: IFTRUE 24032
24030: GO 24060
24032: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24033: LD_ADDR_OWVAR 42
24037: PUSH
24038: LD_INT 19
24040: PUSH
24041: LD_INT 23
24043: PUSH
24044: LD_INT 19
24046: PUSH
24047: EMPTY
24048: LIST
24049: LIST
24050: LIST
24051: PUSH
24052: LD_VAR 0 1
24056: ARRAY
24057: ST_TO_ADDR
24058: GO 24384
24060: LD_INT 18
24062: DOUBLE
24063: EQUAL
24064: IFTRUE 24068
24066: GO 24079
24068: POP
// bc_type := b_ext_radar ; 19 :
24069: LD_ADDR_OWVAR 42
24073: PUSH
24074: LD_INT 20
24076: ST_TO_ADDR
24077: GO 24384
24079: LD_INT 19
24081: DOUBLE
24082: EQUAL
24083: IFTRUE 24087
24085: GO 24098
24087: POP
// bc_type := b_ext_radio ; 20 :
24088: LD_ADDR_OWVAR 42
24092: PUSH
24093: LD_INT 22
24095: ST_TO_ADDR
24096: GO 24384
24098: LD_INT 20
24100: DOUBLE
24101: EQUAL
24102: IFTRUE 24106
24104: GO 24117
24106: POP
// bc_type := b_ext_siberium ; 21 :
24107: LD_ADDR_OWVAR 42
24111: PUSH
24112: LD_INT 21
24114: ST_TO_ADDR
24115: GO 24384
24117: LD_INT 21
24119: DOUBLE
24120: EQUAL
24121: IFTRUE 24125
24123: GO 24136
24125: POP
// bc_type := b_ext_computer ; 22 :
24126: LD_ADDR_OWVAR 42
24130: PUSH
24131: LD_INT 24
24133: ST_TO_ADDR
24134: GO 24384
24136: LD_INT 22
24138: DOUBLE
24139: EQUAL
24140: IFTRUE 24144
24142: GO 24155
24144: POP
// bc_type := b_ext_track ; 23 :
24145: LD_ADDR_OWVAR 42
24149: PUSH
24150: LD_INT 16
24152: ST_TO_ADDR
24153: GO 24384
24155: LD_INT 23
24157: DOUBLE
24158: EQUAL
24159: IFTRUE 24163
24161: GO 24174
24163: POP
// bc_type := b_ext_laser ; 24 :
24164: LD_ADDR_OWVAR 42
24168: PUSH
24169: LD_INT 25
24171: ST_TO_ADDR
24172: GO 24384
24174: LD_INT 24
24176: DOUBLE
24177: EQUAL
24178: IFTRUE 24182
24180: GO 24193
24182: POP
// bc_type := b_control_tower ; 25 :
24183: LD_ADDR_OWVAR 42
24187: PUSH
24188: LD_INT 36
24190: ST_TO_ADDR
24191: GO 24384
24193: LD_INT 25
24195: DOUBLE
24196: EQUAL
24197: IFTRUE 24201
24199: GO 24212
24201: POP
// bc_type := b_breastwork ; 26 :
24202: LD_ADDR_OWVAR 42
24206: PUSH
24207: LD_INT 31
24209: ST_TO_ADDR
24210: GO 24384
24212: LD_INT 26
24214: DOUBLE
24215: EQUAL
24216: IFTRUE 24220
24218: GO 24231
24220: POP
// bc_type := b_bunker ; 27 :
24221: LD_ADDR_OWVAR 42
24225: PUSH
24226: LD_INT 32
24228: ST_TO_ADDR
24229: GO 24384
24231: LD_INT 27
24233: DOUBLE
24234: EQUAL
24235: IFTRUE 24239
24237: GO 24250
24239: POP
// bc_type := b_turret ; 28 :
24240: LD_ADDR_OWVAR 42
24244: PUSH
24245: LD_INT 33
24247: ST_TO_ADDR
24248: GO 24384
24250: LD_INT 28
24252: DOUBLE
24253: EQUAL
24254: IFTRUE 24258
24256: GO 24269
24258: POP
// bc_type := b_armoury ; 29 :
24259: LD_ADDR_OWVAR 42
24263: PUSH
24264: LD_INT 4
24266: ST_TO_ADDR
24267: GO 24384
24269: LD_INT 29
24271: DOUBLE
24272: EQUAL
24273: IFTRUE 24277
24275: GO 24288
24277: POP
// bc_type := b_barracks ; 30 :
24278: LD_ADDR_OWVAR 42
24282: PUSH
24283: LD_INT 5
24285: ST_TO_ADDR
24286: GO 24384
24288: LD_INT 30
24290: DOUBLE
24291: EQUAL
24292: IFTRUE 24296
24294: GO 24307
24296: POP
// bc_type := b_solar_power ; 31 :
24297: LD_ADDR_OWVAR 42
24301: PUSH
24302: LD_INT 27
24304: ST_TO_ADDR
24305: GO 24384
24307: LD_INT 31
24309: DOUBLE
24310: EQUAL
24311: IFTRUE 24315
24313: GO 24326
24315: POP
// bc_type := b_oil_power ; 32 :
24316: LD_ADDR_OWVAR 42
24320: PUSH
24321: LD_INT 26
24323: ST_TO_ADDR
24324: GO 24384
24326: LD_INT 32
24328: DOUBLE
24329: EQUAL
24330: IFTRUE 24334
24332: GO 24345
24334: POP
// bc_type := b_siberite_power ; 33 :
24335: LD_ADDR_OWVAR 42
24339: PUSH
24340: LD_INT 28
24342: ST_TO_ADDR
24343: GO 24384
24345: LD_INT 33
24347: DOUBLE
24348: EQUAL
24349: IFTRUE 24353
24351: GO 24364
24353: POP
// bc_type := b_oil_mine ; 34 :
24354: LD_ADDR_OWVAR 42
24358: PUSH
24359: LD_INT 29
24361: ST_TO_ADDR
24362: GO 24384
24364: LD_INT 34
24366: DOUBLE
24367: EQUAL
24368: IFTRUE 24372
24370: GO 24383
24372: POP
// bc_type := b_siberite_mine ; end ;
24373: LD_ADDR_OWVAR 42
24377: PUSH
24378: LD_INT 30
24380: ST_TO_ADDR
24381: GO 24384
24383: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24384: LD_ADDR_VAR 0 8
24388: PUSH
24389: LD_VAR 0 5
24393: PPUSH
24394: LD_VAR 0 6
24398: PPUSH
24399: LD_VAR 0 3
24403: PPUSH
24404: CALL_OW 47
24408: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24409: LD_OWVAR 42
24413: PUSH
24414: LD_INT 32
24416: PUSH
24417: LD_INT 33
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: IN
24424: IFFALSE 24440
// PlaceWeaponTurret ( b , weapon ) ;
24426: LD_VAR 0 8
24430: PPUSH
24431: LD_VAR 0 4
24435: PPUSH
24436: CALL_OW 431
// end ;
24440: LD_VAR 0 7
24444: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24445: LD_INT 0
24447: PPUSH
24448: PPUSH
24449: PPUSH
24450: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24451: LD_ADDR_VAR 0 4
24455: PUSH
24456: LD_INT 22
24458: PUSH
24459: LD_OWVAR 2
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: PUSH
24468: LD_INT 2
24470: PUSH
24471: LD_INT 30
24473: PUSH
24474: LD_INT 0
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: PUSH
24481: LD_INT 30
24483: PUSH
24484: LD_INT 1
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: LIST
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: PPUSH
24500: CALL_OW 69
24504: ST_TO_ADDR
// if not tmp then
24505: LD_VAR 0 4
24509: NOT
24510: IFFALSE 24514
// exit ;
24512: GO 24573
// for i in tmp do
24514: LD_ADDR_VAR 0 2
24518: PUSH
24519: LD_VAR 0 4
24523: PUSH
24524: FOR_IN
24525: IFFALSE 24571
// for j = 1 to 3 do
24527: LD_ADDR_VAR 0 3
24531: PUSH
24532: DOUBLE
24533: LD_INT 1
24535: DEC
24536: ST_TO_ADDR
24537: LD_INT 3
24539: PUSH
24540: FOR_TO
24541: IFFALSE 24567
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24543: LD_VAR 0 2
24547: PPUSH
24548: CALL_OW 274
24552: PPUSH
24553: LD_VAR 0 3
24557: PPUSH
24558: LD_INT 99999
24560: PPUSH
24561: CALL_OW 277
24565: GO 24540
24567: POP
24568: POP
24569: GO 24524
24571: POP
24572: POP
// end ;
24573: LD_VAR 0 1
24577: RET
// export function hHackSetLevel10 ; var i , j ; begin
24578: LD_INT 0
24580: PPUSH
24581: PPUSH
24582: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24583: LD_ADDR_VAR 0 2
24587: PUSH
24588: LD_INT 21
24590: PUSH
24591: LD_INT 1
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: PPUSH
24598: CALL_OW 69
24602: PUSH
24603: FOR_IN
24604: IFFALSE 24656
// if IsSelected ( i ) then
24606: LD_VAR 0 2
24610: PPUSH
24611: CALL_OW 306
24615: IFFALSE 24654
// begin for j := 1 to 4 do
24617: LD_ADDR_VAR 0 3
24621: PUSH
24622: DOUBLE
24623: LD_INT 1
24625: DEC
24626: ST_TO_ADDR
24627: LD_INT 4
24629: PUSH
24630: FOR_TO
24631: IFFALSE 24652
// SetSkill ( i , j , 10 ) ;
24633: LD_VAR 0 2
24637: PPUSH
24638: LD_VAR 0 3
24642: PPUSH
24643: LD_INT 10
24645: PPUSH
24646: CALL_OW 237
24650: GO 24630
24652: POP
24653: POP
// end ;
24654: GO 24603
24656: POP
24657: POP
// end ;
24658: LD_VAR 0 1
24662: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24663: LD_INT 0
24665: PPUSH
24666: PPUSH
24667: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24668: LD_ADDR_VAR 0 2
24672: PUSH
24673: LD_INT 22
24675: PUSH
24676: LD_OWVAR 2
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PUSH
24685: LD_INT 21
24687: PUSH
24688: LD_INT 1
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PUSH
24695: EMPTY
24696: LIST
24697: LIST
24698: PPUSH
24699: CALL_OW 69
24703: PUSH
24704: FOR_IN
24705: IFFALSE 24746
// begin for j := 1 to 4 do
24707: LD_ADDR_VAR 0 3
24711: PUSH
24712: DOUBLE
24713: LD_INT 1
24715: DEC
24716: ST_TO_ADDR
24717: LD_INT 4
24719: PUSH
24720: FOR_TO
24721: IFFALSE 24742
// SetSkill ( i , j , 10 ) ;
24723: LD_VAR 0 2
24727: PPUSH
24728: LD_VAR 0 3
24732: PPUSH
24733: LD_INT 10
24735: PPUSH
24736: CALL_OW 237
24740: GO 24720
24742: POP
24743: POP
// end ;
24744: GO 24704
24746: POP
24747: POP
// end ;
24748: LD_VAR 0 1
24752: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24753: LD_INT 0
24755: PPUSH
// uc_side := your_side ;
24756: LD_ADDR_OWVAR 20
24760: PUSH
24761: LD_OWVAR 2
24765: ST_TO_ADDR
// uc_nation := nation ;
24766: LD_ADDR_OWVAR 21
24770: PUSH
24771: LD_VAR 0 1
24775: ST_TO_ADDR
// InitHc ;
24776: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24780: LD_INT 0
24782: PPUSH
24783: LD_VAR 0 2
24787: PPUSH
24788: LD_VAR 0 3
24792: PPUSH
24793: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24797: LD_VAR 0 4
24801: PPUSH
24802: LD_VAR 0 5
24806: PPUSH
24807: CALL_OW 428
24811: PUSH
24812: LD_INT 0
24814: EQUAL
24815: IFFALSE 24839
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24817: CALL_OW 44
24821: PPUSH
24822: LD_VAR 0 4
24826: PPUSH
24827: LD_VAR 0 5
24831: PPUSH
24832: LD_INT 1
24834: PPUSH
24835: CALL_OW 48
// end ;
24839: LD_VAR 0 6
24843: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24844: LD_INT 0
24846: PPUSH
24847: PPUSH
// uc_side := your_side ;
24848: LD_ADDR_OWVAR 20
24852: PUSH
24853: LD_OWVAR 2
24857: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24858: LD_VAR 0 1
24862: PUSH
24863: LD_INT 1
24865: PUSH
24866: LD_INT 2
24868: PUSH
24869: LD_INT 3
24871: PUSH
24872: LD_INT 4
24874: PUSH
24875: LD_INT 5
24877: PUSH
24878: EMPTY
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: IN
24885: IFFALSE 24897
// uc_nation := nation_american else
24887: LD_ADDR_OWVAR 21
24891: PUSH
24892: LD_INT 1
24894: ST_TO_ADDR
24895: GO 24940
// if chassis in [ 11 , 12 , 13 , 14 ] then
24897: LD_VAR 0 1
24901: PUSH
24902: LD_INT 11
24904: PUSH
24905: LD_INT 12
24907: PUSH
24908: LD_INT 13
24910: PUSH
24911: LD_INT 14
24913: PUSH
24914: EMPTY
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: IN
24920: IFFALSE 24932
// uc_nation := nation_arabian else
24922: LD_ADDR_OWVAR 21
24926: PUSH
24927: LD_INT 2
24929: ST_TO_ADDR
24930: GO 24940
// uc_nation := nation_russian ;
24932: LD_ADDR_OWVAR 21
24936: PUSH
24937: LD_INT 3
24939: ST_TO_ADDR
// vc_chassis := chassis ;
24940: LD_ADDR_OWVAR 37
24944: PUSH
24945: LD_VAR 0 1
24949: ST_TO_ADDR
// vc_engine := engine ;
24950: LD_ADDR_OWVAR 39
24954: PUSH
24955: LD_VAR 0 2
24959: ST_TO_ADDR
// vc_control := control ;
24960: LD_ADDR_OWVAR 38
24964: PUSH
24965: LD_VAR 0 3
24969: ST_TO_ADDR
// vc_weapon := weapon ;
24970: LD_ADDR_OWVAR 40
24974: PUSH
24975: LD_VAR 0 4
24979: ST_TO_ADDR
// un := CreateVehicle ;
24980: LD_ADDR_VAR 0 8
24984: PUSH
24985: CALL_OW 45
24989: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24990: LD_VAR 0 8
24994: PPUSH
24995: LD_INT 0
24997: PPUSH
24998: LD_INT 5
25000: PPUSH
25001: CALL_OW 12
25005: PPUSH
25006: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25010: LD_VAR 0 8
25014: PPUSH
25015: LD_VAR 0 5
25019: PPUSH
25020: LD_VAR 0 6
25024: PPUSH
25025: LD_INT 1
25027: PPUSH
25028: CALL_OW 48
// end ;
25032: LD_VAR 0 7
25036: RET
// export hInvincible ; every 1 do
25037: GO 25039
25039: DISABLE
// hInvincible := [ ] ;
25040: LD_ADDR_EXP 104
25044: PUSH
25045: EMPTY
25046: ST_TO_ADDR
25047: END
// every 10 do var i ;
25048: GO 25050
25050: DISABLE
25051: LD_INT 0
25053: PPUSH
// begin enable ;
25054: ENABLE
// if not hInvincible then
25055: LD_EXP 104
25059: NOT
25060: IFFALSE 25064
// exit ;
25062: GO 25108
// for i in hInvincible do
25064: LD_ADDR_VAR 0 1
25068: PUSH
25069: LD_EXP 104
25073: PUSH
25074: FOR_IN
25075: IFFALSE 25106
// if GetLives ( i ) < 1000 then
25077: LD_VAR 0 1
25081: PPUSH
25082: CALL_OW 256
25086: PUSH
25087: LD_INT 1000
25089: LESS
25090: IFFALSE 25104
// SetLives ( i , 1000 ) ;
25092: LD_VAR 0 1
25096: PPUSH
25097: LD_INT 1000
25099: PPUSH
25100: CALL_OW 234
25104: GO 25074
25106: POP
25107: POP
// end ;
25108: PPOPN 1
25110: END
// export function hHackInvincible ; var i ; begin
25111: LD_INT 0
25113: PPUSH
25114: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25115: LD_ADDR_VAR 0 2
25119: PUSH
25120: LD_INT 2
25122: PUSH
25123: LD_INT 21
25125: PUSH
25126: LD_INT 1
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PUSH
25133: LD_INT 21
25135: PUSH
25136: LD_INT 2
25138: PUSH
25139: EMPTY
25140: LIST
25141: LIST
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: LIST
25147: PPUSH
25148: CALL_OW 69
25152: PUSH
25153: FOR_IN
25154: IFFALSE 25215
// if IsSelected ( i ) then
25156: LD_VAR 0 2
25160: PPUSH
25161: CALL_OW 306
25165: IFFALSE 25213
// begin if i in hInvincible then
25167: LD_VAR 0 2
25171: PUSH
25172: LD_EXP 104
25176: IN
25177: IFFALSE 25197
// hInvincible := hInvincible diff i else
25179: LD_ADDR_EXP 104
25183: PUSH
25184: LD_EXP 104
25188: PUSH
25189: LD_VAR 0 2
25193: DIFF
25194: ST_TO_ADDR
25195: GO 25213
// hInvincible := hInvincible union i ;
25197: LD_ADDR_EXP 104
25201: PUSH
25202: LD_EXP 104
25206: PUSH
25207: LD_VAR 0 2
25211: UNION
25212: ST_TO_ADDR
// end ;
25213: GO 25153
25215: POP
25216: POP
// end ;
25217: LD_VAR 0 1
25221: RET
// export function hHackInvisible ; var i , j ; begin
25222: LD_INT 0
25224: PPUSH
25225: PPUSH
25226: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25227: LD_ADDR_VAR 0 2
25231: PUSH
25232: LD_INT 21
25234: PUSH
25235: LD_INT 1
25237: PUSH
25238: EMPTY
25239: LIST
25240: LIST
25241: PPUSH
25242: CALL_OW 69
25246: PUSH
25247: FOR_IN
25248: IFFALSE 25272
// if IsSelected ( i ) then
25250: LD_VAR 0 2
25254: PPUSH
25255: CALL_OW 306
25259: IFFALSE 25270
// ComForceInvisible ( i ) ;
25261: LD_VAR 0 2
25265: PPUSH
25266: CALL_OW 496
25270: GO 25247
25272: POP
25273: POP
// end ;
25274: LD_VAR 0 1
25278: RET
// export function hHackChangeYourSide ; begin
25279: LD_INT 0
25281: PPUSH
// if your_side = 8 then
25282: LD_OWVAR 2
25286: PUSH
25287: LD_INT 8
25289: EQUAL
25290: IFFALSE 25302
// your_side := 0 else
25292: LD_ADDR_OWVAR 2
25296: PUSH
25297: LD_INT 0
25299: ST_TO_ADDR
25300: GO 25316
// your_side := your_side + 1 ;
25302: LD_ADDR_OWVAR 2
25306: PUSH
25307: LD_OWVAR 2
25311: PUSH
25312: LD_INT 1
25314: PLUS
25315: ST_TO_ADDR
// end ;
25316: LD_VAR 0 1
25320: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25321: LD_INT 0
25323: PPUSH
25324: PPUSH
25325: PPUSH
// for i in all_units do
25326: LD_ADDR_VAR 0 2
25330: PUSH
25331: LD_OWVAR 3
25335: PUSH
25336: FOR_IN
25337: IFFALSE 25415
// if IsSelected ( i ) then
25339: LD_VAR 0 2
25343: PPUSH
25344: CALL_OW 306
25348: IFFALSE 25413
// begin j := GetSide ( i ) ;
25350: LD_ADDR_VAR 0 3
25354: PUSH
25355: LD_VAR 0 2
25359: PPUSH
25360: CALL_OW 255
25364: ST_TO_ADDR
// if j = 8 then
25365: LD_VAR 0 3
25369: PUSH
25370: LD_INT 8
25372: EQUAL
25373: IFFALSE 25385
// j := 0 else
25375: LD_ADDR_VAR 0 3
25379: PUSH
25380: LD_INT 0
25382: ST_TO_ADDR
25383: GO 25399
// j := j + 1 ;
25385: LD_ADDR_VAR 0 3
25389: PUSH
25390: LD_VAR 0 3
25394: PUSH
25395: LD_INT 1
25397: PLUS
25398: ST_TO_ADDR
// SetSide ( i , j ) ;
25399: LD_VAR 0 2
25403: PPUSH
25404: LD_VAR 0 3
25408: PPUSH
25409: CALL_OW 235
// end ;
25413: GO 25336
25415: POP
25416: POP
// end ;
25417: LD_VAR 0 1
25421: RET
// export function hHackFog ; begin
25422: LD_INT 0
25424: PPUSH
// FogOff ( true ) ;
25425: LD_INT 1
25427: PPUSH
25428: CALL_OW 344
// end ;
25432: LD_VAR 0 1
25436: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25437: LD_INT 0
25439: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25440: LD_VAR 0 1
25444: PPUSH
25445: LD_VAR 0 2
25449: PPUSH
25450: LD_VAR 0 3
25454: PPUSH
25455: LD_INT 1
25457: PPUSH
25458: LD_INT 1
25460: PPUSH
25461: CALL_OW 483
// CenterOnXY ( x , y ) ;
25465: LD_VAR 0 2
25469: PPUSH
25470: LD_VAR 0 3
25474: PPUSH
25475: CALL_OW 84
// end ;
25479: LD_VAR 0 4
25483: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25484: LD_INT 0
25486: PPUSH
25487: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25488: LD_VAR 0 1
25492: NOT
25493: PUSH
25494: LD_VAR 0 2
25498: PPUSH
25499: LD_VAR 0 3
25503: PPUSH
25504: CALL_OW 488
25508: NOT
25509: OR
25510: PUSH
25511: LD_VAR 0 1
25515: PPUSH
25516: CALL_OW 266
25520: PUSH
25521: LD_INT 3
25523: NONEQUAL
25524: PUSH
25525: LD_VAR 0 1
25529: PPUSH
25530: CALL_OW 247
25534: PUSH
25535: LD_INT 1
25537: EQUAL
25538: NOT
25539: AND
25540: OR
25541: IFFALSE 25545
// exit ;
25543: GO 25694
// if GetType ( factory ) = unit_human then
25545: LD_VAR 0 1
25549: PPUSH
25550: CALL_OW 247
25554: PUSH
25555: LD_INT 1
25557: EQUAL
25558: IFFALSE 25575
// factory := IsInUnit ( factory ) ;
25560: LD_ADDR_VAR 0 1
25564: PUSH
25565: LD_VAR 0 1
25569: PPUSH
25570: CALL_OW 310
25574: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25575: LD_VAR 0 1
25579: PPUSH
25580: CALL_OW 266
25584: PUSH
25585: LD_INT 3
25587: NONEQUAL
25588: IFFALSE 25592
// exit ;
25590: GO 25694
// if HexInfo ( x , y ) = factory then
25592: LD_VAR 0 2
25596: PPUSH
25597: LD_VAR 0 3
25601: PPUSH
25602: CALL_OW 428
25606: PUSH
25607: LD_VAR 0 1
25611: EQUAL
25612: IFFALSE 25639
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
25614: LD_ADDR_EXP 105
25618: PUSH
25619: LD_EXP 105
25623: PPUSH
25624: LD_VAR 0 1
25628: PPUSH
25629: LD_INT 0
25631: PPUSH
25632: CALL_OW 1
25636: ST_TO_ADDR
25637: GO 25690
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
25639: LD_ADDR_EXP 105
25643: PUSH
25644: LD_EXP 105
25648: PPUSH
25649: LD_VAR 0 1
25653: PPUSH
25654: LD_VAR 0 1
25658: PPUSH
25659: CALL_OW 255
25663: PUSH
25664: LD_VAR 0 1
25668: PUSH
25669: LD_VAR 0 2
25673: PUSH
25674: LD_VAR 0 3
25678: PUSH
25679: EMPTY
25680: LIST
25681: LIST
25682: LIST
25683: LIST
25684: PPUSH
25685: CALL_OW 1
25689: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25690: CALL 25699 0 0
// end ;
25694: LD_VAR 0 4
25698: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
25699: LD_INT 0
25701: PPUSH
25702: PPUSH
25703: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
25704: LD_STRING resetFactoryWaypoint();
25706: PPUSH
25707: CALL_OW 559
// if factoryWaypoints then
25711: LD_EXP 105
25715: IFFALSE 25841
// begin list := PrepareArray ( factoryWaypoints ) ;
25717: LD_ADDR_VAR 0 3
25721: PUSH
25722: LD_EXP 105
25726: PPUSH
25727: CALL 72310 0 1
25731: ST_TO_ADDR
// for i := 1 to list do
25732: LD_ADDR_VAR 0 2
25736: PUSH
25737: DOUBLE
25738: LD_INT 1
25740: DEC
25741: ST_TO_ADDR
25742: LD_VAR 0 3
25746: PUSH
25747: FOR_TO
25748: IFFALSE 25839
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25750: LD_STRING setFactoryWaypointXY(
25752: PUSH
25753: LD_VAR 0 3
25757: PUSH
25758: LD_VAR 0 2
25762: ARRAY
25763: PUSH
25764: LD_INT 1
25766: ARRAY
25767: STR
25768: PUSH
25769: LD_STRING ,
25771: STR
25772: PUSH
25773: LD_VAR 0 3
25777: PUSH
25778: LD_VAR 0 2
25782: ARRAY
25783: PUSH
25784: LD_INT 2
25786: ARRAY
25787: STR
25788: PUSH
25789: LD_STRING ,
25791: STR
25792: PUSH
25793: LD_VAR 0 3
25797: PUSH
25798: LD_VAR 0 2
25802: ARRAY
25803: PUSH
25804: LD_INT 3
25806: ARRAY
25807: STR
25808: PUSH
25809: LD_STRING ,
25811: STR
25812: PUSH
25813: LD_VAR 0 3
25817: PUSH
25818: LD_VAR 0 2
25822: ARRAY
25823: PUSH
25824: LD_INT 4
25826: ARRAY
25827: STR
25828: PUSH
25829: LD_STRING )
25831: STR
25832: PPUSH
25833: CALL_OW 559
25837: GO 25747
25839: POP
25840: POP
// end ; end ;
25841: LD_VAR 0 1
25845: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
25846: LD_INT 0
25848: PPUSH
// if HexInfo ( x , y ) = warehouse then
25849: LD_VAR 0 2
25853: PPUSH
25854: LD_VAR 0 3
25858: PPUSH
25859: CALL_OW 428
25863: PUSH
25864: LD_VAR 0 1
25868: EQUAL
25869: IFFALSE 25896
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
25871: LD_ADDR_EXP 106
25875: PUSH
25876: LD_EXP 106
25880: PPUSH
25881: LD_VAR 0 1
25885: PPUSH
25886: LD_INT 0
25888: PPUSH
25889: CALL_OW 1
25893: ST_TO_ADDR
25894: GO 25947
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
25896: LD_ADDR_EXP 106
25900: PUSH
25901: LD_EXP 106
25905: PPUSH
25906: LD_VAR 0 1
25910: PPUSH
25911: LD_VAR 0 1
25915: PPUSH
25916: CALL_OW 255
25920: PUSH
25921: LD_VAR 0 1
25925: PUSH
25926: LD_VAR 0 2
25930: PUSH
25931: LD_VAR 0 3
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: PPUSH
25942: CALL_OW 1
25946: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
25947: CALL 25956 0 0
// end ;
25951: LD_VAR 0 4
25955: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
25956: LD_INT 0
25958: PPUSH
25959: PPUSH
25960: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
25961: LD_STRING resetWarehouseGatheringPoints();
25963: PPUSH
25964: CALL_OW 559
// if warehouseGatheringPoints then
25968: LD_EXP 106
25972: IFFALSE 26098
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
25974: LD_ADDR_VAR 0 3
25978: PUSH
25979: LD_EXP 106
25983: PPUSH
25984: CALL 72310 0 1
25988: ST_TO_ADDR
// for i := 1 to list do
25989: LD_ADDR_VAR 0 2
25993: PUSH
25994: DOUBLE
25995: LD_INT 1
25997: DEC
25998: ST_TO_ADDR
25999: LD_VAR 0 3
26003: PUSH
26004: FOR_TO
26005: IFFALSE 26096
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26007: LD_STRING setWarehouseGatheringPointXY(
26009: PUSH
26010: LD_VAR 0 3
26014: PUSH
26015: LD_VAR 0 2
26019: ARRAY
26020: PUSH
26021: LD_INT 1
26023: ARRAY
26024: STR
26025: PUSH
26026: LD_STRING ,
26028: STR
26029: PUSH
26030: LD_VAR 0 3
26034: PUSH
26035: LD_VAR 0 2
26039: ARRAY
26040: PUSH
26041: LD_INT 2
26043: ARRAY
26044: STR
26045: PUSH
26046: LD_STRING ,
26048: STR
26049: PUSH
26050: LD_VAR 0 3
26054: PUSH
26055: LD_VAR 0 2
26059: ARRAY
26060: PUSH
26061: LD_INT 3
26063: ARRAY
26064: STR
26065: PUSH
26066: LD_STRING ,
26068: STR
26069: PUSH
26070: LD_VAR 0 3
26074: PUSH
26075: LD_VAR 0 2
26079: ARRAY
26080: PUSH
26081: LD_INT 4
26083: ARRAY
26084: STR
26085: PUSH
26086: LD_STRING )
26088: STR
26089: PPUSH
26090: CALL_OW 559
26094: GO 26004
26096: POP
26097: POP
// end ; end ;
26098: LD_VAR 0 1
26102: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
26103: LD_EXP 106
26107: IFFALSE 26792
26109: GO 26111
26111: DISABLE
26112: LD_INT 0
26114: PPUSH
26115: PPUSH
26116: PPUSH
26117: PPUSH
26118: PPUSH
26119: PPUSH
26120: PPUSH
26121: PPUSH
26122: PPUSH
// begin enable ;
26123: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
26124: LD_ADDR_VAR 0 3
26128: PUSH
26129: LD_EXP 106
26133: PPUSH
26134: CALL 72310 0 1
26138: ST_TO_ADDR
// if not list then
26139: LD_VAR 0 3
26143: NOT
26144: IFFALSE 26148
// exit ;
26146: GO 26792
// for i := 1 to list do
26148: LD_ADDR_VAR 0 1
26152: PUSH
26153: DOUBLE
26154: LD_INT 1
26156: DEC
26157: ST_TO_ADDR
26158: LD_VAR 0 3
26162: PUSH
26163: FOR_TO
26164: IFFALSE 26790
// begin depot := list [ i ] [ 2 ] ;
26166: LD_ADDR_VAR 0 8
26170: PUSH
26171: LD_VAR 0 3
26175: PUSH
26176: LD_VAR 0 1
26180: ARRAY
26181: PUSH
26182: LD_INT 2
26184: ARRAY
26185: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
26186: LD_ADDR_VAR 0 5
26190: PUSH
26191: LD_VAR 0 3
26195: PUSH
26196: LD_VAR 0 1
26200: ARRAY
26201: PUSH
26202: LD_INT 1
26204: ARRAY
26205: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
26206: LD_VAR 0 8
26210: PPUSH
26211: CALL_OW 301
26215: PUSH
26216: LD_VAR 0 5
26220: PUSH
26221: LD_VAR 0 8
26225: PPUSH
26226: CALL_OW 255
26230: NONEQUAL
26231: OR
26232: IFFALSE 26261
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
26234: LD_ADDR_EXP 106
26238: PUSH
26239: LD_EXP 106
26243: PPUSH
26244: LD_VAR 0 8
26248: PPUSH
26249: LD_INT 0
26251: PPUSH
26252: CALL_OW 1
26256: ST_TO_ADDR
// exit ;
26257: POP
26258: POP
26259: GO 26792
// end ; x := list [ i ] [ 3 ] ;
26261: LD_ADDR_VAR 0 6
26265: PUSH
26266: LD_VAR 0 3
26270: PUSH
26271: LD_VAR 0 1
26275: ARRAY
26276: PUSH
26277: LD_INT 3
26279: ARRAY
26280: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
26281: LD_ADDR_VAR 0 7
26285: PUSH
26286: LD_VAR 0 3
26290: PUSH
26291: LD_VAR 0 1
26295: ARRAY
26296: PUSH
26297: LD_INT 4
26299: ARRAY
26300: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
26301: LD_ADDR_VAR 0 9
26305: PUSH
26306: LD_VAR 0 6
26310: PPUSH
26311: LD_VAR 0 7
26315: PPUSH
26316: LD_INT 16
26318: PPUSH
26319: CALL 70898 0 3
26323: ST_TO_ADDR
// if not cratesNearbyPoint then
26324: LD_VAR 0 9
26328: NOT
26329: IFFALSE 26335
// exit ;
26331: POP
26332: POP
26333: GO 26792
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26335: LD_ADDR_VAR 0 4
26339: PUSH
26340: LD_INT 22
26342: PUSH
26343: LD_VAR 0 5
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: PUSH
26352: LD_INT 3
26354: PUSH
26355: LD_INT 60
26357: PUSH
26358: EMPTY
26359: LIST
26360: PUSH
26361: EMPTY
26362: LIST
26363: LIST
26364: PUSH
26365: LD_INT 91
26367: PUSH
26368: LD_VAR 0 8
26372: PUSH
26373: LD_INT 6
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: LIST
26380: PUSH
26381: LD_INT 2
26383: PUSH
26384: LD_INT 25
26386: PUSH
26387: LD_INT 2
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 25
26396: PUSH
26397: LD_INT 16
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: LIST
26408: PUSH
26409: EMPTY
26410: LIST
26411: LIST
26412: LIST
26413: LIST
26414: PPUSH
26415: CALL_OW 69
26419: PUSH
26420: LD_VAR 0 8
26424: PPUSH
26425: CALL_OW 313
26429: PPUSH
26430: LD_INT 3
26432: PUSH
26433: LD_INT 60
26435: PUSH
26436: EMPTY
26437: LIST
26438: PUSH
26439: EMPTY
26440: LIST
26441: LIST
26442: PUSH
26443: LD_INT 2
26445: PUSH
26446: LD_INT 25
26448: PUSH
26449: LD_INT 2
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: PUSH
26456: LD_INT 25
26458: PUSH
26459: LD_INT 16
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: LIST
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PPUSH
26475: CALL_OW 72
26479: UNION
26480: ST_TO_ADDR
// if tmp then
26481: LD_VAR 0 4
26485: IFFALSE 26565
// begin tmp := ShrinkArray ( tmp , 3 ) ;
26487: LD_ADDR_VAR 0 4
26491: PUSH
26492: LD_VAR 0 4
26496: PPUSH
26497: LD_INT 3
26499: PPUSH
26500: CALL 68867 0 2
26504: ST_TO_ADDR
// for j in tmp do
26505: LD_ADDR_VAR 0 2
26509: PUSH
26510: LD_VAR 0 4
26514: PUSH
26515: FOR_IN
26516: IFFALSE 26559
// begin if IsInUnit ( j ) then
26518: LD_VAR 0 2
26522: PPUSH
26523: CALL_OW 310
26527: IFFALSE 26538
// ComExit ( j ) ;
26529: LD_VAR 0 2
26533: PPUSH
26534: CALL 68950 0 1
// AddComCollect ( j , x , y ) ;
26538: LD_VAR 0 2
26542: PPUSH
26543: LD_VAR 0 6
26547: PPUSH
26548: LD_VAR 0 7
26552: PPUSH
26553: CALL_OW 177
// end ;
26557: GO 26515
26559: POP
26560: POP
// exit ;
26561: POP
26562: POP
26563: GO 26792
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
26565: LD_ADDR_VAR 0 4
26569: PUSH
26570: LD_INT 22
26572: PUSH
26573: LD_VAR 0 5
26577: PUSH
26578: EMPTY
26579: LIST
26580: LIST
26581: PUSH
26582: LD_INT 91
26584: PUSH
26585: LD_VAR 0 8
26589: PUSH
26590: LD_INT 8
26592: PUSH
26593: EMPTY
26594: LIST
26595: LIST
26596: LIST
26597: PUSH
26598: LD_INT 2
26600: PUSH
26601: LD_INT 34
26603: PUSH
26604: LD_INT 12
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: PUSH
26611: LD_INT 34
26613: PUSH
26614: LD_INT 51
26616: PUSH
26617: EMPTY
26618: LIST
26619: LIST
26620: PUSH
26621: LD_INT 34
26623: PUSH
26624: LD_INT 32
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PUSH
26631: LD_INT 34
26633: PUSH
26634: LD_INT 89
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: PUSH
26641: EMPTY
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: PUSH
26648: EMPTY
26649: LIST
26650: LIST
26651: LIST
26652: PPUSH
26653: CALL_OW 69
26657: ST_TO_ADDR
// if tmp then
26658: LD_VAR 0 4
26662: IFFALSE 26788
// begin for j in tmp do
26664: LD_ADDR_VAR 0 2
26668: PUSH
26669: LD_VAR 0 4
26673: PUSH
26674: FOR_IN
26675: IFFALSE 26786
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
26677: LD_VAR 0 2
26681: PPUSH
26682: CALL_OW 262
26686: PUSH
26687: LD_INT 3
26689: EQUAL
26690: PUSH
26691: LD_VAR 0 2
26695: PPUSH
26696: CALL_OW 261
26700: PUSH
26701: LD_INT 20
26703: GREATER
26704: OR
26705: PUSH
26706: LD_VAR 0 2
26710: PPUSH
26711: CALL_OW 314
26715: NOT
26716: AND
26717: PUSH
26718: LD_VAR 0 2
26722: PPUSH
26723: CALL_OW 263
26727: PUSH
26728: LD_INT 1
26730: NONEQUAL
26731: PUSH
26732: LD_VAR 0 2
26736: PPUSH
26737: CALL_OW 311
26741: OR
26742: AND
26743: IFFALSE 26784
// begin ComCollect ( j , x , y ) ;
26745: LD_VAR 0 2
26749: PPUSH
26750: LD_VAR 0 6
26754: PPUSH
26755: LD_VAR 0 7
26759: PPUSH
26760: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
26764: LD_VAR 0 2
26768: PPUSH
26769: LD_VAR 0 8
26773: PPUSH
26774: CALL_OW 172
// exit ;
26778: POP
26779: POP
26780: POP
26781: POP
26782: GO 26792
// end ;
26784: GO 26674
26786: POP
26787: POP
// end ; end ;
26788: GO 26163
26790: POP
26791: POP
// end ; end_of_file
26792: PPOPN 9
26794: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26795: LD_INT 0
26797: PPUSH
26798: PPUSH
26799: PPUSH
26800: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
26801: LD_VAR 0 1
26805: PPUSH
26806: CALL_OW 264
26810: PUSH
26811: LD_INT 91
26813: EQUAL
26814: IFFALSE 26886
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26816: LD_INT 68
26818: PPUSH
26819: LD_VAR 0 1
26823: PPUSH
26824: CALL_OW 255
26828: PPUSH
26829: CALL_OW 321
26833: PUSH
26834: LD_INT 2
26836: EQUAL
26837: IFFALSE 26849
// eff := 70 else
26839: LD_ADDR_VAR 0 4
26843: PUSH
26844: LD_INT 70
26846: ST_TO_ADDR
26847: GO 26857
// eff := 30 ;
26849: LD_ADDR_VAR 0 4
26853: PUSH
26854: LD_INT 30
26856: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26857: LD_VAR 0 1
26861: PPUSH
26862: CALL_OW 250
26866: PPUSH
26867: LD_VAR 0 1
26871: PPUSH
26872: CALL_OW 251
26876: PPUSH
26877: LD_VAR 0 4
26881: PPUSH
26882: CALL_OW 495
// end ; end ;
26886: LD_VAR 0 2
26890: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26891: LD_INT 0
26893: PPUSH
// end ;
26894: LD_VAR 0 4
26898: RET
// export function SOS_Command ( cmd ) ; begin
26899: LD_INT 0
26901: PPUSH
// end ;
26902: LD_VAR 0 2
26906: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26907: LD_INT 0
26909: PPUSH
// end ;
26910: LD_VAR 0 6
26914: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
26915: LD_INT 0
26917: PPUSH
26918: PPUSH
// if not vehicle or not factory then
26919: LD_VAR 0 1
26923: NOT
26924: PUSH
26925: LD_VAR 0 2
26929: NOT
26930: OR
26931: IFFALSE 26935
// exit ;
26933: GO 27166
// if factoryWaypoints >= factory then
26935: LD_EXP 105
26939: PUSH
26940: LD_VAR 0 2
26944: GREATEREQUAL
26945: IFFALSE 27166
// if factoryWaypoints [ factory ] then
26947: LD_EXP 105
26951: PUSH
26952: LD_VAR 0 2
26956: ARRAY
26957: IFFALSE 27166
// begin if GetControl ( vehicle ) = control_manual then
26959: LD_VAR 0 1
26963: PPUSH
26964: CALL_OW 263
26968: PUSH
26969: LD_INT 1
26971: EQUAL
26972: IFFALSE 27053
// begin driver := IsDrivenBy ( vehicle ) ;
26974: LD_ADDR_VAR 0 4
26978: PUSH
26979: LD_VAR 0 1
26983: PPUSH
26984: CALL_OW 311
26988: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26989: LD_VAR 0 4
26993: PPUSH
26994: LD_EXP 105
26998: PUSH
26999: LD_VAR 0 2
27003: ARRAY
27004: PUSH
27005: LD_INT 3
27007: ARRAY
27008: PPUSH
27009: LD_EXP 105
27013: PUSH
27014: LD_VAR 0 2
27018: ARRAY
27019: PUSH
27020: LD_INT 4
27022: ARRAY
27023: PPUSH
27024: CALL_OW 171
// AddComExitVehicle ( driver ) ;
27028: LD_VAR 0 4
27032: PPUSH
27033: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
27037: LD_VAR 0 4
27041: PPUSH
27042: LD_VAR 0 2
27046: PPUSH
27047: CALL_OW 180
// end else
27051: GO 27166
// if GetControl ( vehicle ) = control_remote then
27053: LD_VAR 0 1
27057: PPUSH
27058: CALL_OW 263
27062: PUSH
27063: LD_INT 2
27065: EQUAL
27066: IFFALSE 27127
// begin wait ( 0 0$2 ) ;
27068: LD_INT 70
27070: PPUSH
27071: CALL_OW 67
// if Connect ( vehicle ) then
27075: LD_VAR 0 1
27079: PPUSH
27080: CALL 39190 0 1
27084: IFFALSE 27125
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27086: LD_VAR 0 1
27090: PPUSH
27091: LD_EXP 105
27095: PUSH
27096: LD_VAR 0 2
27100: ARRAY
27101: PUSH
27102: LD_INT 3
27104: ARRAY
27105: PPUSH
27106: LD_EXP 105
27110: PUSH
27111: LD_VAR 0 2
27115: ARRAY
27116: PUSH
27117: LD_INT 4
27119: ARRAY
27120: PPUSH
27121: CALL_OW 171
// end else
27125: GO 27166
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27127: LD_VAR 0 1
27131: PPUSH
27132: LD_EXP 105
27136: PUSH
27137: LD_VAR 0 2
27141: ARRAY
27142: PUSH
27143: LD_INT 3
27145: ARRAY
27146: PPUSH
27147: LD_EXP 105
27151: PUSH
27152: LD_VAR 0 2
27156: ARRAY
27157: PUSH
27158: LD_INT 4
27160: ARRAY
27161: PPUSH
27162: CALL_OW 171
// end ; end ;
27166: LD_VAR 0 3
27170: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27171: LD_INT 0
27173: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27174: LD_VAR 0 1
27178: PUSH
27179: LD_INT 250
27181: EQUAL
27182: PUSH
27183: LD_VAR 0 2
27187: PPUSH
27188: CALL_OW 264
27192: PUSH
27193: LD_INT 81
27195: EQUAL
27196: AND
27197: IFFALSE 27218
// MinerPlaceMine ( unit , x , y ) ;
27199: LD_VAR 0 2
27203: PPUSH
27204: LD_VAR 0 4
27208: PPUSH
27209: LD_VAR 0 5
27213: PPUSH
27214: CALL 29603 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27218: LD_VAR 0 1
27222: PUSH
27223: LD_INT 251
27225: EQUAL
27226: PUSH
27227: LD_VAR 0 2
27231: PPUSH
27232: CALL_OW 264
27236: PUSH
27237: LD_INT 81
27239: EQUAL
27240: AND
27241: IFFALSE 27262
// MinerDetonateMine ( unit , x , y ) ;
27243: LD_VAR 0 2
27247: PPUSH
27248: LD_VAR 0 4
27252: PPUSH
27253: LD_VAR 0 5
27257: PPUSH
27258: CALL 29878 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27262: LD_VAR 0 1
27266: PUSH
27267: LD_INT 252
27269: EQUAL
27270: PUSH
27271: LD_VAR 0 2
27275: PPUSH
27276: CALL_OW 264
27280: PUSH
27281: LD_INT 81
27283: EQUAL
27284: AND
27285: IFFALSE 27306
// MinerCreateMinefield ( unit , x , y ) ;
27287: LD_VAR 0 2
27291: PPUSH
27292: LD_VAR 0 4
27296: PPUSH
27297: LD_VAR 0 5
27301: PPUSH
27302: CALL 30295 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27306: LD_VAR 0 1
27310: PUSH
27311: LD_INT 253
27313: EQUAL
27314: PUSH
27315: LD_VAR 0 2
27319: PPUSH
27320: CALL_OW 257
27324: PUSH
27325: LD_INT 5
27327: EQUAL
27328: AND
27329: IFFALSE 27350
// ComBinocular ( unit , x , y ) ;
27331: LD_VAR 0 2
27335: PPUSH
27336: LD_VAR 0 4
27340: PPUSH
27341: LD_VAR 0 5
27345: PPUSH
27346: CALL 30664 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27350: LD_VAR 0 1
27354: PUSH
27355: LD_INT 254
27357: EQUAL
27358: PUSH
27359: LD_VAR 0 2
27363: PPUSH
27364: CALL_OW 264
27368: PUSH
27369: LD_INT 99
27371: EQUAL
27372: AND
27373: PUSH
27374: LD_VAR 0 3
27378: PPUSH
27379: CALL_OW 263
27383: PUSH
27384: LD_INT 3
27386: EQUAL
27387: AND
27388: IFFALSE 27404
// HackDestroyVehicle ( unit , selectedUnit ) ;
27390: LD_VAR 0 2
27394: PPUSH
27395: LD_VAR 0 3
27399: PPUSH
27400: CALL 28967 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27404: LD_VAR 0 1
27408: PUSH
27409: LD_INT 255
27411: EQUAL
27412: PUSH
27413: LD_VAR 0 2
27417: PPUSH
27418: CALL_OW 264
27422: PUSH
27423: LD_INT 14
27425: PUSH
27426: LD_INT 53
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: IN
27433: AND
27434: PUSH
27435: LD_VAR 0 4
27439: PPUSH
27440: LD_VAR 0 5
27444: PPUSH
27445: CALL_OW 488
27449: AND
27450: IFFALSE 27474
// CutTreeXYR ( unit , x , y , 12 ) ;
27452: LD_VAR 0 2
27456: PPUSH
27457: LD_VAR 0 4
27461: PPUSH
27462: LD_VAR 0 5
27466: PPUSH
27467: LD_INT 12
27469: PPUSH
27470: CALL 27537 0 4
// if cmd = 256 then
27474: LD_VAR 0 1
27478: PUSH
27479: LD_INT 256
27481: EQUAL
27482: IFFALSE 27503
// SetFactoryWaypoint ( unit , x , y ) ;
27484: LD_VAR 0 2
27488: PPUSH
27489: LD_VAR 0 4
27493: PPUSH
27494: LD_VAR 0 5
27498: PPUSH
27499: CALL 25484 0 3
// if cmd = 257 then
27503: LD_VAR 0 1
27507: PUSH
27508: LD_INT 257
27510: EQUAL
27511: IFFALSE 27532
// SetWarehouseGatheringPoint ( unit , x , y ) ;
27513: LD_VAR 0 2
27517: PPUSH
27518: LD_VAR 0 4
27522: PPUSH
27523: LD_VAR 0 5
27527: PPUSH
27528: CALL 25846 0 3
// end ;
27532: LD_VAR 0 6
27536: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27537: LD_INT 0
27539: PPUSH
27540: PPUSH
27541: PPUSH
27542: PPUSH
27543: PPUSH
27544: PPUSH
27545: PPUSH
27546: PPUSH
27547: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
27548: LD_VAR 0 1
27552: NOT
27553: PUSH
27554: LD_VAR 0 2
27558: PPUSH
27559: LD_VAR 0 3
27563: PPUSH
27564: CALL_OW 488
27568: NOT
27569: OR
27570: PUSH
27571: LD_VAR 0 4
27575: NOT
27576: OR
27577: IFFALSE 27581
// exit ;
27579: GO 27921
// list := [ ] ;
27581: LD_ADDR_VAR 0 13
27585: PUSH
27586: EMPTY
27587: ST_TO_ADDR
// if x - r < 0 then
27588: LD_VAR 0 2
27592: PUSH
27593: LD_VAR 0 4
27597: MINUS
27598: PUSH
27599: LD_INT 0
27601: LESS
27602: IFFALSE 27614
// min_x := 0 else
27604: LD_ADDR_VAR 0 7
27608: PUSH
27609: LD_INT 0
27611: ST_TO_ADDR
27612: GO 27630
// min_x := x - r ;
27614: LD_ADDR_VAR 0 7
27618: PUSH
27619: LD_VAR 0 2
27623: PUSH
27624: LD_VAR 0 4
27628: MINUS
27629: ST_TO_ADDR
// if y - r < 0 then
27630: LD_VAR 0 3
27634: PUSH
27635: LD_VAR 0 4
27639: MINUS
27640: PUSH
27641: LD_INT 0
27643: LESS
27644: IFFALSE 27656
// min_y := 0 else
27646: LD_ADDR_VAR 0 8
27650: PUSH
27651: LD_INT 0
27653: ST_TO_ADDR
27654: GO 27672
// min_y := y - r ;
27656: LD_ADDR_VAR 0 8
27660: PUSH
27661: LD_VAR 0 3
27665: PUSH
27666: LD_VAR 0 4
27670: MINUS
27671: ST_TO_ADDR
// max_x := x + r ;
27672: LD_ADDR_VAR 0 9
27676: PUSH
27677: LD_VAR 0 2
27681: PUSH
27682: LD_VAR 0 4
27686: PLUS
27687: ST_TO_ADDR
// max_y := y + r ;
27688: LD_ADDR_VAR 0 10
27692: PUSH
27693: LD_VAR 0 3
27697: PUSH
27698: LD_VAR 0 4
27702: PLUS
27703: ST_TO_ADDR
// for _x = min_x to max_x do
27704: LD_ADDR_VAR 0 11
27708: PUSH
27709: DOUBLE
27710: LD_VAR 0 7
27714: DEC
27715: ST_TO_ADDR
27716: LD_VAR 0 9
27720: PUSH
27721: FOR_TO
27722: IFFALSE 27839
// for _y = min_y to max_y do
27724: LD_ADDR_VAR 0 12
27728: PUSH
27729: DOUBLE
27730: LD_VAR 0 8
27734: DEC
27735: ST_TO_ADDR
27736: LD_VAR 0 10
27740: PUSH
27741: FOR_TO
27742: IFFALSE 27835
// begin if not ValidHex ( _x , _y ) then
27744: LD_VAR 0 11
27748: PPUSH
27749: LD_VAR 0 12
27753: PPUSH
27754: CALL_OW 488
27758: NOT
27759: IFFALSE 27763
// continue ;
27761: GO 27741
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27763: LD_VAR 0 11
27767: PPUSH
27768: LD_VAR 0 12
27772: PPUSH
27773: CALL_OW 351
27777: PUSH
27778: LD_VAR 0 11
27782: PPUSH
27783: LD_VAR 0 12
27787: PPUSH
27788: CALL_OW 554
27792: AND
27793: IFFALSE 27833
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27795: LD_ADDR_VAR 0 13
27799: PUSH
27800: LD_VAR 0 13
27804: PPUSH
27805: LD_VAR 0 13
27809: PUSH
27810: LD_INT 1
27812: PLUS
27813: PPUSH
27814: LD_VAR 0 11
27818: PUSH
27819: LD_VAR 0 12
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PPUSH
27828: CALL_OW 2
27832: ST_TO_ADDR
// end ;
27833: GO 27741
27835: POP
27836: POP
27837: GO 27721
27839: POP
27840: POP
// if not list then
27841: LD_VAR 0 13
27845: NOT
27846: IFFALSE 27850
// exit ;
27848: GO 27921
// for i in list do
27850: LD_ADDR_VAR 0 6
27854: PUSH
27855: LD_VAR 0 13
27859: PUSH
27860: FOR_IN
27861: IFFALSE 27919
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27863: LD_VAR 0 1
27867: PPUSH
27868: LD_STRING M
27870: PUSH
27871: LD_VAR 0 6
27875: PUSH
27876: LD_INT 1
27878: ARRAY
27879: PUSH
27880: LD_VAR 0 6
27884: PUSH
27885: LD_INT 2
27887: ARRAY
27888: PUSH
27889: LD_INT 0
27891: PUSH
27892: LD_INT 0
27894: PUSH
27895: LD_INT 0
27897: PUSH
27898: LD_INT 0
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: PUSH
27910: EMPTY
27911: LIST
27912: PPUSH
27913: CALL_OW 447
27917: GO 27860
27919: POP
27920: POP
// end ;
27921: LD_VAR 0 5
27925: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
27926: LD_EXP 108
27930: NOT
27931: IFFALSE 27981
27933: GO 27935
27935: DISABLE
// begin initHack := true ;
27936: LD_ADDR_EXP 108
27940: PUSH
27941: LD_INT 1
27943: ST_TO_ADDR
// hackTanks := [ ] ;
27944: LD_ADDR_EXP 109
27948: PUSH
27949: EMPTY
27950: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
27951: LD_ADDR_EXP 110
27955: PUSH
27956: EMPTY
27957: ST_TO_ADDR
// hackLimit := 3 ;
27958: LD_ADDR_EXP 111
27962: PUSH
27963: LD_INT 3
27965: ST_TO_ADDR
// hackDist := 12 ;
27966: LD_ADDR_EXP 112
27970: PUSH
27971: LD_INT 12
27973: ST_TO_ADDR
// hackCounter := [ ] ;
27974: LD_ADDR_EXP 113
27978: PUSH
27979: EMPTY
27980: ST_TO_ADDR
// end ;
27981: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
27982: LD_EXP 108
27986: PUSH
27987: LD_INT 34
27989: PUSH
27990: LD_INT 99
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: PPUSH
27997: CALL_OW 69
28001: AND
28002: IFFALSE 28255
28004: GO 28006
28006: DISABLE
28007: LD_INT 0
28009: PPUSH
28010: PPUSH
// begin enable ;
28011: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
28012: LD_ADDR_VAR 0 1
28016: PUSH
28017: LD_INT 34
28019: PUSH
28020: LD_INT 99
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: PPUSH
28027: CALL_OW 69
28031: PUSH
28032: FOR_IN
28033: IFFALSE 28253
// begin if not i in hackTanks then
28035: LD_VAR 0 1
28039: PUSH
28040: LD_EXP 109
28044: IN
28045: NOT
28046: IFFALSE 28129
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28048: LD_ADDR_EXP 109
28052: PUSH
28053: LD_EXP 109
28057: PPUSH
28058: LD_EXP 109
28062: PUSH
28063: LD_INT 1
28065: PLUS
28066: PPUSH
28067: LD_VAR 0 1
28071: PPUSH
28072: CALL_OW 1
28076: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28077: LD_ADDR_EXP 110
28081: PUSH
28082: LD_EXP 110
28086: PPUSH
28087: LD_EXP 110
28091: PUSH
28092: LD_INT 1
28094: PLUS
28095: PPUSH
28096: EMPTY
28097: PPUSH
28098: CALL_OW 1
28102: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28103: LD_ADDR_EXP 113
28107: PUSH
28108: LD_EXP 113
28112: PPUSH
28113: LD_EXP 113
28117: PUSH
28118: LD_INT 1
28120: PLUS
28121: PPUSH
28122: EMPTY
28123: PPUSH
28124: CALL_OW 1
28128: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28129: LD_VAR 0 1
28133: PPUSH
28134: CALL_OW 302
28138: NOT
28139: IFFALSE 28152
// begin HackUnlinkAll ( i ) ;
28141: LD_VAR 0 1
28145: PPUSH
28146: CALL 28258 0 1
// continue ;
28150: GO 28032
// end ; HackCheckCapturedStatus ( i ) ;
28152: LD_VAR 0 1
28156: PPUSH
28157: CALL 28701 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28161: LD_ADDR_VAR 0 2
28165: PUSH
28166: LD_INT 81
28168: PUSH
28169: LD_VAR 0 1
28173: PPUSH
28174: CALL_OW 255
28178: PUSH
28179: EMPTY
28180: LIST
28181: LIST
28182: PUSH
28183: LD_INT 33
28185: PUSH
28186: LD_INT 3
28188: PUSH
28189: EMPTY
28190: LIST
28191: LIST
28192: PUSH
28193: LD_INT 91
28195: PUSH
28196: LD_VAR 0 1
28200: PUSH
28201: LD_EXP 112
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: LIST
28210: PUSH
28211: LD_INT 50
28213: PUSH
28214: EMPTY
28215: LIST
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: LIST
28221: LIST
28222: PPUSH
28223: CALL_OW 69
28227: ST_TO_ADDR
// if not tmp then
28228: LD_VAR 0 2
28232: NOT
28233: IFFALSE 28237
// continue ;
28235: GO 28032
// HackLink ( i , tmp ) ;
28237: LD_VAR 0 1
28241: PPUSH
28242: LD_VAR 0 2
28246: PPUSH
28247: CALL 28394 0 2
// end ;
28251: GO 28032
28253: POP
28254: POP
// end ;
28255: PPOPN 2
28257: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28258: LD_INT 0
28260: PPUSH
28261: PPUSH
28262: PPUSH
// if not hack in hackTanks then
28263: LD_VAR 0 1
28267: PUSH
28268: LD_EXP 109
28272: IN
28273: NOT
28274: IFFALSE 28278
// exit ;
28276: GO 28389
// index := GetElementIndex ( hackTanks , hack ) ;
28278: LD_ADDR_VAR 0 4
28282: PUSH
28283: LD_EXP 109
28287: PPUSH
28288: LD_VAR 0 1
28292: PPUSH
28293: CALL 36006 0 2
28297: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28298: LD_EXP 110
28302: PUSH
28303: LD_VAR 0 4
28307: ARRAY
28308: IFFALSE 28389
// begin for i in hackTanksCaptured [ index ] do
28310: LD_ADDR_VAR 0 3
28314: PUSH
28315: LD_EXP 110
28319: PUSH
28320: LD_VAR 0 4
28324: ARRAY
28325: PUSH
28326: FOR_IN
28327: IFFALSE 28353
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28329: LD_VAR 0 3
28333: PUSH
28334: LD_INT 1
28336: ARRAY
28337: PPUSH
28338: LD_VAR 0 3
28342: PUSH
28343: LD_INT 2
28345: ARRAY
28346: PPUSH
28347: CALL_OW 235
28351: GO 28326
28353: POP
28354: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28355: LD_ADDR_EXP 110
28359: PUSH
28360: LD_EXP 110
28364: PPUSH
28365: LD_VAR 0 4
28369: PPUSH
28370: EMPTY
28371: PPUSH
28372: CALL_OW 1
28376: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28377: LD_VAR 0 1
28381: PPUSH
28382: LD_INT 0
28384: PPUSH
28385: CALL_OW 505
// end ; end ;
28389: LD_VAR 0 2
28393: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
28394: LD_INT 0
28396: PPUSH
28397: PPUSH
28398: PPUSH
// if not hack in hackTanks or not vehicles then
28399: LD_VAR 0 1
28403: PUSH
28404: LD_EXP 109
28408: IN
28409: NOT
28410: PUSH
28411: LD_VAR 0 2
28415: NOT
28416: OR
28417: IFFALSE 28421
// exit ;
28419: GO 28696
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
28421: LD_ADDR_VAR 0 2
28425: PUSH
28426: LD_VAR 0 1
28430: PPUSH
28431: LD_VAR 0 2
28435: PPUSH
28436: LD_INT 1
28438: PPUSH
28439: LD_INT 1
28441: PPUSH
28442: CALL 36656 0 4
28446: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
28447: LD_ADDR_VAR 0 5
28451: PUSH
28452: LD_EXP 109
28456: PPUSH
28457: LD_VAR 0 1
28461: PPUSH
28462: CALL 36006 0 2
28466: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
28467: LD_EXP 110
28471: PUSH
28472: LD_VAR 0 5
28476: ARRAY
28477: PUSH
28478: LD_EXP 111
28482: LESS
28483: IFFALSE 28672
// begin for i := 1 to vehicles do
28485: LD_ADDR_VAR 0 4
28489: PUSH
28490: DOUBLE
28491: LD_INT 1
28493: DEC
28494: ST_TO_ADDR
28495: LD_VAR 0 2
28499: PUSH
28500: FOR_TO
28501: IFFALSE 28670
// begin if hackTanksCaptured [ index ] = hackLimit then
28503: LD_EXP 110
28507: PUSH
28508: LD_VAR 0 5
28512: ARRAY
28513: PUSH
28514: LD_EXP 111
28518: EQUAL
28519: IFFALSE 28523
// break ;
28521: GO 28670
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
28523: LD_ADDR_EXP 113
28527: PUSH
28528: LD_EXP 113
28532: PPUSH
28533: LD_VAR 0 5
28537: PPUSH
28538: LD_EXP 113
28542: PUSH
28543: LD_VAR 0 5
28547: ARRAY
28548: PUSH
28549: LD_INT 1
28551: PLUS
28552: PPUSH
28553: CALL_OW 1
28557: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
28558: LD_ADDR_EXP 110
28562: PUSH
28563: LD_EXP 110
28567: PPUSH
28568: LD_VAR 0 5
28572: PUSH
28573: LD_EXP 110
28577: PUSH
28578: LD_VAR 0 5
28582: ARRAY
28583: PUSH
28584: LD_INT 1
28586: PLUS
28587: PUSH
28588: EMPTY
28589: LIST
28590: LIST
28591: PPUSH
28592: LD_VAR 0 2
28596: PUSH
28597: LD_VAR 0 4
28601: ARRAY
28602: PUSH
28603: LD_VAR 0 2
28607: PUSH
28608: LD_VAR 0 4
28612: ARRAY
28613: PPUSH
28614: CALL_OW 255
28618: PUSH
28619: EMPTY
28620: LIST
28621: LIST
28622: PPUSH
28623: CALL 36221 0 3
28627: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
28628: LD_VAR 0 2
28632: PUSH
28633: LD_VAR 0 4
28637: ARRAY
28638: PPUSH
28639: LD_VAR 0 1
28643: PPUSH
28644: CALL_OW 255
28648: PPUSH
28649: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
28653: LD_VAR 0 2
28657: PUSH
28658: LD_VAR 0 4
28662: ARRAY
28663: PPUSH
28664: CALL_OW 141
// end ;
28668: GO 28500
28670: POP
28671: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28672: LD_VAR 0 1
28676: PPUSH
28677: LD_EXP 110
28681: PUSH
28682: LD_VAR 0 5
28686: ARRAY
28687: PUSH
28688: LD_INT 0
28690: PLUS
28691: PPUSH
28692: CALL_OW 505
// end ;
28696: LD_VAR 0 3
28700: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28701: LD_INT 0
28703: PPUSH
28704: PPUSH
28705: PPUSH
28706: PPUSH
// if not hack in hackTanks then
28707: LD_VAR 0 1
28711: PUSH
28712: LD_EXP 109
28716: IN
28717: NOT
28718: IFFALSE 28722
// exit ;
28720: GO 28962
// index := GetElementIndex ( hackTanks , hack ) ;
28722: LD_ADDR_VAR 0 4
28726: PUSH
28727: LD_EXP 109
28731: PPUSH
28732: LD_VAR 0 1
28736: PPUSH
28737: CALL 36006 0 2
28741: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
28742: LD_ADDR_VAR 0 3
28746: PUSH
28747: DOUBLE
28748: LD_EXP 110
28752: PUSH
28753: LD_VAR 0 4
28757: ARRAY
28758: INC
28759: ST_TO_ADDR
28760: LD_INT 1
28762: PUSH
28763: FOR_DOWNTO
28764: IFFALSE 28936
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
28766: LD_ADDR_VAR 0 5
28770: PUSH
28771: LD_EXP 110
28775: PUSH
28776: LD_VAR 0 4
28780: ARRAY
28781: PUSH
28782: LD_VAR 0 3
28786: ARRAY
28787: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
28788: LD_VAR 0 5
28792: PUSH
28793: LD_INT 1
28795: ARRAY
28796: PPUSH
28797: CALL_OW 302
28801: NOT
28802: PUSH
28803: LD_VAR 0 5
28807: PUSH
28808: LD_INT 1
28810: ARRAY
28811: PPUSH
28812: CALL_OW 255
28816: PUSH
28817: LD_VAR 0 1
28821: PPUSH
28822: CALL_OW 255
28826: NONEQUAL
28827: OR
28828: IFFALSE 28934
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
28830: LD_VAR 0 5
28834: PUSH
28835: LD_INT 1
28837: ARRAY
28838: PPUSH
28839: CALL_OW 305
28843: PUSH
28844: LD_VAR 0 5
28848: PUSH
28849: LD_INT 1
28851: ARRAY
28852: PPUSH
28853: CALL_OW 255
28857: PUSH
28858: LD_VAR 0 1
28862: PPUSH
28863: CALL_OW 255
28867: EQUAL
28868: AND
28869: IFFALSE 28893
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
28871: LD_VAR 0 5
28875: PUSH
28876: LD_INT 1
28878: ARRAY
28879: PPUSH
28880: LD_VAR 0 5
28884: PUSH
28885: LD_INT 2
28887: ARRAY
28888: PPUSH
28889: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
28893: LD_ADDR_EXP 110
28897: PUSH
28898: LD_EXP 110
28902: PPUSH
28903: LD_VAR 0 4
28907: PPUSH
28908: LD_EXP 110
28912: PUSH
28913: LD_VAR 0 4
28917: ARRAY
28918: PPUSH
28919: LD_VAR 0 3
28923: PPUSH
28924: CALL_OW 3
28928: PPUSH
28929: CALL_OW 1
28933: ST_TO_ADDR
// end ; end ;
28934: GO 28763
28936: POP
28937: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28938: LD_VAR 0 1
28942: PPUSH
28943: LD_EXP 110
28947: PUSH
28948: LD_VAR 0 4
28952: ARRAY
28953: PUSH
28954: LD_INT 0
28956: PLUS
28957: PPUSH
28958: CALL_OW 505
// end ;
28962: LD_VAR 0 2
28966: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
28967: LD_INT 0
28969: PPUSH
28970: PPUSH
28971: PPUSH
28972: PPUSH
// if not hack in hackTanks then
28973: LD_VAR 0 1
28977: PUSH
28978: LD_EXP 109
28982: IN
28983: NOT
28984: IFFALSE 28988
// exit ;
28986: GO 29073
// index := GetElementIndex ( hackTanks , hack ) ;
28988: LD_ADDR_VAR 0 5
28992: PUSH
28993: LD_EXP 109
28997: PPUSH
28998: LD_VAR 0 1
29002: PPUSH
29003: CALL 36006 0 2
29007: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
29008: LD_ADDR_VAR 0 4
29012: PUSH
29013: DOUBLE
29014: LD_INT 1
29016: DEC
29017: ST_TO_ADDR
29018: LD_EXP 110
29022: PUSH
29023: LD_VAR 0 5
29027: ARRAY
29028: PUSH
29029: FOR_TO
29030: IFFALSE 29071
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
29032: LD_EXP 110
29036: PUSH
29037: LD_VAR 0 5
29041: ARRAY
29042: PUSH
29043: LD_VAR 0 4
29047: ARRAY
29048: PUSH
29049: LD_INT 1
29051: ARRAY
29052: PUSH
29053: LD_VAR 0 2
29057: EQUAL
29058: IFFALSE 29069
// KillUnit ( vehicle ) ;
29060: LD_VAR 0 2
29064: PPUSH
29065: CALL_OW 66
29069: GO 29029
29071: POP
29072: POP
// end ;
29073: LD_VAR 0 3
29077: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
29078: LD_EXP 114
29082: NOT
29083: IFFALSE 29118
29085: GO 29087
29087: DISABLE
// begin initMiner := true ;
29088: LD_ADDR_EXP 114
29092: PUSH
29093: LD_INT 1
29095: ST_TO_ADDR
// minersList := [ ] ;
29096: LD_ADDR_EXP 115
29100: PUSH
29101: EMPTY
29102: ST_TO_ADDR
// minerMinesList := [ ] ;
29103: LD_ADDR_EXP 116
29107: PUSH
29108: EMPTY
29109: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
29110: LD_ADDR_EXP 117
29114: PUSH
29115: LD_INT 5
29117: ST_TO_ADDR
// end ;
29118: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
29119: LD_EXP 114
29123: PUSH
29124: LD_INT 34
29126: PUSH
29127: LD_INT 81
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: PPUSH
29134: CALL_OW 69
29138: AND
29139: IFFALSE 29600
29141: GO 29143
29143: DISABLE
29144: LD_INT 0
29146: PPUSH
29147: PPUSH
29148: PPUSH
29149: PPUSH
// begin enable ;
29150: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29151: LD_ADDR_VAR 0 1
29155: PUSH
29156: LD_INT 34
29158: PUSH
29159: LD_INT 81
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: PPUSH
29166: CALL_OW 69
29170: PUSH
29171: FOR_IN
29172: IFFALSE 29244
// begin if not i in minersList then
29174: LD_VAR 0 1
29178: PUSH
29179: LD_EXP 115
29183: IN
29184: NOT
29185: IFFALSE 29242
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29187: LD_ADDR_EXP 115
29191: PUSH
29192: LD_EXP 115
29196: PPUSH
29197: LD_EXP 115
29201: PUSH
29202: LD_INT 1
29204: PLUS
29205: PPUSH
29206: LD_VAR 0 1
29210: PPUSH
29211: CALL_OW 1
29215: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29216: LD_ADDR_EXP 116
29220: PUSH
29221: LD_EXP 116
29225: PPUSH
29226: LD_EXP 116
29230: PUSH
29231: LD_INT 1
29233: PLUS
29234: PPUSH
29235: EMPTY
29236: PPUSH
29237: CALL_OW 1
29241: ST_TO_ADDR
// end end ;
29242: GO 29171
29244: POP
29245: POP
// for i := minerMinesList downto 1 do
29246: LD_ADDR_VAR 0 1
29250: PUSH
29251: DOUBLE
29252: LD_EXP 116
29256: INC
29257: ST_TO_ADDR
29258: LD_INT 1
29260: PUSH
29261: FOR_DOWNTO
29262: IFFALSE 29598
// begin if IsLive ( minersList [ i ] ) then
29264: LD_EXP 115
29268: PUSH
29269: LD_VAR 0 1
29273: ARRAY
29274: PPUSH
29275: CALL_OW 300
29279: IFFALSE 29307
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29281: LD_EXP 115
29285: PUSH
29286: LD_VAR 0 1
29290: ARRAY
29291: PPUSH
29292: LD_EXP 116
29296: PUSH
29297: LD_VAR 0 1
29301: ARRAY
29302: PPUSH
29303: CALL_OW 505
// if not minerMinesList [ i ] then
29307: LD_EXP 116
29311: PUSH
29312: LD_VAR 0 1
29316: ARRAY
29317: NOT
29318: IFFALSE 29322
// continue ;
29320: GO 29261
// for j := minerMinesList [ i ] downto 1 do
29322: LD_ADDR_VAR 0 2
29326: PUSH
29327: DOUBLE
29328: LD_EXP 116
29332: PUSH
29333: LD_VAR 0 1
29337: ARRAY
29338: INC
29339: ST_TO_ADDR
29340: LD_INT 1
29342: PUSH
29343: FOR_DOWNTO
29344: IFFALSE 29594
// begin side := GetSide ( minersList [ i ] ) ;
29346: LD_ADDR_VAR 0 3
29350: PUSH
29351: LD_EXP 115
29355: PUSH
29356: LD_VAR 0 1
29360: ARRAY
29361: PPUSH
29362: CALL_OW 255
29366: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29367: LD_ADDR_VAR 0 4
29371: PUSH
29372: LD_EXP 116
29376: PUSH
29377: LD_VAR 0 1
29381: ARRAY
29382: PUSH
29383: LD_VAR 0 2
29387: ARRAY
29388: PUSH
29389: LD_INT 1
29391: ARRAY
29392: PPUSH
29393: LD_EXP 116
29397: PUSH
29398: LD_VAR 0 1
29402: ARRAY
29403: PUSH
29404: LD_VAR 0 2
29408: ARRAY
29409: PUSH
29410: LD_INT 2
29412: ARRAY
29413: PPUSH
29414: CALL_OW 428
29418: ST_TO_ADDR
// if not tmp then
29419: LD_VAR 0 4
29423: NOT
29424: IFFALSE 29428
// continue ;
29426: GO 29343
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
29428: LD_VAR 0 4
29432: PUSH
29433: LD_INT 81
29435: PUSH
29436: LD_VAR 0 3
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: PPUSH
29445: CALL_OW 69
29449: IN
29450: PUSH
29451: LD_EXP 116
29455: PUSH
29456: LD_VAR 0 1
29460: ARRAY
29461: PUSH
29462: LD_VAR 0 2
29466: ARRAY
29467: PUSH
29468: LD_INT 1
29470: ARRAY
29471: PPUSH
29472: LD_EXP 116
29476: PUSH
29477: LD_VAR 0 1
29481: ARRAY
29482: PUSH
29483: LD_VAR 0 2
29487: ARRAY
29488: PUSH
29489: LD_INT 2
29491: ARRAY
29492: PPUSH
29493: CALL_OW 458
29497: AND
29498: IFFALSE 29592
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
29500: LD_EXP 116
29504: PUSH
29505: LD_VAR 0 1
29509: ARRAY
29510: PUSH
29511: LD_VAR 0 2
29515: ARRAY
29516: PUSH
29517: LD_INT 1
29519: ARRAY
29520: PPUSH
29521: LD_EXP 116
29525: PUSH
29526: LD_VAR 0 1
29530: ARRAY
29531: PUSH
29532: LD_VAR 0 2
29536: ARRAY
29537: PUSH
29538: LD_INT 2
29540: ARRAY
29541: PPUSH
29542: LD_VAR 0 3
29546: PPUSH
29547: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
29551: LD_ADDR_EXP 116
29555: PUSH
29556: LD_EXP 116
29560: PPUSH
29561: LD_VAR 0 1
29565: PPUSH
29566: LD_EXP 116
29570: PUSH
29571: LD_VAR 0 1
29575: ARRAY
29576: PPUSH
29577: LD_VAR 0 2
29581: PPUSH
29582: CALL_OW 3
29586: PPUSH
29587: CALL_OW 1
29591: ST_TO_ADDR
// end ; end ;
29592: GO 29343
29594: POP
29595: POP
// end ;
29596: GO 29261
29598: POP
29599: POP
// end ;
29600: PPOPN 4
29602: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
29603: LD_INT 0
29605: PPUSH
29606: PPUSH
// result := false ;
29607: LD_ADDR_VAR 0 4
29611: PUSH
29612: LD_INT 0
29614: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
29615: LD_VAR 0 1
29619: PPUSH
29620: CALL_OW 264
29624: PUSH
29625: LD_INT 81
29627: EQUAL
29628: NOT
29629: IFFALSE 29633
// exit ;
29631: GO 29873
// index := GetElementIndex ( minersList , unit ) ;
29633: LD_ADDR_VAR 0 5
29637: PUSH
29638: LD_EXP 115
29642: PPUSH
29643: LD_VAR 0 1
29647: PPUSH
29648: CALL 36006 0 2
29652: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29653: LD_EXP 116
29657: PUSH
29658: LD_VAR 0 5
29662: ARRAY
29663: PUSH
29664: LD_EXP 117
29668: GREATEREQUAL
29669: IFFALSE 29673
// exit ;
29671: GO 29873
// ComMoveXY ( unit , x , y ) ;
29673: LD_VAR 0 1
29677: PPUSH
29678: LD_VAR 0 2
29682: PPUSH
29683: LD_VAR 0 3
29687: PPUSH
29688: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29692: LD_INT 35
29694: PPUSH
29695: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29699: LD_VAR 0 1
29703: PPUSH
29704: LD_VAR 0 2
29708: PPUSH
29709: LD_VAR 0 3
29713: PPUSH
29714: CALL 67361 0 3
29718: NOT
29719: PUSH
29720: LD_VAR 0 1
29724: PPUSH
29725: CALL_OW 314
29729: AND
29730: IFFALSE 29734
// exit ;
29732: GO 29873
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
29734: LD_VAR 0 2
29738: PPUSH
29739: LD_VAR 0 3
29743: PPUSH
29744: CALL_OW 428
29748: PUSH
29749: LD_VAR 0 1
29753: EQUAL
29754: PUSH
29755: LD_VAR 0 1
29759: PPUSH
29760: CALL_OW 314
29764: NOT
29765: AND
29766: IFFALSE 29692
// PlaySoundXY ( x , y , PlantMine ) ;
29768: LD_VAR 0 2
29772: PPUSH
29773: LD_VAR 0 3
29777: PPUSH
29778: LD_STRING PlantMine
29780: PPUSH
29781: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
29785: LD_VAR 0 2
29789: PPUSH
29790: LD_VAR 0 3
29794: PPUSH
29795: LD_VAR 0 1
29799: PPUSH
29800: CALL_OW 255
29804: PPUSH
29805: LD_INT 0
29807: PPUSH
29808: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
29812: LD_ADDR_EXP 116
29816: PUSH
29817: LD_EXP 116
29821: PPUSH
29822: LD_VAR 0 5
29826: PUSH
29827: LD_EXP 116
29831: PUSH
29832: LD_VAR 0 5
29836: ARRAY
29837: PUSH
29838: LD_INT 1
29840: PLUS
29841: PUSH
29842: EMPTY
29843: LIST
29844: LIST
29845: PPUSH
29846: LD_VAR 0 2
29850: PUSH
29851: LD_VAR 0 3
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PPUSH
29860: CALL 36221 0 3
29864: ST_TO_ADDR
// result := true ;
29865: LD_ADDR_VAR 0 4
29869: PUSH
29870: LD_INT 1
29872: ST_TO_ADDR
// end ;
29873: LD_VAR 0 4
29877: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
29878: LD_INT 0
29880: PPUSH
29881: PPUSH
29882: PPUSH
// if not unit in minersList then
29883: LD_VAR 0 1
29887: PUSH
29888: LD_EXP 115
29892: IN
29893: NOT
29894: IFFALSE 29898
// exit ;
29896: GO 30290
// index := GetElementIndex ( minersList , unit ) ;
29898: LD_ADDR_VAR 0 6
29902: PUSH
29903: LD_EXP 115
29907: PPUSH
29908: LD_VAR 0 1
29912: PPUSH
29913: CALL 36006 0 2
29917: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
29918: LD_ADDR_VAR 0 5
29922: PUSH
29923: DOUBLE
29924: LD_EXP 116
29928: PUSH
29929: LD_VAR 0 6
29933: ARRAY
29934: INC
29935: ST_TO_ADDR
29936: LD_INT 1
29938: PUSH
29939: FOR_DOWNTO
29940: IFFALSE 30101
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
29942: LD_EXP 116
29946: PUSH
29947: LD_VAR 0 6
29951: ARRAY
29952: PUSH
29953: LD_VAR 0 5
29957: ARRAY
29958: PUSH
29959: LD_INT 1
29961: ARRAY
29962: PUSH
29963: LD_VAR 0 2
29967: EQUAL
29968: PUSH
29969: LD_EXP 116
29973: PUSH
29974: LD_VAR 0 6
29978: ARRAY
29979: PUSH
29980: LD_VAR 0 5
29984: ARRAY
29985: PUSH
29986: LD_INT 2
29988: ARRAY
29989: PUSH
29990: LD_VAR 0 3
29994: EQUAL
29995: AND
29996: IFFALSE 30099
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29998: LD_EXP 116
30002: PUSH
30003: LD_VAR 0 6
30007: ARRAY
30008: PUSH
30009: LD_VAR 0 5
30013: ARRAY
30014: PUSH
30015: LD_INT 1
30017: ARRAY
30018: PPUSH
30019: LD_EXP 116
30023: PUSH
30024: LD_VAR 0 6
30028: ARRAY
30029: PUSH
30030: LD_VAR 0 5
30034: ARRAY
30035: PUSH
30036: LD_INT 2
30038: ARRAY
30039: PPUSH
30040: LD_VAR 0 1
30044: PPUSH
30045: CALL_OW 255
30049: PPUSH
30050: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30054: LD_ADDR_EXP 116
30058: PUSH
30059: LD_EXP 116
30063: PPUSH
30064: LD_VAR 0 6
30068: PPUSH
30069: LD_EXP 116
30073: PUSH
30074: LD_VAR 0 6
30078: ARRAY
30079: PPUSH
30080: LD_VAR 0 5
30084: PPUSH
30085: CALL_OW 3
30089: PPUSH
30090: CALL_OW 1
30094: ST_TO_ADDR
// exit ;
30095: POP
30096: POP
30097: GO 30290
// end ; end ;
30099: GO 29939
30101: POP
30102: POP
// for i := minerMinesList [ index ] downto 1 do
30103: LD_ADDR_VAR 0 5
30107: PUSH
30108: DOUBLE
30109: LD_EXP 116
30113: PUSH
30114: LD_VAR 0 6
30118: ARRAY
30119: INC
30120: ST_TO_ADDR
30121: LD_INT 1
30123: PUSH
30124: FOR_DOWNTO
30125: IFFALSE 30288
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
30127: LD_EXP 116
30131: PUSH
30132: LD_VAR 0 6
30136: ARRAY
30137: PUSH
30138: LD_VAR 0 5
30142: ARRAY
30143: PUSH
30144: LD_INT 1
30146: ARRAY
30147: PPUSH
30148: LD_EXP 116
30152: PUSH
30153: LD_VAR 0 6
30157: ARRAY
30158: PUSH
30159: LD_VAR 0 5
30163: ARRAY
30164: PUSH
30165: LD_INT 2
30167: ARRAY
30168: PPUSH
30169: LD_VAR 0 2
30173: PPUSH
30174: LD_VAR 0 3
30178: PPUSH
30179: CALL_OW 298
30183: PUSH
30184: LD_INT 6
30186: LESS
30187: IFFALSE 30286
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30189: LD_EXP 116
30193: PUSH
30194: LD_VAR 0 6
30198: ARRAY
30199: PUSH
30200: LD_VAR 0 5
30204: ARRAY
30205: PUSH
30206: LD_INT 1
30208: ARRAY
30209: PPUSH
30210: LD_EXP 116
30214: PUSH
30215: LD_VAR 0 6
30219: ARRAY
30220: PUSH
30221: LD_VAR 0 5
30225: ARRAY
30226: PUSH
30227: LD_INT 2
30229: ARRAY
30230: PPUSH
30231: LD_VAR 0 1
30235: PPUSH
30236: CALL_OW 255
30240: PPUSH
30241: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30245: LD_ADDR_EXP 116
30249: PUSH
30250: LD_EXP 116
30254: PPUSH
30255: LD_VAR 0 6
30259: PPUSH
30260: LD_EXP 116
30264: PUSH
30265: LD_VAR 0 6
30269: ARRAY
30270: PPUSH
30271: LD_VAR 0 5
30275: PPUSH
30276: CALL_OW 3
30280: PPUSH
30281: CALL_OW 1
30285: ST_TO_ADDR
// end ; end ;
30286: GO 30124
30288: POP
30289: POP
// end ;
30290: LD_VAR 0 4
30294: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30295: LD_INT 0
30297: PPUSH
30298: PPUSH
30299: PPUSH
30300: PPUSH
30301: PPUSH
30302: PPUSH
30303: PPUSH
30304: PPUSH
30305: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30306: LD_VAR 0 1
30310: PPUSH
30311: CALL_OW 264
30315: PUSH
30316: LD_INT 81
30318: EQUAL
30319: NOT
30320: PUSH
30321: LD_VAR 0 1
30325: PUSH
30326: LD_EXP 115
30330: IN
30331: NOT
30332: OR
30333: IFFALSE 30337
// exit ;
30335: GO 30659
// index := GetElementIndex ( minersList , unit ) ;
30337: LD_ADDR_VAR 0 6
30341: PUSH
30342: LD_EXP 115
30346: PPUSH
30347: LD_VAR 0 1
30351: PPUSH
30352: CALL 36006 0 2
30356: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30357: LD_ADDR_VAR 0 8
30361: PUSH
30362: LD_EXP 117
30366: PUSH
30367: LD_EXP 116
30371: PUSH
30372: LD_VAR 0 6
30376: ARRAY
30377: MINUS
30378: ST_TO_ADDR
// if not minesFreeAmount then
30379: LD_VAR 0 8
30383: NOT
30384: IFFALSE 30388
// exit ;
30386: GO 30659
// tmp := [ ] ;
30388: LD_ADDR_VAR 0 7
30392: PUSH
30393: EMPTY
30394: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
30395: LD_ADDR_VAR 0 5
30399: PUSH
30400: DOUBLE
30401: LD_INT 1
30403: DEC
30404: ST_TO_ADDR
30405: LD_VAR 0 8
30409: PUSH
30410: FOR_TO
30411: IFFALSE 30606
// begin _d := rand ( 0 , 5 ) ;
30413: LD_ADDR_VAR 0 11
30417: PUSH
30418: LD_INT 0
30420: PPUSH
30421: LD_INT 5
30423: PPUSH
30424: CALL_OW 12
30428: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
30429: LD_ADDR_VAR 0 12
30433: PUSH
30434: LD_INT 2
30436: PPUSH
30437: LD_INT 6
30439: PPUSH
30440: CALL_OW 12
30444: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
30445: LD_ADDR_VAR 0 9
30449: PUSH
30450: LD_VAR 0 2
30454: PPUSH
30455: LD_VAR 0 11
30459: PPUSH
30460: LD_VAR 0 12
30464: PPUSH
30465: CALL_OW 272
30469: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
30470: LD_ADDR_VAR 0 10
30474: PUSH
30475: LD_VAR 0 3
30479: PPUSH
30480: LD_VAR 0 11
30484: PPUSH
30485: LD_VAR 0 12
30489: PPUSH
30490: CALL_OW 273
30494: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
30495: LD_VAR 0 9
30499: PPUSH
30500: LD_VAR 0 10
30504: PPUSH
30505: CALL_OW 488
30509: PUSH
30510: LD_VAR 0 9
30514: PUSH
30515: LD_VAR 0 10
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PUSH
30524: LD_VAR 0 7
30528: IN
30529: NOT
30530: AND
30531: PUSH
30532: LD_VAR 0 9
30536: PPUSH
30537: LD_VAR 0 10
30541: PPUSH
30542: CALL_OW 458
30546: NOT
30547: AND
30548: IFFALSE 30590
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
30550: LD_ADDR_VAR 0 7
30554: PUSH
30555: LD_VAR 0 7
30559: PPUSH
30560: LD_VAR 0 7
30564: PUSH
30565: LD_INT 1
30567: PLUS
30568: PPUSH
30569: LD_VAR 0 9
30573: PUSH
30574: LD_VAR 0 10
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: PPUSH
30583: CALL_OW 1
30587: ST_TO_ADDR
30588: GO 30604
// i := i - 1 ;
30590: LD_ADDR_VAR 0 5
30594: PUSH
30595: LD_VAR 0 5
30599: PUSH
30600: LD_INT 1
30602: MINUS
30603: ST_TO_ADDR
// end ;
30604: GO 30410
30606: POP
30607: POP
// for i in tmp do
30608: LD_ADDR_VAR 0 5
30612: PUSH
30613: LD_VAR 0 7
30617: PUSH
30618: FOR_IN
30619: IFFALSE 30657
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
30621: LD_VAR 0 1
30625: PPUSH
30626: LD_VAR 0 5
30630: PUSH
30631: LD_INT 1
30633: ARRAY
30634: PPUSH
30635: LD_VAR 0 5
30639: PUSH
30640: LD_INT 2
30642: ARRAY
30643: PPUSH
30644: CALL 29603 0 3
30648: NOT
30649: IFFALSE 30655
// exit ;
30651: POP
30652: POP
30653: GO 30659
30655: GO 30618
30657: POP
30658: POP
// end ;
30659: LD_VAR 0 4
30663: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
30664: LD_INT 0
30666: PPUSH
30667: PPUSH
30668: PPUSH
30669: PPUSH
30670: PPUSH
30671: PPUSH
30672: PPUSH
// if not GetClass ( unit ) = class_sniper then
30673: LD_VAR 0 1
30677: PPUSH
30678: CALL_OW 257
30682: PUSH
30683: LD_INT 5
30685: EQUAL
30686: NOT
30687: IFFALSE 30691
// exit ;
30689: GO 31079
// dist := 8 ;
30691: LD_ADDR_VAR 0 5
30695: PUSH
30696: LD_INT 8
30698: ST_TO_ADDR
// viewRange := 12 ;
30699: LD_ADDR_VAR 0 7
30703: PUSH
30704: LD_INT 12
30706: ST_TO_ADDR
// side := GetSide ( unit ) ;
30707: LD_ADDR_VAR 0 6
30711: PUSH
30712: LD_VAR 0 1
30716: PPUSH
30717: CALL_OW 255
30721: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30722: LD_INT 61
30724: PPUSH
30725: LD_VAR 0 6
30729: PPUSH
30730: CALL_OW 321
30734: PUSH
30735: LD_INT 2
30737: EQUAL
30738: IFFALSE 30748
// viewRange := 16 ;
30740: LD_ADDR_VAR 0 7
30744: PUSH
30745: LD_INT 16
30747: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
30748: LD_VAR 0 1
30752: PPUSH
30753: LD_VAR 0 2
30757: PPUSH
30758: LD_VAR 0 3
30762: PPUSH
30763: CALL_OW 297
30767: PUSH
30768: LD_VAR 0 5
30772: GREATER
30773: IFFALSE 30852
// begin ComMoveXY ( unit , x , y ) ;
30775: LD_VAR 0 1
30779: PPUSH
30780: LD_VAR 0 2
30784: PPUSH
30785: LD_VAR 0 3
30789: PPUSH
30790: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30794: LD_INT 35
30796: PPUSH
30797: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
30801: LD_VAR 0 1
30805: PPUSH
30806: LD_VAR 0 2
30810: PPUSH
30811: LD_VAR 0 3
30815: PPUSH
30816: CALL 67361 0 3
30820: NOT
30821: IFFALSE 30825
// exit ;
30823: GO 31079
// until GetDistUnitXY ( unit , x , y ) < dist ;
30825: LD_VAR 0 1
30829: PPUSH
30830: LD_VAR 0 2
30834: PPUSH
30835: LD_VAR 0 3
30839: PPUSH
30840: CALL_OW 297
30844: PUSH
30845: LD_VAR 0 5
30849: LESS
30850: IFFALSE 30794
// end ; ComTurnXY ( unit , x , y ) ;
30852: LD_VAR 0 1
30856: PPUSH
30857: LD_VAR 0 2
30861: PPUSH
30862: LD_VAR 0 3
30866: PPUSH
30867: CALL_OW 118
// wait ( 5 ) ;
30871: LD_INT 5
30873: PPUSH
30874: CALL_OW 67
// _d := GetDir ( unit ) ;
30878: LD_ADDR_VAR 0 10
30882: PUSH
30883: LD_VAR 0 1
30887: PPUSH
30888: CALL_OW 254
30892: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
30893: LD_ADDR_VAR 0 8
30897: PUSH
30898: LD_VAR 0 1
30902: PPUSH
30903: CALL_OW 250
30907: PPUSH
30908: LD_VAR 0 10
30912: PPUSH
30913: LD_VAR 0 5
30917: PPUSH
30918: CALL_OW 272
30922: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
30923: LD_ADDR_VAR 0 9
30927: PUSH
30928: LD_VAR 0 1
30932: PPUSH
30933: CALL_OW 251
30937: PPUSH
30938: LD_VAR 0 10
30942: PPUSH
30943: LD_VAR 0 5
30947: PPUSH
30948: CALL_OW 273
30952: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30953: LD_VAR 0 8
30957: PPUSH
30958: LD_VAR 0 9
30962: PPUSH
30963: CALL_OW 488
30967: NOT
30968: IFFALSE 30972
// exit ;
30970: GO 31079
// ComAnimCustom ( unit , 1 ) ;
30972: LD_VAR 0 1
30976: PPUSH
30977: LD_INT 1
30979: PPUSH
30980: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
30984: LD_VAR 0 8
30988: PPUSH
30989: LD_VAR 0 9
30993: PPUSH
30994: LD_VAR 0 6
30998: PPUSH
30999: LD_VAR 0 7
31003: PPUSH
31004: CALL_OW 330
// repeat wait ( 1 ) ;
31008: LD_INT 1
31010: PPUSH
31011: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
31015: LD_VAR 0 1
31019: PPUSH
31020: CALL_OW 316
31024: PUSH
31025: LD_VAR 0 1
31029: PPUSH
31030: CALL_OW 314
31034: OR
31035: PUSH
31036: LD_VAR 0 1
31040: PPUSH
31041: CALL_OW 302
31045: NOT
31046: OR
31047: PUSH
31048: LD_VAR 0 1
31052: PPUSH
31053: CALL_OW 301
31057: OR
31058: IFFALSE 31008
// RemoveSeeing ( _x , _y , side ) ;
31060: LD_VAR 0 8
31064: PPUSH
31065: LD_VAR 0 9
31069: PPUSH
31070: LD_VAR 0 6
31074: PPUSH
31075: CALL_OW 331
// end ; end_of_file
31079: LD_VAR 0 4
31083: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31084: LD_INT 0
31086: PPUSH
31087: PPUSH
// if exist_mode then
31088: LD_VAR 0 2
31092: IFFALSE 31117
// unit := CreateCharacter ( prefix & ident ) else
31094: LD_ADDR_VAR 0 5
31098: PUSH
31099: LD_VAR 0 3
31103: PUSH
31104: LD_VAR 0 1
31108: STR
31109: PPUSH
31110: CALL_OW 34
31114: ST_TO_ADDR
31115: GO 31132
// unit := NewCharacter ( ident ) ;
31117: LD_ADDR_VAR 0 5
31121: PUSH
31122: LD_VAR 0 1
31126: PPUSH
31127: CALL_OW 25
31131: ST_TO_ADDR
// result := unit ;
31132: LD_ADDR_VAR 0 4
31136: PUSH
31137: LD_VAR 0 5
31141: ST_TO_ADDR
// end ;
31142: LD_VAR 0 4
31146: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31147: LD_INT 0
31149: PPUSH
31150: PPUSH
// if not side or not nation then
31151: LD_VAR 0 1
31155: NOT
31156: PUSH
31157: LD_VAR 0 2
31161: NOT
31162: OR
31163: IFFALSE 31167
// exit ;
31165: GO 31935
// case nation of nation_american :
31167: LD_VAR 0 2
31171: PUSH
31172: LD_INT 1
31174: DOUBLE
31175: EQUAL
31176: IFTRUE 31180
31178: GO 31394
31180: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31181: LD_ADDR_VAR 0 4
31185: PUSH
31186: LD_INT 35
31188: PUSH
31189: LD_INT 45
31191: PUSH
31192: LD_INT 46
31194: PUSH
31195: LD_INT 47
31197: PUSH
31198: LD_INT 82
31200: PUSH
31201: LD_INT 83
31203: PUSH
31204: LD_INT 84
31206: PUSH
31207: LD_INT 85
31209: PUSH
31210: LD_INT 86
31212: PUSH
31213: LD_INT 1
31215: PUSH
31216: LD_INT 2
31218: PUSH
31219: LD_INT 6
31221: PUSH
31222: LD_INT 15
31224: PUSH
31225: LD_INT 16
31227: PUSH
31228: LD_INT 7
31230: PUSH
31231: LD_INT 12
31233: PUSH
31234: LD_INT 13
31236: PUSH
31237: LD_INT 10
31239: PUSH
31240: LD_INT 14
31242: PUSH
31243: LD_INT 20
31245: PUSH
31246: LD_INT 21
31248: PUSH
31249: LD_INT 22
31251: PUSH
31252: LD_INT 25
31254: PUSH
31255: LD_INT 32
31257: PUSH
31258: LD_INT 27
31260: PUSH
31261: LD_INT 36
31263: PUSH
31264: LD_INT 69
31266: PUSH
31267: LD_INT 39
31269: PUSH
31270: LD_INT 34
31272: PUSH
31273: LD_INT 40
31275: PUSH
31276: LD_INT 48
31278: PUSH
31279: LD_INT 49
31281: PUSH
31282: LD_INT 50
31284: PUSH
31285: LD_INT 51
31287: PUSH
31288: LD_INT 52
31290: PUSH
31291: LD_INT 53
31293: PUSH
31294: LD_INT 54
31296: PUSH
31297: LD_INT 55
31299: PUSH
31300: LD_INT 56
31302: PUSH
31303: LD_INT 57
31305: PUSH
31306: LD_INT 58
31308: PUSH
31309: LD_INT 59
31311: PUSH
31312: LD_INT 60
31314: PUSH
31315: LD_INT 61
31317: PUSH
31318: LD_INT 62
31320: PUSH
31321: LD_INT 80
31323: PUSH
31324: LD_INT 82
31326: PUSH
31327: LD_INT 83
31329: PUSH
31330: LD_INT 84
31332: PUSH
31333: LD_INT 85
31335: PUSH
31336: LD_INT 86
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: LIST
31343: LIST
31344: LIST
31345: LIST
31346: LIST
31347: LIST
31348: LIST
31349: LIST
31350: LIST
31351: LIST
31352: LIST
31353: LIST
31354: LIST
31355: LIST
31356: LIST
31357: LIST
31358: LIST
31359: LIST
31360: LIST
31361: LIST
31362: LIST
31363: LIST
31364: LIST
31365: LIST
31366: LIST
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: LIST
31379: LIST
31380: LIST
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: LIST
31386: LIST
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: ST_TO_ADDR
31392: GO 31859
31394: LD_INT 2
31396: DOUBLE
31397: EQUAL
31398: IFTRUE 31402
31400: GO 31628
31402: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
31403: LD_ADDR_VAR 0 4
31407: PUSH
31408: LD_INT 35
31410: PUSH
31411: LD_INT 45
31413: PUSH
31414: LD_INT 46
31416: PUSH
31417: LD_INT 47
31419: PUSH
31420: LD_INT 82
31422: PUSH
31423: LD_INT 83
31425: PUSH
31426: LD_INT 84
31428: PUSH
31429: LD_INT 85
31431: PUSH
31432: LD_INT 87
31434: PUSH
31435: LD_INT 70
31437: PUSH
31438: LD_INT 1
31440: PUSH
31441: LD_INT 11
31443: PUSH
31444: LD_INT 3
31446: PUSH
31447: LD_INT 4
31449: PUSH
31450: LD_INT 5
31452: PUSH
31453: LD_INT 6
31455: PUSH
31456: LD_INT 15
31458: PUSH
31459: LD_INT 18
31461: PUSH
31462: LD_INT 7
31464: PUSH
31465: LD_INT 17
31467: PUSH
31468: LD_INT 8
31470: PUSH
31471: LD_INT 20
31473: PUSH
31474: LD_INT 21
31476: PUSH
31477: LD_INT 22
31479: PUSH
31480: LD_INT 72
31482: PUSH
31483: LD_INT 26
31485: PUSH
31486: LD_INT 69
31488: PUSH
31489: LD_INT 39
31491: PUSH
31492: LD_INT 40
31494: PUSH
31495: LD_INT 41
31497: PUSH
31498: LD_INT 42
31500: PUSH
31501: LD_INT 43
31503: PUSH
31504: LD_INT 48
31506: PUSH
31507: LD_INT 49
31509: PUSH
31510: LD_INT 50
31512: PUSH
31513: LD_INT 51
31515: PUSH
31516: LD_INT 52
31518: PUSH
31519: LD_INT 53
31521: PUSH
31522: LD_INT 54
31524: PUSH
31525: LD_INT 55
31527: PUSH
31528: LD_INT 56
31530: PUSH
31531: LD_INT 60
31533: PUSH
31534: LD_INT 61
31536: PUSH
31537: LD_INT 62
31539: PUSH
31540: LD_INT 66
31542: PUSH
31543: LD_INT 67
31545: PUSH
31546: LD_INT 68
31548: PUSH
31549: LD_INT 81
31551: PUSH
31552: LD_INT 82
31554: PUSH
31555: LD_INT 83
31557: PUSH
31558: LD_INT 84
31560: PUSH
31561: LD_INT 85
31563: PUSH
31564: LD_INT 87
31566: PUSH
31567: LD_INT 88
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: ST_TO_ADDR
31626: GO 31859
31628: LD_INT 3
31630: DOUBLE
31631: EQUAL
31632: IFTRUE 31636
31634: GO 31858
31636: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31637: LD_ADDR_VAR 0 4
31641: PUSH
31642: LD_INT 46
31644: PUSH
31645: LD_INT 47
31647: PUSH
31648: LD_INT 1
31650: PUSH
31651: LD_INT 2
31653: PUSH
31654: LD_INT 82
31656: PUSH
31657: LD_INT 83
31659: PUSH
31660: LD_INT 84
31662: PUSH
31663: LD_INT 85
31665: PUSH
31666: LD_INT 86
31668: PUSH
31669: LD_INT 11
31671: PUSH
31672: LD_INT 9
31674: PUSH
31675: LD_INT 20
31677: PUSH
31678: LD_INT 19
31680: PUSH
31681: LD_INT 21
31683: PUSH
31684: LD_INT 24
31686: PUSH
31687: LD_INT 22
31689: PUSH
31690: LD_INT 25
31692: PUSH
31693: LD_INT 28
31695: PUSH
31696: LD_INT 29
31698: PUSH
31699: LD_INT 30
31701: PUSH
31702: LD_INT 31
31704: PUSH
31705: LD_INT 37
31707: PUSH
31708: LD_INT 38
31710: PUSH
31711: LD_INT 32
31713: PUSH
31714: LD_INT 27
31716: PUSH
31717: LD_INT 33
31719: PUSH
31720: LD_INT 69
31722: PUSH
31723: LD_INT 39
31725: PUSH
31726: LD_INT 34
31728: PUSH
31729: LD_INT 40
31731: PUSH
31732: LD_INT 71
31734: PUSH
31735: LD_INT 23
31737: PUSH
31738: LD_INT 44
31740: PUSH
31741: LD_INT 48
31743: PUSH
31744: LD_INT 49
31746: PUSH
31747: LD_INT 50
31749: PUSH
31750: LD_INT 51
31752: PUSH
31753: LD_INT 52
31755: PUSH
31756: LD_INT 53
31758: PUSH
31759: LD_INT 54
31761: PUSH
31762: LD_INT 55
31764: PUSH
31765: LD_INT 56
31767: PUSH
31768: LD_INT 57
31770: PUSH
31771: LD_INT 58
31773: PUSH
31774: LD_INT 59
31776: PUSH
31777: LD_INT 63
31779: PUSH
31780: LD_INT 64
31782: PUSH
31783: LD_INT 65
31785: PUSH
31786: LD_INT 82
31788: PUSH
31789: LD_INT 83
31791: PUSH
31792: LD_INT 84
31794: PUSH
31795: LD_INT 85
31797: PUSH
31798: LD_INT 86
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: ST_TO_ADDR
31856: GO 31859
31858: POP
// if state > - 1 and state < 3 then
31859: LD_VAR 0 3
31863: PUSH
31864: LD_INT 1
31866: NEG
31867: GREATER
31868: PUSH
31869: LD_VAR 0 3
31873: PUSH
31874: LD_INT 3
31876: LESS
31877: AND
31878: IFFALSE 31935
// for i in result do
31880: LD_ADDR_VAR 0 5
31884: PUSH
31885: LD_VAR 0 4
31889: PUSH
31890: FOR_IN
31891: IFFALSE 31933
// if GetTech ( i , side ) <> state then
31893: LD_VAR 0 5
31897: PPUSH
31898: LD_VAR 0 1
31902: PPUSH
31903: CALL_OW 321
31907: PUSH
31908: LD_VAR 0 3
31912: NONEQUAL
31913: IFFALSE 31931
// result := result diff i ;
31915: LD_ADDR_VAR 0 4
31919: PUSH
31920: LD_VAR 0 4
31924: PUSH
31925: LD_VAR 0 5
31929: DIFF
31930: ST_TO_ADDR
31931: GO 31890
31933: POP
31934: POP
// end ;
31935: LD_VAR 0 4
31939: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31940: LD_INT 0
31942: PPUSH
31943: PPUSH
31944: PPUSH
// result := true ;
31945: LD_ADDR_VAR 0 3
31949: PUSH
31950: LD_INT 1
31952: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31953: LD_ADDR_VAR 0 5
31957: PUSH
31958: LD_VAR 0 2
31962: PPUSH
31963: CALL_OW 480
31967: ST_TO_ADDR
// if not tmp then
31968: LD_VAR 0 5
31972: NOT
31973: IFFALSE 31977
// exit ;
31975: GO 32026
// for i in tmp do
31977: LD_ADDR_VAR 0 4
31981: PUSH
31982: LD_VAR 0 5
31986: PUSH
31987: FOR_IN
31988: IFFALSE 32024
// if GetTech ( i , side ) <> state_researched then
31990: LD_VAR 0 4
31994: PPUSH
31995: LD_VAR 0 1
31999: PPUSH
32000: CALL_OW 321
32004: PUSH
32005: LD_INT 2
32007: NONEQUAL
32008: IFFALSE 32022
// begin result := false ;
32010: LD_ADDR_VAR 0 3
32014: PUSH
32015: LD_INT 0
32017: ST_TO_ADDR
// exit ;
32018: POP
32019: POP
32020: GO 32026
// end ;
32022: GO 31987
32024: POP
32025: POP
// end ;
32026: LD_VAR 0 3
32030: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32031: LD_INT 0
32033: PPUSH
32034: PPUSH
32035: PPUSH
32036: PPUSH
32037: PPUSH
32038: PPUSH
32039: PPUSH
32040: PPUSH
32041: PPUSH
32042: PPUSH
32043: PPUSH
32044: PPUSH
32045: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32046: LD_VAR 0 1
32050: NOT
32051: PUSH
32052: LD_VAR 0 1
32056: PPUSH
32057: CALL_OW 257
32061: PUSH
32062: LD_INT 9
32064: NONEQUAL
32065: OR
32066: IFFALSE 32070
// exit ;
32068: GO 32643
// side := GetSide ( unit ) ;
32070: LD_ADDR_VAR 0 9
32074: PUSH
32075: LD_VAR 0 1
32079: PPUSH
32080: CALL_OW 255
32084: ST_TO_ADDR
// tech_space := tech_spacanom ;
32085: LD_ADDR_VAR 0 12
32089: PUSH
32090: LD_INT 29
32092: ST_TO_ADDR
// tech_time := tech_taurad ;
32093: LD_ADDR_VAR 0 13
32097: PUSH
32098: LD_INT 28
32100: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32101: LD_ADDR_VAR 0 11
32105: PUSH
32106: LD_VAR 0 1
32110: PPUSH
32111: CALL_OW 310
32115: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32116: LD_VAR 0 11
32120: PPUSH
32121: CALL_OW 247
32125: PUSH
32126: LD_INT 2
32128: EQUAL
32129: IFFALSE 32133
// exit ;
32131: GO 32643
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32133: LD_ADDR_VAR 0 8
32137: PUSH
32138: LD_INT 81
32140: PUSH
32141: LD_VAR 0 9
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: PUSH
32150: LD_INT 3
32152: PUSH
32153: LD_INT 21
32155: PUSH
32156: LD_INT 3
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: EMPTY
32164: LIST
32165: LIST
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: PPUSH
32171: CALL_OW 69
32175: ST_TO_ADDR
// if not tmp then
32176: LD_VAR 0 8
32180: NOT
32181: IFFALSE 32185
// exit ;
32183: GO 32643
// if in_unit then
32185: LD_VAR 0 11
32189: IFFALSE 32213
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32191: LD_ADDR_VAR 0 10
32195: PUSH
32196: LD_VAR 0 8
32200: PPUSH
32201: LD_VAR 0 11
32205: PPUSH
32206: CALL_OW 74
32210: ST_TO_ADDR
32211: GO 32233
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32213: LD_ADDR_VAR 0 10
32217: PUSH
32218: LD_VAR 0 8
32222: PPUSH
32223: LD_VAR 0 1
32227: PPUSH
32228: CALL_OW 74
32232: ST_TO_ADDR
// if not enemy then
32233: LD_VAR 0 10
32237: NOT
32238: IFFALSE 32242
// exit ;
32240: GO 32643
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32242: LD_VAR 0 11
32246: PUSH
32247: LD_VAR 0 11
32251: PPUSH
32252: LD_VAR 0 10
32256: PPUSH
32257: CALL_OW 296
32261: PUSH
32262: LD_INT 13
32264: GREATER
32265: AND
32266: PUSH
32267: LD_VAR 0 1
32271: PPUSH
32272: LD_VAR 0 10
32276: PPUSH
32277: CALL_OW 296
32281: PUSH
32282: LD_INT 12
32284: GREATER
32285: OR
32286: IFFALSE 32290
// exit ;
32288: GO 32643
// missile := [ 1 ] ;
32290: LD_ADDR_VAR 0 14
32294: PUSH
32295: LD_INT 1
32297: PUSH
32298: EMPTY
32299: LIST
32300: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32301: LD_VAR 0 9
32305: PPUSH
32306: LD_VAR 0 12
32310: PPUSH
32311: CALL_OW 325
32315: IFFALSE 32344
// missile := Replace ( missile , missile + 1 , 2 ) ;
32317: LD_ADDR_VAR 0 14
32321: PUSH
32322: LD_VAR 0 14
32326: PPUSH
32327: LD_VAR 0 14
32331: PUSH
32332: LD_INT 1
32334: PLUS
32335: PPUSH
32336: LD_INT 2
32338: PPUSH
32339: CALL_OW 1
32343: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32344: LD_VAR 0 9
32348: PPUSH
32349: LD_VAR 0 13
32353: PPUSH
32354: CALL_OW 325
32358: PUSH
32359: LD_VAR 0 10
32363: PPUSH
32364: CALL_OW 255
32368: PPUSH
32369: LD_VAR 0 13
32373: PPUSH
32374: CALL_OW 325
32378: NOT
32379: AND
32380: IFFALSE 32409
// missile := Replace ( missile , missile + 1 , 3 ) ;
32382: LD_ADDR_VAR 0 14
32386: PUSH
32387: LD_VAR 0 14
32391: PPUSH
32392: LD_VAR 0 14
32396: PUSH
32397: LD_INT 1
32399: PLUS
32400: PPUSH
32401: LD_INT 3
32403: PPUSH
32404: CALL_OW 1
32408: ST_TO_ADDR
// if missile < 2 then
32409: LD_VAR 0 14
32413: PUSH
32414: LD_INT 2
32416: LESS
32417: IFFALSE 32421
// exit ;
32419: GO 32643
// x := GetX ( enemy ) ;
32421: LD_ADDR_VAR 0 4
32425: PUSH
32426: LD_VAR 0 10
32430: PPUSH
32431: CALL_OW 250
32435: ST_TO_ADDR
// y := GetY ( enemy ) ;
32436: LD_ADDR_VAR 0 5
32440: PUSH
32441: LD_VAR 0 10
32445: PPUSH
32446: CALL_OW 251
32450: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32451: LD_ADDR_VAR 0 6
32455: PUSH
32456: LD_VAR 0 4
32460: PUSH
32461: LD_INT 1
32463: NEG
32464: PPUSH
32465: LD_INT 1
32467: PPUSH
32468: CALL_OW 12
32472: PLUS
32473: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32474: LD_ADDR_VAR 0 7
32478: PUSH
32479: LD_VAR 0 5
32483: PUSH
32484: LD_INT 1
32486: NEG
32487: PPUSH
32488: LD_INT 1
32490: PPUSH
32491: CALL_OW 12
32495: PLUS
32496: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32497: LD_VAR 0 6
32501: PPUSH
32502: LD_VAR 0 7
32506: PPUSH
32507: CALL_OW 488
32511: NOT
32512: IFFALSE 32534
// begin _x := x ;
32514: LD_ADDR_VAR 0 6
32518: PUSH
32519: LD_VAR 0 4
32523: ST_TO_ADDR
// _y := y ;
32524: LD_ADDR_VAR 0 7
32528: PUSH
32529: LD_VAR 0 5
32533: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32534: LD_ADDR_VAR 0 3
32538: PUSH
32539: LD_INT 1
32541: PPUSH
32542: LD_VAR 0 14
32546: PPUSH
32547: CALL_OW 12
32551: ST_TO_ADDR
// case i of 1 :
32552: LD_VAR 0 3
32556: PUSH
32557: LD_INT 1
32559: DOUBLE
32560: EQUAL
32561: IFTRUE 32565
32563: GO 32582
32565: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32566: LD_VAR 0 1
32570: PPUSH
32571: LD_VAR 0 10
32575: PPUSH
32576: CALL_OW 115
32580: GO 32643
32582: LD_INT 2
32584: DOUBLE
32585: EQUAL
32586: IFTRUE 32590
32588: GO 32612
32590: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32591: LD_VAR 0 1
32595: PPUSH
32596: LD_VAR 0 6
32600: PPUSH
32601: LD_VAR 0 7
32605: PPUSH
32606: CALL_OW 153
32610: GO 32643
32612: LD_INT 3
32614: DOUBLE
32615: EQUAL
32616: IFTRUE 32620
32618: GO 32642
32620: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32621: LD_VAR 0 1
32625: PPUSH
32626: LD_VAR 0 6
32630: PPUSH
32631: LD_VAR 0 7
32635: PPUSH
32636: CALL_OW 154
32640: GO 32643
32642: POP
// end ;
32643: LD_VAR 0 2
32647: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32648: LD_INT 0
32650: PPUSH
32651: PPUSH
32652: PPUSH
32653: PPUSH
32654: PPUSH
32655: PPUSH
// if not unit or not building then
32656: LD_VAR 0 1
32660: NOT
32661: PUSH
32662: LD_VAR 0 2
32666: NOT
32667: OR
32668: IFFALSE 32672
// exit ;
32670: GO 32830
// x := GetX ( building ) ;
32672: LD_ADDR_VAR 0 5
32676: PUSH
32677: LD_VAR 0 2
32681: PPUSH
32682: CALL_OW 250
32686: ST_TO_ADDR
// y := GetY ( building ) ;
32687: LD_ADDR_VAR 0 6
32691: PUSH
32692: LD_VAR 0 2
32696: PPUSH
32697: CALL_OW 251
32701: ST_TO_ADDR
// for i = 0 to 5 do
32702: LD_ADDR_VAR 0 4
32706: PUSH
32707: DOUBLE
32708: LD_INT 0
32710: DEC
32711: ST_TO_ADDR
32712: LD_INT 5
32714: PUSH
32715: FOR_TO
32716: IFFALSE 32828
// begin _x := ShiftX ( x , i , 3 ) ;
32718: LD_ADDR_VAR 0 7
32722: PUSH
32723: LD_VAR 0 5
32727: PPUSH
32728: LD_VAR 0 4
32732: PPUSH
32733: LD_INT 3
32735: PPUSH
32736: CALL_OW 272
32740: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32741: LD_ADDR_VAR 0 8
32745: PUSH
32746: LD_VAR 0 6
32750: PPUSH
32751: LD_VAR 0 4
32755: PPUSH
32756: LD_INT 3
32758: PPUSH
32759: CALL_OW 273
32763: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32764: LD_VAR 0 7
32768: PPUSH
32769: LD_VAR 0 8
32773: PPUSH
32774: CALL_OW 488
32778: NOT
32779: IFFALSE 32783
// continue ;
32781: GO 32715
// if HexInfo ( _x , _y ) = 0 then
32783: LD_VAR 0 7
32787: PPUSH
32788: LD_VAR 0 8
32792: PPUSH
32793: CALL_OW 428
32797: PUSH
32798: LD_INT 0
32800: EQUAL
32801: IFFALSE 32826
// begin ComMoveXY ( unit , _x , _y ) ;
32803: LD_VAR 0 1
32807: PPUSH
32808: LD_VAR 0 7
32812: PPUSH
32813: LD_VAR 0 8
32817: PPUSH
32818: CALL_OW 111
// exit ;
32822: POP
32823: POP
32824: GO 32830
// end ; end ;
32826: GO 32715
32828: POP
32829: POP
// end ;
32830: LD_VAR 0 3
32834: RET
// export function ScanBase ( side , base_area ) ; begin
32835: LD_INT 0
32837: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32838: LD_ADDR_VAR 0 3
32842: PUSH
32843: LD_VAR 0 2
32847: PPUSH
32848: LD_INT 81
32850: PUSH
32851: LD_VAR 0 1
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: PPUSH
32860: CALL_OW 70
32864: ST_TO_ADDR
// end ;
32865: LD_VAR 0 3
32869: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32870: LD_INT 0
32872: PPUSH
32873: PPUSH
32874: PPUSH
32875: PPUSH
// result := false ;
32876: LD_ADDR_VAR 0 2
32880: PUSH
32881: LD_INT 0
32883: ST_TO_ADDR
// side := GetSide ( unit ) ;
32884: LD_ADDR_VAR 0 3
32888: PUSH
32889: LD_VAR 0 1
32893: PPUSH
32894: CALL_OW 255
32898: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32899: LD_ADDR_VAR 0 4
32903: PUSH
32904: LD_VAR 0 1
32908: PPUSH
32909: CALL_OW 248
32913: ST_TO_ADDR
// case nat of 1 :
32914: LD_VAR 0 4
32918: PUSH
32919: LD_INT 1
32921: DOUBLE
32922: EQUAL
32923: IFTRUE 32927
32925: GO 32938
32927: POP
// tech := tech_lassight ; 2 :
32928: LD_ADDR_VAR 0 5
32932: PUSH
32933: LD_INT 12
32935: ST_TO_ADDR
32936: GO 32977
32938: LD_INT 2
32940: DOUBLE
32941: EQUAL
32942: IFTRUE 32946
32944: GO 32957
32946: POP
// tech := tech_mortar ; 3 :
32947: LD_ADDR_VAR 0 5
32951: PUSH
32952: LD_INT 41
32954: ST_TO_ADDR
32955: GO 32977
32957: LD_INT 3
32959: DOUBLE
32960: EQUAL
32961: IFTRUE 32965
32963: GO 32976
32965: POP
// tech := tech_bazooka ; end ;
32966: LD_ADDR_VAR 0 5
32970: PUSH
32971: LD_INT 44
32973: ST_TO_ADDR
32974: GO 32977
32976: POP
// if Researched ( side , tech ) then
32977: LD_VAR 0 3
32981: PPUSH
32982: LD_VAR 0 5
32986: PPUSH
32987: CALL_OW 325
32991: IFFALSE 33018
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32993: LD_ADDR_VAR 0 2
32997: PUSH
32998: LD_INT 5
33000: PUSH
33001: LD_INT 8
33003: PUSH
33004: LD_INT 9
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: LIST
33011: PUSH
33012: LD_VAR 0 4
33016: ARRAY
33017: ST_TO_ADDR
// end ;
33018: LD_VAR 0 2
33022: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33023: LD_INT 0
33025: PPUSH
33026: PPUSH
33027: PPUSH
// if not mines then
33028: LD_VAR 0 2
33032: NOT
33033: IFFALSE 33037
// exit ;
33035: GO 33181
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33037: LD_ADDR_VAR 0 5
33041: PUSH
33042: LD_INT 81
33044: PUSH
33045: LD_VAR 0 1
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: PUSH
33054: LD_INT 3
33056: PUSH
33057: LD_INT 21
33059: PUSH
33060: LD_INT 3
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: PUSH
33067: EMPTY
33068: LIST
33069: LIST
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PPUSH
33075: CALL_OW 69
33079: ST_TO_ADDR
// for i in mines do
33080: LD_ADDR_VAR 0 4
33084: PUSH
33085: LD_VAR 0 2
33089: PUSH
33090: FOR_IN
33091: IFFALSE 33179
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33093: LD_VAR 0 4
33097: PUSH
33098: LD_INT 1
33100: ARRAY
33101: PPUSH
33102: LD_VAR 0 4
33106: PUSH
33107: LD_INT 2
33109: ARRAY
33110: PPUSH
33111: CALL_OW 458
33115: NOT
33116: IFFALSE 33120
// continue ;
33118: GO 33090
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33120: LD_VAR 0 4
33124: PUSH
33125: LD_INT 1
33127: ARRAY
33128: PPUSH
33129: LD_VAR 0 4
33133: PUSH
33134: LD_INT 2
33136: ARRAY
33137: PPUSH
33138: CALL_OW 428
33142: PUSH
33143: LD_VAR 0 5
33147: IN
33148: IFFALSE 33177
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33150: LD_VAR 0 4
33154: PUSH
33155: LD_INT 1
33157: ARRAY
33158: PPUSH
33159: LD_VAR 0 4
33163: PUSH
33164: LD_INT 2
33166: ARRAY
33167: PPUSH
33168: LD_VAR 0 1
33172: PPUSH
33173: CALL_OW 456
// end ;
33177: GO 33090
33179: POP
33180: POP
// end ;
33181: LD_VAR 0 3
33185: RET
// export function Count ( array ) ; var i ; begin
33186: LD_INT 0
33188: PPUSH
33189: PPUSH
// result := 0 ;
33190: LD_ADDR_VAR 0 2
33194: PUSH
33195: LD_INT 0
33197: ST_TO_ADDR
// for i in array do
33198: LD_ADDR_VAR 0 3
33202: PUSH
33203: LD_VAR 0 1
33207: PUSH
33208: FOR_IN
33209: IFFALSE 33233
// if i then
33211: LD_VAR 0 3
33215: IFFALSE 33231
// result := result + 1 ;
33217: LD_ADDR_VAR 0 2
33221: PUSH
33222: LD_VAR 0 2
33226: PUSH
33227: LD_INT 1
33229: PLUS
33230: ST_TO_ADDR
33231: GO 33208
33233: POP
33234: POP
// end ;
33235: LD_VAR 0 2
33239: RET
// export function IsEmpty ( building ) ; begin
33240: LD_INT 0
33242: PPUSH
// if not building then
33243: LD_VAR 0 1
33247: NOT
33248: IFFALSE 33252
// exit ;
33250: GO 33295
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33252: LD_ADDR_VAR 0 2
33256: PUSH
33257: LD_VAR 0 1
33261: PUSH
33262: LD_INT 22
33264: PUSH
33265: LD_VAR 0 1
33269: PPUSH
33270: CALL_OW 255
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: LD_INT 58
33281: PUSH
33282: EMPTY
33283: LIST
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: PPUSH
33289: CALL_OW 69
33293: IN
33294: ST_TO_ADDR
// end ;
33295: LD_VAR 0 2
33299: RET
// export function IsNotFull ( building ) ; var places ; begin
33300: LD_INT 0
33302: PPUSH
33303: PPUSH
// if not building then
33304: LD_VAR 0 1
33308: NOT
33309: IFFALSE 33313
// exit ;
33311: GO 33484
// result := false ;
33313: LD_ADDR_VAR 0 2
33317: PUSH
33318: LD_INT 0
33320: ST_TO_ADDR
// places := 0 ;
33321: LD_ADDR_VAR 0 3
33325: PUSH
33326: LD_INT 0
33328: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
33329: LD_VAR 0 1
33333: PPUSH
33334: CALL_OW 266
33338: PUSH
33339: LD_INT 0
33341: DOUBLE
33342: EQUAL
33343: IFTRUE 33401
33345: LD_INT 1
33347: DOUBLE
33348: EQUAL
33349: IFTRUE 33401
33351: LD_INT 6
33353: DOUBLE
33354: EQUAL
33355: IFTRUE 33401
33357: LD_INT 7
33359: DOUBLE
33360: EQUAL
33361: IFTRUE 33401
33363: LD_INT 8
33365: DOUBLE
33366: EQUAL
33367: IFTRUE 33401
33369: LD_INT 4
33371: DOUBLE
33372: EQUAL
33373: IFTRUE 33401
33375: LD_INT 5
33377: DOUBLE
33378: EQUAL
33379: IFTRUE 33401
33381: LD_INT 2
33383: DOUBLE
33384: EQUAL
33385: IFTRUE 33401
33387: LD_INT 3
33389: DOUBLE
33390: EQUAL
33391: IFTRUE 33401
33393: LD_INT 35
33395: DOUBLE
33396: EQUAL
33397: IFTRUE 33401
33399: GO 33412
33401: POP
// places := 6 ; b_bunker , b_breastwork :
33402: LD_ADDR_VAR 0 3
33406: PUSH
33407: LD_INT 6
33409: ST_TO_ADDR
33410: GO 33457
33412: LD_INT 32
33414: DOUBLE
33415: EQUAL
33416: IFTRUE 33426
33418: LD_INT 31
33420: DOUBLE
33421: EQUAL
33422: IFTRUE 33426
33424: GO 33437
33426: POP
// places := 1 ; b_control_tower :
33427: LD_ADDR_VAR 0 3
33431: PUSH
33432: LD_INT 1
33434: ST_TO_ADDR
33435: GO 33457
33437: LD_INT 36
33439: DOUBLE
33440: EQUAL
33441: IFTRUE 33445
33443: GO 33456
33445: POP
// places := 3 ; end ;
33446: LD_ADDR_VAR 0 3
33450: PUSH
33451: LD_INT 3
33453: ST_TO_ADDR
33454: GO 33457
33456: POP
// if places then
33457: LD_VAR 0 3
33461: IFFALSE 33484
// result := UnitsInside ( building ) < places ;
33463: LD_ADDR_VAR 0 2
33467: PUSH
33468: LD_VAR 0 1
33472: PPUSH
33473: CALL_OW 313
33477: PUSH
33478: LD_VAR 0 3
33482: LESS
33483: ST_TO_ADDR
// end ;
33484: LD_VAR 0 2
33488: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33489: LD_INT 0
33491: PPUSH
33492: PPUSH
33493: PPUSH
33494: PPUSH
// tmp := [ ] ;
33495: LD_ADDR_VAR 0 3
33499: PUSH
33500: EMPTY
33501: ST_TO_ADDR
// list := [ ] ;
33502: LD_ADDR_VAR 0 5
33506: PUSH
33507: EMPTY
33508: ST_TO_ADDR
// for i = 16 to 25 do
33509: LD_ADDR_VAR 0 4
33513: PUSH
33514: DOUBLE
33515: LD_INT 16
33517: DEC
33518: ST_TO_ADDR
33519: LD_INT 25
33521: PUSH
33522: FOR_TO
33523: IFFALSE 33596
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33525: LD_ADDR_VAR 0 3
33529: PUSH
33530: LD_VAR 0 3
33534: PUSH
33535: LD_INT 22
33537: PUSH
33538: LD_VAR 0 1
33542: PPUSH
33543: CALL_OW 255
33547: PUSH
33548: EMPTY
33549: LIST
33550: LIST
33551: PUSH
33552: LD_INT 91
33554: PUSH
33555: LD_VAR 0 1
33559: PUSH
33560: LD_INT 6
33562: PUSH
33563: EMPTY
33564: LIST
33565: LIST
33566: LIST
33567: PUSH
33568: LD_INT 30
33570: PUSH
33571: LD_VAR 0 4
33575: PUSH
33576: EMPTY
33577: LIST
33578: LIST
33579: PUSH
33580: EMPTY
33581: LIST
33582: LIST
33583: LIST
33584: PUSH
33585: EMPTY
33586: LIST
33587: PPUSH
33588: CALL_OW 69
33592: ADD
33593: ST_TO_ADDR
33594: GO 33522
33596: POP
33597: POP
// for i = 1 to tmp do
33598: LD_ADDR_VAR 0 4
33602: PUSH
33603: DOUBLE
33604: LD_INT 1
33606: DEC
33607: ST_TO_ADDR
33608: LD_VAR 0 3
33612: PUSH
33613: FOR_TO
33614: IFFALSE 33702
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33616: LD_ADDR_VAR 0 5
33620: PUSH
33621: LD_VAR 0 5
33625: PUSH
33626: LD_VAR 0 3
33630: PUSH
33631: LD_VAR 0 4
33635: ARRAY
33636: PPUSH
33637: CALL_OW 266
33641: PUSH
33642: LD_VAR 0 3
33646: PUSH
33647: LD_VAR 0 4
33651: ARRAY
33652: PPUSH
33653: CALL_OW 250
33657: PUSH
33658: LD_VAR 0 3
33662: PUSH
33663: LD_VAR 0 4
33667: ARRAY
33668: PPUSH
33669: CALL_OW 251
33673: PUSH
33674: LD_VAR 0 3
33678: PUSH
33679: LD_VAR 0 4
33683: ARRAY
33684: PPUSH
33685: CALL_OW 254
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: PUSH
33696: EMPTY
33697: LIST
33698: ADD
33699: ST_TO_ADDR
33700: GO 33613
33702: POP
33703: POP
// result := list ;
33704: LD_ADDR_VAR 0 2
33708: PUSH
33709: LD_VAR 0 5
33713: ST_TO_ADDR
// end ;
33714: LD_VAR 0 2
33718: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33719: LD_INT 0
33721: PPUSH
33722: PPUSH
33723: PPUSH
33724: PPUSH
33725: PPUSH
33726: PPUSH
33727: PPUSH
// if not factory then
33728: LD_VAR 0 1
33732: NOT
33733: IFFALSE 33737
// exit ;
33735: GO 34330
// if control = control_apeman then
33737: LD_VAR 0 4
33741: PUSH
33742: LD_INT 5
33744: EQUAL
33745: IFFALSE 33854
// begin tmp := UnitsInside ( factory ) ;
33747: LD_ADDR_VAR 0 8
33751: PUSH
33752: LD_VAR 0 1
33756: PPUSH
33757: CALL_OW 313
33761: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33762: LD_VAR 0 8
33766: PPUSH
33767: LD_INT 25
33769: PUSH
33770: LD_INT 12
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: PPUSH
33777: CALL_OW 72
33781: NOT
33782: IFFALSE 33792
// control := control_manual ;
33784: LD_ADDR_VAR 0 4
33788: PUSH
33789: LD_INT 1
33791: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33792: LD_ADDR_VAR 0 8
33796: PUSH
33797: LD_VAR 0 1
33801: PPUSH
33802: CALL 33489 0 1
33806: ST_TO_ADDR
// if tmp then
33807: LD_VAR 0 8
33811: IFFALSE 33854
// begin for i in tmp do
33813: LD_ADDR_VAR 0 7
33817: PUSH
33818: LD_VAR 0 8
33822: PUSH
33823: FOR_IN
33824: IFFALSE 33852
// if i [ 1 ] = b_ext_radio then
33826: LD_VAR 0 7
33830: PUSH
33831: LD_INT 1
33833: ARRAY
33834: PUSH
33835: LD_INT 22
33837: EQUAL
33838: IFFALSE 33850
// begin control := control_remote ;
33840: LD_ADDR_VAR 0 4
33844: PUSH
33845: LD_INT 2
33847: ST_TO_ADDR
// break ;
33848: GO 33852
// end ;
33850: GO 33823
33852: POP
33853: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33854: LD_VAR 0 1
33858: PPUSH
33859: LD_VAR 0 2
33863: PPUSH
33864: LD_VAR 0 3
33868: PPUSH
33869: LD_VAR 0 4
33873: PPUSH
33874: LD_VAR 0 5
33878: PPUSH
33879: CALL_OW 448
33883: IFFALSE 33918
// begin result := [ chassis , engine , control , weapon ] ;
33885: LD_ADDR_VAR 0 6
33889: PUSH
33890: LD_VAR 0 2
33894: PUSH
33895: LD_VAR 0 3
33899: PUSH
33900: LD_VAR 0 4
33904: PUSH
33905: LD_VAR 0 5
33909: PUSH
33910: EMPTY
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: ST_TO_ADDR
// exit ;
33916: GO 34330
// end ; _chassis := AvailableChassisList ( factory ) ;
33918: LD_ADDR_VAR 0 9
33922: PUSH
33923: LD_VAR 0 1
33927: PPUSH
33928: CALL_OW 475
33932: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33933: LD_ADDR_VAR 0 11
33937: PUSH
33938: LD_VAR 0 1
33942: PPUSH
33943: CALL_OW 476
33947: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33948: LD_ADDR_VAR 0 12
33952: PUSH
33953: LD_VAR 0 1
33957: PPUSH
33958: CALL_OW 477
33962: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33963: LD_ADDR_VAR 0 10
33967: PUSH
33968: LD_VAR 0 1
33972: PPUSH
33973: CALL_OW 478
33977: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33978: LD_VAR 0 9
33982: NOT
33983: PUSH
33984: LD_VAR 0 11
33988: NOT
33989: OR
33990: PUSH
33991: LD_VAR 0 12
33995: NOT
33996: OR
33997: PUSH
33998: LD_VAR 0 10
34002: NOT
34003: OR
34004: IFFALSE 34039
// begin result := [ chassis , engine , control , weapon ] ;
34006: LD_ADDR_VAR 0 6
34010: PUSH
34011: LD_VAR 0 2
34015: PUSH
34016: LD_VAR 0 3
34020: PUSH
34021: LD_VAR 0 4
34025: PUSH
34026: LD_VAR 0 5
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: LIST
34035: LIST
34036: ST_TO_ADDR
// exit ;
34037: GO 34330
// end ; if not chassis in _chassis then
34039: LD_VAR 0 2
34043: PUSH
34044: LD_VAR 0 9
34048: IN
34049: NOT
34050: IFFALSE 34076
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34052: LD_ADDR_VAR 0 2
34056: PUSH
34057: LD_VAR 0 9
34061: PUSH
34062: LD_INT 1
34064: PPUSH
34065: LD_VAR 0 9
34069: PPUSH
34070: CALL_OW 12
34074: ARRAY
34075: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34076: LD_VAR 0 2
34080: PPUSH
34081: LD_VAR 0 3
34085: PPUSH
34086: CALL 34335 0 2
34090: NOT
34091: IFFALSE 34150
// repeat engine := _engine [ 1 ] ;
34093: LD_ADDR_VAR 0 3
34097: PUSH
34098: LD_VAR 0 11
34102: PUSH
34103: LD_INT 1
34105: ARRAY
34106: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34107: LD_ADDR_VAR 0 11
34111: PUSH
34112: LD_VAR 0 11
34116: PPUSH
34117: LD_INT 1
34119: PPUSH
34120: CALL_OW 3
34124: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34125: LD_VAR 0 2
34129: PPUSH
34130: LD_VAR 0 3
34134: PPUSH
34135: CALL 34335 0 2
34139: PUSH
34140: LD_VAR 0 11
34144: PUSH
34145: EMPTY
34146: EQUAL
34147: OR
34148: IFFALSE 34093
// if not control in _control then
34150: LD_VAR 0 4
34154: PUSH
34155: LD_VAR 0 12
34159: IN
34160: NOT
34161: IFFALSE 34187
// control := _control [ rand ( 1 , _control ) ] ;
34163: LD_ADDR_VAR 0 4
34167: PUSH
34168: LD_VAR 0 12
34172: PUSH
34173: LD_INT 1
34175: PPUSH
34176: LD_VAR 0 12
34180: PPUSH
34181: CALL_OW 12
34185: ARRAY
34186: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34187: LD_VAR 0 2
34191: PPUSH
34192: LD_VAR 0 5
34196: PPUSH
34197: CALL 34555 0 2
34201: NOT
34202: IFFALSE 34261
// repeat weapon := _weapon [ 1 ] ;
34204: LD_ADDR_VAR 0 5
34208: PUSH
34209: LD_VAR 0 10
34213: PUSH
34214: LD_INT 1
34216: ARRAY
34217: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34218: LD_ADDR_VAR 0 10
34222: PUSH
34223: LD_VAR 0 10
34227: PPUSH
34228: LD_INT 1
34230: PPUSH
34231: CALL_OW 3
34235: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34236: LD_VAR 0 2
34240: PPUSH
34241: LD_VAR 0 5
34245: PPUSH
34246: CALL 34555 0 2
34250: PUSH
34251: LD_VAR 0 10
34255: PUSH
34256: EMPTY
34257: EQUAL
34258: OR
34259: IFFALSE 34204
// result := [ ] ;
34261: LD_ADDR_VAR 0 6
34265: PUSH
34266: EMPTY
34267: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34268: LD_VAR 0 1
34272: PPUSH
34273: LD_VAR 0 2
34277: PPUSH
34278: LD_VAR 0 3
34282: PPUSH
34283: LD_VAR 0 4
34287: PPUSH
34288: LD_VAR 0 5
34292: PPUSH
34293: CALL_OW 448
34297: IFFALSE 34330
// result := [ chassis , engine , control , weapon ] ;
34299: LD_ADDR_VAR 0 6
34303: PUSH
34304: LD_VAR 0 2
34308: PUSH
34309: LD_VAR 0 3
34313: PUSH
34314: LD_VAR 0 4
34318: PUSH
34319: LD_VAR 0 5
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: LIST
34328: LIST
34329: ST_TO_ADDR
// end ;
34330: LD_VAR 0 6
34334: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34335: LD_INT 0
34337: PPUSH
// if not chassis or not engine then
34338: LD_VAR 0 1
34342: NOT
34343: PUSH
34344: LD_VAR 0 2
34348: NOT
34349: OR
34350: IFFALSE 34354
// exit ;
34352: GO 34550
// case engine of engine_solar :
34354: LD_VAR 0 2
34358: PUSH
34359: LD_INT 2
34361: DOUBLE
34362: EQUAL
34363: IFTRUE 34367
34365: GO 34405
34367: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34368: LD_ADDR_VAR 0 3
34372: PUSH
34373: LD_INT 11
34375: PUSH
34376: LD_INT 12
34378: PUSH
34379: LD_INT 13
34381: PUSH
34382: LD_INT 14
34384: PUSH
34385: LD_INT 1
34387: PUSH
34388: LD_INT 2
34390: PUSH
34391: LD_INT 3
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: LIST
34400: LIST
34401: LIST
34402: ST_TO_ADDR
34403: GO 34534
34405: LD_INT 1
34407: DOUBLE
34408: EQUAL
34409: IFTRUE 34413
34411: GO 34475
34413: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34414: LD_ADDR_VAR 0 3
34418: PUSH
34419: LD_INT 11
34421: PUSH
34422: LD_INT 12
34424: PUSH
34425: LD_INT 13
34427: PUSH
34428: LD_INT 14
34430: PUSH
34431: LD_INT 1
34433: PUSH
34434: LD_INT 2
34436: PUSH
34437: LD_INT 3
34439: PUSH
34440: LD_INT 4
34442: PUSH
34443: LD_INT 5
34445: PUSH
34446: LD_INT 21
34448: PUSH
34449: LD_INT 23
34451: PUSH
34452: LD_INT 22
34454: PUSH
34455: LD_INT 24
34457: PUSH
34458: EMPTY
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: LIST
34466: LIST
34467: LIST
34468: LIST
34469: LIST
34470: LIST
34471: LIST
34472: ST_TO_ADDR
34473: GO 34534
34475: LD_INT 3
34477: DOUBLE
34478: EQUAL
34479: IFTRUE 34483
34481: GO 34533
34483: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34484: LD_ADDR_VAR 0 3
34488: PUSH
34489: LD_INT 13
34491: PUSH
34492: LD_INT 14
34494: PUSH
34495: LD_INT 2
34497: PUSH
34498: LD_INT 3
34500: PUSH
34501: LD_INT 4
34503: PUSH
34504: LD_INT 5
34506: PUSH
34507: LD_INT 21
34509: PUSH
34510: LD_INT 22
34512: PUSH
34513: LD_INT 23
34515: PUSH
34516: LD_INT 24
34518: PUSH
34519: EMPTY
34520: LIST
34521: LIST
34522: LIST
34523: LIST
34524: LIST
34525: LIST
34526: LIST
34527: LIST
34528: LIST
34529: LIST
34530: ST_TO_ADDR
34531: GO 34534
34533: POP
// result := ( chassis in result ) ;
34534: LD_ADDR_VAR 0 3
34538: PUSH
34539: LD_VAR 0 1
34543: PUSH
34544: LD_VAR 0 3
34548: IN
34549: ST_TO_ADDR
// end ;
34550: LD_VAR 0 3
34554: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34555: LD_INT 0
34557: PPUSH
// if not chassis or not weapon then
34558: LD_VAR 0 1
34562: NOT
34563: PUSH
34564: LD_VAR 0 2
34568: NOT
34569: OR
34570: IFFALSE 34574
// exit ;
34572: GO 35634
// case weapon of us_machine_gun :
34574: LD_VAR 0 2
34578: PUSH
34579: LD_INT 2
34581: DOUBLE
34582: EQUAL
34583: IFTRUE 34587
34585: GO 34617
34587: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34588: LD_ADDR_VAR 0 3
34592: PUSH
34593: LD_INT 1
34595: PUSH
34596: LD_INT 2
34598: PUSH
34599: LD_INT 3
34601: PUSH
34602: LD_INT 4
34604: PUSH
34605: LD_INT 5
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: LIST
34612: LIST
34613: LIST
34614: ST_TO_ADDR
34615: GO 35618
34617: LD_INT 3
34619: DOUBLE
34620: EQUAL
34621: IFTRUE 34625
34623: GO 34655
34625: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34626: LD_ADDR_VAR 0 3
34630: PUSH
34631: LD_INT 1
34633: PUSH
34634: LD_INT 2
34636: PUSH
34637: LD_INT 3
34639: PUSH
34640: LD_INT 4
34642: PUSH
34643: LD_INT 5
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: LIST
34650: LIST
34651: LIST
34652: ST_TO_ADDR
34653: GO 35618
34655: LD_INT 11
34657: DOUBLE
34658: EQUAL
34659: IFTRUE 34663
34661: GO 34693
34663: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34664: LD_ADDR_VAR 0 3
34668: PUSH
34669: LD_INT 1
34671: PUSH
34672: LD_INT 2
34674: PUSH
34675: LD_INT 3
34677: PUSH
34678: LD_INT 4
34680: PUSH
34681: LD_INT 5
34683: PUSH
34684: EMPTY
34685: LIST
34686: LIST
34687: LIST
34688: LIST
34689: LIST
34690: ST_TO_ADDR
34691: GO 35618
34693: LD_INT 4
34695: DOUBLE
34696: EQUAL
34697: IFTRUE 34701
34699: GO 34727
34701: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34702: LD_ADDR_VAR 0 3
34706: PUSH
34707: LD_INT 2
34709: PUSH
34710: LD_INT 3
34712: PUSH
34713: LD_INT 4
34715: PUSH
34716: LD_INT 5
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: ST_TO_ADDR
34725: GO 35618
34727: LD_INT 5
34729: DOUBLE
34730: EQUAL
34731: IFTRUE 34735
34733: GO 34761
34735: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34736: LD_ADDR_VAR 0 3
34740: PUSH
34741: LD_INT 2
34743: PUSH
34744: LD_INT 3
34746: PUSH
34747: LD_INT 4
34749: PUSH
34750: LD_INT 5
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: LIST
34757: LIST
34758: ST_TO_ADDR
34759: GO 35618
34761: LD_INT 9
34763: DOUBLE
34764: EQUAL
34765: IFTRUE 34769
34767: GO 34795
34769: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34770: LD_ADDR_VAR 0 3
34774: PUSH
34775: LD_INT 2
34777: PUSH
34778: LD_INT 3
34780: PUSH
34781: LD_INT 4
34783: PUSH
34784: LD_INT 5
34786: PUSH
34787: EMPTY
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: ST_TO_ADDR
34793: GO 35618
34795: LD_INT 7
34797: DOUBLE
34798: EQUAL
34799: IFTRUE 34803
34801: GO 34829
34803: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34804: LD_ADDR_VAR 0 3
34808: PUSH
34809: LD_INT 2
34811: PUSH
34812: LD_INT 3
34814: PUSH
34815: LD_INT 4
34817: PUSH
34818: LD_INT 5
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: LIST
34825: LIST
34826: ST_TO_ADDR
34827: GO 35618
34829: LD_INT 12
34831: DOUBLE
34832: EQUAL
34833: IFTRUE 34837
34835: GO 34863
34837: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34838: LD_ADDR_VAR 0 3
34842: PUSH
34843: LD_INT 2
34845: PUSH
34846: LD_INT 3
34848: PUSH
34849: LD_INT 4
34851: PUSH
34852: LD_INT 5
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: ST_TO_ADDR
34861: GO 35618
34863: LD_INT 13
34865: DOUBLE
34866: EQUAL
34867: IFTRUE 34871
34869: GO 34897
34871: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34872: LD_ADDR_VAR 0 3
34876: PUSH
34877: LD_INT 2
34879: PUSH
34880: LD_INT 3
34882: PUSH
34883: LD_INT 4
34885: PUSH
34886: LD_INT 5
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: LIST
34893: LIST
34894: ST_TO_ADDR
34895: GO 35618
34897: LD_INT 14
34899: DOUBLE
34900: EQUAL
34901: IFTRUE 34905
34903: GO 34923
34905: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34906: LD_ADDR_VAR 0 3
34910: PUSH
34911: LD_INT 4
34913: PUSH
34914: LD_INT 5
34916: PUSH
34917: EMPTY
34918: LIST
34919: LIST
34920: ST_TO_ADDR
34921: GO 35618
34923: LD_INT 6
34925: DOUBLE
34926: EQUAL
34927: IFTRUE 34931
34929: GO 34949
34931: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34932: LD_ADDR_VAR 0 3
34936: PUSH
34937: LD_INT 4
34939: PUSH
34940: LD_INT 5
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: ST_TO_ADDR
34947: GO 35618
34949: LD_INT 10
34951: DOUBLE
34952: EQUAL
34953: IFTRUE 34957
34955: GO 34975
34957: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34958: LD_ADDR_VAR 0 3
34962: PUSH
34963: LD_INT 4
34965: PUSH
34966: LD_INT 5
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: ST_TO_ADDR
34973: GO 35618
34975: LD_INT 22
34977: DOUBLE
34978: EQUAL
34979: IFTRUE 34983
34981: GO 35009
34983: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34984: LD_ADDR_VAR 0 3
34988: PUSH
34989: LD_INT 11
34991: PUSH
34992: LD_INT 12
34994: PUSH
34995: LD_INT 13
34997: PUSH
34998: LD_INT 14
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: LIST
35005: LIST
35006: ST_TO_ADDR
35007: GO 35618
35009: LD_INT 23
35011: DOUBLE
35012: EQUAL
35013: IFTRUE 35017
35015: GO 35043
35017: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35018: LD_ADDR_VAR 0 3
35022: PUSH
35023: LD_INT 11
35025: PUSH
35026: LD_INT 12
35028: PUSH
35029: LD_INT 13
35031: PUSH
35032: LD_INT 14
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: LIST
35039: LIST
35040: ST_TO_ADDR
35041: GO 35618
35043: LD_INT 24
35045: DOUBLE
35046: EQUAL
35047: IFTRUE 35051
35049: GO 35077
35051: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35052: LD_ADDR_VAR 0 3
35056: PUSH
35057: LD_INT 11
35059: PUSH
35060: LD_INT 12
35062: PUSH
35063: LD_INT 13
35065: PUSH
35066: LD_INT 14
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: LIST
35073: LIST
35074: ST_TO_ADDR
35075: GO 35618
35077: LD_INT 30
35079: DOUBLE
35080: EQUAL
35081: IFTRUE 35085
35083: GO 35111
35085: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35086: LD_ADDR_VAR 0 3
35090: PUSH
35091: LD_INT 11
35093: PUSH
35094: LD_INT 12
35096: PUSH
35097: LD_INT 13
35099: PUSH
35100: LD_INT 14
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: LIST
35107: LIST
35108: ST_TO_ADDR
35109: GO 35618
35111: LD_INT 25
35113: DOUBLE
35114: EQUAL
35115: IFTRUE 35119
35117: GO 35137
35119: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35120: LD_ADDR_VAR 0 3
35124: PUSH
35125: LD_INT 13
35127: PUSH
35128: LD_INT 14
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: ST_TO_ADDR
35135: GO 35618
35137: LD_INT 27
35139: DOUBLE
35140: EQUAL
35141: IFTRUE 35145
35143: GO 35163
35145: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35146: LD_ADDR_VAR 0 3
35150: PUSH
35151: LD_INT 13
35153: PUSH
35154: LD_INT 14
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: ST_TO_ADDR
35161: GO 35618
35163: LD_INT 92
35165: DOUBLE
35166: EQUAL
35167: IFTRUE 35171
35169: GO 35197
35171: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35172: LD_ADDR_VAR 0 3
35176: PUSH
35177: LD_INT 11
35179: PUSH
35180: LD_INT 12
35182: PUSH
35183: LD_INT 13
35185: PUSH
35186: LD_INT 14
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: LIST
35193: LIST
35194: ST_TO_ADDR
35195: GO 35618
35197: LD_INT 28
35199: DOUBLE
35200: EQUAL
35201: IFTRUE 35205
35203: GO 35223
35205: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35206: LD_ADDR_VAR 0 3
35210: PUSH
35211: LD_INT 13
35213: PUSH
35214: LD_INT 14
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: ST_TO_ADDR
35221: GO 35618
35223: LD_INT 29
35225: DOUBLE
35226: EQUAL
35227: IFTRUE 35231
35229: GO 35249
35231: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35232: LD_ADDR_VAR 0 3
35236: PUSH
35237: LD_INT 13
35239: PUSH
35240: LD_INT 14
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: ST_TO_ADDR
35247: GO 35618
35249: LD_INT 31
35251: DOUBLE
35252: EQUAL
35253: IFTRUE 35257
35255: GO 35275
35257: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35258: LD_ADDR_VAR 0 3
35262: PUSH
35263: LD_INT 13
35265: PUSH
35266: LD_INT 14
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: ST_TO_ADDR
35273: GO 35618
35275: LD_INT 26
35277: DOUBLE
35278: EQUAL
35279: IFTRUE 35283
35281: GO 35301
35283: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35284: LD_ADDR_VAR 0 3
35288: PUSH
35289: LD_INT 13
35291: PUSH
35292: LD_INT 14
35294: PUSH
35295: EMPTY
35296: LIST
35297: LIST
35298: ST_TO_ADDR
35299: GO 35618
35301: LD_INT 42
35303: DOUBLE
35304: EQUAL
35305: IFTRUE 35309
35307: GO 35335
35309: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35310: LD_ADDR_VAR 0 3
35314: PUSH
35315: LD_INT 21
35317: PUSH
35318: LD_INT 22
35320: PUSH
35321: LD_INT 23
35323: PUSH
35324: LD_INT 24
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: LIST
35331: LIST
35332: ST_TO_ADDR
35333: GO 35618
35335: LD_INT 43
35337: DOUBLE
35338: EQUAL
35339: IFTRUE 35343
35341: GO 35369
35343: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35344: LD_ADDR_VAR 0 3
35348: PUSH
35349: LD_INT 21
35351: PUSH
35352: LD_INT 22
35354: PUSH
35355: LD_INT 23
35357: PUSH
35358: LD_INT 24
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: ST_TO_ADDR
35367: GO 35618
35369: LD_INT 44
35371: DOUBLE
35372: EQUAL
35373: IFTRUE 35377
35375: GO 35403
35377: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35378: LD_ADDR_VAR 0 3
35382: PUSH
35383: LD_INT 21
35385: PUSH
35386: LD_INT 22
35388: PUSH
35389: LD_INT 23
35391: PUSH
35392: LD_INT 24
35394: PUSH
35395: EMPTY
35396: LIST
35397: LIST
35398: LIST
35399: LIST
35400: ST_TO_ADDR
35401: GO 35618
35403: LD_INT 45
35405: DOUBLE
35406: EQUAL
35407: IFTRUE 35411
35409: GO 35437
35411: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35412: LD_ADDR_VAR 0 3
35416: PUSH
35417: LD_INT 21
35419: PUSH
35420: LD_INT 22
35422: PUSH
35423: LD_INT 23
35425: PUSH
35426: LD_INT 24
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: LIST
35433: LIST
35434: ST_TO_ADDR
35435: GO 35618
35437: LD_INT 49
35439: DOUBLE
35440: EQUAL
35441: IFTRUE 35445
35443: GO 35471
35445: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35446: LD_ADDR_VAR 0 3
35450: PUSH
35451: LD_INT 21
35453: PUSH
35454: LD_INT 22
35456: PUSH
35457: LD_INT 23
35459: PUSH
35460: LD_INT 24
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: LIST
35467: LIST
35468: ST_TO_ADDR
35469: GO 35618
35471: LD_INT 51
35473: DOUBLE
35474: EQUAL
35475: IFTRUE 35479
35477: GO 35505
35479: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35480: LD_ADDR_VAR 0 3
35484: PUSH
35485: LD_INT 21
35487: PUSH
35488: LD_INT 22
35490: PUSH
35491: LD_INT 23
35493: PUSH
35494: LD_INT 24
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: LIST
35501: LIST
35502: ST_TO_ADDR
35503: GO 35618
35505: LD_INT 52
35507: DOUBLE
35508: EQUAL
35509: IFTRUE 35513
35511: GO 35539
35513: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35514: LD_ADDR_VAR 0 3
35518: PUSH
35519: LD_INT 21
35521: PUSH
35522: LD_INT 22
35524: PUSH
35525: LD_INT 23
35527: PUSH
35528: LD_INT 24
35530: PUSH
35531: EMPTY
35532: LIST
35533: LIST
35534: LIST
35535: LIST
35536: ST_TO_ADDR
35537: GO 35618
35539: LD_INT 53
35541: DOUBLE
35542: EQUAL
35543: IFTRUE 35547
35545: GO 35565
35547: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35548: LD_ADDR_VAR 0 3
35552: PUSH
35553: LD_INT 23
35555: PUSH
35556: LD_INT 24
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: ST_TO_ADDR
35563: GO 35618
35565: LD_INT 46
35567: DOUBLE
35568: EQUAL
35569: IFTRUE 35573
35571: GO 35591
35573: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35574: LD_ADDR_VAR 0 3
35578: PUSH
35579: LD_INT 23
35581: PUSH
35582: LD_INT 24
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: ST_TO_ADDR
35589: GO 35618
35591: LD_INT 47
35593: DOUBLE
35594: EQUAL
35595: IFTRUE 35599
35597: GO 35617
35599: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35600: LD_ADDR_VAR 0 3
35604: PUSH
35605: LD_INT 23
35607: PUSH
35608: LD_INT 24
35610: PUSH
35611: EMPTY
35612: LIST
35613: LIST
35614: ST_TO_ADDR
35615: GO 35618
35617: POP
// result := ( chassis in result ) ;
35618: LD_ADDR_VAR 0 3
35622: PUSH
35623: LD_VAR 0 1
35627: PUSH
35628: LD_VAR 0 3
35632: IN
35633: ST_TO_ADDR
// end ;
35634: LD_VAR 0 3
35638: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35639: LD_INT 0
35641: PPUSH
35642: PPUSH
35643: PPUSH
35644: PPUSH
35645: PPUSH
35646: PPUSH
35647: PPUSH
// result := array ;
35648: LD_ADDR_VAR 0 5
35652: PUSH
35653: LD_VAR 0 1
35657: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35658: LD_VAR 0 1
35662: NOT
35663: PUSH
35664: LD_VAR 0 2
35668: NOT
35669: OR
35670: PUSH
35671: LD_VAR 0 3
35675: NOT
35676: OR
35677: PUSH
35678: LD_VAR 0 2
35682: PUSH
35683: LD_VAR 0 1
35687: GREATER
35688: OR
35689: PUSH
35690: LD_VAR 0 3
35694: PUSH
35695: LD_VAR 0 1
35699: GREATER
35700: OR
35701: IFFALSE 35705
// exit ;
35703: GO 36001
// if direction then
35705: LD_VAR 0 4
35709: IFFALSE 35773
// begin d := 1 ;
35711: LD_ADDR_VAR 0 9
35715: PUSH
35716: LD_INT 1
35718: ST_TO_ADDR
// if i_from > i_to then
35719: LD_VAR 0 2
35723: PUSH
35724: LD_VAR 0 3
35728: GREATER
35729: IFFALSE 35755
// length := ( array - i_from ) + i_to else
35731: LD_ADDR_VAR 0 11
35735: PUSH
35736: LD_VAR 0 1
35740: PUSH
35741: LD_VAR 0 2
35745: MINUS
35746: PUSH
35747: LD_VAR 0 3
35751: PLUS
35752: ST_TO_ADDR
35753: GO 35771
// length := i_to - i_from ;
35755: LD_ADDR_VAR 0 11
35759: PUSH
35760: LD_VAR 0 3
35764: PUSH
35765: LD_VAR 0 2
35769: MINUS
35770: ST_TO_ADDR
// end else
35771: GO 35834
// begin d := - 1 ;
35773: LD_ADDR_VAR 0 9
35777: PUSH
35778: LD_INT 1
35780: NEG
35781: ST_TO_ADDR
// if i_from > i_to then
35782: LD_VAR 0 2
35786: PUSH
35787: LD_VAR 0 3
35791: GREATER
35792: IFFALSE 35812
// length := i_from - i_to else
35794: LD_ADDR_VAR 0 11
35798: PUSH
35799: LD_VAR 0 2
35803: PUSH
35804: LD_VAR 0 3
35808: MINUS
35809: ST_TO_ADDR
35810: GO 35834
// length := ( array - i_to ) + i_from ;
35812: LD_ADDR_VAR 0 11
35816: PUSH
35817: LD_VAR 0 1
35821: PUSH
35822: LD_VAR 0 3
35826: MINUS
35827: PUSH
35828: LD_VAR 0 2
35832: PLUS
35833: ST_TO_ADDR
// end ; if not length then
35834: LD_VAR 0 11
35838: NOT
35839: IFFALSE 35843
// exit ;
35841: GO 36001
// tmp := array ;
35843: LD_ADDR_VAR 0 10
35847: PUSH
35848: LD_VAR 0 1
35852: ST_TO_ADDR
// for i = 1 to length do
35853: LD_ADDR_VAR 0 6
35857: PUSH
35858: DOUBLE
35859: LD_INT 1
35861: DEC
35862: ST_TO_ADDR
35863: LD_VAR 0 11
35867: PUSH
35868: FOR_TO
35869: IFFALSE 35989
// begin for j = 1 to array do
35871: LD_ADDR_VAR 0 7
35875: PUSH
35876: DOUBLE
35877: LD_INT 1
35879: DEC
35880: ST_TO_ADDR
35881: LD_VAR 0 1
35885: PUSH
35886: FOR_TO
35887: IFFALSE 35975
// begin k := j + d ;
35889: LD_ADDR_VAR 0 8
35893: PUSH
35894: LD_VAR 0 7
35898: PUSH
35899: LD_VAR 0 9
35903: PLUS
35904: ST_TO_ADDR
// if k > array then
35905: LD_VAR 0 8
35909: PUSH
35910: LD_VAR 0 1
35914: GREATER
35915: IFFALSE 35925
// k := 1 ;
35917: LD_ADDR_VAR 0 8
35921: PUSH
35922: LD_INT 1
35924: ST_TO_ADDR
// if not k then
35925: LD_VAR 0 8
35929: NOT
35930: IFFALSE 35942
// k := array ;
35932: LD_ADDR_VAR 0 8
35936: PUSH
35937: LD_VAR 0 1
35941: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35942: LD_ADDR_VAR 0 10
35946: PUSH
35947: LD_VAR 0 10
35951: PPUSH
35952: LD_VAR 0 8
35956: PPUSH
35957: LD_VAR 0 1
35961: PUSH
35962: LD_VAR 0 7
35966: ARRAY
35967: PPUSH
35968: CALL_OW 1
35972: ST_TO_ADDR
// end ;
35973: GO 35886
35975: POP
35976: POP
// array := tmp ;
35977: LD_ADDR_VAR 0 1
35981: PUSH
35982: LD_VAR 0 10
35986: ST_TO_ADDR
// end ;
35987: GO 35868
35989: POP
35990: POP
// result := array ;
35991: LD_ADDR_VAR 0 5
35995: PUSH
35996: LD_VAR 0 1
36000: ST_TO_ADDR
// end ;
36001: LD_VAR 0 5
36005: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36006: LD_INT 0
36008: PPUSH
36009: PPUSH
// result := 0 ;
36010: LD_ADDR_VAR 0 3
36014: PUSH
36015: LD_INT 0
36017: ST_TO_ADDR
// if not array or not value in array then
36018: LD_VAR 0 1
36022: NOT
36023: PUSH
36024: LD_VAR 0 2
36028: PUSH
36029: LD_VAR 0 1
36033: IN
36034: NOT
36035: OR
36036: IFFALSE 36040
// exit ;
36038: GO 36094
// for i = 1 to array do
36040: LD_ADDR_VAR 0 4
36044: PUSH
36045: DOUBLE
36046: LD_INT 1
36048: DEC
36049: ST_TO_ADDR
36050: LD_VAR 0 1
36054: PUSH
36055: FOR_TO
36056: IFFALSE 36092
// if value = array [ i ] then
36058: LD_VAR 0 2
36062: PUSH
36063: LD_VAR 0 1
36067: PUSH
36068: LD_VAR 0 4
36072: ARRAY
36073: EQUAL
36074: IFFALSE 36090
// begin result := i ;
36076: LD_ADDR_VAR 0 3
36080: PUSH
36081: LD_VAR 0 4
36085: ST_TO_ADDR
// exit ;
36086: POP
36087: POP
36088: GO 36094
// end ;
36090: GO 36055
36092: POP
36093: POP
// end ;
36094: LD_VAR 0 3
36098: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36099: LD_INT 0
36101: PPUSH
// vc_chassis := chassis ;
36102: LD_ADDR_OWVAR 37
36106: PUSH
36107: LD_VAR 0 1
36111: ST_TO_ADDR
// vc_engine := engine ;
36112: LD_ADDR_OWVAR 39
36116: PUSH
36117: LD_VAR 0 2
36121: ST_TO_ADDR
// vc_control := control ;
36122: LD_ADDR_OWVAR 38
36126: PUSH
36127: LD_VAR 0 3
36131: ST_TO_ADDR
// vc_weapon := weapon ;
36132: LD_ADDR_OWVAR 40
36136: PUSH
36137: LD_VAR 0 4
36141: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36142: LD_ADDR_OWVAR 41
36146: PUSH
36147: LD_VAR 0 5
36151: ST_TO_ADDR
// end ;
36152: LD_VAR 0 6
36156: RET
// export function WantPlant ( unit ) ; var task ; begin
36157: LD_INT 0
36159: PPUSH
36160: PPUSH
// result := false ;
36161: LD_ADDR_VAR 0 2
36165: PUSH
36166: LD_INT 0
36168: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36169: LD_ADDR_VAR 0 3
36173: PUSH
36174: LD_VAR 0 1
36178: PPUSH
36179: CALL_OW 437
36183: ST_TO_ADDR
// if task then
36184: LD_VAR 0 3
36188: IFFALSE 36216
// if task [ 1 ] [ 1 ] = p then
36190: LD_VAR 0 3
36194: PUSH
36195: LD_INT 1
36197: ARRAY
36198: PUSH
36199: LD_INT 1
36201: ARRAY
36202: PUSH
36203: LD_STRING p
36205: EQUAL
36206: IFFALSE 36216
// result := true ;
36208: LD_ADDR_VAR 0 2
36212: PUSH
36213: LD_INT 1
36215: ST_TO_ADDR
// end ;
36216: LD_VAR 0 2
36220: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36221: LD_INT 0
36223: PPUSH
36224: PPUSH
36225: PPUSH
36226: PPUSH
// if pos < 1 then
36227: LD_VAR 0 2
36231: PUSH
36232: LD_INT 1
36234: LESS
36235: IFFALSE 36239
// exit ;
36237: GO 36542
// if pos = 1 then
36239: LD_VAR 0 2
36243: PUSH
36244: LD_INT 1
36246: EQUAL
36247: IFFALSE 36280
// result := Replace ( arr , pos [ 1 ] , value ) else
36249: LD_ADDR_VAR 0 4
36253: PUSH
36254: LD_VAR 0 1
36258: PPUSH
36259: LD_VAR 0 2
36263: PUSH
36264: LD_INT 1
36266: ARRAY
36267: PPUSH
36268: LD_VAR 0 3
36272: PPUSH
36273: CALL_OW 1
36277: ST_TO_ADDR
36278: GO 36542
// begin tmp := arr ;
36280: LD_ADDR_VAR 0 6
36284: PUSH
36285: LD_VAR 0 1
36289: ST_TO_ADDR
// s_arr := [ tmp ] ;
36290: LD_ADDR_VAR 0 7
36294: PUSH
36295: LD_VAR 0 6
36299: PUSH
36300: EMPTY
36301: LIST
36302: ST_TO_ADDR
// for i = 1 to pos - 1 do
36303: LD_ADDR_VAR 0 5
36307: PUSH
36308: DOUBLE
36309: LD_INT 1
36311: DEC
36312: ST_TO_ADDR
36313: LD_VAR 0 2
36317: PUSH
36318: LD_INT 1
36320: MINUS
36321: PUSH
36322: FOR_TO
36323: IFFALSE 36368
// begin tmp := tmp [ pos [ i ] ] ;
36325: LD_ADDR_VAR 0 6
36329: PUSH
36330: LD_VAR 0 6
36334: PUSH
36335: LD_VAR 0 2
36339: PUSH
36340: LD_VAR 0 5
36344: ARRAY
36345: ARRAY
36346: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36347: LD_ADDR_VAR 0 7
36351: PUSH
36352: LD_VAR 0 7
36356: PUSH
36357: LD_VAR 0 6
36361: PUSH
36362: EMPTY
36363: LIST
36364: ADD
36365: ST_TO_ADDR
// end ;
36366: GO 36322
36368: POP
36369: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36370: LD_ADDR_VAR 0 6
36374: PUSH
36375: LD_VAR 0 6
36379: PPUSH
36380: LD_VAR 0 2
36384: PUSH
36385: LD_VAR 0 2
36389: ARRAY
36390: PPUSH
36391: LD_VAR 0 3
36395: PPUSH
36396: CALL_OW 1
36400: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36401: LD_ADDR_VAR 0 7
36405: PUSH
36406: LD_VAR 0 7
36410: PPUSH
36411: LD_VAR 0 7
36415: PPUSH
36416: LD_VAR 0 6
36420: PPUSH
36421: CALL_OW 1
36425: ST_TO_ADDR
// for i = s_arr downto 2 do
36426: LD_ADDR_VAR 0 5
36430: PUSH
36431: DOUBLE
36432: LD_VAR 0 7
36436: INC
36437: ST_TO_ADDR
36438: LD_INT 2
36440: PUSH
36441: FOR_DOWNTO
36442: IFFALSE 36526
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36444: LD_ADDR_VAR 0 6
36448: PUSH
36449: LD_VAR 0 7
36453: PUSH
36454: LD_VAR 0 5
36458: PUSH
36459: LD_INT 1
36461: MINUS
36462: ARRAY
36463: PPUSH
36464: LD_VAR 0 2
36468: PUSH
36469: LD_VAR 0 5
36473: PUSH
36474: LD_INT 1
36476: MINUS
36477: ARRAY
36478: PPUSH
36479: LD_VAR 0 7
36483: PUSH
36484: LD_VAR 0 5
36488: ARRAY
36489: PPUSH
36490: CALL_OW 1
36494: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36495: LD_ADDR_VAR 0 7
36499: PUSH
36500: LD_VAR 0 7
36504: PPUSH
36505: LD_VAR 0 5
36509: PUSH
36510: LD_INT 1
36512: MINUS
36513: PPUSH
36514: LD_VAR 0 6
36518: PPUSH
36519: CALL_OW 1
36523: ST_TO_ADDR
// end ;
36524: GO 36441
36526: POP
36527: POP
// result := s_arr [ 1 ] ;
36528: LD_ADDR_VAR 0 4
36532: PUSH
36533: LD_VAR 0 7
36537: PUSH
36538: LD_INT 1
36540: ARRAY
36541: ST_TO_ADDR
// end ; end ;
36542: LD_VAR 0 4
36546: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36547: LD_INT 0
36549: PPUSH
36550: PPUSH
// if not list then
36551: LD_VAR 0 1
36555: NOT
36556: IFFALSE 36560
// exit ;
36558: GO 36651
// i := list [ pos1 ] ;
36560: LD_ADDR_VAR 0 5
36564: PUSH
36565: LD_VAR 0 1
36569: PUSH
36570: LD_VAR 0 2
36574: ARRAY
36575: ST_TO_ADDR
// if not i then
36576: LD_VAR 0 5
36580: NOT
36581: IFFALSE 36585
// exit ;
36583: GO 36651
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36585: LD_ADDR_VAR 0 1
36589: PUSH
36590: LD_VAR 0 1
36594: PPUSH
36595: LD_VAR 0 2
36599: PPUSH
36600: LD_VAR 0 1
36604: PUSH
36605: LD_VAR 0 3
36609: ARRAY
36610: PPUSH
36611: CALL_OW 1
36615: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36616: LD_ADDR_VAR 0 1
36620: PUSH
36621: LD_VAR 0 1
36625: PPUSH
36626: LD_VAR 0 3
36630: PPUSH
36631: LD_VAR 0 5
36635: PPUSH
36636: CALL_OW 1
36640: ST_TO_ADDR
// result := list ;
36641: LD_ADDR_VAR 0 4
36645: PUSH
36646: LD_VAR 0 1
36650: ST_TO_ADDR
// end ;
36651: LD_VAR 0 4
36655: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36656: LD_INT 0
36658: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36659: LD_ADDR_VAR 0 5
36663: PUSH
36664: LD_VAR 0 1
36668: PPUSH
36669: CALL_OW 250
36673: PPUSH
36674: LD_VAR 0 1
36678: PPUSH
36679: CALL_OW 251
36683: PPUSH
36684: LD_VAR 0 2
36688: PPUSH
36689: LD_VAR 0 3
36693: PPUSH
36694: LD_VAR 0 4
36698: PPUSH
36699: CALL 36709 0 5
36703: ST_TO_ADDR
// end ;
36704: LD_VAR 0 5
36708: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36709: LD_INT 0
36711: PPUSH
36712: PPUSH
36713: PPUSH
36714: PPUSH
// if not list then
36715: LD_VAR 0 3
36719: NOT
36720: IFFALSE 36724
// exit ;
36722: GO 37112
// result := [ ] ;
36724: LD_ADDR_VAR 0 6
36728: PUSH
36729: EMPTY
36730: ST_TO_ADDR
// for i in list do
36731: LD_ADDR_VAR 0 7
36735: PUSH
36736: LD_VAR 0 3
36740: PUSH
36741: FOR_IN
36742: IFFALSE 36944
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36744: LD_ADDR_VAR 0 9
36748: PUSH
36749: LD_VAR 0 7
36753: PPUSH
36754: LD_VAR 0 1
36758: PPUSH
36759: LD_VAR 0 2
36763: PPUSH
36764: CALL_OW 297
36768: ST_TO_ADDR
// if not result then
36769: LD_VAR 0 6
36773: NOT
36774: IFFALSE 36800
// result := [ [ i , tmp ] ] else
36776: LD_ADDR_VAR 0 6
36780: PUSH
36781: LD_VAR 0 7
36785: PUSH
36786: LD_VAR 0 9
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: EMPTY
36796: LIST
36797: ST_TO_ADDR
36798: GO 36942
// begin if result [ result ] [ 2 ] < tmp then
36800: LD_VAR 0 6
36804: PUSH
36805: LD_VAR 0 6
36809: ARRAY
36810: PUSH
36811: LD_INT 2
36813: ARRAY
36814: PUSH
36815: LD_VAR 0 9
36819: LESS
36820: IFFALSE 36862
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36822: LD_ADDR_VAR 0 6
36826: PUSH
36827: LD_VAR 0 6
36831: PPUSH
36832: LD_VAR 0 6
36836: PUSH
36837: LD_INT 1
36839: PLUS
36840: PPUSH
36841: LD_VAR 0 7
36845: PUSH
36846: LD_VAR 0 9
36850: PUSH
36851: EMPTY
36852: LIST
36853: LIST
36854: PPUSH
36855: CALL_OW 2
36859: ST_TO_ADDR
36860: GO 36942
// for j = 1 to result do
36862: LD_ADDR_VAR 0 8
36866: PUSH
36867: DOUBLE
36868: LD_INT 1
36870: DEC
36871: ST_TO_ADDR
36872: LD_VAR 0 6
36876: PUSH
36877: FOR_TO
36878: IFFALSE 36940
// begin if tmp < result [ j ] [ 2 ] then
36880: LD_VAR 0 9
36884: PUSH
36885: LD_VAR 0 6
36889: PUSH
36890: LD_VAR 0 8
36894: ARRAY
36895: PUSH
36896: LD_INT 2
36898: ARRAY
36899: LESS
36900: IFFALSE 36938
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36902: LD_ADDR_VAR 0 6
36906: PUSH
36907: LD_VAR 0 6
36911: PPUSH
36912: LD_VAR 0 8
36916: PPUSH
36917: LD_VAR 0 7
36921: PUSH
36922: LD_VAR 0 9
36926: PUSH
36927: EMPTY
36928: LIST
36929: LIST
36930: PPUSH
36931: CALL_OW 2
36935: ST_TO_ADDR
// break ;
36936: GO 36940
// end ; end ;
36938: GO 36877
36940: POP
36941: POP
// end ; end ;
36942: GO 36741
36944: POP
36945: POP
// if result and not asc then
36946: LD_VAR 0 6
36950: PUSH
36951: LD_VAR 0 4
36955: NOT
36956: AND
36957: IFFALSE 37032
// begin tmp := result ;
36959: LD_ADDR_VAR 0 9
36963: PUSH
36964: LD_VAR 0 6
36968: ST_TO_ADDR
// for i = tmp downto 1 do
36969: LD_ADDR_VAR 0 7
36973: PUSH
36974: DOUBLE
36975: LD_VAR 0 9
36979: INC
36980: ST_TO_ADDR
36981: LD_INT 1
36983: PUSH
36984: FOR_DOWNTO
36985: IFFALSE 37030
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36987: LD_ADDR_VAR 0 6
36991: PUSH
36992: LD_VAR 0 6
36996: PPUSH
36997: LD_VAR 0 9
37001: PUSH
37002: LD_VAR 0 7
37006: MINUS
37007: PUSH
37008: LD_INT 1
37010: PLUS
37011: PPUSH
37012: LD_VAR 0 9
37016: PUSH
37017: LD_VAR 0 7
37021: ARRAY
37022: PPUSH
37023: CALL_OW 1
37027: ST_TO_ADDR
37028: GO 36984
37030: POP
37031: POP
// end ; tmp := [ ] ;
37032: LD_ADDR_VAR 0 9
37036: PUSH
37037: EMPTY
37038: ST_TO_ADDR
// if mode then
37039: LD_VAR 0 5
37043: IFFALSE 37112
// begin for i = 1 to result do
37045: LD_ADDR_VAR 0 7
37049: PUSH
37050: DOUBLE
37051: LD_INT 1
37053: DEC
37054: ST_TO_ADDR
37055: LD_VAR 0 6
37059: PUSH
37060: FOR_TO
37061: IFFALSE 37100
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37063: LD_ADDR_VAR 0 9
37067: PUSH
37068: LD_VAR 0 9
37072: PPUSH
37073: LD_VAR 0 7
37077: PPUSH
37078: LD_VAR 0 6
37082: PUSH
37083: LD_VAR 0 7
37087: ARRAY
37088: PUSH
37089: LD_INT 1
37091: ARRAY
37092: PPUSH
37093: CALL_OW 1
37097: ST_TO_ADDR
37098: GO 37060
37100: POP
37101: POP
// result := tmp ;
37102: LD_ADDR_VAR 0 6
37106: PUSH
37107: LD_VAR 0 9
37111: ST_TO_ADDR
// end ; end ;
37112: LD_VAR 0 6
37116: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37117: LD_INT 0
37119: PPUSH
37120: PPUSH
37121: PPUSH
37122: PPUSH
37123: PPUSH
37124: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37125: LD_ADDR_VAR 0 5
37129: PUSH
37130: LD_INT 0
37132: PUSH
37133: LD_INT 0
37135: PUSH
37136: LD_INT 0
37138: PUSH
37139: EMPTY
37140: PUSH
37141: EMPTY
37142: LIST
37143: LIST
37144: LIST
37145: LIST
37146: ST_TO_ADDR
// if not x or not y then
37147: LD_VAR 0 2
37151: NOT
37152: PUSH
37153: LD_VAR 0 3
37157: NOT
37158: OR
37159: IFFALSE 37163
// exit ;
37161: GO 38813
// if not range then
37163: LD_VAR 0 4
37167: NOT
37168: IFFALSE 37178
// range := 10 ;
37170: LD_ADDR_VAR 0 4
37174: PUSH
37175: LD_INT 10
37177: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37178: LD_ADDR_VAR 0 8
37182: PUSH
37183: LD_INT 81
37185: PUSH
37186: LD_VAR 0 1
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: PUSH
37195: LD_INT 92
37197: PUSH
37198: LD_VAR 0 2
37202: PUSH
37203: LD_VAR 0 3
37207: PUSH
37208: LD_VAR 0 4
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: LIST
37217: LIST
37218: PUSH
37219: LD_INT 3
37221: PUSH
37222: LD_INT 21
37224: PUSH
37225: LD_INT 3
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: LIST
37240: PPUSH
37241: CALL_OW 69
37245: ST_TO_ADDR
// if not tmp then
37246: LD_VAR 0 8
37250: NOT
37251: IFFALSE 37255
// exit ;
37253: GO 38813
// for i in tmp do
37255: LD_ADDR_VAR 0 6
37259: PUSH
37260: LD_VAR 0 8
37264: PUSH
37265: FOR_IN
37266: IFFALSE 38788
// begin points := [ 0 , 0 , 0 ] ;
37268: LD_ADDR_VAR 0 9
37272: PUSH
37273: LD_INT 0
37275: PUSH
37276: LD_INT 0
37278: PUSH
37279: LD_INT 0
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: LIST
37286: ST_TO_ADDR
// bpoints := 1 ;
37287: LD_ADDR_VAR 0 10
37291: PUSH
37292: LD_INT 1
37294: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37295: LD_VAR 0 6
37299: PPUSH
37300: CALL_OW 247
37304: PUSH
37305: LD_INT 1
37307: DOUBLE
37308: EQUAL
37309: IFTRUE 37313
37311: GO 37891
37313: POP
// begin if GetClass ( i ) = 1 then
37314: LD_VAR 0 6
37318: PPUSH
37319: CALL_OW 257
37323: PUSH
37324: LD_INT 1
37326: EQUAL
37327: IFFALSE 37348
// points := [ 10 , 5 , 3 ] ;
37329: LD_ADDR_VAR 0 9
37333: PUSH
37334: LD_INT 10
37336: PUSH
37337: LD_INT 5
37339: PUSH
37340: LD_INT 3
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: LIST
37347: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37348: LD_VAR 0 6
37352: PPUSH
37353: CALL_OW 257
37357: PUSH
37358: LD_INT 2
37360: PUSH
37361: LD_INT 3
37363: PUSH
37364: LD_INT 4
37366: PUSH
37367: EMPTY
37368: LIST
37369: LIST
37370: LIST
37371: IN
37372: IFFALSE 37393
// points := [ 3 , 2 , 1 ] ;
37374: LD_ADDR_VAR 0 9
37378: PUSH
37379: LD_INT 3
37381: PUSH
37382: LD_INT 2
37384: PUSH
37385: LD_INT 1
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: LIST
37392: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37393: LD_VAR 0 6
37397: PPUSH
37398: CALL_OW 257
37402: PUSH
37403: LD_INT 5
37405: EQUAL
37406: IFFALSE 37427
// points := [ 130 , 5 , 2 ] ;
37408: LD_ADDR_VAR 0 9
37412: PUSH
37413: LD_INT 130
37415: PUSH
37416: LD_INT 5
37418: PUSH
37419: LD_INT 2
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: LIST
37426: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37427: LD_VAR 0 6
37431: PPUSH
37432: CALL_OW 257
37436: PUSH
37437: LD_INT 8
37439: EQUAL
37440: IFFALSE 37461
// points := [ 35 , 35 , 30 ] ;
37442: LD_ADDR_VAR 0 9
37446: PUSH
37447: LD_INT 35
37449: PUSH
37450: LD_INT 35
37452: PUSH
37453: LD_INT 30
37455: PUSH
37456: EMPTY
37457: LIST
37458: LIST
37459: LIST
37460: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37461: LD_VAR 0 6
37465: PPUSH
37466: CALL_OW 257
37470: PUSH
37471: LD_INT 9
37473: EQUAL
37474: IFFALSE 37495
// points := [ 20 , 55 , 40 ] ;
37476: LD_ADDR_VAR 0 9
37480: PUSH
37481: LD_INT 20
37483: PUSH
37484: LD_INT 55
37486: PUSH
37487: LD_INT 40
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: LIST
37494: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37495: LD_VAR 0 6
37499: PPUSH
37500: CALL_OW 257
37504: PUSH
37505: LD_INT 12
37507: PUSH
37508: LD_INT 16
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: IN
37515: IFFALSE 37536
// points := [ 5 , 3 , 2 ] ;
37517: LD_ADDR_VAR 0 9
37521: PUSH
37522: LD_INT 5
37524: PUSH
37525: LD_INT 3
37527: PUSH
37528: LD_INT 2
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: LIST
37535: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37536: LD_VAR 0 6
37540: PPUSH
37541: CALL_OW 257
37545: PUSH
37546: LD_INT 17
37548: EQUAL
37549: IFFALSE 37570
// points := [ 100 , 50 , 75 ] ;
37551: LD_ADDR_VAR 0 9
37555: PUSH
37556: LD_INT 100
37558: PUSH
37559: LD_INT 50
37561: PUSH
37562: LD_INT 75
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: LIST
37569: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37570: LD_VAR 0 6
37574: PPUSH
37575: CALL_OW 257
37579: PUSH
37580: LD_INT 15
37582: EQUAL
37583: IFFALSE 37604
// points := [ 10 , 5 , 3 ] ;
37585: LD_ADDR_VAR 0 9
37589: PUSH
37590: LD_INT 10
37592: PUSH
37593: LD_INT 5
37595: PUSH
37596: LD_INT 3
37598: PUSH
37599: EMPTY
37600: LIST
37601: LIST
37602: LIST
37603: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37604: LD_VAR 0 6
37608: PPUSH
37609: CALL_OW 257
37613: PUSH
37614: LD_INT 14
37616: EQUAL
37617: IFFALSE 37638
// points := [ 10 , 0 , 0 ] ;
37619: LD_ADDR_VAR 0 9
37623: PUSH
37624: LD_INT 10
37626: PUSH
37627: LD_INT 0
37629: PUSH
37630: LD_INT 0
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: LIST
37637: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37638: LD_VAR 0 6
37642: PPUSH
37643: CALL_OW 257
37647: PUSH
37648: LD_INT 11
37650: EQUAL
37651: IFFALSE 37672
// points := [ 30 , 10 , 5 ] ;
37653: LD_ADDR_VAR 0 9
37657: PUSH
37658: LD_INT 30
37660: PUSH
37661: LD_INT 10
37663: PUSH
37664: LD_INT 5
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: LIST
37671: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37672: LD_VAR 0 1
37676: PPUSH
37677: LD_INT 5
37679: PPUSH
37680: CALL_OW 321
37684: PUSH
37685: LD_INT 2
37687: EQUAL
37688: IFFALSE 37705
// bpoints := bpoints * 1.8 ;
37690: LD_ADDR_VAR 0 10
37694: PUSH
37695: LD_VAR 0 10
37699: PUSH
37700: LD_REAL  1.80000000000000E+0000
37703: MUL
37704: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37705: LD_VAR 0 6
37709: PPUSH
37710: CALL_OW 257
37714: PUSH
37715: LD_INT 1
37717: PUSH
37718: LD_INT 2
37720: PUSH
37721: LD_INT 3
37723: PUSH
37724: LD_INT 4
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: LIST
37731: LIST
37732: IN
37733: PUSH
37734: LD_VAR 0 1
37738: PPUSH
37739: LD_INT 51
37741: PPUSH
37742: CALL_OW 321
37746: PUSH
37747: LD_INT 2
37749: EQUAL
37750: AND
37751: IFFALSE 37768
// bpoints := bpoints * 1.2 ;
37753: LD_ADDR_VAR 0 10
37757: PUSH
37758: LD_VAR 0 10
37762: PUSH
37763: LD_REAL  1.20000000000000E+0000
37766: MUL
37767: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37768: LD_VAR 0 6
37772: PPUSH
37773: CALL_OW 257
37777: PUSH
37778: LD_INT 5
37780: PUSH
37781: LD_INT 7
37783: PUSH
37784: LD_INT 9
37786: PUSH
37787: EMPTY
37788: LIST
37789: LIST
37790: LIST
37791: IN
37792: PUSH
37793: LD_VAR 0 1
37797: PPUSH
37798: LD_INT 52
37800: PPUSH
37801: CALL_OW 321
37805: PUSH
37806: LD_INT 2
37808: EQUAL
37809: AND
37810: IFFALSE 37827
// bpoints := bpoints * 1.5 ;
37812: LD_ADDR_VAR 0 10
37816: PUSH
37817: LD_VAR 0 10
37821: PUSH
37822: LD_REAL  1.50000000000000E+0000
37825: MUL
37826: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37827: LD_VAR 0 1
37831: PPUSH
37832: LD_INT 66
37834: PPUSH
37835: CALL_OW 321
37839: PUSH
37840: LD_INT 2
37842: EQUAL
37843: IFFALSE 37860
// bpoints := bpoints * 1.1 ;
37845: LD_ADDR_VAR 0 10
37849: PUSH
37850: LD_VAR 0 10
37854: PUSH
37855: LD_REAL  1.10000000000000E+0000
37858: MUL
37859: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37860: LD_ADDR_VAR 0 10
37864: PUSH
37865: LD_VAR 0 10
37869: PUSH
37870: LD_VAR 0 6
37874: PPUSH
37875: LD_INT 1
37877: PPUSH
37878: CALL_OW 259
37882: PUSH
37883: LD_REAL  1.15000000000000E+0000
37886: MUL
37887: MUL
37888: ST_TO_ADDR
// end ; unit_vehicle :
37889: GO 38717
37891: LD_INT 2
37893: DOUBLE
37894: EQUAL
37895: IFTRUE 37899
37897: GO 38705
37899: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37900: LD_VAR 0 6
37904: PPUSH
37905: CALL_OW 264
37909: PUSH
37910: LD_INT 2
37912: PUSH
37913: LD_INT 42
37915: PUSH
37916: LD_INT 24
37918: PUSH
37919: EMPTY
37920: LIST
37921: LIST
37922: LIST
37923: IN
37924: IFFALSE 37945
// points := [ 25 , 5 , 3 ] ;
37926: LD_ADDR_VAR 0 9
37930: PUSH
37931: LD_INT 25
37933: PUSH
37934: LD_INT 5
37936: PUSH
37937: LD_INT 3
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: LIST
37944: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37945: LD_VAR 0 6
37949: PPUSH
37950: CALL_OW 264
37954: PUSH
37955: LD_INT 4
37957: PUSH
37958: LD_INT 43
37960: PUSH
37961: LD_INT 25
37963: PUSH
37964: EMPTY
37965: LIST
37966: LIST
37967: LIST
37968: IN
37969: IFFALSE 37990
// points := [ 40 , 15 , 5 ] ;
37971: LD_ADDR_VAR 0 9
37975: PUSH
37976: LD_INT 40
37978: PUSH
37979: LD_INT 15
37981: PUSH
37982: LD_INT 5
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: LIST
37989: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37990: LD_VAR 0 6
37994: PPUSH
37995: CALL_OW 264
37999: PUSH
38000: LD_INT 3
38002: PUSH
38003: LD_INT 23
38005: PUSH
38006: EMPTY
38007: LIST
38008: LIST
38009: IN
38010: IFFALSE 38031
// points := [ 7 , 25 , 8 ] ;
38012: LD_ADDR_VAR 0 9
38016: PUSH
38017: LD_INT 7
38019: PUSH
38020: LD_INT 25
38022: PUSH
38023: LD_INT 8
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: LIST
38030: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
38031: LD_VAR 0 6
38035: PPUSH
38036: CALL_OW 264
38040: PUSH
38041: LD_INT 5
38043: PUSH
38044: LD_INT 27
38046: PUSH
38047: LD_INT 44
38049: PUSH
38050: EMPTY
38051: LIST
38052: LIST
38053: LIST
38054: IN
38055: IFFALSE 38076
// points := [ 14 , 50 , 16 ] ;
38057: LD_ADDR_VAR 0 9
38061: PUSH
38062: LD_INT 14
38064: PUSH
38065: LD_INT 50
38067: PUSH
38068: LD_INT 16
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: LIST
38075: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38076: LD_VAR 0 6
38080: PPUSH
38081: CALL_OW 264
38085: PUSH
38086: LD_INT 6
38088: PUSH
38089: LD_INT 46
38091: PUSH
38092: EMPTY
38093: LIST
38094: LIST
38095: IN
38096: IFFALSE 38117
// points := [ 32 , 120 , 70 ] ;
38098: LD_ADDR_VAR 0 9
38102: PUSH
38103: LD_INT 32
38105: PUSH
38106: LD_INT 120
38108: PUSH
38109: LD_INT 70
38111: PUSH
38112: EMPTY
38113: LIST
38114: LIST
38115: LIST
38116: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
38117: LD_VAR 0 6
38121: PPUSH
38122: CALL_OW 264
38126: PUSH
38127: LD_INT 7
38129: PUSH
38130: LD_INT 28
38132: PUSH
38133: LD_INT 45
38135: PUSH
38136: LD_INT 92
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: IN
38145: IFFALSE 38166
// points := [ 35 , 20 , 45 ] ;
38147: LD_ADDR_VAR 0 9
38151: PUSH
38152: LD_INT 35
38154: PUSH
38155: LD_INT 20
38157: PUSH
38158: LD_INT 45
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: LIST
38165: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38166: LD_VAR 0 6
38170: PPUSH
38171: CALL_OW 264
38175: PUSH
38176: LD_INT 47
38178: PUSH
38179: EMPTY
38180: LIST
38181: IN
38182: IFFALSE 38203
// points := [ 67 , 45 , 75 ] ;
38184: LD_ADDR_VAR 0 9
38188: PUSH
38189: LD_INT 67
38191: PUSH
38192: LD_INT 45
38194: PUSH
38195: LD_INT 75
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: LIST
38202: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38203: LD_VAR 0 6
38207: PPUSH
38208: CALL_OW 264
38212: PUSH
38213: LD_INT 26
38215: PUSH
38216: EMPTY
38217: LIST
38218: IN
38219: IFFALSE 38240
// points := [ 120 , 30 , 80 ] ;
38221: LD_ADDR_VAR 0 9
38225: PUSH
38226: LD_INT 120
38228: PUSH
38229: LD_INT 30
38231: PUSH
38232: LD_INT 80
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: LIST
38239: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38240: LD_VAR 0 6
38244: PPUSH
38245: CALL_OW 264
38249: PUSH
38250: LD_INT 22
38252: PUSH
38253: EMPTY
38254: LIST
38255: IN
38256: IFFALSE 38277
// points := [ 40 , 1 , 1 ] ;
38258: LD_ADDR_VAR 0 9
38262: PUSH
38263: LD_INT 40
38265: PUSH
38266: LD_INT 1
38268: PUSH
38269: LD_INT 1
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: LIST
38276: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38277: LD_VAR 0 6
38281: PPUSH
38282: CALL_OW 264
38286: PUSH
38287: LD_INT 29
38289: PUSH
38290: EMPTY
38291: LIST
38292: IN
38293: IFFALSE 38314
// points := [ 70 , 200 , 400 ] ;
38295: LD_ADDR_VAR 0 9
38299: PUSH
38300: LD_INT 70
38302: PUSH
38303: LD_INT 200
38305: PUSH
38306: LD_INT 400
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: LIST
38313: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38314: LD_VAR 0 6
38318: PPUSH
38319: CALL_OW 264
38323: PUSH
38324: LD_INT 14
38326: PUSH
38327: LD_INT 53
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: IN
38334: IFFALSE 38355
// points := [ 40 , 10 , 20 ] ;
38336: LD_ADDR_VAR 0 9
38340: PUSH
38341: LD_INT 40
38343: PUSH
38344: LD_INT 10
38346: PUSH
38347: LD_INT 20
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: LIST
38354: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38355: LD_VAR 0 6
38359: PPUSH
38360: CALL_OW 264
38364: PUSH
38365: LD_INT 9
38367: PUSH
38368: EMPTY
38369: LIST
38370: IN
38371: IFFALSE 38392
// points := [ 5 , 70 , 20 ] ;
38373: LD_ADDR_VAR 0 9
38377: PUSH
38378: LD_INT 5
38380: PUSH
38381: LD_INT 70
38383: PUSH
38384: LD_INT 20
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: LIST
38391: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38392: LD_VAR 0 6
38396: PPUSH
38397: CALL_OW 264
38401: PUSH
38402: LD_INT 10
38404: PUSH
38405: EMPTY
38406: LIST
38407: IN
38408: IFFALSE 38429
// points := [ 35 , 110 , 70 ] ;
38410: LD_ADDR_VAR 0 9
38414: PUSH
38415: LD_INT 35
38417: PUSH
38418: LD_INT 110
38420: PUSH
38421: LD_INT 70
38423: PUSH
38424: EMPTY
38425: LIST
38426: LIST
38427: LIST
38428: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38429: LD_VAR 0 6
38433: PPUSH
38434: CALL_OW 265
38438: PUSH
38439: LD_INT 25
38441: EQUAL
38442: IFFALSE 38463
// points := [ 80 , 65 , 100 ] ;
38444: LD_ADDR_VAR 0 9
38448: PUSH
38449: LD_INT 80
38451: PUSH
38452: LD_INT 65
38454: PUSH
38455: LD_INT 100
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: LIST
38462: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38463: LD_VAR 0 6
38467: PPUSH
38468: CALL_OW 263
38472: PUSH
38473: LD_INT 1
38475: EQUAL
38476: IFFALSE 38511
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38478: LD_ADDR_VAR 0 10
38482: PUSH
38483: LD_VAR 0 10
38487: PUSH
38488: LD_VAR 0 6
38492: PPUSH
38493: CALL_OW 311
38497: PPUSH
38498: LD_INT 3
38500: PPUSH
38501: CALL_OW 259
38505: PUSH
38506: LD_INT 4
38508: MUL
38509: MUL
38510: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38511: LD_VAR 0 6
38515: PPUSH
38516: CALL_OW 263
38520: PUSH
38521: LD_INT 2
38523: EQUAL
38524: IFFALSE 38575
// begin j := IsControledBy ( i ) ;
38526: LD_ADDR_VAR 0 7
38530: PUSH
38531: LD_VAR 0 6
38535: PPUSH
38536: CALL_OW 312
38540: ST_TO_ADDR
// if j then
38541: LD_VAR 0 7
38545: IFFALSE 38575
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38547: LD_ADDR_VAR 0 10
38551: PUSH
38552: LD_VAR 0 10
38556: PUSH
38557: LD_VAR 0 7
38561: PPUSH
38562: LD_INT 3
38564: PPUSH
38565: CALL_OW 259
38569: PUSH
38570: LD_INT 3
38572: MUL
38573: MUL
38574: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38575: LD_VAR 0 6
38579: PPUSH
38580: CALL_OW 264
38584: PUSH
38585: LD_INT 5
38587: PUSH
38588: LD_INT 6
38590: PUSH
38591: LD_INT 46
38593: PUSH
38594: LD_INT 44
38596: PUSH
38597: LD_INT 47
38599: PUSH
38600: LD_INT 45
38602: PUSH
38603: LD_INT 28
38605: PUSH
38606: LD_INT 7
38608: PUSH
38609: LD_INT 27
38611: PUSH
38612: LD_INT 29
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: LIST
38623: LIST
38624: LIST
38625: LIST
38626: IN
38627: PUSH
38628: LD_VAR 0 1
38632: PPUSH
38633: LD_INT 52
38635: PPUSH
38636: CALL_OW 321
38640: PUSH
38641: LD_INT 2
38643: EQUAL
38644: AND
38645: IFFALSE 38662
// bpoints := bpoints * 1.2 ;
38647: LD_ADDR_VAR 0 10
38651: PUSH
38652: LD_VAR 0 10
38656: PUSH
38657: LD_REAL  1.20000000000000E+0000
38660: MUL
38661: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38662: LD_VAR 0 6
38666: PPUSH
38667: CALL_OW 264
38671: PUSH
38672: LD_INT 6
38674: PUSH
38675: LD_INT 46
38677: PUSH
38678: LD_INT 47
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: LIST
38685: IN
38686: IFFALSE 38703
// bpoints := bpoints * 1.2 ;
38688: LD_ADDR_VAR 0 10
38692: PUSH
38693: LD_VAR 0 10
38697: PUSH
38698: LD_REAL  1.20000000000000E+0000
38701: MUL
38702: ST_TO_ADDR
// end ; unit_building :
38703: GO 38717
38705: LD_INT 3
38707: DOUBLE
38708: EQUAL
38709: IFTRUE 38713
38711: GO 38716
38713: POP
// ; end ;
38714: GO 38717
38716: POP
// for j = 1 to 3 do
38717: LD_ADDR_VAR 0 7
38721: PUSH
38722: DOUBLE
38723: LD_INT 1
38725: DEC
38726: ST_TO_ADDR
38727: LD_INT 3
38729: PUSH
38730: FOR_TO
38731: IFFALSE 38784
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38733: LD_ADDR_VAR 0 5
38737: PUSH
38738: LD_VAR 0 5
38742: PPUSH
38743: LD_VAR 0 7
38747: PPUSH
38748: LD_VAR 0 5
38752: PUSH
38753: LD_VAR 0 7
38757: ARRAY
38758: PUSH
38759: LD_VAR 0 9
38763: PUSH
38764: LD_VAR 0 7
38768: ARRAY
38769: PUSH
38770: LD_VAR 0 10
38774: MUL
38775: PLUS
38776: PPUSH
38777: CALL_OW 1
38781: ST_TO_ADDR
38782: GO 38730
38784: POP
38785: POP
// end ;
38786: GO 37265
38788: POP
38789: POP
// result := Replace ( result , 4 , tmp ) ;
38790: LD_ADDR_VAR 0 5
38794: PUSH
38795: LD_VAR 0 5
38799: PPUSH
38800: LD_INT 4
38802: PPUSH
38803: LD_VAR 0 8
38807: PPUSH
38808: CALL_OW 1
38812: ST_TO_ADDR
// end ;
38813: LD_VAR 0 5
38817: RET
// export function DangerAtRange ( unit , range ) ; begin
38818: LD_INT 0
38820: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38821: LD_ADDR_VAR 0 3
38825: PUSH
38826: LD_VAR 0 1
38830: PPUSH
38831: CALL_OW 255
38835: PPUSH
38836: LD_VAR 0 1
38840: PPUSH
38841: CALL_OW 250
38845: PPUSH
38846: LD_VAR 0 1
38850: PPUSH
38851: CALL_OW 251
38855: PPUSH
38856: LD_VAR 0 2
38860: PPUSH
38861: CALL 37117 0 4
38865: ST_TO_ADDR
// end ;
38866: LD_VAR 0 3
38870: RET
// export function DangerInArea ( side , area ) ; begin
38871: LD_INT 0
38873: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38874: LD_ADDR_VAR 0 3
38878: PUSH
38879: LD_VAR 0 2
38883: PPUSH
38884: LD_INT 81
38886: PUSH
38887: LD_VAR 0 1
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: PPUSH
38896: CALL_OW 70
38900: ST_TO_ADDR
// end ;
38901: LD_VAR 0 3
38905: RET
// export function IsExtension ( b ) ; begin
38906: LD_INT 0
38908: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38909: LD_ADDR_VAR 0 2
38913: PUSH
38914: LD_VAR 0 1
38918: PUSH
38919: LD_INT 23
38921: PUSH
38922: LD_INT 20
38924: PUSH
38925: LD_INT 22
38927: PUSH
38928: LD_INT 17
38930: PUSH
38931: LD_INT 24
38933: PUSH
38934: LD_INT 21
38936: PUSH
38937: LD_INT 19
38939: PUSH
38940: LD_INT 16
38942: PUSH
38943: LD_INT 25
38945: PUSH
38946: LD_INT 18
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: IN
38961: ST_TO_ADDR
// end ;
38962: LD_VAR 0 2
38966: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38967: LD_INT 0
38969: PPUSH
38970: PPUSH
38971: PPUSH
// result := [ ] ;
38972: LD_ADDR_VAR 0 4
38976: PUSH
38977: EMPTY
38978: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38979: LD_ADDR_VAR 0 5
38983: PUSH
38984: LD_VAR 0 2
38988: PPUSH
38989: LD_INT 21
38991: PUSH
38992: LD_INT 3
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: PPUSH
38999: CALL_OW 70
39003: ST_TO_ADDR
// if not tmp then
39004: LD_VAR 0 5
39008: NOT
39009: IFFALSE 39013
// exit ;
39011: GO 39077
// if checkLink then
39013: LD_VAR 0 3
39017: IFFALSE 39067
// begin for i in tmp do
39019: LD_ADDR_VAR 0 6
39023: PUSH
39024: LD_VAR 0 5
39028: PUSH
39029: FOR_IN
39030: IFFALSE 39065
// if GetBase ( i ) <> base then
39032: LD_VAR 0 6
39036: PPUSH
39037: CALL_OW 274
39041: PUSH
39042: LD_VAR 0 1
39046: NONEQUAL
39047: IFFALSE 39063
// ComLinkToBase ( base , i ) ;
39049: LD_VAR 0 1
39053: PPUSH
39054: LD_VAR 0 6
39058: PPUSH
39059: CALL_OW 169
39063: GO 39029
39065: POP
39066: POP
// end ; result := tmp ;
39067: LD_ADDR_VAR 0 4
39071: PUSH
39072: LD_VAR 0 5
39076: ST_TO_ADDR
// end ;
39077: LD_VAR 0 4
39081: RET
// export function ComComplete ( units , b ) ; var i ; begin
39082: LD_INT 0
39084: PPUSH
39085: PPUSH
// if not units then
39086: LD_VAR 0 1
39090: NOT
39091: IFFALSE 39095
// exit ;
39093: GO 39185
// for i in units do
39095: LD_ADDR_VAR 0 4
39099: PUSH
39100: LD_VAR 0 1
39104: PUSH
39105: FOR_IN
39106: IFFALSE 39183
// if BuildingStatus ( b ) = bs_build then
39108: LD_VAR 0 2
39112: PPUSH
39113: CALL_OW 461
39117: PUSH
39118: LD_INT 1
39120: EQUAL
39121: IFFALSE 39181
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39123: LD_VAR 0 4
39127: PPUSH
39128: LD_STRING h
39130: PUSH
39131: LD_VAR 0 2
39135: PPUSH
39136: CALL_OW 250
39140: PUSH
39141: LD_VAR 0 2
39145: PPUSH
39146: CALL_OW 251
39150: PUSH
39151: LD_VAR 0 2
39155: PUSH
39156: LD_INT 0
39158: PUSH
39159: LD_INT 0
39161: PUSH
39162: LD_INT 0
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: PUSH
39174: EMPTY
39175: LIST
39176: PPUSH
39177: CALL_OW 446
39181: GO 39105
39183: POP
39184: POP
// end ;
39185: LD_VAR 0 3
39189: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39190: LD_INT 0
39192: PPUSH
39193: PPUSH
39194: PPUSH
39195: PPUSH
39196: PPUSH
39197: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
39198: LD_VAR 0 1
39202: NOT
39203: PUSH
39204: LD_VAR 0 1
39208: PPUSH
39209: CALL_OW 263
39213: PUSH
39214: LD_INT 2
39216: NONEQUAL
39217: OR
39218: IFFALSE 39222
// exit ;
39220: GO 39538
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39222: LD_ADDR_VAR 0 6
39226: PUSH
39227: LD_INT 22
39229: PUSH
39230: LD_VAR 0 1
39234: PPUSH
39235: CALL_OW 255
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: PUSH
39244: LD_INT 2
39246: PUSH
39247: LD_INT 30
39249: PUSH
39250: LD_INT 36
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: PUSH
39257: LD_INT 34
39259: PUSH
39260: LD_INT 31
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: LIST
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: PPUSH
39276: CALL_OW 69
39280: ST_TO_ADDR
// if not tmp then
39281: LD_VAR 0 6
39285: NOT
39286: IFFALSE 39290
// exit ;
39288: GO 39538
// result := [ ] ;
39290: LD_ADDR_VAR 0 2
39294: PUSH
39295: EMPTY
39296: ST_TO_ADDR
// for i in tmp do
39297: LD_ADDR_VAR 0 3
39301: PUSH
39302: LD_VAR 0 6
39306: PUSH
39307: FOR_IN
39308: IFFALSE 39379
// begin t := UnitsInside ( i ) ;
39310: LD_ADDR_VAR 0 4
39314: PUSH
39315: LD_VAR 0 3
39319: PPUSH
39320: CALL_OW 313
39324: ST_TO_ADDR
// if t then
39325: LD_VAR 0 4
39329: IFFALSE 39377
// for j in t do
39331: LD_ADDR_VAR 0 7
39335: PUSH
39336: LD_VAR 0 4
39340: PUSH
39341: FOR_IN
39342: IFFALSE 39375
// result := Replace ( result , result + 1 , j ) ;
39344: LD_ADDR_VAR 0 2
39348: PUSH
39349: LD_VAR 0 2
39353: PPUSH
39354: LD_VAR 0 2
39358: PUSH
39359: LD_INT 1
39361: PLUS
39362: PPUSH
39363: LD_VAR 0 7
39367: PPUSH
39368: CALL_OW 1
39372: ST_TO_ADDR
39373: GO 39341
39375: POP
39376: POP
// end ;
39377: GO 39307
39379: POP
39380: POP
// if not result then
39381: LD_VAR 0 2
39385: NOT
39386: IFFALSE 39390
// exit ;
39388: GO 39538
// mech := result [ 1 ] ;
39390: LD_ADDR_VAR 0 5
39394: PUSH
39395: LD_VAR 0 2
39399: PUSH
39400: LD_INT 1
39402: ARRAY
39403: ST_TO_ADDR
// if result > 1 then
39404: LD_VAR 0 2
39408: PUSH
39409: LD_INT 1
39411: GREATER
39412: IFFALSE 39524
// begin for i = 2 to result do
39414: LD_ADDR_VAR 0 3
39418: PUSH
39419: DOUBLE
39420: LD_INT 2
39422: DEC
39423: ST_TO_ADDR
39424: LD_VAR 0 2
39428: PUSH
39429: FOR_TO
39430: IFFALSE 39522
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39432: LD_ADDR_VAR 0 4
39436: PUSH
39437: LD_VAR 0 2
39441: PUSH
39442: LD_VAR 0 3
39446: ARRAY
39447: PPUSH
39448: LD_INT 3
39450: PPUSH
39451: CALL_OW 259
39455: PUSH
39456: LD_VAR 0 2
39460: PUSH
39461: LD_VAR 0 3
39465: ARRAY
39466: PPUSH
39467: CALL_OW 432
39471: MINUS
39472: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39473: LD_VAR 0 4
39477: PUSH
39478: LD_VAR 0 5
39482: PPUSH
39483: LD_INT 3
39485: PPUSH
39486: CALL_OW 259
39490: PUSH
39491: LD_VAR 0 5
39495: PPUSH
39496: CALL_OW 432
39500: MINUS
39501: GREATEREQUAL
39502: IFFALSE 39520
// mech := result [ i ] ;
39504: LD_ADDR_VAR 0 5
39508: PUSH
39509: LD_VAR 0 2
39513: PUSH
39514: LD_VAR 0 3
39518: ARRAY
39519: ST_TO_ADDR
// end ;
39520: GO 39429
39522: POP
39523: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39524: LD_VAR 0 1
39528: PPUSH
39529: LD_VAR 0 5
39533: PPUSH
39534: CALL_OW 135
// end ;
39538: LD_VAR 0 2
39542: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39543: LD_INT 0
39545: PPUSH
39546: PPUSH
39547: PPUSH
39548: PPUSH
39549: PPUSH
39550: PPUSH
39551: PPUSH
39552: PPUSH
39553: PPUSH
39554: PPUSH
39555: PPUSH
39556: PPUSH
39557: PPUSH
// result := [ ] ;
39558: LD_ADDR_VAR 0 7
39562: PUSH
39563: EMPTY
39564: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39565: LD_VAR 0 1
39569: PPUSH
39570: CALL_OW 266
39574: PUSH
39575: LD_INT 0
39577: PUSH
39578: LD_INT 1
39580: PUSH
39581: EMPTY
39582: LIST
39583: LIST
39584: IN
39585: NOT
39586: IFFALSE 39590
// exit ;
39588: GO 41224
// if name then
39590: LD_VAR 0 3
39594: IFFALSE 39610
// SetBName ( base_dep , name ) ;
39596: LD_VAR 0 1
39600: PPUSH
39601: LD_VAR 0 3
39605: PPUSH
39606: CALL_OW 500
// base := GetBase ( base_dep ) ;
39610: LD_ADDR_VAR 0 15
39614: PUSH
39615: LD_VAR 0 1
39619: PPUSH
39620: CALL_OW 274
39624: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39625: LD_ADDR_VAR 0 16
39629: PUSH
39630: LD_VAR 0 1
39634: PPUSH
39635: CALL_OW 255
39639: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39640: LD_ADDR_VAR 0 17
39644: PUSH
39645: LD_VAR 0 1
39649: PPUSH
39650: CALL_OW 248
39654: ST_TO_ADDR
// if sources then
39655: LD_VAR 0 5
39659: IFFALSE 39706
// for i = 1 to 3 do
39661: LD_ADDR_VAR 0 8
39665: PUSH
39666: DOUBLE
39667: LD_INT 1
39669: DEC
39670: ST_TO_ADDR
39671: LD_INT 3
39673: PUSH
39674: FOR_TO
39675: IFFALSE 39704
// AddResourceType ( base , i , sources [ i ] ) ;
39677: LD_VAR 0 15
39681: PPUSH
39682: LD_VAR 0 8
39686: PPUSH
39687: LD_VAR 0 5
39691: PUSH
39692: LD_VAR 0 8
39696: ARRAY
39697: PPUSH
39698: CALL_OW 276
39702: GO 39674
39704: POP
39705: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39706: LD_ADDR_VAR 0 18
39710: PUSH
39711: LD_VAR 0 15
39715: PPUSH
39716: LD_VAR 0 2
39720: PPUSH
39721: LD_INT 1
39723: PPUSH
39724: CALL 38967 0 3
39728: ST_TO_ADDR
// InitHc ;
39729: CALL_OW 19
// InitUc ;
39733: CALL_OW 18
// uc_side := side ;
39737: LD_ADDR_OWVAR 20
39741: PUSH
39742: LD_VAR 0 16
39746: ST_TO_ADDR
// uc_nation := nation ;
39747: LD_ADDR_OWVAR 21
39751: PUSH
39752: LD_VAR 0 17
39756: ST_TO_ADDR
// if buildings then
39757: LD_VAR 0 18
39761: IFFALSE 41083
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39763: LD_ADDR_VAR 0 19
39767: PUSH
39768: LD_VAR 0 18
39772: PPUSH
39773: LD_INT 2
39775: PUSH
39776: LD_INT 30
39778: PUSH
39779: LD_INT 29
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: PUSH
39786: LD_INT 30
39788: PUSH
39789: LD_INT 30
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: LIST
39800: PPUSH
39801: CALL_OW 72
39805: ST_TO_ADDR
// if tmp then
39806: LD_VAR 0 19
39810: IFFALSE 39858
// for i in tmp do
39812: LD_ADDR_VAR 0 8
39816: PUSH
39817: LD_VAR 0 19
39821: PUSH
39822: FOR_IN
39823: IFFALSE 39856
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39825: LD_VAR 0 8
39829: PPUSH
39830: CALL_OW 250
39834: PPUSH
39835: LD_VAR 0 8
39839: PPUSH
39840: CALL_OW 251
39844: PPUSH
39845: LD_VAR 0 16
39849: PPUSH
39850: CALL_OW 441
39854: GO 39822
39856: POP
39857: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39858: LD_VAR 0 18
39862: PPUSH
39863: LD_INT 2
39865: PUSH
39866: LD_INT 30
39868: PUSH
39869: LD_INT 32
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: PUSH
39876: LD_INT 30
39878: PUSH
39879: LD_INT 33
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: LIST
39890: PPUSH
39891: CALL_OW 72
39895: IFFALSE 39983
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39897: LD_ADDR_VAR 0 8
39901: PUSH
39902: LD_VAR 0 18
39906: PPUSH
39907: LD_INT 2
39909: PUSH
39910: LD_INT 30
39912: PUSH
39913: LD_INT 32
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 30
39922: PUSH
39923: LD_INT 33
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: LIST
39934: PPUSH
39935: CALL_OW 72
39939: PUSH
39940: FOR_IN
39941: IFFALSE 39981
// begin if not GetBWeapon ( i ) then
39943: LD_VAR 0 8
39947: PPUSH
39948: CALL_OW 269
39952: NOT
39953: IFFALSE 39979
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39955: LD_VAR 0 8
39959: PPUSH
39960: LD_VAR 0 8
39964: PPUSH
39965: LD_VAR 0 2
39969: PPUSH
39970: CALL 41229 0 2
39974: PPUSH
39975: CALL_OW 431
// end ;
39979: GO 39940
39981: POP
39982: POP
// end ; for i = 1 to personel do
39983: LD_ADDR_VAR 0 8
39987: PUSH
39988: DOUBLE
39989: LD_INT 1
39991: DEC
39992: ST_TO_ADDR
39993: LD_VAR 0 6
39997: PUSH
39998: FOR_TO
39999: IFFALSE 41063
// begin if i > 4 then
40001: LD_VAR 0 8
40005: PUSH
40006: LD_INT 4
40008: GREATER
40009: IFFALSE 40013
// break ;
40011: GO 41063
// case i of 1 :
40013: LD_VAR 0 8
40017: PUSH
40018: LD_INT 1
40020: DOUBLE
40021: EQUAL
40022: IFTRUE 40026
40024: GO 40106
40026: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40027: LD_ADDR_VAR 0 12
40031: PUSH
40032: LD_VAR 0 18
40036: PPUSH
40037: LD_INT 22
40039: PUSH
40040: LD_VAR 0 16
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: PUSH
40049: LD_INT 58
40051: PUSH
40052: EMPTY
40053: LIST
40054: PUSH
40055: LD_INT 2
40057: PUSH
40058: LD_INT 30
40060: PUSH
40061: LD_INT 32
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: PUSH
40068: LD_INT 30
40070: PUSH
40071: LD_INT 4
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: PUSH
40078: LD_INT 30
40080: PUSH
40081: LD_INT 5
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: LIST
40098: PPUSH
40099: CALL_OW 72
40103: ST_TO_ADDR
40104: GO 40328
40106: LD_INT 2
40108: DOUBLE
40109: EQUAL
40110: IFTRUE 40114
40112: GO 40176
40114: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40115: LD_ADDR_VAR 0 12
40119: PUSH
40120: LD_VAR 0 18
40124: PPUSH
40125: LD_INT 22
40127: PUSH
40128: LD_VAR 0 16
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: PUSH
40137: LD_INT 2
40139: PUSH
40140: LD_INT 30
40142: PUSH
40143: LD_INT 0
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 30
40152: PUSH
40153: LD_INT 1
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: LIST
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: PPUSH
40169: CALL_OW 72
40173: ST_TO_ADDR
40174: GO 40328
40176: LD_INT 3
40178: DOUBLE
40179: EQUAL
40180: IFTRUE 40184
40182: GO 40246
40184: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40185: LD_ADDR_VAR 0 12
40189: PUSH
40190: LD_VAR 0 18
40194: PPUSH
40195: LD_INT 22
40197: PUSH
40198: LD_VAR 0 16
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: PUSH
40207: LD_INT 2
40209: PUSH
40210: LD_INT 30
40212: PUSH
40213: LD_INT 2
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: PUSH
40220: LD_INT 30
40222: PUSH
40223: LD_INT 3
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: LIST
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PPUSH
40239: CALL_OW 72
40243: ST_TO_ADDR
40244: GO 40328
40246: LD_INT 4
40248: DOUBLE
40249: EQUAL
40250: IFTRUE 40254
40252: GO 40327
40254: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40255: LD_ADDR_VAR 0 12
40259: PUSH
40260: LD_VAR 0 18
40264: PPUSH
40265: LD_INT 22
40267: PUSH
40268: LD_VAR 0 16
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: LD_INT 2
40279: PUSH
40280: LD_INT 30
40282: PUSH
40283: LD_INT 6
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: PUSH
40290: LD_INT 30
40292: PUSH
40293: LD_INT 7
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: PUSH
40300: LD_INT 30
40302: PUSH
40303: LD_INT 8
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: LIST
40314: LIST
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PPUSH
40320: CALL_OW 72
40324: ST_TO_ADDR
40325: GO 40328
40327: POP
// if i = 1 then
40328: LD_VAR 0 8
40332: PUSH
40333: LD_INT 1
40335: EQUAL
40336: IFFALSE 40447
// begin tmp := [ ] ;
40338: LD_ADDR_VAR 0 19
40342: PUSH
40343: EMPTY
40344: ST_TO_ADDR
// for j in f do
40345: LD_ADDR_VAR 0 9
40349: PUSH
40350: LD_VAR 0 12
40354: PUSH
40355: FOR_IN
40356: IFFALSE 40429
// if GetBType ( j ) = b_bunker then
40358: LD_VAR 0 9
40362: PPUSH
40363: CALL_OW 266
40367: PUSH
40368: LD_INT 32
40370: EQUAL
40371: IFFALSE 40398
// tmp := Insert ( tmp , 1 , j ) else
40373: LD_ADDR_VAR 0 19
40377: PUSH
40378: LD_VAR 0 19
40382: PPUSH
40383: LD_INT 1
40385: PPUSH
40386: LD_VAR 0 9
40390: PPUSH
40391: CALL_OW 2
40395: ST_TO_ADDR
40396: GO 40427
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40398: LD_ADDR_VAR 0 19
40402: PUSH
40403: LD_VAR 0 19
40407: PPUSH
40408: LD_VAR 0 19
40412: PUSH
40413: LD_INT 1
40415: PLUS
40416: PPUSH
40417: LD_VAR 0 9
40421: PPUSH
40422: CALL_OW 2
40426: ST_TO_ADDR
40427: GO 40355
40429: POP
40430: POP
// if tmp then
40431: LD_VAR 0 19
40435: IFFALSE 40447
// f := tmp ;
40437: LD_ADDR_VAR 0 12
40441: PUSH
40442: LD_VAR 0 19
40446: ST_TO_ADDR
// end ; x := personel [ i ] ;
40447: LD_ADDR_VAR 0 13
40451: PUSH
40452: LD_VAR 0 6
40456: PUSH
40457: LD_VAR 0 8
40461: ARRAY
40462: ST_TO_ADDR
// if x = - 1 then
40463: LD_VAR 0 13
40467: PUSH
40468: LD_INT 1
40470: NEG
40471: EQUAL
40472: IFFALSE 40681
// begin for j in f do
40474: LD_ADDR_VAR 0 9
40478: PUSH
40479: LD_VAR 0 12
40483: PUSH
40484: FOR_IN
40485: IFFALSE 40677
// repeat InitHc ;
40487: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40491: LD_VAR 0 9
40495: PPUSH
40496: CALL_OW 266
40500: PUSH
40501: LD_INT 5
40503: EQUAL
40504: IFFALSE 40574
// begin if UnitsInside ( j ) < 3 then
40506: LD_VAR 0 9
40510: PPUSH
40511: CALL_OW 313
40515: PUSH
40516: LD_INT 3
40518: LESS
40519: IFFALSE 40555
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40521: LD_INT 0
40523: PPUSH
40524: LD_INT 5
40526: PUSH
40527: LD_INT 8
40529: PUSH
40530: LD_INT 9
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: LIST
40537: PUSH
40538: LD_VAR 0 17
40542: ARRAY
40543: PPUSH
40544: LD_VAR 0 4
40548: PPUSH
40549: CALL_OW 380
40553: GO 40572
// PrepareHuman ( false , i , skill ) ;
40555: LD_INT 0
40557: PPUSH
40558: LD_VAR 0 8
40562: PPUSH
40563: LD_VAR 0 4
40567: PPUSH
40568: CALL_OW 380
// end else
40572: GO 40591
// PrepareHuman ( false , i , skill ) ;
40574: LD_INT 0
40576: PPUSH
40577: LD_VAR 0 8
40581: PPUSH
40582: LD_VAR 0 4
40586: PPUSH
40587: CALL_OW 380
// un := CreateHuman ;
40591: LD_ADDR_VAR 0 14
40595: PUSH
40596: CALL_OW 44
40600: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40601: LD_ADDR_VAR 0 7
40605: PUSH
40606: LD_VAR 0 7
40610: PPUSH
40611: LD_INT 1
40613: PPUSH
40614: LD_VAR 0 14
40618: PPUSH
40619: CALL_OW 2
40623: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40624: LD_VAR 0 14
40628: PPUSH
40629: LD_VAR 0 9
40633: PPUSH
40634: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40638: LD_VAR 0 9
40642: PPUSH
40643: CALL_OW 313
40647: PUSH
40648: LD_INT 6
40650: EQUAL
40651: PUSH
40652: LD_VAR 0 9
40656: PPUSH
40657: CALL_OW 266
40661: PUSH
40662: LD_INT 32
40664: PUSH
40665: LD_INT 31
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: IN
40672: OR
40673: IFFALSE 40487
40675: GO 40484
40677: POP
40678: POP
// end else
40679: GO 41061
// for j = 1 to x do
40681: LD_ADDR_VAR 0 9
40685: PUSH
40686: DOUBLE
40687: LD_INT 1
40689: DEC
40690: ST_TO_ADDR
40691: LD_VAR 0 13
40695: PUSH
40696: FOR_TO
40697: IFFALSE 41059
// begin InitHc ;
40699: CALL_OW 19
// if not f then
40703: LD_VAR 0 12
40707: NOT
40708: IFFALSE 40797
// begin PrepareHuman ( false , i , skill ) ;
40710: LD_INT 0
40712: PPUSH
40713: LD_VAR 0 8
40717: PPUSH
40718: LD_VAR 0 4
40722: PPUSH
40723: CALL_OW 380
// un := CreateHuman ;
40727: LD_ADDR_VAR 0 14
40731: PUSH
40732: CALL_OW 44
40736: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40737: LD_ADDR_VAR 0 7
40741: PUSH
40742: LD_VAR 0 7
40746: PPUSH
40747: LD_INT 1
40749: PPUSH
40750: LD_VAR 0 14
40754: PPUSH
40755: CALL_OW 2
40759: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40760: LD_VAR 0 14
40764: PPUSH
40765: LD_VAR 0 1
40769: PPUSH
40770: CALL_OW 250
40774: PPUSH
40775: LD_VAR 0 1
40779: PPUSH
40780: CALL_OW 251
40784: PPUSH
40785: LD_INT 10
40787: PPUSH
40788: LD_INT 0
40790: PPUSH
40791: CALL_OW 50
// continue ;
40795: GO 40696
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40797: LD_VAR 0 12
40801: PUSH
40802: LD_INT 1
40804: ARRAY
40805: PPUSH
40806: CALL_OW 313
40810: PUSH
40811: LD_VAR 0 12
40815: PUSH
40816: LD_INT 1
40818: ARRAY
40819: PPUSH
40820: CALL_OW 266
40824: PUSH
40825: LD_INT 32
40827: PUSH
40828: LD_INT 31
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: IN
40835: AND
40836: PUSH
40837: LD_VAR 0 12
40841: PUSH
40842: LD_INT 1
40844: ARRAY
40845: PPUSH
40846: CALL_OW 313
40850: PUSH
40851: LD_INT 6
40853: EQUAL
40854: OR
40855: IFFALSE 40875
// f := Delete ( f , 1 ) ;
40857: LD_ADDR_VAR 0 12
40861: PUSH
40862: LD_VAR 0 12
40866: PPUSH
40867: LD_INT 1
40869: PPUSH
40870: CALL_OW 3
40874: ST_TO_ADDR
// if not f then
40875: LD_VAR 0 12
40879: NOT
40880: IFFALSE 40898
// begin x := x + 2 ;
40882: LD_ADDR_VAR 0 13
40886: PUSH
40887: LD_VAR 0 13
40891: PUSH
40892: LD_INT 2
40894: PLUS
40895: ST_TO_ADDR
// continue ;
40896: GO 40696
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40898: LD_VAR 0 12
40902: PUSH
40903: LD_INT 1
40905: ARRAY
40906: PPUSH
40907: CALL_OW 266
40911: PUSH
40912: LD_INT 5
40914: EQUAL
40915: IFFALSE 40989
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40917: LD_VAR 0 12
40921: PUSH
40922: LD_INT 1
40924: ARRAY
40925: PPUSH
40926: CALL_OW 313
40930: PUSH
40931: LD_INT 3
40933: LESS
40934: IFFALSE 40970
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40936: LD_INT 0
40938: PPUSH
40939: LD_INT 5
40941: PUSH
40942: LD_INT 8
40944: PUSH
40945: LD_INT 9
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: LIST
40952: PUSH
40953: LD_VAR 0 17
40957: ARRAY
40958: PPUSH
40959: LD_VAR 0 4
40963: PPUSH
40964: CALL_OW 380
40968: GO 40987
// PrepareHuman ( false , i , skill ) ;
40970: LD_INT 0
40972: PPUSH
40973: LD_VAR 0 8
40977: PPUSH
40978: LD_VAR 0 4
40982: PPUSH
40983: CALL_OW 380
// end else
40987: GO 41006
// PrepareHuman ( false , i , skill ) ;
40989: LD_INT 0
40991: PPUSH
40992: LD_VAR 0 8
40996: PPUSH
40997: LD_VAR 0 4
41001: PPUSH
41002: CALL_OW 380
// un := CreateHuman ;
41006: LD_ADDR_VAR 0 14
41010: PUSH
41011: CALL_OW 44
41015: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41016: LD_ADDR_VAR 0 7
41020: PUSH
41021: LD_VAR 0 7
41025: PPUSH
41026: LD_INT 1
41028: PPUSH
41029: LD_VAR 0 14
41033: PPUSH
41034: CALL_OW 2
41038: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41039: LD_VAR 0 14
41043: PPUSH
41044: LD_VAR 0 12
41048: PUSH
41049: LD_INT 1
41051: ARRAY
41052: PPUSH
41053: CALL_OW 52
// end ;
41057: GO 40696
41059: POP
41060: POP
// end ;
41061: GO 39998
41063: POP
41064: POP
// result := result ^ buildings ;
41065: LD_ADDR_VAR 0 7
41069: PUSH
41070: LD_VAR 0 7
41074: PUSH
41075: LD_VAR 0 18
41079: ADD
41080: ST_TO_ADDR
// end else
41081: GO 41224
// begin for i = 1 to personel do
41083: LD_ADDR_VAR 0 8
41087: PUSH
41088: DOUBLE
41089: LD_INT 1
41091: DEC
41092: ST_TO_ADDR
41093: LD_VAR 0 6
41097: PUSH
41098: FOR_TO
41099: IFFALSE 41222
// begin if i > 4 then
41101: LD_VAR 0 8
41105: PUSH
41106: LD_INT 4
41108: GREATER
41109: IFFALSE 41113
// break ;
41111: GO 41222
// x := personel [ i ] ;
41113: LD_ADDR_VAR 0 13
41117: PUSH
41118: LD_VAR 0 6
41122: PUSH
41123: LD_VAR 0 8
41127: ARRAY
41128: ST_TO_ADDR
// if x = - 1 then
41129: LD_VAR 0 13
41133: PUSH
41134: LD_INT 1
41136: NEG
41137: EQUAL
41138: IFFALSE 41142
// continue ;
41140: GO 41098
// PrepareHuman ( false , i , skill ) ;
41142: LD_INT 0
41144: PPUSH
41145: LD_VAR 0 8
41149: PPUSH
41150: LD_VAR 0 4
41154: PPUSH
41155: CALL_OW 380
// un := CreateHuman ;
41159: LD_ADDR_VAR 0 14
41163: PUSH
41164: CALL_OW 44
41168: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41169: LD_VAR 0 14
41173: PPUSH
41174: LD_VAR 0 1
41178: PPUSH
41179: CALL_OW 250
41183: PPUSH
41184: LD_VAR 0 1
41188: PPUSH
41189: CALL_OW 251
41193: PPUSH
41194: LD_INT 10
41196: PPUSH
41197: LD_INT 0
41199: PPUSH
41200: CALL_OW 50
// result := result ^ un ;
41204: LD_ADDR_VAR 0 7
41208: PUSH
41209: LD_VAR 0 7
41213: PUSH
41214: LD_VAR 0 14
41218: ADD
41219: ST_TO_ADDR
// end ;
41220: GO 41098
41222: POP
41223: POP
// end ; end ;
41224: LD_VAR 0 7
41228: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41229: LD_INT 0
41231: PPUSH
41232: PPUSH
41233: PPUSH
41234: PPUSH
41235: PPUSH
41236: PPUSH
41237: PPUSH
41238: PPUSH
41239: PPUSH
41240: PPUSH
41241: PPUSH
41242: PPUSH
41243: PPUSH
41244: PPUSH
41245: PPUSH
41246: PPUSH
// result := false ;
41247: LD_ADDR_VAR 0 3
41251: PUSH
41252: LD_INT 0
41254: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41255: LD_VAR 0 1
41259: NOT
41260: PUSH
41261: LD_VAR 0 1
41265: PPUSH
41266: CALL_OW 266
41270: PUSH
41271: LD_INT 32
41273: PUSH
41274: LD_INT 33
41276: PUSH
41277: EMPTY
41278: LIST
41279: LIST
41280: IN
41281: NOT
41282: OR
41283: IFFALSE 41287
// exit ;
41285: GO 42396
// nat := GetNation ( tower ) ;
41287: LD_ADDR_VAR 0 12
41291: PUSH
41292: LD_VAR 0 1
41296: PPUSH
41297: CALL_OW 248
41301: ST_TO_ADDR
// side := GetSide ( tower ) ;
41302: LD_ADDR_VAR 0 16
41306: PUSH
41307: LD_VAR 0 1
41311: PPUSH
41312: CALL_OW 255
41316: ST_TO_ADDR
// x := GetX ( tower ) ;
41317: LD_ADDR_VAR 0 10
41321: PUSH
41322: LD_VAR 0 1
41326: PPUSH
41327: CALL_OW 250
41331: ST_TO_ADDR
// y := GetY ( tower ) ;
41332: LD_ADDR_VAR 0 11
41336: PUSH
41337: LD_VAR 0 1
41341: PPUSH
41342: CALL_OW 251
41346: ST_TO_ADDR
// if not x or not y then
41347: LD_VAR 0 10
41351: NOT
41352: PUSH
41353: LD_VAR 0 11
41357: NOT
41358: OR
41359: IFFALSE 41363
// exit ;
41361: GO 42396
// weapon := 0 ;
41363: LD_ADDR_VAR 0 18
41367: PUSH
41368: LD_INT 0
41370: ST_TO_ADDR
// fac_list := [ ] ;
41371: LD_ADDR_VAR 0 17
41375: PUSH
41376: EMPTY
41377: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41378: LD_ADDR_VAR 0 6
41382: PUSH
41383: LD_VAR 0 1
41387: PPUSH
41388: CALL_OW 274
41392: PPUSH
41393: LD_VAR 0 2
41397: PPUSH
41398: LD_INT 0
41400: PPUSH
41401: CALL 38967 0 3
41405: PPUSH
41406: LD_INT 30
41408: PUSH
41409: LD_INT 3
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PPUSH
41416: CALL_OW 72
41420: ST_TO_ADDR
// if not factories then
41421: LD_VAR 0 6
41425: NOT
41426: IFFALSE 41430
// exit ;
41428: GO 42396
// for i in factories do
41430: LD_ADDR_VAR 0 8
41434: PUSH
41435: LD_VAR 0 6
41439: PUSH
41440: FOR_IN
41441: IFFALSE 41466
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41443: LD_ADDR_VAR 0 17
41447: PUSH
41448: LD_VAR 0 17
41452: PUSH
41453: LD_VAR 0 8
41457: PPUSH
41458: CALL_OW 478
41462: UNION
41463: ST_TO_ADDR
41464: GO 41440
41466: POP
41467: POP
// if not fac_list then
41468: LD_VAR 0 17
41472: NOT
41473: IFFALSE 41477
// exit ;
41475: GO 42396
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41477: LD_ADDR_VAR 0 5
41481: PUSH
41482: LD_INT 4
41484: PUSH
41485: LD_INT 5
41487: PUSH
41488: LD_INT 9
41490: PUSH
41491: LD_INT 10
41493: PUSH
41494: LD_INT 6
41496: PUSH
41497: LD_INT 7
41499: PUSH
41500: LD_INT 11
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: LIST
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: PUSH
41512: LD_INT 27
41514: PUSH
41515: LD_INT 28
41517: PUSH
41518: LD_INT 26
41520: PUSH
41521: LD_INT 30
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: PUSH
41530: LD_INT 43
41532: PUSH
41533: LD_INT 44
41535: PUSH
41536: LD_INT 46
41538: PUSH
41539: LD_INT 45
41541: PUSH
41542: LD_INT 47
41544: PUSH
41545: LD_INT 49
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: LIST
41560: PUSH
41561: LD_VAR 0 12
41565: ARRAY
41566: ST_TO_ADDR
// list := list isect fac_list ;
41567: LD_ADDR_VAR 0 5
41571: PUSH
41572: LD_VAR 0 5
41576: PUSH
41577: LD_VAR 0 17
41581: ISECT
41582: ST_TO_ADDR
// if not list then
41583: LD_VAR 0 5
41587: NOT
41588: IFFALSE 41592
// exit ;
41590: GO 42396
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41592: LD_VAR 0 12
41596: PUSH
41597: LD_INT 3
41599: EQUAL
41600: PUSH
41601: LD_INT 49
41603: PUSH
41604: LD_VAR 0 5
41608: IN
41609: AND
41610: PUSH
41611: LD_INT 31
41613: PPUSH
41614: LD_VAR 0 16
41618: PPUSH
41619: CALL_OW 321
41623: PUSH
41624: LD_INT 2
41626: EQUAL
41627: AND
41628: IFFALSE 41688
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41630: LD_INT 22
41632: PUSH
41633: LD_VAR 0 16
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PUSH
41642: LD_INT 35
41644: PUSH
41645: LD_INT 49
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_INT 91
41654: PUSH
41655: LD_VAR 0 1
41659: PUSH
41660: LD_INT 10
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: LIST
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: LIST
41672: PPUSH
41673: CALL_OW 69
41677: NOT
41678: IFFALSE 41688
// weapon := ru_time_lapser ;
41680: LD_ADDR_VAR 0 18
41684: PUSH
41685: LD_INT 49
41687: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41688: LD_VAR 0 12
41692: PUSH
41693: LD_INT 1
41695: PUSH
41696: LD_INT 2
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: IN
41703: PUSH
41704: LD_INT 11
41706: PUSH
41707: LD_VAR 0 5
41711: IN
41712: PUSH
41713: LD_INT 30
41715: PUSH
41716: LD_VAR 0 5
41720: IN
41721: OR
41722: AND
41723: PUSH
41724: LD_INT 6
41726: PPUSH
41727: LD_VAR 0 16
41731: PPUSH
41732: CALL_OW 321
41736: PUSH
41737: LD_INT 2
41739: EQUAL
41740: AND
41741: IFFALSE 41906
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41743: LD_INT 22
41745: PUSH
41746: LD_VAR 0 16
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 2
41757: PUSH
41758: LD_INT 35
41760: PUSH
41761: LD_INT 11
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: PUSH
41768: LD_INT 35
41770: PUSH
41771: LD_INT 30
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: LIST
41782: PUSH
41783: LD_INT 91
41785: PUSH
41786: LD_VAR 0 1
41790: PUSH
41791: LD_INT 18
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: LIST
41798: PUSH
41799: EMPTY
41800: LIST
41801: LIST
41802: LIST
41803: PPUSH
41804: CALL_OW 69
41808: NOT
41809: PUSH
41810: LD_INT 22
41812: PUSH
41813: LD_VAR 0 16
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 2
41824: PUSH
41825: LD_INT 30
41827: PUSH
41828: LD_INT 32
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 30
41837: PUSH
41838: LD_INT 33
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 91
41852: PUSH
41853: LD_VAR 0 1
41857: PUSH
41858: LD_INT 12
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: LIST
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: LIST
41870: PUSH
41871: EMPTY
41872: LIST
41873: PPUSH
41874: CALL_OW 69
41878: PUSH
41879: LD_INT 2
41881: GREATER
41882: AND
41883: IFFALSE 41906
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41885: LD_ADDR_VAR 0 18
41889: PUSH
41890: LD_INT 11
41892: PUSH
41893: LD_INT 30
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: PUSH
41900: LD_VAR 0 12
41904: ARRAY
41905: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41906: LD_VAR 0 18
41910: NOT
41911: PUSH
41912: LD_INT 40
41914: PPUSH
41915: LD_VAR 0 16
41919: PPUSH
41920: CALL_OW 321
41924: PUSH
41925: LD_INT 2
41927: EQUAL
41928: AND
41929: PUSH
41930: LD_INT 7
41932: PUSH
41933: LD_VAR 0 5
41937: IN
41938: PUSH
41939: LD_INT 28
41941: PUSH
41942: LD_VAR 0 5
41946: IN
41947: OR
41948: PUSH
41949: LD_INT 45
41951: PUSH
41952: LD_VAR 0 5
41956: IN
41957: OR
41958: AND
41959: IFFALSE 42213
// begin hex := GetHexInfo ( x , y ) ;
41961: LD_ADDR_VAR 0 4
41965: PUSH
41966: LD_VAR 0 10
41970: PPUSH
41971: LD_VAR 0 11
41975: PPUSH
41976: CALL_OW 546
41980: ST_TO_ADDR
// if hex [ 1 ] then
41981: LD_VAR 0 4
41985: PUSH
41986: LD_INT 1
41988: ARRAY
41989: IFFALSE 41993
// exit ;
41991: GO 42396
// height := hex [ 2 ] ;
41993: LD_ADDR_VAR 0 15
41997: PUSH
41998: LD_VAR 0 4
42002: PUSH
42003: LD_INT 2
42005: ARRAY
42006: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
42007: LD_ADDR_VAR 0 14
42011: PUSH
42012: LD_INT 0
42014: PUSH
42015: LD_INT 2
42017: PUSH
42018: LD_INT 3
42020: PUSH
42021: LD_INT 5
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: ST_TO_ADDR
// for i in tmp do
42030: LD_ADDR_VAR 0 8
42034: PUSH
42035: LD_VAR 0 14
42039: PUSH
42040: FOR_IN
42041: IFFALSE 42211
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42043: LD_ADDR_VAR 0 9
42047: PUSH
42048: LD_VAR 0 10
42052: PPUSH
42053: LD_VAR 0 8
42057: PPUSH
42058: LD_INT 5
42060: PPUSH
42061: CALL_OW 272
42065: PUSH
42066: LD_VAR 0 11
42070: PPUSH
42071: LD_VAR 0 8
42075: PPUSH
42076: LD_INT 5
42078: PPUSH
42079: CALL_OW 273
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42088: LD_VAR 0 9
42092: PUSH
42093: LD_INT 1
42095: ARRAY
42096: PPUSH
42097: LD_VAR 0 9
42101: PUSH
42102: LD_INT 2
42104: ARRAY
42105: PPUSH
42106: CALL_OW 488
42110: IFFALSE 42209
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42112: LD_ADDR_VAR 0 4
42116: PUSH
42117: LD_VAR 0 9
42121: PUSH
42122: LD_INT 1
42124: ARRAY
42125: PPUSH
42126: LD_VAR 0 9
42130: PUSH
42131: LD_INT 2
42133: ARRAY
42134: PPUSH
42135: CALL_OW 546
42139: ST_TO_ADDR
// if hex [ 1 ] then
42140: LD_VAR 0 4
42144: PUSH
42145: LD_INT 1
42147: ARRAY
42148: IFFALSE 42152
// continue ;
42150: GO 42040
// h := hex [ 2 ] ;
42152: LD_ADDR_VAR 0 13
42156: PUSH
42157: LD_VAR 0 4
42161: PUSH
42162: LD_INT 2
42164: ARRAY
42165: ST_TO_ADDR
// if h + 7 < height then
42166: LD_VAR 0 13
42170: PUSH
42171: LD_INT 7
42173: PLUS
42174: PUSH
42175: LD_VAR 0 15
42179: LESS
42180: IFFALSE 42209
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42182: LD_ADDR_VAR 0 18
42186: PUSH
42187: LD_INT 7
42189: PUSH
42190: LD_INT 28
42192: PUSH
42193: LD_INT 45
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: LIST
42200: PUSH
42201: LD_VAR 0 12
42205: ARRAY
42206: ST_TO_ADDR
// break ;
42207: GO 42211
// end ; end ; end ;
42209: GO 42040
42211: POP
42212: POP
// end ; if not weapon then
42213: LD_VAR 0 18
42217: NOT
42218: IFFALSE 42278
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42220: LD_ADDR_VAR 0 5
42224: PUSH
42225: LD_VAR 0 5
42229: PUSH
42230: LD_INT 11
42232: PUSH
42233: LD_INT 30
42235: PUSH
42236: LD_INT 49
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: LIST
42243: DIFF
42244: ST_TO_ADDR
// if not list then
42245: LD_VAR 0 5
42249: NOT
42250: IFFALSE 42254
// exit ;
42252: GO 42396
// weapon := list [ rand ( 1 , list ) ] ;
42254: LD_ADDR_VAR 0 18
42258: PUSH
42259: LD_VAR 0 5
42263: PUSH
42264: LD_INT 1
42266: PPUSH
42267: LD_VAR 0 5
42271: PPUSH
42272: CALL_OW 12
42276: ARRAY
42277: ST_TO_ADDR
// end ; if weapon then
42278: LD_VAR 0 18
42282: IFFALSE 42396
// begin tmp := CostOfWeapon ( weapon ) ;
42284: LD_ADDR_VAR 0 14
42288: PUSH
42289: LD_VAR 0 18
42293: PPUSH
42294: CALL_OW 451
42298: ST_TO_ADDR
// j := GetBase ( tower ) ;
42299: LD_ADDR_VAR 0 9
42303: PUSH
42304: LD_VAR 0 1
42308: PPUSH
42309: CALL_OW 274
42313: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42314: LD_VAR 0 9
42318: PPUSH
42319: LD_INT 1
42321: PPUSH
42322: CALL_OW 275
42326: PUSH
42327: LD_VAR 0 14
42331: PUSH
42332: LD_INT 1
42334: ARRAY
42335: GREATEREQUAL
42336: PUSH
42337: LD_VAR 0 9
42341: PPUSH
42342: LD_INT 2
42344: PPUSH
42345: CALL_OW 275
42349: PUSH
42350: LD_VAR 0 14
42354: PUSH
42355: LD_INT 2
42357: ARRAY
42358: GREATEREQUAL
42359: AND
42360: PUSH
42361: LD_VAR 0 9
42365: PPUSH
42366: LD_INT 3
42368: PPUSH
42369: CALL_OW 275
42373: PUSH
42374: LD_VAR 0 14
42378: PUSH
42379: LD_INT 3
42381: ARRAY
42382: GREATEREQUAL
42383: AND
42384: IFFALSE 42396
// result := weapon ;
42386: LD_ADDR_VAR 0 3
42390: PUSH
42391: LD_VAR 0 18
42395: ST_TO_ADDR
// end ; end ;
42396: LD_VAR 0 3
42400: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42401: LD_INT 0
42403: PPUSH
42404: PPUSH
// result := true ;
42405: LD_ADDR_VAR 0 3
42409: PUSH
42410: LD_INT 1
42412: ST_TO_ADDR
// if array1 = array2 then
42413: LD_VAR 0 1
42417: PUSH
42418: LD_VAR 0 2
42422: EQUAL
42423: IFFALSE 42483
// begin for i = 1 to array1 do
42425: LD_ADDR_VAR 0 4
42429: PUSH
42430: DOUBLE
42431: LD_INT 1
42433: DEC
42434: ST_TO_ADDR
42435: LD_VAR 0 1
42439: PUSH
42440: FOR_TO
42441: IFFALSE 42479
// if array1 [ i ] <> array2 [ i ] then
42443: LD_VAR 0 1
42447: PUSH
42448: LD_VAR 0 4
42452: ARRAY
42453: PUSH
42454: LD_VAR 0 2
42458: PUSH
42459: LD_VAR 0 4
42463: ARRAY
42464: NONEQUAL
42465: IFFALSE 42477
// begin result := false ;
42467: LD_ADDR_VAR 0 3
42471: PUSH
42472: LD_INT 0
42474: ST_TO_ADDR
// break ;
42475: GO 42479
// end ;
42477: GO 42440
42479: POP
42480: POP
// end else
42481: GO 42491
// result := false ;
42483: LD_ADDR_VAR 0 3
42487: PUSH
42488: LD_INT 0
42490: ST_TO_ADDR
// end ;
42491: LD_VAR 0 3
42495: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42496: LD_INT 0
42498: PPUSH
42499: PPUSH
// if not array1 or not array2 then
42500: LD_VAR 0 1
42504: NOT
42505: PUSH
42506: LD_VAR 0 2
42510: NOT
42511: OR
42512: IFFALSE 42516
// exit ;
42514: GO 42580
// result := true ;
42516: LD_ADDR_VAR 0 3
42520: PUSH
42521: LD_INT 1
42523: ST_TO_ADDR
// for i = 1 to array1 do
42524: LD_ADDR_VAR 0 4
42528: PUSH
42529: DOUBLE
42530: LD_INT 1
42532: DEC
42533: ST_TO_ADDR
42534: LD_VAR 0 1
42538: PUSH
42539: FOR_TO
42540: IFFALSE 42578
// if array1 [ i ] <> array2 [ i ] then
42542: LD_VAR 0 1
42546: PUSH
42547: LD_VAR 0 4
42551: ARRAY
42552: PUSH
42553: LD_VAR 0 2
42557: PUSH
42558: LD_VAR 0 4
42562: ARRAY
42563: NONEQUAL
42564: IFFALSE 42576
// begin result := false ;
42566: LD_ADDR_VAR 0 3
42570: PUSH
42571: LD_INT 0
42573: ST_TO_ADDR
// break ;
42574: GO 42578
// end ;
42576: GO 42539
42578: POP
42579: POP
// end ;
42580: LD_VAR 0 3
42584: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42585: LD_INT 0
42587: PPUSH
42588: PPUSH
42589: PPUSH
// pom := GetBase ( fac ) ;
42590: LD_ADDR_VAR 0 5
42594: PUSH
42595: LD_VAR 0 1
42599: PPUSH
42600: CALL_OW 274
42604: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42605: LD_ADDR_VAR 0 4
42609: PUSH
42610: LD_VAR 0 2
42614: PUSH
42615: LD_INT 1
42617: ARRAY
42618: PPUSH
42619: LD_VAR 0 2
42623: PUSH
42624: LD_INT 2
42626: ARRAY
42627: PPUSH
42628: LD_VAR 0 2
42632: PUSH
42633: LD_INT 3
42635: ARRAY
42636: PPUSH
42637: LD_VAR 0 2
42641: PUSH
42642: LD_INT 4
42644: ARRAY
42645: PPUSH
42646: CALL_OW 449
42650: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42651: LD_ADDR_VAR 0 3
42655: PUSH
42656: LD_VAR 0 5
42660: PPUSH
42661: LD_INT 1
42663: PPUSH
42664: CALL_OW 275
42668: PUSH
42669: LD_VAR 0 4
42673: PUSH
42674: LD_INT 1
42676: ARRAY
42677: GREATEREQUAL
42678: PUSH
42679: LD_VAR 0 5
42683: PPUSH
42684: LD_INT 2
42686: PPUSH
42687: CALL_OW 275
42691: PUSH
42692: LD_VAR 0 4
42696: PUSH
42697: LD_INT 2
42699: ARRAY
42700: GREATEREQUAL
42701: AND
42702: PUSH
42703: LD_VAR 0 5
42707: PPUSH
42708: LD_INT 3
42710: PPUSH
42711: CALL_OW 275
42715: PUSH
42716: LD_VAR 0 4
42720: PUSH
42721: LD_INT 3
42723: ARRAY
42724: GREATEREQUAL
42725: AND
42726: ST_TO_ADDR
// end ;
42727: LD_VAR 0 3
42731: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42732: LD_INT 0
42734: PPUSH
42735: PPUSH
42736: PPUSH
42737: PPUSH
// pom := GetBase ( building ) ;
42738: LD_ADDR_VAR 0 3
42742: PUSH
42743: LD_VAR 0 1
42747: PPUSH
42748: CALL_OW 274
42752: ST_TO_ADDR
// if not pom then
42753: LD_VAR 0 3
42757: NOT
42758: IFFALSE 42762
// exit ;
42760: GO 42932
// btype := GetBType ( building ) ;
42762: LD_ADDR_VAR 0 5
42766: PUSH
42767: LD_VAR 0 1
42771: PPUSH
42772: CALL_OW 266
42776: ST_TO_ADDR
// if btype = b_armoury then
42777: LD_VAR 0 5
42781: PUSH
42782: LD_INT 4
42784: EQUAL
42785: IFFALSE 42795
// btype := b_barracks ;
42787: LD_ADDR_VAR 0 5
42791: PUSH
42792: LD_INT 5
42794: ST_TO_ADDR
// if btype = b_depot then
42795: LD_VAR 0 5
42799: PUSH
42800: LD_INT 0
42802: EQUAL
42803: IFFALSE 42813
// btype := b_warehouse ;
42805: LD_ADDR_VAR 0 5
42809: PUSH
42810: LD_INT 1
42812: ST_TO_ADDR
// if btype = b_workshop then
42813: LD_VAR 0 5
42817: PUSH
42818: LD_INT 2
42820: EQUAL
42821: IFFALSE 42831
// btype := b_factory ;
42823: LD_ADDR_VAR 0 5
42827: PUSH
42828: LD_INT 3
42830: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42831: LD_ADDR_VAR 0 4
42835: PUSH
42836: LD_VAR 0 5
42840: PPUSH
42841: LD_VAR 0 1
42845: PPUSH
42846: CALL_OW 248
42850: PPUSH
42851: CALL_OW 450
42855: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42856: LD_ADDR_VAR 0 2
42860: PUSH
42861: LD_VAR 0 3
42865: PPUSH
42866: LD_INT 1
42868: PPUSH
42869: CALL_OW 275
42873: PUSH
42874: LD_VAR 0 4
42878: PUSH
42879: LD_INT 1
42881: ARRAY
42882: GREATEREQUAL
42883: PUSH
42884: LD_VAR 0 3
42888: PPUSH
42889: LD_INT 2
42891: PPUSH
42892: CALL_OW 275
42896: PUSH
42897: LD_VAR 0 4
42901: PUSH
42902: LD_INT 2
42904: ARRAY
42905: GREATEREQUAL
42906: AND
42907: PUSH
42908: LD_VAR 0 3
42912: PPUSH
42913: LD_INT 3
42915: PPUSH
42916: CALL_OW 275
42920: PUSH
42921: LD_VAR 0 4
42925: PUSH
42926: LD_INT 3
42928: ARRAY
42929: GREATEREQUAL
42930: AND
42931: ST_TO_ADDR
// end ;
42932: LD_VAR 0 2
42936: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42937: LD_INT 0
42939: PPUSH
42940: PPUSH
42941: PPUSH
// pom := GetBase ( building ) ;
42942: LD_ADDR_VAR 0 4
42946: PUSH
42947: LD_VAR 0 1
42951: PPUSH
42952: CALL_OW 274
42956: ST_TO_ADDR
// if not pom then
42957: LD_VAR 0 4
42961: NOT
42962: IFFALSE 42966
// exit ;
42964: GO 43067
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42966: LD_ADDR_VAR 0 5
42970: PUSH
42971: LD_VAR 0 2
42975: PPUSH
42976: LD_VAR 0 1
42980: PPUSH
42981: CALL_OW 248
42985: PPUSH
42986: CALL_OW 450
42990: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42991: LD_ADDR_VAR 0 3
42995: PUSH
42996: LD_VAR 0 4
43000: PPUSH
43001: LD_INT 1
43003: PPUSH
43004: CALL_OW 275
43008: PUSH
43009: LD_VAR 0 5
43013: PUSH
43014: LD_INT 1
43016: ARRAY
43017: GREATEREQUAL
43018: PUSH
43019: LD_VAR 0 4
43023: PPUSH
43024: LD_INT 2
43026: PPUSH
43027: CALL_OW 275
43031: PUSH
43032: LD_VAR 0 5
43036: PUSH
43037: LD_INT 2
43039: ARRAY
43040: GREATEREQUAL
43041: AND
43042: PUSH
43043: LD_VAR 0 4
43047: PPUSH
43048: LD_INT 3
43050: PPUSH
43051: CALL_OW 275
43055: PUSH
43056: LD_VAR 0 5
43060: PUSH
43061: LD_INT 3
43063: ARRAY
43064: GREATEREQUAL
43065: AND
43066: ST_TO_ADDR
// end ;
43067: LD_VAR 0 3
43071: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
43072: LD_INT 0
43074: PPUSH
43075: PPUSH
43076: PPUSH
43077: PPUSH
43078: PPUSH
43079: PPUSH
43080: PPUSH
43081: PPUSH
43082: PPUSH
43083: PPUSH
43084: PPUSH
// result := false ;
43085: LD_ADDR_VAR 0 8
43089: PUSH
43090: LD_INT 0
43092: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43093: LD_VAR 0 5
43097: NOT
43098: PUSH
43099: LD_VAR 0 1
43103: NOT
43104: OR
43105: PUSH
43106: LD_VAR 0 2
43110: NOT
43111: OR
43112: PUSH
43113: LD_VAR 0 3
43117: NOT
43118: OR
43119: IFFALSE 43123
// exit ;
43121: GO 43937
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
43123: LD_ADDR_VAR 0 14
43127: PUSH
43128: LD_VAR 0 1
43132: PPUSH
43133: LD_VAR 0 2
43137: PPUSH
43138: LD_VAR 0 3
43142: PPUSH
43143: LD_VAR 0 4
43147: PPUSH
43148: LD_VAR 0 5
43152: PUSH
43153: LD_INT 1
43155: ARRAY
43156: PPUSH
43157: CALL_OW 248
43161: PPUSH
43162: LD_INT 0
43164: PPUSH
43165: CALL 45170 0 6
43169: ST_TO_ADDR
// if not hexes then
43170: LD_VAR 0 14
43174: NOT
43175: IFFALSE 43179
// exit ;
43177: GO 43937
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43179: LD_ADDR_VAR 0 17
43183: PUSH
43184: LD_VAR 0 5
43188: PPUSH
43189: LD_INT 22
43191: PUSH
43192: LD_VAR 0 13
43196: PPUSH
43197: CALL_OW 255
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: LD_INT 2
43208: PUSH
43209: LD_INT 30
43211: PUSH
43212: LD_INT 0
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: PUSH
43219: LD_INT 30
43221: PUSH
43222: LD_INT 1
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: LIST
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PPUSH
43238: CALL_OW 72
43242: ST_TO_ADDR
// for i = 1 to hexes do
43243: LD_ADDR_VAR 0 9
43247: PUSH
43248: DOUBLE
43249: LD_INT 1
43251: DEC
43252: ST_TO_ADDR
43253: LD_VAR 0 14
43257: PUSH
43258: FOR_TO
43259: IFFALSE 43935
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43261: LD_ADDR_VAR 0 13
43265: PUSH
43266: LD_VAR 0 14
43270: PUSH
43271: LD_VAR 0 9
43275: ARRAY
43276: PUSH
43277: LD_INT 1
43279: ARRAY
43280: PPUSH
43281: LD_VAR 0 14
43285: PUSH
43286: LD_VAR 0 9
43290: ARRAY
43291: PUSH
43292: LD_INT 2
43294: ARRAY
43295: PPUSH
43296: CALL_OW 428
43300: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43301: LD_VAR 0 14
43305: PUSH
43306: LD_VAR 0 9
43310: ARRAY
43311: PUSH
43312: LD_INT 1
43314: ARRAY
43315: PPUSH
43316: LD_VAR 0 14
43320: PUSH
43321: LD_VAR 0 9
43325: ARRAY
43326: PUSH
43327: LD_INT 2
43329: ARRAY
43330: PPUSH
43331: CALL_OW 351
43335: PUSH
43336: LD_VAR 0 14
43340: PUSH
43341: LD_VAR 0 9
43345: ARRAY
43346: PUSH
43347: LD_INT 1
43349: ARRAY
43350: PPUSH
43351: LD_VAR 0 14
43355: PUSH
43356: LD_VAR 0 9
43360: ARRAY
43361: PUSH
43362: LD_INT 2
43364: ARRAY
43365: PPUSH
43366: CALL_OW 488
43370: NOT
43371: OR
43372: PUSH
43373: LD_VAR 0 13
43377: PPUSH
43378: CALL_OW 247
43382: PUSH
43383: LD_INT 3
43385: EQUAL
43386: OR
43387: IFFALSE 43393
// exit ;
43389: POP
43390: POP
43391: GO 43937
// if not tmp then
43393: LD_VAR 0 13
43397: NOT
43398: IFFALSE 43402
// continue ;
43400: GO 43258
// result := true ;
43402: LD_ADDR_VAR 0 8
43406: PUSH
43407: LD_INT 1
43409: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43410: LD_VAR 0 6
43414: PUSH
43415: LD_VAR 0 13
43419: PPUSH
43420: CALL_OW 247
43424: PUSH
43425: LD_INT 2
43427: EQUAL
43428: AND
43429: PUSH
43430: LD_VAR 0 13
43434: PPUSH
43435: CALL_OW 263
43439: PUSH
43440: LD_INT 1
43442: EQUAL
43443: AND
43444: IFFALSE 43608
// begin if IsDrivenBy ( tmp ) then
43446: LD_VAR 0 13
43450: PPUSH
43451: CALL_OW 311
43455: IFFALSE 43459
// continue ;
43457: GO 43258
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43459: LD_VAR 0 6
43463: PPUSH
43464: LD_INT 3
43466: PUSH
43467: LD_INT 60
43469: PUSH
43470: EMPTY
43471: LIST
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 3
43479: PUSH
43480: LD_INT 55
43482: PUSH
43483: EMPTY
43484: LIST
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PPUSH
43494: CALL_OW 72
43498: IFFALSE 43606
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43500: LD_ADDR_VAR 0 18
43504: PUSH
43505: LD_VAR 0 6
43509: PPUSH
43510: LD_INT 3
43512: PUSH
43513: LD_INT 60
43515: PUSH
43516: EMPTY
43517: LIST
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 3
43525: PUSH
43526: LD_INT 55
43528: PUSH
43529: EMPTY
43530: LIST
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PPUSH
43540: CALL_OW 72
43544: PUSH
43545: LD_INT 1
43547: ARRAY
43548: ST_TO_ADDR
// if IsInUnit ( driver ) then
43549: LD_VAR 0 18
43553: PPUSH
43554: CALL_OW 310
43558: IFFALSE 43569
// ComExit ( driver ) ;
43560: LD_VAR 0 18
43564: PPUSH
43565: CALL 68950 0 1
// AddComEnterUnit ( driver , tmp ) ;
43569: LD_VAR 0 18
43573: PPUSH
43574: LD_VAR 0 13
43578: PPUSH
43579: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43583: LD_VAR 0 18
43587: PPUSH
43588: LD_VAR 0 7
43592: PPUSH
43593: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43597: LD_VAR 0 18
43601: PPUSH
43602: CALL_OW 181
// end ; continue ;
43606: GO 43258
// end ; if not cleaners or not tmp in cleaners then
43608: LD_VAR 0 6
43612: NOT
43613: PUSH
43614: LD_VAR 0 13
43618: PUSH
43619: LD_VAR 0 6
43623: IN
43624: NOT
43625: OR
43626: IFFALSE 43933
// begin if dep then
43628: LD_VAR 0 17
43632: IFFALSE 43768
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43634: LD_ADDR_VAR 0 16
43638: PUSH
43639: LD_VAR 0 17
43643: PUSH
43644: LD_INT 1
43646: ARRAY
43647: PPUSH
43648: CALL_OW 250
43652: PPUSH
43653: LD_VAR 0 17
43657: PUSH
43658: LD_INT 1
43660: ARRAY
43661: PPUSH
43662: CALL_OW 254
43666: PPUSH
43667: LD_INT 5
43669: PPUSH
43670: CALL_OW 272
43674: PUSH
43675: LD_VAR 0 17
43679: PUSH
43680: LD_INT 1
43682: ARRAY
43683: PPUSH
43684: CALL_OW 251
43688: PPUSH
43689: LD_VAR 0 17
43693: PUSH
43694: LD_INT 1
43696: ARRAY
43697: PPUSH
43698: CALL_OW 254
43702: PPUSH
43703: LD_INT 5
43705: PPUSH
43706: CALL_OW 273
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43715: LD_VAR 0 16
43719: PUSH
43720: LD_INT 1
43722: ARRAY
43723: PPUSH
43724: LD_VAR 0 16
43728: PUSH
43729: LD_INT 2
43731: ARRAY
43732: PPUSH
43733: CALL_OW 488
43737: IFFALSE 43768
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43739: LD_VAR 0 13
43743: PPUSH
43744: LD_VAR 0 16
43748: PUSH
43749: LD_INT 1
43751: ARRAY
43752: PPUSH
43753: LD_VAR 0 16
43757: PUSH
43758: LD_INT 2
43760: ARRAY
43761: PPUSH
43762: CALL_OW 111
// continue ;
43766: GO 43258
// end ; end ; r := GetDir ( tmp ) ;
43768: LD_ADDR_VAR 0 15
43772: PUSH
43773: LD_VAR 0 13
43777: PPUSH
43778: CALL_OW 254
43782: ST_TO_ADDR
// if r = 5 then
43783: LD_VAR 0 15
43787: PUSH
43788: LD_INT 5
43790: EQUAL
43791: IFFALSE 43801
// r := 0 ;
43793: LD_ADDR_VAR 0 15
43797: PUSH
43798: LD_INT 0
43800: ST_TO_ADDR
// for j = r to 5 do
43801: LD_ADDR_VAR 0 10
43805: PUSH
43806: DOUBLE
43807: LD_VAR 0 15
43811: DEC
43812: ST_TO_ADDR
43813: LD_INT 5
43815: PUSH
43816: FOR_TO
43817: IFFALSE 43931
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43819: LD_ADDR_VAR 0 11
43823: PUSH
43824: LD_VAR 0 13
43828: PPUSH
43829: CALL_OW 250
43833: PPUSH
43834: LD_VAR 0 10
43838: PPUSH
43839: LD_INT 2
43841: PPUSH
43842: CALL_OW 272
43846: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43847: LD_ADDR_VAR 0 12
43851: PUSH
43852: LD_VAR 0 13
43856: PPUSH
43857: CALL_OW 251
43861: PPUSH
43862: LD_VAR 0 10
43866: PPUSH
43867: LD_INT 2
43869: PPUSH
43870: CALL_OW 273
43874: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43875: LD_VAR 0 11
43879: PPUSH
43880: LD_VAR 0 12
43884: PPUSH
43885: CALL_OW 488
43889: PUSH
43890: LD_VAR 0 11
43894: PPUSH
43895: LD_VAR 0 12
43899: PPUSH
43900: CALL_OW 428
43904: NOT
43905: AND
43906: IFFALSE 43929
// begin ComMoveXY ( tmp , _x , _y ) ;
43908: LD_VAR 0 13
43912: PPUSH
43913: LD_VAR 0 11
43917: PPUSH
43918: LD_VAR 0 12
43922: PPUSH
43923: CALL_OW 111
// break ;
43927: GO 43931
// end ; end ;
43929: GO 43816
43931: POP
43932: POP
// end ; end ;
43933: GO 43258
43935: POP
43936: POP
// end ;
43937: LD_VAR 0 8
43941: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43942: LD_INT 0
43944: PPUSH
// result := true ;
43945: LD_ADDR_VAR 0 3
43949: PUSH
43950: LD_INT 1
43952: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43953: LD_VAR 0 2
43957: PUSH
43958: LD_INT 24
43960: DOUBLE
43961: EQUAL
43962: IFTRUE 43972
43964: LD_INT 33
43966: DOUBLE
43967: EQUAL
43968: IFTRUE 43972
43970: GO 43997
43972: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43973: LD_ADDR_VAR 0 3
43977: PUSH
43978: LD_INT 32
43980: PPUSH
43981: LD_VAR 0 1
43985: PPUSH
43986: CALL_OW 321
43990: PUSH
43991: LD_INT 2
43993: EQUAL
43994: ST_TO_ADDR
43995: GO 44313
43997: LD_INT 20
43999: DOUBLE
44000: EQUAL
44001: IFTRUE 44005
44003: GO 44030
44005: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
44006: LD_ADDR_VAR 0 3
44010: PUSH
44011: LD_INT 6
44013: PPUSH
44014: LD_VAR 0 1
44018: PPUSH
44019: CALL_OW 321
44023: PUSH
44024: LD_INT 2
44026: EQUAL
44027: ST_TO_ADDR
44028: GO 44313
44030: LD_INT 22
44032: DOUBLE
44033: EQUAL
44034: IFTRUE 44044
44036: LD_INT 36
44038: DOUBLE
44039: EQUAL
44040: IFTRUE 44044
44042: GO 44069
44044: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
44045: LD_ADDR_VAR 0 3
44049: PUSH
44050: LD_INT 15
44052: PPUSH
44053: LD_VAR 0 1
44057: PPUSH
44058: CALL_OW 321
44062: PUSH
44063: LD_INT 2
44065: EQUAL
44066: ST_TO_ADDR
44067: GO 44313
44069: LD_INT 30
44071: DOUBLE
44072: EQUAL
44073: IFTRUE 44077
44075: GO 44102
44077: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
44078: LD_ADDR_VAR 0 3
44082: PUSH
44083: LD_INT 20
44085: PPUSH
44086: LD_VAR 0 1
44090: PPUSH
44091: CALL_OW 321
44095: PUSH
44096: LD_INT 2
44098: EQUAL
44099: ST_TO_ADDR
44100: GO 44313
44102: LD_INT 28
44104: DOUBLE
44105: EQUAL
44106: IFTRUE 44116
44108: LD_INT 21
44110: DOUBLE
44111: EQUAL
44112: IFTRUE 44116
44114: GO 44141
44116: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
44117: LD_ADDR_VAR 0 3
44121: PUSH
44122: LD_INT 21
44124: PPUSH
44125: LD_VAR 0 1
44129: PPUSH
44130: CALL_OW 321
44134: PUSH
44135: LD_INT 2
44137: EQUAL
44138: ST_TO_ADDR
44139: GO 44313
44141: LD_INT 16
44143: DOUBLE
44144: EQUAL
44145: IFTRUE 44149
44147: GO 44174
44149: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
44150: LD_ADDR_VAR 0 3
44154: PUSH
44155: LD_INT 84
44157: PPUSH
44158: LD_VAR 0 1
44162: PPUSH
44163: CALL_OW 321
44167: PUSH
44168: LD_INT 2
44170: EQUAL
44171: ST_TO_ADDR
44172: GO 44313
44174: LD_INT 19
44176: DOUBLE
44177: EQUAL
44178: IFTRUE 44188
44180: LD_INT 23
44182: DOUBLE
44183: EQUAL
44184: IFTRUE 44188
44186: GO 44213
44188: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
44189: LD_ADDR_VAR 0 3
44193: PUSH
44194: LD_INT 83
44196: PPUSH
44197: LD_VAR 0 1
44201: PPUSH
44202: CALL_OW 321
44206: PUSH
44207: LD_INT 2
44209: EQUAL
44210: ST_TO_ADDR
44211: GO 44313
44213: LD_INT 17
44215: DOUBLE
44216: EQUAL
44217: IFTRUE 44221
44219: GO 44246
44221: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
44222: LD_ADDR_VAR 0 3
44226: PUSH
44227: LD_INT 39
44229: PPUSH
44230: LD_VAR 0 1
44234: PPUSH
44235: CALL_OW 321
44239: PUSH
44240: LD_INT 2
44242: EQUAL
44243: ST_TO_ADDR
44244: GO 44313
44246: LD_INT 18
44248: DOUBLE
44249: EQUAL
44250: IFTRUE 44254
44252: GO 44279
44254: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
44255: LD_ADDR_VAR 0 3
44259: PUSH
44260: LD_INT 40
44262: PPUSH
44263: LD_VAR 0 1
44267: PPUSH
44268: CALL_OW 321
44272: PUSH
44273: LD_INT 2
44275: EQUAL
44276: ST_TO_ADDR
44277: GO 44313
44279: LD_INT 27
44281: DOUBLE
44282: EQUAL
44283: IFTRUE 44287
44285: GO 44312
44287: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
44288: LD_ADDR_VAR 0 3
44292: PUSH
44293: LD_INT 35
44295: PPUSH
44296: LD_VAR 0 1
44300: PPUSH
44301: CALL_OW 321
44305: PUSH
44306: LD_INT 2
44308: EQUAL
44309: ST_TO_ADDR
44310: GO 44313
44312: POP
// end ;
44313: LD_VAR 0 3
44317: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44318: LD_INT 0
44320: PPUSH
44321: PPUSH
44322: PPUSH
44323: PPUSH
44324: PPUSH
44325: PPUSH
44326: PPUSH
44327: PPUSH
44328: PPUSH
44329: PPUSH
44330: PPUSH
// result := false ;
44331: LD_ADDR_VAR 0 6
44335: PUSH
44336: LD_INT 0
44338: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44339: LD_VAR 0 1
44343: NOT
44344: PUSH
44345: LD_VAR 0 1
44349: PPUSH
44350: CALL_OW 266
44354: PUSH
44355: LD_INT 0
44357: PUSH
44358: LD_INT 1
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: IN
44365: NOT
44366: OR
44367: PUSH
44368: LD_VAR 0 2
44372: NOT
44373: OR
44374: PUSH
44375: LD_VAR 0 5
44379: PUSH
44380: LD_INT 0
44382: PUSH
44383: LD_INT 1
44385: PUSH
44386: LD_INT 2
44388: PUSH
44389: LD_INT 3
44391: PUSH
44392: LD_INT 4
44394: PUSH
44395: LD_INT 5
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: IN
44406: NOT
44407: OR
44408: PUSH
44409: LD_VAR 0 3
44413: PPUSH
44414: LD_VAR 0 4
44418: PPUSH
44419: CALL_OW 488
44423: NOT
44424: OR
44425: IFFALSE 44429
// exit ;
44427: GO 45165
// side := GetSide ( depot ) ;
44429: LD_ADDR_VAR 0 9
44433: PUSH
44434: LD_VAR 0 1
44438: PPUSH
44439: CALL_OW 255
44443: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44444: LD_VAR 0 9
44448: PPUSH
44449: LD_VAR 0 2
44453: PPUSH
44454: CALL 43942 0 2
44458: NOT
44459: IFFALSE 44463
// exit ;
44461: GO 45165
// pom := GetBase ( depot ) ;
44463: LD_ADDR_VAR 0 10
44467: PUSH
44468: LD_VAR 0 1
44472: PPUSH
44473: CALL_OW 274
44477: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44478: LD_ADDR_VAR 0 11
44482: PUSH
44483: LD_VAR 0 2
44487: PPUSH
44488: LD_VAR 0 1
44492: PPUSH
44493: CALL_OW 248
44497: PPUSH
44498: CALL_OW 450
44502: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44503: LD_VAR 0 10
44507: PPUSH
44508: LD_INT 1
44510: PPUSH
44511: CALL_OW 275
44515: PUSH
44516: LD_VAR 0 11
44520: PUSH
44521: LD_INT 1
44523: ARRAY
44524: GREATEREQUAL
44525: PUSH
44526: LD_VAR 0 10
44530: PPUSH
44531: LD_INT 2
44533: PPUSH
44534: CALL_OW 275
44538: PUSH
44539: LD_VAR 0 11
44543: PUSH
44544: LD_INT 2
44546: ARRAY
44547: GREATEREQUAL
44548: AND
44549: PUSH
44550: LD_VAR 0 10
44554: PPUSH
44555: LD_INT 3
44557: PPUSH
44558: CALL_OW 275
44562: PUSH
44563: LD_VAR 0 11
44567: PUSH
44568: LD_INT 3
44570: ARRAY
44571: GREATEREQUAL
44572: AND
44573: NOT
44574: IFFALSE 44578
// exit ;
44576: GO 45165
// if GetBType ( depot ) = b_depot then
44578: LD_VAR 0 1
44582: PPUSH
44583: CALL_OW 266
44587: PUSH
44588: LD_INT 0
44590: EQUAL
44591: IFFALSE 44603
// dist := 28 else
44593: LD_ADDR_VAR 0 14
44597: PUSH
44598: LD_INT 28
44600: ST_TO_ADDR
44601: GO 44611
// dist := 36 ;
44603: LD_ADDR_VAR 0 14
44607: PUSH
44608: LD_INT 36
44610: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44611: LD_VAR 0 1
44615: PPUSH
44616: LD_VAR 0 3
44620: PPUSH
44621: LD_VAR 0 4
44625: PPUSH
44626: CALL_OW 297
44630: PUSH
44631: LD_VAR 0 14
44635: GREATER
44636: IFFALSE 44640
// exit ;
44638: GO 45165
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44640: LD_ADDR_VAR 0 12
44644: PUSH
44645: LD_VAR 0 2
44649: PPUSH
44650: LD_VAR 0 3
44654: PPUSH
44655: LD_VAR 0 4
44659: PPUSH
44660: LD_VAR 0 5
44664: PPUSH
44665: LD_VAR 0 1
44669: PPUSH
44670: CALL_OW 248
44674: PPUSH
44675: LD_INT 0
44677: PPUSH
44678: CALL 45170 0 6
44682: ST_TO_ADDR
// if not hexes then
44683: LD_VAR 0 12
44687: NOT
44688: IFFALSE 44692
// exit ;
44690: GO 45165
// hex := GetHexInfo ( x , y ) ;
44692: LD_ADDR_VAR 0 15
44696: PUSH
44697: LD_VAR 0 3
44701: PPUSH
44702: LD_VAR 0 4
44706: PPUSH
44707: CALL_OW 546
44711: ST_TO_ADDR
// if hex [ 1 ] then
44712: LD_VAR 0 15
44716: PUSH
44717: LD_INT 1
44719: ARRAY
44720: IFFALSE 44724
// exit ;
44722: GO 45165
// height := hex [ 2 ] ;
44724: LD_ADDR_VAR 0 13
44728: PUSH
44729: LD_VAR 0 15
44733: PUSH
44734: LD_INT 2
44736: ARRAY
44737: ST_TO_ADDR
// for i = 1 to hexes do
44738: LD_ADDR_VAR 0 7
44742: PUSH
44743: DOUBLE
44744: LD_INT 1
44746: DEC
44747: ST_TO_ADDR
44748: LD_VAR 0 12
44752: PUSH
44753: FOR_TO
44754: IFFALSE 45084
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44756: LD_VAR 0 12
44760: PUSH
44761: LD_VAR 0 7
44765: ARRAY
44766: PUSH
44767: LD_INT 1
44769: ARRAY
44770: PPUSH
44771: LD_VAR 0 12
44775: PUSH
44776: LD_VAR 0 7
44780: ARRAY
44781: PUSH
44782: LD_INT 2
44784: ARRAY
44785: PPUSH
44786: CALL_OW 488
44790: NOT
44791: PUSH
44792: LD_VAR 0 12
44796: PUSH
44797: LD_VAR 0 7
44801: ARRAY
44802: PUSH
44803: LD_INT 1
44805: ARRAY
44806: PPUSH
44807: LD_VAR 0 12
44811: PUSH
44812: LD_VAR 0 7
44816: ARRAY
44817: PUSH
44818: LD_INT 2
44820: ARRAY
44821: PPUSH
44822: CALL_OW 428
44826: PUSH
44827: LD_INT 0
44829: GREATER
44830: OR
44831: PUSH
44832: LD_VAR 0 12
44836: PUSH
44837: LD_VAR 0 7
44841: ARRAY
44842: PUSH
44843: LD_INT 1
44845: ARRAY
44846: PPUSH
44847: LD_VAR 0 12
44851: PUSH
44852: LD_VAR 0 7
44856: ARRAY
44857: PUSH
44858: LD_INT 2
44860: ARRAY
44861: PPUSH
44862: CALL_OW 351
44866: OR
44867: IFFALSE 44873
// exit ;
44869: POP
44870: POP
44871: GO 45165
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44873: LD_ADDR_VAR 0 8
44877: PUSH
44878: LD_VAR 0 12
44882: PUSH
44883: LD_VAR 0 7
44887: ARRAY
44888: PUSH
44889: LD_INT 1
44891: ARRAY
44892: PPUSH
44893: LD_VAR 0 12
44897: PUSH
44898: LD_VAR 0 7
44902: ARRAY
44903: PUSH
44904: LD_INT 2
44906: ARRAY
44907: PPUSH
44908: CALL_OW 546
44912: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44913: LD_VAR 0 8
44917: PUSH
44918: LD_INT 1
44920: ARRAY
44921: PUSH
44922: LD_VAR 0 8
44926: PUSH
44927: LD_INT 2
44929: ARRAY
44930: PUSH
44931: LD_VAR 0 13
44935: PUSH
44936: LD_INT 2
44938: PLUS
44939: GREATER
44940: OR
44941: PUSH
44942: LD_VAR 0 8
44946: PUSH
44947: LD_INT 2
44949: ARRAY
44950: PUSH
44951: LD_VAR 0 13
44955: PUSH
44956: LD_INT 2
44958: MINUS
44959: LESS
44960: OR
44961: PUSH
44962: LD_VAR 0 8
44966: PUSH
44967: LD_INT 3
44969: ARRAY
44970: PUSH
44971: LD_INT 0
44973: PUSH
44974: LD_INT 8
44976: PUSH
44977: LD_INT 9
44979: PUSH
44980: LD_INT 10
44982: PUSH
44983: LD_INT 11
44985: PUSH
44986: LD_INT 12
44988: PUSH
44989: LD_INT 13
44991: PUSH
44992: LD_INT 16
44994: PUSH
44995: LD_INT 17
44997: PUSH
44998: LD_INT 18
45000: PUSH
45001: LD_INT 19
45003: PUSH
45004: LD_INT 20
45006: PUSH
45007: LD_INT 21
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: LIST
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: LIST
45024: IN
45025: NOT
45026: OR
45027: PUSH
45028: LD_VAR 0 8
45032: PUSH
45033: LD_INT 5
45035: ARRAY
45036: NOT
45037: OR
45038: PUSH
45039: LD_VAR 0 8
45043: PUSH
45044: LD_INT 6
45046: ARRAY
45047: PUSH
45048: LD_INT 1
45050: PUSH
45051: LD_INT 2
45053: PUSH
45054: LD_INT 7
45056: PUSH
45057: LD_INT 9
45059: PUSH
45060: LD_INT 10
45062: PUSH
45063: LD_INT 11
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: IN
45074: NOT
45075: OR
45076: IFFALSE 45082
// exit ;
45078: POP
45079: POP
45080: GO 45165
// end ;
45082: GO 44753
45084: POP
45085: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45086: LD_VAR 0 9
45090: PPUSH
45091: LD_VAR 0 3
45095: PPUSH
45096: LD_VAR 0 4
45100: PPUSH
45101: LD_INT 20
45103: PPUSH
45104: CALL 37117 0 4
45108: PUSH
45109: LD_INT 4
45111: ARRAY
45112: IFFALSE 45116
// exit ;
45114: GO 45165
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45116: LD_VAR 0 2
45120: PUSH
45121: LD_INT 29
45123: PUSH
45124: LD_INT 30
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: IN
45131: PUSH
45132: LD_VAR 0 3
45136: PPUSH
45137: LD_VAR 0 4
45141: PPUSH
45142: LD_VAR 0 9
45146: PPUSH
45147: CALL_OW 440
45151: NOT
45152: AND
45153: IFFALSE 45157
// exit ;
45155: GO 45165
// result := true ;
45157: LD_ADDR_VAR 0 6
45161: PUSH
45162: LD_INT 1
45164: ST_TO_ADDR
// end ;
45165: LD_VAR 0 6
45169: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45170: LD_INT 0
45172: PPUSH
45173: PPUSH
45174: PPUSH
45175: PPUSH
45176: PPUSH
45177: PPUSH
45178: PPUSH
45179: PPUSH
45180: PPUSH
45181: PPUSH
45182: PPUSH
45183: PPUSH
45184: PPUSH
45185: PPUSH
45186: PPUSH
45187: PPUSH
45188: PPUSH
45189: PPUSH
45190: PPUSH
45191: PPUSH
45192: PPUSH
45193: PPUSH
45194: PPUSH
45195: PPUSH
45196: PPUSH
45197: PPUSH
45198: PPUSH
45199: PPUSH
45200: PPUSH
45201: PPUSH
45202: PPUSH
45203: PPUSH
45204: PPUSH
45205: PPUSH
45206: PPUSH
45207: PPUSH
45208: PPUSH
45209: PPUSH
45210: PPUSH
45211: PPUSH
45212: PPUSH
45213: PPUSH
45214: PPUSH
45215: PPUSH
45216: PPUSH
45217: PPUSH
45218: PPUSH
45219: PPUSH
45220: PPUSH
45221: PPUSH
45222: PPUSH
45223: PPUSH
45224: PPUSH
45225: PPUSH
45226: PPUSH
45227: PPUSH
45228: PPUSH
45229: PPUSH
// result = [ ] ;
45230: LD_ADDR_VAR 0 7
45234: PUSH
45235: EMPTY
45236: ST_TO_ADDR
// temp_list = [ ] ;
45237: LD_ADDR_VAR 0 9
45241: PUSH
45242: EMPTY
45243: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45244: LD_VAR 0 4
45248: PUSH
45249: LD_INT 0
45251: PUSH
45252: LD_INT 1
45254: PUSH
45255: LD_INT 2
45257: PUSH
45258: LD_INT 3
45260: PUSH
45261: LD_INT 4
45263: PUSH
45264: LD_INT 5
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: IN
45275: NOT
45276: PUSH
45277: LD_VAR 0 1
45281: PUSH
45282: LD_INT 0
45284: PUSH
45285: LD_INT 1
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: IN
45292: PUSH
45293: LD_VAR 0 5
45297: PUSH
45298: LD_INT 1
45300: PUSH
45301: LD_INT 2
45303: PUSH
45304: LD_INT 3
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: LIST
45311: IN
45312: NOT
45313: AND
45314: OR
45315: IFFALSE 45319
// exit ;
45317: GO 63710
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45319: LD_VAR 0 1
45323: PUSH
45324: LD_INT 6
45326: PUSH
45327: LD_INT 7
45329: PUSH
45330: LD_INT 8
45332: PUSH
45333: LD_INT 13
45335: PUSH
45336: LD_INT 12
45338: PUSH
45339: LD_INT 15
45341: PUSH
45342: LD_INT 11
45344: PUSH
45345: LD_INT 14
45347: PUSH
45348: LD_INT 10
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: LIST
45360: LIST
45361: IN
45362: IFFALSE 45372
// btype = b_lab ;
45364: LD_ADDR_VAR 0 1
45368: PUSH
45369: LD_INT 6
45371: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45372: LD_VAR 0 6
45376: PUSH
45377: LD_INT 0
45379: PUSH
45380: LD_INT 1
45382: PUSH
45383: LD_INT 2
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: LIST
45390: IN
45391: NOT
45392: PUSH
45393: LD_VAR 0 1
45397: PUSH
45398: LD_INT 0
45400: PUSH
45401: LD_INT 1
45403: PUSH
45404: LD_INT 2
45406: PUSH
45407: LD_INT 3
45409: PUSH
45410: LD_INT 6
45412: PUSH
45413: LD_INT 36
45415: PUSH
45416: LD_INT 4
45418: PUSH
45419: LD_INT 5
45421: PUSH
45422: LD_INT 31
45424: PUSH
45425: LD_INT 32
45427: PUSH
45428: LD_INT 33
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: IN
45444: NOT
45445: PUSH
45446: LD_VAR 0 6
45450: PUSH
45451: LD_INT 1
45453: EQUAL
45454: AND
45455: OR
45456: PUSH
45457: LD_VAR 0 1
45461: PUSH
45462: LD_INT 2
45464: PUSH
45465: LD_INT 3
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: IN
45472: NOT
45473: PUSH
45474: LD_VAR 0 6
45478: PUSH
45479: LD_INT 2
45481: EQUAL
45482: AND
45483: OR
45484: IFFALSE 45494
// mode = 0 ;
45486: LD_ADDR_VAR 0 6
45490: PUSH
45491: LD_INT 0
45493: ST_TO_ADDR
// case mode of 0 :
45494: LD_VAR 0 6
45498: PUSH
45499: LD_INT 0
45501: DOUBLE
45502: EQUAL
45503: IFTRUE 45507
45505: GO 56960
45507: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45508: LD_ADDR_VAR 0 11
45512: PUSH
45513: LD_INT 0
45515: PUSH
45516: LD_INT 0
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 0
45525: PUSH
45526: LD_INT 1
45528: NEG
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 1
45536: PUSH
45537: LD_INT 0
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 1
45546: PUSH
45547: LD_INT 1
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: LD_INT 0
45556: PUSH
45557: LD_INT 1
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 1
45566: NEG
45567: PUSH
45568: LD_INT 0
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 1
45577: NEG
45578: PUSH
45579: LD_INT 1
45581: NEG
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 1
45589: NEG
45590: PUSH
45591: LD_INT 2
45593: NEG
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 0
45601: PUSH
45602: LD_INT 2
45604: NEG
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: LD_INT 1
45612: PUSH
45613: LD_INT 1
45615: NEG
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 1
45623: PUSH
45624: LD_INT 2
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 0
45633: PUSH
45634: LD_INT 2
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 1
45643: NEG
45644: PUSH
45645: LD_INT 1
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 1
45654: PUSH
45655: LD_INT 3
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 0
45664: PUSH
45665: LD_INT 3
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 1
45674: NEG
45675: PUSH
45676: LD_INT 2
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45701: LD_ADDR_VAR 0 12
45705: PUSH
45706: LD_INT 0
45708: PUSH
45709: LD_INT 0
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 0
45718: PUSH
45719: LD_INT 1
45721: NEG
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 1
45729: PUSH
45730: LD_INT 0
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 1
45739: PUSH
45740: LD_INT 1
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 0
45749: PUSH
45750: LD_INT 1
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 1
45759: NEG
45760: PUSH
45761: LD_INT 0
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 1
45770: NEG
45771: PUSH
45772: LD_INT 1
45774: NEG
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 1
45782: PUSH
45783: LD_INT 1
45785: NEG
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 2
45793: PUSH
45794: LD_INT 0
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 2
45803: PUSH
45804: LD_INT 1
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 1
45813: NEG
45814: PUSH
45815: LD_INT 1
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 2
45824: NEG
45825: PUSH
45826: LD_INT 0
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 2
45835: NEG
45836: PUSH
45837: LD_INT 1
45839: NEG
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 2
45847: NEG
45848: PUSH
45849: LD_INT 1
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 3
45858: NEG
45859: PUSH
45860: LD_INT 0
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 3
45869: NEG
45870: PUSH
45871: LD_INT 1
45873: NEG
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45897: LD_ADDR_VAR 0 13
45901: PUSH
45902: LD_INT 0
45904: PUSH
45905: LD_INT 0
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 0
45914: PUSH
45915: LD_INT 1
45917: NEG
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 1
45925: PUSH
45926: LD_INT 0
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 1
45935: PUSH
45936: LD_INT 1
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 0
45945: PUSH
45946: LD_INT 1
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 1
45955: NEG
45956: PUSH
45957: LD_INT 0
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 1
45966: NEG
45967: PUSH
45968: LD_INT 1
45970: NEG
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 1
45978: NEG
45979: PUSH
45980: LD_INT 2
45982: NEG
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 2
45990: PUSH
45991: LD_INT 1
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 2
46000: PUSH
46001: LD_INT 2
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 1
46010: PUSH
46011: LD_INT 2
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 2
46020: NEG
46021: PUSH
46022: LD_INT 1
46024: NEG
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 2
46032: NEG
46033: PUSH
46034: LD_INT 2
46036: NEG
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 2
46044: NEG
46045: PUSH
46046: LD_INT 3
46048: NEG
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 3
46056: NEG
46057: PUSH
46058: LD_INT 2
46060: NEG
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 3
46068: NEG
46069: PUSH
46070: LD_INT 3
46072: NEG
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46096: LD_ADDR_VAR 0 14
46100: PUSH
46101: LD_INT 0
46103: PUSH
46104: LD_INT 0
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 0
46113: PUSH
46114: LD_INT 1
46116: NEG
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 1
46124: PUSH
46125: LD_INT 0
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 1
46134: PUSH
46135: LD_INT 1
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 0
46144: PUSH
46145: LD_INT 1
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 1
46154: NEG
46155: PUSH
46156: LD_INT 0
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 1
46165: NEG
46166: PUSH
46167: LD_INT 1
46169: NEG
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 1
46177: NEG
46178: PUSH
46179: LD_INT 2
46181: NEG
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 0
46189: PUSH
46190: LD_INT 2
46192: NEG
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 1
46200: PUSH
46201: LD_INT 1
46203: NEG
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 1
46211: PUSH
46212: LD_INT 2
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 0
46221: PUSH
46222: LD_INT 2
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 1
46231: NEG
46232: PUSH
46233: LD_INT 1
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 1
46242: NEG
46243: PUSH
46244: LD_INT 3
46246: NEG
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 0
46254: PUSH
46255: LD_INT 3
46257: NEG
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 1
46265: PUSH
46266: LD_INT 2
46268: NEG
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46292: LD_ADDR_VAR 0 15
46296: PUSH
46297: LD_INT 0
46299: PUSH
46300: LD_INT 0
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 0
46309: PUSH
46310: LD_INT 1
46312: NEG
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 1
46320: PUSH
46321: LD_INT 0
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 1
46330: PUSH
46331: LD_INT 1
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: LD_INT 0
46340: PUSH
46341: LD_INT 1
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 1
46350: NEG
46351: PUSH
46352: LD_INT 0
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 1
46361: NEG
46362: PUSH
46363: LD_INT 1
46365: NEG
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 1
46373: PUSH
46374: LD_INT 1
46376: NEG
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: LD_INT 2
46384: PUSH
46385: LD_INT 0
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 2
46394: PUSH
46395: LD_INT 1
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 1
46404: NEG
46405: PUSH
46406: LD_INT 1
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 2
46415: NEG
46416: PUSH
46417: LD_INT 0
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 2
46426: NEG
46427: PUSH
46428: LD_INT 1
46430: NEG
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 2
46438: PUSH
46439: LD_INT 1
46441: NEG
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 3
46449: PUSH
46450: LD_INT 0
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 3
46459: PUSH
46460: LD_INT 1
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46485: LD_ADDR_VAR 0 16
46489: PUSH
46490: LD_INT 0
46492: PUSH
46493: LD_INT 0
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 0
46502: PUSH
46503: LD_INT 1
46505: NEG
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 1
46513: PUSH
46514: LD_INT 0
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 1
46523: PUSH
46524: LD_INT 1
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 0
46533: PUSH
46534: LD_INT 1
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 1
46543: NEG
46544: PUSH
46545: LD_INT 0
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 1
46554: NEG
46555: PUSH
46556: LD_INT 1
46558: NEG
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 1
46566: NEG
46567: PUSH
46568: LD_INT 2
46570: NEG
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 2
46578: PUSH
46579: LD_INT 1
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 2
46588: PUSH
46589: LD_INT 2
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 1
46598: PUSH
46599: LD_INT 2
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 2
46608: NEG
46609: PUSH
46610: LD_INT 1
46612: NEG
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 2
46620: NEG
46621: PUSH
46622: LD_INT 2
46624: NEG
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 3
46632: PUSH
46633: LD_INT 2
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 3
46642: PUSH
46643: LD_INT 3
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 2
46652: PUSH
46653: LD_INT 3
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46678: LD_ADDR_VAR 0 17
46682: PUSH
46683: LD_INT 0
46685: PUSH
46686: LD_INT 0
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 0
46695: PUSH
46696: LD_INT 1
46698: NEG
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 1
46706: PUSH
46707: LD_INT 0
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 1
46716: PUSH
46717: LD_INT 1
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 0
46726: PUSH
46727: LD_INT 1
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 1
46736: NEG
46737: PUSH
46738: LD_INT 0
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 1
46747: NEG
46748: PUSH
46749: LD_INT 1
46751: NEG
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 1
46759: NEG
46760: PUSH
46761: LD_INT 2
46763: NEG
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 0
46771: PUSH
46772: LD_INT 2
46774: NEG
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 1
46782: PUSH
46783: LD_INT 1
46785: NEG
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 2
46793: PUSH
46794: LD_INT 0
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 2
46803: PUSH
46804: LD_INT 1
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 2
46813: PUSH
46814: LD_INT 2
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 1
46823: PUSH
46824: LD_INT 2
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 0
46833: PUSH
46834: LD_INT 2
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 1
46843: NEG
46844: PUSH
46845: LD_INT 1
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 2
46854: NEG
46855: PUSH
46856: LD_INT 0
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 2
46865: NEG
46866: PUSH
46867: LD_INT 1
46869: NEG
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 2
46877: NEG
46878: PUSH
46879: LD_INT 2
46881: NEG
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46908: LD_ADDR_VAR 0 18
46912: PUSH
46913: LD_INT 0
46915: PUSH
46916: LD_INT 0
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 0
46925: PUSH
46926: LD_INT 1
46928: NEG
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 1
46936: PUSH
46937: LD_INT 0
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 1
46946: PUSH
46947: LD_INT 1
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 0
46956: PUSH
46957: LD_INT 1
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 1
46966: NEG
46967: PUSH
46968: LD_INT 0
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 1
46977: NEG
46978: PUSH
46979: LD_INT 1
46981: NEG
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 1
46989: NEG
46990: PUSH
46991: LD_INT 2
46993: NEG
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 0
47001: PUSH
47002: LD_INT 2
47004: NEG
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 1
47012: PUSH
47013: LD_INT 1
47015: NEG
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 2
47023: PUSH
47024: LD_INT 0
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 2
47033: PUSH
47034: LD_INT 1
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 2
47043: PUSH
47044: LD_INT 2
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 1
47053: PUSH
47054: LD_INT 2
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 0
47063: PUSH
47064: LD_INT 2
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 1
47073: NEG
47074: PUSH
47075: LD_INT 1
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 2
47084: NEG
47085: PUSH
47086: LD_INT 0
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 2
47095: NEG
47096: PUSH
47097: LD_INT 1
47099: NEG
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 2
47107: NEG
47108: PUSH
47109: LD_INT 2
47111: NEG
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47138: LD_ADDR_VAR 0 19
47142: PUSH
47143: LD_INT 0
47145: PUSH
47146: LD_INT 0
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 0
47155: PUSH
47156: LD_INT 1
47158: NEG
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 1
47166: PUSH
47167: LD_INT 0
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 1
47176: PUSH
47177: LD_INT 1
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 0
47186: PUSH
47187: LD_INT 1
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 1
47196: NEG
47197: PUSH
47198: LD_INT 0
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 1
47207: NEG
47208: PUSH
47209: LD_INT 1
47211: NEG
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 1
47219: NEG
47220: PUSH
47221: LD_INT 2
47223: NEG
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 0
47231: PUSH
47232: LD_INT 2
47234: NEG
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 1
47242: PUSH
47243: LD_INT 1
47245: NEG
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 2
47253: PUSH
47254: LD_INT 0
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 2
47263: PUSH
47264: LD_INT 1
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 2
47273: PUSH
47274: LD_INT 2
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 1
47283: PUSH
47284: LD_INT 2
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 0
47293: PUSH
47294: LD_INT 2
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 1
47303: NEG
47304: PUSH
47305: LD_INT 1
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 2
47314: NEG
47315: PUSH
47316: LD_INT 0
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 2
47325: NEG
47326: PUSH
47327: LD_INT 1
47329: NEG
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 2
47337: NEG
47338: PUSH
47339: LD_INT 2
47341: NEG
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: LIST
47351: LIST
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47368: LD_ADDR_VAR 0 20
47372: PUSH
47373: LD_INT 0
47375: PUSH
47376: LD_INT 0
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 0
47385: PUSH
47386: LD_INT 1
47388: NEG
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 1
47396: PUSH
47397: LD_INT 0
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 1
47406: PUSH
47407: LD_INT 1
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 0
47416: PUSH
47417: LD_INT 1
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 1
47426: NEG
47427: PUSH
47428: LD_INT 0
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 1
47437: NEG
47438: PUSH
47439: LD_INT 1
47441: NEG
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 1
47449: NEG
47450: PUSH
47451: LD_INT 2
47453: NEG
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 0
47461: PUSH
47462: LD_INT 2
47464: NEG
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 1
47472: PUSH
47473: LD_INT 1
47475: NEG
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 2
47483: PUSH
47484: LD_INT 0
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 2
47493: PUSH
47494: LD_INT 1
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 2
47503: PUSH
47504: LD_INT 2
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: LD_INT 1
47513: PUSH
47514: LD_INT 2
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 0
47523: PUSH
47524: LD_INT 2
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 1
47533: NEG
47534: PUSH
47535: LD_INT 1
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 2
47544: NEG
47545: PUSH
47546: LD_INT 0
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 2
47555: NEG
47556: PUSH
47557: LD_INT 1
47559: NEG
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 2
47567: NEG
47568: PUSH
47569: LD_INT 2
47571: NEG
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47598: LD_ADDR_VAR 0 21
47602: PUSH
47603: LD_INT 0
47605: PUSH
47606: LD_INT 0
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 0
47615: PUSH
47616: LD_INT 1
47618: NEG
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 1
47626: PUSH
47627: LD_INT 0
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 1
47636: PUSH
47637: LD_INT 1
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 0
47646: PUSH
47647: LD_INT 1
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 1
47656: NEG
47657: PUSH
47658: LD_INT 0
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 1
47667: NEG
47668: PUSH
47669: LD_INT 1
47671: NEG
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 1
47679: NEG
47680: PUSH
47681: LD_INT 2
47683: NEG
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 0
47691: PUSH
47692: LD_INT 2
47694: NEG
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 1
47702: PUSH
47703: LD_INT 1
47705: NEG
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 2
47713: PUSH
47714: LD_INT 0
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 2
47723: PUSH
47724: LD_INT 1
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 2
47733: PUSH
47734: LD_INT 2
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: LD_INT 1
47743: PUSH
47744: LD_INT 2
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 0
47753: PUSH
47754: LD_INT 2
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 1
47763: NEG
47764: PUSH
47765: LD_INT 1
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 2
47774: NEG
47775: PUSH
47776: LD_INT 0
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 2
47785: NEG
47786: PUSH
47787: LD_INT 1
47789: NEG
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 2
47797: NEG
47798: PUSH
47799: LD_INT 2
47801: NEG
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47828: LD_ADDR_VAR 0 22
47832: PUSH
47833: LD_INT 0
47835: PUSH
47836: LD_INT 0
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 0
47845: PUSH
47846: LD_INT 1
47848: NEG
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 1
47856: PUSH
47857: LD_INT 0
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 1
47866: PUSH
47867: LD_INT 1
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 0
47876: PUSH
47877: LD_INT 1
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 1
47886: NEG
47887: PUSH
47888: LD_INT 0
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 1
47897: NEG
47898: PUSH
47899: LD_INT 1
47901: NEG
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 1
47909: NEG
47910: PUSH
47911: LD_INT 2
47913: NEG
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 0
47921: PUSH
47922: LD_INT 2
47924: NEG
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 1
47932: PUSH
47933: LD_INT 1
47935: NEG
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 2
47943: PUSH
47944: LD_INT 0
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 2
47953: PUSH
47954: LD_INT 1
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 2
47963: PUSH
47964: LD_INT 2
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 1
47973: PUSH
47974: LD_INT 2
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 0
47983: PUSH
47984: LD_INT 2
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 1
47993: NEG
47994: PUSH
47995: LD_INT 1
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 2
48004: NEG
48005: PUSH
48006: LD_INT 0
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 2
48015: NEG
48016: PUSH
48017: LD_INT 1
48019: NEG
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 2
48027: NEG
48028: PUSH
48029: LD_INT 2
48031: NEG
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48058: LD_ADDR_VAR 0 23
48062: PUSH
48063: LD_INT 0
48065: PUSH
48066: LD_INT 0
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 0
48075: PUSH
48076: LD_INT 1
48078: NEG
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 1
48086: PUSH
48087: LD_INT 0
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 1
48096: PUSH
48097: LD_INT 1
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 0
48106: PUSH
48107: LD_INT 1
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 1
48116: NEG
48117: PUSH
48118: LD_INT 0
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 1
48127: NEG
48128: PUSH
48129: LD_INT 1
48131: NEG
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 1
48139: NEG
48140: PUSH
48141: LD_INT 2
48143: NEG
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 0
48151: PUSH
48152: LD_INT 2
48154: NEG
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 1
48162: PUSH
48163: LD_INT 1
48165: NEG
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 2
48173: PUSH
48174: LD_INT 0
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 2
48183: PUSH
48184: LD_INT 1
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 2
48193: PUSH
48194: LD_INT 2
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 1
48203: PUSH
48204: LD_INT 2
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 0
48213: PUSH
48214: LD_INT 2
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 1
48223: NEG
48224: PUSH
48225: LD_INT 1
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 2
48234: NEG
48235: PUSH
48236: LD_INT 0
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 2
48245: NEG
48246: PUSH
48247: LD_INT 1
48249: NEG
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 2
48257: NEG
48258: PUSH
48259: LD_INT 2
48261: NEG
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 2
48269: NEG
48270: PUSH
48271: LD_INT 3
48273: NEG
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 1
48281: NEG
48282: PUSH
48283: LD_INT 3
48285: NEG
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 1
48293: PUSH
48294: LD_INT 2
48296: NEG
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 2
48304: PUSH
48305: LD_INT 1
48307: NEG
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48338: LD_ADDR_VAR 0 24
48342: PUSH
48343: LD_INT 0
48345: PUSH
48346: LD_INT 0
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 0
48355: PUSH
48356: LD_INT 1
48358: NEG
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 1
48366: PUSH
48367: LD_INT 0
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 1
48376: PUSH
48377: LD_INT 1
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: LD_INT 0
48386: PUSH
48387: LD_INT 1
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 1
48396: NEG
48397: PUSH
48398: LD_INT 0
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 1
48407: NEG
48408: PUSH
48409: LD_INT 1
48411: NEG
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 1
48419: NEG
48420: PUSH
48421: LD_INT 2
48423: NEG
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 0
48431: PUSH
48432: LD_INT 2
48434: NEG
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 1
48442: PUSH
48443: LD_INT 1
48445: NEG
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 2
48453: PUSH
48454: LD_INT 0
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 2
48463: PUSH
48464: LD_INT 1
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 2
48473: PUSH
48474: LD_INT 2
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 1
48483: PUSH
48484: LD_INT 2
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: LD_INT 0
48493: PUSH
48494: LD_INT 2
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 1
48503: NEG
48504: PUSH
48505: LD_INT 1
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 2
48514: NEG
48515: PUSH
48516: LD_INT 0
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 2
48525: NEG
48526: PUSH
48527: LD_INT 1
48529: NEG
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 2
48537: NEG
48538: PUSH
48539: LD_INT 2
48541: NEG
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 1
48549: PUSH
48550: LD_INT 2
48552: NEG
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 2
48560: PUSH
48561: LD_INT 1
48563: NEG
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 3
48571: PUSH
48572: LD_INT 1
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 3
48581: PUSH
48582: LD_INT 2
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48614: LD_ADDR_VAR 0 25
48618: PUSH
48619: LD_INT 0
48621: PUSH
48622: LD_INT 0
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 0
48631: PUSH
48632: LD_INT 1
48634: NEG
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 1
48642: PUSH
48643: LD_INT 0
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 1
48652: PUSH
48653: LD_INT 1
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 0
48662: PUSH
48663: LD_INT 1
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 1
48672: NEG
48673: PUSH
48674: LD_INT 0
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 1
48683: NEG
48684: PUSH
48685: LD_INT 1
48687: NEG
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 1
48695: NEG
48696: PUSH
48697: LD_INT 2
48699: NEG
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 0
48707: PUSH
48708: LD_INT 2
48710: NEG
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 1
48718: PUSH
48719: LD_INT 1
48721: NEG
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 2
48729: PUSH
48730: LD_INT 0
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 2
48739: PUSH
48740: LD_INT 1
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 2
48749: PUSH
48750: LD_INT 2
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 1
48759: PUSH
48760: LD_INT 2
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 0
48769: PUSH
48770: LD_INT 2
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 1
48779: NEG
48780: PUSH
48781: LD_INT 1
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 2
48790: NEG
48791: PUSH
48792: LD_INT 0
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 2
48801: NEG
48802: PUSH
48803: LD_INT 1
48805: NEG
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 2
48813: NEG
48814: PUSH
48815: LD_INT 2
48817: NEG
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 3
48825: PUSH
48826: LD_INT 1
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 3
48835: PUSH
48836: LD_INT 2
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 2
48845: PUSH
48846: LD_INT 3
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 1
48855: PUSH
48856: LD_INT 3
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48888: LD_ADDR_VAR 0 26
48892: PUSH
48893: LD_INT 0
48895: PUSH
48896: LD_INT 0
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 0
48905: PUSH
48906: LD_INT 1
48908: NEG
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 1
48916: PUSH
48917: LD_INT 0
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 1
48926: PUSH
48927: LD_INT 1
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 0
48936: PUSH
48937: LD_INT 1
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: LD_INT 1
48946: NEG
48947: PUSH
48948: LD_INT 0
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 1
48957: NEG
48958: PUSH
48959: LD_INT 1
48961: NEG
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 1
48969: NEG
48970: PUSH
48971: LD_INT 2
48973: NEG
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 0
48981: PUSH
48982: LD_INT 2
48984: NEG
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 1
48992: PUSH
48993: LD_INT 1
48995: NEG
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 2
49003: PUSH
49004: LD_INT 0
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 2
49013: PUSH
49014: LD_INT 1
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 2
49023: PUSH
49024: LD_INT 2
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 1
49033: PUSH
49034: LD_INT 2
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 0
49043: PUSH
49044: LD_INT 2
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: LD_INT 1
49053: NEG
49054: PUSH
49055: LD_INT 1
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: LD_INT 2
49064: NEG
49065: PUSH
49066: LD_INT 0
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 2
49075: NEG
49076: PUSH
49077: LD_INT 1
49079: NEG
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 2
49087: NEG
49088: PUSH
49089: LD_INT 2
49091: NEG
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 2
49099: PUSH
49100: LD_INT 3
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 1
49109: PUSH
49110: LD_INT 3
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 1
49119: NEG
49120: PUSH
49121: LD_INT 2
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 2
49130: NEG
49131: PUSH
49132: LD_INT 1
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49164: LD_ADDR_VAR 0 27
49168: PUSH
49169: LD_INT 0
49171: PUSH
49172: LD_INT 0
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 0
49181: PUSH
49182: LD_INT 1
49184: NEG
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 1
49192: PUSH
49193: LD_INT 0
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 1
49202: PUSH
49203: LD_INT 1
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 0
49212: PUSH
49213: LD_INT 1
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 1
49222: NEG
49223: PUSH
49224: LD_INT 0
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 1
49233: NEG
49234: PUSH
49235: LD_INT 1
49237: NEG
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 1
49245: NEG
49246: PUSH
49247: LD_INT 2
49249: NEG
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 0
49257: PUSH
49258: LD_INT 2
49260: NEG
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 1
49268: PUSH
49269: LD_INT 1
49271: NEG
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 2
49279: PUSH
49280: LD_INT 0
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: LD_INT 2
49289: PUSH
49290: LD_INT 1
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: LD_INT 2
49299: PUSH
49300: LD_INT 2
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 1
49309: PUSH
49310: LD_INT 2
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 0
49319: PUSH
49320: LD_INT 2
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 1
49329: NEG
49330: PUSH
49331: LD_INT 1
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 2
49340: NEG
49341: PUSH
49342: LD_INT 0
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 2
49351: NEG
49352: PUSH
49353: LD_INT 1
49355: NEG
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 2
49363: NEG
49364: PUSH
49365: LD_INT 2
49367: NEG
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 1
49375: NEG
49376: PUSH
49377: LD_INT 2
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 2
49386: NEG
49387: PUSH
49388: LD_INT 1
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: LD_INT 3
49397: NEG
49398: PUSH
49399: LD_INT 1
49401: NEG
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 3
49409: NEG
49410: PUSH
49411: LD_INT 2
49413: NEG
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49444: LD_ADDR_VAR 0 28
49448: PUSH
49449: LD_INT 0
49451: PUSH
49452: LD_INT 0
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 0
49461: PUSH
49462: LD_INT 1
49464: NEG
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 1
49472: PUSH
49473: LD_INT 0
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 1
49482: PUSH
49483: LD_INT 1
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 0
49492: PUSH
49493: LD_INT 1
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 1
49502: NEG
49503: PUSH
49504: LD_INT 0
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 1
49513: NEG
49514: PUSH
49515: LD_INT 1
49517: NEG
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 1
49525: NEG
49526: PUSH
49527: LD_INT 2
49529: NEG
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 0
49537: PUSH
49538: LD_INT 2
49540: NEG
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 1
49548: PUSH
49549: LD_INT 1
49551: NEG
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 2
49559: PUSH
49560: LD_INT 0
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 2
49569: PUSH
49570: LD_INT 1
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 2
49579: PUSH
49580: LD_INT 2
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 1
49589: PUSH
49590: LD_INT 2
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 0
49599: PUSH
49600: LD_INT 2
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 1
49609: NEG
49610: PUSH
49611: LD_INT 1
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 2
49620: NEG
49621: PUSH
49622: LD_INT 0
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 2
49631: NEG
49632: PUSH
49633: LD_INT 1
49635: NEG
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 2
49643: NEG
49644: PUSH
49645: LD_INT 2
49647: NEG
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 2
49655: NEG
49656: PUSH
49657: LD_INT 3
49659: NEG
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 1
49667: NEG
49668: PUSH
49669: LD_INT 3
49671: NEG
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 3
49679: NEG
49680: PUSH
49681: LD_INT 1
49683: NEG
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 3
49691: NEG
49692: PUSH
49693: LD_INT 2
49695: NEG
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49726: LD_ADDR_VAR 0 29
49730: PUSH
49731: LD_INT 0
49733: PUSH
49734: LD_INT 0
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 0
49743: PUSH
49744: LD_INT 1
49746: NEG
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 1
49754: PUSH
49755: LD_INT 0
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 1
49764: PUSH
49765: LD_INT 1
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 0
49774: PUSH
49775: LD_INT 1
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 1
49784: NEG
49785: PUSH
49786: LD_INT 0
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 1
49795: NEG
49796: PUSH
49797: LD_INT 1
49799: NEG
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 1
49807: NEG
49808: PUSH
49809: LD_INT 2
49811: NEG
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 0
49819: PUSH
49820: LD_INT 2
49822: NEG
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 1
49830: PUSH
49831: LD_INT 1
49833: NEG
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 2
49841: PUSH
49842: LD_INT 0
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 2
49851: PUSH
49852: LD_INT 1
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 1
49861: PUSH
49862: LD_INT 2
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 0
49871: PUSH
49872: LD_INT 2
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 1
49881: NEG
49882: PUSH
49883: LD_INT 1
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 2
49892: NEG
49893: PUSH
49894: LD_INT 1
49896: NEG
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 2
49904: NEG
49905: PUSH
49906: LD_INT 2
49908: NEG
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 2
49916: NEG
49917: PUSH
49918: LD_INT 3
49920: NEG
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 2
49928: PUSH
49929: LD_INT 1
49931: NEG
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 3
49939: PUSH
49940: LD_INT 1
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 1
49949: PUSH
49950: LD_INT 3
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 1
49959: NEG
49960: PUSH
49961: LD_INT 2
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 3
49970: NEG
49971: PUSH
49972: LD_INT 2
49974: NEG
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50005: LD_ADDR_VAR 0 30
50009: PUSH
50010: LD_INT 0
50012: PUSH
50013: LD_INT 0
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 0
50022: PUSH
50023: LD_INT 1
50025: NEG
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 1
50033: PUSH
50034: LD_INT 0
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 1
50043: PUSH
50044: LD_INT 1
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 0
50053: PUSH
50054: LD_INT 1
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 1
50063: NEG
50064: PUSH
50065: LD_INT 0
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 1
50074: NEG
50075: PUSH
50076: LD_INT 1
50078: NEG
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 1
50086: NEG
50087: PUSH
50088: LD_INT 2
50090: NEG
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 0
50098: PUSH
50099: LD_INT 2
50101: NEG
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 1
50109: PUSH
50110: LD_INT 1
50112: NEG
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 2
50120: PUSH
50121: LD_INT 0
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 2
50130: PUSH
50131: LD_INT 1
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 2
50140: PUSH
50141: LD_INT 2
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 1
50150: PUSH
50151: LD_INT 2
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 1
50160: NEG
50161: PUSH
50162: LD_INT 1
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 2
50171: NEG
50172: PUSH
50173: LD_INT 0
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 2
50182: NEG
50183: PUSH
50184: LD_INT 1
50186: NEG
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 1
50194: NEG
50195: PUSH
50196: LD_INT 3
50198: NEG
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 1
50206: PUSH
50207: LD_INT 2
50209: NEG
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 3
50217: PUSH
50218: LD_INT 2
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 2
50227: PUSH
50228: LD_INT 3
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 2
50237: NEG
50238: PUSH
50239: LD_INT 1
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 3
50248: NEG
50249: PUSH
50250: LD_INT 1
50252: NEG
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50283: LD_ADDR_VAR 0 31
50287: PUSH
50288: LD_INT 0
50290: PUSH
50291: LD_INT 0
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 0
50300: PUSH
50301: LD_INT 1
50303: NEG
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 1
50311: PUSH
50312: LD_INT 0
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 1
50321: PUSH
50322: LD_INT 1
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 0
50331: PUSH
50332: LD_INT 1
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: LD_INT 1
50341: NEG
50342: PUSH
50343: LD_INT 0
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 1
50352: NEG
50353: PUSH
50354: LD_INT 1
50356: NEG
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 1
50364: NEG
50365: PUSH
50366: LD_INT 2
50368: NEG
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 1
50376: PUSH
50377: LD_INT 1
50379: NEG
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 2
50387: PUSH
50388: LD_INT 0
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 2
50397: PUSH
50398: LD_INT 1
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 2
50407: PUSH
50408: LD_INT 2
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 1
50417: PUSH
50418: LD_INT 2
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 0
50427: PUSH
50428: LD_INT 2
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 1
50437: NEG
50438: PUSH
50439: LD_INT 1
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 2
50448: NEG
50449: PUSH
50450: LD_INT 1
50452: NEG
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 2
50460: NEG
50461: PUSH
50462: LD_INT 2
50464: NEG
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 2
50472: NEG
50473: PUSH
50474: LD_INT 3
50476: NEG
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 2
50484: PUSH
50485: LD_INT 1
50487: NEG
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 3
50495: PUSH
50496: LD_INT 1
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 1
50505: PUSH
50506: LD_INT 3
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 1
50515: NEG
50516: PUSH
50517: LD_INT 2
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 3
50526: NEG
50527: PUSH
50528: LD_INT 2
50530: NEG
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50561: LD_ADDR_VAR 0 32
50565: PUSH
50566: LD_INT 0
50568: PUSH
50569: LD_INT 0
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 0
50578: PUSH
50579: LD_INT 1
50581: NEG
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 1
50589: PUSH
50590: LD_INT 0
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: LD_INT 1
50599: PUSH
50600: LD_INT 1
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 0
50609: PUSH
50610: LD_INT 1
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 1
50619: NEG
50620: PUSH
50621: LD_INT 0
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 1
50630: NEG
50631: PUSH
50632: LD_INT 1
50634: NEG
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 1
50642: NEG
50643: PUSH
50644: LD_INT 2
50646: NEG
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 0
50654: PUSH
50655: LD_INT 2
50657: NEG
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 1
50665: PUSH
50666: LD_INT 1
50668: NEG
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 2
50676: PUSH
50677: LD_INT 1
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 2
50686: PUSH
50687: LD_INT 2
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 1
50696: PUSH
50697: LD_INT 2
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 0
50706: PUSH
50707: LD_INT 2
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 1
50716: NEG
50717: PUSH
50718: LD_INT 1
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 2
50727: NEG
50728: PUSH
50729: LD_INT 0
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 2
50738: NEG
50739: PUSH
50740: LD_INT 1
50742: NEG
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 1
50750: NEG
50751: PUSH
50752: LD_INT 3
50754: NEG
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 1
50762: PUSH
50763: LD_INT 2
50765: NEG
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 3
50773: PUSH
50774: LD_INT 2
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 2
50783: PUSH
50784: LD_INT 3
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 2
50793: NEG
50794: PUSH
50795: LD_INT 1
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 3
50804: NEG
50805: PUSH
50806: LD_INT 1
50808: NEG
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50839: LD_ADDR_VAR 0 33
50843: PUSH
50844: LD_INT 0
50846: PUSH
50847: LD_INT 0
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 0
50856: PUSH
50857: LD_INT 1
50859: NEG
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 1
50867: PUSH
50868: LD_INT 0
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 1
50877: PUSH
50878: LD_INT 1
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 0
50887: PUSH
50888: LD_INT 1
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 1
50897: NEG
50898: PUSH
50899: LD_INT 0
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 1
50908: NEG
50909: PUSH
50910: LD_INT 1
50912: NEG
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 1
50920: NEG
50921: PUSH
50922: LD_INT 2
50924: NEG
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 1
50932: PUSH
50933: LD_INT 1
50935: NEG
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 2
50943: PUSH
50944: LD_INT 0
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 2
50953: PUSH
50954: LD_INT 1
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 1
50963: PUSH
50964: LD_INT 2
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 0
50973: PUSH
50974: LD_INT 2
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 1
50983: NEG
50984: PUSH
50985: LD_INT 1
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 2
50994: NEG
50995: PUSH
50996: LD_INT 0
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 2
51005: NEG
51006: PUSH
51007: LD_INT 1
51009: NEG
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 2
51017: NEG
51018: PUSH
51019: LD_INT 2
51021: NEG
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 2
51029: NEG
51030: PUSH
51031: LD_INT 3
51033: NEG
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 2
51041: PUSH
51042: LD_INT 1
51044: NEG
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 3
51052: PUSH
51053: LD_INT 1
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 1
51062: PUSH
51063: LD_INT 3
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 1
51072: NEG
51073: PUSH
51074: LD_INT 2
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 3
51083: NEG
51084: PUSH
51085: LD_INT 2
51087: NEG
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51118: LD_ADDR_VAR 0 34
51122: PUSH
51123: LD_INT 0
51125: PUSH
51126: LD_INT 0
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 0
51135: PUSH
51136: LD_INT 1
51138: NEG
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 1
51146: PUSH
51147: LD_INT 0
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 1
51156: PUSH
51157: LD_INT 1
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: LD_INT 0
51166: PUSH
51167: LD_INT 1
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 1
51176: NEG
51177: PUSH
51178: LD_INT 0
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 1
51187: NEG
51188: PUSH
51189: LD_INT 1
51191: NEG
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 1
51199: NEG
51200: PUSH
51201: LD_INT 2
51203: NEG
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 0
51211: PUSH
51212: LD_INT 2
51214: NEG
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 1
51222: PUSH
51223: LD_INT 1
51225: NEG
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 2
51233: PUSH
51234: LD_INT 1
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 2
51243: PUSH
51244: LD_INT 2
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 1
51253: PUSH
51254: LD_INT 2
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 1
51263: NEG
51264: PUSH
51265: LD_INT 1
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 2
51274: NEG
51275: PUSH
51276: LD_INT 0
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 2
51285: NEG
51286: PUSH
51287: LD_INT 1
51289: NEG
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 2
51297: NEG
51298: PUSH
51299: LD_INT 2
51301: NEG
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 1
51309: NEG
51310: PUSH
51311: LD_INT 3
51313: NEG
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 1
51321: PUSH
51322: LD_INT 2
51324: NEG
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 3
51332: PUSH
51333: LD_INT 2
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 2
51342: PUSH
51343: LD_INT 3
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 2
51352: NEG
51353: PUSH
51354: LD_INT 1
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 3
51363: NEG
51364: PUSH
51365: LD_INT 1
51367: NEG
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51398: LD_ADDR_VAR 0 35
51402: PUSH
51403: LD_INT 0
51405: PUSH
51406: LD_INT 0
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 0
51415: PUSH
51416: LD_INT 1
51418: NEG
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 1
51426: PUSH
51427: LD_INT 0
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 1
51436: PUSH
51437: LD_INT 1
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 0
51446: PUSH
51447: LD_INT 1
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 1
51456: NEG
51457: PUSH
51458: LD_INT 0
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 1
51467: NEG
51468: PUSH
51469: LD_INT 1
51471: NEG
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 2
51479: PUSH
51480: LD_INT 1
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 2
51489: NEG
51490: PUSH
51491: LD_INT 1
51493: NEG
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51510: LD_ADDR_VAR 0 36
51514: PUSH
51515: LD_INT 0
51517: PUSH
51518: LD_INT 0
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 0
51527: PUSH
51528: LD_INT 1
51530: NEG
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 1
51538: PUSH
51539: LD_INT 0
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 1
51548: PUSH
51549: LD_INT 1
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 0
51558: PUSH
51559: LD_INT 1
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 1
51568: NEG
51569: PUSH
51570: LD_INT 0
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 1
51579: NEG
51580: PUSH
51581: LD_INT 1
51583: NEG
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 1
51591: NEG
51592: PUSH
51593: LD_INT 2
51595: NEG
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 1
51603: PUSH
51604: LD_INT 2
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51622: LD_ADDR_VAR 0 37
51626: PUSH
51627: LD_INT 0
51629: PUSH
51630: LD_INT 0
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 0
51639: PUSH
51640: LD_INT 1
51642: NEG
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 1
51650: PUSH
51651: LD_INT 0
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 1
51660: PUSH
51661: LD_INT 1
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 0
51670: PUSH
51671: LD_INT 1
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: LD_INT 1
51680: NEG
51681: PUSH
51682: LD_INT 0
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 1
51691: NEG
51692: PUSH
51693: LD_INT 1
51695: NEG
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 1
51703: PUSH
51704: LD_INT 1
51706: NEG
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 1
51714: NEG
51715: PUSH
51716: LD_INT 1
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51734: LD_ADDR_VAR 0 38
51738: PUSH
51739: LD_INT 0
51741: PUSH
51742: LD_INT 0
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 0
51751: PUSH
51752: LD_INT 1
51754: NEG
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 1
51762: PUSH
51763: LD_INT 0
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 1
51772: PUSH
51773: LD_INT 1
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 0
51782: PUSH
51783: LD_INT 1
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: LD_INT 1
51792: NEG
51793: PUSH
51794: LD_INT 0
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 1
51803: NEG
51804: PUSH
51805: LD_INT 1
51807: NEG
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 2
51815: PUSH
51816: LD_INT 1
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 2
51825: NEG
51826: PUSH
51827: LD_INT 1
51829: NEG
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51846: LD_ADDR_VAR 0 39
51850: PUSH
51851: LD_INT 0
51853: PUSH
51854: LD_INT 0
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 0
51863: PUSH
51864: LD_INT 1
51866: NEG
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 1
51874: PUSH
51875: LD_INT 0
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 1
51884: PUSH
51885: LD_INT 1
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 0
51894: PUSH
51895: LD_INT 1
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 1
51904: NEG
51905: PUSH
51906: LD_INT 0
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 1
51915: NEG
51916: PUSH
51917: LD_INT 1
51919: NEG
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 1
51927: NEG
51928: PUSH
51929: LD_INT 2
51931: NEG
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 1
51939: PUSH
51940: LD_INT 2
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51958: LD_ADDR_VAR 0 40
51962: PUSH
51963: LD_INT 0
51965: PUSH
51966: LD_INT 0
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 0
51975: PUSH
51976: LD_INT 1
51978: NEG
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 1
51986: PUSH
51987: LD_INT 0
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 1
51996: PUSH
51997: LD_INT 1
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 0
52006: PUSH
52007: LD_INT 1
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 1
52016: NEG
52017: PUSH
52018: LD_INT 0
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 1
52027: NEG
52028: PUSH
52029: LD_INT 1
52031: NEG
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 1
52039: PUSH
52040: LD_INT 1
52042: NEG
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 1
52050: NEG
52051: PUSH
52052: LD_INT 1
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52070: LD_ADDR_VAR 0 41
52074: PUSH
52075: LD_INT 0
52077: PUSH
52078: LD_INT 0
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 0
52087: PUSH
52088: LD_INT 1
52090: NEG
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 1
52098: PUSH
52099: LD_INT 0
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 1
52108: PUSH
52109: LD_INT 1
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 0
52118: PUSH
52119: LD_INT 1
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 1
52128: NEG
52129: PUSH
52130: LD_INT 0
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 1
52139: NEG
52140: PUSH
52141: LD_INT 1
52143: NEG
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 1
52151: NEG
52152: PUSH
52153: LD_INT 2
52155: NEG
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 1
52163: PUSH
52164: LD_INT 1
52166: NEG
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 2
52174: PUSH
52175: LD_INT 0
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 2
52184: PUSH
52185: LD_INT 1
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 2
52194: PUSH
52195: LD_INT 2
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 1
52204: PUSH
52205: LD_INT 2
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 1
52214: NEG
52215: PUSH
52216: LD_INT 1
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 2
52225: NEG
52226: PUSH
52227: LD_INT 0
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 2
52236: NEG
52237: PUSH
52238: LD_INT 1
52240: NEG
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 2
52248: NEG
52249: PUSH
52250: LD_INT 2
52252: NEG
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 2
52260: NEG
52261: PUSH
52262: LD_INT 3
52264: NEG
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 2
52272: PUSH
52273: LD_INT 1
52275: NEG
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 3
52283: PUSH
52284: LD_INT 0
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 3
52293: PUSH
52294: LD_INT 1
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 3
52303: PUSH
52304: LD_INT 2
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 3
52313: PUSH
52314: LD_INT 3
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 2
52323: PUSH
52324: LD_INT 3
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 2
52333: NEG
52334: PUSH
52335: LD_INT 1
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 3
52344: NEG
52345: PUSH
52346: LD_INT 0
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 3
52355: NEG
52356: PUSH
52357: LD_INT 1
52359: NEG
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 3
52367: NEG
52368: PUSH
52369: LD_INT 2
52371: NEG
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 3
52379: NEG
52380: PUSH
52381: LD_INT 3
52383: NEG
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52420: LD_ADDR_VAR 0 42
52424: PUSH
52425: LD_INT 0
52427: PUSH
52428: LD_INT 0
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 0
52437: PUSH
52438: LD_INT 1
52440: NEG
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 1
52448: PUSH
52449: LD_INT 0
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 1
52458: PUSH
52459: LD_INT 1
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 0
52468: PUSH
52469: LD_INT 1
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 1
52478: NEG
52479: PUSH
52480: LD_INT 0
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 1
52489: NEG
52490: PUSH
52491: LD_INT 1
52493: NEG
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 1
52501: NEG
52502: PUSH
52503: LD_INT 2
52505: NEG
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 0
52513: PUSH
52514: LD_INT 2
52516: NEG
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 1
52524: PUSH
52525: LD_INT 1
52527: NEG
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 2
52535: PUSH
52536: LD_INT 1
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 2
52545: PUSH
52546: LD_INT 2
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 1
52555: PUSH
52556: LD_INT 2
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: LD_INT 0
52565: PUSH
52566: LD_INT 2
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 1
52575: NEG
52576: PUSH
52577: LD_INT 1
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 2
52586: NEG
52587: PUSH
52588: LD_INT 1
52590: NEG
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 2
52598: NEG
52599: PUSH
52600: LD_INT 2
52602: NEG
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 2
52610: NEG
52611: PUSH
52612: LD_INT 3
52614: NEG
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 1
52622: NEG
52623: PUSH
52624: LD_INT 3
52626: NEG
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 0
52634: PUSH
52635: LD_INT 3
52637: NEG
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 1
52645: PUSH
52646: LD_INT 2
52648: NEG
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 3
52656: PUSH
52657: LD_INT 2
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: LD_INT 3
52666: PUSH
52667: LD_INT 3
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 2
52676: PUSH
52677: LD_INT 3
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 1
52686: PUSH
52687: LD_INT 3
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 0
52696: PUSH
52697: LD_INT 3
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 1
52706: NEG
52707: PUSH
52708: LD_INT 2
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 3
52717: NEG
52718: PUSH
52719: LD_INT 2
52721: NEG
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 3
52729: NEG
52730: PUSH
52731: LD_INT 3
52733: NEG
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52770: LD_ADDR_VAR 0 43
52774: PUSH
52775: LD_INT 0
52777: PUSH
52778: LD_INT 0
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 0
52787: PUSH
52788: LD_INT 1
52790: NEG
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 1
52798: PUSH
52799: LD_INT 0
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 1
52808: PUSH
52809: LD_INT 1
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 0
52818: PUSH
52819: LD_INT 1
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 1
52828: NEG
52829: PUSH
52830: LD_INT 0
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 1
52839: NEG
52840: PUSH
52841: LD_INT 1
52843: NEG
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 1
52851: NEG
52852: PUSH
52853: LD_INT 2
52855: NEG
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 0
52863: PUSH
52864: LD_INT 2
52866: NEG
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 1
52874: PUSH
52875: LD_INT 1
52877: NEG
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 2
52885: PUSH
52886: LD_INT 0
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 2
52895: PUSH
52896: LD_INT 1
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 1
52905: PUSH
52906: LD_INT 2
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 0
52915: PUSH
52916: LD_INT 2
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 1
52925: NEG
52926: PUSH
52927: LD_INT 1
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 2
52936: NEG
52937: PUSH
52938: LD_INT 0
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 2
52947: NEG
52948: PUSH
52949: LD_INT 1
52951: NEG
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 1
52959: NEG
52960: PUSH
52961: LD_INT 3
52963: NEG
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 0
52971: PUSH
52972: LD_INT 3
52974: NEG
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 1
52982: PUSH
52983: LD_INT 2
52985: NEG
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 2
52993: PUSH
52994: LD_INT 1
52996: NEG
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 3
53004: PUSH
53005: LD_INT 0
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 3
53014: PUSH
53015: LD_INT 1
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 1
53024: PUSH
53025: LD_INT 3
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 0
53034: PUSH
53035: LD_INT 3
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 1
53044: NEG
53045: PUSH
53046: LD_INT 2
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 2
53055: NEG
53056: PUSH
53057: LD_INT 1
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: LD_INT 3
53066: NEG
53067: PUSH
53068: LD_INT 0
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: LD_INT 3
53077: NEG
53078: PUSH
53079: LD_INT 1
53081: NEG
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53118: LD_ADDR_VAR 0 44
53122: PUSH
53123: LD_INT 0
53125: PUSH
53126: LD_INT 0
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 0
53135: PUSH
53136: LD_INT 1
53138: NEG
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 1
53146: PUSH
53147: LD_INT 0
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 1
53156: PUSH
53157: LD_INT 1
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 0
53166: PUSH
53167: LD_INT 1
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 1
53176: NEG
53177: PUSH
53178: LD_INT 0
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 1
53187: NEG
53188: PUSH
53189: LD_INT 1
53191: NEG
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 1
53199: NEG
53200: PUSH
53201: LD_INT 2
53203: NEG
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 1
53211: PUSH
53212: LD_INT 1
53214: NEG
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 2
53222: PUSH
53223: LD_INT 0
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 2
53232: PUSH
53233: LD_INT 1
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 2
53242: PUSH
53243: LD_INT 2
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 1
53252: PUSH
53253: LD_INT 2
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 1
53262: NEG
53263: PUSH
53264: LD_INT 1
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 2
53273: NEG
53274: PUSH
53275: LD_INT 0
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 2
53284: NEG
53285: PUSH
53286: LD_INT 1
53288: NEG
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 2
53296: NEG
53297: PUSH
53298: LD_INT 2
53300: NEG
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 2
53308: NEG
53309: PUSH
53310: LD_INT 3
53312: NEG
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 2
53320: PUSH
53321: LD_INT 1
53323: NEG
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 3
53331: PUSH
53332: LD_INT 0
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 3
53341: PUSH
53342: LD_INT 1
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 3
53351: PUSH
53352: LD_INT 2
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 3
53361: PUSH
53362: LD_INT 3
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 2
53371: PUSH
53372: LD_INT 3
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 2
53381: NEG
53382: PUSH
53383: LD_INT 1
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 3
53392: NEG
53393: PUSH
53394: LD_INT 0
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 3
53403: NEG
53404: PUSH
53405: LD_INT 1
53407: NEG
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 3
53415: NEG
53416: PUSH
53417: LD_INT 2
53419: NEG
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 3
53427: NEG
53428: PUSH
53429: LD_INT 3
53431: NEG
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53468: LD_ADDR_VAR 0 45
53472: PUSH
53473: LD_INT 0
53475: PUSH
53476: LD_INT 0
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 0
53485: PUSH
53486: LD_INT 1
53488: NEG
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 1
53496: PUSH
53497: LD_INT 0
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 1
53506: PUSH
53507: LD_INT 1
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 0
53516: PUSH
53517: LD_INT 1
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 1
53526: NEG
53527: PUSH
53528: LD_INT 0
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 1
53537: NEG
53538: PUSH
53539: LD_INT 1
53541: NEG
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 1
53549: NEG
53550: PUSH
53551: LD_INT 2
53553: NEG
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 0
53561: PUSH
53562: LD_INT 2
53564: NEG
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 1
53572: PUSH
53573: LD_INT 1
53575: NEG
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 2
53583: PUSH
53584: LD_INT 1
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 2
53593: PUSH
53594: LD_INT 2
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 1
53603: PUSH
53604: LD_INT 2
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 0
53613: PUSH
53614: LD_INT 2
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 1
53623: NEG
53624: PUSH
53625: LD_INT 1
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 2
53634: NEG
53635: PUSH
53636: LD_INT 1
53638: NEG
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 2
53646: NEG
53647: PUSH
53648: LD_INT 2
53650: NEG
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 2
53658: NEG
53659: PUSH
53660: LD_INT 3
53662: NEG
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 1
53670: NEG
53671: PUSH
53672: LD_INT 3
53674: NEG
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 0
53682: PUSH
53683: LD_INT 3
53685: NEG
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 1
53693: PUSH
53694: LD_INT 2
53696: NEG
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 3
53704: PUSH
53705: LD_INT 2
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 3
53714: PUSH
53715: LD_INT 3
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 2
53724: PUSH
53725: LD_INT 3
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 1
53734: PUSH
53735: LD_INT 3
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 0
53744: PUSH
53745: LD_INT 3
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 1
53754: NEG
53755: PUSH
53756: LD_INT 2
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: LD_INT 3
53765: NEG
53766: PUSH
53767: LD_INT 2
53769: NEG
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 3
53777: NEG
53778: PUSH
53779: LD_INT 3
53781: NEG
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53818: LD_ADDR_VAR 0 46
53822: PUSH
53823: LD_INT 0
53825: PUSH
53826: LD_INT 0
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 0
53835: PUSH
53836: LD_INT 1
53838: NEG
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 1
53846: PUSH
53847: LD_INT 0
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 1
53856: PUSH
53857: LD_INT 1
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 0
53866: PUSH
53867: LD_INT 1
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 1
53876: NEG
53877: PUSH
53878: LD_INT 0
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 1
53887: NEG
53888: PUSH
53889: LD_INT 1
53891: NEG
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 1
53899: NEG
53900: PUSH
53901: LD_INT 2
53903: NEG
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 0
53911: PUSH
53912: LD_INT 2
53914: NEG
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 1
53922: PUSH
53923: LD_INT 1
53925: NEG
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 2
53933: PUSH
53934: LD_INT 0
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 2
53943: PUSH
53944: LD_INT 1
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 1
53953: PUSH
53954: LD_INT 2
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 0
53963: PUSH
53964: LD_INT 2
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 1
53973: NEG
53974: PUSH
53975: LD_INT 1
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 2
53984: NEG
53985: PUSH
53986: LD_INT 0
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 2
53995: NEG
53996: PUSH
53997: LD_INT 1
53999: NEG
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 1
54007: NEG
54008: PUSH
54009: LD_INT 3
54011: NEG
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 0
54019: PUSH
54020: LD_INT 3
54022: NEG
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 1
54030: PUSH
54031: LD_INT 2
54033: NEG
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 2
54041: PUSH
54042: LD_INT 1
54044: NEG
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: LD_INT 3
54052: PUSH
54053: LD_INT 0
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 3
54062: PUSH
54063: LD_INT 1
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 1
54072: PUSH
54073: LD_INT 3
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 0
54082: PUSH
54083: LD_INT 3
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 1
54092: NEG
54093: PUSH
54094: LD_INT 2
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 2
54103: NEG
54104: PUSH
54105: LD_INT 1
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 3
54114: NEG
54115: PUSH
54116: LD_INT 0
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 3
54125: NEG
54126: PUSH
54127: LD_INT 1
54129: NEG
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54166: LD_ADDR_VAR 0 47
54170: PUSH
54171: LD_INT 0
54173: PUSH
54174: LD_INT 0
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 0
54183: PUSH
54184: LD_INT 1
54186: NEG
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 1
54194: PUSH
54195: LD_INT 0
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 1
54204: PUSH
54205: LD_INT 1
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 0
54214: PUSH
54215: LD_INT 1
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 1
54224: NEG
54225: PUSH
54226: LD_INT 0
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 1
54235: NEG
54236: PUSH
54237: LD_INT 1
54239: NEG
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 1
54247: NEG
54248: PUSH
54249: LD_INT 2
54251: NEG
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 0
54259: PUSH
54260: LD_INT 2
54262: NEG
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 1
54270: PUSH
54271: LD_INT 1
54273: NEG
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 2
54281: NEG
54282: PUSH
54283: LD_INT 1
54285: NEG
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 2
54293: NEG
54294: PUSH
54295: LD_INT 2
54297: NEG
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54317: LD_ADDR_VAR 0 48
54321: PUSH
54322: LD_INT 0
54324: PUSH
54325: LD_INT 0
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 0
54334: PUSH
54335: LD_INT 1
54337: NEG
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 1
54345: PUSH
54346: LD_INT 0
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 1
54355: PUSH
54356: LD_INT 1
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 0
54365: PUSH
54366: LD_INT 1
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 1
54375: NEG
54376: PUSH
54377: LD_INT 0
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 1
54386: NEG
54387: PUSH
54388: LD_INT 1
54390: NEG
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 1
54398: NEG
54399: PUSH
54400: LD_INT 2
54402: NEG
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 0
54410: PUSH
54411: LD_INT 2
54413: NEG
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 1
54421: PUSH
54422: LD_INT 1
54424: NEG
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 2
54432: PUSH
54433: LD_INT 0
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 2
54442: PUSH
54443: LD_INT 1
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: LIST
54462: LIST
54463: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54464: LD_ADDR_VAR 0 49
54468: PUSH
54469: LD_INT 0
54471: PUSH
54472: LD_INT 0
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 0
54481: PUSH
54482: LD_INT 1
54484: NEG
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 1
54492: PUSH
54493: LD_INT 0
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 1
54502: PUSH
54503: LD_INT 1
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 0
54512: PUSH
54513: LD_INT 1
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 1
54522: NEG
54523: PUSH
54524: LD_INT 0
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 1
54533: NEG
54534: PUSH
54535: LD_INT 1
54537: NEG
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 1
54545: PUSH
54546: LD_INT 1
54548: NEG
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 2
54556: PUSH
54557: LD_INT 0
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 2
54566: PUSH
54567: LD_INT 1
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 2
54576: PUSH
54577: LD_INT 2
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 1
54586: PUSH
54587: LD_INT 2
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54608: LD_ADDR_VAR 0 50
54612: PUSH
54613: LD_INT 0
54615: PUSH
54616: LD_INT 0
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 0
54625: PUSH
54626: LD_INT 1
54628: NEG
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 1
54636: PUSH
54637: LD_INT 0
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 1
54646: PUSH
54647: LD_INT 1
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 0
54656: PUSH
54657: LD_INT 1
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 1
54666: NEG
54667: PUSH
54668: LD_INT 0
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 1
54677: NEG
54678: PUSH
54679: LD_INT 1
54681: NEG
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 2
54689: PUSH
54690: LD_INT 1
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 2
54699: PUSH
54700: LD_INT 2
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 1
54709: PUSH
54710: LD_INT 2
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 0
54719: PUSH
54720: LD_INT 2
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 1
54729: NEG
54730: PUSH
54731: LD_INT 1
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54752: LD_ADDR_VAR 0 51
54756: PUSH
54757: LD_INT 0
54759: PUSH
54760: LD_INT 0
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 0
54769: PUSH
54770: LD_INT 1
54772: NEG
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 1
54780: PUSH
54781: LD_INT 0
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 1
54790: PUSH
54791: LD_INT 1
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 0
54800: PUSH
54801: LD_INT 1
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 1
54810: NEG
54811: PUSH
54812: LD_INT 0
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 1
54821: NEG
54822: PUSH
54823: LD_INT 1
54825: NEG
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 1
54833: PUSH
54834: LD_INT 2
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 0
54843: PUSH
54844: LD_INT 2
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 1
54853: NEG
54854: PUSH
54855: LD_INT 1
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 2
54864: NEG
54865: PUSH
54866: LD_INT 0
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 2
54875: NEG
54876: PUSH
54877: LD_INT 1
54879: NEG
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54899: LD_ADDR_VAR 0 52
54903: PUSH
54904: LD_INT 0
54906: PUSH
54907: LD_INT 0
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 0
54916: PUSH
54917: LD_INT 1
54919: NEG
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 1
54927: PUSH
54928: LD_INT 0
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 1
54937: PUSH
54938: LD_INT 1
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 0
54947: PUSH
54948: LD_INT 1
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 1
54957: NEG
54958: PUSH
54959: LD_INT 0
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 1
54968: NEG
54969: PUSH
54970: LD_INT 1
54972: NEG
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 1
54980: NEG
54981: PUSH
54982: LD_INT 2
54984: NEG
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 1
54992: NEG
54993: PUSH
54994: LD_INT 1
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 2
55003: NEG
55004: PUSH
55005: LD_INT 0
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 2
55014: NEG
55015: PUSH
55016: LD_INT 1
55018: NEG
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 2
55026: NEG
55027: PUSH
55028: LD_INT 2
55030: NEG
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55050: LD_ADDR_VAR 0 53
55054: PUSH
55055: LD_INT 0
55057: PUSH
55058: LD_INT 0
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 0
55067: PUSH
55068: LD_INT 1
55070: NEG
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 1
55078: PUSH
55079: LD_INT 0
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 1
55088: PUSH
55089: LD_INT 1
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 0
55098: PUSH
55099: LD_INT 1
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 1
55108: NEG
55109: PUSH
55110: LD_INT 0
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 1
55119: NEG
55120: PUSH
55121: LD_INT 1
55123: NEG
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 1
55131: NEG
55132: PUSH
55133: LD_INT 2
55135: NEG
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 0
55143: PUSH
55144: LD_INT 2
55146: NEG
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 1
55154: PUSH
55155: LD_INT 1
55157: NEG
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 2
55165: PUSH
55166: LD_INT 0
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 2
55175: PUSH
55176: LD_INT 1
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 2
55185: PUSH
55186: LD_INT 2
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 1
55195: PUSH
55196: LD_INT 2
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 0
55205: PUSH
55206: LD_INT 2
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 1
55215: NEG
55216: PUSH
55217: LD_INT 1
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 2
55226: NEG
55227: PUSH
55228: LD_INT 0
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 2
55237: NEG
55238: PUSH
55239: LD_INT 1
55241: NEG
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 2
55249: NEG
55250: PUSH
55251: LD_INT 2
55253: NEG
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55280: LD_ADDR_VAR 0 54
55284: PUSH
55285: LD_INT 0
55287: PUSH
55288: LD_INT 0
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 0
55297: PUSH
55298: LD_INT 1
55300: NEG
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 1
55308: PUSH
55309: LD_INT 0
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 1
55318: PUSH
55319: LD_INT 1
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 0
55328: PUSH
55329: LD_INT 1
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 1
55338: NEG
55339: PUSH
55340: LD_INT 0
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 1
55349: NEG
55350: PUSH
55351: LD_INT 1
55353: NEG
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 1
55361: NEG
55362: PUSH
55363: LD_INT 2
55365: NEG
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 0
55373: PUSH
55374: LD_INT 2
55376: NEG
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 1
55384: PUSH
55385: LD_INT 1
55387: NEG
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 2
55395: PUSH
55396: LD_INT 0
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 2
55405: PUSH
55406: LD_INT 1
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 2
55415: PUSH
55416: LD_INT 2
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 1
55425: PUSH
55426: LD_INT 2
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 0
55435: PUSH
55436: LD_INT 2
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 1
55445: NEG
55446: PUSH
55447: LD_INT 1
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 2
55456: NEG
55457: PUSH
55458: LD_INT 0
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 2
55467: NEG
55468: PUSH
55469: LD_INT 1
55471: NEG
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 2
55479: NEG
55480: PUSH
55481: LD_INT 2
55483: NEG
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55510: LD_ADDR_VAR 0 55
55514: PUSH
55515: LD_INT 0
55517: PUSH
55518: LD_INT 0
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 0
55527: PUSH
55528: LD_INT 1
55530: NEG
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 1
55538: PUSH
55539: LD_INT 0
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 1
55548: PUSH
55549: LD_INT 1
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 0
55558: PUSH
55559: LD_INT 1
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 1
55568: NEG
55569: PUSH
55570: LD_INT 0
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 1
55579: NEG
55580: PUSH
55581: LD_INT 1
55583: NEG
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 1
55591: NEG
55592: PUSH
55593: LD_INT 2
55595: NEG
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 0
55603: PUSH
55604: LD_INT 2
55606: NEG
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 1
55614: PUSH
55615: LD_INT 1
55617: NEG
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 2
55625: PUSH
55626: LD_INT 0
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 2
55635: PUSH
55636: LD_INT 1
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 2
55645: PUSH
55646: LD_INT 2
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 1
55655: PUSH
55656: LD_INT 2
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 0
55665: PUSH
55666: LD_INT 2
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 1
55675: NEG
55676: PUSH
55677: LD_INT 1
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 2
55686: NEG
55687: PUSH
55688: LD_INT 0
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 2
55697: NEG
55698: PUSH
55699: LD_INT 1
55701: NEG
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 2
55709: NEG
55710: PUSH
55711: LD_INT 2
55713: NEG
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55740: LD_ADDR_VAR 0 56
55744: PUSH
55745: LD_INT 0
55747: PUSH
55748: LD_INT 0
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 0
55757: PUSH
55758: LD_INT 1
55760: NEG
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 1
55768: PUSH
55769: LD_INT 0
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 1
55778: PUSH
55779: LD_INT 1
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 0
55788: PUSH
55789: LD_INT 1
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 1
55798: NEG
55799: PUSH
55800: LD_INT 0
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 1
55809: NEG
55810: PUSH
55811: LD_INT 1
55813: NEG
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 1
55821: NEG
55822: PUSH
55823: LD_INT 2
55825: NEG
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 0
55833: PUSH
55834: LD_INT 2
55836: NEG
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 1
55844: PUSH
55845: LD_INT 1
55847: NEG
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 2
55855: PUSH
55856: LD_INT 0
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 2
55865: PUSH
55866: LD_INT 1
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 2
55875: PUSH
55876: LD_INT 2
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 1
55885: PUSH
55886: LD_INT 2
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 0
55895: PUSH
55896: LD_INT 2
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 1
55905: NEG
55906: PUSH
55907: LD_INT 1
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 2
55916: NEG
55917: PUSH
55918: LD_INT 0
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 2
55927: NEG
55928: PUSH
55929: LD_INT 1
55931: NEG
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 2
55939: NEG
55940: PUSH
55941: LD_INT 2
55943: NEG
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55970: LD_ADDR_VAR 0 57
55974: PUSH
55975: LD_INT 0
55977: PUSH
55978: LD_INT 0
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 0
55987: PUSH
55988: LD_INT 1
55990: NEG
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 1
55998: PUSH
55999: LD_INT 0
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 1
56008: PUSH
56009: LD_INT 1
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 0
56018: PUSH
56019: LD_INT 1
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 1
56028: NEG
56029: PUSH
56030: LD_INT 0
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 1
56039: NEG
56040: PUSH
56041: LD_INT 1
56043: NEG
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 1
56051: NEG
56052: PUSH
56053: LD_INT 2
56055: NEG
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 0
56063: PUSH
56064: LD_INT 2
56066: NEG
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 1
56074: PUSH
56075: LD_INT 1
56077: NEG
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 2
56085: PUSH
56086: LD_INT 0
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 2
56095: PUSH
56096: LD_INT 1
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 2
56105: PUSH
56106: LD_INT 2
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: LD_INT 1
56115: PUSH
56116: LD_INT 2
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 0
56125: PUSH
56126: LD_INT 2
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 1
56135: NEG
56136: PUSH
56137: LD_INT 1
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 2
56146: NEG
56147: PUSH
56148: LD_INT 0
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 2
56157: NEG
56158: PUSH
56159: LD_INT 1
56161: NEG
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 2
56169: NEG
56170: PUSH
56171: LD_INT 2
56173: NEG
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56200: LD_ADDR_VAR 0 58
56204: PUSH
56205: LD_INT 0
56207: PUSH
56208: LD_INT 0
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 0
56217: PUSH
56218: LD_INT 1
56220: NEG
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: LD_INT 1
56228: PUSH
56229: LD_INT 0
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 1
56238: PUSH
56239: LD_INT 1
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 0
56248: PUSH
56249: LD_INT 1
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 1
56258: NEG
56259: PUSH
56260: LD_INT 0
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 1
56269: NEG
56270: PUSH
56271: LD_INT 1
56273: NEG
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 1
56281: NEG
56282: PUSH
56283: LD_INT 2
56285: NEG
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 0
56293: PUSH
56294: LD_INT 2
56296: NEG
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 1
56304: PUSH
56305: LD_INT 1
56307: NEG
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 2
56315: PUSH
56316: LD_INT 0
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 2
56325: PUSH
56326: LD_INT 1
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 2
56335: PUSH
56336: LD_INT 2
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 1
56345: PUSH
56346: LD_INT 2
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 0
56355: PUSH
56356: LD_INT 2
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 1
56365: NEG
56366: PUSH
56367: LD_INT 1
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 2
56376: NEG
56377: PUSH
56378: LD_INT 0
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 2
56387: NEG
56388: PUSH
56389: LD_INT 1
56391: NEG
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 2
56399: NEG
56400: PUSH
56401: LD_INT 2
56403: NEG
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56430: LD_ADDR_VAR 0 59
56434: PUSH
56435: LD_INT 0
56437: PUSH
56438: LD_INT 0
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 0
56447: PUSH
56448: LD_INT 1
56450: NEG
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 1
56458: PUSH
56459: LD_INT 0
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 1
56468: PUSH
56469: LD_INT 1
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 0
56478: PUSH
56479: LD_INT 1
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 1
56488: NEG
56489: PUSH
56490: LD_INT 0
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 1
56499: NEG
56500: PUSH
56501: LD_INT 1
56503: NEG
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56518: LD_ADDR_VAR 0 60
56522: PUSH
56523: LD_INT 0
56525: PUSH
56526: LD_INT 0
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 0
56535: PUSH
56536: LD_INT 1
56538: NEG
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 1
56546: PUSH
56547: LD_INT 0
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 1
56556: PUSH
56557: LD_INT 1
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 0
56566: PUSH
56567: LD_INT 1
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 1
56576: NEG
56577: PUSH
56578: LD_INT 0
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 1
56587: NEG
56588: PUSH
56589: LD_INT 1
56591: NEG
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56606: LD_ADDR_VAR 0 61
56610: PUSH
56611: LD_INT 0
56613: PUSH
56614: LD_INT 0
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 0
56623: PUSH
56624: LD_INT 1
56626: NEG
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 1
56634: PUSH
56635: LD_INT 0
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 1
56644: PUSH
56645: LD_INT 1
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 0
56654: PUSH
56655: LD_INT 1
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 1
56664: NEG
56665: PUSH
56666: LD_INT 0
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 1
56675: NEG
56676: PUSH
56677: LD_INT 1
56679: NEG
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: LIST
56693: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56694: LD_ADDR_VAR 0 62
56698: PUSH
56699: LD_INT 0
56701: PUSH
56702: LD_INT 0
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 0
56711: PUSH
56712: LD_INT 1
56714: NEG
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 1
56722: PUSH
56723: LD_INT 0
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 1
56732: PUSH
56733: LD_INT 1
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 0
56742: PUSH
56743: LD_INT 1
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 1
56752: NEG
56753: PUSH
56754: LD_INT 0
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 1
56763: NEG
56764: PUSH
56765: LD_INT 1
56767: NEG
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56782: LD_ADDR_VAR 0 63
56786: PUSH
56787: LD_INT 0
56789: PUSH
56790: LD_INT 0
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 0
56799: PUSH
56800: LD_INT 1
56802: NEG
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 1
56810: PUSH
56811: LD_INT 0
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 1
56820: PUSH
56821: LD_INT 1
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 0
56830: PUSH
56831: LD_INT 1
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 1
56840: NEG
56841: PUSH
56842: LD_INT 0
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 1
56851: NEG
56852: PUSH
56853: LD_INT 1
56855: NEG
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56870: LD_ADDR_VAR 0 64
56874: PUSH
56875: LD_INT 0
56877: PUSH
56878: LD_INT 0
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 0
56887: PUSH
56888: LD_INT 1
56890: NEG
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 1
56898: PUSH
56899: LD_INT 0
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 1
56908: PUSH
56909: LD_INT 1
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 0
56918: PUSH
56919: LD_INT 1
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 1
56928: NEG
56929: PUSH
56930: LD_INT 0
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 1
56939: NEG
56940: PUSH
56941: LD_INT 1
56943: NEG
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: ST_TO_ADDR
// end ; 1 :
56958: GO 62855
56960: LD_INT 1
56962: DOUBLE
56963: EQUAL
56964: IFTRUE 56968
56966: GO 59591
56968: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56969: LD_ADDR_VAR 0 11
56973: PUSH
56974: LD_INT 1
56976: NEG
56977: PUSH
56978: LD_INT 3
56980: NEG
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 0
56988: PUSH
56989: LD_INT 3
56991: NEG
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 1
56999: PUSH
57000: LD_INT 2
57002: NEG
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: LIST
57012: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57013: LD_ADDR_VAR 0 12
57017: PUSH
57018: LD_INT 2
57020: PUSH
57021: LD_INT 1
57023: NEG
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 3
57031: PUSH
57032: LD_INT 0
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: LD_INT 3
57041: PUSH
57042: LD_INT 1
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: LIST
57053: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57054: LD_ADDR_VAR 0 13
57058: PUSH
57059: LD_INT 3
57061: PUSH
57062: LD_INT 2
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 3
57071: PUSH
57072: LD_INT 3
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 2
57081: PUSH
57082: LD_INT 3
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: LIST
57093: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57094: LD_ADDR_VAR 0 14
57098: PUSH
57099: LD_INT 1
57101: PUSH
57102: LD_INT 3
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 0
57111: PUSH
57112: LD_INT 3
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 1
57121: NEG
57122: PUSH
57123: LD_INT 2
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: LIST
57134: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57135: LD_ADDR_VAR 0 15
57139: PUSH
57140: LD_INT 2
57142: NEG
57143: PUSH
57144: LD_INT 1
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 3
57153: NEG
57154: PUSH
57155: LD_INT 0
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 3
57164: NEG
57165: PUSH
57166: LD_INT 1
57168: NEG
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: LIST
57178: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57179: LD_ADDR_VAR 0 16
57183: PUSH
57184: LD_INT 2
57186: NEG
57187: PUSH
57188: LD_INT 3
57190: NEG
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 3
57198: NEG
57199: PUSH
57200: LD_INT 2
57202: NEG
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 3
57210: NEG
57211: PUSH
57212: LD_INT 3
57214: NEG
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: LIST
57224: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57225: LD_ADDR_VAR 0 17
57229: PUSH
57230: LD_INT 1
57232: NEG
57233: PUSH
57234: LD_INT 3
57236: NEG
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 0
57244: PUSH
57245: LD_INT 3
57247: NEG
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 1
57255: PUSH
57256: LD_INT 2
57258: NEG
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: LIST
57268: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57269: LD_ADDR_VAR 0 18
57273: PUSH
57274: LD_INT 2
57276: PUSH
57277: LD_INT 1
57279: NEG
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: LD_INT 3
57287: PUSH
57288: LD_INT 0
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 3
57297: PUSH
57298: LD_INT 1
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: LIST
57309: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57310: LD_ADDR_VAR 0 19
57314: PUSH
57315: LD_INT 3
57317: PUSH
57318: LD_INT 2
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 3
57327: PUSH
57328: LD_INT 3
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 2
57337: PUSH
57338: LD_INT 3
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: LIST
57349: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57350: LD_ADDR_VAR 0 20
57354: PUSH
57355: LD_INT 1
57357: PUSH
57358: LD_INT 3
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 0
57367: PUSH
57368: LD_INT 3
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 1
57377: NEG
57378: PUSH
57379: LD_INT 2
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: LIST
57390: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57391: LD_ADDR_VAR 0 21
57395: PUSH
57396: LD_INT 2
57398: NEG
57399: PUSH
57400: LD_INT 1
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 3
57409: NEG
57410: PUSH
57411: LD_INT 0
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 3
57420: NEG
57421: PUSH
57422: LD_INT 1
57424: NEG
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: LIST
57434: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57435: LD_ADDR_VAR 0 22
57439: PUSH
57440: LD_INT 2
57442: NEG
57443: PUSH
57444: LD_INT 3
57446: NEG
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 3
57454: NEG
57455: PUSH
57456: LD_INT 2
57458: NEG
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: LD_INT 3
57466: NEG
57467: PUSH
57468: LD_INT 3
57470: NEG
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: LIST
57480: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57481: LD_ADDR_VAR 0 23
57485: PUSH
57486: LD_INT 0
57488: PUSH
57489: LD_INT 3
57491: NEG
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 1
57499: NEG
57500: PUSH
57501: LD_INT 4
57503: NEG
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 1
57511: PUSH
57512: LD_INT 3
57514: NEG
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: LIST
57524: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57525: LD_ADDR_VAR 0 24
57529: PUSH
57530: LD_INT 3
57532: PUSH
57533: LD_INT 0
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 3
57542: PUSH
57543: LD_INT 1
57545: NEG
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 4
57553: PUSH
57554: LD_INT 1
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: LIST
57565: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57566: LD_ADDR_VAR 0 25
57570: PUSH
57571: LD_INT 3
57573: PUSH
57574: LD_INT 3
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: LD_INT 4
57583: PUSH
57584: LD_INT 3
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 3
57593: PUSH
57594: LD_INT 4
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: LIST
57605: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57606: LD_ADDR_VAR 0 26
57610: PUSH
57611: LD_INT 0
57613: PUSH
57614: LD_INT 3
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 1
57623: PUSH
57624: LD_INT 4
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: LD_INT 1
57633: NEG
57634: PUSH
57635: LD_INT 3
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: LIST
57646: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57647: LD_ADDR_VAR 0 27
57651: PUSH
57652: LD_INT 3
57654: NEG
57655: PUSH
57656: LD_INT 0
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 3
57665: NEG
57666: PUSH
57667: LD_INT 1
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 4
57676: NEG
57677: PUSH
57678: LD_INT 1
57680: NEG
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: LIST
57690: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57691: LD_ADDR_VAR 0 28
57695: PUSH
57696: LD_INT 3
57698: NEG
57699: PUSH
57700: LD_INT 3
57702: NEG
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 3
57710: NEG
57711: PUSH
57712: LD_INT 4
57714: NEG
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 4
57722: NEG
57723: PUSH
57724: LD_INT 3
57726: NEG
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: LIST
57736: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57737: LD_ADDR_VAR 0 29
57741: PUSH
57742: LD_INT 1
57744: NEG
57745: PUSH
57746: LD_INT 3
57748: NEG
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 0
57756: PUSH
57757: LD_INT 3
57759: NEG
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 1
57767: PUSH
57768: LD_INT 2
57770: NEG
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 1
57778: NEG
57779: PUSH
57780: LD_INT 4
57782: NEG
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 0
57790: PUSH
57791: LD_INT 4
57793: NEG
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 1
57801: PUSH
57802: LD_INT 3
57804: NEG
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 1
57812: NEG
57813: PUSH
57814: LD_INT 5
57816: NEG
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 0
57824: PUSH
57825: LD_INT 5
57827: NEG
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 1
57835: PUSH
57836: LD_INT 4
57838: NEG
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 1
57846: NEG
57847: PUSH
57848: LD_INT 6
57850: NEG
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 0
57858: PUSH
57859: LD_INT 6
57861: NEG
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 1
57869: PUSH
57870: LD_INT 5
57872: NEG
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57892: LD_ADDR_VAR 0 30
57896: PUSH
57897: LD_INT 2
57899: PUSH
57900: LD_INT 1
57902: NEG
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 3
57910: PUSH
57911: LD_INT 0
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 3
57920: PUSH
57921: LD_INT 1
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 3
57930: PUSH
57931: LD_INT 1
57933: NEG
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 4
57941: PUSH
57942: LD_INT 0
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 4
57951: PUSH
57952: LD_INT 1
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 4
57961: PUSH
57962: LD_INT 1
57964: NEG
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 5
57972: PUSH
57973: LD_INT 0
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 5
57982: PUSH
57983: LD_INT 1
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 5
57992: PUSH
57993: LD_INT 1
57995: NEG
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 6
58003: PUSH
58004: LD_INT 0
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 6
58013: PUSH
58014: LD_INT 1
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58035: LD_ADDR_VAR 0 31
58039: PUSH
58040: LD_INT 3
58042: PUSH
58043: LD_INT 2
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 3
58052: PUSH
58053: LD_INT 3
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 2
58062: PUSH
58063: LD_INT 3
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: LD_INT 4
58072: PUSH
58073: LD_INT 3
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: PUSH
58080: LD_INT 4
58082: PUSH
58083: LD_INT 4
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 3
58092: PUSH
58093: LD_INT 4
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 5
58102: PUSH
58103: LD_INT 4
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 5
58112: PUSH
58113: LD_INT 5
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 4
58122: PUSH
58123: LD_INT 5
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 6
58132: PUSH
58133: LD_INT 5
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_INT 6
58142: PUSH
58143: LD_INT 6
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 5
58152: PUSH
58153: LD_INT 6
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58174: LD_ADDR_VAR 0 32
58178: PUSH
58179: LD_INT 1
58181: PUSH
58182: LD_INT 3
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 0
58191: PUSH
58192: LD_INT 3
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 1
58201: NEG
58202: PUSH
58203: LD_INT 2
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 1
58212: PUSH
58213: LD_INT 4
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 0
58222: PUSH
58223: LD_INT 4
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: LD_INT 1
58232: NEG
58233: PUSH
58234: LD_INT 3
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 1
58243: PUSH
58244: LD_INT 5
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 0
58253: PUSH
58254: LD_INT 5
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 1
58263: NEG
58264: PUSH
58265: LD_INT 4
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 1
58274: PUSH
58275: LD_INT 6
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: PUSH
58282: LD_INT 0
58284: PUSH
58285: LD_INT 6
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: LD_INT 1
58294: NEG
58295: PUSH
58296: LD_INT 5
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58317: LD_ADDR_VAR 0 33
58321: PUSH
58322: LD_INT 2
58324: NEG
58325: PUSH
58326: LD_INT 1
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: LD_INT 3
58335: NEG
58336: PUSH
58337: LD_INT 0
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 3
58346: NEG
58347: PUSH
58348: LD_INT 1
58350: NEG
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 3
58358: NEG
58359: PUSH
58360: LD_INT 1
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 4
58369: NEG
58370: PUSH
58371: LD_INT 0
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 4
58380: NEG
58381: PUSH
58382: LD_INT 1
58384: NEG
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 4
58392: NEG
58393: PUSH
58394: LD_INT 1
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 5
58403: NEG
58404: PUSH
58405: LD_INT 0
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 5
58414: NEG
58415: PUSH
58416: LD_INT 1
58418: NEG
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: LD_INT 5
58426: NEG
58427: PUSH
58428: LD_INT 1
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 6
58437: NEG
58438: PUSH
58439: LD_INT 0
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 6
58448: NEG
58449: PUSH
58450: LD_INT 1
58452: NEG
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58472: LD_ADDR_VAR 0 34
58476: PUSH
58477: LD_INT 2
58479: NEG
58480: PUSH
58481: LD_INT 3
58483: NEG
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 3
58491: NEG
58492: PUSH
58493: LD_INT 2
58495: NEG
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 3
58503: NEG
58504: PUSH
58505: LD_INT 3
58507: NEG
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 3
58515: NEG
58516: PUSH
58517: LD_INT 4
58519: NEG
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 4
58527: NEG
58528: PUSH
58529: LD_INT 3
58531: NEG
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 4
58539: NEG
58540: PUSH
58541: LD_INT 4
58543: NEG
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 4
58551: NEG
58552: PUSH
58553: LD_INT 5
58555: NEG
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: LD_INT 5
58563: NEG
58564: PUSH
58565: LD_INT 4
58567: NEG
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 5
58575: NEG
58576: PUSH
58577: LD_INT 5
58579: NEG
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: LD_INT 5
58587: NEG
58588: PUSH
58589: LD_INT 6
58591: NEG
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 6
58599: NEG
58600: PUSH
58601: LD_INT 5
58603: NEG
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 6
58611: NEG
58612: PUSH
58613: LD_INT 6
58615: NEG
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58635: LD_ADDR_VAR 0 41
58639: PUSH
58640: LD_INT 0
58642: PUSH
58643: LD_INT 2
58645: NEG
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 1
58653: NEG
58654: PUSH
58655: LD_INT 3
58657: NEG
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 1
58665: PUSH
58666: LD_INT 2
58668: NEG
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: LIST
58678: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58679: LD_ADDR_VAR 0 42
58683: PUSH
58684: LD_INT 2
58686: PUSH
58687: LD_INT 0
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 2
58696: PUSH
58697: LD_INT 1
58699: NEG
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 3
58707: PUSH
58708: LD_INT 1
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: LIST
58719: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58720: LD_ADDR_VAR 0 43
58724: PUSH
58725: LD_INT 2
58727: PUSH
58728: LD_INT 2
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 3
58737: PUSH
58738: LD_INT 2
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 2
58747: PUSH
58748: LD_INT 3
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: LIST
58759: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58760: LD_ADDR_VAR 0 44
58764: PUSH
58765: LD_INT 0
58767: PUSH
58768: LD_INT 2
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PUSH
58775: LD_INT 1
58777: PUSH
58778: LD_INT 3
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: LD_INT 1
58787: NEG
58788: PUSH
58789: LD_INT 2
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: LIST
58800: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58801: LD_ADDR_VAR 0 45
58805: PUSH
58806: LD_INT 2
58808: NEG
58809: PUSH
58810: LD_INT 0
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 2
58819: NEG
58820: PUSH
58821: LD_INT 1
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 3
58830: NEG
58831: PUSH
58832: LD_INT 1
58834: NEG
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: LIST
58844: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58845: LD_ADDR_VAR 0 46
58849: PUSH
58850: LD_INT 2
58852: NEG
58853: PUSH
58854: LD_INT 2
58856: NEG
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 2
58864: NEG
58865: PUSH
58866: LD_INT 3
58868: NEG
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 3
58876: NEG
58877: PUSH
58878: LD_INT 2
58880: NEG
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: LIST
58890: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58891: LD_ADDR_VAR 0 47
58895: PUSH
58896: LD_INT 2
58898: NEG
58899: PUSH
58900: LD_INT 3
58902: NEG
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 1
58910: NEG
58911: PUSH
58912: LD_INT 3
58914: NEG
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58924: LD_ADDR_VAR 0 48
58928: PUSH
58929: LD_INT 1
58931: PUSH
58932: LD_INT 2
58934: NEG
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 2
58942: PUSH
58943: LD_INT 1
58945: NEG
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58955: LD_ADDR_VAR 0 49
58959: PUSH
58960: LD_INT 3
58962: PUSH
58963: LD_INT 1
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 3
58972: PUSH
58973: LD_INT 2
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58984: LD_ADDR_VAR 0 50
58988: PUSH
58989: LD_INT 2
58991: PUSH
58992: LD_INT 3
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 1
59001: PUSH
59002: LD_INT 3
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59013: LD_ADDR_VAR 0 51
59017: PUSH
59018: LD_INT 1
59020: NEG
59021: PUSH
59022: LD_INT 2
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PUSH
59029: LD_INT 2
59031: NEG
59032: PUSH
59033: LD_INT 1
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59044: LD_ADDR_VAR 0 52
59048: PUSH
59049: LD_INT 3
59051: NEG
59052: PUSH
59053: LD_INT 1
59055: NEG
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 3
59063: NEG
59064: PUSH
59065: LD_INT 2
59067: NEG
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59077: LD_ADDR_VAR 0 53
59081: PUSH
59082: LD_INT 1
59084: NEG
59085: PUSH
59086: LD_INT 3
59088: NEG
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 0
59096: PUSH
59097: LD_INT 3
59099: NEG
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 1
59107: PUSH
59108: LD_INT 2
59110: NEG
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: LIST
59120: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59121: LD_ADDR_VAR 0 54
59125: PUSH
59126: LD_INT 2
59128: PUSH
59129: LD_INT 1
59131: NEG
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 3
59139: PUSH
59140: LD_INT 0
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 3
59149: PUSH
59150: LD_INT 1
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: LIST
59161: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59162: LD_ADDR_VAR 0 55
59166: PUSH
59167: LD_INT 3
59169: PUSH
59170: LD_INT 2
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 3
59179: PUSH
59180: LD_INT 3
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 2
59189: PUSH
59190: LD_INT 3
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: LIST
59201: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59202: LD_ADDR_VAR 0 56
59206: PUSH
59207: LD_INT 1
59209: PUSH
59210: LD_INT 3
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 0
59219: PUSH
59220: LD_INT 3
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 1
59229: NEG
59230: PUSH
59231: LD_INT 2
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: LIST
59242: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59243: LD_ADDR_VAR 0 57
59247: PUSH
59248: LD_INT 2
59250: NEG
59251: PUSH
59252: LD_INT 1
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 3
59261: NEG
59262: PUSH
59263: LD_INT 0
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 3
59272: NEG
59273: PUSH
59274: LD_INT 1
59276: NEG
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: LIST
59286: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59287: LD_ADDR_VAR 0 58
59291: PUSH
59292: LD_INT 2
59294: NEG
59295: PUSH
59296: LD_INT 3
59298: NEG
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 3
59306: NEG
59307: PUSH
59308: LD_INT 2
59310: NEG
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: PUSH
59316: LD_INT 3
59318: NEG
59319: PUSH
59320: LD_INT 3
59322: NEG
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: LIST
59332: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59333: LD_ADDR_VAR 0 59
59337: PUSH
59338: LD_INT 1
59340: NEG
59341: PUSH
59342: LD_INT 2
59344: NEG
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 0
59352: PUSH
59353: LD_INT 2
59355: NEG
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 1
59363: PUSH
59364: LD_INT 1
59366: NEG
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: LIST
59376: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59377: LD_ADDR_VAR 0 60
59381: PUSH
59382: LD_INT 1
59384: PUSH
59385: LD_INT 1
59387: NEG
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: PUSH
59393: LD_INT 2
59395: PUSH
59396: LD_INT 0
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: LD_INT 2
59405: PUSH
59406: LD_INT 1
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: LIST
59417: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59418: LD_ADDR_VAR 0 61
59422: PUSH
59423: LD_INT 2
59425: PUSH
59426: LD_INT 1
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 2
59435: PUSH
59436: LD_INT 2
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 1
59445: PUSH
59446: LD_INT 2
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: LIST
59457: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59458: LD_ADDR_VAR 0 62
59462: PUSH
59463: LD_INT 1
59465: PUSH
59466: LD_INT 2
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 0
59475: PUSH
59476: LD_INT 2
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 1
59485: NEG
59486: PUSH
59487: LD_INT 1
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: LIST
59498: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59499: LD_ADDR_VAR 0 63
59503: PUSH
59504: LD_INT 1
59506: NEG
59507: PUSH
59508: LD_INT 1
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 2
59517: NEG
59518: PUSH
59519: LD_INT 0
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 2
59528: NEG
59529: PUSH
59530: LD_INT 1
59532: NEG
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: LIST
59542: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59543: LD_ADDR_VAR 0 64
59547: PUSH
59548: LD_INT 1
59550: NEG
59551: PUSH
59552: LD_INT 2
59554: NEG
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: LD_INT 2
59562: NEG
59563: PUSH
59564: LD_INT 1
59566: NEG
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 2
59574: NEG
59575: PUSH
59576: LD_INT 2
59578: NEG
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: LIST
59588: ST_TO_ADDR
// end ; 2 :
59589: GO 62855
59591: LD_INT 2
59593: DOUBLE
59594: EQUAL
59595: IFTRUE 59599
59597: GO 62854
59599: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59600: LD_ADDR_VAR 0 29
59604: PUSH
59605: LD_INT 4
59607: PUSH
59608: LD_INT 0
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: LD_INT 4
59617: PUSH
59618: LD_INT 1
59620: NEG
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 5
59628: PUSH
59629: LD_INT 0
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 5
59638: PUSH
59639: LD_INT 1
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 4
59648: PUSH
59649: LD_INT 1
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 3
59658: PUSH
59659: LD_INT 0
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 3
59668: PUSH
59669: LD_INT 1
59671: NEG
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 3
59679: PUSH
59680: LD_INT 2
59682: NEG
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 5
59690: PUSH
59691: LD_INT 2
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: LD_INT 3
59700: PUSH
59701: LD_INT 3
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 3
59710: PUSH
59711: LD_INT 2
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 4
59720: PUSH
59721: LD_INT 3
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 4
59730: PUSH
59731: LD_INT 4
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 3
59740: PUSH
59741: LD_INT 4
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 2
59750: PUSH
59751: LD_INT 3
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 2
59760: PUSH
59761: LD_INT 2
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 4
59770: PUSH
59771: LD_INT 2
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 2
59780: PUSH
59781: LD_INT 4
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 0
59790: PUSH
59791: LD_INT 4
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 0
59800: PUSH
59801: LD_INT 3
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 1
59810: PUSH
59811: LD_INT 4
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 1
59820: PUSH
59821: LD_INT 5
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 0
59830: PUSH
59831: LD_INT 5
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 1
59840: NEG
59841: PUSH
59842: LD_INT 4
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 1
59851: NEG
59852: PUSH
59853: LD_INT 3
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 2
59862: PUSH
59863: LD_INT 5
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 2
59872: NEG
59873: PUSH
59874: LD_INT 3
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 3
59883: NEG
59884: PUSH
59885: LD_INT 0
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 3
59894: NEG
59895: PUSH
59896: LD_INT 1
59898: NEG
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 2
59906: NEG
59907: PUSH
59908: LD_INT 0
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 2
59917: NEG
59918: PUSH
59919: LD_INT 1
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 3
59928: NEG
59929: PUSH
59930: LD_INT 1
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 4
59939: NEG
59940: PUSH
59941: LD_INT 0
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 4
59950: NEG
59951: PUSH
59952: LD_INT 1
59954: NEG
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 4
59962: NEG
59963: PUSH
59964: LD_INT 2
59966: NEG
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 2
59974: NEG
59975: PUSH
59976: LD_INT 2
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 4
59985: NEG
59986: PUSH
59987: LD_INT 4
59989: NEG
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 4
59997: NEG
59998: PUSH
59999: LD_INT 5
60001: NEG
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 3
60009: NEG
60010: PUSH
60011: LD_INT 4
60013: NEG
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 3
60021: NEG
60022: PUSH
60023: LD_INT 3
60025: NEG
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 4
60033: NEG
60034: PUSH
60035: LD_INT 3
60037: NEG
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PUSH
60043: LD_INT 5
60045: NEG
60046: PUSH
60047: LD_INT 4
60049: NEG
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 5
60057: NEG
60058: PUSH
60059: LD_INT 5
60061: NEG
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 3
60069: NEG
60070: PUSH
60071: LD_INT 5
60073: NEG
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: LD_INT 5
60081: NEG
60082: PUSH
60083: LD_INT 3
60085: NEG
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: LIST
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: LIST
60128: LIST
60129: LIST
60130: LIST
60131: LIST
60132: LIST
60133: LIST
60134: LIST
60135: LIST
60136: LIST
60137: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60138: LD_ADDR_VAR 0 30
60142: PUSH
60143: LD_INT 4
60145: PUSH
60146: LD_INT 4
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 4
60155: PUSH
60156: LD_INT 3
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 5
60165: PUSH
60166: LD_INT 4
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: LD_INT 5
60175: PUSH
60176: LD_INT 5
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: LD_INT 4
60185: PUSH
60186: LD_INT 5
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 3
60195: PUSH
60196: LD_INT 4
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 3
60205: PUSH
60206: LD_INT 3
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: LD_INT 5
60215: PUSH
60216: LD_INT 3
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 3
60225: PUSH
60226: LD_INT 5
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 0
60235: PUSH
60236: LD_INT 3
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 0
60245: PUSH
60246: LD_INT 2
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 1
60255: PUSH
60256: LD_INT 3
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 1
60265: PUSH
60266: LD_INT 4
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 0
60275: PUSH
60276: LD_INT 4
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 1
60285: NEG
60286: PUSH
60287: LD_INT 3
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 1
60296: NEG
60297: PUSH
60298: LD_INT 2
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 2
60307: PUSH
60308: LD_INT 4
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 2
60317: NEG
60318: PUSH
60319: LD_INT 2
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 4
60328: NEG
60329: PUSH
60330: LD_INT 0
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 4
60339: NEG
60340: PUSH
60341: LD_INT 1
60343: NEG
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 3
60351: NEG
60352: PUSH
60353: LD_INT 0
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 3
60362: NEG
60363: PUSH
60364: LD_INT 1
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 4
60373: NEG
60374: PUSH
60375: LD_INT 1
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: PUSH
60382: LD_INT 5
60384: NEG
60385: PUSH
60386: LD_INT 0
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: LD_INT 5
60395: NEG
60396: PUSH
60397: LD_INT 1
60399: NEG
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 5
60407: NEG
60408: PUSH
60409: LD_INT 2
60411: NEG
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 3
60419: NEG
60420: PUSH
60421: LD_INT 2
60423: PUSH
60424: EMPTY
60425: LIST
60426: LIST
60427: PUSH
60428: LD_INT 3
60430: NEG
60431: PUSH
60432: LD_INT 3
60434: NEG
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 3
60442: NEG
60443: PUSH
60444: LD_INT 4
60446: NEG
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 2
60454: NEG
60455: PUSH
60456: LD_INT 3
60458: NEG
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 2
60466: NEG
60467: PUSH
60468: LD_INT 2
60470: NEG
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 3
60478: NEG
60479: PUSH
60480: LD_INT 2
60482: NEG
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 4
60490: NEG
60491: PUSH
60492: LD_INT 3
60494: NEG
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 4
60502: NEG
60503: PUSH
60504: LD_INT 4
60506: NEG
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 2
60514: NEG
60515: PUSH
60516: LD_INT 4
60518: NEG
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: PUSH
60524: LD_INT 4
60526: NEG
60527: PUSH
60528: LD_INT 2
60530: NEG
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: LD_INT 0
60538: PUSH
60539: LD_INT 4
60541: NEG
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: LD_INT 0
60549: PUSH
60550: LD_INT 5
60552: NEG
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 1
60560: PUSH
60561: LD_INT 4
60563: NEG
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 1
60571: PUSH
60572: LD_INT 3
60574: NEG
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 0
60582: PUSH
60583: LD_INT 3
60585: NEG
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: LD_INT 1
60593: NEG
60594: PUSH
60595: LD_INT 4
60597: NEG
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 1
60605: NEG
60606: PUSH
60607: LD_INT 5
60609: NEG
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: LD_INT 2
60617: PUSH
60618: LD_INT 3
60620: NEG
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: PUSH
60626: LD_INT 2
60628: NEG
60629: PUSH
60630: LD_INT 5
60632: NEG
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: LIST
60664: LIST
60665: LIST
60666: LIST
60667: LIST
60668: LIST
60669: LIST
60670: LIST
60671: LIST
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60685: LD_ADDR_VAR 0 31
60689: PUSH
60690: LD_INT 0
60692: PUSH
60693: LD_INT 4
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 0
60702: PUSH
60703: LD_INT 3
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PUSH
60710: LD_INT 1
60712: PUSH
60713: LD_INT 4
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 1
60722: PUSH
60723: LD_INT 5
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 0
60732: PUSH
60733: LD_INT 5
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 1
60742: NEG
60743: PUSH
60744: LD_INT 4
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 1
60753: NEG
60754: PUSH
60755: LD_INT 3
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 2
60764: PUSH
60765: LD_INT 5
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 2
60774: NEG
60775: PUSH
60776: LD_INT 3
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 3
60785: NEG
60786: PUSH
60787: LD_INT 0
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 3
60796: NEG
60797: PUSH
60798: LD_INT 1
60800: NEG
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 2
60808: NEG
60809: PUSH
60810: LD_INT 0
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 2
60819: NEG
60820: PUSH
60821: LD_INT 1
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 3
60830: NEG
60831: PUSH
60832: LD_INT 1
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: LD_INT 4
60841: NEG
60842: PUSH
60843: LD_INT 0
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: LD_INT 4
60852: NEG
60853: PUSH
60854: LD_INT 1
60856: NEG
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: PUSH
60862: LD_INT 4
60864: NEG
60865: PUSH
60866: LD_INT 2
60868: NEG
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 2
60876: NEG
60877: PUSH
60878: LD_INT 2
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 4
60887: NEG
60888: PUSH
60889: LD_INT 4
60891: NEG
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: LD_INT 4
60899: NEG
60900: PUSH
60901: LD_INT 5
60903: NEG
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: LD_INT 3
60911: NEG
60912: PUSH
60913: LD_INT 4
60915: NEG
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 3
60923: NEG
60924: PUSH
60925: LD_INT 3
60927: NEG
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 4
60935: NEG
60936: PUSH
60937: LD_INT 3
60939: NEG
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 5
60947: NEG
60948: PUSH
60949: LD_INT 4
60951: NEG
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_INT 5
60959: NEG
60960: PUSH
60961: LD_INT 5
60963: NEG
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 3
60971: NEG
60972: PUSH
60973: LD_INT 5
60975: NEG
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 5
60983: NEG
60984: PUSH
60985: LD_INT 3
60987: NEG
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: PUSH
60993: LD_INT 0
60995: PUSH
60996: LD_INT 3
60998: NEG
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 0
61006: PUSH
61007: LD_INT 4
61009: NEG
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 1
61017: PUSH
61018: LD_INT 3
61020: NEG
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 1
61028: PUSH
61029: LD_INT 2
61031: NEG
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: LD_INT 0
61039: PUSH
61040: LD_INT 2
61042: NEG
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 1
61050: NEG
61051: PUSH
61052: LD_INT 3
61054: NEG
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 1
61062: NEG
61063: PUSH
61064: LD_INT 4
61066: NEG
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 2
61074: PUSH
61075: LD_INT 2
61077: NEG
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 2
61085: NEG
61086: PUSH
61087: LD_INT 4
61089: NEG
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: LD_INT 4
61097: PUSH
61098: LD_INT 0
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: PUSH
61105: LD_INT 4
61107: PUSH
61108: LD_INT 1
61110: NEG
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: LD_INT 5
61118: PUSH
61119: LD_INT 0
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: PUSH
61126: LD_INT 5
61128: PUSH
61129: LD_INT 1
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 4
61138: PUSH
61139: LD_INT 1
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 3
61148: PUSH
61149: LD_INT 0
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 3
61158: PUSH
61159: LD_INT 1
61161: NEG
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 3
61169: PUSH
61170: LD_INT 2
61172: NEG
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: PUSH
61178: LD_INT 5
61180: PUSH
61181: LD_INT 2
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: LIST
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61235: LD_ADDR_VAR 0 32
61239: PUSH
61240: LD_INT 4
61242: NEG
61243: PUSH
61244: LD_INT 0
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 4
61253: NEG
61254: PUSH
61255: LD_INT 1
61257: NEG
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 3
61265: NEG
61266: PUSH
61267: LD_INT 0
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 3
61276: NEG
61277: PUSH
61278: LD_INT 1
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 4
61287: NEG
61288: PUSH
61289: LD_INT 1
61291: PUSH
61292: EMPTY
61293: LIST
61294: LIST
61295: PUSH
61296: LD_INT 5
61298: NEG
61299: PUSH
61300: LD_INT 0
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 5
61309: NEG
61310: PUSH
61311: LD_INT 1
61313: NEG
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: LD_INT 5
61321: NEG
61322: PUSH
61323: LD_INT 2
61325: NEG
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 3
61333: NEG
61334: PUSH
61335: LD_INT 2
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 3
61344: NEG
61345: PUSH
61346: LD_INT 3
61348: NEG
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 3
61356: NEG
61357: PUSH
61358: LD_INT 4
61360: NEG
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 2
61368: NEG
61369: PUSH
61370: LD_INT 3
61372: NEG
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 2
61380: NEG
61381: PUSH
61382: LD_INT 2
61384: NEG
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 3
61392: NEG
61393: PUSH
61394: LD_INT 2
61396: NEG
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: PUSH
61402: LD_INT 4
61404: NEG
61405: PUSH
61406: LD_INT 3
61408: NEG
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: PUSH
61414: LD_INT 4
61416: NEG
61417: PUSH
61418: LD_INT 4
61420: NEG
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 2
61428: NEG
61429: PUSH
61430: LD_INT 4
61432: NEG
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: LD_INT 4
61440: NEG
61441: PUSH
61442: LD_INT 2
61444: NEG
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_INT 0
61452: PUSH
61453: LD_INT 4
61455: NEG
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: PUSH
61461: LD_INT 0
61463: PUSH
61464: LD_INT 5
61466: NEG
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 1
61474: PUSH
61475: LD_INT 4
61477: NEG
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 1
61485: PUSH
61486: LD_INT 3
61488: NEG
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 0
61496: PUSH
61497: LD_INT 3
61499: NEG
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 1
61507: NEG
61508: PUSH
61509: LD_INT 4
61511: NEG
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: LD_INT 1
61519: NEG
61520: PUSH
61521: LD_INT 5
61523: NEG
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: LD_INT 2
61531: PUSH
61532: LD_INT 3
61534: NEG
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 2
61542: NEG
61543: PUSH
61544: LD_INT 5
61546: NEG
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 3
61554: PUSH
61555: LD_INT 0
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 3
61564: PUSH
61565: LD_INT 1
61567: NEG
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: LD_INT 4
61575: PUSH
61576: LD_INT 0
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 4
61585: PUSH
61586: LD_INT 1
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: LD_INT 3
61595: PUSH
61596: LD_INT 1
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 2
61605: PUSH
61606: LD_INT 0
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 2
61615: PUSH
61616: LD_INT 1
61618: NEG
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: LD_INT 2
61626: PUSH
61627: LD_INT 2
61629: NEG
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: PUSH
61635: LD_INT 4
61637: PUSH
61638: LD_INT 2
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 4
61647: PUSH
61648: LD_INT 4
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 4
61657: PUSH
61658: LD_INT 3
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: PUSH
61665: LD_INT 5
61667: PUSH
61668: LD_INT 4
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: LD_INT 5
61677: PUSH
61678: LD_INT 5
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 4
61687: PUSH
61688: LD_INT 5
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: PUSH
61695: LD_INT 3
61697: PUSH
61698: LD_INT 4
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: PUSH
61705: LD_INT 3
61707: PUSH
61708: LD_INT 3
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PUSH
61715: LD_INT 5
61717: PUSH
61718: LD_INT 3
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PUSH
61725: LD_INT 3
61727: PUSH
61728: LD_INT 5
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: LIST
61765: LIST
61766: LIST
61767: LIST
61768: LIST
61769: LIST
61770: LIST
61771: LIST
61772: LIST
61773: LIST
61774: LIST
61775: LIST
61776: LIST
61777: LIST
61778: LIST
61779: LIST
61780: LIST
61781: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61782: LD_ADDR_VAR 0 33
61786: PUSH
61787: LD_INT 4
61789: NEG
61790: PUSH
61791: LD_INT 4
61793: NEG
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: PUSH
61799: LD_INT 4
61801: NEG
61802: PUSH
61803: LD_INT 5
61805: NEG
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: LD_INT 3
61813: NEG
61814: PUSH
61815: LD_INT 4
61817: NEG
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PUSH
61823: LD_INT 3
61825: NEG
61826: PUSH
61827: LD_INT 3
61829: NEG
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PUSH
61835: LD_INT 4
61837: NEG
61838: PUSH
61839: LD_INT 3
61841: NEG
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: PUSH
61847: LD_INT 5
61849: NEG
61850: PUSH
61851: LD_INT 4
61853: NEG
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: PUSH
61859: LD_INT 5
61861: NEG
61862: PUSH
61863: LD_INT 5
61865: NEG
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: PUSH
61871: LD_INT 3
61873: NEG
61874: PUSH
61875: LD_INT 5
61877: NEG
61878: PUSH
61879: EMPTY
61880: LIST
61881: LIST
61882: PUSH
61883: LD_INT 5
61885: NEG
61886: PUSH
61887: LD_INT 3
61889: NEG
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: PUSH
61895: LD_INT 0
61897: PUSH
61898: LD_INT 3
61900: NEG
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PUSH
61906: LD_INT 0
61908: PUSH
61909: LD_INT 4
61911: NEG
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 1
61919: PUSH
61920: LD_INT 3
61922: NEG
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: PUSH
61928: LD_INT 1
61930: PUSH
61931: LD_INT 2
61933: NEG
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: PUSH
61939: LD_INT 0
61941: PUSH
61942: LD_INT 2
61944: NEG
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: LD_INT 1
61952: NEG
61953: PUSH
61954: LD_INT 3
61956: NEG
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: PUSH
61962: LD_INT 1
61964: NEG
61965: PUSH
61966: LD_INT 4
61968: NEG
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: PUSH
61974: LD_INT 2
61976: PUSH
61977: LD_INT 2
61979: NEG
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_INT 2
61987: NEG
61988: PUSH
61989: LD_INT 4
61991: NEG
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: LD_INT 4
61999: PUSH
62000: LD_INT 0
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: LD_INT 4
62009: PUSH
62010: LD_INT 1
62012: NEG
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: PUSH
62018: LD_INT 5
62020: PUSH
62021: LD_INT 0
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: LD_INT 5
62030: PUSH
62031: LD_INT 1
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: PUSH
62038: LD_INT 4
62040: PUSH
62041: LD_INT 1
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: PUSH
62048: LD_INT 3
62050: PUSH
62051: LD_INT 0
62053: PUSH
62054: EMPTY
62055: LIST
62056: LIST
62057: PUSH
62058: LD_INT 3
62060: PUSH
62061: LD_INT 1
62063: NEG
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: PUSH
62069: LD_INT 3
62071: PUSH
62072: LD_INT 2
62074: NEG
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: PUSH
62080: LD_INT 5
62082: PUSH
62083: LD_INT 2
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 3
62092: PUSH
62093: LD_INT 3
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: LD_INT 3
62102: PUSH
62103: LD_INT 2
62105: PUSH
62106: EMPTY
62107: LIST
62108: LIST
62109: PUSH
62110: LD_INT 4
62112: PUSH
62113: LD_INT 3
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: PUSH
62120: LD_INT 4
62122: PUSH
62123: LD_INT 4
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: PUSH
62130: LD_INT 3
62132: PUSH
62133: LD_INT 4
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 2
62142: PUSH
62143: LD_INT 3
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: LD_INT 2
62152: PUSH
62153: LD_INT 2
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: LD_INT 4
62162: PUSH
62163: LD_INT 2
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: PUSH
62170: LD_INT 2
62172: PUSH
62173: LD_INT 4
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: PUSH
62180: LD_INT 0
62182: PUSH
62183: LD_INT 4
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: PUSH
62190: LD_INT 0
62192: PUSH
62193: LD_INT 3
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: PUSH
62200: LD_INT 1
62202: PUSH
62203: LD_INT 4
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: PUSH
62210: LD_INT 1
62212: PUSH
62213: LD_INT 5
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: PUSH
62220: LD_INT 0
62222: PUSH
62223: LD_INT 5
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: PUSH
62230: LD_INT 1
62232: NEG
62233: PUSH
62234: LD_INT 4
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: LD_INT 1
62243: NEG
62244: PUSH
62245: LD_INT 3
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: LD_INT 2
62254: PUSH
62255: LD_INT 5
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: PUSH
62262: LD_INT 2
62264: NEG
62265: PUSH
62266: LD_INT 3
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: LIST
62277: LIST
62278: LIST
62279: LIST
62280: LIST
62281: LIST
62282: LIST
62283: LIST
62284: LIST
62285: LIST
62286: LIST
62287: LIST
62288: LIST
62289: LIST
62290: LIST
62291: LIST
62292: LIST
62293: LIST
62294: LIST
62295: LIST
62296: LIST
62297: LIST
62298: LIST
62299: LIST
62300: LIST
62301: LIST
62302: LIST
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: LIST
62310: LIST
62311: LIST
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62320: LD_ADDR_VAR 0 34
62324: PUSH
62325: LD_INT 0
62327: PUSH
62328: LD_INT 4
62330: NEG
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: LD_INT 0
62338: PUSH
62339: LD_INT 5
62341: NEG
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 1
62349: PUSH
62350: LD_INT 4
62352: NEG
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: LD_INT 1
62360: PUSH
62361: LD_INT 3
62363: NEG
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: LD_INT 0
62371: PUSH
62372: LD_INT 3
62374: NEG
62375: PUSH
62376: EMPTY
62377: LIST
62378: LIST
62379: PUSH
62380: LD_INT 1
62382: NEG
62383: PUSH
62384: LD_INT 4
62386: NEG
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: LD_INT 1
62394: NEG
62395: PUSH
62396: LD_INT 5
62398: NEG
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: PUSH
62404: LD_INT 2
62406: PUSH
62407: LD_INT 3
62409: NEG
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: PUSH
62415: LD_INT 2
62417: NEG
62418: PUSH
62419: LD_INT 5
62421: NEG
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: PUSH
62427: LD_INT 3
62429: PUSH
62430: LD_INT 0
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: LD_INT 3
62439: PUSH
62440: LD_INT 1
62442: NEG
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: LD_INT 4
62450: PUSH
62451: LD_INT 0
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 4
62460: PUSH
62461: LD_INT 1
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 3
62470: PUSH
62471: LD_INT 1
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: LD_INT 2
62480: PUSH
62481: LD_INT 0
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: LD_INT 2
62490: PUSH
62491: LD_INT 1
62493: NEG
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 2
62501: PUSH
62502: LD_INT 2
62504: NEG
62505: PUSH
62506: EMPTY
62507: LIST
62508: LIST
62509: PUSH
62510: LD_INT 4
62512: PUSH
62513: LD_INT 2
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: PUSH
62520: LD_INT 4
62522: PUSH
62523: LD_INT 4
62525: PUSH
62526: EMPTY
62527: LIST
62528: LIST
62529: PUSH
62530: LD_INT 4
62532: PUSH
62533: LD_INT 3
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: PUSH
62540: LD_INT 5
62542: PUSH
62543: LD_INT 4
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: PUSH
62550: LD_INT 5
62552: PUSH
62553: LD_INT 5
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: PUSH
62560: LD_INT 4
62562: PUSH
62563: LD_INT 5
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: PUSH
62570: LD_INT 3
62572: PUSH
62573: LD_INT 4
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: PUSH
62580: LD_INT 3
62582: PUSH
62583: LD_INT 3
62585: PUSH
62586: EMPTY
62587: LIST
62588: LIST
62589: PUSH
62590: LD_INT 5
62592: PUSH
62593: LD_INT 3
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: PUSH
62600: LD_INT 3
62602: PUSH
62603: LD_INT 5
62605: PUSH
62606: EMPTY
62607: LIST
62608: LIST
62609: PUSH
62610: LD_INT 0
62612: PUSH
62613: LD_INT 3
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: LD_INT 0
62622: PUSH
62623: LD_INT 2
62625: PUSH
62626: EMPTY
62627: LIST
62628: LIST
62629: PUSH
62630: LD_INT 1
62632: PUSH
62633: LD_INT 3
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: PUSH
62640: LD_INT 1
62642: PUSH
62643: LD_INT 4
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: PUSH
62650: LD_INT 0
62652: PUSH
62653: LD_INT 4
62655: PUSH
62656: EMPTY
62657: LIST
62658: LIST
62659: PUSH
62660: LD_INT 1
62662: NEG
62663: PUSH
62664: LD_INT 3
62666: PUSH
62667: EMPTY
62668: LIST
62669: LIST
62670: PUSH
62671: LD_INT 1
62673: NEG
62674: PUSH
62675: LD_INT 2
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: PUSH
62682: LD_INT 2
62684: PUSH
62685: LD_INT 4
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: LD_INT 2
62694: NEG
62695: PUSH
62696: LD_INT 2
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 4
62705: NEG
62706: PUSH
62707: LD_INT 0
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: PUSH
62714: LD_INT 4
62716: NEG
62717: PUSH
62718: LD_INT 1
62720: NEG
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: LD_INT 3
62728: NEG
62729: PUSH
62730: LD_INT 0
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: LD_INT 3
62739: NEG
62740: PUSH
62741: LD_INT 1
62743: PUSH
62744: EMPTY
62745: LIST
62746: LIST
62747: PUSH
62748: LD_INT 4
62750: NEG
62751: PUSH
62752: LD_INT 1
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PUSH
62759: LD_INT 5
62761: NEG
62762: PUSH
62763: LD_INT 0
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: LD_INT 5
62772: NEG
62773: PUSH
62774: LD_INT 1
62776: NEG
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: PUSH
62782: LD_INT 5
62784: NEG
62785: PUSH
62786: LD_INT 2
62788: NEG
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: PUSH
62794: LD_INT 3
62796: NEG
62797: PUSH
62798: LD_INT 2
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: LIST
62833: LIST
62834: LIST
62835: LIST
62836: LIST
62837: LIST
62838: LIST
62839: LIST
62840: LIST
62841: LIST
62842: LIST
62843: LIST
62844: LIST
62845: LIST
62846: LIST
62847: LIST
62848: LIST
62849: LIST
62850: LIST
62851: ST_TO_ADDR
// end ; end ;
62852: GO 62855
62854: POP
// case btype of b_depot , b_warehouse :
62855: LD_VAR 0 1
62859: PUSH
62860: LD_INT 0
62862: DOUBLE
62863: EQUAL
62864: IFTRUE 62874
62866: LD_INT 1
62868: DOUBLE
62869: EQUAL
62870: IFTRUE 62874
62872: GO 63075
62874: POP
// case nation of nation_american :
62875: LD_VAR 0 5
62879: PUSH
62880: LD_INT 1
62882: DOUBLE
62883: EQUAL
62884: IFTRUE 62888
62886: GO 62944
62888: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62889: LD_ADDR_VAR 0 9
62893: PUSH
62894: LD_VAR 0 11
62898: PUSH
62899: LD_VAR 0 12
62903: PUSH
62904: LD_VAR 0 13
62908: PUSH
62909: LD_VAR 0 14
62913: PUSH
62914: LD_VAR 0 15
62918: PUSH
62919: LD_VAR 0 16
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: PUSH
62932: LD_VAR 0 4
62936: PUSH
62937: LD_INT 1
62939: PLUS
62940: ARRAY
62941: ST_TO_ADDR
62942: GO 63073
62944: LD_INT 2
62946: DOUBLE
62947: EQUAL
62948: IFTRUE 62952
62950: GO 63008
62952: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62953: LD_ADDR_VAR 0 9
62957: PUSH
62958: LD_VAR 0 17
62962: PUSH
62963: LD_VAR 0 18
62967: PUSH
62968: LD_VAR 0 19
62972: PUSH
62973: LD_VAR 0 20
62977: PUSH
62978: LD_VAR 0 21
62982: PUSH
62983: LD_VAR 0 22
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: LIST
62992: LIST
62993: LIST
62994: LIST
62995: PUSH
62996: LD_VAR 0 4
63000: PUSH
63001: LD_INT 1
63003: PLUS
63004: ARRAY
63005: ST_TO_ADDR
63006: GO 63073
63008: LD_INT 3
63010: DOUBLE
63011: EQUAL
63012: IFTRUE 63016
63014: GO 63072
63016: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63017: LD_ADDR_VAR 0 9
63021: PUSH
63022: LD_VAR 0 23
63026: PUSH
63027: LD_VAR 0 24
63031: PUSH
63032: LD_VAR 0 25
63036: PUSH
63037: LD_VAR 0 26
63041: PUSH
63042: LD_VAR 0 27
63046: PUSH
63047: LD_VAR 0 28
63051: PUSH
63052: EMPTY
63053: LIST
63054: LIST
63055: LIST
63056: LIST
63057: LIST
63058: LIST
63059: PUSH
63060: LD_VAR 0 4
63064: PUSH
63065: LD_INT 1
63067: PLUS
63068: ARRAY
63069: ST_TO_ADDR
63070: GO 63073
63072: POP
63073: GO 63628
63075: LD_INT 2
63077: DOUBLE
63078: EQUAL
63079: IFTRUE 63089
63081: LD_INT 3
63083: DOUBLE
63084: EQUAL
63085: IFTRUE 63089
63087: GO 63145
63089: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63090: LD_ADDR_VAR 0 9
63094: PUSH
63095: LD_VAR 0 29
63099: PUSH
63100: LD_VAR 0 30
63104: PUSH
63105: LD_VAR 0 31
63109: PUSH
63110: LD_VAR 0 32
63114: PUSH
63115: LD_VAR 0 33
63119: PUSH
63120: LD_VAR 0 34
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: LIST
63129: LIST
63130: LIST
63131: LIST
63132: PUSH
63133: LD_VAR 0 4
63137: PUSH
63138: LD_INT 1
63140: PLUS
63141: ARRAY
63142: ST_TO_ADDR
63143: GO 63628
63145: LD_INT 16
63147: DOUBLE
63148: EQUAL
63149: IFTRUE 63207
63151: LD_INT 17
63153: DOUBLE
63154: EQUAL
63155: IFTRUE 63207
63157: LD_INT 18
63159: DOUBLE
63160: EQUAL
63161: IFTRUE 63207
63163: LD_INT 19
63165: DOUBLE
63166: EQUAL
63167: IFTRUE 63207
63169: LD_INT 22
63171: DOUBLE
63172: EQUAL
63173: IFTRUE 63207
63175: LD_INT 20
63177: DOUBLE
63178: EQUAL
63179: IFTRUE 63207
63181: LD_INT 21
63183: DOUBLE
63184: EQUAL
63185: IFTRUE 63207
63187: LD_INT 23
63189: DOUBLE
63190: EQUAL
63191: IFTRUE 63207
63193: LD_INT 24
63195: DOUBLE
63196: EQUAL
63197: IFTRUE 63207
63199: LD_INT 25
63201: DOUBLE
63202: EQUAL
63203: IFTRUE 63207
63205: GO 63263
63207: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63208: LD_ADDR_VAR 0 9
63212: PUSH
63213: LD_VAR 0 35
63217: PUSH
63218: LD_VAR 0 36
63222: PUSH
63223: LD_VAR 0 37
63227: PUSH
63228: LD_VAR 0 38
63232: PUSH
63233: LD_VAR 0 39
63237: PUSH
63238: LD_VAR 0 40
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: LIST
63247: LIST
63248: LIST
63249: LIST
63250: PUSH
63251: LD_VAR 0 4
63255: PUSH
63256: LD_INT 1
63258: PLUS
63259: ARRAY
63260: ST_TO_ADDR
63261: GO 63628
63263: LD_INT 6
63265: DOUBLE
63266: EQUAL
63267: IFTRUE 63319
63269: LD_INT 7
63271: DOUBLE
63272: EQUAL
63273: IFTRUE 63319
63275: LD_INT 8
63277: DOUBLE
63278: EQUAL
63279: IFTRUE 63319
63281: LD_INT 13
63283: DOUBLE
63284: EQUAL
63285: IFTRUE 63319
63287: LD_INT 12
63289: DOUBLE
63290: EQUAL
63291: IFTRUE 63319
63293: LD_INT 15
63295: DOUBLE
63296: EQUAL
63297: IFTRUE 63319
63299: LD_INT 11
63301: DOUBLE
63302: EQUAL
63303: IFTRUE 63319
63305: LD_INT 14
63307: DOUBLE
63308: EQUAL
63309: IFTRUE 63319
63311: LD_INT 10
63313: DOUBLE
63314: EQUAL
63315: IFTRUE 63319
63317: GO 63375
63319: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63320: LD_ADDR_VAR 0 9
63324: PUSH
63325: LD_VAR 0 41
63329: PUSH
63330: LD_VAR 0 42
63334: PUSH
63335: LD_VAR 0 43
63339: PUSH
63340: LD_VAR 0 44
63344: PUSH
63345: LD_VAR 0 45
63349: PUSH
63350: LD_VAR 0 46
63354: PUSH
63355: EMPTY
63356: LIST
63357: LIST
63358: LIST
63359: LIST
63360: LIST
63361: LIST
63362: PUSH
63363: LD_VAR 0 4
63367: PUSH
63368: LD_INT 1
63370: PLUS
63371: ARRAY
63372: ST_TO_ADDR
63373: GO 63628
63375: LD_INT 36
63377: DOUBLE
63378: EQUAL
63379: IFTRUE 63383
63381: GO 63439
63383: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63384: LD_ADDR_VAR 0 9
63388: PUSH
63389: LD_VAR 0 47
63393: PUSH
63394: LD_VAR 0 48
63398: PUSH
63399: LD_VAR 0 49
63403: PUSH
63404: LD_VAR 0 50
63408: PUSH
63409: LD_VAR 0 51
63413: PUSH
63414: LD_VAR 0 52
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: LIST
63423: LIST
63424: LIST
63425: LIST
63426: PUSH
63427: LD_VAR 0 4
63431: PUSH
63432: LD_INT 1
63434: PLUS
63435: ARRAY
63436: ST_TO_ADDR
63437: GO 63628
63439: LD_INT 4
63441: DOUBLE
63442: EQUAL
63443: IFTRUE 63465
63445: LD_INT 5
63447: DOUBLE
63448: EQUAL
63449: IFTRUE 63465
63451: LD_INT 34
63453: DOUBLE
63454: EQUAL
63455: IFTRUE 63465
63457: LD_INT 37
63459: DOUBLE
63460: EQUAL
63461: IFTRUE 63465
63463: GO 63521
63465: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63466: LD_ADDR_VAR 0 9
63470: PUSH
63471: LD_VAR 0 53
63475: PUSH
63476: LD_VAR 0 54
63480: PUSH
63481: LD_VAR 0 55
63485: PUSH
63486: LD_VAR 0 56
63490: PUSH
63491: LD_VAR 0 57
63495: PUSH
63496: LD_VAR 0 58
63500: PUSH
63501: EMPTY
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: PUSH
63509: LD_VAR 0 4
63513: PUSH
63514: LD_INT 1
63516: PLUS
63517: ARRAY
63518: ST_TO_ADDR
63519: GO 63628
63521: LD_INT 31
63523: DOUBLE
63524: EQUAL
63525: IFTRUE 63571
63527: LD_INT 32
63529: DOUBLE
63530: EQUAL
63531: IFTRUE 63571
63533: LD_INT 33
63535: DOUBLE
63536: EQUAL
63537: IFTRUE 63571
63539: LD_INT 27
63541: DOUBLE
63542: EQUAL
63543: IFTRUE 63571
63545: LD_INT 26
63547: DOUBLE
63548: EQUAL
63549: IFTRUE 63571
63551: LD_INT 28
63553: DOUBLE
63554: EQUAL
63555: IFTRUE 63571
63557: LD_INT 29
63559: DOUBLE
63560: EQUAL
63561: IFTRUE 63571
63563: LD_INT 30
63565: DOUBLE
63566: EQUAL
63567: IFTRUE 63571
63569: GO 63627
63571: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63572: LD_ADDR_VAR 0 9
63576: PUSH
63577: LD_VAR 0 59
63581: PUSH
63582: LD_VAR 0 60
63586: PUSH
63587: LD_VAR 0 61
63591: PUSH
63592: LD_VAR 0 62
63596: PUSH
63597: LD_VAR 0 63
63601: PUSH
63602: LD_VAR 0 64
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: PUSH
63615: LD_VAR 0 4
63619: PUSH
63620: LD_INT 1
63622: PLUS
63623: ARRAY
63624: ST_TO_ADDR
63625: GO 63628
63627: POP
// temp_list2 = [ ] ;
63628: LD_ADDR_VAR 0 10
63632: PUSH
63633: EMPTY
63634: ST_TO_ADDR
// for i in temp_list do
63635: LD_ADDR_VAR 0 8
63639: PUSH
63640: LD_VAR 0 9
63644: PUSH
63645: FOR_IN
63646: IFFALSE 63698
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63648: LD_ADDR_VAR 0 10
63652: PUSH
63653: LD_VAR 0 10
63657: PUSH
63658: LD_VAR 0 8
63662: PUSH
63663: LD_INT 1
63665: ARRAY
63666: PUSH
63667: LD_VAR 0 2
63671: PLUS
63672: PUSH
63673: LD_VAR 0 8
63677: PUSH
63678: LD_INT 2
63680: ARRAY
63681: PUSH
63682: LD_VAR 0 3
63686: PLUS
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: EMPTY
63693: LIST
63694: ADD
63695: ST_TO_ADDR
63696: GO 63645
63698: POP
63699: POP
// result = temp_list2 ;
63700: LD_ADDR_VAR 0 7
63704: PUSH
63705: LD_VAR 0 10
63709: ST_TO_ADDR
// end ;
63710: LD_VAR 0 7
63714: RET
// export function EnemyInRange ( unit , dist ) ; begin
63715: LD_INT 0
63717: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63718: LD_ADDR_VAR 0 3
63722: PUSH
63723: LD_VAR 0 1
63727: PPUSH
63728: CALL_OW 255
63732: PPUSH
63733: LD_VAR 0 1
63737: PPUSH
63738: CALL_OW 250
63742: PPUSH
63743: LD_VAR 0 1
63747: PPUSH
63748: CALL_OW 251
63752: PPUSH
63753: LD_VAR 0 2
63757: PPUSH
63758: CALL 37117 0 4
63762: PUSH
63763: LD_INT 4
63765: ARRAY
63766: ST_TO_ADDR
// end ;
63767: LD_VAR 0 3
63771: RET
// export function PlayerSeeMe ( unit ) ; begin
63772: LD_INT 0
63774: PPUSH
// result := See ( your_side , unit ) ;
63775: LD_ADDR_VAR 0 2
63779: PUSH
63780: LD_OWVAR 2
63784: PPUSH
63785: LD_VAR 0 1
63789: PPUSH
63790: CALL_OW 292
63794: ST_TO_ADDR
// end ;
63795: LD_VAR 0 2
63799: RET
// export function ReverseDir ( unit ) ; begin
63800: LD_INT 0
63802: PPUSH
// if not unit then
63803: LD_VAR 0 1
63807: NOT
63808: IFFALSE 63812
// exit ;
63810: GO 63835
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63812: LD_ADDR_VAR 0 2
63816: PUSH
63817: LD_VAR 0 1
63821: PPUSH
63822: CALL_OW 254
63826: PUSH
63827: LD_INT 3
63829: PLUS
63830: PUSH
63831: LD_INT 6
63833: MOD
63834: ST_TO_ADDR
// end ;
63835: LD_VAR 0 2
63839: RET
// export function ReverseArray ( array ) ; var i ; begin
63840: LD_INT 0
63842: PPUSH
63843: PPUSH
// if not array then
63844: LD_VAR 0 1
63848: NOT
63849: IFFALSE 63853
// exit ;
63851: GO 63908
// result := [ ] ;
63853: LD_ADDR_VAR 0 2
63857: PUSH
63858: EMPTY
63859: ST_TO_ADDR
// for i := array downto 1 do
63860: LD_ADDR_VAR 0 3
63864: PUSH
63865: DOUBLE
63866: LD_VAR 0 1
63870: INC
63871: ST_TO_ADDR
63872: LD_INT 1
63874: PUSH
63875: FOR_DOWNTO
63876: IFFALSE 63906
// result := Join ( result , array [ i ] ) ;
63878: LD_ADDR_VAR 0 2
63882: PUSH
63883: LD_VAR 0 2
63887: PPUSH
63888: LD_VAR 0 1
63892: PUSH
63893: LD_VAR 0 3
63897: ARRAY
63898: PPUSH
63899: CALL 68552 0 2
63903: ST_TO_ADDR
63904: GO 63875
63906: POP
63907: POP
// end ;
63908: LD_VAR 0 2
63912: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
63913: LD_INT 0
63915: PPUSH
63916: PPUSH
63917: PPUSH
63918: PPUSH
63919: PPUSH
63920: PPUSH
// if not unit or not hexes then
63921: LD_VAR 0 1
63925: NOT
63926: PUSH
63927: LD_VAR 0 2
63931: NOT
63932: OR
63933: IFFALSE 63937
// exit ;
63935: GO 64060
// dist := 9999 ;
63937: LD_ADDR_VAR 0 5
63941: PUSH
63942: LD_INT 9999
63944: ST_TO_ADDR
// for i = 1 to hexes do
63945: LD_ADDR_VAR 0 4
63949: PUSH
63950: DOUBLE
63951: LD_INT 1
63953: DEC
63954: ST_TO_ADDR
63955: LD_VAR 0 2
63959: PUSH
63960: FOR_TO
63961: IFFALSE 64048
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63963: LD_ADDR_VAR 0 6
63967: PUSH
63968: LD_VAR 0 1
63972: PPUSH
63973: LD_VAR 0 2
63977: PUSH
63978: LD_VAR 0 4
63982: ARRAY
63983: PUSH
63984: LD_INT 1
63986: ARRAY
63987: PPUSH
63988: LD_VAR 0 2
63992: PUSH
63993: LD_VAR 0 4
63997: ARRAY
63998: PUSH
63999: LD_INT 2
64001: ARRAY
64002: PPUSH
64003: CALL_OW 297
64007: ST_TO_ADDR
// if tdist < dist then
64008: LD_VAR 0 6
64012: PUSH
64013: LD_VAR 0 5
64017: LESS
64018: IFFALSE 64046
// begin hex := hexes [ i ] ;
64020: LD_ADDR_VAR 0 8
64024: PUSH
64025: LD_VAR 0 2
64029: PUSH
64030: LD_VAR 0 4
64034: ARRAY
64035: ST_TO_ADDR
// dist := tdist ;
64036: LD_ADDR_VAR 0 5
64040: PUSH
64041: LD_VAR 0 6
64045: ST_TO_ADDR
// end ; end ;
64046: GO 63960
64048: POP
64049: POP
// result := hex ;
64050: LD_ADDR_VAR 0 3
64054: PUSH
64055: LD_VAR 0 8
64059: ST_TO_ADDR
// end ;
64060: LD_VAR 0 3
64064: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64065: LD_INT 0
64067: PPUSH
64068: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64069: LD_VAR 0 1
64073: NOT
64074: PUSH
64075: LD_VAR 0 1
64079: PUSH
64080: LD_INT 21
64082: PUSH
64083: LD_INT 2
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: PUSH
64090: LD_INT 23
64092: PUSH
64093: LD_INT 2
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: PUSH
64100: EMPTY
64101: LIST
64102: LIST
64103: PPUSH
64104: CALL_OW 69
64108: IN
64109: NOT
64110: OR
64111: IFFALSE 64115
// exit ;
64113: GO 64162
// for i = 1 to 3 do
64115: LD_ADDR_VAR 0 3
64119: PUSH
64120: DOUBLE
64121: LD_INT 1
64123: DEC
64124: ST_TO_ADDR
64125: LD_INT 3
64127: PUSH
64128: FOR_TO
64129: IFFALSE 64160
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64131: LD_VAR 0 1
64135: PPUSH
64136: CALL_OW 250
64140: PPUSH
64141: LD_VAR 0 1
64145: PPUSH
64146: CALL_OW 251
64150: PPUSH
64151: LD_INT 1
64153: PPUSH
64154: CALL_OW 453
64158: GO 64128
64160: POP
64161: POP
// end ;
64162: LD_VAR 0 2
64166: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64167: LD_INT 0
64169: PPUSH
64170: PPUSH
64171: PPUSH
64172: PPUSH
64173: PPUSH
64174: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
64175: LD_VAR 0 1
64179: NOT
64180: PUSH
64181: LD_VAR 0 2
64185: NOT
64186: OR
64187: PUSH
64188: LD_VAR 0 1
64192: PPUSH
64193: CALL_OW 314
64197: OR
64198: IFFALSE 64202
// exit ;
64200: GO 64669
// if GetLives ( i ) < 250 then
64202: LD_VAR 0 4
64206: PPUSH
64207: CALL_OW 256
64211: PUSH
64212: LD_INT 250
64214: LESS
64215: IFFALSE 64228
// begin ComAutodestruct ( i ) ;
64217: LD_VAR 0 4
64221: PPUSH
64222: CALL 64065 0 1
// exit ;
64226: GO 64669
// end ; x := GetX ( enemy_unit ) ;
64228: LD_ADDR_VAR 0 7
64232: PUSH
64233: LD_VAR 0 2
64237: PPUSH
64238: CALL_OW 250
64242: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64243: LD_ADDR_VAR 0 8
64247: PUSH
64248: LD_VAR 0 2
64252: PPUSH
64253: CALL_OW 251
64257: ST_TO_ADDR
// if not x or not y then
64258: LD_VAR 0 7
64262: NOT
64263: PUSH
64264: LD_VAR 0 8
64268: NOT
64269: OR
64270: IFFALSE 64274
// exit ;
64272: GO 64669
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64274: LD_ADDR_VAR 0 6
64278: PUSH
64279: LD_VAR 0 7
64283: PPUSH
64284: LD_INT 0
64286: PPUSH
64287: LD_INT 4
64289: PPUSH
64290: CALL_OW 272
64294: PUSH
64295: LD_VAR 0 8
64299: PPUSH
64300: LD_INT 0
64302: PPUSH
64303: LD_INT 4
64305: PPUSH
64306: CALL_OW 273
64310: PUSH
64311: EMPTY
64312: LIST
64313: LIST
64314: PUSH
64315: LD_VAR 0 7
64319: PPUSH
64320: LD_INT 1
64322: PPUSH
64323: LD_INT 4
64325: PPUSH
64326: CALL_OW 272
64330: PUSH
64331: LD_VAR 0 8
64335: PPUSH
64336: LD_INT 1
64338: PPUSH
64339: LD_INT 4
64341: PPUSH
64342: CALL_OW 273
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: PUSH
64351: LD_VAR 0 7
64355: PPUSH
64356: LD_INT 2
64358: PPUSH
64359: LD_INT 4
64361: PPUSH
64362: CALL_OW 272
64366: PUSH
64367: LD_VAR 0 8
64371: PPUSH
64372: LD_INT 2
64374: PPUSH
64375: LD_INT 4
64377: PPUSH
64378: CALL_OW 273
64382: PUSH
64383: EMPTY
64384: LIST
64385: LIST
64386: PUSH
64387: LD_VAR 0 7
64391: PPUSH
64392: LD_INT 3
64394: PPUSH
64395: LD_INT 4
64397: PPUSH
64398: CALL_OW 272
64402: PUSH
64403: LD_VAR 0 8
64407: PPUSH
64408: LD_INT 3
64410: PPUSH
64411: LD_INT 4
64413: PPUSH
64414: CALL_OW 273
64418: PUSH
64419: EMPTY
64420: LIST
64421: LIST
64422: PUSH
64423: LD_VAR 0 7
64427: PPUSH
64428: LD_INT 4
64430: PPUSH
64431: LD_INT 4
64433: PPUSH
64434: CALL_OW 272
64438: PUSH
64439: LD_VAR 0 8
64443: PPUSH
64444: LD_INT 4
64446: PPUSH
64447: LD_INT 4
64449: PPUSH
64450: CALL_OW 273
64454: PUSH
64455: EMPTY
64456: LIST
64457: LIST
64458: PUSH
64459: LD_VAR 0 7
64463: PPUSH
64464: LD_INT 5
64466: PPUSH
64467: LD_INT 4
64469: PPUSH
64470: CALL_OW 272
64474: PUSH
64475: LD_VAR 0 8
64479: PPUSH
64480: LD_INT 5
64482: PPUSH
64483: LD_INT 4
64485: PPUSH
64486: CALL_OW 273
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: LIST
64499: LIST
64500: LIST
64501: LIST
64502: ST_TO_ADDR
// for i = tmp downto 1 do
64503: LD_ADDR_VAR 0 4
64507: PUSH
64508: DOUBLE
64509: LD_VAR 0 6
64513: INC
64514: ST_TO_ADDR
64515: LD_INT 1
64517: PUSH
64518: FOR_DOWNTO
64519: IFFALSE 64620
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64521: LD_VAR 0 6
64525: PUSH
64526: LD_VAR 0 4
64530: ARRAY
64531: PUSH
64532: LD_INT 1
64534: ARRAY
64535: PPUSH
64536: LD_VAR 0 6
64540: PUSH
64541: LD_VAR 0 4
64545: ARRAY
64546: PUSH
64547: LD_INT 2
64549: ARRAY
64550: PPUSH
64551: CALL_OW 488
64555: NOT
64556: PUSH
64557: LD_VAR 0 6
64561: PUSH
64562: LD_VAR 0 4
64566: ARRAY
64567: PUSH
64568: LD_INT 1
64570: ARRAY
64571: PPUSH
64572: LD_VAR 0 6
64576: PUSH
64577: LD_VAR 0 4
64581: ARRAY
64582: PUSH
64583: LD_INT 2
64585: ARRAY
64586: PPUSH
64587: CALL_OW 428
64591: PUSH
64592: LD_INT 0
64594: NONEQUAL
64595: OR
64596: IFFALSE 64618
// tmp := Delete ( tmp , i ) ;
64598: LD_ADDR_VAR 0 6
64602: PUSH
64603: LD_VAR 0 6
64607: PPUSH
64608: LD_VAR 0 4
64612: PPUSH
64613: CALL_OW 3
64617: ST_TO_ADDR
64618: GO 64518
64620: POP
64621: POP
// j := GetClosestHex ( unit , tmp ) ;
64622: LD_ADDR_VAR 0 5
64626: PUSH
64627: LD_VAR 0 1
64631: PPUSH
64632: LD_VAR 0 6
64636: PPUSH
64637: CALL 63913 0 2
64641: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64642: LD_VAR 0 1
64646: PPUSH
64647: LD_VAR 0 5
64651: PUSH
64652: LD_INT 1
64654: ARRAY
64655: PPUSH
64656: LD_VAR 0 5
64660: PUSH
64661: LD_INT 2
64663: ARRAY
64664: PPUSH
64665: CALL_OW 111
// end ;
64669: LD_VAR 0 3
64673: RET
// export function PrepareApemanSoldier ( ) ; begin
64674: LD_INT 0
64676: PPUSH
// uc_nation := 0 ;
64677: LD_ADDR_OWVAR 21
64681: PUSH
64682: LD_INT 0
64684: ST_TO_ADDR
// hc_sex := sex_male ;
64685: LD_ADDR_OWVAR 27
64689: PUSH
64690: LD_INT 1
64692: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64693: LD_ADDR_OWVAR 28
64697: PUSH
64698: LD_INT 15
64700: ST_TO_ADDR
// hc_gallery :=  ;
64701: LD_ADDR_OWVAR 33
64705: PUSH
64706: LD_STRING 
64708: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64709: LD_ADDR_OWVAR 31
64713: PUSH
64714: LD_INT 0
64716: PPUSH
64717: LD_INT 3
64719: PPUSH
64720: CALL_OW 12
64724: PUSH
64725: LD_INT 0
64727: PPUSH
64728: LD_INT 3
64730: PPUSH
64731: CALL_OW 12
64735: PUSH
64736: LD_INT 0
64738: PUSH
64739: LD_INT 0
64741: PUSH
64742: EMPTY
64743: LIST
64744: LIST
64745: LIST
64746: LIST
64747: ST_TO_ADDR
// end ;
64748: LD_VAR 0 1
64752: RET
// export function PrepareApemanEngineer ( ) ; begin
64753: LD_INT 0
64755: PPUSH
// uc_nation := 0 ;
64756: LD_ADDR_OWVAR 21
64760: PUSH
64761: LD_INT 0
64763: ST_TO_ADDR
// hc_sex := sex_male ;
64764: LD_ADDR_OWVAR 27
64768: PUSH
64769: LD_INT 1
64771: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64772: LD_ADDR_OWVAR 28
64776: PUSH
64777: LD_INT 16
64779: ST_TO_ADDR
// hc_gallery :=  ;
64780: LD_ADDR_OWVAR 33
64784: PUSH
64785: LD_STRING 
64787: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64788: LD_ADDR_OWVAR 31
64792: PUSH
64793: LD_INT 0
64795: PPUSH
64796: LD_INT 3
64798: PPUSH
64799: CALL_OW 12
64803: PUSH
64804: LD_INT 0
64806: PPUSH
64807: LD_INT 3
64809: PPUSH
64810: CALL_OW 12
64814: PUSH
64815: LD_INT 0
64817: PUSH
64818: LD_INT 0
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: LIST
64825: LIST
64826: ST_TO_ADDR
// end ;
64827: LD_VAR 0 1
64831: RET
// export function PrepareApeman ( agressivity ) ; begin
64832: LD_INT 0
64834: PPUSH
// uc_side := 0 ;
64835: LD_ADDR_OWVAR 20
64839: PUSH
64840: LD_INT 0
64842: ST_TO_ADDR
// uc_nation := 0 ;
64843: LD_ADDR_OWVAR 21
64847: PUSH
64848: LD_INT 0
64850: ST_TO_ADDR
// hc_sex := sex_male ;
64851: LD_ADDR_OWVAR 27
64855: PUSH
64856: LD_INT 1
64858: ST_TO_ADDR
// hc_class := class_apeman ;
64859: LD_ADDR_OWVAR 28
64863: PUSH
64864: LD_INT 12
64866: ST_TO_ADDR
// hc_gallery :=  ;
64867: LD_ADDR_OWVAR 33
64871: PUSH
64872: LD_STRING 
64874: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64875: LD_ADDR_OWVAR 35
64879: PUSH
64880: LD_VAR 0 1
64884: NEG
64885: PPUSH
64886: LD_VAR 0 1
64890: PPUSH
64891: CALL_OW 12
64895: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64896: LD_ADDR_OWVAR 31
64900: PUSH
64901: LD_INT 0
64903: PPUSH
64904: LD_INT 3
64906: PPUSH
64907: CALL_OW 12
64911: PUSH
64912: LD_INT 0
64914: PPUSH
64915: LD_INT 3
64917: PPUSH
64918: CALL_OW 12
64922: PUSH
64923: LD_INT 0
64925: PUSH
64926: LD_INT 0
64928: PUSH
64929: EMPTY
64930: LIST
64931: LIST
64932: LIST
64933: LIST
64934: ST_TO_ADDR
// end ;
64935: LD_VAR 0 2
64939: RET
// export function PrepareTiger ( agressivity ) ; begin
64940: LD_INT 0
64942: PPUSH
// uc_side := 0 ;
64943: LD_ADDR_OWVAR 20
64947: PUSH
64948: LD_INT 0
64950: ST_TO_ADDR
// uc_nation := 0 ;
64951: LD_ADDR_OWVAR 21
64955: PUSH
64956: LD_INT 0
64958: ST_TO_ADDR
// hc_class := class_tiger ;
64959: LD_ADDR_OWVAR 28
64963: PUSH
64964: LD_INT 14
64966: ST_TO_ADDR
// hc_gallery :=  ;
64967: LD_ADDR_OWVAR 33
64971: PUSH
64972: LD_STRING 
64974: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64975: LD_ADDR_OWVAR 35
64979: PUSH
64980: LD_VAR 0 1
64984: NEG
64985: PPUSH
64986: LD_VAR 0 1
64990: PPUSH
64991: CALL_OW 12
64995: ST_TO_ADDR
// end ;
64996: LD_VAR 0 2
65000: RET
// export function PrepareEnchidna ( ) ; begin
65001: LD_INT 0
65003: PPUSH
// uc_side := 0 ;
65004: LD_ADDR_OWVAR 20
65008: PUSH
65009: LD_INT 0
65011: ST_TO_ADDR
// uc_nation := 0 ;
65012: LD_ADDR_OWVAR 21
65016: PUSH
65017: LD_INT 0
65019: ST_TO_ADDR
// hc_class := class_baggie ;
65020: LD_ADDR_OWVAR 28
65024: PUSH
65025: LD_INT 13
65027: ST_TO_ADDR
// hc_gallery :=  ;
65028: LD_ADDR_OWVAR 33
65032: PUSH
65033: LD_STRING 
65035: ST_TO_ADDR
// end ;
65036: LD_VAR 0 1
65040: RET
// export function PrepareFrog ( ) ; begin
65041: LD_INT 0
65043: PPUSH
// uc_side := 0 ;
65044: LD_ADDR_OWVAR 20
65048: PUSH
65049: LD_INT 0
65051: ST_TO_ADDR
// uc_nation := 0 ;
65052: LD_ADDR_OWVAR 21
65056: PUSH
65057: LD_INT 0
65059: ST_TO_ADDR
// hc_class := class_frog ;
65060: LD_ADDR_OWVAR 28
65064: PUSH
65065: LD_INT 19
65067: ST_TO_ADDR
// hc_gallery :=  ;
65068: LD_ADDR_OWVAR 33
65072: PUSH
65073: LD_STRING 
65075: ST_TO_ADDR
// end ;
65076: LD_VAR 0 1
65080: RET
// export function PrepareFish ( ) ; begin
65081: LD_INT 0
65083: PPUSH
// uc_side := 0 ;
65084: LD_ADDR_OWVAR 20
65088: PUSH
65089: LD_INT 0
65091: ST_TO_ADDR
// uc_nation := 0 ;
65092: LD_ADDR_OWVAR 21
65096: PUSH
65097: LD_INT 0
65099: ST_TO_ADDR
// hc_class := class_fish ;
65100: LD_ADDR_OWVAR 28
65104: PUSH
65105: LD_INT 20
65107: ST_TO_ADDR
// hc_gallery :=  ;
65108: LD_ADDR_OWVAR 33
65112: PUSH
65113: LD_STRING 
65115: ST_TO_ADDR
// end ;
65116: LD_VAR 0 1
65120: RET
// export function PrepareBird ( ) ; begin
65121: LD_INT 0
65123: PPUSH
// uc_side := 0 ;
65124: LD_ADDR_OWVAR 20
65128: PUSH
65129: LD_INT 0
65131: ST_TO_ADDR
// uc_nation := 0 ;
65132: LD_ADDR_OWVAR 21
65136: PUSH
65137: LD_INT 0
65139: ST_TO_ADDR
// hc_class := class_phororhacos ;
65140: LD_ADDR_OWVAR 28
65144: PUSH
65145: LD_INT 18
65147: ST_TO_ADDR
// hc_gallery :=  ;
65148: LD_ADDR_OWVAR 33
65152: PUSH
65153: LD_STRING 
65155: ST_TO_ADDR
// end ;
65156: LD_VAR 0 1
65160: RET
// export function PrepareHorse ( ) ; begin
65161: LD_INT 0
65163: PPUSH
// uc_side := 0 ;
65164: LD_ADDR_OWVAR 20
65168: PUSH
65169: LD_INT 0
65171: ST_TO_ADDR
// uc_nation := 0 ;
65172: LD_ADDR_OWVAR 21
65176: PUSH
65177: LD_INT 0
65179: ST_TO_ADDR
// hc_class := class_horse ;
65180: LD_ADDR_OWVAR 28
65184: PUSH
65185: LD_INT 21
65187: ST_TO_ADDR
// hc_gallery :=  ;
65188: LD_ADDR_OWVAR 33
65192: PUSH
65193: LD_STRING 
65195: ST_TO_ADDR
// end ;
65196: LD_VAR 0 1
65200: RET
// export function PrepareMastodont ( ) ; begin
65201: LD_INT 0
65203: PPUSH
// uc_side := 0 ;
65204: LD_ADDR_OWVAR 20
65208: PUSH
65209: LD_INT 0
65211: ST_TO_ADDR
// uc_nation := 0 ;
65212: LD_ADDR_OWVAR 21
65216: PUSH
65217: LD_INT 0
65219: ST_TO_ADDR
// vc_chassis := class_mastodont ;
65220: LD_ADDR_OWVAR 37
65224: PUSH
65225: LD_INT 31
65227: ST_TO_ADDR
// vc_control := control_rider ;
65228: LD_ADDR_OWVAR 38
65232: PUSH
65233: LD_INT 4
65235: ST_TO_ADDR
// end ;
65236: LD_VAR 0 1
65240: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65241: LD_INT 0
65243: PPUSH
65244: PPUSH
65245: PPUSH
// uc_side = 0 ;
65246: LD_ADDR_OWVAR 20
65250: PUSH
65251: LD_INT 0
65253: ST_TO_ADDR
// uc_nation = 0 ;
65254: LD_ADDR_OWVAR 21
65258: PUSH
65259: LD_INT 0
65261: ST_TO_ADDR
// InitHc_All ( ) ;
65262: CALL_OW 584
// InitVc ;
65266: CALL_OW 20
// if mastodonts then
65270: LD_VAR 0 6
65274: IFFALSE 65341
// for i = 1 to mastodonts do
65276: LD_ADDR_VAR 0 11
65280: PUSH
65281: DOUBLE
65282: LD_INT 1
65284: DEC
65285: ST_TO_ADDR
65286: LD_VAR 0 6
65290: PUSH
65291: FOR_TO
65292: IFFALSE 65339
// begin vc_chassis := 31 ;
65294: LD_ADDR_OWVAR 37
65298: PUSH
65299: LD_INT 31
65301: ST_TO_ADDR
// vc_control := control_rider ;
65302: LD_ADDR_OWVAR 38
65306: PUSH
65307: LD_INT 4
65309: ST_TO_ADDR
// animal := CreateVehicle ;
65310: LD_ADDR_VAR 0 12
65314: PUSH
65315: CALL_OW 45
65319: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65320: LD_VAR 0 12
65324: PPUSH
65325: LD_VAR 0 8
65329: PPUSH
65330: LD_INT 0
65332: PPUSH
65333: CALL 67469 0 3
// end ;
65337: GO 65291
65339: POP
65340: POP
// if horses then
65341: LD_VAR 0 5
65345: IFFALSE 65412
// for i = 1 to horses do
65347: LD_ADDR_VAR 0 11
65351: PUSH
65352: DOUBLE
65353: LD_INT 1
65355: DEC
65356: ST_TO_ADDR
65357: LD_VAR 0 5
65361: PUSH
65362: FOR_TO
65363: IFFALSE 65410
// begin hc_class := 21 ;
65365: LD_ADDR_OWVAR 28
65369: PUSH
65370: LD_INT 21
65372: ST_TO_ADDR
// hc_gallery :=  ;
65373: LD_ADDR_OWVAR 33
65377: PUSH
65378: LD_STRING 
65380: ST_TO_ADDR
// animal := CreateHuman ;
65381: LD_ADDR_VAR 0 12
65385: PUSH
65386: CALL_OW 44
65390: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65391: LD_VAR 0 12
65395: PPUSH
65396: LD_VAR 0 8
65400: PPUSH
65401: LD_INT 0
65403: PPUSH
65404: CALL 67469 0 3
// end ;
65408: GO 65362
65410: POP
65411: POP
// if birds then
65412: LD_VAR 0 1
65416: IFFALSE 65483
// for i = 1 to birds do
65418: LD_ADDR_VAR 0 11
65422: PUSH
65423: DOUBLE
65424: LD_INT 1
65426: DEC
65427: ST_TO_ADDR
65428: LD_VAR 0 1
65432: PUSH
65433: FOR_TO
65434: IFFALSE 65481
// begin hc_class = 18 ;
65436: LD_ADDR_OWVAR 28
65440: PUSH
65441: LD_INT 18
65443: ST_TO_ADDR
// hc_gallery =  ;
65444: LD_ADDR_OWVAR 33
65448: PUSH
65449: LD_STRING 
65451: ST_TO_ADDR
// animal := CreateHuman ;
65452: LD_ADDR_VAR 0 12
65456: PUSH
65457: CALL_OW 44
65461: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65462: LD_VAR 0 12
65466: PPUSH
65467: LD_VAR 0 8
65471: PPUSH
65472: LD_INT 0
65474: PPUSH
65475: CALL 67469 0 3
// end ;
65479: GO 65433
65481: POP
65482: POP
// if tigers then
65483: LD_VAR 0 2
65487: IFFALSE 65571
// for i = 1 to tigers do
65489: LD_ADDR_VAR 0 11
65493: PUSH
65494: DOUBLE
65495: LD_INT 1
65497: DEC
65498: ST_TO_ADDR
65499: LD_VAR 0 2
65503: PUSH
65504: FOR_TO
65505: IFFALSE 65569
// begin hc_class = class_tiger ;
65507: LD_ADDR_OWVAR 28
65511: PUSH
65512: LD_INT 14
65514: ST_TO_ADDR
// hc_gallery =  ;
65515: LD_ADDR_OWVAR 33
65519: PUSH
65520: LD_STRING 
65522: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65523: LD_ADDR_OWVAR 35
65527: PUSH
65528: LD_INT 7
65530: NEG
65531: PPUSH
65532: LD_INT 7
65534: PPUSH
65535: CALL_OW 12
65539: ST_TO_ADDR
// animal := CreateHuman ;
65540: LD_ADDR_VAR 0 12
65544: PUSH
65545: CALL_OW 44
65549: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65550: LD_VAR 0 12
65554: PPUSH
65555: LD_VAR 0 8
65559: PPUSH
65560: LD_INT 0
65562: PPUSH
65563: CALL 67469 0 3
// end ;
65567: GO 65504
65569: POP
65570: POP
// if apemans then
65571: LD_VAR 0 3
65575: IFFALSE 65698
// for i = 1 to apemans do
65577: LD_ADDR_VAR 0 11
65581: PUSH
65582: DOUBLE
65583: LD_INT 1
65585: DEC
65586: ST_TO_ADDR
65587: LD_VAR 0 3
65591: PUSH
65592: FOR_TO
65593: IFFALSE 65696
// begin hc_class = class_apeman ;
65595: LD_ADDR_OWVAR 28
65599: PUSH
65600: LD_INT 12
65602: ST_TO_ADDR
// hc_gallery =  ;
65603: LD_ADDR_OWVAR 33
65607: PUSH
65608: LD_STRING 
65610: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65611: LD_ADDR_OWVAR 35
65615: PUSH
65616: LD_INT 2
65618: NEG
65619: PPUSH
65620: LD_INT 2
65622: PPUSH
65623: CALL_OW 12
65627: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65628: LD_ADDR_OWVAR 31
65632: PUSH
65633: LD_INT 1
65635: PPUSH
65636: LD_INT 3
65638: PPUSH
65639: CALL_OW 12
65643: PUSH
65644: LD_INT 1
65646: PPUSH
65647: LD_INT 3
65649: PPUSH
65650: CALL_OW 12
65654: PUSH
65655: LD_INT 0
65657: PUSH
65658: LD_INT 0
65660: PUSH
65661: EMPTY
65662: LIST
65663: LIST
65664: LIST
65665: LIST
65666: ST_TO_ADDR
// animal := CreateHuman ;
65667: LD_ADDR_VAR 0 12
65671: PUSH
65672: CALL_OW 44
65676: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65677: LD_VAR 0 12
65681: PPUSH
65682: LD_VAR 0 8
65686: PPUSH
65687: LD_INT 0
65689: PPUSH
65690: CALL 67469 0 3
// end ;
65694: GO 65592
65696: POP
65697: POP
// if enchidnas then
65698: LD_VAR 0 4
65702: IFFALSE 65769
// for i = 1 to enchidnas do
65704: LD_ADDR_VAR 0 11
65708: PUSH
65709: DOUBLE
65710: LD_INT 1
65712: DEC
65713: ST_TO_ADDR
65714: LD_VAR 0 4
65718: PUSH
65719: FOR_TO
65720: IFFALSE 65767
// begin hc_class = 13 ;
65722: LD_ADDR_OWVAR 28
65726: PUSH
65727: LD_INT 13
65729: ST_TO_ADDR
// hc_gallery =  ;
65730: LD_ADDR_OWVAR 33
65734: PUSH
65735: LD_STRING 
65737: ST_TO_ADDR
// animal := CreateHuman ;
65738: LD_ADDR_VAR 0 12
65742: PUSH
65743: CALL_OW 44
65747: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65748: LD_VAR 0 12
65752: PPUSH
65753: LD_VAR 0 8
65757: PPUSH
65758: LD_INT 0
65760: PPUSH
65761: CALL 67469 0 3
// end ;
65765: GO 65719
65767: POP
65768: POP
// if fishes then
65769: LD_VAR 0 7
65773: IFFALSE 65840
// for i = 1 to fishes do
65775: LD_ADDR_VAR 0 11
65779: PUSH
65780: DOUBLE
65781: LD_INT 1
65783: DEC
65784: ST_TO_ADDR
65785: LD_VAR 0 7
65789: PUSH
65790: FOR_TO
65791: IFFALSE 65838
// begin hc_class = 20 ;
65793: LD_ADDR_OWVAR 28
65797: PUSH
65798: LD_INT 20
65800: ST_TO_ADDR
// hc_gallery =  ;
65801: LD_ADDR_OWVAR 33
65805: PUSH
65806: LD_STRING 
65808: ST_TO_ADDR
// animal := CreateHuman ;
65809: LD_ADDR_VAR 0 12
65813: PUSH
65814: CALL_OW 44
65818: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65819: LD_VAR 0 12
65823: PPUSH
65824: LD_VAR 0 9
65828: PPUSH
65829: LD_INT 0
65831: PPUSH
65832: CALL 67469 0 3
// end ;
65836: GO 65790
65838: POP
65839: POP
// end ;
65840: LD_VAR 0 10
65844: RET
// export function WantHeal ( sci , unit ) ; begin
65845: LD_INT 0
65847: PPUSH
// if GetTaskList ( sci ) > 0 then
65848: LD_VAR 0 1
65852: PPUSH
65853: CALL_OW 437
65857: PUSH
65858: LD_INT 0
65860: GREATER
65861: IFFALSE 65931
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65863: LD_VAR 0 1
65867: PPUSH
65868: CALL_OW 437
65872: PUSH
65873: LD_INT 1
65875: ARRAY
65876: PUSH
65877: LD_INT 1
65879: ARRAY
65880: PUSH
65881: LD_STRING l
65883: EQUAL
65884: PUSH
65885: LD_VAR 0 1
65889: PPUSH
65890: CALL_OW 437
65894: PUSH
65895: LD_INT 1
65897: ARRAY
65898: PUSH
65899: LD_INT 4
65901: ARRAY
65902: PUSH
65903: LD_VAR 0 2
65907: EQUAL
65908: AND
65909: IFFALSE 65921
// result := true else
65911: LD_ADDR_VAR 0 3
65915: PUSH
65916: LD_INT 1
65918: ST_TO_ADDR
65919: GO 65929
// result := false ;
65921: LD_ADDR_VAR 0 3
65925: PUSH
65926: LD_INT 0
65928: ST_TO_ADDR
// end else
65929: GO 65939
// result := false ;
65931: LD_ADDR_VAR 0 3
65935: PUSH
65936: LD_INT 0
65938: ST_TO_ADDR
// end ;
65939: LD_VAR 0 3
65943: RET
// export function HealTarget ( sci ) ; begin
65944: LD_INT 0
65946: PPUSH
// if not sci then
65947: LD_VAR 0 1
65951: NOT
65952: IFFALSE 65956
// exit ;
65954: GO 66021
// result := 0 ;
65956: LD_ADDR_VAR 0 2
65960: PUSH
65961: LD_INT 0
65963: ST_TO_ADDR
// if GetTaskList ( sci ) then
65964: LD_VAR 0 1
65968: PPUSH
65969: CALL_OW 437
65973: IFFALSE 66021
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65975: LD_VAR 0 1
65979: PPUSH
65980: CALL_OW 437
65984: PUSH
65985: LD_INT 1
65987: ARRAY
65988: PUSH
65989: LD_INT 1
65991: ARRAY
65992: PUSH
65993: LD_STRING l
65995: EQUAL
65996: IFFALSE 66021
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65998: LD_ADDR_VAR 0 2
66002: PUSH
66003: LD_VAR 0 1
66007: PPUSH
66008: CALL_OW 437
66012: PUSH
66013: LD_INT 1
66015: ARRAY
66016: PUSH
66017: LD_INT 4
66019: ARRAY
66020: ST_TO_ADDR
// end ;
66021: LD_VAR 0 2
66025: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
66026: LD_INT 0
66028: PPUSH
66029: PPUSH
66030: PPUSH
66031: PPUSH
// if not base_units then
66032: LD_VAR 0 1
66036: NOT
66037: IFFALSE 66041
// exit ;
66039: GO 66128
// result := false ;
66041: LD_ADDR_VAR 0 2
66045: PUSH
66046: LD_INT 0
66048: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66049: LD_ADDR_VAR 0 5
66053: PUSH
66054: LD_VAR 0 1
66058: PPUSH
66059: LD_INT 21
66061: PUSH
66062: LD_INT 3
66064: PUSH
66065: EMPTY
66066: LIST
66067: LIST
66068: PPUSH
66069: CALL_OW 72
66073: ST_TO_ADDR
// if not tmp then
66074: LD_VAR 0 5
66078: NOT
66079: IFFALSE 66083
// exit ;
66081: GO 66128
// for i in tmp do
66083: LD_ADDR_VAR 0 3
66087: PUSH
66088: LD_VAR 0 5
66092: PUSH
66093: FOR_IN
66094: IFFALSE 66126
// begin result := EnemyInRange ( i , 22 ) ;
66096: LD_ADDR_VAR 0 2
66100: PUSH
66101: LD_VAR 0 3
66105: PPUSH
66106: LD_INT 22
66108: PPUSH
66109: CALL 63715 0 2
66113: ST_TO_ADDR
// if result then
66114: LD_VAR 0 2
66118: IFFALSE 66124
// exit ;
66120: POP
66121: POP
66122: GO 66128
// end ;
66124: GO 66093
66126: POP
66127: POP
// end ;
66128: LD_VAR 0 2
66132: RET
// export function FilterByTag ( units , tag ) ; begin
66133: LD_INT 0
66135: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
66136: LD_ADDR_VAR 0 3
66140: PUSH
66141: LD_VAR 0 1
66145: PPUSH
66146: LD_INT 120
66148: PUSH
66149: LD_VAR 0 2
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: PPUSH
66158: CALL_OW 72
66162: ST_TO_ADDR
// end ;
66163: LD_VAR 0 3
66167: RET
// export function IsDriver ( un ) ; begin
66168: LD_INT 0
66170: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66171: LD_ADDR_VAR 0 2
66175: PUSH
66176: LD_VAR 0 1
66180: PUSH
66181: LD_INT 55
66183: PUSH
66184: EMPTY
66185: LIST
66186: PPUSH
66187: CALL_OW 69
66191: IN
66192: ST_TO_ADDR
// end ;
66193: LD_VAR 0 2
66197: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66198: LD_INT 0
66200: PPUSH
66201: PPUSH
// list := [ ] ;
66202: LD_ADDR_VAR 0 5
66206: PUSH
66207: EMPTY
66208: ST_TO_ADDR
// case d of 0 :
66209: LD_VAR 0 3
66213: PUSH
66214: LD_INT 0
66216: DOUBLE
66217: EQUAL
66218: IFTRUE 66222
66220: GO 66355
66222: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66223: LD_ADDR_VAR 0 5
66227: PUSH
66228: LD_VAR 0 1
66232: PUSH
66233: LD_INT 4
66235: MINUS
66236: PUSH
66237: LD_VAR 0 2
66241: PUSH
66242: LD_INT 4
66244: MINUS
66245: PUSH
66246: LD_INT 2
66248: PUSH
66249: EMPTY
66250: LIST
66251: LIST
66252: LIST
66253: PUSH
66254: LD_VAR 0 1
66258: PUSH
66259: LD_INT 3
66261: MINUS
66262: PUSH
66263: LD_VAR 0 2
66267: PUSH
66268: LD_INT 1
66270: PUSH
66271: EMPTY
66272: LIST
66273: LIST
66274: LIST
66275: PUSH
66276: LD_VAR 0 1
66280: PUSH
66281: LD_INT 4
66283: PLUS
66284: PUSH
66285: LD_VAR 0 2
66289: PUSH
66290: LD_INT 4
66292: PUSH
66293: EMPTY
66294: LIST
66295: LIST
66296: LIST
66297: PUSH
66298: LD_VAR 0 1
66302: PUSH
66303: LD_INT 3
66305: PLUS
66306: PUSH
66307: LD_VAR 0 2
66311: PUSH
66312: LD_INT 3
66314: PLUS
66315: PUSH
66316: LD_INT 5
66318: PUSH
66319: EMPTY
66320: LIST
66321: LIST
66322: LIST
66323: PUSH
66324: LD_VAR 0 1
66328: PUSH
66329: LD_VAR 0 2
66333: PUSH
66334: LD_INT 4
66336: PLUS
66337: PUSH
66338: LD_INT 0
66340: PUSH
66341: EMPTY
66342: LIST
66343: LIST
66344: LIST
66345: PUSH
66346: EMPTY
66347: LIST
66348: LIST
66349: LIST
66350: LIST
66351: LIST
66352: ST_TO_ADDR
// end ; 1 :
66353: GO 67053
66355: LD_INT 1
66357: DOUBLE
66358: EQUAL
66359: IFTRUE 66363
66361: GO 66496
66363: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66364: LD_ADDR_VAR 0 5
66368: PUSH
66369: LD_VAR 0 1
66373: PUSH
66374: LD_VAR 0 2
66378: PUSH
66379: LD_INT 4
66381: MINUS
66382: PUSH
66383: LD_INT 3
66385: PUSH
66386: EMPTY
66387: LIST
66388: LIST
66389: LIST
66390: PUSH
66391: LD_VAR 0 1
66395: PUSH
66396: LD_INT 3
66398: MINUS
66399: PUSH
66400: LD_VAR 0 2
66404: PUSH
66405: LD_INT 3
66407: MINUS
66408: PUSH
66409: LD_INT 2
66411: PUSH
66412: EMPTY
66413: LIST
66414: LIST
66415: LIST
66416: PUSH
66417: LD_VAR 0 1
66421: PUSH
66422: LD_INT 4
66424: MINUS
66425: PUSH
66426: LD_VAR 0 2
66430: PUSH
66431: LD_INT 1
66433: PUSH
66434: EMPTY
66435: LIST
66436: LIST
66437: LIST
66438: PUSH
66439: LD_VAR 0 1
66443: PUSH
66444: LD_VAR 0 2
66448: PUSH
66449: LD_INT 3
66451: PLUS
66452: PUSH
66453: LD_INT 0
66455: PUSH
66456: EMPTY
66457: LIST
66458: LIST
66459: LIST
66460: PUSH
66461: LD_VAR 0 1
66465: PUSH
66466: LD_INT 4
66468: PLUS
66469: PUSH
66470: LD_VAR 0 2
66474: PUSH
66475: LD_INT 4
66477: PLUS
66478: PUSH
66479: LD_INT 5
66481: PUSH
66482: EMPTY
66483: LIST
66484: LIST
66485: LIST
66486: PUSH
66487: EMPTY
66488: LIST
66489: LIST
66490: LIST
66491: LIST
66492: LIST
66493: ST_TO_ADDR
// end ; 2 :
66494: GO 67053
66496: LD_INT 2
66498: DOUBLE
66499: EQUAL
66500: IFTRUE 66504
66502: GO 66633
66504: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66505: LD_ADDR_VAR 0 5
66509: PUSH
66510: LD_VAR 0 1
66514: PUSH
66515: LD_VAR 0 2
66519: PUSH
66520: LD_INT 3
66522: MINUS
66523: PUSH
66524: LD_INT 3
66526: PUSH
66527: EMPTY
66528: LIST
66529: LIST
66530: LIST
66531: PUSH
66532: LD_VAR 0 1
66536: PUSH
66537: LD_INT 4
66539: PLUS
66540: PUSH
66541: LD_VAR 0 2
66545: PUSH
66546: LD_INT 4
66548: PUSH
66549: EMPTY
66550: LIST
66551: LIST
66552: LIST
66553: PUSH
66554: LD_VAR 0 1
66558: PUSH
66559: LD_VAR 0 2
66563: PUSH
66564: LD_INT 4
66566: PLUS
66567: PUSH
66568: LD_INT 0
66570: PUSH
66571: EMPTY
66572: LIST
66573: LIST
66574: LIST
66575: PUSH
66576: LD_VAR 0 1
66580: PUSH
66581: LD_INT 3
66583: MINUS
66584: PUSH
66585: LD_VAR 0 2
66589: PUSH
66590: LD_INT 1
66592: PUSH
66593: EMPTY
66594: LIST
66595: LIST
66596: LIST
66597: PUSH
66598: LD_VAR 0 1
66602: PUSH
66603: LD_INT 4
66605: MINUS
66606: PUSH
66607: LD_VAR 0 2
66611: PUSH
66612: LD_INT 4
66614: MINUS
66615: PUSH
66616: LD_INT 2
66618: PUSH
66619: EMPTY
66620: LIST
66621: LIST
66622: LIST
66623: PUSH
66624: EMPTY
66625: LIST
66626: LIST
66627: LIST
66628: LIST
66629: LIST
66630: ST_TO_ADDR
// end ; 3 :
66631: GO 67053
66633: LD_INT 3
66635: DOUBLE
66636: EQUAL
66637: IFTRUE 66641
66639: GO 66774
66641: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66642: LD_ADDR_VAR 0 5
66646: PUSH
66647: LD_VAR 0 1
66651: PUSH
66652: LD_INT 3
66654: PLUS
66655: PUSH
66656: LD_VAR 0 2
66660: PUSH
66661: LD_INT 4
66663: PUSH
66664: EMPTY
66665: LIST
66666: LIST
66667: LIST
66668: PUSH
66669: LD_VAR 0 1
66673: PUSH
66674: LD_INT 4
66676: PLUS
66677: PUSH
66678: LD_VAR 0 2
66682: PUSH
66683: LD_INT 4
66685: PLUS
66686: PUSH
66687: LD_INT 5
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: LIST
66694: PUSH
66695: LD_VAR 0 1
66699: PUSH
66700: LD_INT 4
66702: MINUS
66703: PUSH
66704: LD_VAR 0 2
66708: PUSH
66709: LD_INT 1
66711: PUSH
66712: EMPTY
66713: LIST
66714: LIST
66715: LIST
66716: PUSH
66717: LD_VAR 0 1
66721: PUSH
66722: LD_VAR 0 2
66726: PUSH
66727: LD_INT 4
66729: MINUS
66730: PUSH
66731: LD_INT 3
66733: PUSH
66734: EMPTY
66735: LIST
66736: LIST
66737: LIST
66738: PUSH
66739: LD_VAR 0 1
66743: PUSH
66744: LD_INT 3
66746: MINUS
66747: PUSH
66748: LD_VAR 0 2
66752: PUSH
66753: LD_INT 3
66755: MINUS
66756: PUSH
66757: LD_INT 2
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: LIST
66764: PUSH
66765: EMPTY
66766: LIST
66767: LIST
66768: LIST
66769: LIST
66770: LIST
66771: ST_TO_ADDR
// end ; 4 :
66772: GO 67053
66774: LD_INT 4
66776: DOUBLE
66777: EQUAL
66778: IFTRUE 66782
66780: GO 66915
66782: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66783: LD_ADDR_VAR 0 5
66787: PUSH
66788: LD_VAR 0 1
66792: PUSH
66793: LD_VAR 0 2
66797: PUSH
66798: LD_INT 4
66800: PLUS
66801: PUSH
66802: LD_INT 0
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: LIST
66809: PUSH
66810: LD_VAR 0 1
66814: PUSH
66815: LD_INT 3
66817: PLUS
66818: PUSH
66819: LD_VAR 0 2
66823: PUSH
66824: LD_INT 3
66826: PLUS
66827: PUSH
66828: LD_INT 5
66830: PUSH
66831: EMPTY
66832: LIST
66833: LIST
66834: LIST
66835: PUSH
66836: LD_VAR 0 1
66840: PUSH
66841: LD_INT 4
66843: PLUS
66844: PUSH
66845: LD_VAR 0 2
66849: PUSH
66850: LD_INT 4
66852: PUSH
66853: EMPTY
66854: LIST
66855: LIST
66856: LIST
66857: PUSH
66858: LD_VAR 0 1
66862: PUSH
66863: LD_VAR 0 2
66867: PUSH
66868: LD_INT 3
66870: MINUS
66871: PUSH
66872: LD_INT 3
66874: PUSH
66875: EMPTY
66876: LIST
66877: LIST
66878: LIST
66879: PUSH
66880: LD_VAR 0 1
66884: PUSH
66885: LD_INT 4
66887: MINUS
66888: PUSH
66889: LD_VAR 0 2
66893: PUSH
66894: LD_INT 4
66896: MINUS
66897: PUSH
66898: LD_INT 2
66900: PUSH
66901: EMPTY
66902: LIST
66903: LIST
66904: LIST
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: LIST
66910: LIST
66911: LIST
66912: ST_TO_ADDR
// end ; 5 :
66913: GO 67053
66915: LD_INT 5
66917: DOUBLE
66918: EQUAL
66919: IFTRUE 66923
66921: GO 67052
66923: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66924: LD_ADDR_VAR 0 5
66928: PUSH
66929: LD_VAR 0 1
66933: PUSH
66934: LD_INT 4
66936: MINUS
66937: PUSH
66938: LD_VAR 0 2
66942: PUSH
66943: LD_INT 1
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: LIST
66950: PUSH
66951: LD_VAR 0 1
66955: PUSH
66956: LD_VAR 0 2
66960: PUSH
66961: LD_INT 4
66963: MINUS
66964: PUSH
66965: LD_INT 3
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: LIST
66972: PUSH
66973: LD_VAR 0 1
66977: PUSH
66978: LD_INT 4
66980: PLUS
66981: PUSH
66982: LD_VAR 0 2
66986: PUSH
66987: LD_INT 4
66989: PLUS
66990: PUSH
66991: LD_INT 5
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: LIST
66998: PUSH
66999: LD_VAR 0 1
67003: PUSH
67004: LD_INT 3
67006: PLUS
67007: PUSH
67008: LD_VAR 0 2
67012: PUSH
67013: LD_INT 4
67015: PUSH
67016: EMPTY
67017: LIST
67018: LIST
67019: LIST
67020: PUSH
67021: LD_VAR 0 1
67025: PUSH
67026: LD_VAR 0 2
67030: PUSH
67031: LD_INT 3
67033: PLUS
67034: PUSH
67035: LD_INT 0
67037: PUSH
67038: EMPTY
67039: LIST
67040: LIST
67041: LIST
67042: PUSH
67043: EMPTY
67044: LIST
67045: LIST
67046: LIST
67047: LIST
67048: LIST
67049: ST_TO_ADDR
// end ; end ;
67050: GO 67053
67052: POP
// result := list ;
67053: LD_ADDR_VAR 0 4
67057: PUSH
67058: LD_VAR 0 5
67062: ST_TO_ADDR
// end ;
67063: LD_VAR 0 4
67067: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67068: LD_INT 0
67070: PPUSH
67071: PPUSH
67072: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67073: LD_VAR 0 1
67077: NOT
67078: PUSH
67079: LD_VAR 0 2
67083: PUSH
67084: LD_INT 1
67086: PUSH
67087: LD_INT 2
67089: PUSH
67090: LD_INT 3
67092: PUSH
67093: LD_INT 4
67095: PUSH
67096: EMPTY
67097: LIST
67098: LIST
67099: LIST
67100: LIST
67101: IN
67102: NOT
67103: OR
67104: IFFALSE 67108
// exit ;
67106: GO 67191
// tmp := [ ] ;
67108: LD_ADDR_VAR 0 5
67112: PUSH
67113: EMPTY
67114: ST_TO_ADDR
// for i in units do
67115: LD_ADDR_VAR 0 4
67119: PUSH
67120: LD_VAR 0 1
67124: PUSH
67125: FOR_IN
67126: IFFALSE 67160
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
67128: LD_ADDR_VAR 0 5
67132: PUSH
67133: LD_VAR 0 5
67137: PPUSH
67138: LD_VAR 0 4
67142: PPUSH
67143: LD_VAR 0 2
67147: PPUSH
67148: CALL_OW 259
67152: PPUSH
67153: CALL 68552 0 2
67157: ST_TO_ADDR
67158: GO 67125
67160: POP
67161: POP
// if not tmp then
67162: LD_VAR 0 5
67166: NOT
67167: IFFALSE 67171
// exit ;
67169: GO 67191
// result := SortListByListDesc ( units , tmp ) ;
67171: LD_ADDR_VAR 0 3
67175: PUSH
67176: LD_VAR 0 1
67180: PPUSH
67181: LD_VAR 0 5
67185: PPUSH
67186: CALL_OW 77
67190: ST_TO_ADDR
// end ;
67191: LD_VAR 0 3
67195: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67196: LD_INT 0
67198: PPUSH
67199: PPUSH
67200: PPUSH
// result := false ;
67201: LD_ADDR_VAR 0 3
67205: PUSH
67206: LD_INT 0
67208: ST_TO_ADDR
// if not building then
67209: LD_VAR 0 2
67213: NOT
67214: IFFALSE 67218
// exit ;
67216: GO 67356
// x := GetX ( building ) ;
67218: LD_ADDR_VAR 0 4
67222: PUSH
67223: LD_VAR 0 2
67227: PPUSH
67228: CALL_OW 250
67232: ST_TO_ADDR
// y := GetY ( building ) ;
67233: LD_ADDR_VAR 0 5
67237: PUSH
67238: LD_VAR 0 2
67242: PPUSH
67243: CALL_OW 251
67247: ST_TO_ADDR
// if not x or not y then
67248: LD_VAR 0 4
67252: NOT
67253: PUSH
67254: LD_VAR 0 5
67258: NOT
67259: OR
67260: IFFALSE 67264
// exit ;
67262: GO 67356
// if GetTaskList ( unit ) then
67264: LD_VAR 0 1
67268: PPUSH
67269: CALL_OW 437
67273: IFFALSE 67356
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67275: LD_STRING e
67277: PUSH
67278: LD_VAR 0 1
67282: PPUSH
67283: CALL_OW 437
67287: PUSH
67288: LD_INT 1
67290: ARRAY
67291: PUSH
67292: LD_INT 1
67294: ARRAY
67295: EQUAL
67296: PUSH
67297: LD_VAR 0 4
67301: PUSH
67302: LD_VAR 0 1
67306: PPUSH
67307: CALL_OW 437
67311: PUSH
67312: LD_INT 1
67314: ARRAY
67315: PUSH
67316: LD_INT 2
67318: ARRAY
67319: EQUAL
67320: AND
67321: PUSH
67322: LD_VAR 0 5
67326: PUSH
67327: LD_VAR 0 1
67331: PPUSH
67332: CALL_OW 437
67336: PUSH
67337: LD_INT 1
67339: ARRAY
67340: PUSH
67341: LD_INT 3
67343: ARRAY
67344: EQUAL
67345: AND
67346: IFFALSE 67356
// result := true end ;
67348: LD_ADDR_VAR 0 3
67352: PUSH
67353: LD_INT 1
67355: ST_TO_ADDR
// end ;
67356: LD_VAR 0 3
67360: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67361: LD_INT 0
67363: PPUSH
// result := false ;
67364: LD_ADDR_VAR 0 4
67368: PUSH
67369: LD_INT 0
67371: ST_TO_ADDR
// if GetTaskList ( unit ) then
67372: LD_VAR 0 1
67376: PPUSH
67377: CALL_OW 437
67381: IFFALSE 67464
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67383: LD_STRING M
67385: PUSH
67386: LD_VAR 0 1
67390: PPUSH
67391: CALL_OW 437
67395: PUSH
67396: LD_INT 1
67398: ARRAY
67399: PUSH
67400: LD_INT 1
67402: ARRAY
67403: EQUAL
67404: PUSH
67405: LD_VAR 0 2
67409: PUSH
67410: LD_VAR 0 1
67414: PPUSH
67415: CALL_OW 437
67419: PUSH
67420: LD_INT 1
67422: ARRAY
67423: PUSH
67424: LD_INT 2
67426: ARRAY
67427: EQUAL
67428: AND
67429: PUSH
67430: LD_VAR 0 3
67434: PUSH
67435: LD_VAR 0 1
67439: PPUSH
67440: CALL_OW 437
67444: PUSH
67445: LD_INT 1
67447: ARRAY
67448: PUSH
67449: LD_INT 3
67451: ARRAY
67452: EQUAL
67453: AND
67454: IFFALSE 67464
// result := true ;
67456: LD_ADDR_VAR 0 4
67460: PUSH
67461: LD_INT 1
67463: ST_TO_ADDR
// end ; end ;
67464: LD_VAR 0 4
67468: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67469: LD_INT 0
67471: PPUSH
67472: PPUSH
67473: PPUSH
67474: PPUSH
// if not unit or not area then
67475: LD_VAR 0 1
67479: NOT
67480: PUSH
67481: LD_VAR 0 2
67485: NOT
67486: OR
67487: IFFALSE 67491
// exit ;
67489: GO 67655
// tmp := AreaToList ( area , i ) ;
67491: LD_ADDR_VAR 0 6
67495: PUSH
67496: LD_VAR 0 2
67500: PPUSH
67501: LD_VAR 0 5
67505: PPUSH
67506: CALL_OW 517
67510: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67511: LD_ADDR_VAR 0 5
67515: PUSH
67516: DOUBLE
67517: LD_INT 1
67519: DEC
67520: ST_TO_ADDR
67521: LD_VAR 0 6
67525: PUSH
67526: LD_INT 1
67528: ARRAY
67529: PUSH
67530: FOR_TO
67531: IFFALSE 67653
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67533: LD_ADDR_VAR 0 7
67537: PUSH
67538: LD_VAR 0 6
67542: PUSH
67543: LD_INT 1
67545: ARRAY
67546: PUSH
67547: LD_VAR 0 5
67551: ARRAY
67552: PUSH
67553: LD_VAR 0 6
67557: PUSH
67558: LD_INT 2
67560: ARRAY
67561: PUSH
67562: LD_VAR 0 5
67566: ARRAY
67567: PUSH
67568: EMPTY
67569: LIST
67570: LIST
67571: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
67572: LD_VAR 0 7
67576: PUSH
67577: LD_INT 1
67579: ARRAY
67580: PPUSH
67581: LD_VAR 0 7
67585: PUSH
67586: LD_INT 2
67588: ARRAY
67589: PPUSH
67590: CALL_OW 428
67594: PUSH
67595: LD_INT 0
67597: EQUAL
67598: IFFALSE 67651
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67600: LD_VAR 0 1
67604: PPUSH
67605: LD_VAR 0 7
67609: PUSH
67610: LD_INT 1
67612: ARRAY
67613: PPUSH
67614: LD_VAR 0 7
67618: PUSH
67619: LD_INT 2
67621: ARRAY
67622: PPUSH
67623: LD_VAR 0 3
67627: PPUSH
67628: CALL_OW 48
// result := IsPlaced ( unit ) ;
67632: LD_ADDR_VAR 0 4
67636: PUSH
67637: LD_VAR 0 1
67641: PPUSH
67642: CALL_OW 305
67646: ST_TO_ADDR
// exit ;
67647: POP
67648: POP
67649: GO 67655
// end ; end ;
67651: GO 67530
67653: POP
67654: POP
// end ;
67655: LD_VAR 0 4
67659: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67660: LD_INT 0
67662: PPUSH
67663: PPUSH
67664: PPUSH
// if not side or side > 8 then
67665: LD_VAR 0 1
67669: NOT
67670: PUSH
67671: LD_VAR 0 1
67675: PUSH
67676: LD_INT 8
67678: GREATER
67679: OR
67680: IFFALSE 67684
// exit ;
67682: GO 67871
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67684: LD_ADDR_VAR 0 4
67688: PUSH
67689: LD_INT 22
67691: PUSH
67692: LD_VAR 0 1
67696: PUSH
67697: EMPTY
67698: LIST
67699: LIST
67700: PUSH
67701: LD_INT 21
67703: PUSH
67704: LD_INT 3
67706: PUSH
67707: EMPTY
67708: LIST
67709: LIST
67710: PUSH
67711: EMPTY
67712: LIST
67713: LIST
67714: PPUSH
67715: CALL_OW 69
67719: ST_TO_ADDR
// if not tmp then
67720: LD_VAR 0 4
67724: NOT
67725: IFFALSE 67729
// exit ;
67727: GO 67871
// enable_addtolog := true ;
67729: LD_ADDR_OWVAR 81
67733: PUSH
67734: LD_INT 1
67736: ST_TO_ADDR
// AddToLog ( [ ) ;
67737: LD_STRING [
67739: PPUSH
67740: CALL_OW 561
// for i in tmp do
67744: LD_ADDR_VAR 0 3
67748: PUSH
67749: LD_VAR 0 4
67753: PUSH
67754: FOR_IN
67755: IFFALSE 67862
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67757: LD_STRING [
67759: PUSH
67760: LD_VAR 0 3
67764: PPUSH
67765: CALL_OW 266
67769: STR
67770: PUSH
67771: LD_STRING , 
67773: STR
67774: PUSH
67775: LD_VAR 0 3
67779: PPUSH
67780: CALL_OW 250
67784: STR
67785: PUSH
67786: LD_STRING , 
67788: STR
67789: PUSH
67790: LD_VAR 0 3
67794: PPUSH
67795: CALL_OW 251
67799: STR
67800: PUSH
67801: LD_STRING , 
67803: STR
67804: PUSH
67805: LD_VAR 0 3
67809: PPUSH
67810: CALL_OW 254
67814: STR
67815: PUSH
67816: LD_STRING , 
67818: STR
67819: PUSH
67820: LD_VAR 0 3
67824: PPUSH
67825: LD_INT 1
67827: PPUSH
67828: CALL_OW 268
67832: STR
67833: PUSH
67834: LD_STRING , 
67836: STR
67837: PUSH
67838: LD_VAR 0 3
67842: PPUSH
67843: LD_INT 2
67845: PPUSH
67846: CALL_OW 268
67850: STR
67851: PUSH
67852: LD_STRING ],
67854: STR
67855: PPUSH
67856: CALL_OW 561
// end ;
67860: GO 67754
67862: POP
67863: POP
// AddToLog ( ]; ) ;
67864: LD_STRING ];
67866: PPUSH
67867: CALL_OW 561
// end ;
67871: LD_VAR 0 2
67875: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67876: LD_INT 0
67878: PPUSH
67879: PPUSH
67880: PPUSH
67881: PPUSH
67882: PPUSH
// if not area or not rate or not max then
67883: LD_VAR 0 1
67887: NOT
67888: PUSH
67889: LD_VAR 0 2
67893: NOT
67894: OR
67895: PUSH
67896: LD_VAR 0 4
67900: NOT
67901: OR
67902: IFFALSE 67906
// exit ;
67904: GO 68095
// while 1 do
67906: LD_INT 1
67908: IFFALSE 68095
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67910: LD_ADDR_VAR 0 9
67914: PUSH
67915: LD_VAR 0 1
67919: PPUSH
67920: LD_INT 1
67922: PPUSH
67923: CALL_OW 287
67927: PUSH
67928: LD_INT 10
67930: MUL
67931: ST_TO_ADDR
// r := rate / 10 ;
67932: LD_ADDR_VAR 0 7
67936: PUSH
67937: LD_VAR 0 2
67941: PUSH
67942: LD_INT 10
67944: DIVREAL
67945: ST_TO_ADDR
// time := 1 1$00 ;
67946: LD_ADDR_VAR 0 8
67950: PUSH
67951: LD_INT 2100
67953: ST_TO_ADDR
// if amount < min then
67954: LD_VAR 0 9
67958: PUSH
67959: LD_VAR 0 3
67963: LESS
67964: IFFALSE 67982
// r := r * 2 else
67966: LD_ADDR_VAR 0 7
67970: PUSH
67971: LD_VAR 0 7
67975: PUSH
67976: LD_INT 2
67978: MUL
67979: ST_TO_ADDR
67980: GO 68008
// if amount > max then
67982: LD_VAR 0 9
67986: PUSH
67987: LD_VAR 0 4
67991: GREATER
67992: IFFALSE 68008
// r := r / 2 ;
67994: LD_ADDR_VAR 0 7
67998: PUSH
67999: LD_VAR 0 7
68003: PUSH
68004: LD_INT 2
68006: DIVREAL
68007: ST_TO_ADDR
// time := time / r ;
68008: LD_ADDR_VAR 0 8
68012: PUSH
68013: LD_VAR 0 8
68017: PUSH
68018: LD_VAR 0 7
68022: DIVREAL
68023: ST_TO_ADDR
// if time < 0 then
68024: LD_VAR 0 8
68028: PUSH
68029: LD_INT 0
68031: LESS
68032: IFFALSE 68049
// time := time * - 1 ;
68034: LD_ADDR_VAR 0 8
68038: PUSH
68039: LD_VAR 0 8
68043: PUSH
68044: LD_INT 1
68046: NEG
68047: MUL
68048: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
68049: LD_VAR 0 8
68053: PUSH
68054: LD_INT 35
68056: PPUSH
68057: LD_INT 875
68059: PPUSH
68060: CALL_OW 12
68064: PLUS
68065: PPUSH
68066: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68070: LD_INT 1
68072: PPUSH
68073: LD_INT 5
68075: PPUSH
68076: CALL_OW 12
68080: PPUSH
68081: LD_VAR 0 1
68085: PPUSH
68086: LD_INT 1
68088: PPUSH
68089: CALL_OW 55
// end ;
68093: GO 67906
// end ;
68095: LD_VAR 0 5
68099: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68100: LD_INT 0
68102: PPUSH
68103: PPUSH
68104: PPUSH
68105: PPUSH
68106: PPUSH
68107: PPUSH
68108: PPUSH
68109: PPUSH
// if not turrets or not factories then
68110: LD_VAR 0 1
68114: NOT
68115: PUSH
68116: LD_VAR 0 2
68120: NOT
68121: OR
68122: IFFALSE 68126
// exit ;
68124: GO 68433
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68126: LD_ADDR_VAR 0 10
68130: PUSH
68131: LD_INT 5
68133: PUSH
68134: LD_INT 6
68136: PUSH
68137: EMPTY
68138: LIST
68139: LIST
68140: PUSH
68141: LD_INT 2
68143: PUSH
68144: LD_INT 4
68146: PUSH
68147: EMPTY
68148: LIST
68149: LIST
68150: PUSH
68151: LD_INT 3
68153: PUSH
68154: LD_INT 5
68156: PUSH
68157: EMPTY
68158: LIST
68159: LIST
68160: PUSH
68161: EMPTY
68162: LIST
68163: LIST
68164: LIST
68165: PUSH
68166: LD_INT 24
68168: PUSH
68169: LD_INT 25
68171: PUSH
68172: EMPTY
68173: LIST
68174: LIST
68175: PUSH
68176: LD_INT 23
68178: PUSH
68179: LD_INT 27
68181: PUSH
68182: EMPTY
68183: LIST
68184: LIST
68185: PUSH
68186: EMPTY
68187: LIST
68188: LIST
68189: PUSH
68190: LD_INT 42
68192: PUSH
68193: LD_INT 43
68195: PUSH
68196: EMPTY
68197: LIST
68198: LIST
68199: PUSH
68200: LD_INT 44
68202: PUSH
68203: LD_INT 46
68205: PUSH
68206: EMPTY
68207: LIST
68208: LIST
68209: PUSH
68210: LD_INT 45
68212: PUSH
68213: LD_INT 47
68215: PUSH
68216: EMPTY
68217: LIST
68218: LIST
68219: PUSH
68220: EMPTY
68221: LIST
68222: LIST
68223: LIST
68224: PUSH
68225: EMPTY
68226: LIST
68227: LIST
68228: LIST
68229: ST_TO_ADDR
// result := [ ] ;
68230: LD_ADDR_VAR 0 3
68234: PUSH
68235: EMPTY
68236: ST_TO_ADDR
// for i in turrets do
68237: LD_ADDR_VAR 0 4
68241: PUSH
68242: LD_VAR 0 1
68246: PUSH
68247: FOR_IN
68248: IFFALSE 68431
// begin nat := GetNation ( i ) ;
68250: LD_ADDR_VAR 0 7
68254: PUSH
68255: LD_VAR 0 4
68259: PPUSH
68260: CALL_OW 248
68264: ST_TO_ADDR
// weapon := 0 ;
68265: LD_ADDR_VAR 0 8
68269: PUSH
68270: LD_INT 0
68272: ST_TO_ADDR
// if not nat then
68273: LD_VAR 0 7
68277: NOT
68278: IFFALSE 68282
// continue ;
68280: GO 68247
// for j in list [ nat ] do
68282: LD_ADDR_VAR 0 5
68286: PUSH
68287: LD_VAR 0 10
68291: PUSH
68292: LD_VAR 0 7
68296: ARRAY
68297: PUSH
68298: FOR_IN
68299: IFFALSE 68340
// if GetBWeapon ( i ) = j [ 1 ] then
68301: LD_VAR 0 4
68305: PPUSH
68306: CALL_OW 269
68310: PUSH
68311: LD_VAR 0 5
68315: PUSH
68316: LD_INT 1
68318: ARRAY
68319: EQUAL
68320: IFFALSE 68338
// begin weapon := j [ 2 ] ;
68322: LD_ADDR_VAR 0 8
68326: PUSH
68327: LD_VAR 0 5
68331: PUSH
68332: LD_INT 2
68334: ARRAY
68335: ST_TO_ADDR
// break ;
68336: GO 68340
// end ;
68338: GO 68298
68340: POP
68341: POP
// if not weapon then
68342: LD_VAR 0 8
68346: NOT
68347: IFFALSE 68351
// continue ;
68349: GO 68247
// for k in factories do
68351: LD_ADDR_VAR 0 6
68355: PUSH
68356: LD_VAR 0 2
68360: PUSH
68361: FOR_IN
68362: IFFALSE 68427
// begin weapons := AvailableWeaponList ( k ) ;
68364: LD_ADDR_VAR 0 9
68368: PUSH
68369: LD_VAR 0 6
68373: PPUSH
68374: CALL_OW 478
68378: ST_TO_ADDR
// if not weapons then
68379: LD_VAR 0 9
68383: NOT
68384: IFFALSE 68388
// continue ;
68386: GO 68361
// if weapon in weapons then
68388: LD_VAR 0 8
68392: PUSH
68393: LD_VAR 0 9
68397: IN
68398: IFFALSE 68425
// begin result := [ i , weapon ] ;
68400: LD_ADDR_VAR 0 3
68404: PUSH
68405: LD_VAR 0 4
68409: PUSH
68410: LD_VAR 0 8
68414: PUSH
68415: EMPTY
68416: LIST
68417: LIST
68418: ST_TO_ADDR
// exit ;
68419: POP
68420: POP
68421: POP
68422: POP
68423: GO 68433
// end ; end ;
68425: GO 68361
68427: POP
68428: POP
// end ;
68429: GO 68247
68431: POP
68432: POP
// end ;
68433: LD_VAR 0 3
68437: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68438: LD_INT 0
68440: PPUSH
// if not side or side > 8 then
68441: LD_VAR 0 3
68445: NOT
68446: PUSH
68447: LD_VAR 0 3
68451: PUSH
68452: LD_INT 8
68454: GREATER
68455: OR
68456: IFFALSE 68460
// exit ;
68458: GO 68519
// if not range then
68460: LD_VAR 0 4
68464: NOT
68465: IFFALSE 68476
// range := - 12 ;
68467: LD_ADDR_VAR 0 4
68471: PUSH
68472: LD_INT 12
68474: NEG
68475: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68476: LD_VAR 0 1
68480: PPUSH
68481: LD_VAR 0 2
68485: PPUSH
68486: LD_VAR 0 3
68490: PPUSH
68491: LD_VAR 0 4
68495: PPUSH
68496: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68500: LD_VAR 0 1
68504: PPUSH
68505: LD_VAR 0 2
68509: PPUSH
68510: LD_VAR 0 3
68514: PPUSH
68515: CALL_OW 331
// end ;
68519: LD_VAR 0 5
68523: RET
// export function Video ( mode ) ; begin
68524: LD_INT 0
68526: PPUSH
// ingame_video = mode ;
68527: LD_ADDR_OWVAR 52
68531: PUSH
68532: LD_VAR 0 1
68536: ST_TO_ADDR
// interface_hidden = mode ;
68537: LD_ADDR_OWVAR 54
68541: PUSH
68542: LD_VAR 0 1
68546: ST_TO_ADDR
// end ;
68547: LD_VAR 0 2
68551: RET
// export function Join ( array , element ) ; begin
68552: LD_INT 0
68554: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68555: LD_ADDR_VAR 0 3
68559: PUSH
68560: LD_VAR 0 1
68564: PPUSH
68565: LD_VAR 0 1
68569: PUSH
68570: LD_INT 1
68572: PLUS
68573: PPUSH
68574: LD_VAR 0 2
68578: PPUSH
68579: CALL_OW 1
68583: ST_TO_ADDR
// end ;
68584: LD_VAR 0 3
68588: RET
// export function JoinUnion ( array , element ) ; begin
68589: LD_INT 0
68591: PPUSH
// result := array union element ;
68592: LD_ADDR_VAR 0 3
68596: PUSH
68597: LD_VAR 0 1
68601: PUSH
68602: LD_VAR 0 2
68606: UNION
68607: ST_TO_ADDR
// end ;
68608: LD_VAR 0 3
68612: RET
// export function GetBehemoths ( side ) ; begin
68613: LD_INT 0
68615: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
68616: LD_ADDR_VAR 0 2
68620: PUSH
68621: LD_INT 22
68623: PUSH
68624: LD_VAR 0 1
68628: PUSH
68629: EMPTY
68630: LIST
68631: LIST
68632: PUSH
68633: LD_INT 31
68635: PUSH
68636: LD_INT 25
68638: PUSH
68639: EMPTY
68640: LIST
68641: LIST
68642: PUSH
68643: EMPTY
68644: LIST
68645: LIST
68646: PPUSH
68647: CALL_OW 69
68651: ST_TO_ADDR
// end ;
68652: LD_VAR 0 2
68656: RET
// export function Shuffle ( array ) ; var i , index ; begin
68657: LD_INT 0
68659: PPUSH
68660: PPUSH
68661: PPUSH
// result := [ ] ;
68662: LD_ADDR_VAR 0 2
68666: PUSH
68667: EMPTY
68668: ST_TO_ADDR
// if not array then
68669: LD_VAR 0 1
68673: NOT
68674: IFFALSE 68678
// exit ;
68676: GO 68777
// Randomize ;
68678: CALL_OW 10
// for i = array downto 1 do
68682: LD_ADDR_VAR 0 3
68686: PUSH
68687: DOUBLE
68688: LD_VAR 0 1
68692: INC
68693: ST_TO_ADDR
68694: LD_INT 1
68696: PUSH
68697: FOR_DOWNTO
68698: IFFALSE 68775
// begin index := rand ( 1 , array ) ;
68700: LD_ADDR_VAR 0 4
68704: PUSH
68705: LD_INT 1
68707: PPUSH
68708: LD_VAR 0 1
68712: PPUSH
68713: CALL_OW 12
68717: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68718: LD_ADDR_VAR 0 2
68722: PUSH
68723: LD_VAR 0 2
68727: PPUSH
68728: LD_VAR 0 2
68732: PUSH
68733: LD_INT 1
68735: PLUS
68736: PPUSH
68737: LD_VAR 0 1
68741: PUSH
68742: LD_VAR 0 4
68746: ARRAY
68747: PPUSH
68748: CALL_OW 2
68752: ST_TO_ADDR
// array := Delete ( array , index ) ;
68753: LD_ADDR_VAR 0 1
68757: PUSH
68758: LD_VAR 0 1
68762: PPUSH
68763: LD_VAR 0 4
68767: PPUSH
68768: CALL_OW 3
68772: ST_TO_ADDR
// end ;
68773: GO 68697
68775: POP
68776: POP
// end ;
68777: LD_VAR 0 2
68781: RET
// export function GetBaseMaterials ( base ) ; begin
68782: LD_INT 0
68784: PPUSH
// result := [ 0 , 0 , 0 ] ;
68785: LD_ADDR_VAR 0 2
68789: PUSH
68790: LD_INT 0
68792: PUSH
68793: LD_INT 0
68795: PUSH
68796: LD_INT 0
68798: PUSH
68799: EMPTY
68800: LIST
68801: LIST
68802: LIST
68803: ST_TO_ADDR
// if not base then
68804: LD_VAR 0 1
68808: NOT
68809: IFFALSE 68813
// exit ;
68811: GO 68862
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68813: LD_ADDR_VAR 0 2
68817: PUSH
68818: LD_VAR 0 1
68822: PPUSH
68823: LD_INT 1
68825: PPUSH
68826: CALL_OW 275
68830: PUSH
68831: LD_VAR 0 1
68835: PPUSH
68836: LD_INT 2
68838: PPUSH
68839: CALL_OW 275
68843: PUSH
68844: LD_VAR 0 1
68848: PPUSH
68849: LD_INT 3
68851: PPUSH
68852: CALL_OW 275
68856: PUSH
68857: EMPTY
68858: LIST
68859: LIST
68860: LIST
68861: ST_TO_ADDR
// end ;
68862: LD_VAR 0 2
68866: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68867: LD_INT 0
68869: PPUSH
68870: PPUSH
// result := array ;
68871: LD_ADDR_VAR 0 3
68875: PUSH
68876: LD_VAR 0 1
68880: ST_TO_ADDR
// if size >= result then
68881: LD_VAR 0 2
68885: PUSH
68886: LD_VAR 0 3
68890: GREATEREQUAL
68891: IFFALSE 68895
// exit ;
68893: GO 68945
// if size then
68895: LD_VAR 0 2
68899: IFFALSE 68945
// for i := array downto size do
68901: LD_ADDR_VAR 0 4
68905: PUSH
68906: DOUBLE
68907: LD_VAR 0 1
68911: INC
68912: ST_TO_ADDR
68913: LD_VAR 0 2
68917: PUSH
68918: FOR_DOWNTO
68919: IFFALSE 68943
// result := Delete ( result , result ) ;
68921: LD_ADDR_VAR 0 3
68925: PUSH
68926: LD_VAR 0 3
68930: PPUSH
68931: LD_VAR 0 3
68935: PPUSH
68936: CALL_OW 3
68940: ST_TO_ADDR
68941: GO 68918
68943: POP
68944: POP
// end ;
68945: LD_VAR 0 3
68949: RET
// export function ComExit ( unit ) ; var tmp ; begin
68950: LD_INT 0
68952: PPUSH
68953: PPUSH
// if not IsInUnit ( unit ) then
68954: LD_VAR 0 1
68958: PPUSH
68959: CALL_OW 310
68963: NOT
68964: IFFALSE 68968
// exit ;
68966: GO 69028
// tmp := IsInUnit ( unit ) ;
68968: LD_ADDR_VAR 0 3
68972: PUSH
68973: LD_VAR 0 1
68977: PPUSH
68978: CALL_OW 310
68982: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68983: LD_VAR 0 3
68987: PPUSH
68988: CALL_OW 247
68992: PUSH
68993: LD_INT 2
68995: EQUAL
68996: IFFALSE 69009
// ComExitVehicle ( unit ) else
68998: LD_VAR 0 1
69002: PPUSH
69003: CALL_OW 121
69007: GO 69018
// ComExitBuilding ( unit ) ;
69009: LD_VAR 0 1
69013: PPUSH
69014: CALL_OW 122
// result := tmp ;
69018: LD_ADDR_VAR 0 2
69022: PUSH
69023: LD_VAR 0 3
69027: ST_TO_ADDR
// end ;
69028: LD_VAR 0 2
69032: RET
// export function ComExitAll ( units ) ; var i ; begin
69033: LD_INT 0
69035: PPUSH
69036: PPUSH
// if not units then
69037: LD_VAR 0 1
69041: NOT
69042: IFFALSE 69046
// exit ;
69044: GO 69072
// for i in units do
69046: LD_ADDR_VAR 0 3
69050: PUSH
69051: LD_VAR 0 1
69055: PUSH
69056: FOR_IN
69057: IFFALSE 69070
// ComExit ( i ) ;
69059: LD_VAR 0 3
69063: PPUSH
69064: CALL 68950 0 1
69068: GO 69056
69070: POP
69071: POP
// end ;
69072: LD_VAR 0 2
69076: RET
// export function ResetHc ; begin
69077: LD_INT 0
69079: PPUSH
// InitHc ;
69080: CALL_OW 19
// hc_importance := 0 ;
69084: LD_ADDR_OWVAR 32
69088: PUSH
69089: LD_INT 0
69091: ST_TO_ADDR
// end ;
69092: LD_VAR 0 1
69096: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
69097: LD_INT 0
69099: PPUSH
69100: PPUSH
69101: PPUSH
// _x := ( x1 + x2 ) div 2 ;
69102: LD_ADDR_VAR 0 6
69106: PUSH
69107: LD_VAR 0 1
69111: PUSH
69112: LD_VAR 0 3
69116: PLUS
69117: PUSH
69118: LD_INT 2
69120: DIV
69121: ST_TO_ADDR
// if _x < 0 then
69122: LD_VAR 0 6
69126: PUSH
69127: LD_INT 0
69129: LESS
69130: IFFALSE 69147
// _x := _x * - 1 ;
69132: LD_ADDR_VAR 0 6
69136: PUSH
69137: LD_VAR 0 6
69141: PUSH
69142: LD_INT 1
69144: NEG
69145: MUL
69146: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69147: LD_ADDR_VAR 0 7
69151: PUSH
69152: LD_VAR 0 2
69156: PUSH
69157: LD_VAR 0 4
69161: PLUS
69162: PUSH
69163: LD_INT 2
69165: DIV
69166: ST_TO_ADDR
// if _y < 0 then
69167: LD_VAR 0 7
69171: PUSH
69172: LD_INT 0
69174: LESS
69175: IFFALSE 69192
// _y := _y * - 1 ;
69177: LD_ADDR_VAR 0 7
69181: PUSH
69182: LD_VAR 0 7
69186: PUSH
69187: LD_INT 1
69189: NEG
69190: MUL
69191: ST_TO_ADDR
// result := [ _x , _y ] ;
69192: LD_ADDR_VAR 0 5
69196: PUSH
69197: LD_VAR 0 6
69201: PUSH
69202: LD_VAR 0 7
69206: PUSH
69207: EMPTY
69208: LIST
69209: LIST
69210: ST_TO_ADDR
// end ;
69211: LD_VAR 0 5
69215: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69216: LD_INT 0
69218: PPUSH
69219: PPUSH
69220: PPUSH
69221: PPUSH
// task := GetTaskList ( unit ) ;
69222: LD_ADDR_VAR 0 7
69226: PUSH
69227: LD_VAR 0 1
69231: PPUSH
69232: CALL_OW 437
69236: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69237: LD_VAR 0 7
69241: NOT
69242: PUSH
69243: LD_VAR 0 1
69247: PPUSH
69248: LD_VAR 0 2
69252: PPUSH
69253: CALL_OW 308
69257: NOT
69258: AND
69259: IFFALSE 69263
// exit ;
69261: GO 69381
// if IsInArea ( unit , area ) then
69263: LD_VAR 0 1
69267: PPUSH
69268: LD_VAR 0 2
69272: PPUSH
69273: CALL_OW 308
69277: IFFALSE 69295
// begin ComMoveToArea ( unit , goAway ) ;
69279: LD_VAR 0 1
69283: PPUSH
69284: LD_VAR 0 3
69288: PPUSH
69289: CALL_OW 113
// exit ;
69293: GO 69381
// end ; if task [ 1 ] [ 1 ] <> M then
69295: LD_VAR 0 7
69299: PUSH
69300: LD_INT 1
69302: ARRAY
69303: PUSH
69304: LD_INT 1
69306: ARRAY
69307: PUSH
69308: LD_STRING M
69310: NONEQUAL
69311: IFFALSE 69315
// exit ;
69313: GO 69381
// x := task [ 1 ] [ 2 ] ;
69315: LD_ADDR_VAR 0 5
69319: PUSH
69320: LD_VAR 0 7
69324: PUSH
69325: LD_INT 1
69327: ARRAY
69328: PUSH
69329: LD_INT 2
69331: ARRAY
69332: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69333: LD_ADDR_VAR 0 6
69337: PUSH
69338: LD_VAR 0 7
69342: PUSH
69343: LD_INT 1
69345: ARRAY
69346: PUSH
69347: LD_INT 3
69349: ARRAY
69350: ST_TO_ADDR
// if InArea ( x , y , area ) then
69351: LD_VAR 0 5
69355: PPUSH
69356: LD_VAR 0 6
69360: PPUSH
69361: LD_VAR 0 2
69365: PPUSH
69366: CALL_OW 309
69370: IFFALSE 69381
// ComStop ( unit ) ;
69372: LD_VAR 0 1
69376: PPUSH
69377: CALL_OW 141
// end ;
69381: LD_VAR 0 4
69385: RET
// export function Abs ( value ) ; begin
69386: LD_INT 0
69388: PPUSH
// result := value ;
69389: LD_ADDR_VAR 0 2
69393: PUSH
69394: LD_VAR 0 1
69398: ST_TO_ADDR
// if value < 0 then
69399: LD_VAR 0 1
69403: PUSH
69404: LD_INT 0
69406: LESS
69407: IFFALSE 69424
// result := value * - 1 ;
69409: LD_ADDR_VAR 0 2
69413: PUSH
69414: LD_VAR 0 1
69418: PUSH
69419: LD_INT 1
69421: NEG
69422: MUL
69423: ST_TO_ADDR
// end ;
69424: LD_VAR 0 2
69428: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69429: LD_INT 0
69431: PPUSH
69432: PPUSH
69433: PPUSH
69434: PPUSH
69435: PPUSH
69436: PPUSH
69437: PPUSH
69438: PPUSH
// if not unit or not building then
69439: LD_VAR 0 1
69443: NOT
69444: PUSH
69445: LD_VAR 0 2
69449: NOT
69450: OR
69451: IFFALSE 69455
// exit ;
69453: GO 69681
// x := GetX ( building ) ;
69455: LD_ADDR_VAR 0 4
69459: PUSH
69460: LD_VAR 0 2
69464: PPUSH
69465: CALL_OW 250
69469: ST_TO_ADDR
// y := GetY ( building ) ;
69470: LD_ADDR_VAR 0 6
69474: PUSH
69475: LD_VAR 0 2
69479: PPUSH
69480: CALL_OW 251
69484: ST_TO_ADDR
// d := GetDir ( building ) ;
69485: LD_ADDR_VAR 0 8
69489: PUSH
69490: LD_VAR 0 2
69494: PPUSH
69495: CALL_OW 254
69499: ST_TO_ADDR
// r := 4 ;
69500: LD_ADDR_VAR 0 9
69504: PUSH
69505: LD_INT 4
69507: ST_TO_ADDR
// for i := 1 to 5 do
69508: LD_ADDR_VAR 0 10
69512: PUSH
69513: DOUBLE
69514: LD_INT 1
69516: DEC
69517: ST_TO_ADDR
69518: LD_INT 5
69520: PUSH
69521: FOR_TO
69522: IFFALSE 69679
// begin _x := ShiftX ( x , d , r + i ) ;
69524: LD_ADDR_VAR 0 5
69528: PUSH
69529: LD_VAR 0 4
69533: PPUSH
69534: LD_VAR 0 8
69538: PPUSH
69539: LD_VAR 0 9
69543: PUSH
69544: LD_VAR 0 10
69548: PLUS
69549: PPUSH
69550: CALL_OW 272
69554: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69555: LD_ADDR_VAR 0 7
69559: PUSH
69560: LD_VAR 0 6
69564: PPUSH
69565: LD_VAR 0 8
69569: PPUSH
69570: LD_VAR 0 9
69574: PUSH
69575: LD_VAR 0 10
69579: PLUS
69580: PPUSH
69581: CALL_OW 273
69585: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69586: LD_VAR 0 5
69590: PPUSH
69591: LD_VAR 0 7
69595: PPUSH
69596: CALL_OW 488
69600: PUSH
69601: LD_VAR 0 5
69605: PPUSH
69606: LD_VAR 0 7
69610: PPUSH
69611: CALL_OW 428
69615: PPUSH
69616: CALL_OW 247
69620: PUSH
69621: LD_INT 3
69623: PUSH
69624: LD_INT 2
69626: PUSH
69627: EMPTY
69628: LIST
69629: LIST
69630: IN
69631: NOT
69632: AND
69633: IFFALSE 69677
// begin ComMoveXY ( unit , _x , _y ) ;
69635: LD_VAR 0 1
69639: PPUSH
69640: LD_VAR 0 5
69644: PPUSH
69645: LD_VAR 0 7
69649: PPUSH
69650: CALL_OW 111
// result := [ _x , _y ] ;
69654: LD_ADDR_VAR 0 3
69658: PUSH
69659: LD_VAR 0 5
69663: PUSH
69664: LD_VAR 0 7
69668: PUSH
69669: EMPTY
69670: LIST
69671: LIST
69672: ST_TO_ADDR
// exit ;
69673: POP
69674: POP
69675: GO 69681
// end ; end ;
69677: GO 69521
69679: POP
69680: POP
// end ;
69681: LD_VAR 0 3
69685: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69686: LD_INT 0
69688: PPUSH
69689: PPUSH
69690: PPUSH
// result := 0 ;
69691: LD_ADDR_VAR 0 3
69695: PUSH
69696: LD_INT 0
69698: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69699: LD_VAR 0 1
69703: PUSH
69704: LD_INT 0
69706: LESS
69707: PUSH
69708: LD_VAR 0 1
69712: PUSH
69713: LD_INT 8
69715: GREATER
69716: OR
69717: PUSH
69718: LD_VAR 0 2
69722: PUSH
69723: LD_INT 0
69725: LESS
69726: OR
69727: PUSH
69728: LD_VAR 0 2
69732: PUSH
69733: LD_INT 8
69735: GREATER
69736: OR
69737: IFFALSE 69741
// exit ;
69739: GO 69816
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69741: LD_ADDR_VAR 0 4
69745: PUSH
69746: LD_INT 22
69748: PUSH
69749: LD_VAR 0 2
69753: PUSH
69754: EMPTY
69755: LIST
69756: LIST
69757: PPUSH
69758: CALL_OW 69
69762: PUSH
69763: FOR_IN
69764: IFFALSE 69814
// begin un := UnitShoot ( i ) ;
69766: LD_ADDR_VAR 0 5
69770: PUSH
69771: LD_VAR 0 4
69775: PPUSH
69776: CALL_OW 504
69780: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69781: LD_VAR 0 5
69785: PPUSH
69786: CALL_OW 255
69790: PUSH
69791: LD_VAR 0 1
69795: EQUAL
69796: IFFALSE 69812
// begin result := un ;
69798: LD_ADDR_VAR 0 3
69802: PUSH
69803: LD_VAR 0 5
69807: ST_TO_ADDR
// exit ;
69808: POP
69809: POP
69810: GO 69816
// end ; end ;
69812: GO 69763
69814: POP
69815: POP
// end ;
69816: LD_VAR 0 3
69820: RET
// export function GetCargoBay ( units ) ; begin
69821: LD_INT 0
69823: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69824: LD_ADDR_VAR 0 2
69828: PUSH
69829: LD_VAR 0 1
69833: PPUSH
69834: LD_INT 2
69836: PUSH
69837: LD_INT 34
69839: PUSH
69840: LD_INT 12
69842: PUSH
69843: EMPTY
69844: LIST
69845: LIST
69846: PUSH
69847: LD_INT 34
69849: PUSH
69850: LD_INT 51
69852: PUSH
69853: EMPTY
69854: LIST
69855: LIST
69856: PUSH
69857: LD_INT 34
69859: PUSH
69860: LD_INT 32
69862: PUSH
69863: EMPTY
69864: LIST
69865: LIST
69866: PUSH
69867: LD_INT 34
69869: PUSH
69870: LD_INT 89
69872: PUSH
69873: EMPTY
69874: LIST
69875: LIST
69876: PUSH
69877: EMPTY
69878: LIST
69879: LIST
69880: LIST
69881: LIST
69882: LIST
69883: PPUSH
69884: CALL_OW 72
69888: ST_TO_ADDR
// end ;
69889: LD_VAR 0 2
69893: RET
// export function Negate ( value ) ; begin
69894: LD_INT 0
69896: PPUSH
// result := not value ;
69897: LD_ADDR_VAR 0 2
69901: PUSH
69902: LD_VAR 0 1
69906: NOT
69907: ST_TO_ADDR
// end ;
69908: LD_VAR 0 2
69912: RET
// export function Inc ( value ) ; begin
69913: LD_INT 0
69915: PPUSH
// result := value + 1 ;
69916: LD_ADDR_VAR 0 2
69920: PUSH
69921: LD_VAR 0 1
69925: PUSH
69926: LD_INT 1
69928: PLUS
69929: ST_TO_ADDR
// end ;
69930: LD_VAR 0 2
69934: RET
// export function Dec ( value ) ; begin
69935: LD_INT 0
69937: PPUSH
// result := value - 1 ;
69938: LD_ADDR_VAR 0 2
69942: PUSH
69943: LD_VAR 0 1
69947: PUSH
69948: LD_INT 1
69950: MINUS
69951: ST_TO_ADDR
// end ;
69952: LD_VAR 0 2
69956: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69957: LD_INT 0
69959: PPUSH
69960: PPUSH
69961: PPUSH
69962: PPUSH
69963: PPUSH
69964: PPUSH
69965: PPUSH
69966: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69967: LD_VAR 0 1
69971: PPUSH
69972: LD_VAR 0 2
69976: PPUSH
69977: CALL_OW 488
69981: NOT
69982: PUSH
69983: LD_VAR 0 3
69987: PPUSH
69988: LD_VAR 0 4
69992: PPUSH
69993: CALL_OW 488
69997: NOT
69998: OR
69999: IFFALSE 70012
// begin result := - 1 ;
70001: LD_ADDR_VAR 0 5
70005: PUSH
70006: LD_INT 1
70008: NEG
70009: ST_TO_ADDR
// exit ;
70010: GO 70247
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
70012: LD_ADDR_VAR 0 12
70016: PUSH
70017: LD_VAR 0 1
70021: PPUSH
70022: LD_VAR 0 2
70026: PPUSH
70027: LD_VAR 0 3
70031: PPUSH
70032: LD_VAR 0 4
70036: PPUSH
70037: CALL 69097 0 4
70041: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
70042: LD_ADDR_VAR 0 11
70046: PUSH
70047: LD_VAR 0 1
70051: PPUSH
70052: LD_VAR 0 2
70056: PPUSH
70057: LD_VAR 0 12
70061: PUSH
70062: LD_INT 1
70064: ARRAY
70065: PPUSH
70066: LD_VAR 0 12
70070: PUSH
70071: LD_INT 2
70073: ARRAY
70074: PPUSH
70075: CALL_OW 298
70079: ST_TO_ADDR
// distance := 9999 ;
70080: LD_ADDR_VAR 0 10
70084: PUSH
70085: LD_INT 9999
70087: ST_TO_ADDR
// for i := 0 to 5 do
70088: LD_ADDR_VAR 0 6
70092: PUSH
70093: DOUBLE
70094: LD_INT 0
70096: DEC
70097: ST_TO_ADDR
70098: LD_INT 5
70100: PUSH
70101: FOR_TO
70102: IFFALSE 70245
// begin _x := ShiftX ( x1 , i , centerDist ) ;
70104: LD_ADDR_VAR 0 7
70108: PUSH
70109: LD_VAR 0 1
70113: PPUSH
70114: LD_VAR 0 6
70118: PPUSH
70119: LD_VAR 0 11
70123: PPUSH
70124: CALL_OW 272
70128: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
70129: LD_ADDR_VAR 0 8
70133: PUSH
70134: LD_VAR 0 2
70138: PPUSH
70139: LD_VAR 0 6
70143: PPUSH
70144: LD_VAR 0 11
70148: PPUSH
70149: CALL_OW 273
70153: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70154: LD_VAR 0 7
70158: PPUSH
70159: LD_VAR 0 8
70163: PPUSH
70164: CALL_OW 488
70168: NOT
70169: IFFALSE 70173
// continue ;
70171: GO 70101
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
70173: LD_ADDR_VAR 0 9
70177: PUSH
70178: LD_VAR 0 12
70182: PUSH
70183: LD_INT 1
70185: ARRAY
70186: PPUSH
70187: LD_VAR 0 12
70191: PUSH
70192: LD_INT 2
70194: ARRAY
70195: PPUSH
70196: LD_VAR 0 7
70200: PPUSH
70201: LD_VAR 0 8
70205: PPUSH
70206: CALL_OW 298
70210: ST_TO_ADDR
// if tmp < distance then
70211: LD_VAR 0 9
70215: PUSH
70216: LD_VAR 0 10
70220: LESS
70221: IFFALSE 70243
// begin result := i ;
70223: LD_ADDR_VAR 0 5
70227: PUSH
70228: LD_VAR 0 6
70232: ST_TO_ADDR
// distance := tmp ;
70233: LD_ADDR_VAR 0 10
70237: PUSH
70238: LD_VAR 0 9
70242: ST_TO_ADDR
// end ; end ;
70243: GO 70101
70245: POP
70246: POP
// end ;
70247: LD_VAR 0 5
70251: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70252: LD_INT 0
70254: PPUSH
70255: PPUSH
// if not driver or not IsInUnit ( driver ) then
70256: LD_VAR 0 1
70260: NOT
70261: PUSH
70262: LD_VAR 0 1
70266: PPUSH
70267: CALL_OW 310
70271: NOT
70272: OR
70273: IFFALSE 70277
// exit ;
70275: GO 70367
// vehicle := IsInUnit ( driver ) ;
70277: LD_ADDR_VAR 0 3
70281: PUSH
70282: LD_VAR 0 1
70286: PPUSH
70287: CALL_OW 310
70291: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70292: LD_VAR 0 1
70296: PPUSH
70297: LD_STRING \
70299: PUSH
70300: LD_INT 0
70302: PUSH
70303: LD_INT 0
70305: PUSH
70306: LD_INT 0
70308: PUSH
70309: LD_INT 0
70311: PUSH
70312: LD_INT 0
70314: PUSH
70315: LD_INT 0
70317: PUSH
70318: EMPTY
70319: LIST
70320: LIST
70321: LIST
70322: LIST
70323: LIST
70324: LIST
70325: LIST
70326: PUSH
70327: LD_STRING E
70329: PUSH
70330: LD_INT 0
70332: PUSH
70333: LD_INT 0
70335: PUSH
70336: LD_VAR 0 3
70340: PUSH
70341: LD_INT 0
70343: PUSH
70344: LD_INT 0
70346: PUSH
70347: LD_INT 0
70349: PUSH
70350: EMPTY
70351: LIST
70352: LIST
70353: LIST
70354: LIST
70355: LIST
70356: LIST
70357: LIST
70358: PUSH
70359: EMPTY
70360: LIST
70361: LIST
70362: PPUSH
70363: CALL_OW 446
// end ;
70367: LD_VAR 0 2
70371: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70372: LD_INT 0
70374: PPUSH
70375: PPUSH
// if not driver or not IsInUnit ( driver ) then
70376: LD_VAR 0 1
70380: NOT
70381: PUSH
70382: LD_VAR 0 1
70386: PPUSH
70387: CALL_OW 310
70391: NOT
70392: OR
70393: IFFALSE 70397
// exit ;
70395: GO 70487
// vehicle := IsInUnit ( driver ) ;
70397: LD_ADDR_VAR 0 3
70401: PUSH
70402: LD_VAR 0 1
70406: PPUSH
70407: CALL_OW 310
70411: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70412: LD_VAR 0 1
70416: PPUSH
70417: LD_STRING \
70419: PUSH
70420: LD_INT 0
70422: PUSH
70423: LD_INT 0
70425: PUSH
70426: LD_INT 0
70428: PUSH
70429: LD_INT 0
70431: PUSH
70432: LD_INT 0
70434: PUSH
70435: LD_INT 0
70437: PUSH
70438: EMPTY
70439: LIST
70440: LIST
70441: LIST
70442: LIST
70443: LIST
70444: LIST
70445: LIST
70446: PUSH
70447: LD_STRING E
70449: PUSH
70450: LD_INT 0
70452: PUSH
70453: LD_INT 0
70455: PUSH
70456: LD_VAR 0 3
70460: PUSH
70461: LD_INT 0
70463: PUSH
70464: LD_INT 0
70466: PUSH
70467: LD_INT 0
70469: PUSH
70470: EMPTY
70471: LIST
70472: LIST
70473: LIST
70474: LIST
70475: LIST
70476: LIST
70477: LIST
70478: PUSH
70479: EMPTY
70480: LIST
70481: LIST
70482: PPUSH
70483: CALL_OW 447
// end ;
70487: LD_VAR 0 2
70491: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70492: LD_INT 0
70494: PPUSH
70495: PPUSH
70496: PPUSH
// tmp := [ ] ;
70497: LD_ADDR_VAR 0 5
70501: PUSH
70502: EMPTY
70503: ST_TO_ADDR
// for i in units do
70504: LD_ADDR_VAR 0 4
70508: PUSH
70509: LD_VAR 0 1
70513: PUSH
70514: FOR_IN
70515: IFFALSE 70553
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70517: LD_ADDR_VAR 0 5
70521: PUSH
70522: LD_VAR 0 5
70526: PPUSH
70527: LD_VAR 0 5
70531: PUSH
70532: LD_INT 1
70534: PLUS
70535: PPUSH
70536: LD_VAR 0 4
70540: PPUSH
70541: CALL_OW 256
70545: PPUSH
70546: CALL_OW 2
70550: ST_TO_ADDR
70551: GO 70514
70553: POP
70554: POP
// if not tmp then
70555: LD_VAR 0 5
70559: NOT
70560: IFFALSE 70564
// exit ;
70562: GO 70612
// if asc then
70564: LD_VAR 0 2
70568: IFFALSE 70592
// result := SortListByListAsc ( units , tmp ) else
70570: LD_ADDR_VAR 0 3
70574: PUSH
70575: LD_VAR 0 1
70579: PPUSH
70580: LD_VAR 0 5
70584: PPUSH
70585: CALL_OW 76
70589: ST_TO_ADDR
70590: GO 70612
// result := SortListByListDesc ( units , tmp ) ;
70592: LD_ADDR_VAR 0 3
70596: PUSH
70597: LD_VAR 0 1
70601: PPUSH
70602: LD_VAR 0 5
70606: PPUSH
70607: CALL_OW 77
70611: ST_TO_ADDR
// end ;
70612: LD_VAR 0 3
70616: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70617: LD_INT 0
70619: PPUSH
70620: PPUSH
// task := GetTaskList ( mech ) ;
70621: LD_ADDR_VAR 0 4
70625: PUSH
70626: LD_VAR 0 1
70630: PPUSH
70631: CALL_OW 437
70635: ST_TO_ADDR
// if not task then
70636: LD_VAR 0 4
70640: NOT
70641: IFFALSE 70645
// exit ;
70643: GO 70687
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70645: LD_ADDR_VAR 0 3
70649: PUSH
70650: LD_VAR 0 4
70654: PUSH
70655: LD_INT 1
70657: ARRAY
70658: PUSH
70659: LD_INT 1
70661: ARRAY
70662: PUSH
70663: LD_STRING r
70665: EQUAL
70666: PUSH
70667: LD_VAR 0 4
70671: PUSH
70672: LD_INT 1
70674: ARRAY
70675: PUSH
70676: LD_INT 4
70678: ARRAY
70679: PUSH
70680: LD_VAR 0 2
70684: EQUAL
70685: AND
70686: ST_TO_ADDR
// end ;
70687: LD_VAR 0 3
70691: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70692: LD_INT 0
70694: PPUSH
// SetDir ( unit , d ) ;
70695: LD_VAR 0 1
70699: PPUSH
70700: LD_VAR 0 4
70704: PPUSH
70705: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
70709: LD_VAR 0 1
70713: PPUSH
70714: LD_VAR 0 2
70718: PPUSH
70719: LD_VAR 0 3
70723: PPUSH
70724: LD_VAR 0 5
70728: PPUSH
70729: CALL_OW 48
// end ;
70733: LD_VAR 0 6
70737: RET
// export function ToNaturalNumber ( number ) ; begin
70738: LD_INT 0
70740: PPUSH
// result := number div 1 ;
70741: LD_ADDR_VAR 0 2
70745: PUSH
70746: LD_VAR 0 1
70750: PUSH
70751: LD_INT 1
70753: DIV
70754: ST_TO_ADDR
// if number < 0 then
70755: LD_VAR 0 1
70759: PUSH
70760: LD_INT 0
70762: LESS
70763: IFFALSE 70773
// result := 0 ;
70765: LD_ADDR_VAR 0 2
70769: PUSH
70770: LD_INT 0
70772: ST_TO_ADDR
// end ;
70773: LD_VAR 0 2
70777: RET
// export function SortByClass ( units , class ) ; var un ; begin
70778: LD_INT 0
70780: PPUSH
70781: PPUSH
// if not units or not class then
70782: LD_VAR 0 1
70786: NOT
70787: PUSH
70788: LD_VAR 0 2
70792: NOT
70793: OR
70794: IFFALSE 70798
// exit ;
70796: GO 70893
// result := [ ] ;
70798: LD_ADDR_VAR 0 3
70802: PUSH
70803: EMPTY
70804: ST_TO_ADDR
// for un in units do
70805: LD_ADDR_VAR 0 4
70809: PUSH
70810: LD_VAR 0 1
70814: PUSH
70815: FOR_IN
70816: IFFALSE 70891
// if GetClass ( un ) = class then
70818: LD_VAR 0 4
70822: PPUSH
70823: CALL_OW 257
70827: PUSH
70828: LD_VAR 0 2
70832: EQUAL
70833: IFFALSE 70860
// result := Insert ( result , 1 , un ) else
70835: LD_ADDR_VAR 0 3
70839: PUSH
70840: LD_VAR 0 3
70844: PPUSH
70845: LD_INT 1
70847: PPUSH
70848: LD_VAR 0 4
70852: PPUSH
70853: CALL_OW 2
70857: ST_TO_ADDR
70858: GO 70889
// result := Replace ( result , result + 1 , un ) ;
70860: LD_ADDR_VAR 0 3
70864: PUSH
70865: LD_VAR 0 3
70869: PPUSH
70870: LD_VAR 0 3
70874: PUSH
70875: LD_INT 1
70877: PLUS
70878: PPUSH
70879: LD_VAR 0 4
70883: PPUSH
70884: CALL_OW 1
70888: ST_TO_ADDR
70889: GO 70815
70891: POP
70892: POP
// end ;
70893: LD_VAR 0 3
70897: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70898: LD_INT 0
70900: PPUSH
70901: PPUSH
70902: PPUSH
70903: PPUSH
70904: PPUSH
70905: PPUSH
70906: PPUSH
// result := [ ] ;
70907: LD_ADDR_VAR 0 4
70911: PUSH
70912: EMPTY
70913: ST_TO_ADDR
// if x - r < 0 then
70914: LD_VAR 0 1
70918: PUSH
70919: LD_VAR 0 3
70923: MINUS
70924: PUSH
70925: LD_INT 0
70927: LESS
70928: IFFALSE 70940
// min_x := 0 else
70930: LD_ADDR_VAR 0 8
70934: PUSH
70935: LD_INT 0
70937: ST_TO_ADDR
70938: GO 70956
// min_x := x - r ;
70940: LD_ADDR_VAR 0 8
70944: PUSH
70945: LD_VAR 0 1
70949: PUSH
70950: LD_VAR 0 3
70954: MINUS
70955: ST_TO_ADDR
// if y - r < 0 then
70956: LD_VAR 0 2
70960: PUSH
70961: LD_VAR 0 3
70965: MINUS
70966: PUSH
70967: LD_INT 0
70969: LESS
70970: IFFALSE 70982
// min_y := 0 else
70972: LD_ADDR_VAR 0 7
70976: PUSH
70977: LD_INT 0
70979: ST_TO_ADDR
70980: GO 70998
// min_y := y - r ;
70982: LD_ADDR_VAR 0 7
70986: PUSH
70987: LD_VAR 0 2
70991: PUSH
70992: LD_VAR 0 3
70996: MINUS
70997: ST_TO_ADDR
// max_x := x + r ;
70998: LD_ADDR_VAR 0 9
71002: PUSH
71003: LD_VAR 0 1
71007: PUSH
71008: LD_VAR 0 3
71012: PLUS
71013: ST_TO_ADDR
// max_y := y + r ;
71014: LD_ADDR_VAR 0 10
71018: PUSH
71019: LD_VAR 0 2
71023: PUSH
71024: LD_VAR 0 3
71028: PLUS
71029: ST_TO_ADDR
// for _x = min_x to max_x do
71030: LD_ADDR_VAR 0 5
71034: PUSH
71035: DOUBLE
71036: LD_VAR 0 8
71040: DEC
71041: ST_TO_ADDR
71042: LD_VAR 0 9
71046: PUSH
71047: FOR_TO
71048: IFFALSE 71149
// for _y = min_y to max_y do
71050: LD_ADDR_VAR 0 6
71054: PUSH
71055: DOUBLE
71056: LD_VAR 0 7
71060: DEC
71061: ST_TO_ADDR
71062: LD_VAR 0 10
71066: PUSH
71067: FOR_TO
71068: IFFALSE 71145
// begin if not ValidHex ( _x , _y ) then
71070: LD_VAR 0 5
71074: PPUSH
71075: LD_VAR 0 6
71079: PPUSH
71080: CALL_OW 488
71084: NOT
71085: IFFALSE 71089
// continue ;
71087: GO 71067
// if GetResourceTypeXY ( _x , _y ) then
71089: LD_VAR 0 5
71093: PPUSH
71094: LD_VAR 0 6
71098: PPUSH
71099: CALL_OW 283
71103: IFFALSE 71143
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
71105: LD_ADDR_VAR 0 4
71109: PUSH
71110: LD_VAR 0 4
71114: PPUSH
71115: LD_VAR 0 4
71119: PUSH
71120: LD_INT 1
71122: PLUS
71123: PPUSH
71124: LD_VAR 0 5
71128: PUSH
71129: LD_VAR 0 6
71133: PUSH
71134: EMPTY
71135: LIST
71136: LIST
71137: PPUSH
71138: CALL_OW 1
71142: ST_TO_ADDR
// end ;
71143: GO 71067
71145: POP
71146: POP
71147: GO 71047
71149: POP
71150: POP
// end ;
71151: LD_VAR 0 4
71155: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
71156: LD_INT 0
71158: PPUSH
71159: PPUSH
71160: PPUSH
71161: PPUSH
71162: PPUSH
71163: PPUSH
71164: PPUSH
71165: PPUSH
// if not units then
71166: LD_VAR 0 1
71170: NOT
71171: IFFALSE 71175
// exit ;
71173: GO 71699
// result := UnitFilter ( units , [ f_ok ] ) ;
71175: LD_ADDR_VAR 0 3
71179: PUSH
71180: LD_VAR 0 1
71184: PPUSH
71185: LD_INT 50
71187: PUSH
71188: EMPTY
71189: LIST
71190: PPUSH
71191: CALL_OW 72
71195: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71196: LD_ADDR_VAR 0 8
71200: PUSH
71201: LD_VAR 0 1
71205: PUSH
71206: LD_INT 1
71208: ARRAY
71209: PPUSH
71210: CALL_OW 255
71214: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
71215: LD_ADDR_VAR 0 10
71219: PUSH
71220: LD_INT 29
71222: PUSH
71223: LD_INT 91
71225: PUSH
71226: LD_INT 49
71228: PUSH
71229: EMPTY
71230: LIST
71231: LIST
71232: LIST
71233: ST_TO_ADDR
// if not result then
71234: LD_VAR 0 3
71238: NOT
71239: IFFALSE 71243
// exit ;
71241: GO 71699
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71243: LD_ADDR_VAR 0 5
71247: PUSH
71248: LD_INT 81
71250: PUSH
71251: LD_VAR 0 8
71255: PUSH
71256: EMPTY
71257: LIST
71258: LIST
71259: PPUSH
71260: CALL_OW 69
71264: ST_TO_ADDR
// for i in result do
71265: LD_ADDR_VAR 0 4
71269: PUSH
71270: LD_VAR 0 3
71274: PUSH
71275: FOR_IN
71276: IFFALSE 71697
// begin tag := GetTag ( i ) + 1 ;
71278: LD_ADDR_VAR 0 9
71282: PUSH
71283: LD_VAR 0 4
71287: PPUSH
71288: CALL_OW 110
71292: PUSH
71293: LD_INT 1
71295: PLUS
71296: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
71297: LD_ADDR_VAR 0 7
71301: PUSH
71302: LD_VAR 0 4
71306: PPUSH
71307: CALL_OW 250
71311: PPUSH
71312: LD_VAR 0 4
71316: PPUSH
71317: CALL_OW 251
71321: PPUSH
71322: LD_INT 6
71324: PPUSH
71325: CALL 70898 0 3
71329: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
71330: LD_VAR 0 4
71334: PPUSH
71335: CALL_OW 247
71339: PUSH
71340: LD_INT 2
71342: EQUAL
71343: PUSH
71344: LD_VAR 0 7
71348: AND
71349: PUSH
71350: LD_VAR 0 4
71354: PPUSH
71355: CALL_OW 264
71359: PUSH
71360: LD_VAR 0 10
71364: IN
71365: NOT
71366: AND
71367: IFFALSE 71406
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71369: LD_VAR 0 4
71373: PPUSH
71374: LD_VAR 0 7
71378: PUSH
71379: LD_INT 1
71381: ARRAY
71382: PUSH
71383: LD_INT 1
71385: ARRAY
71386: PPUSH
71387: LD_VAR 0 7
71391: PUSH
71392: LD_INT 1
71394: ARRAY
71395: PUSH
71396: LD_INT 2
71398: ARRAY
71399: PPUSH
71400: CALL_OW 116
71404: GO 71695
// if path > tag then
71406: LD_VAR 0 2
71410: PUSH
71411: LD_VAR 0 9
71415: GREATER
71416: IFFALSE 71624
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71418: LD_ADDR_VAR 0 6
71422: PUSH
71423: LD_VAR 0 5
71427: PPUSH
71428: LD_INT 91
71430: PUSH
71431: LD_VAR 0 4
71435: PUSH
71436: LD_INT 8
71438: PUSH
71439: EMPTY
71440: LIST
71441: LIST
71442: LIST
71443: PPUSH
71444: CALL_OW 72
71448: ST_TO_ADDR
// if nearEnemy then
71449: LD_VAR 0 6
71453: IFFALSE 71522
// begin if GetWeapon ( i ) = ru_time_lapser then
71455: LD_VAR 0 4
71459: PPUSH
71460: CALL_OW 264
71464: PUSH
71465: LD_INT 49
71467: EQUAL
71468: IFFALSE 71496
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71470: LD_VAR 0 4
71474: PPUSH
71475: LD_VAR 0 6
71479: PPUSH
71480: LD_VAR 0 4
71484: PPUSH
71485: CALL_OW 74
71489: PPUSH
71490: CALL_OW 112
71494: GO 71520
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71496: LD_VAR 0 4
71500: PPUSH
71501: LD_VAR 0 6
71505: PPUSH
71506: LD_VAR 0 4
71510: PPUSH
71511: CALL_OW 74
71515: PPUSH
71516: CALL_OW 115
// end else
71520: GO 71622
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71522: LD_VAR 0 4
71526: PPUSH
71527: LD_VAR 0 2
71531: PUSH
71532: LD_VAR 0 9
71536: ARRAY
71537: PUSH
71538: LD_INT 1
71540: ARRAY
71541: PPUSH
71542: LD_VAR 0 2
71546: PUSH
71547: LD_VAR 0 9
71551: ARRAY
71552: PUSH
71553: LD_INT 2
71555: ARRAY
71556: PPUSH
71557: CALL_OW 297
71561: PUSH
71562: LD_INT 6
71564: GREATER
71565: IFFALSE 71608
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71567: LD_VAR 0 4
71571: PPUSH
71572: LD_VAR 0 2
71576: PUSH
71577: LD_VAR 0 9
71581: ARRAY
71582: PUSH
71583: LD_INT 1
71585: ARRAY
71586: PPUSH
71587: LD_VAR 0 2
71591: PUSH
71592: LD_VAR 0 9
71596: ARRAY
71597: PUSH
71598: LD_INT 2
71600: ARRAY
71601: PPUSH
71602: CALL_OW 114
71606: GO 71622
// SetTag ( i , tag ) ;
71608: LD_VAR 0 4
71612: PPUSH
71613: LD_VAR 0 9
71617: PPUSH
71618: CALL_OW 109
// end else
71622: GO 71695
// if enemy then
71624: LD_VAR 0 5
71628: IFFALSE 71695
// begin if GetWeapon ( i ) = ru_time_lapser then
71630: LD_VAR 0 4
71634: PPUSH
71635: CALL_OW 264
71639: PUSH
71640: LD_INT 49
71642: EQUAL
71643: IFFALSE 71671
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71645: LD_VAR 0 4
71649: PPUSH
71650: LD_VAR 0 5
71654: PPUSH
71655: LD_VAR 0 4
71659: PPUSH
71660: CALL_OW 74
71664: PPUSH
71665: CALL_OW 112
71669: GO 71695
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71671: LD_VAR 0 4
71675: PPUSH
71676: LD_VAR 0 5
71680: PPUSH
71681: LD_VAR 0 4
71685: PPUSH
71686: CALL_OW 74
71690: PPUSH
71691: CALL_OW 115
// end ; end ;
71695: GO 71275
71697: POP
71698: POP
// end ;
71699: LD_VAR 0 3
71703: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71704: LD_INT 0
71706: PPUSH
71707: PPUSH
71708: PPUSH
// if not unit or IsInUnit ( unit ) then
71709: LD_VAR 0 1
71713: NOT
71714: PUSH
71715: LD_VAR 0 1
71719: PPUSH
71720: CALL_OW 310
71724: OR
71725: IFFALSE 71729
// exit ;
71727: GO 71820
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71729: LD_ADDR_VAR 0 4
71733: PUSH
71734: LD_VAR 0 1
71738: PPUSH
71739: CALL_OW 250
71743: PPUSH
71744: LD_VAR 0 2
71748: PPUSH
71749: LD_INT 1
71751: PPUSH
71752: CALL_OW 272
71756: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71757: LD_ADDR_VAR 0 5
71761: PUSH
71762: LD_VAR 0 1
71766: PPUSH
71767: CALL_OW 251
71771: PPUSH
71772: LD_VAR 0 2
71776: PPUSH
71777: LD_INT 1
71779: PPUSH
71780: CALL_OW 273
71784: ST_TO_ADDR
// if ValidHex ( x , y ) then
71785: LD_VAR 0 4
71789: PPUSH
71790: LD_VAR 0 5
71794: PPUSH
71795: CALL_OW 488
71799: IFFALSE 71820
// ComTurnXY ( unit , x , y ) ;
71801: LD_VAR 0 1
71805: PPUSH
71806: LD_VAR 0 4
71810: PPUSH
71811: LD_VAR 0 5
71815: PPUSH
71816: CALL_OW 118
// end ;
71820: LD_VAR 0 3
71824: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71825: LD_INT 0
71827: PPUSH
71828: PPUSH
// result := false ;
71829: LD_ADDR_VAR 0 3
71833: PUSH
71834: LD_INT 0
71836: ST_TO_ADDR
// if not units then
71837: LD_VAR 0 2
71841: NOT
71842: IFFALSE 71846
// exit ;
71844: GO 71891
// for i in units do
71846: LD_ADDR_VAR 0 4
71850: PUSH
71851: LD_VAR 0 2
71855: PUSH
71856: FOR_IN
71857: IFFALSE 71889
// if See ( side , i ) then
71859: LD_VAR 0 1
71863: PPUSH
71864: LD_VAR 0 4
71868: PPUSH
71869: CALL_OW 292
71873: IFFALSE 71887
// begin result := true ;
71875: LD_ADDR_VAR 0 3
71879: PUSH
71880: LD_INT 1
71882: ST_TO_ADDR
// exit ;
71883: POP
71884: POP
71885: GO 71891
// end ;
71887: GO 71856
71889: POP
71890: POP
// end ;
71891: LD_VAR 0 3
71895: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71896: LD_INT 0
71898: PPUSH
71899: PPUSH
71900: PPUSH
71901: PPUSH
// if not unit or not points then
71902: LD_VAR 0 1
71906: NOT
71907: PUSH
71908: LD_VAR 0 2
71912: NOT
71913: OR
71914: IFFALSE 71918
// exit ;
71916: GO 72008
// dist := 99999 ;
71918: LD_ADDR_VAR 0 5
71922: PUSH
71923: LD_INT 99999
71925: ST_TO_ADDR
// for i in points do
71926: LD_ADDR_VAR 0 4
71930: PUSH
71931: LD_VAR 0 2
71935: PUSH
71936: FOR_IN
71937: IFFALSE 72006
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71939: LD_ADDR_VAR 0 6
71943: PUSH
71944: LD_VAR 0 1
71948: PPUSH
71949: LD_VAR 0 4
71953: PUSH
71954: LD_INT 1
71956: ARRAY
71957: PPUSH
71958: LD_VAR 0 4
71962: PUSH
71963: LD_INT 2
71965: ARRAY
71966: PPUSH
71967: CALL_OW 297
71971: ST_TO_ADDR
// if tmpDist < dist then
71972: LD_VAR 0 6
71976: PUSH
71977: LD_VAR 0 5
71981: LESS
71982: IFFALSE 72004
// begin result := i ;
71984: LD_ADDR_VAR 0 3
71988: PUSH
71989: LD_VAR 0 4
71993: ST_TO_ADDR
// dist := tmpDist ;
71994: LD_ADDR_VAR 0 5
71998: PUSH
71999: LD_VAR 0 6
72003: ST_TO_ADDR
// end ; end ;
72004: GO 71936
72006: POP
72007: POP
// end ;
72008: LD_VAR 0 3
72012: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
72013: LD_INT 0
72015: PPUSH
// uc_side := side ;
72016: LD_ADDR_OWVAR 20
72020: PUSH
72021: LD_VAR 0 1
72025: ST_TO_ADDR
// uc_nation := 3 ;
72026: LD_ADDR_OWVAR 21
72030: PUSH
72031: LD_INT 3
72033: ST_TO_ADDR
// vc_chassis := 25 ;
72034: LD_ADDR_OWVAR 37
72038: PUSH
72039: LD_INT 25
72041: ST_TO_ADDR
// vc_engine := engine_siberite ;
72042: LD_ADDR_OWVAR 39
72046: PUSH
72047: LD_INT 3
72049: ST_TO_ADDR
// vc_control := control_computer ;
72050: LD_ADDR_OWVAR 38
72054: PUSH
72055: LD_INT 3
72057: ST_TO_ADDR
// vc_weapon := 59 ;
72058: LD_ADDR_OWVAR 40
72062: PUSH
72063: LD_INT 59
72065: ST_TO_ADDR
// result := CreateVehicle ;
72066: LD_ADDR_VAR 0 5
72070: PUSH
72071: CALL_OW 45
72075: ST_TO_ADDR
// SetDir ( result , d ) ;
72076: LD_VAR 0 5
72080: PPUSH
72081: LD_VAR 0 4
72085: PPUSH
72086: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
72090: LD_VAR 0 5
72094: PPUSH
72095: LD_VAR 0 2
72099: PPUSH
72100: LD_VAR 0 3
72104: PPUSH
72105: LD_INT 0
72107: PPUSH
72108: CALL_OW 48
// end ;
72112: LD_VAR 0 5
72116: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
72117: LD_INT 0
72119: PPUSH
72120: PPUSH
72121: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
72122: LD_ADDR_VAR 0 2
72126: PUSH
72127: LD_INT 0
72129: PUSH
72130: LD_INT 0
72132: PUSH
72133: LD_INT 0
72135: PUSH
72136: LD_INT 0
72138: PUSH
72139: EMPTY
72140: LIST
72141: LIST
72142: LIST
72143: LIST
72144: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
72145: LD_VAR 0 1
72149: NOT
72150: PUSH
72151: LD_VAR 0 1
72155: PPUSH
72156: CALL_OW 264
72160: PUSH
72161: LD_INT 12
72163: PUSH
72164: LD_INT 51
72166: PUSH
72167: LD_INT 32
72169: PUSH
72170: LD_INT 89
72172: PUSH
72173: EMPTY
72174: LIST
72175: LIST
72176: LIST
72177: LIST
72178: IN
72179: NOT
72180: OR
72181: IFFALSE 72185
// exit ;
72183: GO 72283
// for i := 1 to 3 do
72185: LD_ADDR_VAR 0 3
72189: PUSH
72190: DOUBLE
72191: LD_INT 1
72193: DEC
72194: ST_TO_ADDR
72195: LD_INT 3
72197: PUSH
72198: FOR_TO
72199: IFFALSE 72281
// begin tmp := GetCargo ( cargo , i ) ;
72201: LD_ADDR_VAR 0 4
72205: PUSH
72206: LD_VAR 0 1
72210: PPUSH
72211: LD_VAR 0 3
72215: PPUSH
72216: CALL_OW 289
72220: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
72221: LD_ADDR_VAR 0 2
72225: PUSH
72226: LD_VAR 0 2
72230: PPUSH
72231: LD_VAR 0 3
72235: PPUSH
72236: LD_VAR 0 4
72240: PPUSH
72241: CALL_OW 1
72245: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
72246: LD_ADDR_VAR 0 2
72250: PUSH
72251: LD_VAR 0 2
72255: PPUSH
72256: LD_INT 4
72258: PPUSH
72259: LD_VAR 0 2
72263: PUSH
72264: LD_INT 4
72266: ARRAY
72267: PUSH
72268: LD_VAR 0 4
72272: PLUS
72273: PPUSH
72274: CALL_OW 1
72278: ST_TO_ADDR
// end ;
72279: GO 72198
72281: POP
72282: POP
// end ;
72283: LD_VAR 0 2
72287: RET
// export function Length ( array ) ; begin
72288: LD_INT 0
72290: PPUSH
// result := array + 0 ;
72291: LD_ADDR_VAR 0 2
72295: PUSH
72296: LD_VAR 0 1
72300: PUSH
72301: LD_INT 0
72303: PLUS
72304: ST_TO_ADDR
// end ;
72305: LD_VAR 0 2
72309: RET
// export function PrepareArray ( array ) ; begin
72310: LD_INT 0
72312: PPUSH
// result := array diff 0 ;
72313: LD_ADDR_VAR 0 2
72317: PUSH
72318: LD_VAR 0 1
72322: PUSH
72323: LD_INT 0
72325: DIFF
72326: ST_TO_ADDR
// if not result [ 1 ] then
72327: LD_VAR 0 2
72331: PUSH
72332: LD_INT 1
72334: ARRAY
72335: NOT
72336: IFFALSE 72356
// result := Delete ( result , 1 ) ;
72338: LD_ADDR_VAR 0 2
72342: PUSH
72343: LD_VAR 0 2
72347: PPUSH
72348: LD_INT 1
72350: PPUSH
72351: CALL_OW 3
72355: ST_TO_ADDR
// end ;
72356: LD_VAR 0 2
72360: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
72361: LD_INT 0
72363: PPUSH
72364: PPUSH
72365: PPUSH
72366: PPUSH
// sibRocketRange := 25 ;
72367: LD_ADDR_VAR 0 6
72371: PUSH
72372: LD_INT 25
72374: ST_TO_ADDR
// result := false ;
72375: LD_ADDR_VAR 0 4
72379: PUSH
72380: LD_INT 0
72382: ST_TO_ADDR
// for i := 0 to 5 do
72383: LD_ADDR_VAR 0 5
72387: PUSH
72388: DOUBLE
72389: LD_INT 0
72391: DEC
72392: ST_TO_ADDR
72393: LD_INT 5
72395: PUSH
72396: FOR_TO
72397: IFFALSE 72464
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
72399: LD_VAR 0 1
72403: PPUSH
72404: LD_VAR 0 5
72408: PPUSH
72409: LD_VAR 0 6
72413: PPUSH
72414: CALL_OW 272
72418: PPUSH
72419: LD_VAR 0 2
72423: PPUSH
72424: LD_VAR 0 5
72428: PPUSH
72429: LD_VAR 0 6
72433: PPUSH
72434: CALL_OW 273
72438: PPUSH
72439: LD_VAR 0 3
72443: PPUSH
72444: CALL_OW 309
72448: IFFALSE 72462
// begin result := true ;
72450: LD_ADDR_VAR 0 4
72454: PUSH
72455: LD_INT 1
72457: ST_TO_ADDR
// exit ;
72458: POP
72459: POP
72460: GO 72466
// end ;
72462: GO 72396
72464: POP
72465: POP
// end ;
72466: LD_VAR 0 4
72470: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
72471: LD_INT 0
72473: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
72474: LD_VAR 0 1
72478: PPUSH
72479: LD_VAR 0 2
72483: PPUSH
72484: LD_INT 0
72486: PPUSH
72487: LD_INT 0
72489: PPUSH
72490: LD_INT 1
72492: PPUSH
72493: LD_INT 0
72495: PPUSH
72496: CALL_OW 587
// end ;
72500: LD_VAR 0 3
72504: RET
// export function CenterOnNow ( unit ) ; begin
72505: LD_INT 0
72507: PPUSH
// result := IsInUnit ( unit ) ;
72508: LD_ADDR_VAR 0 2
72512: PUSH
72513: LD_VAR 0 1
72517: PPUSH
72518: CALL_OW 310
72522: ST_TO_ADDR
// if not result then
72523: LD_VAR 0 2
72527: NOT
72528: IFFALSE 72540
// result := unit ;
72530: LD_ADDR_VAR 0 2
72534: PUSH
72535: LD_VAR 0 1
72539: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
72540: LD_VAR 0 1
72544: PPUSH
72545: CALL_OW 87
// end ; end_of_file
72549: LD_VAR 0 2
72553: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72554: LD_VAR 0 1
72558: PUSH
72559: LD_INT 200
72561: DOUBLE
72562: GREATEREQUAL
72563: IFFALSE 72571
72565: LD_INT 299
72567: DOUBLE
72568: LESSEQUAL
72569: IFTRUE 72573
72571: GO 72605
72573: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72574: LD_VAR 0 1
72578: PPUSH
72579: LD_VAR 0 2
72583: PPUSH
72584: LD_VAR 0 3
72588: PPUSH
72589: LD_VAR 0 4
72593: PPUSH
72594: LD_VAR 0 5
72598: PPUSH
72599: CALL 27171 0 5
72603: GO 72682
72605: LD_INT 300
72607: DOUBLE
72608: GREATEREQUAL
72609: IFFALSE 72617
72611: LD_INT 399
72613: DOUBLE
72614: LESSEQUAL
72615: IFTRUE 72619
72617: GO 72681
72619: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
72620: LD_VAR 0 1
72624: PPUSH
72625: LD_VAR 0 2
72629: PPUSH
72630: LD_VAR 0 3
72634: PPUSH
72635: LD_VAR 0 4
72639: PPUSH
72640: LD_VAR 0 5
72644: PPUSH
72645: LD_VAR 0 6
72649: PPUSH
72650: LD_VAR 0 7
72654: PPUSH
72655: LD_VAR 0 8
72659: PPUSH
72660: LD_VAR 0 9
72664: PPUSH
72665: LD_VAR 0 10
72669: PPUSH
72670: LD_VAR 0 11
72674: PPUSH
72675: CALL 23504 0 11
72679: GO 72682
72681: POP
// end ;
72682: PPOPN 11
72684: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72685: LD_VAR 0 1
72689: PPUSH
72690: LD_VAR 0 2
72694: PPUSH
72695: LD_VAR 0 3
72699: PPUSH
72700: LD_VAR 0 4
72704: PPUSH
72705: LD_VAR 0 5
72709: PPUSH
72710: CALL 26907 0 5
// end ; end_of_file
72714: PPOPN 5
72716: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
72717: LD_VAR 0 1
72721: PPUSH
72722: LD_VAR 0 2
72726: PPUSH
72727: LD_VAR 0 3
72731: PPUSH
72732: LD_VAR 0 4
72736: PPUSH
72737: LD_VAR 0 5
72741: PPUSH
72742: LD_VAR 0 6
72746: PPUSH
72747: CALL 11156 0 6
// end ;
72751: PPOPN 6
72753: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
72754: LD_INT 0
72756: PPUSH
// begin if not units then
72757: LD_VAR 0 1
72761: NOT
72762: IFFALSE 72766
// exit ;
72764: GO 72766
// end ;
72766: PPOPN 7
72768: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
72769: CALL 11060 0 0
// end ;
72773: PPOPN 1
72775: END
